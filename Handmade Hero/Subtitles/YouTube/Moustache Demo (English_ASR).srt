1
00:00:00,800 --> 00:00:06,778
hello everyone and thanks for joining me

2
00:00:04,019 --> 00:00:08,939
this is not an actual handmade hero

3
00:00:06,778 --> 00:00:12,990
stream we will be getting back to

4
00:00:08,939 --> 00:00:17,368
handmade hero shortly but I wanted to

5
00:00:12,990 --> 00:00:19,500
give a overview of an internal tool that

6
00:00:17,368 --> 00:00:24,268
I wrote a long time ago

7
00:00:19,500 --> 00:00:29,130
many years ago at rad 4 basically

8
00:00:24,268 --> 00:00:32,820
debugging video codecs it's the kind of

9
00:00:29,129 --> 00:00:34,950
thing that's if you've ever tried to

10
00:00:32,820 --> 00:00:37,170
work on something like a video codec

11
00:00:34,950 --> 00:00:39,690
then you kind of know that a regular

12
00:00:37,170 --> 00:00:41,489
debugger doesn't work very well for it

13
00:00:39,689 --> 00:00:45,058
because the things that you need to

14
00:00:41,488 --> 00:00:48,599
figure out and see are very hard to get

15
00:00:45,058 --> 00:00:51,479
the debugger to actually show you and my

16
00:00:48,600 --> 00:00:54,210
point of doing this demo is really not

17
00:00:51,479 --> 00:00:56,218
to show anyone how to debug a video

18
00:00:54,210 --> 00:00:59,698
codec or anything like that because I

19
00:00:56,219 --> 00:01:02,850
think that's a pretty specialized field

20
00:00:59,698 --> 00:01:05,250
of inquiry certainly but rather it's to

21
00:01:02,850 --> 00:01:07,409
give a demo of what I think were some

22
00:01:05,250 --> 00:01:11,430
pretty cool things we made for this

23
00:01:07,409 --> 00:01:13,830
purpose to show in a sense just how I

24
00:01:11,430 --> 00:01:17,850
don't want to use the word bad but just

25
00:01:13,829 --> 00:01:20,759
how little debuggers have actually done

26
00:01:17,849 --> 00:01:23,309
to get us what we need to to plug things

27
00:01:20,759 --> 00:01:25,228
if you think about what a typical

28
00:01:23,310 --> 00:01:26,519
debugger provides today it's basically

29
00:01:25,228 --> 00:01:30,450
exactly the same thing but a typical

30
00:01:26,519 --> 00:01:34,438
debugger provided in 1975 or something

31
00:01:30,450 --> 00:01:36,450
in 1985 let's say it really just doesn't

32
00:01:34,438 --> 00:01:38,839
have the ability to do almost anything

33
00:01:36,450 --> 00:01:42,180
else now some debuggers have added a few

34
00:01:38,840 --> 00:01:44,520
features that are new and are good such

35
00:01:42,180 --> 00:01:47,790
as being able to step backwards or

36
00:01:44,519 --> 00:01:49,590
checkpoint runs in memory this is a

37
00:01:47,790 --> 00:01:51,240
great feature and I'm really glad that a

38
00:01:49,590 --> 00:01:55,890
few debuggers have added it gdb and

39
00:01:51,239 --> 00:01:59,609
windbg being to that I can think of but

40
00:01:55,890 --> 00:02:02,069
if you think about how little you can

41
00:01:59,609 --> 00:02:04,769
really point to that they've added in

42
00:02:02,069 --> 00:02:07,949
20-30 years it's kind of too bad because

43
00:02:04,769 --> 00:02:09,780
debugging is very important software

44
00:02:07,950 --> 00:02:13,199
today has just as many bugs if not more

45
00:02:09,780 --> 00:02:13,530
than it used to and furthermore one

46
00:02:13,199 --> 00:02:15,568
thing we

47
00:02:13,530 --> 00:02:18,840
for sure is that software today is much

48
00:02:15,568 --> 00:02:22,469
larger and more unwieldy than software

49
00:02:18,840 --> 00:02:24,060
was back in the 1970s and 80s because

50
00:02:22,469 --> 00:02:28,530
computers today are much more powerful

51
00:02:24,060 --> 00:02:30,959
and can run much larger software and so

52
00:02:28,530 --> 00:02:34,979
what I'd like to do is just show what is

53
00:02:30,959 --> 00:02:37,229
possible even with an internal tool that

54
00:02:34,979 --> 00:02:38,579
has not had you know many man years of

55
00:02:37,229 --> 00:02:42,209
development behind it or anything like

56
00:02:38,580 --> 00:02:44,190
this and just to try to provide a little

57
00:02:42,209 --> 00:02:47,189
bit of inspiration for people working on

58
00:02:44,189 --> 00:02:50,879
debugging tools to say look there is a

59
00:02:47,189 --> 00:02:56,009
lot we could be doing to make debugging

60
00:02:50,879 --> 00:02:59,549
faster easier more powerful and able to

61
00:02:56,009 --> 00:03:01,590
find very difficult bugs in as easy a

62
00:02:59,550 --> 00:03:04,469
manner as we are currently finding

63
00:03:01,590 --> 00:03:07,469
simple bugs we just need the tools and

64
00:03:04,469 --> 00:03:09,479
no one's really providing them obviously

65
00:03:07,469 --> 00:03:10,889
I'm hoping that the rad debugger comes

66
00:03:09,479 --> 00:03:12,449
online soon and that it will have some

67
00:03:10,889 --> 00:03:14,568
of these rad has all the source code to

68
00:03:12,449 --> 00:03:17,969
this tool because I wrote it for them

69
00:03:14,568 --> 00:03:19,979
and of course the techniques that I'm

70
00:03:17,969 --> 00:03:22,379
going to show in here are not rocket

71
00:03:19,979 --> 00:03:24,929
science it's not like you have to have

72
00:03:22,379 --> 00:03:27,239
some kind of crazy knowledge of weird

73
00:03:24,930 --> 00:03:29,310
algorithms to do it it's just a question

74
00:03:27,239 --> 00:03:32,159
of having sat down and doing it so I

75
00:03:29,310 --> 00:03:33,420
think even just showing what some of

76
00:03:32,159 --> 00:03:35,250
these are it should be immediately

77
00:03:33,419 --> 00:03:36,809
obvious how people who are making

78
00:03:35,250 --> 00:03:40,169
debuggers could add these to the

79
00:03:36,810 --> 00:03:42,299
debuggers and furthermore this tool i'm

80
00:03:40,169 --> 00:03:44,250
gonna show you is not itself a debugger

81
00:03:42,299 --> 00:03:45,959
which means that if you were

82
00:03:44,250 --> 00:03:47,639
implementing these sorts of features

83
00:03:45,959 --> 00:03:49,379
inside the motor itself you could make

84
00:03:47,639 --> 00:03:52,199
them even better than the features that

85
00:03:49,379 --> 00:03:54,389
I made because you actually have process

86
00:03:52,199 --> 00:03:56,608
control and access to the debug info

87
00:03:54,389 --> 00:03:58,048
which is not something that we had when

88
00:03:56,609 --> 00:04:00,420
we were doing this particular tool

89
00:03:58,049 --> 00:04:03,090
because it was meant to run alongside an

90
00:04:00,419 --> 00:04:06,328
existing debugger that was doing those

91
00:04:03,090 --> 00:04:08,549
things all right so that's really the

92
00:04:06,329 --> 00:04:10,709
only point of this stream to sort of

93
00:04:08,549 --> 00:04:12,750
provide an example of what sorts of

94
00:04:10,709 --> 00:04:15,390
things you can do if in a debugger if

95
00:04:12,750 --> 00:04:16,918
you actually wanted to and so let me

96
00:04:15,389 --> 00:04:18,629
just go ahead and and sort of show you

97
00:04:16,918 --> 00:04:23,129
how this thing works

98
00:04:18,629 --> 00:04:23,629
and I wouldn't recommend using a wait or

99
00:04:23,129 --> 00:04:27,889
not

100
00:04:23,629 --> 00:04:30,079
hache we go I honestly wouldn't

101
00:04:27,889 --> 00:04:32,479
recommend the UI to this tool it's not

102
00:04:30,079 --> 00:04:36,560
good there is one part of it that's good

103
00:04:32,480 --> 00:04:40,460
most of it's awful so I'm talking more

104
00:04:36,560 --> 00:04:44,750
about the features here oh I didn't know

105
00:04:40,459 --> 00:04:46,539
there was a I whiteboard already okay

106
00:04:44,750 --> 00:04:48,410
well we'll clear that I didn't know

107
00:04:46,540 --> 00:04:51,830
let's clear that out

108
00:04:48,410 --> 00:04:54,170
yes clear the entire whiteboard so

109
00:04:51,829 --> 00:05:00,079
anyway I wouldn't recommend the UI at

110
00:04:54,170 --> 00:05:02,030
all it's not good so don't try not to

111
00:05:00,079 --> 00:05:08,000
take any inspiration from that if you

112
00:05:02,029 --> 00:05:09,079
can it's it's it's mostly bad there are

113
00:05:08,000 --> 00:05:10,730
a couple things in it that are

114
00:05:09,079 --> 00:05:12,649
interesting and I'll point them out but

115
00:05:10,730 --> 00:05:15,800
other than that I think most of the UI

116
00:05:12,649 --> 00:05:19,209
is just a bad idea and also as you'll

117
00:05:15,800 --> 00:05:21,980
see it's one of the reasons I'm not that

118
00:05:19,209 --> 00:05:23,449
into visual programming it just ends up

119
00:05:21,980 --> 00:05:25,879
especially if you already know how to do

120
00:05:23,449 --> 00:05:28,219
non visual programming it just ends up

121
00:05:25,879 --> 00:05:30,469
not being that good alright so let me

122
00:05:28,220 --> 00:05:33,380
start by explaining what mustache

123
00:05:30,470 --> 00:05:35,120
actually is so I'm gonna open up just

124
00:05:33,379 --> 00:05:38,360
our regular editor here this is for

125
00:05:35,120 --> 00:05:41,899
coder and I'm going to talk a little bit

126
00:05:38,360 --> 00:05:43,790
about what mustache actually does so you

127
00:05:41,899 --> 00:05:45,229
can see in here you'll have two I'm in

128
00:05:43,790 --> 00:05:46,340
the middle of some for coder upgrades

129
00:05:45,230 --> 00:05:47,810
which will actually do some streams

130
00:05:46,339 --> 00:05:51,169
about to have to excuse my horrible

131
00:05:47,810 --> 00:05:53,329
colors I have some debug color set to

132
00:05:51,170 --> 00:05:57,379
see if my new syntax highlighting

133
00:05:53,329 --> 00:05:59,449
implemented works properly but so yeah

134
00:05:57,379 --> 00:06:02,329
the colors ain't great but if you look

135
00:05:59,449 --> 00:06:04,639
in here you can see a example program

136
00:06:02,329 --> 00:06:07,279
that I'll sort of point out how mustache

137
00:06:04,639 --> 00:06:09,800
is designed to work so basically this

138
00:06:07,279 --> 00:06:12,199
entire program is just a regular program

139
00:06:09,800 --> 00:06:14,300
it's anything you want so you you can

140
00:06:12,199 --> 00:06:17,029
imagine having your own program whatever

141
00:06:14,300 --> 00:06:21,079
it is doesn't matter and the only thing

142
00:06:17,029 --> 00:06:23,839
that makes it mustache enabled is just

143
00:06:21,079 --> 00:06:26,569
including this one header file if you

144
00:06:23,839 --> 00:06:29,419
include mustache client dot H you get

145
00:06:26,569 --> 00:06:31,550
all the features of mustache and again

146
00:06:29,420 --> 00:06:33,319
this is really important I'll just harp

147
00:06:31,550 --> 00:06:35,210
on it for a second if you're gonna make

148
00:06:33,319 --> 00:06:37,248
a debug tool it has to be easy to use

149
00:06:35,209 --> 00:06:39,468
and there's nothing easier to use than

150
00:06:37,249 --> 00:06:41,629
literally just an h-file that you just

151
00:06:39,468 --> 00:06:44,149
include don't make me link with the

152
00:06:41,629 --> 00:06:46,579
library don't make me open a DLL don't

153
00:06:44,149 --> 00:06:48,528
make me do anything just include one

154
00:06:46,579 --> 00:06:51,348
thing and then let me access all the

155
00:06:48,528 --> 00:06:53,358
features I've said it a million times

156
00:06:51,348 --> 00:06:55,278
it's just that's very important and that

157
00:06:53,358 --> 00:06:57,829
way you just have to copy one file into

158
00:06:55,278 --> 00:06:59,209
your project mustache client @h and you

159
00:06:57,829 --> 00:07:02,658
just pound include it when you want to

160
00:06:59,209 --> 00:07:04,728
use it and that's all there is all right

161
00:07:02,658 --> 00:07:07,069
so what features does this mustache

162
00:07:04,728 --> 00:07:09,709
client that H give you well the theory

163
00:07:07,069 --> 00:07:13,278
behind mustache was printf debugging is

164
00:07:09,709 --> 00:07:14,869
really great in one way right you all

165
00:07:13,278 --> 00:07:16,728
know printf debugging right it's when we

166
00:07:14,869 --> 00:07:19,159
just start dumping things to printf and

167
00:07:16,728 --> 00:07:20,838
then we try to find the bug by seeing

168
00:07:19,158 --> 00:07:22,248
what we print it out and figuring out

169
00:07:20,838 --> 00:07:23,949
like where the crash happens is that

170
00:07:22,249 --> 00:07:26,360
right right

171
00:07:23,949 --> 00:07:27,949
well the observation mind mustache was

172
00:07:26,360 --> 00:07:30,499
printed debugging is actually really

173
00:07:27,949 --> 00:07:32,449
good in some sense and the thing that

174
00:07:30,499 --> 00:07:35,509
it's really good at is it provides you a

175
00:07:32,449 --> 00:07:36,859
log of what happened and this is

176
00:07:35,509 --> 00:07:39,468
actually something that debuggers are

177
00:07:36,858 --> 00:07:41,508
very bad at right a debugger show you

178
00:07:39,468 --> 00:07:43,338
know you're stepping through it your

179
00:07:41,509 --> 00:07:45,408
brain is the thing that would have to

180
00:07:43,338 --> 00:07:46,819
remember the log of what happened and if

181
00:07:45,408 --> 00:07:48,468
you're talking about millions of lines

182
00:07:46,819 --> 00:07:51,319
of code having executed you can't watch

183
00:07:48,468 --> 00:07:52,519
all that so the thing that printed the

184
00:07:51,319 --> 00:07:56,059
buggy is really good at is sort of

185
00:07:52,519 --> 00:07:58,158
creating this log of what happened but

186
00:07:56,059 --> 00:07:59,329
then the question is well why don't we

187
00:07:58,158 --> 00:08:00,738
just always use printed debugging that's

188
00:07:59,329 --> 00:08:02,929
so great and the answer is because

189
00:08:00,738 --> 00:08:05,538
modern programs are way too complicate

190
00:08:02,928 --> 00:08:07,488
you couldn't you just have reams of

191
00:08:05,538 --> 00:08:09,199
printf and it would just become exactly

192
00:08:07,488 --> 00:08:11,328
as complicated as having a step through

193
00:08:09,199 --> 00:08:14,658
the whole program that doesn't get you

194
00:08:11,329 --> 00:08:17,259
anything the thought behind mustache was

195
00:08:14,658 --> 00:08:20,209
what if mustache could build a printf

196
00:08:17,259 --> 00:08:24,439
that was actually far more powerful and

197
00:08:20,209 --> 00:08:26,929
did two main things one it could print

198
00:08:24,439 --> 00:08:30,229
anything so not just text it could print

199
00:08:26,928 --> 00:08:31,878
images it could print matrices anything

200
00:08:30,228 --> 00:08:33,918
that you wanted to that was structured

201
00:08:31,879 --> 00:08:36,769
it could actually print that so instead

202
00:08:33,918 --> 00:08:39,139
of just a blank log of stuff it could

203
00:08:36,769 --> 00:08:42,828
print data as well and that data would

204
00:08:39,139 --> 00:08:45,049
be understood that's thing one thing too

205
00:08:42,828 --> 00:08:47,058
and that solves the problem of how do I

206
00:08:45,049 --> 00:08:48,979
printf an image right you know for just

207
00:08:47,058 --> 00:08:50,480
using a real printf debugging an image

208
00:08:48,980 --> 00:08:50,970
is just a stream of numbers you can't

209
00:08:50,480 --> 00:08:52,379
it's

210
00:08:50,970 --> 00:08:55,110
huge its massive you can't make any

211
00:08:52,379 --> 00:08:57,899
sense of it right well if you know solve

212
00:08:55,110 --> 00:09:00,149
that problem this way so datasize solved

213
00:08:57,899 --> 00:09:03,360
this way but think to which is

214
00:09:00,149 --> 00:09:06,929
complexity how about we make it so that

215
00:09:03,360 --> 00:09:10,019
the logs can be spatially queried based

216
00:09:06,929 --> 00:09:12,419
on the memory that they affect so for

217
00:09:10,019 --> 00:09:14,310
example let's suppose we could do a ton

218
00:09:12,419 --> 00:09:16,828
of printf to say what happened to things

219
00:09:14,309 --> 00:09:20,638
but as we were doing them we said which

220
00:09:16,828 --> 00:09:23,549
pixels were being operated on and then

221
00:09:20,639 --> 00:09:27,810
we could just query that one pixel so

222
00:09:23,549 --> 00:09:30,568
instead of 1920 x 1080 times every step

223
00:09:27,809 --> 00:09:32,878
in the process being how many printf so

224
00:09:30,568 --> 00:09:34,919
we have to look at which would never

225
00:09:32,879 --> 00:09:37,589
work instead we just click on the one

226
00:09:34,919 --> 00:09:39,659
pixel that's wrong in our video and it

227
00:09:37,589 --> 00:09:42,509
would just show us all the things that

228
00:09:39,659 --> 00:09:44,219
happen to that pixel right then it's

229
00:09:42,509 --> 00:09:46,169
like shooting fish in a barrel oh I see

230
00:09:44,220 --> 00:09:48,350
it went through this transform and that

231
00:09:46,169 --> 00:09:50,909
transform was wrong or something right

232
00:09:48,350 --> 00:09:53,220
does that make sense so that's the idea

233
00:09:50,909 --> 00:09:54,750
behind this tool and so you include

234
00:09:53,220 --> 00:09:57,089
moustache client and then what it gives

235
00:09:54,750 --> 00:10:00,480
you is a printf called stash F here

236
00:09:57,089 --> 00:10:03,569
which you can see and stash F itself is

237
00:10:00,480 --> 00:10:06,720
a thing which implements printf in a way

238
00:10:03,568 --> 00:10:08,490
that provides all these features so for

239
00:10:06,720 --> 00:10:10,439
example you can use it the way you would

240
00:10:08,490 --> 00:10:13,500
normally use it meaning if you just

241
00:10:10,438 --> 00:10:15,509
switch a printf to a stash F it would do

242
00:10:13,500 --> 00:10:18,360
it right so you don't have to do

243
00:10:15,509 --> 00:10:19,919
anything different there but then it

244
00:10:18,360 --> 00:10:21,480
also has some other things you can also

245
00:10:19,919 --> 00:10:24,179
see some things here where we talk about

246
00:10:21,480 --> 00:10:25,709
you you can use it to like get input

247
00:10:24,179 --> 00:10:27,299
back or things like that if you want to

248
00:10:25,708 --> 00:10:30,508
like a scanf as well but that's sort of

249
00:10:27,299 --> 00:10:32,429
a separate thing and nautically relevant

250
00:10:30,509 --> 00:10:33,839
you can also do like nesting in groups

251
00:10:32,429 --> 00:10:36,000
and stuff like that so it has a few of

252
00:10:33,839 --> 00:10:37,800
the things but mostly the power comes

253
00:10:36,000 --> 00:10:40,078
from being able to do stash chefs like

254
00:10:37,799 --> 00:10:41,909
this and you can see here that when you

255
00:10:40,078 --> 00:10:44,818
do a stash if you can say I'm going to

256
00:10:41,909 --> 00:10:46,318
print something like a matrix here and

257
00:10:44,818 --> 00:10:47,519
then you can pass all these sorts of

258
00:10:46,318 --> 00:10:50,009
things to it that are like more

259
00:10:47,519 --> 00:10:51,419
complicated so you can pass like the

260
00:10:50,009 --> 00:10:53,068
width and height of an image or

261
00:10:51,419 --> 00:10:55,110
rectangle and then like you can pass

262
00:10:53,068 --> 00:10:56,759
some plain data in so here are some of

263
00:10:55,110 --> 00:10:58,500
the planes of the image it'll gather

264
00:10:56,759 --> 00:11:00,178
those up you can say like what format

265
00:10:58,500 --> 00:11:03,328
they're in like you nor more whatever

266
00:11:00,178 --> 00:11:04,740
right different kind of styles of things

267
00:11:03,328 --> 00:11:08,189
that you want to talk about

268
00:11:04,740 --> 00:11:10,019
pixels and so you do some of those

269
00:11:08,190 --> 00:11:11,880
things you can issue break points which

270
00:11:10,019 --> 00:11:15,088
are basically saying if I get here stop

271
00:11:11,879 --> 00:11:16,200
everything and wait you know in the tool

272
00:11:15,089 --> 00:11:18,779
when you're viewing these things and

273
00:11:16,200 --> 00:11:21,270
then we also have some stuff like I

274
00:11:18,778 --> 00:11:23,759
saying for tracing it's I use the term

275
00:11:21,269 --> 00:11:25,559
deep memory for it and the reason that I

276
00:11:23,759 --> 00:11:29,309
call it deep memory is because basically

277
00:11:25,559 --> 00:11:32,699
it allows you to write to the same sort

278
00:11:29,309 --> 00:11:35,909
of pieces of of the log it allows you to

279
00:11:32,700 --> 00:11:38,700
say look as I move memory around I'm

280
00:11:35,909 --> 00:11:41,250
gonna tell you where I move the memory

281
00:11:38,700 --> 00:11:43,259
to like if I do a mem copy I'll do I'll

282
00:11:41,250 --> 00:11:45,330
tell you that or I'll point to the

283
00:11:43,259 --> 00:11:48,000
memory that I'm referring to and then

284
00:11:45,330 --> 00:11:50,850
when I printf into that if later you're

285
00:11:48,000 --> 00:11:53,759
ever trying to inspect something that

286
00:11:50,850 --> 00:11:56,129
touches that memory go pull all of that

287
00:11:53,759 --> 00:11:58,259
history back so I can see all of the

288
00:11:56,129 --> 00:12:01,259
steps that the data went through to get

289
00:11:58,259 --> 00:12:03,899
to where it was and so the way that that

290
00:12:01,259 --> 00:12:07,740
works is things like this so this thing

291
00:12:03,899 --> 00:12:09,690
is a stash F that says oh here is a

292
00:12:07,740 --> 00:12:11,430
chunk of memory and I'm transforming it

293
00:12:09,690 --> 00:12:13,770
to this other chunk of memory and you

294
00:12:11,429 --> 00:12:16,889
could pass these two things here that's

295
00:12:13,769 --> 00:12:18,629
specified it right and so when anytime

296
00:12:16,889 --> 00:12:20,458
you did a stash if that related to

297
00:12:18,629 --> 00:12:22,578
pieces of memory together it would know

298
00:12:20,458 --> 00:12:28,189
it could search back through that chain

299
00:12:22,578 --> 00:12:28,189
again for some reason we were really

300
00:12:29,328 --> 00:12:35,069
probably overly specific about always

301
00:12:33,000 --> 00:12:37,649
making everything go through stash F so

302
00:12:35,070 --> 00:12:41,160
there's like one function it's just that

303
00:12:37,649 --> 00:12:42,870
one probably wasn't really necessary we

304
00:12:41,159 --> 00:12:46,199
probably could have called this stash

305
00:12:42,870 --> 00:12:48,379
copy and not how to imply that to things

306
00:12:46,200 --> 00:12:50,850
that happen on the same line or related

307
00:12:48,379 --> 00:12:52,500
you can see why there's some things I

308
00:12:50,850 --> 00:12:55,139
say like maybe don't copy the user

309
00:12:52,500 --> 00:12:56,850
interface either the API or that because

310
00:12:55,139 --> 00:12:59,458
this was not a shipping project this was

311
00:12:56,850 --> 00:13:01,620
internal only so you need other things

312
00:12:59,458 --> 00:13:05,099
you can have diagrams here right like

313
00:13:01,620 --> 00:13:08,970
here's ability to just draw on top of a

314
00:13:05,100 --> 00:13:10,470
diagram on top of the of an image right

315
00:13:08,970 --> 00:13:11,970
you could you could just say like hey

316
00:13:10,470 --> 00:13:14,389
I'm gonna start drawing on top of this

317
00:13:11,970 --> 00:13:17,490
thing that I just output right like here

318
00:13:14,389 --> 00:13:18,720
and things like that so you know it's

319
00:13:17,490 --> 00:13:20,490
got other features in there

320
00:13:18,720 --> 00:13:22,500
that worked printf based where you could

321
00:13:20,490 --> 00:13:25,620
basically use like OpenGL essentially to

322
00:13:22,500 --> 00:13:27,929
draw things to it and it just goes on

323
00:13:25,620 --> 00:13:30,629
and on right so you know lots of things

324
00:13:27,929 --> 00:13:32,549
you can stash F and so on so this is all

325
00:13:30,629 --> 00:13:33,929
again just regular code you could do

326
00:13:32,549 --> 00:13:36,509
this anywhere in your project you could

327
00:13:33,929 --> 00:13:37,109
just call the stash F thing and that

328
00:13:36,509 --> 00:13:38,519
would be it

329
00:13:37,110 --> 00:13:39,960
and again the only thing you had to do

330
00:13:38,519 --> 00:13:45,269
to enable that was include mustache

331
00:13:39,960 --> 00:13:48,120
client now mustache client again is just

332
00:13:45,269 --> 00:13:50,279
a header file that influenced this stuff

333
00:13:48,120 --> 00:13:52,649
right so it gives you all of the structs

334
00:13:50,279 --> 00:13:55,289
you need for this and then it has the

335
00:13:52,649 --> 00:13:57,929
code necessary in to do socket

336
00:13:55,289 --> 00:14:03,000
transmission right out of here and it

337
00:13:57,929 --> 00:14:07,739
worked on like it worked on the win32

338
00:14:03,000 --> 00:14:13,639
and on xbox360 um I don't know that it

339
00:14:07,740 --> 00:14:16,259
worked on PlayStation ever it might I

340
00:14:13,639 --> 00:14:21,389
can't recall whether anyone actually

341
00:14:16,259 --> 00:14:25,319
tried it we probably did but don't quote

342
00:14:21,389 --> 00:14:27,720
me on that so anyway once you have a

343
00:14:25,320 --> 00:14:31,920
program that supports mustache and it's

344
00:14:27,720 --> 00:14:34,470
going to do the the debug output to

345
00:14:31,919 --> 00:14:36,169
mustache and you want to use it then the

346
00:14:34,470 --> 00:14:38,910
way that it works is you run this little

347
00:14:36,169 --> 00:14:40,949
server and in fact this window is not

348
00:14:38,909 --> 00:14:42,839
really that necessary in a sense what

349
00:14:40,950 --> 00:14:44,370
actually happens and you can't see it I

350
00:14:42,840 --> 00:14:48,120
could make it so that you could see it

351
00:14:44,370 --> 00:14:52,019
in a second here let me unlock this

352
00:14:48,120 --> 00:14:54,419
taskbar there you go so you can see that

353
00:14:52,019 --> 00:14:57,149
it creates a little mustache icon up

354
00:14:54,419 --> 00:15:01,679
here that just sits in the SIS tray

355
00:14:57,149 --> 00:15:04,740
right and then if you run a program like

356
00:15:01,679 --> 00:15:07,349
that mustache client test that we had if

357
00:15:04,740 --> 00:15:09,570
you run a program like that what it

358
00:15:07,350 --> 00:15:12,930
would do is it'll actually them I have

359
00:15:09,570 --> 00:15:14,790
no idea what that is about okay

360
00:15:12,929 --> 00:15:16,349
it's basically completing it couldn't

361
00:15:14,789 --> 00:15:19,079
find one of the source files maybe I

362
00:15:16,350 --> 00:15:20,790
didn't copy it over I'm not sure but

363
00:15:19,080 --> 00:15:23,759
anyway once you run one of these things

364
00:15:20,789 --> 00:15:28,379
it runs and if this thing was running

365
00:15:23,759 --> 00:15:31,200
then what it would do is it will it will

366
00:15:28,379 --> 00:15:33,559
capture all of that output so you don't

367
00:15:31,200 --> 00:15:36,570
actually have to

368
00:15:33,559 --> 00:15:38,009
you don't have to be aware of mustache

369
00:15:36,570 --> 00:15:39,690
really in general just kind of sits

370
00:15:38,009 --> 00:15:42,269
there and captures everything that you

371
00:15:39,690 --> 00:15:43,770
dump to it now this had input and output

372
00:15:42,269 --> 00:15:45,269
and breakpoint testing in it so you can

373
00:15:43,769 --> 00:15:46,500
see that this program hasn't completed

374
00:15:45,269 --> 00:15:48,509
the reason is because it's actually

375
00:15:46,500 --> 00:15:52,259
waiting for mustache to tell it it's

376
00:15:48,509 --> 00:15:53,759
okay to complete but if you were using a

377
00:15:52,259 --> 00:15:56,789
program that wasn't testing and putting

378
00:15:53,759 --> 00:15:58,500
output or didn't have him input in it it

379
00:15:56,789 --> 00:16:00,959
would have just completed and mustache

380
00:15:58,500 --> 00:16:03,360
would save the data and in fact we can

381
00:16:00,960 --> 00:16:05,610
if we want to just kill the app and

382
00:16:03,360 --> 00:16:07,200
that's fine and then I can run it again

383
00:16:05,610 --> 00:16:11,610
if I want to I can run it as many times

384
00:16:07,200 --> 00:16:14,280
as I want and so on right now all of

385
00:16:11,610 --> 00:16:17,759
those runs actually get captured by

386
00:16:14,279 --> 00:16:19,589
mustache okay so they're sitting in here

387
00:16:17,759 --> 00:16:21,269
waiting for us to use now again I said

388
00:16:19,590 --> 00:16:23,639
the who I isn't great let me show you

389
00:16:21,269 --> 00:16:25,259
how it works what happens is you draw

390
00:16:23,639 --> 00:16:27,210
these little nodes here look I just drew

391
00:16:25,259 --> 00:16:28,649
where I wanted this new node to go and

392
00:16:27,210 --> 00:16:31,860
then you can pick what kind of node you

393
00:16:28,649 --> 00:16:33,750
actually want on a big process list and

394
00:16:31,860 --> 00:16:34,860
of course what process list does or it

395
00:16:33,750 --> 00:16:39,029
maybe I shouldn't have made it quite

396
00:16:34,860 --> 00:16:40,470
that big what process list does is

397
00:16:39,029 --> 00:16:44,220
exactly what it sounds like it does it

398
00:16:40,470 --> 00:16:48,389
lists all the process the processes that

399
00:16:44,220 --> 00:16:51,240
have that have been run right so here

400
00:16:48,389 --> 00:16:52,620
they are and you can see all the runs of

401
00:16:51,240 --> 00:16:54,870
this program remember I ran it three

402
00:16:52,620 --> 00:16:57,029
times well here are the three runs right

403
00:16:54,870 --> 00:16:58,679
and each of these processes is

404
00:16:57,029 --> 00:17:00,029
selectable you can see like I've got

405
00:16:58,679 --> 00:17:03,059
them and it tells me like when they were

406
00:17:00,029 --> 00:17:05,399
run right it's pretty straightforward

407
00:17:03,059 --> 00:17:06,079
hopefully this makes good sense to

408
00:17:05,400 --> 00:17:09,420
everyone

409
00:17:06,079 --> 00:17:12,629
now I think there's a way in here you

410
00:17:09,420 --> 00:17:14,370
could filter like if I only wanted like

411
00:17:12,630 --> 00:17:15,630
a particular thing I could type like

412
00:17:14,369 --> 00:17:19,049
client

413
00:17:15,630 --> 00:17:20,130
oops star client star and then it would

414
00:17:19,049 --> 00:17:22,200
show me only things that match that

415
00:17:20,130 --> 00:17:24,420
pattern I don't have different I only

416
00:17:22,200 --> 00:17:26,430
ran like one executable name so that's

417
00:17:24,420 --> 00:17:27,839
never gonna do anything but if you had

418
00:17:26,430 --> 00:17:29,970
like lots of different acute herbals and

419
00:17:27,838 --> 00:17:31,500
you wanted to just focus on runs of one

420
00:17:29,970 --> 00:17:33,990
type of executable you could filter it

421
00:17:31,500 --> 00:17:36,059
there which is kind of nice right um so

422
00:17:33,990 --> 00:17:37,559
now like I said this is one of those

423
00:17:36,059 --> 00:17:39,629
kind of crappy visual programming

424
00:17:37,559 --> 00:17:41,339
language things and I don't ask me why I

425
00:17:39,630 --> 00:17:45,240
made it this way I don't have an

426
00:17:41,339 --> 00:17:47,230
explanation it's just I don't know but

427
00:17:45,240 --> 00:17:49,240
what you could do is you can

428
00:17:47,230 --> 00:17:52,329
any output of an ode to like the input

429
00:17:49,240 --> 00:17:54,490
of any other node right so in this case

430
00:17:52,329 --> 00:17:56,079
I'm you know this thing is like a picker

431
00:17:54,490 --> 00:17:58,359
essentially right I can pick these

432
00:17:56,079 --> 00:18:00,849
processes from the list and then this

433
00:17:58,359 --> 00:18:03,939
node is a thing that displays data about

434
00:18:00,849 --> 00:18:05,980
the process in question so anything that

435
00:18:03,940 --> 00:18:07,539
you connect it to it will look at what

436
00:18:05,980 --> 00:18:10,690
process ran it and tell you about the

437
00:18:07,539 --> 00:18:12,579
process so this is nice right and I wish

438
00:18:10,690 --> 00:18:15,250
the buggers did this in general this

439
00:18:12,579 --> 00:18:18,428
just saves all of the runs that I did

440
00:18:15,250 --> 00:18:20,980
right and it tells me what they were

441
00:18:18,429 --> 00:18:24,640
really right says you know here was the

442
00:18:20,980 --> 00:18:27,460
process here's the executable that got

443
00:18:24,640 --> 00:18:29,470
ran here's how big the excuted was what

444
00:18:27,460 --> 00:18:32,048
the date was it when I executed it

445
00:18:29,470 --> 00:18:35,860
what machine ran it because this is this

446
00:18:32,048 --> 00:18:38,679
supports tcp/ip discovery and stuff so

447
00:18:35,859 --> 00:18:40,058
if you ran this on another machine it

448
00:18:38,679 --> 00:18:43,830
would connect to this mustache server

449
00:18:40,058 --> 00:18:46,178
and give it the data which was nice umm

450
00:18:43,829 --> 00:18:47,379
you know it tells you what hardware was

451
00:18:46,179 --> 00:18:49,330
running on and all that sort of thing

452
00:18:47,380 --> 00:18:51,190
right it tells you how many threads

453
00:18:49,329 --> 00:18:52,859
output it to mustache as well in case

454
00:18:51,190 --> 00:18:57,910
you were curious about that or whatever

455
00:18:52,859 --> 00:18:58,959
so again even just I haven't gotten any

456
00:18:57,910 --> 00:19:01,058
of the features of mustache that I

457
00:18:58,960 --> 00:19:03,370
really want to talk about yet but even

458
00:19:01,058 --> 00:19:05,589
just this I don't have a debugger that

459
00:19:03,369 --> 00:19:07,000
does any of this right I don't have a

460
00:19:05,589 --> 00:19:09,399
debugger that just sits there and

461
00:19:07,000 --> 00:19:12,429
remembers runs of programs and allows me

462
00:19:09,400 --> 00:19:14,140
to like know what the output of was of

463
00:19:12,429 --> 00:19:16,480
the programs even to the console of

464
00:19:14,140 --> 00:19:19,210
multiple runs I don't have any of that

465
00:19:16,480 --> 00:19:21,759
right so even just this basic first step

466
00:19:19,210 --> 00:19:25,808
is like way better than any debugger

467
00:19:21,759 --> 00:19:27,839
that I have which is not good right this

468
00:19:25,808 --> 00:19:30,279
should just be par for the course

469
00:19:27,839 --> 00:19:32,589
computers have like infinite storage and

470
00:19:30,279 --> 00:19:36,039
infinite memory these days like remember

471
00:19:32,589 --> 00:19:37,119
everything right and mustache did it

472
00:19:36,039 --> 00:19:37,839
remembered absolutely everything you

473
00:19:37,119 --> 00:19:39,668
ever did

474
00:19:37,839 --> 00:19:41,558
you could go right back to the first run

475
00:19:39,669 --> 00:19:43,840
of 2 and see everything that it out

476
00:19:41,558 --> 00:19:45,369
put it in you know why don't we have

477
00:19:43,839 --> 00:19:47,769
that that should just be how did buggers

478
00:19:45,369 --> 00:19:49,899
work I'll buy a bigger drive I'll keep

479
00:19:47,769 --> 00:19:53,829
throwing 8 terabyte drives that you

480
00:19:49,900 --> 00:19:56,559
store my data right ok

481
00:19:53,829 --> 00:19:58,629
so but that's not that interesting right

482
00:19:56,558 --> 00:20:00,069
because you know all that's telling me

483
00:19:58,630 --> 00:20:01,420
is some basic things about a run

484
00:20:00,069 --> 00:20:03,509
program what I want to do is start

485
00:20:01,420 --> 00:20:06,670
looking like what that program actually

486
00:20:03,509 --> 00:20:09,160
output right so we have a node called

487
00:20:06,670 --> 00:20:11,080
listing and what a listing node is is a

488
00:20:09,160 --> 00:20:15,700
node that if you hook it up to any

489
00:20:11,079 --> 00:20:17,980
process that you've selected right then

490
00:20:15,700 --> 00:20:21,460
it can tell you what that thing output

491
00:20:17,980 --> 00:20:23,650
so this is the actual output from that

492
00:20:21,460 --> 00:20:28,450
program so every time that you called

493
00:20:23,650 --> 00:20:31,710
stash F this is what was there this is

494
00:20:28,450 --> 00:20:34,420
all the stuff that was was in stash F

495
00:20:31,710 --> 00:20:37,480
and so what you can see here is that

496
00:20:34,420 --> 00:20:39,730
this program and actually all of them

497
00:20:37,480 --> 00:20:42,700
stopped on that line right and I can

498
00:20:39,730 --> 00:20:44,799
pick these programs separately and we

499
00:20:42,700 --> 00:20:46,269
can see them and you can see like so if

500
00:20:44,799 --> 00:20:49,180
I jump back to this program for example

501
00:20:46,269 --> 00:20:52,599
I don't know if it actually one of the

502
00:20:49,180 --> 00:20:57,039
things that's kind of annoying about the

503
00:20:52,599 --> 00:21:00,129
way that mustache happened to work is we

504
00:20:57,039 --> 00:21:03,909
didn't patch in an exception handler to

505
00:21:00,130 --> 00:21:05,920
it so if you control seed and it hadn't

506
00:21:03,910 --> 00:21:07,870
flushed the buffer yet you didn't get

507
00:21:05,920 --> 00:21:10,930
the buffer so there's a couple things

508
00:21:07,869 --> 00:21:12,879
like that that like aren't great but

509
00:21:10,930 --> 00:21:16,570
what we would do is in our program we

510
00:21:12,880 --> 00:21:18,400
just put a like a catch-all handler

511
00:21:16,569 --> 00:21:21,129
around the whole thing and call stash

512
00:21:18,400 --> 00:21:22,660
flush in the case of a crash so when

513
00:21:21,130 --> 00:21:24,720
these where I control seed it we may not

514
00:21:22,660 --> 00:21:28,360
have gotten the data which is less good

515
00:21:24,720 --> 00:21:31,029
but that's just yeah that's just how it

516
00:21:28,359 --> 00:21:32,500
goes sometimes you could do better than

517
00:21:31,029 --> 00:21:36,430
that you could do better than what we

518
00:21:32,500 --> 00:21:38,410
did so I believe here where we're

519
00:21:36,430 --> 00:21:42,039
outputting these things this program is

520
00:21:38,410 --> 00:21:44,860
paused you can hit f5 inside mustache

521
00:21:42,039 --> 00:21:46,930
and you can see like it will output like

522
00:21:44,859 --> 00:21:49,599
there's that's how you continue the

523
00:21:46,930 --> 00:21:52,450
program and again that was if you put

524
00:21:49,599 --> 00:21:55,089
stash breakpoint that's all that is is a

525
00:21:52,450 --> 00:21:58,090
thing that that's there to try and let

526
00:21:55,089 --> 00:21:59,980
you Brittany oh stop in mustache when

527
00:21:58,089 --> 00:22:01,329
you want to stop in mustache because we

528
00:21:59,980 --> 00:22:02,650
would have situations where we were

529
00:22:01,329 --> 00:22:04,449
working on Bank where we're like okay we

530
00:22:02,650 --> 00:22:06,670
want to get to this frame and then stop

531
00:22:04,450 --> 00:22:08,950
in mustache so that's what that was and

532
00:22:06,670 --> 00:22:10,360
the little red bar is what would tell

533
00:22:08,950 --> 00:22:13,840
you that it was like this was a thing

534
00:22:10,359 --> 00:22:16,509
where we stopped now you can also drag

535
00:22:13,839 --> 00:22:20,019
this little weird nub here over to look

536
00:22:16,509 --> 00:22:22,930
at information about the thread so when

537
00:22:20,019 --> 00:22:25,389
mustache outputted this information this

538
00:22:22,930 --> 00:22:27,519
was the process or that the thread was

539
00:22:25,390 --> 00:22:29,770
running on so for example this is

540
00:22:27,519 --> 00:22:31,029
running on processor to processor means

541
00:22:29,769 --> 00:22:33,069
logical processor so in this case it

542
00:22:31,029 --> 00:22:35,889
means core to obviously there's only one

543
00:22:33,069 --> 00:22:38,139
trust sir in this machine and this was

544
00:22:35,890 --> 00:22:39,730
the thread ID which is thread ID 58 now

545
00:22:38,140 --> 00:22:42,100
there's only one thread in this test

546
00:22:39,730 --> 00:22:43,589
code I think if you don't call the

547
00:22:42,099 --> 00:22:46,059
thread test which I don't think we did

548
00:22:43,589 --> 00:22:47,649
so it's always gonna be thread 58 but

549
00:22:46,059 --> 00:22:49,329
the presser jumps around because hey

550
00:22:47,650 --> 00:22:50,920
Windows can jump us around anywhere it

551
00:22:49,329 --> 00:22:54,069
wants to we didn't try to lock down an

552
00:22:50,920 --> 00:22:55,779
affinity or anything so here's all the

553
00:22:54,069 --> 00:22:59,230
printf and as you can see like by

554
00:22:55,779 --> 00:23:00,460
default all mustache will do if you just

555
00:22:59,230 --> 00:23:03,069
have a listing notice just give you a

556
00:23:00,460 --> 00:23:06,390
printf that's not very interesting but

557
00:23:03,069 --> 00:23:09,009
it is you know what mustache does right

558
00:23:06,390 --> 00:23:10,420
so you got that basic in there and it's

559
00:23:09,009 --> 00:23:13,359
a little bit better than a printf right

560
00:23:10,420 --> 00:23:15,940
I can collapse things right and stuff

561
00:23:13,359 --> 00:23:17,769
like that there's some weirdness I don't

562
00:23:15,940 --> 00:23:19,720
remember all the key combinations

563
00:23:17,769 --> 00:23:22,119
there's like some key combinations you

564
00:23:19,720 --> 00:23:23,710
can use to like collapse stuff and not

565
00:23:22,119 --> 00:23:27,099
have to do what I'm doing here weird to

566
00:23:23,710 --> 00:23:29,250
like scroll back and forth and I really

567
00:23:27,099 --> 00:23:33,219
just don't remember what they all are so

568
00:23:29,250 --> 00:23:34,900
some of this stuff is is you would want

569
00:23:33,220 --> 00:23:37,360
there to be mouse input for and we don't

570
00:23:34,900 --> 00:23:38,680
have it so I apologize for that I'm

571
00:23:37,359 --> 00:23:40,659
gonna get into situations where I'm like

572
00:23:38,680 --> 00:23:41,620
I don't know how to fix this thing and

573
00:23:40,660 --> 00:23:44,710
so that's my fault

574
00:23:41,619 --> 00:23:46,539
but point being there's a bunch of

575
00:23:44,710 --> 00:23:50,620
things that can sort of do that you that

576
00:23:46,539 --> 00:23:55,089
are different from a regular printf but

577
00:23:50,619 --> 00:23:56,829
that's not that important it's it's fun

578
00:23:55,089 --> 00:23:58,839
to have collapsible things but and

579
00:23:56,829 --> 00:24:00,669
they're good for certain situations

580
00:23:58,839 --> 00:24:03,419
certainly but that's not one of the more

581
00:24:00,670 --> 00:24:06,750
interesting parts of mustache certainly

582
00:24:03,420 --> 00:24:10,210
so there's a couple of the things I

583
00:24:06,750 --> 00:24:12,009
might go ahead and show you I as well

584
00:24:10,210 --> 00:24:16,870
here so this was one run of the program

585
00:24:12,009 --> 00:24:18,609
right and I don't know what the status

586
00:24:16,869 --> 00:24:21,879
of this is here but let me see if I can

587
00:24:18,609 --> 00:24:28,049
recompile mustache client

588
00:24:21,880 --> 00:24:31,720
test dot C as well so it needs

589
00:24:28,049 --> 00:24:36,940
it needs like what like windsock so I

590
00:24:31,720 --> 00:24:39,420
don't remember windsock lib windsock

591
00:24:36,940 --> 00:24:47,529
what's wind socks library handle anyone

592
00:24:39,420 --> 00:24:55,330
inside is it w sock 32 W sock 32 maybe

593
00:24:47,529 --> 00:25:01,470
yeah I'm not sure okay and then we just

594
00:24:55,329 --> 00:25:06,849
need like you know user 32 and Oh add

595
00:25:01,470 --> 00:25:12,190
that be who's the registry yeah get

596
00:25:06,849 --> 00:25:17,740
adder info hmm

597
00:25:12,190 --> 00:25:20,350
maybe we need the others ws 232 there we

598
00:25:17,740 --> 00:25:22,569
go okay so I can compile the moustache

599
00:25:20,349 --> 00:25:23,980
client on this machine you may ask why

600
00:25:22,569 --> 00:25:25,839
do I bother we already had a running

601
00:25:23,980 --> 00:25:27,160
version of the moustache client well the

602
00:25:25,839 --> 00:25:29,319
answer is because I kind of want to show

603
00:25:27,160 --> 00:25:30,910
this other feature I may not remember

604
00:25:29,319 --> 00:25:32,919
well enough how to make it work

605
00:25:30,910 --> 00:25:35,650
but I'm gonna show it or attempt to show

606
00:25:32,920 --> 00:25:38,380
it to you if I go to moustache client

607
00:25:35,650 --> 00:25:46,390
test and in here I say like oh yeah you

608
00:25:38,380 --> 00:25:49,360
know the the the define foo bar is the

609
00:25:46,390 --> 00:25:51,400
thing one I'm gonna make that happen and

610
00:25:49,359 --> 00:25:53,189
then I'm gonna recompile this this

611
00:25:51,400 --> 00:25:57,850
client and then I'm gonna run it again

612
00:25:53,190 --> 00:25:59,910
right so now what's happened as you can

613
00:25:57,849 --> 00:26:02,139
see we have the one from ten minutes ago

614
00:25:59,910 --> 00:26:04,390
that's there and then we've got this new

615
00:26:02,140 --> 00:26:06,550
one what I'm gonna do is I'm actually

616
00:26:04,390 --> 00:26:08,320
not gonna switch the processes now I

617
00:26:06,549 --> 00:26:09,849
could right I can switch the process

618
00:26:08,319 --> 00:26:11,769
list to get to the other one here right

619
00:26:09,849 --> 00:26:14,379
and then I can you know do my f5 or

620
00:26:11,769 --> 00:26:15,609
whatever like that I'm actually not

621
00:26:14,380 --> 00:26:17,610
going to quite do that what I'm gonna do

622
00:26:15,609 --> 00:26:20,740
instead is going to leave this one set

623
00:26:17,609 --> 00:26:25,779
looking at this one here I'm gonna make

624
00:26:20,740 --> 00:26:29,380
a new process list to grab from here and

625
00:26:25,779 --> 00:26:32,740
a new process node as well and I'm gonna

626
00:26:29,380 --> 00:26:37,060
select the new one in here so that way

627
00:26:32,740 --> 00:26:39,910
I've got both of these now I could also

628
00:26:37,059 --> 00:26:41,649
just use this latest process boolean you

629
00:26:39,910 --> 00:26:43,779
can turn on and the latest process

630
00:26:41,650 --> 00:26:44,980
Julian would just automatically pick

631
00:26:43,779 --> 00:26:47,319
that I wouldn't have to have a process

632
00:26:44,980 --> 00:26:49,450
list and that's what you would do if you

633
00:26:47,319 --> 00:26:51,399
wanted to just always have your the most

634
00:26:49,450 --> 00:26:55,390
recent run of the program in one of your

635
00:26:51,400 --> 00:26:56,830
flows so you know that was also a common

636
00:26:55,390 --> 00:26:59,980
way that it was used but we'll ignore

637
00:26:56,829 --> 00:27:01,569
that for the moment now I'm gonna go

638
00:26:59,980 --> 00:27:04,390
ahead and here and say alright there's a

639
00:27:01,569 --> 00:27:05,829
listing and the listing is just like the

640
00:27:04,390 --> 00:27:07,960
one we had before but now it's being

641
00:27:05,829 --> 00:27:12,399
driven by this note so now I've got two

642
00:27:07,960 --> 00:27:15,039
different listings right okay now the

643
00:27:12,400 --> 00:27:16,300
reason I was saying I want to have two

644
00:27:15,039 --> 00:27:18,159
of these two different runs of the

645
00:27:16,299 --> 00:27:21,099
program and have a different compile is

646
00:27:18,160 --> 00:27:22,630
I believe there is a thing and again I I

647
00:27:21,099 --> 00:27:24,490
may just be like up it doesn't work

648
00:27:22,630 --> 00:27:27,040
nevermind um there's this thing called

649
00:27:24,490 --> 00:27:29,470
sore stiff and what sore stiff does is

650
00:27:27,039 --> 00:27:31,269
if you hook up a process to it and then

651
00:27:29,470 --> 00:27:33,279
you hook up another process to it it

652
00:27:31,269 --> 00:27:37,569
tells you what the difference was

653
00:27:33,279 --> 00:27:41,700
between the two runs okay so you can see

654
00:27:37,569 --> 00:27:44,529
here what actually happened between

655
00:27:41,700 --> 00:27:46,059
these two things so you can say like

656
00:27:44,529 --> 00:27:47,829
okay there were two missing files

657
00:27:46,059 --> 00:27:51,159
twenty-one lines matched five different

658
00:27:47,829 --> 00:27:53,859
Spurs were found these files were

659
00:27:51,160 --> 00:27:56,500
missing when we tried to do them and we

660
00:27:53,859 --> 00:27:58,659
switched out these versions right so

661
00:27:56,500 --> 00:28:02,740
used to be the old mustache client test

662
00:27:58,660 --> 00:28:06,279
and now it's the new one right I yeah

663
00:28:02,740 --> 00:28:10,289
who knows right okay of course it does

664
00:28:06,279 --> 00:28:12,460
I I don't make any I don't make any

665
00:28:10,289 --> 00:28:15,129
promises that this thing will run

666
00:28:12,460 --> 00:28:20,230
reliably wait how come it didn't yeah

667
00:28:15,130 --> 00:28:24,400
there we go try that again all right so

668
00:28:20,230 --> 00:28:25,900
anyway uh what is it what is it doesn't

669
00:28:24,400 --> 00:28:27,790
like the scaling on that that's

670
00:28:25,900 --> 00:28:29,470
interesting it doesn't seem to like is

671
00:28:27,789 --> 00:28:31,180
that is that who is who is having a

672
00:28:29,470 --> 00:28:32,620
problem with scaling one thing I will

673
00:28:31,180 --> 00:28:34,420
note is that this thing is a lot more

674
00:28:32,619 --> 00:28:36,209
crashing it should be because I had to

675
00:28:34,420 --> 00:28:39,430
write all of the graphics by hand

676
00:28:36,210 --> 00:28:45,789
because Jeff didn't want me to use GL

677
00:28:39,430 --> 00:28:47,680
for it he felt that like GL was too

678
00:28:45,789 --> 00:28:49,450
unreliable so this is all hand written

679
00:28:47,680 --> 00:28:52,420
in GDI so like the stuff that actually

680
00:28:49,450 --> 00:28:55,120
renders images and stuff is written by

681
00:28:52,420 --> 00:28:56,070
hand and it's in a short period of time

682
00:28:55,119 --> 00:28:59,738
so it

683
00:28:56,069 --> 00:29:01,148
pretty error-prone even the clipping and

684
00:28:59,739 --> 00:29:04,778
all that stuff like had to be written by

685
00:29:01,148 --> 00:29:06,548
hand it was not fun um anyway so there's

686
00:29:04,778 --> 00:29:08,470
like an entire custom graphics library

687
00:29:06,548 --> 00:29:10,118
just to support this thing which was and

688
00:29:08,470 --> 00:29:11,649
and is you know anytime you have a

689
00:29:10,118 --> 00:29:14,168
little off by one in there it's you know

690
00:29:11,648 --> 00:29:16,808
it's not great anyway so I don't know

691
00:29:14,169 --> 00:29:20,739
why I'm getting that problem it looks

692
00:29:16,808 --> 00:29:25,118
like this that diff node is buggy so

693
00:29:20,739 --> 00:29:27,308
anyway um again apologize for all the

694
00:29:25,118 --> 00:29:28,928
bugs and all that stuff whatever point

695
00:29:27,308 --> 00:29:31,210
being the interesting thing about that

696
00:29:28,929 --> 00:29:32,619
was and the reason that I wanted to

697
00:29:31,210 --> 00:29:34,569
bring it up was because another thing

698
00:29:32,618 --> 00:29:36,970
that I wish the buggers always did is

699
00:29:34,569 --> 00:29:40,298
just save all of my source files from

700
00:29:36,970 --> 00:29:41,889
that run and mustache did that so inside

701
00:29:40,298 --> 00:29:44,558
the mustache file in addition to all of

702
00:29:41,888 --> 00:29:47,498
the data it also saved all of the source

703
00:29:44,558 --> 00:29:49,628
files so that what you could do is if

704
00:29:47,499 --> 00:29:51,038
you needed to know what files had

705
00:29:49,628 --> 00:29:54,069
changed between the two you could do

706
00:29:51,038 --> 00:29:55,538
that now we never really built out full

707
00:29:54,069 --> 00:29:56,618
different utility which would have been

708
00:29:55,538 --> 00:29:58,419
great that was kind of one thing I

709
00:29:56,618 --> 00:30:00,098
wanted to do and just never did but you

710
00:29:58,419 --> 00:30:02,229
could easily see why this would be good

711
00:30:00,098 --> 00:30:03,608
if you have two runs of a program and

712
00:30:02,229 --> 00:30:05,288
one of them works and one of them

713
00:30:03,608 --> 00:30:09,398
doesn't you can just quickly see what

714
00:30:05,288 --> 00:30:11,769
were all the changes right and so that's

715
00:30:09,398 --> 00:30:13,148
all that I wanted to point out there and

716
00:30:11,769 --> 00:30:15,429
so I just think debugger should always

717
00:30:13,148 --> 00:30:17,378
do that in fact I don't understand why

718
00:30:15,429 --> 00:30:19,960
PD bees don't store all the source files

719
00:30:17,378 --> 00:30:22,748
they obviously should in my opinion I

720
00:30:19,960 --> 00:30:25,119
have no idea why they don't because that

721
00:30:22,749 --> 00:30:27,538
way you wouldn't need to worry about

722
00:30:25,118 --> 00:30:29,709
paths to source files the PDB would have

723
00:30:27,538 --> 00:30:32,288
100% of the source that was ever used to

724
00:30:29,710 --> 00:30:33,909
create that program because if if the

725
00:30:32,288 --> 00:30:36,339
compiler could read it it can be in

726
00:30:33,909 --> 00:30:37,989
there right and so the only things that

727
00:30:36,339 --> 00:30:40,028
PP wouldn't have is like libs

728
00:30:37,989 --> 00:30:41,889
if the libs didn't have source in it but

729
00:30:40,028 --> 00:30:44,169
put it in the libs to put all the source

730
00:30:41,888 --> 00:30:45,758
in the libs right put the source in

731
00:30:44,169 --> 00:30:47,919
there every time you compile the program

732
00:30:45,759 --> 00:30:49,960
put all the source into it into the

733
00:30:47,919 --> 00:30:50,999
debug info right that's that's what I

734
00:30:49,960 --> 00:30:53,229
would do

735
00:30:50,999 --> 00:30:54,940
so mustache did the best it could to

736
00:30:53,229 --> 00:30:55,989
sort of have that for you but really

737
00:30:54,940 --> 00:30:57,999
again I think that should be the

738
00:30:55,989 --> 00:31:00,058
debuggers job all right so let's move on

739
00:30:57,999 --> 00:31:02,048
to the actual like more useful features

740
00:31:00,058 --> 00:31:06,098
for stuff like this

741
00:31:02,048 --> 00:31:08,609
okay so let's suppose that we want to do

742
00:31:06,098 --> 00:31:10,230
something like in you know in

743
00:31:08,609 --> 00:31:14,039
one of these listings I guess I'll look

744
00:31:10,230 --> 00:31:19,950
at this one here let's say we want to

745
00:31:14,039 --> 00:31:22,879
take a look at like this what's a good

746
00:31:19,950 --> 00:31:26,610
example large image diff test let's say

747
00:31:22,880 --> 00:31:29,790
so if I go ahead and create a thing that

748
00:31:26,609 --> 00:31:30,839
does an image diff I'm not sure I'm

749
00:31:29,789 --> 00:31:33,269
going to do this right so you have to

750
00:31:30,839 --> 00:31:34,649
again bear with me but what I want to do

751
00:31:33,269 --> 00:31:36,690
is I want to see the difference between

752
00:31:34,650 --> 00:31:39,690
two images so what I can do here is say

753
00:31:36,690 --> 00:31:43,170
like alright let's grab two images off

754
00:31:39,690 --> 00:31:46,230
of this listing and so you know maybe in

755
00:31:43,170 --> 00:31:48,570
here I could just say grab this one

756
00:31:46,230 --> 00:31:50,640
right and one of the weird things about

757
00:31:48,569 --> 00:31:52,230
moustaches nodes remember their settings

758
00:31:50,640 --> 00:31:55,040
so I think if you just do that it keeps

759
00:31:52,230 --> 00:31:58,319
it so I can actually grab these like

760
00:31:55,039 --> 00:32:01,829
semi-permanently like this and then

761
00:31:58,319 --> 00:32:02,939
disconnect them right which is kind of

762
00:32:01,829 --> 00:32:05,369
weird but that's how that works

763
00:32:02,940 --> 00:32:08,850
anyway I can also just have it be live

764
00:32:05,369 --> 00:32:13,349
and then when I switch these off I get

765
00:32:08,849 --> 00:32:15,240
different images right whatever so

766
00:32:13,349 --> 00:32:16,829
anyway these things show the images and

767
00:32:15,240 --> 00:32:18,509
of course you can zoom in on them right

768
00:32:16,829 --> 00:32:20,250
and look at them however you want to and

769
00:32:18,509 --> 00:32:22,710
it's all alive and nice and all that

770
00:32:20,250 --> 00:32:25,950
nonsense which is fine and then what you

771
00:32:22,710 --> 00:32:29,190
can do is the data that comes out of

772
00:32:25,950 --> 00:32:33,900
those I don't know if this works right I

773
00:32:29,190 --> 00:32:36,690
think it does maybe yeah I don't know

774
00:32:33,900 --> 00:32:39,840
maybe it doesn't maybe it does this was

775
00:32:36,690 --> 00:32:42,000
the first one and this was also the

776
00:32:39,839 --> 00:32:45,869
first one you can see zero right but if

777
00:32:42,000 --> 00:32:47,190
I switch it to the next one down it'll

778
00:32:45,869 --> 00:32:50,309
show me all the differences between

779
00:32:47,190 --> 00:32:51,870
those two images right so I can just

780
00:32:50,309 --> 00:32:54,509
come down in here now and look at a

781
00:32:51,869 --> 00:32:56,879
particular place that's different and

782
00:32:54,509 --> 00:32:59,309
you know off I go right which is pretty

783
00:32:56,880 --> 00:33:01,920
nice and one of the nice things about

784
00:32:59,309 --> 00:33:04,559
this too is that again this is all live

785
00:33:01,920 --> 00:33:06,630
so if I wanted to I could make this

786
00:33:04,559 --> 00:33:08,639
thing here say always use the latest

787
00:33:06,630 --> 00:33:11,130
process you know forget this just use

788
00:33:08,640 --> 00:33:12,870
the latest process and then every time I

789
00:33:11,130 --> 00:33:16,770
ran the program this would automatically

790
00:33:12,869 --> 00:33:18,449
update for me right but this because

791
00:33:16,769 --> 00:33:21,960
it's not connected anything would always

792
00:33:18,450 --> 00:33:24,298
diff off of this image so I can store

793
00:33:21,960 --> 00:33:26,730
or old images right in the mustache

794
00:33:24,298 --> 00:33:29,158
whiteboard and just always get discs off

795
00:33:26,730 --> 00:33:31,110
them and it all just works right which

796
00:33:29,159 --> 00:33:33,270
is kind of nice and again you don't need

797
00:33:31,109 --> 00:33:36,629
any additional storage it's just that

798
00:33:33,269 --> 00:33:38,730
one directory of mustache files keeps

799
00:33:36,630 --> 00:33:39,510
everything you don't need it doesn't

800
00:33:38,730 --> 00:33:40,620
need to be able to get back to your

801
00:33:39,509 --> 00:33:44,000
executable or any of that stuff it

802
00:33:40,619 --> 00:33:47,459
packages everything up into the runs

803
00:33:44,000 --> 00:33:48,538
alright so that's how that works right

804
00:33:47,460 --> 00:33:51,000
you can see why that would be kind of

805
00:33:48,538 --> 00:33:52,589
nice right you can see stuff these dips

806
00:33:51,000 --> 00:33:54,119
also have some stuff like the peak

807
00:33:52,589 --> 00:33:56,788
signal-to-noise ratio the root mean

808
00:33:54,119 --> 00:33:58,918
squared error stuff like that and you

809
00:33:56,788 --> 00:34:03,390
can also crank this multiplier so this

810
00:33:58,919 --> 00:34:06,270
allows you to like go down to like this

811
00:34:03,390 --> 00:34:07,919
is the actual difference right but it's

812
00:34:06,269 --> 00:34:09,750
kind of hard to see if there are some

813
00:34:07,919 --> 00:34:12,628
differences that are not very high so

814
00:34:09,750 --> 00:34:13,648
this multiplier just let you crank up

815
00:34:12,628 --> 00:34:17,668
those differences to make them visible

816
00:34:13,648 --> 00:34:19,319
right and again that was a nice thing uh

817
00:34:17,668 --> 00:34:20,969
so the other cool thing you could do

818
00:34:19,320 --> 00:34:23,129
with that is if you wanted these

819
00:34:20,969 --> 00:34:24,299
differences to be displayed against the

820
00:34:23,128 --> 00:34:25,559
back of an image because what you see

821
00:34:24,300 --> 00:34:31,919
this you're like well I don't really

822
00:34:25,559 --> 00:34:34,349
know where those are as far as it's like

823
00:34:31,918 --> 00:34:36,898
we're on the on the video frame they

824
00:34:34,349 --> 00:34:39,119
were right um so there was another thing

825
00:34:36,898 --> 00:34:41,358
to do which is called a node overlay and

826
00:34:39,119 --> 00:34:43,500
again I apologize if I screw this up I

827
00:34:41,358 --> 00:34:45,989
don't remember much about using this

828
00:34:43,500 --> 00:34:48,719
tool and the node overlay could

829
00:34:45,989 --> 00:34:51,838
basically say well look take whatever

830
00:34:48,719 --> 00:34:54,898
the image is that I give you here like

831
00:34:51,838 --> 00:34:58,799
let's say this one and allow me to pipe

832
00:34:54,898 --> 00:35:01,529
in another image to show as the image

833
00:34:58,800 --> 00:35:06,930
that was on top of it right oh I guess

834
00:35:01,530 --> 00:35:08,970
this doesn't allow that though I thought

835
00:35:06,929 --> 00:35:12,480
that you could do that the problem is

836
00:35:08,969 --> 00:35:14,098
this has this is not transparent so I

837
00:35:12,480 --> 00:35:16,800
guess that's not true I don't remember

838
00:35:14,099 --> 00:35:19,769
how we did this then I think there was a

839
00:35:16,800 --> 00:35:23,300
way to do this but I guess that's not it

840
00:35:19,769 --> 00:35:23,300
[Music]

841
00:35:25,159 --> 00:35:28,368
all right

842
00:35:29,449 --> 00:35:33,960
forget that I don't know how to do it I

843
00:35:32,639 --> 00:35:36,779
don't like I said I don't remember so I

844
00:35:33,960 --> 00:35:42,480
couldn't tell you uh let's me disconnect

845
00:35:36,780 --> 00:35:48,420
that there how did we do that

846
00:35:42,480 --> 00:35:50,880
I don't think there was some other magic

847
00:35:48,420 --> 00:35:56,490
thing maybe maybe that's not how we used

848
00:35:50,880 --> 00:35:58,858
to do it yeah I don't know all right I

849
00:35:56,489 --> 00:36:00,299
apologize I don't really know I'll try

850
00:35:58,858 --> 00:36:04,139
some of the things in a second and show

851
00:36:00,300 --> 00:36:06,000
you those anyway um so let's talk about

852
00:36:04,139 --> 00:36:07,259
a couple of things before I go down to

853
00:36:06,000 --> 00:36:08,940
the actual more interesting features

854
00:36:07,260 --> 00:36:11,310
than just image diffing and live stuff

855
00:36:08,940 --> 00:36:14,039
like that so one of the things that I

856
00:36:11,309 --> 00:36:17,699
thought there was one and only one good

857
00:36:14,039 --> 00:36:18,869
UI feature of mustache and that was

858
00:36:17,699 --> 00:36:20,098
these things here so let me show you

859
00:36:18,869 --> 00:36:21,329
what those are in case anyone out there

860
00:36:20,099 --> 00:36:24,570
is actually doing a visual programming

861
00:36:21,329 --> 00:36:26,429
language or node-based thing these

862
00:36:24,570 --> 00:36:30,690
things are awesome so here's how they

863
00:36:26,429 --> 00:36:35,239
work if you click on the middle one it

864
00:36:30,690 --> 00:36:38,880
will drag anything in that set of nodes

865
00:36:35,239 --> 00:36:41,939
right which is awesome so if I want to

866
00:36:38,880 --> 00:36:43,829
move this collected set of stuff I just

867
00:36:41,940 --> 00:36:45,659
do that right and it moves everything

868
00:36:43,829 --> 00:36:51,119
that's connected to it that's super

869
00:36:45,659 --> 00:36:53,730
handy if I do this it moves it and the

870
00:36:51,119 --> 00:36:56,670
downstream nodes so it's the same thing

871
00:36:53,730 --> 00:36:58,889
here right but notice it doesn't pick up

872
00:36:56,670 --> 00:37:01,079
this because those are upstream you'd

873
00:36:58,889 --> 00:37:02,879
have to travel upstream so all of the

874
00:37:01,079 --> 00:37:05,539
things that are descendant from it can

875
00:37:02,880 --> 00:37:08,010
be grabbed this way similarly any

876
00:37:05,539 --> 00:37:11,130
antecedent node can be grabbed with the

877
00:37:08,010 --> 00:37:15,300
other one right this was just a really

878
00:37:11,130 --> 00:37:16,740
easy way to reorganize stuff I don't

879
00:37:15,300 --> 00:37:18,539
know why no one's done it I don't know

880
00:37:16,739 --> 00:37:20,579
if they just never thought about it but

881
00:37:18,539 --> 00:37:22,500
it's super handy maybe there is some

882
00:37:20,579 --> 00:37:26,880
tools that do it I don't know maybe

883
00:37:22,500 --> 00:37:31,619
maybe you the blueprint in Unreal Engine

884
00:37:26,880 --> 00:37:33,150
does it I'm not sure anyway that was one

885
00:37:31,619 --> 00:37:36,750
really cool feature that I highly

886
00:37:33,150 --> 00:37:37,380
recommend any visual tool do and it was

887
00:37:36,750 --> 00:37:39,449
pretty cool

888
00:37:37,380 --> 00:37:40,990
all right anyway there's a bunch of

889
00:37:39,449 --> 00:37:42,789
things you could do for whiteboard

890
00:37:40,989 --> 00:37:44,500
roll and I'll show you some of the

891
00:37:42,789 --> 00:37:47,079
neater ones as well since we're on that

892
00:37:44,500 --> 00:37:48,909
topic so let's suppose that really all

893
00:37:47,079 --> 00:37:51,159
you wanted at the end of the day was

894
00:37:48,909 --> 00:37:53,109
this image diff well and maybe a couple

895
00:37:51,159 --> 00:37:55,480
other things too like I want you know

896
00:37:53,110 --> 00:37:57,910
this listing and that dip or something

897
00:37:55,480 --> 00:37:59,469
and that's all I wanted to see well the

898
00:37:57,909 --> 00:38:00,279
base whiteboard kind of has everything

899
00:37:59,469 --> 00:38:02,859
on it

900
00:38:00,280 --> 00:38:05,110
but you can also have other whiteboards

901
00:38:02,860 --> 00:38:08,440
so here's like another whiteboard and I

902
00:38:05,110 --> 00:38:11,530
think you can name them so here's my

903
00:38:08,440 --> 00:38:14,440
fubar whiteboard right and what you can

904
00:38:11,530 --> 00:38:17,320
do is you can just grab pieces from your

905
00:38:14,440 --> 00:38:26,980
existing whiteboard and make them into

906
00:38:17,320 --> 00:38:31,059
their own layout so these are now like

907
00:38:26,980 --> 00:38:36,039
and I think you can also I thought there

908
00:38:31,059 --> 00:38:41,739
was some way to to like toggle sorry I

909
00:38:36,039 --> 00:38:43,750
don't actually remember don't remember I

910
00:38:41,739 --> 00:38:48,399
think you could shut off these ghosts as

911
00:38:43,750 --> 00:38:54,400
well I just don't remember how that was

912
00:38:48,400 --> 00:38:57,960
done uh so anyway um if you take a look

913
00:38:54,400 --> 00:39:01,269
maybe it was something up here oops I

914
00:38:57,960 --> 00:39:03,608
don't know I have no idea anyway uh so

915
00:39:01,269 --> 00:39:05,289
you could create your own custom views

916
00:39:03,608 --> 00:39:07,090
where like you know you create this big

917
00:39:05,289 --> 00:39:08,829
weird graph that gives you something you

918
00:39:07,090 --> 00:39:12,220
want and then you could just flip over

919
00:39:08,829 --> 00:39:13,900
to a different view these were all they

920
00:39:12,219 --> 00:39:16,329
weren't cloned they were actually the

921
00:39:13,900 --> 00:39:18,340
nodes for real so any edits that you

922
00:39:16,329 --> 00:39:20,259
make back here would work when you

923
00:39:18,340 --> 00:39:22,329
switch back here it was a really nice

924
00:39:20,260 --> 00:39:25,480
way of basically having some custom view

925
00:39:22,329 --> 00:39:27,880
panels that just worked um and if I

926
00:39:25,480 --> 00:39:31,000
remember correctly this actually works

927
00:39:27,880 --> 00:39:36,990
Cross monitor too so if you have another

928
00:39:31,000 --> 00:39:36,989
monitor right oops

929
00:39:37,289 --> 00:39:43,659
how do I get what's going on here there

930
00:39:40,780 --> 00:39:45,940
we go so if you had another monitor you

931
00:39:43,659 --> 00:39:47,769
could go ahead and put like two

932
00:39:45,940 --> 00:39:50,710
different moustache views one on each

933
00:39:47,769 --> 00:39:52,690
monitor so here's the live updating of

934
00:39:50,710 --> 00:39:54,550
of number two right

935
00:39:52,690 --> 00:39:56,139
but then if this one's on number three

936
00:39:54,550 --> 00:39:57,940
right then you edit them separately so

937
00:39:56,139 --> 00:40:00,309
you could pretty much just have this

938
00:39:57,940 --> 00:40:01,750
your your your console setup exactly you

939
00:40:00,309 --> 00:40:03,099
want it with many moustache views

940
00:40:01,750 --> 00:40:04,750
showing lots of different things at the

941
00:40:03,099 --> 00:40:06,579
same time if you want to and that was

942
00:40:04,750 --> 00:40:07,989
pretty awesome again something I wish

943
00:40:06,579 --> 00:40:14,500
the buggers could do and they pretty

944
00:40:07,989 --> 00:40:17,379
much can alright so moving on to more

945
00:40:14,500 --> 00:40:19,780
features so a couple different things

946
00:40:17,380 --> 00:40:21,130
and again I apologize for not really

947
00:40:19,780 --> 00:40:26,380
remembering how most of this stuff works

948
00:40:21,130 --> 00:40:29,590
uh so here's a note overlay and it's

949
00:40:26,380 --> 00:40:31,329
coming from this image source here what

950
00:40:29,590 --> 00:40:32,650
if I want to start talking about pixels

951
00:40:31,329 --> 00:40:35,710
in there and looking at them in more

952
00:40:32,650 --> 00:40:39,130
detail right so we have this thing

953
00:40:35,710 --> 00:40:42,579
called a pixel inspector

954
00:40:39,130 --> 00:40:44,650
and what a pixel inspector does is it

955
00:40:42,579 --> 00:40:45,849
takes a particular X&amp;Y location and

956
00:40:44,650 --> 00:40:51,130
tells me more about it

957
00:40:45,849 --> 00:40:53,110
so if for example I wanted to know in

958
00:40:51,130 --> 00:40:54,550
this particular image here let's say o

959
00:40:53,110 --> 00:40:55,539
and actually lets me do it to this one

960
00:40:54,550 --> 00:40:58,150
because this one's hooked up to an

961
00:40:55,539 --> 00:41:01,059
active so I can swap them around so

962
00:40:58,150 --> 00:41:03,070
let's say I take this thing here right

963
00:41:01,059 --> 00:41:06,369
and I want to know more about a

964
00:41:03,070 --> 00:41:07,960
particular pixel location now this is

965
00:41:06,369 --> 00:41:09,969
going to expose a bunch of mustache

966
00:41:07,960 --> 00:41:11,920
features at once and so you'll have to

967
00:41:09,969 --> 00:41:12,939
kind of bear with me as I walk through

968
00:41:11,920 --> 00:41:14,289
them in series could be a little bit

969
00:41:12,940 --> 00:41:18,599
hard to understand everything that's

970
00:41:14,289 --> 00:41:25,239
happening here so let me zoom in on this

971
00:41:18,599 --> 00:41:28,199
this note a little bit right let's move

972
00:41:25,239 --> 00:41:28,199
that out of the way as well

973
00:41:28,579 --> 00:41:37,880
all right so here's my pixel inspector

974
00:41:34,179 --> 00:41:40,160
uh and you can see like it's coming from

975
00:41:37,880 --> 00:41:42,289
this listing I can pick different

976
00:41:40,159 --> 00:41:47,208
matrices here right and I get different

977
00:41:42,289 --> 00:41:51,759
results and what you can see is if I in

978
00:41:47,208 --> 00:41:55,159
here was to take the x and y's that i

979
00:41:51,759 --> 00:41:57,798
want to view here it will tell me for a

980
00:41:55,159 --> 00:42:01,188
given x and y-coordinate it'll tell me

981
00:41:57,798 --> 00:42:03,079
what the information is about that

982
00:42:01,188 --> 00:42:06,708
particular pixel for that particular

983
00:42:03,079 --> 00:42:10,249
image now it's annoying to try and pick

984
00:42:06,708 --> 00:42:11,868
pixels by hand sometimes you want to do

985
00:42:10,248 --> 00:42:13,188
it that way but sometimes you don't so

986
00:42:11,869 --> 00:42:14,778
we have this thing called a pixel picker

987
00:42:13,188 --> 00:42:16,759
and of course you could wire it up to

988
00:42:14,778 --> 00:42:18,829
anything you wanted so you can have like

989
00:42:16,759 --> 00:42:22,509
an XY coordinate you can see here and

990
00:42:18,829 --> 00:42:25,670
now as I move around any particular X Y

991
00:42:22,509 --> 00:42:28,099
it will tell me what that particular

992
00:42:25,670 --> 00:42:30,229
pixel was and it'll tell me all about it

993
00:42:28,099 --> 00:42:31,969
so this is the transform the colour

994
00:42:30,228 --> 00:42:34,038
transform that's going through which is

995
00:42:31,969 --> 00:42:36,458
the unity transform but you could go

996
00:42:34,039 --> 00:42:40,130
through y UV transformer so you want to

997
00:42:36,458 --> 00:42:42,288
it's telling me what 32 by 32 block it's

998
00:42:40,130 --> 00:42:44,179
in what 16 by 16 block what 8 by 8 and

999
00:42:42,289 --> 00:42:46,009
then the actual pixel location it's

1000
00:42:44,179 --> 00:42:47,630
telling what's value is in real and in

1001
00:42:46,009 --> 00:42:49,009
you in eight just you know cuz these are

1002
00:42:47,630 --> 00:42:51,289
things we want to see again this is for

1003
00:42:49,009 --> 00:42:54,650
video codecs so you wanna information uh

1004
00:42:51,289 --> 00:42:57,859
and now I can show you I think the

1005
00:42:54,650 --> 00:42:58,130
overlay the node overlay a little bit

1006
00:42:57,858 --> 00:42:59,808
better

1007
00:42:58,130 --> 00:43:05,749
don't ask me why it didn't work with

1008
00:42:59,809 --> 00:43:08,179
TIFF I don't remember but I if I go

1009
00:43:05,748 --> 00:43:11,718
ahead now and say Oh take this image

1010
00:43:08,179 --> 00:43:18,219
source here that I'm doing make that be

1011
00:43:11,719 --> 00:43:23,739
from the overlay take the pixel picker

1012
00:43:18,219 --> 00:43:23,739
itself trying to remember how this works

1013
00:43:33,960 --> 00:43:40,809
it's one of those things right you know

1014
00:43:39,639 --> 00:43:48,129
the beginning when I said don't clone

1015
00:43:40,809 --> 00:43:56,469
the UI for this this is why I've done

1016
00:43:48,130 --> 00:44:05,079
this horribly wrong so the overlay takes

1017
00:43:56,469 --> 00:44:06,339
the pixel picker so yeah this is one of

1018
00:44:05,079 --> 00:44:10,619
those things where you're just like I

1019
00:44:06,340 --> 00:44:10,619
know there's a simple way to do this ah

1020
00:44:11,039 --> 00:44:20,369
this thing no that's just the outliner I

1021
00:44:22,349 --> 00:44:28,630
really wish I could remember what what

1022
00:44:25,000 --> 00:44:30,280
the heck goes on here there's so much

1023
00:44:28,630 --> 00:44:32,500
stuff in this program it's ridiculous

1024
00:44:30,280 --> 00:44:37,900
and I and trying to Morelos that there's

1025
00:44:32,500 --> 00:44:39,519
let's see so there's all of that stuff I

1026
00:44:37,900 --> 00:44:40,480
was pretty sure I could do it with the

1027
00:44:39,519 --> 00:44:45,509
things I had here

1028
00:44:40,480 --> 00:44:51,179
pixel picker pixel inspector outliner

1029
00:44:45,510 --> 00:44:51,180
and how did you get them - like overlay

1030
00:44:52,619 --> 00:45:07,410
one of these things does it see pixel

1031
00:44:57,280 --> 00:45:09,490
outliner doesn't have any any way to to

1032
00:45:07,409 --> 00:45:11,980
drive it there huh second I'm going to

1033
00:45:09,489 --> 00:45:15,189
do some weird stuff here so here's the

1034
00:45:11,980 --> 00:45:21,760
pixel picker I'm I connected to the

1035
00:45:15,190 --> 00:45:23,889
outliner it's program is so nuts right

1036
00:45:21,760 --> 00:45:26,850
so that does exactly what you would

1037
00:45:23,889 --> 00:45:26,849
think it would do Oh

1038
00:45:30,280 --> 00:45:37,250
right the node overlay is coded such

1039
00:45:35,480 --> 00:45:39,500
that you don't have to hook up an image

1040
00:45:37,250 --> 00:45:44,090
you're just hooking up anything from

1041
00:45:39,500 --> 00:45:46,400
that node yeah so all I have to do is

1042
00:45:44,090 --> 00:45:48,890
just drag like the X over here put that

1043
00:45:46,400 --> 00:45:51,380
on top and then it shows up right and

1044
00:45:48,889 --> 00:45:53,089
since the node overlay overlaid the UI

1045
00:45:51,380 --> 00:45:54,980
for the nodes as well as the nodes you

1046
00:45:53,090 --> 00:45:58,610
can see I can get the picking happening

1047
00:45:54,980 --> 00:46:02,389
there as well yeah yeah okay like I said

1048
00:45:58,610 --> 00:46:04,010
don't clone the UI anyway so I can go in

1049
00:46:02,389 --> 00:46:05,539
and look at like particular ones here

1050
00:46:04,010 --> 00:46:08,000
and I can look at like this winner or

1051
00:46:05,539 --> 00:46:11,210
whatever right and I can look at the

1052
00:46:08,000 --> 00:46:12,949
pixel pixel inspector and I can see what

1053
00:46:11,210 --> 00:46:14,900
the status was a fat node and all of

1054
00:46:12,949 --> 00:46:16,639
those sorts of things right and so once

1055
00:46:14,900 --> 00:46:18,470
you set these up the way you wanted like

1056
00:46:16,639 --> 00:46:20,420
I saying you could get to a nice point

1057
00:46:18,469 --> 00:46:21,859
where you did all your crazy wiring

1058
00:46:20,420 --> 00:46:23,960
which is the part that I'm not I don't

1059
00:46:21,860 --> 00:46:25,579
think was very good I think you'd rather

1060
00:46:23,960 --> 00:46:27,260
just maybe write some expressions or

1061
00:46:25,579 --> 00:46:29,059
something that say what you want and

1062
00:46:27,260 --> 00:46:31,550
then it puts up just a UI that just lets

1063
00:46:29,059 --> 00:46:32,750
you do that you know but anyway you have

1064
00:46:31,550 --> 00:46:34,160
to do your visual programming your

1065
00:46:32,750 --> 00:46:35,570
program a thing and then you can get

1066
00:46:34,159 --> 00:46:38,210
what you want which is here I can like

1067
00:46:35,570 --> 00:46:39,680
do pixel inspection this way and also I

1068
00:46:38,210 --> 00:46:41,690
can have as many of these inspectors

1069
00:46:39,679 --> 00:46:44,239
running as I want so I can inspect the

1070
00:46:41,690 --> 00:46:47,300
same pixel location if I want to for

1071
00:46:44,239 --> 00:46:50,629
example on some other image or things

1072
00:46:47,300 --> 00:46:52,580
like that right okay so again still not

1073
00:46:50,630 --> 00:46:53,900
that it's nice to have all this stuff

1074
00:46:52,579 --> 00:46:55,400
live again if I just run the program

1075
00:46:53,900 --> 00:46:57,380
this would all just update and all that

1076
00:46:55,400 --> 00:46:58,940
stuff and I can again diff with old

1077
00:46:57,380 --> 00:47:02,180
things and all those other sorts of

1078
00:46:58,940 --> 00:47:04,010
things are great but again still not

1079
00:47:02,179 --> 00:47:05,809
really the most useful parts of

1080
00:47:04,010 --> 00:47:07,130
moustache even though all of them should

1081
00:47:05,809 --> 00:47:10,429
be things that you would want in the

1082
00:47:07,130 --> 00:47:14,390
debugger the far more interesting stuff

1083
00:47:10,429 --> 00:47:17,299
comes when you start to look at the like

1084
00:47:14,389 --> 00:47:21,039
if I go in the the what's the word for

1085
00:47:17,300 --> 00:47:24,230
it here if I go into the the listing

1086
00:47:21,039 --> 00:47:29,500
looking at some of the the features that

1087
00:47:24,230 --> 00:47:32,900
allow you to sort of work with data

1088
00:47:29,500 --> 00:47:35,420
associated with memory and so one

1089
00:47:32,900 --> 00:47:38,090
example of that is a thing called an

1090
00:47:35,420 --> 00:47:39,650
m-space and what an m-space is it says

1091
00:47:38,090 --> 00:47:43,780
the thing that allows you to associate

1092
00:47:39,650 --> 00:47:47,980
printf with regions

1093
00:47:43,780 --> 00:47:52,060
of like in an image so for example if I

1094
00:47:47,980 --> 00:47:53,559
go here and I say like show me you know

1095
00:47:52,059 --> 00:47:59,619
I'm gonna I'm gonna pick an m-space here

1096
00:47:53,559 --> 00:48:03,250
so this let's go ahead and say grab this

1097
00:47:59,619 --> 00:48:05,409
M space that I've got and pipe it into

1098
00:48:03,250 --> 00:48:07,150
here it should tell me that I've got a

1099
00:48:05,409 --> 00:48:09,159
title for it I don't know why I named it

1100
00:48:07,150 --> 00:48:11,800
filet filet and ribeye were the two I

1101
00:48:09,159 --> 00:48:15,969
named for some reason and it's a 1920 by

1102
00:48:11,800 --> 00:48:20,140
1080 output is what that M space was

1103
00:48:15,969 --> 00:48:23,439
maybe I'll move this over here I just

1104
00:48:20,139 --> 00:48:27,129
put this in line with it and then if I

1105
00:48:23,440 --> 00:48:33,360
want to this thing can be viewed if I'm

1106
00:48:27,130 --> 00:48:33,360
not mistaken as sort of its own thing

1107
00:48:35,489 --> 00:48:44,399
don't necessarily route recall how that

1108
00:48:40,480 --> 00:48:48,340
happens I think it just works like this

1109
00:48:44,400 --> 00:48:51,280
so if I'm looking at this M space you

1110
00:48:48,340 --> 00:48:52,870
can see what's on it here and if we take

1111
00:48:51,280 --> 00:48:54,940
a look at the image that was paired with

1112
00:48:52,869 --> 00:48:57,190
it so like here's the M space there and

1113
00:48:54,940 --> 00:49:00,450
I'm gonna take one of these image

1114
00:48:57,190 --> 00:49:03,700
sources like this one oops

1115
00:49:00,449 --> 00:49:07,239
and I'm going to go ahead and pipe this

1116
00:49:03,699 --> 00:49:09,069
guy to that so there's that image source

1117
00:49:07,239 --> 00:49:10,269
coming through there and then I'll

1118
00:49:09,070 --> 00:49:12,490
disconnect it so it's just permanently

1119
00:49:10,269 --> 00:49:15,369
listing that one and now we're on this

1120
00:49:12,489 --> 00:49:17,469
other one here so here's the image that

1121
00:49:15,369 --> 00:49:19,150
the program printed and here's the M

1122
00:49:17,469 --> 00:49:21,069
space that was printed after it which is

1123
00:49:19,150 --> 00:49:23,349
basically just printf that can go to any

1124
00:49:21,070 --> 00:49:24,789
part of the image and it happened that

1125
00:49:23,349 --> 00:49:28,179
this one was going to print this one

1126
00:49:24,789 --> 00:49:29,469
prints regular tiles of stuff so you can

1127
00:49:28,179 --> 00:49:31,750
see the M space here you can see the

1128
00:49:29,469 --> 00:49:34,239
image source I've overlaid the M space

1129
00:49:31,750 --> 00:49:35,920
onto the image source right and so what

1130
00:49:34,239 --> 00:49:38,799
I'm gonna do is I'm just gonna zoom in

1131
00:49:35,920 --> 00:49:44,019
and you can see the logs start to appear

1132
00:49:38,800 --> 00:49:47,920
where they went right this is actually

1133
00:49:44,019 --> 00:49:50,440
just a printf log so you can printf

1134
00:49:47,920 --> 00:49:53,230
anything you want into an image and have

1135
00:49:50,440 --> 00:49:56,440
it show up at that place on the image

1136
00:49:53,230 --> 00:49:57,608
and this is super powerful because like

1137
00:49:56,440 --> 00:50:00,190
for things like video

1138
00:49:57,608 --> 00:50:02,440
impression for example it shows you any

1139
00:50:00,190 --> 00:50:05,048
time you had bugs in a particular case

1140
00:50:02,440 --> 00:50:07,450
like let's say you add case 13 if your

1141
00:50:05,048 --> 00:50:09,608
motion compensator was busted you could

1142
00:50:07,449 --> 00:50:11,558
just print death into the piles that

1143
00:50:09,608 --> 00:50:13,058
that thing actually affected and then

1144
00:50:11,559 --> 00:50:15,730
you just zoom in on the one that was

1145
00:50:13,059 --> 00:50:18,028
wrong and look at the printf log and you

1146
00:50:15,730 --> 00:50:21,190
could see exactly what happened right

1147
00:50:18,028 --> 00:50:25,539
furthermore n spaces I believe are

1148
00:50:21,190 --> 00:50:28,239
queryable so for example if you go ahead

1149
00:50:25,539 --> 00:50:31,930
in the pixel inspector here I don't know

1150
00:50:28,239 --> 00:50:34,630
if you can do this probably not nope you

1151
00:50:31,929 --> 00:50:37,028
can so if you look at the pixel

1152
00:50:34,630 --> 00:50:39,269
inspector you can actually look at all

1153
00:50:37,028 --> 00:50:42,579
of the things that are actually

1154
00:50:39,268 --> 00:50:44,919
connected back stream so for example if

1155
00:50:42,579 --> 00:50:47,859
I click on this particular pixel I will

1156
00:50:44,920 --> 00:50:51,068
get all of the M space logs that have

1157
00:50:47,858 --> 00:50:54,038
ever happened in this chain to that

1158
00:50:51,068 --> 00:50:56,619
location right so I can just say like Oh

1159
00:50:54,039 --> 00:50:58,839
tell me the m spaces that overlap this

1160
00:50:56,619 --> 00:51:02,680
pixel and it will print them out for me

1161
00:50:58,838 --> 00:51:05,108
right and again that allows me to keep

1162
00:51:02,679 --> 00:51:06,818
stacking this up if I wanted to so for

1163
00:51:05,108 --> 00:51:09,909
example if I wanted to look at multiple

1164
00:51:06,818 --> 00:51:12,369
M spaces at a time I could also do that

1165
00:51:09,909 --> 00:51:20,348
so for example here's another listing

1166
00:51:12,369 --> 00:51:27,220
node we'll grab the same oops grab the

1167
00:51:20,349 --> 00:51:29,230
same process here and I'll go look at

1168
00:51:27,219 --> 00:51:31,719
what we're doing fillet here we'll look

1169
00:51:29,230 --> 00:51:34,409
at rib eye here for example if I wanted

1170
00:51:31,719 --> 00:51:37,209
to have that one show up as well

1171
00:51:34,409 --> 00:51:38,348
off we go and you can see that that's a

1172
00:51:37,210 --> 00:51:41,739
different one and it's at a different

1173
00:51:38,349 --> 00:51:44,079
resolution and again there it all is all

1174
00:51:41,739 --> 00:51:45,699
shown in there and so now if I'm like

1175
00:51:44,079 --> 00:51:47,829
zooming around here I'm like picking

1176
00:51:45,699 --> 00:51:50,439
what effects these pixels you'll notice

1177
00:51:47,829 --> 00:51:53,318
that there's nothing from that one right

1178
00:51:50,440 --> 00:51:56,079
there was nothing in there but as I come

1179
00:51:53,318 --> 00:51:57,998
back here you can see now there is so

1180
00:51:56,079 --> 00:52:00,009
this shows all of the M spaces that

1181
00:51:57,998 --> 00:52:01,298
could possibly have affected that now

1182
00:52:00,009 --> 00:52:04,059
sometimes there's things like node

1183
00:52:01,298 --> 00:52:06,369
overlay it's just taking up space well I

1184
00:52:04,059 --> 00:52:08,048
can choose to turn this off and so what

1185
00:52:06,369 --> 00:52:09,849
I do there is I just say toggle node

1186
00:52:08,048 --> 00:52:12,409
hidden from inspector and then it's gone

1187
00:52:09,849 --> 00:52:15,048
right

1188
00:52:12,409 --> 00:52:16,548
so I have ways also of controlling what

1189
00:52:15,048 --> 00:52:19,489
shows up in the inspector if there are

1190
00:52:16,548 --> 00:52:19,809
certain nodes that I don't want shown in

1191
00:52:19,489 --> 00:52:25,098
there

1192
00:52:19,809 --> 00:52:27,140
that makes sense okay um so again really

1193
00:52:25,099 --> 00:52:28,490
kind of handy the way that that stuff

1194
00:52:27,139 --> 00:52:32,420
works and you kind of get this really

1195
00:52:28,489 --> 00:52:34,639
nice sort of ability to just zoom around

1196
00:52:32,420 --> 00:52:36,079
images and and find out what's going on

1197
00:52:34,639 --> 00:52:37,009
with them and all sorts of stuff like

1198
00:52:36,079 --> 00:52:40,280
that

1199
00:52:37,010 --> 00:52:43,730
and so on now the other things you can

1200
00:52:40,280 --> 00:52:46,119
do is you can start to use features that

1201
00:52:43,730 --> 00:52:48,710
analyze the data if you want to and

1202
00:52:46,119 --> 00:52:50,000
again my memory is really hazy on how

1203
00:52:48,710 --> 00:52:53,088
these works so you'll have to forgive me

1204
00:52:50,000 --> 00:52:55,730
but let's suppose I want this image

1205
00:52:53,088 --> 00:52:59,599
source to be analyzed in some way there

1206
00:52:55,730 --> 00:53:04,010
are other nodes that do that and I don't

1207
00:52:59,599 --> 00:53:07,609
really remember what they are so minimum

1208
00:53:04,010 --> 00:53:11,270
and maximum is an example node and so if

1209
00:53:07,608 --> 00:53:13,460
i hook this up it'll just tell me right

1210
00:53:11,269 --> 00:53:15,289
for the node that I was looking at

1211
00:53:13,460 --> 00:53:17,690
here's all the minimum and maximum

1212
00:53:15,289 --> 00:53:22,909
values that there are now there's a

1213
00:53:17,690 --> 00:53:25,880
reason why there's like XY z-- and Z's

1214
00:53:22,909 --> 00:53:27,108
of these I think that's because we just

1215
00:53:25,880 --> 00:53:28,730
sort of had this notion that things

1216
00:53:27,108 --> 00:53:31,909
could be for wide we want to know so

1217
00:53:28,730 --> 00:53:36,079
those are like RGB or XYZ depending on

1218
00:53:31,909 --> 00:53:37,219
what got fed in I guess again don't

1219
00:53:36,079 --> 00:53:41,750
really remember how this tool worked

1220
00:53:37,219 --> 00:53:43,519
very well um so you know you can you

1221
00:53:41,750 --> 00:53:45,108
know do stuff like that the other things

1222
00:53:43,519 --> 00:53:49,460
you could do is is you could put in like

1223
00:53:45,108 --> 00:53:52,009
actual just stuff code so if you wanted

1224
00:53:49,460 --> 00:53:56,329
to you could say well take you know this

1225
00:53:52,010 --> 00:53:59,599
thing don't ask me if this is gonna work

1226
00:53:56,329 --> 00:54:03,349
I'm just randomly trying this I think it

1227
00:53:59,599 --> 00:54:04,970
might I don't know but like okay I want

1228
00:54:03,349 --> 00:54:10,960
to look at this image but I want to look

1229
00:54:04,969 --> 00:54:10,959
at the image does it work No

1230
00:54:12,409 --> 00:54:18,528
I'm sure if it does or if it doesn't oh

1231
00:54:14,920 --> 00:54:27,440
well this is an image source so maybe I

1232
00:54:18,528 --> 00:54:30,159
just need to do one of these or

1233
00:54:27,440 --> 00:54:30,159
something I don't know

1234
00:54:35,298 --> 00:54:39,619
all right maybe not so again you'll have

1235
00:54:38,659 --> 00:54:40,849
to forgive me I don't really remember

1236
00:54:39,619 --> 00:54:43,489
how a lot of the stuff works all right

1237
00:54:40,849 --> 00:54:44,869
so this thing knows it's a one of these

1238
00:54:43,489 --> 00:54:47,898
as an input but I guess it doesn't

1239
00:54:44,869 --> 00:54:52,249
output an image I'm not sure but anyway

1240
00:54:47,898 --> 00:54:57,578
inside the input field I think you can

1241
00:54:52,248 --> 00:55:01,278
just type stuff yeah so if you wanted to

1242
00:54:57,579 --> 00:55:05,059
change something that was coming in you

1243
00:55:01,278 --> 00:55:08,688
could put a like a scalar value in there

1244
00:55:05,059 --> 00:55:10,999
or whatever I guess I just don't know if

1245
00:55:08,688 --> 00:55:14,868
it can flow through the pipeline you

1246
00:55:10,998 --> 00:55:16,698
would think right but maybe not so for

1247
00:55:14,869 --> 00:55:19,789
example if that's like I don't know if I

1248
00:55:16,699 --> 00:55:21,588
can inspect this yeah so I don't know

1249
00:55:19,789 --> 00:55:23,869
that seems kind of broken it may be that

1250
00:55:21,588 --> 00:55:26,088
I just never quite finished those I

1251
00:55:23,869 --> 00:55:29,179
don't know so I'm not really sure what

1252
00:55:26,088 --> 00:55:30,858
that note was for since the polymorphism

1253
00:55:29,179 --> 00:55:32,209
of the types was maybe not as good as it

1254
00:55:30,858 --> 00:55:33,679
should have been because it should have

1255
00:55:32,208 --> 00:55:35,538
been able to flow through and maybe that

1256
00:55:33,679 --> 00:55:39,318
maybe I just didn't get around to having

1257
00:55:35,539 --> 00:55:41,419
him anything slot nice idea but I don't

1258
00:55:39,318 --> 00:55:42,918
yeah gonna maybe it I'm not sure what we

1259
00:55:41,418 --> 00:55:45,379
ever would have used it for possibly we

1260
00:55:42,918 --> 00:55:47,929
never really did use it it doesn't look

1261
00:55:45,380 --> 00:55:50,419
like it really works um there's this

1262
00:55:47,929 --> 00:55:51,739
thing called controls and controls is

1263
00:55:50,418 --> 00:55:56,719
just something that allows you to

1264
00:55:51,739 --> 00:55:58,608
specify some values again don't really

1265
00:55:56,719 --> 00:56:01,809
know what this was used for but I think

1266
00:55:58,608 --> 00:56:05,208
in some sense it's if you wanted to have

1267
00:56:01,809 --> 00:56:08,149
stuff that was sort of controlled from a

1268
00:56:05,208 --> 00:56:10,278
central location so for example if you

1269
00:56:08,148 --> 00:56:16,009
wanted a lot of nodes that had a boolean

1270
00:56:10,278 --> 00:56:18,199
like let's say or even a float so let's

1271
00:56:16,009 --> 00:56:20,509
say that you wanted all of your

1272
00:56:18,199 --> 00:56:23,418
inspector nodes to use the same pixel

1273
00:56:20,509 --> 00:56:25,369
scale so what you could do is you could

1274
00:56:23,418 --> 00:56:27,978
wire up something like the pixel scale

1275
00:56:25,369 --> 00:56:31,729
of all of those nodes so you can see

1276
00:56:27,978 --> 00:56:35,418
here like I'm looking at that right if I

1277
00:56:31,728 --> 00:56:39,048
was to sort of change that value it

1278
00:56:35,418 --> 00:56:45,048
would change in that node lister as well

1279
00:56:39,048 --> 00:56:48,168
right and so that's what that was for I

1280
00:56:45,048 --> 00:56:48,949
just don't really know if we ever used

1281
00:56:48,168 --> 00:56:50,480
it much

1282
00:56:48,949 --> 00:56:53,960
all right let me try to think if there's

1283
00:56:50,480 --> 00:56:56,599
anything else in particular recent

1284
00:56:53,960 --> 00:56:57,800
element an element gather I don't think

1285
00:56:56,599 --> 00:56:58,969
are particularly relevant they're just

1286
00:56:57,800 --> 00:57:02,030
things that gather things out of a

1287
00:56:58,969 --> 00:57:04,669
listing and the pixel picker outlining

1288
00:57:02,030 --> 00:57:07,040
profile report all that stuff is these

1289
00:57:04,670 --> 00:57:10,220
are for debugging only like that so this

1290
00:57:07,039 --> 00:57:11,570
is just that how mustache is running at

1291
00:57:10,219 --> 00:57:14,299
the moment right you can see what it's

1292
00:57:11,570 --> 00:57:17,269
finding its time on which is not

1293
00:57:14,300 --> 00:57:19,220
particularly relevant so I think that's

1294
00:57:17,269 --> 00:57:21,320
most of it let me see if there's other

1295
00:57:19,219 --> 00:57:25,119
things that I should be looking at here

1296
00:57:21,320 --> 00:57:25,120
just to show some of the other stuff

1297
00:57:26,920 --> 00:57:38,480
stat test image span test so let me look

1298
00:57:34,639 --> 00:57:40,940
back at the moustache client code and

1299
00:57:38,480 --> 00:57:44,570
see if there was anything else in there

1300
00:57:40,940 --> 00:57:49,429
in particular that is worth looking at

1301
00:57:44,570 --> 00:57:54,769
so if I look at the image span test see

1302
00:57:49,429 --> 00:57:56,750
what that does no that just yeah that

1303
00:57:54,769 --> 00:58:01,820
that's just working with pitches and

1304
00:57:56,750 --> 00:58:06,889
stuff are we where's the deep memory

1305
00:58:01,820 --> 00:58:15,880
test so the deep memory test are we not

1306
00:58:06,889 --> 00:58:22,869
calling it oh it was turned off hmm

1307
00:58:15,880 --> 00:58:26,619
so I'm gonna turn all this stuff on and

1308
00:58:22,869 --> 00:58:26,619
see what happens

1309
00:58:26,920 --> 00:58:35,900
like I don't know we've come to the end

1310
00:58:32,300 --> 00:58:38,440
of the demo but I don't really know what

1311
00:58:35,900 --> 00:58:41,599
this stuff does so let's try it

1312
00:58:38,440 --> 00:58:47,210
alright so here we are back at the

1313
00:58:41,599 --> 00:58:49,869
process list right and yeah maybe I'll

1314
00:58:47,210 --> 00:58:52,940
clear this whiteboard

1315
00:58:49,869 --> 00:58:52,940
[Music]

1316
00:58:53,949 --> 00:59:01,069
and we'll just go ahead and run this

1317
00:58:56,539 --> 00:59:05,840
again mustache client test here's this

1318
00:59:01,070 --> 00:59:07,940
latest one here's the process here's the

1319
00:59:05,840 --> 00:59:09,289
latest process I guess I don't really

1320
00:59:07,940 --> 00:59:12,320
need the process list for any particular

1321
00:59:09,289 --> 00:59:20,090
reason at the moment and let me make a

1322
00:59:12,320 --> 00:59:22,820
listing so we can look at it so here is

1323
00:59:20,090 --> 00:59:24,380
an example of mustache input so you can

1324
00:59:22,820 --> 00:59:27,650
see it started doing the same thing I

1325
00:59:24,380 --> 00:59:30,079
was doing before and maybe I'll start to

1326
00:59:27,650 --> 00:59:31,369
use mustache like so we can kind of see

1327
00:59:30,079 --> 00:59:34,849
how you might use it in practice just

1328
00:59:31,369 --> 00:59:37,460
you get an idea of it right so maybe one

1329
00:59:34,849 --> 00:59:41,210
thing I do is I just have my like latest

1330
00:59:37,460 --> 00:59:43,849
listing right and that thing is just

1331
00:59:41,210 --> 00:59:49,510
going to be this node and it's gonna be

1332
00:59:43,849 --> 00:59:54,230
this node at about this size let's say

1333
00:59:49,510 --> 00:59:55,700
and I won't go over that thing here and

1334
00:59:54,230 --> 00:59:59,840
what I'm gonna do here is I'm gonna do a

1335
00:59:55,699 --> 01:00:12,529
node interface lock and I'm going to do

1336
00:59:59,840 --> 01:00:19,190
a deselect of it there we go wait like

1337
01:00:12,530 --> 01:00:21,610
that no that's not what I want then this

1338
01:00:19,190 --> 01:00:21,610
what I want

1339
01:00:21,750 --> 01:00:34,739
I don't know what some of these things

1340
01:00:27,869 --> 01:00:35,940
do all right well I don't know anyway

1341
01:00:34,739 --> 01:00:37,379
point being a top of the interface

1342
01:00:35,940 --> 01:00:41,670
lock-on which means that I can always

1343
01:00:37,380 --> 01:00:43,890
like interact with it in this view and I

1344
01:00:41,670 --> 01:00:45,119
believe if I go back to the main view

1345
01:00:43,889 --> 01:00:47,879
you can see that that's tracked

1346
01:00:45,119 --> 01:00:49,680
separately so it's actually any time I

1347
01:00:47,880 --> 01:00:51,539
flip back here this guy's UI will be

1348
01:00:49,679 --> 01:00:53,879
active and maybe I can open up the

1349
01:00:51,539 --> 01:00:56,219
thread information here you can see

1350
01:00:53,880 --> 01:00:57,090
where each line of output came from -

1351
01:00:56,219 --> 01:00:59,730
which is kind of nice

1352
01:00:57,090 --> 01:01:04,490
so here when I run the program I get all

1353
01:00:59,730 --> 01:01:08,670
of my debug output and you know whatever

1354
01:01:04,489 --> 01:01:11,039
when we get to the input one thing I I

1355
01:01:08,670 --> 01:01:22,559
don't actually know how the input stuff

1356
01:01:11,039 --> 01:01:24,000
works or if it works I'm gonna skip that

1357
01:01:22,559 --> 01:01:26,849
part cuz I'd literally just don't

1358
01:01:24,000 --> 01:01:33,750
remember I think you could input values

1359
01:01:26,849 --> 01:01:39,390
- mustache I want to say but how I don't

1360
01:01:33,750 --> 01:01:41,869
know you can see here it's asking for

1361
01:01:39,389 --> 01:01:44,868
input that's what the blue line means

1362
01:01:41,869 --> 01:01:44,869
right

1363
01:01:45,849 --> 01:02:06,579
I do I is there like a type this in sort

1364
01:01:54,880 --> 01:02:08,380
of anyone anyone no I got nothing so I

1365
01:02:06,579 --> 01:02:10,480
think you could input values here

1366
01:02:08,380 --> 01:02:12,700
don't ask me I'd have to go read the

1367
01:02:10,480 --> 01:02:16,570
source code so I'm gonna skip that and

1368
01:02:12,699 --> 01:02:17,169
just hit f5 here's an example of a

1369
01:02:16,570 --> 01:02:19,990
breakpoint

1370
01:02:17,170 --> 01:02:23,019
right like we said hit f5 again here we

1371
01:02:19,989 --> 01:02:25,389
are at the structured art stuff gonna

1372
01:02:23,019 --> 01:02:28,300
print that in and so one of the things

1373
01:02:25,389 --> 01:02:30,670
too you can see in fact here at the

1374
01:02:28,300 --> 01:02:33,490
structured art test let's go ahead and

1375
01:02:30,670 --> 01:02:34,720
create another view here for a second

1376
01:02:33,489 --> 01:02:37,629
and what I'm going to do is in a size

1377
01:02:34,719 --> 01:02:39,639
this node differently again really using

1378
01:02:37,630 --> 01:02:41,470
the power here of mustache like this is

1379
01:02:39,639 --> 01:02:43,839
the same node and all of its state is

1380
01:02:41,469 --> 01:02:45,069
the same but I can position it and edit

1381
01:02:43,840 --> 01:02:46,690
it differently which is really nice

1382
01:02:45,070 --> 01:02:48,940
right so I have different views for

1383
01:02:46,690 --> 01:02:50,139
different purposes and different sizes

1384
01:02:48,940 --> 01:02:53,260
and all that stuff is just kind of

1385
01:02:50,139 --> 01:02:55,779
really handy um so anyway inside here

1386
01:02:53,260 --> 01:03:00,220
what I'm gonna do is say look I want to

1387
01:02:55,780 --> 01:03:00,970
look at the latest image so I'm just

1388
01:03:00,219 --> 01:03:08,769
gonna do that

1389
01:03:00,969 --> 01:03:09,969
and do it like this and as I run the

1390
01:03:08,769 --> 01:03:13,329
program right because remember the

1391
01:03:09,969 --> 01:03:15,719
program is halted now oops what resize

1392
01:03:13,329 --> 01:03:15,719
this guy

1393
01:03:17,760 --> 01:03:24,630
oops maybe like that there we go um soon

1394
01:03:22,409 --> 01:03:26,579
as I run this program I can actually

1395
01:03:24,630 --> 01:03:30,030
step back you can see it kind of animate

1396
01:03:26,579 --> 01:03:33,029
through but also if I say specific line

1397
01:03:30,030 --> 01:03:42,900
false so you can see like on here

1398
01:03:33,030 --> 01:03:49,100
specific line true alright maybe I don't

1399
01:03:42,900 --> 01:03:51,780
remember I thought there was a way I

1400
01:03:49,099 --> 01:03:56,009
thought there was a way to do this where

1401
01:03:51,780 --> 01:03:58,400
it always picked the last one maybe it's

1402
01:03:56,010 --> 01:03:58,400
this way

1403
01:04:04,250 --> 01:04:12,409
yeah so I guess if you want to when we

1404
01:04:10,880 --> 01:04:16,340
go back to the default whiteboard here

1405
01:04:12,409 --> 01:04:18,409
where this stuff is is hanging out um so

1406
01:04:16,340 --> 01:04:21,019
I guess maybe this is the way you were

1407
01:04:18,409 --> 01:04:22,399
supposed to do it I'm not sure again

1408
01:04:21,019 --> 01:04:23,929
it's been a really long time since I've

1409
01:04:22,400 --> 01:04:25,250
used this program I'm surprised I've

1410
01:04:23,929 --> 01:04:28,879
remembered as many things as I did and

1411
01:04:25,250 --> 01:04:32,449
the UI is pretty bad so if you connect a

1412
01:04:28,880 --> 01:04:38,980
process and then you say I want to find

1413
01:04:32,449 --> 01:04:38,980
the most recent line you can just attach

1414
01:04:40,510 --> 01:04:53,619
that this example here you just say I

1415
01:04:47,269 --> 01:04:53,619
want something that looks like this

1416
01:04:53,800 --> 01:05:03,260
right and I'll be darned if I know how

1417
01:05:01,608 --> 01:05:08,719
this worked but I think this would

1418
01:05:03,260 --> 01:05:12,020
basically match any time it got the line

1419
01:05:08,719 --> 01:05:13,299
that looked like that so that's not all

1420
01:05:12,019 --> 01:05:16,880
right

1421
01:05:13,300 --> 01:05:19,160
this actually is a search for something

1422
01:05:16,880 --> 01:05:20,990
that looks like that line so basically

1423
01:05:19,159 --> 01:05:23,598
if I ran the program again it would find

1424
01:05:20,989 --> 01:05:26,209
that line that's not the thing I

1425
01:05:23,599 --> 01:05:30,320
actually wanted I guess oh wait no it is

1426
01:05:26,210 --> 01:05:32,829
look it found frame nine wow I don't

1427
01:05:30,320 --> 01:05:35,480
even know how it did that all right so

1428
01:05:32,829 --> 01:05:38,239
yeah that is what I wanted never mind

1429
01:05:35,480 --> 01:05:40,400
man this program is nuts all right so

1430
01:05:38,239 --> 01:05:42,049
anyway now I've got the most recent

1431
01:05:40,400 --> 01:05:48,858
element here I actually don't need this

1432
01:05:42,050 --> 01:05:50,180
in this in this particular view which

1433
01:05:48,858 --> 01:05:53,420
I'm not sure I think I just called

1434
01:05:50,179 --> 01:05:55,399
delete on it maybe doesn't does that get

1435
01:05:53,420 --> 01:06:00,650
rid of it now that gets rid of it

1436
01:05:55,400 --> 01:06:02,119
entirely try that more time so I'm going

1437
01:06:00,650 --> 01:06:06,170
to say recent elements and I'm gonna

1438
01:06:02,119 --> 01:06:10,820
grab this process and I'm gonna grab

1439
01:06:06,170 --> 01:06:13,039
this line as an example line and then

1440
01:06:10,820 --> 01:06:15,670
I'm gonna patch that through to this

1441
01:06:13,039 --> 01:06:15,670
image source

1442
01:06:16,429 --> 01:06:23,368
right again super-powerful program just

1443
01:06:20,880 --> 01:06:27,900
horrible you I needed like a lot of

1444
01:06:23,369 --> 01:06:31,019
Polish anyway so here's that image

1445
01:06:27,900 --> 01:06:33,920
source node now right and as I run you

1446
01:06:31,019 --> 01:06:36,840
can see that it updates every frame and

1447
01:06:33,920 --> 01:06:40,590
more importantly let's say I kill this

1448
01:06:36,840 --> 01:06:43,579
executable like it's gone now right if I

1449
01:06:40,590 --> 01:06:46,320
run it again what you can see is that

1450
01:06:43,579 --> 01:06:47,819
search is very powerful this is a

1451
01:06:46,320 --> 01:06:49,530
totally new run of the program it

1452
01:06:47,820 --> 01:06:51,750
figured out that that was what I was

1453
01:06:49,530 --> 01:06:53,550
looking for and is now showing me the

1454
01:06:51,750 --> 01:06:59,429
most recent line that looks like that

1455
01:06:53,550 --> 01:07:00,930
line right so again pretty cool I don't

1456
01:06:59,429 --> 01:07:02,460
know what this is complaining about but

1457
01:07:00,929 --> 01:07:02,879
I guess it doesn't know whatever that

1458
01:07:02,460 --> 01:07:11,130
thing is

1459
01:07:02,880 --> 01:07:12,119
I guess those things were I guess some

1460
01:07:11,130 --> 01:07:13,289
of those things were if zeroed out

1461
01:07:12,119 --> 01:07:15,480
because they were never implemented I

1462
01:07:13,289 --> 01:07:23,219
don't know I have no idea what this

1463
01:07:15,480 --> 01:07:24,750
thing is this looks like it might be an

1464
01:07:23,219 --> 01:07:28,799
infinite loop so I may have to just turn

1465
01:07:24,750 --> 01:07:36,239
this one off the hypothetical

1466
01:07:28,800 --> 01:07:40,640
compression example let me just

1467
01:07:36,239 --> 01:07:42,099
recompile this here we go

1468
01:07:40,639 --> 01:07:45,349
and

1469
01:07:42,099 --> 01:07:45,349
[Music]

1470
01:07:47,670 --> 01:07:56,849
um so yeah we'll get that just fine that

1471
01:07:55,260 --> 01:07:59,070
just keeps dumping images till you run

1472
01:07:56,849 --> 01:08:00,420
out of disk space okay that's that maybe

1473
01:07:59,070 --> 01:08:01,950
shouldn't okay

1474
01:08:00,420 --> 01:08:09,409
I admit that I should not have enabled

1475
01:08:01,949 --> 01:08:26,329
that so maybe I just want this one I

1476
01:08:09,409 --> 01:08:26,329
don't know here we go oops nope no no

1477
01:08:26,479 --> 01:08:45,299
alright there we go so I'm going to run

1478
01:08:31,470 --> 01:08:51,440
through to the deep memory test here's

1479
01:08:45,300 --> 01:08:55,470
the deep memory test I don't really know

1480
01:08:51,439 --> 01:08:58,889
what it does but I'm gonna try to figure

1481
01:08:55,470 --> 01:09:00,840
it out all right so if we come back here

1482
01:08:58,890 --> 01:09:06,270
and we look at this listing that's got

1483
01:09:00,840 --> 01:09:08,100
the deep memory test in it so what I'm

1484
01:09:06,270 --> 01:09:11,610
gonna do is I'm just gonna inspect that

1485
01:09:08,100 --> 01:09:14,420
image so here is an image source node

1486
01:09:11,609 --> 01:09:18,149
and I'm gonna look at that particular

1487
01:09:14,420 --> 01:09:20,100
image which is this and see if this

1488
01:09:18,149 --> 01:09:21,809
stuff works still I have no idea and I

1489
01:09:20,100 --> 01:09:23,820
may just be using it wrong as well so

1490
01:09:21,810 --> 01:09:27,330
who knows but here's the image source

1491
01:09:23,819 --> 01:09:31,920
right and let me go ahead and grab a

1492
01:09:27,329 --> 01:09:38,340
pixel picker and get one of those pixel

1493
01:09:31,920 --> 01:09:47,789
inspectors going we'll put that here and

1494
01:09:38,340 --> 01:09:53,579
we'll put this here and I'll just grab

1495
01:09:47,789 --> 01:10:00,289
a pixel inspector and we'll do it like

1496
01:09:53,579 --> 01:10:00,289
that and we're gonna inspect this image

1497
01:10:00,738 --> 01:10:06,569
all right so again don't really know if

1498
01:10:04,319 --> 01:10:10,289
this works or not we're gonna find out

1499
01:10:06,569 --> 01:10:11,880
it may or may not work so here's me like

1500
01:10:10,289 --> 01:10:14,069
scanning this image with the pixel

1501
01:10:11,880 --> 01:10:19,079
inspector I don't see it reading any

1502
01:10:14,069 --> 01:10:21,539
deep memory out of there so I guess I'm

1503
01:10:19,079 --> 01:10:24,149
not sure if the deep memory stuff just

1504
01:10:21,539 --> 01:10:25,649
didn't end up getting moved over from

1505
01:10:24,149 --> 01:10:27,779
the previous version of my session I

1506
01:10:25,649 --> 01:10:30,859
know this stuff worked but I also maybe

1507
01:10:27,779 --> 01:10:30,859
just am NOT doing it correctly

1508
01:10:43,229 --> 01:10:51,789
and it doesn't look like there's a node

1509
01:10:45,640 --> 01:10:54,030
specifically for that it's not that I

1510
01:10:51,789 --> 01:10:54,029
can find

1511
01:10:57,189 --> 01:11:01,739
yes I'm not sure I'm not sure how to get

1512
01:11:02,550 --> 01:11:12,550
I'm not sure how to get the deep memory

1513
01:11:06,310 --> 01:11:16,840
stuff out so I don't know if maybe the M

1514
01:11:12,550 --> 01:11:18,369
spaces were just we were using those

1515
01:11:16,840 --> 01:11:19,810
exclusively and we stopped using the

1516
01:11:18,369 --> 01:11:21,010
deep memory so there isn't a note in

1517
01:11:19,810 --> 01:11:23,230
here to view it anymore or something

1518
01:11:21,010 --> 01:11:26,860
like that I really can't remember it was

1519
01:11:23,229 --> 01:11:35,529
working at one point but I don't know if

1520
01:11:26,859 --> 01:11:38,729
it's actually working anymore I'm

1521
01:11:35,529 --> 01:11:41,729
assuming I can't do this is an M space

1522
01:11:38,729 --> 01:11:41,729
yeah

1523
01:11:47,998 --> 01:11:56,708
so I don't know I don't know what the

1524
01:11:52,569 --> 01:11:58,208
deal is with that it may be that that

1525
01:11:56,708 --> 01:11:59,800
got pulled out and for some reason

1526
01:11:58,208 --> 01:12:02,078
wasn't in there or maybe that I'm

1527
01:11:59,800 --> 01:12:04,239
forgetting the way that you actually do

1528
01:12:02,078 --> 01:12:08,108
it again because the UI is so janky it

1529
01:12:04,238 --> 01:12:10,748
may be that it's just like yeah you need

1530
01:12:08,109 --> 01:12:11,889
to do this other set of things didn't

1531
01:12:10,748 --> 01:12:15,010
you know

1532
01:12:11,889 --> 01:12:23,800
and then you can actually see it if you

1533
01:12:15,010 --> 01:12:26,189
look inside what the code says it looks

1534
01:12:23,800 --> 01:12:29,349
like it's going by eight by eight blocks

1535
01:12:26,189 --> 01:12:36,369
right and just yeah it's pretty clear

1536
01:12:29,349 --> 01:12:37,569
what's doing it should have just yeah I

1537
01:12:36,368 --> 01:12:39,128
mean that should have just been able to

1538
01:12:37,569 --> 01:12:46,018
gather this stuff up when we look at a

1539
01:12:39,128 --> 01:12:48,189
particular image so I'm not sure

1540
01:12:46,019 --> 01:12:53,338
unfortunately like I just don't remember

1541
01:12:48,189 --> 01:12:58,418
the code well enough to really remember

1542
01:12:53,338 --> 01:13:08,168
what was going on there or I'd go look

1543
01:12:58,418 --> 01:13:14,069
I'm pretty sure whiteboard where we at

1544
01:13:08,168 --> 01:13:14,069
plot process bla bla bla bla bla

1545
01:13:20,538 --> 01:13:35,389
yeah I don't see any I don't see

1546
01:13:28,340 --> 01:13:41,029
anything forward and so I don't know not

1547
01:13:35,389 --> 01:13:42,980
sure where it goes there was a previous

1548
01:13:41,029 --> 01:13:44,868
version of mustache that definitely had

1549
01:13:42,979 --> 01:13:48,049
deep memory implemented and I thought

1550
01:13:44,868 --> 01:13:49,399
this one did too but I may be we replace

1551
01:13:48,050 --> 01:13:51,139
them with M spaces because that's all

1552
01:13:49,399 --> 01:13:52,908
that anyone ever used and then I never

1553
01:13:51,139 --> 01:13:55,038
made the node to actually look at deep

1554
01:13:52,908 --> 01:13:56,359
memory which is unfortunate because deep

1555
01:13:55,038 --> 01:14:01,130
memory is cool although it basically

1556
01:13:56,359 --> 01:14:05,299
does the same thing as M spaces but just

1557
01:14:01,130 --> 01:14:06,500
for more generic regions of memory so I

1558
01:14:05,300 --> 01:14:09,369
guess I just never got around to

1559
01:14:06,500 --> 01:14:11,899
implementing that which is unfortunate

1560
01:14:09,368 --> 01:14:13,279
let me just go ahead and real quickly

1561
01:14:11,899 --> 01:14:15,859
double check that there isn't anything

1562
01:14:13,279 --> 01:14:17,569
that I've missed I would have liked to

1563
01:14:15,859 --> 01:14:19,069
have dem in the deep memory I don't know

1564
01:14:17,569 --> 01:14:20,448
if I have an older version of mustache

1565
01:14:19,069 --> 01:14:24,908
maybe I'll have to go look for one and

1566
01:14:20,448 --> 01:14:31,819
see if I can find it so I assume that

1567
01:14:24,908 --> 01:14:34,569
the image markup stuff if that stuff

1568
01:14:31,819 --> 01:14:34,569
works or not either

1569
01:14:55,849 --> 01:15:04,599
I could have sworn this stuff worked I'm

1570
01:15:01,578 --> 01:15:04,599
creeped out right now

1571
01:15:09,670 --> 01:15:17,029
so here's one thing I will say for sure

1572
01:15:13,869 --> 01:15:18,710
is that I know that the pixel inspector

1573
01:15:17,029 --> 01:15:21,109
would show all the transforms that stuff

1574
01:15:18,710 --> 01:15:23,270
went through and so at least with

1575
01:15:21,109 --> 01:15:25,429
respect to the EM spaces you could print

1576
01:15:23,270 --> 01:15:26,930
out all of the and I mean you saw this

1577
01:15:25,430 --> 01:15:28,400
kind of working but you could print out

1578
01:15:26,930 --> 01:15:29,869
all of the transforms that it went

1579
01:15:28,399 --> 01:15:32,149
through as you went through decoding a

1580
01:15:29,869 --> 01:15:36,250
frame and just see them all listed which

1581
01:15:32,149 --> 01:15:38,509
was made it obvious where your bug was I

1582
01:15:36,250 --> 01:15:40,609
guess the deep memory version of that

1583
01:15:38,510 --> 01:15:44,210
never got implemented or I just forget

1584
01:15:40,609 --> 01:15:48,679
how to view it which is too bad anyway

1585
01:15:44,210 --> 01:15:55,430
so I think that's most of it and like I

1586
01:15:48,680 --> 01:15:58,100
said this stuff just got stored take a

1587
01:15:55,430 --> 01:15:59,600
look here you would make a directory and

1588
01:15:58,100 --> 01:16:01,370
then you just run it there you can see

1589
01:15:59,600 --> 01:16:03,350
these MRF files this is the one where I

1590
01:16:01,369 --> 01:16:04,609
let that thing start storing images so

1591
01:16:03,350 --> 01:16:08,210
of course they get pretty big pretty

1592
01:16:04,609 --> 01:16:11,539
quickly but that's all it is and you

1593
01:16:08,210 --> 01:16:14,029
could send one of these MRF files was a

1594
01:16:11,539 --> 01:16:18,590
run of the program so you could also

1595
01:16:14,029 --> 01:16:20,599
send these MRF files around and that was

1596
01:16:18,590 --> 01:16:22,100
kind of nice so if you know if it broke

1597
01:16:20,600 --> 01:16:26,630
on my machine but it was if it was

1598
01:16:22,100 --> 01:16:28,160
Jeff's code that was potentially the one

1599
01:16:26,630 --> 01:16:29,989
that was causing the problem I could

1600
01:16:28,159 --> 01:16:33,319
just send him the MRF file and he could

1601
01:16:29,988 --> 01:16:35,238
view it and vice versa right so once you

1602
01:16:33,319 --> 01:16:38,299
capture a run it's yours to keep so to

1603
01:16:35,238 --> 01:16:39,409
speak and so that was also really nice

1604
01:16:38,300 --> 01:16:41,150
you just create a directory on your

1605
01:16:39,409 --> 01:16:42,949
machine and just let it fill up you

1606
01:16:41,149 --> 01:16:45,189
could even put in an external drive oh

1607
01:16:42,949 --> 01:16:45,189
whoops

1608
01:16:46,369 --> 01:16:50,059
you could even make an external drive

1609
01:16:48,439 --> 01:16:52,369
for it that just like you know you had

1610
01:16:50,060 --> 01:16:54,230
some huge you know two terabyte drive

1611
01:16:52,369 --> 01:16:56,238
that just sat there holding all the

1612
01:16:54,229 --> 01:17:03,049
moustache runs you know in asti you

1613
01:16:56,238 --> 01:17:06,250
would go what was the other file there's

1614
01:17:03,050 --> 01:17:06,250
an MWF file

1615
01:17:09,859 --> 01:17:13,519
so I think that's everything and again I

1616
01:17:11,960 --> 01:17:15,260
apologize the demos not particularly

1617
01:17:13,520 --> 01:17:16,790
smooth because I've forgotten how to use

1618
01:17:15,260 --> 01:17:20,989
most of it and it was a pretty janky

1619
01:17:16,789 --> 01:17:22,880
program but basically all of those

1620
01:17:20,989 --> 01:17:24,859
features like being able to track things

1621
01:17:22,880 --> 01:17:28,369
over time automatically having

1622
01:17:24,859 --> 01:17:30,199
everything remember how to organize and

1623
01:17:28,369 --> 01:17:32,180
lay out all your data so that when you

1624
01:17:30,199 --> 01:17:34,699
run a program multiple times you just

1625
01:17:32,180 --> 01:17:37,730
get it again the searching through the

1626
01:17:34,699 --> 01:17:39,109
logs for stuff and then showing that so

1627
01:17:37,729 --> 01:17:41,539
that you could always like pick out

1628
01:17:39,109 --> 01:17:42,679
different things you wanted to grab like

1629
01:17:41,539 --> 01:17:44,149
all of those things are features

1630
01:17:42,680 --> 01:17:45,800
debuggers could just have like there's

1631
01:17:44,149 --> 01:17:47,629
really no reason not to and there's also

1632
01:17:45,800 --> 01:17:48,920
no reason that the UI has to be janky

1633
01:17:47,630 --> 01:17:50,329
right if you sat down and tried to

1634
01:17:48,920 --> 01:17:51,859
figure out what a good design for the

1635
01:17:50,329 --> 01:17:53,989
I'd be I'm sure he could come up with it

1636
01:17:51,859 --> 01:17:55,369
it wasn't really the focus at the time

1637
01:17:53,989 --> 01:17:58,939
right because it wasn't a commercial

1638
01:17:55,369 --> 01:18:01,189
product but it's it's not like it's some

1639
01:17:58,939 --> 01:18:04,939
huge you know we'd have to imagine some

1640
01:18:01,189 --> 01:18:08,229
great leap of of computer engineering or

1641
01:18:04,939 --> 01:18:08,229
something right to make that happen

1642
01:18:08,420 --> 01:18:18,829
I will go ahead and and do a quick Q&amp;A

1643
01:18:14,300 --> 01:18:23,900
if anyone has questions about that but I

1644
01:18:18,829 --> 01:18:25,699
guess what I would say is that was just

1645
01:18:23,899 --> 01:18:28,009
stuff that was made in the course of

1646
01:18:25,699 --> 01:18:29,899
actually developing and so I'm

1647
01:18:28,010 --> 01:18:31,369
pretty sure that it's not the kind of

1648
01:18:29,899 --> 01:18:34,659
thing that would take that long to add

1649
01:18:31,369 --> 01:18:37,340
to a debugger that currently existed

1650
01:18:34,659 --> 01:18:39,319
there are some architectural things that

1651
01:18:37,340 --> 01:18:40,970
I guess are kind of hard that you have

1652
01:18:39,319 --> 01:18:43,159
to have to make an investment in like

1653
01:18:40,970 --> 01:18:44,659
storing the complete state of everything

1654
01:18:43,159 --> 01:18:46,340
all the time and all the source files

1655
01:18:44,659 --> 01:18:50,059
and all the data that got outputted and

1656
01:18:46,340 --> 01:18:55,539
all that stuff that is some work it's

1657
01:18:50,060 --> 01:18:58,340
not that hard and coming up with a good

1658
01:18:55,539 --> 01:19:01,779
UI is obviously also something that

1659
01:18:58,340 --> 01:19:04,430
would take some real work because that's

1660
01:19:01,779 --> 01:19:06,349
refinement and polish and thinking

1661
01:19:04,430 --> 01:19:08,150
things through in a way that's it's not

1662
01:19:06,350 --> 01:19:09,860
about programming it's about figuring

1663
01:19:08,149 --> 01:19:14,379
out the right way to expose things to

1664
01:19:09,859 --> 01:19:14,380
the user so that's also its own thing

1665
01:19:16,720 --> 01:19:21,730
you know but again the basic idea that

1666
01:19:19,699 --> 01:19:23,289
you can just do stuff like I

1667
01:19:21,729 --> 01:19:26,379
have an array of vertices and I want to

1668
01:19:23,289 --> 01:19:29,529
printf a log and say which vertex is

1669
01:19:26,380 --> 01:19:32,590
affected at any time and then later just

1670
01:19:29,529 --> 01:19:35,979
pick see a 3d version of a model pick

1671
01:19:32,590 --> 01:19:37,989
that vertex and see the history that is

1672
01:19:35,979 --> 01:19:42,579
as easy to implement as what I

1673
01:19:37,988 --> 01:19:45,309
implemented here for images right so

1674
01:19:42,579 --> 01:19:46,988
this same concept that ranges of memory

1675
01:19:45,310 --> 01:19:48,789
can just get tracked and then you just

1676
01:19:46,988 --> 01:19:50,500
tell me what the range of memory is and

1677
01:19:48,789 --> 01:19:52,390
I can go back and query all of these

1678
01:19:50,500 --> 01:19:54,810
printf and the printf scan have things

1679
01:19:52,390 --> 01:19:59,140
like 3d data or images or other stuff

1680
01:19:54,810 --> 01:20:00,940
it's all doable right any not that much

1681
01:19:59,140 --> 01:20:07,590
time you know 6 months of work you could

1682
01:20:00,939 --> 01:20:09,969
do all of this stuff right and so I

1683
01:20:07,590 --> 01:20:13,329
would just really encourage people to

1684
01:20:09,970 --> 01:20:15,130
start thinking about how much power we

1685
01:20:13,329 --> 01:20:19,539
could be putting into a debugger and

1686
01:20:15,130 --> 01:20:22,319
that we're not right so you know that's

1687
01:20:19,539 --> 01:20:22,319
the situation

1688
01:20:25,090 --> 01:20:33,460
what enter do I use I use for coder by

1689
01:20:29,020 --> 01:20:35,110
Allen Webster called e vu I've been

1690
01:20:33,460 --> 01:20:37,149
wanting to get into helping write video

1691
01:20:35,109 --> 01:20:40,269
codecs I thought about katrinak to a v1

1692
01:20:37,149 --> 01:20:43,359
but libo a.m. is a big bloated mess and

1693
01:20:40,270 --> 01:20:45,910
requires a lot of knowledge of vp9 is

1694
01:20:43,359 --> 01:20:57,488
there one you would recommend or would

1695
01:20:45,909 --> 01:21:00,550
want people working on so I'm not really

1696
01:20:57,488 --> 01:21:08,709
a video codec person I'm kind of the

1697
01:21:00,550 --> 01:21:09,670
wrong one to ask about that so I

1698
01:21:08,710 --> 01:21:11,590
apologize

1699
01:21:09,670 --> 01:21:15,970
I only ever really worked on and I

1700
01:21:11,590 --> 01:21:22,449
wasn't a video codec person I did

1701
01:21:15,970 --> 01:21:24,039
develop the half pal filter for it was

1702
01:21:22,449 --> 01:21:25,840
the one thing I did that was like video

1703
01:21:24,039 --> 01:21:28,000
codec related and it's a very good 1/2

1704
01:21:25,840 --> 01:21:31,619
pel filter I stand by my work on that

1705
01:21:28,000 --> 01:21:36,158
one but I didn't really do much else I

1706
01:21:31,619 --> 01:21:39,038
did the D blocking filter which is was

1707
01:21:36,158 --> 01:21:40,509
kay but it was really not a that great

1708
01:21:39,038 --> 01:21:43,658
it was more about what we could do

1709
01:21:40,510 --> 01:21:45,579
without taking any cpu time and that's

1710
01:21:43,658 --> 01:21:48,158
less relevant today than it was when

1711
01:21:45,578 --> 01:21:51,728
Bing - his first made think - was made

1712
01:21:48,158 --> 01:21:53,618
to scale to like 4k in software on you

1713
01:21:51,729 --> 01:21:58,840
know older machines and so what you

1714
01:21:53,618 --> 01:22:02,259
could do was limited and this was on an

1715
01:21:58,840 --> 01:22:04,840
Xbox 360 it also had to do 1920 by 1080

1716
01:22:02,260 --> 01:22:06,189
on that platform very cleanly as well

1717
01:22:04,840 --> 01:22:10,078
which is another hard thing cuz that

1718
01:22:06,189 --> 01:22:13,809
that CPU was not particularly powerful

1719
01:22:10,078 --> 01:22:16,208
anyway so but ignoring all of that I'm

1720
01:22:13,809 --> 01:22:16,989
just not really a video codec guy that's

1721
01:22:16,208 --> 01:22:19,238
not my thing

1722
01:22:16,988 --> 01:22:20,968
and so I don't have a lot of strong

1723
01:22:19,238 --> 01:22:31,328
recommendations about that what I would

1724
01:22:20,969 --> 01:22:33,698
say right is that I don't I don't think

1725
01:22:31,328 --> 01:22:36,549
the world needs a lot of work on the

1726
01:22:33,698 --> 01:22:38,859
existing video codecs I think what the

1727
01:22:36,550 --> 01:22:41,019
world needs is someone to sit down and

1728
01:22:38,859 --> 01:22:45,808
go how do I make a video codec that's

1729
01:22:41,019 --> 01:22:45,809
reasonable right like it's pretty good

1730
01:22:46,019 --> 01:22:56,619
but it's like you know 2,000 lines of

1731
01:22:51,189 --> 01:22:59,199
code or something right like the problem

1732
01:22:56,618 --> 01:23:01,630
of these video codecs like mp4 and stuff

1733
01:22:59,198 --> 01:23:06,098
like or you know that's more of a

1734
01:23:01,630 --> 01:23:12,368
container format but you know like AAC

1735
01:23:06,099 --> 01:23:16,650
and h.264 is they're like insane there

1736
01:23:12,368 --> 01:23:19,328
are these huge ridiculous like massive

1737
01:23:16,649 --> 01:23:21,759
investments in source code just to even

1738
01:23:19,328 --> 01:23:24,069
look at all of the crazy cases I was

1739
01:23:21,760 --> 01:23:27,010
like it would be nice if someone was

1740
01:23:24,069 --> 01:23:30,938
just like look this isn't the smallest

1741
01:23:27,010 --> 01:23:33,159
codec it's not the fastest codec but

1742
01:23:30,939 --> 01:23:35,110
it's a codec you could use like it

1743
01:23:33,158 --> 01:23:36,969
produces reasonably small video that

1744
01:23:35,109 --> 01:23:39,299
people could use and it's like in each

1745
01:23:36,969 --> 01:23:42,219
file right or something you know like

1746
01:23:39,300 --> 01:23:44,349
that seems like the more the thing the

1747
01:23:42,219 --> 01:23:47,880
world could actually use because oh my

1748
01:23:44,349 --> 01:23:47,880
god like this stuff is insane

1749
01:23:50,439 --> 01:23:56,029
you know and because I think the world

1750
01:23:53,390 --> 01:23:58,730
already has gigantic complex codecs

1751
01:23:56,029 --> 01:24:01,069
that's like mp4 and vp9 and all that

1752
01:23:58,729 --> 01:24:03,469
stuff right and the world already has

1753
01:24:01,069 --> 01:24:05,479
alike I want to pay a middleware vendor

1754
01:24:03,470 --> 01:24:07,490
for a really fast codec that's optimized

1755
01:24:05,479 --> 01:24:09,079
for every platform and has good support

1756
01:24:07,489 --> 01:24:12,409
on everything from Android to

1757
01:24:09,079 --> 01:24:15,800
PlayStation 4 to Tendo switch that's

1758
01:24:12,409 --> 01:24:21,199
right and so it seems like the only

1759
01:24:15,800 --> 01:24:23,180
thing I don't know that is like give me

1760
01:24:21,199 --> 01:24:24,939
an H file that has a compressor video

1761
01:24:23,180 --> 01:24:28,789
compressor that sort of works

1762
01:24:24,939 --> 01:24:31,399
it's like decent I don't know I don't

1763
01:24:28,789 --> 01:24:34,369
think there is one be nice or someone

1764
01:24:31,399 --> 01:24:35,989
would make one you know I just want to

1765
01:24:34,369 --> 01:24:38,630
include some video in this thing I don't

1766
01:24:35,989 --> 01:24:42,050
want to think about it too hard I don't

1767
01:24:38,630 --> 01:24:47,140
want to like build 18,000 files I don't

1768
01:24:42,050 --> 01:24:47,140
want to like deal with all that you know

1769
01:24:51,159 --> 01:24:56,300
poo shoes do you envision using a single

1770
01:24:53,750 --> 01:24:58,699
debugger or one for single single

1771
01:24:56,300 --> 01:25:00,650
stepping through the program and another

1772
01:24:58,699 --> 01:25:02,840
like mustache with more complex views I

1773
01:25:00,649 --> 01:25:04,219
kind of want it all together and the

1774
01:25:02,840 --> 01:25:06,890
reason that I want it all together is

1775
01:25:04,220 --> 01:25:09,260
that mustache requires you to augment

1776
01:25:06,890 --> 01:25:13,490
your code with calls to dump the data

1777
01:25:09,260 --> 01:25:17,210
right but there's no reason you couldn't

1778
01:25:13,489 --> 01:25:21,260
just ignore that and actually in your

1779
01:25:17,210 --> 01:25:22,579
debugger take the stash F calls like the

1780
01:25:21,260 --> 01:25:24,800
things that say here's what I want to

1781
01:25:22,579 --> 01:25:26,779
dump that could just be entirely in the

1782
01:25:24,800 --> 01:25:28,909
debugger I could just go into a line of

1783
01:25:26,779 --> 01:25:32,420
the debugger and say at this line dump

1784
01:25:28,909 --> 01:25:34,609
this data to my log then you never have

1785
01:25:32,420 --> 01:25:36,619
to touch the program and the program

1786
01:25:34,609 --> 01:25:39,559
doesn't even need to include an H file

1787
01:25:36,619 --> 01:25:41,630
or anything right it's just a program

1788
01:25:39,560 --> 01:25:43,730
could be a program you didn't even write

1789
01:25:41,630 --> 01:25:46,699
it could be a program you have source to

1790
01:25:43,729 --> 01:25:49,189
and you could say when you get to this

1791
01:25:46,699 --> 01:25:51,409
point in the program jump this region of

1792
01:25:49,189 --> 01:25:53,509
memory based off of these registers or

1793
01:25:51,409 --> 01:25:55,489
something right and then you could have

1794
01:25:53,510 --> 01:25:58,220
all the power of mustache without even

1795
01:25:55,489 --> 01:26:02,779
having to touch the source code right

1796
01:25:58,220 --> 01:26:06,230
and furthermore if that debugger store

1797
01:26:02,779 --> 01:26:10,189
run information you could even go back

1798
01:26:06,229 --> 01:26:11,989
in time and logged data from a run of a

1799
01:26:10,189 --> 01:26:14,299
program that didn't even have logging at

1800
01:26:11,989 --> 01:26:16,159
the time it was run right so I feel like

1801
01:26:14,300 --> 01:26:17,869
putting this into her actual debugger

1802
01:26:16,159 --> 01:26:19,309
could be way more powerful than mustache

1803
01:26:17,869 --> 01:26:21,559
even if it only supported the same

1804
01:26:19,310 --> 01:26:23,330
features as mustache having those

1805
01:26:21,560 --> 01:26:31,490
features accessible from the debugger

1806
01:26:23,329 --> 01:26:36,590
makes it more powerful right have you

1807
01:26:31,489 --> 01:26:38,090
tried the debugger like let me go ahead

1808
01:26:36,590 --> 01:26:39,199
and point this one out I've heard of

1809
01:26:38,090 --> 01:26:53,480
this one but I don't think I've ever

1810
01:26:39,199 --> 01:26:57,619
used it I have never used it I mean I

1811
01:26:53,479 --> 01:26:59,419
would be happy to try it it's just that

1812
01:26:57,619 --> 01:27:01,670
this kind of thing is usually not that

1813
01:26:59,420 --> 01:27:04,850
necessary for debugging programs that

1814
01:27:01,670 --> 01:27:09,190
you wrote this is more of a like reverse

1815
01:27:04,850 --> 01:27:09,190
engineering debugger it looks like right

1816
01:27:15,130 --> 01:27:19,510
so I don't know like it's probably

1817
01:27:17,140 --> 01:27:21,760
pretty cool and I think it would be a

1818
01:27:19,510 --> 01:27:23,409
good good program to use potentially I'd

1819
01:27:21,760 --> 01:27:25,600
have to try it and see what I thought of

1820
01:27:23,409 --> 01:27:27,970
it but I'm suspecting that it's not

1821
01:27:25,600 --> 01:27:29,470
really designed to do the sorts of

1822
01:27:27,970 --> 01:27:32,949
things that I would do with a debugger

1823
01:27:29,470 --> 01:27:34,150
right it looks like the kind of thing

1824
01:27:32,949 --> 01:27:35,619
for reverse engineering like you're

1825
01:27:34,149 --> 01:27:39,250
saying and reverse engineering isn't

1826
01:27:35,619 --> 01:27:40,569
really where like I don't need to

1827
01:27:39,250 --> 01:27:45,369
reverse engineer my own programs because

1828
01:27:40,569 --> 01:27:57,909
I wrote them right in what year was it

1829
01:27:45,369 --> 01:28:00,489
made moustache 2011 maybe marry SAV is

1830
01:27:57,909 --> 01:28:05,680
it using regular GDI or GDI + it's using

1831
01:28:00,489 --> 01:28:09,460
a regular GDI basically I wrote a

1832
01:28:05,680 --> 01:28:11,800
complete like image system for it

1833
01:28:09,460 --> 01:28:12,920
which I can show you it's not rocket

1834
01:28:11,800 --> 01:28:14,070
science

1835
01:28:12,920 --> 01:28:20,440
[Music]

1836
01:28:14,069 --> 01:28:22,449
so basically here's the Cindi operations

1837
01:28:20,439 --> 01:28:27,339
that I'm like I made like a thing for

1838
01:28:22,449 --> 01:28:38,319
operating on for wide floats in Cindy

1839
01:28:27,340 --> 01:28:40,920
and then what I did was yeah hold on a

1840
01:28:38,319 --> 01:28:40,920
second

1841
01:28:47,448 --> 01:29:05,309
you'll have to bear with me while I

1842
01:28:50,010 --> 01:29:11,310
remember where this stuff was so when we

1843
01:29:05,310 --> 01:29:13,770
did paint we called in to traverse

1844
01:29:11,310 --> 01:29:17,039
display window

1845
01:29:13,770 --> 01:29:19,800
I think Traverse display window might

1846
01:29:17,039 --> 01:29:24,119
have been refreshed display window you

1847
01:29:19,800 --> 01:29:28,230
know let me go ahead and load let me go

1848
01:29:24,119 --> 01:29:36,809
ahead and make a quick project file here

1849
01:29:28,229 --> 01:29:40,709
so I'm gonna put like I don't I don't

1850
01:29:36,810 --> 01:29:42,780
even remember hold on a second I haven't

1851
01:29:40,710 --> 01:29:46,829
updated for coder on this machine so let

1852
01:29:42,779 --> 01:29:50,789
me go ahead and and do that real quick

1853
01:29:46,829 --> 01:29:56,369
here so if I load up my for a coder

1854
01:29:50,789 --> 01:29:58,529
custom layer master does it like master

1855
01:29:56,369 --> 01:30:01,889
dot text or something mastered up here J

1856
01:29:58,529 --> 01:30:03,300
alright so if I make it mastered up prj

1857
01:30:01,889 --> 01:30:09,960
which we've never done on this machine

1858
01:30:03,300 --> 01:30:14,630
yet delete this here I'm not sure how

1859
01:30:09,960 --> 01:30:14,630
that works just racist right yeah okay

1860
01:30:16,369 --> 01:30:25,319
so the projects that we currently have

1861
01:30:19,649 --> 01:30:32,988
on this machine are like you know

1862
01:30:25,319 --> 01:30:32,988
handmade hero and that's in W handmade

1863
01:30:33,859 --> 01:30:40,789
handmade up proj there was handmade ray

1864
01:30:42,149 --> 01:31:01,250
and that was in a handmade raid approach

1865
01:30:46,889 --> 01:31:01,250
and then there was no there's meow hash

1866
01:31:04,010 --> 01:31:19,980
which was in yeah hash type proj so it

1867
01:31:18,539 --> 01:31:24,118
looks like that's everything and then

1868
01:31:19,979 --> 01:31:27,149
I'm just gonna add mustache and I'll put

1869
01:31:24,118 --> 01:31:29,339
that in here and that was in apps

1870
01:31:27,149 --> 01:31:38,179
mustache and we'll just call this

1871
01:31:29,340 --> 01:31:44,670
mustache dot proj I guess that seems I

1872
01:31:38,179 --> 01:31:47,699
guess good maybe yeah

1873
01:31:44,670 --> 01:31:49,230
so then inside mustache I'll just make a

1874
01:31:47,698 --> 01:31:51,689
project file for it and that way I can

1875
01:31:49,229 --> 01:31:53,579
load everything up and do searches and

1876
01:31:51,689 --> 01:31:57,059
stuff like that so if I do a mustache

1877
01:31:53,579 --> 01:31:59,309
dot prod file here I don't really

1878
01:31:57,060 --> 01:32:05,369
remember how this works but it's

1879
01:31:59,310 --> 01:32:08,099
something like this and there we go so

1880
01:32:05,368 --> 01:32:09,658
now I should be able to do like searches

1881
01:32:08,099 --> 01:32:12,119
and stuff so we can look at that source

1882
01:32:09,658 --> 01:32:15,479
code so let me go ahead and switch

1883
01:32:12,118 --> 01:32:22,889
project here shouldn't that of did I

1884
01:32:15,479 --> 01:32:24,388
mess it up again you have to forgive me

1885
01:32:22,889 --> 01:32:27,960
I'm in the middle of doing a bunch of

1886
01:32:24,389 --> 01:32:29,909
changes to for coders so I just I I'm

1887
01:32:27,960 --> 01:32:31,439
not really ready to do stuff like this

1888
01:32:29,908 --> 01:32:33,420
at the moment but I did make it

1889
01:32:31,439 --> 01:32:36,899
I made a double you mastered up here J

1890
01:32:33,420 --> 01:32:42,118
right did I did I organized it wrong or

1891
01:32:36,899 --> 01:32:46,908
something the string constant string

1892
01:32:42,118 --> 01:32:46,908
constant there's a name and a file

1893
01:32:48,460 --> 01:33:01,670
I mean I feel like that should have just

1894
01:32:52,869 --> 01:33:03,869
worked right it looks right to me but uh

1895
01:33:01,670 --> 01:33:14,170
[Music]

1896
01:33:03,869 --> 01:33:17,529
but I guess not it's gonna read w

1897
01:33:14,170 --> 01:33:18,219
mastered up ROG but that's good that's

1898
01:33:17,529 --> 01:33:21,369
what I want

1899
01:33:18,219 --> 01:33:29,770
took a nice it's gonna look at look for

1900
01:33:21,369 --> 01:33:37,420
an open brace string constant Oh yep no

1901
01:33:29,770 --> 01:33:39,219
comma all right so maybe now I've done

1902
01:33:37,420 --> 01:33:40,989
the right thing yeah there we go all

1903
01:33:39,219 --> 01:33:43,239
right so if I load mustache now I should

1904
01:33:40,988 --> 01:33:45,399
be able to jump around everything so I

1905
01:33:43,238 --> 01:33:48,789
don't know let's see here here's that

1906
01:33:45,399 --> 01:33:50,679
refresh thing okay so does it Traverse

1907
01:33:48,789 --> 01:33:52,079
just right display window then that we

1908
01:33:50,679 --> 01:33:56,940
were doing yeah

1909
01:33:52,079 --> 01:33:59,019
all right so in Traverse display window

1910
01:33:56,939 --> 01:34:02,979
we should be able to look at some of

1911
01:33:59,020 --> 01:34:06,280
that drawing code now and like I just

1912
01:34:02,979 --> 01:34:10,928
I'm going to look out I'm going to see

1913
01:34:06,279 --> 01:34:12,399
if I can find something that looks like

1914
01:34:10,929 --> 01:34:13,840
it's doing some drawing and then I'll

1915
01:34:12,399 --> 01:34:15,460
show you what that code looks like this

1916
01:34:13,840 --> 01:34:18,779
so you get you were you were wondering

1917
01:34:15,460 --> 01:34:26,050
about how it was running that fast on

1918
01:34:18,779 --> 01:34:29,019
just straight to the eye so let's see

1919
01:34:26,050 --> 01:34:38,079
here on something that's going to render

1920
01:34:29,020 --> 01:34:45,630
like an image source so here's the image

1921
01:34:38,079 --> 01:34:45,630
node right and let's see it's got

1922
01:34:52,560 --> 01:35:00,610
inspect work create work render work so

1923
01:34:57,699 --> 01:35:04,630
blitz scaled so that's something that's

1924
01:35:00,609 --> 01:35:09,250
dealing with an image right so here's

1925
01:35:04,630 --> 01:35:15,220
blitz scaled and here's what that

1926
01:35:09,250 --> 01:35:18,340
routine looks like right so yeah all

1927
01:35:15,220 --> 01:35:22,289
right so basically what you can see here

1928
01:35:18,340 --> 01:35:24,940
is I do the basic setup work right I

1929
01:35:22,289 --> 01:35:28,060
look here to see if I need to do aspect

1930
01:35:24,939 --> 01:35:31,029
ratio scaling oops sorry about the

1931
01:35:28,060 --> 01:35:35,200
swearing there we'll just scroll that

1932
01:35:31,029 --> 01:35:37,479
off unlike on hand me here where I'm

1933
01:35:35,199 --> 01:35:42,159
trying to be clean but I'm working

1934
01:35:37,479 --> 01:35:45,099
professionally I swear all the time so

1935
01:35:42,159 --> 01:35:48,130
anyway in the code here you can see me

1936
01:35:45,100 --> 01:35:49,660
setting up the image transfer and then

1937
01:35:48,130 --> 01:35:51,850
I've just got two functions that I wrote

1938
01:35:49,659 --> 01:35:55,079
one is blit one-to-one which does an

1939
01:35:51,850 --> 01:35:57,820
exact copy you can see it doing it here

1940
01:35:55,079 --> 01:36:01,420
and then there's lit sampled and there's

1941
01:35:57,819 --> 01:36:03,069
more swearing and you can see that

1942
01:36:01,420 --> 01:36:05,680
working here and what you can see is

1943
01:36:03,069 --> 01:36:12,460
they're all just cindy code right there

1944
01:36:05,680 --> 01:36:15,789
just like hey let's just process for for

1945
01:36:12,460 --> 01:36:18,579
color values at a time right RGBA we

1946
01:36:15,789 --> 01:36:26,680
load those in and we we write them out

1947
01:36:18,579 --> 01:36:29,170
right and I think I mean yeah if you

1948
01:36:26,680 --> 01:36:30,970
just write this stuff sanely using Dib

1949
01:36:29,170 --> 01:36:34,420
sections through regular GDI just

1950
01:36:30,970 --> 01:36:36,070
Cyndi's very fast right I don't I don't

1951
01:36:34,420 --> 01:36:43,529
even know if this is multi-threaded I

1952
01:36:36,069 --> 01:36:43,529
mean it might have been but I don't know

1953
01:36:46,539 --> 01:36:51,180
I guess I can find out

1954
01:37:02,038 --> 01:37:06,809
No so it wasn't even multi-threaded that

1955
01:37:05,010 --> 01:37:11,659
was single-threaded performance it's

1956
01:37:06,809 --> 01:37:15,239
just if you write cindy routines and you

1957
01:37:11,658 --> 01:37:21,988
do them reasonably smart you can just do

1958
01:37:15,238 --> 01:37:25,948
it how long did probably take you to

1959
01:37:21,988 --> 01:37:29,928
write I don't know exactly it was at

1960
01:37:25,948 --> 01:37:29,928
least six months of full-time work I

1961
01:37:35,448 --> 01:37:41,388
don't understand why using GL DX is not

1962
01:37:38,099 --> 01:37:45,420
an option for an internal tool like that

1963
01:37:41,389 --> 01:37:49,618
well the reason was stability so Jeff

1964
01:37:45,420 --> 01:37:51,599
just didn't like what open gel would

1965
01:37:49,618 --> 01:37:56,609
sometimes do in terms of multi-monitor

1966
01:37:51,599 --> 01:37:57,960
support or destabilizing a system

1967
01:37:56,609 --> 01:38:01,859
because the graphics drivers were bad

1968
01:37:57,960 --> 01:38:04,439
and so on since this entire thing ran on

1969
01:38:01,859 --> 01:38:05,819
the CPU you could guarantee that was not

1970
01:38:04,439 --> 01:38:09,178
screwing with the graphics card at all

1971
01:38:05,819 --> 01:38:11,009
and all that had to do was if GDI could

1972
01:38:09,179 --> 01:38:13,109
just manage to get the buffer to like

1973
01:38:11,010 --> 01:38:15,329
get handed off to the graphs card that's

1974
01:38:13,109 --> 01:38:16,819
all I had to do that was why the

1975
01:38:15,328 --> 01:38:20,399
decision was made wasn't my decision

1976
01:38:16,819 --> 01:38:21,779
that's just that's just why it was done

1977
01:38:20,399 --> 01:38:26,009
that way and no it was not ever supposed

1978
01:38:21,779 --> 01:38:27,719
to be released why do you not name this

1979
01:38:26,010 --> 01:38:33,769
meows - I don't know it's a good

1980
01:38:27,719 --> 01:38:35,880
question will you upload this to youtube

1981
01:38:33,769 --> 01:38:38,940
yeah probably

1982
01:38:35,880 --> 01:38:40,170
and also I turned on archiving on the

1983
01:38:38,939 --> 01:38:46,678
twitch stream now so you should be able

1984
01:38:40,170 --> 01:38:48,599
to get back to those are you still

1985
01:38:46,679 --> 01:38:50,460
getting feedback - the wind debug dev

1986
01:38:48,599 --> 01:38:52,230
team on Twitter for where it's still

1987
01:38:50,460 --> 01:38:56,519
lacking its current state did you still

1988
01:38:52,229 --> 01:39:01,379
like it better than the vs debugger so

1989
01:38:56,519 --> 01:39:05,010
two things one I was a little nervous

1990
01:39:01,380 --> 01:39:08,460
about the feedback situation because a

1991
01:39:05,010 --> 01:39:10,139
lot of the responses from the windbg guy

1992
01:39:08,460 --> 01:39:11,519
it kind of sounded like they weren't

1993
01:39:10,139 --> 01:39:15,838
really that interested in making it work

1994
01:39:11,519 --> 01:39:17,729
well like I'm like

1995
01:39:15,838 --> 01:39:19,260
you know there needs to be a hotkey for

1996
01:39:17,729 --> 01:39:21,689
setting a breakpoint and they were like

1997
01:39:19,260 --> 01:39:23,789
yeah we used most of the hotkeys that we

1998
01:39:21,689 --> 01:39:25,349
have available or something like they

1999
01:39:23,788 --> 01:39:27,838
were weird answers that kind of sounded

2000
01:39:25,349 --> 01:39:29,069
more like they had a particular way they

2001
01:39:27,838 --> 01:39:31,229
want it to work and they weren't super

2002
01:39:29,069 --> 01:39:35,729
interested in it necessarily feedback on

2003
01:39:31,229 --> 01:39:38,909
like hey there really needs to be hockey

2004
01:39:35,729 --> 01:39:40,319
for this like it's important maybe make

2005
01:39:38,908 --> 01:39:41,969
rebind double hotkeys or something if

2006
01:39:40,319 --> 01:39:45,689
you have a different opinion about what

2007
01:39:41,969 --> 01:39:47,279
needs to be hotkey but like you know so

2008
01:39:45,689 --> 01:39:48,929
it seemed like maybe they weren't that

2009
01:39:47,279 --> 01:39:51,268
interested in feedback they were only

2010
01:39:48,929 --> 01:39:53,760
kind of like interested in minor

2011
01:39:51,269 --> 01:39:55,739
feedback like there's a bug crashes here

2012
01:39:53,760 --> 01:39:59,458
or something like that so I'm not super

2013
01:39:55,738 --> 01:40:00,958
optimistic what I will say is I do like

2014
01:39:59,458 --> 01:40:03,898
it better than visual Studios debugger

2015
01:40:00,958 --> 01:40:06,688
from the following standpoint it doesn't

2016
01:40:03,899 --> 01:40:08,789
install sequel server on my machine for

2017
01:40:06,689 --> 01:40:11,459
example right I just copy the directory

2018
01:40:08,788 --> 01:40:12,478
and it works if you actually want to use

2019
01:40:11,458 --> 01:40:14,878
visual Studios debugger

2020
01:40:12,479 --> 01:40:16,050
it installs massive amounts of

2021
01:40:14,878 --> 01:40:19,529
unnecessary things in your machine

2022
01:40:16,050 --> 01:40:22,050
requires licensing to run that can just

2023
01:40:19,529 --> 01:40:23,668
stop working at any time without your

2024
01:40:22,050 --> 01:40:26,399
knowledge and without you necessarily

2025
01:40:23,668 --> 01:40:30,118
knowing why even when you're a paying

2026
01:40:26,399 --> 01:40:33,359
customer this happens it's just not good

2027
01:40:30,118 --> 01:40:35,279
right and so I don't like the experience

2028
01:40:33,359 --> 01:40:37,739
as much as using Visual Studio and I'm

2029
01:40:35,279 --> 01:40:40,408
not really super sure based on what I

2030
01:40:37,738 --> 01:40:42,388
kind of heard from the window bug people

2031
01:40:40,408 --> 01:40:48,299
that they're really all that interested

2032
01:40:42,389 --> 01:40:52,349
in making it good in that sense but

2033
01:40:48,300 --> 01:40:57,149
because it is usable and isn't an epic

2034
01:40:52,349 --> 01:41:00,328
disaster that makes it better than

2035
01:40:57,149 --> 01:41:02,969
Visual Studio in terms of just what I'll

2036
01:41:00,328 --> 01:41:04,529
learn to live with right and the hope is

2037
01:41:02,969 --> 01:41:05,969
that you know someday rad ships won and

2038
01:41:04,529 --> 01:41:08,550
then I'll just buy that and I'll use

2039
01:41:05,969 --> 01:41:11,010
that right because there's so much

2040
01:41:08,550 --> 01:41:13,998
better debugging out there to be had and

2041
01:41:11,010 --> 01:41:18,439
we just need that to come along but

2042
01:41:13,998 --> 01:41:18,438
really that's the main thing is just

2043
01:41:18,800 --> 01:41:27,510
windbg preview is usable like I can

2044
01:41:22,828 --> 01:41:29,189
debug with it and so I think I just

2045
01:41:27,510 --> 01:41:32,250
would rather do that than half

2046
01:41:29,189 --> 01:41:37,939
to deal with Visual Studio because it's

2047
01:41:32,250 --> 01:41:37,939
Visual Studio is so broken at this point

2048
01:41:38,988 --> 01:41:43,889
did you add those new features too for

2049
01:41:41,219 --> 01:41:46,230
coder yes during the stream Ryan Reese

2050
01:41:43,890 --> 01:41:47,670
said I'm still on the fence about that

2051
01:41:46,229 --> 01:41:49,979
unusual interpretation of the

2052
01:41:47,670 --> 01:41:51,480
compilation model the everything is in

2053
01:41:49,979 --> 01:41:58,799
this header file I'm interested if there

2054
01:41:51,479 --> 01:42:00,359
are any downsides to it um well I guess

2055
01:41:58,800 --> 01:42:02,250
what I would say is I don't necessarily

2056
01:42:00,359 --> 01:42:06,299
know that everything needs to be in a

2057
01:42:02,250 --> 01:42:08,760
header file for everything right it's

2058
01:42:06,300 --> 01:42:10,289
just something like this if you're

2059
01:42:08,760 --> 01:42:14,699
talking about something that's just

2060
01:42:10,289 --> 01:42:16,319
designed to be a debug port then yeah of

2061
01:42:14,698 --> 01:42:17,939
course it should all be in the H file it

2062
01:42:16,319 --> 01:42:19,559
should be a tiny H file it should do

2063
01:42:17,939 --> 01:42:21,599
everything right if because it's the

2064
01:42:19,560 --> 01:42:27,239
easiest possible thing to include into

2065
01:42:21,600 --> 01:42:28,560
your program right um that doesn't

2066
01:42:27,238 --> 01:42:32,159
assume it's right for everything it just

2067
01:42:28,560 --> 01:42:33,810
means for this sort of thing I can't

2068
01:42:32,159 --> 01:42:35,939
think of any downsides to it and if

2069
01:42:33,810 --> 01:42:37,350
there are they're drastically outweighed

2070
01:42:35,939 --> 01:42:39,119
by the simplicity of just being able to

2071
01:42:37,350 --> 01:42:42,210
copy one file into your project and then

2072
01:42:39,119 --> 01:42:43,559
be done you know you don't have to worry

2073
01:42:42,210 --> 01:42:45,630
about linking and you don't have to

2074
01:42:43,560 --> 01:42:47,580
worry about dll's or copying things

2075
01:42:45,630 --> 01:42:50,430
around with executable you have to worry

2076
01:42:47,579 --> 01:42:52,590
if somebody changes it it's not going

2077
01:42:50,430 --> 01:42:54,150
out to a web site to do something or any

2078
01:42:52,590 --> 01:42:56,250
of this other garbage or package

2079
01:42:54,149 --> 01:43:00,149
managers or github or any of this other

2080
01:42:56,250 --> 01:43:02,488
stuff it's just I had an h-file worked I

2081
01:43:00,149 --> 01:43:05,479
copied into my program I was done right

2082
01:43:02,488 --> 01:43:05,479
and that's very good

2083
01:43:09,868 --> 01:43:18,389
I think c64 debugger had a pixel to code

2084
01:43:15,868 --> 01:43:21,210
features like mustache um I don't know

2085
01:43:18,389 --> 01:43:25,500
what c64 oops I don't know what c64

2086
01:43:21,210 --> 01:43:28,529
debugger is Oh No I've lost my I've lost

2087
01:43:25,500 --> 01:43:29,969
my earpiece I got it like put a new

2088
01:43:28,529 --> 01:43:31,769
earpiece on in fact why don't I just do

2089
01:43:29,969 --> 01:43:33,658
that now do I have that your pieces no I

2090
01:43:31,770 --> 01:43:37,500
don't I need to do that because this

2091
01:43:33,658 --> 01:43:42,329
earpiece got so loose that it just comes

2092
01:43:37,500 --> 01:43:48,210
out all the time I need to get the new

2093
01:43:42,329 --> 01:43:50,099
one for it what I was gonna say is c64

2094
01:43:48,210 --> 01:43:54,050
debugger I don't I'm not familiar with

2095
01:43:50,099 --> 01:43:57,239
but what I can tell you is there are

2096
01:43:54,050 --> 01:44:00,630
graphics specific debuggers which do

2097
01:43:57,238 --> 01:44:02,549
some of the moustache stuff they're not

2098
01:44:00,630 --> 01:44:05,730
quite the same because they don't really

2099
01:44:02,550 --> 01:44:08,550
allow you to printf arbitrary data out

2100
01:44:05,729 --> 01:44:15,658
to it I don't think maybe they do but

2101
01:44:08,550 --> 01:44:18,449
for example pix p IX the graphics

2102
01:44:15,658 --> 01:44:21,029
debugger from Microsoft that was like

2103
01:44:18,448 --> 01:44:22,829
for DirectX debugging it would at least

2104
01:44:21,029 --> 01:44:24,868
allow you to see like everything that

2105
01:44:22,829 --> 01:44:29,698
touched a particular pixel in the

2106
01:44:24,868 --> 01:44:35,238
graphics output right so that's

2107
01:44:29,698 --> 01:44:35,238
something and that was similar

2108
01:44:40,039 --> 01:44:45,470
did you use GDI functions for stuff like

2109
01:44:42,630 --> 01:44:50,310
spline drawing or did you do it yourself

2110
01:44:45,470 --> 01:44:53,489
I feel like I would have called GDI if

2111
01:44:50,310 --> 01:44:55,610
it had it because why would I have

2112
01:44:53,488 --> 01:44:58,319
written it myself so like for fonts I

2113
01:44:55,609 --> 01:44:59,939
think I just called GDI

2114
01:44:58,319 --> 01:45:04,109
to draw the fonts cuz it could do that

2115
01:44:59,939 --> 01:45:09,799
right fast it can't deal with images

2116
01:45:04,109 --> 01:45:09,799
fast very well at the time anyway

2117
01:45:16,420 --> 01:45:21,159
let me see if I got any what else we got

2118
01:45:19,010 --> 01:45:21,159
here

2119
01:45:26,238 --> 01:45:31,938
why do sometimes use the end and not

2120
01:45:28,578 --> 01:45:40,308
pointers yeah I used to use references

2121
01:45:31,939 --> 01:45:42,559
more and here's the thing I don't think

2122
01:45:40,309 --> 01:45:45,769
C should have dot and arrow I think that

2123
01:45:42,559 --> 01:45:48,439
was dumb and so I used to use references

2124
01:45:45,769 --> 01:45:50,059
so I could just use dot everywhere but

2125
01:45:48,439 --> 01:45:51,409
then eventually I would just like forget

2126
01:45:50,059 --> 01:45:54,139
it like I might as well make my code

2127
01:45:51,408 --> 01:45:56,299
like basically C compilable for C 99 and

2128
01:45:54,139 --> 01:45:59,420
just use pointers like why not

2129
01:45:56,300 --> 01:46:03,170
it's just I'm fine with it right so I

2130
01:45:59,420 --> 01:46:05,118
used to still use ampersand for that

2131
01:46:03,170 --> 01:46:07,729
reason and I wish that they just would

2132
01:46:05,118 --> 01:46:16,038
make it so that dot worked for pointers

2133
01:46:07,729 --> 01:46:17,570
but you know they don't want some well

2134
01:46:16,038 --> 01:46:20,149
like the vertical text on the left in

2135
01:46:17,569 --> 01:46:21,618
your fur coat or build is really cool is

2136
01:46:20,149 --> 01:46:22,938
it available in for coder or is it your

2137
01:46:21,618 --> 01:46:28,698
own customization that is my own

2138
01:46:22,939 --> 01:46:30,860
customization the for coders stuff that

2139
01:46:28,698 --> 01:46:32,928
I've done is pretty advanced at this

2140
01:46:30,859 --> 01:46:35,149
point so one thing that you'll notice it

2141
01:46:32,929 --> 01:46:37,699
now knows is it knows when things are

2142
01:46:35,149 --> 01:46:42,228
functions or types that are user-defined

2143
01:46:37,698 --> 01:46:45,049
for example I implemented that yeah the

2144
01:46:42,229 --> 01:46:47,329
stuff that says like what if block

2145
01:46:45,050 --> 01:46:48,800
you're in if it's off-screen and what

2146
01:46:47,328 --> 01:46:51,768
function you're and stuff like that

2147
01:46:48,800 --> 01:46:54,860
stuff here I'm printed all that also

2148
01:46:51,769 --> 01:46:56,659
this jump thing I implemented too that

2149
01:46:54,859 --> 01:46:59,359
like finds everything in your program

2150
01:46:56,658 --> 01:47:02,509
and let's go jump to it the project's

2151
01:46:59,359 --> 01:47:03,859
which are all that stuff so I

2152
01:47:02,510 --> 01:47:06,860
implemented a ton of things over the

2153
01:47:03,859 --> 01:47:08,779
past two weeks that's when I was on back

2154
01:47:06,859 --> 01:47:13,670
from break but haven't been back on

2155
01:47:08,779 --> 01:47:16,158
stream none of it is possible to share

2156
01:47:13,670 --> 01:47:23,779
with you at the moment because I had to

2157
01:47:16,158 --> 01:47:26,299
modify the for coder core to do it but I

2158
01:47:23,779 --> 01:47:31,158
have resubmitted the changes back to

2159
01:47:26,300 --> 01:47:35,389
Allen so at least in theory at some

2160
01:47:31,158 --> 01:47:39,589
point you will be able to have these

2161
01:47:35,389 --> 01:47:40,310
features that time is not now but when

2162
01:47:39,590 --> 01:47:42,140
Allen

2163
01:47:40,310 --> 01:47:44,660
has a chance to integrate my changes

2164
01:47:42,140 --> 01:47:50,030
into his codebase and she ships a new

2165
01:47:44,659 --> 01:47:51,500
for coder then you could have the

2166
01:47:50,029 --> 01:47:54,259
changes I also did some other stuff like

2167
01:47:51,500 --> 01:47:57,199
search now works so you know when you do

2168
01:47:54,260 --> 01:48:03,680
like sizeof it'll highlight all the ones

2169
01:47:57,199 --> 01:48:06,380
in in the view you know stuff like that

2170
01:48:03,680 --> 01:48:10,970
that wasn't working for I also added a

2171
01:48:06,380 --> 01:48:17,510
feature that's super crazy

2172
01:48:10,970 --> 01:48:26,539
I haven't finished some of it yet but

2173
01:48:17,510 --> 01:48:30,320
I'll show you it's really strange so

2174
01:48:26,539 --> 01:48:32,449
let's suppose you're in here and you

2175
01:48:30,319 --> 01:48:36,529
want to do some math basically this was

2176
01:48:32,449 --> 01:48:40,519
because I was really tired of this

2177
01:48:36,529 --> 01:48:43,519
garbage like having to go to some other

2178
01:48:40,520 --> 01:48:47,350
tool to do math I was like I don't

2179
01:48:43,520 --> 01:48:47,350
really want to have to do that anymore

2180
01:48:48,760 --> 01:48:55,090
so what I did was I just made it so like

2181
01:48:52,250 --> 01:48:58,789
okay you know if you're in a comment and

2182
01:48:55,090 --> 01:49:00,980
you want to do I just want to know some

2183
01:48:58,789 --> 01:49:03,680
stuff I can just do it so if I want to

2184
01:49:00,979 --> 01:49:06,739
know what 9 how many pixels there are in

2185
01:49:03,680 --> 01:49:09,409
1920 by 1080 right I can just do it and

2186
01:49:06,739 --> 01:49:13,609
it just tells me it just it just does

2187
01:49:09,409 --> 01:49:15,739
the math for you right and so if I want

2188
01:49:13,609 --> 01:49:18,679
to know like how many bytes that is I

2189
01:49:15,739 --> 01:49:21,029
can do it that way or something and well

2190
01:49:18,680 --> 01:49:23,079
okay maybe maybe not why does that not

2191
01:49:21,029 --> 01:49:29,840
[Music]

2192
01:49:23,079 --> 01:49:31,489
clearly I have broken something alright

2193
01:49:29,840 --> 01:49:33,319
so again like I said not quite done yet

2194
01:49:31,489 --> 01:49:36,079
so that's weird

2195
01:49:33,319 --> 01:49:38,389
this stuff was working i'm the other

2196
01:49:36,079 --> 01:49:41,979
machine I wonder would something must

2197
01:49:38,390 --> 01:49:41,980
have broke with comment lexing

2198
01:49:45,359 --> 01:49:49,359
what's going on here sorry this is not

2199
01:49:48,310 --> 01:49:59,500
really what I supposed to be doing on

2200
01:49:49,359 --> 01:50:00,939
the stream interesting so something

2201
01:49:59,500 --> 01:50:02,229
broke with comment lexing but I'm not

2202
01:50:00,939 --> 01:50:07,509
sure what it is so I guess I've got a

2203
01:50:02,229 --> 01:50:09,279
new new bug I got to go look look at but

2204
01:50:07,510 --> 01:50:11,380
anyway it has all the basic stuff in it

2205
01:50:09,279 --> 01:50:14,679
so you can also assign variables so like

2206
01:50:11,380 --> 01:50:44,230
if you want you can do that and so then

2207
01:50:14,680 --> 01:50:47,590
like in here you can do that right you

2208
01:50:44,229 --> 01:50:52,239
know I'm saying and so the idea there is

2209
01:50:47,590 --> 01:50:55,900
just that from then on I can just make

2210
01:50:52,239 --> 01:50:58,029
it so that I don't ever have to switch

2211
01:50:55,899 --> 01:50:59,559
away anymore when we're doing that stuff

2212
01:50:58,029 --> 01:51:01,960
on stream I can just put it into the

2213
01:50:59,560 --> 01:51:04,450
comment and the nice part about that is

2214
01:51:01,960 --> 01:51:07,060
it can remain in the comment so it's

2215
01:51:04,449 --> 01:51:09,179
just there like real like oh this is

2216
01:51:07,060 --> 01:51:11,920
when we did that thing and here's the

2217
01:51:09,180 --> 01:51:13,360
answer and then I don't have to like

2218
01:51:11,920 --> 01:51:21,690
deal with it anymore

2219
01:51:13,359 --> 01:51:24,670
right why this lexer thing is not

2220
01:51:21,689 --> 01:51:26,829
working properly I'm not sure so I got a

2221
01:51:24,670 --> 01:51:28,210
look at why that is and furthermore it's

2222
01:51:26,829 --> 01:51:32,289
a little bit weird cuz it looks it

2223
01:51:28,210 --> 01:51:37,170
looked like it was not even sensitive to

2224
01:51:32,289 --> 01:51:37,170
what else you might do so I'm not sure

2225
01:51:37,409 --> 01:51:41,460
I'm not sure how that's possible

2226
01:51:47,829 --> 01:51:57,529
yeah it's very interesting so

2227
01:51:55,569 --> 01:52:03,619
something's weird about that but I'd

2228
01:51:57,529 --> 01:52:08,079
really just don't know what it is it's

2229
01:52:03,619 --> 01:52:08,079
like it only wants to Lex that one

2230
01:52:22,448 --> 01:52:25,969
what's going on there that's gonna be

2231
01:52:24,770 --> 01:52:28,300
interesting bug to find I can tell you

2232
01:52:25,969 --> 01:52:28,300
that right now

2233
01:52:28,869 --> 01:52:34,099
is it just five times five is it just

2234
01:52:31,760 --> 01:52:35,510
that there's a bug you know what it's

2235
01:52:34,100 --> 01:52:39,949
probably is there's just a probably a

2236
01:52:35,510 --> 01:52:42,890
bug in the multiplication term parser

2237
01:52:39,948 --> 01:52:45,408
where it's not asking for an ADD term

2238
01:52:42,890 --> 01:52:49,070
next to it so it's probably just the

2239
01:52:45,408 --> 01:52:50,929
parser that's all it is yeah

2240
01:52:49,069 --> 01:52:53,170
as far as the parsers breasted we'll fix

2241
01:52:50,929 --> 01:52:53,170
that later

2242
01:53:08,560 --> 01:53:14,950
so yeah ignore this for now it's not not

2243
01:53:12,550 --> 01:53:25,930
really ready for primetime but it will

2244
01:53:14,949 --> 01:53:29,139
be at some point and yeah don't ask me

2245
01:53:25,930 --> 01:53:34,960
why it's busted I don't know probably

2246
01:53:29,140 --> 01:53:36,369
the parsers messed up let's see

2247
01:53:34,960 --> 01:53:37,659
we should probably change it to shunting

2248
01:53:36,369 --> 01:53:39,399
yard anyway I think right now it's

2249
01:53:37,659 --> 01:53:40,960
actually was building the actual parse

2250
01:53:39,399 --> 01:53:44,219
tree or something stupid like that I

2251
01:53:40,960 --> 01:53:47,109
don't know it's a long story

2252
01:53:44,220 --> 01:53:49,690
how would you port a game from Windows

2253
01:53:47,109 --> 01:53:52,899
to Mac Oz when the code bases and see

2254
01:53:49,689 --> 01:53:55,449
any resources to share Thanks yeah I

2255
01:53:52,899 --> 01:53:57,969
know so it's weird right it just doesn't

2256
01:53:55,449 --> 01:54:01,960
look like it it it doesn't know what to

2257
01:53:57,970 --> 01:54:07,180
do with concatenated multiplication it's

2258
01:54:01,960 --> 01:54:10,420
very strange so like that's correct but

2259
01:54:07,180 --> 01:54:11,380
that not only it just can't figure it

2260
01:54:10,420 --> 01:54:13,569
out it's like I don't know what's going

2261
01:54:11,380 --> 01:54:15,430
on so I think the parser is broken is

2262
01:54:13,569 --> 01:54:16,359
what's happening there so I'll have to

2263
01:54:15,430 --> 01:54:19,500
look at what's going on there I don't

2264
01:54:16,359 --> 01:54:19,500
know what is happening

2265
01:54:24,788 --> 01:54:34,429
yeah I mean again I don't even know if

2266
01:54:26,838 --> 01:54:35,809
parentheses work or not yeah it looks

2267
01:54:34,429 --> 01:54:37,958
like that it looks like they work with

2268
01:54:35,809 --> 01:54:41,208
parentheses so it looks like it's just

2269
01:54:37,958 --> 01:54:43,158
the parser for the term for the

2270
01:54:41,208 --> 01:54:47,510
multiplicative term it's just not doing

2271
01:54:43,158 --> 01:54:49,518
the right thing after it oh the colors I

2272
01:54:47,510 --> 01:54:51,439
haven't tuned yet that the colors are

2273
01:54:49,519 --> 01:54:53,329
garbage I'm gonna

2274
01:54:51,439 --> 01:54:56,679
they're just debug colors to make sure

2275
01:54:53,328 --> 01:54:56,679
that I was seeing the right thing that

2276
01:54:58,958 --> 01:55:02,168
all right

2277
01:55:11,420 --> 01:55:15,750
no it's not a problem with the asterisk

2278
01:55:14,310 --> 01:55:17,250
being part of a comment it's just it's

2279
01:55:15,750 --> 01:55:18,630
just gonna the parser as far as service

2280
01:55:17,250 --> 01:55:24,630
crap it was got kind of threw it in

2281
01:55:18,630 --> 01:55:26,100
there the math expression parsing

2282
01:55:24,630 --> 01:55:27,480
extremely cool can implement it with the

2283
01:55:26,100 --> 01:55:29,789
current customization layer or is it

2284
01:55:27,479 --> 01:55:33,209
only possible with the open with the

2285
01:55:29,789 --> 01:55:34,769
source available it's only possible with

2286
01:55:33,210 --> 01:55:37,050
the source available not because of the

2287
01:55:34,770 --> 01:55:38,610
parsing you could do a math expression

2288
01:55:37,050 --> 01:55:40,110
parsing because I implanted that myself

2289
01:55:38,609 --> 01:55:42,529
and you could do that you could do them

2290
01:55:40,109 --> 01:55:42,529
at yourself

2291
01:55:42,779 --> 01:55:46,619
but the problem is twofold you don't

2292
01:55:45,359 --> 01:55:48,559
have a way to actually know when you

2293
01:55:46,619 --> 01:55:50,880
need to reparse the buffer I added that

2294
01:55:48,560 --> 01:55:53,670
and the other thing is you don't have a

2295
01:55:50,880 --> 01:55:55,560
way to draw text that isn't part of the

2296
01:55:53,670 --> 01:55:58,199
buffer and I added that so the those

2297
01:55:55,560 --> 01:56:00,330
things there right because remember

2298
01:55:58,199 --> 01:56:03,689
those aren't there so if you now go back

2299
01:56:00,329 --> 01:56:17,039
and look at the file right so that file

2300
01:56:03,689 --> 01:56:23,339
was something like uh s to be painting

2301
01:56:17,039 --> 01:56:26,729
test dot CPP right it doesn't it just

2302
01:56:23,340 --> 01:56:28,619
saves that and it doesn't insert the

2303
01:56:26,729 --> 01:56:31,699
answers right they're just floating

2304
01:56:28,619 --> 01:56:31,699
phantom answers

2305
01:56:37,748 --> 01:56:42,349
ya know the colors aren't permanent

2306
01:56:39,948 --> 01:56:44,149
don't worry the colors are just there

2307
01:56:42,349 --> 01:56:45,889
because I was trying to debug I want I

2308
01:56:44,149 --> 01:56:47,598
didn't have a chance to actually go tune

2309
01:56:45,889 --> 01:56:49,489
the colors and I was just trying to make

2310
01:56:47,599 --> 01:56:55,779
sure that like all my parsing stuff

2311
01:56:49,488 --> 01:56:55,779
actually worked right

2312
01:57:33,760 --> 01:57:42,670
anybody else well good

2313
01:57:37,119 --> 01:57:44,289
oh right somebody that's crucial right

2314
01:57:42,670 --> 01:57:50,819
how would you port a game from Windows

2315
01:57:44,289 --> 01:57:55,800
to Mac offs when the co basis in C so

2316
01:57:50,819 --> 01:57:59,639
you know a lot of that just depends on

2317
01:57:55,800 --> 01:58:05,920
how the code was written originally so

2318
01:57:59,640 --> 01:58:08,619
the way I try to make code work across

2319
01:58:05,920 --> 01:58:10,029
platforms if I try to isolate all of the

2320
01:58:08,619 --> 01:58:13,479
parts that are actually specific to the

2321
01:58:10,029 --> 01:58:14,949
platform and you you know hey make sure

2322
01:58:13,479 --> 01:58:16,809
we've done that very specifically you

2323
01:58:14,949 --> 01:58:22,389
can go look at it and you can see how

2324
01:58:16,810 --> 01:58:23,950
it's very it's very walled off you're

2325
01:58:22,390 --> 01:58:28,450
not allowed to have any win32 code

2326
01:58:23,949 --> 01:58:31,059
outside of the win32 file you know and

2327
01:58:28,449 --> 01:58:33,880
that's the way that I do things so the

2328
01:58:31,060 --> 01:58:36,460
first thing I would do if I had to port

2329
01:58:33,880 --> 01:58:39,760
an existing game from Windows to Mac Oz

2330
01:58:36,460 --> 01:58:43,210
is I would go through the code on

2331
01:58:39,760 --> 01:58:47,260
Windows and try to pull out all of the

2332
01:58:43,210 --> 01:58:50,880
window specific stuff into its own

2333
01:58:47,260 --> 01:58:54,579
separate area like its own separate file

2334
01:58:50,880 --> 01:58:59,640
that I could then replace with MacOS

2335
01:58:54,579 --> 01:58:59,640
versions that's how I would go about it

2336
01:59:00,539 --> 01:59:07,510
you know there's there's not a lot else

2337
01:59:02,859 --> 01:59:10,539
you can do but that's a good way very

2338
01:59:07,510 --> 01:59:12,489
similar to that one good way to port

2339
01:59:10,539 --> 01:59:16,840
something is to say alright isolate all

2340
01:59:12,489 --> 01:59:21,369
the windows code then on Windows still

2341
01:59:16,840 --> 01:59:24,300
not on Mac us go get SDL to write they

2342
01:59:21,369 --> 01:59:28,149
ask the simple directmedia layer to

2343
01:59:24,300 --> 01:59:29,529
write an STL layer that replaces the

2344
01:59:28,149 --> 01:59:31,149
Windows layer so that you can still

2345
01:59:29,529 --> 01:59:34,359
compile it on the windows layer you

2346
01:59:31,149 --> 01:59:37,000
isolated and on SDL - and run it on

2347
01:59:34,359 --> 01:59:39,789
Windows under STL - and now you know it

2348
01:59:37,000 --> 01:59:42,699
runs under SDL - which also runs on Mac

2349
01:59:39,789 --> 01:59:44,890
now you can move it over to Mac compile

2350
01:59:42,699 --> 01:59:46,789
it with SDL - on Mac and get that

2351
01:59:44,890 --> 01:59:48,020
working and off

2352
01:59:46,789 --> 01:59:50,689
right so you can kind of go through

2353
01:59:48,020 --> 01:59:54,220
these stages of like isolating the parts

2354
01:59:50,689 --> 02:00:06,949
that were actually specific to Windows

2355
01:59:54,220 --> 02:00:07,400
right wouldn't you cover the Raspberry

2356
02:00:06,949 --> 02:00:08,659
Pi

2357
02:00:07,399 --> 02:00:13,069
well we won't really do anything with

2358
02:00:08,659 --> 02:00:15,829
other platforms until the game is done

2359
02:00:13,069 --> 02:00:18,079
right like when the game is released we

2360
02:00:15,829 --> 02:00:20,510
will then go and look at other platforms

2361
02:00:18,079 --> 02:00:22,850
like Raspberry Pi which I don't know

2362
02:00:20,510 --> 02:00:26,750
what it might not be the Raspberry Pi if

2363
02:00:22,850 --> 02:00:28,760
that's not the most appropriate platform

2364
02:00:26,750 --> 02:00:31,100
at the time I'm assuming it still will

2365
02:00:28,760 --> 02:00:35,630
be but like we'll find whatever the most

2366
02:00:31,100 --> 02:00:38,510
appropriate like you know single board

2367
02:00:35,630 --> 02:00:40,340
little computer is and we'll look at

2368
02:00:38,510 --> 02:00:41,930
that which will probably still be a

2369
02:00:40,340 --> 02:00:45,440
Raspberry Pi of some kind the Raspberry

2370
02:00:41,930 --> 02:00:46,520
Pi 5 or something you know but if

2371
02:00:45,439 --> 02:00:48,619
there's some other thing that's more

2372
02:00:46,520 --> 02:00:54,740
popular at that time we we do that other

2373
02:00:48,619 --> 02:00:59,809
one instead do you know how the calendar

2374
02:00:54,739 --> 02:01:01,789
and date are implemented in games I'm

2375
02:00:59,810 --> 02:01:04,010
not sure what you mean do you mean like

2376
02:01:01,789 --> 02:01:06,380
we're talking about like games like

2377
02:01:04,010 --> 02:01:08,480
Animal Crossing that try to do like

2378
02:01:06,380 --> 02:01:18,380
different like special things on

2379
02:01:08,479 --> 02:01:20,179
Halloween or something Nathan dearth

2380
02:01:18,380 --> 02:01:22,430
I've heard a lot of people complaining

2381
02:01:20,180 --> 02:01:24,409
about C++ which has me worried and

2382
02:01:22,430 --> 02:01:25,970
looking into other languages is there

2383
02:01:24,409 --> 02:01:29,420
any problem continuing to use minimal

2384
02:01:25,970 --> 02:01:32,230
C++ like you do currently can new C++

2385
02:01:29,420 --> 02:01:32,230
features hurt you

2386
02:01:37,559 --> 02:01:46,980
I think it's probably relatively safe to

2387
02:01:41,698 --> 02:01:49,138
continue using minimal C++ like I do I'm

2388
02:01:46,979 --> 02:01:53,279
certainly not too panicked about that

2389
02:01:49,139 --> 02:01:56,819
specifically I guess what I would say is

2390
02:01:53,279 --> 02:02:00,210
there are two costs associated with C++

2391
02:01:56,819 --> 02:02:03,448
that I mean certainly worried me and are

2392
02:02:00,210 --> 02:02:10,760
you are right to be worried and they are

2393
02:02:03,448 --> 02:02:13,649
as follows number one because C++ is

2394
02:02:10,760 --> 02:02:20,190
designed primarily by people who don't

2395
02:02:13,649 --> 02:02:24,509
actually you know do real game

2396
02:02:20,189 --> 02:02:26,698
programming for a living they don't tend

2397
02:02:24,510 --> 02:02:29,639
to add the features that are necessary

2398
02:02:26,698 --> 02:02:32,519
for real game programming and so at the

2399
02:02:29,639 --> 02:02:34,920
moment C++ is lacking many features that

2400
02:02:32,520 --> 02:02:36,119
you would obviously have if you were

2401
02:02:34,920 --> 02:02:40,529
trying to make a language that was good

2402
02:02:36,118 --> 02:02:42,210
for this if you contrast C++ which just

2403
02:02:40,529 --> 02:02:44,578
had 30 years to make these additions to

2404
02:02:42,210 --> 02:02:48,389
for example jei which John has been

2405
02:02:44,578 --> 02:02:50,759
working on for only a couple years you

2406
02:02:48,389 --> 02:02:54,118
can already see literally hundreds of

2407
02:02:50,760 --> 02:02:57,119
features that he has added that C++ it's

2408
02:02:54,118 --> 02:02:59,009
not added and again the difference there

2409
02:02:57,118 --> 02:03:02,158
is you've got a working game programmer

2410
02:02:59,010 --> 02:03:03,449
one who's very good making features for

2411
02:03:02,158 --> 02:03:07,319
what they do

2412
02:03:03,448 --> 02:03:11,279
and so the biggest cost of using C++ is

2413
02:03:07,319 --> 02:03:12,960
a language design paradigm and process

2414
02:03:11,279 --> 02:03:15,300
that basically doesn't take your needs

2415
02:03:12,960 --> 02:03:21,029
into account right so that's the biggest

2416
02:03:15,300 --> 02:03:23,219
problem right so as a result every year

2417
02:03:21,029 --> 02:03:25,380
your programming gets worse compared to

2418
02:03:23,219 --> 02:03:27,510
what it would be if you could have a

2419
02:03:25,380 --> 02:03:29,849
language that would add features that

2420
02:03:27,510 --> 02:03:33,630
were necessary to allow you enable you

2421
02:03:29,849 --> 02:03:36,929
to write better code faster so that's a

2422
02:03:33,630 --> 02:03:39,029
huge issue and it's been happening for a

2423
02:03:36,929 --> 02:03:42,090
long time so it means that if you

2424
02:03:39,029 --> 02:03:47,158
compare what your code quality should be

2425
02:03:42,090 --> 02:03:51,199
today under a C++ that was guided by you

2426
02:03:47,158 --> 02:03:51,198
know design principles along

2427
02:03:51,460 --> 02:03:56,779
Road versus what they did choose to do

2428
02:03:54,409 --> 02:03:58,849
you know the the difference is kind of

2429
02:03:56,779 --> 02:04:00,259
somewhat staggering if we were actually

2430
02:03:58,850 --> 02:04:03,230
to think about what we would have today

2431
02:04:00,260 --> 02:04:04,810
if if you know if it had been shepherded

2432
02:04:03,229 --> 02:04:07,159
in that direction

2433
02:04:04,810 --> 02:04:08,570
so that's very concerning because it

2434
02:04:07,159 --> 02:04:10,699
does mean that there's a lot on the

2435
02:04:08,569 --> 02:04:13,189
table and it also means that your

2436
02:04:10,699 --> 02:04:16,099
ability to write effective code compared

2437
02:04:13,189 --> 02:04:18,139
to say working in other languages that

2438
02:04:16,100 --> 02:04:24,440
remember Shep maybe we're shepherded

2439
02:04:18,140 --> 02:04:27,289
better like c-sharp or something it do

2440
02:04:24,439 --> 02:04:28,699
you take a hit and so as a result you

2441
02:04:27,289 --> 02:04:30,739
know there's reasons why you might not

2442
02:04:28,699 --> 02:04:32,750
want to use c-sharp I mean I don't use

2443
02:04:30,739 --> 02:04:35,329
it right because I don't want the extra

2444
02:04:32,750 --> 02:04:37,760
layers of indirection that are inherent

2445
02:04:35,329 --> 02:04:40,029
there and I don't want to have to worry

2446
02:04:37,760 --> 02:04:43,400
about certain aspects of it and so on

2447
02:04:40,029 --> 02:04:45,590
the problem is every year the C++

2448
02:04:43,399 --> 02:04:49,039
committee continues to make bad language

2449
02:04:45,590 --> 02:04:51,529
design decisions you get further and

2450
02:04:49,039 --> 02:04:54,109
further behind languages that might be

2451
02:04:51,529 --> 02:04:57,380
making better decisions who have

2452
02:04:54,109 --> 02:04:58,789
problems because they were rooted in a

2453
02:04:57,380 --> 02:05:01,369
systems programming language to begin

2454
02:04:58,789 --> 02:05:04,369
with but there's they're getting better

2455
02:05:01,369 --> 02:05:07,309
and we're getting worse right because of

2456
02:05:04,369 --> 02:05:12,019
the design decisions and that's a really

2457
02:05:07,310 --> 02:05:17,660
bad situation right so that's thing one

2458
02:05:12,020 --> 02:05:19,700
and thing two is that even though you

2459
02:05:17,659 --> 02:05:23,000
don't have to use the poorly designed

2460
02:05:19,699 --> 02:05:25,069
features that are coming into C++ they

2461
02:05:23,000 --> 02:05:28,130
do hurt you in one very important way

2462
02:05:25,069 --> 02:05:30,409
which is they are complexity that gets

2463
02:05:28,130 --> 02:05:33,920
put into the compiler and that

2464
02:05:30,409 --> 02:05:37,819
complexity yields more bugs for you

2465
02:05:33,920 --> 02:05:40,010
right because the amount of effort

2466
02:05:37,819 --> 02:05:42,380
that's put into the compiler is finite

2467
02:05:40,010 --> 02:05:45,409
there's a certain amount of work getting

2468
02:05:42,380 --> 02:05:48,500
done on clang and a certain amount of

2469
02:05:45,409 --> 02:05:52,939
work being done on Visual Studio because

2470
02:05:48,500 --> 02:05:55,399
those implementers must implement the

2471
02:05:52,939 --> 02:05:57,859
poorly designed C++ language features as

2472
02:05:55,399 --> 02:06:00,139
they come out that is time they're not

2473
02:05:57,859 --> 02:06:03,159
spending debugging the optimizer

2474
02:06:00,140 --> 02:06:06,340
improving the optimizer debugging the

2475
02:06:03,159 --> 02:06:12,329
debug info debugging the code Jen

2476
02:06:06,340 --> 02:06:16,150
all of that is not going into giving you

2477
02:06:12,329 --> 02:06:20,019
an improved product because you're not

2478
02:06:16,149 --> 02:06:22,599
using the C++ features right so there

2479
02:06:20,020 --> 02:06:25,360
are definitely two very real ways that

2480
02:06:22,600 --> 02:06:29,620
the poor design direction of C++ affects

2481
02:06:25,359 --> 02:06:34,929
everyday programmers who you know know

2482
02:06:29,619 --> 02:06:37,689
better than to use it but in the sense

2483
02:06:34,930 --> 02:06:40,560
that you can still write C code and it

2484
02:06:37,689 --> 02:06:44,949
compiles properly you're not hurt that

2485
02:06:40,560 --> 02:06:47,590
much in that sense my hope is we won't

2486
02:06:44,949 --> 02:06:49,689
keep having to have this discussion my

2487
02:06:47,590 --> 02:06:52,900
hope is that we can reasonably move on

2488
02:06:49,689 --> 02:06:54,699
to ji or something or there will be more

2489
02:06:52,899 --> 02:06:57,789
languages coming about with the system

2490
02:06:54,699 --> 02:06:59,710
programming angle to them and C++ can

2491
02:06:57,789 --> 02:07:02,439
just go off and die in a corner right

2492
02:06:59,710 --> 02:07:05,529
like I I don't think it's productive to

2493
02:07:02,439 --> 02:07:07,659
constantly relitigate the C++ thing it's

2494
02:07:05,529 --> 02:07:09,399
not a good language let's just accept

2495
02:07:07,659 --> 02:07:13,029
that it's not going to be a good

2496
02:07:09,399 --> 02:07:14,829
language so let's just focus on what

2497
02:07:13,029 --> 02:07:17,769
will be like let's try to get to

2498
02:07:14,829 --> 02:07:19,809
something that is right and then people

2499
02:07:17,770 --> 02:07:21,160
who think C++ is good for some reason

2500
02:07:19,810 --> 02:07:23,350
you can still use it right it's still

2501
02:07:21,159 --> 02:07:25,449
there but those of us who don't think so

2502
02:07:23,350 --> 02:07:27,039
can can have something to move to that's

2503
02:07:25,449 --> 02:07:30,429
what we really need right what we really

2504
02:07:27,039 --> 02:07:31,810
need is an alternative because sitting

2505
02:07:30,430 --> 02:07:33,190
around complaining about C++ isn't

2506
02:07:31,810 --> 02:07:34,450
really gonna help we've been doing it

2507
02:07:33,189 --> 02:07:39,399
for 30 years that's never gotten any

2508
02:07:34,449 --> 02:07:40,569
better so like what we need is in what

2509
02:07:39,399 --> 02:07:42,969
we need is a way to move to an

2510
02:07:40,569 --> 02:07:51,219
alternative that we can contribute to

2511
02:07:42,970 --> 02:07:52,630
and make good would you see that Hameed

2512
02:07:51,220 --> 02:07:59,079
here a platform layer for Windows and

2513
02:07:52,630 --> 02:08:00,850
OpenGL is at a shipping State now I mean

2514
02:07:59,079 --> 02:08:05,409
I guess what I'll say is games have

2515
02:08:00,850 --> 02:08:06,970
shipped on worse probably but is it the

2516
02:08:05,409 --> 02:08:14,229
ideal thing that you would ship with

2517
02:08:06,970 --> 02:08:16,360
definitely not so you know it's probably

2518
02:08:14,229 --> 02:08:18,309
possible to ship a game on the handmade

2519
02:08:16,359 --> 02:08:20,069
hero platform layer but I wouldn't

2520
02:08:18,310 --> 02:08:22,270
recommend it because we haven't done

2521
02:08:20,069 --> 02:08:25,949
some of the finishing work that you

2522
02:08:22,270 --> 02:08:28,270
would want to do for a final product

2523
02:08:25,949 --> 02:08:30,220
even just basic things like keyboard

2524
02:08:28,270 --> 02:08:32,980
layout support and stuff like that we

2525
02:08:30,220 --> 02:08:35,470
haven't really addressed and so I think

2526
02:08:32,979 --> 02:08:38,409
there you know in order to have a

2527
02:08:35,470 --> 02:08:39,970
quality experience there's things we

2528
02:08:38,409 --> 02:08:42,430
would want to add and there's notes to

2529
02:08:39,970 --> 02:08:48,850
that effect in our platform layer at the

2530
02:08:42,430 --> 02:08:50,890
moment in fact do I have an opinion on

2531
02:08:48,850 --> 02:08:53,970
the rest no not really I haven't

2532
02:08:50,890 --> 02:08:53,970
programmed in rust

2533
02:08:59,729 --> 02:09:03,839
I've added some fancy file hungers of

2534
02:09:02,159 --> 02:09:05,429
the platform layer notify whether a file

2535
02:09:03,840 --> 02:09:06,989
has changed etc and for every new

2536
02:09:05,429 --> 02:09:10,440
function I just added it to the platform

2537
02:09:06,988 --> 02:09:13,309
API struct is it that simple yeah it is

2538
02:09:10,439 --> 02:09:13,309
exactly that simple

2539
02:09:21,020 --> 02:09:26,250
how's 19:35 going pretty good I've had

2540
02:09:24,960 --> 02:09:31,219
to divert some attention because meow

2541
02:09:26,250 --> 02:09:33,319
the infinite will be launching soon but

2542
02:09:31,219 --> 02:09:36,230
but pretty good

2543
02:09:33,319 --> 02:09:42,000
you will hear hopefully more about it

2544
02:09:36,229 --> 02:09:44,849
in the not-too-distant future have you

2545
02:09:42,000 --> 02:09:48,600
ever used embedded Lua do I have to pay

2546
02:09:44,850 --> 02:09:51,870
on Luigi no I I don't I have not used

2547
02:09:48,600 --> 02:09:55,050
those things for programmers what do you

2548
02:09:51,869 --> 02:09:56,579
think skill is most what skill do you

2549
02:09:55,050 --> 02:09:58,829
okay I see you're saying for programmers

2550
02:09:56,579 --> 02:10:01,529
what skill do you normally think is most

2551
02:09:58,829 --> 02:10:03,359
commonly lacking and are there any

2552
02:10:01,529 --> 02:10:06,300
practicing methods people should use to

2553
02:10:03,359 --> 02:10:07,289
become better programmers yeah I mean I

2554
02:10:06,300 --> 02:10:08,909
think I've sort of answered this before

2555
02:10:07,289 --> 02:10:11,399
but I'll just it's pretty easy to

2556
02:10:08,909 --> 02:10:13,260
summarize I think the primary problem is

2557
02:10:11,399 --> 02:10:16,529
that people don't actually look at the

2558
02:10:13,260 --> 02:10:18,210
results of their coding practices that's

2559
02:10:16,529 --> 02:10:19,649
really the thing that I that I would

2560
02:10:18,210 --> 02:10:21,960
like most people to do I mean

2561
02:10:19,649 --> 02:10:25,349
dovetailing on to the the previous

2562
02:10:21,960 --> 02:10:28,529
discussion about C++ that's my criticism

2563
02:10:25,350 --> 02:10:31,800
of that language design as well people

2564
02:10:28,529 --> 02:10:33,659
aren't taking the results of their

2565
02:10:31,800 --> 02:10:35,429
programming practices seriously they're

2566
02:10:33,659 --> 02:10:37,920
not looking to see whether the things

2567
02:10:35,429 --> 02:10:40,109
they claim prevent bugs actually are

2568
02:10:37,920 --> 02:10:42,179
preventing bugs they're not looking at

2569
02:10:40,109 --> 02:10:44,639
whether or not they get more code done

2570
02:10:42,179 --> 02:10:47,730
that has less bugs in it in the same

2571
02:10:44,640 --> 02:10:53,010
amount of time there's just a lot of

2572
02:10:47,729 --> 02:10:57,149
things that are sort of stated as fact

2573
02:10:53,010 --> 02:11:00,659
but that have no actual basis in reality

2574
02:10:57,149 --> 02:11:02,159
and that's a problem and I think what

2575
02:11:00,659 --> 02:11:04,880
every programmer can do to help

2576
02:11:02,159 --> 02:11:09,329
themselves get away from that is to just

2577
02:11:04,880 --> 02:11:12,319
actually look at your actual what when

2578
02:11:09,329 --> 02:11:13,698
you adopt programming practices look and

2579
02:11:12,319 --> 02:11:15,679
verify

2580
02:11:13,698 --> 02:11:18,710
that they're actually saving you time

2581
02:11:15,679 --> 02:11:20,420
that they're actually catching bugs you

2582
02:11:18,710 --> 02:11:23,600
know don't just type Const into your

2583
02:11:20,420 --> 02:11:26,029
code see if you're actually having bugs

2584
02:11:23,600 --> 02:11:28,039
related to modifying things that you're

2585
02:11:26,029 --> 02:11:30,289
not supposed to modify if you're not

2586
02:11:28,039 --> 02:11:32,539
then you're wasting time with that right

2587
02:11:30,289 --> 02:11:34,550
and those are basic things that

2588
02:11:32,539 --> 02:11:37,130
everybody should do everybody should

2589
02:11:34,550 --> 02:11:38,949
know at this point if you're experienced

2590
02:11:37,130 --> 02:11:41,840
programmer at all

2591
02:11:38,948 --> 02:11:43,639
where do your bugs come from and which

2592
02:11:41,840 --> 02:11:45,590
programming practices actually help

2593
02:11:43,640 --> 02:11:47,150
catch them and which don't because it's

2594
02:11:45,590 --> 02:11:49,489
different for everybody it's not the

2595
02:11:47,149 --> 02:11:50,899
same when people say that this is a good

2596
02:11:49,488 --> 02:11:53,238
programming practice that's usually

2597
02:11:50,899 --> 02:11:54,799
ridiculous because usually at best it

2598
02:11:53,238 --> 02:11:57,649
can only be a good programming practice

2599
02:11:54,800 --> 02:12:02,869
for a particular programmer or for a

2600
02:11:57,649 --> 02:12:04,849
particular team right but I would say in

2601
02:12:02,869 --> 02:12:07,760
general like that's really the thing

2602
02:12:04,850 --> 02:12:10,400
that programmers should focus on that

2603
02:12:07,760 --> 02:12:13,100
they focus on the least is actually

2604
02:12:10,399 --> 02:12:15,349
assess 'lord the practices that you're

2605
02:12:13,100 --> 02:12:17,239
doing helping are they doing what you

2606
02:12:15,350 --> 02:12:20,920
thought they were doing when you adopted

2607
02:12:17,238 --> 02:12:26,269
them and it's really important to

2608
02:12:20,920 --> 02:12:27,590
understand it's really important to

2609
02:12:26,270 --> 02:12:32,420
understand that there's just a lot of

2610
02:12:27,590 --> 02:12:35,390
dogma in programming and it's not useful

2611
02:12:32,420 --> 02:12:36,859
right and so when I talk about things

2612
02:12:35,390 --> 02:12:38,900
that I have found to be good programming

2613
02:12:36,859 --> 02:12:41,299
practices what I'm talking about are

2614
02:12:38,899 --> 02:12:43,339
things that I've found are effective and

2615
02:12:41,300 --> 02:12:46,900
I've looked at them and they save me

2616
02:12:43,340 --> 02:12:50,119
time relative to the alternatives right

2617
02:12:46,899 --> 02:12:52,250
even that is not good enough or

2618
02:12:50,119 --> 02:12:54,890
shouldn't be good enough for you you

2619
02:12:52,250 --> 02:12:57,829
should be taking the things that I say

2620
02:12:54,890 --> 02:13:01,460
and say oh okay Casey thinks this is

2621
02:12:57,829 --> 02:13:04,399
good so it might be good but maybe my

2622
02:13:01,460 --> 02:13:07,219
brain doesn't work that way and maybe it

2623
02:13:04,399 --> 02:13:08,929
doesn't help me to do that thing and so

2624
02:13:07,219 --> 02:13:10,579
what Casey's saying to do is really just

2625
02:13:08,929 --> 02:13:12,800
a waste of my time and this other thing

2626
02:13:10,579 --> 02:13:15,439
works better right learning to be able

2627
02:13:12,800 --> 02:13:17,690
to do that analysis is critical because

2628
02:13:15,439 --> 02:13:19,399
it's totally fine to go look on the web

2629
02:13:17,689 --> 02:13:22,009
or listen to this stream or do whatever

2630
02:13:19,399 --> 02:13:24,229
else to learn about the possible

2631
02:13:22,010 --> 02:13:25,400
techniques you could use because people

2632
02:13:24,229 --> 02:13:27,379
other people are gonna have thought of

2633
02:13:25,399 --> 02:13:28,158
things that you won't think of but

2634
02:13:27,380 --> 02:13:29,929
what's not

2635
02:13:28,158 --> 02:13:32,799
is assuming that they're right just

2636
02:13:29,929 --> 02:13:36,319
because someone on the web said it right

2637
02:13:32,800 --> 02:13:38,449
because that doesn't matter like Derrick

2638
02:13:36,319 --> 02:13:40,668
we don't have the kind of science right

2639
02:13:38,448 --> 02:13:42,288
now necessary to prove that a

2640
02:13:40,668 --> 02:13:44,538
programming practice is good or bad and

2641
02:13:42,288 --> 02:13:47,268
furthermore I suspect it differs from

2642
02:13:44,538 --> 02:13:50,418
person to person right kind of like what

2643
02:13:47,269 --> 02:13:53,359
diet you should eat isn't probably

2644
02:13:50,418 --> 02:13:55,578
universal like people from you know a

2645
02:13:53,359 --> 02:13:58,249
particular country a particular genetic

2646
02:13:55,578 --> 02:14:00,768
lineage probably want to eat a different

2647
02:13:58,248 --> 02:14:03,168
diet than other people because humans

2648
02:14:00,769 --> 02:14:05,719
are different right and programming is

2649
02:14:03,168 --> 02:14:07,668
the same way this the same set of

2650
02:14:05,719 --> 02:14:10,069
techniques is not right for everybody

2651
02:14:07,668 --> 02:14:14,448
and you want to learn how to actually

2652
02:14:10,069 --> 02:14:16,158
assess how you are programming and then

2653
02:14:14,448 --> 02:14:18,799
you can test out these techniques to

2654
02:14:16,158 --> 02:14:19,248
find out which ones I use are good for

2655
02:14:18,800 --> 02:14:21,679
you

2656
02:14:19,248 --> 02:14:23,448
which ones someone else uses are good

2657
02:14:21,679 --> 02:14:26,078
for you and that's how you become a

2658
02:14:23,448 --> 02:14:26,078
better programmer

2659
02:14:34,039 --> 02:14:43,010
how do I become a bigger programmer an

2660
02:14:39,090 --> 02:14:45,090
excellent question it's difficult

2661
02:14:43,010 --> 02:14:47,010
question on the discord how are your

2662
02:14:45,090 --> 02:14:48,690
compiled time so fast I've compiled sort

2663
02:14:47,010 --> 02:14:50,550
of programs to sewer linkage to Windows

2664
02:14:48,689 --> 02:14:52,979
and others are saying they're compiling

2665
02:14:50,550 --> 02:14:55,560
handmade hero on a pc + SSD and getting

2666
02:14:52,979 --> 02:15:06,799
quite slower compiles is your computer

2667
02:14:55,560 --> 02:15:09,590
just that much faster I don't know I

2668
02:15:06,800 --> 02:15:12,659
mean it depends on the SSD drive

2669
02:15:09,590 --> 02:15:17,130
potentially or the computer this is a

2670
02:15:12,659 --> 02:15:20,579
pretty fast computer at this one but I

2671
02:15:17,130 --> 02:15:21,960
don't know I mean one of the big

2672
02:15:20,579 --> 02:15:23,609
problems with visual studios you don't

2673
02:15:21,960 --> 02:15:24,720
get much of a build profile out of it I

2674
02:15:23,609 --> 02:15:26,219
don't know if there's switches now that

2675
02:15:24,720 --> 02:15:27,270
you can get more of a build profile but

2676
02:15:26,220 --> 02:15:29,550
it's kind of hard to know where the

2677
02:15:27,270 --> 02:15:31,530
time's going see time tells you the time

2678
02:15:29,550 --> 02:15:33,840
for any individual step of your build

2679
02:15:31,529 --> 02:15:35,550
but it doesn't really help you in

2680
02:15:33,840 --> 02:15:38,340
profile the internals so it's kind of

2681
02:15:35,550 --> 02:15:40,110
hard to know you know if Visual Studio

2682
02:15:38,340 --> 02:15:41,279
compiles at a certain speed on one

2683
02:15:40,109 --> 02:15:42,899
machine and the last certain speed at

2684
02:15:41,279 --> 02:15:45,329
another it's hard to know exactly what

2685
02:15:42,899 --> 02:15:53,729
the slowdown is is it you know related

2686
02:15:45,329 --> 02:15:55,109
to this or that you know ginger brill

2687
02:15:53,729 --> 02:15:56,039
says the issue is that the vast rated

2688
02:15:55,109 --> 02:15:57,179
printers don't know anything about the

2689
02:15:56,039 --> 02:15:58,920
scientific method or learning from

2690
02:15:57,180 --> 02:16:00,000
empirical data to improve their scale if

2691
02:15:58,920 --> 02:16:01,649
people actually treated computer

2692
02:16:00,000 --> 02:16:03,329
sciences an actual science would help a

2693
02:16:01,649 --> 02:16:05,039
huge amount I would broaden that to not

2694
02:16:03,329 --> 02:16:06,539
just good programmers most people don't

2695
02:16:05,039 --> 02:16:08,279
understand the scientific method they

2696
02:16:06,539 --> 02:16:09,899
don't understand that when you call

2697
02:16:08,279 --> 02:16:12,630
something science that's just an

2698
02:16:09,899 --> 02:16:14,488
arbitrary term only things verified by

2699
02:16:12,630 --> 02:16:17,789
the scientific method are actually true

2700
02:16:14,488 --> 02:16:19,829
right or I shouldn't say true repeatable

2701
02:16:17,789 --> 02:16:22,649
and repeatability is what you actually

2702
02:16:19,829 --> 02:16:24,119
care about in the world and so there's a

2703
02:16:22,649 --> 02:16:25,710
tremendous number of things also that

2704
02:16:24,119 --> 02:16:27,899
are branded science that aren't science

2705
02:16:25,710 --> 02:16:30,029
because at least in my mind they don't

2706
02:16:27,899 --> 02:16:31,170
follow scientific method scientific

2707
02:16:30,029 --> 02:16:33,179
methods the only thing that actually

2708
02:16:31,170 --> 02:16:35,549
matters the word science is irrelevant

2709
02:16:33,179 --> 02:16:37,440
scientists are irrelevant it's only if

2710
02:16:35,549 --> 02:16:38,939
you've done the scientific method - its

2711
02:16:37,440 --> 02:16:41,760
completion that you actually know

2712
02:16:38,940 --> 02:16:42,750
anything right and the same is true of

2713
02:16:41,760 --> 02:16:44,909
programming right

2714
02:16:42,750 --> 02:16:46,290
and unfortunately for programming I

2715
02:16:44,909 --> 02:16:47,099
would say we're pretty far from being

2716
02:16:46,290 --> 02:16:48,929
able to really

2717
02:16:47,099 --> 02:16:50,908
by the scientific method for real right

2718
02:16:48,929 --> 02:16:53,129
so you can only really do kind of a

2719
02:16:50,908 --> 02:16:56,760
loose version of it anyway but you

2720
02:16:53,129 --> 02:16:58,679
should try as best you can to actually

2721
02:16:56,760 --> 02:17:01,228
do experiments and see what the results

2722
02:16:58,679 --> 02:17:02,579
are to the extent that you can but I

2723
02:17:01,228 --> 02:17:05,308
would say that one of the big reasons

2724
02:17:02,579 --> 02:17:06,929
that computer science can't really touch

2725
02:17:05,308 --> 02:17:09,118
a lot of areas that we would like it to

2726
02:17:06,929 --> 02:17:12,000
is because the scientific method just

2727
02:17:09,119 --> 02:17:19,829
really can't be applied really in any

2728
02:17:12,000 --> 02:17:21,029
way that we know about yet how do you

2729
02:17:19,829 --> 02:17:24,029
reason with people heavily invested in

2730
02:17:21,029 --> 02:17:30,300
programming dogma I don't I just don't

2731
02:17:24,029 --> 02:17:32,250
work with those people right do you know

2732
02:17:30,299 --> 02:17:33,929
of a way to get rid of order dependence

2733
02:17:32,250 --> 02:17:35,420
and see I thought about actually parsing

2734
02:17:33,929 --> 02:17:38,549
the code but that seems quite annoying

2735
02:17:35,420 --> 02:17:41,670
that's the only way I wish there was a

2736
02:17:38,549 --> 02:17:43,079
way in situ to fix that but as far as I

2737
02:17:41,670 --> 02:17:45,329
know there isn't

2738
02:17:43,079 --> 02:17:47,010
I wish C had had a function keyword I

2739
02:17:45,329 --> 02:17:51,269
think that would have solved just about

2740
02:17:47,010 --> 02:17:52,559
everything but unfortunately you know

2741
02:17:51,269 --> 02:17:54,750
function keyword and maybe a different

2742
02:17:52,558 --> 02:17:56,608
casting syntax and then it wouldn't have

2743
02:17:54,750 --> 02:17:59,158
been really a problem right you wouldn't

2744
02:17:56,609 --> 02:18:01,099
need forward declaration really and

2745
02:17:59,158 --> 02:18:03,840
stuff would have just worked probably

2746
02:18:01,099 --> 02:18:06,540
but you know it didn't and it doesn't so

2747
02:18:03,840 --> 02:18:08,308
that's just the way it is again same

2748
02:18:06,540 --> 02:18:10,559
thing you know C++ could have fixed this

2749
02:18:08,308 --> 02:18:12,289
they chose not to they chose to focus on

2750
02:18:10,558 --> 02:18:14,158
all these other things that don't help

2751
02:18:12,290 --> 02:18:15,449
hopefully again there'll be different

2752
02:18:14,158 --> 02:18:17,429
languages in the future like Jay I

2753
02:18:15,449 --> 02:18:18,119
doesn't have order dependence that's a

2754
02:18:17,429 --> 02:18:20,449
great start

2755
02:18:18,119 --> 02:18:20,449
right

2756
02:18:31,629 --> 02:18:35,829
can I have an opinion on the overuse of

2757
02:18:33,579 --> 02:18:38,319
virtual methods in C++ in the V table or

2758
02:18:35,829 --> 02:18:40,569
head not really I don't have a problem

2759
02:18:38,319 --> 02:18:43,569
with virtual methods and virtual tables

2760
02:18:40,569 --> 02:18:46,058
as a concept because that is one way you

2761
02:18:43,569 --> 02:18:48,099
can do dispatch tables my objection to

2762
02:18:46,058 --> 02:18:50,679
the C++ version as with everything in

2763
02:18:48,099 --> 02:18:51,790
C++ is it wasn't implemented properly it

2764
02:18:50,679 --> 02:18:53,110
should have been implemented as an

2765
02:18:51,790 --> 02:18:54,460
optional feature that you could enable

2766
02:18:53,110 --> 02:18:56,319
you could say I would like you to

2767
02:18:54,459 --> 02:18:57,308
construct a virtual table here is the

2768
02:18:56,319 --> 02:18:59,619
things I'd like to put in the virtual

2769
02:18:57,308 --> 02:19:01,449
table and here is the member that I

2770
02:18:59,620 --> 02:19:03,040
would like to use to point to it right

2771
02:19:01,450 --> 02:19:04,929
that would have given you the ability to

2772
02:19:03,040 --> 02:19:06,399
have multiple virtual tables per struct

2773
02:19:04,929 --> 02:19:07,659
if you wanted to it would give me the

2774
02:19:06,398 --> 02:19:08,859
ability to have copied the virtual

2775
02:19:07,659 --> 02:19:10,780
tables around it would have been the

2776
02:19:08,860 --> 02:19:12,219
ability to store an integer and to use

2777
02:19:10,780 --> 02:19:13,750
that to look up into the virtual tables

2778
02:19:12,218 --> 02:19:15,459
so she could have had archie TI

2779
02:19:13,750 --> 02:19:20,079
implemented in your code rather than and

2780
02:19:15,459 --> 02:19:22,569
see again my complaint with c++ is

2781
02:19:20,079 --> 02:19:24,069
almost never about the things the

2782
02:19:22,569 --> 02:19:25,718
compiler is generating it's that that

2783
02:19:24,069 --> 02:19:28,360
thing was not interfaced properly the

2784
02:19:25,718 --> 02:19:35,228
same is true with virtual methods it was

2785
02:19:28,360 --> 02:19:37,059
just a poor design all right I'm gonna

2786
02:19:35,228 --> 02:19:41,558
wrap it up soon here got but we got lots

2787
02:19:37,058 --> 02:19:42,849
of questions I heard that in the classic

2788
02:19:41,558 --> 02:19:45,819
serious same game they implemented the

2789
02:19:42,849 --> 02:19:48,280
multi gravity for the player to move

2790
02:19:45,819 --> 02:19:49,809
along the walls do you know how the

2791
02:19:48,280 --> 02:19:52,329
multi gravity works

2792
02:19:49,809 --> 02:19:54,898
I'm sorry not familiar with serious Sam

2793
02:19:52,329 --> 02:19:58,930
and I'm not sure what multi gravity

2794
02:19:54,898 --> 02:20:00,519
means in this case what is your opinion

2795
02:19:58,930 --> 02:20:01,840
on formal verification do you think

2796
02:20:00,520 --> 02:20:10,600
there are any applications of it in game

2797
02:20:01,840 --> 02:20:12,059
programming I guess I don't know formal

2798
02:20:10,600 --> 02:20:14,350
verification is certainly interesting

2799
02:20:12,059 --> 02:20:16,449
but the problem with it is that it's

2800
02:20:14,350 --> 02:20:19,840
pretty limited in terms of what it can

2801
02:20:16,450 --> 02:20:21,880
actually verify a lot of times and it

2802
02:20:19,840 --> 02:20:24,430
tends to not be really great with user

2803
02:20:21,879 --> 02:20:28,529
input so the kinds of things that we

2804
02:20:24,430 --> 02:20:30,729
might want to ask regarding formal very

2805
02:20:28,530 --> 02:20:33,939
kind of things we might want to formally

2806
02:20:30,728 --> 02:20:38,769
verify in games tend to be very hard to

2807
02:20:33,939 --> 02:20:43,360
verify so it's tough to say what I can

2808
02:20:38,770 --> 02:20:44,601
say is the broader idea that algorithms

2809
02:20:43,360 --> 02:20:47,060
can be written

2810
02:20:44,601 --> 02:20:49,851
foreclose the possibility of bugs I do

2811
02:20:47,060 --> 02:20:52,250
think as the loot has a loose

2812
02:20:49,851 --> 02:20:54,500
application games I would point you to

2813
02:20:52,250 --> 02:20:57,500
the collision detector I wrote for the

2814
02:20:54,500 --> 02:20:59,351
witness as an example that was an

2815
02:20:57,500 --> 02:21:02,659
algorithm specifically designed to

2816
02:20:59,351 --> 02:21:05,810
possible to have movement bugs out of

2817
02:21:02,659 --> 02:21:09,280
potato certain layer of the game code

2818
02:21:05,810 --> 02:21:09,279
and I think that worked very well

2819
02:21:10,780 --> 02:21:14,540
again it's not totally formal

2820
02:21:12,979 --> 02:21:16,761
verification but it's a kind of

2821
02:21:14,540 --> 02:21:19,221
verification or a kind of formality that

2822
02:21:16,761 --> 02:21:20,659
can be imposed on the code in a looser

2823
02:21:19,220 --> 02:21:23,600
sense that does have a lot of

2824
02:21:20,659 --> 02:21:24,890
applicability in games so I you know as

2825
02:21:23,601 --> 02:21:32,480
a partial answer to your question

2826
02:21:24,890 --> 02:21:34,220
there's you know there's something the

2827
02:21:32,479 --> 02:21:35,329
DMD compiler can tell you which lines of

2828
02:21:34,220 --> 02:21:36,709
source code take the longest to compile

2829
02:21:35,329 --> 02:21:37,220
so unsurprisingly I suppose to templates

2830
02:21:36,709 --> 02:21:41,180
yeah

2831
02:21:37,220 --> 02:21:44,239
unsurprisingly all right looks like we

2832
02:21:41,181 --> 02:21:48,471
are done I'm gonna go ahead and wrap it

2833
02:21:44,239 --> 02:21:50,989
up thank you everyone for joining me for

2834
02:21:48,470 --> 02:21:55,550
this special presentation of moustache

2835
02:21:50,989 --> 02:21:58,459
on handmade hero I will be posting

2836
02:21:55,550 --> 02:22:00,470
stream schedules soon I'm not sure

2837
02:21:58,459 --> 02:22:02,750
exactly what we'll be doing stream wise

2838
02:22:00,470 --> 02:22:07,369
I may try to stream some of the for

2839
02:22:02,750 --> 02:22:09,440
coder development that I've been doing

2840
02:22:07,370 --> 02:22:11,301
because I'm finishing that up in the

2841
02:22:09,440 --> 02:22:13,130
next couple days I may try to stream

2842
02:22:11,300 --> 02:22:15,709
some of that in which case I'll be back

2843
02:22:13,129 --> 02:22:17,629
pretty soon if I don't decide to treat

2844
02:22:15,709 --> 02:22:20,930
me that I may not be back till next

2845
02:22:17,629 --> 02:22:22,970
weekend we'll see but I'll be posting a

2846
02:22:20,931 --> 02:22:24,610
few scheduled fairly soon as soon as I

2847
02:22:22,970 --> 02:22:27,140
forgot exactly when the streams will be

2848
02:22:24,610 --> 02:22:28,579
so stay tuned for that and again they

2849
02:22:27,140 --> 02:22:30,440
always they'll show up on this handmade

2850
02:22:28,579 --> 02:22:32,090
hero watch page here when the stream is

2851
02:22:30,440 --> 02:22:32,659
not live it puts a little schedule there

2852
02:22:32,090 --> 02:22:35,540
for us

2853
02:22:32,659 --> 02:22:38,479
so you can know when we're gonna be live

2854
02:22:35,540 --> 02:22:40,940
there's also of course the handmade hero

2855
02:22:38,479 --> 02:22:43,239
Twitter feed but yeah that's just kind

2856
02:22:40,940 --> 02:22:45,380
of a disaster so just use the watch page

2857
02:22:43,239 --> 02:22:47,300
that's about it for today thanks for

2858
02:22:45,379 --> 02:22:51,260
joining me I hope that anyone out there

2859
02:22:47,300 --> 02:22:52,789
working on debuggers can maybe think

2860
02:22:51,261 --> 02:22:53,989
about adding some of those moustache

2861
02:22:52,790 --> 02:22:55,560
features to their debugger because

2862
02:22:53,989 --> 02:22:57,690
there's a lot of good stuff in there but

2863
02:22:55,559 --> 02:22:58,889
it's kind of not really useful for the

2864
02:22:57,690 --> 02:23:00,120
majority of the world at the moment

2865
02:22:58,889 --> 02:23:01,949
because it's just in this little

2866
02:23:00,120 --> 02:23:03,530
internal rad tool and it wasn't really

2867
02:23:01,950 --> 02:23:05,909
polished to the point where it could be

2868
02:23:03,530 --> 02:23:09,380
easily accessible by people either so I

2869
02:23:05,909 --> 02:23:12,299
feel like getting that stuff out into

2870
02:23:09,379 --> 02:23:16,500
sort of the real world it would be it

2871
02:23:12,299 --> 02:23:19,829
would be pretty good so that's it thanks

2872
02:23:16,500 --> 02:23:21,870
for joining me I will talk to y'all next

2873
02:23:19,829 --> 02:23:25,190
time until then have fun programming and

2874
02:23:21,870 --> 02:23:25,190
I'll see everyone on the Internet

