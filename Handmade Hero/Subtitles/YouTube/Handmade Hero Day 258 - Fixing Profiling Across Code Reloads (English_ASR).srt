1
00:00:00,740 --> 00:00:05,129
hello everyone and welcome to handmade

2
00:00:03,240 --> 00:00:10,109
hero the show Rico to complete game live

3
00:00:05,129 --> 00:00:11,910
on stream we are I think we didn't quite

4
00:00:10,109 --> 00:00:14,779
finish debugging something that I want

5
00:00:11,910 --> 00:00:17,070
to debug on the last dream on monday and

6
00:00:14,779 --> 00:00:20,789
so today we're going to finish debugging

7
00:00:17,070 --> 00:00:22,980
it it's in the day 257 code today is day

8
00:00:20,789 --> 00:00:24,630
2 58 so if you would like to follow

9
00:00:22,980 --> 00:00:26,969
along at home and you pre-order the game

10
00:00:24,629 --> 00:00:28,710
on a major org unpack that day to do

11
00:00:26,969 --> 00:00:32,189
seven code because that's what i'm

12
00:00:28,710 --> 00:00:36,859
starting with today and here we go let

13
00:00:32,189 --> 00:00:39,030
me first load up our handmade code here

14
00:00:36,859 --> 00:00:40,469
you know what i want to do actually I

15
00:00:39,030 --> 00:00:42,149
take it back I'm not going to do that

16
00:00:40,469 --> 00:00:44,009
I've been wanting to do this for a while

17
00:00:42,149 --> 00:00:48,960
and I keep forgetting I wanted to move

18
00:00:44,009 --> 00:00:51,299
the prj file out of the code directory

19
00:00:48,960 --> 00:00:54,719
and into the root directory like this is

20
00:00:51,299 --> 00:00:56,429
where I actually wanted it to be don't

21
00:00:54,719 --> 00:00:58,679
ask me why I just kind of like that

22
00:00:56,429 --> 00:01:01,619
convention these prj files or something

23
00:00:58,679 --> 00:01:03,899
new that I made just for for kodir but

24
00:01:01,619 --> 00:01:05,700
my convention has in work has been to

25
00:01:03,899 --> 00:01:09,180
put them in the route instead of in the

26
00:01:05,700 --> 00:01:10,379
code directory I just seem to like that

27
00:01:09,180 --> 00:01:15,150
better and so that's what I'm going to

28
00:01:10,379 --> 00:01:17,129
do so here is our system and it's

29
00:01:15,150 --> 00:01:20,280
working actually quite well at this

30
00:01:17,129 --> 00:01:22,920
point and we've gotten it into a fairly

31
00:01:20,280 --> 00:01:25,379
nice state but before we go any further

32
00:01:22,920 --> 00:01:27,868
on our profiler system like making this

33
00:01:25,379 --> 00:01:30,359
a more usable user interface thing here

34
00:01:27,868 --> 00:01:32,578
what I wanted to do is figure out why

35
00:01:30,359 --> 00:01:34,890
we're getting an occasional bug with

36
00:01:32,578 --> 00:01:36,419
code reloading we fixed one of our bumps

37
00:01:34,890 --> 00:01:40,019
with code reloading but we have another

38
00:01:36,420 --> 00:01:43,950
bug with code reloading and that bug is

39
00:01:40,019 --> 00:01:46,078
that if we change the executable so you

40
00:01:43,950 --> 00:01:47,909
know somewhat significantly we can't

41
00:01:46,078 --> 00:01:49,289
just you know twiddling and then change

42
00:01:47,909 --> 00:01:50,850
it we have to like if out a block of

43
00:01:49,290 --> 00:01:52,920
code so that you know it gets rearranged

44
00:01:50,849 --> 00:01:55,169
a little bit but assuming that we do

45
00:01:52,920 --> 00:01:58,829
that and make us a substantial enough

46
00:01:55,170 --> 00:02:01,469
change we can get to a point where the

47
00:01:58,828 --> 00:02:03,209
profile no longer works and we basically

48
00:02:01,468 --> 00:02:06,809
know why the profile doesn't work

49
00:02:03,209 --> 00:02:11,340
anymore but we don't really know what is

50
00:02:06,810 --> 00:02:13,710
like we know the the way in which the

51
00:02:11,340 --> 00:02:16,379
profiler breaks we just don't know

52
00:02:13,710 --> 00:02:17,849
is making it break in that way and so

53
00:02:16,379 --> 00:02:19,680
that's actually what I'm going to look

54
00:02:17,849 --> 00:02:22,859
at today and I'll show you in a second

55
00:02:19,680 --> 00:02:26,189
here oh wait forgot switch to buffer

56
00:02:22,860 --> 00:02:28,470
there I will show you what I mean in a

57
00:02:26,189 --> 00:02:30,990
second ah this in case there's folks who

58
00:02:28,469 --> 00:02:34,830
don't remember what what we're talking

59
00:02:30,990 --> 00:02:36,870
about all right so uh where is this is

60
00:02:34,830 --> 00:02:39,900
it there is it here's the one I was

61
00:02:36,870 --> 00:02:42,870
using so I made this little if 0 block

62
00:02:39,900 --> 00:02:44,789
here and essentially you know this is

63
00:02:42,870 --> 00:02:46,140
playing the cutscene right now I'm going

64
00:02:44,789 --> 00:02:48,389
to switch into like just the simple

65
00:02:46,139 --> 00:02:50,909
world render and then I'm going to

66
00:02:48,389 --> 00:02:53,039
switch back here and I'm gonna well I

67
00:02:50,909 --> 00:02:55,109
guess I'll also make for kodir a little

68
00:02:53,039 --> 00:02:57,659
more tiny just so you can see the rest

69
00:02:55,110 --> 00:02:59,730
of it happening so there we go I'm going

70
00:02:57,659 --> 00:03:01,079
to compile and you can see that during

71
00:02:59,729 --> 00:03:03,479
the code reload everything worked just

72
00:03:01,080 --> 00:03:06,390
fine but the profile is now gone right

73
00:03:03,479 --> 00:03:08,429
and you can see that you know I'm

74
00:03:06,389 --> 00:03:10,919
walking around and the profile is

75
00:03:08,430 --> 00:03:12,569
completely gone and you know I can

76
00:03:10,919 --> 00:03:14,489
switch it back on and it's not like it

77
00:03:12,569 --> 00:03:17,849
depends on the X people directly that

78
00:03:14,490 --> 00:03:19,620
way it just it it's over right so even

79
00:03:17,849 --> 00:03:21,659
moving back to what probably is exactly

80
00:03:19,620 --> 00:03:25,050
the same executable it's busted it's

81
00:03:21,659 --> 00:03:26,549
still busted right so the profiles not

82
00:03:25,050 --> 00:03:30,510
working and so I did a little

83
00:03:26,550 --> 00:03:32,370
investigation on the previous stream and

84
00:03:30,509 --> 00:03:35,579
we kind of know what is actually

85
00:03:32,370 --> 00:03:39,180
happening there but we just don't know

86
00:03:35,580 --> 00:03:41,340
exactly why and the reason that we or at

87
00:03:39,180 --> 00:03:42,930
least the what I believe could be the

88
00:03:41,340 --> 00:03:45,330
problem because we observed it happen in

89
00:03:42,930 --> 00:03:48,270
practice is that when we are

90
00:03:45,330 --> 00:03:50,280
encountering the profile blocks so

91
00:03:48,270 --> 00:03:52,159
remember we write to a debug log and

92
00:03:50,280 --> 00:03:55,020
then we essentially collate that log

93
00:03:52,159 --> 00:03:56,400
after the fact to determine what what

94
00:03:55,020 --> 00:03:58,020
has happened and one of the things that

95
00:03:56,400 --> 00:04:01,200
we compute during that collation phase

96
00:03:58,020 --> 00:04:03,150
is we compute the profiling information

97
00:04:01,199 --> 00:04:05,009
so how long things took and we do that

98
00:04:03,150 --> 00:04:08,330
by adding a begin marker and marker and

99
00:04:05,009 --> 00:04:10,560
off we go now our game is multi-threaded

100
00:04:08,330 --> 00:04:13,050
nominally we don't make super heavy use

101
00:04:10,560 --> 00:04:14,640
of it at this point but we made very

102
00:04:13,050 --> 00:04:16,739
heavy use of it in the software renderer

103
00:04:14,639 --> 00:04:18,120
for example and we probably will make

104
00:04:16,738 --> 00:04:20,039
more use of it going forwards we might

105
00:04:18,120 --> 00:04:22,740
multi-thread simulation in the future uh

106
00:04:20,040 --> 00:04:24,540
we always even in this fairly light

107
00:04:22,740 --> 00:04:25,710
multi threading thing relying on threads

108
00:04:24,540 --> 00:04:26,610
to do our asset processing the

109
00:04:25,709 --> 00:04:27,288
background so that we can stream the

110
00:04:26,610 --> 00:04:31,038
world in

111
00:04:27,288 --> 00:04:33,269
the world assets in and stuff like that

112
00:04:31,038 --> 00:04:34,829
so we are a multi-threaded gang what

113
00:04:33,269 --> 00:04:37,228
that means is when we are cooling the

114
00:04:34,829 --> 00:04:38,430
debug log we have a log filled with

115
00:04:37,228 --> 00:04:39,899
events that happened but those events

116
00:04:38,430 --> 00:04:41,908
are coming from multiple frames and what

117
00:04:39,899 --> 00:04:44,038
we need to do when we collate the debug

118
00:04:41,908 --> 00:04:46,408
log is we need to look to see what um

119
00:04:44,038 --> 00:04:49,589
thread out of the threads that are

120
00:04:46,408 --> 00:04:52,500
running what thread we are actually

121
00:04:49,589 --> 00:04:54,779
looking at for a debug event and then we

122
00:04:52,500 --> 00:04:57,329
know that begin and end blocks pair up

123
00:04:54,779 --> 00:04:58,679
along that thread so you know one thread

124
00:04:57,329 --> 00:05:00,120
may have a begin block another thread

125
00:04:58,680 --> 00:05:01,319
may have I begin block and then the

126
00:05:00,120 --> 00:05:02,788
previous right at the end block and the

127
00:05:01,319 --> 00:05:04,889
other for that I'm in block right and so

128
00:05:02,788 --> 00:05:07,050
we're using those thread IDs to pair it

129
00:05:04,889 --> 00:05:08,759
up now we know what the thread is

130
00:05:07,050 --> 00:05:10,319
because we've already found it right and

131
00:05:08,759 --> 00:05:11,939
you can see this get debug thread finger

132
00:05:10,319 --> 00:05:13,110
so for every event comes and we look at

133
00:05:11,939 --> 00:05:15,959
the thread I diem you say what's the

134
00:05:13,110 --> 00:05:18,360
thread that this is coming from right

135
00:05:15,959 --> 00:05:20,788
what thread is this knee bug event

136
00:05:18,360 --> 00:05:22,800
pertain to and then we look to see do we

137
00:05:20,788 --> 00:05:24,899
have an open debug block on that or

138
00:05:22,800 --> 00:05:26,639
don't we if we have an open debug block

139
00:05:24,899 --> 00:05:28,799
at its begin block I should say if we

140
00:05:26,639 --> 00:05:30,509
have an open profiling block and it's to

141
00:05:28,800 --> 00:05:31,919
begin block we make a new profiling

142
00:05:30,509 --> 00:05:33,900
block underneath that one and say this

143
00:05:31,918 --> 00:05:36,829
is like a child call right this is this

144
00:05:33,899 --> 00:05:40,348
block called this other block right if

145
00:05:36,829 --> 00:05:42,658
we don't then we say this is at the root

146
00:05:40,348 --> 00:05:44,278
it's at the top it's in the actual frame

147
00:05:42,658 --> 00:05:47,129
like this was one of the main blocks

148
00:05:44,278 --> 00:05:49,769
that constitutes our chunks of work

149
00:05:47,129 --> 00:05:51,750
across the frame so it's a root block if

150
00:05:49,769 --> 00:05:53,668
we encounter an end block we do the same

151
00:05:51,750 --> 00:05:55,649
thing we go what is that you know what's

152
00:05:53,668 --> 00:05:57,658
the frame I'm sorry what's the open

153
00:05:55,649 --> 00:06:00,060
block profiling but we're talking about

154
00:05:57,658 --> 00:06:01,500
it close it whichever one is open on

155
00:06:00,060 --> 00:06:05,098
this thread is now being closed by this

156
00:06:01,500 --> 00:06:06,750
end block okay and so that's what we're

157
00:06:05,098 --> 00:06:09,478
looking at here right that's what we are

158
00:06:06,750 --> 00:06:11,339
trying to make work and what we found

159
00:06:09,478 --> 00:06:13,889
happened before because obviously this

160
00:06:11,339 --> 00:06:17,038
is working normally what happened before

161
00:06:13,889 --> 00:06:19,439
when we were looking at why we lose our

162
00:06:17,038 --> 00:06:20,908
ability to look at the profile was that

163
00:06:19,439 --> 00:06:24,060
it wasn't that the profiling wasn't

164
00:06:20,908 --> 00:06:28,110
working anymore it was that during the

165
00:06:24,060 --> 00:06:31,348
reload so when the reload happens we

166
00:06:28,110 --> 00:06:36,560
never get an N block to match the open

167
00:06:31,348 --> 00:06:36,560
block around the reload so for example

168
00:06:36,680 --> 00:06:43,329
handmade

169
00:06:39,129 --> 00:06:55,300
actually gets wind could be too babe TPP

170
00:06:43,329 --> 00:06:58,459
so let me search for frame and there is

171
00:06:55,300 --> 00:07:01,329
so what we were seeing is that this

172
00:06:58,459 --> 00:07:04,038
debug collation block which opens right

173
00:07:01,329 --> 00:07:05,839
this block gets opened and that is

174
00:07:04,038 --> 00:07:08,269
typically going to be in most

175
00:07:05,839 --> 00:07:10,818
circumstances the last block that is

176
00:07:08,269 --> 00:07:12,859
open before a collation event occurs

177
00:07:10,819 --> 00:07:14,720
because collation of debug events

178
00:07:12,860 --> 00:07:17,780
happens inside this debug frame and

179
00:07:14,720 --> 00:07:19,610
operation so typically what will happen

180
00:07:17,779 --> 00:07:22,129
is we'll process all the debug events

181
00:07:19,610 --> 00:07:24,770
and then we will end with all those

182
00:07:22,129 --> 00:07:27,199
events being processed and one open

183
00:07:24,769 --> 00:07:29,899
block which is this block right so that

184
00:07:27,199 --> 00:07:32,030
block is open now we come through here

185
00:07:29,899 --> 00:07:34,818
and we write the this doesn't close the

186
00:07:32,029 --> 00:07:37,818
block remember it just writes in an end

187
00:07:34,819 --> 00:07:39,919
block event into like basically the

188
00:07:37,819 --> 00:07:41,598
first event in our new fresh buffer

189
00:07:39,918 --> 00:07:44,329
because we've you know we're using a

190
00:07:41,598 --> 00:07:46,189
different buffer at this point so we

191
00:07:44,329 --> 00:07:48,620
writes it into a different buffer we

192
00:07:46,189 --> 00:07:51,050
then write a whole you know we just

193
00:07:48,620 --> 00:07:52,848
start writing debug events during this

194
00:07:51,050 --> 00:07:55,579
process we come back up to the top of

195
00:07:52,848 --> 00:07:58,668
this loop we come here and we do win32

196
00:07:55,579 --> 00:08:00,560
load game code potentially right if the

197
00:07:58,668 --> 00:08:02,778
xq2 eyes reloaded and that's the case

198
00:08:00,560 --> 00:08:04,639
that's breaking when it does the reload

199
00:08:02,778 --> 00:08:06,829
at this point right we've got an open

200
00:08:04,639 --> 00:08:09,019
block here etc we called n block blah

201
00:08:06,829 --> 00:08:10,818
blah blah we start we we use the new

202
00:08:09,019 --> 00:08:12,468
executable to generate a bunch of stuff

203
00:08:10,819 --> 00:08:14,990
right all this stuff is going to turn

204
00:08:12,468 --> 00:08:17,718
entered into the debug log blah blah

205
00:08:14,990 --> 00:08:20,889
blah we come back down to debug

206
00:08:17,718 --> 00:08:23,240
collation again right and so now we have

207
00:08:20,889 --> 00:08:25,360
basically a whole nother frames worth of

208
00:08:23,240 --> 00:08:29,269
debug events with another collation and

209
00:08:25,360 --> 00:08:32,209
collation begin at the end of it right

210
00:08:29,269 --> 00:08:35,240
and the very first thing in that buffer

211
00:08:32,208 --> 00:08:37,609
should have been an end block okay and

212
00:08:35,240 --> 00:08:39,950
it should have been an end block using

213
00:08:37,610 --> 00:08:44,320
the same executable information that we

214
00:08:39,950 --> 00:08:44,320
used before right

215
00:08:49,019 --> 00:08:59,139
I've got it in all of that explanation I

216
00:08:54,870 --> 00:09:09,549
think I may have an idea what the

217
00:08:59,139 --> 00:09:12,459
problem is well hmm no you know to be

218
00:09:09,549 --> 00:09:16,328
honest no I don't think I do I was gonna

219
00:09:12,458 --> 00:09:19,299
say that end block will not have a valid

220
00:09:16,328 --> 00:09:27,599
like the the information that end in

221
00:09:19,299 --> 00:09:27,599
that event might not really be valid

222
00:09:28,708 --> 00:09:33,399
because it's going to point to strings

223
00:09:31,509 --> 00:09:37,060
that we can't access anymore because

224
00:09:33,399 --> 00:09:40,028
they got unloaded right but that

225
00:09:37,059 --> 00:09:42,939
wouldn't really explain the bug because

226
00:09:40,028 --> 00:09:45,370
the bug just needs the block pairs to

227
00:09:42,940 --> 00:09:49,149
match and in this case it's not even

228
00:09:45,370 --> 00:09:51,370
looking at the grid for that purpose so

229
00:09:49,149 --> 00:09:53,620
it still seems like the end block

230
00:09:51,370 --> 00:09:56,230
doesn't get picked up for whatever

231
00:09:53,620 --> 00:09:59,019
reason and I don't know the reason but

232
00:09:56,230 --> 00:10:00,940
we do have another bug there I feel like

233
00:09:59,019 --> 00:10:03,250
there's another bug there and that is

234
00:10:00,940 --> 00:10:06,940
that in this this debug frame end

235
00:10:03,250 --> 00:10:13,470
situation I feel like we really want to

236
00:10:06,940 --> 00:10:16,649
do the reload with an empty buffer right

237
00:10:13,470 --> 00:10:20,220
like I feel like we want to ensure an

238
00:10:16,649 --> 00:10:22,929
empty buffer as part of the reload

239
00:10:20,220 --> 00:10:28,329
because otherwise we are going to be

240
00:10:22,929 --> 00:10:30,688
collating bogus data potentially that

241
00:10:28,328 --> 00:10:30,688
just

242
00:10:31,938 --> 00:10:38,578
that just seems true right because we

243
00:10:36,028 --> 00:10:42,208
write in these grids and they get kept

244
00:10:38,578 --> 00:10:44,489
permit they get copied during this so so

245
00:10:42,208 --> 00:10:51,239
I guess what I would say is this part

246
00:10:44,490 --> 00:10:52,619
really the executable reload part I feel

247
00:10:51,240 --> 00:10:56,339
like the excuted will reload and the

248
00:10:52,619 --> 00:10:59,490
debug have to sort of be mated they have

249
00:10:56,339 --> 00:11:01,470
to be working in tandem and that's just

250
00:10:59,490 --> 00:11:02,730
a bug regardless now I don't know that

251
00:11:01,470 --> 00:11:08,459
it's a bug that has anything to do with

252
00:11:02,730 --> 00:11:10,470
our current bug but it is a bug so I

253
00:11:08,458 --> 00:11:14,099
think the correct thing to do here is

254
00:11:10,470 --> 00:11:17,220
actually inside this where we do this

255
00:11:14,100 --> 00:11:19,920
compare file time right I think what we

256
00:11:17,220 --> 00:11:22,769
want to do is remember whether or not we

257
00:11:19,919 --> 00:11:24,740
will reload the executable like that's

258
00:11:22,769 --> 00:11:28,980
actually the thing we do want to know

259
00:11:24,740 --> 00:11:31,159
but then not actually reload it until

260
00:11:28,980 --> 00:11:31,159
later

261
00:11:39,350 --> 00:11:47,790
so here's my proposal this is what I

262
00:11:45,000 --> 00:11:50,279
think we need to do now I guess there's

263
00:11:47,789 --> 00:11:51,959
a risk in me fixing this bug right now

264
00:11:50,279 --> 00:11:55,470
while the other bug is still there which

265
00:11:51,960 --> 00:11:58,379
is that I'm a cover-up the other bug and

266
00:11:55,470 --> 00:12:00,480
that may still be a bug right because I

267
00:11:58,379 --> 00:12:04,590
basically got two bones now if that

268
00:12:00,480 --> 00:12:06,149
makes sense that I know about and since

269
00:12:04,590 --> 00:12:07,230
this is the debug code I guess I'm not

270
00:12:06,149 --> 00:12:08,819
too worried about that because if

271
00:12:07,230 --> 00:12:11,100
there's bubs in the debug code well who

272
00:12:08,820 --> 00:12:13,860
cares it's not even compiled in in the

273
00:12:11,100 --> 00:12:16,500
users the case so i guess i don't care

274
00:12:13,860 --> 00:12:20,669
but it's just worth mentioning if that

275
00:12:16,500 --> 00:12:22,620
makes sense but what I'm saying is I

276
00:12:20,669 --> 00:12:25,349
think what we would actually need to do

277
00:12:22,620 --> 00:12:28,379
is we need to make sure that we flush

278
00:12:25,350 --> 00:12:31,889
all of our cues right so basically we'd

279
00:12:28,379 --> 00:12:34,169
say if executable needs to be reloaded

280
00:12:31,889 --> 00:12:36,799
right if we've detected that's going to

281
00:12:34,169 --> 00:12:43,229
happen we need to flush all our cues

282
00:12:36,799 --> 00:12:47,519
then we do excuse me then we do our

283
00:12:43,230 --> 00:12:52,950
frame end if that makes sense and then

284
00:12:47,519 --> 00:12:54,569
and only then after we now know we have

285
00:12:52,950 --> 00:12:59,520
collated all of the debug events that

286
00:12:54,570 --> 00:13:05,040
we're going to collate can we then say

287
00:12:59,519 --> 00:13:09,389
all right now do this you know I'm

288
00:13:05,039 --> 00:13:12,389
saying and I suppose this stuff can can

289
00:13:09,389 --> 00:13:15,689
happen in here as well so this is

290
00:13:12,389 --> 00:13:17,220
basically like yeah if we come in here

291
00:13:15,690 --> 00:13:23,340
we're going to say the executable

292
00:13:17,220 --> 00:13:25,110
reloaded is it's that this year is going

293
00:13:23,340 --> 00:13:27,570
to be like all right so we flush the

294
00:13:25,110 --> 00:13:32,610
cues we let the debug to its collation

295
00:13:27,570 --> 00:13:38,250
and then if we need to be reloaded we

296
00:13:32,610 --> 00:13:41,820
reload it oops like so and I put this

297
00:13:38,250 --> 00:13:44,559
guy in here right

298
00:13:41,820 --> 00:13:48,730
so I think that's actually when that

299
00:13:44,559 --> 00:13:50,889
needs to happen I'm pretty sure because

300
00:13:48,730 --> 00:13:53,590
if we don't do that then we will have

301
00:13:50,889 --> 00:13:55,389
some errant grids regardless i don't

302
00:13:53,590 --> 00:13:57,160
think that fixes the bug we're talking

303
00:13:55,389 --> 00:13:59,649
about because i don't believe the bug

304
00:13:57,159 --> 00:14:02,799
we're talking about requires those grids

305
00:13:59,649 --> 00:14:04,959
to do the beginning and block matching

306
00:14:02,799 --> 00:14:07,269
so i think we still have the other bug

307
00:14:04,960 --> 00:14:10,269
but this definitely was a bug and it's a

308
00:14:07,269 --> 00:14:12,189
bug we can fix so we should and so all

309
00:14:10,269 --> 00:14:15,279
we really need to do up here is do a B

310
00:14:12,190 --> 00:14:18,160
32 of executable needs to be reloaded

311
00:14:15,279 --> 00:14:25,049
and that X people needs to be reloaded

312
00:14:18,159 --> 00:14:25,049
is just that information right so yeah

313
00:14:26,279 --> 00:14:32,319
that's what's actually going down I

314
00:14:28,539 --> 00:14:38,500
think I also suppose that this really

315
00:14:32,320 --> 00:14:41,530
doesn't need to be up here either it can

316
00:14:38,500 --> 00:14:44,620
actually remove down below right so this

317
00:14:41,529 --> 00:14:50,529
this part here can actually come over

318
00:14:44,620 --> 00:14:52,870
here and my only concern at this point

319
00:14:50,529 --> 00:14:54,879
is that this does mean that will go one

320
00:14:52,870 --> 00:14:56,860
frame without actually having oh no it

321
00:14:54,879 --> 00:14:59,799
doesn't here's the we load it to begin

322
00:14:56,860 --> 00:15:01,659
with you anyway all right so I think

323
00:14:59,799 --> 00:15:03,549
that's more correct I think that

324
00:15:01,659 --> 00:15:04,809
basically removes bugs that we would

325
00:15:03,549 --> 00:15:07,629
have had with the executable code

326
00:15:04,809 --> 00:15:09,250
reloading we're across the reload we

327
00:15:07,629 --> 00:15:11,169
would be unstable so I'm going to double

328
00:15:09,250 --> 00:15:13,539
check to make sure that I haven't broken

329
00:15:11,169 --> 00:15:17,860
everything horribly which again may have

330
00:15:13,539 --> 00:15:19,870
happened so let's take a look again I'll

331
00:15:17,860 --> 00:15:22,000
do the same update we were doing before

332
00:15:19,870 --> 00:15:24,200
and just make sure that we can still

333
00:15:22,000 --> 00:15:26,590
reload the executable

334
00:15:24,200 --> 00:15:31,250
let's see that's the world mode that's P

335
00:15:26,590 --> 00:15:36,440
and in here I can hit spacebar and let's

336
00:15:31,250 --> 00:15:41,269
see so if i do 0 there off I go let's

337
00:15:36,440 --> 00:15:45,860
see okay well that didn't work well at

338
00:15:41,269 --> 00:15:52,000
all that actually just caused me to to

339
00:15:45,860 --> 00:15:55,870
hang what happened build let's break all

340
00:15:52,000 --> 00:16:03,169
there we go so what is going on here

341
00:15:55,870 --> 00:16:05,679
threads we are in win32 fill sound

342
00:16:03,169 --> 00:16:05,679
buffer

343
00:16:13,049 --> 00:16:24,469
so it looks like somehow somehow this

344
00:16:20,009 --> 00:16:24,470
failed in a very bad way

345
00:16:31,399 --> 00:16:41,120
but i'm not sure what happened let's

346
00:16:35,720 --> 00:16:45,170
find out like our game didn't reload

347
00:16:41,120 --> 00:16:46,310
properly so that that is why it stopped

348
00:16:45,169 --> 00:16:51,579
updating is because it literally had

349
00:16:46,309 --> 00:16:51,579
nothing to update all right here we go

350
00:16:51,669 --> 00:17:00,860
so unloaded game code unloads the game

351
00:16:56,059 --> 00:17:03,379
code not surprisingly we then reload the

352
00:17:00,860 --> 00:17:06,019
game code like so I'm going to take a

353
00:17:03,379 --> 00:17:16,160
look just to see what this looks like

354
00:17:06,019 --> 00:17:20,720
here oh right it's a little bit it's a

355
00:17:16,160 --> 00:17:23,690
little bit more sensitive than that

356
00:17:20,720 --> 00:17:25,400
isn't it because it can't load the game

357
00:17:23,690 --> 00:17:27,920
now because the compiler is not done

358
00:17:25,400 --> 00:17:30,200
with it yet so it actually does like a

359
00:17:27,920 --> 00:17:32,509
well this time it will actually work

360
00:17:30,200 --> 00:17:35,200
because we were broke into the debugger

361
00:17:32,509 --> 00:17:40,730
and so this time it'll actually be fine

362
00:17:35,200 --> 00:17:42,740
but right we probably made it yet the

363
00:17:40,730 --> 00:17:48,049
you can kind of see what the problem is

364
00:17:42,740 --> 00:17:50,210
here this is pretty subtle so let me let

365
00:17:48,049 --> 00:17:52,849
me explain this in case you guys didn't

366
00:17:50,210 --> 00:17:55,700
quite catch what happened there so the

367
00:17:52,849 --> 00:17:59,269
problem here is i forgot that we don't

368
00:17:55,700 --> 00:18:00,920
immediately get the game code we usually

369
00:17:59,269 --> 00:18:03,200
wait a frame or two to get it because

370
00:18:00,920 --> 00:18:05,000
what happens is we try to reload it but

371
00:18:03,200 --> 00:18:07,730
visual studio hasn't finished writing

372
00:18:05,000 --> 00:18:10,670
the executable yet or the PDB or and who

373
00:18:07,730 --> 00:18:12,860
knows what else right so there's this

374
00:18:10,670 --> 00:18:14,509
this sort of latency where we've

375
00:18:12,859 --> 00:18:16,159
detected that we need to load a new one

376
00:18:14,509 --> 00:18:18,500
because the date stamp has changed but

377
00:18:16,160 --> 00:18:19,970
we can't actually do it so what happens

378
00:18:18,500 --> 00:18:24,529
is we come through here and the first

379
00:18:19,970 --> 00:18:27,250
time through it actually fails like it

380
00:18:24,529 --> 00:18:34,299
doesn't work right

381
00:18:27,250 --> 00:18:37,890
oh and that explains our bug that

382
00:18:34,299 --> 00:18:42,159
totally explains our bug as well right

383
00:18:37,890 --> 00:18:44,590
because we can't call debug frame end we

384
00:18:42,160 --> 00:18:47,410
end up going all the way back through

385
00:18:44,589 --> 00:18:50,139
this code one more time without ever

386
00:18:47,410 --> 00:18:54,390
having called the collation code since

387
00:18:50,140 --> 00:18:54,390
there was no collation code to call

388
00:18:56,640 --> 00:19:10,360
that's crazy that's crazy so I think

389
00:19:08,049 --> 00:19:12,519
what I want to do here is actually just

390
00:19:10,359 --> 00:19:15,879
force this to maybe be a little more

391
00:19:12,519 --> 00:19:19,470
sane so maybe do something here where we

392
00:19:15,880 --> 00:19:21,880
just go like okay let's try to make this

393
00:19:19,470 --> 00:19:25,180
behave in a in a slightly more

394
00:19:21,880 --> 00:19:30,040
interesting fashion for example you know

395
00:19:25,180 --> 00:19:34,720
load dry index equals 0 load dry index

396
00:19:30,039 --> 00:19:40,990
is less than 100 load dry index and so

397
00:19:34,720 --> 00:19:43,390
let's just try loading multiple times to

398
00:19:40,990 --> 00:19:45,670
see if we can get to load right in here

399
00:19:43,390 --> 00:19:49,360
I think that's more what we want to do

400
00:19:45,670 --> 00:19:52,180
and then if we can't then we you know

401
00:19:49,359 --> 00:19:54,189
we're in really in bad shape right then

402
00:19:52,180 --> 00:19:56,799
we know things are bad what I do want to

403
00:19:54,190 --> 00:19:59,710
do however is move this stuff outside of

404
00:19:56,799 --> 00:20:04,269
it so basically this stuff happens over

405
00:19:59,710 --> 00:20:11,500
here we do this stuff exactly the way

406
00:20:04,269 --> 00:20:14,879
that we would normally need to do it so

407
00:20:11,500 --> 00:20:14,880
really I just want this

408
00:20:26,170 --> 00:20:32,090
okay so this is what we actually want so

409
00:20:30,529 --> 00:20:34,970
here we come through we say all right

410
00:20:32,089 --> 00:20:37,099
you know we assume that the executable

411
00:20:34,970 --> 00:20:39,559
doesn't need to be reloaded we assume

412
00:20:37,099 --> 00:20:43,969
we've already done that if we were going

413
00:20:39,559 --> 00:20:47,450
to do it we do XP will needs to be

414
00:20:43,970 --> 00:20:50,089
reloaded from the detection and we flush

415
00:20:47,450 --> 00:20:51,319
the cues if we have to we then give the

416
00:20:50,089 --> 00:20:55,519
debug system a chance to do the final

417
00:20:51,319 --> 00:20:58,309
collation round or we bail if we need to

418
00:20:55,519 --> 00:21:01,160
I mean you can the blood was like right

419
00:20:58,309 --> 00:21:06,049
here like this was the bug right I mean

420
00:21:01,160 --> 00:21:07,610
that was the bug in fact I guess we

421
00:21:06,049 --> 00:21:09,799
could even maybe get rid of that line

422
00:21:07,609 --> 00:21:11,059
and then it would have worked if we just

423
00:21:09,799 --> 00:21:13,879
didn't do this the problem is will

424
00:21:11,059 --> 00:21:16,639
eventually overflow you know like as if

425
00:21:13,880 --> 00:21:18,080
we need to clear that eventually we

426
00:21:16,640 --> 00:21:21,110
can't just keep regard recording the

427
00:21:18,079 --> 00:21:22,730
emigrants forever but that was the bug

428
00:21:21,109 --> 00:21:25,789
this was the bug right here the whole

429
00:21:22,730 --> 00:21:27,049
time we're staring us in the face and

430
00:21:25,789 --> 00:21:28,879
then if the extra doesn't even really

431
00:21:27,049 --> 00:21:31,190
will just go let's try a few times to

432
00:21:28,880 --> 00:21:32,540
reload it because we there's no point in

433
00:21:31,190 --> 00:21:33,710
going back through the frame because we

434
00:21:32,539 --> 00:21:35,389
can't draw anything we don't have a game

435
00:21:33,710 --> 00:21:38,660
running right there's no game we

436
00:21:35,390 --> 00:21:45,970
unloaded it so I think that's more

437
00:21:38,660 --> 00:21:52,550
correct now and that solves both bugs

438
00:21:45,970 --> 00:21:56,140
assuming we actually got it right all

439
00:21:52,549 --> 00:22:03,069
right so i'ma go to world mode dot cpp

440
00:21:56,140 --> 00:22:03,070
I'm gonna switch this up like so and

441
00:22:04,750 --> 00:22:11,269
it's totally not going to work because I

442
00:22:08,480 --> 00:22:15,289
made some other mistake but we're almost

443
00:22:11,269 --> 00:22:18,740
done and that's what's important let's

444
00:22:15,289 --> 00:22:21,200
see here oh that's good apparently I

445
00:22:18,740 --> 00:22:23,509
just want to load the game 100 times how

446
00:22:21,200 --> 00:22:31,279
about you actually check to see if it's

447
00:22:23,509 --> 00:22:33,410
loaded muratori not the brightest bulb

448
00:22:31,279 --> 00:22:35,329
on the tree today folks not the

449
00:22:33,410 --> 00:22:44,180
brightest so here it's right here right

450
00:22:35,329 --> 00:22:47,149
it's supposed to be assuming that the

451
00:22:44,180 --> 00:22:52,430
game is not bad now win32 unload game

452
00:22:47,150 --> 00:22:57,170
code I'm assuming actually does the

453
00:22:52,430 --> 00:23:01,310
right thing here and sets it to not be

454
00:22:57,170 --> 00:23:04,759
valid yeah so I think that's all we

455
00:23:01,309 --> 00:23:12,799
needed so okay let's try it one more

456
00:23:04,759 --> 00:23:16,879
time try that one more time all right

457
00:23:12,799 --> 00:23:24,230
here we go and so in cure let's just get

458
00:23:16,880 --> 00:23:29,600
back to full mode and that and what is

459
00:23:24,230 --> 00:23:37,750
the problem came up to and renders

460
00:23:29,599 --> 00:23:37,750
unhappy hmm

461
00:23:37,960 --> 00:23:52,509
not sure why it would be did I mess up

462
00:23:42,859 --> 00:23:52,509
something here where we use this

463
00:23:57,829 --> 00:24:05,509
hmm let's take a look what the problem

464
00:23:59,839 --> 00:24:07,308
is so this memory is wrong right you can

465
00:24:05,509 --> 00:24:10,460
see that that's true let's take a look

466
00:24:07,308 --> 00:24:12,889
at where we actually got in here so we

467
00:24:10,460 --> 00:24:14,329
called game update and render we took a

468
00:24:12,890 --> 00:24:17,120
look at what the game mode was and it

469
00:24:14,329 --> 00:24:19,369
was correctly in the cutscene so that is

470
00:24:17,119 --> 00:24:22,250
what we would expect it we do update and

471
00:24:19,369 --> 00:24:25,969
render cutscene and we're calling this

472
00:24:22,250 --> 00:24:28,069
asset rendering code and we get in here

473
00:24:25,970 --> 00:24:35,240
and we just find that the scene that we

474
00:24:28,069 --> 00:24:41,000
actually passed is garbage but that's

475
00:24:35,240 --> 00:24:45,798
actually that's actually true right

476
00:24:41,000 --> 00:24:49,190
that's actually that's actually not our

477
00:24:45,798 --> 00:24:51,888
fault that's just actually this code

478
00:24:49,190 --> 00:24:56,330
being wrong because these variables are

479
00:24:51,888 --> 00:24:58,879
globe our statics and we store them so

480
00:24:56,329 --> 00:25:01,908
that's actually yeah that's not going to

481
00:24:58,880 --> 00:25:13,669
work right because presumably this

482
00:25:01,909 --> 00:25:19,580
cutscene code take a look here in the

483
00:25:13,669 --> 00:25:26,240
cutscene code where we are pointing to a

484
00:25:19,579 --> 00:25:33,918
layered seen star scenes not sure I

485
00:25:26,240 --> 00:25:35,058
guess we decided that that was well you

486
00:25:33,919 --> 00:25:38,570
know what i don't understand exactly

487
00:25:35,058 --> 00:25:44,379
what that does like I don't know why we

488
00:25:38,569 --> 00:25:44,379
needed that do does anybody else

489
00:25:47,269 --> 00:25:55,589
update and render cutscene so it's this

490
00:25:51,720 --> 00:25:57,120
is the stupidity right here right and I

491
00:25:55,589 --> 00:26:01,500
guess this is so in case we wanted to do

492
00:25:57,119 --> 00:26:03,419
another cutscene and so that doesn't

493
00:26:01,500 --> 00:26:06,000
work across reloads right because we're

494
00:26:03,420 --> 00:26:10,410
snapping a pointer to that internal so

495
00:26:06,000 --> 00:26:12,390
that just seems dumb to me and you know

496
00:26:10,410 --> 00:26:14,580
again would be a totally fine program

497
00:26:12,390 --> 00:26:16,050
practice if we had a different sort of

498
00:26:14,579 --> 00:26:19,829
code reload system but since we're using

499
00:26:16,049 --> 00:26:21,960
the simple relatively simple kind we're

500
00:26:19,829 --> 00:26:25,199
not allowed to do that so what we

501
00:26:21,960 --> 00:26:36,150
actually want to do here is say okay in

502
00:26:25,200 --> 00:26:42,180
update and render in update and render

503
00:26:36,150 --> 00:26:46,190
we need to Weiss yeah give this game

504
00:26:42,180 --> 00:26:52,460
update and render cutscene we need to

505
00:26:46,190 --> 00:26:55,799
stop looking at this the scene in

506
00:26:52,460 --> 00:27:00,900
information that we're passing and start

507
00:26:55,799 --> 00:27:02,759
doing it slightly differently trying to

508
00:27:00,900 --> 00:27:05,640
think of what i want to do I think what

509
00:27:02,759 --> 00:27:07,500
I'd like to do here is just use an enum

510
00:27:05,640 --> 00:27:10,710
right because that's very simple

511
00:27:07,500 --> 00:27:20,549
solution if I just say like okay we've

512
00:27:10,710 --> 00:27:25,829
got you know our struct cutscene right

513
00:27:20,549 --> 00:27:28,500
and that cutscene has the what are the

514
00:27:25,829 --> 00:27:31,379
two things we want in here we just want

515
00:27:28,500 --> 00:27:37,259
the scene cat in the scenes so if I just

516
00:27:31,380 --> 00:27:40,040
have seen countin scenes then i can say

517
00:27:37,259 --> 00:27:40,039
cut scene

518
00:27:40,909 --> 00:27:54,990
and then we just do a raid count clear

519
00:27:45,569 --> 00:27:59,099
cut scene and cuts so all i'm doing here

520
00:27:54,990 --> 00:28:03,859
is i'm just making a table so that we

521
00:27:59,099 --> 00:28:07,250
can index into the table that's it and

522
00:28:03,859 --> 00:28:12,359
then i can just say okay cut see an ID

523
00:28:07,250 --> 00:28:15,599
intro and now we're good to go so

524
00:28:12,359 --> 00:28:20,038
instead now of doing the the thing where

525
00:28:15,599 --> 00:28:22,500
we actually store that pointer will just

526
00:28:20,038 --> 00:28:23,970
say that instead of game mode cutscene

527
00:28:22,500 --> 00:28:25,589
having anything else in it it can

528
00:28:23,970 --> 00:28:27,808
actually just have this in fact i can go

529
00:28:25,589 --> 00:28:30,449
ahead and put this out here if you want

530
00:28:27,808 --> 00:28:33,240
to like so and say that there's a

531
00:28:30,450 --> 00:28:36,179
cutscene ID that says which scene you're

532
00:28:33,240 --> 00:28:42,960
trying to play and then in here what we

533
00:28:36,179 --> 00:28:45,990
would do is say okay the cutscene you

534
00:28:42,960 --> 00:28:51,750
know there's whatever the cutscene is we

535
00:28:45,990 --> 00:28:53,880
just say the cutscenes array whatever

536
00:28:51,750 --> 00:28:56,730
the ID is lets us look that one up and

537
00:28:53,880 --> 00:29:02,028
then we just use the info pointer from

538
00:28:56,730 --> 00:29:05,690
then on like so

539
00:29:02,028 --> 00:29:09,169
um what are you complaining about you

540
00:29:05,690 --> 00:29:10,820
are complaining about that well you know

541
00:29:09,169 --> 00:29:14,169
what you don't actually need to be a

542
00:29:10,819 --> 00:29:18,259
pointer for any particular reason and

543
00:29:14,169 --> 00:29:20,960
there we go so in case of the intro

544
00:29:18,259 --> 00:29:25,960
cutscene all we do here is to set the ID

545
00:29:20,960 --> 00:29:29,808
equals cutscene ID intro and there we go

546
00:29:25,960 --> 00:29:34,038
so now we should be safe across reloads

547
00:29:29,808 --> 00:29:41,710
for that as well which is nice so let's

548
00:29:34,038 --> 00:29:41,710
go ahead and double-check world mode

549
00:29:43,239 --> 00:29:52,129
okay um getting there looks like we

550
00:29:48,679 --> 00:29:57,528
still have so this would be looking into

551
00:29:52,128 --> 00:30:00,738
a this would be parsing an element whose

552
00:29:57,528 --> 00:30:05,858
grid we don't recognize which means that

553
00:30:00,739 --> 00:30:05,858
someone's still putting events in there

554
00:30:06,489 --> 00:30:19,009
that we're not that we're from the

555
00:30:11,569 --> 00:30:21,368
unloaded version if that makes sense see

556
00:30:19,009 --> 00:30:21,368
who it is

557
00:30:25,480 --> 00:30:27,539
you

558
00:30:29,829 --> 00:30:37,000
keep a person named event grid of course

559
00:30:32,440 --> 00:30:40,870
I can't see the event grid because it's

560
00:30:37,000 --> 00:30:44,409
already been unloaded hmm that makes it

561
00:30:40,869 --> 00:30:46,509
harder to find I must step back to

562
00:30:44,409 --> 00:30:48,640
collate event records here I would like

563
00:30:46,509 --> 00:30:51,788
to know how many event records there

564
00:30:48,640 --> 00:30:59,890
were how many who were on the very first

565
00:30:51,788 --> 00:31:02,888
one actually I'm not sure how to figure

566
00:30:59,890 --> 00:31:04,809
out where that would be I guess what we

567
00:31:02,888 --> 00:31:06,069
could do is try to do it across a run

568
00:31:04,808 --> 00:31:10,470
where we don't really change the

569
00:31:06,069 --> 00:31:14,079
executable but that we could see which

570
00:31:10,470 --> 00:31:16,149
one's come across so I'm going to try

571
00:31:14,079 --> 00:31:18,879
that because I feel like it would be

572
00:31:16,148 --> 00:31:22,538
easier to debug that way than any other

573
00:31:18,880 --> 00:31:26,080
way so what I'm basically saying is I'm

574
00:31:22,538 --> 00:31:28,690
going to make it start and do it's you

575
00:31:26,079 --> 00:31:31,629
know it's normal thing and I'm going to

576
00:31:28,690 --> 00:31:34,778
go ahead and have it ready to go and

577
00:31:31,630 --> 00:31:37,630
then I'm gonna set a break point such

578
00:31:34,778 --> 00:31:38,950
that I know right when the executable is

579
00:31:37,630 --> 00:31:44,470
going to be reloaded so i'm going to set

580
00:31:38,950 --> 00:31:46,710
a breakpoint like here right and so off

581
00:31:44,470 --> 00:31:46,710
we go

582
00:31:48,750 --> 00:31:52,839
I'm not going to change the executable

583
00:31:50,829 --> 00:31:58,980
at all basically and then I'm going to

584
00:31:52,839 --> 00:32:02,230
see what events end up in that slot so

585
00:31:58,980 --> 00:32:05,349
so yeah so let's see we unload the game

586
00:32:02,230 --> 00:32:18,180
code I'm going to take a look too with

587
00:32:05,349 --> 00:32:18,179
the global debug table so this is our

588
00:32:18,960 --> 00:32:31,569
event index here so there's six events

589
00:32:25,569 --> 00:32:33,960
that got written in there let's try this

590
00:32:31,569 --> 00:32:33,960
one more time

591
00:32:40,470 --> 00:32:44,669
so there's six events that get written

592
00:32:42,298 --> 00:32:46,440
in by the debug frame end system itself

593
00:32:44,669 --> 00:32:54,630
I assume that those are like renderer

594
00:32:46,440 --> 00:32:57,600
pieces of render information I guess we

595
00:32:54,630 --> 00:33:00,659
just look and find out so we're on event

596
00:32:57,599 --> 00:33:04,439
indexes ear so we're basically in the

597
00:33:00,659 --> 00:33:07,110
first six events is what no I don't want

598
00:33:04,440 --> 00:33:09,659
to see that many so let me just look to

599
00:33:07,109 --> 00:33:14,668
see what the first six events actually

600
00:33:09,659 --> 00:33:16,200
are so we could figure out who it is

601
00:33:14,669 --> 00:33:17,340
it's writing in there and can we make it

602
00:33:16,200 --> 00:33:18,480
so that they don't write in there

603
00:33:17,339 --> 00:33:20,329
because we want to make sure that no

604
00:33:18,480 --> 00:33:22,679
one's writing in during the reload

605
00:33:20,329 --> 00:33:24,808
unless there's some easier way to do

606
00:33:22,679 --> 00:33:28,220
that I'm not sure hi I would really like

607
00:33:24,808 --> 00:33:28,220
to see this piece of information please

608
00:33:29,029 --> 00:33:39,960
debug start what on earth is debug start

609
00:33:35,429 --> 00:33:43,429
ah guess get best match asset which of

610
00:33:39,960 --> 00:33:43,429
course is going to be getting called

611
00:33:51,650 --> 00:34:04,550
so here's a thought here's the thought

612
00:34:01,079 --> 00:34:07,859
and you can tell me what you think of

613
00:34:04,549 --> 00:34:11,190
this thought of the thinking behind this

614
00:34:07,859 --> 00:34:14,639
thought what if we were to simply turn

615
00:34:11,190 --> 00:34:17,490
off recording of debug messages inside

616
00:34:14,639 --> 00:34:18,809
the debug system so that we knew that

617
00:34:17,489 --> 00:34:22,019
that was not going to be something that

618
00:34:18,809 --> 00:34:26,070
ever actually occurred across the reload

619
00:34:22,019 --> 00:34:29,809
right meaning inside win32 handmade CBP

620
00:34:26,070 --> 00:34:32,669
across the reload we could say all right

621
00:34:29,809 --> 00:34:34,918
from right here after we've drained

622
00:34:32,668 --> 00:34:39,389
after the queues have drained out we do

623
00:34:34,918 --> 00:34:45,029
something like you know debug stop

624
00:34:39,389 --> 00:34:51,869
recording events or a debug set event

625
00:34:45,030 --> 00:34:54,950
recording true and then after that we

626
00:34:51,869 --> 00:35:00,000
say okay debug set event recording oh

627
00:34:54,949 --> 00:35:04,889
sorry false and then true so right

628
00:35:00,000 --> 00:35:06,960
around that block we don't record

629
00:35:04,889 --> 00:35:08,400
anything and I guess we could even say

630
00:35:06,960 --> 00:35:13,079
like we're not going to record anything

631
00:35:08,400 --> 00:35:16,740
all the way till we finish till we

632
00:35:13,079 --> 00:35:18,929
finish reloading so basically we don't

633
00:35:16,739 --> 00:35:21,449
record anything we let this collation

634
00:35:18,929 --> 00:35:23,369
wipe the entire slate clean so we know

635
00:35:21,449 --> 00:35:27,329
that all the events are gone then we do

636
00:35:23,369 --> 00:35:31,500
the reload and we don't resume recording

637
00:35:27,329 --> 00:35:34,829
any events until after then inside the

638
00:35:31,500 --> 00:35:36,239
actual debug interface code we would

639
00:35:34,829 --> 00:35:38,250
have one branch which hopefully would

640
00:35:36,239 --> 00:35:40,199
always be perfectly predictable which

641
00:35:38,250 --> 00:35:45,300
just determines whether we ever actually

642
00:35:40,199 --> 00:35:46,980
do the atomic add right and so what this

643
00:35:45,300 --> 00:35:48,810
atomic add would do is it would just say

644
00:35:46,980 --> 00:35:51,329
like okay will you do the atomic add the

645
00:35:48,809 --> 00:35:54,619
global debug table here and this is

646
00:35:51,329 --> 00:35:54,619
going to be crazy town so just

647
00:35:55,719 --> 00:36:01,789
let's just assume since we drain out the

648
00:35:58,099 --> 00:36:06,730
cues we don't have to care I think so we

649
00:36:01,789 --> 00:36:12,500
do global debug table record increment

650
00:36:06,730 --> 00:36:14,659
right and so in the global debug table

651
00:36:12,500 --> 00:36:16,849
there's just a thing here which is the

652
00:36:14,659 --> 00:36:20,629
record increment and it's either set to

653
00:36:16,849 --> 00:36:22,909
1 or 0 so we don't really we don't

654
00:36:20,630 --> 00:36:25,640
really add any cost we don't even need a

655
00:36:22,909 --> 00:36:27,079
branch we just don't ever update where

656
00:36:25,639 --> 00:36:28,099
we're writing so we just like sit in the

657
00:36:27,079 --> 00:36:30,619
same position and never actually

658
00:36:28,099 --> 00:36:31,670
increment the event count right and this

659
00:36:30,619 --> 00:36:33,289
wouldn't really work with multiple

660
00:36:31,670 --> 00:36:34,909
threads but because we know that we only

661
00:36:33,289 --> 00:36:36,559
care about this in the circumstance

662
00:36:34,909 --> 00:36:41,389
we're not actually doing the recording

663
00:36:36,559 --> 00:36:44,029
and there are no threads running we

664
00:36:41,389 --> 00:36:52,159
should be fine right now I really only

665
00:36:44,030 --> 00:36:53,660
need to do that here because normally we

666
00:36:52,159 --> 00:36:56,480
can let the debug system actually record

667
00:36:53,659 --> 00:36:59,299
itself that's not a problem we designed

668
00:36:56,480 --> 00:37:01,070
to do that it's fine so really I think

669
00:36:59,300 --> 00:37:03,140
all we need to do is actually do it here

670
00:37:01,070 --> 00:37:05,720
it also occurs to me that this could go

671
00:37:03,139 --> 00:37:07,730
away now so really we could have fixed

672
00:37:05,719 --> 00:37:08,959
this whole problem I think leaving the

673
00:37:07,730 --> 00:37:12,380
code in the same place that it was

674
00:37:08,960 --> 00:37:14,300
before and just having this the ability

675
00:37:12,380 --> 00:37:17,930
to turn it off as soon as we detect the

676
00:37:14,300 --> 00:37:20,090
need and yet and we could leave it

677
00:37:17,929 --> 00:37:21,889
turned off so if there's no if the game

678
00:37:20,090 --> 00:37:24,700
doesn't get reloaded we would just never

679
00:37:21,889 --> 00:37:24,699
turn this back on

680
00:37:29,639 --> 00:37:34,480
so I feel like we can do that as soon as

681
00:37:33,070 --> 00:37:39,150
we detect that the executable nice be

682
00:37:34,480 --> 00:37:39,150
reloaded we turn the event recording off

683
00:37:39,539 --> 00:37:44,019
and then when they see one used to be

684
00:37:41,679 --> 00:37:45,940
reloaded we turn that the the event

685
00:37:44,019 --> 00:37:55,949
recording back on only if the game

686
00:37:45,940 --> 00:37:55,950
actually was running yeah

687
00:38:00,659 --> 00:38:04,739
and then this doesn't need to happen

688
00:38:02,400 --> 00:38:06,660
anymore because event recording would

689
00:38:04,739 --> 00:38:16,858
not be occurring if the game failed to

690
00:38:06,659 --> 00:38:18,568
reload itself all right so all that

691
00:38:16,858 --> 00:38:21,630
remains is just for us to actually

692
00:38:18,568 --> 00:38:23,940
implement this that call which is a

693
00:38:21,630 --> 00:38:27,809
debug set event recording and all debug

694
00:38:23,940 --> 00:38:31,260
set event recording is going to do which

695
00:38:27,809 --> 00:38:33,269
is you know enabled you know is it

696
00:38:31,260 --> 00:38:35,970
enabled or not is this going to say

697
00:38:33,269 --> 00:38:38,068
whatever the global debug table was I'm

698
00:38:35,969 --> 00:38:40,919
going to go ahead and take that record

699
00:38:38,068 --> 00:38:42,869
increment and I'm going to say that if

700
00:38:40,920 --> 00:38:44,010
you told me to enable it i'm going to

701
00:38:42,869 --> 00:38:45,450
set up to 1 and if you told me to

702
00:38:44,010 --> 00:38:55,289
disable it i'm going to set it to 0 and

703
00:38:45,449 --> 00:38:57,960
that's it right now we will no longer

704
00:38:55,289 --> 00:39:00,569
record events if we are not actually up

705
00:38:57,960 --> 00:39:02,190
and enabled which i think will mean

706
00:39:00,568 --> 00:39:05,579
we'll never have a problem with the

707
00:39:02,190 --> 00:39:07,980
grids either that's my guess of course

708
00:39:05,579 --> 00:39:18,230
now i think about it we do actually have

709
00:39:07,980 --> 00:39:18,230
to enable it initially so there is that

710
00:39:19,130 --> 00:39:24,329
meaning this debug said event recording

711
00:39:21,838 --> 00:39:31,019
situation has to actually occur at some

712
00:39:24,329 --> 00:39:33,960
point and I guess that would be pretty

713
00:39:31,019 --> 00:39:36,298
much at the immediate outset of the game

714
00:39:33,960 --> 00:39:39,210
we could do that because the debug table

715
00:39:36,298 --> 00:39:41,670
is configured and up immediately so I

716
00:39:39,210 --> 00:39:43,230
think we could say literally right at

717
00:39:41,670 --> 00:39:45,059
the beginning we're just going to start

718
00:39:43,230 --> 00:39:48,260
recording I don't think there's any

719
00:39:45,059 --> 00:39:48,260
reason not to do that

720
00:39:50,670 --> 00:40:23,550
I and so yeah off we go let's go ahead

721
00:39:59,099 --> 00:40:29,969
and see what our status is now look at

722
00:40:23,550 --> 00:40:35,250
that so lovely our game my date is real

723
00:40:29,969 --> 00:40:38,250
slow isn't it of course that's not

724
00:40:35,250 --> 00:40:47,190
surprising we're not even compiled in

725
00:40:38,250 --> 00:40:51,570
release mode all right I'm pretty happy

726
00:40:47,190 --> 00:40:53,909
with all that I am happy with that I am

727
00:40:51,570 --> 00:40:56,610
a happy puppy at that particular piece

728
00:40:53,909 --> 00:40:57,899
of thing all right let's let's take a

729
00:40:56,610 --> 00:41:04,130
look at our build up batter I want to

730
00:40:57,900 --> 00:41:04,130
see if we work in release mode build

731
00:41:08,608 --> 00:41:16,298
see how we're doing here and switch from

732
00:41:13,150 --> 00:41:18,548
here yeah as I thought so a lot of that

733
00:41:16,298 --> 00:41:20,739
we really actually aren't very slow

734
00:41:18,548 --> 00:41:26,228
we're actually plenty fast it's just we

735
00:41:20,739 --> 00:41:30,039
have a lot of debug code happening so

736
00:41:26,228 --> 00:41:31,598
basically this is all time but as we

737
00:41:30,039 --> 00:41:34,200
start making game code we're going to be

738
00:41:31,599 --> 00:41:36,970
filling up with lots and lots of stuff

739
00:41:34,199 --> 00:41:38,710
so that's what we want to see obviously

740
00:41:36,969 --> 00:41:40,959
we don't want our engine to be this big

741
00:41:38,710 --> 00:41:42,338
piggy thing so it's good that it's it

742
00:41:40,960 --> 00:41:43,929
slow because we're not doing very much

743
00:41:42,338 --> 00:41:46,389
right now like they were not really

744
00:41:43,929 --> 00:41:51,578
pushing anything so which we don't want

745
00:41:46,389 --> 00:41:57,150
to see some really nasty you know long

746
00:41:51,579 --> 00:42:00,960
times on there or whatever all right I'm

747
00:41:57,150 --> 00:42:03,849
super double happy with how that went

748
00:42:00,960 --> 00:42:07,869
I'm a happy puppy so I'm going to go

749
00:42:03,849 --> 00:42:11,140
ahead and I'm going to go ahead and say

750
00:42:07,869 --> 00:42:13,210
that that's that's that's very nice I'm

751
00:42:11,139 --> 00:42:14,469
going to leave that where it is then

752
00:42:13,210 --> 00:42:16,028
tomorrow we'll start working on

753
00:42:14,469 --> 00:42:19,869
beautifying the profiler I'm going to

754
00:42:16,028 --> 00:42:21,960
take some questions now from the studio

755
00:42:19,869 --> 00:42:21,960
audience

756
00:42:27,940 --> 00:42:41,958
am I not whitelisted why did QA y is h

757
00:42:33,588 --> 00:42:43,998
MH bot not there it is all right raso

758
00:42:41,958 --> 00:42:46,669
not sure if this was asked before but is

759
00:42:43,998 --> 00:42:49,399
it worth it to use static cast instead

760
00:42:46,670 --> 00:42:51,229
of a see style cast that does not that

761
00:42:49,400 --> 00:42:52,880
does set a cast dynamic cast and

762
00:42:51,228 --> 00:42:59,478
reinterpret cast if you know that you

763
00:42:52,880 --> 00:43:02,289
only need the first so i'm not sure i

764
00:42:59,478 --> 00:43:04,458
100% understand the question but i will

765
00:43:02,289 --> 00:43:05,479
give you an answer and then you can tell

766
00:43:04,458 --> 00:43:10,728
me whether this is the answer that

767
00:43:05,478 --> 00:43:13,848
you're looking for so the problem with c

768
00:43:10,728 --> 00:43:16,548
plus with regular C casts insofar as one

769
00:43:13,849 --> 00:43:18,229
might consider their to be one is that

770
00:43:16,548 --> 00:43:25,849
you might be using it for different

771
00:43:18,228 --> 00:43:33,379
things right in other words if I was to

772
00:43:25,849 --> 00:43:38,588
take for example here in the code if I

773
00:43:33,380 --> 00:43:38,588
was to do something like let's say

774
00:43:41,349 --> 00:43:44,680
something like this

775
00:43:50,349 --> 00:44:09,309
okay suppose I was to do that versus say

776
00:43:55,719 --> 00:44:11,619
something like this right what you can

777
00:44:09,309 --> 00:44:14,199
see in these two examples is I in both

778
00:44:11,619 --> 00:44:16,269
cases I have done a see style cast but

779
00:44:14,199 --> 00:44:18,549
in one case what I was doing was I was

780
00:44:16,269 --> 00:44:20,469
saying that I believe that this 64-bit

781
00:44:18,550 --> 00:44:22,740
value can actually fit in a 32-bit value

782
00:44:20,469 --> 00:44:25,599
and I would like you to convert it

783
00:44:22,739 --> 00:44:28,599
that's just I'm semantically telling the

784
00:44:25,599 --> 00:44:32,319
compiler I had 64 bits I don't need them

785
00:44:28,599 --> 00:44:33,909
all please just use 32 of them give me

786
00:44:32,320 --> 00:44:39,130
that value now and we're going to go

787
00:44:33,909 --> 00:44:41,379
from there right versus this where i had

788
00:44:39,130 --> 00:44:43,240
a pointer and i still have a pointer so

789
00:44:41,380 --> 00:44:45,849
if there's no information loss from here

790
00:44:43,239 --> 00:44:48,279
to here right I'm taking a probably

791
00:44:45,849 --> 00:44:50,949
eight white pointer assuming we're on

792
00:44:48,280 --> 00:44:52,420
six x64 to an eighth by pointer and I'm

793
00:44:50,949 --> 00:44:54,009
ending up with an 8-byte pointer there's

794
00:44:52,420 --> 00:44:56,440
no difference between these two values

795
00:44:54,010 --> 00:44:59,380
they're the same value at the end no

796
00:44:56,440 --> 00:45:02,559
matter what but I'm telling the compiler

797
00:44:59,380 --> 00:45:06,070
I want you to think of the value in a

798
00:45:02,559 --> 00:45:08,889
different way right so you can kind of

799
00:45:06,070 --> 00:45:11,320
see these two things are actually

800
00:45:08,889 --> 00:45:13,949
different operations one is telling the

801
00:45:11,320 --> 00:45:16,900
compiler to treat something differently

802
00:45:13,949 --> 00:45:19,119
semantically which is this one the other

803
00:45:16,900 --> 00:45:20,769
one while it does also tell the compiler

804
00:45:19,119 --> 00:45:22,029
some semantic information is telling it

805
00:45:20,769 --> 00:45:24,579
to change this user do really a lot

806
00:45:22,030 --> 00:45:28,030
telling it is I'm sorry really it's also

807
00:45:24,579 --> 00:45:30,219
telling it truncate the value so these

808
00:45:28,030 --> 00:45:32,280
two things are not equal at the end of

809
00:45:30,219 --> 00:45:36,399
this even though these two things are

810
00:45:32,280 --> 00:45:38,740
right barring the absurd case of the

811
00:45:36,400 --> 00:45:41,800
multiple inheritance C++ class the

812
00:45:38,739 --> 00:45:43,839
hierarchy like forget that but in almost

813
00:45:41,800 --> 00:45:46,000
any other case these two pointers in

814
00:45:43,840 --> 00:45:48,640
practice will be the same so nothing

815
00:45:46,000 --> 00:45:49,989
will actually occur there and I could

816
00:45:48,639 --> 00:45:52,750
make more examples right if you're a

817
00:45:49,989 --> 00:45:55,359
constant of person you might imagine

818
00:45:52,750 --> 00:45:57,130
something like this happening well

819
00:45:55,360 --> 00:45:59,820
that's not really true let's try

820
00:45:57,130 --> 00:45:59,820
something like this

821
00:46:06,820 --> 00:46:15,050
right in this case I'm removing the

822
00:46:11,929 --> 00:46:16,639
Const so in this case I'm not telling

823
00:46:15,050 --> 00:46:17,990
the compiler to treat it differently I'm

824
00:46:16,639 --> 00:46:20,299
not telling the compiler to cop to

825
00:46:17,989 --> 00:46:22,639
truncate it all I'm telling the compiler

826
00:46:20,300 --> 00:46:25,160
is that I don't want you to complain if

827
00:46:22,639 --> 00:46:29,569
I modify it right the thing that it

828
00:46:25,159 --> 00:46:33,529
points to and so the idea behind C++ is

829
00:46:29,570 --> 00:46:36,350
casting was that because these things

830
00:46:33,530 --> 00:46:39,110
are different we want to provide you

831
00:46:36,349 --> 00:46:41,420
with the ability to be more specific

832
00:46:39,110 --> 00:46:44,950
about which kind of cast you were doing

833
00:46:41,420 --> 00:46:47,530
so that if you actually made a mistake

834
00:46:44,949 --> 00:46:51,169
like you weren't trying to truncate

835
00:46:47,530 --> 00:46:52,730
something you were just trying to change

836
00:46:51,170 --> 00:46:56,360
what the compiler thought the type was

837
00:46:52,730 --> 00:47:01,309
it could give you an error and say hey

838
00:46:56,360 --> 00:47:03,440
you were like let's say I did this right

839
00:47:01,309 --> 00:47:05,779
maybe all I was trying to do is convert

840
00:47:03,440 --> 00:47:08,630
it to signed but I forgot this value was

841
00:47:05,780 --> 00:47:12,280
64 bit so what I really wanted to do was

842
00:47:08,630 --> 00:47:12,280
I was trying to say something like this

843
00:47:17,889 --> 00:47:23,989
that's what I was trying to do right but

844
00:47:22,010 --> 00:47:26,030
what I actually did is converted design

845
00:47:23,989 --> 00:47:27,979
but also truncate the value which was

846
00:47:26,030 --> 00:47:31,040
not my intention so maybe I wanted a

847
00:47:27,980 --> 00:47:32,960
compiler error that said hey you

848
00:47:31,039 --> 00:47:35,929
accidentally truncated the value and you

849
00:47:32,960 --> 00:47:37,849
didn't mean to right so that's the idea

850
00:47:35,929 --> 00:47:40,789
behind the c++ cast as with everything

851
00:47:37,849 --> 00:47:42,739
else in c++ they mess them up and so

852
00:47:40,789 --> 00:47:45,739
they're not really i don't like them and

853
00:47:42,739 --> 00:47:47,359
i don't use them but the idea that you

854
00:47:45,739 --> 00:47:49,189
want more control over the cast is not a

855
00:47:47,360 --> 00:47:53,150
bad one and that's why you'll see me do

856
00:47:49,190 --> 00:47:54,470
stuff like this in my code like safe

857
00:47:53,150 --> 00:47:58,490
truncate and those sorts of things

858
00:47:54,469 --> 00:48:01,189
because conversions oftentimes should be

859
00:47:58,489 --> 00:48:03,289
made more explicit than just a cast so

860
00:48:01,190 --> 00:48:06,280
if you are doing cast that you don't

861
00:48:03,289 --> 00:48:09,980
necessarily feel like will always be

862
00:48:06,280 --> 00:48:12,320
rock solid and easy making conversion

863
00:48:09,980 --> 00:48:13,039
function is usually a good idea I don't

864
00:48:12,320 --> 00:48:15,500
recommend using

865
00:48:13,039 --> 00:48:20,059
c++ as casts but i do recommend

866
00:48:15,500 --> 00:48:22,010
potentially making your own now with c++

867
00:48:20,059 --> 00:48:24,710
is cast there's casts there's one more

868
00:48:22,010 --> 00:48:26,810
thing which we don't care about a hammer

869
00:48:24,710 --> 00:48:31,280
here but you might which is there's a

870
00:48:26,809 --> 00:48:32,509
thing called a dynamic cast right and so

871
00:48:31,280 --> 00:48:35,420
for those who don't know what is the

872
00:48:32,510 --> 00:48:37,700
original poster probably knew what this

873
00:48:35,420 --> 00:48:39,500
was but i'm just good mentioning it

874
00:48:37,699 --> 00:48:41,029
others thing called dynamic cast and

875
00:48:39,500 --> 00:48:43,449
what dynamic cast will do is that anti

876
00:48:41,030 --> 00:48:47,210
cast will actually create an exception

877
00:48:43,449 --> 00:48:49,219
or a zero I don't remember what the

878
00:48:47,210 --> 00:48:50,659
rules are for which of those two maybe

879
00:48:49,219 --> 00:48:53,689
you could control it I don't know I

880
00:48:50,659 --> 00:48:56,629
don't care I don't care at all about c++

881
00:48:53,690 --> 00:49:00,079
as you know but if you tried to cast

882
00:48:56,630 --> 00:49:02,930
something to another something so I've

883
00:49:00,079 --> 00:49:09,860
got a struct a and a struct I'd be you

884
00:49:02,929 --> 00:49:11,629
know something like this if I have a way

885
00:49:09,860 --> 00:49:15,430
to distinguish between these two so

886
00:49:11,630 --> 00:49:18,320
let's say that it's something like this

887
00:49:15,429 --> 00:49:21,319
so I've got a struct foo and I've got a

888
00:49:18,320 --> 00:49:27,430
bar oops and I've got a bar which is a

889
00:49:21,320 --> 00:49:27,430
foo if I then have one of these things

890
00:49:27,610 --> 00:49:34,400
that I'm working with here and I want to

891
00:49:32,059 --> 00:49:40,070
cast one of these things to a bar

892
00:49:34,400 --> 00:49:41,630
pointer right I don't really even

893
00:49:40,070 --> 00:49:45,380
remember the syntax for these two

894
00:49:41,630 --> 00:49:48,380
completely honest with you but if I

895
00:49:45,380 --> 00:49:51,650
wanted to cast this a that I have to a

896
00:49:48,380 --> 00:49:53,300
bar star if I use a dynamic cast and I'm

897
00:49:51,650 --> 00:49:56,240
in a situation where this thing has a

898
00:49:53,300 --> 00:50:03,830
virtual function so you know so it had a

899
00:49:56,239 --> 00:50:05,689
virtual table like so in the case where

900
00:50:03,829 --> 00:50:08,090
it had a virtual table it would use the

901
00:50:05,690 --> 00:50:13,010
runtime type information to determine

902
00:50:08,090 --> 00:50:15,590
whether it actually was a bar and if it

903
00:50:13,010 --> 00:50:17,720
was a bar it will give it back to me if

904
00:50:15,590 --> 00:50:20,570
it wasn't it will give me a zero or

905
00:50:17,719 --> 00:50:22,579
something like this like I said I don't

906
00:50:20,570 --> 00:50:25,269
care I so don't care about that stuff

907
00:50:22,579 --> 00:50:26,900
that I don't remember even the slightest

908
00:50:25,269 --> 00:50:29,838
specifics of how they

909
00:50:26,900 --> 00:50:32,358
works it's all really stupid and a waste

910
00:50:29,838 --> 00:50:33,769
of everyone's time but you should be

911
00:50:32,358 --> 00:50:36,139
aware of it that if for some reason

912
00:50:33,769 --> 00:50:38,750
you're using these things there is

913
00:50:36,139 --> 00:50:40,848
special behavior with dynamic cast that

914
00:50:38,750 --> 00:50:42,858
actually is going to look to see whether

915
00:50:40,849 --> 00:50:44,240
or not the thing that you have a point

916
00:50:42,858 --> 00:50:47,358
the thing that you're trying to cast

917
00:50:44,239 --> 00:50:48,828
actually has information in it created

918
00:50:47,358 --> 00:50:50,389
by the secrets of empire that can tell

919
00:50:48,829 --> 00:50:51,950
it whether that cast was possible and

920
00:50:50,389 --> 00:51:01,298
then the cast wasn't possible it will

921
00:50:51,949 --> 00:51:01,298
create a problem so so there you go

922
00:51:28,739 --> 00:51:33,608
cuber Caleb how exactly did they mess up

923
00:51:31,088 --> 00:51:35,170
casting in C++ well again they just

924
00:51:33,608 --> 00:51:36,759
introduced a bunch of business but they

925
00:51:35,170 --> 00:51:39,460
didn't actually cover all the cases so

926
00:51:36,760 --> 00:51:43,119
for example there is no cast from type

927
00:51:39,460 --> 00:51:45,639
to a lower type that you know has a loud

928
00:51:43,119 --> 00:51:48,130
assertion or something when the value

929
00:51:45,639 --> 00:51:51,190
was too big to do that cast so you still

930
00:51:48,130 --> 00:51:53,108
have to write it so all of the cast all

931
00:51:51,190 --> 00:51:54,880
of the conversion functions I used to

932
00:51:53,108 --> 00:51:58,509
write I still have to write pretty much

933
00:51:54,880 --> 00:52:01,358
we're C++ cast so it's like they added

934
00:51:58,510 --> 00:52:03,130
these couple cases that I guess

935
00:52:01,358 --> 00:52:05,108
sometimes you care about they're not

936
00:52:03,130 --> 00:52:07,660
even the ones I would usually care about

937
00:52:05,108 --> 00:52:10,088
so I never actually used them because I

938
00:52:07,659 --> 00:52:11,949
always have to actually use a conversion

939
00:52:10,088 --> 00:52:13,750
function if I actually want to put in an

940
00:52:11,949 --> 00:52:16,389
assertion or another appropriate thing

941
00:52:13,750 --> 00:52:18,010
there so they're really just kind of a

942
00:52:16,389 --> 00:52:19,960
waste of time it's just a lot of typing

943
00:52:18,010 --> 00:52:21,220
it's like a lot of extra typing that

944
00:52:19,960 --> 00:52:24,400
doesn't actually get me what I needed

945
00:52:21,219 --> 00:52:25,929
and so you know because I'd like most of

946
00:52:24,400 --> 00:52:27,910
us less things they don't actually give

947
00:52:25,929 --> 00:52:29,649
the real programmer what they actually

948
00:52:27,909 --> 00:52:31,328
need to do their job so you're still

949
00:52:29,650 --> 00:52:34,028
going to end up writing the the one that

950
00:52:31,329 --> 00:52:36,430
you used to write in pretty much every

951
00:52:34,028 --> 00:52:38,019
case you cared about right and there's a

952
00:52:36,429 --> 00:52:40,899
bunch of stuff like that dynamic cast

953
00:52:38,019 --> 00:52:42,969
the same way it's like i have x what I

954
00:52:40,900 --> 00:52:44,950
need to do discriminated unions this

955
00:52:42,969 --> 00:52:46,209
doesn't do it works with C++ entirety

956
00:52:44,949 --> 00:52:47,828
system that's the only thing it works

957
00:52:46,210 --> 00:52:49,990
with you can't program it to do

958
00:52:47,829 --> 00:52:51,339
something else I can't tell you to do

959
00:52:49,989 --> 00:52:53,858
that I can't tell you to have a dynamic

960
00:52:51,338 --> 00:52:56,469
cash check a type field to see whether

961
00:52:53,858 --> 00:52:58,088
it matches right so again completely

962
00:52:56,469 --> 00:53:00,009
useless right it's like it doesn't give

963
00:52:58,088 --> 00:53:02,769
the primary power it means you have to

964
00:53:00,010 --> 00:53:04,270
use darkness stroustrup stupid idea of

965
00:53:02,769 --> 00:53:06,788
how programs are structured to get any

966
00:53:04,269 --> 00:53:08,409
benefit out of it right and so again you

967
00:53:06,789 --> 00:53:10,869
end up you never use any of that you

968
00:53:08,409 --> 00:53:12,879
always write your own one of whatever

969
00:53:10,869 --> 00:53:15,099
the thing was that the C++ thing was

970
00:53:12,880 --> 00:53:21,880
trying to do because you actually have

971
00:53:15,099 --> 00:53:23,710
to make it work for real right dynamic

972
00:53:21,880 --> 00:53:25,798
asset returns 0 if it fails yeah that's

973
00:53:23,710 --> 00:53:28,210
what I thought I couldn't remember I

974
00:53:25,798 --> 00:53:29,858
thought there was something like maybe

975
00:53:28,210 --> 00:53:30,760
originally when it was proposed it was

976
00:53:29,858 --> 00:53:32,619
going to throw an exception saying there

977
00:53:30,760 --> 00:53:34,839
was like there's some exception based on

978
00:53:32,619 --> 00:53:39,880
an a cast thing I don't know what it was

979
00:53:34,838 --> 00:53:42,130
i I really don't remember it's the debug

980
00:53:39,880 --> 00:53:42,430
view for bitmaps working again I don't

981
00:53:42,130 --> 00:53:45,490
think

982
00:53:42,429 --> 00:53:47,379
because we didn't debug it right i don't

983
00:53:45,489 --> 00:53:50,858
i don't feel like we have done that yet

984
00:53:47,380 --> 00:53:53,318
I could be wrong but I'm pretty sure we

985
00:53:50,858 --> 00:53:59,500
never touched it so if it shouldn't be

986
00:53:53,318 --> 00:54:02,818
where I can't imagine that it is but we

987
00:53:59,500 --> 00:54:06,068
can check yeah there's nothing in there

988
00:54:02,818 --> 00:54:07,568
I i imagine it's probably quite simple

989
00:54:06,068 --> 00:54:09,250
it's just like with the profiler we just

990
00:54:07,568 --> 00:54:10,889
have to go in there and just finish it

991
00:54:09,250 --> 00:54:13,449
up because it's probably just a little

992
00:54:10,889 --> 00:54:15,670
thing we change like probably if zeroed

993
00:54:13,449 --> 00:54:17,078
it out or something for streaming

994
00:54:15,670 --> 00:54:19,300
evolution is there a library worth to

995
00:54:17,079 --> 00:54:21,339
use in C C++ I could do it with Python

996
00:54:19,300 --> 00:54:24,550
but i'd like to see it's a good question

997
00:54:21,338 --> 00:54:26,980
um I don't know there might be it would

998
00:54:24,550 --> 00:54:30,099
be great if there was a well-designed c

999
00:54:26,980 --> 00:54:32,519
string library but I I honestly just

1000
00:54:30,099 --> 00:54:32,519
don't know

1001
00:54:57,199 --> 00:55:00,839
spending a lot of time in debug tools

1002
00:54:59,099 --> 00:55:05,279
before you need them is it going to be

1003
00:55:00,840 --> 00:55:07,530
worth it I disagree so I think I covered

1004
00:55:05,280 --> 00:55:10,950
this pretty pretty thoroughly when we

1005
00:55:07,530 --> 00:55:12,900
started which as you said I'm spending

1006
00:55:10,949 --> 00:55:14,909
the lot of time of debug tools before I

1007
00:55:12,900 --> 00:55:17,730
need them but we already saw that I had

1008
00:55:14,909 --> 00:55:19,440
fact did need them right no sooner did

1009
00:55:17,730 --> 00:55:21,300
we finish getting the profiler stuff up

1010
00:55:19,440 --> 00:55:24,470
and running that it became completely

1011
00:55:21,300 --> 00:55:29,580
obvious that our xbox controller code

1012
00:55:24,469 --> 00:55:32,789
was taking too much time right and we we

1013
00:55:29,579 --> 00:55:34,860
already passed that and so the problem

1014
00:55:32,789 --> 00:55:37,469
with debug code is you have no idea

1015
00:55:34,860 --> 00:55:39,300
whether you need it or not right so

1016
00:55:37,469 --> 00:55:40,559
saying before you need them suggests

1017
00:55:39,300 --> 00:55:43,440
that you actually know whether you need

1018
00:55:40,559 --> 00:55:44,820
them and you never do the chances is

1019
00:55:43,440 --> 00:55:46,559
almost one hundred percent that you do

1020
00:55:44,820 --> 00:55:47,519
because something like that xbox

1021
00:55:46,559 --> 00:55:49,440
controller thing will go completely

1022
00:55:47,519 --> 00:55:52,980
unnoticed and then there's half a

1023
00:55:49,440 --> 00:55:54,980
million cycles down the drain that well

1024
00:55:52,980 --> 00:55:56,969
no two million cycles down the drain

1025
00:55:54,980 --> 00:56:01,380
that you never would have known were

1026
00:55:56,969 --> 00:56:02,819
missing right so i think we exactly

1027
00:56:01,380 --> 00:56:05,190
needed them now we could have actually

1028
00:56:02,820 --> 00:56:06,800
built them way back when but i felt like

1029
00:56:05,190 --> 00:56:09,269
it was important to have threading

1030
00:56:06,800 --> 00:56:10,350
rendering and all that stuff up and

1031
00:56:09,269 --> 00:56:12,030
running because otherwise how do you

1032
00:56:10,349 --> 00:56:13,110
build the debug system right if you

1033
00:56:12,030 --> 00:56:14,160
don't have threading and you don't know

1034
00:56:13,110 --> 00:56:15,750
whether your devo system actually works

1035
00:56:14,159 --> 00:56:16,649
with your threading or not if you don't

1036
00:56:15,750 --> 00:56:19,320
have rendering in you can't display

1037
00:56:16,650 --> 00:56:21,180
anything you know what I mean so we had

1038
00:56:19,320 --> 00:56:24,269
to get to a point where the game was up

1039
00:56:21,179 --> 00:56:25,649
enough to actually put debug code in but

1040
00:56:24,269 --> 00:56:27,929
it's absolutely worth it now as for the

1041
00:56:25,650 --> 00:56:30,329
amount of time it's taken to do like I

1042
00:56:27,929 --> 00:56:31,230
said with that I decided to let this be

1043
00:56:30,329 --> 00:56:32,699
more of an architectural expression

1044
00:56:31,230 --> 00:56:35,429
because I wanted to show people how to

1045
00:56:32,699 --> 00:56:37,139
do that so does it normally take this

1046
00:56:35,429 --> 00:56:39,029
long ago you could do my system probably

1047
00:56:37,139 --> 00:56:40,259
not because if you'd already done one

1048
00:56:39,030 --> 00:56:41,730
before and you just decide to do one

1049
00:56:40,260 --> 00:56:45,090
exactly the way that you had in the past

1050
00:56:41,730 --> 00:56:47,190
you would just do it and you know if you

1051
00:56:45,090 --> 00:56:48,390
wanted to write we've got now like if I

1052
00:56:47,190 --> 00:56:49,769
wanted to rewrite what we had now it

1053
00:56:48,389 --> 00:56:52,289
would only take me like a day or two

1054
00:56:49,769 --> 00:56:54,809
right because I know exactly how I

1055
00:56:52,289 --> 00:56:57,090
decided everything should work and you

1056
00:56:54,809 --> 00:56:58,920
don't have to explore it but exploration

1057
00:56:57,090 --> 00:57:01,100
stuff takes a long time so I would say

1058
00:56:58,920 --> 00:57:03,630
don't count that against debug code

1059
00:57:01,099 --> 00:57:06,619
anything that we decide to explore like

1060
00:57:03,630 --> 00:57:08,820
this will take 50 hours or more right I

1061
00:57:06,619 --> 00:57:10,639
know how long he bugs taken but probably

1062
00:57:08,820 --> 00:57:12,809
60 hours something like

1063
00:57:10,639 --> 00:57:13,739
which one handmade hero takes a huge

1064
00:57:12,809 --> 00:57:15,599
amount of time because we don't we do

1065
00:57:13,739 --> 00:57:18,149
one hour a day but in the real world

1066
00:57:15,599 --> 00:57:19,528
remember that's not that long right even

1067
00:57:18,150 --> 00:57:20,910
if we spent a hundred hours on debug

1068
00:57:19,528 --> 00:57:24,230
code which might be the total at the end

1069
00:57:20,909 --> 00:57:27,538
of the day that's two three weeks of

1070
00:57:24,230 --> 00:57:28,798
programming in the real world even if

1071
00:57:27,539 --> 00:57:30,270
you didn't get faster because I'm not

1072
00:57:28,798 --> 00:57:32,338
talking right which you should be a lot

1073
00:57:30,269 --> 00:57:34,349
faster if you're not talking all the

1074
00:57:32,338 --> 00:57:35,940
time and you can do it back to back so

1075
00:57:34,349 --> 00:57:37,260
you don't have to page in and out what

1076
00:57:35,940 --> 00:57:41,579
you're working on which of course is

1077
00:57:37,260 --> 00:57:42,990
also a problem so really nothing in

1078
00:57:41,579 --> 00:57:45,869
handmade here I mean we've only wet

1079
00:57:42,989 --> 00:57:48,000
we're day 22 250 eight hours is like no

1080
00:57:45,869 --> 00:57:49,920
hours that's like six weeks of

1081
00:57:48,000 --> 00:57:52,170
programming it's like you haven't even

1082
00:57:49,920 --> 00:57:54,960
started your project yet and we have all

1083
00:57:52,170 --> 00:57:58,139
the stuff we have so again like nothing

1084
00:57:54,960 --> 00:58:01,798
that we've done in this code base took a

1085
00:57:58,139 --> 00:58:07,980
long time all of it is short if that

1086
00:58:01,798 --> 00:58:09,480
makes sense Cuba Caleb speaking of

1087
00:58:07,980 --> 00:58:10,619
string libraries what kinds of things do

1088
00:58:09,480 --> 00:58:14,519
you think should be in a good string

1089
00:58:10,619 --> 00:58:19,289
library you know I got to be asked I'm

1090
00:58:14,519 --> 00:58:22,219
probably the wrong one to ask uh I don't

1091
00:58:19,289 --> 00:58:25,200
do a lot of string manipulation you know

1092
00:58:22,219 --> 00:58:26,969
it's not my strong suit because I just

1093
00:58:25,199 --> 00:58:29,730
it's not the kind of code I tend to

1094
00:58:26,969 --> 00:58:32,459
write I probably should sit down at some

1095
00:58:29,730 --> 00:58:33,389
point think about that because I

1096
00:58:32,460 --> 00:58:34,858
probably should just write a string a

1097
00:58:33,389 --> 00:58:36,538
library for myself at some point that I

1098
00:58:34,858 --> 00:58:45,150
just use and it does everything that I

1099
00:58:36,539 --> 00:58:50,160
ever could want but I don't know so yeah

1100
00:58:45,150 --> 00:58:51,420
like not sure I think honestly the thing

1101
00:58:50,159 --> 00:58:52,980
that I would want out of a good string

1102
00:58:51,420 --> 00:58:54,990
library that nobody's string libraries

1103
00:58:52,980 --> 00:58:57,719
ever seem to care about is actually

1104
00:58:54,989 --> 00:59:00,118
really great performance so like for

1105
00:58:57,719 --> 00:59:03,528
example don't allocate strings and

1106
00:59:00,119 --> 00:59:06,930
deallocate them all the time you know

1107
00:59:03,528 --> 00:59:08,460
try to work with try to do things in

1108
00:59:06,929 --> 00:59:09,719
temp buffers really efficiently so

1109
00:59:08,460 --> 00:59:11,880
you're not constantly copying things

1110
00:59:09,719 --> 00:59:13,699
around or allocating tons of memory and

1111
00:59:11,880 --> 00:59:16,470
chasing tons of pointers for no reason

1112
00:59:13,699 --> 00:59:17,969
which a lot of C string libraries C+

1113
00:59:16,469 --> 00:59:20,088
flustering libraries are disastrous that

1114
00:59:17,969 --> 00:59:20,088
way

1115
00:59:21,478 --> 00:59:28,528
so that'd be one thing that I would like

1116
00:59:29,159 --> 00:59:32,308
but yeah

1117
00:59:35,829 --> 00:59:41,980
did ince about just a hand banana hero

1118
00:59:38,710 --> 00:59:45,840
you rock inside bot is amazing it's

1119
00:59:41,980 --> 00:59:45,840
about i think i would like to quote

1120
00:59:46,170 --> 00:59:53,289
andrew chronister here and just say that

1121
00:59:48,929 --> 00:59:55,089
in sabah is a national treasure in sir

1122
00:59:53,289 --> 01:00:02,500
that's a national treasure that's just

1123
00:59:55,090 --> 01:00:03,880
this is true keeper caleb does using

1124
01:00:02,500 --> 01:00:06,280
virtual Alec and reserving a lot of

1125
01:00:03,880 --> 01:00:07,390
memory upfront count I only really care

1126
01:00:06,280 --> 01:00:10,900
about performance at this point I think

1127
01:00:07,389 --> 01:00:13,119
memory ranges on 64-bit are very cheap

1128
01:00:10,900 --> 01:00:14,440
and so if you can get really great

1129
01:00:13,119 --> 01:00:16,690
performance out of your string library

1130
01:00:14,440 --> 01:00:20,170
by just doing a big virtual Alec and

1131
01:00:16,690 --> 01:00:22,690
going nuts great the only thing that I

1132
01:00:20,170 --> 01:00:24,070
would point out is using a ton of memory

1133
01:00:22,690 --> 01:00:26,110
probably means your performance will be

1134
01:00:24,070 --> 01:00:28,240
bad because you'll be blowing out the

1135
01:00:26,110 --> 01:00:31,750
cash all the time so you can't just say

1136
01:00:28,239 --> 01:00:32,709
well I'm going to just never reuse any

1137
01:00:31,750 --> 01:00:34,480
memory in your string library

1138
01:00:32,710 --> 01:00:36,190
potentially because if you start getting

1139
01:00:34,480 --> 01:00:38,349
big string loads that might actually put

1140
01:00:36,190 --> 01:00:40,179
so there's a trade-off there but yet if

1141
01:00:38,349 --> 01:00:42,809
you can make sure that that's not

1142
01:00:40,179 --> 01:00:46,449
happening so you're keeping your cash

1143
01:00:42,809 --> 01:00:48,820
utilization good then I'd say yeah go

1144
01:00:46,449 --> 01:00:54,009
nuts reserve a ton of memory and just go

1145
01:00:48,820 --> 01:00:56,950
nuts not a problem at all especially

1146
01:00:54,010 --> 01:00:59,860
because a lot of the time string

1147
01:00:56,949 --> 01:01:01,419
processing stuff is an offline thing and

1148
01:00:59,860 --> 01:01:02,740
so especially if you were talking about

1149
01:01:01,420 --> 01:01:04,809
string library that was optimized for

1150
01:01:02,739 --> 01:01:05,799
offline processing then you don't care

1151
01:01:04,809 --> 01:01:06,880
at all because we're not going to be

1152
01:01:05,800 --> 01:01:08,890
running on like a phone or something

1153
01:01:06,880 --> 01:01:11,250
where like virtual alkene might not work

1154
01:01:08,889 --> 01:01:11,250
so well

1155
01:01:15,599 --> 01:01:19,329
kubrick killable I meant using mem

1156
01:01:17,739 --> 01:01:21,239
reserved than mem commits that you can

1157
01:01:19,329 --> 01:01:23,710
append quickly without the copy well

1158
01:01:21,239 --> 01:01:24,518
good luck with that though because that

1159
01:01:23,710 --> 01:01:26,349
means you're going to have to call

1160
01:01:24,518 --> 01:01:31,558
virtual Alec once for every string and

1161
01:01:26,349 --> 01:01:31,559
that's gonna be slow right

1162
01:01:39,260 --> 01:01:47,790
all right it's time for me to go eat

1163
01:01:43,260 --> 01:01:49,140
dinner I'm really happy with how this

1164
01:01:47,789 --> 01:01:52,588
debug system turned out I got to be

1165
01:01:49,139 --> 01:01:58,190
honest with you it's going to be pretty

1166
01:01:52,588 --> 01:02:05,519
pretty awesome yeah what did I do I

1167
01:01:58,190 --> 01:02:07,670
actually know what I changed yeah all

1168
01:02:05,519 --> 01:02:07,670
right

1169
01:02:08,610 --> 01:02:11,760
thank you everyone for joining me for

1170
01:02:10,500 --> 01:02:12,900
another episode of handmade hero it's

1171
01:02:11,760 --> 01:02:14,820
been a pleasure coding with you as

1172
01:02:12,900 --> 01:02:16,920
always if you would like to follow along

1173
01:02:14,820 --> 01:02:18,420
with the code at home you can always

1174
01:02:16,920 --> 01:02:22,619
pro2 the game on handmade here at work

1175
01:02:18,420 --> 01:02:23,610
and it comes with the source code do

1176
01:02:22,619 --> 01:02:25,679
that right here with this little button

1177
01:02:23,610 --> 01:02:27,450
this is the forums button if you click

1178
01:02:25,679 --> 01:02:28,739
on that you will go to our forums where

1179
01:02:27,449 --> 01:02:30,569
you can ask questions about the series

1180
01:02:28,739 --> 01:02:32,069
and basically what it means is Martin's

1181
01:02:30,570 --> 01:02:33,420
mosaico will answer your question

1182
01:02:32,070 --> 01:02:36,740
because he is a beast and answers

1183
01:02:33,420 --> 01:02:39,599
questions so quickly the guy should have

1184
01:02:36,739 --> 01:02:42,809
his own programming advice site or

1185
01:02:39,599 --> 01:02:45,150
something I don't even know but yeah or

1186
01:02:42,809 --> 01:02:46,320
a patreon that's like pay me because I

1187
01:02:45,150 --> 01:02:47,309
answer all your questions which is

1188
01:02:46,320 --> 01:02:48,720
really probably sure what should happen

1189
01:02:47,309 --> 01:02:51,090
maybe we should just set up a martin's

1190
01:02:48,719 --> 01:02:53,939
fund we also have patreon page want to

1191
01:02:51,090 --> 01:02:56,010
support the video series which always

1192
01:02:53,940 --> 01:02:57,869
remains free to the public we have a

1193
01:02:56,010 --> 01:03:03,630
tweet bot which treats the schedule at

1194
01:02:57,869 --> 01:03:09,599
you and that is really it I haven't much

1195
01:03:03,630 --> 01:03:12,619
more to say at the risk of jinxing it I

1196
01:03:09,599 --> 01:03:15,779
will also say that I am hard at work on

1197
01:03:12,619 --> 01:03:18,509
the planning for the next handmade con

1198
01:03:15,780 --> 01:03:20,730
so as soon as I have a little bit more

1199
01:03:18,510 --> 01:03:23,340
information about that i will be sharing

1200
01:03:20,730 --> 01:03:25,320
that with you but it's still going to be

1201
01:03:23,340 --> 01:03:28,470
a cup few more weeks before i think we

1202
01:03:25,320 --> 01:03:32,039
get everything locked down but don't

1203
01:03:28,469 --> 01:03:35,069
fear those of you who thought handmade

1204
01:03:32,039 --> 01:03:38,610
Con 2015 was awesome and are wanting a

1205
01:03:35,070 --> 01:03:43,970
handmade con to happen again because it

1206
01:03:38,610 --> 01:03:43,970
quite probably will be happening again

1207
01:03:44,119 --> 01:03:52,079
that's about it anyway that's it for

1208
01:03:48,539 --> 01:03:53,340
today if you want to use the editor that

1209
01:03:52,079 --> 01:03:55,590
we use on the stream I also been

1210
01:03:53,340 --> 01:03:59,610
mentioning this lately don't forget you

1211
01:03:55,590 --> 01:04:02,250
can get in early with that as well mr.

1212
01:03:59,610 --> 01:04:04,440
fourth dimension from the twitch stream

1213
01:04:02,250 --> 01:04:07,380
is actually making the editor custom

1214
01:04:04,440 --> 01:04:09,300
editor that we use on handmade hero and

1215
01:04:07,380 --> 01:04:10,890
it's pretty awesome at this point so

1216
01:04:09,300 --> 01:04:12,539
check that out here if you want you can

1217
01:04:10,889 --> 01:04:16,559
just type for kodir into Google + and

1218
01:04:12,539 --> 01:04:19,559
that'll do it we are using the five

1219
01:04:16,559 --> 01:04:20,880
dollar tier one here so highly recommend

1220
01:04:19,559 --> 01:04:21,980
that if you want to use same editor

1221
01:04:20,880 --> 01:04:25,130
we're using

1222
01:04:21,980 --> 01:04:27,769
and my customization file for it if you

1223
01:04:25,130 --> 01:04:30,530
want that is included in handmade here

1224
01:04:27,769 --> 01:04:33,320
as well that's about it everyone I will

1225
01:04:30,530 --> 01:04:37,160
see you back here tomorrow for some

1226
01:04:33,320 --> 01:04:39,920
profileview prettying up and feature a

1227
01:04:37,159 --> 01:04:42,769
fying which is going to be awesome now

1228
01:04:39,920 --> 01:04:44,630
that we know that our bugs are fixed so

1229
01:04:42,769 --> 01:04:45,858
hope you'll join me for that until then

1230
01:04:44,630 --> 01:04:49,358
have fun programming I'll see you guys

1231
01:04:45,858 --> 01:04:49,358
on the internet take it easy everyone

