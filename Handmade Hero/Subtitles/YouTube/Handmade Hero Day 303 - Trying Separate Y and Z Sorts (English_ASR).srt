1
00:00:02,779 --> 00:00:07,080
hello everyone and welcome back to

2
00:00:05,459 --> 00:00:11,129
handmade here or the show Rico to

3
00:00:07,080 --> 00:00:13,320
complete game live on stream we have

4
00:00:11,130 --> 00:00:15,839
been gone for two weeks because I

5
00:00:13,320 --> 00:00:17,730
accidentally broke the microphone that's

6
00:00:15,839 --> 00:00:21,210
there's not really a lot more complexity

7
00:00:17,730 --> 00:00:25,289
to it than that but I ordered a new one

8
00:00:21,210 --> 00:00:26,969
and it even comes with the little little

9
00:00:25,289 --> 00:00:31,199
bag of replacement parts and everything

10
00:00:26,969 --> 00:00:34,079
just like the old one did so yeah so we

11
00:00:31,199 --> 00:00:36,059
should be good to go now but of course

12
00:00:34,079 --> 00:00:37,739
that means it's been two weeks without

13
00:00:36,058 --> 00:00:40,019
us working on this problem so the

14
00:00:37,738 --> 00:00:42,058
problem that we had when we were last

15
00:00:40,020 --> 00:00:44,489
looking at our code base is still there

16
00:00:42,058 --> 00:00:48,419
no one has magically come and fixed it

17
00:00:44,488 --> 00:00:51,000
for us which is very unfortunate and you

18
00:00:48,420 --> 00:00:53,670
know what are you gonna do I wish we had

19
00:00:51,000 --> 00:00:55,049
some little magical code fairy who would

20
00:00:53,670 --> 00:00:56,850
come and sprinkle little code dust on

21
00:00:55,049 --> 00:00:58,799
our code and then we came back it's like

22
00:00:56,850 --> 00:01:01,320
oh hey it already solved all the

23
00:00:58,799 --> 00:01:02,878
problems for us what do you know but

24
00:01:01,320 --> 00:01:04,228
unfortunately we have to be our own code

25
00:01:02,878 --> 00:01:07,039
fairy and we have to bring our own code

26
00:01:04,228 --> 00:01:12,060
dust and do our own code sprinkling so I

27
00:01:07,040 --> 00:01:16,409
guess we'd better start sprinkling I'm

28
00:01:12,060 --> 00:01:19,710
going to grab my keyboard so today is

29
00:01:16,409 --> 00:01:21,150
day 303 and where we left off we were

30
00:01:19,709 --> 00:01:23,789
trying to figure out exactly what we

31
00:01:21,150 --> 00:01:26,009
were going to do with sprite sorting and

32
00:01:23,790 --> 00:01:29,130
I had just sort of finished determining

33
00:01:26,009 --> 00:01:32,310
that you could not really do anything

34
00:01:29,129 --> 00:01:33,929
with a uniform sort that you would at

35
00:01:32,310 --> 00:01:35,579
least need to do something more

36
00:01:33,930 --> 00:01:36,900
complicated than a uniform sort and we

37
00:01:35,578 --> 00:01:38,219
sort of started to sketch out what it

38
00:01:36,900 --> 00:01:40,350
might look like if we did a full graph

39
00:01:38,219 --> 00:01:42,478
sort I'm not sure we actually need a

40
00:01:40,349 --> 00:01:45,319
full graph sort certainly on the forums

41
00:01:42,478 --> 00:01:48,509
while I was away people had sort of

42
00:01:45,319 --> 00:01:49,978
posted various suggestions and there's a

43
00:01:48,509 --> 00:01:54,140
couple different ways we can go with it

44
00:01:49,978 --> 00:01:54,140
it's unclear which way is the right way

45
00:01:56,939 --> 00:02:05,759
one thing I do think is true though from

46
00:02:01,439 --> 00:02:08,219
what I can you know from sort of my gut

47
00:02:05,760 --> 00:02:10,830
instinct is one thing that I don't think

48
00:02:08,219 --> 00:02:12,000
is a good idea Izzy buffering and the

49
00:02:10,830 --> 00:02:13,950
reason I don't think Izzy buffering is a

50
00:02:12,000 --> 00:02:16,050
good idea is because I think we're going

51
00:02:13,949 --> 00:02:18,899
to have very semantic sorts of stuff

52
00:02:16,050 --> 00:02:21,150
that we need to do such as keep the head

53
00:02:18,900 --> 00:02:22,500
of the hero on in front of the body of

54
00:02:21,150 --> 00:02:24,180
the hero even though it should

55
00:02:22,500 --> 00:02:27,090
technically be behind it or other stuff

56
00:02:24,180 --> 00:02:29,400
like this and I feel like if I go with a

57
00:02:27,090 --> 00:02:31,050
z-buffer approach I'm constantly going

58
00:02:29,400 --> 00:02:33,360
to have to fight the z-buffer to make

59
00:02:31,050 --> 00:02:36,000
these things happen and I don't know

60
00:02:33,360 --> 00:02:37,500
that I really want to do that so my hope

61
00:02:36,000 --> 00:02:38,550
is we can do a solution that isn't

62
00:02:37,500 --> 00:02:39,900
z-buffer because I feel like that's

63
00:02:38,550 --> 00:02:41,100
going to be a little bit touchy and it's

64
00:02:39,900 --> 00:02:43,260
twiki as all the rest of these things

65
00:02:41,099 --> 00:02:44,840
are I feel like they'll be less twiki

66
00:02:43,259 --> 00:02:48,780
than trying to fight with the z-buffer

67
00:02:44,840 --> 00:02:50,099
that's my feeling on it anyway and Z

68
00:02:48,780 --> 00:02:52,500
buffer is great when you have real 3d

69
00:02:50,099 --> 00:02:53,909
stuff it's not so good when you have to

70
00:02:52,500 --> 00:02:58,830
do stuff you got to kind of come up with

71
00:02:53,909 --> 00:03:01,500
you know sort of lots of little fake

72
00:02:58,830 --> 00:03:02,969
faker ease fake tricks to try and make

73
00:03:01,500 --> 00:03:05,400
it to the z-buffer ends up doing what

74
00:03:02,969 --> 00:03:07,500
you want to do and doesn't do things you

75
00:03:05,400 --> 00:03:09,330
don't want it to do which is hard when

76
00:03:07,500 --> 00:03:11,819
you don't have real 3d stuff that you're

77
00:03:09,330 --> 00:03:16,590
trying to actual shapes that you know

78
00:03:11,819 --> 00:03:22,680
make the z-buffer work correctly so what

79
00:03:16,590 --> 00:03:25,860
we have and we'll have to see where we

80
00:03:22,680 --> 00:03:32,069
left this here let's see here handmade

81
00:03:25,860 --> 00:03:34,500
food what we have in our renderer and I

82
00:03:32,069 --> 00:03:36,479
don't know where I left it I probably

83
00:03:34,500 --> 00:03:38,039
left it in the sort routine no you know

84
00:03:36,479 --> 00:03:40,619
what I should probably load the project

85
00:03:38,039 --> 00:03:46,199
file if I'm going to work on more than

86
00:03:40,620 --> 00:03:48,420
one thing or not I I forgot that's some

87
00:03:46,199 --> 00:03:50,069
something that I have to do I have to

88
00:03:48,419 --> 00:03:52,139
upgrade to the new for kodir I'm a few

89
00:03:50,069 --> 00:03:56,780
versions behind on this machine there's

90
00:03:52,139 --> 00:04:01,169
been a lot of bug fixes anyway so i

91
00:03:56,780 --> 00:04:02,550
believe it was in the sorting code where

92
00:04:01,169 --> 00:04:03,958
I left it down at the bottom here yeah

93
00:04:02,550 --> 00:04:05,640
you can kind of see that I started to

94
00:04:03,959 --> 00:04:10,740
sort of talk about putting the sprite

95
00:04:05,639 --> 00:04:12,449
graph a situation here so one thing that

96
00:04:10,740 --> 00:04:13,860
a quarter Tron from the chat had

97
00:04:12,449 --> 00:04:15,959
suggested he had played around with it

98
00:04:13,860 --> 00:04:19,489
himself on it you know doing his own

99
00:04:15,960 --> 00:04:23,370
sort of research on it he was suggesting

100
00:04:19,488 --> 00:04:25,859
that we do a sort of an inter leave

101
00:04:23,370 --> 00:04:28,530
where we sort all of the Z sprites

102
00:04:25,860 --> 00:04:30,900
because we know that those can be sorted

103
00:04:28,529 --> 00:04:32,339
correctly and then we sort all of the Y

104
00:04:30,899 --> 00:04:34,589
sprites because we know that those can

105
00:04:32,339 --> 00:04:38,159
be sorted correctly and then we merge

106
00:04:34,589 --> 00:04:40,829
those together and I haven't really

107
00:04:38,160 --> 00:04:44,220
thought through why that would solve

108
00:04:40,829 --> 00:04:45,779
problems or not there are some reasons I

109
00:04:44,220 --> 00:04:47,640
can think of why it might solve problems

110
00:04:45,779 --> 00:04:49,739
but I haven't really necessarily

111
00:04:47,639 --> 00:04:54,620
convinced myself that it would be

112
00:04:49,740 --> 00:04:54,620
correct necessarily i also don't know

113
00:04:54,980 --> 00:05:02,220
people were suggesting potentially that

114
00:04:58,500 --> 00:05:04,259
we could do sort of a poor man's BSP by

115
00:05:02,220 --> 00:05:05,790
using an insertion sort obviously an

116
00:05:04,259 --> 00:05:06,959
insertion sort is a little bit different

117
00:05:05,790 --> 00:05:10,260
than the kind of sort that we're using

118
00:05:06,959 --> 00:05:13,439
here where you know you compare items

119
00:05:10,259 --> 00:05:15,120
against each other and you really only

120
00:05:13,439 --> 00:05:17,610
do that comparison at very specific

121
00:05:15,120 --> 00:05:20,850
times and insertion sort works more like

122
00:05:17,610 --> 00:05:22,770
a tree where you always sort of test the

123
00:05:20,850 --> 00:05:25,410
you know going down a binary tree you

124
00:05:22,769 --> 00:05:27,149
test each individual thing and try to

125
00:05:25,410 --> 00:05:29,550
find the place where it slots in and

126
00:05:27,149 --> 00:05:32,489
because you're doing that every time you

127
00:05:29,550 --> 00:05:34,319
end up sort of essentially buildings you

128
00:05:32,490 --> 00:05:36,650
know what would end up being sort of a

129
00:05:34,319 --> 00:05:39,300
binary space partitioning type of tree

130
00:05:36,649 --> 00:05:41,219
for the data that's coming in and so we

131
00:05:39,300 --> 00:05:43,110
might be able to leverage that in order

132
00:05:41,220 --> 00:05:45,060
to get the sort working more properly

133
00:05:43,110 --> 00:05:47,280
now one of the things I think might be

134
00:05:45,060 --> 00:05:50,129
kind of problematic about that obviously

135
00:05:47,279 --> 00:05:52,019
is how we would keep that balanced

136
00:05:50,129 --> 00:05:54,439
properly because I don't know that it

137
00:05:52,019 --> 00:05:56,609
that it works for you really you know I

138
00:05:54,439 --> 00:05:57,899
you know you end up in an N squared

139
00:05:56,610 --> 00:06:00,830
scenario if you don't have some way of

140
00:05:57,899 --> 00:06:00,829
balancing that tree

141
00:06:05,949 --> 00:06:11,000
so that would be you know something that

142
00:06:08,870 --> 00:06:13,639
we would have to take into account if we

143
00:06:11,000 --> 00:06:16,160
were going to go that route now

144
00:06:13,639 --> 00:06:17,840
obviously it's very easy to do the

145
00:06:16,160 --> 00:06:19,400
solution the quarter tron was suggesting

146
00:06:17,839 --> 00:06:24,579
but the thing that I just don't know is

147
00:06:19,399 --> 00:06:26,870
I'm not sure whether that solution is a

148
00:06:24,579 --> 00:06:29,209
solves the problems that we have or not

149
00:06:26,870 --> 00:06:32,800
and just to make it a little clearer I

150
00:06:29,209 --> 00:06:37,609
can pop over to the current Milton

151
00:06:32,800 --> 00:06:44,449
dashboard over here where where is that

152
00:06:37,610 --> 00:06:48,050
that's in w Milton I have not updated to

153
00:06:44,449 --> 00:06:56,360
the latest Milton yet I got to sit here

154
00:06:48,050 --> 00:06:59,590
I have to do that sometime soon anyway

155
00:06:56,360 --> 00:06:59,590
what day is today

156
00:07:04,718 --> 00:07:11,868
so what this solution essentially looks

157
00:07:09,019 --> 00:07:13,998
like was you know okay we know that we

158
00:07:11,869 --> 00:07:16,519
have sprites that are sort of lying flat

159
00:07:13,999 --> 00:07:18,769
on the ground right and we don't know

160
00:07:16,519 --> 00:07:20,629
what hot tight they're at right they can

161
00:07:18,769 --> 00:07:23,119
be different heights but we know that

162
00:07:20,629 --> 00:07:29,119
they always point along the z-axis and

163
00:07:23,119 --> 00:07:31,279
we called those RZ sprites right and

164
00:07:29,119 --> 00:07:33,619
then we had other kinds which were

165
00:07:31,278 --> 00:07:35,749
upright you know they were facing you

166
00:07:33,619 --> 00:07:37,159
know along the y-axis and I guess if

167
00:07:35,749 --> 00:07:38,838
we're facing sort of more this whale

168
00:07:37,158 --> 00:07:41,808
I'll draw them more like this right

169
00:07:38,838 --> 00:07:46,868
there sort of facing towards us and

170
00:07:41,809 --> 00:07:50,889
those are our Y sprites now what we know

171
00:07:46,869 --> 00:07:54,199
is that if we only had these rights

172
00:07:50,889 --> 00:07:57,528
right if that's all we had then

173
00:07:54,199 --> 00:07:59,718
obviously we would we don't handle the

174
00:07:57,528 --> 00:08:02,538
case of interpenetrating sprites right

175
00:07:59,718 --> 00:08:04,879
so the sprites cannot be on top they

176
00:08:02,538 --> 00:08:07,278
cannot intersect each other so what that

177
00:08:04,879 --> 00:08:10,129
means is pretty much no matter what

178
00:08:07,278 --> 00:08:13,610
happens the Z sprites could be sorted in

179
00:08:10,129 --> 00:08:15,289
z I believe right because if you ever

180
00:08:13,610 --> 00:08:17,838
have a case where there's you know

181
00:08:15,288 --> 00:08:20,628
sprites that are like in this sort of

182
00:08:17,838 --> 00:08:23,838
configuration I don't think there's any

183
00:08:20,629 --> 00:08:25,939
way because the Z is is a constant thing

184
00:08:23,838 --> 00:08:27,649
I don't think there's any way unless

185
00:08:25,939 --> 00:08:29,749
this is on top of this that you would

186
00:08:27,649 --> 00:08:32,599
ever want to see this first so I believe

187
00:08:29,749 --> 00:08:34,879
if all you had ever was these rights you

188
00:08:32,599 --> 00:08:36,829
could sort them exclusively by Z I don't

189
00:08:34,879 --> 00:08:44,778
know that you need to sort them by Y at

190
00:08:36,828 --> 00:08:48,318
all I have to think about that but I'm

191
00:08:44,778 --> 00:08:49,909
pretty sure you don't because even for

192
00:08:48,318 --> 00:08:53,688
things that are right behind each other

193
00:08:49,909 --> 00:08:56,958
as soon as one of them gets above the

194
00:08:53,688 --> 00:09:00,500
other one and thus should be potentially

195
00:08:56,958 --> 00:09:03,438
seen in front of one of one of them it

196
00:09:00,500 --> 00:09:05,778
is actually higher in space as well so

197
00:09:03,438 --> 00:09:08,838
they wouldn't even really overlap if

198
00:09:05,778 --> 00:09:11,448
that makes sense so kind of hard to say

199
00:09:08,839 --> 00:09:13,639
but it seems like you could sort these

200
00:09:11,448 --> 00:09:16,429
by Z and you can certainly sort these by

201
00:09:13,639 --> 00:09:17,549
Y and that would definitely work because

202
00:09:16,429 --> 00:09:20,389
there's never a

203
00:09:17,549 --> 00:09:22,919
case we're moving a why sprite in Z ever

204
00:09:20,389 --> 00:09:25,559
changes its sorting relative to another

205
00:09:22,919 --> 00:09:27,958
why sprite right because these are just

206
00:09:25,559 --> 00:09:30,449
in planes and so either you're in front

207
00:09:27,958 --> 00:09:33,389
of or behind another one and that will

208
00:09:30,450 --> 00:09:35,339
determine your draw order so we can

209
00:09:33,389 --> 00:09:37,289
obviously produce the correct order of

210
00:09:35,339 --> 00:09:39,630
the Y sprites then we can also correct

211
00:09:37,289 --> 00:09:41,549
the produce the correct order of the Z

212
00:09:39,629 --> 00:09:44,789
sprites because these two things

213
00:09:41,549 --> 00:09:48,208
independently work okay so then the only

214
00:09:44,789 --> 00:09:51,299
question is once we have y and z sprites

215
00:09:48,208 --> 00:09:55,289
in sorted order how do we know when we

216
00:09:51,299 --> 00:09:56,969
need to draw a one from either of the

217
00:09:55,289 --> 00:10:01,019
two things right because that means I

218
00:09:56,970 --> 00:10:03,209
can have you know a list here of of Z

219
00:10:01,019 --> 00:10:06,000
sprites and then a list of why sprites

220
00:10:03,208 --> 00:10:07,259
that are sorted and I know that each of

221
00:10:06,000 --> 00:10:08,429
these should sort in a particular order

222
00:10:07,259 --> 00:10:11,549
in each of these which are disregarded

223
00:10:08,429 --> 00:10:13,500
and then I need to just know oh when do

224
00:10:11,549 --> 00:10:14,939
I start you know I start rendering like

225
00:10:13,500 --> 00:10:16,649
some of these these rights when do I

226
00:10:14,940 --> 00:10:18,000
render one of the Y sprites right and

227
00:10:16,649 --> 00:10:19,649
then once I start writing wife spreads

228
00:10:18,000 --> 00:10:22,769
when do I order is East friend again so

229
00:10:19,649 --> 00:10:27,600
I need a way of picking what list I pick

230
00:10:22,769 --> 00:10:30,899
from what that makes sense and so you

231
00:10:27,600 --> 00:10:34,950
know the the theory anyway behind

232
00:10:30,899 --> 00:10:37,828
quarter tron solution here was that if

233
00:10:34,950 --> 00:10:40,379
you use a scheme similar to the scheme

234
00:10:37,828 --> 00:10:43,349
we were concocting before it will

235
00:10:40,379 --> 00:10:45,208
actually work for sorting in the case

236
00:10:43,350 --> 00:10:46,980
where you have done the sorts correctly

237
00:10:45,208 --> 00:10:49,759
for the two kinds that can be sorted

238
00:10:46,980 --> 00:10:52,980
first and then only use it as the merge

239
00:10:49,759 --> 00:10:55,169
right so you only use it as the final

240
00:10:52,980 --> 00:10:56,970
merge step you basically perform two

241
00:10:55,169 --> 00:10:59,250
independent merge sorts of things you

242
00:10:56,970 --> 00:11:01,949
know you can sort with a real criteria

243
00:10:59,250 --> 00:11:05,220
and then you only use the sort of fakie

244
00:11:01,948 --> 00:11:07,789
like hand-wavy criteria to merge those

245
00:11:05,220 --> 00:11:07,790
two lists together

246
00:11:11,850 --> 00:11:21,399
well uh I like this idea I think it's

247
00:11:17,620 --> 00:11:23,919
got some panache to it so I am inclined

248
00:11:21,399 --> 00:11:28,029
to say we should give it a shot I think

249
00:11:23,919 --> 00:11:30,370
it's kind of clever I and if it worked

250
00:11:28,029 --> 00:11:33,970
it would mean that you could still use

251
00:11:30,370 --> 00:11:37,960
any kind of sort that you wanted to sort

252
00:11:33,970 --> 00:11:39,550
the y and z sprites and then the like

253
00:11:37,960 --> 00:11:44,740
you you would probably have to use a

254
00:11:39,549 --> 00:11:47,109
merge sort I think for the the final

255
00:11:44,740 --> 00:11:48,940
pass but like for example if you felt

256
00:11:47,110 --> 00:11:51,669
like you wanted to use a radix sort for

257
00:11:48,940 --> 00:11:54,130
example on the two separate pieces you

258
00:11:51,669 --> 00:11:56,679
could because now there would be an

259
00:11:54,129 --> 00:11:58,659
absolute single criteria for sorting

260
00:11:56,679 --> 00:12:00,819
those two lists so it opens up more

261
00:11:58,659 --> 00:12:01,870
possibilities for you as well which is

262
00:12:00,820 --> 00:12:03,340
just kind of interesting from an

263
00:12:01,870 --> 00:12:05,379
algorithmic standpoint don't know how

264
00:12:03,340 --> 00:12:07,090
important that is to us but it's just

265
00:12:05,379 --> 00:12:09,429
kind of cool and so I like this

266
00:12:07,090 --> 00:12:11,830
algorithm I think it's kind of neat and

267
00:12:09,429 --> 00:12:14,649
so I kind of want to see what happens if

268
00:12:11,830 --> 00:12:16,320
we give it a try so let's see what that

269
00:12:14,649 --> 00:12:18,610
would look like and also don't forget

270
00:12:16,320 --> 00:12:21,580
one thing that I have to do before we

271
00:12:18,610 --> 00:12:24,399
you know call this whole situation done

272
00:12:21,580 --> 00:12:26,710
even if it turns out this sword is a

273
00:12:24,399 --> 00:12:29,230
good sort the other thing that I haven't

274
00:12:26,710 --> 00:12:31,750
really done yet is we have to ping pong

275
00:12:29,230 --> 00:12:33,580
sort of back over to the render side of

276
00:12:31,750 --> 00:12:38,230
things because remember I sort of hacked

277
00:12:33,580 --> 00:12:41,770
in the notion of the extents of these

278
00:12:38,230 --> 00:12:46,210
sprites right I I did not really do a

279
00:12:41,769 --> 00:12:48,970
correct boundary sort of case for these

280
00:12:46,210 --> 00:12:51,129
sprites and so you know we're not

281
00:12:48,970 --> 00:12:52,899
passing extents that are necessarily

282
00:12:51,129 --> 00:12:58,049
correct which could give us some

283
00:12:52,899 --> 00:13:03,669
erroneous results certainly all right uh

284
00:12:58,049 --> 00:13:08,409
so let's take a look here let us take a

285
00:13:03,669 --> 00:13:10,779
look what I would like to do is you know

286
00:13:08,409 --> 00:13:14,439
we've got sort of this this existing

287
00:13:10,779 --> 00:13:16,329
merge sort here right and I think we

288
00:13:14,440 --> 00:13:18,760
have another merge sort here where we've

289
00:13:16,330 --> 00:13:21,940
got this sort of sort entry version

290
00:13:18,759 --> 00:13:23,649
right so what I need to do is I need to

291
00:13:21,940 --> 00:13:24,220
do something first where I'm going to

292
00:13:23,649 --> 00:13:26,019
get

293
00:13:24,220 --> 00:13:29,080
these things in two separate buckets

294
00:13:26,019 --> 00:13:32,829
right look I need to sort my my wise and

295
00:13:29,080 --> 00:13:36,670
my Z's so I think I could probably do

296
00:13:32,830 --> 00:13:39,430
that by some sort of like my you know

297
00:13:36,669 --> 00:13:41,490
when I do my merge sort I do a first

298
00:13:39,429 --> 00:13:43,839
pass that puts these things into two

299
00:13:41,490 --> 00:13:46,810
separate buckets which can then be

300
00:13:43,840 --> 00:13:48,730
sorted right because I know whether

301
00:13:46,809 --> 00:13:52,000
something zazzy sprite or not in fact

302
00:13:48,730 --> 00:13:54,700
you can kind of see how we were testing

303
00:13:52,000 --> 00:13:56,710
that before and maybe if this turns out

304
00:13:54,700 --> 00:14:00,100
to be too much of a pain we can start to

305
00:13:56,710 --> 00:14:02,740
keep Y in Z sprites in separate buckets

306
00:14:00,100 --> 00:14:05,259
went at creation time if we need to so

307
00:14:02,740 --> 00:14:07,570
you know but at the moment I don't want

308
00:14:05,259 --> 00:14:09,639
to like go making all kinds of systemic

309
00:14:07,570 --> 00:14:11,170
trouble for us upstream when we don't

310
00:14:09,639 --> 00:14:12,429
really know whether this is the thing we

311
00:14:11,169 --> 00:14:13,990
want to do so it's going to be better

312
00:14:12,429 --> 00:14:15,579
probably to put something in here that

313
00:14:13,990 --> 00:14:17,440
could do it first and then if we find

314
00:14:15,580 --> 00:14:19,690
that we want to optimize that away we

315
00:14:17,440 --> 00:14:22,650
can be a little bit more aggressive a

316
00:14:19,690 --> 00:14:26,110
little bit further down the line alright

317
00:14:22,649 --> 00:14:29,139
so let's see so here's a merge sort that

318
00:14:26,110 --> 00:14:31,149
merged sorts two things using the sort

319
00:14:29,139 --> 00:14:33,580
of this criteria the is in front of

320
00:14:31,149 --> 00:14:36,279
criteria so if we keep that criteria

321
00:14:33,580 --> 00:14:39,040
then that means that really all we need

322
00:14:36,279 --> 00:14:44,439
to do is sort of have we do the pre pass

323
00:14:39,039 --> 00:14:47,129
and then we kind of have like we kind of

324
00:14:44,440 --> 00:14:49,660
have little merge sort 0 that work on

325
00:14:47,129 --> 00:14:53,500
sort of as if they were doing this sort

326
00:14:49,659 --> 00:14:55,629
of a sort right and I'm trying to think

327
00:14:53,500 --> 00:14:56,980
if there's some way we can just use I

328
00:14:55,629 --> 00:15:00,240
don't think there's really anything I

329
00:14:56,980 --> 00:15:00,240
can do to use this

330
00:15:00,278 --> 00:15:05,929
to use this code really because this

331
00:15:03,528 --> 00:15:09,379
code is is trying to work on a single

332
00:15:05,929 --> 00:15:14,449
sort key and while I could do that in

333
00:15:09,379 --> 00:15:15,950
you know in the case where where I

334
00:15:14,450 --> 00:15:17,540
didn't have to have this extra data

335
00:15:15,950 --> 00:15:19,850
riding around with it i think i have to

336
00:15:17,539 --> 00:15:22,278
clone this routine for the most part

337
00:15:19,850 --> 00:15:26,659
because there's no really other way to

338
00:15:22,278 --> 00:15:27,919
make sure that I don't that I thought

339
00:15:26,659 --> 00:15:29,149
I'd track all the sprite bound

340
00:15:27,919 --> 00:15:33,199
information that we kind of need it

341
00:15:29,149 --> 00:15:35,570
unfortunately so anyway here we go with

342
00:15:33,200 --> 00:15:38,660
our with our situation here I'm going to

343
00:15:35,570 --> 00:15:42,079
go ahead and put this in and i'm going

344
00:15:38,659 --> 00:15:46,969
to call this let's see we'll call this

345
00:15:42,078 --> 00:15:49,849
merge sort and i guess on sprite bound

346
00:15:46,970 --> 00:15:53,180
i'm going to just call this guy a merge

347
00:15:49,850 --> 00:15:55,519
sort by for now and we'll see i might be

348
00:15:53,179 --> 00:15:58,189
able to condense this code down a little

349
00:15:55,519 --> 00:15:59,089
bit more in the future but for the

350
00:15:58,190 --> 00:16:01,910
moment i'm just going to kind of write

351
00:15:59,089 --> 00:16:04,279
it out longhand so if i want to merge

352
00:16:01,909 --> 00:16:07,490
sort by why i want to make sure that my

353
00:16:04,278 --> 00:16:10,850
sprite bounds my minimum Y is actually

354
00:16:07,490 --> 00:16:17,120
the Y that's closest to me so I want to

355
00:16:10,850 --> 00:16:20,389
make sure that if entry a these things

356
00:16:17,120 --> 00:16:23,690
are drawing from back to front so entry

357
00:16:20,389 --> 00:16:27,139
a it needs to be behind entry be if that

358
00:16:23,690 --> 00:16:32,420
makes sense so if entry A's y min is

359
00:16:27,139 --> 00:16:34,458
like less than entry B's why min then we

360
00:16:32,419 --> 00:16:37,370
would need to swap because if entry a

361
00:16:34,458 --> 00:16:40,129
has a why that's closer to us that entry

362
00:16:37,370 --> 00:16:43,578
be then it needs to draw second so we

363
00:16:40,129 --> 00:16:44,600
would do a swap right and similarly here

364
00:16:43,578 --> 00:16:49,189
where we're kind of doing our

365
00:16:44,600 --> 00:16:51,769
partitioning same thing applies in this

366
00:16:49,190 --> 00:16:53,540
case we have a situation where we need

367
00:16:51,769 --> 00:16:56,500
to know who we're going to take first

368
00:16:53,539 --> 00:16:59,059
and so we want whoever has the greater

369
00:16:56,500 --> 00:17:01,850
Wyman because whoever has the greater

370
00:16:59,059 --> 00:17:04,179
Wyman is the one who needs to be drawn

371
00:17:01,850 --> 00:17:04,180
first

372
00:17:06,818 --> 00:17:14,959
alright so that's how we would do a sort

373
00:17:13,189 --> 00:17:18,589
for the Wyman's and we can do the same

374
00:17:14,959 --> 00:17:21,318
thing on the sort for the disease as

375
00:17:18,588 --> 00:17:23,859
well I'm going to I'm going to clip this

376
00:17:21,318 --> 00:17:26,838
out here for a second this doesn't oops

377
00:17:23,859 --> 00:17:31,549
this is extraneous older code we were

378
00:17:26,838 --> 00:17:34,069
playing with so here's like our merge

379
00:17:31,549 --> 00:17:36,259
sort and why and the exact same thing

380
00:17:34,069 --> 00:17:38,299
would work for merge sort in X right but

381
00:17:36,259 --> 00:17:40,339
for the time being well occur the other

382
00:17:38,299 --> 00:17:42,710
thing I have to do is I do want this guy

383
00:17:40,339 --> 00:17:49,250
this merge sort to work with the sprite

384
00:17:42,710 --> 00:17:53,750
bounds I guess in that case maybe this

385
00:17:49,250 --> 00:17:59,000
wood is murder huh start with one that

386
00:17:53,750 --> 00:18:00,470
already works for this right bound so

387
00:17:59,000 --> 00:18:06,109
yeah and I the other thing I could do if

388
00:18:00,470 --> 00:18:08,808
I want to hear is I could say this in

389
00:18:06,109 --> 00:18:11,949
front of sort key why is this guy still

390
00:18:08,808 --> 00:18:11,950
doing sort key

391
00:18:15,990 --> 00:18:22,920
oh because we still just call it sorki

392
00:18:20,069 --> 00:18:25,230
all right that's not so in this case you

393
00:18:22,920 --> 00:18:26,910
know we've got we've got is in front of

394
00:18:25,230 --> 00:18:31,589
sort key what I want to do here is just

395
00:18:26,910 --> 00:18:33,529
I could still say is in front of why I

396
00:18:31,589 --> 00:18:35,730
can still do it like that if I wanted to

397
00:18:33,529 --> 00:18:42,720
and so that we can basically keep this

398
00:18:35,730 --> 00:18:48,839
same routine and that would be our merge

399
00:18:42,720 --> 00:18:54,390
sort why and we'd also have a merge sort

400
00:18:48,839 --> 00:18:56,189
x I'm sorry Maurice or Z and you can

401
00:18:54,390 --> 00:19:01,050
kind of see it's it's a little annoying

402
00:18:56,190 --> 00:19:03,750
right because it's like it's exactly the

403
00:19:01,049 --> 00:19:04,980
same thing and I'm not sure we'll have

404
00:19:03,750 --> 00:19:06,480
to think about whether we condense this

405
00:19:04,980 --> 00:19:07,980
at all obviously if you're at

406
00:19:06,480 --> 00:19:09,870
empathizing sort of person you could

407
00:19:07,980 --> 00:19:11,900
condense it on a template of course

408
00:19:09,869 --> 00:19:14,789
you'd still that still does generate

409
00:19:11,900 --> 00:19:17,040
duplicate code so it doesn't ending

410
00:19:14,789 --> 00:19:19,589
actually condensing it in the actual

411
00:19:17,039 --> 00:19:22,769
output but it would make it more concise

412
00:19:19,589 --> 00:19:24,740
to read but there might be other ways we

413
00:19:22,769 --> 00:19:26,940
could get this to convince in actuality

414
00:19:24,740 --> 00:19:31,410
and I don't know whether that's the case

415
00:19:26,940 --> 00:19:33,570
yet or not but either way if we do have

416
00:19:31,410 --> 00:19:36,120
a merge sort ynm word sort Z then all we

417
00:19:33,569 --> 00:19:40,169
need is a way of doing that sort the is

418
00:19:36,119 --> 00:19:45,000
in front of part we need a way to do

419
00:19:40,170 --> 00:19:49,590
that for these two criteria so we need a

420
00:19:45,000 --> 00:19:52,079
boops y and z and when we have is in

421
00:19:49,589 --> 00:20:00,178
front of a and B that's a is in front of

422
00:19:52,079 --> 00:20:04,678
B a is in front of be if a has a Zemon

423
00:20:00,179 --> 00:20:07,640
that is less than the Zeeman of B that's

424
00:20:04,679 --> 00:20:07,640
all right Wyman

425
00:20:08,169 --> 00:20:15,519
all right that would mean that a is in

426
00:20:10,808 --> 00:20:17,378
front of NY and the same is true for Z

427
00:20:15,519 --> 00:20:20,079
only the sense is reversed right because

428
00:20:17,378 --> 00:20:22,118
Z comes up at us on the screen so

429
00:20:20,079 --> 00:20:24,308
essentially we're going to have a swap

430
00:20:22,118 --> 00:20:26,499
here and we don't have a Zemon we only

431
00:20:24,308 --> 00:20:27,908
have a zmax so we're going to be looking

432
00:20:26,499 --> 00:20:32,548
at something like this where we say like

433
00:20:27,909 --> 00:20:34,899
okay the result is if the zmax is

434
00:20:32,548 --> 00:20:38,288
greater than the other person's emacs

435
00:20:34,898 --> 00:20:40,569
then it's in front of so that now we

436
00:20:38,288 --> 00:20:42,940
would have our two different merge sorts

437
00:20:40,569 --> 00:20:44,589
that we need right and those will do the

438
00:20:42,940 --> 00:20:46,720
sorts of the two separate buffers and

439
00:20:44,589 --> 00:20:49,138
then we would have to have one merge

440
00:20:46,720 --> 00:20:53,589
sort that merges all of them together

441
00:20:49,138 --> 00:20:56,108
right now in the case where we have all

442
00:20:53,589 --> 00:20:58,089
of them together we still sort of have

443
00:20:56,108 --> 00:21:01,388
the same kind of a merge sort scenario

444
00:20:58,089 --> 00:21:02,798
that we had before except i think we

445
00:21:01,388 --> 00:21:05,229
don't have to really do the special

446
00:21:02,798 --> 00:21:09,489
cases anymore meaning i think we can

447
00:21:05,230 --> 00:21:11,169
just sort of do this the do the two

448
00:21:09,489 --> 00:21:13,749
buffers and then do the merge of the two

449
00:21:11,169 --> 00:21:16,059
buffers so I'm pretty sure that if we go

450
00:21:13,749 --> 00:21:18,879
ahead and say merge sort here I should

451
00:21:16,058 --> 00:21:20,888
be able to do a thing where we can yet

452
00:21:18,878 --> 00:21:26,918
where we can make where we can make this

453
00:21:20,888 --> 00:21:29,288
work so what I need to do first is I

454
00:21:26,919 --> 00:21:33,278
need to partition this buffer into two

455
00:21:29,288 --> 00:21:36,009
pieces right one of which is going to be

456
00:21:33,278 --> 00:21:38,769
all of the Z sprites and one of which is

457
00:21:36,009 --> 00:21:41,558
going to be all of the y sprites right

458
00:21:38,769 --> 00:21:43,329
so unlike the previous merge sorts that

459
00:21:41,558 --> 00:21:45,878
we did where we partition the buffer in

460
00:21:43,329 --> 00:21:46,898
to tap into like two halves because what

461
00:21:45,878 --> 00:21:49,089
we're trying to do is just sort

462
00:21:46,898 --> 00:21:51,849
homogeneous things here we've got a

463
00:21:49,089 --> 00:21:54,038
heterogeneous grouping of things so I

464
00:21:51,849 --> 00:21:55,959
first need to pull out like all of the Y

465
00:21:54,038 --> 00:21:59,829
sprites and all of the Z sprites and

466
00:21:55,960 --> 00:22:04,769
sort them separately then I can do my

467
00:21:59,829 --> 00:22:08,858
merge so I think what I would do here is

468
00:22:04,769 --> 00:22:10,720
I would say since we have a temp

469
00:22:08,858 --> 00:22:13,720
directory that we know attempt record

470
00:22:10,720 --> 00:22:16,329
that's good a temp buffer that we know

471
00:22:13,720 --> 00:22:20,589
can hold as much as we have in our main

472
00:22:16,329 --> 00:22:22,059
buffer obviously I could move all of say

473
00:22:20,589 --> 00:22:24,759
the Z sprites in the

474
00:22:22,059 --> 00:22:26,980
and then I could move all of the wyse

475
00:22:24,759 --> 00:22:28,629
rights so that they were compacted in

476
00:22:26,980 --> 00:22:33,339
the original buffer or something like

477
00:22:28,630 --> 00:22:35,800
that right so let's try to write a

478
00:22:33,339 --> 00:22:38,649
routine which does that which produces

479
00:22:35,799 --> 00:22:41,529
in sprite bounced our first spray

480
00:22:38,650 --> 00:22:44,380
bounced our temp let's just move all of

481
00:22:41,529 --> 00:22:53,920
them over into one and then you know

482
00:22:44,380 --> 00:22:55,750
deal with the other okay and again like

483
00:22:53,920 --> 00:22:58,480
I said this is not going to be the most

484
00:22:55,750 --> 00:23:00,039
efficient thing here because probably if

485
00:22:58,480 --> 00:23:02,049
it turns out that we really care about

486
00:23:00,039 --> 00:23:04,059
how this is performing at the end of the

487
00:23:02,049 --> 00:23:06,279
day we would probably want to do

488
00:23:04,059 --> 00:23:08,740
something where we just keep these guys

489
00:23:06,279 --> 00:23:11,079
separate to begin with and then merge

490
00:23:08,740 --> 00:23:12,910
them later rather than handing the

491
00:23:11,079 --> 00:23:14,829
render a buffer with all of them in it

492
00:23:12,910 --> 00:23:17,259
and having it have to disentangle them

493
00:23:14,829 --> 00:23:23,799
since it's pretty easy for us to know at

494
00:23:17,259 --> 00:23:28,839
the output time which ones which ok so

495
00:23:23,799 --> 00:23:31,210
here we go i know that i'm going to do

496
00:23:28,839 --> 00:23:33,029
basically the same loop right i'm going

497
00:23:31,210 --> 00:23:38,769
to loop over everything in the buffer

498
00:23:33,029 --> 00:23:42,519
and here's my first my whatever you want

499
00:23:38,769 --> 00:23:44,470
to call it my first right i know that my

500
00:23:42,519 --> 00:23:48,309
first bright index that's the one that

501
00:23:44,470 --> 00:23:53,110
i'm on and i know that i could say you

502
00:23:48,309 --> 00:23:56,980
know if was a Z sprite or is east right

503
00:23:53,109 --> 00:23:58,750
I know that I could say well if this is

504
00:23:56,980 --> 00:24:01,599
as East right that I want to move it to

505
00:23:58,750 --> 00:24:04,869
the temp directory right so I want to be

506
00:24:01,599 --> 00:24:09,759
able to say like temp temptin or I guess

507
00:24:04,869 --> 00:24:10,809
z count plus plus equals me all right

508
00:24:09,759 --> 00:24:14,079
and I'm just kind of sketching out what

509
00:24:10,809 --> 00:24:16,329
this would look like now what would

510
00:24:14,079 --> 00:24:18,129
happen is as I start to move things out

511
00:24:16,329 --> 00:24:19,269
to here and let me just draw this for

512
00:24:18,130 --> 00:24:23,110
you really quickly so you can kind of

513
00:24:19,269 --> 00:24:25,299
see what I'm what I'm doing I've got

514
00:24:23,109 --> 00:24:27,309
this this buffer and inside here are

515
00:24:25,299 --> 00:24:29,289
like all different kinds of things so

516
00:24:27,309 --> 00:24:31,569
there's a Z sprite there's a Z sprite

517
00:24:29,289 --> 00:24:32,920
there's another Z sprite maybe this was

518
00:24:31,569 --> 00:24:34,750
actually two reefs rights back to back

519
00:24:32,920 --> 00:24:36,009
or something like this and I want to

520
00:24:34,750 --> 00:24:38,380
move the Z sprites out into this

521
00:24:36,009 --> 00:24:40,990
empty buffer well coming through here

522
00:24:38,380 --> 00:24:42,700
anytime I see a Z sprite copying it out

523
00:24:40,990 --> 00:24:47,529
to here is not particularly hard

524
00:24:42,700 --> 00:24:51,250
certainly right but what I do have to do

525
00:24:47,529 --> 00:24:55,119
then is remember that this is now a hole

526
00:24:51,250 --> 00:24:57,970
in the buffer right so what I need to do

527
00:24:55,119 --> 00:24:59,589
in for the simplest possible case which

528
00:24:57,970 --> 00:25:04,470
might not be the most vision but for

529
00:24:59,589 --> 00:25:07,899
simplest is the next time I find right

530
00:25:04,470 --> 00:25:10,059
a-z sprite that I start a why sprite I

531
00:25:07,900 --> 00:25:13,060
need to copy it up to here so I

532
00:25:10,059 --> 00:25:15,669
basically to compact these values does

533
00:25:13,059 --> 00:25:18,609
that make sense so I sort of need two

534
00:25:15,670 --> 00:25:21,430
concepts here I need a sort sprite bound

535
00:25:18,609 --> 00:25:26,169
or i guess i should say i need a why

536
00:25:21,430 --> 00:25:27,549
count and a Z count and then we've got

537
00:25:26,170 --> 00:25:30,400
like the index that we're actually on

538
00:25:27,549 --> 00:25:35,069
and so what I would do here is I would

539
00:25:30,400 --> 00:25:38,080
go okay I've got my sorts right bound

540
00:25:35,069 --> 00:25:41,169
that's like this one whatever this one

541
00:25:38,079 --> 00:25:43,899
is and that's going to be the first

542
00:25:41,170 --> 00:25:46,150
buffer plus the index that's what I'm

543
00:25:43,900 --> 00:25:48,430
looking at and so then what I want to do

544
00:25:46,150 --> 00:25:51,100
is say well if it's a Z sprite then I

545
00:25:48,430 --> 00:25:55,330
want to move it to my temp at my my temp

546
00:25:51,099 --> 00:25:59,349
buffer and increment the Z count right

547
00:25:55,329 --> 00:26:01,779
and that leaves a hole wherever I am on

548
00:25:59,349 --> 00:26:04,149
the other hand if it's not if it's a

549
00:26:01,779 --> 00:26:07,119
wife right then I want to compact it

550
00:26:04,150 --> 00:26:10,030
into the most earliest possible unused

551
00:26:07,119 --> 00:26:13,119
space in this buffer which of course is

552
00:26:10,029 --> 00:26:15,759
just whatever the Y count is and then

553
00:26:13,119 --> 00:26:19,959
increment that now this may copy it onto

554
00:26:15,759 --> 00:26:22,150
itself if we haven't seen any holes yet

555
00:26:19,960 --> 00:26:25,390
it will copy it onto itself but that's

556
00:26:22,150 --> 00:26:29,620
okay we don't care we could early out

557
00:26:25,390 --> 00:26:31,990
that if we want to but who cares again

558
00:26:29,619 --> 00:26:34,059
the time for optimizing this is not now

559
00:26:31,990 --> 00:26:35,589
because we don't even know if this is

560
00:26:34,059 --> 00:26:36,669
something we want to use we'd rather do

561
00:26:35,589 --> 00:26:39,639
is go for something that works correctly

562
00:26:36,670 --> 00:26:41,620
first and then worry about optimizing it

563
00:26:39,640 --> 00:26:45,850
later if we verify that it is actually a

564
00:26:41,619 --> 00:26:47,919
valid approach to the problem so at this

565
00:26:45,849 --> 00:26:49,629
point when i exit here I now have my

566
00:26:47,920 --> 00:26:54,100
first buffer and

567
00:26:49,630 --> 00:26:56,350
my temp buffer my first buffer has all

568
00:26:54,099 --> 00:26:58,689
of the Y sprites in it and my temp

569
00:26:56,349 --> 00:27:03,609
buffer has all of the Z sprites in it

570
00:26:58,690 --> 00:27:08,100
right and so what I can do now is I can

571
00:27:03,609 --> 00:27:12,459
move again this is not very efficient

572
00:27:08,099 --> 00:27:13,869
but you know ideally we just have more

573
00:27:12,460 --> 00:27:15,900
attempt member lying around like we just

574
00:27:13,869 --> 00:27:18,549
have min best probably what we should do

575
00:27:15,900 --> 00:27:19,960
but just because hey we're writing some

576
00:27:18,549 --> 00:27:24,789
of this code I'm going to even put it to

577
00:27:19,960 --> 00:27:31,630
in here dude Casey this is really just

578
00:27:24,789 --> 00:27:38,319
for funsies we should probably just pass

579
00:27:31,630 --> 00:27:44,200
in more 10 memory what I can do now is I

580
00:27:38,319 --> 00:27:46,089
can copy that sort of the the Y sprites

581
00:27:44,200 --> 00:27:47,230
onto the end of the sea sprites or the

582
00:27:46,089 --> 00:27:49,329
sea sprites onto the end of the Y

583
00:27:47,230 --> 00:27:51,789
sprites one of the other and that way I

584
00:27:49,329 --> 00:27:55,990
still have a regular tempura sitting

585
00:27:51,789 --> 00:27:58,329
around if I needed one but wait no I'm

586
00:27:55,990 --> 00:28:00,370
an idiot you don't even need to do that

587
00:27:58,329 --> 00:28:05,529
now that i think about it because what

588
00:28:00,369 --> 00:28:08,379
do we know therefore has to be true if

589
00:28:05,529 --> 00:28:12,809
what i just did is I separate it out

590
00:28:08,380 --> 00:28:17,410
this into some number of lies rights and

591
00:28:12,809 --> 00:28:21,039
some number of Z sprites what I know is

592
00:28:17,410 --> 00:28:23,890
the unused portion of the Y sprite

593
00:28:21,039 --> 00:28:27,309
buffer is exactly the right size to be

594
00:28:23,890 --> 00:28:29,920
the temp buffer for the Z sort and the

595
00:28:27,309 --> 00:28:32,109
unused portion of the Z sprite buffer is

596
00:28:29,920 --> 00:28:36,610
the exact right size to use for the temp

597
00:28:32,109 --> 00:28:38,500
of the y sort right because this has to

598
00:28:36,609 --> 00:28:41,319
be this size these were both the same

599
00:28:38,500 --> 00:28:44,170
size to begin with so however many i

600
00:28:41,319 --> 00:28:46,329
stuffed in here that's how many i didn't

601
00:28:44,170 --> 00:28:48,519
have at the end of this one right

602
00:28:46,329 --> 00:28:50,500
because it was full before so what

603
00:28:48,519 --> 00:28:52,420
whatever i pulled out that empty space

604
00:28:50,500 --> 00:28:55,119
is the same size as the number i pulled

605
00:28:52,420 --> 00:28:57,220
out so now i should be able to call

606
00:28:55,119 --> 00:28:59,769
merge sort with cleverly crafted

607
00:28:57,220 --> 00:29:04,410
pointers it so that it doesn't actually

608
00:28:59,769 --> 00:29:08,799
ever have to move anything around again

609
00:29:04,410 --> 00:29:11,730
in this first merge phase right so now I

610
00:29:08,799 --> 00:29:14,680
can call my other merges right here's a

611
00:29:11,730 --> 00:29:16,269
right which are basically just the

612
00:29:14,680 --> 00:29:18,009
standard now these are the standard

613
00:29:16,269 --> 00:29:20,410
merge sort that we actually had same one

614
00:29:18,009 --> 00:29:22,569
we had before so I've got my why count

615
00:29:20,410 --> 00:29:24,940
it's going to be first and instead of

616
00:29:22,569 --> 00:29:26,619
passing temp I'm just passed 10th plus Z

617
00:29:24,940 --> 00:29:28,690
count so I'm going to have that end of

618
00:29:26,619 --> 00:29:30,819
the temp buffer that it's going to use

619
00:29:28,690 --> 00:29:32,920
there and then for the merge sort in why

620
00:29:30,819 --> 00:29:34,450
I'll do it I'll pass it the Z count

621
00:29:32,920 --> 00:29:36,700
which is how many are in that temp

622
00:29:34,450 --> 00:29:39,160
buffer and then we'll use the the first

623
00:29:36,700 --> 00:29:41,500
plus y count that end of the first

624
00:29:39,160 --> 00:29:44,500
buffer as the temp buffer there so now i

625
00:29:41,500 --> 00:29:46,119
have my Z's in my wise in place sorted

626
00:29:44,500 --> 00:29:47,470
because remember we kind of did the

627
00:29:46,119 --> 00:29:50,979
inefficient thing where we did the sort

628
00:29:47,470 --> 00:29:53,769
where it copies it back here right which

629
00:29:50,980 --> 00:29:55,630
honestly you know what we could get rid

630
00:29:53,769 --> 00:30:01,539
of that now we don't need to do that

631
00:29:55,630 --> 00:30:04,000
copy anymore well you know I don't only

632
00:30:01,539 --> 00:30:06,399
on the last one see this merge sort

633
00:30:04,000 --> 00:30:08,170
recursive right so i can't really I I'll

634
00:30:06,400 --> 00:30:10,269
leave it in for now that's too bad we

635
00:30:08,170 --> 00:30:14,350
could go get rid of it right you

636
00:30:10,269 --> 00:30:16,480
probably should but anyway so after I

637
00:30:14,349 --> 00:30:20,159
merge sort these I've got first attempt

638
00:30:16,480 --> 00:30:25,289
are pointing to my why am I Z sprites

639
00:30:20,160 --> 00:30:28,060
respectively right and so now i need to

640
00:30:25,289 --> 00:30:31,210
to write the thing that will merge them

641
00:30:28,059 --> 00:30:35,529
together and in order to merge them

642
00:30:31,210 --> 00:30:37,299
together the problem is this part ii I

643
00:30:35,529 --> 00:30:38,950
don't know if we can be as clever as we

644
00:30:37,299 --> 00:30:41,529
were with the other part we just kind of

645
00:30:38,950 --> 00:30:45,220
use those ones because this I believe

646
00:30:41,529 --> 00:30:47,440
assumes it can look at two things and

647
00:30:45,220 --> 00:30:52,000
have space to write them all

648
00:30:47,440 --> 00:30:56,460
contiguously after the fact right and I

649
00:30:52,000 --> 00:30:56,460
don't know how we would really do that

650
00:30:57,869 --> 00:31:03,309
it doesn't seem pretty right so I feel

651
00:31:01,960 --> 00:31:08,650
like this is a place where we're going

652
00:31:03,309 --> 00:31:11,079
to need to do more of a copy here now

653
00:31:08,650 --> 00:31:14,110
what's hilarious about this is if we

654
00:31:11,079 --> 00:31:26,199
could just tell this thing

655
00:31:14,109 --> 00:31:30,009
Oh actually this is a copy isn't it so

656
00:31:26,200 --> 00:31:37,390
if this is a copy that means that the

657
00:31:30,009 --> 00:31:40,569
other buffer still has all the stuff in

658
00:31:37,390 --> 00:31:44,290
it so that means technically even though

659
00:31:40,569 --> 00:31:46,480
we told it to sort in here an exact copy

660
00:31:44,289 --> 00:31:49,990
of the sort of thing is actually also

661
00:31:46,480 --> 00:31:58,029
sitting in here so we don't need to copy

662
00:31:49,990 --> 00:32:00,849
it back because this just did okay now

663
00:31:58,029 --> 00:32:03,789
the only question I have there is what

664
00:32:00,849 --> 00:32:08,349
happens in this case so that won't be

665
00:32:03,789 --> 00:32:12,579
true in these ones exactly so you know

666
00:32:08,349 --> 00:32:15,039
we we would have to make sure that for

667
00:32:12,579 --> 00:32:16,569
the Z count let's say so everything

668
00:32:15,039 --> 00:32:20,918
should end up in the first in buffer

669
00:32:16,569 --> 00:32:23,168
first so let's say in the Z sorting one

670
00:32:20,919 --> 00:32:27,490
what we would have to do is say well

671
00:32:23,169 --> 00:32:30,790
okay you know I in the case where we

672
00:32:27,490 --> 00:32:35,679
have quote-unquote no work to do we

673
00:32:30,789 --> 00:32:43,750
would still need to copy it to the temp

674
00:32:35,679 --> 00:32:45,850
buffer right like we'd still need to to

675
00:32:43,750 --> 00:32:48,339
do a copy to the temp buffer even though

676
00:32:45,849 --> 00:32:51,849
we don't really need to if we were just

677
00:32:48,339 --> 00:32:53,949
returning the value right and the same

678
00:32:51,849 --> 00:32:56,279
is true here so we know we've got entry

679
00:32:53,950 --> 00:32:59,230
a and entry be first and first plus one

680
00:32:56,279 --> 00:33:01,558
we need to do like you know just first

681
00:32:59,230 --> 00:33:01,558
zero

682
00:33:05,229 --> 00:33:14,209
you know technically obviously we don't

683
00:33:09,919 --> 00:33:16,580
actually need to do that because we

684
00:33:14,209 --> 00:33:27,619
could the other thing we could hear do

685
00:33:16,579 --> 00:33:31,788
here is at the merge sort stage where we

686
00:33:27,618 --> 00:33:33,499
do merge sort Z and merge sort why at

687
00:33:31,788 --> 00:33:35,388
this point we know that the y-buffer is

688
00:33:33,499 --> 00:33:39,009
when we want what we can do is we could

689
00:33:35,388 --> 00:33:42,168
say if you know the Z count is less than

690
00:33:39,009 --> 00:33:45,108
three or less than equal to 2 then we

691
00:33:42,169 --> 00:33:46,579
know that we have to do that copy back

692
00:33:45,108 --> 00:33:48,558
because it will not have done the copy

693
00:33:46,578 --> 00:33:50,928
back for us any other case will run

694
00:33:48,558 --> 00:33:54,798
through here and it will do that it will

695
00:33:50,929 --> 00:33:57,859
have left the two buffers the same so in

696
00:33:54,798 --> 00:34:02,929
this case we've got a merge sort on z we

697
00:33:57,858 --> 00:34:08,058
know that we're doing wait why do I have

698
00:34:02,929 --> 00:34:10,369
these backwards should look like that

699
00:34:08,059 --> 00:34:13,789
right we should do a merge sort why on

700
00:34:10,369 --> 00:34:17,000
the number of threats we have in Y right

701
00:34:13,789 --> 00:34:20,240
and then we say okay we're doing that in

702
00:34:17,000 --> 00:34:25,789
our first because that's where we put

703
00:34:20,239 --> 00:34:27,769
all of the Y sprites I should also

704
00:34:25,789 --> 00:34:29,089
probably do a thing here how do we tell

705
00:34:27,769 --> 00:34:31,750
if it's as if right we just do if

706
00:34:29,088 --> 00:34:31,750
they're equal right

707
00:34:39,090 --> 00:34:52,180
so we want to say okay if this sort key

708
00:34:46,139 --> 00:34:58,029
this key so if it's Wyman is not equal

709
00:34:52,179 --> 00:35:01,210
to its wimax then it's a Z spray yeah so

710
00:34:58,030 --> 00:35:05,110
I want to merge sort in using y criteria

711
00:35:01,210 --> 00:35:09,190
however many y sprites I have there in

712
00:35:05,110 --> 00:35:12,490
the first buffer and they are 10 plus Z

713
00:35:09,190 --> 00:35:16,929
count that's how many the I'm sorry 10

714
00:35:12,489 --> 00:35:18,849
plus the account is where the temporary

715
00:35:16,929 --> 00:35:20,859
area is in the other buffer that's not

716
00:35:18,849 --> 00:35:23,739
being used similarly we want to merge

717
00:35:20,860 --> 00:35:28,769
sort by why the f sorry merge sort by Z

718
00:35:23,739 --> 00:35:31,059
the temp buffer and we want to pass the

719
00:35:28,769 --> 00:35:34,329
unused region of the first buffer for

720
00:35:31,059 --> 00:35:39,340
that now in the case where the Z count

721
00:35:34,329 --> 00:35:48,099
is less than two then that buffer that

722
00:35:39,340 --> 00:35:52,480
first why count needs to have you know

723
00:35:48,099 --> 00:35:55,269
the temp stuff added into it right so we

724
00:35:52,480 --> 00:36:00,670
kind of need to do this sort of a thing

725
00:35:55,269 --> 00:36:06,329
here I guess we could almost do it this

726
00:36:00,670 --> 00:36:06,329
way so if Z count equals one

727
00:36:11,659 --> 00:36:16,639
we copy one and if it's too we copy to

728
00:36:17,900 --> 00:36:21,689
anything else and it would have just

729
00:36:19,619 --> 00:36:23,400
worked so i think that's all we need to

730
00:36:21,688 --> 00:36:25,528
make sure that our buffer is is correct

731
00:36:23,400 --> 00:36:28,979
right and then we know that what we've

732
00:36:25,528 --> 00:36:32,748
got is we sort of have this notion of

733
00:36:28,978 --> 00:36:35,218
our two sprites sets we know we have

734
00:36:32,748 --> 00:36:39,149
well and I guess we could use this same

735
00:36:35,219 --> 00:36:42,568
sort of looking thing here we've got in

736
00:36:39,150 --> 00:36:45,298
half one in half you have zero and in

737
00:36:42,568 --> 00:36:48,298
half one what we have here is first and

738
00:36:45,298 --> 00:36:51,829
first plus y count those are our two

739
00:36:48,298 --> 00:36:56,579
like things were coming from and then

740
00:36:51,829 --> 00:37:06,809
the end is in half one the end of this

741
00:36:56,579 --> 00:37:09,660
buffer is in half 1 plus Z cap oh but

742
00:37:06,809 --> 00:37:15,650
that that's not even really necessary I

743
00:37:09,659 --> 00:37:15,649
guess really this is the part we wanted

744
00:37:16,188 --> 00:37:24,928
this doesn't happen ok so we know in

745
00:37:21,869 --> 00:37:28,759
total how many we had right and we know

746
00:37:24,929 --> 00:37:35,429
we're reading from half 0 or half 10

747
00:37:28,759 --> 00:37:38,880
looks like I didn't need those ok it's

748
00:37:35,429 --> 00:37:43,949
just that part of don't need all right

749
00:37:38,880 --> 00:37:46,048
uh okay so I'm looking at the temp

750
00:37:43,949 --> 00:37:48,659
buffer and I'm saying that's what we're

751
00:37:46,048 --> 00:37:51,059
going to have to use your Oh although I

752
00:37:48,659 --> 00:37:53,699
can get rid of this to write this not

753
00:37:51,059 --> 00:37:55,890
really necessary ping pong thing that I

754
00:37:53,699 --> 00:37:58,199
can get rid of now because I can just if

755
00:37:55,889 --> 00:38:01,438
I want to instead of using first buffer

756
00:37:58,199 --> 00:38:04,880
I can just use the temp buffer right so

757
00:38:01,438 --> 00:38:04,879
instead I could say oh ok

758
00:38:07,380 --> 00:38:16,440
after I do my mergesort why and my

759
00:38:09,989 --> 00:38:18,000
mergesort see instead of using first as

760
00:38:16,440 --> 00:38:23,130
the primary buffer to pull from let's

761
00:38:18,000 --> 00:38:26,730
just use temp so in half 0 will be just

762
00:38:23,130 --> 00:38:31,559
the the temp this will be 10 plus Z

763
00:38:26,730 --> 00:38:54,679
count and then yet then we need to just

764
00:38:31,559 --> 00:38:54,680
reverse the sense of this yeah

765
00:39:01,588 --> 00:39:06,159
okay so now we can just pull out of the

766
00:39:04,480 --> 00:39:07,329
temp buffer and right into the first but

767
00:39:06,159 --> 00:39:09,129
for originally so we get rid of that

768
00:39:07,329 --> 00:39:11,170
extra copy at the end because it's just

769
00:39:09,130 --> 00:39:12,910
sloppy not too I mean it's not like an

770
00:39:11,170 --> 00:39:14,079
optimization really it's just we have to

771
00:39:12,909 --> 00:39:15,190
go one direction or the other we might

772
00:39:14,079 --> 00:39:18,028
as well pick the one that doesn't have

773
00:39:15,190 --> 00:39:21,179
an extra copy it's no skin off our back

774
00:39:18,028 --> 00:39:25,809
so we started temp and temp plus Z count

775
00:39:21,179 --> 00:39:28,298
we know we have to end at at the total

776
00:39:25,809 --> 00:39:33,760
count number right and then when we're

777
00:39:28,298 --> 00:39:35,409
reading from these things I feel like

778
00:39:33,760 --> 00:39:40,150
these why I don't even know why these

779
00:39:35,409 --> 00:39:45,250
are different here in half 0 probably

780
00:39:40,150 --> 00:39:48,309
because I type it earlier so there we go

781
00:39:45,250 --> 00:39:50,949
all right so then we come through and we

782
00:39:48,309 --> 00:39:52,930
say well if read half 0 has bottomed out

783
00:39:50,949 --> 00:39:54,699
we always read from half 1 if read half

784
00:39:52,929 --> 00:40:00,940
one has bottomed out we always read for

785
00:39:54,699 --> 00:40:04,239
two otherwise we do the test and we pick

786
00:40:00,940 --> 00:40:08,170
from whichever one gets the is in front

787
00:40:04,239 --> 00:40:10,209
of comes back right now what's a little

788
00:40:08,170 --> 00:40:11,950
bit weird to me is yeah okay we pass

789
00:40:10,210 --> 00:40:17,559
them in the opposite order so that that

790
00:40:11,949 --> 00:40:20,769
looks right okay so i think i think

791
00:40:17,559 --> 00:40:24,778
that's basically it the only thing that

792
00:40:20,769 --> 00:40:30,639
we really have to be aware of here is

793
00:40:24,778 --> 00:40:36,849
that really first of all this is first

794
00:40:30,639 --> 00:40:43,078
post count we're ready to the first

795
00:40:36,849 --> 00:40:47,680
buffer we don't to do this merge

796
00:40:43,079 --> 00:40:52,990
comparison can be simpler now since we

797
00:40:47,679 --> 00:40:58,949
know which sprite is a Z sprite and

798
00:40:52,989 --> 00:40:58,949
which is a why sprites right

799
00:41:00,679 --> 00:41:09,440
so yeah dude ok so our merge sorts right

800
00:41:07,639 --> 00:41:11,150
since their recursive they need to call

801
00:41:09,440 --> 00:41:13,730
the respective version of themselves so

802
00:41:11,150 --> 00:41:15,769
the merge for Z it needs to call the

803
00:41:13,730 --> 00:41:18,679
merge sort Z and the merge sort y needs

804
00:41:15,769 --> 00:41:22,759
to call the merge sort why for obvious

805
00:41:18,679 --> 00:41:24,980
reasons there we go and so now we've

806
00:41:22,760 --> 00:41:27,410
technically implemented this but hey

807
00:41:24,980 --> 00:41:30,019
that was a lot of gyrations there we

808
00:41:27,409 --> 00:41:32,899
probably need to let go through this

809
00:41:30,019 --> 00:41:37,969
code a little bit more carefully and and

810
00:41:32,900 --> 00:41:39,889
and well I think that's the end the

811
00:41:37,969 --> 00:41:43,308
sentence actually we probably need to go

812
00:41:39,889 --> 00:41:45,308
through this code more carefully because

813
00:41:43,309 --> 00:41:50,930
we probably made some mistakes in there

814
00:41:45,309 --> 00:41:53,809
for example there you go so this is our

815
00:41:50,929 --> 00:42:00,440
little check at the end here and I'm not

816
00:41:53,809 --> 00:42:02,300
sure guess I wanted to just kind of see

817
00:42:00,440 --> 00:42:05,559
what it did first before we were going

818
00:42:02,300 --> 00:42:05,559
to assert on this let me sit here

819
00:42:13,568 --> 00:42:22,659
so let's see first of all for anywhere

820
00:42:15,980 --> 00:42:25,659
close we are sort of anywhere close

821
00:42:22,659 --> 00:42:25,659
actually

822
00:42:31,409 --> 00:42:37,108
so that's definitely better than what we

823
00:42:33,568 --> 00:42:39,650
had before that much is clear but it's

824
00:42:37,108 --> 00:42:47,480
still not we still got a ways to go

825
00:42:39,650 --> 00:42:47,480
certainly all right

826
00:42:52,340 --> 00:42:58,769
okay so let's start playing around with

827
00:42:56,429 --> 00:43:05,279
this a little bit more careful here what

828
00:42:58,769 --> 00:43:09,900
is this is in front of so I guess that

829
00:43:05,280 --> 00:43:13,769
one the only slight issue here is that I

830
00:43:09,900 --> 00:43:16,440
don't really know I guess this is

831
00:43:13,769 --> 00:43:21,539
something we can use to always check I'm

832
00:43:16,440 --> 00:43:22,980
not really sure but anyway yeah that is

833
00:43:21,539 --> 00:43:24,210
neither here nor there i would like to

834
00:43:22,980 --> 00:43:26,969
go through this a little more carefully

835
00:43:24,210 --> 00:43:30,659
carefully first before i start to figure

836
00:43:26,969 --> 00:43:33,269
out whether or not we have bugs in the

837
00:43:30,659 --> 00:43:35,039
actual comparison stuff which obviously

838
00:43:33,269 --> 00:43:36,869
we have to have at least one or the

839
00:43:35,039 --> 00:43:38,940
sword or this idea just doesn't work as

840
00:43:36,869 --> 00:43:41,880
a sort but i think it probably is way

841
00:43:38,940 --> 00:43:43,710
premature to determine that anyway so

842
00:43:41,880 --> 00:43:45,030
we've got about 50 minutes left so i'm

843
00:43:43,710 --> 00:43:46,840
going to dive in here and see if i can

844
00:43:45,030 --> 00:43:51,470
determine

845
00:43:46,840 --> 00:43:59,450
well how well this is working so first

846
00:43:51,469 --> 00:44:04,730
of all let's let's start by jumping on

847
00:43:59,449 --> 00:44:07,369
in here okay so what we're doing here at

848
00:44:04,730 --> 00:44:10,369
the very outset is we're taking a look

849
00:44:07,369 --> 00:44:12,349
to see whether we have Z sprites and

850
00:44:10,369 --> 00:44:13,489
we're for y sprites and we're sorting

851
00:44:12,349 --> 00:44:16,699
them in here you can see a bunch of

852
00:44:13,489 --> 00:44:19,159
people are going into Z and Y and so on

853
00:44:16,699 --> 00:44:21,259
right and so let's take a look at what

854
00:44:19,159 --> 00:44:26,179
this looks like after we're done so Z

855
00:44:21,260 --> 00:44:29,090
count why account and that's probably

856
00:44:26,179 --> 00:44:32,119
what we would expect right because every

857
00:44:29,090 --> 00:44:34,010
floor tile is as East right whereas the

858
00:44:32,119 --> 00:44:36,679
only things that are Y sprites right now

859
00:44:34,010 --> 00:44:39,140
are actually occupied tiles like a tree

860
00:44:36,679 --> 00:44:40,819
or the hero or something like that so we

861
00:44:39,139 --> 00:44:43,339
would expect there to be dramatically

862
00:44:40,820 --> 00:44:47,420
more Z's frights than y sprites and that

863
00:44:43,340 --> 00:44:50,090
is what we saw so that seems okay right

864
00:44:47,420 --> 00:44:53,119
that seems like a reasonable thing if I

865
00:44:50,090 --> 00:45:03,079
take a look at well you actually you

866
00:44:53,119 --> 00:45:06,920
know what I should do there's really no

867
00:45:03,079 --> 00:45:14,199
reason not to just verify right so let's

868
00:45:06,920 --> 00:45:14,200
go through from 0 to Y count and assert

869
00:45:21,139 --> 00:45:31,739
that the sprite is the kind of sprite we

870
00:45:30,000 --> 00:45:41,909
think it should be and I should probably

871
00:45:31,739 --> 00:46:02,848
also put up here and Izzy spread

872
00:45:41,909 --> 00:46:04,858
function I suppose I could do great sort

873
00:46:02,849 --> 00:46:07,740
what was the what was the thing that we

874
00:46:04,858 --> 00:46:14,119
were passing around before sort sprite

875
00:46:07,739 --> 00:46:14,118
bound sprite bound just write that

876
00:46:19,710 --> 00:46:35,289
okay so yeah so this way we could say

877
00:46:28,659 --> 00:46:52,179
like okay if it's as East right I'm

878
00:46:35,289 --> 00:46:55,778
going to start down here that in both

879
00:46:52,179 --> 00:47:05,798
cases we have nosey sprites in the Y and

880
00:46:55,778 --> 00:47:08,588
all these sprites in the Z right okay so

881
00:47:05,798 --> 00:47:12,278
this way hopefully that gives me a

882
00:47:08,588 --> 00:47:14,318
little bit of protection there to verify

883
00:47:12,278 --> 00:47:16,358
that they all got sorted into the two

884
00:47:14,318 --> 00:47:23,558
buffers correctly so that seems good

885
00:47:16,358 --> 00:47:34,239
right so now I could also do a thing

886
00:47:23,559 --> 00:47:36,420
that's like verify buffer I could do

887
00:47:34,239 --> 00:47:36,420
this

888
00:47:45,920 --> 00:47:51,420
and what I could do here is say well

889
00:47:49,320 --> 00:47:54,000
okay you know you'll give me a buffer

890
00:47:51,420 --> 00:47:58,470
and then this will say I want to assert

891
00:47:54,000 --> 00:48:00,719
that is Z sprite of this buffer of

892
00:47:58,469 --> 00:48:03,149
everything in this buffer equals the Z

893
00:48:00,719 --> 00:48:04,439
sprite value you pass me in so if you

894
00:48:03,150 --> 00:48:05,789
want to verify the girls these sprites

895
00:48:04,440 --> 00:48:07,679
you'd pass in true if you wanted to

896
00:48:05,789 --> 00:48:10,440
better either why sprites you pass in

897
00:48:07,679 --> 00:48:14,000
false right so then that way this could

898
00:48:10,440 --> 00:48:16,829
just be verified buffer why count first

899
00:48:14,000 --> 00:48:24,239
false and this could be verified buffer

900
00:48:16,829 --> 00:48:26,519
Z count temp crew right so that would

901
00:48:24,239 --> 00:48:31,439
verify those buffers for us after the

902
00:48:26,519 --> 00:48:34,880
merge sort we could verify again so

903
00:48:31,440 --> 00:48:40,590
after we do this Hocus focus right here

904
00:48:34,880 --> 00:48:51,990
we could say oh yeah after we grab these

905
00:48:40,590 --> 00:48:54,539
out let's make sure that in half 0 18

906
00:48:51,989 --> 00:48:57,869
half one or what we think they are right

907
00:48:54,539 --> 00:49:00,989
so in f0 is supposed to be all disease

908
00:48:57,869 --> 00:49:04,170
rights sorted right so that should be a

909
00:49:00,989 --> 00:49:07,129
Z count and this should be why account

910
00:49:04,170 --> 00:49:07,130
it should look like that

911
00:49:11,659 --> 00:49:24,618
uh so yeah right so that look right

912
00:49:20,920 --> 00:49:26,858
hopefully so let's Rivera Phi that as

913
00:49:24,619 --> 00:49:32,720
well and so now we can at least verify

914
00:49:26,858 --> 00:49:35,568
our to sort of primary that coming out

915
00:49:32,719 --> 00:49:37,308
of here we at least didn't do any of our

916
00:49:35,568 --> 00:49:38,538
sort of magic shuffling wrong like

917
00:49:37,309 --> 00:49:43,039
everything's in the right place

918
00:49:38,539 --> 00:49:45,410
according to these these verifications

919
00:49:43,039 --> 00:49:50,299
right and you can kind of see what you

920
00:49:45,409 --> 00:49:51,679
know all this is doing right is it just

921
00:49:50,298 --> 00:49:54,889
comes through here and just issues a ton

922
00:49:51,679 --> 00:50:00,108
of assertions all right there's nothing

923
00:49:54,889 --> 00:50:02,269
to it so anyway we've got these

924
00:50:00,108 --> 00:50:03,920
verifications in here so at the end of

925
00:50:02,269 --> 00:50:07,369
this we know that we're at least sorting

926
00:50:03,920 --> 00:50:11,170
fair fair sorted things and then we

927
00:50:07,369 --> 00:50:11,170
would come through here and we would say

928
00:50:11,710 --> 00:50:17,000
we need to merge these guys together now

929
00:50:14,659 --> 00:50:19,250
my suspicion is that since we now are

930
00:50:17,000 --> 00:50:22,309
working with these sort of sorted these

931
00:50:19,250 --> 00:50:24,019
planar assorted striations at this point

932
00:50:22,309 --> 00:50:28,480
what we would probably want to do is

933
00:50:24,019 --> 00:50:34,099
make sure that we just always sort the

934
00:50:28,480 --> 00:50:35,750
well I feel like we still kind of have a

935
00:50:34,099 --> 00:50:38,359
little bit of an issue here with the is

936
00:50:35,750 --> 00:50:40,190
with the with emerging so I feel like

937
00:50:38,358 --> 00:50:41,480
we're going to need I feel like we're

938
00:50:40,190 --> 00:50:44,358
going to need a little bit of a better

939
00:50:41,480 --> 00:50:46,909
merge to make this go correctly because

940
00:50:44,358 --> 00:50:50,449
right work we're kind of like working

941
00:50:46,909 --> 00:50:53,139
our way up in planes of Z and forward

942
00:50:50,449 --> 00:50:57,048
and why so we're kind of like you know

943
00:50:53,139 --> 00:51:00,528
doing this process and in order to know

944
00:50:57,048 --> 00:51:02,329
which sheet to pick next I feel like

945
00:51:00,528 --> 00:51:06,858
figuring out whether the two things

946
00:51:02,329 --> 00:51:14,720
overlap isn't necessarily going to be

947
00:51:06,858 --> 00:51:16,489
what we need if that makes sense so I

948
00:51:14,719 --> 00:51:19,368
think I need to think this part through

949
00:51:16,489 --> 00:51:23,298
a little bit more I don't know exactly

950
00:51:19,369 --> 00:51:25,450
what what what Steve did I don't know

951
00:51:23,298 --> 00:51:29,989
what what quarter Tron did

952
00:51:25,449 --> 00:51:33,169
but well he might be on the chat I don't

953
00:51:29,989 --> 00:51:36,039
even know is the other chat I haven't

954
00:51:33,170 --> 00:51:42,619
been watching squirt ran out there

955
00:51:36,039 --> 00:51:45,529
anyone know anyway so point being we've

956
00:51:42,619 --> 00:51:47,690
got a situation right where we now are

957
00:51:45,530 --> 00:51:50,240
basically moving you know if we look at

958
00:51:47,690 --> 00:51:52,309
this from the side sort of so the camera

959
00:51:50,239 --> 00:51:54,349
is like looking down here what we're

960
00:51:52,309 --> 00:51:59,329
essentially saying now is we're moving a

961
00:51:54,349 --> 00:52:02,150
plane this way and this way and every

962
00:51:59,329 --> 00:52:04,579
time we get to somebody a new we get to

963
00:52:02,150 --> 00:52:07,099
a new plane we have to decide is this

964
00:52:04,579 --> 00:52:09,139
new plane the one we should be drawing

965
00:52:07,099 --> 00:52:14,659
next or as this plane the one we should

966
00:52:09,139 --> 00:52:21,129
be drawing next right and so it seems

967
00:52:14,659 --> 00:52:23,629
like I I don't know it seems to me like

968
00:52:21,130 --> 00:52:25,280
that's a hard decision to make I look I

969
00:52:23,630 --> 00:52:27,289
wonder if there really is going to be a

970
00:52:25,280 --> 00:52:30,140
way for us to make that decision in a

971
00:52:27,289 --> 00:52:32,150
way that like if we if we could make

972
00:52:30,139 --> 00:52:35,210
that decision properly I guess the thing

973
00:52:32,150 --> 00:52:37,608
that is a little weird in my mind is

974
00:52:35,210 --> 00:52:38,929
like if we could make that isn't

975
00:52:37,608 --> 00:52:41,358
properly why couldn't we have just

976
00:52:38,929 --> 00:52:43,309
sorted by a single criteria so it does

977
00:52:41,358 --> 00:52:45,319
seem like a little wonky like it does

978
00:52:43,309 --> 00:52:48,699
seem like I'm not sure that this will

979
00:52:45,320 --> 00:52:48,700
actually work but

980
00:53:05,039 --> 00:53:12,239
no hard to say so anyway let me take a

981
00:53:10,708 --> 00:53:16,108
quick look at what our current thing is

982
00:53:12,239 --> 00:53:18,358
here so we have both Z sprites so we

983
00:53:16,108 --> 00:53:20,699
never we never have this both Z sprite

984
00:53:18,358 --> 00:53:23,130
condition right that's never going to

985
00:53:20,699 --> 00:53:27,389
happen now or at least it shouldn't ever

986
00:53:23,130 --> 00:53:29,519
happen now if that makes sense although

987
00:53:27,389 --> 00:53:31,318
I guess it happens in the sense that the

988
00:53:29,518 --> 00:53:36,298
built that the not build sprite graph

989
00:53:31,318 --> 00:53:41,099
this thing here the sort entries when it

990
00:53:36,298 --> 00:53:44,548
goes to verify its going to call the is

991
00:53:41,099 --> 00:53:48,088
in front of so you know that will happen

992
00:53:44,548 --> 00:53:49,409
but so we have the both Z sprites thing

993
00:53:48,088 --> 00:53:52,018
and that's never going to happen in our

994
00:53:49,409 --> 00:53:53,368
actual testing so in the cases that

995
00:53:52,018 --> 00:53:55,108
we're talking about now that's always

996
00:53:53,369 --> 00:53:57,059
going to be false and then we're going

997
00:53:55,108 --> 00:54:01,498
to do the a includes be and the B

998
00:53:57,059 --> 00:54:04,499
includes a bit and in this case like I

999
00:54:01,498 --> 00:54:09,418
said so we're never going to be able to

1000
00:54:04,498 --> 00:54:12,088
have to Z sprites so the Y min Y max we

1001
00:54:09,418 --> 00:54:19,978
could for example ensure that we always

1002
00:54:12,088 --> 00:54:24,719
pass a Z sprite in a particular order

1003
00:54:19,978 --> 00:54:25,828
here if we wanted to write but anyway so

1004
00:54:24,719 --> 00:54:28,259
when we figure out whether we need to

1005
00:54:25,829 --> 00:54:30,449
sort by Z we were previously saying if

1006
00:54:28,259 --> 00:54:32,668
they're both these sprites or there's

1007
00:54:30,449 --> 00:54:38,249
some overlap so I guess that was saying

1008
00:54:32,668 --> 00:54:40,858
like essentially if RZ overlapped the

1009
00:54:38,248 --> 00:54:43,649
why of whatever this thing you know even

1010
00:54:40,858 --> 00:54:50,568
if it was a wise right if the sea sprite

1011
00:54:43,650 --> 00:54:53,639
sort of was was overlap it's it in why

1012
00:54:50,568 --> 00:54:58,679
then we would still sort by Z otherwise

1013
00:54:53,639 --> 00:55:00,838
we would sort by Y right and so let's

1014
00:54:58,679 --> 00:55:06,778
see what this is saying here so that's

1015
00:55:00,838 --> 00:55:13,219
saying we'll sort by Z we will look at

1016
00:55:06,778 --> 00:55:13,219
the Z Max's and we'll move them

1017
00:55:14,068 --> 00:55:22,210
otherwise we'll go by the Wyman's and

1018
00:55:17,818 --> 00:55:29,108
that is how we were doing it right here

1019
00:55:22,210 --> 00:55:32,559
we were doing zmax I suppose the other

1020
00:55:29,108 --> 00:55:34,328
thing we should do for verify buffer now

1021
00:55:32,559 --> 00:55:37,298
to think about it let's verify that

1022
00:55:34,329 --> 00:55:51,309
they're sorted correctly so we could

1023
00:55:37,298 --> 00:56:01,900
also do something like this let's assert

1024
00:55:51,309 --> 00:56:12,150
that buffer index sort key oops let's

1025
00:56:01,900 --> 00:56:17,019
assert that buffer mix- one sort key I

1026
00:56:12,150 --> 00:56:18,670
guess set please its way around right so

1027
00:56:17,019 --> 00:56:19,838
the one we're on let's assert that it's

1028
00:56:18,670 --> 00:56:21,730
supposed to be in front of the one that

1029
00:56:19,838 --> 00:56:24,369
came before it that way we'll also

1030
00:56:21,730 --> 00:56:31,119
verify the sort order of our of our

1031
00:56:24,369 --> 00:56:34,329
staging buffers right okay so something

1032
00:56:31,119 --> 00:56:36,700
got messed up before we get to the

1033
00:56:34,329 --> 00:56:40,059
magical part of the merge I mess

1034
00:56:36,699 --> 00:56:41,379
something up and you can kind of see how

1035
00:56:40,059 --> 00:56:43,329
I was approaching this problem right

1036
00:56:41,380 --> 00:56:45,760
there's just so much data flying around

1037
00:56:43,329 --> 00:56:47,349
that rather than try to inspect a lot of

1038
00:56:45,760 --> 00:56:49,480
it at the debugger at the head end I

1039
00:56:47,349 --> 00:56:53,710
just decided to write some code that

1040
00:56:49,480 --> 00:56:56,199
would do some testing right on that and

1041
00:56:53,710 --> 00:56:59,199
this is why I a lot of times I it

1042
00:56:56,199 --> 00:57:00,489
doesn't happen so often thank God but in

1043
00:56:59,199 --> 00:57:03,028
the past everyone was saying what do you

1044
00:57:00,489 --> 00:57:06,098
think of test-driven development and I

1045
00:57:03,028 --> 00:57:07,389
you know think I said a bunch stuff

1046
00:57:06,099 --> 00:57:08,410
about like well you know you always have

1047
00:57:07,389 --> 00:57:09,699
to make a decision about whether it's

1048
00:57:08,409 --> 00:57:11,769
gonna save you time or cost you time

1049
00:57:09,699 --> 00:57:14,048
while this isn't technically test-driven

1050
00:57:11,769 --> 00:57:15,909
development you'll notice i am adding

1051
00:57:14,048 --> 00:57:17,829
sort of more complicated tests here and

1052
00:57:15,909 --> 00:57:19,719
the reason for that is i'm doing exactly

1053
00:57:17,829 --> 00:57:21,818
that trade-off right i'm looking and

1054
00:57:19,719 --> 00:57:24,639
saying i think i can save myself some

1055
00:57:21,818 --> 00:57:26,019
time here by writing tests in code

1056
00:57:24,639 --> 00:57:28,059
because i think though

1057
00:57:26,019 --> 00:57:29,619
code tests will find the bugs faster

1058
00:57:28,059 --> 00:57:32,199
than I can find the bugs without the

1059
00:57:29,619 --> 00:57:35,949
tests right and that's kind of like a

1060
00:57:32,199 --> 00:57:37,839
thing where I'm always making that sort

1061
00:57:35,949 --> 00:57:39,399
of trade off in my head where any time I

1062
00:57:37,840 --> 00:57:41,260
have a piece of code I'm trying to bug

1063
00:57:39,400 --> 00:57:42,519
I'm always thinking would it be more

1064
00:57:41,260 --> 00:57:43,960
value but I've tests here is that going

1065
00:57:42,519 --> 00:57:45,670
to be the shorter way to go most the

1066
00:57:43,960 --> 00:57:46,990
time the answer is no and games but

1067
00:57:45,670 --> 00:57:49,210
sometimes the answer is definitely yes

1068
00:57:46,989 --> 00:57:51,789
in this case I think it was going to be

1069
00:57:49,210 --> 00:57:53,019
easier to do it this way now I don't

1070
00:57:51,789 --> 00:57:54,460
know if we actually found a bugger if I

1071
00:57:53,019 --> 00:57:55,570
just wrote the test wrong right so we

1072
00:57:54,460 --> 00:57:57,400
first have to actually get the test

1073
00:57:55,570 --> 00:57:59,440
working that's another reason testing

1074
00:57:57,400 --> 00:58:04,090
driven development it's always a little

1075
00:57:59,440 --> 00:58:06,820
bit costly but still so let's take a

1076
00:58:04,090 --> 00:58:07,960
look at at what's going on in here so

1077
00:58:06,820 --> 00:58:10,000
let's take a look at the first time

1078
00:58:07,960 --> 00:58:15,820
through this loop and just make sure

1079
00:58:10,000 --> 00:58:18,159
things are generally kosher so here we

1080
00:58:15,820 --> 00:58:21,360
go here is with index 20 you know what

1081
00:58:18,159 --> 00:58:21,359
that should be greater than 0

1082
00:58:27,539 --> 00:58:32,159
so here we go with this test and you can

1083
00:58:30,519 --> 00:58:34,449
see that we're at least passing

1084
00:58:32,159 --> 00:58:37,029
occasionally so it's not like the test

1085
00:58:34,449 --> 00:58:39,009
itself is complete nonsense but here we

1086
00:58:37,030 --> 00:58:42,250
have failed so let's take a look at what

1087
00:58:39,010 --> 00:58:44,200
we returned here this may be the case of

1088
00:58:42,250 --> 00:58:50,230
two things that are identical and so in

1089
00:58:44,199 --> 00:58:52,769
that case we would also have to do the

1090
00:58:50,230 --> 00:58:52,769
same test

1091
00:58:57,139 --> 00:59:06,989
alright so in this case we have two

1092
00:59:02,940 --> 00:59:13,559
sprites who both have an equivalent Z

1093
00:59:06,989 --> 00:59:16,919
value so you know I guess in this case I

1094
00:59:13,559 --> 00:59:18,900
wonder if we do want to still use in the

1095
00:59:16,920 --> 00:59:22,050
case where we've got equivalency values

1096
00:59:18,900 --> 00:59:24,840
if we want to sort them we may still

1097
00:59:22,050 --> 00:59:29,640
want to do that sort so I guess now I

1098
00:59:24,840 --> 00:59:32,840
think about it maybe yeah maybe I should

1099
00:59:29,639 --> 00:59:38,569
be doing the same sort in all cases

1100
00:59:32,840 --> 00:59:41,030
right so maybe I shouldn't actually I

1101
00:59:38,570 --> 00:59:44,370
shouldn't actually have done it this way

1102
00:59:41,030 --> 00:59:46,260
like maybe I should leave the old way of

1103
00:59:44,369 --> 00:59:54,509
doing it where we still do is in front

1104
00:59:46,260 --> 00:59:59,400
of in both cases right yeah seems like a

1105
00:59:54,510 --> 01:00:01,170
fair thing so instead of doing a so that

1106
00:59:59,400 --> 01:00:03,000
way we get that extra sorting of Z

1107
01:00:01,170 --> 01:00:05,420
sprites where they'll sort by Y if

1108
01:00:03,000 --> 01:00:13,349
there's these happen to be equivalent

1109
01:00:05,420 --> 01:00:22,159
that seems pretty reasonable so let's

1110
01:00:13,349 --> 01:00:22,159
see mergesort we want to call this

1111
01:00:23,670 --> 01:00:31,510
what do I want to call this because here

1112
01:00:27,670 --> 01:00:37,019
we sort of call you know we call this

1113
01:00:31,510 --> 01:00:40,780
merge sort but this is really like I

1114
01:00:37,019 --> 01:00:46,300
call this a separated sort and the other

1115
01:00:40,780 --> 01:00:47,530
one the merge sort because the other

1116
01:00:46,300 --> 01:00:51,280
ones the one that's actually doing a

1117
01:00:47,530 --> 01:00:55,690
merge sort and then I'll try saying okay

1118
01:00:51,280 --> 01:01:01,420
what if we just get rid of this and keep

1119
01:00:55,690 --> 01:01:05,760
doing it the other way around so here's

1120
01:01:01,420 --> 01:01:10,360
our merge sort it uses gives in front of

1121
01:01:05,760 --> 01:01:13,110
in both cases right and then we don't

1122
01:01:10,360 --> 01:01:13,110
have this anymore

1123
01:01:19,800 --> 01:01:26,190
alright so what do we have here let's

1124
01:01:23,550 --> 01:01:28,289
see where so now like you notice we

1125
01:01:26,190 --> 01:01:30,780
passed now that we're doing that kind of

1126
01:01:28,289 --> 01:01:34,349
sorting where we're actually still

1127
01:01:30,780 --> 01:01:37,650
keeping our Y's and Z's correct there so

1128
01:01:34,349 --> 01:01:49,349
our is in front of failed here on

1129
01:01:37,650 --> 01:01:52,860
somebody let's see what it said so in

1130
01:01:49,349 --> 01:01:57,029
this case we have somebody who is who is

1131
01:01:52,860 --> 01:02:04,110
closer to us in Z coming second which

1132
01:01:57,030 --> 01:02:09,060
seems correct but lower in why but it's

1133
01:02:04,110 --> 01:02:11,400
a Z sprite I guess only one of them is a

1134
01:02:09,059 --> 01:02:17,250
wise is only it only one of them is as

1135
01:02:11,400 --> 01:02:19,910
East right that doesn't I'll be honest

1136
01:02:17,250 --> 01:02:24,840
that does that's a little confusing

1137
01:02:19,909 --> 01:02:29,849
wouldn't I'm not sure I can immediately

1138
01:02:24,840 --> 01:02:37,019
tell why entry be wouldn't be in front

1139
01:02:29,849 --> 01:02:40,199
of because it's also higher I feel like

1140
01:02:37,019 --> 01:02:41,610
that wouldn't matter I want to see what

1141
01:02:40,199 --> 01:02:43,969
the visual results of this are at the

1142
01:02:41,610 --> 01:02:43,970
moment

1143
01:02:55,309 --> 01:02:58,309
alright

1144
01:03:00,420 --> 01:03:07,599
getting a lot of flashing there so

1145
01:03:02,588 --> 01:03:10,298
that's not great well I don't want to go

1146
01:03:07,599 --> 01:03:14,019
too far over time so I'll put that back

1147
01:03:10,298 --> 01:03:15,730
in for now and we will go to the QA and

1148
01:03:14,018 --> 01:03:17,348
then we'll take a look at this tomorrow

1149
01:03:15,730 --> 01:03:18,909
and we can also ask quarter Tron if we

1150
01:03:17,349 --> 01:03:21,150
did a faithful if that was a faithful

1151
01:03:18,909 --> 01:03:28,298
implantation of what he had tried to do

1152
01:03:21,150 --> 01:03:30,809
because I don't actually know Oh in so

1153
01:03:28,298 --> 01:03:30,809
bodies here

1154
01:04:10,139 --> 01:04:16,139
it would be great if it's about had a

1155
01:04:12,088 --> 01:04:22,578
question for the Q&amp;A I always loved his

1156
01:04:16,139 --> 01:04:22,578
questions or her questions its questions

1157
01:04:22,699 --> 01:04:36,108
is in savate gendered or as in savate

1158
01:04:28,309 --> 01:04:36,109
like a asexual

1159
01:05:30,199 --> 01:05:36,559
stay thirsty 90 I'm gonna skip that

1160
01:05:35,210 --> 01:05:39,079
question for a minute since it's not

1161
01:05:36,559 --> 01:05:40,190
related Rome says I'm trying to make

1162
01:05:39,079 --> 01:05:42,109
take a different approach using the

1163
01:05:40,190 --> 01:05:44,838
projected sprites on the screen to sort

1164
01:05:42,108 --> 01:05:48,679
and using the min/max y-values up as the

1165
01:05:44,838 --> 01:05:50,480
depth sorting key you are trying to take

1166
01:05:48,679 --> 01:05:52,909
a different approach so does that mean

1167
01:05:50,480 --> 01:05:54,619
you have not taken that approach yet or

1168
01:05:52,909 --> 01:05:56,000
whether you have not gotten that

1169
01:05:54,619 --> 01:05:59,329
approach working it or does that mean

1170
01:05:56,000 --> 01:06:02,750
you have gotten networking yet because I

1171
01:05:59,329 --> 01:06:05,890
was going to ask how did it work but

1172
01:06:02,750 --> 01:06:05,889
maybe you don't know how it works yet

1173
01:06:18,420 --> 01:06:26,289
working on it yeah well keep us posted

1174
01:06:23,818 --> 01:06:30,880
mass quarter Tron what he thinks of our

1175
01:06:26,289 --> 01:06:33,190
current implementation of whether that's

1176
01:06:30,880 --> 01:06:35,789
a fair weather that's similar to what he

1177
01:06:33,190 --> 01:06:35,789
tried or not

1178
01:07:23,610 --> 01:07:27,809
I feel like since no one's asked a

1179
01:07:26,010 --> 01:07:30,450
question I'll take the question of what

1180
01:07:27,809 --> 01:07:31,949
is a full stack developer a full stack

1181
01:07:30,449 --> 01:07:34,199
developer is what people just used to

1182
01:07:31,949 --> 01:07:38,460
call a programmer it's somebody who like

1183
01:07:34,199 --> 01:07:40,500
knows how to program but nowadays

1184
01:07:38,460 --> 01:07:42,210
there's kind of like this secondary

1185
01:07:40,500 --> 01:07:43,530
aspect of programming which is like

1186
01:07:42,210 --> 01:07:45,780
there's some people who kind of just

1187
01:07:43,530 --> 01:07:47,550
know how to like write JavaScript or

1188
01:07:45,780 --> 01:07:49,320
something but they don't really know

1189
01:07:47,550 --> 01:07:50,550
very much about how like computer

1190
01:07:49,320 --> 01:07:52,590
actually works or something like that so

1191
01:07:50,550 --> 01:07:54,810
they can't necessarily go work on like

1192
01:07:52,590 --> 01:07:56,579
if there's this you know some kind of

1193
01:07:54,809 --> 01:07:58,019
underlying database technology that you

1194
01:07:56,579 --> 01:08:00,210
have the source code to they wouldn't be

1195
01:07:58,019 --> 01:08:03,269
able to necessarily go like modify some

1196
01:08:00,210 --> 01:08:04,590
of it right or even know if it was

1197
01:08:03,269 --> 01:08:05,969
working right or not right because all

1198
01:08:04,590 --> 01:08:07,470
they know is like the issue a sequel

1199
01:08:05,969 --> 01:08:08,969
query and something comes back and they

1200
01:08:07,469 --> 01:08:10,919
don't really have an idea how it's like

1201
01:08:08,969 --> 01:08:13,949
magic like you know they wouldn't know

1202
01:08:10,920 --> 01:08:15,960
necessarily what was going on under

1203
01:08:13,949 --> 01:08:17,579
there and so I think typically what

1204
01:08:15,960 --> 01:08:19,500
people mean when they say full stack

1205
01:08:17,579 --> 01:08:21,449
developer is really what I would have

1206
01:08:19,500 --> 01:08:23,970
just called a programmer somebody who I

1207
01:08:21,449 --> 01:08:25,639
could tell to go do something that has

1208
01:08:23,970 --> 01:08:28,560
to do with programming and do it as

1209
01:08:25,640 --> 01:08:31,140
opposed just been like I don't know man

1210
01:08:28,560 --> 01:08:36,539
I only write the like web page or

1211
01:08:31,140 --> 01:08:38,579
whatever and so I think that's kind of a

1212
01:08:36,539 --> 01:08:40,800
newer thing and faithfully because well

1213
01:08:38,579 --> 01:08:43,350
nowadays are so much stuff that gets

1214
01:08:40,800 --> 01:08:44,850
done in software development you end up

1215
01:08:43,350 --> 01:08:47,130
having tons and tons and tons of work

1216
01:08:44,850 --> 01:08:49,230
for people who maybe aren't really

1217
01:08:47,130 --> 01:08:53,640
programmers in the full like you know

1218
01:08:49,229 --> 01:08:55,279
know all the ways in which you know all

1219
01:08:53,640 --> 01:09:04,700
the things that you might expect a

1220
01:08:55,279 --> 01:09:06,989
typical programmer to know then yeah and

1221
01:09:04,699 --> 01:09:09,659
I guess in theory it could go the other

1222
01:09:06,989 --> 01:09:11,189
way to like if somehow you're somebody

1223
01:09:09,659 --> 01:09:14,670
who does know how to write a sequel

1224
01:09:11,189 --> 01:09:17,429
server but doesn't know how to write

1225
01:09:14,670 --> 01:09:18,630
JavaScript or something you also

1226
01:09:17,430 --> 01:09:21,810
wouldn't be a full stack developer

1227
01:09:18,630 --> 01:09:24,510
because if for some reason you're like I

1228
01:09:21,810 --> 01:09:27,390
I couldn't go figure out how to write

1229
01:09:24,510 --> 01:09:29,159
the JavaScript for a web page then well

1230
01:09:27,390 --> 01:09:32,430
that's not the full stack right that's

1231
01:09:29,159 --> 01:09:34,939
not the full end-to-end part programming

1232
01:09:32,430 --> 01:09:34,940
that happens

1233
01:10:08,130 --> 01:10:15,810
poo shoes won't sorting fail because the

1234
01:10:13,649 --> 01:10:17,789
lower Z sometimes needs to be drawn on

1235
01:10:15,810 --> 01:10:22,190
top of a higher Z if as wise Freight

1236
01:10:17,789 --> 01:10:22,189
overlaps them see reference image

1237
01:10:28,050 --> 01:10:32,369
that is very good point poo shoes

1238
01:10:53,069 --> 01:10:59,949
yeah I like that that diagram is pretty

1239
01:10:56,560 --> 01:11:12,000
good that he posted maybe I'll draw that

1240
01:10:59,949 --> 01:11:12,000
into the stream here so who shoes drew

1241
01:11:14,550 --> 01:11:31,600
so it's basically a B C here's the side

1242
01:11:21,130 --> 01:11:37,319
view a b c and so from the camera in

1243
01:11:31,600 --> 01:11:37,320
this case right we've got

1244
01:11:41,159 --> 01:11:49,079
something that looks like this we're

1245
01:11:44,310 --> 01:11:52,440
here is a and here is C and here's B and

1246
01:11:49,079 --> 01:11:54,449
this should be behind right this is the

1247
01:11:52,439 --> 01:11:57,449
furthest miss back this is in the middle

1248
01:11:54,449 --> 01:12:01,470
and this is in front but this has a

1249
01:11:57,449 --> 01:12:03,599
lower Z value than this so it does seem

1250
01:12:01,470 --> 01:12:06,650
like yeah it does seem like this

1251
01:12:03,600 --> 01:12:12,210
approach wouldn't necessarily work

1252
01:12:06,649 --> 01:12:13,829
because we don't know it does seem like

1253
01:12:12,210 --> 01:12:15,960
it comes back to the same problem as

1254
01:12:13,829 --> 01:12:20,840
before right which is that we still need

1255
01:12:15,960 --> 01:12:23,069
to do the cycle we still need the cycle

1256
01:12:20,840 --> 01:12:24,150
so we'll ask fortiter on about it and

1257
01:12:23,069 --> 01:12:27,630
see if he maybe had something clever

1258
01:12:24,149 --> 01:12:28,979
there but I think you may be right which

1259
01:12:27,630 --> 01:12:30,539
still leaves us at the graph side of

1260
01:12:28,979 --> 01:12:32,729
things which is fine that's what we were

1261
01:12:30,539 --> 01:12:35,329
going to do before but it would be nice

1262
01:12:32,729 --> 01:12:35,329
if we didn't have to

1263
01:12:51,600 --> 01:12:54,420
maybe low at the start you mentioned

1264
01:12:53,250 --> 01:12:55,680
insertion sort and potentially

1265
01:12:54,420 --> 01:12:57,630
automatically getting a binary tree

1266
01:12:55,680 --> 01:12:58,860
representation of the sprites what

1267
01:12:57,630 --> 01:13:00,659
happened to that idea assuming i roughly

1268
01:12:58,859 --> 01:13:04,079
understood correctly what you've done so

1269
01:13:00,659 --> 01:13:05,970
that one and we could try writing that

1270
01:13:04,079 --> 01:13:07,470
one tomorrow too assuming that there

1271
01:13:05,970 --> 01:13:10,140
isn't something we miss in this one and

1272
01:13:07,470 --> 01:13:14,970
that this is in fact not a not a viable

1273
01:13:10,140 --> 01:13:20,789
algorithm the way that one works is is

1274
01:13:14,970 --> 01:13:22,920
by saying well let's suppose that we are

1275
01:13:20,789 --> 01:13:26,789
taking something like this and we go

1276
01:13:22,920 --> 01:13:29,909
okay you know we've got B &amp; B becomes

1277
01:13:26,789 --> 01:13:32,729
the top of our tree or something we get

1278
01:13:29,909 --> 01:13:35,220
a and we see that a is behind be so it

1279
01:13:32,729 --> 01:13:37,679
goes on this side right and then we've

1280
01:13:35,220 --> 01:13:39,960
got C and C is in front of B so it goes

1281
01:13:37,680 --> 01:13:42,810
on this side and then if another guy

1282
01:13:39,960 --> 01:13:44,819
wants to slide in here right we would go

1283
01:13:42,810 --> 01:13:47,550
well he's on this side of B which side

1284
01:13:44,819 --> 01:13:50,099
of C is he on while he's behind see so

1285
01:13:47,550 --> 01:13:52,560
he's you know this is D or whatever so

1286
01:13:50,100 --> 01:13:55,560
he's here whatever so the insertion sort

1287
01:13:52,560 --> 01:14:00,180
does lots of comparisons based on those

1288
01:13:55,560 --> 01:14:03,450
splitting planes as you go down and the

1289
01:14:00,180 --> 01:14:05,730
problem with this approach I think is

1290
01:14:03,449 --> 01:14:07,109
that I don't think in the end I feel

1291
01:14:05,729 --> 01:14:08,639
like it's going to just degenerate to

1292
01:14:07,109 --> 01:14:10,979
the same problem as this one which is

1293
01:14:08,640 --> 01:14:16,050
that unless you actually split things up

1294
01:14:10,979 --> 01:14:18,629
in some way when you're not sure what

1295
01:14:16,050 --> 01:14:20,550
should happen between any two things

1296
01:14:18,630 --> 01:14:22,739
you'll end up in the same problem we

1297
01:14:20,550 --> 01:14:24,390
ended up with here so I'm suspecting

1298
01:14:22,739 --> 01:14:28,399
that the graph approaches the only one

1299
01:14:24,390 --> 01:14:28,400
we can really do if that makes sense

1300
01:14:48,840 --> 01:14:57,250
how do you transform the sprites from

1301
01:14:51,939 --> 01:14:59,500
world to screen coordinates we do that I

1302
01:14:57,250 --> 01:15:01,779
mean we just do that with a standard or

1303
01:14:59,500 --> 01:15:12,340
very basic orthogonal projection

1304
01:15:01,779 --> 01:15:16,059
it'sit's doesn't really do much all

1305
01:15:12,340 --> 01:15:17,680
right I think that's it for today so

1306
01:15:16,060 --> 01:15:19,450
right we've got a we've got a few more

1307
01:15:17,680 --> 01:15:21,190
things we've tried here I think we may

1308
01:15:19,449 --> 01:15:22,359
still like I said it still kind of looks

1309
01:15:21,189 --> 01:15:24,909
to me like we're gonna have to do the

1310
01:15:22,359 --> 01:15:26,049
graph sort which is not a big deal you

1311
01:15:24,909 --> 01:15:27,189
know will write it we'll see how it goes

1312
01:15:26,050 --> 01:15:31,630
i don't think it's going to be a huge

1313
01:15:27,189 --> 01:15:33,629
deal at the end of the day yeah sprite

1314
01:15:31,630 --> 01:15:35,770
sorting is complicated what can you do

1315
01:15:33,630 --> 01:15:39,010
it's the kind of thing where you've got

1316
01:15:35,770 --> 01:15:40,270
a very semantic problem and semantic

1317
01:15:39,010 --> 01:15:45,579
problems are always kind of at a little

1318
01:15:40,270 --> 01:15:49,870
bit nasty right but anyway like I said

1319
01:15:45,579 --> 01:15:51,760
not a huge deal we'll keep playing

1320
01:15:49,869 --> 01:15:54,010
around with it and eventually we'll get

1321
01:15:51,760 --> 01:15:55,329
something that we're happy with all

1322
01:15:54,010 --> 01:15:56,920
right thank you everyone for joining me

1323
01:15:55,329 --> 01:16:00,130
for an episode of handmade hero special

1324
01:15:56,920 --> 01:16:01,119
coating with you as always if you would

1325
01:16:00,130 --> 01:16:03,190
like to follow along at home you can

1326
01:16:01,119 --> 01:16:04,390
always pro2 the game on handmade hero or

1327
01:16:03,189 --> 01:16:06,819
it comes to the source codes you can

1328
01:16:04,390 --> 01:16:08,500
follow along at home we also have a

1329
01:16:06,819 --> 01:16:10,449
forum site if you want to ask questions

1330
01:16:08,500 --> 01:16:13,180
a patreon page if you want support the

1331
01:16:10,449 --> 01:16:14,260
video series a schedule bot the tweets

1332
01:16:13,180 --> 01:16:17,260
to schedule at you if you want to catch

1333
01:16:14,260 --> 01:16:20,380
us live and an episode guide if you

1334
01:16:17,260 --> 01:16:22,780
would like to catch up on old episodes

1335
01:16:20,380 --> 01:16:26,079
that's about it for today I will be back

1336
01:16:22,779 --> 01:16:30,099
tomorrow livre 5 p.m. pacific daylight

1337
01:16:26,079 --> 01:16:31,630
time tomorrow until then I hope you guys

1338
01:16:30,100 --> 01:16:34,890
have fun programming and i will see you

1339
01:16:31,630 --> 01:16:34,890
on the Internet take it easy to everyone

