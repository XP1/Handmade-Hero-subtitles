1
00:00:02,750 --> 00:00:07,559
hello everyone and welcome to handmade

2
00:00:05,309 --> 00:00:09,329
Hero the show that could show the show

3
00:00:07,559 --> 00:00:11,550
that goes that's good the show where we

4
00:00:09,330 --> 00:00:12,929
code it would be cool to show coded

5
00:00:11,550 --> 00:00:15,599
itself

6
00:00:12,929 --> 00:00:18,420
I guess that's more of an AI show than

7
00:00:15,599 --> 00:00:20,910
anything else though really but the show

8
00:00:18,420 --> 00:00:26,609
were we code a complete game live on

9
00:00:20,910 --> 00:00:29,670
stream I we are coming back from last

10
00:00:26,609 --> 00:00:31,050
weekend when we did depth feeling in our

11
00:00:29,670 --> 00:00:32,969
renderer which allowed us to do some

12
00:00:31,050 --> 00:00:34,710
pretty cool stuff we basically have

13
00:00:32,969 --> 00:00:36,210
order independent transparency now by

14
00:00:34,710 --> 00:00:43,260
doing a few def peels which is really

15
00:00:36,210 --> 00:00:46,230
cool however we only just barely

16
00:00:43,259 --> 00:00:48,119
finished that up last time and so it's

17
00:00:46,229 --> 00:00:50,609
time now to kind of take a little bit of

18
00:00:48,119 --> 00:00:53,189
a closer look at some of it and to just

19
00:00:50,609 --> 00:00:54,269
go okay let's see can we improve some of

20
00:00:53,189 --> 00:00:56,729
these things going to clean up some of

21
00:00:54,270 --> 00:00:58,500
these things is there anything else we

22
00:00:56,729 --> 00:01:02,009
want to sort of prep for in the renderer

23
00:00:58,500 --> 00:01:03,390
before we kind of tie it off because at

24
00:01:02,009 --> 00:01:06,959
this point I'm getting pretty happy with

25
00:01:03,390 --> 00:01:08,368
it I like sort of worth that so I feel

26
00:01:06,959 --> 00:01:11,149
like it's getting into a state where I'm

27
00:01:08,368 --> 00:01:12,659
okay and let's go ahead with the game

28
00:01:11,150 --> 00:01:15,299
proper

29
00:01:12,659 --> 00:01:16,650
and because the everything seems to be

30
00:01:15,299 --> 00:01:18,780
kind of like holding together pretty

31
00:01:16,650 --> 00:01:20,790
nicely everything could always use

32
00:01:18,780 --> 00:01:23,340
improvement certainly so there's tons

33
00:01:20,790 --> 00:01:25,020
and tons of things we would rather do

34
00:01:23,340 --> 00:01:27,840
better than we are doing them obviously

35
00:01:25,019 --> 00:01:29,158
but for the time being everything you

36
00:01:27,840 --> 00:01:30,689
know that's that's the way it is in

37
00:01:29,159 --> 00:01:32,728
programming all the time right no game

38
00:01:30,688 --> 00:01:36,179
ever shipped in like the history of

39
00:01:32,728 --> 00:01:37,978
games without the programmers being like

40
00:01:36,180 --> 00:01:40,759
well you know if we'd had another month

41
00:01:37,978 --> 00:01:42,420
here's the things we would do right so

42
00:01:40,759 --> 00:01:45,329
programming is kind of one of those

43
00:01:42,420 --> 00:01:47,399
unsatisfying things in that way which is

44
00:01:45,328 --> 00:01:49,379
that you're never really done you just

45
00:01:47,399 --> 00:01:51,930
eventually decide that that's good

46
00:01:49,379 --> 00:01:55,289
enough and you can never really get to

47
00:01:51,930 --> 00:01:57,570
perfect because there's always more you

48
00:01:55,290 --> 00:02:00,630
could be doing usually at least in my

49
00:01:57,569 --> 00:02:04,978
experience anyway so let's take a look

50
00:02:00,629 --> 00:02:07,319
at where we're at today is day 383 so if

51
00:02:04,978 --> 00:02:08,580
you want to follow along with them the

52
00:02:07,319 --> 00:02:11,590
programming that I'm going to do today

53
00:02:08,580 --> 00:02:14,530
you want to load 382 source code

54
00:02:11,590 --> 00:02:16,120
into your handy editor and let's go

55
00:02:14,530 --> 00:02:18,128
ahead and and just remind ourselves

56
00:02:16,120 --> 00:02:19,329
where we are and they're specifically

57
00:02:18,128 --> 00:02:22,388
the first thing I want to take a look at

58
00:02:19,329 --> 00:02:24,519
is some artifacts and what we might be

59
00:02:22,389 --> 00:02:28,389
able to do to mitigate them or why they

60
00:02:24,519 --> 00:02:31,209
occur and so I just want to kind of get

61
00:02:28,389 --> 00:02:32,620
us back to where we are so we played

62
00:02:31,209 --> 00:02:34,569
around a little bit with some things

63
00:02:32,620 --> 00:02:36,069
like depth fogging of stuff but this is

64
00:02:34,568 --> 00:02:37,688
the game running through the depth

65
00:02:36,068 --> 00:02:39,578
feeling renderer and it's in pretty good

66
00:02:37,688 --> 00:02:43,060
shape I like I'm pretty happy with it

67
00:02:39,579 --> 00:02:46,000
and everything seems pretty nice the

68
00:02:43,060 --> 00:02:49,180
problem with it at the moment that I see

69
00:02:46,000 --> 00:02:52,628
anyway is just that when you look at

70
00:02:49,180 --> 00:02:55,780
this from the perspective of someone

71
00:02:52,628 --> 00:02:57,848
who's maybe you know a little bit of a

72
00:02:55,780 --> 00:03:00,818
stickler for artifacts what you can see

73
00:02:57,848 --> 00:03:03,339
is that in certain circumstances and

74
00:03:00,818 --> 00:03:05,649
it's not necessarily always trivial to

75
00:03:03,340 --> 00:03:07,870
get them to occur but you know you can

76
00:03:05,650 --> 00:03:09,968
there you go you can see that we get

77
00:03:07,870 --> 00:03:12,849
some odd artifacting here where we have

78
00:03:09,968 --> 00:03:14,769
like for example looks like where maybe

79
00:03:12,848 --> 00:03:16,438
there were some shadows that overlap you

80
00:03:14,769 --> 00:03:18,969
can see it there right you can see

81
00:03:16,438 --> 00:03:24,430
something kind of happening there where

82
00:03:18,969 --> 00:03:26,019
we get these black splotches and I don't

83
00:03:24,430 --> 00:03:27,549
really want to just dismiss these black

84
00:03:26,019 --> 00:03:30,908
splotches out of hand

85
00:03:27,549 --> 00:03:33,340
or you know assume that there's some

86
00:03:30,908 --> 00:03:36,310
artifacts of me because I don't really

87
00:03:33,340 --> 00:03:38,620
know exactly what they are there's a

88
00:03:36,310 --> 00:03:41,199
number of things they could be but they

89
00:03:38,620 --> 00:03:44,349
definitely have some bizarre behavior to

90
00:03:41,199 --> 00:03:47,739
them that weren't some further attention

91
00:03:44,348 --> 00:03:50,198
and I feel like we don't really have a

92
00:03:47,739 --> 00:03:52,930
solid understanding at the moment of why

93
00:03:50,199 --> 00:03:55,540
they're occurring so a couple of things

94
00:03:52,930 --> 00:03:58,620
that strike me as odd about them just to

95
00:03:55,539 --> 00:04:01,598
kind of give a little bit of a

96
00:03:58,620 --> 00:04:05,500
background as to what you know why I'm

97
00:04:01,598 --> 00:04:09,188
I'm a little skeptical here so if you

98
00:04:05,500 --> 00:04:11,739
take a look at what's going on it looks

99
00:04:09,188 --> 00:04:13,930
you know what where I would expect to

100
00:04:11,739 --> 00:04:15,370
see artifacts I think we're doing for

101
00:04:13,930 --> 00:04:16,358
depth feels maybe we're doing three I

102
00:04:15,370 --> 00:04:17,918
don't remember how many but I think

103
00:04:16,358 --> 00:04:20,048
we're doing for depth deals right now

104
00:04:17,918 --> 00:04:22,060
there's a lot of depth deals and I don't

105
00:04:20,048 --> 00:04:23,948
know if that's actually necessary you

106
00:04:22,060 --> 00:04:25,060
could see a lot of feel those black

107
00:04:23,949 --> 00:04:28,360
splotches there where you

108
00:04:25,060 --> 00:04:30,579
just at the border there but anyway I

109
00:04:28,360 --> 00:04:32,139
like look at all those particles are

110
00:04:30,579 --> 00:04:36,189
generating those black splotches at this

111
00:04:32,139 --> 00:04:38,740
at this layer so the the thing that's

112
00:04:36,189 --> 00:04:41,110
really weird about that is it feels to

113
00:04:38,740 --> 00:04:42,939
me like that maybe is some kind of an

114
00:04:41,110 --> 00:04:45,100
overflow color bug or something like

115
00:04:42,939 --> 00:04:49,600
this and not a depth peeling bug or

116
00:04:45,100 --> 00:04:51,790
something or it's like a - these are

117
00:04:49,600 --> 00:04:56,460
being equal or something bug I don't

118
00:04:51,790 --> 00:04:59,200
know but basically I feel like there is

119
00:04:56,459 --> 00:05:01,388
evidence that this is just a straight-up

120
00:04:59,199 --> 00:05:04,569
bug and not a limitation of our

121
00:05:01,389 --> 00:05:08,939
technique and the reason for that is

122
00:05:04,569 --> 00:05:11,199
obviously the solid black color it's not

123
00:05:08,939 --> 00:05:14,079
changing at all it's just a perfect

124
00:05:11,199 --> 00:05:17,409
black so it's almost like it is drawing

125
00:05:14,079 --> 00:05:21,069
something with an overflowed color value

126
00:05:17,410 --> 00:05:23,950
or an under flowed color value instead

127
00:05:21,069 --> 00:05:27,300
of the Alpha being properly zero or

128
00:05:23,949 --> 00:05:29,918
something it's showing up as black right

129
00:05:27,300 --> 00:05:32,770
and so I feel like maybe our technique

130
00:05:29,918 --> 00:05:35,680
is actually better than this and the

131
00:05:32,769 --> 00:05:37,689
shader is just wrong and it's not

132
00:05:35,680 --> 00:05:40,900
clamping something that it actually

133
00:05:37,689 --> 00:05:42,009
needs to clamp or something right the

134
00:05:40,899 --> 00:05:43,359
other thing that could be happening

135
00:05:42,009 --> 00:05:46,478
there and again I'd like I said I don't

136
00:05:43,360 --> 00:05:49,710
know is we don't have a solid argument

137
00:05:46,478 --> 00:05:53,199
right now for what happens when two

138
00:05:49,709 --> 00:05:55,418
things occupy the same Z position in our

139
00:05:53,199 --> 00:05:57,819
depth field one of them will get thrown

140
00:05:55,418 --> 00:06:01,899
away arbitrarily in that case I think

141
00:05:57,819 --> 00:06:02,699
I'm not 100% certain exactly what will

142
00:06:01,899 --> 00:06:06,849
happen in that case

143
00:06:02,699 --> 00:06:09,459
but when two things are exactly the same

144
00:06:06,850 --> 00:06:12,280
Z I don't really know that we handle

145
00:06:09,459 --> 00:06:16,930
that exactly properly now again though

146
00:06:12,279 --> 00:06:22,709
that I can't say I can think at the

147
00:06:16,930 --> 00:06:22,709
moment anyway of why that would be like

148
00:06:25,800 --> 00:06:31,228
like I just don't know why that would be

149
00:06:32,939 --> 00:06:38,978
sure black as the result right I would

150
00:06:36,788 --> 00:06:40,930
think that I would get like flickering

151
00:06:38,978 --> 00:06:44,258
or something as a result of that as the

152
00:06:40,930 --> 00:06:48,098
draw order changed or something but it

153
00:06:44,259 --> 00:06:51,908
but pure black again I can't get there

154
00:06:48,098 --> 00:06:53,408
in my head like I can't rationalize why

155
00:06:51,908 --> 00:06:54,519
we would be seeing pure black with this

156
00:06:53,408 --> 00:06:56,370
technique which makes you think

157
00:06:54,519 --> 00:06:58,258
something else is up that I don't

158
00:06:56,370 --> 00:07:02,620
understand yet right that I haven't

159
00:06:58,259 --> 00:07:04,330
investigated correctly and also most of

160
00:07:02,620 --> 00:07:07,209
the time I feel like it's just good

161
00:07:04,329 --> 00:07:09,219
policy to investigate artifacts with an

162
00:07:07,209 --> 00:07:11,228
open mind and don't assume that you know

163
00:07:09,220 --> 00:07:13,479
what the artifact is because unless it's

164
00:07:11,228 --> 00:07:15,639
glaringly obvious you might miss

165
00:07:13,478 --> 00:07:17,288
something in the code that's wrong when

166
00:07:15,639 --> 00:07:24,340
you go to like say oh this is why this

167
00:07:17,288 --> 00:07:27,149
artifact is happening right okay so you

168
00:07:24,339 --> 00:07:29,709
know just trying to figure out what the

169
00:07:27,149 --> 00:07:32,468
situation is here I want to take a

170
00:07:29,709 --> 00:07:35,680
gander kind of at how we're doing things

171
00:07:32,468 --> 00:07:38,560
like our peel compositing for example I

172
00:07:35,680 --> 00:07:46,329
want to make sure that we can't overflow

173
00:07:38,560 --> 00:07:49,149
a color value for example and so one

174
00:07:46,329 --> 00:07:53,978
thing I could do right is I could come

175
00:07:49,149 --> 00:07:57,218
through here and I could try to you know

176
00:07:53,978 --> 00:08:00,908
I could try to analyze it very carefully

177
00:07:57,218 --> 00:08:04,300
and so on and so forth but it looks like

178
00:08:00,908 --> 00:08:07,658
it's at the moment anyway oh that's good

179
00:08:04,300 --> 00:08:12,038
I like how we have a times here not a x

180
00:08:07,658 --> 00:08:13,389
equals that's going to say that that's

181
00:08:12,038 --> 00:08:18,908
not right at all that's supposed to be

182
00:08:13,389 --> 00:08:20,550
at x equals inverse a but okay so when

183
00:08:18,908 --> 00:08:22,778
we're adding things together here right

184
00:08:20,550 --> 00:08:24,879
just looking at this it seems like

185
00:08:22,778 --> 00:08:26,348
there's really not a lot of ways that

186
00:08:24,879 --> 00:08:30,069
this can go wrong you know what I'm

187
00:08:26,348 --> 00:08:32,620
saying where we've got four color values

188
00:08:30,069 --> 00:08:34,418
here and so if we assume that the

189
00:08:32,620 --> 00:08:36,070
previous stage worked which again we

190
00:08:34,418 --> 00:08:37,328
have to verify that it actually did

191
00:08:36,070 --> 00:08:39,399
because we don't know if it did or not

192
00:08:37,328 --> 00:08:41,620
but assuming that the previous stage

193
00:08:39,399 --> 00:08:44,409
worked we look at these color values and

194
00:08:41,620 --> 00:08:46,159
we say okay we're going to add these

195
00:08:44,409 --> 00:08:48,350
color values here

196
00:08:46,159 --> 00:08:52,089
and we're going to add them at the

197
00:08:48,350 --> 00:08:54,200
inverse of whatever their alpha is right

198
00:08:52,090 --> 00:08:56,030
so if we take a look at how we're

199
00:08:54,200 --> 00:08:57,410
blending stuff in here right it looks

200
00:08:56,029 --> 00:09:00,110
like that would be pretty safe from

201
00:08:57,409 --> 00:09:02,480
overflows what is because we're always

202
00:09:00,110 --> 00:09:04,310
using one minus the Alpha and the Alpha

203
00:09:02,480 --> 00:09:07,879
so we can't sum to greater than one

204
00:09:04,309 --> 00:09:10,369
right however that assumes that the

205
00:09:07,879 --> 00:09:14,389
alpha value was properly pre multiplied

206
00:09:10,370 --> 00:09:17,960
in right it assumes that pele zero one

207
00:09:14,389 --> 00:09:20,840
in two all have their alpha values pre

208
00:09:17,960 --> 00:09:23,870
multiplied into their color values so if

209
00:09:20,840 --> 00:09:26,389
we weren't pre multiplying here that

210
00:09:23,870 --> 00:09:29,179
would definitely give us the possibility

211
00:09:26,389 --> 00:09:30,830
of overflowing our color values now we

212
00:09:29,179 --> 00:09:33,139
can't start fiddling with this like I

213
00:09:30,830 --> 00:09:35,389
could multiply this by its alpha values

214
00:09:33,139 --> 00:09:37,309
on this side to ensure that that wasn't

215
00:09:35,389 --> 00:09:40,309
the case and then we would get perhaps

216
00:09:37,309 --> 00:09:42,159
incorrect color mixing if they were but

217
00:09:40,309 --> 00:09:44,479
we wouldn't necessarily see black

218
00:09:42,159 --> 00:09:47,269
however what I'm going to do instead is

219
00:09:44,480 --> 00:09:51,529
just see whether this is an overflow by

220
00:09:47,269 --> 00:09:56,000
clamping the color values right just so

221
00:09:51,529 --> 00:09:58,069
I can get some semblance of a of knowing

222
00:09:56,000 --> 00:10:01,519
whether or not I overflowed so I can

223
00:09:58,070 --> 00:10:03,440
eliminate that you know creating an out

224
00:10:01,519 --> 00:10:05,269
of bounds value as the reason that we

225
00:10:03,440 --> 00:10:07,550
were seeing black in a situation where

226
00:10:05,269 --> 00:10:10,610
maybe we shouldn't have so I'm going to

227
00:10:07,549 --> 00:10:12,679
go ahead and say GLSL 3.0 quick

228
00:10:10,610 --> 00:10:15,169
reference card as we normally use on the

229
00:10:12,679 --> 00:10:17,629
stream for looking up the function names

230
00:10:15,169 --> 00:10:21,199
so there's a function that will clamp

231
00:10:17,629 --> 00:10:24,080
things for us and this is it right you

232
00:10:21,200 --> 00:10:26,090
can kind of see here there's a zoom in

233
00:10:24,080 --> 00:10:27,310
so you can get a better view of that

234
00:10:26,090 --> 00:10:29,269
there we go

235
00:10:27,309 --> 00:10:31,129
so you can see here we've got a variety

236
00:10:29,269 --> 00:10:33,319
of functions that we can use to clamp

237
00:10:31,129 --> 00:10:35,090
things and you can see that they

238
00:10:33,320 --> 00:10:36,770
basically take the form here's the thing

239
00:10:35,090 --> 00:10:39,680
I'm going to clamp here's the minimum

240
00:10:36,769 --> 00:10:41,629
value here's the maximum value and you

241
00:10:39,679 --> 00:10:44,329
can kind of do that in a number of

242
00:10:41,629 --> 00:10:45,919
different with a number of different

243
00:10:44,330 --> 00:10:48,020
data types but it's basically the same

244
00:10:45,919 --> 00:10:49,879
thing so what I'm going to do is I'm

245
00:10:48,019 --> 00:10:51,740
going to say I want to clamp oops it's

246
00:10:49,879 --> 00:10:53,929
lower case I want to clamp that result

247
00:10:51,740 --> 00:10:55,519
color so in a pass the result color Ian

248
00:10:53,929 --> 00:10:57,179
I just want to clamp it between zero and

249
00:10:55,519 --> 00:10:59,340
one and that's all I want to do

250
00:10:57,179 --> 00:11:01,739
and so again all I'm trying to do here

251
00:10:59,340 --> 00:11:08,610
is verify that I didn't get any kind of

252
00:11:01,740 --> 00:11:11,580
weird problem where I am you know where

253
00:11:08,610 --> 00:11:12,899
I'm overshooting the color values and

254
00:11:11,580 --> 00:11:14,970
that was really kind of interesting

255
00:11:12,899 --> 00:11:17,009
there wasn't it that background changed

256
00:11:14,970 --> 00:11:20,430
which again it's kind of a red flag for

257
00:11:17,009 --> 00:11:23,429
me there so looking at it though that

258
00:11:20,429 --> 00:11:25,979
did not in any way improve our situation

259
00:11:23,429 --> 00:11:27,959
you can kind of see here that we got we

260
00:11:25,980 --> 00:11:32,399
saw some very strange values going on so

261
00:11:27,960 --> 00:11:36,180
you can see you can kind of see there we

262
00:11:32,399 --> 00:11:38,639
got the the fringing happening however

263
00:11:36,179 --> 00:11:40,439
we also get white fringing which is

264
00:11:38,639 --> 00:11:42,899
really interesting to showing through

265
00:11:40,440 --> 00:11:45,630
that great value that's very strange

266
00:11:42,899 --> 00:11:49,259
so clamping the color value between zero

267
00:11:45,629 --> 00:11:51,120
and one I'm not sure I understand why

268
00:11:49,259 --> 00:11:53,309
that would have changed our background

269
00:11:51,120 --> 00:11:56,370
color at all right because the

270
00:11:53,309 --> 00:11:58,589
background color wasn't out of range in

271
00:11:56,370 --> 00:12:01,710
that way I'm wondering if I did

272
00:11:58,590 --> 00:12:04,710
something odd here that I shouldn't have

273
00:12:01,710 --> 00:12:07,769
done I don't think there's you know as

274
00:12:04,710 --> 00:12:10,350
far as I know clamped with a vector just

275
00:12:07,769 --> 00:12:11,549
clamps the individual components so I

276
00:12:10,350 --> 00:12:14,009
don't think there's any difference

277
00:12:11,549 --> 00:12:17,159
between writing what I just wrote and

278
00:12:14,009 --> 00:12:18,929
writing this but I'll check and the min

279
00:12:17,159 --> 00:12:21,120
and Max values should be 0 to 1 that

280
00:12:18,929 --> 00:12:22,739
should be our color range that we're

281
00:12:21,120 --> 00:12:25,019
outputting as far as I know we should

282
00:12:22,740 --> 00:12:26,399
not be outputting anything else we

283
00:12:25,019 --> 00:12:30,840
should always be staying in that range

284
00:12:26,399 --> 00:12:35,179
entirely so I don't really know what's

285
00:12:30,840 --> 00:12:35,180
going on there that's awfully suspicious

286
00:12:36,830 --> 00:12:40,160
yeah that's

287
00:12:41,529 --> 00:12:46,589
I really don't know why that's happening

288
00:12:54,990 --> 00:12:57,889
hmm

289
00:12:59,600 --> 00:13:04,680
so I literally have no idea what that's

290
00:13:01,919 --> 00:13:08,039
happening I want to change the Alpha

291
00:13:04,679 --> 00:13:13,379
value to just be one here because I'm

292
00:13:08,039 --> 00:13:15,809
interested to know if there's any sort

293
00:13:13,379 --> 00:13:19,019
of play with if the Alpha has anything

294
00:13:15,809 --> 00:13:19,679
to do with it and it doesn't really look

295
00:13:19,019 --> 00:13:22,500
like it

296
00:13:19,679 --> 00:13:28,620
so the clamping on the background color

297
00:13:22,500 --> 00:13:31,649
appears to be from from the RG and B

298
00:13:28,620 --> 00:13:35,879
getting clamped so when there's only a

299
00:13:31,649 --> 00:13:40,949
peel three that's the thing that's

300
00:13:35,879 --> 00:13:44,778
getting clamped somehow how I do not

301
00:13:40,950 --> 00:13:47,400
know so let's take a look if that's

302
00:13:44,778 --> 00:13:51,080
correct so if I look at peel three which

303
00:13:47,399 --> 00:13:58,500
would just be the background anywhere

304
00:13:51,080 --> 00:14:04,200
that you can see just the background so

305
00:13:58,500 --> 00:14:07,379
this is the background here and I don't

306
00:14:04,200 --> 00:14:10,259
have any idea like how that's looking

307
00:14:07,379 --> 00:14:12,870
black like that so let's see what

308
00:14:10,259 --> 00:14:16,139
happens if I don't clamp and instead of

309
00:14:12,870 --> 00:14:20,759
clamping I just past the are the G and

310
00:14:16,139 --> 00:14:28,259
the B values here like so so there's my

311
00:14:20,759 --> 00:14:31,669
RG and B values from pl3 so even just

312
00:14:28,259 --> 00:14:35,100
straight assigning those I don't get

313
00:14:31,669 --> 00:14:37,110
what I would expect so that's really

314
00:14:35,100 --> 00:14:40,589
strange so what happens if I look at

315
00:14:37,110 --> 00:14:42,629
peel two instead in this case I must be

316
00:14:40,589 --> 00:14:46,890
really out to lunch here because I have

317
00:14:42,629 --> 00:14:50,269
no idea why this is happening so all of

318
00:14:46,889 --> 00:14:50,269
these appear to be black

319
00:14:54,759 --> 00:15:02,240
so I think that is very interesting and

320
00:14:58,490 --> 00:15:05,629
possibly has to do with our problem I

321
00:15:02,240 --> 00:15:08,889
have no idea how that clamp is resulting

322
00:15:05,629 --> 00:15:12,620
in that but it does suggest to me that

323
00:15:08,889 --> 00:15:15,289
the peel the peels are not having their

324
00:15:12,620 --> 00:15:16,129
destination alpha and their color set

325
00:15:15,289 --> 00:15:19,730
properly

326
00:15:16,129 --> 00:15:22,120
I guess because peel 3 at the very least

327
00:15:19,730 --> 00:15:26,930
anywhere where there isn't anything

328
00:15:22,120 --> 00:15:29,959
should be precisely the background color

329
00:15:26,929 --> 00:15:32,448
so let's see if we can figure out what's

330
00:15:29,958 --> 00:15:36,558
going on here I'm going to say that

331
00:15:32,448 --> 00:15:39,378
result color well here's another thing I

332
00:15:36,558 --> 00:15:42,230
can do so we've got this inverse alpha

333
00:15:39,379 --> 00:15:45,528
offset thing here let's stop doing that

334
00:15:42,230 --> 00:15:48,558
as well so let's see what peel 3 ends up

335
00:15:45,528 --> 00:15:51,828
being because peel 2 we would expect to

336
00:15:48,558 --> 00:15:55,039
be black because peel 2 is supposed to

337
00:15:51,828 --> 00:15:57,378
be premultiplied alpha right so that

338
00:15:55,039 --> 00:16:00,769
makes sense but peel 3 is supposed to be

339
00:15:57,379 --> 00:16:05,058
gray okay so it looks like that alpha

340
00:16:00,769 --> 00:16:07,688
inverse computation is just wrong so

341
00:16:05,058 --> 00:16:10,458
we've got our peel 3 here it's

342
00:16:07,688 --> 00:16:13,879
multiplying by the inverse of its alpha

343
00:16:10,458 --> 00:16:18,859
and somehow getting a totally wrong

344
00:16:13,879 --> 00:16:20,360
result there black I guess so oh you

345
00:16:18,860 --> 00:16:21,620
know what so that actually does make

346
00:16:20,360 --> 00:16:24,949
sense now that I look at how I wrote

347
00:16:21,620 --> 00:16:28,720
this so the problem there right is if

348
00:16:24,948 --> 00:16:32,958
the peel 3 alpha is actually equal to 0

349
00:16:28,720 --> 00:16:34,428
then we will multiply by 0 right but I

350
00:16:32,958 --> 00:16:38,979
guess what we really wanted to multiply

351
00:16:34,428 --> 00:16:38,980
by in this case was 1

352
00:16:42,929 --> 00:16:47,588
and you know what I think we may want to

353
00:16:45,578 --> 00:16:49,208
remove this anyway because I feel like

354
00:16:47,589 --> 00:16:51,790
the other thing I wanted to do today was

355
00:16:49,208 --> 00:16:58,888
make it so that peel 3 didn't ever have

356
00:16:51,789 --> 00:17:06,399
alpha in it at all all right so let's

357
00:16:58,889 --> 00:17:17,788
let's see here let me get rid of this

358
00:17:06,400 --> 00:17:20,380
just for a moment and so now we are able

359
00:17:17,788 --> 00:17:23,798
to see that gray I suspect right if I

360
00:17:20,380 --> 00:17:30,039
say result color you can skill 3 we

361
00:17:23,798 --> 00:17:37,538
should see that gray background yeah all

362
00:17:30,038 --> 00:17:39,369
right so that's all fine so now we're

363
00:17:37,538 --> 00:17:41,619
back to the same question we had before

364
00:17:39,369 --> 00:17:44,379
though which is where is that weird sort

365
00:17:41,619 --> 00:17:46,989
of fringing coming from but at least we

366
00:17:44,380 --> 00:17:48,880
kind of have that have that other part

367
00:17:46,990 --> 00:17:50,500
there under control all right so now let

368
00:17:48,880 --> 00:17:52,480
me see if I can put my clamp back in and

369
00:17:50,500 --> 00:17:55,079
get what I expected to get when I

370
00:17:52,480 --> 00:17:55,079
originally put it

371
00:18:05,869 --> 00:18:11,609
so now we can see that since I'm

372
00:18:08,398 --> 00:18:13,888
clamping that at least in theory those

373
00:18:11,609 --> 00:18:16,888
those black splotches are not coming

374
00:18:13,888 --> 00:18:19,069
from a color overflow here right they

375
00:18:16,888 --> 00:18:20,788
may still be being caused by something

376
00:18:19,069 --> 00:18:23,609
overflowing or something happening

377
00:18:20,788 --> 00:18:26,990
somewhere else but this particular part

378
00:18:23,609 --> 00:18:45,449
of the compositing is not the problem

379
00:18:26,990 --> 00:18:46,889
right let me put it to do here so now

380
00:18:45,450 --> 00:18:51,240
we're kind of left with a question of

381
00:18:46,888 --> 00:18:59,668
how do we get solid black at all right

382
00:18:51,240 --> 00:19:02,849
so what I am trying to determine is if

383
00:18:59,669 --> 00:19:09,049
peel 3 is going to be written directly

384
00:19:02,849 --> 00:19:09,048
right and we kind of know I mean I guess

385
00:19:09,740 --> 00:19:15,538
it's a little bit hard to say because we

386
00:19:12,659 --> 00:19:18,090
don't really know well okay here's what

387
00:19:15,538 --> 00:19:21,450
we can do so let's suppose we colored

388
00:19:18,089 --> 00:19:23,788
these peels based on where they are so

389
00:19:21,450 --> 00:19:27,000
we'll set each individual peel to a

390
00:19:23,788 --> 00:19:29,879
specific color so we can see which peels

391
00:19:27,000 --> 00:19:32,339
are which right so what I'm going to do

392
00:19:29,880 --> 00:19:35,519
is I'm going to say that peel 0 is going

393
00:19:32,339 --> 00:19:37,859
to be our blue peel and then we get you

394
00:19:35,519 --> 00:19:41,730
know to our red peel is P you know it's

395
00:19:37,859 --> 00:19:45,359
going to be blue green red is the third

396
00:19:41,730 --> 00:19:48,740
one back and then you know maybe I'll do

397
00:19:45,359 --> 00:19:52,109
yellow is the third one back and then

398
00:19:48,740 --> 00:19:54,120
red is the final peel right

399
00:19:52,109 --> 00:19:55,319
and so what we want to see here is we

400
00:19:54,119 --> 00:19:59,939
should be able to look at the screen and

401
00:19:55,319 --> 00:20:04,079
see what sort of peels were using in any

402
00:19:59,940 --> 00:20:07,440
particular you know place right and

403
00:20:04,079 --> 00:20:08,879
actually what I should do is is change

404
00:20:07,440 --> 00:20:11,548
this a little bit so what I'm going to

405
00:20:08,880 --> 00:20:13,470
do is I want to put an if 0 here around

406
00:20:11,548 --> 00:20:18,000
the real code I'm actually going to go

407
00:20:13,470 --> 00:20:19,680
ahead and do this as an if I think so

408
00:20:18,000 --> 00:20:26,910
I'm going to do something like

409
00:20:19,680 --> 00:20:30,150
I cannot think if there's any way I can

410
00:20:26,910 --> 00:20:45,390
get that third peel to be anything in

411
00:20:30,150 --> 00:20:48,480
particular we just have one more appeal

412
00:20:45,390 --> 00:20:50,430
than we have colors to work with here so

413
00:20:48,480 --> 00:20:52,769
let's try this let's get rid of peel 3

414
00:20:50,430 --> 00:20:54,450
for the moment I guess and we'll just

415
00:20:52,769 --> 00:20:56,759
use the standard composite but we'll do

416
00:20:54,450 --> 00:20:58,650
it with red green and blue assigned to

417
00:20:56,759 --> 00:21:00,150
the different peels and now we should be

418
00:20:58,650 --> 00:21:03,750
able to do is look at the color of an

419
00:21:00,150 --> 00:21:05,820
individual pixel and see what the

420
00:21:03,750 --> 00:21:10,769
contribution of each peel is by how much

421
00:21:05,819 --> 00:21:12,059
of each channel there is in it right so

422
00:21:10,769 --> 00:21:14,190
when you look at the screen now what you

423
00:21:12,059 --> 00:21:16,200
can see is the overwhelming majority of

424
00:21:14,190 --> 00:21:19,100
screen is blue and that makes sense

425
00:21:16,200 --> 00:21:23,809
because that's the front most peel right

426
00:21:19,099 --> 00:21:27,059
and what you can see basically you know

427
00:21:23,809 --> 00:21:29,909
when when you get to 2 like when you're

428
00:21:27,059 --> 00:21:32,129
looking at shadows for example or when

429
00:21:29,910 --> 00:21:35,340
you're looking at the most a couple

430
00:21:32,130 --> 00:21:37,890
different overlapping heads what you can

431
00:21:35,339 --> 00:21:41,490
see there is you can see that it becomes

432
00:21:37,890 --> 00:21:44,100
cyan which means that PL 2 is also

433
00:21:41,490 --> 00:21:48,470
contributing which is again exactly what

434
00:21:44,099 --> 00:21:52,109
we'd expect and where you see white

435
00:21:48,470 --> 00:21:55,529
white means that either we have all the

436
00:21:52,109 --> 00:21:57,599
peels contributing or we have three of

437
00:21:55,529 --> 00:21:59,940
the peels contributing unfortunately we

438
00:21:57,599 --> 00:22:03,959
can't really tell the difference between

439
00:21:59,940 --> 00:22:06,240
peeled two contributing and peel 2 and

440
00:22:03,960 --> 00:22:09,420
three contributing because we don't have

441
00:22:06,240 --> 00:22:17,569
another color channel for for you know

442
00:22:09,420 --> 00:22:22,259
for peel for peel 3 which we did okay so

443
00:22:17,569 --> 00:22:24,899
you know what we can see here is I think

444
00:22:22,259 --> 00:22:28,379
we can at least identify where those

445
00:22:24,900 --> 00:22:31,100
black splotches were are definitely

446
00:22:28,380 --> 00:22:31,100
where

447
00:22:37,700 --> 00:22:41,420
yeah are definitely where we had a lot

448
00:22:40,400 --> 00:22:44,330
of overlapping peels

449
00:22:41,420 --> 00:22:53,240
let me also do this let me multiply each

450
00:22:44,329 --> 00:22:58,339
one of these by its alpha correctly like

451
00:22:53,240 --> 00:23:02,329
so and that way I can also in it won't

452
00:22:58,339 --> 00:23:06,490
if peel 0 is non-contributing we won't

453
00:23:02,329 --> 00:23:06,490
see it right

454
00:23:16,579 --> 00:23:24,710
so that's kind of odd I think I did I

455
00:23:20,990 --> 00:23:25,940
mess that up so that suggested me again

456
00:23:24,710 --> 00:23:27,470
that there's something weird going on

457
00:23:25,940 --> 00:23:32,029
here because like take a look up here

458
00:23:27,470 --> 00:23:36,970
right that should just be blue because

459
00:23:32,029 --> 00:23:40,460
it's pretty much a frontmost thing and

460
00:23:36,970 --> 00:23:42,589
if we turn off the shader we don't see

461
00:23:40,460 --> 00:23:43,880
like what we're looking at there is we

462
00:23:42,589 --> 00:23:47,480
see that we're supposed to be seeing the

463
00:23:43,880 --> 00:23:50,540
second def peel is primal but I don't

464
00:23:47,480 --> 00:23:52,069
know why that would be the case oh I

465
00:23:50,539 --> 00:23:55,039
dunno okay now that's actually correct

466
00:23:52,069 --> 00:23:57,619
so that's where the shadow of this tree

467
00:23:55,039 --> 00:23:59,539
is and this tree which is actually

468
00:23:57,619 --> 00:24:05,179
getting drawn behind it is the second

469
00:23:59,539 --> 00:24:07,549
def peel and so it is you know it is

470
00:24:05,180 --> 00:24:09,680
showing itself through because the

471
00:24:07,549 --> 00:24:11,329
shadow was what was behind it and then

472
00:24:09,680 --> 00:24:14,210
where the two shadows are that's where

473
00:24:11,329 --> 00:24:17,960
we get that lid so that's okay it all

474
00:24:14,210 --> 00:24:19,610
makes reasonable sense actually so now

475
00:24:17,960 --> 00:24:22,990
if we look at what we're seeing here

476
00:24:19,609 --> 00:24:26,659
it's pretty clear that the the place

477
00:24:22,990 --> 00:24:30,799
where we get the error is where we have

478
00:24:26,660 --> 00:24:33,590
lots of peels overlapping right so you

479
00:24:30,799 --> 00:24:36,819
can see we get sort of these these def

480
00:24:33,589 --> 00:24:39,559
peels happen here what's interesting is

481
00:24:36,819 --> 00:24:42,679
something feels off about this because

482
00:24:39,559 --> 00:24:45,889
these values seem to have faded out

483
00:24:42,680 --> 00:24:47,720
entirely from alpha I mean maybe they're

484
00:24:45,890 --> 00:24:49,640
just really low but it seems like

485
00:24:47,720 --> 00:24:54,769
they've faded out almost entirely and

486
00:24:49,640 --> 00:24:57,410
yet this is def peel 3 at this point but

487
00:24:54,769 --> 00:25:00,079
are there really two things that are

488
00:24:57,410 --> 00:25:02,890
alpha out there that seems a little bit

489
00:25:00,079 --> 00:25:02,889
strange to me

490
00:25:05,019 --> 00:25:14,539
it seems like our fogging is not able to

491
00:25:09,920 --> 00:25:16,190
get the Alpha to go quite to zero but

492
00:25:14,539 --> 00:25:19,399
but that front clip plane should be

493
00:25:16,190 --> 00:25:21,200
doing that so it's a little bit strange

494
00:25:19,400 --> 00:25:26,870
so we take a look at what's happening

495
00:25:21,200 --> 00:25:30,250
here we've got our got our code here for

496
00:25:26,869 --> 00:25:30,250
how we're doing our alpha right

497
00:25:37,259 --> 00:25:44,049
and you can see us modifying the frag

498
00:25:39,970 --> 00:25:46,809
the output fragment color by the the fog

499
00:25:44,049 --> 00:25:49,710
distance here by doing a clamped range

500
00:25:46,809 --> 00:25:59,200
map and in theory you know that zero

501
00:25:49,710 --> 00:26:01,000
when we get zeros there that should that

502
00:25:59,200 --> 00:26:03,670
should kill it I'm interested to know

503
00:26:01,000 --> 00:26:05,319
what happens if I up if I increase our

504
00:26:03,670 --> 00:26:07,570
threshold a little bit and say let's

505
00:26:05,319 --> 00:26:10,049
kill things a little prematurely right

506
00:26:07,569 --> 00:26:12,990
let's kill things a little bit before

507
00:26:10,049 --> 00:26:16,569
their alpha value actually gets to zero

508
00:26:12,990 --> 00:26:22,390
and let me see what happens there with

509
00:26:16,569 --> 00:26:26,230
those red values see that's just really

510
00:26:22,390 --> 00:26:28,240
suspicious right that is just that does

511
00:26:26,230 --> 00:26:29,920
not make sense to me because now I'm

512
00:26:28,240 --> 00:26:33,309
killing I'm killing it Oh point one

513
00:26:29,920 --> 00:26:37,600
alpha and how am I seeing this at all

514
00:26:33,309 --> 00:26:47,589
without something in front of it at that

515
00:26:37,599 --> 00:26:52,359
point like why is that thing on depth

516
00:26:47,589 --> 00:26:54,669
appeal three if I can't see anything in

517
00:26:52,359 --> 00:26:58,689
front of it if the Alpha gets clamped

518
00:26:54,670 --> 00:26:59,400
off at 0.1 that just doesn't make any

519
00:26:58,690 --> 00:27:01,809
sense

520
00:26:59,400 --> 00:27:09,810
right if the Alpha is getting clamped

521
00:27:01,809 --> 00:27:09,809
off at 0.1 something's busted

522
00:27:15,839 --> 00:27:25,389
hmm I say I mean let's go even further

523
00:27:22,829 --> 00:27:27,668
let's say that the Alpha has to be

524
00:27:25,390 --> 00:27:33,429
extreme like you've got to be half

525
00:27:27,669 --> 00:27:39,840
visible or we will not show you now what

526
00:27:33,429 --> 00:27:39,840
happens same thing right

527
00:27:44,750 --> 00:27:50,759
so I'm miss concerns me quite a bit

528
00:27:48,509 --> 00:27:56,670
right like something's happening that I

529
00:27:50,759 --> 00:28:01,400
don't understand for sure because unless

530
00:27:56,670 --> 00:28:04,710
I'm really unless I really have it wrong

531
00:28:01,400 --> 00:28:15,600
if I click if I'm saying that the

532
00:28:04,710 --> 00:28:19,049
texture oh okay I see I see now this is

533
00:28:15,599 --> 00:28:23,429
the problem right here this is the

534
00:28:19,049 --> 00:28:26,819
problem all along so the texture sample

535
00:28:23,430 --> 00:28:29,730
is just the texture color so we're not

536
00:28:26,819 --> 00:28:32,879
discarding on alpha anymore we forgot to

537
00:28:29,730 --> 00:28:39,299
do that we need to move the mod color up

538
00:28:32,880 --> 00:28:41,790
and we need to we need to compute that

539
00:28:39,299 --> 00:28:44,069
right here so we need to take the

540
00:28:41,789 --> 00:28:51,230
texture sample then we need to do the

541
00:28:44,069 --> 00:28:53,609
multiply right to figure that out now I

542
00:28:51,230 --> 00:28:55,589
don't really know how the shader the

543
00:28:53,609 --> 00:28:59,639
shader compiler will probably reorganize

544
00:28:55,589 --> 00:29:03,779
the scalar stuff in here so I'm guessing

545
00:28:59,640 --> 00:29:06,930
that really all I want to do is do this

546
00:29:03,779 --> 00:29:09,089
outside so because you know at the end

547
00:29:06,930 --> 00:29:10,380
of the day the shaders have to exude

548
00:29:09,089 --> 00:29:12,929
everything in parallel anyway so can

549
00:29:10,380 --> 00:29:14,400
only early out in some certain

550
00:29:12,930 --> 00:29:19,380
circumstances so I'm going to move those

551
00:29:14,400 --> 00:29:21,660
before the if and here middle oh that

552
00:29:19,380 --> 00:29:24,030
texture sample do the srgb fix-up if we

553
00:29:21,660 --> 00:29:26,600
need to compute that mod color and then

554
00:29:24,029 --> 00:29:29,549
I'm going to talk about mod color alpha

555
00:29:26,599 --> 00:29:31,379
so now with mod color alpha we're

556
00:29:29,549 --> 00:29:33,750
actually taking that fog into account

557
00:29:31,380 --> 00:29:35,490
see we were fogging things out but then

558
00:29:33,750 --> 00:29:38,759
we weren't taking them out of the depth

559
00:29:35,490 --> 00:29:41,849
peel and that's just totally wrong you

560
00:29:38,759 --> 00:29:44,490
know I'm saying so now those should not

561
00:29:41,849 --> 00:29:47,579
be perfect okay perfect perfect perfect

562
00:29:44,490 --> 00:29:49,259
so that was really stressing our depth

563
00:29:47,579 --> 00:29:51,720
peeling out in a way that it never

564
00:29:49,259 --> 00:29:54,569
should have so let's take a look if this

565
00:29:51,720 --> 00:29:56,299
improves our situation at all in the

566
00:29:54,569 --> 00:29:58,279
case where we are

567
00:29:56,299 --> 00:30:00,950
Bing alpha normally so now let's take a

568
00:29:58,279 --> 00:30:02,809
look at what happens in there and now

569
00:30:00,950 --> 00:30:04,670
it's looking a lot better right in there

570
00:30:02,809 --> 00:30:06,319
and I don't know if it's good enough but

571
00:30:04,670 --> 00:30:09,400
steadily looking better so let's take a

572
00:30:06,319 --> 00:30:09,399
quick peek back

573
00:30:10,750 --> 00:30:17,710
at the at the rendered version just to

574
00:30:14,299 --> 00:30:20,359
see where we're at in those terms right

575
00:30:17,710 --> 00:30:25,970
so now let's let's go ahead and we'll

576
00:30:20,359 --> 00:30:29,089
hop down here like so ah and so now you

577
00:30:25,970 --> 00:30:32,089
can see we've really mitigated it quite

578
00:30:29,089 --> 00:30:35,059
a bit it still happens a little you can

579
00:30:32,089 --> 00:30:37,009
see it happening right there just at

580
00:30:35,059 --> 00:30:39,589
that at that one at that changeover

581
00:30:37,009 --> 00:30:41,509
point right where I guess we've got too

582
00:30:39,589 --> 00:30:44,209
many things alpha it up on top of each

583
00:30:41,509 --> 00:30:48,410
other I'm not entirely sure right

584
00:30:44,210 --> 00:30:54,829
exactly what's causing that but it's

585
00:30:48,410 --> 00:31:02,660
pretty close you know I'm saying it's

586
00:30:54,829 --> 00:31:04,789
getting pretty close okay so the only

587
00:31:02,660 --> 00:31:06,050
problem now that we have besides the

588
00:31:04,789 --> 00:31:09,920
fact that we still have a little bit of

589
00:31:06,049 --> 00:31:11,899
that artifact there is that I still am

590
00:31:09,920 --> 00:31:14,990
not 100% confident I know what the

591
00:31:11,900 --> 00:31:16,130
artifact actually is right and so that's

592
00:31:14,990 --> 00:31:17,900
the reason I originally started this

593
00:31:16,130 --> 00:31:19,790
investigation it's not just to fix it

594
00:31:17,900 --> 00:31:22,340
but to figure out what I'm not

595
00:31:19,789 --> 00:31:24,139
understanding properly so I now have

596
00:31:22,339 --> 00:31:26,470
some information which is it is a place

597
00:31:24,140 --> 00:31:36,620
where there are a lot of depth fields

598
00:31:26,470 --> 00:31:38,870
and so what I'm wondering is I guess is

599
00:31:36,619 --> 00:31:41,359
that just a place where there's too many

600
00:31:38,869 --> 00:31:48,769
deaf deals so the bottom most def peel

601
00:31:41,359 --> 00:31:51,289
is not enough information or something

602
00:31:48,769 --> 00:31:56,539
like that I'm not sure so I'm going to

603
00:31:51,289 --> 00:32:00,819
propose another test that we should do

604
00:31:56,539 --> 00:32:00,819
here which is to see

605
00:32:03,099 --> 00:32:09,459
to see where we're seeing the final

606
00:32:06,278 --> 00:32:16,329
depth peel so to do that what I want to

607
00:32:09,460 --> 00:32:20,710
do is I want to say basically peel three

608
00:32:16,329 --> 00:32:26,319
in all cases is going to be you know

609
00:32:20,710 --> 00:32:30,240
bright pink right so I can see where the

610
00:32:26,319 --> 00:32:30,240
final depth peel shows through

611
00:32:31,079 --> 00:32:36,099
so as I'm hopping around here I can I

612
00:32:34,179 --> 00:32:38,048
could see that the hero actually sees

613
00:32:36,099 --> 00:32:39,459
the final depth field where it's got a

614
00:32:38,048 --> 00:32:42,490
lot of things stacked on top of each

615
00:32:39,460 --> 00:32:44,950
other actually but otherwise it's pretty

616
00:32:42,490 --> 00:32:46,240
much just the background now what I'm

617
00:32:44,950 --> 00:32:49,480
expecting to see is when I come through

618
00:32:46,240 --> 00:32:52,179
here I should see purple at the place

619
00:32:49,480 --> 00:32:55,440
where we flash and yes we do right you

620
00:32:52,179 --> 00:32:55,440
can see that purple there

621
00:33:06,769 --> 00:33:13,170
so that seems like we just have too many

622
00:33:10,619 --> 00:33:17,250
depth peels are sorry too few depth

623
00:33:13,170 --> 00:33:21,380
peels for the level of complexity that

624
00:33:17,250 --> 00:33:21,380
we're looking at depth complexity

625
00:33:38,269 --> 00:34:00,349
but I'm really not sure hmm so a couple

626
00:33:52,220 --> 00:34:05,079
things we could do here right one thing

627
00:34:00,349 --> 00:34:07,129
that we can do here is we could say well

628
00:34:05,079 --> 00:34:09,319
let's just increase the number of deaf

629
00:34:07,130 --> 00:34:11,570
peals right we always def peal til we

630
00:34:09,320 --> 00:34:13,369
get something but the problem with that

631
00:34:11,570 --> 00:34:16,190
is it has this nasty failure case of

632
00:34:13,369 --> 00:34:17,480
like well you know when things just keep

633
00:34:16,190 --> 00:34:20,539
stacking up on top of each other

634
00:34:17,480 --> 00:34:22,820
eventually we're going to fail right so

635
00:34:20,539 --> 00:34:24,199
what we'd rather do is have it so that

636
00:34:22,820 --> 00:34:27,320
once we get to a number of things

637
00:34:24,199 --> 00:34:30,710
stacked on top of each other like that

638
00:34:27,320 --> 00:34:34,039
we are you know we're going to degrade

639
00:34:30,710 --> 00:34:37,490
more gracefully now one of the things I

640
00:34:34,039 --> 00:34:40,009
would point out in that situation is by

641
00:34:37,489 --> 00:34:42,618
the time you get to 4 def peels you know

642
00:34:40,010 --> 00:34:45,230
you can't perceive the results very

643
00:34:42,619 --> 00:34:46,579
accurately at that point you know the

644
00:34:45,230 --> 00:34:49,668
person looking at it you're blending

645
00:34:46,579 --> 00:34:52,309
four layers together at that point it's

646
00:34:49,668 --> 00:34:56,269
just it seems to me like that's just

647
00:34:52,309 --> 00:34:58,369
excessive right because the visual

648
00:34:56,269 --> 00:34:59,960
fidelity at that point for you is not

649
00:34:58,369 --> 00:35:02,510
good enough you know it's not going to

650
00:34:59,960 --> 00:35:04,970
be good enough to really perceive how

651
00:35:02,510 --> 00:35:07,850
that blend is being done so it feels to

652
00:35:04,969 --> 00:35:10,569
me like what you probably would want to

653
00:35:07,849 --> 00:35:10,569
do there is

654
00:35:17,039 --> 00:35:22,710
is produce something that's going to

655
00:35:22,920 --> 00:35:27,119
properly average things together

656
00:35:29,039 --> 00:35:33,880
Russians they properly produce something

657
00:35:31,420 --> 00:35:37,028
that like say you know deaf peel three

658
00:35:33,880 --> 00:35:40,088
is always the an opaque background color

659
00:35:37,028 --> 00:35:41,949
that is whatever the unit whatever

660
00:35:40,088 --> 00:35:45,038
however far back we had to go to get

661
00:35:41,949 --> 00:35:48,429
something opaque so you know past one is

662
00:35:45,039 --> 00:35:51,460
the closest thing past zero is the

663
00:35:48,429 --> 00:35:57,338
closest opaque thing and then like in

664
00:35:51,460 --> 00:36:01,449
the middle is just a averaging together

665
00:35:57,338 --> 00:36:03,940
of their results or something you know

666
00:36:01,449 --> 00:36:06,218
what I mean so like in between is all

667
00:36:03,940 --> 00:36:10,539
the things that are alpha'd and they're

668
00:36:06,219 --> 00:36:12,700
just averaged together by their alpha or

669
00:36:10,539 --> 00:36:13,059
something like this do you know what I

670
00:36:12,699 --> 00:36:16,379
mean

671
00:36:13,059 --> 00:36:18,729
because essentially what we know is you

672
00:36:16,380 --> 00:36:20,440
know when we've got things stacked on

673
00:36:18,728 --> 00:36:27,848
top of each other we're always going to

674
00:36:20,440 --> 00:36:29,338
have a situation where we're always

675
00:36:27,849 --> 00:36:36,338
going to have a situation that

676
00:36:29,338 --> 00:36:38,108
fundamentally looks like this there's

677
00:36:36,338 --> 00:36:39,699
going to be an opaque color even if

678
00:36:38,108 --> 00:36:42,068
that's just a background color but it's

679
00:36:39,699 --> 00:36:43,808
whatever the last solid object was right

680
00:36:42,068 --> 00:36:47,679
and then there's going to be the

681
00:36:43,809 --> 00:36:49,509
frontmost pixel right and then in here

682
00:36:47,679 --> 00:36:51,548
if there's just a bunch of alphab stuff

683
00:36:49,509 --> 00:36:53,650
because if it wasn't outside we don't

684
00:36:51,548 --> 00:36:54,969
need to keep DES peeling right if it

685
00:36:53,650 --> 00:36:57,278
wasn't outside you're never going to see

686
00:36:54,969 --> 00:36:59,769
what's behind it so we always have

687
00:36:57,278 --> 00:37:02,048
between 0 and n alpha things in the

688
00:36:59,768 --> 00:37:03,218
middle and we've got a front in the back

689
00:37:02,048 --> 00:37:06,369
that kind of sandwich them together

690
00:37:03,219 --> 00:37:08,739
right this is presumably the most

691
00:37:06,369 --> 00:37:10,778
important thing usually unless alpha

692
00:37:08,739 --> 00:37:12,309
gets really low but then all these are

693
00:37:10,778 --> 00:37:15,099
averaged together or whatever and then

694
00:37:12,309 --> 00:37:16,420
we've got this you know opaque thing so

695
00:37:15,099 --> 00:37:19,088
I'm wondering if we could do something

696
00:37:16,420 --> 00:37:22,630
where we just mix everything together in

697
00:37:19,088 --> 00:37:24,338
here or something like that and then

698
00:37:22,630 --> 00:37:25,989
guarantee that we always get one opaque

699
00:37:24,338 --> 00:37:28,880
thing back here and then you know

700
00:37:25,989 --> 00:37:31,849
composite those together

701
00:37:28,880 --> 00:37:33,798
and basically what that would mean is

702
00:37:31,849 --> 00:37:36,650
you know right now the way we composite

703
00:37:33,798 --> 00:37:38,960
things together in alpha blending in the

704
00:37:36,650 --> 00:37:45,829
alpha blending world is we say something

705
00:37:38,960 --> 00:37:47,568
like well you know we've got a like a

706
00:37:45,829 --> 00:37:49,700
front and a back

707
00:37:47,568 --> 00:37:51,978
right we've got the thing that's like in

708
00:37:49,699 --> 00:37:54,169
front of and the thing that's behind and

709
00:37:51,978 --> 00:37:56,538
we're going to blend those together so

710
00:37:54,170 --> 00:37:59,950
typically what we do is we say well the

711
00:37:56,539 --> 00:38:03,109
Alpha value of the front times itself

712
00:37:59,949 --> 00:38:04,879
plus 1 minus the alpha value of the

713
00:38:03,108 --> 00:38:08,630
front and I could be more specific about

714
00:38:04,880 --> 00:38:11,329
that times the back is how I cover this

715
00:38:08,630 --> 00:38:12,858
is like you know on top of I think is

716
00:38:11,329 --> 00:38:15,019
how it's normally described in terms of

717
00:38:12,858 --> 00:38:17,498
what the shading operation is like I'm

718
00:38:15,018 --> 00:38:21,949
going to put this on top of that right

719
00:38:17,498 --> 00:38:27,548
so as the Alpha of this fades out I get

720
00:38:21,949 --> 00:38:30,139
you know more of this and vice versa now

721
00:38:27,548 --> 00:38:33,318
we could choose to mix things together

722
00:38:30,139 --> 00:38:36,798
in a way that doesn't have an order

723
00:38:33,318 --> 00:38:39,528
dependence to it right we could choose

724
00:38:36,798 --> 00:38:45,559
to mix things together by saying all

725
00:38:39,528 --> 00:38:56,748
right what if we just did you know a F +

726
00:38:45,559 --> 00:38:58,789
BF I'm sorry a F plus a B right so we

727
00:38:56,748 --> 00:39:00,679
took the alpha from the front let's let

728
00:38:58,789 --> 00:39:03,109
it by the front to the alpha in the back

729
00:39:00,679 --> 00:39:04,848
multiplied it by at the back right which

730
00:39:03,108 --> 00:39:08,119
is what we're doing accumulate these

731
00:39:04,849 --> 00:39:10,759
together into something to produce

732
00:39:08,119 --> 00:39:16,190
basically an average right if we just

733
00:39:10,759 --> 00:39:19,338
average things together and we just

734
00:39:16,190 --> 00:39:22,278
accumulate these things together and

735
00:39:19,338 --> 00:39:25,969
then normalize at the end so instead of

736
00:39:22,278 --> 00:39:28,998
you know a - 8 bit per channel frame

737
00:39:25,969 --> 00:39:31,579
buffers that we accumulate into we'd

738
00:39:28,998 --> 00:39:33,318
have 2 16 bits per channel frame buffers

739
00:39:31,579 --> 00:39:35,298
or something like this that we would

740
00:39:33,318 --> 00:39:40,159
accumulate into and then we would

741
00:39:35,298 --> 00:39:44,750
renormalize at the end right

742
00:39:40,159 --> 00:39:46,759
now I don't know if that really makes a

743
00:39:44,750 --> 00:39:48,800
lot of sense because it severely limits

744
00:39:46,760 --> 00:40:04,330
the kinds of effects we can do with our

745
00:39:48,800 --> 00:40:04,330
alpha so it's a little hard to say

746
00:40:12,900 --> 00:40:17,670
I'm just not sure it's obviously not as

747
00:40:15,809 --> 00:40:21,660
good as depth peeling in terms of

748
00:40:17,670 --> 00:40:23,909
getting that coverage correct but it's

749
00:40:21,659 --> 00:40:25,409
something to consider or perhaps

750
00:40:23,909 --> 00:40:28,440
something to just try and see what it

751
00:40:25,409 --> 00:40:29,399
does however that said again I still

752
00:40:28,440 --> 00:40:32,940
want to make sure that I actually

753
00:40:29,400 --> 00:40:34,349
understand this correctly and so let's

754
00:40:32,940 --> 00:40:35,940
think about let's see if we can try to

755
00:40:34,349 --> 00:40:39,809
figure out what's actually happening

756
00:40:35,940 --> 00:40:44,480
here in terms of where the bug part

757
00:40:39,809 --> 00:40:47,990
comes from so let's switch back to the

758
00:40:44,480 --> 00:40:47,990
regular view

759
00:40:58,849 --> 00:41:03,380
and so as I come through here I want to

760
00:41:01,219 --> 00:41:11,059
be able to see that glitch it's really

761
00:41:03,380 --> 00:41:14,360
kind of hard to see the glitch now but

762
00:41:11,059 --> 00:41:21,559
you know I can kind of I can kind of get

763
00:41:14,360 --> 00:41:23,539
between it there there's no real frame I

764
00:41:21,559 --> 00:41:26,420
guess that I can find that I can hold on

765
00:41:23,539 --> 00:41:29,119
it unfortunately maybe if I well

766
00:41:26,420 --> 00:41:30,680
probably want but I'll try hopping down

767
00:41:29,119 --> 00:41:33,009
one more flight of stairs because maybe

768
00:41:30,679 --> 00:41:33,009
that will work

769
00:41:39,650 --> 00:41:46,930
and I can't I unfortunately can't quite

770
00:41:43,070 --> 00:41:46,930
get it to reproduce that

771
00:42:07,539 --> 00:42:12,250
hmm well it would be nice if we get

772
00:42:10,869 --> 00:42:15,009
three percent maybe I should add some

773
00:42:12,250 --> 00:42:16,630
kind of a pause or because you know I

774
00:42:15,010 --> 00:42:19,120
can use the debug camera but then

775
00:42:16,630 --> 00:42:21,820
fogging is turned off on the debug

776
00:42:19,119 --> 00:42:23,859
camera unfortunately so I guess I could

777
00:42:21,820 --> 00:42:25,210
turn fogging on to the diba camera but

778
00:42:23,860 --> 00:42:26,410
the whole point of the debug camera so

779
00:42:25,210 --> 00:42:29,760
that we can expect things so it

780
00:42:26,409 --> 00:42:34,859
typically I have it turned the fog off

781
00:42:29,760 --> 00:42:41,830
so we can see the status of things right

782
00:42:34,860 --> 00:42:43,870
but uh but yeah we know that those areas

783
00:42:41,829 --> 00:42:47,170
are the regions where we're seeing peel

784
00:42:43,869 --> 00:42:51,789
3 earlier right we're running out of

785
00:42:47,170 --> 00:42:53,889
deaf peels but and so I guess the

786
00:42:51,789 --> 00:42:56,829
problem is you know if I had to sort of

787
00:42:53,889 --> 00:42:58,599
hand wave it here the problem is that

788
00:42:56,829 --> 00:43:01,269
there's too many things overlapping this

789
00:42:58,599 --> 00:43:03,400
area and because there's too many things

790
00:43:01,269 --> 00:43:05,530
overlapping that area what that means is

791
00:43:03,400 --> 00:43:08,170
that you never get to the background

792
00:43:05,530 --> 00:43:09,730
grey color so even though you know

793
00:43:08,170 --> 00:43:11,590
somebody in the background there has an

794
00:43:09,730 --> 00:43:13,090
alpha value that's actually fairly low

795
00:43:11,590 --> 00:43:16,240
and you should be seeing a fair bit of

796
00:43:13,090 --> 00:43:20,519
grey through it there is no gray coming

797
00:43:16,239 --> 00:43:27,099
in because peel 3 is still alpha doubt

798
00:43:20,519 --> 00:43:29,500
right so I wonder you know what we could

799
00:43:27,099 --> 00:43:31,000
try is just sort of a simpler version of

800
00:43:29,500 --> 00:43:33,519
the scheme I outline which is saying

801
00:43:31,000 --> 00:43:36,070
well let's do our def peeling but let's

802
00:43:33,519 --> 00:43:42,820
make sure we always get eventually back

803
00:43:36,070 --> 00:43:45,130
to an opaque color you know and maybe

804
00:43:42,820 --> 00:43:46,450
that helps reduce those artifacts you

805
00:43:45,130 --> 00:43:48,670
know I don't know maybe it'll just

806
00:43:46,449 --> 00:43:50,139
introduce different artifacts but I'm

807
00:43:48,670 --> 00:43:54,519
just interested to know like what if we

808
00:43:50,139 --> 00:43:59,049
had our def peel you know do something

809
00:43:54,519 --> 00:44:01,960
where it would be able to throw out

810
00:43:59,050 --> 00:44:04,210
things based on a programmatic alpha so

811
00:44:01,960 --> 00:44:07,150
for example here's the fragment shader

812
00:44:04,210 --> 00:44:08,860
and you know I've got some stuff in here

813
00:44:07,150 --> 00:44:11,320
like the fog color that's coming in from

814
00:44:08,860 --> 00:44:16,019
the outside I'm introduced another one

815
00:44:11,320 --> 00:44:20,110
which is just an f32 that's the min

816
00:44:16,019 --> 00:44:21,730
alpha value right I

817
00:44:20,110 --> 00:44:23,320
and maybe I want to do that a little bit

818
00:44:21,730 --> 00:44:28,539
differently maybe I want to do that and

819
00:44:23,320 --> 00:44:32,140
say that it's the well because I want to

820
00:44:28,539 --> 00:44:33,610
make it have to be exactly one so I

821
00:44:32,139 --> 00:44:35,109
guess maybe I don't really want to do

822
00:44:33,610 --> 00:44:37,870
that maybe I want two different versions

823
00:44:35,110 --> 00:44:39,220
of the shader I don't know because

824
00:44:37,869 --> 00:44:41,799
basically what I want to do is I want to

825
00:44:39,219 --> 00:44:44,469
change this line so that instead of mod

826
00:44:41,800 --> 00:44:48,570
color a is greater than zero what I want

827
00:44:44,469 --> 00:44:50,949
to do is create to be equal to one right

828
00:44:48,570 --> 00:44:53,140
but you know I don't know maybe that's

829
00:44:50,949 --> 00:44:55,839
too aggressive maybe what I really want

830
00:44:53,139 --> 00:45:04,379
to do is just make it so that that's

831
00:44:55,840 --> 00:45:04,380
actually just some high number

832
00:45:09,670 --> 00:45:16,659
all right well let's do that let's just

833
00:45:12,130 --> 00:45:22,720
say we do f/32 which is just going to be

834
00:45:16,659 --> 00:45:25,058
an alpha threshold and the alpha

835
00:45:22,719 --> 00:45:27,159
threshold value is just going to be the

836
00:45:25,059 --> 00:45:28,990
thing that we use to quit so be zero on

837
00:45:27,159 --> 00:45:30,429
the first couple def fields but then the

838
00:45:28,989 --> 00:45:32,618
final depth peel will jack it up to

839
00:45:30,429 --> 00:45:34,239
something high so we're only going to

840
00:45:32,619 --> 00:45:36,460
record into that found ethical guest

841
00:45:34,239 --> 00:45:37,989
skip anybody who might have been in

842
00:45:36,460 --> 00:45:39,849
front but just who had an alpha

843
00:45:37,989 --> 00:45:46,298
threshold that was just simply too low

844
00:45:39,849 --> 00:45:48,010
right so I'm going to go in here and

845
00:45:46,298 --> 00:45:50,699
just make sure that we can actually get

846
00:45:48,010 --> 00:45:54,309
that value so here's our Z bias program

847
00:45:50,699 --> 00:45:59,169
I'm going to add it here to alpha

848
00:45:54,309 --> 00:46:13,089
threshold and I need to grab it at some

849
00:45:59,170 --> 00:46:14,559
point as well so that'll get us the

850
00:46:13,088 --> 00:46:17,588
location of it and then all we need to

851
00:46:14,559 --> 00:46:20,589
do is set it and so up here when we're

852
00:46:17,588 --> 00:46:23,190
doing that that peeling stuff basically

853
00:46:20,588 --> 00:46:26,849
what we want to do is say well okay

854
00:46:23,190 --> 00:46:30,130
let's take a look at the peel index and

855
00:46:26,849 --> 00:46:33,278
we want to set this based on that so

856
00:46:30,130 --> 00:46:44,500
what I want to do is when we do use

857
00:46:33,278 --> 00:46:47,369
program begin here after that let's see

858
00:46:44,500 --> 00:46:47,369
here we've got that

859
00:46:53,539 --> 00:46:58,380
here's our use we're going to begin with

860
00:46:55,440 --> 00:47:00,088
the render setup path to it for the V

861
00:46:58,380 --> 00:47:11,160
bias program what I want to do here is

862
00:47:00,088 --> 00:47:12,838
is pass in the alpha threshold and now

863
00:47:11,159 --> 00:47:14,819
anywhere that we're using that which of

864
00:47:12,838 --> 00:47:17,070
course is only one place you know we

865
00:47:14,820 --> 00:47:18,510
have to pass NASA threshold and so what

866
00:47:17,070 --> 00:47:24,690
I want to do here is I want to pass the

867
00:47:18,510 --> 00:47:28,200
Alpha threshold based on the Pele

868
00:47:24,690 --> 00:47:30,119
configuration so basically the Alpha

869
00:47:28,199 --> 00:47:33,539
threshold is always going to be zero for

870
00:47:30,119 --> 00:47:37,320
pretty much all cases except the case

871
00:47:33,539 --> 00:47:39,119
where the peel is where we are doing

872
00:47:37,320 --> 00:47:43,890
peeling right in fact I could do it like

873
00:47:39,119 --> 00:47:48,390
this where we are doing peeling and

874
00:47:43,889 --> 00:47:49,739
we're on the last peel so at that point

875
00:47:48,389 --> 00:47:51,539
you know maybe we say it's going to be

876
00:47:49,739 --> 00:47:55,439
you know 0.9 I don't know I'm making

877
00:47:51,539 --> 00:47:57,779
this number up so we are peeling and

878
00:47:55,440 --> 00:48:03,630
then we want to say oh is the peel index

879
00:47:57,780 --> 00:48:06,390
you know the last peel right so is if

880
00:48:03,630 --> 00:48:11,130
peel index equal to max render target

881
00:48:06,389 --> 00:48:16,289
index so you know we know that we're

882
00:48:11,130 --> 00:48:21,390
basically done and this is the last peel

883
00:48:16,289 --> 00:48:23,849
we're going to get all right so now what

884
00:48:21,389 --> 00:48:25,769
we're doing is we're basing hey we're

885
00:48:23,849 --> 00:48:28,490
trying to produce a final layer that

886
00:48:25,769 --> 00:48:30,900
will always have something in it right

887
00:48:28,489 --> 00:48:35,459
and we'll see if that helps with those

888
00:48:30,900 --> 00:48:38,190
artifacts at all so it you know it it

889
00:48:35,460 --> 00:48:41,338
definitely helped there's but I still I

890
00:48:38,190 --> 00:48:46,829
still see a little minor little

891
00:48:41,338 --> 00:48:49,489
artifacts like right here you can see

892
00:48:46,829 --> 00:48:49,489
one there right

893
00:48:50,250 --> 00:48:54,300
it's really pretty minimal but it's

894
00:48:53,400 --> 00:48:56,880
definitely still there

895
00:48:54,300 --> 00:49:00,960
and let's also see whether whether we

896
00:48:56,880 --> 00:49:03,240
can get we were having those artifacts

897
00:49:00,960 --> 00:49:05,039
when one of the snakes would come by and

898
00:49:03,239 --> 00:49:06,598
all those particles were raining down I

899
00:49:05,039 --> 00:49:09,139
don't know how to get this thing to do

900
00:49:06,599 --> 00:49:11,220
that again there they are

901
00:49:09,139 --> 00:49:12,659
hopefully the snake will come come

902
00:49:11,219 --> 00:49:16,230
through that again it doesn't seem like

903
00:49:12,659 --> 00:49:18,059
it wants to at the moment but so the

904
00:49:16,230 --> 00:49:19,858
question is yet will we get any there

905
00:49:18,059 --> 00:49:21,239
there I'm seeing some raining down and

906
00:49:19,858 --> 00:49:24,000
I'm not seeing any artifacts on those

907
00:49:21,239 --> 00:49:26,189
now so it seems like that is a pretty

908
00:49:24,000 --> 00:49:29,039
effective fix for the vast majority of

909
00:49:26,190 --> 00:49:32,630
the artifacting actually which is pretty

910
00:49:29,039 --> 00:49:32,630
nice oh the snake came down the stairs

911
00:49:33,469 --> 00:49:47,368
so that's good there the snake goes now

912
00:49:45,000 --> 00:49:48,599
we got two snakes alright maybe I'll go

913
00:49:47,369 --> 00:49:50,700
down the stairs one more time because

914
00:49:48,599 --> 00:49:53,190
there's two snakes on this level that

915
00:49:50,699 --> 00:49:59,730
should produce a lot of particles that

916
00:49:53,190 --> 00:50:03,059
will rain down to the floor below oops

917
00:49:59,730 --> 00:50:06,389
I got to go up one deny how do I get up

918
00:50:03,059 --> 00:50:11,400
one leg up like that okay so that's yeah

919
00:50:06,389 --> 00:50:13,469
that's a very effective fix for a lot of

920
00:50:11,400 --> 00:50:16,410
those artifacts again I still see it a

921
00:50:13,469 --> 00:50:19,969
little bit in certain circumstances but

922
00:50:16,409 --> 00:50:19,969
it's pretty darn good

923
00:50:34,199 --> 00:50:40,480
hmm so yeah try think if there's

924
00:50:38,800 --> 00:50:42,840
anything else I should do here that

925
00:50:40,480 --> 00:50:42,840
would help

926
00:50:50,989 --> 00:50:55,439
so I guess the other thing is if we

927
00:50:53,460 --> 00:51:00,809
always know that that background alpha

928
00:50:55,440 --> 00:51:03,000
is going to be something high right and

929
00:51:00,809 --> 00:51:04,559
I feel like when we clear it it should

930
00:51:03,000 --> 00:51:07,050
have been cleared to an alpha value of

931
00:51:04,559 --> 00:51:10,739
one as well or at least I hope that it

932
00:51:07,050 --> 00:51:13,470
was I don't know if it was or not so

933
00:51:10,739 --> 00:51:20,789
let's let's actually see what we're

934
00:51:13,469 --> 00:51:30,719
doing there like so this kind of has to

935
00:51:20,789 --> 00:51:33,509
be 1.0 now so if that alpha value is 1

936
00:51:30,719 --> 00:51:35,699
then that means that in the shader there

937
00:51:33,510 --> 00:51:38,609
is no way to ever have an alpha value

938
00:51:35,699 --> 00:51:41,159
that isn't high because nothing would

939
00:51:38,608 --> 00:51:46,069
get drawn if it wasn't so in theory we

940
00:51:41,159 --> 00:51:48,239
should also be able to undo any

941
00:51:46,070 --> 00:51:51,480
premultiplied alpha that's happening so

942
00:51:48,239 --> 00:51:54,598
that should now work and we shouldn't

943
00:51:51,480 --> 00:51:58,760
see any bugs from it I don't think in

944
00:51:54,599 --> 00:51:58,760
fact you should be able to do this

945
00:52:01,130 --> 00:52:10,108
directly so basically undoing the P

946
00:52:08,608 --> 00:52:13,230
multiplied alpha where we're just going

947
00:52:10,108 --> 00:52:15,358
to you know multiply the RGB by the

948
00:52:13,230 --> 00:52:20,358
inverse of the alpha to unpretty

949
00:52:15,358 --> 00:52:20,358
multiplied if that makes sense

950
00:52:31,010 --> 00:52:37,670
so that actually looks worse which

951
00:52:35,750 --> 00:52:39,590
suggests to me that maybe the pre

952
00:52:37,670 --> 00:52:46,608
multiplication of the Alpha isn't

953
00:52:39,590 --> 00:52:51,400
happening properly or something I'm not

954
00:52:46,608 --> 00:52:51,400
100% certain what's going on with that

955
00:52:52,358 --> 00:52:57,489
so like if we look in here to me

956
00:52:58,639 --> 00:53:06,079
here's the thing that produces all of

957
00:53:00,260 --> 00:53:08,780
our fragment code so we're fetching our

958
00:53:06,079 --> 00:53:10,489
texture sample and our texture samples

959
00:53:08,780 --> 00:53:13,820
are premultiplied alpha or at least they

960
00:53:10,489 --> 00:53:19,759
are supposed to be right now there is

961
00:53:13,820 --> 00:53:21,289
one problem that we have here and this

962
00:53:19,760 --> 00:53:23,600
could be the kind of place where it

963
00:53:21,289 --> 00:53:31,039
actually does matter the problem that we

964
00:53:23,599 --> 00:53:33,529
have is that our bundler our pad our art

965
00:53:31,039 --> 00:53:38,690
asset Packer doesn't properly handle

966
00:53:33,530 --> 00:53:41,180
srgb it was made for the old renderer

967
00:53:38,690 --> 00:53:45,889
which just uses squares and square roots

968
00:53:41,179 --> 00:53:47,659
so the problem we then get is that that

969
00:53:45,889 --> 00:53:49,539
means that our alpha is always a little

970
00:53:47,659 --> 00:53:52,339
bit wrong

971
00:53:49,539 --> 00:53:53,840
because well the pre multiplication of

972
00:53:52,340 --> 00:53:55,220
the alpha is a little bit wrong because

973
00:53:53,840 --> 00:53:56,358
instead of pre multiplying by the

974
00:53:55,219 --> 00:53:59,679
correct alpha we're actually pre

975
00:53:56,358 --> 00:53:59,679
multiplying by a slightly different

976
00:54:00,550 --> 00:54:05,480
instead of pre multiplying the sRGB

977
00:54:03,380 --> 00:54:08,380
corrected colors and storing those were

978
00:54:05,480 --> 00:54:12,139
pre multiplying squared colors and

979
00:54:08,380 --> 00:54:14,720
multiplying those right which is not the

980
00:54:12,139 --> 00:54:17,659
right thing when then the card does an

981
00:54:14,719 --> 00:54:21,079
sRGB correction I don't know that that

982
00:54:17,659 --> 00:54:23,179
would show up in this situation but it's

983
00:54:21,079 --> 00:54:24,739
worth remembering that it's on the table

984
00:54:23,179 --> 00:54:27,079
because you know when you're getting

985
00:54:24,739 --> 00:54:29,779
down to little artifacts you have to be

986
00:54:27,079 --> 00:54:31,759
thinking of everything but anyway so

987
00:54:29,780 --> 00:54:37,060
when we do the texture samples here we

988
00:54:31,760 --> 00:54:37,060
produce a mod color we then go ahead and

989
00:54:39,800 --> 00:54:44,670
yeah you can see here we we then kind of

990
00:54:42,599 --> 00:54:48,059
go ahead and take the fragment color and

991
00:54:44,670 --> 00:54:50,099
x at X sample now here's the this is

992
00:54:48,059 --> 00:54:53,070
doing pre multiplication properly here

993
00:54:50,099 --> 00:54:54,569
right there's a frag color it's the

994
00:54:53,070 --> 00:54:57,030
entire thing is being multiplied by the

995
00:54:54,570 --> 00:55:00,240
alpha amount that's coming out of the

996
00:54:57,030 --> 00:55:01,590
fog their fog itself of course is not

997
00:55:00,239 --> 00:55:04,969
handled that way but that's okay we

998
00:55:01,590 --> 00:55:04,970
don't really need to be handled that way

999
00:55:05,239 --> 00:55:08,629
so that's fine

1000
00:55:22,469 --> 00:55:26,789
I am curious was there a reason there

1001
00:55:25,500 --> 00:55:29,280
must have been a reason but I don't

1002
00:55:26,789 --> 00:55:36,389
remember what it was what was the reason

1003
00:55:29,280 --> 00:55:46,260
why we didn't use the fragment color to

1004
00:55:36,389 --> 00:55:49,309
do the fogging oh right because since

1005
00:55:46,260 --> 00:55:49,310
it's clamped

1006
00:55:54,159 --> 00:55:59,409
actually that's an interesting point

1007
00:55:56,579 --> 00:56:02,140
since these are since these values are

1008
00:55:59,409 --> 00:56:05,528
clamped they really can't be done in a

1009
00:56:02,139 --> 00:56:12,250
vertex shader can they like isn't this

1010
00:56:05,528 --> 00:56:15,400
kind of wrong because if you clamp

1011
00:56:12,250 --> 00:56:17,798
something it will be wrong if it's done

1012
00:56:15,400 --> 00:56:19,568
at the vertex level if the pixels don't

1013
00:56:17,798 --> 00:56:22,139
all have the same values of the vertices

1014
00:56:19,568 --> 00:56:27,639
of the things you're clamping on right

1015
00:56:22,139 --> 00:56:32,469
so I feel like that's actually not right

1016
00:56:27,639 --> 00:56:34,659
I feel like that actually has to get

1017
00:56:32,469 --> 00:56:39,719
done in the pixel shader wouldn't you

1018
00:56:34,659 --> 00:56:39,719
guys agree I feel like that

1019
00:56:46,150 --> 00:56:50,889
I feel like that's just kind of true so

1020
00:56:48,849 --> 00:56:54,579
I feel like what we can do is we can do

1021
00:56:50,889 --> 00:56:55,719
the the fog distance computation we can

1022
00:56:54,579 --> 00:56:57,340
definitely do the fog distance

1023
00:56:55,719 --> 00:56:59,759
computation but I don't think we can

1024
00:56:57,340 --> 00:57:02,530
actually do these like I think these

1025
00:56:59,760 --> 00:57:07,150
have to be done down here to be

1026
00:57:02,530 --> 00:57:13,660
completely honest right I think this

1027
00:57:07,150 --> 00:57:16,480
stuff has to happen here because correct

1028
00:57:13,659 --> 00:57:23,559
me if I'm wrong if you think about

1029
00:57:16,480 --> 00:57:25,150
what's going on we've got some some

1030
00:57:23,559 --> 00:57:27,039
sprites or whatever and we've got maybe

1031
00:57:25,150 --> 00:57:30,880
some fog so let's say the fog is going

1032
00:57:27,039 --> 00:57:33,670
this way well if the fog max value is

1033
00:57:30,880 --> 00:57:38,010
like you know this line or whatever

1034
00:57:33,670 --> 00:57:42,460
right then if I clamp these values

1035
00:57:38,010 --> 00:57:45,160
they're wrong right because I'm going to

1036
00:57:42,460 --> 00:57:47,440
interpolate along this thing and I want

1037
00:57:45,159 --> 00:57:50,409
to get the max I want to go from the min

1038
00:57:47,440 --> 00:57:52,240
to the max here but if I'm clamping

1039
00:57:50,409 --> 00:57:54,339
these I'll actually go from the min to

1040
00:57:52,239 --> 00:57:56,259
the max over this entire thing because

1041
00:57:54,340 --> 00:57:59,220
the pixel shader will interpret it will

1042
00:57:56,260 --> 00:58:06,510
interpolate it between those end points

1043
00:57:59,219 --> 00:58:06,509
so so I don't think that's correct I

1044
00:58:07,710 --> 00:58:12,369
don't think that's correct at all so I

1045
00:58:10,539 --> 00:58:19,389
think what we can do is say that there's

1046
00:58:12,369 --> 00:58:27,940
a smooth out f32 fog distance but I

1047
00:58:19,389 --> 00:58:29,650
think that's all we can do and I think

1048
00:58:27,940 --> 00:58:32,889
this stuff has to be computed here I

1049
00:58:29,650 --> 00:58:35,019
think this stuff has to be computed and

1050
00:58:32,889 --> 00:58:38,909
so the start and end distance is like

1051
00:58:35,019 --> 00:58:38,909
this stuff has to get looked up

1052
00:58:44,760 --> 00:58:48,700
right and so I just want to make sure

1053
00:58:47,530 --> 00:58:50,470
everyone kind understands what I'm

1054
00:58:48,699 --> 00:58:51,759
talking about and again I'm not claiming

1055
00:58:50,469 --> 00:58:52,839
that I'm right here this is just what I

1056
00:58:51,760 --> 00:58:55,020
was looking at I was like this doesn't

1057
00:58:52,840 --> 00:58:55,019
seem right

1058
00:58:55,440 --> 00:58:59,380
essentially you know we've got two parts

1059
00:58:57,849 --> 00:59:02,829
of the pipeline right there's the vertex

1060
00:58:59,380 --> 00:59:06,550
shader and then there's the fragment

1061
00:59:02,829 --> 00:59:08,230
shader and what's going to happen here

1062
00:59:06,550 --> 00:59:10,990
is the vertex shader is only outputting

1063
00:59:08,230 --> 00:59:15,190
things with the vertices right so if it

1064
00:59:10,989 --> 00:59:17,529
wants to it can do you know fog the it

1065
00:59:15,190 --> 00:59:21,070
can do like you know the point times the

1066
00:59:17,530 --> 00:59:23,800
fog direction right because that value

1067
00:59:21,070 --> 00:59:28,480
is just going to produce a scalar that

1068
00:59:23,800 --> 00:59:30,580
ranges over the pixels linearly not

1069
00:59:28,480 --> 00:59:32,769
pixiv linearly over the triangle

1070
00:59:30,579 --> 00:59:36,099
linearly right so whatever this triangle

1071
00:59:32,769 --> 00:59:38,949
is I can produce a value that skate that

1072
00:59:36,099 --> 00:59:40,299
you know is cleaner in those triangles

1073
00:59:38,949 --> 00:59:41,289
and it'll get interpreted properly in

1074
00:59:40,300 --> 00:59:43,210
the pixel shader right the pixel shader

1075
00:59:41,289 --> 00:59:44,710
will do the perspective correction

1076
00:59:43,210 --> 00:59:46,599
everything correctly and so it'll give

1077
00:59:44,710 --> 00:59:48,250
me the right values but I can't do

1078
00:59:46,599 --> 00:59:51,099
something like that's going to clamp

1079
00:59:48,250 --> 00:59:53,949
this value right if I start clamping

1080
00:59:51,099 --> 00:59:55,360
this value then what's going to happen

1081
00:59:53,949 --> 00:59:56,889
is when it feeds to the fragment shader

1082
00:59:55,360 --> 01:00:00,579
it's not going to get the correct

1083
00:59:56,889 --> 01:00:03,609
interpolated values you know I'm saying

1084
01:00:00,579 --> 01:00:05,500
so things in map that get clamped can't

1085
01:00:03,610 --> 01:00:07,090
be specified only the vertices because

1086
01:00:05,500 --> 01:00:09,730
you don't know where inside the triangle

1087
01:00:07,090 --> 01:00:12,100
it actually would have gotten clamped so

1088
01:00:09,730 --> 01:00:15,099
that seems like just a bug to

1089
01:00:12,099 --> 01:00:20,860
straight-up bug so I think we need to be

1090
01:00:15,099 --> 01:00:23,549
able to do this stuff here at the top of

1091
01:00:20,860 --> 01:00:23,550
our pixel shader

1092
01:00:26,469 --> 01:00:38,649
tell me what my error message is oh okay

1093
01:00:30,849 --> 01:00:40,420
that's not why I want to see okay so

1094
01:00:38,650 --> 01:00:43,809
we're just crashing straight up inside

1095
01:00:40,420 --> 01:00:48,820
what I assume is the compiler that's not

1096
01:00:43,809 --> 01:00:53,349
great but I don't know what to do about

1097
01:00:48,820 --> 01:00:59,019
that exactly we're getting the fog

1098
01:00:53,349 --> 01:01:00,969
distances as a smooth smooth in so that

1099
01:00:59,019 --> 01:01:02,469
should be correct we've got the fog

1100
01:01:00,969 --> 01:01:04,109
start/end in the clip start and end

1101
01:01:02,469 --> 01:01:06,279
distance those should be there the

1102
01:01:04,110 --> 01:01:09,280
fragment color that's coming in is

1103
01:01:06,280 --> 01:01:12,730
getting multiplied by that and then use

1104
01:01:09,280 --> 01:01:14,500
down here we don't really have to

1105
01:01:12,730 --> 01:01:20,500
multiply it that way I suppose we could

1106
01:01:14,500 --> 01:01:23,789
just say hey the alpha amount is going

1107
01:01:20,500 --> 01:01:23,789
to modulate you know the whole thing

1108
01:01:26,760 --> 01:01:36,280
yeah I don't know I don't know what it's

1109
01:01:34,389 --> 01:01:39,279
what's wrong unfortunately that the

1110
01:01:36,280 --> 01:01:40,930
driver is not okay great so just

1111
01:01:39,280 --> 01:01:44,560
reorganizing those things made the

1112
01:01:40,929 --> 01:01:49,199
driver not crash okay I don't know it's

1113
01:01:44,559 --> 01:01:51,880
a that's just how that goes I guess

1114
01:01:49,199 --> 01:01:53,829
so what's interesting is now you can see

1115
01:01:51,880 --> 01:01:57,039
the effect is totally different actually

1116
01:01:53,829 --> 01:02:00,630
right it actually looks very different

1117
01:01:57,039 --> 01:02:00,630
now that that's happening

1118
01:02:07,429 --> 01:02:13,159
very very different and interestingly

1119
01:02:10,068 --> 01:02:15,230
enough it also happens I want to get rid

1120
01:02:13,159 --> 01:02:16,759
of the uncorrect there because the

1121
01:02:15,230 --> 01:02:18,079
parent we're still doing this which

1122
01:02:16,760 --> 01:02:23,750
apparently is wrong although we don't

1123
01:02:18,079 --> 01:02:27,019
know why it's wrong yet also doing it

1124
01:02:23,750 --> 01:02:28,699
that way reduces the degree of unwanted

1125
01:02:27,019 --> 01:02:33,440
over blending that's happening during

1126
01:02:28,699 --> 01:02:35,028
the fade-out so it also means that we we

1127
01:02:33,440 --> 01:02:37,460
aren't getting the artifact which is

1128
01:02:35,028 --> 01:02:38,929
kind of a nice thing because just not

1129
01:02:37,460 --> 01:02:40,818
because it fixed the artifact or

1130
01:02:38,929 --> 01:02:48,649
anything but just because the over

1131
01:02:40,818 --> 01:02:51,159
blending now is less so that explains

1132
01:02:48,650 --> 01:02:53,539
why I had to set the range up so high I

1133
01:02:51,159 --> 01:02:55,519
might want a little bit more of that

1134
01:02:53,539 --> 01:02:56,809
range though I don't know like maybe we

1135
01:02:55,519 --> 01:03:01,088
don't maybe we do I don't know that's

1136
01:02:56,809 --> 01:03:01,089
like tuning the effect or whatever but

1137
01:03:15,849 --> 01:03:21,420
yeah so

1138
01:03:27,289 --> 01:03:31,759
I'm really relatively happy with where

1139
01:03:29,809 --> 01:03:36,858
we are at the moment I think we could do

1140
01:03:31,760 --> 01:03:39,109
more certainly but I'm pretty happy with

1141
01:03:36,858 --> 01:03:42,139
that I think that renderer is shaping up

1142
01:03:39,108 --> 01:03:46,340
to be pretty nice it's order independent

1143
01:03:42,139 --> 01:03:47,599
now uses the Z buffer for sorting really

1144
01:03:46,340 --> 01:03:49,460
the only thing that's kind of stupid

1145
01:03:47,599 --> 01:03:52,549
about it is the fact that it has to

1146
01:03:49,460 --> 01:03:59,559
change textures so often that's not good

1147
01:03:52,550 --> 01:03:59,560
at all but it's pretty nice otherwise

1148
01:04:09,119 --> 01:04:13,950
and we get that nice fade in effect

1149
01:04:11,338 --> 01:04:18,328
there which I like when you go up and

1150
01:04:13,949 --> 01:04:19,078
down the levels particles are looking

1151
01:04:18,329 --> 01:04:20,519
pretty good

1152
01:04:19,079 --> 01:04:23,839
you know I don't see a lot of

1153
01:04:20,518 --> 01:04:23,838
artifacting in the particles

1154
01:04:32,690 --> 01:04:49,108
so yeah about the only thing I would say

1155
01:04:41,309 --> 01:04:52,559
that I noticed is that you know if you

1156
01:04:49,108 --> 01:04:56,068
just had you know if you had a fast

1157
01:04:52,559 --> 01:05:00,079
graphics card I would say that probably

1158
01:04:56,068 --> 01:05:03,420
we would want to still do multi sampling

1159
01:05:00,079 --> 01:05:07,859
right like let's just say you just have

1160
01:05:03,420 --> 01:05:12,059
fill rate to burn then you still do get

1161
01:05:07,858 --> 01:05:18,480
a very edgy artifacts like right along

1162
01:05:12,059 --> 01:05:24,180
the edges there of the you know of the

1163
01:05:18,480 --> 01:05:28,500
buffer of the of those sort of cube like

1164
01:05:24,179 --> 01:05:30,719
structures those lines don't get

1165
01:05:28,500 --> 01:05:32,789
anti-alias by anything right all of our

1166
01:05:30,719 --> 01:05:34,768
bitmaps are nicely anti-alias because

1167
01:05:32,789 --> 01:05:38,869
the bitmaps themselves are anti aliased

1168
01:05:34,768 --> 01:05:41,669
so when we've lit them on and you know

1169
01:05:38,869 --> 01:05:43,650
do proper bilinear filtering on them we

1170
01:05:41,670 --> 01:05:45,119
just we get a nice smooth result that

1171
01:05:43,650 --> 01:05:49,200
doesn't have any objection artifacts

1172
01:05:45,119 --> 01:05:54,630
there we don't have at the moment any

1173
01:05:49,199 --> 01:05:58,078
such thing for actual geometric

1174
01:05:54,630 --> 01:06:01,289
primitives which we are using in the

1175
01:05:58,079 --> 01:06:05,430
case of those cubes and so I do wonder

1176
01:06:01,289 --> 01:06:08,210
if we want to allow a switch I think it

1177
01:06:05,429 --> 01:06:12,268
wouldn't be very good on this machine

1178
01:06:08,210 --> 01:06:13,980
but allow a switch that turns on just

1179
01:06:12,268 --> 01:06:16,258
the whole pipeline runs through multi

1180
01:06:13,980 --> 01:06:18,298
sampling because again you know somebody

1181
01:06:16,259 --> 01:06:22,318
runs this on a GeForce Titan or

1182
01:06:18,298 --> 01:06:25,199
something like that there's really no

1183
01:06:22,318 --> 01:06:27,838
reason why they shouldn't be able to get

1184
01:06:25,199 --> 01:06:30,210
multi sampling because it's not going to

1185
01:06:27,838 --> 01:06:32,278
affect our pipeline at all in any way

1186
01:06:30,210 --> 01:06:36,240
that I can think of so if they just have

1187
01:06:32,278 --> 01:06:39,179
fill rate lying around to light on fire

1188
01:06:36,239 --> 01:06:39,778
I feel like we should let them light it

1189
01:06:39,179 --> 01:06:41,639
on fire

1190
01:06:39,778 --> 01:06:45,400
right I mean they paid for the graphics

1191
01:06:41,639 --> 01:06:47,679
card after all right

1192
01:06:45,400 --> 01:06:51,190
so what I'm wondering is if we can just

1193
01:06:47,679 --> 01:06:53,109
turn on multi sampling here as well so

1194
01:06:51,190 --> 01:06:56,289
when we create the buffers will create

1195
01:06:53,110 --> 01:06:58,539
them as multi sampled buffers and then

1196
01:06:56,289 --> 01:07:03,519
at the end we'll still do the SmackDown

1197
01:06:58,539 --> 01:07:05,409
if we need to right and so here we can

1198
01:07:03,519 --> 01:07:08,880
kind of see how that would work so we've

1199
01:07:05,409 --> 01:07:11,949
got you know this is our actual ending

1200
01:07:08,880 --> 01:07:14,320
where we do our def peel compositing so

1201
01:07:11,949 --> 01:07:16,839
this is happening here the only change

1202
01:07:14,320 --> 01:07:19,090
that would have to occur is this vine

1203
01:07:16,840 --> 01:07:22,059
frame buffer call which is currently

1204
01:07:19,090 --> 01:07:24,340
targeting the final frame buffer would

1205
01:07:22,059 --> 01:07:26,559
instead have to target a temporary frame

1206
01:07:24,340 --> 01:07:28,350
buffer and then we would just use this

1207
01:07:26,559 --> 01:07:30,460
exact code that we were using before

1208
01:07:28,349 --> 01:07:33,539
right

1209
01:07:30,460 --> 01:07:35,650
that's really all we would have to do

1210
01:07:33,539 --> 01:07:37,929
now there's a little bit of fussing to

1211
01:07:35,650 --> 01:07:41,470
it because this parts going to be

1212
01:07:37,929 --> 01:07:44,639
different the draw region min/max part

1213
01:07:41,469 --> 01:07:48,099
is going to be different so there's

1214
01:07:44,639 --> 01:07:52,710
there's a little bit of a of a

1215
01:07:48,099 --> 01:07:55,869
difference there but that's about it I

1216
01:07:52,710 --> 01:07:58,030
think so what we should be able to do is

1217
01:07:55,869 --> 01:08:02,500
say like okay let's let's move let's

1218
01:07:58,030 --> 01:08:04,420
move this up to here and just take a

1219
01:08:02,500 --> 01:08:13,119
look at Luke's that's not what I want to

1220
01:08:04,420 --> 01:08:16,989
do here we go so this is again just the

1221
01:08:13,119 --> 01:08:18,340
same pipeline running I so what I can do

1222
01:08:16,989 --> 01:08:19,869
is say well these are the only things

1223
01:08:18,340 --> 01:08:28,180
that would change right so what I could

1224
01:08:19,869 --> 01:08:36,460
do is say if multi sampling oops else

1225
01:08:28,180 --> 01:08:39,000
right and so what we want to do here is

1226
01:08:36,460 --> 01:08:39,000
say

1227
01:08:43,738 --> 01:08:46,649
well I guess we don't even have to set

1228
01:08:45,298 --> 01:08:49,109
these because they would just be always

1229
01:08:46,649 --> 01:08:53,818
correct so it's really just if we're not

1230
01:08:49,109 --> 01:08:55,109
multi sampling because aren't they

1231
01:08:53,819 --> 01:08:57,230
preferred well you know they might not

1232
01:08:55,109 --> 01:09:00,329
be a rumor I'm gonna set them either way

1233
01:08:57,229 --> 01:09:01,858
you never know with copic you um so if

1234
01:09:00,329 --> 01:09:10,170
we're multi sampling I would want to do

1235
01:09:01,859 --> 01:09:13,020
like will resolve same buffer and this

1236
01:09:10,170 --> 01:09:16,460
is just going to be a temporary thing

1237
01:09:13,020 --> 01:09:27,109
over that we create it's going to have

1238
01:09:16,460 --> 01:09:27,109
the standard dimensions and

1239
01:09:37,649 --> 01:09:41,048
you know now I think about though this

1240
01:09:39,698 --> 01:09:42,189
is going to be a little bit more tricky

1241
01:09:41,048 --> 01:09:44,139
than I thought it was going to be

1242
01:09:42,189 --> 01:09:50,198
because when we do the DEF peel

1243
01:09:44,139 --> 01:09:53,588
compositing I don't know if shaders can

1244
01:09:50,198 --> 01:10:01,118
automatically just use the right multi

1245
01:09:53,588 --> 01:10:01,929
sample index well you know what we'll

1246
01:10:01,118 --> 01:10:06,779
just try it

1247
01:10:01,929 --> 01:10:06,779
we've got a half-hour left let's try it

1248
01:10:07,948 --> 01:10:16,689
and we'll see what happens all right so

1249
01:10:13,118 --> 01:10:18,250
here's multi sampling we don't want

1250
01:10:16,689 --> 01:10:22,779
window within window height what we want

1251
01:10:18,250 --> 01:10:30,189
here is the actual like rendered size so

1252
01:10:22,779 --> 01:10:36,488
we want these this you know saying do we

1253
01:10:30,189 --> 01:10:51,788
pull that out into anything ever so I

1254
01:10:36,488 --> 01:10:53,259
think we want to pull that out so that

1255
01:10:51,788 --> 01:10:58,590
we're always using the same stuff here

1256
01:10:53,260 --> 01:10:58,590
so there's the draw with to draw height

1257
01:11:08,988 --> 01:11:49,638
and yeah let's it's done a lot huh

1258
01:11:59,738 --> 01:12:07,789
so I'm not sure so this is interesting

1259
01:12:02,000 --> 01:12:10,639
so the draw region versus the commands

1260
01:12:07,789 --> 01:12:15,139
width and height when are those

1261
01:12:10,639 --> 01:12:17,679
different I thought those were always

1262
01:12:15,139 --> 01:12:17,679
the same

1263
01:12:35,519 --> 01:12:39,179
so what's the difference between the

1264
01:12:37,649 --> 01:12:40,738
window with the window height and the

1265
01:12:39,179 --> 01:12:41,699
draw region the draw region is the

1266
01:12:40,738 --> 01:12:45,408
portion of the window we're actually

1267
01:12:41,698 --> 01:12:51,268
drawing in so that's actually kind of

1268
01:12:45,408 --> 01:12:57,328
busted the way we're doing this is a

1269
01:12:51,269 --> 01:12:59,400
little bit wonky I'll leave it for now

1270
01:12:57,328 --> 01:13:05,328
but I don't know if we really want to do

1271
01:12:59,399 --> 01:13:05,328
it that way forever

1272
01:13:08,059 --> 01:13:12,659
yeah I wonder if we want to change the

1273
01:13:11,038 --> 01:13:14,069
way this is being done a little bit so

1274
01:13:12,658 --> 01:13:17,058
if you look at the way we're doing it

1275
01:13:14,069 --> 01:13:23,698
right now we create frame buffer targets

1276
01:13:17,059 --> 01:13:25,619
that are the size of the output but I

1277
01:13:23,698 --> 01:13:27,479
don't know whether we really want to do

1278
01:13:25,618 --> 01:13:32,670
that I I feel like we might want to

1279
01:13:27,479 --> 01:13:36,359
create a specific sized render and then

1280
01:13:32,670 --> 01:13:38,908
stretch it to the screen the reason I

1281
01:13:36,359 --> 01:13:40,768
say that is because we might want to do

1282
01:13:38,908 --> 01:13:46,828
stuff like oh we render it you know

1283
01:13:40,769 --> 01:13:48,869
1080p on a 1080p display so it's

1284
01:13:46,828 --> 01:13:50,759
one-to-one and it looks nice if you run

1285
01:13:48,868 --> 01:13:55,078
on a 4k display but your graphics card

1286
01:13:50,760 --> 01:13:57,179
can't handle 4k kinds of fill rates then

1287
01:13:55,078 --> 01:13:59,729
we would still render at 1080p and then

1288
01:13:57,179 --> 01:14:01,859
stretch up to 4k is definitely what you

1289
01:13:59,729 --> 01:14:03,359
would want to do there right but with

1290
01:14:01,859 --> 01:14:05,098
the current way that we set it up we

1291
01:14:03,359 --> 01:14:08,448
can't do that we're always going to

1292
01:14:05,099 --> 01:14:12,840
render at the width and height of the

1293
01:14:08,448 --> 01:14:19,759
actual like output this book you know

1294
01:14:12,840 --> 01:14:19,760
the actual size

1295
01:14:21,908 --> 01:14:30,429
so I feel like that not great you know

1296
01:14:41,559 --> 01:14:45,730
like that just doesn't seem good and if

1297
01:14:44,380 --> 01:14:56,980
I remember correctly we're actually

1298
01:14:45,729 --> 01:14:58,808
setting this in here right like we you

1299
01:14:56,979 --> 01:15:01,118
know we've set this stuff up so the

1300
01:14:58,809 --> 01:15:03,130
buffer width and height is whatever the

1301
01:15:01,118 --> 01:15:11,558
dip section is there I don't know what

1302
01:15:03,130 --> 01:15:14,010
we do on WM size nothing apparently

1303
01:15:11,559 --> 01:15:14,010
right

1304
01:15:33,439 --> 01:15:41,749
so we're kind of doing this right we're

1305
01:15:38,929 --> 01:15:45,248
kind of doing this already and so when

1306
01:15:41,748 --> 01:15:45,248
we set the commands

1307
01:15:57,059 --> 01:16:07,050
I think we're always going to be using

1308
01:16:04,679 --> 01:16:09,770
1920 so yes so I feel like what we want

1309
01:16:07,050 --> 01:16:13,110
to do is I feel like we want to actually

1310
01:16:09,770 --> 01:16:17,570
do that drawing correctly the way that I

1311
01:16:13,109 --> 01:16:17,569
suggested that fix that

1312
01:16:37,560 --> 01:16:43,990
all right so let's just let's just take

1313
01:16:41,619 --> 01:16:47,470
a look at this so we also know that

1314
01:16:43,989 --> 01:16:49,569
we're kind of not super great right now

1315
01:16:47,470 --> 01:16:53,440
it's scaling like we kind of broke that

1316
01:16:49,569 --> 01:16:54,909
like at some point they're right so I

1317
01:16:53,439 --> 01:16:56,710
feel like now would be a good time to

1318
01:16:54,909 --> 01:16:59,739
just fix all that stuff because we might

1319
01:16:56,710 --> 01:17:01,239
as well get this right for the final

1320
01:16:59,739 --> 01:17:02,769
sort of wave the renderer is working

1321
01:17:01,239 --> 01:17:04,210
here which i think is pretty much where

1322
01:17:02,770 --> 01:17:05,350
we're at I can't think I'd like I like

1323
01:17:04,210 --> 01:17:13,109
the step you'll render I think this is

1324
01:17:05,350 --> 01:17:13,110
the one to go with so let's just say

1325
01:17:14,550 --> 01:17:20,619
that we've got sort of the draw with the

1326
01:17:17,770 --> 01:17:25,900
draw height here and those are going to

1327
01:17:20,619 --> 01:17:29,710
be the commands with and the command

1328
01:17:25,899 --> 01:17:31,479
pipe so the actual size that everybody

1329
01:17:29,710 --> 01:17:34,149
thinks the thing is that's what we're

1330
01:17:31,479 --> 01:17:35,979
going to do basically everywhere so we

1331
01:17:34,149 --> 01:17:38,079
create all these render targets and we

1332
01:17:35,979 --> 01:17:40,389
create them at whatever that size is so

1333
01:17:38,079 --> 01:17:46,899
the size the game thinks it's running at

1334
01:17:40,390 --> 01:17:49,840
is the size we use and then when we're

1335
01:17:46,899 --> 01:17:52,479
doing render targets again this scissor

1336
01:17:49,840 --> 01:17:55,029
is going to be exactly the same for

1337
01:17:52,479 --> 01:17:56,799
everybody for all of the targets they're

1338
01:17:55,029 --> 01:18:03,849
always going to be the exact same GL

1339
01:17:56,800 --> 01:18:05,680
scissor there and and this clip scale

1340
01:18:03,850 --> 01:18:13,120
stuff I don't know even where that's

1341
01:18:05,680 --> 01:18:17,260
being used right now so yeah I feel like

1342
01:18:13,119 --> 01:18:20,289
that's just that's just totally wrong

1343
01:18:17,260 --> 01:18:22,230
because now that scale is is scaling for

1344
01:18:20,289 --> 01:18:24,729
something that we don't want to scale

1345
01:18:22,229 --> 01:18:26,409
right that was stuff that was adjusting

1346
01:18:24,729 --> 01:18:28,029
for the fact that we might be rendering

1347
01:18:26,409 --> 01:18:30,010
directly to a screen window that was

1348
01:18:28,029 --> 01:18:32,769
larger or smaller in pixel space than we

1349
01:18:30,010 --> 01:18:35,520
were thinking and so that's just not

1350
01:18:32,770 --> 01:18:35,520
going to happen now

1351
01:18:46,738 --> 01:18:50,488
and so now we're always rendering to

1352
01:18:48,719 --> 01:18:55,739
something that's the size that the gain

1353
01:18:50,488 --> 01:18:57,419
is running at right and so then what we

1354
01:18:55,738 --> 01:18:59,308
have to do at the end is we have to

1355
01:18:57,420 --> 01:19:01,170
scale down now at the moment I think

1356
01:18:59,309 --> 01:19:02,610
that will just work because what's

1357
01:19:01,170 --> 01:19:04,498
happening is we're setting the draw

1358
01:19:02,609 --> 01:19:07,589
region now we do the GL viewport GL

1359
01:19:04,498 --> 01:19:09,868
scissor bit here and off we go

1360
01:19:07,590 --> 01:19:14,699
so we really just need to clear the dead

1361
01:19:09,868 --> 01:19:30,658
area for our frame buffer right so we

1362
01:19:14,698 --> 01:19:35,339
would need to do like this so we could

1363
01:19:30,658 --> 01:19:36,808
get black bars in there but otherwise we

1364
01:19:35,340 --> 01:19:40,019
should be able to now make this work a

1365
01:19:36,809 --> 01:19:43,860
little more cleanly so let's let's start

1366
01:19:40,019 --> 01:19:48,780
getting that going all right so first

1367
01:19:43,859 --> 01:19:51,779
off this clear wants to happen over the

1368
01:19:48,779 --> 01:19:56,429
entire thing so the first thing we want

1369
01:19:51,779 --> 01:20:03,809
to do is is start with a full screen so

1370
01:19:56,429 --> 01:20:05,639
we want to do a viewport that covers

1371
01:20:03,809 --> 01:20:07,739
everything I don't know what window

1372
01:20:05,639 --> 01:20:08,760
width and window height actually are but

1373
01:20:07,738 --> 01:20:13,788
I think they're supposed to be the whole

1374
01:20:08,760 --> 01:20:13,789
screen right oops so this is kind of

1375
01:20:13,880 --> 01:20:20,609
like that should clear the whole screen

1376
01:20:15,958 --> 01:20:24,840
and this should be more get width for

1377
01:20:20,609 --> 01:20:26,609
our region if that's just wrong we don't

1378
01:20:24,840 --> 01:20:27,929
want the draw to the whole window we

1379
01:20:26,609 --> 01:20:37,189
want to draw to the part of the window

1380
01:20:27,929 --> 01:20:37,190
we were told to draw to like so

1381
01:20:42,180 --> 01:20:49,079
and so I'm going to reclaim the word

1382
01:20:45,449 --> 01:20:52,260
draw it here and I want this extra me to

1383
01:20:49,079 --> 01:20:55,680
render with right because that's a

1384
01:20:52,260 --> 01:20:58,230
little clear about what's going on and

1385
01:20:55,680 --> 01:21:00,590
then draw height is going to be render

1386
01:20:58,229 --> 01:21:00,589
height

1387
01:21:17,109 --> 01:21:22,488
all right so now okay so now we're

1388
01:21:21,679 --> 01:21:25,699
getting somewhere

1389
01:21:22,488 --> 01:21:27,859
now we properly have the sort of black

1390
01:21:25,698 --> 01:21:30,589
bars the letterboxing whatever you want

1391
01:21:27,859 --> 01:21:32,929
to call that which we had before is

1392
01:21:30,590 --> 01:21:35,630
happening correctly so it keeps you know

1393
01:21:32,929 --> 01:21:40,939
maintains the aspect ratio there as you

1394
01:21:35,630 --> 01:21:41,840
scaled this around just what I want but

1395
01:21:40,939 --> 01:21:45,249
now we have to make sure that we

1396
01:21:41,840 --> 01:21:47,119
actually do the blit to the correct size

1397
01:21:45,248 --> 01:21:49,279
so let's go ahead and figure out how to

1398
01:21:47,118 --> 01:21:53,719
get that to work and then we're in

1399
01:21:49,279 --> 01:21:57,050
better shape here okay so in here we've

1400
01:21:53,719 --> 01:21:59,239
got that that set up you can see the

1401
01:21:57,050 --> 01:22:03,708
viewport scissor happening here how

1402
01:21:59,238 --> 01:22:08,319
that's working by yet using the the draw

1403
01:22:03,708 --> 01:22:08,319
region that's getting passed down mmm

1404
01:22:08,828 --> 01:22:12,908
and I guess

1405
01:22:28,670 --> 01:22:39,060
I'm not sure exactly what so it's a

1406
01:22:36,119 --> 01:22:43,050
little strange because with the way that

1407
01:22:39,060 --> 01:22:46,590
this is set up I would expect this to

1408
01:22:43,050 --> 01:22:49,020
lift the incoming texture to the entire

1409
01:22:46,590 --> 01:23:03,210
screen but that's not what I'm seeing

1410
01:22:49,020 --> 01:23:06,300
right so let me just let me just see

1411
01:23:03,210 --> 01:23:11,090
something here so I'm assuming that I

1412
01:23:06,300 --> 01:23:11,090
won't see any pink when I do this and

1413
01:23:11,238 --> 01:23:18,269
I'm correct so what we're doing is our

1414
01:23:14,250 --> 01:23:20,630
actual our actual rendering is off it's

1415
01:23:18,270 --> 01:23:24,300
not it's not this this students fault

1416
01:23:20,630 --> 01:23:29,719
our actual rendering like viewport stuff

1417
01:23:24,300 --> 01:23:29,719
is off where do we set up the viewport

1418
01:23:36,420 --> 01:23:41,949
right here so when we call open jail

1419
01:23:39,640 --> 01:23:45,640
buying frame buffer this window with

1420
01:23:41,949 --> 01:23:47,739
window height bit is wrong so that's why

1421
01:23:45,640 --> 01:23:52,410
that's happening I also don't know where

1422
01:23:47,739 --> 01:23:52,409
we're calling fine frame buffer exactly

1423
01:24:02,279 --> 01:24:09,329
so here's opengl bind frame buffer so

1424
01:24:07,050 --> 01:24:11,400
basically passing the draw region for

1425
01:24:09,329 --> 01:24:14,519
all of those is just not what we want we

1426
01:24:11,399 --> 01:24:16,859
just want the width in height there so

1427
01:24:14,520 --> 01:24:23,700
what we want to do is just have buying

1428
01:24:16,859 --> 01:24:26,880
frame buffer take the render width and

1429
01:24:23,699 --> 01:24:29,210
the render height that's really what we

1430
01:24:26,880 --> 01:24:29,210
wanted

1431
01:24:43,389 --> 01:24:47,538
that when that path really isn't

1432
01:24:45,679 --> 01:24:51,649
supported anymore we'll probably have to

1433
01:24:47,538 --> 01:25:11,630
re-enable it someday when we do the

1434
01:24:51,649 --> 01:25:21,170
software renderer update here we go so

1435
01:25:11,630 --> 01:25:22,809
now we run that and everything appears

1436
01:25:21,170 --> 01:25:30,319
to be right here

1437
01:25:22,809 --> 01:25:39,380
switch to windowed mode and now that's

1438
01:25:30,319 --> 01:25:41,328
nice and clean right lovely so the other

1439
01:25:39,380 --> 01:25:48,349
thing we should now be able to do as

1440
01:25:41,328 --> 01:25:51,109
well is if I go to win32 hand-made we

1441
01:25:48,349 --> 01:25:56,119
should now be able to stretch up so if

1442
01:25:51,109 --> 01:25:57,978
we want to draw a smaller game so let's

1443
01:25:56,118 --> 01:26:04,248
fill rate use less graphics card

1444
01:25:57,979 --> 01:26:08,059
resources now we can write and so this

1445
01:26:04,248 --> 01:26:10,779
is us doing that right this is

1446
01:26:08,059 --> 01:26:10,779
stretching up

1447
01:26:18,460 --> 01:26:24,100
it's interesting about that is there

1448
01:26:20,170 --> 01:26:27,789
some weird artifacts you get that I see

1449
01:26:24,100 --> 01:26:33,160
there around the edges of things I'm not

1450
01:26:27,789 --> 01:26:37,420
sure why those are there only when

1451
01:26:33,159 --> 01:26:41,130
you're stretching up are those there in

1452
01:26:37,420 --> 01:26:41,130
1920 by 1080 but we just can't see them

1453
01:26:47,880 --> 01:26:58,920
well can I take a screen capture I don't

1454
01:26:56,770 --> 01:26:58,920
know

1455
01:27:11,368 --> 01:27:24,259
so it doesn't really look like that

1456
01:27:13,889 --> 01:27:24,260
fringing is happening right

1457
01:27:26,380 --> 01:27:38,010
it looks really good like that rendering

1458
01:27:28,810 --> 01:27:38,010
looks very solid to me

1459
01:27:41,180 --> 01:27:46,640
this guy always noticed had a weird band

1460
01:27:44,300 --> 01:27:53,180
on it and I wasn't quite sure what that

1461
01:27:46,640 --> 01:27:56,030
was made weirder by the fact that you

1462
01:27:53,180 --> 01:27:58,930
don't see it on this one even though

1463
01:27:56,029 --> 01:27:58,929
they're the same sprite

1464
01:28:09,949 --> 01:28:13,279
let's take a look

1465
01:28:22,828 --> 01:28:34,198
so which direction is that facing that

1466
01:28:27,109 --> 01:28:35,908
that's this right so I think it seems

1467
01:28:34,198 --> 01:28:39,029
like we're just getting basically what

1468
01:28:35,908 --> 01:28:42,420
amounts to scaling artifacts that could

1469
01:28:39,029 --> 01:28:44,639
be because of the sRGB let me let me

1470
01:28:42,420 --> 01:28:51,300
play with that a little bit I just like

1471
01:28:44,639 --> 01:28:53,460
to see so let's switch down to the lower

1472
01:28:51,300 --> 01:28:59,989
resolution so this is like half

1473
01:28:53,460 --> 01:29:03,630
resolution right and you know we should

1474
01:28:59,988 --> 01:29:07,948
we should expect to see jagged or edges

1475
01:29:03,630 --> 01:29:10,170
on things and blurrier imagery but what

1476
01:29:07,948 --> 01:29:13,888
we shouldn't be seeing is all of that

1477
01:29:10,170 --> 01:29:16,139
fringing there so I'm I want to know I'm

1478
01:29:13,889 --> 01:29:18,809
curious to know what happens if I force

1479
01:29:16,139 --> 01:29:24,389
multi sampling off in the OpenGL I'm not

1480
01:29:18,809 --> 01:29:27,539
mother sampling if I force real srgb to

1481
01:29:24,389 --> 01:29:33,929
be turned off and instead force it to

1482
01:29:27,539 --> 01:29:37,289
use the fake srgb so you know here where

1483
01:29:33,929 --> 01:29:51,599
we do this I'm just going to say you

1484
01:29:37,289 --> 01:29:54,238
know don't allow GPU srgb and so the

1485
01:29:51,599 --> 01:29:57,469
other place that that happens is it will

1486
01:29:54,238 --> 01:29:57,468
actually guess this whole thing

1487
01:30:09,729 --> 01:30:21,349
so it does kind of feel like that is

1488
01:30:13,670 --> 01:30:23,210
what that is so I feel like what we're

1489
01:30:21,350 --> 01:30:26,270
seeing here is the fact that the Alpha

1490
01:30:23,210 --> 01:30:30,260
is not computed with actual srgb so it

1491
01:30:26,270 --> 01:30:32,770
doesn't quite line up right when

1492
01:30:30,260 --> 01:30:32,770
stretched

1493
01:30:54,810 --> 01:30:57,810
hmm

1494
01:31:18,079 --> 01:31:23,279
hmm so this warrants this warrants

1495
01:31:21,539 --> 01:31:25,800
further investigation if they believe I

1496
01:31:23,279 --> 01:31:28,800
am interested to know though this should

1497
01:31:25,800 --> 01:31:34,770
compute it correctly because now if we

1498
01:31:28,800 --> 01:31:36,360
force the shader to do the square square

1499
01:31:34,770 --> 01:31:38,610
root that should produce roughly the

1500
01:31:36,359 --> 01:31:40,319
same calculation as we were doing

1501
01:31:38,609 --> 01:31:43,229
ourselves in the software renderer which

1502
01:31:40,319 --> 01:31:48,479
is what the art is prepackaged as at the

1503
01:31:43,229 --> 01:31:50,639
moment in this art pack so that srgb

1504
01:31:48,479 --> 01:31:52,319
computation should now be exact right

1505
01:31:50,640 --> 01:31:54,420
because what we should be doing is we

1506
01:31:52,319 --> 01:31:58,500
should be running through shader sim you

1507
01:31:54,420 --> 01:32:00,989
know text right and shader semtex read

1508
01:31:58,500 --> 01:32:05,729
that is what should you know should be

1509
01:32:00,989 --> 01:32:08,809
happening in both cases so every time on

1510
01:32:05,729 --> 01:32:12,419
load and store we should be getting

1511
01:32:08,810 --> 01:32:14,250
precisely that same in and out that we

1512
01:32:12,420 --> 01:32:18,140
were doing before which is square on the

1513
01:32:14,250 --> 01:32:18,140
way in square root on the way out

1514
01:32:35,229 --> 01:32:40,379
and so that really feels to me like that

1515
01:32:37,420 --> 01:32:40,380
should have corrected it

1516
01:32:47,890 --> 01:32:50,969
[Music]

1517
01:33:03,050 --> 01:33:10,880
so I guess and I really couldn't say but

1518
01:33:07,340 --> 01:33:13,480
I guess what's happening there is you

1519
01:33:10,880 --> 01:33:16,760
know my best might my only real guess is

1520
01:33:13,479 --> 01:33:20,119
since that's the depth peel composite

1521
01:33:16,760 --> 01:33:23,680
that's doing that the bilinear filtering

1522
01:33:20,119 --> 01:33:31,939
on the depth field composite is

1523
01:33:23,680 --> 01:33:36,110
therefore incorrect right because this

1524
01:33:31,939 --> 01:33:38,839
is actually not a substitute now that I

1525
01:33:36,109 --> 01:33:44,139
think about it right because you need to

1526
01:33:38,840 --> 01:33:49,130
do that squaring before you blend the

1527
01:33:44,140 --> 01:33:55,160
bilinear samples together so if we were

1528
01:33:49,130 --> 01:34:03,529
to just take a raw Texel sample then I

1529
01:33:55,159 --> 01:34:07,369
think we'd actually be ok I don't know

1530
01:34:03,529 --> 01:34:13,960
exactly how we would do that but it

1531
01:34:07,369 --> 01:34:13,960
would probably look like this

1532
01:34:38,229 --> 01:34:44,619
and yeah so there you go well so that's

1533
01:34:42,430 --> 01:34:48,760
definitively what the problem is with

1534
01:34:44,619 --> 01:34:57,369
that and what you can see there is that

1535
01:34:48,760 --> 01:34:59,289
that the depth feeling draw this out

1536
01:34:57,369 --> 01:35:00,698
because it's kind of tough to explain I

1537
01:34:59,289 --> 01:35:04,329
think how I would say that I couldn't

1538
01:35:00,698 --> 01:35:06,729
think of it so the duct peeling works by

1539
01:35:04,329 --> 01:35:10,569
saying okay I've essentially got a stack

1540
01:35:06,729 --> 01:35:13,289
of things right because I can draw that

1541
01:35:10,569 --> 01:35:13,289
a little better there

1542
01:35:18,628 --> 01:35:23,319
I've got a stack of things and I'm going

1543
01:35:21,550 --> 01:35:24,550
to produce one of them right so it's

1544
01:35:23,319 --> 01:35:26,529
going to take these and it's going to

1545
01:35:24,550 --> 01:35:28,119
collapse these down by blending them

1546
01:35:26,529 --> 01:35:29,498
it's going to take this one and blend on

1547
01:35:28,118 --> 01:35:33,969
top of this on top of this on top of

1548
01:35:29,498 --> 01:35:36,550
this one right per pixel but once you

1549
01:35:33,969 --> 01:35:38,590
start stretching what's going to happen

1550
01:35:36,550 --> 01:35:40,510
then is rather than sampling right at

1551
01:35:38,590 --> 01:35:42,939
the middle of each pixel and doing that

1552
01:35:40,510 --> 01:35:45,458
composite once for each pixel exactly

1553
01:35:42,939 --> 01:35:47,829
you're actually going to pull from a

1554
01:35:45,458 --> 01:35:51,248
bilinear sample so you're going to be

1555
01:35:47,828 --> 01:35:53,799
you know here or something on each one

1556
01:35:51,248 --> 01:35:58,569
of these guys is going to be you know a

1557
01:35:53,800 --> 01:36:05,590
four sample pick so you've got you know

1558
01:35:58,569 --> 01:36:07,268
peel 0 peel 1 kill 2 peal 3 and you're

1559
01:36:05,590 --> 01:36:09,668
pulling from the same place on all them

1560
01:36:07,269 --> 01:36:11,409
but it's a blend between all of their

1561
01:36:09,668 --> 01:36:13,840
you know the constituents right around

1562
01:36:11,408 --> 01:36:15,638
there and so when you do that what's

1563
01:36:13,840 --> 01:36:18,869
going to happen is you're going to get

1564
01:36:15,639 --> 01:36:22,779
incorrect results if you don't blend

1565
01:36:18,868 --> 01:36:24,938
those together exactly right because

1566
01:36:22,779 --> 01:36:27,279
since it's premultiplied alpha one of

1567
01:36:24,939 --> 01:36:29,199
the problems with premultiplied alpha is

1568
01:36:27,279 --> 01:36:31,059
it's got to be done correctly it's gotta

1569
01:36:29,198 --> 01:36:32,348
be exactly correctly and if you don't

1570
01:36:31,059 --> 01:36:33,639
actually do it correctly you will get

1571
01:36:32,349 --> 01:36:35,529
too much or too little color

1572
01:36:33,639 --> 01:36:38,679
contribution which will lead to black or

1573
01:36:35,529 --> 01:36:41,078
white fringing right not pure black or

1574
01:36:38,679 --> 01:36:43,359
pure white but you know a lighter or

1575
01:36:41,078 --> 01:36:46,328
darker shade around the edge of

1576
01:36:43,359 --> 01:36:49,029
something where it should have gone to 0

1577
01:36:46,328 --> 01:36:50,859
both the color and the alpha but they

1578
01:36:49,029 --> 01:36:53,378
didn't both go to zero at the same time

1579
01:36:50,859 --> 01:36:55,748
so the color went to zero but the Alpha

1580
01:36:53,378 --> 01:36:57,550
stayed up or the color didn't go to zero

1581
01:36:55,748 --> 01:37:01,800
yet and the Alpha went all the way down

1582
01:36:57,550 --> 01:37:01,800
you get like a clamp the edge right

1583
01:37:08,710 --> 01:37:18,010
hmm so what that suggests to me is yet I

1584
01:37:19,569 --> 01:37:24,609
don't know if we've got another bug

1585
01:37:22,219 --> 01:37:27,140
somewhere that is contributing to that

1586
01:37:24,609 --> 01:37:31,369
but unfortunately I'm not really sure

1587
01:37:27,140 --> 01:37:36,160
that we could test it yet because what

1588
01:37:31,369 --> 01:37:39,800
we need is we need our assets like our

1589
01:37:36,159 --> 01:37:44,500
textures themselves to properly be an

1590
01:37:39,800 --> 01:37:51,460
actual srgb because if they're not

1591
01:37:44,500 --> 01:37:51,460
actually an sRGB we won't be able to

1592
01:37:52,479 --> 01:37:57,399
test what happens when the card blends

1593
01:37:54,770 --> 01:37:57,400
them properly

1594
01:38:06,130 --> 01:38:12,170
so I'm not sure how we could investigate

1595
01:38:08,899 --> 01:38:14,389
this further at the moment I could

1596
01:38:12,170 --> 01:38:17,690
certainly build the next art pack with

1597
01:38:14,390 --> 01:38:20,660
proper srgb adjustment of the pixel

1598
01:38:17,689 --> 01:38:30,619
values you know that's not too hard to

1599
01:38:20,659 --> 01:38:36,639
do but I don't know I don't know what I

1600
01:38:30,619 --> 01:38:41,930
can do prior to that to analyze this any

1601
01:38:36,640 --> 01:38:44,930
further now what we can do and what we

1602
01:38:41,930 --> 01:38:47,110
possibly just want to do anyway because

1603
01:38:44,930 --> 01:38:50,900
it might be just be more efficient in

1604
01:38:47,109 --> 01:38:52,130
the general case I don't know maybe it

1605
01:38:50,899 --> 01:38:55,939
wouldn't really be more efficient it's

1606
01:38:52,130 --> 01:38:58,369
hard to say possibly not but we might

1607
01:38:55,939 --> 01:39:02,329
want to leave those at nearest sampling

1608
01:38:58,369 --> 01:39:04,880
anyway and just do a temporary always

1609
01:39:02,329 --> 01:39:08,000
composite to a temporary buffer so when

1610
01:39:04,880 --> 01:39:09,800
we do that smack down we would always

1611
01:39:08,000 --> 01:39:14,149
composite to a temporary buffer on that

1612
01:39:09,800 --> 01:39:15,680
anyway you know again hard to say

1613
01:39:14,149 --> 01:39:18,759
whether we want to do that or not but

1614
01:39:15,680 --> 01:39:18,760
that's certainly an option

1615
01:39:24,948 --> 01:39:30,289
so I think that's the tack I'll take for

1616
01:39:27,289 --> 01:39:34,039
now so that we don't ever stretch those

1617
01:39:30,289 --> 01:39:37,069
buffers directly we composite first to a

1618
01:39:34,039 --> 01:39:39,529
final image and then we just stretch the

1619
01:39:37,069 --> 01:39:42,409
final image and during that composite

1620
01:39:39,529 --> 01:39:46,729
pass we could also do some things like

1621
01:39:42,409 --> 01:39:48,439
if we wanted to do some light blooming

1622
01:39:46,729 --> 01:39:51,079
or things like that we could also do it

1623
01:39:48,439 --> 01:39:54,139
in there so I don't know maybe that's

1624
01:39:51,079 --> 01:39:55,819
the best way to go so the way that that

1625
01:39:54,140 --> 01:40:02,000
would work is actually this multi

1626
01:39:55,819 --> 01:40:03,049
sampling bit would actually it would

1627
01:40:02,000 --> 01:40:04,969
always work this way

1628
01:40:03,050 --> 01:40:09,460
so the multi sampling part wouldn't

1629
01:40:04,969 --> 01:40:11,779
actually happen yet if that makes sense

1630
01:40:09,460 --> 01:40:16,670
so what we would do if something more

1631
01:40:11,779 --> 01:40:21,439
like this where we always go to a global

1632
01:40:16,670 --> 01:40:31,789
resolve frame buffer first that we pile

1633
01:40:21,439 --> 01:40:34,759
everything into so this would produce an

1634
01:40:31,789 --> 01:40:37,279
intermediate frame buffer that frame

1635
01:40:34,760 --> 01:40:47,900
buffer would now have the proper Jeff

1636
01:40:37,279 --> 01:40:51,460
peel composite we then switch to the

1637
01:40:47,899 --> 01:40:51,460
thing we're going to do for bleeding

1638
01:40:58,738 --> 01:41:07,439
and I guess so the interesting thing

1639
01:41:02,039 --> 01:41:10,760
about this is this blips frame buffer

1640
01:41:07,439 --> 01:41:10,759
support stretching

1641
01:41:34,389 --> 01:41:39,100
so it's just the intersection of the two

1642
01:41:36,579 --> 01:41:42,429
so this would not so we need to do a

1643
01:41:39,100 --> 01:41:45,310
second one of these passes basically

1644
01:41:42,429 --> 01:41:47,618
where we are actually going to draw with

1645
01:41:45,310 --> 01:41:51,389
a shader but that shader simply doesn't

1646
01:41:47,618 --> 01:41:54,729
do anything right we can't just do a

1647
01:41:51,389 --> 01:42:04,569
frame buffer but here because a frame

1648
01:41:54,729 --> 01:42:06,488
buffer blitt is not going to a frame

1649
01:42:04,569 --> 01:42:08,590
buffer bit is bligg is not going to do

1650
01:42:06,488 --> 01:42:14,919
what we needed to do right a frame

1651
01:42:08,590 --> 01:42:18,159
buffer but in this case is going to keep

1652
01:42:14,920 --> 01:42:21,368
the size of the thing the same and we

1653
01:42:18,158 --> 01:42:24,279
want to stretch it so we want to be able

1654
01:42:21,368 --> 01:42:27,429
to take the image that we just rendered

1655
01:42:24,279 --> 01:42:31,210
and make it larger or smaller with

1656
01:42:27,429 --> 01:42:32,770
bilinear filtering right and we would

1657
01:42:31,210 --> 01:42:35,770
even potentially if we wanted to stretch

1658
01:42:32,770 --> 01:42:42,010
it down a lot we would potentially even

1659
01:42:35,770 --> 01:42:43,090
want you know mipmapping but I don't

1660
01:42:42,010 --> 01:42:44,560
think we would ever do that because we

1661
01:42:43,090 --> 01:42:46,389
probably what we do is we just change

1662
01:42:44,560 --> 01:42:48,460
the runtime size that we're rendering

1663
01:42:46,389 --> 01:42:52,480
the game so that we never rendered the

1664
01:42:48,460 --> 01:42:54,850
game at let at less than at more than

1665
01:42:52,479 --> 01:42:57,309
twice the resolution of the output right

1666
01:42:54,850 --> 01:42:59,440
because there's no reason to so I think

1667
01:42:57,310 --> 01:43:01,330
this would be okay so what we want to do

1668
01:42:59,439 --> 01:43:10,899
here is we want to say all right you

1669
01:43:01,329 --> 01:43:13,988
know we did we did this program dispatch

1670
01:43:10,899 --> 01:43:16,059
here and we pretty much just want to do

1671
01:43:13,988 --> 01:43:18,759
the exact same program dispatch again

1672
01:43:16,060 --> 01:43:21,810
but with a slightly different program so

1673
01:43:18,760 --> 01:43:21,810
we would do

1674
01:43:24,979 --> 01:43:47,129
this and this part has to stay out for

1675
01:43:38,369 --> 01:43:48,809
now so I'm just can introduce a new kind

1676
01:43:47,130 --> 01:43:50,970
of program which is the final stretch

1677
01:43:48,810 --> 01:43:54,150
program but just all it's doing is that

1678
01:43:50,970 --> 01:43:57,750
that's sampling and so what we want to

1679
01:43:54,149 --> 01:44:05,909
do here is you know we're just going to

1680
01:43:57,750 --> 01:44:07,470
do a bind texture so here where we

1681
01:44:05,909 --> 01:44:09,479
switch to the global resolve frame

1682
01:44:07,470 --> 01:44:18,150
buffer we also have to have a global

1683
01:44:09,479 --> 01:44:20,939
resolve texture and so all we would be

1684
01:44:18,149 --> 01:44:22,889
doing is this right we would set to the

1685
01:44:20,939 --> 01:44:26,189
final stretch program pull from the

1686
01:44:22,890 --> 01:44:29,280
global resolving texture draw you know

1687
01:44:26,189 --> 01:44:33,000
and then in that we go

1688
01:44:29,279 --> 01:44:35,989
and that's really all there is to it I

1689
01:44:33,000 --> 01:44:35,989
think

1690
01:45:00,578 --> 01:45:04,518
all right

1691
01:45:02,630 --> 01:45:29,989
so let's say we did that we would then

1692
01:45:04,519 --> 01:45:32,929
have final stretch program there we go

1693
01:45:29,988 --> 01:45:41,538
and the final stretch program I think

1694
01:45:32,929 --> 01:45:50,859
will just be a single texture right so

1695
01:45:41,538 --> 01:45:50,859
this is the image stretching that's it

1696
01:45:52,550 --> 01:46:05,949
and so if I go ahead and make one of

1697
01:45:57,800 --> 01:46:09,170
these I think we don't really have much

1698
01:46:05,948 --> 01:46:10,908
in the way defines I guess I'll leave

1699
01:46:09,170 --> 01:46:14,389
those in there in case we want to do

1700
01:46:10,908 --> 01:46:16,939
something with the srgb but for a

1701
01:46:14,389 --> 01:46:18,050
compiled peel composite this is actually

1702
01:46:16,939 --> 01:46:24,638
compiled

1703
01:46:18,050 --> 01:46:32,059
final stretch so in this case we've got

1704
01:46:24,639 --> 01:46:39,650
no color values just UV and then in our

1705
01:46:32,059 --> 01:46:41,949
our fragment code here just got the

1706
01:46:39,649 --> 01:46:41,948
image

1707
01:46:46,949 --> 01:46:52,809
and really we don't probably need to do

1708
01:46:51,340 --> 01:46:57,610
anything so I think we're just going to

1709
01:46:52,810 --> 01:47:00,220
do the fill color equals texture image

1710
01:46:57,609 --> 01:47:05,289
frag UV and all of this stuff is gone I

1711
01:47:00,220 --> 01:47:08,909
think that's the entire program I don't

1712
01:47:05,289 --> 01:47:08,909
really think there's anything else to it

1713
01:47:10,949 --> 01:47:18,789
yeah so this has no Verte color right

1714
01:47:16,630 --> 01:47:31,750
that's not in there although I think we

1715
01:47:18,789 --> 01:47:34,510
still have to get it here and I think

1716
01:47:31,750 --> 01:47:36,970
that should be about it and then we will

1717
01:47:34,510 --> 01:47:57,579
need a corresponding binding for just

1718
01:47:36,970 --> 01:48:05,050
that image so when we do our use program

1719
01:47:57,579 --> 01:48:08,850
begin here it's always going to be flat

1720
01:48:05,050 --> 01:48:14,940
zero because there's only one texture I

1721
01:48:08,850 --> 01:48:14,940
think that's mostly it oops

1722
01:48:15,550 --> 01:48:18,730
all right

1723
01:48:33,680 --> 01:48:40,710
so that compiles us another program and

1724
01:48:38,960 --> 01:48:42,270
really interests to pass through a

1725
01:48:40,710 --> 01:48:44,760
program that just stretches the texture

1726
01:48:42,270 --> 01:48:47,460
that's all it does I probably won't do

1727
01:48:44,760 --> 01:48:49,680
anything else so I don't think there's

1728
01:48:47,460 --> 01:48:51,510
much to worry about there however we do

1729
01:48:49,680 --> 01:48:53,400
need to do a slightly more delicate

1730
01:48:51,510 --> 01:48:56,760
operation here which is we need to

1731
01:48:53,399 --> 01:48:59,099
create a frame buffer for that temporary

1732
01:48:56,760 --> 01:49:00,960
purpose right

1733
01:48:59,100 --> 01:49:04,280
and so we've wanted to curious we want

1734
01:49:00,960 --> 01:49:09,569
to have one other frame buffer I and so

1735
01:49:04,279 --> 01:49:13,670
you know in in sort of this right here

1736
01:49:09,569 --> 01:49:19,199
we want a global resolve frame buffer

1737
01:49:13,670 --> 01:49:23,930
and a global resolved texture and those

1738
01:49:19,199 --> 01:49:26,309
need to get created at some point so

1739
01:49:23,930 --> 01:49:29,730
probably during initialization is when

1740
01:49:26,310 --> 01:49:32,220
we would do that and we probably want to

1741
01:49:29,729 --> 01:49:34,799
just cut and paste this code and modify

1742
01:49:32,220 --> 01:49:36,420
it a little bit because it's basically

1743
01:49:34,800 --> 01:49:37,619
the same but it's going to be enough

1744
01:49:36,420 --> 01:49:40,260
difference that I don't even really know

1745
01:49:37,619 --> 01:49:41,909
if we can reuse the code I suppose we

1746
01:49:40,260 --> 01:49:44,789
might be able to make sort of an uber

1747
01:49:41,909 --> 01:49:46,470
frame buffer generator I don't really

1748
01:49:44,789 --> 01:49:48,890
know like maybe we can if you could do

1749
01:49:46,470 --> 01:49:51,900
something like this where it's like

1750
01:49:48,890 --> 01:49:56,070
allocate frame buffer or something or

1751
01:49:51,899 --> 01:49:57,809
create frame buffer and maybe that's

1752
01:49:56,069 --> 01:49:58,859
possible to just take this code and boil

1753
01:49:57,810 --> 01:50:00,900
it down to something that just has a

1754
01:49:58,859 --> 01:50:02,939
bunch of ifs in it and you can pass in

1755
01:50:00,899 --> 01:50:06,629
some flags or something that says how

1756
01:50:02,939 --> 01:50:08,219
it's going to go right so for example

1757
01:50:06,630 --> 01:50:11,190
maybe one thing we could do is say well

1758
01:50:08,220 --> 01:50:14,850
there's a Glu int for the slot and

1759
01:50:11,189 --> 01:50:16,169
that's you know no well you know what

1760
01:50:14,850 --> 01:50:18,840
maybe we can even make this a little bit

1761
01:50:16,170 --> 01:50:21,869
more user-friendly so maybe we say like

1762
01:50:18,840 --> 01:50:27,360
okay is it multi sampled you know you

1763
01:50:21,869 --> 01:50:30,680
tell us is it a linear filtered you know

1764
01:50:27,359 --> 01:50:33,210
or just filter filtered you tell us

1765
01:50:30,680 --> 01:50:34,960
something like that and maybe I'll even

1766
01:50:33,210 --> 01:50:40,149
make those flags

1767
01:50:34,960 --> 01:50:46,270
just to be even clearer equals slides

1768
01:50:40,149 --> 01:50:48,689
and the Fangio flames over full-size

1769
01:50:46,270 --> 01:50:51,840
samples

1770
01:50:48,689 --> 01:50:59,169
flags and capris you'll framebuffer

1771
01:50:51,840 --> 01:51:00,940
tilted still in here we've got this glue

1772
01:50:59,170 --> 01:51:02,739
in slot thing and really what I'm just

1773
01:51:00,939 --> 01:51:04,569
going to say as well is it multi sampled

1774
01:51:02,739 --> 01:51:06,279
because if it's multi sampled we're

1775
01:51:04,569 --> 01:51:07,659
doing this if it's not we're doing that

1776
01:51:06,279 --> 01:51:11,619
right so there's not a lot of ambiguity

1777
01:51:07,659 --> 01:51:13,779
there we're going to be destruct OpenGL

1778
01:51:11,619 --> 01:51:15,130
frame buffer that structures going to

1779
01:51:13,779 --> 01:51:17,109
have two things in it right it's going

1780
01:51:15,130 --> 01:51:20,140
to have a filament for the texture

1781
01:51:17,109 --> 01:51:26,199
handle and GL you into the frame buffer

1782
01:51:20,140 --> 01:51:27,550
handle right and since we've probably

1783
01:51:26,199 --> 01:51:29,649
thought I don't really need to call

1784
01:51:27,550 --> 01:51:33,760
these well I don't know we'll call them

1785
01:51:29,649 --> 01:51:37,059
what we call so that's what I'm going to

1786
01:51:33,760 --> 01:51:38,980
return so I'll just say is open stream

1787
01:51:37,060 --> 01:51:43,200
buffer open gel frame buffer a result

1788
01:51:38,979 --> 01:51:49,019
here and so I'll get rid of this and

1789
01:51:43,199 --> 01:51:58,050
just say okay you know GL gen textures

1790
01:51:49,020 --> 01:51:58,050
result frame buffer handle no sorry

1791
01:51:59,520 --> 01:52:05,220
guess we really want to talk about two

1792
01:52:01,630 --> 01:52:07,960
things color handle def handle right

1793
01:52:05,220 --> 01:52:09,699
I'll call gen textures twice because

1794
01:52:07,960 --> 01:52:11,619
just I could call it with a pointer to

1795
01:52:09,699 --> 01:52:14,559
color handle but you know why be cheeky

1796
01:52:11,619 --> 01:52:16,960
if people reorganize those members I

1797
01:52:14,560 --> 01:52:18,070
would then you know the code would be

1798
01:52:16,960 --> 01:52:21,789
wrong so let's not do that

1799
01:52:18,069 --> 01:52:26,259
so we'll do GL gen textures and we'll

1800
01:52:21,789 --> 01:52:28,300
sort of allocate those two and we can

1801
01:52:26,260 --> 01:52:38,110
also gende the frame buffer handle as

1802
01:52:28,300 --> 01:52:40,409
well frame buffers sold give up for

1803
01:52:38,109 --> 01:52:40,409
handle

1804
01:52:40,599 --> 01:52:47,380
so that's like the first step right so

1805
01:52:45,819 --> 01:52:48,670
now we want to do say okay we've got

1806
01:52:47,380 --> 01:52:54,359
this and we're going to need this here

1807
01:52:48,670 --> 01:53:04,920
like you know open Jill same buffer

1808
01:52:54,359 --> 01:53:07,359
depth flags and open Jill frame buffer

1809
01:53:04,920 --> 01:53:08,618
color so we could actually specify all

1810
01:53:07,359 --> 01:53:11,710
kinds of stuff here and see which ones

1811
01:53:08,618 --> 01:53:17,979
we're going to have all right so what

1812
01:53:11,710 --> 01:53:34,510
we'd want to do here is say if color is

1813
01:53:17,979 --> 01:53:38,979
we'll say house color if have steps and

1814
01:53:34,510 --> 01:53:42,960
then what we can do is sort of create

1815
01:53:38,979 --> 01:53:42,959
the ones that we actually need

1816
01:53:50,550 --> 01:53:56,949
now what's interesting about this is

1817
01:53:53,970 --> 01:53:58,480
these are pretty similar bits here so we

1818
01:53:56,949 --> 01:53:59,710
really could save some code if we wanted

1819
01:53:58,479 --> 01:54:01,629
to I don't know that I'm going to do

1820
01:53:59,710 --> 01:54:03,369
that right now

1821
01:54:01,630 --> 01:54:05,710
but I'm just pointing out that we could

1822
01:54:03,369 --> 01:54:08,529
sort of make a texture creator call that

1823
01:54:05,710 --> 01:54:10,029
would also save us some time our save of

1824
01:54:08,529 --> 01:54:13,389
some typing echoes or with some

1825
01:54:10,029 --> 01:54:19,029
redundancy but I don't think I'm going

1826
01:54:13,390 --> 01:54:21,640
to do that just yet but anyway we'll get

1827
01:54:19,029 --> 01:54:23,859
rid of this you'll find frame buffer

1828
01:54:21,640 --> 01:54:25,570
global chain before handles so we don't

1829
01:54:23,859 --> 01:54:28,989
want that either we want result frame

1830
01:54:25,569 --> 01:54:40,259
buffer handle and then when we do she'll

1831
01:54:28,989 --> 01:54:40,260
remember for texture 2d I think

1832
01:54:46,220 --> 01:54:55,650
I think but don't quote me on this that

1833
01:54:51,029 --> 01:54:57,359
we will then need to move this stuff up

1834
01:54:55,649 --> 01:54:58,769
a bit now I don't know if this will be

1835
01:54:57,359 --> 01:55:01,109
valid the way I'm doing this here we'll

1836
01:54:58,770 --> 01:55:03,750
find out but what I'm going to do here

1837
01:55:01,109 --> 01:55:06,509
is say you know after we Jen the frame

1838
01:55:03,750 --> 01:55:08,430
buffer will bind the frame buffer and

1839
01:55:06,510 --> 01:55:12,170
that way when we create these we can do

1840
01:55:08,430 --> 01:55:12,170
the color attachment right away

1841
01:55:20,270 --> 01:55:25,980
that way you can exist inside the has

1842
01:55:22,890 --> 01:55:33,780
color and have depth and that should be

1843
01:55:25,979 --> 01:55:36,599
pretty good right okay so we need to

1844
01:55:33,779 --> 01:55:42,000
pass distant flags and we need to

1845
01:55:36,600 --> 01:55:46,800
specify what these enums are right so

1846
01:55:42,000 --> 01:55:48,619
this is a video frame buffer flags and

1847
01:55:46,800 --> 01:55:51,659
in this case what I'm going to do is to

1848
01:55:48,619 --> 01:55:59,340
take exactly what I said I wanted in the

1849
01:55:51,659 --> 01:56:03,779
code and make a Flags set a flag for

1850
01:55:59,340 --> 01:56:07,470
them all right

1851
01:56:03,779 --> 01:56:11,429
so obviously we need the width and the

1852
01:56:07,470 --> 01:56:18,900
height and I might just make that be the

1853
01:56:11,430 --> 01:56:21,869
first thing that comes down so let's

1854
01:56:18,899 --> 01:56:24,170
just go ahead and grab that everywhere

1855
01:56:21,869 --> 01:56:24,170
it's

1856
01:56:26,670 --> 01:56:38,760
there we go and same with you and

1857
01:56:39,000 --> 01:56:52,920
alright a result color handle and this

1858
01:56:47,949 --> 01:56:52,920
one is going to be results depth angle

1859
01:57:03,069 --> 01:57:08,689
okay so now we can create a frame buffer

1860
01:57:06,439 --> 01:57:10,549
and do all that stuff I want to have

1861
01:57:08,689 --> 01:57:12,710
filtering be controllable too so the

1862
01:57:10,550 --> 01:57:14,869
other thing I'm going to do here is

1863
01:57:12,710 --> 01:57:17,020
check that function deal text parameter

1864
01:57:14,869 --> 01:57:17,019
I

1865
01:57:17,689 --> 01:57:20,759
[Applause]

1866
01:57:32,300 --> 01:57:37,769
yeah

1867
01:57:34,529 --> 01:57:39,509
and that's a GL inte it looks like so

1868
01:57:37,769 --> 01:57:42,480
the one that we happen to be using here

1869
01:57:39,510 --> 01:57:55,079
is GL inte so I'm going to remember

1870
01:57:42,479 --> 01:58:00,959
which one I think that is so I'm going

1871
01:57:55,078 --> 01:58:02,819
to say if we're filtered then turn on

1872
01:58:00,960 --> 01:58:08,550
linear filtering otherwise turn on

1873
01:58:02,819 --> 01:58:30,268
nearest filtering and that way we can

1874
01:58:08,550 --> 01:58:32,038
say oops on both of these so I'll just

1875
01:58:30,269 --> 01:58:38,849
pick up the filter type from that that

1876
01:58:32,038 --> 01:58:40,439
test and that flag alright so now that

1877
01:58:38,849 --> 01:58:42,000
we can create a frame buffer we could

1878
01:58:40,439 --> 01:58:43,529
use this to create all the frame buffers

1879
01:58:42,000 --> 01:58:47,219
that we currently are using in fact

1880
01:58:43,529 --> 01:58:48,840
which is kind of nice right but the only

1881
01:58:47,219 --> 01:58:50,158
one I want to do it for at the moment is

1882
01:58:48,840 --> 01:58:52,949
just this one here that I actually

1883
01:58:50,158 --> 01:58:54,328
needed and so I'm going to go ahead and

1884
01:58:52,948 --> 01:58:56,069
create one of those frame buffers and

1885
01:58:54,328 --> 01:58:58,319
you can see that we know exactly what we

1886
01:58:56,069 --> 01:58:59,488
need for that final composite frame

1887
01:58:58,319 --> 01:59:01,618
buffer right which is this global

1888
01:58:59,488 --> 01:59:02,669
resolve frame buffer thing here we know

1889
01:59:01,618 --> 01:59:08,719
exact what we need which is something

1890
01:59:02,670 --> 01:59:10,800
that looks like you know that size right

1891
01:59:08,719 --> 01:59:13,380
so what I want to do here is the first

1892
01:59:10,800 --> 01:59:18,150
time we come through when we're doing

1893
01:59:13,380 --> 01:59:19,469
the sort of max render target situation

1894
01:59:18,149 --> 01:59:21,899
thing here right global frame buffer

1895
01:59:19,469 --> 01:59:23,880
camp what I want to do is when we come

1896
01:59:21,899 --> 01:59:26,368
through here this first time I want to

1897
01:59:23,880 --> 01:59:32,269
create that one as well so I want to do

1898
01:59:26,368 --> 01:59:34,979
create frame buffer and gel frame buffer

1899
01:59:32,269 --> 01:59:38,119
and what I want to do is I want to give

1900
01:59:34,979 --> 01:59:39,948
it the render within the render height

1901
01:59:38,118 --> 01:59:54,829
and I want to pass the right set of

1902
01:59:39,948 --> 02:00:01,000
flags so here are the flags that I might

1903
01:59:54,829 --> 02:00:05,059
want I just want it to be filtered oops

1904
02:00:01,000 --> 02:00:12,859
and to have a color it doesn't need a

1905
02:00:05,060 --> 02:00:14,780
depth lever and then what I can do is

1906
02:00:12,859 --> 02:00:17,929
say global resolve frame buffer equals

1907
02:00:14,779 --> 02:00:20,448
resolve that frame buffer handle

1908
02:00:17,929 --> 02:00:23,630
Louisville resolve texture equals

1909
02:00:20,448 --> 02:00:27,710
resolved texture handle and so now I

1910
02:00:23,630 --> 02:00:30,349
have that resolve buffer in theory if

1911
02:00:27,710 --> 02:00:31,819
our routine works at all we don't know

1912
02:00:30,349 --> 02:00:34,270
if it does its color handle is what I

1913
02:00:31,819 --> 02:00:34,269
want it there

1914
02:00:40,609 --> 02:00:52,069
we got errors enable vertex at rib array

1915
02:00:48,719 --> 02:00:55,668
so that's just a question of that common

1916
02:00:52,069 --> 02:01:00,469
part there doesn't have a frag color

1917
02:00:55,668 --> 02:01:07,819
anymore and so when we do use program

1918
02:01:00,469 --> 02:01:11,158
comment and it does does this bit that

1919
02:01:07,819 --> 02:01:14,188
doesn't work if like one of these arrays

1920
02:01:11,158 --> 02:01:17,429
isn't there right so I think what we

1921
02:01:14,189 --> 02:01:35,459
could do in this case is if I line these

1922
02:01:17,429 --> 02:02:03,899
up I could do something like this sort

1923
02:01:35,458 --> 02:02:09,179
of thing which is that great but you

1924
02:02:03,899 --> 02:02:11,039
know it's cute enough for now and so I

1925
02:02:09,179 --> 02:02:15,179
do the same thing here because I assume

1926
02:02:11,038 --> 02:02:17,538
you can't disable one that isn't a valid

1927
02:02:15,179 --> 02:02:17,538
one

1928
02:02:30,319 --> 02:02:33,590
but we'll see

1929
02:02:35,948 --> 02:02:41,469
all right so now what we're doing in

1930
02:02:39,670 --> 02:02:45,670
this case right is we're doing the

1931
02:02:41,469 --> 02:02:47,770
composite and then the stretch and it

1932
02:02:45,670 --> 02:02:49,239
looks like it's working right so that's

1933
02:02:47,770 --> 02:02:51,190
actually pretty good right it looks like

1934
02:02:49,238 --> 02:02:53,589
it's it's doing what we want to do here

1935
02:02:51,189 --> 02:02:55,539
I think don't quote me on that

1936
02:02:53,590 --> 02:02:57,719
let's actually go verify that I did

1937
02:02:55,539 --> 02:03:01,719
enable the path correctly and everything

1938
02:02:57,719 --> 02:03:03,489
so here we are with the frame buffer

1939
02:03:01,719 --> 02:03:04,539
binding that we rendered the global

1940
02:03:03,488 --> 02:03:07,178
resolve buffer then we come through

1941
02:03:04,539 --> 02:03:10,750
render a second time and that does look

1942
02:03:07,179 --> 02:03:15,090
roughly correct right that does look

1943
02:03:10,750 --> 02:03:15,090
like you know what I would expect

1944
02:03:22,479 --> 02:03:28,039
so that's fine and we fixed that error

1945
02:03:24,949 --> 02:03:30,710
so that's all good and this means we can

1946
02:03:28,039 --> 02:03:35,569
really just under sample as much as we

1947
02:03:30,710 --> 02:03:37,189
want so in theory now you know if we

1948
02:03:35,569 --> 02:03:38,299
really needed to for some reason the

1949
02:03:37,189 --> 02:03:39,679
Earth's I don't know what the reason

1950
02:03:38,300 --> 02:03:41,029
would ever be because I don't know how

1951
02:03:39,680 --> 02:03:43,940
you get a machine that had such a slow

1952
02:03:41,029 --> 02:03:46,909
had such so graphics and such fast

1953
02:03:43,939 --> 02:03:50,659
everything else but you know if we

1954
02:03:46,909 --> 02:03:58,819
wanted to yeah we could basically make

1955
02:03:50,659 --> 02:04:09,319
this even one one further smaller so you

1956
02:03:58,819 --> 02:04:14,420
know if we want to do 480 by 270 oops

1957
02:04:09,319 --> 02:04:26,420
not by 280 we should be able to do a

1958
02:04:14,420 --> 02:04:28,069
super blurry one and there we go and

1959
02:04:26,420 --> 02:04:29,690
this would be good test two because we

1960
02:04:28,069 --> 02:04:32,029
could turn on multi sampling in this

1961
02:04:29,689 --> 02:04:33,710
case when we get the multi simply

1962
02:04:32,029 --> 02:04:34,880
working and although it will be blurry

1963
02:04:33,710 --> 02:04:37,250
we should be able to get rid of all that

1964
02:04:34,880 --> 02:04:41,720
shimmer eNOS right a lot of that shimmer

1965
02:04:37,250 --> 02:04:43,819
eNOS should go away and so that'll be

1966
02:04:41,720 --> 02:04:49,789
good test for tomorrow turning on that

1967
02:04:43,819 --> 02:04:50,299
the multi sample right so I think that's

1968
02:04:49,789 --> 02:04:56,720
pretty good

1969
02:04:50,300 --> 02:05:00,590
I wonder hi

1970
02:04:56,720 --> 02:05:04,820
I wonder if we should just be like hey

1971
02:05:00,590 --> 02:05:10,460
you know what let's just just like let's

1972
02:05:04,819 --> 02:05:18,639
make this really pixelated because why

1973
02:05:10,460 --> 02:05:18,640
not right Oh can't can it not do that

1974
02:05:20,649 --> 02:05:25,899
what wait 0:06

1975
02:05:31,469 --> 02:05:37,369
how did we end up with 0 and 0 as the

1976
02:05:34,260 --> 02:05:37,369
render with and render height

1977
02:05:43,538 --> 02:05:46,139
huh

1978
02:05:48,770 --> 02:05:55,070
that's pretty unusual wouldn't you say

1979
02:05:50,988 --> 02:06:00,709
oh I never called it that's why it's

1980
02:05:55,069 --> 02:06:07,059
zero and zero so I'm interested to know

1981
02:06:00,710 --> 02:06:10,880
if you can make like pixel hero by him

1982
02:06:07,060 --> 02:06:16,130
by doubt like having the sampling really

1983
02:06:10,880 --> 02:06:20,960
low and then turning off the turn

1984
02:06:16,130 --> 02:06:23,630
turning off the blend so instead of

1985
02:06:20,960 --> 02:06:32,170
having this be filtered you just you

1986
02:06:23,630 --> 02:06:34,850
don't don't filter it right so it's like

1987
02:06:32,170 --> 02:06:37,819
all of a sudden it's like a pixel art

1988
02:06:34,850 --> 02:06:41,380
game not a very good pixel heart game

1989
02:06:37,819 --> 02:06:45,199
but it's a pixel art game just the same

1990
02:06:41,380 --> 02:06:47,989
right and here we go down you know our

1991
02:06:45,199 --> 02:06:51,859
pixel hero is pixel around doing pixel

1992
02:06:47,988 --> 02:06:55,279
things and you know that's just how that

1993
02:06:51,859 --> 02:06:56,899
goes it's you know maybe that's maybe

1994
02:06:55,279 --> 02:06:59,210
that's what you're going for I don't

1995
02:06:56,899 --> 02:07:05,119
know you kiss today and they're pixel

1996
02:06:59,210 --> 02:07:07,539
art you know I'm Sam alright we'll do

1997
02:07:05,119 --> 02:07:07,539
some QA

1998
02:07:16,639 --> 02:07:19,510
the puddin

1999
02:07:36,109 --> 02:07:39,109
okay

2000
02:07:42,380 --> 02:07:51,289
so John blow has has shown up as far as

2001
02:07:50,180 --> 02:07:56,150
I can tell

2002
02:07:51,289 --> 02:08:00,729
simply to say OpenGL sucks that is that

2003
02:07:56,149 --> 02:08:07,339
it's prefixed with a Q :

2004
02:08:00,729 --> 02:08:10,849
so he is he is not even asking the

2005
02:08:07,340 --> 02:08:13,909
question OpenGL sucks question mark he's

2006
02:08:10,850 --> 02:08:18,530
merely stating OpenGL sucks in the form

2007
02:08:13,909 --> 02:08:21,649
of a question kind of like jeopardy when

2008
02:08:18,529 --> 02:08:26,630
it's like this API is an agglomeration

2009
02:08:21,649 --> 02:08:35,539
of years of mistakes and he's going what

2010
02:08:26,630 --> 02:08:38,800
is OpenGL so I guess what I would say

2011
02:08:35,539 --> 02:08:45,979
about that is I agree with that

2012
02:08:38,800 --> 02:08:50,480
obviously but I actually like the if you

2013
02:08:45,979 --> 02:08:53,809
were to use opengl 4.5 like AZ do I

2014
02:08:50,479 --> 02:08:59,829
actually quite like the problem with

2015
02:08:53,810 --> 02:09:02,360
OpenGL that I find mostly is that

2016
02:08:59,829 --> 02:09:04,039
there's it seems like there's people who

2017
02:09:02,359 --> 02:09:06,979
know what they're doing who have figured

2018
02:09:04,039 --> 02:09:10,880
out how to actually make a good API and

2019
02:09:06,979 --> 02:09:13,579
they made it and they're NVIDIA and if

2020
02:09:10,880 --> 02:09:17,000
you go use their extension specifically

2021
02:09:13,579 --> 02:09:18,529
and locked just to that API it's exactly

2022
02:09:17,000 --> 02:09:21,949
like the way I want well not maybe not

2023
02:09:18,529 --> 02:09:23,539
exactly but real close but the problem

2024
02:09:21,949 --> 02:09:25,369
is that's not the reality of using

2025
02:09:23,539 --> 02:09:26,840
OpenGL the reality of using open jails

2026
02:09:25,369 --> 02:09:32,059
you have to write up in jail that works

2027
02:09:26,840 --> 02:09:34,489
on everyone's drivers and and when you

2028
02:09:32,060 --> 02:09:35,660
limit yourself to that or like worse yet

2029
02:09:34,489 --> 02:09:38,479
what I'm doing on handmade here which is

2030
02:09:35,659 --> 02:09:41,149
kind of backwards compatibility no so

2031
02:09:38,479 --> 02:09:41,809
it's actually pretty old up in jail it's

2032
02:09:41,149 --> 02:09:45,849
awful

2033
02:09:41,810 --> 02:09:47,990
I'm and I would not disagree with that

2034
02:09:45,850 --> 02:09:50,329
so I actually think there is a really

2035
02:09:47,989 --> 02:09:52,179
good API inside open jail and I feel

2036
02:09:50,329 --> 02:09:54,680
like I don't know if that's just because

2037
02:09:52,180 --> 02:09:56,210
you know there are people who kind of

2038
02:09:54,680 --> 02:09:57,890
get what it should look

2039
02:09:56,210 --> 02:09:59,719
like and have tried to do that as much

2040
02:09:57,890 --> 02:10:02,030
as they can but they only have a certain

2041
02:09:59,719 --> 02:10:03,680
amount of influence on you know the

2042
02:10:02,029 --> 02:10:06,019
committee's that decide these things and

2043
02:10:03,680 --> 02:10:09,469
so you know they can't quite get there

2044
02:10:06,020 --> 02:10:14,739
or what but there are some very good API

2045
02:10:09,469 --> 02:10:17,119
design things in opengl 4.5 AZ do stuff

2046
02:10:14,738 --> 02:10:21,529
that get real close to how you would

2047
02:10:17,119 --> 02:10:25,099
want an actual graphics API to look so I

2048
02:10:21,529 --> 02:10:28,250
will defend that part of OpenGL opengl

2049
02:10:25,100 --> 02:10:29,719
3.0 x is an epic disaster and that

2050
02:10:28,250 --> 02:10:34,119
happens to be what we're programming in

2051
02:10:29,719 --> 02:10:34,119
so there's that

2052
02:10:56,958 --> 02:11:01,399
and John says the problem is there is no

2053
02:10:59,658 --> 02:11:04,759
way for me to know what the good API is

2054
02:11:01,399 --> 02:11:08,808
anymore yes I agree and also I mean I

2055
02:11:04,760 --> 02:11:10,429
would say that it doesn't matter that

2056
02:11:08,809 --> 02:11:12,320
you can't figure out was a good API is

2057
02:11:10,429 --> 02:11:15,889
because like I was saying or sort of

2058
02:11:12,319 --> 02:11:18,828
what I was trying to say before was you

2059
02:11:15,889 --> 02:11:21,069
can't really use it anyway because you

2060
02:11:18,828 --> 02:11:25,368
would you would be targeting a very

2061
02:11:21,069 --> 02:11:31,099
small set of potential users with it

2062
02:11:25,368 --> 02:11:32,658
necessarily because you know you you

2063
02:11:31,099 --> 02:11:34,458
know you might just not run on Intel at

2064
02:11:32,658 --> 02:11:37,488
all like Intel GPUs are out of the

2065
02:11:34,458 --> 02:11:39,559
question right at that point and AMD

2066
02:11:37,488 --> 02:11:41,598
cards you could run on but you would

2067
02:11:39,559 --> 02:11:46,248
have to remove a couple parts of the API

2068
02:11:41,599 --> 02:11:48,889
you would want or something right and so

2069
02:11:46,248 --> 02:11:51,559
you know it's worse than just the fact

2070
02:11:48,889 --> 02:11:52,788
that hey there's all this API in there

2071
02:11:51,559 --> 02:11:54,079
that's not good and that you wouldn't

2072
02:11:52,788 --> 02:11:55,399
want to use but now you don't even

2073
02:11:54,078 --> 02:11:58,158
really know that there is some good API

2074
02:11:55,399 --> 02:11:59,779
and there that you could go use it's

2075
02:11:58,158 --> 02:12:02,920
worse than that because it's like well

2076
02:11:59,779 --> 02:12:06,679
yeah but even if I told you here's

2077
02:12:02,920 --> 02:12:08,420
here's the good API I you know I pulled

2078
02:12:06,679 --> 02:12:10,158
it out of OpenGL and I said here you

2079
02:12:08,420 --> 02:12:13,880
know if you just look at these api's and

2080
02:12:10,158 --> 02:12:16,368
use them they're real good that won't

2081
02:12:13,880 --> 02:12:18,229
ship you a game right so that's that's

2082
02:12:16,368 --> 02:12:22,069
the actual problem if they just like

2083
02:12:18,229 --> 02:12:24,199
flush the toilet and got rid of

2084
02:12:22,069 --> 02:12:30,049
everything that wasn't basically Nvidia

2085
02:12:24,198 --> 02:12:32,888
AZ do OpenGL right and that was OpenGL 5

2086
02:12:30,050 --> 02:12:35,690
I think it would be pretty awesome right

2087
02:12:32,889 --> 02:12:37,069
because I like a lot of stuff they did

2088
02:12:35,689 --> 02:12:42,198
better than the way they did it in

2089
02:12:37,069 --> 02:12:44,029
Vulcan because Vulcan still did a bunch

2090
02:12:42,198 --> 02:12:51,189
of weird backwards compatibility stuff

2091
02:12:44,029 --> 02:12:54,948
that I don't want you know so yeah I

2092
02:12:51,189 --> 02:12:56,198
don't know you're damned if you do

2093
02:12:54,948 --> 02:12:59,538
damned if you don't

2094
02:12:56,198 --> 02:13:01,129
it seems like it there's nowhere to go

2095
02:12:59,538 --> 02:13:02,630
for a good graphics API like that's

2096
02:13:01,130 --> 02:13:04,429
that's just that's not on the table you

2097
02:13:02,630 --> 02:13:08,510
don't get to have that I don't know what

2098
02:13:04,429 --> 02:13:09,920
the best middle ground is you

2099
02:13:08,510 --> 02:13:11,840
the reason I programmed opengl on

2100
02:13:09,920 --> 02:13:17,270
handmade zero stream in particular is

2101
02:13:11,840 --> 02:13:19,340
just because it's the thing that works

2102
02:13:17,270 --> 02:13:21,110
on the most platforms so it's the thing

2103
02:13:19,340 --> 02:13:23,090
that probably gives people the most

2104
02:13:21,109 --> 02:13:25,939
foothold in to be able to do graphics

2105
02:13:23,090 --> 02:13:28,010
they could write on Android and it would

2106
02:13:25,939 --> 02:13:30,710
look roughly like this they could write

2107
02:13:28,010 --> 02:13:31,909
on Linux in it would look rough like

2108
02:13:30,710 --> 02:13:33,199
this they can run our Windows and it

2109
02:13:31,909 --> 02:13:35,750
looks reflect this thinking around iMac

2110
02:13:33,199 --> 02:13:37,069
and it looks rough for like this so I

2111
02:13:35,750 --> 02:13:38,869
feel like that's the best thing for a

2112
02:13:37,069 --> 02:13:41,090
teaching stream what's the best thing

2113
02:13:38,869 --> 02:13:43,220
for shipping a game it seems like there

2114
02:13:41,090 --> 02:13:46,279
is no best thing it's like hey yeah use

2115
02:13:43,220 --> 02:13:51,199
DirectX on Windows and use metal on

2116
02:13:46,279 --> 02:13:52,880
Apple and use you know the console

2117
02:13:51,199 --> 02:13:56,960
specific API that you have to use on the

2118
02:13:52,880 --> 02:13:58,699
console and use you know OpenGL ES on

2119
02:13:56,960 --> 02:14:01,369
Android and blah blah blah blah blah

2120
02:13:58,699 --> 02:14:02,720
it's like well you know it's just a

2121
02:14:01,369 --> 02:14:06,019
disaster no matter what you do at that

2122
02:14:02,720 --> 02:14:07,489
point and so yeah I don't know I don't

2123
02:14:06,020 --> 02:14:09,790
know what to say it's but it's really

2124
02:14:07,488 --> 02:14:15,939
bad I wish it wasn't this way I don't

2125
02:14:09,789 --> 02:14:15,939
really yeah

2126
02:14:30,779 --> 02:14:34,090
let's see and went through two ended up

2127
02:14:32,979 --> 02:14:35,529
in jail why do you use two different

2128
02:14:34,090 --> 02:14:37,420
forms for assigning modern OpenGL

2129
02:14:35,529 --> 02:14:38,769
function pointers I using winter to get

2130
02:14:37,420 --> 02:14:40,210
up into a function macro for some but

2131
02:14:38,770 --> 02:14:42,190
assign goes directly that's just because

2132
02:14:40,210 --> 02:14:44,980
we only made that macro like partway

2133
02:14:42,189 --> 02:14:46,569
through so we could go back and do the

2134
02:14:44,979 --> 02:14:49,119
other ones that way as well

2135
02:14:46,569 --> 02:14:50,500
we just haven't done that yet if we were

2136
02:14:49,119 --> 02:14:53,199
cleaning up that code we would because

2137
02:14:50,500 --> 02:14:55,689
the macro is cleaner it's easier to use

2138
02:14:53,199 --> 02:14:57,699
and results in less duplicated code so

2139
02:14:55,689 --> 02:15:00,039
you know that that was just because we

2140
02:14:57,699 --> 02:15:02,500
only created the macro a little bit

2141
02:15:00,039 --> 02:15:04,149
further on serial killer just so you

2142
02:15:02,500 --> 02:15:05,170
know your stream no longer shows up in

2143
02:15:04,149 --> 02:15:06,399
either the game development or

2144
02:15:05,170 --> 02:15:07,779
programming categories on Twitch it's

2145
02:15:06,399 --> 02:15:10,420
almost a hidden stream now just for

2146
02:15:07,779 --> 02:15:12,729
those who already followed I don't

2147
02:15:10,420 --> 02:15:18,369
actually know how twitch is doing that

2148
02:15:12,729 --> 02:15:20,619
so I'll try to remind myself I don't

2149
02:15:18,369 --> 02:15:23,130
know how I will remind myself hold on

2150
02:15:20,619 --> 02:15:23,130
one second

2151
02:15:29,349 --> 02:15:42,810
I will try to remind myself right here

2152
02:15:39,448 --> 02:15:42,809
let's see

2153
02:15:57,670 --> 02:16:05,260
all right I have I have made a note

2154
02:16:02,819 --> 02:16:11,829
let's see what else we've got

2155
02:16:05,260 --> 02:16:14,289
I tried during on honest union strikes

2156
02:16:11,829 --> 02:16:16,000
trick and the compiler Agito screams at

2157
02:16:14,289 --> 02:16:17,409
me saying I need some label in the

2158
02:16:16,000 --> 02:16:18,939
struct name to conform to the standards

2159
02:16:17,409 --> 02:16:20,529
so I looked it up on Google and appears

2160
02:16:18,939 --> 02:16:23,469
to be undefined behavior chooses trick

2161
02:16:20,529 --> 02:16:26,800
should I be afraid of that well it

2162
02:16:23,470 --> 02:16:29,470
depends what you mean by afraid my

2163
02:16:26,800 --> 02:16:33,190
personal opinion is that I don't really

2164
02:16:29,470 --> 02:16:35,409
care about language specs or compliance

2165
02:16:33,190 --> 02:16:39,159
to them I really just care about what

2166
02:16:35,409 --> 02:16:42,670
compilers do or don't do and do or don't

2167
02:16:39,159 --> 02:16:45,369
accept so I typically just say and this

2168
02:16:42,670 --> 02:16:46,840
comes from two reasons one is because I

2169
02:16:45,370 --> 02:16:50,110
think the C and C both suspects are

2170
02:16:46,840 --> 02:16:52,600
awful I just don't agree with most of

2171
02:16:50,110 --> 02:16:54,489
the decisions they tend to make so I

2172
02:16:52,600 --> 02:16:56,380
would rather program in a language

2173
02:16:54,489 --> 02:16:58,270
that's closer to what I want and so if

2174
02:16:56,379 --> 02:17:02,679
compilers give me the option to turn off

2175
02:16:58,270 --> 02:17:05,110
things I just don't like like I never

2176
02:17:02,679 --> 02:17:07,120
want caught strings ever that's just not

2177
02:17:05,110 --> 02:17:08,739
something I ever want to have right you

2178
02:17:07,120 --> 02:17:11,170
know I want to be able to turn that off

2179
02:17:08,739 --> 02:17:14,139
as I can and I'll program to that you

2180
02:17:11,170 --> 02:17:15,520
know turned off ability it comes from

2181
02:17:14,139 --> 02:17:18,899
that but it also comes from a separate

2182
02:17:15,520 --> 02:17:22,920
thing which is when I was programming

2183
02:17:18,899 --> 02:17:25,029
probably mid-career I'd say so you know

2184
02:17:22,920 --> 02:17:28,809
not when I was learning to code when I

2185
02:17:25,030 --> 02:17:31,540
was a kid but you know roughly when I

2186
02:17:28,809 --> 02:17:32,859
first started working in the industry C

2187
02:17:31,540 --> 02:17:36,010
both Pirates were still bad that

2188
02:17:32,860 --> 02:17:38,200
they didn't obey the SEC anyway that

2189
02:17:36,010 --> 02:17:40,809
compliance was not a thing that that was

2190
02:17:38,200 --> 02:17:46,420
even remotely expected and you know you

2191
02:17:40,809 --> 02:17:48,489
never got that so it kind of my mental

2192
02:17:46,420 --> 02:17:50,590
states on that as always like the spec

2193
02:17:48,489 --> 02:17:52,869
is not the thing I have to work with the

2194
02:17:50,590 --> 02:17:56,979
spec is something that is for compiler

2195
02:17:52,870 --> 02:17:59,140
vendors and pedantic people the actual

2196
02:17:56,979 --> 02:18:01,840
thing that I sit down and type into is

2197
02:17:59,139 --> 02:18:04,510
the thing I'm trying to program and so I

2198
02:18:01,840 --> 02:18:08,409
need to know what those are and how they

2199
02:18:04,510 --> 02:18:09,460
work and what they create and what they

2200
02:18:08,409 --> 02:18:14,138
accept

2201
02:18:09,459 --> 02:18:17,169
we'll do you know so that's usually how

2202
02:18:14,138 --> 02:18:19,750
I approach it there are downsides to

2203
02:18:17,170 --> 02:18:21,399
that obviously and if that's if you have

2204
02:18:19,750 --> 02:18:23,349
a compiler that can literally only

2205
02:18:21,399 --> 02:18:25,299
accept exactly the spec you have a

2206
02:18:23,349 --> 02:18:25,989
problem I don't tend to worry too much

2207
02:18:25,299 --> 02:18:28,000
about that

2208
02:18:25,989 --> 02:18:29,619
because as far as I've been able to tell

2209
02:18:28,000 --> 02:18:32,170
you can always even if worse came to

2210
02:18:29,620 --> 02:18:36,880
worse you could run LLVM to transcode

2211
02:18:32,170 --> 02:18:39,099
your thing into C or something you know

2212
02:18:36,879 --> 02:18:40,239
I'd write a text translator or something

2213
02:18:39,099 --> 02:18:41,920
that would convert my code into

2214
02:18:40,239 --> 02:18:44,138
something that the compiler would accept

2215
02:18:41,920 --> 02:18:45,989
if that's what I had to do but I

2216
02:18:44,138 --> 02:18:49,149
wouldn't solve the problem by like

2217
02:18:45,989 --> 02:18:51,638
ruining a good like language features

2218
02:18:49,149 --> 02:18:54,039
that I find makes coding better just

2219
02:18:51,638 --> 02:18:55,768
because some people who make aspect

2220
02:18:54,040 --> 02:18:59,710
don't know what they're doing right

2221
02:18:55,769 --> 02:19:01,750
because if you did that every time man

2222
02:18:59,709 --> 02:19:04,000
you'd be really unhappy with your

2223
02:19:01,750 --> 02:19:06,638
programming because I mean there's a lot

2224
02:19:04,000 --> 02:19:07,959
of things in the spec that make a lot of

2225
02:19:06,638 --> 02:19:09,579
kinds of codes that you would think

2226
02:19:07,959 --> 02:19:11,919
would work properly or should probably

2227
02:19:09,579 --> 02:19:14,829
technically not work right that's the

2228
02:19:11,920 --> 02:19:16,569
whole undefined behavior nonsense that

2229
02:19:14,829 --> 02:19:18,429
you often see where people are like what

2230
02:19:16,569 --> 02:19:20,739
how did the why did the compiler do this

2231
02:19:18,429 --> 02:19:22,599
it's like well technically if you add

2232
02:19:20,739 --> 02:19:24,340
two numbers together that's undefined

2233
02:19:22,599 --> 02:19:26,769
behavior so anywhere your program adds

2234
02:19:24,340 --> 02:19:27,909
two numbers together well you know we

2235
02:19:26,769 --> 02:19:29,380
don't actually have to add them together

2236
02:19:27,909 --> 02:19:31,840
right you know and I'm exaggerating

2237
02:19:29,379 --> 02:19:33,789
obviously they're in for mocking effect

2238
02:19:31,840 --> 02:19:37,739
but you know you know what I mean

2239
02:19:33,790 --> 02:19:37,740
there's a lot of that kind of thing

2240
02:19:50,190 --> 02:20:00,130
let's see the cursor always seems to be

2241
02:19:58,149 --> 02:20:02,739
on the loading icon' is there a way to

2242
02:20:00,129 --> 02:20:04,299
fix that I'm running into this issue and

2243
02:20:02,739 --> 02:20:13,360
not sure if there is some Windows

2244
02:20:04,299 --> 02:20:16,840
message I need to process so I guess the

2245
02:20:13,360 --> 02:20:19,450
answer could be yes it could be no I'm

2246
02:20:16,840 --> 02:20:22,630
not sure so let's let's just really

2247
02:20:19,450 --> 02:20:24,370
quick to check its weight cursors are

2248
02:20:22,629 --> 02:20:26,709
more complicated than they should be in

2249
02:20:24,370 --> 02:20:31,090
Windows it's a it's a weird legacy kind

2250
02:20:26,709 --> 02:20:32,859
of a situation so let's take a look here

2251
02:20:31,090 --> 02:20:36,610
do we even process the set cursor

2252
02:20:32,860 --> 02:20:38,260
message we don't right now we only did

2253
02:20:36,610 --> 02:20:41,440
that on that weird overlay window thing

2254
02:20:38,260 --> 02:20:43,920
that midlow made us make that time let's

2255
02:20:41,440 --> 02:20:43,920
see here

2256
02:20:48,060 --> 02:20:53,739
so it looks like for whatever reason so

2257
02:20:51,129 --> 02:20:55,569
we are specifying it here right here's

2258
02:20:53,739 --> 02:20:58,539
the main window callback and we're

2259
02:20:55,569 --> 02:21:02,199
calling def window proc when the set

2260
02:20:58,540 --> 02:21:06,000
cursor call is coming through and it

2261
02:21:02,200 --> 02:21:08,110
looks like diff window proc is not

2262
02:21:06,000 --> 02:21:12,510
thinks we're still sending cursor now

2263
02:21:08,110 --> 02:21:12,510
that may mean that we just should have

2264
02:21:13,140 --> 02:21:18,190
done something else that could mean that

2265
02:21:16,629 --> 02:21:24,609
there's something we're not responding

2266
02:21:18,190 --> 02:21:26,170
to that we should respond to and I

2267
02:21:24,610 --> 02:21:28,239
wonder is there a Raymond Chen article

2268
02:21:26,170 --> 02:21:29,739
on this because you know one thing we

2269
02:21:28,239 --> 02:21:32,199
could do that would probably fix it

2270
02:21:29,739 --> 02:21:34,569
right is just set the cursor to the

2271
02:21:32,200 --> 02:21:40,320
arrow cursor in the case where we're

2272
02:21:34,569 --> 02:21:40,319
showing the cursor right so for example

2273
02:21:45,219 --> 02:21:50,448
here where we in our passing age cursor

2274
02:21:48,520 --> 02:21:51,819
here we're calling state cursor 0

2275
02:21:50,449 --> 02:21:54,050
because we don't want a cursor at all

2276
02:21:51,818 --> 02:21:56,689
here what we want to do is pass an

2277
02:21:54,049 --> 02:22:00,019
actual cursor so what we want to do is

2278
02:21:56,689 --> 02:22:02,869
say you know don't do this instead to a

2279
02:22:00,020 --> 02:22:06,279
set cursor here and what we want to do

2280
02:22:02,869 --> 02:22:09,409
is we want to load a sort of a an

2281
02:22:06,279 --> 02:22:13,090
arbitrary cursor right we don't want to

2282
02:22:09,408 --> 02:22:15,500
sets our own actual cursor so there's

2283
02:22:13,090 --> 02:22:18,260
built-in cursors you could load out of

2284
02:22:15,500 --> 02:22:19,850
Windows the H instance in this case when

2285
02:22:18,260 --> 02:22:21,829
you call load cursor is saying curious

2286
02:22:19,850 --> 02:22:24,649
the executable whose resource for con

2287
02:22:21,829 --> 02:22:25,760
look at to find this cursor we don't

2288
02:22:24,648 --> 02:22:28,219
want to do any that we don't want to

2289
02:22:25,760 --> 02:22:29,510
bundle a cursor inter executable like we

2290
02:22:28,219 --> 02:22:31,398
don't wanna put an image in there blah

2291
02:22:29,510 --> 02:22:33,408
blah blah right but what you can do is

2292
02:22:31,398 --> 02:22:34,969
if you specify 0 for the H instance you

2293
02:22:33,408 --> 02:22:37,939
can load out of the default set of

2294
02:22:34,969 --> 02:22:42,049
cursors and those are identified by

2295
02:22:37,939 --> 02:22:45,680
these IDs right so what you can do is

2296
02:22:42,049 --> 02:22:48,500
you can say make entry source which is a

2297
02:22:45,680 --> 02:22:50,809
macro and if it's well we can see what

2298
02:22:48,500 --> 02:22:58,189
it is but we can use the make entry

2299
02:22:50,809 --> 02:23:00,350
source macro and we can pass one of

2300
02:22:58,189 --> 02:23:08,148
these like the standard arrow cursor

2301
02:23:00,350 --> 02:23:09,710
right and so if we do that we should be

2302
02:23:08,148 --> 02:23:13,789
able to set the cursor to something

2303
02:23:09,709 --> 02:23:14,688
specific I would think all right well so

2304
02:23:13,790 --> 02:23:19,100
that's interesting

2305
02:23:14,689 --> 02:23:20,840
so it works but oddly enough we still

2306
02:23:19,100 --> 02:23:27,318
get a little bit of a loading thing so

2307
02:23:20,840 --> 02:23:30,318
there's still some some miscommunication

2308
02:23:27,318 --> 02:23:35,539
there I wonder if we have a problem with

2309
02:23:30,318 --> 02:23:39,039
responding to activate like if activate

2310
02:23:35,540 --> 02:23:39,040
has to return true

2311
02:23:41,860 --> 02:23:46,190
we really should look this up because

2312
02:23:44,540 --> 02:23:51,680
there is some set of things you're

2313
02:23:46,190 --> 02:23:53,030
supposed to do I don't know let me let

2314
02:23:51,680 --> 02:24:03,470
me take a look at what activate app

2315
02:23:53,030 --> 02:24:06,290
expects and what activate expects it

2316
02:24:03,469 --> 02:24:08,329
should return zero so that's probably

2317
02:24:06,290 --> 02:24:14,140
not they want let's see

2318
02:24:08,329 --> 02:24:14,139
Raymond 10 wait yes sir

2319
02:24:20,579 --> 02:24:41,819
yeah we should look I mean I remember

2320
02:24:25,510 --> 02:24:41,819
there being a thing and I don't know I

2321
02:24:43,170 --> 02:24:46,899
don't know how to search for it I

2322
02:24:45,340 --> 02:24:49,510
remember there being a thing that

2323
02:24:46,899 --> 02:24:51,399
basically said here is what Windows

2324
02:24:49,510 --> 02:24:52,889
looks for to determine whether it thinks

2325
02:24:51,399 --> 02:24:57,029
your app has finished loading and

2326
02:24:52,889 --> 02:25:00,310
there's like you know there's criteria

2327
02:24:57,030 --> 02:25:03,940
and I do not remember what they are

2328
02:25:00,310 --> 02:25:05,590
unfortunately so probably the answer is

2329
02:25:03,940 --> 02:25:07,360
yet there's just something we're not

2330
02:25:05,590 --> 02:25:09,819
responding to because you can see here

2331
02:25:07,360 --> 02:25:12,550
where we actually manually said set

2332
02:25:09,819 --> 02:25:16,510
cursor it responded to our set cursor

2333
02:25:12,549 --> 02:25:18,879
but it didn't actually seem to to take

2334
02:25:16,510 --> 02:25:21,250
fully it still thought we were loading

2335
02:25:18,879 --> 02:25:25,509
long after there's any way we could

2336
02:25:21,250 --> 02:25:28,180
still be considered loading right so one

2337
02:25:25,510 --> 02:25:30,521
thing I do want worry about here is you

2338
02:25:28,180 --> 02:25:32,500
know are we actually after create window

2339
02:25:30,521 --> 02:25:35,260
are we actually making our window active

2340
02:25:32,500 --> 02:25:38,950
or are we somehow not doing that quite

2341
02:25:35,260 --> 02:25:45,909
right and so like when we do toggle

2342
02:25:38,950 --> 02:25:47,740
full-screen here for example and we do

2343
02:25:45,909 --> 02:25:50,440
set window close I don't know that we

2344
02:25:47,739 --> 02:25:52,780
actually ever get the window activated

2345
02:25:50,440 --> 02:25:56,050
in that case so I wonder if we need to

2346
02:25:52,780 --> 02:26:01,390
like you know call activate window or

2347
02:25:56,049 --> 02:26:05,379
something like that called that's not

2348
02:26:01,389 --> 02:26:07,680
what it's called by the way except focus

2349
02:26:05,379 --> 02:26:07,679
maybe

2350
02:26:17,860 --> 02:26:21,750
you know maybe setfocus

2351
02:26:34,760 --> 02:26:43,709
so I'm not sure I'm just going to see to

2352
02:26:42,238 --> 02:26:46,379
play around with it here to see if I can

2353
02:26:43,709 --> 02:26:57,119
poke it into submission so that doesn't

2354
02:26:46,379 --> 02:27:00,389
help get rid of that now one thing

2355
02:26:57,119 --> 02:27:05,279
you'll notice is if I click which is

2356
02:27:00,389 --> 02:27:07,078
pretty interesting so it's not it's not

2357
02:27:05,279 --> 02:27:08,880
going away from wait cursor right it

2358
02:27:07,078 --> 02:27:12,930
stays on wait cursor if I click in here

2359
02:27:08,879 --> 02:27:15,559
it does so it's like activating the

2360
02:27:12,930 --> 02:27:20,130
window somehow is not properly happening

2361
02:27:15,559 --> 02:27:22,078
and I'm not really sure why that's the

2362
02:27:20,129 --> 02:27:23,219
case because clicking in the window

2363
02:27:22,078 --> 02:27:26,158
should really not do anything that

2364
02:27:23,219 --> 02:27:28,648
setting the active window doesn't do so

2365
02:27:26,158 --> 02:27:37,288
I'm trying to think of what it is that

2366
02:27:28,648 --> 02:27:39,349
it's actually that it's actually worried

2367
02:27:37,289 --> 02:27:39,350
about

2368
02:27:41,870 --> 02:27:45,939
and we could try set foreground window

2369
02:27:51,601 --> 02:27:55,011
I don't know

2370
02:28:03,909 --> 02:28:09,341
still no dice and so for whatever reason

2371
02:28:07,149 --> 02:28:11,501
yet it's like until we actually do that

2372
02:28:09,341 --> 02:28:14,171
click it doesn't work so I'm not sure

2373
02:28:11,501 --> 02:28:16,810
what exactly is going on there

2374
02:28:14,171 --> 02:28:18,190
I could try doing it repeatedly like I

2375
02:28:16,810 --> 02:28:20,319
wonder if there's something startup

2376
02:28:18,190 --> 02:28:21,819
related about that but it does it really

2377
02:28:20,319 --> 02:28:24,671
does seem like maybe there's a window

2378
02:28:21,819 --> 02:28:27,390
message that we're not responding to if

2379
02:28:24,671 --> 02:28:27,390
that makes sense

2380
02:28:38,270 --> 02:28:42,270
frosti ninja says you can set the cursor

2381
02:28:40,648 --> 02:28:45,409
on the wind class struct which dot h

2382
02:28:42,270 --> 02:28:47,850
cursor equals load cursor 0 rd c arrow

2383
02:28:45,409 --> 02:28:58,920
that's true

2384
02:28:47,850 --> 02:29:00,750
we can do that i would not have thought

2385
02:28:58,920 --> 02:29:02,819
that that would be different than

2386
02:29:00,750 --> 02:29:06,840
setting the cursor inside the set cursor

2387
02:29:02,819 --> 02:29:12,059
call but maybe it is so if we want to do

2388
02:29:06,840 --> 02:29:15,978
that here right oh but wait we are doing

2389
02:29:12,059 --> 02:29:15,978
that that's exactly what we are doing

2390
02:29:16,370 --> 02:29:21,000
when we do load cursor IDC arrow

2391
02:29:18,989 --> 02:29:30,139
shouldn't that be making resource ID

2392
02:29:21,000 --> 02:29:30,139
Ciara wonder if that's the problem now

2393
02:29:34,969 --> 02:29:41,219
so I really don't know I have no idea

2394
02:29:39,059 --> 02:29:43,079
I just we need to find that

2395
02:29:41,219 --> 02:29:45,648
documentation again because I guess what

2396
02:29:43,079 --> 02:29:45,648
I can tell you

2397
02:30:06,719 --> 02:30:12,189
let's see here so you said the stream

2398
02:30:09,670 --> 02:30:14,260
let's let's take the last question here

2399
02:30:12,190 --> 02:30:16,360
you said on the stream that you don't

2400
02:30:14,260 --> 02:30:17,680
need header guards because you have only

2401
02:30:16,360 --> 02:30:20,440
one translation unit

2402
02:30:17,680 --> 02:30:22,360
I guess you meant that you're sure you

2403
02:30:20,440 --> 02:30:24,880
only include each header once because

2404
02:30:22,360 --> 02:30:26,079
even if you only have one cancellation

2405
02:30:24,879 --> 02:30:28,149
you still can have a problem if you

2406
02:30:26,079 --> 02:30:29,709
include the same header twice well sure

2407
02:30:28,149 --> 02:30:31,659
but if you only have one translation

2408
02:30:29,709 --> 02:30:33,789
unit it's almost impossible to include

2409
02:30:31,659 --> 02:30:35,229
the same header twice because you just

2410
02:30:33,790 --> 02:30:37,480
include all the headers in one place

2411
02:30:35,229 --> 02:30:41,709
right so if you take a look at handmade

2412
02:30:37,479 --> 02:30:44,829
eh that's where all the headers are

2413
02:30:41,709 --> 02:30:48,549
included nobody else includes headers

2414
02:30:44,829 --> 02:30:51,039
right so you don't have to worry there's

2415
02:30:48,549 --> 02:30:52,449
only one list of includes basically I

2416
02:30:51,040 --> 02:30:55,780
mean technically we've got two because

2417
02:30:52,450 --> 02:30:58,030
we do the platform has some so there's a

2418
02:30:55,780 --> 02:30:59,290
couple in here I don't remember where I

2419
02:30:58,030 --> 02:31:02,860
thought they were oh maybe they're not

2420
02:30:59,290 --> 02:31:05,710
yeah here so technically there is one

2421
02:31:02,860 --> 02:31:07,569
extra one right but otherwise you know

2422
02:31:05,709 --> 02:31:10,000
you've just got a list and the same is

2423
02:31:07,569 --> 02:31:11,949
true for Hamid at CPP right like here's

2424
02:31:10,000 --> 02:31:13,629
where all the CPP files are so you know

2425
02:31:11,950 --> 02:31:15,790
forget headers CPP files is saying you

2426
02:31:13,629 --> 02:31:17,079
can't include them twice right but

2427
02:31:15,790 --> 02:31:18,580
there's no need to put an include guard

2428
02:31:17,079 --> 02:31:20,860
around them because you're just going to

2429
02:31:18,579 --> 02:31:22,479
list them there aren't going to ever be

2430
02:31:20,860 --> 02:31:24,010
any other pound includes you're just

2431
02:31:22,479 --> 02:31:27,430
going to list all your pound includes in

2432
02:31:24,010 --> 02:31:34,840
one place and that's dumb right that's

2433
02:31:27,430 --> 02:31:38,319
completely done so so yeah I think

2434
02:31:34,840 --> 02:31:40,380
that's it and now close this case I

2435
02:31:38,319 --> 02:31:43,059
asked about multiple anonymous unions

2436
02:31:40,379 --> 02:31:46,449
yeah but I'm not sure I thought we

2437
02:31:43,059 --> 02:31:52,329
covered that although maybe I'm missing

2438
02:31:46,450 --> 02:31:53,980
something I mean I guess I don't know

2439
02:31:52,329 --> 02:32:00,360
what you mean by multiple anonymous

2440
02:31:53,979 --> 02:32:00,359
unions but but if you look at like

2441
02:32:03,790 --> 02:32:13,040
and a platform where's our v2 at here we

2442
02:32:11,659 --> 02:32:15,590
go

2443
02:32:13,040 --> 02:32:19,520
so here is an example of multiple

2444
02:32:15,590 --> 02:32:21,710
anonymous trucks inside something and

2445
02:32:19,520 --> 02:32:23,120
multiple anonymous unions inside the

2446
02:32:21,709 --> 02:32:25,250
structure but not on the outside of the

2447
02:32:23,120 --> 02:32:26,630
struct I don't know if you're talking

2448
02:32:25,250 --> 02:32:30,318
about something other than that but that

2449
02:32:26,629 --> 02:32:32,589
is you know we do multiple anonymous all

2450
02:32:30,318 --> 02:32:34,609
the time

2451
02:32:32,590 --> 02:32:37,699
multiple anonymous is a very common

2452
02:32:34,609 --> 02:32:41,079
thing for us to do so

2453
02:32:37,699 --> 02:32:41,079
alright let's wrap it up

2454
02:32:47,101 --> 02:32:54,060
Wow no all right thank you everyone for

2455
02:32:53,040 --> 02:32:55,561
joining me for those sort of handmade

2456
02:32:54,060 --> 02:32:57,810
heroes and a pleasure coding with you as

2457
02:32:55,560 --> 02:33:01,079
always if you would like to follow along

2458
02:32:57,810 --> 02:33:02,399
at home you can always pre-order the

2459
02:33:01,079 --> 02:33:04,229
game on hand made here at Oregon it

2460
02:33:02,399 --> 02:33:05,550
comes with a source code so you can play

2461
02:33:04,229 --> 02:33:07,350
around with it you also have a forum

2462
02:33:05,550 --> 02:33:09,779
site you can go to if you want support

2463
02:33:07,351 --> 02:33:11,250
I'm sorry if you want to ask questions a

2464
02:33:09,780 --> 02:33:13,200
patreon page for about three or series a

2465
02:33:11,250 --> 02:33:15,000
schedule bot that tweets the question

2466
02:33:13,200 --> 02:33:16,801
the schedule at you if you want to know

2467
02:33:15,000 --> 02:33:18,569
we're going to be live and an episode

2468
02:33:16,800 --> 02:33:21,569
guide that helps you catch up on old

2469
02:33:18,569 --> 02:33:23,629
episodes I also wanted to take a moment

2470
02:33:21,569 --> 02:33:26,190
to announce that there is a new

2471
02:33:23,629 --> 02:33:30,810
supportable project that is related to

2472
02:33:26,190 --> 02:33:33,030
handmade hero and it's actually kind of

2473
02:33:30,810 --> 02:33:34,709
exciting there's a couple of these kind

2474
02:33:33,030 --> 02:33:36,960
of going on but I don't know of any

2475
02:33:34,709 --> 02:33:38,819
other ones that are supportable at the

2476
02:33:36,959 --> 02:33:39,839
moment so let me go ahead and show it to

2477
02:33:38,819 --> 02:33:42,090
you

2478
02:33:39,840 --> 02:33:44,670
it's on handmade network as a lot of

2479
02:33:42,090 --> 02:33:48,750
those projects are what you can see here

2480
02:33:44,670 --> 02:33:52,290
is a embeddable debugger that's being

2481
02:33:48,750 --> 02:33:55,021
worked on and the idea is to instead of

2482
02:33:52,290 --> 02:33:58,530
having you know a particular debugger

2483
02:33:55,021 --> 02:34:01,230
that you have to use and it's like oh

2484
02:33:58,530 --> 02:34:02,851
it's Visual Studio or whatever else the

2485
02:34:01,229 --> 02:34:04,979
idea is to build sort of a debugging

2486
02:34:02,851 --> 02:34:07,319
library that you can use where if you

2487
02:34:04,979 --> 02:34:07,829
want to put a debugger into something

2488
02:34:07,319 --> 02:34:10,890
else

2489
02:34:07,829 --> 02:34:12,511
right like a text editor that you

2490
02:34:10,890 --> 02:34:15,649
particularly like that happens to be

2491
02:34:12,511 --> 02:34:19,140
customizable say for coder in my case

2492
02:34:15,649 --> 02:34:21,629
you can use this library to quickly add

2493
02:34:19,140 --> 02:34:24,181
debugging features to that existing

2494
02:34:21,629 --> 02:34:27,420
editor and so this is really exciting

2495
02:34:24,181 --> 02:34:29,761
because if this worked out and you know

2496
02:34:27,420 --> 02:34:31,649
we had a good library we could use for

2497
02:34:29,761 --> 02:34:33,329
debugging we could completely get rid of

2498
02:34:31,649 --> 02:34:37,761
a lot of the stuff that we are currently

2499
02:34:33,329 --> 02:34:40,110
using like gdb front-ends and you know

2500
02:34:37,761 --> 02:34:41,819
visual studio and cetera et cetera and

2501
02:34:40,110 --> 02:34:43,079
so I would love to see a product like

2502
02:34:41,819 --> 02:34:46,890
this come to fruition where there's like

2503
02:34:43,079 --> 02:34:49,800
a clean good API library for debugging

2504
02:34:46,890 --> 02:34:51,720
and so everything that you know we might

2505
02:34:49,800 --> 02:34:54,000
want we can stick a debugger into and

2506
02:34:51,720 --> 02:34:56,189
have good debugging facilities would be

2507
02:34:54,000 --> 02:34:59,431
pretty awesome right

2508
02:34:56,190 --> 02:35:02,371
and it would also be part of the sort of

2509
02:34:59,431 --> 02:35:04,200
handmade Network school of thought there

2510
02:35:02,370 --> 02:35:06,390
so it would actually be something where

2511
02:35:04,200 --> 02:35:07,771
it cared about how the API was it would

2512
02:35:06,390 --> 02:35:09,661
be easily usable without you know

2513
02:35:07,771 --> 02:35:11,551
installing Python and all these other

2514
02:35:09,661 --> 02:35:13,860
sorts of things or who knows what the

2515
02:35:11,550 --> 02:35:16,109
typical kind of thing that you expect

2516
02:35:13,860 --> 02:35:21,091
when you install a library or try to use

2517
02:35:16,110 --> 02:35:22,891
a library right so you know I can't say

2518
02:35:21,091 --> 02:35:24,261
much about it yet other because it's you

2519
02:35:22,890 --> 02:35:26,810
know still pretty early in development

2520
02:35:24,261 --> 02:35:30,149
but it is kind of a really interesting

2521
02:35:26,810 --> 02:35:32,040
potential project and so if you're

2522
02:35:30,149 --> 02:35:34,140
interested in that it does have a

2523
02:35:32,040 --> 02:35:37,260
patreon I don't know what the easiest

2524
02:35:34,140 --> 02:35:39,001
way to get to it is probably just doing

2525
02:35:37,261 --> 02:35:41,011
like what I just did

2526
02:35:39,001 --> 02:35:43,800
but what you can do is you can go to the

2527
02:35:41,011 --> 02:35:45,899
patreon and support it and that would

2528
02:35:43,800 --> 02:35:48,060
presumably really help the project up

2529
02:35:45,899 --> 02:35:51,380
because if this number got higher a lot

2530
02:35:48,060 --> 02:35:54,360
more time would get spent on it it's

2531
02:35:51,380 --> 02:35:58,501
probably easiest to get there by just

2532
02:35:54,360 --> 02:36:00,121
putting ly s a dot handmade Network but

2533
02:35:58,501 --> 02:36:01,800
I also assume that if you just were on

2534
02:36:00,120 --> 02:36:03,420
handmade network you could also probably

2535
02:36:01,800 --> 02:36:06,989
find it in fact there it is on the front

2536
02:36:03,421 --> 02:36:08,700
page right now but it would be under the

2537
02:36:06,989 --> 02:36:10,530
project section so you could find it in

2538
02:36:08,700 --> 02:36:13,141
here if you forgot what it was called or

2539
02:36:10,530 --> 02:36:15,631
something like that right

2540
02:36:13,140 --> 02:36:17,040
so yeah just wanted to bring that to

2541
02:36:15,630 --> 02:36:18,720
your attention because I know that a lot

2542
02:36:17,040 --> 02:36:21,750
of people have been really good about

2543
02:36:18,720 --> 02:36:23,790
supporting stuff that we use on handmade

2544
02:36:21,751 --> 02:36:26,640
heroes for example for coders now very

2545
02:36:23,790 --> 02:36:28,739
well supported and that's really awesome

2546
02:36:26,640 --> 02:36:31,739
because I rely on it every day and so I

2547
02:36:28,739 --> 02:36:33,239
support it and I you know very much

2548
02:36:31,739 --> 02:36:34,380
appreciate that other people support it

2549
02:36:33,239 --> 02:36:36,210
because it means that we have a really

2550
02:36:34,380 --> 02:36:37,921
good editor now which I never had before

2551
02:36:36,210 --> 02:36:41,939
you know I had to use Emacs before and

2552
02:36:37,921 --> 02:36:43,610
it was not very good so you know if we

2553
02:36:41,940 --> 02:36:45,899
can get a few more projects like that

2554
02:36:43,610 --> 02:36:47,280
into position where it's like these are

2555
02:36:45,899 --> 02:36:50,940
really good alternative development

2556
02:36:47,280 --> 02:36:53,041
tools that are you know high quality and

2557
02:36:50,940 --> 02:36:55,591
that we can use that's I think that's

2558
02:36:53,040 --> 02:36:58,380
pretty awesome so hopefully you'll check

2559
02:36:55,591 --> 02:37:00,300
that out and and see if it's something

2560
02:36:58,380 --> 02:37:03,120
that you might want to support or be

2561
02:37:00,300 --> 02:37:06,989
involved with that's about it for this

2562
02:37:03,120 --> 02:37:08,880
weekend no this this today I guess I'll

2563
02:37:06,989 --> 02:37:10,411
be back here tomorrow sorry I haven't

2564
02:37:08,880 --> 02:37:11,248
had coffee yet today so my brains kind

2565
02:37:10,411 --> 02:37:12,779
of scattershot

2566
02:37:11,248 --> 02:37:18,439
surprise the programming went as well as

2567
02:37:12,779 --> 02:37:21,600
it did anyway I'll be back here tomorrow

2568
02:37:18,439 --> 02:37:24,119
and we'll take a look at doing some

2569
02:37:21,600 --> 02:37:27,180
multi sampling so that we can get rid of

2570
02:37:24,119 --> 02:37:28,770
some of those jaggies and we're pretty

2571
02:37:27,180 --> 02:37:30,988
good on artifacts now there's very

2572
02:37:28,770 --> 02:37:33,119
little artifact tang in the def peeler

2573
02:37:30,988 --> 02:37:35,118
rendering so it's pretty good

2574
02:37:33,119 --> 02:37:38,369
I'm feeling very good about the renderer

2575
02:37:35,119 --> 02:37:39,989
we might have to take a look at making

2576
02:37:38,369 --> 02:37:42,539
sure that like our cutscene stuff still

2577
02:37:39,988 --> 02:37:45,779
works but other than that I think we're

2578
02:37:42,539 --> 02:37:47,550
in pretty good shape and and we can do

2579
02:37:45,779 --> 02:37:50,069
it some more cleanup maybe the weekend

2580
02:37:47,549 --> 02:37:51,988
after and then and give it give it the

2581
02:37:50,068 --> 02:37:54,269
official seal of approval if that's the

2582
02:37:51,988 --> 02:37:58,559
render and off we go

2583
02:37:54,270 --> 02:38:00,479
all right thanks for joining me I'll see

2584
02:37:58,559 --> 02:38:01,680
you back here tomorrow till then have

2585
02:38:00,478 --> 02:38:04,760
fun programming I'll see you on the

2586
02:38:01,680 --> 02:38:04,760
Internet tegus everybody

