1
00:00:00,680 --> 00:00:04,710
hello everybody and welcome to handmade

2
00:00:03,178 --> 00:00:09,050
Hero the show we could a complete game

3
00:00:04,710 --> 00:00:12,419
live on stream we are going to do some

4
00:00:09,050 --> 00:00:14,910
sampling fixes today we were right in

5
00:00:12,419 --> 00:00:17,309
the middle of it last week and we didn't

6
00:00:14,910 --> 00:00:19,079
really get a chance to finish so we've

7
00:00:17,309 --> 00:00:21,179
got a couple things we got to do and one

8
00:00:19,079 --> 00:00:24,419
of them actually will probably lead us

9
00:00:21,179 --> 00:00:26,599
to do something that we have wanted to

10
00:00:24,420 --> 00:00:30,750
do for a long time to kind of put off

11
00:00:26,599 --> 00:00:34,259
and it's gonna happen which is to get

12
00:00:30,750 --> 00:00:38,100
rid of the C runtime library why because

13
00:00:34,259 --> 00:00:39,988
the only reason you know we still link

14
00:00:38,100 --> 00:00:42,960
with the C runtime library at all we

15
00:00:39,988 --> 00:00:44,788
almost don't use any of it but if you

16
00:00:42,960 --> 00:00:47,579
look at what we actually do use here and

17
00:00:44,789 --> 00:00:53,789
in fact we can go ahead and take a look

18
00:00:47,579 --> 00:00:55,500
it's pretty easy to see oops so if we

19
00:00:53,789 --> 00:00:57,510
you know look at our build that bad file

20
00:00:55,500 --> 00:01:00,539
what we can see here is that you know

21
00:00:57,509 --> 00:01:03,329
when we're compiling the code we are

22
00:01:00,539 --> 00:01:05,040
still using just a pretty standard link

23
00:01:03,329 --> 00:01:07,140
line right we don't have you can you can

24
00:01:05,040 --> 00:01:08,580
see here I mean I guess one thing I

25
00:01:07,140 --> 00:01:11,250
would say is it's a little misleading

26
00:01:08,579 --> 00:01:14,519
because normally what happens when you

27
00:01:11,250 --> 00:01:15,840
link a program is you're supposed to say

28
00:01:14,519 --> 00:01:17,188
the things that you actually want to

29
00:01:15,840 --> 00:01:21,150
link with and you can kind of see us

30
00:01:17,188 --> 00:01:22,859
doing that in other places so for

31
00:01:21,150 --> 00:01:25,259
example you see here when we build the

32
00:01:22,859 --> 00:01:28,049
win32 loader we've got common linker

33
00:01:25,259 --> 00:01:30,780
flags is one of the things that's there

34
00:01:28,049 --> 00:01:32,909
and if you go look at what common linker

35
00:01:30,780 --> 00:01:37,618
flags has in it you can see that common

36
00:01:32,909 --> 00:01:40,530
linker flags has all of these libs on it

37
00:01:37,618 --> 00:01:42,060
right and so you might think well okay

38
00:01:40,530 --> 00:01:43,228
we can look at common linker flags and

39
00:01:42,060 --> 00:01:44,850
those are the libraries that we're

40
00:01:43,228 --> 00:01:46,319
linking with so there we go that's what

41
00:01:44,849 --> 00:01:48,030
we must use but it's not actually true

42
00:01:46,319 --> 00:01:50,129
and the reason that's not actually true

43
00:01:48,030 --> 00:01:51,478
is because the C compiler makes some

44
00:01:50,129 --> 00:01:56,310
assumptions about what you're probably

45
00:01:51,478 --> 00:01:58,500
trying to do and those assumptions mean

46
00:01:56,310 --> 00:02:00,719
that it will automatically link at least

47
00:01:58,500 --> 00:02:03,450
two libraries usually that you didn't

48
00:02:00,718 --> 00:02:05,819
ask for one is kernel32 and you'll

49
00:02:03,450 --> 00:02:08,819
notice on here it'll 32 is not on this

50
00:02:05,819 --> 00:02:10,469
link line right yet if we actually run

51
00:02:08,818 --> 00:02:11,679
depends which I don't actually know if

52
00:02:10,469 --> 00:02:18,128
we have depends on this one

53
00:02:11,680 --> 00:02:20,859
or not yet do we have dependents on this

54
00:02:18,128 --> 00:02:25,030
machine we had it on the other machine

55
00:02:20,859 --> 00:02:28,959
that we used to use but I don't see it

56
00:02:25,030 --> 00:02:33,098
on this one yeah I don't I don't see

57
00:02:28,959 --> 00:02:34,239
depends on this one at all let's just go

58
00:02:33,098 --> 00:02:44,408
ahead and download it because I think we

59
00:02:34,239 --> 00:02:50,829
want it depends so if I grab this guy

60
00:02:44,408 --> 00:02:54,668
here 2 2 6 4 X 64 and we'll just go

61
00:02:50,829 --> 00:03:03,400
ahead and grab that out here so we'll

62
00:02:54,669 --> 00:03:07,719
have it there we go if we go ahead and

63
00:03:03,400 --> 00:03:09,039
run this we can I ask about what we're

64
00:03:07,718 --> 00:03:10,658
actually linking with and we did this a

65
00:03:09,039 --> 00:03:12,158
long time ago on handmade hero but you

66
00:03:10,658 --> 00:03:13,598
know it was way at the beginning so you

67
00:03:12,158 --> 00:03:15,578
know it's something that's kind of

68
00:03:13,598 --> 00:03:18,518
ancient history now because we only did

69
00:03:15,579 --> 00:03:19,989
it just you know very briefly at the

70
00:03:18,519 --> 00:03:22,090
start to take a look at how the linking

71
00:03:19,989 --> 00:03:24,280
was working but if we take a look here

72
00:03:22,090 --> 00:03:27,729
on win32 handmade egg Z and I open this

73
00:03:24,280 --> 00:03:30,120
up hopefully if assuming that it works

74
00:03:27,729 --> 00:03:30,120
okay

75
00:03:30,269 --> 00:03:37,688
who knows what this is talking about now

76
00:03:34,739 --> 00:03:38,829
although you know the modern linking

77
00:03:37,688 --> 00:03:41,318
environment of Windows which is

78
00:03:38,829 --> 00:03:43,209
absolutely disgusting in horrendous you

79
00:03:41,318 --> 00:03:45,908
can still if you collapse this stuff see

80
00:03:43,209 --> 00:03:47,590
the actual libraries we depend on in

81
00:03:45,908 --> 00:03:49,810
what you can see here is kernel32 is

82
00:03:47,590 --> 00:03:51,759
there and it's always gonna be there

83
00:03:49,810 --> 00:03:53,199
unless you do some really weird fancy

84
00:03:51,758 --> 00:04:01,059
footwork there's actually some ways you

85
00:03:53,199 --> 00:04:03,220
can not use it but as you've seen me do

86
00:04:01,060 --> 00:04:06,310
in Windows you can use a thing called

87
00:04:03,219 --> 00:04:09,489
get proc address to get the address of a

88
00:04:06,310 --> 00:04:11,438
particular function in Windows and in

89
00:04:09,489 --> 00:04:14,349
order to do that you need to have the

90
00:04:11,438 --> 00:04:15,789
function load library and the function

91
00:04:14,348 --> 00:04:17,139
get proc address because you need to be

92
00:04:15,789 --> 00:04:18,848
able to load library the thing you want

93
00:04:17,139 --> 00:04:20,319
to load that the place you want to get

94
00:04:18,848 --> 00:04:22,509
the function from you need to call get

95
00:04:20,319 --> 00:04:24,790
proc address to get it right to need

96
00:04:22,509 --> 00:04:27,099
those two things well

97
00:04:24,790 --> 00:04:28,270
in order to get those two functions they

98
00:04:27,100 --> 00:04:30,340
have to come from somewhere and you

99
00:04:28,269 --> 00:04:33,099
can't use load library and get proc

100
00:04:30,339 --> 00:04:35,349
address to get them because those are

101
00:04:33,100 --> 00:04:37,720
the ones you need to get functions so

102
00:04:35,350 --> 00:04:39,700
kernel32 is the minimum requirement to

103
00:04:37,720 --> 00:04:42,940
link with on Windows if you want to then

104
00:04:39,699 --> 00:04:44,469
link with everything else right so we

105
00:04:42,939 --> 00:04:45,250
don't have to link with any of these

106
00:04:44,470 --> 00:04:47,200
dll's

107
00:04:45,250 --> 00:04:49,629
on the command line we could load them

108
00:04:47,199 --> 00:04:51,039
and then link with them dynamically at

109
00:04:49,629 --> 00:04:52,269
runtime if we want to and in fact we

110
00:04:51,040 --> 00:04:54,340
already do that with a bunch of things

111
00:04:52,269 --> 00:04:55,509
in OpenGL just because the base OpenGL

112
00:04:54,339 --> 00:04:57,729
live doesn't have a bunch of the

113
00:04:55,509 --> 00:04:59,199
functions in it that we want um but we

114
00:04:57,730 --> 00:05:02,319
could also do that with all of these so

115
00:04:59,199 --> 00:05:04,089
for example when mmm DLL we use time to

116
00:05:02,319 --> 00:05:05,589
get paired from that if we didn't want

117
00:05:04,089 --> 00:05:07,509
to link with win mmm that live anymore

118
00:05:05,589 --> 00:05:09,129
in the command line we could just make a

119
00:05:07,509 --> 00:05:12,099
call in there and get that function out

120
00:05:09,129 --> 00:05:13,689
right we could do that and then we

121
00:05:12,100 --> 00:05:15,160
wouldn't see this on our depends anymore

122
00:05:13,689 --> 00:05:16,959
we would still sort of depend on it

123
00:05:15,160 --> 00:05:18,760
because we do get proc address on it

124
00:05:16,959 --> 00:05:20,799
but we could gracefully handle failure

125
00:05:18,759 --> 00:05:22,420
for some reason win mmdillho wasn't

126
00:05:20,800 --> 00:05:24,129
there we could just not call time begin

127
00:05:22,420 --> 00:05:27,580
period and run as normal and we probably

128
00:05:24,129 --> 00:05:28,779
still be fine right so this is just

129
00:05:27,579 --> 00:05:29,949
giving us a little bit of perspective on

130
00:05:28,779 --> 00:05:31,839
what we're linking with but we don't

131
00:05:29,949 --> 00:05:33,550
have to go through these except kernel32

132
00:05:31,839 --> 00:05:35,739
which we would need forget proc address

133
00:05:33,550 --> 00:05:37,569
and load library so that we could link

134
00:05:35,740 --> 00:05:39,129
with everything else dynamically instead

135
00:05:37,569 --> 00:05:39,730
of sort of more statically like we're

136
00:05:39,129 --> 00:05:41,139
doing here

137
00:05:39,730 --> 00:05:43,930
it's still not statically linking

138
00:05:41,139 --> 00:05:45,639
because we are still using the dynamic

139
00:05:43,930 --> 00:05:48,730
link library but it's static linking in

140
00:05:45,639 --> 00:05:50,680
the sense that we link in hard bound

141
00:05:48,730 --> 00:05:52,480
positions that the compiler generates to

142
00:05:50,680 --> 00:05:55,060
link with these libraries using the libs

143
00:05:52,480 --> 00:05:56,350
that are listed there and so it creates

144
00:05:55,060 --> 00:05:58,839
this automatic dependency where our

145
00:05:56,350 --> 00:06:01,660
executable won't even get to our first

146
00:05:58,839 --> 00:06:03,759
line of main if those dll's weren't on

147
00:06:01,660 --> 00:06:05,890
the system so for some reason OpenGL

148
00:06:03,759 --> 00:06:07,209
wasn't on the system for example we

149
00:06:05,889 --> 00:06:09,879
wouldn't even get to our first line of

150
00:06:07,209 --> 00:06:12,399
main we just get a linker error from

151
00:06:09,879 --> 00:06:14,589
Windows that basically says hey you

152
00:06:12,399 --> 00:06:16,479
don't actually have the DLLs that you're

153
00:06:14,589 --> 00:06:18,549
man if it's not really a manifest but

154
00:06:16,480 --> 00:06:25,480
that your executable says that it needed

155
00:06:18,550 --> 00:06:27,460
right so you can still then do it if you

156
00:06:25,480 --> 00:06:29,470
want to get rid of kernel32 as well and

157
00:06:27,459 --> 00:06:31,120
have nothing here it's just not really

158
00:06:29,470 --> 00:06:32,980
recommended and basically what you do is

159
00:06:31,120 --> 00:06:34,550
you do the same thing the kernel 32 Lib

160
00:06:32,980 --> 00:06:37,430
would do to get the address

161
00:06:34,550 --> 00:06:39,530
of where the kernel actually is you you

162
00:06:37,430 --> 00:06:41,389
have to use some knowledge about how the

163
00:06:39,529 --> 00:06:44,000
stack is set up upon entry into your

164
00:06:41,389 --> 00:06:45,710
program to like go grab I shouldn't say

165
00:06:44,000 --> 00:06:48,199
stack but the segments and stuff are set

166
00:06:45,709 --> 00:06:51,109
up in order to go grab the address of

167
00:06:48,199 --> 00:06:52,788
certain tables you can use to jump to

168
00:06:51,110 --> 00:06:54,860
things like get proc address so you

169
00:06:52,788 --> 00:06:56,360
still can't do it it's just probably not

170
00:06:54,860 --> 00:06:58,788
a very good idea and you always know

171
00:06:56,360 --> 00:07:00,229
kernel32.dll will be on the system so

172
00:06:58,788 --> 00:07:03,829
there's really no reason not to link to

173
00:07:00,228 --> 00:07:05,568
it right so anyway that's currently what

174
00:07:03,829 --> 00:07:07,399
we're doing here so you can see that

175
00:07:05,569 --> 00:07:09,460
well okay there's there's one thing that

176
00:07:07,399 --> 00:07:11,989
we're linking to that that really isn't

177
00:07:09,459 --> 00:07:13,879
quite right you know that that that we

178
00:07:11,990 --> 00:07:16,189
didn't specify here but it's added so

179
00:07:13,879 --> 00:07:18,589
that's added because it pretty much

180
00:07:16,189 --> 00:07:19,819
knows any program linked on Windows

181
00:07:18,589 --> 00:07:23,179
unless you're doing something really

182
00:07:19,819 --> 00:07:24,680
crazy is going to link with kernel32 Lib

183
00:07:23,180 --> 00:07:26,569
right I mean that's just a given

184
00:07:24,680 --> 00:07:28,340
you kind of need it unless you're doing

185
00:07:26,569 --> 00:07:30,590
some crazy gyrations to avoid it

186
00:07:28,339 --> 00:07:32,388
everything else you may not need if you

187
00:07:30,589 --> 00:07:33,649
never call anything in any of these

188
00:07:32,389 --> 00:07:35,960
libraries you wouldn't need to link with

189
00:07:33,649 --> 00:07:37,549
them and also like I just said you could

190
00:07:35,959 --> 00:07:39,468
choose to do get proc addresses linked

191
00:07:37,550 --> 00:07:40,968
with them instead if you'd like so you

192
00:07:39,468 --> 00:07:42,529
have a lot of options of not linking

193
00:07:40,968 --> 00:07:43,759
with these so kernel32 is really the

194
00:07:42,529 --> 00:07:45,859
only one that it knows and so it

195
00:07:43,759 --> 00:07:47,538
includes that one implicitly so we don't

196
00:07:45,860 --> 00:07:49,939
except to specify back here you can see

197
00:07:47,538 --> 00:07:52,250
if we look for kernel32 right it's not

198
00:07:49,939 --> 00:07:53,810
there and that's because it just shows

199
00:07:52,250 --> 00:07:56,418
that one in the link line automatically

200
00:07:53,810 --> 00:07:58,459
now there's another thing it shoves in

201
00:07:56,418 --> 00:08:01,668
the link line automatically and that

202
00:07:58,459 --> 00:08:03,288
something is not actually shown in

203
00:08:01,668 --> 00:08:05,718
depends you noticed it wasn't there

204
00:08:03,288 --> 00:08:07,699
because it's actually completely

205
00:08:05,718 --> 00:08:09,079
statically compiled in what is that

206
00:08:07,699 --> 00:08:11,629
that's the C runtime library we've

207
00:08:09,079 --> 00:08:16,430
talked about before and what's happening

208
00:08:11,629 --> 00:08:21,918
there is when we link this line right

209
00:08:16,430 --> 00:08:24,259
here so you see this - MTD we have told

210
00:08:21,918 --> 00:08:27,468
the compiler we would like to statically

211
00:08:24,259 --> 00:08:30,408
link with the C runtime library using

212
00:08:27,468 --> 00:08:33,019
this switch and it is automatically

213
00:08:30,408 --> 00:08:35,208
adding that Lib to our command line so

214
00:08:33,019 --> 00:08:40,069
if we wanted to get rid of the C runtime

215
00:08:35,208 --> 00:08:41,869
library right we could but we need the

216
00:08:40,070 --> 00:08:44,600
switches to do it so we need to

217
00:08:41,870 --> 00:08:46,278
affirmative ly up instead of all this

218
00:08:44,600 --> 00:08:48,440
does we could get rid of this right now

219
00:08:46,278 --> 00:08:50,179
in fact if we did

220
00:08:48,440 --> 00:08:52,970
we would probably still compile just

221
00:08:50,179 --> 00:08:53,689
fine and so you can see there there we

222
00:08:52,970 --> 00:08:56,570
go

223
00:08:53,690 --> 00:08:58,310
so without the minus MTD it's actually

224
00:08:56,570 --> 00:09:00,740
still totally fine and we're not

225
00:08:58,309 --> 00:09:03,289
specifying any other - M flags as you

226
00:09:00,740 --> 00:09:05,450
can see but what will happen then is

227
00:09:03,289 --> 00:09:06,980
we'll simply just get a different flavor

228
00:09:05,450 --> 00:09:09,020
of C runtime library but it's still

229
00:09:06,980 --> 00:09:12,019
gonna silently link the C runtime

230
00:09:09,019 --> 00:09:15,439
library in right so if we take a look in

231
00:09:12,019 --> 00:09:17,799
here and I look at at that win32

232
00:09:15,440 --> 00:09:21,860
hand-made again with depends this time

233
00:09:17,799 --> 00:09:24,649
let me go ahead and make a oops that's

234
00:09:21,860 --> 00:09:28,300
not what I wanted go ahead and make a an

235
00:09:24,649 --> 00:09:29,419
open width here can I do open with I

236
00:09:28,299 --> 00:09:32,359
can't

237
00:09:29,419 --> 00:09:33,799
why is there no open with usually

238
00:09:32,360 --> 00:09:35,690
there's a little open with all right

239
00:09:33,799 --> 00:09:37,779
well I guess I can't do it that way I

240
00:09:35,690 --> 00:09:42,410
guess I have to launch depends first

241
00:09:37,779 --> 00:09:44,480
there we go so if I come in here and I

242
00:09:42,409 --> 00:09:48,639
drag this guy back out this is now

243
00:09:44,480 --> 00:09:52,550
linked without that - MTD switch right

244
00:09:48,639 --> 00:09:54,889
yes thank you so much so if we take a

245
00:09:52,549 --> 00:09:56,089
look at what we've got in here now oh

246
00:09:54,889 --> 00:09:58,189
this actually looks like it still did

247
00:09:56,090 --> 00:10:08,300
link statically so I don't well it may

248
00:09:58,190 --> 00:10:11,900
not have or I'm not sure it looks like

249
00:10:08,299 --> 00:10:14,689
it still did link statically I don't see

250
00:10:11,899 --> 00:10:20,600
it should list it should lives it should

251
00:10:14,690 --> 00:10:22,730
list a runtime library here if we were

252
00:10:20,600 --> 00:10:24,440
looking to dependently to it so let me

253
00:10:22,730 --> 00:10:26,180
actually try to provoke it into doing

254
00:10:24,440 --> 00:10:27,200
that I don't know if we have any other

255
00:10:26,179 --> 00:10:30,229
switches here that would stable that I

256
00:10:27,200 --> 00:10:40,240
don't think we do though let's take a

257
00:10:30,230 --> 00:10:40,240
look a linker switch for dynamic

258
00:10:43,320 --> 00:10:57,360
- MD let's try that okay and now if i

259
00:10:55,649 --> 00:10:59,069
refresh this here I'm just hoping to get

260
00:10:57,360 --> 00:11:03,019
the dynamically linked version for you

261
00:10:59,070 --> 00:11:05,730
so you can take a look at it there we go

262
00:11:03,019 --> 00:11:07,500
so you can see here if I take out that

263
00:11:05,730 --> 00:11:08,789
switch that says please compile the C

264
00:11:07,500 --> 00:11:10,620
runtime library directly into my

265
00:11:08,789 --> 00:11:15,569
executable basically copy all of the

266
00:11:10,620 --> 00:11:17,278
stuff that we need directly in there it

267
00:11:15,570 --> 00:11:19,080
will go ahead and link dynamically to

268
00:11:17,278 --> 00:11:21,269
one so now it'll try to look for one

269
00:11:19,080 --> 00:11:23,940
right and that you can see is added a

270
00:11:21,269 --> 00:11:25,230
new dependency I won't belabor that

271
00:11:23,940 --> 00:11:27,330
point too much you can see it happen

272
00:11:25,230 --> 00:11:29,129
this is actually the thing that happens

273
00:11:27,330 --> 00:11:31,110
when you see people need to install the

274
00:11:29,129 --> 00:11:32,399
visual C runtime as an installer when

275
00:11:31,110 --> 00:11:34,320
they ship their executable that's

276
00:11:32,399 --> 00:11:35,639
because they did this if they had linked

277
00:11:34,320 --> 00:11:39,000
statically with it they wouldn't need to

278
00:11:35,639 --> 00:11:40,259
run that installer right now there's

279
00:11:39,000 --> 00:11:41,730
reasons sometimes you can't links

280
00:11:40,259 --> 00:11:43,289
ethically with it that have to do with

281
00:11:41,730 --> 00:11:44,639
memory allocation and shared libraries I

282
00:11:43,289 --> 00:11:47,639
don't even want to go into that stuff

283
00:11:44,639 --> 00:11:51,299
right now it's a whole gigantic mess yet

284
00:11:47,639 --> 00:11:53,669
another gigantic Microsoft puke fest but

285
00:11:51,299 --> 00:11:55,469
what is important to remember here is

286
00:11:53,669 --> 00:11:58,139
the part I was trying to demonstrate

287
00:11:55,470 --> 00:12:00,330
that no matter what we specify here

288
00:11:58,139 --> 00:12:02,278
doesn't really matter what we specify

289
00:12:00,330 --> 00:12:04,889
here we're gonna get some see Ron time

290
00:12:02,278 --> 00:12:06,958
library one way or the other all we were

291
00:12:04,889 --> 00:12:08,939
doing is passing the right switches to

292
00:12:06,958 --> 00:12:10,979
make sure that it wasn't dynamic but

293
00:12:08,940 --> 00:12:13,650
we're still using their library we're

294
00:12:10,980 --> 00:12:16,170
just having it copy it in and build it

295
00:12:13,649 --> 00:12:18,600
directly into our app to eliminate

296
00:12:16,169 --> 00:12:20,490
possible compatibility concerns that

297
00:12:18,600 --> 00:12:23,970
would arise by shipping without that

298
00:12:20,490 --> 00:12:27,209
right but I actually want to use all our

299
00:12:23,970 --> 00:12:29,220
own code and only call functions that we

300
00:12:27,208 --> 00:12:30,599
absolutely have to that you know that's

301
00:12:29,220 --> 00:12:31,709
one of the whole points of hand-made

302
00:12:30,600 --> 00:12:35,759
here it's sure how to build everything

303
00:12:31,708 --> 00:12:37,139
and we more or less have but there's one

304
00:12:35,759 --> 00:12:38,580
or two things that we haven't built

305
00:12:37,139 --> 00:12:40,470
ourselves that we're still calling and

306
00:12:38,580 --> 00:12:42,450
they're basically math routines so what

307
00:12:40,470 --> 00:12:44,639
I want to do now that we kind of do that

308
00:12:42,450 --> 00:12:46,770
little diversion there is I want to show

309
00:12:44,639 --> 00:12:48,629
you what I mean by that by actually

310
00:12:46,769 --> 00:12:51,600
asking to get rid of the C runtime

311
00:12:48,629 --> 00:12:56,100
library so for example if I say get rid

312
00:12:51,600 --> 00:13:01,450
of C runtime libraries switch or

313
00:12:56,100 --> 00:13:03,100
no see runtime library switch em SVC we

314
00:13:01,450 --> 00:13:05,110
should be able to find a thing that says

315
00:13:03,100 --> 00:13:07,180
you know here's how to not link with the

316
00:13:05,110 --> 00:13:08,860
C runtime library that's actually not it

317
00:13:07,179 --> 00:13:14,078
so I'm not sure why it brought up this

318
00:13:08,860 --> 00:13:16,329
page unless this page has a link to it

319
00:13:14,078 --> 00:13:17,528
on there because it's actually not an -

320
00:13:16,328 --> 00:13:23,319
M flag

321
00:13:17,528 --> 00:13:26,078
I don't think ya know none of this is

322
00:13:23,320 --> 00:13:27,010
what we wanted these again are like I

323
00:13:26,078 --> 00:13:29,019
just said these are the things that

324
00:13:27,009 --> 00:13:30,939
choose what flavor you want so you can

325
00:13:29,019 --> 00:13:34,149
have debug or release and you can have

326
00:13:30,940 --> 00:13:38,140
static or dynamic

327
00:13:34,149 --> 00:13:41,078
so like the MD and MD D are the DLL

328
00:13:38,139 --> 00:13:43,689
versions but you know release or debug

329
00:13:41,078 --> 00:13:45,489
and then MT and MTD are like release

330
00:13:43,690 --> 00:13:48,700
into bug versions of the C runtime

331
00:13:45,490 --> 00:13:51,669
library that are linked in statically

332
00:13:48,700 --> 00:13:53,709
but there's actually a link earth switch

333
00:13:51,669 --> 00:13:54,699
that's like no C runtime library and

334
00:13:53,708 --> 00:13:55,929
that's the one I want to show you I'm

335
00:13:54,700 --> 00:13:58,360
not sure why it didn't come up on the

336
00:13:55,929 --> 00:14:02,739
search so I got to go hunting for it but

337
00:13:58,360 --> 00:14:18,220
that's what we want let's see here what

338
00:14:02,740 --> 00:14:21,080
else could I say no CRT switch there it

339
00:14:18,220 --> 00:14:24,740
is this is the one I wanted

340
00:14:21,080 --> 00:14:27,200
uh so this which is goes to the linker

341
00:14:24,740 --> 00:14:30,409
and essentially what it does is it says

342
00:14:27,200 --> 00:14:32,060
hey I if you know you were gonna put

343
00:14:30,409 --> 00:14:34,939
extra stuff on that line that you

344
00:14:32,059 --> 00:14:37,849
thought I wanted just how about you

345
00:14:34,940 --> 00:14:40,340
don't that way it won't specify things

346
00:14:37,850 --> 00:14:43,310
like kernel32 or the C runtime library

347
00:14:40,340 --> 00:14:45,680
and it will force us to include them on

348
00:14:43,309 --> 00:14:47,449
our link line ourselves and then we can

349
00:14:45,679 --> 00:14:49,759
do is just not include them on the link

350
00:14:47,450 --> 00:14:51,710
line and then we won't build them into

351
00:14:49,759 --> 00:14:54,139
our app and that also means that it will

352
00:14:51,710 --> 00:14:56,660
give us a link time error for any

353
00:14:54,139 --> 00:14:58,610
function that we did not implement that

354
00:14:56,659 --> 00:15:00,709
we were still calling which allows us to

355
00:14:58,610 --> 00:15:02,509
know what we still depend on right like

356
00:15:00,710 --> 00:15:04,100
right now we don't even know what we

357
00:15:02,509 --> 00:15:06,319
call on the C runtime library because

358
00:15:04,100 --> 00:15:08,779
it's getting silently linked in without

359
00:15:06,320 --> 00:15:12,680
our request so if I go ahead and grab

360
00:15:08,779 --> 00:15:14,899
this no default Lib as a start what I

361
00:15:12,679 --> 00:15:18,169
can do is inside the common liquor flags

362
00:15:14,899 --> 00:15:19,399
here I can place it now I'm not quite

363
00:15:18,169 --> 00:15:21,979
gonna do it in the common linker flags

364
00:15:19,399 --> 00:15:24,409
just yet what I'm gonna do instead is

365
00:15:21,980 --> 00:15:26,750
I'm gonna copy some of these flags down

366
00:15:24,409 --> 00:15:30,429
because the win32 handmade part for

367
00:15:26,750 --> 00:15:33,289
example might be able to be made free of

368
00:15:30,429 --> 00:15:35,809
the C runtime library fairly easily for

369
00:15:33,289 --> 00:15:37,939
example and so we might want to do that

370
00:15:35,809 --> 00:15:40,519
one first but anyway after the link flag

371
00:15:37,940 --> 00:15:46,760
if I go ahead and put no default Lib

372
00:15:40,519 --> 00:15:48,289
here oops that's funny copied kind of

373
00:15:46,759 --> 00:15:50,029
more than I wanted there if I go ahead

374
00:15:48,289 --> 00:15:53,689
and put no default lived there and then

375
00:15:50,029 --> 00:15:56,980
I take this - MTD part out and add it

376
00:15:53,690 --> 00:16:00,890
just to here right so just to our our

377
00:15:56,980 --> 00:16:04,070
compiler flags for the the game code

378
00:16:00,889 --> 00:16:07,189
which is which is actually using the C

379
00:16:04,070 --> 00:16:08,750
runtime library potentially I'm gonna

380
00:16:07,190 --> 00:16:11,030
kind of split the difference there right

381
00:16:08,750 --> 00:16:14,179
so now we won't have that these will

382
00:16:11,029 --> 00:16:17,179
actually be parts that are common and go

383
00:16:14,179 --> 00:16:20,689
from there so now if I build what we

384
00:16:17,179 --> 00:16:22,849
should see is any place that I was

385
00:16:20,690 --> 00:16:25,550
calling a function that was relying on

386
00:16:22,850 --> 00:16:27,710
one of those implicit libraries in the

387
00:16:25,549 --> 00:16:29,240
win32 portion not this because remember

388
00:16:27,710 --> 00:16:32,150
this one doesn't have no D folio so

389
00:16:29,240 --> 00:16:34,830
handmade hero's DLL that has all our

390
00:16:32,149 --> 00:16:36,899
game code that's can still call

391
00:16:34,830 --> 00:16:38,459
any default library thing well anything

392
00:16:36,899 --> 00:16:40,019
in kernel32 we can call anything in the

393
00:16:38,458 --> 00:16:41,579
C runtime library if it wanted to write

394
00:16:40,019 --> 00:16:44,549
and it would still link just fine

395
00:16:41,580 --> 00:16:47,940
but now the win32 startup code and the

396
00:16:44,549 --> 00:16:51,719
opengl part that that part that we build

397
00:16:47,940 --> 00:16:56,459
is a separate piece that is now forced

398
00:16:51,720 --> 00:17:00,660
to only link with its self and things we

399
00:16:56,458 --> 00:17:02,609
manually specify right so now we can see

400
00:17:00,659 --> 00:17:05,129
here unresolved external symbol errors

401
00:17:02,610 --> 00:17:07,910
for everything that we didn't do right

402
00:17:05,130 --> 00:17:11,880
so all the things that we didn't do here

403
00:17:07,910 --> 00:17:13,860
are aren't are there so luckily if you

404
00:17:11,880 --> 00:17:17,160
look at what all of these show they're

405
00:17:13,859 --> 00:17:18,509
all kernel32 things right and so the

406
00:17:17,160 --> 00:17:20,819
fact that they're all kernel32 things

407
00:17:18,509 --> 00:17:22,289
means a lot of our troubles have nothing

408
00:17:20,818 --> 00:17:25,558
to do with the C runtime library right

409
00:17:22,289 --> 00:17:26,129
we can just add kernel32 Lib to it and

410
00:17:25,558 --> 00:17:30,240
off we go

411
00:17:26,130 --> 00:17:32,100
right when we then compile for our win32

412
00:17:30,240 --> 00:17:35,940
handmade stuff we're left with only some

413
00:17:32,099 --> 00:17:38,308
very small problems right some very very

414
00:17:35,940 --> 00:17:40,919
simple things here what are these things

415
00:17:38,308 --> 00:17:43,879
well these are things that are actually

416
00:17:40,919 --> 00:17:47,820
I really wish compilers didn't do them

417
00:17:43,880 --> 00:17:51,090
they drive me nuts but it's a growing

418
00:17:47,819 --> 00:17:56,789
trend a growing extremely annoying trend

419
00:17:51,089 --> 00:18:02,909
actually in compiler development which

420
00:17:56,789 --> 00:18:06,149
is that every time they go to compile a

421
00:18:02,910 --> 00:18:07,850
program they have certain patterns that

422
00:18:06,150 --> 00:18:11,220
they look for or places in the code

423
00:18:07,849 --> 00:18:14,519
where they will call a function from

424
00:18:11,220 --> 00:18:17,759
their own C runtime library without your

425
00:18:14,519 --> 00:18:20,730
permission or acknowledgement and just

426
00:18:17,759 --> 00:18:22,829
expect to have it linked in later so

427
00:18:20,730 --> 00:18:25,110
they basically force the use of their C

428
00:18:22,829 --> 00:18:28,129
runtime library because the compiler

429
00:18:25,109 --> 00:18:32,428
itself is now technically incapable of

430
00:18:28,130 --> 00:18:35,610
actually outputting code that runs on

431
00:18:32,429 --> 00:18:40,410
its own it's actually inexorably linked

432
00:18:35,609 --> 00:18:42,389
to its own C runtime library so like

433
00:18:40,410 --> 00:18:44,640
Microsoft's compilers literally can't

434
00:18:42,390 --> 00:18:46,320
produce code that just runs it can only

435
00:18:44,640 --> 00:18:48,419
produce code that runs with its C

436
00:18:46,319 --> 00:18:49,888
runtime library now that may

437
00:18:48,419 --> 00:18:51,989
sound like there's no way to do it but

438
00:18:49,888 --> 00:18:54,358
there is because all we actually have to

439
00:18:51,989 --> 00:18:57,090
do to try to get around this problem is

440
00:18:54,358 --> 00:18:58,470
a set some compiler switches that make

441
00:18:57,089 --> 00:19:01,949
it much less likely that it will

442
00:18:58,470 --> 00:19:03,118
generate those functions and then be for

443
00:19:01,950 --> 00:19:05,190
the functions that it still does

444
00:19:03,118 --> 00:19:07,528
generate that you can't get around put

445
00:19:05,190 --> 00:19:12,149
in versions of those functions into our

446
00:19:07,528 --> 00:19:14,099
code that we can then use to pretend

447
00:19:12,148 --> 00:19:15,928
that we're linking with the C runtime

448
00:19:14,099 --> 00:19:17,548
library even though we actually aren't

449
00:19:15,929 --> 00:19:20,548
so we'll basically stub them out and

450
00:19:17,548 --> 00:19:22,019
then the C runtime library is gone now

451
00:19:20,548 --> 00:19:23,460
we can do that actually pretty easily

452
00:19:22,019 --> 00:19:24,960
with there because what you can see is

453
00:19:23,460 --> 00:19:26,850
if you look at these functions what

454
00:19:24,960 --> 00:19:30,058
we've got there's only two that actually

455
00:19:26,849 --> 00:19:32,428
do work so here we've got GS handler

456
00:19:30,058 --> 00:19:35,220
check check stack Security check cookie

457
00:19:32,429 --> 00:19:37,139
and security cookie right those are all

458
00:19:35,220 --> 00:19:39,239
just stupid stacked checking security

459
00:19:37,138 --> 00:19:40,918
nonsense that Microsoft puts in there

460
00:19:39,239 --> 00:19:42,419
because they think they're creating

461
00:19:40,919 --> 00:19:43,830
something that's more secure now if

462
00:19:42,419 --> 00:19:45,389
you've ever paid attention to how often

463
00:19:43,829 --> 00:19:48,210
windows gets hacked you would know that

464
00:19:45,388 --> 00:19:49,108
it's not any more secure but hey they

465
00:19:48,210 --> 00:19:52,919
wanted to feel like they were doing

466
00:19:49,108 --> 00:19:55,288
something so we can actually turn some

467
00:19:52,919 --> 00:19:58,519
of those off now check check stack is

468
00:19:55,288 --> 00:20:01,079
not quite that check stack is actually a

469
00:19:58,519 --> 00:20:02,700
useful function at least if I'm

470
00:20:01,079 --> 00:20:04,949
remembering which one of these are which

471
00:20:02,700 --> 00:20:08,730
I've replaced these so long ago that I

472
00:20:04,950 --> 00:20:10,710
can't quite remember but check stack is

473
00:20:08,730 --> 00:20:12,989
actually required to probe the stack

474
00:20:10,710 --> 00:20:14,220
when the stack is built into chunks and

475
00:20:12,989 --> 00:20:15,960
we can talk about what that does a

476
00:20:14,220 --> 00:20:16,919
little bit later but we can actually get

477
00:20:15,960 --> 00:20:19,288
rid of it

478
00:20:16,919 --> 00:20:20,399
in a separate way because it's it's for

479
00:20:19,288 --> 00:20:21,898
doing something that really doesn't

480
00:20:20,398 --> 00:20:24,148
super need to be done anymore now the

481
00:20:21,898 --> 00:20:26,518
computers have infinite memory so you

482
00:20:24,148 --> 00:20:27,748
can also kind of ignore that one as well

483
00:20:26,519 --> 00:20:29,878
but we'll talk about with all the means

484
00:20:27,749 --> 00:20:31,980
that will leave us with just two

485
00:20:29,878 --> 00:20:35,778
functions that are not security and not

486
00:20:31,980 --> 00:20:39,480
stack probe based which is memset and

487
00:20:35,778 --> 00:20:42,720
float used now memset is just used to

488
00:20:39,480 --> 00:20:44,639
clear memory right and so that's a

489
00:20:42,720 --> 00:20:46,679
pretty easy thing for us to write our

490
00:20:44,638 --> 00:20:51,148
own version of and in fact we don't call

491
00:20:46,679 --> 00:20:52,950
it ourselves anywhere we use it our we

492
00:20:51,148 --> 00:20:54,449
use our own zeroing functions so all we

493
00:20:52,950 --> 00:20:56,069
really have to do to fix the memset

494
00:20:54,450 --> 00:20:58,830
problem is to provide our own function

495
00:20:56,069 --> 00:20:59,839
that clears memory and that will do it

496
00:20:58,829 --> 00:21:02,250
right

497
00:20:59,839 --> 00:21:07,009
similarly float used

498
00:21:02,250 --> 00:21:07,009
is actually just there as sort of a

499
00:21:09,140 --> 00:21:13,110
really weird it's an on it's not a

500
00:21:11,400 --> 00:21:17,759
function first of all it's actually just

501
00:21:13,109 --> 00:21:20,279
a variable it's like a global right all

502
00:21:17,759 --> 00:21:21,839
it is used for is to pull in some

503
00:21:20,279 --> 00:21:26,039
floating-point stuff from the C runtime

504
00:21:21,839 --> 00:21:28,259
library as necessary I believe it's my

505
00:21:26,039 --> 00:21:30,539
vague recollection it's been a really

506
00:21:28,259 --> 00:21:32,250
long time is that it's there to let the

507
00:21:30,539 --> 00:21:34,980
C runtime library know it should set up

508
00:21:32,250 --> 00:21:37,289
the FPU state or something I think at

509
00:21:34,980 --> 00:21:38,910
the beginning it's it's it's really kind

510
00:21:37,289 --> 00:21:42,240
of irrelevant and we don't really care

511
00:21:38,910 --> 00:21:44,580
about it so all we actually have to do

512
00:21:42,240 --> 00:21:46,799
there for the unresolved symbol float

513
00:21:44,579 --> 00:21:49,679
used is just to find our own float used

514
00:21:46,799 --> 00:21:50,970
that gets rid of the undefined external

515
00:21:49,680 --> 00:21:52,529
symbol but we don't have to do anything

516
00:21:50,970 --> 00:21:55,190
it's not a function should I put a

517
00:21:52,529 --> 00:21:58,079
little stub value there that's it right

518
00:21:55,190 --> 00:21:59,910
so this is actually pretty easy to deal

519
00:21:58,079 --> 00:22:02,669
with right very very easy to deal with

520
00:21:59,910 --> 00:22:06,060
in fact we can do it right now and go

521
00:22:02,670 --> 00:22:07,500
from there so for example the ones that

522
00:22:06,059 --> 00:22:09,059
are relatively easy to use the GS

523
00:22:07,500 --> 00:22:11,099
handler and the check stack and the

524
00:22:09,059 --> 00:22:12,539
screen check cookie security cookie

525
00:22:11,099 --> 00:22:14,759
those we can get really really quickly

526
00:22:12,539 --> 00:22:18,960
and I'm gonna point you to something

527
00:22:14,759 --> 00:22:20,789
that is by far rather than you saw how I

528
00:22:18,960 --> 00:22:21,809
just had to search through the MSDN for

529
00:22:20,789 --> 00:22:23,579
that and I kind of know what I was

530
00:22:21,809 --> 00:22:25,829
looking for right or whatever so it miss

531
00:22:23,579 --> 00:22:27,960
little easier you might ask is there an

532
00:22:25,829 --> 00:22:30,389
easier way to do that there actually is

533
00:22:27,960 --> 00:22:32,549
and it's thanks to Martins if I remember

534
00:22:30,390 --> 00:22:36,150
correctly he actually put a post on

535
00:22:32,549 --> 00:22:37,950
handmade network that Cole that grabs

536
00:22:36,150 --> 00:22:39,360
all of these things you want and puts

537
00:22:37,950 --> 00:22:40,529
them into one and let me try to point

538
00:22:39,359 --> 00:22:43,289
you to it will try to get the actual

539
00:22:40,529 --> 00:22:48,539
address up here remove see runtime

540
00:22:43,289 --> 00:22:50,430
library and this is absolutely fabulous

541
00:22:48,539 --> 00:22:52,740
I go back and look at this myself

542
00:22:50,430 --> 00:22:55,110
anytime I want to do this in fact

543
00:22:52,740 --> 00:22:57,359
because it's literally like he has put

544
00:22:55,109 --> 00:22:59,369
every last thing that you typically had

545
00:22:57,359 --> 00:23:02,069
to go through and you had to hunt

546
00:22:59,369 --> 00:23:04,619
through MSDN to find it all he put it

547
00:23:02,069 --> 00:23:06,299
all in one place and he walks you

548
00:23:04,619 --> 00:23:08,669
through it bit by bit

549
00:23:06,299 --> 00:23:11,190
actually right so you can kind of see

550
00:23:08,670 --> 00:23:12,870
here everything in this post I would

551
00:23:11,190 --> 00:23:13,890
highly recommend reading I'm not going

552
00:23:12,869 --> 00:23:15,148
to go through the whole thing right now

553
00:23:13,890 --> 00:23:18,749
because

554
00:23:15,148 --> 00:23:20,878
I don't actually need to but you should

555
00:23:18,749 --> 00:23:22,469
read this whole thing right any talks

556
00:23:20,878 --> 00:23:24,269
see here I'm talking about exactly the

557
00:23:22,469 --> 00:23:26,580
thing we just did for example so that

558
00:23:24,269 --> 00:23:27,868
will jog your memory and then he's got

559
00:23:26,579 --> 00:23:30,598
like all the rest of the switches in

560
00:23:27,868 --> 00:23:32,819
here as well um so if we take a look

561
00:23:30,598 --> 00:23:34,378
down let me try to get to the section

562
00:23:32,819 --> 00:23:38,479
that I'm actually was interesting so you

563
00:23:34,378 --> 00:23:41,908
can see here so there's a bunch of

564
00:23:38,479 --> 00:23:42,269
features that you go in right there here

565
00:23:41,909 --> 00:23:44,339
you go

566
00:23:42,269 --> 00:23:47,399
allocating large arrays or structures on

567
00:23:44,338 --> 00:23:50,069
the stack greater than four K right so

568
00:23:47,398 --> 00:23:51,988
what happens here you can see he's got a

569
00:23:50,069 --> 00:23:53,548
great example as well which is this

570
00:23:51,989 --> 00:23:55,889
inside wooden main surgery start at the

571
00:23:53,548 --> 00:23:57,658
beginning he shows the example of making

572
00:23:55,888 --> 00:24:00,108
something that's like larger than four K

573
00:23:57,659 --> 00:24:02,700
now why it is larger than four K matter

574
00:24:00,108 --> 00:24:08,069
well the reason that larger than four K

575
00:24:02,700 --> 00:24:09,330
actually matters is because in the when

576
00:24:08,069 --> 00:24:12,329
the C compiler is actually creating your

577
00:24:09,329 --> 00:24:14,668
codes you've seen me do a bunch of

578
00:24:12,329 --> 00:24:16,319
memory stuff where I allocate memory and

579
00:24:14,669 --> 00:24:17,580
then we use the memory and whatever and

580
00:24:16,319 --> 00:24:19,499
we reuse the memory and all that stuff

581
00:24:17,579 --> 00:24:21,658
right so we do a bunch of manual memory

582
00:24:19,499 --> 00:24:23,729
management and so the reason that we

583
00:24:21,659 --> 00:24:25,649
don't rely on anything in the C runtime

584
00:24:23,729 --> 00:24:27,119
library for memory management is because

585
00:24:25,648 --> 00:24:29,148
we did it all ourselves and you saw us

586
00:24:27,118 --> 00:24:31,858
do it so that's why that doesn't happen

587
00:24:29,148 --> 00:24:33,628
but there's one piece of memory we

588
00:24:31,858 --> 00:24:35,548
haven't been managing ourselves that's

589
00:24:33,628 --> 00:24:38,069
been implicit the entire time right and

590
00:24:35,548 --> 00:24:39,690
that is the program stack so whenever we

591
00:24:38,069 --> 00:24:41,668
call a function there's these local

592
00:24:39,690 --> 00:24:42,808
variables in here in there right well

593
00:24:41,669 --> 00:24:43,889
those local variables have to live

594
00:24:42,808 --> 00:24:45,960
somewhere they have to live in memory

595
00:24:43,888 --> 00:24:47,098
somewhere we didn't allocate it in fact

596
00:24:45,960 --> 00:24:49,499
the compiler doesn't give us the option

597
00:24:47,098 --> 00:24:50,878
to I wish it did but it doesn't give us

598
00:24:49,499 --> 00:24:54,690
the option to manage our own stack

599
00:24:50,878 --> 00:24:57,118
that's really not on the table so as a

600
00:24:54,690 --> 00:24:59,519
result what you have to remember is

601
00:24:57,118 --> 00:25:02,608
every last local variable you ever

602
00:24:59,519 --> 00:25:04,469
defined in a function as well as the

603
00:25:02,608 --> 00:25:06,628
implicit local variables in the function

604
00:25:04,469 --> 00:25:08,129
like saved registers during calls to

605
00:25:06,628 --> 00:25:10,678
other functions and that sort of thing

606
00:25:08,128 --> 00:25:14,128
all in a stack pointer all that stuff

607
00:25:10,679 --> 00:25:17,269
that stuff is all getting stored in

608
00:25:14,128 --> 00:25:20,699
memory the compiler is allocating right

609
00:25:17,269 --> 00:25:22,950
so when you start your program you

610
00:25:20,700 --> 00:25:24,778
actually and compiler is allocating is

611
00:25:22,950 --> 00:25:26,249
not quite the right term it's not like

612
00:25:24,778 --> 00:25:28,710
it's got a memory allocator in there per

613
00:25:26,249 --> 00:25:31,350
se but it's memory

614
00:25:28,710 --> 00:25:34,110
the compiler is responsible for having

615
00:25:31,349 --> 00:25:37,648
allocated so the compiler has to have

616
00:25:34,109 --> 00:25:42,269
generated something that allows this to

617
00:25:37,648 --> 00:25:44,459
work properly right so how does this

618
00:25:42,269 --> 00:25:47,278
actually work well because in the old

619
00:25:44,460 --> 00:25:49,590
days memory was expensive right and you

620
00:25:47,278 --> 00:25:52,319
didn't have very much of it the way that

621
00:25:49,589 --> 00:25:54,480
this is typically done is by allocating

622
00:25:52,319 --> 00:25:57,538
what are called guard pages and then

623
00:25:54,480 --> 00:26:01,440
having faults on guard pages produce

624
00:25:57,538 --> 00:26:04,140
more memory so what happens is the

625
00:26:01,440 --> 00:26:05,730
compiler will structure your code such

626
00:26:04,140 --> 00:26:08,759
that as the at the beginning of the

627
00:26:05,730 --> 00:26:11,940
program your stack which is actually I

628
00:26:08,759 --> 00:26:13,679
believe prepared by Windows initially if

629
00:26:11,940 --> 00:26:15,120
I'm not very much an error in fact I'm

630
00:26:13,679 --> 00:26:16,559
not near when you when you create a

631
00:26:15,119 --> 00:26:19,548
thread in Windows you actually give it

632
00:26:16,558 --> 00:26:21,690
stack size that happens at the beginning

633
00:26:19,548 --> 00:26:24,329
so the initial thread that you get

634
00:26:21,690 --> 00:26:26,370
created in in Windows is going to have a

635
00:26:24,329 --> 00:26:28,139
particular stack size associated with it

636
00:26:26,369 --> 00:26:30,808
and what's going to happen is your

637
00:26:28,140 --> 00:26:33,570
program is going to reserve that memory

638
00:26:30,808 --> 00:26:37,200
so it's going to say hey I'm gonna

639
00:26:33,569 --> 00:26:40,079
potentially use this much memory here

640
00:26:37,200 --> 00:26:43,380
but rather than actually allocate it as

641
00:26:40,079 --> 00:26:46,079
used what it will instead do is just say

642
00:26:43,380 --> 00:26:48,360
well I'm gonna reserve a range of memory

643
00:26:46,079 --> 00:26:50,460
that I could use but I'm only gonna

644
00:26:48,359 --> 00:26:53,369
allocate the first little bit of it and

645
00:26:50,460 --> 00:26:57,090
then what I'm going to do is as I use it

646
00:26:53,369 --> 00:27:00,449
if I find myself going into the part of

647
00:26:57,089 --> 00:27:03,119
it that I haven't allocated yet I will

648
00:27:00,450 --> 00:27:05,909
then allocate that part so it kind of

649
00:27:03,119 --> 00:27:08,639
dynamically grows the allocation and

650
00:27:05,909 --> 00:27:10,380
commits it into actual Windows managed

651
00:27:08,640 --> 00:27:12,830
memory rather than just being a chunk

652
00:27:10,380 --> 00:27:18,028
that would be reserved to eventually use

653
00:27:12,829 --> 00:27:20,819
as it goes it does this often times in

654
00:27:18,028 --> 00:27:23,730
4k pages why because windows manage

655
00:27:20,819 --> 00:27:26,849
memory in 4k pages that's the size of a

656
00:27:23,730 --> 00:27:29,880
page of virtual memory so you start out

657
00:27:26,849 --> 00:27:32,819
with a page of say 4k and as you use

658
00:27:29,880 --> 00:27:35,880
more of that and go into the next 4k it

659
00:27:32,819 --> 00:27:37,950
allocates that next 4k for you to use so

660
00:27:35,880 --> 00:27:39,600
your stack kind of grows and in ads

661
00:27:37,950 --> 00:27:44,279
pages on to the end as

662
00:27:39,599 --> 00:27:48,298
necessary right well if you were to

663
00:27:44,279 --> 00:27:50,428
touch memory more than four K away from

664
00:27:48,298 --> 00:27:52,410
the end of the page then you would

665
00:27:50,429 --> 00:27:54,919
actually fault because the guard page is

666
00:27:52,410 --> 00:27:59,220
just one page at the end of the stack so

667
00:27:54,919 --> 00:28:01,500
in a function any function that has more

668
00:27:59,220 --> 00:28:03,240
than four K of local variable store

669
00:28:01,500 --> 00:28:05,490
declared which you could see Martin has

670
00:28:03,240 --> 00:28:07,440
created here he's created an entire 4k

671
00:28:05,490 --> 00:28:11,429
variable which means that this function

672
00:28:07,440 --> 00:28:13,019
takes 4k plus the IP point of storage

673
00:28:11,429 --> 00:28:14,038
the register storage all that stuff

674
00:28:13,019 --> 00:28:16,230
right so there's a little bit of

675
00:28:14,038 --> 00:28:19,230
overhead there so this uses more than a

676
00:28:16,230 --> 00:28:22,460
4k page what it will do is it calls a

677
00:28:19,230 --> 00:28:25,440
function right here called check stack

678
00:28:22,460 --> 00:28:30,029
and what Matt function does is it will

679
00:28:25,440 --> 00:28:31,970
probe the stack in 4k jumps heating

680
00:28:30,029 --> 00:28:35,940
those guard pages one after the other

681
00:28:31,970 --> 00:28:39,089
making sure that however many 4k pages

682
00:28:35,940 --> 00:28:41,009
this thing used in toto for its stack it

683
00:28:39,089 --> 00:28:43,829
will probe out there pulling in those

684
00:28:41,009 --> 00:28:46,259
pages so that way you won't right past

685
00:28:43,829 --> 00:28:49,918
it as you actually use your your stuff

686
00:28:46,259 --> 00:28:52,408
right um it's a very simple concept it's

687
00:28:49,919 --> 00:28:54,000
just it's antiquated and weird and

688
00:28:52,409 --> 00:28:56,880
stupid and we don't need it anymore but

689
00:28:54,000 --> 00:28:59,730
it's was very very logical and efficient

690
00:28:56,880 --> 00:29:01,260
at the time that it was created right so

691
00:28:59,730 --> 00:29:05,759
that's what check stack does is is

692
00:29:01,259 --> 00:29:09,359
actually a probe that pings out in 4k

693
00:29:05,759 --> 00:29:11,190
steps pulling in those pages and pulling

694
00:29:09,359 --> 00:29:13,529
them in is wrong sir allocating them

695
00:29:11,190 --> 00:29:16,190
basically by hitting the guard pages

696
00:29:13,529 --> 00:29:19,980
right that's how that works

697
00:29:16,190 --> 00:29:21,570
so how does Martin's recommend getting

698
00:29:19,980 --> 00:29:25,529
around this he Beck recommends getting

699
00:29:21,569 --> 00:29:26,759
around this very clever way because one

700
00:29:25,529 --> 00:29:28,259
way he could have gotten around it right

701
00:29:26,759 --> 00:29:29,759
is to write the check stack function

702
00:29:28,259 --> 00:29:32,788
because we could do that and I'd done

703
00:29:29,759 --> 00:29:33,990
that in the past actually granny has

704
00:29:32,788 --> 00:29:36,089
some stuff that ships without the C

705
00:29:33,990 --> 00:29:37,140
runtime library way back in the day we

706
00:29:36,089 --> 00:29:39,509
just implemented the check stack

707
00:29:37,140 --> 00:29:41,280
function so I had my own version of

708
00:29:39,509 --> 00:29:43,048
check stack that when link in that does

709
00:29:41,279 --> 00:29:46,048
the 4k probe that's just what I did

710
00:29:43,048 --> 00:29:49,048
right but Martin's is like well why

711
00:29:46,048 --> 00:29:52,259
bother right we don't really need that

712
00:29:49,048 --> 00:29:53,470
pattern of stack allocation right so

713
00:29:52,259 --> 00:29:56,169
instead what it could do

714
00:29:53,470 --> 00:30:00,519
is just tell us give us a large stack

715
00:29:56,169 --> 00:30:05,320
right so what it says here for example

716
00:30:00,519 --> 00:30:07,359
is I let's just ask for a 1 megabyte

717
00:30:05,319 --> 00:30:10,389
stack right let's just ask for a

718
00:30:07,359 --> 00:30:13,240
megabyte stack completely reserved so

719
00:30:10,390 --> 00:30:15,880
instead of you know asking for a 1

720
00:30:13,240 --> 00:30:19,150
megabyte stack and reserving a 4k stack

721
00:30:15,880 --> 00:30:20,260
right that and that we then have to

722
00:30:19,150 --> 00:30:22,298
constantly reserve reserve reserve

723
00:30:20,259 --> 00:30:23,379
reserve just allocate a megabyte and

724
00:30:22,298 --> 00:30:26,048
reserve that make it like it's a

725
00:30:23,380 --> 00:30:29,049
megabyte people like no one will notice

726
00:30:26,048 --> 00:30:30,668
your web browser to display this page of

727
00:30:29,048 --> 00:30:33,190
Martin's telling you about reserving a

728
00:30:30,669 --> 00:30:35,679
stack a stack of 1 megabyte is taking

729
00:30:33,190 --> 00:30:39,130
hundreds of megabytes just to display it

730
00:30:35,679 --> 00:30:40,720
right so it's irrelevant so what you can

731
00:30:39,130 --> 00:30:42,820
really do is just go how much stack does

732
00:30:40,720 --> 00:30:44,200
my program actually use instead of

733
00:30:42,819 --> 00:30:45,639
telling windows to reserve that much

734
00:30:44,200 --> 00:30:47,440
stack and then do these little tiny

735
00:30:45,640 --> 00:30:50,049
increments just in case so we can save

736
00:30:47,440 --> 00:30:51,880
some memory forget it

737
00:30:50,048 --> 00:30:56,288
let's just allocate it in a big block

738
00:30:51,880 --> 00:30:58,510
and reserve it and be done right so

739
00:30:56,288 --> 00:31:00,609
that's what Martin suggests here and he

740
00:30:58,509 --> 00:31:02,019
tells you exactly what switches to use

741
00:31:00,609 --> 00:31:05,889
and it's a great idea and it's exactly

742
00:31:02,019 --> 00:31:07,960
what we should do right so the first one

743
00:31:05,890 --> 00:31:10,929
we want is this one right here and that

744
00:31:07,960 --> 00:31:12,579
is again telling the linker hey when you

745
00:31:10,929 --> 00:31:14,620
tell Windows what to do with our stack

746
00:31:12,579 --> 00:31:17,678
tell them reserve a megabyte and

747
00:31:14,619 --> 00:31:19,808
actually commit the megabyte right don't

748
00:31:17,679 --> 00:31:21,280
reserve a megabyte and commit a little

749
00:31:19,808 --> 00:31:23,798
tiny bit and then bit bit bit bit bit

750
00:31:21,279 --> 00:31:27,839
too bit right with guard pages just do

751
00:31:23,798 --> 00:31:32,200
the whole thing and then it's good right

752
00:31:27,839 --> 00:31:34,119
so that's what we go let's let's put

753
00:31:32,200 --> 00:31:37,808
that in here so I'm gonna go ahead and

754
00:31:34,119 --> 00:31:39,579
say in common linker flags because we we

755
00:31:37,808 --> 00:31:41,168
can even though we're not removing the

756
00:31:39,579 --> 00:31:43,509
see runtime memory from our regular code

757
00:31:41,169 --> 00:31:45,429
yet this is something we will want to do

758
00:31:43,509 --> 00:31:49,390
so I'll go ahead and put that in here so

759
00:31:45,429 --> 00:31:51,519
here's the stack part and again we may

760
00:31:49,390 --> 00:31:52,870
find that we if we blow out the stack if

761
00:31:51,519 --> 00:31:54,639
we have some weird recursive functions

762
00:31:52,869 --> 00:31:57,548
or some big functions these can just be

763
00:31:54,640 --> 00:31:59,799
increased right 1 megabyte no one will

764
00:31:57,548 --> 00:32:01,990
miss it these days 10 megabytes no one

765
00:31:59,798 --> 00:32:03,940
would miss that either 100 megabytes

766
00:32:01,990 --> 00:32:06,339
probably no one would even miss that

767
00:32:03,940 --> 00:32:06,590
that's how much largesse there is so if

768
00:32:06,339 --> 00:32:08,028
you

769
00:32:06,589 --> 00:32:10,069
want to have some giant functions with

770
00:32:08,028 --> 00:32:11,778
giant variables we could probably expand

771
00:32:10,069 --> 00:32:14,149
this and get away with that just fine

772
00:32:11,778 --> 00:32:18,230
we'll start with this and if we crash on

773
00:32:14,150 --> 00:32:20,059
stack Headroom then we can fix it at

774
00:32:18,230 --> 00:32:21,829
that time but these are just these

775
00:32:20,058 --> 00:32:23,960
aren't magic constants they're just the

776
00:32:21,829 --> 00:32:25,339
amount you wanted to reserve so if we

777
00:32:23,960 --> 00:32:27,200
just increase them we should be able to

778
00:32:25,339 --> 00:32:33,470
get more memory pretty much directly

779
00:32:27,200 --> 00:32:35,000
right okay so if we go ahead and compile

780
00:32:33,470 --> 00:32:36,558
this now we will still have a problem

781
00:32:35,000 --> 00:32:39,919
because we haven't told it not doing

782
00:32:36,558 --> 00:32:42,918
insert these things yet all we did all

783
00:32:39,919 --> 00:32:45,020
this does is it tells the linker to give

784
00:32:42,919 --> 00:32:47,270
us that reserved part but the compiler

785
00:32:45,019 --> 00:32:50,389
still thinks it needs to do this so the

786
00:32:47,269 --> 00:32:52,058
other flag that he says is GS - and GS

787
00:32:50,390 --> 00:32:55,120
nine nine nine and and and and the nine

788
00:32:52,058 --> 00:32:58,190
which are telling it basically hey look

789
00:32:55,119 --> 00:33:00,739
we're gonna give you a giant stack stop

790
00:32:58,190 --> 00:33:02,480
worrying about it you don't need to

791
00:33:00,740 --> 00:33:05,240
insert all these calls right I don't

792
00:33:02,480 --> 00:33:07,490
actually remember what the GS nine nine

793
00:33:05,240 --> 00:33:09,019
nine does so I want to just quickly look

794
00:33:07,490 --> 00:33:11,120
that one up again so I can tell you what

795
00:33:09,019 --> 00:33:13,359
it means exactly it's been a long time

796
00:33:11,119 --> 00:33:16,599
since I have looked at any of these but

797
00:33:13,359 --> 00:33:19,278
I'm gonna go ahead and put those on here

798
00:33:16,599 --> 00:33:21,408
and now when we compile in theory both

799
00:33:19,278 --> 00:33:23,119
of our things should not have any of

800
00:33:21,409 --> 00:33:25,070
those right and you can see that they

801
00:33:23,119 --> 00:33:27,619
don't so now we're down to just the mem

802
00:33:25,069 --> 00:33:31,240
set like I was saying and the float used

803
00:33:27,619 --> 00:33:34,339
so GS - is the one that gets rid of the

804
00:33:31,240 --> 00:33:37,130
those stupid security cookie nonsenses

805
00:33:34,339 --> 00:33:39,408
itself like you know if I just have that

806
00:33:37,130 --> 00:33:42,289
one on you can see that it's only check

807
00:33:39,409 --> 00:33:44,120
stack the stack probe that's there so

808
00:33:42,288 --> 00:33:45,259
the the GS nine and a nine is the one

809
00:33:44,119 --> 00:33:46,849
that tells you hey you've got plenty of

810
00:33:45,259 --> 00:33:49,069
room don't insert the sack it's actually

811
00:33:46,849 --> 00:33:51,139
I don't know just what the nine nine

812
00:33:49,069 --> 00:33:52,849
nine and a nine part is though I don't

813
00:33:51,140 --> 00:33:54,740
know if that's just like the maximum so

814
00:33:52,849 --> 00:33:59,199
I just want to look up so I can recall

815
00:33:54,740 --> 00:33:59,200
what that actually does there so

816
00:34:06,429 --> 00:34:10,088
see if I can find it here

817
00:34:15,628 --> 00:34:26,009
Visual Studio stacks switches come on

818
00:34:26,280 --> 00:34:52,990
Pilar options con folks well there it is

819
00:34:49,148 --> 00:34:55,210
control stock check in calls G size

820
00:34:52,989 --> 00:34:56,678
option is the advanced feature stock

821
00:34:55,210 --> 00:34:59,740
purpose sequence is right we just talked

822
00:34:56,679 --> 00:35:02,079
about what that was the default value of

823
00:34:59,739 --> 00:35:04,929
size of the size of one page okay so

824
00:35:02,079 --> 00:35:08,170
basically this is just this number is

825
00:35:04,929 --> 00:35:12,219
just telling you here is the size of a

826
00:35:08,170 --> 00:35:14,889
functions stack footprint needs to be in

827
00:35:12,219 --> 00:35:17,679
order for you to think you have to probe

828
00:35:14,889 --> 00:35:19,210
so I guess 9 9 9 9 we're just the value

829
00:35:17,679 --> 00:35:21,308
Martin's chose of like hey look

830
00:35:19,210 --> 00:35:23,679
nothing's gonna be no functions gonna

831
00:35:21,309 --> 00:35:26,019
ever have something that many bytes of

832
00:35:23,679 --> 00:35:28,149
stack anyway so that'll just disable it

833
00:35:26,019 --> 00:35:29,530
right so but if you wanted to be

834
00:35:28,150 --> 00:35:32,260
cheekier about it you could actually

835
00:35:29,530 --> 00:35:34,660
specify Oh anything that's bigger than

836
00:35:32,260 --> 00:35:36,309
32 K I want it to still do a stack probe

837
00:35:34,659 --> 00:35:38,500
well that you could do right you'd pass

838
00:35:36,309 --> 00:35:41,440
that value there so that's all that is

839
00:35:38,500 --> 00:35:43,480
Sarris Wanda I could not remember what

840
00:35:41,440 --> 00:35:45,880
what you were actually passing here in

841
00:35:43,480 --> 00:35:47,679
terms of a real value so what it is is

842
00:35:45,880 --> 00:35:50,349
the size of the stack for that

843
00:35:47,679 --> 00:35:52,058
individual function that has to exceed

844
00:35:50,349 --> 00:35:56,200
before it inserts the check stack call

845
00:35:52,059 --> 00:35:59,470
at the head alright so that just leaves

846
00:35:56,199 --> 00:36:02,019
us with memset and float used right so

847
00:35:59,469 --> 00:36:03,879
memset and float used are just two

848
00:36:02,019 --> 00:36:06,219
things that we can reproduce ourselves

849
00:36:03,880 --> 00:36:07,420
and one of the things we can do there's

850
00:36:06,219 --> 00:36:09,548
a couple of different ways we can do

851
00:36:07,420 --> 00:36:11,260
this but the easiest way to do this is

852
00:36:09,548 --> 00:36:14,199
to actually just look at the see runtime

853
00:36:11,260 --> 00:36:17,829
library which I hope we actually have

854
00:36:14,199 --> 00:36:19,269
installed because I think I tried to but

855
00:36:17,829 --> 00:36:20,890
I remember the new Visual Studio

856
00:36:19,269 --> 00:36:22,179
installer is like even worse than the

857
00:36:20,889 --> 00:36:24,279
old visuals to the Installer which is a

858
00:36:22,179 --> 00:36:25,509
temp I know they have a team at Visual

859
00:36:24,280 --> 00:36:27,069
Studio that works on making the

860
00:36:25,510 --> 00:36:29,020
installer worse with every version and

861
00:36:27,068 --> 00:36:30,849
that team is one of the best teams at

862
00:36:29,019 --> 00:36:32,409
so they do some amazing work the

863
00:36:30,849 --> 00:36:35,110
Installer now is probably one of the

864
00:36:32,409 --> 00:36:37,629
worst things that I've ever seen and so

865
00:36:35,110 --> 00:36:39,070
you know they that's where if you're

866
00:36:37,630 --> 00:36:40,150
wondering why Windows isn't getting any

867
00:36:39,070 --> 00:36:42,610
better it's cuz they took all of the

868
00:36:40,150 --> 00:36:44,980
talent off of Windows and they put it on

869
00:36:42,610 --> 00:36:46,780
to making the Visual Studio installer be

870
00:36:44,980 --> 00:36:48,550
extremely large and error-prone and

871
00:36:46,780 --> 00:36:50,710
buggy and do a lot of things that you

872
00:36:48,550 --> 00:36:51,880
don't want to do and just version after

873
00:36:50,710 --> 00:36:54,460
version they really knock it out of the

874
00:36:51,880 --> 00:36:56,320
park so good job guys on that anyway

875
00:36:54,460 --> 00:37:00,579
what we wanted to do here is go take a

876
00:36:56,320 --> 00:37:03,130
look at our dummy project and see if we

877
00:37:00,579 --> 00:37:05,289
can get it to show us the source code

878
00:37:03,130 --> 00:37:07,950
for these things because that way we can

879
00:37:05,289 --> 00:37:12,460
see exactly what the compiler actually

880
00:37:07,949 --> 00:37:14,949
thinks we should be doing right in other

881
00:37:12,460 --> 00:37:17,710
words the compiler is generating this

882
00:37:14,949 --> 00:37:21,159
code expecting to see runtime library to

883
00:37:17,710 --> 00:37:23,710
have that code supplied we are trying to

884
00:37:21,159 --> 00:37:26,170
just basically copy whatever the the

885
00:37:23,710 --> 00:37:28,449
specification is for it and implement

886
00:37:26,170 --> 00:37:29,530
one ourselves so I don't know if this

887
00:37:28,449 --> 00:37:33,460
will work because I don't know if we

888
00:37:29,530 --> 00:37:36,970
have that available but we're gonna try

889
00:37:33,460 --> 00:37:39,429
right so okay good so we can see exactly

890
00:37:36,969 --> 00:37:41,799
how it's defining memset right it's the

891
00:37:39,429 --> 00:37:47,559
exact code that it's using to define

892
00:37:41,800 --> 00:37:50,470
memset is this right so we're gonna go

893
00:37:47,559 --> 00:37:53,380
ahead and and pull that out here into a

894
00:37:50,469 --> 00:37:56,439
special function what I'm gonna do and

895
00:37:53,380 --> 00:38:00,700
this may seem weird in fact maybe I

896
00:37:56,440 --> 00:38:01,960
should kind of do it I'm trying to think

897
00:38:00,699 --> 00:38:03,659
of how I should show you what's gonna

898
00:38:01,960 --> 00:38:05,920
happen here

899
00:38:03,659 --> 00:38:06,489
let me kind of try to do it the whole

900
00:38:05,920 --> 00:38:09,550
way through

901
00:38:06,489 --> 00:38:11,679
so for starters if I was to go through

902
00:38:09,550 --> 00:38:13,780
and place this in win32 handmade right

903
00:38:11,679 --> 00:38:17,618
which might make some sense at the

904
00:38:13,780 --> 00:38:19,660
outset remember we would probably want

905
00:38:17,619 --> 00:38:23,050
to put this in a shared file because

906
00:38:19,659 --> 00:38:25,118
it's going to be used by both people

907
00:38:23,050 --> 00:38:27,460
because both of the compiler will

908
00:38:25,119 --> 00:38:30,220
generate memset calls in both our DLL

909
00:38:27,460 --> 00:38:35,050
and in our executable right but anyway

910
00:38:30,219 --> 00:38:37,589
inside the memset call let me get rid of

911
00:38:35,050 --> 00:38:37,590
this stuff here

912
00:38:38,440 --> 00:38:43,720
those are just some some static code

913
00:38:41,449 --> 00:38:46,069
analysis markup stuff that they do there

914
00:38:43,719 --> 00:38:47,269
here's what the memset call is supposed

915
00:38:46,070 --> 00:38:49,490
to look like that's the function

916
00:38:47,269 --> 00:38:51,739
signature it was expecting so let's

917
00:38:49,489 --> 00:38:54,649
suppose I supply one of these memset

918
00:38:51,739 --> 00:38:56,629
calls here right because I'm like well I

919
00:38:54,650 --> 00:38:58,010
know that it wants this memset call so

920
00:38:56,630 --> 00:38:59,960
if I just supply it here it should be

921
00:38:58,010 --> 00:39:01,550
able to get it and what's better is well

922
00:38:59,960 --> 00:39:03,710
you know I can implement a memset call

923
00:39:01,550 --> 00:39:06,440
it not that difficult right I'll just

924
00:39:03,710 --> 00:39:09,619
take you know a target pointer and I'll

925
00:39:06,440 --> 00:39:12,230
set it to equal the destination that it

926
00:39:09,619 --> 00:39:16,219
said right and then I'll just take that

927
00:39:12,230 --> 00:39:19,849
size and while the size function while I

928
00:39:16,219 --> 00:39:22,639
still have bytes to clear right I will

929
00:39:19,849 --> 00:39:25,339
go ahead and write those bytes into as

930
00:39:22,639 --> 00:39:26,750
part of the BEM set now it's weird that

931
00:39:25,340 --> 00:39:28,400
this takes an int but I guess that's

932
00:39:26,750 --> 00:39:32,000
just a standard C runtime library

933
00:39:28,400 --> 00:39:35,510
definition from it because we all know

934
00:39:32,000 --> 00:39:37,639
that memset only sets the byte values as

935
00:39:35,510 --> 00:39:39,980
it goes it doesn't write 32-bit values

936
00:39:37,639 --> 00:39:41,299
and an int as a 32-bit value so really

937
00:39:39,980 --> 00:39:45,710
what we're talking about here is a cast

938
00:39:41,300 --> 00:39:47,060
effectively to this value so you know we

939
00:39:45,710 --> 00:39:50,179
we have to convert it to something that

940
00:39:47,059 --> 00:39:53,239
we can write value wise there so I'm

941
00:39:50,179 --> 00:39:54,859
just gonna assume that we can use the

942
00:39:53,239 --> 00:39:58,939
value directly and that we won't sign

943
00:39:54,860 --> 00:40:00,470
extend it again since we're only ever

944
00:39:58,940 --> 00:40:03,320
gonna use this to clear to zero I think

945
00:40:00,469 --> 00:40:05,750
it probably doesn't matter but either

946
00:40:03,320 --> 00:40:07,700
way I'm gonna do it that way in case it

947
00:40:05,750 --> 00:40:09,349
was expecting it to not sign extend or

948
00:40:07,699 --> 00:40:13,519
who knows what or sign truncate I should

949
00:40:09,349 --> 00:40:16,699
say so anyway we're gonna go ahead and

950
00:40:13,519 --> 00:40:17,929
grab that value out we're gonna look at

951
00:40:16,699 --> 00:40:20,929
the size and we're gonna keep going

952
00:40:17,929 --> 00:40:22,669
we're gonna romp over the memory that it

953
00:40:20,929 --> 00:40:25,069
gives us with that value until we're

954
00:40:22,670 --> 00:40:26,329
done right so we have a mem set function

955
00:40:25,070 --> 00:40:29,269
but what you'll notice is now when I

956
00:40:26,329 --> 00:40:31,730
compile it it's not gonna gonna help

957
00:40:29,269 --> 00:40:34,130
right the reason it's not going to help

958
00:40:31,730 --> 00:40:37,130
is because the compiler has sort of

959
00:40:34,130 --> 00:40:41,059
reserved the concept that this mem set

960
00:40:37,130 --> 00:40:43,670
function is an intrinsic right so it's

961
00:40:41,059 --> 00:40:45,259
actually it knows that it wants the C

962
00:40:43,670 --> 00:40:46,909
runtime library version and we haven't

963
00:40:45,260 --> 00:40:48,350
given it the C runtime library version

964
00:40:46,909 --> 00:40:50,389
so it's very upset with us about this

965
00:40:48,349 --> 00:40:53,179
right so

966
00:40:50,389 --> 00:40:55,429
the question is what do we do now well

967
00:40:53,179 --> 00:40:59,808
for starters we do have one problem

968
00:40:55,429 --> 00:41:04,578
which is the memset function here is not

969
00:40:59,809 --> 00:41:08,990
defined as a fee function which it wants

970
00:41:04,579 --> 00:41:12,019
to be right so technically we want this

971
00:41:08,989 --> 00:41:13,518
to be in the in an extern see because

972
00:41:12,018 --> 00:41:15,139
the memset is suppose to be in the C

973
00:41:13,518 --> 00:41:17,268
runtime library that's not in the C++

974
00:41:15,139 --> 00:41:18,858
run runtime library so it's supposed to

975
00:41:17,268 --> 00:41:20,808
actually be an extra it's just a C

976
00:41:18,858 --> 00:41:22,489
function not a C++ function gets name

977
00:41:20,809 --> 00:41:27,680
mangled and all that sort of stuff right

978
00:41:22,489 --> 00:41:29,048
but it already had C deckle on it which

979
00:41:27,679 --> 00:41:31,818
means that for all intents and purposes

980
00:41:29,048 --> 00:41:34,338
that just automatically happened right

981
00:41:31,818 --> 00:41:37,068
so this will again not really help us

982
00:41:34,338 --> 00:41:38,869
get anywhere I just want to point out

983
00:41:37,068 --> 00:41:41,869
that that's technically supposed to be

984
00:41:38,869 --> 00:41:44,930
the case right but this this right here

985
00:41:41,869 --> 00:41:47,690
there is no other part of C that we care

986
00:41:44,929 --> 00:41:49,489
about for this for the function

987
00:41:47,690 --> 00:41:52,700
signature so even though extern C would

988
00:41:49,489 --> 00:41:54,500
have made the function compile as you

989
00:41:52,699 --> 00:41:55,189
know as if it was being included from a

990
00:41:54,500 --> 00:41:56,960
C thing or whatever

991
00:41:55,190 --> 00:41:58,250
that's it doesn't matter the C decals

992
00:41:56,960 --> 00:42:00,318
the only part we care about which is the

993
00:41:58,250 --> 00:42:03,858
way that the function is mangled and

994
00:42:00,318 --> 00:42:06,079
called so how do we actually get this

995
00:42:03,858 --> 00:42:09,588
memset intrinsic to it to be linked well

996
00:42:06,079 --> 00:42:16,278
it turns out we can issue a pragma that

997
00:42:09,588 --> 00:42:20,509
lets the compiler know that this is the

998
00:42:16,278 --> 00:42:26,119
function that's looking for right let me

999
00:42:20,509 --> 00:42:28,329
see right here if if this shows us in

1000
00:42:26,119 --> 00:42:28,329
there

1001
00:42:31,260 --> 00:42:36,300
this is not exactly what I was looking

1002
00:42:34,059 --> 00:42:36,299
for

1003
00:42:39,949 --> 00:42:43,299
and neither is that

1004
00:42:46,730 --> 00:42:53,420
you can see these here this is the thing

1005
00:42:49,280 --> 00:42:55,730
we just implemented right well point

1006
00:42:53,420 --> 00:42:57,139
being what we need to use is this pragma

1007
00:42:55,730 --> 00:43:03,230
intrinsic here that lets it know that

1008
00:42:57,139 --> 00:43:04,219
the intrinsic R that this intrinsic is

1009
00:43:03,230 --> 00:43:07,340
something that we're actually going to

1010
00:43:04,219 --> 00:43:08,750
define so in my recollection anyway we

1011
00:43:07,340 --> 00:43:09,980
still need this fragment trinsic I don't

1012
00:43:08,750 --> 00:43:11,449
think it's actually still going to be

1013
00:43:09,980 --> 00:43:13,070
enough because there's not a step that I

1014
00:43:11,449 --> 00:43:24,108
think you usually have to do but point

1015
00:43:13,070 --> 00:43:28,309
being if we specify this here like so I

1016
00:43:24,108 --> 00:43:29,869
believe that that is required as part of

1017
00:43:28,309 --> 00:43:30,980
it but like I said I don't think it

1018
00:43:29,869 --> 00:43:32,030
actually works the reason I don't think

1019
00:43:30,980 --> 00:43:33,199
it actually works is because I think

1020
00:43:32,030 --> 00:43:34,100
there's one more step if I remember

1021
00:43:33,199 --> 00:43:36,019
correctly when I had to do this

1022
00:43:34,099 --> 00:43:39,199
originally that you have to do I don't

1023
00:43:36,019 --> 00:43:41,869
really remember why you had to do it

1024
00:43:39,199 --> 00:43:45,529
I shouldn't say remember I never really

1025
00:43:41,869 --> 00:43:48,100
quite figured out why meaning I don't

1026
00:43:45,530 --> 00:43:52,190
know why the compiler actually cared

1027
00:43:48,099 --> 00:43:54,170
that it was done this way because I

1028
00:43:52,190 --> 00:43:57,230
couldn't figure out any logical reason

1029
00:43:54,170 --> 00:43:59,108
for it but maybe there was one I don't

1030
00:43:57,230 --> 00:44:01,940
know

1031
00:43:59,108 --> 00:44:04,219
so what I had to do in here anyway

1032
00:44:01,940 --> 00:44:05,990
and I'm pretty sure yeah you can't no no

1033
00:44:04,219 --> 00:44:10,029
placement of the intrinsic function

1034
00:44:05,989 --> 00:44:13,159
helps you if I remember correctly yeah

1035
00:44:10,030 --> 00:44:15,320
if I remember correctly there was no way

1036
00:44:13,159 --> 00:44:17,239
to actually get it to do it here that's

1037
00:44:15,320 --> 00:44:19,369
what I remember anyway what I actually

1038
00:44:17,239 --> 00:44:21,829
had to do to get the compiler to be okay

1039
00:44:19,369 --> 00:44:24,170
with me defining my memset is it had to

1040
00:44:21,829 --> 00:44:28,759
be in a separate file that was compiled

1041
00:44:24,170 --> 00:44:31,159
as C that's just I I do not know why it

1042
00:44:28,760 --> 00:44:33,369
felt like that was important because it

1043
00:44:31,159 --> 00:44:35,929
should only really need the code for it

1044
00:44:33,369 --> 00:44:38,090
but it must have some kind of way that

1045
00:44:35,929 --> 00:44:42,409
it's doing something important there I

1046
00:44:38,090 --> 00:44:45,950
don't know so I'm gonna make a handmade

1047
00:44:42,409 --> 00:44:48,769
MSV C function that's re file it's gonna

1048
00:44:45,949 --> 00:44:52,549
be straight C and I'm gonna put it in

1049
00:44:48,769 --> 00:44:54,139
there like so now when I compile of

1050
00:44:52,550 --> 00:44:55,789
course that function isn't being

1051
00:44:54,139 --> 00:44:57,460
included anywhere and that's by design

1052
00:44:55,789 --> 00:44:59,750
so we're not going to have the memset

1053
00:44:57,460 --> 00:45:01,099
but what I'm gonna do is I'm going to go

1054
00:44:59,750 --> 00:45:02,568
into our bill

1055
00:45:01,099 --> 00:45:05,150
and then in here where we're actually

1056
00:45:02,568 --> 00:45:08,179
doing it I'm gonna specify in addition

1057
00:45:05,150 --> 00:45:10,430
to the win32 handmade I'm going to go

1058
00:45:08,179 --> 00:45:13,578
ahead and specify this file as well so

1059
00:45:10,429 --> 00:45:17,210
in handmade code we've got the handmade

1060
00:45:13,579 --> 00:45:18,349
MSB C which is just a stub for if you're

1061
00:45:17,210 --> 00:45:19,909
complying with the microsoft visual

1062
00:45:18,349 --> 00:45:25,369
studio compiler you need this thing

1063
00:45:19,909 --> 00:45:27,230
right and then when you actually do it I

1064
00:45:25,369 --> 00:45:30,349
think you can get this thing to work now

1065
00:45:27,230 --> 00:45:32,389
that's just what I remember but you know

1066
00:45:30,349 --> 00:45:34,309
don't quote me on that because I don't

1067
00:45:32,389 --> 00:45:35,838
actually remember the way in which you

1068
00:45:34,309 --> 00:45:38,150
had to make this happen but I'm pretty

1069
00:45:35,838 --> 00:45:39,139
sure that was it cannot be defined of

1070
00:45:38,150 --> 00:45:41,180
course I've never done it on this

1071
00:45:39,139 --> 00:45:50,989
compiler either this was only on 2012 so

1072
00:45:41,179 --> 00:45:53,500
I could be how do I convince you um I

1073
00:45:50,989 --> 00:46:05,000
feel like that's correct

1074
00:45:53,500 --> 00:46:06,559
what don't you like I remember this

1075
00:46:05,000 --> 00:46:09,068
being extremely annoying when I had to

1076
00:46:06,559 --> 00:46:09,069
do it as well

1077
00:46:10,980 --> 00:46:14,300
[Music]

1078
00:46:33,829 --> 00:46:41,960
hmm so Martin's must have solved this

1079
00:46:39,440 --> 00:46:43,340
for us as well right I could go look at

1080
00:46:41,960 --> 00:46:45,110
my code to see how I did it

1081
00:46:43,340 --> 00:46:58,570
it's just was a trial and error process

1082
00:46:45,110 --> 00:46:58,570
as all I remember that's for other stuff

1083
00:46:59,739 --> 00:47:06,919
so this is what I tried to do

1084
00:47:03,880 --> 00:47:09,890
it's exactly what Martin's was doing as

1085
00:47:06,920 --> 00:47:13,099
well which doesn't bode well I hope this

1086
00:47:09,889 --> 00:47:15,579
is not a thing that happened that means

1087
00:47:13,099 --> 00:47:25,579
you can't do it now

1088
00:47:15,579 --> 00:47:28,489
that would be really bad oh that's why I

1089
00:47:25,579 --> 00:47:31,549
just had it wrong I put intrinsic here

1090
00:47:28,489 --> 00:47:33,739
not pragma function okay sorry my bad

1091
00:47:31,550 --> 00:47:42,140
since this is a separate file now I

1092
00:47:33,739 --> 00:47:46,699
can't be using you eight anymore but

1093
00:47:42,139 --> 00:47:48,409
that's fine okay yeah I forgot sorry

1094
00:47:46,699 --> 00:47:52,879
it's not pregnant trinsic it's pragma

1095
00:47:48,409 --> 00:47:56,750
function that's that's my bad so okay

1096
00:47:52,880 --> 00:47:59,329
I'll forget so Y memset returns the

1097
00:47:56,750 --> 00:48:01,760
destination I don't know I didn't even

1098
00:47:59,329 --> 00:48:06,969
realize that it did I don't think but

1099
00:48:01,760 --> 00:48:11,870
you know it does so there you go alright

1100
00:48:06,969 --> 00:48:14,569
so I believe we are good to go on that

1101
00:48:11,869 --> 00:48:18,440
front now right

1102
00:48:14,570 --> 00:48:20,090
and so yes we've we've gotten to the

1103
00:48:18,440 --> 00:48:22,670
point where we now have the MEMS that

1104
00:48:20,090 --> 00:48:25,750
replaced and then float used again is

1105
00:48:22,670 --> 00:48:27,800
just something that we should be able to

1106
00:48:25,750 --> 00:48:29,510
again you can just go look at Martin's

1107
00:48:27,800 --> 00:48:30,769
cuz he's got all this down but I'm just

1108
00:48:29,510 --> 00:48:31,910
kind of showing you the steps that you

1109
00:48:30,769 --> 00:48:33,230
would have gone through to do it

1110
00:48:31,909 --> 00:48:37,009
yourself

1111
00:48:33,230 --> 00:48:40,510
I feel like we should be able to find

1112
00:48:37,010 --> 00:48:40,510
float used somewhere

1113
00:48:42,159 --> 00:48:51,960
in the math libraries how come

1114
00:48:48,369 --> 00:48:51,960
don't you have to be able to call that

1115
00:48:53,099 --> 00:48:56,769
hmm

1116
00:48:54,250 --> 00:49:00,219
so I'm gonna go ahead and look if I go

1117
00:48:56,769 --> 00:49:03,519
into the definition here this is in VC

1118
00:49:00,219 --> 00:49:12,039
runtime string so I'm gonna go ahead and

1119
00:49:03,519 --> 00:49:15,009
take a look at the path to that I want

1120
00:49:12,039 --> 00:49:17,340
the I want find in files where did that

1121
00:49:15,010 --> 00:49:17,340
go

1122
00:49:22,139 --> 00:49:27,828
somebody know where that went did it not

1123
00:49:25,289 --> 00:49:27,829
used to be here

1124
00:49:33,670 --> 00:49:41,099
there is they just moved it out into its

1125
00:49:36,130 --> 00:49:43,960
own submenu so I want to go ahead and

1126
00:49:41,099 --> 00:49:45,460
see if we can find this this is not yes

1127
00:49:43,960 --> 00:49:47,019
so that's not the C runtime those just

1128
00:49:45,460 --> 00:49:49,449
the header files the C runtime layer

1129
00:49:47,019 --> 00:49:54,190
library so I'm gonna go ahead and see if

1130
00:49:49,449 --> 00:49:56,108
I can find if it installed the C runtime

1131
00:49:54,190 --> 00:49:57,240
library so we can look Wiccan we can

1132
00:49:56,108 --> 00:50:03,460
just grab the source code ourselves

1133
00:49:57,239 --> 00:50:12,308
right so let's go ahead and do find in

1134
00:50:03,460 --> 00:50:15,220
files can this know is there a reason

1135
00:50:12,309 --> 00:50:17,500
why it won't let me actually all right

1136
00:50:15,219 --> 00:50:26,199
well that's fine we'll just do it the

1137
00:50:17,500 --> 00:50:29,380
other way so what's gonna paste this in

1138
00:50:26,199 --> 00:50:32,048
here I want to see if it's got the

1139
00:50:29,380 --> 00:50:34,329
source code so it looks like it sort of

1140
00:50:32,048 --> 00:50:36,400
does anyway I mean here's the CRT source

1141
00:50:34,329 --> 00:50:38,048
directory so what I'm going to do is I'm

1142
00:50:36,400 --> 00:50:40,750
just gonna take that source directory

1143
00:50:38,048 --> 00:50:42,880
I'm just gonna ask Visual Studio if it

1144
00:50:40,750 --> 00:50:46,690
can just find me

1145
00:50:42,880 --> 00:50:49,059
oh whoops I no wonder it's pacing that

1146
00:50:46,690 --> 00:50:52,210
in the wrong area there we go I'm just

1147
00:50:49,059 --> 00:50:55,720
gonna look if it can find any reference

1148
00:50:52,210 --> 00:50:57,970
to float used itself because if it can

1149
00:50:55,719 --> 00:51:01,539
then I can look at it so here are the

1150
00:50:57,969 --> 00:51:05,588
results that it gave me you can see one

1151
00:51:01,539 --> 00:51:07,420
there see one here and one here they're

1152
00:51:05,588 --> 00:51:09,489
all in the same file so that pretty much

1153
00:51:07,420 --> 00:51:12,579
gives us exactly what we wanted

1154
00:51:09,489 --> 00:51:16,149
there's that definition of it again we

1155
00:51:12,579 --> 00:51:18,039
don't really know what Microsoft plans

1156
00:51:16,150 --> 00:51:21,220
to do with this value we just know that

1157
00:51:18,039 --> 00:51:23,489
it really wants to pull it in so we

1158
00:51:21,219 --> 00:51:26,169
should just be able to leave it there

1159
00:51:23,489 --> 00:51:30,459
and we don't need to extra and see it we

1160
00:51:26,170 --> 00:51:33,460
can just leave it as in float used I

1161
00:51:30,460 --> 00:51:35,349
believe now it's a very strange

1162
00:51:33,460 --> 00:51:40,358
declaration pattern to be honest with

1163
00:51:35,349 --> 00:51:44,410
you I don't even recognize that how it's

1164
00:51:40,358 --> 00:51:47,469
why it's set up that way I don't even

1165
00:51:44,409 --> 00:51:51,719
know what that is in

1166
00:51:47,469 --> 00:51:54,250
bliss Utley meaning if we have literally

1167
00:51:51,719 --> 00:52:00,779
this I don't think that would compile

1168
00:51:54,250 --> 00:52:00,780
with it yeah it just seems kind of weird

1169
00:52:04,829 --> 00:52:09,579
yeah I don't know so I would just write

1170
00:52:07,179 --> 00:52:13,739
it like this and I believe that's

1171
00:52:09,579 --> 00:52:16,599
sufficient and there we go

1172
00:52:13,739 --> 00:52:19,779
so now we've got the C runtime library

1173
00:52:16,599 --> 00:52:21,759
basically completely out there is no

1174
00:52:19,780 --> 00:52:24,280
more C runtime library in our win32

1175
00:52:21,760 --> 00:52:26,260
portion and we've got the wind main CRT

1176
00:52:24,280 --> 00:52:29,019
startup situation so let's talk about

1177
00:52:26,260 --> 00:52:33,220
that a little bit here so if you take a

1178
00:52:29,019 --> 00:52:38,650
look in here where we started out do you

1179
00:52:33,219 --> 00:52:39,879
see how we've got a wind main right for

1180
00:52:38,650 --> 00:52:43,809
the entire time we've been programming

1181
00:52:39,880 --> 00:52:46,840
we've been starting at wind main and one

1182
00:52:43,809 --> 00:52:51,909
of the things about wind main is that we

1183
00:52:46,840 --> 00:52:56,760
can't actually that wind main actually

1184
00:52:51,909 --> 00:52:59,049
isn't an entry point to your program if

1185
00:52:56,760 --> 00:53:01,510
you're actually getting called directly

1186
00:52:59,050 --> 00:53:06,670
from the operating system what's

1187
00:53:01,510 --> 00:53:09,690
actually happening there is that the

1188
00:53:06,670 --> 00:53:11,800
linker when it builds your executable

1189
00:53:09,690 --> 00:53:14,679
because it assumes that the C runtime

1190
00:53:11,800 --> 00:53:17,200
library is being linked in it actually

1191
00:53:14,679 --> 00:53:19,119
calls a secret function that you don't

1192
00:53:17,199 --> 00:53:21,819
know about called wind main CR key

1193
00:53:19,119 --> 00:53:24,159
startup this one right here that sets up

1194
00:53:21,820 --> 00:53:27,880
the C runtime library stuff first

1195
00:53:24,159 --> 00:53:30,730
then calls your wind main so this wind

1196
00:53:27,880 --> 00:53:36,130
main is actually only a prototype that

1197
00:53:30,730 --> 00:53:37,679
is created by the C runtime library it

1198
00:53:36,130 --> 00:53:40,059
doesn't have anything to do with Windows

1199
00:53:37,679 --> 00:53:43,269
it's the C runtime library that defines

1200
00:53:40,059 --> 00:53:44,739
that function win means CRT startup is

1201
00:53:43,269 --> 00:53:46,420
actually what's been getting called this

1202
00:53:44,739 --> 00:53:51,339
whole time when our program starts and

1203
00:53:46,420 --> 00:53:52,869
we just didn't know about it right so if

1204
00:53:51,340 --> 00:53:56,289
you take a look in here if I go to

1205
00:53:52,869 --> 00:53:58,799
definition of well let's do it the same

1206
00:53:56,289 --> 00:53:58,800
way we used to

1207
00:54:03,849 --> 00:54:14,869
so if we take a look at these entry

1208
00:54:06,079 --> 00:54:16,960
points here here we go just scanning

1209
00:54:14,869 --> 00:54:16,960
through

1210
00:54:22,570 --> 00:54:30,500
so you can see here there's like a bunch

1211
00:54:26,659 --> 00:54:35,480
of stuff that it's doing so main CRT

1212
00:54:30,500 --> 00:54:36,199
start up let's take a look here this is

1213
00:54:35,480 --> 00:54:38,469
really annoying

1214
00:54:36,199 --> 00:54:45,710
I should just step into this actually

1215
00:54:38,469 --> 00:54:48,219
can we build this program this I can

1216
00:54:45,710 --> 00:54:48,220
show it to you

1217
00:54:54,980 --> 00:55:01,429
I don't know so now in theory I can step

1218
00:54:57,650 --> 00:55:03,889
into this right here's our wind mane see

1219
00:55:01,429 --> 00:55:06,710
it looks exactly like the wind mane that

1220
00:55:03,889 --> 00:55:08,420
we had before and what I want to do is I

1221
00:55:06,710 --> 00:55:10,579
want to see the external code right I

1222
00:55:08,420 --> 00:55:12,650
would like to see what that actual code

1223
00:55:10,579 --> 00:55:13,970
is that's higher up on the stack

1224
00:55:12,650 --> 00:55:16,579
although it looks like it doesn't really

1225
00:55:13,969 --> 00:55:19,608
want to show it to me but hopefully I

1226
00:55:16,579 --> 00:55:22,700
can coerce it to do that by getting to

1227
00:55:19,608 --> 00:55:26,440
our by getting to our return statement

1228
00:55:22,699 --> 00:55:35,719
and then if I if I put in here

1229
00:55:26,440 --> 00:55:38,119
for this assembly here we go there's our

1230
00:55:35,719 --> 00:55:41,719
ret so this will hop back to the next

1231
00:55:38,119 --> 00:55:44,420
function so this is what actually called

1232
00:55:41,719 --> 00:55:48,348
us so you can see not Windows this is

1233
00:55:44,420 --> 00:55:51,970
the C runtime library I don't know if I

1234
00:55:48,349 --> 00:55:51,970
can get this to tell me where we are

1235
00:55:53,858 --> 00:55:57,980
there you go

1236
00:55:55,219 --> 00:56:00,889
XZ common dot INL is actually where we

1237
00:55:57,980 --> 00:56:02,329
are right again this is just code that

1238
00:56:00,889 --> 00:56:04,129
that got inserted by the C runtime

1239
00:56:02,329 --> 00:56:08,450
library into our project we didn't ask

1240
00:56:04,130 --> 00:56:10,789
for it's just there we come back up out

1241
00:56:08,449 --> 00:56:13,578
of invoke main and now we're you know

1242
00:56:10,789 --> 00:56:18,679
still still rockin I don't know where we

1243
00:56:13,579 --> 00:56:21,849
are here let's take a look common main

1244
00:56:18,679 --> 00:56:24,559
seh seh is structure exception handling

1245
00:56:21,849 --> 00:56:29,000
so this probably sets up the structured

1246
00:56:24,559 --> 00:56:31,489
exception handling stack for us or

1247
00:56:29,000 --> 00:56:34,599
something like this right but anyway

1248
00:56:31,489 --> 00:56:34,598
let's keep going

1249
00:56:38,269 --> 00:56:41,449
in fact now we've got a valid stack

1250
00:56:40,159 --> 00:56:43,399
which is even better so I can just walk

1251
00:56:41,449 --> 00:56:45,710
right up it SOT common man that's what

1252
00:56:43,400 --> 00:56:49,220
got called and then here we finally are

1253
00:56:45,710 --> 00:56:51,769
right so you can see here here is our

1254
00:56:49,219 --> 00:56:55,129
actual call pattern this is actually

1255
00:56:51,769 --> 00:56:57,858
where we came in we then went to here we

1256
00:56:55,130 --> 00:57:00,140
then went to here and then we went to

1257
00:56:57,858 --> 00:57:04,940
the thing the dispatches to our win main

1258
00:57:00,139 --> 00:57:10,368
I know it's kind of nuts right so what

1259
00:57:04,940 --> 00:57:13,130
we can expect is that actually this is

1260
00:57:10,369 --> 00:57:15,170
the function that would actually be

1261
00:57:13,130 --> 00:57:17,630
getting called right

1262
00:57:15,170 --> 00:57:21,200
w win main CRT startup is where we

1263
00:57:17,630 --> 00:57:29,780
actually expect to enter and if we take

1264
00:57:21,199 --> 00:57:32,480
a look we can search for that and you

1265
00:57:29,780 --> 00:57:34,070
can see that when we link we actually

1266
00:57:32,480 --> 00:57:37,250
have the ability to specify what

1267
00:57:34,070 --> 00:57:40,670
function we want Windows to jump to

1268
00:57:37,250 --> 00:57:42,619
first and by default it's gonna be set

1269
00:57:40,670 --> 00:57:46,070
to you know whichever one of these you

1270
00:57:42,619 --> 00:57:48,050
can find right but we could tell it

1271
00:57:46,070 --> 00:57:51,800
whatever we wanted rather than telling

1272
00:57:48,050 --> 00:57:53,210
you what we want we can just pick one of

1273
00:57:51,800 --> 00:57:56,750
these and use them and we'll get jumped

1274
00:57:53,210 --> 00:58:00,230
to right so win main CRT startup will

1275
00:57:56,750 --> 00:58:02,150
just work if we just you know specify

1276
00:58:00,230 --> 00:58:04,250
that the linker will find it and call it

1277
00:58:02,150 --> 00:58:08,660
or we could specify entry until it where

1278
00:58:04,250 --> 00:58:10,280
to call now we kind of want to know what

1279
00:58:08,659 --> 00:58:13,868
the function signature is to it but it

1280
00:58:10,280 --> 00:58:13,869
looks like it's nothing right

1281
00:58:20,760 --> 00:58:34,020
there we go wait why is this like crashy

1282
00:58:24,369 --> 00:58:34,019
I can't like okay there we go

1283
00:58:34,559 --> 00:58:39,489
so what we want to do here is just find

1284
00:58:36,940 --> 00:58:41,700
out is there anything particularly weird

1285
00:58:39,489 --> 00:58:44,289
going on with what it needs to get past

1286
00:58:41,699 --> 00:58:47,949
and I don't really know like I said

1287
00:58:44,289 --> 00:58:50,050
because I don't remember but I all we

1288
00:58:47,949 --> 00:58:53,409
want to do is find out what this might

1289
00:58:50,050 --> 00:58:54,580
take as parameters now this looks like

1290
00:58:53,409 --> 00:58:55,389
it doesn't take anything as parameters

1291
00:58:54,579 --> 00:58:58,029
right looks like it's not getting

1292
00:58:55,389 --> 00:58:59,469
anything there so in theory what we

1293
00:58:58,030 --> 00:59:05,050
should be able to do is actually just

1294
00:58:59,469 --> 00:59:06,989
use this as iteration directly and if we

1295
00:59:05,050 --> 00:59:10,480
do that then we should be completely

1296
00:59:06,989 --> 00:59:13,750
good to go here so in here if I say all

1297
00:59:10,480 --> 00:59:15,608
right I previously had this I'm not

1298
00:59:13,750 --> 00:59:17,949
going to have this anymore so basically

1299
00:59:15,608 --> 00:59:21,159
all of these things are gone what I'm

1300
00:59:17,949 --> 00:59:32,710
gonna have is this exact thing here and

1301
00:59:21,159 --> 00:59:34,929
I'm going to go ahead and rid of that so

1302
00:59:32,710 --> 00:59:37,780
if this is my actual startup code and I

1303
00:59:34,929 --> 00:59:39,219
compile it now what I will find is any

1304
00:59:37,780 --> 00:59:41,320
place that I needed to use something

1305
00:59:39,219 --> 00:59:44,500
there you can see we had our instance

1306
00:59:41,320 --> 00:59:45,849
there I'm not gonna have that bad

1307
00:59:44,500 --> 00:59:47,349
information right

1308
00:59:45,849 --> 00:59:49,030
because that was stuff the C runtime

1309
00:59:47,349 --> 00:59:51,940
library had prepared and passed to me

1310
00:59:49,030 --> 00:59:53,260
but that's okay because actually hey if

1311
00:59:51,940 --> 00:59:55,599
your Windows programmer you actually

1312
00:59:53,260 --> 00:59:56,980
know where to get this stuff instance is

1313
00:59:55,599 --> 00:59:59,710
actually something that we can get

1314
00:59:56,980 --> 01:00:03,309
directly by calling get module handle

1315
00:59:59,710 --> 01:00:07,050
for example and so we can get our

1316
01:00:03,309 --> 01:00:08,588
instance out just fine right no problem

1317
01:00:07,050 --> 01:00:10,780
no I don't actually

1318
01:00:08,588 --> 01:00:12,369
want I want to just be win main CRT

1319
01:00:10,780 --> 01:00:14,710
startup that's all I really wanted there

1320
01:00:12,369 --> 01:00:16,720
I don't know why entry point must be

1321
01:00:14,710 --> 01:00:20,230
defined as complaining here because this

1322
01:00:16,719 --> 01:00:22,779
is our entry point and so I'm not sure

1323
01:00:20,230 --> 01:00:24,190
why it's mad at us about that

1324
01:00:22,780 --> 01:00:26,890
but again one of the weird things is

1325
01:00:24,190 --> 01:00:30,829
this is not what I expected the startup

1326
01:00:26,889 --> 01:00:34,028
code to look like signature wise to be

1327
01:00:30,829 --> 01:00:41,959
with you so that was a little bit weird

1328
01:00:34,028 --> 01:00:44,420
so I am kind of wondering if we've got

1329
01:00:41,958 --> 01:00:52,219
that right but I think we should be able

1330
01:00:44,420 --> 01:00:55,329
to see you slash entry it's the

1331
01:00:52,219 --> 01:00:55,329
difference between these two

1332
01:01:03,588 --> 01:01:09,710
where is the function signature I just

1333
01:01:08,268 --> 01:01:12,318
want to see the function signature what

1334
01:01:09,710 --> 01:01:14,798
do you expect to have there that's all

1335
01:01:12,318 --> 01:01:14,798
I'm asking

1336
01:01:15,849 --> 01:01:24,200
no I don't I just want the definition of

1337
01:01:19,429 --> 01:01:26,298
this can't you look how do you search in

1338
01:01:24,199 --> 01:01:32,538
just and I like how Stack Overflow is

1339
01:01:26,298 --> 01:01:34,719
like I just want MSDN search does this

1340
01:01:32,539 --> 01:01:40,269
work

1341
01:01:34,719 --> 01:01:40,269
Wow what is it doing

1342
01:01:42,559 --> 01:01:45,279
hello

1343
01:01:48,250 --> 01:01:51,969
I don't even wanna know anyway I just

1344
01:01:50,889 --> 01:01:53,739
want to know what that function should

1345
01:01:51,969 --> 01:01:56,679
be before I go any further just to make

1346
01:01:53,739 --> 01:02:01,469
sure that we've got it right and

1347
01:01:56,679 --> 01:02:01,469
unfortunately I can't actually see I

1348
01:02:01,588 --> 01:02:05,710
don't even know what this is supposed to

1349
01:02:03,909 --> 01:02:09,190
be it's like text they paste it in here

1350
01:02:05,710 --> 01:02:12,220
or something I don't even know anyway

1351
01:02:09,190 --> 01:02:14,349
let's do it it says the entry option is

1352
01:02:12,219 --> 01:02:17,439
an entry point it's not even text wrap

1353
01:02:14,349 --> 01:02:21,579
like what is this what is going on

1354
01:02:17,440 --> 01:02:23,740
Microsoft the function must be defined

1355
01:02:21,579 --> 01:02:33,660
the standard call calling convention so

1356
01:02:23,739 --> 01:02:33,659
that wasn't happening start with that

1357
01:02:50,389 --> 01:02:59,079
LP void starts so yeah this is when

1358
01:02:55,309 --> 01:02:59,079
creating him oh that's a managed image

1359
01:03:01,230 --> 01:03:05,769
the parameters and return if I depend on

1360
01:03:04,389 --> 01:03:07,210
if the program is concept vision what is

1361
01:03:05,769 --> 01:03:08,590
the future is recommended you have to

1362
01:03:07,210 --> 01:03:09,820
link or set the entry points the see Ron

1363
01:03:08,590 --> 01:03:13,230
Tillery essentially correctly and see

1364
01:03:09,820 --> 01:03:13,230
but doesn't say what

1365
01:03:22,789 --> 01:03:30,719
it doesn't actually say what the in

1366
01:03:28,050 --> 01:03:32,880
classic fashion it doesn't say what the

1367
01:03:30,719 --> 01:03:34,858
entry point difference would be let me

1368
01:03:32,880 --> 01:03:42,510
go ahead and look at subsystem and see

1369
01:03:34,858 --> 01:03:48,949
if it somehow defines there so Windows

1370
01:03:42,510 --> 01:03:48,950
application to say what the startup is

1371
01:03:57,650 --> 01:04:03,079
the native code win mean for W in Maine

1372
01:04:00,710 --> 01:04:05,150
is defined for managed code witnesses

1373
01:04:03,079 --> 01:04:07,489
default yeah none of this this is all

1374
01:04:05,150 --> 01:04:09,829
but that's also again that's for if you

1375
01:04:07,489 --> 01:04:10,789
haven't now this is really annoying this

1376
01:04:09,829 --> 01:04:12,409
is really bad

1377
01:04:10,789 --> 01:04:16,779
the documentation for Windows used to be

1378
01:04:12,409 --> 01:04:16,779
good and now it's not

1379
01:04:30,989 --> 01:04:39,839
so I'm just curious here also what would

1380
01:04:34,320 --> 01:04:42,080
happen if we kept this function

1381
01:04:39,840 --> 01:04:42,079
signature

1382
01:04:50,940 --> 01:04:55,599
yes so all I'm really trying to do is to

1383
01:04:53,349 --> 01:05:00,160
have it fine to this right I want it to

1384
01:04:55,599 --> 01:05:01,720
be able to find this guy um let's go

1385
01:05:00,159 --> 01:05:07,858
ahead and move this inside an extern and

1386
01:05:01,719 --> 01:05:10,028
see block and try a couple more things

1387
01:05:07,858 --> 01:05:11,828
but what should have happened in that

1388
01:05:10,028 --> 01:05:14,528
documentation right if the documentation

1389
01:05:11,829 --> 01:05:16,210
we're good is that it would have told us

1390
01:05:14,528 --> 01:05:18,730
what the function signature needs to be

1391
01:05:16,210 --> 01:05:20,199
exactly like here is what I'm going to

1392
01:05:18,730 --> 01:05:21,969
look for how would that's not there I

1393
01:05:20,199 --> 01:05:26,288
don't know it's a very basic thing you

1394
01:05:21,969 --> 01:05:28,919
know a linker should tell you and yet we

1395
01:05:26,289 --> 01:05:28,920
can't find it

1396
01:05:38,269 --> 01:05:49,360
so if we don't define this it says entry

1397
01:05:46,579 --> 01:05:49,360
point must be defined

1398
01:05:52,659 --> 01:05:59,469
hmm so I'm not really sure I really

1399
01:05:55,750 --> 01:06:01,630
don't know what's going on there but I

1400
01:05:59,469 --> 01:06:03,730
mean I guess there's no reason we can't

1401
01:06:01,630 --> 01:06:05,440
just tell it if it really wants it to be

1402
01:06:03,730 --> 01:06:07,659
defined we could just tell it what the

1403
01:06:05,440 --> 01:06:19,260
entry point is I mean we could just say

1404
01:06:07,659 --> 01:06:22,259
this right and then see what it says

1405
01:06:19,260 --> 01:06:22,260
sorry

1406
01:06:35,210 --> 01:06:41,260
oh so did we not ever specify subsystem

1407
01:06:38,659 --> 01:06:45,230
windows and it just wants us to maybe

1408
01:06:41,260 --> 01:06:47,930
even though the default is supposed to

1409
01:06:45,230 --> 01:06:58,389
be subsystem windows maybe we have to

1410
01:06:47,929 --> 01:07:02,239
say so I don't know what to make of that

1411
01:06:58,389 --> 01:07:04,219
so there we go I don't know do you think

1412
01:07:02,239 --> 01:07:12,259
maybe now we could get rid of this line

1413
01:07:04,219 --> 01:07:14,299
I'm not sure so I guess the subsystem

1414
01:07:12,260 --> 01:07:16,359
windows kind of has to be there even

1415
01:07:14,300 --> 01:07:20,390
though it's supposed to be the default

1416
01:07:16,358 --> 01:07:22,670
maybe like when you turn off the default

1417
01:07:20,389 --> 01:07:24,799
Lib stuff it doesn't know that it needs

1418
01:07:22,670 --> 01:07:27,050
to be the default anymore and you have

1419
01:07:24,800 --> 01:07:30,530
to put it there cuz now I can get this I

1420
01:07:27,050 --> 01:07:34,730
can put this back in there I also don't

1421
01:07:30,530 --> 01:07:37,849
know what the difference is here so it

1422
01:07:34,730 --> 01:07:40,389
looks like it doesn't matter what I

1423
01:07:37,849 --> 01:07:44,809
asked for for parameters there either

1424
01:07:40,389 --> 01:07:47,328
which is kind of interesting can I do

1425
01:07:44,809 --> 01:07:49,640
this now assume that was our problem was

1426
01:07:47,329 --> 01:07:51,798
that the subsystem Windows needs to be

1427
01:07:49,639 --> 01:07:54,440
there for reasons that are not mentioned

1428
01:07:51,798 --> 01:07:56,420
in the documentation but there you go ok

1429
01:07:54,440 --> 01:07:58,068
so now we can see whether that works

1430
01:07:56,420 --> 01:07:59,539
properly as well because we don't know

1431
01:07:58,068 --> 01:08:01,099
we may have broken something critical

1432
01:07:59,539 --> 01:08:02,690
all right so we have to see if we can

1433
01:08:01,099 --> 01:08:07,818
actually work but you know as you can

1434
01:08:02,690 --> 01:08:10,280
see we're running just fine now all

1435
01:08:07,818 --> 01:08:15,500
right so now we've completely gotten rid

1436
01:08:10,280 --> 01:08:18,230
of the C runtime library from our from

1437
01:08:15,500 --> 01:08:20,869
our win32 startup code but it's still

1438
01:08:18,229 --> 01:08:23,229
being linked into the game proper so the

1439
01:08:20,869 --> 01:08:25,789
game DLL still relies on something

1440
01:08:23,229 --> 01:08:27,559
potentially from there so what I want to

1441
01:08:25,789 --> 01:08:29,390
do now is I finally want to get to the

1442
01:08:27,560 --> 01:08:31,370
part that I was going to talk about for

1443
01:08:29,390 --> 01:08:32,929
probably for next weekend but I wanted

1444
01:08:31,369 --> 01:08:34,250
to do this weekend we'll do the sample

1445
01:08:32,929 --> 01:08:37,699
set but then for next weekend I think we

1446
01:08:34,250 --> 01:08:41,149
want to do this so if we take a look

1447
01:08:37,698 --> 01:08:43,698
here if I move the no default live up

1448
01:08:41,149 --> 01:08:47,889
into our other line as well so now

1449
01:08:43,698 --> 01:08:47,889
neither the game nor the

1450
01:08:48,710 --> 01:08:53,329
nor the win32 lair will have the C

1451
01:08:51,079 --> 01:08:56,659
runtime library right so then they don't

1452
01:08:53,329 --> 01:08:59,289
have it then you can see the problems

1453
01:08:56,659 --> 01:08:59,289
that we end up with

1454
01:08:59,859 --> 01:09:05,960
listed in the link line just like before

1455
01:09:02,109 --> 01:09:08,000
now some of them are what we expect so

1456
01:09:05,960 --> 01:09:09,710
we don't have check stack or Security

1457
01:09:08,000 --> 01:09:12,140
cookie because remember these are on the

1458
01:09:09,710 --> 01:09:16,189
common line so those those will again

1459
01:09:12,140 --> 01:09:18,170
get rid of that for us right so all the

1460
01:09:16,189 --> 01:09:21,229
the common linker stuff that gets rid of

1461
01:09:18,170 --> 01:09:23,779
the stack problems still takes takes

1462
01:09:21,229 --> 01:09:25,729
place memset and float used are

1463
01:09:23,779 --> 01:09:28,339
problematic because again those were

1464
01:09:25,729 --> 01:09:29,838
only in the win32 part but since we made

1465
01:09:28,338 --> 01:09:35,528
a separate file for them we can just

1466
01:09:29,838 --> 01:09:39,350
take that and again make that be part of

1467
01:09:35,529 --> 01:09:43,279
the build line so I can put that on here

1468
01:09:39,350 --> 01:09:44,989
and here and just link that stub in that

1469
01:09:43,279 --> 01:09:48,469
defines those parts and then we're good

1470
01:09:44,988 --> 01:09:50,689
right so that's fine then we're only

1471
01:09:48,469 --> 01:09:54,109
left with a few things and you can see

1472
01:09:50,689 --> 01:09:57,109
them right here there so now you know

1473
01:09:54,109 --> 01:09:59,000
100% what we actually use in the C

1474
01:09:57,109 --> 01:10:00,979
runtime library it's just three

1475
01:09:59,000 --> 01:10:02,630
functions right those are the only

1476
01:10:00,979 --> 01:10:04,009
things we didn't implement ourselves and

1477
01:10:02,630 --> 01:10:07,659
they're the transcendental math

1478
01:10:04,010 --> 01:10:09,949
functions sine cosine in atm

1479
01:10:07,659 --> 01:10:11,689
so if we want to get rid of the C

1480
01:10:09,949 --> 01:10:16,670
runtime library what we have to do is

1481
01:10:11,689 --> 01:10:19,009
replace sine cosine and a tan two and in

1482
01:10:16,670 --> 01:10:21,170
once we have those then we can literally

1483
01:10:19,010 --> 01:10:23,270
be library free like there were

1484
01:10:21,170 --> 01:10:25,789
literally no libraries used in hand-made

1485
01:10:23,270 --> 01:10:27,500
here at all not even the one the

1486
01:10:25,789 --> 01:10:32,590
compiler tries to shove in there without

1487
01:10:27,500 --> 01:10:35,119
your permission which is pretty cool but

1488
01:10:32,590 --> 01:10:36,319
that is something that again I said we

1489
01:10:35,119 --> 01:10:38,420
want to put off just a little bit

1490
01:10:36,319 --> 01:10:41,840
probably till next weekend but other

1491
01:10:38,420 --> 01:10:46,219
than that it's all all of the stuff has

1492
01:10:41,840 --> 01:10:49,789
been removed now we can if we want to

1493
01:10:46,219 --> 01:10:55,090
take a look at what those functions do

1494
01:10:49,789 --> 01:10:55,090
right if we go ahead and

1495
01:11:00,420 --> 01:11:16,779
we go so we need we've got

1496
01:11:04,840 --> 01:11:18,038
Coase f sign F write an 8 and 2 F if I

1497
01:11:16,779 --> 01:11:21,939
go to the definition of these here you

1498
01:11:18,038 --> 01:11:24,069
can see hey they didn't even bother

1499
01:11:21,939 --> 01:11:26,018
implementing a non double cosign they

1500
01:11:24,069 --> 01:11:29,738
just call their double version and then

1501
01:11:26,019 --> 01:11:32,199
cast it down you know oh well if we take

1502
01:11:29,738 --> 01:11:34,238
a look at the definition of that one we

1503
01:11:32,198 --> 01:11:45,939
can check and see what that's actually

1504
01:11:34,238 --> 01:11:48,868
doing looks like we should maybe be able

1505
01:11:45,939 --> 01:11:48,868
to do another finding files

1506
01:11:55,380 --> 01:12:13,260
alright or not let's see if I can find a

1507
01:12:05,680 --> 01:12:13,260
tan too okay on the right place

1508
01:12:18,170 --> 01:12:26,329
so it looks like the source for those

1509
01:12:20,180 --> 01:12:30,860
maybe isn't in there so I don't know we

1510
01:12:26,329 --> 01:12:33,019
can step in and see where we go like I

1511
01:12:30,859 --> 01:12:35,889
did before but it may be that they just

1512
01:12:33,020 --> 01:12:35,890
didn't provide the source

1513
01:12:53,039 --> 01:12:56,210
[Music]

1514
01:13:03,930 --> 01:13:12,100
it's right there what is the problem

1515
01:13:07,600 --> 01:13:15,329
Oh initialize local variable I don't

1516
01:13:12,100 --> 01:13:23,289
care what the value is fine

1517
01:13:15,329 --> 01:13:28,238
try three all right so now if I step in

1518
01:13:23,289 --> 01:13:30,488
here and we take a look at this looks

1519
01:13:28,238 --> 01:13:37,329
like it's not gonna let us see it so

1520
01:13:30,488 --> 01:13:38,619
I'll go into disassembly there we go so

1521
01:13:37,329 --> 01:13:40,689
you can see here that even though it

1522
01:13:38,619 --> 01:13:44,319
didn't want to tell us about it it's it

1523
01:13:40,689 --> 01:13:49,238
is right there right so let's go in

1524
01:13:44,319 --> 01:13:53,229
there take a look how many jumps does it

1525
01:13:49,238 --> 01:13:56,259
take to get to the cosine code so here's

1526
01:13:53,229 --> 01:14:00,759
our cosine code I and as you can see

1527
01:13:56,260 --> 01:14:05,020
it's an absolute disaster I mean it's

1528
01:14:00,760 --> 01:14:07,600
just nuts right so this again you know a

1529
01:14:05,020 --> 01:14:08,920
lot of times people may ask why not why

1530
01:14:07,600 --> 01:14:11,200
don't you link with the C runtime

1531
01:14:08,920 --> 01:14:12,789
library the answer is because of stuff

1532
01:14:11,199 --> 01:14:15,219
like this right like you just that

1533
01:14:12,789 --> 01:14:16,659
there's no way that you actually needed

1534
01:14:15,219 --> 01:14:19,800
to go through all that preamble code

1535
01:14:16,659 --> 01:14:24,279
like this is the actual code for cosine

1536
01:14:19,800 --> 01:14:27,550
right and honestly it's probably way too

1537
01:14:24,279 --> 01:14:28,889
much code for cosine for our purposes so

1538
01:14:27,550 --> 01:14:31,449
we can probably get that down even more

1539
01:14:28,890 --> 01:14:34,090
but in order just to get here we went

1540
01:14:31,449 --> 01:14:36,399
through like three or four jumps or

1541
01:14:34,090 --> 01:14:40,029
something we just want that welded into

1542
01:14:36,399 --> 01:14:41,409
our code directly for starters and we

1543
01:14:40,029 --> 01:14:43,149
don't want it to do any of the error

1544
01:14:41,409 --> 01:14:45,819
checking that it's normally gonna do to

1545
01:14:43,149 --> 01:14:48,339
look for like infinities or whatever you

1546
01:14:45,819 --> 01:14:49,869
know stuff that it has to do because of

1547
01:14:48,340 --> 01:14:51,310
the C runtime spec but that we know

1548
01:14:49,869 --> 01:14:53,409
we're never gonna encounter like we know

1549
01:14:51,310 --> 01:14:56,020
we're always gonna be passing it valid

1550
01:14:53,409 --> 01:14:58,719
reasonable values within a certain range

1551
01:14:56,020 --> 01:15:01,480
and so it can be optimized much more for

1552
01:14:58,719 --> 01:15:03,069
that so again there really isn't

1553
01:15:01,479 --> 01:15:05,379
anything in the C runtime library that I

1554
01:15:03,069 --> 01:15:06,699
would ever call that I don't think has a

1555
01:15:05,380 --> 01:15:08,409
bunch of cruft in it that I actually

1556
01:15:06,699 --> 01:15:12,369
want to get rid of which is why I don't

1557
01:15:08,409 --> 01:15:16,569
like using it so anyway there you can

1558
01:15:12,369 --> 01:15:20,199
see what happens with the cosine call

1559
01:15:16,569 --> 01:15:23,139
and again we can get a better version by

1560
01:15:20,199 --> 01:15:24,429
switching this to optimized right so it

1561
01:15:23,140 --> 01:15:25,990
would get better than that but it's

1562
01:15:24,430 --> 01:15:28,180
still gonna have problems in it again

1563
01:15:25,989 --> 01:15:29,649
just due to the spec stuff there and

1564
01:15:28,180 --> 01:15:30,850
there's also if you really want to use

1565
01:15:29,649 --> 01:15:32,379
Simran Pfizer's there's somebody's their

1566
01:15:30,850 --> 01:15:34,150
switches you can specify that tell it to

1567
01:15:32,380 --> 01:15:36,100
use better versions like don't worry

1568
01:15:34,149 --> 01:15:38,170
about like float consistency or whatever

1569
01:15:36,100 --> 01:15:40,870
it's said it's better but even if all of

1570
01:15:38,170 --> 01:15:42,730
that were true even if we had a good

1571
01:15:40,869 --> 01:15:44,529
inline cosign we still wouldn't want to

1572
01:15:42,729 --> 01:15:46,359
use it because we want to do our cosines

1573
01:15:44,529 --> 01:15:47,380
for wide anyway and the C runtime

1574
01:15:46,359 --> 01:15:49,569
library is never going to do that

1575
01:15:47,380 --> 01:15:55,060
because it only takes one float in and

1576
01:15:49,569 --> 01:15:57,549
Palouse is one float out right so back

1577
01:15:55,060 --> 01:15:59,770
to our regularly scheduled program why

1578
01:15:57,550 --> 01:16:01,510
do I mention all of that well because as

1579
01:15:59,770 --> 01:16:02,650
we narrow in on our sampling here we're

1580
01:16:01,510 --> 01:16:04,090
probably going to want to start calling

1581
01:16:02,649 --> 01:16:06,609
things like science and cosines

1582
01:16:04,090 --> 01:16:07,869
potentially because we're probably going

1583
01:16:06,609 --> 01:16:10,449
to want to do some things with our

1584
01:16:07,869 --> 01:16:12,880
sampling that involve producing more

1585
01:16:10,449 --> 01:16:14,590
regular patterns and things like sine

1586
01:16:12,880 --> 01:16:15,909
and cosine may be necessary to do that

1587
01:16:14,590 --> 01:16:20,319
because like one of the ways we could

1588
01:16:15,909 --> 01:16:23,439
produce a fairly regular pattern would

1589
01:16:20,319 --> 01:16:31,299
be to have a hemisphere that we generate

1590
01:16:23,439 --> 01:16:33,489
and use you know that we rotate

1591
01:16:31,300 --> 01:16:36,400
potentially which would require a sine

1592
01:16:33,489 --> 01:16:37,269
and cosine at the head end or who knows

1593
01:16:36,399 --> 01:16:39,699
what right

1594
01:16:37,270 --> 01:16:43,050
so it's hard to say we don't know

1595
01:16:39,699 --> 01:16:45,159
exactly what we're gonna do here but as

1596
01:16:43,050 --> 01:16:46,510
we go forwards we're getting to that

1597
01:16:45,159 --> 01:16:49,930
point where we really would like our

1598
01:16:46,510 --> 01:16:51,610
math library to be wide as necessary and

1599
01:16:49,930 --> 01:16:54,400
we want to stop using this stuff anyway

1600
01:16:51,609 --> 01:16:58,329
so that's where we're at

1601
01:16:54,399 --> 01:17:03,129
I'm gonna remove the no default Lib for

1602
01:16:58,329 --> 01:17:04,869
the moment from here like so and then

1603
01:17:03,130 --> 01:17:06,609
we're just going to go ahead and put

1604
01:17:04,869 --> 01:17:08,319
that back in once we have those

1605
01:17:06,609 --> 01:17:10,630
functions because we're basically

1606
01:17:08,319 --> 01:17:13,119
library free at this point all we need

1607
01:17:10,630 --> 01:17:15,659
to do is just that one little bit and

1608
01:17:13,119 --> 01:17:15,659
we'll be good to go

1609
01:17:18,550 --> 01:17:26,149
all right so that's all good and it

1610
01:17:24,979 --> 01:17:27,829
feels nice to kind of clean all that

1611
01:17:26,149 --> 01:17:29,329
stuff out and so hopefully we can finish

1612
01:17:27,828 --> 01:17:32,558
those up maybe next weekend or do

1613
01:17:29,328 --> 01:17:36,708
something like that relatively soon

1614
01:17:32,559 --> 01:17:38,239
until then I just want to go here and

1615
01:17:36,708 --> 01:17:40,099
play around with the Letty sampling a

1616
01:17:38,238 --> 01:17:43,398
little bit so we've got our sample

1617
01:17:40,099 --> 01:17:44,538
hemisphere function oh well actually

1618
01:17:43,399 --> 01:17:49,459
it's not a function anymore it's just

1619
01:17:44,538 --> 01:17:59,509
welded in right uh so when we compute

1620
01:17:49,458 --> 01:18:01,130
our lighting in lighting test there it

1621
01:17:59,510 --> 01:18:02,840
is

1622
01:18:01,130 --> 01:18:05,239
so when we do compute light propagation

1623
01:18:02,840 --> 01:18:07,630
right in here we set up the work

1624
01:18:05,238 --> 01:18:10,488
functions they get called into this

1625
01:18:07,630 --> 01:18:14,418
function that's multi-threaded and in

1626
01:18:10,488 --> 01:18:17,089
here we create samples for our rays that

1627
01:18:14,418 --> 01:18:19,849
are generated here right so you can see

1628
01:18:17,090 --> 01:18:21,939
us creating random bilaterals and random

1629
01:18:19,849 --> 01:18:25,309
deltas off those bilaterals for our rays

1630
01:18:21,939 --> 01:18:27,499
I and what we want to do is we want to

1631
01:18:25,309 --> 01:18:28,820
sort of work on this sampling pattern a

1632
01:18:27,498 --> 01:18:30,288
little bit now what we did to start

1633
01:18:28,819 --> 01:18:33,228
working on the sampling pattern and if

1634
01:18:30,288 --> 01:18:34,819
you remember is we just need a little

1635
01:18:33,229 --> 01:18:38,059
piece of test code that actually draws

1636
01:18:34,819 --> 01:18:40,488
some sampling right and you can see that

1637
01:18:38,059 --> 01:18:43,610
here doing it's doing it's a little

1638
01:18:40,488 --> 01:18:44,779
dance we're not using this yet this is

1639
01:18:43,609 --> 01:18:47,389
not this salmon patty it's not going to

1640
01:18:44,779 --> 01:18:48,738
use it's just getting drawn and so we

1641
01:18:47,389 --> 01:18:50,059
want to do here is we want to play

1642
01:18:48,738 --> 01:18:51,529
around with this a little bit and get

1643
01:18:50,059 --> 01:18:58,090
this to look like what we want it to

1644
01:18:51,529 --> 01:19:01,368
look like right so pause for a moment

1645
01:18:58,090 --> 01:19:03,679
let's go ahead and not look at that

1646
01:19:01,368 --> 01:19:06,380
quite yet and instead look at the thing

1647
01:19:03,679 --> 01:19:07,578
that generates these Hemisphere sample

1648
01:19:06,380 --> 01:19:09,760
points which I believe is down here

1649
01:19:07,578 --> 01:19:09,759
somewhere

1650
01:19:16,060 --> 01:19:27,110
right there so this is the thing that's

1651
01:19:23,000 --> 01:19:28,550
currently generating them and you know

1652
01:19:27,109 --> 01:19:30,920
we've got a bunch of cruft in here we

1653
01:19:28,550 --> 01:19:32,750
can actually remove as well because we

1654
01:19:30,920 --> 01:19:34,250
don't care about it like for example the

1655
01:19:32,750 --> 01:19:35,569
entropy counter we were using we're

1656
01:19:34,250 --> 01:19:37,250
playing around that stuff we we're

1657
01:19:35,569 --> 01:19:41,119
replacing the sampling now so we can

1658
01:19:37,250 --> 01:19:44,020
like we can basically ditch all this as

1659
01:19:41,119 --> 01:19:46,489
we go so I'll you know I'll do that

1660
01:19:44,020 --> 01:19:48,440
first so you can see here we do this

1661
01:19:46,489 --> 01:19:50,630
random series we don't really care about

1662
01:19:48,439 --> 01:19:53,449
that anymore the random series that's

1663
01:19:50,630 --> 01:19:54,800
getting passed in here we could just see

1664
01:19:53,449 --> 01:19:58,489
it at once at the beginning if we want

1665
01:19:54,800 --> 01:20:02,119
to because we're not using stables we're

1666
01:19:58,489 --> 01:20:04,489
not going to use stable sampling anymore

1667
01:20:02,119 --> 01:20:06,019
we're still gonna use randomness so we

1668
01:20:04,489 --> 01:20:08,899
don't really care about this we can put

1669
01:20:06,020 --> 01:20:13,280
this out here we can also just use the

1670
01:20:08,899 --> 01:20:15,409
entropy from the actual entropy solution

1671
01:20:13,279 --> 01:20:21,800
itself I don't remember what this is

1672
01:20:15,409 --> 01:20:22,849
called just called series like so and

1673
01:20:21,800 --> 01:20:24,230
then we can do the same thing we're

1674
01:20:22,850 --> 01:20:28,850
doing before where we just place it back

1675
01:20:24,229 --> 01:20:33,319
bit later so this just returned just to

1676
01:20:28,850 --> 01:20:34,370
pure randomness in our samples and just

1677
01:20:33,319 --> 01:20:35,929
gets rid of this stuff because we're

1678
01:20:34,369 --> 01:20:37,300
gonna replace it in a second so we don't

1679
01:20:35,930 --> 01:20:40,220
really need it hanging around in there

1680
01:20:37,300 --> 01:20:46,279
right

1681
01:20:40,220 --> 01:20:48,520
and the frame counter can go I don't

1682
01:20:46,279 --> 01:20:48,519
remember

1683
01:20:51,448 --> 01:21:04,169
oh you know what that brings up one more

1684
01:20:58,560 --> 01:21:08,150
thing hold on one second one thing

1685
01:21:04,170 --> 01:21:14,310
you'll notice we're running the game and

1686
01:21:08,149 --> 01:21:16,198
if you remember we replaced that we did

1687
01:21:14,310 --> 01:21:18,179
the we replaced the C runtime library

1688
01:21:16,198 --> 01:21:21,439
startup with our startup so I hid all

1689
01:21:18,179 --> 01:21:24,149
that for here the app is still running

1690
01:21:21,439 --> 01:21:27,329
right why is the app still running we

1691
01:21:24,149 --> 01:21:30,029
hit alt f4 well the reason the app is

1692
01:21:27,329 --> 01:21:32,279
still running is because actually the C

1693
01:21:30,029 --> 01:21:36,329
runtime library used to call exit

1694
01:21:32,279 --> 01:21:38,309
process to actually close our process we

1695
01:21:36,329 --> 01:21:40,319
aren't calling math which means that our

1696
01:21:38,310 --> 01:21:42,000
app will just stay running forever in

1697
01:21:40,319 --> 01:21:45,299
the background no one will know it'll be

1698
01:21:42,000 --> 01:21:48,238
hidden and tiny but it'll still be there

1699
01:21:45,300 --> 01:21:52,500
so what actually has to happen is inside

1700
01:21:48,238 --> 01:21:54,089
the win32 entry point now because the C

1701
01:21:52,500 --> 01:21:55,800
runtime library isn't calling exit

1702
01:21:54,090 --> 01:22:01,619
process for us we have to call exit

1703
01:21:55,800 --> 01:22:04,829
process that's pretty simple right

1704
01:22:01,619 --> 01:22:06,539
not very difficult it's gonna tell us

1705
01:22:04,829 --> 01:22:09,840
this return zero is unreachable code

1706
01:22:06,539 --> 01:22:13,198
it's right but you know I don't really

1707
01:22:09,840 --> 01:22:16,050
know why it does that because the

1708
01:22:13,198 --> 01:22:17,698
function has to return a value so I

1709
01:22:16,050 --> 01:22:25,289
don't know that's kind of weird but it

1710
01:22:17,698 --> 01:22:26,819
does that but yeah I don't know what to

1711
01:22:25,289 --> 01:22:32,340
say about that it's a pretty unhelpful

1712
01:22:26,819 --> 01:22:36,149
error message so anyway in here now when

1713
01:22:32,340 --> 01:22:38,460
I run my actual program and I hit alt f4

1714
01:22:36,149 --> 01:22:40,500
it will exit out now I want to check

1715
01:22:38,460 --> 01:22:42,060
really quickly that if we are in debug

1716
01:22:40,500 --> 01:22:46,229
mode it still realizes that that's

1717
01:22:42,060 --> 01:22:49,080
unreachable code and we'll see oh you

1718
01:22:46,229 --> 01:22:52,259
can see here actually so in debug mode

1719
01:22:49,079 --> 01:22:55,979
we have seal F and floor F are actually

1720
01:22:52,260 --> 01:23:00,659
called as well and the reason that you

1721
01:22:55,979 --> 01:23:03,539
don't see those I guess in the optimized

1722
01:23:00,659 --> 01:23:04,929
version is because it's actually put the

1723
01:23:03,539 --> 01:23:06,850
intrinsics in

1724
01:23:04,929 --> 01:23:09,819
so for them so that they don't actually

1725
01:23:06,850 --> 01:23:13,179
call out so I think probably if I did

1726
01:23:09,819 --> 01:23:18,488
that we might be able to get it around

1727
01:23:13,179 --> 01:23:21,340
that I'm not sure looks like not so

1728
01:23:18,488 --> 01:23:22,779
that's another reason that we want to

1729
01:23:21,340 --> 01:23:26,110
replace those with our own calls because

1730
01:23:22,779 --> 01:23:28,750
it looks like actually CLF and Fleur F

1731
01:23:26,109 --> 01:23:30,519
will want to do our own versions of so

1732
01:23:28,750 --> 01:23:32,229
that we can compile in debug mode now

1733
01:23:30,520 --> 01:23:35,790
I'm not sure exactly where those are

1734
01:23:32,229 --> 01:23:35,789
getting called in the win32 lair

1735
01:23:47,359 --> 01:23:56,719
it's in handmade render which is just in

1736
01:23:51,109 --> 01:23:58,969
our rectangle drawing routine right so

1737
01:23:56,719 --> 01:24:02,658
actually those you know we could replace

1738
01:23:58,969 --> 01:24:04,039
those pretty trivially and maybe we

1739
01:24:02,658 --> 01:24:06,078
should but you know maybe we should

1740
01:24:04,039 --> 01:24:07,760
leave them for you know it's a coelom

1741
01:24:06,078 --> 01:24:10,340
floor you can basically use with convert

1742
01:24:07,760 --> 01:24:12,770
PS and various other things you can do

1743
01:24:10,340 --> 01:24:14,900
in there that aren't too tricky so but

1744
01:24:12,770 --> 01:24:19,730
we won't go down that rathole now I'll

1745
01:24:14,899 --> 01:24:21,109
just continue to build with o2 although

1746
01:24:19,729 --> 01:24:29,419
the other thing I suppose we could do is

1747
01:24:21,109 --> 01:24:32,109
in handmade intrinsics I'm just not sure

1748
01:24:29,420 --> 01:24:32,109
if you could do this

1749
01:24:48,369 --> 01:25:03,260
like to force it to use it but it

1750
01:24:52,609 --> 01:25:10,670
doesn't look that way it looks like it

1751
01:25:03,260 --> 01:25:13,369
doesn't want to which is unfortunate

1752
01:25:10,670 --> 01:25:15,139
because I would like to for now be able

1753
01:25:13,369 --> 01:25:22,488
to compound diamond and force it to do

1754
01:25:15,139 --> 01:25:25,909
that oh well it's alright we'll replace

1755
01:25:22,488 --> 01:25:38,959
it soon enough so we need and I can

1756
01:25:25,908 --> 01:25:41,960
write this down these are the five

1757
01:25:38,960 --> 01:25:43,399
functions that we actually need so

1758
01:25:41,960 --> 01:25:44,980
that's what we will have to replace in

1759
01:25:43,399 --> 01:25:47,238
order to run completely library free

1760
01:25:44,979 --> 01:25:48,559
technically CLF and floor f we don't

1761
01:25:47,238 --> 01:25:50,089
really need to replace because compiler

1762
01:25:48,560 --> 01:25:53,210
can replace them it just in debug mode

1763
01:25:50,090 --> 01:25:55,310
it doesn't necessarily do it so there is

1764
01:25:53,210 --> 01:25:56,810
that but they're so simple we might as

1765
01:25:55,310 --> 01:25:58,969
well just replace them because why not

1766
01:25:56,810 --> 01:26:01,730
and plus we might want them to be for

1767
01:25:58,969 --> 01:26:03,260
wide at some point and that way if we

1768
01:26:01,729 --> 01:26:06,979
have our own versions they would be for

1769
01:26:03,260 --> 01:26:08,630
wide so that we can get Cindy support in

1770
01:26:06,979 --> 01:26:13,279
there which I think would be worth it

1771
01:26:08,630 --> 01:26:16,119
right so I think that's good what is

1772
01:26:13,279 --> 01:26:16,119
this company about

1773
01:26:24,880 --> 01:26:28,529
how did we get a crash here

1774
01:26:42,020 --> 01:26:51,590
access violation reading location tell

1775
01:26:49,229 --> 01:26:51,589
me more

1776
01:26:57,369 --> 01:27:01,399
is there a reason it's not showing me

1777
01:26:59,840 --> 01:27:06,980
that there we go I'm like I just want to

1778
01:27:01,399 --> 01:27:17,659
see the instruction pointer please so

1779
01:27:06,979 --> 01:27:19,819
it's it's looking too so this is

1780
01:27:17,659 --> 01:27:22,909
misleading right this is just because

1781
01:27:19,819 --> 01:27:24,920
it's in release mode it's telling us

1782
01:27:22,909 --> 01:27:30,409
it's on this line but it's not really on

1783
01:27:24,920 --> 01:27:34,460
this line because this is a mob that

1784
01:27:30,409 --> 01:27:37,210
looks like it's doing something more

1785
01:27:34,460 --> 01:27:37,210
substantial

1786
01:27:41,219 --> 01:27:47,920
I'm assuming this is talking about the

1787
01:27:45,179 --> 01:27:49,449
well you know maybe it's loading the one

1788
01:27:47,920 --> 01:27:51,809
I'm not sure what exactly this is

1789
01:27:49,448 --> 01:27:51,808
loading

1790
01:27:56,059 --> 01:27:59,050
let's find out

1791
01:28:04,970 --> 01:28:19,380
so of course it's so frustrating to try

1792
01:28:17,520 --> 01:28:21,390
and use this debugger in release mode it

1793
01:28:19,380 --> 01:28:31,050
doesn't know any of the things that it

1794
01:28:21,390 --> 01:28:33,119
itself did so you can't ask it anything

1795
01:28:31,050 --> 01:28:36,000
that you might want to know like hey

1796
01:28:33,119 --> 01:28:38,099
what might have been here like what did

1797
01:28:36,000 --> 01:28:40,770
you put on the stack or what did you put

1798
01:28:38,100 --> 01:28:44,340
in these off this base address or

1799
01:28:40,770 --> 01:28:46,950
anything it's it just never wants to

1800
01:28:44,340 --> 01:28:50,220
tell you any hints cuz I think it just

1801
01:28:46,949 --> 01:28:53,550
loses all the information when it

1802
01:28:50,220 --> 01:28:54,810
creates the PDB for some reason so it

1803
01:28:53,550 --> 01:28:57,869
wouldn't be that hard to like track

1804
01:28:54,810 --> 01:29:00,420
through here it would just create a lot

1805
01:28:57,869 --> 01:29:02,460
of datum the PDB but I want you to do

1806
01:29:00,420 --> 01:29:04,500
that like I I don't care harddrive space

1807
01:29:02,460 --> 01:29:15,779
is not expensive give me all of the

1808
01:29:04,500 --> 01:29:16,750
information please so in here I can't

1809
01:29:15,779 --> 01:29:19,840
say I see

1810
01:29:16,750 --> 01:29:19,840
[Music]

1811
01:29:29,579 --> 01:29:35,059
I do want to see what's the next mmm

1812
01:29:37,489 --> 01:29:50,909
so it looks like to me that this is

1813
01:29:48,810 --> 01:29:54,539
actually a divided by zero that's just

1814
01:29:50,909 --> 01:29:56,699
not getting masked my guess is that we

1815
01:29:54,539 --> 01:30:02,220
need to set up the Cindi unit to not

1816
01:29:56,699 --> 01:30:06,899
fault on divide by zero however what I

1817
01:30:02,220 --> 01:30:13,940
don't understand is how its managing to

1818
01:30:06,899 --> 01:30:13,939
produce a value that looks like that

1819
01:30:20,119 --> 01:30:27,599
because 1 over 1 plus distance squared 1

1820
01:30:25,949 --> 01:30:30,359
plus distance squared the distance

1821
01:30:27,600 --> 01:30:35,039
squared would have to be negative in

1822
01:30:30,359 --> 01:30:38,279
order for that to create a zero right so

1823
01:30:35,039 --> 01:30:40,670
I don't really understand how that's

1824
01:30:38,279 --> 01:30:40,670
possible

1825
01:30:52,710 --> 01:30:59,909
oh this is scalar code what am I

1826
01:30:57,479 --> 01:31:01,799
thinking so this is not never mind this

1827
01:30:59,909 --> 01:31:04,439
is not divided by zero you can see it's

1828
01:31:01,800 --> 01:31:06,270
a div SS so it's not actually going to

1829
01:31:04,439 --> 01:31:10,129
do these lanes nevermind

1830
01:31:06,270 --> 01:31:15,870
we're good so it really is this mob

1831
01:31:10,130 --> 01:31:18,750
somehow this mob we were like returning

1832
01:31:15,869 --> 01:31:27,329
an invalid thing to iterate over in our

1833
01:31:18,750 --> 01:31:35,689
lighting boxes I guess I try to hit that

1834
01:31:27,329 --> 01:31:35,689
again there we go so somehow

1835
01:31:52,560 --> 01:32:03,420
ah I wonder how many people on the shot

1836
01:32:02,100 --> 01:32:09,300
figured this out already the sharp

1837
01:32:03,420 --> 01:32:14,000
people probably did probably one step

1838
01:32:09,300 --> 01:32:17,539
ahead of me I'll give you a second I

1839
01:32:14,000 --> 01:32:17,539
wish I had more coffee

1840
01:32:30,800 --> 01:32:37,619
we forgot one thing this is not really

1841
01:32:36,210 --> 01:32:45,390
an alloy of shame because this is pretty

1842
01:32:37,619 --> 01:32:47,519
tricky so if you remember in order to

1843
01:32:45,390 --> 01:32:49,829
get rid of the C runtime library I said

1844
01:32:47,520 --> 01:32:51,060
oh well we're gonna have to change the

1845
01:32:49,829 --> 01:32:53,789
stack thing is cuz you don't want to use

1846
01:32:51,060 --> 01:33:00,620
the stack check probe blah blah blah

1847
01:32:53,789 --> 01:33:07,500
right well one sort of caveat to this is

1848
01:33:00,619 --> 01:33:10,170
that the stack right is specified on our

1849
01:33:07,500 --> 01:33:15,180
build line here right this is where we

1850
01:33:10,170 --> 01:33:18,890
did that that tells the Windows loader

1851
01:33:15,180 --> 01:33:21,990
that our initial thread gets that much

1852
01:33:18,890 --> 01:33:24,480
it doesn't tell the Windows loader

1853
01:33:21,989 --> 01:33:27,149
anything about subsequent threads

1854
01:33:24,479 --> 01:33:29,159
because subsequent threads don't go

1855
01:33:27,149 --> 01:33:34,009
through the windows loader they go

1856
01:33:29,159 --> 01:33:38,010
through us calling kernel32 directly so

1857
01:33:34,010 --> 01:33:40,949
what's actually happening here is when

1858
01:33:38,010 --> 01:33:43,320
we get to a point where it's just a

1859
01:33:40,949 --> 01:33:49,920
little more than 4k of stack space needs

1860
01:33:43,319 --> 01:33:52,609
to get used we trigger it again I can of

1861
01:33:49,920 --> 01:33:52,609
course now I can't

1862
01:33:58,639 --> 01:34:06,109
well I'm trying to but I can't seem to

1863
01:34:03,229 --> 01:34:07,638
trigger it anyway when we get to a point

1864
01:34:06,109 --> 01:34:08,750
where more than four K of stack space

1865
01:34:07,639 --> 01:34:12,020
needs to be used by the lighting

1866
01:34:08,750 --> 01:34:14,479
functions we were overflowing the stack

1867
01:34:12,020 --> 01:34:17,060
is what was happening now why was that

1868
01:34:14,479 --> 01:34:22,309
happening it's happening because inside

1869
01:34:17,060 --> 01:34:25,580
win32 inside the win32 handmade calls we

1870
01:34:22,310 --> 01:34:27,860
create our worker threads right and here

1871
01:34:25,579 --> 01:34:29,420
in our worker threads you can see that's

1872
01:34:27,859 --> 01:34:32,000
the only place we do it right that's

1873
01:34:29,420 --> 01:34:39,829
that's the entirety of it let me jump

1874
01:34:32,000 --> 01:34:41,479
into it in here this is the place where

1875
01:34:39,829 --> 01:34:43,368
the rest of our threads will have their

1876
01:34:41,479 --> 01:34:46,368
stacks set up inside the create thread

1877
01:34:43,368 --> 01:34:49,039
call inside win32 and one of the things

1878
01:34:46,368 --> 01:34:51,500
that you have to look at is inside this

1879
01:34:49,039 --> 01:34:53,710
create thread call there's some stuff

1880
01:34:51,500 --> 01:34:56,510
happening that suddenly becomes relevant

1881
01:34:53,710 --> 01:34:59,569
when you are managing your own stack

1882
01:34:56,510 --> 01:35:06,440
like we are no results for create thread

1883
01:34:59,569 --> 01:35:08,689
great good job guys inside the create

1884
01:35:06,439 --> 01:35:12,138
thread function you can see there's a

1885
01:35:08,689 --> 01:35:14,629
parameter called DW stack size and what

1886
01:35:12,139 --> 01:35:18,500
DW stack size is is the initial size of

1887
01:35:14,630 --> 01:35:21,618
stack in bytes right so we were passing

1888
01:35:18,500 --> 01:35:24,859
0 here which means that it uses the

1889
01:35:21,618 --> 01:35:27,349
default size for the executable which is

1890
01:35:24,859 --> 01:35:30,229
specified in you know who knows how it's

1891
01:35:27,350 --> 01:35:31,610
specified right but here we go the

1892
01:35:30,229 --> 01:35:32,779
default size for the reserved initially

1893
01:35:31,609 --> 01:35:34,460
communi stack memory is specified the

1894
01:35:32,779 --> 01:35:35,868
ex-people file header thread or fiber

1895
01:35:34,460 --> 01:35:37,100
creation fails for enough memory to

1896
01:35:35,868 --> 01:35:38,630
reserve or commit the number of bytes

1897
01:35:37,100 --> 01:35:40,639
for the default stack reservation size

1898
01:35:38,630 --> 01:35:42,590
used by linkers one megabyte specifies

1899
01:35:40,639 --> 01:35:44,060
the different default stack reservation

1900
01:35:42,590 --> 01:35:46,159
size fall through the fibers use the

1901
01:35:44,060 --> 01:35:47,690
stack size statement in the module

1902
01:35:46,158 --> 01:35:48,799
definition file the a persistent rounds

1903
01:35:47,689 --> 01:35:56,149
up blah-blah-blah-blah-blah

1904
01:35:48,800 --> 01:35:59,500
right so that right there is is probably

1905
01:35:56,149 --> 01:36:05,750
what we're seeing right the initially

1906
01:35:59,500 --> 01:36:08,569
committed stack size I is is probably

1907
01:36:05,750 --> 01:36:11,599
still very low so for whatever reason I

1908
01:36:08,569 --> 01:36:12,529
strongly suspect this - snack doesn't

1909
01:36:11,599 --> 01:36:14,720
alter the commit

1910
01:36:12,529 --> 01:36:16,309
sighs for the thread it probably still

1911
01:36:14,720 --> 01:36:19,039
uses it for the reserve sighs maybe I

1912
01:36:16,310 --> 01:36:20,420
don't actually know but I suspect that's

1913
01:36:19,039 --> 01:36:24,710
exactly what's happening to us

1914
01:36:20,420 --> 01:36:27,409
right so in here in our crea thread we

1915
01:36:24,710 --> 01:36:31,819
probably want to pass an actual megabyte

1916
01:36:27,409 --> 01:36:37,939
value here so that we have plenty of

1917
01:36:31,819 --> 01:36:43,670
room right for this function do we have

1918
01:36:37,939 --> 01:36:46,069
the megabytes yeah

1919
01:36:43,670 --> 01:36:47,750
so if we pass one megabyte so that each

1920
01:36:46,069 --> 01:36:49,219
of our worker threads has a nice big

1921
01:36:47,750 --> 01:36:50,600
stack I suspect that takes care of our

1922
01:36:49,220 --> 01:36:51,680
problem unfortunately we couldn't really

1923
01:36:50,600 --> 01:36:53,450
get this problem to trigger one I

1924
01:36:51,680 --> 01:36:58,430
personally I thought it kind of was

1925
01:36:53,449 --> 01:37:02,210
triggering reliably before but hopefully

1926
01:36:58,430 --> 01:37:03,829
it won't let's see here so now what we

1927
01:37:02,210 --> 01:37:05,329
should be able to do is set that stack

1928
01:37:03,829 --> 01:37:07,519
size correctly now that I can get it to

1929
01:37:05,329 --> 01:37:09,289
trigger I I wish I knew what I could do

1930
01:37:07,520 --> 01:37:10,850
to get this trigger loudly we can see

1931
01:37:09,289 --> 01:37:14,199
whether that was actually the problem or

1932
01:37:10,850 --> 01:37:18,370
not so let's see what it was looking to

1933
01:37:14,199 --> 01:37:18,369
to address here

1934
01:37:22,439 --> 01:37:28,179
we can also see what how big our stack

1935
01:37:25,569 --> 01:37:30,340
actually was right like how big of a

1936
01:37:28,180 --> 01:37:34,350
stack we actually would need like I

1937
01:37:30,340 --> 01:37:39,430
don't know what we create in terms of

1938
01:37:34,350 --> 01:37:42,150
stack reservation for compute light

1939
01:37:39,430 --> 01:37:42,150
propagation

1940
01:37:52,689 --> 01:38:01,219
over time so I don't know what we might

1941
01:37:59,029 --> 01:38:02,779
need in terms of stack space here it

1942
01:38:01,220 --> 01:38:04,789
doesn't seem like we would actually need

1943
01:38:02,779 --> 01:38:07,239
that much so it could be that I'm wrong

1944
01:38:04,789 --> 01:38:07,239
about it

1945
01:38:17,739 --> 01:38:22,579
because it's only gonna enter into here

1946
01:38:20,210 --> 01:38:25,430
let me double check that here's our

1947
01:38:22,579 --> 01:38:26,809
thread proc this won't require much

1948
01:38:25,430 --> 01:38:31,460
stack right it's not doing anything

1949
01:38:26,810 --> 01:38:34,190
fancy there this one doesn't either

1950
01:38:31,460 --> 01:38:39,319
right there's nothing weird on the stack

1951
01:38:34,189 --> 01:38:40,639
here I don't know how much that would

1952
01:38:39,319 --> 01:38:47,779
necessarily put on the stack but

1953
01:38:40,640 --> 01:38:49,670
probably not very much there's a fair

1954
01:38:47,779 --> 01:38:52,179
bit of stack space getting taken up here

1955
01:38:49,670 --> 01:38:55,730
but a megabyte it's just not very likely

1956
01:38:52,180 --> 01:38:57,920
so I may be wrong about this one because

1957
01:38:55,729 --> 01:38:59,479
if we have a megabyte of stack reserved

1958
01:38:57,920 --> 01:39:02,510
it should not cause a problem I don't

1959
01:38:59,479 --> 01:39:04,909
think but I guess we'll find out all

1960
01:39:02,510 --> 01:39:06,880
right so let's take a look at the actual

1961
01:39:04,909 --> 01:39:19,010
code here and try to suss out what the

1962
01:39:06,880 --> 01:39:20,420
problem is there we go so let's start by

1963
01:39:19,010 --> 01:39:25,489
taking a look at some of our registers

1964
01:39:20,420 --> 01:39:26,989
here I don't know why I think we just

1965
01:39:25,489 --> 01:39:28,159
maybe haven't looked at the register

1966
01:39:26,989 --> 01:39:36,679
windows in a while because they're not

1967
01:39:28,159 --> 01:39:42,529
up oh don't don't do that

1968
01:39:36,680 --> 01:39:47,200
there we go let me just go ahead and put

1969
01:39:42,529 --> 01:39:47,199
these guys in here see

1970
01:39:50,469 --> 01:40:01,578
that looks like everything we need for

1971
01:39:54,078 --> 01:40:04,929
now well that's cool all right so if we

1972
01:40:01,578 --> 01:40:09,319
take a look at what we're seeing here

1973
01:40:04,929 --> 01:40:12,019
you know we've got so you can see our SP

1974
01:40:09,319 --> 01:40:14,328
our IP is this is where we are in the

1975
01:40:12,019 --> 01:40:20,599
code right this is where we are in the

1976
01:40:14,328 --> 01:40:22,908
stack so we're using our BP to address

1977
01:40:20,599 --> 01:40:31,670
and that is a stack address for sure

1978
01:40:22,908 --> 01:40:36,368
right because let's go back to the line

1979
01:40:31,670 --> 01:40:38,599
here already X this value here is

1980
01:40:36,368 --> 01:40:40,460
presumably an offset because it's it's

1981
01:40:38,599 --> 01:40:47,230
pretty tiny right that's that's not a

1982
01:40:40,460 --> 01:40:53,359
particularly large value our BX here is

1983
01:40:47,229 --> 01:40:58,149
you know clearly a real base pointer and

1984
01:40:53,359 --> 01:41:00,738
you can see that it's basically a stack

1985
01:40:58,149 --> 01:41:04,399
aligned value right like these are this

1986
01:41:00,738 --> 01:41:06,738
is the stack and here's our B key so you

1987
01:41:04,399 --> 01:41:10,069
know you can see just by looking at them

1988
01:41:06,738 --> 01:41:11,868
that's what's going on and then this guy

1989
01:41:10,069 --> 01:41:14,479
right here is a fixed offset amount

1990
01:41:11,868 --> 01:41:19,908
which is presumably the address of some

1991
01:41:14,479 --> 01:41:23,029
you know constant we know or care about

1992
01:41:19,908 --> 01:41:26,719
there so what we don't really know here

1993
01:41:23,029 --> 01:41:28,969
is if we were to start looking do we run

1994
01:41:26,719 --> 01:41:30,769
off the stack particularly early or what

1995
01:41:28,969 --> 01:41:33,880
exactly happens here let me see if I can

1996
01:41:30,769 --> 01:41:33,880
pop this on here

1997
01:41:42,720 --> 01:41:50,630
I also don't know how this memory window

1998
01:41:44,850 --> 01:41:50,630
would display basically

1999
01:41:52,380 --> 01:41:56,239
memory that was it illegal

2000
01:42:02,590 --> 01:42:10,760
what would you say okay good so you know

2001
01:42:09,050 --> 01:42:12,590
this would be if we were gonna hit a

2002
01:42:10,760 --> 01:42:14,810
protected region so for as far as the

2003
01:42:12,590 --> 01:42:17,840
access fault is concerned we this is

2004
01:42:14,810 --> 01:42:18,950
what we should expect to see so I'm

2005
01:42:17,840 --> 01:42:21,500
gonna go ahead and take a look at this

2006
01:42:18,949 --> 01:42:23,479
region again cuz I don't really know why

2007
01:42:21,500 --> 01:42:24,949
it's looking there or what it's looking

2008
01:42:23,479 --> 01:42:27,289
for I don't have a lot of information

2009
01:42:24,949 --> 01:42:30,439
about what it's trying to get I'm gonna

2010
01:42:27,289 --> 01:42:39,319
go ahead and try to take that value and

2011
01:42:30,439 --> 01:42:41,839
just see that on stack so there we go I

2012
01:42:39,319 --> 01:42:43,369
also need a little more room here let's

2013
01:42:41,840 --> 01:42:44,719
just get a little bit bigger there in

2014
01:42:43,369 --> 01:42:46,670
fact you know what maybe we'll move

2015
01:42:44,719 --> 01:42:48,199
memory up to here so because it's my

2016
01:42:46,670 --> 01:42:51,649
head's kind of blocking part of it and I

2017
01:42:48,199 --> 01:42:56,289
might want to see so again we don't

2018
01:42:51,649 --> 01:43:00,379
really know where we're looking here or

2019
01:42:56,289 --> 01:43:02,390
you know how how we might get back to

2020
01:43:00,380 --> 01:43:05,829
civilization

2021
01:43:02,390 --> 01:43:05,829
we suspect

2022
01:43:15,930 --> 01:43:21,510
yeah we suspect that this is

2023
01:43:31,248 --> 01:43:34,458
am I

2024
01:43:36,329 --> 01:43:39,829
am I missing something here

2025
01:43:56,029 --> 01:44:02,359
oh I was looking at the wrong value I

2026
01:44:00,130 --> 01:44:11,210
was looking at our BP and I should have

2027
01:44:02,359 --> 01:44:13,309
been looking at our BX hmm so our BX is

2028
01:44:11,210 --> 01:44:18,050
not off the stack right

2029
01:44:13,310 --> 01:44:19,820
this is stack our BX is actually a real

2030
01:44:18,050 --> 01:44:22,970
pointer that probably got allocated by

2031
01:44:19,819 --> 01:44:24,859
somebody right because you can see here

2032
01:44:22,970 --> 01:44:26,869
these are this on the stack for some

2033
01:44:24,859 --> 01:44:32,509
reason I was looking at our BP not our B

2034
01:44:26,869 --> 01:44:34,220
X and so this is not off the stack this

2035
01:44:32,510 --> 01:44:36,110
is actually gonna be an address of

2036
01:44:34,220 --> 01:44:40,010
something we don't actually know what it

2037
01:44:36,109 --> 01:44:44,299
is an address of let's take a look at

2038
01:44:40,010 --> 01:44:50,329
what solution is 1 f FC 3 is 0 so it's

2039
01:44:44,300 --> 01:44:52,489
actually this it looks like that is

2040
01:44:50,329 --> 01:44:54,920
trying to access right it's trying to

2041
01:44:52,489 --> 01:45:02,059
access off of this solution points here

2042
01:44:54,920 --> 01:45:12,079
uh and so let me just take a look it's

2043
01:45:02,060 --> 01:45:14,600
using our BX as a base pointer and you

2044
01:45:12,079 --> 01:45:15,769
can see that that is the solution so

2045
01:45:14,600 --> 01:45:21,740
we're starting to piece it together here

2046
01:45:15,770 --> 01:45:25,190
this is our DX plus solution plus 18 Oh

2047
01:45:21,739 --> 01:45:26,710
20 H right that's what it's actually

2048
01:45:25,189 --> 01:45:33,979
we've got so far

2049
01:45:26,710 --> 01:45:39,369
now our DX I'm guessing is the hit point

2050
01:45:33,979 --> 01:45:43,279
index value that it's talking about here

2051
01:45:39,369 --> 01:45:45,949
probably modified to have some kind of

2052
01:45:43,279 --> 01:45:49,569
an offset baked into it I'm guessing so

2053
01:45:45,949 --> 01:45:49,569
if you look at hit point index

2054
01:45:50,350 --> 01:45:56,300
well I can't look at hit point index but

2055
01:45:54,439 --> 01:45:59,149
if we look at maybe how big a hit point

2056
01:45:56,300 --> 01:46:02,260
actually is so for example size of

2057
01:45:59,149 --> 01:46:02,259
lighting point

2058
01:46:04,880 --> 01:46:19,289
you can see that 60 see here I don't

2059
01:46:13,739 --> 01:46:31,469
know how many hit points we've got all

2060
01:46:19,289 --> 01:46:37,350
right so it's not that yeah so if each

2061
01:46:31,470 --> 01:46:39,770
one of those is size 60 the lighting

2062
01:46:37,350 --> 01:46:39,770
points

2063
01:46:53,680 --> 01:47:01,440
I can't say why RDX would be so high

2064
01:47:07,328 --> 01:47:12,198
so what we would expect to see so maybe

2065
01:47:10,219 --> 01:47:13,819
it's not this line maybe it's a

2066
01:47:12,198 --> 01:47:19,279
different line that's looking for there

2067
01:47:13,819 --> 01:47:23,208
although I mean it looks really

2068
01:47:19,279 --> 01:47:27,228
suspicious so oh x3 C is 60 right

2069
01:47:23,208 --> 01:47:29,630
there's there's oh x3 C right it's in

2070
01:47:27,229 --> 01:47:32,360
heck for whatever reason assembly

2071
01:47:29,630 --> 01:47:34,150
language code uses H suffix for hex

2072
01:47:32,359 --> 01:47:38,808
rather than Oh X it's just a language

2073
01:47:34,149 --> 01:47:40,279
convention so you can see here if doing

2074
01:47:38,809 --> 01:47:44,090
an I'm all in the RDX

2075
01:47:40,279 --> 01:47:51,198
so our CX is hit point index that's the

2076
01:47:44,090 --> 01:47:53,599
hit point index right for sure and so

2077
01:47:51,198 --> 01:47:56,299
the hit point index is way out of bounds

2078
01:47:53,599 --> 01:47:59,150
it's totally wrong right because we

2079
01:47:56,300 --> 01:48:00,469
don't have that many hit points so it

2080
01:47:59,149 --> 01:48:02,118
looks like we've got a bug where we're

2081
01:48:00,469 --> 01:48:05,658
returning hit point index here that's

2082
01:48:02,118 --> 01:48:07,929
just bogus because RDX is then becoming

2083
01:48:05,658 --> 01:48:10,938
a value that's totally wrong it's

2084
01:48:07,929 --> 01:48:16,420
producing 60 times that which is giving

2085
01:48:10,939 --> 01:48:21,739
us the offset so this line is happening

2086
01:48:16,420 --> 01:48:23,269
here this is correct that is presumably

2087
01:48:21,738 --> 01:48:27,438
the offset of the beginning of the

2088
01:48:23,269 --> 01:48:30,199
points array but this is garbage it's

2089
01:48:27,439 --> 01:48:34,909
just wrong it's correctly multiplied by

2090
01:48:30,198 --> 01:48:36,408
60 to give you the strip the stride but

2091
01:48:34,908 --> 01:48:41,478
that hit point index is almost certainly

2092
01:48:36,408 --> 01:48:44,078
garbage so if we take a look at where

2093
01:48:41,479 --> 01:48:44,079
that's coming from

2094
01:49:00,739 --> 01:49:04,489
again I'm not sure why this would

2095
01:49:02,960 --> 01:49:08,210
necessarily be something that's

2096
01:49:04,489 --> 01:49:09,500
happening strangely after the changes we

2097
01:49:08,210 --> 01:49:12,949
just made because we weren't seeing this

2098
01:49:09,500 --> 01:49:14,420
happen last time so in theory the much

2099
01:49:12,949 --> 01:49:16,159
more likely culprit would have been

2100
01:49:14,420 --> 01:49:19,159
something to do with the stack size or

2101
01:49:16,159 --> 01:49:21,079
setting up the SSE so it could be that

2102
01:49:19,159 --> 01:49:22,639
we have an SSD setup difference that

2103
01:49:21,079 --> 01:49:25,039
then creates this problem which we'll

2104
01:49:22,640 --> 01:49:30,590
find in a second but at the moment

2105
01:49:25,039 --> 01:49:34,729
anyway we do want to take a look and

2106
01:49:30,590 --> 01:49:36,560
just see here do we have some kind of

2107
01:49:34,729 --> 01:49:39,739
problem with our hit point index that's

2108
01:49:36,560 --> 01:49:41,960
causing this to occur right but anyway

2109
01:49:39,739 --> 01:49:43,909
so in here where we get the hit point

2110
01:49:41,960 --> 01:49:45,500
index what we do is we look to see

2111
01:49:43,909 --> 01:49:48,529
whether or not we had a hit on a

2112
01:49:45,500 --> 01:49:51,380
particular Lane and then the hit point

2113
01:49:48,529 --> 01:49:54,050
index is just we loop through how many

2114
01:49:51,380 --> 01:49:57,579
hit points there were for this

2115
01:49:54,050 --> 01:49:57,579
particular surface index right

2116
01:50:06,130 --> 01:50:13,369
and we you know we just use the base

2117
01:50:09,380 --> 01:50:16,940
pointer the the hit index the base hit

2118
01:50:13,369 --> 01:50:20,000
index so unless the lighting boxes

2119
01:50:16,939 --> 01:50:27,219
themselves were wrong which you know

2120
01:50:20,000 --> 01:50:29,779
maybe they are it seems a little weird I

2121
01:50:27,220 --> 01:50:33,260
guess what we could see here is let's

2122
01:50:29,779 --> 01:50:36,619
take a look if we can shouldn't quite

2123
01:50:33,260 --> 01:50:39,289
exited yet see if we can find some of

2124
01:50:36,619 --> 01:50:44,738
those other values again just using sort

2125
01:50:39,289 --> 01:50:44,738
of the laborious back tracing there

2126
01:50:54,699 --> 01:51:06,269
there we go what I'd like to do is take

2127
01:51:00,699 --> 01:51:06,269
a look at the hitbox information here

2128
01:51:13,819 --> 01:51:25,059
so here's where we are the information I

2129
01:51:17,300 --> 01:51:25,060
wanted to see was this got unrolled

2130
01:51:35,448 --> 01:51:42,538
so the information I want to see was

2131
01:51:37,769 --> 01:51:44,069
here this hitbox information I don't

2132
01:51:42,538 --> 01:51:51,738
know if I can still recover it but I

2133
01:51:44,069 --> 01:51:53,879
want to try um so if I ask for hitbox

2134
01:51:51,738 --> 01:51:55,948
unfortunately I can't get it directly I

2135
01:51:53,878 --> 01:51:58,588
don't know why it jumped back down there

2136
01:51:55,948 --> 01:51:59,578
thanks that not like I wanted to yeah

2137
01:51:58,588 --> 01:52:01,469
fantastic

2138
01:51:59,578 --> 01:52:02,938
so apparently every time I type into the

2139
01:52:01,469 --> 01:52:05,399
watch window it'll jump back down there

2140
01:52:02,939 --> 01:52:08,699
so I want to know if we can get this

2141
01:52:05,399 --> 01:52:10,050
information out I don't know if that's

2142
01:52:08,698 --> 01:52:12,898
reasonable to do because you can see

2143
01:52:10,050 --> 01:52:15,869
when it pulls out the hitbox here it

2144
01:52:12,899 --> 01:52:20,519
goes into ECX but then we overwrite ECX

2145
01:52:15,868 --> 01:52:24,538
without having saved it so you can see

2146
01:52:20,519 --> 01:52:27,539
right here we kind of romp over it with

2147
01:52:24,538 --> 01:52:31,559
other information probably because the

2148
01:52:27,538 --> 01:52:34,438
hitbox doesn't really need to be used

2149
01:52:31,559 --> 01:52:39,059
after that I guess it just uses offsets

2150
01:52:34,439 --> 01:52:43,469
into it like the light index which is

2151
01:52:39,059 --> 01:52:45,748
probably fine so you can see here this

2152
01:52:43,469 --> 01:52:49,198
is trying to load out I think those base

2153
01:52:45,748 --> 01:52:51,448
values I don't know if they persist they

2154
01:52:49,198 --> 01:52:54,029
might so we could take a look here and

2155
01:52:51,448 --> 01:53:02,248
see what these are let's let's see if we

2156
01:52:54,029 --> 01:53:05,759
can get some of those values why does it

2157
01:53:02,248 --> 01:53:08,818
do that why would it ever think I wanted

2158
01:53:05,760 --> 01:53:11,280
to jump back to the current line that

2159
01:53:08,819 --> 01:53:13,760
doesn't make any sense I'm trying to

2160
01:53:11,279 --> 01:53:13,759
read something here

2161
01:53:18,289 --> 01:53:29,750
so possibly that's you know the value

2162
01:53:25,739 --> 01:53:34,769
there I want to look at our attendee

2163
01:53:29,750 --> 01:53:36,090
comp against for oh it's because this is

2164
01:53:34,770 --> 01:53:42,320
probably an unrolled loop so let's take

2165
01:53:36,090 --> 01:53:46,460
a look at our ten D as well is that

2166
01:53:42,319 --> 01:53:46,460
actually still current

2167
01:53:57,949 --> 01:54:02,500
hard to say they're just a lot of code

2168
01:53:59,899 --> 01:54:02,500
unrolled here

2169
01:54:10,869 --> 01:54:20,939
so yeah not really so

2170
01:54:26,930 --> 01:54:28,990
you

2171
01:54:29,649 --> 01:54:32,250
oops

2172
01:54:40,760 --> 01:54:48,989
so I wonder if we can figure out what

2173
01:54:43,529 --> 01:54:51,479
box surface index was as well so it

2174
01:54:48,989 --> 01:54:54,079
looks like it came through in our CX

2175
01:54:51,479 --> 01:54:54,079
originally

2176
01:55:02,588 --> 01:55:09,010
I wonder if there's any way to cover

2177
01:55:07,569 --> 01:55:10,419
that ah here we go

2178
01:55:09,010 --> 01:55:18,819
so this will help us quite a bit

2179
01:55:10,418 --> 01:55:19,658
potentially this is not this is not

2180
01:55:18,819 --> 01:55:23,530
really it

2181
01:55:19,658 --> 01:55:35,078
I don't think though this may be this

2182
01:55:23,529 --> 01:55:39,579
may be some fake news find out well box

2183
01:55:35,078 --> 01:55:42,630
index looks valid enough so that's good

2184
01:55:39,579 --> 01:55:42,630
[Music]

2185
01:55:44,819 --> 01:56:02,559
so box surface index here is 0 6 4 2 now

2186
01:55:51,988 --> 01:56:05,408
6 is not a valid box index right so if

2187
01:56:02,559 --> 01:56:09,010
we look here at what hit it says

2188
01:56:05,408 --> 01:56:12,279
everybody hit it says these are the Box

2189
01:56:09,010 --> 01:56:14,409
indices and those are reasonable box

2190
01:56:12,279 --> 01:56:18,338
indices so this if this was if this is

2191
01:56:14,408 --> 01:56:21,549
actually correctly the values which

2192
01:56:18,338 --> 01:56:23,679
again we don't know if it is right we're

2193
01:56:21,550 --> 01:56:26,979
just guessing here these would all be

2194
01:56:23,679 --> 01:56:29,529
reasonable Rea distances you know that

2195
01:56:26,979 --> 01:56:31,989
could be these would all be reasonable

2196
01:56:29,529 --> 01:56:35,738
box indices two of the Rays hit box 333

2197
01:56:31,988 --> 01:56:37,868
and two of them hit box 321 these are

2198
01:56:35,738 --> 01:56:45,848
all reasonable hit masks which are all

2199
01:56:37,868 --> 01:56:48,308
ones right basically uh but that that is

2200
01:56:45,849 --> 01:56:54,010
not a reasonable box index a box index

2201
01:56:48,309 --> 01:56:58,719
of six the boxes should be 0 1 2 3 4 5 6

2202
01:56:54,010 --> 01:57:02,649
is totally not ok because 6 a box index

2203
01:56:58,719 --> 01:57:04,149
of 6 is off the end of the array now we

2204
01:57:02,649 --> 01:57:05,859
have one off the end of the array but

2205
01:57:04,149 --> 01:57:10,539
it's used as a cap so if this will look

2206
01:57:05,859 --> 01:57:11,530
at 6 &amp; 7 7 is not in the array 6 is okay

2207
01:57:10,538 --> 01:57:14,438
just let's look at five or six at

2208
01:57:11,529 --> 01:57:15,969
maximum so do we have a bug back here in

2209
01:57:14,439 --> 01:57:16,300
our raycast that we just didn't know

2210
01:57:15,969 --> 01:57:18,369
about

2211
01:57:16,300 --> 01:57:21,039
somehow we uncovered by doing our stock

2212
01:57:18,369 --> 01:57:23,349
changes there do we somehow have a bug

2213
01:57:21,039 --> 01:57:33,310
where this is producing the box surface

2214
01:57:23,350 --> 01:57:35,050
index incorrectly and I don't know so

2215
01:57:33,310 --> 01:57:39,430
here's some code where we produced the

2216
01:57:35,050 --> 01:57:41,970
Box surface index the question is is

2217
01:57:39,430 --> 01:57:48,190
there a way for this code to produce a

2218
01:57:41,970 --> 01:57:50,880
value of six so axis index that moves

2219
01:57:48,189 --> 01:57:50,879
can be too

2220
01:57:58,550 --> 01:58:06,659
yeah this is totally busted what did we

2221
01:58:02,220 --> 01:58:09,050
do here did we did we accidentally flip

2222
01:58:06,659 --> 01:58:09,050
these two

2223
01:58:15,289 --> 01:58:24,279
I feel like we may have accidentally

2224
01:58:17,869 --> 01:58:24,279
flipped those two do you think

2225
01:58:28,720 --> 01:58:32,740
maybe that's not actually true maybe our

2226
01:58:30,760 --> 01:58:37,440
bucks surface indices are like weirder

2227
01:58:32,739 --> 01:58:40,329
than this right let's take a look

2228
01:58:37,439 --> 01:58:44,199
because that would just be a straight-up

2229
01:58:40,329 --> 01:58:49,979
bug that we just didn't know we had so

2230
01:58:44,199 --> 01:59:03,059
if I go ahead and look at get box

2231
01:58:49,979 --> 01:59:03,059
surface so this code right here I mean

2232
01:59:03,119 --> 01:59:11,289
it's I mean you can see right the way

2233
01:59:06,399 --> 01:59:14,009
we're doing it is a little weird but no

2234
01:59:11,289 --> 01:59:19,180
I guess that is that is correct

2235
01:59:14,010 --> 01:59:21,100
that's how we're doing it so the access

2236
01:59:19,180 --> 01:59:25,409
index just gets shifted up one and then

2237
01:59:21,100 --> 01:59:25,410
or we are in the positive all right

2238
01:59:35,010 --> 01:59:45,460
so back to the question in hand though

2239
01:59:37,119 --> 01:59:48,239
so if access index if access index is

2240
01:59:45,460 --> 01:59:48,239
just shifted up

2241
01:59:56,029 --> 02:00:00,859
by one then effectively what we're doing

2242
01:59:59,359 --> 02:00:03,349
is we're just multiplying that value by

2243
02:00:00,859 --> 02:00:04,699
two so if give me zero one or two then

2244
02:00:03,350 --> 02:00:08,270
the maximum value that should be able to

2245
02:00:04,699 --> 02:00:10,389
have is four if we were in positive then

2246
02:00:08,270 --> 02:00:13,220
the maximum it should be able to have is

2247
02:00:10,390 --> 02:00:17,440
five because positive is either one or

2248
02:00:13,220 --> 02:00:21,550
zero right now maybe we're

2249
02:00:17,439 --> 02:00:21,549
misunderstanding how that code will work

2250
02:00:21,789 --> 02:00:26,000
[Music]

2251
02:00:23,529 --> 02:00:29,569
maybe the less than zero is somehow

2252
02:00:26,000 --> 02:00:33,229
producing something other than that and

2253
02:00:29,569 --> 02:00:38,179
I'm not sure so I'm just curious assert

2254
02:00:33,229 --> 02:00:46,369
positive equals zero or positive equals

2255
02:00:38,180 --> 02:00:50,480
1 and then maybe assert this is less

2256
02:00:46,369 --> 02:00:52,550
than six let's just see if we can fire

2257
02:00:50,479 --> 02:00:53,629
either these two asserts because I don't

2258
02:00:52,550 --> 02:01:02,239
know how else we're getting what we're

2259
02:00:53,630 --> 02:01:05,449
getting without it if that Ray return

2260
02:01:02,239 --> 02:01:08,449
value was to be believed somehow a six

2261
02:01:05,449 --> 02:01:09,399
got shoved in there right we don't know

2262
02:01:08,449 --> 02:01:17,510
how but it did

2263
02:01:09,399 --> 02:01:18,829
now unfortunately as before we don't

2264
02:01:17,510 --> 02:01:21,909
have a hundred cent reliable way to

2265
02:01:18,829 --> 02:01:21,909
trigger this unfortunately

2266
02:01:44,309 --> 02:01:51,599
I will say this is awfully suspicious I

2267
02:01:48,889 --> 02:01:53,038
don't love the fact that I seem to not

2268
02:01:51,599 --> 02:02:01,010
be able to trigger it once I put the

2269
02:01:53,038 --> 02:02:01,009
asserts in that's a little frightening

2270
02:02:02,328 --> 02:02:06,748
way too soon to say we're hitting a

2271
02:02:04,559 --> 02:02:09,958
compiler bug here but there we go okay

2272
02:02:06,748 --> 02:02:12,688
laughs that was just a little unnerving

2273
02:02:09,958 --> 02:02:23,029
okay so we know that we're hitting this

2274
02:02:12,689 --> 02:02:23,030
here suspiciously we're getting a six

2275
02:02:23,059 --> 02:02:30,179
and yet we have no idea how we would

2276
02:02:26,519 --> 02:02:32,069
actually be producing a six because

2277
02:02:30,179 --> 02:02:39,989
unless we've messed something else up

2278
02:02:32,069 --> 02:02:45,719
which we you know maybe we have in our

2279
02:02:39,988 --> 02:02:49,818
array cast function here oh that's the

2280
02:02:45,719 --> 02:02:49,819
IFFT zeroed case that's the old one

2281
02:02:51,559 --> 02:02:55,519
those asserts will get us nowhere

2282
02:02:57,159 --> 02:03:03,800
this is what we're looking at okay so

2283
02:03:01,460 --> 02:03:05,359
this is our bar this is our actual box

2284
02:03:03,800 --> 02:03:07,970
surface call right this is the different

2285
02:03:05,359 --> 02:03:10,819
one that we were doing there and this is

2286
02:03:07,970 --> 02:03:15,289
just taking replicated zeros ones twos

2287
02:03:10,819 --> 02:03:16,729
threes fours and fives I and placing

2288
02:03:15,289 --> 02:03:19,489
them directly in here then it does a

2289
02:03:16,729 --> 02:03:23,539
select on the box surface index so the

2290
02:03:19,489 --> 02:03:27,489
question is what does it clear it to it

2291
02:03:23,539 --> 02:03:29,390
should be cleared well I guess

2292
02:03:27,489 --> 02:03:31,399
technically it doesn't have to clear it

2293
02:03:29,390 --> 02:03:33,530
because it's not going to return unless

2294
02:03:31,399 --> 02:03:40,129
the lane actually got hit it doesn't

2295
02:03:33,529 --> 02:03:45,380
matter right so unless we're actually

2296
02:03:40,130 --> 02:03:50,109
whoring in the hit mask which we only do

2297
02:03:45,380 --> 02:03:50,109
there then the hit lanes should never

2298
02:03:50,380 --> 02:03:58,760
trigger otherwise right so we only

2299
02:03:56,180 --> 02:04:02,180
really need to care about it here when

2300
02:03:58,760 --> 02:04:06,860
we do our select for the box surface

2301
02:04:02,180 --> 02:04:15,200
index we're producing the box service

2302
02:04:06,859 --> 02:04:19,579
index here so how on earth are we

2303
02:04:15,199 --> 02:04:21,829
getting in a situation where we're

2304
02:04:19,579 --> 02:04:23,930
getting a six out of things that can

2305
02:04:21,829 --> 02:04:26,260
only or in constants between zero and

2306
02:04:23,930 --> 02:04:26,260
five

2307
02:04:29,949 --> 02:04:43,679
because I'll be honest with you I'm not

2308
02:04:32,770 --> 02:04:43,680
sure how we would do that pretty bizarre

2309
02:04:53,430 --> 02:05:00,070
so let's take a look and see if I can

2310
02:04:58,720 --> 02:05:01,630
put a search in this part of the code

2311
02:05:00,069 --> 02:05:08,819
since I'm putting them on the wrong

2312
02:05:01,630 --> 02:05:08,819
particle before oh and I only

2313
02:05:20,149 --> 02:05:37,500
you and I could also do here so you do

2314
02:05:31,349 --> 02:05:38,789
this so if you hit this lane trigger the

2315
02:05:37,500 --> 02:05:47,578
assertion just so it's a little easier

2316
02:05:38,789 --> 02:05:49,529
for us to see so if we hit that lane I

2317
02:05:47,578 --> 02:05:52,738
want to make sure that box surface index

2318
02:05:49,529 --> 02:05:56,250
is actually within the valid range 0

2319
02:05:52,738 --> 02:06:00,078
through 5 and it looks like normally it

2320
02:05:56,250 --> 02:06:09,238
appears to be just fine

2321
02:06:00,078 --> 02:06:11,549
lo and behold so what's going on can I

2322
02:06:09,238 --> 02:06:12,500
access any of these variables no of

2323
02:06:11,550 --> 02:06:21,750
course not

2324
02:06:12,500 --> 02:06:25,319
so what is happening I all right so

2325
02:06:21,750 --> 02:06:28,399
we've got some building of this guy

2326
02:06:25,319 --> 02:06:30,719
right X mm

2327
02:06:28,399 --> 02:06:33,259
movemove there's a lot of moving going

2328
02:06:30,720 --> 02:06:33,260
on here

2329
02:06:40,060 --> 02:06:49,750
so here where we set box surface index

2330
02:06:43,649 --> 02:06:52,179
up you can see here we did our and not

2331
02:06:49,750 --> 02:06:59,159
and then our and and our or so it looks

2332
02:06:52,180 --> 02:06:59,159
like X mmm 0 was our box surface index

2333
02:07:02,069 --> 02:07:08,679
and if I go ahead and and kind of take a

2334
02:07:05,640 --> 02:07:13,480
try to expand it out see what what it

2335
02:07:08,680 --> 02:07:15,369
says you know here's the here's the

2336
02:07:13,479 --> 02:07:20,739
values that it appears that it thinks it

2337
02:07:15,369 --> 02:07:24,309
has right five one seven one that's what

2338
02:07:20,739 --> 02:07:26,739
that that's what it's getting so this

2339
02:07:24,310 --> 02:07:29,650
Lane would be junk is that the lane

2340
02:07:26,739 --> 02:07:33,819
that's actually triggered and it is

2341
02:07:29,649 --> 02:07:35,799
right so that box service in Nexus 7 is

2342
02:07:33,819 --> 02:07:37,869
just totally that's just totally garbage

2343
02:07:35,800 --> 02:07:44,079
so we must have written this code very

2344
02:07:37,869 --> 02:07:45,699
poorly that's my bad I must have done

2345
02:07:44,079 --> 02:07:47,140
something very stupid here that I just

2346
02:07:45,699 --> 02:07:51,880
wasn't thinking through or something

2347
02:07:47,140 --> 02:07:53,500
right now I don't really know what that

2348
02:07:51,880 --> 02:07:55,480
would because this isn't particularly

2349
02:07:53,500 --> 02:08:00,310
complicated code but I must just be

2350
02:07:55,479 --> 02:08:03,969
thinking about it slightly wrong yeah I

2351
02:08:00,310 --> 02:08:06,100
don't know what or maybe when we mask it

2352
02:08:03,970 --> 02:08:08,740
in I don't know but let's find out what

2353
02:08:06,100 --> 02:08:10,840
the mask is first of all so we can

2354
02:08:08,739 --> 02:08:13,029
determine this mask here you can see

2355
02:08:10,840 --> 02:08:18,940
what it must have been because we do a

2356
02:08:13,029 --> 02:08:20,800
move and ends with this then and not I'm

2357
02:08:18,939 --> 02:08:25,119
sorry and not with this and then an end

2358
02:08:20,800 --> 02:08:28,350
with this then we do an or to smush them

2359
02:08:25,119 --> 02:08:28,349
together right

2360
02:08:32,829 --> 02:08:45,079
so it must have come from xmm three

2361
02:08:40,760 --> 02:08:47,270
originally the mask right because we

2362
02:08:45,079 --> 02:08:50,119
moved it in here then we did the smoosh

2363
02:08:47,270 --> 02:08:52,640
and the smoosh on 0 &amp; 3 and then we wore

2364
02:08:50,119 --> 02:08:56,119
them together for our final result so

2365
02:08:52,640 --> 02:09:00,770
the X mm 3 register must have held back

2366
02:08:56,119 --> 02:09:04,939
in some historical times must have held

2367
02:09:00,770 --> 02:09:07,700
the value of the mask now the question

2368
02:09:04,939 --> 02:09:10,069
is where did that come from and can we

2369
02:09:07,699 --> 02:09:13,670
still get a hold of it might have gotten

2370
02:09:10,069 --> 02:09:18,969
destroyed it might be gone you can see

2371
02:09:13,670 --> 02:09:18,970
that it's constantly being used here

2372
02:09:30,920 --> 02:09:35,659
so it looks like it's kind of been

2373
02:09:33,300 --> 02:09:41,190
destroyed

2374
02:09:35,659 --> 02:09:43,260
oops however the move mask of it may

2375
02:09:41,189 --> 02:09:46,109
still be right I don't know if the EAX

2376
02:09:43,260 --> 02:09:58,020
ever got trashed here it may it may have

2377
02:09:46,109 --> 02:10:00,899
been mmm so unfortunately I don't know

2378
02:09:58,020 --> 02:10:04,250
how to really look at the mask for this

2379
02:10:00,899 --> 02:10:07,699
particular time however I guess what I

2380
02:10:04,250 --> 02:10:07,699
can do

2381
02:10:25,979 --> 02:10:38,119
so there is a way this could happen if a

2382
02:10:32,310 --> 02:10:38,120
box had no size

2383
02:10:51,479 --> 02:11:05,529
right if I assume I can't access these

2384
02:10:57,670 --> 02:11:08,949
yeah so if a box had the same min and

2385
02:11:05,529 --> 02:11:13,590
Max value then two of those could be

2386
02:11:08,949 --> 02:11:13,590
true at the same time right

2387
02:11:29,729 --> 02:11:34,409
Steve ugh info is just garbage

2388
02:11:43,000 --> 02:11:49,720
so I guess if I look at the disassembly

2389
02:11:46,729 --> 02:11:49,719
here

2390
02:12:00,939 --> 02:12:07,079
I don't suspect I'll really be able to

2391
02:12:03,578 --> 02:12:07,078
get much out of this but we can try

2392
02:12:09,269 --> 02:12:15,659
let's see re X RDX

2393
02:12:31,399 --> 02:12:34,399
yeah

2394
02:12:44,198 --> 02:12:54,319
so this box anyway would not have a team

2395
02:12:48,500 --> 02:13:00,319
in value in a team X value that would be

2396
02:12:54,319 --> 02:13:02,529
equivalent like that's just not on the

2397
02:13:00,319 --> 02:13:02,529
table

2398
02:13:19,289 --> 02:13:30,350
so if I look here when I'm actually

2399
02:13:23,279 --> 02:13:30,349
doing the comparisons

2400
02:13:38,399 --> 02:13:44,589
here's the the compy Q's here right for

2401
02:13:42,460 --> 02:13:47,619
is obviously team in because it's the

2402
02:13:44,590 --> 02:13:55,060
same on all of them and then the Box

2403
02:13:47,619 --> 02:13:57,359
maxes are like x-men's to sorry 8 10 6 &amp;

2404
02:13:55,060 --> 02:13:57,360
5

2405
02:14:05,189 --> 02:14:08,119
and nine

2406
02:14:18,670 --> 02:14:22,279
it looks like because that's where the

2407
02:14:20,750 --> 02:14:23,390
comp is going but of course you know

2408
02:14:22,279 --> 02:14:25,009
what then they're gonna get destroyed

2409
02:14:23,390 --> 02:14:27,920
but you know we can look and see what

2410
02:14:25,010 --> 02:14:33,920
these actually were I guess that would

2411
02:14:27,920 --> 02:14:35,510
tell us the masks so it yeah I don't

2412
02:14:33,920 --> 02:14:41,630
guess yeah I just don't know how often

2413
02:14:35,510 --> 02:14:48,199
these things were used again a lot of

2414
02:14:41,630 --> 02:14:51,159
these just got reused again so that's

2415
02:14:48,199 --> 02:14:51,159
not really gonna help us

2416
02:15:01,599 --> 02:15:06,550
so the thing I want to know is whether

2417
02:15:04,029 --> 02:15:09,250
the tea box whether any of these can be

2418
02:15:06,550 --> 02:15:11,139
true at the same time right because if

2419
02:15:09,250 --> 02:15:13,238
they were that would give us the

2420
02:15:11,139 --> 02:15:18,880
opportunity to create larger values if

2421
02:15:13,238 --> 02:15:21,598
you or in for example you know let's say

2422
02:15:18,880 --> 02:15:25,569
you took four and you ordered in two

2423
02:15:21,599 --> 02:15:28,179
then you would get six right if you got

2424
02:15:25,569 --> 02:15:31,479
one two and four all or it in together

2425
02:15:28,179 --> 02:15:34,859
then you could get seven so this code

2426
02:15:31,479 --> 02:15:37,509
presumes that the teaming cannot be

2427
02:15:34,859 --> 02:15:41,229
hitting multiple boundaries at the same

2428
02:15:37,510 --> 02:15:46,659
time but actually that's not necessarily

2429
02:15:41,229 --> 02:15:54,129
the case I suppose right if it hit the

2430
02:15:46,658 --> 02:15:56,578
corner just on that in theory that would

2431
02:15:54,130 --> 02:15:56,578
just work

2432
02:16:09,819 --> 02:16:14,029
so I think basically what we're seeing

2433
02:16:11,869 --> 02:16:15,789
here is this just isn't a good way to do

2434
02:16:14,029 --> 02:16:20,029
this

2435
02:16:15,789 --> 02:16:22,159
unfortunately because it almost even

2436
02:16:20,029 --> 02:16:24,979
though it's almost always correct if you

2437
02:16:22,159 --> 02:16:27,889
literally just hit the corner like an

2438
02:16:24,979 --> 02:16:32,479
edge of the box then the teaming value

2439
02:16:27,890 --> 02:16:36,909
could work out just right so knowing

2440
02:16:32,479 --> 02:16:36,909
which box we hit which which side

2441
02:16:43,379 --> 02:16:47,489
is more complicated

2442
02:17:11,000 --> 02:17:26,790
also what is the point of this I mean

2443
02:17:17,670 --> 02:17:28,679
this is an and with zero what exactly do

2444
02:17:26,790 --> 02:17:41,280
you think you're going to produce right

2445
02:17:28,679 --> 02:17:45,420
I mean that's that's just dumb so we

2446
02:17:41,280 --> 02:17:47,610
start out with zero right and then we

2447
02:17:45,420 --> 02:17:50,690
want to select a box index by seeing

2448
02:17:47,610 --> 02:17:56,790
which one of these things we hit when we

2449
02:17:50,690 --> 02:17:59,040
take this mask value we almost have to

2450
02:17:56,790 --> 02:18:02,130
keep like a running mask as we go to

2451
02:17:59,040 --> 02:18:05,309
make sure we only ever use like one of

2452
02:18:02,129 --> 02:18:11,239
them so once a lane turns on it kind of

2453
02:18:05,308 --> 02:18:11,239
has to be turned off for all other ones

2454
02:18:11,540 --> 02:18:14,540
so

2455
02:18:19,040 --> 02:18:32,960
I mean I guess we really want something

2456
02:18:22,549 --> 02:18:35,509
like this so we start off with a BS mask

2457
02:18:32,959 --> 02:18:39,468
value that says okay here's where one's

2458
02:18:35,510 --> 02:18:52,420
go once something goes there then the BS

2459
02:18:39,468 --> 02:19:01,129
mask has to be updated with an and not

2460
02:18:52,420 --> 02:19:03,409
right I think which we can make into one

2461
02:19:01,129 --> 02:19:06,049
instruction right we can put an and not

2462
02:19:03,409 --> 02:19:06,409
in here but we're then saying like all

2463
02:19:06,049 --> 02:19:08,659
right

2464
02:19:06,409 --> 02:19:11,270
once we've masked any lame that came

2465
02:19:08,659 --> 02:19:17,200
back true here cannot we cannot use for

2466
02:19:11,270 --> 02:19:17,200
the next one we have to mask it out

2467
02:19:33,489 --> 02:19:41,649
that seems right to me so I'm gonna try

2468
02:19:36,760 --> 02:19:45,870
that and see how we do so again this

2469
02:19:41,649 --> 02:19:45,869
then becomes an update of BS mask

2470
02:20:08,658 --> 02:20:15,549
and I think that should be okay now

2471
02:20:11,180 --> 02:20:15,550
there's probably a clever way to do that

2472
02:20:16,389 --> 02:20:43,728
but like I said we want this to be in

2473
02:20:18,709 --> 02:20:49,519
for starters at least and and not like

2474
02:20:43,728 --> 02:20:51,920
so and we already have that function we

2475
02:20:49,520 --> 02:20:56,720
just don't expose it so inside the Cindy

2476
02:20:51,920 --> 02:20:58,430
stuff we have and not you know it's

2477
02:20:56,719 --> 02:21:00,078
sitting right there but we just don't

2478
02:20:58,430 --> 02:21:03,430
have a way to actually access it so we

2479
02:21:00,078 --> 02:21:03,430
want to have a thing here that's like

2480
02:21:16,590 --> 02:21:23,469
so I don't really like the convention of

2481
02:21:19,689 --> 02:21:25,300
having the not be the thing that it

2482
02:21:23,469 --> 02:21:27,039
should be called not and or something if

2483
02:21:25,299 --> 02:21:28,750
it's going the other way so I feel like

2484
02:21:27,040 --> 02:21:30,880
since the first parameter is the thing

2485
02:21:28,750 --> 02:21:32,110
that gets knotted I want mine to read

2486
02:21:30,879 --> 02:21:34,899
the other way round

2487
02:21:32,110 --> 02:21:37,620
right and if we look at the Intel

2488
02:21:34,899 --> 02:21:37,619
intrinsics guide

2489
02:21:52,610 --> 02:21:57,149
here you can see that a is the thing

2490
02:21:55,889 --> 02:22:03,409
that gets knotted so it's really a knot

2491
02:21:57,148 --> 02:22:13,439
and not in and not so I think I'd rather

2492
02:22:03,409 --> 02:22:16,920
write it that way you know just say just

2493
02:22:13,439 --> 02:22:20,100
so it's clear suing here we're gonna do

2494
02:22:16,920 --> 02:22:24,450
that knot and all the way down or and

2495
02:22:20,100 --> 02:22:29,819
not sorry all the way down like so and I

2496
02:22:24,450 --> 02:22:31,560
think that's what we need there what is

2497
02:22:29,819 --> 02:22:42,539
the problem

2498
02:22:31,559 --> 02:22:45,359
yeah sorry so now we should get the

2499
02:22:42,540 --> 02:22:50,100
correct box index I believe in all cases

2500
02:22:45,360 --> 02:22:58,739
even cases where we have them not going

2501
02:22:50,100 --> 02:23:00,780
although I'm Sam wrong we should be able

2502
02:22:58,739 --> 02:23:03,680
to make that work now I probably messed

2503
02:23:00,780 --> 02:23:03,680
something up here

2504
02:23:07,101 --> 02:23:21,141
oh yeah yeah this is not at all what I

2505
02:23:14,181 --> 02:23:23,480
wanted to do sorry I so what I wanted to

2506
02:23:21,140 --> 02:23:25,729
do is keep a running total of all the

2507
02:23:23,479 --> 02:23:28,129
things we had masked in and I didn't

2508
02:23:25,729 --> 02:23:29,511
quite do that right I wanted BS masks to

2509
02:23:28,129 --> 02:23:31,189
actually be the thing that gets Ord

2510
02:23:29,511 --> 02:23:38,390
together and I'm not actually doing that

2511
02:23:31,190 --> 02:23:41,420
here right so it's not quite correct

2512
02:23:38,390 --> 02:23:43,579
this and not supposed to be here not

2513
02:23:41,420 --> 02:23:43,970
here and I'll show you what I mean by

2514
02:23:43,579 --> 02:23:48,140
that

2515
02:23:43,970 --> 02:23:51,350
so the BS mask has to be all the lanes

2516
02:23:48,140 --> 02:23:53,989
that were ever true so every time we do

2517
02:23:51,351 --> 02:23:56,659
it we have to take the new mask value

2518
02:23:53,989 --> 02:24:01,399
that we were going to do right and we

2519
02:23:56,659 --> 02:24:04,030
need to append it to the BS mask there's

2520
02:24:01,399 --> 02:24:06,020
a couple different ways we could do that

2521
02:24:04,030 --> 02:24:07,880
trying to think of what the most

2522
02:24:06,021 --> 02:24:09,320
efficient way to do it is the most

2523
02:24:07,879 --> 02:24:11,209
concise way of doing it in the code

2524
02:24:09,319 --> 02:24:13,090
right but we need to keep the knockout

2525
02:24:11,209 --> 02:24:15,619
values there what was happening here is

2526
02:24:13,090 --> 02:24:17,659
you know later you could turn a lane

2527
02:24:15,620 --> 02:24:19,641
back on that you know a previous one

2528
02:24:17,659 --> 02:24:21,771
you're only doing just the immediate

2529
02:24:19,640 --> 02:24:26,420
previous and the immediate previous

2530
02:24:21,771 --> 02:24:27,920
isn't sufficient presumably right so let

2531
02:24:26,420 --> 02:24:29,659
me make sure maybe I'm wrong about that

2532
02:24:27,920 --> 02:24:31,399
but let me just make sure here so the

2533
02:24:29,659 --> 02:24:33,550
first time we get BS masks here what

2534
02:24:31,399 --> 02:24:37,220
we're gonna say is it's gonna have true

2535
02:24:33,550 --> 02:24:40,609
in the lanes where we could actually

2536
02:24:37,220 --> 02:24:43,640
write where T min and T max are where T

2537
02:24:40,610 --> 02:24:46,280
min is equal to box max right we're

2538
02:24:43,640 --> 02:24:48,020
gonna or in the one based on those lanes

2539
02:24:46,280 --> 02:24:53,200
then what we're gonna do is say all

2540
02:24:48,021 --> 02:24:55,730
right we're gonna knock out that Lane

2541
02:24:53,200 --> 02:24:57,829
just those lanes that we use in the

2542
02:24:55,729 --> 02:24:59,511
previous time and prevent them from

2543
02:24:57,829 --> 02:25:01,909
hitting and then this will tell us which

2544
02:24:59,511 --> 02:25:03,319
ones are there yes you can see it loses

2545
02:25:01,909 --> 02:25:08,000
this information then pretty much

2546
02:25:03,319 --> 02:25:09,770
immediately right because now this might

2547
02:25:08,000 --> 02:25:13,239
just be zero yes so that this is not

2548
02:25:09,771 --> 02:25:15,940
sufficient and not at all what we wanted

2549
02:25:13,239 --> 02:25:19,101
so let's try that one more time so

2550
02:25:15,940 --> 02:25:20,851
really what we want to do here right is

2551
02:25:19,101 --> 02:25:25,319
we want to build this thing up

2552
02:25:20,851 --> 02:25:29,790
piece by piece right so let's start with

2553
02:25:25,319 --> 02:25:33,720
the mask Building Code and the mask

2554
02:25:29,790 --> 02:25:42,750
building code is pretty simple it's just

2555
02:25:33,720 --> 02:25:44,369
an or so as we go each time there you

2556
02:25:42,750 --> 02:25:48,271
can see this would build up the mask

2557
02:25:44,370 --> 02:25:52,200
that is what is allowed in essentially

2558
02:25:48,271 --> 02:25:55,561
right I'm sorry

2559
02:25:52,200 --> 02:25:57,540
what has already been filled so so lanes

2560
02:25:55,560 --> 02:26:00,181
that have already been filled are are

2561
02:25:57,540 --> 02:26:03,420
now have ones in them at this point

2562
02:26:00,181 --> 02:26:05,940
right and so what we need to do now is

2563
02:26:03,420 --> 02:26:10,710
just actually remember what these mass

2564
02:26:05,940 --> 02:26:20,101
values are so what we can do here is say

2565
02:26:10,709 --> 02:26:29,699
you know something like this so maybe

2566
02:26:20,101 --> 02:26:31,079
we'll call this the running mask so

2567
02:26:29,700 --> 02:26:33,920
probably it actually this one like this

2568
02:26:31,079 --> 02:26:33,920
oops

2569
02:26:36,949 --> 02:26:40,709
and again there's probably better way to

2570
02:26:39,449 --> 02:26:41,729
do this that we could think about if you

2571
02:26:40,709 --> 02:26:44,479
thought about it one more carefully I'm

2572
02:26:41,728 --> 02:26:53,608
just gonna do a the basic version first

2573
02:26:44,478 --> 02:27:00,510
so the running mask just gets these

2574
02:26:53,609 --> 02:27:24,300
things ordered together and I'm going to

2575
02:27:00,510 --> 02:27:27,689
pull this mask out like so so there we

2576
02:27:24,299 --> 02:27:32,578
have that written a little bit more

2577
02:27:27,689 --> 02:27:34,738
succinctly there so we start out with

2578
02:27:32,578 --> 02:27:38,549
nothing in the running mask and the this

2579
02:27:34,738 --> 02:27:40,799
mask is set the first thing right and

2580
02:27:38,549 --> 02:27:46,498
then each time we would update the

2581
02:27:40,799 --> 02:27:47,998
running mask as such right then when we

2582
02:27:46,498 --> 02:27:53,549
need to actually write to our box

2583
02:27:47,998 --> 02:27:56,248
surface index each time out so for

2584
02:27:53,549 --> 02:27:58,498
example our box surface index here the

2585
02:27:56,248 --> 02:28:00,898
first time well the first time it's just

2586
02:27:58,498 --> 02:28:03,359
equal to zero so we actually don't need

2587
02:28:00,898 --> 02:28:04,708
to do anything for that the next time

2588
02:28:03,359 --> 02:28:10,439
what we need to do is say okay the Box

2589
02:28:04,709 --> 02:28:14,399
surface index we will orient a one and

2590
02:28:10,439 --> 02:28:17,248
we're gonna end that with this mask but

2591
02:28:14,398 --> 02:28:21,260
we also need to knock out anything that

2592
02:28:17,248 --> 02:28:28,789
might have been in running masks right

2593
02:28:21,260 --> 02:28:28,789
so the and not actually goes here

2594
02:28:32,931 --> 02:28:48,331
here where we say this mess that we're

2595
02:28:39,421 --> 02:28:54,240
going to or in cannot have any lanes in

2596
02:28:48,331 --> 02:29:13,740
it that we're already handled so that

2597
02:28:54,240 --> 02:29:17,490
just continues down as we go like so so

2598
02:29:13,740 --> 02:29:26,431
we start off with zero the running mask

2599
02:29:17,490 --> 02:29:27,511
actually doesn't have to get updated in

2600
02:29:26,431 --> 02:29:29,490
any particular way here we can just

2601
02:29:27,511 --> 02:29:32,220
start it out that way so that's what was

2602
02:29:29,490 --> 02:29:33,810
true the first time right so the first

2603
02:29:32,220 --> 02:29:36,120
time we start out we assume zeros

2604
02:29:33,810 --> 02:29:38,399
everywhere and we say okay if there's a

2605
02:29:36,120 --> 02:29:40,439
zero in a lane it will remain there if

2606
02:29:38,399 --> 02:29:43,171
the team in equals the box man and what

2607
02:29:40,440 --> 02:29:47,001
is considered that filled then we go and

2608
02:29:43,171 --> 02:29:50,101
say okay now let's look at box max

2609
02:29:47,001 --> 02:29:52,531
update with box max but don't do that

2610
02:29:50,101 --> 02:29:53,940
don't actually use anywhere that would

2611
02:29:52,531 --> 02:29:55,980
have been knocked out by the running

2612
02:29:53,940 --> 02:29:57,931
mask then update the running mask same

2613
02:29:55,979 --> 02:30:00,359
thing again same thing again same thing

2614
02:29:57,931 --> 02:30:02,131
again same thing again so now we like

2615
02:30:00,360 --> 02:30:03,661
keep that running tally now at the end

2616
02:30:02,130 --> 02:30:05,790
we don't really need this last one

2617
02:30:03,661 --> 02:30:07,681
because the running mask doesn't need to

2618
02:30:05,790 --> 02:30:09,300
be used for anything at the end so the

2619
02:30:07,681 --> 02:30:12,711
final one actually it's not relevant

2620
02:30:09,300 --> 02:30:15,359
right but otherwise it would have been

2621
02:30:12,710 --> 02:30:21,661
so I think that actually now correctly

2622
02:30:15,360 --> 02:30:23,131
does the thing we want to do we should

2623
02:30:21,661 --> 02:30:26,911
probably step through it and look we're

2624
02:30:23,130 --> 02:30:30,140
out of time but let me just check

2625
02:30:26,911 --> 02:30:30,140
through the assertions here

2626
02:30:45,549 --> 02:30:48,850
seem safe

2627
02:31:08,931 --> 02:31:15,521
yes I'm not I'm not seeing any really

2628
02:31:11,959 --> 02:31:15,520
problematic stuff happen

2629
02:31:27,810 --> 02:31:32,649
so that should be good so that code was

2630
02:31:30,310 --> 02:31:33,789
just not really correct and then not

2631
02:31:32,649 --> 02:31:36,850
sure why we weren't having problem than

2632
02:31:33,790 --> 02:31:38,471
before but I guess we giggled enough

2633
02:31:36,851 --> 02:31:39,851
stuff with changing the C runtime

2634
02:31:38,470 --> 02:31:41,560
library out that we were no longer

2635
02:31:39,851 --> 02:31:43,329
getting the same amount of padding or

2636
02:31:41,560 --> 02:31:44,829
something where the stack was just

2637
02:31:43,329 --> 02:31:46,030
getting messed with a little bit too

2638
02:31:44,829 --> 02:31:50,021
much or who knows what was happening

2639
02:31:46,030 --> 02:31:51,700
there right so now we can see is this

2640
02:31:50,021 --> 02:31:57,670
code is you know probably quite a bit

2641
02:31:51,700 --> 02:32:01,240
slower unfortunately but at least is now

2642
02:31:57,670 --> 02:32:02,500
I think correct and speed wise we didn't

2643
02:32:01,239 --> 02:32:04,569
really take a hit for that it doesn't

2644
02:32:02,500 --> 02:32:11,049
look like so that's kind of a good thing

2645
02:32:04,569 --> 02:32:12,879
as well so I guess it wasn't slower in a

2646
02:32:11,049 --> 02:32:14,319
in a way that really affected our

2647
02:32:12,879 --> 02:32:16,439
profile dramatically which is kind of

2648
02:32:14,319 --> 02:32:16,440
nice

2649
02:32:30,040 --> 02:32:35,800
alright alright so I'm gonna go ahead

2650
02:32:33,761 --> 02:32:38,351
and wrap up for now and tomorrow we will

2651
02:32:35,800 --> 02:32:40,779
finish changing the the hemisphere

2652
02:32:38,351 --> 02:32:42,761
sampling and then we will have to

2653
02:32:40,780 --> 02:32:44,261
because I probably will want to use sine

2654
02:32:42,761 --> 02:32:45,671
and cosine for that then we will have to

2655
02:32:44,261 --> 02:32:47,381
move on to the C runtime library

2656
02:32:45,671 --> 02:32:48,701
replacement which again is not super

2657
02:32:47,380 --> 02:32:51,220
complicated we just have to replace

2658
02:32:48,700 --> 02:32:53,590
those math functions but we have to do

2659
02:32:51,220 --> 02:32:56,439
some talking about how would you replace

2660
02:32:53,591 --> 02:33:02,461
those math functions in order to do that

2661
02:32:56,440 --> 02:33:02,461
so let's go ahead and go to brief Q&amp;A

2662
02:33:17,020 --> 02:33:21,620
can we use six separate bits to

2663
02:33:19,670 --> 02:33:23,239
represent hits with each box wall and

2664
02:33:21,620 --> 02:33:32,990
then take the highest bit to determine

2665
02:33:23,239 --> 02:33:37,059
which individual box we'll use we

2666
02:33:32,989 --> 02:33:37,059
definitely could

2667
02:33:50,690 --> 02:33:58,569
I'm not sure how we would necessarily

2668
02:33:53,261 --> 02:33:58,569
get that bit pattern out though

2669
02:34:13,409 --> 02:34:21,489
so you were suggesting using LZ count

2670
02:34:16,841 --> 02:34:24,780
epi32 so let's take a look and see what

2671
02:34:21,489 --> 02:34:24,780
the compatibility is on that

2672
02:34:54,771 --> 02:34:57,521
hello

2673
02:35:02,909 --> 02:35:07,500
where is this function

2674
02:35:25,379 --> 02:35:32,579
dude dude that's an ATX 512

2675
02:35:29,520 --> 02:35:37,800
we can't use that it won't run on

2676
02:35:32,579 --> 02:35:40,079
anything I was gonna say I'm like well

2677
02:35:37,799 --> 02:35:42,539
you know I pretty much always use just

2678
02:35:40,079 --> 02:35:45,000
sse2 so maybe it's in four or something

2679
02:35:42,540 --> 02:35:46,739
I just haven't looked because that's

2680
02:35:45,000 --> 02:35:52,020
like I've never used that function and

2681
02:35:46,738 --> 02:35:55,618
that's why you know but we still could

2682
02:35:52,020 --> 02:35:57,960
do something like that where we process

2683
02:35:55,619 --> 02:36:00,329
it after the fact I mean the your idea

2684
02:35:57,959 --> 02:36:01,679
is still valid because we haven't

2685
02:36:00,329 --> 02:36:03,119
thought much it but we just kind of

2686
02:36:01,680 --> 02:36:06,059
slammed this in when we needed it right

2687
02:36:03,119 --> 02:36:08,939
we didn't think a lot about how we

2688
02:36:06,059 --> 02:36:10,559
should do it so it's it's worth thinking

2689
02:36:08,939 --> 02:36:12,270
about that what you're talking about

2690
02:36:10,559 --> 02:36:15,209
though it's possible we could do

2691
02:36:12,270 --> 02:36:18,090
something where we just or in bits that

2692
02:36:15,209 --> 02:36:21,568
don't overlap and then later when we

2693
02:36:18,090 --> 02:36:23,279
pull it out to do our access then we

2694
02:36:21,568 --> 02:36:27,439
could do it so for example we could use

2695
02:36:23,279 --> 02:36:35,220
bits can in the exterior code right and

2696
02:36:27,439 --> 02:36:40,488
pull it out that way you know so so I

2697
02:36:35,219 --> 02:36:40,488
feel like that would work

2698
02:36:59,909 --> 02:37:10,750
returned the original destination what

2699
02:37:05,800 --> 02:37:12,010
in just in memset are you talking about

2700
02:37:10,750 --> 02:37:14,250
mem said or I don't know what you're

2701
02:37:12,011 --> 02:37:14,250
talking about

2702
02:37:15,000 --> 02:37:26,021
ginger bill said return the original

2703
02:37:18,610 --> 02:37:27,400
destination oh yeah this is the

2704
02:37:26,021 --> 02:37:28,989
compilers just calling this we don't

2705
02:37:27,399 --> 02:37:31,119
really need to we could return zero here

2706
02:37:28,989 --> 02:37:32,409
and nothing would happen but yeah we

2707
02:37:31,120 --> 02:37:34,000
don't want to leave a time bomb in there

2708
02:37:32,409 --> 02:37:37,390
someone cut and pasted this code and

2709
02:37:34,000 --> 02:37:40,300
then used it as a met they would be

2710
02:37:37,390 --> 02:37:43,750
unhappy so I agree ginger bill

2711
02:37:40,300 --> 02:37:46,180
uh-huh we shouldn't leave that like that

2712
02:37:43,750 --> 02:37:48,159
it's better to have it do the right

2713
02:37:46,181 --> 02:37:54,431
thing in case anyone actually cares

2714
02:37:48,159 --> 02:37:56,771
I meant to return the original

2715
02:37:54,431 --> 02:37:59,069
destination I just didn't actually type

2716
02:37:56,771 --> 02:37:59,070
that in

2717
02:38:09,139 --> 02:38:12,519
[Music]

2718
02:38:21,290 --> 02:38:24,500
would it be better to make hemisphere

2719
02:38:22,879 --> 02:38:26,529
sampling ization in an actually

2720
02:38:24,500 --> 02:38:35,450
hemisphere with dots rendered on it

2721
02:38:26,530 --> 02:38:38,120
yeah probably possibly I don't know that

2722
02:38:35,450 --> 02:38:40,010
we have any way to really render dots at

2723
02:38:38,120 --> 02:38:47,840
the moment I guess we can put little

2724
02:38:40,010 --> 02:38:50,630
cubes down there the other way we could

2725
02:38:47,840 --> 02:38:52,460
do it is truncate those lines so for

2726
02:38:50,629 --> 02:38:55,689
example inside handmade lighting right

2727
02:38:52,459 --> 02:38:58,750
to make it a little easier to visualize

2728
02:38:55,690 --> 02:39:08,750
for in the way that you're talking about

2729
02:38:58,750 --> 02:39:11,260
what we could do is say something like

2730
02:39:08,750 --> 02:39:11,260
this

2731
02:39:26,920 --> 02:39:32,889
so you know something that was a little

2732
02:39:29,229 --> 02:39:36,819
potentially easier to visualize like how

2733
02:39:32,889 --> 02:39:41,680
you're saying would be something more

2734
02:39:36,819 --> 02:39:43,119
like this right and that way you don't

2735
02:39:41,680 --> 02:39:44,500
have those those like pin cushions in

2736
02:39:43,120 --> 02:39:46,480
there and you can you could you know we

2737
02:39:44,500 --> 02:39:47,860
could shorten those up a bit I don't

2738
02:39:46,479 --> 02:40:06,520
know if you want to do push cue but we

2739
02:39:47,860 --> 02:40:11,319
could even do push cube so in here we

2740
02:40:06,521 --> 02:40:14,079
could actually try that by putting a

2741
02:40:11,319 --> 02:40:17,238
push cube in here and draw a cube

2742
02:40:14,079 --> 02:40:17,238
[Music]

2743
02:40:20,069 --> 02:40:36,610
in order to do that I'd have to

2744
02:40:22,659 --> 02:40:40,271
basically do this so we'll just call get

2745
02:40:36,610 --> 02:40:44,980
current quads with you know however many

2746
02:40:40,271 --> 02:40:48,101
of these we were gonna do something like

2747
02:40:44,979 --> 02:40:51,761
this and then you hear we could just put

2748
02:40:48,101 --> 02:40:57,041
on those those cubes I suppose so we'd

2749
02:40:51,761 --> 02:41:04,060
say alright creep bitmap looks like it

2750
02:40:57,040 --> 02:41:07,149
needs a bitmap ID for that well can just

2751
02:41:04,060 --> 02:41:09,279
call this one the position would be the

2752
02:41:07,149 --> 02:41:12,790
start point plus the one point F times

2753
02:41:09,280 --> 02:41:18,070
the normal reduce the cube I don't know

2754
02:41:12,790 --> 02:41:22,810
what that should be really and then the

2755
02:41:18,069 --> 02:41:25,421
color value so in theory I think that

2756
02:41:22,810 --> 02:41:28,091
would probably work I guess get current

2757
02:41:25,421 --> 02:41:31,989
quads you might not really need to call

2758
02:41:28,091 --> 02:41:33,819
that because the push cube function

2759
02:41:31,989 --> 02:41:34,271
probably calls the quad function

2760
02:41:33,819 --> 02:41:38,171
correctly

2761
02:41:34,271 --> 02:41:41,101
anyway fact I don't know does the

2762
02:41:38,171 --> 02:41:41,101
line-segment one do

2763
02:41:57,459 --> 02:42:02,779
yeah so I'm not quite sure whether we

2764
02:42:01,310 --> 02:42:07,640
actually need to make sure the space is

2765
02:42:02,780 --> 02:42:15,500
reserved or not but we can so there's

2766
02:42:07,640 --> 02:42:17,000
like the cube version right and the

2767
02:42:15,500 --> 02:42:20,511
height is value is a little misleading

2768
02:42:17,000 --> 02:42:21,771
there but that's because our cubes are

2769
02:42:20,511 --> 02:42:23,780
kind of done in a weird way because they

2770
02:42:21,771 --> 02:42:31,641
were made for floors originally but but

2771
02:42:23,780 --> 02:42:33,381
there's like more what that's about so

2772
02:42:31,640 --> 02:42:35,119
that would be a hemisphere sampling

2773
02:42:33,380 --> 02:42:37,399
where you could see it a little bit

2774
02:42:35,120 --> 02:42:53,391
better in the hemisphere and if we want

2775
02:42:37,399 --> 02:43:00,050
to here we can stop the series so if we

2776
02:42:53,390 --> 02:43:02,539
want to you know we can intentionally

2777
02:43:00,050 --> 02:43:07,720
not use one that's changing so we can

2778
02:43:02,540 --> 02:43:07,721
see just our basic distribution

2779
02:43:07,810 --> 02:43:14,149
statically and so there you go right now

2780
02:43:11,870 --> 02:43:17,690
since you know this is again this is

2781
02:43:14,149 --> 02:43:20,659
picking completely randomly you can see

2782
02:43:17,690 --> 02:43:22,640
how it's not particularly well

2783
02:43:20,659 --> 02:43:24,110
distributed right and that's what we

2784
02:43:22,640 --> 02:43:26,029
were gonna do today but then we kind of

2785
02:43:24,110 --> 02:43:28,841
got sidetracked on debugging in C

2786
02:43:26,030 --> 02:43:30,980
runtime library both of which are good

2787
02:43:28,841 --> 02:43:33,409
but what we want to do is we just want

2788
02:43:30,979 --> 02:43:37,810
to even those out a little bit more I

2789
02:43:33,409 --> 02:43:37,810
wonder could this be made a little lower

2790
02:43:37,989 --> 02:43:41,530
let's see a little bit better

2791
02:43:43,649 --> 02:43:48,789
so there you go so what we want to do is

2792
02:43:46,299 --> 02:43:50,590
we want to unclamp this right we want to

2793
02:43:48,790 --> 02:43:51,431
make this a little bit more evenly and

2794
02:43:50,590 --> 02:43:52,870
so that's where it's going to be

2795
02:43:51,431 --> 02:43:53,890
tomorrow is just just unclip it that

2796
02:43:52,870 --> 02:43:55,931
that was it

2797
02:43:53,890 --> 02:43:57,250
we're not using this yet anyway so we

2798
02:43:55,931 --> 02:43:58,271
just we want to get it straightened out

2799
02:43:57,250 --> 02:44:07,569
here and then I'm going to move it into

2800
02:43:58,271 --> 02:44:10,329
the the code proper Martin's why do you

2801
02:44:07,569 --> 02:44:13,681
do star unsigned care star and at Val

2802
02:44:10,329 --> 02:44:18,459
instead of unsaid curv al in mem set so

2803
02:44:13,681 --> 02:44:22,690
there's no reason if I think it through

2804
02:44:18,459 --> 02:44:27,970
so if I am calling unsigned care to

2805
02:44:22,690 --> 02:44:32,260
truncate a value that was an integer it

2806
02:44:27,970 --> 02:44:35,079
should just work but sometimes I force a

2807
02:44:32,260 --> 02:44:37,479
reinterpretation like some by default if

2808
02:44:35,079 --> 02:44:40,299
I'm not thinking about it hard I always

2809
02:44:37,479 --> 02:44:45,939
do the address version so that it won't

2810
02:44:40,299 --> 02:44:48,279
do some weird sign signed operation that

2811
02:44:45,940 --> 02:44:50,471
I don't want because even though I

2812
02:44:48,280 --> 02:44:53,320
programmed in C since I don't even want

2813
02:44:50,470 --> 02:44:59,470
to know how long like 20 years or

2814
02:44:53,319 --> 02:45:03,190
something um I don't remember when I

2815
02:44:59,470 --> 02:45:05,260
first started programming C it's

2816
02:45:03,190 --> 02:45:07,181
actually probably 30 years so I've

2817
02:45:05,260 --> 02:45:12,760
program C for probably something like 30

2818
02:45:07,181 --> 02:45:15,431
years still I don't really have an

2819
02:45:12,760 --> 02:45:19,569
internal model of it's dumb sign extend

2820
02:45:15,431 --> 02:45:21,730
stuff that it does right because the

2821
02:45:19,569 --> 02:45:23,920
intuitive way I would think about it is

2822
02:45:21,729 --> 02:45:27,159
just not the way that seed ever does it

2823
02:45:23,920 --> 02:45:30,159
ever for me so I tend to like Overgaard

2824
02:45:27,159 --> 02:45:31,840
against having it ever do anything if I

2825
02:45:30,159 --> 02:45:34,319
could I just tell it never do anything

2826
02:45:31,840 --> 02:45:39,399
like I'll tell you what to do like don't

2827
02:45:34,319 --> 02:45:40,720
do it but I that's why you see me type

2828
02:45:39,399 --> 02:45:42,699
that is because I haven't thought about

2829
02:45:40,720 --> 02:45:43,930
it at all and I'm just don't want the

2830
02:45:42,700 --> 02:45:50,771
compiler do anything stupid

2831
02:45:43,931 --> 02:45:53,771
right but in that case you're truncating

2832
02:45:50,771 --> 02:45:55,391
an int to an 8-bit value so I don't

2833
02:45:53,771 --> 02:45:57,159
think it will ever do anything straight

2834
02:45:55,390 --> 02:45:59,171
it I think it will just take the bottom

2835
02:45:57,159 --> 02:46:03,120
eight bits I

2836
02:45:59,171 --> 02:46:03,121
all that's always I think

2837
02:46:10,640 --> 02:46:15,060
off-topic what harm do you think could

2838
02:46:13,620 --> 02:46:16,950
happen if you click on that yellow flag

2839
02:46:15,060 --> 02:46:18,421
to upgrade MSB see no breaking change

2840
02:46:16,950 --> 02:46:22,110
has been introduced since this new

2841
02:46:18,421 --> 02:46:25,079
machine just lots of power upgrades um

2842
02:46:22,110 --> 02:46:27,150
so generally speaking if you have

2843
02:46:25,079 --> 02:46:30,091
something that compiles your code okay

2844
02:46:27,149 --> 02:46:32,671
I never upgrade it until the end of a

2845
02:46:30,091 --> 02:46:35,431
project I had to switch versions of MSB

2846
02:46:32,671 --> 02:46:39,421
see here because we moved machines but

2847
02:46:35,431 --> 02:46:44,551
normally I would never do that you know

2848
02:46:39,421 --> 02:46:46,560
pretty much ever right because a lot of

2849
02:46:44,550 --> 02:46:47,819
times it just dies right it's like we

2850
02:46:46,560 --> 02:46:49,501
upgrade it and it just doesn't compile

2851
02:46:47,819 --> 02:46:50,699
our code anymore or it like introduces a

2852
02:46:49,501 --> 02:46:52,800
bunch of new errors we have to go look

2853
02:46:50,700 --> 02:46:56,370
at or it like you know who knows what it

2854
02:46:52,800 --> 02:47:00,091
does right so why it doesn't give me

2855
02:46:56,370 --> 02:47:02,221
anything to upgrade it that I want and

2856
02:47:00,091 --> 02:47:03,780
also pretty much every version of MS we

2857
02:47:02,220 --> 02:47:10,761
see gets worse than the one before it so

2858
02:47:03,780 --> 02:47:13,351
it's not a good trend right so yeah like

2859
02:47:10,761 --> 02:47:15,211
unless you have a reason to upgrade you

2860
02:47:13,351 --> 02:47:17,190
never upgrade that's my policy

2861
02:47:15,210 --> 02:47:18,560
unless you know exactly what you need

2862
02:47:17,190 --> 02:47:23,069
and you're sure you're going to get it

2863
02:47:18,560 --> 02:47:24,989
and most the time nowadays it's all bad

2864
02:47:23,069 --> 02:47:26,940
right like Windows gets worse every time

2865
02:47:24,989 --> 02:47:28,739
it upgrades so I would never upgrade it

2866
02:47:26,940 --> 02:47:30,360
if I could avoid it right and in fact I

2867
02:47:28,739 --> 02:47:31,380
do avoid it on my work machines because

2868
02:47:30,360 --> 02:47:35,150
they're not plugged into the internet so

2869
02:47:31,380 --> 02:47:38,909
they can't get to Microsoft upgrade haha

2870
02:47:35,149 --> 02:47:41,190
but yeah I I never up to anything if I

2871
02:47:38,909 --> 02:47:43,501
can avoid it take everything off the net

2872
02:47:41,190 --> 02:47:46,140
and never update it and hey you have a

2873
02:47:43,501 --> 02:47:47,640
much better life because stuffs breaking

2874
02:47:46,140 --> 02:47:49,140
all the time with these stupid updates

2875
02:47:47,640 --> 02:47:52,050
that they don't debug and they don't

2876
02:47:49,140 --> 02:47:56,819
test right and then you have to live

2877
02:47:52,050 --> 02:47:57,989
with it fluid else key is the snack size

2878
02:47:56,819 --> 02:48:01,470
set on the command line for the entire

2879
02:47:57,989 --> 02:48:06,060
stack or for each stack frame it's for

2880
02:48:01,470 --> 02:48:10,501
the entire stack of a thread so it's not

2881
02:48:06,060 --> 02:48:16,220
it's not for like if you have more than

2882
02:48:10,501 --> 02:48:20,819
one thread you get more than one snack

2883
02:48:16,220 --> 02:48:23,260
but each function doesn't get the whole

2884
02:48:20,819 --> 02:48:25,898
1 megabyte each function get

2885
02:48:23,260 --> 02:48:28,318
however much it needs out of the one

2886
02:48:25,898 --> 02:48:28,318
megabyte

2887
02:48:34,819 --> 02:48:38,431
Martin says another thing to mention

2888
02:48:36,659 --> 02:48:40,079
when using slash stack to get 1 megabyte

2889
02:48:38,431 --> 02:48:41,399
Sacre's forget programs that all threads

2890
02:48:40,079 --> 02:48:42,601
also will have the stack size the

2891
02:48:41,399 --> 02:48:43,829
default it could be an issue if

2892
02:48:42,601 --> 02:48:46,261
somebody's creating keeping hundreds of

2893
02:48:43,829 --> 02:48:48,989
threads live that's true if you wanted

2894
02:48:46,261 --> 02:48:50,460
to minimize the number the amount of

2895
02:48:48,989 --> 02:48:52,159
memory you're using per thread you would

2896
02:48:50,459 --> 02:48:54,329
run into a problem there for sure

2897
02:48:52,159 --> 02:49:00,119
although I would question why you were

2898
02:48:54,329 --> 02:49:02,011
doing that but you know how scale though

2899
02:49:00,120 --> 02:49:03,780
you once said that in your products you

2900
02:49:02,011 --> 02:49:05,670
don't include windows @h how do we go

2901
02:49:03,780 --> 02:49:07,320
about doing that it's exactly the same

2902
02:49:05,670 --> 02:49:10,739
as you saw me do with the opengl stuff

2903
02:49:07,319 --> 02:49:13,529
you just cut and paste the function

2904
02:49:10,739 --> 02:49:15,479
prototype into your own code and then

2905
02:49:13,530 --> 02:49:17,820
call get proc address to get the address

2906
02:49:15,479 --> 02:49:21,449
of it out of the dol and then you don't

2907
02:49:17,819 --> 02:49:22,681
need windows that age right because

2908
02:49:21,450 --> 02:49:24,931
windows that h is just a giant

2909
02:49:22,681 --> 02:49:26,819
collection of function prototypes and

2910
02:49:24,931 --> 02:49:29,640
structs that you could just define

2911
02:49:26,819 --> 02:49:32,459
yourself the ones you need so you don't

2912
02:49:29,640 --> 02:49:34,229
need anything in Windows H other than

2913
02:49:32,459 --> 02:49:35,970
the exact stuff you call so you can just

2914
02:49:34,229 --> 02:49:38,060
copy it in and be done which is what I

2915
02:49:35,970 --> 02:49:38,060
do

2916
02:49:49,280 --> 02:49:52,400
I hope this is not too far I've talked

2917
02:49:50,780 --> 02:49:54,110
recently I've thought about a hook based

2918
02:49:52,399 --> 02:49:56,569
execution memory management system where

2919
02:49:54,110 --> 02:49:57,980
you allocate memory you can tell it in

2920
02:49:56,569 --> 02:49:59,539
the next line when it should be freed

2921
02:49:57,979 --> 02:50:02,239
there would be as many hooks as you like

2922
02:49:59,540 --> 02:50:03,440
for example after frame hook level load

2923
02:50:02,239 --> 02:50:05,420
hook or stuff like this

2924
02:50:03,440 --> 02:50:07,130
the hooks internally would be a

2925
02:50:05,420 --> 02:50:08,360
collection of lambdas so they can

2926
02:50:07,129 --> 02:50:09,859
capture the address that you want to

2927
02:50:08,360 --> 02:50:12,340
free when the hooks run what do you

2928
02:50:09,860 --> 02:50:14,360
think of this idea um I don't like it

2929
02:50:12,340 --> 02:50:16,360
that's like how it was done in the

2930
02:50:14,360 --> 02:50:18,860
witness and I don't like it

2931
02:50:16,360 --> 02:50:20,659
the reason I don't like it is because if

2932
02:50:18,860 --> 02:50:23,210
you know when memory is supposed to get

2933
02:50:20,659 --> 02:50:25,220
freed then you should be doing it in an

2934
02:50:23,209 --> 02:50:26,659
arena and you should have those arena's

2935
02:50:25,220 --> 02:50:29,479
be tied to the things we're talking

2936
02:50:26,659 --> 02:50:30,860
about so for example if you have memory

2937
02:50:29,479 --> 02:50:33,799
that gets freed every frame there should

2938
02:50:30,860 --> 02:50:34,971
be a frame arena and any time you want

2939
02:50:33,799 --> 02:50:36,140
to allocate something that gets freed at

2940
02:50:34,970 --> 02:50:39,470
the end of the frame you allocate it in

2941
02:50:36,140 --> 02:50:40,729
the frame arena if you want level load

2942
02:50:39,470 --> 02:50:42,229
stuff to be freed then you should be

2943
02:50:40,729 --> 02:50:43,729
allocating it in the levels arena and

2944
02:50:42,229 --> 02:50:48,649
the level arena gets freed when the

2945
02:50:43,729 --> 02:50:50,119
level goes away the witness did this not

2946
02:50:48,649 --> 02:50:51,289
exactly quite the same way you're

2947
02:50:50,120 --> 02:50:53,090
talking about but it had basically that

2948
02:50:51,290 --> 02:50:54,860
where you'd basically hook stuff up

2949
02:50:53,090 --> 02:50:57,190
where you'd say free this it like the

2950
02:50:54,860 --> 02:50:59,210
end of the function or something right

2951
02:50:57,190 --> 02:51:00,681
and I just I just don't like that

2952
02:50:59,209 --> 02:51:02,149
because if a function needs its own

2953
02:51:00,681 --> 02:51:05,569
stack then give it its own stack that's

2954
02:51:02,149 --> 02:51:07,069
only memory arena right and if a frame

2955
02:51:05,569 --> 02:51:09,351
needs it then give it an arena

2956
02:51:07,069 --> 02:51:10,970
that's what arenas are for and that way

2957
02:51:09,351 --> 02:51:15,290
you don't have to track each memory

2958
02:51:10,970 --> 02:51:17,810
piece individually right there's just no

2959
02:51:15,290 --> 02:51:20,271
point to it just get the memory in a

2960
02:51:17,810 --> 02:51:22,279
chunk for that just put all the memory

2961
02:51:20,271 --> 02:51:24,200
together that goes with that thing and

2962
02:51:22,280 --> 02:51:26,320
then free the whole thing at once so

2963
02:51:24,200 --> 02:51:29,290
you're not looping through all these

2964
02:51:26,319 --> 02:51:31,640
callbacks or god knows what else right

2965
02:51:29,290 --> 02:51:33,351
what are your thoughts on using macros

2966
02:51:31,640 --> 02:51:34,789
and C to make writing certain repeated

2967
02:51:33,351 --> 02:51:36,351
patterns shorter eg encapsulating

2968
02:51:34,790 --> 02:51:40,101
shimmie common patterns like pound to

2969
02:51:36,351 --> 02:51:45,980
find do FN for int I equals 0 I less

2970
02:51:40,101 --> 02:51:48,471
than n I plus plus F um I'm not averse

2971
02:51:45,979 --> 02:51:51,649
to it I think it's kind of too weak to

2972
02:51:48,470 --> 02:51:53,899
be that practically useful I prefer more

2973
02:51:51,649 --> 02:51:56,060
strong metaprogramming than that but I'm

2974
02:51:53,899 --> 02:51:57,829
not averse to it the problem I find with

2975
02:51:56,060 --> 02:52:00,020
it if you try to use it too much in

2976
02:51:57,829 --> 02:52:03,199
practice is that your ability to debug

2977
02:52:00,021 --> 02:52:06,649
the code tends to go down because

2978
02:52:03,199 --> 02:52:08,869
debuggers too often times don't do a

2979
02:52:06,648 --> 02:52:10,578
good job of stepping through macros they

2980
02:52:08,869 --> 02:52:13,668
typically won't really show you what you

2981
02:52:10,578 --> 02:52:15,559
need to see so as the macros you're

2982
02:52:13,668 --> 02:52:17,148
talking about get more complicated using

2983
02:52:15,559 --> 02:52:19,458
the debugger becomes more difficult so

2984
02:52:17,148 --> 02:52:27,618
that is the thing I would say to watch

2985
02:52:19,459 --> 02:52:28,760
out for there but Clemens mom since

2986
02:52:27,619 --> 02:52:30,409
you've worked at Microsoft would you

2987
02:52:28,760 --> 02:52:35,119
recommend working at Microsoft nowadays

2988
02:52:30,408 --> 02:52:37,128
for a new graduate um I guess what I

2989
02:52:35,119 --> 02:52:39,050
would say about Microsoft is like most

2990
02:52:37,129 --> 02:52:40,970
places that you could work that are

2991
02:52:39,049 --> 02:52:42,618
large companies I think it's less a

2992
02:52:40,969 --> 02:52:44,688
question about should you work at this

2993
02:52:42,619 --> 02:52:47,600
company and more about where you would

2994
02:52:44,689 --> 02:52:51,078
work in the company I think Microsoft

2995
02:52:47,600 --> 02:52:52,789
Google Facebook you know any of the

2996
02:52:51,078 --> 02:52:54,619
places that grads probably look at these

2997
02:52:52,789 --> 02:52:57,619
days

2998
02:52:54,619 --> 02:52:59,359
there probably are places in those

2999
02:52:57,619 --> 02:53:00,680
companies that are good to work at where

3000
02:52:59,359 --> 02:53:04,158
there are smart people doing interesting

3001
02:53:00,680 --> 02:53:07,550
things who will teach you something and

3002
02:53:04,158 --> 02:53:10,219
it'll be nice the question is can you

3003
02:53:07,549 --> 02:53:13,068
find those places right so I think

3004
02:53:10,219 --> 02:53:16,578
that's really the thing to focus on it's

3005
02:53:13,068 --> 02:53:19,248
not should I work at Microsoft it's can

3006
02:53:16,578 --> 02:53:21,139
I find a place in Microsoft where you

3007
02:53:19,248 --> 02:53:22,998
know where it's not just a dingus

3008
02:53:21,139 --> 02:53:24,228
festival you know and it's like there's

3009
02:53:22,998 --> 02:53:26,270
actually smart people doing smart things

3010
02:53:24,228 --> 02:53:28,519
I mean I bet the kernel team at

3011
02:53:26,270 --> 02:53:30,109
Microsoft is an amazing place to start

3012
02:53:28,520 --> 02:53:32,569
working after you get out of college

3013
02:53:30,109 --> 02:53:33,949
right there's probably some really smart

3014
02:53:32,568 --> 02:53:35,958
people there and they're probably doing

3015
02:53:33,949 --> 02:53:39,770
some interesting code I don't know maybe

3016
02:53:35,959 --> 02:53:43,520
not but I would guess right on the other

3017
02:53:39,770 --> 02:53:48,890
hand like the team responsible for the

3018
02:53:43,520 --> 02:53:50,810
Windows 8 Start menu was probably like

3019
02:53:48,889 --> 02:53:54,528
the worst place you could ever imagine

3020
02:53:50,809 --> 02:53:56,719
going or something right it was probably

3021
02:53:54,529 --> 02:53:59,359
about how to like line up the right XML

3022
02:53:56,719 --> 02:54:03,408
code to load the right like thing I

3023
02:53:59,359 --> 02:54:05,930
don't know right so I think that

3024
02:54:03,408 --> 02:54:07,458
generally that's my perspective on

3025
02:54:05,930 --> 02:54:10,729
working at large companies is it has

3026
02:54:07,459 --> 02:54:14,418
very little to do with the company and

3027
02:54:10,728 --> 02:54:16,519
has way more to do with where you are

3028
02:54:14,418 --> 02:54:17,779
and I

3029
02:54:16,520 --> 02:54:19,069
your life that's not helpful because

3030
02:54:17,779 --> 02:54:21,289
it'd be way better for me to say

3031
02:54:19,068 --> 02:54:22,670
something like yes like go work at

3032
02:54:21,289 --> 02:54:25,010
Google don't work at Microsoft or

3033
02:54:22,670 --> 02:54:26,359
something cuz it makes it easier but I

3034
02:54:25,010 --> 02:54:28,130
don't think that's realistic

3035
02:54:26,359 --> 02:54:30,199
I don't think companies generally are

3036
02:54:28,129 --> 02:54:32,658
good or bad unless they're very small

3037
02:54:30,199 --> 02:54:34,670
you know a very small company that has

3038
02:54:32,658 --> 02:54:37,578
10 employees is probably good or bad

3039
02:54:34,670 --> 02:54:39,648
right to work at but a company that has

3040
02:54:37,578 --> 02:54:43,189
over a thousand employees which all of

3041
02:54:39,648 --> 02:54:47,750
these companies do I really just don't

3042
02:54:43,189 --> 02:54:49,880
think you can I really don't think you

3043
02:54:47,750 --> 02:54:52,100
can make that determination I think

3044
02:54:49,879 --> 02:54:54,679
every team at those companies is

3045
02:54:52,100 --> 02:54:56,210
probably good or bad to work at and what

3046
02:54:54,680 --> 02:54:58,609
you have to do is figure out how you're

3047
02:54:56,209 --> 02:55:02,419
gonna suss out whether a team that you

3048
02:54:58,609 --> 02:55:05,090
might work on is good or bad but the

3049
02:55:02,420 --> 02:55:07,818
good news is and to put like a silver

3050
02:55:05,090 --> 02:55:11,090
lining on that I think what you could

3051
02:55:07,818 --> 02:55:14,148
say is take a job at Microsoft if you

3052
02:55:11,090 --> 02:55:15,529
get that offer right or just take

3053
02:55:14,148 --> 02:55:19,189
whatever the best offer is whoever's

3054
02:55:15,529 --> 02:55:21,560
paying you the most or whatever right if

3055
02:55:19,189 --> 02:55:24,470
you get multiple offers coming out of

3056
02:55:21,559 --> 02:55:25,578
Grant after you graduate to work at one

3057
02:55:24,469 --> 02:55:27,709
of these comfortable larger companies

3058
02:55:25,578 --> 02:55:30,619
take the best offer you can find and

3059
02:55:27,709 --> 02:55:33,500
then try to move around right when you

3060
02:55:30,619 --> 02:55:35,899
get there try to sniff around spend your

3061
02:55:33,500 --> 02:55:37,158
time your spare time you know do your

3062
02:55:35,898 --> 02:55:40,158
work during the day whatever they want

3063
02:55:37,158 --> 02:55:44,078
you to do do it and try to do it well so

3064
02:55:40,158 --> 02:55:49,180
that you have a reasonable reputation

3065
02:55:44,078 --> 02:55:52,818
sniff around and find out where those

3066
02:55:49,180 --> 02:55:55,158
good people are find somebody you like

3067
02:55:52,818 --> 02:55:58,639
and you trust you know do the networking

3068
02:55:55,158 --> 02:56:00,920
and then try to move to that team you

3069
02:55:58,639 --> 02:56:02,809
know think of your first six months or a

3070
02:56:00,920 --> 02:56:04,818
year at whatever company you go to as

3071
02:56:02,809 --> 02:56:06,978
you figuring out where to be in that

3072
02:56:04,818 --> 02:56:08,988
company and then go there because it's

3073
02:56:06,978 --> 02:56:11,000
very unlikely I mean maybe you know it's

3074
02:56:08,988 --> 02:56:13,100
possible I said Twitter I think at one

3075
02:56:11,000 --> 02:56:14,478
point maybe I don't know it's possible

3076
02:56:13,100 --> 02:56:16,010
that a company like Twitter literally

3077
02:56:14,478 --> 02:56:17,988
has no people working at it that you

3078
02:56:16,010 --> 02:56:21,199
would ever want to talk to or learn from

3079
02:56:17,988 --> 02:56:23,478
right it's possible but it's probably

3080
02:56:21,199 --> 02:56:27,109
not possible at like Facebook Google

3081
02:56:23,478 --> 02:56:28,818
Microsoft any of the really big

3082
02:56:27,109 --> 02:56:30,760
companies that have researched you know

3083
02:56:28,818 --> 02:56:34,398
serious research teams

3084
02:56:30,760 --> 02:56:36,228
it's probably just not the case that you

3085
02:56:34,398 --> 02:56:37,939
can't find some good teams there there's

3086
02:56:36,228 --> 02:56:41,989
gonna be good teams there and good

3087
02:56:37,939 --> 02:56:43,279
people on those teams and so I'd say I

3088
02:56:41,989 --> 02:56:46,039
would say that your perspective I'll

3089
02:56:43,279 --> 02:56:48,560
just be like go there and look for that

3090
02:56:46,040 --> 02:56:50,210
and then try to move there because when

3091
02:56:48,559 --> 02:56:52,010
you first start working your first job

3092
02:56:50,209 --> 02:56:53,449
out of college anyway there's gonna be

3093
02:56:52,010 --> 02:56:55,309
plenty of stuff you just need to get

3094
02:56:53,450 --> 02:56:58,490
used to like having a nine-to-five job

3095
02:56:55,309 --> 02:57:00,289
and not studying you know stuff at night

3096
02:56:58,489 --> 02:57:02,420
stuff right just getting used to you

3097
02:57:00,290 --> 02:57:04,550
like finding an apartment like you know

3098
02:57:02,420 --> 02:57:06,409
your first six months to a year you're

3099
02:57:04,549 --> 02:57:09,259
you've got life things to deal with

3100
02:57:06,409 --> 02:57:11,209
anyway trying to pay off school loans

3101
02:57:09,260 --> 02:57:14,568
and you know doing what you've got all

3102
02:57:11,209 --> 02:57:16,789
this stuff you're worrying about so you

3103
02:57:14,568 --> 02:57:18,500
know don't worry too much if you're in a

3104
02:57:16,790 --> 02:57:20,779
group that sucks right if you're in a

3105
02:57:18,500 --> 02:57:23,000
bad position there it's okay it's your

3106
02:57:20,779 --> 02:57:25,069
first job it's not necessarily gonna be

3107
02:57:23,000 --> 02:57:27,500
your dream job anyway it's fine

3108
02:57:25,068 --> 02:57:31,699
so just make the best of that I would

3109
02:57:27,500 --> 02:57:33,850
say and then spend some time get on

3110
02:57:31,700 --> 02:57:36,500
those company aliases that are like

3111
02:57:33,850 --> 02:57:38,930
research talks that people come and give

3112
02:57:36,500 --> 02:57:41,120
and when there are people presenting

3113
02:57:38,930 --> 02:57:43,609
stuff internal to the company also get

3114
02:57:41,120 --> 02:57:45,290
on those internal aliases read them see

3115
02:57:43,609 --> 02:57:47,680
what looks interesting go to those

3116
02:57:45,290 --> 02:57:51,020
people talk to them after their lecture

3117
02:57:47,680 --> 02:57:52,250
just make friends as best you can you

3118
02:57:51,020 --> 02:57:53,300
know some people are good at that symbol

3119
02:57:52,250 --> 02:57:55,159
are bad you know if you're bad at making

3120
02:57:53,299 --> 02:57:57,500
friends I apologize it makes it harder

3121
02:57:55,159 --> 02:57:58,760
right networking is a big deal but

3122
02:57:57,500 --> 02:58:00,379
trying to make friends try to find out

3123
02:57:58,760 --> 02:58:02,329
where those things are and then then see

3124
02:58:00,379 --> 02:58:04,309
if you can make some friends with

3125
02:58:02,329 --> 02:58:05,959
managers and people who are in those

3126
02:58:04,309 --> 02:58:07,129
departments and say can I come over and

3127
02:58:05,959 --> 02:58:08,648
work there how could I do that I'm

3128
02:58:07,129 --> 02:58:10,670
really shouldn't what you're doing

3129
02:58:08,648 --> 02:58:13,608
trying to make that move happen I think

3130
02:58:10,670 --> 02:58:16,579
that can work out for you because again

3131
02:58:13,609 --> 02:58:19,550
I there may be some companies that are

3132
02:58:16,579 --> 02:58:20,989
just so lousy at what they do that

3133
02:58:19,549 --> 02:58:23,119
there's literally nowhere there to work

3134
02:58:20,989 --> 02:58:26,779
that you can learn from and that may be

3135
02:58:23,120 --> 02:58:28,430
true but most of these companies that's

3136
02:58:26,779 --> 02:58:31,040
not true

3137
02:58:28,430 --> 02:58:34,370
so most of these companies are going to

3138
02:58:31,040 --> 02:58:36,710
have groups in them that are good and

3139
02:58:34,370 --> 02:58:40,220
you just have to find them and so I

3140
02:58:36,709 --> 02:58:43,009
that's I think the optimistic thing you

3141
02:58:40,219 --> 02:58:43,969
should focus on is that you know very

3142
02:58:43,010 --> 02:58:46,880
few of the

3143
02:58:43,969 --> 02:58:48,679
these companies once they reach a

3144
02:58:46,879 --> 02:58:50,528
certain size can get away with having

3145
02:58:48,680 --> 02:58:52,520
literally nobody could write like

3146
02:58:50,529 --> 02:58:54,738
there's gonna be good teams there

3147
02:58:52,520 --> 02:58:56,540
somewhere right and so you just got to

3148
02:58:54,738 --> 02:58:57,619
focus on finding them in and you're

3149
02:58:56,540 --> 02:59:01,850
gonna be one of the only people doing

3150
02:58:57,620 --> 02:59:03,890
that right because most people like you

3151
02:59:01,850 --> 02:59:06,350
know thinking about let me figure out

3152
02:59:03,889 --> 02:59:08,329
how much X comma X ml I can generate in

3153
02:59:06,350 --> 02:59:10,579
a day for this Windows Start menu most

3154
02:59:08,329 --> 02:59:12,648
programmers today like that so they're

3155
02:59:10,579 --> 02:59:17,148
not looking for they don't want to think

3156
02:59:12,648 --> 02:59:19,849
about memory management right so you're

3157
02:59:17,148 --> 02:59:21,858
you're not going to have to worry about

3158
02:59:19,850 --> 02:59:23,960
everyone wanting to work in that group

3159
02:59:21,859 --> 02:59:25,700
or anything there's a small number of

3160
02:59:23,959 --> 02:59:29,659
people who want to do serious work every

3161
02:59:25,700 --> 02:59:31,460
day and want to learn in if you're one

3162
02:59:29,659 --> 02:59:33,170
of those people who prioritizes that you

3163
02:59:31,459 --> 02:59:36,259
should be able to make those friends

3164
02:59:33,170 --> 02:59:38,629
make those connections get moved over

3165
02:59:36,260 --> 02:59:40,159
within a few years you're not gonna have

3166
02:59:38,629 --> 02:59:42,019
to spend ten years working at Microsoft

3167
02:59:40,159 --> 02:59:44,029
to find your way to a good group I don't

3168
02:59:42,020 --> 02:59:46,640
think if you're putting in the effort to

3169
02:59:44,029 --> 02:59:49,069
do so if you just go there and do

3170
02:59:46,639 --> 02:59:50,898
nothing then no you're gonna end up in

3171
02:59:49,068 --> 02:59:52,068
something where it's like XML all day or

3172
02:59:50,898 --> 02:59:55,189
whatever and that's just gonna be your

3173
02:59:52,068 --> 02:59:57,500
life right but if you're proactive I

3174
02:59:55,189 --> 03:00:00,170
think you can in most of these companies

3175
02:59:57,500 --> 03:00:01,909
move because again a lot of people

3176
03:00:00,170 --> 03:00:03,228
aren't gonna do that and a lot of people

3177
03:00:01,909 --> 03:00:05,000
are thinking more about career

3178
03:00:03,228 --> 03:00:06,648
advancement making more money right they

3179
03:00:05,000 --> 03:00:09,500
want to get promoted or whatever else

3180
03:00:06,648 --> 03:00:11,510
right just don't worry about that part

3181
03:00:09,500 --> 03:00:14,629
worry about how do I get to a good group

3182
03:00:11,510 --> 03:00:16,639
right and and then you're if you're not

3183
03:00:14,629 --> 03:00:18,469
doing what they're doing right they're

3184
03:00:16,639 --> 03:00:21,619
trying to be upwardly mobile you're

3185
03:00:18,469 --> 03:00:23,238
trying to be laterally mobile and get to

3186
03:00:21,620 --> 03:00:24,829
a place where you can be happy and

3187
03:00:23,238 --> 03:00:28,969
productive and be interest in your job

3188
03:00:24,829 --> 03:00:30,950
and learn from those other people so

3189
03:00:28,969 --> 03:00:34,909
that's what I would say and based on my

3190
03:00:30,950 --> 03:00:39,909
time at Microsoft I would say yeah I

3191
03:00:34,909 --> 03:00:45,760
don't like what that company does but

3192
03:00:39,909 --> 03:00:48,260
there are good people at it right and so

3193
03:00:45,760 --> 03:00:53,329
you know when you first start working

3194
03:00:48,260 --> 03:00:55,040
there do I want to work you know on the

3195
03:00:53,329 --> 03:00:56,420
sorts of things that they tend to do no

3196
03:00:55,040 --> 03:00:58,181
because I don't really like it I don't

3197
03:00:56,420 --> 03:01:01,370
approve of a lot of it

3198
03:00:58,181 --> 03:01:04,040
but as a first job or a place to go to

3199
03:01:01,370 --> 03:01:05,780
learn things are there places inside it

3200
03:01:04,040 --> 03:01:07,521
where you can do that absolutely and it

3201
03:01:05,780 --> 03:01:09,891
may be less true today than it was then

3202
03:01:07,521 --> 03:01:11,811
because when I was an intern at

3203
03:01:09,890 --> 03:01:13,940
Microsoft the caliber of people there

3204
03:01:11,810 --> 03:01:17,329
was way higher probably than it is now

3205
03:01:13,940 --> 03:01:20,060
just even as a function of its smaller

3206
03:01:17,329 --> 03:01:22,370
size remember the smaller the company is

3207
03:01:20,060 --> 03:01:24,409
the easier it is to have a high density

3208
03:01:22,370 --> 03:01:26,570
of good people when you get up to a huge

3209
03:01:24,409 --> 03:01:29,239
number of people it becomes a lot harder

3210
03:01:26,569 --> 03:01:33,440
to have them all be good right or the

3211
03:01:29,239 --> 03:01:34,760
ratio gets lower but do I think they've

3212
03:01:33,440 --> 03:01:36,319
somehow gotten to a place where there's

3213
03:01:34,760 --> 03:01:38,271
literally nobody good there no I I

3214
03:01:36,319 --> 03:01:40,549
really don't think so

3215
03:01:38,271 --> 03:01:42,681
I think they're just the good people are

3216
03:01:40,549 --> 03:01:43,640
far outweighed by the people who really

3217
03:01:42,681 --> 03:01:46,579
don't know what they're doing

3218
03:01:43,640 --> 03:01:48,379
but that's okay for a first job where

3219
03:01:46,579 --> 03:01:50,390
you can learn just go hunt down those

3220
03:01:48,379 --> 03:01:52,549
good people and they're there Microsoft

3221
03:01:50,390 --> 03:01:54,590
has a large research department too so

3222
03:01:52,549 --> 03:01:55,819
you know you can go do more theoretical

3223
03:01:54,590 --> 03:01:57,440
things there too if you can stand a

3224
03:01:55,819 --> 03:02:00,640
sideways move into that somehow is

3225
03:01:57,440 --> 03:02:00,640
another option too right

3226
03:02:00,670 --> 03:02:03,950
because they do a lot of research there

3227
03:02:02,690 --> 03:02:05,390
which is not the same as product

3228
03:02:03,950 --> 03:02:06,980
development it's so a lot of

3229
03:02:05,390 --> 03:02:09,729
opportunities and I would say that

3230
03:02:06,979 --> 03:02:12,829
that's the thing to focus on figure out

3231
03:02:09,729 --> 03:02:15,199
you know do a due diligence test first

3232
03:02:12,829 --> 03:02:16,851
is the company I'm going to literally so

3233
03:02:15,200 --> 03:02:19,130
bad that there's nobody good there and

3234
03:02:16,851 --> 03:02:21,829
nothing to learn right that could be

3235
03:02:19,129 --> 03:02:24,739
possible it's not true of Microsoft even

3236
03:02:21,829 --> 03:02:26,510
today I'm fairly certain right but you

3237
03:02:24,739 --> 03:02:27,709
know maybe some other company it really

3238
03:02:26,510 --> 03:02:30,050
is that bad okay

3239
03:02:27,709 --> 03:02:31,489
maybe then try to avoid that job but any

3240
03:02:30,049 --> 03:02:34,250
of the other jobs Google Microsoft

3241
03:02:31,489 --> 03:02:36,110
Facebook etc I think they're big enough

3242
03:02:34,250 --> 03:02:38,120
they've got teams in them that know what

3243
03:02:36,110 --> 03:02:40,101
they're doing somewhere there are people

3244
03:02:38,120 --> 03:02:42,641
there who know what they're doing

3245
03:02:40,101 --> 03:02:46,360
find those people try to work with them

3246
03:02:42,640 --> 03:02:46,359
and I think you'll be okay

3247
03:02:58,079 --> 03:03:01,109
do we still need a separate translation

3248
03:02:59,790 --> 03:03:02,970
unit for them as fees stuff in my

3249
03:03:01,109 --> 03:03:06,600
products I had no problems having it in

3250
03:03:02,969 --> 03:03:08,039
one unit um I just I remember there

3251
03:03:06,600 --> 03:03:10,260
being some reason it has to be in a

3252
03:03:08,040 --> 03:03:13,430
separate translation unit maybe for

3253
03:03:10,260 --> 03:03:17,068
dll's or something I was having trouble

3254
03:03:13,430 --> 03:03:19,470
so I don't know we can play with it

3255
03:03:17,068 --> 03:03:21,029
later if we really want to but I found

3256
03:03:19,469 --> 03:03:26,309
that I had to keep it in a separate

3257
03:03:21,030 --> 03:03:27,270
translation unit and it had to be C and

3258
03:03:26,309 --> 03:03:28,799
it wasn't so much that had to be

3259
03:03:27,270 --> 03:03:30,930
acceptance that it had to go through C

3260
03:03:28,799 --> 03:03:35,489
now it may be that that was only for

3261
03:03:30,930 --> 03:03:37,020
Visual Studio 2012 it may be this one

3262
03:03:35,489 --> 03:03:41,750
longer the case right but I that's what

3263
03:03:37,020 --> 03:03:41,750
I recall so that's a lot can I tell you

3264
03:03:51,079 --> 03:04:02,219
and yes it sounds like Neil and just

3265
03:03:56,728 --> 03:04:03,478
talking about asking like him for

3266
03:04:02,219 --> 03:04:05,938
example of where to go in facebook or

3267
03:04:03,478 --> 03:04:11,938
whatever so yeah this is exactly the

3268
03:04:05,939 --> 03:04:14,130
case if you happen to know through like

3269
03:04:11,939 --> 03:04:16,550
handmade here or somewhere else if you

3270
03:04:14,129 --> 03:04:19,889
happen to know people who you you trust

3271
03:04:16,549 --> 03:04:24,420
who work at these companies who you know

3272
03:04:19,889 --> 03:04:25,889
whose opinion you value try to see if

3273
03:04:24,420 --> 03:04:28,648
they'll help you see if they'll help you

3274
03:04:25,889 --> 03:04:30,478
figure out where to work right because

3275
03:04:28,648 --> 03:04:32,068
if you've got a friend at Facebook who

3276
03:04:30,478 --> 03:04:34,739
you know has similar programming

3277
03:04:32,068 --> 03:04:37,829
opinions to yours then you can ask them

3278
03:04:34,739 --> 03:04:39,090
hey do you happen to know where the

3279
03:04:37,829 --> 03:04:41,489
places are in here that might be

3280
03:04:39,090 --> 03:04:43,500
interesting to me right where would you

3281
03:04:41,489 --> 03:04:46,379
go where did you decide to work are you

3282
03:04:43,500 --> 03:04:48,689
happy in the division you're in if not

3283
03:04:46,379 --> 03:04:49,739
where would you go it when you can are

3284
03:04:48,689 --> 03:04:51,809
you gonna try to be somewhere else where

3285
03:04:49,739 --> 03:04:53,699
would that be right

3286
03:04:51,809 --> 03:04:55,199
and so sometimes you can look out and

3287
03:04:53,700 --> 03:04:56,909
have a friend at Google have a friend at

3288
03:04:55,200 --> 03:04:58,670
Facebook or maybe just someone online

3289
03:04:56,909 --> 03:05:00,478
like through the hand made hero

3290
03:04:58,670 --> 03:05:03,389
community like have a network or

3291
03:05:00,478 --> 03:05:07,349
something maybe you can find someone who

3292
03:05:03,389 --> 03:05:09,210
already works there right so there you

3293
03:05:07,350 --> 03:05:14,011
go

3294
03:05:09,210 --> 03:05:16,109
John Blow says you are so jealous that I

3295
03:05:14,011 --> 03:05:21,149
get to go to GDC next week and see all

3296
03:05:16,110 --> 03:05:26,131
the great talks yes yes John I of course

3297
03:05:21,149 --> 03:05:30,661
am although you know I think you have to

3298
03:05:26,130 --> 03:05:32,581
put into perspective that as a new

3299
03:05:30,661 --> 03:05:34,470
person in the game industry you just you

3300
03:05:32,581 --> 03:05:36,271
just don't really know you don't have

3301
03:05:34,470 --> 03:05:37,739
very much experience shipping games and

3302
03:05:36,271 --> 03:05:42,261
understanding how to develop games so

3303
03:05:37,739 --> 03:05:44,819
you can benefit a lot from those

3304
03:05:42,261 --> 03:05:46,649
advanced level GDC talks that you're

3305
03:05:44,819 --> 03:05:48,210
gonna go to that'll tell you all about

3306
03:05:46,649 --> 03:05:54,810
the stuff you need to know you know I'm

3307
03:05:48,210 --> 03:05:59,699
saying so I feel like yeah you just have

3308
03:05:54,810 --> 03:06:01,470
to bring your notebook and and and make

3309
03:05:59,700 --> 03:06:07,561
sure you take copious notes on things

3310
03:06:01,470 --> 03:06:10,550
like for example you may not know I I do

3311
03:06:07,560 --> 03:06:14,091
notice that in braids and in the witness

3312
03:06:10,550 --> 03:06:17,100
there were like no microtransactions and

3313
03:06:14,091 --> 03:06:18,631
so I feel like you've got a lot to learn

3314
03:06:17,101 --> 03:06:19,739
about microtransactions and I pretty

3315
03:06:18,630 --> 03:06:22,350
much guarantee you there's gonna be a

3316
03:06:19,739 --> 03:06:27,421
lot of really great talks about that at

3317
03:06:22,351 --> 03:06:29,521
the GDC because you know as you know

3318
03:06:27,421 --> 03:06:31,979
from going to the GDC games are not

3319
03:06:29,521 --> 03:06:32,489
about making games it's about making

3320
03:06:31,979 --> 03:06:35,671
money

3321
03:06:32,489 --> 03:06:41,729
and microtransactions are a very good

3322
03:06:35,671 --> 03:06:45,331
way to make money alright folks I am

3323
03:06:41,729 --> 03:06:47,279
gonna close down the stream here or I'm

3324
03:06:45,331 --> 03:06:49,761
gonna try it too anyway let's go ahead

3325
03:06:47,280 --> 03:06:49,761
and close this

3326
03:06:53,908 --> 03:06:59,020
by the way I don't know if we can get

3327
03:06:56,619 --> 03:07:03,699
this link into the into the annotate

3328
03:06:59,020 --> 03:07:07,119
into the annotation somehow but again

3329
03:07:03,699 --> 03:07:08,439
just to remind everyone martins has this

3330
03:07:07,119 --> 03:07:10,810
guide that martins made is just

3331
03:07:08,439 --> 03:07:12,220
absolutely fantastic so everything that

3332
03:07:10,809 --> 03:07:15,309
we did about removing the C runtime

3333
03:07:12,219 --> 03:07:17,349
library you don't have to go back and

3334
03:07:15,309 --> 03:07:19,959
watch my stream to figure out it all out

3335
03:07:17,350 --> 03:07:21,908
he has already put it everything we did

3336
03:07:19,959 --> 03:07:24,669
including the stuff that we were not

3337
03:07:21,908 --> 03:07:27,670
looking online for is all in here and

3338
03:07:24,670 --> 03:07:30,250
very well documented it's probably the

3339
03:07:27,670 --> 03:07:31,840
best guide I've ever seen for this and

3340
03:07:30,250 --> 03:07:34,869
it's a guy I wish was around when I

3341
03:07:31,840 --> 03:07:36,488
first was getting rid of the C runtime

3342
03:07:34,869 --> 03:07:39,430
library cuz it would have saved me a lot

3343
03:07:36,488 --> 03:07:40,779
of headaches actually so I highly

3344
03:07:39,430 --> 03:07:42,578
recommend this everyone should read it

3345
03:07:40,779 --> 03:07:45,220
it's very good

3346
03:07:42,578 --> 03:07:48,760
and any time nowadays that I am doing

3347
03:07:45,219 --> 03:07:51,188
this and I don't even bother going to

3348
03:07:48,760 --> 03:07:54,189
Emma Stan anymore I just go right to his

3349
03:07:51,189 --> 03:07:56,559
guide it's that good so definitely check

3350
03:07:54,189 --> 03:07:58,420
that out it's it's the best guide for

3351
03:07:56,559 --> 03:08:01,528
this that I've ever seen it's got

3352
03:07:58,420 --> 03:08:04,090
everything in one place it's it's great

3353
03:08:01,529 --> 03:08:05,380
alright thank you everyone for joining

3354
03:08:04,090 --> 03:08:06,460
me for an episode of hand made here it's

3355
03:08:05,379 --> 03:08:08,500
been a pleasure coding with you as

3356
03:08:06,459 --> 03:08:12,278
always I will be back tomorrow same time

3357
03:08:08,500 --> 03:08:13,529
same channel when we will go ahead and

3358
03:08:12,279 --> 03:08:16,090
do the things that I want to do today

3359
03:08:13,529 --> 03:08:18,488
when which I ended up deciding to get

3360
03:08:16,090 --> 03:08:20,770
rid of runtime memory instead but I'll

3361
03:08:18,488 --> 03:08:22,299
go ahead and do the distribution of

3362
03:08:20,770 --> 03:08:23,828
points on the hemisphere thing which was

3363
03:08:22,299 --> 03:08:26,828
my last things I want to do there with

3364
03:08:23,828 --> 03:08:29,738
our lighting sampling so hope you join

3365
03:08:26,828 --> 03:08:32,170
me for that and then next week we should

3366
03:08:29,738 --> 03:08:33,969
also have a little fun doing the sine

3367
03:08:32,170 --> 03:08:36,879
and cosine stuff that we wanted to do so

3368
03:08:33,969 --> 03:08:38,709
that should be fun too so hope see you

3369
03:08:36,879 --> 03:08:41,078
back here either tomorrow or next week

3370
03:08:38,709 --> 03:08:42,849
for that either way have fun programming

3371
03:08:41,078 --> 03:08:45,629
and I'll see everyone on the Internet

3372
03:08:42,850 --> 03:08:45,630
take it easy everybody

