1
00:00:02,149 --> 00:00:06,419
hello everybody and welcome to handmade

2
00:00:04,169 --> 00:00:09,179
Hero show recode a complete-game live on

3
00:00:06,419 --> 00:00:11,189
stream we are back today to try and play

4
00:00:09,179 --> 00:00:13,109
around a little bit with something that

5
00:00:11,189 --> 00:00:20,660
we're just we're basically just trying

6
00:00:13,109 --> 00:00:20,660
to solve a last little graphics puzzler

7
00:00:22,550 --> 00:00:31,649
and this puzzler comes about because I

8
00:00:27,800 --> 00:00:32,880
don't really know that anyone does 2-d

9
00:00:31,649 --> 00:00:35,759
game rendering the way that we're doing

10
00:00:32,880 --> 00:00:37,739
it and that's because I kind of just

11
00:00:35,759 --> 00:00:39,839
sort of stumbled on to a way of doing it

12
00:00:37,738 --> 00:00:42,839
that was not necessarily something I'd

13
00:00:39,840 --> 00:00:45,059
ever heard about before at all I you

14
00:00:42,840 --> 00:00:48,020
know people do a lot of stuff in the 3d

15
00:00:45,058 --> 00:00:49,738
world for how they do rendering of

16
00:00:48,020 --> 00:00:52,800
transparency order independent

17
00:00:49,738 --> 00:00:55,109
transparency but for 2d art it's not

18
00:00:52,799 --> 00:00:57,569
really something that's commonly looked

19
00:00:55,109 --> 00:00:59,340
into all that much because you know the

20
00:00:57,570 --> 00:01:03,780
state of the art is always in 3d these

21
00:00:59,340 --> 00:01:06,810
days you know 3d graphics is where all

22
00:01:03,780 --> 00:01:09,239
the graphics folks spend their time and

23
00:01:06,810 --> 00:01:11,430
so you know I don't know that many

24
00:01:09,239 --> 00:01:13,408
people sit around thinking anymore how

25
00:01:11,430 --> 00:01:17,640
do i render a sprite game because it's

26
00:01:13,409 --> 00:01:19,500
just not you know it's not what they see

27
00:01:17,640 --> 00:01:21,900
is the cutting edge for obvious reason

28
00:01:19,500 --> 00:01:24,209
but what we were doing it real like hey

29
00:01:21,900 --> 00:01:26,460
what if we use depth feeling to do order

30
00:01:24,209 --> 00:01:28,199
independent transparency here instead of

31
00:01:26,459 --> 00:01:32,009
using atomic framebuffer rights and it

32
00:01:28,200 --> 00:01:34,680
worked pretty pretty well and so it's

33
00:01:32,009 --> 00:01:36,659
kind of an interesting way to go and it

34
00:01:34,680 --> 00:01:40,229
sort of seems like the kind of thing we

35
00:01:36,659 --> 00:01:42,180
might want to do our rasterizer

36
00:01:40,228 --> 00:01:44,368
and our renderer works really great with

37
00:01:42,180 --> 00:01:45,960
this now and has order independent

38
00:01:44,368 --> 00:01:47,759
transparency which is really nice and

39
00:01:45,959 --> 00:01:50,459
does not require Tomic frame buffer

40
00:01:47,759 --> 00:01:53,819
rights to do it so it can run on older

41
00:01:50,459 --> 00:01:56,669
stuff as well but we do have one problem

42
00:01:53,819 --> 00:01:59,250
which is that we can't turn on multi

43
00:01:56,670 --> 00:02:01,049
sampling because we don't really have

44
00:01:59,250 --> 00:02:03,438
any way of making the depth feeling that

45
00:02:01,049 --> 00:02:05,729
we're doing work with multi sampling I

46
00:02:03,438 --> 00:02:07,798
and so that's why I say like yeah I'm

47
00:02:05,728 --> 00:02:09,270
not really sure what the obvious you

48
00:02:07,799 --> 00:02:10,950
know there is an obvious solution to

49
00:02:09,270 --> 00:02:12,300
that problem because I haven't heard of

50
00:02:10,949 --> 00:02:14,708
people doing 2d games it sways so I

51
00:02:12,300 --> 00:02:16,900
don't know

52
00:02:14,709 --> 00:02:19,390
if someone has done a 2-d game this way

53
00:02:16,900 --> 00:02:21,250
in the past I was unaware of it and so I

54
00:02:19,389 --> 00:02:23,889
don't know what you know solutions they

55
00:02:21,250 --> 00:02:25,870
may have already come up with for this

56
00:02:23,889 --> 00:02:28,059
unfortunately in that way I'm not sure

57
00:02:25,870 --> 00:02:29,789
what we would even search for her to

58
00:02:28,060 --> 00:02:32,310
determine if someone had ever published

59
00:02:29,789 --> 00:02:34,509
information about doing a game this way

60
00:02:32,310 --> 00:02:35,769
and furthermore if someone has in the

61
00:02:34,509 --> 00:02:37,120
game this way there's no guarantee they

62
00:02:35,769 --> 00:02:39,188
actually published it how do you think

63
00:02:37,120 --> 00:02:40,719
about it in the first place right a lot

64
00:02:39,188 --> 00:02:42,729
of times you know people come up with

65
00:02:40,719 --> 00:02:44,408
clever ideas and clever tricks they

66
00:02:42,729 --> 00:02:46,539
don't necessarily write about them so

67
00:02:44,408 --> 00:02:48,548
there may have been several games that

68
00:02:46,539 --> 00:02:50,318
did things this way and then they just

69
00:02:48,549 --> 00:02:51,819
never told anyone right or it just

70
00:02:50,318 --> 00:02:55,598
didn't bother because they had other

71
00:02:51,818 --> 00:02:58,619
things to do with their time so that's

72
00:02:55,598 --> 00:03:02,438
the problem we don't really know I and

73
00:02:58,620 --> 00:03:04,060
you know if like I said 3d graphics

74
00:03:02,438 --> 00:03:05,620
really high-end 3d graphics where you're

75
00:03:04,060 --> 00:03:10,150
like hey yeah you know if you want to

76
00:03:05,620 --> 00:03:14,590
run you know battlefields one or or doom

77
00:03:10,150 --> 00:03:16,389
or something then you have to have you

78
00:03:14,590 --> 00:03:17,919
know the super beefy graphics card and

79
00:03:16,389 --> 00:03:19,480
we're doing all kinds of crazy stuff

80
00:03:17,919 --> 00:03:23,829
under the hood so you know they're

81
00:03:19,479 --> 00:03:24,939
they're so far beyond what we're doing

82
00:03:23,829 --> 00:03:27,219
in handmade hero in terms of

83
00:03:24,939 --> 00:03:28,810
requirements or complexity you know this

84
00:03:27,219 --> 00:03:30,310
problem is not a problem they would

85
00:03:28,810 --> 00:03:32,739
probably ever care about it think about

86
00:03:30,310 --> 00:03:35,469
would be my guess it's like you know

87
00:03:32,739 --> 00:03:39,400
they're sixteen crazy trek new

88
00:03:35,469 --> 00:03:41,680
techniques pass this level of complexity

89
00:03:39,400 --> 00:03:43,120
already anyway and so they probably have

90
00:03:41,680 --> 00:03:45,219
a lot more stuff to do or they always

91
00:03:43,120 --> 00:03:47,590
have to baby do prefer tommix to solve

92
00:03:45,219 --> 00:03:50,378
it or they do some other crazy stuff you

93
00:03:47,590 --> 00:03:55,539
know who knows what they do but that's

94
00:03:50,378 --> 00:03:58,929
the situation so what I want to try and

95
00:03:55,539 --> 00:04:04,328
think about today is just is there some

96
00:03:58,930 --> 00:04:06,609
cheap and easy solution to being able to

97
00:04:04,329 --> 00:04:09,250
turn on multisample anti-aliasing if it

98
00:04:06,609 --> 00:04:11,709
exists reasonably on the card in

99
00:04:09,250 --> 00:04:14,979
question on the target platform we

100
00:04:11,709 --> 00:04:19,988
detect it's there if we want to allow

101
00:04:14,979 --> 00:04:22,990
the turning that on so that like edges

102
00:04:19,988 --> 00:04:25,288
of our cubes and stuff will be nice and

103
00:04:22,990 --> 00:04:25,288
clean

104
00:04:31,000 --> 00:04:38,620
the question is just is that something

105
00:04:34,569 --> 00:04:43,930
that currently existed for isn't it now

106
00:04:38,620 --> 00:04:48,490
ironically very ironically there

107
00:04:43,930 --> 00:04:49,930
actually is a old-school technique that

108
00:04:48,490 --> 00:04:54,009
would have worked here but I'm pretty

109
00:04:49,930 --> 00:04:58,329
sure it got removed from graphics card

110
00:04:54,009 --> 00:05:01,780
support entirely and that was there used

111
00:04:58,329 --> 00:05:05,620
to be a way to anti-alias the edges of

112
00:05:01,779 --> 00:05:16,659
things automatically so let me show you

113
00:05:05,620 --> 00:05:17,069
what that was here we go nope it's not

114
00:05:16,660 --> 00:05:25,870
it

115
00:05:17,069 --> 00:05:29,399
here it is so in fact that I might be

116
00:05:25,870 --> 00:05:29,399
able to get a better version of it here

117
00:05:30,418 --> 00:05:39,069
I so what you can see here is in the old

118
00:05:37,120 --> 00:05:42,759
days there was a thing here where you

119
00:05:39,069 --> 00:05:44,740
could say Oh polygon smooth hint which

120
00:05:42,759 --> 00:05:47,319
is indicates the sampling quality of

121
00:05:44,740 --> 00:05:49,478
anti-alias polygon hinting GL nicest can

122
00:05:47,319 --> 00:05:52,060
result in more pixel fragments being

123
00:05:49,478 --> 00:05:56,139
generated during risk rasterization if a

124
00:05:52,060 --> 00:06:05,280
larger filter function is applied right

125
00:05:56,139 --> 00:06:08,408
and that hint used to not refer to a

126
00:06:05,279 --> 00:06:12,489
multi sampling it used to refer to

127
00:06:08,408 --> 00:06:19,899
actually just anti-aliasing let me see

128
00:06:12,490 --> 00:06:21,579
if I can get that see here see if I can

129
00:06:19,899 --> 00:06:24,719
get documentation to talk about that a

130
00:06:21,579 --> 00:06:24,719
little quick there in here

131
00:06:24,860 --> 00:06:34,590
[Applause]

132
00:06:28,560 --> 00:06:34,589
you have to do like maybe this one

133
00:06:41,019 --> 00:06:45,319
so I guess I don't know if I can find

134
00:06:43,639 --> 00:06:50,750
some documentation that actually talks

135
00:06:45,319 --> 00:06:54,310
about it specifically I maybe I guess

136
00:06:50,750 --> 00:06:58,220
I'll give you the rough idea back before

137
00:06:54,310 --> 00:07:00,410
multi sampling was even thing if you

138
00:06:58,220 --> 00:07:03,320
turned on the polygon smooth hints it

139
00:07:00,410 --> 00:07:06,640
would actually just generate at the

140
00:07:03,319 --> 00:07:09,920
edges of polygons it would generate out

141
00:07:06,639 --> 00:07:18,229
anti-aliased pixels to smooth out the

142
00:07:09,920 --> 00:07:21,590
line right so that is actually what we

143
00:07:18,230 --> 00:07:24,170
would want here meaning what we would

144
00:07:21,589 --> 00:07:30,739
want to do is we would want to say app

145
00:07:24,170 --> 00:07:34,310
on the outer edges of our primitive you

146
00:07:30,740 --> 00:07:37,819
know not the interior one for every for

147
00:07:34,310 --> 00:07:40,009
every polygon we want it to just produce

148
00:07:37,819 --> 00:07:42,079
anti-alias pixels if it would do that

149
00:07:40,009 --> 00:07:44,420
for us we would be done that would be

150
00:07:42,079 --> 00:07:45,979
all we would need because then we could

151
00:07:44,420 --> 00:07:48,620
avoid multi sample anti-aliasing

152
00:07:45,980 --> 00:07:52,069
altogether because all we need is just

153
00:07:48,620 --> 00:07:53,810
for those lines themselves to have the

154
00:07:52,069 --> 00:08:06,709
anti-aliasing on them that's all we

155
00:07:53,810 --> 00:08:10,160
really need and there used to be a way

156
00:08:06,709 --> 00:08:13,459
to specify that exactly which is this

157
00:08:10,160 --> 00:08:15,140
which is the edge flag and what it was

158
00:08:13,459 --> 00:08:17,689
was when you output a primitive like a

159
00:08:15,139 --> 00:08:19,459
cube you could specify which edges were

160
00:08:17,689 --> 00:08:21,230
on the outside of the cube versus which

161
00:08:19,459 --> 00:08:23,659
edges were on the inside the cube so for

162
00:08:21,230 --> 00:08:28,520
example you've got one edge that runs

163
00:08:23,660 --> 00:08:30,500
down the middle of you know of every

164
00:08:28,519 --> 00:08:33,439
face of the cube the diagonal line that

165
00:08:30,500 --> 00:08:36,879
just pulls those two triangles together

166
00:08:33,440 --> 00:08:39,140
into a square shape for the cube right

167
00:08:36,879 --> 00:08:42,620
and what you would do is you set the

168
00:08:39,139 --> 00:08:44,809
edge flag on those to be so that the

169
00:08:42,620 --> 00:08:47,210
outside edges have a different edge

170
00:08:44,809 --> 00:08:49,759
Flags on the inside edge and then when

171
00:08:47,210 --> 00:08:51,060
it was going to do smoothing it would

172
00:08:49,759 --> 00:08:53,939
only do

173
00:08:51,059 --> 00:08:58,439
the smoothing on the edges that have the

174
00:08:53,940 --> 00:09:03,000
edge flags set right so there used to be

175
00:08:58,440 --> 00:09:05,910
a thing in in open Jill in graphics that

176
00:09:03,000 --> 00:09:07,980
would do what we wanted here but we

177
00:09:05,909 --> 00:09:09,449
don't have the option of using it

178
00:09:07,980 --> 00:09:12,149
anymore unfortunately

179
00:09:09,450 --> 00:09:16,290
because I believe at least unless I'm

180
00:09:12,149 --> 00:09:20,639
really very much mistaken I believe what

181
00:09:16,289 --> 00:09:23,730
happened was when they changed over to a

182
00:09:20,639 --> 00:09:25,710
multi sampling approach in open jail as

183
00:09:23,730 --> 00:09:27,300
the standard way to do anti-aliasing for

184
00:09:25,710 --> 00:09:30,450
obvious reasons right it works better

185
00:09:27,299 --> 00:09:35,778
when primitives abut each other and and

186
00:09:30,450 --> 00:09:39,330
all these are the sorts of things it

187
00:09:35,778 --> 00:09:44,309
went away so as far as I know that you

188
00:09:39,330 --> 00:09:51,290
know that's not available anymore um so

189
00:09:44,309 --> 00:09:51,289
yeah I don't really know of any way to

190
00:09:51,470 --> 00:09:56,009
to get that behavior back but I think

191
00:09:54,210 --> 00:09:57,480
that is what we would want and that's

192
00:09:56,009 --> 00:09:59,159
why I mentioned conservative

193
00:09:57,480 --> 00:10:00,659
rasterization yesterday because I was

194
00:09:59,159 --> 00:10:02,909
like that's kind of all we really want

195
00:10:00,659 --> 00:10:06,870
here is just conservative rasterization

196
00:10:02,909 --> 00:10:14,069
for all of our primitives and then we

197
00:10:06,870 --> 00:10:17,190
want to set those yet those those

198
00:10:14,070 --> 00:10:21,390
partially covered pixels based on on the

199
00:10:17,190 --> 00:10:23,310
coverage so I don't know I you know

200
00:10:21,389 --> 00:10:25,740
maybe we should try turning it on and

201
00:10:23,309 --> 00:10:27,659
see what it does maybe I should look at

202
00:10:25,740 --> 00:10:30,000
the spec and see what it does because

203
00:10:27,659 --> 00:10:32,759
maybe it still does do what we want to

204
00:10:30,000 --> 00:10:35,899
do I really don't know if that's not I

205
00:10:32,759 --> 00:10:35,899
want OpenGL specification

206
00:10:42,958 --> 00:10:56,239
I mean we can certainly take a look here

207
00:10:45,259 --> 00:10:56,240
polygon smooth so let's see

208
00:11:11,490 --> 00:11:15,180
certain aspects of jail behavior when

209
00:11:14,190 --> 00:11:19,850
there is room for variation is

210
00:11:15,179 --> 00:11:19,849
controlled with hints all right

211
00:11:21,470 --> 00:11:33,420
polygon sampling quality so it doesn't

212
00:11:30,659 --> 00:11:36,990
really say here it just says polygon

213
00:11:33,419 --> 00:11:41,879
sampling quality and polygon sampling

214
00:11:36,990 --> 00:11:45,509
quality doesn't really tell us much I to

215
00:11:41,879 --> 00:11:49,799
be completely honest great that is not a

216
00:11:45,509 --> 00:11:53,208
particularly I wonder why polygon smooth

217
00:11:49,799 --> 00:11:55,799
is believed to be on page one somewhere

218
00:11:53,208 --> 00:11:58,049
like where do you see polygon smooth on

219
00:11:55,799 --> 00:12:07,319
there is it in the PostScript hidden

220
00:11:58,049 --> 00:12:08,278
somewhere we just can't see so I really

221
00:12:07,320 --> 00:12:09,959
don't know since there's no

222
00:12:08,278 --> 00:12:13,049
specification I really don't know what

223
00:12:09,958 --> 00:12:16,939
that's going to do now I guess you know

224
00:12:13,049 --> 00:12:19,620
since we're in a brave new world here I

225
00:12:16,940 --> 00:12:21,540
guess one thing we could do is just see

226
00:12:19,620 --> 00:12:23,220
what happens when we turn it on I don't

227
00:12:21,539 --> 00:12:25,469
think that's a very good idea because we

228
00:12:23,220 --> 00:12:27,509
have no idea what we'll do on different

229
00:12:25,470 --> 00:12:30,600
graphics cards at all I mean now created

230
00:12:27,509 --> 00:12:32,338
that ordinarily the case probably one

231
00:12:30,600 --> 00:12:35,909
could say you never have any idea what's

232
00:12:32,339 --> 00:12:37,320
going on on a graphics card you haven't

233
00:12:35,909 --> 00:12:42,679
tested on anyway because they're always

234
00:12:37,320 --> 00:12:47,010
all random and broken driver-wise but I

235
00:12:42,679 --> 00:12:50,759
mean it guess for just in terms of our

236
00:12:47,009 --> 00:12:52,769
own edification I suppose maybe it's

237
00:12:50,759 --> 00:12:54,208
worth just saying hey let's just see

238
00:12:52,769 --> 00:12:57,679
what happens when we turn it on on this

239
00:12:54,208 --> 00:12:59,879
card let's just gain some insight right

240
00:12:57,679 --> 00:13:01,620
so what I'm going to do here is I'm

241
00:12:59,879 --> 00:13:04,980
going to turn multi sampling off because

242
00:13:01,620 --> 00:13:06,690
we you know that's sort of like the next

243
00:13:04,980 --> 00:13:08,399
step in terms of if we're going to try

244
00:13:06,690 --> 00:13:10,140
and write our own result shader that

245
00:13:08,399 --> 00:13:12,929
somehow will pick depth values that'll

246
00:13:10,139 --> 00:13:14,578
work properly in the def billing process

247
00:13:12,929 --> 00:13:19,739
then we can definitely do that

248
00:13:14,578 --> 00:13:21,870
but for right now we're going to avoid

249
00:13:19,740 --> 00:13:24,000
that so let's take a look at multi

250
00:13:21,870 --> 00:13:25,159
sampling and put it to 12 so it's

251
00:13:24,000 --> 00:13:27,509
already false

252
00:13:25,159 --> 00:13:30,269
okay so if I run the program then we

253
00:13:27,509 --> 00:13:33,480
should get just our standard situation

254
00:13:30,269 --> 00:13:35,549
which we do and so I'm going to try

255
00:13:33,480 --> 00:13:37,560
turning on the polygon smooth hand and

256
00:13:35,549 --> 00:13:39,899
again I have no idea what that's going

257
00:13:37,559 --> 00:13:41,339
to do because I you know you just saw me

258
00:13:39,899 --> 00:13:43,829
look at the spec and the spec literally

259
00:13:41,340 --> 00:13:46,769
says nothing it's just like what does

260
00:13:43,830 --> 00:13:49,440
this do we don't know we don't know and

261
00:13:46,769 --> 00:13:58,350
now neither do you so what we're going

262
00:13:49,440 --> 00:14:03,560
to do is we're going to call GL hint all

263
00:13:58,350 --> 00:14:07,560
right and we're going to say GL nicest

264
00:14:03,559 --> 00:14:09,869
oops you can see here that the hint I

265
00:14:07,559 --> 00:14:12,089
specified is the target in the mode so

266
00:14:09,870 --> 00:14:14,100
we want nicest which is the most you

267
00:14:12,090 --> 00:14:18,660
know would be the most smoothest

268
00:14:14,100 --> 00:14:21,320
whatever and then we want GL polygon

269
00:14:18,659 --> 00:14:21,319
smooth hint

270
00:14:21,860 --> 00:14:28,379
well I'll type it in myself if the

271
00:14:26,340 --> 00:14:32,690
browser does not want me to actually

272
00:14:28,379 --> 00:14:35,429
select it so now if I run this

273
00:14:32,690 --> 00:14:42,180
presumably nothing will happen I don't

274
00:14:35,429 --> 00:14:44,849
know yeah I mean I don't see any

275
00:14:42,179 --> 00:14:46,979
difference there it doesn't look like

276
00:14:44,850 --> 00:14:49,980
it's producing any output values around

277
00:14:46,980 --> 00:14:52,920
edges for all I could to serve those

278
00:14:49,980 --> 00:14:55,649
just look exactly the same to me so I'm

279
00:14:52,919 --> 00:14:58,949
pretty sure it's not doing anything with

280
00:14:55,649 --> 00:15:02,730
that with that hint but I don't really

281
00:14:58,950 --> 00:15:06,240
know now granted I guess one thing that

282
00:15:02,730 --> 00:15:09,810
is true is that in the old days in order

283
00:15:06,240 --> 00:15:14,570
to get that a polygon smooth hint to

284
00:15:09,809 --> 00:15:14,569
work though you had to turn on GL blend

285
00:15:18,500 --> 00:15:25,740
you know of course I don't want GL blend

286
00:15:23,120 --> 00:15:28,710
but I guess I could just check real

287
00:15:25,740 --> 00:15:35,370
quick this won't work properly when I do

288
00:15:28,710 --> 00:15:37,740
this but just for the sake of seeing

289
00:15:35,370 --> 00:15:38,528
whether those it's ever doing anything

290
00:15:37,740 --> 00:15:41,318
there

291
00:15:38,528 --> 00:15:45,639
I still don't see any any evidence that

292
00:15:41,318 --> 00:15:49,748
anyone was producing any kind of alpha

293
00:15:45,639 --> 00:15:51,370
all right so yeah I didn't have any real

294
00:15:49,749 --> 00:15:53,490
hopes that that was going to help us at

295
00:15:51,370 --> 00:15:53,490
all

296
00:15:55,198 --> 00:16:01,599
and hey not surprising we have good so I

297
00:15:59,409 --> 00:16:05,588
guess what we want to do now is say okay

298
00:16:01,600 --> 00:16:09,999
all right let me go ahead and put the

299
00:16:05,589 --> 00:16:12,249
multi sampling back on and if I remember

300
00:16:09,999 --> 00:16:14,829
correctly right now what we should okay

301
00:16:12,249 --> 00:16:21,278
I don't even think this would be working

302
00:16:14,828 --> 00:16:26,438
at the moment but I guess it is uh what

303
00:16:21,278 --> 00:16:31,269
is going on very slow frame rate are we

304
00:16:26,438 --> 00:16:33,969
actually calling the we're not actually

305
00:16:31,269 --> 00:16:36,730
calling the new result so that's just if

306
00:16:33,970 --> 00:16:42,879
we are doing the frame buffer resolve

307
00:16:36,730 --> 00:16:47,438
here so that's just the cost of doing

308
00:16:42,879 --> 00:16:55,180
this I guess or the cost of having so

309
00:16:47,438 --> 00:16:57,328
much multi sampling happening one or the

310
00:16:55,179 --> 00:16:57,328
other

311
00:16:58,049 --> 00:17:01,620
all right so

312
00:17:09,568 --> 00:17:19,230
I'm not sure why that multisample

313
00:17:12,509 --> 00:17:22,769
resolve takes as long as it does now I

314
00:17:19,230 --> 00:17:25,199
guess I mean one thing we could say here

315
00:17:22,769 --> 00:17:30,240
is that well you know the multi sampling

316
00:17:25,199 --> 00:17:33,538
it should be eight times slower in

317
00:17:30,240 --> 00:17:35,159
certain circumstances right but you know

318
00:17:33,538 --> 00:17:36,599
since it's multi sample interesting it

319
00:17:35,159 --> 00:17:37,740
should only be eight times slower at

320
00:17:36,599 --> 00:17:40,788
edges of things

321
00:17:37,740 --> 00:17:42,899
it should not be eight times slower

322
00:17:40,788 --> 00:17:46,408
anytime we're just filling something

323
00:17:42,898 --> 00:17:48,239
solid that's entirely covered so unless

324
00:17:46,409 --> 00:17:49,889
this graphics card is really stupid

325
00:17:48,240 --> 00:17:52,500
which again it's a very old graphics

326
00:17:49,888 --> 00:17:56,418
card so maybe it actually is that's not

327
00:17:52,500 --> 00:17:59,450
a unless that should be taken lightly

328
00:17:56,419 --> 00:18:02,129
because it's again very old

329
00:17:59,450 --> 00:18:07,110
none of our stuff that we're doing here

330
00:18:02,128 --> 00:18:12,000
as far as I know anyway would ever cause

331
00:18:07,109 --> 00:18:16,168
the graphics card to evaluate all pixels

332
00:18:12,000 --> 00:18:20,669
in a sample all samples in a pixel

333
00:18:16,169 --> 00:18:23,220
automatically I don't think anyway

334
00:18:20,669 --> 00:18:25,980
now I could be wrong about that but that

335
00:18:23,220 --> 00:18:35,519
was just what I thought anyway

336
00:18:25,980 --> 00:18:37,230
um and I suppose there's really no way

337
00:18:35,519 --> 00:18:39,179
for us to really determine that at this

338
00:18:37,230 --> 00:18:40,700
point because you know normally the way

339
00:18:39,179 --> 00:18:44,278
you would check that is you can actually

340
00:18:40,700 --> 00:18:45,750
get debug information about your

341
00:18:44,278 --> 00:18:48,240
like you know on modern if you're using

342
00:18:45,750 --> 00:18:50,759
like n sight or something like this you

343
00:18:48,240 --> 00:18:53,399
can actually ask there's usually a way

344
00:18:50,759 --> 00:18:55,409
to find out will this thing be evaluated

345
00:18:53,398 --> 00:18:58,469
per sample or not like will it will it

346
00:18:55,409 --> 00:19:01,139
be an efficient shader for multi sample

347
00:18:58,470 --> 00:19:02,610
Accor won't it be but we normally have

348
00:19:01,138 --> 00:19:04,528
the ability to ask that I don't think on

349
00:19:02,609 --> 00:19:07,849
this configuration it could be wrong

350
00:19:04,528 --> 00:19:07,849
about that but I don't think the can

351
00:19:09,630 --> 00:19:15,630
so yeah so right now since we're running

352
00:19:12,269 --> 00:19:18,450
so slow now you know what I could do and

353
00:19:15,630 --> 00:19:20,640
this is probably what we should do now I

354
00:19:18,450 --> 00:19:23,190
think about it if I could set our

355
00:19:20,640 --> 00:19:25,190
resolution down and that would let us

356
00:19:23,190 --> 00:19:29,370
run into higher framerate temporarily

357
00:19:25,190 --> 00:19:32,400
right let me set us at a low resolution

358
00:19:29,369 --> 00:19:33,839
and by running the really low resolution

359
00:19:32,400 --> 00:19:35,250
that would alleviate that problem if

360
00:19:33,839 --> 00:19:36,899
that was the problem it does look like

361
00:19:35,250 --> 00:19:39,769
that was part of the problem anyway

362
00:19:36,900 --> 00:19:39,769
right

363
00:19:40,519 --> 00:19:46,049
so it may just be that it was too much

364
00:19:43,759 --> 00:19:46,980
memory for the rest or to deal with or

365
00:19:46,049 --> 00:19:48,930
something like this because you can see

366
00:19:46,980 --> 00:19:53,279
that if by just setting the resolution

367
00:19:48,930 --> 00:19:57,240
down a bit we were in totally fine shape

368
00:19:53,279 --> 00:20:01,049
all of a sudden so yeah if you look at

369
00:19:57,240 --> 00:20:04,349
what's going on here you can kind of see

370
00:20:01,049 --> 00:20:05,789
a tons of artifacts related to exactly

371
00:20:04,349 --> 00:20:08,669
the problem that I'm talking about in

372
00:20:05,789 --> 00:20:10,950
terms of turning on multi sampling so

373
00:20:08,670 --> 00:20:12,750
let's take a look here I don't know if I

374
00:20:10,950 --> 00:20:23,279
can turn can I turn multi sampling on

375
00:20:12,750 --> 00:20:26,430
and off yeah so here is us without

376
00:20:23,279 --> 00:20:28,740
running multi sampling and what you can

377
00:20:26,430 --> 00:20:31,289
notice is that you know all of this

378
00:20:28,740 --> 00:20:36,390
stuff can I let me let me see if I can

379
00:20:31,289 --> 00:20:38,819
zoom in a little bit here so here's us

380
00:20:36,390 --> 00:20:40,590
without multi sampling and you can see

381
00:20:38,819 --> 00:20:44,339
like these edges are really hard and

382
00:20:40,589 --> 00:20:46,409
everything right and if I turn on multi

383
00:20:44,339 --> 00:20:48,959
sampling you can notice that those edges

384
00:20:46,410 --> 00:20:50,850
smooth out really nicely so you can see

385
00:20:48,960 --> 00:20:52,799
how multi sampling really helps us

386
00:20:50,849 --> 00:20:55,649
they're a lot like we would like to have

387
00:20:52,799 --> 00:20:58,379
the ability to turn that on you know I'm

388
00:20:55,650 --> 00:21:00,330
saying but we end up with those

389
00:20:58,380 --> 00:21:03,000
artifacts like I'm talking about and

390
00:21:00,329 --> 00:21:05,909
those artifacts are coming from that

391
00:21:03,000 --> 00:21:08,279
failure to pick the Z value in a

392
00:21:05,910 --> 00:21:10,860
sensible way right at least I assume

393
00:21:08,279 --> 00:21:12,799
that's what they're coming from meaning

394
00:21:10,859 --> 00:21:16,169
that when we get to the edges of things

395
00:21:12,799 --> 00:21:20,549
we end up in this problem where because

396
00:21:16,170 --> 00:21:23,470
it's the edge of a primitive we you know

397
00:21:20,549 --> 00:21:25,750
we end up taking multiple samples there

398
00:21:23,470 --> 00:21:28,298
and when we take multiple samples there

399
00:21:25,750 --> 00:21:30,130
we don't necessarily pick the right

400
00:21:28,298 --> 00:21:33,119
depth value for death-dealing and

401
00:21:30,130 --> 00:21:35,890
instead of peeling the next value down

402
00:21:33,119 --> 00:21:39,459
we know we spend all of our depth peels

403
00:21:35,890 --> 00:21:42,038
on the same you know triangle

404
00:21:39,460 --> 00:21:44,558
essentially just picking successively

405
00:21:42,038 --> 00:21:46,210
lower Z values of that same triangle as

406
00:21:44,558 --> 00:21:54,700
it passes through the pixel at multiple

407
00:21:46,210 --> 00:22:00,329
samples right so yeah that is the

408
00:21:54,700 --> 00:22:00,330
problem that we have I also don't know

409
00:22:11,220 --> 00:22:17,759
there's something else they also don't

410
00:22:13,480 --> 00:22:22,029
know so if you have alpha discard on

411
00:22:17,759 --> 00:22:28,720
which we do right we discard alpha

412
00:22:22,029 --> 00:22:40,210
values that are zero does the multi

413
00:22:28,720 --> 00:22:44,019
sample multi sample discard alpha if I

414
00:22:40,210 --> 00:22:47,650
have multi sampling on does the discard

415
00:22:44,019 --> 00:22:54,779
create a place where things will get

416
00:22:47,650 --> 00:22:54,780
sampled more and I'm just curious

417
00:23:26,029 --> 00:23:28,990
- today

418
00:23:44,339 --> 00:23:48,029
so this is the question I'm talking

419
00:23:46,619 --> 00:23:49,769
about I don't necessarily trust this

420
00:23:48,029 --> 00:23:54,509
page I would trust the specification

421
00:23:49,769 --> 00:23:55,230
more but this is sort of what I'm

422
00:23:54,509 --> 00:23:58,829
talking about

423
00:23:55,230 --> 00:24:03,509
basically what I want to know is if I

424
00:23:58,829 --> 00:24:05,819
have a pixel whose alpha discard you

425
00:24:03,509 --> 00:24:08,400
know triggers so the alpha value of the

426
00:24:05,819 --> 00:24:12,259
pixel is zero so it triggers an alpha

427
00:24:08,400 --> 00:24:16,170
discard does the graphics card then try

428
00:24:12,259 --> 00:24:19,200
all the samples individually to see if

429
00:24:16,170 --> 00:24:22,230
they would all have discarded or

430
00:24:19,200 --> 00:24:24,420
actually sated ultimately before you

431
00:24:22,230 --> 00:24:27,650
know when it evaluates this card does it

432
00:24:24,420 --> 00:24:30,570
evaluate discard based on all 16

433
00:24:27,650 --> 00:24:34,740
potentially at any time or is it always

434
00:24:30,569 --> 00:24:36,720
going to do the 16 samples only in the

435
00:24:34,740 --> 00:24:39,900
case where it thinks that the edge of a

436
00:24:36,720 --> 00:24:48,870
primitive passes through it and I don't

437
00:24:39,900 --> 00:24:50,220
know but I so anyway so that's the

438
00:24:48,869 --> 00:24:50,489
problem that we're dealing with right

439
00:24:50,220 --> 00:24:56,150
now

440
00:24:50,490 --> 00:24:59,039
is that that artifact problem basically

441
00:24:56,150 --> 00:25:01,470
because as you can see and I guess this

442
00:24:59,039 --> 00:25:03,450
sort of gives us some information in

443
00:25:01,470 --> 00:25:06,900
terms of whether this technique works

444
00:25:03,450 --> 00:25:08,819
well or not is that yet you know if I

445
00:25:06,900 --> 00:25:12,960
just look at the quality difference in

446
00:25:08,819 --> 00:25:15,049
the game you know as I move around I

447
00:25:12,960 --> 00:25:18,509
really feel like that multi sample

448
00:25:15,049 --> 00:25:23,460
anti-aliasing is doing a really good job

449
00:25:18,509 --> 00:25:25,680
you know making the game look better I

450
00:25:23,460 --> 00:25:27,720
think it's doing its job of fussing up

451
00:25:25,680 --> 00:25:29,430
those edges just you know it's not

452
00:25:27,720 --> 00:25:32,720
making anything else look any more

453
00:25:29,430 --> 00:25:36,690
blurry it's just luring those edges and

454
00:25:32,720 --> 00:25:38,309
that's exactly what I want so I do think

455
00:25:36,690 --> 00:25:39,870
it's worth pursuing a little bit more

456
00:25:38,309 --> 00:25:43,409
because it does make the game look

457
00:25:39,869 --> 00:25:45,629
better I don't know whether in the final

458
00:25:43,410 --> 00:25:49,320
analysis it will but you know I do feel

459
00:25:45,630 --> 00:25:51,990
like it will because although in the

460
00:25:49,319 --> 00:25:53,730
outer you know in the outside areas so

461
00:25:51,990 --> 00:25:56,609
areas that actually will look more like

462
00:25:53,730 --> 00:25:57,450
this in the game will be stamping a lot

463
00:25:56,609 --> 00:26:03,319
of ground cover

464
00:25:57,450 --> 00:26:03,319
and stuff onto onto things probably I

465
00:26:03,528 --> 00:26:08,730
guess what I would say is in the

466
00:26:06,538 --> 00:26:10,440
interior areas it's highly likely that

467
00:26:08,730 --> 00:26:11,970
there will be rooms that look more or

468
00:26:10,440 --> 00:26:15,240
less exactly like this there'll be a

469
00:26:11,970 --> 00:26:17,788
texture map on the cubes for like making

470
00:26:15,240 --> 00:26:20,788
it look like a tile like a tiled you

471
00:26:17,788 --> 00:26:23,158
know stone floor or something but it'll

472
00:26:20,788 --> 00:26:26,099
still have this sort of look this is

473
00:26:23,159 --> 00:26:29,669
what i roughly wanted and so i do think

474
00:26:26,099 --> 00:26:32,099
that you would see these line effects

475
00:26:29,669 --> 00:26:34,950
maybe not in a stationary version as

476
00:26:32,099 --> 00:26:37,678
much but as it moves that sparkle that

477
00:26:34,950 --> 00:26:40,649
you get from the ante you know from the

478
00:26:37,679 --> 00:26:45,950
those hard edges so i feel like turning

479
00:26:40,648 --> 00:26:45,949
that on i feel like you get a much nicer

480
00:26:47,240 --> 00:26:53,370
much nicer effect almost everywhere all

481
00:26:51,000 --> 00:26:56,339
the time and so it's really just a case

482
00:26:53,369 --> 00:26:58,319
of could we fix those artifacts because

483
00:26:56,339 --> 00:27:00,928
if we can fix those artifacts I think

484
00:26:58,319 --> 00:27:04,528
it's a definite yes and we would just

485
00:27:00,929 --> 00:27:06,690
want to turn that on on any card that

486
00:27:04,528 --> 00:27:09,388
that we thought could do it which would

487
00:27:06,690 --> 00:27:11,130
probably be most of them given how old

488
00:27:09,388 --> 00:27:12,750
this card is any modern card can do

489
00:27:11,130 --> 00:27:15,260
multisample antialiasing i would think

490
00:27:12,750 --> 00:27:15,259
just fine

491
00:27:19,079 --> 00:27:28,648
so yeah this is you know also I suppose

492
00:27:24,839 --> 00:27:33,808
the case where it would be nice to be

493
00:27:28,648 --> 00:27:35,878
able to drill down to a pixel and see

494
00:27:33,808 --> 00:27:38,069
what was going on there being able to

495
00:27:35,878 --> 00:27:39,538
like click on you know that and see

496
00:27:38,069 --> 00:27:45,778
which you know you could do if you had a

497
00:27:39,538 --> 00:27:48,028
graphics graphics tool but yeah it seems

498
00:27:45,778 --> 00:27:50,128
pretty clear to me what's going on like

499
00:27:48,028 --> 00:27:51,690
you know I feel like I can fairly

500
00:27:50,128 --> 00:27:54,028
confidently say that that's just a

501
00:27:51,690 --> 00:28:02,369
question of of depth picking being a

502
00:27:54,028 --> 00:28:05,339
problem and it's something you know it's

503
00:28:02,368 --> 00:28:07,949
something where the def peel is not

504
00:28:05,339 --> 00:28:13,439
picking a V value that allows it to ever

505
00:28:07,950 --> 00:28:25,470
get down to the actual to the actual

506
00:28:13,440 --> 00:28:30,350
thing it's peeling off I think I guess

507
00:28:25,470 --> 00:28:37,169
one thing we could do is try to draw

508
00:28:30,349 --> 00:28:38,428
something that was clearer that way like

509
00:28:37,169 --> 00:28:39,749
in order to figure out what the bug

510
00:28:38,429 --> 00:28:43,499
actually was there we could try

511
00:28:39,749 --> 00:28:48,558
something where we draw like you know

512
00:28:43,499 --> 00:28:48,558
solid colors that see you know what they

513
00:28:49,548 --> 00:28:53,480
what results they produce

514
00:28:59,910 --> 00:29:05,410
Jonica any ways that we could easily

515
00:29:02,410 --> 00:29:08,350
determine what was going on at these

516
00:29:05,410 --> 00:29:13,600
pixels because I'm assuming that those

517
00:29:08,349 --> 00:29:16,649
pixels are because the tree has that

518
00:29:13,599 --> 00:29:20,500
shadow and it's where the shadow

519
00:29:16,650 --> 00:29:24,809
overlaps the edge of the cube going

520
00:29:20,500 --> 00:29:24,808
downward right

521
00:29:33,190 --> 00:29:38,159
you

522
00:29:35,099 --> 00:29:43,648
so I'm assuming that the reason that we

523
00:29:38,159 --> 00:29:47,639
don't see any artifacts on the flat face

524
00:29:43,648 --> 00:29:53,388
of the cube right is because the cube

525
00:29:47,638 --> 00:29:59,668
itself always have a constant V value

526
00:29:53,388 --> 00:30:01,709
right so you've got one thing drawing

527
00:29:59,669 --> 00:30:04,350
the top of another thing neither of them

528
00:30:01,710 --> 00:30:08,250
have primitive edges happening at this

529
00:30:04,349 --> 00:30:10,378
point and so neither of them are

530
00:30:08,250 --> 00:30:13,859
producing Z values that need to get

531
00:30:10,378 --> 00:30:16,378
peeled away however when you get out to

532
00:30:13,859 --> 00:30:21,418
here I'm guessing that's the edge the

533
00:30:16,378 --> 00:30:24,509
primitive edge of the of the tree so

534
00:30:21,419 --> 00:30:26,429
multi sampling would be enabled although

535
00:30:24,509 --> 00:30:29,308
that's does alpha value maybe the Alpha

536
00:30:26,429 --> 00:30:33,120
value isn't quite zero there for the

537
00:30:29,308 --> 00:30:36,898
tree I guess that's one thing that could

538
00:30:33,119 --> 00:30:41,508
check we could Jack all alpha values to

539
00:30:36,898 --> 00:30:41,508
50% let's let's see if that's true

540
00:30:44,509 --> 00:30:48,360
so what I'm going to do here it's just

541
00:30:46,589 --> 00:30:49,980
going to go in and say well okay I can't

542
00:30:48,359 --> 00:30:51,599
quite see because the Alpha values are

543
00:30:49,980 --> 00:30:58,019
very subtle

544
00:30:51,599 --> 00:31:00,298
let's try jackin those alpha values up

545
00:30:58,019 --> 00:31:03,569
so we can see them so what I'm going to

546
00:31:00,298 --> 00:31:06,929
do here is I'm going to say okay you

547
00:31:03,569 --> 00:31:08,220
know if the mod color a is over the

548
00:31:06,929 --> 00:31:10,110
Alpha threshold we're going to draw it

549
00:31:08,220 --> 00:31:12,179
otherwise going to discard it when we

550
00:31:10,109 --> 00:31:17,908
actually go to draw it I'm going to say

551
00:31:12,179 --> 00:31:20,190
the mod color a equals 0.5 right so this

552
00:31:17,909 --> 00:31:22,379
way you know we'll get anywhere that

553
00:31:20,190 --> 00:31:28,649
there was any alpha at all

554
00:31:22,378 --> 00:31:30,449
we'll always see something clear and so

555
00:31:28,648 --> 00:31:31,288
that at least validates my hypothesis

556
00:31:30,450 --> 00:31:33,870
that that's what that is

557
00:31:31,288 --> 00:31:36,750
so back basically the edge of the tree

558
00:31:33,869 --> 00:31:41,788
shadow and I'm assuming that's the

559
00:31:36,750 --> 00:31:44,909
primitive edge of the try of the of the

560
00:31:41,788 --> 00:31:46,849
sprite as well we can also I suppose Val

561
00:31:44,909 --> 00:31:49,310
validate that assumption

562
00:31:46,849 --> 00:31:51,829
and by forcing everybody to have alpha

563
00:31:49,309 --> 00:31:54,200
all the time and yet you can see that's

564
00:31:51,829 --> 00:31:55,849
the edge of the primitive as well so

565
00:31:54,200 --> 00:31:58,220
that's what's happening there

566
00:31:55,849 --> 00:32:00,469
which is good at least I'm not you know

567
00:31:58,220 --> 00:32:02,329
at least I can validate that I'm not

568
00:32:00,470 --> 00:32:07,400
completely out to lunch in terms of what

569
00:32:02,329 --> 00:32:12,139
that might be so that's what's going on

570
00:32:07,400 --> 00:32:13,790
that's the edge of this triangle that's

571
00:32:12,140 --> 00:32:14,990
being used to draw the tree well the

572
00:32:13,789 --> 00:32:17,899
bottom triangle is being used to draw

573
00:32:14,990 --> 00:32:20,180
the tree and there is an alpha value

574
00:32:17,900 --> 00:32:23,060
there at the if it's just subtle it's

575
00:32:20,180 --> 00:32:25,190
low but it's there and so that's why

576
00:32:23,059 --> 00:32:28,460
it's drawing it in and that's where

577
00:32:25,190 --> 00:32:33,830
those artifacts are coming from is that

578
00:32:28,460 --> 00:32:35,990
that process so what I assume is

579
00:32:33,829 --> 00:32:38,319
happening is because the tree is getting

580
00:32:35,990 --> 00:32:45,160
different Z values at those samples

581
00:32:38,319 --> 00:32:45,159
obviously because of our our Z shader

582
00:32:49,210 --> 00:32:55,400
right because remember our Z shader is

583
00:32:51,470 --> 00:32:59,600
it's our z vias is going to give the

584
00:32:55,400 --> 00:33:01,960
tree multiple samples there because of

585
00:32:59,599 --> 00:33:01,959
that

586
00:33:06,519 --> 00:33:18,058
so so riddle me this Batman and by

587
00:33:14,170 --> 00:33:23,410
Batman I mean the viewing audience if

588
00:33:18,058 --> 00:33:26,769
that's our only artifact which I don't

589
00:33:23,410 --> 00:33:28,929
know that it is but it sure looks like

590
00:33:26,769 --> 00:33:31,679
it is because the only place I'm seeing

591
00:33:28,929 --> 00:33:38,140
those artifacts is at the edges of these

592
00:33:31,679 --> 00:33:42,429
things then then actually maybe we don't

593
00:33:38,140 --> 00:33:48,840
have a problem at all because if we were

594
00:33:42,429 --> 00:33:52,240
to just always include the 1 pixel

595
00:33:48,839 --> 00:33:54,730
transparent border then we would know

596
00:33:52,240 --> 00:34:04,349
that the edges of our primitives would

597
00:33:54,730 --> 00:34:04,349
never generate multi samples right

598
00:34:05,039 --> 00:34:14,230
furthermore we could just turn off multi

599
00:34:08,590 --> 00:34:18,309
sampling if you're drawing like we could

600
00:34:14,230 --> 00:34:22,119
just make multi sampling be off for

601
00:34:18,309 --> 00:34:25,090
anybody who has a Z bias shader like if

602
00:34:22,119 --> 00:34:26,858
we have the Z by a shader if we

603
00:34:25,090 --> 00:34:28,480
indicated to the graphics card and I

604
00:34:26,858 --> 00:34:38,590
don't know if you can do this in OpenGL

605
00:34:28,480 --> 00:34:42,128
3 our GL sells 1.5 or whatever if we

606
00:34:38,590 --> 00:34:45,639
told the graphic card only to evaluate

607
00:34:42,128 --> 00:34:48,159
this value at the centroid because right

608
00:34:45,639 --> 00:34:51,128
because remember we don't care if I

609
00:34:48,159 --> 00:34:56,919
could we not we don't care we actively

610
00:34:51,128 --> 00:35:00,699
don't want Z buffer multi sampling right

611
00:34:56,918 --> 00:35:03,339
in a sense we want the Z buffer to not

612
00:35:00,699 --> 00:35:09,039
be multi sampled we just want the color

613
00:35:03,340 --> 00:35:11,170
buffer to be multi sampled right so I

614
00:35:09,039 --> 00:35:16,150
wonder if what we could do here is just

615
00:35:11,170 --> 00:35:18,940
say okay don't evaluate multiple samples

616
00:35:16,150 --> 00:35:19,720
for the Z just always evaluate the Z at

617
00:35:18,940 --> 00:35:22,450
the centroid

618
00:35:19,719 --> 00:35:25,049
and write the same z-value - all samples

619
00:35:22,449 --> 00:35:25,049
please

620
00:35:42,190 --> 00:35:47,079
do you think it's possible do you think

621
00:35:44,858 --> 00:35:49,619
we can do it because I feel like that

622
00:35:47,079 --> 00:35:49,619
would do it

623
00:35:52,769 --> 00:35:57,298
what kind of qualifiers do we have here

624
00:36:04,050 --> 00:36:16,990
show me centroid please ah let's see the

625
00:36:11,858 --> 00:36:18,219
centroid based interpolation can you

626
00:36:16,989 --> 00:36:20,578
give us a little more information about

627
00:36:18,219 --> 00:36:20,578
that

628
00:36:40,269 --> 00:36:43,579
the presence of and type of

629
00:36:42,409 --> 00:36:45,259
interpolation is controlled by the

630
00:36:43,579 --> 00:36:46,579
storage cloth fart center it in and

631
00:36:45,260 --> 00:36:49,099
center it out and by the optional

632
00:36:46,579 --> 00:36:51,079
interpolation cloth smooth and flat love

633
00:36:49,099 --> 00:36:52,910
of a variable cloth as flat will not be

634
00:36:51,079 --> 00:36:54,710
interpolated instead it will have the

635
00:36:52,909 --> 00:36:57,078
same value for every fragment within a

636
00:36:54,710 --> 00:36:59,780
triangle this value will come from a

637
00:36:57,079 --> 00:37:02,240
single provoking vertex as described by

638
00:36:59,780 --> 00:37:03,589
the OpenGL ES graphic system Association

639
00:37:02,239 --> 00:37:07,568
bla bla bla these are from the vertex

640
00:37:03,588 --> 00:37:09,588
shader this rush to help us but if

641
00:37:07,568 --> 00:37:11,599
single sampling the value is

642
00:37:09,588 --> 00:37:13,549
interpolated to the pixel center and the

643
00:37:11,599 --> 00:37:15,588
centroid qualifier present is ignored

644
00:37:13,550 --> 00:37:17,420
if multi sampling in the variables not

645
00:37:15,588 --> 00:37:19,338
qualify the centroid then the value must

646
00:37:17,420 --> 00:37:21,108
be interpolated to the pixel center or

647
00:37:19,338 --> 00:37:23,539
anywhere within the pixel or to one of

648
00:37:21,108 --> 00:37:25,250
the pixel samples if multi sampling and

649
00:37:23,539 --> 00:37:27,739
the variable is qualified with centroid

650
00:37:25,250 --> 00:37:29,989
then the value must be interpolated to a

651
00:37:27,739 --> 00:37:31,909
point that lies in both the pixel and in

652
00:37:29,989 --> 00:37:33,259
the primitive being rendered or to one

653
00:37:31,909 --> 00:37:35,179
of the pixel samples that falls within

654
00:37:33,260 --> 00:37:36,530
the primitive due to the less regular

655
00:37:35,179 --> 00:37:39,169
piece of center editors may be less

656
00:37:36,530 --> 00:37:48,500
accurate then non centroid interpolated

657
00:37:39,170 --> 00:37:51,039
values that might be good enough for our

658
00:37:48,500 --> 00:37:51,039
purposes

659
00:38:19,719 --> 00:38:29,839
hmm so let's see let's actually take a

660
00:38:28,280 --> 00:38:32,140
look at what our vertex shader is doing

661
00:38:29,840 --> 00:38:43,910
so here's the Z biased vertex shader

662
00:38:32,139 --> 00:38:49,009
right and what you can see here is we've

663
00:38:43,909 --> 00:38:52,519
got our we've got our you know position

664
00:38:49,010 --> 00:38:55,190
value coming out here and what I'm

665
00:38:52,519 --> 00:38:56,630
wondering is like okay so when we come

666
00:38:55,190 --> 00:39:00,010
through here and we take a look at our

667
00:38:56,630 --> 00:39:03,470
fragrance e we're using GL frag cord z

668
00:39:00,010 --> 00:39:07,250
so what I'm wondering is what if I just

669
00:39:03,469 --> 00:39:11,209
pass the Z coordinate in a different

670
00:39:07,250 --> 00:39:17,030
value and I mark that value as being

671
00:39:11,210 --> 00:39:21,550
centroid in right so in other words if I

672
00:39:17,030 --> 00:39:24,830
said centroid in s32

673
00:39:21,550 --> 00:39:29,330
use frags V or whatever or something

674
00:39:24,829 --> 00:39:31,369
like that and then I said well you know

675
00:39:29,329 --> 00:39:35,150
the frag Z instead of getting it out of

676
00:39:31,369 --> 00:39:42,859
GL fried chords of Z you know it's just

677
00:39:35,150 --> 00:39:44,660
going to be that right now of course if

678
00:39:42,860 --> 00:39:50,349
I'm do it that way I've also got to

679
00:39:44,659 --> 00:39:50,349
write the frag cord Z I think

680
00:40:00,748 --> 00:40:09,028
because I don't know I don't know that

681
00:40:04,599 --> 00:40:09,028
there's any way that I can

682
00:40:23,320 --> 00:40:28,600
I don't know that there's any way that I

683
00:40:25,989 --> 00:40:34,529
can tell it I want you to treat the

684
00:40:28,599 --> 00:40:37,420
fragments z-coordinate as being unique

685
00:40:34,530 --> 00:40:39,730
across all as being the same across all

686
00:40:37,420 --> 00:40:44,260
the samples because that's really all I

687
00:40:39,730 --> 00:40:46,990
want it to do you know what I mean like

688
00:40:44,260 --> 00:40:51,370
all I want it to do is I want it to just

689
00:40:46,989 --> 00:40:54,459
you know I want it to do this and have

690
00:40:51,369 --> 00:40:55,960
that only be evaluated one time even if

691
00:40:54,460 --> 00:40:59,559
you evaluate the rest of the shader

692
00:40:55,960 --> 00:41:02,409
multiple times I don't want this value

693
00:40:59,559 --> 00:41:09,429
to change now the problem here is it

694
00:41:02,409 --> 00:41:12,819
says depth testing since death testing

695
00:41:09,429 --> 00:41:14,829
itself is being done in addition this is

696
00:41:12,820 --> 00:41:17,110
not the only depth test like the one

697
00:41:14,829 --> 00:41:19,360
that we wrote is not the only depth test

698
00:41:17,110 --> 00:41:22,800
there's actually you know the regular

699
00:41:19,360 --> 00:41:22,800
depth test happening as well

700
00:41:32,110 --> 00:41:36,220
you know that basically means that since

701
00:41:34,150 --> 00:41:39,180
we have to write to fret we have to

702
00:41:36,219 --> 00:41:41,980
write to jail fried chord does need to

703
00:41:39,179 --> 00:41:44,319
overwrite the potentially multi sampled

704
00:41:41,980 --> 00:41:47,889
value of Z which would probably be a

705
00:41:44,320 --> 00:41:52,570
speed hit because it can no longer do

706
00:41:47,889 --> 00:41:59,889
Earl easy outs anymore which is not

707
00:41:52,570 --> 00:42:04,360
great so I don't know let's just see I

708
00:41:59,889 --> 00:42:05,369
mean I'll just try it and see what

709
00:42:04,360 --> 00:42:08,800
happens

710
00:42:05,369 --> 00:42:13,719
so basically you know here we've got min

711
00:42:08,800 --> 00:42:24,910
transform W there I'm going to go ahead

712
00:42:13,719 --> 00:42:27,369
and set frag Z to that and I don't

713
00:42:24,909 --> 00:42:29,049
really know what to expect here like I

714
00:42:27,369 --> 00:42:36,039
said I'm kind of in somewhat uncharted

715
00:42:29,050 --> 00:42:38,710
territory here l value required a sign

716
00:42:36,039 --> 00:42:45,070
GL fried chord can't modify GL for Ag

717
00:42:38,710 --> 00:42:49,090
chord I wait you're telling me I cannot

718
00:42:45,070 --> 00:42:51,309
set the Z value of the fragment how do

719
00:42:49,090 --> 00:42:56,289
you change what gets written to the

720
00:42:51,309 --> 00:42:57,670
depth buffer dare I ask I guess at this

721
00:42:56,289 --> 00:43:00,150
point it's already been written to the

722
00:42:57,670 --> 00:43:00,150
depth buffer

723
00:43:12,730 --> 00:43:16,449
[Applause]

724
00:43:18,949 --> 00:43:41,358
ah so they want you to write the frag

725
00:43:31,579 --> 00:43:49,809
depth is that correct let's find out is

726
00:43:41,358 --> 00:43:49,808
frag depth so if I want to I can say out

727
00:43:51,460 --> 00:44:03,829
32 thank you frag depth well I guess I

728
00:44:02,599 --> 00:44:05,690
don't have to say that pelvic it's

729
00:44:03,829 --> 00:44:10,240
probably already defined right so I can

730
00:44:05,690 --> 00:44:10,240
probably just say that I'm assuming oh

731
00:44:16,210 --> 00:44:23,858
dear that does not appear to have worked

732
00:44:21,289 --> 00:44:23,858
particularly well

733
00:44:27,099 --> 00:44:34,180
hmm so we should get be able to make

734
00:44:31,460 --> 00:44:34,179
this work

735
00:44:41,780 --> 00:44:52,780
oh so actually when we specify this we

736
00:44:49,849 --> 00:44:58,309
would actually have to do the

737
00:44:52,780 --> 00:45:00,140
preparation of the frag as well right

738
00:44:58,309 --> 00:45:03,289
because normally what's going to happen

739
00:45:00,139 --> 00:45:05,779
there is that BEC for demon transform

740
00:45:03,289 --> 00:45:08,599
this you know this this feel position

741
00:45:05,780 --> 00:45:14,990
that GL positions going to get the

742
00:45:08,599 --> 00:45:16,759
divides going to happen right and so we

743
00:45:14,989 --> 00:45:18,619
would have to do that divided and then

744
00:45:16,760 --> 00:45:21,080
also the range mapping is going to

745
00:45:18,619 --> 00:45:25,639
happen so both of those things are going

746
00:45:21,079 --> 00:45:30,440
to happen right so our W value that

747
00:45:25,639 --> 00:45:31,909
we're passing in fact like and I

748
00:45:30,440 --> 00:45:33,650
wouldn't want to pass the W diode know

749
00:45:31,909 --> 00:45:38,899
what I was thinking there we want to

750
00:45:33,650 --> 00:45:41,030
pass the modified V value right so we

751
00:45:38,900 --> 00:45:45,050
want we would actually have to do our

752
00:45:41,030 --> 00:45:47,330
own mapping of the range right so we'd

753
00:45:45,050 --> 00:45:49,400
have to take the modified V value we

754
00:45:47,329 --> 00:45:52,190
have to divide it by the V min transform

755
00:45:49,400 --> 00:45:56,539
W and then we'd have to map it into the

756
00:45:52,190 --> 00:45:59,900
1 to 1 into the 0 to 1 range I think and

757
00:45:56,539 --> 00:46:03,110
I also don't know which direction that

758
00:45:59,900 --> 00:46:16,570
has to get mapped into but you know it

759
00:46:03,110 --> 00:46:19,639
would be something like like this right

760
00:46:16,570 --> 00:46:19,639
[Music]

761
00:46:24,610 --> 00:46:31,420
all right so yeah that looks like it's

762
00:46:28,539 --> 00:46:34,539
working however I still see the

763
00:46:31,420 --> 00:46:39,329
artifacts so I don't know if what I did

764
00:46:34,539 --> 00:46:39,329
actually worked at all unfortunately

765
00:46:41,699 --> 00:46:48,339
like I have no way of knowing of with

766
00:46:44,320 --> 00:46:51,700
what of whether what I did won't fix the

767
00:46:48,340 --> 00:46:53,500
artifact or whether what I did would fix

768
00:46:51,699 --> 00:47:06,519
your artifact but I didn't do it

769
00:46:53,500 --> 00:47:09,340
properly somehow right hmm um so again I

770
00:47:06,519 --> 00:47:14,219
think what we could do here is we could

771
00:47:09,340 --> 00:47:20,309
just have everything include the 1 pixel

772
00:47:14,219 --> 00:47:24,789
transparent border let's go ahead and

773
00:47:20,309 --> 00:47:26,409
remove that stuff because maybe that's

774
00:47:24,789 --> 00:47:29,920
just a bad idea

775
00:47:26,409 --> 00:47:31,869
it also doesn't means even if I was to

776
00:47:29,920 --> 00:47:35,320
get that working we couldn't use

777
00:47:31,869 --> 00:47:37,029
early-out on Z which made me nervous so

778
00:47:35,320 --> 00:47:41,740
really what I wanted to do is only right

779
00:47:37,030 --> 00:47:44,410
ones the always have the same sample for

780
00:47:41,739 --> 00:47:47,409
Z everywhere and I just don't know how

781
00:47:44,409 --> 00:47:52,029
to do that right I just don't know how

782
00:47:47,409 --> 00:47:55,059
to force it to do that like what I

783
00:47:52,030 --> 00:47:58,300
really want to do is just say hey just

784
00:47:55,059 --> 00:48:00,909
don't don't when you're producing these

785
00:47:58,300 --> 00:48:03,610
samples just always use replicate the Z

786
00:48:00,909 --> 00:48:04,839
across them all and I feel like there

787
00:48:03,610 --> 00:48:06,820
should be a way to do that maybe I'll

788
00:48:04,840 --> 00:48:08,320
have to ask the graphics sort of person

789
00:48:06,820 --> 00:48:13,930
if there's some easier way to

790
00:48:08,320 --> 00:48:19,090
communicate that because that's all I

791
00:48:13,929 --> 00:48:22,569
actually want to do but so if I went in

792
00:48:19,090 --> 00:48:25,140
here to the place where we specify the

793
00:48:22,570 --> 00:48:25,140
textures

794
00:48:38,539 --> 00:48:42,200
now let's see

795
00:48:50,570 --> 00:49:03,320
No where is our create texture call it's

796
00:49:00,170 --> 00:49:11,000
in your somewhere let's say Gen textures

797
00:49:03,320 --> 00:49:12,410
artists allocate texture so you can see

798
00:49:11,000 --> 00:49:18,619
here we specify the width height from

799
00:49:12,409 --> 00:49:21,230
the data and we put it in right and so

800
00:49:18,619 --> 00:49:23,539
what I'm wondering is if we wanted to if

801
00:49:21,230 --> 00:49:25,519
we wanted to ensure that there was

802
00:49:23,539 --> 00:49:29,570
always a one pixel border around

803
00:49:25,519 --> 00:49:32,889
everything could we do that right and

804
00:49:29,570 --> 00:49:32,890
would that fix the problem

805
00:49:44,210 --> 00:49:55,159
I suppose I also don't really know what

806
00:49:52,639 --> 00:49:56,960
these actually looked like so let me see

807
00:49:55,159 --> 00:50:00,558
what the bitmaps themselves look like

808
00:49:56,960 --> 00:50:02,358
because I'm curious to know so if I come

809
00:50:00,559 --> 00:50:06,109
in here and I because I thought we

810
00:50:02,358 --> 00:50:07,489
always know I don't know I'm a little

811
00:50:06,108 --> 00:50:12,489
confused right now to be completely

812
00:50:07,489 --> 00:50:12,489
honest I'm not quite sure I understand

813
00:50:12,849 --> 00:50:19,789
let's go ahead and open up one of these

814
00:50:14,989 --> 00:50:22,358
trees here I think that's the tray we're

815
00:50:19,789 --> 00:50:22,358
using at the moment

816
00:50:48,358 --> 00:51:03,449
I get like some info about this windows

817
00:50:53,809 --> 00:51:06,210
dockable dialogs well none of those will

818
00:51:03,449 --> 00:51:08,248
help me unfortunately I just want

819
00:51:06,210 --> 00:51:10,608
something that tells me pixel value of

820
00:51:08,248 --> 00:51:14,068
this pixel will just tell me

821
00:51:10,608 --> 00:51:15,509
- z4 yes so there so it does go right

822
00:51:14,068 --> 00:51:19,739
out to the edge there is an alpha value

823
00:51:15,509 --> 00:51:25,679
out there and same is true over here I

824
00:51:19,739 --> 00:51:35,900
guess wellnot doesn't fit there is one

825
00:51:25,679 --> 00:51:39,748
over there but there is one over there

826
00:51:35,900 --> 00:51:52,079
so yeah if this you know if that does

827
00:51:39,748 --> 00:51:54,268
not actually have a texture if that

828
00:51:52,079 --> 00:51:56,910
doesn't actually have a pixel border

829
00:51:54,268 --> 00:52:00,449
around it could we just add a pixel

830
00:51:56,909 --> 00:52:01,920
border to it and I want to see let me go

831
00:52:00,449 --> 00:52:05,960
ahead and take a look at what happens

832
00:52:01,920 --> 00:52:05,960
where we do allocate texture

833
00:52:20,579 --> 00:52:26,429
so those textures are texture ops right

834
00:52:23,789 --> 00:52:30,119
this is a list of things we went through

835
00:52:26,429 --> 00:52:31,380
I remember this where we had like you

836
00:52:30,119 --> 00:52:32,849
would push these text drafts where you

837
00:52:31,380 --> 00:52:34,048
want to allocate the textures and you

838
00:52:32,849 --> 00:52:36,449
just sort of stick them in here and then

839
00:52:34,048 --> 00:52:39,380
it would retire them when texture

840
00:52:36,449 --> 00:52:39,380
management time came

841
00:52:52,440 --> 00:52:56,289
so here's where we're adding those

842
00:52:54,400 --> 00:52:57,130
texture apps in here's where we're

843
00:52:56,289 --> 00:53:01,300
loading stuff

844
00:52:57,130 --> 00:53:02,710
there's the add up right so I'm pretty

845
00:53:01,300 --> 00:53:04,870
sure all we're doing is loading these

846
00:53:02,710 --> 00:53:06,760
things directly out I don't really

847
00:53:04,869 --> 00:53:10,059
remember in our test asset builder

848
00:53:06,760 --> 00:53:14,260
whether we add that border at all when

849
00:53:10,059 --> 00:53:17,559
we do a load BMP it does not look like

850
00:53:14,260 --> 00:53:20,020
we insert any space so there's really

851
00:53:17,559 --> 00:53:24,849
nothing at all in this entire thing that

852
00:53:20,019 --> 00:53:26,320
does any sort of a guarantee which is

853
00:53:24,849 --> 00:53:28,989
weird because I know that in the

854
00:53:26,320 --> 00:53:31,690
software rasterizer we skip the outer

855
00:53:28,989 --> 00:53:48,609
border of pixels do we not do that in

856
00:53:31,690 --> 00:53:54,130
the OpenGL one kind of curious because

857
00:53:48,610 --> 00:53:56,079
our UVs are all set to use everything so

858
00:53:54,130 --> 00:53:58,030
I'm assuming that in our software astir

859
00:53:56,079 --> 00:54:05,739
Iser we were just assuming that we would

860
00:53:58,030 --> 00:54:07,180
pad those anyway so yes we wanted to Pat

861
00:54:05,739 --> 00:54:11,409
it out so that we knew that we would

862
00:54:07,179 --> 00:54:13,329
always get a one pixel border I could

863
00:54:11,409 --> 00:54:16,059
just do that you know it's not going to

864
00:54:13,329 --> 00:54:18,429
be particularly efficient right here to

865
00:54:16,059 --> 00:54:27,009
do it this way but I could actually put

866
00:54:18,429 --> 00:54:28,779
in a one pixel border there and I could

867
00:54:27,010 --> 00:54:30,460
even do it with a clamp to edge sort of

868
00:54:28,780 --> 00:54:33,220
thing if we wanted to save space I don't

869
00:54:30,460 --> 00:54:35,829
think I care about that particularly

870
00:54:33,219 --> 00:54:39,879
much although it is kind of wasteful to

871
00:54:35,829 --> 00:54:41,799
do I guess let's take a look at what our

872
00:54:39,880 --> 00:54:43,599
clamping options are and maybe I should

873
00:54:41,800 --> 00:54:47,410
do something slightly different here

874
00:54:43,599 --> 00:54:51,339
although there is kind of a nasty aspect

875
00:54:47,409 --> 00:54:53,889
of it that yeah well let's take a look

876
00:54:51,340 --> 00:54:58,120
so let me take a look at what our GL

877
00:54:53,889 --> 00:55:02,170
clamp options are here because I'm

878
00:54:58,119 --> 00:55:04,000
interested to know if I just introduced

879
00:55:02,170 --> 00:55:07,300
a transparent border

880
00:55:04,000 --> 00:55:10,869
and then did clamp it to border and then

881
00:55:07,300 --> 00:55:11,980
made it so that I always gave it UV

882
00:55:10,869 --> 00:55:16,059
coordinates that were a little bit

883
00:55:11,980 --> 00:55:20,108
bigger than the actual sprite would that

884
00:55:16,059 --> 00:55:23,309
maybe take care of it for me so let's

885
00:55:20,108 --> 00:55:23,309
see here

886
00:55:49,009 --> 00:56:00,150
so here's clamp to border right which we

887
00:55:56,969 --> 00:56:03,268
could set our textures to and if we did

888
00:56:00,150 --> 00:56:08,130
clamp to border then we just set a

889
00:56:03,268 --> 00:56:11,899
texture border color and we'd set that

890
00:56:08,130 --> 00:56:11,900
texture border color to zero right

891
00:56:19,130 --> 00:56:28,880
and it would just be a text parameter to

892
00:56:23,028 --> 00:56:34,278
set the texture border color so I could

893
00:56:28,880 --> 00:56:41,059
do that there is a problem with even

894
00:56:34,278 --> 00:56:42,528
that though so the reason that I'm

895
00:56:41,059 --> 00:56:44,089
hesitant to go down this path and why I

896
00:56:42,528 --> 00:56:46,539
would really like to figure out a way to

897
00:56:44,088 --> 00:56:50,599
get it to just evaluate the Z only once

898
00:56:46,539 --> 00:57:00,259
is because if you think about what's

899
00:56:50,599 --> 00:57:04,009
going to happen if we ever shrink the

900
00:57:00,259 --> 00:57:06,588
bitmap so if we size things down then

901
00:57:04,009 --> 00:57:09,289
even if there is a one pixel border

902
00:57:06,588 --> 00:57:12,588
around the whole sprite that's

903
00:57:09,289 --> 00:57:14,390
transparent when it by linearly filters

904
00:57:12,588 --> 00:57:18,578
if the pixel next to it isn't

905
00:57:14,389 --> 00:57:20,538
transparent you'll still get some

906
00:57:18,579 --> 00:57:23,239
transparency around the border and

907
00:57:20,539 --> 00:57:26,509
you'll see the artifact so I would much

908
00:57:23,239 --> 00:57:34,940
rather the depth feeling just worked you

909
00:57:26,509 --> 00:57:42,528
know and I feel like it would just work

910
00:57:34,940 --> 00:57:45,219
if we were able to do that sampling

911
00:57:42,528 --> 00:57:45,219
restriction

912
00:58:02,550 --> 00:58:06,150
so I think I want to pursue that

913
00:58:04,619 --> 00:58:08,909
sampling restriction a little bit more

914
00:58:06,150 --> 00:58:11,760
right doing the border does not really

915
00:58:08,909 --> 00:58:14,069
feel like the right solution to me so I

916
00:58:11,760 --> 00:58:18,450
really feel like there's some way I want

917
00:58:14,070 --> 00:58:22,370
to be able to figure out some way to get

918
00:58:18,449 --> 00:58:22,369
the multi sampling

919
00:58:34,570 --> 00:58:50,500
I really want that what mother family to

920
00:58:47,619 --> 00:58:52,659
only produce a single V value that's

921
00:58:50,500 --> 00:58:56,980
what I want

922
00:58:52,659 --> 00:58:58,750
I wonder it's so trying to think

923
00:58:56,980 --> 00:59:01,179
could I is there a way to just make it

924
00:58:58,750 --> 00:59:07,480
so that there's only one Z value in the

925
00:59:01,179 --> 00:59:13,649
z-buffer of course I guess that doesn't

926
00:59:07,480 --> 00:59:13,650
really work yeah

927
00:59:25,239 --> 00:59:29,769
why are you keeping the OpenGL ES

928
00:59:27,849 --> 00:59:32,170
shading language specification let's

929
00:59:29,769 --> 00:59:35,048
take a look at the more modern one so

930
00:59:32,170 --> 00:59:38,559
here's four point three and let's take a

931
00:59:35,048 --> 00:59:41,038
look at multi sampling see where it

932
00:59:38,559 --> 00:59:41,039
shows up

933
01:00:21,429 --> 01:00:23,969
yeah

934
01:00:26,820 --> 01:00:30,360
stalling please never has to be read

935
01:00:28,679 --> 01:00:32,369
Eclair dwith in typical fire when using

936
01:00:30,360 --> 01:00:36,559
the Capelli profile front color back

937
01:00:32,369 --> 01:00:38,670
flower secondary color secondary color

938
01:00:36,559 --> 01:00:43,739
that's not really want to know about

939
01:00:38,670 --> 01:00:47,570
depth can I do anything to try and

940
01:00:43,739 --> 01:00:49,819
convince you to do the depth differently

941
01:00:47,570 --> 01:00:53,480
rag depth

942
01:00:49,820 --> 01:00:53,480
tell me about it please

943
01:00:59,159 --> 01:01:02,849
Dilton fragment shader variable frag the

944
01:01:01,440 --> 01:01:04,980
theory declared using where the falling

945
01:01:02,849 --> 01:01:09,029
LED qualifiers get any dip greater depth

946
01:01:04,980 --> 01:01:10,320
less than changed the layout qualifier

947
01:01:09,030 --> 01:01:11,880
for Jill frog got some strange

948
01:01:10,320 --> 01:01:16,380
intentions the final value of Jeff are

949
01:01:11,880 --> 01:01:17,460
just written by the shader invocation do

950
01:01:16,380 --> 01:01:19,380
you'll implement a store a lot of for

951
01:01:17,460 --> 01:01:21,480
implications assuming that the test

952
01:01:19,380 --> 01:01:25,320
fails or pass trig environment of a

953
01:01:21,480 --> 01:01:30,119
Lea's of Jill ah so this is an

954
01:01:25,320 --> 01:01:32,809
interesting kid it doesn't help us but

955
01:01:30,119 --> 01:01:32,809
it is interesting

956
01:01:46,269 --> 01:01:53,320
like all the use of the frag dip there

957
01:01:48,190 --> 01:01:55,570
on that page seven shooters emphasize

958
01:01:53,320 --> 01:01:56,950
the pipeline some of the built-in

959
01:01:55,570 --> 01:01:58,809
variables you'll fragmented your sample

960
01:01:56,949 --> 01:02:03,279
mask unless the discard statement is

961
01:01:58,809 --> 01:02:06,309
executed the sixth function computed

962
01:02:03,280 --> 01:02:09,339
depth for a fragment may be obtained by

963
01:02:06,309 --> 01:02:09,969
reading GL fried chords e described

964
01:02:09,338 --> 01:02:12,369
below

965
01:02:09,969 --> 01:02:13,899
yes range of GL frag depth will

966
01:02:12,369 --> 01:02:15,550
establish the depth value for the frag

967
01:02:13,900 --> 01:02:17,950
repeat process of depth buffering is

968
01:02:15,550 --> 01:02:19,930
enabled and no shader writes GL frag

969
01:02:17,949 --> 01:02:21,338
depth then the fixed function value for

970
01:02:19,929 --> 01:02:23,139
the depth will be used to the fragments

971
01:02:21,338 --> 01:02:25,029
depth value the shader statically

972
01:02:23,139 --> 01:02:26,348
science there's an execution paths

973
01:02:25,030 --> 01:02:27,910
through the shader this is not such a

974
01:02:26,349 --> 01:02:29,500
far dip than the value perspective death

975
01:02:27,909 --> 01:02:31,239
may be undefined textures and shaders I

976
01:02:29,500 --> 01:02:33,010
take that path there is with a set of

977
01:02:31,239 --> 01:02:34,329
links fragment shaders sadly in the

978
01:02:33,010 --> 01:02:36,970
original practice that it responsive

979
01:02:34,329 --> 01:02:39,299
we're always writing it okay it's fine

980
01:02:36,969 --> 01:02:39,299
by me

981
01:02:46,250 --> 01:02:50,329
as long as I can be for any occasion to

982
01:02:48,500 --> 01:02:52,760
pixel or one of the fragment samples the

983
01:02:50,329 --> 01:02:54,319
use of centroid does not further

984
01:02:52,760 --> 01:02:56,390
restrict this value to be inside the

985
01:02:54,320 --> 01:02:58,130
current primitive this value is the

986
01:02:56,389 --> 01:02:59,299
result of the fixed functionality that

987
01:02:58,130 --> 01:03:01,250
interpolates primitives after

988
01:02:59,300 --> 01:03:03,140
registering to generate fragments Z

989
01:03:01,250 --> 01:03:05,269
component is the death value that would

990
01:03:03,139 --> 01:03:07,789
be used for the fragments depth if no

991
01:03:05,269 --> 01:03:10,369
shader contained any rights to jail frag

992
01:03:07,789 --> 01:03:12,259
depth this is useful for invariance if a

993
01:03:10,369 --> 01:03:14,239
shader conditionally computes Defrag

994
01:03:12,260 --> 01:03:16,970
depth otherwise want the fixed

995
01:03:14,239 --> 01:03:18,679
functionality fragment depth fragment

996
01:03:16,969 --> 01:03:21,230
shaders have access to the input built

997
01:03:18,679 --> 01:03:24,099
in variable geo from facing you know

998
01:03:21,230 --> 01:03:24,099
that doesn't help me at all

999
01:03:39,769 --> 01:03:42,769
hmm

1000
01:03:50,980 --> 01:03:53,980
hmm

1001
01:04:11,420 --> 01:04:15,778
so we have two things at play here and I

1002
01:04:14,099 --> 01:04:18,869
guess technically I'm not sure which one

1003
01:04:15,778 --> 01:04:20,670
of them is actually going on what would

1004
01:04:18,869 --> 01:04:22,318
be really nice is if we had some way of

1005
01:04:20,670 --> 01:04:23,729
inspecting these pixels a little bit

1006
01:04:22,318 --> 01:04:26,998
more quickly so that we could do some

1007
01:04:23,728 --> 01:04:30,778
tests and get an idea of what was

1008
01:04:26,998 --> 01:04:33,268
happening so at the moment right we know

1009
01:04:30,778 --> 01:04:35,789
that the fragments themselves the

1010
01:04:33,268 --> 01:04:37,679
samples themselves we are only getting

1011
01:04:35,789 --> 01:04:39,569
artifacts at the places where multi

1012
01:04:37,679 --> 01:04:41,848
sampling is actually kicking in which is

1013
01:04:39,568 --> 01:04:43,409
the edges of primitives and that's what

1014
01:04:41,849 --> 01:04:46,170
we would expect if everything was

1015
01:04:43,409 --> 01:04:48,028
working properly with the multi sampling

1016
01:04:46,170 --> 01:04:49,950
so that's actually a good sign right

1017
01:04:48,028 --> 01:04:51,690
because we're not getting any artifacts

1018
01:04:49,949 --> 01:04:53,038
where two primitives overlap each other

1019
01:04:51,690 --> 01:04:56,249
and the primitives themselves are

1020
01:04:53,039 --> 01:04:57,749
completely you know the pixels

1021
01:04:56,248 --> 01:05:01,858
themselves are completely contained by

1022
01:04:57,748 --> 01:05:04,048
by the primitives so no multa de edge of

1023
01:05:01,858 --> 01:05:07,338
a primitive so the multi sampling

1024
01:05:04,048 --> 01:05:07,338
shouldn't you know be kicked in so

1025
01:05:10,429 --> 01:05:15,149
that's actually a good thing but what we

1026
01:05:13,199 --> 01:05:16,828
don't know is we don't actually know

1027
01:05:15,150 --> 01:05:19,858
specifically where the bug is coming

1028
01:05:16,829 --> 01:05:21,450
from necessarily you know I'm assuming

1029
01:05:19,858 --> 01:05:23,509
that it comes from the fact that we have

1030
01:05:21,449 --> 01:05:25,798
multiple Z values for the same primitive

1031
01:05:23,509 --> 01:05:27,150
ending up inside the samples and the

1032
01:05:25,798 --> 01:05:29,278
multi sample buffer but what I don't

1033
01:05:27,150 --> 01:05:32,338
really know is if that's the if that's

1034
01:05:29,278 --> 01:05:35,068
really the truth if that's the end of

1035
01:05:32,338 --> 01:05:37,170
the story because it could also be that

1036
01:05:35,068 --> 01:05:42,690
it's just the resolve it's picking a bad

1037
01:05:37,170 --> 01:05:45,989
Z value or doing something otherwise

1038
01:05:42,690 --> 01:05:47,670
weird it could be that the it's picking

1039
01:05:45,989 --> 01:05:50,309
like the minimum Z value or something

1040
01:05:47,670 --> 01:05:52,409
like that so I suppose what we should

1041
01:05:50,309 --> 01:05:55,200
try to do first before we go any further

1042
01:05:52,409 --> 01:05:57,899
down this path which may require again

1043
01:05:55,199 --> 01:06:00,538
like asking you know someone from Nvidia

1044
01:05:57,900 --> 01:06:03,329
or something be like hey you know could

1045
01:06:00,539 --> 01:06:07,999
you tell us a little bit more about how

1046
01:06:03,329 --> 01:06:07,999
this value gets gets worked

1047
01:06:11,579 --> 01:06:16,769
I guess maybe I should try to get our

1048
01:06:14,369 --> 01:06:21,989
own custom resolve working so at least

1049
01:06:16,768 --> 01:06:25,018
we know what value of Z is actually

1050
01:06:21,989 --> 01:06:27,150
getting picked because we actually care

1051
01:06:25,018 --> 01:06:32,728
quite a bit about which value of Z is

1052
01:06:27,150 --> 01:06:34,950
getting picked and I guess you know with

1053
01:06:32,728 --> 01:06:40,828
the regular resolve we really have no

1054
01:06:34,949 --> 01:06:44,699
way of knowing right you know we have we

1055
01:06:40,829 --> 01:06:50,579
have absolutely no idea so I feel like

1056
01:06:44,699 --> 01:06:53,009
that you know something we want to we

1057
01:06:50,579 --> 01:06:55,140
want to try and dress so maybe I will

1058
01:06:53,009 --> 01:06:56,789
take the you know we've got some time

1059
01:06:55,139 --> 01:06:59,879
left in the stream 30 minutes or

1060
01:06:56,789 --> 01:07:02,039
something maybe I will take this time to

1061
01:06:59,880 --> 01:07:03,719
just try and get our own resolve working

1062
01:07:02,039 --> 01:07:06,989
because if we can get our own resolve

1063
01:07:03,719 --> 01:07:11,479
working reliably then what would would

1064
01:07:06,989 --> 01:07:17,099
happen there is we could go ahead and

1065
01:07:11,478 --> 01:07:18,689
verify that you know the the actual

1066
01:07:17,099 --> 01:07:21,298
artifact we're seeing is specifically

1067
01:07:18,690 --> 01:07:23,130
because of the sort of the variance

1068
01:07:21,298 --> 01:07:25,708
values across single primitive inside of

1069
01:07:23,130 --> 01:07:28,440
samples because we don't actually know

1070
01:07:25,708 --> 01:07:30,198
that's what's happening and so it might

1071
01:07:28,440 --> 01:07:35,068
be nice to just have a way of

1072
01:07:30,199 --> 01:07:38,219
independently checking that so here was

1073
01:07:35,068 --> 01:07:39,929
the code we started to write and what it

1074
01:07:38,219 --> 01:07:43,588
says here as you can see it goes over

1075
01:07:39,929 --> 01:07:47,728
the samples and it fetches the sample

1076
01:07:43,588 --> 01:07:49,768
you know so for the current pixel that

1077
01:07:47,728 --> 01:07:52,228
is trying to resolve it fetches all the

1078
01:07:49,768 --> 01:07:53,698
samples that there are so an 8 X Mulder

1079
01:07:52,228 --> 01:07:56,669
sampling it would do this loop eight

1080
01:07:53,699 --> 01:07:59,369
times it grabs out the color it looks at

1081
01:07:56,670 --> 01:08:05,789
the depth and then you know it's going

1082
01:07:59,369 --> 01:08:09,449
to do this this combined so the tricky

1083
01:08:05,789 --> 01:08:12,869
part here is we don't really know what

1084
01:08:09,449 --> 01:08:15,479
to do with the samples that we have what

1085
01:08:12,869 --> 01:08:17,849
we want is we want to throw out samples

1086
01:08:15,478 --> 01:08:19,889
that are going to be from the next def

1087
01:08:17,849 --> 01:08:22,079
peel down that we would get that are you

1088
01:08:19,889 --> 01:08:24,100
know from a wholly different you know

1089
01:08:22,079 --> 01:08:26,289
level of Z

1090
01:08:24,100 --> 01:08:29,800
so I think what we want to do here is

1091
01:08:26,289 --> 01:08:33,010
basically have like a V threshold where

1092
01:08:29,800 --> 01:08:36,909
we would say you know if including this

1093
01:08:33,010 --> 01:08:41,520
depth sample in slide the current depth

1094
01:08:36,909 --> 01:08:45,010
sample would you know greatly increase

1095
01:08:41,520 --> 01:09:00,340
the Z range with you know with some kind

1096
01:08:45,010 --> 01:09:03,550
of threshold invaluable up near the top

1097
01:09:00,340 --> 01:09:06,520
and that you know in theory if we

1098
01:09:03,550 --> 01:09:07,930
actually picked that threshold if it

1099
01:09:06,520 --> 01:09:09,880
turns out that threshold is actually

1100
01:09:07,930 --> 01:09:13,119
something you can select reasonably

1101
01:09:09,880 --> 01:09:16,510
which I don't really know that it is but

1102
01:09:13,119 --> 01:09:20,760
if it turns out that it is then it might

1103
01:09:16,510 --> 01:09:23,320
be that you could actually get that yeah

1104
01:09:20,760 --> 01:09:24,820
so we have an even have the case where

1105
01:09:23,319 --> 01:09:27,789
two things are basically right on top of

1106
01:09:24,819 --> 01:09:31,199
each other so there is no actual

1107
01:09:27,789 --> 01:09:31,199
separation between them

1108
01:09:50,298 --> 01:09:53,140
so

1109
01:09:59,219 --> 01:10:12,630
I guess there's another thing we could

1110
01:10:01,710 --> 01:10:13,649
say here which is kind of nuts but I'll

1111
01:10:12,630 --> 01:10:20,190
just point it out it's yet another

1112
01:10:13,649 --> 01:10:26,809
option so another thing we could do is

1113
01:10:20,189 --> 01:10:38,279
we could actually have our depth peel

1114
01:10:26,810 --> 01:10:42,000
not not actually use a multi sample

1115
01:10:38,279 --> 01:10:43,948
buffer I mean I guess I I don't know if

1116
01:10:42,000 --> 01:10:47,340
there's any way to write to a non multi

1117
01:10:43,948 --> 01:10:50,669
sample buffer while you're doing multi

1118
01:10:47,340 --> 01:10:51,690
sample right so it might be that it's

1119
01:10:50,670 --> 01:10:55,859
just not possible

1120
01:10:51,689 --> 01:10:58,109
I have to think about it but one thing

1121
01:10:55,859 --> 01:11:08,880
we could do is say well with the depth

1122
01:10:58,109 --> 01:11:11,939
peeling if we just used a buffer that

1123
01:11:08,880 --> 01:11:15,359
stored the IDS of which primitives we

1124
01:11:11,939 --> 01:11:17,189
were rasterizing then when we go to

1125
01:11:15,359 --> 01:11:18,979
collect our samples we could just

1126
01:11:17,189 --> 01:11:21,869
collect them based on the primitive

1127
01:11:18,979 --> 01:11:23,759
right and we'd say well you know

1128
01:11:21,869 --> 01:11:26,039
whichever primitive we're going to pick

1129
01:11:23,760 --> 01:11:28,909
that's the closer primitive that's the

1130
01:11:26,039 --> 01:11:28,909
one we'll use here

1131
01:11:37,979 --> 01:11:43,959
gosh this is really tricky because again

1132
01:11:42,189 --> 01:11:46,000
if you do that then the problem with

1133
01:11:43,960 --> 01:11:50,770
that is you're now introducing again a

1134
01:11:46,000 --> 01:11:52,119
you know sort of a additional buffer and

1135
01:11:50,770 --> 01:11:54,550
so you just keep you know you keep

1136
01:11:52,119 --> 01:11:57,909
increasing the the demands on the

1137
01:11:54,550 --> 01:11:59,320
bandwidth because at some point you're

1138
01:11:57,909 --> 01:12:02,619
just like well you should have probably

1139
01:11:59,319 --> 01:12:05,380
just done something you probably should

1140
01:12:02,619 --> 01:12:06,340
have just done something like atomic

1141
01:12:05,380 --> 01:12:09,520
rights because you're just getting

1142
01:12:06,340 --> 01:12:11,380
absurd displaying so to you know doing I

1143
01:12:09,520 --> 01:12:14,350
feel like there's a certain value to

1144
01:12:11,380 --> 01:12:15,850
saying well let's just you know get as

1145
01:12:14,350 --> 01:12:16,960
far as we can with just the depth buffer

1146
01:12:15,850 --> 01:12:19,390
approach because that's like the

1147
01:12:16,960 --> 01:12:25,659
standard built-in stuff that you know is

1148
01:12:19,390 --> 01:12:29,640
efficient and off it goes so I guess

1149
01:12:25,659 --> 01:12:29,639
I'll try using a Z range

1150
01:12:38,300 --> 01:12:43,539
that I'm not optimistic I guess is also

1151
01:12:43,869 --> 01:12:50,390
alright so at the moment I guess let's

1152
01:12:47,479 --> 01:12:51,949
just try to get this working at all and

1153
01:12:50,390 --> 01:12:55,760
the way we'll try to get this working at

1154
01:12:51,949 --> 01:13:00,979
all is just by saying we've got combined

1155
01:12:55,760 --> 01:13:05,300
color value and I'm going to initialize

1156
01:13:00,979 --> 01:13:09,049
that to zero and then what I'm going to

1157
01:13:05,300 --> 01:13:12,940
do is as we do our fetching I'm going to

1158
01:13:09,050 --> 01:13:14,409
summit oops

1159
01:13:12,939 --> 01:13:16,489
[Applause]

1160
01:13:14,409 --> 01:13:19,309
so I'm going to take all the colors when

1161
01:13:16,489 --> 01:13:20,960
they add them together I'm going to

1162
01:13:19,310 --> 01:13:24,860
remember what the clothes depth was and

1163
01:13:20,960 --> 01:13:29,409
on the way out I'm just going to set the

1164
01:13:24,859 --> 01:13:29,409
result color equal to the combined color

1165
01:13:30,159 --> 01:13:36,649
divided by the sample count so I'm just

1166
01:13:34,159 --> 01:13:38,720
taking an average right I'm going to sum

1167
01:13:36,649 --> 01:13:41,529
up all the colors I'm going to divide by

1168
01:13:38,720 --> 01:13:46,850
the number I summed and that's it

1169
01:13:41,529 --> 01:13:54,289
right nothing more to it I am so yeah

1170
01:13:46,850 --> 01:13:56,060
that's about it I think I don't think I

1171
01:13:54,289 --> 01:14:01,000
need to do anything else for that we

1172
01:13:56,060 --> 01:14:05,740
already compiling this right I think I

1173
01:14:01,000 --> 01:14:05,739
think we are no really no

1174
01:14:11,510 --> 01:14:19,350
let's take a look here what happens when

1175
01:14:14,310 --> 01:14:23,750
we actually set it now so when use

1176
01:14:19,350 --> 01:14:23,750
program begin here we've got prog common

1177
01:14:25,130 --> 01:14:28,590
being called and I want to see what

1178
01:14:27,359 --> 01:14:30,779
happens in prog common

1179
01:14:28,590 --> 01:14:33,630
yeah so in prog common we don't have to

1180
01:14:30,779 --> 01:14:38,119
set some any of these arrays so what we

1181
01:14:33,630 --> 01:14:46,230
can do here yet is just keep this and

1182
01:14:38,119 --> 01:14:47,550
and that way and that way just the use

1183
01:14:46,229 --> 01:14:49,289
program begin will still work even

1184
01:14:47,550 --> 01:14:51,989
though we don't have any of those divert

1185
01:14:49,289 --> 01:14:53,729
colors or any of those things I so we

1186
01:14:51,989 --> 01:14:56,279
only have these two the color sampler in

1187
01:14:53,729 --> 01:14:59,519
the depth sampler and so what we would

1188
01:14:56,279 --> 01:15:01,199
do when we do use program begin on the

1189
01:14:59,520 --> 01:15:06,060
multi sample program which I don't think

1190
01:15:01,199 --> 01:15:08,429
we've done yet anything for which is

1191
01:15:06,060 --> 01:15:16,080
this part right here what I want to do

1192
01:15:08,430 --> 01:15:17,970
is basically set up the to the color

1193
01:15:16,079 --> 01:15:21,809
sampler and the depth sampler I want to

1194
01:15:17,970 --> 01:15:25,110
set up those two presumably to 0 and 1

1195
01:15:21,810 --> 01:15:30,140
so all that's going to do is just say

1196
01:15:25,109 --> 01:15:35,609
hey the prog color sampler and the prog

1197
01:15:30,140 --> 01:15:38,460
def sampler would be set this way and so

1198
01:15:35,609 --> 01:15:44,399
when we do resolve multi sample we just

1199
01:15:38,460 --> 01:15:46,890
have to bind the we just have to bind

1200
01:15:44,399 --> 01:15:50,369
the textures color first which we do and

1201
01:15:46,890 --> 01:15:53,640
then depth and that would just work so

1202
01:15:50,369 --> 01:15:56,880
this is the resolve code here we're not

1203
01:15:53,640 --> 01:15:59,010
calling it at the moment but we could so

1204
01:15:56,880 --> 01:16:05,400
we could come down here now and say okay

1205
01:15:59,010 --> 01:16:06,600
forget all that stuff it's not we used

1206
01:16:05,399 --> 01:16:10,679
to do over now you do it that way

1207
01:16:06,600 --> 01:16:16,710
anymore so we here we're just going to

1208
01:16:10,680 --> 01:16:19,230
say okay we know we've got to go in fact

1209
01:16:16,710 --> 01:16:21,039
what I could do to leave that here open

1210
01:16:19,229 --> 01:16:26,149
jail frame buffer from

1211
01:16:21,039 --> 01:16:47,510
- we know we want to go from this one

1212
01:16:26,149 --> 01:16:49,939
and we want to go to this one so that is

1213
01:16:47,510 --> 01:16:52,579
really all we have to do to call this

1214
01:16:49,939 --> 01:16:54,889
thing of course we don't really know

1215
01:16:52,579 --> 01:16:56,869
because we've never run it and we

1216
01:16:54,890 --> 01:16:59,420
probably it's kind of janky and

1217
01:16:56,869 --> 01:17:01,579
complicated this this is probably going

1218
01:16:59,420 --> 01:17:03,710
to take a while to get working would be

1219
01:17:01,579 --> 01:17:08,479
my guess

1220
01:17:03,710 --> 01:17:16,850
resolve multi sample program color

1221
01:17:08,479 --> 01:17:21,829
sampler ID we are and initializing

1222
01:17:16,850 --> 01:17:27,140
connector open jail frame buffer that is

1223
01:17:21,829 --> 01:17:32,600
a good point I should not have using

1224
01:17:27,140 --> 01:17:33,890
array access there okay um so yeah I

1225
01:17:32,600 --> 01:17:35,630
guess I don't have high hopes for this

1226
01:17:33,890 --> 01:17:39,560
running anytime soon but let's go ahead

1227
01:17:35,630 --> 01:17:40,730
and try and debug it I do personal

1228
01:17:39,560 --> 01:17:44,350
operation requires the currently active

1229
01:17:40,729 --> 01:17:46,559
program object GL and bailout operation

1230
01:17:44,350 --> 01:17:49,689
did I forget to call

1231
01:17:46,560 --> 01:17:49,689
[Applause]

1232
01:17:57,680 --> 01:18:07,409
did I do I not compile this program or

1233
01:18:01,229 --> 01:18:26,218
something I think I maybe never called

1234
01:18:07,409 --> 01:18:28,819
compile on this program yeah okay let's

1235
01:18:26,219 --> 01:18:28,819
see here

1236
01:18:29,000 --> 01:18:35,579
undeclared identifier depth L value

1237
01:18:32,460 --> 01:18:37,890
required assign GL frag cord can't

1238
01:18:35,579 --> 01:18:42,350
modify gel frag cord parse error so it

1239
01:18:37,890 --> 01:18:46,590
didn't like anything about about this

1240
01:18:42,350 --> 01:18:51,000
well excuse me mister let's see you

1241
01:18:46,590 --> 01:18:59,640
write a shader just complaining about

1242
01:18:51,000 --> 01:19:01,710
our code like we did something wrong so

1243
01:18:59,640 --> 01:19:03,810
that's just that the view we already

1244
01:19:01,710 --> 01:19:07,109
looked this up so you can't write to

1245
01:19:03,810 --> 01:19:12,090
frag cords be it's always going to be

1246
01:19:07,109 --> 01:19:17,460
frag gap that has to go out so there

1247
01:19:12,090 --> 01:19:19,699
that is I don't know that's the only

1248
01:19:17,460 --> 01:19:19,698
thing

1249
01:19:23,579 --> 01:19:33,840
undeclared identifier of depth conductor

1250
01:19:26,960 --> 01:19:45,750
parentheses so depth is an undeclared

1251
01:19:33,840 --> 01:19:48,119
identifier it says I agree with that I

1252
01:19:45,750 --> 01:19:53,489
don't know where the parentheses are

1253
01:19:48,119 --> 01:20:03,930
that it's being upset about necessarily

1254
01:19:53,489 --> 01:20:12,389
I don't see any errant parentheses

1255
01:20:03,930 --> 01:20:20,850
jumping out at me but let's see hmm

1256
01:20:12,390 --> 01:20:22,730
parse error all right let's take a look

1257
01:20:20,850 --> 01:20:27,749
here

1258
01:20:22,729 --> 01:20:27,748
[Applause]

1259
01:20:47,359 --> 01:20:53,819
so that all looks fine and furthermore

1260
01:20:50,729 --> 01:20:57,089
it got passed compiling all of this

1261
01:20:53,819 --> 01:20:57,090
[Applause]

1262
01:20:59,060 --> 01:21:12,600
right that looks fine unless it's

1263
01:21:09,960 --> 01:21:16,199
complaining about this cast which I

1264
01:21:12,600 --> 01:21:21,930
don't think it would although I suppose

1265
01:21:16,199 --> 01:21:25,579
we don't really know that all looks it

1266
01:21:21,930 --> 01:21:32,940
looks to me like I don't see an errant

1267
01:21:25,579 --> 01:21:36,090
parentheses anywhere is there now what I

1268
01:21:32,939 --> 01:21:38,149
could do here is just let's let's break

1269
01:21:36,090 --> 01:21:42,840
this out a little bit more specifically

1270
01:21:38,149 --> 01:21:44,449
so whatever the sample count is let's do

1271
01:21:42,840 --> 01:21:48,510
help man

1272
01:21:44,449 --> 01:21:51,059
after all that so I guess there's just

1273
01:21:48,510 --> 01:22:00,260
no way to tell for coder please please

1274
01:21:51,060 --> 01:22:00,260
stop reinventing my my tear duct

1275
01:22:06,429 --> 01:22:09,880
so let's try this

1276
01:22:15,828 --> 01:22:26,029
so I'm going to do here is see whether I

1277
01:22:19,158 --> 01:22:29,598
can create a floating error that I can

1278
01:22:26,029 --> 01:22:31,009
move around the line that's in that's

1279
01:22:29,599 --> 01:22:37,279
all things like I figure out which line

1280
01:22:31,010 --> 01:22:41,090
it is yeah so we do know it's this line

1281
01:22:37,279 --> 01:22:44,719
so this parenthesis f/32 must be a

1282
01:22:41,090 --> 01:22:47,630
problem for some reason I'm not sure

1283
01:22:44,719 --> 01:22:50,809
what that problem is but I guess we'll

1284
01:22:47,630 --> 01:22:55,099
find out so let's suppose I we do in

1285
01:22:50,809 --> 01:22:57,559
sample count and I do 1.0 F / f through

1286
01:22:55,099 --> 01:23:01,520
to sample camp here and then I multiply

1287
01:22:57,559 --> 01:23:09,770
in sample count by combined color do I

1288
01:23:01,520 --> 01:23:15,010
change my error at all so it really does

1289
01:23:09,770 --> 01:23:25,210
not like that cast to an f32

1290
01:23:15,010 --> 01:23:25,210
I just don't know why it doesn't like it

1291
01:23:45,189 --> 01:23:51,969
so presumably that's it that was really

1292
01:23:47,710 --> 01:23:54,100
strange doesn't like the cast it didn't

1293
01:23:51,970 --> 01:23:55,780
like casting to a float there but I'm

1294
01:23:54,100 --> 01:23:58,960
not sure why it didn't like casting to a

1295
01:23:55,779 --> 01:24:01,989
float there because it's in theory that

1296
01:23:58,960 --> 01:24:04,199
should work fine I would think but who

1297
01:24:01,989 --> 01:24:04,199
knows

1298
01:24:06,359 --> 01:24:12,309
we do have an error here where it

1299
01:24:09,100 --> 01:24:21,039
doesn't like the fact that I am trying

1300
01:24:12,310 --> 01:24:22,180
to bind a texture but I'm not sure what

1301
01:24:21,039 --> 01:24:25,989
it doesn't like about those because

1302
01:24:22,180 --> 01:24:29,079
those do seem to be reasonable texture

1303
01:24:25,989 --> 01:24:34,380
handles the error that it's professing

1304
01:24:29,079 --> 01:24:34,380
is GL invalid operation

1305
01:24:42,710 --> 01:24:52,300
and so I guess what I would suspect is

1306
01:24:47,859 --> 01:24:55,698
that is because those are multi sample

1307
01:24:52,300 --> 01:25:01,070
so I probably have to bind them to the

1308
01:24:55,698 --> 01:25:07,819
multi sample slop maybe this is me just

1309
01:25:01,069 --> 01:25:19,158
assuming that that's true I don't

1310
01:25:07,819 --> 01:25:21,859
actually know that it is this is just

1311
01:25:19,158 --> 01:25:26,689
pure guess again my part never actually

1312
01:25:21,859 --> 01:25:29,929
done that before so we are running now

1313
01:25:26,689 --> 01:25:33,669
but we're not doing anything on the

1314
01:25:29,929 --> 01:25:36,670
screen which is not a great situation

1315
01:25:33,670 --> 01:25:36,670
also

1316
01:25:51,649 --> 01:25:56,059
hmm nice eh

1317
01:25:56,368 --> 01:26:00,000
so when we found the frame buffer we

1318
01:25:58,079 --> 01:26:03,569
bind to the two frame buffer which are

1319
01:26:00,000 --> 01:26:05,750
writing those you know we're writing to

1320
01:26:03,569 --> 01:26:09,899
the color the non multi sampled color

1321
01:26:05,750 --> 01:26:11,729
end of buffers we grab the multi sampled

1322
01:26:09,899 --> 01:26:16,979
color and death buffers here that we

1323
01:26:11,729 --> 01:26:21,779
execute this sort of read from them so

1324
01:26:16,979 --> 01:26:24,509
you know I guess sample count might be

1325
01:26:21,779 --> 01:26:25,979
zero there right so because do we

1326
01:26:24,510 --> 01:26:30,210
actually set that I don't know that we

1327
01:26:25,979 --> 01:26:31,859
do in fact I I'm pretty sure we don't so

1328
01:26:30,210 --> 01:26:37,079
that's actually something I just have to

1329
01:26:31,859 --> 01:26:40,649
finish here so what I do want to do here

1330
01:26:37,079 --> 01:26:44,579
is say hey sample count has to be equal

1331
01:26:40,649 --> 01:26:47,849
to opengl multi sampling count i assume

1332
01:26:44,579 --> 01:26:50,809
we stored that but maybe we didn't so we

1333
01:26:47,850 --> 01:26:50,810
may have to store that

1334
01:27:02,060 --> 01:27:05,298
[Applause]

1335
01:27:08,109 --> 01:27:11,429
[Applause]

1336
01:27:13,229 --> 01:27:26,049
be honest I'm not sure max multi-sample

1337
01:27:15,850 --> 01:27:27,730
count is the right name for that I think

1338
01:27:26,050 --> 01:27:29,829
what we'd rather do is just call it

1339
01:27:27,729 --> 01:27:31,719
multi sample count but you know I guess

1340
01:27:29,829 --> 01:27:39,479
we can leave that for a different day

1341
01:27:31,720 --> 01:27:39,479
[Applause]

1342
01:27:44,340 --> 01:27:48,190
all right so all I have to do now is

1343
01:27:46,600 --> 01:27:51,460
actually query the location of that

1344
01:27:48,189 --> 01:27:55,139
thing which we'll go ahead and do now so

1345
01:27:51,460 --> 01:27:58,960
let's go ahead and get the sample count

1346
01:27:55,140 --> 01:28:03,489
ID here we don't really need ID

1347
01:27:58,960 --> 01:28:05,380
we'll just call it sample count and so

1348
01:28:03,488 --> 01:28:07,509
then when I'm actually buying when I

1349
01:28:05,380 --> 01:28:24,730
actually compile this program I just

1350
01:28:07,510 --> 01:28:26,350
need to get that uniform right so and I

1351
01:28:24,729 --> 01:28:28,299
don't think we input anything else right

1352
01:28:26,350 --> 01:28:30,100
the only thing that we implement input

1353
01:28:28,300 --> 01:28:32,469
here that's an actual you know piece of

1354
01:28:30,100 --> 01:28:34,060
data you know besides the texture

1355
01:28:32,469 --> 01:28:38,409
handles is just what that sample count

1356
01:28:34,060 --> 01:28:40,630
is all right well good news actually is

1357
01:28:38,409 --> 01:28:42,939
that that started working much quicker

1358
01:28:40,630 --> 01:28:44,230
than I would have expected unfortunately

1359
01:28:42,939 --> 01:28:47,049
it's not giving us particularly good

1360
01:28:44,229 --> 01:28:50,439
results here to say the least

1361
01:28:47,050 --> 01:28:52,180
but you know what are you going to do it

1362
01:28:50,439 --> 01:28:55,539
looks like the Alpha value is not

1363
01:28:52,180 --> 01:28:59,460
getting written properly there and I'm

1364
01:28:55,539 --> 01:28:59,460
not sure why that is

1365
01:29:04,840 --> 01:29:10,060
so if we look at what happens here I

1366
01:29:07,420 --> 01:29:11,560
don't see any mistreatment of the Alpha

1367
01:29:10,060 --> 01:29:15,460
you know we are summing all the values

1368
01:29:11,560 --> 01:29:19,210
together and we're keeping the closest

1369
01:29:15,460 --> 01:29:22,210
step but we're summing all of the all of

1370
01:29:19,210 --> 01:29:27,430
the texels but we're losing the alpha

1371
01:29:22,210 --> 01:29:29,920
value and I'm not exactly sure why we

1372
01:29:27,430 --> 01:29:35,530
don't change the mode adults here I

1373
01:29:29,920 --> 01:29:37,239
don't think gia blend is off and so

1374
01:29:35,529 --> 01:29:49,960
we're not actually we're always just

1375
01:29:37,239 --> 01:29:54,159
writing one sample directly one sample

1376
01:29:49,960 --> 01:29:56,500
and only one sample I guess one thing I

1377
01:29:54,159 --> 01:29:59,050
don't know is are they is being cleared

1378
01:29:56,500 --> 01:30:02,680
at all and we do want to disable the

1379
01:29:59,050 --> 01:30:05,230
depth test I guess but if that shouldn't

1380
01:30:02,680 --> 01:30:07,570
really be doing anything because there

1381
01:30:05,229 --> 01:30:12,399
shouldn't be any values in the depth

1382
01:30:07,569 --> 01:30:14,319
buffer yet at that point however we

1383
01:30:12,399 --> 01:30:24,489
wouldn't really normally have to clear

1384
01:30:14,319 --> 01:30:27,549
those so and we don't clear them so it I

1385
01:30:24,489 --> 01:30:30,429
am a little weirded out by what I'm

1386
01:30:27,550 --> 01:30:34,300
seeing act honestly because I feel like

1387
01:30:30,430 --> 01:30:37,990
the the depth test should have made that

1388
01:30:34,300 --> 01:30:41,369
go a bit squirrelly but alright let's

1389
01:30:37,989 --> 01:30:48,250
just see now so it was just a depth test

1390
01:30:41,369 --> 01:30:48,849
nevermind alright so some things to note

1391
01:30:48,250 --> 01:30:52,210
here

1392
01:30:48,850 --> 01:30:54,970
we now have multi sampling on and what's

1393
01:30:52,210 --> 01:30:57,630
very peculiar about this and I have to

1394
01:30:54,970 --> 01:31:01,449
say was not what I was expecting at all

1395
01:30:57,630 --> 01:31:03,930
full disclosure is that we don't have

1396
01:31:01,449 --> 01:31:08,319
the artifacts that we were seeing before

1397
01:31:03,930 --> 01:31:15,730
we have new artifacts so that's very

1398
01:31:08,319 --> 01:31:18,009
strange and I suppose good because I

1399
01:31:15,729 --> 01:31:19,538
guess at the end of the day

1400
01:31:18,010 --> 01:31:21,039
that means these artifacts do have

1401
01:31:19,538 --> 01:31:23,439
something to do with the death ticking

1402
01:31:21,038 --> 01:31:25,479
and we do have a shot at correcting them

1403
01:31:23,439 --> 01:31:26,859
that way because if they went away when

1404
01:31:25,479 --> 01:31:28,928
I switch to a different resolving

1405
01:31:26,859 --> 01:31:30,609
function than the default one the

1406
01:31:28,929 --> 01:31:35,529
graphics card was using all of a sudden

1407
01:31:30,609 --> 01:31:37,359
things changed so I suppose that's good

1408
01:31:35,529 --> 01:31:40,210
however it's what's not good is that

1409
01:31:37,359 --> 01:31:43,808
we've got a new artifact in here that

1410
01:31:40,210 --> 01:31:48,158
I'm seeing and I'm not sure what's going

1411
01:31:43,809 --> 01:31:53,880
on with that pretty subtle but it's

1412
01:31:48,158 --> 01:31:53,879
definitely annoying me everything else

1413
01:31:54,149 --> 01:32:01,500
is looking pretty good actually

1414
01:32:04,809 --> 01:32:12,250
right it's just the edges of those that

1415
01:32:09,788 --> 01:32:19,779
aren't so good and I have no idea why

1416
01:32:12,250 --> 01:32:29,139
those edges are having anything happened

1417
01:32:19,779 --> 01:32:32,698
to them at all if I'm being honest like

1418
01:32:29,139 --> 01:32:32,699
I'm talking about that right there I

1419
01:32:34,800 --> 01:32:39,010
guess it's just z-fighting maybe I don't

1420
01:32:37,689 --> 01:32:42,098
know that's going to warrant some

1421
01:32:39,010 --> 01:32:43,239
further study what I would like to do is

1422
01:32:42,099 --> 01:32:44,920
I'd like to switch back to higher

1423
01:32:43,238 --> 01:32:46,538
resolution see how slow this is right

1424
01:32:44,920 --> 01:32:48,760
now because remember we had to switch to

1425
01:32:46,538 --> 01:32:51,609
a lower res for rendering because it was

1426
01:32:48,760 --> 01:32:53,020
very slow when we have to do this I'm

1427
01:32:51,609 --> 01:32:54,969
assuming that's just because of the

1428
01:32:53,020 --> 01:32:57,699
multi sample rendering in the first

1429
01:32:54,969 --> 01:32:59,559
place but don't actually know why it's

1430
01:32:57,698 --> 01:33:01,419
slow right we don't get anything from

1431
01:32:59,559 --> 01:33:03,099
the graph start at the moment that would

1432
01:33:01,420 --> 01:33:05,260
tell us why it's slow so we're flying a

1433
01:33:03,099 --> 01:33:06,578
little bit blind as we generally have

1434
01:33:05,260 --> 01:33:09,070
been with this graphics card so you

1435
01:33:06,578 --> 01:33:10,389
can't even run anything on it really

1436
01:33:09,069 --> 01:33:11,889
that gives us insight so I'm assuming

1437
01:33:10,389 --> 01:33:14,559
this will be slow like our previous one

1438
01:33:11,889 --> 01:33:15,788
was slow but I don't actually know and

1439
01:33:14,559 --> 01:33:19,650
yeah you can see that's like super

1440
01:33:15,788 --> 01:33:19,649
SuperDuper slow right

1441
01:33:33,559 --> 01:33:38,210
what's particularly interesting about

1442
01:33:35,090 --> 01:33:43,760
this and it makes absolutely no sense to

1443
01:33:38,210 --> 01:33:45,439
me at all is if you think about what's

1444
01:33:43,760 --> 01:33:51,230
going on here there should be absolutely

1445
01:33:45,439 --> 01:33:53,419
no reason why this would be more than

1446
01:33:51,229 --> 01:33:56,178
four times slower so we increase the

1447
01:33:53,420 --> 01:33:58,609
resolution by four but the frame rate

1448
01:33:56,179 --> 01:34:06,889
tank by weighing more than four I would

1449
01:33:58,609 --> 01:34:09,069
argue so I don't really know if that

1450
01:34:06,889 --> 01:34:11,420
meant we fell out of some fast path

1451
01:34:09,069 --> 01:34:13,969
where we're just stressing out the

1452
01:34:11,420 --> 01:34:15,800
graphics cards memory subsystem in a way

1453
01:34:13,969 --> 01:34:24,010
that now like it blew it blew out of a

1454
01:34:15,800 --> 01:34:26,179
cache somehow you know I'm just not sure

1455
01:34:24,010 --> 01:34:27,679
what I would like and I don't know why

1456
01:34:26,179 --> 01:34:31,248
we don't have this in here is I'm going

1457
01:34:27,679 --> 01:34:37,699
to put in a 1280 P mode I mean I twelve

1458
01:34:31,248 --> 01:34:39,529
it that's good a 720p mode I'm assuming

1459
01:34:37,698 --> 01:34:41,509
any modern graphics card that isn't this

1460
01:34:39,529 --> 01:34:46,248
graphics card would actually have no

1461
01:34:41,510 --> 01:34:48,889
trouble with this so I think it's mainly

1462
01:34:46,248 --> 01:34:50,498
just because this card is so old that we

1463
01:34:48,889 --> 01:34:53,420
have to worry about it at all and

1464
01:34:50,498 --> 01:34:55,670
obviously we've got some weirdness

1465
01:34:53,420 --> 01:35:01,118
happening to here which I'm not sure I

1466
01:34:55,670 --> 01:35:01,118
understand why we where we aren't seeing

1467
01:35:05,859 --> 01:35:13,460
we are seeing our little render our

1468
01:35:09,920 --> 01:35:18,349
debug overlay so we've got something

1469
01:35:13,460 --> 01:35:19,998
weird happening there as well so you

1470
01:35:18,349 --> 01:35:23,029
know if we do this resolves multisample

1471
01:35:19,998 --> 01:35:25,279
and then we come through here where when

1472
01:35:23,029 --> 01:35:32,170
we're on the last one we then bind the

1473
01:35:25,279 --> 01:35:32,170
peel buffer the

1474
01:35:37,159 --> 01:35:42,710
it's that correct depth peel read buffer

1475
01:35:47,488 --> 01:35:53,968
so I think that's erroneous that's

1476
01:35:50,670 --> 01:36:04,020
actually causing us to draw to the wrong

1477
01:35:53,969 --> 01:36:05,130
one I think so that's going to out note

1478
01:36:04,020 --> 01:36:06,570
though that's actually correct

1479
01:36:05,130 --> 01:36:10,050
so that's going to draw to the one that

1480
01:36:06,569 --> 01:36:11,729
we're actually using for resolves which

1481
01:36:10,050 --> 01:36:15,289
is correct because we don't want to do

1482
01:36:11,729 --> 01:36:15,289
any month of sampling after this right

1483
01:36:18,829 --> 01:36:24,050
so in theory that should be fine

1484
01:36:31,019 --> 01:36:34,110
so I will say something else it's a

1485
01:36:33,359 --> 01:36:38,998
little bit weird

1486
01:36:34,109 --> 01:36:50,509
his multisample is off at the moment

1487
01:36:38,998 --> 01:36:55,498
isn't it so multisample is actually off

1488
01:36:50,510 --> 01:36:58,998
apparently but we are still getting all

1489
01:36:55,498 --> 01:37:01,349
of the multi sampling it would seem

1490
01:36:58,998 --> 01:37:04,498
because we never turned it back on again

1491
01:37:01,349 --> 01:37:11,670
when we went to death feeling when I use

1492
01:37:04,498 --> 01:37:13,529
a multi sample target how are we getting

1493
01:37:11,670 --> 01:37:15,420
the smoothing if multi sampling is

1494
01:37:13,529 --> 01:37:20,399
actually still technically supposed to

1495
01:37:15,420 --> 01:37:23,300
be off I have a feeling it is not

1496
01:37:20,399 --> 01:37:23,299
actually off

1497
01:37:28,119 --> 01:37:32,649
I mean because it looks the same whether

1498
01:37:30,039 --> 01:37:42,149
it's on or off so I have a feeling that

1499
01:37:32,649 --> 01:37:42,149
that is just a a non enable if you will

1500
01:38:02,469 --> 01:38:09,189
but anyway ignoring that for the moment

1501
01:38:05,880 --> 01:38:13,359
the question is why are we not getting

1502
01:38:09,189 --> 01:38:15,369
you know after we fall out of here why

1503
01:38:13,359 --> 01:38:17,829
are we not seeing any of the debug

1504
01:38:15,369 --> 01:38:21,039
information show up so after we get out

1505
01:38:17,829 --> 01:38:22,988
of here peel index peeling equaling

1506
01:38:21,039 --> 01:38:26,350
false and we come through here

1507
01:38:22,988 --> 01:38:28,269
we're not peeling anymore what's the

1508
01:38:26,350 --> 01:38:31,360
problem like why are we getting this

1509
01:38:28,270 --> 01:38:33,730
weird situation where we're not seeing

1510
01:38:31,359 --> 01:38:38,170
any of our other rendering take place

1511
01:38:33,729 --> 01:38:41,109
and assuming I mean I don't know but I'm

1512
01:38:38,170 --> 01:38:49,600
assuming that if we turn that rendering

1513
01:38:41,109 --> 01:39:00,059
hand I'm assuming that if we turn off

1514
01:38:49,600 --> 01:39:00,060
multi sampling oops it's back right

1515
01:39:12,470 --> 01:39:21,560
so as one thing I could do is set the

1516
01:39:18,479 --> 01:39:21,559
multi sampling hands

1517
01:39:23,189 --> 01:39:26,299
[Applause]

1518
01:39:36,118 --> 01:39:40,398
where did the compile go okay there's

1519
01:39:52,029 --> 01:39:56,170
so you can see as soon as I turn on

1520
01:39:53,829 --> 01:40:02,680
multi sampling you know we definitely

1521
01:39:56,170 --> 01:40:05,079
have the debug go away it's not like the

1522
01:40:02,680 --> 01:40:09,039
debug wasn't rendering because if I turn

1523
01:40:05,079 --> 01:40:11,859
off the multi sampling hint it's back so

1524
01:40:09,039 --> 01:40:19,750
something about the state that's getting

1525
01:40:11,859 --> 01:40:23,649
set in that multi sample resolve I guess

1526
01:40:19,750 --> 01:40:28,689
I is causing us you know it's cascading

1527
01:40:23,649 --> 01:40:29,949
through and causing us to not see any of

1528
01:40:28,689 --> 01:40:34,960
the stuff that we were supposed to be

1529
01:40:29,949 --> 01:40:36,819
seeing not sure why that would be and we

1530
01:40:34,960 --> 01:40:39,090
know that if we do the resolve without

1531
01:40:36,819 --> 01:40:42,090
that if we do the resolve the other way

1532
01:40:39,090 --> 01:40:42,090
right

1533
01:40:52,738 --> 01:41:15,119
don't know why I'm not getting compiled

1534
01:40:54,569 --> 01:41:15,539
anytime I picked twice to compile all

1535
01:41:15,119 --> 01:41:18,658
right

1536
01:41:15,539 --> 01:41:23,219
five-minute warning so if I come through

1537
01:41:18,658 --> 01:41:26,729
here and I ask it to use the old-school

1538
01:41:23,219 --> 01:41:33,029
path so if I if I just use the to bind

1539
01:41:26,729 --> 01:41:36,299
frame buffers and then use the blit that

1540
01:41:33,029 --> 01:41:41,099
one shows it just fine right no worries

1541
01:41:36,300 --> 01:41:43,230
there but this one doesn't and so that

1542
01:41:41,100 --> 01:41:45,060
seems to suggest to me that we don't

1543
01:41:43,229 --> 01:41:48,500
have a problem with the rest of the path

1544
01:41:45,060 --> 01:41:51,120
we have a problem with this right

1545
01:41:48,500 --> 01:42:01,109
something that we're setting in here for

1546
01:41:51,119 --> 01:42:03,599
whatever reason you know makes the makes

1547
01:42:01,109 --> 01:42:05,849
this leave the state in such a fashion

1548
01:42:03,600 --> 01:42:08,280
if it will mess up other things that

1549
01:42:05,850 --> 01:42:11,010
were kind of come later but I'm not sure

1550
01:42:08,279 --> 01:42:15,509
why them be because if we take a look at

1551
01:42:11,010 --> 01:42:18,980
what happens here we're setting our

1552
01:42:15,510 --> 01:42:22,260
textures you know these two multisample

1553
01:42:18,979 --> 01:42:24,809
texture is texture 0 texture 1 we clear

1554
01:42:22,260 --> 01:42:28,429
them both immediately thereafter so

1555
01:42:24,810 --> 01:42:32,010
we're not leaving any textures bound

1556
01:42:28,429 --> 01:42:34,319
when we bind the frame buffer we clear

1557
01:42:32,010 --> 01:42:35,850
it after the fact not that we even need

1558
01:42:34,319 --> 01:42:39,658
to because it will get set immediately

1559
01:42:35,850 --> 01:42:43,710
after anyway we don't change the read

1560
01:42:39,658 --> 01:42:45,899
frame buffer anywhere so that would be

1561
01:42:43,710 --> 01:42:48,270
the same as it was of course I don't

1562
01:42:45,899 --> 01:42:50,750
know maybe that's something we need to

1563
01:42:48,270 --> 01:42:50,750
change

1564
01:43:03,368 --> 01:43:18,338
you know what now that I think about it

1565
01:43:05,498 --> 01:43:19,328
I want to look it up in jail buying

1566
01:43:18,338 --> 01:43:21,519
frame buffer

1567
01:43:19,328 --> 01:43:27,728
cuz that just sets the whole frame

1568
01:43:21,519 --> 01:43:29,800
buffer right yeah so now that I think

1569
01:43:27,729 --> 01:43:32,409
about it this shouldn't have a draw

1570
01:43:29,800 --> 01:43:34,569
frame but this is this is actually still

1571
01:43:32,408 --> 01:43:37,598
reading from a different frame buffer

1572
01:43:34,569 --> 01:43:39,849
isn't it because I only bound the draw

1573
01:43:37,599 --> 01:43:42,010
frame buffer and I didn't bind the read

1574
01:43:39,849 --> 01:43:45,429
frame buffer which meant that the depth

1575
01:43:42,010 --> 01:43:48,248
reads that's why that's why the GL depth

1576
01:43:45,429 --> 01:43:49,989
test turned disabled was necessary and

1577
01:43:48,248 --> 01:43:52,208
why it wasn't producing artifacts I

1578
01:43:49,988 --> 01:43:57,728
thought it's because we were actually

1579
01:43:52,208 --> 01:43:59,738
reading from the wrong frame buffer of

1580
01:43:57,729 --> 01:44:02,319
course we then we would get totally

1581
01:43:59,738 --> 01:44:07,628
different artifacts now if we if we

1582
01:44:02,319 --> 01:44:13,149
found it this way but okay so that makes

1583
01:44:07,628 --> 01:44:14,769
a lot more sense all right

1584
01:44:13,149 --> 01:44:16,628
now that of course there's everything to

1585
01:44:14,769 --> 01:44:19,719
do with our bug but I was just noticing

1586
01:44:16,628 --> 01:44:23,918
that that was the case okay

1587
01:44:19,719 --> 01:44:25,569
so the question is what about this you

1588
01:44:23,918 --> 01:44:29,769
know what are we doing here that makes

1589
01:44:25,569 --> 01:44:35,619
it so that it's a it gets messed up on

1590
01:44:29,769 --> 01:44:38,679
the way in and I have no idea I don't

1591
01:44:35,618 --> 01:44:41,228
know you know I mean I guess one thing

1592
01:44:38,679 --> 01:44:42,849
we could try doing is let's just try to

1593
01:44:41,229 --> 01:44:45,280
verify that it is in fact something

1594
01:44:42,849 --> 01:44:48,219
state-based and the way I could do that

1595
01:44:45,279 --> 01:44:53,259
is just call both of these right so I

1596
01:44:48,219 --> 01:44:54,878
could just say you know what um just do

1597
01:44:53,260 --> 01:44:56,769
the result month example but then

1598
01:44:54,878 --> 01:44:59,469
actually just do the regular resolve the

1599
01:44:56,769 --> 01:45:03,519
way we were doing it before okay so

1600
01:44:59,469 --> 01:45:06,550
since we don't see it now I feel like

1601
01:45:03,519 --> 01:45:09,159
that's a good indication that that is in

1602
01:45:06,550 --> 01:45:11,939
fact a state-based problem so some

1603
01:45:09,158 --> 01:45:16,538
states that we're setting there is

1604
01:45:11,939 --> 01:45:17,070
causing the subsequent calls to fail and

1605
01:45:16,538 --> 01:45:20,009
we're not

1606
01:45:17,069 --> 01:45:22,799
setting that state here and so by not

1607
01:45:20,010 --> 01:45:27,600
setting that state here we don't end up

1608
01:45:22,800 --> 01:45:29,400
with a problem so I guess the other

1609
01:45:27,600 --> 01:45:32,520
thing we could do now is let's let's do

1610
01:45:29,399 --> 01:45:35,909
it this way let's now go into resolve

1611
01:45:32,520 --> 01:45:41,850
multisample and see what we can turn off

1612
01:45:35,909 --> 01:45:59,389
that would still make this work right so

1613
01:45:41,850 --> 01:46:03,930
we don't see anything and now we do I

1614
01:45:59,390 --> 01:46:07,740
let's go ahead and binary search I guess

1615
01:46:03,930 --> 01:46:10,829
so maybe let's go all the way down to

1616
01:46:07,739 --> 01:46:15,179
that and see can we do that much and

1617
01:46:10,829 --> 01:46:25,470
still have it show up yes we can can we

1618
01:46:15,180 --> 01:46:32,409
bind the program yes we can can we set

1619
01:46:25,470 --> 01:46:35,750
the active texture that's the wrong one

1620
01:46:32,409 --> 01:46:35,750
[Applause]

1621
01:46:37,828 --> 01:46:44,689
yes we can reset those after textures

1622
01:46:48,289 --> 01:46:56,760
yes we can so it's literally just the

1623
01:46:52,380 --> 01:46:59,940
draw arrays call so actually thinking of

1624
01:46:56,760 --> 01:47:05,539
primitive is required we have to

1625
01:46:59,939 --> 01:47:05,539
actually activate the pipeline itself

1626
01:47:06,139 --> 01:47:16,679
okay and now I have no idea what's going

1627
01:47:08,578 --> 01:47:22,789
on didn't we just verify that that would

1628
01:47:16,679 --> 01:47:22,789
cause the problem what am I missing

1629
01:47:26,539 --> 01:47:35,840
okay are you trying to tell me that

1630
01:47:31,029 --> 01:47:45,769
switching the order of these oh its

1631
01:47:35,840 --> 01:47:47,690
access GL active texture so we were

1632
01:47:45,770 --> 01:47:51,620
setting active texture one on the way

1633
01:47:47,689 --> 01:47:53,839
out it was leaving active texture Oh God

1634
01:47:51,619 --> 01:47:58,309
this is why state-based stuff it's so

1635
01:47:53,840 --> 01:48:03,319
bad man I wish I could send an owl shame

1636
01:47:58,310 --> 01:48:04,990
to the OpenGL people all right so that's

1637
01:48:03,319 --> 01:48:09,619
fine

1638
01:48:04,989 --> 01:48:11,889
whatevs alright so I'm going to go to

1639
01:48:09,619 --> 01:48:15,619
head and go to the Q&amp;A here but that's

1640
01:48:11,890 --> 01:48:18,710
now we are now in control of the def

1641
01:48:15,619 --> 01:48:21,229
resolve ourselves we're not doing

1642
01:48:18,710 --> 01:48:23,680
anything interesting in it but we are in

1643
01:48:21,229 --> 01:48:29,149
control of it so that's good to know

1644
01:48:23,680 --> 01:48:31,420
and yeah like I said really all we want

1645
01:48:29,149 --> 01:48:36,170
to do here is then play around and see

1646
01:48:31,420 --> 01:48:44,289
can we find something in here that would

1647
01:48:36,170 --> 01:48:47,480
help us and again maybe that's just

1648
01:48:44,289 --> 01:48:53,239
looking for a death range that's

1649
01:48:47,479 --> 01:48:57,169
reasonable right and and you know we'll

1650
01:48:53,239 --> 01:48:59,409
work on that next week you know it might

1651
01:48:57,170 --> 01:49:01,520
just work for all I know

1652
01:48:59,409 --> 01:49:03,760
all right let's go ahead and go to the

1653
01:49:01,520 --> 01:49:03,760
QA

1654
01:49:30,300 --> 01:49:35,199
nikola Casey you often argue that we

1655
01:49:32,800 --> 01:49:36,850
don't need to free memory and clean up

1656
01:49:35,199 --> 01:49:38,439
upon exiting the program does the same

1657
01:49:36,850 --> 01:49:40,120
reasoning applies to GL delete program

1658
01:49:38,439 --> 01:49:42,039
and others

1659
01:49:40,119 --> 01:49:43,210
I saw you use that and wondered what is

1660
01:49:42,039 --> 01:49:46,180
the reasoning behind it

1661
01:49:43,210 --> 01:49:47,739
so I'm guessing again I know it's the

1662
01:49:46,180 --> 01:49:51,159
beginning of stream you asked a question

1663
01:49:47,739 --> 01:49:54,010
that we already covered and this is also

1664
01:49:51,159 --> 01:49:55,149
a question we already covered so I'm

1665
01:49:54,010 --> 01:49:58,000
assuming you must have missed some

1666
01:49:55,149 --> 01:50:01,210
streams so I'll give a brief recap but

1667
01:49:58,000 --> 01:50:05,710
the answer is is in is already in the

1668
01:50:01,210 --> 01:50:09,819
streams we allow recompiling of shaders

1669
01:50:05,710 --> 01:50:14,140
on the fly and so the reason we call the

1670
01:50:09,819 --> 01:50:16,750
delete call on programs is because we my

1671
01:50:14,140 --> 01:50:19,060
tree compile them many times so when we

1672
01:50:16,750 --> 01:50:22,539
recompile them we call delete we

1673
01:50:19,060 --> 01:50:24,460
actually don't call delete on exit so if

1674
01:50:22,539 --> 01:50:31,989
you'll notice where we call GL delete

1675
01:50:24,460 --> 01:50:34,930
program it's when we change the settings

1676
01:50:31,989 --> 01:50:37,899
we free the programs before creating new

1677
01:50:34,930 --> 01:50:41,050
ones so we actually never do free them

1678
01:50:37,899 --> 01:50:42,969
on exit and you don't have to we only

1679
01:50:41,050 --> 01:50:44,320
free them when we're about to create new

1680
01:50:42,970 --> 01:50:46,390
ones and the reason for that is that

1681
01:50:44,319 --> 01:50:48,670
well you know do you really have to

1682
01:50:46,390 --> 01:50:50,140
probably not because how many times

1683
01:50:48,670 --> 01:50:51,940
you're really going to change them in

1684
01:50:50,140 --> 01:50:53,920
the course of a debug session but it's

1685
01:50:51,939 --> 01:50:56,259
just you know why not free them it's not

1686
01:50:53,920 --> 01:50:58,779
that much extra work to free them and

1687
01:50:56,260 --> 01:51:00,190
that way you tell the driver those

1688
01:50:58,779 --> 01:51:01,630
programs don't need to stay around so

1689
01:51:00,189 --> 01:51:04,659
you don't just keep building up building

1690
01:51:01,630 --> 01:51:06,250
up crust as you go and creating maybe a

1691
01:51:04,659 --> 01:51:07,960
bad situation for the driver where it

1692
01:51:06,250 --> 01:51:09,640
thinks you've got thousands of programs

1693
01:51:07,960 --> 01:51:12,039
all of a sudden but really all it is is

1694
01:51:09,640 --> 01:51:14,110
the same 10 programs and you just happen

1695
01:51:12,039 --> 01:51:16,659
to have switched the render settings you

1696
01:51:14,109 --> 01:51:19,529
know a hundred times while you were

1697
01:51:16,659 --> 01:51:19,529
talking between something

1698
01:51:32,069 --> 01:51:37,500
Cal Forest casting and GLSL has done f3

1699
01:51:35,670 --> 01:51:39,690
2 pencils value incentive princess

1700
01:51:37,500 --> 01:51:41,250
turkey though it's not actually true or

1701
01:51:39,689 --> 01:51:44,789
is that just only true because I'm using

1702
01:51:41,250 --> 01:51:49,520
the old version because I thought I

1703
01:51:44,789 --> 01:51:49,519
thought I have used that in GLSL

1704
01:52:21,789 --> 01:52:28,369
um let's see character set preprocessor

1705
01:52:26,539 --> 01:52:30,409
Commons tokens keywords and FRS

1706
01:52:28,369 --> 01:52:33,340
definition set accuse uniform variable

1707
01:52:30,409 --> 01:52:33,340
types basic types

1708
01:52:53,369 --> 01:52:56,789
let's see

1709
01:53:06,760 --> 01:53:10,829
now so I guess it looks like they don't

1710
01:53:08,529 --> 01:53:14,769
do that anymore or they don't allow that

1711
01:53:10,829 --> 01:53:20,140
and I'm just hallucinating that I think

1712
01:53:14,770 --> 01:53:21,880
they ever did because this is a this is

1713
01:53:20,140 --> 01:53:24,400
a later spec than even what we're

1714
01:53:21,880 --> 01:53:25,930
programming on it it doesn't seem to

1715
01:53:24,399 --> 01:53:28,289
suggest that you're ever allowed to cast

1716
01:53:25,930 --> 01:53:28,289
that way

1717
01:53:29,430 --> 01:53:44,079
so it's only C++ style casting it looks

1718
01:53:32,500 --> 01:53:47,380
like maybe creepy juice is there a sim

1719
01:53:44,079 --> 01:53:50,050
version of your color scheme I probably

1720
01:53:47,380 --> 01:53:51,609
I don't know not one that I've made but

1721
01:53:50,050 --> 01:53:54,610
there's probably a similar one out there

1722
01:53:51,609 --> 01:53:59,619
this is not an unusual color scheme this

1723
01:53:54,609 --> 01:54:03,009
will be something close because you try

1724
01:53:59,619 --> 01:54:05,170
using Mesa for debugging yeah you can I

1725
01:54:03,010 --> 01:54:09,550
mean it's a it's a real pain to get

1726
01:54:05,170 --> 01:54:12,750
everything set up but you know if you

1727
01:54:09,550 --> 01:54:12,750
really think that's going to be

1728
01:54:13,590 --> 01:54:21,190
necessary you can I would recommend

1729
01:54:17,829 --> 01:54:22,720
before doing that just getting a

1730
01:54:21,189 --> 01:54:27,669
graphics card that you can use with n

1731
01:54:22,720 --> 01:54:29,350
flight which is in videos like you know

1732
01:54:27,670 --> 01:54:31,960
a mouse thing which is probably what I

1733
01:54:29,350 --> 01:54:34,660
would I would like to do that for our

1734
01:54:31,960 --> 01:54:36,760
stream at some point at some point I

1735
01:54:34,659 --> 01:54:39,460
will build a new machine for handmade

1736
01:54:36,760 --> 01:54:43,539
hero so we're not using seven-year-old

1737
01:54:39,460 --> 01:54:46,689
hardware for the stream but I just have

1738
01:54:43,539 --> 01:54:48,729
not done that since it's always I always

1739
01:54:46,689 --> 01:54:52,569
hate spending money on new computers

1740
01:54:48,729 --> 01:54:54,609
when old computers are working okay so

1741
01:54:52,569 --> 01:54:56,469
at the moment we just live without it

1742
01:54:54,609 --> 01:54:58,179
but that's a very good way to debug as

1743
01:54:56,470 --> 01:55:01,119
well it's probably not as good as

1744
01:54:58,180 --> 01:55:02,560
something like Mesa in terms of being

1745
01:55:01,119 --> 01:55:05,409
able to step in but on the other hand

1746
01:55:02,560 --> 01:55:08,080
Mesa if you're in the mode where you

1747
01:55:05,409 --> 01:55:09,849
could step into stuff is slow whereas

1748
01:55:08,079 --> 01:55:14,159
insight is full speed until you actually

1749
01:55:09,850 --> 01:55:14,160
capture the frame right which can help

1750
01:55:29,069 --> 01:55:34,979
how often do we need to free and

1751
01:55:32,220 --> 01:55:45,360
allocate memory compared to the early

1752
01:55:34,979 --> 01:55:47,489
2000s I'm not sure I understand the

1753
01:55:45,359 --> 01:55:50,670
question can you can you elaborate on

1754
01:55:47,489 --> 01:55:58,949
that question a little bit

1755
01:55:50,670 --> 01:56:02,340
perhaps what video card do I use this is

1756
01:55:58,949 --> 01:56:07,579
a nut so this this machine is just a

1757
01:56:02,340 --> 01:56:11,150
weird machine so it's a pretty weird

1758
01:56:07,579 --> 01:56:11,149
let's see here

1759
01:56:11,390 --> 01:56:24,140
just firegl

1760
01:56:13,079 --> 01:56:24,140
something ATI fire probe v8 700

1761
01:56:47,539 --> 01:56:50,539
well

1762
01:56:55,399 --> 01:56:59,469
so with you know

1763
01:57:12,010 --> 01:57:15,900
I don't know what the year it was

1764
01:57:13,840 --> 01:57:15,900
released

1765
01:57:45,210 --> 01:58:30,060
so a 700 is this one I know what here's

1766
01:57:57,510 --> 01:58:34,250
the data sheet on the 8800 I don't see

1767
01:58:30,060 --> 01:58:34,250
it doesn't seem to be listed here oh

1768
01:58:35,119 --> 01:58:43,260
there it is

1769
01:58:36,510 --> 01:58:46,079
fire pro 3d 8700 oh my god dude we're

1770
01:58:43,260 --> 01:58:51,710
using a basically a decade old graphics

1771
01:58:46,079 --> 01:58:51,710
card at this point so that's good

1772
01:59:00,340 --> 01:59:04,110
so we're looking at this row right here

1773
01:59:05,430 --> 01:59:11,619
yeah so it flops wise so there's let's

1774
01:59:09,250 --> 01:59:16,119
just look at what this is so we have

1775
01:59:11,619 --> 01:59:19,569
1,200 flops on this graphics card let's

1776
01:59:16,119 --> 01:59:27,010
see what we have on a modern graphics

1777
01:59:19,569 --> 01:59:31,920
card just stated flops which you know

1778
01:59:27,010 --> 01:59:35,140
obviously they always kind of you know

1779
01:59:31,920 --> 01:59:37,840
fungible certainly but let's say we had

1780
01:59:35,140 --> 01:59:40,030
a 1080 just a straight 1080 we're not

1781
01:59:37,840 --> 01:59:43,079
even going to go titan how many flops

1782
01:59:40,029 --> 01:59:43,079
would we have there

1783
01:59:43,170 --> 01:59:57,239
alright so 257 I'm sorry 8000 280 8200

1784
01:59:52,859 --> 02:00:02,319
let's say flops in single precision mode

1785
01:59:57,239 --> 02:00:11,019
versus 1200 so you know figure seven

1786
02:00:02,319 --> 02:00:14,679
times more powerful roughly maybe just

1787
02:00:11,020 --> 02:00:19,240
in terms of flops not a not in any other

1788
02:00:14,680 --> 02:00:22,890
metric so you know everything else would

1789
02:00:19,239 --> 02:00:26,769
be much more efficient as well probably

1790
02:00:22,890 --> 02:00:29,079
taxol fetches memory bandwidth what is

1791
02:00:26,770 --> 02:00:34,230
the bandwidth actually here's the bus

1792
02:00:29,079 --> 02:00:37,539
bandwidth so 320 gigabytes a second

1793
02:00:34,229 --> 02:00:43,750
stated bandwidth let's see what the

1794
02:00:37,539 --> 02:00:45,460
stated bandwidth is on this one where

1795
02:00:43,750 --> 02:00:49,380
was my 8700 here

1796
02:00:45,460 --> 02:00:49,380
okay 700 is the fourth line up

1797
02:00:51,979 --> 02:00:57,229
so the bus bandwidth isn't that much

1798
02:00:54,380 --> 02:00:59,750
better right I mean it's definitely

1799
02:00:57,229 --> 02:01:02,079
better three times which is you know hey

1800
02:00:59,750 --> 02:01:08,569
that's great but it's not like

1801
02:01:02,079 --> 02:01:11,079
astronomically so so that's interesting

1802
02:01:08,569 --> 02:01:11,079
anyway

1803
02:01:16,189 --> 02:01:21,868
slightly off-topic I recently found out

1804
02:01:18,630 --> 02:01:23,639
that a VE exists for SSC there are

1805
02:01:21,868 --> 02:01:26,219
pretty clear mathematical applications

1806
02:01:23,639 --> 02:01:30,510
for it such as mate result apply do you

1807
02:01:26,219 --> 02:01:35,149
see the benefits of using a ve and in

1808
02:01:30,510 --> 02:01:35,150
whoop which contexts ah

1809
02:01:36,229 --> 02:01:47,129
eazy-e that doesn't ring a bell

1810
02:01:42,079 --> 02:01:56,569
as can you can you tell me what AV e is

1811
02:01:47,130 --> 02:01:56,569
do mean a VX or what is av e stand for

1812
02:02:11,939 --> 02:02:18,059
probably juice what is the name of your

1813
02:02:13,770 --> 02:02:19,980
color scheme well it doesn't have a name

1814
02:02:18,060 --> 02:02:21,900
it's just what I set up when I was

1815
02:02:19,979 --> 02:02:33,029
tuning the colors so it doesn't have a

1816
02:02:21,899 --> 02:02:41,009
name um alright last question okay you

1817
02:02:33,029 --> 02:02:42,920
met ABX yes so basically a BX is there's

1818
02:02:41,010 --> 02:02:46,310
a bunch of things to say about a BX

1819
02:02:42,920 --> 02:02:46,310
where do I start

1820
02:02:50,479 --> 02:03:02,729
so there are two halves to a VX the

1821
02:02:57,359 --> 02:03:08,549
first is just when the register size

1822
02:03:02,729 --> 02:03:14,659
gets extended past four floats right so

1823
02:03:08,550 --> 02:03:18,600
you know the normal normal operation in

1824
02:03:14,659 --> 02:03:26,880
sfe is 16 bytes wide right four floats

1825
02:03:18,600 --> 02:03:30,720
16 bytes 128 bits whatever right however

1826
02:03:26,880 --> 02:03:33,150
you want to think about it right so it's

1827
02:03:30,720 --> 02:03:36,659
16 bytes wide and even think of what

1828
02:03:33,149 --> 02:03:38,849
that means is it it terms in a cache

1829
02:03:36,659 --> 02:03:43,109
line which is 64 bytes it's like one

1830
02:03:38,850 --> 02:03:46,200
quarter of a cache line I and so part of

1831
02:03:43,109 --> 02:03:49,829
the move from sse2 AVX there's you know

1832
02:03:46,199 --> 02:03:53,159
a V X a B X 2 and X 512 is they are

1833
02:03:49,829 --> 02:03:55,470
slowly widening the register size out to

1834
02:03:53,159 --> 02:04:00,329
the same size of the cache line so I

1835
02:03:55,470 --> 02:04:01,980
think is good and so you end up in a

1836
02:04:00,329 --> 02:04:06,829
situation where if you go all the way to

1837
02:04:01,979 --> 02:04:09,329
avx-512 that is actually a 64 byte wide

1838
02:04:06,829 --> 02:04:11,819
register size which means you operate on

1839
02:04:09,329 --> 02:04:13,529
16 floats at a time

1840
02:04:11,819 --> 02:04:17,880
which seems like a pretty good number to

1841
02:04:13,529 --> 02:04:21,300
me right it's one cache line big it's a

1842
02:04:17,880 --> 02:04:24,619
4x4 of pixels if you were think to think

1843
02:04:21,300 --> 02:04:24,619
of it that way if you were you know

1844
02:04:25,340 --> 02:04:32,150
or 16 elements at a time for some kind

1845
02:04:29,659 --> 02:04:34,189
of matrix work 4 by 4 matrix happens to

1846
02:04:32,149 --> 02:04:35,659
be 16 elements as well it's a good

1847
02:04:34,189 --> 02:04:39,169
number it's the same number the cash

1848
02:04:35,659 --> 02:04:41,000
life that's good right so I think 16 is

1849
02:04:39,170 --> 02:04:44,630
probably a good number for a register

1850
02:04:41,000 --> 02:04:45,170
size for floats if it's cash line all

1851
02:04:44,630 --> 02:04:47,060
that's good

1852
02:04:45,170 --> 02:04:49,190
so just widening the register size is

1853
02:04:47,060 --> 02:04:51,710
good why do I not use it on handmade

1854
02:04:49,189 --> 02:04:53,599
here oh it's not important anywhere so

1855
02:04:51,710 --> 02:04:56,449
if you take a look at like the best case

1856
02:04:53,600 --> 02:05:02,750
scenario here is the steam Hardware

1857
02:04:56,449 --> 02:05:10,429
survey we take a look at the CPU see

1858
02:05:02,750 --> 02:05:13,579
here and what you can see here is you're

1859
02:05:10,430 --> 02:05:14,170
really even just turning on any AVX at

1860
02:05:13,579 --> 02:05:19,930
all

1861
02:05:14,170 --> 02:05:23,630
25% of your market goes away right and

1862
02:05:19,930 --> 02:05:26,060
you know that's that's just a little bit

1863
02:05:23,630 --> 02:05:27,739
too much of a hit and that's before you

1864
02:05:26,060 --> 02:05:29,390
even get to something like a big 512

1865
02:05:27,739 --> 02:05:32,090
which would be even worse

1866
02:05:29,390 --> 02:05:34,970
so targeting something like sse3 is just

1867
02:05:32,090 --> 02:05:36,920
a lot more sane in my opinion because

1868
02:05:34,970 --> 02:05:40,039
you know that basically nobody is

1869
02:05:36,920 --> 02:05:41,270
getting left out there the number of

1870
02:05:40,039 --> 02:05:43,369
people who are going to buy your game on

1871
02:05:41,270 --> 02:05:45,950
Steam and not have sse3 is pretty

1872
02:05:43,369 --> 02:05:47,689
negligible right so assuming these

1873
02:05:45,949 --> 02:05:50,179
numbers are accurate you know you look

1874
02:05:47,689 --> 02:05:55,219
at it you just go wow ssv for looking a

1875
02:05:50,180 --> 02:05:57,289
little dicey AVX looking very dicey it

1876
02:05:55,220 --> 02:05:59,750
means 1 in 4 people who might come to

1877
02:05:57,289 --> 02:06:01,369
your game can't run it right

1878
02:05:59,750 --> 02:06:03,409
and so if you know for sure that the

1879
02:06:01,369 --> 02:06:07,699
only people come in your game or beef

1880
02:06:03,409 --> 02:06:09,979
emic beef which kind of users who have

1881
02:06:07,699 --> 02:06:12,109
really advanced hardware them you know

1882
02:06:09,979 --> 02:06:14,059
maybe no big deal but it's just if

1883
02:06:12,109 --> 02:06:15,380
you're talking about an indie game and

1884
02:06:14,060 --> 02:06:17,030
you know so I think I don't like

1885
02:06:15,380 --> 02:06:21,350
handmade hero where we're not you know

1886
02:06:17,029 --> 02:06:23,750
trying to render some really fancy 3d

1887
02:06:21,350 --> 02:06:28,730
thing it just makes a little bit of

1888
02:06:23,750 --> 02:06:30,800
sense to say let's keep that support

1889
02:06:28,729 --> 02:06:33,589
headed down and and let's not target

1890
02:06:30,800 --> 02:06:38,849
something so you know that's the width

1891
02:06:33,590 --> 02:06:43,779
side of a bx and as the AVX stuff

1892
02:06:38,849 --> 02:06:45,969
progresses avx2 to 6fx 5:12 you get

1893
02:06:43,779 --> 02:06:48,309
closer to I think what is probably the

1894
02:06:45,969 --> 02:06:52,359
right size for those registers which is

1895
02:06:48,310 --> 02:06:58,270
probably you know probably 16 floats one

1896
02:06:52,359 --> 02:07:01,149
cache line however there's another side

1897
02:06:58,270 --> 02:07:06,880
nav X which is the instruction set the

1898
02:07:01,149 --> 02:07:11,439
instruction set for avx-512 is actually

1899
02:07:06,880 --> 02:07:14,400
very very very good it's very good

1900
02:07:11,439 --> 02:07:18,399
because it wasn't designed by Intel I

1901
02:07:14,399 --> 02:07:20,769
Intel is terrible at designing Cindy

1902
02:07:18,399 --> 02:07:24,279
instruction sets SSE is a horrific

1903
02:07:20,770 --> 02:07:28,929
instruction set in my opinion it's

1904
02:07:24,279 --> 02:07:32,469
really bad and avx-512 was the first

1905
02:07:28,929 --> 02:07:35,469
time they had outside help as far as I

1906
02:07:32,469 --> 02:07:38,310
know in fact it was the folks that read

1907
02:07:35,469 --> 02:07:41,260
who did a lot of the design work on that

1908
02:07:38,310 --> 02:07:44,920
Jeff Roberts Michael Abrash Tom Forest

1909
02:07:41,260 --> 02:07:45,969
life I don't know they're probably other

1910
02:07:44,920 --> 02:07:49,270
people I don't know if Mike's tartan

1911
02:07:45,969 --> 02:07:52,359
probably was involved possibly Ottman

1912
02:07:49,270 --> 02:07:56,650
binstock but basically what happened was

1913
02:07:52,359 --> 02:07:58,329
the rad people who are actually more on

1914
02:07:56,649 --> 02:08:00,519
the programming end that on the tougher

1915
02:07:58,329 --> 02:08:03,219
end and who write assembly language code

1916
02:08:00,520 --> 02:08:05,199
all the time we're like let's make this

1917
02:08:03,219 --> 02:08:08,939
instruction set more straightforward and

1918
02:08:05,198 --> 02:08:11,919
so I feel like having that you know

1919
02:08:08,939 --> 02:08:13,809
outside influence really improves the

1920
02:08:11,920 --> 02:08:17,408
instruction stress dramatically so

1921
02:08:13,810 --> 02:08:19,960
avx-512 is actually the first time the

1922
02:08:17,408 --> 02:08:22,059
instruction set from that collaboration

1923
02:08:19,960 --> 02:08:23,829
which was the Larrabee project is

1924
02:08:22,060 --> 02:08:26,980
actually making its way into the

1925
02:08:23,829 --> 02:08:29,469
mainline ship and that instruction set

1926
02:08:26,979 --> 02:08:32,649
is much better it has things like laying

1927
02:08:29,469 --> 02:08:35,289
base gather it's got mask registers and

1928
02:08:32,649 --> 02:08:37,658
mapping of operations built into it so

1929
02:08:35,289 --> 02:08:39,399
that you can trivially do stuff like do

1930
02:08:37,658 --> 02:08:41,019
test that goes into mass register and

1931
02:08:39,399 --> 02:08:43,329
then operate on both sides of a branch

1932
02:08:41,020 --> 02:08:45,630
so it basically turns your instruction

1933
02:08:43,329 --> 02:08:47,559
set into something you can actually use

1934
02:08:45,630 --> 02:08:50,440
rather than something where you're

1935
02:08:47,560 --> 02:08:51,539
constantly shuffling and duping

1936
02:08:50,439 --> 02:08:54,059
registers and

1937
02:08:51,539 --> 02:08:58,399
having to like overwrite things it's

1938
02:08:54,060 --> 02:08:58,400
just you know it's much much better

1939
02:08:58,460 --> 02:09:01,409
because it was actually designed by

1940
02:09:00,300 --> 02:09:02,010
people who program so I'm going like

1941
02:09:01,409 --> 02:09:03,479
this for a living

1942
02:09:02,010 --> 02:09:10,079
and we're like here's what you actually

1943
02:09:03,479 --> 02:09:13,409
need so so avx-512 if it ever gets here

1944
02:09:10,079 --> 02:09:14,880
you know taking its sweet time I think

1945
02:09:13,409 --> 02:09:17,729
the first desktop chips that have

1946
02:09:14,880 --> 02:09:20,130
avx-512 are like shipping now or

1947
02:09:17,729 --> 02:09:21,689
something right there was eons that

1948
02:09:20,130 --> 02:09:23,730
shipped with it a while back and it's

1949
02:09:21,689 --> 02:09:26,729
been in the Laribee part so it's been in

1950
02:09:23,729 --> 02:09:28,559
CompTIA original Xeon Phi and the new

1951
02:09:26,729 --> 02:09:30,299
Knights landing Xeon Phi or whatever the

1952
02:09:28,560 --> 02:09:30,930
V on flies are up to now it's been in

1953
02:09:30,300 --> 02:09:32,989
there forever

1954
02:09:30,930 --> 02:09:35,700
it was in the air since the first one

1955
02:09:32,989 --> 02:09:37,769
but in terms of actually getting the

1956
02:09:35,699 --> 02:09:41,069
mainline processor it's only going to

1957
02:09:37,770 --> 02:09:45,240
come to the desktop now and sadly I

1958
02:09:41,069 --> 02:09:49,429
don't think Rison picked it up which

1959
02:09:45,239 --> 02:10:05,369
sucks so I think Rison core doesn't do

1960
02:09:49,430 --> 02:10:08,670
avx-512 yes and I don't know yeah so you

1961
02:10:05,369 --> 02:10:11,010
know the AMD designed you know their new

1962
02:10:08,670 --> 02:10:13,190
core and P didn't design it with those

1963
02:10:11,010 --> 02:10:16,949
instructions in mind which was nuts

1964
02:10:13,189 --> 02:10:19,199
because there's the right way to do that

1965
02:10:16,949 --> 02:10:20,399
kind of code in my opinion now granted

1966
02:10:19,199 --> 02:10:23,460
you know these people are hardware

1967
02:10:20,399 --> 02:10:25,019
experts and I'm not so I don't know

1968
02:10:23,460 --> 02:10:26,730
maybe there's a really good reason why

1969
02:10:25,020 --> 02:10:29,310
the avx-512 instructions aren't the

1970
02:10:26,729 --> 02:10:32,039
right way to do it but it sure seems

1971
02:10:29,310 --> 02:10:34,110
like the right way to do it masks

1972
02:10:32,039 --> 02:10:37,470
registers I feel like are a big deal and

1973
02:10:34,109 --> 02:10:39,659
having them work seamlessly with all the

1974
02:10:37,470 --> 02:10:43,530
instructions is kind of what you need

1975
02:10:39,659 --> 02:10:45,090
but I don't know so made me really

1976
02:10:43,529 --> 02:10:48,000
nervous to see that rise and didn't pick

1977
02:10:45,090 --> 02:10:52,199
up avx-512 maybe there's a good reason

1978
02:10:48,000 --> 02:10:55,409
for that maybe there isn't being not

1979
02:10:52,199 --> 02:10:58,079
knowledgeable about CPU design I I can't

1980
02:10:55,409 --> 02:11:00,210
you know I can't even rant about it in

1981
02:10:58,079 --> 02:11:01,199
any constructive way all I can say is

1982
02:11:00,210 --> 02:11:05,369
that from a perspective of the

1983
02:11:01,199 --> 02:11:07,500
programmer not having the AVX

1984
02:11:05,369 --> 02:11:08,849
five twelve instruction set is really a

1985
02:11:07,500 --> 02:11:12,239
bad thing

1986
02:11:08,850 --> 02:11:13,410
now maybe that's not actually what's

1987
02:11:12,239 --> 02:11:15,630
going on maybe

1988
02:11:13,409 --> 02:11:17,340
Rison actually will be able to support

1989
02:11:15,630 --> 02:11:18,630
it a backslide fell pretty easily and

1990
02:11:17,340 --> 02:11:20,340
they just didn't want the first

1991
02:11:18,630 --> 02:11:23,670
generation of the core to have to

1992
02:11:20,340 --> 02:11:26,220
support that register with and that's a

1993
02:11:23,670 --> 02:11:28,079
little bit of a problem for avx-512 in

1994
02:11:26,220 --> 02:11:30,659
fact you have to get all the way out to

1995
02:11:28,079 --> 02:11:32,640
64 byte register with before you can

1996
02:11:30,659 --> 02:11:34,139
actually just use the part you actually

1997
02:11:32,640 --> 02:11:35,670
care about the most which is the

1998
02:11:34,140 --> 02:11:37,530
instructions that's being better what

1999
02:11:35,670 --> 02:11:39,869
you'd rather have had if the instruction

2000
02:11:37,529 --> 02:11:43,769
set for maybe X 512 introduced just to

2001
02:11:39,869 --> 02:11:49,079
four element vectors in some weird light

2002
02:11:43,770 --> 02:11:51,240
way right you know 6 64 byte registers

2003
02:11:49,079 --> 02:11:53,130
aren't the most important thing right

2004
02:11:51,239 --> 02:11:54,689
that's just wider registers what we

2005
02:11:53,130 --> 02:12:00,659
really want is the instruction of that

2006
02:11:54,689 --> 02:12:08,579
to be good so that's basically what I

2007
02:12:00,659 --> 02:12:10,800
what I would say I so I don't know why

2008
02:12:08,579 --> 02:12:17,460
they don't have stuff like the mast

2009
02:12:10,800 --> 02:12:19,050
registers and whatever I feel like

2010
02:12:17,460 --> 02:12:21,359
someone at AMD could probably talk

2011
02:12:19,050 --> 02:12:23,279
constructively at that about that point

2012
02:12:21,359 --> 02:12:24,839
I would love to hear what they had to

2013
02:12:23,279 --> 02:12:26,759
say about that they may have some really

2014
02:12:24,840 --> 02:12:28,409
good reasons why they didn't throw I

2015
02:12:26,760 --> 02:12:30,930
know there's patent problems involved

2016
02:12:28,409 --> 02:12:32,849
too for I have no idea

2017
02:12:30,930 --> 02:12:35,550
you know hardware stuff is nuts that way

2018
02:12:32,850 --> 02:12:38,220
they always have all these legal snafus

2019
02:12:35,550 --> 02:12:42,180
they have to work around so I don't know

2020
02:12:38,220 --> 02:12:46,079
I couldn't tell you you now know

2021
02:12:42,180 --> 02:12:47,400
everything I know so alright that's

2022
02:12:46,079 --> 02:12:49,529
about it for handmade here so I'm going

2023
02:12:47,399 --> 02:12:53,039
to wrap it up thanks everyone for

2024
02:12:49,529 --> 02:12:54,269
joining me for another episode of hand

2025
02:12:53,039 --> 02:12:56,220
made here it's been a pleasure coding

2026
02:12:54,270 --> 02:12:57,660
with you as always if you would like to

2027
02:12:56,220 --> 02:12:58,710
follow along with the series at home you

2028
02:12:57,659 --> 02:13:00,090
can always pre-order the game on

2029
02:12:58,710 --> 02:13:01,949
handmade hero Oregon it comes with a

2030
02:13:00,090 --> 02:13:04,110
source code so that you can play around

2031
02:13:01,949 --> 02:13:04,949
fit and experiment we also a forum site

2032
02:13:04,109 --> 02:13:07,679
you can go to if you want to ask

2033
02:13:04,949 --> 02:13:09,269
questions a patreon page where you can

2034
02:13:07,680 --> 02:13:11,670
go through my sports video series a

2035
02:13:09,270 --> 02:13:14,460
schedule bot where we tweet the schedule

2036
02:13:11,670 --> 02:13:16,949
at you and an episode guide which has

2037
02:13:14,460 --> 02:13:17,689
our past episodes if you're trying to

2038
02:13:16,949 --> 02:13:19,869
catch up

2039
02:13:17,689 --> 02:13:22,309
on old apart series that you missed

2040
02:13:19,869 --> 02:13:23,809
that's it for this week I'll be back

2041
02:13:22,310 --> 02:13:26,300
next week with more handmade hero

2042
02:13:23,810 --> 02:13:28,190
whoopsy everyone back to that until then

2043
02:13:26,300 --> 02:13:28,579
have fun programming enough to be on the

2044
02:13:28,189 --> 02:13:31,449
Internet

2045
02:13:28,579 --> 02:13:31,449
stick amuse everybody

