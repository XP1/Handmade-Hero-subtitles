1
00:00:00,709 --> 00:00:04,859
hello everybody and welcome to handmade

2
00:00:03,359 --> 00:00:08,459
Hero the show where we code a complete

3
00:00:04,859 --> 00:00:13,320
game live on stream we today have to

4
00:00:08,460 --> 00:00:17,070
start the process of actually using

5
00:00:13,320 --> 00:00:19,289
light probes in our game we are

6
00:00:17,070 --> 00:00:20,039
switching to them because we wanted two

7
00:00:19,289 --> 00:00:22,350
things

8
00:00:20,039 --> 00:00:26,340
out of it one I wanted a more convenient

9
00:00:22,350 --> 00:00:28,019
way to sample sort of ancillary entities

10
00:00:26,339 --> 00:00:29,969
so I wanted to be able to light

11
00:00:28,018 --> 00:00:31,229
everything in the game kind of easily

12
00:00:29,969 --> 00:00:35,759
and have everything go through a

13
00:00:31,230 --> 00:00:38,489
lighting pass more easily hopefully and

14
00:00:35,759 --> 00:00:39,780
so we want to take a look at that but

15
00:00:38,488 --> 00:00:43,259
the other thing that we want to be able

16
00:00:39,780 --> 00:00:45,359
to do as well is we wanted to be able to

17
00:00:43,259 --> 00:00:47,659
reduce the number of light samples that

18
00:00:45,359 --> 00:00:49,950
we take and because we had previously

19
00:00:47,659 --> 00:00:51,089
locked the number of light samples to be

20
00:00:49,950 --> 00:00:55,079
roughly the same as the amount of

21
00:00:51,090 --> 00:00:57,780
reflectors that pretty dramatically

22
00:00:55,079 --> 00:00:59,820
affected our ability to place samples

23
00:00:57,780 --> 00:01:03,840
only where we actually needed them or

24
00:00:59,820 --> 00:01:06,299
wanted them so what we're gonna do today

25
00:01:03,840 --> 00:01:10,380
is we already did a bunch of the work

26
00:01:06,299 --> 00:01:12,990
for this like yesterday but what we want

27
00:01:10,379 --> 00:01:17,908
to do today is to start the process of

28
00:01:12,989 --> 00:01:21,359
actually feeding like the lighting

29
00:01:17,909 --> 00:01:23,460
system with light probe information so

30
00:01:21,359 --> 00:01:27,719
we can start debugging and tweaking that

31
00:01:23,459 --> 00:01:29,609
process now our goal for today and

32
00:01:27,719 --> 00:01:30,658
probably next weekend it's gonna take it

33
00:01:29,609 --> 00:01:33,659
like I said it's gonna take a while

34
00:01:30,659 --> 00:01:37,380
because lighting is hard mm-hmm there's

35
00:01:33,659 --> 00:01:40,618
a lot of stuff you got to do our goal

36
00:01:37,379 --> 00:01:44,578
for today and probably also next

37
00:01:40,618 --> 00:01:46,890
Saturday or something is we want to get

38
00:01:44,578 --> 00:01:50,129
to the point where our light probes are

39
00:01:46,890 --> 00:01:52,560
working but nothing else so we're not

40
00:01:50,129 --> 00:01:54,060
going to try to change how the world of

41
00:01:52,560 --> 00:01:56,519
getting lit right now we're just leave

42
00:01:54,060 --> 00:01:59,579
that exactly as it is and what we're

43
00:01:56,519 --> 00:02:02,459
gonna try to do them is we're going to

44
00:01:59,578 --> 00:02:05,279
try to get our light probes working so

45
00:02:02,459 --> 00:02:08,699
that we can draw all of our light probes

46
00:02:05,280 --> 00:02:11,699
and see that their light the amount of

47
00:02:08,699 --> 00:02:13,049
light they claim is coming from each

48
00:02:11,699 --> 00:02:18,659
direction

49
00:02:13,050 --> 00:02:22,140
looks you know roughly reasonable to

50
00:02:18,659 --> 00:02:24,719
sort of a cursory inspection that's the

51
00:02:22,139 --> 00:02:27,479
first step in getting our light probes

52
00:02:24,719 --> 00:02:30,780
working and for obvious reasons I want

53
00:02:27,479 --> 00:02:32,549
to go there first rather than try to get

54
00:02:30,780 --> 00:02:34,020
everything working all at once because

55
00:02:32,550 --> 00:02:36,000
what I'm trying to do and you've seen me

56
00:02:34,020 --> 00:02:37,439
do this many times on handmade hero is

57
00:02:36,000 --> 00:02:40,409
anytime you're working with a very

58
00:02:37,439 --> 00:02:43,740
complex system especially one that it's

59
00:02:40,409 --> 00:02:46,829
very hard to test right this is a very

60
00:02:43,740 --> 00:02:49,200
visual approximate kind of a part of the

61
00:02:46,830 --> 00:02:50,520
code right especially when you're

62
00:02:49,199 --> 00:02:53,939
working saying that's pretty hard to

63
00:02:50,520 --> 00:02:56,070
test and and pretty hard to know really

64
00:02:53,939 --> 00:02:58,740
you know what you would put through it

65
00:02:56,069 --> 00:03:02,129
to say yes it's working no it's not you

66
00:02:58,740 --> 00:03:05,939
want to try and find verifiable way

67
00:03:02,129 --> 00:03:10,590
points in that process so that you can

68
00:03:05,939 --> 00:03:13,199
do a small chunk debug just that part be

69
00:03:10,590 --> 00:03:15,810
reasonably sure that it's okay and then

70
00:03:13,199 --> 00:03:18,269
move on to the next part that way you're

71
00:03:15,810 --> 00:03:20,610
not just blindly looking through in a

72
00:03:18,270 --> 00:03:24,300
giant pipeline for where the bug might

73
00:03:20,610 --> 00:03:26,670
be and so rather than try to debug

74
00:03:24,300 --> 00:03:28,200
things by doing the whole thing and then

75
00:03:26,669 --> 00:03:29,609
looking at why the lighting is wrong and

76
00:03:28,199 --> 00:03:30,780
having to just go I don't know is it

77
00:03:29,610 --> 00:03:32,820
because the probes are wrong is it

78
00:03:30,780 --> 00:03:35,879
because the shaders wrong is it because

79
00:03:32,819 --> 00:03:38,340
bla bla bla bla bla what I want to do

80
00:03:35,879 --> 00:03:41,579
instead is just go alright let's try to

81
00:03:38,340 --> 00:03:43,229
get to a waypoint first which is can we

82
00:03:41,580 --> 00:03:44,940
see light probes drawn in the

83
00:03:43,229 --> 00:03:46,949
environment do they look like they're

84
00:03:44,939 --> 00:03:49,139
drawn roughly correct so if I move a

85
00:03:46,949 --> 00:03:51,149
light around do the probes near the

86
00:03:49,139 --> 00:03:53,549
light seemed to be getting brighter and

87
00:03:51,150 --> 00:03:55,980
furthermore is like the up Direction

88
00:03:53,550 --> 00:03:58,080
brighter than the down direction if I if

89
00:03:55,979 --> 00:03:59,340
the probe is high and if the I mean if

90
00:03:58,080 --> 00:04:01,260
the light is high and if the light is

91
00:03:59,340 --> 00:04:06,390
low is the down Direction brighter than

92
00:04:01,259 --> 00:04:09,359
the top right and so um that will give

93
00:04:06,389 --> 00:04:11,429
us a way of sort of verifying that our

94
00:04:09,360 --> 00:04:14,670
lighting solution is pursuit producing

95
00:04:11,430 --> 00:04:16,918
usable results in the propagation stage

96
00:04:14,669 --> 00:04:18,810
before trying to move to the stage where

97
00:04:16,918 --> 00:04:22,099
we're actually lighting the things in

98
00:04:18,810 --> 00:04:24,780
the game and that way we can be more

99
00:04:22,100 --> 00:04:26,550
effective right we can we could have

100
00:04:24,779 --> 00:04:34,649
more effective

101
00:04:26,550 --> 00:04:36,418
bugging so that's all we're doing but

102
00:04:34,649 --> 00:04:40,318
like I said lighting is complicated so

103
00:04:36,418 --> 00:04:43,560
it takes a while even if everything goes

104
00:04:40,319 --> 00:04:44,908
well there's just a lot of code and and

105
00:04:43,560 --> 00:04:48,478
so that's just how it works

106
00:04:44,908 --> 00:04:50,219
I maybe someday in video we'll just

107
00:04:48,478 --> 00:04:52,109
solve this problem for us if they get

108
00:04:50,220 --> 00:04:55,139
ray tracing good enough you just make a

109
00:04:52,110 --> 00:04:57,840
call called GPU turn ray tracing on and

110
00:04:55,139 --> 00:05:00,329
you'd have all your lighting done I mean

111
00:04:57,839 --> 00:05:02,068
I realize it sounds ridiculous given how

112
00:05:00,329 --> 00:05:03,300
much work lighting is but if you think

113
00:05:02,069 --> 00:05:05,879
about it that's how much work

114
00:05:03,300 --> 00:05:07,889
rasterization used to be and nowadays

115
00:05:05,879 --> 00:05:11,009
that is literally what you do you make a

116
00:05:07,889 --> 00:05:14,069
call that's like hey here's a million

117
00:05:11,009 --> 00:05:16,080
triangles draw them and it just does

118
00:05:14,069 --> 00:05:19,169
right you don't do anything else that

119
00:05:16,079 --> 00:05:23,698
would have been a ludicrous idea in you

120
00:05:19,168 --> 00:05:25,709
know 1991 when you know the people that

121
00:05:23,699 --> 00:05:28,710
looked when Chris green was writing a

122
00:05:25,709 --> 00:05:32,250
texture mapper for Ultima Underworld or

123
00:05:28,709 --> 00:05:33,959
something right if you told him like oh

124
00:05:32,250 --> 00:05:35,699
yeah like well she was earlier than that

125
00:05:33,959 --> 00:05:41,848
it's like 1990 probably right if you're

126
00:05:35,699 --> 00:05:44,788
like oh yeah the you know in in six

127
00:05:41,848 --> 00:05:46,800
years you'll just it'll just be like you

128
00:05:44,788 --> 00:05:48,598
make a call and the PC does all of that

129
00:05:46,800 --> 00:05:51,020
stuff for you it'll be just like it

130
00:05:48,598 --> 00:05:54,930
looks like an SGI workstation right

131
00:05:51,019 --> 00:05:57,959
anyway so you never know right you never

132
00:05:54,930 --> 00:05:59,340
know eventually we may not have to deal

133
00:05:57,959 --> 00:06:02,158
with this stuff and that would be great

134
00:05:59,339 --> 00:06:04,278
because hey that's just more time you

135
00:06:02,158 --> 00:06:06,658
can spend on doing something else

136
00:06:04,278 --> 00:06:08,610
because it's not like we don't know what

137
00:06:06,658 --> 00:06:10,680
we want to have happen with the lighting

138
00:06:08,610 --> 00:06:12,360
we do it's just we have to make all

139
00:06:10,680 --> 00:06:14,699
these approximations because it's too

140
00:06:12,360 --> 00:06:18,778
expensive to try and compute real

141
00:06:14,699 --> 00:06:20,430
ray-traced results every frame let's go

142
00:06:18,778 --> 00:06:23,728
ahead and open up our lighting system

143
00:06:20,430 --> 00:06:25,769
and see how we might proceed like I said

144
00:06:23,728 --> 00:06:28,258
yesterday the biggest thing that we need

145
00:06:25,769 --> 00:06:29,758
to move towards now is if you look at

146
00:06:28,259 --> 00:06:32,610
how our lighting is working we have

147
00:06:29,759 --> 00:06:35,278
these light probes here that we need to

148
00:06:32,610 --> 00:06:38,729
operate on and we don't actually send

149
00:06:35,278 --> 00:06:40,110
any down right so that's really the

150
00:06:38,728 --> 00:06:43,050
entirety

151
00:06:40,110 --> 00:06:44,790
of the issue for us is we're not we're

152
00:06:43,050 --> 00:06:46,590
not getting any light probes so before

153
00:06:44,790 --> 00:06:49,200
we can even start we wrote a bunch of

154
00:06:46,589 --> 00:06:50,969
code yesterday before we can even start

155
00:06:49,199 --> 00:06:52,979
testing that code and seeing if that

156
00:06:50,970 --> 00:06:57,180
code works or drawing the results of

157
00:06:52,980 --> 00:06:59,790
that code or doing anything right we

158
00:06:57,180 --> 00:07:02,100
have to get light probes in here so it'd

159
00:06:59,790 --> 00:07:05,490
be pointless for me to go take that code

160
00:07:02,100 --> 00:07:06,689
we did and try to like start moving

161
00:07:05,490 --> 00:07:08,370
light around through it or something

162
00:07:06,689 --> 00:07:09,810
right because it just it doesn't make

163
00:07:08,370 --> 00:07:11,730
any sense we don't have any light probes

164
00:07:09,810 --> 00:07:13,740
to start with so the first thing we need

165
00:07:11,730 --> 00:07:16,620
to do is get the actual light probes in

166
00:07:13,740 --> 00:07:18,930
here this is a plumbing problem and so

167
00:07:16,620 --> 00:07:20,970
we're gonna go ahead and and try to

168
00:07:18,930 --> 00:07:23,579
address that now if I remember correctly

169
00:07:20,970 --> 00:07:24,870
we left ourselves I think I don't

170
00:07:23,579 --> 00:07:26,490
actually know if this is true by the way

171
00:07:24,870 --> 00:07:30,720
I need to update my remedy don't I oh

172
00:07:26,490 --> 00:07:39,120
yeah we're way behind hmm can I do that

173
00:07:30,720 --> 00:07:44,550
here I may not be logged in I'm not

174
00:07:39,120 --> 00:07:48,480
logged in well sorry about that we'll

175
00:07:44,550 --> 00:07:51,810
get a new remedy soon because there's a

176
00:07:48,480 --> 00:07:53,280
much updated version although maybe I

177
00:07:51,810 --> 00:07:54,750
think George said he finished data break

178
00:07:53,279 --> 00:07:55,739
points recently so maybe that version

179
00:07:54,750 --> 00:07:56,939
will be out soon it will update to that

180
00:07:55,740 --> 00:07:58,740
I don't think there's anything in

181
00:07:56,939 --> 00:08:00,779
particular I need right now so I'm okay

182
00:07:58,740 --> 00:08:02,400
using the existing version of remedy

183
00:08:00,779 --> 00:08:04,139
here but point being we're a little

184
00:08:02,399 --> 00:08:05,549
behind here sorry I'm so sorry about

185
00:08:04,139 --> 00:08:08,069
that George I gotta pick this machine I

186
00:08:05,550 --> 00:08:09,360
I update my dead machine at work all the

187
00:08:08,069 --> 00:08:11,339
time but I sometimes forget to update

188
00:08:09,360 --> 00:08:15,240
the Hameed hero machine all right so

189
00:08:11,339 --> 00:08:17,789
here's the win32 handmade our-our ubg

190
00:08:15,240 --> 00:08:19,740
i'm gonna load that up here and if we

191
00:08:17,790 --> 00:08:21,870
run it I think we just turned lighting

192
00:08:19,740 --> 00:08:23,220
off right and yeah it looks that way so

193
00:08:21,870 --> 00:08:26,639
you can kind of see here like lighting

194
00:08:23,220 --> 00:08:28,950
is off entirely right now I also don't

195
00:08:26,639 --> 00:08:31,409
know is this a debug build or a regular

196
00:08:28,949 --> 00:08:34,019
builds I'm not sure about that part

197
00:08:31,410 --> 00:08:35,430
either it looks like it's an optimized

198
00:08:34,019 --> 00:08:37,350
build I'm gonna go ahead and turn it

199
00:08:35,429 --> 00:08:41,699
into a debug build and then what I also

200
00:08:37,350 --> 00:08:44,850
might do is I might I might go ahead and

201
00:08:41,700 --> 00:08:48,000
and turn off whatever slow about the

202
00:08:44,850 --> 00:08:51,750
lighting for the moment as well so that

203
00:08:48,000 --> 00:08:53,759
up there so I believe if we take a look

204
00:08:51,750 --> 00:08:55,950
at what's actually happening

205
00:08:53,759 --> 00:08:57,659
in the game here if I take a look at the

206
00:08:55,950 --> 00:09:00,629
profile you can see the compute light

207
00:08:57,659 --> 00:09:02,730
propagation is still getting called even

208
00:09:00,629 --> 00:09:04,110
though I'm not actually doing I'm not

209
00:09:02,730 --> 00:09:06,269
actually applying the lighting because I

210
00:09:04,110 --> 00:09:08,610
turned it off in the shader so what I'd

211
00:09:06,269 --> 00:09:10,559
like to do now is I'd like to go into

212
00:09:08,610 --> 00:09:12,300
the lighting because we don't need it

213
00:09:10,559 --> 00:09:15,149
anymore at the immediate moment right

214
00:09:12,299 --> 00:09:18,089
and compute light propagation here I'm

215
00:09:15,149 --> 00:09:19,889
just gonna get rid of that so this this

216
00:09:18,090 --> 00:09:24,120
function is just gonna go away for the

217
00:09:19,889 --> 00:09:27,179
moment and we're only gonna actually put

218
00:09:24,120 --> 00:09:30,000
it back in here until I we're only gonna

219
00:09:27,179 --> 00:09:31,199
add it back in once I've done some work

220
00:09:30,000 --> 00:09:34,950
with the light probes and we actually

221
00:09:31,200 --> 00:09:38,160
want to run it and so now if we run our

222
00:09:34,950 --> 00:09:48,000
system here we should see some speed

223
00:09:38,159 --> 00:09:49,980
increase there although okay when I said

224
00:09:48,000 --> 00:09:51,480
we should see in blah blah blah what I

225
00:09:49,980 --> 00:09:53,490
meant was if you actually compile

226
00:09:51,480 --> 00:09:58,590
properly that's what's supposed to

227
00:09:53,490 --> 00:10:00,539
happen there there we go so compute

228
00:09:58,590 --> 00:10:02,190
light propagation also it's remember

229
00:10:00,539 --> 00:10:03,750
it's threaded we do our light

230
00:10:02,190 --> 00:10:06,090
propagation on multiple threads because

231
00:10:03,750 --> 00:10:08,570
it's an expensive thing alright so let's

232
00:10:06,090 --> 00:10:12,930
try that one more time

233
00:10:08,570 --> 00:10:14,670
all right so here's our actual speed of

234
00:10:12,929 --> 00:10:18,449
the game in debug mode which is good

235
00:10:14,669 --> 00:10:21,509
much better than it was and now also as

236
00:10:18,450 --> 00:10:23,190
I relieve I mentioned this kind of if

237
00:10:21,509 --> 00:10:24,990
you watched the whole series you saw me

238
00:10:23,190 --> 00:10:28,020
say this two weeks ago or something when

239
00:10:24,990 --> 00:10:31,769
we did ground cover you can see how

240
00:10:28,019 --> 00:10:34,169
expensive this stuff is getting so

241
00:10:31,769 --> 00:10:37,679
render ground cover it's very expensive

242
00:10:34,169 --> 00:10:39,539
in debug mode if I actually change to

243
00:10:37,679 --> 00:10:42,120
release mode obviously it gets a lot

244
00:10:39,539 --> 00:10:44,370
faster because it's just math ops that

245
00:10:42,120 --> 00:10:48,330
get optimized there so you know if we're

246
00:10:44,370 --> 00:10:49,799
actually compiling in full release you

247
00:10:48,330 --> 00:10:53,009
will see that that gets dramatically

248
00:10:49,799 --> 00:10:54,929
faster why I didn't just recompile it I

249
00:10:53,009 --> 00:10:58,169
don't know I always forget that we can

250
00:10:54,929 --> 00:11:00,209
just recompile handmade hero and have it

251
00:10:58,169 --> 00:11:03,509
replace the thing but obviously it gets

252
00:11:00,210 --> 00:11:06,870
a lot faster if I compile it in release

253
00:11:03,509 --> 00:11:08,939
mode but even so you can see that

254
00:11:06,870 --> 00:11:12,450
render ground cover is pretty

255
00:11:08,940 --> 00:11:14,760
significant there right it's more

256
00:11:12,450 --> 00:11:16,890
expensive even than than gathering up

257
00:11:14,759 --> 00:11:20,220
all of the debug information that we

258
00:11:16,889 --> 00:11:22,259
spew into the log for processing which

259
00:11:20,220 --> 00:11:25,139
used to be our biggest amount of time

260
00:11:22,259 --> 00:11:26,700
spent so this right here this render

261
00:11:25,139 --> 00:11:30,509
ground cover as you can see is like

262
00:11:26,700 --> 00:11:32,610
really really expensive and that's to be

263
00:11:30,509 --> 00:11:35,189
expected but also something we could

264
00:11:32,610 --> 00:11:38,810
dramatically improve so if you go to

265
00:11:35,190 --> 00:11:42,510
like the entity side of things here and

266
00:11:38,809 --> 00:11:48,359
we look at how the render ground cover

267
00:11:42,509 --> 00:11:50,100
section here it is you look at how

268
00:11:48,360 --> 00:11:54,180
expensive the rendered ground cover

269
00:11:50,100 --> 00:11:58,220
section is you can see why it's so slow

270
00:11:54,179 --> 00:12:00,209
there's especially this part here right

271
00:11:58,220 --> 00:12:04,110
where we're getting these texture

272
00:12:00,210 --> 00:12:15,870
handles back it's just really you know

273
00:12:04,110 --> 00:12:18,180
well here show you get assets so well

274
00:12:15,870 --> 00:12:25,649
actually this was that part's not that

275
00:12:18,179 --> 00:12:27,809
bad cuz as long as it's valid I guess

276
00:12:25,649 --> 00:12:30,269
it's probably okay this is a bit fussy

277
00:12:27,809 --> 00:12:32,519
so that's not great but then if you look

278
00:12:30,269 --> 00:12:35,309
here right the amount of computations

279
00:12:32,519 --> 00:12:38,009
necessary for this stuff are kind of

280
00:12:35,309 --> 00:12:40,339
ridiculous right you can see we've got

281
00:12:38,009 --> 00:12:43,529
to go through all this nonsense here

282
00:12:40,340 --> 00:12:46,160
there's this ridiculous garbage here

283
00:12:43,529 --> 00:12:50,699
right all of this stuff has to happen

284
00:12:46,159 --> 00:12:53,250
and then we've got this stuff here again

285
00:12:50,700 --> 00:12:58,740
just really ridiculous just just way too

286
00:12:53,250 --> 00:13:03,860
much code right and so all of this stuff

287
00:12:58,740 --> 00:13:03,860
here could have really have been cached

288
00:13:05,710 --> 00:13:11,480
you know I'm saying like the only thing

289
00:13:10,129 --> 00:13:14,960
that we might not have been able to

290
00:13:11,480 --> 00:13:17,450
cache is the bitmap part of things the

291
00:13:14,960 --> 00:13:19,310
texture handle part because we're not

292
00:13:17,450 --> 00:13:21,970
you know we have to maybe make some

293
00:13:19,309 --> 00:13:24,649
extra affordances in our renderer for

294
00:13:21,970 --> 00:13:26,570
being able to say that I want you to not

295
00:13:24,649 --> 00:13:28,279
evict certain bitmaps because they're

296
00:13:26,570 --> 00:13:29,660
used in high volume scenarios or

297
00:13:28,279 --> 00:13:31,490
something like that that you know

298
00:13:29,659 --> 00:13:33,409
shouldn't get thrown out away until I

299
00:13:31,490 --> 00:13:34,779
can tell you definitively that I'm done

300
00:13:33,409 --> 00:13:37,730
with them

301
00:13:34,779 --> 00:13:40,629
so there's definitely like you know a

302
00:13:37,730 --> 00:13:43,600
bit of this that that maybe can't be

303
00:13:40,629 --> 00:13:46,939
optimised away as much as it should be

304
00:13:43,600 --> 00:13:50,570
but everything in here like this entire

305
00:13:46,940 --> 00:13:52,520
set section in here all of that could be

306
00:13:50,570 --> 00:13:54,830
cached and would only have to update

307
00:13:52,519 --> 00:13:58,009
when the texture handle updated right

308
00:13:54,830 --> 00:14:00,139
and not only could it be cached in terms

309
00:13:58,009 --> 00:14:02,299
of not having to have the CPU compute it

310
00:14:00,139 --> 00:14:05,419
but it could actually be cached on the

311
00:14:02,299 --> 00:14:10,309
graphics card right so all of the data

312
00:14:05,419 --> 00:14:13,879
that you would need for drawing the

313
00:14:10,309 --> 00:14:15,679
entire thing all of that could just live

314
00:14:13,879 --> 00:14:17,659
on the graphics card and we wouldn't

315
00:14:15,679 --> 00:14:21,139
have to do any of this and we wouldn't

316
00:14:17,659 --> 00:14:23,779
have to send it down right so it's just

317
00:14:21,139 --> 00:14:26,809
worth recognizing that there's a ton of

318
00:14:23,779 --> 00:14:28,339
work we could do there as well that

319
00:14:26,809 --> 00:14:32,029
we're just not doing right now

320
00:14:28,340 --> 00:14:34,129
and so that's again we're in a good

321
00:14:32,029 --> 00:14:36,799
position the part of our game that is

322
00:14:34,129 --> 00:14:40,370
slow in debug mode actually doesn't need

323
00:14:36,799 --> 00:14:42,379
to be slow anyway we can improve it

324
00:14:40,370 --> 00:14:45,740
pretty dramatically and that's pretty

325
00:14:42,379 --> 00:14:47,809
great alright but let's continue on with

326
00:14:45,740 --> 00:14:49,370
the lighting because like I said if we

327
00:14:47,809 --> 00:14:50,929
want to be fast we can just compile in

328
00:14:49,370 --> 00:14:51,830
release mode right now and we're very

329
00:14:50,929 --> 00:14:53,209
fast anyway

330
00:14:51,830 --> 00:14:54,980
you know we're hitting 60 frames a

331
00:14:53,210 --> 00:14:57,800
second and not really any issues I don't

332
00:14:54,980 --> 00:14:59,240
think although well there are some the

333
00:14:57,799 --> 00:15:00,500
renderer does need to be optimized a

334
00:14:59,240 --> 00:15:02,930
little bit you can see we're not quite

335
00:15:00,500 --> 00:15:05,299
hitting it reliably we should be way

336
00:15:02,929 --> 00:15:09,349
under that I think probably most the

337
00:15:05,299 --> 00:15:11,479
time although I guess with vsync on is

338
00:15:09,350 --> 00:15:14,560
vsync on or off right now and actually

339
00:15:11,480 --> 00:15:14,560
no-fee sinks on or off

340
00:15:15,799 --> 00:15:29,309
we don't have a thing for that doing

341
00:15:17,970 --> 00:15:37,350
let's take a look so when we want to do

342
00:15:29,309 --> 00:15:42,019
our request vsync here by default it

343
00:15:37,350 --> 00:15:42,019
looks like it's it's requesting it

344
00:15:50,360 --> 00:16:00,240
now why aren't we

345
00:15:54,440 --> 00:16:05,550
why isn't that actually something that

346
00:16:00,240 --> 00:16:06,330
we provide for switching because you can

347
00:16:05,549 --> 00:16:09,389
can't you

348
00:16:06,330 --> 00:16:19,379
I don't know maybe you can let's see

349
00:16:09,389 --> 00:16:22,879
here not actually sure so if I wanted to

350
00:16:19,379 --> 00:16:22,879
can I turn vsync on and off

351
00:16:33,730 --> 00:16:37,060
one more time

352
00:16:38,409 --> 00:16:43,529
there yeah all right so

353
00:16:53,909 --> 00:17:04,240
so it's a little bit hard to say I'll be

354
00:17:02,769 --> 00:17:06,579
honest I'm not sure I understand exactly

355
00:17:04,240 --> 00:17:10,990
I'm seeing there it might be that vsync

356
00:17:06,579 --> 00:17:12,639
request vsync is not actually doesn't

357
00:17:10,990 --> 00:17:15,370
actually update when you change it there

358
00:17:12,640 --> 00:17:17,020
that's what it looks like to me it just

359
00:17:15,369 --> 00:17:18,939
seems really unlikely that that would

360
00:17:17,019 --> 00:17:20,650
actually happen so let's take a look at

361
00:17:18,940 --> 00:17:23,730
that sorry to kind of get off-track here

362
00:17:20,650 --> 00:17:28,420
but I'm just curious I want to know

363
00:17:23,730 --> 00:17:33,970
what's going on with there so in here

364
00:17:28,420 --> 00:17:40,029
we've got change to settings and here is

365
00:17:33,970 --> 00:17:43,690
our platform OpenGL set vsync thing so

366
00:17:40,029 --> 00:17:47,529
if we look at OpenGL set vsync it looks

367
00:17:43,690 --> 00:17:51,630
like that should be calling the correct

368
00:17:47,529 --> 00:17:55,240
thing but maybe it doesn't I don't know

369
00:17:51,630 --> 00:17:58,540
let's take a look so if I do platform

370
00:17:55,240 --> 00:18:04,710
OpenGL if I basically set a breakpoint

371
00:17:58,539 --> 00:18:04,710
at this function what happens

372
00:18:10,710 --> 00:18:14,039
looks like it's not getting called for

373
00:18:12,630 --> 00:18:17,070
some reason although that may just be

374
00:18:14,039 --> 00:18:20,490
that the breakpoint isn't triggering

375
00:18:17,069 --> 00:18:22,049
because of some kind of thing Burke got

376
00:18:20,490 --> 00:18:23,970
optimized out let me just see what

377
00:18:22,049 --> 00:18:27,200
happens in a full debug build do we so

378
00:18:23,970 --> 00:18:27,200
do we not call it there either

379
00:18:34,359 --> 00:18:40,058
okay I do think so I don't know that

380
00:18:37,599 --> 00:18:41,678
that does seem like maybe they're it's

381
00:18:40,058 --> 00:18:43,379
weird that that didn't have a breakpoint

382
00:18:41,679 --> 00:18:45,610
set properly I wonder if we should

383
00:18:43,380 --> 00:18:46,809
mention that to George because it

384
00:18:45,609 --> 00:18:50,879
probably still should have set a

385
00:18:46,808 --> 00:18:52,859
breakpoint somewhere but yeah anyway

386
00:18:50,880 --> 00:18:55,240
let's see what happens here

387
00:18:52,859 --> 00:18:57,759
so we're actually making the call

388
00:18:55,240 --> 00:19:00,460
properly vsync enabled should be true

389
00:18:57,759 --> 00:19:05,548
right now so it's going to call a wiggle

390
00:19:00,460 --> 00:19:08,860
swap interval X with one there so that

391
00:19:05,548 --> 00:19:11,980
that's what that did and now we just

392
00:19:08,859 --> 00:19:14,918
have to kind of see okay if I jump into

393
00:19:11,980 --> 00:19:18,339
the render settings and I ask it to

394
00:19:14,919 --> 00:19:21,730
change vsync do I actually get in here

395
00:19:18,339 --> 00:19:27,398
so if you think enabled there is zero so

396
00:19:21,730 --> 00:19:30,819
it should pass zero so it sure looks

397
00:19:27,398 --> 00:19:35,678
like we're setting it properly I mean it

398
00:19:30,819 --> 00:19:39,668
could be that you know it's certainly

399
00:19:35,679 --> 00:19:42,519
possible that we are asking for vsync

400
00:19:39,669 --> 00:19:44,559
and getting it and then asking for

401
00:19:42,519 --> 00:19:47,888
nobody sync and getting it but we just

402
00:19:44,558 --> 00:19:52,869
happen to take roughly a sixtieth of a

403
00:19:47,888 --> 00:19:58,839
second to render but I don't know man

404
00:19:52,869 --> 00:20:02,168
chances seem pretty low that that would

405
00:19:58,839 --> 00:20:04,808
be the case so we know that we're doing

406
00:20:02,169 --> 00:20:10,360
the right thing here's our frame time

407
00:20:04,808 --> 00:20:13,109
it's you know 118 roughly kind of has a

408
00:20:10,359 --> 00:20:13,109
hiccup in there

409
00:20:14,730 --> 00:20:28,069
based on the frames lay so that's

410
00:20:18,358 --> 00:20:28,069
happening and then if I turn it to true

411
00:20:30,349 --> 00:20:37,918
that that seems like I don't know that

412
00:20:36,148 --> 00:20:46,949
that just seems like we're getting vsync

413
00:20:37,919 --> 00:20:49,590
no matter what we do to me so I guess I

414
00:20:46,950 --> 00:20:52,399
don't know why we're seeing that

415
00:20:49,589 --> 00:20:55,499
particular behavior that's a bit strange

416
00:20:52,398 --> 00:20:58,618
it may be that for some reason we're

417
00:20:55,499 --> 00:21:03,569
just not able to call wiggle swap

418
00:20:58,618 --> 00:21:07,009
interval but I'm not sure why let's take

419
00:21:03,569 --> 00:21:07,009
a look at wiggle swap interval

420
00:21:18,829 --> 00:21:24,609
I mean it seems pretty straightforward

421
00:21:32,069 --> 00:21:37,638
I don't know I don't know why that

422
00:21:34,319 --> 00:21:37,638
exactly would be failing

423
00:21:45,250 --> 00:21:48,329
I don't know

424
00:21:48,660 --> 00:21:59,160
so that's a bit of a puzzler because it

425
00:21:55,480 --> 00:22:05,558
looks as if we can't request no vsync

426
00:21:59,160 --> 00:22:07,509
and I'm not really sure why that may

427
00:22:05,558 --> 00:22:12,069
just be luck that that's happening but

428
00:22:07,509 --> 00:22:15,400
I'm not sure so we may want to put to do

429
00:22:12,069 --> 00:22:18,308
in here I don't know if we've got the

430
00:22:15,400 --> 00:22:21,519
issue list and I'm gonna just put a note

431
00:22:18,308 --> 00:22:25,928
that we should figure this out at some

432
00:22:21,519 --> 00:22:27,460
point because something is off there so

433
00:22:25,929 --> 00:22:32,259
I'm going to go ahead and do a new issue

434
00:22:27,460 --> 00:22:38,220
here I'm gonna say are we actually able

435
00:22:32,259 --> 00:22:38,220
to turn off vsync and I'm just gonna say

436
00:22:38,339 --> 00:22:49,119
cursory inspection seems like we aren't

437
00:22:43,269 --> 00:22:54,150
able to turn off vsync we need to look

438
00:22:49,119 --> 00:22:54,149
and see if there's

439
00:23:01,200 --> 00:23:06,450
so I don't know might not be anything we

440
00:23:04,859 --> 00:23:08,279
may look at it later and determine that

441
00:23:06,450 --> 00:23:10,019
it's actually fine but it does look a

442
00:23:08,279 --> 00:23:11,279
little bit wonky so I just want to flag

443
00:23:10,019 --> 00:23:16,170
that as something we should take a look

444
00:23:11,279 --> 00:23:17,940
at all right back to light probes so now

445
00:23:16,170 --> 00:23:19,830
what we've got we know we were drawing

446
00:23:17,940 --> 00:23:21,750
in purple there where all the light

447
00:23:19,829 --> 00:23:24,480
probes where we placed all of our light

448
00:23:21,750 --> 00:23:26,190
probes and so now we have to do is

449
00:23:24,480 --> 00:23:28,650
actually take those light probes and

450
00:23:26,190 --> 00:23:31,170
feed them forward into the renderer so

451
00:23:28,650 --> 00:23:34,110
that on any given frame the renderer

452
00:23:31,170 --> 00:23:36,240
knows what light probes are actually in

453
00:23:34,109 --> 00:23:40,349
the mix and which light probes aren't

454
00:23:36,240 --> 00:23:42,950
right it needs to have some idea of what

455
00:23:40,349 --> 00:23:46,379
the light probes are or aren't and

456
00:23:42,950 --> 00:23:49,890
what's interesting about that is if we

457
00:23:46,380 --> 00:23:55,440
go to the world's cache you know we've

458
00:23:49,890 --> 00:24:01,050
got this notion in here where you can

459
00:23:55,440 --> 00:24:04,049
see when we unpack entities right when

460
00:24:01,049 --> 00:24:06,750
we're doing our our entity unpacking we

461
00:24:04,049 --> 00:24:08,579
have this notion of entities coming into

462
00:24:06,750 --> 00:24:11,490
the working set and he's going out of

463
00:24:08,579 --> 00:24:14,490
the working set and since our light

464
00:24:11,490 --> 00:24:17,180
probes themselves are entities it seems

465
00:24:14,490 --> 00:24:20,279
like what we probably want to do here is

466
00:24:17,180 --> 00:24:25,470
start to think about the lighting

467
00:24:20,279 --> 00:24:28,230
solution as something we just want to

468
00:24:25,470 --> 00:24:31,950
manage as part of the world cash in on

469
00:24:28,230 --> 00:24:35,009
cash so if you take a look at how its

470
00:24:31,950 --> 00:24:40,700
currently working its kind of stupid

471
00:24:35,009 --> 00:24:42,960
right we have this entity structure and

472
00:24:40,700 --> 00:24:45,630
we're you know and we knew it was stupid

473
00:24:42,960 --> 00:24:47,160
the time so not bad on us it's just

474
00:24:45,630 --> 00:24:49,530
we're delaying till we were gonna

475
00:24:47,160 --> 00:24:51,450
actually work on it but you can see we

476
00:24:49,529 --> 00:24:55,950
got this ridiculous lighting nonsense in

477
00:24:51,450 --> 00:24:58,110
here as part of our cached entities but

478
00:24:55,950 --> 00:25:01,529
we don't really need to do that anymore

479
00:24:58,109 --> 00:25:04,799
what we can do instead is every time an

480
00:25:01,529 --> 00:25:07,470
entity gets unpacked that has that's

481
00:25:04,799 --> 00:25:10,859
that's one of our light probes we can

482
00:25:07,470 --> 00:25:14,069
just add a light probe to the probe set

483
00:25:10,859 --> 00:25:14,889
in the lighting system and every time

484
00:25:14,069 --> 00:25:17,679
and

485
00:25:14,890 --> 00:25:20,830
gets repacked that had a light probe we

486
00:25:17,680 --> 00:25:23,200
can just pack that probe back up and by

487
00:25:20,829 --> 00:25:24,669
pack it up I don't actually mean pack it

488
00:25:23,200 --> 00:25:26,769
up I guess I just mean discard it

489
00:25:24,670 --> 00:25:29,019
because we don't need it anymore right

490
00:25:26,769 --> 00:25:35,950
it's it's fallen it's gotten too far

491
00:25:29,019 --> 00:25:40,750
away to be relevant right so I think um

492
00:25:35,950 --> 00:25:43,029
I think we should be okay with that you

493
00:25:40,750 --> 00:25:47,470
know where my little basket is basket

494
00:25:43,029 --> 00:25:52,029
come to me come to me waste basket there

495
00:25:47,470 --> 00:25:53,470
we go all right so I think that's more

496
00:25:52,029 --> 00:25:55,660
what we want to do so I'm going to start

497
00:25:53,470 --> 00:25:57,910
down that road and that'll be how our

498
00:25:55,660 --> 00:26:00,550
light probes like kind of work in terms

499
00:25:57,910 --> 00:26:03,160
of coming into or out of the active set

500
00:26:00,549 --> 00:26:05,169
and then what we can do is we know that

501
00:26:03,160 --> 00:26:07,930
if we render them as entities we see

502
00:26:05,170 --> 00:26:10,750
them we could do a secondary render that

503
00:26:07,930 --> 00:26:12,279
shows us not only where our lighting

504
00:26:10,750 --> 00:26:15,220
probe entities are but where our light

505
00:26:12,279 --> 00:26:17,079
probes are and we can verify that that's

506
00:26:15,220 --> 00:26:18,309
correct so as things move in and out of

507
00:26:17,079 --> 00:26:22,899
the set that we're getting a correct

508
00:26:18,309 --> 00:26:24,789
result there right so in here where we

509
00:26:22,900 --> 00:26:27,850
have lightning point state with lighting

510
00:26:24,789 --> 00:26:29,859
here like this what I want to do is just

511
00:26:27,849 --> 00:26:33,129
start by eliminating this so that's

512
00:26:29,859 --> 00:26:34,929
gonna go away entirely and one of the

513
00:26:33,130 --> 00:26:40,150
things about that going away entirely is

514
00:26:34,930 --> 00:26:43,630
that we'll pull a ton of code out of our

515
00:26:40,150 --> 00:26:46,540
system right it's going to go away so

516
00:26:43,630 --> 00:26:49,990
now when we look at things like push

517
00:26:46,539 --> 00:26:52,659
light right and this sort of thing

518
00:26:49,990 --> 00:26:55,690
the lighting point state light store

519
00:26:52,660 --> 00:26:57,940
stuff all of that is going to get yanked

520
00:26:55,690 --> 00:27:00,490
out and the reason that it's going to

521
00:26:57,940 --> 00:27:03,700
get yanked out is because we no longer

522
00:27:00,490 --> 00:27:06,990
actually need this information to be

523
00:27:03,700 --> 00:27:06,990
present at all right

524
00:27:10,990 --> 00:27:16,970
not sure what the right way to say this

525
00:27:13,190 --> 00:27:20,120
is so the lighting Point State was a

526
00:27:16,970 --> 00:27:23,750
cache of light information in the system

527
00:27:20,119 --> 00:27:26,839
and we don't actually need that there

528
00:27:23,750 --> 00:27:31,278
right we do need to be able to push

529
00:27:26,839 --> 00:27:35,288
lights into the system and we may want

530
00:27:31,278 --> 00:27:39,888
those lights to be special in some way I

531
00:27:35,288 --> 00:27:41,960
don't know but we don't need to have

532
00:27:39,888 --> 00:27:44,329
them have these caches anymore because

533
00:27:41,960 --> 00:27:46,370
the light probes themselves will act as

534
00:27:44,329 --> 00:27:49,308
the caches I guess it's the right way to

535
00:27:46,369 --> 00:27:51,439
say it this is actually really good for

536
00:27:49,308 --> 00:27:53,000
us because it eliminates a bunch of

537
00:27:51,440 --> 00:27:56,450
bookkeeping that had to happen during

538
00:27:53,000 --> 00:27:58,759
render time and that bookkeeping is

539
00:27:56,450 --> 00:28:01,250
expensive so getting rid of it will also

540
00:27:58,759 --> 00:28:06,470
sort of speed things up a little bit if

541
00:28:01,250 --> 00:28:11,509
that makes sense so I'm gonna get rid of

542
00:28:06,470 --> 00:28:15,009
this and this and we're just gonna kind

543
00:28:11,509 --> 00:28:15,009
of slowly work our way through there

544
00:28:15,740 --> 00:28:20,778
and you know this probably is a bit of

545
00:28:18,888 --> 00:28:23,229
it to do here where we're basically to

546
00:28:20,778 --> 00:28:23,230
say look

547
00:28:27,069 --> 00:28:48,220
I don't actually know exactly what we

548
00:28:45,190 --> 00:28:50,500
want to do here it's kind of a little

549
00:28:48,220 --> 00:28:52,990
bit confusing but it's probably

550
00:28:50,500 --> 00:28:56,769
something like we want to just push a

551
00:28:52,990 --> 00:29:01,359
special-purpose light probe in that

552
00:28:56,769 --> 00:29:04,240
emits this light I don't really know it

553
00:29:01,359 --> 00:29:05,529
may be that we to be to be honest now I

554
00:29:04,240 --> 00:29:07,779
think about it we probably don't want

555
00:29:05,529 --> 00:29:10,529
that we probably want to keep a separate

556
00:29:07,779 --> 00:29:10,529
list of lights

557
00:29:12,750 --> 00:29:17,859
they don't really need their data cached

558
00:29:14,980 --> 00:29:19,960
so I think maybe we probably just need a

559
00:29:17,859 --> 00:29:21,059
separate list of lights per frame that's

560
00:29:19,960 --> 00:29:23,559
probably what we want

561
00:29:21,059 --> 00:29:26,169
so anyway I'm gonna get rid of this also

562
00:29:23,559 --> 00:29:28,960
when we push cubes pushing an emission

563
00:29:26,170 --> 00:29:30,340
value onto a cube probably isn't is also

564
00:29:28,960 --> 00:29:34,390
something we don't really want to have

565
00:29:30,339 --> 00:29:36,669
happen anymore so getting rid of that

566
00:29:34,390 --> 00:29:44,670
emissive value I think probably we want

567
00:29:36,670 --> 00:29:44,670
I it's a little hard to say

568
00:29:51,528 --> 00:29:59,308
I'm not really sure exactly how we want

569
00:29:56,579 --> 00:30:02,668
to deal with that part because we do

570
00:29:59,308 --> 00:30:06,868
want to be able to have emissive values

571
00:30:02,669 --> 00:30:08,519
I guess in a sense so I guess I'm gonna

572
00:30:06,868 --> 00:30:11,759
leave that in now to think about it

573
00:30:08,519 --> 00:30:19,769
because maybe that's actually fine

574
00:30:11,759 --> 00:30:21,450
I don't know we're gonna leave that as

575
00:30:19,769 --> 00:30:23,429
an open question but I'm not gonna pull

576
00:30:21,450 --> 00:30:27,600
the emissive values yet I am however

577
00:30:23,429 --> 00:30:31,399
going to also get rid of the lighting

578
00:30:27,599 --> 00:30:34,079
Point State thing so this nonsense here

579
00:30:31,398 --> 00:30:36,058
that's going away and I'll just

580
00:30:34,079 --> 00:30:37,769
eliminate it everywhere cuz that'll

581
00:30:36,058 --> 00:30:43,519
generate errors for me in all the places

582
00:30:37,769 --> 00:30:43,519
that we're using it and so on all right

583
00:30:44,118 --> 00:30:49,019
lighting box will also probably go away

584
00:30:46,558 --> 00:30:51,148
as well so here's our lighting point

585
00:30:49,019 --> 00:30:55,200
state with our light store in it that's

586
00:30:51,148 --> 00:30:57,449
gonna go away there all of this stuff

587
00:30:55,200 --> 00:30:59,940
where we're doing this push cube here

588
00:30:57,450 --> 00:31:02,819
the lighting part of things needs to go

589
00:30:59,940 --> 00:31:05,480
away so the lighting enabled stuff just

590
00:31:02,819 --> 00:31:05,480
just goes away

591
00:31:11,440 --> 00:31:18,820
so all of this light count light index

592
00:31:14,259 --> 00:31:19,210
you can see how much code was in here

593
00:31:18,819 --> 00:31:21,339
too

594
00:31:19,210 --> 00:31:22,779
right look at all this stuff this is all

595
00:31:21,339 --> 00:31:24,519
gonna go away it's just gonna be

596
00:31:22,779 --> 00:31:27,250
happening inside the pixel shader the

597
00:31:24,519 --> 00:31:28,960
lookups will be happening there so all

598
00:31:27,250 --> 00:31:31,720
of this stuff can can sort of get

599
00:31:28,960 --> 00:31:36,730
cleaned up and I like that a lot like I

600
00:31:31,720 --> 00:31:39,640
said it's all good it's very good when

601
00:31:36,730 --> 00:31:49,029
we're pushing quads here the emission

602
00:31:39,640 --> 00:31:51,640
for the quads oops again I don't think

603
00:31:49,029 --> 00:31:53,649
we actually want what we really want to

604
00:31:51,640 --> 00:31:57,040
do is just when we put the cube down

605
00:31:53,650 --> 00:32:00,820
there we just want to store the fact

606
00:31:57,039 --> 00:32:03,399
that this cube needed to be considered

607
00:32:00,819 --> 00:32:05,379
as part of the lighting system but

608
00:32:03,400 --> 00:32:09,820
that's all we really needed it to do and

609
00:32:05,380 --> 00:32:13,120
so that stuff goes away I think also

610
00:32:09,819 --> 00:32:16,480
this emission value when we push a quad

611
00:32:13,119 --> 00:32:18,159
down with an emission value there I

612
00:32:16,480 --> 00:32:20,490
don't actually know that we need the

613
00:32:18,160 --> 00:32:23,470
quad to know about its emission value

614
00:32:20,490 --> 00:32:26,230
it's possible that we do but I'm not

615
00:32:23,470 --> 00:32:28,420
actually sure if we do or don't so if we

616
00:32:26,230 --> 00:32:31,860
take a look at here like where that

617
00:32:28,420 --> 00:32:31,860
emissions getting used at the moment

618
00:32:32,069 --> 00:32:38,799
yeah you can kind of see it's just not

619
00:32:35,109 --> 00:32:41,139
relevant right and I think we want to

620
00:32:38,799 --> 00:32:46,119
just get rid of this because the quad if

621
00:32:41,140 --> 00:32:48,070
you want to encode if you want to encode

622
00:32:46,119 --> 00:32:52,239
the emission value so that the quad just

623
00:32:48,069 --> 00:33:03,009
appears very bright that might make

624
00:32:52,240 --> 00:33:05,170
sense but I really don't know again not

625
00:33:03,009 --> 00:33:06,700
really sure so I'm just gonna leave the

626
00:33:05,170 --> 00:33:08,860
emission in there and the reason I say

627
00:33:06,700 --> 00:33:11,769
that is because although in here we

628
00:33:08,859 --> 00:33:13,599
don't really need the lighting value in

629
00:33:11,769 --> 00:33:16,200
that sense meaning we don't actually

630
00:33:13,599 --> 00:33:16,199
need

631
00:33:18,519 --> 00:33:25,670
we don't need the quads to have any idea

632
00:33:23,509 --> 00:33:27,859
about lighting at all anymore they're

633
00:33:25,670 --> 00:33:31,610
just render primitives which is what we

634
00:33:27,859 --> 00:33:34,309
want and that's good but for a parameter

635
00:33:31,609 --> 00:33:36,559
like emission when we have a quad that's

636
00:33:34,309 --> 00:33:39,829
supposed to light up right so this quad

637
00:33:36,559 --> 00:33:45,440
is supposed to be lit and bright when

638
00:33:39,829 --> 00:33:47,240
that happens we want the face itself not

639
00:33:45,440 --> 00:33:50,450
to like be shadowed or anything right

640
00:33:47,240 --> 00:33:55,910
it's emitting light so we may need to

641
00:33:50,450 --> 00:33:59,509
encode in into our like color values or

642
00:33:55,910 --> 00:34:03,590
something we may need to encode the fact

643
00:33:59,509 --> 00:34:05,809
that this is not reflective it's emits

644
00:34:03,589 --> 00:34:09,769
emissive with a certain level of

645
00:34:05,809 --> 00:34:12,699
emissive color so even though this thing

646
00:34:09,769 --> 00:34:15,168
is not being used right now at all I

647
00:34:12,699 --> 00:34:18,049
think I want to keep it in the pipe

648
00:34:15,168 --> 00:34:21,980
because I think eventually we may need

649
00:34:18,050 --> 00:34:26,260
an additional value here at least one

650
00:34:21,980 --> 00:34:28,820
floating-point value that just says how

651
00:34:26,260 --> 00:34:31,429
bright the quad should be of its own

652
00:34:28,820 --> 00:34:33,350
accord so I think we can't get away with

653
00:34:31,429 --> 00:34:37,369
eliminating a missing Commission

654
00:34:33,349 --> 00:34:41,349
entirely and so I'm going to leave that

655
00:34:37,369 --> 00:34:46,460
in there on as a sort of proactive

656
00:34:41,349 --> 00:34:49,599
assumption that that you know that will

657
00:34:46,460 --> 00:34:53,000
have to change at some point for render

658
00:34:49,599 --> 00:34:55,489
clarity right alright so looking at

659
00:34:53,000 --> 00:34:59,809
textured vertex here we've got a bunch

660
00:34:55,489 --> 00:35:01,759
of stuff we've got a normal perfect that

661
00:34:59,809 --> 00:35:03,619
says it doesn't need to be pervert X I

662
00:35:01,760 --> 00:35:07,280
don't know if I necessarily agree with

663
00:35:03,619 --> 00:35:08,960
that we may Bend that so I'm gonna

664
00:35:07,280 --> 00:35:11,120
actually get rid of that notion

665
00:35:08,960 --> 00:35:14,420
these don't but they're going away now

666
00:35:11,119 --> 00:35:17,569
light UV not sure what that's supposed

667
00:35:14,420 --> 00:35:23,150
to be don't have any idea what that is

668
00:35:17,570 --> 00:35:26,180
if we look in here at like things for

669
00:35:23,150 --> 00:35:30,619
lighting UV I don't know does anyone use

670
00:35:26,179 --> 00:35:32,029
that nobody does so who knows why that

671
00:35:30,619 --> 00:35:33,739
was there

672
00:35:32,030 --> 00:35:37,960
so we're gonna get rid of all that stuff

673
00:35:33,739 --> 00:35:43,789
all that's gone we're just gonna have a

674
00:35:37,960 --> 00:35:46,909
point a normal a UV and a color which is

675
00:35:43,789 --> 00:35:49,239
a pretty standard layout for a vertex

676
00:35:46,909 --> 00:35:53,839
and off you go

677
00:35:49,239 --> 00:35:58,039
okay so Jimmy

678
00:35:53,840 --> 00:36:00,920
so moving on we've got the vertex at rib

679
00:35:58,039 --> 00:36:04,880
pointers here for textured vertices that

680
00:36:00,920 --> 00:36:07,190
are sending down those light indexes we

681
00:36:04,880 --> 00:36:09,619
don't want that anymore so that's gonna

682
00:36:07,190 --> 00:36:12,650
go away again just pulling stuff out of

683
00:36:09,619 --> 00:36:15,909
the pipeline here those don't need to

684
00:36:12,650 --> 00:36:18,829
get sent down at all

685
00:36:15,909 --> 00:36:21,559
similarly when we're doing our push

686
00:36:18,829 --> 00:36:24,529
quads here anybody who was passing

687
00:36:21,559 --> 00:36:27,199
through light information that can go

688
00:36:24,530 --> 00:36:29,810
away as well let's take a look at the

689
00:36:27,199 --> 00:36:32,869
debug light store here okay so in here

690
00:36:29,809 --> 00:36:34,610
where we're storing this light for our

691
00:36:32,869 --> 00:36:36,019
debug light again that doesn't need to

692
00:36:34,610 --> 00:36:38,680
be there either because again those

693
00:36:36,019 --> 00:36:41,239
things don't have to get cash anymore

694
00:36:38,679 --> 00:36:43,159
you can kind of see that assuming we're

695
00:36:41,239 --> 00:36:45,079
able to make all this work getting rid

696
00:36:43,159 --> 00:36:46,730
of all this code is also great right

697
00:36:45,079 --> 00:36:50,779
this is all code that was costing us

698
00:36:46,730 --> 00:36:55,360
time before and now we don't have it

699
00:36:50,780 --> 00:36:55,360
right so that's all very good oops

700
00:36:55,570 --> 00:37:03,350
so hopefully you know that's all like

701
00:36:58,929 --> 00:37:06,559
gonna be a plus again just pulling out

702
00:37:03,349 --> 00:37:10,969
the vestigial remains there you can kind

703
00:37:06,559 --> 00:37:14,449
of see in here we've got the storage for

704
00:37:10,969 --> 00:37:18,859
our you know where where we were putting

705
00:37:14,449 --> 00:37:20,579
the information we don't need that stuff

706
00:37:18,860 --> 00:37:24,110
anymore

707
00:37:20,579 --> 00:37:24,110
[Music]

708
00:37:25,849 --> 00:37:29,750
that's just blending the old light

709
00:37:28,010 --> 00:37:31,970
solution in so again to get rid of that

710
00:37:29,750 --> 00:37:34,219
and this stuff is all gonna get nuked

711
00:37:31,969 --> 00:37:36,849
anyway where's our letting Point State

712
00:37:34,219 --> 00:37:39,980
there it is so when we're doing this

713
00:37:36,849 --> 00:37:42,170
sort of like yeah this part where we're

714
00:37:39,980 --> 00:37:44,570
working the lighting point States back

715
00:37:42,170 --> 00:37:46,309
up again again don't actually need this

716
00:37:44,570 --> 00:37:52,070
for anything so I'm gonna just walk

717
00:37:46,309 --> 00:37:53,090
through here and pull it out so box

718
00:37:52,070 --> 00:37:56,329
store direction

719
00:37:53,090 --> 00:37:56,329
[Music]

720
00:38:01,019 --> 00:38:10,358
so the problem with this code is we may

721
00:38:03,639 --> 00:38:13,328
want this rough code because we are

722
00:38:10,358 --> 00:38:15,009
gonna be updating like we may want to

723
00:38:13,329 --> 00:38:17,890
keep how this is sort of working a

724
00:38:15,010 --> 00:38:20,200
little bit so I think what I'm gonna do

725
00:38:17,889 --> 00:38:23,049
right now is I'm just gonna if zero this

726
00:38:20,199 --> 00:38:25,299
guy because I want to look at this code

727
00:38:23,050 --> 00:38:28,269
later when we implement the frame to

728
00:38:25,300 --> 00:38:30,339
frame coherence of the new system so I

729
00:38:28,269 --> 00:38:37,150
don't really want to get rid of it just

730
00:38:30,338 --> 00:38:39,880
yet right okay so let's see here here

731
00:38:37,150 --> 00:38:42,639
we've got our lighting push again that's

732
00:38:39,880 --> 00:38:43,210
pushing on stuff it doesn't need to same

733
00:38:42,639 --> 00:38:45,759
with here

734
00:38:43,210 --> 00:38:48,400
so I'm just gonna gonna get rid of those

735
00:38:45,760 --> 00:38:49,960
and leave them like this and that again

736
00:38:48,400 --> 00:38:52,809
just cleaned out like a ton of stuff

737
00:38:49,960 --> 00:38:56,800
right which is good

738
00:38:52,809 --> 00:38:58,900
same here we don't need this don't know

739
00:38:56,800 --> 00:39:03,039
where else we might have code of that

740
00:38:58,900 --> 00:39:07,690
nature some push cube stuff that doesn't

741
00:39:03,039 --> 00:39:09,730
do lighting so there we go and so now

742
00:39:07,690 --> 00:39:12,760
again that sort of pulls the lighting

743
00:39:09,730 --> 00:39:15,670
out of that sort of specific part of the

744
00:39:12,760 --> 00:39:19,450
code and allows you to just run directly

745
00:39:15,670 --> 00:39:21,159
now inside the actual renderer we need

746
00:39:19,449 --> 00:39:23,828
to pull out the part where we're

747
00:39:21,159 --> 00:39:27,449
actually doing that lighting as well so

748
00:39:23,829 --> 00:39:29,619
if I go and look at the Z bias program

749
00:39:27,449 --> 00:39:33,039
and we look at what we're actually doing

750
00:39:29,619 --> 00:39:35,250
in there I want to get rid of the things

751
00:39:33,039 --> 00:39:42,759
that expect to receive that so the vert

752
00:39:35,250 --> 00:39:44,880
light index in the texture vert where is

753
00:39:42,760 --> 00:39:47,349
it

754
00:39:44,880 --> 00:39:48,548
well I guess only the vert light index

755
00:39:47,349 --> 00:39:51,160
is getting past them I don't know

756
00:39:48,548 --> 00:39:53,409
exactly what's going on there but the in

757
00:39:51,159 --> 00:39:55,719
the the vert light index can go away and

758
00:39:53,409 --> 00:39:57,818
so the frag light index can also go away

759
00:39:55,719 --> 00:40:00,608
those two things wouldn't be passed down

760
00:39:57,818 --> 00:40:02,259
anymore and so where that was getting

761
00:40:00,608 --> 00:40:06,119
sort of sent through we can just get rid

762
00:40:02,259 --> 00:40:08,889
of it right and then inside the actual

763
00:40:06,119 --> 00:40:11,048
sampler here we don't need the light

764
00:40:08,889 --> 00:40:12,248
zero sampler or the light one sampler

765
00:40:11,048 --> 00:40:14,259
anymore but we're gonna leave those in

766
00:40:12,248 --> 00:40:18,699
temporarily can get rid of the frag

767
00:40:14,259 --> 00:40:23,650
light index and so in here I think all

768
00:40:18,699 --> 00:40:28,838
that stuff gets if out on on lighting

769
00:40:23,650 --> 00:40:30,309
enabled you can see here it just this

770
00:40:28,838 --> 00:40:32,108
was the part we would have been looking

771
00:40:30,309 --> 00:40:35,170
at that fried frag index and doing

772
00:40:32,108 --> 00:40:35,980
something and so now we don't have to

773
00:40:35,170 --> 00:40:38,769
worry about that

774
00:40:35,980 --> 00:40:40,240
right and so here we're doing our

775
00:40:38,768 --> 00:40:42,159
textile fetches from the light

776
00:40:40,239 --> 00:40:44,618
information we're gonna want to keep

777
00:40:42,159 --> 00:40:47,440
that so I'm gonna do an if lighting

778
00:40:44,619 --> 00:40:49,059
disabled here and then I'm gonna do an

779
00:40:47,440 --> 00:40:54,880
else and I'm just gonna get rid of all

780
00:40:49,059 --> 00:40:57,400
of this stuff and we know that lighting

781
00:40:54,880 --> 00:40:59,640
is in fact disabled at the moment you

782
00:40:57,400 --> 00:41:02,680
can see it here so I think we're okay

783
00:40:59,639 --> 00:41:03,848
mostly with what we're doing now but we

784
00:41:02,679 --> 00:41:07,858
may have to fix some errors in the

785
00:41:03,849 --> 00:41:13,630
shader right so it'll report those to us

786
00:41:07,858 --> 00:41:15,429
OpenGL will or should okay so we're

787
00:41:13,630 --> 00:41:17,950
almost there but you can see we're

788
00:41:15,429 --> 00:41:20,199
missing our quads and so we probably

789
00:41:17,949 --> 00:41:22,389
have some vertex alignment issues or

790
00:41:20,199 --> 00:41:23,768
something who knows what we've got but

791
00:41:22,389 --> 00:41:27,608
we'll we'll hunt it down

792
00:41:23,768 --> 00:41:30,879
so in here we're not doing lighting so

793
00:41:27,608 --> 00:41:34,929
we wouldn't expect there to be any

794
00:41:30,880 --> 00:41:37,778
problems with that in the shader but let

795
00:41:34,929 --> 00:41:42,328
me just make sure that we don't have any

796
00:41:37,778 --> 00:41:42,329
of that oh you know what I just realized

797
00:41:42,568 --> 00:41:45,568
actually

798
00:41:50,530 --> 00:41:58,680
this this was our problem here we still

799
00:41:54,429 --> 00:42:03,099
need this this texture index right so I

800
00:41:58,679 --> 00:42:07,539
accidentally removed that one but we

801
00:42:03,099 --> 00:42:09,130
still want that one right so I was just

802
00:42:07,539 --> 00:42:11,920
being a little bit overzealous there and

803
00:42:09,130 --> 00:42:16,570
forgot about that part of it but inside

804
00:42:11,920 --> 00:42:18,099
the textured vertex yet we do need we do

805
00:42:16,570 --> 00:42:23,640
need this just to tell it which texture

806
00:42:18,099 --> 00:42:23,639
to grab so there is I guess still a

807
00:42:33,239 --> 00:42:37,649
there is a thing that's you know we

808
00:42:35,829 --> 00:42:43,239
don't really need to send this down

809
00:42:37,650 --> 00:42:46,750
every time right if we have a quad that

810
00:42:43,239 --> 00:42:48,279
consists of four vertices actually we

811
00:42:46,750 --> 00:42:50,230
only need to tell the graphics card once

812
00:42:48,280 --> 00:42:52,420
which texture index it is because you

813
00:42:50,230 --> 00:42:55,480
can't change texture indices per pixel I

814
00:42:52,420 --> 00:42:57,430
mean we could but why would we there it

815
00:42:55,480 --> 00:43:00,039
literally doesn't do anything for us so

816
00:42:57,429 --> 00:43:04,179
we're just kind of wasting space at that

817
00:43:00,039 --> 00:43:07,349
point which kind of sucks this does

818
00:43:04,179 --> 00:43:09,819
bring up one particularly interesting

819
00:43:07,349 --> 00:43:11,469
option for us you can see this vertex is

820
00:43:09,820 --> 00:43:15,430
highly unbalanced this point it would be

821
00:43:11,469 --> 00:43:19,500
sixteen bits off but as we already said

822
00:43:15,429 --> 00:43:23,759
you know right

823
00:43:19,500 --> 00:43:23,760
we could put some emission in there

824
00:43:27,730 --> 00:43:47,199
right probably not that would have to be

825
00:43:39,730 --> 00:43:49,570
per pixel so I don't know so we know we

826
00:43:47,199 --> 00:43:52,569
at least would like an emission level

827
00:43:49,570 --> 00:43:55,660
right and it could be a 16-bit emission

828
00:43:52,570 --> 00:44:00,970
level if we really want to and so that's

829
00:43:55,659 --> 00:44:02,500
kind of a cool that's kind of a cool

830
00:44:00,969 --> 00:44:04,750
option to sort of pack in there we

831
00:44:02,500 --> 00:44:06,070
basically have sixteen bits that we

832
00:44:04,750 --> 00:44:09,789
probably want to use up just to make

833
00:44:06,070 --> 00:44:14,980
this thing be four four byte aligned so

834
00:44:09,789 --> 00:44:16,630
I feel like that's a pretty clear option

835
00:44:14,980 --> 00:44:18,550
of where the emission would go maybe we

836
00:44:16,630 --> 00:44:23,710
want something else in there too but I

837
00:44:18,550 --> 00:44:27,099
don't know at this point all right um

838
00:44:23,710 --> 00:44:28,869
let's see how we're doing there so I got

839
00:44:27,099 --> 00:44:32,349
to go we if out that part of the shader

840
00:44:28,869 --> 00:44:35,559
though - sorry about that so like I said

841
00:44:32,349 --> 00:44:37,960
we do want those texture indices to to

842
00:44:35,559 --> 00:44:42,039
be sent down and then in the Z bias

843
00:44:37,960 --> 00:44:44,170
program I want to make sure that that

844
00:44:42,039 --> 00:44:46,960
lighting disabled stuff is still

845
00:44:44,170 --> 00:44:49,780
learning disabled so this frag Boop's

846
00:44:46,960 --> 00:44:55,659
this frag light index here doesn't need

847
00:44:49,780 --> 00:44:58,750
to be there the same thing is true in

848
00:44:55,659 --> 00:45:02,289
the shader itself so that frag light

849
00:44:58,750 --> 00:45:07,989
index goes away I'm gonna go ahead and

850
00:45:02,289 --> 00:45:11,608
put the if I'm disabled in here else and

851
00:45:07,989 --> 00:45:14,709
then this whole part can also go away

852
00:45:11,608 --> 00:45:16,598
and then this part should already have

853
00:45:14,710 --> 00:45:18,818
the letting be completely disabled which

854
00:45:16,599 --> 00:45:21,329
is what we want so I think we're pretty

855
00:45:18,818 --> 00:45:21,329
good here

856
00:45:26,659 --> 00:45:34,190
okay so now we just have to fix whatever

857
00:45:30,920 --> 00:45:35,720
bug we introduced here where we're you

858
00:45:34,190 --> 00:45:39,679
can see what's interesting about this as

859
00:45:35,719 --> 00:45:43,098
you can see that for some reason solid

860
00:45:39,679 --> 00:45:47,298
cubes are working so it's only things

861
00:45:43,099 --> 00:45:49,220
with a texture on them that aren't so

862
00:45:47,298 --> 00:46:00,380
I'm not sure if I did something weird

863
00:45:49,219 --> 00:46:01,308
there with the with the Texel fetch but

864
00:46:00,380 --> 00:46:05,990
I don't think so

865
00:46:01,309 --> 00:46:11,690
so the frag texture index that's coming

866
00:46:05,989 --> 00:46:13,848
in there the invert texture index there

867
00:46:11,690 --> 00:46:15,679
oh you know what it may have been that I

868
00:46:13,849 --> 00:46:19,960
forgot to delete that reference to the

869
00:46:15,679 --> 00:46:19,960
in that could have been in actually

870
00:46:25,239 --> 00:46:30,609
nope so we're still getting some kind of

871
00:46:28,420 --> 00:46:33,099
a problem where the texture probably

872
00:46:30,610 --> 00:46:36,250
with the texture index is not lined up

873
00:46:33,099 --> 00:46:38,019
properly or something right so let's

874
00:46:36,250 --> 00:46:39,760
take a look at what happens in that code

875
00:46:38,019 --> 00:46:42,699
and just see if there was something

876
00:46:39,760 --> 00:46:45,070
weird going on there we should just get

877
00:46:42,699 --> 00:46:47,109
rid of this light index nonsense here

878
00:46:45,070 --> 00:46:49,990
the vert light index stuff so I'm gonna

879
00:46:47,110 --> 00:46:55,780
go into the prog system they're not

880
00:46:49,989 --> 00:46:58,809
Prague the city but but Prague the the

881
00:46:55,780 --> 00:47:00,130
structure so we've got this vert light

882
00:46:58,809 --> 00:47:01,900
in next I'm gonna get delete that

883
00:47:00,130 --> 00:47:04,619
because it might be that someone's using

884
00:47:01,900 --> 00:47:08,440
that and we're creating an issue right

885
00:47:04,619 --> 00:47:10,300
like this for example so I want to make

886
00:47:08,440 --> 00:47:17,010
sure that that's not happening anywhere

887
00:47:10,300 --> 00:47:18,990
and that's completely removed like this

888
00:47:17,010 --> 00:47:21,130
there we go

889
00:47:18,989 --> 00:47:23,469
and I don't know if there is anywhere

890
00:47:21,130 --> 00:47:25,840
else we might need to fuss with it we'll

891
00:47:23,469 --> 00:47:27,669
see in a second here but just kind of

892
00:47:25,840 --> 00:47:29,800
starting to trim these away and then we

893
00:47:27,670 --> 00:47:31,170
can do is we can open up insight and

894
00:47:29,800 --> 00:47:34,240
take a look at what we're sending down

895
00:47:31,170 --> 00:47:36,130
just make sure that we've got everything

896
00:47:34,239 --> 00:47:37,419
before we start a little more hardcore

897
00:47:36,130 --> 00:47:41,519
debugging to find out what went wrong

898
00:47:37,420 --> 00:47:43,599
there but we're mostly good now I think

899
00:47:41,519 --> 00:47:47,340
she's got to figure out where where we

900
00:47:43,599 --> 00:47:47,339
lost our texture index there

901
00:47:47,500 --> 00:47:50,829
[Music]

902
00:47:55,588 --> 00:48:05,449
I'm gonna scan this really quickly and I

903
00:48:01,978 --> 00:48:05,448
would like it to not be behind my head

904
00:48:06,708 --> 00:48:15,618
so just looking through here at vert

905
00:48:12,298 --> 00:48:15,619
texture index

906
00:48:24,530 --> 00:48:37,900
it all seems pretty good I'm not seeing

907
00:48:36,108 --> 00:48:41,090
anything weird

908
00:48:37,900 --> 00:48:41,630
the lighting stuff is all more or less

909
00:48:41,090 --> 00:48:44,679
gone

910
00:48:41,630 --> 00:48:44,679
[Music]

911
00:48:51,099 --> 00:48:54,779
then I'll seem fine

912
00:48:59,818 --> 00:49:04,808
so that all seems that all seems fine

913
00:49:02,440 --> 00:49:07,659
you can see here the sampling from the

914
00:49:04,809 --> 00:49:15,190
frag texture index which is set there

915
00:49:07,659 --> 00:49:18,299
but oh you know nice realized when I was

916
00:49:15,190 --> 00:49:21,450
being overzealous there I probably

917
00:49:18,300 --> 00:49:26,079
forgot to fill out the texture index

918
00:49:21,449 --> 00:49:29,710
yeah so you can see here I totally did

919
00:49:26,079 --> 00:49:32,920
right you can see here that we're just

920
00:49:29,710 --> 00:49:40,179
not filling it out so this is supposed

921
00:49:32,920 --> 00:49:45,909
to have a texture index right and I

922
00:49:40,179 --> 00:49:50,318
totally I totally got rid of it right

923
00:49:45,909 --> 00:49:52,029
cuz every time you do this you're you

924
00:49:50,318 --> 00:49:54,039
know when you call right quad you're

925
00:49:52,030 --> 00:49:56,410
supposed to be writing the quad with a

926
00:49:54,039 --> 00:49:57,639
particular texture index in mind and I

927
00:49:56,409 --> 00:49:59,259
just totally got rid of it let me just

928
00:49:57,639 --> 00:50:04,389
verify that that's true but I'm pretty

929
00:49:59,260 --> 00:50:06,130
sure that's what we did right yeah so

930
00:50:04,389 --> 00:50:08,048
that's just stupid I don't know why I

931
00:50:06,130 --> 00:50:09,430
did that but again I think I was just

932
00:50:08,048 --> 00:50:11,829
for some reason thinking there were two

933
00:50:09,429 --> 00:50:14,078
lighting indexes for every vertex I

934
00:50:11,829 --> 00:50:17,079
don't know why I thought that but in my

935
00:50:14,079 --> 00:50:18,548
head like I just I was I was just being

936
00:50:17,079 --> 00:50:21,490
too crazy with it I'm not sure why

937
00:50:18,548 --> 00:50:27,369
that's just what happens sometimes

938
00:50:21,489 --> 00:50:31,568
all right so in here this this this code

939
00:50:27,369 --> 00:50:33,338
is for whatever reason I don't think

940
00:50:31,568 --> 00:50:36,449
we're actually calling it though right

941
00:50:33,338 --> 00:50:38,739
so it's actually the other one like the

942
00:50:36,449 --> 00:50:40,750
the other code I think that was the

943
00:50:38,739 --> 00:50:48,129
problem there but you can see here like

944
00:50:40,750 --> 00:50:51,690
right quad was supposed to be supposed

945
00:50:48,130 --> 00:50:51,690
to be called by somebody and never was

946
00:50:52,809 --> 00:50:56,920
right I don't know if we like thought we

947
00:50:55,750 --> 00:51:01,630
were gonna speed something up and then

948
00:50:56,920 --> 00:51:05,530
didn't I'm not sure but push quad which

949
00:51:01,630 --> 00:51:09,849
is the one we actually call this one

950
00:51:05,530 --> 00:51:14,080
here push quad is gonna have the same

951
00:51:09,849 --> 00:51:15,940
problem right so we probably get the

952
00:51:14,079 --> 00:51:17,860
texture index we're supposed to use and

953
00:51:15,940 --> 00:51:22,630
then yet you can see we never actually

954
00:51:17,860 --> 00:51:27,550
fill it out here right and if you look

955
00:51:22,630 --> 00:51:30,039
we never passed it down so it's not it's

956
00:51:27,550 --> 00:51:30,970
not as big of a piping problem as we

957
00:51:30,039 --> 00:51:32,259
have in the other one where I

958
00:51:30,969 --> 00:51:36,279
accidentally deleted it from being

959
00:51:32,260 --> 00:51:38,140
passed in but basically in here we've

960
00:51:36,280 --> 00:51:40,510
already got the texture index right

961
00:51:38,139 --> 00:51:44,559
there we're just not filling it out so

962
00:51:40,510 --> 00:51:48,160
that's just a case of again overzealous

963
00:51:44,559 --> 00:51:49,630
deletion we still do need that even

964
00:51:48,159 --> 00:51:50,949
though we would prefer to not actually

965
00:51:49,630 --> 00:51:55,210
need it and to have done it per

966
00:51:50,949 --> 00:51:56,919
primitive in this case we can't can't do

967
00:51:55,210 --> 00:52:01,599
that because we haven't ever set up a

968
00:51:56,920 --> 00:52:03,519
primitive thing for our quads uh so now

969
00:52:01,599 --> 00:52:04,989
we hopefully are piping that through

970
00:52:03,519 --> 00:52:06,250
properly

971
00:52:04,989 --> 00:52:08,500
which means our vertices actually

972
00:52:06,250 --> 00:52:10,300
correctly have their texture in them and

973
00:52:08,500 --> 00:52:13,360
it looks like that was the only thing we

974
00:52:10,300 --> 00:52:15,550
were missing so now that lighting stuff

975
00:52:13,360 --> 00:52:21,250
has been pulled out of the lighting path

976
00:52:15,550 --> 00:52:24,160
entirely right and so we should be good

977
00:52:21,250 --> 00:52:26,320
to go here now what we need to do inside

978
00:52:24,159 --> 00:52:34,029
the shader of course now is we need to

979
00:52:26,320 --> 00:52:37,000
sort of pull come to me inside the the

980
00:52:34,030 --> 00:52:41,019
actual pixel shader we need to pull from

981
00:52:37,000 --> 00:52:45,639
the lighting probes that are inside the

982
00:52:41,019 --> 00:52:49,659
voxel right and so we want to have some

983
00:52:45,639 --> 00:52:51,849
way of doing all those lookups I don't

984
00:52:49,659 --> 00:52:54,069
know how much time we have but it occurs

985
00:52:51,849 --> 00:52:55,989
to me that maybe I could do this in the

986
00:52:54,070 --> 00:52:59,580
opposite order we thought we were gonna

987
00:52:55,989 --> 00:53:02,439
do it in meaning I could if we wanted to

988
00:52:59,579 --> 00:53:06,219
actually not do the light propagation

989
00:53:02,440 --> 00:53:07,990
first I could do the lookups first and

990
00:53:06,219 --> 00:53:10,539
from there now I don't know if that's

991
00:53:07,989 --> 00:53:11,889
actually something we want to do but

992
00:53:10,539 --> 00:53:18,279
it's certainly something we could do

993
00:53:11,889 --> 00:53:20,500
right and so meaning I could send down

994
00:53:18,280 --> 00:53:23,440
light probes that are fake

995
00:53:20,500 --> 00:53:25,889
we just set them to whatever we want and

996
00:53:23,440 --> 00:53:29,789
then verify that the pixel shader

997
00:53:25,889 --> 00:53:32,109
actually pulls from it correctly right

998
00:53:29,789 --> 00:53:34,360
and so that would be an interesting

999
00:53:32,110 --> 00:53:37,890
thing to do I don't know if we want to

1000
00:53:34,360 --> 00:53:37,890
do it that way but we certainly could

1001
00:54:01,219 --> 00:54:13,579
all right so let's think um I think I

1002
00:54:11,510 --> 00:54:19,099
still want to do the light probe pushing

1003
00:54:13,579 --> 00:54:25,059
pass first that still seems a bit better

1004
00:54:19,099 --> 00:54:25,059
to me and in terms of lights themselves

1005
00:54:26,079 --> 00:54:31,880
that part is a little bit more Squinkie

1006
00:54:28,849 --> 00:54:35,330
and so I'm not sure that that parts a

1007
00:54:31,880 --> 00:54:38,480
little harder to say anyway I'm gonna go

1008
00:54:35,329 --> 00:54:43,940
to render commands here and if we take a

1009
00:54:38,480 --> 00:54:45,800
look at what we're keeping track of my

1010
00:54:43,940 --> 00:54:48,740
question is just like how do we want to

1011
00:54:45,800 --> 00:54:51,769
get these light probes passed down to

1012
00:54:48,739 --> 00:54:53,959
the lighting system right so if you look

1013
00:54:51,769 --> 00:54:58,039
at what's going on in here you can kind

1014
00:54:53,960 --> 00:55:00,559
of see that the the push buffers for our

1015
00:54:58,039 --> 00:55:04,219
game render commands the lighting

1016
00:55:00,559 --> 00:55:07,130
information actually doesn't get pushed

1017
00:55:04,219 --> 00:55:11,029
on there right you can see this pretty

1018
00:55:07,130 --> 00:55:11,660
much just takes quads and that's the end

1019
00:55:11,030 --> 00:55:13,310
of it right

1020
00:55:11,659 --> 00:55:17,719
there's the index array there's the

1021
00:55:13,309 --> 00:55:21,440
texture array and there's the vertex

1022
00:55:17,719 --> 00:55:24,889
array so the way so all of that stuff

1023
00:55:21,440 --> 00:55:29,329
moving down through the system there

1024
00:55:24,889 --> 00:55:33,500
makes good sense when we were pushing

1025
00:55:29,329 --> 00:55:35,809
lights in here right what we were sort

1026
00:55:33,500 --> 00:55:37,750
of expecting to do I believe and let me

1027
00:55:35,809 --> 00:55:42,230
just take a look at the render group

1028
00:55:37,750 --> 00:55:44,900
yeah so what we were expecting to do is

1029
00:55:42,230 --> 00:55:48,588
sort of push lights on separately as

1030
00:55:44,900 --> 00:55:50,720
part of this pass here right and we've

1031
00:55:48,588 --> 00:55:54,380
got two sets of things we need to send

1032
00:55:50,719 --> 00:55:58,219
down we need to send down the boxes that

1033
00:55:54,380 --> 00:56:01,280
are used for college like ray casting

1034
00:55:58,219 --> 00:56:04,848
right so that we can track what's

1035
00:56:01,280 --> 00:56:07,310
hitting Ray's and what's not and then we

1036
00:56:04,849 --> 00:56:10,070
also need to track where the lights are

1037
00:56:07,309 --> 00:56:11,989
that are actually flooding in a mission

1038
00:56:10,070 --> 00:56:15,730
to the scene because those are you know

1039
00:56:11,989 --> 00:56:15,729
again also something we want to keep

1040
00:56:16,500 --> 00:56:32,139
so if we look I guess what I would say

1041
00:56:24,940 --> 00:56:36,340
here is we can probably keep this pretty

1042
00:56:32,139 --> 00:56:38,699
similar and just sort of change lighting

1043
00:56:36,340 --> 00:56:38,700
box

1044
00:56:59,358 --> 00:57:06,409
so I guess the thing that I'm not sure

1045
00:57:02,730 --> 00:57:06,409
exactly how we want to do it

1046
00:57:21,019 --> 00:57:26,659
yeah I'm not sure exactly what we want

1047
00:57:23,719 --> 00:57:32,929
to do here but I think we want to keep

1048
00:57:26,659 --> 00:57:37,029
this stuff relatively the same the only

1049
00:57:32,929 --> 00:57:41,690
thing I'm thinking is that maybe

1050
00:57:37,030 --> 00:57:44,410
emission wants to only to be a separate

1051
00:57:41,690 --> 00:57:48,289
thing like we want our lights themselves

1052
00:57:44,409 --> 00:57:52,759
to be stored separately but otherwise

1053
00:57:48,289 --> 00:58:04,929
this looks fine the light index seven

1054
00:57:52,760 --> 00:58:09,280
part of things that part that part I

1055
00:58:04,929 --> 00:58:12,829
want to look at a little more closely so

1056
00:58:09,280 --> 00:58:14,480
let's look at where that's being used if

1057
00:58:12,829 --> 00:58:18,529
I can pile right now

1058
00:58:14,480 --> 00:58:20,889
with that out who actually gets upset

1059
00:58:18,530 --> 00:58:20,890
with me

1060
00:58:35,309 --> 00:58:43,409
yeah so those light indices were just

1061
00:58:40,798 --> 00:58:46,228
where we were storing light information

1062
00:58:43,409 --> 00:58:48,390
for the faces of the cube which at this

1063
00:58:46,228 --> 00:58:51,058
point we're not doing anymore those are

1064
00:58:48,389 --> 00:58:54,449
going into our light probes so the

1065
00:58:51,059 --> 00:58:58,019
things that we actually hit and bounce

1066
00:58:54,449 --> 00:59:03,269
light around on those are actually not

1067
00:58:58,018 --> 00:59:04,889
it doesn't matter right we're going to

1068
00:59:03,268 --> 00:59:09,118
gather the lighting from the probes at

1069
00:59:04,889 --> 00:59:13,199
that point so I think that just goes

1070
00:59:09,119 --> 00:59:20,309
away it's just not a thing right so if

1071
00:59:13,199 --> 00:59:23,130
we take a look at that lighting box that

1072
00:59:20,309 --> 00:59:26,579
doesn't need to be there now the child

1073
00:59:23,130 --> 00:59:29,579
part of things probably does because

1074
00:59:26,579 --> 00:59:31,349
when we do our lighting box computations

1075
00:59:29,579 --> 00:59:34,890
we're still gonna need a spatial

1076
00:59:31,349 --> 00:59:38,489
hierarchy and so I feel like the thing

1077
00:59:34,889 --> 00:59:40,139
we use to like build up the boxes we're

1078
00:59:38,489 --> 00:59:43,438
probably still gonna need for ray

1079
00:59:40,139 --> 00:59:45,358
casting would be my guess I don't know

1080
00:59:43,438 --> 00:59:47,009
that that's true it may be that

1081
00:59:45,358 --> 00:59:49,409
brute-forcing it actually would be

1082
00:59:47,009 --> 00:59:52,199
better given how few of these boxes

1083
00:59:49,409 --> 00:59:54,028
there actually are but I don't want to

1084
00:59:52,199 --> 00:59:56,849
pull out code that I don't know if I

1085
00:59:54,028 --> 00:59:59,358
need so for the moment I'm gonna say

1086
00:59:56,849 --> 01:00:07,019
we'll leave these two in their

1087
00:59:59,358 --> 01:00:09,058
transparency I don't know what to make

1088
01:00:07,018 --> 01:00:12,568
of that I don't know that we really want

1089
01:00:09,059 --> 01:00:16,559
to model transparency inside the light

1090
01:00:12,568 --> 01:00:19,380
convection I'm assuming that if I get

1091
01:00:16,559 --> 01:00:21,199
rid of that nobody complains because I

1092
01:00:19,380 --> 01:00:26,608
don't think anyone was probably using it

1093
01:00:21,199 --> 01:00:29,699
yeah that transparency just wasn't

1094
01:00:26,608 --> 01:00:32,098
actually used in here so I'm gonna get

1095
01:00:29,699 --> 01:00:33,719
rid of that I'm not gonna have that be

1096
01:00:32,099 --> 01:00:34,739
recorded and we're just not even gonna

1097
01:00:33,719 --> 01:00:38,068
pretend that we're gonna do anything

1098
01:00:34,739 --> 01:00:40,289
with it so I think we're down to just

1099
01:00:38,068 --> 01:00:43,079
this stuff I think this is pretty

1100
01:00:40,289 --> 01:00:44,549
accurate with what we would need and

1101
01:00:43,079 --> 01:00:46,199
then these two pieces of information

1102
01:00:44,548 --> 01:00:48,489
here we're going to leave on there

1103
01:00:46,199 --> 01:00:49,780
because they

1104
01:00:48,489 --> 01:00:54,459
are part of the spatial hierarchy thing

1105
01:00:49,780 --> 01:00:56,200
but because all of the actual reflectors

1106
01:00:54,460 --> 01:00:58,240
themselves which are at the base of the

1107
01:00:56,199 --> 01:01:01,179
hierarchy don't need a child count or a

1108
01:00:58,239 --> 01:01:02,649
first child index I'm not 100% sure we

1109
01:01:01,179 --> 01:01:04,210
actually want to put them there because

1110
01:01:02,650 --> 01:01:05,710
we may want our spatial Harkey to just

1111
01:01:04,210 --> 01:01:07,510
be something else that has nothing to do

1112
01:01:05,710 --> 01:01:09,699
with these lighting box structures to

1113
01:01:07,510 --> 01:01:11,440
themselves that's sort of a separate

1114
01:01:09,699 --> 01:01:30,098
issue and we can take that up a little

1115
01:01:11,440 --> 01:01:31,838
bit later on so so we'll see I don't

1116
01:01:30,099 --> 01:01:36,580
know where that's going to go exactly

1117
01:01:31,838 --> 01:01:42,639
but we'll we'll sort of play that by ear

1118
01:01:36,579 --> 01:01:44,429
in terms of emission I don't know what

1119
01:01:42,639 --> 01:01:47,889
we want to do about that but I think

1120
01:01:44,429 --> 01:01:55,118
emission itself is probably something

1121
01:01:47,889 --> 01:01:57,069
that we would want to like I said I

1122
01:01:55,119 --> 01:01:58,780
think we might want to put lights in a

1123
01:01:57,070 --> 01:02:00,820
separate list so that we're not really

1124
01:01:58,780 --> 01:02:03,280
looking at them like this but I don't

1125
01:02:00,820 --> 01:02:05,200
know so that's something we'll have to

1126
01:02:03,280 --> 01:02:08,380
think about a little bit more carefully

1127
01:02:05,199 --> 01:02:12,399
as we go further down as we as we sort

1128
01:02:08,380 --> 01:02:15,130
of get deeper into the system all right

1129
01:02:12,400 --> 01:02:17,530
so let's take a look at this lighting

1130
01:02:15,130 --> 01:02:20,800
index nonsense this stuff I don't think

1131
01:02:17,530 --> 01:02:22,210
we need at all so this extended light

1132
01:02:20,800 --> 01:02:23,519
point count and the lighting to see I

1133
01:02:22,210 --> 01:02:27,099
don't think any of that stuff is

1134
01:02:23,519 --> 01:02:29,159
important so I'm just gonna get rid of

1135
01:02:27,099 --> 01:02:29,160
that

1136
01:02:30,940 --> 01:02:34,070
[Music]

1137
01:02:38,300 --> 01:02:42,350
yeah and I don't really care about any

1138
01:02:40,699 --> 01:02:43,699
of this stuff at all so basically what

1139
01:02:42,349 --> 01:02:46,190
we're gonna do is we're just gonna get

1140
01:02:43,699 --> 01:02:49,539
rid of the accumulated light information

1141
01:02:46,190 --> 01:02:53,210
here so this stuff here where we were

1142
01:02:49,539 --> 01:02:56,630
kind of where we were doing that that's

1143
01:02:53,210 --> 01:02:59,240
just gonna go away and what we could do

1144
01:02:56,630 --> 01:03:03,740
is use the actual look when we're doing

1145
01:02:59,239 --> 01:03:05,689
the ref see here we could do something a

1146
01:03:03,739 --> 01:03:09,619
little bit more specific with it

1147
01:03:05,690 --> 01:03:12,200
but I think what I'd rather do just

1148
01:03:09,619 --> 01:03:15,319
trying to think for the child indices

1149
01:03:12,199 --> 01:03:18,710
yeah so what we could do for that is

1150
01:03:15,320 --> 01:03:21,220
just say where we get the the ref see

1151
01:03:18,710 --> 01:03:21,220
there

1152
01:03:27,320 --> 01:03:33,800
yeah none of this stuff needs to happen

1153
01:03:31,300 --> 01:03:38,980
where we get the ref see there we could

1154
01:03:33,800 --> 01:03:38,980
just sum up just from the children right

1155
01:03:45,820 --> 01:03:56,330
so I'm not really sure how that wants to

1156
01:03:48,739 --> 01:04:08,569
do its thing but it seems to me like it

1157
01:03:56,329 --> 01:04:11,090
maybe wants to do this not sure but

1158
01:04:08,570 --> 01:04:12,530
basically like the length difference

1159
01:04:11,090 --> 01:04:21,710
here I suppose

1160
01:04:12,530 --> 01:04:23,900
oops yeah like like the point we don't

1161
01:04:21,710 --> 01:04:26,030
really care about the point we just care

1162
01:04:23,900 --> 01:04:28,340
about where the lighting box itself is

1163
01:04:26,030 --> 01:04:31,450
did that stuff already get set in a

1164
01:04:28,340 --> 01:04:31,450
different path by the way

1165
01:04:34,489 --> 01:04:39,108
I'm not sure I'm you know what I don't

1166
01:04:37,460 --> 01:04:40,789
really want any of this stuff so I feel

1167
01:04:39,108 --> 01:04:44,179
like I don't I just want this stuff to

1168
01:04:40,789 --> 01:04:47,358
go away and later we can sort of figure

1169
01:04:44,179 --> 01:04:49,069
out how we want that stuff to propagate

1170
01:04:47,358 --> 01:04:49,639
down but I'm just I'm just gonna get rid

1171
01:04:49,070 --> 01:04:51,890
of this stuff

1172
01:04:49,639 --> 01:05:00,230
we don't want this stuff at all it's

1173
01:04:51,889 --> 01:05:02,569
just let's just do good all right so

1174
01:05:00,230 --> 01:05:09,050
here where we actually in here we're

1175
01:05:02,570 --> 01:05:11,059
doing the looks like we're doing the

1176
01:05:09,050 --> 01:05:13,580
thing that actually builds the box

1177
01:05:11,059 --> 01:05:16,880
surfaces here and again I don't think I

1178
01:05:13,579 --> 01:05:19,489
want any of this stuff really this is

1179
01:05:16,880 --> 01:05:22,010
this is again for sort of treating the

1180
01:05:19,489 --> 01:05:24,199
boxes as if they were things that we

1181
01:05:22,010 --> 01:05:26,570
reflect around but we're not really

1182
01:05:24,199 --> 01:05:28,909
gonna want to do that so I think this

1183
01:05:26,570 --> 01:05:31,700
stuff is just not yeah just not on the

1184
01:05:28,909 --> 01:05:33,819
table so I'm gonna go ahead and get rid

1185
01:05:31,699 --> 01:05:33,819
of that

1186
01:05:47,568 --> 01:05:57,960
here we have this is just the lighting

1187
01:05:53,099 --> 01:06:00,500
output here it looks like this was stuff

1188
01:05:57,960 --> 01:06:00,500
for

1189
01:06:06,039 --> 01:06:14,840
you know I'm not sure what this is stuff

1190
01:06:08,210 --> 01:06:17,329
for oh right

1191
01:06:14,840 --> 01:06:20,840
so this is just stuff for storing the

1192
01:06:17,329 --> 01:06:22,909
averages over time all I really need to

1193
01:06:20,840 --> 01:06:24,350
do there is just again if death a little

1194
01:06:22,909 --> 01:06:26,149
bit more of it out I wanted to look at

1195
01:06:24,349 --> 01:06:27,920
this code because our averaging seemed

1196
01:06:26,150 --> 01:06:29,840
to be working pretty well and since

1197
01:06:27,920 --> 01:06:31,909
that's a fairly fuzzy thing to do I

1198
01:06:29,840 --> 01:06:36,620
wanted to be able to reference what we

1199
01:06:31,909 --> 01:06:37,579
were doing already all right so as far

1200
01:06:36,619 --> 01:06:41,989
as lighting point

1201
01:06:37,579 --> 01:06:45,019
output goes yeah so like this stuff here

1202
01:06:41,989 --> 01:06:47,000
where we're looping over these again

1203
01:06:45,019 --> 01:06:50,690
this is I'm just gonna go ahead and if

1204
01:06:47,000 --> 01:06:53,989
zero this out where we're outputting

1205
01:06:50,690 --> 01:06:56,510
this lighting because we're gonna be

1206
01:06:53,989 --> 01:06:57,589
outputting probes instead and so it's

1207
01:06:56,510 --> 01:07:01,820
gonna be pretty different

1208
01:06:57,590 --> 01:07:07,059
by comparison so I'm just gonna go ahead

1209
01:07:01,820 --> 01:07:10,420
and do that okay

1210
01:07:07,059 --> 01:07:12,739
so we're now still sort of technically

1211
01:07:10,420 --> 01:07:16,760
doing some stuff with the lighting in

1212
01:07:12,739 --> 01:07:19,069
there but it's not stuff that is

1213
01:07:16,760 --> 01:07:21,980
meaningful anymore right so we kind of

1214
01:07:19,070 --> 01:07:24,650
nerfed it and now we can start to build

1215
01:07:21,980 --> 01:07:29,240
the actual lighting probe system on top

1216
01:07:24,650 --> 01:07:32,329
of that and we still have I think we are

1217
01:07:29,239 --> 01:07:34,399
still going to be able to have the where

1218
01:07:32,329 --> 01:07:37,969
we put these lighting boxes that are

1219
01:07:34,400 --> 01:07:40,220
used for computation we're gonna still

1220
01:07:37,969 --> 01:07:44,000
be pushing these down we're just going

1221
01:07:40,219 --> 01:07:46,489
to be pushing them down without the sort

1222
01:07:44,000 --> 01:07:49,130
of light information in them it's just

1223
01:07:46,489 --> 01:07:51,469
they're there as blocks to sort of take

1224
01:07:49,130 --> 01:07:53,539
rays that hit them and stop those rays

1225
01:07:51,469 --> 01:07:55,399
from propagating right so it's the

1226
01:07:53,539 --> 01:08:00,380
collision geometry for our array caster

1227
01:07:55,400 --> 01:08:03,260
but that's all and so that's sort of

1228
01:08:00,380 --> 01:08:04,760
what we're what we've pulled out is the

1229
01:08:03,260 --> 01:08:05,810
part where the lighting information was

1230
01:08:04,760 --> 01:08:09,110
welded into them

1231
01:08:05,809 --> 01:08:11,299
which we didn't want so when we actually

1232
01:08:09,110 --> 01:08:14,150
do a push cube here what we want to do

1233
01:08:11,300 --> 01:08:18,500
is say whenever you're doing a push cube

1234
01:08:14,150 --> 01:08:19,539
whoever pushes the cube if the lighting

1235
01:08:18,500 --> 01:08:23,770
was enabled

1236
01:08:19,539 --> 01:08:27,010
we push just the cube data on to the

1237
01:08:23,770 --> 01:08:31,080
lighting system right so basically what

1238
01:08:27,010 --> 01:08:35,650
we say here is if group lighting enabled

1239
01:08:31,079 --> 01:08:39,068
then what we want to do is in that

1240
01:08:35,649 --> 01:08:40,929
render group we've still got this idea

1241
01:08:39,069 --> 01:08:43,240
that the lighting boxes get pushed on

1242
01:08:40,930 --> 01:08:46,588
here so we would say all right give me a

1243
01:08:43,239 --> 01:08:46,588
lighting box like and fill out

1244
01:08:52,409 --> 01:09:11,349
interestingly enough I suppose even this

1245
01:08:56,859 --> 01:09:13,000
could work with the entity cache because

1246
01:09:11,350 --> 01:09:15,280
we could actually do a thing where we

1247
01:09:13,000 --> 01:09:17,529
just don't even have to build the

1248
01:09:15,279 --> 01:09:19,929
spatial hierarchy every frame like if

1249
01:09:17,529 --> 01:09:21,279
you think about it we could just insert

1250
01:09:19,930 --> 01:09:23,670
and remove things from the spatial

1251
01:09:21,279 --> 01:09:25,960
hierarchy that tends to be hard

1252
01:09:23,670 --> 01:09:27,850
incremental e updating spatial

1253
01:09:25,960 --> 01:09:29,770
hierarchies is a lot of work so I don't

1254
01:09:27,850 --> 01:09:33,359
know if we really want to do it but it's

1255
01:09:29,770 --> 01:09:35,740
worth noting that like we sort of could

1256
01:09:33,359 --> 01:09:39,490
because we now know when entity has come

1257
01:09:35,739 --> 01:09:42,039
into her and out of that cache yeah it's

1258
01:09:39,489 --> 01:09:46,059
worth thinking about anyway in here

1259
01:09:42,039 --> 01:09:47,680
we've got the lighting box we need to

1260
01:09:46,060 --> 01:09:49,600
grab that from the render group where it

1261
01:09:47,680 --> 01:09:52,000
should be and so that would be in light

1262
01:09:49,600 --> 01:09:55,600
boxes plus whichever one were on right

1263
01:09:52,000 --> 01:09:56,800
now so light box count right and before

1264
01:09:55,600 --> 01:10:00,510
we do that we just want to assert that

1265
01:09:56,800 --> 01:10:00,510
we haven't blown out the total list

1266
01:10:02,260 --> 01:10:08,480
so you want to assert that that lightbox

1267
01:10:04,699 --> 01:10:11,420
count is less than the maximum so

1268
01:10:08,479 --> 01:10:14,259
somewhere in there we've got a maximum

1269
01:10:11,420 --> 01:10:14,260
lightbox count

1270
01:10:25,930 --> 01:10:37,880
although I guess I don't know where

1271
01:10:29,569 --> 01:10:38,779
let's take a look so we push light data

1272
01:10:37,880 --> 01:10:41,180
widths

1273
01:10:38,779 --> 01:10:43,219
worth of light boxes on that doesn't

1274
01:10:41,180 --> 01:10:46,690
really make any sense anymore so I think

1275
01:10:43,220 --> 01:10:49,550
we kind of want that to be a different

1276
01:10:46,689 --> 01:10:51,679
piece of information the reason I say

1277
01:10:49,550 --> 01:10:53,590
that is because our reflection geometry

1278
01:10:51,680 --> 01:10:56,119
is no longer coupled with our lighting

1279
01:10:53,590 --> 01:11:01,029
output the number of light probes we

1280
01:10:56,119 --> 01:11:01,029
take so we really want like a light box

1281
01:11:02,710 --> 01:11:06,699
like a max light box count kind of a

1282
01:11:05,300 --> 01:11:10,789
thing right

1283
01:11:06,699 --> 01:11:13,010
and so this right here which is the

1284
01:11:10,789 --> 01:11:16,550
would be the number of light probes it's

1285
01:11:13,010 --> 01:11:20,329
gonna probably reduce dramatically and

1286
01:11:16,550 --> 01:11:27,320
this max light bat box count here is now

1287
01:11:20,329 --> 01:11:28,909
what we're using for our actual for to

1288
01:11:27,319 --> 01:11:31,759
determine what the maximum number of

1289
01:11:28,909 --> 01:11:34,369
actual colliders we can have for our ray

1290
01:11:31,760 --> 01:11:36,650
cast right so that's it's pretty

1291
01:11:34,369 --> 01:11:38,059
different then the old system used to be

1292
01:11:36,649 --> 01:11:41,119
where those two things were locked

1293
01:11:38,060 --> 01:11:43,160
together so if we take a look at our

1294
01:11:41,119 --> 01:11:45,739
light boxes now when we get one of those

1295
01:11:43,159 --> 01:11:48,199
out we don't need to fill out hardly as

1296
01:11:45,739 --> 01:11:50,539
much information as we used to it's a

1297
01:11:48,199 --> 01:11:52,399
lot simpler than it was if we go back to

1298
01:11:50,539 --> 01:11:56,180
the lighting box and we look at what

1299
01:11:52,399 --> 01:11:57,349
goes in there now we just have like the

1300
01:11:56,180 --> 01:12:01,010
child count probably have to get

1301
01:11:57,350 --> 01:12:03,620
initialized to zero but that box P is

1302
01:12:01,010 --> 01:12:05,000
just going to be the actual location the

1303
01:12:03,619 --> 01:12:08,539
box radius this is going to be the

1304
01:12:05,000 --> 01:12:13,159
actual radius and the ref P this is a

1305
01:12:08,539 --> 01:12:15,319
bit of an issue the ref P actually needs

1306
01:12:13,159 --> 01:12:20,420
a little more information than it quite

1307
01:12:15,319 --> 01:12:22,460
has the renderer texture in question we

1308
01:12:20,420 --> 01:12:26,750
kind of would like to have sampled from

1309
01:12:22,460 --> 01:12:29,060
that texture that's kind of the crazy

1310
01:12:26,750 --> 01:12:31,909
part right is that when we're doing this

1311
01:12:29,060 --> 01:12:34,190
sort of ray casting we almost want the

1312
01:12:31,909 --> 01:12:36,109
cubes themselves to have an additional

1313
01:12:34,189 --> 01:12:38,039
color that's information about it that

1314
01:12:36,109 --> 01:12:40,469
lets us know how we want to bounce that

1315
01:12:38,039 --> 01:12:42,659
laying around and that would normally we

1316
01:12:40,470 --> 01:12:48,470
would want that to come from this

1317
01:12:42,659 --> 01:12:51,569
particular from this texture right and

1318
01:12:48,470 --> 01:12:54,600
so we sort of have a latent to do in

1319
01:12:51,569 --> 01:12:59,009
here which is that the texture should

1320
01:12:54,600 --> 01:13:00,990
have the information in it about what

1321
01:12:59,010 --> 01:13:03,300
its reflectivity is and currently

1322
01:13:00,989 --> 01:13:10,289
doesn't and so that's a little bit of an

1323
01:13:03,300 --> 01:13:13,020
issue if we go to render or texture we

1324
01:13:10,289 --> 01:13:14,850
have an index in there that tells us

1325
01:13:13,020 --> 01:13:16,890
which index it is on the graphics card

1326
01:13:14,850 --> 01:13:19,140
and what we probably need to do is have

1327
01:13:16,890 --> 01:13:22,590
the asset system also be able to look up

1328
01:13:19,140 --> 01:13:24,690
the general reflectivity of whatever

1329
01:13:22,590 --> 01:13:28,770
that texture is so I'm gonna just

1330
01:13:24,689 --> 01:13:32,189
proactively save because I can and am

1331
01:13:28,770 --> 01:13:34,890
going to that we're going to store the

1332
01:13:32,189 --> 01:13:38,399
texture index into the lighting box

1333
01:13:34,890 --> 01:13:43,560
structure now so that we can add texture

1334
01:13:38,399 --> 01:13:48,629
lookups in there in a sane way if I just

1335
01:13:43,560 --> 01:13:53,520
imagine this happening right that would

1336
01:13:48,630 --> 01:13:55,949
store the information in question so I'm

1337
01:13:53,520 --> 01:14:03,630
gonna go ahead and do that as well and

1338
01:13:55,949 --> 01:14:06,149
that's just this right alright so the

1339
01:14:03,630 --> 01:14:08,489
reference color can just get passed as

1340
01:14:06,149 --> 01:14:10,710
the actual color the emission is the

1341
01:14:08,489 --> 01:14:12,359
emission and then that's the full thing

1342
01:14:10,710 --> 01:14:15,029
like there's nothing else to fill out we

1343
01:14:12,359 --> 01:14:17,519
can get rid of the first child index as

1344
01:14:15,029 --> 01:14:19,590
well but we don't really need to so it's

1345
01:14:17,520 --> 01:14:24,900
unclear to what extent this actually has

1346
01:14:19,590 --> 01:14:31,260
to happen these here all of that stuff

1347
01:14:24,899 --> 01:14:35,960
is probably fine let's see we missed one

1348
01:14:31,260 --> 01:14:35,960
color we just need that

1349
01:14:39,569 --> 01:14:44,880
all right so now we're sending down the

1350
01:14:42,090 --> 01:14:46,529
light boxes and presumably the system

1351
01:14:44,880 --> 01:14:49,469
can still continue to function pretty

1352
01:14:46,529 --> 01:14:51,359
much the way that it was and we can

1353
01:14:49,469 --> 01:14:54,480
still raycast against those light boxes

1354
01:14:51,359 --> 01:14:56,069
the only difference now is that when

1355
01:14:54,479 --> 01:14:57,828
we're a cast against those light boxes

1356
01:14:56,069 --> 01:15:00,090
we're not storing the information

1357
01:14:57,828 --> 01:15:03,210
anywhere like we're not actually doing

1358
01:15:00,090 --> 01:15:06,659
anything with it right like if we go

1359
01:15:03,210 --> 01:15:11,010
back and look at the at the lighting

1360
01:15:06,658 --> 01:15:18,149
system when we actually were doing the

1361
01:15:11,010 --> 01:15:20,489
light propagation mm which is here if we

1362
01:15:18,149 --> 01:15:22,979
actually reenable the compute light

1363
01:15:20,488 --> 01:15:24,388
propagation stuff oops that's not the

1364
01:15:22,979 --> 01:15:25,919
one I was talking about that's not the

1365
01:15:24,389 --> 01:15:30,179
worker thread where's the worker thread

1366
01:15:25,920 --> 01:15:32,039
here it is so when we were actually

1367
01:15:30,179 --> 01:15:35,670
calling this what you can see here is

1368
01:15:32,039 --> 01:15:39,118
what we do when we actually you know we

1369
01:15:35,670 --> 01:15:41,489
cast array what we actually do when we

1370
01:15:39,118 --> 01:15:44,578
cast these rays is the result of the

1371
01:15:41,488 --> 01:15:48,799
Rays was getting distributed out to the

1372
01:15:44,578 --> 01:15:51,029
lighting points that from whence we

1373
01:15:48,800 --> 01:15:53,010
emanated the Ray right we're basically

1374
01:15:51,029 --> 01:15:55,769
doing like a transfer and energy

1375
01:15:53,010 --> 01:15:58,710
transfer there and that stuff just wants

1376
01:15:55,770 --> 01:16:00,869
to go away entirely right we just don't

1377
01:15:58,710 --> 01:16:03,328
want like this surface point stuff just

1378
01:16:00,868 --> 01:16:05,368
needs to go away entirely and what we'd

1379
01:16:03,328 --> 01:16:08,269
like to do is we'd like to have this ray

1380
01:16:05,368 --> 01:16:12,210
tracing process have built into it that

1381
01:16:08,270 --> 01:16:15,900
it's sampling from a particular point of

1382
01:16:12,210 --> 01:16:17,698
the light probe like every ray has a

1383
01:16:15,899 --> 01:16:20,368
destination it's supposed to write back

1384
01:16:17,698 --> 01:16:21,689
to and when it hits something it just

1385
01:16:20,368 --> 01:16:23,969
writes it back to the correct location

1386
01:16:21,689 --> 01:16:27,719
and again that's why I said I think we

1387
01:16:23,969 --> 01:16:33,868
can speed things up as well because once

1388
01:16:27,719 --> 01:16:36,118
we are once we're actually using boxes

1389
01:16:33,868 --> 01:16:38,059
more intelligently we shouldn't have to

1390
01:16:36,118 --> 01:16:41,130
worry about that

1391
01:16:38,060 --> 01:16:45,289
that Finnick enos of like which point

1392
01:16:41,130 --> 01:16:45,289
specifically we were looking at right

1393
01:16:47,100 --> 01:16:51,270
so that's one thing another thing we

1394
01:16:49,170 --> 01:16:53,130
could consider doing here and I do think

1395
01:16:51,270 --> 01:16:55,800
this maybe would make things easier for

1396
01:16:53,130 --> 01:16:57,840
us is if you take a look at what happens

1397
01:16:55,800 --> 01:17:00,600
here look at how much work we're doing

1398
01:16:57,840 --> 01:17:07,260
for looking at box surface indexes on

1399
01:17:00,600 --> 01:17:10,680
collision right and so if we actually if

1400
01:17:07,260 --> 01:17:14,820
the textures actually got like let's

1401
01:17:10,680 --> 01:17:18,450
suppose like in here when the textures

1402
01:17:14,819 --> 01:17:22,229
are getting rolled in here if instead we

1403
01:17:18,449 --> 01:17:25,800
just said the color of the box here we

1404
01:17:22,229 --> 01:17:28,199
pre compute what the texture modulated

1405
01:17:25,800 --> 01:17:32,550
box color is and we just use one color

1406
01:17:28,199 --> 01:17:36,689
per box right so we don't store colors

1407
01:17:32,550 --> 01:17:39,840
for each side of the cube that seems

1408
01:17:36,689 --> 01:17:43,439
kind of compelling right that way when

1409
01:17:39,840 --> 01:17:46,380
we do our hit test this crap doesn't

1410
01:17:43,439 --> 01:17:50,659
have to happen right there's just a lot

1411
01:17:46,380 --> 01:17:50,659
of work going on here you know

1412
01:17:55,519 --> 01:18:01,420
good and I really don't know if we need

1413
01:17:58,729 --> 01:18:01,419
that to happen

1414
01:18:14,248 --> 01:18:21,908
now we do have one problem which is when

1415
01:18:17,889 --> 01:18:23,708
your raycasting against boxes you do

1416
01:18:21,908 --> 01:18:28,058
have to figure out which side of the box

1417
01:18:23,708 --> 01:18:31,179
you hit right and we could argue that

1418
01:18:28,059 --> 01:18:33,429
maybe what we want is not really boxes

1419
01:18:31,179 --> 01:18:34,569
but we actually want our quads to just

1420
01:18:33,429 --> 01:18:39,458
be the primitives we've rate race

1421
01:18:34,569 --> 01:18:41,828
against but I don't think so because I

1422
01:18:39,458 --> 01:18:44,498
think that's gonna be more expensive so

1423
01:18:41,828 --> 01:18:46,509
it is true that yeah in general I

1424
01:18:44,498 --> 01:18:50,378
suppose when we're looking at our

1425
01:18:46,510 --> 01:18:53,829
masking operations there it does kind of

1426
01:18:50,378 --> 01:18:57,479
look like you know this box surface

1427
01:18:53,828 --> 01:19:01,529
index this part here we could save that

1428
01:18:57,479 --> 01:19:07,708
and that does save three instructions

1429
01:19:01,529 --> 01:19:07,708
from each of those passes right

1430
01:19:17,529 --> 01:19:25,969
although looking at it here that mask

1431
01:19:21,050 --> 01:19:28,460
does the selection hmm actually it looks

1432
01:19:25,970 --> 01:19:30,280
like I'm wrong about that it looks like

1433
01:19:28,460 --> 01:19:34,510
actually we can remove the whole thing

1434
01:19:30,279 --> 01:19:38,659
because it looks like we only update the

1435
01:19:34,510 --> 01:19:42,409
the distance based on a select with mask

1436
01:19:38,659 --> 01:19:49,069
which we already computed so again yeah

1437
01:19:42,409 --> 01:19:56,029
like if we were to do this right all of

1438
01:19:49,069 --> 01:19:59,299
that computation would go away like all

1439
01:19:56,029 --> 01:20:03,259
of that and that's pretty compelling

1440
01:19:59,300 --> 01:20:06,380
because that is a huge amount of work on

1441
01:20:03,260 --> 01:20:13,250
every ray hit that we would no longer

1442
01:20:06,380 --> 01:20:17,420
have to do you know I'm saying so that's

1443
01:20:13,250 --> 01:20:20,319
pretty compelling that feels pretty

1444
01:20:17,420 --> 01:20:20,319
compelling to me

1445
01:20:28,640 --> 01:20:32,670
that feels pretty compelling to me that

1446
01:20:31,199 --> 01:20:36,420
seems like that saves a lot of time

1447
01:20:32,670 --> 01:20:38,460
right and since you know basically all

1448
01:20:36,420 --> 01:20:42,840
we would have to do for that is just say

1449
01:20:38,460 --> 01:20:44,520
look boxes just have one color so if you

1450
01:20:42,840 --> 01:20:47,119
want higher fidelity lighting the mat

1451
01:20:44,520 --> 01:20:50,520
you got to add more than one box right

1452
01:20:47,119 --> 01:20:53,760
what you can do if you want to you can

1453
01:20:50,520 --> 01:20:56,130
break a single cube up into multiple sub

1454
01:20:53,760 --> 01:20:59,280
boxes that have different colors in

1455
01:20:56,130 --> 01:21:02,520
different locations you could do that

1456
01:20:59,279 --> 01:21:04,469
and I think for most of the time since

1457
01:21:02,520 --> 01:21:06,330
you're usually only bouncing lighting in

1458
01:21:04,470 --> 01:21:08,159
an important way off of one of the

1459
01:21:06,329 --> 01:21:11,309
phases usually like is used to create

1460
01:21:08,159 --> 01:21:14,430
like the world and I don't know that I

1461
01:21:11,310 --> 01:21:17,180
don't know that we really need to do

1462
01:21:14,430 --> 01:21:17,180
much more than that

1463
01:21:31,210 --> 01:21:39,069
so I'm thinking that probably should

1464
01:21:34,569 --> 01:21:42,738
should get removed and box surface index

1465
01:21:39,069 --> 01:21:44,448
which you know is is the stuff that

1466
01:21:42,738 --> 01:21:51,229
needs to sort of operate off of all of

1467
01:21:44,448 --> 01:21:59,299
this that seems like something we would

1468
01:21:51,229 --> 01:22:02,359
like to just get rid of uh so that's

1469
01:21:59,300 --> 01:22:06,260
good I mean that would really pretty

1470
01:22:02,359 --> 01:22:10,399
dramatically reduce that count there I

1471
01:22:06,260 --> 01:22:14,630
don't know why this is still compiled in

1472
01:22:10,399 --> 01:22:21,979
in like this this should be an if

1473
01:22:14,630 --> 01:22:24,640
developer kind of a thing for sure but

1474
01:22:21,979 --> 01:22:24,639
that looks pretty good

1475
01:22:29,689 --> 01:22:34,009
I mean that looks like it saves a

1476
01:22:32,090 --> 01:22:36,319
tremendous number of operations from

1477
01:22:34,010 --> 01:22:38,840
every race hit now granted it doesn't

1478
01:22:36,319 --> 01:22:45,130
really save any operations in the case

1479
01:22:38,840 --> 01:22:48,980
where you were testing a like a route a

1480
01:22:45,130 --> 01:22:50,539
interior node a non-terminal so when

1481
01:22:48,979 --> 01:22:54,169
we're walking the bounding hierarchy

1482
01:22:50,539 --> 01:22:56,569
doesn't really help us because we never

1483
01:22:54,170 --> 01:22:59,480
get to that part we weren't looking at

1484
01:22:56,569 --> 01:23:00,409
which space of the cube you hit when you

1485
01:22:59,479 --> 01:23:02,869
had children

1486
01:23:00,409 --> 01:23:05,750
that you should have gotten down to a

1487
01:23:02,869 --> 01:23:08,840
lower level of so it doesn't really

1488
01:23:05,750 --> 01:23:10,729
speed that up but it does speed up the

1489
01:23:08,840 --> 01:23:12,890
case where you were hitting boxes at the

1490
01:23:10,729 --> 01:23:14,479
low level and since the lowest level of

1491
01:23:12,890 --> 01:23:16,970
the tree is where most of the boxes are

1492
01:23:14,479 --> 01:23:19,489
that's probably nothing to sneeze at

1493
01:23:16,970 --> 01:23:24,490
right there probably was a lot of time

1494
01:23:19,489 --> 01:23:24,489
being spent in this box surface index

1495
01:23:25,720 --> 01:23:33,289
retrieval like or computation I should

1496
01:23:28,250 --> 01:23:38,020
say so yeah you know I'm gonna say

1497
01:23:33,289 --> 01:23:38,019
that's possibly good possibly important

1498
01:23:54,180 --> 01:23:58,840
yeah I'm gonna say that's that's pretty

1499
01:23:56,649 --> 01:24:01,389
good now one of the things I'm not 100%

1500
01:23:58,840 --> 01:24:09,520
sure about when I'm looking at this code

1501
01:24:01,390 --> 01:24:12,070
is we do say in there if all of the so

1502
01:24:09,520 --> 01:24:14,350
that you can see this line of code here

1503
01:24:12,069 --> 01:24:19,000
it says if all of the mask values are

1504
01:24:14,350 --> 01:24:21,880
true that means if every Rea this is a

1505
01:24:19,000 --> 01:24:25,810
packet tracer right so it's tracing for

1506
01:24:21,880 --> 01:24:29,770
rays at a time if all of the four rays

1507
01:24:25,810 --> 01:24:36,720
that it's tracing at a time all were

1508
01:24:29,770 --> 01:24:36,720
I guess further away

1509
01:24:37,109 --> 01:24:44,259
let's see T valid and T min is less than

1510
01:24:41,979 --> 01:24:47,829
result T right no sorry they're all

1511
01:24:44,260 --> 01:24:55,030
closer so if everything if all of the

1512
01:24:47,829 --> 01:24:57,390
rays in the entire packet hit this box I

1513
01:24:55,029 --> 01:24:57,389
guess

1514
01:25:06,448 --> 01:25:18,958
then it stops looping but I don't

1515
01:25:11,969 --> 01:25:22,158
understand why like is that actually

1516
01:25:18,958 --> 01:25:22,158
valid or it's not just a bug

1517
01:25:39,889 --> 01:25:49,940
I don't see it do you guys see it so we

1518
01:25:47,779 --> 01:25:51,198
have a Rea origin in a raid errection

1519
01:25:49,939 --> 01:25:53,029
coming in here and we're basically

1520
01:25:51,198 --> 01:25:55,698
telling this thing here's the lighting

1521
01:25:53,029 --> 01:25:59,448
work structure right we're basically

1522
01:25:55,698 --> 01:26:04,009
telling this thing hey we've got a stack

1523
01:25:59,448 --> 01:26:08,059
of boxes here and we're taking a box off

1524
01:26:04,010 --> 01:26:12,110
of the stack and we're going to test all

1525
01:26:08,060 --> 01:26:14,060
of that boxes children so we loop

1526
01:26:12,109 --> 01:26:17,839
through the children right I mean this

1527
01:26:14,060 --> 01:26:20,679
is what we're fundamentally doing and

1528
01:26:17,840 --> 01:26:23,840
we've got a mask that we're testing here

1529
01:26:20,679 --> 01:26:28,340
to see whether we can stop and stop

1530
01:26:23,840 --> 01:26:30,619
considering children so what are we like

1531
01:26:28,340 --> 01:26:32,719
how are we making the determination that

1532
01:26:30,618 --> 01:26:35,000
we don't need to test any more of the

1533
01:26:32,719 --> 01:26:42,130
children here we're looking to see

1534
01:26:35,000 --> 01:26:42,130
whether or not the the hit value right

1535
01:26:45,189 --> 01:26:58,448
whether the hit value is valid and less

1536
01:26:53,539 --> 01:26:58,448
than the closest hit

1537
01:27:07,179 --> 01:27:13,630
and I just don't see why that would be a

1538
01:27:09,789 --> 01:27:22,920
termination condition I can see okay so

1539
01:27:13,630 --> 01:27:26,159
like if I I don't I don't kind of see it

1540
01:27:22,920 --> 01:27:29,158
look you have to test all the children

1541
01:27:26,158 --> 01:27:29,158
right

1542
01:27:33,198 --> 01:27:42,889
I mean III don't I don't see how you

1543
01:27:36,800 --> 01:27:43,340
cannot it just it just doesn't make any

1544
01:27:42,890 --> 01:27:52,820
sense

1545
01:27:43,340 --> 01:27:59,449
I mean does anyone out there I guess

1546
01:27:52,819 --> 01:28:02,590
I'll ask the chat I have a box it's got

1547
01:27:59,448 --> 01:28:07,819
some number of children inside of it

1548
01:28:02,590 --> 01:28:11,449
when I'm hit testing I don't have any

1549
01:28:07,819 --> 01:28:13,759
real way of knowing those those children

1550
01:28:11,448 --> 01:28:16,698
in there aren't sorted in any other way

1551
01:28:13,760 --> 01:28:22,699
right there are just boxes there inside

1552
01:28:16,698 --> 01:28:24,649
this box so I don't know and I'm not

1553
01:28:22,698 --> 01:28:26,000
like sorting them by the REA direction

1554
01:28:24,649 --> 01:28:27,649
or something in here so I don't even

1555
01:28:26,000 --> 01:28:33,350
know which direction I'm passing through

1556
01:28:27,649 --> 01:28:35,059
this box so I can't know when I'm done

1557
01:28:33,350 --> 01:28:40,989
testing children because the children

1558
01:28:35,060 --> 01:28:40,989
could have been anywhere so just because

1559
01:28:46,899 --> 01:28:59,210
just because I had all of the rays hit

1560
01:28:53,800 --> 01:29:02,380
one of these things why why does that

1561
01:28:59,210 --> 01:29:02,380
stop the traversal

1562
01:29:09,969 --> 01:29:20,118
anyone is this just a bug that we've had

1563
01:29:13,340 --> 01:29:21,860
in the lighting system anyone in chat am

1564
01:29:20,118 --> 01:29:23,899
I being stupid here but I don't think I

1565
01:29:21,859 --> 01:29:25,880
am I think that's just wrong because I

1566
01:29:23,899 --> 01:29:29,539
don't see how you could stop iterating

1567
01:29:25,880 --> 01:29:31,760
over the children of the box until

1568
01:29:29,539 --> 01:29:35,170
you've tested all of them they they all

1569
01:29:31,760 --> 01:29:39,409
might fail I'm sorry they all might

1570
01:29:35,170 --> 01:29:43,130
produce a better hit so any kit you have

1571
01:29:39,408 --> 01:29:44,960
might not be the closest and at that

1572
01:29:43,130 --> 01:29:48,109
point you're kind of in a situation

1573
01:29:44,960 --> 01:29:49,239
where you're not returning an accurate

1574
01:29:48,109 --> 01:29:52,848
lighting result here

1575
01:29:49,238 --> 01:29:56,328
so saying that everything is true in the

1576
01:29:52,849 --> 01:30:04,369
mask so what like why does that that

1577
01:29:56,328 --> 01:30:07,269
doesn't help you look I don't see how

1578
01:30:04,368 --> 01:30:07,269
that helps you at all

1579
01:30:36,149 --> 01:30:46,099
that just seems like garbage I'm gonna

1580
01:30:43,380 --> 01:30:46,100
put you on this

1581
01:31:17,639 --> 01:31:25,719
but this is just gonna have to go away

1582
01:31:19,779 --> 01:31:30,399
entirely and in terms of total partition

1583
01:31:25,719 --> 01:31:32,579
leaves used I assume we might as well

1584
01:31:30,399 --> 01:31:35,679
still tract that piece of information

1585
01:31:32,579 --> 01:31:42,279
because you know if we were trying to

1586
01:31:35,679 --> 01:31:46,239
count that is accurate right but I just

1587
01:31:42,279 --> 01:31:48,399
I don't know I don't understand why that

1588
01:31:46,238 --> 01:31:51,158
was in there and I also don't understand

1589
01:31:48,399 --> 01:31:53,109
why like I don't understand why this was

1590
01:31:51,158 --> 01:31:54,670
only counted during an all true case

1591
01:31:53,109 --> 01:31:58,179
because the total number of perdition

1592
01:31:54,670 --> 01:32:01,989
leaves that you used is actually 100%

1593
01:31:58,179 --> 01:32:04,690
dependent on any one of those lanes you

1594
01:32:01,988 --> 01:32:08,169
used the partition if any of the lanes

1595
01:32:04,689 --> 01:32:11,469
hit it doesn't matter if you only hit in

1596
01:32:08,170 --> 01:32:13,840
one you don't hit in all four to use the

1597
01:32:11,469 --> 01:32:19,029
partition so this code just looks like

1598
01:32:13,840 --> 01:32:23,710
complete crap and I think we just had a

1599
01:32:19,029 --> 01:32:29,859
bug in there which probably contributed

1600
01:32:23,710 --> 01:32:31,750
to our noise so that that's not good

1601
01:32:29,859 --> 01:32:34,719
like that was not good I'm pretty sure

1602
01:32:31,750 --> 01:32:39,520
that was a bad situation that shouldn't

1603
01:32:34,719 --> 01:32:41,439
have been happening I'm pretty sure but

1604
01:32:39,520 --> 01:32:43,330
we'll see when the vod's go up for this

1605
01:32:41,439 --> 01:32:45,098
and some people take a closer look at it

1606
01:32:43,329 --> 01:32:47,559
you know maybe someone be like no no no

1607
01:32:45,099 --> 01:32:49,119
no go back to when you implemented it

1608
01:32:47,560 --> 01:32:51,070
here it you had a good reason and it

1609
01:32:49,118 --> 01:32:54,569
works okay I'm like all right but that

1610
01:32:51,069 --> 01:32:56,469
just looks that looks like crap to me

1611
01:32:54,569 --> 01:32:59,109
it's there

1612
01:32:56,469 --> 01:33:00,819
there probably are ways you can early

1613
01:32:59,109 --> 01:33:03,460
out of this loop but they're probably

1614
01:33:00,819 --> 01:33:04,689
not related to that because they would

1615
01:33:03,460 --> 01:33:06,069
have to have something to do with

1616
01:33:04,689 --> 01:33:08,500
whether or not you could determine

1617
01:33:06,069 --> 01:33:11,380
definitively that you are never going to

1618
01:33:08,500 --> 01:33:14,380
hit another box earlier than this box

1619
01:33:11,380 --> 01:33:17,949
like for example if you determined that

1620
01:33:14,380 --> 01:33:20,289
the hits were all at the min value of

1621
01:33:17,948 --> 01:33:23,529
the parent cube

1622
01:33:20,289 --> 01:33:25,630
then you would know that no other child

1623
01:33:23,529 --> 01:33:28,329
could be could have been closer anyway

1624
01:33:25,630 --> 01:33:29,800
and so that's an early out condition

1625
01:33:28,329 --> 01:33:31,899
that would be valid I don't think it's

1626
01:33:29,800 --> 01:33:34,800
one that would happen very often so I'm

1627
01:33:31,899 --> 01:33:37,989
pretty sure you don't really care but

1628
01:33:34,800 --> 01:33:40,480
you know if we had been testing that I

1629
01:33:37,989 --> 01:33:42,579
would have said sure but we're not we're

1630
01:33:40,479 --> 01:33:46,269
testing just strictly whether or not

1631
01:33:42,579 --> 01:33:48,489
we've got hits and hits are not really

1632
01:33:46,270 --> 01:33:53,530
dispositive in this case so that doesn't

1633
01:33:48,489 --> 01:33:55,119
seem useful so anyway if we were to

1634
01:33:53,529 --> 01:33:57,130
assume going back to what we were

1635
01:33:55,119 --> 01:33:59,019
actually working on here if we were to

1636
01:33:57,130 --> 01:34:01,420
assume that we were to eliminate the box

1637
01:33:59,020 --> 01:34:02,890
surface index and so the only thing that

1638
01:34:01,420 --> 01:34:05,289
we really know when we get back a

1639
01:34:02,890 --> 01:34:11,610
raycast result is which box index it was

1640
01:34:05,289 --> 01:34:11,609
I when we hit it and if we hit it right

1641
01:34:11,699 --> 01:34:17,590
that's a more sane way to do the raycast

1642
01:34:14,829 --> 01:34:19,180
what I don't necessarily know as far as

1643
01:34:17,590 --> 01:34:22,119
the box service and next part of things

1644
01:34:19,180 --> 01:34:25,210
goes is when we do this rate cast do we

1645
01:34:22,119 --> 01:34:27,760
actually care about that or do we just

1646
01:34:25,210 --> 01:34:31,600
want to know what the color was right do

1647
01:34:27,760 --> 01:34:33,670
we actually need to store a box index

1648
01:34:31,600 --> 01:34:41,980
here or can we just send back a color

1649
01:34:33,670 --> 01:34:44,770
value like an RGB and use that right and

1650
01:34:41,979 --> 01:34:47,319
it may be that it's just more efficient

1651
01:34:44,770 --> 01:34:49,180
to like return back the index but I

1652
01:34:47,319 --> 01:34:51,579
don't think that it is because that

1653
01:34:49,180 --> 01:34:54,579
index is like a split lookup thing that

1654
01:34:51,579 --> 01:34:57,579
has to happen which is not great you

1655
01:34:54,579 --> 01:35:00,880
know what I mean and so I kind of think

1656
01:34:57,579 --> 01:35:02,739
that you know modifying this raycast it

1657
01:35:00,880 --> 01:35:05,650
would be nice to sort of change it to

1658
01:35:02,739 --> 01:35:09,399
something where it's like if the raycast

1659
01:35:05,649 --> 01:35:12,789
never needs to look at who calls it if

1660
01:35:09,399 --> 01:35:16,989
the raycast never actually needs the

1661
01:35:12,789 --> 01:35:18,189
sampling out of it so this is alright so

1662
01:35:16,989 --> 01:35:22,149
first of all this is only place we call

1663
01:35:18,189 --> 01:35:26,619
it so if this thing never needed to do

1664
01:35:22,149 --> 01:35:29,439
all this garbage right this is really

1665
01:35:26,619 --> 01:35:31,449
expensive and it's crap right and the

1666
01:35:29,439 --> 01:35:36,059
reason that it had to happen was because

1667
01:35:31,449 --> 01:35:36,059
we were casting off of

1668
01:35:36,180 --> 01:35:41,800
boxes and we had to see like whit when

1669
01:35:39,250 --> 01:35:45,220
we hit a box we had to see like what the

1670
01:35:41,800 --> 01:35:48,100
color was at that point on the box we

1671
01:35:45,220 --> 01:35:50,650
don't really want to do that anymore so

1672
01:35:48,100 --> 01:35:59,860
I'm imagining that probably the right

1673
01:35:50,649 --> 01:36:02,199
thing to do is to is to do the right we

1674
01:35:59,859 --> 01:36:07,089
what we want to do here right is we want

1675
01:36:02,199 --> 01:36:08,529
to do the lookup of the okay yeah as I'm

1676
01:36:07,090 --> 01:36:11,829
saying it I can kind of see why this is

1677
01:36:08,529 --> 01:36:13,389
a problem so we definitely don't need to

1678
01:36:11,829 --> 01:36:16,180
send back the box index

1679
01:36:13,390 --> 01:36:18,010
I don't think all we need to know is the

1680
01:36:16,180 --> 01:36:20,320
point so we just need to know the

1681
01:36:18,010 --> 01:36:25,150
location where we hit and we already

1682
01:36:20,319 --> 01:36:27,039
have that it's this right so then what

1683
01:36:25,149 --> 01:36:30,059
we actually do need to do is based on

1684
01:36:27,039 --> 01:36:33,220
that position we then do need to do our

1685
01:36:30,060 --> 01:36:36,640
indexing into the voxel and to produce

1686
01:36:33,220 --> 01:36:39,130
the averaged color based on light probes

1687
01:36:36,640 --> 01:36:41,829
so we do actually need to know at that

1688
01:36:39,130 --> 01:36:45,039
point when we shade that location on the

1689
01:36:41,829 --> 01:36:48,489
surface we would need to know that so we

1690
01:36:45,039 --> 01:36:50,619
do need to know I'm normal I guess as

1691
01:36:48,489 --> 01:36:55,689
well if we're trying to shade from that

1692
01:36:50,619 --> 01:36:58,630
surface and so although we don't need to

1693
01:36:55,689 --> 01:37:01,000
risk record the box surface index one

1694
01:36:58,630 --> 01:37:05,529
nasty part is that does mean we may need

1695
01:37:01,000 --> 01:37:09,329
to still do a little bit of work to

1696
01:37:05,529 --> 01:37:17,309
determine which direction we were facing

1697
01:37:09,329 --> 01:37:20,739
so I think we may need that

1698
01:37:17,310 --> 01:37:23,920
unfortunately as much as I wish we

1699
01:37:20,739 --> 01:37:26,109
didn't and so if we go back here and

1700
01:37:23,920 --> 01:37:34,449
take a look at that piece of the code

1701
01:37:26,109 --> 01:37:36,369
right you can see in here where we're

1702
01:37:34,449 --> 01:37:38,229
sort of like alright this was how we

1703
01:37:36,369 --> 01:37:40,989
were assembling the box surface so next

1704
01:37:38,229 --> 01:37:44,529
before the question is is there any way

1705
01:37:40,989 --> 01:37:46,630
that we can get without having to go

1706
01:37:44,529 --> 01:37:48,099
through all of that garbage that we can

1707
01:37:46,630 --> 01:37:51,489
get the shading normal out

1708
01:37:48,099 --> 01:37:55,690
right and you can kind of see here where

1709
01:37:51,488 --> 01:37:58,689
we've produced the information for the

1710
01:37:55,689 --> 01:38:18,488
hit we did it by kind of going through

1711
01:37:58,689 --> 01:38:20,078
and selecting yeah so when we kind of

1712
01:38:18,488 --> 01:38:21,908
come through here the problem that we're

1713
01:38:20,078 --> 01:38:25,988
gonna end up with the problem that we

1714
01:38:21,908 --> 01:38:28,149
end up having is we do want just the

1715
01:38:25,988 --> 01:38:30,309
normal to be stored and we don't really

1716
01:38:28,149 --> 01:38:32,500
want to have like this information tells

1717
01:38:30,310 --> 01:38:34,270
us which box surface we were on so

1718
01:38:32,500 --> 01:38:36,039
obviously that would tell you the normal

1719
01:38:34,270 --> 01:38:37,960
but it would be nice if we could figure

1720
01:38:36,039 --> 01:38:40,539
out a way to get the normal out better

1721
01:38:37,960 --> 01:38:42,760
right something that didn't require as

1722
01:38:40,539 --> 01:38:44,859
much work because you can look in here

1723
01:38:42,760 --> 01:38:49,449
when we determine whether or not we hit

1724
01:38:44,859 --> 01:38:52,769
the box just using that team in T Max

1725
01:38:49,448 --> 01:38:52,769
value there

1726
01:39:08,869 --> 01:39:17,180
it feels like there should be some way

1727
01:39:12,689 --> 01:39:17,179
of doing the same process

1728
01:39:21,520 --> 01:39:24,940
you know what I mean

1729
01:39:29,368 --> 01:39:37,748
we create the tee box men and tee box

1730
01:39:32,800 --> 01:39:40,119
max by taking the Ray direction and

1731
01:39:37,748 --> 01:39:42,698
figuring out how far we have to go to

1732
01:39:40,118 --> 01:39:45,219
hit this close side of the box and how

1733
01:39:42,698 --> 01:39:48,688
far we have to go to hit the far side of

1734
01:39:45,219 --> 01:39:48,689
the box right

1735
01:39:56,369 --> 01:40:02,890
and then using min and Max we determine

1736
01:40:00,310 --> 01:40:08,039
which one of those will occur first and

1737
01:40:02,890 --> 01:40:08,039
second you know that's all we're doing

1738
01:40:09,869 --> 01:40:30,380
I guess what we could say this is a

1739
01:40:22,109 --> 01:40:35,670
tough one I guess what we could say is

1740
01:40:30,380 --> 01:40:50,180
that the comparison between t-box min

1741
01:40:35,670 --> 01:40:50,180
and T Box max would tell us which

1742
01:40:55,119 --> 01:41:10,750
it would tell us which one of those two

1743
01:40:57,760 --> 01:41:12,430
we were doing and then I hmm we're gonna

1744
01:41:10,750 --> 01:41:14,350
have to work out some math for this one

1745
01:41:12,430 --> 01:41:17,050
I think this might have to wait until

1746
01:41:14,350 --> 01:41:22,660
next weekend but I'm just thinking about

1747
01:41:17,050 --> 01:41:26,110
it and I'm like it feels like we should

1748
01:41:22,659 --> 01:41:31,420
be able to get that directly so that

1749
01:41:26,109 --> 01:41:36,699
when we get in a true hit here it feels

1750
01:41:31,420 --> 01:41:44,770
like we should be able to do something

1751
01:41:36,699 --> 01:41:47,139
here that allows us that allows us to

1752
01:41:44,770 --> 01:41:51,210
compute this without actually having to

1753
01:41:47,140 --> 01:41:54,570
compute the index of which face was hit

1754
01:41:51,210 --> 01:41:54,569
you know what I mean

1755
01:41:56,369 --> 01:42:03,760
it it feels to me like there's some way

1756
01:42:00,130 --> 01:42:10,180
we can do that and if you think about it

1757
01:42:03,760 --> 01:42:12,460
we know because we know like we can do

1758
01:42:10,180 --> 01:42:15,850
this comparison ourselves if we want to

1759
01:42:12,460 --> 01:42:16,270
write meaning we can do we still have t

1760
01:42:15,850 --> 01:42:20,380
box

1761
01:42:16,270 --> 01:42:28,270
minty box max right so we can do this

1762
01:42:20,380 --> 01:42:30,190
comparison we can say produce a mask for

1763
01:42:28,270 --> 01:42:32,140
me that tells me where you picked the

1764
01:42:30,189 --> 01:42:35,529
minimum and where you picked the maximum

1765
01:42:32,140 --> 01:42:38,920
right you know which lanes hit on the

1766
01:42:35,529 --> 01:42:40,719
men and which lanes hit on the max when

1767
01:42:38,920 --> 01:42:44,670
I know whether you hit the min or the

1768
01:42:40,720 --> 01:42:48,820
max right when I know which one you did

1769
01:42:44,670 --> 01:42:52,000
then I know I have information about

1770
01:42:48,819 --> 01:42:54,609
where the Ray was coming relative to the

1771
01:42:52,000 --> 01:42:58,270
box so I know whether it's hitting am

1772
01:42:54,609 --> 01:43:01,359
inside so a negative facing normal like

1773
01:42:58,270 --> 01:43:05,050
if you hit the tee box min right then

1774
01:43:01,359 --> 01:43:07,509
it's a negative facing normal if you hit

1775
01:43:05,050 --> 01:43:08,159
the tee box max it's a positive facing

1776
01:43:07,510 --> 01:43:12,270
normal

1777
01:43:08,158 --> 01:43:15,719
right so I know whether it's a plus one

1778
01:43:12,270 --> 01:43:19,650
or a negative one just by this I think

1779
01:43:15,719 --> 01:43:23,250
and so then the only question is which

1780
01:43:19,649 --> 01:43:31,170
of the three sides was the one that you

1781
01:43:23,250 --> 01:43:34,969
hit was it X Y or Z and so how are we

1782
01:43:31,170 --> 01:43:34,969
determining that here

1783
01:43:46,368 --> 01:43:55,809
ah okay so it's this process here that's

1784
01:43:52,010 --> 01:44:05,980
determining that right whether X Y or Z

1785
01:43:55,810 --> 01:44:05,980
was least that's what's determining it .

1786
01:44:07,300 --> 01:44:15,070
so in theory at least

1787
01:44:22,010 --> 01:44:38,869
in theory it would look something like

1788
01:44:25,118 --> 01:44:47,719
this so T min equals T min X you just

1789
01:44:38,868 --> 01:44:49,219
double-check my assumptions here so the

1790
01:44:47,719 --> 01:44:51,649
team in here right

1791
01:44:49,219 --> 01:44:55,300
which of these three it equals that

1792
01:44:51,649 --> 01:45:02,138
tells you which axis it is right and

1793
01:44:55,300 --> 01:45:13,219
then whether or not it this right here

1794
01:45:02,139 --> 01:45:16,690
that would tell you which whether it was

1795
01:45:13,219 --> 01:45:16,689
positive or negative

1796
01:45:31,090 --> 01:45:36,560
so with those four comparisons you

1797
01:45:34,939 --> 01:45:39,319
definitely have all of the information

1798
01:45:36,560 --> 01:45:43,880
you need and so you could use a select

1799
01:45:39,319 --> 01:45:47,779
at that point to produce the normal by

1800
01:45:43,880 --> 01:45:49,340
doing for comparisons and a bunch of

1801
01:45:47,779 --> 01:45:56,059
selects on the results of the

1802
01:45:49,340 --> 01:46:02,569
comparisons that might still not really

1803
01:45:56,060 --> 01:46:05,810
be what you want but it's a start and it

1804
01:46:02,569 --> 01:46:11,359
is cheaper than all of this probably

1805
01:46:05,810 --> 01:46:13,340
substantially actually because first of

1806
01:46:11,359 --> 01:46:15,369
all none of this is serially dependent

1807
01:46:13,340 --> 01:46:24,890
so all those can issue at the same time

1808
01:46:15,369 --> 01:46:29,659
and then you can the select you're only

1809
01:46:24,890 --> 01:46:32,510
going to select that normal so if we go

1810
01:46:29,659 --> 01:46:37,309
look here write that normal you're

1811
01:46:32,510 --> 01:46:42,320
setting four of those the X the Y and

1812
01:46:37,310 --> 01:46:46,490
the Z sort of separately this f/32 for x

1813
01:46:42,319 --> 01:46:50,479
of the normal it's it's really a Veck

1814
01:46:46,489 --> 01:46:58,420
three right so it's really a v3 for X

1815
01:46:50,479 --> 01:46:58,419
that we're talking about there it's this

1816
01:46:58,479 --> 01:47:04,609
you know I mean so if we were to

1817
01:47:02,659 --> 01:47:06,979
actually be doing the normal there then

1818
01:47:04,609 --> 01:47:12,349
presumably we can set each lane of the

1819
01:47:06,979 --> 01:47:19,659
normal as a select itself so I think it

1820
01:47:12,350 --> 01:47:19,660
might be something close to as simple

1821
01:47:24,408 --> 01:47:29,698
as this so when we do the positive or

1822
01:47:28,229 --> 01:47:31,499
negative part of things right we're

1823
01:47:29,698 --> 01:47:34,558
gonna figure out which one of those it

1824
01:47:31,498 --> 01:47:39,828
actually is this is sort of a separate

1825
01:47:34,559 --> 01:47:44,579
thing it's like the positive or the dirt

1826
01:47:39,828 --> 01:47:48,208
normal der normal sign right something

1827
01:47:44,578 --> 01:47:51,538
like that and the normal sign is just a

1828
01:47:48,208 --> 01:47:55,288
flip between like 1 and negative 1 so

1829
01:47:51,538 --> 01:47:58,649
it's really just like look it's one if

1830
01:47:55,288 --> 01:48:02,670
the min was less than the max then it's

1831
01:47:58,649 --> 01:48:04,348
negative 1 you know I'm saying so we

1832
01:48:02,670 --> 01:48:07,889
would determine the sign of the normal

1833
01:48:04,349 --> 01:48:14,670
here and then in each of these I think

1834
01:48:07,889 --> 01:48:16,469
you just select between the zero values

1835
01:48:14,670 --> 01:48:19,380
so there's nothing in that channel or

1836
01:48:16,469 --> 01:48:32,719
the sine value if it is actually the

1837
01:48:19,380 --> 01:48:40,170
thing that's in that channel so I think

1838
01:48:32,719 --> 01:48:43,769
it's this or close to this right which

1839
01:48:40,170 --> 01:48:46,920
is to say that we need for tests and for

1840
01:48:43,769 --> 01:48:53,309
selects which is a lot cheaper than this

1841
01:48:46,920 --> 01:49:03,208
probably I think because this has you

1842
01:48:53,309 --> 01:49:08,670
know I don't know 1 2 3 4 5 6 7 8 9 10

1843
01:49:03,208 --> 01:49:12,090
11 12 I mean there's probably 30 plus

1844
01:49:08,670 --> 01:49:18,059
instructions in there and this would be

1845
01:49:12,090 --> 01:49:20,400
like 8 if you have select like more like

1846
01:49:18,059 --> 01:49:24,029
12 if you don't

1847
01:49:20,399 --> 01:49:26,819
on the platform so I think that's a

1848
01:49:24,029 --> 01:49:36,449
pretty significant savings this could

1849
01:49:26,819 --> 01:49:40,460
probably be done better though all right

1850
01:49:36,449 --> 01:49:42,689
so I'm gonna leave that temporarily and

1851
01:49:40,460 --> 01:49:46,159
yeah I don't know if we have a like a

1852
01:49:42,689 --> 01:49:50,639
one or a negative one in here anywhere

1853
01:49:46,159 --> 01:49:53,819
so we have a zero it's just that so

1854
01:49:50,640 --> 01:49:58,320
that's fine so I can I can actually just

1855
01:49:53,819 --> 01:50:00,349
do this I suppose I guess another way to

1856
01:49:58,319 --> 01:50:03,119
say that would be it's just an and

1857
01:50:00,350 --> 01:50:04,860
because when it ends it'll just end out

1858
01:50:03,119 --> 01:50:06,869
to zero so I guess we don't need to

1859
01:50:04,859 --> 01:50:09,599
select because if you happen to select

1860
01:50:06,869 --> 01:50:11,489
with zero you're in a good place so you

1861
01:50:09,600 --> 01:50:15,750
should be able to actually do this I

1862
01:50:11,489 --> 01:50:21,619
think that actually makes it even

1863
01:50:15,750 --> 01:50:21,619
cheaper oops

1864
01:50:21,979 --> 01:50:26,879
right so that's the actual value that

1865
01:50:24,479 --> 01:50:29,219
we'd be selecting and I guess since we

1866
01:50:26,880 --> 01:50:34,130
have to mask these in here though I

1867
01:50:29,220 --> 01:50:34,130
guess we do have to do this

1868
01:50:39,939 --> 01:50:45,150
so it is a little more expensive than

1869
01:50:42,279 --> 01:50:47,738
I'm claiming or was thinking right

1870
01:50:45,149 --> 01:50:55,089
because you do have to do the Select in

1871
01:50:47,738 --> 01:50:56,918
there so it's only really two

1872
01:50:55,090 --> 01:50:59,679
instructions to compute the value but

1873
01:50:56,918 --> 01:51:03,880
you do have to select in which is kind

1874
01:50:59,679 --> 01:51:06,189
of annoying selections are cheap on some

1875
01:51:03,880 --> 01:51:08,800
platforms on more modern CPUs they're

1876
01:51:06,189 --> 01:51:11,499
very inexpensive but on older CPUs they

1877
01:51:08,800 --> 01:51:13,809
become less expensive big sorry them

1878
01:51:11,498 --> 01:51:15,728
more expensive because they don't

1879
01:51:13,809 --> 01:51:18,159
actually have an instruction to do it so

1880
01:51:15,729 --> 01:51:24,039
it becomes multiple instructions it's

1881
01:51:18,158 --> 01:51:26,168
two hands in an or usually so ant one am

1882
01:51:24,038 --> 01:51:29,918
not one or and one end kind of a thing

1883
01:51:26,168 --> 01:51:34,469
it's not great so anyway yeah looking at

1884
01:51:29,918 --> 01:51:39,219
this I think this means it's for selects

1885
01:51:34,469 --> 01:51:40,868
for comparisons three ends not great we

1886
01:51:39,219 --> 01:51:46,868
might be able to get it down less than

1887
01:51:40,868 --> 01:51:48,788
that though and you know we'll see but I

1888
01:51:46,868 --> 01:51:50,948
think we do have to do it that way and

1889
01:51:48,788 --> 01:51:56,859
that selecting is annoying but I think

1890
01:51:50,948 --> 01:51:59,248
that's just how it has to go all right I

1891
01:51:56,859 --> 01:51:59,248
believe that

1892
01:52:01,929 --> 01:52:24,309
we don't have a 1 and a negative 1 in

1893
01:52:04,269 --> 01:52:30,219
here so I think I'll just make one right

1894
01:52:24,309 --> 01:52:33,538
now and that can be that what does

1895
01:52:30,219 --> 01:52:33,538
select complaining about though here

1896
01:52:36,649 --> 01:52:43,368
I'm not actually sure what what it's

1897
01:52:40,738 --> 01:52:43,368
grumpy about

1898
01:52:48,119 --> 01:52:53,460
I mean that looks pretty reasonable

1899
01:52:49,800 --> 01:52:54,989
right but it doesn't like it

1900
01:52:53,460 --> 01:52:57,480
now the Tuileries Kabuto there could be

1901
01:52:54,989 --> 01:53:01,079
v3 for X what does select want

1902
01:52:57,479 --> 01:53:06,949
it's a F 3 to F 3 to F 32 it's trying to

1903
01:53:01,079 --> 01:53:06,949
F 3 to V 32 what

1904
01:53:12,649 --> 01:53:25,009
I see I see it I see so we probably want

1905
01:53:23,050 --> 01:53:26,690
more like that

1906
01:53:25,010 --> 01:53:29,829
let's take a look is that actually gonna

1907
01:53:26,689 --> 01:53:33,500
be accurate though so when we did these

1908
01:53:29,829 --> 01:53:37,279
comparisons we then took the minimum of

1909
01:53:33,500 --> 01:53:40,420
those two to produce team in three and

1910
01:53:37,279 --> 01:53:43,909
team X 3 and then we collapsed them down

1911
01:53:40,420 --> 01:53:49,340
so the problem there is again yet we

1912
01:53:43,909 --> 01:53:51,710
don't know which one we used so we need

1913
01:53:49,340 --> 01:53:55,300
to go back and figure out which one we

1914
01:53:51,710 --> 01:53:55,300
used there and

1915
01:54:04,340 --> 01:54:12,289
ugh yeah all right we're gonna have to

1916
01:54:10,699 --> 01:54:14,750
do this next time this is gonna be

1917
01:54:12,289 --> 01:54:16,609
pretty complicated I think we can do a

1918
01:54:14,750 --> 01:54:18,800
good job on it but but figuring out that

1919
01:54:16,609 --> 01:54:21,319
normal is gonna take us some work let's

1920
01:54:18,800 --> 01:54:24,310
go to a brief Q&amp;A here that's gonna be

1921
01:54:21,319 --> 01:54:24,309
that's gonna be annoying

1922
01:54:58,590 --> 01:55:04,739
we're gonna have to work that one out in

1923
01:55:00,489 --> 01:55:04,739
the blackboard by the way

1924
01:55:09,458 --> 01:55:15,550
generally tips for how someone would go

1925
01:55:11,929 --> 01:55:17,449
about moving an existing code base from

1926
01:55:15,550 --> 01:55:19,670
object oriented programming

1927
01:55:17,448 --> 01:55:20,779
assuming you're in control of it by the

1928
01:55:19,670 --> 01:55:22,699
way thank you very much for the series

1929
01:55:20,779 --> 01:55:23,929
I'm learning so much that $15 doesn't

1930
01:55:22,698 --> 01:55:26,149
even begin to compare with the value of

1931
01:55:23,929 --> 01:55:27,559
providing at the fact the series is free

1932
01:55:26,149 --> 01:55:35,899
is even more awesome well thank you very

1933
01:55:27,559 --> 01:55:38,769
much I guess what I would say is moving

1934
01:55:35,899 --> 01:55:41,899
an existing code base from

1935
01:55:38,769 --> 01:55:48,349
object-oriented programming to for lack

1936
01:55:41,899 --> 01:55:51,379
of a better term programming usually

1937
01:55:48,349 --> 01:56:00,800
involves a couple different things you

1938
01:55:51,380 --> 01:56:04,429
have to do I would say you probably want

1939
01:56:00,800 --> 01:56:07,489
to start by looking at the objects in

1940
01:56:04,429 --> 01:56:11,538
the system and their member functions

1941
01:56:07,488 --> 01:56:16,488
and I would start picking apart the

1942
01:56:11,538 --> 01:56:18,819
places where people have placed member

1943
01:56:16,488 --> 01:56:21,198
functions into objects that clearly

1944
01:56:18,819 --> 01:56:26,599
shouldn't be member functions there's

1945
01:56:21,198 --> 01:56:30,948
usually a lot of these I typically so

1946
01:56:26,599 --> 01:56:35,828
just to be clear I you've got to sort of

1947
01:56:30,948 --> 01:56:40,069
competing ideas there's the concept that

1948
01:56:35,828 --> 01:56:42,319
someone is doing something to data right

1949
01:56:40,069 --> 01:56:45,768
so I'm going through a list of

1950
01:56:42,319 --> 01:56:47,658
instructions I should do to my data you

1951
01:56:45,769 --> 01:56:51,070
know move it over here add 3 to it do

1952
01:56:47,658 --> 01:56:54,228
whatever right and that's procedural and

1953
01:56:51,069 --> 01:56:58,698
then over here you have a different idea

1954
01:56:54,229 --> 01:57:02,539
which is that data is does something to

1955
01:56:58,698 --> 01:57:03,708
itself and you are just asking it to do

1956
01:57:02,538 --> 01:57:08,958
something to itself and that's

1957
01:57:03,708 --> 01:57:11,029
object-oriented programming right so the

1958
01:57:08,958 --> 01:57:15,109
problem is when you're thinking about

1959
01:57:11,029 --> 01:57:17,478
the object-oriented programming and this

1960
01:57:15,109 --> 01:57:18,768
is especially bad if the people who do

1961
01:57:17,479 --> 01:57:22,039
the auditory and programming are

1962
01:57:18,769 --> 01:57:22,789
particularly far down the rat hole what

1963
01:57:22,038 --> 01:57:25,309
they'll do

1964
01:57:22,789 --> 01:57:27,409
is they break up a single procedural

1965
01:57:25,310 --> 01:57:28,880
notion which is here's the things I

1966
01:57:27,409 --> 01:57:32,989
wanted to do in the order I wanted to do

1967
01:57:28,880 --> 01:57:34,699
the man into like tens or hundreds or

1968
01:57:32,989 --> 01:57:38,300
sometimes if you're really unfortunate

1969
01:57:34,699 --> 01:57:41,869
like a thousand little functions each on

1970
01:57:38,300 --> 01:57:43,760
an object and they all sort of conspire

1971
01:57:41,869 --> 01:57:49,609
to do this one thing that was actually

1972
01:57:43,760 --> 01:57:52,550
pretty clear before so what you want to

1973
01:57:49,609 --> 01:57:55,519
start doing is going where can I start

1974
01:57:52,550 --> 01:57:58,159
to pull out procedural things that

1975
01:57:55,520 --> 01:58:00,830
happen in this code base and remove all

1976
01:57:58,159 --> 01:58:03,769
those little weird like member functions

1977
01:58:00,829 --> 01:58:06,559
that do tiny bits of things and how can

1978
01:58:03,770 --> 01:58:09,940
I pull them into a coherent single

1979
01:58:06,560 --> 01:58:12,320
procedure of blocks that do an operation

1980
01:58:09,939 --> 01:58:15,559
that's the first thing I would start

1981
01:58:12,319 --> 01:58:18,319
with trying to highlight the places

1982
01:58:15,560 --> 01:58:19,700
where I can create real procedures that

1983
01:58:18,319 --> 01:58:23,299
capture the meaning of the program

1984
01:58:19,699 --> 01:58:29,239
properly and disaggregate those from the

1985
01:58:23,300 --> 01:58:33,020
objects that be to start right and as

1986
01:58:29,239 --> 01:58:36,199
you turn that crank and focus on doing

1987
01:58:33,020 --> 01:58:39,110
that more and more your objects should

1988
01:58:36,199 --> 01:58:40,819
start to become just structs and then

1989
01:58:39,109 --> 01:58:44,000
you can stink to start to think about

1990
01:58:40,819 --> 01:58:46,759
merging them as necessary or splitting

1991
01:58:44,000 --> 01:58:49,489
them as necessary into smaller data

1992
01:58:46,760 --> 01:58:53,000
chunks or larger data chunks as is

1993
01:58:49,489 --> 01:59:01,340
dictated by the procedural code that's

1994
01:58:53,000 --> 01:59:03,260
probably what I'd say saw a gaming s I'm

1995
01:59:01,340 --> 01:59:05,930
only on episode 81 so excuse the new

1996
01:59:03,260 --> 01:59:07,850
bean is I've created different modules

1997
01:59:05,930 --> 01:59:09,770
in my code that store different data for

1998
01:59:07,850 --> 01:59:12,079
my entities physics render AI etcetera

1999
01:59:09,770 --> 01:59:14,690
would it be silly to create an anonymous

2000
01:59:12,079 --> 01:59:16,789
module type that unions these different

2001
01:59:14,689 --> 01:59:18,949
modules into one generic struct meaning

2002
01:59:16,789 --> 01:59:22,960
I can put them all into one array and

2003
01:59:18,949 --> 01:59:28,260
pass it around no that is not at all

2004
01:59:22,960 --> 01:59:32,430
silly so

2005
01:59:28,260 --> 01:59:35,940
in general what you have to remember is

2006
01:59:32,430 --> 01:59:41,280
like polymorphism in the object-oriented

2007
01:59:35,939 --> 01:59:45,659
world how they say that is just one

2008
01:59:41,279 --> 01:59:47,189
flavor of a broader concept which

2009
01:59:45,659 --> 01:59:49,619
actually has very little to do with

2010
01:59:47,189 --> 01:59:56,879
object-oriented programming and has more

2011
01:59:49,619 --> 01:59:58,649
to do with code reuse when a CPU goes to

2012
01:59:56,880 --> 02:00:02,010
execute a particular piece of code that

2013
01:59:58,649 --> 02:00:04,439
code always has to be the same so when I

2014
02:00:02,010 --> 02:00:07,170
create a chunk of compiled code in my

2015
02:00:04,439 --> 02:00:09,750
program it's gonna execute the same and

2016
02:00:07,170 --> 02:00:11,970
the question is how many how much

2017
02:00:09,750 --> 02:00:14,699
leverage can I get out of that one piece

2018
02:00:11,970 --> 02:00:17,670
of code right because there's reasons I

2019
02:00:14,699 --> 02:00:20,220
might want to do that first of all code

2020
02:00:17,670 --> 02:00:22,680
has a cost it has to be decoded two has

2021
02:00:20,220 --> 02:00:23,940
to live in a cache somewhere it costs me

2022
02:00:22,680 --> 02:00:25,770
to execute code

2023
02:00:23,939 --> 02:00:28,859
I don't want an arbitrarily large amount

2024
02:00:25,770 --> 02:00:30,450
of code right but also it just it's less

2025
02:00:28,859 --> 02:00:32,279
things to write if I can write one

2026
02:00:30,449 --> 02:00:34,500
little CPU routine to do a bunch of

2027
02:00:32,279 --> 02:00:36,269
things and I reuse it a bunch of times

2028
02:00:34,500 --> 02:00:39,899
hey that's good on me I didn't have to

2029
02:00:36,270 --> 02:00:42,060
write too much code right and so

2030
02:00:39,899 --> 02:00:44,789
sometimes what you would like to do is

2031
02:00:42,060 --> 02:00:47,010
reuse a piece of CPU code to do two

2032
02:00:44,789 --> 02:00:49,439
different things because those two

2033
02:00:47,010 --> 02:00:51,289
things are closely related and so one

2034
02:00:49,439 --> 02:00:56,369
thing you might want to do for example

2035
02:00:51,289 --> 02:00:59,279
is reuse like some allocation and this

2036
02:00:56,369 --> 02:01:01,680
can have benefits even beyond just

2037
02:00:59,279 --> 02:01:05,460
reusing CPU code it's also reusing

2038
02:01:01,680 --> 02:01:07,500
memory potentially right so sometimes

2039
02:01:05,460 --> 02:01:09,329
what you want to do is say look I've got

2040
02:01:07,500 --> 02:01:11,069
two things they're actually totally

2041
02:01:09,329 --> 02:01:13,680
different but I want to treat them the

2042
02:01:11,069 --> 02:01:15,299
same in some parts of the code so I'm

2043
02:01:13,680 --> 02:01:17,130
just gonna Union them together that

2044
02:01:15,300 --> 02:01:20,340
means that when I create one of these

2045
02:01:17,130 --> 02:01:22,980
things I can use it as either thing and

2046
02:01:20,340 --> 02:01:24,750
just depending on who uses it later down

2047
02:01:22,979 --> 02:01:26,039
the pipeline they're gonna decide what

2048
02:01:24,750 --> 02:01:29,159
to do with it in one way or another

2049
02:01:26,039 --> 02:01:30,899
right that can pay dividends by not only

2050
02:01:29,159 --> 02:01:32,399
compressing the code down so if you have

2051
02:01:30,899 --> 02:01:34,500
less code necessary to do the same

2052
02:01:32,399 --> 02:01:36,119
operations but also it allows you to

2053
02:01:34,500 --> 02:01:38,130
avoid things like memory fragmentation

2054
02:01:36,119 --> 02:01:40,619
because it means if like one of those

2055
02:01:38,130 --> 02:01:41,220
things was six bytes larger than the

2056
02:01:40,619 --> 02:01:42,149
other one

2057
02:01:41,220 --> 02:01:44,850
it doesn't matter

2058
02:01:42,149 --> 02:01:47,009
right you're you're wasting a little bit

2059
02:01:44,850 --> 02:01:48,870
of space in your memory sometimes when

2060
02:01:47,010 --> 02:01:51,150
it's one type of set of the other but

2061
02:01:48,869 --> 02:01:54,329
you're gaining a regularity that's much

2062
02:01:51,149 --> 02:01:57,779
more powerful and so it's always worth

2063
02:01:54,329 --> 02:01:59,970
noting that combining things together

2064
02:01:57,779 --> 02:02:02,099
and treating them uniformly can have

2065
02:01:59,970 --> 02:02:04,440
benefits that have nothing to do with

2066
02:02:02,100 --> 02:02:06,900
the traditional audit oriented sense of

2067
02:02:04,439 --> 02:02:08,669
polymorphism right you can get benefits

2068
02:02:06,899 --> 02:02:10,049
there that are real procedural benefits

2069
02:02:08,670 --> 02:02:12,750
that have to do with saying the CPU

2070
02:02:10,050 --> 02:02:14,310
actually does and that's valuable so

2071
02:02:12,750 --> 02:02:15,930
don't shy away from it just because it

2072
02:02:14,310 --> 02:02:22,440
might seem a little object oriented II

2073
02:02:15,930 --> 02:02:24,090
it's not it seems that tracing raise to

2074
02:02:22,439 --> 02:02:26,489
collect like is a heavy operation if

2075
02:02:24,090 --> 02:02:28,619
ray-tracing supported GPU Hardware most

2076
02:02:26,489 --> 02:02:29,849
common would it be fair to say that you

2077
02:02:28,619 --> 02:02:33,059
would prefer to move the lighting

2078
02:02:29,850 --> 02:02:35,640
computation to the GPU entirely yes so

2079
02:02:33,060 --> 02:02:37,950
if you were targeting like a brand new

2080
02:02:35,640 --> 02:02:40,590
GPU like an RT X card or something like

2081
02:02:37,949 --> 02:02:45,539
that you would just do it entirely on

2082
02:02:40,590 --> 02:02:48,420
the GPU but ten years from now this code

2083
02:02:45,539 --> 02:02:51,149
will be on the GPU for sure because

2084
02:02:48,420 --> 02:02:53,699
everyone probably who's buying games

2085
02:02:51,149 --> 02:02:58,069
will have a card that can do the ray

2086
02:02:53,699 --> 02:02:58,069
tracing efficiently right

2087
02:03:11,988 --> 02:03:16,009
talking to graphics folks it seems that

2088
02:03:14,029 --> 02:03:17,748
shader permutation management is a real

2089
02:03:16,010 --> 02:03:18,920
pain point on the other hand you have

2090
02:03:17,748 --> 02:03:20,688
titles like doom that use a

2091
02:03:18,920 --> 02:03:24,050
significantly smaller number of

2092
02:03:20,689 --> 02:03:25,869
permutations and pipeline states or are

2093
02:03:24,050 --> 02:03:29,150
you saying significantly smaller or

2094
02:03:25,868 --> 02:03:30,380
significant I'm not sure what you're

2095
02:03:29,149 --> 02:03:33,379
talking about saying what about doom

2096
02:03:30,380 --> 02:03:35,719
there sorry in a more complex 3d title

2097
02:03:33,380 --> 02:03:37,849
what's your take on GPU complexity

2098
02:03:35,719 --> 02:03:42,078
management how do you design a solution

2099
02:03:37,849 --> 02:03:50,449
that scales um well I guess what I would

2100
02:03:42,078 --> 02:03:54,799
say there is typically you have to

2101
02:03:50,448 --> 02:03:57,558
remember that the GPU code itself also

2102
02:03:54,800 --> 02:04:00,619
has a cost for having too many things

2103
02:03:57,559 --> 02:04:06,529
you don't want to have to change shaders

2104
02:04:00,618 --> 02:04:08,538
like all the time right because all the

2105
02:04:06,529 --> 02:04:12,978
same things that apply in a CPU usually

2106
02:04:08,538 --> 02:04:15,259
apply on a GPU as well like I mean I

2107
02:04:12,979 --> 02:04:16,999
don't keep up with GPU stuff because I'm

2108
02:04:15,260 --> 02:04:17,989
not a rendering guy so I'm kind of the

2109
02:04:16,998 --> 02:04:21,380
wrong one to ask

2110
02:04:17,988 --> 02:04:22,998
but as GPUs have become more complex

2111
02:04:21,380 --> 02:04:26,538
they do a lot of the same things that

2112
02:04:22,998 --> 02:04:28,458
CPUs do they cache things a lot and so

2113
02:04:26,538 --> 02:04:31,009
typically speaking if you're just

2114
02:04:28,458 --> 02:04:32,929
dumping 10,000 shaders onto a GPU and

2115
02:04:31,010 --> 02:04:37,729
just being like hey good luck pal

2116
02:04:32,929 --> 02:04:39,349
you know um I don't really know if

2117
02:04:37,729 --> 02:04:42,170
that's a particularly sane way to go

2118
02:04:39,349 --> 02:04:45,069
about managing the complexity either so

2119
02:04:42,170 --> 02:04:48,618
I would say you know my first thought is

2120
02:04:45,069 --> 02:04:51,590
yeah I would try to architect my system

2121
02:04:48,618 --> 02:04:54,469
so that actually I don't have that many

2122
02:04:51,590 --> 02:04:56,979
kinds of shaders and that I can use a

2123
02:04:54,469 --> 02:05:00,729
smaller number of parametric shaders

2124
02:04:56,979 --> 02:05:04,219
rather than a higher number of like

2125
02:05:00,729 --> 02:05:06,260
tightly optimized shaders because most

2126
02:05:04,219 --> 02:05:08,989
of the time I think you'll end up

2127
02:05:06,260 --> 02:05:13,729
actually probably winning out by going

2128
02:05:08,988 --> 02:05:16,609
for less things and you can always spot

2129
02:05:13,729 --> 02:05:19,070
optimize if you see that one particular

2130
02:05:16,609 --> 02:05:23,359
shader is used a ton and you want a

2131
02:05:19,069 --> 02:05:25,009
special case just that one set of okay

2132
02:05:23,359 --> 02:05:25,519
when this particular shader is used with

2133
02:05:25,010 --> 02:05:27,320
these

2134
02:05:25,520 --> 02:05:29,590
particular parameters I see that that

2135
02:05:27,319 --> 02:05:32,599
accounts for like a lot of my fill time

2136
02:05:29,590 --> 02:05:36,590
then write a highly optimized version of

2137
02:05:32,600 --> 02:05:39,079
that one that seems fair but the like

2138
02:05:36,590 --> 02:05:40,909
approach of let me generate like every

2139
02:05:39,079 --> 02:05:43,430
possible combination of every fader I

2140
02:05:40,909 --> 02:05:46,159
might use that doesn't seem that smart

2141
02:05:43,430 --> 02:05:49,159
especially when branching isn't that

2142
02:05:46,159 --> 02:05:50,149
expensive in a shader if all of the

2143
02:05:49,159 --> 02:05:52,159
branches take it

2144
02:05:50,149 --> 02:05:54,799
so like nowadays branching the shader

2145
02:05:52,159 --> 02:05:57,710
isn't that bad if it's if it's not per

2146
02:05:54,800 --> 02:05:59,659
Lane so something like a constant that's

2147
02:05:57,710 --> 02:06:03,020
loaded in that's part of the material

2148
02:05:59,659 --> 02:06:06,109
that can be pretty cheap so again I

2149
02:06:03,020 --> 02:06:07,820
would say like my first thought is I'd

2150
02:06:06,109 --> 02:06:13,130
try to get the shader count down

2151
02:06:07,819 --> 02:06:17,239
honestly III I would I would try to move

2152
02:06:13,130 --> 02:06:19,010
towards a couple basic shaders that do

2153
02:06:17,239 --> 02:06:22,969
all of the kinds of things you want to

2154
02:06:19,010 --> 02:06:26,329
do and focus on getting that to work

2155
02:06:22,970 --> 02:06:30,110
well and then I would just IIIi would

2156
02:06:26,329 --> 02:06:32,059
only break out into more precise

2157
02:06:30,109 --> 02:06:33,679
permutations when I thought I needed to

2158
02:06:32,060 --> 02:06:38,870
for performance like it really was

2159
02:06:33,680 --> 02:06:40,670
necessary a real production related

2160
02:06:38,869 --> 02:06:42,170
question in hand-made here we have a

2161
02:06:40,670 --> 02:06:43,730
general idea of how the game should look

2162
02:06:42,170 --> 02:06:45,319
and feel like mechanics art direction

2163
02:06:43,729 --> 02:06:46,429
etc we're tackling engine problems

2164
02:06:45,319 --> 02:06:48,049
because they're interesting and I'm very

2165
02:06:46,430 --> 02:06:49,610
good for you're doing it how will the

2166
02:06:48,050 --> 02:06:51,199
process of tackling things and exploring

2167
02:06:49,609 --> 02:06:52,309
the engine design would look in a real

2168
02:06:51,199 --> 02:06:53,720
production environment based on your

2169
02:06:52,310 --> 02:06:56,090
experience say maybe based on your

2170
02:06:53,720 --> 02:07:01,600
experience working on the witness with

2171
02:06:56,090 --> 02:07:05,420
John Blow um it's really not different

2172
02:07:01,600 --> 02:07:07,130
honestly you always have some idea of

2173
02:07:05,420 --> 02:07:08,989
what it is that you're trying to do and

2174
02:07:07,130 --> 02:07:12,380
you're basing your engine work off of

2175
02:07:08,989 --> 02:07:14,750
that and so in our particular case in

2176
02:07:12,380 --> 02:07:15,529
handmade hero we're like look we want to

2177
02:07:14,750 --> 02:07:17,149
look at these things because they're

2178
02:07:15,529 --> 02:07:18,710
interesting or we know we need them for

2179
02:07:17,149 --> 02:07:20,809
specular game design so we're spending

2180
02:07:18,710 --> 02:07:22,369
more time on those and we don't spend

2181
02:07:20,810 --> 02:07:26,990
time on things that I don't think I want

2182
02:07:22,369 --> 02:07:28,970
right that never changes even if the

2183
02:07:26,989 --> 02:07:31,039
answer is we're making a generic engine

2184
02:07:28,970 --> 02:07:32,930
well that's your driving function you're

2185
02:07:31,039 --> 02:07:34,609
like should we explore this case I don't

2186
02:07:32,930 --> 02:07:36,860
know does it allow us to expose a

2187
02:07:34,609 --> 02:07:38,750
feature on the generic side of things

2188
02:07:36,859 --> 02:07:39,319
that people can like turn on and off and

2189
02:07:38,750 --> 02:07:40,909
use

2190
02:07:39,319 --> 02:07:44,299
if the answer is yes we go down that

2191
02:07:40,909 --> 02:07:46,609
route right and so typically you just

2192
02:07:44,300 --> 02:07:48,529
always have some function in your brain

2193
02:07:46,609 --> 02:07:51,469
that's like should I start doing this or

2194
02:07:48,529 --> 02:07:53,059
shouldn't I and that can be as simple as

2195
02:07:51,470 --> 02:07:56,840
I asked the producer on the project

2196
02:07:53,060 --> 02:08:00,140
where the priority is for this thing or

2197
02:07:56,840 --> 02:08:01,699
it can be as complex as I sit down and

2198
02:08:00,140 --> 02:08:03,289
figure out how many different ways I

2199
02:08:01,699 --> 02:08:04,789
could use this thing in a generic

2200
02:08:03,289 --> 02:08:07,609
version of this engine that we're gonna

2201
02:08:04,789 --> 02:08:11,210
expose in a UI right but you're always

2202
02:08:07,609 --> 02:08:13,399
doing that you know you always have some

2203
02:08:11,210 --> 02:08:15,350
function and the function just changes

2204
02:08:13,399 --> 02:08:16,759
but the output from the function is

2205
02:08:15,350 --> 02:08:21,320
still what you use to determine where

2206
02:08:16,760 --> 02:08:22,850
you spend your time tips on reading

2207
02:08:21,319 --> 02:08:24,229
academic papers is about graphical stuff

2208
02:08:22,850 --> 02:08:25,520
I always gonna get lost in the technical

2209
02:08:24,229 --> 02:08:28,549
jargon and don't really get anything out

2210
02:08:25,520 --> 02:08:29,930
of them a good example is your video

2211
02:08:28,550 --> 02:08:33,320
about you decaying actual paper yeah

2212
02:08:29,930 --> 02:08:35,180
skin papers to learn what they've done

2213
02:08:33,319 --> 02:08:37,369
and what's possible and don't push it

2214
02:08:35,180 --> 02:08:39,619
any further than that until you actually

2215
02:08:37,369 --> 02:08:40,970
want to really do something with some of

2216
02:08:39,619 --> 02:08:42,739
those papers and then sit down and

2217
02:08:40,970 --> 02:08:44,210
actually implement them like work it

2218
02:08:42,739 --> 02:08:46,039
through line by line and make it

2219
02:08:44,210 --> 02:08:47,779
yourself that's the only way to really

2220
02:08:46,039 --> 02:08:48,350
learn them because yeah there's too much

2221
02:08:47,779 --> 02:08:51,019
jargon

2222
02:08:48,350 --> 02:08:54,680
there's incomplete explanations bad

2223
02:08:51,020 --> 02:08:57,020
explanations math that's written as math

2224
02:08:54,680 --> 02:08:58,640
instead of code for no reason just

2225
02:08:57,020 --> 02:09:00,140
because it's convention for them or it

2226
02:08:58,640 --> 02:09:03,560
makes them feel better about themselves

2227
02:09:00,140 --> 02:09:05,630
I don't know but you have to sit down

2228
02:09:03,560 --> 02:09:08,240
and really work it through because you

2229
02:09:05,630 --> 02:09:09,949
can't just read the paper and learn it

2230
02:09:08,239 --> 02:09:13,819
it's not written well enough for that

2231
02:09:09,949 --> 02:09:15,229
right most papers are not written in a

2232
02:09:13,819 --> 02:09:20,679
clear and concise fashion

2233
02:09:15,229 --> 02:09:20,679
sadly all right let's wrap it up

2234
02:09:24,140 --> 02:09:27,119
thanks everyone for joining me for the

2235
02:09:25,979 --> 02:09:28,919
episode of handmade hero it's been a

2236
02:09:27,119 --> 02:09:30,149
pleasure coding with you as always if

2237
02:09:28,920 --> 02:09:31,890
you would like to follow along with a

2238
02:09:30,149 --> 02:09:34,500
series at home you can always go to

2239
02:09:31,890 --> 02:09:36,660
handmade hero org and preorder the game

2240
02:09:34,500 --> 02:09:39,960
it comes with the source code so you can

2241
02:09:36,659 --> 02:09:42,479
play around with it yourself we will be

2242
02:09:39,960 --> 02:09:43,500
back here next weekend to work on the

2243
02:09:42,479 --> 02:09:45,599
lighting somewhere again like I said

2244
02:09:43,500 --> 02:09:46,529
it's there's so many things involved in

2245
02:09:45,600 --> 02:09:48,900
lighting and it has to be high

2246
02:09:46,529 --> 02:09:50,519
performance so it's always takes a long

2247
02:09:48,899 --> 02:09:53,129
time so it'll take us a few weekends but

2248
02:09:50,520 --> 02:09:55,110
we'll get there that's what we'll be

2249
02:09:53,130 --> 02:09:57,000
doing hopes to be back here for that

2250
02:09:55,109 --> 02:09:58,649
until then have fun programming and I'll

2251
02:09:57,000 --> 02:10:00,949
see everyone on the Internet take it

2252
02:09:58,649 --> 02:10:00,949
easy everybody

