1
00:00:02,480 --> 00:00:07,439
hello everyone and welcome to handmade

2
00:00:05,250 --> 00:00:12,150
hero the show Rico to complete game live

3
00:00:07,440 --> 00:00:15,089
on stream we are doing a little bug

4
00:00:12,150 --> 00:00:19,980
fixing we have a little issues page on

5
00:00:15,089 --> 00:00:23,310
the private github and we kind of go

6
00:00:19,980 --> 00:00:27,230
been trying to go through and you know

7
00:00:23,309 --> 00:00:27,229
fix some of these ones that are in here

8
00:00:27,439 --> 00:00:31,740
and we had I don't know about 12 in

9
00:00:30,268 --> 00:00:34,589
there or something like that and we

10
00:00:31,739 --> 00:00:37,738
closed a bunch of them so we're down to

11
00:00:34,590 --> 00:00:39,059
just a few that we know of like we we

12
00:00:37,738 --> 00:00:41,250
closed a bunch when we said well okay

13
00:00:39,058 --> 00:00:42,539
here is a fix but we were like two

14
00:00:41,250 --> 00:00:44,460
people who filed them kind of have to

15
00:00:42,539 --> 00:00:46,350
test them again so I you know I don't

16
00:00:44,460 --> 00:00:48,750
know to what extent they had there was

17
00:00:46,350 --> 00:00:50,309
one that we fixed that we didn't do one

18
00:00:48,750 --> 00:00:53,429
part of the fix that we need to do so

19
00:00:50,308 --> 00:00:54,839
that one's still in there and there's a

20
00:00:53,429 --> 00:00:57,628
couple that we haven't done anything at

21
00:00:54,840 --> 00:00:59,609
all about yet so two of them we won't

22
00:00:57,628 --> 00:01:01,920
like these two we're not going to

23
00:00:59,609 --> 00:01:04,109
anything about at the moment because

24
00:01:01,920 --> 00:01:06,118
this stuff I probably will wait till the

25
00:01:04,109 --> 00:01:08,909
next asset pack to try and deal with

26
00:01:06,118 --> 00:01:11,549
this part right here in terms of how we

27
00:01:08,909 --> 00:01:15,180
get to the point where the assets can be

28
00:01:11,549 --> 00:01:19,080
sort of done in a 1-1 shot easy to easy

29
00:01:15,180 --> 00:01:22,020
to you know work with deal um and guy

30
00:01:19,079 --> 00:01:26,548
entry obviously he is a long-term one

31
00:01:22,019 --> 00:01:27,868
but we can do wrong meters two pixels we

32
00:01:26,549 --> 00:01:29,400
could start taking a shot at klang

33
00:01:27,868 --> 00:01:32,250
compatibility which is going to be a

34
00:01:29,400 --> 00:01:34,799
bunch of things because of the lack of a

35
00:01:32,250 --> 00:01:36,509
printf and stuff like that so that

36
00:01:34,799 --> 00:01:37,860
that's probably and also like macro

37
00:01:36,509 --> 00:01:39,500
incompatibilities and things like this

38
00:01:37,859 --> 00:01:42,420
so that one's going to be a bit of work

39
00:01:39,500 --> 00:01:44,159
not to the whole code base or anything

40
00:01:42,420 --> 00:01:46,799
but just to a certain there's a few

41
00:01:44,159 --> 00:01:49,618
specific things that we do that clang is

42
00:01:46,799 --> 00:01:50,880
not going to like so in order to get

43
00:01:49,618 --> 00:01:53,489
that in there there's some stuff we have

44
00:01:50,879 --> 00:01:55,048
to do I think right now compile playing

45
00:01:53,489 --> 00:01:57,420
probably isn't that hard if you just

46
00:01:55,049 --> 00:01:58,950
don't want to use the debug services but

47
00:01:57,420 --> 00:02:03,478
if you do want to use the debug services

48
00:01:58,950 --> 00:02:05,549
then you got problems and so then this

49
00:02:03,478 --> 00:02:08,159
one's pretty easy to fix and the

50
00:02:05,549 --> 00:02:11,280
asynchronous texture downloads they're

51
00:02:08,159 --> 00:02:13,560
not necessarily easy to fix per se but

52
00:02:11,280 --> 00:02:15,568
they're straight forward to fix

53
00:02:13,560 --> 00:02:17,640
basically with asynchronous texture

54
00:02:15,568 --> 00:02:19,649
downloads we just have to go monkey

55
00:02:17,639 --> 00:02:24,000
around with opengl a little bit and do

56
00:02:19,650 --> 00:02:27,270
some somewhat unsavory stuff but on the

57
00:02:24,000 --> 00:02:31,019
whole it's not you know it's it's not

58
00:02:27,270 --> 00:02:33,120
rocket science it's just babysitting 3d

59
00:02:31,019 --> 00:02:37,110
API babysitting stuff that we have to do

60
00:02:33,120 --> 00:02:38,700
so uh let's just go ahead and keep out

61
00:02:37,110 --> 00:02:43,319
of here because I would like to get

62
00:02:38,699 --> 00:02:44,939
maybe by the time we get because I'm

63
00:02:43,318 --> 00:02:46,949
gonna have to go on break I've got a

64
00:02:44,939 --> 00:02:49,979
better be out of town for a couple weeks

65
00:02:46,949 --> 00:02:51,179
in in a little bit and so I'd like to

66
00:02:49,979 --> 00:02:53,488
get to the point where we kind of have a

67
00:02:51,180 --> 00:02:55,290
clean bug list here where maybe only

68
00:02:53,489 --> 00:02:58,259
these two guys are still left remaining

69
00:02:55,289 --> 00:03:00,959
that would be nice to do potentially I

70
00:02:58,259 --> 00:03:02,669
don't know you know we'll see but I'd

71
00:03:00,959 --> 00:03:05,280
like to you know at least a crack at it

72
00:03:02,669 --> 00:03:07,318
so that we can kind of have that's the

73
00:03:05,280 --> 00:03:10,348
fleen doubt and then just focus on

74
00:03:07,318 --> 00:03:12,149
getting our Z lighting stuff finished

75
00:03:10,348 --> 00:03:13,919
because I think that's really the last

76
00:03:12,150 --> 00:03:16,709
thing that we need to do before we can

77
00:03:13,919 --> 00:03:20,729
move on to doing some world building and

78
00:03:16,709 --> 00:03:23,129
you know kind of move on to the game II

79
00:03:20,729 --> 00:03:27,810
sort of stuff with that doesn't really

80
00:03:23,129 --> 00:03:29,340
have much engine relevance sort of we

81
00:03:27,810 --> 00:03:30,780
don't really have that much engine

82
00:03:29,340 --> 00:03:32,670
relevant code left I guess is what I'm

83
00:03:30,780 --> 00:03:37,229
saying like the engine kind of does what

84
00:03:32,669 --> 00:03:38,548
it does and you know it there's plenty

85
00:03:37,229 --> 00:03:40,560
of things that we could add to it or

86
00:03:38,549 --> 00:03:41,939
improve but nothing particularly is

87
00:03:40,560 --> 00:03:45,359
super necessary you know it can play

88
00:03:41,939 --> 00:03:48,000
cutscenes it can do multi-layered sprite

89
00:03:45,359 --> 00:03:50,370
levels it can do arbitrarily large

90
00:03:48,000 --> 00:03:51,870
worlds it does asset streaming and blah

91
00:03:50,370 --> 00:03:53,189
blah blah blah so while all of those

92
00:03:51,870 --> 00:03:54,989
things could certainly be improved and

93
00:03:53,189 --> 00:03:56,549
we may find that we need to improve some

94
00:03:54,989 --> 00:03:57,780
of them or that there are certain parts

95
00:03:56,549 --> 00:03:59,939
that we kind of left this to do is that

96
00:03:57,780 --> 00:04:03,090
we'll have to loop around back to and we

97
00:03:59,939 --> 00:04:05,129
start to stress them we've built most of

98
00:04:03,090 --> 00:04:06,989
the stuff that you know you would have

99
00:04:05,129 --> 00:04:08,969
if you went and licensed an engine or

100
00:04:06,989 --> 00:04:10,319
something like that there isn't really a

101
00:04:08,969 --> 00:04:13,169
whole lot that we're missing I don't

102
00:04:10,318 --> 00:04:15,599
think so I'd like to kind of get you

103
00:04:13,169 --> 00:04:21,209
know things wrapped up in that sense to

104
00:04:15,599 --> 00:04:24,689
a good sort of you know pinch point so

105
00:04:21,209 --> 00:04:26,639
I'm going to start with de 323 source

106
00:04:24,689 --> 00:04:27,180
code here on day 3 24 so that's the

107
00:04:26,639 --> 00:04:30,300
source

108
00:04:27,180 --> 00:04:33,350
you'll want to start with a few em you

109
00:04:30,300 --> 00:04:38,038
are so inclined to follow along at home

110
00:04:33,350 --> 00:04:40,650
here is the old code base let me go

111
00:04:38,038 --> 00:04:42,930
ahead and compile that there is nothing

112
00:04:40,649 --> 00:04:46,079
particularly unusual about where we are

113
00:04:42,930 --> 00:04:48,209
at you can kind of see it's exactly what

114
00:04:46,079 --> 00:04:49,769
we would expect our software renderer is

115
00:04:48,209 --> 00:04:52,079
working and our Hardware render is

116
00:04:49,769 --> 00:04:56,279
working as best as we know of at the

117
00:04:52,079 --> 00:04:59,159
moment and yeah so there's not a lot to

118
00:04:56,279 --> 00:05:02,339
say about that our Z stuff has still not

119
00:04:59,160 --> 00:05:04,259
been done yet in terms of the offset

120
00:05:02,339 --> 00:05:06,209
stuff we we have the multiplanar stuff

121
00:05:04,259 --> 00:05:07,800
there but like our we have our weird

122
00:05:06,209 --> 00:05:09,870
sort of stairwell thing that's not

123
00:05:07,800 --> 00:05:11,788
correct at the moment so we have to work

124
00:05:09,870 --> 00:05:14,788
on that at some point but otherwise

125
00:05:11,788 --> 00:05:16,769
we're in pretty good shape but we still

126
00:05:14,788 --> 00:05:19,110
got a couple bugs here so let's start

127
00:05:16,769 --> 00:05:20,339
taking a look at those first I'm going

128
00:05:19,110 --> 00:05:25,310
to do is just address this one because

129
00:05:20,339 --> 00:05:27,869
this was just sort of a misstep in the

130
00:05:25,310 --> 00:05:29,399
quick fix we did over here that's not

131
00:05:27,870 --> 00:05:33,959
the I'll actually wanted to actually

132
00:05:29,399 --> 00:05:36,269
want a handmade world I back into T into

133
00:05:33,959 --> 00:05:38,848
chunk the problem was just that our

134
00:05:36,269 --> 00:05:42,379
clear world entity block call at the

135
00:05:38,848 --> 00:05:48,079
moment clears the next pointer

136
00:05:42,379 --> 00:05:51,719
apparently see clear world entity block

137
00:05:48,079 --> 00:05:54,598
so we can't actually call it after we've

138
00:05:51,720 --> 00:05:56,190
initialized the next pointer so we kind

139
00:05:54,598 --> 00:05:58,889
of have to do something like okay when

140
00:05:56,189 --> 00:06:06,149
we grab the free block off the free list

141
00:05:58,889 --> 00:06:08,180
you know then we can do it right so we

142
00:06:06,149 --> 00:06:13,049
can grab it and then clear and then

143
00:06:08,180 --> 00:06:16,319
continue and I think that probably would

144
00:06:13,050 --> 00:06:18,810
do it we grabbed it off here we set the

145
00:06:16,319 --> 00:06:20,519
free block pointer to point to our next

146
00:06:18,810 --> 00:06:22,978
pointer so we can't clear until that's

147
00:06:20,519 --> 00:06:25,439
done then we can clear it so now it's

148
00:06:22,978 --> 00:06:27,180
all zeroed out then we can set its next

149
00:06:25,439 --> 00:06:28,560
pointer to be whatever was in the first

150
00:06:27,180 --> 00:06:31,348
block and that we can chain it so we

151
00:06:28,560 --> 00:06:33,899
just like grab clear chain and that

152
00:06:31,348 --> 00:06:37,339
seems like a reasonable thing to do

153
00:06:33,899 --> 00:06:37,339
there so we'll go ahead and compile that

154
00:06:38,329 --> 00:06:43,408
and again we don't really have a test

155
00:06:40,860 --> 00:06:45,210
a setup for this yet so these are all

156
00:06:43,408 --> 00:06:46,740
very speculative bugs they're like for

157
00:06:45,209 --> 00:06:48,959
people who are maybe doing stuff in

158
00:06:46,740 --> 00:06:50,250
advance of what we're doing so we kind

159
00:06:48,959 --> 00:06:52,408
of have to rely on them for testing at

160
00:06:50,250 --> 00:06:53,968
the moment when we actually get to this

161
00:06:52,408 --> 00:06:55,860
part of the code we can do some more

162
00:06:53,968 --> 00:06:57,360
stress testing of stuff like this to see

163
00:06:55,860 --> 00:07:20,460
if it breaks but at the moment we're not

164
00:06:57,360 --> 00:07:21,778
there yet so yeah let me just double

165
00:07:20,459 --> 00:07:25,528
check to make sure that we didn't break

166
00:07:21,778 --> 00:07:26,908
our only case or there we go yeah I was

167
00:07:25,528 --> 00:07:29,968
going to say we should actually make

168
00:07:26,908 --> 00:07:31,740
sure that we did this properly oh that's

169
00:07:29,968 --> 00:07:38,699
not what I actually wanted to call I

170
00:07:31,740 --> 00:07:43,710
want to call that there we go there we

171
00:07:38,699 --> 00:07:46,740
go and yeah so we'll see if that helps

172
00:07:43,709 --> 00:07:53,899
for for the people who reported this one

173
00:07:46,740 --> 00:07:57,810
and yeah they can tell us there we go ah

174
00:07:53,899 --> 00:08:01,439
oops don't want to do that how do I get

175
00:07:57,810 --> 00:08:03,629
back there we go issues so wrong meters

176
00:08:01,439 --> 00:08:06,240
two pixels is a computation problem

177
00:08:03,629 --> 00:08:09,300
that's been in there for a while and I

178
00:08:06,240 --> 00:08:10,939
think it means our camera offsets and a

179
00:08:09,300 --> 00:08:13,408
couple of things are going to be wrong

180
00:08:10,939 --> 00:08:15,900
so this was not going to be particularly

181
00:08:13,408 --> 00:08:20,788
difficult to fix but it is going to

182
00:08:15,899 --> 00:08:22,588
require perhaps some tweaking anyway you

183
00:08:20,788 --> 00:08:26,038
can kind of see from the description

184
00:08:22,588 --> 00:08:28,228
here what the problem is the problem is

185
00:08:26,038 --> 00:08:30,870
that when we did meters two pixels it

186
00:08:28,228 --> 00:08:36,208
appears that we didn't actually do

187
00:08:30,870 --> 00:08:38,370
meters two pixels per se and you can you

188
00:08:36,208 --> 00:08:40,708
can see that like originally we had this

189
00:08:38,370 --> 00:08:43,288
and then somehow I guess it got mutated

190
00:08:40,708 --> 00:08:45,958
to this this is probably just again one

191
00:08:43,288 --> 00:08:47,789
of the sort of problems with programming

192
00:08:45,958 --> 00:08:50,250
on stream is that I kind of have to talk

193
00:08:47,789 --> 00:08:51,838
and do things at the same time and it's

194
00:08:50,250 --> 00:08:53,909
pretty easy to have cut and paste or

195
00:08:51,839 --> 00:09:01,020
reorganization mistakes

196
00:08:53,909 --> 00:09:05,250
and so yeah that is just what sort of

197
00:09:01,019 --> 00:09:08,429
happens so I what we probably did is

198
00:09:05,250 --> 00:09:12,059
just tune some other values that happen

199
00:09:08,429 --> 00:09:14,219
to be you know we've got a sort of semi

200
00:09:12,059 --> 00:09:15,899
3d projection happening on the world and

201
00:09:14,220 --> 00:09:18,840
so if our meters to pixel value is wrong

202
00:09:15,899 --> 00:09:21,029
well our camera distance could just be

203
00:09:18,840 --> 00:09:23,820
set to compensate and so on so we

204
00:09:21,029 --> 00:09:25,679
probably just never really knew that it

205
00:09:23,820 --> 00:09:27,390
was going to be wrong because we didn't

206
00:09:25,679 --> 00:09:30,389
have any we don't have any like real

207
00:09:27,389 --> 00:09:33,120
world things to test with right so we

208
00:09:30,389 --> 00:09:36,990
won't see those errors so what we kind

209
00:09:33,120 --> 00:09:38,570
of want to do now is is go look at what

210
00:09:36,990 --> 00:09:41,490
we were doing here and see if we can

211
00:09:38,570 --> 00:09:45,360
figure out what would be more correct to

212
00:09:41,490 --> 00:09:50,789
do in context so that is our meters to

213
00:09:45,360 --> 00:10:00,930
pixels line I think that's probably in

214
00:09:50,789 --> 00:10:03,589
the renderer and my guess although I

215
00:10:00,929 --> 00:10:07,229
don't know is that meters to pixels is

216
00:10:03,590 --> 00:10:09,629
you know is probably right throughout

217
00:10:07,230 --> 00:10:11,490
this code meaning I don't know that we

218
00:10:09,629 --> 00:10:14,220
made any errors in here no one has

219
00:10:11,490 --> 00:10:17,279
actually reported a specific bug on this

220
00:10:14,220 --> 00:10:19,050
as per se so it's entirely possible that

221
00:10:17,279 --> 00:10:24,199
our camera transform is using it

222
00:10:19,049 --> 00:10:26,849
correctly but in our world mode or world

223
00:10:24,200 --> 00:10:31,200
where we're actually doing this I assume

224
00:10:26,850 --> 00:10:35,159
it's in world mode yeah you can see it

225
00:10:31,200 --> 00:10:39,410
right there here where we've got meters

226
00:10:35,159 --> 00:10:39,409
two pixels we've basically got pixels

227
00:10:39,950 --> 00:10:46,410
times the width of the monitor which i

228
00:10:43,559 --> 00:10:48,000
think is is kind of backwards so let's

229
00:10:46,409 --> 00:10:50,579
take a look at what that's going to do

230
00:10:48,000 --> 00:10:53,100
dimensional analysis wise assuming that

231
00:10:50,580 --> 00:10:54,830
we really wanted meters two pixels right

232
00:10:53,100 --> 00:10:58,940
which is something that you multiply

233
00:10:54,830 --> 00:10:58,940
well let me just draw it out for you

234
00:11:05,019 --> 00:11:14,149
so if we want something called meters to

235
00:11:09,799 --> 00:11:16,939
pixels right if that's what we're

236
00:11:14,149 --> 00:11:21,139
looking for then what we want to do here

237
00:11:16,940 --> 00:11:23,540
is say well okay uh meters to pixels

238
00:11:21,139 --> 00:11:25,730
means that I've got something that's in

239
00:11:23,539 --> 00:11:28,009
meters right like I've got you know X

240
00:11:25,730 --> 00:11:32,028
meters well let me use a different thing

241
00:11:28,009 --> 00:11:36,230
there a meters right and i want to

242
00:11:32,028 --> 00:11:40,309
multiply it by something right so i want

243
00:11:36,230 --> 00:11:44,060
to to basically multiply this value by

244
00:11:40,309 --> 00:11:47,809
you know who knows what the the actual

245
00:11:44,059 --> 00:11:50,299
value is x over Y or something like this

246
00:11:47,809 --> 00:11:53,088
right again I should I really need to

247
00:11:50,299 --> 00:11:59,209
get better at picking things I don't

248
00:11:53,089 --> 00:12:01,400
know a Q over w so I have a meters i

249
00:11:59,210 --> 00:12:04,820
want to multiply by Q over w and I want

250
00:12:01,399 --> 00:12:08,449
to get out be pixels right because the

251
00:12:04,820 --> 00:12:12,070
idea is I have a value right this is

252
00:12:08,450 --> 00:12:15,860
meters to pixels whatever q / w is right

253
00:12:12,070 --> 00:12:17,660
and I want to figure out if I have a

254
00:12:15,860 --> 00:12:19,310
value in meters and I want to get a

255
00:12:17,659 --> 00:12:21,980
value in pixels i want to multiply by

256
00:12:19,309 --> 00:12:23,809
this thing and so if you just look at

257
00:12:21,980 --> 00:12:25,430
what actually happens here in fact i can

258
00:12:23,809 --> 00:12:27,439
actually just solve this equation and

259
00:12:25,429 --> 00:12:31,309
you can kind of see what ends up

260
00:12:27,440 --> 00:12:33,140
happening in terms of the units q / w if

261
00:12:31,309 --> 00:12:37,250
i was divide both sides by meters i

262
00:12:33,139 --> 00:12:39,970
would get be pixels over a meters right

263
00:12:37,250 --> 00:12:43,278
and so what you can see there is

264
00:12:39,970 --> 00:12:46,759
ignoring the actual quantities the units

265
00:12:43,278 --> 00:12:48,889
of q / w should be pixels over meters in

266
00:12:46,759 --> 00:12:51,379
theory right unless we're missing

267
00:12:48,889 --> 00:12:53,059
something that's what we would expect so

268
00:12:51,379 --> 00:12:55,370
when we say that a value is meters to

269
00:12:53,059 --> 00:12:59,899
pixels we would expect it to look like

270
00:12:55,370 --> 00:13:03,889
in code you know something pixely right

271
00:12:59,899 --> 00:13:05,389
over something meters e this is what we

272
00:13:03,889 --> 00:13:08,539
would expect to see four meters to

273
00:13:05,389 --> 00:13:10,490
pixels but what we see instead is the

274
00:13:08,539 --> 00:13:12,919
opposite of that right what I'm seeing

275
00:13:10,490 --> 00:13:14,570
here is the width of the monitor which

276
00:13:12,919 --> 00:13:16,849
even if it's in

277
00:13:14,570 --> 00:13:18,170
meters which you know maybe it is maybe

278
00:13:16,850 --> 00:13:20,269
doesn't love to check to see what we

279
00:13:18,169 --> 00:13:22,370
actually specified that in but

280
00:13:20,269 --> 00:13:24,769
millimeters meters whatever it's in it's

281
00:13:22,370 --> 00:13:28,039
in a physical measurement we're

282
00:13:24,769 --> 00:13:31,519
multiplying a pixel value by it so it's

283
00:13:28,039 --> 00:13:36,169
like it should be that but instead it's

284
00:13:31,519 --> 00:13:38,389
that right and that seems to be just

285
00:13:36,169 --> 00:13:41,179
straight up erroneous now the width of

286
00:13:38,389 --> 00:13:43,309
the monitor right this is the horizontal

287
00:13:41,179 --> 00:13:45,219
measurement of the monitor in meters

288
00:13:43,309 --> 00:13:47,779
according to what we're saying here that

289
00:13:45,220 --> 00:13:51,259
if you look at that value that's

290
00:13:47,779 --> 00:13:53,269
probably why this wasn't a like heinous

291
00:13:51,259 --> 00:13:55,730
Lee erroneous error for us where

292
00:13:53,269 --> 00:13:59,449
everything was wrong it's point six

293
00:13:55,730 --> 00:14:01,430
right so it's like we were dividing by 2

294
00:13:59,450 --> 00:14:04,070
because of a multiplied instead of

295
00:14:01,429 --> 00:14:06,439
effectively multiplying by 2 which is

296
00:14:04,070 --> 00:14:08,810
what will get here so yeah you know

297
00:14:06,440 --> 00:14:12,350
maybe distance above ground should have

298
00:14:08,809 --> 00:14:14,750
been 16 instead of nine or 4.5 instead

299
00:14:12,350 --> 00:14:16,490
of nine right like you know some values

300
00:14:14,750 --> 00:14:17,950
that were double what they should have

301
00:14:16,490 --> 00:14:20,750
been our half what they should have been

302
00:14:17,950 --> 00:14:23,060
we wouldn't necessarily immediately know

303
00:14:20,750 --> 00:14:26,029
those were wrong right I because we

304
00:14:23,059 --> 00:14:29,929
don't have a clear expectation what's

305
00:14:26,029 --> 00:14:32,419
going on there so in theory right now we

306
00:14:29,929 --> 00:14:34,699
have to go back and sort of readjust

307
00:14:32,419 --> 00:14:37,279
those values because we're going to get

308
00:14:34,700 --> 00:14:42,710
you know some erroneous stuff going on

309
00:14:37,279 --> 00:14:46,279
right so yeah so some of this stuff is

310
00:14:42,710 --> 00:14:50,210
like you know the focal length I don't

311
00:14:46,279 --> 00:14:53,419
know exactly how we decided to pick that

312
00:14:50,210 --> 00:14:55,129
but that seems fine but anyway so you

313
00:14:53,419 --> 00:14:57,469
know if we want to sort of restore

314
00:14:55,129 --> 00:15:00,110
roughly what we were talking about

315
00:14:57,470 --> 00:15:02,889
before you know we can just zoom out a

316
00:15:00,110 --> 00:15:04,899
little bit more and then we'll get

317
00:15:02,889 --> 00:15:07,460
basically the same thing that we had

318
00:15:04,899 --> 00:15:11,959
previously and it's you know it's fine

319
00:15:07,460 --> 00:15:13,730
or whatever so that's all good I don't

320
00:15:11,960 --> 00:15:16,550
know what exactly we want this number to

321
00:15:13,730 --> 00:15:18,529
be specifically but in theory that is

322
00:15:16,549 --> 00:15:20,029
the more correct transform that well

323
00:15:18,529 --> 00:15:25,039
that's a little bit too much let's let's

324
00:15:20,029 --> 00:15:27,470
not go nuts so yeah so you know is that

325
00:15:25,039 --> 00:15:28,399
more correct I think probably because we

326
00:15:27,470 --> 00:15:29,930
said if meteors two pics

327
00:15:28,399 --> 00:15:32,240
and you know maybe we've got bugs

328
00:15:29,929 --> 00:15:34,819
elsewhere or something like that but you

329
00:15:32,240 --> 00:15:36,620
know in lieu of knowing that we've got

330
00:15:34,820 --> 00:15:38,990
any other bugs in some other places in

331
00:15:36,620 --> 00:15:44,629
the code that is is pretty much what it

332
00:15:38,990 --> 00:15:47,899
should be right so I think that's good I

333
00:15:44,629 --> 00:15:49,460
think and there may not really be

334
00:15:47,899 --> 00:15:51,799
anything else that we need to do in

335
00:15:49,460 --> 00:15:53,870
particular because really the only thing

336
00:15:51,799 --> 00:15:56,479
that meters two pixels effects is the

337
00:15:53,870 --> 00:15:58,879
scaling of the screen so the only thing

338
00:15:56,480 --> 00:16:02,149
that it's going to really affect is how

339
00:15:58,879 --> 00:16:06,080
far away we are in terms of our camera

340
00:16:02,149 --> 00:16:08,840
for getting the sort of result that we

341
00:16:06,080 --> 00:16:11,389
want you know that's that's all there

342
00:16:08,840 --> 00:16:15,080
really is to it so I don't think there's

343
00:16:11,389 --> 00:16:19,549
really all that much there's there's not

344
00:16:15,080 --> 00:16:21,560
much more to say about it all right so

345
00:16:19,549 --> 00:16:26,629
I'm going to say that that's probably

346
00:16:21,559 --> 00:16:28,429
okay and let's see what he's just be

347
00:16:26,629 --> 00:16:30,860
sure the number of pixels buffer / the

348
00:16:28,429 --> 00:16:34,549
with the monitor that is exactly what I

349
00:16:30,860 --> 00:16:37,399
think it should be as well found a focal

350
00:16:34,549 --> 00:16:39,500
length 0 point 25 is Victoria of 8.6 to

351
00:16:37,399 --> 00:16:44,600
give an identical image I don't know if

352
00:16:39,500 --> 00:16:46,340
we want to edit the focal length you

353
00:16:44,600 --> 00:16:48,740
know the problem with with not really

354
00:16:46,340 --> 00:16:50,930
doing any kind of real camera simulation

355
00:16:48,740 --> 00:16:54,769
years we don't really know what our

356
00:16:50,929 --> 00:16:56,569
focal lengths should be per se so it

357
00:16:54,769 --> 00:17:01,220
that's going to depend on how much we

358
00:16:56,570 --> 00:17:04,789
want our scaling to happen I suppose I

359
00:17:01,220 --> 00:17:07,069
could go in and return on the edging

360
00:17:04,789 --> 00:17:09,289
there temporarily just to kind of see

361
00:17:07,069 --> 00:17:17,958
what those things look like in the

362
00:17:09,289 --> 00:17:20,899
OpenGL layer here let's see rectangle so

363
00:17:17,959 --> 00:17:24,230
if we go ahead and run this way you can

364
00:17:20,900 --> 00:17:28,490
see kind of now how the how much scaling

365
00:17:24,230 --> 00:17:30,950
we get on other floors right and you

366
00:17:28,490 --> 00:17:32,930
know is that too little scaling because

367
00:17:30,950 --> 00:17:35,630
the focal what the focal length will

368
00:17:32,930 --> 00:17:39,890
basically do is determine how much sort

369
00:17:35,630 --> 00:17:42,330
of contraction there is in terms of the

370
00:17:39,890 --> 00:17:44,610
perspective right how much scaling

371
00:17:42,329 --> 00:17:47,220
we get there so yeah so maybe you know

372
00:17:44,609 --> 00:17:49,048
we want a little more than that because

373
00:17:47,220 --> 00:17:52,259
that wasn't quite that much scaling so

374
00:17:49,048 --> 00:17:54,898
maybe we drop that down to something

375
00:17:52,259 --> 00:17:59,429
else here I guess I should just leave

376
00:17:54,898 --> 00:18:03,648
this running and tweak those values let

377
00:17:59,429 --> 00:18:03,649
me go up a few floors

378
00:18:20,700 --> 00:18:23,480
alright

379
00:18:25,750 --> 00:18:34,369
so if i go ahead and look at the kind of

380
00:18:30,950 --> 00:18:37,490
the hole here we can sort of look at how

381
00:18:34,369 --> 00:18:41,538
we want to how we want to have that be

382
00:18:37,490 --> 00:18:43,970
elongated you know if this is sort of a

383
00:18:41,538 --> 00:18:45,859
little bit more kind of what we want in

384
00:18:43,970 --> 00:18:47,450
terms of that that scaling you know I

385
00:18:45,859 --> 00:18:49,219
don't know if that's too drastic or if

386
00:18:47,450 --> 00:18:51,140
that's it seems like that's probably

387
00:18:49,220 --> 00:18:54,589
good because we want that effect to be

388
00:18:51,140 --> 00:18:56,690
relatively pronounced I think you know

389
00:18:54,589 --> 00:19:03,259
we can we can sort of do something maybe

390
00:18:56,690 --> 00:19:07,100
like this oops and that that seems

391
00:19:03,259 --> 00:19:10,220
reasonable right and that gives a lot of

392
00:19:07,099 --> 00:19:13,819
that gives a pretty good motion as those

393
00:19:10,220 --> 00:19:21,440
things kind of scale out there it would

394
00:19:13,819 --> 00:19:24,798
seem yeah all right so that seems

395
00:19:21,440 --> 00:19:26,659
reasonable so I'm going to go ahead and

396
00:19:24,798 --> 00:19:30,408
say we've got that under control now

397
00:19:26,659 --> 00:19:33,470
hopefully and we'll go ahead and close

398
00:19:30,409 --> 00:19:36,039
that out and see if anyone has anything

399
00:19:33,470 --> 00:19:36,038
to say about it

400
00:20:00,150 --> 00:20:10,179
all right okay so now we're down to

401
00:20:06,099 --> 00:20:11,558
really only two and one of them is I

402
00:20:10,179 --> 00:20:13,360
think definitely more important than the

403
00:20:11,558 --> 00:20:16,000
other one so we'll attack that one first

404
00:20:13,359 --> 00:20:18,039
claim compatibility obviously is not

405
00:20:16,000 --> 00:20:19,390
really relevant to us actually doing the

406
00:20:18,039 --> 00:20:21,639
game that's relevant to people who are

407
00:20:19,390 --> 00:20:24,730
building it on other platforms so well

408
00:20:21,640 --> 00:20:26,259
that's nice to support it's not really

409
00:20:24,730 --> 00:20:28,480
as much of a priority so I'm going to go

410
00:20:26,259 --> 00:20:30,069
with this guy first and of course

411
00:20:28,480 --> 00:20:32,049
there's really nothing to say about this

412
00:20:30,069 --> 00:20:34,659
when we already know what the bug is we

413
00:20:32,049 --> 00:20:37,629
tried using multiple oppa jal contracts

414
00:20:34,660 --> 00:20:39,820
for opengl texture downloads and you

415
00:20:37,630 --> 00:20:43,030
know it doesn't seem to be reliable on

416
00:20:39,819 --> 00:20:44,678
nvidia specifically on AMD it's a little

417
00:20:43,029 --> 00:20:45,879
bit flaky but we don't really know that

418
00:20:44,679 --> 00:20:48,009
something because we never put in any

419
00:20:45,880 --> 00:20:50,710
fencing and it's possible that if we did

420
00:20:48,009 --> 00:20:52,960
put in fencing the driver would work

421
00:20:50,710 --> 00:20:55,000
properly so we don't really know too

422
00:20:52,960 --> 00:20:57,100
much about it other than it seemed very

423
00:20:55,000 --> 00:21:01,599
clear that Nvidia drivers did not like

424
00:20:57,099 --> 00:21:03,519
this so we kind of just rather than

425
00:21:01,599 --> 00:21:05,589
going and doing the fencing and doing

426
00:21:03,519 --> 00:21:07,690
some of those other things more

427
00:21:05,589 --> 00:21:09,879
correctly it seemed like the better

428
00:21:07,690 --> 00:21:12,029
thing to do was just to attack it from

429
00:21:09,880 --> 00:21:17,140
an entirely different perspective and

430
00:21:12,029 --> 00:21:19,329
try to only do single threaded work on

431
00:21:17,140 --> 00:21:20,320
the OpenGL side of things there's really

432
00:21:19,329 --> 00:21:23,019
not much we can do about that

433
00:21:20,319 --> 00:21:25,329
unfortunately for some unknown reason

434
00:21:23,019 --> 00:21:29,200
and I really don't have any idea what

435
00:21:25,329 --> 00:21:30,869
the reason is the OpenGL Standards

436
00:21:29,200 --> 00:21:33,400
Committee has been really reluctant to

437
00:21:30,869 --> 00:21:37,239
make the fundamental changes necessary

438
00:21:33,400 --> 00:21:39,730
which are minor to open jail in order to

439
00:21:37,240 --> 00:21:43,299
make it properly multi-thread it's it's

440
00:21:39,730 --> 00:21:44,589
kind of weird but I don't know maybe

441
00:21:43,299 --> 00:21:46,779
because they're trying to push Vulcan

442
00:21:44,589 --> 00:21:49,149
now but even before before Vulcan was

443
00:21:46,779 --> 00:21:50,769
even a thing they seemed reluctant so I

444
00:21:49,150 --> 00:21:52,809
don't think it's just because of Vulcan

445
00:21:50,769 --> 00:21:54,160
that they don't want to do it it's might

446
00:21:52,808 --> 00:21:58,190
just because it's too big of a change

447
00:21:54,160 --> 00:22:01,429
for them or I don't know what

448
00:21:58,190 --> 00:22:03,740
this is obviously kind of tricky and

449
00:22:01,429 --> 00:22:07,250
I'll show you why it's kind of tricky

450
00:22:03,740 --> 00:22:09,230
here and i'll discuss sort of some

451
00:22:07,250 --> 00:22:11,509
things that we can do and some things

452
00:22:09,230 --> 00:22:13,690
that we can't do so if you take a look

453
00:22:11,509 --> 00:22:16,220
at what happens in our open gel layer

454
00:22:13,690 --> 00:22:18,679
let me take a look at where there it is

455
00:22:16,220 --> 00:22:20,419
so we've got an allocate texture and a

456
00:22:18,679 --> 00:22:22,669
deallocate texture call you can see how

457
00:22:20,419 --> 00:22:27,440
these generally work and what you've got

458
00:22:22,669 --> 00:22:29,870
there is you create a texture handle and

459
00:22:27,440 --> 00:22:31,669
you send the card a texture image that

460
00:22:29,869 --> 00:22:35,408
you want to use and then you set some

461
00:22:31,669 --> 00:22:38,450
parameters on it and then off you go now

462
00:22:35,409 --> 00:22:40,278
normally you would not call GL flush in

463
00:22:38,450 --> 00:22:41,990
a texture buying situation like a

464
00:22:40,278 --> 00:22:44,119
texture submission situation like this

465
00:22:41,990 --> 00:22:45,950
because in single-threaded opengl all

466
00:22:44,119 --> 00:22:48,378
commands are assumed to execute in order

467
00:22:45,950 --> 00:22:49,850
so you the purpose of the GL flush here

468
00:22:48,378 --> 00:22:51,678
is to say finish the OpenGL commands

469
00:22:49,849 --> 00:22:52,939
that I've given you so far normally we

470
00:22:51,679 --> 00:22:55,190
wouldn't care about finishing them so

471
00:22:52,940 --> 00:22:57,470
far because any rendering that we might

472
00:22:55,190 --> 00:22:59,990
do with the texture that we submitted

473
00:22:57,470 --> 00:23:01,069
with that GL text image 2d call is odd

474
00:22:59,990 --> 00:23:03,048
it's going to happen later in the

475
00:23:01,069 --> 00:23:05,000
command stream ergo we know that the

476
00:23:03,048 --> 00:23:07,339
text image 2d specification will have

477
00:23:05,000 --> 00:23:09,859
finished by the time that that rendering

478
00:23:07,339 --> 00:23:11,569
occurs as far as the GL is concerned

479
00:23:09,859 --> 00:23:15,069
because that's like a guarantee that the

480
00:23:11,569 --> 00:23:18,079
GL provides in single-threaded opengl

481
00:23:15,069 --> 00:23:20,569
you know that commands execute as if

482
00:23:18,079 --> 00:23:21,949
they were in order that doesn't mean

483
00:23:20,569 --> 00:23:24,798
they actually acute in order it just

484
00:23:21,950 --> 00:23:27,019
means that from your perspective they

485
00:23:24,798 --> 00:23:30,829
will appear to have executed in order so

486
00:23:27,019 --> 00:23:33,169
therefore it would not be bug so we can

487
00:23:30,829 --> 00:23:35,869
get rid of this openness a GL flush here

488
00:23:33,169 --> 00:23:40,190
and in theory i think i am on the AMD

489
00:23:35,869 --> 00:23:43,178
parts it still just kind of works what

490
00:23:40,190 --> 00:23:47,090
happened what happened here did I

491
00:23:43,179 --> 00:23:54,269
tonight do some kind of thing wrong with

492
00:23:47,089 --> 00:23:59,458
the what did I do

493
00:23:54,269 --> 00:24:03,358
I thought I did I thought I left it

494
00:23:59,459 --> 00:24:05,700
where we were you know what I must have

495
00:24:03,358 --> 00:24:09,798
been standing up a little bit more let

496
00:24:05,700 --> 00:24:09,798
me let me um tweak that a little bit

497
00:24:15,769 --> 00:24:23,038
that better all right yeah I think that

498
00:24:21,959 --> 00:24:23,969
all right I don't know what happened

499
00:24:23,038 --> 00:24:25,398
there I guess I must have tweaked it

500
00:24:23,969 --> 00:24:41,909
when I was standing in a different

501
00:24:25,398 --> 00:24:45,748
amount of scale um so yeah okay uh so

502
00:24:41,909 --> 00:24:48,389
anyway with the back to our story so you

503
00:24:45,749 --> 00:24:50,459
know that'll usually work on AMD card as

504
00:24:48,388 --> 00:24:52,228
well as far as we can tell so the GL

505
00:24:50,459 --> 00:24:53,879
flush was in there we had put it in

506
00:24:52,229 --> 00:24:56,788
there for people using in video where it

507
00:24:53,878 --> 00:24:58,648
didn't work at all uh so what's the

508
00:24:56,788 --> 00:25:03,388
problem here well the problem with the

509
00:24:58,648 --> 00:25:06,988
open Jill multi-threaded stuff wanting

510
00:25:03,388 --> 00:25:10,288
to move to single what we were doing if

511
00:25:06,989 --> 00:25:13,669
you take a look at width you do handmade

512
00:25:10,288 --> 00:25:17,098
is we were doing wiggle create context

513
00:25:13,669 --> 00:25:24,320
for a number of contexts so I don't

514
00:25:17,098 --> 00:25:24,319
really where is this guy it's

515
00:25:31,869 --> 00:25:46,250
let go oops it's not an it or wiggle

516
00:25:43,450 --> 00:25:59,720
piece it would just winter too in it

517
00:25:46,250 --> 00:26:01,250
opengl there it is it's this one went

518
00:25:59,720 --> 00:26:04,339
through to get thread start up for GL

519
00:26:01,250 --> 00:26:06,500
that's the one I was looking for so what

520
00:26:04,339 --> 00:26:09,079
we do here is we have these low priority

521
00:26:06,500 --> 00:26:11,808
queues that are used for streaming

522
00:26:09,079 --> 00:26:15,139
assets and what those low priority

523
00:26:11,808 --> 00:26:17,928
queues could do is they can issue reads

524
00:26:15,140 --> 00:26:20,600
like to load stuff and then as soon as

525
00:26:17,929 --> 00:26:23,840
those reads complete they can submit the

526
00:26:20,599 --> 00:26:26,449
results to OpenGL using their own OpenGL

527
00:26:23,839 --> 00:26:28,220
context but the problem with that is now

528
00:26:26,450 --> 00:26:30,080
we have multiple threads talking to jail

529
00:26:28,220 --> 00:26:32,210
at the same time which pretty much

530
00:26:30,079 --> 00:26:33,678
freaks GL out as far as I've seen

531
00:26:32,210 --> 00:26:36,950
especially like we were saying on the

532
00:26:33,679 --> 00:26:38,929
nvidia cards it just doesn't like it so

533
00:26:36,950 --> 00:26:41,690
the question here is what can we

534
00:26:38,929 --> 00:26:43,610
actually do in order to make it so that

535
00:26:41,690 --> 00:26:45,798
these separate threads are doing asset

536
00:26:43,609 --> 00:26:47,808
loading have some way of making sure

537
00:26:45,798 --> 00:26:51,048
that their textures actually get

538
00:26:47,808 --> 00:26:53,298
submitted and unfortunately really the

539
00:26:51,048 --> 00:26:55,788
only thing we can do is make this part

540
00:26:53,298 --> 00:26:58,279
of the operation synchronous so what we

541
00:26:55,788 --> 00:27:01,519
kind of have to do is instead of calling

542
00:26:58,279 --> 00:27:05,359
allocate texture and deallocate texture

543
00:27:01,519 --> 00:27:08,058
we kind of just have to have a bind on

544
00:27:05,359 --> 00:27:09,949
demand thing that occurs like we we

545
00:27:08,058 --> 00:27:13,250
really do I don't think there's going to

546
00:27:09,950 --> 00:27:15,380
be anything else like we kind of just

547
00:27:13,250 --> 00:27:18,288
need to have it so that when we're going

548
00:27:15,380 --> 00:27:20,929
to use these textures we bind them now

549
00:27:18,288 --> 00:27:22,839
what we originally had in there was not

550
00:27:20,929 --> 00:27:26,509
the most optimal thing we could have

551
00:27:22,839 --> 00:27:28,189
presumably and let me say sort of a

552
00:27:26,509 --> 00:27:34,220
little bit of a caveat here but I'll

553
00:27:28,190 --> 00:27:37,340
just sort of point it out so if we if we

554
00:27:34,220 --> 00:27:39,798
think about what's going on here we have

555
00:27:37,339 --> 00:27:41,399
this notion that you know we're kind of

556
00:27:39,798 --> 00:27:46,190
going forwards in time here

557
00:27:41,400 --> 00:27:49,200
right and you know we've got some frames

558
00:27:46,190 --> 00:27:50,610
so here is frame 0 here's frame one

559
00:27:49,200 --> 00:27:54,299
hears frame two years frame three or

560
00:27:50,609 --> 00:27:56,159
whatever and so what we have is we've

561
00:27:54,299 --> 00:27:57,960
got a mainline thread that's coming

562
00:27:56,160 --> 00:28:01,830
through here and doing like our update

563
00:27:57,960 --> 00:28:03,720
render and then at the same time we have

564
00:28:01,829 --> 00:28:06,720
some some side band threads are doing

565
00:28:03,720 --> 00:28:08,339
things like loading assets right and

566
00:28:06,720 --> 00:28:10,650
these threads have nothing to do with

567
00:28:08,339 --> 00:28:12,119
the frame boundaries right this thread

568
00:28:10,650 --> 00:28:13,560
is like really concerned about frame

569
00:28:12,119 --> 00:28:15,000
boundaries but these threads don't care

570
00:28:13,559 --> 00:28:16,710
at all they're just loading assets and

571
00:28:15,000 --> 00:28:18,480
when the assets get there whenever the

572
00:28:16,710 --> 00:28:21,170
disk says hey here's your asset it's

573
00:28:18,480 --> 00:28:25,319
like great thank you all right that's it

574
00:28:21,170 --> 00:28:28,620
so when these loads finish the problem

575
00:28:25,319 --> 00:28:30,539
with having the load finish is now we

576
00:28:28,619 --> 00:28:32,489
have the data in memory but we don't

577
00:28:30,539 --> 00:28:34,259
have it sent to the GPU at all right we

578
00:28:32,490 --> 00:28:36,450
haven't submitted to open jail so it's

579
00:28:34,259 --> 00:28:38,759
we've loaded the texture off disc but we

580
00:28:36,450 --> 00:28:40,740
haven't minute to the GPU well in this

581
00:28:38,759 --> 00:28:43,500
update and render step what we were

582
00:28:40,740 --> 00:28:46,890
doing originally before we try to do the

583
00:28:43,500 --> 00:28:49,140
secondary context for submission what we

584
00:28:46,890 --> 00:28:52,590
were doing originally is when this thing

585
00:28:49,140 --> 00:28:54,570
got to somebody that had been loaded but

586
00:28:52,589 --> 00:28:56,429
didn't have a texture handle bound when

587
00:28:54,569 --> 00:28:58,589
it was going to render right when was

588
00:28:56,430 --> 00:29:02,460
about to render it would call GL text

589
00:28:58,589 --> 00:29:04,679
image right there and so really that's

590
00:29:02,460 --> 00:29:07,470
potentially much later than when it

591
00:29:04,680 --> 00:29:10,920
could have called GL text image because

592
00:29:07,470 --> 00:29:13,860
let's say on frame 0 by the time I got

593
00:29:10,920 --> 00:29:17,340
to the OpenGL render submission step

594
00:29:13,859 --> 00:29:19,679
right which is maybe right here let's

595
00:29:17,339 --> 00:29:22,199
say that it had been loaded well I could

596
00:29:19,680 --> 00:29:24,720
submit it now even if I'm not going to

597
00:29:22,200 --> 00:29:26,700
use it until next frame and that gives

598
00:29:24,720 --> 00:29:28,860
the driver more visibility of that

599
00:29:26,700 --> 00:29:32,039
texture to start the transfer earlier

600
00:29:28,859 --> 00:29:34,619
now we don't know that the driver will

601
00:29:32,039 --> 00:29:38,779
start the transfer earlier we just know

602
00:29:34,619 --> 00:29:43,289
that it could start the transfer earlier

603
00:29:38,779 --> 00:29:46,740
okay so I think about most basic what we

604
00:29:43,289 --> 00:29:48,839
would like to do is that like have there

605
00:29:46,740 --> 00:29:51,870
be a queue where we can stuff these

606
00:29:48,839 --> 00:29:54,119
textures so that they can be updated in

607
00:29:51,869 --> 00:29:55,379
that fashion right now there's another

608
00:29:54,119 --> 00:29:57,029
thing we could do

609
00:29:55,380 --> 00:29:59,940
that I don't know if we actually will do

610
00:29:57,029 --> 00:30:03,180
or not but that's a more advanced thing

611
00:29:59,940 --> 00:30:06,570
right and that is what's happening right

612
00:30:03,180 --> 00:30:10,259
now is in OpenGL when we do an

613
00:30:06,569 --> 00:30:15,629
allocation so I let me let me try to

614
00:30:10,259 --> 00:30:17,779
explain it like this so on the GPU we

615
00:30:15,630 --> 00:30:19,980
have this is the memory of the GPU

616
00:30:17,779 --> 00:30:22,259
there's going to be a place where this

617
00:30:19,980 --> 00:30:23,880
texture goes and lives right once we

618
00:30:22,259 --> 00:30:25,680
transfer it down there to the card so

619
00:30:23,880 --> 00:30:27,300
all the pixels that are in that texture

620
00:30:25,680 --> 00:30:28,769
the texels that are in that texture are

621
00:30:27,299 --> 00:30:30,210
going to be moved to GPU because that's

622
00:30:28,769 --> 00:30:34,139
really need to be in order to be used

623
00:30:30,210 --> 00:30:36,240
for rendering right and so there's going

624
00:30:34,140 --> 00:30:41,790
to be some stuff here that's like GPU

625
00:30:36,240 --> 00:30:44,160
mapped memory this is actually memory on

626
00:30:41,789 --> 00:30:46,230
the cpu side of things so this is like

627
00:30:44,160 --> 00:30:48,210
this is our DRAM you know this is this

628
00:30:46,230 --> 00:30:52,950
is memory in the computer this is the

629
00:30:48,210 --> 00:30:54,960
GPUs Ram over here you know this is the

630
00:30:52,950 --> 00:30:58,860
card this is in the PCI slot right this

631
00:30:54,960 --> 00:31:02,130
is on the motherboard okay and so

632
00:30:58,859 --> 00:31:04,769
somewhere that texture has to be here in

633
00:31:02,130 --> 00:31:07,320
order for it to transfer because the GPU

634
00:31:04,769 --> 00:31:10,079
over the PCI bus can only see memory

635
00:31:07,319 --> 00:31:12,509
that's in regions that it knows about

636
00:31:10,079 --> 00:31:14,939
right and these are just getting into

637
00:31:12,509 --> 00:31:18,539
sort of the vagaries of how memory is

638
00:31:14,940 --> 00:31:21,990
sort of transferred between PCI cards

639
00:31:18,539 --> 00:31:23,730
and the motherboard right but how that

640
00:31:21,990 --> 00:31:26,309
sort of works there's a number of ways

641
00:31:23,730 --> 00:31:28,470
it can work actually but a lot of times

642
00:31:26,309 --> 00:31:31,139
the way that works is there's address

643
00:31:28,470 --> 00:31:34,019
ranges that are in physical memory

644
00:31:31,140 --> 00:31:36,240
reserved that are mapped for the GPU and

645
00:31:34,019 --> 00:31:38,309
when you put something in there the GPU

646
00:31:36,240 --> 00:31:40,559
can can sort of transfer it over the bus

647
00:31:38,309 --> 00:31:42,659
and say I want this memory range start

648
00:31:40,559 --> 00:31:45,359
start sucking it over and it can do that

649
00:31:42,660 --> 00:31:47,880
without the CPU having to manhandle it

650
00:31:45,359 --> 00:31:49,740
right so it can be like a GPU transfer

651
00:31:47,880 --> 00:31:51,330
that's largely asynchronous of the CPU

652
00:31:49,740 --> 00:31:54,779
having to sit there and feed it bites or

653
00:31:51,329 --> 00:31:57,629
anything like that right uh so what that

654
00:31:54,779 --> 00:32:01,730
means is if we just do an allocation

655
00:31:57,630 --> 00:32:04,410
right and here's our CPU non mapped

656
00:32:01,730 --> 00:32:06,329
memory so this is just regular old cpu

657
00:32:04,410 --> 00:32:09,190
memory hasn't been mapped specifically

658
00:32:06,329 --> 00:32:11,919
for visibility on the GPU if we just

659
00:32:09,190 --> 00:32:13,390
allocated texture here then what may

660
00:32:11,920 --> 00:32:15,789
have to happen depending on the

661
00:32:13,390 --> 00:32:18,220
architecture is that first it has to be

662
00:32:15,789 --> 00:32:20,680
copied from non map memory into mapped

663
00:32:18,220 --> 00:32:23,740
memory and then it can be copied from

664
00:32:20,680 --> 00:32:26,080
non from map memory into actual GPU

665
00:32:23,740 --> 00:32:28,750
texture memory right so it's actually

666
00:32:26,079 --> 00:32:30,549
two times the cop copies that are

667
00:32:28,750 --> 00:32:35,319
necessary right instead of one copy it's

668
00:32:30,549 --> 00:32:38,109
two copies now we don't necessarily know

669
00:32:35,319 --> 00:32:40,359
that that second copy hurts us we don't

670
00:32:38,109 --> 00:32:41,559
have really performance metrics at this

671
00:32:40,359 --> 00:32:44,039
point we're not at the point where we're

672
00:32:41,559 --> 00:32:46,990
trying to profile our game in that way

673
00:32:44,039 --> 00:32:48,909
but that is an additional step we could

674
00:32:46,990 --> 00:32:52,259
take and the step we could take to

675
00:32:48,910 --> 00:32:54,759
eliminate that copy is by using

676
00:32:52,259 --> 00:32:57,640
effectively what what is often called

677
00:32:54,759 --> 00:32:59,470
pinned memory you can do this with pixel

678
00:32:57,640 --> 00:33:01,570
buffer objects and you can also do it

679
00:32:59,470 --> 00:33:02,529
with GPU map memory extensions and

680
00:33:01,569 --> 00:33:05,859
there's a whole bunch of everything's

681
00:33:02,529 --> 00:33:10,089
could do but basically what happens here

682
00:33:05,859 --> 00:33:13,659
is we can allocate memory ourselves in

683
00:33:10,089 --> 00:33:17,769
the GPU mapped memory space and just

684
00:33:13,660 --> 00:33:20,980
load our actual disk read can be

685
00:33:17,769 --> 00:33:23,680
targeted to that location and at that

686
00:33:20,980 --> 00:33:25,690
point what happens is instead of ever

687
00:33:23,680 --> 00:33:29,170
putting it here we just put it directly

688
00:33:25,690 --> 00:33:30,580
here right and so you can see why that

689
00:33:29,170 --> 00:33:33,250
might be important if the memory

690
00:33:30,579 --> 00:33:34,990
bandwidth is the bottleneck in this part

691
00:33:33,250 --> 00:33:36,970
of our process if we find that that's a

692
00:33:34,990 --> 00:33:39,400
problem then we would want to optimize

693
00:33:36,970 --> 00:33:41,289
that away by eliminating one of those

694
00:33:39,400 --> 00:33:43,810
copies so hopefully that makes some

695
00:33:41,289 --> 00:33:45,009
sense it's a pretty basic idea it turns

696
00:33:43,809 --> 00:33:46,539
out to be a little bit fiddly because

697
00:33:45,009 --> 00:33:47,890
you got to do a bunch of random OpenGL

698
00:33:46,539 --> 00:33:53,529
calls to make it happen but you get the

699
00:33:47,890 --> 00:33:54,820
idea all right so let's take the simpler

700
00:33:53,529 --> 00:33:56,889
step first because we're going to have

701
00:33:54,819 --> 00:33:58,929
to do that in both cases right even if

702
00:33:56,890 --> 00:34:01,750
we go and do the more complicated thing

703
00:33:58,930 --> 00:34:03,430
we would still have to do this part of

704
00:34:01,750 --> 00:34:05,890
it as well which is to sort of separate

705
00:34:03,430 --> 00:34:08,380
out that download and what I'm basically

706
00:34:05,890 --> 00:34:12,430
talking about here is inside handmade

707
00:34:08,380 --> 00:34:14,920
OpenGL what I'd like to do is I'd like

708
00:34:12,429 --> 00:34:17,199
to have a sort of a new function in here

709
00:34:14,920 --> 00:34:19,570
we've got OpenGL render commands I'd

710
00:34:17,199 --> 00:34:23,789
like to have another one which is like

711
00:34:19,570 --> 00:34:23,789
OpenGL upload textures

712
00:34:26,338 --> 00:34:33,128
right and what opengl upload textures

713
00:34:30,010 --> 00:34:37,179
would do is open jello textures would do

714
00:34:33,128 --> 00:34:39,159
something like take a chain of stuff

715
00:34:37,179 --> 00:34:41,559
that it needs to go through and upload

716
00:34:39,159 --> 00:34:44,378
so rather than allocate texture ever

717
00:34:41,559 --> 00:34:47,649
existing here instead what would happen

718
00:34:44,378 --> 00:34:49,719
is or you know what and we could do both

719
00:34:47,648 --> 00:34:51,098
of these we could do open Jill you know

720
00:34:49,719 --> 00:34:53,638
manage textures or something like that

721
00:34:51,099 --> 00:34:56,169
what we could do here is say alright

722
00:34:53,639 --> 00:34:58,240
let's just copy both of these things in

723
00:34:56,168 --> 00:35:00,608
here let's eliminate those callbacks

724
00:34:58,239 --> 00:35:02,439
they won't be there anymore and we'll

725
00:35:00,608 --> 00:35:06,549
just have like two things that can do

726
00:35:02,440 --> 00:35:09,068
either it can do the blind texture or it

727
00:35:06,550 --> 00:35:10,750
can do the delete of a texture so in

728
00:35:09,068 --> 00:35:12,369
either case you can do it but basically

729
00:35:10,750 --> 00:35:14,170
what we're doing is we're just taking

730
00:35:12,369 --> 00:35:18,730
the allocate texture and deallocate

731
00:35:14,170 --> 00:35:21,670
texture operations and we are deferring

732
00:35:18,730 --> 00:35:23,079
them so rather than you know if you look

733
00:35:21,670 --> 00:35:24,159
at how it's working right now we have

734
00:35:23,079 --> 00:35:29,079
these separate threads and they're

735
00:35:24,159 --> 00:35:31,239
calling this immediately so I I again I

736
00:35:29,079 --> 00:35:32,530
apologize for be laboring this point if

737
00:35:31,239 --> 00:35:33,879
you're someone who kind of obviously

738
00:35:32,530 --> 00:35:35,950
just knows already what I'm talking

739
00:35:33,880 --> 00:35:37,269
about here but I just want to talk about

740
00:35:35,949 --> 00:35:38,439
this one more time just make it

741
00:35:37,269 --> 00:35:41,530
absolutely clear in fact this is the

742
00:35:38,440 --> 00:35:42,940
diagram that you actually want remember

743
00:35:41,530 --> 00:35:44,410
so we've got these separate threads are

744
00:35:42,940 --> 00:35:46,389
doing the loading what they were doing

745
00:35:44,409 --> 00:35:48,489
before is they were just asynchronously

746
00:35:46,389 --> 00:35:50,858
calling the GL when they were ready to

747
00:35:48,489 --> 00:35:53,078
download the texture right here and we

748
00:35:50,858 --> 00:35:55,358
can't allow that right because they

749
00:35:53,079 --> 00:35:57,339
can't have their own opengl context

750
00:35:55,358 --> 00:36:00,369
because having multiple opengl context

751
00:35:57,338 --> 00:36:02,170
was proving buggy right so what we're

752
00:36:00,369 --> 00:36:04,690
going to do instead is just we'll do our

753
00:36:02,170 --> 00:36:06,639
own atomic operation here to build some

754
00:36:04,690 --> 00:36:09,909
little list of deferred operations we

755
00:36:06,639 --> 00:36:11,920
need to do hand it off to this thread so

756
00:36:09,909 --> 00:36:14,348
that it can all be done on one thread

757
00:36:11,920 --> 00:36:18,519
right opengl will only ever see that one

758
00:36:14,349 --> 00:36:20,740
thread so we would get rid of allocate

759
00:36:18,519 --> 00:36:22,210
in texture and deallocate texture and

760
00:36:20,739 --> 00:36:23,769
instead what we have is just opened jail

761
00:36:22,210 --> 00:36:26,019
managed textures or something like this

762
00:36:23,769 --> 00:36:27,940
and opengl managed textures would take

763
00:36:26,019 --> 00:36:30,489
just some kind of an instruction stream

764
00:36:27,940 --> 00:36:35,619
that basically just tells it this sort

765
00:36:30,489 --> 00:36:36,729
of stuff right and so let's take a look

766
00:36:35,619 --> 00:36:39,070
at what that we

767
00:36:36,730 --> 00:36:41,199
be we already pretty much know what the

768
00:36:39,070 --> 00:36:43,330
API is because we have allocate texture

769
00:36:41,199 --> 00:36:45,009
and deallocate texture so what we can do

770
00:36:43,329 --> 00:36:49,000
is we could just pull these out of here

771
00:36:45,010 --> 00:36:50,560
right and and say that we've got inside

772
00:36:49,000 --> 00:36:53,170
you know rendered H or something like

773
00:36:50,559 --> 00:36:55,570
that say that we have a deferred texture

774
00:36:53,170 --> 00:36:58,690
operation right so we could call this

775
00:36:55,570 --> 00:37:00,670
like deferred texture up for something

776
00:36:58,690 --> 00:37:03,039
like that right or maybe just even call

777
00:37:00,670 --> 00:37:04,780
it a texture up so that we kind of know

778
00:37:03,039 --> 00:37:06,400
that there's this idea of texture

779
00:37:04,780 --> 00:37:08,230
operations that have to happen we can

780
00:37:06,400 --> 00:37:09,639
even make this the relatively platform

781
00:37:08,230 --> 00:37:10,869
generic in the sense that you can have

782
00:37:09,639 --> 00:37:14,199
these texts drops that need to happen

783
00:37:10,869 --> 00:37:16,119
and even the bitmap renderer could still

784
00:37:14,199 --> 00:37:19,149
process them it would just throw them

785
00:37:16,119 --> 00:37:20,799
away right so they you know we wouldn't

786
00:37:19,150 --> 00:37:22,450
have to even special case it we could

787
00:37:20,800 --> 00:37:24,640
always build the texture op list and

788
00:37:22,449 --> 00:37:26,769
then the bitmap render would just go let

789
00:37:24,639 --> 00:37:28,629
go whatever like I don't need to deal

790
00:37:26,769 --> 00:37:30,309
with that we can also choose to make

791
00:37:28,630 --> 00:37:32,559
this just part of the regular stream and

792
00:37:30,309 --> 00:37:38,079
pass along but we'll get to that in a

793
00:37:32,559 --> 00:37:39,519
second so let's just take this on moving

794
00:37:38,079 --> 00:37:41,730
those operations just right up in and

795
00:37:39,519 --> 00:37:44,289
I'm just going to take and and basically

796
00:37:41,730 --> 00:37:46,809
do sort of a union kind of a thing here

797
00:37:44,289 --> 00:37:49,929
where we just say like okay we've got a

798
00:37:46,809 --> 00:37:55,929
texture up we can have like a texture up

799
00:37:49,929 --> 00:37:57,909
allocate and a texture op deallocate and

800
00:37:55,929 --> 00:38:00,899
we know that d allocating a texture is

801
00:37:57,909 --> 00:38:03,250
just going to take you know a void star

802
00:38:00,900 --> 00:38:06,579
for the texture and we know that

803
00:38:03,250 --> 00:38:12,309
allocating a texture is just going to do

804
00:38:06,579 --> 00:38:18,400
a width sort of height data operation

805
00:38:12,309 --> 00:38:21,549
here but and this is a big but we have

806
00:38:18,400 --> 00:38:26,940
sort of this additional problem which is

807
00:38:21,550 --> 00:38:29,620
that we don't actually know where those

808
00:38:26,940 --> 00:38:32,429
where to put back the results and this

809
00:38:29,619 --> 00:38:35,969
is always this is in fact I would argue

810
00:38:32,429 --> 00:38:38,019
the single most crucial aspect of

811
00:38:35,969 --> 00:38:41,019
multi-threaded programming that makes it

812
00:38:38,019 --> 00:38:42,519
more difficult than single threaded

813
00:38:41,019 --> 00:38:44,259
programming it's going to be a weird

814
00:38:42,519 --> 00:38:47,380
thing to say but it's and it's probably

815
00:38:44,260 --> 00:38:50,500
a minority opinion but I find that

816
00:38:47,380 --> 00:38:52,780
concurrency is one thing but

817
00:38:50,500 --> 00:38:54,969
flow control is really the harder thing

818
00:38:52,780 --> 00:38:56,590
right and the nice thing about

819
00:38:54,969 --> 00:38:58,779
single-threaded programming is that the

820
00:38:56,590 --> 00:39:01,000
flow control in terms of return values

821
00:38:58,780 --> 00:39:03,160
always just works if I want to do

822
00:39:01,000 --> 00:39:05,860
something I say like oh you know do this

823
00:39:03,159 --> 00:39:07,239
thing and I know that it's going to go

824
00:39:05,860 --> 00:39:08,500
do it and come back and then I'm going

825
00:39:07,239 --> 00:39:10,329
to have the results of that thing and

826
00:39:08,500 --> 00:39:11,860
it's a very easy way to structure a

827
00:39:10,329 --> 00:39:14,259
program there's a lot of good practices

828
00:39:11,860 --> 00:39:16,870
you can follow to make your code fairly

829
00:39:14,260 --> 00:39:18,730
you know unlikely to have a lot of bugs

830
00:39:16,869 --> 00:39:19,960
and you can make it kind of clean and

831
00:39:18,730 --> 00:39:21,429
easy to read and all these other sorts

832
00:39:19,960 --> 00:39:23,829
of things but as soon as you go to

833
00:39:21,429 --> 00:39:25,599
multi-threading all that goes away when

834
00:39:23,829 --> 00:39:27,159
you have multi threading it's typical

835
00:39:25,599 --> 00:39:28,420
that I have a couple operations I want

836
00:39:27,159 --> 00:39:30,339
to do they're going to complete

837
00:39:28,420 --> 00:39:32,320
asynchronously and I've got this really

838
00:39:30,340 --> 00:39:35,260
nasty routing problem all of a sudden

839
00:39:32,320 --> 00:39:37,809
how do I get the results of one thing to

840
00:39:35,260 --> 00:39:40,420
the input of another thing because now

841
00:39:37,809 --> 00:39:42,159
there isn't this sort of natural glue of

842
00:39:40,420 --> 00:39:43,619
how the code is written with a stack and

843
00:39:42,159 --> 00:39:46,569
all these other sorts of things right

844
00:39:43,619 --> 00:39:47,829
and so that's when you start getting all

845
00:39:46,570 --> 00:39:49,390
these other things of like well there's

846
00:39:47,829 --> 00:39:51,730
co routines but then the co routines

847
00:39:49,389 --> 00:39:53,259
kind of have to be slightly decoupled

848
00:39:51,730 --> 00:39:54,610
from the things and you know you kind of

849
00:39:53,260 --> 00:39:56,050
need compiler support forward or

850
00:39:54,610 --> 00:39:57,579
language support for it to really make

851
00:39:56,050 --> 00:39:59,200
it all that clean in the first place

852
00:39:57,579 --> 00:40:01,630
because you know if you are actually

853
00:39:59,199 --> 00:40:02,799
writing it in a language like C++ the

854
00:40:01,630 --> 00:40:04,900
features for this are woefully

855
00:40:02,800 --> 00:40:08,440
inadequate for it you know shocking

856
00:40:04,900 --> 00:40:10,990
they're a c++ feature being woefully

857
00:40:08,440 --> 00:40:13,150
inadequate who would have thunk it but

858
00:40:10,989 --> 00:40:14,679
anyway so we'll have this problem and

859
00:40:13,150 --> 00:40:17,380
what do I mean by that well if we go

860
00:40:14,679 --> 00:40:20,469
take a look at what happens in our asset

861
00:40:17,380 --> 00:40:22,450
system where this is actually called you

862
00:40:20,469 --> 00:40:24,429
can see what we were doing is inside

863
00:40:22,449 --> 00:40:25,929
finalize asset fit map well we have this

864
00:40:24,429 --> 00:40:27,819
little thing here where we say like hey

865
00:40:25,929 --> 00:40:29,529
let's allocated texture well if we're

866
00:40:27,820 --> 00:40:31,660
going to allocate a texture and stick it

867
00:40:29,530 --> 00:40:33,730
in this texture handle well how are we

868
00:40:31,659 --> 00:40:35,319
going to do that if we if that's not

869
00:40:33,730 --> 00:40:37,360
going to complete for a while right if

870
00:40:35,320 --> 00:40:40,510
the allocate texture call isn't going to

871
00:40:37,360 --> 00:40:42,610
complete for who knows how long well we

872
00:40:40,510 --> 00:40:46,030
can't say equal to texture handle right

873
00:40:42,610 --> 00:40:47,620
we can't actually do that so that's the

874
00:40:46,030 --> 00:40:49,390
problem that we have to deal with now

875
00:40:47,619 --> 00:40:51,130
the easiest way to deal with this is

876
00:40:49,389 --> 00:40:53,109
actually just to give it a pointer of

877
00:40:51,130 --> 00:40:54,670
this and say hey write it into it write

878
00:40:53,110 --> 00:40:58,950
it in there whenever you get a chance

879
00:40:54,670 --> 00:41:01,240
and we can do that but there's a portent

880
00:40:58,949 --> 00:41:03,449
thing that we have to make sure that we

881
00:41:01,239 --> 00:41:05,939
don't do which is that we can

882
00:41:03,449 --> 00:41:10,259
make sure we can't actually mark this

883
00:41:05,940 --> 00:41:12,960
thing as being in its final state until

884
00:41:10,260 --> 00:41:14,820
that actually happens right so you can

885
00:41:12,960 --> 00:41:17,190
see here we do this thing where we do

886
00:41:14,820 --> 00:41:20,220
like work asset state equals work final

887
00:41:17,190 --> 00:41:22,110
state and I believe that you know part

888
00:41:20,219 --> 00:41:25,079
of that process is like well what state

889
00:41:22,110 --> 00:41:26,519
is this bitmap in we know we can like

890
00:41:25,079 --> 00:41:29,099
evict it or not evicted or whatever

891
00:41:26,519 --> 00:41:31,440
we're not going to be able to do that

892
00:41:29,099 --> 00:41:33,509
worked final state bit in here instead

893
00:41:31,440 --> 00:41:34,980
what's going to have to happen is the

894
00:41:33,510 --> 00:41:37,020
work final state is going to actually

895
00:41:34,980 --> 00:41:40,860
have to happen outside in the allocation

896
00:41:37,019 --> 00:41:43,170
right so the person who allocates is

897
00:41:40,860 --> 00:41:46,140
going to have to set the state and the

898
00:41:43,170 --> 00:41:48,110
reason for that is if they didn't then

899
00:41:46,139 --> 00:41:50,730
it would be possible for somebody to

900
00:41:48,110 --> 00:41:53,610
think that it could free an asset that

901
00:41:50,730 --> 00:41:55,650
was being that was currently you know

902
00:41:53,610 --> 00:41:58,710
loaded think that it could free an asset

903
00:41:55,650 --> 00:42:01,289
but really the allocator hadn't actually

904
00:41:58,710 --> 00:42:03,869
finished running yet so when it went to

905
00:42:01,289 --> 00:42:05,940
free it when it after it had been freed

906
00:42:03,869 --> 00:42:07,619
it would go to try and write back the

907
00:42:05,940 --> 00:42:09,539
results and it would write back the

908
00:42:07,619 --> 00:42:11,369
results to some other thing that had now

909
00:42:09,539 --> 00:42:14,690
used that memory right and probably

910
00:42:11,369 --> 00:42:18,119
crash or do some other really bad stuff

911
00:42:14,690 --> 00:42:20,159
so we have this sort of you know

912
00:42:18,119 --> 00:42:21,779
inherent problem there that we're going

913
00:42:20,159 --> 00:42:24,839
to have to take care of which is

914
00:42:21,780 --> 00:42:27,930
effectively how do we make sure that our

915
00:42:24,840 --> 00:42:29,940
asset stays around long enough for the

916
00:42:27,929 --> 00:42:31,409
allocate call to complete and that's

917
00:42:29,940 --> 00:42:33,510
really the only thing that we have to

918
00:42:31,409 --> 00:42:35,250
make sure happens because otherwise

919
00:42:33,510 --> 00:42:39,210
fortunately in this circumstance it's

920
00:42:35,250 --> 00:42:42,869
pretty easy otherwise because we just

921
00:42:39,210 --> 00:42:45,809
have void star star like texture result

922
00:42:42,869 --> 00:42:50,400
right or a result handle or something

923
00:42:45,809 --> 00:42:52,289
like that so we just say hey we want

924
00:42:50,400 --> 00:42:53,849
this with this light in this data and we

925
00:42:52,289 --> 00:42:55,739
want you to put it here in the

926
00:42:53,849 --> 00:42:57,029
deallocate we just say oh this is the

927
00:42:55,739 --> 00:42:59,009
one we want you to calculate now d

928
00:42:57,030 --> 00:43:00,269
allocations a lot easier the reason d

929
00:42:59,010 --> 00:43:01,710
allocation is a lot easier because it's

930
00:43:00,269 --> 00:43:04,139
not going to call talk to us anymore

931
00:43:01,710 --> 00:43:05,639
right he doesn't have to go put the

932
00:43:04,139 --> 00:43:07,139
result anywhere because d allocations

933
00:43:05,639 --> 00:43:09,119
just like hey I don't want this anymore

934
00:43:07,139 --> 00:43:12,000
I don't care when you get around to it I

935
00:43:09,119 --> 00:43:13,739
don't need to know that you even did it

936
00:43:12,000 --> 00:43:16,670
I'm just telling you can do it and if

937
00:43:13,739 --> 00:43:19,399
you do it great and so that's you know

938
00:43:16,670 --> 00:43:21,980
that's that so at the moment I guess

939
00:43:19,400 --> 00:43:23,358
I'll just say like you know is allocate

940
00:43:21,980 --> 00:43:24,798
because we don't really need a type

941
00:43:23,358 --> 00:43:26,630
field for it cuz there's only two types

942
00:43:24,798 --> 00:43:33,199
and then i'll just say we've got a

943
00:43:26,630 --> 00:43:39,559
texture off allocate and a texture up

944
00:43:33,199 --> 00:43:41,598
deallocate and so with their texture up

945
00:43:39,559 --> 00:43:44,059
allocate and texture op deallocate here

946
00:43:41,599 --> 00:43:46,700
we can now sort of see how we will

947
00:43:44,059 --> 00:43:48,290
actually process this guy and we'll come

948
00:43:46,699 --> 00:43:50,419
back to the asset handling stuff in a

949
00:43:48,289 --> 00:43:52,670
second here but when i'm going to go

950
00:43:50,420 --> 00:43:54,889
manage these textures what i need to do

951
00:43:52,670 --> 00:43:57,318
now is say okay let's pretend i have a

952
00:43:54,889 --> 00:43:58,548
texture op stream presumably there's a

953
00:43:57,318 --> 00:44:00,829
next pointer or something like this so

954
00:43:58,548 --> 00:44:04,130
i'm going to kind of chew through these

955
00:44:00,829 --> 00:44:07,910
guys right and so i'm going to take a

956
00:44:04,130 --> 00:44:09,140
texture up that's like the first one and

957
00:44:07,909 --> 00:44:13,009
presumably what i'm going to do is

958
00:44:09,139 --> 00:44:17,210
something like texture up up equals

959
00:44:13,010 --> 00:44:19,640
first op equal OPP equals pop next and

960
00:44:17,210 --> 00:44:21,349
just walk through some list of these

961
00:44:19,639 --> 00:44:23,750
that i have to do oops that was what i

962
00:44:21,349 --> 00:44:28,250
want and so i'll come in here and say is

963
00:44:23,750 --> 00:44:32,210
this an allocation and if it is i'll do

964
00:44:28,250 --> 00:44:34,699
this path and if it's not i'll do this

965
00:44:32,210 --> 00:44:37,280
path and again these are exactly the

966
00:44:34,699 --> 00:44:39,250
same operations we already did if we

967
00:44:37,280 --> 00:44:41,480
take a look at what these operations are

968
00:44:39,250 --> 00:44:43,909
you can see that we have to do jen

969
00:44:41,480 --> 00:44:46,338
textures into a handle that's the same

970
00:44:43,909 --> 00:44:48,199
we have to bind it up we then have to

971
00:44:46,338 --> 00:44:50,048
specify the actual stuff here now this

972
00:44:48,199 --> 00:44:57,500
width and height is now going to come

973
00:44:50,048 --> 00:44:59,449
from the operation so is the data all of

974
00:44:57,500 --> 00:45:01,460
these parameters we just set by rote so

975
00:44:59,449 --> 00:45:03,108
they don't need to look up anything we

976
00:45:01,460 --> 00:45:05,599
then have to do some assertions here

977
00:45:03,108 --> 00:45:08,119
that we could fit inside of a void star

978
00:45:05,599 --> 00:45:10,460
but assuming that we can we then just

979
00:45:08,119 --> 00:45:13,338
have to actually assign this thing to

980
00:45:10,460 --> 00:45:15,829
the destination so we have a result

981
00:45:13,338 --> 00:45:20,289
handle here and we would do that

982
00:45:15,829 --> 00:45:23,660
conversion so once that's all good we

983
00:45:20,289 --> 00:45:25,548
were pretty much done with that when we

984
00:45:23,659 --> 00:45:27,769
want to go to do the opposite one which

985
00:45:25,548 --> 00:45:29,469
is deletion it's really simple we just

986
00:45:27,769 --> 00:45:32,380
pull out at that texture

987
00:45:29,469 --> 00:45:34,989
and do the deletion so that's all we're

988
00:45:32,380 --> 00:45:37,180
talking about here as far as open gel is

989
00:45:34,989 --> 00:45:40,329
concerned and managing those textures

990
00:45:37,179 --> 00:45:42,519
that is it there's nothing else to it

991
00:45:40,329 --> 00:45:45,579
let's go ahead and compile that just to

992
00:45:42,519 --> 00:45:49,269
get the arrows out of the way get rid of

993
00:45:45,579 --> 00:45:50,920
those and so here we sort of have this

994
00:45:49,269 --> 00:45:52,059
we're going to have to deal with how

995
00:45:50,920 --> 00:45:54,340
that's actually going to work obviously

996
00:45:52,059 --> 00:45:56,710
in a second the allocation and the DL

997
00:45:54,340 --> 00:46:01,210
occasion let's kind of come in here and

998
00:45:56,710 --> 00:46:04,030
make sure all this stuff makes sense so

999
00:46:01,210 --> 00:46:07,240
yeah this guy we could we could still

1000
00:46:04,030 --> 00:46:11,190
leave allocate texture I suppose looking

1001
00:46:07,239 --> 00:46:11,189
at that I want this to still be callable

1002
00:46:11,400 --> 00:46:17,769
presumably right so I guess I should

1003
00:46:13,960 --> 00:46:23,230
maybe leave it doing it the old way we

1004
00:46:17,769 --> 00:46:29,170
had it as a function let's say right

1005
00:46:23,230 --> 00:46:30,608
because I could do this because I kind

1006
00:46:29,170 --> 00:46:34,150
of forgot that we do want to call it

1007
00:46:30,608 --> 00:46:37,059
from another place so seems reasonable

1008
00:46:34,150 --> 00:46:40,240
to do so if I do go back to saying okay

1009
00:46:37,059 --> 00:46:43,779
hey there's a you know allocate texture

1010
00:46:40,239 --> 00:46:46,959
fall we'll say it's open Jill ok texture

1011
00:46:43,780 --> 00:46:48,339
there's not a platform specific function

1012
00:46:46,960 --> 00:46:52,139
or anything now it's just part of the

1013
00:46:48,338 --> 00:46:52,139
open jail normal up in jail layer

1014
00:46:58,949 --> 00:47:04,149
then we can still just leave it this way

1015
00:47:01,329 --> 00:47:06,489
I suppose and that seems fine to me I

1016
00:47:04,150 --> 00:47:08,650
don't have any pressing reason why it

1017
00:47:06,489 --> 00:47:10,838
has to be part of that call i'm fine

1018
00:47:08,650 --> 00:47:15,970
with other people so it would just look

1019
00:47:10,838 --> 00:47:23,320
like that right let's see put that up in

1020
00:47:15,969 --> 00:47:29,169
here okay and again I think that just

1021
00:47:23,320 --> 00:47:32,460
takes whip height and data right so

1022
00:47:29,170 --> 00:47:32,460
anything else it takes an early remember

1023
00:47:35,460 --> 00:47:44,019
that is supposed to be an equal sign

1024
00:47:39,389 --> 00:47:54,579
okay texture to be okay texture texture

1025
00:47:44,019 --> 00:48:05,130
handle opengl and what else we got up

1026
00:47:54,579 --> 00:48:05,130
with so that's actually allocate and

1027
00:48:07,349 --> 00:48:17,109
okay um yeah so I think that's all good

1028
00:48:14,369 --> 00:48:19,000
we don't have to set these anymore and

1029
00:48:17,108 --> 00:48:20,460
that's actually kind of nice right any

1030
00:48:19,000 --> 00:48:23,829
time we can get rid of a platform

1031
00:48:20,460 --> 00:48:26,679
callback thing I'm happy because I like

1032
00:48:23,829 --> 00:48:30,179
to keep that side of things as simple as

1033
00:48:26,679 --> 00:48:32,649
possible for obvious reasons I mean the

1034
00:48:30,179 --> 00:48:33,909
more straightforward the api's across

1035
00:48:32,650 --> 00:48:37,000
the boundary the easier it is for people

1036
00:48:33,909 --> 00:48:39,429
to port and to understand how to port

1037
00:48:37,000 --> 00:48:41,800
and also to just keeps the code from

1038
00:48:39,429 --> 00:48:44,139
getting too entangled and difficult so

1039
00:48:41,800 --> 00:48:46,930
that's kind of nice as well texture is

1040
00:48:44,139 --> 00:48:49,989
not a member of texture oops of texture

1041
00:48:46,929 --> 00:48:53,699
opti allocate is that really true if so

1042
00:48:49,989 --> 00:48:57,299
we we should do something about it huh

1043
00:48:53,699 --> 00:48:57,299
it's called handle

1044
00:48:58,679 --> 00:49:06,489
alright so now we have the ability to do

1045
00:49:03,909 --> 00:49:08,109
a processing of a list but we don't

1046
00:49:06,489 --> 00:49:10,299
actually have anything that ever builds

1047
00:49:08,110 --> 00:49:13,210
the list so what we kind of need to do

1048
00:49:10,300 --> 00:49:16,870
here is figure out how we're going to

1049
00:49:13,210 --> 00:49:19,360
have that process work now remember

1050
00:49:16,869 --> 00:49:24,549
we're sort of back in in the danger zone

1051
00:49:19,360 --> 00:49:26,320
now in that we have multiple threads who

1052
00:49:24,550 --> 00:49:31,950
want to be adding something to a list

1053
00:49:26,320 --> 00:49:35,350
and then we have you know a we have a

1054
00:49:31,949 --> 00:49:37,359
another person who wants to take things

1055
00:49:35,349 --> 00:49:39,489
off of that list and process them this

1056
00:49:37,360 --> 00:49:40,780
is traditionally in multi-threading

1057
00:49:39,489 --> 00:49:42,399
we've kind of mentioned before but it's

1058
00:49:40,780 --> 00:49:45,480
called multiple producer single consumer

1059
00:49:42,400 --> 00:49:47,470
a lot of times in multi threading

1060
00:49:45,480 --> 00:49:49,059
programming for whatever reason they

1061
00:49:47,469 --> 00:49:51,159
talk about the concept of producer and

1062
00:49:49,059 --> 00:49:52,750
consumer and the idea is a producer is

1063
00:49:51,159 --> 00:49:54,849
somebody who sort of generates things on

1064
00:49:52,750 --> 00:49:57,309
a list their tasks or work to do or

1065
00:49:54,849 --> 00:49:58,869
whatever and a consumer is somebody who

1066
00:49:57,309 --> 00:50:01,599
takes those things off the list and

1067
00:49:58,869 --> 00:50:03,279
actually does them so usually there's

1068
00:50:01,599 --> 00:50:05,679
you know I say list i really mean just

1069
00:50:03,280 --> 00:50:07,420
some kind of a queue so typically you've

1070
00:50:05,679 --> 00:50:08,440
got producers on one end of q stuffing

1071
00:50:07,420 --> 00:50:09,880
things into the queue and you've got

1072
00:50:08,440 --> 00:50:11,590
consumers under them to the cube pulling

1073
00:50:09,880 --> 00:50:13,809
things out of the queue and the idea

1074
00:50:11,590 --> 00:50:15,550
here is just that you can categorize

1075
00:50:13,809 --> 00:50:18,489
certain algorithms by whether they are

1076
00:50:15,550 --> 00:50:20,560
multi producer multi consumer or single

1077
00:50:18,489 --> 00:50:22,629
producer singer consumer and you end up

1078
00:50:20,559 --> 00:50:25,989
with some statement about how many of

1079
00:50:22,630 --> 00:50:29,530
our on either side do i because because

1080
00:50:25,989 --> 00:50:31,000
sometimes if you only have one person on

1081
00:50:29,530 --> 00:50:33,070
a particular side of a queue you can

1082
00:50:31,000 --> 00:50:36,579
dispense with some of the qlogic or

1083
00:50:33,070 --> 00:50:38,170
whatever else right so you've got single

1084
00:50:36,579 --> 00:50:39,819
producer single consumer multiple

1085
00:50:38,170 --> 00:50:41,200
producer multiple consumer single

1086
00:50:39,820 --> 00:50:42,970
producer multiple consumer multiple

1087
00:50:41,199 --> 00:50:45,759
reduced or single consumer are the

1088
00:50:42,969 --> 00:50:46,929
various permutations right and you don't

1089
00:50:45,760 --> 00:50:48,970
really have to concern yourself too much

1090
00:50:46,929 --> 00:50:50,500
with any of that amount of clay sure you

1091
00:50:48,969 --> 00:50:52,629
get the idea and the important thing is

1092
00:50:50,500 --> 00:50:54,909
to be able to reason about it so anyway

1093
00:50:52,630 --> 00:50:57,519
that's what we have here is we have the

1094
00:50:54,909 --> 00:51:00,369
necessity to sort of make this work

1095
00:50:57,519 --> 00:51:03,519
across these and in order to do that

1096
00:51:00,369 --> 00:51:05,469
we're going to actually need to discuss

1097
00:51:03,519 --> 00:51:08,320
a little bit i think i'd like to show

1098
00:51:05,469 --> 00:51:09,549
you how to do a ticket taking because i

1099
00:51:08,320 --> 00:51:10,000
feel like that's just a good thing to

1100
00:51:09,550 --> 00:51:11,680
know and

1101
00:51:10,000 --> 00:51:14,440
it's really easy to do and it'd be good

1102
00:51:11,679 --> 00:51:18,429
for this just to show how to make a

1103
00:51:14,440 --> 00:51:23,349
multiple producer single consumer list

1104
00:51:18,429 --> 00:51:25,329
and so we should just do that but in

1105
00:51:23,349 --> 00:51:27,190
order to do that I'm going to need more

1106
00:51:25,329 --> 00:51:29,349
than seven minutes to describe it so i

1107
00:51:27,190 --> 00:51:43,119
think i'm going to stop here and i'll

1108
00:51:29,349 --> 00:51:45,429
just patch around this with you know and

1109
00:51:43,119 --> 00:51:47,739
well you know what i could do i can

1110
00:51:45,429 --> 00:51:49,929
actually make these call something and

1111
00:51:47,739 --> 00:51:54,719
then we won't actually do anything in

1112
00:51:49,929 --> 00:51:54,719
that call now what's interesting here is

1113
00:51:56,579 --> 00:52:10,179
when i call i'm already inside a thing

1114
00:51:59,739 --> 00:52:15,399
called an asset lock here and i do so i

1115
00:52:10,179 --> 00:52:18,969
do wonder a little bit there if we could

1116
00:52:15,400 --> 00:52:22,539
just use that but it seems unnecessary

1117
00:52:18,969 --> 00:52:24,250
and also probably to be honest i think

1118
00:52:22,539 --> 00:52:26,920
if we actually went through and sort of

1119
00:52:24,250 --> 00:52:29,230
did a brush-up pass on this code now

1120
00:52:26,920 --> 00:52:31,030
because we don't allow background

1121
00:52:29,230 --> 00:52:35,170
rendering anymore we don't use the

1122
00:52:31,030 --> 00:52:41,110
ground chunks things anymore i feel like

1123
00:52:35,170 --> 00:52:43,659
we don't really have a problem we don't

1124
00:52:41,110 --> 00:52:47,140
really need asset locking like we used

1125
00:52:43,659 --> 00:52:48,940
to because only one thread is ever

1126
00:52:47,139 --> 00:52:51,879
calling acquire asset memory at once i

1127
00:52:48,940 --> 00:52:54,490
think now whereas before that was not

1128
00:52:51,880 --> 00:52:56,769
necessarily the case so I feel like the

1129
00:52:54,489 --> 00:52:59,049
asset lock is probably old news a lot of

1130
00:52:56,769 --> 00:53:01,659
the stuff is probably old news and we

1131
00:52:59,050 --> 00:53:03,850
could probably get rid of it that's just

1132
00:53:01,659 --> 00:53:05,230
my assumption but anyway what I was

1133
00:53:03,849 --> 00:53:06,849
going to say is we can sort of have a

1134
00:53:05,230 --> 00:53:12,130
thing in here which is like an internal

1135
00:53:06,849 --> 00:53:15,369
void thing which is like hey do and you

1136
00:53:12,130 --> 00:53:20,460
know add an op on here right that's sort

1137
00:53:15,369 --> 00:53:20,460
of like you know add up

1138
00:53:20,750 --> 00:53:29,300
and you know maybe that just takes

1139
00:53:24,079 --> 00:53:31,069
texture up that's going to add right and

1140
00:53:29,300 --> 00:53:34,550
so that way we can actually make these

1141
00:53:31,070 --> 00:53:36,800
things and do the add up so this way if

1142
00:53:34,550 --> 00:53:38,960
I go and look at the if 0 here instead

1143
00:53:36,800 --> 00:53:41,840
of having that if zeroed out entirely

1144
00:53:38,960 --> 00:53:45,019
what I would do instead is say okay so

1145
00:53:41,840 --> 00:53:54,610
there's a texture up here the op is an

1146
00:53:45,019 --> 00:54:04,820
allocate the width is the width the

1147
00:53:54,610 --> 00:54:20,599
height is the height the data bitmap

1148
00:54:04,820 --> 00:54:22,039
memory and the result handle is here so

1149
00:54:20,599 --> 00:54:24,139
we'll need to do something there with

1150
00:54:22,039 --> 00:54:25,759
add up to actually figure out how we're

1151
00:54:24,139 --> 00:54:27,710
even going to do stuff with it but

1152
00:54:25,760 --> 00:54:29,900
otherwise you know the basics there you

1153
00:54:27,710 --> 00:54:32,780
can kind of see and then similarly in

1154
00:54:29,900 --> 00:54:38,360
here i could say like okay this is not

1155
00:54:32,780 --> 00:54:44,870
one of those and so the handle that

1156
00:54:38,360 --> 00:54:51,590
you're looking for is this one and off

1157
00:54:44,869 --> 00:54:55,819
you go right so that's what we need to

1158
00:54:51,590 --> 00:54:59,600
do and so this add up here you know will

1159
00:54:55,820 --> 00:55:02,390
be roughly something like a begin ticket

1160
00:54:59,599 --> 00:55:09,130
you know mutex this sort of a thing and

1161
00:55:02,389 --> 00:55:15,670
ticket mutex and it'll be like you know

1162
00:55:09,130 --> 00:55:19,460
get from free list add to pending list

1163
00:55:15,670 --> 00:55:20,990
like that right so that's really all

1164
00:55:19,460 --> 00:55:23,420
we're going to write but I want to

1165
00:55:20,989 --> 00:55:25,819
explain a little bit about how it works

1166
00:55:23,420 --> 00:55:28,250
and you know give it the proper

1167
00:55:25,820 --> 00:55:31,220
trappings so that's what we'll do

1168
00:55:28,250 --> 00:55:34,389
tomorrow for now it means we will be in

1169
00:55:31,219 --> 00:55:36,009
no man's land where everything is white

1170
00:55:34,389 --> 00:55:39,068
well I guess not everything rectangles

1171
00:55:36,010 --> 00:55:42,210
still work but our textures don't so

1172
00:55:39,068 --> 00:55:44,440
we'll have to go from there but anyway

1173
00:55:42,210 --> 00:55:45,970
i'm going to go ahead and go to the QA

1174
00:55:44,440 --> 00:55:48,329
and then we'll take a look at that

1175
00:55:45,969 --> 00:55:48,328
tomorrow

1176
00:56:51,050 --> 00:56:55,160
so as it's a bit late now but i was

1177
00:56:53,449 --> 00:56:56,750
thinking debug sliders for fov and

1178
00:56:55,159 --> 00:56:58,879
camera distance could be useful yeah

1179
00:56:56,750 --> 00:57:03,070
probably we never really made very good

1180
00:56:58,880 --> 00:57:03,070
debug sliders someday

1181
00:57:45,369 --> 00:57:53,559
snoring tortoise on the bug list what is

1182
00:57:47,980 --> 00:57:56,019
that clan compatibility issue so it's

1183
00:57:53,559 --> 00:57:58,299
it's not really an issue so much is it's

1184
00:57:56,019 --> 00:58:04,539
a collection of the things that clang

1185
00:57:58,300 --> 00:58:11,110
doesn't like I think mostly there's two

1186
00:58:04,539 --> 00:58:14,619
things one is the sprint f call there's

1187
00:58:11,110 --> 00:58:18,099
some casts and pointer cast things and

1188
00:58:14,619 --> 00:58:24,699
then there's the big one is it it can't

1189
00:58:18,099 --> 00:58:28,480
do constant named function strings so I

1190
00:58:24,699 --> 00:58:30,489
don't know why it can't do that that

1191
00:58:28,480 --> 00:58:34,840
seems crazy to have done it the way that

1192
00:58:30,489 --> 00:58:36,579
they did but you know it doesn't and so

1193
00:58:34,840 --> 00:58:37,870
we kind of relied on that in the debug

1194
00:58:36,579 --> 00:58:41,429
system so we'll have to come up with

1195
00:58:37,869 --> 00:58:41,429
another way to do that

1196
00:58:48,360 --> 00:58:51,900
if that makes sense

1197
00:59:25,590 --> 00:59:29,820
but yes some of these are easy it's just

1198
00:59:28,019 --> 00:59:31,769
the sprint f1 the sprint f1 and the

1199
00:59:29,820 --> 00:59:34,890
macro ones are hard that casting is not

1200
00:59:31,769 --> 00:59:37,139
a big deal at all we can fix that real

1201
00:59:34,889 --> 00:59:38,609
easily so you know basically this will

1202
00:59:37,139 --> 00:59:40,230
be one where a couple of the things on

1203
00:59:38,610 --> 00:59:42,690
this list will take 10 seconds but a

1204
00:59:40,230 --> 00:59:46,619
couple of them may take a whole day or a

1205
00:59:42,690 --> 00:59:48,829
whole episode or more to fix so we'll

1206
00:59:46,619 --> 00:59:48,829
see

1207
01:00:16,590 --> 01:00:18,650
you

1208
01:00:30,759 --> 01:00:36,068
so if there's no questions I'll just

1209
01:00:33,170 --> 01:00:36,068
wrap it on up

1210
01:00:49,059 --> 01:00:52,440
we're da minha I still see flickering on

1211
01:00:50,980 --> 01:00:56,320
the stairs as the arts ocean finalized

1212
01:00:52,440 --> 01:00:59,500
so we don't actually have the

1213
01:00:56,320 --> 01:01:01,150
z-transform correct yet so the stairs

1214
01:00:59,500 --> 01:01:02,590
are doing something which is never

1215
01:01:01,150 --> 01:01:05,980
actually supposed to happen which is

1216
01:01:02,590 --> 01:01:08,559
that their protruding in their moved in

1217
01:01:05,980 --> 01:01:12,130
X from where they would normally be

1218
01:01:08,559 --> 01:01:15,039
because of the perspective transform and

1219
01:01:12,130 --> 01:01:17,440
also we're not actually properly hopping

1220
01:01:15,039 --> 01:01:19,630
the hero up to the height that the

1221
01:01:17,440 --> 01:01:22,269
stairs are it's he's moving through them

1222
01:01:19,630 --> 01:01:23,530
which is also illegal because you know

1223
01:01:22,269 --> 01:01:26,829
you're not allowed to move through the

1224
01:01:23,530 --> 01:01:29,530
stairs so I wouldn't necessarily call

1225
01:01:26,829 --> 01:01:31,630
the sort solution finalized because

1226
01:01:29,530 --> 01:01:33,550
that's probably not true but I also

1227
01:01:31,630 --> 01:01:37,390
there's really no need to pay attention

1228
01:01:33,550 --> 01:01:41,410
the stairs at the moment because we have

1229
01:01:37,389 --> 01:01:43,480
to finish the Z so Z handling pass

1230
01:01:41,409 --> 01:01:45,759
before we can say definitively what's

1231
01:01:43,480 --> 01:01:48,269
going on there whether it's good or bad

1232
01:01:45,760 --> 01:01:48,270
or whatever

1233
01:01:53,289 --> 01:02:00,349
is the issue list private the issue list

1234
01:01:58,039 --> 01:02:01,969
is on the private github but anyone who

1235
01:02:00,349 --> 01:02:04,779
pre-orders the game has access to the

1236
01:02:01,969 --> 01:02:08,989
private github so it's not that private

1237
01:02:04,780 --> 01:02:10,850
it's basically yeah everyone who

1238
01:02:08,989 --> 01:02:16,309
pre-orders the game is is on the github

1239
01:02:10,849 --> 01:02:19,659
so it's you know it's a heck of a lot of

1240
01:02:16,309 --> 01:02:19,659
people I don't even remember how many

1241
01:02:21,010 --> 01:02:27,350
thirteen hundred and seventy-four people

1242
01:02:23,860 --> 01:02:29,650
are on the github so it's you know the

1243
01:02:27,349 --> 01:02:32,900
phrase private is perhaps a little bit

1244
01:02:29,650 --> 01:02:36,680
aggressive but it's you know it's only

1245
01:02:32,900 --> 01:02:38,119
for pre-orders if that makes sense well

1246
01:02:36,679 --> 01:02:39,440
you normally skip straight to open jail

1247
01:02:38,119 --> 01:02:41,809
or harbuck station or would you start

1248
01:02:39,440 --> 01:02:43,909
with soft rendering yeah normally you

1249
01:02:41,809 --> 01:02:46,070
don't write a software renderer the

1250
01:02:43,909 --> 01:02:47,569
software rendering part is for the edges

1251
01:02:46,070 --> 01:02:48,860
for educational purposes I feel like

1252
01:02:47,570 --> 01:02:51,230
everyone should write a software

1253
01:02:48,860 --> 01:02:52,280
renderer once like every engine

1254
01:02:51,230 --> 01:02:54,650
programmer should have written a

1255
01:02:52,280 --> 01:02:57,019
sovereign dur at some point they're not

1256
01:02:54,650 --> 01:02:58,579
hard to write anymore because they're so

1257
01:02:57,019 --> 01:03:00,349
well understood you know originally it

1258
01:02:58,579 --> 01:03:01,610
would would have taken months to figure

1259
01:03:00,349 --> 01:03:04,099
out how to write a good software under

1260
01:03:01,610 --> 01:03:06,710
but nowadays that's not true at all it

1261
01:03:04,099 --> 01:03:09,440
takes only a couple days or a week you

1262
01:03:06,710 --> 01:03:10,550
know to write one every I think every

1263
01:03:09,440 --> 01:03:14,300
engine program I should write a software

1264
01:03:10,550 --> 01:03:15,650
under at some point for sure but once

1265
01:03:14,300 --> 01:03:19,880
you've done 11 so I don't think you ever

1266
01:03:15,650 --> 01:03:21,500
need to do one again storing tortoise in

1267
01:03:19,880 --> 01:03:23,329
terms of asynchronous textures loading

1268
01:03:21,500 --> 01:03:25,519
the OpenGL website talks about pixel

1269
01:03:23,329 --> 01:03:27,829
transfer operations and references GL

1270
01:03:25,519 --> 01:03:34,360
pixel store did you look into these I

1271
01:03:27,829 --> 01:03:34,360
don't know about GL pixel store

1272
01:03:38,619 --> 01:03:45,999
I'm trying to remember so the way you're

1273
01:03:41,889 --> 01:03:51,389
supposed to do them I can point you to

1274
01:03:45,998 --> 01:03:51,389
it if you want to look at it yourself I

1275
01:03:55,108 --> 01:03:59,880
is is this

1276
01:04:14,778 --> 01:04:19,728
so think that's that's talking about it

1277
01:04:18,438 --> 01:04:23,958
but it doesn't actually show any code

1278
01:04:19,728 --> 01:04:34,938
there I was just hoping that someone had

1279
01:04:23,958 --> 01:04:38,629
some codes you could look let's see yeah

1280
01:04:34,938 --> 01:04:40,578
that's starting to look right to me so

1281
01:04:38,630 --> 01:04:42,798
this is the mapping part that I was

1282
01:04:40,579 --> 01:04:44,390
talking about before and then you do the

1283
01:04:42,798 --> 01:04:48,938
copy to put the stuff in there and then

1284
01:04:44,389 --> 01:04:53,688
you unmap it and you say go for it right

1285
01:04:48,938 --> 01:04:59,808
now it's worth noting that that's that's

1286
01:04:53,688 --> 01:05:03,558
on older cards basically what's

1287
01:04:59,809 --> 01:05:06,619
happening there is that you have to

1288
01:05:03,559 --> 01:05:08,359
unmap the buffer after the copy because

1289
01:05:06,619 --> 01:05:13,579
you're not allowed to leave memory

1290
01:05:08,358 --> 01:05:16,429
pinned uh so in newer opengl like an

1291
01:05:13,579 --> 01:05:18,859
opengl 4.5 when you're on more modern

1292
01:05:16,429 --> 01:05:22,039
parts you actually don't ever have to

1293
01:05:18,858 --> 01:05:24,650
unmap so you can just map some buffers

1294
01:05:22,039 --> 01:05:26,630
that you'll use for your pixel transfers

1295
01:05:24,650 --> 01:05:31,099
you right into them you issue your

1296
01:05:26,630 --> 01:05:34,338
texture uploads then you just know you

1297
01:05:31,099 --> 01:05:37,219
you insert fencing to know when they're

1298
01:05:34,338 --> 01:05:39,558
done and then when they are done you

1299
01:05:37,219 --> 01:05:41,958
just overwrite those segments of memory

1300
01:05:39,559 --> 01:05:50,679
with something else so you don't

1301
01:05:41,958 --> 01:05:53,989
actually have to unmap on modern parts

1302
01:05:50,679 --> 01:05:58,429
but I'm on like Intel Parts I think you

1303
01:05:53,989 --> 01:06:00,608
have to unmap right and it's worse so

1304
01:05:58,429 --> 01:06:00,608
yeah

1305
01:06:06,489 --> 01:06:11,899
so but yeah I think this is roughly

1306
01:06:10,068 --> 01:06:13,429
correct I mean it's hard to remember the

1307
01:06:11,900 --> 01:06:16,088
open gel stuff sometimes but I think

1308
01:06:13,429 --> 01:06:16,088
that's roughly correct

1309
01:06:22,760 --> 01:06:29,220
Omnitech gnome answer is that persistent

1310
01:06:25,679 --> 01:06:32,699
texture-mapping what is persistent

1311
01:06:29,219 --> 01:06:35,088
texture-mapping I'm not sure what that

1312
01:06:32,699 --> 01:06:35,088
means

1313
01:07:30,068 --> 01:07:34,219
oh I see what you're asking you were

1314
01:07:32,659 --> 01:07:50,379
trying to ask about what that extension

1315
01:07:34,219 --> 01:08:04,098
is I'm talking about I'm talking about

1316
01:07:50,380 --> 01:08:08,858
our buffer storage no persistent mapped

1317
01:08:04,099 --> 01:08:21,100
buffers yeah our buffer storage core 4.4

1318
01:08:08,858 --> 01:08:21,100
so it's this guy yeah

1319
01:08:37,789 --> 01:08:47,989
and and it's great like it's so good it

1320
01:08:44,750 --> 01:08:51,020
is hard to describe just how good I

1321
01:08:47,989 --> 01:08:55,000
think this is this is probably my

1322
01:08:51,020 --> 01:08:55,000
favorite extension of all time

1323
01:09:23,829 --> 01:09:29,489
I saw the tweet by sean barrett about

1324
01:09:26,949 --> 01:09:32,559
the Vulcan API versus the OpenGL API

1325
01:09:29,489 --> 01:09:37,719
what are the main flaws in the OpenGL

1326
01:09:32,560 --> 01:09:44,650
API are I'm sorry could you tell me what

1327
01:09:37,720 --> 01:09:46,780
tweet sean barrett is tweeted just for

1328
01:09:44,649 --> 01:09:48,909
context there I don't know the tweet

1329
01:09:46,779 --> 01:09:52,050
you're referring to if you could link to

1330
01:09:48,909 --> 01:09:52,050
it or something so I could read it

1331
01:11:51,929 --> 01:11:58,060
tweet passion Verret pound include

1332
01:11:54,698 --> 01:11:59,618
Vulcan / Vulcan H I can see they put a

1333
01:11:58,060 --> 01:12:02,710
lot of work into avoiding making the

1334
01:11:59,618 --> 01:12:05,589
same crust so I believe that is sean

1335
01:12:02,710 --> 01:12:12,090
barrett being snarky and basically

1336
01:12:05,590 --> 01:12:12,090
saying they didn't learn anything right

1337
01:12:12,149 --> 01:12:20,039
because obviously you would never want

1338
01:12:15,670 --> 01:12:23,560
to specify the path to a file because

1339
01:12:20,039 --> 01:12:26,139
why does the API have anything to do

1340
01:12:23,560 --> 01:12:29,830
with specifying a file path right that's

1341
01:12:26,139 --> 01:12:32,199
totally has nothing to do with C or

1342
01:12:29,829 --> 01:12:35,039
anything else and it's just kind of

1343
01:12:32,198 --> 01:12:35,039
ridiculous right

1344
01:13:03,699 --> 01:13:08,010
and I mean he's referring of course to

1345
01:13:05,680 --> 01:13:08,010
this

1346
01:13:19,929 --> 01:13:24,208
right opengl was exactly the same way

1347
01:13:26,698 --> 01:13:39,488
all right i'm gonna a pit up alrighty

1348
01:13:37,349 --> 01:13:40,659
thank you everyone for joining me for

1349
01:13:39,488 --> 01:13:41,678
another episode of handmade hero it's

1350
01:13:40,658 --> 01:13:44,109
been a pleasure coding with you as

1351
01:13:41,679 --> 01:13:47,139
always if you want to follow along with

1352
01:13:44,109 --> 01:13:49,868
at home or if you want to look at that

1353
01:13:47,139 --> 01:13:51,909
issues list be or submit to the private

1354
01:13:49,868 --> 01:13:53,259
issues list and stuff like that you can

1355
01:13:51,908 --> 01:13:58,029
always peer to the game on handmade hero

1356
01:13:53,260 --> 01:13:59,469
or get comes with the source code and a

1357
01:13:58,029 --> 01:14:01,268
bunch of other random stuff that you

1358
01:13:59,469 --> 01:14:02,859
might be interested in so check that out

1359
01:14:01,269 --> 01:14:05,380
if your should we also form site you can

1360
01:14:02,859 --> 01:14:06,759
go to if you want to ask questions we

1361
01:14:05,380 --> 01:14:08,260
have a patreon page you can go if you

1362
01:14:06,760 --> 01:14:10,208
want support the video series a schedule

1363
01:14:08,260 --> 01:14:11,170
bot that tweets to schedule at you if

1364
01:14:10,208 --> 01:14:13,868
you want to where we're going to be live

1365
01:14:11,170 --> 01:14:17,469
and an episode guide which you can use

1366
01:14:13,868 --> 01:14:19,208
to catch up on old streams I'll be back

1367
01:14:17,469 --> 01:14:21,550
here tomorrow same time same place 8

1368
01:14:19,208 --> 01:14:23,469
p.m. pacific daylight time until then

1369
01:14:21,550 --> 01:14:26,349
have fun programming everyone i'll see

1370
01:14:23,469 --> 01:14:28,439
you guys on the internet take it easy

1371
01:14:26,349 --> 01:14:28,439
everybody

