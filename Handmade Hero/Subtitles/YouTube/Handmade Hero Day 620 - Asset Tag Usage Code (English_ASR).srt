1
00:00:00,640 --> 00:00:05,359
hello everyone and welcome to handmade

2
00:00:03,520 --> 00:00:08,400
hero sure we go to complete game

3
00:00:05,359 --> 00:00:11,679
live on stream um we

4
00:00:08,400 --> 00:00:13,440
are going to start doing our asset tag

5
00:00:11,679 --> 00:00:14,880
matching stuff today where we were just

6
00:00:13,439 --> 00:00:15,678
cleaning up that system and i think we

7
00:00:14,880 --> 00:00:17,359
had a really

8
00:00:15,679 --> 00:00:19,439
simple way of just making it nice so

9
00:00:17,359 --> 00:00:21,520
we're just gonna finish doing that

10
00:00:19,439 --> 00:00:22,960
uh and start kind of poking around with

11
00:00:21,519 --> 00:00:24,079
the implications

12
00:00:22,960 --> 00:00:26,160
before we get started i did want to

13
00:00:24,079 --> 00:00:29,198
mention at molly rocket we do have

14
00:00:26,160 --> 00:00:32,238
a sale for the holidays on

15
00:00:29,199 --> 00:00:36,239
yeah the infinite so if you

16
00:00:32,238 --> 00:00:39,039
are in the mood for cat space adventures

17
00:00:36,238 --> 00:00:39,919
or space cat adventures if you will uh

18
00:00:39,039 --> 00:00:42,479
all of the

19
00:00:39,920 --> 00:00:44,480
stuff is on sale as you can see here and

20
00:00:42,479 --> 00:00:47,519
in fact i've got one

21
00:00:44,479 --> 00:00:50,078
on my desk even you can see it

22
00:00:47,520 --> 00:00:51,280
it's like a really really good it came

23
00:00:50,079 --> 00:00:54,239
out fantastic

24
00:00:51,280 --> 00:00:56,719
like we could not be happier with how

25
00:00:54,238 --> 00:00:58,320
good this thing looks

26
00:00:56,719 --> 00:01:00,079
the printers we worked with on this were

27
00:00:58,320 --> 00:01:02,000
absolutely fantastic

28
00:01:00,079 --> 00:01:03,359
so if you're looking for some cat space

29
00:01:02,000 --> 00:01:06,478
adventures

30
00:01:03,359 --> 00:01:10,000
um this holiday season for you

31
00:01:06,478 --> 00:01:12,239
or the you know space and or cat lovers

32
00:01:10,000 --> 00:01:13,840
in your family we've got you covered and

33
00:01:12,239 --> 00:01:14,319
that's just me on the infinite.com you

34
00:01:13,840 --> 00:01:17,040
can also

35
00:01:14,319 --> 00:01:18,000
find it on mollyrocket.com in fact you

36
00:01:17,040 --> 00:01:19,680
can even find

37
00:01:18,000 --> 00:01:21,359
little buttons at the bottom of our page

38
00:01:19,680 --> 00:01:23,200
now um

39
00:01:21,359 --> 00:01:24,879
i finally started to clean this stuff up

40
00:01:23,200 --> 00:01:25,200
i haven't really had a chance to do it

41
00:01:24,879 --> 00:01:27,599
all

42
00:01:25,200 --> 00:01:29,439
yet though but our our sites will slowly

43
00:01:27,599 --> 00:01:31,519
converge on something more usable so

44
00:01:29,438 --> 00:01:34,639
that should hopefully be good

45
00:01:31,519 --> 00:01:37,199
um international ship included no

46
00:01:34,640 --> 00:01:38,799
uh domestic shipping is included

47
00:01:37,200 --> 00:01:40,560
international shipping isn't included

48
00:01:38,799 --> 00:01:43,118
because international shipping

49
00:01:40,560 --> 00:01:45,600
is so expensive these days that it's

50
00:01:43,118 --> 00:01:48,078
more than the entire cost of

51
00:01:45,599 --> 00:01:50,319
like the entire price like it's often

52
00:01:48,078 --> 00:01:53,438
twenty dollars or more to ship something

53
00:01:50,319 --> 00:01:54,719
to uh to ship a one pound book which is

54
00:01:53,438 --> 00:01:58,319
what it is

55
00:01:54,719 --> 00:02:00,078
um so like yeah international shipping

56
00:01:58,319 --> 00:02:03,039
is fantastically expensive

57
00:02:00,078 --> 00:02:03,679
uh probably for good reason i mean i'm

58
00:02:03,040 --> 00:02:05,920
sure it

59
00:02:03,680 --> 00:02:06,880
just takes like we don't have low fuel

60
00:02:05,920 --> 00:02:10,000
transport

61
00:02:06,879 --> 00:02:11,840
solved yet um so i'm sure it's just

62
00:02:10,000 --> 00:02:13,759
very expensive to get something from one

63
00:02:11,840 --> 00:02:14,959
place to another even if it's fairly

64
00:02:13,759 --> 00:02:17,439
light

65
00:02:14,959 --> 00:02:18,560
um as long as it is a package of some

66
00:02:17,439 --> 00:02:20,639
kind and not just this

67
00:02:18,560 --> 00:02:22,560
you know infinitely thin little letter

68
00:02:20,639 --> 00:02:24,318
or something

69
00:02:22,560 --> 00:02:26,000
i'm assuming that there's just no way to

70
00:02:24,318 --> 00:02:28,479
get that price down to like

71
00:02:26,000 --> 00:02:30,000
you know reasonable price domestic

72
00:02:28,479 --> 00:02:31,280
shipping is already quite expensive it's

73
00:02:30,000 --> 00:02:34,800
ten dollars

74
00:02:31,280 --> 00:02:36,959
um at least but the

75
00:02:34,800 --> 00:02:39,040
international is ridiculous it's like 20

76
00:02:36,959 --> 00:02:40,800
or something and so it's it's ridiculous

77
00:02:39,039 --> 00:02:41,439
when you think about just how expensive

78
00:02:40,800 --> 00:02:43,599
that is

79
00:02:41,439 --> 00:02:45,359
compared to the cost of the actual

80
00:02:43,598 --> 00:02:48,318
product right

81
00:02:45,360 --> 00:02:49,599
um but that's just how it is right

82
00:02:48,318 --> 00:02:51,199
someday hopefully they'll get that down

83
00:02:49,598 --> 00:02:52,399
because it's nice to have physical goods

84
00:02:51,199 --> 00:02:54,639
but you know they're

85
00:02:52,400 --> 00:02:56,319
they're just they're difficult to move

86
00:02:54,639 --> 00:02:59,759
around

87
00:02:56,318 --> 00:02:59,759
all right so

88
00:03:00,239 --> 00:03:04,000
let's go ahead and get started um i am

89
00:03:03,439 --> 00:03:08,158
going to go

90
00:03:04,000 --> 00:03:08,158
ahead and switch to

91
00:03:09,680 --> 00:03:15,040
handmade code directory and get us back

92
00:03:13,120 --> 00:03:17,759
into four coder

93
00:03:15,039 --> 00:03:19,840
so uh also i'm going to turn off the i

94
00:03:17,759 --> 00:03:23,280
gotta put in an automatic toggle for the

95
00:03:19,840 --> 00:03:24,000
cursor trails so essentially where we

96
00:03:23,280 --> 00:03:27,039
left off

97
00:03:24,000 --> 00:03:30,000
i believe we left compiler in right yeah

98
00:03:27,039 --> 00:03:30,639
so essentially where we left off is when

99
00:03:30,000 --> 00:03:33,919
we

100
00:03:30,639 --> 00:03:34,958
go to get an asset uh previously what

101
00:03:33,919 --> 00:03:39,199
we'd been doing

102
00:03:34,959 --> 00:03:43,199
is we'd been taking the tags

103
00:03:39,199 --> 00:03:44,158
that we got as vectors and we would

104
00:03:43,199 --> 00:03:47,280
basically say

105
00:03:44,158 --> 00:03:51,280
look for each tag

106
00:03:47,280 --> 00:03:53,759
you've got a like

107
00:03:51,280 --> 00:03:55,519
you you had like a weight for how

108
00:03:53,759 --> 00:03:57,199
heavily you wanted to match that tag

109
00:03:55,519 --> 00:03:58,719
and then you also had like whether or

110
00:03:57,199 --> 00:04:00,238
not you know what the particular tag was

111
00:03:58,719 --> 00:04:01,919
and whatever

112
00:04:00,239 --> 00:04:03,920
and that was just kind of ridiculous

113
00:04:01,919 --> 00:04:07,119
because we didn't really need it like it

114
00:04:03,919 --> 00:04:07,119
was massively over

115
00:04:07,280 --> 00:04:11,039
generalized for what we ended up needing

116
00:04:09,519 --> 00:04:13,920
in the asset system

117
00:04:11,039 --> 00:04:14,878
you know it's that's system's been in

118
00:04:13,919 --> 00:04:16,238
there since like

119
00:04:14,878 --> 00:04:17,918
really really early on it's just the

120
00:04:16,238 --> 00:04:20,238
first thing we threw in

121
00:04:17,918 --> 00:04:21,358
and now that we know like what the

122
00:04:20,238 --> 00:04:24,879
actual

123
00:04:21,358 --> 00:04:26,560
situation is it's you know we should go

124
00:04:24,879 --> 00:04:28,560
ahead and and make sure we've got

125
00:04:26,560 --> 00:04:31,120
something reasonable like so

126
00:04:28,560 --> 00:04:32,319
we want to make sure that we have

127
00:04:31,120 --> 00:04:34,478
something that aligns

128
00:04:32,319 --> 00:04:36,319
with the actual asset lookups we need to

129
00:04:34,478 --> 00:04:37,120
do otherwise we're just wasting a bunch

130
00:04:36,319 --> 00:04:38,959
of time

131
00:04:37,120 --> 00:04:41,360
and adding complexity and difficulty

132
00:04:38,959 --> 00:04:44,879
into the system for no reason

133
00:04:41,360 --> 00:04:47,520
so what we want to do here is

134
00:04:44,879 --> 00:04:49,120
we want to change from this system where

135
00:04:47,519 --> 00:04:51,680
we're passing this

136
00:04:49,120 --> 00:04:53,519
match vector and instead just using the

137
00:04:51,680 --> 00:04:54,560
tag hash so i believe we want to just

138
00:04:53,519 --> 00:04:57,039
get rid of this

139
00:04:54,560 --> 00:04:58,079
entirely right so if we look down at

140
00:04:57,040 --> 00:05:00,960
like when we do

141
00:04:58,079 --> 00:05:03,038
get bitmap and so on uh what we want to

142
00:05:00,959 --> 00:05:06,079
do is change these to just take

143
00:05:03,038 --> 00:05:08,159
uh asset tag hashes and then

144
00:05:06,079 --> 00:05:09,599
the match vector oh i guess we already

145
00:05:08,160 --> 00:05:11,280
did change it to a v4

146
00:05:09,600 --> 00:05:13,520
so it's just it's only this one it's

147
00:05:11,279 --> 00:05:15,439
wrong so then the match vector

148
00:05:13,519 --> 00:05:17,120
uh is just going to be the thing that

149
00:05:15,439 --> 00:05:25,038
looks up

150
00:05:17,120 --> 00:05:28,800
into like the grid right

151
00:05:25,038 --> 00:05:30,959
so what we're gonna assume uh is that

152
00:05:28,800 --> 00:05:32,960
you know there's there's essentially a

153
00:05:30,959 --> 00:05:35,439
tag hash which tells you

154
00:05:32,959 --> 00:05:36,079
which source template you were looking

155
00:05:35,439 --> 00:05:39,680
at so

156
00:05:36,079 --> 00:05:43,439
for example you know it would identify

157
00:05:39,680 --> 00:05:45,439
roughly the png that you're looking at

158
00:05:43,439 --> 00:05:46,879
and then the match vector would be

159
00:05:45,439 --> 00:05:50,959
something that tells you

160
00:05:46,879 --> 00:05:53,120
okay inside that specific png

161
00:05:50,959 --> 00:05:54,959
what were you actually going to pull out

162
00:05:53,120 --> 00:05:57,038
of it right

163
00:05:54,959 --> 00:06:00,000
and so the tag hash basically tells you

164
00:05:57,038 --> 00:06:03,038
what and the match vector tells you

165
00:06:00,000 --> 00:06:03,519
which and since we don't want to have to

166
00:06:03,038 --> 00:06:05,759
worry

167
00:06:03,519 --> 00:06:08,079
about exactly how the art assets are

168
00:06:05,759 --> 00:06:11,360
created in this sense what we want to do

169
00:06:08,079 --> 00:06:14,478
is make it so that the tag hash itself

170
00:06:11,360 --> 00:06:15,520
when you look up and you find the asset

171
00:06:14,478 --> 00:06:18,560
in question

172
00:06:15,519 --> 00:06:19,198
we want that asset to tell you which

173
00:06:18,560 --> 00:06:21,199
portion

174
00:06:19,199 --> 00:06:22,478
of the match vector it should be

175
00:06:21,199 --> 00:06:26,560
extracting

176
00:06:22,478 --> 00:06:28,959
right so the match vector

177
00:06:26,560 --> 00:06:30,319
that we pass in will now instead of

178
00:06:28,959 --> 00:06:31,198
being some big strong thing it's just

179
00:06:30,319 --> 00:06:34,400
always going to be

180
00:06:31,199 --> 00:06:35,520
fixed v4 and it will have in it a couple

181
00:06:34,399 --> 00:06:38,719
different parameters

182
00:06:35,519 --> 00:06:41,839
that you can pull out for matching and

183
00:06:38,720 --> 00:06:44,080
there'll be things like facing direction

184
00:06:41,839 --> 00:06:45,279
and expression or something so like

185
00:06:44,079 --> 00:06:48,639
facing direction

186
00:06:45,279 --> 00:06:50,318
expression and you know variant

187
00:06:48,639 --> 00:06:52,160
maybe i don't know what they would be

188
00:06:50,319 --> 00:06:55,120
but there'd be like three or four

189
00:06:52,160 --> 00:06:56,720
things in there right and then when we

190
00:06:55,120 --> 00:06:59,840
look up in the tag hash

191
00:06:56,720 --> 00:07:03,840
you would apply the match vector by

192
00:06:59,839 --> 00:07:06,560
at the tag hash would tell you how to

193
00:07:03,839 --> 00:07:08,719
you know grab the pieces of the match

194
00:07:06,560 --> 00:07:11,519
vector that you actually need

195
00:07:08,720 --> 00:07:11,520
if that makes sense

196
00:07:12,639 --> 00:07:16,000
so looking at this what the first thing

197
00:07:15,038 --> 00:07:18,959
we need to do is just

198
00:07:16,000 --> 00:07:20,000
say all right so if we're going by asset

199
00:07:18,959 --> 00:07:22,560
tag hash

200
00:07:20,000 --> 00:07:24,160
then you know this also needs to be a v4

201
00:07:22,560 --> 00:07:25,598
it's not going to be an asset match

202
00:07:24,160 --> 00:07:27,599
vector in fact

203
00:07:25,598 --> 00:07:31,038
asset match vector would not really be a

204
00:07:27,598 --> 00:07:33,598
thing anymore so these uh are just not

205
00:07:31,038 --> 00:07:34,560
gonna be important anymore i don't think

206
00:07:33,598 --> 00:07:36,719
uh unless

207
00:07:34,560 --> 00:07:38,160
i'm unless we already changed it and i'm

208
00:07:36,720 --> 00:07:40,639
misremembering

209
00:07:38,160 --> 00:07:42,240
um because oh well no you know what i

210
00:07:40,639 --> 00:07:44,160
think i was

211
00:07:42,240 --> 00:07:46,720
i think maybe we changed it to this

212
00:07:44,160 --> 00:07:50,400
already just so we could have

213
00:07:46,720 --> 00:07:52,960
an integer that lines up right so

214
00:07:50,399 --> 00:07:53,839
so that this code doesn't have to be the

215
00:07:52,959 --> 00:07:56,478
thing

216
00:07:53,839 --> 00:07:57,119
that changes floats to ins as they come

217
00:07:56,478 --> 00:07:59,839
in

218
00:07:57,120 --> 00:08:00,720
we just assume that the uh the code on

219
00:07:59,839 --> 00:08:02,878
the outside

220
00:08:00,720 --> 00:08:04,160
like did the did the mapping did the

221
00:08:02,879 --> 00:08:07,680
truncation to

222
00:08:04,160 --> 00:08:09,120
uh the correct values so yeah i guess

223
00:08:07,680 --> 00:08:10,840
that's just basically saying look it's

224
00:08:09,120 --> 00:08:13,680
picking it out

225
00:08:10,839 --> 00:08:16,159
from uh this set so it's really this one

226
00:08:13,680 --> 00:08:18,959
that we want to change

227
00:08:16,160 --> 00:08:19,360
like so uh and the same would be true

228
00:08:18,959 --> 00:08:21,279
from

229
00:08:19,360 --> 00:08:23,439
basically everything else so instead of

230
00:08:21,279 --> 00:08:24,478
having asset vector which would not

231
00:08:23,439 --> 00:08:26,719
exist anymore

232
00:08:24,478 --> 00:08:27,598
and i don't know if that still does it

233
00:08:26,720 --> 00:08:29,199
does

234
00:08:27,598 --> 00:08:31,519
so the instead of these ridiculous

235
00:08:29,199 --> 00:08:33,440
things which are unwieldy and terrible

236
00:08:31,519 --> 00:08:34,879
uh we're just gonna get rid of those and

237
00:08:33,440 --> 00:08:38,000
now everybody who

238
00:08:34,879 --> 00:08:41,439
does a match uh will always

239
00:08:38,000 --> 00:08:42,479
take just the the tag hash and a match

240
00:08:41,440 --> 00:08:45,279
vector

241
00:08:42,479 --> 00:08:46,959
and that's what they'll use from now on

242
00:08:45,278 --> 00:08:47,838
and you won't need the basic category

243
00:08:46,958 --> 00:08:51,359
anymore

244
00:08:47,839 --> 00:08:51,680
either uh and we also don't call like

245
00:08:51,360 --> 00:08:53,680
this

246
00:08:51,679 --> 00:08:55,120
get random bitmap from so we'll just you

247
00:08:53,679 --> 00:08:56,719
know get rid of it we can always add

248
00:08:55,120 --> 00:08:58,080
them back in but it wouldn't look like

249
00:08:56,720 --> 00:08:59,839
that anyway there wasn't like an

250
00:08:58,080 --> 00:09:03,920
important piece of code to

251
00:08:59,839 --> 00:09:06,880
save so i also don't know like

252
00:09:03,919 --> 00:09:08,958
if get first bitmap in this case is

253
00:09:06,879 --> 00:09:12,000
relevant anyway like i don't know

254
00:09:08,958 --> 00:09:16,159
if we ever actually use that um

255
00:09:12,000 --> 00:09:19,278
i don't know can i search for a string

256
00:09:16,159 --> 00:09:22,639
get first sound

257
00:09:19,278 --> 00:09:25,679
or bitmap from

258
00:09:22,639 --> 00:09:26,720
so i don't see any evidence that that

259
00:09:25,679 --> 00:09:28,958
ever gets used

260
00:09:26,720 --> 00:09:30,080
anyway so i think we should be able to

261
00:09:28,958 --> 00:09:33,599
get rid of that

262
00:09:30,080 --> 00:09:37,120
whether for sound from

263
00:09:33,600 --> 00:09:40,000
uh exists doesn't look like it uh

264
00:09:37,120 --> 00:09:41,120
so i'm guessing that we can just

265
00:09:40,000 --> 00:09:44,559
actually stick

266
00:09:41,120 --> 00:09:48,320
with real mass matching

267
00:09:44,559 --> 00:09:51,759
at the moment so i'm hoping that we can

268
00:09:48,320 --> 00:09:54,160
just you know do something like this

269
00:09:51,759 --> 00:09:56,799
where everybody now will take the tag

270
00:09:54,159 --> 00:10:00,319
hash and the match vector

271
00:09:56,799 --> 00:10:01,919
and we will be able to

272
00:10:00,320 --> 00:10:03,680
always just pass those through and have

273
00:10:01,919 --> 00:10:05,838
the matching system work fairly

274
00:10:03,679 --> 00:10:08,719
straightforward

275
00:10:05,839 --> 00:10:09,200
so the only thing i'm not sure about is

276
00:10:08,720 --> 00:10:11,759
since

277
00:10:09,200 --> 00:10:13,120
fonts are kind of a special case because

278
00:10:11,759 --> 00:10:15,439
what gets pulled out of there is just

279
00:10:13,120 --> 00:10:17,200
characters

280
00:10:15,440 --> 00:10:18,880
obviously the match vector weight vector

281
00:10:17,200 --> 00:10:20,480
nonsense uh

282
00:10:18,879 --> 00:10:22,799
wouldn't really make any sense i don't

283
00:10:20,480 --> 00:10:25,519
know why we would want to

284
00:10:22,799 --> 00:10:26,479
bother with that but it may be the case

285
00:10:25,519 --> 00:10:28,399
that just

286
00:10:26,480 --> 00:10:30,320
this system still sort of works so for

287
00:10:28,399 --> 00:10:33,039
the for the immediate

288
00:10:30,320 --> 00:10:34,720
you know for just the immediate test i'm

289
00:10:33,039 --> 00:10:36,799
gonna assume that we can

290
00:10:34,720 --> 00:10:38,879
still use this this way but since we're

291
00:10:36,799 --> 00:10:39,199
in the process of optimizing if it turns

292
00:10:38,879 --> 00:10:41,120
out

293
00:10:39,200 --> 00:10:42,320
that looks a little too onerous if it

294
00:10:41,120 --> 00:10:44,399
turns out

295
00:10:42,320 --> 00:10:46,720
that i don't like the look of that we

296
00:10:44,399 --> 00:10:47,278
may make the font code take something

297
00:10:46,720 --> 00:10:50,399
different

298
00:10:47,278 --> 00:10:53,919
on purpose there so

299
00:10:50,399 --> 00:10:57,519
assuming that we call uh get

300
00:10:53,919 --> 00:10:58,958
best match asset from um

301
00:10:57,519 --> 00:11:00,639
if if that's just now gonna be called

302
00:10:58,958 --> 00:11:02,078
get asset from because we're not really

303
00:11:00,639 --> 00:11:04,559
doing a best match anymore

304
00:11:02,078 --> 00:11:06,799
it's a direct lookup or at least a close

305
00:11:04,559 --> 00:11:08,559
to a direct lookup

306
00:11:06,799 --> 00:11:10,159
then now these functions are all correct

307
00:11:08,559 --> 00:11:11,199
and really we're just talking about this

308
00:11:10,159 --> 00:11:14,719
one now

309
00:11:11,200 --> 00:11:18,480
right and what we'd like to do is

310
00:11:14,720 --> 00:11:21,360
we would like to go ahead and

311
00:11:18,480 --> 00:11:22,399
make it so that it's very clear what

312
00:11:21,360 --> 00:11:24,240
happens

313
00:11:22,399 --> 00:11:25,759
when we you could you could even see

314
00:11:24,240 --> 00:11:28,240
that we've sketched it out

315
00:11:25,759 --> 00:11:29,919
um unlike the old one we want to make it

316
00:11:28,240 --> 00:11:32,879
very clear what happens

317
00:11:29,919 --> 00:11:34,559
when we go to look up an asset we want

318
00:11:32,879 --> 00:11:38,320
that to

319
00:11:34,559 --> 00:11:40,879
um produce a result extremely quickly

320
00:11:38,320 --> 00:11:42,240
so what you can see what we did here is

321
00:11:40,879 --> 00:11:45,120
we said all right so

322
00:11:42,240 --> 00:11:45,440
suppose we take the tag hash which is

323
00:11:45,120 --> 00:11:49,200
like

324
00:11:45,440 --> 00:11:51,920
a pre-hashed value right

325
00:11:49,200 --> 00:11:52,240
and then we take the match vector which

326
00:11:51,919 --> 00:11:54,479
is

327
00:11:52,240 --> 00:11:56,079
like additional information so like the

328
00:11:54,480 --> 00:11:59,600
tag hash rate is something

329
00:11:56,078 --> 00:12:01,199
that would be um

330
00:11:59,600 --> 00:12:03,278
when you actually specify it you can

331
00:12:01,200 --> 00:12:05,040
pre-hash that and just store the hashed

332
00:12:03,278 --> 00:12:07,278
results

333
00:12:05,039 --> 00:12:08,958
but the match vector has to vary like

334
00:12:07,278 --> 00:12:10,958
per frame so if you imagine something

335
00:12:08,958 --> 00:12:12,719
like facing direction

336
00:12:10,958 --> 00:12:14,159
when the character's like turning around

337
00:12:12,720 --> 00:12:16,000
and such

338
00:12:14,159 --> 00:12:18,000
it's going to change what's in that

339
00:12:16,000 --> 00:12:19,200
match vector so effectively what we're

340
00:12:18,000 --> 00:12:22,399
doing here is we're passing

341
00:12:19,200 --> 00:12:25,600
passing it almost like a partial hash um

342
00:12:22,399 --> 00:12:26,720
and then we're passing in like an

343
00:12:25,600 --> 00:12:29,440
additional part

344
00:12:26,720 --> 00:12:31,040
to go into the hash so then what we do

345
00:12:29,440 --> 00:12:34,000
is we're pulling out

346
00:12:31,039 --> 00:12:35,679
pieces of the hash right so we're

347
00:12:34,000 --> 00:12:37,039
basically saying we're gonna take these

348
00:12:35,679 --> 00:12:37,599
things and then we're gonna hash those

349
00:12:37,039 --> 00:12:41,039
together

350
00:12:37,600 --> 00:12:44,480
like so right and the thing that

351
00:12:41,039 --> 00:12:46,559
you know strikes me about this is

352
00:12:44,480 --> 00:12:48,480
honestly i'm not sure that we really

353
00:12:46,559 --> 00:12:50,479
need to bother

354
00:12:48,480 --> 00:12:55,039
so if we take a look at like what

355
00:12:50,480 --> 00:12:55,039
happens in something like hash 32

356
00:12:56,720 --> 00:13:04,399
what you can see is we are already doing

357
00:13:00,879 --> 00:13:07,679
a fold here where we do uh

358
00:13:04,399 --> 00:13:09,919
and you know where we where we mix in

359
00:13:07,679 --> 00:13:09,919
um

360
00:13:11,919 --> 00:13:15,360
i'm not sure how to say this correctly

361
00:13:14,320 --> 00:13:17,920
so

362
00:13:15,360 --> 00:13:20,000
what you can see here is we've got our

363
00:13:17,919 --> 00:13:24,639
hash set up so that we start with a

364
00:13:20,000 --> 00:13:26,320
initial value which is these two u64s

365
00:13:24,639 --> 00:13:28,320
and then we're going to like run it

366
00:13:26,320 --> 00:13:31,278
through aes deck

367
00:13:28,320 --> 00:13:32,959
to like basically you know permute those

368
00:13:31,278 --> 00:13:34,000
values and turn them into a fairly

369
00:13:32,958 --> 00:13:36,239
randomly distributed

370
00:13:34,000 --> 00:13:39,519
set of bits that's still unique to the

371
00:13:36,240 --> 00:13:39,519
the input values

372
00:13:39,919 --> 00:13:43,439
but my question here is just should we

373
00:13:42,480 --> 00:13:45,680
just go ahead

374
00:13:43,440 --> 00:13:48,000
and make that be something that happens

375
00:13:45,679 --> 00:13:50,159
for all of the input values

376
00:13:48,000 --> 00:13:51,120
because if we assume that there is a

377
00:13:50,159 --> 00:13:53,838
limited number

378
00:13:51,120 --> 00:13:55,919
of these match vector entries that are

379
00:13:53,839 --> 00:13:58,560
actually important

380
00:13:55,919 --> 00:13:59,919
um like we've done here where we said

381
00:13:58,559 --> 00:14:03,838
well we're just going to put

382
00:13:59,919 --> 00:14:03,838
four of them in their total anyway

383
00:14:05,120 --> 00:14:09,360
if that's the case then why not just

384
00:14:08,078 --> 00:14:13,039
hash that in

385
00:14:09,360 --> 00:14:15,519
with it you know so

386
00:14:13,039 --> 00:14:17,039
for example in here where we have this

387
00:14:15,519 --> 00:14:19,679
value in this value

388
00:14:17,039 --> 00:14:20,719
the uh what's going to happen with aes

389
00:14:19,679 --> 00:14:24,319
deck for example

390
00:14:20,720 --> 00:14:26,160
right is aes deck is effectively bit

391
00:14:24,320 --> 00:14:30,079
scrambling and an xor

392
00:14:26,159 --> 00:14:33,278
so it will do the bit scramble

393
00:14:30,078 --> 00:14:33,278
in fact i can show you

394
00:14:33,679 --> 00:14:40,159
maybe in the intel intrinsic skin

395
00:14:36,958 --> 00:14:40,159
i don't know if it actually

396
00:14:41,039 --> 00:14:48,000
uh will show us or not

397
00:14:44,559 --> 00:14:51,439
yeah so what you can see here

398
00:14:48,000 --> 00:14:54,799
is the action of this instruction is

399
00:14:51,440 --> 00:14:56,480
it's going to do a bunch of bit uh like

400
00:14:54,799 --> 00:14:58,240
randomization right so it's going to

401
00:14:56,480 --> 00:15:01,440
like shuffle the bits around

402
00:14:58,240 --> 00:15:03,440
all over the place like so

403
00:15:01,440 --> 00:15:05,760
and then it's going to xor in whatever

404
00:15:03,440 --> 00:15:08,720
the the extra parameter was

405
00:15:05,759 --> 00:15:09,120
right so it's the shuffling that we

406
00:15:08,720 --> 00:15:10,720
really

407
00:15:09,120 --> 00:15:12,720
care about we don't care about the

408
00:15:10,720 --> 00:15:14,079
xoring but the nice part about the

409
00:15:12,720 --> 00:15:17,278
xoring

410
00:15:14,078 --> 00:15:20,879
is that what we could do is xor in

411
00:15:17,278 --> 00:15:23,360
the other values right so i don't know

412
00:15:20,879 --> 00:15:25,838
how strong of a hash we actually want to

413
00:15:23,360 --> 00:15:26,800
have here but for example what we can do

414
00:15:25,839 --> 00:15:30,079
is instead

415
00:15:26,799 --> 00:15:32,719
of folding in the seed like so

416
00:15:30,078 --> 00:15:33,599
what we could do here is fold in an

417
00:15:32,720 --> 00:15:37,440
additional

418
00:15:33,600 --> 00:15:42,000
value right so

419
00:15:37,440 --> 00:15:42,720
uh because we know we really want this

420
00:15:42,000 --> 00:15:44,720
to be

421
00:15:42,720 --> 00:15:45,759
like i said something that something

422
00:15:44,720 --> 00:15:48,959
that wants to be

423
00:15:45,759 --> 00:15:49,600
really efficient uh what we can do is

424
00:15:48,958 --> 00:15:52,479
just say

425
00:15:49,600 --> 00:15:53,040
why don't you just pass us like you know

426
00:15:52,480 --> 00:15:56,320
the

427
00:15:53,039 --> 00:15:57,838
the address to hash from uh so something

428
00:15:56,320 --> 00:16:00,160
like

429
00:15:57,839 --> 00:16:00,160
you know

430
00:16:03,759 --> 00:16:07,600
i'm trying to think of like how we were

431
00:16:05,198 --> 00:16:10,639
doing that tag so

432
00:16:07,600 --> 00:16:15,040
if we did something more like this so

433
00:16:10,639 --> 00:16:18,320
we we said um

434
00:16:15,039 --> 00:16:23,838
there's a an extra like 128

435
00:16:18,320 --> 00:16:23,839
bit so there's there's you know like

436
00:16:24,879 --> 00:16:28,559
i'm not sure what to call this but

437
00:16:26,559 --> 00:16:31,439
something like uh

438
00:16:28,559 --> 00:16:33,278
the extra 16 byte thing to fold in here

439
00:16:31,440 --> 00:16:37,839
it would just be like it's not

440
00:16:33,278 --> 00:16:37,838
free but it's like close to free

441
00:16:38,078 --> 00:16:43,278
right so we can do this where we

442
00:16:40,559 --> 00:16:46,479
effectively say

443
00:16:43,278 --> 00:16:46,958
if you want us to hash two hundred and

444
00:16:46,480 --> 00:16:50,000
you know

445
00:16:46,958 --> 00:16:53,838
two in a sense two match vectors

446
00:16:50,000 --> 00:16:56,720
right um we can we can do that for you

447
00:16:53,839 --> 00:16:58,160
you know what i'm saying so especially

448
00:16:56,720 --> 00:17:05,838
another thing we could do

449
00:16:58,159 --> 00:17:05,838
is say like you know if we said this

450
00:17:07,199 --> 00:17:11,679
right now what you could do is say that

451
00:17:09,838 --> 00:17:14,159
there's two match vectors

452
00:17:11,679 --> 00:17:14,959
one that's the got the hashes in it and

453
00:17:14,160 --> 00:17:19,279
and the other

454
00:17:14,959 --> 00:17:22,959
that's you know something else right

455
00:17:19,279 --> 00:17:25,759
um and so we may even want this to be a

456
00:17:22,959 --> 00:17:26,959
uh like a very specific kind of function

457
00:17:25,759 --> 00:17:29,119
that actually takes

458
00:17:26,959 --> 00:17:33,840
you know something specific here and i'm

459
00:17:29,119 --> 00:17:33,839
not sure

460
00:17:38,160 --> 00:17:42,720
um again i'm not sure exactly how we

461
00:17:40,319 --> 00:17:44,480
want stuff to flow to that but

462
00:17:42,720 --> 00:17:45,759
this would give us a fairly well

463
00:17:44,480 --> 00:17:48,880
distributed hash

464
00:17:45,759 --> 00:17:53,279
from any two

465
00:17:48,880 --> 00:17:56,720
uh 128 bit values like that and so

466
00:17:53,279 --> 00:17:56,720
you know um

467
00:17:58,798 --> 00:18:15,279
let's let's just let's just see about

468
00:18:02,160 --> 00:18:18,559
what we're going to pass here

469
00:18:15,279 --> 00:18:20,160
so where where are we actually so here's

470
00:18:18,558 --> 00:18:21,918
here's where we're actually doing this

471
00:18:20,160 --> 00:18:24,558
right so you can see

472
00:18:21,919 --> 00:18:25,200
like an example of us producing these

473
00:18:24,558 --> 00:18:27,519
values

474
00:18:25,200 --> 00:18:30,480
like the you know weight vectors and and

475
00:18:27,519 --> 00:18:32,720
whatever else garbage

476
00:18:30,480 --> 00:18:34,400
uh that we're making here um and you can

477
00:18:32,720 --> 00:18:37,120
see us calling the get best bat

478
00:18:34,400 --> 00:18:37,679
uh best match bitmap so we know we're

479
00:18:37,119 --> 00:18:41,279
gonna come

480
00:18:37,679 --> 00:18:44,080
into here uh with some kind of a tag

481
00:18:41,279 --> 00:18:45,759
combination right so it's going to be

482
00:18:44,079 --> 00:18:49,279
like a bunch of tags

483
00:18:45,759 --> 00:18:52,400
that we that we combine together um

484
00:18:49,279 --> 00:18:53,839
and just looking at that you know yeah

485
00:18:52,400 --> 00:18:57,840
it seems like we're probably just going

486
00:18:53,839 --> 00:18:57,839
to want to store

487
00:19:00,880 --> 00:19:05,280
i mean there's it's really just pretty

488
00:19:03,679 --> 00:19:06,480
straightforward for us to just store

489
00:19:05,279 --> 00:19:08,319
these as hashes

490
00:19:06,480 --> 00:19:11,200
so i feel like what we want to do is

491
00:19:08,319 --> 00:19:14,558
almost introduce just this hashtag

492
00:19:11,200 --> 00:19:16,640
as a thing because these tags as well

493
00:19:14,558 --> 00:19:18,000
are you know what when we're doing these

494
00:19:16,640 --> 00:19:20,320
tags what are they going to be

495
00:19:18,000 --> 00:19:22,880
like they might be just like a series of

496
00:19:20,319 --> 00:19:24,720
16s or something

497
00:19:22,880 --> 00:19:26,480
and so i feel like we maybe just want to

498
00:19:24,720 --> 00:19:28,400
make this a little bit more general so

499
00:19:26,480 --> 00:19:32,000
like maybe we pull this out

500
00:19:28,400 --> 00:19:35,840
actually and we go into here oops

501
00:19:32,000 --> 00:19:39,919
um into the intrinsics

502
00:19:35,839 --> 00:19:43,599
and we maybe you know make like a hash

503
00:19:39,919 --> 00:19:47,280
thing i don't know like handmade hash

504
00:19:43,599 --> 00:19:47,279
sounds that sounds

505
00:19:47,759 --> 00:19:55,919
um yeah

506
00:19:52,160 --> 00:19:56,320
it's handmade hash um so if you imagine

507
00:19:55,919 --> 00:19:59,440
like

508
00:19:56,319 --> 00:20:02,558
a thing that's got the hash stuff in it

509
00:19:59,440 --> 00:20:06,159
right um and

510
00:20:02,558 --> 00:20:09,200
you imagine that we we think about this

511
00:20:06,159 --> 00:20:11,280
a little bit more um and

512
00:20:09,200 --> 00:20:14,319
you know i could pull the intrinsic into

513
00:20:11,279 --> 00:20:17,440
the intrinsics file we could have just a

514
00:20:14,319 --> 00:20:19,839
uh something here for for

515
00:20:17,440 --> 00:20:21,038
bit scrambling so you know we make a an

516
00:20:19,839 --> 00:20:24,000
intrinsic

517
00:20:21,038 --> 00:20:25,119
that's like bit scramble or something

518
00:20:24,000 --> 00:20:28,079
like this

519
00:20:25,119 --> 00:20:28,798
and it would just need i i guess i don't

520
00:20:28,079 --> 00:20:32,000
know

521
00:20:28,798 --> 00:20:34,480
um how we would be exposing that

522
00:20:32,000 --> 00:20:35,519
because one of the problems that we have

523
00:20:34,480 --> 00:20:36,960
yeah

524
00:20:35,519 --> 00:20:38,879
we'll leave it maybe for a little bit

525
00:20:36,960 --> 00:20:43,200
later because i feel like

526
00:20:38,880 --> 00:20:46,880
in simdee we already kind of did

527
00:20:43,200 --> 00:20:50,159
put this stuff in there right so

528
00:20:46,880 --> 00:20:53,520
we probably want to unify those uh

529
00:20:50,159 --> 00:20:55,840
into like we want to put that stuff

530
00:20:53,519 --> 00:20:57,599
into a more centralized location at some

531
00:20:55,839 --> 00:21:00,879
point but now is probably not the

532
00:20:57,599 --> 00:21:02,639
the time to do it but the point is

533
00:21:00,880 --> 00:21:04,960
if you imagine something that looks like

534
00:21:02,640 --> 00:21:04,960
this

535
00:21:06,159 --> 00:21:14,960
so we've got sort of a you know like a

536
00:21:09,759 --> 00:21:17,839
a hash value

537
00:21:14,960 --> 00:21:17,840
something like this

538
00:21:20,400 --> 00:21:24,798
and we just assumed that everyone uses

539
00:21:22,798 --> 00:21:26,400
this thing

540
00:21:24,798 --> 00:21:28,000
when they want to communicate with the

541
00:21:26,400 --> 00:21:31,759
hashing system so you can

542
00:21:28,000 --> 00:21:34,400
stick four u32s in there or two

543
00:21:31,759 --> 00:21:36,879
you know these or even like for tags for

544
00:21:34,400 --> 00:21:39,679
example

545
00:21:36,880 --> 00:21:41,120
you can put eight tags into one of them

546
00:21:39,679 --> 00:21:42,159
and then what we would do is just

547
00:21:41,119 --> 00:21:46,000
there's gonna be

548
00:21:42,159 --> 00:21:48,000
a thing that says that if you give us

549
00:21:46,000 --> 00:21:49,919
two of any two of these that you've

550
00:21:48,000 --> 00:21:53,279
filled out and we don't care

551
00:21:49,919 --> 00:21:56,320
like which you know what they are um

552
00:21:53,279 --> 00:21:58,319
we will produce like a a well a

553
00:21:56,319 --> 00:22:01,678
well-distributed hash

554
00:21:58,319 --> 00:22:03,200
from um from those and

555
00:22:01,679 --> 00:22:05,679
and you know maybe these should be

556
00:22:03,200 --> 00:22:07,840
called like hashable value

557
00:22:05,679 --> 00:22:09,280
in the sense that this is the things

558
00:22:07,839 --> 00:22:12,079
that you put in these are not

559
00:22:09,279 --> 00:22:13,599
hashed at all they're they're just

560
00:22:12,079 --> 00:22:16,319
things that you

561
00:22:13,599 --> 00:22:18,558
bear stuck in there um and then you

562
00:22:16,319 --> 00:22:19,359
would pass a hashable value to one of

563
00:22:18,558 --> 00:22:23,519
these things

564
00:22:19,359 --> 00:22:26,639
and like so and it gives you back

565
00:22:23,519 --> 00:22:27,918
the 32-bit lookup value that you

566
00:22:26,640 --> 00:22:31,280
actually need

567
00:22:27,919 --> 00:22:32,880
right so if you

568
00:22:31,279 --> 00:22:35,200
want to do something like that pretty

569
00:22:32,880 --> 00:22:35,760
straightforward you you don't have to

570
00:22:35,200 --> 00:22:39,600
use this

571
00:22:35,759 --> 00:22:44,079
set anymore instead what we would do

572
00:22:39,599 --> 00:22:48,399
is we just say okay we are going to

573
00:22:44,079 --> 00:22:52,960
uh do the load so

574
00:22:48,400 --> 00:22:54,960
we're going to take the the value here

575
00:22:52,960 --> 00:22:56,558
and in fact to be honest this really

576
00:22:54,960 --> 00:22:58,319
doesn't have to be here

577
00:22:56,558 --> 00:22:59,678
we know how big the thing is so it's

578
00:22:58,319 --> 00:23:01,359
really that's fine

579
00:22:59,679 --> 00:23:02,720
we're going to load it unaligned anyway

580
00:23:01,359 --> 00:23:05,918
it doesn't need that

581
00:23:02,720 --> 00:23:07,600
um additional piece of information so we

582
00:23:05,919 --> 00:23:09,919
can just leave that be

583
00:23:07,599 --> 00:23:12,240
um so basically what we'll say is load

584
00:23:09,919 --> 00:23:14,960
the 128 bits

585
00:23:12,240 --> 00:23:16,400
out of this thing um which is the whole

586
00:23:14,960 --> 00:23:23,440
thing

587
00:23:16,400 --> 00:23:26,960
go ahead and munge it with the seed

588
00:23:23,440 --> 00:23:28,240
uh like so so you know go ahead and

589
00:23:26,960 --> 00:23:33,360
munch the value

590
00:23:28,240 --> 00:23:33,359
and well that's a bug

591
00:23:33,440 --> 00:23:36,640
in fact why do we have two i don't even

592
00:23:35,200 --> 00:23:38,880
know why we have two of these like why

593
00:23:36,640 --> 00:23:41,600
wouldn't this just be

594
00:23:38,880 --> 00:23:44,159
load the hash value and hash the hash

595
00:23:41,599 --> 00:23:44,158
value right

596
00:23:45,919 --> 00:23:51,840
like so so yeah

597
00:24:00,880 --> 00:24:04,159
i think that would be all we would

598
00:24:02,558 --> 00:24:05,359
really need and

599
00:24:04,159 --> 00:24:07,520
you know maybe i was a little

600
00:24:05,359 --> 00:24:09,678
overzealous uh

601
00:24:07,519 --> 00:24:11,918
in making this a separate file you know

602
00:24:09,679 --> 00:24:15,278
i admit that

603
00:24:11,919 --> 00:24:19,679
because if we look at what this is doing

604
00:24:15,278 --> 00:24:22,400
um it's arguably a little bit stupid

605
00:24:19,679 --> 00:24:23,919
right like i mean how simple is that uh

606
00:24:22,400 --> 00:24:25,679
we don't really need a separate file for

607
00:24:23,919 --> 00:24:29,038
just these two things

608
00:24:25,679 --> 00:24:31,679
um so you know maybe but maybe we leave

609
00:24:29,038 --> 00:24:34,079
it around as an aspirational fantasy

610
00:24:31,679 --> 00:24:35,278
in the sense that you know maybe we want

611
00:24:34,079 --> 00:24:38,558
to have

612
00:24:35,278 --> 00:24:41,599
in the future some more

613
00:24:38,558 --> 00:24:43,759
fancy hash stuff uh that we're gonna use

614
00:24:41,599 --> 00:24:45,359
for i don't know like verifying a file

615
00:24:43,759 --> 00:24:48,079
or something like that

616
00:24:45,359 --> 00:24:50,240
um you know there's obviously sort of

617
00:24:48,079 --> 00:24:52,798
bare arguments we could make

618
00:24:50,240 --> 00:24:53,919
uh about that um they're not probably

619
00:24:52,798 --> 00:24:57,200
good arguments

620
00:24:53,919 --> 00:24:59,919
but you know what are you gonna do

621
00:24:57,200 --> 00:25:01,278
uh so yeah so i think that's probably

622
00:24:59,919 --> 00:25:04,159
good enough for now

623
00:25:01,278 --> 00:25:05,599
um and then what we can do is any place

624
00:25:04,159 --> 00:25:08,320
where we were previously gonna do

625
00:25:05,599 --> 00:25:08,319
something like that

626
00:25:08,480 --> 00:25:14,880
we can just sort of have you know

627
00:25:11,679 --> 00:25:15,440
uh we can just sort of have that in

628
00:25:14,880 --> 00:25:18,320
there so

629
00:25:15,440 --> 00:25:18,960
i i think what that would generally mean

630
00:25:18,319 --> 00:25:21,519
is that like

631
00:25:18,960 --> 00:25:24,079
in this asset hash entry thing where

632
00:25:21,519 --> 00:25:27,918
we're gonna have the hash table

633
00:25:24,079 --> 00:25:28,639
all we're really gonna do is you know

634
00:25:27,919 --> 00:25:32,640
match

635
00:25:28,640 --> 00:25:36,080
against i guess the source hashable

636
00:25:32,640 --> 00:25:36,080
so if we want to do

637
00:25:41,038 --> 00:25:44,079
yeah because this would have all of the

638
00:25:42,640 --> 00:25:45,679
information in there so if we wanted to

639
00:25:44,079 --> 00:25:49,439
we would just store

640
00:25:45,679 --> 00:25:52,080
uh the hashable in here and say

641
00:25:49,440 --> 00:25:53,360
that's the full set of things so two

642
00:25:52,079 --> 00:25:56,558
64-bit values

643
00:25:53,359 --> 00:25:59,199
is what we're going to match against um

644
00:25:56,558 --> 00:26:00,000
because that should be able to uniquely

645
00:25:59,200 --> 00:26:04,720
identify

646
00:26:00,000 --> 00:26:06,480
the thing because that would give you

647
00:26:04,720 --> 00:26:08,240
assuming that you actually just kept

648
00:26:06,480 --> 00:26:10,000
everything as u16s

649
00:26:08,240 --> 00:26:13,679
that would give you eight values which

650
00:26:10,000 --> 00:26:17,440
is like the four tags plus the four

651
00:26:13,679 --> 00:26:18,559
uh vector values and that should just

652
00:26:17,440 --> 00:26:21,519
work

653
00:26:18,558 --> 00:26:22,240
right um i mean you could even get

654
00:26:21,519 --> 00:26:25,359
fancier

655
00:26:22,240 --> 00:26:28,558
and have you know it by bite

656
00:26:25,359 --> 00:26:30,558
if you really wanted to and that would

657
00:26:28,558 --> 00:26:33,359
allow us to do stuff like

658
00:26:30,558 --> 00:26:34,000
having the indexes be only eight bits so

659
00:26:33,359 --> 00:26:38,319
you could have

660
00:26:34,000 --> 00:26:40,159
more of them or more tags right um

661
00:26:38,319 --> 00:26:41,439
so i don't know like there's a number of

662
00:26:40,159 --> 00:26:44,080
different ways we could do this

663
00:26:41,440 --> 00:26:45,200
i'm not sure which ones make sense we

664
00:26:44,079 --> 00:26:47,038
could make this thing

665
00:26:45,200 --> 00:26:49,519
be a little bit clearer laid out as well

666
00:26:47,038 --> 00:26:51,119
in the future if we want to i'm not sure

667
00:26:49,519 --> 00:26:52,558
um but we just would want to make sure

668
00:26:51,119 --> 00:26:55,599
that it's still the same

669
00:26:52,558 --> 00:26:58,158
basic 128 bit structure because that's

670
00:26:55,599 --> 00:27:02,719
what we know we can hash quickly

671
00:26:58,159 --> 00:27:05,679
right um so in here what we'd like to do

672
00:27:02,720 --> 00:27:06,240
is just make sure that this thing now

673
00:27:05,679 --> 00:27:08,480
takes

674
00:27:06,240 --> 00:27:10,960
all of the hash stuff that we had before

675
00:27:08,480 --> 00:27:12,558
and just feeds it into here so

676
00:27:10,960 --> 00:27:14,240
but i think at that point like we

677
00:27:12,558 --> 00:27:15,599
literally just have i don't know

678
00:27:14,240 --> 00:27:17,440
if we actually bothered to put in the

679
00:27:15,599 --> 00:27:21,918
hash in here yet

680
00:27:17,440 --> 00:27:23,679
um looks like we already did right

681
00:27:21,919 --> 00:27:25,600
um and when we say does this need to be

682
00:27:23,679 --> 00:27:28,480
a prime hash

683
00:27:25,599 --> 00:27:29,678
i'm not sure why we asked that question

684
00:27:28,480 --> 00:27:33,038
because

685
00:27:29,679 --> 00:27:35,519
we must have not really been thinking

686
00:27:33,038 --> 00:27:36,158
particularly much about this uh because

687
00:27:35,519 --> 00:27:38,240
obviously

688
00:27:36,159 --> 00:27:40,080
if we've gone through and done a

689
00:27:38,240 --> 00:27:41,599
well-distributed hash then it doesn't

690
00:27:40,079 --> 00:27:45,599
need to be a prime hash

691
00:27:41,599 --> 00:27:46,959
right so i don't know

692
00:27:45,599 --> 00:27:48,158
i don't know why we would have thought

693
00:27:46,960 --> 00:27:50,480
that would have needed to be a prime

694
00:27:48,159 --> 00:27:50,480
hash

695
00:27:53,919 --> 00:27:57,278
it's a reasonable question but i don't

696
00:27:55,200 --> 00:27:58,720
know the answer

697
00:27:57,278 --> 00:28:00,558
um the other thing that's interesting

698
00:27:58,720 --> 00:28:02,399
about this is we could

699
00:28:00,558 --> 00:28:05,359
you know if we wanted to now start to

700
00:28:02,398 --> 00:28:07,199
think about potentially

701
00:28:05,359 --> 00:28:08,798
eliminating the centralized asset store

702
00:28:07,200 --> 00:28:10,798
anyway like we could just say that

703
00:28:08,798 --> 00:28:12,960
everything goes through the hash now

704
00:28:10,798 --> 00:28:14,398
so as this becomes more powerful we may

705
00:28:12,960 --> 00:28:15,600
decide to start eliminating some of

706
00:28:14,398 --> 00:28:18,798
these other things

707
00:28:15,599 --> 00:28:22,079
this for example is now completely uh

708
00:28:18,798 --> 00:28:23,200
unnecessary so we wouldn't need the tag

709
00:28:22,079 --> 00:28:25,359
arrays at all

710
00:28:23,200 --> 00:28:26,240
i don't think which would eliminate a

711
00:28:25,359 --> 00:28:30,398
huge amount

712
00:28:26,240 --> 00:28:34,000
a bunch of complexity from the system so

713
00:28:30,398 --> 00:28:37,119
that seems pretty good um

714
00:28:34,000 --> 00:28:39,440
as well like just looking through you

715
00:28:37,119 --> 00:28:42,158
know what the

716
00:28:39,440 --> 00:28:42,159
yeah like what

717
00:28:43,359 --> 00:28:47,278
just thinking about it it seems like

718
00:28:44,640 --> 00:28:52,159
that would be pretty good

719
00:28:47,278 --> 00:28:52,159
so i think that's all well and good um

720
00:28:52,480 --> 00:28:56,720
so let's go ahead and keep going from

721
00:28:54,000 --> 00:28:58,000
there uh but yeah but this is a little

722
00:28:56,720 --> 00:28:59,600
suspect now because you're like well

723
00:28:58,000 --> 00:29:01,359
can't we just you know maybe we can just

724
00:28:59,599 --> 00:29:01,678
sort of store this stuff directly in

725
00:29:01,359 --> 00:29:03,519
there

726
00:29:01,679 --> 00:29:05,519
it's the thing i'm thinking you know

727
00:29:03,519 --> 00:29:06,960
like like why do we actually need like

728
00:29:05,519 --> 00:29:09,519
this right here

729
00:29:06,960 --> 00:29:11,600
um we could just make that be the thing

730
00:29:09,519 --> 00:29:14,720
that's in the hash directly

731
00:29:11,599 --> 00:29:18,158
and so i'm not sure

732
00:29:14,720 --> 00:29:18,159
why we wouldn't do that

733
00:29:19,200 --> 00:29:22,640
in fact i'm going to go ahead and say

734
00:29:20,480 --> 00:29:25,679
let's just go ahead and do that

735
00:29:22,640 --> 00:29:27,759
right because the only benefit the only

736
00:29:25,679 --> 00:29:32,399
thing we would get

737
00:29:27,759 --> 00:29:34,879
is over mapping of tags well you know so

738
00:29:32,398 --> 00:29:34,879
i guess

739
00:29:36,240 --> 00:29:41,038
i guess if you we should probably do it

740
00:29:38,960 --> 00:29:42,159
without that first because if you assume

741
00:29:41,038 --> 00:29:44,558
that there will be

742
00:29:42,159 --> 00:29:46,480
multiple tag sets that will all map to

743
00:29:44,558 --> 00:29:50,000
the same

744
00:29:46,480 --> 00:29:52,798
asset then we would want

745
00:29:50,000 --> 00:29:54,480
this right we do want an indirection

746
00:29:52,798 --> 00:29:58,798
here because we want to be able to map

747
00:29:54,480 --> 00:29:58,798
multiple tags to the same asset but

748
00:29:59,759 --> 00:30:03,038
my assumption would be that if we were

749
00:30:01,519 --> 00:30:04,720
going to do something like that or if we

750
00:30:03,038 --> 00:30:06,720
are doing something with that currently

751
00:30:04,720 --> 00:30:07,839
it's probably being done in more of like

752
00:30:06,720 --> 00:30:11,120
a range

753
00:30:07,839 --> 00:30:14,158
fashion right so

754
00:30:11,119 --> 00:30:17,678
we would be doing something like mapping

755
00:30:14,159 --> 00:30:19,679
a interval of hash values

756
00:30:17,679 --> 00:30:20,880
and it seems like we can probably make

757
00:30:19,679 --> 00:30:24,080
that work

758
00:30:20,880 --> 00:30:25,919
in some other way like for the the cases

759
00:30:24,079 --> 00:30:30,000
we actually care about

760
00:30:25,919 --> 00:30:33,120
having an asset respond uh

761
00:30:30,000 --> 00:30:37,599
specifically in that way i feel like it

762
00:30:33,119 --> 00:30:39,918
should be able to work right

763
00:30:37,599 --> 00:30:39,918
um

764
00:30:44,240 --> 00:30:51,839
i mean i could be wrong uh but it feels

765
00:30:47,599 --> 00:30:51,839
like it should be able to work

766
00:31:02,839 --> 00:31:05,839
hmm

767
00:31:10,079 --> 00:31:15,199
so i guess here's what i will say

768
00:31:13,200 --> 00:31:16,720
maybe that's not true like maybe i was a

769
00:31:15,200 --> 00:31:18,880
little bit overzealous here and the

770
00:31:16,720 --> 00:31:22,558
previous thing was actually a bit better

771
00:31:18,880 --> 00:31:25,679
so think about this so let's suppose

772
00:31:22,558 --> 00:31:29,038
that we had a

773
00:31:25,679 --> 00:31:31,440
entity that wants to map

774
00:31:29,038 --> 00:31:32,079
a bunch of different match vectors all

775
00:31:31,440 --> 00:31:35,519
to the same

776
00:31:32,079 --> 00:31:41,038
thing if we go through the hash

777
00:31:35,519 --> 00:31:44,880
table for that yeah so so all right

778
00:31:41,038 --> 00:31:46,960
i will admit to being dumb here um so

779
00:31:44,880 --> 00:31:48,640
or rather i will admit to being smarter

780
00:31:46,960 --> 00:31:51,278
in the past than i am

781
00:31:48,640 --> 00:31:53,440
in in the present right so if we

782
00:31:51,278 --> 00:31:57,359
consider what was happening here

783
00:31:53,440 --> 00:32:01,600
with uh the with the asset

784
00:31:57,359 --> 00:32:04,558
with having these two things be separate

785
00:32:01,599 --> 00:32:06,319
then i guess the reason why this is

786
00:32:04,558 --> 00:32:10,480
actually a better idea

787
00:32:06,319 --> 00:32:14,240
meaning why we why we would prefer

788
00:32:10,480 --> 00:32:16,960
this to the the previous

789
00:32:14,240 --> 00:32:18,720
uh way of doing thing or the the the one

790
00:32:16,960 --> 00:32:21,200
that i just sketched out

791
00:32:18,720 --> 00:32:21,919
is because if we actually do do it this

792
00:32:21,200 --> 00:32:26,480
way

793
00:32:21,919 --> 00:32:26,480
and fix the bug so don't you know

794
00:32:27,200 --> 00:32:31,600
don't leave the bug that was in there so

795
00:32:29,119 --> 00:32:34,558
that part was a good change

796
00:32:31,599 --> 00:32:35,839
if we leave it this way so that we're

797
00:32:34,558 --> 00:32:39,519
taking in

798
00:32:35,839 --> 00:32:42,079
a tag hash we're looking up a particular

799
00:32:39,519 --> 00:32:44,240
asset piece of information and then

800
00:32:42,079 --> 00:32:48,398
we're matching against it or whatever

801
00:32:44,240 --> 00:32:52,399
so i i think we can safely remove

802
00:32:48,398 --> 00:32:52,398
the the part where we

803
00:32:52,880 --> 00:32:58,159
um we can safely remove

804
00:32:56,159 --> 00:32:59,919
the part where we do packing or any of

805
00:32:58,159 --> 00:33:03,039
this stuff here

806
00:32:59,919 --> 00:33:06,799
that doesn't have to happen but what we

807
00:33:03,038 --> 00:33:10,640
would do is still do a tag hash

808
00:33:06,798 --> 00:33:13,440
look up to figure out which um

809
00:33:10,640 --> 00:33:15,038
or or more specifically maybe we just

810
00:33:13,440 --> 00:33:17,600
use the tag hash

811
00:33:15,038 --> 00:33:19,359
to look up the cache line like of the

812
00:33:17,599 --> 00:33:21,519
hash line like we would normally do

813
00:33:19,359 --> 00:33:24,639
we loop through those and then we just

814
00:33:21,519 --> 00:33:27,759
match against the entire match vector

815
00:33:24,640 --> 00:33:31,759
as we go right so the hash entries

816
00:33:27,759 --> 00:33:31,759
are just like this sort of a thing

817
00:33:32,240 --> 00:33:36,159
um we don't do this so we don't need to

818
00:33:34,640 --> 00:33:39,440
load a category

819
00:33:36,159 --> 00:33:41,919
we just go ahead and take

820
00:33:39,440 --> 00:33:42,480
the hash of the thing that we actually

821
00:33:41,919 --> 00:33:45,759
get

822
00:33:42,480 --> 00:33:46,319
right we do not hash the coordinates at

823
00:33:45,759 --> 00:33:49,359
all

824
00:33:46,319 --> 00:33:49,359
so those don't happen

825
00:33:49,839 --> 00:33:57,199
um we map into the tag array

826
00:33:53,919 --> 00:33:59,840
um i'm sorry the uh assets by tag

827
00:33:57,200 --> 00:34:00,880
table we look up in there and we just

828
00:33:59,839 --> 00:34:03,519
step through

829
00:34:00,880 --> 00:34:04,720
each asset looking to see which ones

830
00:34:03,519 --> 00:34:07,919
match

831
00:34:04,720 --> 00:34:12,800
and that i think would just give us

832
00:34:07,919 --> 00:34:15,838
what we want as long as the asset itself

833
00:34:12,800 --> 00:34:19,359
has a suppression field

834
00:34:15,838 --> 00:34:22,799
right so as long as the asset itself

835
00:34:19,358 --> 00:34:24,559
can mask off parts of the match vector

836
00:34:22,800 --> 00:34:24,960
that it doesn't care about it says i

837
00:34:24,559 --> 00:34:26,398
match

838
00:34:24,960 --> 00:34:28,480
everything in this part of the match

839
00:34:26,398 --> 00:34:32,159
vector then i think

840
00:34:28,480 --> 00:34:34,639
it just works right

841
00:34:32,159 --> 00:34:36,320
so that's actually just fine and then we

842
00:34:34,639 --> 00:34:39,358
you know i'm sad to say

843
00:34:36,320 --> 00:34:41,440
um you know i'll

844
00:34:39,358 --> 00:34:43,759
i'll go ahead and do the you know the

845
00:34:41,440 --> 00:34:47,119
sad sort of like

846
00:34:43,760 --> 00:34:48,399
where we delete our our code that we

847
00:34:47,119 --> 00:34:50,559
just added

848
00:34:48,398 --> 00:34:52,559
but it's okay it was it was learning

849
00:34:50,559 --> 00:34:53,199
experience so we don't actually need the

850
00:34:52,559 --> 00:34:56,398
hash

851
00:34:53,199 --> 00:34:57,439
that's gone uh but you know maybe we'll

852
00:34:56,398 --> 00:34:59,920
come back someday

853
00:34:57,440 --> 00:34:59,920
who knows

854
00:35:00,800 --> 00:35:05,680
so oh whoops i turned on power mode

855
00:35:03,920 --> 00:35:06,880
i mean every power mode is excellent

856
00:35:05,679 --> 00:35:09,358
maybe we'll leave that on but i'm going

857
00:35:06,880 --> 00:35:16,079
to turn off battery saver mode

858
00:35:09,358 --> 00:35:19,039
so if we go back to get asset from um

859
00:35:16,079 --> 00:35:20,960
uh so yeah so i think really all we have

860
00:35:19,039 --> 00:35:26,079
to do here is take the tag hash

861
00:35:20,960 --> 00:35:26,079
oh power mode is broken it looks like

862
00:35:27,119 --> 00:35:31,039
no it's not so i guess something i guess

863
00:35:29,039 --> 00:35:33,279
the i'm not sure what was happening down

864
00:35:31,039 --> 00:35:35,759
at the the base of the thing there but

865
00:35:33,280 --> 00:35:36,560
uh all right so anyway if we go ahead

866
00:35:35,760 --> 00:35:39,520
and we

867
00:35:36,559 --> 00:35:40,719
yeah so so why why is it i wonder what's

868
00:35:39,519 --> 00:35:42,320
going on there there must be a bug in

869
00:35:40,719 --> 00:35:43,679
power mode which is terrible because

870
00:35:42,320 --> 00:35:45,280
power mode's like the most important

871
00:35:43,679 --> 00:35:48,319
part of everything

872
00:35:45,280 --> 00:35:50,800
um so what we want to do here

873
00:35:48,320 --> 00:35:51,440
is once we grab the hash slot in

874
00:35:50,800 --> 00:35:54,560
question

875
00:35:51,440 --> 00:35:57,838
we just want to loop through uh

876
00:35:54,559 --> 00:35:58,799
the assets in that hash line so in the

877
00:35:57,838 --> 00:36:01,519
asset

878
00:35:58,800 --> 00:36:01,519
system here

879
00:36:03,838 --> 00:36:10,320
i need this to not there we go

880
00:36:07,519 --> 00:36:10,960
so if we loop through the the assets in

881
00:36:10,320 --> 00:36:12,880
the system

882
00:36:10,960 --> 00:36:15,199
like i said we can probably say like all

883
00:36:12,880 --> 00:36:17,920
right we'll get rid of hash entry

884
00:36:15,199 --> 00:36:20,078
um and instead what we'll do is we'll

885
00:36:17,920 --> 00:36:21,599
pack the hash entry stuff directly into

886
00:36:20,079 --> 00:36:23,839
the assets so that we don't have to like

887
00:36:21,599 --> 00:36:26,800
hop around

888
00:36:23,838 --> 00:36:28,320
for no reason and we'll go ahead and

889
00:36:26,800 --> 00:36:30,400
place these in here so

890
00:36:28,320 --> 00:36:32,480
you know in addition to the stuff that

891
00:36:30,400 --> 00:36:33,680
we have for the asset otherwise we'll

892
00:36:32,480 --> 00:36:40,559
have the match

893
00:36:33,679 --> 00:36:43,679
vector um and the tag hash

894
00:36:40,559 --> 00:36:45,599
uh and so those two will

895
00:36:43,679 --> 00:36:48,399
though those will just be there for us

896
00:36:45,599 --> 00:36:51,359
to sort of step through and grab

897
00:36:48,400 --> 00:36:52,800
uh and so we need an ability to link to

898
00:36:51,358 --> 00:36:55,119
the next one i don't think there's any

899
00:36:52,800 --> 00:36:57,760
reason we can't just use a pointer here

900
00:36:55,119 --> 00:36:59,119
so we can just do like next in in tag

901
00:36:57,760 --> 00:37:02,320
hash sort of a thing

902
00:36:59,119 --> 00:37:05,358
right and what we can do is

903
00:37:02,320 --> 00:37:06,960
grab the first one out so

904
00:37:05,358 --> 00:37:08,480
we'll like you know loop through the

905
00:37:06,960 --> 00:37:13,599
assets that we want to check

906
00:37:08,480 --> 00:37:15,838
uh this is called the the assets by tag

907
00:37:13,599 --> 00:37:17,440
right and we know it's the hash slot

908
00:37:15,838 --> 00:37:23,759
that we're looking up here

909
00:37:17,440 --> 00:37:25,679
we would then just loop until we're done

910
00:37:23,760 --> 00:37:27,119
and so that's all the stuff that we we

911
00:37:25,679 --> 00:37:28,399
would actually need to loop over

912
00:37:27,119 --> 00:37:30,320
i don't know again i don't know why

913
00:37:28,400 --> 00:37:31,760
farcoder's indentation is all broken i

914
00:37:30,320 --> 00:37:33,760
don't know if that's something that

915
00:37:31,760 --> 00:37:35,280
you know when that changed or what

916
00:37:33,760 --> 00:37:36,880
happened someone should tell me at some

917
00:37:35,280 --> 00:37:38,320
point what's going on with that

918
00:37:36,880 --> 00:37:40,160
because it used to do the right thing

919
00:37:38,320 --> 00:37:42,320
like that and now it doesn't

920
00:37:40,159 --> 00:37:43,519
i don't think so i'm not sure what

921
00:37:42,320 --> 00:37:47,920
what's going on there but

922
00:37:43,519 --> 00:37:50,239
who knows um anyway so

923
00:37:47,920 --> 00:37:51,440
once in here we just need to validate

924
00:37:50,239 --> 00:37:53,838
these two things

925
00:37:51,440 --> 00:37:55,039
so if we match both of these the match

926
00:37:53,838 --> 00:37:57,039
vector and the tag hash

927
00:37:55,039 --> 00:37:58,159
then we're good and the part that i was

928
00:37:57,039 --> 00:37:59,920
talking about before

929
00:37:58,159 --> 00:38:01,759
is like essentially these are just going

930
00:37:59,920 --> 00:38:04,480
to be self masking

931
00:38:01,760 --> 00:38:05,920
so when you look up a particular asset

932
00:38:04,480 --> 00:38:06,320
you're going to go ahead and say that

933
00:38:05,920 --> 00:38:09,280
that

934
00:38:06,320 --> 00:38:10,800
asset could uh and this replaces sort of

935
00:38:09,280 --> 00:38:13,839
the fuzzy matching we had before which

936
00:38:10,800 --> 00:38:15,920
is something that's much more concrete

937
00:38:13,838 --> 00:38:19,759
we just need something that will mask

938
00:38:15,920 --> 00:38:22,559
these values

939
00:38:19,760 --> 00:38:24,480
like we just need something that will

940
00:38:22,559 --> 00:38:27,279
take these values

941
00:38:24,480 --> 00:38:28,000
and get rid of ones that we don't want

942
00:38:27,280 --> 00:38:30,240
that this asks

943
00:38:28,000 --> 00:38:31,039
that are not important for this asset so

944
00:38:30,239 --> 00:38:34,000
if the tag

945
00:38:31,039 --> 00:38:36,079
hash matches it will then say okay let's

946
00:38:34,000 --> 00:38:38,000
build the appropriate match vector by

947
00:38:36,079 --> 00:38:39,839
trimming off the pieces that we don't

948
00:38:38,000 --> 00:38:41,599
care about and so all we need is like an

949
00:38:39,838 --> 00:38:45,599
efficient way

950
00:38:41,599 --> 00:38:49,680
um of like creating that mask

951
00:38:45,599 --> 00:38:53,760
and to be honest i'm

952
00:38:49,679 --> 00:38:54,078
not really sure what the efficient way

953
00:38:53,760 --> 00:38:57,440
is

954
00:38:54,079 --> 00:38:57,440
to create that mask

955
00:38:59,039 --> 00:39:01,920
i guess we don't really need to think

956
00:39:00,079 --> 00:39:03,519
about at the moment but it's like what

957
00:39:01,920 --> 00:39:06,320
you'd want to do is have a thing where

958
00:39:03,519 --> 00:39:06,320
you could load

959
00:39:06,960 --> 00:39:12,240
you'd want to be able to load like a

960
00:39:08,559 --> 00:39:12,239
value out that would then

961
00:39:12,838 --> 00:39:18,639
select

962
00:39:14,079 --> 00:39:18,640
select the lanes of like 30 bit you

963
00:39:20,639 --> 00:39:24,719
you could probably do it pretty easily

964
00:39:23,199 --> 00:39:28,399
with like

965
00:39:24,719 --> 00:39:31,519
a shuffle so like you'd you'd load like

966
00:39:28,400 --> 00:39:33,838
the shuffle pattern

967
00:39:31,519 --> 00:39:35,440
uh for sse or something like that and

968
00:39:33,838 --> 00:39:39,519
you'd just like

969
00:39:35,440 --> 00:39:39,519
allow it to shuffle for you

970
00:39:39,920 --> 00:39:45,119
a thing that had you know

971
00:39:43,119 --> 00:39:47,760
imagine in cindy loading something in

972
00:39:45,119 --> 00:39:50,559
that had 32-bit lanes where like

973
00:39:47,760 --> 00:39:52,480
you know the first 32-bit lane is all

974
00:39:50,559 --> 00:39:54,400
ones and then the rest are zeros

975
00:39:52,480 --> 00:39:55,599
and you just load in a shuffle pattern

976
00:39:54,400 --> 00:39:58,480
that says

977
00:39:55,599 --> 00:39:59,920
which to take for each lane that could

978
00:39:58,480 --> 00:40:02,079
trivially replicate out

979
00:39:59,920 --> 00:40:03,039
you know ones zeros one zeros right and

980
00:40:02,079 --> 00:40:06,079
then you just do the

981
00:40:03,039 --> 00:40:07,920
and um so

982
00:40:06,079 --> 00:40:10,560
i'm going to put a little to do in here

983
00:40:07,920 --> 00:40:13,838
that basically says like to do

984
00:40:10,559 --> 00:40:17,759
um the matching

985
00:40:13,838 --> 00:40:22,239
test could be done

986
00:40:17,760 --> 00:40:26,160
potentially quite efficiently

987
00:40:22,239 --> 00:40:26,799
in cmd and so we're gonna say that

988
00:40:26,159 --> 00:40:29,759
there's

989
00:40:26,800 --> 00:40:31,599
like a you know some kind of a thing

990
00:40:29,760 --> 00:40:32,480
here that's like the shuffle pattern or

991
00:40:31,599 --> 00:40:35,519
the the like

992
00:40:32,480 --> 00:40:38,318
uh the match pattern

993
00:40:35,519 --> 00:40:41,119
and i'm not sure what the easiest way to

994
00:40:38,318 --> 00:40:41,119
do that would be

995
00:40:41,280 --> 00:40:44,400
but i'm guessing what we want to do is

996
00:40:43,199 --> 00:40:48,719
just use like

997
00:40:44,400 --> 00:40:51,838
the the pieces of that to tell us um

998
00:40:48,719 --> 00:40:53,759
which one we're going to use so you know

999
00:40:51,838 --> 00:40:57,519
you could imagine it basically

1000
00:40:53,760 --> 00:41:00,720
being packed like something like

1001
00:40:57,519 --> 00:41:07,838
um every two you know like uh

1002
00:41:00,719 --> 00:41:07,838
it's it's set up like that um

1003
00:41:08,079 --> 00:41:11,280
you know what i'm saying so like it's

1004
00:41:10,318 --> 00:41:14,400
bit wise

1005
00:41:11,280 --> 00:41:17,119
it basically has uh you know four

1006
00:41:14,400 --> 00:41:18,480
settings it's which of for each one

1007
00:41:17,119 --> 00:41:21,838
corresponds

1008
00:41:18,480 --> 00:41:23,679
to a piece of the match vector

1009
00:41:21,838 --> 00:41:25,599
and we could just say that like zero or

1010
00:41:23,679 --> 00:41:28,719
one um

1011
00:41:25,599 --> 00:41:29,760
in each of those bottom slots uh so we

1012
00:41:28,719 --> 00:41:34,719
could say like

1013
00:41:29,760 --> 00:41:38,079
you know

1014
00:41:34,719 --> 00:41:39,199
i probably want to do it in bit order

1015
00:41:38,079 --> 00:41:42,000
right

1016
00:41:39,199 --> 00:41:44,239
so we probably want something like that

1017
00:41:42,000 --> 00:41:46,880
and each one of those would tell us

1018
00:41:44,239 --> 00:41:48,479
like whether we need to care about that

1019
00:41:46,880 --> 00:41:52,000
particular match

1020
00:41:48,480 --> 00:41:54,159
right so what we would do here is say

1021
00:41:52,000 --> 00:41:55,119
all right we know we want to check the

1022
00:41:54,159 --> 00:41:58,159
tag hash

1023
00:41:55,119 --> 00:42:02,240
so that has to match so we'd say if

1024
00:41:58,159 --> 00:42:02,719
the tag hash value that we were passed

1025
00:42:02,239 --> 00:42:07,759
in

1026
00:42:02,719 --> 00:42:07,759
equals the assets tag value

1027
00:42:08,239 --> 00:42:14,879
like so then that's the first step

1028
00:42:11,679 --> 00:42:18,078
but then we also need to do a check

1029
00:42:14,880 --> 00:42:20,400
um and we'll build the check uh here as

1030
00:42:18,079 --> 00:42:23,680
well

1031
00:42:20,400 --> 00:42:24,480
we could just say okay we've got a match

1032
00:42:23,679 --> 00:42:28,000
vector

1033
00:42:24,480 --> 00:42:29,599
that is the uh you know the kind of

1034
00:42:28,000 --> 00:42:31,119
neutered vector if you will well you

1035
00:42:29,599 --> 00:42:33,280
know what i could do too is i could just

1036
00:42:31,119 --> 00:42:33,280
do

1037
00:42:42,838 --> 00:42:47,440
this

1038
00:42:44,239 --> 00:42:48,159
so you just do this uh we'd say for each

1039
00:42:47,440 --> 00:42:52,000
of the

1040
00:42:48,159 --> 00:42:56,318
indices in there so for each of the

1041
00:42:52,000 --> 00:42:56,318
uh the elements that we're matching

1042
00:42:56,838 --> 00:42:59,838
against

1043
00:43:05,599 --> 00:43:09,359
yeah so for each of the elements that

1044
00:43:07,920 --> 00:43:12,800
we're matching against

1045
00:43:09,358 --> 00:43:14,078
uh in the in the tag hash we want to

1046
00:43:12,800 --> 00:43:16,318
look up

1047
00:43:14,079 --> 00:43:17,440
the corresponding bit value in the match

1048
00:43:16,318 --> 00:43:19,759
pattern

1049
00:43:17,440 --> 00:43:20,480
uh and make sure that we just don't

1050
00:43:19,760 --> 00:43:23,520
bother

1051
00:43:20,480 --> 00:43:24,240
with ones where it's zero so we would

1052
00:43:23,519 --> 00:43:29,119
say

1053
00:43:24,239 --> 00:43:29,118
like you know if um

1054
00:43:32,079 --> 00:43:34,318
you know when i think about it i might

1055
00:43:33,199 --> 00:43:37,199
just write this out long hand because

1056
00:43:34,318 --> 00:43:39,440
it's gonna be easier

1057
00:43:37,199 --> 00:43:41,039
yeah i think i will so it's going to be

1058
00:43:39,440 --> 00:43:42,000
easier to write longhand so let's just

1059
00:43:41,039 --> 00:43:44,880
do it

1060
00:43:42,000 --> 00:43:46,719
so if we go ahead and take the match

1061
00:43:44,880 --> 00:43:49,838
vector

1062
00:43:46,719 --> 00:43:55,118
e0 and the check

1063
00:43:49,838 --> 00:43:55,679
match vector we can just write it like

1064
00:43:55,119 --> 00:43:57,920
this

1065
00:43:55,679 --> 00:44:00,318
so we've got these two things if they're

1066
00:43:57,920 --> 00:44:00,318
equal

1067
00:44:00,559 --> 00:44:05,920
um we just need

1068
00:44:03,760 --> 00:44:08,079
something in here which also says well

1069
00:44:05,920 --> 00:44:11,280
if the match pattern

1070
00:44:08,079 --> 00:44:14,079
um and you know three

1071
00:44:11,280 --> 00:44:15,359
right shifted down by however much we're

1072
00:44:14,079 --> 00:44:18,640
on

1073
00:44:15,358 --> 00:44:22,400
um that's the rule for each one

1074
00:44:18,639 --> 00:44:25,598
of the of the elements right

1075
00:44:22,400 --> 00:44:26,720
and so what we could do is say all right

1076
00:44:25,599 --> 00:44:29,920
so there's

1077
00:44:26,719 --> 00:44:31,598
you know uh matches it's true and you

1078
00:44:29,920 --> 00:44:33,200
know i guess i can do this in a for loop

1079
00:44:31,599 --> 00:44:34,160
if we want to write the explicit this is

1080
00:44:33,199 --> 00:44:36,159
one of the things that c

1081
00:44:34,159 --> 00:44:37,920
sucks is it can't have a for loop for

1082
00:44:36,159 --> 00:44:38,399
loops don't evaluate to a value which

1083
00:44:37,920 --> 00:44:40,240
you know

1084
00:44:38,400 --> 00:44:41,838
much like if statements it's just stupid

1085
00:44:40,239 --> 00:44:44,159
it's just a bad idea

1086
00:44:41,838 --> 00:44:44,159
um

1087
00:44:46,880 --> 00:44:50,240
but anyway so you could basically say

1088
00:44:49,920 --> 00:44:53,358
like

1089
00:44:50,239 --> 00:44:56,639
all right we start with matches

1090
00:44:53,358 --> 00:44:58,719
we basically just like uh and

1091
00:44:56,639 --> 00:44:59,838
you know we we we want to take like this

1092
00:44:58,719 --> 00:45:03,199
is matches

1093
00:44:59,838 --> 00:45:05,440
and right so we and in

1094
00:45:03,199 --> 00:45:06,318
all of these and then at the end if

1095
00:45:05,440 --> 00:45:09,920
we've got

1096
00:45:06,318 --> 00:45:13,920
a match uh then we're we're good to go

1097
00:45:09,920 --> 00:45:15,838
right so we would say result

1098
00:45:13,920 --> 00:45:17,200
equals whatever this whichever asset

1099
00:45:15,838 --> 00:45:19,199
this actually is

1100
00:45:17,199 --> 00:45:21,358
and i guess one problem we have here is

1101
00:45:19,199 --> 00:45:25,039
it looks like for pointer wise

1102
00:45:21,358 --> 00:45:25,519
we want to know the asset index because

1103
00:45:25,039 --> 00:45:29,759
that's

1104
00:45:25,519 --> 00:45:32,239
we actually use the asset index itself

1105
00:45:29,760 --> 00:45:34,400
so we could just stuff the index in here

1106
00:45:32,239 --> 00:45:39,759
but you know in order to

1107
00:45:34,400 --> 00:45:39,760
remain compliant um we could just do

1108
00:45:40,079 --> 00:45:46,800
u32s here right so we could just say

1109
00:45:43,599 --> 00:45:48,640
like u32 like check index right

1110
00:45:46,800 --> 00:45:50,560
and then we would say like asset start

1111
00:45:48,639 --> 00:45:53,679
asset equals get

1112
00:45:50,559 --> 00:45:54,318
asset and we would just say you know we

1113
00:45:53,679 --> 00:45:57,838
want

1114
00:45:54,318 --> 00:46:00,159
this one or something right

1115
00:45:57,838 --> 00:46:02,000
so assuming that we want to do that it's

1116
00:46:00,159 --> 00:46:06,399
the same exact code

1117
00:46:02,000 --> 00:46:08,239
it's just we uh we would need this

1118
00:46:06,400 --> 00:46:09,680
like this part has to come out so you

1119
00:46:08,239 --> 00:46:10,318
know this becomes a while loop because

1120
00:46:09,679 --> 00:46:13,118
we can't

1121
00:46:10,318 --> 00:46:14,079
access the variable that we need so

1122
00:46:13,119 --> 00:46:17,280
while check if

1123
00:46:14,079 --> 00:46:19,039
index is valid um we would just sort of

1124
00:46:17,280 --> 00:46:21,519
chain through here so we'd say

1125
00:46:19,039 --> 00:46:21,519
all right

1126
00:46:23,119 --> 00:46:27,039
loop over the indexes and we pull them

1127
00:46:25,599 --> 00:46:29,760
out as we go

1128
00:46:27,039 --> 00:46:43,838
um there's a weird so yeah someone

1129
00:46:29,760 --> 00:46:43,839
ryan's not here today is he

1130
00:46:50,559 --> 00:46:55,440
well doesn't sound like so

1131
00:46:54,239 --> 00:46:57,279
yeah i have to find out what's going on

1132
00:46:55,440 --> 00:46:59,679
with that power mode we'll have to to

1133
00:46:57,280 --> 00:47:00,720
to take a look at it but anyway um so if

1134
00:46:59,679 --> 00:47:03,598
we loop through the

1135
00:47:00,719 --> 00:47:05,598
the different uh indexes here then what

1136
00:47:03,599 --> 00:47:08,720
we could do is just say like all right

1137
00:47:05,599 --> 00:47:10,800
uh you know we're gonna return this one

1138
00:47:08,719 --> 00:47:13,759
so it's pretty straightforward so

1139
00:47:10,800 --> 00:47:13,760
looping over these

1140
00:47:22,838 --> 00:47:25,838
oops

1141
00:47:28,800 --> 00:47:33,119
so looking over these we just checked

1142
00:47:30,400 --> 00:47:37,760
the pattern we see whether or not

1143
00:47:33,119 --> 00:47:39,519
um these are valid

1144
00:47:37,760 --> 00:47:41,040
based on whether or not the pattern says

1145
00:47:39,519 --> 00:47:44,480
we should so if the pattern

1146
00:47:41,039 --> 00:47:47,358
is zero then

1147
00:47:44,480 --> 00:47:48,000
we will check them if it's one then we

1148
00:47:47,358 --> 00:47:50,000
won't

1149
00:47:48,000 --> 00:47:51,119
right so instead of calling this a match

1150
00:47:50,000 --> 00:47:55,599
pattern i guess

1151
00:47:51,119 --> 00:47:55,599
i'll call this a like match any

1152
00:48:01,280 --> 00:48:04,480
right because basically what it says is

1153
00:48:03,199 --> 00:48:06,719
if there's a one

1154
00:48:04,480 --> 00:48:08,000
in the two-bit lane that corresponds to

1155
00:48:06,719 --> 00:48:10,959
the thing you're checking

1156
00:48:08,000 --> 00:48:10,960
you match anything

1157
00:48:11,280 --> 00:48:16,319
and off you go right

1158
00:48:14,318 --> 00:48:18,000
if they're all zeros then you have to

1159
00:48:16,318 --> 00:48:20,079
match exactly

1160
00:48:18,000 --> 00:48:21,920
and if any of them are ones then you

1161
00:48:20,079 --> 00:48:24,880
don't have to match that lane and you're

1162
00:48:21,920 --> 00:48:24,880
still considered a match

1163
00:48:25,760 --> 00:48:32,720
now i think um

1164
00:48:30,079 --> 00:48:34,318
like i think that's mostly it and so

1165
00:48:32,719 --> 00:48:34,879
there's a couple things we have to care

1166
00:48:34,318 --> 00:48:38,239
about here

1167
00:48:34,880 --> 00:48:41,920
sort of a little bit i guess uh

1168
00:48:38,239 --> 00:48:42,639
which is is this um the way that we were

1169
00:48:41,920 --> 00:48:45,599
doing this

1170
00:48:42,639 --> 00:48:46,159
before we need to handle the wrapping

1171
00:48:45,599 --> 00:48:50,318
part

1172
00:48:46,159 --> 00:48:52,639
correctly um so we we do want to like

1173
00:48:50,318 --> 00:48:55,358
just double check that we're we're gonna

1174
00:48:52,639 --> 00:48:57,440
map the like facing directions

1175
00:48:55,358 --> 00:48:58,960
correctly and and stuff like that so

1176
00:48:57,440 --> 00:48:59,599
we're gonna have to take a like a look

1177
00:48:58,960 --> 00:49:02,639
at that

1178
00:48:59,599 --> 00:49:04,559
um eventually as well but you know we'll

1179
00:49:02,639 --> 00:49:06,000
we'll get to that we'll cross that

1180
00:49:04,559 --> 00:49:07,920
bridge we'll burn that bridge when we

1181
00:49:06,000 --> 00:49:10,880
come to it um

1182
00:49:07,920 --> 00:49:11,920
so now um the only thing that i think is

1183
00:49:10,880 --> 00:49:15,039
implied here is that

1184
00:49:11,920 --> 00:49:17,838
this is now like an asset id effectively

1185
00:49:15,039 --> 00:49:17,838
right

1186
00:49:18,318 --> 00:49:24,480
and i don't know if we have asset ids

1187
00:49:21,599 --> 00:49:24,480
as a thing

1188
00:49:25,760 --> 00:49:32,640
we don't um so anyway

1189
00:49:29,199 --> 00:49:34,799
so that's what we need there and

1190
00:49:32,639 --> 00:49:36,799
if these are u32s then oops that

1191
00:49:34,800 --> 00:49:38,800
shouldn't be a pointer

1192
00:49:36,800 --> 00:49:39,839
um then everything should just work and

1193
00:49:38,800 --> 00:49:43,359
we loop through these

1194
00:49:39,838 --> 00:49:47,119
it should all be fine right uh

1195
00:49:43,358 --> 00:49:50,719
and off we go this is not called

1196
00:49:47,119 --> 00:49:50,720
asset it's called check

1197
00:49:57,358 --> 00:50:04,159
um that is supposed to be

1198
00:50:00,880 --> 00:50:06,480
a c value and there we go

1199
00:50:04,159 --> 00:50:06,480
all right

1200
00:50:08,400 --> 00:50:15,760
so in theory uh that's

1201
00:50:12,559 --> 00:50:19,680
all we needed to do right

1202
00:50:15,760 --> 00:50:22,400
and now yeah like

1203
00:50:19,679 --> 00:50:24,318
so we have a couple different things

1204
00:50:22,400 --> 00:50:24,880
here that i'm not sure about so it looks

1205
00:50:24,318 --> 00:50:28,239
like

1206
00:50:24,880 --> 00:50:29,200
what we did here is we we plow an asset

1207
00:50:28,239 --> 00:50:31,118
category

1208
00:50:29,199 --> 00:50:32,719
in and then we put i mean i don't know

1209
00:50:31,119 --> 00:50:34,000
like here you can see who knows what

1210
00:50:32,719 --> 00:50:36,318
we're doing right like we're just

1211
00:50:34,000 --> 00:50:38,318
we're just munching these together into

1212
00:50:36,318 --> 00:50:40,800
a value that preserves as many bits as

1213
00:50:38,318 --> 00:50:44,400
we thought that we would need right

1214
00:50:40,800 --> 00:50:46,640
um and you know that's all fine

1215
00:50:44,400 --> 00:50:48,079
this semicolon you know i don't know

1216
00:50:46,639 --> 00:50:49,920
what that's doing there because

1217
00:50:48,079 --> 00:50:52,800
you don't put a semicolon there but

1218
00:50:49,920 --> 00:50:57,599
apparently that's that's where that is

1219
00:50:52,800 --> 00:50:57,599
um and if i look at this

1220
00:50:57,920 --> 00:51:02,159
right that if the indentation was

1221
00:51:00,239 --> 00:51:02,959
working which it's not and i don't know

1222
00:51:02,159 --> 00:51:06,078
why

1223
00:51:02,960 --> 00:51:10,480
um then we should end up right with with

1224
00:51:06,079 --> 00:51:10,480
that being the correct set of things

1225
00:51:10,880 --> 00:51:17,680
all right so

1226
00:51:13,920 --> 00:51:22,960
now what right like what do we do now

1227
00:51:17,679 --> 00:51:24,558
so now i think we just need

1228
00:51:22,960 --> 00:51:27,599
like that function we were just looking

1229
00:51:24,559 --> 00:51:29,680
at right like get tag hash

1230
00:51:27,599 --> 00:51:32,440
so i think all we really need to do now

1231
00:51:29,679 --> 00:51:35,279
is like this code just kind of gets

1232
00:51:32,440 --> 00:51:37,838
simplified quite a bit

1233
00:51:35,280 --> 00:51:37,839
i think

1234
00:51:38,559 --> 00:51:46,640
so i don't really know

1235
00:51:43,519 --> 00:51:48,079
why it says smoke for a particle that's

1236
00:51:46,639 --> 00:51:49,358
fire system probably because we were

1237
00:51:48,079 --> 00:51:51,119
just screwing around with it but

1238
00:51:49,358 --> 00:51:56,239
whatever

1239
00:51:51,119 --> 00:51:56,240
so we are going to say like uh

1240
00:51:59,039 --> 00:52:02,558
we'll just call this tags for now so

1241
00:52:01,039 --> 00:52:03,440
we're just going to say like get tag

1242
00:52:02,559 --> 00:52:06,240
hash here

1243
00:52:03,440 --> 00:52:08,159
right and what we want to do is we want

1244
00:52:06,239 --> 00:52:09,838
to say that this is particle

1245
00:52:08,159 --> 00:52:11,199
smoke because that's what we were doing

1246
00:52:09,838 --> 00:52:13,599
before

1247
00:52:11,199 --> 00:52:15,039
uh and then we just need asset particle

1248
00:52:13,599 --> 00:52:19,280
as the category

1249
00:52:15,039 --> 00:52:22,000
and then i think instead of get bet best

1250
00:52:19,280 --> 00:52:22,559
get best match bitmap from you can see

1251
00:52:22,000 --> 00:52:25,039
how much

1252
00:52:22,559 --> 00:52:26,079
smaller and simpler this code gets we

1253
00:52:25,039 --> 00:52:33,039
just say

1254
00:52:26,079 --> 00:52:35,839
give me you know this this thing right

1255
00:52:33,039 --> 00:52:36,400
uh i think the problem we would have

1256
00:52:35,838 --> 00:52:38,318
here

1257
00:52:36,400 --> 00:52:40,079
is just that like we probably want

1258
00:52:38,318 --> 00:52:41,440
multiple of these so

1259
00:52:40,079 --> 00:52:43,280
you know presumably you would want to

1260
00:52:41,440 --> 00:52:45,440
get more than just one bitmap but that's

1261
00:52:43,280 --> 00:52:47,519
a limitation of the particle system that

1262
00:52:45,440 --> 00:52:50,159
we haven't actually done anything with

1263
00:52:47,519 --> 00:52:52,318
uh so you know we don't really have to

1264
00:52:50,159 --> 00:52:54,399
care about that particularly much

1265
00:52:52,318 --> 00:52:55,358
now for these we don't want to have to

1266
00:52:54,400 --> 00:52:58,240
always pass

1267
00:52:55,358 --> 00:53:00,318
in all of the tags so i'm guessing that

1268
00:52:58,239 --> 00:53:02,479
what we probably want to do

1269
00:53:00,318 --> 00:53:06,000
is just say like all right for each of

1270
00:53:02,480 --> 00:53:07,760
the asset tag ideas that we have here

1271
00:53:06,000 --> 00:53:11,440
we'll just assume that they're none

1272
00:53:07,760 --> 00:53:11,440
unless somebody says otherwise

1273
00:53:12,838 --> 00:53:15,838
right

1274
00:53:17,599 --> 00:53:19,838
so

1275
00:53:21,838 --> 00:53:25,599
just to read that a little clearer there

1276
00:53:23,440 --> 00:53:27,280
so we assume that there always has to be

1277
00:53:25,599 --> 00:53:28,720
an asset category maybe we should say

1278
00:53:27,280 --> 00:53:29,680
there's always at least the first one

1279
00:53:28,719 --> 00:53:32,799
there

1280
00:53:29,679 --> 00:53:37,279
um but uh but i don't know

1281
00:53:32,800 --> 00:53:41,519
uh and then we just do get bitmap uh

1282
00:53:37,280 --> 00:53:45,280
is it just get called getbitmap no

1283
00:53:41,519 --> 00:53:47,920
what's it called get best bitmap

1284
00:53:45,280 --> 00:53:49,839
guess matt get best match bitmap from

1285
00:53:47,920 --> 00:53:52,400
yeah

1286
00:53:49,838 --> 00:53:54,000
uh and then for the asset matching here

1287
00:53:52,400 --> 00:53:56,720
what we would say i think

1288
00:53:54,000 --> 00:53:57,679
is just like look if you don't have a

1289
00:53:56,719 --> 00:53:59,598
match vector

1290
00:53:57,679 --> 00:54:01,598
then you don't right because you

1291
00:53:59,599 --> 00:54:03,760
wouldn't need to have one

1292
00:54:01,599 --> 00:54:05,039
if you just pass in all zeros then if

1293
00:54:03,760 --> 00:54:09,359
there's a

1294
00:54:05,039 --> 00:54:14,639
basically a default uh value

1295
00:54:09,358 --> 00:54:14,639
that's what you'll get right um

1296
00:54:15,679 --> 00:54:22,078
i think that would be pretty much it so

1297
00:54:19,119 --> 00:54:22,720
at that point uh now we just have to go

1298
00:54:22,079 --> 00:54:24,800
clean up

1299
00:54:22,719 --> 00:54:26,879
the code that was doing other stuff and

1300
00:54:24,800 --> 00:54:28,640
i think because we sort of

1301
00:54:26,880 --> 00:54:30,240
i don't know maybe we did a good job i

1302
00:54:28,639 --> 00:54:31,679
don't want to say that offhand because

1303
00:54:30,239 --> 00:54:33,358
maybe we didn't

1304
00:54:31,679 --> 00:54:34,719
but i feel like we ended up doing a

1305
00:54:33,358 --> 00:54:36,159
thing that's like really direct and

1306
00:54:34,719 --> 00:54:39,519
straightforward very simple

1307
00:54:36,159 --> 00:54:42,798
would be quite fast and

1308
00:54:39,519 --> 00:54:45,838
as an extra added benefit uh

1309
00:54:42,798 --> 00:54:47,199
is super easy to port so in this case i

1310
00:54:45,838 --> 00:54:49,358
think when you say get

1311
00:54:47,199 --> 00:54:50,639
uh best match sound from like in this

1312
00:54:49,358 --> 00:54:52,239
case you can even just collapse this

1313
00:54:50,639 --> 00:54:55,199
whole thing

1314
00:54:52,239 --> 00:54:57,838
like down to like just this one line

1315
00:54:55,199 --> 00:55:01,199
right because all it was was a tag bloop

1316
00:54:57,838 --> 00:55:04,159
here uh so all you would say

1317
00:55:01,199 --> 00:55:04,159
is uh

1318
00:55:04,798 --> 00:55:07,838
get tag hash

1319
00:55:08,000 --> 00:55:13,199
tag hash there you go um

1320
00:55:11,119 --> 00:55:14,480
is get tag hash with the two things that

1321
00:55:13,199 --> 00:55:15,838
you were passing before and then you

1322
00:55:14,480 --> 00:55:19,358
delete all this code

1323
00:55:15,838 --> 00:55:22,480
right uh and i think that's it

1324
00:55:19,358 --> 00:55:26,719
like that's that's all there is to it

1325
00:55:22,480 --> 00:55:30,000
right so that seems really good

1326
00:55:26,719 --> 00:55:31,439
uh and so all we now have to do is port

1327
00:55:30,000 --> 00:55:32,880
all that code

1328
00:55:31,440 --> 00:55:34,559
that was doing that into something

1329
00:55:32,880 --> 00:55:35,200
simpler that's nice and efficient and

1330
00:55:34,559 --> 00:55:36,720
clean

1331
00:55:35,199 --> 00:55:38,639
um we don't have to worry about all the

1332
00:55:36,719 --> 00:55:40,078
garbage we were doing before which seems

1333
00:55:38,639 --> 00:55:41,759
really good

1334
00:55:40,079 --> 00:55:44,000
now here's the part where we care about

1335
00:55:41,760 --> 00:55:46,400
this little snippet of code

1336
00:55:44,000 --> 00:55:49,119
um so in here right we want to prepare

1337
00:55:46,400 --> 00:55:50,798
this match vector and we want the match

1338
00:55:49,119 --> 00:55:53,920
vector

1339
00:55:50,798 --> 00:55:55,440
to like make some sense um and so what

1340
00:55:53,920 --> 00:55:56,639
we have to do is figure out what are the

1341
00:55:55,440 --> 00:55:58,079
things that are actually going to go

1342
00:55:56,639 --> 00:55:59,759
into this match vector

1343
00:55:58,079 --> 00:56:01,359
and the problem that we have here is

1344
00:55:59,760 --> 00:56:03,520
like i have absolutely no idea how we

1345
00:56:01,358 --> 00:56:06,239
want this thing laid out

1346
00:56:03,519 --> 00:56:08,159
and so what we probably want to do is

1347
00:56:06,239 --> 00:56:09,759
make a wild guess

1348
00:56:08,159 --> 00:56:11,598
about like what this match vector is

1349
00:56:09,760 --> 00:56:14,720
going to have in it

1350
00:56:11,599 --> 00:56:18,559
um and

1351
00:56:14,719 --> 00:56:19,039
probably it's going to be something like

1352
00:56:18,559 --> 00:56:20,400
you know

1353
00:56:19,039 --> 00:56:22,639
i have no idea what it's going to be

1354
00:56:20,400 --> 00:56:22,639
like

1355
00:56:22,719 --> 00:56:29,358
we know a few things that we have right

1356
00:56:26,239 --> 00:56:31,199
so maybe we just start by talking about

1357
00:56:29,358 --> 00:56:34,719
what those are

1358
00:56:31,199 --> 00:56:38,159
so maybe we say asset match

1359
00:56:34,719 --> 00:56:42,399
vector elements uh and we just

1360
00:56:38,159 --> 00:56:45,279
say like match element

1361
00:56:42,400 --> 00:56:45,519
and we've just got these four here right

1362
00:56:45,280 --> 00:56:48,000
and

1363
00:56:45,519 --> 00:56:49,039
it's similarly like you know we can just

1364
00:56:48,000 --> 00:56:50,719
say like oh it's

1365
00:56:49,039 --> 00:56:52,960
well there's however many there are

1366
00:56:50,719 --> 00:56:52,959
right

1367
00:56:54,318 --> 00:56:58,880
so we could just say well what are you

1368
00:56:57,199 --> 00:57:00,239
know what are these things so like what

1369
00:56:58,880 --> 00:57:01,680
are the different values that we're

1370
00:57:00,239 --> 00:57:03,439
actually going to talk about having in

1371
00:57:01,679 --> 00:57:05,358
here

1372
00:57:03,440 --> 00:57:07,280
and we knew that facing direction is one

1373
00:57:05,358 --> 00:57:09,838
that we look up on we know that variant

1374
00:57:07,280 --> 00:57:13,040
is one that we look up on

1375
00:57:09,838 --> 00:57:15,279
and i i don't actually know

1376
00:57:13,039 --> 00:57:16,159
if there's any other things at least at

1377
00:57:15,280 --> 00:57:18,559
the moment

1378
00:57:16,159 --> 00:57:20,960
that we actually you know that we

1379
00:57:18,559 --> 00:57:20,960
actually

1380
00:57:22,400 --> 00:57:27,760
want in there um because we don't have a

1381
00:57:26,960 --> 00:57:31,119
lot of other

1382
00:57:27,760 --> 00:57:32,000
parametric stuff so it may be that like

1383
00:57:31,119 --> 00:57:34,480
you know like that's

1384
00:57:32,000 --> 00:57:36,000
it for now right and so it's not even

1385
00:57:34,480 --> 00:57:38,000
like you know

1386
00:57:36,000 --> 00:57:40,559
and we could we could try to always make

1387
00:57:38,000 --> 00:57:42,079
sure this is like reserved at the right

1388
00:57:40,559 --> 00:57:43,599
size or something and i don't know what

1389
00:57:42,079 --> 00:57:44,480
we want to do there but like we could

1390
00:57:43,599 --> 00:57:46,960
just say that

1391
00:57:44,480 --> 00:57:47,519
right uh and another thing that we could

1392
00:57:46,960 --> 00:57:50,159
do here

1393
00:57:47,519 --> 00:57:51,039
is we could say if we wanted to there's

1394
00:57:50,159 --> 00:57:54,558
more

1395
00:57:51,039 --> 00:57:58,000
that there's like less room

1396
00:57:54,559 --> 00:57:59,519
because we we don't have like we know

1397
00:57:58,000 --> 00:58:01,280
we're not gonna have four billion

1398
00:57:59,519 --> 00:58:02,559
variants of something right that's not

1399
00:58:01,280 --> 00:58:05,119
gonna happen

1400
00:58:02,559 --> 00:58:06,880
um we don't have the art budget for that

1401
00:58:05,119 --> 00:58:07,599
that you you know red dead redemption

1402
00:58:06,880 --> 00:58:11,519
probably has

1403
00:58:07,599 --> 00:58:13,599
4 billion assets in it but we're not

1404
00:58:11,519 --> 00:58:23,838
gonna

1405
00:58:13,599 --> 00:58:23,838
so anyway

1406
00:58:24,880 --> 00:58:32,400
what i was trying to say uh is

1407
00:58:28,639 --> 00:58:34,318
i would like to um

1408
00:58:32,400 --> 00:58:36,480
make it so that this is as like

1409
00:58:34,318 --> 00:58:38,880
self-explanatory as possible and

1410
00:58:36,480 --> 00:58:40,159
as simple as possible because this is

1411
00:58:38,880 --> 00:58:41,760
the one part of the system that doesn't

1412
00:58:40,159 --> 00:58:44,078
get handled by the hash

1413
00:58:41,760 --> 00:58:45,599
right it we have to check individual

1414
00:58:44,079 --> 00:58:48,960
elements to make sure

1415
00:58:45,599 --> 00:58:50,880
to see which one we've got and so

1416
00:58:48,960 --> 00:58:52,720
you know it's the one part that we can't

1417
00:58:50,880 --> 00:58:57,119
that has to be sort of like a

1418
00:58:52,719 --> 00:58:58,318
a slower traversal of some kind right

1419
00:58:57,119 --> 00:59:00,318
and we can still try to make sure that

1420
00:58:58,318 --> 00:59:04,159
reversal isn't too slow but

1421
00:59:00,318 --> 00:59:05,838
it's it's not like the tags which are

1422
00:59:04,159 --> 00:59:07,679
exact matches

1423
00:59:05,838 --> 00:59:09,119
so the exact matches can just go

1424
00:59:07,679 --> 00:59:10,798
directly through the hash table and we

1425
00:59:09,119 --> 00:59:12,000
can know that they'll be like very very

1426
00:59:10,798 --> 00:59:19,838
efficient

1427
00:59:12,000 --> 00:59:19,838
so you know we'll see

1428
00:59:26,798 --> 00:59:31,280
all right so moving along from there um

1429
00:59:29,440 --> 00:59:34,480
if we go ahead and assume

1430
00:59:31,280 --> 00:59:37,359
that we're just going to use

1431
00:59:34,480 --> 00:59:38,240
facing direction and variance then i

1432
00:59:37,358 --> 00:59:41,759
don't actually

1433
00:59:38,239 --> 00:59:42,318
know if we care about variant much in

1434
00:59:41,760 --> 00:59:44,079
here

1435
00:59:42,318 --> 00:59:45,519
but if we take a look at the match

1436
00:59:44,079 --> 00:59:48,559
vector

1437
00:59:45,519 --> 00:59:48,559
which is going to be this

1438
00:59:50,719 --> 00:59:54,078
then really all we have to do is fill in

1439
00:59:53,039 --> 00:59:58,558
that one

1440
00:59:54,079 --> 00:59:58,559
facing direction value

1441
00:59:58,719 --> 01:00:03,519
and the problem that we're going to have

1442
01:00:00,318 --> 01:00:06,558
here is that the facing direction

1443
01:00:03,519 --> 01:00:09,679
uh whatever that may be and

1444
01:00:06,559 --> 01:00:11,280
oops i

1445
01:00:09,679 --> 01:00:12,719
forgot what it was so it's this this

1446
01:00:11,280 --> 01:00:14,720
right here

1447
01:00:12,719 --> 01:00:16,480
um that's going to be a floating point

1448
01:00:14,719 --> 01:00:18,798
value and we need to like

1449
01:00:16,480 --> 01:00:20,400
bucket that floating point value in

1450
01:00:18,798 --> 01:00:25,358
there somehow

1451
01:00:20,400 --> 01:00:25,358
right and

1452
01:00:26,079 --> 01:00:32,079
we want it to be periodic so

1453
01:00:29,199 --> 01:00:34,639
the facing direction itself like i don't

1454
01:00:32,079 --> 01:00:43,839
know where that's actually getting

1455
01:00:34,639 --> 01:00:43,838
um computed

1456
01:00:50,559 --> 01:00:57,680
so yeah like it's just an

1457
01:00:54,000 --> 01:00:59,280
angle right it's just an angle from zero

1458
01:00:57,679 --> 01:01:03,279
to

1459
01:00:59,280 --> 01:01:03,280
two pi probably

1460
01:01:04,079 --> 01:01:11,839
which is you know dumb but

1461
01:01:14,239 --> 01:01:20,078
so if we imagine that we want this thing

1462
01:01:17,838 --> 01:01:21,519
to map into a facing direction the

1463
01:01:20,079 --> 01:01:24,720
facing direction should be

1464
01:01:21,519 --> 01:01:26,559
between 0 and 4 where 0 is what the

1465
01:01:24,719 --> 01:01:31,838
match you would get

1466
01:01:26,559 --> 01:01:31,839
when the thing is you know

1467
01:01:32,639 --> 01:01:37,920
facing right my assumption is that we

1468
01:01:36,239 --> 01:01:40,399
could just do something at least for the

1469
01:01:37,920 --> 01:01:42,400
time being here where we just say

1470
01:01:40,400 --> 01:01:44,639
all right well so really what we're

1471
01:01:42,400 --> 01:01:47,200
talking about here

1472
01:01:44,639 --> 01:01:48,480
is that we want to like take the facing

1473
01:01:47,199 --> 01:01:51,598
direction

1474
01:01:48,480 --> 01:01:54,960
and we want to like remove

1475
01:01:51,599 --> 01:01:59,200
from the facing direction probably like

1476
01:01:54,960 --> 01:02:01,039
pi 32 uh over four so like right we we

1477
01:01:59,199 --> 01:02:03,199
want to take

1478
01:02:01,039 --> 01:02:03,200
uh

1479
01:02:04,480 --> 01:02:08,798
a quarter um

1480
01:02:09,679 --> 01:02:16,558
of the so if we imagine the circle right

1481
01:02:12,960 --> 01:02:20,559
we want to take a quarter of a circle

1482
01:02:16,559 --> 01:02:23,760
um not a quarter of a circle a uh

1483
01:02:20,559 --> 01:02:25,760
eighth of a circle and move back so that

1484
01:02:23,760 --> 01:02:27,039
we're talking about the quarter of a

1485
01:02:25,760 --> 01:02:30,000
circle

1486
01:02:27,039 --> 01:02:31,200
um that that would be encompassed there

1487
01:02:30,000 --> 01:02:33,760
so

1488
01:02:31,199 --> 01:02:35,118
if you imagine like the facing direction

1489
01:02:33,760 --> 01:02:38,240
is

1490
01:02:35,119 --> 01:02:42,079
0 to 0.25

1491
01:02:38,239 --> 01:02:46,838
that would map to zero but so would

1492
01:02:42,079 --> 01:02:49,839
uh the yeah so i guess

1493
01:02:46,838 --> 01:02:49,838
um

1494
01:02:54,880 --> 01:03:00,000
so i guess what you really would do is

1495
01:02:57,039 --> 01:03:00,000
something like this

1496
01:03:00,480 --> 01:03:05,760
is that right so you would effectively

1497
01:03:03,760 --> 01:03:06,880
say look i want to divide the facing

1498
01:03:05,760 --> 01:03:10,079
direction

1499
01:03:06,880 --> 01:03:12,559
by a quarter pi so

1500
01:03:10,079 --> 01:03:13,440
you know if we imagine this constant

1501
01:03:12,559 --> 01:03:17,599
here

1502
01:03:13,440 --> 01:03:21,519
right like called quarter pi

1503
01:03:17,599 --> 01:03:24,240
um we would multiply this by quarter pi

1504
01:03:21,519 --> 01:03:24,880
and then we would round it to a real

1505
01:03:24,239 --> 01:03:30,959
number

1506
01:03:24,880 --> 01:03:33,358
right i mean to an integer

1507
01:03:30,960 --> 01:03:34,079
and so if we did this we would now have

1508
01:03:33,358 --> 01:03:37,759
like which

1509
01:03:34,079 --> 01:03:41,119
qua quarter uh which uh

1510
01:03:37,760 --> 01:03:43,680
octant of the circle you were in so

1511
01:03:41,119 --> 01:03:45,838
zero is the first octant one two three

1512
01:03:43,679 --> 01:03:48,558
four five six seven

1513
01:03:45,838 --> 01:03:50,239
and now all we really need to do is we

1514
01:03:48,559 --> 01:03:54,640
need to make sure

1515
01:03:50,239 --> 01:03:57,759
that seven and zero both map to zero

1516
01:03:54,639 --> 01:04:02,318
one and two mapped to one

1517
01:03:57,760 --> 01:04:05,520
and etc etc right so

1518
01:04:02,318 --> 01:04:12,318
yeah like i think we just

1519
01:04:05,519 --> 01:04:27,838
take this

1520
01:04:12,318 --> 01:04:27,838
we take

1521
01:04:30,798 --> 01:04:41,838
it's not it's not particularly pretty

1522
01:04:54,000 --> 01:04:58,880
i'm going to do a little mapping here

1523
01:05:03,599 --> 01:05:10,318
so here's what we would want to happen

1524
01:05:08,000 --> 01:05:12,079
again what is up with the indentation

1525
01:05:10,318 --> 01:05:13,759
like so indentation in foreclosure used

1526
01:05:12,079 --> 01:05:16,798
to work and now it just doesn't at all

1527
01:05:13,760 --> 01:05:19,200
is that some aspect of

1528
01:05:16,798 --> 01:05:20,318
fork or flurry or did did the

1529
01:05:19,199 --> 01:05:23,838
indentation

1530
01:05:20,318 --> 01:05:23,838
break at some point

1531
01:05:28,719 --> 01:05:31,838
is the energy because virtual white

1532
01:05:30,159 --> 01:05:33,598
space is disabled but indentation is

1533
01:05:31,838 --> 01:05:36,318
supposed to work

1534
01:05:33,599 --> 01:05:38,000
anyway right like indentation's supposed

1535
01:05:36,318 --> 01:05:38,719
to work whether or not virtual white

1536
01:05:38,000 --> 01:05:41,599
space is

1537
01:05:38,719 --> 01:05:43,358
on or not right like it's supposed to be

1538
01:05:41,599 --> 01:05:47,280
able to indent the code so

1539
01:05:43,358 --> 01:05:47,279
so i'm not sure um

1540
01:05:48,559 --> 01:05:52,720
so yeah i i don't know what to do about

1541
01:05:50,880 --> 01:05:56,318
it like indentation's like really

1542
01:05:52,719 --> 01:05:59,118
severely broken as far as i can tell um

1543
01:05:56,318 --> 01:05:59,119
but i'm not sure

1544
01:06:00,559 --> 01:06:04,000
we may need alan to like fix it because

1545
01:06:03,119 --> 01:06:07,280
it used to work

1546
01:06:04,000 --> 01:06:07,920
that's the thing like so so it broke i

1547
01:06:07,280 --> 01:06:10,160
guess

1548
01:06:07,920 --> 01:06:11,519
or something and probably needs to be

1549
01:06:10,159 --> 01:06:14,879
fixed

1550
01:06:11,519 --> 01:06:16,838
um so

1551
01:06:14,880 --> 01:06:18,798
that should be fixed because it used to

1552
01:06:16,838 --> 01:06:21,838
work you know what i'm saying

1553
01:06:18,798 --> 01:06:21,838
like it regressed

1554
01:06:23,599 --> 01:06:27,519
i mean at the very least you need to be

1555
01:06:25,199 --> 01:06:30,318
able to have a comment

1556
01:06:27,519 --> 01:06:30,798
like that's not gonna work right like

1557
01:06:30,318 --> 01:06:34,000
that's

1558
01:06:30,798 --> 01:06:35,759
that's not good um and that used to work

1559
01:06:34,000 --> 01:06:37,920
just fine

1560
01:06:35,760 --> 01:06:37,920
so

1561
01:06:39,679 --> 01:06:44,000
okay that's even weirder um

1562
01:06:45,599 --> 01:06:48,318
what the heck

1563
01:06:53,440 --> 01:06:56,480
all right well i don't know what to make

1564
01:06:55,358 --> 01:07:00,159
of it

1565
01:06:56,480 --> 01:07:02,559
um so anyway

1566
01:07:00,159 --> 01:07:03,519
uh what i wanted to do here was just say

1567
01:07:02,559 --> 01:07:08,240
look let's

1568
01:07:03,519 --> 01:07:08,239
try and say what we want to have happen

1569
01:07:12,838 --> 01:07:15,838
here

1570
01:07:22,000 --> 01:07:26,079
all right so these

1571
01:07:26,838 --> 01:07:29,838
um

1572
01:07:31,679 --> 01:07:37,199
or what we would get uh if we divide

1573
01:07:34,719 --> 01:07:38,078
it into quadrants we're going to get 0

1574
01:07:37,199 --> 01:07:40,838
to 7

1575
01:07:38,079 --> 01:07:43,839
and we want our mapping to look like

1576
01:07:40,838 --> 01:07:43,838
this

1577
01:07:46,719 --> 01:07:53,358
right so we want to say

1578
01:07:49,838 --> 01:07:54,838
after we've divided out we want to go

1579
01:07:53,358 --> 01:07:58,239
ahead and take

1580
01:07:54,838 --> 01:07:58,639
zero and map it to zero we want one and

1581
01:07:58,239 --> 01:08:02,159
two

1582
01:07:58,639 --> 01:08:04,719
to map to one we want

1583
01:08:02,159 --> 01:08:06,639
three and four to map to two we want

1584
01:08:04,719 --> 01:08:10,318
five and six to map to three

1585
01:08:06,639 --> 01:08:12,798
and so on yeah and

1586
01:08:10,318 --> 01:08:14,960
so if you imagine what's gonna happen

1587
01:08:12,798 --> 01:08:17,838
here we can pretty easily

1588
01:08:14,960 --> 01:08:18,399
accomplish the middle part because that

1589
01:08:17,838 --> 01:08:20,318
is just

1590
01:08:18,399 --> 01:08:22,838
negative one you know subtract one

1591
01:08:20,319 --> 01:08:25,759
divide by two

1592
01:08:22,838 --> 01:08:27,838
right and that gives you

1593
01:08:25,759 --> 01:08:29,759
uh what you want or i should say add add

1594
01:08:27,838 --> 01:08:32,318
one and divide by two

1595
01:08:29,759 --> 01:08:34,319
right so if you imagine one plus one

1596
01:08:32,319 --> 01:08:37,440
divided by two equals one

1597
01:08:34,319 --> 01:08:41,359
right um and well

1598
01:08:37,439 --> 01:08:43,519
i should right so if you imagine that

1599
01:08:41,359 --> 01:08:45,199
our equation here is just going to be

1600
01:08:43,520 --> 01:08:48,000
you take the thing you add one you

1601
01:08:45,198 --> 01:08:49,759
divide by two

1602
01:08:48,000 --> 01:08:51,600
uh then that's going to equal what we

1603
01:08:49,759 --> 01:08:52,079
want right and the same thing would be

1604
01:08:51,600 --> 01:08:56,640
true here

1605
01:08:52,079 --> 01:08:57,920
2 plus 1 divided by 2

1606
01:08:56,640 --> 01:09:00,239
is also equal to 1 because remember

1607
01:08:57,920 --> 01:09:02,560
we're integers here so we truncate

1608
01:09:00,238 --> 01:09:04,238
3 plus 1 divided by 2 is actually equal

1609
01:09:02,560 --> 01:09:06,000
to 2 and so on

1610
01:09:04,238 --> 01:09:07,519
so we know that we can produce the

1611
01:09:06,000 --> 01:09:10,880
middle part of the table

1612
01:09:07,520 --> 01:09:14,000
by just doing this value here

1613
01:09:10,880 --> 01:09:16,480
and in theory this part the first part

1614
01:09:14,000 --> 01:09:18,838
where we do zero plus one divided by two

1615
01:09:16,479 --> 01:09:21,678
that will also produce zero

1616
01:09:18,838 --> 01:09:23,039
because again because of truncation we

1617
01:09:21,679 --> 01:09:26,480
haven't quite hit 2 yet

1618
01:09:23,039 --> 01:09:30,399
so our only real problem is that mr

1619
01:09:26,479 --> 01:09:33,678
7 down here so 7 plus 1 divided by 2

1620
01:09:30,399 --> 01:09:36,879
is actually going to be equal to 8. so

1621
01:09:33,679 --> 01:09:39,119
i think all we really have to do

1622
01:09:36,880 --> 01:09:40,079
is just handle that one case and we

1623
01:09:39,119 --> 01:09:43,119
should be able to do that

1624
01:09:40,079 --> 01:09:43,759
by modding by eight and if we mod by

1625
01:09:43,119 --> 01:09:46,838
eight

1626
01:09:43,759 --> 01:09:49,198
that should be able to turn into just a

1627
01:09:46,838 --> 01:09:50,559
mask because modding by eight is the

1628
01:09:49,198 --> 01:09:54,479
same

1629
01:09:50,560 --> 01:09:57,360
as just masking off the upper bits right

1630
01:09:54,479 --> 01:09:58,479
so i think we can produce an extremely

1631
01:09:57,359 --> 01:10:02,799
efficient

1632
01:09:58,479 --> 01:10:06,959
uh way to produce this

1633
01:10:02,800 --> 01:10:06,960
we just do one floating point multiply

1634
01:10:14,319 --> 01:10:17,840
to produce the facing direction index

1635
01:10:18,560 --> 01:10:20,800
um

1636
01:10:21,760 --> 01:10:26,159
and all we have to do here is say like

1637
01:10:23,600 --> 01:10:28,719
okay it's just going to be equal to

1638
01:10:26,158 --> 01:10:31,839
the facing direction index plus one

1639
01:10:28,719 --> 01:10:31,840
divided by two

1640
01:10:32,238 --> 01:10:36,238
right which as we know would just be a

1641
01:10:34,158 --> 01:10:36,559
shift down right so we just shift it

1642
01:10:36,238 --> 01:10:40,399
down

1643
01:10:36,560 --> 01:10:43,199
once um and then we end off the part we

1644
01:10:40,399 --> 01:10:44,399
don't care about so we know that we want

1645
01:10:43,198 --> 01:10:47,198
the bottom

1646
01:10:44,399 --> 01:10:47,198
three bits

1647
01:10:47,840 --> 01:10:52,159
uh but anything higher than that we

1648
01:10:50,079 --> 01:10:53,119
don't want right so we want bit one and

1649
01:10:52,158 --> 01:10:57,279
bit two

1650
01:10:53,119 --> 01:11:00,479
and bit four right so we just want

1651
01:10:57,279 --> 01:11:01,840
that so i think

1652
01:11:00,479 --> 01:11:04,158
this is a pretty efficient way of

1653
01:11:01,840 --> 01:11:05,360
producing the actual index value we

1654
01:11:04,158 --> 01:11:07,920
actually wanted

1655
01:11:05,359 --> 01:11:09,039
right which is a number between zero and

1656
01:11:07,920 --> 01:11:11,119
three

1657
01:11:09,039 --> 01:11:13,359
that tells us which uh of the facing

1658
01:11:11,119 --> 01:11:18,238
direction sprites to pick out

1659
01:11:13,359 --> 01:11:19,679
um so i'm pretty sure that that's

1660
01:11:18,238 --> 01:11:21,839
you know going to be a nice efficient

1661
01:11:19,679 --> 01:11:24,480
way to do that right you can see

1662
01:11:21,840 --> 01:11:28,079
that it's pretty straightforward it's

1663
01:11:24,479 --> 01:11:32,079
literally just a constant multiply here

1664
01:11:28,079 --> 01:11:34,800
um and uh that that was wrong

1665
01:11:32,079 --> 01:11:34,800
this should have been

1666
01:11:35,840 --> 01:11:44,400
invert that right

1667
01:11:41,279 --> 01:11:44,399
this is m quarter pi

1668
01:11:45,359 --> 01:11:52,880
so we do the divide that puts us into

1669
01:11:48,880 --> 01:11:54,719
integer space we apply the magic formula

1670
01:11:52,880 --> 01:11:56,000
here and then we should

1671
01:11:54,719 --> 01:11:57,439
effectively have and i guess i don't

1672
01:11:56,000 --> 01:11:58,399
even need to put that in there i could

1673
01:11:57,439 --> 01:12:02,399
just put it there

1674
01:11:58,399 --> 01:12:05,759
right um we have the value that

1675
01:12:02,399 --> 01:12:10,158
we actually wanted right

1676
01:12:05,760 --> 01:12:10,159
and i don't know

1677
01:12:10,640 --> 01:12:18,159
if there's really anything else um

1678
01:12:14,158 --> 01:12:22,319
that may just be it so okay

1679
01:12:18,158 --> 01:12:25,279
so hopefully that is just it and

1680
01:12:22,319 --> 01:12:26,960
uh we can go from there it seems like

1681
01:12:25,279 --> 01:12:29,359
there's some complaints here oh

1682
01:12:26,960 --> 01:12:30,560
that's probably because this has to be

1683
01:12:29,359 --> 01:12:33,519
u16

1684
01:12:30,560 --> 01:12:34,960
so let me just uh let me just make this

1685
01:12:33,520 --> 01:12:36,159
the same way that it was before real

1686
01:12:34,960 --> 01:12:40,319
quick so

1687
01:12:36,158 --> 01:12:44,719
there's facing der index

1688
01:12:40,319 --> 01:12:44,719
equals facing dirt index

1689
01:12:45,520 --> 01:12:49,679
and i don't know if this is smart enough

1690
01:12:47,760 --> 01:12:52,400
to

1691
01:12:49,679 --> 01:12:53,359
yeah so you know we just ended this with

1692
01:12:52,399 --> 01:12:56,639
07

1693
01:12:53,359 --> 01:13:05,839
so like it should know that that's

1694
01:12:56,640 --> 01:13:05,840
totally legal but yeah whatever

1695
01:13:08,719 --> 01:13:14,800
cannot convert argument to

1696
01:13:12,719 --> 01:13:16,239
well you know what you've got a point

1697
01:13:14,800 --> 01:13:19,279
there

1698
01:13:16,238 --> 01:13:22,319
so this we probably typed in

1699
01:13:19,279 --> 01:13:25,119
um before we had

1700
01:13:22,319 --> 01:13:27,679
this as the type so it probably should

1701
01:13:25,119 --> 01:13:27,679
look like that

1702
01:13:31,760 --> 01:13:38,719
is asset tag hash like not defined

1703
01:13:35,760 --> 01:13:39,920
yet because of the you know the miracle

1704
01:13:38,719 --> 01:13:43,359
of c

1705
01:13:39,920 --> 01:13:47,039
um so

1706
01:13:43,359 --> 01:13:48,319
this is in the entity file and i guess

1707
01:13:47,039 --> 01:13:51,840
the

1708
01:13:48,319 --> 01:13:52,559
does the asset system not uh come before

1709
01:13:51,840 --> 01:13:54,239
that

1710
01:13:52,560 --> 01:13:56,320
is that the main problems i mean there's

1711
01:13:54,238 --> 01:13:59,119
acid.h and there's the entities so

1712
01:13:56,319 --> 01:14:00,639
i guess i guess yeah the answer is it

1713
01:13:59,119 --> 01:14:02,640
doesn't so

1714
01:14:00,640 --> 01:14:04,400
i guess what i would have to do there is

1715
01:14:02,640 --> 01:14:08,159
just say well

1716
01:14:04,399 --> 01:14:12,238
um you know um

1717
01:14:08,158 --> 01:14:12,238
maybe we put that up in file formats

1718
01:14:13,279 --> 01:14:20,000
and yeah i don't know if that's

1719
01:14:16,560 --> 01:14:23,120
sensible or not um might not be

1720
01:14:20,000 --> 01:14:24,800
uh but but you know i

1721
01:14:23,119 --> 01:14:27,039
i could see this being something that we

1722
01:14:24,800 --> 01:14:28,960
want to have in the file format section

1723
01:14:27,039 --> 01:14:30,479
because we may want to start storing

1724
01:14:28,960 --> 01:14:33,920
these i'm not sure

1725
01:14:30,479 --> 01:14:36,718
we may or may not um but we can put

1726
01:14:33,920 --> 01:14:36,719
those there for now

1727
01:14:39,198 --> 01:14:42,238
again things that you only care about

1728
01:14:40,800 --> 01:14:44,159
because c

1729
01:14:42,238 --> 01:14:45,439
plus never did bother to do the work of

1730
01:14:44,158 --> 01:14:47,519
actually letting you

1731
01:14:45,439 --> 01:14:50,079
compile your code without having to

1732
01:14:47,520 --> 01:14:53,199
pre-declare everything

1733
01:14:50,079 --> 01:14:53,920
yeah so anyway uh taking a look at what

1734
01:14:53,198 --> 01:14:57,839
happens here

1735
01:14:53,920 --> 01:15:00,158
these are all just tag hash things again

1736
01:14:57,840 --> 01:15:03,039
so this is again really probably pretty

1737
01:15:00,158 --> 01:15:03,039
straightforward so

1738
01:15:04,158 --> 01:15:07,519
all we would really need to update here

1739
01:15:06,158 --> 01:15:11,198
is the part with the

1740
01:15:07,520 --> 01:15:15,520
where we actually picked the variant um

1741
01:15:11,198 --> 01:15:18,000
and i guess the thing with the variance

1742
01:15:15,520 --> 01:15:18,000
is

1743
01:15:20,319 --> 01:15:24,158
we don't really know how many variants

1744
01:15:22,479 --> 01:15:24,639
there are of the things so what we were

1745
01:15:24,158 --> 01:15:29,279
doing

1746
01:15:24,640 --> 01:15:29,280
here before um

1747
01:15:32,880 --> 01:15:36,400
is is we let the automatic matching

1748
01:15:35,520 --> 01:15:39,840
system

1749
01:15:36,399 --> 01:15:39,839
like just kind of find

1750
01:15:39,920 --> 01:15:42,239
which

1751
01:15:43,039 --> 01:15:49,600
we let the automatic matching just

1752
01:15:46,319 --> 01:15:53,439
use the range from zero to one

1753
01:15:49,600 --> 01:15:54,880
to pick variance out and

1754
01:15:53,439 --> 01:15:56,079
i don't know how i feel about that one

1755
01:15:54,880 --> 01:15:56,719
way or the other to be completely honest

1756
01:15:56,079 --> 01:16:00,640
with you

1757
01:15:56,719 --> 01:16:04,840
um you know one one thing

1758
01:16:00,640 --> 01:16:08,320
i would suggest is that like probably

1759
01:16:04,840 --> 01:16:10,239
i it seems like a good thing to support

1760
01:16:08,319 --> 01:16:12,238
because you want to be able to just dump

1761
01:16:10,238 --> 01:16:15,119
more like grass sprites in and then they

1762
01:16:12,238 --> 01:16:16,639
get distributed out

1763
01:16:15,119 --> 01:16:18,479
so it seems like something we want to

1764
01:16:16,640 --> 01:16:20,000
support if we want to support it it's

1765
01:16:18,479 --> 01:16:24,319
not particularly hard what we would

1766
01:16:20,000 --> 01:16:26,479
have to do though is we'd have to have

1767
01:16:24,319 --> 01:16:28,479
some kind of a of a mapping piece of

1768
01:16:26,479 --> 01:16:30,879
information for the assets

1769
01:16:28,479 --> 01:16:31,839
that they use when you look at the

1770
01:16:30,880 --> 01:16:35,359
variant

1771
01:16:31,840 --> 01:16:38,960
field you'd have to do a masking

1772
01:16:35,359 --> 01:16:40,479
to always make sure that the tag

1773
01:16:38,960 --> 01:16:42,800
that you're matching against is in the

1774
01:16:40,479 --> 01:16:45,359
range of the assets that were actually

1775
01:16:42,800 --> 01:16:45,360
recorded

1776
01:16:46,840 --> 01:16:49,840
and

1777
01:16:58,158 --> 01:17:01,039
i guess i just don't have a strong

1778
01:16:59,520 --> 01:17:03,840
opinion about that and i don't really

1779
01:17:01,039 --> 01:17:03,840
know

1780
01:17:18,000 --> 01:17:21,279
i don't really know what i want to do

1781
01:17:28,840 --> 01:17:33,679
there

1782
01:17:30,238 --> 01:17:36,879
yeah my intuition kind of says like hey

1783
01:17:33,679 --> 01:17:39,520
that's like why make that system more

1784
01:17:36,880 --> 01:17:41,520
complicated for no real reason

1785
01:17:39,520 --> 01:17:43,360
when you could just say look when you're

1786
01:17:41,520 --> 01:17:44,320
actually talking about what the game

1787
01:17:43,359 --> 01:17:46,479
does

1788
01:17:44,319 --> 01:17:47,759
it's always going to just be in a

1789
01:17:46,479 --> 01:17:50,959
situation

1790
01:17:47,760 --> 01:17:52,640
it's always just going to be in in a

1791
01:17:50,960 --> 01:17:53,439
state where you do know what they how

1792
01:17:52,640 --> 01:17:56,320
many there are

1793
01:17:53,439 --> 01:17:57,759
because you know how many art assets

1794
01:17:56,319 --> 01:17:59,759
you're going to put into the thing

1795
01:17:57,760 --> 01:18:01,679
so you could just always say well you

1796
01:17:59,760 --> 01:18:03,039
know there's this many variants

1797
01:18:01,679 --> 01:18:05,199
you know this is how many variants

1798
01:18:03,039 --> 01:18:12,238
things get for things like grass and

1799
01:18:05,198 --> 01:18:13,839
smoke and whatever

1800
01:18:12,238 --> 01:18:15,839
but on the other hand i'm like well it

1801
01:18:13,840 --> 01:18:16,319
would be nice to basically say like look

1802
01:18:15,840 --> 01:18:20,000
just

1803
01:18:16,319 --> 01:18:20,000
record how many of the thing there were

1804
01:18:20,079 --> 01:18:22,479
and then

1805
01:18:23,119 --> 01:18:30,319
yeah but if you so if if you

1806
01:18:26,719 --> 01:18:31,600
you can't merge assets anyway because

1807
01:18:30,319 --> 01:18:34,158
you have to be able to distribute them

1808
01:18:31,600 --> 01:18:36,159
along the uniform uh

1809
01:18:34,158 --> 01:18:38,000
like because it's picking a random

1810
01:18:36,158 --> 01:18:39,519
unilateral here even the old system

1811
01:18:38,000 --> 01:18:40,399
couldn't have merged assets properly

1812
01:18:39,520 --> 01:18:41,760
because you would have had to

1813
01:18:40,399 --> 01:18:43,920
redistribute things

1814
01:18:41,760 --> 01:18:45,520
along the random unilateral which you

1815
01:18:43,920 --> 01:18:47,359
would require you to reprocess the art

1816
01:18:45,520 --> 01:18:49,360
assets anyway

1817
01:18:47,359 --> 01:18:50,880
so at some point you needed to know how

1818
01:18:49,359 --> 01:18:52,399
many there were and so what you could do

1819
01:18:50,880 --> 01:18:53,600
is just store how many there were

1820
01:18:52,399 --> 01:18:55,599
rather than complicate the matching

1821
01:18:53,600 --> 01:18:57,440
system what you would want to do is just

1822
01:18:55,600 --> 01:18:58,800
be able to look it up here

1823
01:18:57,439 --> 01:19:00,479
right so you wanna be able to look up

1824
01:18:58,800 --> 01:19:00,800
here like how many of this thing are

1825
01:19:00,479 --> 01:19:03,919
there

1826
01:19:00,800 --> 01:19:07,679
so tell me um and then i will

1827
01:19:03,920 --> 01:19:10,880
you know i will pick a variant

1828
01:19:07,679 --> 01:19:15,119
inside that range right

1829
01:19:10,880 --> 01:19:15,119
i i assume um

1830
01:19:17,039 --> 01:19:23,840
my my assumption right

1831
01:19:28,640 --> 01:19:37,840
so yeah i guess

1832
01:19:42,000 --> 01:19:45,840
so yeah i don't know that's that's a

1833
01:19:44,000 --> 01:19:49,119
tough one i don't think there's a good

1834
01:19:45,840 --> 01:19:51,920
answer to that exactly but i don't know

1835
01:19:49,119 --> 01:19:55,198
um also you know what i was just

1836
01:19:51,920 --> 01:19:57,840
realizing this is probably wrong

1837
01:19:55,198 --> 01:19:59,119
uh because we already did the divide by

1838
01:19:57,840 --> 01:20:05,039
two

1839
01:19:59,119 --> 01:20:07,760
so actually we really only need

1840
01:20:05,039 --> 01:20:11,039
to mask off we only really need to keep

1841
01:20:07,760 --> 01:20:13,920
the bottom two bits right

1842
01:20:11,039 --> 01:20:13,920
and then we should be fine

1843
01:20:14,238 --> 01:20:18,158
so i don't know what to do with this so

1844
01:20:16,238 --> 01:20:21,839
the rest of this code is trivial to

1845
01:20:18,158 --> 01:20:25,279
port right so if we assume that we have

1846
01:20:21,840 --> 01:20:25,279
the asset tag hash here

1847
01:20:25,840 --> 01:20:30,639
um then all we really need to do is for

1848
01:20:28,719 --> 01:20:31,198
each one of the things in the spec type

1849
01:20:30,639 --> 01:20:35,520
here

1850
01:20:31,198 --> 01:20:35,519
we would just do like tag hash value

1851
01:20:35,679 --> 01:20:42,239
or sorry tag hash equals get tag hash

1852
01:20:39,760 --> 01:20:45,039
um and we just patched the tags that we

1853
01:20:42,238 --> 01:20:45,039
were talking about

1854
01:20:45,279 --> 01:20:52,639
right so

1855
01:20:48,960 --> 01:20:54,399
um in these cases too like where we have

1856
01:20:52,639 --> 01:20:57,199
like cover type

1857
01:20:54,399 --> 01:20:57,839
i mean we could just pass the tags

1858
01:20:57,198 --> 01:21:01,439
instead

1859
01:20:57,840 --> 01:21:03,199
i i that may not be a good idea

1860
01:21:01,439 --> 01:21:05,519
um because we might want to do more

1861
01:21:03,198 --> 01:21:06,638
complex things here so i won't pull it

1862
01:21:05,520 --> 01:21:08,960
out

1863
01:21:06,639 --> 01:21:09,679
just yet but it's entirely possible that

1864
01:21:08,960 --> 01:21:11,359
we can like

1865
01:21:09,679 --> 01:21:14,399
now that we've got this we can simplify

1866
01:21:11,359 --> 01:21:17,439
that part rather dramatically right like

1867
01:21:14,399 --> 01:21:19,039
it could compress down to to very little

1868
01:21:17,439 --> 01:21:21,678
um because we could just have those be

1869
01:21:19,039 --> 01:21:21,679
stored in there

1870
01:21:21,920 --> 01:21:28,639
so i don't know what size being

1871
01:21:25,039 --> 01:21:31,279
zero or one here um that sounds like

1872
01:21:28,639 --> 01:21:34,880
that wants to be another parameter right

1873
01:21:31,279 --> 01:21:38,000
so that would be like the match vector

1874
01:21:34,880 --> 01:21:39,679
dot size it's assuming that size is a

1875
01:21:38,000 --> 01:21:43,840
thing we actually want

1876
01:21:39,679 --> 01:21:43,840
sorry um

1877
01:21:48,158 --> 01:21:52,799
what did we end up calling this match

1878
01:21:50,399 --> 01:21:52,799
element

1879
01:21:53,439 --> 01:21:58,559
yeah so assuming we actually want this

1880
01:21:56,560 --> 01:22:00,639
like yeah i don't know what these should

1881
01:21:58,560 --> 01:22:01,600
be but we're basically saying like okay

1882
01:22:00,639 --> 01:22:06,560
so there's

1883
01:22:01,600 --> 01:22:06,560
size is a thing i guess

1884
01:22:07,520 --> 01:22:11,840
uh and these would be

1885
01:22:22,840 --> 01:22:26,319
smaller

1886
01:22:24,000 --> 01:22:27,920
now i don't know if that's the way you

1887
01:22:26,319 --> 01:22:30,079
would really want to do this

1888
01:22:27,920 --> 01:22:32,319
because you may just want to have two

1889
01:22:30,079 --> 01:22:35,039
different tags like large and small

1890
01:22:32,319 --> 01:22:36,840
so you just tag tag cover large and tag

1891
01:22:35,039 --> 01:22:39,600
cover

1892
01:22:36,840 --> 01:22:42,319
small so i'm not sure that the size

1893
01:22:39,600 --> 01:22:45,600
thing really makes a whole lot of sense

1894
01:22:42,319 --> 01:22:50,000
there actually um

1895
01:22:45,600 --> 01:22:52,960
so i don't know so it's hard to say

1896
01:22:50,000 --> 01:22:54,399
and and i don't know i don't really know

1897
01:22:52,960 --> 01:22:56,719
what we would want to do there

1898
01:22:54,399 --> 01:22:58,719
uh that's a tough that's a tough call

1899
01:22:56,719 --> 01:23:01,359
we'll have to think about that

1900
01:22:58,719 --> 01:23:02,480
so assuming that we go ahead and do the

1901
01:23:01,359 --> 01:23:04,319
the tag hash thing

1902
01:23:02,479 --> 01:23:06,879
then in here we know that these are

1903
01:23:04,319 --> 01:23:10,960
always particles

1904
01:23:06,880 --> 01:23:10,960
so that can just be assumed

1905
01:23:12,719 --> 01:23:21,439
and and then we need the asset match

1906
01:23:16,479 --> 01:23:24,799
vector here

1907
01:23:21,439 --> 01:23:27,279
uh and that should just work as well

1908
01:23:24,800 --> 01:23:27,279
and

1909
01:23:31,760 --> 01:23:36,159
the rest of this code should be fine

1910
01:23:34,158 --> 01:23:40,000
this is the only part that's

1911
01:23:36,158 --> 01:23:40,799
that's a problem um the match element

1912
01:23:40,000 --> 01:23:43,920
very

1913
01:23:40,800 --> 01:23:46,159
variant here i

1914
01:23:43,920 --> 01:23:48,560
this would be like a random choice

1915
01:23:46,158 --> 01:23:50,479
essentially and it would be in some

1916
01:23:48,560 --> 01:23:54,159
value that we don't know what it is

1917
01:23:50,479 --> 01:23:57,359
right so what we need is like

1918
01:23:54,158 --> 01:23:57,679
max you know like the variant count for

1919
01:23:57,359 --> 01:24:00,079
this

1920
01:23:57,679 --> 01:24:01,600
thing so you'd almost need like a get

1921
01:24:00,079 --> 01:24:04,719
variant count

1922
01:24:01,600 --> 01:24:08,480
for a particular asset category so like

1923
01:24:04,719 --> 01:24:11,600
for this particular tag hash

1924
01:24:08,479 --> 01:24:13,919
what is the variant count and

1925
01:24:11,600 --> 01:24:15,840
that would just give you back like the

1926
01:24:13,920 --> 01:24:18,158
value that you need to do the random

1927
01:24:15,840 --> 01:24:20,400
choice in

1928
01:24:18,158 --> 01:24:20,399
right

1929
01:24:28,840 --> 01:24:31,840
um

1930
01:24:32,000 --> 01:24:36,079
so i mean i think it's good like i just

1931
01:24:34,238 --> 01:24:37,678
think yeah we probably just want to

1932
01:24:36,079 --> 01:24:39,519
i mean that's probably just what we want

1933
01:24:37,679 --> 01:24:41,279
to do like we probably just want to have

1934
01:24:39,520 --> 01:24:42,960
this be an element of the asset system

1935
01:24:41,279 --> 01:24:45,599
where like when we process the assets we

1936
01:24:42,960 --> 01:24:49,439
remember how many there were

1937
01:24:45,600 --> 01:24:49,440
and off we go i guess

1938
01:24:51,520 --> 01:24:55,440
i don't know so anyway that does seem

1939
01:24:54,399 --> 01:24:56,799
reasonable

1940
01:24:55,439 --> 01:24:58,319
and we could just assume that that's

1941
01:24:56,800 --> 01:24:59,920
what we're going to do and then this is

1942
01:24:58,319 --> 01:25:03,119
the only thing that really is

1943
01:24:59,920 --> 01:25:05,600
you know a problem here this is going to

1944
01:25:03,119 --> 01:25:07,679
be u16

1945
01:25:05,600 --> 01:25:09,120
and and so it would really only be this

1946
01:25:07,679 --> 01:25:12,079
that would be the problem

1947
01:25:09,119 --> 01:25:12,880
as far as size is concerned like i don't

1948
01:25:12,079 --> 01:25:16,880
know

1949
01:25:12,880 --> 01:25:19,920
that we really want that in there

1950
01:25:16,880 --> 01:25:27,760
um and so i want to look and see

1951
01:25:19,920 --> 01:25:32,399
in the sources like

1952
01:25:27,760 --> 01:25:35,440
so if i look at the base game hht

1953
01:25:32,399 --> 01:25:40,238
right and we go looking for like

1954
01:25:35,439 --> 01:25:43,519
what's happening with the size stuff

1955
01:25:40,238 --> 01:25:45,439
um so here you can see like there's like

1956
01:25:43,520 --> 01:25:51,120
a size

1957
01:25:45,439 --> 01:25:51,119
parameter and so i i just don't know

1958
01:25:51,760 --> 01:25:55,360
i just don't know that it makes sense to

1959
01:25:53,439 --> 01:25:58,960
like have that like why not just have

1960
01:25:55,359 --> 01:26:03,198
large as a specifier right

1961
01:25:58,960 --> 01:26:06,239
so let's take a look at the

1962
01:26:03,198 --> 01:26:08,559
there i mean presumably the particles

1963
01:26:06,238 --> 01:26:10,399
yeah so you can see like we've got

1964
01:26:08,560 --> 01:26:13,679
particles there's like zero

1965
01:26:10,399 --> 01:26:16,638
and one and stuff so i would say like

1966
01:26:13,679 --> 01:26:19,840
that should probably just be another tag

1967
01:26:16,639 --> 01:26:25,359
so so i i don't think we actually want

1968
01:26:19,840 --> 01:26:27,760
to actually use a match element for that

1969
01:26:25,359 --> 01:26:28,479
because i don't know that that we would

1970
01:26:27,760 --> 01:26:30,639
get much

1971
01:26:28,479 --> 01:26:31,678
out of it like what's the point right

1972
01:26:30,639 --> 01:26:33,359
like

1973
01:26:31,679 --> 01:26:34,960
we're not going to have like 30

1974
01:26:33,359 --> 01:26:36,639
different sizes of something

1975
01:26:34,960 --> 01:26:38,480
so there might if we want to say that

1976
01:26:36,639 --> 01:26:40,000
there's a large one of these and a small

1977
01:26:38,479 --> 01:26:41,759
one of this then that seems like

1978
01:26:40,000 --> 01:26:45,039
something we would do

1979
01:26:41,760 --> 01:26:50,880
but i don't know that that we need like

1980
01:26:45,039 --> 01:26:52,880
some other thing um

1981
01:26:50,880 --> 01:26:54,800
that's just my i don't know it's just my

1982
01:26:52,880 --> 01:26:58,400
intuition it may be wrong

1983
01:26:54,800 --> 01:27:01,679
um but like

1984
01:26:58,399 --> 01:27:02,479
so if we and and so in here right if we

1985
01:27:01,679 --> 01:27:04,158
just imagine

1986
01:27:02,479 --> 01:27:06,238
instead of saying matchmaker size equals

1987
01:27:04,158 --> 01:27:10,638
one right we just said tag

1988
01:27:06,238 --> 01:27:12,399
large um and here we could say tag small

1989
01:27:10,639 --> 01:27:13,760
but really like maybe that's just

1990
01:27:12,399 --> 01:27:18,879
whatever it is

1991
01:27:13,760 --> 01:27:20,719
right um

1992
01:27:18,880 --> 01:27:24,159
so something like that seems better to

1993
01:27:20,719 --> 01:27:24,158
me um

1994
01:27:27,198 --> 01:27:30,479
oh is this what was happening maybe this

1995
01:27:29,520 --> 01:27:32,560
is what's happening

1996
01:27:30,479 --> 01:27:35,519
with the indentation code is that what's

1997
01:27:32,560 --> 01:27:35,520
happening i don't know

1998
01:27:36,560 --> 01:27:40,880
maybe maybe the problem is the key

1999
01:27:38,238 --> 01:27:43,039
bindings not four coder

2000
01:27:40,880 --> 01:27:45,039
i'm really confused so let's let's try

2001
01:27:43,039 --> 01:27:46,800
this heck out here

2002
01:27:45,039 --> 01:27:49,359
i mean the auto indent is obviously

2003
01:27:46,800 --> 01:27:49,360
busted

2004
01:27:49,600 --> 01:27:53,280
no no it's just it's just broken i don't

2005
01:27:51,679 --> 01:27:56,880
know all right

2006
01:27:53,279 --> 01:27:58,559
um so yeah so i think that's all right

2007
01:27:56,880 --> 01:28:01,679
and we just would need

2008
01:27:58,560 --> 01:28:06,080
that tag so in the tags themselves

2009
01:28:01,679 --> 01:28:08,800
um like size would have to go away

2010
01:28:06,079 --> 01:28:09,439
and we would have to to just have large

2011
01:28:08,800 --> 01:28:13,279
so like

2012
01:28:09,439 --> 01:28:15,599
particles graso1 would not have a thing

2013
01:28:13,279 --> 01:28:17,198
um and this would have a tag that was

2014
01:28:15,600 --> 01:28:22,800
like large

2015
01:28:17,198 --> 01:28:26,479
right um and and this would not

2016
01:28:22,800 --> 01:28:31,039
uh and

2017
01:28:26,479 --> 01:28:33,439
and this would not either

2018
01:28:31,039 --> 01:28:33,439
um

2019
01:28:35,520 --> 01:28:39,920
i don't know what that is about and this

2020
01:28:38,800 --> 01:28:43,920
would

2021
01:28:39,920 --> 01:28:47,600
have it and

2022
01:28:43,920 --> 01:28:51,679
this would not and this would

2023
01:28:47,600 --> 01:28:54,800
right um

2024
01:28:51,679 --> 01:28:57,199
yeah and so

2025
01:28:54,800 --> 01:28:58,560
a lot of this stuff like yeah with these

2026
01:28:57,198 --> 01:29:01,678
scenery tree like these

2027
01:28:58,560 --> 01:29:03,840
these tag nonsenses right

2028
01:29:01,679 --> 01:29:04,960
um we would just change the way this

2029
01:29:03,840 --> 01:29:07,679
would work a little bit

2030
01:29:04,960 --> 01:29:11,359
so in here this is saying like it

2031
01:29:07,679 --> 01:29:14,800
doesn't have winter dark or fall

2032
01:29:11,359 --> 01:29:17,119
i guess um it just is damaged

2033
01:29:14,800 --> 01:29:18,480
but now we don't need that anymore right

2034
01:29:17,119 --> 01:29:19,359
because the way the tag system would

2035
01:29:18,479 --> 01:29:21,839
work is it will go

2036
01:29:19,359 --> 01:29:23,759
it will jump like directly to that thing

2037
01:29:21,840 --> 01:29:24,800
so i'm pretty sure we don't need this

2038
01:29:23,760 --> 01:29:26,159
matching nonsense

2039
01:29:24,800 --> 01:29:28,719
because i think this was just to work

2040
01:29:26,158 --> 01:29:29,039
around the system before was kind of

2041
01:29:28,719 --> 01:29:31,439
just

2042
01:29:29,039 --> 01:29:32,399
being broken so i think you would just

2043
01:29:31,439 --> 01:29:34,638
say that

2044
01:29:32,399 --> 01:29:35,679
right you don't need to specify all the

2045
01:29:34,639 --> 01:29:37,679
things that you're not

2046
01:29:35,679 --> 01:29:38,960
you just you can just specify the things

2047
01:29:37,679 --> 01:29:43,119
that you are

2048
01:29:38,960 --> 01:29:46,158
and it should go directly there right

2049
01:29:43,119 --> 01:29:48,800
um that's my assumption

2050
01:29:46,158 --> 01:29:49,198
we'll see that may be totally false

2051
01:29:48,800 --> 01:29:51,279
right

2052
01:29:49,198 --> 01:29:53,119
but but hopefully it's it's it's

2053
01:29:51,279 --> 01:29:58,319
actually okay

2054
01:29:53,119 --> 01:30:02,000
um i think that's everything

2055
01:29:58,319 --> 01:30:04,639
that we needed and so we just now need

2056
01:30:02,000 --> 01:30:07,840
in the file formats themselves

2057
01:30:04,639 --> 01:30:11,199
we need one of those tag large things

2058
01:30:07,840 --> 01:30:14,079
so like you know

2059
01:30:11,198 --> 01:30:14,079
just add that in

2060
01:30:15,039 --> 01:30:21,840
um and there should be a way to

2061
01:30:17,119 --> 01:30:21,840
presumably add this pretty simply yep

2062
01:30:22,000 --> 01:30:24,960
and off we go

2063
01:30:25,359 --> 01:30:30,238
so i think that would work um

2064
01:30:30,319 --> 01:30:34,799
and this is the only thing that we don't

2065
01:30:32,000 --> 01:30:36,000
know so for right now rather than try to

2066
01:30:34,800 --> 01:30:38,560
shoehorn that in here

2067
01:30:36,000 --> 01:30:39,600
i think what i'd probably do is just say

2068
01:30:38,560 --> 01:30:41,920
all right so

2069
01:30:39,600 --> 01:30:43,039
you know maybe at the moment there's

2070
01:30:41,920 --> 01:30:46,319
gonna be

2071
01:30:43,039 --> 01:30:50,479
like a thing that says

2072
01:30:46,319 --> 01:30:52,639
that the variant count is like always

2073
01:30:50,479 --> 01:30:54,000
by the way that that situation right

2074
01:30:52,639 --> 01:30:55,600
there just

2075
01:30:54,000 --> 01:30:58,399
this is why i think it should go in the

2076
01:30:55,600 --> 01:31:01,679
opposite it should go like here

2077
01:30:58,399 --> 01:31:02,559
right like i feel like it should always

2078
01:31:01,679 --> 01:31:03,920
go

2079
01:31:02,560 --> 01:31:05,679
or what you could do is test where the

2080
01:31:03,920 --> 01:31:06,800
cursor is and put it at the top if

2081
01:31:05,679 --> 01:31:08,880
you're at the bottom

2082
01:31:06,800 --> 01:31:11,119
right i think it should always be like

2083
01:31:08,880 --> 01:31:14,400
out of the way

2084
01:31:11,119 --> 01:31:19,279
um sort of a separate issue anyway

2085
01:31:14,399 --> 01:31:19,279
uh so yeah if we take a look at the

2086
01:31:20,880 --> 01:31:25,679
asset system query here where we have

2087
01:31:28,840 --> 01:31:31,840
uh

2088
01:31:32,158 --> 01:31:34,960
game assets

2089
01:31:35,198 --> 01:31:38,238
we're just going to assume that in the

2090
01:31:36,639 --> 01:31:41,440
future somehow

2091
01:31:38,238 --> 01:31:44,718
right we will be able to look up um

2092
01:31:41,439 --> 01:31:45,678
an asset tag hash and we'll be able to

2093
01:31:44,719 --> 01:31:50,880
get

2094
01:31:45,679 --> 01:31:50,880
a way of you know reading

2095
01:31:51,840 --> 01:31:55,760
some measure of how many variants there

2096
01:31:53,760 --> 01:31:57,520
are and we'll just say

2097
01:31:55,760 --> 01:31:59,360
for now we're just going to say hey

2098
01:31:57,520 --> 01:32:03,199
there's there's you know i don't know

2099
01:31:59,359 --> 01:32:07,039
there's eight and we'll just say to do

2100
01:32:03,198 --> 01:32:10,879
need to actually remember and store

2101
01:32:07,039 --> 01:32:14,800
uh the total number of assets

2102
01:32:10,880 --> 01:32:14,800
variance you know

2103
01:32:14,880 --> 01:32:22,400
um so i think that's probably all good

2104
01:32:19,359 --> 01:32:24,399
and now we need to do is just change

2105
01:32:22,399 --> 01:32:26,559
any of the plumbing that doesn't you

2106
01:32:24,399 --> 01:32:28,879
know align with that right

2107
01:32:26,560 --> 01:32:30,400
so in here we have a asset basic

2108
01:32:28,880 --> 01:32:32,319
category and we've got the asset

2109
01:32:30,399 --> 01:32:35,039
category listed here

2110
01:32:32,319 --> 01:32:36,559
um this is actually not going to provide

2111
01:32:35,039 --> 01:32:38,840
that anymore it's it's going to provide

2112
01:32:36,560 --> 01:32:41,679
the asset tag hash

2113
01:32:38,840 --> 01:32:43,520
right um

2114
01:32:41,679 --> 01:32:44,960
and that's going to be nice because that

2115
01:32:43,520 --> 01:32:45,760
will allow us to do a bunch of stuff

2116
01:32:44,960 --> 01:32:48,239
that we weren't

2117
01:32:45,760 --> 01:32:49,679
able to do before um so that's going to

2118
01:32:48,238 --> 01:32:51,198
be good it's just going to be easier for

2119
01:32:49,679 --> 01:32:51,760
us to specify art assets which is the

2120
01:32:51,198 --> 01:32:54,479
whole pro

2121
01:32:51,760 --> 01:32:56,239
pro the whole point here even though

2122
01:32:54,479 --> 01:32:59,439
this will also speed up

2123
01:32:56,238 --> 01:33:02,238
the asset matching dramatically

2124
01:32:59,439 --> 01:33:03,919
um it it also just is easier to use

2125
01:33:02,238 --> 01:33:05,678
which is the main reason we actually

2126
01:33:03,920 --> 01:33:08,880
cared about it

2127
01:33:05,679 --> 01:33:09,760
um not it was not actually the speed

2128
01:33:08,880 --> 01:33:11,520
because

2129
01:33:09,760 --> 01:33:13,119
we weren't actually trying to optimize

2130
01:33:11,520 --> 01:33:14,480
it at this particular time it just so

2131
01:33:13,119 --> 01:33:17,198
happens this will also

2132
01:33:14,479 --> 01:33:17,198
optimize it

2133
01:33:18,639 --> 01:33:27,199
all right so we're now in the um

2134
01:33:24,158 --> 01:33:29,519
so we're now in the cutscene layer

2135
01:33:27,198 --> 01:33:29,519
and

2136
01:33:34,639 --> 01:33:38,560
so looking at this i feel like pretty

2137
01:33:37,920 --> 01:33:43,039
much

2138
01:33:38,560 --> 01:33:43,039
shot index um

2139
01:33:43,279 --> 01:33:47,519
is probably something that should just

2140
01:33:44,960 --> 01:33:48,840
be collapsed down to like variant or

2141
01:33:47,520 --> 01:33:51,840
something

2142
01:33:48,840 --> 01:33:51,840
right

2143
01:33:59,119 --> 01:34:02,158
like i don't think we for any particular

2144
01:34:01,279 --> 01:34:05,039
reason

2145
01:34:02,158 --> 01:34:05,759
need the shot index to be an actual

2146
01:34:05,039 --> 01:34:08,238
thing

2147
01:34:05,760 --> 01:34:10,719
right because that could just be the

2148
01:34:08,238 --> 01:34:10,718
variant

2149
01:34:16,319 --> 01:34:19,920
so here's the way we've got this set up

2150
01:34:18,479 --> 01:34:21,839
and you can basically see like we've got

2151
01:34:19,920 --> 01:34:24,079
two things here we've got shot index and

2152
01:34:21,840 --> 01:34:26,880
layer index

2153
01:34:24,079 --> 01:34:28,639
and yeah i just i'm not sure we actually

2154
01:34:26,880 --> 01:34:31,359
care about that now we could

2155
01:34:28,639 --> 01:34:32,480
we could potentially say that we care

2156
01:34:31,359 --> 01:34:35,279
about some

2157
01:34:32,479 --> 01:34:35,279
aspect of it

2158
01:34:42,639 --> 01:34:47,840
so layering for example

2159
01:34:48,560 --> 01:34:56,239
might be something we want

2160
01:34:53,039 --> 01:34:58,880
uh to have its own vow

2161
01:34:56,238 --> 01:34:58,879
value

2162
01:34:59,279 --> 01:35:01,840
um

2163
01:35:04,079 --> 01:35:14,319
i guess i don't i don't know

2164
01:35:08,319 --> 01:35:16,399
what i would say about that

2165
01:35:14,319 --> 01:35:18,639
like i like i could like if somebody

2166
01:35:16,399 --> 01:35:22,399
made the argument

2167
01:35:18,639 --> 01:35:22,400
that asset match vector

2168
01:35:22,560 --> 01:35:25,280
should have

2169
01:35:26,238 --> 01:35:30,799
layering as one of the parameters like i

2170
01:35:28,960 --> 01:35:33,118
could believe that

2171
01:35:30,800 --> 01:35:34,639
um and so maybe you say like well the

2172
01:35:33,118 --> 01:35:37,679
shot index

2173
01:35:34,639 --> 01:35:39,920
is the variant you know and the layer

2174
01:35:37,679 --> 01:35:42,960
index is the other one

2175
01:35:39,920 --> 01:35:45,679
but really when we look at this i that

2176
01:35:42,960 --> 01:35:47,439
that to me just doesn't seem like

2177
01:35:45,679 --> 01:35:50,960
logical

2178
01:35:47,439 --> 01:35:52,000
so you know i would think that instead

2179
01:35:50,960 --> 01:35:54,158
what you would do

2180
01:35:52,000 --> 01:35:55,600
is is rather than having these be

2181
01:35:54,158 --> 01:35:57,920
matched because these are direct

2182
01:35:55,600 --> 01:36:00,800
look up like there's no ambiguity these

2183
01:35:57,920 --> 01:36:04,319
are cut scenes they have to be

2184
01:36:00,800 --> 01:36:06,960
exactly the thing that they are

2185
01:36:04,319 --> 01:36:10,319
you really would rather those things

2186
01:36:06,960 --> 01:36:13,359
just get plowed in

2187
01:36:10,319 --> 01:36:17,118
uh to the tag hash

2188
01:36:13,359 --> 01:36:21,359
itself right so

2189
01:36:17,118 --> 01:36:21,359
i feel like what you would want to do

2190
01:36:23,279 --> 01:36:25,840
is

2191
01:36:27,439 --> 01:36:34,079
is really just have those be actual tags

2192
01:36:31,039 --> 01:36:37,279
i mean it's a little bit annoying it's

2193
01:36:34,079 --> 01:36:41,359
it's annoying from the standpoint of the

2194
01:36:37,279 --> 01:36:46,238
person who actually has to sit here

2195
01:36:41,359 --> 01:36:52,399
and do this garbage like so

2196
01:36:46,238 --> 01:36:54,158
uh in the file format

2197
01:36:52,399 --> 01:37:07,839
like if you actually have to sit here

2198
01:36:54,158 --> 01:37:07,839
and do this

2199
01:37:11,359 --> 01:37:16,000
like that definitely sucked right but at

2200
01:37:14,319 --> 01:37:18,399
the same time it's like

2201
01:37:16,000 --> 01:37:19,198
well it it only really kind of sucks

2202
01:37:18,399 --> 01:37:24,000
because c

2203
01:37:19,198 --> 01:37:26,399
sucks or c sucks i should say

2204
01:37:24,000 --> 01:37:27,600
uh it is actually the right thing for

2205
01:37:26,399 --> 01:37:29,439
the system

2206
01:37:27,600 --> 01:37:31,440
because it allows you to just wrap those

2207
01:37:29,439 --> 01:37:34,719
tags directly up and look them up

2208
01:37:31,439 --> 01:37:36,799
instantaneously so it's what you want

2209
01:37:34,719 --> 01:37:39,118
and the fact that c makes it annoying to

2210
01:37:36,800 --> 01:37:42,639
do is not necessarily

2211
01:37:39,118 --> 01:37:44,799
the reason not to do it right so if you

2212
01:37:42,639 --> 01:37:47,920
just assumed that you had

2213
01:37:44,800 --> 01:37:49,039
some ranges reserved you could write

2214
01:37:47,920 --> 01:37:52,079
some code

2215
01:37:49,039 --> 01:37:53,359
that would do this as well like it more

2216
01:37:52,079 --> 01:37:55,039
efficiently where you just said like

2217
01:37:53,359 --> 01:37:56,399
okay we're gonna reserve this range

2218
01:37:55,039 --> 01:37:58,319
and then when we see like a

2219
01:37:56,399 --> 01:37:59,118
parenthetical with one of these things

2220
01:37:58,319 --> 01:38:01,198
in it

2221
01:37:59,118 --> 01:38:03,198
i'm probably not gonna bother doing that

2222
01:38:01,198 --> 01:38:05,118
because i think this is fine

2223
01:38:03,198 --> 01:38:06,719
the way it is probably so we can

2224
01:38:05,118 --> 01:38:10,319
probably just go ahead and

2225
01:38:06,719 --> 01:38:13,760
you know do this and call it a day

2226
01:38:10,319 --> 01:38:15,359
right um

2227
01:38:13,760 --> 01:38:17,920
so i would say let's just do it that way

2228
01:38:15,359 --> 01:38:17,920
because i think that

2229
01:38:18,238 --> 01:38:25,599
i knew i don't know what that's about

2230
01:38:21,359 --> 01:38:27,439
but that is a

2231
01:38:25,600 --> 01:38:30,960
yes my phone ringtone is the monkey

2232
01:38:27,439 --> 01:38:32,638
island theme song

2233
01:38:30,960 --> 01:38:34,399
i mean clearly that's the right decision

2234
01:38:32,639 --> 01:38:38,000
i don't think anyone you know

2235
01:38:34,399 --> 01:38:39,759
could argue with it does anyone know

2236
01:38:38,000 --> 01:38:42,880
what ron gilbert's doing these days i'm

2237
01:38:39,760 --> 01:38:46,000
i'm gonna send ron gilbert an email

2238
01:38:42,880 --> 01:38:47,920
um i think on a previous stream like i

2239
01:38:46,000 --> 01:38:49,760
don't know a couple streams ago

2240
01:38:47,920 --> 01:38:52,480
i think i said that i thought that ron

2241
01:38:49,760 --> 01:38:55,679
gilbert was one of the best programmers

2242
01:38:52,479 --> 01:38:56,959
like in the history of gaming and and i

2243
01:38:55,679 --> 01:38:58,158
was thinking about that the other day

2244
01:38:56,960 --> 01:39:00,319
and i think that's probably

2245
01:38:58,158 --> 01:39:01,759
just true because one of the interesting

2246
01:39:00,319 --> 01:39:04,799
things so so here's

2247
01:39:01,760 --> 01:39:07,280
here's something let me go ahead and

2248
01:39:04,800 --> 01:39:09,840
just just lay this out for you

2249
01:39:07,279 --> 01:39:11,118
so there's different ways there are

2250
01:39:09,840 --> 01:39:14,880
different skills

2251
01:39:11,118 --> 01:39:16,960
that great programmers need to have um

2252
01:39:14,880 --> 01:39:18,639
or can have right because when you're

2253
01:39:16,960 --> 01:39:19,679
great like it's the same as being a

2254
01:39:18,639 --> 01:39:22,239
great athlete

2255
01:39:19,679 --> 01:39:22,960
like i mean everyone knows what happens

2256
01:39:22,238 --> 01:39:25,279
when

2257
01:39:22,960 --> 01:39:27,039
like you know michael jordan went to

2258
01:39:25,279 --> 01:39:28,639
play baseball or whatever like he wasn't

2259
01:39:27,039 --> 01:39:29,679
the best baseball player right but he

2260
01:39:28,639 --> 01:39:31,279
was

2261
01:39:29,679 --> 01:39:32,880
certainly one of the best basketball

2262
01:39:31,279 --> 01:39:34,719
players right

2263
01:39:32,880 --> 01:39:36,159
so you know when you talk about

2264
01:39:34,719 --> 01:39:39,118
programmer programmer is sort of like

2265
01:39:36,158 --> 01:39:41,759
saying athlete there's different

2266
01:39:39,118 --> 01:39:42,319
disciplines inside it and you know if

2267
01:39:41,760 --> 01:39:44,639
you're

2268
01:39:42,319 --> 01:39:46,079
being a great programmer does not me

2269
01:39:44,639 --> 01:39:48,159
mean being great at

2270
01:39:46,079 --> 01:39:50,238
everything it means that you were great

2271
01:39:48,158 --> 01:39:51,439
at something usually because nobody's

2272
01:39:50,238 --> 01:39:52,638
great at everything like there's no

2273
01:39:51,439 --> 01:39:55,519
programmer who's great at

2274
01:39:52,639 --> 01:39:57,118
everything that doesn't exist you know

2275
01:39:55,520 --> 01:39:59,760
so some programmers

2276
01:39:57,118 --> 01:40:01,679
get more credit than others uh for

2277
01:39:59,760 --> 01:40:03,600
various things because a lot of times

2278
01:40:01,679 --> 01:40:05,118
the emphasis

2279
01:40:03,600 --> 01:40:07,119
when you talk about people who are

2280
01:40:05,118 --> 01:40:10,158
famous for doing programming things

2281
01:40:07,118 --> 01:40:12,799
the emphasis is on things that are

2282
01:40:10,158 --> 01:40:14,960
are not necessarily they don't

2283
01:40:12,800 --> 01:40:16,079
necessarily line up in any particular

2284
01:40:14,960 --> 01:40:19,679
way

2285
01:40:16,079 --> 01:40:22,800
um with the actual

2286
01:40:19,679 --> 01:40:25,679
like with how

2287
01:40:22,800 --> 01:40:26,159
good you were at the thing right i mean

2288
01:40:25,679 --> 01:40:27,600
you could

2289
01:40:26,158 --> 01:40:29,198
start really start with certain things

2290
01:40:27,600 --> 01:40:32,960
like you know maybe like

2291
01:40:29,198 --> 01:40:34,479
uh you you could say that that somebody

2292
01:40:32,960 --> 01:40:37,600
i don't know like mark zuckerberg is a

2293
01:40:34,479 --> 01:40:40,319
famous programmer in a sense right

2294
01:40:37,600 --> 01:40:41,679
um probably a pretty lousy programmer

2295
01:40:40,319 --> 01:40:42,079
right because like what you're famous

2296
01:40:41,679 --> 01:40:43,760
for

2297
01:40:42,079 --> 01:40:45,279
is has really very little to do with

2298
01:40:43,760 --> 01:40:46,079
whether the programming was any good

2299
01:40:45,279 --> 01:40:47,519
like in it and

2300
01:40:46,079 --> 01:40:49,359
and from everything you can kind of see

2301
01:40:47,520 --> 01:40:51,520
about facebook the programming

2302
01:40:49,359 --> 01:40:53,279
especially back then but even today is

2303
01:40:51,520 --> 01:40:55,679
is actually is not good right so so

2304
01:40:53,279 --> 01:40:56,479
we we wouldn't say you you wouldn't

2305
01:40:55,679 --> 01:40:58,319
imagine that

2306
01:40:56,479 --> 01:40:59,279
that that the actual programming skills

2307
01:40:58,319 --> 01:41:00,799
are particularly good there but you're

2308
01:40:59,279 --> 01:41:02,158
famous for some other thing right

2309
01:41:00,800 --> 01:41:03,760
because the thing you

2310
01:41:02,158 --> 01:41:06,000
built became famous or something like

2311
01:41:03,760 --> 01:41:08,800
that right

2312
01:41:06,000 --> 01:41:10,399
um so so there's some of that but then

2313
01:41:08,800 --> 01:41:12,159
there's also programmers who are famous

2314
01:41:10,399 --> 01:41:13,759
for actually being good and like an

2315
01:41:12,158 --> 01:41:14,559
example of that would be like john

2316
01:41:13,760 --> 01:41:18,400
carmack

2317
01:41:14,560 --> 01:41:19,760
or mike abrash or somebody who's like

2318
01:41:18,399 --> 01:41:22,638
you know their names are known pretty

2319
01:41:19,760 --> 01:41:25,760
well because um

2320
01:41:22,639 --> 01:41:27,118
they they actually did do like

2321
01:41:25,760 --> 01:41:28,960
programming things that were important

2322
01:41:27,118 --> 01:41:30,559
to people uh

2323
01:41:28,960 --> 01:41:32,000
and their like skills and programming

2324
01:41:30,560 --> 01:41:35,600
were actually why they were

2325
01:41:32,000 --> 01:41:39,279
famous in a lot of ways um

2326
01:41:35,600 --> 01:41:40,719
and so that happens too but i would say

2327
01:41:39,279 --> 01:41:43,519
that one of the like

2328
01:41:40,719 --> 01:41:44,239
least likely things you will to be

2329
01:41:43,520 --> 01:41:48,480
famous for

2330
01:41:44,238 --> 01:41:51,839
in programming is uh if you are

2331
01:41:48,479 --> 01:41:53,759
a a brilliant architect

2332
01:41:51,840 --> 01:41:55,440
so if the thing that you're best at in

2333
01:41:53,760 --> 01:41:58,639
programming is figuring out

2334
01:41:55,439 --> 01:42:00,719
what to do when and how to do it right

2335
01:41:58,639 --> 01:42:02,800
like like how it should be organized

2336
01:42:00,719 --> 01:42:06,319
and less about coming up with some

2337
01:42:02,800 --> 01:42:09,600
specific fancy algorithm

2338
01:42:06,319 --> 01:42:10,319
um then i i think you oftentimes maybe

2339
01:42:09,600 --> 01:42:12,400
don't get

2340
01:42:10,319 --> 01:42:15,198
the credit you deserve and i think you

2341
01:42:12,399 --> 01:42:17,759
especially deserve some credit because

2342
01:42:15,198 --> 01:42:19,599
that skill is is seems to be incredibly

2343
01:42:17,760 --> 01:42:21,360
rare and like when you look at things

2344
01:42:19,600 --> 01:42:22,880
like yeah if you go back to like

2345
01:42:21,359 --> 01:42:24,000
programs that are famous like facebook

2346
01:42:22,880 --> 01:42:25,520
or something and you look at how

2347
01:42:24,000 --> 01:42:25,920
incredibly terrible their architecture

2348
01:42:25,520 --> 01:42:29,440
is

2349
01:42:25,920 --> 01:42:30,319
on all levels like from from the network

2350
01:42:29,439 --> 01:42:32,719
architecture

2351
01:42:30,319 --> 01:42:34,399
to the server data center architecture

2352
01:42:32,719 --> 01:42:35,279
to the like code itself the architecture

2353
01:42:34,399 --> 01:42:38,000
is terrible like

2354
01:42:35,279 --> 01:42:39,920
it's just just absolutely horrible right

2355
01:42:38,000 --> 01:42:42,399
from start to finish

2356
01:42:39,920 --> 01:42:43,600
um and and they've gone through like

2357
01:42:42,399 --> 01:42:44,879
billions of them right and then they

2358
01:42:43,600 --> 01:42:46,320
keep updating these things and they're

2359
01:42:44,880 --> 01:42:47,760
always awful and they continue to be

2360
01:42:46,319 --> 01:42:50,238
awful and there's just no brilliance

2361
01:42:47,760 --> 01:42:51,840
there right

2362
01:42:50,238 --> 01:42:54,238
um and that's true of like a lot of

2363
01:42:51,840 --> 01:42:58,239
things architected so

2364
01:42:54,238 --> 01:43:00,000
my argument for uh ron gilbert being

2365
01:42:58,238 --> 01:43:01,599
very underrated as one of the best

2366
01:43:00,000 --> 01:43:03,600
programmers i think in the history of

2367
01:43:01,600 --> 01:43:06,960
gaming

2368
01:43:03,600 --> 01:43:09,440
is if you look

2369
01:43:06,960 --> 01:43:10,639
at his track record for game

2370
01:43:09,439 --> 01:43:13,839
architecture

2371
01:43:10,639 --> 01:43:17,359
it is absolutely insane

2372
01:43:13,840 --> 01:43:20,560
just how good it is so

2373
01:43:17,359 --> 01:43:25,039
he did basically scum

2374
01:43:20,560 --> 01:43:29,440
um as an architecture

2375
01:43:25,039 --> 01:43:33,198
for literally from the c64

2376
01:43:29,439 --> 01:43:37,198
through to like modern

2377
01:43:33,198 --> 01:43:38,000
cd-rom based like and then hard drive

2378
01:43:37,198 --> 01:43:42,000
based

2379
01:43:38,000 --> 01:43:45,039
large asset systems

2380
01:43:42,000 --> 01:43:48,158
basically continuously so that same

2381
01:43:45,039 --> 01:43:50,000
system you know with being revised over

2382
01:43:48,158 --> 01:43:52,960
time

2383
01:43:50,000 --> 01:43:53,520
ran everything from maniac mansion all

2384
01:43:52,960 --> 01:43:57,600
the way

2385
01:43:53,520 --> 01:44:00,639
to like you know putt-putt saves the zoo

2386
01:43:57,600 --> 01:44:03,920
and stuff right um

2387
01:44:00,639 --> 01:44:06,800
and i feel like the level

2388
01:44:03,920 --> 01:44:08,800
of like the the degree of like

2389
01:44:06,800 --> 01:44:12,639
level-headed decision-making

2390
01:44:08,800 --> 01:44:15,440
that has to happen to be able to like

2391
01:44:12,639 --> 01:44:17,600
make graphic adventures for an unbroken

2392
01:44:15,439 --> 01:44:21,118
period of like 20 years

2393
01:44:17,600 --> 01:44:24,000
um and have it ship

2394
01:44:21,118 --> 01:44:25,519
so many titles so reliably across so

2395
01:44:24,000 --> 01:44:29,359
many platforms

2396
01:44:25,520 --> 01:44:29,360
it's just kind of ridiculous right

2397
01:44:29,600 --> 01:44:35,679
um so i feel like

2398
01:44:33,039 --> 01:44:37,279
you know that's that's one of those

2399
01:44:35,679 --> 01:44:39,199
situations where i feel like

2400
01:44:37,279 --> 01:44:41,439
you know we don't have metrics for

2401
01:44:39,198 --> 01:44:42,319
saying who is and isn't a great

2402
01:44:41,439 --> 01:44:44,879
programmer

2403
01:44:42,319 --> 01:44:46,399
and it's it's not you know like when

2404
01:44:44,880 --> 01:44:49,279
when we want to talk about

2405
01:44:46,399 --> 01:44:50,879
like athletics you can see why it's so

2406
01:44:49,279 --> 01:44:53,279
much easier because there's all these

2407
01:44:50,880 --> 01:44:56,719
obvious statistics that people gather

2408
01:44:53,279 --> 01:44:58,719
right like we know how many times

2409
01:44:56,719 --> 01:45:00,560
you know michael jordan scored a basket

2410
01:44:58,719 --> 01:45:01,279
and and under the what conditions and

2411
01:45:00,560 --> 01:45:03,920
all these other

2412
01:45:01,279 --> 01:45:05,439
sorts of things and so pointing to a

2413
01:45:03,920 --> 01:45:08,480
particular set of statistics

2414
01:45:05,439 --> 01:45:10,638
is a good way to bolster an argument

2415
01:45:08,479 --> 01:45:13,198
that somebody is great at something

2416
01:45:10,639 --> 01:45:14,960
and so i do think that you know we

2417
01:45:13,198 --> 01:45:16,719
suffer in programming because it's very

2418
01:45:14,960 --> 01:45:19,359
hard to point to anything

2419
01:45:16,719 --> 01:45:21,679
that's a concrete statistic and the

2420
01:45:19,359 --> 01:45:23,920
success of a piece of software has very

2421
01:45:21,679 --> 01:45:25,679
little to do with how well it was made

2422
01:45:23,920 --> 01:45:28,399
because a lot of times something can be

2423
01:45:25,679 --> 01:45:30,158
successful simply because

2424
01:45:28,399 --> 01:45:31,759
you were at the right place at the right

2425
01:45:30,158 --> 01:45:33,439
time

2426
01:45:31,760 --> 01:45:35,199
or you had like a good monopoly

2427
01:45:33,439 --> 01:45:36,960
advantage in some way or

2428
01:45:35,198 --> 01:45:38,559
other sorts of things so it's really

2429
01:45:36,960 --> 01:45:40,239
hard to point to things like well the

2430
01:45:38,560 --> 01:45:41,760
software succeeded because lots of

2431
01:45:40,238 --> 01:45:43,439
software succeeds doesn't mean that the

2432
01:45:41,760 --> 01:45:46,639
programming was any good

2433
01:45:43,439 --> 01:45:49,279
um and so uh you know it's really

2434
01:45:46,639 --> 01:45:51,440
difficult to

2435
01:45:49,279 --> 01:45:52,719
uh to assess those things and so i feel

2436
01:45:51,439 --> 01:45:54,479
like because we don't really have any

2437
01:45:52,719 --> 01:45:56,239
metrics it's hard to talk about things

2438
01:45:54,479 --> 01:45:57,599
especially things like architecture that

2439
01:45:56,238 --> 01:45:59,198
are very diffuse

2440
01:45:57,600 --> 01:46:00,880
very difficult and very poorly

2441
01:45:59,198 --> 01:46:02,559
understood and so i feel like you get

2442
01:46:00,880 --> 01:46:05,520
someone like ron gilbert

2443
01:46:02,560 --> 01:46:07,520
who maybe hasn't ever developed a flashy

2444
01:46:05,520 --> 01:46:08,159
3d graphics routine or something like

2445
01:46:07,520 --> 01:46:09,440
that

2446
01:46:08,158 --> 01:46:11,198
that's kind of the more obvious thing

2447
01:46:09,439 --> 01:46:14,799
that people get credit for

2448
01:46:11,198 --> 01:46:18,079
but when you look at i think his

2449
01:46:14,800 --> 01:46:21,920
track record of really just

2450
01:46:18,079 --> 01:46:24,880
delivering incredibly high quality

2451
01:46:21,920 --> 01:46:25,760
stuff from the architecture side way

2452
01:46:24,880 --> 01:46:28,880
earlier than

2453
01:46:25,760 --> 01:46:31,920
anyone else was able to as well and

2454
01:46:28,880 --> 01:46:32,400
to have that architecture hold up over

2455
01:46:31,920 --> 01:46:34,960
time

2456
01:46:32,399 --> 01:46:35,920
and be able to like more or less

2457
01:46:34,960 --> 01:46:38,960
seamlessly

2458
01:46:35,920 --> 01:46:42,079
go from being something that ran

2459
01:46:38,960 --> 01:46:45,439
the first real point-and-click adventure

2460
01:46:42,079 --> 01:46:48,719
on a c64 to something that ran

2461
01:46:45,439 --> 01:46:51,839
you know like a modern like full talk

2462
01:46:48,719 --> 01:46:55,520
like full fully voice acted

2463
01:46:51,840 --> 01:46:59,119
cd-rom streaming um

2464
01:46:55,520 --> 01:47:01,520
system i just feel like that's one of

2465
01:46:59,118 --> 01:47:03,839
those things that i don't know

2466
01:47:01,520 --> 01:47:05,840
anyone else who did that like i can't

2467
01:47:03,840 --> 01:47:08,719
point to another

2468
01:47:05,840 --> 01:47:11,440
uh example of such a long unbroken

2469
01:47:08,719 --> 01:47:14,239
architectural track record

2470
01:47:11,439 --> 01:47:16,000
and to be honest i think if graphic

2471
01:47:14,238 --> 01:47:17,759
adventures

2472
01:47:16,000 --> 01:47:19,118
weren't kind of crappy from a game

2473
01:47:17,760 --> 01:47:21,520
standpoint like

2474
01:47:19,118 --> 01:47:23,118
you know we we kind of the game doesn't

2475
01:47:21,520 --> 01:47:25,520
that the game

2476
01:47:23,118 --> 01:47:26,719
design of graphic adventures failed to

2477
01:47:25,520 --> 01:47:30,400
evolve

2478
01:47:26,719 --> 01:47:33,760
and so they kind of died out in a way

2479
01:47:30,399 --> 01:47:35,759
um if that hadn't happened

2480
01:47:33,760 --> 01:47:36,880
that track record might just have kept

2481
01:47:35,760 --> 01:47:40,159
going right

2482
01:47:36,880 --> 01:47:40,800
like the reason that ron stopped making

2483
01:47:40,158 --> 01:47:42,799
those

2484
01:47:40,800 --> 01:47:45,119
was not because his architecture fell

2485
01:47:42,800 --> 01:47:47,760
apart or because he couldn't figure out

2486
01:47:45,118 --> 01:47:48,960
how to make like modern technological

2487
01:47:47,760 --> 01:47:51,039
versions of them

2488
01:47:48,960 --> 01:47:52,480
it was because the market didn't want

2489
01:47:51,039 --> 01:47:55,519
that type of game anymore

2490
01:47:52,479 --> 01:47:58,079
right and so in a way

2491
01:47:55,520 --> 01:48:00,239
you might say that the architecture

2492
01:47:58,079 --> 01:48:03,279
itself like literally never failed

2493
01:48:00,238 --> 01:48:06,718
like he never actually got to a point

2494
01:48:03,279 --> 01:48:08,639
where his architecture skills didn't

2495
01:48:06,719 --> 01:48:10,319
continue to take him forward

2496
01:48:08,639 --> 01:48:11,760
it was simply a fact that the market

2497
01:48:10,319 --> 01:48:13,920
didn't want this thing anymore that's

2498
01:48:11,760 --> 01:48:16,159
the only reason we didn't have an even

2499
01:48:13,920 --> 01:48:20,239
longer unbroken period

2500
01:48:16,158 --> 01:48:23,519
um of like you know that system

2501
01:48:20,238 --> 01:48:25,279
delivering so i think that's

2502
01:48:23,520 --> 01:48:27,520
that's my argument there then and i'm

2503
01:48:25,279 --> 01:48:30,639
sticking sticking to it so i feel like

2504
01:48:27,520 --> 01:48:33,360
you know i would say like ron gilbert's

2505
01:48:30,639 --> 01:48:35,440
probably the most underrated programmer

2506
01:48:33,359 --> 01:48:38,319
in in game history because like i feel

2507
01:48:35,439 --> 01:48:41,678
like he was incredibly good

2508
01:48:38,319 --> 01:48:42,880
just incredibly good and and and doesn't

2509
01:48:41,679 --> 01:48:44,880
doesn't really get the credit he

2510
01:48:42,880 --> 01:48:46,639
deserves in my opinion

2511
01:48:44,880 --> 01:48:48,239
i mean he does get credit so it's not

2512
01:48:46,639 --> 01:48:49,600
like he's like it's not like no one

2513
01:48:48,238 --> 01:48:50,959
knows who ron gilbert is like i mean he

2514
01:48:49,600 --> 01:48:51,679
has a massive following awesome it's

2515
01:48:50,960 --> 01:48:55,039
like

2516
01:48:51,679 --> 01:48:58,158
i just don't feel like people give him

2517
01:48:55,039 --> 01:49:00,000
the level of credit that he deserves so

2518
01:48:58,158 --> 01:49:03,599
he does get credit but i think he should

2519
01:49:00,000 --> 01:49:04,960
get even more let's put it that way

2520
01:49:03,600 --> 01:49:06,639
another way is i think he gets credit

2521
01:49:04,960 --> 01:49:08,719
more as a game designer right in other

2522
01:49:06,639 --> 01:49:10,400
words like i think people credit him

2523
01:49:08,719 --> 01:49:12,639
more because they like the games he

2524
01:49:10,399 --> 01:49:14,479
designed which is great

2525
01:49:12,639 --> 01:49:16,400
but i feel like he deserves more credit

2526
01:49:14,479 --> 01:49:17,839
as an architect because

2527
01:49:16,399 --> 01:49:19,839
and i don't feel like he gets that

2528
01:49:17,840 --> 01:49:22,319
credit because i feel like

2529
01:49:19,840 --> 01:49:22,960
he did some incredibly pioneering work

2530
01:49:22,319 --> 01:49:26,238
and

2531
01:49:22,960 --> 01:49:26,719
demonstrated throughout its history just

2532
01:49:26,238 --> 01:49:29,118
how

2533
01:49:26,719 --> 01:49:29,840
brilliant and resilient that it was

2534
01:49:29,118 --> 01:49:32,719
right

2535
01:49:29,840 --> 01:49:33,599
um and how smoothly it was extended and

2536
01:49:32,719 --> 01:49:35,439
how

2537
01:49:33,599 --> 01:49:36,960
he never made those wrong decisions

2538
01:49:35,439 --> 01:49:40,000
right like he didn't

2539
01:49:36,960 --> 01:49:44,079
ever ship a dud on the engine side like

2540
01:49:40,000 --> 01:49:44,079
and that's yeah it's pretty cool

2541
01:49:44,479 --> 01:49:46,638
so

2542
01:49:47,520 --> 01:49:52,480
all right um

2543
01:49:50,560 --> 01:49:53,920
i think we're almost out of time but uh

2544
01:49:52,479 --> 01:49:55,198
let's see what we were doing here oh

2545
01:49:53,920 --> 01:49:57,520
this this is just a

2546
01:49:55,198 --> 01:49:59,519
again another straightforward thing so

2547
01:49:57,520 --> 01:50:01,520
um what we want to do here is just be

2548
01:49:59,520 --> 01:50:03,440
able to pick out which shots we're doing

2549
01:50:01,520 --> 01:50:05,520
uh instead of shot index now we could

2550
01:50:03,439 --> 01:50:08,559
actually just make this be a tag

2551
01:50:05,520 --> 01:50:09,920
um so uh but

2552
01:50:08,560 --> 01:50:11,440
since these layers since these actually

2553
01:50:09,920 --> 01:50:13,760
go in order i think i'm just going to do

2554
01:50:11,439 --> 01:50:15,359
this mathematically because we can

2555
01:50:13,760 --> 01:50:17,119
so i think what we want to do is say

2556
01:50:15,359 --> 01:50:19,118
there okay so there's an asset tag

2557
01:50:17,118 --> 01:50:21,759
hash here um and so we're going to go

2558
01:50:19,118 --> 01:50:24,880
ahead and pull that out

2559
01:50:21,760 --> 01:50:28,159
um and we want to say

2560
01:50:24,880 --> 01:50:32,639
oops get tag hash we want to say here

2561
01:50:28,158 --> 01:50:32,638
like um

2562
01:50:34,238 --> 01:50:41,039
where's the thing that actually

2563
01:50:38,079 --> 01:50:42,000
so here is what we want right so what we

2564
01:50:41,039 --> 01:50:44,800
want to be able to do

2565
01:50:42,000 --> 01:50:45,279
is we want to be able to say like tag

2566
01:50:44,800 --> 01:50:48,639
layer

2567
01:50:45,279 --> 01:50:48,639
index you know

2568
01:50:48,960 --> 01:50:52,079
uh and then we want to do like a plus

2569
01:50:51,520 --> 01:50:53,920
here

2570
01:50:52,079 --> 01:50:56,319
right so we want to do like layer index

2571
01:50:53,920 --> 01:50:58,560
plus the layer index value

2572
01:50:56,319 --> 01:50:59,920
i think these will be off by one so i

2573
01:50:58,560 --> 01:51:02,639
mean i think we'd have to do this

2574
01:50:59,920 --> 01:51:07,920
because it seems like

2575
01:51:02,639 --> 01:51:12,319
well which i guess i don't know um

2576
01:51:07,920 --> 01:51:12,319
how do we line these up so

2577
01:51:15,198 --> 01:51:22,158
hey well looks like

2578
01:51:18,560 --> 01:51:22,159
where is the layer index value

2579
01:51:22,479 --> 01:51:26,638
so so here it looks like we like

2580
01:51:25,319 --> 01:51:29,519
pre-subtracted it

2581
01:51:26,639 --> 01:51:31,118
right so if we just don't do that so if

2582
01:51:29,520 --> 01:51:32,840
we just go back to what we were doing

2583
01:51:31,118 --> 01:51:36,399
before

2584
01:51:32,840 --> 01:51:39,360
um before we introduce that

2585
01:51:36,399 --> 01:51:40,158
uh one offset then this is actually just

2586
01:51:39,359 --> 01:51:42,238
correct

2587
01:51:40,158 --> 01:51:44,319
so if we just assume that it's like the

2588
01:51:42,238 --> 01:51:46,000
offset of the layer index

2589
01:51:44,319 --> 01:51:48,158
then that's what we would want and then

2590
01:51:46,000 --> 01:51:49,118
for the shot index the shot index

2591
01:51:48,158 --> 01:51:53,359
presumably

2592
01:51:49,118 --> 01:51:57,279
also like has to be adjusted

2593
01:51:53,359 --> 01:51:59,519
to not be up by off by one in this case

2594
01:51:57,279 --> 01:52:00,479
intro shot and we just have these things

2595
01:51:59,520 --> 01:52:04,000
here

2596
01:52:00,479 --> 01:52:05,759
this actually i i i guess is

2597
01:52:04,000 --> 01:52:07,599
fairly straightforward because actually

2598
01:52:05,760 --> 01:52:10,960
this part here

2599
01:52:07,599 --> 01:52:13,199
um where we create the thing that would

2600
01:52:10,960 --> 01:52:16,399
normally have the acid information

2601
01:52:13,198 --> 01:52:20,799
in it seems

2602
01:52:16,399 --> 01:52:24,319
like we should just be able to

2603
01:52:20,800 --> 01:52:24,320
change this into like

2604
01:52:24,639 --> 01:52:30,800
that you know what i'm saying like

2605
01:52:27,679 --> 01:52:32,480
we should just be able to paste the tag

2606
01:52:30,800 --> 01:52:36,079
value in there

2607
01:52:32,479 --> 01:52:36,079
so in layered scene

2608
01:52:36,319 --> 01:52:42,399
we could probably replace shot index

2609
01:52:39,118 --> 01:52:42,399
with like a tag

2610
01:52:42,840 --> 01:52:45,840
um

2611
01:52:46,479 --> 01:52:52,959
i don't know what's the actual tag id

2612
01:52:50,960 --> 01:52:54,079
um so we should be able to replace that

2613
01:52:52,960 --> 01:52:58,719
with just which

2614
01:52:54,079 --> 01:53:02,319
you know which shot tag is it right um

2615
01:52:58,719 --> 01:53:05,760
and so in here i would say

2616
01:53:02,319 --> 01:53:06,238
like that shot tag is just gonna come

2617
01:53:05,760 --> 01:53:12,719
from

2618
01:53:06,238 --> 01:53:17,598
from this

2619
01:53:12,719 --> 01:53:17,599
and then the layer comes after it and

2620
01:53:22,560 --> 01:53:28,400
so here i just had a really interesting

2621
01:53:26,158 --> 01:53:28,399
thought

2622
01:53:32,000 --> 01:53:40,560
yeah this this is okay okay okay okay

2623
01:53:36,079 --> 01:53:42,079
bear with me here

2624
01:53:40,560 --> 01:53:43,840
so one of the things that will happen

2625
01:53:42,079 --> 01:53:46,079
currently with our tag matching is that

2626
01:53:43,840 --> 01:53:49,360
if the order of the tags is different

2627
01:53:46,079 --> 01:53:50,079
then you wouldn't match right so if i

2628
01:53:49,359 --> 01:53:53,279
said

2629
01:53:50,079 --> 01:53:54,880
this shot with this layer it wouldn't

2630
01:53:53,279 --> 01:53:57,198
match something that was recorded with

2631
01:53:54,880 --> 01:54:00,800
this layer and this shot

2632
01:53:57,198 --> 01:54:03,839
so my question is should we

2633
01:54:00,800 --> 01:54:04,719
like should we fix that and i guess i'm

2634
01:54:03,840 --> 01:54:08,079
gonna go with

2635
01:54:04,719 --> 01:54:10,239
no because it's less efficient to do so

2636
01:54:08,079 --> 01:54:12,639
because of this because of the fact we

2637
01:54:10,238 --> 01:54:14,479
don't have enough things to do

2638
01:54:12,639 --> 01:54:16,560
but what i would point out is if we

2639
01:54:14,479 --> 01:54:17,439
wanted to we actually could make that

2640
01:54:16,560 --> 01:54:19,760
work

2641
01:54:17,439 --> 01:54:20,879
so the way we would do it is we would

2642
01:54:19,760 --> 01:54:25,440
aes deck

2643
01:54:20,880 --> 01:54:27,760
each individual tag into its own

2644
01:54:25,439 --> 01:54:29,198
32-bit hash and then we just xor them

2645
01:54:27,760 --> 01:54:31,280
together because xor

2646
01:54:29,198 --> 01:54:32,559
is not order dependent like if you xor

2647
01:54:31,279 --> 01:54:34,960
things together

2648
01:54:32,560 --> 01:54:36,719
um you know you'll get the same result

2649
01:54:34,960 --> 01:54:39,439
either way

2650
01:54:36,719 --> 01:54:40,480
if i'm not mistaken about that right so

2651
01:54:39,439 --> 01:54:45,118
if i just xor

2652
01:54:40,479 --> 01:54:45,118
this you know if i if i xor uh

2653
01:54:47,118 --> 01:54:50,719
if i xor a and b and i switch them

2654
01:54:49,679 --> 01:54:53,199
around in x or b

2655
01:54:50,719 --> 01:54:54,319
to a i will get the same result

2656
01:54:53,198 --> 01:54:58,479
regardless

2657
01:54:54,319 --> 01:55:00,799
right so that should mean

2658
01:54:58,479 --> 01:55:01,759
that we could put the tags in any order

2659
01:55:00,800 --> 01:55:03,520
and then they'd match

2660
01:55:01,760 --> 01:55:05,760
i don't really want to do that though

2661
01:55:03,520 --> 01:55:07,760
because we can

2662
01:55:05,760 --> 01:55:09,199
aes deck more efficiently if we don't

2663
01:55:07,760 --> 01:55:12,320
have to do that

2664
01:55:09,198 --> 01:55:14,960
you know what i'm saying um so i think

2665
01:55:12,319 --> 01:55:16,479
i think i won't but i just wanted to

2666
01:55:14,960 --> 01:55:18,800
point out that that's an interesting

2667
01:55:16,479 --> 01:55:20,158
idea like we could do something like

2668
01:55:18,800 --> 01:55:22,560
that

2669
01:55:20,158 --> 01:55:23,839
if we wanted to so i don't know which

2670
01:55:22,560 --> 01:55:25,039
kind of asset we're getting here i think

2671
01:55:23,840 --> 01:55:28,000
it's a plate

2672
01:55:25,039 --> 01:55:28,479
asset probably it looks like scene asset

2673
01:55:28,000 --> 01:55:30,560
type

2674
01:55:28,479 --> 01:55:32,399
is actually what we're trying to get so

2675
01:55:30,560 --> 01:55:33,520
so i guess we'll just we'll just keep

2676
01:55:32,399 --> 01:55:36,879
doing that

2677
01:55:33,520 --> 01:55:39,920
um you know why why mess with success um

2678
01:55:36,880 --> 01:55:40,560
we don't have a weight a match vector

2679
01:55:39,920 --> 01:55:43,599
here

2680
01:55:40,560 --> 01:55:47,840
um of any kind really so so that'll just

2681
01:55:43,599 --> 01:55:47,840
kind of stay

2682
01:55:48,399 --> 01:55:51,359
and yeah i think that's it

2683
01:55:55,520 --> 01:55:59,440
yeah so i think that's all we need so

2684
01:55:57,520 --> 01:56:02,400
the shot tag should be correct this

2685
01:55:59,439 --> 01:56:03,279
asset tag id part this has to be cast

2686
01:56:02,399 --> 01:56:06,319
here because

2687
01:56:03,279 --> 01:56:09,759
we don't have a way of um yeah we can't

2688
01:56:06,319 --> 01:56:13,198
actually do those offsets properly but

2689
01:56:09,760 --> 01:56:17,199
um this is just tag none

2690
01:56:13,198 --> 01:56:20,479
right and this is

2691
01:56:17,198 --> 01:56:21,678
what is this title screen shot index oh

2692
01:56:20,479 --> 01:56:24,718
so this is just

2693
01:56:21,679 --> 01:56:27,599
the same thing um for the the

2694
01:56:24,719 --> 01:56:29,520
title screen as opposed to the um as

2695
01:56:27,599 --> 01:56:32,639
opposed to the cutscenes

2696
01:56:29,520 --> 01:56:33,679
so again uh get tag hash solves the

2697
01:56:32,639 --> 01:56:35,359
problem

2698
01:56:33,679 --> 01:56:36,960
you can just see like this this code was

2699
01:56:35,359 --> 01:56:38,639
just terrible before right i mean not

2700
01:56:36,960 --> 01:56:40,319
terrible from any we weren't measuring

2701
01:56:38,639 --> 01:56:41,520
anything it would have been very slow as

2702
01:56:40,319 --> 01:56:45,198
well but

2703
01:56:41,520 --> 01:56:46,480
um i just mean from just having to like

2704
01:56:45,198 --> 01:56:48,238
deal with it like you could see how what

2705
01:56:46,479 --> 01:56:50,238
a pain in the butt this was

2706
01:56:48,238 --> 01:56:53,678
and so now that we know what we actually

2707
01:56:50,238 --> 01:56:57,118
need we're just able to simplify that

2708
01:56:53,679 --> 01:56:59,118
uh quite a bit right and furthermore

2709
01:56:57,118 --> 01:57:00,639
like the shot index layer index thing

2710
01:56:59,118 --> 01:57:02,479
i don't actually know that we care about

2711
01:57:00,639 --> 01:57:05,039
that here because

2712
01:57:02,479 --> 01:57:06,799
i don't i don't know like what there's

2713
01:57:05,039 --> 01:57:07,679
only one title screen so like i don't

2714
01:57:06,800 --> 01:57:09,760
know what

2715
01:57:07,679 --> 01:57:11,679
this is about like i don't know why you

2716
01:57:09,760 --> 01:57:13,599
need shot index

2717
01:57:11,679 --> 01:57:15,599
one layer index one but you know i mean

2718
01:57:13,599 --> 01:57:18,400
okay like you know if we want to leave

2719
01:57:15,599 --> 01:57:18,400
that on we can

2720
01:57:18,800 --> 01:57:22,400
maybe we want to put more stuff in there

2721
01:57:20,719 --> 01:57:26,639
later i don't know

2722
01:57:22,399 --> 01:57:29,759
so uh again

2723
01:57:26,639 --> 01:57:29,760
nice and clean here

2724
01:57:34,319 --> 01:57:37,039
um and you could even do that in one

2725
01:57:35,679 --> 01:57:38,800
call if you want so you could just put

2726
01:57:37,039 --> 01:57:40,479
that right i mean not in one call but in

2727
01:57:38,800 --> 01:57:42,239
one line by just putting it in there i

2728
01:57:40,479 --> 01:57:44,559
didn't see any point in doing that but

2729
01:57:42,238 --> 01:57:47,678
you could have

2730
01:57:44,560 --> 01:57:49,440
all right so in this case yeah same

2731
01:57:47,679 --> 01:57:50,000
thing like just this just gets a lot

2732
01:57:49,439 --> 01:57:53,919
cleaner

2733
01:57:50,000 --> 01:57:55,039
like um it's just a lot more pleasant

2734
01:57:53,920 --> 01:57:56,719
because now it's

2735
01:57:55,039 --> 01:57:58,639
like look at how much nicer that is

2736
01:57:56,719 --> 01:57:59,599
right just as code it's just a lot

2737
01:57:58,639 --> 01:58:03,440
easier to

2738
01:57:59,599 --> 01:58:06,000
oops to deal with the simple case and

2739
01:58:03,439 --> 01:58:06,799
uh and you know it just makes it much

2740
01:58:06,000 --> 01:58:10,158
more pleasant

2741
01:58:06,800 --> 01:58:13,279
right uh

2742
01:58:10,158 --> 01:58:13,279
what is this complaining about

2743
01:58:17,920 --> 01:58:25,279
cannot convert argument to

2744
01:58:21,599 --> 01:58:25,279
oh um

2745
01:58:27,118 --> 01:58:29,439
oops

2746
01:58:32,560 --> 01:58:36,239
does the font do something different

2747
01:58:36,319 --> 01:58:41,679
it's just assets and and asset tag hash

2748
01:58:46,840 --> 01:58:50,480
right

2749
01:58:48,000 --> 01:58:52,000
what is font type debug i guess there's

2750
01:58:50,479 --> 01:58:54,799
mic

2751
01:58:52,000 --> 01:58:55,520
there's the part i don't know oops this

2752
01:58:54,800 --> 01:58:57,440
is just

2753
01:58:55,520 --> 01:58:58,800
this is just going horribly wrong so one

2754
01:58:57,439 --> 01:59:00,238
of the problems that i have is i think i

2755
01:58:58,800 --> 01:59:03,039
need to fix my key bindings i should

2756
01:59:00,238 --> 01:59:08,718
write this down

2757
01:59:03,039 --> 01:59:08,719
um j should work everywhere

2758
01:59:10,800 --> 01:59:15,119
so i for some reason i had the j turned

2759
01:59:13,279 --> 01:59:15,599
off in other buffers that's just a bad

2760
01:59:15,118 --> 01:59:18,399
idea

2761
01:59:15,599 --> 01:59:19,279
i obviously want it to work everywhere

2762
01:59:18,399 --> 01:59:21,118
um

2763
01:59:19,279 --> 01:59:22,319
so yeah so something about this

2764
01:59:21,118 --> 01:59:26,238
situation

2765
01:59:22,319 --> 01:59:28,840
is a problem um this get tag hash

2766
01:59:26,238 --> 01:59:30,559
uh probably because the font type debug

2767
01:59:28,840 --> 01:59:33,840
thing

2768
01:59:30,560 --> 01:59:33,840
is not um

2769
01:59:34,000 --> 01:59:45,840
yes so so i don't know

2770
01:59:37,279 --> 01:59:45,840
what that's supposed to be about um

2771
01:59:49,359 --> 01:59:52,799
i mean if we're i i feel like all we

2772
01:59:51,279 --> 01:59:55,279
need to do is just just

2773
01:59:52,800 --> 01:59:56,719
i don't know why font type is like a

2774
01:59:55,279 --> 01:59:58,238
thing i don't know what the point of

2775
01:59:56,719 --> 02:00:00,480
this is

2776
01:59:58,238 --> 02:00:02,638
um probably because we were trying to

2777
02:00:00,479 --> 02:00:05,439
use the old matching system

2778
02:00:02,639 --> 02:00:07,039
so i'm not sure like that we probably

2779
02:00:05,439 --> 02:00:10,158
just want to like clean up

2780
02:00:07,039 --> 02:00:14,158
if we look into fonts so we've got

2781
02:00:10,158 --> 02:00:17,759
some fonts here right and you can see

2782
02:00:14,158 --> 02:00:21,279
that we did a tag for some reason

2783
02:00:17,760 --> 02:00:23,760
font type 10 like what

2784
02:00:21,279 --> 02:00:24,719
okay i don't know what the point of that

2785
02:00:23,760 --> 02:00:27,920
is

2786
02:00:24,719 --> 02:00:29,679
um but that's the way we did it and so

2787
02:00:27,920 --> 02:00:31,279
i think we just want to get rid of that

2788
02:00:29,679 --> 02:00:33,359
garbage completely so

2789
02:00:31,279 --> 02:00:35,519
instead of that what we would want here

2790
02:00:33,359 --> 02:00:39,519
is like this is

2791
02:00:35,520 --> 02:00:42,239
um our debug font right

2792
02:00:39,520 --> 02:00:43,599
or something right and then we've got

2793
02:00:42,238 --> 02:00:46,718
the other font

2794
02:00:43,599 --> 02:00:50,480
which is this one um

2795
02:00:46,719 --> 02:00:55,840
and wait how are they both

2796
02:00:50,479 --> 02:00:55,839
the same type of font

2797
02:00:58,079 --> 02:01:03,118
wait if they're both debug fonts then

2798
02:01:00,319 --> 02:01:08,079
which one do you get

2799
02:01:03,118 --> 02:01:10,719
when you ask for one

2800
02:01:08,079 --> 02:01:10,719
what the heck

2801
02:01:14,800 --> 02:01:18,400
that doesn't really make any sense does

2802
02:01:16,158 --> 02:01:20,158
it i'm sure there's if we go back and

2803
02:01:18,399 --> 02:01:21,920
look at the stream

2804
02:01:20,158 --> 02:01:25,198
we go back to the instant replay we'll

2805
02:01:21,920 --> 02:01:25,199
be able to figure that out but

2806
02:01:30,000 --> 02:01:34,800
yeah i mean what so which one do we use

2807
02:01:32,800 --> 02:01:36,079
is it just because we picked like we

2808
02:01:34,800 --> 02:01:38,239
randomly were picking between

2809
02:01:36,079 --> 02:01:38,238
them

2810
02:01:41,920 --> 02:01:44,960
so it looks like we only include

2811
02:01:43,520 --> 02:01:48,159
liberation mono

2812
02:01:44,960 --> 02:01:51,520
is the answer so yeah i guess we did so

2813
02:01:48,158 --> 02:02:05,839
all right well guess what the tag is

2814
02:01:51,520 --> 02:02:05,840
debug font

2815
02:02:06,719 --> 02:02:14,399
all right so now um i i argue

2816
02:02:10,800 --> 02:02:17,440
uh what we want to do is just say

2817
02:02:14,399 --> 02:02:19,920
that this is the debug font and then

2818
02:02:17,439 --> 02:02:20,960
in the file formats we would just

2819
02:02:19,920 --> 02:02:23,279
there's no more

2820
02:02:20,960 --> 02:02:24,158
font type that's not a thing and then we

2821
02:02:23,279 --> 02:02:27,599
just have

2822
02:02:24,158 --> 02:02:30,238
like hey it's the debug font

2823
02:02:27,599 --> 02:02:33,840
right and that's what we actually

2824
02:02:30,238 --> 02:02:33,839
actually wanted

2825
02:02:37,520 --> 02:02:40,320
and eventually we'll presumably have a

2826
02:02:38,880 --> 02:02:42,560
game font but we just don't have one

2827
02:02:40,319 --> 02:02:46,559
right now

2828
02:02:42,560 --> 02:02:49,599
all right um

2829
02:02:46,560 --> 02:02:50,320
looks like ad piece was not actually

2830
02:02:49,599 --> 02:02:53,920
defined

2831
02:02:50,319 --> 02:02:57,118
uh anywhere because presumably we've got

2832
02:02:53,920 --> 02:02:58,399
in here the old way of doing things with

2833
02:02:57,118 --> 02:03:00,719
the asset tag

2834
02:02:58,399 --> 02:03:00,719
uh

2835
02:03:05,118 --> 02:03:07,359
well

2836
02:03:08,719 --> 02:03:12,880
where is that defined then that's weird

2837
02:03:11,118 --> 02:03:16,000
because

2838
02:03:12,880 --> 02:03:19,520
hmm either way this is not

2839
02:03:16,000 --> 02:03:22,880
correct anymore that would still be tag

2840
02:03:19,520 --> 02:03:26,400
hash um and i guess i don't know

2841
02:03:22,880 --> 02:03:30,719
where the ad piece definition is

2842
02:03:26,399 --> 02:03:33,920
let's find out because this must be

2843
02:03:30,719 --> 02:03:33,920
wrong somewhere

2844
02:03:34,399 --> 02:03:43,839
here it is so this just needs to be

2845
02:03:45,039 --> 02:03:53,118
replaced like so

2846
02:03:48,399 --> 02:03:53,118
uh and there we go

2847
02:03:53,359 --> 02:03:57,839
all right so

2848
02:03:59,679 --> 02:04:03,840
i think this allows us to fix all the

2849
02:04:02,238 --> 02:04:04,718
problems we were having before or two

2850
02:04:03,840 --> 02:04:08,159
about like

2851
02:04:04,719 --> 02:04:12,000
not being able to pick who

2852
02:04:08,158 --> 02:04:14,479
was who so like when we add the pieces

2853
02:04:12,000 --> 02:04:15,279
for different people we can now say like

2854
02:04:14,479 --> 02:04:16,718
oh which

2855
02:04:15,279 --> 02:04:18,880
which of the characters were you and

2856
02:04:16,719 --> 02:04:21,039
whatever because the pieces themselves

2857
02:04:18,880 --> 02:04:21,920
and they can mix and match right so a

2858
02:04:21,039 --> 02:04:25,519
piece

2859
02:04:21,920 --> 02:04:26,719
could have a specific thing associated

2860
02:04:25,520 --> 02:04:29,119
with it

2861
02:04:26,719 --> 02:04:31,439
so i think this is just like get tag

2862
02:04:29,118 --> 02:04:31,439
hash

2863
02:04:31,520 --> 02:04:36,639
right uh and the only thing we need to

2864
02:04:34,639 --> 02:04:38,560
do is specify like which one it is

2865
02:04:36,639 --> 02:04:40,159
so i'm pretty sure it's just like tag

2866
02:04:38,560 --> 02:04:43,440
hero right

2867
02:04:40,158 --> 02:04:47,439
um but i just want to check

2868
02:04:43,439 --> 02:04:48,719
so inside handmade uh oops inside base

2869
02:04:47,439 --> 02:04:51,118
game

2870
02:04:48,719 --> 02:04:52,719
so if we look at like body hero right

2871
02:04:51,118 --> 02:04:55,920
it's got orphan

2872
02:04:52,719 --> 02:04:57,760
hero are the tags and

2873
02:04:55,920 --> 02:05:00,000
so we would just put orphan and hero in

2874
02:04:57,760 --> 02:05:01,840
there i think and that would be

2875
02:05:00,000 --> 02:05:03,520
and that would be that right and then it

2876
02:05:01,840 --> 02:05:05,279
would use the facing direction to pick

2877
02:05:03,520 --> 02:05:07,280
it out so i want to go see

2878
02:05:05,279 --> 02:05:09,599
like because we're going to have to do

2879
02:05:07,279 --> 02:05:11,439
some reorganization here obviously

2880
02:05:09,599 --> 02:05:13,039
i want to go see like what that actually

2881
02:05:11,439 --> 02:05:15,279
looks like but

2882
02:05:13,039 --> 02:05:16,639
so in here if we take a look at body

2883
02:05:15,279 --> 02:05:18,238
hero

2884
02:05:16,639 --> 02:05:20,159
right so the facing direction would pick

2885
02:05:18,238 --> 02:05:23,118
and then the the expression

2886
02:05:20,158 --> 02:05:24,399
axis there we don't care about um but

2887
02:05:23,118 --> 02:05:25,920
i'm pretty sure that works for everybody

2888
02:05:24,399 --> 02:05:28,078
yeah so it's just like facing direction

2889
02:05:25,920 --> 02:05:31,520
tells you the up down

2890
02:05:28,078 --> 02:05:32,639
um and then there's other garbage over

2891
02:05:31,520 --> 02:05:34,000
here that we don't have to worry about

2892
02:05:32,639 --> 02:05:37,039
because we don't actually use that right

2893
02:05:34,000 --> 02:05:39,520
now so this is all going to be

2894
02:05:37,039 --> 02:05:41,439
like a body orphan hero or whatever

2895
02:05:39,520 --> 02:05:41,840
there and so one interesting thing about

2896
02:05:41,439 --> 02:05:45,598
this

2897
02:05:41,840 --> 02:05:45,599
is that it does kind of

2898
02:05:46,479 --> 02:05:51,359
it's sort of wants in a way the ability

2899
02:05:50,000 --> 02:05:53,840
to

2900
02:05:51,359 --> 02:05:55,839
change the asset type of a tag hash that

2901
02:05:53,840 --> 02:05:58,078
you already have

2902
02:05:55,840 --> 02:05:59,599
so you would want potentially to do

2903
02:05:58,078 --> 02:06:03,599
something like this

2904
02:05:59,599 --> 02:06:08,639
um as just a sort of a service

2905
02:06:03,599 --> 02:06:08,639
so if in here we had something like um

2906
02:06:10,319 --> 02:06:16,960
like base tags

2907
02:06:13,520 --> 02:06:20,480
so here we would say okay the base tags

2908
02:06:16,960 --> 02:06:21,840
is just like you know asset none because

2909
02:06:20,479 --> 02:06:22,238
we don't care about that but then like

2910
02:06:21,840 --> 02:06:26,000
tag

2911
02:06:22,238 --> 02:06:29,279
orphan tag hero right

2912
02:06:26,000 --> 02:06:31,520
um and why we would now

2913
02:06:29,279 --> 02:06:32,399
have tag orphan in the first place i

2914
02:06:31,520 --> 02:06:34,960
don't know

2915
02:06:32,399 --> 02:06:35,839
uh because we don't really care about

2916
02:06:34,960 --> 02:06:37,439
that but maybe

2917
02:06:35,840 --> 02:06:40,078
you know i'm not gonna delete that at

2918
02:06:37,439 --> 02:06:41,839
the moment but anyway

2919
02:06:40,078 --> 02:06:45,840
so now what would be nice is if we could

2920
02:06:41,840 --> 02:06:45,840
just do this right

2921
02:07:00,960 --> 02:07:04,480
so effectively there's just another

2922
02:07:03,039 --> 02:07:06,158
version of oops

2923
02:07:04,479 --> 02:07:08,158
that's going to kill me i got to fix

2924
02:07:06,158 --> 02:07:10,238
that

2925
02:07:08,158 --> 02:07:11,759
there's just going to be another version

2926
02:07:10,238 --> 02:07:14,959
of

2927
02:07:11,760 --> 02:07:18,400
of get tag hash here where instead of

2928
02:07:14,960 --> 02:07:19,039
passing any of those other elements of

2929
02:07:18,399 --> 02:07:22,238
it

2930
02:07:19,039 --> 02:07:26,960
you actually pass an existing hash

2931
02:07:22,238 --> 02:07:29,598
um so that has all the tags in it

2932
02:07:26,960 --> 02:07:30,560
and then this just merges them together

2933
02:07:29,599 --> 02:07:33,840
so

2934
02:07:30,560 --> 02:07:36,400
it basically takes the category um

2935
02:07:33,840 --> 02:07:37,440
that you pass in and orders it with the

2936
02:07:36,399 --> 02:07:40,879
tags

2937
02:07:37,439 --> 02:07:43,439
that you actually have like so

2938
02:07:40,880 --> 02:07:44,078
um and produces the result that way now

2939
02:07:43,439 --> 02:07:47,279
the

2940
02:07:44,078 --> 02:07:50,238
the only hitch here is that that bottom

2941
02:07:47,279 --> 02:07:50,960
piece right is an is an eight bit value

2942
02:07:50,238 --> 02:07:53,279
and we

2943
02:07:50,960 --> 02:07:54,399
want to make sure that it's not like

2944
02:07:53,279 --> 02:07:57,599
adultered

2945
02:07:54,399 --> 02:08:00,960
so we want to make sure oh wow i can't

2946
02:07:57,599 --> 02:08:00,960
type tilde for some reason

2947
02:08:02,000 --> 02:08:11,599
that's weird so shift tilde doesn't work

2948
02:08:08,479 --> 02:08:14,959
that's a huge problem watching that

2949
02:08:11,599 --> 02:08:22,000
shift tilde

2950
02:08:14,960 --> 02:08:25,840
doesn't work

2951
02:08:22,000 --> 02:08:29,599
hmm all right

2952
02:08:25,840 --> 02:08:31,679
um that's an issue not sure how we fixed

2953
02:08:29,599 --> 02:08:34,719
that i still talked to alan about it

2954
02:08:31,679 --> 02:08:36,319
um so well you know what no i do know

2955
02:08:34,719 --> 02:08:40,000
how to fix that we just bind

2956
02:08:36,319 --> 02:08:44,399
we can just bind shift tilde to insert

2957
02:08:40,000 --> 02:08:47,359
character that should work fine

2958
02:08:44,399 --> 02:08:49,759
um anyway uh so yeah i just need to

2959
02:08:47,359 --> 02:08:51,759
borrow a tilde from somebody else

2960
02:08:49,760 --> 02:08:53,599
i guess of course how to find one i

2961
02:08:51,760 --> 02:08:55,760
don't know um

2962
02:08:53,599 --> 02:08:55,760
but

2963
02:08:58,158 --> 02:09:04,000
i need to be able to not this um

2964
02:09:01,439 --> 02:09:05,439
because i i want to be able to say like

2965
02:09:04,000 --> 02:09:08,560
look the bottom

2966
02:09:05,439 --> 02:09:11,919
so the bottom eight bits right

2967
02:09:08,560 --> 02:09:15,840
um we want to make sure

2968
02:09:11,920 --> 02:09:18,239
aren't like are clear

2969
02:09:15,840 --> 02:09:20,078
when we order this in because we don't

2970
02:09:18,238 --> 02:09:23,439
want the category

2971
02:09:20,078 --> 02:09:27,039
to get you know mussed up from it

2972
02:09:23,439 --> 02:09:28,960
right so that that seems fine and if we

2973
02:09:27,039 --> 02:09:30,158
had a till day well we'd just we'd just

2974
02:09:28,960 --> 02:09:34,560
do that

2975
02:09:30,158 --> 02:09:36,479
but we don't so off we go um

2976
02:09:34,560 --> 02:09:38,560
so let's go ahead and see if we can fix

2977
02:09:36,479 --> 02:09:41,919
this so in the binding file

2978
02:09:38,560 --> 02:09:46,400
so that would be in apps for coder

2979
02:09:41,920 --> 02:09:49,599
bindings um so the teal day so it's tick

2980
02:09:46,399 --> 02:09:52,479
right and so i don't know

2981
02:09:49,599 --> 02:09:53,039
like exactly what i would bind here per

2982
02:09:52,479 --> 02:09:55,359
se

2983
02:09:53,039 --> 02:09:56,319
i guess it's like right text or

2984
02:09:55,359 --> 02:09:58,799
something

2985
02:09:56,319 --> 02:10:00,158
but what i would need to do is pass like

2986
02:09:58,800 --> 02:10:02,400
shift here

2987
02:10:00,158 --> 02:10:03,839
and just say like if somebody does hit

2988
02:10:02,399 --> 02:10:05,439
it with the shift key then they're

2989
02:10:03,840 --> 02:10:06,880
supposed to be able to insert that

2990
02:10:05,439 --> 02:10:11,118
actual character

2991
02:10:06,880 --> 02:10:15,840
right um

2992
02:10:11,118 --> 02:10:15,839
now we will need

2993
02:10:21,118 --> 02:10:24,559
something to bind it to

2994
02:10:24,880 --> 02:10:31,920
and i don't know what that is

2995
02:10:28,800 --> 02:10:35,199
um we need like insert text

2996
02:10:31,920 --> 02:10:38,399
right and

2997
02:10:35,198 --> 02:10:38,879
and i don't know what is that function

2998
02:10:38,399 --> 02:10:42,638
it's like

2999
02:10:38,880 --> 02:10:46,719
write text there is a function for it

3000
02:10:42,639 --> 02:10:46,719
i just don't remember what it was

3001
02:10:52,960 --> 02:10:56,399
thought we used it in here but i guess

3002
02:10:54,719 --> 02:10:58,880
we got rid of

3003
02:10:56,399 --> 02:11:00,719
the places that we actually needed it

3004
02:10:58,880 --> 02:11:01,359
because there were existing things for

3005
02:11:00,719 --> 02:11:05,599
it

3006
02:11:01,359 --> 02:11:11,839
and so it never actually happened um

3007
02:11:05,599 --> 02:11:11,840
which is too bad

3008
02:11:13,198 --> 02:11:18,479
so yeah right

3009
02:11:22,840 --> 02:11:27,599
right

3010
02:11:25,118 --> 02:11:29,279
so it might be that like write text and

3011
02:11:27,599 --> 02:11:31,440
auto indent

3012
02:11:29,279 --> 02:11:33,759
no but that's the bind text input so i

3013
02:11:31,439 --> 02:11:33,759
don't know

3014
02:11:34,158 --> 02:11:38,319
write text input ryan says so right so

3015
02:11:36,238 --> 02:11:41,279
let's try let's try right text input

3016
02:11:38,319 --> 02:11:41,279
because ryan says so

3017
02:11:42,719 --> 02:11:56,000
let's try that and we'll see

3018
02:11:52,000 --> 02:11:56,000
i just saved that so yes

3019
02:11:59,920 --> 02:12:07,840
all right so let's take a look and see

3020
02:12:02,319 --> 02:12:07,840
if i can type a tilde now um

3021
02:12:10,880 --> 02:12:16,719
i can't still

3022
02:12:14,479 --> 02:12:18,638
so i don't know i don't know how we how

3023
02:12:16,719 --> 02:12:21,840
do we type a tilde

3024
02:12:18,639 --> 02:12:25,199
folks because it's bound yeah

3025
02:12:21,840 --> 02:12:28,000
i don't know is is there some other

3026
02:12:25,198 --> 02:12:35,839
magic to it i'm assuming that that's

3027
02:12:28,000 --> 02:12:35,840
what that looks like

3028
02:12:37,279 --> 02:12:40,800
i guess we'll just half talk allen all

3029
02:12:38,639 --> 02:12:44,078
right so until next time

3030
02:12:40,800 --> 02:12:47,360
um i guess we'll just say like insert

3031
02:12:44,078 --> 02:12:52,238
teal day here um

3032
02:12:47,359 --> 02:12:52,238
and and we'll go from there uh

3033
02:12:55,599 --> 02:12:59,279
yeah uh i could cut and paste one if i

3034
02:12:58,238 --> 02:13:00,718
could find one

3035
02:12:59,279 --> 02:13:02,479
but of course i can't search for it

3036
02:13:00,719 --> 02:13:06,560
either probably

3037
02:13:02,479 --> 02:13:08,000
because it would

3038
02:13:06,560 --> 02:13:10,960
it wouldn't let me type it into the

3039
02:13:08,000 --> 02:13:10,960
search right

3040
02:13:11,520 --> 02:13:15,040
otherwise i would have just searched for

3041
02:13:12,960 --> 02:13:18,078
one so i have to like

3042
02:13:15,039 --> 02:13:21,198
just hope that there's a not oh so

3043
02:13:18,078 --> 02:13:22,078
maybe in like the intrinsics would have

3044
02:13:21,198 --> 02:13:23,839
one

3045
02:13:22,078 --> 02:13:26,000
because we would have had to have nodded

3046
02:13:23,840 --> 02:13:27,520
something in here probably

3047
02:13:26,000 --> 02:13:29,118
it's the kind of place you would not

3048
02:13:27,520 --> 02:13:32,880
something

3049
02:13:29,118 --> 02:13:36,960
um or maybe in the math

3050
02:13:32,880 --> 02:13:36,960
uh stuff there it is

3051
02:13:37,359 --> 02:13:44,719
so we could probably um

3052
02:13:41,599 --> 02:13:47,920
probably just

3053
02:13:44,719 --> 02:13:47,920
smoosh that in there

3054
02:13:48,319 --> 02:13:50,880
there we go

3055
02:13:53,039 --> 02:13:59,840
all right um

3056
02:14:01,039 --> 02:14:04,238
all right so i think that's that's it

3057
02:14:03,840 --> 02:14:06,960
right

3058
02:14:04,238 --> 02:14:07,919
and so now we would just have to kind of

3059
02:14:06,960 --> 02:14:12,480
like

3060
02:14:07,920 --> 02:14:14,000
uh to to modify some of these

3061
02:14:12,479 --> 02:14:16,479
did we not save this maybe we didn't

3062
02:14:14,000 --> 02:14:16,479
save this

3063
02:14:21,439 --> 02:14:27,598
didn't we already do this particular one

3064
02:14:24,840 --> 02:14:28,400
though all right we're gonna do this

3065
02:14:27,599 --> 02:14:29,599
next time

3066
02:14:28,399 --> 02:14:31,198
because i don't really want to do this

3067
02:14:29,599 --> 02:14:32,960
at the end of this but if you look like

3068
02:14:31,198 --> 02:14:35,198
basically what we're looking at here is

3069
02:14:32,960 --> 02:14:36,000
all we really have left to do is just

3070
02:14:35,198 --> 02:14:39,359
map

3071
02:14:36,000 --> 02:14:40,000
the pieces that we've added um to all of

3072
02:14:39,359 --> 02:14:42,158
our

3073
02:14:40,000 --> 02:14:43,039
you know to the to the in the level gen

3074
02:14:42,158 --> 02:14:45,039
we just have to

3075
02:14:43,039 --> 02:14:46,399
map those to the right thing you know to

3076
02:14:45,039 --> 02:14:49,359
the new system

3077
02:14:46,399 --> 02:14:51,279
that seems pretty straightforward so

3078
02:14:49,359 --> 02:14:52,960
we'll just leave it at that

3079
02:14:51,279 --> 02:14:54,399
um and maybe after the stream here i'll

3080
02:14:52,960 --> 02:14:57,679
try to coordinate with ryan i

3081
02:14:54,399 --> 02:15:00,799
i owe him the send the changes back

3082
02:14:57,679 --> 02:15:02,719
uh and uh and i do have to figure out a

3083
02:15:00,800 --> 02:15:05,760
way to fix that tilde so that might

3084
02:15:02,719 --> 02:15:06,880
that might require alan because it

3085
02:15:05,760 --> 02:15:08,239
doesn't look like that has anything to

3086
02:15:06,880 --> 02:15:11,279
do with ryan's code

3087
02:15:08,238 --> 02:15:14,158
um that's just for coder

3088
02:15:11,279 --> 02:15:14,960
mispicking the binding i guess i'm not

3089
02:15:14,158 --> 02:15:18,319
sure

3090
02:15:14,960 --> 02:15:18,960
um i'm not i'm not sure what's going on

3091
02:15:18,319 --> 02:15:22,078
there

3092
02:15:18,960 --> 02:15:22,399
maybe the problem is is not that and and

3093
02:15:22,078 --> 02:15:25,198
then

3094
02:15:22,399 --> 02:15:27,519
we're just missing the like like let's

3095
02:15:25,198 --> 02:15:29,919
just double check before we

3096
02:15:27,520 --> 02:15:29,920
assume

3097
02:15:34,078 --> 02:15:37,599
it no but it seems i mean that's the

3098
02:15:35,920 --> 02:15:41,599
only place that that really

3099
02:15:37,599 --> 02:15:41,599
happens so

3100
02:15:43,118 --> 02:15:46,000
so i don't know

3101
02:15:47,760 --> 02:15:54,719
i i don't know

3102
02:15:51,679 --> 02:15:56,880
all right well anyway thanks everyone

3103
02:15:54,719 --> 02:15:59,039
for joining me for another episode

3104
02:15:56,880 --> 02:16:00,400
of handmade hero it's been a pleasure

3105
02:15:59,039 --> 02:16:02,960
coding with you

3106
02:16:00,399 --> 02:16:04,238
as always and if you do want to follow

3107
02:16:02,960 --> 02:16:05,198
along series at home you can always

3108
02:16:04,238 --> 02:16:06,718
pre-order the game

3109
02:16:05,198 --> 02:16:08,799
on handmader.org and it comes with

3110
02:16:06,719 --> 02:16:09,840
source code so you can follow along with

3111
02:16:08,800 --> 02:16:12,239
it

3112
02:16:09,840 --> 02:16:13,599
also on handmadehero.org i'm starting to

3113
02:16:12,238 --> 02:16:15,839
consolidate things

3114
02:16:13,599 --> 02:16:17,360
um i've got a little more work to do

3115
02:16:15,840 --> 02:16:20,078
this this needs a full screen

3116
02:16:17,359 --> 02:16:21,679
option i guess but on the homepage now

3117
02:16:20,078 --> 02:16:22,319
there's the pre-order place there's the

3118
02:16:21,679 --> 02:16:24,319
schedule

3119
02:16:22,319 --> 02:16:25,439
and there's the episode guide that you

3120
02:16:24,319 --> 02:16:27,439
can search and stuff

3121
02:16:25,439 --> 02:16:28,719
for things like you know whatever you

3122
02:16:27,439 --> 02:16:30,078
want to know

3123
02:16:28,719 --> 02:16:32,318
um so hopefully this will start getting

3124
02:16:30,078 --> 02:16:33,599
better also we've got the links to our

3125
02:16:32,318 --> 02:16:34,879
other projects at the bottom

3126
02:16:33,599 --> 02:16:36,478
and the mailing list so it's kind of

3127
02:16:34,879 --> 02:16:37,839
just all in one place now and you don't

3128
02:16:36,478 --> 02:16:38,159
have to click around which is a little

3129
02:16:37,840 --> 02:16:41,359
bit

3130
02:16:38,159 --> 02:16:43,599
handier um and

3131
02:16:41,359 --> 02:16:46,079
uh the other thing that i would mention

3132
02:16:43,599 --> 02:16:47,920
is two things one

3133
02:16:46,079 --> 02:16:50,000
our graphic novel is on sale right now

3134
02:16:47,920 --> 02:16:52,000
for the holidays if you go click on meow

3135
02:16:50,000 --> 02:16:53,840
the infinite down here

3136
02:16:52,000 --> 02:16:55,439
you can watch the trailer and you can

3137
02:16:53,840 --> 02:16:57,760
also get a discount

3138
02:16:55,439 --> 02:16:58,880
on any of the versions of it that exist

3139
02:16:57,760 --> 02:17:00,000
currently

3140
02:16:58,879 --> 02:17:03,279
i think i showed it at the beginning of

3141
02:17:00,000 --> 02:17:05,599
the stream but it's really pretty baller

3142
02:17:03,280 --> 02:17:07,200
and it looks awesome and we were really

3143
02:17:05,599 --> 02:17:09,359
happy with how good it came out

3144
02:17:07,200 --> 02:17:10,639
so if you're interested in that please

3145
02:17:09,359 --> 02:17:15,359
check it out

3146
02:17:10,638 --> 02:17:18,558
um and furthermore uh starcode galaxy

3147
02:17:15,359 --> 02:17:19,120
uh also is has this the same mailing

3148
02:17:18,558 --> 02:17:22,159
list

3149
02:17:19,120 --> 02:17:23,040
so for people who've been wanting to be

3150
02:17:22,159 --> 02:17:25,679
notified

3151
02:17:23,040 --> 02:17:26,719
when the c programming and low-level

3152
02:17:25,679 --> 02:17:28,239
programming course

3153
02:17:26,718 --> 02:17:30,079
it's just generally a programming course

3154
02:17:28,239 --> 02:17:30,959
that has everything i think you need to

3155
02:17:30,079 --> 02:17:33,599
know in it

3156
02:17:30,959 --> 02:17:34,159
um is ready that's the same mailing list

3157
02:17:33,599 --> 02:17:35,359
so you can

3158
02:17:34,159 --> 02:17:36,718
as long as you put your name on our

3159
02:17:35,359 --> 02:17:38,000
mailing list we really don't send out

3160
02:17:36,718 --> 02:17:39,358
anything other than announcements of

3161
02:17:38,000 --> 02:17:41,040
when things are updated

3162
02:17:39,359 --> 02:17:42,719
so if there's like a new chapter of me

3163
02:17:41,040 --> 02:17:44,319
on the infinite if there's uh

3164
02:17:42,718 --> 02:17:45,919
you know a new announcement about star

3165
02:17:44,318 --> 02:17:47,840
code galaxy

3166
02:17:45,920 --> 02:17:49,519
or about handmade hero we just send them

3167
02:17:47,840 --> 02:17:51,359
out only when there's something

3168
02:17:49,519 --> 02:17:52,719
so we don't really send anything else

3169
02:17:51,359 --> 02:17:54,000
out on the mailing list so you can just

3170
02:17:52,718 --> 02:17:56,558
put your name in that

3171
02:17:54,000 --> 02:17:57,359
and you'll get um well if it doesn't go

3172
02:17:56,558 --> 02:17:59,279
to spam because

3173
02:17:57,359 --> 02:18:01,359
gmail always of course likes to send

3174
02:17:59,280 --> 02:18:02,960
mailing lists stuff to spam

3175
02:18:01,359 --> 02:18:05,439
but if you somehow manage to get gmail

3176
02:18:02,959 --> 02:18:07,839
not to market as spam you will

3177
02:18:05,439 --> 02:18:09,120
be able to get notified so hopefully uh

3178
02:18:07,840 --> 02:18:10,799
sign up for that if you're interested in

3179
02:18:09,120 --> 02:18:12,800
hardcore galaxy we'll be sending out the

3180
02:18:10,799 --> 02:18:16,000
information about that

3181
02:18:12,799 --> 02:18:16,638
uh as soon as we are ready to to have a

3182
02:18:16,000 --> 02:18:18,718
broader

3183
02:18:16,638 --> 02:18:20,079
access to it all right that's it for

3184
02:18:18,718 --> 02:18:22,879
today i'll be back here

3185
02:18:20,079 --> 02:18:24,318
next week as the schedule says until

3186
02:18:22,879 --> 02:18:25,438
then have fun programming everyone and

3187
02:18:24,318 --> 02:18:33,119
i'll see you on the internet

3188
02:18:25,439 --> 02:18:33,120
take it easy everybody

