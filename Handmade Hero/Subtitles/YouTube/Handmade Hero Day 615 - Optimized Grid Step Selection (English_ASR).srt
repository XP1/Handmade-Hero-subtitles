1
00:00:01,580 --> 00:00:05,490
hello everybody and welcome to hand made

2
00:00:04,290 --> 00:00:09,300
here oh sure we could a complete-game

3
00:00:05,490 --> 00:00:11,099
live on stream we are gonna take a quick

4
00:00:09,300 --> 00:00:12,900
second here before I get started

5
00:00:11,099 --> 00:00:15,449
programming just to mention the fact

6
00:00:12,900 --> 00:00:19,250
that I've pointed out that handmade

7
00:00:15,449 --> 00:00:23,969
Seattle comm which is Abner coin Bray's

8
00:00:19,250 --> 00:00:27,929
conference that he runs I which he ran

9
00:00:23,969 --> 00:00:29,278
last year and everyone loved he was

10
00:00:27,929 --> 00:00:32,789
going to run it again this year but of

11
00:00:29,278 --> 00:00:36,210
course due to the fact that we are

12
00:00:32,789 --> 00:00:37,890
currently in a pandemic wisely decided

13
00:00:36,210 --> 00:00:41,090
that perhaps everyone getting together

14
00:00:37,890 --> 00:00:45,179
in a room would not be the best idea

15
00:00:41,090 --> 00:00:47,989
nevertheless he changed things around

16
00:00:45,179 --> 00:00:50,570
and figured out a way that everyone can

17
00:00:47,988 --> 00:00:52,558
sort of get together virtually and

18
00:00:50,570 --> 00:00:56,009
there's now going to be a handmade

19
00:00:52,558 --> 00:00:58,530
Seattle that just won't be quite so

20
00:00:56,009 --> 00:01:01,619
Seattle maybe it'll be on Seattle time

21
00:00:58,530 --> 00:01:04,260
but it will actually just be throughout

22
00:01:01,619 --> 00:01:07,679
the world since everyone can participate

23
00:01:04,260 --> 00:01:10,020
virtually if you want to get tickets

24
00:01:07,680 --> 00:01:12,868
because I know a lot of folks who watch

25
00:01:10,019 --> 00:01:15,420
this show knew about handmade Seattle

26
00:01:12,868 --> 00:01:18,810
and probably came last year to the show

27
00:01:15,420 --> 00:01:20,359
in person I would suspect mm-hmm I know

28
00:01:18,810 --> 00:01:24,570
I certainly saw a lot of people there

29
00:01:20,359 --> 00:01:26,938
you can go and get tickets now a

30
00:01:24,569 --> 00:01:28,258
previously was just counting down until

31
00:01:26,938 --> 00:01:31,199
the tickets were available the website

32
00:01:28,259 --> 00:01:34,200
you could not buy them you can now buy

33
00:01:31,200 --> 00:01:37,140
early bird tickets and they just went on

34
00:01:34,200 --> 00:01:38,759
sale today and a hundred so last year

35
00:01:37,140 --> 00:01:42,450
when people actually literally had to

36
00:01:38,759 --> 00:01:44,099
get on a plane and fly there there were

37
00:01:42,450 --> 00:01:45,930
way more than 100 tickets sold I think

38
00:01:44,099 --> 00:01:50,640
there was more like 300 tickets sold or

39
00:01:45,930 --> 00:01:53,100
something like this to the show so a

40
00:01:50,640 --> 00:01:56,790
hundred will probably not last very long

41
00:01:53,099 --> 00:01:58,199
so if you do want the cheaper tickets to

42
00:01:56,790 --> 00:01:59,368
the conference you're probably gonna

43
00:01:58,200 --> 00:02:00,990
want to get in on that pretty soon

44
00:01:59,368 --> 00:02:03,180
because I'm guessing a hundred probably

45
00:02:00,989 --> 00:02:06,060
won't last very long especially since

46
00:02:03,180 --> 00:02:07,560
now people don't even have to travel to

47
00:02:06,060 --> 00:02:09,628
go there so a bunch of people who

48
00:02:07,560 --> 00:02:12,439
probably didn't go last year because

49
00:02:09,628 --> 00:02:14,449
traveling is very expensive and or

50
00:02:12,439 --> 00:02:16,280
they have families that they're taking

51
00:02:14,449 --> 00:02:19,099
care of or something I can't just up and

52
00:02:16,280 --> 00:02:22,900
leave for four or five days whatever it

53
00:02:19,099 --> 00:02:22,900
takes to travel to the US and so on I

54
00:02:25,120 --> 00:02:30,020
you really want to probably get in on

55
00:02:27,770 --> 00:02:32,270
this soon if you want one of those

56
00:02:30,020 --> 00:02:35,450
hundred tickets now if you don't need to

57
00:02:32,270 --> 00:02:38,210
get the discounts then that's fine but

58
00:02:35,449 --> 00:02:40,789
again since this year there won't be any

59
00:02:38,210 --> 00:02:43,040
travel involved some people who maybe

60
00:02:40,789 --> 00:02:45,349
can't afford very much in terms of a

61
00:02:43,039 --> 00:02:47,329
ticket price you know it's a pretty good

62
00:02:45,349 --> 00:02:49,069
discount there you probably want to get

63
00:02:47,330 --> 00:02:50,300
in on that because it's a much more

64
00:02:49,069 --> 00:02:51,799
affordable conference now since you

65
00:02:50,300 --> 00:02:56,630
don't have to pay for airfare and hotel

66
00:02:51,800 --> 00:02:57,830
right that really takes a lot of the

67
00:02:56,629 --> 00:03:00,469
sting out of a conference that's

68
00:02:57,830 --> 00:03:02,630
reasonably priced as Abner keeps this

69
00:03:00,469 --> 00:03:05,419
which by the way I would take a minute

70
00:03:02,629 --> 00:03:06,979
to thank him for doing because a lot of

71
00:03:05,419 --> 00:03:08,449
these conferences these days are

72
00:03:06,979 --> 00:03:10,189
absurdly priced I don't even want to

73
00:03:08,449 --> 00:03:12,619
know what the game developer conference

74
00:03:10,189 --> 00:03:15,079
cost these days they're like $1000

75
00:03:12,620 --> 00:03:18,590
tickets or something like this it's kind

76
00:03:15,080 --> 00:03:20,300
of just highway robbery so please take a

77
00:03:18,590 --> 00:03:23,349
look at this you can go directly there

78
00:03:20,300 --> 00:03:27,860
by just doing handmade - Seattle comm

79
00:03:23,349 --> 00:03:30,979
pound tickets and I don't really think

80
00:03:27,860 --> 00:03:33,080
that the majority of the conference has

81
00:03:30,979 --> 00:03:35,060
probably even been scheduled yet so

82
00:03:33,080 --> 00:03:37,450
there's probably going to be a lot of

83
00:03:35,060 --> 00:03:40,489
stuff added to it but there's already

84
00:03:37,449 --> 00:03:42,759
people lining up for presentations as

85
00:03:40,489 --> 00:03:46,550
you can see a lot of them are people

86
00:03:42,759 --> 00:03:53,030
that you've probably heard of before or

87
00:03:46,550 --> 00:03:57,140
who in fact I think Elizabeth was

88
00:03:53,030 --> 00:03:59,390
presented at the last one so if you came

89
00:03:57,139 --> 00:04:00,859
to the original handmade Seattle you

90
00:03:59,389 --> 00:04:03,409
would have seen that and then other

91
00:04:00,860 --> 00:04:05,330
folks on here you probably have heard of

92
00:04:03,409 --> 00:04:07,789
this one's obviously people who've been

93
00:04:05,330 --> 00:04:10,630
doing a lot of handmade stuff that

94
00:04:07,789 --> 00:04:15,590
you've probably seen before so you know

95
00:04:10,629 --> 00:04:18,290
give it a shot and you'll also probably

96
00:04:15,590 --> 00:04:19,819
recognize Alan Webster here from Forker

97
00:04:18,290 --> 00:04:23,760
this is the editor that I actually use

98
00:04:19,819 --> 00:04:26,519
on stream so yeah they'll

99
00:04:23,759 --> 00:04:29,099
it's probably not even really completely

100
00:04:26,519 --> 00:04:30,479
full of of what the actual schedule will

101
00:04:29,100 --> 00:04:31,980
be yet but it's already got a lot of

102
00:04:30,480 --> 00:04:34,319
people that you probably already know

103
00:04:31,980 --> 00:04:37,740
about participating and maybe some that

104
00:04:34,319 --> 00:04:39,629
you don't but either way I guess I just

105
00:04:37,740 --> 00:04:40,860
say now would probably be a good time to

106
00:04:39,629 --> 00:04:41,819
get your early bird tickets if you need

107
00:04:40,860 --> 00:04:43,740
the discount because I don't think

108
00:04:41,819 --> 00:04:49,500
that's gonna last very long based on

109
00:04:43,740 --> 00:04:51,329
last year so that's the URL I will let

110
00:04:49,500 --> 00:04:53,189
everyone else take care of that someone

111
00:04:51,329 --> 00:04:54,689
will probably post it in the chat if you

112
00:04:53,189 --> 00:04:57,839
have the twitch chat up at this moment

113
00:04:54,689 --> 00:04:59,189
I'm sure someone will post this link so

114
00:04:57,839 --> 00:05:01,709
you can just go ahead and click on it

115
00:04:59,189 --> 00:05:03,480
and buy your tickets I will now go do

116
00:05:01,709 --> 00:05:05,579
some programming and we will just

117
00:05:03,480 --> 00:05:08,250
mention that periodically on future

118
00:05:05,579 --> 00:05:10,169
streams so everyone who watches the show

119
00:05:08,250 --> 00:05:12,050
knows about it and maybe can get the

120
00:05:10,170 --> 00:05:17,430
early bird tickets if they want them

121
00:05:12,050 --> 00:05:18,990
alright so let's get started why we

122
00:05:17,430 --> 00:05:23,069
don't have a substance W in there I

123
00:05:18,990 --> 00:05:27,360
don't know you know we just don't

124
00:05:23,069 --> 00:05:31,620
apparently okay so if we go ahead and

125
00:05:27,360 --> 00:05:33,660
take a look at where we were on the sort

126
00:05:31,620 --> 00:05:36,090
of lighting optimization side we've I

127
00:05:33,660 --> 00:05:39,870
think done a really good job honestly I

128
00:05:36,089 --> 00:05:42,239
mean the Lighting's getting the the

129
00:05:39,870 --> 00:05:45,480
major like backhaul part of the lighting

130
00:05:42,240 --> 00:05:47,160
bird we need to do our Ray casting has

131
00:05:45,480 --> 00:05:48,569
just been getting faster and faster to

132
00:05:47,160 --> 00:05:52,170
the point where now it's like actually

133
00:05:48,569 --> 00:05:53,639
quite efficient and honestly we could

134
00:05:52,170 --> 00:05:55,439
probably get a lot more bang for the

135
00:05:53,639 --> 00:05:57,659
buck now by just going over and doing

136
00:05:55,439 --> 00:06:00,180
the filtering work because most of the

137
00:05:57,660 --> 00:06:02,760
noise and the square enos will just go

138
00:06:00,180 --> 00:06:06,269
away once we improve filtering on this

139
00:06:02,759 --> 00:06:08,789
thing so in terms of improving quality

140
00:06:06,269 --> 00:06:11,789
what I'm doing right now is is not

141
00:06:08,790 --> 00:06:13,200
really the highest order action item but

142
00:06:11,790 --> 00:06:15,030
the reason I want to go a little bit

143
00:06:13,199 --> 00:06:17,310
further with it is because it never

144
00:06:15,029 --> 00:06:19,109
hurts to have faster ray casting you can

145
00:06:17,310 --> 00:06:22,259
always just cast more rays and get more

146
00:06:19,110 --> 00:06:24,480
accurate or just take less time and save

147
00:06:22,259 --> 00:06:26,310
more CPU for something else or run on a

148
00:06:24,480 --> 00:06:28,860
lower end system so since the lighting

149
00:06:26,310 --> 00:06:31,259
is by far the most expensive thing that

150
00:06:28,860 --> 00:06:34,259
we're doing I don't want to stop just

151
00:06:31,259 --> 00:06:36,120
yet because we are not really at a point

152
00:06:34,259 --> 00:06:36,899
where I'm out of ideas

153
00:06:36,120 --> 00:06:38,819
if

154
00:06:36,899 --> 00:06:40,948
I was then I might say well that's good

155
00:06:38,819 --> 00:06:44,399
enough let's go over and start working

156
00:06:40,949 --> 00:06:48,240
on quality but at the moment I still am

157
00:06:44,399 --> 00:06:51,060
fairly certain that actually we can

158
00:06:48,240 --> 00:06:55,050
improve the speed quite dramatically

159
00:06:51,060 --> 00:06:58,470
with this this algorithm it can be done

160
00:06:55,050 --> 00:07:03,168
much more efficiently than it's being

161
00:06:58,470 --> 00:07:06,600
done right now so we're slowly shaving

162
00:07:03,168 --> 00:07:09,629
time off of this and what you can see

163
00:07:06,600 --> 00:07:13,949
now from what we have is we actually do

164
00:07:09,629 --> 00:07:16,469
eight rays in a loop we then write eight

165
00:07:13,949 --> 00:07:18,360
at a time and that's our fundamental

166
00:07:16,470 --> 00:07:19,979
like you know sometimes people call

167
00:07:18,360 --> 00:07:22,229
these a kernel or something like the

168
00:07:19,978 --> 00:07:27,930
main unit of work I don't really care

169
00:07:22,228 --> 00:07:30,598
what you call it but point being we now

170
00:07:27,930 --> 00:07:32,069
have effectively two hot zones one is

171
00:07:30,598 --> 00:07:34,819
this grid raycast function which

172
00:07:32,069 --> 00:07:36,750
basically does all of the costly work

173
00:07:34,819 --> 00:07:39,418
involved in determining lighting

174
00:07:36,750 --> 00:07:41,959
transport and then we have one more hot

175
00:07:39,418 --> 00:07:41,959
zone over here

176
00:07:42,300 --> 00:07:47,340
which is well I actually don't think

177
00:07:44,430 --> 00:07:49,709
that fill atlas border is expensive at

178
00:07:47,339 --> 00:07:53,668
all it's it's really just this so this

179
00:07:49,709 --> 00:07:56,788
function right here you can see after we

180
00:07:53,668 --> 00:08:00,389
do so full cast right here is what

181
00:07:56,788 --> 00:08:02,788
actually does the the work of calling

182
00:08:00,389 --> 00:08:04,139
the grid ray cast we could just weld it

183
00:08:02,788 --> 00:08:06,389
right in here we don't really need to

184
00:08:04,139 --> 00:08:07,788
have these you know we can be complex by

185
00:08:06,389 --> 00:08:10,050
that a look but doesn't matter that

186
00:08:07,788 --> 00:08:12,870
function calls not costing us anything

187
00:08:10,050 --> 00:08:14,189
really at this point and there's not a

188
00:08:12,870 --> 00:08:16,590
lot of optimization that's going to go

189
00:08:14,189 --> 00:08:18,029
on by slipstreaming those so really what

190
00:08:16,589 --> 00:08:20,219
we end up with here is just two hot

191
00:08:18,029 --> 00:08:21,719
points one is the grid ray cast that

192
00:08:20,220 --> 00:08:24,389
ends up getting dispatched in there and

193
00:08:21,720 --> 00:08:27,750
the other is this process here whereby

194
00:08:24,389 --> 00:08:29,728
after we do the read cast you can see we

195
00:08:27,750 --> 00:08:32,849
have to loop through and do this sort of

196
00:08:29,728 --> 00:08:38,218
production work to generate the blurred

197
00:08:32,849 --> 00:08:43,080
versions of our mmm excuse me the

198
00:08:38,219 --> 00:08:44,490
blurred versions of our diffuse map it's

199
00:08:43,080 --> 00:08:46,079
really the blurred version of our spec

200
00:08:44,490 --> 00:08:48,329
map so we're kind of turning the spec

201
00:08:46,078 --> 00:08:50,319
map into this fuse map might be the way

202
00:08:48,328 --> 00:08:54,729
to say it but either way that's

203
00:08:50,320 --> 00:08:58,120
what we're doing and so this I believe

204
00:08:54,730 --> 00:09:00,700
could get dramatically faster right and

205
00:08:58,120 --> 00:09:02,889
the reason that I say that is because if

206
00:09:00,700 --> 00:09:05,350
you actually take a look at for example

207
00:09:02,889 --> 00:09:13,379
the HH Life prof results that we're

208
00:09:05,350 --> 00:09:13,379
getting right now so if I go into oops

209
00:09:14,850 --> 00:09:26,950
no yes so if we take a look at the HH

210
00:09:23,320 --> 00:09:28,690
light prof runs and how expensive they

211
00:09:26,950 --> 00:09:30,610
are you can see here that were like you

212
00:09:28,690 --> 00:09:32,050
know something like 4.5 right now and

213
00:09:30,610 --> 00:09:33,700
obviously that's you know numbers pretty

214
00:09:32,049 --> 00:09:35,349
variable because CPUs being what they

215
00:09:33,700 --> 00:09:38,050
are it's not particularly deterministic

216
00:09:35,350 --> 00:09:40,750
but it's hovering around 4.5 depending

217
00:09:38,049 --> 00:09:44,370
on what we do if we just turn this off

218
00:09:40,750 --> 00:09:50,259
so if we say look don't do that right

219
00:09:44,370 --> 00:09:52,810
and we run it again we can have a slight

220
00:09:50,259 --> 00:09:54,970
sort of we can have an idea of how much

221
00:09:52,809 --> 00:09:59,559
time is being taken for that right and

222
00:09:54,970 --> 00:10:01,899
so if you look one full second of time

223
00:09:59,559 --> 00:10:05,289
which is a quarter almost of our entire

224
00:10:01,899 --> 00:10:08,470
time is spent doing nothing but updating

225
00:10:05,289 --> 00:10:11,439
the actual map right so when we look at

226
00:10:08,470 --> 00:10:17,200
this time when you look at 4.5 seconds

227
00:10:11,440 --> 00:10:19,990
actually only 3.5 seconds at most is

228
00:10:17,200 --> 00:10:21,550
being spent doing actual doing the

229
00:10:19,990 --> 00:10:24,789
actual work of computing the light

230
00:10:21,549 --> 00:10:28,509
transport we're then spending a full

231
00:10:24,789 --> 00:10:29,500
second processing those results so I

232
00:10:28,509 --> 00:10:32,200
just wanted to point that out because

233
00:10:29,500 --> 00:10:35,200
this is a massive opportunity for us to

234
00:10:32,200 --> 00:10:37,540
speed up this function here and people

235
00:10:35,200 --> 00:10:39,129
were asking in the pre stream how fast

236
00:10:37,539 --> 00:10:41,139
we think it will get eventually they

237
00:10:39,129 --> 00:10:43,439
were like they they asked to mated they

238
00:10:41,139 --> 00:10:48,429
thought they'd get to 3.8 seconds I

239
00:10:43,440 --> 00:10:53,530
suspect 3.8 seconds is actually not is

240
00:10:48,429 --> 00:10:55,059
not probably plausible as a lower bound

241
00:10:53,529 --> 00:10:58,629
I think will get much lower than that

242
00:10:55,059 --> 00:11:00,309
and the reason I say that is because we

243
00:10:58,629 --> 00:11:02,230
have such a tremendous opportunity for

244
00:11:00,309 --> 00:11:03,369
optimization not only do we have that

245
00:11:02,230 --> 00:11:04,129
but we also have the fact that we're

246
00:11:03,370 --> 00:11:07,870
still doing all this in

247
00:11:04,129 --> 00:11:09,980
floats and we could just do it in 16-bit

248
00:11:07,870 --> 00:11:11,840
so we could produce them every traffic

249
00:11:09,980 --> 00:11:14,600
dramatically as well there's there's

250
00:11:11,840 --> 00:11:15,889
just so much opportunity that really the

251
00:11:14,600 --> 00:11:17,300
only reason we would probably get

252
00:11:15,889 --> 00:11:19,549
stopped at 3.8 seconds

253
00:11:17,299 --> 00:11:22,689
is if we just decided we don't care

254
00:11:19,549 --> 00:11:25,639
about getting it faster than that right

255
00:11:22,690 --> 00:11:27,710
so I think we're in good shape to shave

256
00:11:25,639 --> 00:11:29,779
at least another second office maybe get

257
00:11:27,710 --> 00:11:32,060
down to something like 3.5 but you know

258
00:11:29,779 --> 00:11:33,379
if you really wanted to go hardcore on

259
00:11:32,059 --> 00:11:35,269
this you could probably get it even

260
00:11:33,379 --> 00:11:38,179
lower than that um

261
00:11:35,269 --> 00:11:40,490
I wanted to take a little bit more of a

262
00:11:38,179 --> 00:11:42,709
look at the actual ray caster though I

263
00:11:40,490 --> 00:11:45,049
want to do a little bit more work to see

264
00:11:42,710 --> 00:11:49,250
about whether it can be made a little

265
00:11:45,049 --> 00:11:52,969
bit more efficient than it currently is

266
00:11:49,250 --> 00:11:55,580
if I take a look at this leaf index call

267
00:11:52,970 --> 00:11:58,460
here this is one thing I really want to

268
00:11:55,580 --> 00:12:00,950
look at so what I would like to know

269
00:11:58,460 --> 00:12:02,990
we've already done testing about what

270
00:12:00,950 --> 00:12:07,070
happens when you flatten the cost metric

271
00:12:02,990 --> 00:12:08,990
right so if we wanted to know how fast

272
00:12:07,070 --> 00:12:10,670
this thing would be if it just has to

273
00:12:08,990 --> 00:12:13,310
run the code path but doesn't actually

274
00:12:10,669 --> 00:12:19,370
have to do anything so I'll run with

275
00:12:13,309 --> 00:12:22,489
cost metric zero we know that that takes

276
00:12:19,370 --> 00:12:24,980
us from 4.5 to 2.2 which is pretty

277
00:12:22,490 --> 00:12:28,700
dramatic right so that means we are

278
00:12:24,980 --> 00:12:31,550
spending 2.3 seconds of our test run

279
00:12:28,700 --> 00:12:34,009
time doing the actual work in here on

280
00:12:31,549 --> 00:12:36,409
the cost metric however what I'd like to

281
00:12:34,009 --> 00:12:38,809
know is what happens if we have to just

282
00:12:36,409 --> 00:12:41,870
do one of them so what you'll notice is

283
00:12:38,809 --> 00:12:43,519
that if I set the cost metric to 1 then

284
00:12:41,870 --> 00:12:46,279
we know that when we get through here

285
00:12:43,519 --> 00:12:48,289
will absolutely decrement it at least to

286
00:12:46,279 --> 00:12:52,399
zero there which means that we will do

287
00:12:48,289 --> 00:12:55,669
one pass through the routine and then

288
00:12:52,399 --> 00:12:59,120
exit and I'm very curious to know how

289
00:12:55,669 --> 00:13:01,129
much that costs so if we run something

290
00:12:59,120 --> 00:13:03,620
we know that two point two is the

291
00:13:01,129 --> 00:13:08,029
flattener so what's really fascinating

292
00:13:03,620 --> 00:13:09,980
here right you see this is 2.6 that

293
00:13:08,029 --> 00:13:12,169
gives me a tremendous amount of insight

294
00:13:09,980 --> 00:13:14,330
into what's happening here and it's

295
00:13:12,169 --> 00:13:17,829
exactly what I expected which is great

296
00:13:14,330 --> 00:13:17,830
it's what I wanted to say

297
00:13:22,210 --> 00:13:31,490
so uh the reason that I wanted to see

298
00:13:27,350 --> 00:13:36,379
that so specifically is that if you

299
00:13:31,490 --> 00:13:38,028
think sorry I'm still in under I still

300
00:13:36,379 --> 00:13:45,588
have the current virus or allergies or

301
00:13:38,028 --> 00:13:47,889
something it's been going on forever so

302
00:13:45,589 --> 00:13:50,870
if you look at what that's telling me

303
00:13:47,889 --> 00:13:52,580
and this dovetails nicely with what I

304
00:13:50,870 --> 00:13:55,070
wanted to do to the routine so I was

305
00:13:52,580 --> 00:13:56,950
that's why I was hoping to see that the

306
00:13:55,070 --> 00:13:59,330
thing that I wasn't that it didn't want

307
00:13:56,950 --> 00:14:00,950
was if I did that it jumps back up to

308
00:13:59,330 --> 00:14:03,110
four point five right I didn't want it

309
00:14:00,950 --> 00:14:05,810
to be that just running this code path

310
00:14:03,110 --> 00:14:08,000
once I wanted it to be that there that

311
00:14:05,809 --> 00:14:09,349
it was the repetition of hunting through

312
00:14:08,000 --> 00:14:10,399
the grid squares that was costing us

313
00:14:09,350 --> 00:14:13,070
because that's that could do something

314
00:14:10,399 --> 00:14:14,870
about I didn't want to see that just

315
00:14:13,070 --> 00:14:16,430
running the code path once was the

316
00:14:14,870 --> 00:14:19,700
expensive part because if that was

317
00:14:16,429 --> 00:14:22,629
somehow true then me improving the grid

318
00:14:19,700 --> 00:14:26,120
iteration is not going to fix it right

319
00:14:22,629 --> 00:14:28,100
okay so this is exactly what I wanted to

320
00:14:26,120 --> 00:14:30,350
see and what that tells me is that

321
00:14:28,100 --> 00:14:33,379
actually this routine is quite sensitive

322
00:14:30,350 --> 00:14:36,740
to how many times it actually has to run

323
00:14:33,379 --> 00:14:38,000
the loop which is what I wanted and what

324
00:14:36,740 --> 00:14:40,370
you would is what you would assume that

325
00:14:38,000 --> 00:14:42,259
I try when optimizing things especially

326
00:14:40,370 --> 00:14:44,659
on modern processors not to assume

327
00:14:42,259 --> 00:14:46,189
things because oftentimes you'll find

328
00:14:44,659 --> 00:14:47,809
out your assumptions are wrong so I like

329
00:14:46,190 --> 00:14:49,490
to get some confirmation that my

330
00:14:47,809 --> 00:14:52,759
assumption might at least be somewhat

331
00:14:49,490 --> 00:14:55,039
correct before you know jumping to

332
00:14:52,759 --> 00:15:01,039
conclusions there okay

333
00:14:55,039 --> 00:15:03,649
so what do I want to do here well

334
00:15:01,039 --> 00:15:05,809
there's a couple things so first of all

335
00:15:03,649 --> 00:15:07,669
if you take a look at what's going on in

336
00:15:05,809 --> 00:15:09,859
this routine you can see how its

337
00:15:07,669 --> 00:15:11,179
structured we do a little bit of testing

338
00:15:09,860 --> 00:15:13,278
to see whether we're still inside the

339
00:15:11,179 --> 00:15:15,769
grid and then this is our heavyweight

340
00:15:13,278 --> 00:15:17,350
loop that just wants to loop over all of

341
00:15:15,769 --> 00:15:21,980
the things that we're going to intersect

342
00:15:17,350 --> 00:15:25,159
with soap so possible occluders and

343
00:15:21,980 --> 00:15:28,129
we're going to check against them now

344
00:15:25,159 --> 00:15:30,289
what you will notice is when we hit we

345
00:15:28,129 --> 00:15:32,328
immediately break so if we can find

346
00:15:30,289 --> 00:15:34,838
that's the end of the routine if we

347
00:15:32,328 --> 00:15:37,428
always found a hit on the first time

348
00:15:34,839 --> 00:15:38,809
then we would be really happy because it

349
00:15:37,428 --> 00:15:40,970
means that we wouldn't have to keep

350
00:15:38,808 --> 00:15:42,769
running this loop now maybe this part

351
00:15:40,970 --> 00:15:44,418
right here is the really expensive part

352
00:15:42,769 --> 00:15:46,308
somehow I highly doubt that because

353
00:15:44,418 --> 00:15:47,659
there's very little code this is all got

354
00:15:46,308 --> 00:15:51,019
taken out so it's really just this part

355
00:15:47,659 --> 00:15:52,428
right here so I doubt it because the

356
00:15:51,019 --> 00:15:53,899
part where we actually do the sampling

357
00:15:52,428 --> 00:15:55,548
is down here and that's the part that

358
00:15:53,899 --> 00:15:58,548
would actually be the most expensive and

359
00:15:55,548 --> 00:15:59,568
we're not running that only in the case

360
00:15:58,548 --> 00:16:02,178
where we hit something we're running it

361
00:15:59,568 --> 00:16:04,219
every time so really what that means to

362
00:16:02,178 --> 00:16:07,220
me is that this at least is part of the

363
00:16:04,220 --> 00:16:09,319
expenses doing this loop right and what

364
00:16:07,220 --> 00:16:11,269
you see is that running this thing

365
00:16:09,318 --> 00:16:14,389
repeatedly will cause us to keep going

366
00:16:11,269 --> 00:16:16,308
through this loop and then this post

367
00:16:14,389 --> 00:16:17,479
amble if we took if we don't hit

368
00:16:16,308 --> 00:16:18,738
something we're gonna do this and then

369
00:16:17,479 --> 00:16:24,379
we're gonna run the loop again and so on

370
00:16:18,739 --> 00:16:26,959
right now if you look specifically at

371
00:16:24,379 --> 00:16:31,249
how this is set up what you'll see is

372
00:16:26,958 --> 00:16:34,698
that it does intersections on four boxes

373
00:16:31,249 --> 00:16:38,058
at a time and it has a loop construct

374
00:16:34,698 --> 00:16:39,918
here which is designed to test four

375
00:16:38,058 --> 00:16:43,668
boxes at a time and then go to the next

376
00:16:39,918 --> 00:16:46,100
one what that means is that ideally

377
00:16:43,668 --> 00:16:48,318
because we have a branch in here and

378
00:16:46,100 --> 00:16:53,209
we'd like that branch to do something

379
00:16:48,318 --> 00:16:57,438
and we test four at a time and so we'd

380
00:16:53,208 --> 00:17:00,198
like to test for at least our loop is

381
00:16:57,438 --> 00:17:03,139
set up so that we would really like the

382
00:17:00,198 --> 00:17:06,558
occupancy of a grid to be in some sweet

383
00:17:03,139 --> 00:17:09,528
spot that's probably 12 16 boxes

384
00:17:06,558 --> 00:17:14,470
something like this it's certainly not

385
00:17:09,528 --> 00:17:14,470
one or two boxes right

386
00:17:18,209 --> 00:17:25,959
and so I'm really concerned about this

387
00:17:22,750 --> 00:17:28,720
in the sense that I feel like if I go

388
00:17:25,959 --> 00:17:31,960
look we are probably getting very low

389
00:17:28,720 --> 00:17:36,549
utilization out of this loop because the

390
00:17:31,960 --> 00:17:39,549
size one thing we chose to do as sort of

391
00:17:36,549 --> 00:17:42,399
a simplification is to table drive the

392
00:17:39,549 --> 00:17:44,649
walk along the grid because I was afraid

393
00:17:42,400 --> 00:17:46,900
that that might be too difficult for me

394
00:17:44,650 --> 00:17:48,070
to write inside the loop it might just

395
00:17:46,900 --> 00:17:53,050
take too many instructions or something

396
00:17:48,069 --> 00:17:57,639
like this but the cost of that means

397
00:17:53,049 --> 00:18:00,700
that the table walk has to be aligned

398
00:17:57,640 --> 00:18:02,320
with the sampling voxel and the reason

399
00:18:00,700 --> 00:18:04,930
that it has to be is because otherwise

400
00:18:02,319 --> 00:18:07,869
the table Vox the table walk wouldn't be

401
00:18:04,930 --> 00:18:11,410
table drivable if we could just raycast

402
00:18:07,869 --> 00:18:12,639
from anywhere we wouldn't be able to

403
00:18:11,410 --> 00:18:15,460
table drive it because we wouldn't be

404
00:18:12,640 --> 00:18:16,509
able to pre-compute it right now maybe

405
00:18:15,460 --> 00:18:18,160
we could come up with a different kind

406
00:18:16,509 --> 00:18:19,420
of table but you know it's obviously way

407
00:18:18,160 --> 00:18:21,509
simpler to just say look we're just

408
00:18:19,420 --> 00:18:24,400
always going to go from the voxel and

409
00:18:21,509 --> 00:18:25,869
that way every place we need to sample

410
00:18:24,400 --> 00:18:30,430
we know we just look up in the table and

411
00:18:25,869 --> 00:18:34,809
we're done the cost of that is that now

412
00:18:30,430 --> 00:18:37,720
if you look at how fine-grained our

413
00:18:34,809 --> 00:18:40,029
lighting voxel is right you can kind of

414
00:18:37,720 --> 00:18:42,670
see that like the squares of lighting I

415
00:18:40,029 --> 00:18:44,379
mean everywhere you see a different leaf

416
00:18:42,670 --> 00:18:45,910
looking or one of these like sampling

417
00:18:44,380 --> 00:18:48,370
lines here because you know our sampler

418
00:18:45,910 --> 00:18:50,560
is not very good right now that's sort

419
00:18:48,369 --> 00:18:53,109
of showing you that the resolution of

420
00:18:50,559 --> 00:18:55,029
that voxel and it's pretty fine grain

421
00:18:53,109 --> 00:18:58,079
compared to our geometry like there's

422
00:18:55,029 --> 00:19:01,629
just not very much geometry here and

423
00:18:58,079 --> 00:19:03,460
sure as the game gets sort of

424
00:19:01,630 --> 00:19:07,780
implemented the gameplay gets

425
00:19:03,460 --> 00:19:09,670
implemented there's gonna be more this

426
00:19:07,779 --> 00:19:11,529
is not gonna be that much more you know

427
00:19:09,670 --> 00:19:14,529
this is not a game like there's there's

428
00:19:11,529 --> 00:19:16,660
gonna be like one person maybe tops in

429
00:19:14,529 --> 00:19:19,509
each cell in most of time not even that

430
00:19:16,660 --> 00:19:20,860
because there has to be empty space in

431
00:19:19,509 --> 00:19:23,529
these cells for the characters to move

432
00:19:20,859 --> 00:19:25,899
around it's this is a sparse game for

433
00:19:23,529 --> 00:19:27,460
gameplay purposes you know you're in

434
00:19:25,900 --> 00:19:29,500
thinking Legend of Zelda it's not

435
00:19:27,460 --> 00:19:30,789
thousands the guy is piled into a room

436
00:19:29,500 --> 00:19:33,000
it's you and

437
00:19:30,789 --> 00:19:35,559
three other enemies with some maybe some

438
00:19:33,000 --> 00:19:38,289
geometry in there for strategy or

439
00:19:35,559 --> 00:19:41,980
something right but an empty room like

440
00:19:38,289 --> 00:19:44,079
this one is not that far off from what

441
00:19:41,980 --> 00:19:46,710
we're actively gonna have we're just not

442
00:19:44,079 --> 00:19:50,769
gonna have that much geometry per square

443
00:19:46,710 --> 00:19:53,529
so having our grid be that small is

444
00:19:50,769 --> 00:19:57,549
really inefficient we're probably only

445
00:19:53,529 --> 00:20:00,279
getting to three tops things per grid

446
00:19:57,549 --> 00:20:04,750
we're not getting eight there's just no

447
00:20:00,279 --> 00:20:06,990
way right so I think one of the biggest

448
00:20:04,750 --> 00:20:09,880
problems that we're having right now is

449
00:20:06,990 --> 00:20:14,740
we're just not getting any load out of

450
00:20:09,880 --> 00:20:17,650
this routine right so let me just prove

451
00:20:14,740 --> 00:20:20,440
that to myself because I again don't

452
00:20:17,650 --> 00:20:22,450
like to assume things when we're doing

453
00:20:20,440 --> 00:20:24,220
this sort of work I would like to keep

454
00:20:22,450 --> 00:20:27,220
it as straightforward as possible and

455
00:20:24,220 --> 00:20:29,740
know what I'm getting myself into so

456
00:20:27,220 --> 00:20:32,170
when we do our internal lighting core

457
00:20:29,740 --> 00:20:34,720
here I would like to actually take a

458
00:20:32,170 --> 00:20:39,340
look at what it generates for its

459
00:20:34,720 --> 00:20:42,130
spatial occupancy and print out what the

460
00:20:39,339 --> 00:20:45,399
occupancy actually is so I'm gonna go

461
00:20:42,130 --> 00:20:48,460
through and I'm gonna see if I can

462
00:20:45,400 --> 00:20:51,340
determine the answer to that question so

463
00:20:48,460 --> 00:20:53,799
I'm gonna do a loop and if you take a

464
00:20:51,339 --> 00:20:57,459
look at the oops well you got a spell

465
00:20:53,799 --> 00:21:01,480
stuff right if you take a look at the

466
00:20:57,460 --> 00:21:04,240
actual lighting solution itself in here

467
00:21:01,480 --> 00:21:07,860
what you'll see is there's the spatial

468
00:21:04,240 --> 00:21:11,529
grid nodes and the spatial grid leaves

469
00:21:07,859 --> 00:21:14,559
if we just walk over the spatial grid

470
00:21:11,529 --> 00:21:18,099
nodes we will be able to see how many

471
00:21:14,559 --> 00:21:22,029
leaves there are in each one and for

472
00:21:18,099 --> 00:21:25,089
each leaf we can also look to see how

473
00:21:22,029 --> 00:21:27,430
many actual boxes there are in them by

474
00:21:25,089 --> 00:21:30,039
looking at say the box mean to see you

475
00:21:27,430 --> 00:21:35,519
know what how many of them are filled

476
00:21:30,039 --> 00:21:35,519
right so if we go through

477
00:21:39,788 --> 00:21:45,769
and I just go through each node index

478
00:21:42,319 --> 00:21:49,970
and I'm assuming we can just count on

479
00:21:45,769 --> 00:21:52,119
the fact that the node count is what it

480
00:21:49,970 --> 00:21:52,120
is

481
00:21:53,798 --> 00:22:03,408
so in here Jimmy here you go you can

482
00:22:01,548 --> 00:22:06,339
kind of see we computed total leaf count

483
00:22:03,409 --> 00:22:12,830
and we should also do a total node count

484
00:22:06,339 --> 00:22:15,230
right here there it is so you can see

485
00:22:12,829 --> 00:22:18,079
here we can just do this get total cell

486
00:22:15,230 --> 00:22:19,759
count right so if I just ask it for the

487
00:22:18,079 --> 00:22:20,689
total cell count I should be able to

488
00:22:19,759 --> 00:22:22,429
loop over all of them

489
00:22:20,690 --> 00:22:27,860
and then I can look at the lighting

490
00:22:22,429 --> 00:22:33,140
spatial grid node I can say spatial grid

491
00:22:27,859 --> 00:22:35,569
nodes index and if I now look at how

492
00:22:33,140 --> 00:22:39,700
many I can basically keep two stats

493
00:22:35,569 --> 00:22:44,480
right I could say okay there's the total

494
00:22:39,700 --> 00:22:51,710
you know total leaf

495
00:22:44,480 --> 00:22:57,259
I guess we'll say node count and then

496
00:22:51,710 --> 00:23:01,190
there's the total well these are both

497
00:22:57,259 --> 00:23:09,769
you 32s by the way I guess I'll also say

498
00:23:01,190 --> 00:23:12,679
total grid node count so I'll sum these

499
00:23:09,769 --> 00:23:15,769
up and then I'll say the total box count

500
00:23:12,679 --> 00:23:18,350
right well actually I know the total box

501
00:23:15,769 --> 00:23:21,349
count so I don't really need to keep

502
00:23:18,349 --> 00:23:25,189
that but I can do the min box count and

503
00:23:21,349 --> 00:23:28,158
the max box count I don't really need

504
00:23:25,190 --> 00:23:32,120
this because you know we know there's

505
00:23:28,159 --> 00:23:34,010
ones with nothing in it right and so

506
00:23:32,119 --> 00:23:36,139
another thing that I might want to keep

507
00:23:34,009 --> 00:23:40,548
is a histogram so the other thing I

508
00:23:36,140 --> 00:23:43,850
could do is say like leaves or rather

509
00:23:40,548 --> 00:23:46,398
nodes per count and I could just say

510
00:23:43,849 --> 00:23:48,709
look let's just say we're gonna take up

511
00:23:46,398 --> 00:23:49,849
to 64 well none of these boxes are gonna

512
00:23:48,710 --> 00:23:52,970
have 64 in them anyway

513
00:23:49,849 --> 00:23:54,859
so we're just gonna say let's count a

514
00:23:52,970 --> 00:23:59,000
histogram and just print out the

515
00:23:54,859 --> 00:24:02,418
histogram of you know how many of each

516
00:23:59,000 --> 00:24:04,788
fullness there are right so I can

517
00:24:02,419 --> 00:24:06,500
basically get a bunch of of stats here

518
00:24:04,788 --> 00:24:08,419
and this one's probably the one I really

519
00:24:06,500 --> 00:24:10,460
want so don't don't actually know if I

520
00:24:08,419 --> 00:24:13,059
if I actually care about any of these so

521
00:24:10,460 --> 00:24:15,860
I might I might just say let's do this

522
00:24:13,058 --> 00:24:23,960
so in here what I need to do is I need

523
00:24:15,859 --> 00:24:26,269
to do a box count and produce this

524
00:24:23,960 --> 00:24:29,900
somehow and then I need to say like well

525
00:24:26,269 --> 00:24:31,940
look if the box count is greater than or

526
00:24:29,900 --> 00:24:34,548
equal to well actually I can just i

527
00:24:31,940 --> 00:24:39,288
guess save box count equals the minimum

528
00:24:34,548 --> 00:24:41,538
of the nodes per box counts array and

529
00:24:39,288 --> 00:24:45,829
the box counts so just to make sure we

530
00:24:41,538 --> 00:24:47,210
don't actually like go over and this

531
00:24:45,829 --> 00:24:48,168
will actually set it equal to that

532
00:24:47,210 --> 00:24:50,029
amount so I want to make sure it's

533
00:24:48,169 --> 00:24:52,549
actually one less than so basically like

534
00:24:50,029 --> 00:24:54,678
we're gonna insert 63 we'll get all of

535
00:24:52,548 --> 00:24:56,298
the overflow so if somehow there's

536
00:24:54,679 --> 00:24:58,730
somebody with a hundred in there we'll

537
00:24:56,298 --> 00:25:00,019
stick them into 63 box and that's fine

538
00:24:58,730 --> 00:25:01,819
because I don't honestly think there's

539
00:25:00,019 --> 00:25:03,889
going to be but we don't need that we

540
00:25:01,819 --> 00:25:06,168
that was already like crazy high anyways

541
00:25:03,890 --> 00:25:08,750
so it'll be fine so then I'll just say

542
00:25:06,169 --> 00:25:10,340
nudes per box count box count and I'll

543
00:25:08,750 --> 00:25:12,440
increment it so then we know there was a

544
00:25:10,339 --> 00:25:14,619
node with that many boxes in it and then

545
00:25:12,440 --> 00:25:23,710
when I'm done I could just go through

546
00:25:14,619 --> 00:25:29,689
the like the box count one by one and

547
00:25:23,710 --> 00:25:33,679
just print it out so I can say hey nodes

548
00:25:29,690 --> 00:25:39,558
with you know or sort of like maybe I'll

549
00:25:33,679 --> 00:25:42,140
just do this box count you you and I'll

550
00:25:39,558 --> 00:25:44,869
just say all right the number of nodes

551
00:25:42,140 --> 00:25:48,049
with this box count was nodes per box

552
00:25:44,869 --> 00:25:50,239
count box count and to avoid spamming

553
00:25:48,048 --> 00:25:52,429
with way too many lines that don't give

554
00:25:50,240 --> 00:25:56,329
any information I'm just gonna only do

555
00:25:52,429 --> 00:26:00,490
it if the nodes per box count in this

556
00:25:56,329 --> 00:26:00,490
case is nonzero

557
00:26:05,420 --> 00:26:12,600
all right so the problem we have now is

558
00:26:09,900 --> 00:26:15,330
we have to actually count and Counting

559
00:26:12,599 --> 00:26:18,659
is not trivial in this case it's not

560
00:26:15,329 --> 00:26:21,509
hard but it's also not just one line of

561
00:26:18,660 --> 00:26:26,910
code the reason for that is these are

562
00:26:21,509 --> 00:26:30,808
packed so what we know if we look we can

563
00:26:26,910 --> 00:26:32,548
loop through the leaves so we're gonna

564
00:26:30,808 --> 00:26:34,500
have to do something like this right and

565
00:26:32,548 --> 00:26:37,109
what we're gonna have to do actually I

566
00:26:34,500 --> 00:26:38,640
guess we can use the loop that we have

567
00:26:37,109 --> 00:26:41,789
here we've we've kind of already written

568
00:26:38,640 --> 00:26:45,360
it in the grid right caster right but it

569
00:26:41,789 --> 00:26:47,700
looks like this right so we need to loop

570
00:26:45,359 --> 00:26:49,319
through the leaves and it's easy to know

571
00:26:47,700 --> 00:26:53,279
how many leaves we have because it's

572
00:26:49,319 --> 00:26:54,240
just these two elements of the node we

573
00:26:53,279 --> 00:26:55,798
can just look at the difference between

574
00:26:54,240 --> 00:26:58,919
them to find out how many there are but

575
00:26:55,798 --> 00:27:02,579
the problem is we don't know how full

576
00:26:58,919 --> 00:27:06,030
each one is so we do we could simplify

577
00:27:02,579 --> 00:27:07,879
our calculation here by only looking at

578
00:27:06,029 --> 00:27:12,058
the last one if we wanted to

579
00:27:07,880 --> 00:27:15,480
meaning we know that if we we know that

580
00:27:12,058 --> 00:27:17,548
every single one of these is full except

581
00:27:15,480 --> 00:27:19,048
the last one so we don't actually have

582
00:27:17,548 --> 00:27:20,490
to do what I'm about to do but just for

583
00:27:19,048 --> 00:27:22,440
simplicity I don't get this is not a

584
00:27:20,490 --> 00:27:24,240
speed oriented routine in fact it's not

585
00:27:22,440 --> 00:27:28,500
even in our production code it's just in

586
00:27:24,240 --> 00:27:29,548
the testing the performance testing so I

587
00:27:28,500 --> 00:27:32,429
don't care at all I'm just going to

588
00:27:29,548 --> 00:27:35,879
write it by summing them each so every

589
00:27:32,429 --> 00:27:40,530
time we pull a leaf out what we want to

590
00:27:35,880 --> 00:27:46,460
do now is see how many of these box

591
00:27:40,529 --> 00:27:46,460
values are actually full right so

592
00:27:49,730 --> 00:27:56,690
I guess I could just do this wide which

593
00:27:55,009 --> 00:27:58,549
sounds crazy cuz don't care about how

594
00:27:56,690 --> 00:28:00,140
the fastest runs but honestly it seems

595
00:27:58,549 --> 00:28:14,960
like since these are wide values that's

596
00:28:00,140 --> 00:28:16,550
just the fastest I write like that tells

597
00:28:14,960 --> 00:28:19,579
us how many of these things is zero

598
00:28:16,549 --> 00:28:21,909
right and I don't know if I can do that

599
00:28:19,579 --> 00:28:29,169
can I

600
00:28:21,910 --> 00:28:37,279
oops that's what I meant

601
00:28:29,170 --> 00:28:39,200
there we go like can't we just do that

602
00:28:37,279 --> 00:28:51,079
do we have that now we don't so we do

603
00:28:39,200 --> 00:28:57,650
have this right so I guess some wrong oh

604
00:28:51,079 --> 00:29:01,609
those are VIII's so I think we can just

605
00:28:57,650 --> 00:29:04,640
do it just with one of them right so we

606
00:29:01,609 --> 00:29:07,339
can just say our the X is equal and that

607
00:29:04,640 --> 00:29:11,390
should be sufficient that just gives us

608
00:29:07,339 --> 00:29:13,839
a wide vector so this is like and can

609
00:29:11,390 --> 00:29:13,840
let me do this

610
00:29:19,029 --> 00:29:26,980
so maybe I'll just say has volume well

611
00:29:21,710 --> 00:29:29,509
that's actually already function so so

612
00:29:26,980 --> 00:29:33,200
I'm just gonna do this test that gives

613
00:29:29,509 --> 00:29:35,359
me back a vector where a vector register

614
00:29:33,200 --> 00:29:38,539
where each of the slots for the float so

615
00:29:35,359 --> 00:29:40,250
the four float slots is all ones in the

616
00:29:38,539 --> 00:29:42,559
case where it's a valid box and all

617
00:29:40,250 --> 00:29:46,279
zeros in the case where it's not so then

618
00:29:42,559 --> 00:29:49,389
I can just do a mask move right or a

619
00:29:46,279 --> 00:29:49,389
move mask I should say

620
00:29:52,349 --> 00:29:59,639
and this will just give me back account

621
00:29:56,470 --> 00:30:03,339
right so this will just be like alright

622
00:29:59,640 --> 00:30:08,470
that's the count and in this particular

623
00:30:03,339 --> 00:30:13,079
case it'll just be like a it'll just be

624
00:30:08,470 --> 00:30:16,329
the bits or set depending on whether the

625
00:30:13,079 --> 00:30:19,990
you know the first bits a one or a zero

626
00:30:16,329 --> 00:30:21,460
based on whether the first ones valid or

627
00:30:19,990 --> 00:30:26,079
not and the second one the third one and

628
00:30:21,460 --> 00:30:29,079
so on right so I believe you can just do

629
00:30:26,079 --> 00:30:34,678
a population count in x86 because oh my

630
00:30:29,079 --> 00:30:34,678
god x86 has like every instruction I

631
00:30:35,490 --> 00:30:39,808
don't actually remember what it is

632
00:30:37,539 --> 00:30:39,808
though

633
00:30:51,660 --> 00:31:01,490
so it's this oops

634
00:31:03,200 --> 00:31:11,100
conveniently called pop pop counts and

635
00:31:07,200 --> 00:31:12,990
so then this is how many there are so at

636
00:31:11,099 --> 00:31:14,939
that point I think that's all I actually

637
00:31:12,990 --> 00:31:18,660
need to do so I can just say box count

638
00:31:14,940 --> 00:31:20,400
plus equals valid count right now I

639
00:31:18,660 --> 00:31:24,269
think that might actually be everything

640
00:31:20,400 --> 00:31:27,509
but because I slammed in some crazy SSE

641
00:31:24,269 --> 00:31:32,519
code there with population count and so

642
00:31:27,509 --> 00:31:34,680
on I kind of want to make sure that this

643
00:31:32,519 --> 00:31:39,980
code works at all because that's kind of

644
00:31:34,680 --> 00:31:49,049
absurd so let's just take a look and see

645
00:31:39,980 --> 00:31:50,610
if that's even remotely right cuz yeah

646
00:31:49,049 --> 00:31:52,409
that was kind of a crazy town thing I

647
00:31:50,609 --> 00:31:53,729
just wanted to count as as is you know

648
00:31:52,410 --> 00:31:55,620
what it's probably just easier for me to

649
00:31:53,730 --> 00:31:56,730
write this why I didn't do that to be

650
00:31:55,619 --> 00:31:59,339
fancy

651
00:31:56,730 --> 00:32:01,319
that's just what came to mind you know

652
00:31:59,339 --> 00:32:04,740
maybe I'm writing too much somebody code

653
00:32:01,319 --> 00:32:10,289
lately I don't know so let's take a look

654
00:32:04,740 --> 00:32:12,089
at valid oh by the way George the person

655
00:32:10,289 --> 00:32:13,829
who wrote remedy VG's extracting pixels

656
00:32:12,089 --> 00:32:17,549
on the chat he reminded me of something

657
00:32:13,829 --> 00:32:19,379
that I always forget to do on stream but

658
00:32:17,549 --> 00:32:21,869
that's really awesome so if you notice

659
00:32:19,380 --> 00:32:23,460
if you look at one of these things here

660
00:32:21,869 --> 00:32:26,489
it's a real pain in the butt to like

661
00:32:23,460 --> 00:32:29,400
actually get down to the values you

662
00:32:26,490 --> 00:32:30,930
actually want to see and so in this case

663
00:32:29,400 --> 00:32:36,060
like we kind of probably want to look at

664
00:32:30,930 --> 00:32:37,590
this as a u-32 because we just want to

665
00:32:36,059 --> 00:32:39,269
know what the mask is right you can see

666
00:32:37,589 --> 00:32:40,679
the mask was like these two are valid

667
00:32:39,269 --> 00:32:44,970
and these two are not or something like

668
00:32:40,680 --> 00:32:47,190
this right so I kind of want to just see

669
00:32:44,970 --> 00:32:52,650
valid P that way and it's kind of a pain

670
00:32:47,190 --> 00:32:55,410
in the butt to do this because it still

671
00:32:52,650 --> 00:32:57,680
sucks like it's still hard to see and it

672
00:32:55,410 --> 00:33:00,029
takes up a lot of space and whatever and

673
00:32:57,680 --> 00:33:02,250
remedy BG actually has like way better

674
00:33:00,029 --> 00:33:05,119
stuff in there for that so

675
00:33:02,250 --> 00:33:14,009
I guess I don't really know what the

676
00:33:05,119 --> 00:33:16,559
format specifier is for this though is

677
00:33:14,009 --> 00:33:18,390
it PS or whatever what's the how do it

678
00:33:16,559 --> 00:33:20,250
you know George can tell me how we do it

679
00:33:18,390 --> 00:33:22,200
because I never remember correctly I

680
00:33:20,250 --> 00:33:24,240
need to learn to use some of the more

681
00:33:22,200 --> 00:33:26,910
advanced features of this but it's

682
00:33:24,240 --> 00:33:32,120
something like that I thought you just

683
00:33:26,910 --> 00:33:32,120
did PS George am I wrong about this

684
00:33:36,019 --> 00:33:41,750
maybe I shouldn't be using this feature

685
00:33:39,029 --> 00:33:41,750
yet I don't know

686
00:33:47,059 --> 00:33:59,549
uh-oh it only works on the registers can

687
00:33:58,109 --> 00:34:03,179
I add a request to make it work on

688
00:33:59,549 --> 00:34:04,619
regular variables - I know I asked too

689
00:34:03,180 --> 00:34:06,539
much of George he wrote this debugger in

690
00:34:04,619 --> 00:34:07,829
his spare time by the way and it's the

691
00:34:06,539 --> 00:34:13,829
best debugger for Windows right now

692
00:34:07,829 --> 00:34:17,269
right which is kind of crazy I wish I

693
00:34:13,829 --> 00:34:20,519
was rich if I was rich I'd just you know

694
00:34:17,269 --> 00:34:22,440
ask George to quit his job and and do

695
00:34:20,519 --> 00:34:23,849
the debugger full-time and just be like

696
00:34:22,440 --> 00:34:25,019
I'll just pay whatever your salary was

697
00:34:23,849 --> 00:34:28,739
but you know that's something only rich

698
00:34:25,019 --> 00:34:29,940
people could do anyway if you're rich

699
00:34:28,739 --> 00:34:34,049
out there could you consider doing that

700
00:34:29,940 --> 00:34:35,340
for me because that would be great so if

701
00:34:34,050 --> 00:34:36,600
you take a look at what's happening here

702
00:34:35,340 --> 00:34:37,200
the population count feature seems to

703
00:34:36,599 --> 00:34:38,819
work just great

704
00:34:37,199 --> 00:34:41,029
let's take a look at the valid if the

705
00:34:38,820 --> 00:34:44,710
valid feature works right

706
00:34:41,030 --> 00:34:48,460
leave box men

707
00:34:44,710 --> 00:34:52,000
max rather X so if I take a look at

708
00:34:48,460 --> 00:34:55,568
these the old way yeah

709
00:34:52,000 --> 00:34:58,030
so that just worked that is a tiny

710
00:34:55,568 --> 00:34:59,980
little sliver of a box but that is

711
00:34:58,030 --> 00:35:02,680
actually correct we probably should just

712
00:34:59,980 --> 00:35:06,760
throw out slivers like that to be honest

713
00:35:02,679 --> 00:35:08,980
but who cares at the moment um so anyway

714
00:35:06,760 --> 00:35:11,200
if I now take a look at the results of

715
00:35:08,980 --> 00:35:13,088
this which I now have some reason to

716
00:35:11,199 --> 00:35:16,509
believe might be sort of correct a

717
00:35:13,088 --> 00:35:17,730
little bit oops well probably can't do

718
00:35:16,510 --> 00:35:19,119
it that way if I gotta do it this way

719
00:35:17,730 --> 00:35:21,250
there we go

720
00:35:19,119 --> 00:35:23,500
so if you take a look at the

721
00:35:21,250 --> 00:35:29,818
distribution of these things what you

722
00:35:23,500 --> 00:35:29,818
can see is it's really not what I wanted

723
00:35:29,849 --> 00:35:36,430
you can kind of see that like the

724
00:35:32,588 --> 00:35:39,909
numbers just aren't very high I don't

725
00:35:36,429 --> 00:35:44,078
know what the optimal box load is box

726
00:35:39,909 --> 00:35:45,489
count zeros probably fine because we

727
00:35:44,079 --> 00:35:49,530
know that we're just gonna have empty

728
00:35:45,489 --> 00:35:54,759
spaces in this grid so you know that's

729
00:35:49,530 --> 00:35:58,240
not a problem but if you take a look at

730
00:35:54,760 --> 00:36:04,180
the box counts here you know that's not

731
00:35:58,239 --> 00:36:07,449
great that's not great we really want to

732
00:36:04,179 --> 00:36:08,858
be mostly honestly all these are PI not

733
00:36:07,449 --> 00:36:13,019
great we'd probably really want to see

734
00:36:08,858 --> 00:36:16,869
more up here even higher than that right

735
00:36:13,019 --> 00:36:22,119
so this just again confirms what I was

736
00:36:16,869 --> 00:36:29,500
assuming I really just wanted there to

737
00:36:22,119 --> 00:36:32,470
be some way that I could verify there's

738
00:36:29,500 --> 00:36:35,829
probably a speed when to be had boosting

739
00:36:32,469 --> 00:36:38,949
that occupancy so where I'm going with

740
00:36:35,829 --> 00:36:42,700
all this is just one simple statement

741
00:36:38,949 --> 00:36:44,588
our grid cells are too small we need our

742
00:36:42,699 --> 00:36:46,118
grid cells to be way bigger than the

743
00:36:44,588 --> 00:36:48,400
voxel right

744
00:36:46,119 --> 00:36:53,200
the lighting voxel so our spatial

745
00:36:48,400 --> 00:36:56,440
occupancy grid size is way too tiny it

746
00:36:53,199 --> 00:36:58,149
needs to be much bigger but the only way

747
00:36:56,440 --> 00:37:02,528
we're going to be able to do that

748
00:36:58,150 --> 00:37:06,130
is by not table driving the walk so what

749
00:37:02,528 --> 00:37:11,519
I want to try to do today is I want to

750
00:37:06,130 --> 00:37:14,140
see if I can do the walk in line right

751
00:37:11,519 --> 00:37:16,809
so we find go over to the lighting and

752
00:37:14,139 --> 00:37:18,038
we look in here you can see this is what

753
00:37:16,809 --> 00:37:21,039
I'm talking about right here

754
00:37:18,039 --> 00:37:22,720
so this bit here so you can see here

755
00:37:21,039 --> 00:37:24,640
when it starts the walk it does this

756
00:37:22,719 --> 00:37:27,250
walk table thing and it grabs the walk

757
00:37:24,639 --> 00:37:32,288
table entry and then it starts walking

758
00:37:27,250 --> 00:37:34,929
through here and it grabs using the the

759
00:37:32,289 --> 00:37:36,460
grid index which it got right out of the

760
00:37:34,929 --> 00:37:44,199
walk table I believe oh wait no the grid

761
00:37:36,460 --> 00:37:52,949
index we know to begin with right man

762
00:37:44,199 --> 00:37:56,259
a lot of tissues well that sucks oh well

763
00:37:52,949 --> 00:37:59,798
so if we take a look here at what the

764
00:37:56,260 --> 00:38:01,390
the what's going to happen with the grid

765
00:37:59,798 --> 00:38:03,519
index we would need to find that somehow

766
00:38:01,389 --> 00:38:07,288
so we need some way of finding oh my god

767
00:38:03,519 --> 00:38:07,288
magic Kleenex thank you

768
00:38:19,360 --> 00:38:24,590
so we'll need to find the grid index

769
00:38:22,070 --> 00:38:26,180
somehow but that's not very difficult

770
00:38:24,590 --> 00:38:28,070
because we only have to do that once per

771
00:38:26,179 --> 00:38:29,629
bundle of samples so that's gonna be a

772
00:38:28,070 --> 00:38:32,059
pretty simple thing to do that'll just

773
00:38:29,630 --> 00:38:35,300
be like hey tell me where we are in the

774
00:38:32,059 --> 00:38:36,860
you know in the occupancy here so that's

775
00:38:35,300 --> 00:38:39,500
not going to change that'll just flow

776
00:38:36,860 --> 00:38:41,660
through properly so the only thing that

777
00:38:39,500 --> 00:38:44,239
we really need to do is figure out how

778
00:38:41,659 --> 00:38:50,719
we're gonna get these two things to

779
00:38:44,239 --> 00:38:54,889
happen in line right so what I'm gonna

780
00:38:50,719 --> 00:38:55,730
do is I'm gonna just see if I can fast

781
00:38:54,889 --> 00:38:58,879
enough

782
00:38:55,730 --> 00:39:02,960
get the compute walk table codes so this

783
00:38:58,880 --> 00:39:05,630
is the code that we were doing here can

784
00:39:02,960 --> 00:39:12,559
I get this compute walk table code to

785
00:39:05,630 --> 00:39:15,950
run fast enough in line right so

786
00:39:12,559 --> 00:39:20,440
basically what I need is this and what

787
00:39:15,949 --> 00:39:24,399
I'd like to do also is try to figure out

788
00:39:20,440 --> 00:39:27,349
the way to do this fast with out

789
00:39:24,400 --> 00:39:30,320
introducing breakage so I'd like to be

790
00:39:27,349 --> 00:39:35,480
able to test my results so what I might

791
00:39:30,320 --> 00:39:39,140
do is just copy this and say okay you

792
00:39:35,480 --> 00:39:42,650
know let's take a look at compute walk

793
00:39:39,139 --> 00:39:49,549
table fast or something like this if I

794
00:39:42,650 --> 00:39:54,099
were to not like take this desk part out

795
00:39:49,550 --> 00:39:56,510
of it so we're not going to do we're not

796
00:39:54,099 --> 00:39:59,150
we're not going to do this desk part of

797
00:39:56,510 --> 00:40:01,610
it here and instead what we're gonna do

798
00:39:59,150 --> 00:40:09,289
and we're not gonna return anything I'm

799
00:40:01,610 --> 00:40:11,570
just gonna say hey maybe I'll call that

800
00:40:09,289 --> 00:40:14,360
verify I'm just gonna say hey can we

801
00:40:11,570 --> 00:40:15,320
just verify that the results are the

802
00:40:14,360 --> 00:40:17,630
same right

803
00:40:15,320 --> 00:40:20,720
so everywhere in here that we were doing

804
00:40:17,630 --> 00:40:25,539
something to test I'm actually just

805
00:40:20,719 --> 00:40:29,939
going to do something more like this so

806
00:40:25,539 --> 00:40:34,079
we'll just say this is the T terminate

807
00:40:29,940 --> 00:40:37,559
and this is the D grid value which i

808
00:40:34,079 --> 00:40:40,650
think is what a 16 or something like

809
00:40:37,559 --> 00:40:51,000
this what's the D grid value I don't

810
00:40:40,650 --> 00:40:53,460
know it's the step so it's s 16 so it's

811
00:40:51,000 --> 00:40:56,250
an S 16 value which is exactly what I

812
00:40:53,460 --> 00:41:01,970
thought so we'll just do like a t

813
00:40:56,250 --> 00:41:07,440
terminate results and a D grid results

814
00:41:01,969 --> 00:41:10,858
those are these two things here and then

815
00:41:07,440 --> 00:41:16,318
I just want to say hey let's assert that

816
00:41:10,858 --> 00:41:23,179
these things our you know fast quote

817
00:41:16,318 --> 00:41:25,858
unquote computation is doing are correct

818
00:41:23,179 --> 00:41:27,899
so this will allow me to generate the

819
00:41:25,858 --> 00:41:30,900
table the same way that I was generating

820
00:41:27,900 --> 00:41:32,579
it and verify and then I can start

821
00:41:30,900 --> 00:41:35,869
mutating the routine into something

822
00:41:32,579 --> 00:41:38,068
faster and see if we can maintain

823
00:41:35,869 --> 00:41:40,769
accuracy while reducing the number of

824
00:41:38,068 --> 00:41:42,679
instructions and so on right just so I

825
00:41:40,769 --> 00:41:45,719
can boil it down faster that way first

826
00:41:42,679 --> 00:41:48,989
so in here if you take a look at where

827
00:41:45,719 --> 00:41:51,629
we're actually using derp I don't need

828
00:41:48,989 --> 00:41:55,709
to write that because again while this

829
00:41:51,630 --> 00:41:57,930
is something we need to access here to

830
00:41:55,710 --> 00:42:00,409
get like the radii out of here and all

831
00:41:57,929 --> 00:42:02,639
that stuff I don't need to fill out that

832
00:42:00,409 --> 00:42:06,539
destination so that doesn't need to

833
00:42:02,639 --> 00:42:08,690
happen right and I'm not returning

834
00:42:06,539 --> 00:42:12,139
anything so I'm just asserting stuff

835
00:42:08,690 --> 00:42:12,139
that's all I'm doing

836
00:42:15,239 --> 00:42:20,429
and so I should be able to just do the

837
00:42:19,619 --> 00:42:23,150
test that way

838
00:42:20,429 --> 00:42:25,730
right

839
00:42:23,150 --> 00:42:27,528
so all I'm gonna do is I'm just gonna go

840
00:42:25,730 --> 00:42:33,440
ahead and take this compute walk table

841
00:42:27,528 --> 00:42:35,420
fast and I'm gonna call it and and in

842
00:42:33,440 --> 00:42:37,130
this case since I'm just doing it in the

843
00:42:35,420 --> 00:42:38,690
lighting profiler I'm not gonna bother

844
00:42:37,130 --> 00:42:40,849
with it in the other place just gonna do

845
00:42:38,690 --> 00:42:43,220
it right here so immediately after right

846
00:42:40,849 --> 00:42:45,980
I'm just gonna call this so I'm gonna

847
00:42:43,219 --> 00:42:48,919
take this I'm gonna duplicate the call

848
00:42:45,980 --> 00:42:51,380
to do it exactly the same way that we

849
00:42:48,920 --> 00:42:53,329
were doing it and I'm just gonna call it

850
00:42:51,380 --> 00:42:58,160
like this it won't need a temporary

851
00:42:53,329 --> 00:43:03,380
nough so if I get rid of this memory

852
00:42:58,159 --> 00:43:06,170
nothing should happen right and now we

853
00:43:03,380 --> 00:43:09,920
should be good to go so in theory I can

854
00:43:06,170 --> 00:43:12,950
now run HH light prof and it will do you

855
00:43:09,920 --> 00:43:14,659
know whatever it's going to do and then

856
00:43:12,949 --> 00:43:17,509
if I went in here and intentionally

857
00:43:14,659 --> 00:43:23,480
induced an error such as Haiti

858
00:43:17,509 --> 00:43:29,420
terminates plus equals 0.2 F now if I

859
00:43:23,480 --> 00:43:31,818
run it we should get a UH fault right it

860
00:43:29,420 --> 00:43:36,739
should it should announce this failure

861
00:43:31,818 --> 00:43:37,400
somewhere okay this is actually why I

862
00:43:36,739 --> 00:43:44,179
did that

863
00:43:37,400 --> 00:43:46,450
do we have assertions turned off why did

864
00:43:44,179 --> 00:43:46,449
that

865
00:43:51,800 --> 00:44:08,180
how is that possible I'm so confused

866
00:44:01,019 --> 00:44:08,179
I mean what did I miss

867
00:44:12,019 --> 00:44:39,389
okay so here when we are in compute walk

868
00:44:20,519 --> 00:44:43,949
table fast okay so our assertions are

869
00:44:39,389 --> 00:44:46,289
turned off right now evidently right

870
00:44:43,949 --> 00:44:50,789
I mean you watched it skip straight on

871
00:44:46,289 --> 00:44:53,269
over that right someone want to tell me

872
00:44:50,789 --> 00:44:53,269
what that's about

873
00:44:53,719 --> 00:44:58,369
hand me internal and handmaid slur both

874
00:44:56,099 --> 00:44:58,369
on

875
00:45:09,329 --> 00:45:27,639
oops okay was it just a typo did I like

876
00:45:25,929 --> 00:45:29,879
accidentally not put both things in

877
00:45:27,639 --> 00:45:29,879
there

878
00:45:39,179 --> 00:45:51,210
oh no but that still would have been

879
00:45:45,599 --> 00:45:52,559
wrong so how did our assertions get

880
00:45:51,210 --> 00:45:54,360
compiled out did I do

881
00:45:52,559 --> 00:46:00,750
odhh is this the one that has the

882
00:45:54,360 --> 00:46:02,990
lighting assert turned off I don't think

883
00:46:00,750 --> 00:46:02,989
so

884
00:46:10,820 --> 00:46:17,400
there we go okay so we are just undoing

885
00:46:14,699 --> 00:46:19,859
that because since we're profiling we

886
00:46:17,400 --> 00:46:31,410
both we made sure that the assertions

887
00:46:19,860 --> 00:46:33,539
are on so okay that's all right I guess

888
00:46:31,409 --> 00:46:39,769
I'm not sure what I want to do about

889
00:46:33,539 --> 00:46:39,769
that exactly I guess I'll just

890
00:46:46,298 --> 00:47:00,268
I guess I'll just hand code it so I'm

891
00:46:58,478 --> 00:47:04,389
just gonna put in my own assert here

892
00:47:00,268 --> 00:47:13,419
like so right and then what I'll do is

893
00:47:04,389 --> 00:47:17,618
I'll just all manually fault and so this

894
00:47:13,420 --> 00:47:19,719
way now I should be sure that anytime

895
00:47:17,619 --> 00:47:24,099
there's a there's an error we fault

896
00:47:19,719 --> 00:47:27,489
in theory there we go and so if I don't

897
00:47:24,099 --> 00:47:32,798
do this now we should run clean oops we

898
00:47:27,489 --> 00:47:34,329
should run clean yeah so now I should

899
00:47:32,798 --> 00:47:38,199
have some confidence that I can measure

900
00:47:34,329 --> 00:47:40,329
I may have to do a fuzzy equals for the

901
00:47:38,199 --> 00:47:42,219
float because we may not get the exact

902
00:47:40,329 --> 00:47:44,410
same T terminate value I just want to

903
00:47:42,219 --> 00:47:46,389
make sure I get close so this may be too

904
00:47:44,409 --> 00:47:51,368
precise but we'll cross that bridge when

905
00:47:46,389 --> 00:47:57,179
we come to it so let's suppose that we

906
00:47:51,369 --> 00:48:00,278
were to take this this dim step bit here

907
00:47:57,179 --> 00:48:05,439
this we don't care about because it's

908
00:48:00,278 --> 00:48:09,068
per R a so we actually can still table

909
00:48:05,438 --> 00:48:11,739
drive that if we wanted to right so this

910
00:48:09,068 --> 00:48:14,438
can come from a table and we can so I'm

911
00:48:11,739 --> 00:48:16,208
not going to focus on that here we have

912
00:48:14,438 --> 00:48:18,518
our starting location and our T

913
00:48:16,208 --> 00:48:20,169
terminate we have our cost loop which

914
00:48:18,518 --> 00:48:23,919
will already be there we don't know all

915
00:48:20,170 --> 00:48:27,429
this stuff is fine so the first thing we

916
00:48:23,920 --> 00:48:28,838
see that needs adjustments because you

917
00:48:27,429 --> 00:48:30,429
could see here like there's actually

918
00:48:28,838 --> 00:48:34,328
almost nothing is actually even

919
00:48:30,429 --> 00:48:36,278
happening here really all we need to

920
00:48:34,329 --> 00:48:38,798
look at is this I mean that's the only

921
00:48:36,278 --> 00:48:44,199
thing that's really happening so for

922
00:48:38,798 --> 00:48:48,179
doing this walk honestly we're just

923
00:48:44,199 --> 00:48:48,179
looking at the min here right

924
00:48:53,199 --> 00:48:58,629
so we just want to know what is the

925
00:48:55,550 --> 00:48:58,630
lowest T value

926
00:49:36,349 --> 00:49:45,269
so knowing what's the lowest T value is

927
00:49:40,730 --> 00:49:47,699
a bit of a conundrum we already did one

928
00:49:45,269 --> 00:49:49,530
trick for this for the raycasting and we

929
00:49:47,699 --> 00:49:52,289
could use the same trick again and

930
00:49:49,530 --> 00:49:55,950
that's basically to just use the first

931
00:49:52,289 --> 00:49:58,739
16 bits of the float and ignore the last

932
00:49:55,949 --> 00:50:05,939
16 bits but I don't know if that's gonna

933
00:49:58,739 --> 00:50:08,129
fly here the reason I don't know if it's

934
00:50:05,940 --> 00:50:09,900
gonna fly is because stepping along the

935
00:50:08,130 --> 00:50:12,088
grid kind of needs to be correct we

936
00:50:09,900 --> 00:50:14,490
can't really afford to be just randomly

937
00:50:12,088 --> 00:50:15,989
stepping like into a place the Ray

938
00:50:14,489 --> 00:50:18,419
doesn't actually hit just because we

939
00:50:15,989 --> 00:50:23,039
didn't actually do the test accurately

940
00:50:18,420 --> 00:50:24,960
enough and you know maybe it's just it's

941
00:50:23,039 --> 00:50:27,059
fine because you'd have to be so close

942
00:50:24,960 --> 00:50:28,440
to a corner or an edge in order for that

943
00:50:27,059 --> 00:50:33,929
to tap it doesn't matter which one you

944
00:50:28,440 --> 00:50:35,909
step into first so it's really tough to

945
00:50:33,929 --> 00:50:37,108
say that's a really tough call to say

946
00:50:35,909 --> 00:50:38,940
and we'd have to actually go do some

947
00:50:37,108 --> 00:50:48,059
testing to figure out to be completely

948
00:50:38,940 --> 00:50:51,780
honest however what I will say is we do

949
00:50:48,059 --> 00:50:54,630
have a test now like I'm running this

950
00:50:51,780 --> 00:50:56,550
almost as a unit test honestly so I can

951
00:50:54,630 --> 00:50:59,220
kind of just party on it if I want to

952
00:50:56,550 --> 00:51:01,230
and if it never triggers then I know

953
00:50:59,219 --> 00:51:08,159
it's no worse than the previous one for

954
00:51:01,230 --> 00:51:16,170
the cases we actually are using right so

955
00:51:08,159 --> 00:51:18,539
could do could do that so maybe I will

956
00:51:16,170 --> 00:51:22,619
try it I'm gonna start by not doing that

957
00:51:18,539 --> 00:51:28,460
because I want to make this be a little

958
00:51:22,619 --> 00:51:33,510
bit I want to do this in steps but okay

959
00:51:28,460 --> 00:51:35,250
you know sure so let's see how fast I

960
00:51:33,510 --> 00:51:37,560
could actually make this routine if you

961
00:51:35,250 --> 00:51:40,019
take a look here I probably you just

962
00:51:37,559 --> 00:51:41,338
want to do this three wide I can't

963
00:51:40,019 --> 00:51:45,079
really do it for wide because there

964
00:51:41,338 --> 00:51:48,529
aren't four things to do that I can see

965
00:51:45,079 --> 00:51:52,039
so what I would probably say is if you

966
00:51:48,530 --> 00:51:54,380
look at seldom and at these can just be

967
00:51:52,039 --> 00:51:58,820
vectored up so I can just say look

968
00:51:54,380 --> 00:52:04,450
there's going to be a seldom for and an

969
00:51:58,820 --> 00:52:08,330
at for and these are just going to be

970
00:52:04,449 --> 00:52:11,689
you know kept in registers because they

971
00:52:08,329 --> 00:52:15,139
they can be and then there's going to be

972
00:52:11,690 --> 00:52:17,690
a radius so we're gonna have the Ray

973
00:52:15,139 --> 00:52:22,940
direction and the at and the seldom as

974
00:52:17,690 --> 00:52:24,860
things that we just save and to do that

975
00:52:22,940 --> 00:52:29,500
it's pretty simple because we have these

976
00:52:24,860 --> 00:52:36,349
values so I can just load up the the at

977
00:52:29,500 --> 00:52:40,130
as you know sort of a a vector where I

978
00:52:36,349 --> 00:52:46,940
just keep the last Lane 0 I can do the

979
00:52:40,130 --> 00:52:56,599
same thing for the raid erection and the

980
00:52:46,940 --> 00:53:05,510
same thing for the seldom right and so

981
00:52:56,599 --> 00:53:07,849
at that point this which used to be six

982
00:53:05,510 --> 00:53:11,900
instructions will become two so that's

983
00:53:07,849 --> 00:53:20,618
nice right I can just say okay seldom

984
00:53:11,900 --> 00:53:29,150
for - at for / ready for is our new like

985
00:53:20,619 --> 00:53:31,940
T from T four it's our new like set of T

986
00:53:29,150 --> 00:53:36,430
values so this loop over the dim indexes

987
00:53:31,940 --> 00:53:38,990
doesn't actually have to happen right so

988
00:53:36,429 --> 00:53:41,779
then what I could do is say well now

989
00:53:38,989 --> 00:53:43,879
let's just look at what we're actually

990
00:53:41,780 --> 00:53:48,290
going to get there and say okay so

991
00:53:43,880 --> 00:53:52,730
suppose we then said yeah there's gonna

992
00:53:48,289 --> 00:53:56,779
be like a T this value and that's just

993
00:53:52,730 --> 00:54:00,309
going to be the extraction of each of

994
00:53:56,780 --> 00:54:00,310
these so we'll do an extract

995
00:54:00,880 --> 00:54:09,259
of t4 and extract one of t4 and an

996
00:54:06,528 --> 00:54:11,329
extract two of t4 and I believe I

997
00:54:09,259 --> 00:54:15,588
rewrote these to kind of do that or

998
00:54:11,329 --> 00:54:19,329
something right I don't remember how we

999
00:54:15,588 --> 00:54:31,730
actually looked at these but it's

1000
00:54:19,329 --> 00:54:31,999
something like this what is it there it

1001
00:54:31,730 --> 00:54:45,739
is

1002
00:54:31,998 --> 00:54:49,788
so it's convert f/32 and so again none

1003
00:54:45,739 --> 00:54:51,889
of that's necessary in in actuality but

1004
00:54:49,789 --> 00:54:53,980
I just want to take it one step at a

1005
00:54:51,889 --> 00:54:57,048
time so I want to make sure we can do it

1006
00:54:53,980 --> 00:54:58,909
using the the same kind of divide thing

1007
00:54:57,048 --> 00:55:02,659
so now we can just get rid of that and

1008
00:54:58,909 --> 00:55:05,480
replace in this loop a use of T this

1009
00:55:02,659 --> 00:55:07,429
with dim index and then in theory this

1010
00:55:05,480 --> 00:55:09,139
should run the same way and I may have

1011
00:55:07,429 --> 00:55:10,788
to make those float compares fuzzy

1012
00:55:09,139 --> 00:55:15,379
because again we're kind of changing how

1013
00:55:10,789 --> 00:55:17,269
they're done and so we'll see if I need

1014
00:55:15,380 --> 00:55:19,039
to give them some tolerance here

1015
00:55:17,268 --> 00:55:21,018
but first I'm just gonna see and make

1016
00:55:19,039 --> 00:55:22,009
sure cuz I could just not be doing this

1017
00:55:21,018 --> 00:55:24,108
right let me just make sure I got a

1018
00:55:22,009 --> 00:55:26,298
clean compiler so I want to make sure

1019
00:55:24,108 --> 00:55:28,038
that that I actually look at the values

1020
00:55:26,298 --> 00:55:32,748
first before I assume that I need some

1021
00:55:28,039 --> 00:55:36,470
fuzzy float in there okay so if we take

1022
00:55:32,748 --> 00:55:39,230
a look at the verify for verify index

1023
00:55:36,469 --> 00:55:41,778
here and we just take a look at what

1024
00:55:39,230 --> 00:55:44,960
these values actually need to be versus

1025
00:55:41,778 --> 00:55:46,548
what they are yes you can see that

1026
00:55:44,960 --> 00:55:49,579
that's like totally wrong so we're still

1027
00:55:46,548 --> 00:55:51,559
a little bit off here so the question is

1028
00:55:49,579 --> 00:55:53,930
what did I what did I screw up there

1029
00:55:51,559 --> 00:55:55,039
right cuz it seems like that should have

1030
00:55:53,929 --> 00:55:59,078
been fairly straightforward but I

1031
00:55:55,039 --> 00:55:59,079
obviously did not do it right right

1032
00:56:02,409 --> 00:56:09,379
looking

1033
00:56:05,030 --> 00:56:12,440
the values it's pretty clear that I just

1034
00:56:09,380 --> 00:56:16,190
kind of brain farted there so you can't

1035
00:56:12,440 --> 00:56:28,730
just do this obviously right like I need

1036
00:56:16,190 --> 00:56:33,769
to update the I need to actually update

1037
00:56:28,730 --> 00:56:41,449
the at four you know I'm saying so like

1038
00:56:33,769 --> 00:56:45,769
I don't really know how that should be

1039
00:56:41,449 --> 00:56:47,779
done it may need to be done a little

1040
00:56:45,769 --> 00:56:50,780
more cleverly for right now I'm gonna do

1041
00:56:47,780 --> 00:56:57,170
this and then we'll work on how we're

1042
00:56:50,780 --> 00:56:58,700
gonna do that okay so it looks like we

1043
00:56:57,170 --> 00:57:01,460
don't need a fuzzy fluke compare there

1044
00:56:58,699 --> 00:57:04,819
it looks like that produced exactly the

1045
00:57:01,460 --> 00:57:07,159
same answer so that's good but let's

1046
00:57:04,820 --> 00:57:11,530
continue to take this a little bit

1047
00:57:07,159 --> 00:57:13,909
further before we do anything before we

1048
00:57:11,530 --> 00:57:19,180
take a look at the app for part of

1049
00:57:13,909 --> 00:57:21,379
things so this stuff is pretty fast like

1050
00:57:19,179 --> 00:57:35,750
this part can be made fast obviously

1051
00:57:21,380 --> 00:57:38,358
this part is less so so that's going to

1052
00:57:35,750 --> 00:57:40,969
be require some thought but this part

1053
00:57:38,358 --> 00:57:43,400
right here where we downshift I feel

1054
00:57:40,969 --> 00:57:47,838
like that's something we can work on so

1055
00:57:43,400 --> 00:57:52,389
if we take a look at how we pick out

1056
00:57:47,838 --> 00:57:52,389
that dim index that may give us a clue

1057
00:57:52,900 --> 00:58:00,170
and I'm kind of trying to think in my

1058
00:57:57,079 --> 00:58:02,420
head also like how this is gonna work

1059
00:58:00,170 --> 00:58:05,539
long term so you can you could see how

1060
00:58:02,420 --> 00:58:13,550
seldom we would want to do a mask out

1061
00:58:05,539 --> 00:58:16,190
here this wants to be a replicates so

1062
00:58:13,550 --> 00:58:19,570
I'm just trying to figure out like what

1063
00:58:16,190 --> 00:58:19,570
I would actually need

1064
00:58:38,449 --> 00:58:51,088
and it's a little bit tough so the step

1065
00:58:44,159 --> 00:58:55,049
value right now is like a table driven

1066
00:58:51,088 --> 00:58:58,380
thing right so the step value comes out

1067
00:58:55,050 --> 00:59:02,010
of a table and we need the index of zero

1068
00:58:58,380 --> 00:59:07,280
one or two to figure out what that D

1069
00:59:02,010 --> 00:59:07,280
grid results is going to be right

1070
00:59:26,739 --> 00:59:32,689
yeah it's just a little tricky I'm gonna

1071
00:59:30,768 --> 00:59:36,919
start by just doing that compare because

1072
00:59:32,690 --> 00:59:40,880
I'm just not I'm not feeling it right

1073
00:59:36,920 --> 00:59:42,950
now I'm not sure how I want to I'm not

1074
00:59:40,880 --> 00:59:44,720
I'm not immediately like leaping to like

1075
00:59:42,949 --> 00:59:49,129
I kind of know how I want to attack this

1076
00:59:44,719 --> 00:59:54,348
so I may sort of do a little fancy dance

1077
00:59:49,130 --> 00:59:56,390
and you know put on put on my my large

1078
00:59:54,349 --> 00:59:57,499
pantaloons and just kind of like sauce

1079
00:59:56,389 --> 01:00:00,699
around for a little bit

1080
00:59:57,498 --> 01:00:03,679
to see where it takes me

1081
01:00:00,699 --> 01:00:05,748
you saw how we did this before

1082
01:00:03,679 --> 01:00:10,489
it was kind of a little like cleverness

1083
01:00:05,748 --> 01:00:13,848
here where we kind of did this this age

1084
01:00:10,489 --> 01:00:15,578
comp shuffler nonsense where I did a you

1085
01:00:13,849 --> 01:00:19,309
know a horizontal compare and all this

1086
01:00:15,579 --> 01:00:25,190
and all this stuff we could do a similar

1087
01:00:19,309 --> 01:00:27,170
trick right we could do this and get the

1088
01:00:25,190 --> 01:00:36,858
answer out this way right like I could

1089
01:00:27,170 --> 01:00:38,778
say hey just do a 1 shuffle right so

1090
01:00:36,858 --> 01:00:40,278
this is like one instruction and then do

1091
01:00:38,778 --> 01:00:41,900
the min pause which is one instruction

1092
01:00:40,278 --> 01:00:43,869
and the extract which is one instruction

1093
01:00:41,900 --> 01:00:47,778
so three instructions and get them in

1094
01:00:43,869 --> 01:00:52,220
into a general purpose register we could

1095
01:00:47,778 --> 01:00:57,278
try that that should give the best dim

1096
01:00:52,219 --> 01:01:02,288
answer directly which is kind of handy

1097
01:00:57,278 --> 01:01:05,509
again don't really know if it will work

1098
01:01:02,289 --> 01:01:07,849
it may not be precise enough I really

1099
01:01:05,509 --> 01:01:11,630
don't know but that's what we're gonna

1100
01:01:07,849 --> 01:01:16,309
try anyway and so if we get best dim out

1101
01:01:11,630 --> 01:01:20,690
here then in theory we should be able to

1102
01:01:16,309 --> 01:01:23,420
just to get that T best we should be

1103
01:01:20,690 --> 01:01:24,588
able to do another shuffle but in this

1104
01:01:23,420 --> 01:01:27,528
case I'm not really going to bother

1105
01:01:24,588 --> 01:01:31,599
quite yet I'm just gonna say alright

1106
01:01:27,528 --> 01:01:31,599
we'll take the T we'll take the actual

1107
01:01:32,079 --> 01:01:39,220
extract I think we can do this in just

1108
01:01:35,748 --> 01:01:39,219
the slow way like hey

1109
01:01:41,570 --> 01:01:48,050
give me the the best DeMuth value right

1110
01:01:58,159 --> 01:02:05,608
okay so I think this is possibly

1111
01:02:04,679 --> 01:02:07,710
something that will work

1112
01:02:05,608 --> 01:02:09,929
I don't really know we're gonna use t4

1113
01:02:07,710 --> 01:02:12,300
for this here and the H comp shelter is

1114
01:02:09,929 --> 01:02:16,169
what it is everything else should be

1115
01:02:12,300 --> 01:02:21,109
roughly the same let's just do that

1116
01:02:16,170 --> 01:02:21,108
in fact I think can we even just do this

1117
01:02:22,820 --> 01:02:31,079
yeah so we'll give it a shot

1118
01:02:27,449 --> 01:02:33,358
I'm not optimistic about it but we'll

1119
01:02:31,079 --> 01:02:36,599
see what happens so let's see how far

1120
01:02:33,358 --> 01:02:40,529
off we are on on this stuff

1121
01:02:36,599 --> 01:02:46,559
what's this is called D grid results and

1122
01:02:40,530 --> 01:02:48,960
to terminate results like so so what's

1123
01:02:46,559 --> 01:02:51,750
interesting about that is we're getting

1124
01:02:48,960 --> 01:02:58,079
the right to terminate value but not the

1125
01:02:51,750 --> 01:03:00,588
right best dim here somehow so what's

1126
01:02:58,079 --> 01:03:00,589
the deal there

1127
01:03:16,570 --> 01:03:22,190
so a couple things about this one I

1128
01:03:19,550 --> 01:03:24,530
realize we didn't account for the spare

1129
01:03:22,190 --> 01:03:30,619
Lane so probably we're gonna have to

1130
01:03:24,530 --> 01:03:34,280
remove that 14 15 so actually I probably

1131
01:03:30,619 --> 01:03:37,730
should fix that before we go any further

1132
01:03:34,280 --> 01:03:40,310
that doesn't look like this bug but we

1133
01:03:37,730 --> 01:03:43,309
can't actually test the final lane the

1134
01:03:40,309 --> 01:03:44,630
final Lane has to be not there that's

1135
01:03:43,309 --> 01:03:46,509
probably already game taken care of by

1136
01:03:44,630 --> 01:03:49,190
like Mans or something anyway because

1137
01:03:46,510 --> 01:03:50,840
now actually wouldn't yeah it would

1138
01:03:49,190 --> 01:03:58,960
because we divided by zero like this

1139
01:03:50,840 --> 01:03:58,960
this is a divide by zero right here so

1140
01:03:58,989 --> 01:04:06,889
in fact just to avoid that we could well

1141
01:04:04,250 --> 01:04:09,920
no because we know that the radio that

1142
01:04:06,889 --> 01:04:16,159
we're dividing by here any of those

1143
01:04:09,920 --> 01:04:17,750
could be zero right so actually probably

1144
01:04:16,159 --> 01:04:28,699
what we would want to do here is

1145
01:04:17,750 --> 01:04:29,780
actually make this be an envy so we

1146
01:04:28,699 --> 01:04:32,509
probably actually want to do that I'm

1147
01:04:29,780 --> 01:04:34,790
not gonna do that yet but I do want to

1148
01:04:32,510 --> 01:04:37,220
do that eventually okay so what I would

1149
01:04:34,789 --> 01:04:39,679
also like to do is I'd like to run this

1150
01:04:37,219 --> 01:04:41,929
so I can have the values from it so for

1151
01:04:39,679 --> 01:04:45,500
example I would like to know like a T

1152
01:04:41,929 --> 01:04:50,119
best ref and a best dim ref so I'd like

1153
01:04:45,500 --> 01:04:53,269
to keep track of these values just

1154
01:04:50,119 --> 01:04:54,859
because that will help me compare and

1155
01:04:53,269 --> 01:04:56,389
see what the answer should have been and

1156
01:04:54,860 --> 01:05:00,079
why am I getting a different answer

1157
01:04:56,389 --> 01:05:02,960
right so I just gonna take a look at

1158
01:05:00,079 --> 01:05:05,989
these so if I look at T best ref and

1159
01:05:02,960 --> 01:05:11,510
then I look at T best they're actually

1160
01:05:05,989 --> 01:05:14,179
different so that looks like you know an

1161
01:05:11,510 --> 01:05:17,450
issue probably the issue that we're

1162
01:05:14,179 --> 01:05:20,659
having if I look at best dim and best

1163
01:05:17,449 --> 01:05:23,750
dim ref you can see that that you know

1164
01:05:20,659 --> 01:05:26,589
they're different I'm curious to know

1165
01:05:23,750 --> 01:05:26,590
what number were on

1166
01:05:29,889 --> 01:05:35,719
so it looks like this is just wrong in

1167
01:05:34,369 --> 01:05:37,609
other words we didn't have to it's not

1168
01:05:35,719 --> 01:05:39,079
like we got to some subtlety right like

1169
01:05:37,610 --> 01:05:41,150
we were like I we you know we stepped a

1170
01:05:39,079 --> 01:05:43,460
long way and and and then we found this

1171
01:05:41,150 --> 01:05:45,740
like one edge case we did get through

1172
01:05:43,460 --> 01:05:49,880
the first three but eventually we got to

1173
01:05:45,739 --> 01:05:53,269
one then and it wasn't sufficient again

1174
01:05:49,880 --> 01:05:56,240
that could be the case that actually

1175
01:05:53,269 --> 01:05:59,719
there's nothing to erroneous here but

1176
01:05:56,239 --> 01:06:15,079
the precision of that comparison is just

1177
01:05:59,719 --> 01:06:18,609
not sufficient so so I'm going to have

1178
01:06:15,079 --> 01:06:18,610
to do something fancier

1179
01:06:18,739 --> 01:06:21,879
[Applause]

1180
01:06:56,179 --> 01:07:16,019
so I really don't know how I want to do

1181
01:06:58,650 --> 01:07:17,880
this and it's not sure I need to have

1182
01:07:16,019 --> 01:07:22,019
some way of finding out which of the

1183
01:07:17,880 --> 01:07:25,519
values in here is the smallest and I

1184
01:07:22,019 --> 01:07:28,980
don't really know how I would do that

1185
01:07:25,519 --> 01:07:32,070
the brute force method is I can

1186
01:07:28,980 --> 01:07:35,240
replicate the values into another

1187
01:07:32,070 --> 01:07:39,240
register with them Swizzle de round and

1188
01:07:35,239 --> 01:07:42,119
then I do a comparison and then I masked

1189
01:07:39,239 --> 01:07:43,649
move the comparison and then I look that

1190
01:07:42,119 --> 01:07:51,809
up in a table to get me the actual

1191
01:07:43,650 --> 01:08:01,460
lookup value so you know is it fantastic

1192
01:07:51,809 --> 01:08:03,869
no would it possibly work a pop maybe

1193
01:08:01,460 --> 01:08:06,599
would it be fast enough maybe I don't

1194
01:08:03,869 --> 01:08:09,539
know if we look at what I actually need

1195
01:08:06,599 --> 01:08:15,019
to do the other thing I could try to do

1196
01:08:09,539 --> 01:08:20,850
here is produce these values correctly

1197
01:08:15,019 --> 01:08:24,630
more directly and this one is pretty

1198
01:08:20,850 --> 01:08:26,430
straightforward so I would never have to

1199
01:08:24,630 --> 01:08:33,920
actually extract to get this one I could

1200
01:08:26,430 --> 01:08:33,920
just mask and combine the T values

1201
01:08:54,289 --> 01:09:06,619
but I am not sure you can see why I was

1202
01:09:02,819 --> 01:09:06,620
worried about this routine right like

1203
01:09:12,189 --> 01:09:21,879
so here's another thought maybe I'm

1204
01:09:18,949 --> 01:09:21,880
doing this the wrong way

1205
01:09:28,390 --> 01:09:35,600
maybe I really want to do more this out

1206
01:09:31,850 --> 01:09:37,910
on the scatter pipe anyway because

1207
01:09:35,600 --> 01:09:39,410
what's that pipe doing well the rest of

1208
01:09:37,909 --> 01:09:49,130
that routine has all of these

1209
01:09:39,409 --> 01:09:50,719
floating-point operations all up ons so

1210
01:09:49,130 --> 01:09:54,289
it could be that the goal here is not

1211
01:09:50,719 --> 01:09:57,020
actually to do it or to keep it wide

1212
01:09:54,289 --> 01:09:59,420
it's to do the minimal amount of work in

1213
01:09:57,020 --> 01:10:01,430
the sse and then just try to transit it

1214
01:09:59,420 --> 01:10:06,859
out to a general purpose register right

1215
01:10:01,430 --> 01:10:10,630
I mean you know the problem that I see

1216
01:10:06,859 --> 01:10:12,619
is just like it really wants to be float

1217
01:10:10,630 --> 01:10:16,310
so I don't know that that's really

1218
01:10:12,619 --> 01:10:19,099
possible because it's like look the the

1219
01:10:16,310 --> 01:10:22,640
main thing we're doing is actually this

1220
01:10:19,100 --> 01:10:23,750
like yes we do need this one value to

1221
01:10:22,640 --> 01:10:25,969
come out into the general purpose

1222
01:10:23,750 --> 01:10:28,010
registers to do stepping but everything

1223
01:10:25,969 --> 01:10:30,350
else is just happening in float so it

1224
01:10:28,010 --> 01:10:32,500
really does kind of want to be wide you

1225
01:10:30,350 --> 01:10:32,500
know

1226
01:10:43,179 --> 01:10:47,690
well I guess we just gotta get started

1227
01:10:46,039 --> 01:10:49,399
on it I mean I don't know I'm not I'm

1228
01:10:47,689 --> 01:10:52,129
sorry I'm just not seeing anything fancy

1229
01:10:49,399 --> 01:10:53,869
here it's not really my strong suit like

1230
01:10:52,130 --> 01:10:56,859
cross compares are not really my strong

1231
01:10:53,869 --> 01:11:01,010
suit I'm not super good with those

1232
01:10:56,859 --> 01:11:04,809
haven't ever really like done routines

1233
01:11:01,010 --> 01:11:04,810
that are that rely heavily on those

1234
01:11:20,979 --> 01:11:29,859
so wait where is this min pause oh it's

1235
01:11:26,810 --> 01:11:29,860
down at the bottom yeah

1236
01:11:49,029 --> 01:11:54,889
so one thing I wonder a little bit is I

1237
01:11:53,119 --> 01:11:59,119
wonder if you could somehow use two of

1238
01:11:54,890 --> 01:12:02,320
these to extract the value like I wonder

1239
01:11:59,119 --> 01:12:02,319
if there's some way

1240
01:12:18,449 --> 01:12:32,569
you know what I think there is so riddle

1241
01:12:23,939 --> 01:12:42,210
me this Batman if I were to first do a

1242
01:12:32,569 --> 01:12:46,799
comparison in epu 16 to see oh yeah this

1243
01:12:42,210 --> 01:13:00,810
would work is it a good idea I don't

1244
01:12:46,800 --> 01:13:04,369
know is it a good idea I don't know but

1245
01:13:00,810 --> 01:13:04,370
but I mean

1246
01:13:10,270 --> 01:13:21,760
it kind of might be so suppose you had

1247
01:13:15,789 --> 01:13:27,970
to age cops huh fleurs right so you're

1248
01:13:21,760 --> 01:13:29,920
looking at the high bits here and the

1249
01:13:27,970 --> 01:13:30,520
problem that you have is sometimes those

1250
01:13:29,920 --> 01:13:33,279
high bits

1251
01:13:30,520 --> 01:13:40,420
compare for equivalence and you'd like

1252
01:13:33,279 --> 01:13:52,239
it to test the bottom right so suppose I

1253
01:13:40,420 --> 01:14:01,300
did this something like that so what if

1254
01:13:52,239 --> 01:14:04,239
I said H comp I and H comp low so if I

1255
01:14:01,300 --> 01:14:11,529
did two shuffles to put these into place

1256
01:14:04,239 --> 01:14:17,489
so this is actually 0 &amp; 1 now 4 &amp; 5 8 &amp;

1257
01:14:11,529 --> 01:14:25,269
9 and then these are just 0 1 0 1 0 1 0

1258
01:14:17,489 --> 01:14:26,710
1 0 1 so if I did two of those shuffles

1259
01:14:25,270 --> 01:14:29,800
which is not great because that's two

1260
01:14:26,710 --> 01:14:31,390
cycles those have to issue sequentially

1261
01:14:29,800 --> 01:14:35,500
because they're both going to happen on

1262
01:14:31,390 --> 01:14:38,710
part 5 which is ugly but so those two

1263
01:14:35,500 --> 01:14:43,750
happens sequentially and then I could

1264
01:14:38,710 --> 01:14:49,409
say well if there's equivalence in some

1265
01:14:43,750 --> 01:14:49,409
of these things then I'm asked

1266
01:14:55,659 --> 01:14:59,289
of course now as I'm saying this now I'm

1267
01:14:57,640 --> 01:15:00,369
realizing that stupid because how did I

1268
01:14:59,289 --> 01:15:01,840
know they were equivalent because in

1269
01:15:00,369 --> 01:15:03,550
order to get masks into the channel

1270
01:15:01,840 --> 01:15:14,860
first I would have had to do a compare

1271
01:15:03,550 --> 01:15:21,760
anyway all right that was dumb they're

1272
01:15:14,859 --> 01:15:23,139
mine take it all back you go so so I'm

1273
01:15:21,760 --> 01:15:24,699
gonna say as well you could just do when

1274
01:15:23,140 --> 01:15:29,560
they're equivalent we just compared the

1275
01:15:24,699 --> 01:15:32,409
low 16 but how do you actually get a

1276
01:15:29,560 --> 01:15:33,940
mask into that Channel right because in

1277
01:15:32,409 --> 01:15:35,409
order to know that they compared

1278
01:15:33,939 --> 01:15:37,809
equivalent you would have had to have

1279
01:15:35,409 --> 01:15:39,159
lined them up to do equivalence compares

1280
01:15:37,810 --> 01:15:52,870
and that's exactly the thing that I'm

1281
01:15:39,159 --> 01:15:56,260
trying to avoid right so not great not

1282
01:15:52,869 --> 01:15:58,029
great all right so yeah I think we're

1283
01:15:56,260 --> 01:16:00,070
just we're in the position of half to

1284
01:15:58,029 --> 01:16:04,449
figure out something that's going to be

1285
01:16:00,069 --> 01:16:06,130
a little bit more costly involve more

1286
01:16:04,449 --> 01:16:11,470
shuffling unless there's something that

1287
01:16:06,130 --> 01:16:14,829
I'm missing so if we have a t4 here that

1288
01:16:11,470 --> 01:16:19,480
we've produced it's free for us to

1289
01:16:14,829 --> 01:16:20,890
reproduce one additional value in here

1290
01:16:19,479 --> 01:16:22,029
so I'm just gonna it doesn't matter

1291
01:16:20,890 --> 01:16:25,150
which one it is

1292
01:16:22,029 --> 01:16:28,689
I'm just gonna end up using X because

1293
01:16:25,149 --> 01:16:31,119
there's really no reason not to do that

1294
01:16:28,689 --> 01:16:36,279
so I'll get one extra channel out of it

1295
01:16:31,119 --> 01:16:40,180
and then when we do our shuffle I can

1296
01:16:36,279 --> 01:16:43,359
produce four comparisons at once and you

1297
01:16:40,180 --> 01:16:46,900
know we can then use the mask of that to

1298
01:16:43,359 --> 01:16:53,189
probably tell us what we need to know so

1299
01:16:46,899 --> 01:16:53,189
if in here I say okay you know at four

1300
01:16:53,340 --> 01:17:03,550
I'm sorry not at four F 3/2 X t4 like

1301
01:17:00,100 --> 01:17:08,079
shuffle or something and I do a shuffle

1302
01:17:03,550 --> 01:17:09,159
for X of T 4 and here what I need to do

1303
01:17:08,079 --> 01:17:11,439
is just produce

1304
01:17:09,159 --> 01:17:14,319
comparison so you know I don't know what

1305
01:17:11,439 --> 01:17:25,029
it would actually be but probably

1306
01:17:14,319 --> 01:17:27,789
something like that maybe we'll see what

1307
01:17:25,029 --> 01:17:29,769
we actually want in a second but here's

1308
01:17:27,789 --> 01:17:33,699
where we'll actually get our comparison

1309
01:17:29,770 --> 01:17:37,930
so this is our like min comp here where

1310
01:17:33,699 --> 01:17:41,979
we would do like teeth for oops I have a

1311
01:17:37,930 --> 01:17:45,130
bad keyboard alignment day so there's

1312
01:17:41,979 --> 01:17:49,269
our comparison and then we would mask

1313
01:17:45,130 --> 01:17:57,310
mob fat right so we would say our sorry

1314
01:17:49,270 --> 01:18:09,400
move mask that this is really just a you

1315
01:17:57,310 --> 01:18:12,130
ate right but oh well so if we take a

1316
01:18:09,399 --> 01:18:17,469
look at what we need for this comp mask

1317
01:18:12,130 --> 01:18:18,819
we should be able to do you know you

1318
01:18:17,470 --> 01:18:21,340
look at that it's like okay so we have

1319
01:18:18,819 --> 01:18:23,710
to do one shuffle one compare one move

1320
01:18:21,340 --> 01:18:28,029
mask and then we have a table and we

1321
01:18:23,710 --> 01:18:30,220
look up in the table if I can make that

1322
01:18:28,029 --> 01:18:31,960
work relatively well then we should be

1323
01:18:30,220 --> 01:18:34,210
okay and in fact you know maybe that

1324
01:18:31,960 --> 01:18:36,189
argues against doing this sort of fancy

1325
01:18:34,210 --> 01:18:39,569
trickery here because it might end up

1326
01:18:36,189 --> 01:18:39,569
being exactly the same instructions

1327
01:18:41,909 --> 01:18:47,489
right I mean

1328
01:18:52,199 --> 01:18:59,880
yeah you know I'm saying so if you look

1329
01:18:57,239 --> 01:19:01,949
at how this is doing it you know this it

1330
01:18:59,880 --> 01:19:03,659
comes up with a better answer like it

1331
01:19:01,949 --> 01:19:05,909
actually gives you the actual answer so

1332
01:19:03,659 --> 01:19:09,239
you know your tables are smaller so like

1333
01:19:05,909 --> 01:19:13,349
this table for example is only four

1334
01:19:09,239 --> 01:19:15,059
entries long but if we were to do it the

1335
01:19:13,350 --> 01:19:23,670
other way it would be like 16 entries

1336
01:19:15,060 --> 01:19:26,340
long you know potentially so it's saved

1337
01:19:23,670 --> 01:19:31,079
some space but it's not as accurate so

1338
01:19:26,340 --> 01:19:34,369
I'm not sure I'm not sure we really want

1339
01:19:31,079 --> 01:19:34,369
to do the fancy footwork

1340
01:19:39,229 --> 01:19:47,129
so we'll see anyway let's see how this

1341
01:19:42,720 --> 01:19:49,320
goes so we're getting rid of this the h

1342
01:19:47,130 --> 01:19:53,489
comp shuffler here is it's not gonna

1343
01:19:49,319 --> 01:19:57,299
happen right so what I need to do now is

1344
01:19:53,489 --> 01:20:01,469
I need to find some way of getting the

1345
01:19:57,300 --> 01:20:04,050
answer out though and so that takes a

1346
01:20:01,470 --> 01:20:05,909
little bit more work here and so what

1347
01:20:04,050 --> 01:20:08,190
we're gonna have to do is have some

1348
01:20:05,909 --> 01:20:09,960
table that tells us what the answer is

1349
01:20:08,189 --> 01:20:15,059
and if you look at how we would do this

1350
01:20:09,960 --> 01:20:18,689
normally we would say look if you know

1351
01:20:15,060 --> 01:20:25,110
addicts is less than @y then if add X is

1352
01:20:18,689 --> 01:20:32,639
less than at Z best equals 0

1353
01:20:25,109 --> 01:20:35,699
best equals me best equals to right and

1354
01:20:32,640 --> 01:20:45,710
then in the other branch we would say if

1355
01:20:35,699 --> 01:20:48,720
at Y is less than at C right

1356
01:20:45,710 --> 01:20:51,600
so it looks like to be completely honest

1357
01:20:48,720 --> 01:20:54,900
with you we probably only really need

1358
01:20:51,600 --> 01:20:57,000
three compares there so honestly we

1359
01:20:54,899 --> 01:21:01,319
don't even need the final Channel it

1360
01:20:57,000 --> 01:21:03,760
looks like I mean am I wrong so it looks

1361
01:21:01,319 --> 01:21:07,750
like we only really need three compares

1362
01:21:03,760 --> 01:21:12,369
and so what we could do is just say well

1363
01:21:07,750 --> 01:21:14,859
okay so you know if we actually just did

1364
01:21:12,369 --> 01:21:18,460
it this way and then we wanted to do the

1365
01:21:14,859 --> 01:21:22,809
shuffle we need X to be compared against

1366
01:21:18,460 --> 01:21:25,449
Y &amp; Z and then we need Y to be compared

1367
01:21:22,810 --> 01:21:27,910
against Z right oh well actually I mean

1368
01:21:25,449 --> 01:21:31,899
I guess we kind of do and in fact I

1369
01:21:27,909 --> 01:21:33,609
guess can we just do this with well no I

1370
01:21:31,899 --> 01:21:35,109
guess we can't remember so I guess we

1371
01:21:33,609 --> 01:21:38,049
kind of do want that because then we can

1372
01:21:35,109 --> 01:21:40,119
save one shuffle because if we want X to

1373
01:21:38,050 --> 01:21:47,619
be compared to two different things then

1374
01:21:40,119 --> 01:21:49,659
we can do this way there might be some

1375
01:21:47,619 --> 01:21:52,680
way we next we can so we need at least

1376
01:21:49,659 --> 01:21:58,059
one of these to be duplicated right so

1377
01:21:52,680 --> 01:22:01,420
yeah we need at least one of them to be

1378
01:21:58,060 --> 01:22:03,850
duplicated so I think I think that's

1379
01:22:01,420 --> 01:22:07,329
fine there might be some other way to do

1380
01:22:03,850 --> 01:22:10,230
it trying to think if there's another

1381
01:22:07,329 --> 01:22:10,229
rephrase this

1382
01:22:22,810 --> 01:22:28,570
I think that's right so anyway if I do

1383
01:22:25,869 --> 01:22:33,699
the shuffle this would want the addicts

1384
01:22:28,569 --> 01:22:38,349
and the @y compare would be here the @ y

1385
01:22:33,699 --> 01:22:41,319
@ z compare would be here and then we

1386
01:22:38,350 --> 01:22:44,650
just need an X Z compare which would

1387
01:22:41,319 --> 01:22:46,689
just be this one right so I think that

1388
01:22:44,649 --> 01:23:01,299
gives me what I want and then my table

1389
01:22:46,689 --> 01:23:02,799
can be derived just from that right so

1390
01:23:01,300 --> 01:23:04,900
at that point I think you'd probably

1391
01:23:02,800 --> 01:23:06,369
want these to be interleaved differently

1392
01:23:04,899 --> 01:23:09,250
because you'd want to just get rid of

1393
01:23:06,369 --> 01:23:11,649
the final mass values so you want to

1394
01:23:09,250 --> 01:23:13,810
just have nothing in that fourth channel

1395
01:23:11,649 --> 01:23:19,599
so you probably actually want your thing

1396
01:23:13,810 --> 01:23:24,310
to be interleaved as XY XZ that looks

1397
01:23:19,600 --> 01:23:25,600
like the more efficient packing in I

1398
01:23:24,310 --> 01:23:29,350
mean I could be wrong but that just

1399
01:23:25,600 --> 01:23:36,430
looks like what's right so the XY XZ XY

1400
01:23:29,350 --> 01:23:43,260
XZ XY XZ in everything and so then what

1401
01:23:36,430 --> 01:23:46,380
we would do is we'd say it's X Y X Z so

1402
01:23:43,260 --> 01:23:48,430
t-this now is that extraction which will

1403
01:23:46,380 --> 01:23:52,449
deal with whether we ever want to do

1404
01:23:48,430 --> 01:23:57,820
that extraction later but here's our our

1405
01:23:52,449 --> 01:24:00,279
actual comp it's just t4 less t4 s and

1406
01:23:57,819 --> 01:24:07,569
then we just have a table which is our

1407
01:24:00,279 --> 01:24:11,920
like index you know our best table I

1408
01:24:07,569 --> 01:24:14,349
don't know it's the best table so in

1409
01:24:11,920 --> 01:24:18,460
here we would say all right let's look

1410
01:24:14,350 --> 01:24:25,900
at what these bit patterns mean so we

1411
01:24:18,460 --> 01:24:27,880
basically have like 0 0 0 and we know

1412
01:24:25,899 --> 01:24:30,269
that we want to mask off the top so

1413
01:24:27,880 --> 01:24:48,810
we're really just dealing with

1414
01:24:30,270 --> 01:24:51,870
something looks like this right answer

1415
01:24:48,810 --> 01:24:59,600
that high bit after we do the mask move

1416
01:24:51,869 --> 01:25:03,019
of this the high bit is going to be X

1417
01:24:59,600 --> 01:25:03,020
less than

1418
01:25:13,159 --> 01:25:15,220
you

1419
01:25:15,969 --> 01:25:31,069
there we go so we then so our t4s now

1420
01:25:20,840 --> 01:25:40,670
gets packed as our t4 is XY XZ r t4 s is

1421
01:25:31,069 --> 01:25:44,090
now Y Z Z right and then X for no reason

1422
01:25:40,670 --> 01:25:48,078
and since we're doing a less than if we

1423
01:25:44,090 --> 01:25:49,670
want we can just make it always not be

1424
01:25:48,078 --> 01:25:52,189
true so that way we don't have to bother

1425
01:25:49,670 --> 01:25:53,989
even masking it off so what we would do

1426
01:25:52,189 --> 01:25:56,419
is since we know Z is the last thing we

1427
01:25:53,988 --> 01:25:57,678
just stuff Z in there and then I think

1428
01:25:56,420 --> 01:25:59,658
we're okay because then we know that

1429
01:25:57,679 --> 01:26:02,319
that bit on the mask mouth will always

1430
01:25:59,658 --> 01:26:10,719
be zero so I'd have to even mask it off

1431
01:26:02,319 --> 01:26:10,719
okay so our bit pattern here we know is

1432
01:26:25,630 --> 01:26:35,590
in this column in this column we have a

1433
01:26:30,618 --> 01:26:38,868
X is less than Z in the next column

1434
01:26:35,590 --> 01:26:42,139
right that's the high bit so the high

1435
01:26:38,868 --> 01:26:46,639
bit is X is less than Z the middle bit

1436
01:26:42,139 --> 01:26:51,529
is going to be y less than Z and the low

1437
01:26:46,639 --> 01:26:53,800
bit is gonna be X less than Y right so

1438
01:26:51,529 --> 01:27:00,228
if none of these things are true

1439
01:26:53,800 --> 01:27:03,229
so X Y so basically that would mean that

1440
01:27:00,229 --> 01:27:05,769
Z is primal right because Z X is not

1441
01:27:03,229 --> 01:27:12,170
less than it and Y is not less than it

1442
01:27:05,769 --> 01:27:14,479
so we would pick Z in that case right in

1443
01:27:12,170 --> 01:27:16,940
the case where X is less than Y but

1444
01:27:14,479 --> 01:27:19,999
still I think so if neither of these two

1445
01:27:16,939 --> 01:27:22,819
things is true again it's just Z because

1446
01:27:19,998 --> 01:27:26,569
Z is still primal in this case Y is

1447
01:27:22,819 --> 01:27:28,329
primal so Y is less than Z and X is not

1448
01:27:26,569 --> 01:27:31,809
less than Y

1449
01:27:28,329 --> 01:27:32,949
we would assume that Y is the lessor

1450
01:27:31,810 --> 01:27:37,060
right

1451
01:27:32,949 --> 01:27:38,380
I would assume trying to think if this

1452
01:27:37,060 --> 01:27:41,289
table makes sense to me but I think it

1453
01:27:38,380 --> 01:27:45,250
does if X is less than Y and Y is less

1454
01:27:41,289 --> 01:27:53,460
than Z but X is not less than Z then we

1455
01:27:45,250 --> 01:27:53,460
would assume that that Y is primal

1456
01:27:53,550 --> 01:28:02,260
actually is that possible because if Y

1457
01:27:59,890 --> 01:28:06,610
is less than Z then Y is the lowest of

1458
01:28:02,260 --> 01:28:13,720
them but X is less than Y that's this is

1459
01:28:06,609 --> 01:28:25,599
like this is like what so I don't know

1460
01:28:13,720 --> 01:28:28,780
what that is we'll just call that one so

1461
01:28:25,600 --> 01:28:30,640
then if X is less than Z but Y is not

1462
01:28:28,779 --> 01:28:35,649
less than Z and X is not less than Y

1463
01:28:30,640 --> 01:28:39,820
then Y would be primal I think if X is

1464
01:28:35,649 --> 01:28:43,149
less than Z and X is less than Y then X

1465
01:28:39,819 --> 01:28:45,219
is primal if X is less than Z and Y is

1466
01:28:43,149 --> 01:28:47,799
less than Z but X is not less than Y

1467
01:28:45,220 --> 01:28:50,770
then Y would be primal if X is less than

1468
01:28:47,800 --> 01:29:00,539
Z and Y is less than Z and X is less

1469
01:28:50,770 --> 01:29:04,110
than Y then X is primal right I think I

1470
01:29:00,539 --> 01:29:04,109
might have missed one there

1471
01:29:06,140 --> 01:29:12,440
I mean one way to say it is that X can

1472
01:29:09,710 --> 01:29:14,659
only be so this tells us whether X is

1473
01:29:12,439 --> 01:29:17,449
less than Z so X should only show up

1474
01:29:14,659 --> 01:29:20,479
here and it does this tell us whether X

1475
01:29:17,449 --> 01:29:22,519
is less than Y and so it should anytime

1476
01:29:20,479 --> 01:29:25,399
it's less than Z and why it needs to be

1477
01:29:22,520 --> 01:29:28,310
true which is what you expect in terms

1478
01:29:25,399 --> 01:29:30,799
of this row here this is when X is less

1479
01:29:28,310 --> 01:29:34,850
than Z but X is not less than Y then

1480
01:29:30,800 --> 01:29:37,070
it's just going to be Y right and then

1481
01:29:34,850 --> 01:29:40,370
here we just have look if no one is less

1482
01:29:37,069 --> 01:29:44,689
than Z then Z is primal doesn't matter

1483
01:29:40,369 --> 01:29:47,390
how x and y compare we don't care and if

1484
01:29:44,689 --> 01:29:49,879
Y is less than Z then it only matters

1485
01:29:47,390 --> 01:29:51,860
which one of these two is primal and in

1486
01:29:49,880 --> 01:29:54,380
this case it's like we don't really know

1487
01:29:51,859 --> 01:29:56,210
we could say anything so somebody here

1488
01:29:54,380 --> 01:29:59,810
is gonna get to like we could say that's

1489
01:29:56,210 --> 01:30:01,670
X right it doesn't matter because it

1490
01:29:59,810 --> 01:30:03,680
shouldn't be possible so some of these

1491
01:30:01,670 --> 01:30:06,100
just aren't possible right and that's

1492
01:30:03,680 --> 01:30:06,100
okay

1493
01:30:06,729 --> 01:30:12,079
it doesn't really matter so anyway um

1494
01:30:09,829 --> 01:30:15,350
once we have this table we can look into

1495
01:30:12,079 --> 01:30:17,210
it so we can just say like okay best dim

1496
01:30:15,350 --> 01:30:28,039
equals best table

1497
01:30:17,210 --> 01:30:32,270
mmm of mask PS of our min comp and that

1498
01:30:28,039 --> 01:30:34,699
gets us out the the best dim that we

1499
01:30:32,270 --> 01:30:41,570
actually wanted we don't need any of

1500
01:30:34,699 --> 01:30:43,489
this or that right and I guess we then

1501
01:30:41,569 --> 01:30:46,639
just need to figure out how we're going

1502
01:30:43,489 --> 01:30:48,559
to get our T best at the moment this is

1503
01:30:46,640 --> 01:30:51,310
not particularly good so we probably

1504
01:30:48,560 --> 01:30:55,460
would want to look up a shuffle as well

1505
01:30:51,310 --> 01:30:57,880
right that allows us to just move the

1506
01:30:55,460 --> 01:31:00,409
correct thing into place

1507
01:30:57,880 --> 01:31:02,960
so we'd want to do that eventually but

1508
01:31:00,409 --> 01:31:05,920
at the moment I suppose I would just

1509
01:31:02,960 --> 01:31:05,920
probably do this

1510
01:31:08,920 --> 01:31:14,420
so that we can start testing the other

1511
01:31:11,479 --> 01:31:17,719
part of it right so let's see if that

1512
01:31:14,420 --> 01:31:21,940
works at all it clearly doesn't which is

1513
01:31:17,720 --> 01:31:24,590
fine let me make this an easier to read

1514
01:31:21,939 --> 01:31:29,029
so what I want to look here is that Tory

1515
01:31:24,590 --> 01:31:34,610
terminate results and D grid results and

1516
01:31:29,029 --> 01:31:39,710
then I want to look at verify verify

1517
01:31:34,609 --> 01:31:43,429
index dot T terminates and actually not

1518
01:31:39,710 --> 01:31:52,039
let's do it that way D grid results and

1519
01:31:43,430 --> 01:31:54,200
verify so here are the values and then

1520
01:31:52,039 --> 01:31:56,060
we also would want to look at some of

1521
01:31:54,199 --> 01:32:00,639
this other stuff so we want to look at

1522
01:31:56,060 --> 01:32:00,640
like what the best dim invest in ref are

1523
01:32:00,729 --> 01:32:08,979
and then the T best and T best right I

1524
01:32:09,970 --> 01:32:14,289
don't know

1525
01:32:11,359 --> 01:32:14,289
wait what

1526
01:32:29,210 --> 01:32:38,270
so like that's a okay

1527
01:32:38,359 --> 01:32:46,289
that's a bit scary so I must have

1528
01:32:44,578 --> 01:32:52,889
screwed something up when I did like the

1529
01:32:46,289 --> 01:32:59,130
XY XZ stuff like I must have pooped out

1530
01:32:52,889 --> 01:33:02,000
I must have pooped this out somehow so

1531
01:32:59,130 --> 01:33:06,599
if we take a look at T this and wonder

1532
01:33:02,000 --> 01:33:16,789
what's going on here so so this just

1533
01:33:06,599 --> 01:33:16,789
looks completely busted okay

1534
01:33:26,319 --> 01:33:32,979
oh wow

1535
01:33:30,880 --> 01:33:36,369
so this was actually correct all the way

1536
01:33:32,979 --> 01:33:39,669
up til some kind of very odd case

1537
01:33:36,369 --> 01:33:44,159
occurred it looks like because we

1538
01:33:39,670 --> 01:33:47,140
actually went through a ton of these hmm

1539
01:33:44,159 --> 01:33:49,779
alright so this may be a little bit

1540
01:33:47,140 --> 01:33:57,280
trickier for us to wrap our heads around

1541
01:33:49,779 --> 01:34:02,829
right so looking at what's going on here

1542
01:33:57,279 --> 01:34:04,750
I guess we should maybe verify that this

1543
01:34:02,829 --> 01:34:11,489
actually always comes out with something

1544
01:34:04,750 --> 01:34:20,680
that I expect so let's do in here

1545
01:34:11,489 --> 01:34:24,099
something like you know get that comp

1546
01:34:20,680 --> 01:34:34,420
mask if comp mass is greater than or

1547
01:34:24,100 --> 01:34:38,010
equal to recount best table we'll put in

1548
01:34:34,420 --> 01:34:38,010
another hard coded desert

1549
01:34:47,430 --> 01:34:55,060
so interesting so we never get an

1550
01:34:50,880 --> 01:34:58,989
erroneous value here but we do somehow

1551
01:34:55,060 --> 01:35:02,289
still produce a bunch of man which cost

1552
01:34:58,989 --> 01:35:06,039
are we on so Ron cost one so we've only

1553
01:35:02,289 --> 01:35:11,680
taken one step right and we've produced

1554
01:35:06,039 --> 01:35:14,680
some some nutso values somehow right

1555
01:35:11,680 --> 01:35:24,430
which is which is crazy

1556
01:35:14,680 --> 01:35:27,100
can I see what our radio R is so the

1557
01:35:24,430 --> 01:35:36,760
radio for so what why would there be an

1558
01:35:27,100 --> 01:35:40,480
int in this channel though like that's a

1559
01:35:36,760 --> 01:35:42,970
one value so like why would that have

1560
01:35:40,479 --> 01:35:46,169
come out weird that's that's obviously

1561
01:35:42,970 --> 01:35:48,640
just you know we screwed something up

1562
01:35:46,170 --> 01:35:51,010
you know why why would that be imp

1563
01:35:48,640 --> 01:35:55,510
because here what we're saying is the

1564
01:35:51,010 --> 01:35:57,310
seldom - where we are / r ad for that

1565
01:35:55,510 --> 01:36:01,180
should have been stepping properly the

1566
01:35:57,310 --> 01:36:14,520
entire time so something's getting like

1567
01:36:01,180 --> 01:36:14,520
Swizzle de round XY XZ X Y X Z X Y X Z

1568
01:36:24,779 --> 01:36:29,619
so I just want to look at this one a

1569
01:36:27,010 --> 01:36:32,829
little more closely so which one did we

1570
01:36:29,619 --> 01:36:34,590
say this was 135 I'm just gonna wanna

1571
01:36:32,829 --> 01:36:38,229
I'm just gonna want to look at that one

1572
01:36:34,590 --> 01:36:41,829
so I'm gonna set a breakpoint for just

1573
01:36:38,229 --> 01:36:54,159
that specific one so I can watch it when

1574
01:36:41,829 --> 01:37:00,399
I say 135 so we're gonna set a little

1575
01:36:54,159 --> 01:37:02,229
break point on fru-fru and then when we

1576
01:37:00,399 --> 01:37:05,229
walk through here I just want to see

1577
01:37:02,229 --> 01:37:10,779
what the heck is going on so if I take a

1578
01:37:05,229 --> 01:37:19,059
look at what at is it's you know pretty

1579
01:37:10,779 --> 01:37:22,449
NOC Lluis nothing weird going on there

1580
01:37:19,060 --> 01:37:26,610
we take a look at Rady nothing weird

1581
01:37:22,449 --> 01:37:29,199
going on there take a look at cell dim

1582
01:37:26,609 --> 01:37:33,960
nothing weird going on there so let's

1583
01:37:29,199 --> 01:37:36,609
see what we get 44 first time out and

1584
01:37:33,960 --> 01:37:43,090
this is what we expect so we just have

1585
01:37:36,609 --> 01:37:46,299
em fear Oh are we no but we're not we're

1586
01:37:43,090 --> 01:37:49,480
correctly accounting for that we do 0 1

1587
01:37:46,300 --> 01:37:53,380
&amp; 3 in here so I don't know alright so

1588
01:37:49,479 --> 01:38:01,169
min comp what's our actual comp mask

1589
01:37:53,380 --> 01:38:01,170
here our comp mask is 2

1590
01:38:21,520 --> 01:38:32,080
so I can see why it's 2 because negative

1591
01:38:26,800 --> 01:38:35,079
infinity is technically less than 0.6 9

1592
01:38:32,079 --> 01:38:35,079
right

1593
01:38:42,970 --> 01:38:55,630
you know like I don't disagree what I

1594
01:38:46,600 --> 01:39:07,539
don't necessarily quite grasp is how

1595
01:38:55,630 --> 01:39:11,350
that is a negative zero so like the

1596
01:39:07,539 --> 01:39:15,210
actual source samples ray Direction it's

1597
01:39:11,350 --> 01:39:15,210
actually negative zero

1598
01:39:32,100 --> 01:39:38,520
so I'm confused about two things first

1599
01:39:34,920 --> 01:39:40,710
of all the confusion number one is why

1600
01:39:38,520 --> 01:39:46,560
is this coming through as negative zero

1601
01:39:40,710 --> 01:39:48,329
right so I guess our table generator has

1602
01:39:46,560 --> 01:39:49,980
some kind of a weird thing in it where

1603
01:39:48,329 --> 01:39:51,840
it's like actually generating negative

1604
01:39:49,979 --> 01:39:55,709
zeros for some reason which I don't know

1605
01:39:51,840 --> 01:40:00,050
why it's doing but it is right you can

1606
01:39:55,710 --> 01:40:00,050
see there's negative zero right there

1607
01:40:02,149 --> 01:40:07,529
but the other thing that's weird about

1608
01:40:04,649 --> 01:40:12,149
that is why didn't the other routine

1609
01:40:07,529 --> 01:40:17,359
also have the same problem so when we

1610
01:40:12,149 --> 01:40:17,359
went through and did that same one here

1611
01:40:38,090 --> 01:40:44,489
like is it just because we happen to be

1612
01:40:42,449 --> 01:40:48,889
choosing the opposite way around of

1613
01:40:44,489 --> 01:40:56,460
these like would it have picked the same

1614
01:40:48,890 --> 01:40:59,190
bad answer basically kind of curious

1615
01:40:56,460 --> 01:41:04,980
because that's really strange and and

1616
01:40:59,189 --> 01:41:06,000
kind of busted so we kind of need to

1617
01:41:04,979 --> 01:41:08,579
figure out what was going on there I'm

1618
01:41:06,000 --> 01:41:10,470
curious to know so if I just changed

1619
01:41:08,579 --> 01:41:17,369
this to this would we have the same

1620
01:41:10,470 --> 01:41:29,539
answer actually sorry right you see

1621
01:41:17,369 --> 01:41:32,159
where I'm going with this right so yeah

1622
01:41:29,539 --> 01:41:33,899
like the only reason we were getting a

1623
01:41:32,159 --> 01:41:36,510
different answer there was because of

1624
01:41:33,899 --> 01:41:38,729
some some nonsense right so that's

1625
01:41:36,510 --> 01:41:40,770
that's real Emes up and we probably

1626
01:41:38,729 --> 01:41:43,619
should deal with that separately cuz

1627
01:41:40,770 --> 01:41:48,420
that's really not good like for obvious

1628
01:41:43,619 --> 01:41:50,670
reasons I think yeah so alright so

1629
01:41:48,420 --> 01:41:54,029
looking at the other one here so it

1630
01:41:50,670 --> 01:41:56,520
looks like T terminate D Grid results

1631
01:41:54,029 --> 01:41:59,789
here is wrong because we're doing best

1632
01:41:56,520 --> 01:42:06,690
in one instead of best in zero here for

1633
01:41:59,789 --> 01:42:08,850
the reference so it looks like to match

1634
01:42:06,689 --> 01:42:12,269
our reference code we actually did have

1635
01:42:08,850 --> 01:42:18,240
a preferred order zero gets preferred

1636
01:42:12,270 --> 01:42:20,100
when nothing is true right so like in

1637
01:42:18,239 --> 01:42:22,079
order to be exactly the same I guess

1638
01:42:20,100 --> 01:42:24,600
technically we got to kind of look at

1639
01:42:22,079 --> 01:42:28,699
this like the way that our thing was

1640
01:42:24,600 --> 01:42:32,910
working before is it would just do like

1641
01:42:28,699 --> 01:42:38,420
whichever one was best so do it would do

1642
01:42:32,909 --> 01:42:43,349
assume X if Y is less than X take it

1643
01:42:38,420 --> 01:42:48,079
right if Z is less than whichever one

1644
01:42:43,350 --> 01:42:51,079
you took out of those two then take it

1645
01:42:48,079 --> 01:42:51,079
right

1646
01:42:52,670 --> 01:43:05,399
so that's what we were doing before and

1647
01:43:01,279 --> 01:43:07,800
I guess for sake of of reference because

1648
01:43:05,399 --> 01:43:11,909
we don't care I guess I should just make

1649
01:43:07,800 --> 01:43:22,770
it be the same right so I want these to

1650
01:43:11,909 --> 01:43:25,559
be the same so the way that would work

1651
01:43:22,770 --> 01:43:27,420
if we were to compare these it would

1652
01:43:25,560 --> 01:43:30,560
really do the other way around I guess

1653
01:43:27,420 --> 01:43:34,800
so it would look more like this right

1654
01:43:30,560 --> 01:43:38,489
and what we would say here is like look

1655
01:43:34,800 --> 01:43:41,850
if X is not greater than Z and X is not

1656
01:43:38,488 --> 01:43:44,129
greater than Y you would pick because

1657
01:43:41,850 --> 01:43:45,900
you start with X and then you say if

1658
01:43:44,130 --> 01:43:47,489
it's greater than Y take Y if it's

1659
01:43:45,899 --> 01:43:49,769
greater than then if it was greater than

1660
01:43:47,488 --> 01:43:52,669
C take C right so in this case it

1661
01:43:49,770 --> 01:43:55,530
wouldn't be here we would say okay X's

1662
01:43:52,670 --> 01:44:01,199
is greater than Y so we'd take Y and

1663
01:43:55,529 --> 01:44:06,960
then Y is not greater than Z so we would

1664
01:44:01,198 --> 01:44:12,988
take Y then doing it again same way we

1665
01:44:06,960 --> 01:44:16,710
would say okay X is X is not greater

1666
01:44:12,988 --> 01:44:20,698
than Y X is not greater than Z right so

1667
01:44:16,710 --> 01:44:22,260
this is like the same case right we

1668
01:44:20,698 --> 01:44:24,928
don't care what this value is in this

1669
01:44:22,260 --> 01:44:27,030
case um in this case X is greater than Y

1670
01:44:24,929 --> 01:44:33,449
so we take Y and then we say Y is

1671
01:44:27,029 --> 01:44:35,099
greater than Z so we take C right so

1672
01:44:33,448 --> 01:44:39,419
we're just doing it the same way the old

1673
01:44:35,100 --> 01:44:44,270
routine did it so here X is not greater

1674
01:44:39,420 --> 01:44:48,000
than Y X is greater than Z so we take Z

1675
01:44:44,270 --> 01:44:50,520
X is greater than I'm sorry X is greater

1676
01:44:48,000 --> 01:44:54,569
than Y so we take Y Y is not greater

1677
01:44:50,520 --> 01:44:57,179
than Z so we take Y X is greater than Y

1678
01:44:54,569 --> 01:45:00,389
so I'm sorry X is not greater than Y so

1679
01:44:57,179 --> 01:45:05,029
we take X X is greater than Z so we take

1680
01:45:00,390 --> 01:45:05,030
Z and finally X is greater than Y

1681
01:45:05,880 --> 01:45:14,969
so we take Y Y is greater than Z so we

1682
01:45:09,000 --> 01:45:17,729
take C right I don't know if I read that

1683
01:45:14,969 --> 01:45:19,230
table off correctly but that's looks

1684
01:45:17,729 --> 01:45:21,359
like more like what it is

1685
01:45:19,229 --> 01:45:23,750
right looks like I missed something here

1686
01:45:21,359 --> 01:45:32,549
though cuz we're wrong right off the bat

1687
01:45:23,750 --> 01:45:34,469
we just verify it one more time so we're

1688
01:45:32,550 --> 01:45:38,340
trying to take the less the least one so

1689
01:45:34,469 --> 01:45:42,420
if X is X is not greater than Y we keep

1690
01:45:38,340 --> 01:45:45,630
it X is not greater than Z we keep it so

1691
01:45:42,420 --> 01:45:48,960
that seems right X is greater than Y so

1692
01:45:45,630 --> 01:45:59,760
we keep Y y is not greater than Z so we

1693
01:45:48,960 --> 01:46:02,880
keep Y yeah X is greater than Y i sorry

1694
01:45:59,760 --> 01:46:04,829
X is not greater than Y so we keep x y

1695
01:46:02,880 --> 01:46:08,130
is greater than Z we don't care

1696
01:46:04,828 --> 01:46:10,738
X is not greater than Z so we keep X X

1697
01:46:08,130 --> 01:46:19,618
is is greater than Y so we keep Y Y is

1698
01:46:10,738 --> 01:46:23,098
greater than Z so we keep C right X is

1699
01:46:19,618 --> 01:46:26,279
greater than Y nope so we keep x x is

1700
01:46:23,099 --> 01:46:29,880
greater than Z so we keep Z X is greater

1701
01:46:26,279 --> 01:46:33,779
than Y yes it is so we keep Y Y is

1702
01:46:29,880 --> 01:46:38,159
greater than Z nope so we keep Y X

1703
01:46:33,779 --> 01:46:43,859
greater than Y no so we keep x x is

1704
01:46:38,158 --> 01:46:45,960
greater than Z so we keep Z and same

1705
01:46:43,859 --> 01:46:48,799
here so that seems right so why is that

1706
01:46:45,960 --> 01:46:52,730
not isn't that correct

1707
01:46:48,800 --> 01:46:52,730
doesn't that seem right everywhere

1708
01:47:03,869 --> 01:47:06,869
like that looks like it should be

1709
01:47:05,520 --> 01:47:08,040
producing their answer alright well

1710
01:47:06,869 --> 01:47:11,460
let's find out why not

1711
01:47:08,039 --> 01:47:14,189
so it's wrong right off the bat like the

1712
01:47:11,460 --> 01:47:15,689
very first one is wrong so it's just

1713
01:47:14,189 --> 01:47:17,549
totally wrong what I've done here I

1714
01:47:15,689 --> 01:47:19,529
thought I was imitating this table right

1715
01:47:17,550 --> 01:47:23,460
I mean isn't that what this table does

1716
01:47:19,529 --> 01:47:26,069
it starts with X and then it says I'm

1717
01:47:23,460 --> 01:47:28,020
sorry it starts with X and T best

1718
01:47:26,069 --> 01:47:29,189
because T best this comparison always

1719
01:47:28,020 --> 01:47:31,800
fails so the first times they loop it's

1720
01:47:29,189 --> 01:47:38,689
just X right next time through the loop

1721
01:47:31,800 --> 01:47:38,690
it's saying look if X is less than Y

1722
01:47:44,069 --> 01:47:49,409
oh I've got that backwards Wow

1723
01:47:47,340 --> 01:47:52,289
this stuff is too this stuff is too

1724
01:47:49,409 --> 01:47:54,869
finicky for me and I need more coffee if

1725
01:47:52,289 --> 01:47:56,600
I'm gonna do try to do this so actually

1726
01:47:54,869 --> 01:48:00,479
I need to do it sort of the other way

1727
01:47:56,600 --> 01:48:03,810
right if I'm actually trying to produce

1728
01:48:00,479 --> 01:48:07,769
the exact same thing as this if I need

1729
01:48:03,810 --> 01:48:18,720
to produce the comparisons this way so

1730
01:48:07,770 --> 01:48:20,310
we start with X if X is less than Y did

1731
01:48:18,720 --> 01:48:26,670
we like change this I mean this doesn't

1732
01:48:20,310 --> 01:48:30,590
make any sense it has to be greater

1733
01:48:26,670 --> 01:48:30,590
right did I do something weird

1734
01:48:38,130 --> 01:48:45,180
yeah it needs to do be greater oh so so

1735
01:48:41,130 --> 01:48:48,960
that wasn't my fault okay I just when I

1736
01:48:45,180 --> 01:48:50,730
was fussing with that routine yeah cuz

1737
01:48:48,960 --> 01:48:51,989
that's that's I don't know what I was

1738
01:48:50,729 --> 01:48:53,689
thinking there right it has to be this

1739
01:48:51,989 --> 01:48:57,829
if the best is greater you know it's

1740
01:48:53,689 --> 01:48:57,829
yeah I don't know what's going on there

1741
01:49:00,319 --> 01:49:05,549
there we go

1742
01:49:01,710 --> 01:49:07,470
so I didn't screw up I just for some

1743
01:49:05,550 --> 01:49:09,029
reason translight routine so now we're

1744
01:49:07,470 --> 01:49:11,250
doing it exactly the same way as the old

1745
01:49:09,029 --> 01:49:13,229
one and it's correct so that's the good

1746
01:49:11,250 --> 01:49:14,850
news right

1747
01:49:13,229 --> 01:49:16,589
we don't really know how efficient it is

1748
01:49:14,850 --> 01:49:18,660
to do it this way but hey it was pretty

1749
01:49:16,590 --> 01:49:22,650
simple it was just a shuffle and then I

1750
01:49:18,659 --> 01:49:27,659
compared move masks into the table yeah

1751
01:49:22,649 --> 01:49:30,029
you know that seems alright that gets us

1752
01:49:27,659 --> 01:49:34,139
which of our steps we're going to use

1753
01:49:30,029 --> 01:49:36,269
and it also allows us to do this shuffle

1754
01:49:34,140 --> 01:49:40,350
if we want to right we can have a

1755
01:49:36,270 --> 01:49:46,380
shuffler in here and we can look those

1756
01:49:40,350 --> 01:49:52,250
up in see really like right so we can do

1757
01:49:46,380 --> 01:49:59,090
this where we have this shuffle table

1758
01:49:52,250 --> 01:50:08,220
and we just say okay so it's 0 1 0 2 0 1

1759
01:49:59,090 --> 01:50:10,680
0 2 right well that's not quite right

1760
01:50:08,220 --> 01:50:13,260
so if you look at what this index is

1761
01:50:10,680 --> 01:50:18,810
going to tell you it's they're not

1762
01:50:13,260 --> 01:50:20,699
packed that way so 0 1 is correct so 0 1

1763
01:50:18,810 --> 01:50:24,050
0 is correct but then 2 is actually

1764
01:50:20,699 --> 01:50:27,119
always 3 right so we don't really have

1765
01:50:24,050 --> 01:50:29,310
we never get the second you know we get

1766
01:50:27,119 --> 01:50:31,680
0 &amp; 1 &amp; 3 but we never get 2 because we

1767
01:50:29,310 --> 01:50:40,350
didn't pack it that way so then there's

1768
01:50:31,680 --> 01:50:44,460
2 then I want to 1 to 2 so to 1 to 2 so

1769
01:50:40,350 --> 01:50:48,240
now I can just do a shuffle epi8 and I

1770
01:50:44,460 --> 01:50:50,579
can just get the value out directly so I

1771
01:50:48,239 --> 01:50:53,229
don't need to do this anymore

1772
01:50:50,579 --> 01:51:03,090
right in theory I can now just use the

1773
01:50:53,229 --> 01:51:05,949
shuffle table and extract it that way so

1774
01:51:03,090 --> 01:51:10,180
now if I just check I want to make sure

1775
01:51:05,949 --> 01:51:13,090
I'm okay here did that and actually run

1776
01:51:10,180 --> 01:51:15,490
yes it did um so what I can do now is

1777
01:51:13,090 --> 01:51:19,029
just say oh all right like stop doing

1778
01:51:15,489 --> 01:51:20,590
this to get to get the actual this value

1779
01:51:19,029 --> 01:51:22,179
out of this we don't actually need to do

1780
01:51:20,590 --> 01:51:25,869
it that way what we could do instead is

1781
01:51:22,180 --> 01:51:30,640
just produce the f30 for X T best

1782
01:51:25,869 --> 01:51:33,099
directly so you know delete that for now

1783
01:51:30,640 --> 01:51:38,680
and then we'll say that's just going to

1784
01:51:33,100 --> 01:51:42,840
be mm shuffle epi8 and it's gonna be out

1785
01:51:38,680 --> 01:51:47,050
of the shuffle table for whatever the

1786
01:51:42,840 --> 01:51:48,579
comp mask was and again I could have

1787
01:51:47,050 --> 01:51:49,840
just used the best in but I don't want

1788
01:51:48,579 --> 01:51:52,000
to dependent I don't want to have to

1789
01:51:49,840 --> 01:51:53,110
look up into the table and then use the

1790
01:51:52,000 --> 01:51:54,369
lookup into the table to look up into

1791
01:51:53,109 --> 01:51:56,079
another table I want to just look up

1792
01:51:54,369 --> 01:51:57,609
into both tables so I made the other

1793
01:51:56,079 --> 01:51:59,859
table slightly larger so I could do that

1794
01:51:57,609 --> 01:52:05,019
right so that's all that's going on

1795
01:51:59,859 --> 01:52:11,109
there so if we do an m1 28 hi there and

1796
01:52:05,020 --> 01:52:13,480
I say okay like when we do the shuffle

1797
01:52:11,109 --> 01:52:15,609
here I just want to shuffle the t4 value

1798
01:52:13,479 --> 01:52:20,889
that we had before so you know I want to

1799
01:52:15,609 --> 01:52:23,079
shuffle this thing to get my tea best

1800
01:52:20,890 --> 01:52:26,110
value out I don't care about this

1801
01:52:23,079 --> 01:52:28,960
anymore so now I just need to do this

1802
01:52:26,109 --> 01:52:31,750
computation this allows me to roll at

1803
01:52:28,960 --> 01:52:35,199
four in properly and really this now

1804
01:52:31,750 --> 01:52:36,699
becomes my only problem again I'm going

1805
01:52:35,199 --> 01:52:40,659
to take this one step at a time so to

1806
01:52:36,699 --> 01:52:43,449
avoid taking too many jumps right what I

1807
01:52:40,659 --> 01:52:47,409
can do here is just say all right let's

1808
01:52:43,449 --> 01:52:49,420
take this and do a convert so let's just

1809
01:52:47,409 --> 01:52:52,630
take the zero if value doesn't matter

1810
01:52:49,420 --> 01:52:54,908
which one I take let's just take the

1811
01:52:52,630 --> 01:53:00,050
zeroth value oops that's

1812
01:52:54,908 --> 01:53:04,039
not uh what did i do there shuffle table

1813
01:53:00,050 --> 01:53:05,719
accident you ate that should be fine

1814
01:53:04,039 --> 01:53:09,319
this however probably needs to be

1815
01:53:05,719 --> 01:53:10,730
converted so let me this is the really

1816
01:53:09,319 --> 01:53:14,029
annoying thing about the way they do

1817
01:53:10,729 --> 01:53:17,599
these this assembly stuff I I absolutely

1818
01:53:14,029 --> 01:53:21,948
cannot stand it in Intel land it's it's

1819
01:53:17,600 --> 01:53:24,260
so egregiously bad but well you have to

1820
01:53:21,948 --> 01:53:30,559
put in a bunch of nonsense casts for no

1821
01:53:24,260 --> 01:53:34,699
reason so like I've got to do this did

1822
01:53:30,560 --> 01:53:45,010
we make a macro for this didn't we make

1823
01:53:34,698 --> 01:53:45,009
like a pea chef B macro oh yeah macro x

1824
01:53:45,100 --> 01:54:00,679
alright so it turns out we do so we can

1825
01:53:49,250 --> 01:54:03,439
just do that alright um so now we just

1826
01:54:00,679 --> 01:54:05,868
have the problem that to terminate here

1827
01:54:03,439 --> 01:54:08,149
again is not what but what I'll do is

1828
01:54:05,868 --> 01:54:10,130
I'll go and I'll just do a convert to

1829
01:54:08,149 --> 01:54:11,658
get that out temporarily and this is

1830
01:54:10,130 --> 01:54:14,510
again just me trying to take baby steps

1831
01:54:11,658 --> 01:54:17,149
because I don't want to have to debug

1832
01:54:14,510 --> 01:54:20,750
more than I have to so I'm just making

1833
01:54:17,149 --> 01:54:22,729
sure that I match each time through so

1834
01:54:20,750 --> 01:54:25,729
now what I can do is say alright so T

1835
01:54:22,729 --> 01:54:28,189
terminate could now just be for wide

1836
01:54:25,729 --> 01:54:29,738
like there's nothing that would stop

1837
01:54:28,189 --> 01:54:32,738
that from happening

1838
01:54:29,738 --> 01:54:32,738
and

1839
01:54:46,920 --> 01:54:50,199
yeah

1840
01:54:48,210 --> 01:54:59,260
so I'm just gonna go ahead and say a

1841
01:54:50,199 --> 01:55:02,409
3040 terminate so I'm going to get rid

1842
01:54:59,260 --> 01:55:07,570
of the f32 to terminate here and I'm

1843
01:55:02,409 --> 01:55:10,809
just going to go ahead and keep the T

1844
01:55:07,569 --> 01:55:12,819
terminate this way from now on

1845
01:55:10,810 --> 01:55:15,490
so we're only going to do the convert

1846
01:55:12,819 --> 01:55:20,969
f32 on to terminate now to do the check

1847
01:55:15,489 --> 01:55:24,639
and everything else will not looks good

1848
01:55:20,970 --> 01:55:27,430
and then what I'll do is say let's get

1849
01:55:24,640 --> 01:55:29,770
rid of the other place we do so the

1850
01:55:27,430 --> 01:55:31,630
other conversion is here so that one's

1851
01:55:29,770 --> 01:55:33,040
pretty easy to get rid of as well the

1852
01:55:31,630 --> 01:55:35,970
only problem that we're now going to

1853
01:55:33,039 --> 01:55:43,269
have is how do we deal with this seldom

1854
01:55:35,970 --> 01:55:45,400
right and there's a lot of ways we can

1855
01:55:43,270 --> 01:55:48,760
do this you can see us looking up we've

1856
01:55:45,399 --> 01:55:52,509
got the best dim we know which one of

1857
01:55:48,760 --> 01:55:54,760
these were actually looking at so we

1858
01:55:52,510 --> 01:55:57,760
could continue to just table drive it

1859
01:55:54,760 --> 01:56:02,949
right if we want to it'd be pretty

1860
01:55:57,760 --> 01:56:04,960
straightforward but I just want to take

1861
01:56:02,949 --> 01:56:06,729
a look at it just to remind myself of

1862
01:56:04,960 --> 01:56:08,470
how we actually have these arranged

1863
01:56:06,729 --> 01:56:12,369
because you know for all I know we could

1864
01:56:08,470 --> 01:56:15,300
do something better there as well not

1865
01:56:12,369 --> 01:56:17,349
sure so hmm

1866
01:56:15,300 --> 01:56:18,789
let's just check that out because we're

1867
01:56:17,350 --> 01:56:22,690
pretty close now to have in this entire

1868
01:56:18,789 --> 01:56:25,869
thing be done in very few instructions

1869
01:56:22,689 --> 01:56:27,849
it does take some tables but the actual

1870
01:56:25,869 --> 01:56:31,619
amount of work being done here is it's

1871
01:56:27,850 --> 01:56:31,620
pretty tiny and that was the whole goal

1872
01:56:33,239 --> 01:56:36,969
we can also probably take care of some

1873
01:56:35,380 --> 01:56:38,020
get rid of some of these assertions here

1874
01:56:36,970 --> 01:56:39,789
because now that we're verifying the

1875
01:56:38,020 --> 01:56:41,290
entire table we probably don't need that

1876
01:56:39,789 --> 01:56:42,640
and we know asserts returned off anyway

1877
01:56:41,289 --> 01:56:43,960
somebody's get that out of there cuz

1878
01:56:42,640 --> 01:56:45,820
we're actually look at these and

1879
01:56:43,960 --> 01:56:47,529
furthermore we kind of know that this is

1880
01:56:45,819 --> 01:56:50,279
working okay because we've already

1881
01:56:47,529 --> 01:56:50,279
tested it but

1882
01:56:51,960 --> 01:57:13,350
in fact I'll move this down here so now

1883
01:57:04,899 --> 01:57:15,489
we have it all in one place right okay

1884
01:57:13,350 --> 01:57:17,110
so we look at the instructions here if

1885
01:57:15,489 --> 01:57:18,579
there's really not that many right and

1886
01:57:17,109 --> 01:57:22,059
that's pretty good so the question is

1887
01:57:18,579 --> 01:57:23,949
can we now just let's just loft at four

1888
01:57:22,060 --> 01:57:26,110
out of here because we don't want to do

1889
01:57:23,949 --> 01:57:28,979
that every time so if I was the left it

1890
01:57:26,109 --> 01:57:31,029
out of here what would it look like well

1891
01:57:28,979 --> 01:57:34,449
we would then not want to do this

1892
01:57:31,029 --> 01:57:36,460
conversion certainly right what we would

1893
01:57:34,449 --> 01:57:38,859
want to do instead is just do this as an

1894
01:57:36,460 --> 01:57:45,430
at4 plus equals right so we'd just be

1895
01:57:38,859 --> 01:57:49,299
doing this and now the only problem

1896
01:57:45,430 --> 01:57:52,300
we're gonna have is this this while I

1897
01:57:49,300 --> 01:57:53,529
think this actually might work okay

1898
01:57:52,300 --> 01:57:56,470
never mind

1899
01:57:53,529 --> 01:58:00,039
it's just really wrong right because it

1900
01:57:56,470 --> 01:58:01,119
would it's not wide anymore so and the

1901
01:58:00,039 --> 01:58:02,710
reason I guess it wouldn't work is

1902
01:58:01,119 --> 01:58:03,340
because the two should really be a three

1903
01:58:02,710 --> 01:58:05,319
right

1904
01:58:03,340 --> 01:58:09,220
so this is actually the thing that's

1905
01:58:05,319 --> 01:58:10,359
wrong we can fix it and just for testing

1906
01:58:09,220 --> 01:58:11,590
purposes just to make sure that that's

1907
01:58:10,359 --> 01:58:16,229
the only thing that we've got wrong here

1908
01:58:11,590 --> 01:58:16,230
what I can do instead is is do this

1909
01:58:31,510 --> 01:58:37,520
so if the best dim was to we actually

1910
01:58:34,819 --> 01:58:49,670
need to do you know what I can actually

1911
01:58:37,520 --> 01:58:54,550
sell just do it manually so we can

1912
01:58:49,670 --> 01:58:57,230
handle the cases separately here and

1913
01:58:54,550 --> 01:58:58,730
I'll just like handwrite them for now

1914
01:58:57,229 --> 01:59:00,559
and that will allow us to verify that

1915
01:58:58,729 --> 01:59:02,000
that's the only part of the code that we

1916
01:59:00,560 --> 01:59:06,039
then need to actually make work properly

1917
01:59:02,000 --> 01:59:11,659
so in the zero case we need to do

1918
01:59:06,039 --> 01:59:16,130
interleaved so we need to do 0 2 in the

1919
01:59:11,659 --> 01:59:21,939
one case we can just do one and in the

1920
01:59:16,130 --> 01:59:32,449
two case we have to do three right so

1921
01:59:21,939 --> 01:59:33,409
those are the switch cases what is the

1922
01:59:32,449 --> 01:59:39,880
problem

1923
01:59:33,409 --> 01:59:42,590
oh whoops so this sorry this seldom is

1924
01:59:39,880 --> 01:59:47,480
is just a regular thank you compiler

1925
01:59:42,590 --> 01:59:51,199
that was handy the seldom is is not it's

1926
01:59:47,479 --> 01:59:54,049
not that kind of a value right okay

1927
01:59:51,199 --> 01:59:58,789
so now we just need to like make this

1928
01:59:54,050 --> 02:00:01,060
work off of at for like so and I think

1929
01:59:58,789 --> 02:00:01,060
we're good

1930
02:00:03,829 --> 02:00:12,390
okay all right so now we're just left

1931
02:00:09,689 --> 02:00:14,699
with one more question and that's how is

1932
02:00:12,390 --> 02:00:17,940
this gonna work right so we need to

1933
02:00:14,699 --> 02:00:19,590
perform this on at four this is easy

1934
02:00:17,939 --> 02:00:22,460
because it's just a wide ad we've

1935
02:00:19,590 --> 02:00:29,069
already shuffled it so it's no big deal

1936
02:00:22,460 --> 02:00:33,090
but this is trickier so we need seldom

1937
02:00:29,069 --> 02:00:37,460
which we actually have up here right we

1938
02:00:33,090 --> 02:00:37,460
need sell them to be correct

1939
02:00:44,489 --> 02:00:52,079
- we viously need to knock out values

1940
02:00:47,359 --> 02:00:54,420
right so what we want to do is do a mask

1941
02:00:52,079 --> 02:00:57,119
and then a sub so that we only sub from

1942
02:00:54,420 --> 02:00:59,149
the correct channel again the easiest

1943
02:00:57,119 --> 02:01:02,760
way to do this would just be to do it

1944
02:00:59,149 --> 02:01:08,939
with a shuffle with a table I'm asking

1945
02:01:02,760 --> 02:01:12,380
I'm asking table right and I don't

1946
02:01:08,939 --> 02:01:12,379
actually know

1947
02:01:22,800 --> 02:01:36,539
I mean I don't know like I mean that

1948
02:01:29,939 --> 02:01:42,809
just might be that just might be the

1949
02:01:36,539 --> 02:01:48,329
easiest thing I really don't know so I'm

1950
02:01:42,810 --> 02:01:50,490
just gonna say like if we were to do

1951
02:01:48,329 --> 02:01:52,649
that and we're just super table heavy

1952
02:01:50,489 --> 02:01:55,519
now which you know maybe is good maybe

1953
02:01:52,649 --> 02:01:55,519
as bad I don't know

1954
02:02:14,038 --> 02:02:20,708
so if you look at what we would need to

1955
02:02:15,908 --> 02:02:23,228
do here effectively what we've got is

1956
02:02:20,708 --> 02:02:27,399
look up into this table we know for case

1957
02:02:23,229 --> 02:02:28,179
zero we want 0 and 2 to be masked in so

1958
02:02:27,399 --> 02:02:32,558
that would look like this

1959
02:02:28,179 --> 02:02:37,328
right we know for case 1 we just have

1960
02:02:32,559 --> 02:02:39,940
case 1 all right so we're just doing it

1961
02:02:37,328 --> 02:02:47,529
is what it is so that's a

1962
02:02:39,939 --> 02:02:51,308
straightforward one we know for case two

1963
02:02:47,529 --> 02:02:55,118
we just need to do 3 so it's it's almost

1964
02:02:51,309 --> 02:02:57,639
what it where it actually it's almost

1965
02:02:55,118 --> 02:03:06,908
its index but not quite and then we just

1966
02:02:57,639 --> 02:03:11,769
have 2 1 2 2 so then we just have 2 1 2

1967
02:03:06,908 --> 02:03:18,848
2 right so this is our luck mask table

1968
02:03:11,769 --> 02:03:22,559
and we can just load it in and that

1969
02:03:18,849 --> 02:03:29,139
would be it so that's literally just

1970
02:03:22,559 --> 02:03:32,469
like minus equals on at 4 we can just

1971
02:03:29,139 --> 02:03:35,409
write it like this we need to do an end

1972
02:03:32,469 --> 02:03:37,208
here to make sure that we mask it off

1973
02:03:35,408 --> 02:03:41,799
but other than that all we're doing is

1974
02:03:37,208 --> 02:03:44,590
saying seldom we'll get subtracted but

1975
02:03:41,800 --> 02:03:51,729
first it'll get masked right so it's

1976
02:03:44,590 --> 02:03:53,800
gonna get masked by maths table we'll

1977
02:03:51,729 --> 02:03:59,530
load off the comp mask and we'll just

1978
02:03:53,800 --> 02:04:10,050
say hey I guess I don't know how we cast

1979
02:03:59,529 --> 02:04:10,050
this thing 32 for X

1980
02:04:12,319 --> 02:04:19,368
not the most efficient because it's

1981
02:04:14,539 --> 02:04:34,069
aligned so actually that's not great but

1982
02:04:19,368 --> 02:04:40,219
oh well I think that's it right I think

1983
02:04:34,069 --> 02:04:42,529
I think that would do it and I guess

1984
02:04:40,219 --> 02:04:45,130
we'll find out if there's a bug there

1985
02:04:42,529 --> 02:04:48,259
and there is always so frustrating

1986
02:04:45,130 --> 02:04:49,969
so but I think otherwise I think we're

1987
02:04:48,260 --> 02:04:51,590
basically there right so we just need to

1988
02:04:49,969 --> 02:04:56,000
make sure this thing works properly we

1989
02:04:51,590 --> 02:04:57,800
know this does right so we can take a

1990
02:04:56,000 --> 02:04:59,238
look at a gnat for reference on this one

1991
02:04:57,800 --> 02:05:00,469
let me just double check my table to

1992
02:04:59,238 --> 02:05:03,519
make sure I didn't do anything too

1993
02:05:00,469 --> 02:05:07,039
stupid and then we'll go from there

1994
02:05:03,520 --> 02:05:10,340
so when we're doing this and to do the

1995
02:05:07,039 --> 02:05:12,618
mask outs again just want to make sure

1996
02:05:10,340 --> 02:05:17,360
the table lines up properly so if we're

1997
02:05:12,618 --> 02:05:21,710
doing zero we need to do the two I mean

1998
02:05:17,359 --> 02:05:24,889
once you're in here if we're doing one

1999
02:05:21,710 --> 02:05:34,130
we only need to do that one zero again

2000
02:05:24,889 --> 02:05:37,940
and - yep there's two one two - so that

2001
02:05:34,130 --> 02:05:42,289
I mean that looks right so I'm not sure

2002
02:05:37,939 --> 02:05:52,029
what the problem is there but we'll find

2003
02:05:42,289 --> 02:05:52,029
out so let's do this let's let's say

2004
02:05:55,698 --> 02:06:00,919
if we were to do a comparison between

2005
02:05:58,250 --> 02:06:03,590
these two so now we have the correct at

2006
02:06:00,920 --> 02:06:06,170
four and our at four let's just see what

2007
02:06:03,590 --> 02:06:08,779
they equal right so I should now be able

2008
02:06:06,170 --> 02:06:13,369
to set a breakpoint like here and just

2009
02:06:08,779 --> 02:06:25,309
compare the two and see what we get so

2010
02:06:13,369 --> 02:06:34,420
here's my compare value here's my actual

2011
02:06:25,310 --> 02:06:34,420
at four value sure does look close uh

2012
02:06:38,170 --> 02:06:49,699
[Music]

2013
02:06:39,369 --> 02:06:58,659
okay so I'm guessing there's just some

2014
02:06:49,698 --> 02:06:58,659
like really small difference somewhere

2015
02:06:59,109 --> 02:07:09,738
like do you mean so somehow doing this

2016
02:07:06,640 --> 02:07:20,300
will now magically make it be wrong and

2017
02:07:09,738 --> 02:07:22,488
yet I don't really know why so so let's

2018
02:07:20,300 --> 02:07:26,619
take a look at the case where it's wrong

2019
02:07:22,488 --> 02:07:26,619
cuz I don't know what case that is oops

2020
02:07:28,329 --> 02:07:49,969
what the hey oh I'm an idiot so that's a

2021
02:07:43,340 --> 02:07:52,699
plus equals although that should work

2022
02:07:49,969 --> 02:07:55,969
still what yeah maybe I don't know that

2023
02:07:52,698 --> 02:07:58,759
I really am an idiot I mean maybe it was

2024
02:07:55,969 --> 02:08:00,439
just off by like a fraction so it could

2025
02:07:58,760 --> 02:08:03,020
be that like because it did it in two

2026
02:08:00,439 --> 02:08:07,279
steps before I was off by like a low bit

2027
02:08:03,020 --> 02:08:09,490
right so I mean I guess technically that

2028
02:08:07,279 --> 02:08:19,880
means that if I just did this

2029
02:08:09,489 --> 02:08:21,679
everything would be fine yeah all right

2030
02:08:19,880 --> 02:08:24,560
so I was just off by the lichen Alice B

2031
02:08:21,680 --> 02:08:30,320
or something there like so you know oh

2032
02:08:24,560 --> 02:08:40,360
well okay so the sum total of all the

2033
02:08:30,319 --> 02:08:43,969
stuff we have to do is this right and

2034
02:08:40,359 --> 02:09:02,500
that's not fabulous I mean it's not the

2035
02:08:43,970 --> 02:09:02,500
end of the world but like oh that's fine

2036
02:09:03,100 --> 02:09:07,789
through three is probably fine but you

2037
02:09:05,359 --> 02:09:10,429
can see the latency on that is is high

2038
02:09:07,789 --> 02:09:12,409
right it's 11 cycles and the divider

2039
02:09:10,430 --> 02:09:20,240
sitting around 12 cycles and divider

2040
02:09:12,409 --> 02:09:24,680
like doing doing this thing right so

2041
02:09:20,239 --> 02:09:32,889
like do I want to change that to an x

2042
02:09:24,680 --> 02:09:36,850
the inverse you know maybe because yeah

2043
02:09:32,890 --> 02:09:39,950
it's it's a third latency right like

2044
02:09:36,850 --> 02:09:45,289
that's gonna take 11 to 12 cycles to

2045
02:09:39,949 --> 02:09:48,439
complete according to that right and you

2046
02:09:45,289 --> 02:09:50,359
know this is gonna take four so it's

2047
02:09:48,439 --> 02:09:53,359
like three times faster to not do that

2048
02:09:50,359 --> 02:09:55,849
and so the only question is like could

2049
02:09:53,359 --> 02:09:57,559
can we just do it because we don't care

2050
02:09:55,850 --> 02:09:59,510
in the dividers not doing anything

2051
02:09:57,560 --> 02:10:02,680
anyway or is this going to be like a

2052
02:09:59,510 --> 02:10:02,680
super dependent thing

2053
02:10:07,260 --> 02:10:11,230
and it certainly doesn't have to be but

2054
02:10:09,489 --> 02:10:13,869
I'm worried the compiler will do it that

2055
02:10:11,229 --> 02:10:24,689
way because it's dumb

2056
02:10:13,869 --> 02:10:27,250
so so it's a little tricky right but

2057
02:10:24,689 --> 02:10:29,019
what I can't say is all right so that's

2058
02:10:27,250 --> 02:10:30,760
pretty good you know this is this is

2059
02:10:29,020 --> 02:10:33,220
really nice and compact it's a little

2060
02:10:30,760 --> 02:10:37,449
table heavy here but otherwise it's it's

2061
02:10:33,220 --> 02:10:41,340
actually quite straightforward and you

2062
02:10:37,449 --> 02:10:45,090
know this this is just for testing right

2063
02:10:41,340 --> 02:10:51,270
so it's really just these is all it is

2064
02:10:45,090 --> 02:10:58,329
right um so like one two three four five

2065
02:10:51,270 --> 02:11:00,870
six seven eight nine ish 10 ish

2066
02:10:58,329 --> 02:11:03,569
instructions

2067
02:11:00,869 --> 02:11:13,180
none of which besides the divide are

2068
02:11:03,569 --> 02:11:14,289
particularly weird so you know but I'm a

2069
02:11:13,180 --> 02:11:17,820
little worried about that serial

2070
02:11:14,289 --> 02:11:21,579
dependency so you know here's a 12 cycle

2071
02:11:17,819 --> 02:11:24,009
op and then it lines up behind this

2072
02:11:21,579 --> 02:11:27,130
which is required to do everything else

2073
02:11:24,010 --> 02:11:36,130
right so that that serial dependency

2074
02:11:27,130 --> 02:11:37,539
chain is not it's not great right so

2075
02:11:36,130 --> 02:11:40,300
that's why I think that that maybe

2076
02:11:37,539 --> 02:11:45,130
really wants to be pre inverted right

2077
02:11:40,300 --> 02:11:49,029
like you just wanted to do one over that

2078
02:11:45,130 --> 02:11:51,850
value and then do the multiply so as the

2079
02:11:49,029 --> 02:12:03,550
last thing I do today maybe what I'll do

2080
02:11:51,850 --> 02:12:08,820
here is I'll just say like okay I if we

2081
02:12:03,550 --> 02:12:08,820
run oh well and you know I should

2082
02:12:11,840 --> 02:12:23,079
so if we run this whole situation in you

2083
02:12:17,420 --> 02:12:25,730
know if we run this whole thing in in

2084
02:12:23,079 --> 02:12:27,619
inverted mode will you know does it ruin

2085
02:12:25,729 --> 02:12:29,929
anything so suppose I come in here and I

2086
02:12:27,619 --> 02:12:32,710
say look here's the table builder that

2087
02:12:29,930 --> 02:12:35,480
we're using currently like the old one

2088
02:12:32,710 --> 02:12:38,000
and we can see that there is a divide in

2089
02:12:35,479 --> 02:12:41,779
here by rady what if I just change that

2090
02:12:38,000 --> 02:12:45,350
to a multiply by the inverse of rady you

2091
02:12:41,779 --> 02:12:49,759
know does anyone pitch a fit right so if

2092
02:12:45,350 --> 02:12:54,200
I say I've got rady here and I want in

2093
02:12:49,760 --> 02:12:56,420
Brady is 1 over ad right I can just

2094
02:12:54,199 --> 02:12:58,389
compute that value and then over here I

2095
02:12:56,420 --> 02:13:04,130
can just say well let's multiply by that

2096
02:12:58,390 --> 02:13:06,380
right so if I do that is there any is

2097
02:13:04,130 --> 02:13:13,850
there any noticeable like can you even

2098
02:13:06,380 --> 02:13:16,180
tell right Wow the answer is yes to say

2099
02:13:13,850 --> 02:13:16,180
the least

2100
02:13:17,619 --> 02:13:22,369
so that's odd and that may be because of

2101
02:13:20,359 --> 02:13:26,479
those imps and weird things we have in

2102
02:13:22,369 --> 02:13:29,479
there right so I guess I'm not sure

2103
02:13:26,479 --> 02:13:36,229
exactly what is happening there but

2104
02:13:29,479 --> 02:13:41,329
let's say I mean let's just take a look

2105
02:13:36,229 --> 02:13:45,429
here so when we do this let's do sort of

2106
02:13:41,329 --> 02:13:48,019
a safe ratio on that

2107
02:13:45,430 --> 02:13:50,289
so let's actually just do it more like

2108
02:13:48,020 --> 02:13:50,290
this

2109
02:14:00,109 --> 02:14:06,539
so let's actually do XYZ here let's

2110
02:14:03,899 --> 02:14:11,549
produce it that way and when we do this

2111
02:14:06,539 --> 02:14:12,989
multiplication I guess the problem that

2112
02:14:11,550 --> 02:14:16,020
we're gonna have here is we don't

2113
02:14:12,989 --> 02:14:19,529
actually want to step by that ever so

2114
02:14:16,020 --> 02:14:27,150
what we want here is the safe ratio

2115
02:14:19,529 --> 02:14:29,569
actually wants to be high right so it

2116
02:14:27,149 --> 02:14:31,889
actually wants to be a really high value

2117
02:14:29,569 --> 02:14:33,960
and I don't know exactly what we do

2118
02:14:31,890 --> 02:14:45,900
there we could just stuff it right we

2119
02:14:33,960 --> 02:14:49,590
could say like look rady X not equal to

2120
02:14:45,899 --> 02:14:52,460
zero or I should say just greater than

2121
02:14:49,590 --> 02:14:58,789
zero if it's greater than zero then it's

2122
02:14:52,460 --> 02:14:58,789
rady X at one point over ATX right

2123
02:15:00,920 --> 02:15:10,380
otherwise it's like you know some some

2124
02:15:06,409 --> 02:15:12,000
f/32 max or something right so we could

2125
02:15:10,380 --> 02:15:13,859
do it that way

2126
02:15:12,000 --> 02:15:15,750
or we could you could even just say look

2127
02:15:13,859 --> 02:15:17,759
it's it's some number that's that's way

2128
02:15:15,750 --> 02:15:23,460
too high to ever be the span of a cell

2129
02:15:17,760 --> 02:15:26,250
anyway right so no one would always hit

2130
02:15:23,460 --> 02:15:28,199
one of the other ones first so we could

2131
02:15:26,250 --> 02:15:32,000
try something like this I'm not sure if

2132
02:15:28,199 --> 02:15:32,000
that'll work or not but we'll see

2133
02:15:41,729 --> 02:15:49,059
um and that looks like it's more or less

2134
02:15:46,300 --> 02:15:51,159
right but it definitely has a weird bias

2135
02:15:49,060 --> 02:15:55,330
up here you can see it doesn't really

2136
02:15:51,159 --> 02:15:57,969
get out that direction so there's some

2137
02:15:55,329 --> 02:16:03,460
weirdness happening there and I would

2138
02:15:57,969 --> 02:16:08,230
imagine that has to do with the way that

2139
02:16:03,460 --> 02:16:12,750
I've written this Oh duh you know that's

2140
02:16:08,229 --> 02:16:12,750
just because we're not doing this part

2141
02:16:18,988 --> 02:16:22,559
yeah that was just dumb

2142
02:16:27,439 --> 02:16:33,260
there we go so maybe I could just have

2143
02:16:31,399 --> 02:16:42,529
could just do it the other way let me

2144
02:16:33,260 --> 02:16:51,019
just see so assuming that I do the

2145
02:16:42,529 --> 02:16:52,639
inversion here and we're fine that's

2146
02:16:51,019 --> 02:16:55,429
gonna say like that would have been I

2147
02:16:52,638 --> 02:16:56,718
was strange right and it's just because

2148
02:16:55,429 --> 02:17:00,590
I forgot we were doing that sort of

2149
02:16:56,718 --> 02:17:02,268
preconditioning okay so if we assume

2150
02:17:00,590 --> 02:17:05,058
that we're going to generate the table

2151
02:17:02,269 --> 02:17:06,920
that way then I could also sort of

2152
02:17:05,058 --> 02:17:14,448
eliminate this part of it right so now

2153
02:17:06,920 --> 02:17:16,670
if i went back to HH light prof and i

2154
02:17:14,449 --> 02:17:17,960
compile and test those two routines

2155
02:17:16,670 --> 02:17:19,638
against each other I should get a

2156
02:17:17,959 --> 02:17:23,209
failure because I'm not doing it that

2157
02:17:19,638 --> 02:17:26,089
way right in the second routine but now

2158
02:17:23,209 --> 02:17:36,259
if I pre compute my invar ad so I say

2159
02:17:26,090 --> 02:17:40,639
look in for ad for equals you know 1.0

2160
02:17:36,260 --> 02:17:42,648
divided by r ad for right and then we

2161
02:17:40,638 --> 02:17:47,839
change this to a multiplied by the

2162
02:17:42,648 --> 02:17:51,818
inverse like so then what happens right

2163
02:17:47,840 --> 02:17:54,978
can we get them to match now and we can

2164
02:17:51,818 --> 02:17:56,599
so I think that's worth doing because it

2165
02:17:54,978 --> 02:17:58,448
doesn't really change the quality of the

2166
02:17:56,599 --> 02:18:01,219
result of that much I don't think and

2167
02:17:58,449 --> 02:18:03,829
that makes this serial dependency chain

2168
02:18:01,218 --> 02:18:05,509
less bad because it doesn't have that

2169
02:18:03,829 --> 02:18:08,840
really bad like opt like right at the

2170
02:18:05,510 --> 02:18:13,398
head end so now we're pretty good you

2171
02:18:08,840 --> 02:18:20,279
know 1 2 3 4 5

2172
02:18:13,398 --> 02:18:29,039
six seven eight nine ten ten

2173
02:18:20,279 --> 02:18:31,469
instructions plus the lookups is it the

2174
02:18:29,040 --> 02:18:35,159
most fabulous thing in the world no but

2175
02:18:31,468 --> 02:18:38,818
like if we can trade ten instructions in

2176
02:18:35,158 --> 02:18:41,579
the outer loop in exchange for being

2177
02:18:38,818 --> 02:18:48,840
able to set arbitrarily large grid sizes

2178
02:18:41,579 --> 02:18:51,329
that seems like really good right all

2179
02:18:48,840 --> 02:18:53,670
right so let's go ahead and go to brief

2180
02:18:51,329 --> 02:18:56,420
Q&amp;A tomorrow we'll roll that into the

2181
02:18:53,670 --> 02:18:58,590
loop and we'll see what we get

2182
02:18:56,420 --> 02:19:01,170
because if we can roll that into the

2183
02:18:58,590 --> 02:19:03,389
loop without taking too much of a speed

2184
02:19:01,170 --> 02:19:11,818
hit then we can go widen up the thing

2185
02:19:03,388 --> 02:19:13,348
and being good right could you briefly

2186
02:19:11,818 --> 02:19:14,129
say what the focus of Hameed here was in

2187
02:19:13,349 --> 02:19:18,439
the last three months

2188
02:19:14,129 --> 02:19:21,509
sure basically what we've been doing is

2189
02:19:18,439 --> 02:19:24,779
streamlining and optimizing the lighting

2190
02:19:21,510 --> 02:19:35,519
transport code which is the hardest code

2191
02:19:24,779 --> 02:19:37,319
really in the whole engine so I mean

2192
02:19:35,519 --> 02:19:38,790
it's hard to really summarize everything

2193
02:19:37,318 --> 02:19:41,760
we did because a lot of it's very

2194
02:19:38,790 --> 02:19:43,349
specific like you know a lot of stuff

2195
02:19:41,760 --> 02:19:45,059
about looking at like how something is

2196
02:19:43,349 --> 02:19:48,210
working and what kind of spatial actions

2197
02:19:45,058 --> 02:19:49,318
do we wanted and how do we you know what

2198
02:19:48,209 --> 02:19:50,789
are the ways we can compute something

2199
02:19:49,318 --> 02:19:52,738
and how do we roll that into four wide

2200
02:19:50,790 --> 02:19:55,439
versus three wide versus blah blah blah

2201
02:19:52,738 --> 02:19:57,209
right so I don't know that there's much

2202
02:19:55,439 --> 02:20:00,059
of a summary I can say other than like

2203
02:19:57,209 --> 02:20:02,099
actually looking carefully at code and

2204
02:20:00,059 --> 02:20:03,809
optimizing it was mostly what we were

2205
02:20:02,100 --> 02:20:09,870
doing but the specific steps that we're

2206
02:20:03,809 --> 02:20:10,709
taking are pretty varied right anyway

2207
02:20:09,870 --> 02:20:11,540
I'm glad to hear that you're feeling

2208
02:20:10,709 --> 02:20:16,978
better

2209
02:20:11,540 --> 02:20:18,540
as a separate issue hello Casey this

2210
02:20:16,978 --> 02:20:21,750
question may be off topic but it's

2211
02:20:18,540 --> 02:20:23,550
really important for me okay I know you

2212
02:20:21,750 --> 02:20:25,719
were doing some UI development I saw

2213
02:20:23,549 --> 02:20:28,238
your video on immediate UI mode

2214
02:20:25,719 --> 02:20:30,519
I have the only job opportunities to

2215
02:20:28,238 --> 02:20:32,109
develop UI for mobile app but I've never

2216
02:20:30,520 --> 02:20:34,120
did that and I need this job

2217
02:20:32,109 --> 02:20:36,189
so can you please give me some advice on

2218
02:20:34,120 --> 02:20:38,680
where to find information maybe some

2219
02:20:36,189 --> 02:20:42,130
guys on UI development and we're using a

2220
02:20:38,680 --> 02:20:45,818
library um so I really can't help you

2221
02:20:42,129 --> 02:20:51,420
I'm afraid I don't use like all those

2222
02:20:45,818 --> 02:20:54,278
like mobile nonsense like web UI things

2223
02:20:51,420 --> 02:20:56,500
so like the job that you're gonna be

2224
02:20:54,279 --> 02:20:59,250
trying to get is gonna want you to know

2225
02:20:56,500 --> 02:21:01,840
like react j/s or something right or

2226
02:20:59,250 --> 02:21:05,500
whatever the latest stupid JavaScript

2227
02:21:01,840 --> 02:21:09,370
framework is or like some swift thing

2228
02:21:05,500 --> 02:21:11,590
written I mean you know nonsense code

2229
02:21:09,370 --> 02:21:16,630
built on giant piles of million line

2230
02:21:11,590 --> 02:21:26,620
libraries right and so I would probably

2231
02:21:16,629 --> 02:21:32,349
say if if you can since you obviously

2232
02:21:26,620 --> 02:21:34,149
know if since you obviously know the

2233
02:21:32,350 --> 02:21:41,909
company that you would be getting this

2234
02:21:34,148 --> 02:21:44,889
job opportunity with can you find out

2235
02:21:41,909 --> 02:21:48,939
what kinds of stuff they would probably

2236
02:21:44,889 --> 02:21:51,369
use like can you go see what sort of dev

2237
02:21:48,939 --> 02:21:54,850
they tend to do and then you could look

2238
02:21:51,370 --> 02:21:58,000
to find out what giant pile framework

2239
02:21:54,850 --> 02:22:03,760
they're using just go watch the like

2240
02:21:58,000 --> 02:22:05,590
crappy tutorial on it right because it's

2241
02:22:03,760 --> 02:22:08,409
just gonna be a giant pile of disaster

2242
02:22:05,590 --> 02:22:10,180
and as long as you're just familiarize

2243
02:22:08,409 --> 02:22:12,010
yourself with that pile of disaster

2244
02:22:10,180 --> 02:22:17,139
you'll be as good as anyone else at it

2245
02:22:12,010 --> 02:22:19,659
right so the only advice I can really

2246
02:22:17,139 --> 02:22:22,719
give you is see if you can find out what

2247
02:22:19,659 --> 02:22:25,750
kind of disaster pile this company uses

2248
02:22:22,719 --> 02:22:30,688
for their crappy mobile UI or whatever

2249
02:22:25,750 --> 02:22:30,689
and use you know brush up on that right

2250
02:22:43,440 --> 02:22:49,171
I mean with any luck you can find if

2251
02:22:48,181 --> 02:22:51,210
you're trying to get a job with a

2252
02:22:49,171 --> 02:22:53,790
company you may even be able to find

2253
02:22:51,209 --> 02:22:55,470
some like blog post that they've made

2254
02:22:53,790 --> 02:22:56,881
that says exactly what sort of stuff

2255
02:22:55,470 --> 02:22:59,630
they're using right and then you can

2256
02:22:56,880 --> 02:22:59,630
just make sure you know that

2257
02:23:14,120 --> 02:23:19,520
what's the best way to debug something

2258
02:23:16,200 --> 02:23:24,630
that only happens in optimized code I

2259
02:23:19,521 --> 02:23:26,400
mean I guess I don't know it's the same

2260
02:23:24,630 --> 02:23:28,229
as debugging stuff that happens in debug

2261
02:23:26,400 --> 02:23:30,440
codes just a little harder to read you

2262
02:23:28,229 --> 02:23:33,001
should learn to read assembly language

2263
02:23:30,440 --> 02:23:36,301
obviously because that's typically

2264
02:23:33,001 --> 02:23:38,611
pretty important because the debug

2265
02:23:36,300 --> 02:23:40,140
information that's output with optimized

2266
02:23:38,611 --> 02:23:44,781
code is usually pretty bad so you kind

2267
02:23:40,140 --> 02:23:44,780
of have to be able to follow you know

2268
02:23:45,351 --> 02:23:53,791
but how expensive do you think the table

2269
02:23:52,140 --> 02:23:58,650
lookups are well the well table lookups

2270
02:23:53,790 --> 02:24:03,540
are free you know they're they're either

2271
02:23:58,650 --> 02:24:05,790
one cycle or zero cycles right so

2272
02:24:03,540 --> 02:24:07,860
typically when you're talking about the

2273
02:24:05,790 --> 02:24:11,040
cost of a table lookup you're not

2274
02:24:07,861 --> 02:24:14,311
actually talking about about the lookup

2275
02:24:11,040 --> 02:24:18,930
right you're talking about either the

2276
02:24:14,310 --> 02:24:21,690
cost of computing and putting the offset

2277
02:24:18,931 --> 02:24:25,791
into a general purpose register because

2278
02:24:21,690 --> 02:24:29,931
SSE doesn't have scatter gather or

2279
02:24:25,790 --> 02:24:32,939
you're talking about the cost of the

2280
02:24:29,931 --> 02:24:34,890
amount of l1 cache that the table will

2281
02:24:32,940 --> 02:24:42,091
take up that you then can't use for

2282
02:24:34,890 --> 02:24:44,751
anything else right so like table

2283
02:24:42,091 --> 02:24:51,091
lookups don't cost anything they're free

2284
02:24:44,751 --> 02:24:56,581
so if you magically just had infinite l1

2285
02:24:51,091 --> 02:24:59,251
cache and wouldn't that be nice and you

2286
02:24:56,581 --> 02:25:01,380
could do scatter gather you would just

2287
02:24:59,251 --> 02:25:05,900
always use them if you could because

2288
02:25:01,380 --> 02:25:05,900
they're always free right it's just free

2289
02:25:06,470 --> 02:25:12,900
but the problem is that you care about

2290
02:25:11,130 --> 02:25:16,501
how much space they take up so you have

2291
02:25:12,900 --> 02:25:18,960
to be careful and getting things into

2292
02:25:16,501 --> 02:25:21,601
general-purpose registers costs you

2293
02:25:18,960 --> 02:25:23,540
something and computing that the index

2294
02:25:21,601 --> 02:25:26,131
may cost you something too in this case

2295
02:25:23,540 --> 02:25:26,909
it doesn't really cost us anything above

2296
02:25:26,130 --> 02:25:28,469
what we probably would

2297
02:25:26,909 --> 02:25:31,500
already been doing anyway but but you

2298
02:25:28,469 --> 02:25:33,029
mean the mob mask is not free right so

2299
02:25:31,500 --> 02:25:34,739
you at least have to spend the cycle

2300
02:25:33,030 --> 02:25:39,480
getting it out there before you can even

2301
02:25:34,739 --> 02:25:53,000
use it right I don't know what the

2302
02:25:39,479 --> 02:26:12,060
throughput of mob masks is that's not

2303
02:25:53,000 --> 02:26:17,760
what we're looking for so three cycles

2304
02:26:12,060 --> 02:26:21,659
of latency not that bad right but again

2305
02:26:17,760 --> 02:26:24,601
like way way way more expensive than the

2306
02:26:21,659 --> 02:26:27,209
table lookup right the table lookup is

2307
02:26:24,601 --> 02:26:30,120
either zero is just either is either

2308
02:26:27,209 --> 02:26:32,399
free if it's a memory operand because it

2309
02:26:30,120 --> 02:26:33,960
will just come with the cycle that you

2310
02:26:32,399 --> 02:26:39,359
issued the instruction on right

2311
02:26:33,959 --> 02:26:41,969
presumably and so it's actually it's

2312
02:26:39,360 --> 02:26:43,739
free to issue but we'll have one cycle

2313
02:26:41,969 --> 02:26:44,909
of work to do so you know depending on

2314
02:26:43,739 --> 02:26:46,409
you want to cost that so it's it's

2315
02:26:44,909 --> 02:26:50,940
either free or one cycle depending on

2316
02:26:46,409 --> 02:26:52,229
you look at it but this is three cycles

2317
02:26:50,940 --> 02:26:57,120
just to get the thing in there that I

2318
02:26:52,229 --> 02:26:58,920
need to look it up right so it's you can

2319
02:26:57,120 --> 02:27:01,230
see that like that the table lookup

2320
02:26:58,920 --> 02:27:03,601
isn't the thing usually you usually just

2321
02:27:01,229 --> 02:27:05,369
don't care about that if you're actually

2322
02:27:03,601 --> 02:27:07,550
caring about the cost of the actual

2323
02:27:05,370 --> 02:27:09,630
table lookup something weird is going on

2324
02:27:07,549 --> 02:27:11,429
usually what you care about is the fact

2325
02:27:09,629 --> 02:27:13,079
that the table which will be hot because

2326
02:27:11,430 --> 02:27:14,370
it's always getting looked up into over

2327
02:27:13,079 --> 02:27:16,709
over and over and over and over and over

2328
02:27:14,370 --> 02:27:19,470
and over again however big that table is

2329
02:27:16,709 --> 02:27:21,629
it's just sitting in your l1 and you're

2330
02:27:19,469 --> 02:27:24,149
that's you're using that amount that you

2331
02:27:21,629 --> 02:27:26,369
can't get back right because now your l1

2332
02:27:24,149 --> 02:27:29,699
size that you're using for everything

2333
02:27:26,370 --> 02:27:33,420
else is now smaller so if you magically

2334
02:27:29,700 --> 02:27:35,159
have 128 K of tables all of a sudden

2335
02:27:33,420 --> 02:27:37,560
that you've created you've blown out

2336
02:27:35,159 --> 02:27:40,229
your l1 and your l2 well at least part

2337
02:27:37,560 --> 02:27:40,829
of your l2 and everything's way slower

2338
02:27:40,229 --> 02:27:42,389
now

2339
02:27:40,829 --> 02:27:47,129
because your tables are taking up all of

2340
02:27:42,389 --> 02:27:50,039
your cash right so so it's really more

2341
02:27:47,129 --> 02:27:55,349
about about that you know it's it's it's

2342
02:27:50,040 --> 02:28:04,110
really not about it's usually not about

2343
02:27:55,350 --> 02:28:05,700
the cost of the lookup can you give a

2344
02:28:04,110 --> 02:28:07,409
general idea of how to optimize branches

2345
02:28:05,700 --> 02:28:09,180
out of a function yeah just go look at

2346
02:28:07,409 --> 02:28:13,170
we've done that on Hamming here like a

2347
02:28:09,180 --> 02:28:15,300
bunch times right the concepts very

2348
02:28:13,170 --> 02:28:19,500
simple you just compute both branches

2349
02:28:15,299 --> 02:28:22,229
and then mask the results together based

2350
02:28:19,500 --> 02:28:30,060
on the comparison right so if you have

2351
02:28:22,229 --> 02:28:30,829
you know I mean another way to look at

2352
02:28:30,060 --> 02:28:37,229
it would be

2353
02:28:30,829 --> 02:28:38,729
we even did it today so we did a more

2354
02:28:37,229 --> 02:28:41,340
complicated version which is using a

2355
02:28:38,729 --> 02:28:43,289
table to produce the results usually you

2356
02:28:41,340 --> 02:28:44,370
can get by most things you can get by

2357
02:28:43,290 --> 02:28:47,700
with just doing a mask

2358
02:28:44,370 --> 02:28:52,320
combined but I mean this was the code we

2359
02:28:47,700 --> 02:28:56,190
needed to execute right it's three

2360
02:28:52,319 --> 02:28:57,000
branches if you know the first time

2361
02:28:56,190 --> 02:28:58,200
through the second time through the

2362
02:28:57,000 --> 02:29:00,329
third time through the loop we just

2363
02:28:58,200 --> 02:29:02,900
replace it with a move mask and a table

2364
02:29:00,329 --> 02:29:06,090
right so now there's no branches in here

2365
02:29:02,899 --> 02:29:08,159
somebody you watched me do it right so

2366
02:29:06,090 --> 02:29:10,409
it's basically just the process of

2367
02:29:08,159 --> 02:29:13,440
turning things that used to be branches

2368
02:29:10,409 --> 02:29:17,909
into computations that still produce the

2369
02:29:13,440 --> 02:29:19,620
same result by just doing the work that

2370
02:29:17,909 --> 02:29:24,440
would have happened on all the branches

2371
02:29:19,620 --> 02:29:27,210
and making sure that the equation

2372
02:29:24,440 --> 02:29:30,800
multiplies those out or masks those out

2373
02:29:27,209 --> 02:29:30,799
right and that's it

2374
02:29:48,399 --> 02:29:52,671
hello thank you for all the vids I'm

2375
02:29:50,479 --> 02:29:54,921
aboard see a student that aces hampson

2376
02:29:52,671 --> 02:29:56,451
tapped us know what to do when say

2377
02:29:54,921 --> 02:29:59,060
keishon alright cool

2378
02:29:56,450 --> 02:30:00,620
well glad we could help what kinds of

2379
02:29:59,060 --> 02:30:03,761
things would you like the compiler to do

2380
02:30:00,620 --> 02:30:06,109
to help with this table stuff if any

2381
02:30:03,761 --> 02:30:07,281
John's compile time code execution is

2382
02:30:06,110 --> 02:30:08,810
pretty good because I just write the

2383
02:30:07,281 --> 02:30:12,411
code that generated this table instead

2384
02:30:08,810 --> 02:30:13,550
of generating the table right do you

2385
02:30:12,411 --> 02:30:16,431
swim the compiler excuse me haven't

2386
02:30:13,550 --> 02:30:19,939
tried yeah it's it runs the code at

2387
02:30:16,431 --> 02:30:22,371
compile time but male hash be suitable

2388
02:30:19,940 --> 02:30:24,201
to create a custom UUID it wouldn't be

2389
02:30:22,370 --> 02:30:26,300
part of the UID spec but it could serve

2390
02:30:24,200 --> 02:30:29,229
the same purpose not sure what you mean

2391
02:30:26,300 --> 02:30:29,229
by UUID

2392
02:30:41,671 --> 02:30:51,511
alright I'm gonna I'm gonna end it here

2393
02:30:44,970 --> 02:30:52,470
I should say we'll end there thank you

2394
02:30:51,511 --> 02:30:53,671
everyone for joining me for this sort of

2395
02:30:52,470 --> 02:30:54,899
handmade here at San oppose recording

2396
02:30:53,671 --> 02:30:57,181
with us always if you would like to

2397
02:30:54,899 --> 02:30:59,850
follow on the series at home you can

2398
02:30:57,181 --> 02:31:01,530
always go to handmade hero org and

2399
02:30:59,851 --> 02:31:03,121
pre-order the game because it comes with

2400
02:31:01,530 --> 02:31:05,280
a source code already so you can play

2401
02:31:03,120 --> 02:31:07,409
around with it as we are doing it

2402
02:31:05,280 --> 02:31:11,841
I pretty much set you up for success

2403
02:31:07,409 --> 02:31:15,390
today if you want to go make the routine

2404
02:31:11,841 --> 02:31:17,909
stop tape being table-driven and start

2405
02:31:15,390 --> 02:31:21,181
actually just running the grid steps

2406
02:31:17,909 --> 02:31:23,040
directly because I just did all the work

2407
02:31:21,181 --> 02:31:25,560
and so all we need to do is just now go

2408
02:31:23,040 --> 02:31:26,880
import that work up into the actual grid

2409
02:31:25,560 --> 02:31:28,860
Walker so it stops reading from the

2410
02:31:26,880 --> 02:31:32,340
table and just calculates the stuff in

2411
02:31:28,860 --> 02:31:37,860
line so you could do that if you were so

2412
02:31:32,341 --> 02:31:40,261
inclined so think about it that's about

2413
02:31:37,860 --> 02:31:42,060
it for today I'll be back here tomorrow

2414
02:31:40,261 --> 02:31:42,569
to do exactly that so see if you can

2415
02:31:42,060 --> 02:31:44,581
beat me to it

2416
02:31:42,569 --> 02:31:46,710
until then have fun programming everyone

2417
02:31:44,581 --> 02:31:49,011
and I'll see you on the Internet tegus

2418
02:31:46,710 --> 02:31:49,010
everybody

