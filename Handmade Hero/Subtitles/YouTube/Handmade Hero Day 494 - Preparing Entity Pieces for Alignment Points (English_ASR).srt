1
00:00:00,319 --> 00:00:05,129
hello everyone welcome to handmade Hiro

2
00:00:03,060 --> 00:00:08,400
sure we could a complete game live on

3
00:00:05,129 --> 00:00:13,980
stream we are in the middle of our

4
00:00:08,400 --> 00:00:16,980
campus lop series very very many streams

5
00:00:13,980 --> 00:00:20,189
this end of this month and beginning of

6
00:00:16,980 --> 00:00:26,368
next month we have done all the work to

7
00:00:20,189 --> 00:00:30,390
edit attachment points we I want to say

8
00:00:26,368 --> 00:00:33,659
are pretty much ready to start going in

9
00:00:30,390 --> 00:00:37,259
and getting all our art assets lined up

10
00:00:33,659 --> 00:00:39,599
placed and so on so today on the stream

11
00:00:37,259 --> 00:00:41,030
we want to do is start that process here

12
00:00:39,600 --> 00:00:44,070
are the things that we've got to do

13
00:00:41,030 --> 00:00:45,808
number one we've got to actually start

14
00:00:44,070 --> 00:00:49,530
respecting these alignment points we can

15
00:00:45,808 --> 00:00:51,089
edit them now we don't use them right so

16
00:00:49,530 --> 00:00:52,530
we got to go into the code the entity

17
00:00:51,090 --> 00:00:54,690
code now that we have all this

18
00:00:52,530 --> 00:00:57,239
information about how stuff is going to

19
00:00:54,689 --> 00:01:02,308
be aligned we need to actually use it

20
00:00:57,238 --> 00:01:03,750
right so implement that and that's gonna

21
00:01:02,308 --> 00:01:06,209
require some thought because now we've

22
00:01:03,750 --> 00:01:10,519
we've got stuff we didn't have before

23
00:01:06,209 --> 00:01:12,989
right we now have this this idea of

24
00:01:10,519 --> 00:01:15,329
these pieces that can snap together and

25
00:01:12,989 --> 00:01:17,569
we we more or less have an entire kind

26
00:01:15,329 --> 00:01:20,280
of skeletal system almost like we can

27
00:01:17,569 --> 00:01:22,589
snap bitmaps together kind of

28
00:01:20,280 --> 00:01:25,349
arbitrarily and we can define new ways

29
00:01:22,590 --> 00:01:27,960
that they snap together to we don't need

30
00:01:25,349 --> 00:01:29,158
a lot of that for what we're doing but

31
00:01:27,959 --> 00:01:30,298
it does mean we kind of to think a

32
00:01:29,159 --> 00:01:31,859
little about it like how do we want to

33
00:01:30,299 --> 00:01:33,479
do that okay we got like bodies and

34
00:01:31,859 --> 00:01:36,269
heads so at least we know we want those

35
00:01:33,478 --> 00:01:38,099
points what does that look like inside

36
00:01:36,269 --> 00:01:41,069
the entity startup code and so on right

37
00:01:38,099 --> 00:01:42,959
so we want to go do that so that's what

38
00:01:41,069 --> 00:01:44,398
we're gonna start on today because in

39
00:01:42,959 --> 00:01:46,199
order to even see that things are

40
00:01:44,399 --> 00:01:47,728
working in that our editor actually does

41
00:01:46,200 --> 00:01:51,030
what we think it does we're gonna need

42
00:01:47,728 --> 00:01:53,069
that number two we want to then start

43
00:01:51,030 --> 00:01:54,599
saving those once we can see that

44
00:01:53,069 --> 00:01:57,089
they're doing what we want and we can

45
00:01:54,599 --> 00:02:00,868
actually build the snap together pieces

46
00:01:57,090 --> 00:02:03,630
the way that we want them built we want

47
00:02:00,868 --> 00:02:05,840
to take that and be able to save it and

48
00:02:03,629 --> 00:02:07,798
load it from a intermediate

49
00:02:05,840 --> 00:02:12,150
representation that we can use as a

50
00:02:07,799 --> 00:02:13,920
permanent storage format so just a text

51
00:02:12,150 --> 00:02:16,920
file we kind of talked about this

52
00:02:13,919 --> 00:02:20,939
it's a simple text file format so that

53
00:02:16,919 --> 00:02:23,879
way we can save this along with our

54
00:02:20,939 --> 00:02:27,599
actual input PM G's so that we have a

55
00:02:23,879 --> 00:02:29,789
definitive reference of like here's what

56
00:02:27,599 --> 00:02:33,150
you import to rebuild the hhas from

57
00:02:29,789 --> 00:02:34,739
scratch right so you want to do those

58
00:02:33,150 --> 00:02:36,980
two things and then finally what we'd

59
00:02:34,740 --> 00:02:39,240
like to do is implement that Save button

60
00:02:36,979 --> 00:02:41,399
so that when you hit the Save button in

61
00:02:39,240 --> 00:02:46,890
the editor it updates your hhas

62
00:02:41,400 --> 00:02:50,310
automatically and saves the C the C

63
00:02:46,889 --> 00:02:53,699
style like text thing that that puts

64
00:02:50,310 --> 00:02:55,979
that data into the HHA that you know

65
00:02:53,699 --> 00:02:58,979
that you use as the source file format

66
00:02:55,979 --> 00:03:01,530
so we got a bunch of stuff to do over

67
00:02:58,979 --> 00:03:04,109
the next week and that's what we'd like

68
00:03:01,530 --> 00:03:06,479
to get to because once we've gotten to

69
00:03:04,110 --> 00:03:08,070
that point we should have all the stuff

70
00:03:06,479 --> 00:03:09,299
in the game right then we we should have

71
00:03:08,069 --> 00:03:11,219
all the different characters can be

72
00:03:09,300 --> 00:03:15,030
sitting around or hopping around we can

73
00:03:11,219 --> 00:03:17,849
place them in there we can start working

74
00:03:15,030 --> 00:03:19,439
we can start looking at adding a ground

75
00:03:17,849 --> 00:03:21,509
cover system if we want to because now

76
00:03:19,439 --> 00:03:23,370
we have the ability to like place

77
00:03:21,509 --> 00:03:26,669
alignment points on all of the like

78
00:03:23,370 --> 00:03:27,719
little grasses and things so you know if

79
00:03:26,669 --> 00:03:29,819
you want to think of this in terms of a

80
00:03:27,719 --> 00:03:31,949
tech tree getting this feature done

81
00:03:29,819 --> 00:03:33,539
unlocks a whole set of things we can do

82
00:03:31,949 --> 00:03:36,839
to decorate our world which is really

83
00:03:33,539 --> 00:03:38,129
what we want to be doing is is having

84
00:03:36,840 --> 00:03:41,610
the freedom to decorate our world

85
00:03:38,129 --> 00:03:43,109
however we want to and right now we did

86
00:03:41,610 --> 00:03:44,820
the work to loading all our art assets

87
00:03:43,110 --> 00:03:46,799
but we just been stymied by the fact

88
00:03:44,819 --> 00:03:48,328
that we can't mark them up well now

89
00:03:46,799 --> 00:03:50,610
we're gonna have a lot of opportunities

90
00:03:48,329 --> 00:03:51,810
to mark them up and in addition to

91
00:03:50,610 --> 00:03:55,980
having the opportunities to mark them up

92
00:03:51,810 --> 00:03:57,569
we will also be able to use the editor

93
00:03:55,979 --> 00:03:59,129
code be write to anything else we want

94
00:03:57,569 --> 00:04:00,509
because that editor code is very generic

95
00:03:59,129 --> 00:04:03,629
we could add any kind of editor there

96
00:04:00,509 --> 00:04:07,590
that we wanted I don't know of anything

97
00:04:03,629 --> 00:04:09,120
offhand like I I'm not anticipating that

98
00:04:07,590 --> 00:04:11,189
we need to use it for a lot more stuff

99
00:04:09,120 --> 00:04:13,549
because is a procedurally generated game

100
00:04:11,189 --> 00:04:19,918
so it's not a lot of like editing of

101
00:04:13,549 --> 00:04:21,449
actual levels or anything right so I

102
00:04:19,918 --> 00:04:23,399
don't know that we're gonna need to lean

103
00:04:21,449 --> 00:04:27,209
on it much but I did show you how to

104
00:04:23,399 --> 00:04:29,939
write an easy quick generic UI system

105
00:04:27,209 --> 00:04:32,038
and we used it and so now anything that

106
00:04:29,939 --> 00:04:33,269
we want to edit we can and so we come

107
00:04:32,038 --> 00:04:37,709
across something we were like we'd like

108
00:04:33,269 --> 00:04:40,139
to edit this aspect of our inputs that

109
00:04:37,709 --> 00:04:43,500
will just work because we can slap it

110
00:04:40,139 --> 00:04:45,389
together really simply right so that's

111
00:04:43,500 --> 00:04:47,098
where we're at it's a good time to be

112
00:04:45,389 --> 00:04:49,228
handmade heroing I think because we've

113
00:04:47,098 --> 00:04:50,930
got a lot of possibilities on the

114
00:04:49,228 --> 00:04:53,279
horizon and that's where you want to be

115
00:04:50,930 --> 00:04:55,050
so let's go ahead and take a look at

116
00:04:53,279 --> 00:04:58,348
what I mean when I say that we've got

117
00:04:55,050 --> 00:05:00,810
the editor going but we don't use it and

118
00:04:58,348 --> 00:05:04,139
we'll see what we need to do to start

119
00:05:00,810 --> 00:05:06,478
using it so if I run the game as it

120
00:05:04,139 --> 00:05:08,038
stands right now one of the things you

121
00:05:06,478 --> 00:05:09,359
can see here and you know another thing

122
00:05:08,038 --> 00:05:11,310
we might want to do today I've mentioned

123
00:05:09,360 --> 00:05:13,919
skill times is I want these things to

124
00:05:11,310 --> 00:05:15,538
snap automatically like our debug stuff

125
00:05:13,918 --> 00:05:18,299
that we have here it needs so it could

126
00:05:15,538 --> 00:05:20,009
stand a little clean up but what we have

127
00:05:18,300 --> 00:05:22,470
the ability to do now right is we can

128
00:05:20,009 --> 00:05:26,699
select anything in the world that we

129
00:05:22,470 --> 00:05:28,259
want to look at right and when we select

130
00:05:26,699 --> 00:05:30,750
things in the world what we can then do

131
00:05:28,259 --> 00:05:32,250
is we have a bunch of editor types of

132
00:05:30,750 --> 00:05:33,899
things we could throw in here right now

133
00:05:32,250 --> 00:05:36,089
there's only one thing we edit which is

134
00:05:33,899 --> 00:05:38,519
alignment points we can get a list of

135
00:05:36,089 --> 00:05:41,129
those alignment points here and we can

136
00:05:38,519 --> 00:05:43,500
then manipulate them however we want so

137
00:05:41,129 --> 00:05:46,319
for example I can set this information

138
00:05:43,500 --> 00:05:48,329
so on now this information isn't really

139
00:05:46,319 --> 00:05:50,519
being used although to a certain extent

140
00:05:48,329 --> 00:05:53,579
you could argue that it is so if I go

141
00:05:50,519 --> 00:05:55,680
click on this for example I think that

142
00:05:53,579 --> 00:05:57,300
if we edited some of these things maybe

143
00:05:55,680 --> 00:05:58,949
they would get used I don't know maybe

144
00:05:57,300 --> 00:06:00,900
they're not gonna use it all I really

145
00:05:58,949 --> 00:06:04,590
couldn't tell you it looks like maybe

146
00:06:00,899 --> 00:06:07,019
not I'm not sure so I feel like the

147
00:06:04,589 --> 00:06:08,399
default one maybe would get used I don't

148
00:06:07,019 --> 00:06:10,079
know let's let me let me look in there

149
00:06:08,399 --> 00:06:13,019
and see not sure which one we're

150
00:06:10,079 --> 00:06:14,399
selecting at the moment yeah I don't see

151
00:06:13,019 --> 00:06:16,348
any movement on it so maybe we're not

152
00:06:14,399 --> 00:06:18,500
actually using one of those let me let

153
00:06:16,348 --> 00:06:21,089
me go look at one that's more specific

154
00:06:18,500 --> 00:06:24,589
and let me see so here we're looking

155
00:06:21,089 --> 00:06:24,589
specifically at the cat right

156
00:06:26,600 --> 00:06:31,550
it's kind of ridiculous all these weird

157
00:06:28,459 --> 00:06:33,639
things we've got hopping around here so

158
00:06:31,550 --> 00:06:38,120
if I'm looking at this cat specifically

159
00:06:33,639 --> 00:06:39,560
which is let's see this right here so it

160
00:06:38,120 --> 00:06:42,230
doesn't look like that's even getting

161
00:06:39,560 --> 00:06:44,509
used even as the initial alignment point

162
00:06:42,230 --> 00:06:46,430
now I'm not sure why that is because I

163
00:06:44,509 --> 00:06:48,529
thought we were still using just the

164
00:06:46,430 --> 00:06:51,530
initial alignment point but nothing in

165
00:06:48,529 --> 00:06:54,349
here is actually responding as far as I

166
00:06:51,529 --> 00:06:57,019
can tell and so one of two things is

167
00:06:54,350 --> 00:06:58,939
true either we're not using it I don't

168
00:06:57,019 --> 00:07:01,279
think that's probably true we probably

169
00:06:58,939 --> 00:07:03,469
are using it or it actually gets

170
00:07:01,279 --> 00:07:04,819
mirrored out and I think it's probably

171
00:07:03,470 --> 00:07:08,150
the latter that's happening I think it

172
00:07:04,819 --> 00:07:09,920
kind of gets mirrored out right so what

173
00:07:08,149 --> 00:07:11,929
I'd like to do now is I'd like to go in

174
00:07:09,920 --> 00:07:14,750
there and actually get all of this stuff

175
00:07:11,930 --> 00:07:17,060
hooked up properly first of all we

176
00:07:14,750 --> 00:07:19,490
probably don't want to mirror it anymore

177
00:07:17,060 --> 00:07:23,540
and second of all we probably want to

178
00:07:19,490 --> 00:07:24,560
start looking at ways of well there's a

179
00:07:23,540 --> 00:07:26,210
couple of things we wanna do in fact

180
00:07:24,560 --> 00:07:27,829
this is a good example of why oh saying

181
00:07:26,209 --> 00:07:31,279
we might be the editor to add some

182
00:07:27,829 --> 00:07:33,529
things when we select here you'll notice

183
00:07:31,279 --> 00:07:36,799
it becomes pretty hard to select these

184
00:07:33,529 --> 00:07:39,049
two things separately and like I select

185
00:07:36,800 --> 00:07:41,300
something and I'm just getting a

186
00:07:39,050 --> 00:07:44,000
particular bitmap index but it's hard I

187
00:07:41,300 --> 00:07:46,879
can't really pick from multiple of them

188
00:07:44,000 --> 00:07:49,040
right so another thing we might want to

189
00:07:46,879 --> 00:07:52,279
do is have a list of what the bitmaps

190
00:07:49,040 --> 00:07:54,260
were that you had clicked on so that you

191
00:07:52,279 --> 00:07:55,609
could be more specific about which one

192
00:07:54,259 --> 00:07:58,159
you were editing because there's two of

193
00:07:55,610 --> 00:08:00,020
them right and so that's another feature

194
00:07:58,160 --> 00:08:01,430
we probably have to add to the editor

195
00:08:00,019 --> 00:08:04,490
and again I think we've set ourselves up

196
00:08:01,430 --> 00:08:05,780
to do that well by baking the editor UI

197
00:08:04,490 --> 00:08:07,610
stuff really generic we should be able

198
00:08:05,779 --> 00:08:10,579
to throw that together in no time right

199
00:08:07,610 --> 00:08:12,170
so a lot of stuff there that's what we

200
00:08:10,579 --> 00:08:14,539
want to attack now get these things

201
00:08:12,170 --> 00:08:22,220
actually working that will also allow us

202
00:08:14,540 --> 00:08:24,290
hopefully to import a bunch of other

203
00:08:22,220 --> 00:08:26,990
things into the game so that it can be

204
00:08:24,290 --> 00:08:28,610
more populous right okay so let's take a

205
00:08:26,990 --> 00:08:31,910
look at how these things are actually

206
00:08:28,610 --> 00:08:34,279
being used right now so inside there are

207
00:08:31,910 --> 00:08:36,200
file formats we've got the align points

208
00:08:34,279 --> 00:08:39,259
here's how they're defined we've got a

209
00:08:36,200 --> 00:08:40,430
struct align point it has some members

210
00:08:39,259 --> 00:08:42,889
in it that allow us to say

211
00:08:40,429 --> 00:08:45,379
a percentage alignment feature a size

212
00:08:42,889 --> 00:08:47,179
for the thing like a scaling value and

213
00:08:45,379 --> 00:08:49,370
the type typing to find in one of these

214
00:08:47,179 --> 00:08:51,859
things what is it a lining for example

215
00:08:49,370 --> 00:08:56,000
top of head base of neck or just default

216
00:08:51,860 --> 00:08:58,100
to world things like that we want the

217
00:08:56,000 --> 00:09:02,990
ability to use these things they're not

218
00:08:58,100 --> 00:09:05,389
being used at the moment and I think and

219
00:09:02,990 --> 00:09:06,980
I shouldn't say not being used you can

220
00:09:05,389 --> 00:09:08,838
see that they weren't being used as we

221
00:09:06,980 --> 00:09:10,370
edited them I think the reason for that

222
00:09:08,839 --> 00:09:12,560
is that our current way of using these

223
00:09:10,370 --> 00:09:15,379
align points is fairly anemic I think

224
00:09:12,559 --> 00:09:17,359
what happens in the asset system is when

225
00:09:15,379 --> 00:09:20,750
that gets loaded up so when we actually

226
00:09:17,360 --> 00:09:25,180
go to bring something in what happens is

227
00:09:20,750 --> 00:09:28,940
this loaded bitmap structure here right

228
00:09:25,179 --> 00:09:32,179
you can see that it kind of mirrors a

229
00:09:28,940 --> 00:09:34,190
lot of stuff you know this this thing so

230
00:09:32,179 --> 00:09:35,809
we end up with stuff like the width over

231
00:09:34,190 --> 00:09:39,080
the height the width and the height the

232
00:09:35,809 --> 00:09:42,409
align percentage right that the the data

233
00:09:39,080 --> 00:09:45,230
that was in the bitmap gets lofted up

234
00:09:42,409 --> 00:09:48,949
into here and is generally incorrect

235
00:09:45,230 --> 00:09:52,430
right because if we go back and edit

236
00:09:48,950 --> 00:09:55,670
some of this stuff this becomes wrong

237
00:09:52,429 --> 00:09:58,389
you know I'm saying and so what we

238
00:09:55,669 --> 00:10:02,778
probably want to start doing is not

239
00:09:58,389 --> 00:10:04,278
using this loaded bitmap as that you

240
00:10:02,778 --> 00:10:06,139
know we want to just use the data

241
00:10:04,278 --> 00:10:09,230
directly so I think that will probably

242
00:10:06,139 --> 00:10:11,870
simplify things for us quite a bit now

243
00:10:09,230 --> 00:10:15,980
if I go look at where this sort of stuff

244
00:10:11,870 --> 00:10:18,820
happens you can see in here that we we

245
00:10:15,980 --> 00:10:21,230
have some use of it in the asset system

246
00:10:18,820 --> 00:10:22,520
this is a Dib that's that's our render

247
00:10:21,230 --> 00:10:24,800
of test code and here's the asset

248
00:10:22,519 --> 00:10:27,049
builders hasn't matter if we look in

249
00:10:24,799 --> 00:10:29,539
here that's all if zeroed out code right

250
00:10:27,049 --> 00:10:31,879
that's not relevant and so we come down

251
00:10:29,539 --> 00:10:34,129
here we finally get some information

252
00:10:31,879 --> 00:10:36,528
where we're actually using it it's

253
00:10:34,129 --> 00:10:38,689
pretty straightforward stuff right so

254
00:10:36,528 --> 00:10:42,200
just looking looking at a lot of this

255
00:10:38,690 --> 00:10:44,180
stuff I don't think we really need most

256
00:10:42,200 --> 00:10:46,430
of what's in there so I think what we

257
00:10:44,179 --> 00:10:48,379
want to do is we want to look at now

258
00:10:46,429 --> 00:10:51,379
pairing that back and having people

259
00:10:48,379 --> 00:10:53,328
actually reach in and get that stuff

260
00:10:51,379 --> 00:10:54,169
from the assets a little bit more I

261
00:10:53,328 --> 00:10:57,879
think that

262
00:10:54,169 --> 00:11:00,289
probably more what we would want right

263
00:10:57,879 --> 00:11:02,570
okay so let's take a look at what we

264
00:11:00,289 --> 00:11:05,208
want to do there let's start by seeing

265
00:11:02,570 --> 00:11:06,800
what we can do for some of this stuff if

266
00:11:05,208 --> 00:11:08,838
we got rid of the pitch who would

267
00:11:06,799 --> 00:11:12,379
complain right like who's gonna get

268
00:11:08,839 --> 00:11:15,310
upset about that looking here we've got

269
00:11:12,379 --> 00:11:18,230
the bitmap pitch gets put in there right

270
00:11:15,309 --> 00:11:20,000
it looks like we create the pitch when

271
00:11:18,230 --> 00:11:22,129
we do make empty bitmap I'm not sure

272
00:11:20,000 --> 00:11:25,009
anyone actually calls that who cares

273
00:11:22,129 --> 00:11:26,870
about it let's see here we've got make

274
00:11:25,009 --> 00:11:30,350
sphere normal map we're not using

275
00:11:26,870 --> 00:11:32,899
anymore right so some of this stuff is

276
00:11:30,350 --> 00:11:35,899
just old right sphere diffuse map so I

277
00:11:32,899 --> 00:11:37,909
think these are not add pyramidal right

278
00:11:35,899 --> 00:11:40,370
so these are these are not real things

279
00:11:37,909 --> 00:11:42,259
we're not using them anymore let me look

280
00:11:40,370 --> 00:11:44,899
at make empty bitmap and see if anyone's

281
00:11:42,259 --> 00:11:46,669
using that no one is so I'm just gonna

282
00:11:44,899 --> 00:11:48,820
get rid of these because these are just

283
00:11:46,669 --> 00:11:52,490
old residual code we don't need anymore

284
00:11:48,820 --> 00:11:54,199
if I go ahead and recompile we should

285
00:11:52,490 --> 00:11:56,120
now be at a place where nobody cares

286
00:11:54,198 --> 00:11:57,649
about the pitch at all and so we've

287
00:11:56,120 --> 00:11:59,028
successfully got rid of one of those

288
00:11:57,649 --> 00:12:02,509
members and let's keep trying to pare

289
00:11:59,028 --> 00:12:04,039
that down some more so in terms of who

290
00:12:02,509 --> 00:12:05,708
uses the width and height or the width

291
00:12:04,039 --> 00:12:08,208
over height or the align percentage

292
00:12:05,708 --> 00:12:11,359
again these are things that we could get

293
00:12:08,208 --> 00:12:13,489
by reaching back into the asset the void

294
00:12:11,360 --> 00:12:15,829
memory part here again a lot of this

295
00:12:13,490 --> 00:12:17,209
stuff it's remember we wrote our render

296
00:12:15,828 --> 00:12:20,389
originally to be a soft writer we move

297
00:12:17,208 --> 00:12:24,619
to 3d so now we've got kind of too much

298
00:12:20,389 --> 00:12:27,289
we we support a lot in here because it

299
00:12:24,620 --> 00:12:29,659
was spanning different kinds of systems

300
00:12:27,289 --> 00:12:31,819
we've now got the idea of textures which

301
00:12:29,659 --> 00:12:33,649
means that even in the software renderer

302
00:12:31,820 --> 00:12:35,300
the software renderer would now be a

303
00:12:33,649 --> 00:12:38,600
thing that's that's keeping that texture

304
00:12:35,299 --> 00:12:41,179
memory around so really this stuff as it

305
00:12:38,600 --> 00:12:43,819
stands needs to be changed fairly

306
00:12:41,179 --> 00:12:44,599
radically right and we want to start

307
00:12:43,818 --> 00:12:46,939
looming this up

308
00:12:44,600 --> 00:12:49,278
let's see who's doing what with memory

309
00:12:46,940 --> 00:12:51,620
because I'm not sure I'm just gonna look

310
00:12:49,278 --> 00:12:53,389
through here so you can see that the way

311
00:12:51,620 --> 00:12:55,850
that it works is it uses that as sort of

312
00:12:53,389 --> 00:12:58,639
temporary storage if you will right to

313
00:12:55,850 --> 00:13:00,709
load that to load that stuff in here

314
00:12:58,639 --> 00:13:03,528
rather than just loading it into the

315
00:13:00,708 --> 00:13:06,828
texture and being done with it I'm gonna

316
00:13:03,528 --> 00:13:07,549
let that stand for now but now I know

317
00:13:06,828 --> 00:13:08,929
that that's

318
00:13:07,549 --> 00:13:15,259
true I'm gonna put two do on here it's

319
00:13:08,929 --> 00:13:24,439
like really we only need texture buffers

320
00:13:15,259 --> 00:13:27,828
now because we can really update this

321
00:13:24,440 --> 00:13:29,600
system to basically use just transfer

322
00:13:27,828 --> 00:13:31,609
buffers that we use to shuttle things to

323
00:13:29,600 --> 00:13:33,800
the card and we probably don't need

324
00:13:31,610 --> 00:13:35,329
backing store anymore like this that's

325
00:13:33,799 --> 00:13:38,870
probably just irrelevant for our

326
00:13:35,328 --> 00:13:40,458
purposes so let's keep going when we've

327
00:13:38,870 --> 00:13:42,500
got this width over height and width and

328
00:13:40,458 --> 00:13:44,809
height I want to see who's using I just

329
00:13:42,500 --> 00:13:47,629
want to learn everyone who's using this

330
00:13:44,809 --> 00:13:52,489
stuff so I can have a better handle on

331
00:13:47,629 --> 00:13:53,958
how that's working so let's see what

332
00:13:52,490 --> 00:13:56,659
we've got here you can see here when we

333
00:13:53,958 --> 00:13:58,909
create the texture handle we would have

334
00:13:56,659 --> 00:14:00,500
had the information here so it's really

335
00:13:58,909 --> 00:14:02,240
not that necessary the way that it's

336
00:14:00,500 --> 00:14:04,879
working there so we probably can get rid

337
00:14:02,240 --> 00:14:12,950
of that as well let's take a look width

338
00:14:04,879 --> 00:14:15,049
and height there that actually can come

339
00:14:12,950 --> 00:14:16,640
off of the texture handle now right so

340
00:14:15,049 --> 00:14:18,559
bitmap texture handle would actually

341
00:14:16,639 --> 00:14:20,929
have that information in it so the

342
00:14:18,559 --> 00:14:22,549
texture handle bakes that in and and so

343
00:14:20,929 --> 00:14:25,578
again it's really duplicate information

344
00:14:22,549 --> 00:14:28,370
I'm gonna go ahead and see to what

345
00:14:25,578 --> 00:14:31,729
extent I can really push that like if I

346
00:14:28,370 --> 00:14:34,578
was to get rid of these two what could I

347
00:14:31,730 --> 00:14:38,930
do they're like like can I actually get

348
00:14:34,578 --> 00:14:40,909
rid of those entirely as I go also does

349
00:14:38,929 --> 00:14:42,588
width over height actually need to be

350
00:14:40,909 --> 00:14:44,480
there anymore again since the texture

351
00:14:42,589 --> 00:14:48,050
handle has that information could we

352
00:14:44,480 --> 00:14:49,550
just you know lean on that entirely one

353
00:14:48,049 --> 00:14:51,049
of the things I'm looking at here is is

354
00:14:49,549 --> 00:14:53,139
it possible to really get down to the

355
00:14:51,049 --> 00:14:56,028
fact get down to the point where

356
00:14:53,139 --> 00:14:58,610
renderer texture is all we really use

357
00:14:56,028 --> 00:15:00,439
and this stuff isn't really used at all

358
00:14:58,610 --> 00:15:03,019
anymore like it's loaded bitmap can that

359
00:15:00,440 --> 00:15:04,399
just be render a texture now that's what

360
00:15:03,019 --> 00:15:06,289
I'm looking at that's what I'm aiming at

361
00:15:04,399 --> 00:15:08,448
I don't know how far we'll get we'll see

362
00:15:06,289 --> 00:15:10,669
if we can get there so if we want to

363
00:15:08,448 --> 00:15:12,559
look at the bitmap with bitmap Pyke here

364
00:15:10,669 --> 00:15:14,240
I guess what I would say is we can

365
00:15:12,559 --> 00:15:17,239
actually instead look at that texture

366
00:15:14,240 --> 00:15:19,129
handle right so this texture handle here

367
00:15:17,240 --> 00:15:20,720
where we actually see what the texture

368
00:15:19,129 --> 00:15:23,929
handle is that we're looking at

369
00:15:20,720 --> 00:15:26,870
now this is a renderer texture this is

370
00:15:23,929 --> 00:15:29,449
the texture handle I can actually get

371
00:15:26,870 --> 00:15:31,340
that with them height out myself so if I

372
00:15:29,450 --> 00:15:33,320
want to get the width out I can I can do

373
00:15:31,340 --> 00:15:34,879
that I don't remember exactly how that

374
00:15:33,320 --> 00:15:37,100
works but I'm pretty sure it's pretty

375
00:15:34,879 --> 00:15:39,649
simple yeah it looks like you just pull

376
00:15:37,100 --> 00:15:41,029
it right you just pull it out so another

377
00:15:39,649 --> 00:15:47,259
way you do that actually it would just

378
00:15:41,029 --> 00:15:47,259
be to say texture handle dot width right

379
00:15:49,450 --> 00:15:54,650
and height we just have that baked in

380
00:15:53,120 --> 00:15:56,149
there and so that means in here we can

381
00:15:54,649 --> 00:15:57,799
just say look if the bitmap within

382
00:15:56,149 --> 00:15:59,870
bitmap height that's the same as what we

383
00:15:57,799 --> 00:16:02,629
were doing before and we shouldn't need

384
00:15:59,870 --> 00:16:04,639
anything else same happens here right

385
00:16:02,629 --> 00:16:06,110
this is the same thing

386
00:16:04,639 --> 00:16:07,669
we know what the bitmap width and height

387
00:16:06,110 --> 00:16:09,590
is there because it comes out of texture

388
00:16:07,669 --> 00:16:11,319
handle we don't need not to get it

389
00:16:09,590 --> 00:16:13,670
somewhere else

390
00:16:11,320 --> 00:16:17,300
excuse me

391
00:16:13,669 --> 00:16:19,789
and this now no longer has to happen

392
00:16:17,299 --> 00:16:22,069
either we just know what those two

393
00:16:19,789 --> 00:16:26,959
things are so anyone who was doing that

394
00:16:22,070 --> 00:16:28,220
can just look at those directly and

395
00:16:26,960 --> 00:16:30,350
again that gets baked into the texture

396
00:16:28,220 --> 00:16:32,330
handle which means that we don't need it

397
00:16:30,350 --> 00:16:36,710
there so basically all of these things

398
00:16:32,330 --> 00:16:38,509
can go away right alright so that was

399
00:16:36,710 --> 00:16:41,800
actually very simple getting rid of the

400
00:16:38,509 --> 00:16:45,110
width and height so off that goes

401
00:16:41,799 --> 00:16:48,019
consuming so now we're really just down

402
00:16:45,110 --> 00:16:49,669
to some of the base values in terms of

403
00:16:48,019 --> 00:16:50,899
the align percentage again we want to

404
00:16:49,669 --> 00:16:52,219
start reading out of that array that's

405
00:16:50,899 --> 00:16:56,269
gonna be the most complicated to change

406
00:16:52,220 --> 00:16:57,529
I'm gonna go with over - ow if I compile

407
00:16:56,269 --> 00:16:59,480
without that we'll see who's actually

408
00:16:57,529 --> 00:17:01,399
using it and then we'll see how to

409
00:16:59,480 --> 00:17:03,289
replace it so if I come in here and look

410
00:17:01,399 --> 00:17:04,490
at with over height what we can see is

411
00:17:03,289 --> 00:17:06,709
when we get the bitmap dimension that's

412
00:17:04,490 --> 00:17:08,809
really where that's getting used and

413
00:17:06,709 --> 00:17:10,459
we're using that to just multiply out

414
00:17:08,809 --> 00:17:12,559
when you say how big you want the height

415
00:17:10,459 --> 00:17:14,600
to be we're just using that percentage

416
00:17:12,559 --> 00:17:16,818
here we can reproduce that percentage

417
00:17:14,599 --> 00:17:19,759
pretty easily using some kind of a safe

418
00:17:16,818 --> 00:17:21,289
divide and I think most of time we call

419
00:17:19,759 --> 00:17:23,779
get bitmap dim we've already guarded

420
00:17:21,289 --> 00:17:25,549
against that here in terms of divides by

421
00:17:23,779 --> 00:17:27,529
zero so I think that's probably okay

422
00:17:25,549 --> 00:17:30,200
looking through here we're dividing by

423
00:17:27,529 --> 00:17:32,029
those things anyway so really I think

424
00:17:30,200 --> 00:17:33,950
because we're doing that kind of

425
00:17:32,029 --> 00:17:36,529
prophylactic use it

426
00:17:33,950 --> 00:17:39,319
case I think we can probably say that

427
00:17:36,529 --> 00:17:41,059
this stuff is okay to use in general now

428
00:17:39,319 --> 00:17:43,220
I can probably take that a little bit

429
00:17:41,059 --> 00:17:47,149
further I can look to see who's actually

430
00:17:43,220 --> 00:17:49,610
doing get bitmap Tim just so we have

431
00:17:47,150 --> 00:17:51,230
some idea of who's in charge there you

432
00:17:49,609 --> 00:17:53,059
can see it getting called so right on

433
00:17:51,230 --> 00:17:54,980
push-fit Matic it's called who else is

434
00:17:53,059 --> 00:17:58,129
using it you can see it's use it here

435
00:17:54,980 --> 00:17:59,960
it's being used to get the the XY and

436
00:17:58,130 --> 00:18:01,430
the size there went to make that

437
00:17:59,960 --> 00:18:04,279
rectangle right that's where that's

438
00:18:01,430 --> 00:18:06,080
being used primarily and then in the

439
00:18:04,279 --> 00:18:09,619
debug code it's actually being used

440
00:18:06,079 --> 00:18:11,509
there as well okay looking at how that's

441
00:18:09,619 --> 00:18:13,009
being used though just you know in terms

442
00:18:11,509 --> 00:18:14,089
of figuring out what's going on there

443
00:18:13,009 --> 00:18:16,519
and the bitmap scale and that's where

444
00:18:14,089 --> 00:18:19,609
stuff it's unclear to what extent we

445
00:18:16,519 --> 00:18:22,039
really need that entire call it's a

446
00:18:19,609 --> 00:18:24,229
little bit it looks a little bit

447
00:18:22,039 --> 00:18:27,559
Squinkie in that and then I'm not really

448
00:18:24,230 --> 00:18:33,019
sure to what extent it really needs to

449
00:18:27,559 --> 00:18:36,769
to occur let me let me just check what

450
00:18:33,019 --> 00:18:38,569
it's actually doing yes so looking at

451
00:18:36,769 --> 00:18:41,150
this it's just a way of reproducing

452
00:18:38,569 --> 00:18:44,240
these these sorts of things here the

453
00:18:41,150 --> 00:18:45,950
basis P - to what extent this basis P

454
00:18:44,240 --> 00:18:48,230
get used I'm gonna I'm gonna look at

455
00:18:45,950 --> 00:18:51,140
this a little bit more closely in terms

456
00:18:48,230 --> 00:18:52,960
of of what's happening there so basis P

457
00:18:51,140 --> 00:18:56,870
does this part of the object transform

458
00:18:52,960 --> 00:18:58,130
is that all that's happening who who's

459
00:18:56,869 --> 00:19:01,299
in charge you're like what's going on

460
00:18:58,130 --> 00:19:03,800
with basis P are people using this value

461
00:19:01,299 --> 00:19:06,289
it looks like the min P is getting is

462
00:19:03,799 --> 00:19:08,329
there is anyone else using the basis fee

463
00:19:06,289 --> 00:19:13,369
and furthermore why are we doing it that

464
00:19:08,329 --> 00:19:17,179
way I don't really know let's take a

465
00:19:13,369 --> 00:19:20,329
look so if I if I go out and find the

466
00:19:17,180 --> 00:19:22,660
bitmap that bitmap dim stuff let me go

467
00:19:20,329 --> 00:19:27,619
figure out where that actually happens

468
00:19:22,660 --> 00:19:28,970
bitmap used a bitmap damn looking here

469
00:19:27,619 --> 00:19:30,769
you know what happens if I knock that

470
00:19:28,970 --> 00:19:32,690
out cuz I'm not sure I really want that

471
00:19:30,769 --> 00:19:36,970
to be in there anyway who's actually

472
00:19:32,690 --> 00:19:43,460
using it so you can see it being used in

473
00:19:36,970 --> 00:19:45,079
one place only so we're getting it rid

474
00:19:43,460 --> 00:19:46,549
of that because again I'm trying I want

475
00:19:45,079 --> 00:19:47,388
to compress this code down because a lot

476
00:19:46,549 --> 00:19:49,729
of the stuff is reserved

477
00:19:47,388 --> 00:19:50,718
a lot of it's vestigial remains so you

478
00:19:49,729 --> 00:19:52,999
look at what's happening here this

479
00:19:50,719 --> 00:19:54,828
object transform offset P Dimpy stuff

480
00:19:52,999 --> 00:19:58,429
right you see us doing a vector ad here

481
00:19:54,828 --> 00:20:00,019
why we're doing an XYZ manually if

482
00:19:58,429 --> 00:20:02,089
someone wants to tell me why this isn't

483
00:20:00,019 --> 00:20:04,759
written like this I would love it

484
00:20:02,088 --> 00:20:06,378
because I mean can you see a reason why

485
00:20:04,759 --> 00:20:07,548
I assumed it was because we used to be

486
00:20:06,378 --> 00:20:09,168
doing different things there and now

487
00:20:07,548 --> 00:20:10,668
we're not because we're in 3d that's

488
00:20:09,169 --> 00:20:12,379
totally reasonable but what that means

489
00:20:10,669 --> 00:20:14,778
is that this really should just go down

490
00:20:12,378 --> 00:20:16,218
in here right so that is how we're

491
00:20:14,778 --> 00:20:17,868
getting that basis P out right we're

492
00:20:16,219 --> 00:20:19,909
taking the dim P and adding the object

493
00:20:17,868 --> 00:20:21,528
transform offset so we don't really need

494
00:20:19,909 --> 00:20:23,239
that furthermore it means the object

495
00:20:21,528 --> 00:20:24,648
transform coming in here isn't used

496
00:20:23,239 --> 00:20:26,569
anymore you can see the fact got

497
00:20:24,648 --> 00:20:28,458
eliminated right that was the only place

498
00:20:26,569 --> 00:20:30,858
that that particular thing was actually

499
00:20:28,459 --> 00:20:33,048
being used so once we get to that point

500
00:20:30,858 --> 00:20:34,759
we can be pretty sure that this is

501
00:20:33,048 --> 00:20:36,469
really all we're talking about here that

502
00:20:34,759 --> 00:20:38,659
means this goes away and we're left with

503
00:20:36,469 --> 00:20:41,028
only this it also means that these

504
00:20:38,659 --> 00:20:42,379
things that are being used here we can

505
00:20:41,028 --> 00:20:43,788
be a little bit more careful and take a

506
00:20:42,378 --> 00:20:45,319
look at how they're actually being used

507
00:20:43,788 --> 00:20:48,229
and we might be able to simplify that

508
00:20:45,319 --> 00:20:49,638
down a bit more to but for the moment we

509
00:20:48,229 --> 00:20:51,609
know that that's all we needed for this

510
00:20:49,638 --> 00:20:53,628
so let's go ahead and take a look at

511
00:20:51,608 --> 00:20:55,638
what the other places that we're using

512
00:20:53,628 --> 00:20:58,248
that were and we can go from there

513
00:20:55,638 --> 00:21:00,378
so here's another place that's using the

514
00:20:58,249 --> 00:21:02,149
that get bitmap dim so it doesn't need

515
00:21:00,378 --> 00:21:03,678
this transform which is great because

516
00:21:02,148 --> 00:21:04,968
that was just being created as a dummy

517
00:21:03,679 --> 00:21:07,009
transform there anyway so that

518
00:21:04,969 --> 00:21:09,409
eliminates that piece of code which was

519
00:21:07,009 --> 00:21:11,690
ugly no transform being used here again

520
00:21:09,409 --> 00:21:14,450
same thing where is that no transform

521
00:21:11,690 --> 00:21:15,828
just defined so yeah no one wanted that

522
00:21:14,450 --> 00:21:17,778
in the first place so that's another

523
00:21:15,828 --> 00:21:19,069
great removal against simplifying the

524
00:21:17,778 --> 00:21:19,878
code and getting rid of some stuff that

525
00:21:19,069 --> 00:21:22,128
really shouldn't have been there in the

526
00:21:19,878 --> 00:21:24,078
first place as things got simplified

527
00:21:22,128 --> 00:21:25,848
down it just naturally removed which is

528
00:21:24,078 --> 00:21:28,759
what you want any time to get the weak

529
00:21:25,848 --> 00:21:31,458
key it's a good day so here's our width

530
00:21:28,759 --> 00:21:33,259
over height getting back to the thing we

531
00:21:31,459 --> 00:21:35,719
were actually looking at removing before

532
00:21:33,259 --> 00:21:38,628
so looking at that value this get bitmap

533
00:21:35,719 --> 00:21:39,798
dim as it's being called I think now you

534
00:21:38,628 --> 00:21:42,528
know just looking at what's happening

535
00:21:39,798 --> 00:21:44,028
here we got the the Texel U and V stuff

536
00:21:42,528 --> 00:21:46,009
that's happening down here needs to be

537
00:21:44,028 --> 00:21:47,450
guarded by a bitmap with an bitmap

538
00:21:46,009 --> 00:21:49,608
height call here because we want to make

539
00:21:47,450 --> 00:21:51,319
sure that divide is safe that's the part

540
00:21:49,608 --> 00:21:53,628
that we would have to duplicate in here

541
00:21:51,319 --> 00:21:56,749
so I'm not sure to what extent we want

542
00:21:53,628 --> 00:21:58,878
to propagate that outwards if I look to

543
00:21:56,749 --> 00:22:00,860
see who else is using that get bitmap

544
00:21:58,878 --> 00:22:04,129
dim right we saw where that was

545
00:22:00,859 --> 00:22:06,919
happening when people are calling that

546
00:22:04,130 --> 00:22:09,410
the other places are not guarding

547
00:22:06,920 --> 00:22:11,210
against it what I want to know here is

548
00:22:09,410 --> 00:22:13,850
when we're doing that stuff when we look

549
00:22:11,210 --> 00:22:16,279
at get dim size we're just looking at

550
00:22:13,849 --> 00:22:23,000
doing that multiplication it's it's

551
00:22:16,279 --> 00:22:29,109
basically it's definitely the kind of

552
00:22:23,000 --> 00:22:30,920
thing we're checking that at the outset

553
00:22:29,109 --> 00:22:32,659
makes a little bit of sense because

554
00:22:30,920 --> 00:22:34,960
don't have to do it if every time but I

555
00:22:32,660 --> 00:22:37,340
really don't know that it's worth

556
00:22:34,960 --> 00:22:40,910
storing the value and having to have it

557
00:22:37,339 --> 00:22:42,769
duplicated out like that it just doesn't

558
00:22:40,910 --> 00:22:45,440
make a lot of sense it seems like better

559
00:22:42,769 --> 00:22:50,359
to just do the divide every time because

560
00:22:45,440 --> 00:22:52,009
it's really not that expensive to take

561
00:22:50,359 --> 00:22:55,099
that reciprocal and it can be a fake

562
00:22:52,009 --> 00:22:56,660
divide it could be a reciprocal so you

563
00:22:55,099 --> 00:22:58,939
know for example if we go to the Intel

564
00:22:56,660 --> 00:23:01,340
intrinsics guide here you know divides

565
00:22:58,940 --> 00:23:03,048
traditionally we're very expensive and

566
00:23:01,339 --> 00:23:05,539
so sometimes you get in the habit of

567
00:23:03,048 --> 00:23:08,240
trying to avoid them but if you take a

568
00:23:05,539 --> 00:23:09,589
look at the cost of them here so if I

569
00:23:08,240 --> 00:23:12,169
want to do a divide you can see

570
00:23:09,589 --> 00:23:13,339
generally speaking actually the

571
00:23:12,169 --> 00:23:15,230
throughput it's not that bad especially

572
00:23:13,339 --> 00:23:16,909
on sky like the latency is only 11

573
00:23:15,230 --> 00:23:19,160
cycles really not that bad and

574
00:23:16,910 --> 00:23:23,900
throughputs very good actually but

575
00:23:19,160 --> 00:23:26,600
furthermore reciprocal where if you want

576
00:23:23,900 --> 00:23:29,450
to do a poor-man's divide for example

577
00:23:26,599 --> 00:23:32,000
here you can see here on skylake you've

578
00:23:29,450 --> 00:23:34,940
got a pretty good throughput on there as

579
00:23:32,000 --> 00:23:37,099
well the latency amusingly enough is

580
00:23:34,940 --> 00:23:40,070
actually not that much better than the

581
00:23:37,099 --> 00:23:43,849
regular divide right on the the div PS

582
00:23:40,069 --> 00:23:46,879
it's it's you know 11 versus 4 it's

583
00:23:43,849 --> 00:23:50,149
obviously bad but neither are good right

584
00:23:46,880 --> 00:23:51,980
so if 4 cycle is is still you know

585
00:23:50,150 --> 00:23:53,450
forever latency but that's ok because

586
00:23:51,980 --> 00:23:55,900
you know our bread and butter things

587
00:23:53,450 --> 00:23:58,340
multi s there for cycle latency as well

588
00:23:55,900 --> 00:24:00,230
so generally speaking you know

589
00:23:58,339 --> 00:24:01,548
reciprocal not that bad

590
00:24:00,230 --> 00:24:04,000
I guess it's all I'm trying to say it's

591
00:24:01,548 --> 00:24:07,579
it's really not that much different than

592
00:24:04,000 --> 00:24:09,380
then a basic multiply it's it's gonna be

593
00:24:07,579 --> 00:24:14,028
about the same only instead of issuing 2

594
00:24:09,380 --> 00:24:16,340
per cycle it going through 1 so I

595
00:24:14,028 --> 00:24:19,278
that divide really not that bad so maybe

596
00:24:16,339 --> 00:24:22,098
again at the just for simplicity's sake

597
00:24:19,278 --> 00:24:23,898
I feel like it would be nice to make

598
00:24:22,098 --> 00:24:24,950
that be something that you don't have to

599
00:24:23,898 --> 00:24:26,089
worry about anymore and this this

600
00:24:24,950 --> 00:24:30,109
wouldn't have to be stored anymore

601
00:24:26,089 --> 00:24:32,569
mm-hmm and so that's what we're really

602
00:24:30,108 --> 00:24:34,548
looking at here now what I'm thinking is

603
00:24:32,569 --> 00:24:36,979
that when we go to do a get bitmap here

604
00:24:34,548 --> 00:24:39,288
and we look at the and we do the get

605
00:24:36,979 --> 00:24:45,769
that mapped in here

606
00:24:39,288 --> 00:24:47,960
here's it see if I can find here's the

607
00:24:45,769 --> 00:24:50,058
other place that we use it and what you

608
00:24:47,960 --> 00:24:53,298
can see there is it's actually using

609
00:24:50,058 --> 00:24:55,519
some slightly different things it's

610
00:24:53,298 --> 00:24:57,378
taking that bitmap scale and it's using

611
00:24:55,519 --> 00:25:00,048
it to compute the full dimensions so

612
00:24:57,378 --> 00:25:04,398
it's more doing the full push bitmap

613
00:25:00,048 --> 00:25:07,158
kind of a call to draw it here it's it's

614
00:25:04,398 --> 00:25:16,069
mostly doing the same thing that we were

615
00:25:07,159 --> 00:25:19,460
trying to do before so yeah like it

616
00:25:16,069 --> 00:25:21,710
looks like the get bitmap Tim stuff I I

617
00:25:19,460 --> 00:25:23,269
don't know I'm really having a hard time

618
00:25:21,710 --> 00:25:25,489
deciding how I want to do this I'm

619
00:25:23,269 --> 00:25:32,058
almost thinking that you you know you

620
00:25:25,489 --> 00:25:33,108
want to kind of make this I'm just

621
00:25:32,058 --> 00:25:33,579
trying to think if I want to anything

622
00:25:33,108 --> 00:25:41,210
else

623
00:25:33,579 --> 00:25:45,678
fancy here or not I I'll leave it how it

624
00:25:41,210 --> 00:25:47,598
is let's just go with it for notes let's

625
00:25:45,679 --> 00:25:49,070
just go with it for now so if I want to

626
00:25:47,598 --> 00:25:50,749
recreate with over height here the

627
00:25:49,069 --> 00:25:53,239
basically what I'm do is say look let's

628
00:25:50,749 --> 00:25:56,358
assume that things square for now what

629
00:25:53,239 --> 00:26:00,499
we'll do then is say okay if I can like

630
00:25:56,358 --> 00:26:03,348
if it's okay to use an inversion right

631
00:26:00,499 --> 00:26:07,249
so if it's okay to look at that that

632
00:26:03,348 --> 00:26:11,239
bitmap with then then I'll do the

633
00:26:07,249 --> 00:26:15,469
inversion and if not I won't so in here

634
00:26:11,239 --> 00:26:18,338
you know we need that in here when we're

635
00:26:15,469 --> 00:26:21,558
looking at using the texture handle I

636
00:26:18,338 --> 00:26:23,509
think we want this kind of call to be a

637
00:26:21,558 --> 00:26:25,759
little bit more specific about how it's

638
00:26:23,509 --> 00:26:27,169
doing that texture handle because you

639
00:26:25,759 --> 00:26:27,630
know this code will execute whether or

640
00:26:27,169 --> 00:26:30,690
not how

641
00:26:27,630 --> 00:26:33,930
texture handle yet or not maybe that's

642
00:26:30,690 --> 00:26:36,779
not a problem I don't know hard to say

643
00:26:33,930 --> 00:26:38,430
what I will say also is how we're

644
00:26:36,779 --> 00:26:40,369
assigning texture handles is probably

645
00:26:38,430 --> 00:26:42,600
broken right now too

646
00:26:40,369 --> 00:26:44,639
because nowadays we could assign a

647
00:26:42,599 --> 00:26:46,289
texture handle immediately even though

648
00:26:44,640 --> 00:26:47,940
there's no texture backing the texture

649
00:26:46,289 --> 00:26:48,930
handle and we would want to do that

650
00:26:47,940 --> 00:26:50,970
because we eliminate a lot of

651
00:26:48,930 --> 00:26:52,380
complexities in this call for example

652
00:26:50,970 --> 00:26:54,180
just to give you a little bit of a taste

653
00:26:52,380 --> 00:26:55,800
of what I'm talking about here if I look

654
00:26:54,180 --> 00:26:57,539
at the asset system and you look at get

655
00:26:55,799 --> 00:26:59,369
bitmap here where you're calling this

656
00:26:57,539 --> 00:27:01,680
get bitmap and you might return to zero

657
00:26:59,369 --> 00:27:03,239
you can see it returning a zero here we

658
00:27:01,680 --> 00:27:04,799
could change this into a render to

659
00:27:03,240 --> 00:27:06,569
texture call where you actually always

660
00:27:04,799 --> 00:27:11,519
get the texture back every time you call

661
00:27:06,569 --> 00:27:14,189
it because it always allows you it would

662
00:27:11,519 --> 00:27:16,500
always allow you to pack a texture

663
00:27:14,190 --> 00:27:20,100
handle back with the width and height of

664
00:27:16,500 --> 00:27:22,619
that bitmap right and so I feel like you

665
00:27:20,099 --> 00:27:25,559
know this code really could stand some

666
00:27:22,619 --> 00:27:27,449
improvement we haven't done it yet but

667
00:27:25,559 --> 00:27:31,349
it really could get simpler than it is

668
00:27:27,450 --> 00:27:33,569
right now it could get a lot better than

669
00:27:31,349 --> 00:27:35,639
it is right now but I'm just gonna I'm

670
00:27:33,569 --> 00:27:37,500
gonna always assume that the texture

671
00:27:35,640 --> 00:27:39,930
handle is valid because it always should

672
00:27:37,500 --> 00:27:42,630
be valid in the future and even if it's

673
00:27:39,930 --> 00:27:44,130
not valid the computation won't fail if

674
00:27:42,630 --> 00:27:45,390
there's just a bogus width and height in

675
00:27:44,130 --> 00:27:46,710
there you'll just get the wrong with an

676
00:27:45,390 --> 00:27:48,180
height through bitmap but if it wasn't

677
00:27:46,710 --> 00:27:50,250
loaded you won't draw it anyway so it

678
00:27:48,180 --> 00:27:51,509
doesn't really matter so I'm going to

679
00:27:50,250 --> 00:27:53,640
assume that we can get that information

680
00:27:51,509 --> 00:27:55,710
out so I'm gonna take the texture handle

681
00:27:53,640 --> 00:27:57,900
here and I'm gonna say that we can get

682
00:27:55,710 --> 00:28:01,170
that out of it here's that happening

683
00:27:57,900 --> 00:28:04,410
right here I'm gonna say if that texture

684
00:28:01,170 --> 00:28:06,840
handle has a width that's valid then we

685
00:28:04,410 --> 00:28:08,670
can produce a width over height that's

686
00:28:06,839 --> 00:28:13,740
valid because we can save the texture

687
00:28:08,670 --> 00:28:16,050
handle and you know what looking at it

688
00:28:13,740 --> 00:28:20,329
here it's really only the height that

689
00:28:16,049 --> 00:28:28,109
needs to be valid right so I'm not sure

690
00:28:20,329 --> 00:28:28,529
really why we're doing that but so there

691
00:28:28,109 --> 00:28:29,639
we go

692
00:28:28,529 --> 00:28:30,809
that's what we actually want to test

693
00:28:29,640 --> 00:28:32,150
because we don't care the width could be

694
00:28:30,809 --> 00:28:34,559
zero and that's totally fine

695
00:28:32,150 --> 00:28:36,960
so this is how we would produce that on

696
00:28:34,559 --> 00:28:39,929
the fly you know and our fallback will

697
00:28:36,960 --> 00:28:41,548
just be one because then it'll just well

698
00:28:39,930 --> 00:28:43,409
if the height was it doesn't matter

699
00:28:41,548 --> 00:28:44,730
one it could be zero either either war

700
00:28:43,409 --> 00:28:46,470
will produce the right result here

701
00:28:44,730 --> 00:28:48,149
because either we'll take one and

702
00:28:46,470 --> 00:28:50,249
multiply up by zero or I'm sorry either

703
00:28:48,148 --> 00:28:51,898
we'll take 0 and multiply it by 1 or 0

704
00:28:50,249 --> 00:28:53,159
multiplied by zero but either one it's

705
00:28:51,898 --> 00:28:56,998
gonna produce a 0 so it doesn't really

706
00:28:53,159 --> 00:28:58,409
matter what it's set to right so that

707
00:28:56,999 --> 00:29:00,210
would solve that problem and then we

708
00:28:58,409 --> 00:29:01,980
don't have any accessing of that

709
00:29:00,210 --> 00:29:05,220
particular piece of information anymore

710
00:29:01,980 --> 00:29:09,089
actually anywhere I suppose so let's

711
00:29:05,220 --> 00:29:12,808
move forward a little bit on that remove

712
00:29:09,089 --> 00:29:19,499
that now and you can remove this

713
00:29:12,808 --> 00:29:21,329
entirely right okay so the bit met with

714
00:29:19,499 --> 00:29:23,759
my height stuff that happens here that

715
00:29:21,329 --> 00:29:26,069
all flows properly now let's make sure

716
00:29:23,759 --> 00:29:28,048
we can run still so then screw anything

717
00:29:26,069 --> 00:29:29,489
up just make sure all of our bitmaps are

718
00:29:28,048 --> 00:29:33,058
still there they all are and they all

719
00:29:29,489 --> 00:29:34,788
look right and so now let's finish this

720
00:29:33,058 --> 00:29:37,108
off by saying well we're down to just

721
00:29:34,788 --> 00:29:38,908
you know we want to get rid of some of

722
00:29:37,108 --> 00:29:40,858
these things we're gonna leave this one

723
00:29:38,909 --> 00:29:42,239
in for now but but we're pretty much

724
00:29:40,858 --> 00:29:45,239
want to get down to just passing the

725
00:29:42,239 --> 00:29:46,590
renderer that texture handle there so

726
00:29:45,239 --> 00:29:47,788
now we're down to the one that we really

727
00:29:46,589 --> 00:29:50,069
wanted to work on in the first place

728
00:29:47,788 --> 00:29:51,298
which is a line percentage and that's

729
00:29:50,069 --> 00:29:52,230
gonna be the hardest one to work with

730
00:29:51,298 --> 00:29:53,548
because now we have to have to think

731
00:29:52,230 --> 00:29:55,798
about where that's gonna come from for

732
00:29:53,548 --> 00:29:56,849
real so you can see here when we call

733
00:29:55,798 --> 00:29:59,038
get bitmap in we're going to need to

734
00:29:56,849 --> 00:30:01,259
pass in that a line percentage and

735
00:29:59,038 --> 00:30:03,658
you're gonna see as we look through here

736
00:30:01,259 --> 00:30:07,259
we kind of have some special-purpose

737
00:30:03,659 --> 00:30:08,580
stuff going on when we do load we're

738
00:30:07,259 --> 00:30:10,499
calling get P percent on one of these

739
00:30:08,579 --> 00:30:13,798
line points or to set that a line

740
00:30:10,499 --> 00:30:16,409
percentage up the problem is now this is

741
00:30:13,798 --> 00:30:17,579
not the place to do that anymore why is

742
00:30:16,409 --> 00:30:19,289
it not the place to do that because our

743
00:30:17,579 --> 00:30:21,449
bitmaps have multiple attachment points

744
00:30:19,288 --> 00:30:23,489
we cannot assume when we load a bitmap

745
00:30:21,450 --> 00:30:24,629
that we know which attachment point

746
00:30:23,489 --> 00:30:25,710
people are going to want to use because

747
00:30:24,628 --> 00:30:27,148
you're gonna want to use multiple of

748
00:30:25,710 --> 00:30:28,499
them depending on the circumstances for

749
00:30:27,148 --> 00:30:29,459
example if I have a head that's loading

750
00:30:28,499 --> 00:30:31,230
in midair I might use a different

751
00:30:29,460 --> 00:30:33,210
attachment point that if I have a head

752
00:30:31,230 --> 00:30:34,649
that's attached to a body blah blah blah

753
00:30:33,210 --> 00:30:36,419
blah blah right so we want to be able to

754
00:30:34,648 --> 00:30:38,038
have different line points furthermore

755
00:30:36,419 --> 00:30:40,739
we need to be able to access alignment

756
00:30:38,038 --> 00:30:42,960
points that are not necessarily related

757
00:30:40,739 --> 00:30:44,669
to the attaching of things maybe there

758
00:30:42,960 --> 00:30:46,019
are just points that we specify in there

759
00:30:44,669 --> 00:30:47,580
they're used for a spawning special

760
00:30:46,019 --> 00:30:50,159
effects things like this so that needs

761
00:30:47,579 --> 00:30:51,449
to be a more general purpose thing and

762
00:30:50,159 --> 00:30:53,159
you can see our to do right there I'm

763
00:30:51,450 --> 00:30:54,690
gonna start by just nuking it it's like

764
00:30:53,159 --> 00:30:55,850
goodbye it's gone so now we're gonna

765
00:30:54,690 --> 00:30:58,820
force everyone

766
00:30:55,849 --> 00:31:00,918
who was looking at that to do something

767
00:30:58,819 --> 00:31:03,379
better that's gonna force it up the

768
00:31:00,919 --> 00:31:05,000
chain of command and we're pushing back

769
00:31:03,380 --> 00:31:06,679
who needs to think about a line

770
00:31:05,000 --> 00:31:08,929
representation that will complicate the

771
00:31:06,679 --> 00:31:10,490
outer part of our code but that's what

772
00:31:08,929 --> 00:31:11,809
we actually want now because that outer

773
00:31:10,490 --> 00:31:14,000
part of code needs to actually be aware

774
00:31:11,808 --> 00:31:15,769
it needs to think about how it's trying

775
00:31:14,000 --> 00:31:17,808
to align things and it needs to actually

776
00:31:15,769 --> 00:31:19,490
work at a higher level and that's what

777
00:31:17,808 --> 00:31:20,869
we're trying to do so it's gonna make

778
00:31:19,490 --> 00:31:22,970
our little hour cob day but we need it

779
00:31:20,869 --> 00:31:24,109
to be that's the point and so that's why

780
00:31:22,970 --> 00:31:27,380
I'm pushing this up the chain of command

781
00:31:24,109 --> 00:31:28,879
that's intentional right so what we see

782
00:31:27,380 --> 00:31:30,590
here is in order to do this alignment we

783
00:31:28,880 --> 00:31:32,510
are gonna need some alignment percentage

784
00:31:30,589 --> 00:31:34,399
what we need to do is again push it up

785
00:31:32,509 --> 00:31:37,158
the chain of command say look when you

786
00:31:34,400 --> 00:31:38,570
pass this in instead of passing us a c'

787
00:31:37,159 --> 00:31:41,059
line now which is just a constant

788
00:31:38,569 --> 00:31:44,538
multiplies what you are trying to align

789
00:31:41,058 --> 00:31:47,058
pass us the entire alignment right so

790
00:31:44,538 --> 00:31:51,319
give us this alignment percentage as an

791
00:31:47,058 --> 00:31:53,089
actual v2 that we will apply and you are

792
00:31:51,319 --> 00:31:54,500
responsible for figuring out where

793
00:31:53,089 --> 00:31:55,609
that's going to come from it's not a

794
00:31:54,500 --> 00:31:58,130
default parameter because his groin

795
00:31:55,609 --> 00:31:59,959
Eve's husband in every single bitmap you

796
00:31:58,130 --> 00:32:02,240
need to pass it in to us so when we get

797
00:31:59,960 --> 00:32:04,700
down here you can see again it's just

798
00:32:02,240 --> 00:32:07,038
gonna it's just bumping up the chain of

799
00:32:04,700 --> 00:32:09,590
command the people out sign of push

800
00:32:07,038 --> 00:32:12,769
bitmap calls now need to pass this in as

801
00:32:09,589 --> 00:32:15,589
what is the actual alignment that you

802
00:32:12,769 --> 00:32:19,158
want you don't have the option anymore

803
00:32:15,589 --> 00:32:20,418
of lollygagging on that it's going to

804
00:32:19,159 --> 00:32:23,179
have to come in that means we're gonna

805
00:32:20,419 --> 00:32:25,850
move it up past the color which is

806
00:32:23,179 --> 00:32:27,350
something you didn't have to pass in so

807
00:32:25,849 --> 00:32:28,939
these default parameters here that we

808
00:32:27,349 --> 00:32:30,798
will still allow to be default the

809
00:32:28,940 --> 00:32:32,360
aligned percentage is no longer one of

810
00:32:30,798 --> 00:32:34,129
them that means that's gonna get passed

811
00:32:32,359 --> 00:32:36,408
through here instead of see line there's

812
00:32:34,130 --> 00:32:39,530
the aligned percentage now everyone who

813
00:32:36,409 --> 00:32:42,020
calls that push bitmap call which is

814
00:32:39,529 --> 00:32:44,000
only the one that's used for sprites has

815
00:32:42,019 --> 00:32:44,480
to know what's going on that's totally

816
00:32:44,000 --> 00:32:47,058
fine

817
00:32:44,480 --> 00:32:48,890
that's what we want so it's all good we

818
00:32:47,058 --> 00:32:50,269
look in here and we see again we're just

819
00:32:48,890 --> 00:32:52,009
bumping it up the chain of command

820
00:32:50,269 --> 00:32:54,379
here's that see line again it was the

821
00:32:52,009 --> 00:32:56,839
same call here we're just gonna go ahead

822
00:32:54,380 --> 00:32:58,880
and grab that and I'm gonna push it back

823
00:32:56,839 --> 00:33:01,339
behind the rest of the default

824
00:32:58,880 --> 00:33:05,659
parameters so that we can actually have

825
00:33:01,339 --> 00:33:06,889
it passed from the the outermost scope

826
00:33:05,659 --> 00:33:08,090
of the code right because that's the

827
00:33:06,890 --> 00:33:08,930
part that needs to start thinking about

828
00:33:08,089 --> 00:33:10,369
those alignments

829
00:33:08,930 --> 00:33:12,380
just and that's the part that's gonna

830
00:33:10,369 --> 00:33:15,199
get more complex now that it has to

831
00:33:12,380 --> 00:33:16,880
think about that okay so let's see who's

832
00:33:15,200 --> 00:33:19,160
actually using that or at the align

833
00:33:16,880 --> 00:33:21,560
percentage is in the wrong place got to

834
00:33:19,160 --> 00:33:23,509
be over here now we've got our push

835
00:33:21,559 --> 00:33:27,589
bitmap call oh you know what let's use

836
00:33:23,509 --> 00:33:29,359
that flag let's use that flag someone in

837
00:33:27,589 --> 00:33:31,730
the pre stream told us about minus WL

838
00:33:29,359 --> 00:33:35,389
let's use that flag to get rid of oh

839
00:33:31,730 --> 00:33:37,610
look at it look at it look at how much

840
00:33:35,390 --> 00:33:39,920
nicer it is thank you

841
00:33:37,609 --> 00:33:43,669
visual studio team for having minus WL

842
00:33:39,920 --> 00:33:46,190
thank you that is very nice okay so

843
00:33:43,670 --> 00:33:47,600
here's the push bitmap call where's it

844
00:33:46,190 --> 00:33:50,840
happening it's happening in a particle

845
00:33:47,599 --> 00:33:51,980
system right so one of things we don't

846
00:33:50,839 --> 00:33:53,599
want to do it apart though system is

847
00:33:51,980 --> 00:33:56,299
have a lot of cost per particle this

848
00:33:53,599 --> 00:33:57,949
call will probably become simpler in the

849
00:33:56,299 --> 00:33:59,750
future I don't care about the particles

850
00:33:57,950 --> 00:34:03,830
right now I'm just gonna sub that in as

851
00:33:59,750 --> 00:34:06,049
a v2 0.5 0.5 that may just be fine for

852
00:34:03,829 --> 00:34:06,589
most particles anyway and so we'll just

853
00:34:06,049 --> 00:34:10,880
leave it at that

854
00:34:06,589 --> 00:34:12,799
um what did I do wrong there is that the

855
00:34:10,880 --> 00:34:15,099
see aligned value that's the see aligned

856
00:34:12,800 --> 00:34:17,980
value so that needs to go away as well

857
00:34:15,099 --> 00:34:27,099
so it actually needs to look like that

858
00:34:17,980 --> 00:34:29,429
probably what's the render group of

859
00:34:27,099 --> 00:34:30,880
transform bitmap ID

860
00:34:29,429 --> 00:34:40,240
[Music]

861
00:34:30,880 --> 00:34:40,240
what's that real 32 I don't know

862
00:34:52,260 --> 00:35:00,400
all right so look in here we've got oh

863
00:34:57,699 --> 00:35:02,049
its height that's what it is so we do

864
00:35:00,400 --> 00:35:03,910
need that one point now in here so we

865
00:35:02,050 --> 00:35:05,350
need the P we need the one point O then

866
00:35:03,909 --> 00:35:07,420
we need the color and that should do it

867
00:35:05,349 --> 00:35:10,029
so I think that's all we really need

868
00:35:07,420 --> 00:35:11,950
there is there something wait I not get

869
00:35:10,030 --> 00:35:14,710
them all there's the group there's a

870
00:35:11,949 --> 00:35:18,929
transform there's the bitmap

871
00:35:14,710 --> 00:35:18,929
oh that's bitmap IDs sorry it's this one

872
00:35:19,650 --> 00:35:26,500
bitmap ID there's the height the offset

873
00:35:23,530 --> 00:35:30,280
we don't actually need so I'm not sure

874
00:35:26,500 --> 00:35:32,019
what we were doing there what was

875
00:35:30,280 --> 00:35:39,540
getting passed there what was what were

876
00:35:32,019 --> 00:35:45,639
we passing here what was the call 1.0 P

877
00:35:39,539 --> 00:35:46,779
and C okay too many parameters these

878
00:35:45,639 --> 00:35:49,659
render functions that's how it always

879
00:35:46,780 --> 00:35:52,630
does render functions unfortunately all

880
00:35:49,659 --> 00:35:54,129
right so moving forward here's another

881
00:35:52,630 --> 00:35:56,349
one of those calls there's the color

882
00:35:54,130 --> 00:35:58,750
right this is the stuff that's going to

883
00:35:56,349 --> 00:36:00,759
need the actual alignment point so I'm

884
00:35:58,750 --> 00:36:02,860
gonna say like a line percentage here

885
00:36:00,760 --> 00:36:04,630
and I'm just going to come out here and

886
00:36:02,860 --> 00:36:06,940
say there's the align percentage and

887
00:36:04,630 --> 00:36:08,320
that's what we actually need to set at

888
00:36:06,940 --> 00:36:10,240
the moment I'm just going to set it to a

889
00:36:08,320 --> 00:36:17,590
bogus value but this is the place where

890
00:36:10,239 --> 00:36:20,769
our code will become more complicated so

891
00:36:17,590 --> 00:36:21,370
in terms of that I think we're good to

892
00:36:20,769 --> 00:36:23,320
go

893
00:36:21,369 --> 00:36:28,299
we need this to take the alignment

894
00:36:23,320 --> 00:36:35,410
percentage in the right place I thought

895
00:36:28,300 --> 00:36:37,750
it was a line percentage color I'm just

896
00:36:35,409 --> 00:36:39,639
having trouble remembering that function

897
00:36:37,750 --> 00:36:42,400
for some reason so spit meant by D

898
00:36:39,639 --> 00:36:44,469
there's the height there's the offset

899
00:36:42,400 --> 00:36:48,690
there's the align percentage there's the

900
00:36:44,469 --> 00:36:48,689
color we don't need that anymore

901
00:36:50,219 --> 00:37:00,409
and next this is just our basic layer

902
00:36:55,019 --> 00:37:03,900
rendering stuff so yeah that actually is

903
00:37:00,409 --> 00:37:06,809
just needs to have the alignment point

904
00:37:03,900 --> 00:37:08,940
specified here again that needs to be

905
00:37:06,809 --> 00:37:24,739
looked up in here somewhere so we'll put

906
00:37:08,940 --> 00:37:27,420
it to do in there there we go and

907
00:37:24,739 --> 00:37:28,859
honestly those don't really need to

908
00:37:27,420 --> 00:37:30,720
probably looks up because we don't edit

909
00:37:28,860 --> 00:37:32,670
those those were always always those

910
00:37:30,719 --> 00:37:35,849
were always set to just 0.5 and that was

911
00:37:32,670 --> 00:37:37,380
it so you know unclear whether we really

912
00:37:35,849 --> 00:37:39,559
care about that or how much we really

913
00:37:37,380 --> 00:37:42,119
care about that but you know whatever

914
00:37:39,559 --> 00:37:43,590
ensuing here we can sort of get the

915
00:37:42,119 --> 00:37:45,359
first align point one of the things we

916
00:37:43,590 --> 00:37:46,980
could do is just for fonts we could just

917
00:37:45,360 --> 00:37:49,320
say it's always the first alignment

918
00:37:46,980 --> 00:37:51,780
point you know what I mean so when we

919
00:37:49,320 --> 00:37:54,000
actually have the bitmap info in

920
00:37:51,780 --> 00:37:57,720
question the bitmap info we could just

921
00:37:54,000 --> 00:37:59,429
say like get default alignment or get

922
00:37:57,719 --> 00:38:01,739
you know first align or something like

923
00:37:59,429 --> 00:38:04,049
that so we could actually say that we

924
00:38:01,739 --> 00:38:07,679
just get that here and it can happen off

925
00:38:04,050 --> 00:38:09,210
of the bitmap info and that also could

926
00:38:07,679 --> 00:38:10,619
be something that we just do in the

927
00:38:09,210 --> 00:38:15,170
cutscene so that we don't have to care

928
00:38:10,619 --> 00:38:17,900
about it right so maybe that excuse me

929
00:38:15,170 --> 00:38:21,840
maybe that's what happens here

930
00:38:17,900 --> 00:38:24,599
right and so the bitmap ID in question

931
00:38:21,840 --> 00:38:27,450
for this layer image that we just want

932
00:38:24,599 --> 00:38:30,449
to put on there maybe that's just how we

933
00:38:27,449 --> 00:38:32,159
how we get that ahead of time right so

934
00:38:30,449 --> 00:38:34,919
then we don't have to think about it

935
00:38:32,159 --> 00:38:39,119
again and so if we want do that inside

936
00:38:34,920 --> 00:38:40,920
the asset system there should be pretty

937
00:38:39,119 --> 00:38:45,380
straightforward how we would get that

938
00:38:40,920 --> 00:38:45,380
right if I wanted to throw that in here

939
00:38:48,050 --> 00:38:53,690
if we want a utility function for how we

940
00:38:50,699 --> 00:38:53,689
would get this

941
00:38:54,699 --> 00:38:59,169
all we have to do is look back at the

942
00:38:56,588 --> 00:39:01,389
file format and you can see that it's

943
00:38:59,170 --> 00:39:04,180
got the align points here so all we

944
00:39:01,389 --> 00:39:07,389
really need to do is get P percent we

945
00:39:04,179 --> 00:39:11,500
just need to get that on the bitmap

946
00:39:07,389 --> 00:39:14,078
infos first alignment point so if we

947
00:39:11,500 --> 00:39:15,940
know that we've got some thing that

948
00:39:14,079 --> 00:39:17,769
always works

949
00:39:15,940 --> 00:39:19,869
like for fonts and stuff like that

950
00:39:17,769 --> 00:39:22,480
that's how we would do it

951
00:39:19,869 --> 00:39:24,760
and we can put that inside here as well

952
00:39:22,480 --> 00:39:27,010
because it's actually part of this whole

953
00:39:24,760 --> 00:39:28,690
suite of things sort of so that could

954
00:39:27,010 --> 00:39:30,579
just come in here actually and and

955
00:39:28,690 --> 00:39:33,280
operate on one of these because it's

956
00:39:30,579 --> 00:39:36,310
actually valid everywhere right it

957
00:39:33,280 --> 00:39:38,500
doesn't require anything else all right

958
00:39:36,309 --> 00:39:42,670
so moving through here what we can see

959
00:39:38,500 --> 00:39:46,929
is it looks like that one point oh is

960
00:39:42,670 --> 00:39:51,430
that the see line value I think it might

961
00:39:46,929 --> 00:39:59,259
be so I think we're really looking at

962
00:39:51,429 --> 00:40:01,118
this maybe yeah and I don't know where

963
00:39:59,260 --> 00:40:06,160
we're passing the align peak here cuz

964
00:40:01,119 --> 00:40:08,140
that remember but I can look it's right

965
00:40:06,159 --> 00:40:11,980
before the x-axis y-axis so it's

966
00:40:08,139 --> 00:40:14,170
actually what's the one point oh it's a

967
00:40:11,980 --> 00:40:19,719
co line value so that's good alright so

968
00:40:14,170 --> 00:40:22,470
that should get rid of all that and this

969
00:40:19,719 --> 00:40:22,469
one needs it too

970
00:40:32,469 --> 00:40:47,798
bitmap scale bitmap offsets color um who

971
00:40:40,298 --> 00:40:53,318
else so inside here that part we don't

972
00:40:47,798 --> 00:40:55,690
care about it all this bitmap Tim we

973
00:40:53,318 --> 00:40:58,478
don't need any via line at all so I

974
00:40:55,690 --> 00:41:02,440
think here we just could just do 0-0 I

975
00:40:58,478 --> 00:41:04,629
think I don't know what we would want to

976
00:41:02,440 --> 00:41:08,710
be I think we ignore it when we draw it

977
00:41:04,630 --> 00:41:11,920
anyway I think so that should presumably

978
00:41:08,710 --> 00:41:14,619
not be irrelevant let me see what goes

979
00:41:11,920 --> 00:41:22,088
on here line percentage is the last

980
00:41:14,619 --> 00:41:24,009
thing so I think that's about it

981
00:41:22,088 --> 00:41:25,838
so now a line percentage has been pushed

982
00:41:24,009 --> 00:41:28,358
up one in the chain and everyone pretty

983
00:41:25,838 --> 00:41:29,978
much has to know what they're doing here

984
00:41:28,358 --> 00:41:31,210
you can see us actually doing it here

985
00:41:29,978 --> 00:41:37,960
there's us not using the align

986
00:41:31,210 --> 00:41:40,259
percentage so I think that's it I think

987
00:41:37,960 --> 00:41:43,719
that successfully pushes everything up

988
00:41:40,259 --> 00:41:46,150
to the top so now everything that we

989
00:41:43,719 --> 00:41:51,880
draw is actually not using an alignment

990
00:41:46,150 --> 00:41:54,670
point at all actually except for the

991
00:41:51,880 --> 00:41:55,119
things that are we know that they're

992
00:41:54,670 --> 00:41:57,789
baked

993
00:41:55,119 --> 00:41:59,170
so like the alignment points on the font

994
00:41:57,789 --> 00:42:00,369
so you can see are all still working

995
00:41:59,170 --> 00:42:01,809
because again we know that's just the

996
00:42:00,369 --> 00:42:03,460
zero slot because we make those

997
00:42:01,809 --> 00:42:07,150
specially those aren't edited by an

998
00:42:03,460 --> 00:42:10,329
artist and we can look here I think the

999
00:42:07,150 --> 00:42:11,619
cutscenes are probably also correct so

1000
00:42:10,329 --> 00:42:12,969
let's take a look we should we should

1001
00:42:11,619 --> 00:42:16,390
implement the title screen at some point

1002
00:42:12,969 --> 00:42:18,639
now that we have a title cutscenes look

1003
00:42:16,389 --> 00:42:22,568
pretty good everything looks right there

1004
00:42:18,639 --> 00:42:28,239
so I think that's also fine right so in

1005
00:42:22,568 --> 00:42:29,949
terms of yeah in terms of where we're at

1006
00:42:28,239 --> 00:42:33,818
I think we're in good shape now so that

1007
00:42:29,949 --> 00:42:35,919
brings us to the actual entity rendering

1008
00:42:33,818 --> 00:42:39,429
part of things where we can now start to

1009
00:42:35,920 --> 00:42:40,180
use these alignment points so the first

1010
00:42:39,429 --> 00:42:42,338
thing we'll do

1011
00:42:40,179 --> 00:42:43,449
is just the basic test of is any of this

1012
00:42:42,338 --> 00:42:46,119
stuff working at all

1013
00:42:43,449 --> 00:42:48,399
so if I take this a line piece here and

1014
00:42:46,119 --> 00:42:52,119
say get first a line on whatever the

1015
00:42:48,400 --> 00:42:57,510
bitmap is in question here so remember I

1016
00:42:52,119 --> 00:43:01,829
have the bitmap info and I said get

1017
00:42:57,510 --> 00:43:04,780
bitmap info for this bitmap ID right

1018
00:43:01,829 --> 00:43:08,140
when we do that and we get that bitmap

1019
00:43:04,780 --> 00:43:11,680
info back then inside this first a line

1020
00:43:08,139 --> 00:43:13,358
thing I can actually just ask for oops I

1021
00:43:11,679 --> 00:43:14,889
don't why that's lowercase I can

1022
00:43:13,358 --> 00:43:16,119
actually ask for the actual light point

1023
00:43:14,889 --> 00:43:18,279
that comes from the first one of these

1024
00:43:16,119 --> 00:43:21,818
which means that once we come down here

1025
00:43:18,280 --> 00:43:24,730
and actually use it we can use the first

1026
00:43:21,818 --> 00:43:27,279
one the only reason I want to do that is

1027
00:43:24,730 --> 00:43:30,670
I want to see if we can get it working

1028
00:43:27,280 --> 00:43:32,650
with the editor right so I want

1029
00:43:30,670 --> 00:43:34,630
real-time editing of that a line point

1030
00:43:32,650 --> 00:43:38,050
right so when I come through here and I

1031
00:43:34,630 --> 00:43:40,119
select this thing and I go to edit one

1032
00:43:38,050 --> 00:43:40,510
of these aligned points right there we

1033
00:43:40,119 --> 00:43:44,108
go

1034
00:43:40,510 --> 00:43:47,880
so it's it's it's taking that alignment

1035
00:43:44,108 --> 00:43:51,098
and and and working on it right and so

1036
00:43:47,880 --> 00:43:53,200
that's what we wanted we and that's

1037
00:43:51,099 --> 00:43:55,900
that's what I wanted to see and do see

1038
00:43:53,199 --> 00:43:57,939
right so that's all really good that's

1039
00:43:55,900 --> 00:44:01,990
all happiness and sunshine flowery

1040
00:43:57,940 --> 00:44:03,789
nonsense right uh so the scaling value

1041
00:44:01,989 --> 00:44:06,939
we would like to use - that's gonna

1042
00:44:03,789 --> 00:44:09,519
involve a little bit of fancy footwork

1043
00:44:06,940 --> 00:44:11,349
on our part because right now we have to

1044
00:44:09,519 --> 00:44:12,730
go we don't really think about how the

1045
00:44:11,349 --> 00:44:14,109
scaling flows to the pipeline we're

1046
00:44:12,730 --> 00:44:17,170
gonna have to do a little bit of work

1047
00:44:14,108 --> 00:44:20,019
there to make that value be rigorously

1048
00:44:17,170 --> 00:44:22,059
defined so I want to stay away from that

1049
00:44:20,019 --> 00:44:24,130
just for a second while we work on the

1050
00:44:22,059 --> 00:44:29,410
rest of the stuff about how we pick

1051
00:44:24,130 --> 00:44:31,358
these things right so now we need to do

1052
00:44:29,409 --> 00:44:34,358
is we need to start thinking about how

1053
00:44:31,358 --> 00:44:36,969
these scaling values are actually set up

1054
00:44:34,358 --> 00:44:40,058
so it's not very much alignment guys are

1055
00:44:36,969 --> 00:44:42,519
set up because we need our align points

1056
00:44:40,059 --> 00:44:49,809
to snap together right

1057
00:44:42,519 --> 00:44:52,179
we need that sort of we need the reverse

1058
00:44:49,809 --> 00:44:53,560
lookup part of this right we we need to

1059
00:44:52,179 --> 00:44:56,259
sort of say

1060
00:44:53,559 --> 00:44:59,199
hey go get an alignment point out of my

1061
00:44:56,260 --> 00:45:02,500
previous person and put it in me and all

1062
00:44:59,199 --> 00:45:04,779
those other sorts of things right so if

1063
00:45:02,500 --> 00:45:06,909
we look at how our file formats define

1064
00:45:04,780 --> 00:45:08,680
it's gonna be a little bit difficult but

1065
00:45:06,909 --> 00:45:11,109
we can probably figure something out

1066
00:45:08,679 --> 00:45:13,389
right if we look in here we've got these

1067
00:45:11,110 --> 00:45:15,460
entity pieces right they're sort of the

1068
00:45:13,389 --> 00:45:18,719
the pieces of the entities are sort of

1069
00:45:15,460 --> 00:45:22,030
like built up out of multiple pieces

1070
00:45:18,719 --> 00:45:31,439
what we need to figure out here is how

1071
00:45:22,030 --> 00:45:31,440
do we we need to figure out some way of

1072
00:45:32,639 --> 00:45:44,529
of connecting each piece with its

1073
00:45:38,860 --> 00:45:50,590
correct alignment points right so the

1074
00:45:44,530 --> 00:45:52,360
way to think about this is we have a we

1075
00:45:50,590 --> 00:45:54,670
have a set of definitions of what these

1076
00:45:52,360 --> 00:45:55,930
alignment points mean so we can tag each

1077
00:45:54,670 --> 00:45:57,849
alignment point with what kind of

1078
00:45:55,929 --> 00:46:00,190
alignment point it is and then we just

1079
00:45:57,849 --> 00:46:03,009
need some way of saying well you know if

1080
00:46:00,190 --> 00:46:05,200
this thing wants to be matched up to

1081
00:46:03,010 --> 00:46:06,940
this other thing we need to know which

1082
00:46:05,199 --> 00:46:08,949
kind of match up it's supposed to be if

1083
00:46:06,940 --> 00:46:12,130
this thing is saying that it should use

1084
00:46:08,949 --> 00:46:14,739
like head alignment so I'm trying to

1085
00:46:12,130 --> 00:46:17,890
align like top of neck to base of head I

1086
00:46:14,739 --> 00:46:19,719
need a way of Unknowing that's the kind

1087
00:46:17,889 --> 00:46:22,779
of text I'm going to do looking for

1088
00:46:19,719 --> 00:46:25,389
those two you know looking for the

1089
00:46:22,780 --> 00:46:29,290
correct one in each of them and actually

1090
00:46:25,389 --> 00:46:33,190
applying it right so that's the crucial

1091
00:46:29,289 --> 00:46:36,250
part we're trying to do here and what I

1092
00:46:33,190 --> 00:46:40,300
want to do first is I'm gonna write a

1093
00:46:36,250 --> 00:46:41,739
crappy version because I don't want to

1094
00:46:40,300 --> 00:46:43,539
try to accelerate this thing I mean

1095
00:46:41,739 --> 00:46:44,799
you'll notice we do this a lot I don't

1096
00:46:43,539 --> 00:46:46,960
want to try to make something fast

1097
00:46:44,800 --> 00:46:49,030
before I've made it at all because if I

1098
00:46:46,960 --> 00:46:52,059
do that what I risk run the risk of

1099
00:46:49,030 --> 00:46:54,190
doing is over optimizing something that

1100
00:46:52,059 --> 00:46:56,019
we will then later change so since we

1101
00:46:54,190 --> 00:46:58,440
haven't worked with the system at all I

1102
00:46:56,019 --> 00:47:01,599
don't want to think about the speed yet

1103
00:46:58,440 --> 00:47:02,950
because I'm nervous that I will have to

1104
00:47:01,599 --> 00:47:07,420
change it a couple times and then the

1105
00:47:02,949 --> 00:47:08,949
optimization for work will go away right

1106
00:47:07,420 --> 00:47:10,659
I'm not that nervous about overcoming

1107
00:47:08,949 --> 00:47:12,460
the code I don't get that nervous about

1108
00:47:10,659 --> 00:47:13,629
optimization stuff premature

1109
00:47:12,460 --> 00:47:15,548
optimization is a root of all evil

1110
00:47:13,630 --> 00:47:18,970
that quote you're taking with a bit of a

1111
00:47:15,548 --> 00:47:21,429
grain of salt but the part of it that's

1112
00:47:18,969 --> 00:47:22,480
really true is trying to waste time

1113
00:47:21,429 --> 00:47:25,358
optimizing something that you don't

1114
00:47:22,480 --> 00:47:27,909
abusing that's definitely true right

1115
00:47:25,358 --> 00:47:29,529
because that you know if I then change

1116
00:47:27,909 --> 00:47:32,828
the system then all the work I did to

1117
00:47:29,530 --> 00:47:34,809
optimize it is probably useless right

1118
00:47:32,829 --> 00:47:41,589
and so that's the big thing we want to

1119
00:47:34,809 --> 00:47:46,420
watch out for okay so let's get going on

1120
00:47:41,588 --> 00:47:48,578
that let's take a look in here I when

1121
00:47:46,420 --> 00:47:51,579
this this code executes it's got this

1122
00:47:48,579 --> 00:47:53,530
notice this notion of any visible pieces

1123
00:47:51,579 --> 00:47:56,048
in here so any given anity can be made

1124
00:47:53,530 --> 00:47:58,240
up of several different pieces and that

1125
00:47:56,048 --> 00:48:01,030
makes sense because you know there's

1126
00:47:58,239 --> 00:48:03,429
there's sort of a two-tiered approach to

1127
00:48:01,030 --> 00:48:06,519
this kind of thing there are enemies

1128
00:48:03,429 --> 00:48:09,338
that are worked together so you know

1129
00:48:06,519 --> 00:48:11,710
maybe I've got two different pn amis in

1130
00:48:09,338 --> 00:48:14,619
a room that are controlled by the same

1131
00:48:11,710 --> 00:48:16,059
logical brain we have a system for

1132
00:48:14,619 --> 00:48:17,740
handling that that's the brain system

1133
00:48:16,059 --> 00:48:19,630
and it controls multiple entities right

1134
00:48:17,739 --> 00:48:21,279
but there's another concept which is

1135
00:48:19,630 --> 00:48:22,900
just like I have to have a single entity

1136
00:48:21,280 --> 00:48:24,579
but we just want to animate it with

1137
00:48:22,900 --> 00:48:26,230
multiple pieces those pieces don't

1138
00:48:24,579 --> 00:48:29,109
disaggregate like you're never gonna

1139
00:48:26,230 --> 00:48:30,608
have those pieces come apart right but I

1140
00:48:29,108 --> 00:48:32,409
just need to build it up out of multiple

1141
00:48:30,608 --> 00:48:33,670
things I don't want them each to be an

1142
00:48:32,409 --> 00:48:35,739
entity because they're not really

1143
00:48:33,670 --> 00:48:37,690
entities they're just different pieces

1144
00:48:35,739 --> 00:48:40,989
of the same entity that get animated

1145
00:48:37,690 --> 00:48:44,139
separately from each other right so it's

1146
00:48:40,989 --> 00:48:46,029
an animation conceit not a gameplay

1147
00:48:44,139 --> 00:48:47,798
conceit that's what these visual pieces

1148
00:48:46,030 --> 00:48:50,829
are each one of those visual pieces

1149
00:48:47,798 --> 00:48:53,500
needs a way of sort of understanding how

1150
00:48:50,829 --> 00:48:55,298
it is stacked like how it is snapped

1151
00:48:53,500 --> 00:48:57,909
together that's what needs to be

1152
00:48:55,298 --> 00:49:00,130
authentic in here in order for this to

1153
00:48:57,909 --> 00:49:02,170
work so if you look at the end of it in

1154
00:49:00,130 --> 00:49:04,119
any visible piece thing what we want to

1155
00:49:02,170 --> 00:49:07,568
do is you know here we've got a cube

1156
00:49:04,119 --> 00:49:10,450
layout for cubes for example right well

1157
00:49:07,568 --> 00:49:15,068
I might want another thing here which is

1158
00:49:10,449 --> 00:49:21,369
like let's say we've got you know an

1159
00:49:15,068 --> 00:49:24,369
entity or a so what I'm looking for

1160
00:49:21,369 --> 00:49:25,630
a bitmap or whatever right like so if

1161
00:49:24,369 --> 00:49:27,400
this thing is actually going to be a

1162
00:49:25,630 --> 00:49:29,440
bitmap piece so it's not a cube or a

1163
00:49:27,400 --> 00:49:36,059
light then it might have additional data

1164
00:49:29,440 --> 00:49:36,059
there right so if this is a bitmap piece

1165
00:49:36,989 --> 00:49:46,809
so I know I can do this if I want so

1166
00:49:43,900 --> 00:49:50,980
this is like the bitmap info that comes

1167
00:49:46,809 --> 00:49:53,469
out of here so in here what I could do

1168
00:49:50,980 --> 00:49:56,320
is I could say all right I know I build

1169
00:49:53,469 --> 00:49:59,339
up this set of visible pieces what I

1170
00:49:56,320 --> 00:50:05,710
could say is tell me which visible piece

1171
00:49:59,340 --> 00:50:07,990
you need to snap onto and which thing

1172
00:50:05,710 --> 00:50:11,139
from that visible piece you're trying to

1173
00:50:07,989 --> 00:50:16,349
snap to right so what I could say is

1174
00:50:11,139 --> 00:50:19,329
look here's the the parent piece

1175
00:50:16,349 --> 00:50:21,880
effectively right so which one in this

1176
00:50:19,329 --> 00:50:24,309
in the set of visual pieces which one am

1177
00:50:21,880 --> 00:50:25,960
I actually snapping to obviously I could

1178
00:50:24,309 --> 00:50:27,969
make that smaller it doesn't need to be

1179
00:50:25,960 --> 00:50:30,280
particularly big and then I could

1180
00:50:27,969 --> 00:50:41,079
furthermore say what's this what's the

1181
00:50:30,280 --> 00:50:43,000
type and so in here you know one of the

1182
00:50:41,079 --> 00:50:44,440
things I like to do sometimes let me let

1183
00:50:43,000 --> 00:50:45,849
me add this to our system I don't think

1184
00:50:44,440 --> 00:50:47,829
we have that nasai yeah we do okay

1185
00:50:45,849 --> 00:50:49,059
nevermind um so one of things I like to

1186
00:50:47,829 --> 00:50:50,409
do sometimes is be a little bit more

1187
00:50:49,059 --> 00:50:52,739
explicit about what these types are C

1188
00:50:50,409 --> 00:50:55,420
and C++ suck at this they're very bad

1189
00:50:52,739 --> 00:50:57,579
but you know we can be a little bit more

1190
00:50:55,420 --> 00:50:59,889
rigorous ourselves just just because we

1191
00:50:57,579 --> 00:51:02,860
can be so what I want to do here is say

1192
00:50:59,889 --> 00:51:04,509
look I've got an enum 16 so it is a you

1193
00:51:02,860 --> 00:51:05,950
16 I'm going to tell you what the type

1194
00:51:04,510 --> 00:51:08,680
is here it just so it's a little bit

1195
00:51:05,949 --> 00:51:11,019
clearer to a meta processor if one was

1196
00:51:08,679 --> 00:51:13,329
going to read this or just a programmer

1197
00:51:11,019 --> 00:51:15,820
later this is a 16-bit value but it's

1198
00:51:13,329 --> 00:51:17,619
storing one of these right and I think

1199
00:51:15,820 --> 00:51:19,450
they finally added that C bus plus some

1200
00:51:17,619 --> 00:51:21,369
time I think suppose was 17 finally

1201
00:51:19,449 --> 00:51:27,579
added the concept that an enum could

1202
00:51:21,369 --> 00:51:29,949
have a type 30 years later they thought

1203
00:51:27,579 --> 00:51:33,889
maybe a programmer should be able to

1204
00:51:29,949 --> 00:51:36,719
specify what the type of a variable was

1205
00:51:33,889 --> 00:51:39,690
revolutionary concept for the late knots

1206
00:51:36,719 --> 00:51:42,539
anyway let's go ahead and try and get

1207
00:51:39,690 --> 00:51:44,340
this into production here again

1208
00:51:42,539 --> 00:51:47,730
implementing it in a particularly smart

1209
00:51:44,340 --> 00:51:49,350
way so if I pop back over to where we're

1210
00:51:47,730 --> 00:51:51,389
actually creating these entities I

1211
00:51:49,349 --> 00:51:52,559
believe that's in room Jen where stuff

1212
00:51:51,389 --> 00:51:54,000
is actually getting generated

1213
00:51:52,559 --> 00:51:56,429
ventually will probably have an entity

1214
00:51:54,000 --> 00:51:58,230
gin but at the moment I don't think we

1215
00:51:56,429 --> 00:52:00,480
do so I don't know where that stuff gets

1216
00:51:58,230 --> 00:52:02,670
set up maybe it wasn't in there let me

1217
00:52:00,480 --> 00:52:05,840
see let me just see where add piece is I

1218
00:52:02,670 --> 00:52:08,420
don't know where that where it is oh

1219
00:52:05,840 --> 00:52:11,220
it's still in world mode okay yeah we

1220
00:52:08,420 --> 00:52:12,389
there's so much stuff we got a we're

1221
00:52:11,219 --> 00:52:13,949
gonna have some fun with the generator

1222
00:52:12,389 --> 00:52:17,009
once because you know after that stuff

1223
00:52:13,949 --> 00:52:19,199
all comes together here so anyway I

1224
00:52:17,010 --> 00:52:20,970
inside like add player for example so

1225
00:52:19,199 --> 00:52:22,199
here's the piece of that I'm not gonna

1226
00:52:20,969 --> 00:52:24,269
do that player because the players kind

1227
00:52:22,199 --> 00:52:26,279
of not the concern right now we need to

1228
00:52:24,269 --> 00:52:28,320
decide some stuff about how bodies are

1229
00:52:26,280 --> 00:52:30,870
handled before we do that I'm gonna go

1230
00:52:28,320 --> 00:52:33,480
look at the cats right because I let

1231
00:52:30,869 --> 00:52:35,909
cats better than humans anyway so I'm

1232
00:52:33,480 --> 00:52:39,110
gonna go ahead and do them first

1233
00:52:35,909 --> 00:52:44,099
so let me find our where's our add cat

1234
00:52:39,110 --> 00:52:45,539
here yeah here we go so here's how we

1235
00:52:44,099 --> 00:52:46,829
add a cat and you can see us adding the

1236
00:52:45,539 --> 00:52:49,409
pieces here we say look a little bit of

1237
00:52:46,829 --> 00:52:50,519
the bodies ahead and you can see that

1238
00:52:49,409 --> 00:52:52,289
right now it doesn't have any

1239
00:52:50,519 --> 00:52:54,869
information about what's going on there

1240
00:52:52,289 --> 00:52:57,869
right and so what I'd like to do there

1241
00:52:54,869 --> 00:53:00,359
is kind of have this notion that when

1242
00:52:57,869 --> 00:53:01,739
you add one of these pieces and again I

1243
00:53:00,360 --> 00:53:04,650
don't know if that's in a world Jen I

1244
00:53:01,739 --> 00:53:06,389
guess a piece where where is I don't

1245
00:53:04,650 --> 00:53:08,639
know where that even is add piece where

1246
00:53:06,389 --> 00:53:12,779
where where was it tell me where add

1247
00:53:08,639 --> 00:53:14,400
piece gets done I have no idea we need

1248
00:53:12,780 --> 00:53:17,280
to clean this stuff up so I know where

1249
00:53:14,400 --> 00:53:23,070
any of our functions are so it looks

1250
00:53:17,280 --> 00:53:25,680
like add piece is in entity okay I

1251
00:53:23,070 --> 00:53:27,930
already made an enemy Jen nevermind

1252
00:53:25,679 --> 00:53:29,460
I guess I did clean it up so I shouldn't

1253
00:53:27,929 --> 00:53:30,899
have been complaining about myself maybe

1254
00:53:29,460 --> 00:53:32,340
I was smarter than I thought I was

1255
00:53:30,900 --> 00:53:35,160
that's always a good day because usually

1256
00:53:32,340 --> 00:53:39,240
it's the other way around so anyway if I

1257
00:53:35,159 --> 00:53:41,909
go back to our our AB cat call here and

1258
00:53:39,239 --> 00:53:45,449
I want to look at this this bad piece

1259
00:53:41,909 --> 00:53:47,409
here any visible piece comes back as a

1260
00:53:45,449 --> 00:53:49,449
pointer in case you want to edit it

1261
00:53:47,409 --> 00:53:51,460
and what what I'd like to really do here

1262
00:53:49,449 --> 00:53:52,629
is just say when you actually add the

1263
00:53:51,460 --> 00:53:54,970
piece I'd like you to be able to add

1264
00:53:52,630 --> 00:53:56,920
that bitmap information to it right and

1265
00:53:54,969 --> 00:53:58,689
one of the things is you know you see

1266
00:53:56,920 --> 00:54:00,519
that we need this piece index here it

1267
00:53:58,690 --> 00:54:02,320
would be nice to get that back right so

1268
00:54:00,519 --> 00:54:05,349
that we have some way of doing that

1269
00:54:02,320 --> 00:54:06,700
reference so when we do that you know

1270
00:54:05,349 --> 00:54:08,739
this energy is a little piece pointer

1271
00:54:06,699 --> 00:54:10,569
that comes back it turns out you know

1272
00:54:08,739 --> 00:54:11,739
that is good enough because since we

1273
00:54:10,570 --> 00:54:14,140
know that we're doing this construction

1274
00:54:11,739 --> 00:54:15,519
in a local setup we can do differencing

1275
00:54:14,139 --> 00:54:16,779
on that array we know they come from the

1276
00:54:15,519 --> 00:54:19,690
same place so that's not actually

1277
00:54:16,780 --> 00:54:20,980
dangerous in that case so we can't

1278
00:54:19,690 --> 00:54:22,900
actually make something a little bit

1279
00:54:20,980 --> 00:54:25,719
more expressive here when we do that

1280
00:54:22,900 --> 00:54:28,690
asset basic category what we can then do

1281
00:54:25,719 --> 00:54:34,509
is say look we can connect pieces

1282
00:54:28,690 --> 00:54:38,710
together you know and in here I can just

1283
00:54:34,510 --> 00:54:43,500
say all right here's the entity that I'm

1284
00:54:38,710 --> 00:54:43,500
talking about here's the visible piece

1285
00:54:43,619 --> 00:54:47,799
that's the parent here's the entity

1286
00:54:46,300 --> 00:54:50,170
piece that's a child so we're going to

1287
00:54:47,800 --> 00:54:54,670
connect those two together and what I

1288
00:54:50,170 --> 00:54:57,099
want to say here is all right what's the

1289
00:54:54,670 --> 00:54:58,869
thing on the child I'm connecting from

1290
00:54:57,099 --> 00:55:01,299
and what's the thing on the parent I'm

1291
00:54:58,869 --> 00:55:08,829
connecting to probably what I want to

1292
00:55:01,300 --> 00:55:10,660
say they're right I sue so if I come

1293
00:55:08,829 --> 00:55:12,429
through here and say all right what are

1294
00:55:10,659 --> 00:55:14,649
one of those look like I know that

1295
00:55:12,429 --> 00:55:16,719
inside the file formats I've got the

1296
00:55:14,650 --> 00:55:19,119
list of things that they could be right

1297
00:55:16,719 --> 00:55:23,949
so I kind of want to say look for the

1298
00:55:19,119 --> 00:55:28,299
parent I'm gonna connect from the parent

1299
00:55:23,949 --> 00:55:31,960
type that parent type to this child type

1300
00:55:28,300 --> 00:55:33,610
okay and then inside the entity you know

1301
00:55:31,960 --> 00:55:40,059
I'll need to record those pieces of

1302
00:55:33,610 --> 00:55:42,840
information like so and then I've still

1303
00:55:40,059 --> 00:55:44,590
got to use sixteen here that I could use

1304
00:55:42,840 --> 00:55:47,079
right

1305
00:55:44,590 --> 00:55:50,320
and so we've only taken up it's only one

1306
00:55:47,079 --> 00:55:51,610
64-bit value and we could even make it

1307
00:55:50,320 --> 00:55:53,559
smaller than that you know these could

1308
00:55:51,610 --> 00:55:55,420
be um eights there's not going to be 256

1309
00:55:53,559 --> 00:55:56,529
different kinds of align points right so

1310
00:55:55,420 --> 00:55:58,360
we could even get a more aggressive I

1311
00:55:56,530 --> 00:56:00,430
don't think we need to for any

1312
00:55:58,360 --> 00:56:01,120
particular reason but we could so we

1313
00:56:00,429 --> 00:56:02,859
want to really

1314
00:56:01,119 --> 00:56:05,380
if we really want to compact us down

1315
00:56:02,860 --> 00:56:08,590
even more right you could do something

1316
00:56:05,380 --> 00:56:10,780
like this and be really super aggressive

1317
00:56:08,590 --> 00:56:12,519
with it we certainly could do that and

1318
00:56:10,780 --> 00:56:14,230
maybe we just will and then if we ever

1319
00:56:12,519 --> 00:56:18,130
need more space we can always expand

1320
00:56:14,230 --> 00:56:18,429
that out in the future and and go from

1321
00:56:18,130 --> 00:56:19,750
there

1322
00:56:18,429 --> 00:56:21,369
right so we can we can be more

1323
00:56:19,750 --> 00:56:23,590
aggressive there and then we would just

1324
00:56:21,369 --> 00:56:26,650
have a one more here and that makes this

1325
00:56:23,590 --> 00:56:28,750
only 32 bits total to specify the

1326
00:56:26,650 --> 00:56:30,700
complete alignment thing which keeps

1327
00:56:28,750 --> 00:56:33,280
that nice and compact I don't remember

1328
00:56:30,699 --> 00:56:35,169
what QV q UV layout is but I think it's

1329
00:56:33,280 --> 00:56:38,740
also like a 32-bit value so it keeps

1330
00:56:35,170 --> 00:56:40,930
this a very small this set of stuffs a

1331
00:56:38,739 --> 00:56:42,759
bit picky here we could start working on

1332
00:56:40,929 --> 00:56:44,649
getting that down more to but that's

1333
00:56:42,760 --> 00:56:48,640
just a you know we'll cross that bridge

1334
00:56:44,650 --> 00:56:50,530
when in if we need to cross it at all so

1335
00:56:48,639 --> 00:56:52,359
there's our bitmap piece specifications

1336
00:56:50,530 --> 00:56:55,510
stuff there and that's all we really

1337
00:56:52,360 --> 00:56:58,150
need for that so if I now want to define

1338
00:56:55,510 --> 00:57:01,290
one of those I can specify that on the

1339
00:56:58,150 --> 00:57:07,599
bitmap piece so when we do this connect

1340
00:57:01,289 --> 00:57:08,829
on the entity what I need to know is the

1341
00:57:07,599 --> 00:57:09,429
reason that I need to pass it in the

1342
00:57:08,829 --> 00:57:12,549
first place

1343
00:57:09,429 --> 00:57:15,639
is this this needs to be an index into

1344
00:57:12,550 --> 00:57:21,420
this array right like so the entity has

1345
00:57:15,639 --> 00:57:26,889
an array of these right about here right

1346
00:57:21,420 --> 00:57:29,740
so it has this list of pieces and it

1347
00:57:26,889 --> 00:57:32,559
needs to know which one I'm talking

1348
00:57:29,739 --> 00:57:35,529
about in that array but I'm passing a

1349
00:57:32,559 --> 00:57:37,179
pointer so in order to get which one it

1350
00:57:35,530 --> 00:57:39,820
is out of that pointer I just want to do

1351
00:57:37,179 --> 00:57:44,079
some math there right so I've got the

1352
00:57:39,820 --> 00:57:45,580
entity pieces there's little pieces what

1353
00:57:44,079 --> 00:57:46,779
is it called I just looked at it but of

1354
00:57:45,579 --> 00:57:50,199
course I wasn't paying attention to that

1355
00:57:46,780 --> 00:57:55,930
just pieces um so I know that's the base

1356
00:57:50,199 --> 00:57:58,059
so if I subtract the parent if I

1357
00:57:55,929 --> 00:57:59,949
subtract that from the parent I get how

1358
00:57:58,059 --> 00:58:01,809
many array slots it is to get to the

1359
00:57:59,949 --> 00:58:05,349
parent which is that index that I want

1360
00:58:01,809 --> 00:58:08,829
right so this in this case is the parent

1361
00:58:05,349 --> 00:58:10,329
index and I can assert here that I could

1362
00:58:08,829 --> 00:58:14,619
truncate it so I could do a safe

1363
00:58:10,329 --> 00:58:17,619
truncate to you 8 here and say look a

1364
00:58:14,619 --> 00:58:19,358
if you ever for some reason have more

1365
00:58:17,619 --> 00:58:21,818
than 256 of these because I'm not

1366
00:58:19,358 --> 00:58:23,259
certain that 26 pieces is not allowed in

1367
00:58:21,818 --> 00:58:25,420
the system that would be an entity with

1368
00:58:23,259 --> 00:58:26,679
so many pieces that you really should be

1369
00:58:25,420 --> 00:58:28,599
representing it as multiple entities I

1370
00:58:26,679 --> 00:58:30,940
think at that point this is this game

1371
00:58:28,599 --> 00:58:32,559
does not want that it would be

1372
00:58:30,940 --> 00:58:35,818
impossible to even see what was going on

1373
00:58:32,559 --> 00:58:41,650
there so we're not gonna do that just

1374
00:58:35,818 --> 00:58:44,199
right off the bat so anyway we can save

1375
00:58:41,650 --> 00:58:45,910
truncate these as well and then that

1376
00:58:44,199 --> 00:58:48,968
allows us to set the entire thing up

1377
00:58:45,909 --> 00:58:51,429
right so all we need to do now is say

1378
00:58:48,969 --> 00:58:53,858
all right actually what we can do here

1379
00:58:51,429 --> 00:58:56,828
is just say well we know that we're

1380
00:58:53,858 --> 00:58:59,498
going to have one of these entity we

1381
00:58:56,829 --> 00:59:02,048
know what we're setting is one of these

1382
00:58:59,498 --> 00:59:08,379
bitmap piece things so here's the bitmap

1383
00:59:02,048 --> 00:59:13,358
piece it's gonna be off of oops off of

1384
00:59:08,380 --> 00:59:16,180
the child I can assert that the child is

1385
00:59:13,358 --> 00:59:20,858
a bitmap type right so that it's not any

1386
00:59:16,179 --> 00:59:22,719
of these things so I can I can I can

1387
00:59:20,858 --> 00:59:23,978
assert that we're not trying to set

1388
00:59:22,719 --> 00:59:25,989
something that shouldn't have one of

1389
00:59:23,978 --> 00:59:28,689
these in the first place so I can say

1390
00:59:25,989 --> 00:59:30,249
you know assert that the flags and you

1391
00:59:28,690 --> 00:59:33,278
know what I could do it even right here

1392
00:59:30,248 --> 00:59:41,738
I could say like look there's this

1393
00:59:33,278 --> 00:59:46,949
concept that a piece is a bitmap and all

1394
00:59:41,739 --> 00:59:49,690
I'm gonna do there is say that the flags

1395
00:59:46,949 --> 00:59:55,478
had better not have either of those two

1396
00:59:49,690 --> 00:59:57,809
things in it right so peace cube peace

1397
00:59:55,478 --> 00:59:57,808
light

1398
01:00:01,018 --> 01:00:05,938
are not allowed so if I end these two

1399
01:00:04,259 --> 01:00:08,539
things together what I'm really looking

1400
01:00:05,938 --> 01:00:10,798
for is did anything get set so if

1401
01:00:08,539 --> 01:00:11,069
nothing got set here then we're good to

1402
01:00:10,798 --> 01:00:12,949
go

1403
01:00:11,068 --> 01:00:17,159
if something got set here then we're not

1404
01:00:12,949 --> 01:00:19,769
so that's all we need there I can assert

1405
01:00:17,159 --> 01:00:21,329
now that this this is it bitmapped piece

1406
01:00:19,768 --> 01:00:24,328
which is what I wanted

1407
01:00:21,329 --> 01:00:25,949
I can then access this member of it with

1408
01:00:24,329 --> 01:00:28,919
the confidence that it should be

1409
01:00:25,949 --> 01:00:31,739
accessed at all I can then set up the

1410
01:00:28,918 --> 01:00:34,048
pieces that I want by just setting the

1411
01:00:31,739 --> 01:00:36,028
values to the what we had the person

1412
01:00:34,048 --> 01:00:36,449
passing they should be and then we're

1413
01:00:36,028 --> 01:00:38,130
done

1414
01:00:36,449 --> 01:00:40,559
so that's how we would connect two

1415
01:00:38,130 --> 01:00:46,469
pieces together right that means inside

1416
01:00:40,559 --> 01:00:51,479
our add cat call where we're actually

1417
01:00:46,469 --> 01:00:54,449
trying to add the cat right here is

1418
01:00:51,478 --> 01:01:02,608
after I do these I am now I can say like

1419
01:00:54,449 --> 01:01:06,179
visible piece I can store each of those

1420
01:01:02,608 --> 01:01:08,608
and now I can connect them so I can

1421
01:01:06,179 --> 01:01:12,509
connect the body in the head like so I

1422
01:01:08,608 --> 01:01:14,728
can say I want the body because we again

1423
01:01:12,509 --> 01:01:16,619
inside the file formats there we know we

1424
01:01:14,728 --> 01:01:19,678
have top of head and base of neck so I

1425
01:01:16,619 --> 01:01:21,749
can say that I want the top of the head

1426
01:01:19,679 --> 01:01:24,269
to connect to the base of the neck or

1427
01:01:21,748 --> 01:01:28,168
whatever right actually no sorry the

1428
01:01:24,268 --> 01:01:29,758
default because again there is no base

1429
01:01:28,168 --> 01:01:32,458
of head so it's just whatever it's

1430
01:01:29,759 --> 01:01:34,949
default one is I want that to connect to

1431
01:01:32,458 --> 01:01:40,588
the base of the neck right and I won't

1432
01:01:34,949 --> 01:01:42,778
so line those two pieces up okay all

1433
01:01:40,588 --> 01:01:44,099
right so I've got to do a couple of

1434
01:01:42,778 --> 01:01:47,188
things here

1435
01:01:44,099 --> 01:01:51,059
um eight needs to be defined so inside

1436
01:01:47,188 --> 01:01:53,578
types we need again that full set and

1437
01:01:51,059 --> 01:02:02,339
I'll just make sure we have all of them

1438
01:01:53,579 --> 01:02:04,709
cuz they're all good and again C++ did

1439
01:02:02,338 --> 01:02:06,509
finally add these but I you know I'm so

1440
01:02:04,708 --> 01:02:07,948
done with C++ at this point I don't even

1441
01:02:06,509 --> 01:02:10,130
bother using new features because it's

1442
01:02:07,949 --> 01:02:13,499
just like waiting to find some special

1443
01:02:10,130 --> 01:02:14,680
you know anti programmer mind the C++

1444
01:02:13,498 --> 01:02:16,869
committee has left in the fee

1445
01:02:14,679 --> 01:02:18,129
so that it ends up being terrible and

1446
01:02:16,869 --> 01:02:19,900
you wish you'd never use it which is how

1447
01:02:18,130 --> 01:02:25,150
every literally every feature I've ever

1448
01:02:19,900 --> 01:02:26,349
tried if C++ is um so I would recommend

1449
01:02:25,150 --> 01:02:27,940
not going down that route but you're

1450
01:02:26,349 --> 01:02:31,119
welcome to go you're welcome to have a

1451
01:02:27,940 --> 01:02:32,440
party there bring your minesweeper you

1452
01:02:31,119 --> 01:02:34,599
know bring the canary down the coal mine

1453
01:02:32,440 --> 01:02:38,800
make sure when you see it die stop using

1454
01:02:34,599 --> 01:02:40,630
the future so here we have the the

1455
01:02:38,800 --> 01:02:43,150
errors for the connect base function

1456
01:02:40,630 --> 01:02:46,869
that we just did we don't have we

1457
01:02:43,150 --> 01:02:48,490
actually don't have a that safe truncate

1458
01:02:46,869 --> 01:02:51,039
feature yet right because we've only

1459
01:02:48,489 --> 01:02:53,739
ever done I think the safe truncate to

1460
01:02:51,039 --> 01:02:55,659
you 32 so what I want to do is make sure

1461
01:02:53,739 --> 01:02:57,189
that we've got the other ones of these

1462
01:02:55,659 --> 01:03:00,069
so you can see they're really simple

1463
01:02:57,190 --> 01:03:02,110
functions all they do is they really are

1464
01:03:00,070 --> 01:03:04,600
just a cast but they're a way of just

1465
01:03:02,110 --> 01:03:08,070
making sure before you do the cast that

1466
01:03:04,599 --> 01:03:10,779
someone would have would have complained

1467
01:03:08,070 --> 01:03:13,150
it you know in debug mode someone will

1468
01:03:10,780 --> 01:03:20,140
complain prior to doing the cast if it

1469
01:03:13,150 --> 01:03:22,119
couldn't fit right oops that's so that's

1470
01:03:20,139 --> 01:03:25,679
really all I wanted to do there don't

1471
01:03:22,119 --> 01:03:25,679
ask me why I forgot your name function

1472
01:03:25,949 --> 01:03:30,159
but that's all we really need and now

1473
01:03:28,210 --> 01:03:33,250
inside here we've got the parent piece

1474
01:03:30,159 --> 01:03:35,440
I'm gonna call that a parent piece

1475
01:03:33,250 --> 01:03:39,570
instead of parent index because I don't

1476
01:03:35,440 --> 01:03:45,369
know I like that better I guess good

1477
01:03:39,570 --> 01:03:48,000
good call either one let's see from n64

1478
01:03:45,369 --> 01:03:48,000
what

1479
01:04:06,800 --> 01:04:18,470
okay so I think that's all we really

1480
01:04:13,949 --> 01:04:22,710
need to do we got the alive type here

1481
01:04:18,469 --> 01:04:24,719
specified I think that's it and so now

1482
01:04:22,710 --> 01:04:28,050
we can specify how the cats are supposed

1483
01:04:24,719 --> 01:04:30,809
to be attached up right unfortunately it

1484
01:04:28,050 --> 01:04:32,970
won't do anything why because if we want

1485
01:04:30,809 --> 01:04:35,219
to do anything we have to actually

1486
01:04:32,969 --> 01:04:37,639
implement code that uses that shouldn't

1487
01:04:35,219 --> 01:04:41,159
be too hard right

1488
01:04:37,639 --> 01:04:42,809
because inside here it's pretty easy for

1489
01:04:41,159 --> 01:04:45,389
us to figure out where our pieces

1490
01:04:42,809 --> 01:04:47,820
actually are and then do sort of the

1491
01:04:45,389 --> 01:04:50,670
retcon on it now one of the things that

1492
01:04:47,820 --> 01:04:54,680
we have when we do the on top versus not

1493
01:04:50,670 --> 01:04:57,389
on top this is no longer true thankfully

1494
01:04:54,679 --> 01:04:59,609
cos 0 is the most on top and it's most

1495
01:04:57,389 --> 01:05:02,069
on bottom not true anymore

1496
01:04:59,610 --> 01:05:04,320
right so what we want because we just

1497
01:05:02,070 --> 01:05:06,300
sort so what we want to do here is on

1498
01:05:04,320 --> 01:05:08,820
entity visible piece what we want to do

1499
01:05:06,300 --> 01:05:16,289
is specify parents must always come

1500
01:05:08,820 --> 01:05:17,940
before children and I'll show you why we

1501
01:05:16,289 --> 01:05:19,769
need to do that in a second

1502
01:05:17,940 --> 01:05:21,240
but what I want to do is rigidly enforce

1503
01:05:19,769 --> 01:05:24,960
that rule it's gonna make our lives a

1504
01:05:21,239 --> 01:05:27,179
lot easier as we can oh we can do it in

1505
01:05:24,960 --> 01:05:28,829
one loop instead of doing it too so in

1506
01:05:27,179 --> 01:05:31,859
here what I'd like to do is enforce that

1507
01:05:28,829 --> 01:05:34,409
rule you can see how I got my index

1508
01:05:31,860 --> 01:05:36,750
before what I'm gonna do here is add

1509
01:05:34,409 --> 01:05:38,909
another assertion which says that let's

1510
01:05:36,750 --> 01:05:42,090
make sure that the parent piece whatever

1511
01:05:38,909 --> 01:05:44,759
that was is less than the child piece so

1512
01:05:42,090 --> 01:05:49,019
whatever the child's location in the

1513
01:05:44,760 --> 01:05:51,570
array is had better be greater than the

1514
01:05:49,019 --> 01:05:53,489
parents and so what we'll do now is

1515
01:05:51,570 --> 01:05:55,440
we'll run the code and we'll make sure

1516
01:05:53,489 --> 01:05:57,299
that that passes and if it doesn't pass

1517
01:05:55,440 --> 01:06:01,650
then we know we add them in the wrong

1518
01:05:57,300 --> 01:06:05,360
order right so for example if I had in

1519
01:06:01,650 --> 01:06:08,950
that jet you know that add cat thing

1520
01:06:05,360 --> 01:06:13,269
where is that oops

1521
01:06:08,949 --> 01:06:15,039
and cat so in the end cat thing what I

1522
01:06:13,269 --> 01:06:17,380
wanted to do here is say well let's

1523
01:06:15,039 --> 01:06:19,570
suppose that the head was defined first

1524
01:06:17,380 --> 01:06:22,180
well now what should happen is we should

1525
01:06:19,570 --> 01:06:26,740
get an error it should actually stop us

1526
01:06:22,179 --> 01:06:28,029
from creating the cat and there it is so

1527
01:06:26,739 --> 01:06:29,619
that's just a layer of protection to

1528
01:06:28,030 --> 01:06:32,350
make sure we don't accidentally be that

1529
01:06:29,619 --> 01:06:35,529
wrong so now we can do is inside the

1530
01:06:32,349 --> 01:06:39,099
entity rendering code so when we're

1531
01:06:35,530 --> 01:06:41,230
actually doing this what we can do is we

1532
01:06:39,099 --> 01:06:43,509
know there's a fairly complicated set of

1533
01:06:41,230 --> 01:06:45,610
code as you see for figuring out where

1534
01:06:43,510 --> 01:06:47,470
each piece is right this is relatively

1535
01:06:45,610 --> 01:06:51,579
tricky here we're doing all kinds of

1536
01:06:47,469 --> 01:06:53,289
deformation whatever nonsense right so

1537
01:06:51,579 --> 01:06:56,219
at the end of the day we finally find

1538
01:06:53,289 --> 01:06:59,909
out where the heck this thing goes right

1539
01:06:56,219 --> 01:07:02,859
we would now like to be able to specify

1540
01:06:59,909 --> 01:07:05,500
some additional information about it

1541
01:07:02,860 --> 01:07:09,970
right we want some kind of information

1542
01:07:05,500 --> 01:07:13,929
about where the thing went and this

1543
01:07:09,969 --> 01:07:15,369
actually becomes even trickier than we

1544
01:07:13,929 --> 01:07:18,250
think it is because we're gonna have to

1545
01:07:15,369 --> 01:07:21,900
do one more piece of of rather tricky

1546
01:07:18,250 --> 01:07:24,909
work here to make sure that we can even

1547
01:07:21,900 --> 01:07:28,780
know where each individual piece ends up

1548
01:07:24,909 --> 01:07:30,069
now why do I say that I see that because

1549
01:07:28,780 --> 01:07:33,160
you'll notice what happens inside push

1550
01:07:30,070 --> 01:07:34,960
bitmap is we pass down an aligned P but

1551
01:07:33,159 --> 01:07:38,589
we never find out where the bitmap

1552
01:07:34,960 --> 01:07:42,639
actually ends up right so if you look in

1553
01:07:38,590 --> 01:07:45,519
here when we do that thought get bit

1554
01:07:42,639 --> 01:07:47,049
mapped in this is the information we

1555
01:07:45,519 --> 01:07:50,980
actually need on the outside and we

1556
01:07:47,050 --> 01:07:52,930
never get it right we never get it so

1557
01:07:50,980 --> 01:07:55,750
what I'm almost gonna say we need to do

1558
01:07:52,929 --> 01:07:58,569
here is I think what we actually need is

1559
01:07:55,750 --> 01:07:59,550
we need to move this code to the outside

1560
01:07:58,570 --> 01:08:02,769
as well

1561
01:07:59,550 --> 01:08:07,600
now all the places that we're calling

1562
01:08:02,769 --> 01:08:10,480
this suggest to me that we probably want

1563
01:08:07,599 --> 01:08:13,480
to leave it in place but we want to

1564
01:08:10,480 --> 01:08:17,550
provide a version of just this interior

1565
01:08:13,480 --> 01:08:17,550
bit that you can call

1566
01:08:18,829 --> 01:08:36,289
like I think we want this here right we

1567
01:08:32,359 --> 01:08:39,769
want this to be actually something you

1568
01:08:36,289 --> 01:08:42,350
can call directly by itself so with all

1569
01:08:39,770 --> 01:08:47,650
of the other information you can

1570
01:08:42,350 --> 01:08:51,020
actually proceed from there makes sense

1571
01:08:47,649 --> 01:08:52,969
and so if I call this function I need

1572
01:08:51,020 --> 01:08:56,270
all of the information that comes with

1573
01:08:52,970 --> 01:09:02,780
it you know from from all of this stuff

1574
01:08:56,270 --> 01:09:05,300
so I'm gonna copy that in like so but

1575
01:09:02,779 --> 01:09:06,949
what I'm gonna do here is say instead of

1576
01:09:05,300 --> 01:09:10,310
the object transform which I don't

1577
01:09:06,949 --> 01:09:13,849
believe gets used anywhere does it no it

1578
01:09:10,310 --> 01:09:15,380
does mine so in addition to the object

1579
01:09:13,850 --> 01:09:16,670
transform I guess then I should say I

1580
01:09:15,380 --> 01:09:19,400
guess it's the height maybe it's not

1581
01:09:16,670 --> 01:09:22,819
years no everything's used you are

1582
01:09:19,399 --> 01:09:25,399
expected to pass in the used bitmap damn

1583
01:09:22,819 --> 01:09:30,139
right so you've got to actually use that

1584
01:09:25,399 --> 01:09:33,049
and again we may want to simplify that

1585
01:09:30,140 --> 01:09:34,579
part of the code in the future because

1586
01:09:33,050 --> 01:09:35,869
at this point now that we kind of see

1587
01:09:34,579 --> 01:09:37,250
how things are going it's probably

1588
01:09:35,869 --> 01:09:41,059
probably not really passing the right

1589
01:09:37,250 --> 01:09:43,970
set of stuff that makes sense so I want

1590
01:09:41,060 --> 01:09:45,470
to pass the dim in there and then

1591
01:09:43,970 --> 01:09:48,470
everywhere here that was using the dim

1592
01:09:45,470 --> 01:09:51,699
which is like actually just that those

1593
01:09:48,470 --> 01:09:51,699
two places right

1594
01:09:57,649 --> 01:10:05,069
all of that stuff is now captured inside

1595
01:10:01,349 --> 01:10:07,500
this routine so that we can do it in two

1596
01:10:05,069 --> 01:10:09,590
steps if we need this information and we

1597
01:10:07,500 --> 01:10:12,029
do because we need to know the actual

1598
01:10:09,590 --> 01:10:13,889
dimension and size of this thing if we

1599
01:10:12,029 --> 01:10:15,179
don't know the actual dimension in size

1600
01:10:13,889 --> 01:10:17,909
of this thing and the placement of it

1601
01:10:15,179 --> 01:10:19,408
right we won't be able to properly

1602
01:10:17,908 --> 01:10:22,379
attach things to it because we won't

1603
01:10:19,408 --> 01:10:24,089
know where it is if we just allow the

1604
01:10:22,380 --> 01:10:25,949
thing to automatically move it for us

1605
01:10:24,090 --> 01:10:29,069
then we don't really have any way of our

1606
01:10:25,948 --> 01:10:31,529
cells using that information later so

1607
01:10:29,069 --> 01:10:35,399
now what we need to do is do this in two

1608
01:10:31,529 --> 01:10:39,019
steps right we need to first do this

1609
01:10:35,399 --> 01:10:41,368
step here and we can do that up above

1610
01:10:39,020 --> 01:10:43,349
here if we wanted to I guess but I can

1611
01:10:41,368 --> 01:10:46,079
say I guess we have to make sure it is

1612
01:10:43,349 --> 01:10:52,920
actually a bitmap first so here we would

1613
01:10:46,079 --> 01:10:54,750
do you know the bitmap tim-tim and we

1614
01:10:52,920 --> 01:11:02,179
pass all the same things we were passing

1615
01:10:54,750 --> 01:11:02,179
here and then we just passed them again

1616
01:11:04,250 --> 01:11:09,719
so inside here what do we need we need

1617
01:11:06,569 --> 01:11:13,289
the bitmap the loaded bitmap so we don't

1618
01:11:09,719 --> 01:11:16,948
really need the transform we just need

1619
01:11:13,289 --> 01:11:20,219
the bitmap we need the piece to mention

1620
01:11:16,948 --> 01:11:22,589
why we need the offset we need the

1621
01:11:20,219 --> 01:11:24,779
alignment percentage we need the

1622
01:11:22,590 --> 01:11:30,060
excesses and waxes we don't need the

1623
01:11:24,779 --> 01:11:33,929
color once we have that we can pass it

1624
01:11:30,060 --> 01:11:37,619
in and go from there

1625
01:11:33,929 --> 01:11:42,569
we don't want to use this one anymore we

1626
01:11:37,618 --> 01:11:45,299
want to use this one directly so we need

1627
01:11:42,569 --> 01:11:48,289
to pass the bitmap itself not the idea

1628
01:11:45,300 --> 01:11:51,510
anymore we need to pass the height

1629
01:11:48,289 --> 01:11:52,948
that's good the offset is good the align

1630
01:11:51,510 --> 01:11:54,150
percentage is good the color of the

1631
01:11:52,948 --> 01:11:58,198
excess relaxes okay

1632
01:11:54,149 --> 01:12:01,309
so that is what we need to do for making

1633
01:11:58,198 --> 01:12:05,598
it into a two-stage function call and

1634
01:12:01,310 --> 01:12:05,599
where does that come out here

1635
01:12:17,130 --> 01:12:21,250
and again I think like this code is

1636
01:12:19,569 --> 01:12:22,929
really overbearing now so I feel like

1637
01:12:21,250 --> 01:12:25,810
we'll be able to simplify that down in

1638
01:12:22,929 --> 01:12:27,579
the future but that's separate issue so

1639
01:12:25,810 --> 01:12:30,250
alright so inside here what we need now

1640
01:12:27,579 --> 01:12:34,689
is to get that bitmap so when we you

1641
01:12:30,250 --> 01:12:37,539
know loaded bitmap bitmap equals get fit

1642
01:12:34,689 --> 01:12:38,979
map and so on let me see where that's

1643
01:12:37,539 --> 01:12:45,670
actually being used it doesn't get used

1644
01:12:38,979 --> 01:12:49,178
till they're just looking through it

1645
01:12:45,670 --> 01:12:52,350
here yes so I feel like I feel like this

1646
01:12:49,179 --> 01:12:55,350
stuff can just happen down here probably

1647
01:12:52,350 --> 01:12:55,350
right

1648
01:13:03,210 --> 01:13:11,020
looks right so that looked good so yeah

1649
01:13:07,929 --> 01:13:17,859
if we got this bitmap and we look up its

1650
01:13:11,020 --> 01:13:19,239
info and so on right yeah

1651
01:13:17,859 --> 01:13:25,149
then we just need to make sure we

1652
01:13:19,238 --> 01:13:26,559
actually ever got one and furthermore we

1653
01:13:25,149 --> 01:13:29,889
don't really need this lookup anymore

1654
01:13:26,560 --> 01:13:34,350
because the bitmap info is just pretty

1655
01:13:29,890 --> 01:13:34,350
sure it's just that right

1656
01:13:36,750 --> 01:13:45,329
that not true so where's the loaded

1657
01:13:40,439 --> 01:13:47,699
bitmap all right well never mind I'll

1658
01:13:45,329 --> 01:13:53,250
I'll use the get call still I don't

1659
01:13:47,699 --> 01:13:55,170
remember it comes from okay so I think

1660
01:13:53,250 --> 01:13:56,729
we're done with that and now what we

1661
01:13:55,170 --> 01:13:58,710
need to do is actually utilize that

1662
01:13:56,729 --> 01:14:01,049
information let's make sure we're still

1663
01:13:58,710 --> 01:14:03,359
actually getting any bitmaps here okay

1664
01:14:01,050 --> 01:14:07,739
so we're not so we're not quite getting

1665
01:14:03,359 --> 01:14:10,079
this right so I think that may be

1666
01:14:07,739 --> 01:14:11,789
because inside get bitmap here I think

1667
01:14:10,079 --> 01:14:13,350
you have to cue a load bitmap on it if

1668
01:14:11,789 --> 01:14:15,840
we can't get it yeah we do so you can

1669
01:14:13,350 --> 01:14:19,800
see here what has to happen there so I

1670
01:14:15,840 --> 01:14:22,199
need to cue that in order to to force

1671
01:14:19,800 --> 01:14:23,090
the thing to you know to ask for it

1672
01:14:22,199 --> 01:14:25,829
right

1673
01:14:23,090 --> 01:14:29,180
so here I'll actually do that and again

1674
01:14:25,829 --> 01:14:29,180
I think we want to clean this stuff up

1675
01:14:38,000 --> 01:14:41,279
so because we really don't need to be

1676
01:14:40,079 --> 01:14:45,090
doing it the way we're doing it we can

1677
01:14:41,279 --> 01:14:49,979
simplify that a lot but anyway so moving

1678
01:14:45,090 --> 01:14:52,430
along the bitmap ID we know so that's

1679
01:14:49,979 --> 01:14:52,429
pretty easy

1680
01:14:53,930 --> 01:15:04,020
that's the render group so I think

1681
01:14:56,550 --> 01:15:07,289
that's fine that'll looks good and off

1682
01:15:04,020 --> 01:15:09,750
we go so we should now have all of our

1683
01:15:07,289 --> 01:15:14,100
stuff rendering as it was before and we

1684
01:15:09,750 --> 01:15:16,829
mostly do except this part of the code

1685
01:15:14,100 --> 01:15:19,410
doesn't thunk through so I didn't quite

1686
01:15:16,829 --> 01:15:22,409
finish in Asset rendering this has to

1687
01:15:19,409 --> 01:15:24,829
call push bitmap with all the with all

1688
01:15:22,409 --> 01:15:24,829
the junk

1689
01:15:32,090 --> 01:15:35,640
and you can see why I say this is

1690
01:15:34,020 --> 01:15:37,470
overall they're just too much garbage

1691
01:15:35,640 --> 01:15:39,270
happening now and a lot of this stuff

1692
01:15:37,470 --> 01:15:42,869
could be simplified down and should be

1693
01:15:39,270 --> 01:15:44,790
eventually alright so now we're back to

1694
01:15:42,869 --> 01:15:47,189
where we want to be and it means that

1695
01:15:44,789 --> 01:15:49,590
now inside the entity we can actually

1696
01:15:47,189 --> 01:15:51,299
track where things really are what that

1697
01:15:49,590 --> 01:15:53,940
means is we can look at what the entity

1698
01:15:51,300 --> 01:15:56,130
piece count has to say so if I go back

1699
01:15:53,939 --> 01:15:58,019
to the entity structure we can see that

1700
01:15:56,130 --> 01:16:00,960
we've got like a set of entity pieces

1701
01:15:58,020 --> 01:16:05,910
and what I want to do is I want to be

1702
01:16:00,960 --> 01:16:08,850
able to have a set of like a set of

1703
01:16:05,909 --> 01:16:11,729
rectangles that tell me where the people

1704
01:16:08,850 --> 01:16:22,050
were who I was working with right so if

1705
01:16:11,729 --> 01:16:24,269
I take all the rectangles here this will

1706
01:16:22,050 --> 01:16:28,440
allow me to capture where I drew things

1707
01:16:24,270 --> 01:16:31,230
so I can then essentially solve for

1708
01:16:28,439 --> 01:16:35,339
where each went where any parent was

1709
01:16:31,229 --> 01:16:37,649
right if as I step through the array

1710
01:16:35,340 --> 01:16:39,720
drawing each individual piece I say

1711
01:16:37,649 --> 01:16:42,179
wherever this piece was I'm gonna right

1712
01:16:39,720 --> 01:16:43,949
back where I thought it was when I

1713
01:16:42,180 --> 01:16:46,650
finally put it into world space and

1714
01:16:43,949 --> 01:16:49,889
started to draw it if I put that into

1715
01:16:46,649 --> 01:16:52,889
the rectangle knowledge here that will

1716
01:16:49,890 --> 01:16:56,970
allow me to then take alignment point

1717
01:16:52,890 --> 01:16:58,140
information that I get from the snapping

1718
01:16:56,970 --> 01:17:00,690
information right that connection

1719
01:16:58,140 --> 01:17:02,490
information I can look up where things

1720
01:17:00,689 --> 01:17:09,029
are in two piece rectangles and know

1721
01:17:02,489 --> 01:17:14,309
where the parent was right I'm trying to

1722
01:17:09,029 --> 01:17:16,609
think of what exactly I want to store

1723
01:17:14,310 --> 01:17:16,610
there

1724
01:17:30,779 --> 01:17:42,340
and I'm thinking what I really want is

1725
01:17:38,460 --> 01:17:44,529
maybe just the x and y-axes because I

1726
01:17:42,340 --> 01:17:49,360
think that tells me everything I need

1727
01:17:44,529 --> 01:17:50,729
right I just need like the transform so

1728
01:17:49,359 --> 01:17:56,170
I basically need a three by three matrix

1729
01:17:50,729 --> 01:17:58,629
right I just need like I need like what

1730
01:17:56,170 --> 01:18:00,909
the origin point was and the X&amp;Y axis

1731
01:17:58,630 --> 01:18:04,090
because I need to then be able to like

1732
01:18:00,909 --> 01:18:07,229
move these things out along those like

1733
01:18:04,090 --> 01:18:10,270
that's basically what I'm doing here

1734
01:18:07,229 --> 01:18:10,269
[Music]

1735
01:18:11,279 --> 01:18:19,059
and that pretty much tells me how I need

1736
01:18:15,880 --> 01:18:21,039
this thing to be aligned so you know

1737
01:18:19,060 --> 01:18:28,630
thinking about it a little bit more

1738
01:18:21,039 --> 01:18:36,519
specifically here again like this could

1739
01:18:28,630 --> 01:18:42,909
probably be simplified quite a bit if we

1740
01:18:36,520 --> 01:18:46,050
look back at our math code and we we

1741
01:18:42,909 --> 01:18:48,909
look at what we actually I don't

1742
01:18:46,050 --> 01:18:51,010
remember what we had stored in here in

1743
01:18:48,909 --> 01:18:53,229
terms of like matrices and things like

1744
01:18:51,010 --> 01:19:01,260
that see did we actually have any way

1745
01:18:53,229 --> 01:19:03,309
down well we do we have M four by fours

1746
01:19:01,260 --> 01:19:05,640
so looking back at what we have here

1747
01:19:03,310 --> 01:19:08,680
right we've got em four by fours they're

1748
01:19:05,640 --> 01:19:10,750
over specified for what we need but we

1749
01:19:08,680 --> 01:19:13,150
could use them just because we already

1750
01:19:10,750 --> 01:19:19,720
have them like we don't need a full 4x4

1751
01:19:13,149 --> 01:19:24,569
because no projection here but maybe

1752
01:19:19,720 --> 01:19:24,570
that's fine so

1753
01:19:29,270 --> 01:19:38,300
if I look at the piece transformer right

1754
01:19:32,130 --> 01:19:41,699
here then I can sort of say well alright

1755
01:19:38,300 --> 01:19:43,829
anytime I'm going to update a piece on a

1756
01:19:41,699 --> 01:19:46,649
produced a transform for that piece and

1757
01:19:43,829 --> 01:19:48,269
then I'm going to use that to align

1758
01:19:46,649 --> 01:19:50,969
anyone else who needs to get aligned to

1759
01:19:48,270 --> 01:19:54,830
it right and since we produced these

1760
01:19:50,970 --> 01:19:54,829
axes here you know thinking it through

1761
01:19:59,720 --> 01:20:09,180
we may now want to sort of pull back a

1762
01:20:03,210 --> 01:20:10,890
little bit and have that have the

1763
01:20:09,180 --> 01:20:12,600
alignment points just be things that

1764
01:20:10,890 --> 01:20:14,610
work sort of like a skeleton here

1765
01:20:12,600 --> 01:20:15,870
because again now we're sort of giving

1766
01:20:14,609 --> 01:20:17,849
the point where it's really not

1767
01:20:15,869 --> 01:20:22,109
necessary the stuff that's being done in

1768
01:20:17,850 --> 01:20:24,120
there and you really just want to split

1769
01:20:22,109 --> 01:20:25,619
it into the font rendering code which

1770
01:20:24,119 --> 01:20:26,729
uses the alignment points at a very

1771
01:20:25,619 --> 01:20:28,319
fixed way and doesn't have to do

1772
01:20:26,729 --> 01:20:29,909
anything interesting with them and then

1773
01:20:28,319 --> 01:20:31,079
the actual in-game sprite code which

1774
01:20:29,909 --> 01:20:35,909
wants to have a fairly complex

1775
01:20:31,079 --> 01:20:37,920
relationship right I'm gonna start by

1776
01:20:35,909 --> 01:20:39,630
not doing that and then I think what I

1777
01:20:37,920 --> 01:20:41,430
want to do is go clean up that code so

1778
01:20:39,630 --> 01:20:44,390
that we have a much more straightforward

1779
01:20:41,430 --> 01:20:46,860
way of writing all these things in right

1780
01:20:44,390 --> 01:20:50,670
so let's go ahead and do that here's the

1781
01:20:46,859 --> 01:20:52,289
piece transforms in question what I want

1782
01:20:50,670 --> 01:20:55,470
to do is say for each piece index we're

1783
01:20:52,289 --> 01:20:57,449
gonna write that transform out so in

1784
01:20:55,470 --> 01:20:59,940
here what I'll do is say well when we

1785
01:20:57,449 --> 01:21:04,470
get all this stuff right all of this

1786
01:20:59,939 --> 01:21:07,649
information we then have the ability to

1787
01:21:04,470 --> 01:21:09,930
write in a matrix that would have the

1788
01:21:07,649 --> 01:21:12,149
pieces we need we know we're not going

1789
01:21:09,930 --> 01:21:19,050
to have any rotation but we are gonna

1790
01:21:12,149 --> 01:21:20,489
have translation and we might have axes

1791
01:21:19,050 --> 01:21:22,890
that we put directly in so we're not

1792
01:21:20,489 --> 01:21:25,949
going to call this X this X rotation

1793
01:21:22,890 --> 01:21:28,770
stuff but we may slam axes directly in

1794
01:21:25,949 --> 01:21:30,569
there at some point as well right so

1795
01:21:28,770 --> 01:21:34,470
we've got some stuff that's going to

1796
01:21:30,569 --> 01:21:37,019
happen in there for sure okay so if we

1797
01:21:34,470 --> 01:21:39,740
want that to work how are we gonna do

1798
01:21:37,020 --> 01:21:39,740
this exactly

1799
01:21:49,319 --> 01:21:55,448
you know yeah I'm just not seeing a way

1800
01:21:53,260 --> 01:21:57,130
to do it other than to actually really

1801
01:21:55,448 --> 01:21:58,808
start pulling this stuff out into here

1802
01:21:57,130 --> 01:22:00,489
because if you look at how this stuff

1803
01:21:58,809 --> 01:22:02,920
works right we've got stuff that

1804
01:22:00,488 --> 01:22:05,468
modifies how the axes actually actually

1805
01:22:02,920 --> 01:22:08,578
work you can see that's us generating

1806
01:22:05,469 --> 01:22:11,139
these up right transform axes here right

1807
01:22:08,578 --> 01:22:13,359
and so for anything that was actually

1808
01:22:11,139 --> 01:22:17,650
doing that upright transform we need to

1809
01:22:13,359 --> 01:22:19,988
actually have that work inside here and

1810
01:22:17,649 --> 01:22:23,998
last up I just I feel like a lot of that

1811
01:22:19,988 --> 01:22:26,799
stuff is gonna end up being you know

1812
01:22:23,998 --> 01:22:29,380
that stuff really has to be done in a

1813
01:22:26,800 --> 01:22:31,929
more we've got to start making this

1814
01:22:29,380 --> 01:22:33,309
stuff a little bit more coherent so I'm

1815
01:22:31,929 --> 01:22:36,368
gonna go ahead and say let's just do it

1816
01:22:33,309 --> 01:22:41,469
how much time do I have left what do we

1817
01:22:36,368 --> 01:22:44,728
got like 25 minutes I don't know it's a

1818
01:22:41,469 --> 01:22:44,729
very good question how much time we have

1819
01:22:47,760 --> 01:23:03,880
anyone any no much time we got anyone

1820
01:22:58,529 --> 01:23:06,309
nobody knows it's alright the stream

1821
01:23:03,880 --> 01:23:07,659
thing will tell us I think but I think I

1822
01:23:06,309 --> 01:23:09,579
want to I want to kind of push through

1823
01:23:07,658 --> 01:23:10,719
that so if I compile this first let's

1824
01:23:09,578 --> 01:23:15,099
let's make sure we're still compiling

1825
01:23:10,719 --> 01:23:21,609
here because I don't think we are I just

1826
01:23:15,099 --> 01:23:24,159
need to not that out okay so what we

1827
01:23:21,609 --> 01:23:28,478
want to do now is we want oh and you can

1828
01:23:24,158 --> 01:23:30,279
see here like this stuff this stuff is

1829
01:23:28,479 --> 01:23:33,400
actually gonna be getting done all of

1830
01:23:30,279 --> 01:23:35,408
this the part of that that was relevant

1831
01:23:33,399 --> 01:23:38,738
is now going to be actually happening as

1832
01:23:35,408 --> 01:23:40,538
well which is nice okay so what I want

1833
01:23:38,738 --> 01:23:42,038
to do now is I want to actually go

1834
01:23:40,538 --> 01:23:45,309
through and figure out who's calling

1835
01:23:42,038 --> 01:23:48,578
push bitmap and why and I want to clean

1836
01:23:45,309 --> 01:23:50,590
that up so what you can see here is that

1837
01:23:48,578 --> 01:23:53,408
we've got the debug code calling push

1838
01:23:50,590 --> 01:23:55,630
bitmap here we've got the dev UI calling

1839
01:23:53,408 --> 01:23:59,018
here at the cutscene the particles so

1840
01:23:55,630 --> 01:24:03,039
there's a Codel of five people calling

1841
01:23:59,019 --> 01:24:07,989
it debug system dev UI cutscene

1842
01:24:03,039 --> 01:24:09,430
particles and entity I want entity to

1843
01:24:07,989 --> 01:24:13,809
now basically be just doing its own

1844
01:24:09,430 --> 01:24:15,280
thing almost entirely I know that the

1845
01:24:13,810 --> 01:24:17,770
deep obsessed with WI the cutscene the

1846
01:24:15,279 --> 01:24:21,579
particles they aren't using the more

1847
01:24:17,770 --> 01:24:24,220
complicated stuff there right so I think

1848
01:24:21,579 --> 01:24:28,960
and I could be very wrong about this but

1849
01:24:24,220 --> 01:24:31,270
I think in here I I don't know who's

1850
01:24:28,960 --> 01:24:34,239
actually using this up right transform

1851
01:24:31,270 --> 01:24:35,980
information or why but what I want to do

1852
01:24:34,239 --> 01:24:38,109
is move that out so only the entities do

1853
01:24:35,979 --> 01:24:42,369
it and it's a specific thing that they

1854
01:24:38,109 --> 01:24:45,489
do right so there it is in the push back

1855
01:24:42,369 --> 01:24:53,409
push it's in the push bitmap called

1856
01:24:45,489 --> 01:25:02,590
there does anyone else use it so that's

1857
01:24:53,409 --> 01:25:05,819
just a generic call yeah so I think what

1858
01:25:02,590 --> 01:25:08,800
I want to do here is get that up right

1859
01:25:05,819 --> 01:25:10,960
idea I want that up right idea to go

1860
01:25:08,800 --> 01:25:14,170
away entirely so we're gonna start there

1861
01:25:10,960 --> 01:25:16,270
so this is going to go away the object

1862
01:25:14,170 --> 01:25:24,220
transform will not tell you that

1863
01:25:16,270 --> 01:25:27,670
information and then I'm gonna fix it so

1864
01:25:24,220 --> 01:25:29,800
now these are both the same okay so they

1865
01:25:27,670 --> 01:25:32,399
can collapse down to just be default

1866
01:25:29,800 --> 01:25:32,400
transform

1867
01:25:36,918 --> 01:26:15,880
that's fine keep going that's fine

1868
01:25:55,279 --> 01:26:19,368
all these are fine what else we got okay

1869
01:26:15,880 --> 01:26:22,909
so now we should essentially have only

1870
01:26:19,368 --> 01:26:25,668
one person who cares about this upright

1871
01:26:22,908 --> 01:26:28,728
flag and it is the push bitmap call that

1872
01:26:25,668 --> 01:26:31,158
we were using here right and that's to

1873
01:26:28,729 --> 01:26:36,760
get this like up right sprite stuff

1874
01:26:31,158 --> 01:26:45,948
happening so what I want to do there is

1875
01:26:36,760 --> 01:26:48,829
and what is the push up right so that

1876
01:26:45,948 --> 01:26:52,098
actually does this thing here which is

1877
01:26:48,828 --> 01:26:56,768
different from this it's actually a

1878
01:26:52,099 --> 01:26:56,769
different way of doing it right

1879
01:27:01,569 --> 01:27:11,210
not sure either where this is coming

1880
01:27:05,930 --> 01:27:24,950
from so it's actually getting computed

1881
01:27:11,210 --> 01:27:29,689
outside of push-up right interesting so

1882
01:27:24,949 --> 01:27:35,809
I think what we could do here is again

1883
01:27:29,689 --> 01:27:38,659
start treating push bitmap a little more

1884
01:27:35,810 --> 01:27:42,710
harshly and force the people who call it

1885
01:27:38,659 --> 01:27:46,569
to do something more specific so first

1886
01:27:42,710 --> 01:27:49,159
of all we could start by doing this

1887
01:27:46,569 --> 01:27:57,829
which is not what we're going to finish

1888
01:27:49,159 --> 01:28:00,319
with but we can do this right and now we

1889
01:27:57,829 --> 01:28:03,050
could sort of see who's actually calling

1890
01:28:00,319 --> 01:28:07,009
this and why and from where you know

1891
01:28:03,050 --> 01:28:10,360
what I mean I would be interested to

1892
01:28:07,010 --> 01:28:13,220
know if anyone's actually doing this and

1893
01:28:10,359 --> 01:28:16,630
furthermore since I know I guess I know

1894
01:28:13,220 --> 01:28:21,650
nobody really needs this up right path

1895
01:28:16,630 --> 01:28:25,630
mmm pretty much anyway so I think we

1896
01:28:21,649 --> 01:28:25,629
could just say like look it's false

1897
01:28:29,829 --> 01:28:32,829
right

1898
01:28:37,699 --> 01:28:46,439
and so then the only person who cares is

1899
01:28:42,300 --> 01:28:49,020
here and so the upright transform stuff

1900
01:28:46,439 --> 01:28:51,419
is just whether or not this entity is

1901
01:28:49,020 --> 01:28:56,160
supposed to be upright or not here and I

1902
01:28:51,420 --> 01:28:58,289
mean and so I don't actually know where

1903
01:28:56,159 --> 01:29:01,470
we were getting them or how we would get

1904
01:28:58,289 --> 01:29:05,359
that information otherwise I guess we

1905
01:29:01,470 --> 01:29:07,619
just always assumed it was upright I

1906
01:29:05,359 --> 01:29:09,359
guess which is not something we

1907
01:29:07,619 --> 01:29:12,000
necessarily want to assume but that is I

1908
01:29:09,359 --> 01:29:18,319
think what we were doing so really now

1909
01:29:12,000 --> 01:29:18,319
it just looks like that right oops

1910
01:29:24,260 --> 01:29:29,510
okay

1911
01:29:26,899 --> 01:29:30,920
so I think that's sufficient for how we

1912
01:29:29,510 --> 01:29:32,630
were doing it before right see there's

1913
01:29:30,920 --> 01:29:34,690
all of our rendering still looks fine

1914
01:29:32,630 --> 01:29:38,029
here right all this stuff works

1915
01:29:34,689 --> 01:29:40,039
similarly I assume that the yeah this

1916
01:29:38,029 --> 01:29:42,289
all works just fine too

1917
01:29:40,039 --> 01:29:46,819
and all of this stuff should work just

1918
01:29:42,289 --> 01:29:49,699
fine yeah so everything still intact no

1919
01:29:46,819 --> 01:29:56,569
issues there and we're good to go

1920
01:29:49,699 --> 01:29:59,059
now if I go through now and actually try

1921
01:29:56,569 --> 01:30:02,960
to simplify down what do those people

1922
01:29:59,060 --> 01:30:04,970
actually need to call I'm gonna start

1923
01:30:02,960 --> 01:30:07,369
with the cutscenes which are the most

1924
01:30:04,970 --> 01:30:11,300
basic thing right and you can see what

1925
01:30:07,369 --> 01:30:13,819
they pass default transform here does

1926
01:30:11,300 --> 01:30:18,619
not get modified other than to give an

1927
01:30:13,819 --> 01:30:21,799
offset to the thing which could just be

1928
01:30:18,619 --> 01:30:24,859
specified as a position and so what I'm

1929
01:30:21,800 --> 01:30:26,360
gonna news I want to figure out if I can

1930
01:30:24,859 --> 01:30:29,210
just get rid of those entity transforms

1931
01:30:26,359 --> 01:30:31,670
I don't like them they're stupid they're

1932
01:30:29,210 --> 01:30:34,399
just nonsense that you could have just

1933
01:30:31,670 --> 01:30:39,890
done yourself right you could have you

1934
01:30:34,399 --> 01:30:41,839
could have handled these separately so

1935
01:30:39,890 --> 01:30:44,210
let's find out to what extent I'm right

1936
01:30:41,840 --> 01:30:48,670
first thing is get rid of scale does

1937
01:30:44,210 --> 01:30:48,670
anyone actually ever set it to anything

1938
01:30:51,039 --> 01:30:57,140
No so scale is irrelevant completely

1939
01:30:54,890 --> 01:31:00,260
irrelevant right there's no scale

1940
01:30:57,140 --> 01:31:01,700
happening so if I just get rid of scale

1941
01:31:00,260 --> 01:31:08,020
we're down to the fact that this is just

1942
01:31:01,699 --> 01:31:11,989
an offset right and that's the end of it

1943
01:31:08,020 --> 01:31:14,090
it wasn't used at all so now if we just

1944
01:31:11,989 --> 01:31:16,369
get rid of object transforms period I'm

1945
01:31:14,090 --> 01:31:19,480
just curious to know what do we actually

1946
01:31:16,369 --> 01:31:19,479
get as a result

1947
01:31:27,390 --> 01:31:37,390
all right so if we do get render entity

1948
01:31:31,270 --> 01:31:42,580
basis P it just adds those two things

1949
01:31:37,390 --> 01:31:44,950
together it happens only in push rect so

1950
01:31:42,579 --> 01:31:46,569
literally all that would be doing is

1951
01:31:44,949 --> 01:31:49,269
adding whatever the object transform

1952
01:31:46,569 --> 01:31:52,599
thing was so what I'd rather do here is

1953
01:31:49,270 --> 01:31:56,140
say look that's just the p value that

1954
01:31:52,600 --> 01:31:58,510
comes in right so we're done I don't

1955
01:31:56,140 --> 01:32:00,940
want to know about any of this you can

1956
01:31:58,510 --> 01:32:05,140
just do it yourself so don't bother me

1957
01:32:00,939 --> 01:32:08,529
right and so if I wanted to do that that

1958
01:32:05,140 --> 01:32:11,020
way what I could say is well the P and

1959
01:32:08,529 --> 01:32:12,909
the basis P right the offset comes in I

1960
01:32:11,020 --> 01:32:15,310
just do the thing with the dim this is

1961
01:32:12,909 --> 01:32:21,488
just an add of these two so really basis

1962
01:32:15,310 --> 01:32:25,210
P is just P at that point P itself it's

1963
01:32:21,488 --> 01:32:26,759
never used only basis key is right so

1964
01:32:25,210 --> 01:32:30,810
what I could do then and say all right

1965
01:32:26,760 --> 01:32:30,810
basis P is this

1966
01:32:37,109 --> 01:32:43,448
done our now our push shrek call is much

1967
01:32:40,658 --> 01:32:46,059
simpler and off we go

1968
01:32:43,448 --> 01:32:50,319
similarly here we wouldn't need the

1969
01:32:46,060 --> 01:32:52,600
object transform for that we could just

1970
01:32:50,319 --> 01:32:54,340
use an opposite there I'm not sure how I

1971
01:32:52,600 --> 01:32:55,659
want to do that one exactly because it's

1972
01:32:54,340 --> 01:32:57,190
not taking it to you think I don't even

1973
01:32:55,658 --> 01:32:58,750
know if I want that call any works I'm

1974
01:32:57,189 --> 01:33:01,149
not sure what a 2d rectangle supposed to

1975
01:32:58,750 --> 01:33:04,210
be doing in that case but we can figure

1976
01:33:01,149 --> 01:33:05,619
that out a little bit later alright so

1977
01:33:04,210 --> 01:33:09,730
this called just I'm just want to get

1978
01:33:05,619 --> 01:33:11,260
rid of that call it doesn't belong so

1979
01:33:09,729 --> 01:33:14,379
now we have I'm gonna put a volume

1980
01:33:11,260 --> 01:33:16,150
outline there's a rectangle 3d all that

1981
01:33:14,380 --> 01:33:18,069
happens there is like the object

1982
01:33:16,149 --> 01:33:24,149
transform was just an offset that got

1983
01:33:18,069 --> 01:33:24,149
added on so again not necessary right

1984
01:33:30,750 --> 01:33:34,689
and I'm just pulling this out because

1985
01:33:32,829 --> 01:33:35,939
like I said don't like it don't think it

1986
01:33:34,689 --> 01:33:39,879
belongs there

1987
01:33:35,939 --> 01:33:49,658
so there's rectangle to there's out

1988
01:33:39,880 --> 01:33:52,560
transform don't want that no no bad

1989
01:33:49,658 --> 01:33:52,559
goodbye

1990
01:34:00,000 --> 01:34:08,649
okay continuing through to transform

1991
01:34:04,448 --> 01:34:11,678
again don't want it so really all it

1992
01:34:08,649 --> 01:34:14,920
happens here is we just don't do the

1993
01:34:11,679 --> 01:34:17,529
transform same thing here don't do the

1994
01:34:14,920 --> 01:34:19,989
transform so people just pass in what

1995
01:34:17,529 --> 01:34:23,789
they wanted in the first place

1996
01:34:19,988 --> 01:34:30,609
same thing here don't do the transform

1997
01:34:23,789 --> 01:34:33,479
there we go so all of these things where

1998
01:34:30,609 --> 01:34:35,920
we're just talking about a bias there

1999
01:34:33,479 --> 01:34:49,479
that has to be added I'm just going to

2000
01:34:35,920 --> 01:34:50,800
call that a v3 like so because all

2001
01:34:49,479 --> 01:34:53,589
that's used for a sorting in the first

2002
01:34:50,800 --> 01:34:55,480
place let's take a look at push bitmap

2003
01:34:53,590 --> 01:34:57,130
it takes a knob to transfer I'm here I

2004
01:34:55,479 --> 01:35:00,039
don't want that so I'm gonna get rid of

2005
01:34:57,130 --> 01:35:01,569
it let's take a look at where object

2006
01:35:00,039 --> 01:35:04,599
transforms being used it was being used

2007
01:35:01,569 --> 01:35:08,558
here to specify that piece which I don't

2008
01:35:04,599 --> 01:35:19,119
want the same thing here let's get rid

2009
01:35:08,559 --> 01:35:21,039
of that all these things can go and

2010
01:35:19,118 --> 01:35:22,630
again it's just overdue clean-out right

2011
01:35:21,039 --> 01:35:24,908
we just want to get rid of these things

2012
01:35:22,630 --> 01:35:26,920
that don't do anything so that we can

2013
01:35:24,908 --> 01:35:32,578
simplify how the render is working and

2014
01:35:26,920 --> 01:35:32,578
make it clear we don't need any of this

2015
01:35:38,609 --> 01:35:48,989
we don't need any of this when we do

2016
01:35:46,560 --> 01:35:51,030
push the stick push rekt here we would

2017
01:35:48,989 --> 01:35:53,399
need an offset so we kind of need on

2018
01:35:51,029 --> 01:36:00,469
carriage it's a thing that's like where

2019
01:35:53,399 --> 01:36:02,879
is the entity probably I don't know that

2020
01:36:00,470 --> 01:36:08,220
draw hit points actually gets called

2021
01:36:02,880 --> 01:36:11,090
anymore so there it is

2022
01:36:08,220 --> 01:36:14,699
and so the entity transform bit here

2023
01:36:11,090 --> 01:36:26,190
what we really want to do is just have

2024
01:36:14,699 --> 01:36:28,979
this value right so we would just pass

2025
01:36:26,189 --> 01:36:31,379
that in because that's what it was

2026
01:36:28,979 --> 01:36:33,719
actually getting so it needs it up in

2027
01:36:31,380 --> 01:36:37,890
here like when we do draw hit points it

2028
01:36:33,720 --> 01:36:40,320
would need that ground point and then

2029
01:36:37,890 --> 01:36:42,750
when it's you know every time something

2030
01:36:40,319 --> 01:36:45,569
in here happens where it's gonna draw

2031
01:36:42,750 --> 01:36:48,659
something like in here these are always

2032
01:36:45,569 --> 01:36:58,920
going to be like ground P plus the thing

2033
01:36:48,659 --> 01:37:01,649
you know alright so moving on debug pick

2034
01:36:58,920 --> 01:37:04,319
entity is not really a thing anymore we

2035
01:37:01,649 --> 01:37:07,279
sort of implemented that directly like

2036
01:37:04,319 --> 01:37:07,279
I'm just going to get rid of this

2037
01:37:14,630 --> 01:37:22,409
we did a better version of that already

2038
01:37:18,500 --> 01:37:24,569
inside object transform now this part

2039
01:37:22,408 --> 01:37:27,598
again just got removed so we can

2040
01:37:24,569 --> 01:37:29,488
eliminate entirely this anyone who's

2041
01:37:27,599 --> 01:37:31,260
using this is now just doing entity

2042
01:37:29,488 --> 01:37:33,689
ground P that's all that they're doing

2043
01:37:31,260 --> 01:37:35,699
there right that's entity ground P and

2044
01:37:33,689 --> 01:37:37,319
that's all that's happening so that

2045
01:37:35,698 --> 01:37:40,109
really doesn't need the entity transform

2046
01:37:37,319 --> 01:37:43,170
same thing here right this location that

2047
01:37:40,109 --> 01:37:48,359
it's being specified that is just enemy

2048
01:37:43,170 --> 01:37:51,060
ground P so none of that ever needs to

2049
01:37:48,359 --> 01:37:52,738
happen anymore and you'll see why I'm

2050
01:37:51,060 --> 01:37:54,780
pulling this out as I bubble it up

2051
01:37:52,738 --> 01:37:57,479
you'll see why I want to get rid of it

2052
01:37:54,779 --> 01:37:59,429
because we actually don't want that we

2053
01:37:57,479 --> 01:38:01,500
don't want those transforms happening

2054
01:37:59,429 --> 01:38:04,380
down in the render it was a bad place

2055
01:38:01,500 --> 01:38:17,460
for it we had reasons at the time those

2056
01:38:04,380 --> 01:38:27,179
reasons are gone so yeah this again is

2057
01:38:17,460 --> 01:38:40,590
just entity ground P we're not actually

2058
01:38:27,179 --> 01:38:47,219
calling these anymore but if we were we

2059
01:38:40,590 --> 01:38:48,810
would you know not want to call that so

2060
01:38:47,219 --> 01:38:52,380
here we've got another situation where

2061
01:38:48,810 --> 01:38:56,730
we do want an offset P in this case of

2062
01:38:52,380 --> 01:38:58,260
course we could just do I think we could

2063
01:38:56,729 --> 01:39:01,738
just roll it all into the computation of

2064
01:38:58,260 --> 01:39:03,570
P by itself but in order to you know not

2065
01:39:01,738 --> 01:39:05,759
have bugs that I might introduce by

2066
01:39:03,569 --> 01:39:07,109
doing that since I don't care in this

2067
01:39:05,760 --> 01:39:10,800
case I'm just going to go ahead and put

2068
01:39:07,109 --> 01:39:13,069
it in here and then when we actually go

2069
01:39:10,800 --> 01:39:15,900
to do the the rendering of this thing

2070
01:39:13,069 --> 01:39:20,219
I'm going to go ahead and say that the

2071
01:39:15,899 --> 01:39:23,189
you know the way that we compute this

2072
01:39:20,219 --> 01:39:25,859
stuff is just like kind of convoluted

2073
01:39:23,189 --> 01:39:30,138
and strange but oh well

2074
01:39:25,859 --> 01:39:30,139
so it's offset P

2075
01:39:34,449 --> 01:39:59,500
you know what why isn't soapy why hold

2076
01:39:47,350 --> 01:40:09,340
on a second so looking at this we don't

2077
01:39:59,500 --> 01:40:12,279
actually use py except in here Wow so

2078
01:40:09,340 --> 01:40:17,590
this is like so P is actually not used

2079
01:40:12,279 --> 01:40:20,019
only offset is that's kind of nuts so

2080
01:40:17,590 --> 01:40:23,949
really I don't know for whatever reason

2081
01:40:20,020 --> 01:40:26,770
we ended up writing it this way so we

2082
01:40:23,949 --> 01:40:29,800
actually don't use P we just let it flow

2083
01:40:26,770 --> 01:40:32,620
through that way and we use that I guess

2084
01:40:29,800 --> 01:40:34,029
is fine I think that's right I'll have

2085
01:40:32,619 --> 01:40:36,519
to test that because I'm not sure I

2086
01:40:34,029 --> 01:40:39,250
understood that quite right but you know

2087
01:40:36,520 --> 01:40:42,040
hopefully we did all right so here we've

2088
01:40:39,250 --> 01:40:46,390
got our shadow transform and our text

2089
01:40:42,039 --> 01:40:47,949
transform and so then down here when we

2090
01:40:46,390 --> 01:40:52,110
actually use our shadow transform in

2091
01:40:47,949 --> 01:40:52,109
text transform it's really just this

2092
01:40:54,869 --> 01:41:01,149
right and we don't actually need to do

2093
01:40:59,680 --> 01:41:03,490
anything else there because those are

2094
01:41:01,149 --> 01:41:07,029
just things that offset the Z for

2095
01:41:03,489 --> 01:41:09,069
rendering purposes sorting purposes here

2096
01:41:07,029 --> 01:41:10,929
when we do know transform well know

2097
01:41:09,069 --> 01:41:12,579
transform is pretty easy because that

2098
01:41:10,930 --> 01:41:16,230
just means we delete it which is exactly

2099
01:41:12,579 --> 01:41:16,229
what we would like to do with it

2100
01:41:27,119 --> 01:41:32,739
and then we've got the backing transform

2101
01:41:29,739 --> 01:41:37,899
for the box so in here we'd like to do

2102
01:41:32,739 --> 01:41:43,869
is we'd like to offset that box by this

2103
01:41:37,899 --> 01:41:47,139
Z value and so I think that is the Z

2104
01:41:43,869 --> 01:41:52,920
value so I'm pretty sure that that is

2105
01:41:47,140 --> 01:41:56,380
what that would do you know I mean

2106
01:41:52,920 --> 01:41:58,930
inside that push rect we may want to

2107
01:41:56,380 --> 01:42:02,380
just take an offset here in general so

2108
01:41:58,930 --> 01:42:05,350
you know I might argue that the better

2109
01:42:02,380 --> 01:42:10,539
thing to do there for the 2d push rect

2110
01:42:05,350 --> 01:42:13,840
call is rather than specifying Z specify

2111
01:42:10,539 --> 01:42:15,670
an offset and that way in here what

2112
01:42:13,840 --> 01:42:18,640
would actually happen is you would say

2113
01:42:15,670 --> 01:42:23,680
oh okay so when we actually push this on

2114
01:42:18,640 --> 01:42:26,829
we we pass down for the for the rect

2115
01:42:23,680 --> 01:42:32,829
outline stuff when we do the offset we

2116
01:42:26,829 --> 01:42:34,659
just say that it's this you know what I

2117
01:42:32,829 --> 01:42:36,460
mean

2118
01:42:34,659 --> 01:42:40,840
and again this could stand to be cleaned

2119
01:42:36,460 --> 01:42:42,699
up a little bit too but all right so

2120
01:42:40,840 --> 01:42:46,800
then the backing transform just comes on

2121
01:42:42,699 --> 01:42:46,800
there and that's good

2122
01:42:46,979 --> 01:43:02,459
same thing here so there's the tooltip

2123
01:42:50,489 --> 01:43:02,460
it goes in oops goes in there yeah

2124
01:43:08,680 --> 01:43:18,110
what's the problem oh I know what the

2125
01:43:13,520 --> 01:43:20,270
problem is oh no I don't know the

2126
01:43:18,109 --> 01:43:21,949
problem is so push rekt in this case

2127
01:43:20,270 --> 01:43:28,870
what's what's the deal the bounds

2128
01:43:21,949 --> 01:43:28,869
renderer push 4x

2129
01:43:34,659 --> 01:43:40,090
I thought I'd just changed this oh it

2130
01:43:37,510 --> 01:43:50,680
was wrecked out line but I changed I

2131
01:43:40,090 --> 01:43:53,289
hate that too there we go alright so I

2132
01:43:50,680 --> 01:43:55,840
think that's all good now it's gotta

2133
01:43:53,289 --> 01:44:01,000
clean that up a bit

2134
01:43:55,840 --> 01:44:03,159
so here's push rekts it doesn't have an

2135
01:44:01,000 --> 01:44:18,270
offset so that's the zero offset there

2136
01:44:03,159 --> 01:44:18,269
so you know so that's all well I'm good

2137
01:44:20,189 --> 01:44:34,439
same here I guess it doesn't care where

2138
01:44:24,100 --> 01:44:34,440
it's pushing that same here

2139
01:44:38,038 --> 01:44:47,529
all of this stuff is just initializing

2140
01:44:43,958 --> 01:44:51,010
these VIII's so since they would all be

2141
01:44:47,529 --> 01:44:56,559
cleared initially I believe we wouldn't

2142
01:44:51,010 --> 01:45:00,280
really need to do this right that's not

2143
01:44:56,559 --> 01:45:08,219
actually necessary but I could just do

2144
01:45:00,279 --> 01:45:14,649
it anyway there's a tool chip transform

2145
01:45:08,219 --> 01:45:20,019
here's the text transform here's the you

2146
01:45:14,649 --> 01:45:26,549
while I transform here's the shadow

2147
01:45:20,019 --> 01:45:26,550
transform and there's

2148
01:45:30,309 --> 01:45:39,279
all right um what else we got so doing

2149
01:45:38,020 --> 01:45:41,079
our push tricks here again we have the

2150
01:45:39,279 --> 01:45:42,819
UI transform stuff we knew that doesn't

2151
01:45:41,078 --> 01:45:45,038
actually happen anymore so what is the

2152
01:45:42,819 --> 01:45:46,569
base Z that's happening here okay so

2153
01:45:45,038 --> 01:45:47,828
this this is some kind of a sorting

2154
01:45:46,569 --> 01:45:50,729
thing we're doing for like letting our

2155
01:45:47,828 --> 01:45:53,170
profile bars beeping so I do want to

2156
01:45:50,729 --> 01:45:55,269
effectively have like an addition that

2157
01:45:53,170 --> 01:45:57,760
happens here right so this this wants to

2158
01:45:55,270 --> 01:45:59,590
be a real thing so we're gonna say all

2159
01:45:57,760 --> 01:46:01,750
right take the UI transform in this case

2160
01:45:59,590 --> 01:46:03,639
and add some to it to get you know keep

2161
01:46:01,750 --> 01:46:07,988
the sorting happening the same way as it

2162
01:46:03,639 --> 01:46:11,340
was happening before in here again same

2163
01:46:07,988 --> 01:46:18,399
thing so in this case we just need to

2164
01:46:11,340 --> 01:46:22,199
add the song where we've got the base D

2165
01:46:18,399 --> 01:46:27,488
not attacking itself on there and that

2166
01:46:22,198 --> 01:46:29,319
should be it ya know transform is good

2167
01:46:27,488 --> 01:46:29,738
because no transform means we don't care

2168
01:46:29,319 --> 01:46:32,469
what it is

2169
01:46:29,738 --> 01:46:35,828
no transform there we don't care as well

2170
01:46:32,469 --> 01:46:40,239
the UI transform in this case just comes

2171
01:46:35,828 --> 01:46:50,889
right in there and this is a 1 so that's

2172
01:46:40,238 --> 01:46:51,669
a UI transform plus onesie and well what

2173
01:46:50,889 --> 01:46:57,300
else you got for me

2174
01:46:51,670 --> 01:46:59,380
Pilar right we don't need that anymore

2175
01:46:57,300 --> 01:47:06,449
what else we got

2176
01:46:59,380 --> 01:47:09,960
no transform backing transform that here

2177
01:47:06,448 --> 01:47:09,960
and off we go

2178
01:47:12,739 --> 01:47:25,079
pretty simple pretty simple all right so

2179
01:47:23,880 --> 01:47:27,000
it looks like we're out of time

2180
01:47:25,079 --> 01:47:29,279
I'm just gonna go ahead and finish this

2181
01:47:27,000 --> 01:47:31,409
up and then we'll do Q&amp;A I would like to

2182
01:47:29,279 --> 01:47:35,239
run it once though and do any light

2183
01:47:31,409 --> 01:47:46,800
debugging while we're still here and

2184
01:47:35,239 --> 01:47:50,340
then I'll in for the day this is just

2185
01:47:46,800 --> 01:47:52,520
added to our position right yeah there

2186
01:47:50,340 --> 01:47:52,520
we go

2187
01:47:56,539 --> 01:48:03,829
okay sorry there's so many changes here

2188
01:48:14,380 --> 01:48:24,289
vacuum transform in this case so get

2189
01:48:16,789 --> 01:48:25,969
clipped rekt and I'm not sure what we

2190
01:48:24,289 --> 01:48:28,760
decided to do forget cliprect let me

2191
01:48:25,969 --> 01:48:30,710
just look at that one real quick so it's

2192
01:48:28,760 --> 01:48:34,039
just the Z value that comes in there so

2193
01:48:30,710 --> 01:48:38,469
that's just this and that still works

2194
01:48:34,039 --> 01:48:40,189
actually just fine so no no issues there

2195
01:48:38,469 --> 01:48:45,760
same here

2196
01:48:40,189 --> 01:48:57,710
that's all easy this get cliprect

2197
01:48:45,760 --> 01:48:59,090
similarly wants to be like this what

2198
01:48:57,710 --> 01:49:12,310
else we got

2199
01:48:59,090 --> 01:49:12,310
no transform that's good with the melts

2200
01:49:13,998 --> 01:49:20,920
all right so let's just see what we

2201
01:49:15,649 --> 01:49:26,210
broke looks like we've got a entity

2202
01:49:20,920 --> 01:49:29,449
placement break although only for those

2203
01:49:26,210 --> 01:49:35,328
bitmaps so it looks like that one bitmap

2204
01:49:29,448 --> 01:49:43,399
broke that one kind of drawing broke but

2205
01:49:35,328 --> 01:49:48,158
nothing else did looks like I'm gonna

2206
01:49:43,399 --> 01:49:48,158
get rid of this stuff anyway eventually

2207
01:49:48,670 --> 01:49:55,550
um so I think the only thing that I

2208
01:49:52,158 --> 01:49:59,988
broke was inside the entity stuff in

2209
01:49:55,550 --> 01:50:02,090
here so I guess for some reason when we

2210
01:49:59,988 --> 01:50:05,089
were doing our push bitmap here I didn't

2211
01:50:02,090 --> 01:50:07,400
add the offset and actually you know

2212
01:50:05,090 --> 01:50:16,670
what you can see that's 100% true

2213
01:50:07,399 --> 01:50:19,158
actually but that's fine because that's

2214
01:50:16,670 --> 01:50:20,960
the code that I'm gonna want to start

2215
01:50:19,158 --> 01:50:23,179
off on tomorrow anyway and because

2216
01:50:20,960 --> 01:50:25,489
that's part we're gonna be rewriting all

2217
01:50:23,179 --> 01:50:27,380
right so that was pretty easy change to

2218
01:50:25,488 --> 01:50:29,388
make actually I'm happy about that that

2219
01:50:27,380 --> 01:50:31,699
went really well so now we've got rid of

2220
01:50:29,389 --> 01:50:34,578
that and again we're simplifying this

2221
01:50:31,698 --> 01:50:37,808
code down which I want to do for sure

2222
01:50:34,578 --> 01:50:42,408
right like I want to keep making this

2223
01:50:37,809 --> 01:50:44,960
less and less complex use bitmap dim

2224
01:50:42,408 --> 01:50:47,058
we'll probably now bifurcate that out

2225
01:50:44,960 --> 01:50:48,649
and so they'll just be two calls one

2226
01:50:47,059 --> 01:50:51,019
that happens for the font stuff and one

2227
01:50:48,649 --> 01:50:52,399
that happens for the entity render stuff

2228
01:50:51,019 --> 01:50:55,760
and it'll get pushed into that actual

2229
01:50:52,399 --> 01:50:57,439
routine so as we progress down that road

2230
01:50:55,760 --> 01:50:59,090
I think we'll get even cleaner I'm gonna

2231
01:50:57,439 --> 01:51:01,328
go to quick Q&amp;A now and then we'll wrap

2232
01:50:59,090 --> 01:51:01,328
it up

2233
01:51:09,698 --> 01:51:15,539
questions questions questions

2234
01:51:12,229 --> 01:51:15,539
[Music]

2235
01:51:27,590 --> 01:51:34,340
Oh any news about me Oh hash yes

2236
01:51:31,789 --> 01:51:36,470
actually there is some news let me ask I

2237
01:51:34,340 --> 01:51:39,319
have been too busy to post a new version

2238
01:51:36,470 --> 01:51:44,329
but actually we have a stronger version

2239
01:51:39,319 --> 01:51:46,309
of male hash coming that runs about as

2240
01:51:44,329 --> 01:51:49,250
fast as the old one it's only slightly

2241
01:51:46,310 --> 01:51:54,440
since that little teat slower but it's

2242
01:51:49,250 --> 01:52:03,529
actually a much stronger hash but I

2243
01:51:54,439 --> 01:52:05,929
haven't had chance to post it yet ooh a

2244
01:52:03,529 --> 01:52:07,670
good pro tip from long boolean not

2245
01:52:05,930 --> 01:52:12,800
actually important but Krampus related

2246
01:52:07,670 --> 01:52:16,609
the Lau F in krampuslauf is pronounced

2247
01:52:12,800 --> 01:52:22,730
more like ooh in the words out o so more

2248
01:52:16,609 --> 01:52:25,789
like owl or couch in German the a in

2249
01:52:22,729 --> 01:52:30,019
Krampus is more of an off so Krampus so

2250
01:52:25,789 --> 01:52:35,779
it's more like Krampus Lau is that right

2251
01:52:30,020 --> 01:52:37,100
Krampus Lau long building can you tell

2252
01:52:35,779 --> 01:52:41,769
me how close I'm pronouncing it now

2253
01:52:37,100 --> 01:52:47,000
Krampus Lao is Krampus Lau better

2254
01:52:41,770 --> 01:52:47,690
Krampus Lau is the pee hard or soft is

2255
01:52:47,000 --> 01:52:53,829
it

2256
01:52:47,689 --> 01:52:57,549
Krampus Lao or krump a Slough like or

2257
01:52:53,829 --> 01:52:57,550
which is happening there

2258
01:53:03,050 --> 01:53:06,320
let me go ahead two three I forgot why

2259
01:53:05,119 --> 01:53:08,029
sorting was necessary couldn't we just

2260
01:53:06,319 --> 01:53:10,099
send it all to the GPU and have the

2261
01:53:08,029 --> 01:53:12,319
depth other sorted out uh yeah that's

2262
01:53:10,100 --> 01:53:14,630
that is what we do

2263
01:53:12,319 --> 01:53:18,109
but we used to sort because we used to

2264
01:53:14,630 --> 01:53:20,750
not have a depth buffer we decided after

2265
01:53:18,109 --> 01:53:22,369
testing that we really wanted it so

2266
01:53:20,750 --> 01:53:25,850
that's why we don't the sort anymore

2267
01:53:22,369 --> 01:53:28,970
if that makes sense when I said I wanted

2268
01:53:25,850 --> 01:53:31,280
these sorted in order of parenting that

2269
01:53:28,970 --> 01:53:33,590
is not Z order the reason that I want

2270
01:53:31,279 --> 01:53:35,389
that here is because we're gonna want to

2271
01:53:33,590 --> 01:53:37,880
go we're gonna want to do a single pass

2272
01:53:35,390 --> 01:53:39,800
through the list and children need to

2273
01:53:37,880 --> 01:53:41,029
look back at where their parents were in

2274
01:53:39,800 --> 01:53:42,500
order to place themselves in the right

2275
01:53:41,029 --> 01:53:45,319
position so I just want to make sure

2276
01:53:42,500 --> 01:53:46,640
parents always come before children so

2277
01:53:45,319 --> 01:53:54,019
that's a different kind of sort

2278
01:53:46,640 --> 01:53:55,670
it's not about Z order right can you put

2279
01:53:54,020 --> 01:53:59,990
the shadow offset in the shadow

2280
01:53:55,670 --> 01:54:03,880
transform now probably I don't really

2281
01:53:59,989 --> 01:54:03,880
remember where that's happening

2282
01:54:12,300 --> 01:54:24,690
I don't think we're doing that anymore

2283
01:54:22,399 --> 01:54:26,879
yeah I don't think we are I think it's

2284
01:54:24,689 --> 01:54:27,989
just it just is that transform that's

2285
01:54:26,880 --> 01:54:34,470
all the only thing we've got at the

2286
01:54:27,989 --> 01:54:35,670
moment when do you feel that should be

2287
01:54:34,470 --> 01:54:39,600
the game I'm looking forward to playing

2288
01:54:35,670 --> 01:54:41,159
it oh well we've got a while we we don't

2289
01:54:39,600 --> 01:54:44,460
do that many hours of programming each

2290
01:54:41,159 --> 01:54:45,869
week so it's gonna be a while we're

2291
01:54:44,460 --> 01:54:47,460
mostly done with the engine but we've

2292
01:54:45,869 --> 01:54:49,019
got a bunch of gameplay code to do so

2293
01:54:47,460 --> 01:54:53,430
you know you're looking at well I also I

2294
01:54:49,020 --> 01:54:57,570
said I would do 600 episodes so for 294

2295
01:54:53,430 --> 01:55:00,539
so we've got 106 episodes before we

2296
01:54:57,569 --> 01:55:05,579
would ship it just just on principle

2297
01:55:00,539 --> 01:55:06,930
alone my particular reason to use

2298
01:55:05,579 --> 01:55:11,659
Windows or Linux yeah you can look at

2299
01:55:06,930 --> 01:55:15,150
the episode archive if you go back to

2300
01:55:11,659 --> 01:55:17,699
handmade hero org watch the watch page

2301
01:55:15,149 --> 01:55:22,170
you can search previous episodes for

2302
01:55:17,699 --> 01:55:25,109
things like Linux and we talked about

2303
01:55:22,170 --> 01:55:27,590
Linux a bunch of times in various places

2304
01:55:25,109 --> 01:55:32,009
here this so if you want more

2305
01:55:27,590 --> 01:55:40,020
information you can or you know another

2306
01:55:32,010 --> 01:55:40,949
one would be why windows let's see I

2307
01:55:40,020 --> 01:55:43,620
don't know if there's a way to search

2308
01:55:40,949 --> 01:55:46,289
for why not Linux so you might search in

2309
01:55:43,619 --> 01:55:47,699
there a little bit to see the more clear

2310
01:55:46,289 --> 01:55:50,569
answers but the basic reason is just

2311
01:55:47,699 --> 01:55:53,639
because games ship primarily on Windows

2312
01:55:50,569 --> 01:55:55,559
that's why so handmade hero is made to

2313
01:55:53,640 --> 01:55:57,060
be portable and in fact already runs on

2314
01:55:55,560 --> 01:55:59,220
Linux and Mac in a number of places

2315
01:55:57,060 --> 01:56:01,170
because community members supported it

2316
01:55:59,220 --> 01:56:02,280
we have not done the porting on the

2317
01:56:01,170 --> 01:56:05,940
stream yet because that's the thing I

2318
01:56:02,279 --> 01:56:07,679
said I would do later on so portability

2319
01:56:05,939 --> 01:56:09,149
is very important because you know you

2320
01:56:07,680 --> 01:56:12,270
want to have multiple platforms a lot

2321
01:56:09,149 --> 01:56:15,659
times you watched upon ps4 Xbox one and

2322
01:56:12,270 --> 01:56:18,240
Windows as a minimum you know of what

2323
01:56:15,659 --> 01:56:20,099
you'd like to target usually and then

2324
01:56:18,239 --> 01:56:23,699
depending on your game you know Nintendo

2325
01:56:20,100 --> 01:56:25,530
switch Mac Oz Linux potentially as more

2326
01:56:23,699 --> 01:56:26,670
like just finishing to

2327
01:56:25,529 --> 01:56:30,029
get all the platforms if you've gone

2328
01:56:26,670 --> 01:56:31,770
that far the reason we do Windows is

2329
01:56:30,029 --> 01:56:33,269
because it's the easiest development

2330
01:56:31,770 --> 01:56:36,869
environment that everyone can have

2331
01:56:33,270 --> 01:56:39,719
access to right like if I pick ps4 for

2332
01:56:36,868 --> 01:56:41,089
example you'd have to be dev you'd have

2333
01:56:39,719 --> 01:56:43,020
to be members of the development

2334
01:56:41,090 --> 01:56:45,328
community they're like you have to have

2335
01:56:43,020 --> 01:56:47,610
Sony approve you to get any left I'm a

2336
01:56:45,328 --> 01:56:50,519
dev kit right so I can't really do that

2337
01:56:47,609 --> 01:56:51,808
so I have to pick something you know

2338
01:56:50,520 --> 01:56:52,860
that's commodity available you can just

2339
01:56:51,809 --> 01:56:54,809
go out and buy it you don't need to get

2340
01:56:52,859 --> 01:56:57,569
approval you don't you know and it runs

2341
01:56:54,809 --> 01:57:00,929
on a regular computer so Windows and of

2342
01:56:57,569 --> 01:57:03,689
Windows Mac Linux by far like almost all

2343
01:57:00,929 --> 01:57:05,849
games on the PC are sold the Windows

2344
01:57:03,689 --> 01:57:08,609
version so I just went numbers wise

2345
01:57:05,849 --> 01:57:10,078
right and so you really have to have

2346
01:57:08,609 --> 01:57:11,908
windows be your foremost platform

2347
01:57:10,078 --> 01:57:13,319
something that may change but right now

2348
01:57:11,908 --> 01:57:18,868
Linux and Mac just don't account for

2349
01:57:13,319 --> 01:57:20,488
very many of your sales so Windows is

2350
01:57:18,868 --> 01:57:21,719
where you need to make sure you're good

2351
01:57:20,488 --> 01:57:23,069
because that's where most of your sales

2352
01:57:21,719 --> 01:57:25,050
would come from it's your most important

2353
01:57:23,069 --> 01:57:28,189
platform and then Linux and Mac are like

2354
01:57:25,050 --> 01:57:28,190
what you port to right

2355
01:57:42,859 --> 01:57:46,009
how much time do you think games I

2356
01:57:44,329 --> 01:57:47,269
should spend refactoring code compared

2357
01:57:46,010 --> 01:57:48,590
to running new features I often find

2358
01:57:47,270 --> 01:57:50,480
discouraging when I spend too much find

2359
01:57:48,590 --> 01:57:52,969
refactor the code without I think adding

2360
01:57:50,479 --> 01:57:55,569
anything new for a while um you should

2361
01:57:52,969 --> 01:57:58,939
never refactor anything that you're not

2362
01:57:55,569 --> 01:58:02,509
refactoring to do something new I guess

2363
01:57:58,939 --> 01:58:05,118
is the way I would say it so the answer

2364
01:58:02,510 --> 01:58:07,760
is you should never be spending time

2365
01:58:05,118 --> 01:58:10,039
refactoring code if you're not doing it

2366
01:58:07,760 --> 01:58:12,590
to add a new feature or to improve its

2367
01:58:10,039 --> 01:58:15,769
performance like refactoring should only

2368
01:58:12,590 --> 01:58:18,770
be done to as something you do during

2369
01:58:15,770 --> 01:58:21,739
improvement and it should be relatively

2370
01:58:18,770 --> 01:58:26,420
obvious at the time to an experienced

2371
01:58:21,738 --> 01:58:27,500
developer what sorts of refactoring I'm

2372
01:58:26,420 --> 01:58:30,260
not really a fan of that term

2373
01:58:27,500 --> 01:58:33,469
what sorts of restructuring might have

2374
01:58:30,260 --> 01:58:36,170
to occur in order to move the code

2375
01:58:33,469 --> 01:58:37,010
forwards and that's something that you

2376
01:58:36,170 --> 01:58:38,989
can only really learn by experience

2377
01:58:37,010 --> 01:58:41,329
because sometimes it's more efficient to

2378
01:58:38,988 --> 01:58:42,589
simply modify the little piece of code

2379
01:58:41,329 --> 01:58:45,050
you need to add the feature you're

2380
01:58:42,590 --> 01:58:47,900
looking for other times it's clear that

2381
01:58:45,050 --> 01:58:52,820
in order to do that you want to fix

2382
01:58:47,899 --> 01:58:57,439
something right and so that's I guess

2383
01:58:52,819 --> 01:59:00,488
what I'd say is the only piece of strong

2384
01:58:57,439 --> 01:59:03,859
advice I have there is never spend time

2385
01:59:00,488 --> 01:59:06,649
restructuring code without an idea of

2386
01:59:03,859 --> 01:59:09,319
why you are doing it so a lot of people

2387
01:59:06,649 --> 01:59:11,988
preach too much puritanical sort of

2388
01:59:09,319 --> 01:59:14,509
things about code code that works

2389
01:59:11,988 --> 01:59:16,459
properly is good and code that doesn't

2390
01:59:14,510 --> 01:59:18,800
work properly is bad and that's pretty

2391
01:59:16,460 --> 01:59:20,689
much the end of it so when you look at a

2392
01:59:18,800 --> 01:59:22,489
piece of code and you're going should I

2393
01:59:20,689 --> 01:59:24,799
be restructuring this code someway

2394
01:59:22,488 --> 01:59:26,329
never just restructure it to restructure

2395
01:59:24,800 --> 01:59:30,050
it you should have an idea in your head

2396
01:59:26,329 --> 01:59:32,269
of why what am I getting am i getting

2397
01:59:30,050 --> 01:59:35,090
increased speed am i getting less bugs

2398
01:59:32,270 --> 01:59:37,219
am i getting new features and if you

2399
01:59:35,090 --> 01:59:38,600
don't have one of those strongly in mind

2400
01:59:37,219 --> 01:59:43,340
then you're just kind of wasting your

2401
01:59:38,600 --> 01:59:46,369
time lungful you're dropping the app oh

2402
01:59:43,340 --> 01:59:50,659
okay so when you said that you

2403
01:59:46,368 --> 01:59:52,158
pronounced the Krampus Lau the AO you

2404
01:59:50,658 --> 01:59:54,888
still you didn't mean get rid of the f

2405
01:59:52,158 --> 01:59:56,689
you just mean don't say laughs say

2406
01:59:54,889 --> 02:00:01,630
laughs is that what

2407
01:59:56,689 --> 02:00:01,629
so it's Krampus Laos crawfish love

2408
02:00:06,159 --> 02:00:10,609
off-topic do you have any tips on

2409
02:00:08,029 --> 02:00:12,649
parsing academic math papers no they're

2410
02:00:10,609 --> 02:00:14,689
written by people who seem to be unable

2411
02:00:12,649 --> 02:00:16,969
to communicate with humans I don't know

2412
02:00:14,689 --> 02:00:21,259
why you just have to grind through them

2413
02:00:16,969 --> 02:00:23,210
it's terrible I know I don't know why

2414
02:00:21,260 --> 02:00:25,699
that happens I don't know why every

2415
02:00:23,210 --> 02:00:27,170
single math paper I've ever seen after I

2416
02:00:25,698 --> 02:00:29,419
spent the time to actually understand it

2417
02:00:27,170 --> 02:00:31,159
I could have explained it crystal clear

2418
02:00:29,420 --> 02:00:33,260
without all of the ridiculousness

2419
02:00:31,159 --> 02:00:37,899
for some reason they just don't do that

2420
02:00:33,260 --> 02:00:42,130
I don't know why I have no idea why I

2421
02:00:37,899 --> 02:00:45,799
really don't just bad convention I guess

2422
02:00:42,130 --> 02:00:48,949
okay so Krampus Lau is bad

2423
02:00:45,800 --> 02:00:52,789
Krampus Laos is good so Krampus loved

2424
02:00:48,948 --> 02:00:55,488
Krampus laughs no no no it's conscious

2425
02:00:52,789 --> 02:00:56,810
laughs we are going to see if the

2426
02:00:55,488 --> 02:00:58,669
changes to the scale alignment point

2427
02:00:56,810 --> 02:01:01,850
back to the file they are coming from

2428
02:00:58,670 --> 02:01:06,020
yes we're going to be doing a couple

2429
02:01:01,850 --> 02:01:21,620
things there yeah in the tech stop it

2430
02:01:06,020 --> 02:01:23,300
still offsets the text sorry what is

2431
02:01:21,619 --> 02:01:27,069
that but that's good right

2432
02:01:23,300 --> 02:01:27,070
I mean what why is that bad

2433
02:01:33,569 --> 02:01:39,170
I mean look looks looks right to me

2434
02:01:36,328 --> 02:01:39,170
could you be more specific

2435
02:01:54,029 --> 02:01:58,029
off-target I've heard you mention other

2436
02:01:56,319 --> 02:02:01,689
memory management techniques than the

2437
02:01:58,029 --> 02:02:02,619
arena's as used on handmade Hiro sure

2438
02:02:01,689 --> 02:02:04,839
there's lots of memory management

2439
02:02:02,619 --> 02:02:08,229
techniques but arenas are a very

2440
02:02:04,840 --> 02:02:09,610
powerful one and pretty important the

2441
02:02:08,229 --> 02:02:10,809
ones we use on handmade here are really

2442
02:02:09,609 --> 02:02:13,269
the bread-and-butter once I think you

2443
02:02:10,810 --> 02:02:17,310
should use most of the time so there's

2444
02:02:13,270 --> 02:02:20,680
hand the the arena's and then there's

2445
02:02:17,310 --> 02:02:23,410
free lists which we use those are two of

2446
02:02:20,680 --> 02:02:25,000
the most powerful simplest and gets you

2447
02:02:23,409 --> 02:02:26,289
almost everything you want memory

2448
02:02:25,000 --> 02:02:30,850
management techniques but there are

2449
02:02:26,289 --> 02:02:32,289
obviously more so you try to use

2450
02:02:30,850 --> 02:02:33,370
multi-threading which is possible or the

2451
02:02:32,289 --> 02:02:39,430
other way around or does it just depend

2452
02:02:33,369 --> 02:02:40,689
a lot so here's what I'll say I've done

2453
02:02:39,430 --> 02:02:42,280
a lot more multi-threaded programming

2454
02:02:40,689 --> 02:02:44,049
recently even than I had done when I

2455
02:02:42,279 --> 02:02:49,420
originally started handmade Hiro you

2456
02:02:44,050 --> 02:02:53,470
know multi-threaded programming is very

2457
02:02:49,420 --> 02:02:55,000
very difficult it's far far more

2458
02:02:53,470 --> 02:02:58,030
difficult than single threaded

2459
02:02:55,000 --> 02:03:01,779
programming so much more difficult that

2460
02:02:58,029 --> 02:03:03,609
I think you really want a lot of

2461
02:03:01,779 --> 02:03:07,359
language features to help you do it

2462
02:03:03,609 --> 02:03:10,859
properly which don't exist in C++ and

2463
02:03:07,359 --> 02:03:10,859
that's an issue

2464
02:03:14,880 --> 02:03:19,619
anytime you can get away with not

2465
02:03:17,500 --> 02:03:22,390
writing a multi-threaded code you should

2466
02:03:19,619 --> 02:03:27,460
because your code will have less bugs in

2467
02:03:22,390 --> 02:03:30,610
it however it is increasingly becoming

2468
02:03:27,460 --> 02:03:32,140
the case that almost all code needs to

2469
02:03:30,609 --> 02:03:33,369
be multi-threaded in order to run on

2470
02:03:32,140 --> 02:03:35,200
modern systems fast enough because

2471
02:03:33,369 --> 02:03:36,519
modern systems just aren't getting much

2472
02:03:35,199 --> 02:03:40,659
faster single-threaded they're only

2473
02:03:36,520 --> 02:03:42,460
getting faster multi-threaded so I guess

2474
02:03:40,659 --> 02:03:44,500
what I would say is there's no good news

2475
02:03:42,460 --> 02:03:46,390
yes try to write as little

2476
02:03:44,500 --> 02:03:48,550
multi-threaded code as possible no you

2477
02:03:46,390 --> 02:03:49,510
really can't limit how much longer to

2478
02:03:48,550 --> 02:03:53,860
code you're running unless your games

2479
02:03:49,510 --> 02:03:55,329
are very simple and yeah C++ is a

2480
02:03:53,859 --> 02:03:57,009
terrible language for multi-threaded

2481
02:03:55,329 --> 02:04:01,000
programming it has literally zero of the

2482
02:03:57,010 --> 02:04:06,070
features that you would want and so it's

2483
02:04:01,000 --> 02:04:07,479
just bad and the more I learn about

2484
02:04:06,069 --> 02:04:09,340
multi-threaded programming the more I've

2485
02:04:07,479 --> 02:04:10,599
developed my own multiple printing

2486
02:04:09,340 --> 02:04:13,869
techniques the more I realize just how

2487
02:04:10,600 --> 02:04:17,829
hard it is so hard in fact that I

2488
02:04:13,869 --> 02:04:19,960
actually think that it breaks a lot of

2489
02:04:17,829 --> 02:04:22,600
things to that other people are relying

2490
02:04:19,960 --> 02:04:23,949
on like garbage collection just doesn't

2491
02:04:22,600 --> 02:04:29,340
work for multi-threaded programming

2492
02:04:23,949 --> 02:04:33,699
either it's just completely wrong

2493
02:04:29,340 --> 02:04:37,869
because it's based on the idea of global

2494
02:04:33,699 --> 02:04:40,449
visibility and that is so not OK right

2495
02:04:37,869 --> 02:04:42,340
so you then have to develop really

2496
02:04:40,449 --> 02:04:43,809
complex techniques for garbage

2497
02:04:42,340 --> 02:04:45,520
collection to work properly like you

2498
02:04:43,810 --> 02:04:46,990
have to defer all of this things to luck

2499
02:04:45,520 --> 02:04:51,430
known sequence points or things like

2500
02:04:46,989 --> 02:04:53,889
this it's bad right and so I feel like

2501
02:04:51,430 --> 02:04:55,420
we're still also in our infancy in terms

2502
02:04:53,890 --> 02:04:56,710
of really understanding the proper

2503
02:04:55,420 --> 02:05:01,029
memory models for multi-threaded

2504
02:04:56,710 --> 02:05:07,590
programming and I'm not an expert on

2505
02:05:01,029 --> 02:05:07,590
that either so ask me again in 10 years

2506
02:05:11,130 --> 02:05:16,920
can you show John below how to compile

2507
02:05:13,260 --> 02:05:18,600
from Emacs to the keyboard shortcut he

2508
02:05:16,920 --> 02:05:22,500
maybe he doesn't want to I'm sure he

2509
02:05:18,600 --> 02:05:24,390
knows he can can you go into a bit of

2510
02:05:22,500 --> 02:05:26,399
detail about what these memory allocated

2511
02:05:24,390 --> 02:05:29,550
alligators and management techniques are

2512
02:05:26,399 --> 02:05:37,679
it's not right now I mean we've talked a

2513
02:05:29,550 --> 02:05:39,119
bit about the LAN stream but I have

2514
02:05:37,680 --> 02:05:42,450
Pasadena you would never refactor code

2515
02:05:39,119 --> 02:05:43,619
just for code readability no definitely

2516
02:05:42,449 --> 02:05:46,649
not

2517
02:05:43,619 --> 02:05:49,739
I mean I try to keep my code readable at

2518
02:05:46,649 --> 02:05:52,979
all times to the extent that you can

2519
02:05:49,739 --> 02:05:55,500
but but no readability is not a valid

2520
02:05:52,979 --> 02:05:58,139
reason to refactor code in my opinion

2521
02:05:55,500 --> 02:06:01,949
because either if it was written

2522
02:05:58,140 --> 02:06:04,350
incorrectly and is should be written in

2523
02:06:01,949 --> 02:06:06,149
a different way in the first place for

2524
02:06:04,350 --> 02:06:08,190
readability then you probably should

2525
02:06:06,149 --> 02:06:09,869
have been able to have some other

2526
02:06:08,189 --> 02:06:12,059
argument for why you were gonna rewrite

2527
02:06:09,869 --> 02:06:13,500
it not just the reusability I'm not just

2528
02:06:12,060 --> 02:06:16,920
the readability there should have been

2529
02:06:13,500 --> 02:06:19,619
like it's too hard to call or there's I

2530
02:06:16,920 --> 02:06:22,199
want different ways of calling it that I

2531
02:06:19,619 --> 02:06:24,390
can use outside of it differently or

2532
02:06:22,199 --> 02:06:25,859
it's slow because it's written in a

2533
02:06:24,390 --> 02:06:29,369
contour did way that could have been

2534
02:06:25,859 --> 02:06:33,869
improved by reorganizing or something

2535
02:06:29,369 --> 02:06:35,640
but just like an abstract subjective

2536
02:06:33,869 --> 02:06:39,800
opinion about how readable the code is

2537
02:06:35,640 --> 02:06:39,800
not a good reason in my opinion

2538
02:06:45,958 --> 02:07:01,349
no we are not planning on having script

2539
02:06:50,099 --> 02:07:03,149
support okay puss in Krampus is like

2540
02:07:01,349 --> 02:07:12,779
puss in pussycat

2541
02:07:03,149 --> 02:07:16,559
so Krampus Krampus laughs Krampus mouth

2542
02:07:12,779 --> 02:07:18,448
Krampus laughs Krampus love Krampus

2543
02:07:16,559 --> 02:07:23,128
laughs Krampus louse

2544
02:07:18,448 --> 02:07:24,208
I just discovered dual quaternions are

2545
02:07:23,128 --> 02:07:30,300
they used in game programming

2546
02:07:24,208 --> 02:07:34,260
I imagine someone probably used dual

2547
02:07:30,300 --> 02:07:35,969
quaternions I can't sorry I can't name

2548
02:07:34,260 --> 02:07:43,679
anyone offhand who does but probably

2549
02:07:35,969 --> 02:07:52,288
someone does Oh could this be in shadow

2550
02:07:43,679 --> 02:07:55,498
transfer so this right here no no I

2551
02:07:52,288 --> 02:07:59,338
didn't do that I could I think you might

2552
02:07:55,498 --> 02:08:01,188
be right but I don't know that's a good

2553
02:07:59,338 --> 02:08:05,088
question

2554
02:08:01,189 --> 02:08:05,088
I'll put it to doing for you

2555
02:08:20,460 --> 02:08:26,939
what are you thoughts an is PC for

2556
02:08:23,130 --> 02:08:29,489
multi-threading sim D is that that

2557
02:08:26,939 --> 02:08:40,109
Intel's paralyzing compiler that they've

2558
02:08:29,488 --> 02:08:44,959
got there are you talking about this

2559
02:08:40,109 --> 02:08:44,960
thing well let me see

2560
02:08:50,479 --> 02:08:58,159
yeah um my thoughts are it's good I

2561
02:08:56,139 --> 02:09:03,050
don't have a lot of thoughts other than

2562
02:08:58,158 --> 02:09:06,759
that one sad sad thing I learned

2563
02:09:03,050 --> 02:09:08,989
recently doing meow hash was that

2564
02:09:06,760 --> 02:09:10,219
dropping down to Assam actually gets you

2565
02:09:08,988 --> 02:09:14,299
a massive performance winning me a lot

2566
02:09:10,219 --> 02:09:15,408
of cases still uh so I don't know I

2567
02:09:14,300 --> 02:09:18,050
don't know what to say

2568
02:09:15,408 --> 02:09:25,788
compilers are still bad they just they

2569
02:09:18,050 --> 02:09:26,989
haven't gotten very good I'm gonna I'm

2570
02:09:25,788 --> 02:09:28,578
gonna go ahead and shut down stream or

2571
02:09:26,988 --> 02:09:31,448
get a little over getting a little over

2572
02:09:28,578 --> 02:09:36,170
time here getting a little over time

2573
02:09:31,448 --> 02:09:37,339
alright let's wrap it up hmm thank you

2574
02:09:36,170 --> 02:09:38,389
everybody join me for an episode of

2575
02:09:37,340 --> 02:09:40,130
handmade hero it's been a pleasure

2576
02:09:38,389 --> 02:09:41,900
coding with you as always if you want to

2577
02:09:40,130 --> 02:09:43,010
follow along series at home you can

2578
02:09:41,899 --> 02:09:44,658
always pre-order the game on handmade

2579
02:09:43,010 --> 02:09:47,389
hero org it comes with the source code

2580
02:09:44,658 --> 02:09:48,458
so you can follow along every night with

2581
02:09:47,389 --> 02:09:52,269
what we're doing

2582
02:09:48,458 --> 02:09:54,498
I'll be back here tomorrow when we will

2583
02:09:52,269 --> 02:09:56,989
start to try and make a little skeletal

2584
02:09:54,498 --> 02:09:58,309
transform code in that entity stuff so

2585
02:09:56,988 --> 02:10:00,738
that we can start to use those snap

2586
02:09:58,309 --> 02:10:04,159
points and have those work reliably for

2587
02:10:00,738 --> 02:10:05,359
us that's our big next to do that's will

2588
02:10:04,158 --> 02:10:07,518
be doing tomorrow PC backup for that

2589
02:10:05,359 --> 02:10:09,139
until then have fun putting everyone and

2590
02:10:07,519 --> 02:10:11,619
I'll see you on the Internet take it

2591
02:10:09,139 --> 02:10:11,618
easy everybody

