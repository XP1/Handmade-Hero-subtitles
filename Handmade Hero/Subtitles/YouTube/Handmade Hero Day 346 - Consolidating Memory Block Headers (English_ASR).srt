1
00:00:00,530 --> 00:00:09,029
alrighty hello everyone and welcome to

2
00:00:07,349 --> 00:00:13,379
handmade hero the show recode a complete

3
00:00:09,029 --> 00:00:15,178
game live on stream we have some work to

4
00:00:13,380 --> 00:00:16,740
do today because we wanted to finish our

5
00:00:15,179 --> 00:00:19,528
bounds checker we basically implemented

6
00:00:16,739 --> 00:00:21,570
our own memory bounds checker that

7
00:00:19,528 --> 00:00:23,509
allows us to know if we ever overwrite

8
00:00:21,570 --> 00:00:26,490
blocks of memory that we've allocated

9
00:00:23,510 --> 00:00:28,800
but we haven't quite finished it we we

10
00:00:26,489 --> 00:00:30,750
sort of got the basic version working

11
00:00:28,800 --> 00:00:32,130
yesterday but in order to finish it up

12
00:00:30,750 --> 00:00:34,409
we kind of have a couple more things we

13
00:00:32,130 --> 00:00:36,719
need to do and so that's what I'd like

14
00:00:34,409 --> 00:00:38,069
to do today and basically there's two

15
00:00:36,719 --> 00:00:39,270
things we need to do one is we need to

16
00:00:38,070 --> 00:00:40,679
manage our headers a little bit better

17
00:00:39,270 --> 00:00:43,250
and the other that we need to do is

18
00:00:40,679 --> 00:00:46,590
implement something that that shifts

19
00:00:43,250 --> 00:00:49,109
memory up towards the end of blocks so

20
00:00:46,590 --> 00:00:51,480
that we can do overflow testing as well

21
00:00:49,109 --> 00:00:53,609
as under flow testing right now we're

22
00:00:51,479 --> 00:00:54,839
only doing under flow testing so let's

23
00:00:53,609 --> 00:00:56,280
go ahead and get started since there's

24
00:00:54,840 --> 00:00:59,340
really not much to explain its all the

25
00:00:56,280 --> 00:01:01,710
same concepts it's yesterday but we're

26
00:00:59,340 --> 00:01:04,170
just finishing up so today days is day 3

27
00:01:01,710 --> 00:01:05,219
46 you'll want to do day 3 45 source

28
00:01:04,170 --> 00:01:09,990
code if you're going to be following

29
00:01:05,219 --> 00:01:20,280
along with me so let's go ahead and

30
00:01:09,989 --> 00:01:23,819
build and run the program there we go so

31
00:01:20,280 --> 00:01:25,200
all we're doing right now is we're doing

32
00:01:23,819 --> 00:01:29,000
the like I said we're doing the

33
00:01:25,200 --> 00:01:29,000
underflow testing let's go over here

34
00:01:33,599 --> 00:01:40,719
platform allocate or try to add platform

35
00:01:37,509 --> 00:01:44,709
allocate so all we're doing right now is

36
00:01:40,719 --> 00:01:46,450
we're doing underflow checking and we

37
00:01:44,709 --> 00:01:47,890
did something interesting here in fact I

38
00:01:46,450 --> 00:01:50,680
never really did this before i'm not

39
00:01:47,890 --> 00:01:55,329
sure why i never did this before and I'm

40
00:01:50,680 --> 00:01:57,399
thinking that I probably will I might

41
00:01:55,329 --> 00:02:00,640
change the way I do things now that I've

42
00:01:57,399 --> 00:02:02,500
done it this way here on handmade here

43
00:02:00,640 --> 00:02:04,090
I'd never really yeah I just never

44
00:02:02,500 --> 00:02:06,039
really thought about it too much and

45
00:02:04,090 --> 00:02:09,069
probably I should have let me open up

46
00:02:06,039 --> 00:02:10,599
Milton and just briefly say what I did

47
00:02:09,068 --> 00:02:14,129
yesterday in case for those of you who

48
00:02:10,599 --> 00:02:21,849
missed it it was just kind of weird um

49
00:02:14,129 --> 00:02:23,318
let's see today 346 teh 346 my tablet

50
00:02:21,849 --> 00:02:26,259
seems to have no longer is no longer

51
00:02:23,318 --> 00:02:27,939
treated as a tablet perhaps by Milton or

52
00:02:26,259 --> 00:02:29,798
anybody else by the way I'm not sure why

53
00:02:27,939 --> 00:02:33,068
that started happening it happened after

54
00:02:29,799 --> 00:02:35,290
I did that thing with the I accidentally

55
00:02:33,068 --> 00:02:37,238
let the program run and use up all

56
00:02:35,289 --> 00:02:39,729
available memory I don't know if you

57
00:02:37,239 --> 00:02:42,489
guys remember that so I'm not sure if I

58
00:02:39,729 --> 00:02:44,259
should try to get the wacom drivers to

59
00:02:42,489 --> 00:02:47,049
go back into some state that makes some

60
00:02:44,259 --> 00:02:48,159
sense probably I should do that after

61
00:02:47,049 --> 00:02:49,590
the stream but we'll try it really

62
00:02:48,159 --> 00:02:55,209
quickly now just to see whether that

63
00:02:49,590 --> 00:02:59,799
helps it doesn't help a wacom driver how

64
00:02:55,209 --> 00:03:05,199
are you doing the tablet driver was not

65
00:02:59,799 --> 00:03:08,590
found so you know not great no tablet

66
00:03:05,199 --> 00:03:10,298
driver and so Milton is uh yeah Milton

67
00:03:08,590 --> 00:03:11,650
can't really access the tablet if

68
00:03:10,299 --> 00:03:12,879
there's no tablet driver to say the

69
00:03:11,650 --> 00:03:15,370
least so i guess i'll have to reboot the

70
00:03:12,879 --> 00:03:20,199
machine at some point anyway ladies and

71
00:03:15,370 --> 00:03:26,289
gentlemen the robustness of windows day

72
00:03:20,199 --> 00:03:28,988
346 let's just go ahead and mention here

73
00:03:26,289 --> 00:03:31,929
what was happening so what i did was i

74
00:03:28,989 --> 00:03:35,170
needed to make a page of memory for the

75
00:03:31,930 --> 00:03:37,060
allocation and we don't really know how

76
00:03:35,169 --> 00:03:39,789
many pages that is that could be any

77
00:03:37,060 --> 00:03:42,609
number of pages right so this is like n

78
00:03:39,789 --> 00:03:45,549
pages here because if the allocation is

79
00:03:42,609 --> 00:03:49,810
you know 36 k then we need at

80
00:03:45,550 --> 00:03:51,370
least to fit the the 36 k we would need

81
00:03:49,810 --> 00:03:53,229
well I probably should have picked

82
00:03:51,370 --> 00:03:58,110
something a little bit less convenient

83
00:03:53,229 --> 00:04:02,649
as L oh no that's fine I take it back

84
00:03:58,110 --> 00:04:06,070
let's do 34 k so we know that we need

85
00:04:02,650 --> 00:04:07,960
things in 4k page clumps because the

86
00:04:06,069 --> 00:04:11,500
operating system only manages pages in

87
00:04:07,960 --> 00:04:14,950
4k about clumps so if I was to divide 34

88
00:04:11,500 --> 00:04:17,379
k by four I would get eight and then I

89
00:04:14,949 --> 00:04:19,089
would have a remainder of 2 K right so I

90
00:04:17,379 --> 00:04:21,449
know I have eight full pages but then

91
00:04:19,089 --> 00:04:25,869
I'm going to essentially need nine pages

92
00:04:21,449 --> 00:04:29,349
I don't know why I put that there so I

93
00:04:25,870 --> 00:04:31,480
need 84 k pages to fit the 32 k and then

94
00:04:29,350 --> 00:04:33,010
i would need at F to K leftover and so

95
00:04:31,480 --> 00:04:35,200
what I need is I need nine pages total

96
00:04:33,009 --> 00:04:37,959
one of them will only have 2k in it it

97
00:04:35,199 --> 00:04:39,879
won't have the full 4k right so I need

98
00:04:37,959 --> 00:04:42,099
essentially nine pages for let's say

99
00:04:39,879 --> 00:04:44,980
that allocation so in this case n would

100
00:04:42,100 --> 00:04:47,200
equal 9 and then what I need to do is I

101
00:04:44,980 --> 00:04:48,790
needed to basically put guards on either

102
00:04:47,199 --> 00:04:49,810
side of it and I should stop saying

103
00:04:48,790 --> 00:04:54,490
guard page because not really what i

104
00:04:49,810 --> 00:04:57,579
mean but dead pages fault pages I need

105
00:04:54,490 --> 00:05:00,850
to put one page so this is a 4k page

106
00:04:57,579 --> 00:05:03,609
this is a 4k page right that are marked

107
00:05:00,850 --> 00:05:06,040
as like do not write to these so that we

108
00:05:03,610 --> 00:05:08,350
can get checking on either side we can

109
00:05:06,040 --> 00:05:10,629
only get perfect checking on one side or

110
00:05:08,350 --> 00:05:12,910
the other because again if the

111
00:05:10,629 --> 00:05:15,310
allocation turns out to be not rounded

112
00:05:12,910 --> 00:05:17,110
to a 4k boundary then we're going to

113
00:05:15,310 --> 00:05:18,339
have some blank space somewhere and we

114
00:05:17,110 --> 00:05:19,990
can either put the blank space at the

115
00:05:18,339 --> 00:05:22,089
beginning and have it end right at the

116
00:05:19,990 --> 00:05:23,500
upper end or we can put the blank space

117
00:05:22,089 --> 00:05:24,989
at the end and have it end right at the

118
00:05:23,500 --> 00:05:26,949
the lower end but we can only

119
00:05:24,990 --> 00:05:29,769
fundamentally check for underfloor and

120
00:05:26,949 --> 00:05:32,110
overflow perfectly in one direction at a

121
00:05:29,769 --> 00:05:34,269
time right we can only do one of those

122
00:05:32,110 --> 00:05:36,550
at a time but those so if we're doing

123
00:05:34,269 --> 00:05:38,529
this it also points out the fact that

124
00:05:36,550 --> 00:05:40,930
it's unclear where we put the memory

125
00:05:38,529 --> 00:05:44,559
header we can stuff the memory header

126
00:05:40,930 --> 00:05:47,168
into this unused location if it happens

127
00:05:44,560 --> 00:05:49,839
to be big enough but what I did which is

128
00:05:47,168 --> 00:05:51,639
kind of fun is I made one other 4k page

129
00:05:49,839 --> 00:05:55,689
that's just for the memory header over

130
00:05:51,639 --> 00:05:57,728
here right so there's a page beyond the

131
00:05:55,689 --> 00:05:59,199
page that's there for overflow detection

132
00:05:57,728 --> 00:06:01,120
that's just

133
00:05:59,199 --> 00:06:02,800
for that purpose and that seemed kind of

134
00:06:01,120 --> 00:06:04,509
interesting and I liked that that was

135
00:06:02,800 --> 00:06:06,819
that was kind of a cool I don't know I

136
00:06:04,509 --> 00:06:08,500
thought that was kind of interesting so

137
00:06:06,819 --> 00:06:10,000
what I might do is just double down on

138
00:06:08,500 --> 00:06:12,189
that I think that's kind of neat so I

139
00:06:10,000 --> 00:06:14,319
think I might just go with that and and

140
00:06:12,189 --> 00:06:16,839
make it so that that's actually how this

141
00:06:14,319 --> 00:06:19,839
works in general and what I mean by that

142
00:06:16,839 --> 00:06:22,810
is currently what we're doing if we kind

143
00:06:19,839 --> 00:06:24,609
of go into our our memory system here

144
00:06:22,810 --> 00:06:27,160
currently what we're doing is when we

145
00:06:24,610 --> 00:06:30,160
allocate memory we put that we put the

146
00:06:27,160 --> 00:06:33,910
size of that block we put that into this

147
00:06:30,160 --> 00:06:35,380
to the chain right I'm sorry we put that

148
00:06:33,910 --> 00:06:37,180
into the allocation the size of the

149
00:06:35,379 --> 00:06:38,829
memory block chain we're doing that

150
00:06:37,180 --> 00:06:40,720
outside in the platform independent

151
00:06:38,829 --> 00:06:43,389
layer right when we're saying hey let's

152
00:06:40,720 --> 00:06:46,360
go ahead and and have the memory

153
00:06:43,389 --> 00:06:48,250
allocator here that's actually doing

154
00:06:46,360 --> 00:06:50,319
reallocations every time it needs to get

155
00:06:48,250 --> 00:06:53,050
a new block from the system it's adding

156
00:06:50,319 --> 00:06:55,300
space for like a little chain thing of

157
00:06:53,050 --> 00:06:58,000
its own but what I'm thinking is I

158
00:06:55,300 --> 00:07:00,550
wonder if it wouldn't make more sense to

159
00:06:58,000 --> 00:07:03,759
actually have it so that the operating

160
00:07:00,550 --> 00:07:05,620
system allows us to get or we like share

161
00:07:03,759 --> 00:07:07,269
that thing with the operating system if

162
00:07:05,620 --> 00:07:09,579
that makes sense and there's two ways we

163
00:07:07,269 --> 00:07:10,959
can do it one way is we can have the

164
00:07:09,579 --> 00:07:13,419
operating system put it in a special

165
00:07:10,959 --> 00:07:15,549
location like it was doing before the

166
00:07:13,420 --> 00:07:19,060
other way we can do it is having it be

167
00:07:15,550 --> 00:07:21,490
part of the block that this that this

168
00:07:19,060 --> 00:07:23,439
thing manages and I don't know which one

169
00:07:21,490 --> 00:07:25,870
of those is is the best way to do it

170
00:07:23,439 --> 00:07:29,980
what I do know is that we could

171
00:07:25,870 --> 00:07:32,410
essentially change the API to the system

172
00:07:29,980 --> 00:07:34,900
and I kind of like the idea of doing

173
00:07:32,410 --> 00:07:41,590
that I kind of like the idea of changing

174
00:07:34,899 --> 00:07:43,649
the API to the system so that people who

175
00:07:41,589 --> 00:07:46,869
allocate memory from the system actually

176
00:07:43,649 --> 00:07:50,560
understand the the fact that you're

177
00:07:46,870 --> 00:07:52,540
getting back a thing that has a control

178
00:07:50,560 --> 00:07:54,100
block in it right and that you use that

179
00:07:52,540 --> 00:07:56,640
control block for storing your

180
00:07:54,100 --> 00:07:59,200
information as well if that makes sense

181
00:07:56,639 --> 00:08:02,110
and so what I mean by that is if we look

182
00:07:59,199 --> 00:08:03,490
at the platform layer and again I'm just

183
00:08:02,110 --> 00:08:06,490
kind of experimenting with this but I

184
00:08:03,490 --> 00:08:08,590
could I just like the idea when we say

185
00:08:06,490 --> 00:08:10,269
that we want to do a platform allocate

186
00:08:08,589 --> 00:08:12,009
memory right now we're just getting back

187
00:08:10,269 --> 00:08:12,759
a void star which is like a pointer to

188
00:08:12,009 --> 00:08:14,800
the memory

189
00:08:12,759 --> 00:08:16,810
and when we free it we pass in a void

190
00:08:14,800 --> 00:08:19,689
star you know and we also pass in

191
00:08:16,810 --> 00:08:21,129
whatever the flags were and again the

192
00:08:19,689 --> 00:08:22,300
reason that we had to pass in with the

193
00:08:21,129 --> 00:08:24,579
flags were is because fundamentally

194
00:08:22,300 --> 00:08:25,870
speaking the operating system doesn't

195
00:08:24,579 --> 00:08:27,219
have any idea how the memory was

196
00:08:25,870 --> 00:08:29,110
allocated in the first place so in order

197
00:08:27,220 --> 00:08:31,270
to get back to its control block it

198
00:08:29,110 --> 00:08:33,820
needs to do work so what I was thinking

199
00:08:31,269 --> 00:08:36,159
is really we don't have to do that if we

200
00:08:33,820 --> 00:08:37,810
don't want to we don't necessarily have

201
00:08:36,159 --> 00:08:43,029
to even deal with that particular

202
00:08:37,809 --> 00:08:46,809
situation because what we could do

203
00:08:43,029 --> 00:08:50,019
instead is actually have the platform

204
00:08:46,809 --> 00:08:52,449
memory header or actually have the win32

205
00:08:50,019 --> 00:08:55,199
memory header be like a real thing that

206
00:08:52,450 --> 00:08:57,820
you get back and that you can see right

207
00:08:55,200 --> 00:09:01,030
so if you imagine we take a look here

208
00:08:57,820 --> 00:09:10,540
we've got this sort of win32 memory

209
00:09:01,029 --> 00:09:13,419
block thing and just what I'm thinking

210
00:09:10,539 --> 00:09:16,329
is we could make you basically get back

211
00:09:13,419 --> 00:09:19,870
you know a pointer into a part of this

212
00:09:16,330 --> 00:09:21,940
or into actually this right so for

213
00:09:19,870 --> 00:09:24,279
example we could say like okay you know

214
00:09:21,940 --> 00:09:27,040
what is the portion of this that should

215
00:09:24,279 --> 00:09:29,199
be visible to the application and you

216
00:09:27,039 --> 00:09:32,110
know if we take a look at it it's like

217
00:09:29,200 --> 00:09:36,700
well it's probably you know something

218
00:09:32,110 --> 00:09:38,980
like this right these things are pretty

219
00:09:36,700 --> 00:09:41,230
much stuff that only the win32 side

220
00:09:38,980 --> 00:09:44,500
cares about but these things are things

221
00:09:41,230 --> 00:09:47,080
that the application would potentially

222
00:09:44,500 --> 00:09:48,429
care about as well right the flags are

223
00:09:47,080 --> 00:09:51,070
something the application was having to

224
00:09:48,429 --> 00:09:52,719
pass back into us that it could keep the

225
00:09:51,070 --> 00:09:54,250
size is something the application wants

226
00:09:52,720 --> 00:09:55,540
to know about the memory that it

227
00:09:54,250 --> 00:09:57,460
allocated right because it's trying to

228
00:09:55,539 --> 00:09:59,139
track that as well the base pointer is

229
00:09:57,460 --> 00:10:00,700
the thing that it primarily wanted in

230
00:09:59,139 --> 00:10:02,980
the first place was where the memory is

231
00:10:00,700 --> 00:10:05,560
and then we've got two more things here

232
00:10:02,980 --> 00:10:08,529
that are you know sized appropriately to

233
00:10:05,559 --> 00:10:10,629
actually have them come back to us as

234
00:10:08,529 --> 00:10:13,179
necessary and so what I'm thinking about

235
00:10:10,629 --> 00:10:15,519
that again is just that hey it would be

236
00:10:13,179 --> 00:10:18,179
cool if we could make it so that this

237
00:10:15,519 --> 00:10:23,528
was effectively some some you know

238
00:10:18,179 --> 00:10:26,000
struct platform memory block

239
00:10:23,528 --> 00:10:37,720
where we just said all of these things

240
00:10:26,000 --> 00:10:37,720
are actually in here or maybe that I

241
00:10:38,110 --> 00:10:49,990
don't know something like this I have no

242
00:10:46,039 --> 00:10:53,269
idea what should be gang block maybe um

243
00:10:49,990 --> 00:10:56,480
so anyway inside there I have no idea

244
00:10:53,269 --> 00:10:59,179
select lock button mmm I don't know

245
00:10:56,480 --> 00:11:01,100
anyway point being the the memory block

246
00:10:59,179 --> 00:11:02,449
sort of exists inside there and so you

247
00:11:01,100 --> 00:11:04,040
know when we allocate one of these we

248
00:11:02,450 --> 00:11:06,200
could pass the operation we could pass

249
00:11:04,039 --> 00:11:08,899
the call the person who's calling us

250
00:11:06,200 --> 00:11:11,209
back one of these things so for example

251
00:11:08,899 --> 00:11:12,679
we could then make the allocate memory

252
00:11:11,208 --> 00:11:16,189
and deallocate memory stuff actually

253
00:11:12,679 --> 00:11:23,899
work on one of these platform memory

254
00:11:16,190 --> 00:11:27,649
blocks and return one of these flat for

255
00:11:23,899 --> 00:11:30,740
memory blocks and so then what we could

256
00:11:27,649 --> 00:11:33,620
do and also that would alleviate the the

257
00:11:30,740 --> 00:11:35,839
need for us to deal with that then what

258
00:11:33,620 --> 00:11:39,139
we could do is sort of see how that

259
00:11:35,839 --> 00:11:40,700
would work out in in our scheme so when

260
00:11:39,139 --> 00:11:42,110
we want to do like the allocate memory

261
00:11:40,700 --> 00:11:44,720
and we're trying to freeze something

262
00:11:42,110 --> 00:11:47,690
right we would pass it in the memory

263
00:11:44,720 --> 00:11:50,149
block that we actually cared about right

264
00:11:47,690 --> 00:11:52,670
the the the blockade or so when we say

265
00:11:50,149 --> 00:11:56,629
get footer or whatever what we need to

266
00:11:52,669 --> 00:11:58,189
do here is figure out for arenas and

267
00:11:56,629 --> 00:12:02,689
stuff like this we need to figure out

268
00:11:58,190 --> 00:12:04,130
where these blocks exist right and in

269
00:12:02,690 --> 00:12:05,990
order to do that I think what we could

270
00:12:04,129 --> 00:12:08,389
do I don't think it'll be particularly

271
00:12:05,990 --> 00:12:10,100
difficult I don't know yet though what

272
00:12:08,389 --> 00:12:12,049
we could do is say alright so the block

273
00:12:10,100 --> 00:12:14,959
chain is gone we'll just say that the

274
00:12:12,049 --> 00:12:16,639
block chain is something that again is

275
00:12:14,958 --> 00:12:18,439
now lofted up into here because it

276
00:12:16,639 --> 00:12:20,028
already has most of the data right we

277
00:12:18,440 --> 00:12:22,100
know where the base pointer is here is

278
00:12:20,028 --> 00:12:24,470
the base pointer we know what the size

279
00:12:22,100 --> 00:12:26,149
is because there's the size we don't

280
00:12:24,470 --> 00:12:27,829
know what they used is and we don't care

281
00:12:26,149 --> 00:12:31,000
about the pad so really all we're

282
00:12:27,828 --> 00:12:31,000
talking about is this

283
00:12:31,350 --> 00:12:35,129
right because those things were almost

284
00:12:33,629 --> 00:12:36,509
entirely storing the same information

285
00:12:35,129 --> 00:12:38,070
which is why I kind of wanted to

286
00:12:36,509 --> 00:12:41,639
collapse and dash didn't make any sense

287
00:12:38,070 --> 00:12:43,320
to have both right so once we have that

288
00:12:41,639 --> 00:12:45,720
platform memory block then that means

289
00:12:43,320 --> 00:12:48,420
that all we have to really do like we've

290
00:12:45,720 --> 00:12:50,190
got get footer here on the arena the

291
00:12:48,419 --> 00:12:52,079
memory arena where it's got this this

292
00:12:50,190 --> 00:12:53,940
base pointer what I want to do I think

293
00:12:52,080 --> 00:12:55,889
is in addition to the base pointer I

294
00:12:53,940 --> 00:12:59,370
want to store what the block is what the

295
00:12:55,889 --> 00:13:03,569
platform memory block is that's the

296
00:12:59,370 --> 00:13:06,659
pointer to the previous platform memory

297
00:13:03,570 --> 00:13:08,460
block right and we can chain these

298
00:13:06,659 --> 00:13:10,679
backwards because we only ever go

299
00:13:08,460 --> 00:13:14,490
backwards through them so we also should

300
00:13:10,679 --> 00:13:19,319
be able to say like okay platform memory

301
00:13:14,490 --> 00:13:21,930
block arena pre or something like that

302
00:13:19,320 --> 00:13:24,480
right so we should be able to chain them

303
00:13:21,929 --> 00:13:26,759
backwards that way inside a given memory

304
00:13:24,480 --> 00:13:29,159
arena we can just say like okay there

305
00:13:26,759 --> 00:13:31,200
should be a memory block that is the the

306
00:13:29,159 --> 00:13:34,259
memory block that we actually are using

307
00:13:31,200 --> 00:13:37,530
currently and we just remember what that

308
00:13:34,259 --> 00:13:40,289
is right we just remember whatever we

309
00:13:37,529 --> 00:13:50,179
wanted that to be and so that would be

310
00:13:40,289 --> 00:13:52,799
you know something like that right

311
00:13:50,179 --> 00:13:56,008
now there's a bunch of stuff that's kind

312
00:13:52,799 --> 00:13:58,078
of ee stored here and the question is

313
00:13:56,009 --> 00:13:59,970
just I don't know if we want to double

314
00:13:58,078 --> 00:14:01,638
chase the pointers or to keep them

315
00:13:59,970 --> 00:14:04,440
copied out like we kind of were before

316
00:14:01,639 --> 00:14:06,028
if I because if you take a look at what

317
00:14:04,440 --> 00:14:07,170
happens here we obviously have and I'm

318
00:14:06,028 --> 00:14:09,750
going to make that a you ate from that

319
00:14:07,169 --> 00:14:11,969
we obviously have base stored in both

320
00:14:09,750 --> 00:14:14,519
places we have used stored in both

321
00:14:11,970 --> 00:14:17,220
places we have size stored in both

322
00:14:14,519 --> 00:14:20,100
places so we don't actually need that

323
00:14:17,220 --> 00:14:22,800
data we could just always use it off of

324
00:14:20,100 --> 00:14:24,449
the current block itself but it does

325
00:14:22,799 --> 00:14:26,099
require us to say well if we have a

326
00:14:24,448 --> 00:14:27,688
memory arena instead of looking directly

327
00:14:26,100 --> 00:14:30,870
into the memory net we're kind of

328
00:14:27,688 --> 00:14:32,519
looking into some side buffer you know

329
00:14:30,870 --> 00:14:34,289
to every time we want to do an

330
00:14:32,519 --> 00:14:37,110
allocation and I don't know how I feel

331
00:14:34,289 --> 00:14:39,028
about that so I'm going to do it that

332
00:14:37,110 --> 00:14:41,909
way because I think it will be easier to

333
00:14:39,028 --> 00:14:46,318
make things work properly at first but

334
00:14:41,909 --> 00:14:52,230
it may be the case to do k see if we see

335
00:14:46,318 --> 00:14:58,799
/ problems here maybe move a used base

336
00:14:52,230 --> 00:15:00,470
out to avoid that sort of double in

337
00:14:58,799 --> 00:15:03,088
direction that's going to happen right

338
00:15:00,470 --> 00:15:04,290
so I don't know you know memory

339
00:15:03,089 --> 00:15:07,680
allocation is not something that happens

340
00:15:04,289 --> 00:15:09,740
that often inside handmade hero so it's

341
00:15:07,679 --> 00:15:12,149
possible that it isn't really relevant

342
00:15:09,740 --> 00:15:14,549
but you never know so I'm just going to

343
00:15:12,149 --> 00:15:16,230
like sort of mention that there is

344
00:15:14,549 --> 00:15:20,159
potentially a problem there and we'll

345
00:15:16,230 --> 00:15:22,079
see what happens when we get to it so

346
00:15:20,159 --> 00:15:25,438
okay that would be sort of the new way

347
00:15:22,078 --> 00:15:32,519
that things would look and then you know

348
00:15:25,438 --> 00:15:35,599
when we sort of when we sort of need to

349
00:15:32,519 --> 00:15:39,089
do stuff here what we can do is say okay

350
00:15:35,600 --> 00:15:41,100
where's our push size inside our push

351
00:15:39,089 --> 00:15:45,509
sighs when we do our sort of used plus

352
00:15:41,100 --> 00:15:47,730
size greater than size stuff obviously

353
00:15:45,509 --> 00:15:50,339
this would require that we have a

354
00:15:47,730 --> 00:15:51,870
current block right so if we have a

355
00:15:50,339 --> 00:15:56,029
current block and then we're just going

356
00:15:51,870 --> 00:15:56,028
to say alright the current block used

357
00:15:57,049 --> 00:16:01,829
current block size right and you see

358
00:16:00,389 --> 00:16:04,470
what I mean about the Dublin direction

359
00:16:01,830 --> 00:16:07,400
so you can kind of see how that's I mean

360
00:16:04,470 --> 00:16:09,300
you know it's not great right it's not

361
00:16:07,399 --> 00:16:11,340
necessarily what we would want to do

362
00:16:09,299 --> 00:16:13,019
there and it really just depends on the

363
00:16:11,340 --> 00:16:19,050
circumstances whether that would be

364
00:16:13,019 --> 00:16:21,269
problematic or not so anyway let's take

365
00:16:19,049 --> 00:16:23,309
a quick look at the other way that this

366
00:16:21,269 --> 00:16:26,789
stuff would work you can see here like

367
00:16:23,309 --> 00:16:28,619
these guys would also need to have it so

368
00:16:26,789 --> 00:16:29,939
yeah you know I mean you can just see

369
00:16:28,620 --> 00:16:34,679
why I'm like a little bit nervous about

370
00:16:29,940 --> 00:16:36,930
why having that constantly be the case I

371
00:16:34,679 --> 00:16:40,169
also don't know when we do get effective

372
00:16:36,929 --> 00:16:42,719
size for that's one of the problems that

373
00:16:40,169 --> 00:16:45,269
we have had and will and still have at

374
00:16:42,720 --> 00:16:47,129
this point is get effective size for is

375
00:16:45,269 --> 00:16:49,049
not going to take into account the fact

376
00:16:47,129 --> 00:16:51,179
that we may allocate a new block of

377
00:16:49,049 --> 00:16:53,669
memory at some point so get effective

378
00:16:51,179 --> 00:16:56,669
size for is only useful in the case

379
00:16:53,669 --> 00:16:58,769
where we know that our base pointer is

380
00:16:56,669 --> 00:17:00,839
actually that we know that we're not

381
00:16:58,769 --> 00:17:04,529
doing our like overflow checking and so

382
00:17:00,840 --> 00:17:09,180
on so that's a little bit squirrelly as

383
00:17:04,529 --> 00:17:10,588
well because yeah I don't know I guess

384
00:17:09,180 --> 00:17:13,110
it doesn't really matter because we sort

385
00:17:10,588 --> 00:17:15,599
of rectify that later on but still it's

386
00:17:13,109 --> 00:17:17,699
just a little bit weird anyway so when

387
00:17:15,599 --> 00:17:20,490
we call get effective size we also have

388
00:17:17,700 --> 00:17:22,650
this problem but again we can sort of

389
00:17:20,490 --> 00:17:25,799
say we can sort of make that be a thing

390
00:17:22,650 --> 00:17:28,800
where if there wasn't a current block

391
00:17:25,799 --> 00:17:30,299
this would be if not currently if there

392
00:17:28,799 --> 00:17:32,789
wasn't a current block then we wouldn't

393
00:17:30,299 --> 00:17:36,690
do it so we could also do a thing that

394
00:17:32,789 --> 00:17:42,779
was more like you know if arena current

395
00:17:36,690 --> 00:17:45,120
block do it otherwise don't and so on so

396
00:17:42,779 --> 00:17:46,619
anyway if we know that we don't have a

397
00:17:45,119 --> 00:17:48,689
current block then we know we're going

398
00:17:46,619 --> 00:17:49,829
to have to do that if we don't if we do

399
00:17:48,690 --> 00:17:52,049
have a current block then we just need

400
00:17:49,829 --> 00:17:54,379
to see if it has memory once we get in

401
00:17:52,049 --> 00:17:56,909
here then we're going to go ahead and do

402
00:17:54,380 --> 00:17:58,740
everything pretty much the same way we

403
00:17:56,910 --> 00:18:02,290
used to do it let's go current block

404
00:17:58,740 --> 00:18:10,440
here firm blah

405
00:18:02,289 --> 00:18:13,899
and then I think we're all good like so

406
00:18:10,440 --> 00:18:17,880
and again I'm going to want to revisit

407
00:18:13,900 --> 00:18:20,700
this a bit just until I get it down to

408
00:18:17,880 --> 00:18:23,980
like a place where I'm happy about it

409
00:18:20,700 --> 00:18:27,279
but anyway so that's the basic idea

410
00:18:23,980 --> 00:18:29,140
there and what we're going to need is

411
00:18:27,279 --> 00:18:31,089
when we actually do this sort of

412
00:18:29,140 --> 00:18:33,730
allocation you can kind of see we do a

413
00:18:31,089 --> 00:18:36,339
memory block train save here that would

414
00:18:33,730 --> 00:18:38,380
now go away because we wouldn't be

415
00:18:36,339 --> 00:18:40,720
dealing with that anymore and so then

416
00:18:38,380 --> 00:18:42,850
what we would do is say all right we

417
00:18:40,720 --> 00:18:45,039
know that we don't need to do this

418
00:18:42,849 --> 00:18:46,689
anymore so really the only thing we're

419
00:18:45,039 --> 00:18:49,869
doing is making sure we never allocate a

420
00:18:46,690 --> 00:18:53,980
block size that's too small we then go

421
00:18:49,869 --> 00:19:00,459
ahead and say let's take we don't care

422
00:18:53,980 --> 00:19:01,990
about any of this no that's going to get

423
00:19:00,460 --> 00:19:05,680
filled up for us by the platform layer

424
00:19:01,990 --> 00:19:10,349
so now our current block or I should

425
00:19:05,680 --> 00:19:12,400
probably say Rena and block good block

426
00:19:10,349 --> 00:19:17,500
that we're now going to have a platform

427
00:19:12,400 --> 00:19:19,960
memory block where we do a platform

428
00:19:17,500 --> 00:19:23,019
allocate memory and we felt till at the

429
00:19:19,960 --> 00:19:25,240
block size and the flags that we want to

430
00:19:23,019 --> 00:19:27,160
to use for allocation that's going to

431
00:19:25,240 --> 00:19:30,009
get us back a new block that's going to

432
00:19:27,160 --> 00:19:32,529
be completely initialized and and yet

433
00:19:30,009 --> 00:19:34,990
that's about all there is to it we no

434
00:19:32,529 --> 00:19:36,339
longer need the block count because the

435
00:19:34,990 --> 00:19:38,289
block count was strictly there to

436
00:19:36,339 --> 00:19:41,109
prevent us from unwinding too far in

437
00:19:38,289 --> 00:19:42,839
this case we now know that we won't have

438
00:19:41,109 --> 00:19:47,349
to worry about that I don't think

439
00:19:42,839 --> 00:19:50,649
because we will have the back pointer in

440
00:19:47,349 --> 00:19:54,519
our in our heading so we will know when

441
00:19:50,650 --> 00:20:00,000
we've rewound too far so once we get a

442
00:19:54,519 --> 00:20:03,430
new block we need to arena we need to

443
00:20:00,000 --> 00:20:05,730
set the arena breathe what should we

444
00:20:03,430 --> 00:20:05,730
call that

445
00:20:06,859 --> 00:20:11,639
we're going to prove we need to set the

446
00:20:09,539 --> 00:20:15,990
arena prieve to be the block that we're

447
00:20:11,640 --> 00:20:17,700
currently on and then we set the new

448
00:20:15,990 --> 00:20:20,670
block to be the one that we're currently

449
00:20:17,700 --> 00:20:22,410
looking at right and that's pretty much

450
00:20:20,670 --> 00:20:24,779
all there would be to it we don't need

451
00:20:22,410 --> 00:20:25,860
the footer stuff anymore we don't need

452
00:20:24,779 --> 00:20:26,789
any of that because we're assuming that

453
00:20:25,859 --> 00:20:29,099
we're just going to use the one the

454
00:20:26,789 --> 00:20:31,200
operating system laid out for us and so

455
00:20:29,099 --> 00:20:34,559
I think the rest of it kind of is the

456
00:20:31,200 --> 00:20:38,600
same as it would be again the this stuff

457
00:20:34,559 --> 00:20:45,079
here has to now have sort of a

458
00:20:38,599 --> 00:20:50,879
block-based thing here and all of this

459
00:20:45,079 --> 00:20:54,439
is how it is I don't know who is still

460
00:20:50,880 --> 00:20:54,440
calling get arena size remaining

461
00:20:59,919 --> 00:21:06,288
only the person who prints this thing

462
00:21:02,298 --> 00:21:08,378
out so I think that's not going to be a

463
00:21:06,288 --> 00:21:10,819
thing we do any more would be my

464
00:21:08,378 --> 00:21:17,898
assumption so I think we're just going

465
00:21:10,819 --> 00:21:20,658
to say let's let's nuke this and then in

466
00:21:17,898 --> 00:21:26,118
our memory system here we can just say

467
00:21:20,659 --> 00:21:41,149
that's not a thing anymore alright so

468
00:21:26,118 --> 00:21:49,819
let's see arena has room for and that is

469
00:21:41,148 --> 00:21:51,858
also not being used anymore nor is get

470
00:21:49,819 --> 00:21:55,069
footer so we can just simplify that

471
00:21:51,858 --> 00:21:57,739
stuff down a bit all right when we do

472
00:21:55,069 --> 00:21:59,088
the begin temporary memory I believe

473
00:21:57,739 --> 00:22:02,558
that there isn't anything in particular

474
00:21:59,088 --> 00:22:06,979
that's going to be happening there that

475
00:22:02,558 --> 00:22:13,249
that needs to be special I think it

476
00:22:06,979 --> 00:22:14,989
should be pretty basic yeah so i think

477
00:22:13,249 --> 00:22:19,808
when we do begin temporary that's all we

478
00:22:14,989 --> 00:22:19,808
would need when we come back here to you

479
00:22:21,460 --> 00:22:25,358
know i'll be honest

480
00:22:28,579 --> 00:22:35,538
yeah ok so the when we were doing the

481
00:22:32,648 --> 00:22:36,918
the blackout thing we were just doing

482
00:22:35,538 --> 00:22:38,000
that so we could clear memory so again

483
00:22:36,919 --> 00:22:39,350
yeah we definitely don't need that

484
00:22:38,000 --> 00:22:41,569
because all we have to do is just keep

485
00:22:39,349 --> 00:22:43,879
walking back so all we have to do is say

486
00:22:41,569 --> 00:22:46,278
as long as there is that we just say

487
00:22:43,880 --> 00:22:47,960
while there is a current block all we

488
00:22:46,278 --> 00:22:51,288
have to do is just do free last block

489
00:22:47,960 --> 00:22:52,880
right that that's really it and so that

490
00:22:51,288 --> 00:22:55,009
way when we do free last lock we just

491
00:22:52,880 --> 00:22:59,419
say like okay the thing that we're going

492
00:22:55,009 --> 00:23:02,200
to free platform memory block is the

493
00:22:59,419 --> 00:23:06,320
current block we're then going to

494
00:23:02,200 --> 00:23:09,169
deallocate that memory right whatever it

495
00:23:06,319 --> 00:23:12,470
is we don't need the flags anymore and

496
00:23:09,169 --> 00:23:15,559
that then that's really all there is to

497
00:23:12,470 --> 00:23:17,990
it before we do that we for we free it

498
00:23:15,558 --> 00:23:19,428
we need to get the arena the pre vat of

499
00:23:17,990 --> 00:23:21,740
it so we can move back one block but

500
00:23:19,429 --> 00:23:28,220
that's about it and that's all we should

501
00:23:21,740 --> 00:23:34,460
really have to do I think I mean I think

502
00:23:28,220 --> 00:23:36,919
that's really it so yeah we could also

503
00:23:34,460 --> 00:23:39,200
make this a little simpler and say the

504
00:23:36,919 --> 00:23:41,090
base part here could actually just be a

505
00:23:39,200 --> 00:23:43,220
block it's like what block you were on

506
00:23:41,089 --> 00:23:45,379
instead of what base you're on so we

507
00:23:43,220 --> 00:23:47,269
just need like the block we could do

508
00:23:45,380 --> 00:23:49,549
like that and then that way we can say

509
00:23:47,269 --> 00:23:54,079
well the current block is not equal to

510
00:23:49,548 --> 00:23:56,298
the block that we were on before I think

511
00:23:54,079 --> 00:23:59,569
that's really all there is so that way

512
00:23:56,298 --> 00:24:01,490
the temp men would not be storing a base

513
00:23:59,569 --> 00:24:05,480
pointer it'd just be storing a platform

514
00:24:01,490 --> 00:24:11,778
memory block right and i think that's

515
00:24:05,480 --> 00:24:17,630
that's it uh did I type it in a row yeah

516
00:24:11,778 --> 00:24:22,509
I did what there we go uh so yeah I

517
00:24:17,630 --> 00:24:22,510
think that's good what else we got here

518
00:24:22,538 --> 00:24:29,119
so sub arenas I don't know that we're

519
00:24:25,460 --> 00:24:32,000
using sub arenas anymore let's let's

520
00:24:29,119 --> 00:24:35,349
double check because I don't think that

521
00:24:32,000 --> 00:24:35,349
we are so let's just get rid of those

522
00:24:36,279 --> 00:24:42,139
all right and when we do draw a Rena

523
00:24:39,589 --> 00:24:44,178
occupancy that is not even something

524
00:24:42,140 --> 00:24:45,830
that we're doing anymore but it's um I

525
00:24:44,179 --> 00:24:46,669
think at some point we will want to

526
00:24:45,829 --> 00:24:50,058
enable it so I'm going to leave that

527
00:24:46,669 --> 00:24:54,950
there all right so now let's get down to

528
00:24:50,058 --> 00:24:59,538
the win32 part of things right so now

529
00:24:54,950 --> 00:25:06,259
what we need to do is take a look at how

530
00:24:59,538 --> 00:25:08,720
I specified this on the platform side we

531
00:25:06,259 --> 00:25:11,779
moved those flags into the platform part

532
00:25:08,720 --> 00:25:12,980
of it that part of the flags anyway so

533
00:25:11,779 --> 00:25:15,859
we just need to take a look at anyone

534
00:25:12,980 --> 00:25:18,048
who was using that the base pointer was

535
00:25:15,859 --> 00:25:19,699
also in there but I don't really

536
00:25:18,048 --> 00:25:22,548
remember how we're writing this out yes

537
00:25:19,700 --> 00:25:25,340
that is how right so we always want to

538
00:25:22,548 --> 00:25:26,869
access the platform block for these

539
00:25:25,339 --> 00:25:30,168
because these are these were all things

540
00:25:26,869 --> 00:25:32,209
that were in there and let's take a look

541
00:25:30,169 --> 00:25:36,020
here so allocate we're going to want to

542
00:25:32,210 --> 00:25:39,798
rewrite now and deallocate as well let's

543
00:25:36,019 --> 00:25:41,179
just make sure okay so let's go ahead

544
00:25:39,798 --> 00:25:44,990
and rewrite these now that we know

545
00:25:41,179 --> 00:25:49,280
what's going on so in this case we're

546
00:25:44,990 --> 00:25:52,548
going to take a win32 memory block that

547
00:25:49,279 --> 00:25:54,408
we have allocated in addition to and

548
00:25:52,548 --> 00:25:56,418
we're going to set up the values in it

549
00:25:54,409 --> 00:25:57,740
you can see here we're setting up some

550
00:25:56,419 --> 00:26:00,650
of those values like we're setting up

551
00:25:57,740 --> 00:26:02,329
block base right but we're not setting

552
00:26:00,650 --> 00:26:06,019
up some of the other values like block

553
00:26:02,329 --> 00:26:09,918
used and so on those I guess can be

554
00:26:06,019 --> 00:26:13,009
cleared to zero I suppose so maybe it

555
00:26:09,919 --> 00:26:18,980
doesn't really matter that much they all

556
00:26:13,009 --> 00:26:21,919
should be set to zero but let's assert

557
00:26:18,980 --> 00:26:26,900
that they are so when we set the the

558
00:26:21,919 --> 00:26:31,090
block let's just assert let me go ahead

559
00:26:26,900 --> 00:26:31,090
and set these here equals

560
00:26:33,048 --> 00:26:44,569
cannot convert from the three-member

561
00:26:35,159 --> 00:26:44,570
luck to you 8 sorry about that again and

562
00:26:45,440 --> 00:27:00,769
there we go so now I really want to know

563
00:27:04,339 --> 00:27:13,829
all I really want to know now is what

564
00:27:08,460 --> 00:27:15,750
exactly Jimmy is what exactly those

565
00:27:13,829 --> 00:27:22,470
other values are virtual Alex should set

566
00:27:15,750 --> 00:27:25,109
them to zero but I want to make sure so

567
00:27:22,470 --> 00:27:30,259
these two should both be set to zero so

568
00:27:25,109 --> 00:27:30,258
I want to do an assert that my block

569
00:27:30,648 --> 00:27:37,408
values here are always initialized I

570
00:27:34,230 --> 00:27:38,669
believe they should be but I just want

571
00:27:37,409 --> 00:27:44,850
to ensure that they are because maybe

572
00:27:38,669 --> 00:27:47,309
they aren't when I return the value here

573
00:27:44,849 --> 00:27:58,439
I actually am not returning the win32

574
00:27:47,308 --> 00:28:00,028
block I'm returning that sub portion of

575
00:27:58,440 --> 00:28:01,950
it right because i'm not actually

576
00:28:00,028 --> 00:28:03,720
telling the platform layer about the

577
00:28:01,950 --> 00:28:05,759
win32 side of things I'm just kind of

578
00:28:03,720 --> 00:28:09,480
returning it a little baby piece and

579
00:28:05,759 --> 00:28:10,980
then that should in theory be all we

580
00:28:09,480 --> 00:28:12,419
need to do for the allocation when we

581
00:28:10,980 --> 00:28:16,470
deallocate now we know that it's

582
00:28:12,419 --> 00:28:18,419
actually passing us in a block right so

583
00:28:16,470 --> 00:28:23,220
if we take a look at the deallocation

584
00:28:18,419 --> 00:28:29,610
call which would be here we should be

585
00:28:23,220 --> 00:28:32,700
getting now a block pointer back instead

586
00:28:29,609 --> 00:28:35,519
of memory right so now all we need to do

587
00:28:32,700 --> 00:28:37,710
is say well ok we know that what they

588
00:28:35,519 --> 00:28:39,419
gave us was like a plat block was the

589
00:28:37,710 --> 00:28:44,038
platform part of the block so i need to

590
00:28:39,419 --> 00:28:48,690
back up now to get to the correct part

591
00:28:44,038 --> 00:28:50,788
to get to the win32 part of it right and

592
00:28:48,690 --> 00:28:54,149
if I want to I can make this a little

593
00:28:50,788 --> 00:28:58,679
easier on myself by just using sort of

594
00:28:54,148 --> 00:29:01,168
the the standard subclassing way that

595
00:28:58,679 --> 00:29:02,700
that things work in c and c++ which is

596
00:29:01,169 --> 00:29:03,960
that if you have a pointer to something

597
00:29:02,700 --> 00:29:05,580
if you put something at the top of it

598
00:29:03,960 --> 00:29:07,608
you can treat that pointer interchange

599
00:29:05,579 --> 00:29:11,368
lee right this is how c++ implements

600
00:29:07,608 --> 00:29:13,978
there you know sort of light

601
00:29:11,368 --> 00:29:16,288
polymorphism that they have when you do

602
00:29:13,979 --> 00:29:19,200
inheritance or stuff like that I you

603
00:29:16,288 --> 00:29:21,118
could just say oh alright well I have a

604
00:29:19,200 --> 00:29:23,669
memory block I want to sometimes treat

605
00:29:21,118 --> 00:29:24,928
it as a as just a regular block so I

606
00:29:23,669 --> 00:29:27,059
don't want to have to do the pointer

607
00:29:24,929 --> 00:29:28,798
math to move like I could write if I

608
00:29:27,058 --> 00:29:30,749
left it down there I just when I want to

609
00:29:28,798 --> 00:29:32,999
go back to a win32 I just have to know

610
00:29:30,749 --> 00:29:36,329
what to move back by a few pointers

611
00:29:32,999 --> 00:29:37,679
right by 3 64 bit values but what I can

612
00:29:36,329 --> 00:29:39,058
do instead is just use it this way and

613
00:29:37,679 --> 00:29:41,460
then casting just work so you don't have

614
00:29:39,058 --> 00:29:43,618
to do any arithmetic so since there's no

615
00:29:41,460 --> 00:29:46,139
reason for me not to do that I suppose I

616
00:29:43,618 --> 00:29:48,118
might as well just do it that way it's a

617
00:29:46,138 --> 00:29:58,319
little more efficient so I can just say

618
00:29:48,118 --> 00:29:59,579
like okay like so now in this case I

619
00:29:58,319 --> 00:30:01,048
don't have to do this check anymore

620
00:29:59,579 --> 00:30:04,168
because I know that I'm actually getting

621
00:30:01,048 --> 00:30:07,168
back the actual block itself so really

622
00:30:04,169 --> 00:30:09,149
all I have to do is use this to check

623
00:30:07,169 --> 00:30:11,639
the looping flags and see whether I

624
00:30:09,148 --> 00:30:14,278
needed to do anything otherwise I'm

625
00:30:11,638 --> 00:30:16,319
pretty much done right I can just free

626
00:30:14,278 --> 00:30:18,409
the block as I normally would free the

627
00:30:16,319 --> 00:30:20,668
block that's really all there is to it

628
00:30:18,409 --> 00:30:25,259
so I think there really isn't very much

629
00:30:20,669 --> 00:30:27,440
to do their hoops that's really all

630
00:30:25,259 --> 00:30:27,440
there is

631
00:30:30,179 --> 00:30:46,509
and i think that's it okay so let's see

632
00:30:43,690 --> 00:30:49,360
that's supposed to be an or not an and

633
00:30:46,509 --> 00:30:53,319
so that's not going to go well to say

634
00:30:49,359 --> 00:30:56,799
the least you can't just you know or an

635
00:30:53,319 --> 00:30:58,689
and not interchangeable so if we have

636
00:30:56,799 --> 00:31:00,940
the current block and we're saying that

637
00:30:58,690 --> 00:31:02,590
it's not set to anything that means we

638
00:31:00,940 --> 00:31:04,058
automatically have to take this path and

639
00:31:02,589 --> 00:31:07,209
allocate some new memory for ourselves

640
00:31:04,058 --> 00:31:08,879
right but otherwise then we want to

641
00:31:07,210 --> 00:31:18,630
check to see whether the current block

642
00:31:08,880 --> 00:31:22,570
has you know room or not all right that

643
00:31:18,630 --> 00:31:24,900
does not look good at all what's going

644
00:31:22,569 --> 00:31:24,899
on here

645
00:31:33,359 --> 00:31:46,379
well in this case I can just step in so

646
00:31:37,048 --> 00:31:52,558
I'm gonna here we go so let's see we

647
00:31:46,380 --> 00:31:55,309
have a current block oh wow that's great

648
00:31:52,558 --> 00:31:59,009
I don't know what's going on there

649
00:31:55,308 --> 00:32:01,649
obviously when i get the size i had to

650
00:31:59,009 --> 00:32:03,048
set it to this I when I cut and pasted

651
00:32:01,650 --> 00:32:06,419
that was a little bit of a bug there I

652
00:32:03,048 --> 00:32:14,839
meant to still set the size equal to

653
00:32:06,419 --> 00:32:14,840
that that was just a total typo okay

654
00:32:15,529 --> 00:32:20,490
alright so now let's see what's going on

655
00:32:17,880 --> 00:32:24,179
here we're doing a begin temporary

656
00:32:20,490 --> 00:32:25,620
memory and I guess we aren't properly

657
00:32:24,179 --> 00:32:27,210
handling a case where we don't have a

658
00:32:25,619 --> 00:32:29,759
current block where the arena hasn't

659
00:32:27,210 --> 00:32:32,220
been used at all because we're looking

660
00:32:29,759 --> 00:32:36,000
at that used pointer which is not

661
00:32:32,220 --> 00:32:37,860
correct right so i suppose what i should

662
00:32:36,000 --> 00:32:39,808
do there is make sure that we handle

663
00:32:37,859 --> 00:32:41,969
that correctly I don't think there's

664
00:32:39,808 --> 00:32:46,589
anything I can do I probably just have

665
00:32:41,970 --> 00:32:50,100
to check to see if there is one or not

666
00:32:46,589 --> 00:32:53,399
and then when we do the rewinding in

667
00:32:50,099 --> 00:32:55,980
theory that will just work but we also

668
00:32:53,400 --> 00:32:58,470
again we can't do these assertions here

669
00:32:55,980 --> 00:33:00,960
so what we would have to do is that say

670
00:32:58,470 --> 00:33:03,720
if arena current block if weary rep

671
00:33:00,960 --> 00:33:11,190
rewound all the way we don't want to

672
00:33:03,720 --> 00:33:14,039
touch anything right alright so now in

673
00:33:11,190 --> 00:33:16,110
theory we're running okay and we're

674
00:33:14,039 --> 00:33:17,940
running entirely in underflow checking

675
00:33:16,109 --> 00:33:19,139
mode right now I believe because we kind

676
00:33:17,940 --> 00:33:21,570
of did a little thing in here where we

677
00:33:19,140 --> 00:33:23,850
I'm sorry overflow jacking mode we stuck

678
00:33:21,569 --> 00:33:25,798
a little thing in here but at the moment

679
00:33:23,849 --> 00:33:27,439
although that we will do this part

680
00:33:25,798 --> 00:33:29,700
properly meaning will will force

681
00:33:27,440 --> 00:33:31,650
allocations to all be every time you

682
00:33:29,700 --> 00:33:33,690
call it it'll do a separate virtual a

683
00:33:31,650 --> 00:33:36,870
lock and create the pages we don't

684
00:33:33,690 --> 00:33:39,720
actually support underflow I'm sorry

685
00:33:36,869 --> 00:33:42,269
overflow checking in here so for example

686
00:33:39,720 --> 00:33:44,700
we've got underflow checking support

687
00:33:42,269 --> 00:33:46,558
here but we don't have any overflow

688
00:33:44,700 --> 00:33:46,710
checking support so we want something

689
00:33:46,558 --> 00:33:48,319
we're

690
00:33:46,710 --> 00:33:51,840
are going to do like platform memory

691
00:33:48,319 --> 00:34:01,319
overflow check right and this gets a

692
00:33:51,839 --> 00:34:03,808
little bit tricky because now we can't

693
00:34:01,319 --> 00:34:09,838
just do the basic thing that we were

694
00:34:03,808 --> 00:34:11,250
doing before where we sort of allocated

695
00:34:09,838 --> 00:34:13,139
the memory and then push the pointer

696
00:34:11,250 --> 00:34:14,760
forward a few pages that's not going to

697
00:34:13,139 --> 00:34:17,159
work because now we need to make sure we

698
00:34:14,760 --> 00:34:20,159
line it up at the end of a page not at

699
00:34:17,159 --> 00:34:24,510
the beginning of a page now I believe we

700
00:34:20,159 --> 00:34:27,210
should still be able to say yeah I think

701
00:34:24,510 --> 00:34:31,369
as long as we allocate those two extra

702
00:34:27,210 --> 00:34:33,838
pages I think we'll probably be fine

703
00:34:31,369 --> 00:34:38,099
because the allocation that we get back

704
00:34:33,838 --> 00:34:39,989
I mean we will let's put it this way i'm

705
00:34:38,099 --> 00:34:41,609
going to do the math out properly even

706
00:34:39,989 --> 00:34:43,319
though i think we may be able to cheese

707
00:34:41,608 --> 00:34:45,598
it just because we know the a persistent

708
00:34:43,320 --> 00:34:47,940
is only is going to allocate on the 4k

709
00:34:45,599 --> 00:34:52,919
page boundary anyway but we'll ignore

710
00:34:47,940 --> 00:34:54,119
that for for a moment okay so if I have

711
00:34:52,918 --> 00:34:55,980
this under float check on I know you

712
00:34:54,119 --> 00:34:57,869
need to add two pages if I have the

713
00:34:55,980 --> 00:35:00,510
overflow check on obviously I still need

714
00:34:57,869 --> 00:35:02,880
two more pages one is for that the page

715
00:35:00,510 --> 00:35:05,430
that blocks access and the other is for

716
00:35:02,880 --> 00:35:08,838
the page that stores the header part and

717
00:35:05,429 --> 00:35:11,940
in this case what I have is I need

718
00:35:08,838 --> 00:35:15,900
additional some additional space to

719
00:35:11,940 --> 00:35:19,139
effectively like align the other part of

720
00:35:15,900 --> 00:35:21,269
the allocation so that it can end on

721
00:35:19,139 --> 00:35:25,618
that boundary what that means is I need

722
00:35:21,269 --> 00:35:33,719
to know how much extra it would take to

723
00:35:25,619 --> 00:35:35,430
pad the size that I wanted right in fact

724
00:35:33,719 --> 00:35:37,019
now that I look at this too since we're

725
00:35:35,429 --> 00:35:39,779
doing two times page size this is not

726
00:35:37,019 --> 00:35:42,108
actually correct this should have been

727
00:35:39,780 --> 00:35:42,109
this

728
00:35:45,079 --> 00:35:48,779
right because we don't need to account

729
00:35:47,760 --> 00:35:52,830
for the win through to memory block

730
00:35:48,780 --> 00:35:54,600
anymore when we're doing this stuff duh

731
00:35:52,829 --> 00:35:58,199
because we're making a whole extra page

732
00:35:54,599 --> 00:36:00,719
for that thing anyway so what I was

733
00:35:58,199 --> 00:36:02,639
saying is now ok we do the underflow

734
00:36:00,719 --> 00:36:03,959
checking it just works this way we do

735
00:36:02,639 --> 00:36:05,429
the overflow checking now what we want

736
00:36:03,960 --> 00:36:07,139
to say is well we don't really know what

737
00:36:05,429 --> 00:36:09,000
this size is quite yet we know we need

738
00:36:07,139 --> 00:36:11,549
the two extra pages we also need this

739
00:36:09,000 --> 00:36:15,690
size to be rounded up to the next

740
00:36:11,550 --> 00:36:18,060
boundary of pages right so we need to

741
00:36:15,690 --> 00:36:20,760
sort of say what is that rounded up

742
00:36:18,059 --> 00:36:23,179
version and we also probably want to do

743
00:36:20,760 --> 00:36:26,640
a thing here where we're like okay a

744
00:36:23,179 --> 00:36:28,230
base offset and what we could do with

745
00:36:26,639 --> 00:36:30,690
the base offices say well if you look at

746
00:36:28,230 --> 00:36:32,670
what happened we'll start it out at zero

747
00:36:30,690 --> 00:36:35,070
if you look at what happened in the case

748
00:36:32,670 --> 00:36:37,590
where we have the underflow checking you

749
00:36:35,070 --> 00:36:39,900
can see that we did the base we added

750
00:36:37,590 --> 00:36:42,360
two times the page size to it so what we

751
00:36:39,900 --> 00:36:44,430
could do there is say well when when we

752
00:36:42,360 --> 00:36:48,390
actually set that base pointer right

753
00:36:44,429 --> 00:36:50,369
like right here we don't really have to

754
00:36:48,389 --> 00:36:53,309
do that here we could do that up here

755
00:36:50,369 --> 00:36:57,869
and so when we set the base when we set

756
00:36:53,309 --> 00:36:59,909
the base pointer we could say like all

757
00:36:57,869 --> 00:37:03,929
right wherever that base pointer is

758
00:36:59,909 --> 00:37:10,500
going to end up is now going to get off

759
00:37:03,929 --> 00:37:13,199
set well I guess hmm ya know that just

760
00:37:10,500 --> 00:37:15,780
works so what we'll do is here in the

761
00:37:13,199 --> 00:37:17,639
base of the base offset we know that if

762
00:37:15,780 --> 00:37:19,710
we aren't doing any kind of overflow

763
00:37:17,639 --> 00:37:22,319
tracking it just has to move past the

764
00:37:19,710 --> 00:37:26,599
win through to memory block right so

765
00:37:22,320 --> 00:37:29,640
again that would just be here's the the

766
00:37:26,599 --> 00:37:31,289
the you eight of the block and then

767
00:37:29,639 --> 00:37:33,029
we're going to add to it whatever that

768
00:37:31,289 --> 00:37:36,090
base offset is right so we're just going

769
00:37:33,030 --> 00:37:38,100
to move it past the header however in

770
00:37:36,090 --> 00:37:40,230
other circumstances like in the one

771
00:37:38,099 --> 00:37:42,690
where we're doing the underflow checking

772
00:37:40,230 --> 00:37:48,210
then we know that we want to move it up

773
00:37:42,690 --> 00:37:50,940
by one page size worth right this thing

774
00:37:48,210 --> 00:37:54,480
here or a two page size worth rather one

775
00:37:50,940 --> 00:37:55,139
for the for the header page and one for

776
00:37:54,480 --> 00:37:58,769
the page that

777
00:37:55,139 --> 00:38:01,440
marked as don't touch this page right so

778
00:37:58,769 --> 00:38:07,139
in here we just have the base offset

779
00:38:01,440 --> 00:38:09,360
equals 2 times page size right so that's

780
00:38:07,139 --> 00:38:11,400
all there is to that now in the overflow

781
00:38:09,360 --> 00:38:12,809
checking case we now know that there's

782
00:38:11,400 --> 00:38:15,119
going to be a base offset that's used to

783
00:38:12,809 --> 00:38:16,980
slide this up to align it and so we have

784
00:38:15,119 --> 00:38:18,359
to do is compute both what the total

785
00:38:16,980 --> 00:38:20,490
size is we need to allocate and what

786
00:38:18,360 --> 00:38:22,410
that offset is to put the actual base

787
00:38:20,489 --> 00:38:24,569
pointer at a location that will make it

788
00:38:22,409 --> 00:38:27,690
so the end of the allocated space lines

789
00:38:24,570 --> 00:38:38,460
up as close as possible to the the end

790
00:38:27,690 --> 00:38:40,019
the the memory endpoint right okay and

791
00:38:38,460 --> 00:38:42,510
we do have one other thing that we have

792
00:38:40,019 --> 00:38:44,400
to do that has to do with alignment that

793
00:38:42,510 --> 00:38:47,730
hopefully a lot of time to do after this

794
00:38:44,400 --> 00:38:50,670
but we'll get to that a little later so

795
00:38:47,730 --> 00:38:53,070
anyway what we need to do is say if this

796
00:38:50,670 --> 00:38:57,690
size was going to be padded out to a

797
00:38:53,070 --> 00:38:59,490
full like basically the entire 4k pages

798
00:38:57,690 --> 00:39:02,159
worth whatever it would be will round it

799
00:38:59,489 --> 00:39:05,729
up right so I basically need to round

800
00:39:02,159 --> 00:39:09,239
this up to a page size rounding it up to

801
00:39:05,730 --> 00:39:14,699
the page size is you know rounded size

802
00:39:09,239 --> 00:39:18,829
or size rounded up just means that I

803
00:39:14,699 --> 00:39:23,879
have to essentially take whatever

804
00:39:18,829 --> 00:39:25,860
whatever part of it was not it I don't

805
00:39:23,880 --> 00:39:29,220
know why my brain is explaining this

806
00:39:25,860 --> 00:39:34,590
poorly remember we have this guy a line

807
00:39:29,219 --> 00:39:38,849
pao2 right where we basically just we

808
00:39:34,590 --> 00:39:41,670
add in 1 minus the entirety of the thing

809
00:39:38,849 --> 00:39:43,230
we wanted to do to sort of move it up to

810
00:39:41,670 --> 00:39:45,900
the next value and then we get rid of

811
00:39:43,230 --> 00:39:49,019
anything in the bottom it's it's

812
00:39:45,900 --> 00:39:51,660
essentially just saying draw this out

813
00:39:49,019 --> 00:39:53,070
because I'm my brain is for some for

814
00:39:51,659 --> 00:39:54,960
some reason too tired today to give a

815
00:39:53,070 --> 00:39:56,580
good verbal explanation of this so I'm

816
00:39:54,960 --> 00:40:01,079
gonna try and say it a little more

817
00:39:56,579 --> 00:40:03,210
clearly so you know in in integer space

818
00:40:01,079 --> 00:40:06,480
right we've got something that looks

819
00:40:03,210 --> 00:40:09,329
like you know like this it's like

820
00:40:06,480 --> 00:40:13,619
you know 0 1 1 0 1 or something like

821
00:40:09,329 --> 00:40:16,619
this and we know that what we want to do

822
00:40:13,619 --> 00:40:18,570
is we want to round up to the nearest

823
00:40:16,619 --> 00:40:20,869
thing on this side right and maybe

824
00:40:18,570 --> 00:40:23,880
there's even some stuff over here right

825
00:40:20,869 --> 00:40:25,619
so we want to round up so that we know

826
00:40:23,880 --> 00:40:29,010
that we're not using any of these bits

827
00:40:25,619 --> 00:40:33,119
right so what we do in order to do that

828
00:40:29,010 --> 00:40:35,880
is we just say well if we added this

829
00:40:33,119 --> 00:40:39,480
number right if we added all ones down

830
00:40:35,880 --> 00:40:43,019
here then we know we would produce a 1

831
00:40:39,480 --> 00:40:45,380
here right and carry forward if there

832
00:40:43,019 --> 00:40:47,880
was any bit set down here at all and

833
00:40:45,380 --> 00:40:50,849
that's precisely the thing that we

834
00:40:47,880 --> 00:40:52,740
actually care about right is if there

835
00:40:50,849 --> 00:40:54,750
are any bits set down here because if

836
00:40:52,739 --> 00:40:56,250
you think about what happens if i have a

837
00:40:54,750 --> 00:41:00,119
number i said like i want to align it to

838
00:40:56,250 --> 00:41:03,809
a 16-byte boundary right then it doesn't

839
00:41:00,119 --> 00:41:07,289
matter whether i have 1 2 3 4 5 6 any

840
00:41:03,809 --> 00:41:10,799
number other than zero right in that

841
00:41:07,289 --> 00:41:12,449
bottom part in that bottom 0 to 15 which

842
00:41:10,800 --> 00:41:15,180
is what this would represent write any

843
00:41:12,449 --> 00:41:17,009
number in that bottom part is too much

844
00:41:15,179 --> 00:41:19,139
we will need to go up to another one if

845
00:41:17,010 --> 00:41:21,180
it's all zeros I wouldn't need to go up

846
00:41:19,139 --> 00:41:23,849
to another one but if it's anything else

847
00:41:21,179 --> 00:41:26,309
I do so we want to add essentially one

848
00:41:23,849 --> 00:41:29,849
you know just the number whatever we're

849
00:41:26,309 --> 00:41:31,769
wrapping 2-1 to do that bump then we

850
00:41:29,849 --> 00:41:33,389
clear out the bottom bits at that point

851
00:41:31,769 --> 00:41:36,960
because we know we've got the rounded up

852
00:41:33,389 --> 00:41:41,368
value so this is all I'm trying to do

853
00:41:36,960 --> 00:41:43,050
and so I'll do my align power too and I

854
00:41:41,369 --> 00:41:45,900
say the value that I wanted was the size

855
00:41:43,050 --> 00:41:48,119
and the win32 page size is the thing

856
00:41:45,900 --> 00:41:49,980
that I want to align it to now I knew I

857
00:41:48,119 --> 00:41:51,690
have the size rounded up so now I know

858
00:41:49,980 --> 00:41:53,789
that the size i'm using is sized rounded

859
00:41:51,690 --> 00:41:56,730
up plus 2 times the page size the base

860
00:41:53,789 --> 00:41:58,800
offset is going to be first the page

861
00:41:56,730 --> 00:42:03,030
size to get me past the header part

862
00:41:58,800 --> 00:42:05,609
right then I'm going to add the size

863
00:42:03,030 --> 00:42:07,350
rounded up which would get me to the end

864
00:42:05,608 --> 00:42:09,539
of the memory block and then I want to

865
00:42:07,349 --> 00:42:11,759
go back however much I was actually

866
00:42:09,539 --> 00:42:14,509
trying to allocate so I start in and

867
00:42:11,760 --> 00:42:16,590
right at that ending point right and

868
00:42:14,510 --> 00:42:18,690
then all the rest of the stuff should

869
00:42:16,590 --> 00:42:20,190
work the same now once I do the

870
00:42:18,690 --> 00:42:22,289
underflow check or over

871
00:42:20,190 --> 00:42:27,510
so check think here then what I need to

872
00:42:22,289 --> 00:42:31,279
do is the exact same thing that I would

873
00:42:27,510 --> 00:42:31,280
have done in the underflow checking case

874
00:42:31,880 --> 00:42:37,440
but what I need to do now is say instead

875
00:42:34,440 --> 00:42:40,230
of block plus page size what I actually

876
00:42:37,440 --> 00:42:43,639
need to do is go up to and you know what

877
00:42:40,230 --> 00:42:43,639
i could do actually now think about it

878
00:42:47,659 --> 00:42:55,289
if either of these are set what i could

879
00:42:50,099 --> 00:42:57,838
do is just say protect offset right i

880
00:42:55,289 --> 00:42:59,489
could just do exactly the same trick and

881
00:42:57,838 --> 00:43:03,838
say alright there's going to be a

882
00:42:59,489 --> 00:43:06,059
protective set in the case where we

883
00:43:03,838 --> 00:43:09,989
doing underflow checking to protect

884
00:43:06,059 --> 00:43:13,380
offset is just the page size right in

885
00:43:09,989 --> 00:43:16,019
the case where we're doing over overflow

886
00:43:13,380 --> 00:43:17,940
checking it's going to be the page slice

887
00:43:16,019 --> 00:43:19,818
plus the size rounded up it's going to

888
00:43:17,940 --> 00:43:22,380
be all the way to that that final page

889
00:43:19,818 --> 00:43:27,869
and then it just runs this in either

890
00:43:22,380 --> 00:43:29,760
case since I suppose since the protect

891
00:43:27,869 --> 00:43:31,349
offset itself is set to zero when there

892
00:43:29,760 --> 00:43:33,180
isn't anything in particular that's

893
00:43:31,349 --> 00:43:34,950
being protected I suppose we could also

894
00:43:33,179 --> 00:43:36,449
have done this by just saying if protect

895
00:43:34,949 --> 00:43:37,710
offset but this is a little bit more

896
00:43:36,449 --> 00:43:40,739
correct at the moment so I'm going to

897
00:43:37,710 --> 00:43:42,389
leave it that way all right so in theory

898
00:43:40,739 --> 00:43:45,088
that will do the overflow checking now

899
00:43:42,389 --> 00:43:46,469
but I'm not entirely sure and hey it

900
00:43:45,088 --> 00:43:49,019
looks like it did because remember we

901
00:43:46,469 --> 00:43:50,730
inserted this line as a bug yesterday to

902
00:43:49,019 --> 00:43:52,739
say when our overflow checking worked it

903
00:43:50,730 --> 00:43:54,900
will catch this error and it caught the

904
00:43:52,739 --> 00:43:56,939
error right remember that was just a

905
00:43:54,900 --> 00:43:58,440
silent bug we inserted that we never

906
00:43:56,940 --> 00:44:00,030
would have known was there until we saw

907
00:43:58,440 --> 00:44:03,329
some bad behavior when it over wrote

908
00:44:00,030 --> 00:44:05,609
something and now we actually know that

909
00:44:03,329 --> 00:44:07,380
we can catch it so that's pretty that's

910
00:44:05,608 --> 00:44:09,119
pretty awesome right there let's go

911
00:44:07,380 --> 00:44:10,650
actually remove that because hey we

912
00:44:09,119 --> 00:44:14,849
don't want to leave the bug in that we

913
00:44:10,650 --> 00:44:16,289
inserted intentionally but now we know

914
00:44:14,849 --> 00:44:20,068
at least that our overflow checking will

915
00:44:16,289 --> 00:44:26,219
catch overflows okay so where did we add

916
00:44:20,068 --> 00:44:28,679
that guy all right there we go and now

917
00:44:26,219 --> 00:44:30,389
we're good so if i run it again now we

918
00:44:28,679 --> 00:44:31,989
should be just overflow checking our

919
00:44:30,389 --> 00:44:35,170
actual

920
00:44:31,989 --> 00:44:37,569
code now and like I said before I think

921
00:44:35,170 --> 00:44:40,420
I had a question yesterday on the QA

922
00:44:37,570 --> 00:44:42,070
where someone said they were asking why

923
00:44:40,420 --> 00:44:44,470
are we adding overflow checking if it

924
00:44:42,070 --> 00:44:46,330
hasn't come up yet and I believe that my

925
00:44:44,469 --> 00:44:47,829
answer to that hopefully is prescient

926
00:44:46,329 --> 00:44:50,980
here assuming that we're actually doing

927
00:44:47,829 --> 00:44:52,989
it properly is that we don't actually

928
00:44:50,980 --> 00:44:55,360
know that we don't have any right the

929
00:44:52,989 --> 00:44:57,609
whole point of overflow checking is not

930
00:44:55,360 --> 00:44:59,559
to catch overflow bugs that you are

931
00:44:57,610 --> 00:45:01,809
having currently necessarily there to

932
00:44:59,559 --> 00:45:03,789
find any overflows you might have that

933
00:45:01,809 --> 00:45:05,739
are not causing obvious problems yet

934
00:45:03,789 --> 00:45:07,599
because typically the most difficult

935
00:45:05,739 --> 00:45:09,639
underfloor overflow bugs to catch are

936
00:45:07,599 --> 00:45:11,529
ones that don't immediately manifest

937
00:45:09,639 --> 00:45:13,089
themselves the more immediately the man

938
00:45:11,530 --> 00:45:14,410
SSL is the less likely you are to need

939
00:45:13,090 --> 00:45:16,660
overflow or underflow jacketing to

940
00:45:14,409 --> 00:45:18,009
actually find them so in this case you

941
00:45:16,659 --> 00:45:20,319
can see we're getting an actual thing

942
00:45:18,010 --> 00:45:22,150
here it suggests that we may just

943
00:45:20,320 --> 00:45:23,740
actually have a bug here now we haven't

944
00:45:22,150 --> 00:45:25,360
really debugged our overflow checking

945
00:45:23,739 --> 00:45:27,129
itself yet so it's a little bit

946
00:45:25,360 --> 00:45:28,960
premature to suggest that we know or

947
00:45:27,130 --> 00:45:31,480
don't know that something like that is

948
00:45:28,960 --> 00:45:34,869
happening but let's take a look and see

949
00:45:31,480 --> 00:45:37,539
what is happening here I'm not sure this

950
00:45:34,869 --> 00:45:41,260
doesn't look but in particularly onerous

951
00:45:37,539 --> 00:45:46,449
so maybe that we're right because this

952
00:45:41,260 --> 00:45:51,310
this looks roughly correct to me I so

953
00:45:46,449 --> 00:45:52,779
i'm not sure why we're getting a why

954
00:45:51,309 --> 00:45:54,880
we're getting one there I wonder if we

955
00:45:52,780 --> 00:45:58,480
are slightly off on the way we're

956
00:45:54,880 --> 00:45:59,710
passing back but you can see here yet

957
00:45:58,480 --> 00:46:04,000
you can see our ass getting the desk

958
00:45:59,710 --> 00:46:06,579
pointer out of out of this push we are

959
00:46:04,000 --> 00:46:08,469
pushing one more than we need which is

960
00:46:06,579 --> 00:46:10,059
what we would expect we're then going

961
00:46:08,469 --> 00:46:12,219
through the characters for that and

962
00:46:10,059 --> 00:46:13,960
we're putting them on there it looks

963
00:46:12,219 --> 00:46:17,289
like at the end when we do desk length

964
00:46:13,960 --> 00:46:18,820
which we should be able to do right that

965
00:46:17,289 --> 00:46:21,489
it's thinking that that's an overwrite

966
00:46:18,820 --> 00:46:23,890
on that but I don't know why that would

967
00:46:21,489 --> 00:46:25,868
be an overwrite let's take a look

968
00:46:23,889 --> 00:46:28,358
because now also one of the things we

969
00:46:25,869 --> 00:46:31,600
can do is we know that that best pointer

970
00:46:28,358 --> 00:46:32,858
is actually like an individual

971
00:46:31,599 --> 00:46:34,239
allocation because when we're running in

972
00:46:32,858 --> 00:46:36,069
overflow checking mode we know that each

973
00:46:34,239 --> 00:46:40,000
of them was allocated will be basically

974
00:46:36,070 --> 00:46:41,289
on a page that we can then look at so we

975
00:46:40,000 --> 00:46:44,699
should be able to take a look at it here

976
00:46:41,289 --> 00:46:44,699
and see

977
00:46:45,289 --> 00:46:51,599
there it is and we should be able to

978
00:46:49,318 --> 00:46:55,708
figure out whether it actually gave us

979
00:46:51,599 --> 00:46:59,429
the page boundary minus the amount that

980
00:46:55,708 --> 00:47:02,248
we requested right so length plus 1 in

981
00:46:59,429 --> 00:47:04,289
this case was five so we should know

982
00:47:02,248 --> 00:47:10,139
that there we should be able to get five

983
00:47:04,289 --> 00:47:13,170
things we should have been able to get

984
00:47:10,139 --> 00:47:14,608
five spaces before the end right it

985
00:47:13,170 --> 00:47:18,479
should have given us back five spaces

986
00:47:14,608 --> 00:47:22,380
before we would overwrite and and have a

987
00:47:18,478 --> 00:47:25,438
problem and let's see if we did so we

988
00:47:22,380 --> 00:47:27,329
can see here we've got FFC so we could

989
00:47:25,438 --> 00:47:29,458
trivially do the subtraction here and

990
00:47:27,329 --> 00:47:32,548
see how many we actually got right and

991
00:47:29,458 --> 00:47:37,018
that's definitely not the right number

992
00:47:32,548 --> 00:47:39,088
of of characters to be able to write

993
00:47:37,018 --> 00:47:42,178
because we should have been able to

994
00:47:39,088 --> 00:47:45,239
write to five locations and in this case

995
00:47:42,179 --> 00:47:48,389
we're only going to be able to write to

996
00:47:45,239 --> 00:47:50,130
four locations perhaps a more correct

997
00:47:48,389 --> 00:47:53,759
way to have written it so you could see

998
00:47:50,130 --> 00:47:56,219
that was this way and so we we have one

999
00:47:53,759 --> 00:47:57,719
that's missing there and exactly as we

1000
00:47:56,219 --> 00:47:59,699
would expect because our bounds checking

1001
00:47:57,719 --> 00:48:01,650
is protecting the page immediately after

1002
00:47:59,699 --> 00:48:04,139
it as soon as we try to right there

1003
00:48:01,650 --> 00:48:05,670
we're going to have a problem so let's

1004
00:48:04,139 --> 00:48:08,728
take a look I don't know if the first

1005
00:48:05,670 --> 00:48:11,369
time through this happens it would be

1006
00:48:08,728 --> 00:48:13,468
great if it did it does so now we can at

1007
00:48:11,369 --> 00:48:15,959
least debug what we're doing in our

1008
00:48:13,469 --> 00:48:21,329
allocation that's making that not work

1009
00:48:15,958 --> 00:48:23,068
properly let's take a look so we compute

1010
00:48:21,329 --> 00:48:25,410
our effective size for the effective

1011
00:48:23,068 --> 00:48:27,199
size for in this case is five so that's

1012
00:48:25,409 --> 00:48:29,879
fine that's what we would expect to see

1013
00:48:27,199 --> 00:48:31,259
and then we're going to say what's the

1014
00:48:29,880 --> 00:48:33,539
block size that we allocate the block

1015
00:48:31,259 --> 00:48:34,889
size is going to be five again totally

1016
00:48:33,539 --> 00:48:36,900
fine so let's go into our memory

1017
00:48:34,889 --> 00:48:39,058
allocator here where presumably we're

1018
00:48:36,900 --> 00:48:41,670
having our problem we can see our page

1019
00:48:39,059 --> 00:48:44,369
size is 4k the total size that we need

1020
00:48:41,670 --> 00:48:46,380
to allocate is going to be 69 bytes

1021
00:48:44,369 --> 00:48:47,699
because the size is 5 and then the side

1022
00:48:46,380 --> 00:48:50,969
the one with 3des memory block of course

1023
00:48:47,699 --> 00:48:52,528
being 64 because its cache line size we

1024
00:48:50,969 --> 00:48:53,608
have the base offset is just going to be

1025
00:48:52,528 --> 00:48:54,989
that which we're not going to use

1026
00:48:53,608 --> 00:48:56,788
because we overwrite all these same with

1027
00:48:54,989 --> 00:48:57,909
them protected offset we don't have

1028
00:48:56,789 --> 00:48:59,349
underflow checking on we do

1029
00:48:57,909 --> 00:49:00,730
have overflowed checking on so now we

1030
00:48:59,349 --> 00:49:03,280
take a look at what our size rounded up

1031
00:49:00,730 --> 00:49:04,809
is our size rounded up is 4096 that is

1032
00:49:03,280 --> 00:49:06,849
correct because if we're asking for five

1033
00:49:04,809 --> 00:49:09,670
we know we'd only need one page

1034
00:49:06,849 --> 00:49:11,289
obviously the store five so then we take

1035
00:49:09,670 --> 00:49:12,789
a look at whether our total size is our

1036
00:49:11,289 --> 00:49:14,609
total size is going to be that one page

1037
00:49:12,789 --> 00:49:16,869
there's going to be three pages right

1038
00:49:14,608 --> 00:49:20,348
which is what we would expect so if I do

1039
00:49:16,869 --> 00:49:22,450
total size divided right up by 4096 I

1040
00:49:20,349 --> 00:49:24,548
should get through pages than I do so

1041
00:49:22,449 --> 00:49:26,828
that's nice similarly eight eventually I

1042
00:49:24,548 --> 00:49:28,150
can do it this way just to make sure

1043
00:49:26,829 --> 00:49:30,309
it's not a rounding thing you can see

1044
00:49:28,150 --> 00:49:31,329
it's exactly what we would expect so

1045
00:49:30,309 --> 00:49:32,710
then we take a look at what the offs

1046
00:49:31,329 --> 00:49:34,720
that's going to be it's going to be one

1047
00:49:32,710 --> 00:49:36,400
page forward then it's going to be

1048
00:49:34,719 --> 00:49:40,449
however much the size roundup is minus

1049
00:49:36,400 --> 00:49:41,980
that five okay and so what that should

1050
00:49:40,449 --> 00:49:43,929
give us is it should give us you know

1051
00:49:41,980 --> 00:49:45,548
I'll put it Oh leap out and then come

1052
00:49:43,929 --> 00:49:48,429
back a little bit right although the

1053
00:49:45,548 --> 00:49:51,969
page boundary but coming back a little

1054
00:49:48,429 --> 00:49:54,219
bit so that isn't really what we were

1055
00:49:51,969 --> 00:49:56,348
seeing and so we'll have to go take a

1056
00:49:54,219 --> 00:49:58,118
look at why but it could be that we're

1057
00:49:56,349 --> 00:50:00,010
touching this somewhere a little bit

1058
00:49:58,119 --> 00:50:01,480
further up but let's double-check so if

1059
00:50:00,010 --> 00:50:04,750
i come through here and look at what the

1060
00:50:01,480 --> 00:50:07,510
base offset is the base offset is eight

1061
00:50:04,750 --> 00:50:09,369
one eight seven so if we were to take a

1062
00:50:07,510 --> 00:50:12,369
look at what we would expect that to be

1063
00:50:09,369 --> 00:50:14,980
8187 you can see that it's putting it

1064
00:50:12,369 --> 00:50:17,430
exactly where I wanted it so that seems

1065
00:50:14,980 --> 00:50:21,010
to be correct and if i look at block

1066
00:50:17,429 --> 00:50:22,750
block base you can see that that's not

1067
00:50:21,010 --> 00:50:25,690
see it's B which is what we would expect

1068
00:50:22,750 --> 00:50:27,519
so where is that plus one coming from is

1069
00:50:25,690 --> 00:50:28,960
what we need to know we do the virtual

1070
00:50:27,519 --> 00:50:31,960
protect that's what we think we should

1071
00:50:28,960 --> 00:50:34,210
do so that's fine we come back we get

1072
00:50:31,960 --> 00:50:36,400
our block and now let me just see what

1073
00:50:34,210 --> 00:50:39,599
we're doing here in terms of getting the

1074
00:50:36,400 --> 00:50:39,599
actual memory

1075
00:50:43,929 --> 00:50:57,219
get alignment offset may be our problem

1076
00:50:50,429 --> 00:50:59,559
aha yes so this is actually I guess the

1077
00:50:57,219 --> 00:51:01,089
thing that I said when we went back a

1078
00:50:59,559 --> 00:51:02,320
little bit beforehand where I said we're

1079
00:51:01,090 --> 00:51:03,760
going to have one more thing to do with

1080
00:51:02,320 --> 00:51:05,559
alignment well this was the thing I

1081
00:51:03,760 --> 00:51:06,850
wasn't sure if we'd ever hit it but it

1082
00:51:05,559 --> 00:51:09,429
looks like we will hit it because the

1083
00:51:06,849 --> 00:51:11,469
default alignment of four is in effect

1084
00:51:09,429 --> 00:51:15,069
even on things like strings which can

1085
00:51:11,469 --> 00:51:17,109
have odd alignments like that so the

1086
00:51:15,070 --> 00:51:18,970
problem that we have here is basically

1087
00:51:17,110 --> 00:51:20,769
that we need to make sure that the size

1088
00:51:18,969 --> 00:51:23,980
we passed down to the allocator is

1089
00:51:20,769 --> 00:51:26,050
always aligned to the size we expect to

1090
00:51:23,980 --> 00:51:27,969
align to afterwards because otherwise

1091
00:51:26,050 --> 00:51:31,840
when it does the back up it's not going

1092
00:51:27,969 --> 00:51:33,789
to work right and so I'm not sure

1093
00:51:31,840 --> 00:51:36,340
exactly the best way to do that there's

1094
00:51:33,789 --> 00:51:37,869
two ways we can do it one way is we can

1095
00:51:36,340 --> 00:51:40,150
modify the size first and then pass it

1096
00:51:37,869 --> 00:51:42,869
down and the reason that we would do

1097
00:51:40,150 --> 00:51:46,240
that is because if we want to make sure

1098
00:51:42,869 --> 00:51:52,239
that we are always clean in all the

1099
00:51:46,239 --> 00:51:55,059
circumstances we can do that the only

1100
00:51:52,239 --> 00:51:57,159
reason not to do that is if we do do

1101
00:51:55,059 --> 00:51:59,380
that padding it means that if the next

1102
00:51:57,159 --> 00:52:01,420
allocation was something that didn't

1103
00:51:59,380 --> 00:52:03,070
actually need to be aligned itself

1104
00:52:01,420 --> 00:52:05,320
because it's an alignment of one or

1105
00:52:03,070 --> 00:52:06,460
something else then we shouldn't have

1106
00:52:05,320 --> 00:52:08,650
done it because we're wasting a little

1107
00:52:06,460 --> 00:52:15,490
bit of space I'm not sure I care about

1108
00:52:08,650 --> 00:52:17,860
that too much but yet it's a little

1109
00:52:15,489 --> 00:52:19,329
subtle let's put it that way so let's

1110
00:52:17,860 --> 00:52:20,829
take a quick look here what we would

1111
00:52:19,329 --> 00:52:24,519
probably have to do to make that work

1112
00:52:20,829 --> 00:52:26,289
okay and I think that's the last thing

1113
00:52:24,519 --> 00:52:27,639
as far as overflow or underflow checking

1114
00:52:26,289 --> 00:52:29,019
is concerned I don't think there's

1115
00:52:27,639 --> 00:52:33,579
anything else in particular that we need

1116
00:52:29,019 --> 00:52:36,190
to be aware of but so if i come through

1117
00:52:33,579 --> 00:52:38,559
here then essentially what's going to

1118
00:52:36,190 --> 00:52:39,909
happen is once I do this allocation I'm

1119
00:52:38,559 --> 00:52:41,739
going to get back something that's been

1120
00:52:39,909 --> 00:52:43,899
slit up to the to the end of the

1121
00:52:41,739 --> 00:52:45,429
boundary at that point because we split

1122
00:52:43,900 --> 00:52:48,460
it up to be right before the battery if

1123
00:52:45,429 --> 00:52:52,179
it what if its size wasn't aligned to

1124
00:52:48,460 --> 00:52:54,190
this the size to the alignment that we

1125
00:52:52,179 --> 00:52:56,889
wanted we're effectively doing that

1126
00:52:54,190 --> 00:52:57,349
sliding up is going to unaligned it and

1127
00:52:56,889 --> 00:52:58,788
then

1128
00:52:57,349 --> 00:53:00,170
we're going to try to alignment by

1129
00:52:58,789 --> 00:53:03,049
applying the alignment offset and that's

1130
00:53:00,170 --> 00:53:05,499
going to make it be in the wrong place

1131
00:53:03,048 --> 00:53:10,489
right that's that's that's going to ruin

1132
00:53:05,498 --> 00:53:12,318
that's going to ruin our fun so again we

1133
00:53:10,489 --> 00:53:13,759
have two choices here one is we can make

1134
00:53:12,318 --> 00:53:15,889
sure that the size is always also

1135
00:53:13,759 --> 00:53:19,338
aligned that way when we go down to the

1136
00:53:15,889 --> 00:53:21,828
subsystem the win32 subsystem it will

1137
00:53:19,338 --> 00:53:26,239
leave us aligned because the size itself

1138
00:53:21,829 --> 00:53:28,970
will have been aligned the other thing

1139
00:53:26,239 --> 00:53:30,978
we can do is pass the alignment down to

1140
00:53:28,969 --> 00:53:34,699
the win32 subsystem so that when it does

1141
00:53:30,978 --> 00:53:37,338
the adjustment it will back align will

1142
00:53:34,699 --> 00:53:46,298
it will move it back up the amount that

1143
00:53:37,338 --> 00:53:46,298
it needs to for the alignment ah yeah i

1144
00:53:47,829 --> 00:53:58,160
think what i'm going to do is just say

1145
00:53:50,389 --> 00:54:00,679
let's go ahead and and do let's go ahead

1146
00:53:58,159 --> 00:54:04,788
and align it to the alignment that it's

1147
00:54:00,679 --> 00:54:09,018
asking for that just seems like maybe an

1148
00:54:04,789 --> 00:54:11,479
easier thing to do and so i'll just say

1149
00:54:09,018 --> 00:54:13,758
all right you know initialize to the

1150
00:54:11,478 --> 00:54:15,558
size in it if we're going to be in one

1151
00:54:13,759 --> 00:54:18,969
of these overflow or underflow checking

1152
00:54:15,559 --> 00:54:25,069
scenarios then what i want to do is say

1153
00:54:18,969 --> 00:54:29,630
size equals a line pao2 and we'll pass

1154
00:54:25,068 --> 00:54:31,579
in a you know itself and then whatever

1155
00:54:29,630 --> 00:54:39,440
the alignment is that we're currently

1156
00:54:31,579 --> 00:54:41,900
using and now we shouldn't have that

1157
00:54:39,440 --> 00:54:44,869
problem right in theory now when we do

1158
00:54:41,900 --> 00:54:48,170
this and we do the allocation in theory

1159
00:54:44,869 --> 00:54:49,789
now the pointer that we got back where

1160
00:54:48,170 --> 00:54:53,989
is the point that we got back there it

1161
00:54:49,789 --> 00:54:55,278
is should be properly 4-byte align and

1162
00:54:53,989 --> 00:54:58,579
you can see that is it left eight

1163
00:54:55,278 --> 00:55:00,170
characters right and so as you can

1164
00:54:58,579 --> 00:55:02,599
imagine it's kind of annoying because

1165
00:55:00,170 --> 00:55:05,269
now we get worse we always will get

1166
00:55:02,599 --> 00:55:09,259
worse bounds checking but there's really

1167
00:55:05,268 --> 00:55:10,849
nothing we can do about that right uh we

1168
00:55:09,259 --> 00:55:14,780
can only get as good a balance

1169
00:55:10,849 --> 00:55:16,279
checking and still maintain alignment we

1170
00:55:14,780 --> 00:55:18,769
can't get any better Bow striking and

1171
00:55:16,280 --> 00:55:20,870
still maintain alignment right if that

1172
00:55:18,769 --> 00:55:24,829
makes sense and alignment is like a hard

1173
00:55:20,869 --> 00:55:27,920
requirement it's in a lot of cases all

1174
00:55:24,829 --> 00:55:30,619
right so hey sadly for us it looks like

1175
00:55:27,920 --> 00:55:32,809
I mean maybe good job for us I don't

1176
00:55:30,619 --> 00:55:34,369
know which one to say but it looks like

1177
00:55:32,809 --> 00:55:37,519
there aren't any particular overflow

1178
00:55:34,369 --> 00:55:39,619
bugs to catch that we had in our code at

1179
00:55:37,519 --> 00:55:42,949
the moment so hey I guess we did a good

1180
00:55:39,619 --> 00:55:46,190
job on that before but we do now know

1181
00:55:42,949 --> 00:55:47,989
that we can check for them right and so

1182
00:55:46,190 --> 00:55:49,789
that's all well and good what we want to

1183
00:55:47,989 --> 00:55:51,289
do now to is make sure we don't have to

1184
00:55:49,789 --> 00:55:53,960
check for that right we can always turn

1185
00:55:51,289 --> 00:55:55,519
off our bounds checking and then run and

1186
00:55:53,960 --> 00:55:57,170
we should be back to our nice it be

1187
00:55:55,519 --> 00:55:58,969
frame rate because now things are never

1188
00:55:57,170 --> 00:56:05,920
calling the allocator which is what we

1189
00:55:58,969 --> 00:56:09,289
want so that's it for for the sort of

1190
00:56:05,920 --> 00:56:10,159
debug allocation stuff there's I don't

1191
00:56:09,289 --> 00:56:11,449
think there's anything else in

1192
00:56:10,159 --> 00:56:12,799
particular that we want to do let's make

1193
00:56:11,449 --> 00:56:16,909
sure that we can still do loop code

1194
00:56:12,800 --> 00:56:22,250
editing let's see here that doesn't look

1195
00:56:16,909 --> 00:56:26,049
good source block size how is it getting

1196
00:56:22,250 --> 00:56:29,030
set meowzers that's just ridiculously

1197
00:56:26,050 --> 00:56:30,440
big let's make sure because like I said

1198
00:56:29,030 --> 00:56:34,760
we want to make we don't want to we

1199
00:56:30,440 --> 00:56:36,260
don't want to break anything so let's

1200
00:56:34,760 --> 00:56:38,910
see what happened there we've got block

1201
00:56:36,260 --> 00:56:43,049
size what is

1202
00:56:38,909 --> 00:56:47,598
where is my buck it's right here so how

1203
00:56:43,048 --> 00:56:53,369
did that sighs get set to a new unusual

1204
00:56:47,599 --> 00:56:54,599
value what happened there let's well let

1205
00:56:53,369 --> 00:56:57,750
me take a look closer look at it first

1206
00:56:54,599 --> 00:57:04,260
before I try to figure that out so we're

1207
00:56:57,750 --> 00:57:08,579
looping through here and I guess I would

1208
00:57:04,260 --> 00:57:11,640
say this this looks very suspicious I'm

1209
00:57:08,579 --> 00:57:14,339
not sure this is valid at all in fact

1210
00:57:11,639 --> 00:57:17,159
it's definitely not right you can see

1211
00:57:14,338 --> 00:57:18,719
this is kind of nonsense here so let me

1212
00:57:17,159 --> 00:57:27,029
take a look at what happened there let's

1213
00:57:18,719 --> 00:57:31,618
let's jump in here so there's our

1214
00:57:27,030 --> 00:57:37,440
Sentinel and you know here's our blocks

1215
00:57:31,619 --> 00:57:40,200
I will say not encouraging looking that

1216
00:57:37,440 --> 00:57:43,440
one looks reasonable this one does not

1217
00:57:40,199 --> 00:57:47,098
look even remotely reasonable none of

1218
00:57:43,440 --> 00:57:53,730
this looks at all reasonable it's quite

1219
00:57:47,099 --> 00:57:56,809
ridiculous quite whereas these all look

1220
00:57:53,730 --> 00:58:00,150
very reasonable so it looks like our

1221
00:57:56,809 --> 00:58:02,849
next pointer is having some issues there

1222
00:58:00,150 --> 00:58:06,740
let's take a look at why that might be

1223
00:58:02,849 --> 00:58:06,740
happening oops

1224
00:58:12,610 --> 00:58:19,579
so here is our 1 through 2 memory block

1225
00:58:16,039 --> 00:58:22,789
when we are passing in this block we're

1226
00:58:19,579 --> 00:58:24,889
passing in that right there we've got

1227
00:58:22,789 --> 00:58:28,969
the next in previous pointers we do the

1228
00:58:24,889 --> 00:58:34,509
free memory block on this guy which is

1229
00:58:28,969 --> 00:58:37,189
what we would expect so that all looks

1230
00:58:34,510 --> 00:58:41,390
relatively good to me we no longer need

1231
00:58:37,190 --> 00:58:45,409
this page size in there so that's good

1232
00:58:41,389 --> 00:59:09,500
too and presumably this can now move

1233
00:58:45,409 --> 00:59:10,730
inside here also so there we go so what

1234
00:59:09,500 --> 00:59:14,329
we want to do here is just figure out

1235
00:59:10,730 --> 00:59:18,699
who is is making our block act weirdly

1236
00:59:14,329 --> 00:59:21,380
you can see here where we're setting it

1237
00:59:18,699 --> 00:59:25,699
we always set the next point or equal to

1238
00:59:21,380 --> 00:59:27,940
the sentinel we always set the pre

1239
00:59:25,699 --> 00:59:30,919
pointer equal the sentinel prieve I

1240
00:59:27,940 --> 00:59:33,200
don't think any of these things these

1241
00:59:30,920 --> 00:59:34,700
are ticketed here I don't know if

1242
00:59:33,199 --> 00:59:38,659
anything else would have to be ticketed

1243
00:59:34,699 --> 00:59:39,889
it doesn't look like it would be because

1244
00:59:38,659 --> 00:59:43,190
that's the only thing that actually

1245
00:59:39,889 --> 00:59:46,119
touches part of the linked list as far

1246
00:59:43,190 --> 00:59:51,820
as I can tell none of these other ones

1247
00:59:46,119 --> 00:59:57,589
would really be involved I don't think

1248
00:59:51,820 --> 01:00:00,590
so that all looks pretty reasonable I'm

1249
00:59:57,590 --> 01:00:04,820
going to take a look and see if I can

1250
01:00:00,590 --> 01:00:07,160
spot we'll leave it for tomorrow if I

1251
01:00:04,820 --> 01:00:09,140
can't spot it but I want to take a quick

1252
01:00:07,159 --> 01:00:13,250
look just to see if there's an obvious

1253
01:00:09,139 --> 01:00:14,629
reason why that's happening let me take

1254
01:00:13,250 --> 01:00:18,800
a look at the first time of lock is

1255
01:00:14,630 --> 01:00:21,670
freed just want to see what the the

1256
01:00:18,800 --> 01:00:21,670
values are here

1257
01:00:22,760 --> 01:00:28,740
so here's the first time I block is

1258
01:00:24,989 --> 01:00:30,149
freed and you can see that I assume that

1259
01:00:28,739 --> 01:00:31,500
this is the Sentinel here in fact you

1260
01:00:30,150 --> 01:00:33,619
can tell it is because here's the hard

1261
01:00:31,500 --> 01:00:37,530
address for it so it's actually

1262
01:00:33,619 --> 01:00:42,230
obviously not a dynamic allocation so

1263
01:00:37,530 --> 01:00:44,069
the next one here is the Sentinel and

1264
01:00:42,230 --> 01:00:46,980
you can see there's quite a few

1265
01:00:44,068 --> 01:00:48,389
allocations already on the table before

1266
01:00:46,980 --> 01:00:51,690
we actually free one of these

1267
01:00:48,389 --> 01:00:54,298
allocations but at the moment anyway if

1268
01:00:51,690 --> 01:00:57,630
you look at the Sentinel it's not wrong

1269
01:00:54,298 --> 01:01:01,440
like it looks just fine so we take the

1270
01:00:57,630 --> 01:01:03,660
mutex we set the next and previous and

1271
01:01:01,440 --> 01:01:08,929
then it still appears to me like

1272
01:01:03,659 --> 01:01:08,929
everything is relatively good right

1273
01:01:14,210 --> 01:01:20,059
look I don't see anything particularly

1274
01:01:17,480 --> 01:01:21,949
unusual here going on so i'm not sure

1275
01:01:20,059 --> 01:01:23,960
where that corruption is necessarily

1276
01:01:21,949 --> 01:01:28,848
coming in but let's go ahead and keep

1277
01:01:23,960 --> 01:01:31,490
running here there we go and so for

1278
01:01:28,849 --> 01:01:34,730
whatever reason when we actually get in

1279
01:01:31,489 --> 01:01:38,689
here now if you would think that we

1280
01:01:34,730 --> 01:01:41,269
would have seen some error by now in the

1281
01:01:38,690 --> 01:01:42,530
usage but for some reason we don't but

1282
01:01:41,269 --> 01:01:46,309
then if we take a look now at the

1283
01:01:42,530 --> 01:01:53,210
Sentinel we will see I think that that

1284
01:01:46,309 --> 01:01:55,579
next pointer is messed up yeah so I'm

1285
01:01:53,210 --> 01:01:57,230
going to leave that one because that

1286
01:01:55,579 --> 01:01:59,059
might take a while to track down so

1287
01:01:57,230 --> 01:02:00,920
let's go to the Q&amp;A first and then we'll

1288
01:01:59,059 --> 01:02:08,690
check check that one data then I think

1289
01:02:00,920 --> 01:02:11,320
we're done loving that Q&amp;A session

1290
01:02:08,690 --> 01:02:11,320
repeater thing

1291
01:02:15,599 --> 01:02:26,980
it looks like hmd bot is doing it now so

1292
01:02:19,269 --> 01:02:30,639
it's not in in so but oh no I see in

1293
01:02:26,980 --> 01:02:34,559
sohbat replicates the QA and then hmd

1294
01:02:30,639 --> 01:02:34,559
bot prints out the actual information

1295
01:02:37,619 --> 01:02:43,000
can we just talk about how in so bot is

1296
01:02:40,719 --> 01:02:47,949
like a national treasure International

1297
01:02:43,000 --> 01:02:49,750
treasure at this point really that is a

1298
01:02:47,949 --> 01:02:52,088
great question in savate just asked

1299
01:02:49,750 --> 01:02:56,969
bashing Tim berners-lee inventor of the

1300
01:02:52,088 --> 01:03:00,338
outer loop from zero to free everything

1301
01:02:56,969 --> 01:03:05,578
it's kind of like in so bot is is sort

1302
01:03:00,338 --> 01:03:05,578
of like the beat poet of our generation

1303
01:03:17,440 --> 01:03:25,820
there was a great cartoon from a long

1304
01:03:22,340 --> 01:03:28,430
time ago called technological threat I

1305
01:03:25,820 --> 01:03:32,330
don't know if you ever saw it but it was

1306
01:03:28,429 --> 01:03:34,489
basically like a this like office that

1307
01:03:32,329 --> 01:03:40,190
slowly got replaced with computers or

1308
01:03:34,489 --> 01:03:41,449
whatever and it reminds me of what's

1309
01:03:40,190 --> 01:03:53,360
happening in the chat with all these

1310
01:03:41,449 --> 01:03:54,529
bots taking over from script maybe set

1311
01:03:53,360 --> 01:03:57,710
the default alignment to one winning

1312
01:03:54,530 --> 01:04:08,990
memory checking mode yeah that does seem

1313
01:03:57,710 --> 01:04:13,250
like a good idea we would require a

1314
01:04:08,989 --> 01:04:16,069
pound to find for that let me put this

1315
01:04:13,250 --> 01:04:24,670
in the to do list maybe we'll do that we

1316
01:04:16,070 --> 01:04:29,440
did this set default alignment to one in

1317
01:04:24,670 --> 01:04:32,809
overflow underflow checking nodes

1318
01:04:29,440 --> 01:04:38,179
because that's not called on the arena

1319
01:04:32,809 --> 01:04:40,969
we could maybe make that work though we

1320
01:04:38,179 --> 01:04:49,599
could maybe make that work and also

1321
01:04:40,969 --> 01:04:49,599
debug loop or mmm block list there we go

1322
01:05:02,559 --> 01:05:06,579
I know this is a little off topic to

1323
01:05:05,440 --> 01:05:09,849
what you're currently doing on streaming

1324
01:05:06,579 --> 01:05:14,440
but what role does a software driver

1325
01:05:09,849 --> 01:05:20,279
play if any at all to what are you

1326
01:05:14,440 --> 01:05:23,980
referring when you say software driver i

1327
01:05:20,280 --> 01:05:26,620
guess i would i would say the reason

1328
01:05:23,980 --> 01:05:28,659
that that was a that phraseology was a

1329
01:05:26,619 --> 01:05:34,539
little confusing is because all drivers

1330
01:05:28,659 --> 01:05:37,989
are software so do you mean a driver

1331
01:05:34,539 --> 01:05:40,719
like a software rasterizing like out

1332
01:05:37,989 --> 01:05:42,669
like a software opengl driver as a boat

1333
01:05:40,719 --> 01:05:46,929
like one that does the rendering and

1334
01:05:42,670 --> 01:05:48,789
software instead of you know driving a

1335
01:05:46,929 --> 01:05:51,899
graphics card or is there something I'm

1336
01:05:48,789 --> 01:05:51,900
not sure I understand the question

1337
01:06:56,010 --> 01:07:00,880
to anyway no you can make a c+ project

1338
01:06:59,349 --> 01:07:03,069
that enables you to use resources that

1339
01:07:00,880 --> 01:07:06,670
you can't use in user mode in the

1340
01:07:03,070 --> 01:07:08,620
colonel ah I understand I think what

1341
01:07:06,670 --> 01:07:12,670
you're saying so what you're talking

1342
01:07:08,619 --> 01:07:17,279
about is installing something at the as

1343
01:07:12,670 --> 01:07:19,659
a driver that exposes something to you a

1344
01:07:17,280 --> 01:07:23,500
that you would normally have to be in

1345
01:07:19,659 --> 01:07:25,089
kernel mode to access so that is

1346
01:07:23,500 --> 01:07:27,280
definitely something it depends largely

1347
01:07:25,090 --> 01:07:30,390
on the operating system when you need

1348
01:07:27,280 --> 01:07:34,420
that and when you don't so for example

1349
01:07:30,389 --> 01:07:36,579
on windows file systems have to have a

1350
01:07:34,420 --> 01:07:39,670
driver right in order to be a file

1351
01:07:36,579 --> 01:07:42,009
system you have to be a driver so you

1352
01:07:39,670 --> 01:07:44,369
can't just write an app that you run in

1353
01:07:42,010 --> 01:07:47,080
user space that implements a file system

1354
01:07:44,369 --> 01:07:53,589
so one of the things that people have

1355
01:07:47,079 --> 01:07:56,920
done is made a driver that all it does

1356
01:07:53,590 --> 01:07:59,680
is forward all of the driver calls out

1357
01:07:56,920 --> 01:08:07,320
into user space so that you can

1358
01:07:59,679 --> 01:08:09,669
implement user mode file systems right I

1359
01:08:07,320 --> 01:08:12,430
guess what I would say is I don't have

1360
01:08:09,670 --> 01:08:14,289
much to say on that topic that is

1361
01:08:12,429 --> 01:08:15,369
generally just something that has to do

1362
01:08:14,289 --> 01:08:17,380
with what your operating system

1363
01:08:15,369 --> 01:08:20,500
considers privileged and what it doesn't

1364
01:08:17,380 --> 01:08:23,800
and certainly anytime you want to access

1365
01:08:20,500 --> 01:08:26,380
something that is relatively hardware

1366
01:08:23,800 --> 01:08:28,270
related such as implementing file system

1367
01:08:26,380 --> 01:08:30,750
or accessing performance counters of

1368
01:08:28,270 --> 01:08:32,650
some kind that may be protected

1369
01:08:30,750 --> 01:08:35,409
depending on how your operating system

1370
01:08:32,649 --> 01:08:39,369
works you may have to implement a driver

1371
01:08:35,409 --> 01:08:41,199
in order to get at that stuff because by

1372
01:08:39,369 --> 01:08:43,659
default the operating system is not

1373
01:08:41,199 --> 01:08:46,269
going to run your application in a way

1374
01:08:43,659 --> 01:08:48,699
that it can get it sometimes that's

1375
01:08:46,270 --> 01:08:50,440
because of protections so sometimes

1376
01:08:48,699 --> 01:08:52,929
that's like I want to access something

1377
01:08:50,439 --> 01:08:54,639
on the hardware that it's the operation

1378
01:08:52,930 --> 01:08:57,460
through prevents me from doing so if I'm

1379
01:08:54,640 --> 01:08:59,020
not a driver other times it made us be

1380
01:08:57,460 --> 01:09:01,619
because that's the way the operating

1381
01:08:59,020 --> 01:09:04,360
systems API is set up so for example

1382
01:09:01,619 --> 01:09:05,800
with the file system stuff it's not so

1383
01:09:04,359 --> 01:09:09,049
much that the operating system is trying

1384
01:09:05,800 --> 01:09:12,409
to prevent a user space application

1385
01:09:09,050 --> 01:09:15,079
from accessing something like us us sdd

1386
01:09:12,409 --> 01:09:18,319
drive it's because the fundamental

1387
01:09:15,079 --> 01:09:21,409
infrastructure for how hard work like at

1388
01:09:18,319 --> 01:09:24,439
sdg drive or something is implemented in

1389
01:09:21,409 --> 01:09:26,059
Windows is that it all stays in kernel

1390
01:09:24,439 --> 01:09:33,109
space presumably for performance reasons

1391
01:09:26,060 --> 01:09:34,789
right so you just have to be down at

1392
01:09:33,109 --> 01:09:37,099
that level if you want to interact with

1393
01:09:34,789 --> 01:09:38,810
the operating system that way but

1394
01:09:37,100 --> 01:09:40,520
there's nothing inherently stopping you

1395
01:09:38,810 --> 01:09:43,460
from just forwarding those calls out to

1396
01:09:40,520 --> 01:09:44,990
a user space thing and then processing

1397
01:09:43,460 --> 01:09:46,159
them there it's just that the operating

1398
01:09:44,989 --> 01:09:47,809
system doesn't do that by default

1399
01:09:46,159 --> 01:09:51,949
because it wants to be more efficient or

1400
01:09:47,810 --> 01:09:53,660
something right so you know that's

1401
01:09:51,949 --> 01:09:55,609
usually how those sorts things go but

1402
01:09:53,659 --> 01:09:57,019
you're you're doing it usually for one

1403
01:09:55,609 --> 01:09:59,599
of those two reasons either you're

1404
01:09:57,020 --> 01:10:02,510
trying to forward operating system API

1405
01:09:59,600 --> 01:10:04,070
stuff out to the user level and that API

1406
01:10:02,510 --> 01:10:06,470
stuff really only exists at the kernel

1407
01:10:04,069 --> 01:10:08,420
level or you're trying to access

1408
01:10:06,470 --> 01:10:10,070
something that's protected so that the

1409
01:10:08,420 --> 01:10:11,210
user it's not something that the

1410
01:10:10,069 --> 01:10:13,219
operating system set up an API for

1411
01:10:11,210 --> 01:10:14,720
necessarily but it is something that the

1412
01:10:13,220 --> 01:10:16,850
application can't get at because it's

1413
01:10:14,720 --> 01:10:18,199
walled off and the only place the

1414
01:10:16,850 --> 01:10:21,670
operating system allows you to get at it

1415
01:10:18,199 --> 01:10:21,670
is if you're in kernel mode

1416
01:10:45,680 --> 01:10:52,800
what are we doing here people there's no

1417
01:10:50,279 --> 01:11:01,519
more q Colin's there's no mark your

1418
01:10:52,800 --> 01:11:01,520
clones I'm done I get some time

1419
01:11:09,198 --> 01:11:13,109
alright thank you everyone for joining

1420
01:11:11,460 --> 01:11:14,368
me for an episode of handmade hero it's

1421
01:11:13,109 --> 01:11:19,529
been a pleasure coding with you as

1422
01:11:14,368 --> 01:11:21,539
always if you would like to you know

1423
01:11:19,529 --> 01:11:23,130
follow along at home with series you can

1424
01:11:21,539 --> 01:11:24,840
always pre-order the game on Hammond

1425
01:11:23,130 --> 01:11:27,359
organ it comes with a source code so you

1426
01:11:24,840 --> 01:11:28,380
can experiment yourself we also have a

1427
01:11:27,359 --> 01:11:29,848
forum site you go to want to ask

1428
01:11:28,380 --> 01:11:31,409
questions a patreon page to wanna

1429
01:11:29,849 --> 01:11:33,179
support the video series is scheduled

1430
01:11:31,408 --> 01:11:34,888
about the tweets scheduled at you if you

1431
01:11:33,179 --> 01:11:37,469
would like to know one we're going to be

1432
01:11:34,889 --> 01:11:41,578
live and an episode guide that you can

1433
01:11:37,469 --> 01:11:45,149
use to catch up on past episodes that is

1434
01:11:41,578 --> 01:11:48,569
it for today and for the week tomorrow

1435
01:11:45,149 --> 01:11:49,859
is no stream I will be back next week so

1436
01:11:48,569 --> 01:11:52,019
do check the tweetbot for more

1437
01:11:49,859 --> 01:11:53,819
information on that until then have fun

1438
01:11:52,020 --> 01:11:55,530
programming everyone and I'll see you

1439
01:11:53,819 --> 01:11:57,649
guys on the internet take it easy

1440
01:11:55,529 --> 01:11:57,649
everybody

