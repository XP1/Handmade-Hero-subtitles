1
00:00:01,790 --> 00:00:06,960
hello everyone and welcome to handmade

2
00:00:04,080 --> 00:00:08,519
Hero the shows that codes a complete

3
00:00:06,960 --> 00:00:11,099
game live on screen but has been away

4
00:00:08,519 --> 00:00:13,710
for the past two weeks because of an

5
00:00:11,099 --> 00:00:18,448
office move and a planned power outage

6
00:00:13,710 --> 00:00:20,339
in the building which is you know I

7
00:00:18,449 --> 00:00:23,279
guess that is exactly as its name

8
00:00:20,339 --> 00:00:27,420
implies a planned power shutdown perhaps

9
00:00:23,278 --> 00:00:31,198
might be a more asked term for it but

10
00:00:27,420 --> 00:00:34,500
anyway we're back and if I remember

11
00:00:31,199 --> 00:00:36,390
correctly from the time when we were

12
00:00:34,500 --> 00:00:39,929
programming two weeks ago or three weeks

13
00:00:36,390 --> 00:00:41,850
ago at this point now we had our

14
00:00:39,929 --> 00:00:45,058
renderer working pretty nicely but I

15
00:00:41,850 --> 00:00:47,670
wanted to go ahead and re-enable multi

16
00:00:45,058 --> 00:00:49,729
sampling just for one of the passes so

17
00:00:47,670 --> 00:00:58,948
that we could get rid of some of the

18
00:00:49,729 --> 00:00:59,939
Jaganath because we as sort of we don't

19
00:00:58,948 --> 00:01:00,808
really have any need from all the

20
00:00:59,939 --> 00:01:01,948
sampling now that we do the depth

21
00:01:00,808 --> 00:01:04,859
feeling we don't have a need for the

22
00:01:01,948 --> 00:01:06,810
multi sampling in terms of using it for

23
00:01:04,859 --> 00:01:07,978
you know screen door transparency which

24
00:01:06,810 --> 00:01:09,570
is what we're using it for before we

25
00:01:07,978 --> 00:01:13,319
have much better solution for that now

26
00:01:09,569 --> 00:01:17,389
that works a lot nicer but we don't have

27
00:01:13,319 --> 00:01:21,089
any way of reducing sort of the Jaganath

28
00:01:17,390 --> 00:01:22,859
that's inherent in the line drawing for

29
00:01:21,090 --> 00:01:25,320
our geometric services and let me just

30
00:01:22,859 --> 00:01:29,810
go ahead and know what happened there

31
00:01:25,319 --> 00:01:38,039
let me just go ahead and start up

32
00:01:29,810 --> 00:01:40,520
everything here and I will show you what

33
00:01:38,040 --> 00:01:40,520
I mean

34
00:01:45,969 --> 00:01:51,289
all right so if you take a look at what

35
00:01:48,680 --> 00:01:53,540
we've got going on here this is the this

36
00:01:51,290 --> 00:01:56,240
is handmade here running as it normally

37
00:01:53,540 --> 00:01:58,219
does and what you can see is you know

38
00:01:56,239 --> 00:02:00,408
anywhere is that there is a sprite or

39
00:01:58,219 --> 00:02:01,989
anything everything looks fine the

40
00:02:00,409 --> 00:02:04,609
reason for that is that sprites

41
00:02:01,989 --> 00:02:07,339
are anti aliased in the bitmaps

42
00:02:04,609 --> 00:02:09,919
themselves right so the edges if we look

43
00:02:07,340 --> 00:02:12,140
around like where the hero's hat is or

44
00:02:09,919 --> 00:02:14,299
anything like that those are all nice

45
00:02:12,139 --> 00:02:16,089
and anti-alias then that's because the

46
00:02:14,300 --> 00:02:21,110
anti-aliasing is kind of baked into

47
00:02:16,090 --> 00:02:22,340
sprite itself and the actual 3d geometry

48
00:02:21,110 --> 00:02:24,230
that we're rendering to show that's

49
00:02:22,340 --> 00:02:26,569
right it's just a little car it's like a

50
00:02:24,229 --> 00:02:29,030
little rectangle right it's you know

51
00:02:26,568 --> 00:02:31,009
something that that looks like that and

52
00:02:29,030 --> 00:02:33,049
we never see the edges of that rectangle

53
00:02:31,009 --> 00:02:36,048
because the Alpha of the texture at that

54
00:02:33,049 --> 00:02:40,370
point is zero and so we don't have to

55
00:02:36,049 --> 00:02:42,769
worry about the rasterization of those

56
00:02:40,370 --> 00:02:45,170
edges and the alias thing that might

57
00:02:42,769 --> 00:02:46,909
happen along those edges as we draw them

58
00:02:45,169 --> 00:02:48,530
right that's just not a concern for us

59
00:02:46,909 --> 00:02:51,259
because you'll never see those edges

60
00:02:48,530 --> 00:02:53,539
with registered visible so the part that

61
00:02:51,259 --> 00:02:56,750
is in danger of aliasing which is the

62
00:02:53,539 --> 00:03:00,639
pixel the textures in the pixel that

63
00:02:56,750 --> 00:03:03,169
that are within that card those you can

64
00:03:00,639 --> 00:03:05,298
count on the artists who have anti

65
00:03:03,169 --> 00:03:07,280
aliased when they initially paint them

66
00:03:05,299 --> 00:03:09,170
right that's that's what that painting

67
00:03:07,280 --> 00:03:10,549
process automatically does in Photoshop

68
00:03:09,169 --> 00:03:12,738
as you do the brush strokes they're

69
00:03:10,549 --> 00:03:14,180
automatically anti-alias so it doesn't

70
00:03:12,739 --> 00:03:15,319
even really have to be something they

71
00:03:14,180 --> 00:03:16,519
are to see them thinks about usually

72
00:03:15,319 --> 00:03:17,900
they're just going to have it into this

73
00:03:16,519 --> 00:03:19,939
if you're a pixel artists they have to

74
00:03:17,900 --> 00:03:23,539
worry about interesting manually but

75
00:03:19,939 --> 00:03:26,289
they will know how to do that so that's

76
00:03:23,539 --> 00:03:28,459
all well and good but we do have some

77
00:03:26,289 --> 00:03:31,789
geometric primitives in handmade here oh

78
00:03:28,459 --> 00:03:33,229
not many and we probably will not really

79
00:03:31,789 --> 00:03:35,810
have much more than what's on the screen

80
00:03:33,229 --> 00:03:37,488
just right at the moment but we do have

81
00:03:35,810 --> 00:03:40,729
them and so if we come take a look at

82
00:03:37,489 --> 00:03:43,659
stuff down here for example you can see

83
00:03:40,729 --> 00:03:46,280
we've got all of these cubes that

84
00:03:43,659 --> 00:03:49,689
comprise the environment will be texture

85
00:03:46,280 --> 00:03:52,489
mapping these cubes very shortly in fact

86
00:03:49,689 --> 00:03:55,609
with a you know various textures based

87
00:03:52,489 --> 00:03:57,439
on the location that the hero is in but

88
00:03:55,610 --> 00:04:00,050
what you can see is

89
00:03:57,439 --> 00:04:03,229
if the rendering of the cubes does have

90
00:04:00,050 --> 00:04:05,060
sort of jagged borders right and that

91
00:04:03,229 --> 00:04:07,340
may be difficult to see because if

92
00:04:05,060 --> 00:04:09,080
you're watching at home you know the

93
00:04:07,340 --> 00:04:11,300
video compression on Twitch or whatever

94
00:04:09,080 --> 00:04:14,830
may be hiding some of those artifacts

95
00:04:11,300 --> 00:04:17,180
but if you have access to handmade hero

96
00:04:14,830 --> 00:04:19,939
source code if you're if you pre-ordered

97
00:04:17,180 --> 00:04:23,209
the game and you you know you run it

98
00:04:19,939 --> 00:04:25,899
yourself or if you just you know have a

99
00:04:23,209 --> 00:04:28,750
high res if you switch to the the source

100
00:04:25,899 --> 00:04:31,879
mode into which you can probably see

101
00:04:28,750 --> 00:04:35,000
there's a stair stepping pattern that

102
00:04:31,879 --> 00:04:39,170
occurs right along here now I can

103
00:04:35,000 --> 00:04:41,449
probably go ahead and and make that a

104
00:04:39,170 --> 00:04:45,730
little bit more specific let me see if I

105
00:04:41,449 --> 00:04:45,729
can sort of yeah there we go

106
00:04:45,920 --> 00:04:51,830
so if we zoom in here you can see maybe

107
00:04:48,620 --> 00:04:54,129
a little bit more what I mean right so

108
00:04:51,829 --> 00:04:57,229
what we're talking about is this little

109
00:04:54,129 --> 00:05:00,860
you know thing here and you can see what

110
00:04:57,230 --> 00:05:02,720
why this occurs right when you just draw

111
00:05:00,860 --> 00:05:05,720
a straight line in screen space well

112
00:05:02,720 --> 00:05:07,250
it's it's you know it's based on pixels

113
00:05:05,720 --> 00:05:10,850
because that's the only thing that you

114
00:05:07,250 --> 00:05:12,889
can set discreetly on a monitor and so

115
00:05:10,850 --> 00:05:15,110
each individual pixel has to be set to

116
00:05:12,889 --> 00:05:17,300
something so if all you did is just draw

117
00:05:15,110 --> 00:05:19,970
a geometric primitive without any

118
00:05:17,300 --> 00:05:21,740
concern even if you do it perfectly

119
00:05:19,970 --> 00:05:23,240
which the graphic card does they get a

120
00:05:21,740 --> 00:05:26,480
perfectly measured line in pretty much

121
00:05:23,240 --> 00:05:28,040
all cases you can see that you'll see

122
00:05:26,480 --> 00:05:30,230
that there's that pattern because

123
00:05:28,040 --> 00:05:33,950
there's no attempt to smooth the

124
00:05:30,230 --> 00:05:36,860
boundary in between them right and that

125
00:05:33,949 --> 00:05:38,930
harsh edge is very clear now if you can

126
00:05:36,860 --> 00:05:41,060
trust that to for example what happens

127
00:05:38,930 --> 00:05:46,009
if something this anti aliased you can

128
00:05:41,060 --> 00:05:47,839
see that when we get in here right you

129
00:05:46,009 --> 00:05:52,250
can see how there's a lot of fuzziness

130
00:05:47,839 --> 00:05:55,069
in here that is being used to hide the

131
00:05:52,250 --> 00:05:57,918
fact that there's a harsh line there and

132
00:05:55,069 --> 00:05:59,990
that's again just the artwork being

133
00:05:57,918 --> 00:06:02,539
created in that fashion you end up

134
00:05:59,990 --> 00:06:04,340
getting a much smoother result and the

135
00:06:02,540 --> 00:06:07,819
it's a much more pleasant thing to look

136
00:06:04,339 --> 00:06:10,129
at right it's like it when we actually

137
00:06:07,819 --> 00:06:10,589
zoom out to the full level which I'll be

138
00:06:10,129 --> 00:06:15,569
honest

139
00:06:10,589 --> 00:06:18,329
no idea how to actually do a 100% there

140
00:06:15,569 --> 00:06:19,709
we go you know the hero looks nice and

141
00:06:18,329 --> 00:06:22,019
clean and smooth and you don't notice

142
00:06:19,709 --> 00:06:24,060
those it looks much more natural whereas

143
00:06:22,019 --> 00:06:26,430
everything that was drawn as part of

144
00:06:24,060 --> 00:06:29,280
those cubes anywhere it looks very harsh

145
00:06:26,430 --> 00:06:32,250
and angular now there's too

146
00:06:29,279 --> 00:06:33,689
you know processes that play here and

147
00:06:32,250 --> 00:06:36,750
only one of them is the one that really

148
00:06:33,689 --> 00:06:39,569
concerns us now the first process that's

149
00:06:36,750 --> 00:06:41,160
in play is just general smoothing and

150
00:06:39,569 --> 00:06:43,949
that's something that the artist can be

151
00:06:41,160 --> 00:06:46,380
doing in addition to anti-aliasing it's

152
00:06:43,949 --> 00:06:49,740
not technically really a well as I

153
00:06:46,379 --> 00:06:51,420
shouldn't say technically anti-aliasing

154
00:06:49,740 --> 00:06:53,579
obviously it's just a broad term that's

155
00:06:51,420 --> 00:06:56,220
applied to trying to get rid of the

156
00:06:53,579 --> 00:06:58,759
artifacts that occur when you have too

157
00:06:56,220 --> 00:07:01,470
few samples to represent a particular

158
00:06:58,759 --> 00:07:02,969
function and in this case you know

159
00:07:01,470 --> 00:07:06,450
that's just pretty language for saying

160
00:07:02,970 --> 00:07:08,430
well look if we had such dense pixel

161
00:07:06,449 --> 00:07:12,089
arrays on monitors that your eye could

162
00:07:08,430 --> 00:07:14,009
literally not see them at all right so

163
00:07:12,089 --> 00:07:17,639
the pixels were so tiny that your eye

164
00:07:14,009 --> 00:07:19,829
couldn't make them out in any way then

165
00:07:17,639 --> 00:07:21,360
you know at some level of density you

166
00:07:19,829 --> 00:07:24,899
you know if you imagine that these

167
00:07:21,360 --> 00:07:27,780
pixels are one you know atom wide or

168
00:07:24,899 --> 00:07:29,819
something your eye just has so much less

169
00:07:27,779 --> 00:07:31,379
fidelity that you would just draw

170
00:07:29,819 --> 00:07:33,269
regular lines but they would look

171
00:07:31,379 --> 00:07:34,860
infinitely smooth to you you wouldn't be

172
00:07:33,269 --> 00:07:37,919
able to see any jaggedness because the

173
00:07:34,860 --> 00:07:39,810
resolution would be so high and some day

174
00:07:37,920 --> 00:07:43,319
monitors might get to that point I have

175
00:07:39,810 --> 00:07:46,019
no idea but in the meantime monitors

176
00:07:43,319 --> 00:07:49,500
have much less resolution than your I

177
00:07:46,019 --> 00:07:52,409
can discern your I can discern the

178
00:07:49,500 --> 00:07:54,569
pixels themselves fairly easily on

179
00:07:52,410 --> 00:07:57,810
today's monitors especially at a

180
00:07:54,569 --> 00:08:00,089
resolution like 1920 by 1080 which is a

181
00:07:57,810 --> 00:08:03,329
very common resolution for a game to run

182
00:08:00,089 --> 00:08:07,169
at and don't forget 1920 by 1080 may be

183
00:08:03,329 --> 00:08:09,269
stretched on to a 60-inch monitor or

184
00:08:07,170 --> 00:08:11,670
television I should say in the case of

185
00:08:09,269 --> 00:08:13,729
play in the living room and so you're

186
00:08:11,670 --> 00:08:17,910
going to have these big old pixels

187
00:08:13,730 --> 00:08:21,030
staring at you in that case so again

188
00:08:17,910 --> 00:08:23,040
there's two ways of combating that one

189
00:08:21,029 --> 00:08:23,829
of which is analytical in one of which

190
00:08:23,040 --> 00:08:26,080
is just purely

191
00:08:23,829 --> 00:08:27,669
aesthetic the purely aesthetic one is

192
00:08:26,079 --> 00:08:30,879
you know an artist may decide to just

193
00:08:27,670 --> 00:08:33,009
close up an edge right and that is not a

194
00:08:30,879 --> 00:08:34,689
mathematical process that is nothing to

195
00:08:33,009 --> 00:08:36,789
do with signal processing but it's

196
00:08:34,690 --> 00:08:38,890
nothing to do with analyzing the

197
00:08:36,789 --> 00:08:41,349
coverage or across pixels or anything

198
00:08:38,889 --> 00:08:42,909
it's just them making it smoother so it

199
00:08:41,350 --> 00:08:49,210
looks better right and that's not what

200
00:08:42,909 --> 00:08:50,769
we're going to talk about here we're

201
00:08:49,210 --> 00:08:54,100
talking about the analytical kind of

202
00:08:50,769 --> 00:08:57,460
anti-aliasing which is to say that if we

203
00:08:54,100 --> 00:09:01,840
take a look here how do I get out of

204
00:08:57,460 --> 00:09:03,840
this there we go if we take a look at an

205
00:09:01,840 --> 00:09:06,730
edge like this one in the center here

206
00:09:03,840 --> 00:09:09,070
what we could say about this edge is

207
00:09:06,730 --> 00:09:12,639
that well you know we know that the edge

208
00:09:09,070 --> 00:09:15,010
actually represented something that was

209
00:09:12,639 --> 00:09:16,480
you know not necessarily infinitely

210
00:09:15,009 --> 00:09:19,929
precise because we are talking about

211
00:09:16,480 --> 00:09:22,240
floating-point numbers in a machine but

212
00:09:19,929 --> 00:09:25,149
we certainly knew more about it than

213
00:09:22,240 --> 00:09:26,740
just what we've shown here right and the

214
00:09:25,149 --> 00:09:28,809
reason that we could say that we were

215
00:09:26,740 --> 00:09:31,779
more precise than what is shown here is

216
00:09:28,809 --> 00:09:33,429
because this edge actually started

217
00:09:31,779 --> 00:09:36,039
somewhere sub-pixel

218
00:09:33,429 --> 00:09:39,239
right we knew a floating-point location

219
00:09:36,039 --> 00:09:43,000
that is not constrained to the 19 by

220
00:09:39,240 --> 00:09:44,980
1920 by 1080 grid that was in here

221
00:09:43,000 --> 00:09:47,980
somewhere and we knew that that line

222
00:09:44,980 --> 00:09:50,409
sort of passed through this pixel and it

223
00:09:47,980 --> 00:09:52,810
probably did pass through this pixel a

224
00:09:50,409 --> 00:09:55,059
little bit just not enough to cover the

225
00:09:52,809 --> 00:09:57,759
center of the pixel where the graphics

226
00:09:55,059 --> 00:09:59,709
card typically uses the center of the

227
00:09:57,759 --> 00:10:04,569
pixel to determine whether that pixel is

228
00:09:59,710 --> 00:10:06,700
in or out in terms of rasterization so

229
00:10:04,570 --> 00:10:08,500
what we want is the more analytical

230
00:10:06,700 --> 00:10:11,500
version of anti-aliasing here which is

231
00:10:08,500 --> 00:10:14,919
that as we go through pixels based on

232
00:10:11,500 --> 00:10:16,480
how much of the lot how much the line or

233
00:10:14,919 --> 00:10:20,229
the side of the primitive that we're

234
00:10:16,480 --> 00:10:22,180
actually drawing how much of that is you

235
00:10:20,230 --> 00:10:26,110
know encompasses each individual pixel

236
00:10:22,179 --> 00:10:29,169
we want to blur those pixels such that a

237
00:10:26,110 --> 00:10:32,110
little bit of the the primitive color

238
00:10:29,169 --> 00:10:34,569
contributes there and a little bit of

239
00:10:32,110 --> 00:10:36,399
what was there before you know it shows

240
00:10:34,570 --> 00:10:38,440
through right

241
00:10:36,399 --> 00:10:40,269
and again because we are using a

242
00:10:38,440 --> 00:10:43,810
z-buffer dren during scheme that means

243
00:10:40,269 --> 00:10:46,240
we don't sort the primitives in order so

244
00:10:43,809 --> 00:10:48,849
it's the misnomer to think that we can

245
00:10:46,240 --> 00:10:52,029
do something like drawing things on top

246
00:10:48,850 --> 00:10:53,590
of other things or whatever else in a

247
00:10:52,029 --> 00:10:55,569
normal scenario because the z-buffer is

248
00:10:53,590 --> 00:10:57,670
worth doing a sorting but in our

249
00:10:55,570 --> 00:10:59,680
particular case we're using a depth peel

250
00:10:57,669 --> 00:11:01,479
rendering technique which people who

251
00:10:59,679 --> 00:11:03,699
have been watching the series know how

252
00:11:01,480 --> 00:11:06,930
we're doing that and so we actually have

253
00:11:03,700 --> 00:11:12,670
two options for how we could handle this

254
00:11:06,929 --> 00:11:17,229
and to be completely honest I'm not

255
00:11:12,669 --> 00:11:19,750
exactly sure which one we would want to

256
00:11:17,230 --> 00:11:21,220
do but I'm probably going to go with the

257
00:11:19,750 --> 00:11:24,429
multi sampling one let me explain what I

258
00:11:21,220 --> 00:11:27,250
mean so normally if you just have a Z

259
00:11:24,429 --> 00:11:28,779
before rendering technique that just

260
00:11:27,250 --> 00:11:31,570
does a single pass and you draw your

261
00:11:28,779 --> 00:11:33,250
geometry then what you have to do is you

262
00:11:31,570 --> 00:11:34,600
have to turn on what's called multi

263
00:11:33,250 --> 00:11:35,889
sampling which you've already covered if

264
00:11:34,600 --> 00:11:37,990
you're not familiar to go back and watch

265
00:11:35,889 --> 00:11:39,909
the episode where I cover more detail

266
00:11:37,990 --> 00:11:44,500
but basically what it is it just takes

267
00:11:39,909 --> 00:11:46,779
more than one sample per pixel for when

268
00:11:44,500 --> 00:11:49,419
you're drawing so it's basically over

269
00:11:46,779 --> 00:11:50,019
sampling the screen and it has ways of

270
00:11:49,419 --> 00:11:51,759
doing that

271
00:11:50,019 --> 00:11:53,079
more efficiently than if you were to

272
00:11:51,759 --> 00:11:56,379
just literally render at a higher

273
00:11:53,080 --> 00:11:59,350
resolution so it can get more quality

274
00:11:56,379 --> 00:12:01,779
out of the same amount of work than

275
00:11:59,350 --> 00:12:04,240
doing something like that would then

276
00:12:01,779 --> 00:12:07,029
doing a high-res render and then

277
00:12:04,240 --> 00:12:10,240
blurring it down for example it can

278
00:12:07,029 --> 00:12:13,929
jitter the samples which produces much

279
00:12:10,240 --> 00:12:16,210
nicer results and it can also do

280
00:12:13,929 --> 00:12:19,000
shortcuts where it knows for example if

281
00:12:16,210 --> 00:12:22,120
a particular pixel is entirely covered

282
00:12:19,000 --> 00:12:24,159
by one piece of geometry it can just

283
00:12:22,120 --> 00:12:26,080
only do the work for covering it once

284
00:12:24,159 --> 00:12:27,850
right so it can do sort of

285
00:12:26,080 --> 00:12:30,610
short-circuits to the process that

286
00:12:27,850 --> 00:12:32,110
actually save a lot of work so there's a

287
00:12:30,610 --> 00:12:37,690
lot like I said there's a lot of options

288
00:12:32,110 --> 00:12:39,340
there my allergies have been awful

289
00:12:37,690 --> 00:12:41,950
lately by the way as those of you watch

290
00:12:39,340 --> 00:12:44,670
the series now I've been blowing my nose

291
00:12:41,950 --> 00:12:44,670
continuously

292
00:12:44,720 --> 00:12:48,430
ah it's the worst

293
00:12:54,610 --> 00:12:58,399
so turning on multi-sample a tailless

294
00:12:57,110 --> 00:13:00,169
think it's probably what I'll do just

295
00:12:58,399 --> 00:13:05,209
because it's the most straightforward

296
00:13:00,169 --> 00:13:07,069
and I think might be what we want and

297
00:13:05,210 --> 00:13:09,080
we've already done it before right we

298
00:13:07,070 --> 00:13:10,760
already tried it one time for other

299
00:13:09,080 --> 00:13:12,259
reasons and we decided to go with depth

300
00:13:10,759 --> 00:13:14,779
feeling instead because it was much

301
00:13:12,259 --> 00:13:21,470
better quality for what we were trying

302
00:13:14,779 --> 00:13:23,509
to do but in this case we we could

303
00:13:21,470 --> 00:13:25,670
imagine a technique that was slightly

304
00:13:23,509 --> 00:13:29,750
different we could imagine a technique

305
00:13:25,669 --> 00:13:34,129
that did rasterization of all of our

306
00:13:29,750 --> 00:13:36,409
primitives at their maximum boundary so

307
00:13:34,129 --> 00:13:41,539
normally what happens again if you just

308
00:13:36,409 --> 00:13:43,549
get that centroid rasterization and that

309
00:13:41,539 --> 00:13:45,620
centroid rasterization basically says

310
00:13:43,549 --> 00:13:47,449
either the pixel is in or out based on

311
00:13:45,620 --> 00:13:50,120
whether the primitive encompasses the

312
00:13:47,450 --> 00:13:52,879
center of that pixel what we could do

313
00:13:50,120 --> 00:13:56,360
instead is switch the rendering rule to

314
00:13:52,879 --> 00:13:59,899
say that the if the pixel is covered at

315
00:13:56,360 --> 00:14:03,529
all right so if the in the primitives at

316
00:13:59,899 --> 00:14:06,639
all then we want to render to that pixel

317
00:14:03,529 --> 00:14:09,949
and then we let the depth peeling

318
00:14:06,639 --> 00:14:11,509
algorithm handle the blending of those

319
00:14:09,950 --> 00:14:14,990
right because we're already doing that

320
00:14:11,509 --> 00:14:18,559
death peeling and the only reason I

321
00:14:14,990 --> 00:14:20,330
would say not to do that is because I

322
00:14:18,559 --> 00:14:24,979
don't know how many graphics cards

323
00:14:20,330 --> 00:14:26,870
support changing the rasterization rule

324
00:14:24,980 --> 00:14:30,710
in that fashion

325
00:14:26,870 --> 00:14:33,080
I suspect the best of two new of a

326
00:14:30,710 --> 00:14:35,570
feature I'm not really sure we could

327
00:14:33,080 --> 00:14:41,150
take a brief look to see but I'm pretty

328
00:14:35,570 --> 00:14:46,629
sure that's a OpenGL rasterization will

329
00:14:41,149 --> 00:14:46,629
change ah let's see

330
00:14:47,269 --> 00:14:53,269
[Applause]

331
00:14:50,009 --> 00:14:53,269
ah let's see

332
00:15:04,389 --> 00:15:07,960
see what this is

333
00:15:20,210 --> 00:15:25,910
so this is not I don't think what we

334
00:15:22,639 --> 00:15:34,250
want here it is that's what I'm looking

335
00:15:25,909 --> 00:15:36,230
for so you can see this is the exact the

336
00:15:34,250 --> 00:15:39,860
exact thing we wanted so it's called

337
00:15:36,230 --> 00:15:42,370
conservative raster and so if we were to

338
00:15:39,860 --> 00:15:46,310
use something like this extension right

339
00:15:42,370 --> 00:15:51,470
then what would happen is we could tell

340
00:15:46,309 --> 00:15:54,469
it that we want to fill all pixels

341
00:15:51,470 --> 00:15:55,820
touched by you know a primitive right as

342
00:15:54,470 --> 00:15:57,139
you can see here this essentially adds a

343
00:15:55,820 --> 00:15:59,420
conservative restoration mode where any

344
00:15:57,139 --> 00:16:01,370
pixel is partially covered even if no

345
00:15:59,419 --> 00:16:02,659
sample location is covered is treated as

346
00:16:01,370 --> 00:16:05,120
fully covered and a corresponding

347
00:16:02,659 --> 00:16:07,250
fragment will be shaded right and that's

348
00:16:05,120 --> 00:16:10,460
what we want right it would call our

349
00:16:07,250 --> 00:16:13,909
fragment shader anytime the primitive

350
00:16:10,460 --> 00:16:15,970
passed through that pixel even if it

351
00:16:13,909 --> 00:16:20,769
would not have normally been rasterized

352
00:16:15,970 --> 00:16:20,769
under the normal fill rule right

353
00:16:24,309 --> 00:16:29,559
unfortunately like I said I don't think

354
00:16:26,590 --> 00:16:34,700
this is the kind of thing that's that's

355
00:16:29,559 --> 00:16:37,908
mainstream enough let's find out

356
00:16:34,700 --> 00:16:37,908
[Applause]

357
00:16:40,240 --> 00:16:44,639
[Applause]

358
00:16:42,578 --> 00:16:44,638
I

359
00:16:51,779 --> 00:16:55,620
so I don't even know if it's supported

360
00:16:53,850 --> 00:16:56,370
on AMD you know maybe it is maybe it

361
00:16:55,620 --> 00:17:00,629
isn't

362
00:16:56,370 --> 00:17:02,159
anyway that I'm just tossing that out

363
00:17:00,629 --> 00:17:05,068
there so you know that that was an

364
00:17:02,159 --> 00:17:06,659
option I this graphics card this is an

365
00:17:05,068 --> 00:17:09,750
accreta credibly old machine that we use

366
00:17:06,660 --> 00:17:14,459
here on handmade shirt here oh this

367
00:17:09,750 --> 00:17:16,920
graphics card I was made this extension

368
00:17:14,459 --> 00:17:22,019
is a 2015 this graphics card I think was

369
00:17:16,920 --> 00:17:23,939
made in 2009 I'm not 100% certain if I

370
00:17:22,019 --> 00:17:27,119
know exactly when it came out but I

371
00:17:23,939 --> 00:17:29,550
think it's 2009 so it definitely won't

372
00:17:27,119 --> 00:17:31,949
have anything like this and so that's

373
00:17:29,549 --> 00:17:34,529
why you know even though that's to be

374
00:17:31,950 --> 00:17:38,370
honest probably the most straightforward

375
00:17:34,529 --> 00:17:42,450
thing for us to do and probably would be

376
00:17:38,369 --> 00:17:45,179
the most efficient as well I think we

377
00:17:42,450 --> 00:17:47,370
just can't count on that being available

378
00:17:45,180 --> 00:17:50,039
in most places that we're going to need

379
00:17:47,369 --> 00:17:51,659
it and so I think we're going to have to

380
00:17:50,039 --> 00:17:53,039
go with the more traditional approach

381
00:17:51,660 --> 00:17:57,269
even though it is going to be a little

382
00:17:53,039 --> 00:17:59,279
less efficient and adds a you know an

383
00:17:57,269 --> 00:18:04,430
extra step to our rendering process that

384
00:17:59,279 --> 00:18:10,680
we don't actually want to have whoo-hoo

385
00:18:04,430 --> 00:18:12,000
but that's just the situation so let's

386
00:18:10,680 --> 00:18:14,640
just take a look at how we're going to

387
00:18:12,000 --> 00:18:16,559
do this here it shouldn't be too

388
00:18:14,640 --> 00:18:19,500
complicated but again because it is

389
00:18:16,559 --> 00:18:21,950
dealing with OpenGL and graphics cards

390
00:18:19,500 --> 00:18:25,049
it may take a long time to get working

391
00:18:21,950 --> 00:18:26,819
just because it's always very finicky to

392
00:18:25,049 --> 00:18:28,409
deal with these sorts of things you know

393
00:18:26,819 --> 00:18:30,679
you can't step into the graphics driver

394
00:18:28,410 --> 00:18:33,660
so you can't really and you can't step

395
00:18:30,680 --> 00:18:35,400
into the graphic cards internal logic so

396
00:18:33,660 --> 00:18:37,110
often times it becomes very difficult to

397
00:18:35,400 --> 00:18:39,150
determine why something is wrong when

398
00:18:37,109 --> 00:18:41,699
it's wrong as you know we've been very

399
00:18:39,150 --> 00:18:44,540
lucky on handmade here Oh strangely

400
00:18:41,700 --> 00:18:48,600
enough we have not really had too many

401
00:18:44,539 --> 00:18:50,670
real hang-up bugs with the graphics card

402
00:18:48,599 --> 00:18:52,409
but you know there's always the first

403
00:18:50,670 --> 00:18:53,670
time so any time we're going to be doing

404
00:18:52,410 --> 00:18:55,920
graphics card programming I just want to

405
00:18:53,670 --> 00:18:57,810
make sure to mention that even though

406
00:18:55,920 --> 00:19:03,779
the thing we're doing may be very simple

407
00:18:57,809 --> 00:19:04,950
you may be in for a rocky ride so if you

408
00:19:03,779 --> 00:19:07,769
remember how this

409
00:19:04,950 --> 00:19:10,740
working currently it's very weird by the

410
00:19:07,769 --> 00:19:12,930
way after three weeks to come back to

411
00:19:10,740 --> 00:19:14,519
such huge texts normally when I'm

412
00:19:12,930 --> 00:19:15,870
programming the text is so much tinier I

413
00:19:14,519 --> 00:19:18,660
always forget on handmade here it's so

414
00:19:15,869 --> 00:19:22,799
huge I select oh my god I can barely see

415
00:19:18,660 --> 00:19:24,930
any of the code but anyway so here you

416
00:19:22,799 --> 00:19:25,430
know if we take a look at how this this

417
00:19:24,930 --> 00:19:30,240
works

418
00:19:25,430 --> 00:19:31,799
where is that frame buffer there is the

419
00:19:30,240 --> 00:19:33,599
way that we were doing things is we've

420
00:19:31,799 --> 00:19:35,460
got this created frame buffer call and

421
00:19:33,599 --> 00:19:37,949
we're creating a bunch of frame buffers

422
00:19:35,460 --> 00:19:41,069
that we use for deaf peeling and right

423
00:19:37,950 --> 00:19:42,690
now what happens is we create a couple

424
00:19:41,069 --> 00:19:44,220
different deaf peels and then we blend

425
00:19:42,690 --> 00:19:47,009
those together and that's our way of

426
00:19:44,220 --> 00:19:49,950
getting nice kind of anti-alias sprites

427
00:19:47,009 --> 00:19:52,559
and I was really surprised I'm sure

428
00:19:49,950 --> 00:19:54,090
people have done this before but I was

429
00:19:52,559 --> 00:19:55,559
surprised I had never heard of this I

430
00:19:54,089 --> 00:19:57,480
kind of just thought of it as we were

431
00:19:55,559 --> 00:19:59,099
doing handmade hero and we were not

432
00:19:57,480 --> 00:20:00,960
getting the results I wanted from multi

433
00:19:59,099 --> 00:20:05,009
sampling and I was like what if we do a

434
00:20:00,960 --> 00:20:07,019
deaf peeled approach I've never heard

435
00:20:05,009 --> 00:20:09,299
anyone advocated deaf peel approach for

436
00:20:07,019 --> 00:20:11,970
sprite rendering but I tell you I really

437
00:20:09,299 --> 00:20:15,509
like it and it seems to be a pretty

438
00:20:11,970 --> 00:20:18,390
great way to get you know really nice

439
00:20:15,509 --> 00:20:21,390
sprite compositing without having to do

440
00:20:18,390 --> 00:20:23,790
the sorting at all and it allows you to

441
00:20:21,390 --> 00:20:26,130
do a lot of special effects and have

442
00:20:23,789 --> 00:20:27,659
things like things fade out just work

443
00:20:26,130 --> 00:20:30,690
and you don't have to sort your

444
00:20:27,660 --> 00:20:33,269
transparent objects at all which is nuts

445
00:20:30,690 --> 00:20:36,000
I mean it's just it it seems like a

446
00:20:33,269 --> 00:20:37,769
really good way to use the GPU resources

447
00:20:36,000 --> 00:20:40,799
that you're inherently typically not

448
00:20:37,769 --> 00:20:43,500
using in a 2-d game because you know in

449
00:20:40,799 --> 00:20:46,440
a 2-d game you don't have to do as much

450
00:20:43,500 --> 00:20:47,730
work as in a you know 3d photo realistic

451
00:20:46,440 --> 00:20:50,549
game you know if you take a look at

452
00:20:47,730 --> 00:20:53,519
something like battlefield 1 and you or

453
00:20:50,549 --> 00:20:57,509
doom the latest version of doom that's

454
00:20:53,519 --> 00:21:00,569
the original version soon you know they

455
00:20:57,509 --> 00:21:01,920
just require tremendous amount of GPU

456
00:21:00,569 --> 00:21:06,179
power and gamers have these machines

457
00:21:01,920 --> 00:21:07,980
capable of processing all of that and

458
00:21:06,180 --> 00:21:09,180
when we take a look at a 2d game where

459
00:21:07,980 --> 00:21:10,799
like well where are we going to use let

460
00:21:09,180 --> 00:21:15,150
CPU power you know and we typically

461
00:21:10,799 --> 00:21:16,859
don't but you know this is a pretty good

462
00:21:15,150 --> 00:21:17,200
example of a way you could use it you

463
00:21:16,859 --> 00:21:19,329
know

464
00:21:17,200 --> 00:21:20,830
you can use the extra GP part DuPont a

465
00:21:19,329 --> 00:21:22,470
bunch of death deals and then you can

466
00:21:20,829 --> 00:21:24,849
have this really nice compositing so

467
00:21:22,470 --> 00:21:27,759
anyway I'm surprised that I haven't

468
00:21:24,849 --> 00:21:30,129
heard more people advocate that but

469
00:21:27,759 --> 00:21:32,048
maybe just because all the graphics

470
00:21:30,130 --> 00:21:37,179
programmers are busy writing 3d engines

471
00:21:32,048 --> 00:21:38,619
that's probably why so anyway you know

472
00:21:37,179 --> 00:21:40,450
2d probably isn't that interesting to

473
00:21:38,619 --> 00:21:42,668
them at this point right they're too

474
00:21:40,450 --> 00:21:46,569
busy doing like Fox will comb tracing or

475
00:21:42,669 --> 00:21:50,288
something like this anyway so if we take

476
00:21:46,569 --> 00:21:51,609
a look at what was happening in our

477
00:21:50,288 --> 00:21:54,129
source code here we have the create

478
00:21:51,609 --> 00:21:57,009
frame buffer call and we left in the

479
00:21:54,130 --> 00:21:59,289
ability to create multi sampling so you

480
00:21:57,009 --> 00:22:02,288
can see here we have the ability to

481
00:21:59,288 --> 00:22:06,819
create a multi sampled frame buffer

482
00:22:02,288 --> 00:22:12,490
texture so if we want to we can do a

483
00:22:06,819 --> 00:22:14,678
pass that have a you know a multi

484
00:22:12,490 --> 00:22:17,200
sampling turned on and it does a resolve

485
00:22:14,679 --> 00:22:19,450
of that path and I don't know I think we

486
00:22:17,200 --> 00:22:20,919
unfortunately already delete deleted the

487
00:22:19,450 --> 00:22:25,330
code

488
00:22:20,919 --> 00:22:27,759
oh no we did so we've got the frame

489
00:22:25,329 --> 00:22:29,349
buffer code here too that we used when

490
00:22:27,759 --> 00:22:32,319
we originally did our frame buffer

491
00:22:29,349 --> 00:22:34,058
compositing - this was not remember

492
00:22:32,319 --> 00:22:35,980
Kramer for resolve so the thing that

493
00:22:34,058 --> 00:22:38,288
takes the multi sample buffer and turns

494
00:22:35,980 --> 00:22:39,278
it into a regular buffer that has only

495
00:22:38,288 --> 00:22:42,278
one sample per pixel

496
00:22:39,278 --> 00:22:44,648
that's this call right here and that is

497
00:22:42,278 --> 00:22:47,609
great because that means we can just use

498
00:22:44,648 --> 00:22:51,009
this code again and be on our way

499
00:22:47,609 --> 00:22:53,229
so all I want to do here is take exactly

500
00:22:51,009 --> 00:22:56,558
the same pipeline that we are using at

501
00:22:53,230 --> 00:22:59,860
the moment but change it so that when we

502
00:22:56,558 --> 00:23:02,230
initially render the first the closest

503
00:22:59,859 --> 00:23:04,479
depth field right so the death field

504
00:23:02,230 --> 00:23:09,099
that's the closest to us which is the

505
00:23:04,480 --> 00:23:13,298
first one that one since it will have

506
00:23:09,099 --> 00:23:17,019
the hard edges on it I just want to see

507
00:23:13,298 --> 00:23:21,099
if I can take that one render just that

508
00:23:17,019 --> 00:23:24,579
peel with multi sampling blitt it down

509
00:23:21,099 --> 00:23:27,519
to a regular buffer and then do the rest

510
00:23:24,579 --> 00:23:30,868
of the death peels the same right so so

511
00:23:27,519 --> 00:23:35,638
I'm essentially just literally taking

512
00:23:30,868 --> 00:23:37,678
and compositing the multi-sample that

513
00:23:35,638 --> 00:23:39,388
one first all the stable slice down to a

514
00:23:37,679 --> 00:23:42,960
regular buffer and then letting the rest

515
00:23:39,388 --> 00:23:45,298
of the process repeat as normal so I'm

516
00:23:42,960 --> 00:23:47,249
not suggesting that we do multi sampling

517
00:23:45,298 --> 00:23:48,690
on all the buffers and the reason for

518
00:23:47,249 --> 00:23:49,470
that is because it doesn't seem

519
00:23:48,690 --> 00:23:52,710
necessary

520
00:23:49,470 --> 00:23:54,600
remember our depth peel is taking pixels

521
00:23:52,710 --> 00:23:57,149
that are like stepping backwards through

522
00:23:54,599 --> 00:24:00,269
the depth buffer so the first thing you

523
00:23:57,148 --> 00:24:04,558
draw is the one that is the pixel that

524
00:24:00,269 --> 00:24:06,569
is front most to the eye then everything

525
00:24:04,558 --> 00:24:10,558
you draw and subsequent death field is

526
00:24:06,569 --> 00:24:12,868
behind that pixel so in my mind that

527
00:24:10,558 --> 00:24:15,269
means that the jagged edges are going to

528
00:24:12,868 --> 00:24:17,009
be primarily in that for a step field

529
00:24:15,269 --> 00:24:19,440
because everything else has to be

530
00:24:17,009 --> 00:24:22,798
something that was behind one of those

531
00:24:19,440 --> 00:24:24,990
jagged edges right and so the chances

532
00:24:22,798 --> 00:24:27,538
that you could tell two jagged edges

533
00:24:24,990 --> 00:24:29,909
that pass through each other in some

534
00:24:27,538 --> 00:24:32,700
weird way you'd have to be able to tell

535
00:24:29,909 --> 00:24:34,559
if that jagged edge was jagged only in

536
00:24:32,700 --> 00:24:37,850
that one pixel where it's eclipsed by

537
00:24:34,558 --> 00:24:41,148
something in front of it partially right

538
00:24:37,849 --> 00:24:44,490
and that doesn't seem too problematic

539
00:24:41,148 --> 00:24:46,918
now that doesn't mean that it's not

540
00:24:44,490 --> 00:24:48,679
problematic because you could imagine a

541
00:24:46,919 --> 00:24:53,509
circumstance in which you would see it

542
00:24:48,679 --> 00:24:53,509
for example where you would see it is

543
00:24:53,749 --> 00:25:00,629
where we have transparent particles the

544
00:24:57,839 --> 00:25:04,849
if a transparent particle passed in

545
00:25:00,628 --> 00:25:08,939
front of like a line one of the

546
00:25:04,849 --> 00:25:11,248
primitive lines that would be a you know

547
00:25:08,940 --> 00:25:18,450
you know that would still be jagged

548
00:25:11,249 --> 00:25:21,659
right so if we wanted to to eliminate

549
00:25:18,450 --> 00:25:25,230
those artifacts as well we could multi

550
00:25:21,659 --> 00:25:27,450
sample everything and so that's another

551
00:25:25,230 --> 00:25:35,329
option and probably one we would want to

552
00:25:27,450 --> 00:25:37,889
also allow and so what I would say is I

553
00:25:35,329 --> 00:25:43,029
don't know that there's any real reason

554
00:25:37,888 --> 00:25:45,219
to ever multi sample the

555
00:25:43,029 --> 00:25:47,559
positing phase so when we composite our

556
00:25:45,220 --> 00:25:51,309
def peals together I don't think there

557
00:25:47,559 --> 00:25:53,710
is any reason to keep multi sampling at

558
00:25:51,309 --> 00:25:56,349
that point that may just be excessive

559
00:25:53,710 --> 00:25:59,740
but we may want to allow the user to

560
00:25:56,349 --> 00:26:02,949
specify or rather the settings of the

561
00:25:59,740 --> 00:26:05,500
game to specify how many multi sample

562
00:26:02,950 --> 00:26:07,509
passes we do so def feeling can be done

563
00:26:05,500 --> 00:26:09,730
where it's like how many def peels do

564
00:26:07,509 --> 00:26:13,269
you want to do and then it can also be

565
00:26:09,730 --> 00:26:15,009
how many of those def peels should be

566
00:26:13,269 --> 00:26:20,740
multi sampled versus how many are just

567
00:26:15,009 --> 00:26:22,450
straight one-to-one pixels alright so

568
00:26:20,740 --> 00:26:25,539
let's take a look at what we would have

569
00:26:22,450 --> 00:26:27,309
to do here so we know where our depth

570
00:26:25,539 --> 00:26:30,490
feel occurs right our death peel is

571
00:26:27,309 --> 00:26:32,529
right here so when we do our render

572
00:26:30,490 --> 00:26:35,740
group stuff you know here is us doing

573
00:26:32,529 --> 00:26:38,230
our rendering as we go through here we

574
00:26:35,740 --> 00:26:41,529
you know every time we hit this code

575
00:26:38,230 --> 00:26:44,140
path where we do the end peels we know

576
00:26:41,529 --> 00:26:46,359
that we finished one so if we wanted to

577
00:26:44,140 --> 00:26:49,840
every time we finished we could do that

578
00:26:46,359 --> 00:26:53,619
blitt resolve right and furthermore when

579
00:26:49,839 --> 00:26:55,720
we're at the start code right here when

580
00:26:53,619 --> 00:26:59,979
we're at the start code we could also at

581
00:26:55,720 --> 00:27:02,410
that point do one too you know we could

582
00:26:59,980 --> 00:27:04,509
if we want to do something at that point

583
00:27:02,410 --> 00:27:06,340
that was like switched to a multi sample

584
00:27:04,509 --> 00:27:11,410
buffer for not already on one or other

585
00:27:06,339 --> 00:27:13,089
things like that so I'm not sure like I

586
00:27:11,410 --> 00:27:14,830
said I'm not really sure how we want to

587
00:27:13,089 --> 00:27:16,959
do this and I'm also not sure if there's

588
00:27:14,829 --> 00:27:20,199
any value in to persisting the multi

589
00:27:16,960 --> 00:27:23,890
sampling in through the compositing

590
00:27:20,200 --> 00:27:29,920
phase so let's start I guess with the

591
00:27:23,890 --> 00:27:34,090
simplest thing to do that seems like it

592
00:27:29,920 --> 00:27:35,800
makes the most sense to me because yeah

593
00:27:34,089 --> 00:27:39,730
like you can see here where we do our

594
00:27:35,799 --> 00:27:43,230
let me let me go ahead and load these

595
00:27:39,730 --> 00:27:48,759
both up at the same time here is the

596
00:27:43,230 --> 00:27:50,620
final sort of composite that we do so

597
00:27:48,759 --> 00:27:54,509
you can see here we you know we

598
00:27:50,619 --> 00:27:56,859
basically do our stack shading here and

599
00:27:54,509 --> 00:27:58,808
yeah we don't really neat you know

600
00:27:56,859 --> 00:28:00,039
this is just straight alpha blending

601
00:27:58,808 --> 00:28:01,990
right

602
00:28:00,039 --> 00:28:04,990
it's just alpha blending one on top of

603
00:28:01,990 --> 00:28:07,298
the other on top of the other and so one

604
00:28:04,990 --> 00:28:10,829
question that I have here is you know if

605
00:28:07,298 --> 00:28:15,129
the GL blip frame buffer call actually

606
00:28:10,829 --> 00:28:17,740
had alpha compositing built into it so

607
00:28:15,130 --> 00:28:21,730
if you could do a geo blip flame buffer

608
00:28:17,740 --> 00:28:23,829
with blending enabled that would

609
00:28:21,730 --> 00:28:26,769
probably be the cleanest way to do this

610
00:28:23,829 --> 00:28:30,129
we just loop over and instead of ever

611
00:28:26,769 --> 00:28:32,259
running this shader at all we just do GL

612
00:28:30,130 --> 00:28:35,110
blip frame buffer for each frame buffer

613
00:28:32,259 --> 00:28:39,849
onto the back onto the main frame buffer

614
00:28:35,109 --> 00:28:42,279
with alpha compositing on but I don't

615
00:28:39,849 --> 00:28:46,149
know that there's any way to really do

616
00:28:42,279 --> 00:28:51,668
that so I don't think we can I think

617
00:28:46,150 --> 00:28:54,759
blitz lane buffer only does copies but

618
00:28:51,669 --> 00:28:57,340
don't quote me on that so let's see here

619
00:28:54,759 --> 00:29:00,369
lipid transfers or rectangle yes it's

620
00:28:57,339 --> 00:29:02,259
just a pixel transfer so it's not gonna

621
00:29:00,369 --> 00:29:05,918
it's not going to go through the

622
00:29:02,259 --> 00:29:10,359
blending buffer it's not to go through

623
00:29:05,919 --> 00:29:14,530
the blending algorithm at all so that's

624
00:29:10,359 --> 00:29:16,629
you know there's really nothing we can

625
00:29:14,529 --> 00:29:19,418
do about that

626
00:29:16,630 --> 00:29:23,260
so again we're forced to kind of think

627
00:29:19,419 --> 00:29:25,929
about this from the standpoint of when

628
00:29:23,259 --> 00:29:28,929
we actually go to composite these we

629
00:29:25,929 --> 00:29:31,798
probably want to do something a little

630
00:29:28,929 --> 00:29:31,798
smarter now

631
00:29:37,440 --> 00:29:47,970
I am loathe to create a separate buffer

632
00:29:44,460 --> 00:29:51,058
just for mixdown but that seems like

633
00:29:47,970 --> 00:29:53,819
what we'll have to do meaning you know

634
00:29:51,058 --> 00:29:56,038
what we probably need to do here if

635
00:29:53,819 --> 00:29:58,648
we're just going to go whole hog on it

636
00:29:56,038 --> 00:30:00,148
is in this open geo frame buffer where

637
00:29:58,648 --> 00:30:03,418
we've got frame buffer handle color

638
00:30:00,148 --> 00:30:06,418
handle and death handle we would have to

639
00:30:03,419 --> 00:30:10,169
have one more handle here which is the

640
00:30:06,419 --> 00:30:13,710
like you know composited handle or

641
00:30:10,169 --> 00:30:16,080
something I'm not or resolved handle

642
00:30:13,710 --> 00:30:17,909
right the thing which takes the texture

643
00:30:16,079 --> 00:30:19,199
that's been multi sampled and turns into

644
00:30:17,909 --> 00:30:23,879
something that has a middle of exampled

645
00:30:19,200 --> 00:30:26,190
we need to place for that to go and so

646
00:30:23,878 --> 00:30:28,428
if we want to do the composite in one

647
00:30:26,190 --> 00:30:31,259
pass which maybe we don't but if we do

648
00:30:28,429 --> 00:30:33,090
then we would need to do it that way the

649
00:30:31,259 --> 00:30:34,889
other thing we could do is we could read

650
00:30:33,089 --> 00:30:38,099
directly from the multi sample buffer in

651
00:30:34,888 --> 00:30:39,658
the shader the problem with that is that

652
00:30:38,099 --> 00:30:41,668
I don't think there's any way to

653
00:30:39,659 --> 00:30:43,769
actually read from a multi sample buffer

654
00:30:41,669 --> 00:30:45,450
in a shader without knowing how many

655
00:30:43,769 --> 00:30:48,269
samples are actually are and looping

656
00:30:45,450 --> 00:30:52,288
over them which could be a lot less

657
00:30:48,269 --> 00:30:55,470
efficient then letting the graphics card

658
00:30:52,288 --> 00:30:57,179
do its built-in resolve which knows

659
00:30:55,470 --> 00:31:00,298
exactly how to do it the most efficient

660
00:30:57,179 --> 00:31:03,899
way so I am a little nervous about going

661
00:31:00,298 --> 00:31:06,119
that one as well so just thinking about

662
00:31:03,898 --> 00:31:08,699
it I would have to say like I guess

663
00:31:06,119 --> 00:31:14,628
let's try the more straightforward one

664
00:31:08,700 --> 00:31:18,710
first which is Glu int resolve handle

665
00:31:14,628 --> 00:31:23,819
and then in here where we are doing our

666
00:31:18,710 --> 00:31:27,750
creation so where we do our creation

667
00:31:23,819 --> 00:31:31,609
we're going to want to put it in here

668
00:31:27,750 --> 00:31:31,609
now I think

669
00:31:33,990 --> 00:31:39,099
one thing I do want to do and I kind of

670
00:31:36,369 --> 00:31:41,979
meant to do this before is the filter

671
00:31:39,099 --> 00:31:51,369
type clamp to edge stuff is always the

672
00:31:41,980 --> 00:31:56,470
same for any of these and so I probably

673
00:31:51,369 --> 00:32:02,500
want to say in here set default frame

674
00:31:56,470 --> 00:32:06,490
buffer texture parameters I probably

675
00:32:02,500 --> 00:32:18,339
just want to grab these and put them

676
00:32:06,490 --> 00:32:23,920
there and I'll just take that filter

677
00:32:18,339 --> 00:32:29,589
type and I'll pass that in but other

678
00:32:23,920 --> 00:32:31,120
than that it just works right and that

679
00:32:29,589 --> 00:32:32,740
way we don't have that duplicated in

680
00:32:31,119 --> 00:32:37,689
those two places so if we want to change

681
00:32:32,740 --> 00:32:42,039
those parameters we can later similarly

682
00:32:37,690 --> 00:32:44,200
we could look at this a slot 2d

683
00:32:42,039 --> 00:32:46,059
multisample bit here you can see that

684
00:32:44,200 --> 00:32:50,460
these two are basically the same as well

685
00:32:46,059 --> 00:32:53,529
the only difference is the setting for

686
00:32:50,460 --> 00:32:56,350
right like what the what the component

687
00:32:53,529 --> 00:33:00,299
is and that's really it everything else

688
00:32:56,349 --> 00:33:07,409
is exactly the same so we could actually

689
00:33:00,299 --> 00:33:13,000
do that as well we could say create

690
00:33:07,410 --> 00:33:16,500
frame buffer texture bat and we could

691
00:33:13,000 --> 00:33:20,099
just pull this whole thing out here

692
00:33:16,500 --> 00:33:20,099
maybe I do it like this

693
00:33:20,980 --> 00:33:26,880
[Applause]

694
00:33:22,769 --> 00:33:31,750
and maybe I'll call the frame buffer

695
00:33:26,880 --> 00:33:37,030
text image like that so yeah so in this

696
00:33:31,750 --> 00:33:41,380
case we just need to know the slot and

697
00:33:37,029 --> 00:33:44,049
then we need to know the format that we

698
00:33:41,380 --> 00:33:55,690
want that texture to be so that's going

699
00:33:44,049 --> 00:33:57,909
to be you know just right here and I

700
00:33:55,690 --> 00:34:02,470
guess what's a little bit confusing

701
00:33:57,910 --> 00:34:07,930
about what's a little bit confusing

702
00:34:02,470 --> 00:34:12,369
about this is the default frame buffer

703
00:34:07,930 --> 00:34:18,039
texture format has that srgb that weird

704
00:34:12,369 --> 00:34:19,239
srgb problem I forgot about this is

705
00:34:18,039 --> 00:34:21,429
going to cause us a little bit of an

706
00:34:19,239 --> 00:34:25,449
issue here so for whatever reason this

707
00:34:21,429 --> 00:34:30,429
card cannot do srgb rendering with multi

708
00:34:25,449 --> 00:34:32,230
sampling on which is very strange and

709
00:34:30,429 --> 00:34:36,700
supposedly not even how it's ever

710
00:34:32,230 --> 00:34:40,000
supposed to be but it just is we don't

711
00:34:36,699 --> 00:34:46,599
actually know why the driver refuses to

712
00:34:40,000 --> 00:34:48,130
create a surface in that way so yeah we

713
00:34:46,599 --> 00:34:50,739
have the solution to that which is we do

714
00:34:48,130 --> 00:34:52,539
the squares and square roots and so we

715
00:34:50,739 --> 00:34:54,729
can force it into that mode if we want

716
00:34:52,539 --> 00:34:56,168
to and that's fine but I forgot about

717
00:34:54,730 --> 00:34:57,429
that it will not it means that we will

718
00:34:56,168 --> 00:34:58,960
not be able to test the rendering

719
00:34:57,429 --> 00:35:01,119
perfectly on this machine because of

720
00:34:58,960 --> 00:35:04,240
course we can't test multi sampling and

721
00:35:01,119 --> 00:35:13,769
srgb together which is a bit of a bummer

722
00:35:04,239 --> 00:35:18,099
to say the least well putting in two

723
00:35:13,769 --> 00:35:19,719
anyway so yeah looking at this though I

724
00:35:18,099 --> 00:35:21,039
guess now that I think about it pulling

725
00:35:19,719 --> 00:35:22,809
this out is a little bit trickier

726
00:35:21,039 --> 00:35:26,139
because when we want to do the depth

727
00:35:22,809 --> 00:35:29,590
version there's that switch that happens

728
00:35:26,139 --> 00:35:33,670
here where you know you're you're sort

729
00:35:29,590 --> 00:35:35,050
of picking a different one of these in

730
00:35:33,670 --> 00:35:35,559
either case which would means they would

731
00:35:35,050 --> 00:35:38,890
have to

732
00:35:35,559 --> 00:35:42,339
half the both both things in that they

733
00:35:38,889 --> 00:35:43,478
wanted both this and this because both

734
00:35:42,338 --> 00:35:53,798
of those two things will change

735
00:35:43,478 --> 00:35:55,058
depending on the circumstance on the

736
00:35:53,798 --> 00:35:56,650
other hand I guess they don't really

737
00:35:55,059 --> 00:35:58,390
need they only need to pass one of them

738
00:35:56,650 --> 00:36:01,689
technically because this part right here

739
00:35:58,389 --> 00:36:03,848
is not relevant since we only pass a

740
00:36:01,688 --> 00:36:05,588
zero you could really pass anything you

741
00:36:03,849 --> 00:36:08,650
wanted for these two presumably and it

742
00:36:05,588 --> 00:36:10,599
wouldn't be a problem so we really only

743
00:36:08,650 --> 00:36:12,999
need to pass one thing in and that thing

744
00:36:10,599 --> 00:36:16,630
would be this format so it suppose

745
00:36:12,998 --> 00:36:19,688
that's actually fine all right so that's

746
00:36:16,630 --> 00:36:25,479
that's all good all right so there's the

747
00:36:19,688 --> 00:36:27,038
format that it's going to use and what I

748
00:36:25,478 --> 00:36:28,478
could do here as well as I could

749
00:36:27,039 --> 00:36:34,809
preserve this a little bit and just say

750
00:36:28,478 --> 00:36:37,718
format and look to see if it is a depth

751
00:36:34,809 --> 00:36:40,298
format and if it is a depth format half

752
00:36:37,719 --> 00:36:44,889
the depth component just to make sure

753
00:36:40,298 --> 00:36:53,708
that the driver doesn't complain so

754
00:36:44,889 --> 00:36:56,259
there we go and we'll just grab out that

755
00:36:53,708 --> 00:36:58,268
the wrong way so we'll just look to see

756
00:36:56,259 --> 00:36:59,679
hey are they you know it's just the

757
00:36:58,268 --> 00:37:02,318
depth one that they're creating if it is

758
00:36:59,679 --> 00:37:04,959
a diplomat they're creating then let's

759
00:37:02,318 --> 00:37:06,159
go ahead and give the driver the right

760
00:37:04,958 --> 00:37:07,629
information at what we would be

761
00:37:06,159 --> 00:37:09,719
submitting if you're spamming just in

762
00:37:07,630 --> 00:37:12,059
case it does area checking there and

763
00:37:09,719 --> 00:37:14,349
thinks things have gone horribly wrong

764
00:37:12,059 --> 00:37:21,150
all right so we've also got a width and

765
00:37:14,349 --> 00:37:21,150
a height and we've got a slot

766
00:37:25,829 --> 00:37:30,849
so what we could do here in addition is

767
00:37:29,139 --> 00:37:33,068
we could kind of bundle all this

768
00:37:30,849 --> 00:37:36,190
together and say well the jhen texture

769
00:37:33,068 --> 00:37:43,210
is part of it we could do two so all of

770
00:37:36,190 --> 00:37:44,409
this could go in here as well and then

771
00:37:43,210 --> 00:37:47,710
what would happen is we just have a

772
00:37:44,409 --> 00:38:01,629
return value right we'd have something

773
00:37:47,710 --> 00:38:03,909
like this and then in theory we can

774
00:38:01,630 --> 00:38:10,329
replace all of these pieces of code with

775
00:38:03,909 --> 00:38:17,798
this so here when we're creating the

776
00:38:10,329 --> 00:38:19,589
color handle we can just say why don't

777
00:38:17,798 --> 00:38:22,119
you make us one of those please

778
00:38:19,588 --> 00:38:32,679
wait why is the slot past the second

779
00:38:22,119 --> 00:38:34,838
time that was the that was just silly so

780
00:38:32,679 --> 00:38:49,750
in theory yet all of that can go away

781
00:38:34,838 --> 00:38:53,679
and then we really just have this now

782
00:38:49,750 --> 00:38:57,099
the filter type I has to get passed in

783
00:38:53,679 --> 00:38:59,528
as well unfortunately here because again

784
00:38:57,099 --> 00:39:01,838
that's based entirely on the flag now I

785
00:38:59,528 --> 00:39:03,460
suppose we could pass those flags in and

786
00:39:01,838 --> 00:39:08,409
have this do the switch on the filter

787
00:39:03,460 --> 00:39:11,500
type and yeah I mean that could in

788
00:39:08,409 --> 00:39:13,239
theory also because that would instead

789
00:39:11,500 --> 00:39:17,440
of passing the slot it would just do

790
00:39:13,239 --> 00:39:19,899
that automatically so I don't know look

791
00:39:17,440 --> 00:39:23,349
yeah maybe that's a good idea not I

792
00:39:19,900 --> 00:39:24,940
don't know that it is though so because

793
00:39:23,349 --> 00:39:27,250
we're going to need to create both for

794
00:39:24,940 --> 00:39:28,929
the multi samples one that is what the

795
00:39:27,250 --> 00:39:31,750
sample and one that's not so at that

796
00:39:28,929 --> 00:39:33,608
point that seems less good so I'm going

797
00:39:31,750 --> 00:39:35,599
to go ahead and say let's get rid of fat

798
00:39:33,608 --> 00:39:38,828
and put the filter type in there

799
00:39:35,599 --> 00:39:47,568
so that we have slot width height format

800
00:39:38,829 --> 00:39:51,579
and filter type and then I think that

801
00:39:47,568 --> 00:39:51,579
should be good to go right

802
00:40:01,809 --> 00:40:04,940
[Applause]

803
00:40:08,748 --> 00:40:14,939
all right so we can replace this one as

804
00:40:12,539 --> 00:40:18,210
well exactly the same way here's the

805
00:40:14,940 --> 00:40:20,099
results deft handle that we want set so

806
00:40:18,210 --> 00:40:22,048
we just want to do frame buffer text

807
00:40:20,099 --> 00:40:25,349
image for this one as well with all the

808
00:40:22,048 --> 00:40:28,170
same options except now instead of

809
00:40:25,349 --> 00:40:29,880
passing the frame buffer texture format

810
00:40:28,170 --> 00:40:33,239
we actually just want the depth

811
00:40:29,880 --> 00:40:35,999
component conversion great and we can

812
00:40:33,239 --> 00:40:37,619
get rid of the rest of these and now

813
00:40:35,998 --> 00:40:38,998
we've got a lot less duplicated code in

814
00:40:37,619 --> 00:40:42,479
there which is nice

815
00:40:38,998 --> 00:40:43,949
easier to read and also has the

816
00:40:42,478 --> 00:40:47,278
advantage of if we want to change it

817
00:40:43,949 --> 00:40:48,929
once we we know how to do it and of

818
00:40:47,278 --> 00:40:50,728
course as you may suspect the reason

819
00:40:48,929 --> 00:40:52,199
that I did that was because now we have

820
00:40:50,728 --> 00:40:57,960
to create a third one and I felt like

821
00:40:52,199 --> 00:40:59,189
copying something three times definitely

822
00:40:57,960 --> 00:41:03,088
gets the point where it should be pulled

823
00:40:59,190 --> 00:41:05,429
out into something reusable so what we

824
00:41:03,088 --> 00:41:08,578
want to do now is say well okay

825
00:41:05,429 --> 00:41:11,429
in the case where we're going to do a

826
00:41:08,579 --> 00:41:15,180
multi sample frame buffer let's just

827
00:41:11,429 --> 00:41:17,429
create a resolved buffer specifically

828
00:41:15,179 --> 00:41:21,690
for that so the resolved buffer is going

829
00:41:17,429 --> 00:41:23,759
to be the same as the color buffer right

830
00:41:21,690 --> 00:41:26,338
the only difference is it's not going to

831
00:41:23,759 --> 00:41:28,728
be multi sampled so this slot here is

832
00:41:26,338 --> 00:41:31,170
always going to be zero texture 2d

833
00:41:28,728 --> 00:41:33,328
instead of potentially being multi

834
00:41:31,170 --> 00:41:35,219
sampled other than that it's going to be

835
00:41:33,329 --> 00:41:37,769
exactly the same right there's going to

836
00:41:35,219 --> 00:41:39,889
be no difference between the two it's

837
00:41:37,768 --> 00:41:45,179
going to be it's going to be identical

838
00:41:39,889 --> 00:41:48,629
so yeah this case we don't ever need to

839
00:41:45,179 --> 00:41:51,210
attach it to a frame buffer well I guess

840
00:41:48,630 --> 00:41:53,519
we probably do we probably have to

841
00:41:51,210 --> 00:41:55,978
create yet another frame buffer here

842
00:41:53,518 --> 00:41:58,318
because we're going to have to basically

843
00:41:55,978 --> 00:42:02,478
resolve it to something and without a

844
00:41:58,318 --> 00:42:06,028
frame buffer we are unable to resolve it

845
00:42:02,478 --> 00:42:09,389
so we need two things we need resolve

846
00:42:06,028 --> 00:42:11,920
frame buffer handle and we need resolve

847
00:42:09,389 --> 00:42:15,179
color handle right

848
00:42:11,920 --> 00:42:15,179
[Applause]

849
00:42:16,250 --> 00:42:31,380
so what we want to do here is check the

850
00:42:29,789 --> 00:42:34,170
frame buffer for completeness at this

851
00:42:31,380 --> 00:42:41,460
point and then this one also will get

852
00:42:34,170 --> 00:42:43,700
checked for completeness for good

853
00:42:41,460 --> 00:42:46,829
measure let's go ahead and turn this off

854
00:42:43,699 --> 00:42:48,960
I so basically what I'm doing curious of

855
00:42:46,829 --> 00:42:50,789
saying okay this is creating the initial

856
00:42:48,960 --> 00:42:52,798
frame buffer and then if it's multi

857
00:42:50,789 --> 00:42:55,710
sampled I need to create another frame

858
00:42:52,798 --> 00:42:58,400
buffer right and that frame buffer is

859
00:42:55,710 --> 00:43:01,590
used for nothing other than the resolve

860
00:42:58,400 --> 00:43:01,590
[Applause]

861
00:43:04,519 --> 00:43:09,298
we do the resolve color handle the same

862
00:43:07,108 --> 00:43:11,098
way we did the other handles and then we

863
00:43:09,298 --> 00:43:15,449
want to do is attach it to this frame

864
00:43:11,099 --> 00:43:16,890
buffer again not using the slot because

865
00:43:15,449 --> 00:43:23,789
we don't want it to be mobile sampled we

866
00:43:16,889 --> 00:43:25,048
want to be texture 2d always and now we

867
00:43:23,789 --> 00:43:28,858
have a frame before we can use for that

868
00:43:25,048 --> 00:43:30,838
purpose right so the first thing we do

869
00:43:28,858 --> 00:43:32,369
is run this without the multi sampling

870
00:43:30,838 --> 00:43:34,289
to make sure that that still works okay

871
00:43:32,369 --> 00:43:35,548
right because we made some changes there

872
00:43:34,289 --> 00:43:39,509
and I want to make sure that we don't

873
00:43:35,548 --> 00:43:40,798
have any issues with it right and so now

874
00:43:39,510 --> 00:43:44,430
what I'm going to do is try to turn on

875
00:43:40,798 --> 00:43:46,259
the multi sampling and again

876
00:43:44,429 --> 00:43:49,739
unfortunately that's going to break some

877
00:43:46,260 --> 00:43:51,210
stuff now what I need to do here is we

878
00:43:49,739 --> 00:43:56,088
still need to do the testing that we

879
00:43:51,210 --> 00:44:01,309
were doing before when we init OpenGL so

880
00:43:56,088 --> 00:44:01,308
this allowed GPU srgb

881
00:44:07,139 --> 00:44:19,170
I guess we have that off permanently so

882
00:44:17,429 --> 00:44:21,469
I guess that won't create a problem for

883
00:44:19,170 --> 00:44:26,099
us oh right we did turn that off because

884
00:44:21,469 --> 00:44:28,439
of the sRGB inaccuracy because our

885
00:44:26,099 --> 00:44:31,769
sprites are not currently srgb they're

886
00:44:28,440 --> 00:44:36,380
actually squared so I guess that's fine

887
00:44:31,769 --> 00:44:39,630
so I guess we're okay I yeah all right

888
00:44:36,380 --> 00:44:42,980
so everything should work peachy then

889
00:44:39,630 --> 00:44:46,860
because we're actually doing the the

890
00:44:42,980 --> 00:44:51,240
srgb approximate srgb handling ourselves

891
00:44:46,860 --> 00:44:54,150
so that's pretty good all right so what

892
00:44:51,239 --> 00:44:56,279
we want to do now is we just want to go

893
00:44:54,150 --> 00:44:58,440
ahead and implement that you know

894
00:44:56,280 --> 00:45:01,890
resolving path that we were talking

895
00:44:58,440 --> 00:45:12,690
about before so if we go to our create

896
00:45:01,889 --> 00:45:15,329
frame buffer code here you can see

897
00:45:12,690 --> 00:45:19,800
here's our depth peel flags right

898
00:45:15,329 --> 00:45:23,670
and those def peel flags are I guess not

899
00:45:19,800 --> 00:45:27,000
set with multi sampling enabled so

900
00:45:23,670 --> 00:45:32,639
what's interesting about this is I guess

901
00:45:27,000 --> 00:45:37,469
this entire time we've sort of been ah I

902
00:45:32,639 --> 00:45:39,539
see so so there we go again this is the

903
00:45:37,469 --> 00:45:40,980
problem of not having programs on this

904
00:45:39,539 --> 00:45:42,809
go based on theory so forget that we set

905
00:45:40,980 --> 00:45:48,179
ourselves up for this all right so we do

906
00:45:42,809 --> 00:45:49,679
have this all in place we have the multi

907
00:45:48,179 --> 00:45:51,480
sampling hint there and the multi

908
00:45:49,679 --> 00:45:55,769
sampling kit will basically say oh hey

909
00:45:51,480 --> 00:45:57,840
how did you want to process multi

910
00:45:55,769 --> 00:45:59,759
sampling in this case right did you want

911
00:45:57,840 --> 00:46:02,490
to use it or didn't you and that's what

912
00:45:59,760 --> 00:46:05,070
we want so I think that'll all work good

913
00:46:02,489 --> 00:46:07,079
and remember when we do free frame

914
00:46:05,070 --> 00:46:09,059
buffer now we're going to have to be a

915
00:46:07,079 --> 00:46:12,239
little bit more careful because we're

916
00:46:09,059 --> 00:46:14,309
going to have to free the rest of this

917
00:46:12,239 --> 00:46:16,909
stuff as well so we've got our resolved

918
00:46:14,309 --> 00:46:16,909
frame buffer

919
00:46:17,039 --> 00:46:20,279
[Applause]

920
00:46:26,940 --> 00:46:43,599
and we also have our resolve color is it

921
00:46:41,920 --> 00:46:50,829
resolved frame before handled yeah there

922
00:46:43,599 --> 00:46:53,949
we go alright so that's all good and now

923
00:46:50,829 --> 00:46:55,449
we will create a multi sampling surface

924
00:46:53,949 --> 00:46:57,219
with their resolution with their

925
00:46:55,449 --> 00:46:57,699
resolving frame buffer and all that good

926
00:46:57,219 --> 00:47:01,329
stuff

927
00:46:57,699 --> 00:47:04,480
however we are not actually resolving

928
00:47:01,329 --> 00:47:07,319
anything at the moment so we shouldn't

929
00:47:04,480 --> 00:47:10,960
see anything it looks like we've got a

930
00:47:07,320 --> 00:47:14,280
error to look at here open Jill did not

931
00:47:10,960 --> 00:47:14,280
like something about what we did

932
00:47:14,829 --> 00:47:23,170
GL bind texture has generated an error

933
00:47:17,559 --> 00:47:29,980
invalid operation so it looks like it's

934
00:47:23,170 --> 00:47:31,360
trying to to bind oh well yeah so this

935
00:47:29,980 --> 00:47:33,969
is actually expected I just didn't think

936
00:47:31,360 --> 00:47:35,710
of it again

937
00:47:33,969 --> 00:47:38,469
because when I said we won't see

938
00:47:35,710 --> 00:47:39,760
anything that is actually true but

939
00:47:38,469 --> 00:47:41,919
there's also an error that will be

940
00:47:39,760 --> 00:47:43,650
generated so you know if we if we ignore

941
00:47:41,920 --> 00:47:46,420
the error we would see a black screen

942
00:47:43,650 --> 00:47:48,579
but the error that's generated

943
00:47:46,420 --> 00:47:53,800
specifically is that again you can't

944
00:47:48,579 --> 00:47:55,500
render from a multi sampled texture as

945
00:47:53,800 --> 00:47:58,390
if it was a regular texture

946
00:47:55,500 --> 00:48:00,460
remember OpenGL has a bunch of filtering

947
00:47:58,389 --> 00:48:02,549
rules that are set up and are

948
00:48:00,460 --> 00:48:05,110
specifically defined around having a

949
00:48:02,550 --> 00:48:07,150
regularly sampled texture one that's

950
00:48:05,110 --> 00:48:09,010
sampled in a grid and it expects that

951
00:48:07,150 --> 00:48:11,800
and that's part of the rendering process

952
00:48:09,010 --> 00:48:14,560
a multi sample buffer does not work that

953
00:48:11,800 --> 00:48:17,950
way a multi sample buffer is a series of

954
00:48:14,559 --> 00:48:20,380
scattered samples there jittered and so

955
00:48:17,949 --> 00:48:24,789
sampling from that is not defined

956
00:48:20,380 --> 00:48:31,150
rigorously at least not in OpenGL or not

957
00:48:24,789 --> 00:48:34,159
in the vanilla case now again

958
00:48:31,150 --> 00:48:35,869
you can sample from these yourself so if

959
00:48:34,159 --> 00:48:39,469
you want to write your own sampler that

960
00:48:35,869 --> 00:48:41,568
took lookups into the texture and did

961
00:48:39,469 --> 00:48:43,399
some kind of averaging based on the

962
00:48:41,568 --> 00:48:45,230
distance from the point being sampled or

963
00:48:43,400 --> 00:48:48,829
whatever else you could do that it's

964
00:48:45,230 --> 00:48:51,679
just not defined by default and so if

965
00:48:48,829 --> 00:48:55,430
you try to bind a multi sample texture

966
00:48:51,679 --> 00:48:56,838
it took the texture to read from it's

967
00:48:55,429 --> 00:48:58,639
going to give you an error and that is

968
00:48:56,838 --> 00:49:01,250
again specifically why I created those

969
00:48:58,639 --> 00:49:08,808
resolve buffers so what we want to do

970
00:49:01,250 --> 00:49:12,739
here I suspect is when we do that bind

971
00:49:08,809 --> 00:49:17,269
texture here I want to basically switch

972
00:49:12,739 --> 00:49:19,368
on which one I'm going to use based on

973
00:49:17,269 --> 00:49:23,929
whether multi sampling is enabled so

974
00:49:19,369 --> 00:49:25,190
basically I'm going to do something like

975
00:49:23,929 --> 00:49:35,808
this

976
00:49:25,190 --> 00:49:39,099
let's first grab Jill frame buffer I'm

977
00:49:35,809 --> 00:49:47,000
going to go ahead and grab out that

978
00:49:39,099 --> 00:49:48,950
particular buffer and then what I'll do

979
00:49:47,000 --> 00:49:57,318
here actually I guess is let's just say

980
00:49:48,949 --> 00:50:00,818
oh okay ah right I guess now think about

981
00:49:57,318 --> 00:50:00,818
it we're also missing the depth buffer

982
00:50:01,179 --> 00:50:09,019
in some sense I probably could have just

983
00:50:04,130 --> 00:50:10,579
created two different frame buffer that

984
00:50:09,019 --> 00:50:13,250
might have been smarter now that I think

985
00:50:10,579 --> 00:50:16,510
about it created two frame buffers one

986
00:50:13,250 --> 00:50:16,510
multi sample one not

987
00:50:19,710 --> 00:50:24,369
you know what hold that thought I think

988
00:50:22,480 --> 00:50:26,588
that's what I would rather do so let me

989
00:50:24,369 --> 00:50:29,710
undo that change I think that's not

990
00:50:26,588 --> 00:50:34,659
necessary right I think what we could do

991
00:50:29,710 --> 00:50:43,568
is say let's just pretend that that is

992
00:50:34,659 --> 00:50:45,489
not there like so

993
00:50:43,568 --> 00:50:47,949
this should run just fine because now

994
00:50:45,489 --> 00:51:00,068
we're not creating out well that's a lie

995
00:50:47,949 --> 00:51:01,328
I have to turn off multi sampling there

996
00:51:00,068 --> 00:51:04,000
we go

997
00:51:01,329 --> 00:51:07,510
so what I'm going to do is I'm actually

998
00:51:04,000 --> 00:51:10,030
just going to go in here to where we

999
00:51:07,510 --> 00:51:14,650
create the peel buffers themselves which

1000
00:51:10,030 --> 00:51:19,150
is right in this roof right here and I'm

1001
00:51:14,650 --> 00:51:23,170
just going to create a resolved series

1002
00:51:19,150 --> 00:51:29,530
right so every time we create a def peel

1003
00:51:23,170 --> 00:51:32,230
buffer what I want to do is I want to

1004
00:51:29,530 --> 00:51:35,530
basically say if we're multi sampling I

1005
00:51:32,230 --> 00:51:37,599
want to create a corresponding depth

1006
00:51:35,530 --> 00:51:47,880
field buffer without the multi sampling

1007
00:51:37,599 --> 00:51:53,190
right so if the multi sampling then

1008
00:51:47,880 --> 00:51:58,568
create a depth peel resolve buffer and

1009
00:51:53,190 --> 00:52:01,420
do it with the same flag but I just just

1010
00:51:58,568 --> 00:52:04,269
don't want the Open GL frame buffer

1011
00:52:01,420 --> 00:52:08,460
multisample flag right so this makes it

1012
00:52:04,269 --> 00:52:10,989
creates a parallel array of Def peel

1013
00:52:08,460 --> 00:52:18,608
buffers that we can use specifically for

1014
00:52:10,989 --> 00:52:21,189
resolving our stuff so that for when we

1015
00:52:18,608 --> 00:52:23,650
go through free frame buffer we're going

1016
00:52:21,190 --> 00:52:27,190
to have to do the same thing again to

1017
00:52:23,650 --> 00:52:29,950
free all of our resolve buffers but

1018
00:52:27,190 --> 00:52:31,539
other than that it should be the same so

1019
00:52:29,949 --> 00:52:32,828
that's pretty great because that's much

1020
00:52:31,539 --> 00:52:33,340
cleaner than what I was going to do

1021
00:52:32,829 --> 00:52:35,950
where I was

1022
00:52:33,340 --> 00:52:37,860
over complicating things by making it so

1023
00:52:35,949 --> 00:52:39,730
there was a whole nother set of

1024
00:52:37,860 --> 00:52:44,170
parameters in there so let's leave it

1025
00:52:39,730 --> 00:52:48,719
like that I think that's much better

1026
00:52:44,170 --> 00:52:56,110
so anyway does anyone know where why is

1027
00:52:48,719 --> 00:52:59,739
my why is my little it stays 335 my

1028
00:52:56,110 --> 00:53:01,150
little head card is not there what I'm

1029
00:52:59,739 --> 00:53:03,579
going to put up a little something in

1030
00:53:01,150 --> 00:53:08,170
that corner to remind me that it's not

1031
00:53:03,579 --> 00:53:10,420
there because I'll constantly be romping

1032
00:53:08,170 --> 00:53:12,240
on it all right in fact let me switch

1033
00:53:10,420 --> 00:53:18,159
over here to avoid it

1034
00:53:12,239 --> 00:53:20,739
all right so let's take a look at what

1035
00:53:18,159 --> 00:53:22,029
happens now so I'm going to have the

1036
00:53:20,739 --> 00:53:25,000
same problem if I don't do anything

1037
00:53:22,030 --> 00:53:26,740
change it presumably which is that you

1038
00:53:25,000 --> 00:53:28,989
know I'm trying to bind a buffer that I

1039
00:53:26,739 --> 00:53:32,289
can't draw from right I'm trying to bind

1040
00:53:28,989 --> 00:53:35,009
a texture so what I need to do now is

1041
00:53:32,289 --> 00:53:37,599
actually do that resolve but you know

1042
00:53:35,010 --> 00:53:40,540
before we're going to draw from it I

1043
00:53:37,599 --> 00:53:42,759
have to actually resolve it and so in

1044
00:53:40,539 --> 00:53:45,969
theory what I could do is just say well

1045
00:53:42,760 --> 00:53:52,900
okay this is what the peel buffer would

1046
00:53:45,969 --> 00:53:57,059
be but if we're multi sampling then the

1047
00:53:52,900 --> 00:54:01,989
peel buffer is actually going to be

1048
00:53:57,059 --> 00:54:01,989
[Applause]

1049
00:54:05,219 --> 00:54:10,799
coming from the resolve path right and

1050
00:54:08,440 --> 00:54:13,389
now that should actually work properly

1051
00:54:10,800 --> 00:54:14,860
in the sense that we shouldn't get the

1052
00:54:13,389 --> 00:54:21,250
error because that is a texture you

1053
00:54:14,860 --> 00:54:22,720
combined or not but we have to figure

1054
00:54:21,250 --> 00:54:25,659
out why not but we won't see anything

1055
00:54:22,719 --> 00:54:29,409
yet because nobody's writing to it what

1056
00:54:25,659 --> 00:54:31,779
is the error here oh that so yeah again

1057
00:54:29,409 --> 00:54:33,569
that's also fine those are just the two

1058
00:54:31,780 --> 00:54:35,920
places that we read from those buffers

1059
00:54:33,570 --> 00:54:39,250
so here's the other place we read from

1060
00:54:35,920 --> 00:54:42,280
those buffers and again so you know what

1061
00:54:39,250 --> 00:54:43,570
into if we want to do that meaning if I

1062
00:54:42,280 --> 00:54:45,010
want to read from in two places

1063
00:54:43,570 --> 00:54:46,539
maybe I'll just make this a little

1064
00:54:45,010 --> 00:54:48,010
utility function

1065
00:54:46,539 --> 00:54:56,070
so you can just call it and you'll know

1066
00:54:48,010 --> 00:54:56,070
you'll get the right one something like

1067
00:54:56,730 --> 00:55:07,090
get depth skill read sucker right as

1068
00:55:05,409 --> 00:55:08,619
opposed to get depth field right pepper

1069
00:55:07,090 --> 00:55:11,079
because the writing will always be the

1070
00:55:08,619 --> 00:55:12,880
same no matter whether you're multi

1071
00:55:11,079 --> 00:55:25,029
sample or not but the read buffer will

1072
00:55:12,880 --> 00:55:27,579
switch alright so in order to do this

1073
00:55:25,030 --> 00:55:32,620
all I really need to do is pass whatever

1074
00:55:27,579 --> 00:55:42,969
the index is so this kind of goes away

1075
00:55:32,619 --> 00:55:49,289
here and so now anyone who's calling

1076
00:55:42,969 --> 00:55:53,649
that I can just call it correctly and

1077
00:55:49,289 --> 00:55:57,309
not have to do any thinking about it at

1078
00:55:53,650 --> 00:56:00,220
all the same is true here right so this

1079
00:55:57,309 --> 00:56:01,840
is looking for that color handle and so

1080
00:56:00,219 --> 00:56:05,559
what we can do is say alright it's got a

1081
00:56:01,840 --> 00:56:12,700
wants to get a peel index here so here's

1082
00:56:05,559 --> 00:56:18,940
that peel buffer right and now in theory

1083
00:56:12,699 --> 00:56:22,449
no one should be drawing should be

1084
00:56:18,940 --> 00:56:25,900
setting as a texture the multi sample

1085
00:56:22,449 --> 00:56:27,609
buffer and so now we're to the place

1086
00:56:25,900 --> 00:56:29,800
where I would expect to be which is

1087
00:56:27,610 --> 00:56:31,840
black screen because we're drawing you

1088
00:56:29,800 --> 00:56:34,300
know we're creating our jetseal buffers

1089
00:56:31,840 --> 00:56:38,019
ostensibly with multi sampling but we're

1090
00:56:34,300 --> 00:56:40,660
not actually using them because we never

1091
00:56:38,019 --> 00:56:43,199
resolve so we're drawing out of buffers

1092
00:56:40,659 --> 00:56:45,279
that never get anything drawn into them

1093
00:56:43,199 --> 00:56:46,719
so now what we want to do is do that

1094
00:56:45,280 --> 00:56:48,880
resolve the other thing I would point

1095
00:56:46,719 --> 00:56:51,009
out is you'll note we don't ever want to

1096
00:56:48,880 --> 00:56:52,750
actually clear these so it's okay that

1097
00:56:51,010 --> 00:56:54,940
we're never doing this because those

1098
00:56:52,750 --> 00:56:56,230
resolve buffers are never going to get

1099
00:56:54,940 --> 00:56:59,369
used for anything other than just

1100
00:56:56,230 --> 00:57:02,250
splatting the contents of the

1101
00:56:59,369 --> 00:57:08,480
peel buffers that are multi-sample just

1102
00:57:02,250 --> 00:57:11,519
drawing them directly down alright so

1103
00:57:08,480 --> 00:57:13,440
let's take a look when we get to render

1104
00:57:11,519 --> 00:57:15,838
entry and peels that means we have

1105
00:57:13,440 --> 00:57:17,700
produced a peel buffer and you can kind

1106
00:57:15,838 --> 00:57:20,909
of see here we're about to do like a

1107
00:57:17,699 --> 00:57:27,379
binding in one way or the other either

1108
00:57:20,909 --> 00:57:27,379
will bind back to the original or we

1109
00:57:28,519 --> 00:57:33,719
yeah either will bind back to the

1110
00:57:30,690 --> 00:57:35,700
original or we're going to bind to one

1111
00:57:33,719 --> 00:57:37,348
of the subsequent death deals so what I

1112
00:57:35,699 --> 00:57:40,139
might say here is when we get to the end

1113
00:57:37,349 --> 00:57:45,780
of our death peels then what we probably

1114
00:57:40,139 --> 00:57:47,699
should do is actually use the the read

1115
00:57:45,780 --> 00:57:49,230
buffer call and the reason I say this is

1116
00:57:47,699 --> 00:57:51,358
because after the best feeling is done

1117
00:57:49,230 --> 00:57:53,940
we don't really want to be doing multi

1118
00:57:51,358 --> 00:57:55,469
sampled rendering anymore right because

1119
00:57:53,940 --> 00:57:57,298
we're sort of saying we're doing debug

1120
00:57:55,469 --> 00:58:00,480
passes or UI or something that we didn't

1121
00:57:57,298 --> 00:58:02,969
want to use multi sampling on so in the

1122
00:58:00,480 --> 00:58:06,500
open field find frame buffer bit here

1123
00:58:02,969 --> 00:58:11,838
I'm just going to say let's go ahead and

1124
00:58:06,500 --> 00:58:16,079
bind the peel buffer that corresponds to

1125
00:58:11,838 --> 00:58:17,900
two slot 0 in that case and then in here

1126
00:58:16,079 --> 00:58:21,960
when we're actually coming through

1127
00:58:17,900 --> 00:58:25,619
render entry end peels in any case no

1128
00:58:21,960 --> 00:58:28,019
matter what pasture we've completed here

1129
00:58:25,619 --> 00:58:30,838
is where I would like to do that resolve

1130
00:58:28,019 --> 00:58:32,789
so what I want to do here is before I

1131
00:58:30,838 --> 00:58:34,469
bind whatever frame buffer we're going

1132
00:58:32,789 --> 00:58:36,960
to be drawing to for the next pass I

1133
00:58:34,469 --> 00:58:40,879
want to just do a quick bind where we

1134
00:58:36,960 --> 00:58:40,880
bind to read buffer and a write buffer

1135
00:58:41,269 --> 00:58:50,489
in the case of multi sampling so if we

1136
00:58:48,838 --> 00:58:53,670
were multi sampling we know we have to

1137
00:58:50,489 --> 00:58:56,068
do a smush down here so I want to read

1138
00:58:53,670 --> 00:58:59,400
from the DEF peel buffer and right to

1139
00:58:56,068 --> 00:59:02,279
the resolved buffer right and I want to

1140
00:58:59,400 --> 00:59:05,730
do whichever one is the one that we're

1141
00:59:02,280 --> 00:59:07,920
currently on so when we hit end here I

1142
00:59:05,730 --> 00:59:09,699
want to do like if we just drew to peel

1143
00:59:07,920 --> 00:59:12,789
index 0 I want to do

1144
00:59:09,699 --> 00:59:14,699
zero right so then we're going to do

1145
00:59:12,789 --> 00:59:16,929
this we're going to do the blit

1146
00:59:14,699 --> 00:59:18,608
unfortunately this is the wrong stuff

1147
00:59:16,929 --> 00:59:20,588
for the blip because this was for screen

1148
00:59:18,608 --> 00:59:22,088
bleeding which is not what we want so we

1149
00:59:20,588 --> 00:59:25,199
actually want something that looks like

1150
00:59:22,088 --> 00:59:27,190
this we're just doing a rendered lit

1151
00:59:25,199 --> 00:59:29,949
irrespective of screen cordis we're just

1152
00:59:27,190 --> 00:59:34,119
doing our render back buffer right and

1153
00:59:29,949 --> 00:59:35,679
furthermore we need to do a resolve of

1154
00:59:34,119 --> 00:59:36,700
both the color and the death buffer

1155
00:59:35,679 --> 00:59:38,259
because we're going to be reading from

1156
00:59:36,699 --> 00:59:41,558
the death buffer as part of the Deaf

1157
00:59:38,260 --> 00:59:43,030
dueling pass so I believe that's all we

1158
00:59:41,559 --> 00:59:45,160
would probably have to do

1159
00:59:43,030 --> 00:59:47,200
famous last words and graphics

1160
00:59:45,159 --> 00:59:50,409
programming so take that with a grain of

1161
00:59:47,199 --> 00:59:53,318
salt but I believe that's mostly what we

1162
00:59:50,409 --> 00:59:56,078
would want and now we'll let OpenGL tell

1163
00:59:53,318 --> 01:00:01,269
us what's wrong here so the error

1164
00:59:56,079 --> 01:00:02,980
message is must be dual nearest

1165
01:00:01,269 --> 01:00:06,338
you-know-what and that's actually fine

1166
01:00:02,980 --> 01:00:08,048
because these should be one-to-one so we

1167
01:00:06,338 --> 01:00:10,449
actually don't want any filtering on

1168
01:00:08,048 --> 01:00:14,170
here anyway so in theory that should be

1169
01:00:10,449 --> 01:00:23,230
fine that's probably better

1170
01:00:14,170 --> 01:00:27,480
oh my well I I can't say I have any idea

1171
01:00:23,230 --> 01:00:31,150
what happened to the framerate there

1172
01:00:27,480 --> 01:00:33,969
everything appears to be working but it

1173
01:00:31,150 --> 01:00:37,150
definitely appears to be much lower than

1174
01:00:33,969 --> 01:00:40,389
we would like I'm also seeing some weird

1175
01:00:37,150 --> 01:00:42,970
artifacting in places that I have no

1176
01:00:40,389 --> 01:00:45,879
idea why there would be art affecting so

1177
01:00:42,969 --> 01:00:48,029
I think we've got a little more work to

1178
01:00:45,880 --> 01:00:48,030
do

1179
01:00:52,909 --> 01:01:06,108
like they're super strange fringing yeah

1180
01:00:56,659 --> 01:01:08,659
on the side of things I mean we are

1181
01:01:06,108 --> 01:01:10,429
getting some of the anti-icing but yet

1182
01:01:08,659 --> 01:01:21,288
so I think part of the problem is the

1183
01:01:10,429 --> 01:01:23,149
depth buffer anti-aliasing is maybe the

1184
01:01:21,289 --> 01:01:25,849
problem with producing the Deaf suffer

1185
01:01:23,150 --> 01:01:27,798
in an anti aliased fashion is maybe that

1186
01:01:25,849 --> 01:01:32,859
we're not getting what we need to get in

1187
01:01:27,798 --> 01:01:32,858
terms of how we would def peel right

1188
01:01:40,929 --> 01:01:47,440
hmmmm what's interesting about that is

1189
01:01:48,969 --> 01:01:55,568
yeah I mean we could just keep doing him

1190
01:01:57,518 --> 01:02:04,699
that kind of suggests to me that we

1191
01:02:00,469 --> 01:02:12,679
would have to do the whole depth peeling

1192
01:02:04,699 --> 01:02:15,409
process I kind of suggested me that we'd

1193
01:02:12,679 --> 01:02:16,419
have to do the whole def peel process in

1194
01:02:15,409 --> 01:02:20,358
multisample

1195
01:02:16,420 --> 01:02:23,980
which i've got to say i feel like it's

1196
01:02:20,358 --> 01:02:23,980
just going maybe a little bit too far

1197
01:02:33,820 --> 01:02:39,250
hmm that's good about this I'm going to

1198
01:02:37,329 --> 01:02:41,079
take a brief screenshot here because I

1199
01:02:39,250 --> 01:02:52,090
do want to look at to it and what the

1200
01:02:41,079 --> 01:02:53,710
results look like so you know in terms

1201
01:02:52,090 --> 01:02:58,470
of getting the anti honest thing on the

1202
01:02:53,710 --> 01:03:01,000
edges it does look like that produced a

1203
01:02:58,469 --> 01:03:02,589
reasonable result in some circumstances

1204
01:03:01,000 --> 01:03:04,030
it definitely didn't produce a

1205
01:03:02,590 --> 01:03:06,910
reasonable result in some other

1206
01:03:04,030 --> 01:03:08,740
circumstances like you can see here how

1207
01:03:06,909 --> 01:03:13,000
it's actually darker than the gray there

1208
01:03:08,739 --> 01:03:14,529
and some weird ways so and that's

1209
01:03:13,000 --> 01:03:24,909
probably again because of the depth

1210
01:03:14,530 --> 01:03:29,680
artifacting there so yeah hmm so what

1211
01:03:24,909 --> 01:03:31,389
should we do here I'm not sure again you

1212
01:03:29,679 --> 01:03:33,129
know what I would really like to do is

1213
01:03:31,389 --> 01:03:36,150
not use multiple sampling at all and

1214
01:03:33,130 --> 01:03:38,200
just use conservative rasterization I'm

1215
01:03:36,150 --> 01:03:40,119
trying to think if there's some way we

1216
01:03:38,199 --> 01:03:42,069
can sort of approximate conservative

1217
01:03:40,119 --> 01:03:43,389
rasterization by making our primitives

1218
01:03:42,070 --> 01:03:44,920
bigger than they need to be and then

1219
01:03:43,389 --> 01:03:47,859
doing the rasterization ourselves

1220
01:03:44,920 --> 01:03:49,630
problem with that is we would have to do

1221
01:03:47,860 --> 01:03:57,430
it in screen space because we don't know

1222
01:03:49,630 --> 01:03:59,289
until we start I'm you know until we

1223
01:03:57,429 --> 01:04:01,000
actually project the stuff down how big

1224
01:03:59,289 --> 01:04:02,500
they're going to be how big a pixel how

1225
01:04:01,000 --> 01:04:05,369
big we'd have to move them to the

1226
01:04:02,500 --> 01:04:05,369
giraffes Reds basil

1227
01:04:22,840 --> 01:04:31,130
yeah and you can see when it is actually

1228
01:04:29,300 --> 01:04:33,110
working properly you do get nice results

1229
01:04:31,130 --> 01:04:36,039
there right that's much more pleasant

1230
01:04:33,110 --> 01:04:39,490
than than what we were seeing for

1231
01:04:36,039 --> 01:04:43,460
certainly a lot nice nice and smooth

1232
01:04:39,489 --> 01:04:49,339
well I don't know what to say I mean

1233
01:04:43,460 --> 01:04:53,570
what we could say is you know we could

1234
01:04:49,340 --> 01:04:55,280
just try doing the whole thing instead

1235
01:04:53,570 --> 01:04:57,800
of doing the resolves just do the whole

1236
01:04:55,280 --> 01:05:00,470
thing in multisample

1237
01:04:57,800 --> 01:05:05,000
I don't know that that's the smartest

1238
01:05:00,469 --> 01:05:09,739
thing to do in the world but we

1239
01:05:05,000 --> 01:05:11,650
certainly could try it and again the

1240
01:05:09,739 --> 01:05:19,429
most the reason why that's complicated

1241
01:05:11,650 --> 01:05:21,200
is just that the multi sampling is you

1242
01:05:19,429 --> 01:05:23,359
know only lightly supported in the

1243
01:05:21,199 --> 01:05:27,909
pipeline we have to sort of manually

1244
01:05:23,360 --> 01:05:27,910
access those samples very specifically

1245
01:05:32,889 --> 01:05:38,029
well I guess here's what you said I'd

1246
01:05:35,090 --> 01:05:40,220
say let's at least try it I mean you

1247
01:05:38,030 --> 01:05:44,800
only you know pound Yolo I guess in this

1248
01:05:40,219 --> 01:05:49,759
case so I guess you know we'll just

1249
01:05:44,800 --> 01:05:51,590
we'll give it a shot I so essentially

1250
01:05:49,760 --> 01:05:53,360
the problem here if we want to do

1251
01:05:51,590 --> 01:05:59,329
everything multi sample the whole way

1252
01:05:53,360 --> 01:06:01,280
down is that we need to read from those

1253
01:05:59,329 --> 01:06:03,019
buffers in a specific ways so let's go

1254
01:06:01,280 --> 01:06:04,269
ahead and grab that quick reference card

1255
01:06:03,019 --> 01:06:06,710
that we've used before

1256
01:06:04,269 --> 01:06:09,789
I'm hoping this is available in three

1257
01:06:06,710 --> 01:06:18,789
two so I don't know if it actually is

1258
01:06:09,789 --> 01:06:18,789
let's wear the Texel there we go so

1259
01:06:27,099 --> 01:06:34,838
let's see if it's on here I actually

1260
01:06:30,920 --> 01:06:34,838
don't see it on here

1261
01:06:43,550 --> 01:06:49,970
so if we wanted to do that we may have

1262
01:06:46,460 --> 01:07:00,980
what we might be required to use a

1263
01:06:49,969 --> 01:07:03,429
higher level of of shading actually take

1264
01:07:00,980 --> 01:07:03,429
a look here

1265
01:07:13,179 --> 01:07:21,909
oh you know what no I take that back

1266
01:07:16,659 --> 01:07:24,909
this is this is just me looking for it

1267
01:07:21,909 --> 01:07:29,199
in the wrong place so technically that's

1268
01:07:24,909 --> 01:07:33,338
not true it's really just that you have

1269
01:07:29,199 --> 01:07:36,909
to declare the sampler as a multi

1270
01:07:33,338 --> 01:07:38,739
sampler yeah okay sorry that was just me

1271
01:07:36,909 --> 01:07:41,798
spacing on that it's it's early in the

1272
01:07:38,739 --> 01:07:44,409
morning for me here so this is actually

1273
01:07:41,798 --> 01:07:47,619
all we needed access to the multi sample

1274
01:07:44,409 --> 01:07:49,690
texture right and that is luckily for us

1275
01:07:47,619 --> 01:07:53,200
in three point hours let's say I thought

1276
01:07:49,690 --> 01:07:56,289
it was in there so since Stanford two

1277
01:07:53,199 --> 01:08:03,969
DMS exists in there we should be able to

1278
01:07:56,289 --> 01:08:06,520
do what we were doing oops we should be

1279
01:08:03,969 --> 01:08:09,608
able to do what we were doing just fine

1280
01:08:06,519 --> 01:08:19,390
hopefully that's not what I wanted I

1281
01:08:09,608 --> 01:08:23,399
just want the spec for it there but that

1282
01:08:19,390 --> 01:08:23,400
may be harder to come by

1283
01:08:24,719 --> 01:08:29,969
let's go like this kill excel stack

1284
01:08:31,920 --> 01:08:35,069
point out

1285
01:08:41,829 --> 01:08:45,130
come on people

1286
01:08:50,439 --> 01:08:59,619
okay there's a page that has all these

1287
01:08:52,569 --> 01:09:05,439
specifications on them bring me to that

1288
01:08:59,619 --> 01:09:16,059
page I don't want the PDF I want the

1289
01:09:05,439 --> 01:09:18,909
actual here we go there it is this is

1290
01:09:16,060 --> 01:09:20,890
what I wanted so I should be able to

1291
01:09:18,909 --> 01:09:24,519
read OpenGL shading language 1.5

1292
01:09:20,890 --> 01:09:28,690
specification 1.3 specification etc so

1293
01:09:24,520 --> 01:09:32,640
let's take a look at this one right and

1294
01:09:28,689 --> 01:09:32,639
let's take a look at sampler to the MS

1295
01:09:35,520 --> 01:09:39,960
so it looks like that was added after

1296
01:09:45,750 --> 01:10:00,000
take a look is it in here yes so

1297
01:09:58,289 --> 01:10:08,069
basically that was added it looks like

1298
01:10:00,000 --> 01:10:10,140
in the change from 1.4 to 1.5 and so we

1299
01:10:08,069 --> 01:10:13,380
would have to go to 1.5 for that which

1300
01:10:10,140 --> 01:10:16,020
is probably fine right that's not going

1301
01:10:13,380 --> 01:10:23,010
to go up to open jail for or anything so

1302
01:10:16,020 --> 01:10:24,570
probably that's just okay yeah and so

1303
01:10:23,010 --> 01:10:27,180
you can kind of see what happens here

1304
01:10:24,569 --> 01:10:30,299
when we do a textile fetch what you do

1305
01:10:27,180 --> 01:10:32,730
is you can get the sample and say I want

1306
01:10:30,300 --> 01:10:36,180
to get a particular sample out of the

1307
01:10:32,729 --> 01:10:38,189
texture at this location which should be

1308
01:10:36,180 --> 01:10:41,130
fine for us with what we're doing

1309
01:10:38,189 --> 01:10:45,419
because we can use the sample value that

1310
01:10:41,130 --> 01:10:48,690
comes through in the shader which it

1311
01:10:45,420 --> 01:10:54,600
will define for us right let me see if

1312
01:10:48,689 --> 01:10:57,199
we can kill drag sample toward where are

1313
01:10:54,600 --> 01:10:57,200
these defined

1314
01:11:09,069 --> 01:11:12,849
so here's the special variable to come

1315
01:11:11,140 --> 01:11:14,800
through the fragment shader with the

1316
01:11:12,850 --> 01:11:17,740
fragment coordinate front-facing clipped

1317
01:11:14,800 --> 01:11:21,610
distance color frag data plain cord

1318
01:11:17,739 --> 01:11:24,880
primitive ID I was hoping that there was

1319
01:11:21,609 --> 01:11:29,079
a sample value in there and you would

1320
01:11:24,880 --> 01:11:30,789
think that there would have to be in

1321
01:11:29,079 --> 01:11:37,019
order for this to work but I don't know

1322
01:11:30,789 --> 01:11:37,019
where that actually is let's see

1323
01:11:57,189 --> 01:12:02,259
I'm interested to know if I look at the

1324
01:12:00,130 --> 01:12:05,409
quick reference card and I look at the

1325
01:12:02,260 --> 01:12:09,550
shader the variables that are listed as

1326
01:12:05,409 --> 01:12:12,389
built-in and none of these are specified

1327
01:12:09,550 --> 01:12:12,390
in there either

1328
01:12:13,289 --> 01:12:18,488
that does make things a little bit

1329
01:12:15,969 --> 01:12:21,310
trickier for us because if we just want

1330
01:12:18,488 --> 01:12:23,829
to say hey we need to get this whichever

1331
01:12:21,310 --> 01:12:25,870
sample we're shading right now that's

1332
01:12:23,829 --> 01:12:34,800
the one we need to get from this

1333
01:12:25,869 --> 01:12:34,800
particular from this particular sample

1334
01:12:39,520 --> 01:12:42,810
but I don't see it

1335
01:12:43,689 --> 01:12:47,669
let's take a look at the spec under

1336
01:12:45,100 --> 01:12:47,670
Texas fetch

1337
01:12:55,029 --> 01:13:07,750
here we go so here's all the texture

1338
01:12:58,510 --> 01:13:14,320
lookup functions right I don't know if

1339
01:13:07,750 --> 01:13:18,010
any of these are discussed in detail now

1340
01:13:14,319 --> 01:13:22,198
it doesn't look like it it's not the

1341
01:13:18,010 --> 01:13:22,199
best spec in the world if we're honest

1342
01:13:54,340 --> 01:13:57,180
okay

1343
01:14:01,250 --> 01:14:06,369
still not seeing anything that tells me

1344
01:14:03,680 --> 01:14:06,369
what I want to know

1345
01:14:19,630 --> 01:14:25,329
so I'm not sure I just want to get I

1346
01:14:26,859 --> 01:14:35,000
show you what I'm wanting and not

1347
01:14:30,050 --> 01:14:38,180
getting here so what I want is inside

1348
01:14:35,000 --> 01:14:40,039
these routines right we've got two

1349
01:14:38,180 --> 01:14:42,289
places that we actually load from these

1350
01:14:40,039 --> 01:14:44,659
so you can see here where we are doing

1351
01:14:42,289 --> 01:14:47,720
our def peeling we do a textbook set

1352
01:14:44,659 --> 01:14:52,779
from the depth sampler and that textile

1353
01:14:47,720 --> 01:14:56,960
fetch is just like hey here's the

1354
01:14:52,779 --> 01:14:59,899
location to fetch from and if I wanted

1355
01:14:56,960 --> 01:15:01,880
to fetch from a multi sample texture the

1356
01:14:59,899 --> 01:15:03,379
thing that the problem is I need to make

1357
01:15:01,880 --> 01:15:07,400
sure that I'm sampling from the same

1358
01:15:03,380 --> 01:15:10,190
sample as the one that I am on so if

1359
01:15:07,399 --> 01:15:11,899
this pixel is evaluating sample three I

1360
01:15:10,189 --> 01:15:14,629
want to make sure that I get depth

1361
01:15:11,899 --> 01:15:27,769
sample three from this buffer right

1362
01:15:14,630 --> 01:15:29,239
that's the key but I'm not sure how to

1363
01:15:27,770 --> 01:15:32,120
guarantee that that is what it will

1364
01:15:29,238 --> 01:15:34,159
actually do and I just wanted some

1365
01:15:32,119 --> 01:15:36,250
documentation that would be specific

1366
01:15:34,159 --> 01:15:41,809
about what would happen in that case

1367
01:15:36,250 --> 01:15:45,380
right so what you can see here is that

1368
01:15:41,810 --> 01:15:47,150
if I call it with a two DMS as far as I

1369
01:15:45,380 --> 01:15:51,440
can tell you have to pass an integer

1370
01:15:47,149 --> 01:15:53,179
sample number right I don't see any

1371
01:15:51,439 --> 01:15:55,609
other way that you can sample from one

1372
01:15:53,180 --> 01:15:57,560
of these and so the problem is if I'm

1373
01:15:55,609 --> 01:16:00,139
going to pass it integer sample number I

1374
01:15:57,560 --> 01:16:02,870
would need to know what that integer was

1375
01:16:00,140 --> 01:16:05,420
for the current sample but I don't know

1376
01:16:02,869 --> 01:16:10,460
what it is because it hasn't given it to

1377
01:16:05,420 --> 01:16:14,180
me anywhere right so what I would have

1378
01:16:10,460 --> 01:16:17,569
expected and what I'm not seeing is I

1379
01:16:14,180 --> 01:16:20,329
would have seen inside the sub built-ins

1380
01:16:17,569 --> 01:16:22,699
right that in the fragment language in

1381
01:16:20,329 --> 01:16:26,390
here I would have expected to see an

1382
01:16:22,699 --> 01:16:29,590
integer value like in like this one that

1383
01:16:26,390 --> 01:16:29,590
just said sample

1384
01:16:35,390 --> 01:16:45,180
but I do not see it and so yeah I

1385
01:16:42,390 --> 01:16:51,180
suspect that possibly the reason for

1386
01:16:45,180 --> 01:16:54,600
that is just because you don't always

1387
01:16:51,180 --> 01:17:02,550
run the pixel shader on all of the

1388
01:16:54,600 --> 01:17:05,700
samples in a pixel because if the

1389
01:17:02,550 --> 01:17:10,560
geometry doesn't pass through that pixel

1390
01:17:05,699 --> 01:17:12,599
then it's only going to render if it's

1391
01:17:10,560 --> 01:17:14,730
entirely enclosed if it doesn't pass

1392
01:17:12,600 --> 01:17:17,160
partially through it then it's not going

1393
01:17:14,729 --> 01:17:18,329
to call the fragment shader for every

1394
01:17:17,159 --> 01:17:21,960
sample it's only going to call the

1395
01:17:18,329 --> 01:17:25,369
fragment shader for just just once and

1396
01:17:21,960 --> 01:17:25,369
fill all the samples with that value

1397
01:17:32,319 --> 01:17:35,130
hmm

1398
01:17:44,279 --> 01:17:49,389
so I think I mean unless I'm mistaken I

1399
01:17:47,738 --> 01:17:53,738
just really don't see a lot of ways to

1400
01:17:49,389 --> 01:17:56,590
do this I can't think of a way out of

1401
01:17:53,738 --> 01:17:58,209
this really all we really want is

1402
01:17:56,590 --> 01:17:59,710
conservative rasterization that would

1403
01:17:58,210 --> 01:18:01,149
definitely solve our problem

1404
01:17:59,710 --> 01:18:03,158
unfortunately that's not really

1405
01:18:01,149 --> 01:18:07,179
forthcoming we could turn it on on video

1406
01:18:03,158 --> 01:18:10,559
parts or I guess I don't know there was

1407
01:18:07,179 --> 01:18:16,630
a really good page I can't remember a

1408
01:18:10,560 --> 01:18:17,409
extension support I can't remember yeah

1409
01:18:16,630 --> 01:18:23,279
this is it

1410
01:18:17,408 --> 01:18:27,098
what's this it let me see if I can

1411
01:18:23,279 --> 01:18:36,729
ascertain how much support there is for

1412
01:18:27,099 --> 01:18:41,400
that because I don't really know one

1413
01:18:36,729 --> 01:18:41,399
percent on this page

1414
01:18:56,520 --> 01:19:10,180
let's see if I can look by if there's no

1415
01:19:08,979 --> 01:19:12,789
way to search for conservative

1416
01:19:10,180 --> 01:19:14,950
rasterization I don't really want to

1417
01:19:12,789 --> 01:19:18,569
port it open Jill versions I want

1418
01:19:14,949 --> 01:19:22,750
capabilities and so let's see can be

1419
01:19:18,569 --> 01:19:27,399
conservative derivative so they don't

1420
01:19:22,750 --> 01:19:37,239
have these are just the caps fits about

1421
01:19:27,399 --> 01:19:42,189
here conservative there it is yeah so

1422
01:19:37,239 --> 01:19:44,679
that's like that's like not very

1423
01:19:42,189 --> 01:19:48,159
supported at all so we could get

1424
01:19:44,680 --> 01:19:52,840
anti-aliasing pretty cheaply on any

1425
01:19:48,159 --> 01:19:56,159
modern geforce card it looks like but

1426
01:19:52,840 --> 01:19:56,159
that's about all we would get

1427
01:20:07,710 --> 01:20:09,770
you

1428
01:20:16,880 --> 01:20:21,579
so let's take a look at Intel's got a

1429
01:20:18,800 --> 01:20:25,880
certain conservative rasterizer

1430
01:20:21,579 --> 01:20:27,710
extension it looks like - so yeah you

1431
01:20:25,880 --> 01:20:36,770
know we could get some anti aliasing

1432
01:20:27,710 --> 01:20:43,909
with the def peeling on those but not

1433
01:20:36,770 --> 01:20:47,840
great if we're honest not not fabulous

1434
01:20:43,909 --> 01:20:49,489
so I do wonder however you know so maybe

1435
01:20:47,840 --> 01:20:51,470
if we just return to what we've got at

1436
01:20:49,489 --> 01:20:55,340
the moment since it does look like going

1437
01:20:51,470 --> 01:20:58,010
the sampler - DMS route so first of all

1438
01:20:55,340 --> 01:21:00,949
I have no idea what that slowness is at

1439
01:20:58,010 --> 01:21:04,369
the beginning they're like look what is

1440
01:21:00,949 --> 01:21:06,789
going on here I have no idea I have no

1441
01:21:04,369 --> 01:21:10,789
idea what what is happening with that

1442
01:21:06,789 --> 01:21:12,500
that is kind of just nuts so I don't

1443
01:21:10,789 --> 01:21:15,380
know if that's something stupid we're

1444
01:21:12,500 --> 01:21:16,909
doing where or if s something where

1445
01:21:15,380 --> 01:21:18,619
we're just pushing the card a little bit

1446
01:21:16,909 --> 01:21:21,229
too hard because it is a at this point

1447
01:21:18,619 --> 01:21:23,930
seven-year-olds graphics card which

1448
01:21:21,229 --> 01:21:30,799
admittedly is not going to be the

1449
01:21:23,930 --> 01:21:34,640
smoothest thing on the planet but I yeah

1450
01:21:30,800 --> 01:21:40,840
just looking at it at what's going on

1451
01:21:34,640 --> 01:21:40,840
there I'm just I'm not sure exactly what

1452
01:21:48,289 --> 01:21:52,789
I'm not sure exactly what I could do to

1453
01:21:50,779 --> 01:22:02,359
sort of work around this problem in a

1454
01:21:52,789 --> 01:22:06,760
meaningful way I mean I'm pretty sure

1455
01:22:02,359 --> 01:22:06,759
we're not doing anything too dumb here

1456
01:22:14,979 --> 01:22:18,089
[Applause]

1457
01:22:23,649 --> 01:22:27,960
that all seems pretty reasonable

1458
01:22:33,920 --> 01:22:41,279
so yeah I don't know presumably we

1459
01:22:38,578 --> 01:22:44,039
haven't messed up anything accidentally

1460
01:22:41,279 --> 01:22:47,429
right if we turn mother sampling up or

1461
01:22:44,039 --> 01:23:01,738
presumably back to running properly go

1462
01:22:47,429 --> 01:23:03,960
ahead and so yeah that's all

1463
01:23:01,738 --> 01:23:07,559
everything's flying there no issues at

1464
01:23:03,960 --> 01:23:08,939
all so yeah I don't know what else one

1465
01:23:07,560 --> 01:23:11,460
other approach we could take I'm

1466
01:23:08,939 --> 01:23:15,769
thinking of what else we could sort of

1467
01:23:11,460 --> 01:23:15,770
do there that wouldn't be too onerous

1468
01:23:22,750 --> 01:23:33,600
I mean I assume the problem there is

1469
01:23:26,470 --> 01:23:39,640
just that creating the Deaf buffer in

1470
01:23:33,600 --> 01:23:41,289
the Deaf peel mode is simply not going

1471
01:23:39,640 --> 01:23:45,430
to be precise enough at the edges of

1472
01:23:41,289 --> 01:23:47,439
objects because you need to know what

1473
01:23:45,430 --> 01:23:49,060
the depth was at that point for blending

1474
01:23:47,439 --> 01:23:51,789
but you don't actually know what the

1475
01:23:49,060 --> 01:23:54,340
depth was because when you resolve you

1476
01:23:51,789 --> 01:23:57,369
will average them down right in other

1477
01:23:54,340 --> 01:24:01,270
words I've got an edge passing through

1478
01:23:57,369 --> 01:24:05,710
space like somewhere here where part of

1479
01:24:01,270 --> 01:24:08,080
the pixel it's going to be something way

1480
01:24:05,710 --> 01:24:11,140
behind and part of this could be

1481
01:24:08,079 --> 01:24:13,630
something up close I feel like it would

1482
01:24:11,140 --> 01:24:15,820
fix it if it just picked the closest

1483
01:24:13,630 --> 01:24:18,520
step value I don't know if that's

1484
01:24:15,819 --> 01:24:20,439
something I can actually have it do

1485
01:24:18,520 --> 01:24:23,800
meaning when I do the frame buffer

1486
01:24:20,439 --> 01:24:25,269
resolve I don't actually know if there's

1487
01:24:23,800 --> 01:24:28,180
some way to get it to that I feel I

1488
01:24:25,270 --> 01:24:38,260
could do it myself with some kind of

1489
01:24:28,180 --> 01:24:44,350
custom resolve but what I needed to do

1490
01:24:38,260 --> 01:24:47,380
here right is when it does the depth

1491
01:24:44,350 --> 01:24:49,510
buffer I needed to pick the maximum

1492
01:24:47,380 --> 01:24:53,109
value whichever one would have been

1493
01:24:49,510 --> 01:24:54,190
closest so I wonder if there's some way

1494
01:24:53,109 --> 01:24:57,189
I can do that

1495
01:24:54,189 --> 01:24:59,199
let's let's find out maybe that's

1496
01:24:57,189 --> 01:25:02,109
something I could do

1497
01:24:59,199 --> 01:25:05,130
and maybe that that would be enough to

1498
01:25:02,109 --> 01:25:05,130
get us over the hump

1499
01:25:12,149 --> 01:25:16,539
let's see filter subscribe the

1500
01:25:15,489 --> 01:25:18,010
interpolation method that will be

1501
01:25:16,539 --> 01:25:21,960
applied three sites person it must be

1502
01:25:18,010 --> 01:25:21,960
Jill nursery linear alright

1503
01:25:30,069 --> 01:25:47,840
let's hear it

1504
01:25:33,319 --> 01:25:49,639
claim duffer and while we're at it we

1505
01:25:47,840 --> 01:25:52,060
might as well bring up the stack and

1506
01:25:49,640 --> 01:25:52,060
take a look

1507
01:25:56,119 --> 01:26:08,939
so here's the speck looks like a blip

1508
01:26:00,149 --> 01:26:13,309
frame buffer and see if they discuss

1509
01:26:08,939 --> 01:26:13,309
multi sampling in here hopefully they do

1510
01:26:52,659 --> 01:26:55,619
come on people

1511
01:27:00,369 --> 01:27:03,819
that's what I wanted

1512
01:27:04,899 --> 01:27:09,759
all right so let's see

1513
01:27:21,260 --> 01:27:26,289
how do we resolve these

1514
01:27:33,479 --> 01:27:39,869
they don't really specify this in this

1515
01:27:36,158 --> 01:27:39,868
part of it it doesn't look like

1516
01:28:18,988 --> 01:28:21,988
well

1517
01:28:36,059 --> 01:28:41,788
not really getting the information I

1518
01:28:37,679 --> 01:28:44,449
want I just want you to tell me if

1519
01:28:41,788 --> 01:28:48,478
there's any way I could process this and

1520
01:28:44,448 --> 01:28:51,318
get the maximum depth value maybe I'll

1521
01:28:48,479 --> 01:28:51,319
ask Google

1522
01:28:51,989 --> 01:28:56,119
[Applause]

1523
01:29:04,569 --> 01:29:08,279
I like to visit the Qualcomm

1524
01:29:32,050 --> 01:29:37,329
I feel like there's got to be a way to

1525
01:29:33,939 --> 01:29:40,388
do this I suppose one way I could do it

1526
01:29:37,328 --> 01:29:47,618
is I could just write the shader myself

1527
01:29:40,389 --> 01:29:50,020
and do you know basically do a full

1528
01:29:47,618 --> 01:29:52,960
frame buffer blit the same way that

1529
01:29:50,020 --> 01:29:55,059
we're doing it to resolve at the end to

1530
01:29:52,960 --> 01:29:57,880
combine our death Neil's I suppose I

1531
01:29:55,059 --> 01:29:59,949
could do at that point to resolve the

1532
01:29:57,880 --> 01:30:04,239
depth as well but the problem is I need

1533
01:29:59,948 --> 01:30:07,058
the depth to be the maximum like the

1534
01:30:04,238 --> 01:30:08,259
closest depth value that was seen and I

1535
01:30:07,059 --> 01:30:10,510
would have thought that that would have

1536
01:30:08,260 --> 01:30:12,610
been a default operation actually

1537
01:30:10,510 --> 01:30:16,059
because it's kind of what you would

1538
01:30:12,609 --> 01:30:21,339
probably want most of the time I would

1539
01:30:16,059 --> 01:30:24,250
think but maybe if you're not doing a

1540
01:30:21,340 --> 01:30:27,039
death-dealing operation then you don't

1541
01:30:24,250 --> 01:30:28,658
necessarily want that but I'm still not

1542
01:30:27,039 --> 01:30:32,408
seeing anything here that suggests that

1543
01:30:28,658 --> 01:30:34,420
you could do that so that feels to me

1544
01:30:32,408 --> 01:30:47,348
like the only real way that I could do

1545
01:30:34,420 --> 01:30:49,300
it yeah would be for us - would be for

1546
01:30:47,349 --> 01:30:51,369
us to implement that manually so

1547
01:30:49,300 --> 01:30:55,210
basically what that means is this you

1548
01:30:51,368 --> 01:30:57,308
know this operation where we bind the

1549
01:30:55,210 --> 01:30:59,078
two frame buffer zone in duplet would

1550
01:30:57,309 --> 01:31:01,719
have to be replaced with our own custom

1551
01:30:59,078 --> 01:31:03,849
resolve and this right here is our own

1552
01:31:01,719 --> 01:31:06,550
custom resolve so really we already have

1553
01:31:03,849 --> 01:31:13,659
the code for it we would just need to

1554
01:31:06,550 --> 01:31:14,920
make that more systemic right we need to

1555
01:31:13,658 --> 01:31:18,279
make it so that that was something that

1556
01:31:14,920 --> 01:31:23,649
that we could do sort of separately so

1557
01:31:18,279 --> 01:31:25,630
if I wanted to do that you know we'd be

1558
01:31:23,649 --> 01:31:27,960
talking about something like this so

1559
01:31:25,630 --> 01:31:30,219
here's where the resolve goes right and

1560
01:31:27,960 --> 01:31:32,679
all that code has to happen I'm going to

1561
01:31:30,219 --> 01:31:37,270
pull that out into a function just so it

1562
01:31:32,679 --> 01:31:39,599
doesn't get quite so indented so I can

1563
01:31:37,270 --> 01:31:39,599
read it

1564
01:31:42,899 --> 01:31:46,099
[Applause]

1565
01:31:46,420 --> 01:31:52,609
so if I wanted to do this again this is

1566
01:31:49,630 --> 01:31:57,859
absolutely all I really need to do is

1567
01:31:52,609 --> 01:32:00,170
this exact process GL buffer data with

1568
01:31:57,859 --> 01:32:02,359
the fixed vertices and then we would

1569
01:32:00,170 --> 01:32:16,970
have to do something here which is like

1570
01:32:02,359 --> 01:32:18,739
our multi sample resolves I and we don't

1571
01:32:16,970 --> 01:32:21,680
really need to do a four I loop here

1572
01:32:18,739 --> 01:32:27,079
because we're only going to be accessing

1573
01:32:21,680 --> 01:32:39,010
just that one texture and then this code

1574
01:32:27,079 --> 01:32:41,090
remains the same so it's pretty compact

1575
01:32:39,010 --> 01:32:44,449
operation here but I don't know it might

1576
01:32:41,090 --> 01:32:47,000
be too expensive to to do just in terms

1577
01:32:44,449 --> 01:32:49,159
of how much it's going to cost in terms

1578
01:32:47,000 --> 01:32:54,279
of feeding time again only on this card

1579
01:32:49,159 --> 01:32:57,229
on modern cards would be no problem but

1580
01:32:54,279 --> 01:33:00,019
so if we want to do this we would

1581
01:32:57,229 --> 01:33:02,329
basically need to call resolve multi

1582
01:33:00,020 --> 01:33:06,650
sample unlike an OpenGL frame buffer

1583
01:33:02,329 --> 01:33:09,460
from and a2 and then we would need the

1584
01:33:06,649 --> 01:33:09,460
width and height

1585
01:33:11,609 --> 01:33:14,670
[Applause]

1586
01:33:18,319 --> 01:33:24,569
so when we bind the frame buffer we're

1587
01:33:21,750 --> 01:33:29,130
going to want to bind the two frame

1588
01:33:24,569 --> 01:33:30,479
buffer so whatever the you know

1589
01:33:29,130 --> 01:33:33,779
basically the target was we're going to

1590
01:33:30,479 --> 01:33:36,239
bind that buffer and then we would say

1591
01:33:33,779 --> 01:33:41,279
well okay we're going to do a result

1592
01:33:36,239 --> 01:33:43,920
multi sample we want to bind as the read

1593
01:33:41,279 --> 01:33:47,059
buffer we're going to want to bind both

1594
01:33:43,920 --> 01:33:51,600
the color and the depth handles together

1595
01:33:47,060 --> 01:33:54,720
and we would need to be able to fetch

1596
01:33:51,600 --> 01:33:57,840
the depth value out of the texture so

1597
01:33:54,720 --> 01:34:02,909
we'd actually need to set the Z value

1598
01:33:57,840 --> 01:34:04,560
right and hopefully that's something

1599
01:34:02,909 --> 01:34:08,729
that we'd be allowed to do in OpenGL

1600
01:34:04,560 --> 01:34:16,130
shading language 1.3 I'm not 100% sure

1601
01:34:08,729 --> 01:34:20,179
if we can or not see here still write

1602
01:34:16,130 --> 01:34:20,180
fragment Z

1603
01:34:27,569 --> 01:34:30,869
so it does look like you can write to

1604
01:34:29,430 --> 01:34:34,409
frag DEP I don't know if you can do it

1605
01:34:30,869 --> 01:34:36,210
in three or not but hopefully we will be

1606
01:34:34,409 --> 01:34:39,090
able to do that so we'll find out when

1607
01:34:36,210 --> 01:34:44,159
we try to compile the program so yet in

1608
01:34:39,090 --> 01:34:47,159
this case we have everything set up here

1609
01:34:44,159 --> 01:34:49,460
a which pretty much looks like what we

1610
01:34:47,159 --> 01:34:49,460
want

1611
01:35:07,828 --> 01:35:21,228
I guess the other thing to think about

1612
01:35:11,248 --> 01:35:23,878
here which is kind of confusing eye is

1613
01:35:21,229 --> 01:35:27,958
that we only want to produce sample

1614
01:35:23,878 --> 01:35:37,679
values we only want to use sample values

1615
01:35:27,958 --> 01:35:39,779
that we actually took and I mean it just

1616
01:35:37,679 --> 01:35:41,128
seems like I'm going to have to go I'm

1617
01:35:39,779 --> 01:35:43,648
just not feeling super-confident about

1618
01:35:41,128 --> 01:35:46,429
this because if we have to do that that

1619
01:35:43,649 --> 01:35:49,260
also seems pretty problematic because

1620
01:35:46,429 --> 01:35:51,389
we're going to have to do stuff like say

1621
01:35:49,260 --> 01:35:53,369
well okay we you know when we're doing

1622
01:35:51,389 --> 01:35:57,569
the desk deal we look to see what the

1623
01:35:53,368 --> 01:36:00,118
previous round output as its death value

1624
01:35:57,569 --> 01:36:06,198
and if it's multi sampling it's going to

1625
01:36:00,118 --> 01:36:08,969
have to ignore any depth values that are

1626
01:36:06,198 --> 01:36:10,948
older than the closest one it would also

1627
01:36:08,969 --> 01:36:16,948
have to ignore the colors from those

1628
01:36:10,948 --> 01:36:19,969
ones that were not the closest one which

1629
01:36:16,948 --> 01:36:19,969
I guess is fine

1630
01:36:30,208 --> 01:36:36,688
I mean it might just work I don't know

1631
01:36:32,939 --> 01:36:37,769
it's just it's a little iffy so I don't

1632
01:36:36,689 --> 01:36:41,340
know we'll push forward a little bit

1633
01:36:37,769 --> 01:36:43,498
I'll do it it'll be hard to tell if

1634
01:36:41,340 --> 01:36:46,650
we've got a bug versus it just doesn't

1635
01:36:43,498 --> 01:36:51,359
work but yeah I mean I don't know I

1636
01:36:46,649 --> 01:36:54,408
guess we'll try right so in this case we

1637
01:36:51,359 --> 01:37:00,868
have to bind two textures to read from

1638
01:36:54,408 --> 01:37:15,029
right so we need to bind both the color

1639
01:37:00,868 --> 01:37:16,288
and the depth like so and so we've got

1640
01:37:15,029 --> 01:37:23,158
the color handle in the depth handle

1641
01:37:16,288 --> 01:37:25,380
both specified for the buffer we want to

1642
01:37:23,158 --> 01:37:26,879
read from so this would allow us to

1643
01:37:25,380 --> 01:37:29,099
write a shader that could read from the

1644
01:37:26,880 --> 01:37:32,099
color handle and the depth handle of one

1645
01:37:29,099 --> 01:37:36,150
of the multi sample buffers and then

1646
01:37:32,099 --> 01:37:41,639
write to some destination writing both

1647
01:37:36,149 --> 01:37:45,388
the depth and the color value that we

1648
01:37:41,639 --> 01:37:48,840
desire now when we do this pass

1649
01:37:45,389 --> 01:37:53,159
we don't want any blending of any kind I

1650
01:37:48,840 --> 01:37:56,670
think at this point I so but we've got

1651
01:37:53,158 --> 01:37:59,098
you a blood pump 1 1 - horse alpha on so

1652
01:37:56,670 --> 01:38:03,828
I think we would also have to in this

1653
01:37:59,099 --> 01:38:03,828
case disable blending

1654
01:38:08,750 --> 01:38:14,819
but we always do have blending table it

1655
01:38:11,399 --> 01:38:17,399
looks like alright I guess that's

1656
01:38:14,819 --> 01:38:18,869
because we're def peeling so all of our

1657
01:38:17,399 --> 01:38:23,549
blending happens in that one resolved

1658
01:38:18,869 --> 01:38:25,680
shader so I think that's all good so

1659
01:38:23,550 --> 01:38:27,329
this is probably all we really need to

1660
01:38:25,680 --> 01:38:28,680
do here and then we just need to write

1661
01:38:27,329 --> 01:38:33,689
the shader that actually does this

1662
01:38:28,680 --> 01:38:36,180
operation so taking a look at the set up

1663
01:38:33,689 --> 01:38:39,839
for this program basically it's the same

1664
01:38:36,180 --> 01:38:43,200
as the peel composite program but we're

1665
01:38:39,840 --> 01:38:47,909
going to have two different samplers

1666
01:38:43,199 --> 01:38:56,970
here right so we've got the color

1667
01:38:47,909 --> 01:38:59,930
sampler and the depth sampler right so

1668
01:38:56,970 --> 01:38:59,930
when we do this compile

1669
01:39:13,420 --> 01:39:41,239
this is our resolve multisample

1670
01:39:16,658 --> 01:39:45,738
program and I think most of this is

1671
01:39:41,238 --> 01:39:47,869
going to be the same now we don't need

1672
01:39:45,738 --> 01:39:50,269
the vert color stuff here I don't know

1673
01:39:47,869 --> 01:40:00,219
why that's still there I can go away

1674
01:39:50,270 --> 01:40:04,250
oops and I don't think we need the vert

1675
01:40:00,219 --> 01:40:08,679
UV either because we're only going to be

1676
01:40:04,250 --> 01:40:08,679
using a direct look up

1677
01:40:17,170 --> 01:40:21,250
because you can't stretch in fact I

1678
01:40:19,239 --> 01:40:29,489
don't know why did we have vert UVs in

1679
01:40:21,250 --> 01:40:32,319
here I have no idea it's a good question

1680
01:40:29,489 --> 01:40:34,659
anyway so we don't need UVs and we don't

1681
01:40:32,319 --> 01:40:38,259
need we don't need any of this basically

1682
01:40:34,659 --> 01:40:40,510
we just need a straight path through

1683
01:40:38,260 --> 01:40:41,739
vertex shader that's going to just make

1684
01:40:40,510 --> 01:40:43,570
sure we get a perimeter that covers the

1685
01:40:41,739 --> 01:40:44,920
whole screen that's all we really need

1686
01:40:43,569 --> 01:40:49,840
at all we don't we don't need anything

1687
01:40:44,920 --> 01:40:55,449
else right so in this case we've got two

1688
01:40:49,840 --> 01:40:57,400
of these multi sample samplers so we're

1689
01:40:55,449 --> 01:41:00,489
going to use to read from we basically

1690
01:40:57,399 --> 01:41:02,379
have no inputs we just have the output

1691
01:41:00,489 --> 01:41:06,099
which is the result color and then we

1692
01:41:02,380 --> 01:41:08,409
have to write to the frag Z which I

1693
01:41:06,100 --> 01:41:10,329
don't know if we have to declare that

1694
01:41:08,409 --> 01:41:14,529
writable or not in this version sharing

1695
01:41:10,329 --> 01:41:19,059
language but we'll see what happens so

1696
01:41:14,529 --> 01:41:20,590
at this point I need to use the same

1697
01:41:19,060 --> 01:41:26,200
kind of texture lookup we were using

1698
01:41:20,590 --> 01:41:28,690
here basically this is the sort of stuff

1699
01:41:26,199 --> 01:41:33,789
we need but we're going to be reading

1700
01:41:28,689 --> 01:41:36,339
from a we're going to be reading from a

1701
01:41:33,789 --> 01:41:39,399
multi sampled texture so it's going to

1702
01:41:36,340 --> 01:41:42,489
be slightly different so we don't need

1703
01:41:39,399 --> 01:41:52,599
any of this stuff we may want to do our

1704
01:41:42,489 --> 01:41:55,809
squaring for sample so we'll leave that

1705
01:41:52,600 --> 01:41:59,250
in for the moment but that's basically

1706
01:41:55,810 --> 01:42:04,450
over we would be looking at now our

1707
01:41:59,250 --> 01:42:05,859
result alpha it will also need to be

1708
01:42:04,449 --> 01:42:07,300
computed because we do actually care

1709
01:42:05,859 --> 01:42:09,729
what the alpha value is for compositing

1710
01:42:07,300 --> 01:42:11,560
later and we're going to need a four I

1711
01:42:09,729 --> 01:42:15,579
loop here essentially because we need to

1712
01:42:11,560 --> 01:42:20,190
loop over the number of samples and so

1713
01:42:15,579 --> 01:42:20,189
in here we probably need an in

1714
01:42:25,439 --> 01:42:32,559
that's going to tell us you know how

1715
01:42:29,920 --> 01:42:36,100
many samples there actually are that's

1716
01:42:32,560 --> 01:42:38,920
probably a constant we could use

1717
01:42:36,100 --> 01:42:42,930
that's predefined an open jail but I'm

1718
01:42:38,920 --> 01:42:45,510
not going to risk it for now right

1719
01:42:42,930 --> 01:42:51,780
I'm also going to make sure we have

1720
01:42:45,510 --> 01:42:53,710
[Applause]

1721
01:42:51,779 --> 01:42:54,969
assumed those are what those are

1722
01:42:53,710 --> 01:42:59,439
normally to find ads I don't really

1723
01:42:54,970 --> 01:43:01,960
remember anyway so if we have the sample

1724
01:42:59,439 --> 01:43:03,279
count and we want that to be actually

1725
01:43:01,960 --> 01:43:04,989
mounted again sorry we want that to be

1726
01:43:03,279 --> 01:43:08,829
uniform it's just going to be set in the

1727
01:43:04,989 --> 01:43:15,119
constant store what we should be able to

1728
01:43:08,829 --> 01:43:15,119
do is do a for loop from our samples

1729
01:43:15,779 --> 01:43:23,889
[Applause]

1730
01:43:21,510 --> 01:43:26,710
right so we just go through each sample

1731
01:43:23,890 --> 01:43:36,220
one by one inside the for loop we should

1732
01:43:26,710 --> 01:43:48,039
be able to sample them like so I and you

1733
01:43:36,220 --> 01:43:52,539
know like I said I really don't know how

1734
01:43:48,039 --> 01:43:58,960
well this is going to work but we'll

1735
01:43:52,539 --> 01:44:01,470
find out so we can get the color we can

1736
01:43:58,960 --> 01:44:01,470
get the depth

1737
01:44:05,289 --> 01:44:11,470
like so and then we want to do here is I

1738
01:44:08,619 --> 01:44:14,289
think we just want to figure out what

1739
01:44:11,470 --> 01:44:16,810
the max depth is now we probably have to

1740
01:44:14,289 --> 01:44:19,720
do this twice unfortunately because we

1741
01:44:16,810 --> 01:44:25,000
don't want to so many color values that

1742
01:44:19,720 --> 01:44:27,190
aren't the maximum depth right although

1743
01:44:25,000 --> 01:44:29,649
I guess what we can do I guess we can be

1744
01:44:27,189 --> 01:44:37,779
creative here so what we could do here

1745
01:44:29,649 --> 01:44:40,479
is is you know closest Jeff and I

1746
01:44:37,779 --> 01:44:43,300
believe our depth values the way that we

1747
01:44:40,479 --> 01:44:46,529
set them up you can see here is that we

1748
01:44:43,300 --> 01:44:48,970
discard anything where the clip depth

1749
01:44:46,529 --> 01:44:51,279
where the frag Z is less than the clip

1750
01:44:48,970 --> 01:44:58,780
depth so that means that lower values

1751
01:44:51,279 --> 01:45:01,269
are closer right to us so you know the

1752
01:44:58,779 --> 01:45:02,710
closest step here I assume we want to be

1753
01:45:01,270 --> 01:45:11,320
one pointer which is all the way back

1754
01:45:02,710 --> 01:45:13,810
right and as we go through we're going

1755
01:45:11,319 --> 01:45:17,380
to want to compare against back so if if

1756
01:45:13,810 --> 01:45:19,660
the depth value that we get here is less

1757
01:45:17,380 --> 01:45:21,520
than the closest step then it's our new

1758
01:45:19,659 --> 01:45:32,559
closer step or get away so that would be

1759
01:45:21,520 --> 01:45:34,540
at the closest depth is greater right so

1760
01:45:32,560 --> 01:45:36,400
that's just a way of picking out what

1761
01:45:34,539 --> 01:45:40,229
the close step is now we have to do

1762
01:45:36,399 --> 01:45:40,229
something with the color as well

1763
01:45:41,170 --> 01:45:47,640
[Applause]

1764
01:45:48,180 --> 01:45:55,360
now here is the dilemma right we have to

1765
01:45:52,659 --> 01:46:00,988
figure out what we're going to do with

1766
01:45:55,359 --> 01:46:00,988
this averaging process so

1767
01:46:13,409 --> 01:46:19,840
it's just so janky so here's the part

1768
01:46:17,470 --> 01:46:21,850
that I can't seem to grab my head around

1769
01:46:19,840 --> 01:46:23,500
exactly and we're basically out of time

1770
01:46:21,850 --> 01:46:25,450
for this that's good we probably want to

1771
01:46:23,500 --> 01:46:29,880
think on this overnight if there really

1772
01:46:25,449 --> 01:46:33,460
is anything that we can do here so

1773
01:46:29,880 --> 01:46:37,989
here's the problem if a primitive passes

1774
01:46:33,460 --> 01:46:41,199
through a pixel then we almost need to

1775
01:46:37,989 --> 01:46:43,719
just know which parts are part of that

1776
01:46:41,199 --> 01:46:47,409
primitive look we almost need to use the

1777
01:46:43,720 --> 01:46:49,030
primitive ID or something like that to

1778
01:46:47,409 --> 01:46:51,340
tell us how to plug together because if

1779
01:46:49,029 --> 01:46:54,699
we just use the DEF values we don't know

1780
01:46:51,340 --> 01:46:56,739
if two adjacent samples with differing

1781
01:46:54,699 --> 01:47:00,130
depth values both came from the same

1782
01:46:56,739 --> 01:47:02,429
primitive and they just happened to be a

1783
01:47:00,130 --> 01:47:06,489
you know on a slant to the viewer or

1784
01:47:02,430 --> 01:47:08,020
whether the depth values are different

1785
01:47:06,489 --> 01:47:15,609
because it actually represents two

1786
01:47:08,020 --> 01:47:17,290
separate things so yeah I don't know

1787
01:47:15,609 --> 01:47:19,269
even just looking at this I'm just

1788
01:47:17,289 --> 01:47:21,159
thinking I don't need this is going to

1789
01:47:19,270 --> 01:47:23,860
be one of those super nasty things if

1790
01:47:21,159 --> 01:47:25,569
you did it this way like the screen

1791
01:47:23,859 --> 01:47:27,579
space anti-aliasing and stuff like that

1792
01:47:25,569 --> 01:47:29,229
that never seems to work right where

1793
01:47:27,579 --> 01:47:31,359
you're always trying to compare depth

1794
01:47:29,229 --> 01:47:33,849
values and make guesses about what they

1795
01:47:31,359 --> 01:47:42,539
mean but you don't really have the

1796
01:47:33,850 --> 01:47:42,539
information you actually want yeah

1797
01:47:49,069 --> 01:48:23,668
so I have grave doubts about this let's

1798
01:48:14,399 --> 01:48:48,349
put this in there just to leave things

1799
01:48:23,668 --> 01:48:48,349
compiling all right

1800
01:48:50,840 --> 01:48:58,010
[Applause]

1801
01:48:54,020 --> 01:48:59,510
let's go to a really brief Q&amp;A here in

1802
01:48:58,010 --> 01:49:02,619
fact I probably don't have much time for

1803
01:48:59,510 --> 01:49:02,619
the Q&amp;A actually

1804
01:49:12,969 --> 01:49:18,500
because I got to go soon after this but

1805
01:49:15,639 --> 01:49:21,099
let's just let's just take a brief

1806
01:49:18,500 --> 01:49:21,099
gander

1807
01:49:46,229 --> 01:49:52,449
play so I think it will be useful to

1808
01:49:49,149 --> 01:49:56,079
bind the key to topmost window as there

1809
01:49:52,449 --> 01:49:58,869
is a key to fullscreen then you will not

1810
01:49:56,079 --> 01:50:05,710
have to resize your editor for live code

1811
01:49:58,869 --> 01:50:08,260
editing yeah that makes sense

1812
01:50:05,710 --> 01:50:12,359
also since I bound the thinkI I'm a

1813
01:50:08,260 --> 01:50:12,360
happy panda warm recommendations

1814
01:50:26,300 --> 01:50:37,168
why s32 for the camp instead of you 32 i

1815
01:50:30,649 --> 01:50:38,789
just because s 32 is I knew that int was

1816
01:50:37,168 --> 01:50:41,099
a thing they supported I couldn't

1817
01:50:38,788 --> 01:50:44,279
remember whether what the syntax was for

1818
01:50:41,099 --> 01:50:47,130
unsigned is I think it's done signed in

1819
01:50:44,279 --> 01:50:52,609
GLSL and I just didn't want to have to

1820
01:50:47,130 --> 01:50:52,609
check but you can use you 32 just fine

1821
01:51:02,159 --> 01:51:05,559
could you up the bitrate it's really

1822
01:51:04,539 --> 01:51:06,698
hard to watch when there's too much

1823
01:51:05,560 --> 01:51:08,830
movement on the screen it gets all

1824
01:51:06,698 --> 01:51:19,210
blurry and pixelated not exaggerating

1825
01:51:08,829 --> 01:51:20,979
when I say it makes my eyes watery so I

1826
01:51:19,210 --> 01:51:23,760
guess I don't know where that set

1827
01:51:20,979 --> 01:51:23,759
exactly

1828
01:51:30,130 --> 01:51:37,230
I guess that would be something I'd have

1829
01:51:32,139 --> 01:51:40,300
to change in my in my

1830
01:51:37,229 --> 01:51:40,299
[Music]

1831
01:51:44,920 --> 01:51:49,130
so I guess here's the question

1832
01:51:47,149 --> 01:51:52,729
are you sure that it's not twitch like

1833
01:51:49,130 --> 01:51:55,850
are you sure that it's actually me did

1834
01:51:52,729 --> 01:52:00,919
you see the same amount of blurriness if

1835
01:51:55,850 --> 01:52:04,960
you run it on YouTube or not at the

1836
01:52:00,920 --> 01:52:09,800
highest at 1080 if you do YouTube 1080

1837
01:52:04,960 --> 01:52:12,800
because I'm not sure which one you guys

1838
01:52:09,800 --> 01:52:14,690
I don't know what artifacts in terms of

1839
01:52:12,800 --> 01:52:22,310
the video you're actually talking about

1840
01:52:14,689 --> 01:52:24,619
there but it's e it either the fact that

1841
01:52:22,310 --> 01:52:28,600
twitch is doing that or that the bitrate

1842
01:52:24,619 --> 01:52:28,599
on OBS is just too low in general

1843
01:52:51,118 --> 01:52:54,029
all right so it doesn't look like

1844
01:52:52,408 --> 01:52:55,618
there's any substitute of questions at

1845
01:52:54,029 --> 01:52:57,899
the moment though so I'm going to go

1846
01:52:55,618 --> 01:53:00,649
ahead and wrap things up and we'll take

1847
01:52:57,899 --> 01:53:00,649
a look at this tomorrow

1848
01:53:06,109 --> 01:53:09,329
all right thank you everyone for joining

1849
01:53:08,128 --> 01:53:11,099
me for another episode of handmade

1850
01:53:09,328 --> 01:53:13,438
heroes and a pleasure coding with you as

1851
01:53:11,099 --> 01:53:14,550
always if you want to follow along

1852
01:53:13,439 --> 01:53:16,139
series at home you could always appear

1853
01:53:14,550 --> 01:53:18,300
to the game on handmade hero or come to

1854
01:53:16,139 --> 01:53:20,279
the source code so you can play around

1855
01:53:18,300 --> 01:53:22,439
with it and do your own experimentation

1856
01:53:20,279 --> 01:53:24,268
doesn't have a forum site and go to want

1857
01:53:22,439 --> 01:53:26,399
to ask questions a patreon page go to if

1858
01:53:24,269 --> 01:53:27,628
you want to sports video series schedule

1859
01:53:26,399 --> 01:53:28,919
box that lets you know when the Sirians

1860
01:53:27,628 --> 01:53:31,198
going to be live if you want to watch it

1861
01:53:28,918 --> 01:53:33,448
live and an episode guide with a new

1862
01:53:31,198 --> 01:53:36,299
pretty amazing search feature unless you

1863
01:53:33,448 --> 01:53:39,928
guys have seen this but SF gartner and

1864
01:53:36,300 --> 01:53:42,748
criminal dragon and mid blow and jaren

1865
01:53:39,929 --> 01:53:44,099
have all done some amazing work here so

1866
01:53:42,748 --> 01:53:46,708
you can actually go on here and search

1867
01:53:44,099 --> 01:53:48,510
for stuff now you can just go multi

1868
01:53:46,708 --> 01:53:50,788
sampling or whatever I don't know if I

1869
01:53:48,510 --> 01:53:52,079
spelled that right but you do that and

1870
01:53:50,788 --> 01:53:54,059
it comes up with all the times I've

1871
01:53:52,078 --> 01:53:55,708
talked about multi sampling and you can

1872
01:53:54,059 --> 01:53:57,059
click right on one of these and it jumps

1873
01:53:55,708 --> 01:54:00,809
right to the video which is kind of

1874
01:53:57,059 --> 01:54:02,939
Awesome I it's by far the best way to

1875
01:54:00,809 --> 01:54:05,820
find stuff in the in the series it's so

1876
01:54:02,939 --> 01:54:08,249
good how they recommend it alright

1877
01:54:05,819 --> 01:54:10,078
that's about it I will be back tomorrow

1878
01:54:08,248 --> 01:54:11,219
when we'll take another look at if

1879
01:54:10,078 --> 01:54:13,948
there's anything we could do with that

1880
01:54:11,219 --> 01:54:16,800
multi sampling before I just say the

1881
01:54:13,948 --> 01:54:17,878
heck with it we'll leave it as it is all

1882
01:54:16,800 --> 01:54:18,748
right thanks for joining me and see you

1883
01:54:17,878 --> 01:54:21,708
back here tomorrow

1884
01:54:18,748 --> 01:54:21,708
take it easy everybody

