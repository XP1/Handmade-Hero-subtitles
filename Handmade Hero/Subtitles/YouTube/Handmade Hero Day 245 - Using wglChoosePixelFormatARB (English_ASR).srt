1
00:00:02,689 --> 00:00:08,638
alrighty hello everyone and welcome to

2
00:00:05,129 --> 00:00:12,689
the handmade hero live stream where we

3
00:00:08,638 --> 00:00:14,548
code a complete game you know i'll be

4
00:00:12,689 --> 00:00:16,469
honest i thought we was gonna take us

5
00:00:14,548 --> 00:00:18,600
longer to do asynchronous texture

6
00:00:16,469 --> 00:00:22,410
uploads we ended up doing it in two days

7
00:00:18,600 --> 00:00:24,510
and most of the reason it wasn't done in

8
00:00:22,410 --> 00:00:26,309
one day was just because we never set

9
00:00:24,510 --> 00:00:27,960
the flag to actually tell it to download

10
00:00:26,309 --> 00:00:32,488
the textures so that was incredibly

11
00:00:27,960 --> 00:00:35,250
quick but there is one thing i wanted to

12
00:00:32,488 --> 00:00:37,109
note so before we get started today is

13
00:00:35,250 --> 00:00:38,219
day 2 45 i'll simply say if you're going

14
00:00:37,109 --> 00:00:40,469
to be flowing along today's coding

15
00:00:38,219 --> 00:00:42,808
unpacked day 244 so skirt source code

16
00:00:40,469 --> 00:00:44,460
into a directory if you pre-order the

17
00:00:42,808 --> 00:00:46,349
game on hammer here or when you download

18
00:00:44,460 --> 00:00:48,420
that you want to do 244 that's what i'm

19
00:00:46,350 --> 00:00:50,609
starting with today but i wanted to

20
00:00:48,420 --> 00:00:53,340
mention something which is that somebody

21
00:00:50,609 --> 00:00:55,109
asked about whether pixel buffer objects

22
00:00:53,340 --> 00:00:57,270
would be useful for asynchronous texture

23
00:00:55,109 --> 00:00:59,549
downloads and I wasn't really sure why

24
00:00:57,270 --> 00:01:01,530
they would be and so I went double

25
00:00:59,549 --> 00:01:04,829
checked about why you might use those in

26
00:01:01,530 --> 00:01:07,978
that context and ice eventually figured

27
00:01:04,829 --> 00:01:09,329
out why what I think might be the reason

28
00:01:07,978 --> 00:01:11,400
why you would associate them with

29
00:01:09,329 --> 00:01:12,420
texture downloads even though they

30
00:01:11,400 --> 00:01:17,969
really have nothing to do with texture

31
00:01:12,420 --> 00:01:21,439
downloads per se and that is I will draw

32
00:01:17,969 --> 00:01:21,438
this on the board quickly

33
00:01:21,959 --> 00:01:31,689
so here's day to 45p BOS so pixel that

34
00:01:30,519 --> 00:01:35,619
for optics and OpenGL are something that

35
00:01:31,689 --> 00:01:37,179
I don't use very often they're they're

36
00:01:35,620 --> 00:01:39,490
kind of old they've been around like

37
00:01:37,180 --> 00:01:41,350
actually very long time they're not a

38
00:01:39,489 --> 00:01:43,239
new feature but there's still

39
00:01:41,349 --> 00:01:46,539
potentially relevant feature and here is

40
00:01:43,239 --> 00:01:48,069
what essentially I would think you would

41
00:01:46,540 --> 00:01:51,219
do with them if you were trying to do

42
00:01:48,069 --> 00:01:53,759
fast texter downloading and you were

43
00:01:51,219 --> 00:01:56,140
going to use them for something so

44
00:01:53,760 --> 00:01:57,430
here's what actually has to happen and

45
00:01:56,140 --> 00:01:59,170
I'm going to draw a diagram that's a

46
00:01:57,430 --> 00:02:02,980
little more complicated than what we've

47
00:01:59,170 --> 00:02:06,219
been drawing before so you know we've

48
00:02:02,980 --> 00:02:10,990
been drawing GPU memory so here's GPU

49
00:02:06,219 --> 00:02:14,169
memory this here is what i call GPU

50
00:02:10,990 --> 00:02:15,610
visible memory what I'm sorry what I'm

51
00:02:14,169 --> 00:02:17,919
going to call it not what I cuss like I

52
00:02:15,610 --> 00:02:21,790
made up that word and here is the CPU

53
00:02:17,919 --> 00:02:24,250
memory okay and these are actually this

54
00:02:21,789 --> 00:02:26,409
is actually all cpu memory so this is

55
00:02:24,250 --> 00:02:28,479
main memory in the machine but the main

56
00:02:26,409 --> 00:02:31,090
memory and machine is not necessarily

57
00:02:28,479 --> 00:02:32,829
all the same and the reason that the

58
00:02:31,090 --> 00:02:35,640
memory in this in the machine is now the

59
00:02:32,830 --> 00:02:39,250
same is because certain parts of the

60
00:02:35,639 --> 00:02:42,519
memory in the machine may or may not be

61
00:02:39,250 --> 00:02:45,879
accessible by the GPU over the pci bus

62
00:02:42,520 --> 00:02:48,280
and some of it might be now the reason

63
00:02:45,879 --> 00:02:51,909
for this is because the GPU when it

64
00:02:48,280 --> 00:02:53,289
accesses things over the pci bus now go

65
00:02:51,909 --> 00:02:54,400
all the way back to a meter when we

66
00:02:53,289 --> 00:03:00,299
first started talking about memory

67
00:02:54,400 --> 00:03:03,689
remember there's virtual addresses and

68
00:03:00,300 --> 00:03:03,689
physical addresses

69
00:03:06,919 --> 00:03:11,899
right now what are these well virtual

70
00:03:10,340 --> 00:03:13,879
addresses are the addresses that we

71
00:03:11,900 --> 00:03:15,830
actually think about and use all the

72
00:03:13,879 --> 00:03:19,039
time right that's in our code when we

73
00:03:15,830 --> 00:03:20,959
say malik when we say this is a pointer

74
00:03:19,039 --> 00:03:22,609
and we look at the value of that pointer

75
00:03:20,959 --> 00:03:25,189
to the bugger we're looking at a virtual

76
00:03:22,610 --> 00:03:28,760
address that is not actually the

77
00:03:25,189 --> 00:03:33,199
physical bite in actual ram that we're

78
00:03:28,759 --> 00:03:36,500
reading so byte 0 a pointer or the value

79
00:03:33,199 --> 00:03:38,709
of zero in our world is an invalid

80
00:03:36,500 --> 00:03:42,229
pointer and it false if you read from it

81
00:03:38,709 --> 00:03:43,849
right a value of zero in physical

82
00:03:42,229 --> 00:03:48,199
addressing might just be the first bite

83
00:03:43,849 --> 00:03:50,449
right these things are not related so

84
00:03:48,199 --> 00:03:51,619
like we know and we covered many times

85
00:03:50,449 --> 00:03:54,439
so go back and watch it if you're not

86
00:03:51,620 --> 00:03:56,750
comfortable with this virtual addresses

87
00:03:54,439 --> 00:03:59,019
get translated to physical addresses in

88
00:03:56,750 --> 00:04:04,120
the CPU itself the CPU has something

89
00:03:59,019 --> 00:04:11,120
called a TLB this is a translation

90
00:04:04,120 --> 00:04:12,259
lookaside tickets look aside buffer and

91
00:04:11,120 --> 00:04:14,420
what this is is the thing that

92
00:04:12,259 --> 00:04:16,959
translates virtual addresses into

93
00:04:14,419 --> 00:04:20,509
physical addresses so when your program

94
00:04:16,959 --> 00:04:22,209
says I want to access this bite it's

95
00:04:20,509 --> 00:04:24,259
thinking in its virtual address space

96
00:04:22,209 --> 00:04:25,579
the CPU actually looks in the

97
00:04:24,259 --> 00:04:27,829
translation lookaside buffer and says

98
00:04:25,579 --> 00:04:30,918
what is the actual physical address for

99
00:04:27,829 --> 00:04:35,569
this thing and the TLB is like a cash

100
00:04:30,918 --> 00:04:37,430
for addresses right now if it's not in

101
00:04:35,569 --> 00:04:39,709
the TLB it's going to look up to the

102
00:04:37,430 --> 00:04:41,870
actual address translation tables right

103
00:04:39,709 --> 00:04:43,759
it's going to look up to the actual

104
00:04:41,870 --> 00:04:45,530
tables in the operating system that have

105
00:04:43,759 --> 00:04:47,300
set up for the whole translation and

106
00:04:45,529 --> 00:04:48,259
this is a slower process but most of the

107
00:04:47,300 --> 00:04:50,569
time it's hitting that translation

108
00:04:48,259 --> 00:04:52,069
lookaside buffer and you're just

109
00:04:50,569 --> 00:04:54,288
figuring out with the phys lab in you're

110
00:04:52,069 --> 00:04:55,519
going get it ok we're not going to

111
00:04:54,288 --> 00:04:56,689
recover all of this because we talked

112
00:04:55,519 --> 00:04:58,478
about this a long time ago and handmade

113
00:04:56,689 --> 00:05:00,620
hero we're not going to talk about that

114
00:04:58,478 --> 00:05:03,649
instead all I'm trying to point out is

115
00:05:00,620 --> 00:05:05,360
the GPU doesn't have access to any of

116
00:05:03,649 --> 00:05:07,219
that the translation lookaside buffer

117
00:05:05,360 --> 00:05:09,319
and all the other stuff that's used to

118
00:05:07,220 --> 00:05:11,690
translate virtual addresses into

119
00:05:09,319 --> 00:05:14,990
physical addresses is not present on the

120
00:05:11,689 --> 00:05:17,329
GPU its present on the cpu and so when

121
00:05:14,990 --> 00:05:19,158
the GPU wants to access a memory that's

122
00:05:17,329 --> 00:05:20,329
in main system memory because it's

123
00:05:19,158 --> 00:05:22,430
trying to read like

124
00:05:20,329 --> 00:05:24,469
example our texture data out of it to

125
00:05:22,430 --> 00:05:26,509
bring it down to the card so that it can

126
00:05:24,470 --> 00:05:28,909
store it it's just trying to fetch it it

127
00:05:26,509 --> 00:05:31,759
has to use a physical address and what

128
00:05:28,908 --> 00:05:35,478
that means is that while this is going

129
00:05:31,759 --> 00:05:37,848
on while it's grabbing texture data if

130
00:05:35,478 --> 00:05:39,468
here's a big chunk of texture data it

131
00:05:37,848 --> 00:05:42,468
can't be something that's being

132
00:05:39,468 --> 00:05:44,990
virtually addressed somewhere by the CPU

133
00:05:42,468 --> 00:05:46,879
in a way that could move around right

134
00:05:44,990 --> 00:05:48,319
because remember one of the big things

135
00:05:46,879 --> 00:05:49,939
about virtual addressing is we don't

136
00:05:48,319 --> 00:05:51,348
even know if our memories resonant the

137
00:05:49,939 --> 00:05:53,330
operating system could take our memory

138
00:05:51,348 --> 00:05:54,769
and page it out to disk and just leave

139
00:05:53,329 --> 00:05:56,389
it there and then only when we go to

140
00:05:54,769 --> 00:05:59,149
accesses again and cause a page fault

141
00:05:56,389 --> 00:06:01,370
it'll go oh wait he was axing that

142
00:05:59,149 --> 00:06:02,538
memory I put that memory on the disk I'm

143
00:06:01,370 --> 00:06:06,139
gonna go get it and I'll put it back

144
00:06:02,538 --> 00:06:07,550
here and now we're good right or even if

145
00:06:06,139 --> 00:06:09,530
it doesn't choose to do that it could

146
00:06:07,550 --> 00:06:11,930
rearrange the memory in physical space

147
00:06:09,529 --> 00:06:13,579
if it wanted to for some reason and just

148
00:06:11,930 --> 00:06:15,199
swap where our virtual pages were

149
00:06:13,579 --> 00:06:16,968
pointing to in virtual space right

150
00:06:15,199 --> 00:06:18,228
because all we know is our virtualize do

151
00:06:16,968 --> 00:06:22,218
we have no idea what the physical

152
00:06:18,228 --> 00:06:24,139
address is underneath so what that means

153
00:06:22,218 --> 00:06:27,668
is during the operation during the

154
00:06:24,139 --> 00:06:30,590
transfer of the texture that whole time

155
00:06:27,668 --> 00:06:32,658
the texture has to be in memory that's

156
00:06:30,589 --> 00:06:35,750
visible to the GPU which means it has to

157
00:06:32,658 --> 00:06:37,129
be in physical right memory it can't be

158
00:06:35,750 --> 00:06:39,439
paged out to disk or something because

159
00:06:37,129 --> 00:06:41,750
GPU and access in the disk ask me in

160
00:06:39,439 --> 00:06:44,180
physical memory and it has to be locked

161
00:06:41,750 --> 00:06:46,459
down meaning the operating system has to

162
00:06:44,180 --> 00:06:48,650
know that it's in the middle of a

163
00:06:46,459 --> 00:06:52,189
transfer and it could not decide to

164
00:06:48,649 --> 00:06:54,948
evict that page or pages of memory from

165
00:06:52,189 --> 00:06:57,288
physical memory into virtual storage

166
00:06:54,949 --> 00:06:58,699
memory on disk because that would

167
00:06:57,288 --> 00:07:05,598
immediately ruin the transfer and the

168
00:06:58,699 --> 00:07:08,360
GPU would get garbage so what does that

169
00:07:05,598 --> 00:07:10,699
mean to us in practice well what it

170
00:07:08,360 --> 00:07:15,199
means to us in practice is that if we

171
00:07:10,699 --> 00:07:17,750
have a call like GL text image right and

172
00:07:15,199 --> 00:07:19,639
we pass a pointer to some texture memory

173
00:07:17,750 --> 00:07:21,050
like we did and we say here is the

174
00:07:19,639 --> 00:07:23,329
texture memory we want you to transfer

175
00:07:21,050 --> 00:07:25,939
it well what it's going to have to do is

176
00:07:23,329 --> 00:07:27,528
going to take it from our texture memory

177
00:07:25,939 --> 00:07:29,060
right because this is our virtual

178
00:07:27,528 --> 00:07:33,750
addressing pointer that we're passing

179
00:07:29,060 --> 00:07:37,569
here that memory was allocated by us

180
00:07:33,750 --> 00:07:40,449
right it has no it has none of the

181
00:07:37,569 --> 00:07:42,009
criteria that the GPU might require the

182
00:07:40,449 --> 00:07:44,079
operating system has not been told that

183
00:07:42,009 --> 00:07:45,460
it was locked it is not necessarily in a

184
00:07:44,079 --> 00:07:47,168
range of memory that's accessible to the

185
00:07:45,459 --> 00:07:49,089
GPU if there are range restrictions on

186
00:07:47,168 --> 00:07:50,348
what part of the physical act memory it

187
00:07:49,089 --> 00:07:53,109
can access like maybe can only access

188
00:07:50,348 --> 00:07:54,848
the low four gigabytes of 16 gigabytes

189
00:07:53,110 --> 00:07:57,280
of memory right could be altered it

190
00:07:54,848 --> 00:07:58,839
could be aligned wrong maybe maybe GPU

191
00:07:57,279 --> 00:08:00,158
access memory has to be aligned on page

192
00:07:58,839 --> 00:08:02,228
boundaries so maybe the pointer has to

193
00:08:00,158 --> 00:08:03,848
be out of the page memory who knows

194
00:08:02,228 --> 00:08:08,050
there's all sorts of things that could

195
00:08:03,848 --> 00:08:10,209
be true none of that's true about our

196
00:08:08,050 --> 00:08:14,168
pointer necessarily so what the driver

197
00:08:10,209 --> 00:08:17,859
has to do first is copy it from the

198
00:08:14,168 --> 00:08:19,750
pointer where we loaded it into CPU

199
00:08:17,860 --> 00:08:23,020
memory not transfer GV just just a copy

200
00:08:19,750 --> 00:08:25,959
just a literally a mem copy into some

201
00:08:23,019 --> 00:08:29,528
region of its driver controlled GPU

202
00:08:25,959 --> 00:08:32,490
memory that's set up for the GPU to read

203
00:08:29,528 --> 00:08:34,990
it and then it copies it across the bus

204
00:08:32,490 --> 00:08:36,959
so when the person was asking about

205
00:08:34,990 --> 00:08:39,009
texture downloads being optimized by

206
00:08:36,958 --> 00:08:41,768
pixel buffer objects and where we use

207
00:08:39,009 --> 00:08:44,559
them I believe and I'm not a GP you guys

208
00:08:41,769 --> 00:08:45,669
so again you know take my take my ex

209
00:08:44,559 --> 00:08:48,309
nice with a grain of salt they're

210
00:08:45,669 --> 00:08:50,169
roughly correct I suspect however I am

211
00:08:48,309 --> 00:08:51,458
NOT a grep GPU expert in so there's

212
00:08:50,169 --> 00:08:54,189
probably details that are not quite

213
00:08:51,458 --> 00:08:57,909
bright and these things change every

214
00:08:54,190 --> 00:09:00,339
year is the other thing but anyway so

215
00:08:57,909 --> 00:09:03,159
the answer is pixel buffer objects don't

216
00:09:00,339 --> 00:09:05,380
help you do texture transfers to the GPU

217
00:09:03,159 --> 00:09:07,389
at all they are completely unrelated and

218
00:09:05,379 --> 00:09:11,649
would not optimize the GPU transfer at

219
00:09:07,389 --> 00:09:14,588
all but what they would optimize is this

220
00:09:11,649 --> 00:09:16,120
copy because if you were to use a pixel

221
00:09:14,589 --> 00:09:18,399
buffer object but a pixel buff Roberts's

222
00:09:16,120 --> 00:09:21,009
is a piece of GPU memory that you can

223
00:09:18,399 --> 00:09:23,889
lock and right into so if you were

224
00:09:21,009 --> 00:09:26,350
worried about the cost of copying the

225
00:09:23,889 --> 00:09:28,539
texture in the download from the cpu

226
00:09:26,350 --> 00:09:30,730
memory to the other part of CPU memory

227
00:09:28,539 --> 00:09:34,179
which is required for the texture

228
00:09:30,730 --> 00:09:37,930
download then the pixel buffer object

229
00:09:34,179 --> 00:09:39,669
would help you so if you find that you

230
00:09:37,929 --> 00:09:41,828
need to further optimize your texture

231
00:09:39,669 --> 00:09:43,509
transfers it could be the case if you're

232
00:09:41,828 --> 00:09:46,359
stripping them if you're out stripping

233
00:09:43,509 --> 00:09:46,689
memory bandwidth CPU memory bandwidth

234
00:09:46,360 --> 00:09:49,210
not

235
00:09:46,690 --> 00:09:50,440
the pci bus bandwidth but cpu memory

236
00:09:49,210 --> 00:09:54,129
bandwidth is becoming a bottleneck for

237
00:09:50,440 --> 00:09:56,800
you then that absolutely could be a time

238
00:09:54,129 --> 00:09:59,529
when pixel buffer objects could help you

239
00:09:56,799 --> 00:10:01,299
potentially if that is what your problem

240
00:09:59,529 --> 00:10:03,250
is right so they're never going to

241
00:10:01,299 --> 00:10:05,500
accelerate this part of the process but

242
00:10:03,250 --> 00:10:07,360
this is only one part of the process and

243
00:10:05,500 --> 00:10:08,799
this process part of the process over

244
00:10:07,360 --> 00:10:10,810
here they could help you with

245
00:10:08,799 --> 00:10:12,279
potentially now again that depends on

246
00:10:10,809 --> 00:10:13,479
the card it depends on the driver

247
00:10:12,279 --> 00:10:14,409
defense of the vendor depends of the

248
00:10:13,480 --> 00:10:16,480
operating system all these are the

249
00:10:14,409 --> 00:10:18,129
things whether that really can help you

250
00:10:16,480 --> 00:10:19,570
or not whether the pixel buffer actually

251
00:10:18,129 --> 00:10:23,080
is better or not blah blah blah blah

252
00:10:19,570 --> 00:10:24,460
blah right but the point is that is

253
00:10:23,080 --> 00:10:25,960
where they could come in so I wanted to

254
00:10:24,460 --> 00:10:27,580
clarify that from yesterday because I

255
00:10:25,960 --> 00:10:28,750
didn't really know when the person has

256
00:10:27,580 --> 00:10:31,090
question I was like I don't really know

257
00:10:28,750 --> 00:10:33,039
what those would do for you but that's

258
00:10:31,090 --> 00:10:36,370
something that I believe they could do

259
00:10:33,039 --> 00:10:37,829
for you and so you know that if that's a

260
00:10:36,370 --> 00:10:42,690
situation that you found yourself in

261
00:10:37,830 --> 00:10:44,770
that might be something to examine and

262
00:10:42,690 --> 00:10:46,780
we could implement that relatively easy

263
00:10:44,769 --> 00:10:49,269
on him a hero what we would do is we

264
00:10:46,779 --> 00:10:51,459
would create one pixel buffer object

265
00:10:49,269 --> 00:10:53,980
probably actually a pair I'm guessing of

266
00:10:51,460 --> 00:10:56,290
pixel buffer objects for each of our

267
00:10:53,980 --> 00:10:57,820
worker threads and then we would write

268
00:10:56,289 --> 00:11:00,490
into one while the other one was

269
00:10:57,820 --> 00:11:02,320
downloading and then swap right so we'd

270
00:11:00,490 --> 00:11:05,860
like ping pong our pixel buffer objects

271
00:11:02,320 --> 00:11:07,120
back and forth basically and I don't

272
00:11:05,860 --> 00:11:08,500
really know maybe in certain

273
00:11:07,120 --> 00:11:10,810
circumstances you might even want a

274
00:11:08,500 --> 00:11:12,879
deeper q than two because remember it's

275
00:11:10,809 --> 00:11:14,619
locked memory so you wouldn't want to

276
00:11:12,879 --> 00:11:17,110
like lock the pistol buffer object copy

277
00:11:14,620 --> 00:11:19,210
into it unlock it transfer lock it again

278
00:11:17,110 --> 00:11:21,970
copy into it transfer because that

279
00:11:19,210 --> 00:11:23,800
second lock is gonna thrash right it's

280
00:11:21,970 --> 00:11:25,570
like it's gotta wait for that download

281
00:11:23,799 --> 00:11:28,870
to continue or remap the pixel buff

282
00:11:25,570 --> 00:11:30,400
Robert to a new location right and so

283
00:11:28,870 --> 00:11:31,720
what you'd want to do is make it so it

284
00:11:30,399 --> 00:11:33,579
doesn't have to do that and so you'd

285
00:11:31,720 --> 00:11:35,680
want to have kind of a rolling set of

286
00:11:33,580 --> 00:11:37,660
pixel buffers where you could lock and

287
00:11:35,679 --> 00:11:40,149
right into one while it was transferring

288
00:11:37,659 --> 00:11:41,799
out of another then switch so now you're

289
00:11:40,149 --> 00:11:43,360
reading writing into the other one law

290
00:11:41,799 --> 00:11:45,009
is transferring out of a new one and you

291
00:11:43,360 --> 00:11:46,450
ping pong back and forth we do that for

292
00:11:45,009 --> 00:11:47,980
each of our worker threads and then they

293
00:11:46,450 --> 00:11:50,560
could all do just hammering on that all

294
00:11:47,980 --> 00:11:51,909
the time and that'd be a really easy

295
00:11:50,559 --> 00:11:53,439
thing for you do if that's what you care

296
00:11:51,909 --> 00:11:54,399
about exercise left for the reader I

297
00:11:53,440 --> 00:11:57,040
don't particularly care about that right

298
00:11:54,399 --> 00:12:00,100
now but a very easy to implement that's

299
00:11:57,039 --> 00:12:00,309
what we would do you'd go get that get

300
00:12:00,100 --> 00:12:02,409
those

301
00:12:00,309 --> 00:12:04,239
extensions load in the function pointers

302
00:12:02,409 --> 00:12:06,250
those tensions create the pics of

303
00:12:04,240 --> 00:12:10,810
efforts for each worker thread and then

304
00:12:06,250 --> 00:12:12,370
when you wanted to do the texture stuff

305
00:12:10,809 --> 00:12:16,209
instead of the allocate texture

306
00:12:12,370 --> 00:12:18,190
happening after the load we would run

307
00:12:16,210 --> 00:12:19,660
the allocate texture before the load and

308
00:12:18,190 --> 00:12:21,100
really all it would be it we probably

309
00:12:19,659 --> 00:12:25,409
wouldn't actually be an alki texture

310
00:12:21,100 --> 00:12:25,409
what it would actually be is just a call

311
00:12:25,950 --> 00:12:32,560
to to get the free the currently free

312
00:12:28,809 --> 00:12:34,059
pixel ever so so there you go i think it

313
00:12:32,559 --> 00:12:35,639
might have been cuba Caleb who answered

314
00:12:34,059 --> 00:12:38,199
that question who asked that question

315
00:12:35,639 --> 00:12:39,610
who's a long time for the series I just

316
00:12:38,200 --> 00:12:43,240
so I just wanted to clear that up for

317
00:12:39,610 --> 00:12:45,129
him or her I don't actually know I never

318
00:12:43,240 --> 00:12:47,379
actually know what the right pardon is

319
00:12:45,129 --> 00:12:49,750
for for a lot of people because i only

320
00:12:47,379 --> 00:12:54,039
see a handle on the chat and handles are

321
00:12:49,750 --> 00:12:58,720
usually genderless so anyway let's go

322
00:12:54,039 --> 00:13:02,169
ahead and save that off and then close

323
00:12:58,720 --> 00:13:04,420
and get back to what we were doing which

324
00:13:02,169 --> 00:13:06,250
was just cleaning up our OpenGL startup

325
00:13:04,419 --> 00:13:08,379
code to do something that it was not

326
00:13:06,250 --> 00:13:11,230
doing originally that's not super

327
00:13:08,379 --> 00:13:12,610
critical so if it doesn't work meaning

328
00:13:11,230 --> 00:13:13,990
the graphics card doesn't support it for

329
00:13:12,610 --> 00:13:17,649
some reason oh wait I don't need my

330
00:13:13,990 --> 00:13:19,240
Emacs anymore we've got for it if it

331
00:13:17,649 --> 00:13:22,120
doesn't work for some reason that's

332
00:13:19,240 --> 00:13:23,830
actually okay we can actually live

333
00:13:22,120 --> 00:13:25,690
without it and so our startup code is

334
00:13:23,830 --> 00:13:28,060
written to essentially ignore it if it

335
00:13:25,690 --> 00:13:29,770
doesn't work but we did want to try and

336
00:13:28,059 --> 00:13:32,379
make it work if we could and what that

337
00:13:29,769 --> 00:13:34,539
is is srgb on the destination frame

338
00:13:32,379 --> 00:13:35,830
buffer because like I said all of our

339
00:13:34,539 --> 00:13:38,439
rendering we did in hand right here was

340
00:13:35,830 --> 00:13:41,050
attempting to be roughly gamma correct

341
00:13:38,440 --> 00:13:43,600
it was actually using squared instead of

342
00:13:41,049 --> 00:13:46,899
full srgb mapping in order to make it

343
00:13:43,600 --> 00:13:48,399
faster in the software renderer but you

344
00:13:46,899 --> 00:13:50,169
know we still wanted to have that gamma

345
00:13:48,399 --> 00:13:52,600
crack step and so we're in we're trying

346
00:13:50,169 --> 00:13:55,269
now to make it so that the frame buffer

347
00:13:52,600 --> 00:14:01,990
is marked that way and so if we take a

348
00:13:55,269 --> 00:14:05,740
look at win32 handmade in here we have

349
00:14:01,990 --> 00:14:07,839
our srgb frame buffer request oops we

350
00:14:05,740 --> 00:14:10,680
have our srgb frame buffer request in

351
00:14:07,839 --> 00:14:13,980
here somewhere at least I think we do

352
00:14:10,679 --> 00:14:13,979
rain buffer

353
00:14:14,089 --> 00:14:18,720
you ever put it in I guess we didn't I

354
00:14:17,039 --> 00:14:20,159
guess we haven't gotten there yet I

355
00:14:18,720 --> 00:14:22,560
guess we're still using wiggle choose

356
00:14:20,159 --> 00:14:24,809
pixel format without it in there yeah it

357
00:14:22,559 --> 00:14:25,949
doesn't appear to be in there so so

358
00:14:24,809 --> 00:14:28,169
nevermind I take it back we haven't

359
00:14:25,950 --> 00:14:29,820
quite gotten there yet so what we were

360
00:14:28,169 --> 00:14:31,559
trying to do is we were trying to

361
00:14:29,820 --> 00:14:33,300
specify that we wanted an srgb frame

362
00:14:31,559 --> 00:14:37,309
buffer now in order to do that you can't

363
00:14:33,299 --> 00:14:40,199
use the standard way that opengl creates

364
00:14:37,309 --> 00:14:42,239
context which is the old wiggle way of

365
00:14:40,200 --> 00:14:43,800
doing it with choose pixel format this

366
00:14:42,240 --> 00:14:46,320
goes through GDI basically with choose

367
00:14:43,799 --> 00:14:47,939
pixel format and then set pixel format

368
00:14:46,320 --> 00:14:49,589
well you actually have to do is call

369
00:14:47,940 --> 00:14:51,750
this extended wiggle choose pixel format

370
00:14:49,589 --> 00:14:53,310
ARB which is an extension to OpenGL

371
00:14:51,750 --> 00:14:54,958
which allows you to specify a lot more

372
00:14:53,309 --> 00:14:56,399
different things and you specify them in

373
00:14:54,958 --> 00:14:57,838
this little parameter list now you can

374
00:14:56,399 --> 00:14:59,850
see here that we've done all this work

375
00:14:57,839 --> 00:15:02,970
we wrote it and we're like okay good

376
00:14:59,850 --> 00:15:04,290
we're ready to go unfortunately it turns

377
00:15:02,970 --> 00:15:06,990
out you can't actually do this because

378
00:15:04,289 --> 00:15:09,230
wiggle and we sort of knew this wiggle

379
00:15:06,990 --> 00:15:13,200
get proc address doesn't really work

380
00:15:09,230 --> 00:15:16,680
until after you've created a context

381
00:15:13,200 --> 00:15:18,270
okay so this thing right here where we

382
00:15:16,679 --> 00:15:21,870
call wiggle create context on this

383
00:15:18,269 --> 00:15:26,750
opengl SRC and wiggle make current that

384
00:15:21,870 --> 00:15:29,959
process actually needs to have happened

385
00:15:26,750 --> 00:15:34,139
beforehand so we're left in a situation

386
00:15:29,958 --> 00:15:36,569
where we need to essentially move this

387
00:15:34,139 --> 00:15:39,679
right here we need to move this down

388
00:15:36,570 --> 00:15:44,060
right this needs to actually happen

389
00:15:39,679 --> 00:15:47,159
after we already have a context created

390
00:15:44,059 --> 00:15:54,389
okay so that's like something like this

391
00:15:47,159 --> 00:15:55,828
if that makes sense so here is what we

392
00:15:54,389 --> 00:15:57,480
would need to do we need to do wiggle

393
00:15:55,828 --> 00:15:59,458
make current and then we could go ahead

394
00:15:57,480 --> 00:16:01,800
and get our get proc address for choose

395
00:15:59,458 --> 00:16:05,819
pixel format and if we got it we could

396
00:16:01,799 --> 00:16:07,919
do a new pixel format right but the

397
00:16:05,820 --> 00:16:09,990
problem is we've already set the pixel

398
00:16:07,919 --> 00:16:12,240
format and we've already called wiggle

399
00:16:09,990 --> 00:16:14,070
make current and so what we would have

400
00:16:12,240 --> 00:16:15,870
to do here and I thought about this and

401
00:16:14,070 --> 00:16:18,060
I think this might actually work so I'm

402
00:16:15,870 --> 00:16:20,070
going to go ahead and try it and also I

403
00:16:18,059 --> 00:16:22,219
guess this stuff right here comes down

404
00:16:20,070 --> 00:16:25,300
as well right so that goes in there and

405
00:16:22,220 --> 00:16:27,220
this is always now has to happen

406
00:16:25,299 --> 00:16:30,479
right all of this is stuff that has to

407
00:16:27,220 --> 00:16:33,639
occur because we always have to do this

408
00:16:30,480 --> 00:16:35,709
this path at least once so we need to do

409
00:16:33,639 --> 00:16:37,720
a choose pixel format the old way one

410
00:16:35,708 --> 00:16:39,958
time set the pixel format to make sure

411
00:16:37,720 --> 00:16:42,519
that our create context will succeed

412
00:16:39,958 --> 00:16:45,458
assuming because i I don't I don't

413
00:16:42,519 --> 00:16:46,959
really know if we can guarantee that all

414
00:16:45,458 --> 00:16:49,028
machines wiggle create context would

415
00:16:46,958 --> 00:16:52,208
succeed if we didn't first set the pixel

416
00:16:49,028 --> 00:16:55,139
format to one that supports OpenGL right

417
00:16:52,208 --> 00:16:58,328
so that's why I think we have to do that

418
00:16:55,139 --> 00:16:59,620
so then we come down on here and we do

419
00:16:58,328 --> 00:17:01,989
this sort of separate pixel format

420
00:16:59,620 --> 00:17:02,889
situation right and by the way I suspect

421
00:17:01,990 --> 00:17:05,439
that we're going to have to do a thing

422
00:17:02,889 --> 00:17:07,240
here where we set double buffered to

423
00:17:05,439 --> 00:17:08,650
false potentially in order to make

424
00:17:07,240 --> 00:17:09,730
streaming still work so we'll check at

425
00:17:08,650 --> 00:17:11,500
the end of the stream to make sure we

426
00:17:09,730 --> 00:17:19,120
can this is again the sort of the

427
00:17:11,500 --> 00:17:21,308
streaming situation but anyway so this

428
00:17:19,119 --> 00:17:23,109
this GL double buffer arm set to true we

429
00:17:21,308 --> 00:17:23,980
may have to set that to false basically

430
00:17:23,109 --> 00:17:26,438
in order to get the streaming to work

431
00:17:23,980 --> 00:17:28,929
we'll find out but point being here we

432
00:17:26,439 --> 00:17:31,120
are after the wiggle make current and

433
00:17:28,929 --> 00:17:33,190
what I'm thinking and I don't actually

434
00:17:31,119 --> 00:17:35,049
know if this is the case or not but what

435
00:17:33,190 --> 00:17:42,400
I was thinking is why couldn't we just

436
00:17:35,049 --> 00:17:46,589
do this if we just get rid of that

437
00:17:42,400 --> 00:17:49,660
context entirely right and say say like

438
00:17:46,589 --> 00:17:51,369
we just straight-up deleted or leave it

439
00:17:49,660 --> 00:17:53,529
in place and delete it later or who

440
00:17:51,369 --> 00:17:56,949
knows what can we just set the pixel

441
00:17:53,529 --> 00:17:59,558
format again right and I don't know I

442
00:17:56,950 --> 00:18:02,679
have absolutely no idea if that's true

443
00:17:59,558 --> 00:18:04,629
or not so we'll just see if we can I

444
00:18:02,679 --> 00:18:06,250
don't know if it's well documented I

445
00:18:04,630 --> 00:18:07,900
have absolutely no idea but we can

446
00:18:06,250 --> 00:18:10,349
certainly go ahead and see in here we

447
00:18:07,900 --> 00:18:14,740
could say if extended pic worked right

448
00:18:10,349 --> 00:18:16,509
then set the pixel format seems like

449
00:18:14,740 --> 00:18:17,710
it's worth a shot so I'm just going to

450
00:18:16,509 --> 00:18:20,410
see what happens if we do that because

451
00:18:17,710 --> 00:18:22,480
I'm curious and we'd have to test this

452
00:18:20,410 --> 00:18:24,759
on multiple machines potentially to

453
00:18:22,480 --> 00:18:27,940
figure out a bunch of stuff to figure

454
00:18:24,759 --> 00:18:32,429
out essentially whether or not you can

455
00:18:27,940 --> 00:18:32,429
actually do this I have no idea but

456
00:18:34,400 --> 00:18:38,820
here is a version that does it that way

457
00:18:37,440 --> 00:18:41,029
and I'm going to go ahead and to the

458
00:18:38,819 --> 00:18:43,919
bugger and step in and see if that works

459
00:18:41,029 --> 00:18:45,269
and maybe we can check with some OpenGL

460
00:18:43,920 --> 00:18:47,190
driver people to ask them if it actually

461
00:18:45,269 --> 00:18:48,389
will if it does work if it works on if

462
00:18:47,190 --> 00:18:52,259
it would work on people's machines in

463
00:18:48,390 --> 00:18:54,900
general so let's go ahead and step

464
00:18:52,259 --> 00:18:57,839
through here we make current this this

465
00:18:54,900 --> 00:18:59,759
guy which is our old school context

466
00:18:57,839 --> 00:19:01,679
which can't do anything then we make

467
00:18:59,759 --> 00:19:04,289
current zero which says okay this thread

468
00:19:01,680 --> 00:19:06,660
no longer has a current opengl context

469
00:19:04,289 --> 00:19:07,950
this thread doesn't have one at all so

470
00:19:06,660 --> 00:19:10,230
now we see if we can get wiggle choose

471
00:19:07,950 --> 00:19:11,460
pixel format ARB we can't so it looks

472
00:19:10,230 --> 00:19:14,490
like the wiggle make current would have

473
00:19:11,460 --> 00:19:18,120
to happen after we got that call I guess

474
00:19:14,490 --> 00:19:19,980
right so I'm going to see if I'm gonna

475
00:19:18,119 --> 00:19:21,149
see what happens if we do that you have

476
00:19:19,980 --> 00:19:22,410
the other thing too is I don't even know

477
00:19:21,150 --> 00:19:25,380
if we have to do the widow make current

478
00:19:22,410 --> 00:19:26,279
now that i think about it i'm gonna you

479
00:19:25,380 --> 00:19:30,870
know what i should probably just try

480
00:19:26,279 --> 00:19:36,180
this first like can we just straight up

481
00:19:30,869 --> 00:19:38,819
set the pixel format yeah can we just

482
00:19:36,180 --> 00:19:41,759
straight up set the pixel format without

483
00:19:38,819 --> 00:19:43,829
that and i don't know so here's a will

484
00:19:41,759 --> 00:19:45,960
make current there's our choose pixel

485
00:19:43,829 --> 00:19:47,939
for my ARB and we got it assuming we get

486
00:19:45,960 --> 00:19:51,059
it we can now do to fix a format again

487
00:19:47,940 --> 00:19:52,620
we get the extended pic back and we've

488
00:19:51,059 --> 00:19:55,379
got our stress and pistol format indexes

489
00:19:52,619 --> 00:19:58,889
to you know I should have looked what it

490
00:19:55,380 --> 00:20:01,250
was before hand probably the same one

491
00:19:58,890 --> 00:20:01,250
right

492
00:20:02,000 --> 00:20:06,289
such a visit furnace one all right so it

493
00:20:04,940 --> 00:20:08,690
actually goes back 20 probably cuz the

494
00:20:06,289 --> 00:20:11,629
double buffer we do an extended pick is

495
00:20:08,690 --> 00:20:14,269
24 that means there are 24 formats that

496
00:20:11,630 --> 00:20:16,730
matched right so now we're going to try

497
00:20:14,269 --> 00:20:20,299
doing set pixel format and I think set

498
00:20:16,730 --> 00:20:21,680
pixel format probably does a return that

499
00:20:20,299 --> 00:20:23,809
tells us what happened I would suspect

500
00:20:21,680 --> 00:20:26,900
so let's go ahead and see what it

501
00:20:23,809 --> 00:20:28,549
actually returns now i'm going to verify

502
00:20:26,900 --> 00:20:30,769
that it's at pixel format i'm assuming

503
00:20:28,549 --> 00:20:36,109
that it has like a bool return or

504
00:20:30,769 --> 00:20:37,910
something bool so presumably just as

505
00:20:36,109 --> 00:20:39,709
true if it succeeds false if it doesn't

506
00:20:37,910 --> 00:20:40,759
so we're going to see what that actually

507
00:20:39,710 --> 00:20:42,079
was now you notice I didn't capture

508
00:20:40,759 --> 00:20:43,430
Turing value here but that's ok because

509
00:20:42,079 --> 00:20:47,449
like we talked about in streams it's a

510
00:20:43,430 --> 00:20:49,549
couple days ago on the pre stream the

511
00:20:47,450 --> 00:20:51,019
return value is always stored in eax if

512
00:20:49,549 --> 00:20:53,359
it fits and of course a boolean would

513
00:20:51,019 --> 00:20:54,980
absolutely fit so when we call set pixel

514
00:20:53,359 --> 00:20:56,869
format and we go through this call here

515
00:20:54,980 --> 00:20:59,390
if you look at the registers and we see

516
00:20:56,869 --> 00:21:01,159
what's in eax and again i always call

517
00:20:59,390 --> 00:21:02,570
eax force of habit it's actually called

518
00:21:01,160 --> 00:21:05,590
our ax when you're talking about the

519
00:21:02,569 --> 00:21:09,019
full 64-bit range eax is only the bottom

520
00:21:05,589 --> 00:21:11,179
32 bits it's just that's how they it's

521
00:21:09,019 --> 00:21:13,759
always like expand it was ax and it was

522
00:21:11,180 --> 00:21:17,509
eax it was our ax write it like keeps

523
00:21:13,759 --> 00:21:20,720
getting extended as it gets bigger in

524
00:21:17,509 --> 00:21:22,940
size but anyway so we do our call to set

525
00:21:20,720 --> 00:21:24,769
pixel format and it looks like that did

526
00:21:22,940 --> 00:21:26,990
not succeed right that's a zero in there

527
00:21:24,769 --> 00:21:29,450
so it looks like we can't quite do that

528
00:21:26,990 --> 00:21:31,279
without getting rid of that initial one

529
00:21:29,450 --> 00:21:32,150
so again i'm just doing trial and error

530
00:21:31,279 --> 00:21:33,889
here because this is the thing i don't

531
00:21:32,150 --> 00:21:35,330
know and i don't have any good

532
00:21:33,890 --> 00:21:37,130
documentation for it that i know about

533
00:21:35,329 --> 00:21:39,199
so i'm kind of flying blind so i'm going

534
00:21:37,130 --> 00:21:42,410
to just go ahead and see all right what

535
00:21:39,200 --> 00:21:45,650
if i was to destroy that context some

536
00:21:42,410 --> 00:21:48,560
time a little bit later right what would

537
00:21:45,650 --> 00:21:50,570
happen there so let's see if i was going

538
00:21:48,559 --> 00:21:53,029
to do set pixel format on the window DC

539
00:21:50,569 --> 00:21:55,279
could i do something here where I you

540
00:21:53,029 --> 00:21:57,529
know do a wiggle make current to get rid

541
00:21:55,279 --> 00:21:59,539
of it maybe even do a wittle delete

542
00:21:57,529 --> 00:22:00,559
context right which would cause the rest

543
00:21:59,539 --> 00:22:02,869
of our code to fail but we'll deal with

544
00:22:00,559 --> 00:22:05,539
that in a second I just want to see if I

545
00:22:02,869 --> 00:22:08,959
deleted the context entirely so it's

546
00:22:05,539 --> 00:22:13,339
gone would that be enough to allow me to

547
00:22:08,960 --> 00:22:14,390
set the pixel format again right so here

548
00:22:13,339 --> 00:22:19,339
we go

549
00:22:14,390 --> 00:22:22,790
I come through here I get my arm call

550
00:22:19,339 --> 00:22:24,409
back which is good I you know unmake

551
00:22:22,789 --> 00:22:26,420
current the thing so it's not on my

552
00:22:24,410 --> 00:22:29,390
threat anymore I delete it it's gone

553
00:22:26,420 --> 00:22:32,269
right so thatthat GL RC is now dead I

554
00:22:29,390 --> 00:22:37,520
and I try to suggest set the pixel

555
00:22:32,269 --> 00:22:39,470
format pics of right to and no dice so i

556
00:22:37,519 --> 00:22:41,660
don't know i'm not sure if maybe that

557
00:22:39,470 --> 00:22:46,100
just means you can never set a pixel

558
00:22:41,660 --> 00:22:47,420
format twice maybe i'm not sure let me

559
00:22:46,099 --> 00:22:49,579
see if the docs say anything about that

560
00:22:47,420 --> 00:22:51,350
because i'm out of ideas there so the

561
00:22:49,579 --> 00:22:53,779
only other thing we could do is create a

562
00:22:51,349 --> 00:22:56,389
dummy window and use that which is not a

563
00:22:53,779 --> 00:22:58,279
problem but it's just a lot of sort of

564
00:22:56,390 --> 00:23:03,550
unnecessary business so i wouldn't do it

565
00:22:58,279 --> 00:23:03,549
if I you know didn't have to so let's c

566
00:23:04,390 --> 00:23:08,060
sub pixel format changed the best form

567
00:23:06,619 --> 00:23:09,589
of the window setting the pixel format

568
00:23:08,059 --> 00:23:10,819
of a window more than once can lead to

569
00:23:09,589 --> 00:23:12,049
significant complications for the window

570
00:23:10,819 --> 00:23:15,740
management for motive abdicated so it is

571
00:23:12,049 --> 00:23:19,029
not allowed so there we go so basically

572
00:23:15,740 --> 00:23:21,470
we don't have a choice it would seem as

573
00:23:19,029 --> 00:23:23,930
far as i can tell we pretty much just

574
00:23:21,470 --> 00:23:26,480
straight-up have to set the pixel format

575
00:23:23,930 --> 00:23:30,860
on some other window on this a dummy

576
00:23:26,480 --> 00:23:33,410
window and then we can use that window

577
00:23:30,859 --> 00:23:38,269
to load up all of the stuff we actually

578
00:23:33,410 --> 00:23:39,650
need and then do what we need to do so

579
00:23:38,269 --> 00:23:44,150
i'm going to go ahead and back out these

580
00:23:39,650 --> 00:23:45,710
changes like so and just restore it to

581
00:23:44,150 --> 00:23:48,590
what we had before which i think is

582
00:23:45,710 --> 00:23:51,140
basically what we want and then i'm just

583
00:23:48,589 --> 00:23:53,480
going to go ahead and restructure this

584
00:23:51,140 --> 00:23:56,240
code a little bit to use a dummy window

585
00:23:53,480 --> 00:23:59,299
to to do the loading of the opengl

586
00:23:56,240 --> 00:24:03,829
wiggle extensions and then we will go

587
00:23:59,299 --> 00:24:06,940
ahead and and clean up this path so that

588
00:24:03,829 --> 00:24:11,389
we use those extensions as as necessary

589
00:24:06,940 --> 00:24:18,230
alright so i'm going to call this like

590
00:24:11,390 --> 00:24:20,630
load wiggle extensions and load wiggle

591
00:24:18,230 --> 00:24:25,339
extensions i think what we want to do

592
00:24:20,630 --> 00:24:28,239
here is we already have plenty of ways

593
00:24:25,339 --> 00:24:30,769
of creating a window right

594
00:24:28,239 --> 00:24:35,269
so if I look here we've got you know

595
00:24:30,769 --> 00:24:37,669
create window exa and for this you know

596
00:24:35,269 --> 00:24:40,339
we sort of created this fader window and

597
00:24:37,669 --> 00:24:43,009
we register in class I i think i'm just

598
00:24:40,339 --> 00:24:44,509
going to literally take this exact code

599
00:24:43,009 --> 00:24:46,308
just for creating a window i'm just

600
00:24:44,509 --> 00:24:50,509
going to create that a dummy window and

601
00:24:46,308 --> 00:24:52,128
then i'm going to immediately destroy it

602
00:24:50,509 --> 00:24:55,909
afterwards so i'll just create the

603
00:24:52,128 --> 00:24:59,269
context use it to load my stuff in and

604
00:24:55,909 --> 00:25:01,729
then after that we will immediately

605
00:24:59,269 --> 00:25:03,618
destroy it so be coming through here we

606
00:25:01,729 --> 00:25:05,479
don't care about any of this stuff right

607
00:25:03,618 --> 00:25:08,839
we don't care about the window procedure

608
00:25:05,479 --> 00:25:14,479
this can be just def window proc oh no

609
00:25:08,839 --> 00:25:16,608
oh poor for kodir I feel like for coders

610
00:25:14,479 --> 00:25:20,470
tab completion has hit has hit a very

611
00:25:16,608 --> 00:25:30,788
unfortunate wall am i right about this

612
00:25:20,470 --> 00:25:30,788
let's see what happened to it forehead

613
00:25:32,009 --> 00:25:38,980
hmm it's not using very much as a

614
00:25:37,089 --> 00:25:41,079
working set or anything so it seems like

615
00:25:38,980 --> 00:25:43,630
it's probably just some kind of a thing

616
00:25:41,079 --> 00:25:47,048
where it got confused during parsing i'm

617
00:25:43,630 --> 00:25:56,830
not sure i don't know if we can save a

618
00:25:47,048 --> 00:26:10,690
mini dump for Alan uh so can I get it

619
00:25:56,829 --> 00:26:13,139
maybe tone of this not sure well let's

620
00:26:10,690 --> 00:26:13,140
take a look

621
00:26:19,859 --> 00:26:31,658
alright so at least we know where we are

622
00:26:26,409 --> 00:26:34,179
I guess so here is where it's saying the

623
00:26:31,659 --> 00:26:37,870
fault is I guess is that where it's

624
00:26:34,179 --> 00:26:40,330
saying the fault is unhandled exception

625
00:26:37,869 --> 00:26:44,349
ex violation reading the location 0 X

626
00:26:40,329 --> 00:26:49,869
FFF FFF FFF so the app pointer got

627
00:26:44,349 --> 00:26:58,230
corrupted somehow I guess let's take a

628
00:26:49,869 --> 00:27:02,079
look watch one app nope that's all fine

629
00:26:58,230 --> 00:27:03,640
so what is it trying to if it's trying

630
00:27:02,079 --> 00:27:11,439
to load from Q R opponent how is how is

631
00:27:03,640 --> 00:27:16,659
that or as rcx is the bug RC x is 0 that

632
00:27:11,440 --> 00:27:19,298
correct this is not sure because that

633
00:27:16,659 --> 00:27:21,970
says x violation reading has I want this

634
00:27:19,298 --> 00:27:23,589
to show me are we ah there we go that

635
00:27:21,970 --> 00:27:25,778
just showed me that was just jumping to

636
00:27:23,589 --> 00:27:27,548
the first part of my code so we're we're

637
00:27:25,778 --> 00:27:28,839
in here we're in exec command which

638
00:27:27,548 --> 00:27:31,569
makes sense because it's probably

639
00:27:28,839 --> 00:27:34,089
exacting its exacting the the word

640
00:27:31,569 --> 00:27:36,519
complete command right and then we're

641
00:27:34,089 --> 00:27:38,769
four levels deep and here's where we are

642
00:27:36,519 --> 00:27:41,648
on the stack so in theory if he's got

643
00:27:38,769 --> 00:27:45,278
the map he could figure out who we

644
00:27:41,648 --> 00:27:47,769
crashed in and we're crashing on a test

645
00:27:45,278 --> 00:27:52,359
instruction so we're trying to compare

646
00:27:47,769 --> 00:27:55,658
uh something to one so probably probably

647
00:27:52,359 --> 00:27:58,629
the true would be my guess in the source

648
00:27:55,659 --> 00:28:00,940
code so yeah we're doing a comp we

649
00:27:58,630 --> 00:28:02,470
looked at something this looks this is

650
00:28:00,940 --> 00:28:05,048
all all these imp three heroes make me

651
00:28:02,470 --> 00:28:07,690
think this is like part of some kind of

652
00:28:05,048 --> 00:28:10,808
a partial function like this is where

653
00:28:07,690 --> 00:28:14,528
the function started I would I think

654
00:28:10,808 --> 00:28:16,569
this looks a little ott like the start

655
00:28:14,528 --> 00:28:18,849
of a function to me so I think we're in

656
00:28:16,569 --> 00:28:21,158
the top of a function here that's going

657
00:28:18,849 --> 00:28:23,889
to test against one assuming that it

658
00:28:21,159 --> 00:28:25,899
doesn't have some kind of a comp to it

659
00:28:23,890 --> 00:28:28,450
so yeah I don't know hopefully that

660
00:28:25,898 --> 00:28:30,969
helps Alan a little bit maybe I don't

661
00:28:28,450 --> 00:28:35,990
know if I can save a mini dump can I

662
00:28:30,970 --> 00:28:38,120
can I save debug the debug cars from

663
00:28:35,990 --> 00:28:41,420
Diagnostics quick watch save save dump

664
00:28:38,119 --> 00:28:45,139
as that's what I'm talking about me dump

665
00:28:41,420 --> 00:28:50,410
with heat bro all right all right me

666
00:28:45,140 --> 00:28:57,880
dump with heap coming right up for kodir

667
00:28:50,410 --> 00:29:02,210
new folder jumps here comes the dump

668
00:28:57,880 --> 00:29:09,110
this is for read word completion crash

669
00:29:02,210 --> 00:29:11,210
dump there you go and by the way this is

670
00:29:09,109 --> 00:29:13,339
just a good thing to know about in

671
00:29:11,210 --> 00:29:15,559
general when an application crashes if

672
00:29:13,339 --> 00:29:17,059
it's you know like with forehead where

673
00:29:15,559 --> 00:29:20,000
it's like an alpha version that we're

674
00:29:17,059 --> 00:29:22,069
using really early in development it's

675
00:29:20,000 --> 00:29:23,809
really helpful to the developers if you

676
00:29:22,069 --> 00:29:26,119
can take a moment since you are a

677
00:29:23,809 --> 00:29:27,919
programmer and do the right thing with a

678
00:29:26,119 --> 00:29:29,689
crash so that they can get some

679
00:29:27,920 --> 00:29:31,400
information about it potentially if they

680
00:29:29,690 --> 00:29:32,870
don't have their own automated crash

681
00:29:31,400 --> 00:29:34,970
reporting or any of that stuff yet which

682
00:29:32,869 --> 00:29:36,349
you know they might not if they're not

683
00:29:34,970 --> 00:29:39,339
on the platform that supports that or

684
00:29:36,349 --> 00:29:42,740
whatever so yeah not that hard to do

685
00:29:39,339 --> 00:29:44,480
like you saw me do it just then it's a

686
00:29:42,740 --> 00:29:46,670
nice thing to be able to do if you can

687
00:29:44,480 --> 00:29:47,930
so it turns it's just down here in the

688
00:29:46,670 --> 00:29:50,330
debug menu i was like i'm pretty sure i

689
00:29:47,930 --> 00:29:51,650
could save a crash dump and i can so

690
00:29:50,329 --> 00:29:53,329
that's good and also just take a quick

691
00:29:51,650 --> 00:29:56,180
look at this and maybe look at the you

692
00:29:53,329 --> 00:29:58,759
know just given that if you can alright

693
00:29:56,180 --> 00:30:02,090
so that's it for for a poor little

694
00:29:58,759 --> 00:30:06,049
forehead I'm sorry for read it was doing

695
00:30:02,089 --> 00:30:12,709
very well I will say but we will have to

696
00:30:06,049 --> 00:30:16,819
relaunch you all right back to our back

697
00:30:12,710 --> 00:30:18,920
to our story so here we are again and

698
00:30:16,819 --> 00:30:21,769
through handmade and i'm just going to

699
00:30:18,920 --> 00:30:23,509
do oops I didn't mean to do that I meant

700
00:30:21,769 --> 00:30:25,430
to load handmade that proj oh I did go

701
00:30:23,509 --> 00:30:28,319
animate the project okay good

702
00:30:25,430 --> 00:30:32,370
so what I want to do here again is I

703
00:30:28,319 --> 00:30:34,859
want to in it opengl by creating that

704
00:30:32,369 --> 00:30:37,889
sort of fake window right i want to

705
00:30:34,859 --> 00:30:40,049
create a window and I want that fake

706
00:30:37,890 --> 00:30:41,970
window to do the things that it needs to

707
00:30:40,049 --> 00:30:44,129
do to get me the extension pointers

708
00:30:41,970 --> 00:30:45,600
because really until I have those

709
00:30:44,130 --> 00:30:47,010
tension pointers I can't do anything and

710
00:30:45,599 --> 00:30:48,809
as we saw before there's really no way

711
00:30:47,009 --> 00:30:51,150
to use one window to get the extension

712
00:30:48,809 --> 00:30:52,799
pointers if I have to choose the pixel

713
00:30:51,150 --> 00:30:55,500
format using an extension it's like a

714
00:30:52,799 --> 00:30:59,970
catch-22 so I need something like win32

715
00:30:55,500 --> 00:31:01,829
load wiggle extensions here right and

716
00:30:59,970 --> 00:31:05,579
what that's going to do is that's going

717
00:31:01,829 --> 00:31:07,589
to load these these sort of mandatory

718
00:31:05,579 --> 00:31:11,250
things that I I can't load without

719
00:31:07,589 --> 00:31:15,119
setting up a window first so let's go

720
00:31:11,250 --> 00:31:17,160
ahead and grab that code again with the

721
00:31:15,119 --> 00:31:19,199
create window code that I was going to

722
00:31:17,160 --> 00:31:22,650
use here for the fader window basically

723
00:31:19,200 --> 00:31:26,400
we can use that exact same code and so

724
00:31:22,650 --> 00:31:29,220
if i go back to wiggle extensions place

725
00:31:26,400 --> 00:31:31,259
that in there so all I'm going to do

726
00:31:29,220 --> 00:31:35,370
here create the wind class and this is

727
00:31:31,259 --> 00:31:38,099
literally just like handmade wiggle

728
00:31:35,369 --> 00:31:39,629
loader that's all it does it doesn't

729
00:31:38,099 --> 00:31:42,059
need any of this stuff we don't care

730
00:31:39,630 --> 00:31:43,140
about that we don't care about this this

731
00:31:42,059 --> 00:31:49,079
is the only thing we really care about

732
00:31:43,140 --> 00:31:53,940
get module handle 0 and def window proc

733
00:31:49,079 --> 00:31:55,909
w I think Jeff window proc we were

734
00:31:53,940 --> 00:31:59,460
calling definitely to proc a yeah

735
00:31:55,910 --> 00:32:01,890
reminder Colin tip window proc a so

736
00:31:59,460 --> 00:32:03,299
different a pocket uh so that's all we

737
00:32:01,890 --> 00:32:04,470
really care about doing here I don't

738
00:32:03,299 --> 00:32:05,819
think we even care we don't even care

739
00:32:04,470 --> 00:32:07,650
about the style we don't care about any

740
00:32:05,819 --> 00:32:09,859
of that stuff we don't want any of these

741
00:32:07,650 --> 00:32:12,900
things right we don't want to be layered

742
00:32:09,859 --> 00:32:14,459
the class name is going to be whatever

743
00:32:12,900 --> 00:32:16,460
the window classes that we register here

744
00:32:14,460 --> 00:32:19,529
obviously this stuff we don't care about

745
00:32:16,460 --> 00:32:21,779
at all like this is this is actually I

746
00:32:19,529 --> 00:32:26,399
guess just 0 like there's no probably

747
00:32:21,779 --> 00:32:31,129
any flags at all and so we're going to

748
00:32:26,400 --> 00:32:34,410
go ahead and do that create this window

749
00:32:31,130 --> 00:32:36,960
like so and then immediately destroy

750
00:32:34,410 --> 00:32:39,759
this window

751
00:32:36,960 --> 00:32:41,590
so that's all we actually need to do

752
00:32:39,759 --> 00:32:46,000
right we just want all that stuff to

753
00:32:41,589 --> 00:32:48,788
just be to be dead and in between there

754
00:32:46,000 --> 00:32:50,579
now we can do the stuff that we want to

755
00:32:48,788 --> 00:32:53,888
do before with choosing the pixel format

756
00:32:50,579 --> 00:32:57,449
so what I'm going to do with that is up

757
00:32:53,888 --> 00:33:04,869
here i'm going to say okay internal void

758
00:32:57,450 --> 00:33:05,710
choose win32 choose pixel format what

759
00:33:04,869 --> 00:33:06,939
i'm going to do here and I'll probably

760
00:33:05,710 --> 00:33:09,519
actually have to pass that some things

761
00:33:06,940 --> 00:33:13,389
but I'm going to take this sort of code

762
00:33:09,519 --> 00:33:16,028
that we had here right and I'm going to

763
00:33:13,388 --> 00:33:18,788
make this code into something that sort

764
00:33:16,028 --> 00:33:22,778
of works depending on whether you have

765
00:33:18,788 --> 00:33:24,908
the extension or not right and so what I

766
00:33:22,778 --> 00:33:26,769
want to do is I want to sort of revert

767
00:33:24,909 --> 00:33:29,350
it back to sort of the old school way

768
00:33:26,769 --> 00:33:32,349
that it was working before I want to say

769
00:33:29,349 --> 00:33:34,658
suggested pixel format index soup

770
00:33:32,349 --> 00:33:36,730
suggested thankful for my name I want to

771
00:33:34,659 --> 00:33:38,950
say suggested pixel format index I want

772
00:33:36,730 --> 00:33:40,870
to see whether we have the extension or

773
00:33:38,950 --> 00:33:43,538
not if we don't have the extension I

774
00:33:40,869 --> 00:33:47,288
want to use this way always right

775
00:33:43,538 --> 00:33:49,929
because that's just better than not

776
00:33:47,288 --> 00:33:52,569
working so we're going to use that if we

777
00:33:49,929 --> 00:33:53,590
don't have the extended way and if we do

778
00:33:52,569 --> 00:34:00,908
have the extended way that we're going

779
00:33:53,589 --> 00:34:02,349
to use this this one down here right in

780
00:34:00,909 --> 00:34:06,700
fact this is basically the code that we

781
00:34:02,349 --> 00:34:08,889
want so if you have the extension we do

782
00:34:06,700 --> 00:34:12,039
this exactly the way that we use to

783
00:34:08,889 --> 00:34:20,169
where we do the extended pick C

784
00:34:12,039 --> 00:34:25,300
limitation there we go okay so if you

785
00:34:20,168 --> 00:34:28,269
have the extension this actually goes up

786
00:34:25,300 --> 00:34:30,429
here if we have the extension then we

787
00:34:28,269 --> 00:34:33,009
start going the extension itself is

788
00:34:30,429 --> 00:34:35,230
going to be loaded elsewhere so I'm

789
00:34:33,010 --> 00:34:37,480
going to load the extension in this dl

790
00:34:35,230 --> 00:34:39,639
load extensions do that so that's

791
00:34:37,480 --> 00:34:41,530
actually gonna go down there now so I'm

792
00:34:39,639 --> 00:34:43,419
just going to test to see whether or not

793
00:34:41,530 --> 00:34:45,339
we have the extension if we have the

794
00:34:43,418 --> 00:34:47,710
extension then we use the extended path

795
00:34:45,338 --> 00:34:47,989
in so much as we can right and i'm going

796
00:34:47,710 --> 00:34:49,190
to put

797
00:34:47,989 --> 00:34:51,618
this guy out here as well like I said

798
00:34:49,190 --> 00:34:54,440
with the extended pick thing so you had

799
00:34:51,619 --> 00:34:59,059
the extension we try to use it and I

800
00:34:54,440 --> 00:35:04,730
will reinvent this line there we go like

801
00:34:59,059 --> 00:35:06,920
so and then if we didn't get it then

802
00:35:04,730 --> 00:35:11,269
we'll use this one and I think I sort of

803
00:35:06,920 --> 00:35:13,309
had that path Yeah right here so what

804
00:35:11,269 --> 00:35:15,440
I'm going to do is say okay if you

805
00:35:13,309 --> 00:35:20,960
couldn't if you didn't get to extended

806
00:35:15,440 --> 00:35:22,789
pick right then pick it this way so what

807
00:35:20,960 --> 00:35:24,610
I could do to is I suppose really I

808
00:35:22,789 --> 00:35:26,690
could just let this thing over right

809
00:35:24,610 --> 00:35:28,160
suggested pixel format I don't know this

810
00:35:26,690 --> 00:35:30,829
is probably the safer way to do it there

811
00:35:28,159 --> 00:35:32,569
is just if we have the extension run the

812
00:35:30,829 --> 00:35:34,369
extension path if we see that the

813
00:35:32,570 --> 00:35:36,500
extension pick something don't run the

814
00:35:34,369 --> 00:35:38,539
old paths and then either way after we

815
00:35:36,500 --> 00:35:43,309
run it try to set the pixel format on

816
00:35:38,539 --> 00:35:45,289
the window seems reasonable right so at

817
00:35:43,309 --> 00:35:47,269
that point that's really all we need to

818
00:35:45,289 --> 00:35:49,400
do for setting the pixel format so

819
00:35:47,269 --> 00:35:51,889
that's it that's the code that I'm

820
00:35:49,400 --> 00:35:54,500
looking for and wiggle choose pixel

821
00:35:51,889 --> 00:35:56,589
format could just take and maybe this is

822
00:35:54,500 --> 00:35:59,929
the right way to do it i think probably

823
00:35:56,590 --> 00:36:01,640
it'll just take as a pointer this

824
00:35:59,929 --> 00:36:04,368
extension because the only extension it

825
00:36:01,639 --> 00:36:06,139
actually needs to think about so i can

826
00:36:04,369 --> 00:36:07,820
just pass that in and say hey here's the

827
00:36:06,139 --> 00:36:09,559
pointer so when you do wiggle choose

828
00:36:07,820 --> 00:36:11,900
pixel format if you pass that pointer in

829
00:36:09,559 --> 00:36:13,159
italy and it's a valid pointer it will

830
00:36:11,900 --> 00:36:15,108
actually try to use the extended version

831
00:36:13,159 --> 00:36:17,299
if you don't then it'll just skip it

832
00:36:15,108 --> 00:36:18,619
right so then we come into winter q lo

833
00:36:17,300 --> 00:36:20,150
extensions and now we know that that's

834
00:36:18,619 --> 00:36:23,030
going to be the case we create the

835
00:36:20,150 --> 00:36:24,410
window and after we create the window

836
00:36:23,030 --> 00:36:27,350
what we're going to do is we're going to

837
00:36:24,409 --> 00:36:35,358
call into that went through to set pixel

838
00:36:27,349 --> 00:36:38,150
format what was it called choose pixel

839
00:36:35,358 --> 00:36:39,440
format sorry I really want set that's

840
00:36:38,150 --> 00:36:41,869
the right it's actually called set

841
00:36:39,440 --> 00:36:45,260
because choose is one part but but said

842
00:36:41,869 --> 00:36:48,289
is the other part right so I really want

843
00:36:45,260 --> 00:36:52,040
win32 set pixel format and it'll set

844
00:36:48,289 --> 00:36:54,079
pixel format on this window you know I'm

845
00:36:52,039 --> 00:36:57,599
saying or I guess probably maybe it

846
00:36:54,079 --> 00:37:01,630
should take a DC so maybe we'll say

847
00:36:57,599 --> 00:37:03,640
window DC and we'll just say that the

848
00:37:01,630 --> 00:37:06,250
person who calls in will get the DC for

849
00:37:03,639 --> 00:37:08,529
you so there's the window DC so here

850
00:37:06,250 --> 00:37:10,719
we'll say the window DC equals get DC of

851
00:37:08,530 --> 00:37:17,339
the window and then we'll do a release

852
00:37:10,719 --> 00:37:24,219
DC on the window and destroy the window

853
00:37:17,338 --> 00:37:25,900
right yeah perfect so I think this is

854
00:37:24,219 --> 00:37:27,489
what we want to do right we want to do

855
00:37:25,900 --> 00:37:29,200
the window to see we get the DC we set

856
00:37:27,489 --> 00:37:30,939
them as the format we don't actually

857
00:37:29,199 --> 00:37:33,699
probably want to wait and releases and

858
00:37:30,940 --> 00:37:35,289
see down here obviously I don't know why

859
00:37:33,699 --> 00:37:38,500
this seems to think that we're indented

860
00:37:35,289 --> 00:37:41,349
more than we are I guess it's this is it

861
00:37:38,500 --> 00:37:45,219
this that confuses it yeah i think for

862
00:37:41,349 --> 00:37:48,548
I'd got confused by that yeah it did no

863
00:37:45,219 --> 00:37:50,439
it didn't sit this I'm not sure what

864
00:37:48,548 --> 00:37:51,579
confuses it but it's confused about the

865
00:37:50,440 --> 00:37:53,588
annotation level and I don't know if

866
00:37:51,579 --> 00:37:57,900
that's me or if I've got like a hanging

867
00:37:53,588 --> 00:38:02,259
thing or not anyway so point being

868
00:37:57,900 --> 00:38:05,108
here's 13 to load wiggle extensions we

869
00:38:02,260 --> 00:38:07,299
create this window we get the DC we set

870
00:38:05,108 --> 00:38:09,269
the pixel format on it and then we are

871
00:38:07,298 --> 00:38:12,190
going to go ahead and try to create

872
00:38:09,269 --> 00:38:14,139
context like we did before whose sole

873
00:38:12,190 --> 00:38:15,548
purpose is to get extensions for us it's

874
00:38:14,139 --> 00:38:17,500
not going to do it's literally not going

875
00:38:15,548 --> 00:38:19,690
to ever render a single thing of OpenGL

876
00:38:17,500 --> 00:38:21,608
it's just going to get the extensions so

877
00:38:19,690 --> 00:38:23,588
here it gets the extensions right it

878
00:38:21,608 --> 00:38:26,828
gets it does a tues pixel format ARB or

879
00:38:23,588 --> 00:38:31,568
whatever so it gets the extension and

880
00:38:26,829 --> 00:38:34,028
then if it gets that extension will have

881
00:38:31,568 --> 00:38:36,130
it for our you know for our use or

882
00:38:34,028 --> 00:38:38,139
whatever if it can't get the extension

883
00:38:36,130 --> 00:38:40,599
then no big deal we just we would be

884
00:38:38,139 --> 00:38:42,278
using the old paths right and we can

885
00:38:40,599 --> 00:38:43,838
also put the rest of our stuff in there

886
00:38:42,278 --> 00:38:46,900
that we were using with wiggle I think

887
00:38:43,838 --> 00:38:49,028
to write so we could for example take

888
00:38:46,900 --> 00:38:51,460
this will create context attribs ARB

889
00:38:49,028 --> 00:38:52,989
that could go in here too and so

890
00:38:51,460 --> 00:38:55,510
basically all of the stuff that we were

891
00:38:52,989 --> 00:38:57,489
calling we can call in here if that

892
00:38:55,510 --> 00:38:58,809
makes sense and I think there was was

893
00:38:57,489 --> 00:39:02,409
there one other thing that we called in

894
00:38:58,809 --> 00:39:07,150
here I can't remember if there was or if

895
00:39:02,409 --> 00:39:09,899
there wasn't doesn't look like it Oh

896
00:39:07,150 --> 00:39:09,900
swap interval

897
00:39:12,179 --> 00:39:19,389
so all of these can now be things that

898
00:39:15,460 --> 00:39:22,300
we sort of wrote you know expect that

899
00:39:19,389 --> 00:39:24,460
will be loaded in this function if they

900
00:39:22,300 --> 00:39:26,890
can be loaded which we don't always know

901
00:39:24,460 --> 00:39:29,289
that they will be able to and so I'll

902
00:39:26,889 --> 00:39:34,230
put this these up these guys all here

903
00:39:29,289 --> 00:39:34,230
together where is where is swap interval

904
00:39:38,789 --> 00:39:51,369
there it is all right so we try loading

905
00:39:49,599 --> 00:39:52,690
all those and hopefully we get them all

906
00:39:51,369 --> 00:39:53,858
right if we don't get them all it's not

907
00:39:52,690 --> 00:39:57,010
the end of the world but that's what

908
00:39:53,858 --> 00:39:59,920
we're hoping for so there they are and

909
00:39:57,010 --> 00:40:02,970
everything's good so after we load all

910
00:39:59,920 --> 00:40:05,260
those we can destroy the context right

911
00:40:02,969 --> 00:40:08,669
so we can get rid of the context that

912
00:40:05,260 --> 00:40:13,150
we're using and we can destroy it

913
00:40:08,670 --> 00:40:15,820
wiggled destroy context and I can pass

914
00:40:13,150 --> 00:40:19,599
the window to see to that whoops I mean

915
00:40:15,820 --> 00:40:21,250
the open GL RC and I don't know if we

916
00:40:19,599 --> 00:40:22,960
actually ever need to do the make

917
00:40:21,250 --> 00:40:25,210
current but we might as well because we

918
00:40:22,960 --> 00:40:27,250
can like I don't know if we need to do

919
00:40:25,210 --> 00:40:30,730
the make current in order for that to

920
00:40:27,250 --> 00:40:32,679
work but we'll see oops and then

921
00:40:30,730 --> 00:40:36,130
obviously we don't actually need to do

922
00:40:32,679 --> 00:40:37,449
to make current outside so that seems

923
00:40:36,130 --> 00:40:41,289
reasonable to me i'm going to compile

924
00:40:37,449 --> 00:40:43,239
that see where we're at a build that is

925
00:40:41,289 --> 00:40:46,269
not recognized as an internal or

926
00:40:43,239 --> 00:40:49,769
external command really what are you

927
00:40:46,269 --> 00:40:56,460
talking about there we go alright so

928
00:40:49,769 --> 00:40:56,460
instance is just window class H instance

929
00:40:57,300 --> 00:41:02,920
and then I think we're good so win32 set

930
00:41:00,849 --> 00:41:04,150
pixel format in this case we don't have

931
00:41:02,920 --> 00:41:05,858
the extension yet so we're not going to

932
00:41:04,150 --> 00:41:07,269
use it in fact I guess what we could do

933
00:41:05,858 --> 00:41:09,670
now is we don't even really have to pass

934
00:41:07,269 --> 00:41:11,139
it because it'll just it can just use it

935
00:41:09,670 --> 00:41:12,670
as it would normally use it because it's

936
00:41:11,139 --> 00:41:14,139
a global variable it's like if it's been

937
00:41:12,670 --> 00:41:17,889
loaded it'll use it if it isn't loaded

938
00:41:14,139 --> 00:41:20,108
it won't right so off we go destroy

939
00:41:17,889 --> 00:41:22,059
context it's actually not destroy

940
00:41:20,108 --> 00:41:22,329
context its delete context that's just

941
00:41:22,059 --> 00:41:24,789
my

942
00:41:22,329 --> 00:41:27,190
I miss remembering the name and off we

943
00:41:24,789 --> 00:41:30,789
go so now in win32 and opa joe with this

944
00:41:27,190 --> 00:41:34,389
in mind what we can do is first call

945
00:41:30,789 --> 00:41:35,860
this load extensions thing right so we

946
00:41:34,389 --> 00:41:37,719
can call wiggle load extensions and know

947
00:41:35,860 --> 00:41:39,700
that we have now created dummy context

948
00:41:37,719 --> 00:41:41,199
and gotten rid of it but loaded the

949
00:41:39,699 --> 00:41:42,429
functions that we need to load we can

950
00:41:41,199 --> 00:41:43,929
get rid of all of this stuff because

951
00:41:42,429 --> 00:41:45,159
it's been sort of abstracted out into

952
00:41:43,929 --> 00:41:49,089
another function that we know we can

953
00:41:45,159 --> 00:41:53,619
call so what we can literally do here is

954
00:41:49,090 --> 00:41:56,019
say okay I forget all this stuff forget

955
00:41:53,619 --> 00:42:00,670
all of it instead what we're going to do

956
00:41:56,019 --> 00:42:03,309
is we're going to see whether or not we

957
00:42:00,670 --> 00:42:05,829
have a modern of the ability to get a

958
00:42:03,309 --> 00:42:08,320
modern context right and if we do if we

959
00:42:05,829 --> 00:42:10,949
are able to get a modern context then we

960
00:42:08,320 --> 00:42:13,300
will and if we won't then we won't right

961
00:42:10,949 --> 00:42:17,859
so let me go ahead and actually reinvent

962
00:42:13,300 --> 00:42:18,880
all this here we go so in this case we

963
00:42:17,860 --> 00:42:20,620
don't need to get this anymore because

964
00:42:18,880 --> 00:42:22,570
we you know we'd already have queried it

965
00:42:20,619 --> 00:42:26,469
so we can do is we can call wiggle

966
00:42:22,570 --> 00:42:28,510
create context oak attribs right and

967
00:42:26,469 --> 00:42:32,189
what I'll do is I'll say here is our

968
00:42:28,510 --> 00:42:35,470
Open GL RC the one we're going to return

969
00:42:32,190 --> 00:42:37,630
it starts out being initialized to

970
00:42:35,469 --> 00:42:39,099
nothing I assume 0 is an initializer for

971
00:42:37,630 --> 00:42:41,740
that yeah it starts out being

972
00:42:39,099 --> 00:42:45,219
initialized to nothing if we can we will

973
00:42:41,739 --> 00:42:47,109
try to get one like so and I guess we

974
00:42:45,219 --> 00:42:49,000
don't really need to pass that that was

975
00:42:47,110 --> 00:42:53,620
just for illustrative purposes before we

976
00:42:49,000 --> 00:42:55,300
can get rid of that so here we go we try

977
00:42:53,619 --> 00:42:57,969
to get the modern open GL RC and we can

978
00:42:55,300 --> 00:43:04,890
actually just call this open GL RC now

979
00:42:57,969 --> 00:43:07,569
right and we can put this stuff down ok

980
00:43:04,889 --> 00:43:10,389
so we try to get the open GL RC this way

981
00:43:07,570 --> 00:43:13,990
if we can't get the open GL RC this way

982
00:43:10,389 --> 00:43:16,539
so either you know if either we end up

983
00:43:13,989 --> 00:43:19,649
without that function or this ends up

984
00:43:16,539 --> 00:43:22,509
failing so we say ok if we can't get it

985
00:43:19,650 --> 00:43:25,539
then we can just try the old school way

986
00:43:22,510 --> 00:43:27,970
of doing it will create context and see

987
00:43:25,539 --> 00:43:29,889
if that works right and if either of

988
00:43:27,969 --> 00:43:32,259
them work then great then we're good to

989
00:43:29,889 --> 00:43:33,609
go so then we can come through here and

990
00:43:32,260 --> 00:43:35,770
say okay why don't you go ahead and

991
00:43:33,610 --> 00:43:37,120
initialize that all the

992
00:43:35,769 --> 00:43:39,280
opengl stuff that you actually needed to

993
00:43:37,119 --> 00:43:41,859
do but first we probably need to

994
00:43:39,280 --> 00:43:44,590
actually set it as the context so we

995
00:43:41,860 --> 00:43:52,780
would call we would call this this stuff

996
00:43:44,590 --> 00:43:55,559
right like so similarly if we happen to

997
00:43:52,780 --> 00:43:58,750
have swap intervals we want to call that

998
00:43:55,559 --> 00:44:00,909
and then we're good so that's like a lot

999
00:43:58,750 --> 00:44:02,110
cleaner now too right I mean it's three

1000
00:44:00,909 --> 00:44:04,389
functions now so it's a little bit

1001
00:44:02,110 --> 00:44:06,099
stringy er but it's like it actually is

1002
00:44:04,389 --> 00:44:08,199
a lot cleaner of exactly what's going on

1003
00:44:06,099 --> 00:44:09,880
so let's see if we have any more luck

1004
00:44:08,199 --> 00:44:12,819
getting this to do what we needed to do

1005
00:44:09,880 --> 00:44:16,180
and can we add the srgb in there once

1006
00:44:12,820 --> 00:44:18,130
we're ready right alright so modern GL

1007
00:44:16,179 --> 00:44:21,069
RC undeclared that's true what we

1008
00:44:18,130 --> 00:44:24,240
actually wanted is open GL RC here and I

1009
00:44:21,070 --> 00:44:28,210
think that was obviously wrong oops and

1010
00:44:24,239 --> 00:44:33,189
then we've got what have we got cannot

1011
00:44:28,210 --> 00:44:37,510
convert argument open Jillian it be 32

1012
00:44:33,190 --> 00:44:40,960
oh it's just whether or not it's modern

1013
00:44:37,510 --> 00:44:43,090
I guess so we need this thing right here

1014
00:44:40,960 --> 00:44:49,320
so we'll assume that we got a modern

1015
00:44:43,090 --> 00:44:49,320
context but if we get here it's false

1016
00:44:50,280 --> 00:44:57,490
and go from there all right so let's see

1017
00:44:54,880 --> 00:44:59,500
if that helped us at all and if any of

1018
00:44:57,489 --> 00:45:01,359
that works because again we're just kind

1019
00:44:59,500 --> 00:45:03,489
of trying to get windows to do what we

1020
00:45:01,360 --> 00:45:06,190
needed to do here and you know windows

1021
00:45:03,489 --> 00:45:07,929
does what it does so let's start by

1022
00:45:06,190 --> 00:45:10,420
seeing if the extension loading works at

1023
00:45:07,929 --> 00:45:12,129
all so here we go we register our window

1024
00:45:10,420 --> 00:45:14,380
class that looks like that worked we get

1025
00:45:12,130 --> 00:45:16,599
our window the window is is there we get

1026
00:45:14,380 --> 00:45:20,980
the DC we try to set the pixel format on

1027
00:45:16,599 --> 00:45:22,719
it and we try to set create NRC we get

1028
00:45:20,980 --> 00:45:26,050
one we make it current we try to load

1029
00:45:22,719 --> 00:45:27,909
our extensions we got one we got to we

1030
00:45:26,050 --> 00:45:30,280
got three so all the extensions load we

1031
00:45:27,909 --> 00:45:32,349
get rid of the context on our thread we

1032
00:45:30,280 --> 00:45:35,440
then delete it we release the DC and

1033
00:45:32,349 --> 00:45:37,329
destroy the window now hopefully we can

1034
00:45:35,440 --> 00:45:38,619
still now use those callbacks that we've

1035
00:45:37,329 --> 00:45:41,259
got I don't actually know if that's true

1036
00:45:38,619 --> 00:45:42,639
but hopefully it's true so we look to

1037
00:45:41,260 --> 00:45:44,890
see if we've got wiggle create context

1038
00:45:42,639 --> 00:45:48,609
of tribes are we do so now we try to

1039
00:45:44,889 --> 00:45:49,599
call it with our default attribs we are

1040
00:45:48,610 --> 00:45:53,079
unable to get the

1041
00:45:49,599 --> 00:45:55,299
open GRC back which suggests to me and I

1042
00:45:53,079 --> 00:45:58,869
guess I don't know it suggests to me

1043
00:45:55,300 --> 00:46:03,580
that we still do need that other context

1044
00:45:58,869 --> 00:46:06,369
around potentially right I don't know

1045
00:46:03,579 --> 00:46:10,059
I'm just guessing that's just my my

1046
00:46:06,369 --> 00:46:13,779
hunch right like we still need to have

1047
00:46:10,059 --> 00:46:16,179
the other the other context active when

1048
00:46:13,780 --> 00:46:17,950
we actually make that call which is

1049
00:46:16,179 --> 00:46:20,739
unfortunate because that makes it again

1050
00:46:17,949 --> 00:46:30,519
a little bit more kind of weird but what

1051
00:46:20,739 --> 00:46:33,039
you gonna do all right no biggie so that

1052
00:46:30,519 --> 00:46:34,030
just means that we kind of have to we

1053
00:46:33,039 --> 00:46:35,139
still have to keep these two things

1054
00:46:34,030 --> 00:46:39,310
welded together we can't actually

1055
00:46:35,139 --> 00:46:41,469
separate them right and what we would

1056
00:46:39,309 --> 00:46:45,039
need to do is when we create this this

1057
00:46:41,469 --> 00:46:47,049
kind of do dad here right when we create

1058
00:46:45,039 --> 00:46:48,219
when we do with ritu ended up in jail

1059
00:46:47,050 --> 00:46:49,750
let me come through here and we create

1060
00:46:48,219 --> 00:46:53,349
all this stuff what we need to do is

1061
00:46:49,750 --> 00:46:56,469
before we actually unmake the context

1062
00:46:53,349 --> 00:46:58,449
right we would then need to sort of do

1063
00:46:56,469 --> 00:47:01,509
the the old way that we were doing it

1064
00:46:58,449 --> 00:47:05,710
where we sort of say okay let's go ahead

1065
00:47:01,510 --> 00:47:08,850
and and and create that that context

1066
00:47:05,710 --> 00:47:16,539
from from whole cloth right so like yeah

1067
00:47:08,849 --> 00:47:17,829
oops no stop okay there we go so when we

1068
00:47:16,539 --> 00:47:19,389
come in here we've got this context

1069
00:47:17,829 --> 00:47:22,090
current we see whether or not we could

1070
00:47:19,389 --> 00:47:24,879
maybe make our actual context that we

1071
00:47:22,090 --> 00:47:26,620
actually care about we see if we can

1072
00:47:24,880 --> 00:47:28,690
make it while we still have the other

1073
00:47:26,619 --> 00:47:31,389
contacts current then we make it current

1074
00:47:28,690 --> 00:47:33,550
20 then we delete it and then finally

1075
00:47:31,389 --> 00:47:36,069
down in the end we see did we actually

1076
00:47:33,550 --> 00:47:38,320
get a modern context if we didn't we

1077
00:47:36,070 --> 00:47:41,080
record the fact that that's true and we

1078
00:47:38,320 --> 00:47:42,910
try creating an old-school one on our

1079
00:47:41,079 --> 00:47:45,519
actual window that we actually care

1080
00:47:42,909 --> 00:47:46,869
about right so now we need to do is we

1081
00:47:45,519 --> 00:47:49,570
need to sort of differentiate between

1082
00:47:46,869 --> 00:47:50,889
our two window dcs right because now we

1083
00:47:49,570 --> 00:47:53,140
have to DC's and we're actually trying

1084
00:47:50,889 --> 00:47:55,929
to set in the dummy one so now we need

1085
00:47:53,139 --> 00:47:57,879
like a dummy window DC and we need to

1086
00:47:55,929 --> 00:48:00,549
make sure all of these are operating on

1087
00:47:57,880 --> 00:48:02,640
the dummy window DC not the actual

1088
00:48:00,550 --> 00:48:04,859
window DC a lot of fun right

1089
00:48:02,639 --> 00:48:06,449
and then these other ones here when

1090
00:48:04,858 --> 00:48:08,548
they're doing this they're all working

1091
00:48:06,449 --> 00:48:12,298
on the actual window DC the one we're

1092
00:48:08,548 --> 00:48:13,380
trying to set not the dummy right so

1093
00:48:12,298 --> 00:48:17,730
let's see if we have any better luck

1094
00:48:13,380 --> 00:48:21,778
with that are we having fun yet thanks

1095
00:48:17,730 --> 00:48:23,369
Microsoft thanks for everything so

1096
00:48:21,778 --> 00:48:24,989
anyway here we are went through to an

1097
00:48:23,369 --> 00:48:26,519
end up in jail we come through here we

1098
00:48:24,989 --> 00:48:28,288
set up our window class you register the

1099
00:48:26,518 --> 00:48:29,459
window class we create the window that's

1100
00:48:28,289 --> 00:48:31,799
hidden no one's actually we're going to

1101
00:48:29,460 --> 00:48:33,630
see that we get the W ater to see from

1102
00:48:31,798 --> 00:48:35,309
it we set the pixel format on that every

1103
00:48:33,630 --> 00:48:37,318
window to see to support OpenGL we

1104
00:48:35,309 --> 00:48:39,869
create the context then we've got an

1105
00:48:37,318 --> 00:48:42,000
open GL RC we make it current we then

1106
00:48:39,869 --> 00:48:43,950
choose the pixel format context attribs

1107
00:48:42,000 --> 00:48:46,889
swap interval functions get them all

1108
00:48:43,949 --> 00:48:49,169
right they're all loaded we then see can

1109
00:48:46,889 --> 00:48:51,268
we create a context with disconnects

1110
00:48:49,170 --> 00:48:59,700
active and these attribs will that work

1111
00:48:51,268 --> 00:49:02,489
still doesn't work you know what that

1112
00:48:59,699 --> 00:49:07,489
may have been premature I didn't call I

1113
00:49:02,489 --> 00:49:10,409
did I forgot to call set pixel format I

1114
00:49:07,489 --> 00:49:12,479
forgot to call us at pixel format maybe

1115
00:49:10,409 --> 00:49:17,788
it would have worked should we back it

1116
00:49:12,480 --> 00:49:21,119
up and try it should we I think we

1117
00:49:17,789 --> 00:49:23,160
probably should right because that's

1118
00:49:21,119 --> 00:49:25,410
what we need to do we need to call set

1119
00:49:23,159 --> 00:49:27,598
we need to we need to do this we need to

1120
00:49:25,409 --> 00:49:30,088
call set pixel format on the window DC

1121
00:49:27,599 --> 00:49:32,250
right and I forgot to do it so that

1122
00:49:30,088 --> 00:49:34,528
that's why the older contract that would

1123
00:49:32,250 --> 00:49:36,509
have made the olden fail so maybe we can

1124
00:49:34,528 --> 00:49:38,750
still do it the other way that we were

1125
00:49:36,509 --> 00:49:43,170
doing it so here's what I'm going to do

1126
00:49:38,750 --> 00:49:46,108
I'm going to take this right here and

1127
00:49:43,170 --> 00:49:51,829
I'm going to save it off to a temp file

1128
00:49:46,108 --> 00:49:53,880
basically what do I have like to do yeah

1129
00:49:51,829 --> 00:49:57,390
that's just getting saved into the temp

1130
00:49:53,880 --> 00:49:59,599
file now we're going to see if this

1131
00:49:57,389 --> 00:49:59,598
works

1132
00:50:02,079 --> 00:50:09,319
set the pixel format on the wood WC and

1133
00:50:05,710 --> 00:50:12,650
now we got an actual alright so maybe

1134
00:50:09,320 --> 00:50:14,210
it's okay to do it the other way which

1135
00:50:12,650 --> 00:50:16,070
case I would like to do it that way so

1136
00:50:14,210 --> 00:50:18,949
let's and also let's see here if we get

1137
00:50:16,070 --> 00:50:21,590
a pixel format assess pill for meant to

1138
00:50:18,949 --> 00:50:23,719
and that actually works as well so

1139
00:50:21,590 --> 00:50:25,970
that's pretty cool right I'm pretty

1140
00:50:23,719 --> 00:50:39,769
happy about that pretty happy about that

1141
00:50:25,969 --> 00:50:41,989
yeah yeah alright so I think that may be

1142
00:50:39,769 --> 00:50:47,259
the end of that so I'm going to go ahead

1143
00:50:41,989 --> 00:50:53,348
and try reverting those changes right

1144
00:50:47,260 --> 00:50:53,349
undo undo and do and do and do undo undo

1145
00:51:08,559 --> 00:51:13,639
all right so I if I leave it this way

1146
00:51:12,019 --> 00:51:15,650
that I think is a little bit nicer to

1147
00:51:13,639 --> 00:51:16,940
read right so we kind of have it in in

1148
00:51:15,650 --> 00:51:19,970
something where it's a little bit more

1149
00:51:16,940 --> 00:51:22,338
understandable what's going on there now

1150
00:51:19,969 --> 00:51:25,730
I think I should be able to say okay

1151
00:51:22,338 --> 00:51:27,769
when we do win32 in it opengl the only

1152
00:51:25,730 --> 00:51:30,260
problem probably with this was that I

1153
00:51:27,769 --> 00:51:31,579
didn't do set pixel format and so I'm

1154
00:51:30,260 --> 00:51:39,470
just going to go ahead and do set pixel

1155
00:51:31,579 --> 00:51:44,239
format now let's see if this still works

1156
00:51:39,469 --> 00:51:46,879
or not okay so wiggle extensions off we

1157
00:51:44,239 --> 00:51:49,219
go did we get the extension yes we did

1158
00:51:46,880 --> 00:51:51,950
did we set the pixel format we try to

1159
00:51:49,219 --> 00:51:54,969
and there we go so that looks like we're

1160
00:51:51,949 --> 00:51:59,118
okay I think we're okay I think that

1161
00:51:54,969 --> 00:52:00,319
looks good to me let's dip in here just

1162
00:51:59,119 --> 00:52:05,380
one more time and make sure that the set

1163
00:52:00,320 --> 00:52:05,380
pixel format works in this one

1164
00:52:05,710 --> 00:52:10,970
yeah okay so we can still do it in the

1165
00:52:09,679 --> 00:52:13,308
in the slightly cleaner way and so

1166
00:52:10,969 --> 00:52:15,709
that's nice so that's everything there

1167
00:52:13,309 --> 00:52:16,970
and now the only thing that and I wasn't

1168
00:52:15,710 --> 00:52:19,068
really sure about this to be completely

1169
00:52:16,969 --> 00:52:22,969
honest with you I was unclear on whether

1170
00:52:19,068 --> 00:52:26,389
we had to or not we now need to put in

1171
00:52:22,969 --> 00:52:28,308
here the srgb extended attribute that we

1172
00:52:26,389 --> 00:52:30,019
actually want right this is the thing we

1173
00:52:28,309 --> 00:52:31,730
did all this work to get is just this

1174
00:52:30,019 --> 00:52:33,829
one line of code we wanted to be able to

1175
00:52:31,730 --> 00:52:40,730
add here right and what that is is

1176
00:52:33,829 --> 00:52:44,359
that's frame buffer srgb herb we just

1177
00:52:40,730 --> 00:52:47,750
want this right so we want to be able to

1178
00:52:44,358 --> 00:52:50,328
specify wiggle frame buffer srgb capable

1179
00:52:47,750 --> 00:52:52,730
arm we just that's the only reason we

1180
00:52:50,329 --> 00:52:54,890
did any of this is just that that's it

1181
00:52:52,730 --> 00:52:57,230
and so what we want to do is be able to

1182
00:52:54,889 --> 00:52:59,568
put that guy right that guy right there

1183
00:52:57,230 --> 00:53:04,969
we want to be able to put in here and I

1184
00:52:59,568 --> 00:53:07,579
guess we say GL true we'll see I'll go

1185
00:53:04,969 --> 00:53:09,139
read the docs but so we need that wiggle

1186
00:53:07,579 --> 00:53:11,900
we need one more wiggle thing we need

1187
00:53:09,139 --> 00:53:13,639
that and this is the extension now

1188
00:53:11,900 --> 00:53:16,548
here's the part that I don't know I

1189
00:53:13,639 --> 00:53:19,578
don't know whether we can include that

1190
00:53:16,548 --> 00:53:21,380
and just trust that if the driver is not

1191
00:53:19,579 --> 00:53:23,720
a driver that accepts it it'll just

1192
00:53:21,380 --> 00:53:26,240
ignore it or whether we have to query

1193
00:53:23,719 --> 00:53:29,919
the extension string see whether it's

1194
00:53:26,239 --> 00:53:32,088
there and only if it is there put it in

1195
00:53:29,920 --> 00:53:34,190
because I don't know what the spec

1196
00:53:32,088 --> 00:53:35,239
requires of us or how the drivers are

1197
00:53:34,190 --> 00:53:36,349
typically written because that's that

1198
00:53:35,239 --> 00:53:37,338
let's be honest the end of the day

1199
00:53:36,349 --> 00:53:38,838
doesn't actually matter what it says in

1200
00:53:37,338 --> 00:53:40,880
the spec it matters what the drivers do

1201
00:53:38,838 --> 00:53:41,869
if the drivers puke on it if it's in

1202
00:53:40,880 --> 00:53:43,579
there and they don't recognize it then

1203
00:53:41,869 --> 00:53:45,890
even suspect says it's okay doesn't

1204
00:53:43,579 --> 00:53:47,630
really help us right so we'll have to

1205
00:53:45,889 --> 00:53:49,909
see what the actual what that actually

1206
00:53:47,630 --> 00:53:52,220
is a practice so if i compile with that

1207
00:53:49,909 --> 00:53:54,108
now now i think technically we should be

1208
00:53:52,219 --> 00:53:56,028
getting an actual srgb frame buffer

1209
00:53:54,108 --> 00:53:58,909
don't actually know if that's true but i

1210
00:53:56,028 --> 00:54:01,068
believe that should be the case and so

1211
00:53:58,909 --> 00:54:02,088
again very difficult for us to tell we

1212
00:54:01,068 --> 00:54:04,009
would have to actually run some

1213
00:54:02,088 --> 00:54:06,288
structured art tests through the

1214
00:54:04,010 --> 00:54:07,609
pipeline to even know if it was working

1215
00:54:06,289 --> 00:54:11,180
because again that's going to be

1216
00:54:07,608 --> 00:54:12,710
relatively subtle difference but in

1217
00:54:11,179 --> 00:54:16,598
theory now we are getting gamma

1218
00:54:12,710 --> 00:54:16,599
correction on the frame buffer as well

1219
00:54:19,510 --> 00:54:27,410
in theory so who knows maybe we are

1220
00:54:25,789 --> 00:54:28,789
maybe we aren't like I said we'd have to

1221
00:54:27,409 --> 00:54:31,460
actually do some real testing to even

1222
00:54:28,789 --> 00:54:34,159
figure it out but at least now we have a

1223
00:54:31,460 --> 00:54:35,750
plausible path for that and we've got

1224
00:54:34,159 --> 00:54:37,250
the code structured what we think is

1225
00:54:35,750 --> 00:54:38,809
proper for the windows startup and

1226
00:54:37,250 --> 00:54:40,250
that's important to get right even at

1227
00:54:38,809 --> 00:54:42,110
this stage of development because again

1228
00:54:40,250 --> 00:54:43,969
we want to make sure that when we comes

1229
00:54:42,110 --> 00:54:45,559
time to final everything we don't want

1230
00:54:43,969 --> 00:54:48,529
to be in a situation where we're doing

1231
00:54:45,559 --> 00:54:51,320
everything wrong right so yeah so it's

1232
00:54:48,530 --> 00:54:55,400
looking pretty good it's a nice cut

1233
00:54:51,320 --> 00:54:57,080
scene you know so let's try the other

1234
00:54:55,400 --> 00:54:59,599
thing so I'm looking at the cutscene

1235
00:54:57,079 --> 00:55:01,340
right now and i'm assuming i'm just

1236
00:54:59,599 --> 00:55:03,500
going to guess that nobody else can see

1237
00:55:01,340 --> 00:55:05,180
it but me and you know why i'm guessing

1238
00:55:03,500 --> 00:55:07,280
that is because we were passing double

1239
00:55:05,179 --> 00:55:10,129
buffer equals true and it is silky

1240
00:55:07,280 --> 00:55:11,420
smooth on my machine and when we weren't

1241
00:55:10,130 --> 00:55:15,920
when we were doing the one that was

1242
00:55:11,420 --> 00:55:18,380
streamable I it was super jerky and so

1243
00:55:15,920 --> 00:55:21,170
I'm just assuming that that's true so

1244
00:55:18,380 --> 00:55:25,130
I'm going to go ahead and and go ahead

1245
00:55:21,170 --> 00:55:27,860
and take a look at that I'm gonna go

1246
00:55:25,130 --> 00:55:35,450
ahead and say okay so stream black

1247
00:55:27,860 --> 00:55:36,590
screen yeah so you base people are

1248
00:55:35,449 --> 00:55:39,049
saying this luxury that's why I thought

1249
00:55:36,590 --> 00:55:40,850
so what I'm assuming we have to do is

1250
00:55:39,050 --> 00:55:43,039
the same thing here we have to do if

1251
00:55:40,849 --> 00:55:45,559
handmade streaming and the double buffer

1252
00:55:43,039 --> 00:55:49,940
line is going to have to be set to false

1253
00:55:45,559 --> 00:55:56,210
I think I don't know I just assume so I

1254
00:55:49,940 --> 00:55:57,889
think we're gonna have to do this and in

1255
00:55:56,210 --> 00:55:59,780
theory that will work but we don't know

1256
00:55:57,889 --> 00:56:02,059
because it's sort of just a random that

1257
00:55:59,780 --> 00:56:04,730
it worked at all I think originally I I

1258
00:56:02,059 --> 00:56:07,000
don't really know but there's there's

1259
00:56:04,730 --> 00:56:07,000
our

1260
00:56:08,179 --> 00:56:13,960
there's our one that maybe isn't a black

1261
00:56:11,780 --> 00:56:13,960
screen

1262
00:56:25,699 --> 00:56:32,309
can you guys see that yeah you can okay

1263
00:56:29,010 --> 00:56:33,900
good so yeah and what's interesting is

1264
00:56:32,309 --> 00:56:34,799
that was a kind of a good test cause

1265
00:56:33,900 --> 00:56:37,588
like we talked about again people were

1266
00:56:34,800 --> 00:56:39,089
asking if it was if what the jerkiness

1267
00:56:37,588 --> 00:56:42,239
was from if that was Twitter or not it

1268
00:56:39,088 --> 00:56:44,849
is absolutely that flag because when I

1269
00:56:42,239 --> 00:56:46,319
don't have that flag set when I have a

1270
00:56:44,849 --> 00:56:47,700
set to double buffer it's silky smooth

1271
00:56:46,320 --> 00:56:49,140
when I don't have sent over you get that

1272
00:56:47,699 --> 00:56:50,879
dorkiness and I think that's because of

1273
00:56:49,139 --> 00:56:52,829
going through the windows compositor

1274
00:56:50,880 --> 00:56:55,500
perhaps whether it's hitting it properly

1275
00:56:52,829 --> 00:56:59,338
or not I'm guessing that probably what's

1276
00:56:55,500 --> 00:57:01,530
happening in there is that either twitch

1277
00:56:59,338 --> 00:57:04,108
can't get access to it in the other mode

1278
00:57:01,530 --> 00:57:06,269
so the twitch doesn't introduce whatever

1279
00:57:04,108 --> 00:57:08,098
jerkiness was happening or it's just the

1280
00:57:06,269 --> 00:57:10,050
fact that it's not double buffered it's

1281
00:57:08,099 --> 00:57:11,940
like not getting vsync or not getting

1282
00:57:10,050 --> 00:57:13,140
whatever and so it's not silky smooth it

1283
00:57:11,940 --> 00:57:19,588
just kind of depends on whether it hits

1284
00:57:13,139 --> 00:57:21,210
the refresh or not right so all right so

1285
00:57:19,588 --> 00:57:22,980
I think that's it for today that's what

1286
00:57:21,210 --> 00:57:31,019
we wanted to accomplish and we did

1287
00:57:22,980 --> 00:57:34,079
accomplish it so that's good and yeah so

1288
00:57:31,019 --> 00:57:39,050
let's go ahead and let's go ahead and go

1289
00:57:34,079 --> 00:57:39,049
to the QA for about 20 minutes maybe

1290
00:57:40,130 --> 00:57:44,400
Caleb aren't pretty much all games

1291
00:57:42,570 --> 00:57:45,720
double buffered if so why doesn't OBS

1292
00:57:44,400 --> 00:57:47,190
have problems catching game footage for

1293
00:57:45,719 --> 00:57:49,559
other games so two things about that

1294
00:57:47,190 --> 00:57:52,108
first of all in my experience OBS has

1295
00:57:49,559 --> 00:57:54,329
trouble capturing anything I have never

1296
00:57:52,108 --> 00:57:56,250
seen a stream where OBS successfully

1297
00:57:54,329 --> 00:57:58,469
captured things reliably the whole time

1298
00:57:56,250 --> 00:58:00,780
like I i watched John blows streams

1299
00:57:58,469 --> 00:58:02,519
right plays games and it's like every

1300
00:58:00,780 --> 00:58:04,320
other game it's not capturing you have

1301
00:58:02,519 --> 00:58:07,230
to go like reconfigure it and change

1302
00:58:04,320 --> 00:58:10,050
what's went right so OBS can barely

1303
00:58:07,230 --> 00:58:12,300
capture you know itself let alone stuff

1304
00:58:10,050 --> 00:58:14,550
Roma so there's that but what I was

1305
00:58:12,300 --> 00:58:17,130
going to say is actually if we wanted to

1306
00:58:14,550 --> 00:58:19,769
OBS certainly could capture handmade

1307
00:58:17,130 --> 00:58:21,690
hero if we specifically target it to

1308
00:58:19,769 --> 00:58:23,820
capture just the handmade hero window I

1309
00:58:21,690 --> 00:58:26,400
believe that does work even if it's

1310
00:58:23,820 --> 00:58:28,650
double buffered what we couldn't quite

1311
00:58:26,400 --> 00:58:32,579
figure out how to get to work was having

1312
00:58:28,650 --> 00:58:36,329
it capture the desktop if that makes

1313
00:58:32,579 --> 00:58:38,059
sense first and then when we run the

1314
00:58:36,329 --> 00:58:40,369
game automatically capture the game too

1315
00:58:38,059 --> 00:58:42,739
that was just not working for some

1316
00:58:40,369 --> 00:58:45,079
reason and I don't know if maybe there's

1317
00:58:42,739 --> 00:58:47,029
a trick of like adding the game on top

1318
00:58:45,079 --> 00:58:49,279
as a separate thing that would go up go

1319
00:58:47,030 --> 00:58:53,840
over it or not and maybe let make that

1320
00:58:49,280 --> 00:58:55,580
happen and so on but yes so that's the

1321
00:58:53,840 --> 00:58:57,019
only problem and so what like an long

1322
00:58:55,579 --> 00:58:58,400
book is asking does this mean that hmh

1323
00:58:57,019 --> 00:59:00,980
cannot be let's play and the answer is

1324
00:58:58,400 --> 00:59:04,309
no it could totally be lets played

1325
00:59:00,980 --> 00:59:05,630
because normally the caster wouldn't be

1326
00:59:04,309 --> 00:59:07,159
worrying about this they would be

1327
00:59:05,630 --> 00:59:10,910
setting it to capture ham a hero and

1328
00:59:07,159 --> 00:59:13,819
that would presumably just work right so

1329
00:59:10,909 --> 00:59:15,829
yeah so we can we could if we really

1330
00:59:13,820 --> 00:59:17,390
cared make that work but it's way easier

1331
00:59:15,829 --> 00:59:19,909
not to do that it's way easier to just

1332
00:59:17,389 --> 00:59:21,349
do it like this where yeah it's not

1333
00:59:19,909 --> 00:59:23,449
quite right because we're not running in

1334
00:59:21,349 --> 00:59:25,250
double buffer but that's fine for us and

1335
00:59:23,449 --> 00:59:27,849
it lets us develop and and do it

1336
00:59:25,250 --> 00:59:27,849
properly right

1337
00:59:34,119 --> 00:59:40,549
and nicks and and Neil saying you can

1338
00:59:38,179 --> 00:59:42,769
send up to switch scenes when the active

1339
00:59:40,550 --> 00:59:46,280
window changes so yeah like like I said

1340
00:59:42,769 --> 00:59:49,159
maybe there's some things that we can do

1341
00:59:46,280 --> 00:59:51,920
that's clever in in OBS to make it work

1342
00:59:49,159 --> 00:59:54,529
or whatever I assume that that would

1343
00:59:51,920 --> 00:59:58,659
work I don't know that I care enough to

1344
00:59:54,530 --> 00:59:58,660
make it happen but we could try

1345
01:00:14,750 --> 01:00:18,929
Cuba Caleb shouldn't we also get pixel

1346
01:00:17,579 --> 01:00:25,380
format to make sure we got what we

1347
01:00:18,929 --> 01:00:29,539
wanted um so I guess what I would say is

1348
01:00:25,380 --> 01:00:32,329
no and the reason is because as we

1349
01:00:29,539 --> 01:00:35,340
unless so there's two things we could do

1350
01:00:32,329 --> 01:00:36,809
if you want to be super fault tolerant

1351
01:00:35,340 --> 01:00:38,490
and you want to write something that was

1352
01:00:36,809 --> 01:00:40,320
going to go iterate over all the pixel

1353
01:00:38,489 --> 01:00:42,509
formats and try to choose a backup one

1354
01:00:40,320 --> 01:00:43,890
or some like that then you could do that

1355
01:00:42,510 --> 01:00:44,940
but if you're going to do that you would

1356
01:00:43,889 --> 01:00:46,109
never call chew sticks before in the

1357
01:00:44,940 --> 01:00:47,369
first place you just iterate all the

1358
01:00:46,110 --> 01:00:50,280
pics Lawrence and actually use your own

1359
01:00:47,369 --> 01:00:51,690
chooser right but if you're not going to

1360
01:00:50,280 --> 01:00:52,890
do that then there's really no point in

1361
01:00:51,690 --> 01:00:55,950
checking the pixel format that you get

1362
01:00:52,889 --> 01:00:58,109
back because there's nothing you can do

1363
01:00:55,949 --> 01:01:00,599
right if the face of format you get back

1364
01:00:58,110 --> 01:01:02,130
isn't suitable for what you want then

1365
01:01:00,599 --> 01:01:04,769
the games just not going to work you

1366
01:01:02,130 --> 01:01:06,720
don't have some other option right and

1367
01:01:04,769 --> 01:01:08,489
so you might as well just let open jail

1368
01:01:06,719 --> 01:01:10,169
try to render with whatever you have and

1369
01:01:08,489 --> 01:01:11,399
if the user like isn't happy with that

1370
01:01:10,170 --> 01:01:12,900
then you know they're going to file a

1371
01:01:11,400 --> 01:01:14,970
bug reporter but there's unless your

1372
01:01:12,900 --> 01:01:17,730
game actually has a back-up plan

1373
01:01:14,969 --> 01:01:19,919
actually has something it's going to do

1374
01:01:17,730 --> 01:01:24,179
if it doesn't get a pixel format that it

1375
01:01:19,920 --> 01:01:27,559
thinks is the right kind because we'll

1376
01:01:24,179 --> 01:01:29,940
know if we don't create a context right

1377
01:01:27,559 --> 01:01:31,529
but as long as we create a context it's

1378
01:01:29,940 --> 01:01:34,260
like you might as well try rendering

1379
01:01:31,530 --> 01:01:36,180
through it because if you don't do that

1380
01:01:34,260 --> 01:01:38,400
then the game just straight-up doesn't

1381
01:01:36,179 --> 01:01:42,500
work and you basically increased the

1382
01:01:38,400 --> 01:01:42,500
failure right so

1383
01:02:20,780 --> 01:02:24,720
huber caleb so for games that is fine

1384
01:02:23,280 --> 01:02:31,650
but for someone like photoshop i'm

1385
01:02:24,719 --> 01:02:33,539
assuming you would have to care uh you

1386
01:02:31,650 --> 01:02:35,760
mean well so one thing you would

1387
01:02:33,539 --> 01:02:37,050
probably want to do is if your photoshop

1388
01:02:35,760 --> 01:02:39,570
you would want to have a thing that says

1389
01:02:37,050 --> 01:02:41,220
just so you know here is the format

1390
01:02:39,570 --> 01:02:45,500
you've got i still think you should try

1391
01:02:41,219 --> 01:02:45,500
to run you don't want to not run right

1392
01:02:47,480 --> 01:02:52,829
my egl enable GL framebuffer srgb after

1393
01:02:51,059 --> 01:02:55,529
creating the motor cars didn't we

1394
01:02:52,829 --> 01:03:08,159
already do that pretty sure that our

1395
01:02:55,530 --> 01:03:12,060
code already did that it's right that's

1396
01:03:08,159 --> 01:03:16,409
that that guy right there right so in

1397
01:03:12,059 --> 01:03:18,860
OpenGL in it we we enable a frame buffer

1398
01:03:16,409 --> 01:03:18,859
srgb

1399
01:04:12,469 --> 01:04:18,519
I think we are out of questions I'm

1400
01:04:14,539 --> 01:04:18,519
looking at the stream by don't see no mo

1401
01:04:36,670 --> 01:04:40,608
any atomic have you started thinking

1402
01:04:38,630 --> 01:04:43,039
about cross-platform support I've missed

1403
01:04:40,608 --> 01:04:45,590
quite a bit of the stream i believe so

1404
01:04:43,039 --> 01:04:47,570
since i said i said this up that at the

1405
01:04:45,590 --> 01:04:49,010
very beginning of hannah here and don't

1406
01:04:47,570 --> 01:04:50,690
think that's ever going to change there

1407
01:04:49,010 --> 01:04:52,730
will be no cross-platform handmade hero

1408
01:04:50,690 --> 01:04:54,769
till the end we will have the complete

1409
01:04:52,730 --> 01:04:58,159
game on Windows first and then we will

1410
01:04:54,769 --> 01:04:59,599
move to other platforms and that's just

1411
01:04:58,159 --> 01:05:00,980
because it reduces the amount of work

1412
01:04:59,599 --> 01:05:02,720
because instead of maintaining multiple

1413
01:05:00,980 --> 01:05:05,329
platforms when you change your mind or

1414
01:05:02,719 --> 01:05:07,689
ad platform civic features you only do

1415
01:05:05,329 --> 01:05:10,639
that once for each additional platform

1416
01:05:07,690 --> 01:05:14,599
so yeah so there's not going to be any

1417
01:05:10,639 --> 01:05:17,389
cross-platform anything until until the

1418
01:05:14,599 --> 01:05:20,359
end now granted people everyone else is

1419
01:05:17,389 --> 01:05:21,969
already ported it to sdl and OSX and i

1420
01:05:20,358 --> 01:05:24,289
don't remember what else they ported to

1421
01:05:21,969 --> 01:05:25,669
sew on the github there's actually

1422
01:05:24,289 --> 01:05:28,670
people who've already ported it because

1423
01:05:25,670 --> 01:05:30,858
we isolated the game from the platform

1424
01:05:28,670 --> 01:05:33,650
completely so it's trivial deport all

1425
01:05:30,858 --> 01:05:35,949
you have to do is port the platform all

1426
01:05:33,650 --> 01:05:42,099
we have to do is port 1 3 204 handmade

1427
01:05:35,949 --> 01:05:42,098
but you know we aren't aren't doing that

1428
01:05:47,630 --> 01:05:55,559
ttb JM is the GPU doing pre

1429
01:05:50,539 --> 01:05:57,329
premultiplied alpha so the GPU that's

1430
01:05:55,559 --> 01:06:00,570
sort of the wrong way to think about it

1431
01:05:57,329 --> 01:06:02,519
if that makes sense the GPU doesn't know

1432
01:06:00,570 --> 01:06:06,210
whether it's doing premultiplied alpha

1433
01:06:02,519 --> 01:06:08,610
or not it's just whether you set up your

1434
01:06:06,210 --> 01:06:11,699
textures that way and then you set your

1435
01:06:08,610 --> 01:06:14,490
blend mode essentially to be whatever

1436
01:06:11,699 --> 01:06:15,989
will work out to use it so because we're

1437
01:06:14,489 --> 01:06:17,789
using the same textures by definition

1438
01:06:15,989 --> 01:06:19,259
we're using premultiplied alpha because

1439
01:06:17,789 --> 01:06:21,000
all of our things are premultiplied

1440
01:06:19,260 --> 01:06:24,600
alpha we pre-multiply the alpha into

1441
01:06:21,000 --> 01:06:26,429
them and so the only place that the GPU

1442
01:06:24,599 --> 01:06:28,799
ever even knows about it is right here

1443
01:06:26,429 --> 01:06:30,449
when we say GL blend funk and remember

1444
01:06:28,800 --> 01:06:33,660
we went over the blending equation we

1445
01:06:30,449 --> 01:06:35,309
have GL one GL 1-4 safa whereas if it

1446
01:06:33,659 --> 01:06:37,799
wasn't premultiplied alpha it would be

1447
01:06:35,309 --> 01:06:39,360
GL source alpha chi 0 1 minus or failed

1448
01:06:37,800 --> 01:06:42,000
because this is the source multiplier

1449
01:06:39,360 --> 01:06:43,910
here and so in premultiplied alpha it's

1450
01:06:42,000 --> 01:06:47,190
the texture coming in is already

1451
01:06:43,909 --> 01:06:49,079
multiplied by alpha or go you don't need

1452
01:06:47,190 --> 01:06:51,210
to multiply by alpha again so it's just

1453
01:06:49,079 --> 01:06:54,119
dl 1 x 1 which doesn't change the value

1454
01:06:51,210 --> 01:06:57,179
obviously that makes sense but nothing

1455
01:06:54,119 --> 01:07:00,059
else actually needs to know about that

1456
01:06:57,179 --> 01:07:01,799
because premultiplied alpha is just a

1457
01:07:00,059 --> 01:07:03,480
thing you do two detectors originally we

1458
01:07:01,800 --> 01:07:06,390
store them in that format r g and b are

1459
01:07:03,480 --> 01:07:09,000
all x a everything the GPU does just

1460
01:07:06,389 --> 01:07:10,379
works with them as rgba values doesn't

1461
01:07:09,000 --> 01:07:12,900
know whether they're p multiplied or not

1462
01:07:10,380 --> 01:07:14,789
so when it does texture fetches and by

1463
01:07:12,900 --> 01:07:17,400
linear interpolation and whatever else

1464
01:07:14,789 --> 01:07:18,659
it's just doing it to the values and it

1465
01:07:17,400 --> 01:07:20,849
has no idea whether in people's we're

1466
01:07:18,659 --> 01:07:22,710
not only at the very end when it goes to

1467
01:07:20,849 --> 01:07:24,630
blend with the flame refere it just

1468
01:07:22,710 --> 01:07:27,030
needs to know do i multiply this by all

1469
01:07:24,630 --> 01:07:28,110
for naught and you have to set it to the

1470
01:07:27,030 --> 01:07:30,060
right thing because if you set it to the

1471
01:07:28,110 --> 01:07:31,740
wrong one it's not like it would be a

1472
01:07:30,059 --> 01:07:36,659
some kind of subtle bug you would see

1473
01:07:31,739 --> 01:07:39,799
like a pretty serious fringing I think I

1474
01:07:36,659 --> 01:07:39,799
assume we'll find out

1475
01:07:42,619 --> 01:07:48,930
alright I take it back I would have

1476
01:07:47,789 --> 01:07:50,278
thought you would have since attrib I

1477
01:07:48,929 --> 01:07:53,478
guess you're only going to see it clip

1478
01:07:50,278 --> 01:07:55,858
in on the edges so it's kind of I guess

1479
01:07:53,478 --> 01:08:00,228
not super for an ounce but you can see

1480
01:07:55,858 --> 01:08:00,228
maybe you can't even see because of the

1481
01:08:00,920 --> 01:08:05,338
because of the compression or not but

1482
01:08:03,059 --> 01:08:08,099
you can see sort of the heavier lines

1483
01:08:05,338 --> 01:08:11,190
but yeah that's it that's the only place

1484
01:08:08,099 --> 01:08:14,309
to any of it I would change if you had

1485
01:08:11,190 --> 01:08:17,279
something translucent you would see it I

1486
01:08:14,309 --> 01:08:18,420
guess more pronounced than that but that

1487
01:08:17,279 --> 01:08:20,670
wasn't even as bad as that that was

1488
01:08:18,420 --> 01:08:32,989
pretty subtle so you could even set that

1489
01:08:20,670 --> 01:08:36,899
wrong and you wouldn't know let's see

1490
01:08:32,988 --> 01:08:39,509
are you staying with immediate mode oh

1491
01:08:36,899 --> 01:08:42,269
you mean as opposed to putting the

1492
01:08:39,509 --> 01:08:43,679
vertices in a buffer I don't think we

1493
01:08:42,270 --> 01:08:45,270
would pretty much get any speed from

1494
01:08:43,679 --> 01:08:47,730
that at all to be honest because we just

1495
01:08:45,270 --> 01:08:49,560
don't have enough stuff to shove down so

1496
01:08:47,729 --> 01:08:52,108
I don't know that there's any real

1497
01:08:49,560 --> 01:08:55,739
reason to not use immediate mode we

1498
01:08:52,109 --> 01:08:58,319
might if we do particle systems need to

1499
01:08:55,738 --> 01:09:02,118
to think a little bit more about that

1500
01:08:58,319 --> 01:09:07,199
but right now we would have no use for

1501
01:09:02,118 --> 01:09:10,019
vertex buffers guten twone could we do

1502
01:09:07,198 --> 01:09:18,598
srgb with a shader and not with GL and

1503
01:09:10,020 --> 01:09:22,710
able um so not really is the answer you

1504
01:09:18,599 --> 01:09:24,960
you obviously can because a shader is

1505
01:09:22,710 --> 01:09:27,210
very highly programmable these days so

1506
01:09:24,960 --> 01:09:30,179
you know if you wanted to implement srgb

1507
01:09:27,210 --> 01:09:32,939
in it you certainly could but it's going

1508
01:09:30,179 --> 01:09:36,630
to be a lot less efficient if that makes

1509
01:09:32,939 --> 01:09:38,848
sense because the card has a color

1510
01:09:36,630 --> 01:09:42,599
lookup table in it that will do the srgb

1511
01:09:38,849 --> 01:09:45,029
conversions for you properly or they've

1512
01:09:42,599 --> 01:09:46,710
got a little circuit in their design to

1513
01:09:45,029 --> 01:09:48,299
just do this you know it's like they've

1514
01:09:46,710 --> 01:09:50,670
got they've got this worked out if that

1515
01:09:48,298 --> 01:09:54,088
makes sense whereas if we do the srgb

1516
01:09:50,670 --> 01:09:55,329
conversion either we have to upload a

1517
01:09:54,088 --> 01:09:58,899
texture and use the tech

1518
01:09:55,329 --> 01:10:00,189
as a lookup texture to do the srgb or we

1519
01:09:58,899 --> 01:10:02,259
have to write the code to do it which is

1520
01:10:00,189 --> 01:10:05,559
going to be more expensive and so

1521
01:10:02,260 --> 01:10:06,730
basically there really is no case where

1522
01:10:05,560 --> 01:10:09,760
you would actually want to do that

1523
01:10:06,729 --> 01:10:12,669
unless you had some other really good

1524
01:10:09,760 --> 01:10:14,560
reason right like assuming you're just

1525
01:10:12,670 --> 01:10:15,940
doing basic apps like we are where we're

1526
01:10:14,560 --> 01:10:18,130
just you know combining sprites and

1527
01:10:15,939 --> 01:10:21,549
stuff I can't think of any reason why

1528
01:10:18,130 --> 01:10:22,659
you wouldn't use the sRGB that's

1529
01:10:21,550 --> 01:10:24,190
built-in because it's going to be

1530
01:10:22,659 --> 01:10:27,760
exactly what you want and it's going to

1531
01:10:24,189 --> 01:10:35,229
be the fastest way to do it far as I

1532
01:10:27,760 --> 01:10:36,909
know anyway we're dominant are we still

1533
01:10:35,229 --> 01:10:39,159
going to do work on the debug you I yes

1534
01:10:36,909 --> 01:10:40,239
in fact I think that's probably the next

1535
01:10:39,159 --> 01:10:43,359
thing we'll do because we don't have

1536
01:10:40,239 --> 01:10:45,880
very much left to do but this stuff we

1537
01:10:43,359 --> 01:10:48,539
haven't ever finished up here and so we

1538
01:10:45,880 --> 01:10:48,539
should finish that

1539
01:11:06,770 --> 01:11:10,860
every time you go to answer question and

1540
01:11:09,060 --> 01:11:12,690
the cutscene loops a pink screen appears

1541
01:11:10,859 --> 01:11:14,479
yeah if you don't remember the pink

1542
01:11:12,689 --> 01:11:16,649
screen is where our title screen will go

1543
01:11:14,479 --> 01:11:18,509
we just we set it up so that it goes

1544
01:11:16,649 --> 01:11:19,799
like you play the cutscene or can go to

1545
01:11:18,510 --> 01:11:25,850
the title screen and the title screen we

1546
01:11:19,800 --> 01:11:31,039
don't have any thing drawn for yet so

1547
01:11:25,850 --> 01:11:33,990
you know it's just pink right now

1548
01:11:31,039 --> 01:11:36,239
someday we'll have like some title art

1549
01:11:33,989 --> 01:11:39,050
or something I don't know what will go

1550
01:11:36,239 --> 01:11:39,050
there but something will go there

1551
01:12:07,349 --> 01:12:11,679
alright that looks like there ain't no

1552
01:12:09,578 --> 01:12:16,049
mo q so I'm going to wrap it up I'm

1553
01:12:11,679 --> 01:12:16,050
going to wrap it up close

1554
01:12:27,420 --> 01:12:30,550
alright everybody thank you for joining

1555
01:12:29,409 --> 01:12:31,779
me for another episode of handmade here

1556
01:12:30,550 --> 01:12:34,659
at some pleasure coding with you as

1557
01:12:31,779 --> 01:12:37,210
always if you want to follow along at

1558
01:12:34,659 --> 01:12:38,920
home you can always go pre-order

1559
01:12:37,210 --> 01:12:41,260
handmade here on the hamb a hero to org

1560
01:12:38,920 --> 01:12:44,170
and it comes with a source code even now

1561
01:12:41,260 --> 01:12:45,480
so you could follow along every day by

1562
01:12:44,170 --> 01:12:47,590
downloading the latest source code and

1563
01:12:45,479 --> 01:12:49,839
doing exactly what I do on the stream

1564
01:12:47,590 --> 01:12:50,890
it's going to be to learn from it or you

1565
01:12:49,840 --> 01:12:52,210
can play around with it and do different

1566
01:12:50,890 --> 01:12:54,460
things so I do miss Jenny which is even

1567
01:12:52,210 --> 01:12:55,569
better way to learn we also have a forum

1568
01:12:54,460 --> 01:12:57,130
site you can go to ask questions you

1569
01:12:55,569 --> 01:12:58,869
have a patreon page you can use if you

1570
01:12:57,130 --> 01:13:00,430
want support the video series and we

1571
01:12:58,869 --> 01:13:03,189
have a tweet bot you can go to if you

1572
01:13:00,430 --> 01:13:04,690
want check out the schedule the editor

1573
01:13:03,189 --> 01:13:06,879
that we use on the stream is called for

1574
01:13:04,689 --> 01:13:08,259
coder and it's written by someone

1575
01:13:06,880 --> 01:13:10,690
actually on the stream and it's kind of

1576
01:13:08,260 --> 01:13:12,610
getting better all the time if you want

1577
01:13:10,689 --> 01:13:15,519
to support that project you can always

1578
01:13:12,609 --> 01:13:17,349
go to the fore coder website just type

1579
01:13:15,520 --> 01:13:19,420
for kodir into google it's got the

1580
01:13:17,350 --> 01:13:21,610
patron page here it's a great product to

1581
01:13:19,420 --> 01:13:22,989
support and it's already pretty usable

1582
01:13:21,609 --> 01:13:25,569
as you can see I can do a lot of editing

1583
01:13:22,989 --> 01:13:28,659
in it already even though it's you know

1584
01:13:25,569 --> 01:13:32,019
it's just been like a spare time project

1585
01:13:28,659 --> 01:13:34,449
for Alan it's already like you know a

1586
01:13:32,020 --> 01:13:37,440
lot more enjoyable to use the new max

1587
01:13:34,449 --> 01:13:39,789
honestly so check that out as well

1588
01:13:37,439 --> 01:13:41,769
that's about it for today we'll be back

1589
01:13:39,789 --> 01:13:43,569
here tomorrow for the last stream of the

1590
01:13:41,770 --> 01:13:46,450
week on Friday 5 p.m. pacific standard

1591
01:13:43,569 --> 01:13:47,829
time and so it helps you hope see you

1592
01:13:46,449 --> 01:13:50,019
back here for that if you can make it

1593
01:13:47,829 --> 01:13:51,699
until then have fun programming and i

1594
01:13:50,020 --> 01:13:54,150
will see you guys on the internet take

1595
01:13:51,699 --> 01:13:54,149
it easy everyone

