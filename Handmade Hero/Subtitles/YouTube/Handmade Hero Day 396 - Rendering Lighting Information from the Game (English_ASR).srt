1
00:00:00,829 --> 00:00:05,160
hello everyone and welcome to hand made

2
00:00:03,388 --> 00:00:07,259
here of the show we code a complete game

3
00:00:05,160 --> 00:00:10,650
live on stream we are doing some

4
00:00:07,259 --> 00:00:12,929
lighting today we are trying to put in a

5
00:00:10,650 --> 00:00:15,780
little bit of a of a light distribution

6
00:00:12,929 --> 00:00:17,368
kind of a system into our renderer but

7
00:00:15,779 --> 00:00:19,108
just as that designed to sort of give

8
00:00:17,368 --> 00:00:22,829
the light a softer more bounced around

9
00:00:19,109 --> 00:00:25,769
look to it and we've just started it we

10
00:00:22,829 --> 00:00:27,329
have to finish the downward path before

11
00:00:25,768 --> 00:00:30,000
we can really start playing with it at

12
00:00:27,329 --> 00:00:34,289
all and so that's what we are going to

13
00:00:30,000 --> 00:00:36,829
be doing today today is day 396 so you

14
00:00:34,289 --> 00:00:40,530
want to start with day 395 source code

15
00:00:36,829 --> 00:00:41,969
if that's something you are going to

16
00:00:40,530 --> 00:00:44,520
follow along with at home that is the

17
00:00:41,969 --> 00:00:50,070
source code you want to be using so

18
00:00:44,520 --> 00:00:53,340
where we left off II was yesterday there

19
00:00:50,070 --> 00:00:55,738
we go so where we left off is we had

20
00:00:53,340 --> 00:00:59,579
just started with the downward iteration

21
00:00:55,738 --> 00:01:08,908
for our sampler and what we've got here

22
00:00:59,579 --> 00:01:11,609
ah let's see so here we go here's our

23
00:01:08,909 --> 00:01:15,689
multiply down so what we've got here is

24
00:01:11,609 --> 00:01:18,810
something which goes through the various

25
00:01:15,688 --> 00:01:22,408
textures that we've got the front emit

26
00:01:18,810 --> 00:01:26,868
back emit and the NP and then looks at a

27
00:01:22,409 --> 00:01:32,820
particular textual surface color and in

28
00:01:26,868 --> 00:01:35,849
it some NP data which is the normal

29
00:01:32,819 --> 00:01:38,908
location of that particular reflector

30
00:01:35,849 --> 00:01:40,408
and it tries to you know do something

31
00:01:38,909 --> 00:01:42,899
with it and right now we don't do

32
00:01:40,409 --> 00:01:44,100
anything in particular it's set up to do

33
00:01:42,899 --> 00:01:46,409
something but we don't actually do

34
00:01:44,099 --> 00:01:48,539
anything with it now one thing that we

35
00:01:46,409 --> 00:01:50,490
haven't done yet is the UV step

36
00:01:48,540 --> 00:01:51,030
parameter is not set to anything in

37
00:01:50,489 --> 00:01:56,310
particular

38
00:01:51,030 --> 00:01:58,290
oh wait no we did we did that so I guess

39
00:01:56,310 --> 00:02:00,899
we've done most of the compulsories then

40
00:01:58,290 --> 00:02:04,890
because we did set the UV step to be the

41
00:02:00,899 --> 00:02:07,019
correct value I believe so let's double

42
00:02:04,890 --> 00:02:08,759
check that we did that because this is

43
00:02:07,019 --> 00:02:11,759
actually and I think I wanted to rename

44
00:02:08,758 --> 00:02:13,369
this as well from UV step step to source

45
00:02:11,759 --> 00:02:16,799
UV step

46
00:02:13,370 --> 00:02:19,140
because it's there's 2uv steps that you

47
00:02:16,800 --> 00:02:22,920
could think about in this particular

48
00:02:19,139 --> 00:02:26,399
situation right there's the UV step of

49
00:02:22,919 --> 00:02:28,979
the destination parameter and there's

50
00:02:26,400 --> 00:02:30,900
the UV step of the source parameters and

51
00:02:28,979 --> 00:02:36,738
since they're at different levels of the

52
00:02:30,900 --> 00:02:49,349
texture they're necessarily different so

53
00:02:36,739 --> 00:03:07,560
let's go ahead just make sure that this

54
00:02:49,349 --> 00:03:09,150
is correct everywhere okay so yeah so I

55
00:03:07,560 --> 00:03:11,969
think we're doing everything correctly

56
00:03:09,150 --> 00:03:16,080
here at least as far as I know in terms

57
00:03:11,969 --> 00:03:17,849
of what we are presenting to the tropics

58
00:03:16,080 --> 00:03:19,620
card now and we just need some actual

59
00:03:17,849 --> 00:03:23,250
code that's going to do something useful

60
00:03:19,620 --> 00:03:27,359
right I and one of the things that might

61
00:03:23,250 --> 00:03:28,500
be good for us to do here is you know at

62
00:03:27,359 --> 00:03:31,019
the moment we don't really need it

63
00:03:28,500 --> 00:03:32,280
because we know what the up textures

64
00:03:31,019 --> 00:03:36,269
look like so we know we're just looking

65
00:03:32,280 --> 00:03:40,289
to down in the future what we might want

66
00:03:36,269 --> 00:03:42,959
to do is when we do handmade internal

67
00:03:40,289 --> 00:03:45,479
rather than using the same textures for

68
00:03:42,959 --> 00:03:48,209
the up and the down use a different set

69
00:03:45,479 --> 00:03:52,048
of textures so that we can compare what

70
00:03:48,209 --> 00:03:55,229
the it looks like before and after doing

71
00:03:52,049 --> 00:03:57,540
the down sampling at the moment though I

72
00:03:55,229 --> 00:04:00,358
just like to take a look at this now

73
00:03:57,539 --> 00:04:01,949
that we have it all in place and to see

74
00:04:00,359 --> 00:04:05,939
what we're doing here and try to figure

75
00:04:01,949 --> 00:04:08,429
out roughly what we need to be roughly

76
00:04:05,939 --> 00:04:10,709
what this needs to look like as we go

77
00:04:08,430 --> 00:04:13,230
forwards so you can see that we've got a

78
00:04:10,709 --> 00:04:14,729
desk front in it and a desk back event

79
00:04:13,229 --> 00:04:19,829
happening here at those two are getting

80
00:04:14,729 --> 00:04:22,949
computed and they're being placed here

81
00:04:19,829 --> 00:04:27,100
one of the things that I need to do is

82
00:04:22,949 --> 00:04:29,199
if you if you remember the lighting

83
00:04:27,100 --> 00:04:34,200
is going to be additive to a large

84
00:04:29,199 --> 00:04:37,569
extent in this case like in other words

85
00:04:34,199 --> 00:04:41,860
we've got a situation where at any given

86
00:04:37,569 --> 00:04:44,740
level of the texture we need to add in

87
00:04:41,860 --> 00:04:47,860
the new lighting that we compute because

88
00:04:44,740 --> 00:04:50,379
we certainly don't want to take out any

89
00:04:47,860 --> 00:04:52,360
lighting that was already at the place

90
00:04:50,379 --> 00:04:54,670
that we're talking about that we knew

91
00:04:52,360 --> 00:04:56,980
about on the way up so we just want to

92
00:04:54,670 --> 00:05:00,730
be adding new lighting in from other

93
00:04:56,980 --> 00:05:02,560
sources and that's very important so if

94
00:05:00,730 --> 00:05:04,540
we take a look at how this is executing

95
00:05:02,560 --> 00:05:06,970
we're putting the desk front and

96
00:05:04,540 --> 00:05:10,180
vacuumed it in here what we want to do

97
00:05:06,970 --> 00:05:13,630
is the desk front emit and the desk

98
00:05:10,180 --> 00:05:16,030
vacuumed it both our raw lighting

99
00:05:13,629 --> 00:05:18,659
computations that we will be doing when

100
00:05:16,029 --> 00:05:22,659
we fill in this transfer light equation

101
00:05:18,660 --> 00:05:24,220
and at the moment even if we assume that

102
00:05:22,660 --> 00:05:27,100
that was happening we're still a little

103
00:05:24,220 --> 00:05:29,650
bit wrong because we have here a

104
00:05:27,100 --> 00:05:32,170
reflection color and we're not using

105
00:05:29,649 --> 00:05:33,789
that reflection color so what we want to

106
00:05:32,170 --> 00:05:35,980
do is we want to take the desk front

107
00:05:33,790 --> 00:05:38,110
emit and the desk back emit and multiply

108
00:05:35,980 --> 00:05:41,410
them by a reflection color because

109
00:05:38,110 --> 00:05:49,900
whatever light we compute as hitting our

110
00:05:41,410 --> 00:05:53,290
surface we want that light we want that

111
00:05:49,899 --> 00:05:56,259
that bit of light to correctly take on

112
00:05:53,290 --> 00:05:59,200
the surface properties now what we

113
00:05:56,259 --> 00:06:01,779
probably want to do you know instead of

114
00:05:59,199 --> 00:06:03,759
doing it right here is if we ever want

115
00:06:01,779 --> 00:06:05,409
to try to do some kind of approximate

116
00:06:03,759 --> 00:06:08,230
specular with this which I don't think

117
00:06:05,410 --> 00:06:09,970
we really can but if we ever did we

118
00:06:08,230 --> 00:06:11,860
would need to have multiple pieces of

119
00:06:09,970 --> 00:06:13,510
information like the specular power and

120
00:06:11,860 --> 00:06:15,310
things like that in here

121
00:06:13,509 --> 00:06:17,620
so what I can do instead is just move

122
00:06:15,310 --> 00:06:19,300
back computation in here since we're

123
00:06:17,620 --> 00:06:21,490
passing the reflected color - they'll

124
00:06:19,300 --> 00:06:23,199
transfer light equation we can take

125
00:06:21,490 --> 00:06:24,340
whatever the emitted light is that we're

126
00:06:23,199 --> 00:06:27,699
just going to be transferring and

127
00:06:24,339 --> 00:06:34,089
multiply it by that ref C and that would

128
00:06:27,699 --> 00:06:35,649
be fine so that's at least one thing we

129
00:06:34,089 --> 00:06:37,989
have to do the other thing we have to do

130
00:06:35,649 --> 00:06:39,399
is make it so this is additive and in

131
00:06:37,990 --> 00:06:40,509
order to make it so that it's additive

132
00:06:39,399 --> 00:06:42,370
what we have to do

133
00:06:40,509 --> 00:06:46,779
is when we actually use the multi like

134
00:06:42,370 --> 00:06:49,269
down in this here in this routine where

135
00:06:46,779 --> 00:07:08,739
we do which apparently I can't find for

136
00:06:49,269 --> 00:07:10,539
some reason where is it there it is so

137
00:07:08,740 --> 00:07:12,850
it's like a cute like transport here

138
00:07:10,540 --> 00:07:14,890
what's going to happen when we use a

139
00:07:12,850 --> 00:07:17,320
program begin multi grated light down is

140
00:07:14,889 --> 00:07:18,729
when it computes these results we're

141
00:07:17,319 --> 00:07:21,339
going to want them to add into the

142
00:07:18,730 --> 00:07:23,530
texture the way we're doing currently so

143
00:07:21,339 --> 00:07:27,929
what that means is we need to do a GL

144
00:07:23,529 --> 00:07:33,599
enable and a GL disabled for blend

145
00:07:27,930 --> 00:07:37,090
because we need it we need the blending

146
00:07:33,600 --> 00:07:40,629
the blend unit to take the output of

147
00:07:37,089 --> 00:07:43,449
this light pass and add it to whatever

148
00:07:40,629 --> 00:07:45,279
was in the texture beforehand so the

149
00:07:43,449 --> 00:07:49,060
blends funk that we want to use here is

150
00:07:45,279 --> 00:07:54,279
going to be GL one GL one in the sense

151
00:07:49,060 --> 00:07:57,370
that we we don't want to modulate any

152
00:07:54,279 --> 00:07:59,709
one by any alpha or anything the values

153
00:07:57,370 --> 00:08:01,180
that were outputting are literally just

154
00:07:59,709 --> 00:08:04,000
the amount of light that's being added

155
00:08:01,180 --> 00:08:06,400
so we want to take 100% of destination

156
00:08:04,000 --> 00:08:08,310
and 100% of source light and combine

157
00:08:06,399 --> 00:08:11,229
them together we don't want any

158
00:08:08,310 --> 00:08:16,649
attenuation of them by anyone's values

159
00:08:11,230 --> 00:08:19,660
at all so I'm pretty sure that's okay

160
00:08:16,649 --> 00:08:23,169
because as far as I know nobody is using

161
00:08:19,660 --> 00:08:25,360
blending anywhere else other than in

162
00:08:23,170 --> 00:08:28,509
front of these old routines that we

163
00:08:25,360 --> 00:08:32,019
don't support at the moment so we should

164
00:08:28,509 --> 00:08:35,289
be able to just let that roll and that

165
00:08:32,019 --> 00:08:37,769
should all be good now what you'll see

166
00:08:35,289 --> 00:08:37,769
here

167
00:08:41,509 --> 00:08:45,649
is that now that I switched it to add

168
00:08:42,950 --> 00:08:53,629
we're getting some kind of odd results

169
00:08:45,649 --> 00:08:58,220
there right which is the oh my that's

170
00:08:53,629 --> 00:09:00,110
really pretty cool that has nothing to

171
00:08:58,220 --> 00:09:03,700
do probably with what we want to be

172
00:09:00,110 --> 00:09:08,000
having happening but it's really neat

173
00:09:03,700 --> 00:09:09,920
anyway this is a little bit surprising

174
00:09:08,000 --> 00:09:11,179
to me and I'm not sure I have an

175
00:09:09,919 --> 00:09:14,000
explanation for it which makes me a

176
00:09:11,179 --> 00:09:19,219
little nervous now that we switch the

177
00:09:14,000 --> 00:09:23,240
blend mode to add we're getting the old

178
00:09:19,220 --> 00:09:26,570
lighting in here as well on top of the

179
00:09:23,240 --> 00:09:28,279
new lighting the reason that that is odd

180
00:09:26,570 --> 00:09:31,010
to me is you'll notice that the whole

181
00:09:28,279 --> 00:09:34,159
screen is yellow but we're seeing a red

182
00:09:31,009 --> 00:09:36,769
and green dot now the reason that that's

183
00:09:34,159 --> 00:09:44,209
weird is because yellow should be fully

184
00:09:36,769 --> 00:09:46,069
1 1 or you know the maximum that bright

185
00:09:44,210 --> 00:09:50,060
yellow is the maximum you could get on

186
00:09:46,070 --> 00:09:52,879
either Channel how adding yellow to

187
00:09:50,059 --> 00:09:54,859
something that's red gives you red still

188
00:09:52,879 --> 00:09:59,659
I have no idea

189
00:09:54,860 --> 00:10:03,680
and just to underscore why that's odd

190
00:09:59,659 --> 00:10:05,600
if you the only way I can think of that

191
00:10:03,679 --> 00:10:07,429
that would be happening legitimately

192
00:10:05,600 --> 00:10:10,490
meaning not because of the bug in our

193
00:10:07,429 --> 00:10:14,659
program is if it's because hey these

194
00:10:10,490 --> 00:10:17,450
lights are set at more than one for

195
00:10:14,659 --> 00:10:21,639
their initial value because if you

196
00:10:17,450 --> 00:10:24,259
remember the feed lighting was that way

197
00:10:21,639 --> 00:10:29,529
so where was that feed looking to see

198
00:10:24,259 --> 00:10:34,519
here the C's lighting has these as as

199
00:10:29,529 --> 00:10:36,439
110 now if I was to drop these down the

200
00:10:34,519 --> 00:10:39,519
problem is we wouldn't be getting that

201
00:10:36,440 --> 00:10:45,430
bright yellow propagated back I assume

202
00:10:39,519 --> 00:10:45,429
you know maybe we would but if we didn't

203
00:10:45,549 --> 00:10:50,959
yeah okay so this is just odd so I think

204
00:10:48,350 --> 00:10:54,110
we need to investigate this a little bit

205
00:10:50,960 --> 00:10:54,680
further because you can see now I'm not

206
00:10:54,110 --> 00:11:00,980
even

207
00:10:54,679 --> 00:11:03,189
getting any values that are over 1 so

208
00:11:00,980 --> 00:11:07,670
how you could have a yellow light

209
00:11:03,190 --> 00:11:12,040
everywhere and still end up with with

210
00:11:07,669 --> 00:11:12,039
what we're seeing I have no idea right

211
00:11:12,458 --> 00:11:24,859
so this is this is just peculiar to me

212
00:11:16,690 --> 00:11:26,120
and again I suppose it could have

213
00:11:24,860 --> 00:11:28,339
something to do with the power of like

214
00:11:26,120 --> 00:11:30,350
I'll drop them down even further so that

215
00:11:28,339 --> 00:11:32,720
I know we're mostly going to be within

216
00:11:30,350 --> 00:11:36,440
the the range that can be directly

217
00:11:32,720 --> 00:11:38,000
converted from float to 8-bit color for

218
00:11:36,440 --> 00:11:42,890
display because I don't know what's

219
00:11:38,000 --> 00:11:44,899
happening in that phase exactly but yeah

220
00:11:42,889 --> 00:11:48,100
you can still see I mean there just

221
00:11:44,899 --> 00:11:50,389
doesn't I just can't see any explanation

222
00:11:48,100 --> 00:11:52,129
for this at all so there's got to be

223
00:11:50,389 --> 00:11:55,490
something buggy about the way we're

224
00:11:52,129 --> 00:12:01,759
doing it and I would like to figure out

225
00:11:55,490 --> 00:12:04,759
what so let's investigate further let's

226
00:12:01,759 --> 00:12:07,730
see how we're getting this this data so

227
00:12:04,759 --> 00:12:10,009
when we take these samples here so

228
00:12:07,730 --> 00:12:12,430
here's the up path which as far as I can

229
00:12:10,009 --> 00:12:15,500
tell isn't doing anything wrong or

230
00:12:12,429 --> 00:12:16,069
anything obviously wrong in the down

231
00:12:15,500 --> 00:12:21,080
path

232
00:12:16,070 --> 00:12:24,290
I'm sampling from the parents and when

233
00:12:21,080 --> 00:12:26,629
I'm doing this that you can see me

234
00:12:24,289 --> 00:12:30,349
adding the the light transfer equations

235
00:12:26,629 --> 00:12:33,139
in here I guess I am blowing out the

236
00:12:30,350 --> 00:12:35,269
range of the float that is true because

237
00:12:33,139 --> 00:12:39,139
I'm adding four things and I'm not

238
00:12:35,269 --> 00:12:41,240
dividing them out by anything and you

239
00:12:39,139 --> 00:12:42,649
know so if we're talking about trying to

240
00:12:41,240 --> 00:12:44,149
just get something that can be

241
00:12:42,649 --> 00:12:45,169
represented in a float that's going to

242
00:12:44,149 --> 00:12:47,169
blow it out now I don't care about

243
00:12:45,169 --> 00:12:49,669
representing them in the float at the

244
00:12:47,169 --> 00:12:51,139
limit because what I'm doing is I'm

245
00:12:49,669 --> 00:12:53,269
summing a bunch of light values can be

246
00:12:51,139 --> 00:12:54,860
arbitrary and at the end we will have a

247
00:12:53,269 --> 00:12:56,389
mapping step that map's that down to

248
00:12:54,860 --> 00:12:59,329
something and we're not doing that at

249
00:12:56,389 --> 00:13:04,100
the moment but you know in the meantime

250
00:12:59,328 --> 00:13:08,559
if I wanted to I can keep this this

251
00:13:04,100 --> 00:13:12,230
stuff at a reasonable level by using the

252
00:13:08,559 --> 00:13:19,309
the number of things some did quartering

253
00:13:12,230 --> 00:13:22,269
them right so looking at that that looks

254
00:13:19,309 --> 00:13:25,939
more like what I would expect

255
00:13:22,269 --> 00:13:28,190
why not quartering them which allows the

256
00:13:25,940 --> 00:13:30,170
float to overflow why that produces the

257
00:13:28,190 --> 00:13:32,540
result it does I really couldn't tell

258
00:13:30,169 --> 00:13:35,419
you I guess it's possible that the way

259
00:13:32,539 --> 00:13:38,838
the mapping works is just by taking the

260
00:13:35,419 --> 00:13:43,549
F mod of the value that would make sense

261
00:13:38,839 --> 00:13:47,000
I guess but even so I don't know so

262
00:13:43,549 --> 00:13:50,559
let's suppose we crank that up you know

263
00:13:47,000 --> 00:13:57,169
over time a little bit just to see

264
00:13:50,559 --> 00:13:58,909
roughly what we get and again I'm just

265
00:13:57,169 --> 00:14:01,669
experimenting here because I don't

266
00:13:58,909 --> 00:14:03,198
understand exactly what I'm seeing and I

267
00:14:01,669 --> 00:14:06,019
want to gain a little bit more insight

268
00:14:03,198 --> 00:14:10,399
into it so you can kind of see that

269
00:14:06,019 --> 00:14:13,519
blending process right it keeps working

270
00:14:10,399 --> 00:14:16,578
around the two points but never really

271
00:14:13,519 --> 00:14:19,039
seems to change what's on the interior

272
00:14:16,578 --> 00:14:22,939
of those light sources and that is just

273
00:14:19,039 --> 00:14:23,838
really perplexing I have no explanation

274
00:14:22,940 --> 00:14:27,880
for that

275
00:14:23,839 --> 00:14:27,880
I really wish I did

276
00:14:30,049 --> 00:14:33,819
but I so totally don't and

277
00:14:45,960 --> 00:14:52,620
and just to be extra clear about what

278
00:14:49,289 --> 00:14:57,269
I'm talking about when you look at these

279
00:14:52,620 --> 00:14:59,370
two dots in the middle here what I'm

280
00:14:57,269 --> 00:15:02,429
expecting to have happen and what it's

281
00:14:59,370 --> 00:15:05,909
not happening is I expect those two

282
00:15:02,429 --> 00:15:11,809
points to be getting brighter themselves

283
00:15:05,909 --> 00:15:11,809
as I transfer more light from the parent

284
00:15:12,950 --> 00:15:18,810
so as I say instead that will double the

285
00:15:16,769 --> 00:15:22,049
power of the light transmitted by the

286
00:15:18,809 --> 00:15:24,929
parent right but as I look there what

287
00:15:22,049 --> 00:15:30,449
you can see is that the area around the

288
00:15:24,929 --> 00:15:34,679
light is having that happen ah you know

289
00:15:30,450 --> 00:15:37,830
what I think I know why that is

290
00:15:34,679 --> 00:15:43,079
that's because of the recipe that's

291
00:15:37,830 --> 00:15:45,149
because of this isn't it so if I was to

292
00:15:43,080 --> 00:15:47,278
take out because the recipe on a light

293
00:15:45,149 --> 00:15:50,190
is zero so there will be no light

294
00:15:47,278 --> 00:15:55,740
transmitted to the light surface so if I

295
00:15:50,190 --> 00:15:58,080
instead was to do this there we go okay

296
00:15:55,740 --> 00:16:06,959
so that was actually just a case of nice

297
00:15:58,080 --> 00:16:12,180
wording myself there right okay now I

298
00:16:06,958 --> 00:16:13,799
can still move the hero around here and

299
00:16:12,179 --> 00:16:20,129
this is some bizarre stuff that's

300
00:16:13,799 --> 00:16:21,778
happening to say the least and you can

301
00:16:20,129 --> 00:16:22,980
kind of see there how our filtering is

302
00:16:21,778 --> 00:16:26,338
going to have to get better because you

303
00:16:22,980 --> 00:16:30,149
can see what's happening with that sort

304
00:16:26,339 --> 00:16:33,329
of bizarre light propagation since it

305
00:16:30,149 --> 00:16:36,629
happens on right now on two by two

306
00:16:33,328 --> 00:16:41,189
boundaries you end up with sort of this

307
00:16:36,629 --> 00:16:45,000
this visible sort of filtering error as

308
00:16:41,190 --> 00:16:46,709
you go but if we clamp that light a

309
00:16:45,000 --> 00:16:49,019
little bit more right so now you can see

310
00:16:46,708 --> 00:16:51,899
me sort of moving it around here

311
00:16:49,019 --> 00:16:55,879
if the clamp that light a little bit

312
00:16:51,899 --> 00:16:58,528
more then you can see that it's still

313
00:16:55,879 --> 00:16:59,399
kind of reasonable at at a level that

314
00:16:58,528 --> 00:17:01,110
doesn't

315
00:16:59,399 --> 00:17:06,480
doesn't feedback on itself and becomes

316
00:17:01,110 --> 00:17:08,819
quite so obvious so anyway so we have a

317
00:17:06,480 --> 00:17:11,190
couple paths we can go down here so if I

318
00:17:08,819 --> 00:17:13,169
do do recipe in here and prevent it from

319
00:17:11,190 --> 00:17:14,820
contributing to a thing that's already

320
00:17:13,170 --> 00:17:17,460
in emitter which I don't know if we want

321
00:17:14,819 --> 00:17:20,220
to do because I don't know if we want to

322
00:17:17,460 --> 00:17:22,380
ask something as an emitter reflector in

323
00:17:20,220 --> 00:17:23,670
the real world I don't know that there's

324
00:17:22,380 --> 00:17:31,230
a whole lot of stuff that's like that

325
00:17:23,670 --> 00:17:33,090
sometimes there is what typically lights

326
00:17:31,230 --> 00:17:35,519
are so bright if you look directly at

327
00:17:33,089 --> 00:17:37,199
the element that you don't super

328
00:17:35,519 --> 00:17:40,470
distinguish like you don't super need to

329
00:17:37,200 --> 00:17:43,009
talk about light that gets reflected off

330
00:17:40,470 --> 00:17:48,120
of necessarily but you know either way

331
00:17:43,009 --> 00:17:50,069
so if we talk about these lights here

332
00:17:48,119 --> 00:17:54,089
I'm going to go ahead and beat the power

333
00:17:50,069 --> 00:17:56,909
up on these lights and I'm going to see

334
00:17:54,089 --> 00:17:58,859
what happens as I sort of change that

335
00:17:56,910 --> 00:18:00,870
since now we've got a Semite stable

336
00:17:58,859 --> 00:18:02,669
situation occurring there just for the

337
00:18:00,869 --> 00:18:09,269
sake seed lighting so I'm going to

338
00:18:02,670 --> 00:18:12,558
return these back to one and one first

339
00:18:09,269 --> 00:18:12,558
[Applause]

340
00:18:33,960 --> 00:18:39,210
now I'm going to go 10:1

341
00:18:48,140 --> 00:18:54,650
and now I'm going to go to 101

342
00:18:59,440 --> 00:19:13,330
and lastly I'm going to go to 1010 or

343
00:19:07,660 --> 00:19:15,790
110 I should say alright so now we've

344
00:19:13,329 --> 00:19:18,730
got our two lights and they have sort of

345
00:19:15,789 --> 00:19:20,230
quite a bit of outside power and you can

346
00:19:18,730 --> 00:19:21,579
see some problems that we're already

347
00:19:20,230 --> 00:19:23,200
going to have to start tackling right

348
00:19:21,579 --> 00:19:25,539
you can see the problems with the

349
00:19:23,200 --> 00:19:28,480
filtering approaches there where when

350
00:19:25,539 --> 00:19:30,670
you line up well for the filtering you

351
00:19:28,480 --> 00:19:33,190
get further you get more bleed than if

352
00:19:30,670 --> 00:19:35,519
you don't and so as we start to work

353
00:19:33,190 --> 00:19:39,190
with these right we're going to have to

354
00:19:35,519 --> 00:19:41,170
try to do a good job with keeping these

355
00:19:39,190 --> 00:19:46,720
things relatively smooth in that way

356
00:19:41,170 --> 00:19:48,460
right and yeah I mean that's just again

357
00:19:46,720 --> 00:19:51,009
a battle but you anytime you discretize

358
00:19:48,460 --> 00:19:52,600
something on a grid you end up in a

359
00:19:51,009 --> 00:19:56,920
situation where you're going to have to

360
00:19:52,599 --> 00:20:00,909
kind of fight that sampling problem so

361
00:19:56,920 --> 00:20:03,430
let's go ahead and say that this is

362
00:20:00,910 --> 00:20:06,220
where I'm going to leave it for right

363
00:20:03,430 --> 00:20:10,660
now again we haven't done any of the

364
00:20:06,220 --> 00:20:14,650
lighting stuff yet we just set up our

365
00:20:10,660 --> 00:20:17,100
filtering and I think what I'd like to

366
00:20:14,650 --> 00:20:17,100
do now

367
00:20:17,730 --> 00:20:24,789
probably because without this I feel

368
00:20:21,160 --> 00:20:26,380
like it's going to be well I don't know

369
00:20:24,789 --> 00:20:29,019
so I have two directions I can go now

370
00:20:26,380 --> 00:20:31,450
either I can go and say all right we've

371
00:20:29,019 --> 00:20:35,440
got this in place we need to go work out

372
00:20:31,450 --> 00:20:37,990
how the lighting works let's before we

373
00:20:35,440 --> 00:20:40,059
do that have a way that we can switch

374
00:20:37,990 --> 00:20:42,670
back and forth between the gain load and

375
00:20:40,059 --> 00:20:46,089
the test mode right in order to do that

376
00:20:42,670 --> 00:20:49,210
we need to go make the ability in the

377
00:20:46,089 --> 00:20:55,869
renderer to specify that a surface is

378
00:20:49,210 --> 00:21:03,340
emissive and that will have to be

379
00:20:55,869 --> 00:21:05,929
something that gets put into the render

380
00:21:03,339 --> 00:21:09,799
passes right

381
00:21:05,930 --> 00:21:12,140
so that's what we want to do and I'm

382
00:21:09,799 --> 00:21:14,089
just trying to think about how we're

383
00:21:12,140 --> 00:21:15,620
going to do that exactly or you know

384
00:21:14,089 --> 00:21:18,709
what the what the way is that we're

385
00:21:15,619 --> 00:21:20,119
going to do that so we need to do that

386
00:21:18,710 --> 00:21:22,279
and the reason that I'm thinking that I

387
00:21:20,119 --> 00:21:24,709
might want to go do that now is because

388
00:21:22,279 --> 00:21:26,779
as we start to progress forward on the

389
00:21:24,710 --> 00:21:28,640
lighting one of the things that we're

390
00:21:26,779 --> 00:21:31,430
not going to know is how good the

391
00:21:28,640 --> 00:21:34,520
lighting is at any particular time right

392
00:21:31,430 --> 00:21:36,440
so you know because this is all going to

393
00:21:34,519 --> 00:21:39,139
be about approximate light transfer

394
00:21:36,440 --> 00:21:41,120
stuff and we've got the system set up

395
00:21:39,140 --> 00:21:43,430
now to sort of play with it

396
00:21:41,119 --> 00:21:44,809
and play around with it one of the

397
00:21:43,430 --> 00:21:46,970
things we're going to want to do once we

398
00:21:44,809 --> 00:21:48,799
get something working is we're going to

399
00:21:46,970 --> 00:21:50,569
want to flip over to the game and see

400
00:21:48,799 --> 00:21:52,879
what does the lighting look like if we

401
00:21:50,569 --> 00:21:54,740
actually try to use it in the game and

402
00:21:52,880 --> 00:21:58,460
right now we can't do that because

403
00:21:54,740 --> 00:22:01,160
there's no way to get the game the game

404
00:21:58,460 --> 00:22:04,340
doesn't specify any lights and we don't

405
00:22:01,160 --> 00:22:05,900
have a transfer from the game to the

406
00:22:04,339 --> 00:22:08,299
lighting system and the lighting system

407
00:22:05,900 --> 00:22:09,890
back to the game so I think that's what

408
00:22:08,299 --> 00:22:11,210
I'd like to do since we haven't I don't

409
00:22:09,890 --> 00:22:12,440
want to get too far down the road

410
00:22:11,210 --> 00:22:15,289
because once we go down the lighting

411
00:22:12,440 --> 00:22:17,930
Road I want to finish it I don't want to

412
00:22:15,289 --> 00:22:19,569
have to ping pong back so I think what

413
00:22:17,930 --> 00:22:22,190
I'm going to do now is just stop it here

414
00:22:19,569 --> 00:22:24,049
and we'll leave that maybe we'll leave

415
00:22:22,190 --> 00:22:26,210
that for next week like writing the

416
00:22:24,049 --> 00:22:27,859
lighting equations because I think what

417
00:22:26,210 --> 00:22:29,630
I want to now is get it so we can see

418
00:22:27,859 --> 00:22:33,829
the results of the lighting creations in

419
00:22:29,630 --> 00:22:37,100
the game and we should already be able

420
00:22:33,829 --> 00:22:38,779
to do that like if we were to look at

421
00:22:37,099 --> 00:22:41,419
something like this in the game we

422
00:22:38,779 --> 00:22:43,849
should see the world lit in this really

423
00:22:41,420 --> 00:22:47,180
unusually weird way right we should see

424
00:22:43,849 --> 00:22:51,349
a blobby red splotch of light and a

425
00:22:47,180 --> 00:22:53,539
green and yellow splotch of light around

426
00:22:51,349 --> 00:22:55,250
the character and that's all we would

427
00:22:53,539 --> 00:22:57,139
see and the rest would be dark right we

428
00:22:55,250 --> 00:23:04,759
would see literally this as the light

429
00:22:57,140 --> 00:23:07,520
mask overlay for the game right so if we

430
00:23:04,759 --> 00:23:09,289
wanted to go down that route let's take

431
00:23:07,519 --> 00:23:10,759
a look at what we would have to do here

432
00:23:09,289 --> 00:23:16,909
right because again this is going to be

433
00:23:10,759 --> 00:23:19,759
pretty complicated okay

434
00:23:16,910 --> 00:23:22,910
so here's the status of the game render

435
00:23:19,759 --> 00:23:24,558
at the moment it is using some lighting

436
00:23:22,910 --> 00:23:27,800
and we're basically going to pull that

437
00:23:24,558 --> 00:23:29,149
lighting out right to a certain degree

438
00:23:27,799 --> 00:23:32,899
and we can pull it out in steps

439
00:23:29,150 --> 00:23:34,580
potentially as well but anyway so what

440
00:23:32,900 --> 00:23:37,250
we want to be able to do here is right

441
00:23:34,579 --> 00:23:39,919
now we only specify one light we specify

442
00:23:37,250 --> 00:23:41,900
a light position and a light position

443
00:23:39,920 --> 00:23:44,150
isn't at all what we want what we want

444
00:23:41,900 --> 00:23:47,330
to be able to do instead is randomly

445
00:23:44,150 --> 00:23:49,850
select any sprite that we want and turn

446
00:23:47,329 --> 00:23:51,799
it into a light source right that's what

447
00:23:49,849 --> 00:23:54,139
we that's what we actually want because

448
00:23:51,799 --> 00:23:56,210
that way we can just have as many lights

449
00:23:54,140 --> 00:23:58,280
as we want in the scene and then they

450
00:23:56,210 --> 00:24:00,200
get rendered in and processed as light

451
00:23:58,279 --> 00:24:01,428
so we don't have to have some fixed

452
00:24:00,200 --> 00:24:03,529
number of lights with some fixed number

453
00:24:01,429 --> 00:24:06,470
of positions they're just sprites can be

454
00:24:03,529 --> 00:24:08,178
illuminated or not right and any sprites

455
00:24:06,470 --> 00:24:11,360
that is Mark is illuminated gets

456
00:24:08,179 --> 00:24:17,720
rendered you know emissive Lea and any

457
00:24:11,359 --> 00:24:21,469
sprite that is any sprite that is not

458
00:24:17,720 --> 00:24:23,769
that is just rendered as a reflector

459
00:24:21,470 --> 00:24:27,319
okay

460
00:24:23,769 --> 00:24:28,579
so that's what we want to do so if you

461
00:24:27,319 --> 00:24:34,669
think about how that's going to have to

462
00:24:28,579 --> 00:24:37,549
happen as we look into this a little bit

463
00:24:34,670 --> 00:24:39,170
further the complexity here a lot of

464
00:24:37,549 --> 00:24:47,109
that complexity comes from the fact that

465
00:24:39,170 --> 00:24:49,400
we've got depth feeling happening so

466
00:24:47,109 --> 00:24:51,169
we've got a situation where we're going

467
00:24:49,400 --> 00:24:53,269
to be rendering these for depth feels

468
00:24:51,170 --> 00:24:55,220
right and you can kind of see where

469
00:24:53,269 --> 00:24:59,210
we've got the multisample def peeling

470
00:24:55,220 --> 00:25:02,509
happening here you can see this this is

471
00:24:59,210 --> 00:25:04,160
the the just feel loop where we set up

472
00:25:02,509 --> 00:25:06,619
our frame buffers for right into the DEF

473
00:25:04,160 --> 00:25:08,480
peels and we have this multi sample

474
00:25:06,619 --> 00:25:13,969
resolve that half of secured snacks

475
00:25:08,480 --> 00:25:17,210
things down after it's after we've sort

476
00:25:13,970 --> 00:25:18,650
of dealt with them and if we take a look

477
00:25:17,210 --> 00:25:25,509
at what we're doing in that resolved

478
00:25:18,650 --> 00:25:25,509
multi sample we use the few words it

479
00:25:26,529 --> 00:25:31,389
in the compiled resolve month a sample

480
00:25:28,480 --> 00:25:32,860
function which we have here you can see

481
00:25:31,390 --> 00:25:35,620
that what we're doing is we do some

482
00:25:32,859 --> 00:25:41,279
textile fetches to determine what the

483
00:25:35,619 --> 00:25:44,139
range is of the depth so we do this and

484
00:25:41,279 --> 00:25:46,180
we go whatever the depth range is split

485
00:25:44,140 --> 00:25:50,020
it in half and we're going to take

486
00:25:46,180 --> 00:25:52,960
everybody who's on the front side of

487
00:25:50,019 --> 00:25:55,990
that is going to be considered in for

488
00:25:52,960 --> 00:25:59,470
the depth that that particular depth

489
00:25:55,990 --> 00:26:02,230
field right so everyone on the downside

490
00:25:59,470 --> 00:26:04,690
of that will get rendered on the next

491
00:26:02,230 --> 00:26:07,390
peel as well whereas everyone on the

492
00:26:04,690 --> 00:26:09,940
front side of it doesn't

493
00:26:07,390 --> 00:26:11,890
I also for whatever reason and I don't

494
00:26:09,940 --> 00:26:15,430
really know what the reason is we

495
00:26:11,890 --> 00:26:17,980
elected not to sort the samples based on

496
00:26:15,430 --> 00:26:19,539
that I don't remember if we tested which

497
00:26:17,980 --> 00:26:22,150
one looked better and determined that it

498
00:26:19,539 --> 00:26:27,089
looked better to average them all or

499
00:26:22,150 --> 00:26:30,670
what happened here so you know honestly

500
00:26:27,089 --> 00:26:33,970
here's a question should we just double

501
00:26:30,670 --> 00:26:37,779
check that while I'm in here we probably

502
00:26:33,970 --> 00:26:39,490
should all right so let's let's take a

503
00:26:37,779 --> 00:26:41,829
look at the light stuff here I'm going

504
00:26:39,490 --> 00:26:44,039
to pull this light stuff out for a

505
00:26:41,829 --> 00:26:44,039
minute

506
00:26:53,380 --> 00:26:58,800
[Applause]

507
00:26:56,390 --> 00:27:06,920
so I'm going to just render the whole

508
00:26:58,799 --> 00:27:06,919
screen the fulbright which there you go

509
00:27:07,789 --> 00:27:13,349
and what I could do is leave directional

510
00:27:10,319 --> 00:27:14,759
on but not distance as well which I

511
00:27:13,349 --> 00:27:16,949
guess would be nice we can see the edges

512
00:27:14,759 --> 00:27:19,289
of those cubes better so if I did

513
00:27:16,950 --> 00:27:22,830
directional instead of distance what I

514
00:27:19,289 --> 00:27:26,279
could do is say like distance camera

515
00:27:22,829 --> 00:27:30,869
distance here let's see here light

516
00:27:26,279 --> 00:27:33,058
distance one over light distance I could

517
00:27:30,869 --> 00:27:35,149
just say light distance equals 1.0 or

518
00:27:33,058 --> 00:27:38,579
something

519
00:27:35,150 --> 00:27:40,650
well actually leg strength are divided

520
00:27:38,579 --> 00:27:46,259
by light distance squared yes so I can

521
00:27:40,650 --> 00:27:47,850
say I think can just do that well

522
00:27:46,259 --> 00:27:49,859
actually now I take that back

523
00:27:47,849 --> 00:27:52,169
because we need to normalize it properly

524
00:27:49,859 --> 00:27:54,689
so I think what I actually need to do is

525
00:27:52,170 --> 00:27:56,340
do that act in fact so we've got light

526
00:27:54,690 --> 00:28:00,179
distance equals like to light then this

527
00:27:56,339 --> 00:28:03,899
normalizes that then here this is the

528
00:28:00,179 --> 00:28:06,390
part we do light strength and we compute

529
00:28:03,900 --> 00:28:07,980
it with the light distance squared what

530
00:28:06,390 --> 00:28:11,009
I want to do there I think is just do

531
00:28:07,980 --> 00:28:17,480
like distance equals 1.0 so that we

532
00:28:11,009 --> 00:28:17,480
won't modify that strength at all right

533
00:28:18,890 --> 00:28:24,090
so there we've got it nice and bright

534
00:28:21,089 --> 00:28:26,609
now so I should be able to see and just

535
00:28:24,089 --> 00:28:28,829
looking at the edges of things I don't

536
00:28:26,609 --> 00:28:31,049
really like the fact that I still get

537
00:28:28,829 --> 00:28:34,109
that let me maybe if I fix the light

538
00:28:31,049 --> 00:28:36,779
position so it doesn't move around would

539
00:28:34,109 --> 00:28:40,849
be the other thing I could do right so I

540
00:28:36,779 --> 00:28:40,849
could say light P equals you know

541
00:28:52,059 --> 00:28:59,649
[Applause]

542
00:29:02,368 --> 00:29:05,970
and so there I can see a lot more

543
00:29:04,019 --> 00:29:10,138
cleanly right because this is more like

544
00:29:05,970 --> 00:29:12,419
the original where the light is is sort

545
00:29:10,138 --> 00:29:20,008
of semi stationary although it's you

546
00:29:12,419 --> 00:29:23,330
know not quite so again just looking at

547
00:29:20,009 --> 00:29:28,409
the artifact in here from the DEF peel

548
00:29:23,329 --> 00:29:31,199
you know you can see some of it you can

549
00:29:28,409 --> 00:29:33,599
see a little bit in there it's hard to

550
00:29:31,200 --> 00:29:36,419
see which because we worked on making it

551
00:29:33,598 --> 00:29:41,098
hard to see but you still can sort of

552
00:29:36,419 --> 00:29:43,139
see it a little bit again I'm just

553
00:29:41,098 --> 00:29:47,189
looking for artifacts there and let's

554
00:29:43,138 --> 00:29:52,709
take a look now if I change the way

555
00:29:47,190 --> 00:29:55,649
we're reproducing the samples here so

556
00:29:52,710 --> 00:29:59,819
the way we've got this is the sample

557
00:29:55,648 --> 00:30:01,678
camp here we run through when we do one

558
00:29:59,819 --> 00:30:03,839
point over the sample count what I want

559
00:30:01,679 --> 00:30:06,720
to do is take the fist feel for Ag depth

560
00:30:03,839 --> 00:30:09,598
here and I basically want to say like if

561
00:30:06,720 --> 00:30:12,118
you are on the positive side of that so

562
00:30:09,598 --> 00:30:14,519
when we come through these samples and

563
00:30:12,118 --> 00:30:25,339
we fetch one the if statement we're

564
00:30:14,519 --> 00:30:25,339
going to want here is for depth being

565
00:30:26,598 --> 00:30:32,368
sort of great I don't remember which

566
00:30:30,479 --> 00:30:36,479
direction depth ever goes in here so

567
00:30:32,368 --> 00:30:39,358
Jeff max is zero depth min is one point

568
00:30:36,479 --> 00:30:44,239
oh so basically if the depth is higher

569
00:30:39,358 --> 00:30:50,418
than the GL frag depth we will take it

570
00:30:44,239 --> 00:30:56,179
right and we'll also introduce sample

571
00:30:50,419 --> 00:30:56,179
div here and use that

572
00:30:57,130 --> 00:31:05,570
instead because we only want to divide

573
00:31:02,720 --> 00:31:15,940
by the number that we actually got right

574
00:31:05,569 --> 00:31:15,939
I guess unsigned integers are now saying

575
00:31:24,650 --> 00:31:29,269
yes oh that's no good that eliminates a

576
00:31:27,650 --> 00:31:37,130
lot of the blending we were getting

577
00:31:29,269 --> 00:31:39,410
there although that's a little bit odd

578
00:31:37,130 --> 00:31:42,370
to me so I'm kind of wondering why

579
00:31:39,410 --> 00:31:42,370
that's so bad

580
00:31:57,079 --> 00:32:06,109
oh because this is backwards never mind

581
00:32:00,378 --> 00:32:10,579
yeah I read that wrong my bad I still

582
00:32:06,109 --> 00:32:13,128
know better though but yeah I believe

583
00:32:10,579 --> 00:32:16,189
because if deaf min is one that means

584
00:32:13,128 --> 00:32:18,199
that we're using less ones for that I

585
00:32:16,190 --> 00:32:19,788
guess we don't really know deaf min deaf

586
00:32:18,200 --> 00:32:21,350
max whether I named those properly

587
00:32:19,788 --> 00:32:23,720
either but we've tested both directions

588
00:32:21,349 --> 00:32:27,888
and these are fun work so I suppose we

589
00:32:23,720 --> 00:32:30,919
know that that's the case either way so

590
00:32:27,888 --> 00:32:33,288
I just wanted to just wanted to double

591
00:32:30,919 --> 00:32:34,609
check that there wasn't something better

592
00:32:33,288 --> 00:32:42,499
we could do there than what we were

593
00:32:34,608 --> 00:32:45,249
doing so we'll leave that as is I'll

594
00:32:42,499 --> 00:32:45,249
take this out

595
00:32:52,298 --> 00:32:56,759
and think we can just leave this as is

596
00:32:57,808 --> 00:33:02,829
alright

597
00:33:00,159 --> 00:33:04,769
so the only goal now that I have is

598
00:33:02,829 --> 00:33:08,858
again trying to figure out how to get

599
00:33:04,769 --> 00:33:12,038
everything into the lighting system

600
00:33:08,858 --> 00:33:15,608
proper now the way that this needs to

601
00:33:12,038 --> 00:33:18,338
happen again is pretty tricky I think

602
00:33:15,608 --> 00:33:20,708
and the reason for that is because of

603
00:33:18,338 --> 00:33:24,628
the depth field if we weren't going to

604
00:33:20,709 --> 00:33:29,440
try and do a sort of actual

605
00:33:24,628 --> 00:33:33,608
three-dimensional lighting this would be

606
00:33:29,440 --> 00:33:34,749
a lot simpler but because we are going

607
00:33:33,608 --> 00:33:36,548
to try and do actual three-dimensional

608
00:33:34,749 --> 00:33:39,788
lighting it's going to be a little bit

609
00:33:36,548 --> 00:33:41,709
more complicated but that's ok

610
00:33:39,788 --> 00:33:44,108
complicated stuff is what we do on

611
00:33:41,709 --> 00:33:46,139
handmade 0 because after all we're

612
00:33:44,108 --> 00:33:48,249
supposed to be teaching programming and

613
00:33:46,138 --> 00:33:50,918
picking things that are incredibly easy

614
00:33:48,249 --> 00:33:52,629
would not be very interesting for that

615
00:33:50,919 --> 00:33:54,778
end even though that might be what you

616
00:33:52,628 --> 00:33:59,319
should do on your game if you don't care

617
00:33:54,778 --> 00:34:00,909
so what we want to do here is we want to

618
00:33:59,319 --> 00:34:03,700
take a look at how we might get this

619
00:34:00,909 --> 00:34:06,339
information out of the renderer depth

620
00:34:03,700 --> 00:34:07,808
field process into some bitmaps that we

621
00:34:06,338 --> 00:34:10,869
can use and what we'll do is we'll

622
00:34:07,808 --> 00:34:12,278
concentrate on the first bitmap but what

623
00:34:10,869 --> 00:34:14,169
we'll do is we'll try to remember that

624
00:34:12,278 --> 00:34:17,139
what we can that we want to eventually

625
00:34:14,168 --> 00:34:19,719
do the lighting on all 4 def fields so

626
00:34:17,139 --> 00:34:23,019
that we can have a deep lighting solve

627
00:34:19,719 --> 00:34:24,668
that actually has some dimension some of

628
00:34:23,019 --> 00:34:27,159
that third dimension to the lighting

629
00:34:24,668 --> 00:34:28,778
bounce ceilings and floors and stuff

630
00:34:27,159 --> 00:34:30,639
like that that wouldn't ordinarily

631
00:34:28,778 --> 00:34:35,230
happen if we just did it in pure screen

632
00:34:30,639 --> 00:34:37,798
space with only one so what I want to do

633
00:34:35,230 --> 00:34:42,548
here is take a look at how the def peel

634
00:34:37,798 --> 00:34:44,559
renders are set up so you can see in the

635
00:34:42,548 --> 00:34:47,579
open GL frame by first thing here we've

636
00:34:44,559 --> 00:34:50,319
got a color handle and a depth handle

637
00:34:47,579 --> 00:34:52,960
that we are normally writing to for each

638
00:34:50,318 --> 00:34:54,849
of our def peels right so you can see on

639
00:34:52,960 --> 00:34:57,429
here we've got a depth field buffer at a

640
00:34:54,849 --> 00:34:59,588
deaf people resolve buffer and there's a

641
00:34:57,429 --> 00:35:03,879
frame buffer for each of those and so

642
00:34:59,588 --> 00:35:05,049
what happens is we resolve the frame

643
00:35:03,880 --> 00:35:06,550
buffer

644
00:35:05,050 --> 00:35:09,370
with the color and depth handle we

645
00:35:06,550 --> 00:35:11,950
resolved that from one that's multi

646
00:35:09,369 --> 00:35:16,059
sampled to one that's not so each of

647
00:35:11,949 --> 00:35:18,969
these def peel and death peel results

648
00:35:16,059 --> 00:35:23,110
here each of those get sort of smacked

649
00:35:18,969 --> 00:35:25,089
together right we render one of them

650
00:35:23,110 --> 00:35:27,309
into the DEF peel buffer than we do a

651
00:35:25,090 --> 00:35:29,860
def peel resolve to the DEF peel resolve

652
00:35:27,309 --> 00:35:31,599
buffer which smacks down the multi

653
00:35:29,860 --> 00:35:34,780
sampling at whatever the multi sampling

654
00:35:31,599 --> 00:35:36,369
was set to down to a single sample which

655
00:35:34,780 --> 00:35:39,970
we then use to the rest of the process

656
00:35:36,369 --> 00:35:44,130
so in order to effectively mimic that

657
00:35:39,969 --> 00:35:50,259
right what we need to do is include

658
00:35:44,130 --> 00:35:57,460
omission in this equation somehow now we

659
00:35:50,260 --> 00:35:59,320
already have an RGB you know value in

660
00:35:57,460 --> 00:36:03,550
there which could serve as our surface

661
00:35:59,320 --> 00:36:06,820
color value and we already know the

662
00:36:03,550 --> 00:36:09,180
depth and the depth of the thing because

663
00:36:06,820 --> 00:36:13,390
the DEF peel buffer gives us that right

664
00:36:09,179 --> 00:36:16,839
so we have the D value and we have the

665
00:36:13,389 --> 00:36:20,769
surface RGB value what we don't have is

666
00:36:16,840 --> 00:36:25,269
front side back side emission and we

667
00:36:20,769 --> 00:36:28,570
don't have the normal right now we can

668
00:36:25,269 --> 00:36:31,239
easily get the normal in the shader but

669
00:36:28,570 --> 00:36:32,470
we don't have anywhere to store it so we

670
00:36:31,239 --> 00:36:37,389
need to have somewhere that we're going

671
00:36:32,469 --> 00:36:39,250
to store the shader going forward we

672
00:36:37,389 --> 00:36:43,239
also need somewhere to store the

673
00:36:39,250 --> 00:36:44,230
emission somehow and we again need to

674
00:36:43,239 --> 00:36:46,239
store that at a high resolution

675
00:36:44,230 --> 00:36:49,719
potentially because we may want that

676
00:36:46,239 --> 00:36:52,989
value to be fairly granular now we could

677
00:36:49,719 --> 00:36:55,569
still store it in 8-bit and up sample at

678
00:36:52,989 --> 00:36:57,159
layer to float because we don't need the

679
00:36:55,570 --> 00:36:58,990
initial lighting values to be that

680
00:36:57,159 --> 00:37:00,969
precise we only need our lighting

681
00:36:58,989 --> 00:37:04,539
computations to store that precise as

682
00:37:00,969 --> 00:37:06,819
they iterate so we could use just 8-bit

683
00:37:04,539 --> 00:37:10,210
color for recording the emitters that

684
00:37:06,820 --> 00:37:12,309
wouldn't be too big of a deal the

685
00:37:10,210 --> 00:37:14,740
regardless of what we do we're going to

686
00:37:12,309 --> 00:37:16,000
need more right bandwidth here which is

687
00:37:14,739 --> 00:37:18,889
a little scary but we're going to need

688
00:37:16,000 --> 00:37:20,480
it because inside these depth

689
00:37:18,889 --> 00:37:23,989
the buffers we're going to have to write

690
00:37:20,480 --> 00:37:25,670
in addition to just the information we

691
00:37:23,989 --> 00:37:32,659
were writing we're going to have to

692
00:37:25,670 --> 00:37:34,269
write more stuff that we can pick up by

693
00:37:32,659 --> 00:37:38,690
the pickup with the lighting system

694
00:37:34,268 --> 00:37:44,719
later all right so let's think about how

695
00:37:38,690 --> 00:37:47,088
we want to do that I think what I might

696
00:37:44,719 --> 00:37:50,480
want to do is these OpenGL frame buffer

697
00:37:47,088 --> 00:37:51,710
things here I think again maybe we won't

698
00:37:50,480 --> 00:37:53,420
really be able to use that as the

699
00:37:51,710 --> 00:37:54,920
utility class so much because it seems

700
00:37:53,420 --> 00:37:57,139
like we constantly have to make things

701
00:37:54,920 --> 00:37:58,400
that are more complicated than that so

702
00:37:57,139 --> 00:38:00,108
in the same way that we have a light

703
00:37:58,400 --> 00:38:01,789
buffer here we may need to end up with a

704
00:38:00,108 --> 00:38:09,318
peel buffer here that has all of this

705
00:38:01,789 --> 00:38:11,539
information in it right and that seems

706
00:38:09,318 --> 00:38:13,940
pretty likely so if we were going to do

707
00:38:11,539 --> 00:38:16,519
that what we would end up with much like

708
00:38:13,940 --> 00:38:19,309
like we have the light buffer there we

709
00:38:16,518 --> 00:38:21,169
would have a peel buffer here which is a

710
00:38:19,309 --> 00:38:25,250
similar thing it would end up with

711
00:38:21,170 --> 00:38:28,548
something like this which is the multi

712
00:38:25,250 --> 00:38:31,880
sample frame buffer handle the multiple

713
00:38:28,548 --> 00:38:33,230
Cohan also multi sample test handle then

714
00:38:31,880 --> 00:38:36,048
it would have the frame reprehend of

715
00:38:33,230 --> 00:38:38,809
color handle depth handle right but now

716
00:38:36,048 --> 00:38:42,679
in addition to these things it's going

717
00:38:38,809 --> 00:38:45,160
to have more color handles right and

718
00:38:42,679 --> 00:38:48,679
what we could do is well I suppose is

719
00:38:45,159 --> 00:38:50,808
instead of just one color handle here I

720
00:38:48,679 --> 00:38:54,949
suppose we could do something like this

721
00:38:50,809 --> 00:38:56,778
right so we could say something like

722
00:38:54,949 --> 00:38:58,848
there's going to be more than one color

723
00:38:56,778 --> 00:38:59,358
handle potentially for an OpenGL frame

724
00:38:58,849 --> 00:39:03,289
buffer

725
00:38:59,358 --> 00:39:05,719
so you could say OpenGL color handle

726
00:39:03,289 --> 00:39:14,619
type and you could say that the color

727
00:39:05,719 --> 00:39:19,788
handles in here was a OpenGL color

728
00:39:14,619 --> 00:39:24,680
surface reflects OpenGL color front

729
00:39:19,789 --> 00:39:26,090
emits dribbler back in man good conceal

730
00:39:24,679 --> 00:39:29,219
color

731
00:39:26,090 --> 00:39:29,219
[Applause]

732
00:39:29,298 --> 00:39:45,059
and P so in a circumstance like that we

733
00:39:43,199 --> 00:39:47,068
would have is each frame buffer would

734
00:39:45,059 --> 00:39:49,950
have a couple different targets to it

735
00:39:47,068 --> 00:39:56,068
and we would pretty much just use

736
00:39:49,949 --> 00:39:58,318
exactly the same process that we use for

737
00:39:56,068 --> 00:40:03,239
everything else it's just we're going to

738
00:39:58,318 --> 00:40:08,068
extend the amount scored by a lot more

739
00:40:03,239 --> 00:40:12,268
values so the emissions there are yeah

740
00:40:08,068 --> 00:40:18,389
all I guess the the emissions they're

741
00:40:12,268 --> 00:40:20,879
just kind of all recorded for us now

742
00:40:18,389 --> 00:40:22,949
what we could say and I guess I don't

743
00:40:20,880 --> 00:40:25,259
know that there's any reason not to say

744
00:40:22,949 --> 00:40:29,000
this it seems like we probably should

745
00:40:25,259 --> 00:40:29,000
just say it

746
00:40:37,050 --> 00:40:46,110
one kind of site is I don't know if

747
00:40:40,079 --> 00:40:47,250
front omit or backing it is I don't know

748
00:40:46,110 --> 00:40:49,349
that it's necessary to save that

749
00:40:47,250 --> 00:40:52,590
information well we probably want to

750
00:40:49,349 --> 00:40:54,000
have stuff like that in the actual well

751
00:40:52,590 --> 00:40:56,010
we want to do stuff that deals with

752
00:40:54,000 --> 00:40:57,750
propagation direction in the actual

753
00:40:56,010 --> 00:40:59,760
solve I don't know that we need to

754
00:40:57,750 --> 00:41:02,309
remember that information on the actual

755
00:40:59,760 --> 00:41:04,770
render and the reason that I say that is

756
00:41:02,309 --> 00:41:06,449
because on the render it seems like a

757
00:41:04,769 --> 00:41:08,869
lot of the times things are only going

758
00:41:06,449 --> 00:41:10,919
to emit out of their front face probably

759
00:41:08,869 --> 00:41:14,239
not necessarily out of their back face

760
00:41:10,920 --> 00:41:18,720
however I don't know that that's true

761
00:41:14,239 --> 00:41:20,549
and I guess more specifically what we

762
00:41:18,719 --> 00:41:28,079
could say is we could just make it so

763
00:41:20,550 --> 00:41:29,970
that things just emit period I don't

764
00:41:28,079 --> 00:41:31,860
know if that's a really tough call

765
00:41:29,969 --> 00:41:33,769
being able to specify the lighting in

766
00:41:31,860 --> 00:41:38,400
either direction of an emitter seems

767
00:41:33,769 --> 00:41:40,349
useful because for example if you were

768
00:41:38,400 --> 00:41:42,690
talking about like a light on the face

769
00:41:40,349 --> 00:41:45,089
of one of the cubes you would not want

770
00:41:42,690 --> 00:41:50,970
it to emit out the back which is what it

771
00:41:45,090 --> 00:41:52,950
would do if it had back emission but at

772
00:41:50,969 --> 00:41:55,469
the same time you want situations where

773
00:41:52,949 --> 00:41:56,730
like if a sprite is supposed to be lit

774
00:41:55,469 --> 00:41:59,459
up in all directions it's

775
00:41:56,730 --> 00:42:03,119
omnidirectional you kind of want some

776
00:41:59,460 --> 00:42:05,900
way of satisfying that as well so in a

777
00:42:03,119 --> 00:42:14,400
sense maybe what I really want here is

778
00:42:05,900 --> 00:42:19,260
more of just a emit value that is like

779
00:42:14,400 --> 00:42:25,170
RGB a where a is the spherical nosov it

780
00:42:19,260 --> 00:42:28,370
I mean for lack of a better term where

781
00:42:25,170 --> 00:42:28,369
is my Milton there it is

782
00:42:31,130 --> 00:42:36,920
I really want someone to figure out why

783
00:42:34,789 --> 00:42:39,079
Milton loses connection to the tablet

784
00:42:36,920 --> 00:42:42,289
all the time it doesn't really make any

785
00:42:39,079 --> 00:42:44,630
sense to me like what even is happening

786
00:42:42,289 --> 00:42:48,710
such that that can occur you know

787
00:42:44,630 --> 00:42:52,309
there's got to be some all right why can

788
00:42:48,710 --> 00:42:53,929
I not open there's got to be some reason

789
00:42:52,309 --> 00:42:55,969
for that I was looking at it the source

790
00:42:53,929 --> 00:42:58,940
before the stream started but I didn't

791
00:42:55,969 --> 00:43:00,709
get far enough in to figure out to come

792
00:42:58,940 --> 00:43:02,150
up with a plausible idea of how that can

793
00:43:00,710 --> 00:43:04,010
happen

794
00:43:02,150 --> 00:43:06,349
because I've never had a program where

795
00:43:04,010 --> 00:43:08,630
that happens before like I've never had

796
00:43:06,349 --> 00:43:10,940
another program like at any art package

797
00:43:08,630 --> 00:43:13,340
ever lose connection to the tablet like

798
00:43:10,940 --> 00:43:16,130
that where it thinks that it's Mouse can

799
00:43:13,340 --> 00:43:18,530
put all of a sudden in instead of tablet

800
00:43:16,130 --> 00:43:21,410
input and so there's got to be some

801
00:43:18,530 --> 00:43:22,700
explanation for it but I don't know what

802
00:43:21,409 --> 00:43:28,969
that explanation would be and I'm very

803
00:43:22,699 --> 00:43:37,279
curious anyway so what I was saying here

804
00:43:28,969 --> 00:43:40,129
is emission specification is what I want

805
00:43:37,280 --> 00:43:42,230
to do here is I want to say okay if I

806
00:43:40,130 --> 00:43:44,360
have a direction so I've got whenever I

807
00:43:42,230 --> 00:43:45,650
render anything on the screen I know

808
00:43:44,360 --> 00:43:48,260
what the direction is of a thing I

809
00:43:45,650 --> 00:43:49,789
rendered right so for example if you

810
00:43:48,260 --> 00:43:51,980
take the hero which is like a sprite

811
00:43:49,789 --> 00:43:54,079
card standing up it's normal it's like

812
00:43:51,980 --> 00:43:56,179
going to be pointing out you know sort

813
00:43:54,079 --> 00:44:00,319
of slightly down and slightly toward the

814
00:43:56,179 --> 00:44:03,710
viewer so if I wanted to say that the

815
00:44:00,320 --> 00:44:05,900
hero was emissive there's most ways I

816
00:44:03,710 --> 00:44:09,139
might want to say that right and so what

817
00:44:05,900 --> 00:44:13,130
I was thinking is if we had RGB is like

818
00:44:09,139 --> 00:44:16,670
the color of the emission but a was like

819
00:44:13,130 --> 00:44:20,059
a term that told us the spread of the

820
00:44:16,670 --> 00:44:23,300
emission so you know if a is zero then

821
00:44:20,059 --> 00:44:24,289
it's just a line of light and if a is

822
00:44:23,300 --> 00:44:27,620
one

823
00:44:24,289 --> 00:44:30,980
it's like 360 degrees or something you

824
00:44:27,619 --> 00:44:33,339
know and point five would be like 180 so

825
00:44:30,980 --> 00:44:37,159
it would just it would like you know

826
00:44:33,340 --> 00:44:39,710
kind of control that then we could sort

827
00:44:37,159 --> 00:44:44,029
of have a specification which only used

828
00:44:39,710 --> 00:44:44,539
one bitmap and four values rather than

829
00:44:44,030 --> 00:44:46,669
having a front

830
00:44:44,539 --> 00:44:48,349
vacuum ition which even that doesn't

831
00:44:46,668 --> 00:44:50,989
really capture very much information

832
00:44:48,349 --> 00:44:52,099
because the front in the back you don't

833
00:44:50,989 --> 00:44:55,188
really know if that would suppose to be

834
00:44:52,099 --> 00:44:58,999
an omni emitter or two fairly straight

835
00:44:55,188 --> 00:44:59,808
emitters pointing it out to directions

836
00:44:58,998 --> 00:45:02,268
right and they're going to have

837
00:44:59,809 --> 00:45:03,559
different lighting qualities and it

838
00:45:02,268 --> 00:45:06,078
doesn't tell you very much about the up

839
00:45:03,559 --> 00:45:09,769
and down emission and so on so I feel

840
00:45:06,079 --> 00:45:12,769
like maybe a a conical sort of

841
00:45:09,768 --> 00:45:15,288
description there that widens out to 360

842
00:45:12,768 --> 00:45:21,948
in some way is maybe a little bit more

843
00:45:15,289 --> 00:45:25,009
of a useful specification and at the

844
00:45:21,949 --> 00:45:26,838
moment we'll just use 0 or 1 to

845
00:45:25,009 --> 00:45:28,519
represent whether it should be all in

846
00:45:26,838 --> 00:45:36,679
the front emitter or a front and back

847
00:45:28,518 --> 00:45:38,088
emitter when we transfer it over that

848
00:45:36,679 --> 00:45:40,789
seems to me to be the most reasonable

849
00:45:38,088 --> 00:45:43,278
thing at the moment and we can always

850
00:45:40,789 --> 00:45:44,660
plus with that term as we get further

851
00:45:43,278 --> 00:45:46,278
down the loading path to figure out

852
00:45:44,659 --> 00:45:49,308
exactly how lighting should be working

853
00:45:46,278 --> 00:45:51,528
in our letting transfer we can then go

854
00:45:49,309 --> 00:45:53,839
back and tween tweak that a parameter to

855
00:45:51,528 --> 00:45:56,708
give us the most control we can get out

856
00:45:53,838 --> 00:45:58,518
of one parameter that does make sense

857
00:45:56,708 --> 00:46:00,739
through the rest of the lighting

858
00:45:58,518 --> 00:46:02,598
pipeline so I feel like that's probably

859
00:46:00,739 --> 00:46:13,458
what I want to do so I would say it's

860
00:46:02,599 --> 00:46:15,489
just like emit so it's kind of like you

861
00:46:13,458 --> 00:46:15,489
know

862
00:46:15,539 --> 00:46:25,849
[Applause]

863
00:46:26,099 --> 00:46:30,690
so in this case we still have the death

864
00:46:28,500 --> 00:46:33,239
buffer so we really don't need the depth

865
00:46:30,690 --> 00:46:35,610
in this case so I don't really know what

866
00:46:33,239 --> 00:46:40,559
we want to store here I suppose what we

867
00:46:35,610 --> 00:46:41,280
could do is just store the N x and y and

868
00:46:40,559 --> 00:46:44,489
that's it

869
00:46:41,280 --> 00:46:52,950
right so maybe this is just like 16-bit

870
00:46:44,489 --> 00:46:54,539
n X 16-bit NY so we use 1 32-bit texture

871
00:46:52,949 --> 00:46:57,599
but we store the normals at higher

872
00:46:54,539 --> 00:46:59,070
resolution right we could do that I

873
00:46:57,599 --> 00:47:01,409
don't know that we really care about the

874
00:46:59,070 --> 00:47:05,070
high resolution we could maybe just use

875
00:47:01,409 --> 00:47:07,469
a 16-bit texture so you know just use it

876
00:47:05,070 --> 00:47:11,010
NX NY and just don't worry about it

877
00:47:07,469 --> 00:47:14,250
because again the depth buffer here has

878
00:47:11,010 --> 00:47:19,320
that information in it so we don't

879
00:47:14,250 --> 00:47:21,269
really need to store the depth in in the

880
00:47:19,320 --> 00:47:22,950
render passes it's already in the depth

881
00:47:21,269 --> 00:47:24,989
buffer we don't need a story

882
00:47:22,949 --> 00:47:31,799
it's just redundant to put it there

883
00:47:24,989 --> 00:47:36,000
again so this is emit RGB and then like

884
00:47:31,800 --> 00:47:41,550
spread at alpha and the surface effect

885
00:47:36,000 --> 00:47:46,619
is just like select RGB so this would

886
00:47:41,550 --> 00:47:49,640
again this would be giving us you know

887
00:47:46,619 --> 00:47:53,099
quite a bit more write bandwidth

888
00:47:49,639 --> 00:47:54,629
requirements which isn't great and when

889
00:47:53,099 --> 00:47:58,170
I say quite a bit more I mean like a lot

890
00:47:54,630 --> 00:48:02,220
more right because essentially we're

891
00:47:58,170 --> 00:48:04,349
multiplying by 2 plus the amount of

892
00:48:02,219 --> 00:48:07,559
write bandwidth we had to do on the

893
00:48:04,349 --> 00:48:09,900
multi sample pass which is the worst

894
00:48:07,559 --> 00:48:14,309
possible pass because that's the one

895
00:48:09,900 --> 00:48:21,269
that could write the most stuff so it's

896
00:48:14,309 --> 00:48:23,730
not good right but we need to get that

897
00:48:21,269 --> 00:48:25,199
information in there somehow and like I

898
00:48:23,730 --> 00:48:29,030
said we're basically multiplying it by 2

899
00:48:25,199 --> 00:48:35,119
plus because we have the surface reflect

900
00:48:29,030 --> 00:48:38,530
RGB and the you know coverage L a rather

901
00:48:35,119 --> 00:48:39,699
that's what we are currently writing so

902
00:48:38,530 --> 00:48:41,350
this doesn't increase it at all because

903
00:48:39,699 --> 00:48:44,439
that's just what we already were writing

904
00:48:41,349 --> 00:48:47,829
but then we have another bitmap of the

905
00:48:44,440 --> 00:48:50,019
same size plus a little extra plus 16

906
00:48:47,829 --> 00:48:54,039
bit extra so it's like two and a half

907
00:48:50,019 --> 00:48:57,849
times the right bandwidth that we're

908
00:48:54,039 --> 00:49:00,519
going to suck down on those def pas am I

909
00:48:57,849 --> 00:49:02,139
not concerned about it no because I mean

910
00:49:00,519 --> 00:49:03,789
at the end of the day you could always

911
00:49:02,139 --> 00:49:05,019
turn lighting off entirely and still

912
00:49:03,789 --> 00:49:06,400
play the game if you were trying to get

913
00:49:05,019 --> 00:49:09,429
it to run on like a Raspberry Pi or

914
00:49:06,400 --> 00:49:11,380
whatever and anyone is running this on a

915
00:49:09,429 --> 00:49:13,239
PC probably has a graphics card that can

916
00:49:11,380 --> 00:49:16,000
eat this whole thing for breakfast 12

917
00:49:13,239 --> 00:49:17,739
times over you know we're not doing

918
00:49:16,000 --> 00:49:20,739
anything even close to as complicated as

919
00:49:17,739 --> 00:49:25,869
you know battlefield 1 or something

920
00:49:20,739 --> 00:49:27,489
probably is so six of one half dozen or

921
00:49:25,869 --> 00:49:29,559
the other you can also drop the

922
00:49:27,489 --> 00:49:31,929
resolution down play at a lower

923
00:49:29,559 --> 00:49:33,969
resolution play at less than 60 frames a

924
00:49:31,929 --> 00:49:35,799
second 30 frames a second half

925
00:49:33,969 --> 00:49:37,389
resolution blah blah blah where the

926
00:49:35,800 --> 00:49:38,740
resolution is going to dramatically

927
00:49:37,389 --> 00:49:40,420
improve that speed because again it's

928
00:49:38,739 --> 00:49:44,289
just right speed we're not doing a whole

929
00:49:40,420 --> 00:49:48,119
lot of ops on these at the moment I so I

930
00:49:44,289 --> 00:49:52,029
say what's back we'll try it right eye

931
00:49:48,119 --> 00:49:53,949
and and we'll see what we get

932
00:49:52,030 --> 00:49:58,060
now the question curious do we need

933
00:49:53,949 --> 00:50:00,279
anything else we've got 2 of these 3 2 v

934
00:49:58,059 --> 00:50:02,619
maps and then we've got this kind of

935
00:50:00,280 --> 00:50:04,450
weird bitmap here again I don't see any

936
00:50:02,619 --> 00:50:07,389
way to really do anything smarter than

937
00:50:04,449 --> 00:50:10,659
that and in terms of storing any other

938
00:50:07,389 --> 00:50:13,869
data you know into this MP bitmap here

939
00:50:10,659 --> 00:50:15,699
we could put more information like

940
00:50:13,869 --> 00:50:19,420
whether there's specular like how

941
00:50:15,699 --> 00:50:21,939
reflective the surfaces or something

942
00:50:19,420 --> 00:50:25,539
like that like a specular power kind of

943
00:50:21,940 --> 00:50:27,730
a thing and so we could say that let's

944
00:50:25,539 --> 00:50:30,159
just say that these are all 32-bit ones

945
00:50:27,730 --> 00:50:34,659
and just say it's 3x the bandwidth and

946
00:50:30,159 --> 00:50:37,569
we have like LP 0 and LP 1 here and

947
00:50:34,659 --> 00:50:39,489
we'll just say to do KC 2 parameters

948
00:50:37,570 --> 00:50:43,240
here that can control the lighting right

949
00:50:39,489 --> 00:50:44,919
so eventually we'll let you specify 2

950
00:50:43,239 --> 00:50:47,229
parameters that up the two parameters of

951
00:50:44,920 --> 00:50:50,010
control the lighting will snuggle them

952
00:50:47,230 --> 00:50:55,949
in with the NX and why in this

953
00:50:50,010 --> 00:50:57,480
NP will call MPL texture and then

954
00:50:55,949 --> 00:50:59,309
hopefully in the future we'll have you

955
00:50:57,480 --> 00:51:00,840
know some degree of of something we can

956
00:50:59,309 --> 00:51:06,869
do with those in the lighting to change

957
00:51:00,840 --> 00:51:09,260
the surface look based on something that

958
00:51:06,869 --> 00:51:15,449
you specify when you create the sprite

959
00:51:09,260 --> 00:51:17,580
information alright so let's go ahead

960
00:51:15,449 --> 00:51:22,619
and plow forward with that

961
00:51:17,579 --> 00:51:24,420
ridiculousness here so when we pass the

962
00:51:22,619 --> 00:51:27,389
flags and stuff here what I want to do

963
00:51:24,420 --> 00:51:31,050
is on create frame buffer I want to

964
00:51:27,389 --> 00:51:35,279
specify how many color buffers it has so

965
00:51:31,050 --> 00:51:38,160
rather than just a has color thing here

966
00:51:35,280 --> 00:51:42,090
I think what I want to do instead is say

967
00:51:38,159 --> 00:51:44,519
that the color flag either we can make a

968
00:51:42,090 --> 00:51:45,960
color flag for each of these but I don't

969
00:51:44,519 --> 00:51:47,610
know that that's super useful I think

970
00:51:45,960 --> 00:51:50,579
what we could do is just pass how many

971
00:51:47,610 --> 00:51:55,970
of them you want right so we could do is

972
00:51:50,579 --> 00:51:58,949
say that we've just got this like so and

973
00:51:55,969 --> 00:52:01,289
then remember doing the color ones what

974
00:51:58,949 --> 00:52:06,210
we'll do is like we'll just say color

975
00:52:01,289 --> 00:52:08,009
buffer count and the color buffer count

976
00:52:06,210 --> 00:52:12,510
will just serve as like a four I loop

977
00:52:08,010 --> 00:52:15,540
essentially where we allocate that many

978
00:52:12,510 --> 00:52:17,490
of these so we'll say let color index

979
00:52:15,539 --> 00:52:22,469
equals zero colored X is less than color

980
00:52:17,489 --> 00:52:24,089
buffer count plus plus color index for

981
00:52:22,469 --> 00:52:27,569
good measure let's assert that the color

982
00:52:24,090 --> 00:52:30,300
buffer count is less than or equal to

983
00:52:27,570 --> 00:52:31,860
the numbers that we expect to have or I

984
00:52:30,300 --> 00:52:33,330
guess we can even just say whatever the

985
00:52:31,860 --> 00:52:37,260
array county is of that place that we're

986
00:52:33,329 --> 00:52:43,019
going to store them which in this case

987
00:52:37,260 --> 00:52:45,600
is the color handle array and so here

988
00:52:43,019 --> 00:52:48,030
we've got you know color index ranging

989
00:52:45,599 --> 00:52:51,239
from here to here so when we put this in

990
00:52:48,030 --> 00:52:55,250
to a storage location we'll just say

991
00:52:51,239 --> 00:52:57,479
okay and the same thing will happen it's

992
00:52:55,250 --> 00:52:59,760
the same thing will happen here we'll

993
00:52:57,480 --> 00:53:02,460
add the color index to the e number

994
00:52:59,760 --> 00:53:05,490
passing and we'll grab the

995
00:53:02,460 --> 00:53:07,740
wrapper color handle out so that would

996
00:53:05,489 --> 00:53:13,500
let us create you know as many of those

997
00:53:07,739 --> 00:53:16,739
as we wanted to so I deleted that I

998
00:53:13,500 --> 00:53:18,239
actually delete the wrong one I guess

999
00:53:16,739 --> 00:53:20,338
not

1000
00:53:18,239 --> 00:53:37,519
and they again so this one's going to

1001
00:53:20,338 --> 00:53:37,519
have to loop through all of these so

1002
00:53:37,820 --> 00:53:44,550
we're going to look at each of the color

1003
00:53:40,559 --> 00:53:46,980
handles on clean up and we're just going

1004
00:53:44,550 --> 00:53:50,339
to delete any that we're allocated in

1005
00:53:46,980 --> 00:53:54,659
that frame buffer the frame of our color

1006
00:53:50,338 --> 00:53:58,108
resolve flags is no longer a thing so

1007
00:53:54,659 --> 00:54:00,539
we're always going to just assume that

1008
00:53:58,108 --> 00:54:04,500
that gets back that's passed down for

1009
00:54:00,539 --> 00:54:06,088
anyone who allocates a texture a frame

1010
00:54:04,500 --> 00:54:09,630
buffer they're going to have to pass how

1011
00:54:06,088 --> 00:54:11,969
many of those they expect to have so

1012
00:54:09,630 --> 00:54:15,630
here where we do create frame buffer for

1013
00:54:11,969 --> 00:54:17,909
the OpenGL resolve buffer we know that

1014
00:54:15,630 --> 00:54:20,460
that once we do our final result we're

1015
00:54:17,909 --> 00:54:24,539
only going to have one color buffer so

1016
00:54:20,460 --> 00:54:26,849
we can just forget about creating any

1017
00:54:24,539 --> 00:54:28,800
any more of them there

1018
00:54:26,849 --> 00:54:31,230
similarly here and create frame buffer

1019
00:54:28,800 --> 00:54:33,240
for the death field this is the place

1020
00:54:31,230 --> 00:54:34,858
where if we wanted to just mimic exactly

1021
00:54:33,239 --> 00:54:37,529
the operations that we're currently

1022
00:54:34,858 --> 00:54:40,289
doing we'd say one we know we want to go

1023
00:54:37,530 --> 00:54:44,040
further than that now and we want to

1024
00:54:40,289 --> 00:54:46,849
pass the full color count now we will

1025
00:54:44,039 --> 00:54:53,150
use those buffers we'll just create them

1026
00:54:46,849 --> 00:54:53,150
and again since we know we also have to

1027
00:54:53,690 --> 00:54:58,170
downsample them we'll create both the

1028
00:54:55,949 --> 00:55:01,379
downsampled version and the fully multi

1029
00:54:58,170 --> 00:55:03,450
sampled version so now when we're using

1030
00:55:01,380 --> 00:55:08,220
these color handles anywhere we're going

1031
00:55:03,449 --> 00:55:11,429
to have to do binds on them and in order

1032
00:55:08,219 --> 00:55:14,759
to do that we're going to have to be a

1033
00:55:11,429 --> 00:55:16,199
little bit more careful about where

1034
00:55:14,760 --> 00:55:18,270
we're writing things and

1035
00:55:16,199 --> 00:55:20,129
how we're going to do that so for the

1036
00:55:18,269 --> 00:55:21,659
moment I'm not going to deal with that

1037
00:55:20,130 --> 00:55:23,700
at all I'm just going to get things

1038
00:55:21,659 --> 00:55:26,009
working the exact way they were by using

1039
00:55:23,699 --> 00:55:29,309
color handle zero which should always

1040
00:55:26,010 --> 00:55:30,690
work in theory and so now I just want to

1041
00:55:29,309 --> 00:55:32,279
make sure that I can actually run this

1042
00:55:30,690 --> 00:55:35,300
because we may have introduced a bug

1043
00:55:32,280 --> 00:55:37,940
there but it looks like we're all good

1044
00:55:35,300 --> 00:55:42,450
so we're still running correctly and

1045
00:55:37,940 --> 00:55:45,210
everyone's happy and smiling and doing

1046
00:55:42,449 --> 00:55:49,739
all the things that that were just I've

1047
00:55:45,210 --> 00:55:52,230
got great fine whatever so now we've got

1048
00:55:49,739 --> 00:55:53,669
those extra color handles here we have

1049
00:55:52,230 --> 00:55:57,389
to start thinking about what we're going

1050
00:55:53,670 --> 00:56:02,519
to do with them and the tricky part here

1051
00:55:57,389 --> 00:56:05,009
is just that you can kind of see here in

1052
00:56:02,519 --> 00:56:11,070
the light buffer where we do this this

1053
00:56:05,010 --> 00:56:14,099
dumb sequence color attachment stuff so

1054
00:56:11,070 --> 00:56:18,000
the same thing that we did here where we

1055
00:56:14,099 --> 00:56:22,099
have draw buffers we're going to have to

1056
00:56:18,000 --> 00:56:24,630
do for our other frame buffer operations

1057
00:56:22,099 --> 00:56:27,720
so if we take a look at the frame

1058
00:56:24,630 --> 00:56:30,019
buffers that we made and create frame

1059
00:56:27,719 --> 00:56:32,578
buffer here where is that here it is

1060
00:56:30,019 --> 00:56:34,829
where we specify the color buffer camp

1061
00:56:32,579 --> 00:56:37,910
here what we're going to have to do is

1062
00:56:34,829 --> 00:56:41,430
we're going to have to call the same

1063
00:56:37,909 --> 00:56:43,828
stupid thing here we're going to have to

1064
00:56:41,429 --> 00:56:47,568
call that on these to make sure that all

1065
00:56:43,829 --> 00:56:53,760
of the color indices that we've set up

1066
00:56:47,568 --> 00:56:57,119
and I guess we should also make sure

1067
00:56:53,760 --> 00:56:59,730
that all of these that we set up we're

1068
00:56:57,119 --> 00:57:04,460
going to have to make sure that they all

1069
00:56:59,730 --> 00:57:08,039
are that all of the sequences that we've

1070
00:57:04,460 --> 00:57:10,559
set up of color buffers have this dumb

1071
00:57:08,039 --> 00:57:12,179
sequence bound so that when we actually

1072
00:57:10,559 --> 00:57:15,599
write to them it knows what we were

1073
00:57:12,179 --> 00:57:18,598
trying to write to so at the end when we

1074
00:57:15,599 --> 00:57:20,789
do this the frame buffer we need to make

1075
00:57:18,599 --> 00:57:22,890
sure we call GL draw buffers with

1076
00:57:20,789 --> 00:57:25,920
however many color buffers there were

1077
00:57:22,889 --> 00:57:27,868
and the dumb sequence which just has

1078
00:57:25,920 --> 00:57:28,740
these things like sort of listed out in

1079
00:57:27,869 --> 00:57:30,329
them

1080
00:57:28,739 --> 00:57:35,129
and I don't know how many of these we

1081
00:57:30,329 --> 00:57:37,590
put in there but you know since to avoid

1082
00:57:35,130 --> 00:57:39,269
having this more than once maybe what I

1083
00:57:37,590 --> 00:57:49,620
should do is just make one of these at

1084
00:57:39,269 --> 00:57:52,730
the top right which is like oops so it's

1085
00:57:49,619 --> 00:58:02,759
a global variable that's just all color

1086
00:57:52,730 --> 00:58:22,260
attachments and in here we would

1087
00:58:02,760 --> 00:58:23,970
literally just put everything now we

1088
00:58:22,260 --> 00:58:27,780
probably will never use this but now we

1089
00:58:23,969 --> 00:58:37,169
know we just have an array of all of

1090
00:58:27,780 --> 00:58:40,940
these and we can just use that anytime

1091
00:58:37,170 --> 00:58:40,940
we want to do one of these vines

1092
00:58:46,489 --> 00:58:49,879
[Applause]

1093
00:58:52,579 --> 00:59:07,650
okay so let me delete all that and again

1094
00:59:04,889 --> 00:59:10,920
we should be good to go so now what you

1095
00:59:07,650 --> 00:59:13,829
can see here is that even though we set

1096
00:59:10,920 --> 00:59:15,480
up to draw the multiple buffers we can

1097
00:59:13,829 --> 00:59:19,559
still see the game rendering just fine

1098
00:59:15,480 --> 00:59:22,110
because you know even though we said we

1099
00:59:19,559 --> 00:59:24,360
have multiple fish to draw to it'll just

1100
00:59:22,110 --> 00:59:26,519
draw nothing I believe - it'll just draw

1101
00:59:24,360 --> 00:59:29,340
garbage - those buffers or zero - those

1102
00:59:26,519 --> 00:59:30,630
buffers that we're not throwing - and

1103
00:59:29,340 --> 00:59:32,370
since we're never displaying those

1104
00:59:30,630 --> 00:59:35,160
buffers are using those buffers for any

1105
00:59:32,369 --> 00:59:38,940
purpose whatsoever we really don't have

1106
00:59:35,159 --> 00:59:40,829
to worry about them at all so that makes

1107
00:59:38,940 --> 00:59:43,860
it now so that we can keep the whole

1108
00:59:40,829 --> 00:59:46,529
thing running and slowly get to a point

1109
00:59:43,860 --> 00:59:50,010
where we're propagating the information

1110
00:59:46,530 --> 00:59:58,050
from these new buffers that we have out

1111
00:59:50,010 --> 01:00:00,060
into the out into the the legs system so

1112
00:59:58,050 --> 01:00:02,850
in order to do that what we have to do

1113
01:00:00,059 --> 01:00:08,369
is when we're drawing we have to have a

1114
01:00:02,849 --> 01:00:10,949
way of writing to the actual color

1115
01:00:08,369 --> 01:00:14,099
buffers right so what you can see here

1116
01:00:10,949 --> 01:00:17,549
is we've got this sort of the Z bias

1117
01:00:14,099 --> 01:00:20,610
program this devious program is the the

1118
01:00:17,550 --> 01:00:23,280
version that we're using for both the

1119
01:00:20,610 --> 01:00:25,380
first step feel and all subsequent def

1120
01:00:23,280 --> 01:00:28,230
peels but it gets compiled in two

1121
01:00:25,380 --> 01:00:32,010
different ways like one way it does this

1122
01:00:28,230 --> 01:00:38,219
textile fetch and clip and another one

1123
01:00:32,010 --> 01:00:41,940
it wouldn't do that so what we need to

1124
01:00:38,219 --> 01:00:43,619
process here after we do this stuff all

1125
01:00:41,940 --> 01:00:47,280
of this lighting information can go away

1126
01:00:43,619 --> 01:00:49,409
it can be sort of put into a separate

1127
01:00:47,280 --> 01:00:51,450
process and in fact I think I am going

1128
01:00:49,409 --> 01:00:56,509
to do that now in preparation for moving

1129
01:00:51,449 --> 01:00:58,559
things along so what I'd like to do is

1130
01:00:56,510 --> 01:01:00,060
well actually know what I could do I

1131
01:00:58,559 --> 01:01:01,119
could have it write the light

1132
01:01:00,059 --> 01:01:05,320
information

1133
01:01:01,119 --> 01:01:08,109
in to the buffer right here right it's

1134
01:01:05,320 --> 01:01:10,390
one thing I could do so let me pull out

1135
01:01:08,110 --> 01:01:11,829
this information for the lighting the

1136
01:01:10,389 --> 01:01:15,699
way that we were doing it so this whole

1137
01:01:11,829 --> 01:01:17,710
thing is lighting right so let's pull

1138
01:01:15,699 --> 01:01:19,929
out all of that lighting information and

1139
01:01:17,710 --> 01:01:23,650
I'm just going to put it down here with

1140
01:01:19,929 --> 01:01:26,980
our lighting code our multi light down

1141
01:01:23,650 --> 01:01:40,690
code I'm just going to put that here in

1142
01:01:26,980 --> 01:01:45,250
an fzero block so we can put it back

1143
01:01:40,690 --> 01:01:51,099
oops so we can put it back in later when

1144
01:01:45,250 --> 01:01:54,670
when and if we want it right so now what

1145
01:01:51,099 --> 01:01:56,110
we've got is when we're writing we don't

1146
01:01:54,670 --> 01:01:58,780
have any lighting that's going to be

1147
01:01:56,110 --> 01:02:09,059
written into this buffer in the Deaf

1148
01:01:58,780 --> 01:02:11,830
field right so the Deaf feel that it is

1149
01:02:09,059 --> 01:02:14,500
so the Deaf feel now doesn't have to

1150
01:02:11,829 --> 01:02:15,719
have any of this light stuff happening

1151
01:02:14,500 --> 01:02:21,070
in it

1152
01:02:15,719 --> 01:02:23,379
let's frag thee okay so that's just set

1153
01:02:21,070 --> 01:02:26,289
up there this this could be removed now

1154
01:02:23,380 --> 01:02:30,250
because frag Z is not used so if this

1155
01:02:26,289 --> 01:02:34,239
could just be that we were playing with

1156
01:02:30,250 --> 01:02:36,010
that value before okay so now we don't

1157
01:02:34,239 --> 01:02:39,009
have any lighting happening or in theory

1158
01:02:36,010 --> 01:02:42,360
we don't and write total light just

1159
01:02:39,010 --> 01:02:44,380
needs to get pulled out of that multiply

1160
01:02:42,360 --> 01:02:46,329
so instead of multiplying this by

1161
01:02:44,380 --> 01:02:53,800
anything we're just going to write the

1162
01:02:46,329 --> 01:02:55,779
blank color in like so and now we have

1163
01:02:53,800 --> 01:02:58,710
an unlit version of the game that's

1164
01:02:55,780 --> 01:03:00,970
writing to the surface reflectance

1165
01:02:58,710 --> 01:03:03,820
information which is exactly what I want

1166
01:03:00,969 --> 01:03:07,809
right and our goal now is to have

1167
01:03:03,820 --> 01:03:10,289
something which will write you know not

1168
01:03:07,809 --> 01:03:12,299
you know addition

1169
01:03:10,289 --> 01:03:15,539
in addition to that writing the lighting

1170
01:03:12,300 --> 01:03:17,010
into buffers as well and so we want to

1171
01:03:15,539 --> 01:03:21,029
do is do the same thing we do with FRA

1172
01:03:17,010 --> 01:03:22,980
cords here some some folks had said that

1173
01:03:21,030 --> 01:03:25,320
we have some frogs there are problems on

1174
01:03:22,980 --> 01:03:28,679
more modern cards with frag cord because

1175
01:03:25,320 --> 01:03:30,780
it's deprecated so one thing I might

1176
01:03:28,679 --> 01:03:33,719
want to do right now while we're here is

1177
01:03:30,780 --> 01:03:38,760
if we take a look at the github issues I

1178
01:03:33,719 --> 01:03:42,929
believe someone wrote in about this yeah

1179
01:03:38,760 --> 01:03:46,890
so so since we switched up our faders

1180
01:03:42,929 --> 01:03:48,750
are already on one five oh we don't want

1181
01:03:46,889 --> 01:03:55,129
to be using Jill frag data apparently

1182
01:03:48,750 --> 01:03:58,739
because of the deprecation problem so

1183
01:03:55,130 --> 01:04:01,470
martins who i tend to trust on all

1184
01:03:58,739 --> 01:04:04,649
things meticulous because he often

1185
01:04:01,469 --> 01:04:07,199
writes in with very specific important

1186
01:04:04,650 --> 01:04:11,780
changes for us I feel like he may have

1187
01:04:07,199 --> 01:04:15,710
the right idea here which is to just say

1188
01:04:11,780 --> 01:04:19,800
since we've said we're going to be using

1189
01:04:15,710 --> 01:04:22,260
shader version 1/5 though we could just

1190
01:04:19,800 --> 01:04:24,630
switch to using LAN sex which are much

1191
01:04:22,260 --> 01:04:26,640
better anyway because layout specs are

1192
01:04:24,630 --> 01:04:29,010
things that let you say what the bind

1193
01:04:26,639 --> 01:04:30,960
location is for each variable so that

1194
01:04:29,010 --> 01:04:37,140
you don't have to bother querying it at

1195
01:04:30,960 --> 01:04:40,740
all right so I think that's a pretty

1196
01:04:37,139 --> 01:04:44,909
reasonable idea and if we want to do

1197
01:04:40,739 --> 01:04:47,849
that I believe all we have to do is use

1198
01:04:44,909 --> 01:04:50,940
the location mapping thing for 0

1199
01:04:47,849 --> 01:04:59,250
whatever I think all we have to do here

1200
01:04:50,940 --> 01:05:01,769
is specify I think all we have to do

1201
01:04:59,250 --> 01:05:04,619
here is specify our own name and write

1202
01:05:01,769 --> 01:05:08,849
to it as if it was GL frag cord a GL

1203
01:05:04,619 --> 01:05:11,929
frag color and I think it will work but

1204
01:05:08,849 --> 01:05:14,279
again I'm not entirely certain however

1205
01:05:11,929 --> 01:05:18,149
we can certainly just try it and see

1206
01:05:14,280 --> 01:05:19,710
what happens and go from there and I'm

1207
01:05:18,150 --> 01:05:22,050
sure the folks who have the graphics

1208
01:05:19,710 --> 01:05:24,449
cards that these that will complain

1209
01:05:22,050 --> 01:05:27,559
about these sort of things will tell us

1210
01:05:24,449 --> 01:05:31,108
one way or the other which one happened

1211
01:05:27,559 --> 01:05:32,789
so let's take a look at the frag color

1212
01:05:31,108 --> 01:05:39,808
situation as it stands

1213
01:05:32,789 --> 01:05:44,700
that's alright frag data so here's the

1214
01:05:39,809 --> 01:05:48,109
frag data stuff I'll go ahead and switch

1215
01:05:44,699 --> 01:05:48,108
the lighting back on for a moment

1216
01:05:58,489 --> 01:06:11,228
so here is us writing - whoa why was

1217
01:06:03,018 --> 01:06:11,228
that so slow Wow I know I know so slow

1218
01:06:13,900 --> 01:06:18,380
so what we can do here is we can verify

1219
01:06:16,670 --> 01:06:21,139
that we're still writing to all of these

1220
01:06:18,380 --> 01:06:24,619
right and now I'm going to go in and

1221
01:06:21,139 --> 01:06:26,118
make that change and verify that the

1222
01:06:24,619 --> 01:06:28,460
graphics card is still writing to each

1223
01:06:26,119 --> 01:06:31,460
of them so if we want to get rid of frag

1224
01:06:28,460 --> 01:06:33,409
data here what we are saying we have to

1225
01:06:31,460 --> 01:06:38,389
do is in the place where we've got frag

1226
01:06:33,409 --> 01:06:40,578
data we need to sign our own value and

1227
01:06:38,389 --> 01:06:43,239
you can see here is a layout location

1228
01:06:40,579 --> 01:06:45,019
equal zero out v4 my output bar

1229
01:06:43,239 --> 01:06:47,179
essentially what this is doing is

1230
01:06:45,018 --> 01:06:50,118
declaring our own version of frag data

1231
01:06:47,179 --> 01:06:53,598
and the fact that it's an out value with

1232
01:06:50,119 --> 01:06:56,690
location equals zero I guess is how it's

1233
01:06:53,599 --> 01:06:59,989
clear to the graphics card what we are

1234
01:06:56,690 --> 01:07:02,690
trying to do so we can just say that

1235
01:06:59,989 --> 01:07:05,329
this is frag color four and then

1236
01:07:02,690 --> 01:07:08,179
eventually when we write this out we

1237
01:07:05,329 --> 01:07:13,099
just don't use frag data we use frag

1238
01:07:08,179 --> 01:07:15,978
color right in our case we don't have

1239
01:07:13,099 --> 01:07:17,930
four we only have two in this one we do

1240
01:07:15,978 --> 01:07:21,669
have four in the other one let's try it

1241
01:07:17,929 --> 01:07:21,669
one at a time see if that works

1242
01:07:22,748 --> 01:07:25,988
looks fine

1243
01:07:29,179 --> 01:07:35,649
so let's try same thing

1244
01:07:42,489 --> 01:07:53,098
[Applause]

1245
01:08:00,219 --> 01:08:05,419
I'm getting some weird like the frame

1246
01:08:02,539 --> 01:08:08,480
rate slows way down randomly which I

1247
01:08:05,420 --> 01:08:11,659
don't really know why and there it looks

1248
01:08:08,480 --> 01:08:22,100
like we're doing okay with our right

1249
01:08:11,659 --> 01:08:26,930
still so that looks like it's all good

1250
01:08:22,100 --> 01:08:29,690
all right so everything looks pretty

1251
01:08:26,930 --> 01:08:32,539
reasonable there to me

1252
01:08:29,689 --> 01:08:34,519
and the reason that I want to do that is

1253
01:08:32,539 --> 01:08:38,359
because we're about to do that same

1254
01:08:34,520 --> 01:08:39,739
thing in all the rest of our shaders

1255
01:08:38,359 --> 01:08:41,420
that have to write because they're gonna

1256
01:08:39,738 --> 01:08:43,009
have to write to multiple outputs so I

1257
01:08:41,420 --> 01:08:45,500
don't want to make like even harder for

1258
01:08:43,009 --> 01:09:05,600
folks who are on those other ones on

1259
01:08:45,500 --> 01:09:07,430
those other cards so we'll go ahead and

1260
01:09:05,600 --> 01:09:11,449
close that issue out and I'm sure

1261
01:09:07,430 --> 01:09:16,460
Martins will tell us or the original

1262
01:09:11,448 --> 01:09:19,278
commenter slow or cuchara I don't know

1263
01:09:16,460 --> 01:09:20,600
which I never know how to address people

1264
01:09:19,279 --> 01:09:24,190
properly because a lot of people have

1265
01:09:20,600 --> 01:09:28,219
different um a lot of people have

1266
01:09:24,189 --> 01:09:29,479
different names than handles and I never

1267
01:09:28,219 --> 01:09:31,548
know whether they like to go by their

1268
01:09:29,479 --> 01:09:33,439
handle or their name or whatever I

1269
01:09:31,548 --> 01:09:36,528
assume since its regards flow I will say

1270
01:09:33,439 --> 01:09:39,829
flow so either Martin's or flow will

1271
01:09:36,529 --> 01:09:42,259
tell us if that in fact fixed their

1272
01:09:39,829 --> 01:09:44,750
problem on the more modern cards that

1273
01:09:42,259 --> 01:09:46,130
probably are supposed to complain this

1274
01:09:44,750 --> 01:09:51,909
this car probably should be complaining

1275
01:09:46,130 --> 01:09:53,088
about frag data wasn't so you know

1276
01:09:51,909 --> 01:09:55,760
whatevs

1277
01:09:53,088 --> 01:09:58,219
but anyway so if that's the frag data

1278
01:09:55,760 --> 01:10:01,430
information there let's see where else

1279
01:09:58,219 --> 01:10:04,399
we've got it it looks like just in the

1280
01:10:01,430 --> 01:10:07,610
fake speed lighting so I'll again just

1281
01:10:04,399 --> 01:10:07,939
kind of propagate this forward a bit

1282
01:10:07,609 --> 01:10:10,809
more

1283
01:10:07,939 --> 01:10:21,529
into all of our shaders so

1284
01:10:10,810 --> 01:10:29,090
in this one here we'll just call that

1285
01:10:21,529 --> 01:10:32,779
fried color and then we are good to go

1286
01:10:29,090 --> 01:10:36,260
so now I will go ahead and start making

1287
01:10:32,779 --> 01:10:40,329
some of these other pieces of code work

1288
01:10:36,260 --> 01:10:43,520
with the additional buffers that we have

1289
01:10:40,329 --> 01:10:45,260
so what you can see here vertex code

1290
01:10:43,520 --> 01:10:48,080
fragment code

1291
01:10:45,260 --> 01:10:50,720
this one has a frag color that it's

1292
01:10:48,079 --> 01:10:53,869
going to be writing out here called

1293
01:10:50,720 --> 01:10:56,300
result color I'm going to change that

1294
01:10:53,869 --> 01:11:16,369
from result color to frag color for

1295
01:10:56,300 --> 01:11:18,079
consistency well you know what maybe

1296
01:11:16,369 --> 01:11:19,939
that's a bad idea because it looks like

1297
01:11:18,079 --> 01:11:25,359
we used frag color for the incoming

1298
01:11:19,939 --> 01:11:25,359
fragment color there hmm

1299
01:11:26,260 --> 01:11:31,550
let me see I would like to have a naming

1300
01:11:29,750 --> 01:11:35,680
convention that makes some sense here

1301
01:11:31,550 --> 01:11:35,680
that isn't weird here I'm saying

1302
01:11:40,210 --> 01:11:48,569
so I'm going to change this here from

1303
01:11:43,989 --> 01:12:06,609
frag color to like in color or something

1304
01:11:48,569 --> 01:12:21,399
and in UV and then I'm going to change

1305
01:12:06,609 --> 01:12:24,939
his vote color to frag color and it's

1306
01:12:21,399 --> 01:12:25,449
not perfect but that's just the way it

1307
01:12:24,939 --> 01:12:28,648
goes

1308
01:12:25,449 --> 01:12:28,648
[Applause]

1309
01:12:36,389 --> 01:12:42,958
you know what this is the worst you know

1310
01:12:41,010 --> 01:12:47,789
I hate the way these things work I have

1311
01:12:42,958 --> 01:12:50,219
to tell you it's so frustrating so

1312
01:12:47,788 --> 01:12:52,438
that's not good either because I have to

1313
01:12:50,219 --> 01:12:54,208
name it the same thing in the vertex

1314
01:12:52,439 --> 01:12:56,130
shader as its named in the fragment

1315
01:12:54,208 --> 01:13:00,269
shader because that's the way they get

1316
01:12:56,130 --> 01:13:01,708
bound I can't call it what it is in each

1317
01:13:00,269 --> 01:13:03,780
of them which is the input and the

1318
01:13:01,708 --> 01:13:09,630
output to that shader because you don't

1319
01:13:03,779 --> 01:13:11,609
have the option of doing that right so

1320
01:13:09,630 --> 01:13:17,609
maybe a result color is the best way to

1321
01:13:11,609 --> 01:13:19,648
go and I should just change and I should

1322
01:13:17,609 --> 01:13:29,819
change the places where I was using frag

1323
01:13:19,649 --> 01:13:34,979
color to actually be result color ugh so

1324
01:13:29,819 --> 01:13:39,049
bad because I mean so if you think about

1325
01:13:34,979 --> 01:13:43,199
this right this is a separate side so

1326
01:13:39,050 --> 01:13:45,090
it's so clear how these are not properly

1327
01:13:43,198 --> 01:13:48,238
designed for what they do in terms of

1328
01:13:45,090 --> 01:13:50,819
Naumann klaich ER first of all how you

1329
01:13:48,238 --> 01:13:52,678
have a void main void being the thing

1330
01:13:50,819 --> 01:13:55,429
that's supposed to do this operation

1331
01:13:52,679 --> 01:13:58,019
it's like it should be defined as

1332
01:13:55,429 --> 01:13:59,788
accepting the parameters that it accepts

1333
01:13:58,019 --> 01:14:02,219
and outputting the things that outputs

1334
01:13:59,788 --> 01:14:04,018
right so this should be a struct that

1335
01:14:02,219 --> 01:14:05,578
has the things in it fitted outputs and

1336
01:14:04,019 --> 01:14:08,340
this should be a struct that has things

1337
01:14:05,578 --> 01:14:10,078
in it could it takes or something so you

1338
01:14:08,340 --> 01:14:12,869
can see the inputs and the outputs of

1339
01:14:10,078 --> 01:14:14,908
this thing as a function that would be

1340
01:14:12,868 --> 01:14:16,889
what would actually make sense instead

1341
01:14:14,908 --> 01:14:19,198
you always have global variables and the

1342
01:14:16,889 --> 01:14:23,429
global variables are supposed to line up

1343
01:14:19,198 --> 01:14:26,458
with like something else declared global

1344
01:14:23,429 --> 01:14:29,788
that is writable in the other one but

1345
01:14:26,458 --> 01:14:31,948
readable by you it's just it's not it

1346
01:14:29,788 --> 01:14:35,158
like it I don't know it's just a very

1347
01:14:31,948 --> 01:14:36,958
strange way and it leads to these sort

1348
01:14:35,158 --> 01:14:40,109
of tortured naming conventions like the

1349
01:14:36,958 --> 01:14:43,948
thing that I'm having to mess with now

1350
01:14:40,109 --> 01:14:45,898
where it's like I I want to name this a

1351
01:14:43,948 --> 01:14:47,819
different thing in each function the

1352
01:14:45,899 --> 01:14:49,960
input and the output of the function

1353
01:14:47,819 --> 01:14:52,179
should be able to be named in

1354
01:14:49,960 --> 01:14:54,219
put an output but I can't name it in put

1355
01:14:52,180 --> 01:14:56,560
an output because if I did that it

1356
01:14:54,219 --> 01:14:58,719
wouldn't line up and it's required to so

1357
01:14:56,560 --> 01:15:00,370
you can't call the output of the vertex

1358
01:14:58,719 --> 01:15:02,829
shader the output because then in the

1359
01:15:00,369 --> 01:15:08,519
fragment shader we called output which

1360
01:15:02,829 --> 01:15:11,140
is not right whatever

1361
01:15:08,520 --> 01:15:13,690
all right so we pretty much have to have

1362
01:15:11,140 --> 01:15:15,550
a naming convention that respects the

1363
01:15:13,689 --> 01:15:18,039
fact that each of these things have to

1364
01:15:15,550 --> 01:15:21,010
have the same name so that kind of means

1365
01:15:18,039 --> 01:15:24,430
we'll have to call it what may be the

1366
01:15:21,010 --> 01:15:27,730
stage is so let's adopt the stage naming

1367
01:15:24,430 --> 01:15:32,170
convention the input to a thing takes

1368
01:15:27,729 --> 01:15:34,569
its name always so in here we've got

1369
01:15:32,170 --> 01:15:37,569
vert P vert color vert you defrag you

1370
01:15:34,569 --> 01:15:39,549
defrag color right exactly what we want

1371
01:15:37,569 --> 01:15:42,670
in here we've got froggy beef right

1372
01:15:39,550 --> 01:15:44,650
color result color not we want so what

1373
01:15:42,670 --> 01:15:48,670
is result color well result part is the

1374
01:15:44,649 --> 01:15:52,119
blend units color right so we'll call

1375
01:15:48,670 --> 01:15:53,140
this the blend unit color and then

1376
01:15:52,119 --> 01:16:08,260
everywhere we're going to write to that

1377
01:15:53,140 --> 01:16:09,280
we'll just call it blend unit color all

1378
01:16:08,260 --> 01:16:11,110
right

1379
01:16:09,279 --> 01:16:13,829
and then everything that comes into the

1380
01:16:11,109 --> 01:16:18,460
fragment shader again should always be

1381
01:16:13,829 --> 01:16:19,689
titled frag is going to be a nightmare

1382
01:16:18,460 --> 01:16:24,579
to get working again because of all

1383
01:16:19,689 --> 01:16:26,549
these name changes and the compiler is

1384
01:16:24,579 --> 01:16:30,579
error messages are not fabulous

1385
01:16:26,550 --> 01:16:32,110
but whatever will live with it so here

1386
01:16:30,579 --> 01:16:34,719
in the fragment code right we've got

1387
01:16:32,109 --> 01:16:39,549
information coming in from here smooth

1388
01:16:34,719 --> 01:16:41,469
in let's see frag color frag UV that's

1389
01:16:39,550 --> 01:16:44,340
what that should be result color is not

1390
01:16:41,469 --> 01:16:44,340
supposed to be result color

1391
01:16:44,789 --> 01:16:49,838
[Applause]

1392
01:16:51,159 --> 01:16:58,149
and we'll just cross our fingers that we

1393
01:16:53,350 --> 01:17:10,930
can get this working again all right so

1394
01:16:58,149 --> 01:17:16,269
that looks slow right that doesn't so

1395
01:17:10,930 --> 01:17:20,409
that actually looks wrong because that's

1396
01:17:16,270 --> 01:17:23,140
not blending those two colors so what

1397
01:17:20,409 --> 01:17:33,039
was going on there are we writing

1398
01:17:23,140 --> 01:17:35,110
incorrectly to those so now we have to

1399
01:17:33,039 --> 01:17:39,159
fix the frag color in these ones so

1400
01:17:35,109 --> 01:17:40,869
let's take a look at frag color in the Z

1401
01:17:39,159 --> 01:17:48,039
bias program that's actually the correct

1402
01:17:40,869 --> 01:17:54,250
name for it let's put the outs like that

1403
01:17:48,039 --> 01:17:58,810
so there's the ins in the apps there's

1404
01:17:54,250 --> 01:18:02,649
Frank color blend unit color and it

1405
01:17:58,810 --> 01:18:07,900
looks relatively straightforward here's

1406
01:18:02,649 --> 01:18:10,529
a result multisample and that all looks

1407
01:18:07,899 --> 01:18:10,529
fine as well

1408
01:18:22,479 --> 01:18:34,479
all right so then we've got the final

1409
01:18:27,489 --> 01:18:36,460
stretch so the thread use the out fix

1410
01:18:34,479 --> 01:18:38,979
for blend unit color that all looks good

1411
01:18:36,460 --> 01:18:40,180
too now you're the fake seed lighting

1412
01:18:38,979 --> 01:18:42,099
fix you letting look like it's working

1413
01:18:40,180 --> 01:18:45,310
correctly however frag color is not the

1414
01:18:42,100 --> 01:18:54,310
right name they're frag colors here has

1415
01:18:45,310 --> 01:19:10,420
to be blend unit color we go so that's

1416
01:18:54,310 --> 01:19:14,300
all good all right

1417
01:19:10,420 --> 01:19:18,350
so looking at this where we've got the

1418
01:19:14,300 --> 01:19:24,020
blend unit color here in the two so

1419
01:19:18,350 --> 01:19:29,800
multi light up for example I versus

1420
01:19:24,020 --> 01:19:33,620
multi light down just trying to see what

1421
01:19:29,800 --> 01:19:48,560
we can make of this so blend unit color

1422
01:19:33,619 --> 01:19:52,609
out the front emit and vacuum it here so

1423
01:19:48,560 --> 01:19:54,410
there's the problem that looks like a

1424
01:19:52,609 --> 01:20:01,149
bug we always have not one we just

1425
01:19:54,409 --> 01:20:01,149
introduced there we go

1426
01:20:15,960 --> 01:20:23,140
all right so that all looks fine now and

1427
01:20:20,800 --> 01:20:28,779
let's try to figure out how we can get

1428
01:20:23,140 --> 01:20:30,670
our our lighting values now written too

1429
01:20:28,779 --> 01:20:32,529
now that we have a sensible way of

1430
01:20:30,670 --> 01:20:34,319
naming those things and we don't have to

1431
01:20:32,529 --> 01:20:38,829
worry about the GL flag data problem

1432
01:20:34,319 --> 01:20:45,309
either so if we want to now for compiled

1433
01:20:38,829 --> 01:20:48,819
fake feed lighting we can do the same

1434
01:20:45,310 --> 01:20:50,470
thing that we were doing compile succeed

1435
01:20:48,819 --> 01:20:52,689
lighting in for example like our

1436
01:20:50,470 --> 01:20:56,110
resolved multi sample paths or our

1437
01:20:52,689 --> 01:20:57,489
compiled D bias program so if we take a

1438
01:20:56,109 --> 01:21:00,039
look at compiled D bias program for

1439
01:20:57,489 --> 01:21:03,309
example now we could do is where we have

1440
01:21:00,039 --> 01:21:06,340
before our blend unit color we can

1441
01:21:03,310 --> 01:21:09,220
instead have output to multiple textures

1442
01:21:06,340 --> 01:21:10,840
now what we defined when we said what

1443
01:21:09,220 --> 01:21:13,300
we're going to do is we would have three

1444
01:21:10,840 --> 01:21:16,360
of these there'd be reflect RGB and

1445
01:21:13,300 --> 01:21:19,680
coverage a that's the first one the emit

1446
01:21:16,359 --> 01:21:24,189
RGB and spread a and then the N X&amp;Y LPL

1447
01:21:19,680 --> 01:21:26,380
smell p0 p1 so what we want to do here

1448
01:21:24,189 --> 01:21:29,349
is say ok we're only writing the three

1449
01:21:26,380 --> 01:21:30,850
things in this particular case and so

1450
01:21:29,350 --> 01:21:36,070
when we come up through here and do our

1451
01:21:30,850 --> 01:21:38,650
blend unit color what I want to do is is

1452
01:21:36,069 --> 01:21:40,569
sort of change up the names of these a

1453
01:21:38,649 --> 01:21:41,949
little bit so instead of blend unit

1454
01:21:40,569 --> 01:21:44,460
color here this is going to be surface

1455
01:21:41,949 --> 01:21:44,460
reflect

1456
01:21:45,239 --> 01:21:53,670
[Applause]

1457
01:21:58,479 --> 01:22:04,819
so the surface reflectance they're

1458
01:22:00,560 --> 01:22:07,100
getting coated in srgb that's fine but

1459
01:22:04,819 --> 01:22:11,389
regardless when we get to here now we've

1460
01:22:07,100 --> 01:22:14,120
got blend unit color 0 equal surface

1461
01:22:11,390 --> 01:22:15,860
reflect blending Claire 1 should be

1462
01:22:14,119 --> 01:22:18,319
equal to emit which we haven't done yet

1463
01:22:15,859 --> 01:22:20,539
and plenty of color 2 should be equal to

1464
01:22:18,319 --> 01:22:23,149
NP L so we want to compute those other

1465
01:22:20,539 --> 01:22:24,949
values there and all these values are

1466
01:22:23,149 --> 01:22:27,349
only going to be computed if the alpha

1467
01:22:24,949 --> 01:22:28,609
threshold is met if we discard we

1468
01:22:27,350 --> 01:22:31,660
discards all things we don't want to

1469
01:22:28,609 --> 01:22:36,409
bother computing any of this information

1470
01:22:31,659 --> 01:22:39,699
when the Alpha drops below it so what we

1471
01:22:36,409 --> 01:22:44,389
need to do now is compute the emit and

1472
01:22:39,699 --> 01:22:47,559
we need to compute the NPL now we know

1473
01:22:44,390 --> 01:22:55,750
the emit is going to be the emit RGB

1474
01:22:47,560 --> 01:22:59,660
plus the spread and we know the NPL I

1475
01:22:55,750 --> 01:23:02,390
assume you can do in RGB here like I

1476
01:22:59,659 --> 01:23:04,510
said we can do like a V 3 plus an a I

1477
01:23:02,390 --> 01:23:09,230
don't remember if they allow that or not

1478
01:23:04,510 --> 01:23:14,210
this is going to be the N X + y LP 0 LP

1479
01:23:09,229 --> 01:23:20,029
1 right which we don't know I could also

1480
01:23:14,210 --> 01:23:21,770
just write this out longhand so that's

1481
01:23:20,029 --> 01:23:24,050
how we need to pack these values in

1482
01:23:21,770 --> 01:23:26,270
order to produce those some of them we

1483
01:23:24,050 --> 01:23:28,850
have some of them we don't so you can

1484
01:23:26,270 --> 01:23:31,040
see here we've got a world normal that

1485
01:23:28,850 --> 01:23:34,100
will allow us to do the NX and wide

1486
01:23:31,039 --> 01:23:38,899
directly so what we want to do here is

1487
01:23:34,100 --> 01:23:42,800
produce that NX + x + y the LP 0 we're

1488
01:23:38,899 --> 01:23:44,789
just going to fill in a bogus values

1489
01:23:42,800 --> 01:23:49,319
here

1490
01:23:44,789 --> 01:23:49,319
[Applause]

1491
01:23:53,090 --> 01:24:00,890
but the n x and y values we can compute

1492
01:23:58,310 --> 01:24:07,670
from the world normal end and the world

1493
01:24:00,890 --> 01:24:13,460
normal why yeah so what we want to do

1494
01:24:07,670 --> 01:24:16,430
there is we want to pack these into an

1495
01:24:13,460 --> 01:24:18,439
8-bit value right we don't want to have

1496
01:24:16,430 --> 01:24:21,740
to specify floating point frame buffers

1497
01:24:18,439 --> 01:24:23,329
just to get this data through to the

1498
01:24:21,739 --> 01:24:25,789
lighting system where it will eventually

1499
01:24:23,329 --> 01:24:28,399
use floating point computations but we

1500
01:24:25,789 --> 01:24:30,920
want to encode it you know in a more

1501
01:24:28,399 --> 01:24:34,429
straightforward way so in order to do

1502
01:24:30,920 --> 01:24:36,170
that where we've got our world and X&amp;Y

1503
01:24:34,430 --> 01:24:38,390
here what we need to do is we need to

1504
01:24:36,170 --> 01:24:41,539
take this which we know is in the range

1505
01:24:38,390 --> 01:24:43,910
of negative 1 to 1 and we need to put it

1506
01:24:41,539 --> 01:24:46,399
in the range of 0 to 1 now I don't

1507
01:24:43,909 --> 01:24:48,920
remember they might already have a way

1508
01:24:46,399 --> 01:24:50,359
to do that directly obviously it's

1509
01:24:48,920 --> 01:24:52,130
trivial for us to write so we'll just

1510
01:24:50,359 --> 01:24:55,159
write it but I want to double check that

1511
01:24:52,130 --> 01:24:57,069
they don't have a utility function for

1512
01:24:55,159 --> 01:24:59,840
that that automatically does this

1513
01:24:57,069 --> 01:25:04,059
operation but just be a bias operation

1514
01:24:59,840 --> 01:25:04,060
basically let's see if it's in here

1515
01:25:09,760 --> 01:25:19,270
okay so here's built-in functions common

1516
01:25:15,850 --> 01:25:19,270
[Music]

1517
01:25:19,779 --> 01:25:36,199
mod round cross face forward not seeing

1518
01:25:26,060 --> 01:25:42,320
much here I don't see it so I'm assuming

1519
01:25:36,199 --> 01:25:47,059
we will write it because I don't see it

1520
01:25:42,319 --> 01:25:48,319
anywhere would be in here I would think

1521
01:25:47,060 --> 01:25:49,910
because it's kind of like you know

1522
01:25:48,319 --> 01:25:55,389
smooth stuff and these other ones that

1523
01:25:49,909 --> 01:26:01,010
are pretty straightforward little blendy

1524
01:25:55,390 --> 01:26:05,600
sorts of things alright so what we want

1525
01:26:01,010 --> 01:26:10,159
to do is we want to take this value

1526
01:26:05,600 --> 01:26:14,600
that's from negative 1 to 1 and we just

1527
01:26:10,159 --> 01:26:16,550
want to pack it down right so we want to

1528
01:26:14,600 --> 01:26:18,650
basically take it it's too wide at the

1529
01:26:16,550 --> 01:26:20,930
moment right negative 1 to 1 so it's 2

1530
01:26:18,649 --> 01:26:23,539
units long we want to compress that down

1531
01:26:20,930 --> 01:26:26,390
to one unit long so we divide by 2 right

1532
01:26:23,539 --> 01:26:27,710
Oh point 5 and then we got to ship it up

1533
01:26:26,390 --> 01:26:29,090
because then it's negative point 5 to

1534
01:26:27,710 --> 01:26:31,430
positive point which got shifted up from

1535
01:26:29,090 --> 01:26:35,869
0 to 1 so then those can be packed in

1536
01:26:31,430 --> 01:26:38,750
here just fine and off we go now we have

1537
01:26:35,869 --> 01:26:41,390
to make sure our unpacker also handles

1538
01:26:38,750 --> 01:26:46,069
that properly so let's go ahead and

1539
01:26:41,390 --> 01:26:51,829
double check that that's true I don't

1540
01:26:46,069 --> 01:26:52,809
know where that is no we had it in here

1541
01:26:51,829 --> 01:26:55,960
somewhere

1542
01:26:52,810 --> 01:26:55,960
here it is

1543
01:26:58,368 --> 01:27:03,118
so here you go so here's reconstruct

1544
01:27:00,748 --> 01:27:06,238
normal the past BMP what you can see

1545
01:27:03,118 --> 01:27:07,948
here is yeah it doesn't really because

1546
01:27:06,238 --> 01:27:12,178
this is using these as if they were the

1547
01:27:07,948 --> 01:27:13,648
actual values which they are not at the

1548
01:27:12,179 --> 01:27:18,059
moment although I guess since that's

1549
01:27:13,649 --> 01:27:20,039
floating-point that's probably okay so

1550
01:27:18,059 --> 01:27:21,510
yeah we can hold off on that they're

1551
01:27:20,038 --> 01:27:23,219
packed in here but when we do the

1552
01:27:21,510 --> 01:27:30,689
transfer we'll have to unpack them so

1553
01:27:23,219 --> 01:27:34,019
that's fine that's all good and X so

1554
01:27:30,689 --> 01:27:35,519
that packs up the NPL vector and so

1555
01:27:34,019 --> 01:27:39,088
really all we need here is the emission

1556
01:27:35,519 --> 01:27:42,949
vector with the spread so at the moment

1557
01:27:39,088 --> 01:27:46,948
I'm going to call the emit spread 1.0

1558
01:27:42,948 --> 01:27:52,858
and again to do kc some way of

1559
01:27:46,948 --> 01:27:55,558
specifying like emission so what i want

1560
01:27:52,859 --> 01:27:56,879
to do here is take the emit RGB and what

1561
01:27:55,559 --> 01:28:00,958
i'm going to do is i'm just going to use

1562
01:27:56,878 --> 01:28:02,998
the light p here and i'm going to do

1563
01:28:00,958 --> 01:28:05,279
essentially what we do with the other

1564
01:28:02,998 --> 01:28:08,578
with the fake feed lighting i'm going to

1565
01:28:05,279 --> 01:28:10,408
use that temporarily so we're just going

1566
01:28:08,578 --> 01:28:11,938
to write one light in just like we were

1567
01:28:10,408 --> 01:28:14,038
writing in before only we're going to

1568
01:28:11,939 --> 01:28:16,229
write it in here instead of in our fake

1569
01:28:14,038 --> 01:28:17,309
food lighting program so in here what

1570
01:28:16,229 --> 01:28:21,869
i'm going to do is i'm going to say well

1571
01:28:17,309 --> 01:28:24,599
okay we know that we've got a light p -

1572
01:28:21,868 --> 01:28:26,429
world p in terms of the distance of the

1573
01:28:24,599 --> 01:28:30,510
light source so i'm just going to say

1574
01:28:26,429 --> 01:28:32,939
whatever the length is of these things

1575
01:28:30,510 --> 01:28:34,800
if the length between the light p and

1576
01:28:32,939 --> 01:28:38,099
the world P is less than I don't know

1577
01:28:34,800 --> 01:28:40,349
fifth of a meter or something then the

1578
01:28:38,099 --> 01:28:43,439
emission value is going to be something

1579
01:28:40,349 --> 01:28:46,219
real otherwise it's not so we're going

1580
01:28:43,439 --> 01:28:48,719
to assume that the emission is nothing

1581
01:28:46,219 --> 01:28:52,729
unless you're at the light source in

1582
01:28:48,719 --> 01:28:58,439
which case we'll make the emission be a

1583
01:28:52,729 --> 01:28:59,699
bright red light as before and that'll

1584
01:28:58,439 --> 01:29:03,109
be the brightest red light you can

1585
01:28:59,698 --> 01:29:03,108
possibly have right

1586
01:29:04,029 --> 01:29:10,479
okay so now we're going to debug the

1587
01:29:08,020 --> 01:29:13,180
shader or not the bug fix and Pilar as

1588
01:29:10,479 --> 01:29:17,039
the shader the surface reflects

1589
01:29:13,180 --> 01:29:17,039
undeclared identifier that is true

1590
01:29:26,640 --> 01:29:45,700
redefinition err omit and I'll just go

1591
01:29:41,199 --> 01:29:57,819
ahead and pack these in here so we don't

1592
01:29:45,699 --> 01:30:11,649
have more variables than necessary so

1593
01:29:57,819 --> 01:30:14,590
that's good alright so that looks all

1594
01:30:11,649 --> 01:30:18,750
reasonable there and the surface

1595
01:30:14,590 --> 01:30:18,750
reflectance here again gets packed in

1596
01:30:20,279 --> 01:30:28,420
and then written out so I think that's

1597
01:30:23,979 --> 01:30:33,189
all fine a look at the next compiler

1598
01:30:28,420 --> 01:30:33,579
error all right so it looks like we're

1599
01:30:33,189 --> 01:30:36,789
good

1600
01:30:33,579 --> 01:30:40,539
so now we need to actually get that data

1601
01:30:36,789 --> 01:30:42,460
over somehow so we're writing that out

1602
01:30:40,539 --> 01:30:46,000
right and now we need to actually do

1603
01:30:42,460 --> 01:30:47,980
something with it now what we can do

1604
01:30:46,000 --> 01:30:51,069
here if we're feeling particularly saucy

1605
01:30:47,979 --> 01:30:53,049
is we can view this directly so whatever

1606
01:30:51,069 --> 01:30:55,569
the actual information is this getting

1607
01:30:53,050 --> 01:30:59,220
output by one of these fragment shaders

1608
01:30:55,569 --> 01:31:02,130
we could grab it and use it in our

1609
01:30:59,220 --> 01:31:05,530
lighting computation directly already

1610
01:31:02,130 --> 01:31:06,159
because in theory well okay I guess

1611
01:31:05,529 --> 01:31:08,079
that's not true

1612
01:31:06,159 --> 01:31:10,239
so we need one more step which is we

1613
01:31:08,079 --> 01:31:13,989
need to have the multi sample resolve

1614
01:31:10,239 --> 01:31:18,029
also take it into account right

1615
01:31:13,989 --> 01:31:18,029
so the multi sample resolves

1616
01:31:18,810 --> 01:31:28,240
here needs to be able to read from these

1617
01:31:24,579 --> 01:31:31,090
other buffers and write them out as well

1618
01:31:28,239 --> 01:31:33,789
so in addition to having just that one

1619
01:31:31,090 --> 01:31:36,310
color sampler which it's going to fetch

1620
01:31:33,789 --> 01:31:39,609
from it needs to sample from the other

1621
01:31:36,310 --> 01:31:41,560
two as well so in addition to just the

1622
01:31:39,609 --> 01:31:48,039
surface reflectance one it needs to take

1623
01:31:41,560 --> 01:31:49,450
the emit and the MPL right so in here

1624
01:31:48,039 --> 01:31:51,340
where it's picking up the some of the

1625
01:31:49,449 --> 01:31:55,449
samples the same would be true

1626
01:31:51,340 --> 01:31:57,730
presumably for the emit in the NPL I you

1627
01:31:55,449 --> 01:32:02,019
know again we don't really have a sane

1628
01:31:57,729 --> 01:32:07,389
idea for how we would be treating the n

1629
01:32:02,020 --> 01:32:09,280
x and y or the lp0 lt1 or whatever when

1630
01:32:07,390 --> 01:32:11,860
they get blended together so when you're

1631
01:32:09,279 --> 01:32:13,719
at a when you're at a corner pixel a

1632
01:32:11,859 --> 01:32:16,000
pixel that's covered by multiple people

1633
01:32:13,720 --> 01:32:17,880
we just have to pick something to do

1634
01:32:16,000 --> 01:32:21,609
with it in terms of what its emission

1635
01:32:17,880 --> 01:32:23,500
spray it in x and y and LP 0 LP 1 r so

1636
01:32:21,609 --> 01:32:25,149
we can just blend them together and

1637
01:32:23,500 --> 01:32:27,100
cross our fingers because there's no

1638
01:32:25,149 --> 01:32:29,799
right answer for that really unless we

1639
01:32:27,100 --> 01:32:31,870
computed everything at the multi sample

1640
01:32:29,800 --> 01:32:38,320
level which we don't really want to do I

1641
01:32:31,869 --> 01:32:39,989
don't think so anyway so here what we're

1642
01:32:38,319 --> 01:32:42,369
going to have is we're going to have

1643
01:32:39,989 --> 01:32:44,139
multiple color samplers here we're going

1644
01:32:42,369 --> 01:32:51,130
to have a color sampler and a mix

1645
01:32:44,140 --> 01:32:53,770
sampler and an MPL sampler alright and

1646
01:32:51,130 --> 01:32:57,369
when we do these Suches that we've

1647
01:32:53,770 --> 01:33:02,550
decided we're not doing anything fancy

1648
01:32:57,369 --> 01:33:06,220
there so we're going to take em Jimmy

1649
01:33:02,550 --> 01:33:13,000
we're going to take the color fetch and

1650
01:33:06,220 --> 01:33:16,320
just duplicate it out like so

1651
01:33:13,000 --> 01:33:19,689
[Applause]

1652
01:33:16,319 --> 01:33:23,500
so same exact process same exact

1653
01:33:19,689 --> 01:33:26,369
everything and then what we want to do

1654
01:33:23,500 --> 01:33:31,180
is we want to just sum those together

1655
01:33:26,369 --> 01:33:39,460
into the combined commit combined mg/l

1656
01:33:31,180 --> 01:33:43,000
so up here we've got a combined pillar a

1657
01:33:39,460 --> 01:33:44,890
combined commit and a combined NPL each

1658
01:33:43,000 --> 01:33:47,500
of those things starts at zero sums up

1659
01:33:44,890 --> 01:33:50,320
and then in the end when we need to

1660
01:33:47,500 --> 01:33:54,670
actually write these doubts then we have

1661
01:33:50,319 --> 01:33:58,449
to go ahead and do the computation now

1662
01:33:54,670 --> 01:34:03,699
this right here is this blend unit color

1663
01:33:58,449 --> 01:34:21,729
bit here this is the actual surface

1664
01:34:03,699 --> 01:34:23,019
reflect so this is actually right so

1665
01:34:21,729 --> 01:34:26,709
this is actually the service reflect

1666
01:34:23,020 --> 01:34:29,110
amendment we do the texture that starts

1667
01:34:26,710 --> 01:34:30,789
to be right we would if we were

1668
01:34:29,109 --> 01:34:33,309
simulating that we would do the power

1669
01:34:30,789 --> 01:34:35,350
ourselves there so which I think we

1670
01:34:33,310 --> 01:34:36,880
always do currently because we get bugs

1671
01:34:35,350 --> 01:34:38,320
if we don't do it currently although in

1672
01:34:36,880 --> 01:34:39,430
the future when we change our art asset

1673
01:34:38,319 --> 01:34:44,489
format we might be able to get rid of

1674
01:34:39,430 --> 01:34:46,720
that and let the card do it so anyway

1675
01:34:44,489 --> 01:34:48,969
moving along there we've got our

1676
01:34:46,720 --> 01:34:51,310
combined colors now we need for the

1677
01:34:48,970 --> 01:34:53,800
other two we need do the same thing so

1678
01:34:51,310 --> 01:34:57,280
here what we want to do is we want to

1679
01:34:53,800 --> 01:34:59,800
take our blend unit color zero and make

1680
01:34:57,279 --> 01:35:01,989
that equal to the surface reflects you

1681
01:34:59,800 --> 01:35:04,600
want to take blend unit color one and

1682
01:35:01,989 --> 01:35:07,569
make that equal to the emit Linea Clark

1683
01:35:04,600 --> 01:35:09,220
to make that equal to the MPL and so in

1684
01:35:07,569 --> 01:35:12,219
each of those cases when we're writing

1685
01:35:09,220 --> 01:35:14,110
those in we need to take the inverse

1686
01:35:12,220 --> 01:35:16,690
sample count multiply them to get that

1687
01:35:14,109 --> 01:35:20,920
blending to occur just like we did with

1688
01:35:16,689 --> 01:35:22,139
the surface reflect and that's really

1689
01:35:20,920 --> 01:35:24,989
about it

1690
01:35:22,140 --> 01:35:27,360
so that will blend out the rest of those

1691
01:35:24,989 --> 01:35:31,800
we just need now to make sure

1692
01:35:27,359 --> 01:35:34,769
that we're grabbing that blends unit

1693
01:35:31,800 --> 01:35:37,500
color as definition with the layout

1694
01:35:34,770 --> 01:35:40,409
specifier so that we know that it all

1695
01:35:37,500 --> 01:35:42,179
goes to the right location so let's take

1696
01:35:40,408 --> 01:35:43,888
a look at resolve multi sampled here we

1697
01:35:42,179 --> 01:35:46,560
just here we're writing to the blend

1698
01:35:43,889 --> 01:35:50,670
unit color we just need to have that be

1699
01:35:46,560 --> 01:35:54,420
defined here right and we're only

1700
01:35:50,670 --> 01:35:56,368
writing the three of them so now that

1701
01:35:54,420 --> 01:35:58,350
should also write to them the only trick

1702
01:35:56,368 --> 01:36:00,179
there is we need more samplers now

1703
01:35:58,350 --> 01:36:04,079
because we're reading from multiple

1704
01:36:00,179 --> 01:36:07,560
textures so this part where we have to

1705
01:36:04,079 --> 01:36:11,368
actually write to these we need an amid

1706
01:36:07,560 --> 01:36:15,780
sampler and an fel sampler those both

1707
01:36:11,368 --> 01:36:25,079
need to get down so that's in the

1708
01:36:15,779 --> 01:36:26,908
resolves multi sample program like so so

1709
01:36:25,079 --> 01:36:33,238
when we do that resolve those need to

1710
01:36:26,908 --> 01:36:36,000
get set up so when color sampler in our

1711
01:36:33,238 --> 01:36:38,519
use program begin for resolve multi

1712
01:36:36,000 --> 01:36:40,079
sample we need these to all be lined up

1713
01:36:38,520 --> 01:36:45,900
somehow

1714
01:36:40,079 --> 01:36:47,698
and I guess I'll just do them I guess

1715
01:36:45,899 --> 01:36:50,429
preserving the order they used to be in

1716
01:36:47,698 --> 01:36:53,579
so the zero and one is for the coding

1717
01:36:50,429 --> 01:36:56,670
the depth the Amit and MPL samplers will

1718
01:36:53,579 --> 01:37:01,050
come after and so let me do the multi

1719
01:36:56,670 --> 01:37:05,158
sample resolve actually you know what

1720
01:37:01,050 --> 01:37:07,920
that doesn't really make any sense let's

1721
01:37:05,158 --> 01:37:09,149
put the depth sampler first and then all

1722
01:37:07,920 --> 01:37:11,100
the colors because then that way the

1723
01:37:09,149 --> 01:37:14,158
colors are contiguous that seems more

1724
01:37:11,100 --> 01:37:21,630
reasonable to me so when we do is the

1725
01:37:14,158 --> 01:37:24,019
multi sample now where is that actual

1726
01:37:21,630 --> 01:37:24,020
function

1727
01:37:26,579 --> 01:37:33,909
it is so when we do resolve multi-sample

1728
01:37:31,829 --> 01:37:38,800
what I want to be able to do here is a

1729
01:37:33,909 --> 01:37:40,840
four I loop and so that we can set the

1730
01:37:38,800 --> 01:37:42,670
active textures up again now I don't

1731
01:37:40,840 --> 01:37:46,539
know why we felt the need to clear the

1732
01:37:42,670 --> 01:37:48,460
active texture here to be honest with

1733
01:37:46,539 --> 01:37:53,529
you I don't know that that's really

1734
01:37:48,460 --> 01:37:55,689
necessary I feel like it shouldn't be

1735
01:37:53,529 --> 01:37:58,689
because every time we set all detectors

1736
01:37:55,689 --> 01:38:00,669
that we're going to use so it just seems

1737
01:37:58,689 --> 01:38:02,349
like active texture is the only thing

1738
01:38:00,670 --> 01:38:03,819
that needs to get reset in case people

1739
01:38:02,350 --> 01:38:05,620
are not using it somewhere

1740
01:38:03,819 --> 01:38:08,979
even though really hopefully they would

1741
01:38:05,619 --> 01:38:12,099
be but let's go ahead and do before I

1742
01:38:08,979 --> 01:38:19,000
loop here color index equal zero color

1743
01:38:12,100 --> 01:38:21,370
index is less than open Jill well I

1744
01:38:19,000 --> 01:38:29,409
guess it's a red count in this case now

1745
01:38:21,369 --> 01:38:46,000
now it's open jail color count where is

1746
01:38:29,409 --> 01:38:48,760
that where to get up with that so

1747
01:38:46,000 --> 01:38:50,800
textured 0 is the DEF handle texture 1

1748
01:38:48,760 --> 01:38:54,640
plus whatever color index were on is

1749
01:38:50,800 --> 01:38:57,250
going to be the color handle in this

1750
01:38:54,640 --> 01:39:00,910
case then we will draw and then we will

1751
01:38:57,250 --> 01:39:03,579
unbind I'm just going to say that this

1752
01:39:00,909 --> 01:39:06,909
is going to work I don't know that it

1753
01:39:03,579 --> 01:39:10,300
actually will but hopefully now the

1754
01:39:06,909 --> 01:39:14,439
resolve will work properly let's see

1755
01:39:10,300 --> 01:39:16,150
under it Amit and undeclared NPL so

1756
01:39:14,439 --> 01:39:18,899
let's take a look at why we're getting

1757
01:39:16,149 --> 01:39:18,899
those undeclared

1758
01:39:22,948 --> 01:39:39,638
that's in here so we've got yeah so this

1759
01:39:35,979 --> 01:39:47,860
is supposed to be combined emit and

1760
01:39:39,639 --> 01:39:49,630
combined MPL all right so now we've got

1761
01:39:47,859 --> 01:39:51,518
that stuff going but we don't know if

1762
01:39:49,630 --> 01:39:52,868
it's working properly and the easiest

1763
01:39:51,519 --> 01:39:56,979
thing we can do first just to make sure

1764
01:39:52,868 --> 01:39:59,799
we didn't you know to get the really bad

1765
01:39:56,979 --> 01:40:02,949
bugs on the way first I can switch back

1766
01:39:59,800 --> 01:40:06,159
to showing the game render see if we

1767
01:40:02,948 --> 01:40:11,168
still get it and surprisingly to me we

1768
01:40:06,158 --> 01:40:14,768
do so that's pretty good obviously so we

1769
01:40:11,168 --> 01:40:16,238
are able to render the world properly in

1770
01:40:14,769 --> 01:40:21,849
the theory we're also rendering the

1771
01:40:16,238 --> 01:40:27,718
other buffers at the moment to now when

1772
01:40:21,849 --> 01:40:31,869
we do at that point when we do our

1773
01:40:27,719 --> 01:40:34,510
lighting view right which is this in

1774
01:40:31,868 --> 01:40:38,018
theory now I think I should be able to

1775
01:40:34,510 --> 01:40:40,329
take the bottom level of the compute

1776
01:40:38,019 --> 01:40:43,958
light transport and get it

1777
01:40:40,328 --> 01:40:46,389
from the peel buffers instead so we can

1778
01:40:43,958 --> 01:40:52,118
see what we're actually drawing there so

1779
01:40:46,389 --> 01:40:53,380
I what we need to do is is actually have

1780
01:40:52,118 --> 01:40:55,988
a way of transferring one of the other

1781
01:40:53,380 --> 01:40:58,359
at the moment we don't actually have a

1782
01:40:55,988 --> 01:41:02,379
way to do that because we have to write

1783
01:40:58,359 --> 01:41:07,149
a shader to do it but before we do that

1784
01:41:02,380 --> 01:41:09,368
we can in theory view the emission part

1785
01:41:07,149 --> 01:41:11,679
of things because that will translate

1786
01:41:09,368 --> 01:41:14,529
over properly it's not encoded in any

1787
01:41:11,679 --> 01:41:16,449
weird way or anything so if we want to

1788
01:41:14,529 --> 01:41:25,029
now what we could say is well when we

1789
01:41:16,448 --> 01:41:27,609
when we do our multi light C multi light

1790
01:41:25,029 --> 01:41:29,948
down we just need oh it's a transport

1791
01:41:27,609 --> 01:41:32,648
light so we need to our compute light

1792
01:41:29,948 --> 01:41:35,288
transport right normally we're starting

1793
01:41:32,649 --> 01:41:35,800
here at source place light plus index is

1794
01:41:35,288 --> 01:41:38,859
going to be

1795
01:41:35,800 --> 01:41:40,630
zero and we do these binds here right

1796
01:41:38,859 --> 01:41:43,149
the bind textures and that all makes

1797
01:41:40,630 --> 01:41:45,099
sense but what I can do is I can say

1798
01:41:43,149 --> 01:41:47,828
well if the source light buff index

1799
01:41:45,099 --> 01:41:50,199
happens equals zero what I can do is

1800
01:41:47,828 --> 01:41:53,408
override what you were going to get the

1801
01:41:50,198 --> 01:41:57,578
front emission texture from and say well

1802
01:41:53,408 --> 01:42:02,078
instead why don't you get that from the

1803
01:41:57,578 --> 01:42:06,389
peel buffer instead right so then we can

1804
01:42:02,078 --> 01:42:06,389
say well the depth feel resolve buffer

1805
01:42:08,670 --> 01:42:18,328
for just peels zero has the color it

1806
01:42:14,130 --> 01:42:21,368
buffers in it right what's this one here

1807
01:42:18,328 --> 01:42:26,319
we could go ahead and peel out for

1808
01:42:21,368 --> 01:42:29,439
example the emission from there right

1809
01:42:26,319 --> 01:42:32,799
and now just that first time we're going

1810
01:42:29,439 --> 01:42:40,238
to pick up that depth peel buffer I'm

1811
01:42:32,800 --> 01:42:44,559
going to comment out the down phase just

1812
01:42:40,238 --> 01:42:45,968
to keep things a little simpler and oops

1813
01:42:44,559 --> 01:42:48,610
that's under OpenGL

1814
01:42:45,969 --> 01:42:50,739
so again just reaching directly into

1815
01:42:48,609 --> 01:42:52,719
that depth field buffer and starting

1816
01:42:50,738 --> 01:42:57,209
with that as the source so we can see

1817
01:42:52,719 --> 01:42:57,210
what got written to to it at all right

1818
01:43:00,658 --> 01:43:05,549
that cannot possibly be true

1819
01:43:07,539 --> 01:43:14,579
I do not believe what I'm seeing

1820
01:43:15,189 --> 01:43:20,469
so just like both index source type of

1821
01:43:18,220 --> 01:43:23,829
index source type of index that the

1822
01:43:20,470 --> 01:43:26,860
opening should be zero so what we should

1823
01:43:23,829 --> 01:43:28,779
see oh no that's fine so we're not

1824
01:43:26,859 --> 01:43:31,119
copying it over so that is actually

1825
01:43:28,779 --> 01:43:32,380
correct so it's the next one up that we

1826
01:43:31,119 --> 01:43:34,720
would have to look at to see what we

1827
01:43:32,380 --> 01:43:37,000
were drawing in and so we see nothing so

1828
01:43:34,720 --> 01:43:39,220
that's not a good sign right that means

1829
01:43:37,000 --> 01:43:43,569
our first sample up got got nothing out

1830
01:43:39,220 --> 01:43:47,619
of the emission there which is not

1831
01:43:43,569 --> 01:43:50,469
fabulous not fabulous at all however I

1832
01:43:47,619 --> 01:43:53,909
would point out that I don't remember

1833
01:43:50,470 --> 01:43:58,750
all of the mojo you have to do to enable

1834
01:43:53,909 --> 01:44:00,699
frame buffer output I don't remember if

1835
01:43:58,750 --> 01:44:02,319
you have to do GL enable for that so

1836
01:44:00,699 --> 01:44:08,050
let's just double check that we don't

1837
01:44:02,319 --> 01:44:19,649
have to do some kind of nonsense for

1838
01:44:08,050 --> 01:44:19,650
this so when we do begin screen fill

1839
01:44:25,948 --> 01:44:37,529
so it doesn't look like we really have

1840
01:44:28,500 --> 01:44:39,630
to alright so it doesn't look like we

1841
01:44:37,529 --> 01:44:44,119
really have to so let's start by digging

1842
01:44:39,630 --> 01:44:44,119
this one slow step at a time

1843
01:44:45,380 --> 01:44:55,500
so here's our compiled for the resolved

1844
01:44:51,689 --> 01:44:57,178
multi sample so when we do the resolved

1845
01:44:55,500 --> 01:44:58,890
multi sample what I'm going to do again

1846
01:44:57,179 --> 01:45:00,510
is the same debugging technique I've

1847
01:44:58,890 --> 01:45:02,190
done every time here since we don't

1848
01:45:00,510 --> 01:45:05,429
really have any GPU debugging on this

1849
01:45:02,189 --> 01:45:07,738
machine sadly we've got a blend unit

1850
01:45:05,429 --> 01:45:11,279
color that we're writing out zero one

1851
01:45:07,738 --> 01:45:14,009
two and what I want to do is verify that

1852
01:45:11,279 --> 01:45:16,979
this is actually happening the way that

1853
01:45:14,010 --> 01:45:18,980
I think it is so I'm going to go to the

1854
01:45:16,979 --> 01:45:21,659
place where we're actually specifying

1855
01:45:18,979 --> 01:45:23,519
the debug part here and I'm going to get

1856
01:45:21,659 --> 01:45:26,760
rid of that so now I should be able to

1857
01:45:23,520 --> 01:45:29,179
see what I what I'm looking at should be

1858
01:45:26,760 --> 01:45:32,310
the game right and that's the first

1859
01:45:29,179 --> 01:45:34,859
surface reflect thing that gets written

1860
01:45:32,310 --> 01:45:37,289
out there so the next thing I'm going to

1861
01:45:34,859 --> 01:45:39,689
do is now I know that I'm viewing that

1862
01:45:37,289 --> 01:45:42,090
correctly so what I want to do is take

1863
01:45:39,689 --> 01:45:45,899
the combined emission value that I'm

1864
01:45:42,090 --> 01:45:49,319
outputting and reroute that to be in

1865
01:45:45,899 --> 01:45:52,649
place of what was what I was just seeing

1866
01:45:49,319 --> 01:45:56,670
so now I can see what I'm writing out of

1867
01:45:52,649 --> 01:46:00,210
surface emission right so here's what

1868
01:45:56,670 --> 01:46:05,789
I'm supposedly writing out into the

1869
01:46:00,210 --> 01:46:07,198
surface emission buffer okay now one

1870
01:46:05,789 --> 01:46:10,380
thing you'll notice there is the certain

1871
01:46:07,198 --> 01:46:11,789
submission of the background is gray but

1872
01:46:10,380 --> 01:46:16,619
we'll have to fix that because we don't

1873
01:46:11,789 --> 01:46:18,689
really want that to be happening but we

1874
01:46:16,619 --> 01:46:21,210
can fix that later and so already you

1875
01:46:18,689 --> 01:46:24,000
can see I've got a problem if I write

1876
01:46:21,210 --> 01:46:25,890
the combined emission out there I'm not

1877
01:46:24,000 --> 01:46:28,439
seeing any emission I'm not seeing any

1878
01:46:25,890 --> 01:46:31,230
written emission in there which is

1879
01:46:28,439 --> 01:46:34,259
already a little bit broken because what

1880
01:46:31,229 --> 01:46:37,139
I should be seeing instead of that is I

1881
01:46:34,260 --> 01:46:39,060
should be seeing a light somewhere so we

1882
01:46:37,140 --> 01:46:40,460
have to fix that right that needs to be

1883
01:46:39,060 --> 01:46:46,310
set

1884
01:46:40,460 --> 01:46:46,310
let me also see what I'm getting for NPL

1885
01:46:47,420 --> 01:46:59,579
so oddly enough NPL is looking pretty

1886
01:46:52,310 --> 01:47:03,840
reasonable it's not what I would have

1887
01:46:59,579 --> 01:47:11,430
expected so it's not quite right but

1888
01:47:03,840 --> 01:47:16,170
it's not quite wrong either so a couple

1889
01:47:11,430 --> 01:47:18,539
things that are wrong with it yet you

1890
01:47:16,170 --> 01:47:20,489
can kind of see we're getting like

1891
01:47:18,539 --> 01:47:22,529
yellow for things that should be

1892
01:47:20,488 --> 01:47:24,988
pointing upwards so things that should

1893
01:47:22,529 --> 01:47:27,689
be pointing upwards should actually be

1894
01:47:24,988 --> 01:47:29,759
black and things that are pointing left

1895
01:47:27,689 --> 01:47:32,488
and right do look like they're sort of 0

1896
01:47:29,760 --> 01:47:34,739
&amp; 1 at the moment in greens or red

1897
01:47:32,488 --> 01:47:38,299
channels so that's a little bit better

1898
01:47:34,738 --> 01:47:41,159
but it looks kind of slightly wrong

1899
01:47:38,300 --> 01:47:47,010
while we're on that subject I think I

1900
01:47:41,159 --> 01:47:55,609
might as well go in and and take a look

1901
01:47:47,010 --> 01:48:00,090
here at the Z bias program here it is

1902
01:47:55,609 --> 01:48:03,409
and if we take a look at this here what

1903
01:48:00,090 --> 01:48:06,869
we want to know is why are we getting

1904
01:48:03,409 --> 01:48:08,250
weird values for the NX and why here so

1905
01:48:06,869 --> 01:48:10,738
the world normals

1906
01:48:08,250 --> 01:48:13,590
in this case we're compressing them down

1907
01:48:10,738 --> 01:48:15,809
to that range and so what we would

1908
01:48:13,590 --> 01:48:19,829
expect to see is that if the normal was

1909
01:48:15,810 --> 01:48:22,110
pointing upward in Z we would expect

1910
01:48:19,829 --> 01:48:25,800
like so for those cube tops of cubes

1911
01:48:22,109 --> 01:48:30,359
world in in world's world an X in world

1912
01:48:25,800 --> 01:48:32,279
and why should both be 0 and in that

1913
01:48:30,359 --> 01:48:34,979
case what we expect the output to be

1914
01:48:32,279 --> 01:48:38,840
would be 0.5 so it should not have been

1915
01:48:34,979 --> 01:48:38,839
bright yellow it should have been like

1916
01:48:39,109 --> 01:48:51,238
half yellow 128 128 like a mustard right

1917
01:48:45,800 --> 01:48:52,860
so it's not super wrong it's it's it's

1918
01:48:51,238 --> 01:48:56,368
not super wrong it's

1919
01:48:52,859 --> 01:48:58,670
just too bright yeah it would be the

1920
01:48:56,368 --> 01:49:02,929
only way to say it right it's too bright

1921
01:48:58,670 --> 01:49:05,460
now I don't know whether there's any RGB

1922
01:49:02,929 --> 01:49:08,279
conversion happening there I don't think

1923
01:49:05,460 --> 01:49:10,829
there should be because I don't want

1924
01:49:08,279 --> 01:49:13,979
those to be interpreted as srgb so

1925
01:49:10,829 --> 01:49:16,229
hopefully they're not but I don't

1926
01:49:13,979 --> 01:49:18,868
actually know that that's true at the

1927
01:49:16,229 --> 01:49:21,299
moment so what I do want to do probably

1928
01:49:18,868 --> 01:49:24,059
in this case is make sure that they're

1929
01:49:21,300 --> 01:49:26,130
not being coded that's RGB and that's

1930
01:49:24,060 --> 01:49:29,880
actually pretty easy to do so when we

1931
01:49:26,130 --> 01:49:32,300
come through here instead of default

1932
01:49:29,880 --> 01:49:35,909
frame buffer texture format in this case

1933
01:49:32,300 --> 01:49:41,300
what I can do here is say that for color

1934
01:49:35,908 --> 01:49:41,299
buffer 0 maybe that's true sort of color

1935
01:49:41,539 --> 01:49:57,689
the next is 0 then it's that otherwise

1936
01:49:48,510 --> 01:50:01,909
it's GL r g b a8 which is not NS RGB

1937
01:49:57,689 --> 01:50:01,908
format right because i don't want I

1938
01:50:06,079 --> 01:50:11,850
don't want any funny business there at

1939
01:50:08,939 --> 01:50:15,928
all I just want them encoded in in a

1940
01:50:11,850 --> 01:50:17,880
straightforward fashion so let's just

1941
01:50:15,929 --> 01:50:23,929
verifies that's the case but I think

1942
01:50:17,880 --> 01:50:23,929
that's probably the case yeah so

1943
01:50:24,670 --> 01:50:29,969
[Applause]

1944
01:50:27,020 --> 01:50:31,650
although they aren't getting encoded in

1945
01:50:29,969 --> 01:50:33,630
now that I think about it they will be

1946
01:50:31,649 --> 01:50:36,920
getting decoded by swearing so that

1947
01:50:33,630 --> 01:50:39,569
could actually be part of it

1948
01:50:36,920 --> 01:50:42,810
so those normals may actually not be

1949
01:50:39,569 --> 01:50:44,729
wrong so let's hold off on trying to bug

1950
01:50:42,810 --> 01:50:46,860
those QA begins now in theory but I want

1951
01:50:44,729 --> 01:50:52,169
to keep playing with this just a little

1952
01:50:46,859 --> 01:50:55,529
bit so let me just go ahead and in that

1953
01:50:52,170 --> 01:51:01,019
resolve there where's the result so

1954
01:50:55,529 --> 01:51:06,389
multi sample can't see cuz we find the

1955
01:51:01,019 --> 01:51:17,998
dinner so what I want to do here is I

1956
01:51:06,389 --> 01:51:28,440
want to take the emission and put that

1957
01:51:17,998 --> 01:51:31,618
back in there is that there and I just

1958
01:51:28,439 --> 01:51:33,268
want to look here at the thing that's

1959
01:51:31,618 --> 01:51:35,630
supposedly writing out the emission and

1960
01:51:33,269 --> 01:51:39,449
see why I'm not getting any of that

1961
01:51:35,630 --> 01:51:41,969
emission writing happening right so when

1962
01:51:39,448 --> 01:51:44,729
I run this like I said I should I expect

1963
01:51:41,969 --> 01:51:47,010
to nothing here the blackness that we

1964
01:51:44,729 --> 01:51:48,988
saw before and so I want to make sure

1965
01:51:47,010 --> 01:51:53,300
that there's nothing trivially going

1966
01:51:48,988 --> 01:51:53,299
wrong so I'm just going to write read

1967
01:51:58,158 --> 01:52:08,399
yeah so here's the other thing that I

1968
01:52:01,828 --> 01:52:12,840
was thinking about we we have to make

1969
01:52:08,399 --> 01:52:15,448
sure that blending is off but I'm pretty

1970
01:52:12,840 --> 01:52:17,969
sure it is so let's just make sure that

1971
01:52:15,448 --> 01:52:20,638
if I write read with zero in the Alpha

1972
01:52:17,969 --> 01:52:23,038
channel that it still comes through okay

1973
01:52:20,639 --> 01:52:25,469
so I wanted to make sure that that's the

1974
01:52:23,038 --> 01:52:29,009
case and that's good however it looks

1975
01:52:25,469 --> 01:52:32,210
like it's getting added because what you

1976
01:52:29,010 --> 01:52:34,139
can see here is there's actually like

1977
01:52:32,210 --> 01:52:38,489
addition looking like it's happening

1978
01:52:34,139 --> 01:52:42,269
there which should not be the case so I

1979
01:52:38,488 --> 01:52:49,018
want to make sure that you know geo

1980
01:52:42,269 --> 01:52:51,230
blends to the extent that it's on I want

1981
01:52:49,019 --> 01:52:58,099
to make sure that geo blend is not

1982
01:52:51,229 --> 01:52:58,098
occurring in the untoward way

1983
01:53:06,149 --> 01:53:19,299
so chill blend is supposed to be

1984
01:53:09,460 --> 01:53:21,760
disabled so in theory that blending must

1985
01:53:19,300 --> 01:53:23,739
be coming from somewhere else I don't

1986
01:53:21,760 --> 01:53:27,820
know about maybe if it's coming from the

1987
01:53:23,739 --> 01:53:34,059
multi sample resolution somehow although

1988
01:53:27,819 --> 01:53:37,750
I can't say I know how that would be

1989
01:53:34,060 --> 01:53:40,330
happening so this is a little suspicious

1990
01:53:37,750 --> 01:53:43,050
we may have to do more debugging next

1991
01:53:40,329 --> 01:53:43,050
weekend on this

1992
01:53:43,090 --> 01:53:49,630
however just taking a look at that as

1993
01:53:46,510 --> 01:53:52,960
well we do know that emissions should be

1994
01:53:49,630 --> 01:53:55,630
getting written out now so I should be

1995
01:53:52,960 --> 01:54:00,880
able just before we finish I should be

1996
01:53:55,630 --> 01:54:02,380
able to fix this particular bug with not

1997
01:54:00,880 --> 01:54:05,980
having a mission by looking at maybe

1998
01:54:02,380 --> 01:54:09,569
what's wrong with our light equation the

1999
01:54:05,979 --> 01:54:11,949
length light P minus world P situation

2000
01:54:09,569 --> 01:54:16,149
so what I should be able to do is take

2001
01:54:11,949 --> 01:54:19,989
the emission here as we were doing it

2002
01:54:16,149 --> 01:54:21,129
before with the emission RGB emit spread

2003
01:54:19,989 --> 01:54:23,260
that's happening here

2004
01:54:21,130 --> 01:54:25,930
I should be able to take this length

2005
01:54:23,260 --> 01:54:33,480
light P minus world B that should be

2006
01:54:25,930 --> 01:54:33,480
working and I don't know why it's not so

2007
01:54:49,170 --> 01:54:53,770
so previously we were definitely using

2008
01:54:51,970 --> 01:54:55,600
light P and world P and we were

2009
01:54:53,770 --> 01:54:57,490
subtracting the two to determine what

2010
01:54:55,600 --> 01:54:59,260
was going on so it does seem kind of

2011
01:54:57,489 --> 01:55:01,090
strange but I can't subtract them now

2012
01:54:59,260 --> 01:55:03,400
and get what should be basic it's a

2013
01:55:01,090 --> 01:55:08,590
circle right

2014
01:55:03,399 --> 01:55:12,759
I can widen this out to something very

2015
01:55:08,590 --> 01:55:22,210
large and see if that makes any

2016
01:55:12,760 --> 01:55:30,579
difference and it does so that's kind of

2017
01:55:22,210 --> 01:55:36,250
weird so somehow the length of that

2018
01:55:30,579 --> 01:55:39,369
being less than 1 is insufficient oh you

2019
01:55:36,250 --> 01:55:41,260
know why because it's above the head so

2020
01:55:39,369 --> 01:55:45,579
it's got a it's like a light that's

2021
01:55:41,260 --> 01:55:47,500
gotta kind of be I see it's a lightness

2022
01:55:45,579 --> 01:55:50,859
of sphere and the sphere was hovering a

2023
01:55:47,500 --> 01:55:52,569
little too high okay so at least now

2024
01:55:50,859 --> 01:55:54,250
we've got a sphere of life that's

2025
01:55:52,569 --> 01:55:57,549
basically just anything that's in that

2026
01:55:54,250 --> 01:56:01,180
side that sphere gets set to a lighting

2027
01:55:57,550 --> 01:56:05,050
value which is what I wanted okay so now

2028
01:56:01,180 --> 01:56:10,869
I should be able to stop cheating stop

2029
01:56:05,050 --> 01:56:15,340
moving that over unnecessarily here for

2030
01:56:10,869 --> 01:56:18,729
their surface reflect and now we should

2031
01:56:15,340 --> 01:56:26,730
be rendering to all of those places and

2032
01:56:18,729 --> 01:56:32,739
if I go down and look now when I do come

2033
01:56:26,729 --> 01:56:36,279
the transport light here we are when I

2034
01:56:32,739 --> 01:56:38,609
do this letting transport if now I will

2035
01:56:36,279 --> 01:56:42,189
actually guess I should turn it on first

2036
01:56:38,609 --> 01:56:45,119
if now I look at what happens for that

2037
01:56:42,189 --> 01:56:49,539
as the input I should be able to see

2038
01:56:45,119 --> 01:56:51,760
yeah as I go up I get a blurry version

2039
01:56:49,539 --> 01:56:52,229
of the actual light that's coming out

2040
01:56:51,760 --> 01:56:58,140
from the

2041
01:56:52,229 --> 01:57:01,619
game right as you can see there so now I

2042
01:56:58,140 --> 01:57:06,660
should be able to also turn back on the

2043
01:57:01,619 --> 01:57:10,199
light transport down like so and now I

2044
01:57:06,659 --> 01:57:16,979
should be able to see yeah essentially

2045
01:57:10,199 --> 01:57:19,050
like glowy here oh right so yeah like

2046
01:57:16,979 --> 01:57:23,039
you can see I'll go to the Q&amp;A now

2047
01:57:19,050 --> 01:57:25,020
definitely making a progress here this

2048
01:57:23,039 --> 01:57:26,369
is the way graphics programming tends to

2049
01:57:25,020 --> 01:57:28,200
go you know when you're working with

2050
01:57:26,369 --> 01:57:31,019
GPUs you can I got to go slowly through

2051
01:57:28,199 --> 01:57:33,059
it and it takes a while to get things

2052
01:57:31,020 --> 01:57:36,060
all sorted out because of the incredible

2053
01:57:33,060 --> 01:57:38,280
amount of busy work the programming

2054
01:57:36,060 --> 01:57:40,110
paradigm for GPU is just easy good

2055
01:57:38,279 --> 01:57:42,929
there's not a lot of other ways you can

2056
01:57:40,109 --> 01:57:44,429
say it it requires the programmer to do

2057
01:57:42,930 --> 01:57:47,430
a lot of stupid work that's not

2058
01:57:44,430 --> 01:57:50,430
necessary and that's just the way it

2059
01:57:47,430 --> 01:57:51,840
goes but you know the reward for doing

2060
01:57:50,430 --> 01:57:53,850
it is nice because you have all this

2061
01:57:51,840 --> 01:57:56,670
extra horsepower all these extra flops

2062
01:57:53,850 --> 01:58:00,420
you can take advantage of which is which

2063
01:57:56,670 --> 01:58:03,810
is pretty cool right so we're getting

2064
01:58:00,420 --> 01:58:07,920
there so what we have to do like I said

2065
01:58:03,810 --> 01:58:10,440
as we kind of go further forward here is

2066
01:58:07,920 --> 01:58:16,500
we just have to sort of take it one step

2067
01:58:10,439 --> 01:58:18,829
at a time and make sure we verify

2068
01:58:16,500 --> 01:58:21,149
results from each stage to each stage

2069
01:58:18,829 --> 01:58:23,250
when we're done with getting the

2070
01:58:21,149 --> 01:58:24,420
transfer over which we mostly done we

2071
01:58:23,250 --> 01:58:28,649
just need one more shader which

2072
01:58:24,420 --> 01:58:31,319
transfers those game output textures to

2073
01:58:28,649 --> 01:58:34,259
inputs for front back surface and NP

2074
01:58:31,319 --> 01:58:36,179
Tech by doing the translation over once

2075
01:58:34,260 --> 01:58:38,940
we move that over we're in position to

2076
01:58:36,180 --> 01:58:40,619
start iterating on our lighting solution

2077
01:58:38,939 --> 01:58:41,969
which again is going to take a while

2078
01:58:40,619 --> 01:58:43,550
because we kind of need to figure out

2079
01:58:41,970 --> 01:58:47,210
how to do a bunch of stuff in there

2080
01:58:43,550 --> 01:58:51,270
using a lot of approximated hacks right

2081
01:58:47,210 --> 01:58:53,730
but then we're great because we have the

2082
01:58:51,270 --> 01:58:56,130
complete conduit going through the

2083
01:58:53,729 --> 01:58:57,839
system so now we can get data from the

2084
01:58:56,130 --> 01:59:00,150
game into the lighting system which is

2085
01:58:57,840 --> 01:59:02,250
what we need and we can do it in an

2086
01:59:00,149 --> 01:59:04,549
arbitrary way so we can have any sprites

2087
01:59:02,250 --> 01:59:06,729
that we want light up which is nice

2088
01:59:04,550 --> 01:59:06,730
right

2089
01:59:24,829 --> 01:59:29,819
midlow asks we can set the spread of the

2090
01:59:27,630 --> 01:59:33,980
emitter but we can also but can we also

2091
01:59:29,819 --> 01:59:42,000
set the direction of the spread yes so

2092
01:59:33,979 --> 01:59:43,769
the the idea is that we have two pieces

2093
01:59:42,000 --> 01:59:46,710
of information coming out of the render

2094
01:59:43,770 --> 01:59:48,960
we have the normal of the sprite like

2095
01:59:46,710 --> 01:59:53,539
whichever way the sprite was facing

2096
01:59:48,960 --> 01:59:59,880
right we have that piece of information

2097
01:59:53,539 --> 02:00:03,319
and right now we are rendering just the

2098
01:59:59,880 --> 02:00:06,840
direction the actual sprite is facing

2099
02:00:03,319 --> 02:00:10,049
that may not be what we actually want to

2100
02:00:06,840 --> 02:00:12,270
save for the direction of the emitter we

2101
02:00:10,050 --> 02:00:16,440
may want to be able to specify a false

2102
02:00:12,270 --> 02:00:19,980
emitter right so basically like if we

2103
02:00:16,439 --> 02:00:22,589
were rendering a sprite and we wanted to

2104
02:00:19,979 --> 02:00:26,059
say like yeah the sprite is facing this

2105
02:00:22,590 --> 02:00:28,920
way but it's actually emitting that way

2106
02:00:26,060 --> 02:00:32,730
we could specify a different normal for

2107
02:00:28,920 --> 02:00:35,100
the emission perm right and the way that

2108
02:00:32,729 --> 02:00:37,079
we would do this is just by recognizing

2109
02:00:35,100 --> 02:00:39,150
that the emission thing the part where

2110
02:00:37,079 --> 02:00:41,100
the light is emitting we don't really

2111
02:00:39,149 --> 02:00:43,019
care about the reflectance so we can

2112
02:00:41,100 --> 02:00:45,270
just render two sprites the emitter

2113
02:00:43,020 --> 02:00:52,650
sprite which has a fake normal that we

2114
02:00:45,270 --> 02:00:54,930
set and then because I guess the other

2115
02:00:52,649 --> 02:00:57,359
part to remember is remember that the

2116
02:00:54,930 --> 02:01:00,600
normal is not used for any rendering

2117
02:00:57,359 --> 02:01:03,479
operation whatsoever right the normal is

2118
02:01:00,600 --> 02:01:05,670
not computed from the actual polygon

2119
02:01:03,479 --> 02:01:08,819
it's just an additional value that we

2120
02:01:05,670 --> 02:01:11,579
send down so when we render lights we

2121
02:01:08,819 --> 02:01:14,279
can render lights with a direction that

2122
02:01:11,579 --> 02:01:16,380
is has nothing to do with anything right

2123
02:01:14,279 --> 02:01:18,989
this if they're a sprite card with the

2124
02:01:16,380 --> 02:01:21,300
light on it that's a particular pattern

2125
02:01:18,989 --> 02:01:25,340
we can set what direction that is facing

2126
02:01:21,300 --> 02:01:25,340
right and it will work just fine

2127
02:01:32,039 --> 02:01:36,699
Valis why not doing a marathon screaming

2128
02:01:35,079 --> 02:01:38,619
lighting maybe if doing so will be more

2129
02:01:36,699 --> 02:01:39,939
productive as you remember what hack you

2130
02:01:38,619 --> 02:01:42,010
have done and maybe forgot the next

2131
02:01:39,939 --> 02:01:44,229
weekend yeah we definitely could do that

2132
02:01:42,010 --> 02:01:45,520
when we're ready to really hit the

2133
02:01:44,229 --> 02:01:47,589
lighting hard so when this whole

2134
02:01:45,520 --> 02:01:49,870
pipeline is working properly and we have

2135
02:01:47,590 --> 02:01:51,640
some lighting because like next weekend

2136
02:01:49,869 --> 02:01:54,699
we'll have actual lighting working in

2137
02:01:51,640 --> 02:01:57,010
the sense that it'll be wrong but we'll

2138
02:01:54,699 --> 02:01:59,220
see it in the game and playing off of

2139
02:01:57,010 --> 02:02:01,630
surfaces and whatever totally wrongly

2140
02:01:59,220 --> 02:02:03,730
when we then go to sort of okay now

2141
02:02:01,630 --> 02:02:06,310
we've really got to work out you know

2142
02:02:03,729 --> 02:02:09,759
experiment with different ways of

2143
02:02:06,310 --> 02:02:11,500
transporting this light around and how

2144
02:02:09,760 --> 02:02:13,600
we do our iterations and who writes to

2145
02:02:11,500 --> 02:02:15,779
what and whether we do you know what are

2146
02:02:13,600 --> 02:02:18,760
the values we actually propagate around

2147
02:02:15,779 --> 02:02:21,369
do we try to use spherical harmonics for

2148
02:02:18,760 --> 02:02:22,900
transfer do we try to do emitter

2149
02:02:21,369 --> 02:02:27,069
directions for transfer like we're doing

2150
02:02:22,899 --> 02:02:28,869
a blah blah blah as we sort of work on

2151
02:02:27,069 --> 02:02:31,559
that part it might make sense to do

2152
02:02:28,869 --> 02:02:31,559
longer streams

2153
02:02:44,779 --> 02:02:49,229
Napolean 89 don't know if this is the

2154
02:02:47,159 --> 02:02:51,329
right place with your assert macro it

2155
02:02:49,229 --> 02:02:54,750
could currently cause bugs if you place

2156
02:02:51,329 --> 02:02:58,229
it inside and if else that doesn't use

2157
02:02:54,750 --> 02:03:02,850
curly braces adding an elf to this macro

2158
02:02:58,229 --> 02:03:05,579
could solve this yeah I don't really

2159
02:03:02,850 --> 02:03:10,200
allow for lack of a better term

2160
02:03:05,579 --> 02:03:11,640
if Elsa's without brackets if there's an

2161
02:03:10,199 --> 02:03:13,920
if-else in my code that doesn't have

2162
02:03:11,640 --> 02:03:16,260
brackets that's that's a bug in my

2163
02:03:13,920 --> 02:03:18,720
opinion right like I would prefer the

2164
02:03:16,260 --> 02:03:21,690
compiler just told me like I would

2165
02:03:18,720 --> 02:03:25,409
prefer that compiler require brackets I

2166
02:03:21,689 --> 02:03:27,929
would turn that on because I don't think

2167
02:03:25,409 --> 02:03:31,139
the syntax and see for if-else is very

2168
02:03:27,930 --> 02:03:35,039
good and as a result it you know it

2169
02:03:31,140 --> 02:03:37,380
produces bad problems of the forum that

2170
02:03:35,039 --> 02:03:39,720
you talk about right where you know it's

2171
02:03:37,380 --> 02:03:43,500
ambiguous to the compiler they probably

2172
02:03:39,720 --> 02:03:46,680
might not be able to figure out what you

2173
02:03:43,500 --> 02:03:50,279
were trying to do as for the bug that

2174
02:03:46,680 --> 02:03:54,539
you're talking about inside and if else

2175
02:03:50,279 --> 02:03:55,920
that doesn't use curly braces then yeah

2176
02:03:54,539 --> 02:03:58,439
again you would end up with the

2177
02:03:55,920 --> 02:04:00,149
ambiguous the hanging else problem but I

2178
02:03:58,439 --> 02:04:01,649
don't allow that in the code so I don't

2179
02:04:00,149 --> 02:04:03,619
usually think about that or care about

2180
02:04:01,649 --> 02:04:06,029
that that make sense

2181
02:04:03,619 --> 02:04:07,800
psycho maniac TV I have been looking

2182
02:04:06,029 --> 02:04:09,779
into compression schemes for skeletal

2183
02:04:07,800 --> 02:04:11,460
animation data currently I have only

2184
02:04:09,779 --> 02:04:13,380
implemented basic quantization but I

2185
02:04:11,460 --> 02:04:14,850
would like to add Kerr fitting to the

2186
02:04:13,380 --> 02:04:17,310
mix could you give me some pointers on

2187
02:04:14,850 --> 02:04:18,930
this if I were to use Catmull ROM

2188
02:04:17,310 --> 02:04:20,970
splines what are some methods on

2189
02:04:18,930 --> 02:04:23,550
estimating the error of the segment and

2190
02:04:20,970 --> 02:04:29,220
finding a good split point how could I

2191
02:04:23,550 --> 02:04:35,310
apply this stuff to quaternions you see

2192
02:04:29,220 --> 02:04:39,360
if there's any questions on the on the

2193
02:04:35,310 --> 02:04:41,070
actual episode first do you plan to

2194
02:04:39,359 --> 02:04:44,549
allow sprite to use emit textures that

2195
02:04:41,069 --> 02:04:50,429
could for example make eyes glow yeah so

2196
02:04:44,550 --> 02:04:54,840
the idea would just be that anytime you

2197
02:04:50,430 --> 02:04:55,739
wanted to have emission in the artwork

2198
02:04:54,840 --> 02:04:58,469
you

2199
02:04:55,738 --> 02:05:01,819
just render an omission sprite with that

2200
02:04:58,469 --> 02:05:06,649
pattern and it would glow and cast light

2201
02:05:01,819 --> 02:05:09,658
I don't know that that will be achieved

2202
02:05:06,649 --> 02:05:14,479
but that's like what we're trying right

2203
02:05:09,658 --> 02:05:14,479
and we'll see how well we do

2204
02:05:22,569 --> 02:05:30,519
uh who says 42 alternative if-else

2205
02:05:27,130 --> 02:05:32,350
syntax uh well the alternative FL syntax

2206
02:05:30,520 --> 02:05:34,360
in my opinion just requiring brackets

2207
02:05:32,350 --> 02:05:40,510
right

2208
02:05:34,359 --> 02:05:43,119
I feel like brackets should be required

2209
02:05:40,510 --> 02:05:46,900
for that because they're the only thing

2210
02:05:43,119 --> 02:05:50,619
that makes it clear what is the body of

2211
02:05:46,899 --> 02:05:54,670
something like I feel like there should

2212
02:05:50,619 --> 02:05:59,109
always have been the notion that control

2213
02:05:54,670 --> 02:06:01,480
blocks have to take a block not a

2214
02:05:59,109 --> 02:06:07,089
statement is what I would have said

2215
02:06:01,479 --> 02:06:10,299
right it's two extra characters you know

2216
02:06:07,090 --> 02:06:13,690
I don't it doesn't add a significant

2217
02:06:10,300 --> 02:06:15,579
amount of typing like I don't like extra

2218
02:06:13,689 --> 02:06:19,509
typing certainly so I understand why

2219
02:06:15,579 --> 02:06:21,909
people wouldn't want a lot of extra

2220
02:06:19,510 --> 02:06:24,579
typing in there but it's two extra

2221
02:06:21,909 --> 02:06:28,989
characters I just don't see that as

2222
02:06:24,579 --> 02:06:31,119
being saving those two characters and in

2223
02:06:28,989 --> 02:06:34,960
return getting this really bad ambiguous

2224
02:06:31,119 --> 02:06:37,109
syntax just doesn't seem like a win you

2225
02:06:34,960 --> 02:06:37,109
know

2226
02:06:49,479 --> 02:06:55,639
now shota says about the NX NY lp0

2227
02:06:53,059 --> 02:06:58,340
LP one texture is a 16-bit texture worse

2228
02:06:55,639 --> 02:07:00,800
than a 32-bit texture in any way I felt

2229
02:06:58,340 --> 02:07:02,119
like you added LP 0 and LP 1 just

2230
02:07:00,800 --> 02:07:03,829
because it wouldn't make much of a

2231
02:07:02,118 --> 02:07:09,978
difference performance wise is that true

2232
02:07:03,828 --> 02:07:13,219
no it's not true performance wise I do

2233
02:07:09,979 --> 02:07:14,929
think RGB a and RGB or probably

2234
02:07:13,219 --> 02:07:17,779
preferred memory unpack lines but I

2235
02:07:14,929 --> 02:07:20,059
suspect RG is fine now as well like I

2236
02:07:17,779 --> 02:07:21,858
don't know I've never really played with

2237
02:07:20,059 --> 02:07:25,729
that but I would suspect that RG is

2238
02:07:21,859 --> 02:07:27,800
faster than RGB or RGB a because it's

2239
02:07:25,729 --> 02:07:29,300
just less bandwidth so I don't think

2240
02:07:27,800 --> 02:07:30,918
that it's just what I was looking at

2241
02:07:29,300 --> 02:07:33,498
that I was like well I could treat these

2242
02:07:30,918 --> 02:07:34,849
as for uniform textures that are three

2243
02:07:33,498 --> 02:07:36,800
uniform types that are all exactly the

2244
02:07:34,849 --> 02:07:38,899
same and when I thought about that I was

2245
02:07:36,800 --> 02:07:40,788
like that's got a knife it makes the

2246
02:07:38,899 --> 02:07:43,550
code a little bit easier to deal with on

2247
02:07:40,788 --> 02:07:47,179
the outside and so what I thought of in

2248
02:07:43,550 --> 02:07:49,788
my head was do I think I'll need extra

2249
02:07:47,179 --> 02:07:51,949
space or should I bother cuz I don't

2250
02:07:49,788 --> 02:07:53,840
want to prematurely clip it down and

2251
02:07:51,948 --> 02:07:55,578
then end up going oh wait I actually

2252
02:07:53,840 --> 02:07:57,769
needed more perms anyway and so what I

2253
02:07:55,578 --> 02:08:00,408
thought was well we're probably going to

2254
02:07:57,769 --> 02:08:05,780
want to specify some parameters for

2255
02:08:00,408 --> 02:08:08,448
lighting here because for example if we

2256
02:08:05,779 --> 02:08:11,478
do have any kind of ability to have

2257
02:08:08,448 --> 02:08:13,279
glossy versus diffuse surfaces I'm going

2258
02:08:11,479 --> 02:08:16,820
to need at least one more parameter for

2259
02:08:13,279 --> 02:08:18,768
that and then if we decided to do some

2260
02:08:16,819 --> 02:08:20,748
other kind of encoding like supposing

2261
02:08:18,769 --> 02:08:24,829
that we instead of storing the emission

2262
02:08:20,748 --> 02:08:27,168
we just stored like they we get rid of

2263
02:08:24,828 --> 02:08:29,268
that emission texture and just instead

2264
02:08:27,168 --> 02:08:32,269
store either surface reflectance or

2265
02:08:29,269 --> 02:08:36,889
immittance and we set another parameter

2266
02:08:32,269 --> 02:08:40,340
to say the immittance amount then that

2267
02:08:36,889 --> 02:08:41,809
would be to four wide textures which

2268
02:08:40,340 --> 02:08:43,309
maybe is the better way to go now I

2269
02:08:41,809 --> 02:08:51,199
think about it I don't think about that

2270
02:08:43,309 --> 02:08:53,590
ahead of time in fact that seems a lot

2271
02:08:51,198 --> 02:08:53,589
smarter

2272
02:08:56,939 --> 02:09:19,779
why didn't we do that so I feel like

2273
02:09:11,680 --> 02:09:25,329
that's actually a lot smarter if we just

2274
02:09:19,779 --> 02:09:31,689
stored NPL here and it was like emission

2275
02:09:25,329 --> 02:09:34,079
and specular and I guess we wouldn't

2276
02:09:31,689 --> 02:09:36,909
have any place to put the spread amount

2277
02:09:34,079 --> 02:09:41,859
but we could say that everything is in

2278
02:09:36,909 --> 02:09:43,630
just generally within I don't know I'll

2279
02:09:41,859 --> 02:10:10,359
leave it like this for now but I feel

2280
02:09:43,630 --> 02:10:12,430
like that so we should think about that

2281
02:10:10,359 --> 02:10:16,089
a little bit because we could get rid of

2282
02:10:12,430 --> 02:10:17,740
a whole texture at that point because if

2283
02:10:16,090 --> 02:10:19,960
we assume that surfaces are just always

2284
02:10:17,739 --> 02:10:23,439
one color and then they emit a certain

2285
02:10:19,960 --> 02:10:25,630
amount I feel like that is probably the

2286
02:10:23,439 --> 02:10:27,159
better way to go because then we don't

2287
02:10:25,630 --> 02:10:30,690
have to write to an entire other texture

2288
02:10:27,159 --> 02:10:30,689
which probably isn't really necessary

2289
02:10:36,079 --> 02:10:40,039
Alex killed the off topic I'm playing

2290
02:10:38,569 --> 02:10:42,349
with the debug cycle counters is there a

2291
02:10:40,039 --> 02:10:44,029
way to find out how long Windows puts

2292
02:10:42,350 --> 02:10:47,300
our process to sleep I'm missing

2293
02:10:44,029 --> 02:10:50,000
millions of cycles in my main loop yes

2294
02:10:47,300 --> 02:10:59,449
you can figure that out but it is

2295
02:10:50,000 --> 02:11:02,350
incredibly incredibly difficult so so if

2296
02:10:59,449 --> 02:11:05,479
you search for the worst API ever made

2297
02:11:02,350 --> 02:11:07,490
you will get a blog entry by me where I

2298
02:11:05,479 --> 02:11:10,609
talk about the way you can get this

2299
02:11:07,489 --> 02:11:13,159
information from windows I highly

2300
02:11:10,609 --> 02:11:14,599
recommend not doing it the reason I

2301
02:11:13,159 --> 02:11:19,309
highly recommend not doing it is because

2302
02:11:14,600 --> 02:11:21,079
it is the worst API ever made and so the

2303
02:11:19,310 --> 02:11:25,300
chances that you will even get it

2304
02:11:21,079 --> 02:11:25,300
working a little bit are is like zero

2305
02:11:27,250 --> 02:11:36,439
it's not just a bad API it's not just a

2306
02:11:33,050 --> 02:11:39,350
horrible API it's literally so

2307
02:11:36,439 --> 02:11:42,799
incredibly terrible that I literally

2308
02:11:39,350 --> 02:11:43,700
cannot imagine the thought process that

2309
02:11:42,800 --> 02:11:52,159
arrived at it

2310
02:11:43,699 --> 02:11:57,880
I cannot even I have no idea how someone

2311
02:11:52,159 --> 02:11:57,880
who could create such a thing actually

2312
02:11:58,090 --> 02:12:05,119
thinks about programming in their head

2313
02:12:00,500 --> 02:12:09,319
it's so foreign to me it's like I just I

2314
02:12:05,119 --> 02:12:14,479
can't even buy it's a dumbstruck when I

2315
02:12:09,319 --> 02:12:16,159
look at it so unfortunately even though

2316
02:12:14,479 --> 02:12:17,329
that data should be incredibly easy to

2317
02:12:16,159 --> 02:12:19,369
get the data that you're asking for

2318
02:12:17,329 --> 02:12:22,069
should be a trivial one function call to

2319
02:12:19,369 --> 02:12:25,149
Windows something like give me my

2320
02:12:22,069 --> 02:12:29,299
process sleep history buffer please and

2321
02:12:25,149 --> 02:12:31,219
you look at it it is instead literally

2322
02:12:29,300 --> 02:12:33,440
hundreds of API calls that are

2323
02:12:31,220 --> 02:12:35,659
incredibly obtuse very difficult to get

2324
02:12:33,439 --> 02:12:39,619
working require administrator privilege

2325
02:12:35,659 --> 02:12:41,779
and are globally required to be set

2326
02:12:39,619 --> 02:12:46,869
uniformly across the entire system just

2327
02:12:41,779 --> 02:12:46,869
to use it's insane

2328
02:12:54,899 --> 02:13:00,779
i wmb oh how do you define a good API

2329
02:12:58,409 --> 02:13:03,239
and a bad API or do you have examples of

2330
02:13:00,779 --> 02:13:05,309
very good ap is the definition of a good

2331
02:13:03,239 --> 02:13:09,179
API versus about API actually isn't as

2332
02:13:05,310 --> 02:13:13,610
hard as you would think a good API is an

2333
02:13:09,180 --> 02:13:15,600
API which has a number of API calls

2334
02:13:13,609 --> 02:13:19,159
proportional to the number of things you

2335
02:13:15,600 --> 02:13:23,670
were trying to do generally speaking and

2336
02:13:19,159 --> 02:13:24,750
does them efficiently write a bad API is

2337
02:13:23,670 --> 02:13:28,380
the opposite of that

2338
02:13:24,750 --> 02:13:31,649
in either case right so for example with

2339
02:13:28,380 --> 02:13:35,390
event tracing for Windows that API

2340
02:13:31,649 --> 02:13:38,969
should be roughly to call long probably

2341
02:13:35,390 --> 02:13:41,730
the first call would pass for example an

2342
02:13:38,970 --> 02:13:43,800
array or a series of flags ever you

2343
02:13:41,729 --> 02:13:47,189
wanted it which are the events that you

2344
02:13:43,800 --> 02:13:49,070
wanted to trace so it'd be like

2345
02:13:47,189 --> 02:13:52,619
beginning trace here are the flags and

2346
02:13:49,069 --> 02:13:55,289
then the second call bien tres here is a

2347
02:13:52,619 --> 02:13:56,939
buffer to put them into or end trace

2348
02:13:55,289 --> 02:14:00,199
give me a buffer back and then there's

2349
02:13:56,939 --> 02:14:04,589
one more API to free it either way right

2350
02:14:00,199 --> 02:14:07,679
this would be foolproof you know almost

2351
02:14:04,590 --> 02:14:09,390
nobody could mess that up it's trivial

2352
02:14:07,680 --> 02:14:12,510
to learn requires almost no

2353
02:14:09,390 --> 02:14:22,440
documentation very very straightforward

2354
02:14:12,510 --> 02:14:26,850
right instead what they decided to do

2355
02:14:22,439 --> 02:14:29,729
was first and you know I one of the

2356
02:14:26,850 --> 02:14:31,650
things I did was I show at the top of

2357
02:14:29,729 --> 02:14:34,979
this what it should probably look like

2358
02:14:31,649 --> 02:14:36,929
right I was like if you were just going

2359
02:14:34,979 --> 02:14:40,139
to implement this the dumbest way

2360
02:14:36,930 --> 02:14:42,420
possible and you know you weren't trying

2361
02:14:40,140 --> 02:14:44,070
to be even remotely clever with the API

2362
02:14:42,420 --> 02:14:45,630
you just sat down and did the first

2363
02:14:44,069 --> 02:14:49,340
thing that the average programmer should

2364
02:14:45,630 --> 02:14:53,789
probably think of this is the code right

2365
02:14:49,340 --> 02:14:55,949
and here is the API so I specified what

2366
02:14:53,789 --> 02:14:57,359
a good API would look like and again by

2367
02:14:55,949 --> 02:14:59,159
good in this case I'm not even saying

2368
02:14:57,359 --> 02:15:02,189
exceptionally good I'm just saying this

2369
02:14:59,159 --> 02:15:04,889
is just the basic thing that just has

2370
02:15:02,189 --> 02:15:06,819
the stuff the programmer does it's like

2371
02:15:04,890 --> 02:15:08,710
they begin a trace

2372
02:15:06,819 --> 02:15:11,199
they end at race and they get events

2373
02:15:08,710 --> 02:15:15,130
from the Tres that's what they do so

2374
02:15:11,199 --> 02:15:17,050
that's the ATI right and then I

2375
02:15:15,130 --> 02:15:18,550
sissified what some more complicated

2376
02:15:17,050 --> 02:15:22,000
versions would look like if you were

2377
02:15:18,550 --> 02:15:23,980
trying to do something fancier and then

2378
02:15:22,000 --> 02:15:26,109
I also said well if you wanted to have

2379
02:15:23,979 --> 02:15:27,669
other retrieval methods so I said let's

2380
02:15:26,109 --> 02:15:29,529
get more complicated how complicated

2381
02:15:27,670 --> 02:15:32,289
could it get at this point you're kind

2382
02:15:29,529 --> 02:15:34,029
of out of ideas like when you're sort of

2383
02:15:32,289 --> 02:15:35,079
get to here you're like I don't know how

2384
02:15:34,029 --> 02:15:39,189
it would make this any more complicated

2385
02:15:35,079 --> 02:15:41,949
this problem is so simple I don't know

2386
02:15:39,189 --> 02:15:44,409
how to make it more complicated like it

2387
02:15:41,949 --> 02:15:46,119
it's basically mem copy like I think

2388
02:15:44,409 --> 02:15:48,819
like they're it's like designing the API

2389
02:15:46,119 --> 02:15:50,829
for mem copy yeah you can sort of start

2390
02:15:48,819 --> 02:15:52,659
to make it more complicated but how

2391
02:15:50,829 --> 02:15:55,659
complicated can you really get with the

2392
02:15:52,659 --> 02:15:58,720
mem copy and the answer is they came up

2393
02:15:55,659 --> 02:16:01,510
with whole new ways so for example they

2394
02:15:58,720 --> 02:16:03,400
came up with a way that in order to get

2395
02:16:01,510 --> 02:16:07,150
a trace on Windows you have to create a

2396
02:16:03,399 --> 02:16:09,489
thread I'm not kidding you can't get a

2397
02:16:07,149 --> 02:16:12,609
trace without creating a separate thread

2398
02:16:09,489 --> 02:16:15,819
first how do you get from give me a

2399
02:16:12,609 --> 02:16:21,779
buffer of events which is so simple to

2400
02:16:15,819 --> 02:16:24,939
us to create a thread right I don't know

2401
02:16:21,779 --> 02:16:27,699
they did it they say man they made it

2402
02:16:24,939 --> 02:16:29,319
happen right at Microsoft nothing is

2403
02:16:27,699 --> 02:16:31,329
impossible they're like we could we can

2404
02:16:29,319 --> 02:16:33,550
do it I know we can take an API that's

2405
02:16:31,329 --> 02:16:36,760
essentially mem copy and require the

2406
02:16:33,550 --> 02:16:38,019
user to make a thread right so I'd

2407
02:16:36,760 --> 02:16:39,850
encourage you to look through this and

2408
02:16:38,020 --> 02:16:43,329
just see what I'm talking about it's

2409
02:16:39,850 --> 02:16:45,700
nuts you know you've got to specify all

2410
02:16:43,329 --> 02:16:47,649
these quids in here and you've got to

2411
02:16:45,700 --> 02:16:49,270
set all this stuff up you've got to

2412
02:16:47,649 --> 02:16:51,670
include a whole ton of header files

2413
02:16:49,270 --> 02:16:53,319
right so instead of just including one

2414
02:16:51,670 --> 02:16:55,780
header file it's like here's the tracing

2415
02:16:53,319 --> 02:16:58,600
functions right you've got a call start

2416
02:16:55,780 --> 02:17:03,100
trace and you've got to call this this

2417
02:16:58,600 --> 02:17:05,590
start trace thing in some weird way that

2418
02:17:03,100 --> 02:17:09,040
I forget what it is you can't do it this

2419
02:17:05,590 --> 02:17:13,090
way you have to create a buffer that you

2420
02:17:09,040 --> 02:17:15,160
malloc to put the name in I because you

2421
02:17:13,090 --> 02:17:18,460
need to name it something and the name

2422
02:17:15,159 --> 02:17:19,529
has to be in some kind of permanent I

2423
02:17:18,459 --> 02:17:21,539
don't even remember

2424
02:17:19,529 --> 02:17:23,760
the name has to be attached to the end

2425
02:17:21,540 --> 02:17:25,529
of the struct that you pass in so

2426
02:17:23,760 --> 02:17:28,109
instead of passing the struct and the

2427
02:17:25,529 --> 02:17:29,939
name separately you have to concatenate

2428
02:17:28,109 --> 02:17:32,429
them together first by allocating a

2429
02:17:29,939 --> 02:17:34,019
thing copying the name into the offset

2430
02:17:32,429 --> 02:17:36,179
buffer which they don't give you any

2431
02:17:34,019 --> 02:17:37,079
utility functions for so you have to do

2432
02:17:36,179 --> 02:17:39,148
it

2433
02:17:37,079 --> 02:17:42,299
you then have to make these control

2434
02:17:39,148 --> 02:17:45,568
calls and then copy the name in using a

2435
02:17:42,299 --> 02:17:47,188
different thing in a separate place so

2436
02:17:45,568 --> 02:17:48,000
it has to be there and it also has to be

2437
02:17:47,189 --> 02:17:49,738
here

2438
02:17:48,000 --> 02:17:51,238
you then have to open the trace because

2439
02:17:49,738 --> 02:17:54,179
starting the trace and opening a trace

2440
02:17:51,238 --> 02:17:55,468
or different things you haven't you

2441
02:17:54,179 --> 02:17:57,450
could see like all these things are just

2442
02:17:55,468 --> 02:18:00,209
building up on top of each other you

2443
02:17:57,450 --> 02:18:02,639
have to set a bunch of things in this

2444
02:18:00,209 --> 02:18:05,518
structure to like point to callbacks

2445
02:18:02,638 --> 02:18:07,858
that are going to happen when it goes

2446
02:18:05,519 --> 02:18:09,840
and then you can open it and then you've

2447
02:18:07,859 --> 02:18:12,568
got a thread callback where it's going

2448
02:18:09,840 --> 02:18:14,519
to calling you back you have to do that

2449
02:18:12,568 --> 02:18:16,920
on the on a separate thread because it's

2450
02:18:14,519 --> 02:18:18,750
going to then lock up that thread just

2451
02:18:16,920 --> 02:18:20,488
sitting there waiting to call this

2452
02:18:18,750 --> 02:18:24,510
callback it's going to call this

2453
02:18:20,488 --> 02:18:28,340
callback you can't actually get the

2454
02:18:24,510 --> 02:18:31,019
callback unless you call process trace

2455
02:18:28,340 --> 02:18:34,409
I'm forgetting a bunch of these things

2456
02:18:31,019 --> 02:18:37,318
but like that's roughly how they mean at

2457
02:18:34,409 --> 02:18:40,079
work and it's just nuts you know what I

2458
02:18:37,318 --> 02:18:43,318
mean like it's like it's so far away

2459
02:18:40,079 --> 02:18:45,209
from anything that should ever happen in

2460
02:18:43,318 --> 02:18:47,488
an organization shipping an API that I

2461
02:18:45,209 --> 02:18:50,638
just I can't even imagine how they got

2462
02:18:47,488 --> 02:18:54,529
to it it's got to be really special I

2463
02:18:50,638 --> 02:18:57,358
love for someone to have done the like

2464
02:18:54,529 --> 02:19:00,179
archeology on the series of check-ins

2465
02:18:57,359 --> 02:19:03,899
that led up to that being released as an

2466
02:19:00,179 --> 02:19:08,219
API because I'd love to see how it grew

2467
02:19:03,898 --> 02:19:09,808
to be that thing right because you know

2468
02:19:08,218 --> 02:19:11,579
there's got to be a lineage there you

2469
02:19:09,808 --> 02:19:14,488
don't just sit down and write that I

2470
02:19:11,579 --> 02:19:19,620
hope as your API right like you have

2471
02:19:14,488 --> 02:19:21,750
some sort of serious thing but if you

2472
02:19:19,620 --> 02:19:23,639
want to try and get that API working and

2473
02:19:21,750 --> 02:19:25,679
heaven help you if you do but if you

2474
02:19:23,638 --> 02:19:29,728
want to that is the only way at least

2475
02:19:25,679 --> 02:19:32,909
that I know of that's how you get the

2476
02:19:29,728 --> 02:19:35,129
information out of windows as to when it

2477
02:19:32,909 --> 02:19:37,350
put your tasks to sleep so if you're

2478
02:19:35,129 --> 02:19:41,099
trying to determine when you got

2479
02:19:37,350 --> 02:19:44,520
switched away that is the only way I

2480
02:19:41,100 --> 02:19:48,630
know of to do it now if you just want to

2481
02:19:44,520 --> 02:19:52,260
know how many total cycles you did you

2482
02:19:48,629 --> 02:19:54,119
got slept there maybe some way to do

2483
02:19:52,260 --> 02:19:56,250
that I'm not sure like you may be able

2484
02:19:54,120 --> 02:19:59,180
to query a performance counter of some

2485
02:19:56,250 --> 02:20:02,280
kind that will tell you just that

2486
02:19:59,180 --> 02:20:04,829
information and by dipping the two you

2487
02:20:02,280 --> 02:20:06,570
could get just the cycles back but you

2488
02:20:04,829 --> 02:20:08,760
wouldn't necessarily I don't know if

2489
02:20:06,569 --> 02:20:12,659
you'd know which thread that was on so

2490
02:20:08,760 --> 02:20:17,670
it might be hard for you to tell who to

2491
02:20:12,659 --> 02:20:19,590
attribute it to but you could try to get

2492
02:20:17,670 --> 02:20:23,870
that out that way which would be a lot

2493
02:20:19,590 --> 02:20:23,870
less painful potentially right

2494
02:20:42,790 --> 02:20:46,140
all right

2495
02:21:01,340 --> 02:21:06,620
so I think I'm going to close it down

2496
02:21:02,689 --> 02:21:12,200
the the question before that was off

2497
02:21:06,620 --> 02:21:18,350
topic as well which is about how do you

2498
02:21:12,200 --> 02:21:19,880
do compression of animation data I guess

2499
02:21:18,350 --> 02:21:24,559
what I say about that is this kind of a

2500
02:21:19,879 --> 02:21:27,379
large topic and I sort of gave a talk on

2501
02:21:24,559 --> 02:21:31,699
this a long time ago I gave one of the

2502
02:21:27,379 --> 02:21:33,409
GBC and one in Korea on the topic I it

2503
02:21:31,700 --> 02:21:36,970
was included in sort of a larger topic

2504
02:21:33,409 --> 02:21:41,000
that was like on how to do exporting and

2505
02:21:36,969 --> 02:21:41,539
I can't really reprise it in a short

2506
02:21:41,000 --> 02:21:44,930
amount of time

2507
02:21:41,540 --> 02:21:47,540
I mean basically there's a lot of a lot

2508
02:21:44,930 --> 02:21:51,109
of aspects to it the one I did for

2509
02:21:47,540 --> 02:21:54,140
granny is a least-squares curve fitter

2510
02:21:51,109 --> 02:21:56,380
and it kind of uses just some heuristics

2511
02:21:54,139 --> 02:22:01,939
to determine where to refine the curves

2512
02:21:56,379 --> 02:22:05,119
and you know that is at this point

2513
02:22:01,939 --> 02:22:08,420
seventeen year old technology so you can

2514
02:22:05,120 --> 02:22:10,460
do a lot better than it now by taking

2515
02:22:08,420 --> 02:22:12,500
into account a lot more stuff and you

2516
02:22:10,459 --> 02:22:14,299
could have a lot more horsepower too and

2517
02:22:12,500 --> 02:22:15,469
I think we understand the problem a lot

2518
02:22:14,299 --> 02:22:18,009
better now you know back when we

2519
02:22:15,469 --> 02:22:20,119
originally did this it was kind of I

2520
02:22:18,010 --> 02:22:21,978
don't want to use the word cutting edge

2521
02:22:20,120 --> 02:22:24,200
because it's not really that it's more

2522
02:22:21,978 --> 02:22:29,449
just like it wasn't really being done

2523
02:22:24,200 --> 02:22:35,210
hardly anywhere when I did it and so I

2524
02:22:29,450 --> 02:22:36,950
feel like now we've kind of gotten a lot

2525
02:22:35,209 --> 02:22:38,688
more visibility into how that sort of

2526
02:22:36,950 --> 02:22:43,880
stuff can work in what ways you can do

2527
02:22:38,689 --> 02:22:47,630
it and so I I don't know if if someone

2528
02:22:43,879 --> 02:22:50,119
is put out some good information on that

2529
02:22:47,629 --> 02:22:54,858
somewhere but it's kind of in depth and

2530
02:22:50,120 --> 02:23:00,710
you would want like a whole talk you

2531
02:22:54,859 --> 02:23:03,439
know a whole sort of lecture or paper on

2532
02:23:00,709 --> 02:23:04,969
it that was sort of a practical one not

2533
02:23:03,439 --> 02:23:07,639
a research paper like here are some

2534
02:23:04,969 --> 02:23:09,709
theoretical ways we've tried compressing

2535
02:23:07,639 --> 02:23:12,529
slides but rather something that's like

2536
02:23:09,709 --> 02:23:14,089
here at Naughty Dog you know we store

2537
02:23:12,530 --> 02:23:16,900
our slides in this format we can press

2538
02:23:14,090 --> 02:23:21,049
them this way or something right like I

2539
02:23:16,899 --> 02:23:23,329
feel like somebody should have been

2540
02:23:21,049 --> 02:23:28,520
putting out a modern one of that by now

2541
02:23:23,329 --> 02:23:34,511
but since I haven't looked for anything

2542
02:23:28,521 --> 02:23:37,101
like that myself I don't know I just

2543
02:23:34,511 --> 02:23:41,210
feel like it should be there you know

2544
02:23:37,101 --> 02:23:43,460
it's it's not a super hard problem but

2545
02:23:41,209 --> 02:23:46,489
it does require some elbow grease and it

2546
02:23:43,459 --> 02:23:47,899
is a bit subtle and it does take

2547
02:23:46,489 --> 02:23:51,190
experience you know you have to have

2548
02:23:47,899 --> 02:23:56,299
worked with animation and understand how

2549
02:23:51,190 --> 02:23:59,810
things work and what goes on in there

2550
02:23:56,299 --> 02:24:01,520
and how you you know what you have to do

2551
02:23:59,810 --> 02:24:11,060
with quaternions in this case as well

2552
02:24:01,521 --> 02:24:11,540
and and all that stuff but for us we

2553
02:24:11,060 --> 02:24:13,011
ninja

2554
02:24:11,540 --> 02:24:14,601
speaking of ever thought of releasing

2555
02:24:13,011 --> 02:24:16,390
old stalks you've done if you still have

2556
02:24:14,601 --> 02:24:19,641
sliced notes and the like laying around

2557
02:24:16,390 --> 02:24:22,729
yeah so I I have thought about it a

2558
02:24:19,640 --> 02:24:27,470
little bit I don't know how much utility

2559
02:24:22,729 --> 02:24:30,590
there is in that exactly but you know I

2560
02:24:27,470 --> 02:24:35,299
I do I have thought about maybe trying

2561
02:24:30,590 --> 02:24:39,200
to redo the talks you know on stream

2562
02:24:35,299 --> 02:24:42,079
sort of a thing and like so that I've

2563
02:24:39,200 --> 02:24:45,380
have a recording of them because I don't

2564
02:24:42,079 --> 02:24:49,909
have recordings I don't think of a lot

2565
02:24:45,379 --> 02:24:55,970
of them but like for example here's the

2566
02:24:49,909 --> 02:24:58,970
GDC one that I gave and this has the

2567
02:24:55,970 --> 02:25:01,879
information in it it's fact that that

2568
02:24:58,970 --> 02:25:04,670
you were that's not you but the person

2569
02:25:01,879 --> 02:25:06,430
who was asking about the curve fitting

2570
02:25:04,670 --> 02:25:13,159
uh

2571
02:25:06,431 --> 02:25:15,920
you can see here so here's like what I

2572
02:25:13,159 --> 02:25:17,780
was using in a dennis's this is

2573
02:25:15,920 --> 02:25:21,860
basically 17 years ago because I did it

2574
02:25:17,780 --> 02:25:24,739
in like 2000 2001 and so this lecture

2575
02:25:21,860 --> 02:25:25,279
was 2002 so even the lecture itself is

2576
02:25:24,739 --> 02:25:27,770
15

2577
02:25:25,279 --> 02:25:30,649
at this point so you know like I said

2578
02:25:27,770 --> 02:25:32,930
it's old information probably not all

2579
02:25:30,648 --> 02:25:35,778
how I'd write it today but it's you know

2580
02:25:32,930 --> 02:25:40,850
it did ship in lots and lots of games so

2581
02:25:35,779 --> 02:25:43,069
it's good enough for that I guess so I

2582
02:25:40,850 --> 02:25:49,129
you know you can kind of see that I've

2583
02:25:43,068 --> 02:25:57,158
got to outline the algorithm here and I

2584
02:25:49,129 --> 02:26:00,739
talked about how you can use linear

2585
02:25:57,158 --> 02:26:04,279
quaternion as a linear approximate I can

2586
02:26:00,738 --> 02:26:08,118
use real quaternions as an approximation

2587
02:26:04,279 --> 02:26:10,459
to orientation quaternions to give you a

2588
02:26:08,119 --> 02:26:14,869
result you can actually use but still be

2589
02:26:10,459 --> 02:26:19,600
linear and I talked about oversampling

2590
02:26:14,869 --> 02:26:22,850
the input to you know to get a Nyquist

2591
02:26:19,600 --> 02:26:24,078
thing in your interior solver I talked

2592
02:26:22,850 --> 02:26:29,479
about how you sample from the various

2593
02:26:24,078 --> 02:26:31,488
things and talk about how you transfer

2594
02:26:29,478 --> 02:26:37,219
windpipes Ida I don't know if I've got

2595
02:26:31,488 --> 02:26:43,988
the curve getting stuff in here the cria

2596
02:26:37,219 --> 02:26:43,988
one might be more in depth that's

2597
02:26:44,799 --> 02:27:00,109
probably in the pipeline here yeah so

2598
02:26:56,510 --> 02:27:04,459
you can see the curve fitter here in

2599
02:27:00,109 --> 02:27:05,959
operation on a 2d curve for example and

2600
02:27:04,459 --> 02:27:10,159
you can see that it just starts with a

2601
02:27:05,959 --> 02:27:12,379
minimum curve and fits it and it looks

2602
02:27:10,158 --> 02:27:16,118
at the error across the curve to each

2603
02:27:12,379 --> 02:27:18,979
individual sample and it adds not

2604
02:27:16,119 --> 02:27:23,869
progressively until it can sort of fit

2605
02:27:18,978 --> 02:27:27,278
to the data and you can sort of figure

2606
02:27:23,869 --> 02:27:31,010
out how closely you want it to match and

2607
02:27:27,279 --> 02:27:34,189
it'll stop at the part where it needs to

2608
02:27:31,010 --> 02:27:37,369
right and there's a lot of reasons why

2609
02:27:34,189 --> 02:27:38,840
this isn't the best approach but like I

2610
02:27:37,369 --> 02:27:41,090
said it does work

2611
02:27:38,840 --> 02:27:46,210
it's just these days I'd probably do

2612
02:27:41,090 --> 02:27:53,000
something more heavyweight than that but

2613
02:27:46,209 --> 02:27:54,319
anyway I don't know if if I talk yeah I

2614
02:27:53,000 --> 02:28:01,250
guess I don't really talk about it

2615
02:27:54,319 --> 02:28:09,739
anymore so yeah sorry so I don't know

2616
02:28:01,250 --> 02:28:18,850
that I ever really talked about this and

2617
02:28:09,739 --> 02:28:18,850
just didn't have any yeah

2618
02:28:23,988 --> 02:28:35,279
all right uh let's see I think close

2619
02:28:28,290 --> 02:28:39,029
down now let's let's go ahead and wrap

2620
02:28:35,279 --> 02:28:40,319
it up all right thank you for joining me

2621
02:28:39,029 --> 02:28:42,120
for that sort of handmade here it's my

2622
02:28:40,318 --> 02:28:45,600
pleasure coding with you as always if

2623
02:28:42,120 --> 02:28:46,950
you would like to follow along with a

2624
02:28:45,600 --> 02:28:48,540
series at home you can always peer to

2625
02:28:46,950 --> 02:28:51,720
the game on handmade hero or going to

2626
02:28:48,540 --> 02:28:53,130
come to the source code so you can play

2627
02:28:51,719 --> 02:28:55,019
around with it learn from it and do your

2628
02:28:53,129 --> 02:28:57,179
own experimentation we also have a forum

2629
02:28:55,020 --> 02:28:59,130
site you can go to if you want to ask

2630
02:28:57,180 --> 02:29:00,840
questions about stuff we've done the

2631
02:28:59,129 --> 02:29:03,358
patreon page go to transport the video

2632
02:29:00,840 --> 02:29:05,010
series a schedule bot that tweets the

2633
02:29:03,359 --> 02:29:06,238
schedule at you if you want to know when

2634
02:29:05,010 --> 02:29:08,420
we're going to be live and an episode

2635
02:29:06,238 --> 02:29:10,350
guide for catching up on old episodes

2636
02:29:08,420 --> 02:29:13,200
that's it for this week I'll be back

2637
02:29:10,350 --> 02:29:14,970
next week I believe I got to check my

2638
02:29:13,200 --> 02:29:16,800
calendar but I believe always check the

2639
02:29:14,969 --> 02:29:20,429
schedule bot I believe we'll even Act

2640
02:29:16,799 --> 02:29:21,539
next week to finish up getting the

2641
02:29:20,430 --> 02:29:24,630
lighting working through the pipeline

2642
02:29:21,540 --> 02:29:26,069
entirely and then start playing with the

2643
02:29:24,629 --> 02:29:29,539
lighting transfer til we get something

2644
02:29:26,068 --> 02:29:32,699
that we think is usable for the game

2645
02:29:29,540 --> 02:29:34,439
that's about it until then have fun

2646
02:29:32,700 --> 02:29:37,489
programming and I'll see everyone on the

2647
02:29:34,439 --> 02:29:37,488
Internet take it easy everybody

