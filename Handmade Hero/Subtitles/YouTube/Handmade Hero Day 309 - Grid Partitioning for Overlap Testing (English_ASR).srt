1
00:00:03,589 --> 00:00:07,560
hello everyone and welcome to handmade

2
00:00:06,059 --> 00:00:11,759
hero the show recode a complete game

3
00:00:07,559 --> 00:00:14,279
live on stream we got our sorting kind

4
00:00:11,759 --> 00:00:15,809
of I think I don't really want to use

5
00:00:14,279 --> 00:00:18,509
the word working but it kind of was

6
00:00:15,808 --> 00:00:19,948
working yesterday and we had some

7
00:00:18,510 --> 00:00:22,890
visualizations that we did to sort of

8
00:00:19,949 --> 00:00:26,099
see what was going on and you know it's

9
00:00:22,890 --> 00:00:28,339
starting to look respectable so at this

10
00:00:26,099 --> 00:00:30,868
point I'm not one hundred percent sure

11
00:00:28,339 --> 00:00:32,519
what the best course of action is

12
00:00:30,868 --> 00:00:34,769
because we kind of have two things that

13
00:00:32,520 --> 00:00:40,050
we've got to do one thing that we have

14
00:00:34,770 --> 00:00:42,870
to do is we have to we have to go ahead

15
00:00:40,049 --> 00:00:45,359
and put our sprites into layers like we

16
00:00:42,869 --> 00:00:47,549
were in the middle of doing when we kind

17
00:00:45,359 --> 00:00:50,670
of went over and took care of the sort

18
00:00:47,549 --> 00:00:52,948
so we've got to deal with that the other

19
00:00:50,670 --> 00:00:55,230
thing that we have to do is we have to

20
00:00:52,948 --> 00:00:57,899
figure out what our solution is to the N

21
00:00:55,229 --> 00:00:59,279
squared sorting problem because I don't

22
00:00:57,899 --> 00:01:01,620
think that's going to be a long-term

23
00:00:59,280 --> 00:01:05,879
viable thing to have in there you know

24
00:01:01,619 --> 00:01:08,759
at I mean computers are ridiculously

25
00:01:05,879 --> 00:01:10,618
fast so somehow it's running at a

26
00:01:08,760 --> 00:01:12,570
reasonable frame rate right now but you

27
00:01:10,618 --> 00:01:15,359
know it's it's kind of ridiculous that

28
00:01:12,569 --> 00:01:17,339
it is I'm rather surprised at that and

29
00:01:15,359 --> 00:01:19,079
so you know in general we don't want to

30
00:01:17,340 --> 00:01:20,759
have this sort of thing at the core of

31
00:01:19,079 --> 00:01:23,728
our render loop that has to be doing n

32
00:01:20,759 --> 00:01:27,920
squared stuff it just doesn't seem like

33
00:01:23,728 --> 00:01:33,569
a very good idea to say the very least

34
00:01:27,920 --> 00:01:36,900
so hmm it's a little bit warm in the

35
00:01:33,569 --> 00:01:38,039
hoodie I'll be honest I may not be able

36
00:01:36,900 --> 00:01:40,159
to keep the hoodie on for the entire

37
00:01:38,040 --> 00:01:44,130
stream but what are we going to do

38
00:01:40,159 --> 00:01:46,799
temperatures they fluctuate so this is

39
00:01:44,129 --> 00:01:48,449
it day 3 09 on handmade he rode a 308 is

40
00:01:46,799 --> 00:01:49,740
the code you would want to start with if

41
00:01:48,450 --> 00:01:51,390
you're trying to match up with what I'm

42
00:01:49,739 --> 00:01:54,239
doing that's the source code that i'm

43
00:01:51,390 --> 00:01:56,879
starting with now and if i go ahead and

44
00:01:54,239 --> 00:02:02,939
open up our project here let's go ahead

45
00:01:56,879 --> 00:02:04,890
and compile that

46
00:02:02,939 --> 00:02:08,699
and I'm going to go ahead and get ms

47
00:02:04,890 --> 00:02:11,939
debbÃ© going as well if you remember

48
00:02:08,699 --> 00:02:13,649
where we left off we had it to the point

49
00:02:11,939 --> 00:02:16,020
where it seemed like the sorting was

50
00:02:13,650 --> 00:02:18,360
actually working pretty darn well and we

51
00:02:16,020 --> 00:02:20,670
kind of have some ridiculous you know

52
00:02:18,360 --> 00:02:24,330
information overlay stuff happening here

53
00:02:20,669 --> 00:02:27,929
we can turn that off pretty easily and I

54
00:02:24,330 --> 00:02:29,510
probably should turn that off now that's

55
00:02:27,930 --> 00:02:31,680
this global show sort groups thing

56
00:02:29,509 --> 00:02:33,599
because at the moment I'm not sure that

57
00:02:31,680 --> 00:02:36,210
we're going to be focusing on the sort

58
00:02:33,599 --> 00:02:38,430
group debugging or anything like that so

59
00:02:36,210 --> 00:02:40,379
this is what things look like at the

60
00:02:38,430 --> 00:02:42,000
moment and actually like I said before I

61
00:02:40,379 --> 00:02:44,719
think they look pretty good we have a

62
00:02:42,000 --> 00:02:47,699
couple things that we have to address

63
00:02:44,719 --> 00:02:50,129
but most of them seem you know actually

64
00:02:47,699 --> 00:02:52,769
fairly logical and don't seem to

65
00:02:50,129 --> 00:02:54,719
implicate that the sort is is performing

66
00:02:52,770 --> 00:02:56,820
incorrectly in fact the sort seems from

67
00:02:54,719 --> 00:02:58,409
performing really quite well considering

68
00:02:56,819 --> 00:03:01,019
what I'm feeding it right now which is

69
00:02:58,409 --> 00:03:04,859
not particularly good data by any

70
00:03:01,020 --> 00:03:06,989
stretch of the imagination so yeah you

71
00:03:04,860 --> 00:03:09,060
know a couple things we have to deal

72
00:03:06,989 --> 00:03:11,099
with and I'm not exactly sure how we

73
00:03:09,060 --> 00:03:12,390
want to deal with them but for example

74
00:03:11,099 --> 00:03:13,979
in this situation here where we're going

75
00:03:12,389 --> 00:03:15,269
to be hopping up things we're going to

76
00:03:13,979 --> 00:03:16,949
have to think about what we want to do

77
00:03:15,270 --> 00:03:19,050
there because our Z values are kind of

78
00:03:16,949 --> 00:03:20,639
all wrong in this case and we're going

79
00:03:19,050 --> 00:03:23,070
to have to try and make it so that that

80
00:03:20,639 --> 00:03:25,979
the Y sprites can sort of hop over

81
00:03:23,069 --> 00:03:29,039
things correctly and stuff like that and

82
00:03:25,979 --> 00:03:30,659
we still have some other issues here to

83
00:03:29,039 --> 00:03:32,549
take a look at you can see there when

84
00:03:30,659 --> 00:03:34,109
you get like that guy hopping up in

85
00:03:32,550 --> 00:03:37,320
there you can see how we kind of get

86
00:03:34,110 --> 00:03:38,730
some Sun bugs when you get sort groups I

87
00:03:37,319 --> 00:03:41,639
think those have to do with cycles i'm

88
00:03:38,729 --> 00:03:45,539
not sure we also currently have those

89
00:03:41,639 --> 00:03:48,268
sort of highlighting reticles on which

90
00:03:45,539 --> 00:03:51,030
are not super useful either in terms of

91
00:03:48,269 --> 00:03:52,409
adding more complexity to the sort which

92
00:03:51,030 --> 00:03:56,069
is not something we actually wanted to

93
00:03:52,409 --> 00:03:59,120
do but let me see where that actually

94
00:03:56,069 --> 00:03:59,120
ended up that's

95
00:04:00,560 --> 00:04:14,210
robe mode so yeah we're we're drawing

96
00:04:08,669 --> 00:04:16,019
those volumes those collision volumes I

97
00:04:14,210 --> 00:04:20,489
actually never we're drawing those

98
00:04:16,019 --> 00:04:23,220
collision volumes we're creating a bunch

99
00:04:20,488 --> 00:04:25,049
of pushing volumes ah as always I always

100
00:04:23,220 --> 00:04:26,490
forget this because we kind of did this

101
00:04:25,050 --> 00:04:27,810
and then we were working on the ID code

102
00:04:26,490 --> 00:04:29,579
for a while I forgot I move things into

103
00:04:27,810 --> 00:04:31,709
nvm like where is the code it goes right

104
00:04:29,579 --> 00:04:32,759
there it's just a different file yeah

105
00:04:31,709 --> 00:04:36,560
it's getting too hot in here at this

106
00:04:32,759 --> 00:04:36,560
we're going to have to lose the hoodie

107
00:04:40,189 --> 00:04:52,290
all right the hoodie the hoodie has been

108
00:04:43,220 --> 00:04:54,210
has been retired temporarily so yeah so

109
00:04:52,290 --> 00:04:56,100
this is what we look like here when we

110
00:04:54,209 --> 00:04:57,659
don't have those extra sprites and you

111
00:04:56,100 --> 00:04:59,010
can see that like some of the bugs that

112
00:04:57,660 --> 00:05:01,410
were happening on the left side of the

113
00:04:59,009 --> 00:05:04,709
screen don't happen when those extra

114
00:05:01,410 --> 00:05:07,680
sprites aren't in there right and so you

115
00:05:04,709 --> 00:05:09,329
know i feel like the sorting routine

116
00:05:07,680 --> 00:05:11,579
seems to be working relatively well at

117
00:05:09,329 --> 00:05:14,159
this point and we have to be sort of

118
00:05:11,579 --> 00:05:16,289
conscientious and think about it going

119
00:05:14,160 --> 00:05:18,030
forwards just from the standpoint of we

120
00:05:16,290 --> 00:05:20,310
got to make sure that we start putting

121
00:05:18,029 --> 00:05:21,239
in good data and don't ask it to do

122
00:05:20,310 --> 00:05:23,339
things which you can't do because

123
00:05:21,240 --> 00:05:26,970
inherently like i said at the outset of

124
00:05:23,339 --> 00:05:28,769
this we are sort of inherently asking it

125
00:05:26,970 --> 00:05:32,550
to do something that is not particularly

126
00:05:28,769 --> 00:05:35,399
stable we're asking it to do sorts that

127
00:05:32,550 --> 00:05:37,530
have no real solution so it's kind of a

128
00:05:35,399 --> 00:05:40,560
situation where we're just using some

129
00:05:37,529 --> 00:05:42,539
fuzzy stuff to produce a sort that we

130
00:05:40,560 --> 00:05:44,310
hope will give us the pleasant results

131
00:05:42,540 --> 00:05:46,379
and for the most part in a lot of these

132
00:05:44,310 --> 00:05:48,899
cases it's working so I feel like that's

133
00:05:46,379 --> 00:05:50,490
a good start for us it's something we'll

134
00:05:48,899 --> 00:05:52,109
have to revisit once we sort of have

135
00:05:50,490 --> 00:05:54,060
everything in here that we want to draw

136
00:05:52,110 --> 00:05:56,970
and can get a little bit more visibility

137
00:05:54,060 --> 00:05:59,610
on it but for the moment I'm relatively

138
00:05:56,970 --> 00:06:01,169
happy with it so the thing that I am

139
00:05:59,610 --> 00:06:03,990
more interested in doing at this point

140
00:06:01,168 --> 00:06:07,019
since now we have something there is is

141
00:06:03,990 --> 00:06:10,978
a making sure we can't we have a some

142
00:06:07,019 --> 00:06:12,240
saying some sane idea of how to get the

143
00:06:10,978 --> 00:06:15,750
N squared

144
00:06:12,240 --> 00:06:17,340
working properly right and then the

145
00:06:15,750 --> 00:06:20,610
other thing that we have to do is figure

146
00:06:17,339 --> 00:06:21,689
out how we're going to do our layering

147
00:06:20,610 --> 00:06:24,120
because that's what we were right in the

148
00:06:21,689 --> 00:06:25,649
middle of doing and that's another

149
00:06:24,120 --> 00:06:27,418
tricky problem in and of itself and the

150
00:06:25,649 --> 00:06:29,549
reason for that is just because we kind

151
00:06:27,418 --> 00:06:31,529
of want this fourth of graphic view but

152
00:06:29,550 --> 00:06:33,930
then we sort of have this hybrid kind of

153
00:06:31,529 --> 00:06:37,649
perspective concept which is that as we

154
00:06:33,930 --> 00:06:40,590
go up things do in fact shrink right so

155
00:06:37,649 --> 00:06:42,899
although we don't want this sort of left

156
00:06:40,589 --> 00:06:46,379
you know this this right word leaning

157
00:06:42,899 --> 00:06:48,779
thing to be happening we do want to be

158
00:06:46,379 --> 00:06:50,848
able to have as we sort of come up

159
00:06:48,779 --> 00:06:53,459
through other levels of the game like

160
00:06:50,848 --> 00:06:56,089
that we do want the the ability for the

161
00:06:53,459 --> 00:06:59,189
floor to kind of shrink down right and

162
00:06:56,089 --> 00:07:02,129
you know we could decide to abandon that

163
00:06:59,189 --> 00:07:05,009
we could decide not to keep that just to

164
00:07:02,129 --> 00:07:06,719
keep the perspective more constant but I

165
00:07:05,009 --> 00:07:09,500
felt like it was just kind of a really

166
00:07:06,720 --> 00:07:12,930
neat effect that happened and so I'm

167
00:07:09,500 --> 00:07:15,418
just sort of of the opinion that I would

168
00:07:12,930 --> 00:07:17,038
like to try to preserve it as long as

169
00:07:15,418 --> 00:07:18,299
possible until I see something that

170
00:07:17,038 --> 00:07:19,860
really makes me go no there's really

171
00:07:18,300 --> 00:07:24,509
just no way we can possibly keep this

172
00:07:19,860 --> 00:07:25,860
it's awful right and you know certainly

173
00:07:24,509 --> 00:07:27,629
if we were trying to make it as easy as

174
00:07:25,860 --> 00:07:30,270
possible for ourselves we wouldn't do

175
00:07:27,629 --> 00:07:34,379
that but you know at the moment that

176
00:07:30,269 --> 00:07:37,109
isn't the primary goal right so uh given

177
00:07:34,379 --> 00:07:40,610
that what I think I would like to do

178
00:07:37,110 --> 00:07:45,389
first is I think I'd like to take a

179
00:07:40,610 --> 00:07:49,169
minute to sort of look at this this N

180
00:07:45,389 --> 00:07:50,430
squared situation right and you know so

181
00:07:49,168 --> 00:07:52,978
like I said we've got two problems one

182
00:07:50,430 --> 00:07:55,050
is that we don't like the sort rule that

183
00:07:52,978 --> 00:07:56,788
we have in there can't handle layered

184
00:07:55,050 --> 00:07:58,560
things on top of each other and it's

185
00:07:56,788 --> 00:08:02,908
because it's kind of using hacked ideas

186
00:07:58,560 --> 00:08:04,408
about how to about how to sort things

187
00:08:02,908 --> 00:08:06,209
that are entirely based on like what

188
00:08:04,408 --> 00:08:08,189
will look nice for a normal room right

189
00:08:06,209 --> 00:08:09,839
so we need to separate things into

190
00:08:08,189 --> 00:08:11,939
layers and you know that'll give us our

191
00:08:09,839 --> 00:08:13,799
that'll fix our debug overlay as well

192
00:08:11,939 --> 00:08:17,038
because like right now our debug overlay

193
00:08:13,800 --> 00:08:19,050
gets blocked by y sprites right and

194
00:08:17,038 --> 00:08:23,639
that's according to the rule that's

195
00:08:19,050 --> 00:08:24,960
actually what should happen but in

196
00:08:23,639 --> 00:08:25,810
addition to that i would like to figure

197
00:08:24,959 --> 00:08:27,219
out how to make sure that

198
00:08:25,810 --> 00:08:28,629
build sprite craft doesn't take a huge

199
00:08:27,220 --> 00:08:30,730
amount of time unfortunately we can

200
00:08:28,629 --> 00:08:32,740
easily force it to buy just dumping tons

201
00:08:30,730 --> 00:08:35,139
of sprites on it right that's the whole

202
00:08:32,740 --> 00:08:37,799
point about the N squared situation you

203
00:08:35,139 --> 00:08:40,028
know here there's just not enough

204
00:08:37,799 --> 00:08:45,189
rectangles on the screen not enough

205
00:08:40,028 --> 00:08:47,019
sprites on the screen to uh to blow past

206
00:08:45,190 --> 00:08:48,700
the frame budget so even though we're

207
00:08:47,019 --> 00:08:51,939
doing an N squared algorithm for the

208
00:08:48,700 --> 00:08:53,290
sorting we're just not feeling it and

209
00:08:51,940 --> 00:08:55,480
that's just because computers are crazy

210
00:08:53,289 --> 00:08:57,579
fast even though this computers from six

211
00:08:55,480 --> 00:08:59,139
years ago at this point it's still so

212
00:08:57,580 --> 00:09:02,470
fast that it's just like ya know don't

213
00:08:59,139 --> 00:09:04,240
worry about it right but if I just

214
00:09:02,470 --> 00:09:06,100
drastically increase the number of

215
00:09:04,240 --> 00:09:07,480
sprites by opening the debug view right

216
00:09:06,100 --> 00:09:10,120
all of those are still going through the

217
00:09:07,480 --> 00:09:12,190
sort you can now see that build spread

218
00:09:10,120 --> 00:09:14,589
graph is taking a massive amount of time

219
00:09:12,190 --> 00:09:17,830
and that's of course because there's so

220
00:09:14,589 --> 00:09:19,810
many things that it has to sort that you

221
00:09:17,830 --> 00:09:23,528
know you finally start to see that N

222
00:09:19,809 --> 00:09:28,329
squared actually matter and so I want to

223
00:09:23,528 --> 00:09:37,299
I think today just figure out something

224
00:09:28,330 --> 00:09:42,600
we can do about that I think that's

225
00:09:37,299 --> 00:09:53,609
probably the best best use of our time

226
00:09:42,600 --> 00:09:53,610
ok so uh let's take a look here

227
00:09:55,919 --> 00:10:06,139
so essentially the problem that we have

228
00:09:58,740 --> 00:10:09,860
and here's a the day marker okay 309

229
00:10:06,139 --> 00:10:13,860
essentially the problem that we have day

230
00:10:09,860 --> 00:10:16,379
is we've got some series of rectangles

231
00:10:13,860 --> 00:10:19,259
on the screen and we need to know which

232
00:10:16,379 --> 00:10:21,328
ones overlap right we're trying to

233
00:10:19,259 --> 00:10:25,588
figure out all the sprites that overlap

234
00:10:21,328 --> 00:10:29,278
each other on the screen and at the

235
00:10:25,589 --> 00:10:31,050
moment we are just doing that by you

236
00:10:29,278 --> 00:10:33,629
know checking all sprites against each

237
00:10:31,049 --> 00:10:35,879
other in an N squared fashion so if

238
00:10:33,629 --> 00:10:38,730
there are five sprites we will check

239
00:10:35,879 --> 00:10:41,100
each right against each other sprite and

240
00:10:38,730 --> 00:10:45,149
we do that by having into nested for

241
00:10:41,100 --> 00:10:48,570
loops so that's what's happening at the

242
00:10:45,149 --> 00:10:51,958
moment now the problem with that

243
00:10:48,570 --> 00:10:53,250
obviously is that as the number grows we

244
00:10:51,958 --> 00:10:54,569
are going to be doing an N squared

245
00:10:53,250 --> 00:10:56,429
number of comparisons now you remember

246
00:10:54,570 --> 00:10:58,860
when we talked about Oh N squared right

247
00:10:56,429 --> 00:11:02,698
if you consider the number of things

248
00:10:58,860 --> 00:11:04,800
here to be n then if I have to compare

249
00:11:02,698 --> 00:11:07,559
each thing with each other thing i end

250
00:11:04,799 --> 00:11:10,740
up with doing n things and you know

251
00:11:07,559 --> 00:11:13,859
versus n things or n squared it's a very

252
00:11:10,740 --> 00:11:16,440
simple idea right and of course it's

253
00:11:13,860 --> 00:11:20,639
pairwise so we don't need to compare if

254
00:11:16,440 --> 00:11:22,769
we have like a and B right we don't need

255
00:11:20,639 --> 00:11:25,559
to compare a versus B and then B versus

256
00:11:22,769 --> 00:11:27,990
a so we're not doing all N squared

257
00:11:25,559 --> 00:11:30,479
comparisons we're only doing sort of

258
00:11:27,990 --> 00:11:32,730
like half of the N squared comparisons

259
00:11:30,480 --> 00:11:36,028
right because we don't have to do the

260
00:11:32,730 --> 00:11:38,370
backwards version of each one but it's

261
00:11:36,028 --> 00:11:40,019
still proportional to N squared right if

262
00:11:38,370 --> 00:11:42,209
you take n square and you divide it by 2

263
00:11:40,019 --> 00:11:44,220
or something like that it still grows

264
00:11:42,208 --> 00:11:45,750
compared to compared to N squared it's

265
00:11:44,220 --> 00:11:47,699
still a graph that looks like that and

266
00:11:45,750 --> 00:11:49,679
just because you flatten that graph out

267
00:11:47,698 --> 00:11:52,049
a little bit doesn't change the fact

268
00:11:49,679 --> 00:11:53,818
that it you know has this really bad

269
00:11:52,049 --> 00:11:55,009
growth curve where at some point you're

270
00:11:53,818 --> 00:11:58,799
going to get up and just really steep

271
00:11:55,009 --> 00:12:01,110
intractable problem space so what we'd

272
00:11:58,799 --> 00:12:06,659
like to do is figure out a simpler way

273
00:12:01,110 --> 00:12:09,110
to build this graph and you know you can

274
00:12:06,659 --> 00:12:10,850
imagine some pretty

275
00:12:09,110 --> 00:12:13,129
straightforward ways that we might be

276
00:12:10,850 --> 00:12:16,370
able to do this but you know this is

277
00:12:13,129 --> 00:12:18,289
kind of a classic computational geometry

278
00:12:16,370 --> 00:12:20,089
well you know I know if I want to call

279
00:12:18,289 --> 00:12:24,289
it computation adapter there's like this

280
00:12:20,089 --> 00:12:26,269
is a classic geometry problem and

281
00:12:24,289 --> 00:12:28,219
there's a lot of different ways that

282
00:12:26,269 --> 00:12:31,250
people go about doing it the way that I

283
00:12:28,220 --> 00:12:33,709
tend to go about doing it because it

284
00:12:31,250 --> 00:12:36,980
tends to be easiest is I tend to just

285
00:12:33,708 --> 00:12:40,129
bucket things right so what i will do is

286
00:12:36,980 --> 00:12:42,230
I'll say well okay you know if I've got

287
00:12:40,129 --> 00:12:44,419
a screens worth of sprites and I'm

288
00:12:42,230 --> 00:12:46,579
trying to figure out which one's of them

289
00:12:44,419 --> 00:12:48,289
overlap you know I'm just going to go

290
00:12:46,578 --> 00:12:51,528
ahead and say well let's make some

291
00:12:48,289 --> 00:12:54,110
buckets here and we'll just sort inside

292
00:12:51,528 --> 00:12:56,240
each well not sort inside each bucket

293
00:12:54,110 --> 00:12:58,550
we'll just say when we're going to test

294
00:12:56,240 --> 00:13:00,740
somebody we only test them against

295
00:12:58,549 --> 00:13:06,729
sprites that are in the buckets that

296
00:13:00,740 --> 00:13:06,730
they overlap if that makes sense now

297
00:13:07,179 --> 00:13:14,689
this doesn't solve the N squared nature

298
00:13:11,089 --> 00:13:17,149
of the problem in any real sense right

299
00:13:14,690 --> 00:13:19,459
because it's still n squared inside the

300
00:13:17,149 --> 00:13:23,089
bucket but what it does is it truncates

301
00:13:19,458 --> 00:13:24,919
the the N down so it's always a fairly

302
00:13:23,089 --> 00:13:27,199
small number which means you never get

303
00:13:24,919 --> 00:13:34,219
up into that bad part of the N squared

304
00:13:27,198 --> 00:13:36,859
curve right now it's possible that we

305
00:13:34,220 --> 00:13:38,540
could do this in non N squared fashion I

306
00:13:36,860 --> 00:13:40,730
believe I'm not a computational geometry

307
00:13:38,539 --> 00:13:44,419
kind of a person to be honest with you

308
00:13:40,730 --> 00:13:47,480
it's not you know my strongest suit but

309
00:13:44,419 --> 00:13:51,729
my recollection from that literature is

310
00:13:47,480 --> 00:13:55,759
that we could actually do this without

311
00:13:51,730 --> 00:13:57,709
needing to do it n squared and the

312
00:13:55,759 --> 00:14:01,958
reason that I say that is because one of

313
00:13:57,708 --> 00:14:07,669
the things about overlap testing is that

314
00:14:01,958 --> 00:14:11,179
you know every test that you perform

315
00:14:07,669 --> 00:14:13,250
gives you information about what other

316
00:14:11,179 --> 00:14:17,539
tests you may or may not have to perform

317
00:14:13,250 --> 00:14:20,059
right and you know to give an example of

318
00:14:17,539 --> 00:14:22,250
that I'll give a very simplified example

319
00:14:20,059 --> 00:14:23,049
of that suppose we were going to test

320
00:14:22,250 --> 00:14:25,000
for overlap

321
00:14:23,049 --> 00:14:29,319
in just one dimension so this is one

322
00:14:25,000 --> 00:14:31,899
dimensional overlap right well if I have

323
00:14:29,320 --> 00:14:35,278
some spans and you know let me try to

324
00:14:31,899 --> 00:14:35,278
draw them in somewhere that makes sense

325
00:14:37,019 --> 00:14:43,259
so if I have some spans here right and I

326
00:14:41,500 --> 00:14:45,458
want to know if these things overlap

327
00:14:43,259 --> 00:14:48,549
immediately you can start to think of

328
00:14:45,458 --> 00:14:50,679
well you know I could start these I

329
00:14:48,549 --> 00:14:52,389
could sort these spans by like their

330
00:14:50,679 --> 00:14:55,179
minimum coordinate let's say or

331
00:14:52,389 --> 00:14:58,629
something right and I know that sorting

332
00:14:55,179 --> 00:15:01,208
is n log n I know that I don't have to

333
00:14:58,629 --> 00:15:03,578
do it n squared to sort something so i

334
00:15:01,208 --> 00:15:06,338
could do an N log n sort of these things

335
00:15:03,578 --> 00:15:09,989
first and then actually have them in

336
00:15:06,339 --> 00:15:13,630
order and once I have them in order I

337
00:15:09,990 --> 00:15:17,259
know that I only need to test the next

338
00:15:13,629 --> 00:15:19,450
person in the list to see whether or not

339
00:15:17,259 --> 00:15:21,909
I overlap with them because if I don't

340
00:15:19,450 --> 00:15:26,920
overlap with them I don't need to test

341
00:15:21,909 --> 00:15:29,949
anybody further down the list right so

342
00:15:26,919 --> 00:15:32,679
at some level you can start to see how

343
00:15:29,950 --> 00:15:35,230
computational geometry could easily

344
00:15:32,679 --> 00:15:38,919
build algorithms based on n log and

345
00:15:35,230 --> 00:15:40,810
sorting in various axes that would allow

346
00:15:38,919 --> 00:15:45,370
them to reduce the number of tests that

347
00:15:40,809 --> 00:15:50,889
they need to do in order to figure out

348
00:15:45,370 --> 00:15:54,070
what all the overlaps are and i believe

349
00:15:50,889 --> 00:15:55,750
if i'm not mistaken that you can sort of

350
00:15:54,070 --> 00:15:59,500
do literally what I'm talking about here

351
00:15:55,750 --> 00:16:03,250
in a in a 2d arena as well you can first

352
00:15:59,500 --> 00:16:06,159
sort by one axis and get you know things

353
00:16:03,250 --> 00:16:09,399
in that axis and then you can do sorts

354
00:16:06,159 --> 00:16:11,679
by another axis insaat you know a stable

355
00:16:09,399 --> 00:16:13,360
sort inside that axis by another axis

356
00:16:11,679 --> 00:16:15,759
and then end up with a thing where you

357
00:16:13,360 --> 00:16:21,519
can sort of only do the checks that you

358
00:16:15,759 --> 00:16:23,110
want to do now I don't like I said I

359
00:16:21,519 --> 00:16:24,429
don't know that I want to do that and

360
00:16:23,110 --> 00:16:26,110
the reason that I don't know if I wanna

361
00:16:24,429 --> 00:16:27,969
do that is because although that's going

362
00:16:26,110 --> 00:16:31,120
to probably be the more theoretically

363
00:16:27,970 --> 00:16:33,278
fast thing in the sense that it could

364
00:16:31,120 --> 00:16:36,940
scale to the highest number of possible

365
00:16:33,278 --> 00:16:39,879
objects in all scenario

366
00:16:36,940 --> 00:16:41,500
else I don't know that that's going to

367
00:16:39,879 --> 00:16:43,929
actually give us the fastest results in

368
00:16:41,500 --> 00:16:45,700
practice because in practice you know

369
00:16:43,929 --> 00:16:47,979
we're not going to have more than a

370
00:16:45,700 --> 00:16:51,730
thousand sprites in a little section of

371
00:16:47,980 --> 00:16:55,289
the screen right and so I feel like you

372
00:16:51,730 --> 00:16:59,170
know a method where we dice things up is

373
00:16:55,289 --> 00:17:01,089
really going to probably be a more

374
00:16:59,169 --> 00:17:04,930
efficient thing for us to do in the long

375
00:17:01,090 --> 00:17:08,019
run and it's probably going to fit our

376
00:17:04,930 --> 00:17:09,939
usage better so that's my assumption now

377
00:17:08,019 --> 00:17:15,730
I don't know that that's true but that's

378
00:17:09,939 --> 00:17:17,560
just what I would assume so that's my

379
00:17:15,730 --> 00:17:21,360
inclination that's what I would go with

380
00:17:17,559 --> 00:17:25,480
if if it were up to me for figuring out

381
00:17:21,359 --> 00:17:27,490
you know what the overlap is and when I

382
00:17:25,480 --> 00:17:30,279
you know when i'm thinking about this i

383
00:17:27,490 --> 00:17:32,349
think the primary complexity there the

384
00:17:30,279 --> 00:17:34,660
primary sort of set a decision we have

385
00:17:32,349 --> 00:17:37,990
to make is how are we storing this

386
00:17:34,660 --> 00:17:40,090
information and how are we actually

387
00:17:37,990 --> 00:17:41,589
going to do the bucketing because

388
00:17:40,089 --> 00:17:48,789
there's a couple different ways that we

389
00:17:41,589 --> 00:17:51,089
might want to do it right so I if you

390
00:17:48,789 --> 00:17:51,089
imagine

391
00:17:55,880 --> 00:18:04,890
that I have some kind of a grid there's

392
00:18:02,579 --> 00:18:07,379
a lot of ways we can go about spatially

393
00:18:04,890 --> 00:18:09,690
partitioning things so that we can

394
00:18:07,380 --> 00:18:12,480
reduce the number of checks we have to

395
00:18:09,690 --> 00:18:15,120
do four rectangles so you know if this

396
00:18:12,480 --> 00:18:17,279
is a rectangle here and this is a

397
00:18:15,119 --> 00:18:21,029
rectangle here and then there's another

398
00:18:17,279 --> 00:18:23,009
rectangle over here you know maybe we

399
00:18:21,029 --> 00:18:24,389
want to check these two rectangles for

400
00:18:23,009 --> 00:18:27,750
intersection because they're sort of

401
00:18:24,390 --> 00:18:29,759
occupying the same general space and we

402
00:18:27,750 --> 00:18:31,920
think they might overlap they don't but

403
00:18:29,759 --> 00:18:33,480
we think they might but we definitely

404
00:18:31,920 --> 00:18:34,800
don't want to test this against this

405
00:18:33,480 --> 00:18:36,210
because they're nowhere near each other

406
00:18:34,799 --> 00:18:37,379
and we don't really probably want to

407
00:18:36,210 --> 00:18:38,700
test this against this either because

408
00:18:37,380 --> 00:18:43,980
they shared you know they're divided by

409
00:18:38,700 --> 00:18:45,840
one of these lines so if you think about

410
00:18:43,980 --> 00:18:48,839
sort of narrowing testing in this way

411
00:18:45,839 --> 00:18:50,399
like a spatial partition so called

412
00:18:48,839 --> 00:18:53,428
because we are partitioning space up

413
00:18:50,400 --> 00:18:55,890
into different regions for some purpose

414
00:18:53,429 --> 00:18:59,730
if you look at what's implied here

415
00:18:55,890 --> 00:19:03,270
there's more than one way we can choose

416
00:18:59,730 --> 00:19:04,440
to represent this or there's a number of

417
00:19:03,269 --> 00:19:07,319
ways you can choose to attack this

418
00:19:04,440 --> 00:19:10,220
problem and the underlying sort of

419
00:19:07,319 --> 00:19:13,349
element in how we're going to make or

420
00:19:10,220 --> 00:19:16,440
what makes their be decisions to make it

421
00:19:13,349 --> 00:19:19,409
the the the underlying try think of what

422
00:19:16,440 --> 00:19:20,850
the word is we have choices and the

423
00:19:19,410 --> 00:19:23,640
reason we have to make these choices

424
00:19:20,849 --> 00:19:26,428
let's put that way is because things

425
00:19:23,640 --> 00:19:29,820
don't always fall within a bucket right

426
00:19:26,429 --> 00:19:33,179
so if things always fell entirely inside

427
00:19:29,819 --> 00:19:35,819
one whole bucket always then we wouldn't

428
00:19:33,179 --> 00:19:37,200
have to think really we just feel like

429
00:19:35,819 --> 00:19:38,490
all right well you know we make some

430
00:19:37,200 --> 00:19:39,420
number buckets and then really all we

431
00:19:38,490 --> 00:19:40,829
have to figure out is how we're going to

432
00:19:39,420 --> 00:19:42,360
store the fact that stuff's in a bucket

433
00:19:40,829 --> 00:19:45,599
that's the only decision we have to make

434
00:19:42,359 --> 00:19:47,369
is how to store but because things like

435
00:19:45,599 --> 00:19:51,689
for example this rectangle right here

436
00:19:47,369 --> 00:19:53,639
span for actual spatial buckets if the

437
00:19:51,690 --> 00:19:56,789
way we chose represent this was well we

438
00:19:53,640 --> 00:19:57,990
need for we need to say that this

439
00:19:56,789 --> 00:19:59,339
thing's in four different buckets so

440
00:19:57,990 --> 00:20:01,679
that when someone looks up in it knows

441
00:19:59,339 --> 00:20:03,720
that this guy's there right we have to

442
00:20:01,679 --> 00:20:09,090
start thinking about how are we going to

443
00:20:03,720 --> 00:20:13,860
handle that activity right so one way to

444
00:20:09,089 --> 00:20:16,500
handle that activity is to store is to

445
00:20:13,859 --> 00:20:19,199
break up each thing that we store and

446
00:20:16,500 --> 00:20:22,650
store a record of it in each bucket that

447
00:20:19,200 --> 00:20:26,490
it touches right then when we go to

448
00:20:22,650 --> 00:20:28,920
query we can say okay all the buckets

449
00:20:26,490 --> 00:20:30,750
that itouch look to see what all the

450
00:20:28,920 --> 00:20:38,640
things are in those buckets and test

451
00:20:30,750 --> 00:20:44,940
against them right we can certainly do

452
00:20:38,640 --> 00:20:48,240
that not a you know not a huge deal but

453
00:20:44,940 --> 00:20:52,590
again it's a decision another thing we

454
00:20:48,240 --> 00:20:56,730
can do is we can create a more

455
00:20:52,589 --> 00:20:59,789
hierarchical notion of what the space

456
00:20:56,730 --> 00:21:01,589
actually looks like and avoid breaking

457
00:20:59,789 --> 00:21:03,539
things up in that fashion and let me

458
00:21:01,589 --> 00:21:06,509
give you an example of how that sort of

459
00:21:03,539 --> 00:21:07,980
works so suppose I was to take well I'll

460
00:21:06,509 --> 00:21:10,379
try to stay with this example I guess

461
00:21:07,980 --> 00:21:13,200
suppose I was to take this entire

462
00:21:10,380 --> 00:21:15,030
section here and and say that I have

463
00:21:13,200 --> 00:21:17,460
sort of a top-level region that's the

464
00:21:15,029 --> 00:21:21,529
entire area so anything that overlaps

465
00:21:17,460 --> 00:21:23,340
with it could be stored in this okay

466
00:21:21,529 --> 00:21:25,619
because all these things are obviously

467
00:21:23,339 --> 00:21:28,559
within this rectangle and then i say i

468
00:21:25,619 --> 00:21:31,739
want to divide it in half right i'm

469
00:21:28,559 --> 00:21:34,049
going to divide it well once i divided

470
00:21:31,740 --> 00:21:35,519
in half now there's some things on one

471
00:21:34,049 --> 00:21:38,250
half and some things on another half

472
00:21:35,519 --> 00:21:40,529
right and I only need to test you know

473
00:21:38,250 --> 00:21:42,029
each half if something's in this app I

474
00:21:40,529 --> 00:21:43,289
test this app something this fi test

475
00:21:42,029 --> 00:21:46,109
that app that's all I really need to do

476
00:21:43,289 --> 00:21:48,839
right then i could go ahead and divide

477
00:21:46,109 --> 00:21:50,519
it in half again let's say right maybe i

478
00:21:48,839 --> 00:21:52,019
divide it in half again and of course

479
00:21:50,519 --> 00:21:53,759
unfortunately i didn't really draw a

480
00:21:52,019 --> 00:21:55,230
half's line here but let's say that i

481
00:21:53,759 --> 00:21:57,359
was going to do it in half again and so

482
00:21:55,230 --> 00:21:58,920
it'd be something like that and now we

483
00:21:57,359 --> 00:22:00,779
get to the first place where i'm sort of

484
00:21:58,920 --> 00:22:04,470
saying there could be a difference in

485
00:22:00,779 --> 00:22:07,170
here right this rectangle overlaps the

486
00:22:04,470 --> 00:22:10,380
split point where i'm going to divide it

487
00:22:07,170 --> 00:22:13,170
and so if we were to follow the same

488
00:22:10,380 --> 00:22:14,850
general pattern in the grid based method

489
00:22:13,170 --> 00:22:17,070
where we just store it everywhere that

490
00:22:14,849 --> 00:22:19,500
it appears nothing really changes I'd

491
00:22:17,069 --> 00:22:22,740
store it in either side right I'd have I

492
00:22:19,500 --> 00:22:28,019
have a copy a record that it was in both

493
00:22:22,740 --> 00:22:31,769
these sides and I'd move on but I could

494
00:22:28,019 --> 00:22:34,769
instead decide to not store it in that

495
00:22:31,769 --> 00:22:37,230
lower split level and instead store it

496
00:22:34,769 --> 00:22:38,308
at a higher split level right because if

497
00:22:37,230 --> 00:22:39,960
you think about what this sense of

498
00:22:38,308 --> 00:22:42,569
creating is it sort of says well I have

499
00:22:39,960 --> 00:22:44,789
this giant region here right and then I

500
00:22:42,569 --> 00:22:47,039
split it into two regions I split it

501
00:22:44,789 --> 00:22:50,250
into a region that was just the stuff on

502
00:22:47,039 --> 00:22:55,230
this side and a region that was just the

503
00:22:50,250 --> 00:22:57,450
stuff on the other side right and then I

504
00:22:55,230 --> 00:23:00,450
took you know these two regions as well

505
00:22:57,450 --> 00:23:02,789
and I slipped them again I said well now

506
00:23:00,450 --> 00:23:06,799
I've got one that's like well it's just

507
00:23:02,789 --> 00:23:10,308
the stuff that's like up in there and

508
00:23:06,799 --> 00:23:15,480
just the stuff that's down in there and

509
00:23:10,308 --> 00:23:25,678
the same thing would be true in this

510
00:23:15,480 --> 00:23:27,599
case right so if you look at what's

511
00:23:25,679 --> 00:23:29,009
going on there you can kind of see what

512
00:23:27,599 --> 00:23:31,279
I mean now when I say we have a choice

513
00:23:29,009 --> 00:23:35,339
of where to store things if we want to

514
00:23:31,279 --> 00:23:41,279
we could store things in whatever bucket

515
00:23:35,339 --> 00:23:44,009
doesn't split them so this guy cannot be

516
00:23:41,279 --> 00:23:46,769
stored in either here or here but he

517
00:23:44,009 --> 00:23:50,279
could be stored in here so he would be

518
00:23:46,769 --> 00:23:52,920
stored in here now when we do testing on

519
00:23:50,279 --> 00:23:55,410
somebody we do the exact same process

520
00:23:52,920 --> 00:23:57,990
and we just test against everyone in

521
00:23:55,410 --> 00:24:05,009
everything we would have traversed in

522
00:23:57,990 --> 00:24:08,069
order to find their location right so

523
00:24:05,009 --> 00:24:10,140
that's another way we can do it I and

524
00:24:08,069 --> 00:24:11,308
you know this this method of doing

525
00:24:10,140 --> 00:24:13,140
splits there's there's a lot of

526
00:24:11,308 --> 00:24:19,549
different things that you see if you've

527
00:24:13,140 --> 00:24:23,640
ever seen like quadtree or KD tree right

528
00:24:19,549 --> 00:24:26,700
BSP tree all these things are just

529
00:24:23,640 --> 00:24:28,590
different kinds of facial partitions a

530
00:24:26,700 --> 00:24:31,289
quadtree is one that always splits it

531
00:24:28,589 --> 00:24:33,990
into fours right it's this kind of a if

532
00:24:31,289 --> 00:24:36,539
this kind of a process a KD tree is one

533
00:24:33,990 --> 00:24:39,900
that always splits exactly one

534
00:24:36,539 --> 00:24:42,569
of the orthogonal axes every time but

535
00:24:39,900 --> 00:24:44,190
only one right so it might split this

536
00:24:42,569 --> 00:24:46,230
into two halves and then it'll split

537
00:24:44,190 --> 00:24:47,730
this into two halves but it's never

538
00:24:46,230 --> 00:24:49,049
going to produce for things like I Spit

539
00:24:47,730 --> 00:24:52,440
to so it's basically like a binary tree

540
00:24:49,049 --> 00:24:55,139
a BSP tree is very much the same as a KD

541
00:24:52,440 --> 00:24:57,600
tree only instead of picking cardinal

542
00:24:55,140 --> 00:24:59,460
axes the BSP tree can pick anything so

543
00:24:57,599 --> 00:25:03,539
it could like to split that way if you

544
00:24:59,460 --> 00:25:05,309
wanted to write and so you know the KD

545
00:25:03,539 --> 00:25:08,220
tree is kind of you might think of it as

546
00:25:05,309 --> 00:25:10,470
a sort of more restrictive subset of a

547
00:25:08,220 --> 00:25:12,870
BSP tree like a KD tree still is a

548
00:25:10,470 --> 00:25:15,630
binary space partition it's just one

549
00:25:12,869 --> 00:25:22,049
that can only pick one of the the

550
00:25:15,630 --> 00:25:25,050
Cardinal axes as its split so the thing

551
00:25:22,049 --> 00:25:26,309
about a lot of these and you know I

552
00:25:25,049 --> 00:25:32,009
don't have anything against these guys

553
00:25:26,309 --> 00:25:35,549
they're all typically just fine is you

554
00:25:32,009 --> 00:25:39,569
know really you don't get very much for

555
00:25:35,549 --> 00:25:41,399
doing this stuff typically the only time

556
00:25:39,569 --> 00:25:42,659
that I find that it's really all that

557
00:25:41,400 --> 00:25:44,310
great to go with something more

558
00:25:42,660 --> 00:25:46,200
complicated like this where you've got

559
00:25:44,309 --> 00:25:49,950
something you know more complicated than

560
00:25:46,200 --> 00:25:51,330
a simple grid is if you have level of

561
00:25:49,950 --> 00:25:53,519
detail concerns because you can

562
00:25:51,329 --> 00:25:56,699
understand why having sort of things

563
00:25:53,519 --> 00:25:59,700
that split into smaller pieces and then

564
00:25:56,700 --> 00:26:01,710
could be collapsed upward if I have

565
00:25:59,700 --> 00:26:03,360
level of detail stuff going on here

566
00:26:01,710 --> 00:26:06,180
where I'm like oh you know something I'm

567
00:26:03,359 --> 00:26:07,709
I'm looking out across this thing like

568
00:26:06,180 --> 00:26:09,299
I'm standing here and I'm looking this

569
00:26:07,710 --> 00:26:10,620
way so I might want this to be at a low

570
00:26:09,299 --> 00:26:13,799
level of detail and this to be a high

571
00:26:10,619 --> 00:26:16,229
level detail you know these partitioning

572
00:26:13,799 --> 00:26:17,970
things tend to make more sense to me in

573
00:26:16,230 --> 00:26:20,460
those kind of context where you're not

574
00:26:17,970 --> 00:26:24,600
dealing with a uniform density uniform

575
00:26:20,460 --> 00:26:26,460
come access kind of thing but that's not

576
00:26:24,599 --> 00:26:30,000
really what we have you know we know

577
00:26:26,460 --> 00:26:32,460
we're looking at a flat bounded region

578
00:26:30,000 --> 00:26:35,009
where everything is the same level of

579
00:26:32,460 --> 00:26:36,720
detail and we're equally likely to have

580
00:26:35,009 --> 00:26:37,920
sprites on the left side screen and the

581
00:26:36,720 --> 00:26:39,269
right side of screen there's not going

582
00:26:37,920 --> 00:26:42,060
to be like a drastic difference there

583
00:26:39,269 --> 00:26:43,859
and so my suspicion is a lot of this

584
00:26:42,059 --> 00:26:46,230
stuff would just be wasting a lot of

585
00:26:43,859 --> 00:26:49,669
implementation time doing fancy things

586
00:26:46,230 --> 00:26:49,670
that we don't really care about

587
00:26:49,940 --> 00:26:56,370
so my assumption is that what we

588
00:26:52,380 --> 00:26:58,980
probably would want to do the most

589
00:26:56,369 --> 00:27:02,209
efficacious thing for us would be to

590
00:26:58,980 --> 00:27:05,460
figure out how to use a very simple grid

591
00:27:02,210 --> 00:27:06,990
bucketing scheme probably that stores

592
00:27:05,460 --> 00:27:10,920
things multiple times if they cover

593
00:27:06,990 --> 00:27:12,859
multiple things is probably the most

594
00:27:10,920 --> 00:27:16,710
efficacious thing that we could do

595
00:27:12,859 --> 00:27:18,839
that's my guess anyway and the reason I

596
00:27:16,710 --> 00:27:22,140
say that is because I don't see us

597
00:27:18,839 --> 00:27:26,009
getting any real benefit from any of the

598
00:27:22,140 --> 00:27:29,370
other schemes now it's possible that

599
00:27:26,009 --> 00:27:30,779
something more sort wives would actually

600
00:27:29,369 --> 00:27:33,929
be clever like I said you know we've

601
00:27:30,779 --> 00:27:37,379
kind of got these other options here and

602
00:27:33,930 --> 00:27:39,090
so you know if we wanted to spend a lot

603
00:27:37,380 --> 00:27:41,190
of time on it I could see this being

604
00:27:39,089 --> 00:27:44,129
something where you would investigate

605
00:27:41,190 --> 00:27:48,299
and say okay let's take a look and think

606
00:27:44,130 --> 00:27:51,360
about do we believe that you know we

607
00:27:48,299 --> 00:27:54,509
could get a good clean way of testing

608
00:27:51,359 --> 00:27:58,049
for rectangular overlap here with a nice

609
00:27:54,509 --> 00:28:01,049
computational geometry algorithm I you

610
00:27:58,049 --> 00:28:02,639
know that doesn't require a lot of a lot

611
00:28:01,049 --> 00:28:06,779
of code and doesn't look like it's going

612
00:28:02,640 --> 00:28:08,340
to be too computationally intensive for

613
00:28:06,779 --> 00:28:09,869
what we actually want you know maybe you

614
00:28:08,339 --> 00:28:12,750
can do something much more efficient

615
00:28:09,869 --> 00:28:15,569
there I'm not sure but I think for the

616
00:28:12,750 --> 00:28:18,269
time being this is probably more what I

617
00:28:15,569 --> 00:28:24,450
would say makes sense and furthermore

618
00:28:18,269 --> 00:28:26,849
what I'd say is if we look at this sort

619
00:28:24,450 --> 00:28:28,500
of grid system you know one thing that

620
00:28:26,849 --> 00:28:30,299
you might say is well you know what if

621
00:28:28,500 --> 00:28:31,440
we have some giant sprite here that's

622
00:28:30,299 --> 00:28:34,559
covering all these things you know we're

623
00:28:31,440 --> 00:28:36,029
going to be adding it to all of these

624
00:28:34,559 --> 00:28:38,250
buckets and it's just going to be a

625
00:28:36,029 --> 00:28:41,789
nightmare and and that's just you know

626
00:28:38,250 --> 00:28:44,839
ah right but what I would point out in

627
00:28:41,789 --> 00:28:48,089
this case is that we're under no

628
00:28:44,839 --> 00:28:50,519
obligation to use the grid because we

629
00:28:48,089 --> 00:28:52,709
can always have a side band of things

630
00:28:50,519 --> 00:28:55,889
that we compared against in addition to

631
00:28:52,710 --> 00:28:58,950
the grid so what we can do if we want to

632
00:28:55,890 --> 00:29:02,460
is just make it so that when things are

633
00:28:58,950 --> 00:29:03,090
roughly grid sized or smaller we put

634
00:29:02,460 --> 00:29:05,549
them in the grid

635
00:29:03,089 --> 00:29:08,909
good but when they're like larger than

636
00:29:05,549 --> 00:29:10,889
you know for grid squares big we can

637
00:29:08,910 --> 00:29:12,120
just leave them in a linear array for

638
00:29:10,890 --> 00:29:14,880
testing because there won't be that many

639
00:29:12,119 --> 00:29:17,250
of them so we can avoid sort of

640
00:29:14,880 --> 00:29:18,990
pathological cases where some giant you

641
00:29:17,250 --> 00:29:21,180
know cloud sprite is being glitter of

642
00:29:18,990 --> 00:29:23,220
this rain if everyone has to test

643
00:29:21,180 --> 00:29:26,840
against it anyway we don't need to go

644
00:29:23,220 --> 00:29:34,140
through the grid to divide it up right

645
00:29:26,839 --> 00:29:36,809
so that's you know sort of a that's a

646
00:29:34,140 --> 00:29:39,060
way that we can prevent certain

647
00:29:36,809 --> 00:29:40,950
pathologically bad things from the of

648
00:29:39,059 --> 00:29:43,500
the grid from happening because we kind

649
00:29:40,950 --> 00:29:45,960
of know our use case and we we know that

650
00:29:43,500 --> 00:29:51,690
that's you know something we can easily

651
00:29:45,960 --> 00:29:54,180
just put as a side band so yeah so if

652
00:29:51,690 --> 00:29:57,120
you look at what's going on at the

653
00:29:54,180 --> 00:29:59,759
moment you can kind of see that you know

654
00:29:57,119 --> 00:30:03,179
if I open up the profile here right I

655
00:29:59,759 --> 00:30:04,710
you know it's it's debug mode so yeah we

656
00:30:03,180 --> 00:30:06,269
can go compile and release mode and it

657
00:30:04,710 --> 00:30:08,430
gets a lot faster but if you take a look

658
00:30:06,269 --> 00:30:10,349
at that you can see that if we open up

659
00:30:08,430 --> 00:30:12,000
the debug view and get all those sprites

660
00:30:10,349 --> 00:30:15,509
in there I mean look at how expensive

661
00:30:12,000 --> 00:30:17,220
it's just crazy expensive right really

662
00:30:15,509 --> 00:30:20,879
really really expensive to do that build

663
00:30:17,220 --> 00:30:23,069
sprite crap I so you know what what we

664
00:30:20,880 --> 00:30:24,720
want look at here is can we go implement

665
00:30:23,069 --> 00:30:26,429
sort of a simple grid thing that would

666
00:30:24,720 --> 00:30:28,610
break that down and make it so that it's

667
00:30:26,430 --> 00:30:31,500
not 93% you know get it down to

668
00:30:28,609 --> 00:30:33,269
something more reasonable and so we're

669
00:30:31,500 --> 00:30:35,250
not afraid that it's going to break as

670
00:30:33,269 --> 00:30:36,539
we as we move forwards and it doesn't

671
00:30:35,250 --> 00:30:38,700
have to be the best thing right like I

672
00:30:36,539 --> 00:30:40,500
said we don't have to do the best

673
00:30:38,700 --> 00:30:42,660
possible thing here we're not trying to

674
00:30:40,500 --> 00:30:44,490
be too prematurely optimization oriented

675
00:30:42,660 --> 00:30:45,840
or anything like that but we just need

676
00:30:44,490 --> 00:30:47,370
something that we can feel comfortable

677
00:30:45,839 --> 00:30:50,009
so like we open up the debug window we

678
00:30:47,369 --> 00:30:50,969
won't have a giant disaster and yet you

679
00:30:50,009 --> 00:30:53,160
know the other way we could approach

680
00:30:50,970 --> 00:30:54,990
that it's a don't bother optimizing this

681
00:30:53,160 --> 00:30:56,640
just go turn off the debug view and let

682
00:30:54,990 --> 00:30:58,140
it be on square I don't know I think we

683
00:30:56,640 --> 00:31:01,020
should just take this opportunity to

684
00:30:58,140 --> 00:31:02,910
optimize it because you know it's it's

685
00:31:01,019 --> 00:31:07,019
obviously slow and obviously we have

686
00:31:02,910 --> 00:31:09,029
good not super expensive ways we can go

687
00:31:07,019 --> 00:31:11,160
in it means sets of in terms of code

688
00:31:09,029 --> 00:31:13,109
ways we can go in and start to attack

689
00:31:11,160 --> 00:31:17,019
that so I think we want to give a little

690
00:31:13,109 --> 00:31:20,750
bit of a try there even at this stage

691
00:31:17,019 --> 00:31:23,480
so you know luckily for us this is an

692
00:31:20,750 --> 00:31:25,460
optimizers dream scenario obviously we

693
00:31:23,480 --> 00:31:27,319
know all our time is spent here so we

694
00:31:25,460 --> 00:31:29,090
know that really all we have to do is

695
00:31:27,319 --> 00:31:30,769
accelerate this function right we just

696
00:31:29,089 --> 00:31:32,209
have to accelerate these checks so

697
00:31:30,769 --> 00:31:34,099
there's really not much mystery to it so

698
00:31:32,210 --> 00:31:36,380
that's a good thing and we know that

699
00:31:34,099 --> 00:31:39,709
really all we need to do to produce the

700
00:31:36,380 --> 00:31:42,410
correct information here is is wit you

701
00:31:39,710 --> 00:31:44,480
know make sure that we always at least

702
00:31:42,410 --> 00:31:46,880
check all rectangles that might

703
00:31:44,480 --> 00:31:49,910
intersect right so right now we're

704
00:31:46,880 --> 00:31:52,070
checking all pairs of rectangles and we

705
00:31:49,910 --> 00:31:55,009
just want to say okay can we winnow down

706
00:31:52,069 --> 00:31:59,359
that number to a small number that get

707
00:31:55,009 --> 00:32:03,919
tested against each other and as long as

708
00:31:59,359 --> 00:32:12,289
we do that we think we'll be fine ok so

709
00:32:03,919 --> 00:32:14,480
how are we going to do that ok so I'm

710
00:32:12,289 --> 00:32:18,829
gonna start with something fairly stupid

711
00:32:14,480 --> 00:32:21,039
and we're going to go from there and see

712
00:32:18,829 --> 00:32:24,379
how the fairly stupid thing holds up and

713
00:32:21,039 --> 00:32:28,460
we'll get more complicated as necessary

714
00:32:24,380 --> 00:32:31,760
so here we are in build sprite graph and

715
00:32:28,460 --> 00:32:33,350
I'm going to say that we have that sort

716
00:32:31,759 --> 00:32:35,839
of grid like I just sort of talked about

717
00:32:33,349 --> 00:32:39,469
I'm gonna say we have a grid and inside

718
00:32:35,839 --> 00:32:42,048
that grid I guess I'm going to store in

719
00:32:39,470 --> 00:32:44,960
fact i guess i have i've got these

720
00:32:42,048 --> 00:32:46,759
sprite bounds right and so yeah i think

721
00:32:44,960 --> 00:32:48,558
i'm just going to make a temporary

722
00:32:46,759 --> 00:32:51,650
little structure here and i'm going to

723
00:32:48,558 --> 00:32:56,899
say that this is our sort grid our sort

724
00:32:51,650 --> 00:32:59,419
grid cell oops and inside the sort grid

725
00:32:56,900 --> 00:33:00,980
cell I guess I don't really need to be

726
00:32:59,419 --> 00:33:03,020
called a sorc red cell I guess I want to

727
00:33:00,980 --> 00:33:06,289
be called a sorc rear entry really i'm

728
00:33:03,019 --> 00:33:07,339
going to use a simple chain here and you

729
00:33:06,289 --> 00:33:08,509
know every time i do a linked list

730
00:33:07,339 --> 00:33:10,639
people get concerned because they're

731
00:33:08,509 --> 00:33:12,319
worried about cash effects I think it's

732
00:33:10,640 --> 00:33:14,270
great they worried about cash effects

733
00:33:12,319 --> 00:33:15,259
that's totally fine remember though

734
00:33:14,269 --> 00:33:16,400
these are all coming from the same

735
00:33:15,259 --> 00:33:19,129
memory unit so they're packed close

736
00:33:16,400 --> 00:33:20,540
together and it's usually not such a

737
00:33:19,130 --> 00:33:21,799
great idea to worry about something like

738
00:33:20,539 --> 00:33:24,889
cash effects so you know you actually

739
00:33:21,798 --> 00:33:26,029
have them and that you care right so i'm

740
00:33:24,890 --> 00:33:27,710
going to write the simplest thing first

741
00:33:26,029 --> 00:33:29,720
and we'll see how it performs and then

742
00:33:27,710 --> 00:33:30,500
you know the time to worry about catch

743
00:33:29,720 --> 00:33:31,460
FX is usually when

744
00:33:30,500 --> 00:33:33,109
you actually start seeing that you're

745
00:33:31,460 --> 00:33:35,930
having performance problems and the 32

746
00:33:33,109 --> 00:33:37,609
cash bags right so anyway so I'm going

747
00:33:35,930 --> 00:33:39,740
to a sort great entry here the sort good

748
00:33:37,609 --> 00:33:41,949
entry is going to be yes quite cash

749
00:33:39,740 --> 00:33:44,000
unfriendly to say the least because of

750
00:33:41,950 --> 00:33:44,750
slightly the next pointer but they're

751
00:33:44,000 --> 00:33:46,339
gonna be packed together so that's

752
00:33:44,750 --> 00:33:47,839
really not gonna be that bad but also

753
00:33:46,339 --> 00:33:51,529
because we're sort of out referencing

754
00:33:47,839 --> 00:33:53,899
right we're saying we're gonna reference

755
00:33:51,529 --> 00:33:56,930
sprite bounds that are out kind of in a

756
00:33:53,900 --> 00:33:59,630
you know in another I don't want to use

757
00:33:56,930 --> 00:34:02,509
the word part of town but yet we're sort

758
00:33:59,630 --> 00:34:05,330
of saying there's a thing that's yeah

759
00:34:02,509 --> 00:34:07,009
elsewhere right so we've got our sorts

760
00:34:05,329 --> 00:34:17,360
right bound here and we're going to say

761
00:34:07,009 --> 00:34:19,519
that that source right band is is the

762
00:34:17,360 --> 00:34:23,090
thing that's in this cell so it's like

763
00:34:19,519 --> 00:34:24,889
an occupant and now I'm just going to

764
00:34:23,090 --> 00:34:26,960
say well alright let's let's make some

765
00:34:24,889 --> 00:34:29,360
of these sort great entries and I'll

766
00:34:26,960 --> 00:34:35,329
make it a pound to find here that's like

767
00:34:29,360 --> 00:34:39,889
you know sort grid width and sort grid

768
00:34:35,329 --> 00:34:41,869
height you know or something like this

769
00:34:39,889 --> 00:34:44,149
and let's just start out by saying it's

770
00:34:41,869 --> 00:34:45,440
16 by 16 and I'm not picking that number

771
00:34:44,148 --> 00:34:49,159
for any reason other than i'm just going

772
00:34:45,440 --> 00:34:50,659
to test it and you know i guess now that

773
00:34:49,159 --> 00:34:52,220
i think about it well we're typically

774
00:34:50,659 --> 00:34:54,710
sorting a sixteen by nine inch screen so

775
00:34:52,219 --> 00:34:57,349
let's do sixteen by nine SI just needs

776
00:34:54,710 --> 00:35:00,679
some numbers to put in there so here's

777
00:34:57,349 --> 00:35:04,610
the grid and we'll we've got the sort

778
00:35:00,679 --> 00:35:06,049
grid height and sort grid with and i'm

779
00:35:04,610 --> 00:35:08,450
doing these in backwards order at the

780
00:35:06,050 --> 00:35:09,920
moment because we'll probably well i

781
00:35:08,449 --> 00:35:13,250
guess you know what i could do them in

782
00:35:09,920 --> 00:35:16,309
same same there's really no reason not

783
00:35:13,250 --> 00:35:22,130
to so now it's XY addressing for this

784
00:35:16,309 --> 00:35:24,230
grid okay so what I want to do is I want

785
00:35:22,130 --> 00:35:27,559
to initialize this thing to zero and say

786
00:35:24,230 --> 00:35:30,260
there are no occupants in it right so

787
00:35:27,559 --> 00:35:35,179
there's nothing nothing in the grid at

788
00:35:30,260 --> 00:35:37,760
the moment it's empty and I'll compile

789
00:35:35,179 --> 00:35:40,190
that make sure real good and now what I

790
00:35:37,760 --> 00:35:44,380
want to do is I want to do a pass over

791
00:35:40,190 --> 00:35:44,380
all of the input nodes that we have

792
00:35:48,789 --> 00:35:58,190
like so so I want to do a pass over all

793
00:35:55,699 --> 00:36:01,460
the nodes and for every node that we

794
00:35:58,190 --> 00:36:03,650
have I need to put it into the grid

795
00:36:01,460 --> 00:36:06,619
everywhere where it currently exists

796
00:36:03,650 --> 00:36:12,829
right so you know I've got to say like

797
00:36:06,619 --> 00:36:15,710
okay it's basically a a for loop inside

798
00:36:12,829 --> 00:36:18,650
the loop where I'm saying I have to

799
00:36:15,710 --> 00:36:22,550
touch all of the grid squares that this

800
00:36:18,650 --> 00:36:25,430
square might touch and I need to record

801
00:36:22,550 --> 00:36:29,750
the fact that this sort grid entry is in

802
00:36:25,429 --> 00:36:36,649
there so in here I've got sort of my my

803
00:36:29,750 --> 00:36:43,940
grid X and I guess I shouldn't put zero

804
00:36:36,650 --> 00:36:46,730
this is something and similarly I've got

805
00:36:43,940 --> 00:36:49,039
my grid why we don't know what these

806
00:36:46,730 --> 00:36:53,559
numbers are we're going to have to

807
00:36:49,039 --> 00:36:56,000
compute them but for each one of those

808
00:36:53,559 --> 00:36:59,179
so for every grid square that I'm

809
00:36:56,000 --> 00:37:01,670
touching I'm going to put a record in

810
00:36:59,179 --> 00:37:04,730
there of my existence so I'm going to do

811
00:37:01,670 --> 00:37:10,130
a sort grade entry entry equals push

812
00:37:04,730 --> 00:37:13,159
struct sort good entry and for each one

813
00:37:10,130 --> 00:37:15,559
of these I'm going to say but its next

814
00:37:13,159 --> 00:37:19,420
equals exactly what you expect it's next

815
00:37:15,559 --> 00:37:26,869
to be and its occupant equals me right

816
00:37:19,420 --> 00:37:29,019
so this is just going to be red X grid

817
00:37:26,869 --> 00:37:29,019
why

818
00:37:29,159 --> 00:37:36,069
and then I'm going to go ahead and say

819
00:37:31,960 --> 00:37:38,949
that the thing in that position is me so

820
00:37:36,070 --> 00:37:43,180
that creates basically a chain and so

821
00:37:38,949 --> 00:37:45,339
now in every in in every grid square

822
00:37:43,179 --> 00:37:47,440
there is now a chain of all of the

823
00:37:45,340 --> 00:37:59,920
sprite bounds that are you know in that

824
00:37:47,440 --> 00:38:01,210
grid square right and that's that so one

825
00:37:59,920 --> 00:38:06,670
of the interesting things about this

826
00:38:01,210 --> 00:38:10,119
that you probably can already see is now

827
00:38:06,670 --> 00:38:14,920
that I'm doing it this way uh it's

828
00:38:10,119 --> 00:38:18,219
unclear that we really need to do a sort

829
00:38:14,920 --> 00:38:20,289
of a separate pairwise check right

830
00:38:18,219 --> 00:38:23,619
because look at what's going to happen

831
00:38:20,289 --> 00:38:26,590
here every time I come in here to add

832
00:38:23,619 --> 00:38:28,690
one of these guys well I could just

833
00:38:26,590 --> 00:38:31,150
check against all the people that are in

834
00:38:28,690 --> 00:38:33,579
the grid right now in this crude square

835
00:38:31,150 --> 00:38:38,349
right I could just check against them

836
00:38:33,579 --> 00:38:45,269
and and and be done right I mean in

837
00:38:38,349 --> 00:38:48,369
theory anyway sir got an itch there

838
00:38:45,269 --> 00:38:51,099
right so I I don't necessarily have to

839
00:38:48,369 --> 00:38:54,789
do this in two passes where I kind of

840
00:38:51,099 --> 00:38:57,009
then do my N squared loop over the thing

841
00:38:54,789 --> 00:38:59,590
I could instead just do the checking

842
00:38:57,010 --> 00:39:02,560
right here and add the edges at this

843
00:38:59,590 --> 00:39:05,860
time and I'll say obviously there's kind

844
00:39:02,559 --> 00:39:07,179
of if you're you know if you're kind of

845
00:39:05,860 --> 00:39:09,280
paying attention at this point you

846
00:39:07,179 --> 00:39:10,599
probably also are starting to think wait

847
00:39:09,280 --> 00:39:12,400
a minute isn't there another thing we

848
00:39:10,599 --> 00:39:13,960
can do and you would be correct about

849
00:39:12,400 --> 00:39:19,750
that but will kind of get to that a

850
00:39:13,960 --> 00:39:21,490
little bit later okay so and I suppose

851
00:39:19,750 --> 00:39:23,559
one thing that might be true about this

852
00:39:21,489 --> 00:39:27,729
is at the moment since we're using the

853
00:39:23,559 --> 00:39:30,009
indices here the the index we're using

854
00:39:27,730 --> 00:39:31,659
note indices I might have to say that

855
00:39:30,010 --> 00:39:33,970
instead of doing it this way I might

856
00:39:31,659 --> 00:39:35,769
have to say that it's the octopus index

857
00:39:33,969 --> 00:39:37,480
now i don't know if that's going to be

858
00:39:35,769 --> 00:39:38,590
the most efficient way to do this but

859
00:39:37,480 --> 00:39:41,230
it's just how the rest of codes written

860
00:39:38,590 --> 00:39:42,700
so for at the moment

861
00:39:41,230 --> 00:39:46,269
I'm going to say that's the way we're

862
00:39:42,699 --> 00:39:52,899
going to do it just for the moment all

863
00:39:46,269 --> 00:39:54,759
right so if I was to do this now I've

864
00:39:52,900 --> 00:39:58,539
got all these grid squares and I need

865
00:39:54,760 --> 00:40:01,630
some way of actually affecting the the

866
00:39:58,539 --> 00:40:03,550
sort I want to jump ahead and say if we

867
00:40:01,630 --> 00:40:08,740
take a look at what happens on recursive

868
00:40:03,550 --> 00:40:12,090
front to back here uh what we could do

869
00:40:08,739 --> 00:40:16,779
is say well we've got this first edge

870
00:40:12,090 --> 00:40:18,550
you know walking thing here that's going

871
00:40:16,780 --> 00:40:22,000
through all of the edges that are coming

872
00:40:18,550 --> 00:40:24,869
out of me I want to know all the edges

873
00:40:22,000 --> 00:40:32,139
that have me as the frontmost person

874
00:40:24,869 --> 00:40:34,240
right but we could just do that test we

875
00:40:32,139 --> 00:40:39,779
could just do this test directly and

876
00:40:34,239 --> 00:40:44,469
never actually save that result at all

877
00:40:39,780 --> 00:40:46,990
right meaning we don't have to actually

878
00:40:44,469 --> 00:40:49,779
create the edges of this graph I did it

879
00:40:46,989 --> 00:40:51,579
sort of to show how that works and to do

880
00:40:49,780 --> 00:40:54,160
the graph algorithm as a graph algorithm

881
00:40:51,579 --> 00:40:56,799
but there really isn't any particular

882
00:40:54,159 --> 00:40:58,989
reason to save those edges they don't

883
00:40:56,800 --> 00:41:01,690
really do any good because we only check

884
00:40:58,989 --> 00:41:02,829
each person one time and we mark them as

885
00:41:01,690 --> 00:41:04,630
visited we're never going to look at

886
00:41:02,829 --> 00:41:06,699
them again so we could just at that

887
00:41:04,630 --> 00:41:09,039
point take that person and test them

888
00:41:06,699 --> 00:41:15,059
against everything right if we wanted to

889
00:41:09,039 --> 00:41:17,739
we could just do that just write that so

890
00:41:15,059 --> 00:41:21,429
what I would say about that is you know

891
00:41:17,739 --> 00:41:24,069
maybe that's a good reason to sort of

892
00:41:21,429 --> 00:41:31,960
say you know right inside here we could

893
00:41:24,070 --> 00:41:38,109
actually do that graph walk we could do

894
00:41:31,960 --> 00:41:40,480
that graph walk sort of directly by just

895
00:41:38,108 --> 00:41:42,009
testing the grid I don't know if I'm

896
00:41:40,480 --> 00:41:43,599
probably not explaining this very well

897
00:41:42,010 --> 00:41:46,690
but point B I'm just trying to say

898
00:41:43,599 --> 00:41:49,989
instead of doing this pass and creating

899
00:41:46,690 --> 00:41:52,929
the edges we could instead also just do

900
00:41:49,989 --> 00:41:54,559
this where replace this function this

901
00:41:52,929 --> 00:41:56,779
part of the function with

902
00:41:54,559 --> 00:42:00,469
just an iteration over the grid that

903
00:41:56,780 --> 00:42:02,269
this guy you know whichever one we r

904
00:42:00,469 --> 00:42:04,819
picked here do it in duration of the

905
00:42:02,269 --> 00:42:15,550
grid that this guy's on and do the front

906
00:42:04,820 --> 00:42:15,550
to back that way right so yeah

907
00:42:21,150 --> 00:42:28,769
I think that's reasonable all right so

908
00:42:25,710 --> 00:42:29,789
let's take a look here at this there

909
00:42:28,769 --> 00:42:31,528
because there's another thing we

910
00:42:29,789 --> 00:42:35,250
actually need to do which is the grid X

911
00:42:31,528 --> 00:42:38,849
span situation we need to actually sort

912
00:42:35,250 --> 00:42:41,068
of compute that stuff so this is sort

913
00:42:38,849 --> 00:42:42,150
bridge span I'm going to call it which

914
00:42:41,068 --> 00:42:44,639
is I'm just going to figure out a way to

915
00:42:42,150 --> 00:42:47,338
compute these numbers here so this is

916
00:42:44,639 --> 00:42:49,348
like a min X then Y well you know what

917
00:42:47,338 --> 00:43:00,538
we already have this it's a rectangle to

918
00:42:49,349 --> 00:43:03,778
I isn't it so this guy right here is

919
00:43:00,539 --> 00:43:06,420
exactly what we want a min x and a min Y

920
00:43:03,778 --> 00:43:08,579
and Max X and max y so we need something

921
00:43:06,420 --> 00:43:14,130
that's essentially going to tell us hey

922
00:43:08,579 --> 00:43:18,119
I need you to give us the span for this

923
00:43:14,130 --> 00:43:22,650
screen space rectangle so this is like

924
00:43:18,119 --> 00:43:25,019
get grids fan and it's going to take a

925
00:43:22,650 --> 00:43:31,160
rectangle too that's just the screen

926
00:43:25,019 --> 00:43:33,538
area right and it's going to return a

927
00:43:31,159 --> 00:43:37,618
result here that we don't know what it

928
00:43:33,539 --> 00:43:40,319
is but then once we do that we can say

929
00:43:37,619 --> 00:43:42,059
okay here's the rectangle to I this is

930
00:43:40,318 --> 00:43:44,369
the grid span we're going to say get

931
00:43:42,059 --> 00:43:48,119
grits fan and we're going to say for the

932
00:43:44,369 --> 00:43:53,809
screen area of the sprite bound that

933
00:43:48,119 --> 00:43:57,690
we're on and we're going to take min x

934
00:43:53,809 --> 00:43:59,490
and x x and i'm assuming that that

935
00:43:57,690 --> 00:44:02,150
probably if it's max x we should do

936
00:43:59,489 --> 00:44:04,489
great like less than or equal to because

937
00:44:02,150 --> 00:44:06,480
that's probably the more sensical

938
00:44:04,489 --> 00:44:08,038
linguistic interpretation there so it's

939
00:44:06,480 --> 00:44:10,349
probably the least likely to be

940
00:44:08,039 --> 00:44:11,910
confusing and have have errors about

941
00:44:10,349 --> 00:44:20,700
what people think is included in what

942
00:44:11,909 --> 00:44:22,318
it's not right and so yeah I would also

943
00:44:20,699 --> 00:44:23,879
like to put some assertions here on our

944
00:44:22,318 --> 00:44:26,250
calculations to make sure they're not

945
00:44:23,880 --> 00:44:27,568
completely bogus well actually I guess

946
00:44:26,250 --> 00:44:28,469
the assertions probably aren't where

947
00:44:27,568 --> 00:44:30,449
we're going to need we're probably going

948
00:44:28,469 --> 00:44:34,230
to want clipping right so we're probably

949
00:44:30,449 --> 00:44:38,368
going to want to say that if result men

950
00:44:34,230 --> 00:44:53,219
x is less than zero you know and I'll

951
00:44:38,369 --> 00:45:01,320
maybe I'll do it this way and same thing

952
00:44:53,219 --> 00:45:02,549
here so this way the the things the

953
00:45:01,320 --> 00:45:15,600
coordinates are all going to be clipped

954
00:45:02,550 --> 00:45:18,359
I so there you go so this is basically

955
00:45:15,599 --> 00:45:28,170
just a thing to make sure that you know

956
00:45:18,358 --> 00:45:34,349
we're always inside the grid after we're

957
00:45:28,170 --> 00:45:36,300
done now I guess there's a slight other

958
00:45:34,349 --> 00:45:39,000
thing here that we might want to do

959
00:45:36,300 --> 00:45:47,730
which is you know maybe we want to do

960
00:45:39,000 --> 00:45:49,500
this and the reason that I say that is

961
00:45:47,730 --> 00:45:51,840
because we may want to return a bull

962
00:45:49,500 --> 00:45:55,440
here which is is this thing even in the

963
00:45:51,840 --> 00:45:57,390
grid at all because if we find that this

964
00:45:55,440 --> 00:46:01,950
thing is outside of the screen area

965
00:45:57,389 --> 00:46:05,639
entirely then we really don't have any

966
00:46:01,949 --> 00:46:13,199
reason to to process it right so you

967
00:46:05,639 --> 00:46:15,868
might argue that this makes a lot more

968
00:46:13,199 --> 00:46:17,250
sense as a code structure because we're

969
00:46:15,869 --> 00:46:19,890
going to say well if this thing comes

970
00:46:17,250 --> 00:46:21,630
back and tells us there is no real you

971
00:46:19,889 --> 00:46:24,239
know this this thing's off the edges of

972
00:46:21,630 --> 00:46:29,119
the screen well we don't need to sort it

973
00:46:24,239 --> 00:46:29,118
anymore because I mean who cares right

974
00:46:32,239 --> 00:46:41,839
just discard it it doesn't matter now

975
00:46:36,090 --> 00:46:44,880
that's not one hundred percent true so

976
00:46:41,840 --> 00:46:46,140
because this is a topological sort we

977
00:46:44,880 --> 00:46:48,000
might get into situations where

978
00:46:46,139 --> 00:46:49,529
something off-screen going off the

979
00:46:48,000 --> 00:46:51,239
screen changes the topological sort and

980
00:46:49,530 --> 00:46:54,180
you get some kind of a pop but my

981
00:46:51,239 --> 00:46:57,779
expectation would be that if that was

982
00:46:54,179 --> 00:47:01,019
true we probably have a problem with the

983
00:46:57,780 --> 00:47:02,280
sort anyway because you know if it's not

984
00:47:01,019 --> 00:47:03,239
producing a stable sort in that

985
00:47:02,280 --> 00:47:05,850
situation we're probably going to have

986
00:47:03,239 --> 00:47:08,250
to adjust the rule for other reasons now

987
00:47:05,849 --> 00:47:10,110
don't know that that's true we'll see if

988
00:47:08,250 --> 00:47:14,909
it turns out it's pretty easy for us to

989
00:47:10,110 --> 00:47:20,269
get rid of that that discard if it turns

990
00:47:14,909 --> 00:47:26,399
out that that's not true right alright

991
00:47:20,269 --> 00:47:29,550
so here's the grid X grid why testing

992
00:47:26,400 --> 00:47:30,750
and my assumption is that as we come

993
00:47:29,550 --> 00:47:33,120
through here like I said we could

994
00:47:30,750 --> 00:47:36,269
probably just do the edge adding right

995
00:47:33,119 --> 00:47:39,059
here now there is a little bit of a

996
00:47:36,269 --> 00:47:45,000
downside to this and I'm not sure

997
00:47:39,059 --> 00:47:46,110
exactly how to I'm not sure exactly how

998
00:47:45,000 --> 00:47:48,570
I want to deal with this but I suspect

999
00:47:46,110 --> 00:47:50,820
that I will need a generation number

1000
00:47:48,570 --> 00:47:53,010
here and the reason that I suspect I'll

1001
00:47:50,820 --> 00:47:55,380
need a generation number or something if

1002
00:47:53,010 --> 00:47:56,460
I was to do it this is why we sort of

1003
00:47:55,380 --> 00:47:59,280
saying I'd like to do it out here

1004
00:47:56,460 --> 00:48:01,380
instead is because there would be

1005
00:47:59,280 --> 00:48:03,300
nothing from stopped because I'm doing

1006
00:48:01,380 --> 00:48:05,010
this / grid cell there'd be nothing

1007
00:48:03,300 --> 00:48:06,870
stopping me from adding multiple edges

1008
00:48:05,010 --> 00:48:08,190
well you know what I guess doesn't

1009
00:48:06,869 --> 00:48:09,299
matter if I had multiple edges if I have

1010
00:48:08,190 --> 00:48:11,900
multiple edges doesn't matter because

1011
00:48:09,300 --> 00:48:15,570
it'll it'll get cleaned up in this past

1012
00:48:11,900 --> 00:48:20,369
let me try to be a little bit less out

1013
00:48:15,570 --> 00:48:21,660
spit in my head on that so let's say

1014
00:48:20,369 --> 00:48:27,659
I've got a situation that looks like

1015
00:48:21,659 --> 00:48:30,299
this right here is a a rectangle and

1016
00:48:27,659 --> 00:48:32,639
here is another rectangle now obviously

1017
00:48:30,300 --> 00:48:34,620
these two rectangles overlap let's call

1018
00:48:32,639 --> 00:48:38,159
this one a let's call this one be so

1019
00:48:34,619 --> 00:48:45,078
obviously we want an a you know in front

1020
00:48:38,159 --> 00:48:50,548
of its in front of

1021
00:48:45,079 --> 00:48:51,839
be so we want to add that edge but if

1022
00:48:50,548 --> 00:48:53,639
you look at what's going to happen here

1023
00:48:51,838 --> 00:48:55,498
we're going to be looking at it from the

1024
00:48:53,639 --> 00:48:57,778
perspective of grid cells for testing

1025
00:48:55,498 --> 00:49:00,238
and so what we're going to see is we're

1026
00:48:57,778 --> 00:49:02,608
going to see be twice when we when we

1027
00:49:00,239 --> 00:49:04,588
get rate through and we'll add if we

1028
00:49:02,608 --> 00:49:07,168
just did naive testing we would end up

1029
00:49:04,588 --> 00:49:09,599
adding it when we did this sells tests

1030
00:49:07,168 --> 00:49:11,429
we dad at one time and we do this sells

1031
00:49:09,599 --> 00:49:16,109
test we dad at one time and we end up

1032
00:49:11,429 --> 00:49:17,548
with two edges to the same note but like

1033
00:49:16,108 --> 00:49:20,808
I was saying I guess it doesn't matter

1034
00:49:17,548 --> 00:49:22,829
because it gets cleaned up in this phase

1035
00:49:20,809 --> 00:49:25,380
because here we already would have

1036
00:49:22,829 --> 00:49:27,929
visited it so we wouldn't test it and

1037
00:49:25,380 --> 00:49:29,429
we'd be fine now one problem with it is

1038
00:49:27,929 --> 00:49:31,829
I think it would think everything was a

1039
00:49:29,429 --> 00:49:34,858
cycle all the time so it would kind of

1040
00:49:31,829 --> 00:49:38,028
break our cycle testing and I don't

1041
00:49:34,858 --> 00:49:40,708
really know what we would do about that

1042
00:49:38,028 --> 00:49:42,659
since we don't super care about the

1043
00:49:40,708 --> 00:49:45,298
cycle testing I'm not sure how much that

1044
00:49:42,659 --> 00:49:47,608
matters but if we needed to start

1045
00:49:45,298 --> 00:49:50,668
breaking cycles intelligently it might

1046
00:49:47,608 --> 00:49:53,369
and so the problem that I see here is

1047
00:49:50,668 --> 00:49:55,048
just figuring out well okay if I didn't

1048
00:49:53,369 --> 00:49:58,528
want to do that how would I make sure

1049
00:49:55,048 --> 00:50:01,798
that I only ever test this against test

1050
00:49:58,528 --> 00:50:05,429
this pair one time even if I encounter

1051
00:50:01,798 --> 00:50:08,130
the same one in multiple grids squares

1052
00:50:05,429 --> 00:50:10,289
right and in order to do that I would

1053
00:50:08,130 --> 00:50:12,209
need like I said some kind of a

1054
00:50:10,289 --> 00:50:21,599
generation number to prevent me from

1055
00:50:12,208 --> 00:50:23,098
doing that test ad infinitum and so we

1056
00:50:21,599 --> 00:50:24,599
could do that or we could not do that I

1057
00:50:23,099 --> 00:50:25,798
don't know we'll see in a second whether

1058
00:50:24,599 --> 00:50:26,969
we want do that or not it doesn't affect

1059
00:50:25,798 --> 00:50:28,199
the algorithm one way or the other but

1060
00:50:26,969 --> 00:50:29,519
it affects whether we can do the cycle

1061
00:50:28,199 --> 00:50:32,759
testing in the way that I was doing it

1062
00:50:29,518 --> 00:50:36,538
and so you know we'll consider it it's a

1063
00:50:32,759 --> 00:50:42,289
pretty easy change to make so here we

1064
00:50:36,539 --> 00:50:45,390
are with our sort of bucketing there and

1065
00:50:42,289 --> 00:50:48,089
you know in the the get greens grid span

1066
00:50:45,389 --> 00:50:49,828
call obviously I've got this result

1067
00:50:48,088 --> 00:50:51,748
rectangle coming in and what I need to

1068
00:50:49,829 --> 00:50:56,519
do for this result rectangle is I need

1069
00:50:51,748 --> 00:50:58,739
to sort of now i need to bin the screen

1070
00:50:56,518 --> 00:51:02,399
area that's coming in verse

1071
00:50:58,739 --> 00:51:04,229
is the total screen area so I I guess we

1072
00:51:02,400 --> 00:51:15,510
would say this is maybe else I'll call

1073
00:51:04,230 --> 00:51:16,469
this the source in this the desk so what

1074
00:51:15,510 --> 00:51:18,210
we need to do is figure out a way of

1075
00:51:16,469 --> 00:51:20,939
getting the source into those buckets

1076
00:51:18,210 --> 00:51:24,869
now we've done this before right this is

1077
00:51:20,940 --> 00:51:29,400
a this is a truncation kind of a of a

1078
00:51:24,869 --> 00:51:31,380
process right and we need one more piece

1079
00:51:29,400 --> 00:51:34,230
of information or to do it which is

1080
00:51:31,380 --> 00:51:37,800
going to be how do we know how big the

1081
00:51:34,230 --> 00:51:39,240
actual cells are right so we need

1082
00:51:37,800 --> 00:51:43,470
something here that's going to be like a

1083
00:51:39,239 --> 00:51:46,769
v2 which is our seldom however big the

1084
00:51:43,469 --> 00:51:49,349
grid you know cells are but once we know

1085
00:51:46,769 --> 00:51:50,880
how big this the cell the cells are it's

1086
00:51:49,349 --> 00:51:53,069
a pretty straightforward computation for

1087
00:51:50,880 --> 00:51:57,210
us like I said we've done it many times

1088
00:51:53,070 --> 00:51:59,100
before all we have to do is take one of

1089
00:51:57,210 --> 00:52:06,059
the source inputs right like get min

1090
00:51:59,099 --> 00:52:07,529
corner of the source so if we were to

1091
00:52:06,059 --> 00:52:09,840
look at what the minimum corner was and

1092
00:52:07,530 --> 00:52:12,269
we want to figure out where that is in

1093
00:52:09,840 --> 00:52:14,789
our cell space we just have to do a

1094
00:52:12,269 --> 00:52:16,710
multiplication by whatever the inverse

1095
00:52:14,789 --> 00:52:19,590
of that cell look we want to divide by

1096
00:52:16,710 --> 00:52:20,760
the cell dimp right now we don't want to

1097
00:52:19,590 --> 00:52:22,470
compute that in verse every time

1098
00:52:20,760 --> 00:52:24,800
probably I mean although these days

1099
00:52:22,469 --> 00:52:27,599
divides are cheap we probably just could

1100
00:52:24,800 --> 00:52:29,310
but you know let's say we pre inverted

1101
00:52:27,599 --> 00:52:31,920
it so we're just going to do an inverse

1102
00:52:29,309 --> 00:52:33,690
seldom times the min corner in this case

1103
00:52:31,920 --> 00:52:36,450
it's a hadamard product because we

1104
00:52:33,690 --> 00:52:39,000
actually want to multiply you know the x

1105
00:52:36,449 --> 00:52:42,389
and x the x and the y by the y but that

1106
00:52:39,000 --> 00:52:48,358
gives us back what's going to be our

1107
00:52:42,389 --> 00:52:51,599
actual min value this is like our men in

1108
00:52:48,358 --> 00:52:53,909
float space right and the same would be

1109
00:52:51,599 --> 00:52:56,099
true for the max the exact same process

1110
00:52:53,909 --> 00:52:59,969
would give us our max corner where that

1111
00:52:56,099 --> 00:53:02,969
is inside the grid once I have the men

1112
00:52:59,969 --> 00:53:04,919
in the max that I'm going to use for the

1113
00:53:02,969 --> 00:53:07,649
grid now it's a simple matter of taking

1114
00:53:04,920 --> 00:53:11,700
those and truncating them down to make

1115
00:53:07,650 --> 00:53:12,480
whatever the actual integer value is

1116
00:53:11,699 --> 00:53:14,579
that they would go

1117
00:53:12,480 --> 00:53:17,369
in for the grid right so now I'm just

1118
00:53:14,579 --> 00:53:20,219
going to say well okay my destination

1119
00:53:17,369 --> 00:53:22,490
min x is just the men are as X and we're

1120
00:53:20,219 --> 00:53:28,980
just truncating this down so this is a

1121
00:53:22,489 --> 00:53:31,199
truncate down and in each case you know

1122
00:53:28,980 --> 00:53:37,579
it's it's pretty pretty darn straight

1123
00:53:31,199 --> 00:53:39,989
forward right so that's that's really it

1124
00:53:37,579 --> 00:53:42,449
and so what I need to do now is I just

1125
00:53:39,989 --> 00:53:43,589
need to have my inverse cell dimension

1126
00:53:42,449 --> 00:53:45,899
there I need to figure out what that's

1127
00:53:43,590 --> 00:53:50,850
actually going to be that inverse cell

1128
00:53:45,900 --> 00:53:55,650
dimension is just going to be you know

1129
00:53:50,849 --> 00:54:01,829
one over it's just going to be 1 over

1130
00:53:55,650 --> 00:54:04,200
whatever the cell dims actually are and

1131
00:54:01,829 --> 00:54:06,630
so all I need to figure out in order to

1132
00:54:04,199 --> 00:54:09,689
finish is I need to figure out ooh I'm

1133
00:54:06,630 --> 00:54:12,030
not time I need to figure out what is

1134
00:54:09,690 --> 00:54:14,130
the dimension of one of these grid cells

1135
00:54:12,030 --> 00:54:17,490
well I would need to know the screen

1136
00:54:14,130 --> 00:54:18,900
area but if I knew the screen area so

1137
00:54:17,489 --> 00:54:21,629
like if I knew the screen width in

1138
00:54:18,900 --> 00:54:22,740
pixels right or whatever it is it

1139
00:54:21,630 --> 00:54:24,809
actually isn't even really matter but

1140
00:54:22,739 --> 00:54:26,909
whatever the demarcation is of the

1141
00:54:24,809 --> 00:54:28,679
screen that these area that these nodes

1142
00:54:26,909 --> 00:54:30,809
are coming in I just need to take

1143
00:54:28,679 --> 00:54:35,089
whatever that screen with is divide it

1144
00:54:30,809 --> 00:54:41,849
by the number of these cells that I have

1145
00:54:35,090 --> 00:54:43,920
right and that's going to give me the

1146
00:54:41,849 --> 00:54:45,630
actual value that I need now if you see

1147
00:54:43,920 --> 00:54:46,829
what happens there I've got this divide

1148
00:54:45,630 --> 00:54:49,440
and I'm immediately going to invert it

1149
00:54:46,829 --> 00:54:52,170
if I want to I can just do the divide

1150
00:54:49,440 --> 00:54:56,010
the other way round first time out and

1151
00:54:52,170 --> 00:54:57,960
have my inverse seldom directly and you

1152
00:54:56,010 --> 00:55:02,430
know that's probably a easier thing to

1153
00:54:57,960 --> 00:55:06,650
do right all right so let's take a look

1154
00:55:02,429 --> 00:55:06,649
at this oops

1155
00:55:21,480 --> 00:55:26,949
and see can we get the information that

1156
00:55:25,300 --> 00:55:29,230
we actually need here right because when

1157
00:55:26,949 --> 00:55:31,599
we do the build sprite graph and we have

1158
00:55:29,230 --> 00:55:34,809
the game render command stuff happening

1159
00:55:31,599 --> 00:55:37,529
here I need some way of getting that

1160
00:55:34,809 --> 00:55:39,610
information about the size of the screen

1161
00:55:37,530 --> 00:55:42,580
right which I don't know that we

1162
00:55:39,610 --> 00:55:44,950
actually have yet so let's see Hey look

1163
00:55:42,579 --> 00:55:46,809
we've got width and height and I think

1164
00:55:44,949 --> 00:55:51,189
that's all we need so what that means is

1165
00:55:46,809 --> 00:55:55,650
when i call my what i call my function

1166
00:55:51,190 --> 00:56:02,860
here i should be able to just pass it

1167
00:55:55,650 --> 00:56:11,700
screen width and height there should you

1168
00:56:02,860 --> 00:56:11,700
cast it certainly and that's easy-peasy

1169
00:56:13,230 --> 00:56:23,170
ok so if i go to commands with and

1170
00:56:16,690 --> 00:56:26,470
commands height i build it and let's see

1171
00:56:23,170 --> 00:56:31,019
what else we got here syntax error get

1172
00:56:26,469 --> 00:56:34,659
grid span oops we only have be 32 s here

1173
00:56:31,019 --> 00:56:36,789
and i agree with that so what we want to

1174
00:56:34,659 --> 00:56:44,759
do here is have a be 32 that's like

1175
00:56:36,789 --> 00:56:44,759
inside with something

1176
00:56:57,960 --> 00:57:05,199
okay so this is a little bit sloppy here

1177
00:57:01,420 --> 00:57:07,090
but what we need to do is just go okay

1178
00:57:05,199 --> 00:57:11,829
we want to know whether this thing is

1179
00:57:07,090 --> 00:57:15,280
entirely outside of the screen area like

1180
00:57:11,829 --> 00:57:17,139
completely right and now I think about

1181
00:57:15,280 --> 00:57:19,390
it you know maybe this was all kind of

1182
00:57:17,139 --> 00:57:21,009
stupid although well no I don't know

1183
00:57:19,389 --> 00:57:22,869
because I kind of want that to be

1184
00:57:21,010 --> 00:57:24,850
uniform function but what I was thinking

1185
00:57:22,869 --> 00:57:26,289
as well you know we need to know the

1186
00:57:24,849 --> 00:57:27,909
screen within the screen height in order

1187
00:57:26,289 --> 00:57:30,759
for it to do the rejection which means i

1188
00:57:27,909 --> 00:57:32,589
would need to pass those as well to get

1189
00:57:30,760 --> 00:57:33,760
grids fan which is kind of a pain right

1190
00:57:32,590 --> 00:57:35,730
it would be nice it was a little cleaner

1191
00:57:33,760 --> 00:57:40,300
than that but what are you going to do

1192
00:57:35,730 --> 00:57:44,500
so if i want to test here to see whether

1193
00:57:40,300 --> 00:57:47,590
this is actually inside or not what i

1194
00:57:44,500 --> 00:57:49,960
could do is right here just say like if

1195
00:57:47,590 --> 00:57:54,400
rectangles intersect and have like you

1196
00:57:49,960 --> 00:57:57,970
know screen area and sore screen total

1197
00:57:54,400 --> 00:58:00,610
screen like that and source right and if

1198
00:57:57,969 --> 00:58:03,839
they intersect then it's inside and in

1199
00:58:00,610 --> 00:58:03,840
fact I could to actually do it this way

1200
00:58:14,268 --> 00:58:18,538
and then I could just pass a rectangle

1201
00:58:17,039 --> 00:58:26,910
that was the screen rectangle right

1202
00:58:18,539 --> 00:58:28,440
that's certainly plausible and if I want

1203
00:58:26,909 --> 00:58:31,469
to do that I'd just say like all right

1204
00:58:28,440 --> 00:58:35,338
I've got a rectangle here it's the total

1205
00:58:31,469 --> 00:58:38,309
screen rectangle it's a recommend max

1206
00:58:35,338 --> 00:58:41,038
kind of situation the min is just going

1207
00:58:38,309 --> 00:58:57,059
to be 00 the max is going to be you know

1208
00:58:41,039 --> 00:59:06,809
screen with screen height okay so yeah

1209
00:58:57,059 --> 00:59:16,440
oops that's what's be right down to what

1210
00:59:06,809 --> 00:59:18,509
are you complaining about sir Sir I see

1211
00:59:16,440 --> 00:59:20,489
what you are complaining about you are

1212
00:59:18,509 --> 00:59:24,778
complaining about those which are not

1213
00:59:20,489 --> 00:59:27,778
supposed to be there okay so get grid

1214
00:59:24,778 --> 00:59:29,489
span now kind of has some stuff it's got

1215
00:59:27,778 --> 00:59:30,929
to take it's got to take the total

1216
00:59:29,489 --> 00:59:35,699
screen it's got to take the inverse

1217
00:59:30,929 --> 00:59:37,669
seldom it's got to take the screen area

1218
00:59:35,699 --> 00:59:44,068
and then it's got to take the

1219
00:59:37,670 --> 00:59:53,068
destination not a huge deal uh these are

1220
00:59:44,068 --> 00:59:59,538
Esther d2's I guess and this requires an

1221
00:59:53,068 --> 01:00:03,808
arena and I think this occupant index

1222
00:59:59,539 --> 01:00:08,699
but i believe just in time for the QA i

1223
01:00:03,809 --> 01:00:11,400
believe we now are bucketing so yeah we

1224
01:00:08,699 --> 01:00:13,889
haven't quite gotten to the point where

1225
01:00:11,400 --> 01:00:16,139
we're actually using it for acceleration

1226
01:00:13,889 --> 01:00:18,239
so now we're kind of just bucketing and

1227
01:00:16,139 --> 01:00:20,068
we're not actually doing anything with

1228
01:00:18,239 --> 01:00:23,059
the buckets but that can be tomorrow's

1229
01:00:20,068 --> 01:00:23,058
job

1230
01:00:32,458 --> 01:00:36,208
it's QA time

1231
01:01:25,519 --> 01:01:30,960
the mic D X using the grid system do you

1232
01:01:29,070 --> 01:01:35,750
think that would be good to use for

1233
01:01:30,960 --> 01:01:39,119
pixel perfect collision yeah I mean

1234
01:01:35,750 --> 01:01:43,409
pixel perfect collision is is actually

1235
01:01:39,119 --> 01:01:49,829
not really related I guess is what I

1236
01:01:43,409 --> 01:01:58,759
would say let me try to explain why it's

1237
01:01:49,829 --> 01:02:04,019
not so you know fundamentally speaking

1238
01:01:58,760 --> 01:02:06,960
you've got some sprites right and what

1239
01:02:04,019 --> 01:02:11,250
you want to know is do these two things

1240
01:02:06,960 --> 01:02:13,940
intersect and if I want to know whether

1241
01:02:11,250 --> 01:02:17,579
the pixels of them actually intersect

1242
01:02:13,940 --> 01:02:20,099
well obviously the first question is do

1243
01:02:17,579 --> 01:02:21,630
the rectangles intersect because you

1244
01:02:20,099 --> 01:02:22,949
would never start testing the pixels if

1245
01:02:21,630 --> 01:02:27,390
you hadn't tested the rectangles

1246
01:02:22,949 --> 01:02:32,579
themselves right so once I determine

1247
01:02:27,389 --> 01:02:35,579
that these two rectangles intersect then

1248
01:02:32,579 --> 01:02:39,090
I have to look at the pixels in these

1249
01:02:35,579 --> 01:02:43,769
two sub rectangles of each sprite right

1250
01:02:39,090 --> 01:02:46,740
and that is a separate pixel test so I

1251
01:02:43,769 --> 01:02:51,269
have to do the wreck test and then I

1252
01:02:46,739 --> 01:02:54,899
have to do the pixel test so we're doing

1253
01:02:51,269 --> 01:02:57,659
this stage it doesn't matter whether

1254
01:02:54,900 --> 01:02:59,670
this stage is happening or not right

1255
01:02:57,659 --> 01:03:01,409
it's completely unrelated it's just

1256
01:02:59,670 --> 01:03:03,500
something you would do extra if you

1257
01:03:01,409 --> 01:03:05,639
wanted to do pixel accurate testing and

1258
01:03:03,500 --> 01:03:08,010
furthermore what you'd probably have to

1259
01:03:05,639 --> 01:03:10,230
do if you wanted it to be fast is you'd

1260
01:03:08,010 --> 01:03:13,050
probably have to break these up into

1261
01:03:10,230 --> 01:03:14,250
blocks that said whether there was stuff

1262
01:03:13,050 --> 01:03:15,720
in them maybe so you didn't have to

1263
01:03:14,250 --> 01:03:17,699
check every pixel if you were doing a

1264
01:03:15,719 --> 01:03:20,159
high resolution so you'd probably need

1265
01:03:17,699 --> 01:03:24,359
to do some sort of grid-based encoding

1266
01:03:20,159 --> 01:03:27,029
of your sprite as well but really the

1267
01:03:24,360 --> 01:03:28,890
grid-based binning it doesn't have it

1268
01:03:27,030 --> 01:03:31,140
whether you were doing a pixel test or a

1269
01:03:28,889 --> 01:03:33,119
wreck test you're always going to test

1270
01:03:31,139 --> 01:03:35,250
the rectangles first and it doesn't

1271
01:03:33,119 --> 01:03:37,440
matter what you're doing down the line

1272
01:03:35,250 --> 01:03:38,760
from that it's it's the same at this

1273
01:03:37,440 --> 01:03:40,619
point either way

1274
01:03:38,760 --> 01:03:42,390
so whether you decide to use a pixel

1275
01:03:40,619 --> 01:03:44,639
test or not you wouldn't really care i

1276
01:03:42,389 --> 01:03:46,469
don't think about the inflammation at

1277
01:03:44,639 --> 01:03:54,690
this level would be the same in both

1278
01:03:46,469 --> 01:03:56,399
cases would be my would be my guess thus

1279
01:03:54,690 --> 01:03:58,139
isaac why not have the debug overlay

1280
01:03:56,400 --> 01:03:59,849
rendered to a separate layer and have it

1281
01:03:58,139 --> 01:04:02,279
draw in the order submitted instead of

1282
01:03:59,849 --> 01:04:03,869
wasting time sorting uh yeah i'm not

1283
01:04:02,280 --> 01:04:07,019
opposed to that like i said that's a

1284
01:04:03,869 --> 01:04:11,190
that was exactly i think literally quite

1285
01:04:07,019 --> 01:04:14,190
literally what i said when i was

1286
01:04:11,190 --> 01:04:19,829
pointing that out but the reason was

1287
01:04:14,190 --> 01:04:24,150
because i know we're going to have a lot

1288
01:04:19,829 --> 01:04:25,920
of sprites the debug system now is the

1289
01:04:24,150 --> 01:04:29,670
best stress test because it happens to

1290
01:04:25,920 --> 01:04:31,829
have a ton of sprites so since I just

1291
01:04:29,670 --> 01:04:33,869
wanted to do this anyway I want to make

1292
01:04:31,829 --> 01:04:35,909
sure it's fast enough I don't think

1293
01:04:33,869 --> 01:04:39,869
there's any point in doing that for the

1294
01:04:35,909 --> 01:04:42,329
debug layer because I think this will be

1295
01:04:39,869 --> 01:04:44,429
plenty fast enough right what I'm about

1296
01:04:42,329 --> 01:04:46,529
to do I think we'll be fine and so at

1297
01:04:44,429 --> 01:04:49,469
that point I just be wasting time if I

1298
01:04:46,530 --> 01:04:51,420
also did some other solution to make

1299
01:04:49,469 --> 01:04:53,309
sure the debug layer didn't have to go

1300
01:04:51,420 --> 01:04:57,019
through the sort because i want the sort

1301
01:04:53,309 --> 01:04:57,019
to be fast enough for that

1302
01:05:39,400 --> 01:05:43,820
sighs like I think a sort free mode

1303
01:05:41,690 --> 01:05:45,440
would work well with a cutscene as well

1304
01:05:43,820 --> 01:05:48,200
well but the cutscene works well with

1305
01:05:45,440 --> 01:05:50,659
the sort mode though so we don't really

1306
01:05:48,199 --> 01:05:54,250
need to have like different modes if

1307
01:05:50,659 --> 01:05:54,250
there's no reason for them right

1308
01:06:51,019 --> 01:06:56,019
any other programming questions from

1309
01:06:53,659 --> 01:06:56,019
today

1310
01:07:09,608 --> 01:07:14,148
miss assuming again today why do you not

1311
01:07:12,559 --> 01:07:15,589
use the summed rectangle of the hero

1312
01:07:14,148 --> 01:07:17,389
sprites for draw sorting and draw the

1313
01:07:15,588 --> 01:07:20,449
integral parts in a set order that is

1314
01:07:17,389 --> 01:07:22,129
exactly what we were going to do I don't

1315
01:07:20,449 --> 01:07:24,048
know if you plot that before when I

1316
01:07:22,130 --> 01:07:26,539
saying now that we have the ability in

1317
01:07:24,048 --> 01:07:28,088
the sorting thing to just say this thing

1318
01:07:26,539 --> 01:07:31,640
sorts in front of this other thing I

1319
01:07:28,088 --> 01:07:33,679
probably will convert to using that but

1320
01:07:31,639 --> 01:07:37,219
at the moment we haven't augmented the

1321
01:07:33,679 --> 01:07:38,778
render system to know that meaning we

1322
01:07:37,219 --> 01:07:40,278
don't have a way of actually sending

1323
01:07:38,778 --> 01:07:42,079
that information down the pipeline and

1324
01:07:40,278 --> 01:07:43,969
in the past we didn't have a way of

1325
01:07:42,079 --> 01:07:46,849
acting on that information either really

1326
01:07:43,969 --> 01:07:48,918
although I guess we could have probably

1327
01:07:46,849 --> 01:07:52,099
hacked it the same way by just saying

1328
01:07:48,918 --> 01:07:54,068
hey sort this like virtual nub that's

1329
01:07:52,099 --> 01:07:58,489
like a couple different bitmaps together

1330
01:07:54,068 --> 01:08:00,639
right so we could do that but know that

1331
01:07:58,489 --> 01:08:04,478
that is exactly what I would like to do

1332
01:08:00,639 --> 01:08:04,478
we just haven't gotten there yet

1333
01:08:16,338 --> 01:08:18,429
you

1334
01:08:25,430 --> 01:08:34,190
if you can something exciting happening

1335
01:08:28,039 --> 01:08:43,100
over at Molly rocket sorry not what does

1336
01:08:34,189 --> 01:08:45,049
that refer to dan 020 can using c

1337
01:08:43,100 --> 01:08:54,650
programming optimize the game more than

1338
01:08:45,050 --> 01:08:59,539
C++ uh you know it's a tough question to

1339
01:08:54,649 --> 01:09:07,729
answer because it depends on what you

1340
01:08:59,539 --> 01:09:09,949
mean by optimized right I in general

1341
01:09:07,729 --> 01:09:14,509
unless something very strange is going

1342
01:09:09,949 --> 01:09:16,789
on c is a subset of C++ to a certain

1343
01:09:14,510 --> 01:09:18,260
extent CC 99 does I think have some

1344
01:09:16,789 --> 01:09:20,180
things that people this doesn't have eat

1345
01:09:18,260 --> 01:09:23,079
though oddly enough but I don't think

1346
01:09:20,180 --> 01:09:25,430
they're super optimization related right

1347
01:09:23,079 --> 01:09:30,350
meaning there's a couple's in fact

1348
01:09:25,430 --> 01:09:33,740
syntactic things or whatever but you

1349
01:09:30,350 --> 01:09:36,740
know C and C++ as far as optimization is

1350
01:09:33,739 --> 01:09:38,989
concerned in general anything that you

1351
01:09:36,739 --> 01:09:41,750
could have written in c you can also

1352
01:09:38,989 --> 01:09:47,000
write in C++ for the most part there's

1353
01:09:41,750 --> 01:09:52,819
very little outside of the Venn diagram

1354
01:09:47,000 --> 01:09:56,569
there right I so really the reason that

1355
01:09:52,819 --> 01:09:59,689
you know C is sometimes or might why you

1356
01:09:56,569 --> 01:10:02,989
might perceive or why one could maybe

1357
01:09:59,689 --> 01:10:05,149
make a statement like C is fat you know

1358
01:10:02,989 --> 01:10:08,090
it can be optimized better than C++ or C

1359
01:10:05,149 --> 01:10:09,829
is more obvious is not because you

1360
01:10:08,090 --> 01:10:14,090
couldn't have written the same program

1361
01:10:09,829 --> 01:10:16,670
in C++ it's because C++ typically has a

1362
01:10:14,090 --> 01:10:20,960
lot of features in it that encourage

1363
01:10:16,670 --> 01:10:22,430
slow programming and since C just

1364
01:10:20,960 --> 01:10:23,840
doesn't have those features the

1365
01:10:22,430 --> 01:10:26,990
programmer is not going to accidentally

1366
01:10:23,840 --> 01:10:30,110
use them right but but if the programmer

1367
01:10:26,989 --> 01:10:34,010
simply doesn't do those things that are

1368
01:10:30,109 --> 01:10:36,889
slower in C++ then it's not like the

1369
01:10:34,010 --> 01:10:39,789
language itself is somehow going to be

1370
01:10:36,890 --> 01:10:43,490
slower right

1371
01:10:39,789 --> 01:10:46,579
and and so to elaborate that on that

1372
01:10:43,489 --> 01:10:49,809
just a little bit is c++ you know has a

1373
01:10:46,579 --> 01:10:52,279
number of features that are designed to

1374
01:10:49,810 --> 01:10:54,740
sort of do a lot of things automatically

1375
01:10:52,279 --> 01:10:58,759
right for example you know constructors

1376
01:10:54,739 --> 01:11:00,500
and operator overloading and you know it

1377
01:10:58,760 --> 01:11:03,260
conversions that you can define all

1378
01:11:00,500 --> 01:11:06,409
these sorts of things what that means is

1379
01:11:03,260 --> 01:11:08,600
that any line of code in C++ might

1380
01:11:06,409 --> 01:11:10,819
although it looks very innocuous might

1381
01:11:08,600 --> 01:11:13,640
actually do hundreds of thousands of

1382
01:11:10,819 --> 01:11:15,559
cycles worth of stuff and so it's very

1383
01:11:13,640 --> 01:11:17,539
easy for a C++ programmer to

1384
01:11:15,560 --> 01:11:18,920
accidentally write code that is very

1385
01:11:17,539 --> 01:11:20,029
slow without really thinking about it

1386
01:11:18,920 --> 01:11:21,800
because they just did a few little

1387
01:11:20,029 --> 01:11:23,479
things and oh they didn't realize this

1388
01:11:21,800 --> 01:11:25,520
was going to call like 50 functions and

1389
01:11:23,479 --> 01:11:30,649
do 20 different conversions and all this

1390
01:11:25,520 --> 01:11:34,010
other stuff right so in that sense C++

1391
01:11:30,649 --> 01:11:36,379
can be a lot slower right but it's only

1392
01:11:34,010 --> 01:11:39,320
because you were using those features of

1393
01:11:36,380 --> 01:11:42,710
C++ the language gave you the

1394
01:11:39,319 --> 01:11:46,069
opportunity to do something slow and you

1395
01:11:42,710 --> 01:11:47,810
took it right but it's not like you

1396
01:11:46,069 --> 01:11:50,750
couldn't have just written the

1397
01:11:47,810 --> 01:11:54,380
equivalent see version still in C++

1398
01:11:50,750 --> 01:11:55,850
right so for the most part unless

1399
01:11:54,380 --> 01:11:59,150
there's something that I'm not that's

1400
01:11:55,850 --> 01:12:03,079
like slipping my mind I can't think of

1401
01:11:59,149 --> 01:12:05,599
anything inherently slower about C++

1402
01:12:03,079 --> 01:12:08,449
code than C code it's just about whether

1403
01:12:05,600 --> 01:12:11,150
you decide to use certain C++ features

1404
01:12:08,449 --> 01:12:14,529
in ways that cause lethargy in the code

1405
01:12:11,149 --> 01:12:14,529
if that makes sense

1406
01:12:54,710 --> 01:13:02,880
uplink coder says rtti well rtti doesn't

1407
01:12:59,779 --> 01:13:07,979
affect your code at all if you don't use

1408
01:13:02,880 --> 01:13:11,940
virtual types right I mean runtime type

1409
01:13:07,979 --> 01:13:14,339
information doesn't get added to see

1410
01:13:11,939 --> 01:13:16,738
code written in C++ so it's exactly the

1411
01:13:14,340 --> 01:13:18,930
same I believe as what I was just saying

1412
01:13:16,738 --> 01:13:21,000
is that you have to actually use these

1413
01:13:18,930 --> 01:13:27,060
features in order for them to start

1414
01:13:21,000 --> 01:13:28,590
costing you something right and the same

1415
01:13:27,060 --> 01:13:30,180
is true of exceptions if you never throw

1416
01:13:28,590 --> 01:13:34,260
an exception the compiler doesn't have

1417
01:13:30,180 --> 01:13:37,829
to do any exception handling nonsense in

1418
01:13:34,260 --> 01:13:39,539
your code now granted that stuff is kind

1419
01:13:37,829 --> 01:13:41,130
of already in there now because windows

1420
01:13:39,539 --> 01:13:43,680
structure exception handling is usually

1421
01:13:41,130 --> 01:13:45,659
in there and blah blah blah so I think

1422
01:13:43,680 --> 01:13:51,409
even see code now currently pays the

1423
01:13:45,659 --> 01:13:51,409
cost of exception handling so

1424
01:14:09,130 --> 01:14:11,909
alright

1425
01:14:13,219 --> 01:14:17,929
alright folks I'm going to wind it down

1426
01:14:20,389 --> 01:14:23,699
thank you everyone for joining me for

1427
01:14:22,378 --> 01:14:25,429
those sort of handmade hero it's been a

1428
01:14:23,698 --> 01:14:29,219
pleasure coding with you as always

1429
01:14:25,429 --> 01:14:30,599
tomorrow we will go ahead and use our

1430
01:14:29,219 --> 01:14:32,998
acceleration structure to see if we

1431
01:14:30,599 --> 01:14:36,628
can't speed up that collision testing

1432
01:14:32,998 --> 01:14:38,340
well overlap testing I should say but

1433
01:14:36,628 --> 01:14:40,349
until then if you want to follow along

1434
01:14:38,340 --> 01:14:41,819
with the code at home you can always

1435
01:14:40,349 --> 01:14:43,288
pre-order the game on handmade hero or

1436
01:14:41,819 --> 01:14:44,969
it comes with a source code if you want

1437
01:14:43,288 --> 01:14:47,279
to play around with it we also have

1438
01:14:44,969 --> 01:14:48,748
forums you can go to ask questions a

1439
01:14:47,279 --> 01:14:51,569
patreon page while support our video

1440
01:14:48,748 --> 01:14:53,248
series tweetbot that tweets the schedule

1441
01:14:51,569 --> 01:14:54,840
at you if you are interested to know

1442
01:14:53,248 --> 01:14:56,668
when we're going to be live and an

1443
01:14:54,840 --> 01:15:00,149
episode guide that you can use to catch

1444
01:14:56,668 --> 01:15:01,889
up on old episodes that is it for today

1445
01:15:00,149 --> 01:15:04,050
I will be back here tomorrow at eight

1446
01:15:01,889 --> 01:15:06,029
p.m. pacific daylight time until then

1447
01:15:04,050 --> 01:15:09,859
have fun coding and I will see you guys

1448
01:15:06,029 --> 01:15:09,858
on the internet taking use everyone

