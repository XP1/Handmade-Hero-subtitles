1
00:00:00,000 --> 00:00:04,500
there we go hello everyone and welcome

2
00:00:02,638 --> 00:00:07,589
to handmade Europe ah

3
00:00:04,500 --> 00:00:08,940
handmade here oh I don't know why I kind

4
00:00:07,589 --> 00:00:11,009
of got a little there was a little bit

5
00:00:08,939 --> 00:00:12,269
of a like voice crack there on my

6
00:00:11,009 --> 00:00:13,429
handmade here Oh normally I'm good at

7
00:00:12,269 --> 00:00:15,780
doing the introduction but not today

8
00:00:13,429 --> 00:00:17,010
let's try it again hello everyone

9
00:00:15,779 --> 00:00:19,589
welcome to handmade Heroes show decode a

10
00:00:17,010 --> 00:00:23,429
complete game live on Twitch no engines

11
00:00:19,589 --> 00:00:26,250
no libraries it's just us and are we

12
00:00:23,429 --> 00:00:27,989
typing fingers now yesterday we stopped

13
00:00:26,250 --> 00:00:30,149
in the middle of doing something which

14
00:00:27,989 --> 00:00:34,140
was kind of very clear at that point we

15
00:00:30,149 --> 00:00:35,369
had had a really you know clear path

16
00:00:34,140 --> 00:00:37,079
towards what we were trying to do we

17
00:00:35,369 --> 00:00:39,000
just didn't have time to do all of it so

18
00:00:37,079 --> 00:00:41,160
we did it in two parts we did the

19
00:00:39,000 --> 00:00:43,590
runtime part first and today we're gonna

20
00:00:41,159 --> 00:00:46,109
do the asset packing side of it and what

21
00:00:43,590 --> 00:00:49,230
we were doing was converting our font

22
00:00:46,109 --> 00:00:51,000
system over to allow it to have more

23
00:00:49,229 --> 00:00:53,128
information about the fronts at runtime

24
00:00:51,000 --> 00:00:54,960
than it used to so we had a bunch of ad

25
00:00:53,128 --> 00:00:56,729
hoc values we put in there to get the

26
00:00:54,960 --> 00:00:58,620
font system working and then what we did

27
00:00:56,729 --> 00:01:01,589
is we moved those attic values into an

28
00:00:58,619 --> 00:01:03,269
actual set of tables per font that the

29
00:01:01,590 --> 00:01:05,189
game could load and that way it can

30
00:01:03,270 --> 00:01:06,930
represent a whole variety of fonts and a

31
00:01:05,188 --> 00:01:10,289
whole variety of information about those

32
00:01:06,930 --> 00:01:12,390
fonts and use them at runtime now the

33
00:01:10,290 --> 00:01:14,040
important thing about that is that those

34
00:01:12,390 --> 00:01:16,079
tables have to come from somewhere so

35
00:01:14,040 --> 00:01:17,580
although we did the code that we need on

36
00:01:16,079 --> 00:01:19,978
the runtime side to actually use those

37
00:01:17,579 --> 00:01:22,798
tables we do not actually have the

38
00:01:19,978 --> 00:01:24,780
pipeline set up to get those tables from

39
00:01:22,799 --> 00:01:26,100
the asset packing stage into the game

40
00:01:24,780 --> 00:01:27,689
and there's two things we have to do for

41
00:01:26,099 --> 00:01:30,000
that the first thing we have to do is

42
00:01:27,688 --> 00:01:32,399
actually pull those tables out of

43
00:01:30,000 --> 00:01:33,659
windows we are not currently doing that

44
00:01:32,400 --> 00:01:35,670
so we have to go in the a spec or do

45
00:01:33,659 --> 00:01:38,549
that writing them pull them out of

46
00:01:35,670 --> 00:01:40,200
windows write them to the disk in our

47
00:01:38,549 --> 00:01:42,329
asset pack file but then the second

48
00:01:40,200 --> 00:01:44,759
thing we have to do is at the time when

49
00:01:42,328 --> 00:01:46,589
we actually go to run the game when we

50
00:01:44,759 --> 00:01:49,978
load that asset pack file we have to

51
00:01:46,590 --> 00:01:52,799
pull those asset by the the font

52
00:01:49,978 --> 00:01:54,478
information tables off of the asset file

53
00:01:52,799 --> 00:01:56,850
pull them off of the drive off out of

54
00:01:54,478 --> 00:01:59,250
the asset file and do some remapping

55
00:01:56,849 --> 00:02:00,750
because remember we are allow multiple

56
00:01:59,250 --> 00:02:02,368
asset files to be merged together which

57
00:02:00,750 --> 00:02:05,310
means that things like bitmap IDs are

58
00:02:02,368 --> 00:02:07,709
not stable they actually get moved at

59
00:02:05,310 --> 00:02:10,140
load time and so because we know that

60
00:02:07,709 --> 00:02:12,299
our font includes a bitmap id table in

61
00:02:10,139 --> 00:02:13,229
it for example that is something that we

62
00:02:12,300 --> 00:02:17,159
would then have to

63
00:02:13,229 --> 00:02:18,449
make sure we remapped properly so that's

64
00:02:17,158 --> 00:02:20,128
about it

65
00:02:18,449 --> 00:02:21,509
it's not very complicated what we're

66
00:02:20,128 --> 00:02:24,598
doing but it's a fair amount of work

67
00:02:21,509 --> 00:02:27,000
it's just typing and debugging sometimes

68
00:02:24,598 --> 00:02:28,798
code tasks are very heavy on the mental

69
00:02:27,000 --> 00:02:30,299
processes where you're having to figure

70
00:02:28,799 --> 00:02:31,439
a bunch of things out and it's tricky

71
00:02:30,299 --> 00:02:33,090
and there's a lot of thinking to do

72
00:02:31,439 --> 00:02:35,039
other times programming processes are

73
00:02:33,090 --> 00:02:36,959
more just about some very basic

74
00:02:35,039 --> 00:02:38,548
tradecraft making sure you're not doing

75
00:02:36,959 --> 00:02:39,539
anything stupid but on the most part

76
00:02:38,549 --> 00:02:41,159
you're just doing something very

77
00:02:39,539 --> 00:02:43,439
straightforward that doesn't mean it's

78
00:02:41,159 --> 00:02:45,329
necessarily going to be a cakewalk right

79
00:02:43,439 --> 00:02:46,979
you can always have bugs that take you a

80
00:02:45,329 --> 00:02:48,209
while to find or you just make a silly

81
00:02:46,979 --> 00:02:50,219
mistake somewhere that's totally

82
00:02:48,209 --> 00:02:51,390
possible but for the most part what

83
00:02:50,219 --> 00:02:53,189
we're doing here is very very

84
00:02:51,389 --> 00:02:56,578
straightforward nothing tricky about it

85
00:02:53,189 --> 00:02:58,620
it's just a bit of attention to detail

86
00:02:56,579 --> 00:03:01,290
and typing and that's all we really need

87
00:02:58,620 --> 00:03:02,459
to do now today is day 171 so if you

88
00:03:01,289 --> 00:03:03,959
would like to follow along at home with

89
00:03:02,459 --> 00:03:05,729
what I'm doing go ahead and unpack day

90
00:03:03,959 --> 00:03:07,530
170 a source code that's a source code

91
00:03:05,729 --> 00:03:09,298
that I'm starting with today and so

92
00:03:07,530 --> 00:03:14,340
let's go ahead and see where we left off

93
00:03:09,299 --> 00:03:16,109
here if you remember correctly when last

94
00:03:14,340 --> 00:03:17,759
we left we were still running but we

95
00:03:16,109 --> 00:03:19,109
were running with no actual fonts

96
00:03:17,759 --> 00:03:20,789
showing up on the screen because we had

97
00:03:19,109 --> 00:03:23,189
converted our system to expect to load

98
00:03:20,789 --> 00:03:25,078
those fonts the font information off

99
00:03:23,189 --> 00:03:27,180
disk and of course it's not there so our

100
00:03:25,079 --> 00:03:29,400
game is still running totally fine

101
00:03:27,180 --> 00:03:30,870
there's nothing wrong with the non font

102
00:03:29,400 --> 00:03:32,819
part of it but our fonts which we're

103
00:03:30,870 --> 00:03:34,439
displaying up here previously are no

104
00:03:32,818 --> 00:03:35,939
longer there so what we'd like to do is

105
00:03:34,439 --> 00:03:38,129
go get those font tables working and

106
00:03:35,939 --> 00:03:40,259
that way we can have our fonts back and

107
00:03:38,129 --> 00:03:41,818
then we will also be able to do a bunch

108
00:03:40,259 --> 00:03:43,979
of my stuff with them like have correct

109
00:03:41,818 --> 00:03:46,138
kerning and that sort of stuff so let's

110
00:03:43,979 --> 00:03:49,229
go ahead and start at the beginning

111
00:03:46,139 --> 00:03:52,849
which is going to be that asset Packer

112
00:03:49,229 --> 00:03:55,709
the test asset builder obviously has

113
00:03:52,848 --> 00:03:57,988
some work we've got to put in some

114
00:03:55,709 --> 00:03:59,549
serious work here to get this font stuff

115
00:03:57,989 --> 00:04:01,500
working because if you remember we kind

116
00:03:59,549 --> 00:04:03,060
of cheese it out and with good reason

117
00:04:01,500 --> 00:04:04,169
because I wanted to wait of course until

118
00:04:03,060 --> 00:04:06,030
we got to the point where we actually

119
00:04:04,169 --> 00:04:07,379
knew what we wanted for fonts but we

120
00:04:06,030 --> 00:04:09,389
could have cheese it out and what we do

121
00:04:07,378 --> 00:04:11,909
here actually is we call load glyph

122
00:04:09,389 --> 00:04:14,489
bitmap to load glyph bitmaps every time

123
00:04:11,909 --> 00:04:17,069
we come through here and actually want

124
00:04:14,489 --> 00:04:18,358
to extract a particular font character

125
00:04:17,069 --> 00:04:18,839
well that's not really going to cut it

126
00:04:18,358 --> 00:04:21,449
anymore

127
00:04:18,839 --> 00:04:24,060
because now we actually have an official

128
00:04:21,449 --> 00:04:25,918
sort of concept of a font and so that

129
00:04:24,060 --> 00:04:27,149
font itself needs to sort of be

130
00:04:25,918 --> 00:04:30,029
represented in the

131
00:04:27,149 --> 00:04:32,189
acet table end needs to be taken care of

132
00:04:30,029 --> 00:04:34,289
specifically so what I'm gonna do here

133
00:04:32,189 --> 00:04:36,269
is I'm just gonna take it one step at a

134
00:04:34,290 --> 00:04:38,389
time like we always do I'm gonna slowly

135
00:04:36,269 --> 00:04:41,310
start adding I'm gonna like you know

136
00:04:38,389 --> 00:04:43,860
slowly start adding that notion in here

137
00:04:41,310 --> 00:04:47,728
until we've got things represented in a

138
00:04:43,860 --> 00:04:49,080
way that makes some sense so in order to

139
00:04:47,728 --> 00:04:51,689
do that the first thing that I'd like to

140
00:04:49,079 --> 00:04:53,728
do is not actually really change the way

141
00:04:51,689 --> 00:04:55,889
that this code works in any significant

142
00:04:53,728 --> 00:04:59,699
way all I'm going to do is I'm going to

143
00:04:55,889 --> 00:05:02,310
make the actual font loading work with

144
00:04:59,699 --> 00:05:05,310
like multiple fonts and the concept of a

145
00:05:02,310 --> 00:05:06,959
font specifically rather than sort of

146
00:05:05,310 --> 00:05:08,370
this cheesy thing we did before where

147
00:05:06,959 --> 00:05:10,319
you notice like we have this sort of

148
00:05:08,370 --> 00:05:11,759
ridiculousness where really you could

149
00:05:10,319 --> 00:05:14,519
only use one font because we had some

150
00:05:11,759 --> 00:05:15,599
statics in here that stuff is all stuff

151
00:05:14,519 --> 00:05:17,430
that we want would want to replace

152
00:05:15,600 --> 00:05:20,639
anyway because it wouldn't work if we

153
00:05:17,430 --> 00:05:22,139
wanted to pack multiple fonts so now's a

154
00:05:20,639 --> 00:05:24,810
good time as I need to replace it and

155
00:05:22,139 --> 00:05:26,610
that will put me into a good position to

156
00:05:24,810 --> 00:05:28,319
start having those fonts be first-class

157
00:05:26,610 --> 00:05:30,240
citizens in the asset file because now

158
00:05:28,319 --> 00:05:32,279
there will be an actual concept of a

159
00:05:30,240 --> 00:05:33,990
font in the asset Packer which there had

160
00:05:32,279 --> 00:05:36,179
not been before and that's relatively

161
00:05:33,990 --> 00:05:38,639
important so what I'm going to do here

162
00:05:36,180 --> 00:05:40,918
is I'm going to go ahead and you know

163
00:05:38,639 --> 00:05:43,288
take the the second to look at this game

164
00:05:40,918 --> 00:05:46,319
assets thing you can see that we have an

165
00:05:43,288 --> 00:05:47,759
asset source the asset source is the

166
00:05:46,319 --> 00:05:49,769
thing that sort of tells us how to pack

167
00:05:47,759 --> 00:05:51,569
something and so you can see in here we

168
00:05:49,769 --> 00:05:53,310
have this first sample index this code

169
00:05:51,569 --> 00:05:55,319
point thing what we want to do here is

170
00:05:53,310 --> 00:05:58,589
kind of make the asset source I think

171
00:05:55,319 --> 00:06:00,329
into something a little bit fancier than

172
00:05:58,589 --> 00:06:02,549
it currently is right just a little bit

173
00:06:00,329 --> 00:06:03,899
fancier than it currently is I like that

174
00:06:02,550 --> 00:06:06,000
our very large number by the way was

175
00:06:03,899 --> 00:06:07,709
4096 that's a pretty good very large

176
00:06:06,000 --> 00:06:09,990
number you have to admit it's hard to

177
00:06:07,709 --> 00:06:13,739
imagine a number larger than 4096

178
00:06:09,990 --> 00:06:15,210
I also like the fact that we don't yeah

179
00:06:13,740 --> 00:06:16,769
we didn't we didn't really have any sort

180
00:06:15,209 --> 00:06:18,299
of sort of rhyme or reason for that we

181
00:06:16,769 --> 00:06:24,538
just decided that was like a very large

182
00:06:18,300 --> 00:06:30,720
number yeah to do Casey are there larger

183
00:06:24,538 --> 00:06:33,719
numbers than 4096 do we have evidence in

184
00:06:30,720 --> 00:06:37,420
the natural world of things that can

185
00:06:33,720 --> 00:06:42,440
exist in quantities larger

186
00:06:37,420 --> 00:06:44,090
than 4,096 and maybe just for good

187
00:06:42,439 --> 00:06:46,040
measure to write on the end of this guy

188
00:06:44,089 --> 00:06:49,429
we could go ahead and stick a little

189
00:06:46,040 --> 00:06:54,410
note here 4096 should be enough for

190
00:06:49,430 --> 00:06:57,740
anybody right just so we kind of know

191
00:06:54,410 --> 00:06:59,990
that you know nobody really should ever

192
00:06:57,740 --> 00:07:01,009
have more than 4096 of everything

193
00:06:59,990 --> 00:07:03,079
because that's a very large number

194
00:07:01,009 --> 00:07:04,849
already and I think you're just kind of

195
00:07:03,079 --> 00:07:07,879
at some level being greedy if you go

196
00:07:04,850 --> 00:07:10,430
above that so off we go we've got an

197
00:07:07,879 --> 00:07:13,009
asset type font here now remember that's

198
00:07:10,430 --> 00:07:14,959
actually totally erroneous right because

199
00:07:13,009 --> 00:07:18,500
what we actually meant by asset type

200
00:07:14,959 --> 00:07:20,810
font was asset font glyph right and

201
00:07:18,500 --> 00:07:23,449
asset font glyph is not the same thing

202
00:07:20,810 --> 00:07:25,040
as an asset type font when you see in

203
00:07:23,449 --> 00:07:27,620
here how this thing is sort of working

204
00:07:25,040 --> 00:07:30,260
you can see too how all of this stuff

205
00:07:27,620 --> 00:07:31,939
sort of shakes out really all we were

206
00:07:30,259 --> 00:07:34,310
doing is saying well in the bitmap

207
00:07:31,939 --> 00:07:36,230
packing path since the font actually is

208
00:07:34,310 --> 00:07:37,819
a bitmap we're just gonna have a way of

209
00:07:36,230 --> 00:07:39,620
distinguishing between those two things

210
00:07:37,819 --> 00:07:41,509
what we'd like to do now is something a

211
00:07:39,620 --> 00:07:42,949
little bit fancier right what we'd like

212
00:07:41,509 --> 00:07:44,750
to do is that the very least have the

213
00:07:42,949 --> 00:07:46,550
notion of a font and a font glyph so we

214
00:07:44,750 --> 00:07:50,269
could do it like this for example if you

215
00:07:46,550 --> 00:07:52,370
wanted to but further than that I think

216
00:07:50,269 --> 00:07:54,319
what we need to do here is say that we

217
00:07:52,370 --> 00:07:57,350
have for example an asset source font

218
00:07:54,319 --> 00:08:00,709
lift something like this right and maybe

219
00:07:57,350 --> 00:08:04,640
a asset source it you know what we could

220
00:08:00,709 --> 00:08:06,680
even we could even make this a little

221
00:08:04,639 --> 00:08:08,419
bit sort of cleaning up a bunch of this

222
00:08:06,680 --> 00:08:12,379
stuff a little bit more but you know

223
00:08:08,420 --> 00:08:14,840
something like this right asset source

224
00:08:12,379 --> 00:08:16,459
sound and I'm really just making this

225
00:08:14,839 --> 00:08:17,629
sort of mirror the kind of construction

226
00:08:16,459 --> 00:08:19,759
that we're doing in the asset system

227
00:08:17,629 --> 00:08:21,170
normally now we're doing it in the asset

228
00:08:19,759 --> 00:08:22,370
Packer since there's you know there's a

229
00:08:21,170 --> 00:08:24,830
couple different types here we're just

230
00:08:22,370 --> 00:08:26,180
gonna allow them to actually be a little

231
00:08:24,829 --> 00:08:28,430
more explicit about the fact that they

232
00:08:26,180 --> 00:08:29,780
exist in do different things right and

233
00:08:28,430 --> 00:08:31,970
again I don't care super much about this

234
00:08:29,779 --> 00:08:33,139
code it's just an example of an asset

235
00:08:31,970 --> 00:08:36,320
Packer for people who want to write

236
00:08:33,139 --> 00:08:37,668
their own asset Packer but you know that

237
00:08:36,320 --> 00:08:40,520
doesn't mean we want it to be completely

238
00:08:37,668 --> 00:08:41,990
crappy and we need to add a feature so

239
00:08:40,519 --> 00:08:44,539
now is this good times I need to make

240
00:08:41,990 --> 00:08:48,620
sure that it's relatively well cleaned

241
00:08:44,539 --> 00:08:50,299
up and so if you take a look here what

242
00:08:48,620 --> 00:08:50,870
I'd like to do since we've got these

243
00:08:50,299 --> 00:08:52,759
assets

244
00:08:50,870 --> 00:08:53,899
in here right what I'd like to do is

245
00:08:52,759 --> 00:08:55,909
it's got the code working with those

246
00:08:53,899 --> 00:08:57,799
first and I'd also like to introduce the

247
00:08:55,909 --> 00:08:59,870
notion that there's going to be sort of

248
00:08:57,799 --> 00:09:01,939
some font a font state or something like

249
00:08:59,870 --> 00:09:04,820
that right there's gonna be something

250
00:09:01,940 --> 00:09:06,920
like you know a loaded font or something

251
00:09:04,820 --> 00:09:09,050
like this I don't know and that loaded

252
00:09:06,919 --> 00:09:12,259
font what I'll do is I'll go ahead and

253
00:09:09,049 --> 00:09:14,269
I'll grab all of this stuff right that

254
00:09:12,259 --> 00:09:16,610
we were doing before that was kind of

255
00:09:14,269 --> 00:09:19,939
gently done in here and we'll just make

256
00:09:16,610 --> 00:09:23,930
that loaded font actually be sort of a

257
00:09:19,940 --> 00:09:26,240
you know a real real first class citizen

258
00:09:23,929 --> 00:09:28,069
that stores that data again these are

259
00:09:26,240 --> 00:09:30,200
very simple code changes all I'm doing

260
00:09:28,070 --> 00:09:32,210
is just a base base amount of cleanup

261
00:09:30,200 --> 00:09:33,860
necessary to make the asset Packer not

262
00:09:32,210 --> 00:09:36,139
awful so that we can add a feature to it

263
00:09:33,860 --> 00:09:38,269
because again you know we don't really

264
00:09:36,139 --> 00:09:39,830
care about this asset Packer in any

265
00:09:38,269 --> 00:09:42,110
particular way but we don't want to be

266
00:09:39,830 --> 00:09:44,420
so bad that it's wasting our time when

267
00:09:42,110 --> 00:09:46,759
we try to add features that we need for

268
00:09:44,419 --> 00:09:49,969
our testing purposes like we have right

269
00:09:46,759 --> 00:09:51,439
now so okay so if I were succumbing pure

270
00:09:49,970 --> 00:09:52,940
what I would say is that font glyph in

271
00:09:51,440 --> 00:09:56,870
addition to the code point will actually

272
00:09:52,940 --> 00:09:59,150
take a loaded font as well right and in

273
00:09:56,870 --> 00:10:00,620
fact this might do that same thing so

274
00:09:59,149 --> 00:10:02,449
that the asset source font would take

275
00:10:00,620 --> 00:10:03,980
which font it's trying to say we want to

276
00:10:02,450 --> 00:10:06,259
pack into the file in the assets or a

277
00:10:03,980 --> 00:10:09,680
spa cliff would do something where it's

278
00:10:06,259 --> 00:10:11,208
saying oh okay you know I got I got

279
00:10:09,679 --> 00:10:14,028
which font I'm supposed to be and then

280
00:10:11,208 --> 00:10:16,239
which code point you know I I'm actually

281
00:10:14,028 --> 00:10:19,278
using their so that seems reasonable

282
00:10:16,240 --> 00:10:21,830
nothing particularly weird about that so

283
00:10:19,278 --> 00:10:22,250
we'll go ahead and continue on from

284
00:10:21,830 --> 00:10:24,500
there

285
00:10:22,250 --> 00:10:25,850
all right so recompiling now we should

286
00:10:24,500 --> 00:10:28,429
get a bunch of compile errors because

287
00:10:25,850 --> 00:10:30,709
we're doing a bunch of nonsense here

288
00:10:28,429 --> 00:10:32,149
I'll go ahead and predefined that which

289
00:10:30,708 --> 00:10:34,969
was not being done before we've got to

290
00:10:32,149 --> 00:10:37,759
go ahead and fix that which I will do

291
00:10:34,970 --> 00:10:41,028
now okay and so here when we're actually

292
00:10:37,759 --> 00:10:42,588
doing our sourcing stuff now everybody

293
00:10:41,028 --> 00:10:45,289
who was trying to access stuff like this

294
00:10:42,589 --> 00:10:48,050
before is going to have an issue with it

295
00:10:45,289 --> 00:10:50,028
obviously and so you know we're gonna

296
00:10:48,049 --> 00:10:51,740
have to sort of fix this up instead of

297
00:10:50,028 --> 00:10:53,778
passing a font file and a font name

298
00:10:51,740 --> 00:10:55,220
neither of which make any sense at this

299
00:10:53,778 --> 00:10:56,689
point and you know what what you know

300
00:10:55,220 --> 00:10:58,550
what let's just go full pull we might as

301
00:10:56,690 --> 00:11:01,310
well go full pull here file names gone

302
00:10:58,549 --> 00:11:02,929
right that's just gone it'll come in

303
00:11:01,309 --> 00:11:03,899
here and we'll have asset source

304
00:11:02,929 --> 00:11:06,259
bitmap

305
00:11:03,899 --> 00:11:08,879
and that will have a file name there

306
00:11:06,259 --> 00:11:11,429
because now we've you know it's it's not

307
00:11:08,879 --> 00:11:13,588
everything has that let's you know let's

308
00:11:11,429 --> 00:11:14,909
just go ahead and and do the whole night

309
00:11:13,589 --> 00:11:17,220
so now we just have a fully

310
00:11:14,909 --> 00:11:19,049
discriminated union right here's the

311
00:11:17,220 --> 00:11:21,710
discriminator it says which one we've

312
00:11:19,049 --> 00:11:25,349
got and here's our different ones okay

313
00:11:21,710 --> 00:11:27,210
alright so I'm just gonna go through and

314
00:11:25,350 --> 00:11:28,560
mechanically clean those up now again

315
00:11:27,210 --> 00:11:30,750
just let the compiler tell me all the

316
00:11:28,559 --> 00:11:33,809
places that I probably need to fix

317
00:11:30,750 --> 00:11:35,460
obviously a bitmap now the file name is

318
00:11:33,809 --> 00:11:37,919
stored inside that sort of bitmap

319
00:11:35,460 --> 00:11:39,540
discriminant I'm gonna go ahead and do

320
00:11:37,919 --> 00:11:41,278
that here as well

321
00:11:39,539 --> 00:11:42,719
oops that's the character so in this

322
00:11:41,278 --> 00:11:44,610
case we don't actually need these this

323
00:11:42,720 --> 00:11:46,620
is going to go away because when you add

324
00:11:44,610 --> 00:11:49,710
a character asset you will only pass it

325
00:11:46,620 --> 00:11:52,830
the loaded font like that and so inside

326
00:11:49,710 --> 00:11:55,139
here we just have font glyph or what do

327
00:11:52,830 --> 00:11:58,320
I call it just glyph yeah just with we

328
00:11:55,139 --> 00:12:00,539
have glyph and the glyph code point we

329
00:11:58,320 --> 00:12:02,850
need to specify and the glyph font we

330
00:12:00,539 --> 00:12:04,379
need to specify but that's all right

331
00:12:02,850 --> 00:12:06,509
that's all we need

332
00:12:04,379 --> 00:12:08,338
so moving downwards further we've got

333
00:12:06,509 --> 00:12:09,750
the sound the sound does need to store

334
00:12:08,339 --> 00:12:12,360
its filename and it's sample index

335
00:12:09,750 --> 00:12:14,190
nothing changes there and then in here

336
00:12:12,360 --> 00:12:16,470
obviously we have to pull from the

337
00:12:14,190 --> 00:12:19,200
correct places and so we will go ahead

338
00:12:16,470 --> 00:12:21,420
and do that now so oops that the font

339
00:12:19,200 --> 00:12:24,028
with path didn't mean do that we want

340
00:12:21,419 --> 00:12:25,409
right there so there's the bitmap

341
00:12:24,028 --> 00:12:27,929
loading and now we've just got

342
00:12:25,409 --> 00:12:30,000
essentially that one case of the font

343
00:12:27,929 --> 00:12:31,349
that's still in there and then of course

344
00:12:30,000 --> 00:12:34,080
we've got the the stuff where we

345
00:12:31,350 --> 00:12:36,180
actually specify out this fonts so let's

346
00:12:34,080 --> 00:12:38,278
go ahead and take care of those now here

347
00:12:36,179 --> 00:12:40,379
when we do load with bitmap what we want

348
00:12:38,278 --> 00:12:43,200
to do now is transition load with bitmap

349
00:12:40,379 --> 00:12:45,330
over to using something a little more

350
00:12:43,200 --> 00:12:47,040
sane than it was using before so you can

351
00:12:45,330 --> 00:12:49,050
see here here is all of our font

352
00:12:47,039 --> 00:12:51,329
nonsense I want to go ahead and move

353
00:12:49,049 --> 00:12:53,309
that font nonsense into something that's

354
00:12:51,330 --> 00:12:55,830
just going to load a font that actually

355
00:12:53,309 --> 00:12:58,679
makes some sense and it doesn't do

356
00:12:55,830 --> 00:12:59,910
anything particularly unusual like our

357
00:12:58,679 --> 00:13:01,889
current was doing with weird like

358
00:12:59,909 --> 00:13:03,240
statics and nonsense like this so I

359
00:13:01,889 --> 00:13:05,429
think what I'd like to do is something

360
00:13:03,240 --> 00:13:07,560
like this in fact I don't even know why

361
00:13:05,429 --> 00:13:10,229
I switch windows there that's the heat

362
00:13:07,559 --> 00:13:13,919
talking probably so I want to go ahead

363
00:13:10,230 --> 00:13:16,899
and do a loaded font thing I suppose

364
00:13:13,919 --> 00:13:19,649
here we could if we wanted to

365
00:13:16,899 --> 00:13:21,938
actually make that an embedded thing

366
00:13:19,649 --> 00:13:23,679
yeah I don't see why not just like we

367
00:13:21,938 --> 00:13:25,778
did with the bitmap seems like a totally

368
00:13:23,679 --> 00:13:27,338
reasonable thing to do so in our loaded

369
00:13:25,778 --> 00:13:30,490
font we know we need a few different

370
00:13:27,339 --> 00:13:32,829
things right we know that we need this

371
00:13:30,490 --> 00:13:35,019
text metric restoring I guess that was

372
00:13:32,828 --> 00:13:37,539
something we were using right and again

373
00:13:35,019 --> 00:13:39,308
I'm just doing this by rote nothing

374
00:13:37,539 --> 00:13:43,110
Bickley weird we probably want that H

375
00:13:39,308 --> 00:13:49,360
font handle right to the actual font and

376
00:13:43,110 --> 00:13:51,339
you know that that may be just about it

377
00:13:49,360 --> 00:13:53,019
for now I think things will probably add

378
00:13:51,339 --> 00:13:54,699
a little bit more later but for now I

379
00:13:53,019 --> 00:13:56,678
think that's that's roughly all we need

380
00:13:54,698 --> 00:14:00,159
and so in here we'll go ahead and pass

381
00:13:56,678 --> 00:14:02,139
that loaded font like so and and then we

382
00:14:00,159 --> 00:14:06,278
have that code point and so when we come

383
00:14:02,139 --> 00:14:08,019
in here now to me now we can start to

384
00:14:06,278 --> 00:14:10,480
get rid of some of these things these

385
00:14:08,019 --> 00:14:13,209
guys would be moved up into that load

386
00:14:10,480 --> 00:14:14,949
font right so in here where we're

387
00:14:13,208 --> 00:14:18,308
actually loading the font we would get

388
00:14:14,948 --> 00:14:19,628
those out here and so inside this we can

389
00:14:18,308 --> 00:14:21,578
still use that set up if we want to

390
00:14:19,629 --> 00:14:23,199
because this is just about creating this

391
00:14:21,578 --> 00:14:26,198
particular thing here and what we would

392
00:14:23,198 --> 00:14:27,938
do is our select object call where we

393
00:14:26,198 --> 00:14:28,870
select the actual font what we do is

394
00:14:27,938 --> 00:14:32,980
here

395
00:14:28,870 --> 00:14:35,769
we would go ahead and and select the

396
00:14:32,980 --> 00:14:38,769
font that the person wanted from us we'd

397
00:14:35,769 --> 00:14:42,850
select that right here right so we'd

398
00:14:38,769 --> 00:14:44,198
basically store that handle and then

399
00:14:42,850 --> 00:14:46,120
whichever font they were trying to

400
00:14:44,198 --> 00:14:49,269
extract from we'd select that into our

401
00:14:46,120 --> 00:14:50,620
device context at that time right so the

402
00:14:49,269 --> 00:14:53,528
device context we can reuse for

403
00:14:50,620 --> 00:14:54,909
everything but the font is the stuff

404
00:14:53,528 --> 00:14:58,328
that we want to vary so that's what

405
00:14:54,909 --> 00:15:00,100
we'll do okay pretty straightforward in

406
00:14:58,328 --> 00:15:01,748
order to get the text metrics it looks

407
00:15:00,100 --> 00:15:03,970
like getting the text metrics what do we

408
00:15:01,749 --> 00:15:05,290
even used those for I don't know it

409
00:15:03,970 --> 00:15:08,678
looks like getting the text metrics we

410
00:15:05,289 --> 00:15:10,778
could just do that one time perhaps when

411
00:15:08,678 --> 00:15:12,610
we load the font but then we would need

412
00:15:10,778 --> 00:15:13,990
a DC and I don't know that we actually

413
00:15:12,610 --> 00:15:15,730
want to have to bother with that so what

414
00:15:13,990 --> 00:15:17,889
I might do is just do it here

415
00:15:15,730 --> 00:15:19,688
where we always get that text metric for

416
00:15:17,889 --> 00:15:21,068
now that's a little slower than it needs

417
00:15:19,688 --> 00:15:23,379
to be potentially but I don't know that

418
00:15:21,068 --> 00:15:25,240
we care so we can leave it like that and

419
00:15:23,379 --> 00:15:27,188
that would be fine so really all we need

420
00:15:25,240 --> 00:15:29,409
right now is that win32 font handle and

421
00:15:27,188 --> 00:15:30,639
that's pretty easy to come by right so

422
00:15:29,409 --> 00:15:34,000
we can just do load

423
00:15:30,639 --> 00:15:37,389
this would have the font file name and

424
00:15:34,000 --> 00:15:45,519
the font name like so so in here we load

425
00:15:37,389 --> 00:15:58,330
that up there we go and we would store

426
00:15:45,519 --> 00:16:00,100
the results of that so there we go now

427
00:15:58,330 --> 00:16:02,770
we've got a way to load a font

428
00:16:00,100 --> 00:16:04,180
separately and then reuse that font and

429
00:16:02,769 --> 00:16:06,370
so now we can have multiple fonts which

430
00:16:04,179 --> 00:16:08,769
is also good oops I don't know why put

431
00:16:06,370 --> 00:16:13,330
result in there know what I'm thinking

432
00:16:08,769 --> 00:16:15,519
there we go so now when we do logo fit

433
00:16:13,330 --> 00:16:18,220
map when we pass the thing in we really

434
00:16:15,519 --> 00:16:21,460
just want to pass in that source glyph

435
00:16:18,220 --> 00:16:23,200
font and source glyph code point right

436
00:16:21,460 --> 00:16:25,509
in fact it's this guy right here the

437
00:16:23,200 --> 00:16:28,090
code point and that's all it needs to

438
00:16:25,509 --> 00:16:29,379
actually get and then finally in here

439
00:16:28,090 --> 00:16:30,759
what we need to do is actually be able

440
00:16:29,379 --> 00:16:32,950
to pass those now that's a really easy

441
00:16:30,759 --> 00:16:34,569
thing for us to do we don't care about

442
00:16:32,950 --> 00:16:37,270
leaking font handles we're not going to

443
00:16:34,570 --> 00:16:39,220
have you know hundreds of fonts so we

444
00:16:37,269 --> 00:16:41,949
really don't care although we could if

445
00:16:39,220 --> 00:16:44,139
we wanted to be super tidy about it we

446
00:16:41,950 --> 00:16:45,250
could do that if we wanted to but what

447
00:16:44,139 --> 00:16:47,080
I'm really gonna do here is just say

448
00:16:45,250 --> 00:16:49,840
okay we've got our Arial or something

449
00:16:47,080 --> 00:16:52,420
like this or maybe I'll just say you

450
00:16:49,840 --> 00:16:54,190
know default font you know what this is

451
00:16:52,419 --> 00:16:55,509
gonna be our debug font isn't it so

452
00:16:54,190 --> 00:16:58,930
we'll just call it our debug font for

453
00:16:55,509 --> 00:17:05,709
now I'm gonna call the font and then

454
00:16:58,929 --> 00:17:07,209
after calling load font it's after

455
00:17:05,709 --> 00:17:09,160
calling load font we will have a font

456
00:17:07,209 --> 00:17:11,500
handle that we can use to add our

457
00:17:09,160 --> 00:17:14,890
characters that we wanted right so there

458
00:17:11,500 --> 00:17:17,559
we go there's the debug font and if we

459
00:17:14,890 --> 00:17:19,209
want to we can like do a free font right

460
00:17:17,559 --> 00:17:23,049
we could if we wanted to at the end of

461
00:17:19,209 --> 00:17:25,089
this do a free font like so so if we

462
00:17:23,049 --> 00:17:26,680
cared about how many of these you know

463
00:17:25,088 --> 00:17:28,750
if we were gonna do millions of fonts or

464
00:17:26,680 --> 00:17:32,650
something like this you know heaven help

465
00:17:28,750 --> 00:17:35,950
us right we could do that we could say

466
00:17:32,650 --> 00:17:38,440
okay here's the loaded font and all

467
00:17:35,950 --> 00:17:41,850
that's gonna do is free that font handle

468
00:17:38,440 --> 00:17:44,380
right so I don't actually remember I

469
00:17:41,849 --> 00:17:46,959
think it's just destroy object

470
00:17:44,380 --> 00:17:50,980
would be my guess that's the typical way

471
00:17:46,960 --> 00:17:52,299
in win32 that you get rid of font but

472
00:17:50,980 --> 00:17:55,839
I'm gonna go ahead and double check

473
00:17:52,299 --> 00:17:57,220
usually the create call in Windows the

474
00:17:55,839 --> 00:18:00,250
documentation for the create call on

475
00:17:57,220 --> 00:18:05,160
MSDN will tell you what windows would

476
00:18:00,250 --> 00:18:07,359
like you to free it via right and so

477
00:18:05,160 --> 00:18:09,910
delete object there you go

478
00:18:07,359 --> 00:18:11,889
and so delete object uh stakes anything

479
00:18:09,910 --> 00:18:15,100
that comes from VDI pretty much and you

480
00:18:11,890 --> 00:18:20,770
can delete it so I was close it's not

481
00:18:15,099 --> 00:18:26,079
destroy sweet so yeah okay so that

482
00:18:20,769 --> 00:18:28,210
should do it I think and now we've

483
00:18:26,079 --> 00:18:30,909
converted to like loading fonts and so

484
00:18:28,210 --> 00:18:32,140
now we can have our fonts you know be a

485
00:18:30,910 --> 00:18:33,460
little more stable and we can have

486
00:18:32,140 --> 00:18:34,660
multiple of them and all that other good

487
00:18:33,460 --> 00:18:36,279
stuff which we're going to want to test

488
00:18:34,660 --> 00:18:37,570
because we know we might want to have

489
00:18:36,279 --> 00:18:39,160
multiple fonts in fact we definitely do

490
00:18:37,569 --> 00:18:40,750
we want at least a thought for the game

491
00:18:39,160 --> 00:18:42,700
that we might use to display text in the

492
00:18:40,750 --> 00:18:43,960
game and a debug font that we use for a

493
00:18:42,700 --> 00:18:46,930
debug display and those will probably

494
00:18:43,960 --> 00:18:48,700
not be the same font right so we know we

495
00:18:46,930 --> 00:18:49,779
want at least two and we probably want

496
00:18:48,700 --> 00:18:50,740
more because we're probably going to

497
00:18:49,779 --> 00:18:53,170
want different fonts for different

498
00:18:50,740 --> 00:18:57,700
languages and other stuff like this okay

499
00:18:53,170 --> 00:18:58,900
so if we do our load font and we've seen

500
00:18:57,700 --> 00:19:00,759
while that works then our look the

501
00:18:58,900 --> 00:19:02,830
bitmaps should work too and all that's

502
00:19:00,759 --> 00:19:06,309
good we will have to do something with

503
00:19:02,829 --> 00:19:08,439
STB where in here we would go ahead you

504
00:19:06,309 --> 00:19:10,149
know well if we want to update our to

505
00:19:08,440 --> 00:19:11,799
the STB path which we might do a little

506
00:19:10,150 --> 00:19:13,030
later on because I did want to support

507
00:19:11,799 --> 00:19:15,970
us TV so people could see how to use

508
00:19:13,029 --> 00:19:17,559
that we'll do that a little bit later so

509
00:19:15,970 --> 00:19:19,390
right now we've kind of broken the SDB

510
00:19:17,559 --> 00:19:21,429
path right if I was to if I was to turn

511
00:19:19,390 --> 00:19:26,230
a TV back on you would notice we'd have

512
00:19:21,430 --> 00:19:27,370
a bunch of problems there so for now STV

513
00:19:26,230 --> 00:19:28,839
we've you know we've kind of broken it

514
00:19:27,369 --> 00:19:31,659
that's fine we'll we'll restore it a

515
00:19:28,839 --> 00:19:34,659
little bit later okay so now that we've

516
00:19:31,660 --> 00:19:36,790
done that what we need to do is start to

517
00:19:34,660 --> 00:19:37,950
actually implement some of the new stuff

518
00:19:36,789 --> 00:19:41,170
that we said we were going to implement

519
00:19:37,950 --> 00:19:43,180
which is actually having fonts be marked

520
00:19:41,170 --> 00:19:44,620
as assets that can actually be used

521
00:19:43,180 --> 00:19:47,590
right

522
00:19:44,619 --> 00:19:51,729
and so in here if we have begin asset

523
00:19:47,589 --> 00:19:54,159
type what I'd like to do is if sort of

524
00:19:51,730 --> 00:19:56,470
separate these out right so here's the

525
00:19:54,160 --> 00:19:57,880
asset type for font and here's the asset

526
00:19:56,470 --> 00:20:01,350
type for font glyph

527
00:19:57,880 --> 00:20:02,620
right remember what that was this way

528
00:20:01,349 --> 00:20:04,509
yeah

529
00:20:02,619 --> 00:20:06,339
these are font and glyphs there are

530
00:20:04,509 --> 00:20:08,079
things that are you know actual bitmaps

531
00:20:06,339 --> 00:20:11,259
that are being used to display the font

532
00:20:08,079 --> 00:20:12,849
and then these up here are actual fonts

533
00:20:11,259 --> 00:20:14,200
themselves which are kind of the

534
00:20:12,849 --> 00:20:15,339
centralized piece of information that

535
00:20:14,200 --> 00:20:17,500
tells us all the other stuff that we

536
00:20:15,339 --> 00:20:18,909
need to know about it so I want to be

537
00:20:17,500 --> 00:20:23,710
able to do something like this where I

538
00:20:18,910 --> 00:20:27,788
do add font asset right like so add font

539
00:20:23,710 --> 00:20:29,380
asset and you know that would just be

540
00:20:27,788 --> 00:20:31,658
something that takes this font and says

541
00:20:29,380 --> 00:20:34,559
you know what I want to add this font to

542
00:20:31,659 --> 00:20:37,900
my set of stuff okay

543
00:20:34,558 --> 00:20:39,250
pretty basic nothing nothing weird going

544
00:20:37,900 --> 00:20:43,870
on there right

545
00:20:39,250 --> 00:20:46,329
but again just just going through the

546
00:20:43,869 --> 00:20:47,589
motion so that's all good now what I

547
00:20:46,329 --> 00:20:49,509
have to do is actually implement that

548
00:20:47,589 --> 00:20:50,709
right and again this is just so I can

549
00:20:49,509 --> 00:20:52,690
I'm doing the exact same thing I did

550
00:20:50,710 --> 00:20:54,990
with all the rest of this stuff all I'm

551
00:20:52,690 --> 00:20:58,269
trying to do is make it so that there is

552
00:20:54,990 --> 00:21:00,069
some entry in the asset packing table so

553
00:20:58,269 --> 00:21:02,619
that when it goes through everything it

554
00:21:00,069 --> 00:21:07,210
will know to pack that font in so I've

555
00:21:02,619 --> 00:21:09,788
got the font name and the file name for

556
00:21:07,210 --> 00:21:12,460
the font in there right we come through

557
00:21:09,788 --> 00:21:16,210
here we do our standard thing for

558
00:21:12,460 --> 00:21:18,130
getting the font ID right like so and

559
00:21:16,210 --> 00:21:22,058
then we get out the source that we

560
00:21:18,130 --> 00:21:23,980
wanted we would then take an HHA asset I

561
00:21:22,058 --> 00:21:25,990
guess and we would do all the same stuff

562
00:21:23,980 --> 00:21:27,880
you know looking at this I feel like

563
00:21:25,990 --> 00:21:29,890
this code is really probably boilerplate

564
00:21:27,880 --> 00:21:31,419
e right don't you feel like I mean I

565
00:21:29,890 --> 00:21:34,990
don't know about you but I kind of feel

566
00:21:31,419 --> 00:21:39,669
like internal something that was kind

567
00:21:34,990 --> 00:21:42,759
that was going to return us like kind of

568
00:21:39,669 --> 00:21:45,038
a little package here might be in order

569
00:21:42,759 --> 00:21:48,429
right something that was going to be

570
00:21:45,038 --> 00:21:50,769
like this you know like that you know

571
00:21:48,429 --> 00:21:53,259
struct asset because I don't think we

572
00:21:50,769 --> 00:21:55,750
have a struct asset so we do something

573
00:21:53,259 --> 00:21:58,869
like oh you know what we'll do added

574
00:21:55,750 --> 00:22:03,029
asset like so when we do struct added

575
00:21:58,869 --> 00:22:07,509
asset we would have in here the ID right

576
00:22:03,029 --> 00:22:08,210
and then we would have that HHH asset

577
00:22:07,509 --> 00:22:11,720
pointer

578
00:22:08,210 --> 00:22:13,970
like so yeah

579
00:22:11,720 --> 00:22:16,788
something more like that does that seem

580
00:22:13,970 --> 00:22:21,009
reasonable and then what I wanted to do

581
00:22:16,788 --> 00:22:23,720
was just have okay added asset add asset

582
00:22:21,009 --> 00:22:25,579
and that would just do all of this stuff

583
00:22:23,720 --> 00:22:28,129
for us so that we don't have to do the

584
00:22:25,579 --> 00:22:30,798
part that's the same right that's the

585
00:22:28,128 --> 00:22:32,990
same for everybody so this stuff can

586
00:22:30,798 --> 00:22:35,028
just be and again this is classic

587
00:22:32,990 --> 00:22:36,409
totally classic impression oriented

588
00:22:35,028 --> 00:22:37,940
programming here I'm just seeing

589
00:22:36,409 --> 00:22:40,399
something happening multiple times I'm

590
00:22:37,940 --> 00:22:42,558
pulling it out right really really basic

591
00:22:40,398 --> 00:22:44,599
stuff but it helps keep the code saying

592
00:22:42,558 --> 00:22:46,579
it keeps the code smaller and it keeps

593
00:22:44,599 --> 00:22:47,748
you from having lots of different places

594
00:22:46,579 --> 00:22:49,668
that do the same thing where you're

595
00:22:47,749 --> 00:22:52,610
likely to change one and break something

596
00:22:49,669 --> 00:22:54,080
or you know who knows what right okay so

597
00:22:52,609 --> 00:22:56,118
looking at this what we need is we need

598
00:22:54,079 --> 00:23:00,980
the game assets pointer which is gonna

599
00:22:56,118 --> 00:23:03,048
do this hmm looks like everything else

600
00:23:00,980 --> 00:23:10,669
is kind of on autopilot for the most

601
00:23:03,048 --> 00:23:12,798
part right this is just the index that's

602
00:23:10,669 --> 00:23:16,909
all really straightforward the tags are

603
00:23:12,798 --> 00:23:19,490
all the same yes a really easy really

604
00:23:16,909 --> 00:23:22,509
really easy conversion the result here

605
00:23:19,490 --> 00:23:26,509
is just gonna be whatever that index is

606
00:23:22,509 --> 00:23:29,169
and the HHA is just gonna be the HSA

607
00:23:26,509 --> 00:23:35,028
that we already had to pull out right

608
00:23:29,169 --> 00:23:38,090
really really basic stuff right totally

609
00:23:35,028 --> 00:23:41,240
cool and now you know again you get to

610
00:23:38,089 --> 00:23:42,589
see that really nice cleanup happen so

611
00:23:41,240 --> 00:23:45,710
you know we can just go ahead and say

612
00:23:42,589 --> 00:23:48,288
add asset now we pass it the assets and

613
00:23:45,710 --> 00:23:52,159
that's all we needed to do gets rid of

614
00:23:48,288 --> 00:23:56,028
all of this code right and then we've

615
00:23:52,159 --> 00:23:59,778
got that that easy access where we just

616
00:23:56,028 --> 00:24:01,940
say okay the HHA pick bitmap set the

617
00:23:59,778 --> 00:24:06,339
parts that are specific to our bitmap

618
00:24:01,940 --> 00:24:09,019
right so that's pretty straightforward

619
00:24:06,339 --> 00:24:11,538
the asset source itself looks like it's

620
00:24:09,019 --> 00:24:12,980
also used here right and so what I'm

621
00:24:11,538 --> 00:24:17,859
going to do is I'm going to pull that

622
00:24:12,980 --> 00:24:17,860
out so it also has that

623
00:24:18,558 --> 00:24:23,878
put that right in here and so there we

624
00:24:23,700 --> 00:24:27,088
go

625
00:24:23,878 --> 00:24:29,579
again I'm just making it really easy on

626
00:24:27,088 --> 00:24:33,628
myself so there we go

627
00:24:29,579 --> 00:24:38,548
and the assets to return the bitmap ID I

628
00:24:33,628 --> 00:24:41,069
just need a result equals asset you know

629
00:24:38,548 --> 00:24:44,429
I could even do something crazy here if

630
00:24:41,069 --> 00:24:47,638
I wanted to it's not worth it though I'm

631
00:24:44,429 --> 00:24:49,559
not gonna I'm not gonna all right so

632
00:24:47,638 --> 00:24:53,458
something like this right

633
00:24:49,558 --> 00:24:59,668
and what I can do then is I can excuse

634
00:24:53,459 --> 00:25:01,739
me but that's kind of weird I don't know

635
00:24:59,669 --> 00:25:03,959
why I called that supposed to be called

636
00:25:01,739 --> 00:25:04,229
an ad font asset yeah I just didn't

637
00:25:03,959 --> 00:25:05,519
finish

638
00:25:04,229 --> 00:25:08,700
I stopped in the middle of adding that

639
00:25:05,519 --> 00:25:09,868
guy so anyway that looks like it works

640
00:25:08,700 --> 00:25:11,278
just fine so I'm gonna go ahead and

641
00:25:09,868 --> 00:25:12,958
finish up doing the rest of these guys

642
00:25:11,278 --> 00:25:15,328
that way right we've got this add asset

643
00:25:12,959 --> 00:25:16,979
thing just gets rid of a ton of code

644
00:25:15,328 --> 00:25:19,608
right

645
00:25:16,979 --> 00:25:23,429
so there's adding a character asset

646
00:25:19,608 --> 00:25:26,968
exactly the same way there we go

647
00:25:23,429 --> 00:25:31,229
really really simple and there's our

648
00:25:26,969 --> 00:25:34,048
bitmap ID this alt asset that ID and

649
00:25:31,229 --> 00:25:36,509
again sound same thing right can clean

650
00:25:34,048 --> 00:25:38,578
up all of this stuff and we only have to

651
00:25:36,509 --> 00:25:40,979
keep the part that's actually specific

652
00:25:38,578 --> 00:25:43,759
to what we wanted to do with that sound

653
00:25:40,979 --> 00:25:47,999
right so there that is

654
00:25:43,759 --> 00:25:49,499
and there's that sound ID and this just

655
00:25:47,999 --> 00:25:51,088
feels good right it just feels good to

656
00:25:49,499 --> 00:25:53,278
get rid of that redundant code so that

657
00:25:51,088 --> 00:25:56,428
you know it's nice and tidy in one place

658
00:25:53,278 --> 00:25:58,950
now and easier to debug and maintain so

659
00:25:56,429 --> 00:26:00,659
let's finish it up that thought this was

660
00:25:58,950 --> 00:26:02,159
the instigation for the whole thing was

661
00:26:00,659 --> 00:26:04,829
the fact that I need to add this ad font

662
00:26:02,159 --> 00:26:08,789
to asset so there we go we've got the

663
00:26:04,828 --> 00:26:11,190
asset they're going to go ahead and get

664
00:26:08,788 --> 00:26:12,450
rid of all of this it looks like we

665
00:26:11,190 --> 00:26:14,249
hadn't actually done any of this yet

666
00:26:12,450 --> 00:26:17,338
anyway so it looks like we'll have to

667
00:26:14,249 --> 00:26:20,038
actually do it now so let's do that so

668
00:26:17,338 --> 00:26:23,940
let's get our font set that stuff we got

669
00:26:20,038 --> 00:26:26,700
to set this stuff and so we'll do that

670
00:26:23,940 --> 00:26:30,900
in a second and finally we'll go ahead

671
00:26:26,700 --> 00:26:33,029
and fill out that result struct and

672
00:26:30,900 --> 00:26:36,720
so that would allow us to actually add a

673
00:26:33,029 --> 00:26:38,490
font asset so that's good what we want

674
00:26:36,720 --> 00:26:40,500
to do here is load up that file formats

675
00:26:38,490 --> 00:26:42,750
thing so that we can actually see what

676
00:26:40,500 --> 00:26:44,609
fonts themselves having it they've got a

677
00:26:42,750 --> 00:26:46,259
code point count they've got a line

678
00:26:44,609 --> 00:26:48,959
advance those are the two things that

679
00:26:46,259 --> 00:26:51,359
they have to actually store and so

680
00:26:48,960 --> 00:26:54,090
that's something that we need to know

681
00:26:51,359 --> 00:26:56,789
and so when we do an ad font asset here

682
00:26:54,089 --> 00:26:58,980
I think what we'd like to do is maybe

683
00:26:56,789 --> 00:27:01,079
change this up just slightly maybe do

684
00:26:58,980 --> 00:27:06,210
something like this no know how you guys

685
00:27:01,079 --> 00:27:11,549
feel about that and then expect the font

686
00:27:06,210 --> 00:27:14,130
to have those things in it right so that

687
00:27:11,549 --> 00:27:16,619
makes sense and so then we just go ahead

688
00:27:14,130 --> 00:27:20,690
up to here to our loaded font we'd store

689
00:27:16,619 --> 00:27:23,879
these in the loaded font instead right

690
00:27:20,690 --> 00:27:26,190
or you know we could also just not store

691
00:27:23,880 --> 00:27:28,320
them at all we don't actually have to

692
00:27:26,190 --> 00:27:30,029
store those if we don't want to that's

693
00:27:28,319 --> 00:27:31,529
another option so we could just say you

694
00:27:30,029 --> 00:27:34,410
know what we don't ever actually store

695
00:27:31,529 --> 00:27:36,149
those anyway but we now know that we

696
00:27:34,410 --> 00:27:37,650
need two things in our loaded font we

697
00:27:36,150 --> 00:27:40,430
need the code point count and we need

698
00:27:37,650 --> 00:27:44,280
the line advance right now at the moment

699
00:27:40,430 --> 00:27:46,110
when we actually do a load font it turns

700
00:27:44,279 --> 00:27:49,289
out that to get those like the line

701
00:27:46,109 --> 00:27:51,750
advanced we could probably get but the

702
00:27:49,289 --> 00:27:52,829
the the code point count it's just

703
00:27:51,750 --> 00:27:54,630
something we're gonna have to hard code

704
00:27:52,829 --> 00:27:56,099
for a moment because if you think about

705
00:27:54,630 --> 00:27:58,350
it we haven't actually really done any

706
00:27:56,099 --> 00:28:02,219
work to decide what what ranges of text

707
00:27:58,349 --> 00:28:04,109
we actually want to support so yeah

708
00:28:02,220 --> 00:28:06,180
knowing how many code points there are

709
00:28:04,109 --> 00:28:08,609
is actually something that's kind of a

710
00:28:06,180 --> 00:28:10,110
little bit of a different thing so I'm

711
00:28:08,609 --> 00:28:15,359
just gonna assume that we actually just

712
00:28:10,109 --> 00:28:16,829
passed that in like so on again and then

713
00:28:15,359 --> 00:28:18,839
the line advanced is something that we

714
00:28:16,829 --> 00:28:21,599
kind of want to be able to get out of

715
00:28:18,839 --> 00:28:23,099
the font itself right and that was

716
00:28:21,599 --> 00:28:26,099
something we probably can get from the

717
00:28:23,099 --> 00:28:28,199
text metrics but again that would

718
00:28:26,099 --> 00:28:30,869
require us to be able to get them out of

719
00:28:28,200 --> 00:28:32,340
a device of device context that's not

720
00:28:30,869 --> 00:28:34,559
really a big deal but it means that it

721
00:28:32,339 --> 00:28:36,929
kind of instigates this move a little

722
00:28:34,559 --> 00:28:39,779
bit so let's just go ahead and do it no

723
00:28:36,930 --> 00:28:41,810
time like the present right so if we

724
00:28:39,779 --> 00:28:45,109
were going to do that we would have to

725
00:28:41,809 --> 00:28:48,119
do our select object

726
00:28:45,109 --> 00:28:49,709
right do our select object get those

727
00:28:48,119 --> 00:28:52,469
tech metrics out and now we could

728
00:28:49,710 --> 00:28:54,960
actually have the text metrics which I

729
00:28:52,470 --> 00:29:04,430
think give us that that size that we're

730
00:28:54,960 --> 00:29:04,430
looking for right text metric TM height

731
00:29:04,759 --> 00:29:12,329
see what else we got in turn a letting

732
00:29:08,400 --> 00:29:14,370
external letting weight overhang Frisco

733
00:29:12,329 --> 00:29:15,990
last Garris let's see the height asset

734
00:29:14,369 --> 00:29:18,149
MD some of the characters there should

735
00:29:15,990 --> 00:29:19,559
also be a line height in piece of line

736
00:29:18,150 --> 00:29:22,700
for efficient the amount of letting

737
00:29:19,559 --> 00:29:25,109
space inside the bounds set by the TM

738
00:29:22,700 --> 00:29:26,190
high accent marks and other decals go in

739
00:29:25,109 --> 00:29:28,169
the sphere the tire may set the Samara

740
00:29:26,190 --> 00:29:30,330
the amount of extra letting space at the

741
00:29:28,170 --> 00:29:31,620
application that's between rows since

742
00:29:30,329 --> 00:29:33,659
this area is outside the five could

743
00:29:31,619 --> 00:29:35,729
taste dough marks so I believe what we

744
00:29:33,660 --> 00:29:38,310
want to do is probably team height + TM

745
00:29:35,730 --> 00:29:40,110
external letting would be my guess the

746
00:29:38,309 --> 00:29:41,940
documentation Inc right here but that

747
00:29:40,109 --> 00:29:43,909
seems right and if we look at this let's

748
00:29:41,940 --> 00:29:47,750
see what it says

749
00:29:43,910 --> 00:29:50,450
internal letting external letting

750
00:29:47,750 --> 00:29:53,970
baseline to baseline distance TM height

751
00:29:50,450 --> 00:29:57,090
yeah so it looks to me like TM height we

752
00:29:53,970 --> 00:29:59,670
then need to add TM external letting

753
00:29:57,089 --> 00:30:01,559
there to that I would think at the very

754
00:29:59,670 --> 00:30:07,140
least that's what it looks like to me

755
00:30:01,559 --> 00:30:09,809
right okay so after get that text metric

756
00:30:07,140 --> 00:30:13,980
our line advance right is going to be a

757
00:30:09,809 --> 00:30:21,480
text metric TM height plus text metric

758
00:30:13,980 --> 00:30:23,130
TM external letting no big deal but now

759
00:30:21,480 --> 00:30:25,410
we have this problem where we kind of

760
00:30:23,130 --> 00:30:27,240
need our global font device context

761
00:30:25,410 --> 00:30:29,550
right this thing needs to be a little

762
00:30:27,240 --> 00:30:33,809
more real and it needs to sit around all

763
00:30:29,549 --> 00:30:36,569
the time waiting on our beck and call so

764
00:30:33,809 --> 00:30:40,159
that we can actually make sure that it

765
00:30:36,569 --> 00:30:42,720
always you know is ready to service us

766
00:30:40,160 --> 00:30:45,180
let's take a look here at everywhere

767
00:30:42,720 --> 00:30:48,509
that we use it global flaunt device

768
00:30:45,180 --> 00:30:50,340
context and so on and so forth those are

769
00:30:48,509 --> 00:30:52,109
not actually ever being used but we kind

770
00:30:50,339 --> 00:30:55,230
of have them as zeroed out so I might as

771
00:30:52,109 --> 00:30:56,459
well fix them so we'll do that and then

772
00:30:55,230 --> 00:30:57,900
all I'm going to do is I'm just going to

773
00:30:56,460 --> 00:30:59,130
pull this stuff out

774
00:30:57,900 --> 00:31:01,110
and we're just gonna do this stuff at

775
00:30:59,130 --> 00:31:09,419
startup right this stuff's just gonna be

776
00:31:01,109 --> 00:31:12,808
done at startup and yeah and these will

777
00:31:09,419 --> 00:31:14,940
become defines pretty much right

778
00:31:12,808 --> 00:31:18,798
seems pretty pretty straightforward to

779
00:31:14,940 --> 00:31:23,548
me right so let's suppose we did this

780
00:31:18,798 --> 00:31:26,940
we've got our max width and our max

781
00:31:23,548 --> 00:31:30,658
height I would rather have these do

782
00:31:26,940 --> 00:31:33,240
something like max pot wit and max font

783
00:31:30,659 --> 00:31:35,220
height just so now we know that those

784
00:31:33,240 --> 00:31:37,740
are baked in there we can get rid of

785
00:31:35,220 --> 00:31:39,690
this because we are actually doing it

786
00:31:37,740 --> 00:31:44,579
and then we would have a initialized

787
00:31:39,690 --> 00:31:49,130
font DC sort of a situation like so and

788
00:31:44,579 --> 00:31:57,558
then we would have these guys out here

789
00:31:49,130 --> 00:31:57,559
little variable right and we've got

790
00:31:57,589 --> 00:32:08,189
global device context little bits right

791
00:32:04,579 --> 00:32:09,949
that all seems totally fine nothing

792
00:32:08,190 --> 00:32:14,669
particularly weird going on there right

793
00:32:09,950 --> 00:32:16,850
so global font device context that you

794
00:32:14,669 --> 00:32:19,429
don't need to make that checking anymore

795
00:32:16,849 --> 00:32:24,209
we go ahead and initialize everything

796
00:32:19,429 --> 00:32:26,278
global font device context and then we

797
00:32:24,210 --> 00:32:27,019
also need to get those bits out right

798
00:32:26,278 --> 00:32:30,960
there

799
00:32:27,019 --> 00:32:35,579
so that's all fine let's see where the

800
00:32:30,960 --> 00:32:36,659
bits is being used right so that's all

801
00:32:35,579 --> 00:32:38,158
good and now we just need to make sure

802
00:32:36,659 --> 00:32:39,929
that it's startup we call that we only

803
00:32:38,159 --> 00:32:41,159
need to call it once and then our device

804
00:32:39,929 --> 00:32:44,370
context would be good to go and we can

805
00:32:41,159 --> 00:32:46,140
use it everywhere we want right so right

806
00:32:44,369 --> 00:32:48,408
before we do anything we need to go

807
00:32:46,140 --> 00:32:57,788
ahead and initialize that that's totally

808
00:32:48,409 --> 00:33:03,330
doable and yeah there we go

809
00:32:57,788 --> 00:33:03,329
this up here into the global section

810
00:33:05,638 --> 00:33:21,219
okay so that is that and we could now

811
00:33:17,618 --> 00:33:22,749
also keep that information around like

812
00:33:21,220 --> 00:33:23,979
we didn't do it before because I said it

813
00:33:22,749 --> 00:33:25,210
would be a little bit you know tricky to

814
00:33:23,979 --> 00:33:27,460
get there now that we've had to take

815
00:33:25,210 --> 00:33:30,429
that step anyway we can finish this up

816
00:33:27,460 --> 00:33:34,769
by saying okay that loaded font will now

817
00:33:30,429 --> 00:33:36,879
store its text metric itself right so

818
00:33:34,769 --> 00:33:38,409
you know that's relatively

819
00:33:36,878 --> 00:33:39,579
straightforward although I guess I now

820
00:33:38,409 --> 00:33:42,580
we're starting to get into things where

821
00:33:39,579 --> 00:33:45,848
it's going to be a fairly a larger

822
00:33:42,579 --> 00:33:47,499
structure right and so that gets into a

823
00:33:45,848 --> 00:33:49,778
thing where maybe we want to go ahead

824
00:33:47,499 --> 00:33:52,569
and do it this way right so I'll just go

825
00:33:49,778 --> 00:33:55,229
ahead and and make that make that

826
00:33:52,569 --> 00:34:00,759
actually be something where we malloc it

827
00:33:55,229 --> 00:34:03,220
right and then that's something we can

828
00:34:00,759 --> 00:34:06,399
free yeah there we go

829
00:34:03,220 --> 00:34:09,878
so we malloc that loaded font and now

830
00:34:06,398 --> 00:34:12,878
we've got to change these guys oh that

831
00:34:09,878 --> 00:34:14,289
lovely see having a dot and an arrow for

832
00:34:12,878 --> 00:34:16,929
no reason

833
00:34:14,289 --> 00:34:19,599
but yeah once we do that we've got all

834
00:34:16,929 --> 00:34:22,000
of our stuff set up properly now for the

835
00:34:19,599 --> 00:34:24,429
text metric which means that the text

836
00:34:22,000 --> 00:34:27,369
metric does not have to be retrieved in

837
00:34:24,429 --> 00:34:30,519
here anymore right so this is just going

838
00:34:27,369 --> 00:34:32,829
to use font text metric for that piece

839
00:34:30,519 --> 00:34:35,079
of information all right so let's go

840
00:34:32,829 --> 00:34:40,899
ahead and clean up our compiled problems

841
00:34:35,079 --> 00:34:42,760
from all these changes conversion from

842
00:34:40,898 --> 00:34:45,489
long that's fine we'll just convert

843
00:34:42,760 --> 00:34:47,770
these to reals that's what we want to

844
00:34:45,489 --> 00:34:50,469
store the mass this is going to be max

845
00:34:47,769 --> 00:34:53,829
font with and this is going to be

846
00:34:50,469 --> 00:34:57,359
maximum height right actually I'll just

847
00:34:53,829 --> 00:35:01,650
do a search in replace max width

848
00:34:57,360 --> 00:35:09,690
Maxthon twit so go ahead and switch that

849
00:35:01,650 --> 00:35:18,480
up and then do next height max font

850
00:35:09,690 --> 00:35:20,280
height and done okay so in here we are

851
00:35:18,480 --> 00:35:22,019
finishing up that font stuff we've got

852
00:35:20,280 --> 00:35:29,100
the line advance in the code point cut

853
00:35:22,019 --> 00:35:32,940
now that's all good file name is not a

854
00:35:29,099 --> 00:35:34,380
member of asset source font I agree with

855
00:35:32,940 --> 00:35:38,039
that wholeheartedly

856
00:35:34,380 --> 00:35:41,070
in fact so let's take a look at what we

857
00:35:38,039 --> 00:35:42,719
actually need to fill out there what we

858
00:35:41,070 --> 00:35:49,680
actually need to fill out there is just

859
00:35:42,719 --> 00:35:53,269
a pointer to the font okay when we call

860
00:35:49,679 --> 00:35:55,859
load font now we need to do sort of that

861
00:35:53,269 --> 00:36:02,670
code point tab we know that we're going

862
00:35:55,860 --> 00:36:04,579
to have that many at the moment right so

863
00:36:02,670 --> 00:36:08,369
that's really all we need to do there

864
00:36:04,579 --> 00:36:11,219
temporarily speaking anyway and now this

865
00:36:08,369 --> 00:36:13,409
returns a pointer it's actually kind of

866
00:36:11,219 --> 00:36:15,629
nice because now it means that we don't

867
00:36:13,409 --> 00:36:16,219
have to ampersand that anywhere there we

868
00:36:15,630 --> 00:36:19,349
go

869
00:36:16,219 --> 00:36:21,629
all right so there we go we did a bunch

870
00:36:19,349 --> 00:36:23,159
of changes we're now adding fonts we

871
00:36:21,630 --> 00:36:25,200
don't really write them out in any sort

872
00:36:23,159 --> 00:36:29,039
of meaningful way yet so that's not

873
00:36:25,199 --> 00:36:30,960
quite as useful as we might hope but

874
00:36:29,039 --> 00:36:37,170
we're getting there right we're getting

875
00:36:30,960 --> 00:36:38,639
there so what we need to do now is we

876
00:36:37,170 --> 00:36:41,400
need to start building the actual font

877
00:36:38,639 --> 00:36:43,909
tables that we're going to need right so

878
00:36:41,400 --> 00:36:49,889
in here where I've got my loaded font

879
00:36:43,909 --> 00:36:51,509
let's go up care to loaded font when I

880
00:36:49,889 --> 00:36:53,309
come up here to loaded fonts when I

881
00:36:51,510 --> 00:36:55,200
allocate this font and I know what the

882
00:36:53,309 --> 00:36:56,789
code point count is what I need to do

883
00:36:55,199 --> 00:36:59,549
now is I need to allocate space for

884
00:36:56,789 --> 00:37:01,829
those tables right so I need to have

885
00:36:59,550 --> 00:37:05,130
like my bitmap IDs like I was going to

886
00:37:01,829 --> 00:37:07,369
do I want to do a malloc size of bitmap

887
00:37:05,130 --> 00:37:07,369
ID

888
00:37:07,829 --> 00:37:16,349
right times that code point count and

889
00:37:14,309 --> 00:37:18,569
I'd also like to do that horizontal

890
00:37:16,349 --> 00:37:21,390
advant hello okay

891
00:37:18,568 --> 00:37:22,619
a little way from you there I also want

892
00:37:21,389 --> 00:37:24,449
to do that horizontal advance the

893
00:37:22,619 --> 00:37:26,190
resolve ants is going to be that sort of

894
00:37:24,449 --> 00:37:34,529
squared code point count again with a

895
00:37:26,190 --> 00:37:37,349
with a float in it you know so exactly

896
00:37:34,530 --> 00:37:40,530
what you expect getting those two tables

897
00:37:37,349 --> 00:37:42,720
sort of ready to go and so then when we

898
00:37:40,530 --> 00:37:44,700
actually do the Fontan here what I would

899
00:37:42,719 --> 00:37:47,699
want to do is I'd want to set that debug

900
00:37:44,699 --> 00:37:49,558
font the bitmap IDs right I'd want to go

901
00:37:47,699 --> 00:37:52,710
ahead and set for whatever the code

902
00:37:49,559 --> 00:37:54,839
point index was I'd want to be able to

903
00:37:52,710 --> 00:37:59,548
set that bitmap ID to whatever add

904
00:37:54,838 --> 00:38:01,409
character asset actually returned right

905
00:37:59,548 --> 00:38:02,699
it also means like get out of a tagging

906
00:38:01,409 --> 00:38:05,429
business so I don't have to do that

907
00:38:02,699 --> 00:38:07,980
anymore which is kind of nice I can just

908
00:38:05,429 --> 00:38:15,269
go ahead and do it like that and save

909
00:38:07,980 --> 00:38:18,510
that piece of information okay so it's

910
00:38:15,269 --> 00:38:23,519
not what did i do there i not add to

911
00:38:18,510 --> 00:38:25,760
loaded fonts whereas loaded font there

912
00:38:23,519 --> 00:38:35,659
we go

913
00:38:25,760 --> 00:38:41,309
loaded loaded font i never out that yeah

914
00:38:35,659 --> 00:38:51,558
all right I guess I did my bad

915
00:38:41,309 --> 00:38:51,559
so bitmap ID v YZ and r3 2 horizontal

916
00:38:52,039 --> 00:39:00,080
advance right

917
00:38:56,110 --> 00:39:02,120
pretty basic so what we need to do now

918
00:39:00,079 --> 00:39:04,549
is we need to actually write this

919
00:39:02,119 --> 00:39:08,839
information out in some semblance of a

920
00:39:04,550 --> 00:39:11,150
useful way when we actually get to the

921
00:39:08,840 --> 00:39:13,010
font we don't have to do anything in

922
00:39:11,150 --> 00:39:14,420
particular for our font glyphs they can

923
00:39:13,010 --> 00:39:16,790
just be treated like bitmaps like they

924
00:39:14,420 --> 00:39:17,990
were being before so when we come

925
00:39:16,789 --> 00:39:20,239
through this path that's totally fine

926
00:39:17,989 --> 00:39:24,019
but we do need to do now is if the

927
00:39:20,239 --> 00:39:26,359
source type equals asset type font we

928
00:39:24,019 --> 00:39:28,130
need to actually do something here right

929
00:39:26,360 --> 00:39:31,610
we need to actually do something here oh

930
00:39:28,130 --> 00:39:33,680
and you know what that reminds me we

931
00:39:31,610 --> 00:39:35,390
can't actually free that font I don't

932
00:39:33,679 --> 00:39:38,289
know why I did that free font that

933
00:39:35,389 --> 00:39:40,250
thought needs to stay around yeah I

934
00:39:38,289 --> 00:39:42,230
can't be freed there I don't know what

935
00:39:40,250 --> 00:39:43,250
I'm what I was thinking that phone has

936
00:39:42,230 --> 00:39:46,490
to stick around cuz we're gonna we're

937
00:39:43,250 --> 00:39:51,260
gonna use it so that that's the stay so

938
00:39:46,489 --> 00:39:53,779
yeah so anyway when we come through here

939
00:39:51,260 --> 00:39:55,340
and we've got our font oops don't know

940
00:39:53,780 --> 00:39:57,920
why so it's sound there that was an

941
00:39:55,340 --> 00:40:01,610
autocomplete I'm sort of mistake I'm

942
00:39:57,920 --> 00:40:03,829
sure when we come through and get our

943
00:40:01,610 --> 00:40:06,200
thoughts we now need a way to write

944
00:40:03,829 --> 00:40:09,079
those out and you can kind of see how

945
00:40:06,199 --> 00:40:10,699
exactly that that was working it works

946
00:40:09,079 --> 00:40:12,380
exactly the same way as everything else

947
00:40:10,699 --> 00:40:16,279
we just need to write those tables out

948
00:40:12,380 --> 00:40:17,720
that the runtime is expecting to see we

949
00:40:16,280 --> 00:40:19,220
know we have two tables they're very

950
00:40:17,719 --> 00:40:21,589
straightforward we can even go into

951
00:40:19,219 --> 00:40:23,719
handmade asset a dot H and just see

952
00:40:21,590 --> 00:40:26,980
exactly what we were expecting them to

953
00:40:23,719 --> 00:40:29,659
look like right we have the the

954
00:40:26,980 --> 00:40:33,800
horizontal advanced table right you can

955
00:40:29,659 --> 00:40:36,379
see it right here and so what I can do

956
00:40:33,800 --> 00:40:38,900
is I can just come in and say okay these

957
00:40:36,380 --> 00:40:42,260
are what the sizes should be right

958
00:40:38,900 --> 00:40:43,309
the code point count squared like we're

959
00:40:42,260 --> 00:40:46,700
doing before

960
00:40:43,309 --> 00:40:48,529
again that code point count right that's

961
00:40:46,699 --> 00:40:50,449
exactly what we expect our sizes to be

962
00:40:48,530 --> 00:40:52,040
so all we have to do now is just F write

963
00:40:50,449 --> 00:40:53,569
them we need to F write them in the

964
00:40:52,039 --> 00:40:55,159
order that they're expected here they're

965
00:40:53,570 --> 00:40:58,010
expected code points and then horizontal

966
00:40:55,159 --> 00:41:01,009
advance so all I have to do is just do

967
00:40:58,010 --> 00:41:03,200
two of these guys write exactly the same

968
00:41:01,010 --> 00:41:08,390
kind of rights that we were doing first

969
00:41:03,199 --> 00:41:09,460
for that that code points right size and

970
00:41:08,389 --> 00:41:16,328
then for the

971
00:41:09,460 --> 00:41:21,019
horizontal advance and so yeah the data

972
00:41:16,329 --> 00:41:24,559
is just going to be from from the bitmap

973
00:41:21,018 --> 00:41:31,909
IDs and here it's going to be from the

974
00:41:24,559 --> 00:41:33,410
horizontal advance right no big deal

975
00:41:31,909 --> 00:41:37,190
doing the f rights exactly the way you

976
00:41:33,409 --> 00:41:39,469
would expect yeah nothing particularly

977
00:41:37,190 --> 00:41:41,690
unusual going on like I always say all

978
00:41:39,469 --> 00:41:43,998
pretty straightforward and so what we

979
00:41:41,690 --> 00:41:45,798
need to do now is we actually need some

980
00:41:43,998 --> 00:41:48,768
way of having the horizontal advance

981
00:41:45,798 --> 00:41:51,259
actually to filled in obviously that's

982
00:41:48,768 --> 00:41:52,969
not happening at the moment and so what

983
00:41:51,259 --> 00:41:54,920
we would like to do is have an actual

984
00:41:52,969 --> 00:41:58,429
way of filling in what the horizontal

985
00:41:54,920 --> 00:42:00,048
bands should be and this is kind of an

986
00:41:58,429 --> 00:42:02,509
annoying process I don't mind telling

987
00:42:00,048 --> 00:42:05,690
you it's it's a little bit ridiculous

988
00:42:02,509 --> 00:42:07,338
but off we go we just got to do it so

989
00:42:05,690 --> 00:42:10,639
let's do it so in order to get the

990
00:42:07,338 --> 00:42:13,400
kerning in win32 well actually you know

991
00:42:10,639 --> 00:42:15,889
what I could do let's let's cheese it

992
00:42:13,400 --> 00:42:18,048
first and then we'll do it correctly

993
00:42:15,889 --> 00:42:20,719
maybe tomorrow right because it'd be a

994
00:42:18,048 --> 00:42:23,900
little easier to choose at first so in

995
00:42:20,719 --> 00:42:26,900
here if we if we actually do load font

996
00:42:23,900 --> 00:42:29,389
glyph or whatever it is load with it map

997
00:42:26,900 --> 00:42:31,489
right I think we had 17 minutes on the

998
00:42:29,389 --> 00:42:35,268
clock if I'm not mistaken so we started

999
00:42:31,489 --> 00:42:38,659
late so alright anyway so if we're in

1000
00:42:35,268 --> 00:42:41,179
low glyph fit map and here we are in our

1001
00:42:38,659 --> 00:42:42,828
font stuff here once we know the height

1002
00:42:41,179 --> 00:42:44,690
the abs are the width of the font let's

1003
00:42:42,829 --> 00:42:46,460
just stuff the width in there right

1004
00:42:44,690 --> 00:42:47,838
because we know what the result with is

1005
00:42:46,460 --> 00:42:50,509
we're just just stuff result within

1006
00:42:47,838 --> 00:42:51,650
there not correct value at all but

1007
00:42:50,509 --> 00:42:53,150
that'll emulate what we were doing

1008
00:42:51,650 --> 00:42:58,670
before sort of with our proportional

1009
00:42:53,150 --> 00:43:00,349
fonts right so yeah so we'll go ahead

1010
00:42:58,670 --> 00:43:07,159
and do that and what I want to do there

1011
00:43:00,349 --> 00:43:11,619
is say okay let's loop through all of

1012
00:43:07,159 --> 00:43:11,618
the code points that there are

1013
00:43:15,179 --> 00:43:22,269
right and for every code point that

1014
00:43:20,289 --> 00:43:24,340
there is we will say that if we're the

1015
00:43:22,269 --> 00:43:26,139
previous code point whatever the next

1016
00:43:24,340 --> 00:43:28,630
code point is it's going to advance by

1017
00:43:26,139 --> 00:43:33,839
our width right so we'll go through all

1018
00:43:28,630 --> 00:43:33,840
of the code points for this font right

1019
00:43:33,929 --> 00:43:47,319
like so we will say no matter what the

1020
00:43:38,860 --> 00:43:48,820
code point is there we go no matter what

1021
00:43:47,320 --> 00:43:50,470
the other code point is we're going to

1022
00:43:48,820 --> 00:43:52,780
fill in its thing in the table so

1023
00:43:50,469 --> 00:43:54,969
whatever our font our horizontal advance

1024
00:43:52,780 --> 00:43:59,860
right we're going to go ahead and say

1025
00:43:54,969 --> 00:44:02,439
that the other code point I believe we

1026
00:43:59,860 --> 00:44:04,960
have our code point whatever comes after

1027
00:44:02,440 --> 00:44:08,769
it it's gonna be our result with and

1028
00:44:04,960 --> 00:44:13,860
that's what it's going to be and that's

1029
00:44:08,769 --> 00:44:16,210
it now this horizontal advance table

1030
00:44:13,860 --> 00:44:19,120
thing I think we want to clean up a

1031
00:44:16,210 --> 00:44:21,429
little bit we'll talk about that

1032
00:44:19,119 --> 00:44:23,799
probably tomorrow but for now we're

1033
00:44:21,429 --> 00:44:28,599
gonna leave it hand it hand indexed like

1034
00:44:23,800 --> 00:44:31,090
it is okay so where is the which code

1035
00:44:28,599 --> 00:44:34,329
point are we actually doing oh I do an

1036
00:44:31,090 --> 00:44:43,539
inconsistent capitalization of that

1037
00:44:34,329 --> 00:44:46,630
which is unfortunate right let's see

1038
00:44:43,539 --> 00:44:47,849
conversion from in 32 to our 32 we could

1039
00:44:46,630 --> 00:44:56,108
fix that

1040
00:44:47,849 --> 00:44:58,989
and finally font so source font yeah

1041
00:44:56,108 --> 00:45:02,199
all right so now we're actually writing

1042
00:44:58,989 --> 00:45:03,429
everything out Chris we've done a lot of

1043
00:45:02,199 --> 00:45:04,689
changes so I don't even know what's

1044
00:45:03,429 --> 00:45:07,478
working and what's not at this point

1045
00:45:04,690 --> 00:45:11,920
we're just kind of in that that sort of

1046
00:45:07,478 --> 00:45:15,068
limbo stage but you know something just

1047
00:45:11,920 --> 00:45:17,950
happened we wrote out something now we

1048
00:45:15,068 --> 00:45:20,079
get to start the unenviable process of

1049
00:45:17,949 --> 00:45:23,858
actually trying to load that in and make

1050
00:45:20,079 --> 00:45:26,950
sense of it at all and there's something

1051
00:45:23,858 --> 00:45:29,170
route rather special we have to do to

1052
00:45:26,949 --> 00:45:31,899
make that happen now loading in the font

1053
00:45:29,170 --> 00:45:35,259
itself is trivial it's just all gonna

1054
00:45:31,900 --> 00:45:38,139
happen automatically our our load code

1055
00:45:35,259 --> 00:45:40,630
here that we wrote just to do the same

1056
00:45:38,139 --> 00:45:42,338
stuff as before totally works like

1057
00:45:40,630 --> 00:45:46,690
there's nothing unusual that has to

1058
00:45:42,338 --> 00:45:49,838
happen there it's all good so really the

1059
00:45:46,690 --> 00:45:52,509
the only the only part of this that's

1060
00:45:49,838 --> 00:45:55,420
going to be breakage II that's going to

1061
00:45:52,509 --> 00:45:58,179
be break II is that the code points are

1062
00:45:55,420 --> 00:46:02,019
indexes into the bitmap you know they're

1063
00:45:58,179 --> 00:46:04,179
I their bitmap IDs right and the problem

1064
00:46:02,018 --> 00:46:05,679
with bitmap IDs is that those bitmap IDs

1065
00:46:04,179 --> 00:46:08,858
get rebased when the file gets loaded

1066
00:46:05,679 --> 00:46:11,768
right so you know if we only had one

1067
00:46:08,858 --> 00:46:13,989
asset file then it wouldn't matter but

1068
00:46:11,768 --> 00:46:16,208
if we have 12 asset files then each

1069
00:46:13,989 --> 00:46:18,429
asset file as it loads has all of its

1070
00:46:16,208 --> 00:46:19,778
bitmap IDs offset by the total number of

1071
00:46:18,429 --> 00:46:25,028
bitmap IDs that there already have been

1072
00:46:19,778 --> 00:46:28,509
right and so that or I should say asset

1073
00:46:25,028 --> 00:46:32,018
IDs mm-hmm however many asset IDs there

1074
00:46:28,509 --> 00:46:36,940
have been right so that is an issue

1075
00:46:32,018 --> 00:46:40,419
right that is something that we can't

1076
00:46:36,940 --> 00:46:42,969
really fix without having some way of

1077
00:46:40,420 --> 00:46:44,979
when we after we do the load those

1078
00:46:42,969 --> 00:46:49,088
things have to be spun through and

1079
00:46:44,978 --> 00:46:50,379
corrected right so or we could correct

1080
00:46:49,088 --> 00:46:52,239
them on the fly is the other thing we

1081
00:46:50,380 --> 00:46:54,548
can do and that's not too hard either so

1082
00:46:52,239 --> 00:46:57,759
maybe we'll do that but either way we

1083
00:46:54,548 --> 00:47:02,018
need a piece of information right and so

1084
00:46:57,759 --> 00:47:04,269
if you take a look at at this here what

1085
00:47:02,018 --> 00:47:08,169
we would have to do is say okay when we

1086
00:47:04,268 --> 00:47:09,649
load this font in write the asset

1087
00:47:08,170 --> 00:47:13,760
information that we actually

1088
00:47:09,650 --> 00:47:15,608
have for that font needs to give us an

1089
00:47:13,760 --> 00:47:21,260
additional piece of information that

1090
00:47:15,608 --> 00:47:24,098
will tell us how far the font should

1091
00:47:21,260 --> 00:47:26,869
have to offset its code points right and

1092
00:47:24,099 --> 00:47:29,028
so then from then on whenever anyone

1093
00:47:26,869 --> 00:47:31,930
uses one of these loaded fonts they will

1094
00:47:29,028 --> 00:47:36,579
be able to do that offset properly right

1095
00:47:31,929 --> 00:47:36,578
so if we take a look in handmade asset

1096
00:47:36,699 --> 00:47:44,778
dot H I feel like we know which file

1097
00:47:42,318 --> 00:47:47,719
we're dealing with right if you take a

1098
00:47:44,778 --> 00:47:50,079
look at the we do the asset file index

1099
00:47:47,719 --> 00:47:53,179
the get file handle for a thing right

1100
00:47:50,079 --> 00:47:55,690
that get file handle for what we could

1101
00:47:53,179 --> 00:47:59,960
do is just say whatever the asset file

1102
00:47:55,690 --> 00:48:01,818
rebase mminton here might be enough I'm

1103
00:47:59,960 --> 00:48:04,519
not sure it probably is it because it

1104
00:48:01,818 --> 00:48:08,179
probably could even be perfect because

1105
00:48:04,519 --> 00:48:10,460
of the way that we reveille stuff mm-hmm

1106
00:48:08,179 --> 00:48:16,219
because the asset types are contiguous

1107
00:48:10,460 --> 00:48:18,500
that's the way we rewrote them to be no

1108
00:48:16,219 --> 00:48:20,028
I'm saying you know what I'm saying so

1109
00:48:18,500 --> 00:48:21,920
if we take a look at our asset structure

1110
00:48:20,028 --> 00:48:27,559
you can see what it's got in here it's

1111
00:48:21,920 --> 00:48:30,079
got the HHA right and a file index so in

1112
00:48:27,559 --> 00:48:33,680
addition to that information we would

1113
00:48:30,079 --> 00:48:39,440
need to store whatever that whatever

1114
00:48:33,679 --> 00:48:42,379
that we basement is so I'm just gonna do

1115
00:48:39,440 --> 00:48:43,849
that I'm going to do that at the for

1116
00:48:42,380 --> 00:48:47,420
right now let's say that we've got that

1117
00:48:43,849 --> 00:48:49,849
so it's just the thought bitmap ID

1118
00:48:47,420 --> 00:48:52,130
offset something like that and we'll see

1119
00:48:49,849 --> 00:48:53,960
how that goes from there but point being

1120
00:48:52,130 --> 00:48:57,740
so then what will happen is well just in

1121
00:48:53,960 --> 00:49:01,039
here we'll say bitmap ID offset right

1122
00:48:57,739 --> 00:49:08,349
equals whatever that the asset structure

1123
00:49:01,039 --> 00:49:12,310
is asset pop it map ID also

1124
00:49:08,349 --> 00:49:15,159
right so that'll be set to zero normally

1125
00:49:12,309 --> 00:49:16,420
but then when we load the things it'll

1126
00:49:15,159 --> 00:49:19,179
be set to something else we'll see that

1127
00:49:16,420 --> 00:49:21,550
in a second so what we need to do here

1128
00:49:19,179 --> 00:49:24,929
is just have our loaded font have that

1129
00:49:21,550 --> 00:49:28,660
piece of information which is the bitmap

1130
00:49:24,929 --> 00:49:30,369
ID offset and then whenever we're

1131
00:49:28,659 --> 00:49:33,549
getting these whenever we get one of

1132
00:49:30,369 --> 00:49:35,289
these glyphs right whenever you do get

1133
00:49:33,550 --> 00:49:38,050
bitmap for glyph it's just gonna

1134
00:49:35,289 --> 00:49:41,980
actually be offset right by whatever

1135
00:49:38,050 --> 00:49:44,170
that value is and that'll allow us to do

1136
00:49:41,980 --> 00:49:46,809
our rebasing pretty trivially right not

1137
00:49:44,170 --> 00:49:52,420
much not much craziness has to go on

1138
00:49:46,809 --> 00:49:53,289
there all right so let's see let's push

1139
00:49:52,420 --> 00:50:00,159
this a little further

1140
00:49:53,289 --> 00:50:05,559
no operator found yeah I agree with that

1141
00:50:00,159 --> 00:50:11,339
I agree with that how about that

1142
00:50:05,559 --> 00:50:17,019
does that help you apparently not

1143
00:50:11,340 --> 00:50:20,079
there we go so I think that's just about

1144
00:50:17,019 --> 00:50:22,509
everything the problem is we have not

1145
00:50:20,079 --> 00:50:26,710
written anything to actually set that

1146
00:50:22,510 --> 00:50:29,140
thing right so when we come in here and

1147
00:50:26,710 --> 00:50:31,840
we do sort of our all of our loading

1148
00:50:29,139 --> 00:50:34,329
right we come in here we're loading in

1149
00:50:31,840 --> 00:50:37,390
our stuff when we spin through these

1150
00:50:34,329 --> 00:50:38,799
things what we have to do is now inside

1151
00:50:37,389 --> 00:50:43,029
our assets as we spin through those

1152
00:50:38,800 --> 00:50:45,820
assets if the asset type is a font we

1153
00:50:43,030 --> 00:50:47,890
need to do that rebasing right we need

1154
00:50:45,820 --> 00:50:52,170
to kind of know how that rebasing would

1155
00:50:47,889 --> 00:50:55,409
go oh you know what I'm wrong I'm

1156
00:50:52,170 --> 00:50:57,460
totally wrong we can do it per file

1157
00:50:55,409 --> 00:50:59,710
because if you remember the way that it

1158
00:50:57,460 --> 00:51:02,320
works is asset types are contiguous and

1159
00:50:59,710 --> 00:51:05,590
they are loaded contiguously and since

1160
00:51:02,320 --> 00:51:10,390
all of the glyphs are the same type all

1161
00:51:05,590 --> 00:51:13,059
we need to know is the base value how

1162
00:51:10,389 --> 00:51:17,710
far that base value got shifted for that

1163
00:51:13,059 --> 00:51:20,960
file very clever

1164
00:51:17,710 --> 00:51:23,389
perhaps a little too clever

1165
00:51:20,960 --> 00:51:26,028
the debugging is gonna be fun getting

1166
00:51:23,389 --> 00:51:28,578
all this stuff working but that means

1167
00:51:26,028 --> 00:51:31,219
that this does not have to complicate

1168
00:51:28,579 --> 00:51:35,440
our asset structure it can just be a

1169
00:51:31,219 --> 00:51:42,170
property of the file which is much nicer

1170
00:51:35,440 --> 00:51:44,659
right so that's that's pretty pretty

1171
00:51:42,170 --> 00:51:46,579
nice so that means when we come in here

1172
00:51:44,659 --> 00:51:48,558
and we take a particular file index all

1173
00:51:46,579 --> 00:51:51,890
we have to do is you know we've got that

1174
00:51:48,559 --> 00:51:54,528
file when we actually see you know I

1175
00:51:51,889 --> 00:51:57,469
guess when we start right when we when

1176
00:51:54,528 --> 00:52:00,670
we initially do this I assume that when

1177
00:51:57,469 --> 00:52:04,400
we create one of these file guys right

1178
00:52:00,670 --> 00:52:08,329
like right here we can say that the

1179
00:52:04,400 --> 00:52:11,869
the the tag base for this guy is going

1180
00:52:08,329 --> 00:52:15,528
to be fit map idea I'll set zero and

1181
00:52:11,869 --> 00:52:18,019
then later when we come through and we

1182
00:52:15,528 --> 00:52:20,298
do all of our reading when we see that

1183
00:52:18,018 --> 00:52:23,358
we have gotten to that particular type

1184
00:52:20,298 --> 00:52:27,139
whatever the you know when we've gotten

1185
00:52:23,358 --> 00:52:29,478
to two whatever that type is like desk

1186
00:52:27,139 --> 00:52:35,498
type ID or whatever right

1187
00:52:29,478 --> 00:52:35,498
when we get to that we can just set it

1188
00:52:35,619 --> 00:52:52,869
so when the when the source type ID is

1189
00:52:46,608 --> 00:52:55,248
going to be equal to asset type

1190
00:52:52,869 --> 00:52:59,930
then we can sort of snap what it

1191
00:52:55,248 --> 00:53:03,159
actually is set to right so let's think

1192
00:52:59,929 --> 00:53:03,159
about this for a second

1193
00:53:08,840 --> 00:53:18,420
cuz we've got some things to think about

1194
00:53:10,860 --> 00:53:20,640
here right so in here we've got our

1195
00:53:18,420 --> 00:53:25,440
asset count so we know the first asset

1196
00:53:20,639 --> 00:53:29,639
that would be loaded for a font cliff

1197
00:53:25,440 --> 00:53:32,460
for this file right what we don't know

1198
00:53:29,639 --> 00:53:34,109
is what the previous what it thinks that

1199
00:53:32,460 --> 00:53:36,599
that should have been like what it

1200
00:53:34,110 --> 00:53:38,490
thinks we don't know the difference

1201
00:53:36,599 --> 00:53:41,880
between that and what it thinks right

1202
00:53:38,489 --> 00:53:44,129
what it thought the files were but since

1203
00:53:41,880 --> 00:53:50,930
in here we have first asset index I

1204
00:53:44,130 --> 00:53:53,780
believe it's just that right and to be

1205
00:53:50,929 --> 00:53:57,799
certain that's kind of a signed value

1206
00:53:53,780 --> 00:54:02,490
right because we it may go backwards I

1207
00:53:57,800 --> 00:54:05,780
don't think it really can it shouldn't

1208
00:54:02,489 --> 00:54:09,689
be possible to do so but just in case

1209
00:54:05,780 --> 00:54:11,880
right so I think that actually does do

1210
00:54:09,690 --> 00:54:13,829
it but like I said we're gonna have it's

1211
00:54:11,880 --> 00:54:15,210
gonna be quite the debug festival with

1212
00:54:13,829 --> 00:54:16,319
only six minutes left there's no way

1213
00:54:15,210 --> 00:54:19,079
we're ever gonna get this working this

1214
00:54:16,320 --> 00:54:20,309
will have to be for tomorrow but at

1215
00:54:19,079 --> 00:54:22,860
least we've got most of our stuff

1216
00:54:20,309 --> 00:54:24,329
straightened out so the asset doesn't

1217
00:54:22,860 --> 00:54:28,320
have that anything anymore

1218
00:54:24,329 --> 00:54:29,759
what does have in it is the file so if

1219
00:54:28,320 --> 00:54:34,019
we take a look at that and get file

1220
00:54:29,760 --> 00:54:35,610
handle four you can see that that gets

1221
00:54:34,019 --> 00:54:37,469
out sort of the piece of file

1222
00:54:35,610 --> 00:54:40,530
information that we want so what we want

1223
00:54:37,469 --> 00:54:43,559
to do here is grab that particular thing

1224
00:54:40,530 --> 00:54:48,780
so the asset file index right we want to

1225
00:54:43,559 --> 00:54:50,820
grab that particular thing and and you

1226
00:54:48,780 --> 00:54:57,810
know what I probably want to do this

1227
00:54:50,820 --> 00:55:02,039
right get file for like that the file

1228
00:54:57,809 --> 00:55:06,699
index get file for asset is that even

1229
00:55:02,039 --> 00:55:12,279
maybe I don't know seems reasonable

1230
00:55:06,699 --> 00:55:16,179
yeah yeah let's just do that

1231
00:55:12,280 --> 00:55:17,110
that seems better yeah all right I just

1232
00:55:16,179 --> 00:55:18,429
wanted to be able to put in a little

1233
00:55:17,110 --> 00:55:21,309
assertion there that's all that was

1234
00:55:18,429 --> 00:55:26,199
doing nothing particularly fancy and so

1235
00:55:21,309 --> 00:55:27,820
that's just going to tell me which asset

1236
00:55:26,199 --> 00:55:30,189
file we are so there we go

1237
00:55:27,820 --> 00:55:32,830
Asif I'll get file there's our final

1238
00:55:30,190 --> 00:55:34,409
index everything's fine everything's

1239
00:55:32,829 --> 00:55:40,269
dandy

1240
00:55:34,409 --> 00:55:42,750
there's our results for returning so

1241
00:55:40,269 --> 00:55:45,280
oops

1242
00:55:42,750 --> 00:55:57,719
and then this get file handle for

1243
00:55:45,280 --> 00:56:10,330
actually just becomes this file right

1244
00:55:57,719 --> 00:56:12,459
okay yeah now we do that and now we have

1245
00:56:10,329 --> 00:56:18,880
our font bitmap id offset which we

1246
00:56:12,460 --> 00:56:22,750
wanted that looks like I messed up let's

1247
00:56:18,880 --> 00:56:27,099
take a look at the file format it is

1248
00:56:22,750 --> 00:56:30,639
where is it asset type no I want file

1249
00:56:27,099 --> 00:56:34,710
format that's what I want there we go

1250
00:56:30,639 --> 00:56:34,710
it's just asset not asset type

1251
00:56:37,070 --> 00:56:42,500
we go alright so we're basically out of

1252
00:56:41,929 --> 00:56:44,509
time

1253
00:56:42,500 --> 00:56:46,670
so I'm just going to go ahead and say

1254
00:56:44,510 --> 00:56:51,830
that we will do the debugging for this

1255
00:56:46,670 --> 00:56:54,050
on the next stream because yeah there's

1256
00:56:51,829 --> 00:56:58,069
just just too much stuff that we did

1257
00:56:54,050 --> 00:57:00,260
there so both things are are you know

1258
00:56:58,070 --> 00:57:01,760
sort of nominally done but they're you

1259
00:57:00,260 --> 00:57:03,260
know not going to work is basically what

1260
00:57:01,760 --> 00:57:04,850
it boils down to

1261
00:57:03,260 --> 00:57:05,930
so we basically I'm just kind of

1262
00:57:04,849 --> 00:57:08,269
surprised we didn't get some kind of a

1263
00:57:05,929 --> 00:57:11,809
crash eNOS in there but we're more or

1264
00:57:08,269 --> 00:57:13,750
less there we just have to now go step

1265
00:57:11,809 --> 00:57:16,759
through everything clean up everything

1266
00:57:13,750 --> 00:57:18,829
that might be buggy and get ourselves

1267
00:57:16,760 --> 00:57:20,420
into a working state but that was

1268
00:57:18,829 --> 00:57:22,789
everything that's all the actual

1269
00:57:20,420 --> 00:57:25,400
implementation we need to do so now

1270
00:57:22,789 --> 00:57:29,480
we're just down to this the more

1271
00:57:25,400 --> 00:57:32,360
straightforward process of of makeup

1272
00:57:29,480 --> 00:57:35,719
making it work alright I will go ahead

1273
00:57:32,360 --> 00:57:36,769
and go to the Q and a so if you have any

1274
00:57:35,719 --> 00:57:38,719
questions about what we've done today

1275
00:57:36,769 --> 00:57:42,190
now would be the time to ask them please

1276
00:57:38,719 --> 00:57:42,189
prefix your questions with Q :

1277
00:58:05,929 --> 00:58:18,818
I'm recruiting braces give us a sec very

1278
00:58:09,800 --> 00:58:18,818
well I will give you 15 minutes in fact

1279
00:58:25,809 --> 00:58:32,150
garland abloom I try to explain to

1280
00:58:28,699 --> 00:58:40,129
someone that a color is just a UN 32 and

1281
00:58:32,150 --> 00:58:42,740
I am not sure it got across so I think

1282
00:58:40,130 --> 00:58:47,740
we talked about this on an episode of

1283
00:58:42,739 --> 00:58:47,739
handmade hero so it might be kind of a

1284
00:58:48,489 --> 00:58:52,189
might be kind of retreading a bit it

1285
00:58:50,780 --> 00:58:53,630
might be best to just go back and watch

1286
00:58:52,190 --> 00:58:55,849
some of the rendering stuff we talked

1287
00:58:53,630 --> 00:59:09,940
about but you know it's it's pretty

1288
00:58:55,849 --> 00:59:15,980
simple color is a very ambiguous term

1289
00:59:09,940 --> 00:59:18,079
right a color is just can describe a

1290
00:59:15,980 --> 00:59:21,079
number of different things right are you

1291
00:59:18,079 --> 00:59:22,818
talking about emissive color like you're

1292
00:59:21,079 --> 00:59:26,410
talking about something that gives off

1293
00:59:22,818 --> 00:59:29,088
light are you talking about reflection

1294
00:59:26,409 --> 00:59:32,449
right are you talking about something

1295
00:59:29,088 --> 00:59:34,818
that like absorbs some light and only

1296
00:59:32,449 --> 00:59:37,429
put some of the light back you know etc

1297
00:59:34,818 --> 00:59:41,539
etc so color is kind of an ambiguous

1298
00:59:37,429 --> 00:59:42,949
term and so you know I feel like you

1299
00:59:41,539 --> 00:59:44,029
want to go back and watch earlier hamon

1300
00:59:42,949 --> 00:59:45,980
heroes to really sort of talk about

1301
00:59:44,030 --> 00:59:49,069
color and get color fairly solid but

1302
00:59:45,980 --> 00:59:50,510
what I'll say is most of the time what

1303
00:59:49,068 --> 00:59:56,808
we're dealing with is sort of the

1304
00:59:50,510 --> 00:59:59,299
concept of modulated color which is to

1305
00:59:56,809 --> 01:00:02,359
say that somewhere in the game something

1306
00:59:59,298 --> 01:00:06,858
has an idea of an amount of light that

1307
01:00:02,358 --> 01:00:09,159
is occurring and we are storing what

1308
01:00:06,858 --> 01:00:12,078
percentage of that light gets through

1309
01:00:09,159 --> 01:00:14,179
right so we're talking about you know

1310
01:00:12,079 --> 01:00:17,298
there's a certain amount of light coming

1311
01:00:14,179 --> 01:00:18,649
into something right here's some red

1312
01:00:17,298 --> 01:00:21,798
here's some green

1313
01:00:18,650 --> 01:00:23,568
here's some blue or whatever right and

1314
01:00:21,798 --> 01:00:25,548
these are my photons they're coming in

1315
01:00:23,568 --> 01:00:26,748
here I've got a bunch of red photons and

1316
01:00:25,548 --> 01:00:30,619
a bunch of green flows so on right

1317
01:00:26,748 --> 01:00:32,179
they're going to hit something or do

1318
01:00:30,619 --> 01:00:35,240
something and then I'm gonna have less

1319
01:00:32,179 --> 01:00:37,399
of them left some of them are going to

1320
01:00:35,239 --> 01:00:38,989
get absorbed or whatever right and so

1321
01:00:37,400 --> 01:00:41,389
the typical case might be like a bounce

1322
01:00:38,989 --> 01:00:43,159
of lighting you know income some photons

1323
01:00:41,389 --> 01:00:44,989
some of them get absorbed into the

1324
01:00:43,159 --> 01:00:47,868
material here and some of them bounce

1325
01:00:44,989 --> 01:00:49,758
out right so typically what we're

1326
01:00:47,869 --> 01:00:52,999
storing is restoring sort of an idea of

1327
01:00:49,759 --> 01:00:54,740
a percentage color and since the human

1328
01:00:52,998 --> 01:00:56,358
eye responds to has you know three

1329
01:00:54,739 --> 01:00:59,558
different receptors red green and blue

1330
01:00:56,358 --> 01:01:02,690
receptors in you know in your actual eye

1331
01:00:59,559 --> 01:01:07,999
we tend to track those three colors we

1332
01:01:02,690 --> 01:01:11,420
tend to track red green and blue and so

1333
01:01:07,998 --> 01:01:15,768
what we tend to store is a value from 0%

1334
01:01:11,420 --> 01:01:18,230
to 100% for these modulated colors one

1335
01:01:15,768 --> 01:01:21,558
for each channel so restoring three

1336
01:01:18,230 --> 01:01:24,829
numbers right that represent the

1337
01:01:21,559 --> 01:01:27,289
percentage of light reflected light

1338
01:01:24,829 --> 01:01:29,420
passed through light emitted whatever we

1339
01:01:27,289 --> 01:01:32,059
want a percentage of some value that's

1340
01:01:29,420 --> 01:01:33,470
known in the engine somewhere in this in

1341
01:01:32,059 --> 01:01:36,920
a different way depending on the

1342
01:01:33,469 --> 01:01:39,318
circumstance so typically what we do is

1343
01:01:36,920 --> 01:01:41,509
in order to pack these down into

1344
01:01:39,318 --> 01:01:43,818
something small look Arlanda Bloom was

1345
01:01:41,509 --> 01:01:48,019
talking about is we might often take a

1346
01:01:43,818 --> 01:01:49,998
UN 32 which is 32 bits of information

1347
01:01:48,018 --> 01:01:53,328
right and what we'll do is we'll

1348
01:01:49,998 --> 01:01:56,179
segregate that up like so we will pack

1349
01:01:53,329 --> 01:01:59,180
eight bits of our 8 bits of G eight bits

1350
01:01:56,179 --> 01:02:04,759
of B eight bits of alpha in the case of

1351
01:01:59,179 --> 01:02:06,409
a sort of like a OpenGL style or on

1352
01:02:04,759 --> 01:02:09,409
Windows which I believe is the format

1353
01:02:06,409 --> 01:02:12,259
that we're using we will use sort of the

1354
01:02:09,409 --> 01:02:18,739
window style which makes it look like

1355
01:02:12,259 --> 01:02:23,498
this eight b8 g 8 r 8 a these are

1356
01:02:18,739 --> 01:02:27,349
reversed from what they would be right

1357
01:02:23,498 --> 01:02:28,909
how do we do that right 32 bits goes to

1358
01:02:27,349 --> 01:02:30,859
eight bits of each what do these

1359
01:02:28,909 --> 01:02:31,889
actually mean what's the a well first of

1360
01:02:30,858 --> 01:02:34,318
all

1361
01:02:31,889 --> 01:02:36,389
the are the G and the B are just trying

1362
01:02:34,318 --> 01:02:38,818
to encode this percentage so what we do

1363
01:02:36,389 --> 01:02:40,710
is we say that in that any particular

1364
01:02:38,818 --> 01:02:41,159
one of these 8-bit values a zero in

1365
01:02:40,710 --> 01:02:44,009
there

1366
01:02:41,159 --> 01:02:45,719
maps to zero percent a 255 which is the

1367
01:02:44,009 --> 01:02:47,519
most that it could possibly take on is a

1368
01:02:45,719 --> 01:02:49,679
hundred percent and anything in between

1369
01:02:47,518 --> 01:02:54,328
is interpreted as a smooth step between

1370
01:02:49,679 --> 01:03:01,048
those right so 120 for example is going

1371
01:02:54,329 --> 01:03:03,869
to map to 120 over to 55% that's how we

1372
01:03:01,048 --> 01:03:06,389
can code color values into a unit 32 the

1373
01:03:03,869 --> 01:03:09,900
Alpha channel which is this extra one

1374
01:03:06,389 --> 01:03:13,159
here is since we need to know additional

1375
01:03:09,900 --> 01:03:17,099
information sometimes such as how a

1376
01:03:13,159 --> 01:03:19,170
translucent something might be or

1377
01:03:17,099 --> 01:03:21,420
transparent in this case not translucent

1378
01:03:19,170 --> 01:03:23,249
how transparent something might be what

1379
01:03:21,420 --> 01:03:26,730
we often do is store another percentage

1380
01:03:23,248 --> 01:03:28,919
which is a percentage that says how much

1381
01:03:26,730 --> 01:03:32,460
you see through this particular thing

1382
01:03:28,920 --> 01:03:34,259
right and so that's a separate value

1383
01:03:32,460 --> 01:03:35,999
that's not part of the color but it's

1384
01:03:34,259 --> 01:03:37,769
it's important for our rendering so we

1385
01:03:35,998 --> 01:03:41,149
typically pack an alpha value here not

1386
01:03:37,768 --> 01:03:41,149
always but sometimes

1387
01:03:46,980 --> 01:03:52,150
robbery you added text metrics into the

1388
01:03:49,599 --> 01:03:56,110
struct and then decide to allocate why

1389
01:03:52,150 --> 01:03:58,119
and what's the benefit so the reason my

1390
01:03:56,110 --> 01:04:00,940
thought process there just to explain it

1391
01:03:58,119 --> 01:04:02,589
in a little more detail was the reason I

1392
01:04:00,940 --> 01:04:04,329
wanted to Alec this was just because I

1393
01:04:02,590 --> 01:04:07,300
was like well it's starting to get

1394
01:04:04,329 --> 01:04:10,119
pretty big right and so let's take a

1395
01:04:07,300 --> 01:04:18,700
look at how big it actually was right

1396
01:04:10,119 --> 01:04:21,880
text metric right is this big ol struct

1397
01:04:18,699 --> 01:04:24,789
right and so I don't necessarily want

1398
01:04:21,880 --> 01:04:26,289
people to have to store that on the

1399
01:04:24,789 --> 01:04:28,269
stack or pass it around or whatever I

1400
01:04:26,289 --> 01:04:29,860
want them to be able to Alec that once

1401
01:04:28,269 --> 01:04:31,389
it gets to something that's that big I

1402
01:04:29,860 --> 01:04:32,590
just gotten big enough that I was like

1403
01:04:31,389 --> 01:04:37,059
might as well allocated on the heap

1404
01:04:32,590 --> 01:04:38,230
right that was my thinking at some point

1405
01:04:37,059 --> 01:04:40,090
some gets big enough you can allocate on

1406
01:04:38,230 --> 01:04:41,500
heap and in this case it seems to be

1407
01:04:40,090 --> 01:04:42,940
reasonable because we have a bunch of

1408
01:04:41,500 --> 01:04:44,409
allocation we wanted to do there because

1409
01:04:42,940 --> 01:04:45,940
we're storing these big tables and stuff

1410
01:04:44,409 --> 01:04:47,980
and that just seems like the right thing

1411
01:04:45,940 --> 01:04:51,179
to do so we don't end up having giant

1412
01:04:47,980 --> 01:04:51,179
things on the stack unnecessarily

1413
01:05:02,710 --> 01:05:07,010
about the language having different

1414
01:05:04,849 --> 01:05:08,150
fonts with the supply to added packages

1415
01:05:07,010 --> 01:05:10,520
by other people

1416
01:05:08,150 --> 01:05:12,889
yeah I felt like it probably would write

1417
01:05:10,519 --> 01:05:16,210
my thinking that was that people might

1418
01:05:12,889 --> 01:05:19,789
want to add new fonts for new languages

1419
01:05:16,210 --> 01:05:22,849
along with new translations into the

1420
01:05:19,789 --> 01:05:24,469
game and so you know I there's not going

1421
01:05:22,849 --> 01:05:28,250
to be much text in the game I don't

1422
01:05:24,469 --> 01:05:30,709
think but you know there might be like

1423
01:05:28,250 --> 01:05:32,030
item names and stuff like that and so

1424
01:05:30,710 --> 01:05:34,360
what we could do is make it so those

1425
01:05:32,030 --> 01:05:37,760
item names are stored in the asset file

1426
01:05:34,360 --> 01:05:40,220
and looked up by tag and then we could

1427
01:05:37,760 --> 01:05:41,630
introduce a tag for language and then

1428
01:05:40,219 --> 01:05:44,949
people can add however many languages

1429
01:05:41,630 --> 01:05:44,950
they want right

1430
01:05:56,429 --> 01:06:03,159
let's see girl and Oh losers I'm talking

1431
01:06:01,630 --> 01:06:05,230
about in terms of how the GPU cares

1432
01:06:03,159 --> 01:06:07,659
about the color of a pixel as opposed to

1433
01:06:05,230 --> 01:06:11,849
a struct with float rgba which is not

1434
01:06:07,659 --> 01:06:17,409
really necessary for a buffer thing so

1435
01:06:11,849 --> 01:06:19,619
you know yes and no hmm so if you want

1436
01:06:17,409 --> 01:06:27,099
to talk about the GPU more specifically

1437
01:06:19,619 --> 01:06:30,460
so basically with GPU and a and a CPU

1438
01:06:27,099 --> 01:06:32,529
right they're not that different at the

1439
01:06:30,460 --> 01:06:35,110
end of the day they're sort of they're

1440
01:06:32,530 --> 01:06:36,550
getting closer all the time right and

1441
01:06:35,110 --> 01:06:37,870
there are still some very important

1442
01:06:36,550 --> 01:06:38,980
differences between the two and to

1443
01:06:37,869 --> 01:06:40,630
really know what all the different

1444
01:06:38,980 --> 01:06:42,460
important distance are you'd have to be

1445
01:06:40,630 --> 01:06:45,090
someone who worked at Nvidia because or

1446
01:06:42,460 --> 01:06:46,750
something like this because you know

1447
01:06:45,090 --> 01:06:48,880
they don't necessarily tell you

1448
01:06:46,750 --> 01:06:52,210
everything that happens on a GPU and or

1449
01:06:48,880 --> 01:06:53,769
CPU for that matter but point being when

1450
01:06:52,210 --> 01:06:54,940
these when these people are working on

1451
01:06:53,769 --> 01:06:57,070
graphics the important thing to

1452
01:06:54,940 --> 01:06:58,329
understand about graphics and the reason

1453
01:06:57,070 --> 01:07:00,400
that for example graphics has a

1454
01:06:58,329 --> 01:07:03,579
coprocessor in your machine it has a GPU

1455
01:07:00,400 --> 01:07:06,010
you know why isn't there a sound card in

1456
01:07:03,579 --> 01:07:08,920
most machines anymore right why isn't

1457
01:07:06,010 --> 01:07:12,960
there a card for reading the joystick

1458
01:07:08,920 --> 01:07:16,930
right the reason is because graphics is

1459
01:07:12,960 --> 01:07:18,849
sort of the most data intensive thing

1460
01:07:16,929 --> 01:07:23,109
the most compute data intensive thing

1461
01:07:18,849 --> 01:07:26,289
because it is a two-dimensional piece of

1462
01:07:23,110 --> 01:07:27,970
data right you have a screen and that

1463
01:07:26,289 --> 01:07:30,759
screen has some significant dimensions

1464
01:07:27,969 --> 01:07:32,949
nowadays at least 1920 by 1080 right

1465
01:07:30,760 --> 01:07:35,110
that's like kind of the minimum of what

1466
01:07:32,949 --> 01:07:36,460
gamers probably expect to see nowadays

1467
01:07:35,110 --> 01:07:39,010
they're not going to be super happy

1468
01:07:36,460 --> 01:07:42,820
about you shipping something else that's

1469
01:07:39,010 --> 01:07:45,190
over 2 million individual units that

1470
01:07:42,820 --> 01:07:48,910
have to be processed have to be solved

1471
01:07:45,190 --> 01:07:52,780
for every frame right and 2 million per

1472
01:07:48,909 --> 01:07:55,000
frame is just a lot ok that's a lot of

1473
01:07:52,780 --> 01:07:56,740
processing no matter what you're doing

1474
01:07:55,000 --> 01:08:00,900
every frame you're probably not

1475
01:07:56,739 --> 01:08:03,729
processing 2 million of anything else ok

1476
01:08:00,900 --> 01:08:04,990
and so in order to produce that 2

1477
01:08:03,730 --> 01:08:07,659
million of course if think if everything

1478
01:08:04,989 --> 01:08:08,859
goes into it there's like multiple paths

1479
01:08:07,659 --> 01:08:10,119
those two million there's lots of

1480
01:08:08,860 --> 01:08:12,340
calculations that happens on your

1481
01:08:10,119 --> 01:08:14,049
civilians you you tend to have over draw

1482
01:08:12,340 --> 01:08:15,250
so you kind of have the situation where

1483
01:08:14,050 --> 01:08:17,199
things get overwritten by other things

1484
01:08:15,250 --> 01:08:19,750
that are behind each other by Allah so

1485
01:08:17,199 --> 01:08:23,019
that 2 million is Chilean very expensive

1486
01:08:19,750 --> 01:08:26,739
things that are going on proportional to

1487
01:08:23,020 --> 01:08:28,840
that 2 million so what that means is you

1488
01:08:26,739 --> 01:08:30,699
do not have the luxury of always

1489
01:08:28,840 --> 01:08:33,130
representing things in the way that you

1490
01:08:30,699 --> 01:08:34,750
might want to and so you mentioned or

1491
01:08:33,130 --> 01:08:37,449
girl and Oh blue mentioned ok we have a

1492
01:08:34,750 --> 01:08:43,840
structure why can't I just have a float

1493
01:08:37,449 --> 01:08:47,529
our G be a why can't I do that and just

1494
01:08:43,840 --> 01:08:48,880
use that everywhere right Y in when I'm

1495
01:08:47,529 --> 01:08:50,019
actually talking about the frame buffer

1496
01:08:48,880 --> 01:08:52,779
or a texture

1497
01:08:50,020 --> 01:08:55,090
why don't they look like this and the

1498
01:08:52,779 --> 01:08:57,969
answer is they do look like that

1499
01:08:55,090 --> 01:09:01,210
sometimes you actually can declare it

1500
01:08:57,970 --> 01:09:03,820
exactly that as the format for your

1501
01:09:01,210 --> 01:09:06,730
frame buffer in a GPU or a texture on

1502
01:09:03,819 --> 01:09:08,289
the GPU you totally can nothing stops

1503
01:09:06,729 --> 01:09:12,099
you from doing that nowadays is it's

1504
01:09:08,289 --> 01:09:17,350
totally fine right the problem with it

1505
01:09:12,100 --> 01:09:21,039
is the size okay this structure is 4

1506
01:09:17,350 --> 01:09:23,230
times 32 bits right another way to think

1507
01:09:21,039 --> 01:09:29,470
of it would be 4 times 4 bytes right

1508
01:09:23,229 --> 01:09:33,699
this is 16 bytes this which is what we

1509
01:09:29,470 --> 01:09:37,630
were talking about right having only 8

1510
01:09:33,699 --> 01:09:40,659
bits for each of these is 4 times a1 or

1511
01:09:37,630 --> 01:09:45,430
4 bytes right not very difficult math

1512
01:09:40,659 --> 01:09:48,069
here so why do we care if it's 4 bytes

1513
01:09:45,430 --> 01:09:51,340
or 16 bytes the reason is this giant

1514
01:09:48,069 --> 01:09:53,710
multiplier right just the frame buffer

1515
01:09:51,340 --> 01:09:56,770
alone has 2 million of these elements in

1516
01:09:53,710 --> 01:09:59,380
it's 2 million times 16 bytes is just a

1517
01:09:56,770 --> 01:10:02,410
lot bigger than 2 million times 4 bytes

1518
01:09:59,380 --> 01:10:05,859
do we care about the size not

1519
01:10:02,409 --> 01:10:09,729
necessarily what we care about is the

1520
01:10:05,859 --> 01:10:12,130
bandwidth right so that memory the GPU

1521
01:10:09,729 --> 01:10:13,959
in order to operate on these things has

1522
01:10:12,130 --> 01:10:16,150
to go get them and pull them back

1523
01:10:13,960 --> 01:10:18,069
operate on them put them back out to its

1524
01:10:16,149 --> 01:10:21,279
memory that's on the graphics card right

1525
01:10:18,069 --> 01:10:23,319
it has to do that work and

1526
01:10:21,279 --> 01:10:25,300
to do that work it's sucking down memory

1527
01:10:23,319 --> 01:10:27,788
bandwidth memory bandwidth is the most

1528
01:10:25,300 --> 01:10:29,980
expensive thing on a graphics card it is

1529
01:10:27,788 --> 01:10:32,529
what gates the performance more so than

1530
01:10:29,979 --> 01:10:35,769
probably anything else in a lot of cases

1531
01:10:32,529 --> 01:10:39,368
and so what ends up happening is if you

1532
01:10:35,770 --> 01:10:42,460
can reduce that memory bandwidth by four

1533
01:10:39,368 --> 01:10:44,589
times right this number is 4x this is

1534
01:10:42,460 --> 01:10:47,469
this number right this is four times

1535
01:10:44,590 --> 01:10:49,569
this if you can have four times the

1536
01:10:47,469 --> 01:10:51,429
memory bandwidth that's like getting a

1537
01:10:49,569 --> 01:10:54,670
graphics card from several years in the

1538
01:10:51,429 --> 01:10:59,679
future right so if you take a look here

1539
01:10:54,670 --> 01:11:01,118
for example list of NVIDIA GPUs okay I'm

1540
01:10:59,679 --> 01:11:02,800
just gonna pull this up so you can see

1541
01:11:01,118 --> 01:11:06,009
you can get like a little bit of a feel

1542
01:11:02,800 --> 01:11:09,099
for it so here's the GeForce series

1543
01:11:06,010 --> 01:11:10,929
let's take the GeForce 500 series you

1544
01:11:09,099 --> 01:11:11,889
all remember this right not that long

1545
01:11:10,929 --> 01:11:14,559
ago okay

1546
01:11:11,889 --> 01:11:19,750
2011 so let's take a look at what the

1547
01:11:14,559 --> 01:11:21,099
bandwidth was on that right hmm here's

1548
01:11:19,750 --> 01:11:24,250
the memory bandwidth and gigabytes per

1549
01:11:21,099 --> 01:11:26,679
second you can see it here 14 gigabytes

1550
01:11:24,250 --> 01:11:28,300
per second for example on these guys 28

1551
01:11:26,679 --> 01:11:31,210
gigabytes per second some of these got

1552
01:11:28,300 --> 01:11:32,320
up to 128 gigabytes a second all the way

1553
01:11:31,210 --> 01:11:35,050
up to maybe like hundred ninety-two

1554
01:11:32,319 --> 01:11:36,519
gigabytes a second right that's the

1555
01:11:35,050 --> 01:11:44,219
memory bandwidth that that's quoted in

1556
01:11:36,520 --> 01:11:48,969
here right now let's scroll down right -

1557
01:11:44,219 --> 01:11:52,960
let's can we get a GeForce 900 series

1558
01:11:48,969 --> 01:11:55,719
there we go right now let's take a look

1559
01:11:52,960 --> 01:11:57,760
at at the memory bandwidth right there

1560
01:11:55,719 --> 01:12:01,809
it is 336 right

1561
01:11:57,760 --> 01:12:05,309
roughly 2x in a couple years time right

1562
01:12:01,809 --> 01:12:08,170
and so if you think about it's just not

1563
01:12:05,309 --> 01:12:10,300
it's just not growing that quickly right

1564
01:12:08,170 --> 01:12:12,520
you just don't have infinite bandwidth

1565
01:12:10,300 --> 01:12:14,409
it's not this free thing and so if you

1566
01:12:12,520 --> 01:12:17,650
can say I could get four times the

1567
01:12:14,408 --> 01:12:20,500
bandwidth right just by reducing the

1568
01:12:17,649 --> 01:12:23,859
space required for these things to

1569
01:12:20,500 --> 01:12:25,809
transmit them I'm gonna write and this

1570
01:12:23,859 --> 01:12:27,969
is the reasoning behind tons of things

1571
01:12:25,809 --> 01:12:30,760
why do we have texture compression right

1572
01:12:27,969 --> 01:12:33,819
it's not actually to fit more textures

1573
01:12:30,760 --> 01:12:34,600
on the card memory that's one positive

1574
01:12:33,819 --> 01:12:37,149
benefit of it

1575
01:12:34,600 --> 01:12:39,430
but the real win for texture compression

1576
01:12:37,149 --> 01:12:40,920
is it's less bandwidth it's less memory

1577
01:12:39,430 --> 01:12:43,840
bandwidth pulling textures on the card

1578
01:12:40,920 --> 01:12:45,699
so texture compression is about getting

1579
01:12:43,840 --> 01:12:47,829
this number down from even four bytes

1580
01:12:45,699 --> 01:12:51,039
it's getting it down to two bytes or one

1581
01:12:47,829 --> 01:12:52,809
byte right per pixel you want to keep

1582
01:12:51,039 --> 01:12:54,880
getting it down down further further

1583
01:12:52,810 --> 01:12:56,740
further right and it's all about

1584
01:12:54,880 --> 01:12:58,869
conserving that bandwidth it doesn't

1585
01:12:56,739 --> 01:13:00,369
matter how much memory you actually have

1586
01:12:58,869 --> 01:13:05,069
on your GPU it doesn't matter if you

1587
01:13:00,369 --> 01:13:07,989
have a 32 gigabyte GPU that's not really

1588
01:13:05,069 --> 01:13:09,849
where the footprint cost comes in yeah

1589
01:13:07,989 --> 01:13:11,109
there are reasons why you want to have

1590
01:13:09,850 --> 01:13:13,240
more memory on a card it means there's

1591
01:13:11,109 --> 01:13:15,429
less traffic across a PCI bus and and

1592
01:13:13,239 --> 01:13:17,019
all this sort of stuff there's grid good

1593
01:13:15,430 --> 01:13:20,500
reasons why having more memory on a

1594
01:13:17,020 --> 01:13:21,670
graphics card can be good but the

1595
01:13:20,500 --> 01:13:24,340
crucial thing to remember is that

1596
01:13:21,670 --> 01:13:26,230
footprint matters for things other than

1597
01:13:24,340 --> 01:13:28,750
just whether you fit on that GPU it

1598
01:13:26,229 --> 01:13:30,159
matters because the bandwidth is a very

1599
01:13:28,750 --> 01:13:32,079
important part of the performance of the

1600
01:13:30,159 --> 01:13:33,670
GPU it only has so much to spend and

1601
01:13:32,079 --> 01:13:35,590
it's doing all of these operations all

1602
01:13:33,670 --> 01:13:36,730
of them pull from memory right back out

1603
01:13:35,590 --> 01:13:39,579
to memory do all these sorts of things

1604
01:13:36,729 --> 01:13:42,549
every texture you touch every frame

1605
01:13:39,579 --> 01:13:45,399
buffer access you touch that is costing

1606
01:13:42,550 --> 01:13:48,130
you bandwidth and if you can reduce the

1607
01:13:45,399 --> 01:13:50,139
size of your colors that you store in

1608
01:13:48,130 --> 01:13:51,940
these things that immediately cuts the

1609
01:13:50,140 --> 01:13:53,980
bandwidth by whatever that reduction was

1610
01:13:51,939 --> 01:13:56,549
and that's really important so hopefully

1611
01:13:53,979 --> 01:13:56,549
that makes some sense

1612
01:14:06,649 --> 01:14:11,099
do any systems ever represent light as

1613
01:14:09,479 --> 01:14:12,659
an actual frequency and change that

1614
01:14:11,100 --> 01:14:16,079
value based on interaction with the

1615
01:14:12,659 --> 01:14:18,210
simulated environment yes it's less

1616
01:14:16,079 --> 01:14:20,119
common in real-time systems because you

1617
01:14:18,210 --> 01:14:22,439
usually don't care that much about it

1618
01:14:20,119 --> 01:14:26,189
although some people do some specific

1619
01:14:22,439 --> 01:14:29,519
things too so that they can get certain

1620
01:14:26,189 --> 01:14:30,989
effects even in real-time but where you

1621
01:14:29,520 --> 01:14:33,860
typically see that more as an offline

1622
01:14:30,989 --> 01:14:43,859
renderers for example you'll see

1623
01:14:33,859 --> 01:14:45,559
spectral calculus employed you know

1624
01:14:43,859 --> 01:14:51,539
offline renders that go for quality

1625
01:14:45,560 --> 01:15:00,060
right let's see here right

1626
01:14:51,539 --> 01:15:02,159
here we go right and and they'll they'll

1627
01:15:00,060 --> 01:15:05,039
do stuff like defining the spectral

1628
01:15:02,159 --> 01:15:08,430
characteristics of light and instead of

1629
01:15:05,039 --> 01:15:10,529
just doing RGB they'll actually think a

1630
01:15:08,430 --> 01:15:12,390
lot about what those actually are and

1631
01:15:10,529 --> 01:15:14,009
the reason for that is they have a bunch

1632
01:15:12,390 --> 01:15:15,990
of things that they will then do

1633
01:15:14,010 --> 01:15:18,960
correctly like for example refraction of

1634
01:15:15,989 --> 01:15:20,369
light through prisms and stuff like this

1635
01:15:18,960 --> 01:15:22,980
you know Maxwell render will do it

1636
01:15:20,369 --> 01:15:24,750
correctly thin film reflections like on

1637
01:15:22,979 --> 01:15:26,189
soap bubbles they'll do it correctly so

1638
01:15:24,750 --> 01:15:28,920
if you have a light that's putting out

1639
01:15:26,189 --> 01:15:30,329
pure red light and you shine it through

1640
01:15:28,920 --> 01:15:33,779
a prism and Max will render it will

1641
01:15:30,329 --> 01:15:35,699
scatter red if you have something that

1642
01:15:33,779 --> 01:15:39,019
is not a pure you know I shouldn't say

1643
01:15:35,699 --> 01:15:42,000
that if you have something that's like

1644
01:15:39,020 --> 01:15:43,260
that's a bad example if you have

1645
01:15:42,000 --> 01:15:45,989
something that's actually yellow

1646
01:15:43,260 --> 01:15:48,000
wavelength light right versus something

1647
01:15:45,989 --> 01:15:50,849
that's red light and green light

1648
01:15:48,000 --> 01:15:52,439
together when they go through the prism

1649
01:15:50,850 --> 01:15:53,910
they'll scatter differently right or

1650
01:15:52,439 --> 01:15:55,379
when they reflect off of the soap-bubble

1651
01:15:53,909 --> 01:15:56,670
thing they'll reflect differently right

1652
01:15:55,380 --> 01:15:59,369
because those are two different things

1653
01:15:56,670 --> 01:16:00,989
you can't see the difference if you just

1654
01:15:59,369 --> 01:16:02,609
look at the light but once it goes

1655
01:16:00,989 --> 01:16:04,649
through some kind of a participating

1656
01:16:02,609 --> 01:16:06,920
medium it can it'll do different things

1657
01:16:04,649 --> 01:16:11,159
and then you can see the results right

1658
01:16:06,920 --> 01:16:12,869
and so you know oily finishes that sort

1659
01:16:11,159 --> 01:16:15,569
of stuff that do these sort of complex

1660
01:16:12,869 --> 01:16:18,319
reflections recording the actual

1661
01:16:15,569 --> 01:16:26,579
spectral characteristics of the light

1662
01:16:18,319 --> 01:16:28,679
can be important all right let's take

1663
01:16:26,579 --> 01:16:30,119
the last questions here if you're taking

1664
01:16:28,680 --> 01:16:32,430
user input at some point will you worry

1665
01:16:30,119 --> 01:16:37,470
about blocking Unicode control

1666
01:16:32,430 --> 01:16:40,530
characters I don't foresee this game

1667
01:16:37,470 --> 01:16:44,970
ever allowing text input of any kind so

1668
01:16:40,529 --> 01:16:46,170
I don't think that would come up Ron

1669
01:16:44,970 --> 01:16:47,909
Roberts so you care about the stack

1670
01:16:46,170 --> 01:16:49,949
memory when would you start to really

1671
01:16:47,909 --> 01:16:52,170
measure it is it some gut feeling I

1672
01:16:49,949 --> 01:16:54,599
would never have had that idea before

1673
01:16:52,170 --> 01:16:58,199
not getting an actual error

1674
01:16:54,600 --> 01:17:01,350
I mean basically I don't like to return

1675
01:16:58,199 --> 01:17:03,000
or pass things by value it's less about

1676
01:17:01,350 --> 01:17:05,070
the stack size I don't like to return or

1677
01:17:03,000 --> 01:17:08,520
pass things by value if they're not you

1678
01:17:05,069 --> 01:17:11,250
know less than 32 bytes or something so

1679
01:17:08,520 --> 01:17:12,750
that's you know I only keep I keep my

1680
01:17:11,250 --> 01:17:18,539
structs pretty small if I'm passing them

1681
01:17:12,750 --> 01:17:21,300
I value right let's see what is HDR HDR

1682
01:17:18,539 --> 01:17:24,720
is high dynamic range basically what

1683
01:17:21,300 --> 01:17:27,840
that means is when you make this

1684
01:17:24,720 --> 01:17:28,530
approximation right if you have floats

1685
01:17:27,840 --> 01:17:30,600
you're good to go

1686
01:17:28,529 --> 01:17:31,800
it means you're you can represent any

1687
01:17:30,600 --> 01:17:33,560
range of numbers right because the

1688
01:17:31,800 --> 01:17:36,600
floating point value is exactly that

1689
01:17:33,560 --> 01:17:40,140
when you make this approximation to a

1690
01:17:36,600 --> 01:17:43,350
bit RGBA you lose the ability to have a

1691
01:17:40,140 --> 01:17:45,930
wide array of numbers because you have

1692
01:17:43,350 --> 01:17:47,970
you only have 256 different shades so

1693
01:17:45,930 --> 01:17:50,070
you can't represent something as bright

1694
01:17:47,970 --> 01:17:52,500
as the Sun and something as bright as a

1695
01:17:50,069 --> 01:17:55,920
candle or the reflection from a candle

1696
01:17:52,500 --> 01:17:57,560
for example those are so far apart that

1697
01:17:55,920 --> 01:18:01,140
if you tried to represent them with only

1698
01:17:57,560 --> 01:18:02,789
256 steps you would have no lighting

1699
01:18:01,140 --> 01:18:06,780
fidelity whatsoever your image would be

1700
01:18:02,789 --> 01:18:08,460
ridiculously banded right and so all

1701
01:18:06,779 --> 01:18:11,550
high dynamic range is is it's basically

1702
01:18:08,460 --> 01:18:12,689
figuring out a way to well one

1703
01:18:11,550 --> 01:18:14,190
definition high dynamic range is just

1704
01:18:12,689 --> 01:18:15,839
just do this everything's floating-point

1705
01:18:14,189 --> 01:18:17,639
everywhere would be high dynamic range

1706
01:18:15,840 --> 01:18:19,590
because now you can capture pretty much

1707
01:18:17,640 --> 01:18:22,230
any range of lighting that you want

1708
01:18:19,590 --> 01:18:24,270
right but what HDR often refers to a

1709
01:18:22,229 --> 01:18:26,669
little more specifically is the act of

1710
01:18:24,270 --> 01:18:29,220
finding other kinds of sort of packing

1711
01:18:26,670 --> 01:18:31,880
formats that allow you to get back some

1712
01:18:29,220 --> 01:18:33,710
of what you lost by not being in

1713
01:18:31,880 --> 01:18:36,350
so that you can have say for example

1714
01:18:33,710 --> 01:18:38,750
still a 32-bit value and it's like RGB

1715
01:18:36,350 --> 01:18:40,220
and an exponent or something that tells

1716
01:18:38,750 --> 01:18:41,449
you how to raise those are jeebies to a

1717
01:18:40,220 --> 01:18:43,430
power or something right

1718
01:18:41,449 --> 01:18:46,369
so you still try to pack like a bigger

1719
01:18:43,430 --> 01:18:53,690
range of values into still a smaller

1720
01:18:46,369 --> 01:18:55,189
space and not a mouse do you think there

1721
01:18:53,689 --> 01:18:56,960
will be a time when CPU and main

1722
01:18:55,189 --> 01:18:58,189
bandwidth is fast enough to replace GPS

1723
01:18:56,960 --> 01:19:04,970
entirely going back to the days of

1724
01:18:58,189 --> 01:19:07,669
software renderers yes I do and I hope

1725
01:19:04,970 --> 01:19:09,949
we see that day because I am tired of

1726
01:19:07,670 --> 01:19:14,720
dealing with GPUs they're just a pain in

1727
01:19:09,949 --> 01:19:19,159
the butt all right time for me to eat

1728
01:19:14,720 --> 01:19:29,480
some dinner I I don't mind saying so

1729
01:19:19,159 --> 01:19:30,409
let's wipe things down okay okay thank

1730
01:19:29,479 --> 01:19:31,939
you everyone for joining me for another

1731
01:19:30,409 --> 01:19:33,529
episode of hand made hero it's been a

1732
01:19:31,939 --> 01:19:36,079
pleasure coding with you as always if

1733
01:19:33,529 --> 01:19:37,550
you would like to follow along at home

1734
01:19:36,079 --> 01:19:39,199
with a source code you can always

1735
01:19:37,550 --> 01:19:40,369
pre-order the game on hand meter or

1736
01:19:39,199 --> 01:19:42,349
again it comes in the source code even

1737
01:19:40,369 --> 01:19:43,729
just starting today starting every day

1738
01:19:42,350 --> 01:19:47,150
there's always going with a source code

1739
01:19:43,729 --> 01:19:48,409
even from day zero you can download the

1740
01:19:47,149 --> 01:19:50,599
source code every night after I'm done I

1741
01:19:48,409 --> 01:19:52,130
upload our latest changes and you can

1742
01:19:50,600 --> 01:19:54,320
play around with them we have a forum

1743
01:19:52,130 --> 01:19:55,489
site also you can go to if you want to

1744
01:19:54,319 --> 01:19:57,679
ask questions or get community

1745
01:19:55,489 --> 01:19:59,510
contributed ports to other platforms or

1746
01:19:57,680 --> 01:20:01,190
anted episode guide all kinds of good

1747
01:19:59,510 --> 01:20:02,570
stuff we have a patreon page you want

1748
01:20:01,189 --> 01:20:04,399
supports a video series you can

1749
01:20:02,569 --> 01:20:06,019
subscribe to that and we've got a tweet

1750
01:20:04,399 --> 01:20:08,000
bot that tweets the schedule so if

1751
01:20:06,020 --> 01:20:09,890
you're trying to catch it live that is

1752
01:20:08,000 --> 01:20:12,170
the place to go to see when it will be

1753
01:20:09,890 --> 01:20:14,300
live and just in case you want to know

1754
01:20:12,170 --> 01:20:16,100
it will be live tomorrow again 5:00 p.m.

1755
01:20:14,300 --> 01:20:18,770
Pacific Daylight Time hope to see you

1756
01:20:16,100 --> 01:20:23,120
all there when we can go ahead and do

1757
01:20:18,770 --> 01:20:25,040
some debugging on this guy because I

1758
01:20:23,119 --> 01:20:26,359
think we're pretty much done with our

1759
01:20:25,039 --> 01:20:28,039
font stuff

1760
01:20:26,359 --> 01:20:29,779
the bulk of it anyway I'd like to go

1761
01:20:28,039 --> 01:20:31,399
ahead and debug back get that working

1762
01:20:29,779 --> 01:20:33,019
and then maybe clean up a few of the

1763
01:20:31,399 --> 01:20:34,670
code point range things like I said just

1764
01:20:33,020 --> 01:20:37,040
so we can kind of look at doing other

1765
01:20:34,670 --> 01:20:40,850
languages but this this is maybe the

1766
01:20:37,039 --> 01:20:43,310
last week for Foss maybe it so I hope

1767
01:20:40,850 --> 01:20:44,610
see you there for that until then take

1768
01:20:43,310 --> 01:20:46,199
it easy everyone

1769
01:20:44,609 --> 01:20:48,559
have fun coding and I will see you on

1770
01:20:46,198 --> 01:20:48,559
the Internet

