1
00:00:00,080 --> 00:00:05,679
all right hello everyone and welcome to

2
00:00:02,960 --> 00:00:08,160
handmade hero we are

3
00:00:05,679 --> 00:00:10,718
really just in a debugging situation

4
00:00:08,160 --> 00:00:12,798
here because i think we

5
00:00:10,718 --> 00:00:15,678
got everything we really wanted to get

6
00:00:12,798 --> 00:00:18,320
uh out of the um

7
00:00:15,679 --> 00:00:20,079
out of the lighting code surprisingly

8
00:00:18,320 --> 00:00:22,560
just the fact that we no longer have

9
00:00:20,079 --> 00:00:24,159
large z stacks

10
00:00:22,559 --> 00:00:25,358
uh in the world we basically said we

11
00:00:24,160 --> 00:00:27,839
didn't really need them so we removed

12
00:00:25,359 --> 00:00:29,920
them and just that

13
00:00:27,839 --> 00:00:32,000
was enough to make our lighting run 60

14
00:00:29,920 --> 00:00:35,120
frames a second just fine

15
00:00:32,000 --> 00:00:36,640
and so really now we just have to tune

16
00:00:35,119 --> 00:00:38,238
in a little bit to

17
00:00:36,640 --> 00:00:40,558
uh make sure that we're casting the

18
00:00:38,238 --> 00:00:42,959
right number of rays now because we can

19
00:00:40,558 --> 00:00:47,039
cast a lot more rays per frame

20
00:00:42,960 --> 00:00:47,039
um than we were before like a lot more

21
00:00:47,439 --> 00:00:50,799
like eight times more

22
00:00:49,840 --> 00:00:52,879
uh

23
00:00:50,799 --> 00:00:54,640
just just a very very large uh

24
00:00:52,878 --> 00:00:57,280
difference so we'll be able to get much

25
00:00:54,640 --> 00:00:59,520
faster much more accurate lighting

26
00:00:57,280 --> 00:01:02,239
uh to start with but then we also have

27
00:00:59,520 --> 00:01:04,079
to fix a bunch of bugs because we are

28
00:01:02,238 --> 00:01:05,518
sort of as we're clipping as we're

29
00:01:04,079 --> 00:01:07,118
taking out some of that stuff that was

30
00:01:05,519 --> 00:01:09,600
in there originally

31
00:01:07,118 --> 00:01:10,560
we have the issue of

32
00:01:09,599 --> 00:01:13,118
you know

33
00:01:10,560 --> 00:01:15,118
we we aren't quite right like we

34
00:01:13,118 --> 00:01:17,519
as we pull stuff out we have some

35
00:01:15,118 --> 00:01:19,920
certain things that are not exactly

36
00:01:17,519 --> 00:01:21,679
uh lined up the way they used to and and

37
00:01:19,920 --> 00:01:24,079
the old code was very highly optimized

38
00:01:21,680 --> 00:01:26,400
so it's it's fairly brittle in that

39
00:01:24,079 --> 00:01:28,158
sense right um

40
00:01:26,400 --> 00:01:30,079
when we do code that's

41
00:01:28,159 --> 00:01:31,600
kind of not that optimized right where

42
00:01:30,078 --> 00:01:33,039
we haven't like done a bunch of cindy

43
00:01:31,599 --> 00:01:34,798
work and threading work and all this

44
00:01:33,040 --> 00:01:36,640
stuff to kind of like see when we have

45
00:01:34,799 --> 00:01:38,240
to do like lighting we kind of to see

46
00:01:36,640 --> 00:01:40,719
how performant it was we didn't have the

47
00:01:38,239 --> 00:01:42,879
luxury of just leaving it

48
00:01:40,719 --> 00:01:46,319
sort of unoptimized

49
00:01:42,879 --> 00:01:48,239
in that case you end up restricting how

50
00:01:46,319 --> 00:01:50,879
flexible the code is or how easy it is

51
00:01:48,239 --> 00:01:53,438
to change right

52
00:01:50,879 --> 00:01:56,078
it's the actual premature optimization

53
00:01:53,438 --> 00:01:58,319
thing kind of that uh

54
00:01:56,078 --> 00:02:00,078
that knuth was probably referring to to

55
00:01:58,319 --> 00:02:01,839
the extent that he was

56
00:02:00,078 --> 00:02:03,839
um

57
00:02:01,840 --> 00:02:04,880
in the sense that you know

58
00:02:03,840 --> 00:02:06,079
i don't think in this case it was

59
00:02:04,879 --> 00:02:07,118
premature to optimize i think we

60
00:02:06,078 --> 00:02:08,318
optimized it at the correct time because

61
00:02:07,118 --> 00:02:10,719
we needed to see what the performance

62
00:02:08,318 --> 00:02:12,238
was but the point is if we had done that

63
00:02:10,719 --> 00:02:14,400
just willy-nilly

64
00:02:12,239 --> 00:02:16,159
you can see where you end up in a bad

65
00:02:14,400 --> 00:02:17,920
situation because like it takes more

66
00:02:16,159 --> 00:02:20,000
work than to shift what it does because

67
00:02:17,919 --> 00:02:21,199
it's so tightly optimized to this one

68
00:02:20,000 --> 00:02:22,479
the case

69
00:02:21,199 --> 00:02:24,878
so we do have a little bit more work to

70
00:02:22,479 --> 00:02:27,039
do here but that's okay uh that's the

71
00:02:24,878 --> 00:02:29,120
nature of performance optimization it's

72
00:02:27,039 --> 00:02:31,598
harder than normal code when you

73
00:02:29,120 --> 00:02:32,878
actually go down this route um but again

74
00:02:31,598 --> 00:02:35,199
this is more what people are talking

75
00:02:32,878 --> 00:02:37,039
about not the kind like people use the

76
00:02:35,199 --> 00:02:38,799
phrase premature optimization to refer

77
00:02:37,039 --> 00:02:39,919
to things that are in no way premature

78
00:02:38,800 --> 00:02:41,840
optimization

79
00:02:39,919 --> 00:02:43,439
um and in this case it wasn't premature

80
00:02:41,840 --> 00:02:45,519
it was at the right time but it has

81
00:02:43,439 --> 00:02:46,560
those same drawbacks like this is you

82
00:02:45,519 --> 00:02:48,159
can see

83
00:02:46,560 --> 00:02:49,759
literally what is being talked about

84
00:02:48,159 --> 00:02:52,239
there is that it will be harder for us

85
00:02:49,759 --> 00:02:55,120
to modify this code because we're trying

86
00:02:52,239 --> 00:02:57,120
to modify code that is optimized

87
00:02:55,120 --> 00:02:58,400
and that's always more difficult

88
00:02:57,120 --> 00:03:00,158
in this case we really just didn't have

89
00:02:58,400 --> 00:03:02,959
a choice because part of the reason we

90
00:03:00,158 --> 00:03:04,799
had to do this was to see how fast

91
00:03:02,959 --> 00:03:06,560
lighting was because we just don't know

92
00:03:04,800 --> 00:03:08,640
right and until you when you have

93
00:03:06,560 --> 00:03:10,719
something that's this heavy weight uh

94
00:03:08,639 --> 00:03:14,238
you really don't have the luxury of

95
00:03:10,719 --> 00:03:17,759
using a unoptimized version so

96
00:03:14,239 --> 00:03:19,039
uh so looking at the actual code here

97
00:03:17,759 --> 00:03:20,799
if we

98
00:03:19,039 --> 00:03:22,639
you know let me just show you where

99
00:03:20,800 --> 00:03:24,400
we're at uh we're actually running just

100
00:03:22,639 --> 00:03:26,798
fine but we have a number of things that

101
00:03:24,400 --> 00:03:28,799
we need to look at uh in terms of

102
00:03:26,799 --> 00:03:31,120
there's obviously it's it's a little bit

103
00:03:28,799 --> 00:03:33,439
buggy so the lighting is not

104
00:03:31,120 --> 00:03:35,599
running properly like it was before

105
00:03:33,439 --> 00:03:37,039
and we need to fix the like problems

106
00:03:35,598 --> 00:03:38,798
with like the grid alignment and how

107
00:03:37,039 --> 00:03:40,158
it's stepping and stuff um and that's

108
00:03:38,799 --> 00:03:41,760
just going to take a little while but if

109
00:03:40,158 --> 00:03:43,840
there's not a lot like it's not

110
00:03:41,759 --> 00:03:45,679
completely broken or anything it still

111
00:03:43,840 --> 00:03:48,239
actually kind of looks sort of right

112
00:03:45,680 --> 00:03:50,719
like it's it's not that bad so we're not

113
00:03:48,239 --> 00:03:52,400
far from a correct situation but we're

114
00:03:50,719 --> 00:03:54,239
not like you can see there's kind of

115
00:03:52,400 --> 00:03:55,120
weird like you know

116
00:03:54,239 --> 00:03:56,719
uh

117
00:03:55,120 --> 00:03:57,840
there's just a lot of like like what was

118
00:03:56,719 --> 00:03:59,919
happening there right it doesn't make

119
00:03:57,840 --> 00:04:01,360
much sense so we definitely have things

120
00:03:59,919 --> 00:04:03,280
that need to get fixed there's some

121
00:04:01,360 --> 00:04:05,360
weirdness going on here

122
00:04:03,280 --> 00:04:07,840
uh and we need to sort of uh go through

123
00:04:05,360 --> 00:04:09,920
all that and and clean it up we also

124
00:04:07,840 --> 00:04:12,959
probably have to change a little bit

125
00:04:09,919 --> 00:04:15,518
about how the lighting is working um

126
00:04:12,959 --> 00:04:17,680
in addition to that uh piece of the sort

127
00:04:15,519 --> 00:04:19,840
of the accuracy part of the puzzle

128
00:04:17,680 --> 00:04:22,400
uh because one of the things that you

129
00:04:19,839 --> 00:04:23,839
will see in here is that the the actual

130
00:04:22,399 --> 00:04:26,159
lighting

131
00:04:23,839 --> 00:04:28,159
we want to now drive it at a much higher

132
00:04:26,160 --> 00:04:30,240
rate than we were driving it before and

133
00:04:28,160 --> 00:04:32,560
what you can see if you look in here is

134
00:04:30,240 --> 00:04:34,960
that we have we sort of optimized this

135
00:04:32,560 --> 00:04:38,000
code for a very modest kind of light

136
00:04:34,959 --> 00:04:39,918
transport where in each pass we were

137
00:04:38,000 --> 00:04:43,639
only expecting to cast

138
00:04:39,918 --> 00:04:43,639
eight total rays

139
00:04:45,519 --> 00:04:50,000
and those correspond

140
00:04:48,000 --> 00:04:54,079
essentially to the eight

141
00:04:50,000 --> 00:04:56,800
uh faces of the octahedral map so we

142
00:04:54,079 --> 00:04:59,198
have an octahedral map that we record

143
00:04:56,800 --> 00:05:01,520
the lighting into that's eight sample

144
00:04:59,199 --> 00:05:04,080
directions

145
00:05:01,519 --> 00:05:05,839
for the lighting meaning that in each

146
00:05:04,079 --> 00:05:08,800
one of those uh

147
00:05:05,839 --> 00:05:12,399
sample directions out of an octahedron

148
00:05:08,800 --> 00:05:13,840
we have some resolution like you know we

149
00:05:12,399 --> 00:05:16,319
can set the resolution of this

150
00:05:13,839 --> 00:05:18,079
octahedral map to take you know

151
00:05:16,319 --> 00:05:19,599
more samples in the octahedron or

152
00:05:18,079 --> 00:05:20,879
whatever it's just a way of representing

153
00:05:19,600 --> 00:05:23,439
the lighting

154
00:05:20,879 --> 00:05:25,519
uh around a sphere like we need to for

155
00:05:23,439 --> 00:05:27,279
light probes you can argue whether it's

156
00:05:25,519 --> 00:05:28,879
good or bad or not i'm not really a

157
00:05:27,279 --> 00:05:30,638
rendering guy so i'm not going to defend

158
00:05:28,879 --> 00:05:31,759
it as good or bad it's just something

159
00:05:30,639 --> 00:05:33,280
that works

160
00:05:31,759 --> 00:05:35,280
and that's what we need is something

161
00:05:33,279 --> 00:05:37,038
that works so that's what we're using

162
00:05:35,279 --> 00:05:38,959
you know maybe it would be smarter to

163
00:05:37,038 --> 00:05:40,240
switch to something

164
00:05:38,959 --> 00:05:42,000
uh

165
00:05:40,240 --> 00:05:43,360
like spherical harmonics or you know

166
00:05:42,000 --> 00:05:44,879
whatever else there's there's plenty of

167
00:05:43,360 --> 00:05:47,120
ways you could imagine storing light

168
00:05:44,879 --> 00:05:48,959
probe information

169
00:05:47,120 --> 00:05:50,639
this one uh

170
00:05:48,959 --> 00:05:53,038
is kind of nice because it's direct and

171
00:05:50,639 --> 00:05:55,280
easy to understand and easy to visualize

172
00:05:53,038 --> 00:05:58,000
the bad part about it is converting from

173
00:05:55,279 --> 00:06:00,399
specular to diffuse is expensive and we

174
00:05:58,000 --> 00:06:02,160
do pay a high cost for that

175
00:06:00,399 --> 00:06:03,359
so you know there's trade-offs in it

176
00:06:02,160 --> 00:06:05,199
whatever we're not really going to

177
00:06:03,360 --> 00:06:06,879
revisit that probably because it seems

178
00:06:05,199 --> 00:06:10,400
good enough as it is

179
00:06:06,879 --> 00:06:12,000
uh but the point is we kind of optimized

180
00:06:10,399 --> 00:06:15,439
this originally for just sending out

181
00:06:12,000 --> 00:06:18,160
eight rays those eight rays are one out

182
00:06:15,439 --> 00:06:20,639
of each of the octahedral faces and then

183
00:06:18,160 --> 00:06:21,759
every frame we would pick sort of a new

184
00:06:20,639 --> 00:06:24,079
direction

185
00:06:21,759 --> 00:06:26,879
out of each octahedral face to trace so

186
00:06:24,079 --> 00:06:29,519
that over some number of frames we would

187
00:06:26,879 --> 00:06:31,360
kind of like reasonably sample

188
00:06:29,519 --> 00:06:33,758
the sphere right

189
00:06:31,360 --> 00:06:36,160
as represented by the octahedral map you

190
00:06:33,759 --> 00:06:38,400
know what i'm saying

191
00:06:36,160 --> 00:06:38,400
so

192
00:06:40,000 --> 00:06:42,959
um

193
00:06:41,279 --> 00:06:45,519
if you imagine that

194
00:06:42,959 --> 00:06:48,159
that now we're going to be sending out a

195
00:06:45,519 --> 00:06:50,240
lot of a lot more rays potentially then

196
00:06:48,160 --> 00:06:52,800
what you can see here is this is no

197
00:06:50,240 --> 00:06:54,639
longer probably the optimal way to do it

198
00:06:52,800 --> 00:06:56,560
because you know what we tried to do to

199
00:06:54,639 --> 00:06:58,800
see what would happen if we sent

200
00:06:56,560 --> 00:07:00,800
out additional numbers of rays is i

201
00:06:58,800 --> 00:07:03,520
added this for loop here for a sample

202
00:07:00,800 --> 00:07:05,120
batch and what this does is it calls the

203
00:07:03,519 --> 00:07:06,318
grid raycast that routine we're just

204
00:07:05,120 --> 00:07:08,639
looking at

205
00:07:06,319 --> 00:07:10,240
it calls that routine

206
00:07:08,639 --> 00:07:12,000
as many times as we want like we can

207
00:07:10,240 --> 00:07:14,560
change this right and so we can slow it

208
00:07:12,000 --> 00:07:17,038
down to a level that's too slow right if

209
00:07:14,560 --> 00:07:19,759
i set this up to 64

210
00:07:17,038 --> 00:07:22,159
so that's 64 times 8 raise

211
00:07:19,759 --> 00:07:23,759
per map per frame right

212
00:07:22,160 --> 00:07:26,319
you can see that i've slowed down now to

213
00:07:23,759 --> 00:07:29,038
a fairly slow frame rate right it's it's

214
00:07:26,319 --> 00:07:30,720
quite slow right

215
00:07:29,038 --> 00:07:32,719
whereas if i drop this down to a very

216
00:07:30,720 --> 00:07:35,440
small number which again is still eight

217
00:07:32,720 --> 00:07:37,280
times what we were doing originally um

218
00:07:35,439 --> 00:07:39,519
so it's it's way more than the previous

219
00:07:37,279 --> 00:07:41,758
version but still uh you can see that we

220
00:07:39,519 --> 00:07:43,598
run uh pretty much at an i-60 in fact i

221
00:07:41,759 --> 00:07:46,400
think we can actually take a look at the

222
00:07:43,598 --> 00:07:48,240
the specific time there um and you know

223
00:07:46,399 --> 00:07:50,959
this number here without the debug

224
00:07:48,240 --> 00:07:52,160
system it's already basically at uh 60

225
00:07:50,959 --> 00:07:54,638
frames a second but with the debug

226
00:07:52,160 --> 00:07:56,319
system running it will sometimes miss so

227
00:07:54,639 --> 00:07:58,720
you know in general we could we could

228
00:07:56,319 --> 00:08:01,039
easily hit 60 frames a second with this

229
00:07:58,720 --> 00:08:04,080
amount of raycasting and it's quite

230
00:08:01,038 --> 00:08:05,598
stable and quite responsive as you can

231
00:08:04,079 --> 00:08:07,519
see right

232
00:08:05,598 --> 00:08:09,279
um but

233
00:08:07,519 --> 00:08:10,799
even this

234
00:08:09,279 --> 00:08:12,239
which is fine

235
00:08:10,800 --> 00:08:15,120
we still wouldn't really want to do it

236
00:08:12,240 --> 00:08:17,199
this way and the reason is because we're

237
00:08:15,120 --> 00:08:20,639
still duplicating a ton of work for no

238
00:08:17,199 --> 00:08:24,800
reason if instead we pushed this eight

239
00:08:20,639 --> 00:08:26,800
down into the grid raycast right

240
00:08:24,800 --> 00:08:30,240
so if we instead pushed it down to here

241
00:08:26,800 --> 00:08:33,120
so that this simply loops over 64 things

242
00:08:30,240 --> 00:08:36,000
that would be way better because this

243
00:08:33,120 --> 00:08:37,038
raycast which is this piece of code here

244
00:08:36,000 --> 00:08:40,399
right

245
00:08:37,038 --> 00:08:42,718
um this raycast does the same amount of

246
00:08:40,399 --> 00:08:44,080
work in any case no matter how many rays

247
00:08:42,719 --> 00:08:46,720
we send

248
00:08:44,080 --> 00:08:48,959
but this which is the thing which then

249
00:08:46,720 --> 00:08:52,959
computes like okay

250
00:08:48,958 --> 00:08:54,958
what are we going to do in terms of like

251
00:08:52,958 --> 00:08:58,159
how these would get written back to

252
00:08:54,958 --> 00:09:00,559
the octahedral map or whatever right

253
00:08:58,159 --> 00:09:03,199
that code there

254
00:09:00,559 --> 00:09:06,319
doesn't really need to have its right

255
00:09:03,200 --> 00:09:07,600
back occur until after we've blended all

256
00:09:06,320 --> 00:09:09,839
the ones we're going to do for this

257
00:09:07,600 --> 00:09:13,519
frame this code right here that loads

258
00:09:09,839 --> 00:09:14,560
the old specular map texel values

259
00:09:13,519 --> 00:09:17,039
um

260
00:09:14,559 --> 00:09:18,159
loads the new values in that we just

261
00:09:17,039 --> 00:09:20,639
computed

262
00:09:18,159 --> 00:09:22,319
blends them together to basically do a

263
00:09:20,639 --> 00:09:23,600
little bit of temporal anti-aliasing

264
00:09:22,320 --> 00:09:25,920
right

265
00:09:23,600 --> 00:09:28,399
and then writes them back out

266
00:09:25,919 --> 00:09:31,120
right now when we increase the sample

267
00:09:28,399 --> 00:09:32,480
batch size from one to two to three to

268
00:09:31,120 --> 00:09:33,440
four to five to eight to six four to

269
00:09:32,480 --> 00:09:35,839
whatever

270
00:09:33,440 --> 00:09:37,839
whatever this value is it's doing these

271
00:09:35,839 --> 00:09:39,120
this load blend right

272
00:09:37,839 --> 00:09:41,279
each time

273
00:09:39,120 --> 00:09:44,000
but there's no reason for it to do that

274
00:09:41,278 --> 00:09:46,480
right it doesn't have to do that for any

275
00:09:44,000 --> 00:09:50,240
particular reason

276
00:09:46,480 --> 00:09:53,200
instead we could just run this code this

277
00:09:50,240 --> 00:09:55,519
this transfer pps code right this

278
00:09:53,200 --> 00:09:58,320
transfer pps code we should put the loop

279
00:09:55,519 --> 00:10:01,360
there and then only do this load modify

280
00:09:58,320 --> 00:10:02,720
right after we've done all of the sample

281
00:10:01,360 --> 00:10:04,639
batches

282
00:10:02,720 --> 00:10:08,560
that we plan to do

283
00:10:04,639 --> 00:10:11,439
and so that part is kind of the more

284
00:10:08,559 --> 00:10:13,359
uh important way of structuring the loop

285
00:10:11,440 --> 00:10:14,160
and i do think we probably want to do

286
00:10:13,360 --> 00:10:17,519
that

287
00:10:14,159 --> 00:10:19,838
because there's no reason not to do it

288
00:10:17,519 --> 00:10:22,078
and yeah i mean we really want to go fix

289
00:10:19,839 --> 00:10:22,079
that

290
00:10:25,600 --> 00:10:29,839
okay

291
00:10:27,600 --> 00:10:31,440
um so i would say let's fix that first

292
00:10:29,839 --> 00:10:34,800
actually because it's kind of an

293
00:10:31,440 --> 00:10:36,880
additional like weirdness in the process

294
00:10:34,799 --> 00:10:38,319
and the reason that we didn't do that is

295
00:10:36,879 --> 00:10:40,159
the originally is because the sample

296
00:10:38,320 --> 00:10:41,680
directions that get passed down here

297
00:10:40,159 --> 00:10:43,519
this light sample direction sample

298
00:10:41,679 --> 00:10:46,399
directions this part here

299
00:10:43,519 --> 00:10:47,839
um that part was getting prepped by this

300
00:10:46,399 --> 00:10:50,559
particular piece of code here that's

301
00:10:47,839 --> 00:10:52,560
stepping over these octahedral indices

302
00:10:50,559 --> 00:10:54,159
and there's there's other stuff that's

303
00:10:52,559 --> 00:10:55,599
kind of confusing about this which is

304
00:10:54,159 --> 00:10:58,159
that

305
00:10:55,600 --> 00:11:00,879
we don't really know what our entropy

306
00:10:58,159 --> 00:11:02,879
story is here like you know we we have

307
00:11:00,879 --> 00:11:04,320
this thing where we pre-compute stepping

308
00:11:02,879 --> 00:11:05,759
tables that allow us to do fast

309
00:11:04,320 --> 00:11:07,200
recasting

310
00:11:05,759 --> 00:11:08,639
and we're basically just picking which

311
00:11:07,200 --> 00:11:10,240
of those tables we're going to use and

312
00:11:08,639 --> 00:11:11,679
the table determines like how the ray

313
00:11:10,240 --> 00:11:13,278
actually gets cast and blah blah blah

314
00:11:11,679 --> 00:11:14,958
blah right

315
00:11:13,278 --> 00:11:18,399
there's not a lot to it but you know

316
00:11:14,958 --> 00:11:19,278
that is how it's currently uh working

317
00:11:18,399 --> 00:11:21,679
and

318
00:11:19,278 --> 00:11:24,799
so we want to make sure that we're

319
00:11:21,679 --> 00:11:27,439
actually utilizing the correct set of

320
00:11:24,799 --> 00:11:28,559
sample directions so that as we sort of

321
00:11:27,440 --> 00:11:30,240
step through

322
00:11:28,559 --> 00:11:33,278
um

323
00:11:30,240 --> 00:11:36,639
you know we we always get kind of like

324
00:11:33,278 --> 00:11:38,799
a reasonable distribution of rays coming

325
00:11:36,639 --> 00:11:40,720
from whatever sample source we're

326
00:11:38,799 --> 00:11:41,599
actually looking for we want to make

327
00:11:40,720 --> 00:11:43,200
sure that we're actually stepping

328
00:11:41,600 --> 00:11:45,200
through those fairly like we don't want

329
00:11:43,200 --> 00:11:46,720
to have some weird thing where because

330
00:11:45,200 --> 00:11:48,480
we haven't really analyzed the code

331
00:11:46,720 --> 00:11:50,639
properly and we just kind of like you

332
00:11:48,480 --> 00:11:52,720
know smushed it together that it turns

333
00:11:50,639 --> 00:11:55,200
out we're only sampling like four of the

334
00:11:52,720 --> 00:11:57,120
directions at like our step just always

335
00:11:55,200 --> 00:11:58,399
like mods them poorly or something and

336
00:11:57,120 --> 00:12:00,159
you know those are the kind of things

337
00:11:58,399 --> 00:12:02,078
you can have happen when you're trying

338
00:12:00,159 --> 00:12:03,838
to optimize code like this and you're

339
00:12:02,078 --> 00:12:06,319
using table driven stuff and you're not

340
00:12:03,839 --> 00:12:08,560
able to use a real random number or

341
00:12:06,320 --> 00:12:11,040
whatever right there's a lot of issues

342
00:12:08,559 --> 00:12:13,039
you can run into so we probably want to

343
00:12:11,039 --> 00:12:14,319
make sure that we're doing that sort of

344
00:12:13,039 --> 00:12:15,519
thing correctly

345
00:12:14,320 --> 00:12:17,200
and so we're going to have to analyze

346
00:12:15,519 --> 00:12:18,078
that as well

347
00:12:17,200 --> 00:12:20,399
but

348
00:12:18,078 --> 00:12:22,399
looking through this what you can see is

349
00:12:20,399 --> 00:12:24,000
when we call full cast

350
00:12:22,399 --> 00:12:26,320
typically there's like this entropy

351
00:12:24,000 --> 00:12:28,320
index value that gets passed in uh and

352
00:12:26,320 --> 00:12:30,959
if you look at where that actually gets

353
00:12:28,320 --> 00:12:32,959
uh worked out it's right in here and

354
00:12:30,958 --> 00:12:35,359
what i'm wondering is you know can we

355
00:12:32,958 --> 00:12:38,159
just say that maybe this entropy index

356
00:12:35,360 --> 00:12:42,079
just gets passed down directly like

357
00:12:38,159 --> 00:12:44,078
maybe our grid raycast this goes away um

358
00:12:42,078 --> 00:12:46,958
this outer loop here goes away and we

359
00:12:44,078 --> 00:12:49,759
just literally drop it down into the

360
00:12:46,958 --> 00:12:53,278
other uh piece of code so

361
00:12:49,759 --> 00:12:55,039
you know we we get rid of this right

362
00:12:53,278 --> 00:12:58,240
and we go into

363
00:12:55,039 --> 00:12:59,919
um this this uh ray index code here like

364
00:12:58,240 --> 00:13:02,639
this code right

365
00:12:59,919 --> 00:13:04,399
and we do something where this is going

366
00:13:02,639 --> 00:13:07,919
to get accumulated so you know maybe

367
00:13:04,399 --> 00:13:09,120
it's like that uh and we we wrap this

368
00:13:07,919 --> 00:13:11,519
code up

369
00:13:09,120 --> 00:13:14,159
in us in the second for loop directly

370
00:13:11,519 --> 00:13:16,320
right so now we kind of have these two

371
00:13:14,159 --> 00:13:17,278
for loops nested the way that they

372
00:13:16,320 --> 00:13:20,480
should be

373
00:13:17,278 --> 00:13:22,720
and so we do our raycasts eight wide

374
00:13:20,480 --> 00:13:24,079
like we were doing it before

375
00:13:22,720 --> 00:13:26,720
but we

376
00:13:24,078 --> 00:13:28,879
in when i say eight wide we're not it's

377
00:13:26,720 --> 00:13:31,120
not like eight wide sim d uh we're just

378
00:13:28,879 --> 00:13:33,360
doing them eight at a time so eight wide

379
00:13:31,120 --> 00:13:36,320
is probably the wrong term uh the th we

380
00:13:33,360 --> 00:13:39,759
do use simdi but it's wide in the

381
00:13:36,320 --> 00:13:42,480
collision side so we cast a single ray

382
00:13:39,759 --> 00:13:44,639
replicated across four lanes in simdi

383
00:13:42,480 --> 00:13:45,680
we cast that against

384
00:13:44,639 --> 00:13:48,240
four

385
00:13:45,679 --> 00:13:49,838
boxes at a time right we don't do the

386
00:13:48,240 --> 00:13:52,240
opposite which is another way you can

387
00:13:49,839 --> 00:13:54,160
write these kinds of casters where you

388
00:13:52,240 --> 00:13:56,639
cast four rays at a time it's called a

389
00:13:54,159 --> 00:13:59,838
ray bundle uh you can cast four rays at

390
00:13:56,639 --> 00:14:01,600
a time against one box right

391
00:13:59,839 --> 00:14:04,560
um so that there's a lot of different

392
00:14:01,600 --> 00:14:06,240
ways you can imagine doing this um

393
00:14:04,559 --> 00:14:09,599
one side or the other has to be wide

394
00:14:06,240 --> 00:14:09,600
otherwise you won't speed up right

395
00:14:10,879 --> 00:14:17,198
so you're just trying to leverage

396
00:14:13,198 --> 00:14:19,439
the floating point alu here

397
00:14:17,198 --> 00:14:21,838
so if we did it this way and we have

398
00:14:19,440 --> 00:14:24,160
this entropy index that comes down right

399
00:14:21,839 --> 00:14:25,279
so that uh you know that entropy index

400
00:14:24,159 --> 00:14:26,078
here

401
00:14:25,278 --> 00:14:27,519
uh

402
00:14:26,078 --> 00:14:30,239
i'm just going to try and follow this

403
00:14:27,519 --> 00:14:31,759
value through to see if i can back out a

404
00:14:30,240 --> 00:14:33,519
reasonable way to track this entropy

405
00:14:31,759 --> 00:14:35,679
index across

406
00:14:33,519 --> 00:14:38,240
the system you can see here it gets a

407
00:14:35,679 --> 00:14:41,439
sample point entropy and it calls full

408
00:14:38,240 --> 00:14:43,278
cast with that entropy index the

409
00:14:41,440 --> 00:14:46,240
point of this is to make sure that each

410
00:14:43,278 --> 00:14:48,480
one of these like voxels uh cells that

411
00:14:46,240 --> 00:14:52,000
we're producing lighting for is going to

412
00:14:48,480 --> 00:14:54,959
use a different uh arrangement of casts

413
00:14:52,000 --> 00:14:56,879
out of its um faces because the goal is

414
00:14:54,958 --> 00:14:58,239
to make sure that you don't see aliasing

415
00:14:56,879 --> 00:14:59,838
in the lighting based on the fact that

416
00:14:58,240 --> 00:15:01,360
like every grid cell casts the same

417
00:14:59,839 --> 00:15:03,440
direction or something right so it's

418
00:15:01,360 --> 00:15:05,360
trying to make sure that that's

419
00:15:03,440 --> 00:15:07,519
each different light probe uses a

420
00:15:05,360 --> 00:15:09,600
different set of directions

421
00:15:07,519 --> 00:15:11,198
so pretty straightforward um so what

422
00:15:09,600 --> 00:15:12,800
we're going to do there it when we pass

423
00:15:11,198 --> 00:15:14,559
down that entropy index it's just an

424
00:15:12,799 --> 00:15:16,240
index that we can use as like a random

425
00:15:14,559 --> 00:15:18,799
number generation kind of thing so into

426
00:15:16,240 --> 00:15:21,519
full cast we go and you can see that the

427
00:15:18,799 --> 00:15:23,278
entropy index uh is is passed in here i

428
00:15:21,519 --> 00:15:25,120
don't think that this makes a whole lot

429
00:15:23,278 --> 00:15:26,399
of sense i think we can probably say

430
00:15:25,120 --> 00:15:28,879
look we're gonna

431
00:15:26,399 --> 00:15:31,039
not do it that way with the address

432
00:15:28,879 --> 00:15:33,278
we shouldn't actually need that i think

433
00:15:31,039 --> 00:15:36,958
i was just hacking that in before

434
00:15:33,278 --> 00:15:39,278
but that shouldn't actually be necessary

435
00:15:36,958 --> 00:15:41,838
so if we look at how the entropy index

436
00:15:39,278 --> 00:15:44,159
gets updated this shouldn't probably be

437
00:15:41,839 --> 00:15:46,800
an address there if we send down this

438
00:15:44,159 --> 00:15:49,039
entropy index we should be able to

439
00:15:46,799 --> 00:15:51,758
do as we were doing before where each

440
00:15:49,039 --> 00:15:54,399
one of these kind of gets expanded the

441
00:15:51,759 --> 00:15:57,120
interview index gets incremented in some

442
00:15:54,399 --> 00:15:59,120
really weird way or whatever right i'm

443
00:15:57,120 --> 00:16:01,360
not sure exactly what we would do but

444
00:15:59,120 --> 00:16:04,320
you know you can imagine something where

445
00:16:01,360 --> 00:16:06,079
we just add some really weird value to

446
00:16:04,320 --> 00:16:08,959
it here where we're going to step

447
00:16:06,078 --> 00:16:11,120
through these fairly randomly

448
00:16:08,958 --> 00:16:14,239
we even could at this point here

449
00:16:11,120 --> 00:16:17,120
probably actually do a random series off

450
00:16:14,240 --> 00:16:19,039
of the entropy index um presumably

451
00:16:17,120 --> 00:16:20,639
really wouldn't be that big of a deal

452
00:16:19,039 --> 00:16:22,958
right

453
00:16:20,639 --> 00:16:26,320
now i don't know what the best way to

454
00:16:22,958 --> 00:16:28,399
seed that would be but like you know um

455
00:16:26,320 --> 00:16:30,480
you can see us doing here where we we

456
00:16:28,399 --> 00:16:33,278
have a random series in each frame

457
00:16:30,480 --> 00:16:35,920
uh we we're probably picking right like

458
00:16:33,278 --> 00:16:37,360
you can see here where we pick a u32

459
00:16:35,919 --> 00:16:39,120
value that goes into each one of these

460
00:16:37,360 --> 00:16:40,959
work units so each one of these has a

461
00:16:39,120 --> 00:16:43,360
different random value and then what we

462
00:16:40,958 --> 00:16:45,838
really want here is to also have these

463
00:16:43,360 --> 00:16:49,360
to be seated to a random value as well

464
00:16:45,839 --> 00:16:52,000
now i don't know what we did here for

465
00:16:49,360 --> 00:16:53,680
doing this random seed that's a 4x

466
00:16:52,000 --> 00:16:55,759
random seed which we

467
00:16:53,679 --> 00:16:56,849
don't really need but um

468
00:16:55,759 --> 00:16:58,639
let me see

469
00:16:56,850 --> 00:16:59,600
[Music]

470
00:16:58,639 --> 00:17:01,839
yeah

471
00:16:59,600 --> 00:17:01,839
so

472
00:17:03,679 --> 00:17:06,879
here's our random series pcg which i

473
00:17:05,919 --> 00:17:08,880
don't know if this is what we're

474
00:17:06,880 --> 00:17:10,000
currently using

475
00:17:08,880 --> 00:17:11,039
looks like we have a couple different

476
00:17:10,000 --> 00:17:14,400
ones

477
00:17:11,038 --> 00:17:15,759
pcgs aren't actually that good um

478
00:17:14,400 --> 00:17:17,280
i think i was kind of more into them

479
00:17:15,759 --> 00:17:18,318
when we first did handmade hero because

480
00:17:17,279 --> 00:17:19,519
they were supposed to be pretty good but

481
00:17:18,318 --> 00:17:21,519
they're really not because they don't

482
00:17:19,519 --> 00:17:22,400
semdy very well so you know it's

483
00:17:21,519 --> 00:17:24,160
probably not something you would

484
00:17:22,400 --> 00:17:25,439
actually use today but you know whatever

485
00:17:24,160 --> 00:17:26,480
times change

486
00:17:25,439 --> 00:17:28,480
um

487
00:17:26,480 --> 00:17:31,038
so when we call this i think this random

488
00:17:28,480 --> 00:17:33,200
next u32 is presumably calling this part

489
00:17:31,038 --> 00:17:34,640
of it i don't actually know but because

490
00:17:33,200 --> 00:17:36,240
we could take a look in fact i guess i

491
00:17:34,640 --> 00:17:37,840
can just jump over the lighting and see

492
00:17:36,240 --> 00:17:40,160
which one we were using

493
00:17:37,839 --> 00:17:40,159
um

494
00:17:41,038 --> 00:17:44,079
lighting solution

495
00:17:42,400 --> 00:17:47,759
um

496
00:17:44,079 --> 00:17:50,639
random series is

497
00:17:47,759 --> 00:17:50,640
which one oops

498
00:17:51,919 --> 00:17:55,200
what is

499
00:17:54,319 --> 00:17:56,000
yeah

500
00:17:55,200 --> 00:17:57,919
uh

501
00:17:56,000 --> 00:17:59,839
so it looks like there's only the h file

502
00:17:57,919 --> 00:18:03,679
so there's only this one random series

503
00:17:59,839 --> 00:18:05,918
and it's always an f32 4x i guess

504
00:18:03,679 --> 00:18:08,640
so that's a little weird

505
00:18:05,919 --> 00:18:10,559
um but i guess we always do it four wide

506
00:18:08,640 --> 00:18:12,080
i guess i mean that's i guess how we do

507
00:18:10,558 --> 00:18:14,319
it we just do it wide

508
00:18:12,079 --> 00:18:17,279
so when we do random next 32 it looks

509
00:18:14,319 --> 00:18:19,439
like we just extract one value from it

510
00:18:17,279 --> 00:18:20,399
which is fine i mean that doesn't really

511
00:18:19,440 --> 00:18:21,919
you know

512
00:18:20,400 --> 00:18:23,840
no real issue there

513
00:18:21,919 --> 00:18:26,400
um but if you look at the way this works

514
00:18:23,839 --> 00:18:27,359
you can see where we do a random seed

515
00:18:26,400 --> 00:18:28,880
here

516
00:18:27,359 --> 00:18:32,319
and

517
00:18:28,880 --> 00:18:35,200
i guess you might say that it's a little

518
00:18:32,319 --> 00:18:37,200
bit squinky because

519
00:18:35,200 --> 00:18:39,200
i guess if we did a random seed offset

520
00:18:37,200 --> 00:18:41,120
we could take a number that came from

521
00:18:39,200 --> 00:18:43,360
the random number generator

522
00:18:41,119 --> 00:18:47,119
and this would probably be fine so you

523
00:18:43,359 --> 00:18:49,199
know we we could imagine doing

524
00:18:47,119 --> 00:18:50,000
sort of a sequential update to this

525
00:18:49,200 --> 00:18:52,558
thing

526
00:18:50,000 --> 00:18:54,079
uh that would be okay or you know we

527
00:18:52,558 --> 00:18:55,279
could imagine rolling something like

528
00:18:54,079 --> 00:18:56,558
this in there

529
00:18:55,279 --> 00:18:57,440
right where we

530
00:18:56,558 --> 00:18:59,918
are

531
00:18:57,440 --> 00:19:04,480
you know doing this each update

532
00:18:59,919 --> 00:19:04,480
and and going from there i don't know

533
00:19:05,440 --> 00:19:08,480
it seems like you'd probably want to

534
00:19:06,720 --> 00:19:10,640
keep this in scalar because we don't

535
00:19:08,480 --> 00:19:12,960
actually need four of these random

536
00:19:10,640 --> 00:19:15,360
values or maybe we do i mean i guess the

537
00:19:12,960 --> 00:19:17,200
other question is if we kept two of

538
00:19:15,359 --> 00:19:19,199
these around could we just use those in

539
00:19:17,200 --> 00:19:20,319
each and each step through the random

540
00:19:19,200 --> 00:19:23,360
series

541
00:19:20,319 --> 00:19:27,279
we would actually just

542
00:19:23,359 --> 00:19:28,240
update all four random numbers

543
00:19:27,279 --> 00:19:31,839
and that

544
00:19:28,240 --> 00:19:33,038
might actually be good so

545
00:19:31,839 --> 00:19:35,759
hmm

546
00:19:33,038 --> 00:19:39,119
so you know that gives us an option

547
00:19:35,759 --> 00:19:40,879
i guess maybe we should think about that

548
00:19:39,119 --> 00:19:44,798
so if we look at what's happening inside

549
00:19:40,880 --> 00:19:46,640
full cast right um it's just the entropy

550
00:19:44,798 --> 00:19:48,319
does not factor into full cast at all

551
00:19:46,640 --> 00:19:50,480
it's a completely

552
00:19:48,319 --> 00:19:53,119
100 non-entropic thing that's happening

553
00:19:50,480 --> 00:19:54,720
here it's only grid raycast right where

554
00:19:53,119 --> 00:19:56,558
this actually happens so if you take a

555
00:19:54,720 --> 00:19:58,720
look at grid raycast this is what

556
00:19:56,558 --> 00:19:59,759
actually now needs the entropy and it

557
00:19:58,720 --> 00:20:00,798
just needs the entropy for the thing

558
00:19:59,759 --> 00:20:02,960
we're talking about which is to figure

559
00:20:00,798 --> 00:20:05,279
out which of the sample table there's

560
00:20:02,960 --> 00:20:07,600
like this sample table

561
00:20:05,279 --> 00:20:08,399
and we just want to figure out which one

562
00:20:07,599 --> 00:20:09,199
of

563
00:20:08,400 --> 00:20:10,400
the

564
00:20:09,200 --> 00:20:14,319
indexes

565
00:20:10,400 --> 00:20:16,240
indices we're going to use right

566
00:20:14,319 --> 00:20:19,119
so we would pull out the sample

567
00:20:16,240 --> 00:20:20,720
direction by grabbing the table

568
00:20:19,119 --> 00:20:22,798
uh and

569
00:20:20,720 --> 00:20:25,200
just we pick one of the octahedrons and

570
00:20:22,798 --> 00:20:28,960
then we do all eight samples out of the

571
00:20:25,200 --> 00:20:31,120
octahedron right at that point

572
00:20:28,960 --> 00:20:33,360
so really this part is the only part we

573
00:20:31,119 --> 00:20:35,678
really need if we know that we're going

574
00:20:33,359 --> 00:20:37,359
to do batches we could just use the

575
00:20:35,679 --> 00:20:40,559
random numbers

576
00:20:37,359 --> 00:20:44,240
out of the batches so actually

577
00:20:40,558 --> 00:20:47,440
it may mean that the best thing to do is

578
00:20:44,240 --> 00:20:49,200
to just actually use a random series and

579
00:20:47,440 --> 00:20:50,960
allow the random series to update each

580
00:20:49,200 --> 00:20:53,360
time um

581
00:20:50,960 --> 00:20:57,440
that's probably actually fine

582
00:20:53,359 --> 00:21:00,000
i mean maybe that's dumb i don't know

583
00:20:57,440 --> 00:21:01,919
but it kind of seems reasonable so it

584
00:21:00,000 --> 00:21:03,759
could be that the right thing to do here

585
00:21:01,919 --> 00:21:07,120
is say look we're going to have a random

586
00:21:03,759 --> 00:21:08,158
series uh that's the entropy for this

587
00:21:07,119 --> 00:21:10,558
and

588
00:21:08,159 --> 00:21:13,039
we've got a random seed offset function

589
00:21:10,558 --> 00:21:15,599
right like this thing

590
00:21:13,038 --> 00:21:17,200
and we can just go like okay there's a

591
00:21:15,599 --> 00:21:20,079
sample point entropy

592
00:21:17,200 --> 00:21:22,000
and that gets placed in here um and then

593
00:21:20,079 --> 00:21:24,079
we do pass down an address like we were

594
00:21:22,000 --> 00:21:25,599
doing before but rather than passing an

595
00:21:24,079 --> 00:21:28,839
address

596
00:21:25,599 --> 00:21:31,359
of a simple like you

597
00:21:28,839 --> 00:21:33,038
know uh

598
00:21:31,359 --> 00:21:34,158
rather than passing an address of like a

599
00:21:33,038 --> 00:21:36,079
simple

600
00:21:34,159 --> 00:21:38,159
index that just gets updated we're

601
00:21:36,079 --> 00:21:41,119
actually going to pass a random series

602
00:21:38,159 --> 00:21:43,840
and we're going to grab those values out

603
00:21:41,119 --> 00:21:46,158
uh that actu the indices we're going to

604
00:21:43,839 --> 00:21:47,199
actually grab out um

605
00:21:46,159 --> 00:21:49,600
right

606
00:21:47,200 --> 00:21:52,080
so if we wanted to do that

607
00:21:49,599 --> 00:21:52,439
and also you can see how this here

608
00:21:52,079 --> 00:21:55,499
you know

609
00:21:52,440 --> 00:21:55,499
[Music]

610
00:21:57,839 --> 00:22:01,359
if you look at how this function is

611
00:21:59,919 --> 00:22:02,640
working

612
00:22:01,359 --> 00:22:05,359
um

613
00:22:02,640 --> 00:22:07,038
i also don't know like

614
00:22:05,359 --> 00:22:08,639
where this

615
00:22:07,038 --> 00:22:12,720
supposedly

616
00:22:08,640 --> 00:22:15,120
was going to convert itself to anything

617
00:22:12,720 --> 00:22:18,480
in particular like you can see we've got

618
00:22:15,119 --> 00:22:20,798
these f324x states here

619
00:22:18,480 --> 00:22:23,839
and these aren't really f32 values right

620
00:22:20,798 --> 00:22:25,759
they're actually just u32 values

621
00:22:23,839 --> 00:22:29,759
um

622
00:22:25,759 --> 00:22:29,759
and so i'm not actually sure like

623
00:22:30,000 --> 00:22:33,599
i'm not actually sure how we were

624
00:22:31,679 --> 00:22:36,320
previously planning to use these it

625
00:22:33,599 --> 00:22:38,158
looks like we mostly convert them

626
00:22:36,319 --> 00:22:41,038
you can kind of see here

627
00:22:38,159 --> 00:22:43,760
like how that was happening right

628
00:22:41,038 --> 00:22:46,480
um like effectively you convert you do a

629
00:22:43,759 --> 00:22:48,558
u32 to f32 right

630
00:22:46,480 --> 00:22:50,480
um so in this case we would want to just

631
00:22:48,558 --> 00:22:52,558
literally get out the values and if you

632
00:22:50,480 --> 00:22:55,519
think about what's happening here i

633
00:22:52,558 --> 00:22:58,079
would assume that we don't have a large

634
00:22:55,519 --> 00:22:59,519
enough table set so if you

635
00:22:58,079 --> 00:23:02,480
actually look at like the lighting

636
00:22:59,519 --> 00:23:04,079
include there's like an inl for this uh

637
00:23:02,480 --> 00:23:06,000
sampling spheres

638
00:23:04,079 --> 00:23:09,359
if you actually look at this you can see

639
00:23:06,000 --> 00:23:11,200
like how many octahedrons there are like

640
00:23:09,359 --> 00:23:13,119
that's not very many

641
00:23:11,200 --> 00:23:15,759
um

642
00:23:13,119 --> 00:23:18,158
i don't know why it's so low right

643
00:23:15,759 --> 00:23:19,839
we probably want to increase that number

644
00:23:18,159 --> 00:23:20,960
in the future to something higher i

645
00:23:19,839 --> 00:23:23,759
would think

646
00:23:20,960 --> 00:23:26,880
uh but either way if it's only gonna be

647
00:23:23,759 --> 00:23:29,200
16 different octahedrons

648
00:23:26,880 --> 00:23:29,200
um

649
00:23:32,079 --> 00:23:35,960
i mean at that point

650
00:23:36,880 --> 00:23:40,400
i guess my other question is if there's

651
00:23:38,480 --> 00:23:41,278
only going to be 16 octahedrons maybe we

652
00:23:40,400 --> 00:23:43,679
just

653
00:23:41,278 --> 00:23:44,480
say forget the en entropy altogether if

654
00:23:43,679 --> 00:23:46,960
that

655
00:23:44,480 --> 00:23:50,120
turns out to be sufficient let's just do

656
00:23:46,960 --> 00:23:50,120
all 16.

657
00:23:52,480 --> 00:23:55,679
you know that like elon musk

658
00:23:54,640 --> 00:23:57,919
face

659
00:23:55,679 --> 00:23:59,840
where he like just smoked pot on the joe

660
00:23:57,919 --> 00:24:00,960
rogan show

661
00:23:59,839 --> 00:24:03,119
you know what i'm talking about it's

662
00:24:00,960 --> 00:24:03,120
like

663
00:24:03,200 --> 00:24:06,880
it's like where he's got the

664
00:24:05,038 --> 00:24:08,720
the joint or whatever i don't actually

665
00:24:06,880 --> 00:24:10,159
know what he was handed i don't remember

666
00:24:08,720 --> 00:24:13,278
i think it's a joint

667
00:24:10,159 --> 00:24:16,278
and he's like got like a a face that's

668
00:24:13,278 --> 00:24:16,278
like

669
00:24:22,000 --> 00:24:25,599
that face

670
00:24:23,519 --> 00:24:28,599
do you know what i'm talking about

671
00:24:25,599 --> 00:24:28,599
anybody

672
00:24:36,319 --> 00:24:40,558
well anyway i'm making that face right

673
00:24:38,240 --> 00:24:42,640
now and thinking

674
00:24:40,558 --> 00:24:47,319
maybe

675
00:24:42,640 --> 00:24:47,320
maybe uh we don't care

676
00:24:49,440 --> 00:24:54,240
and i would say great

677
00:24:51,599 --> 00:24:57,038
at that point if we're always just gonna

678
00:24:54,240 --> 00:24:59,359
say there's only 16

679
00:24:57,038 --> 00:25:01,519
octahedron i mean

680
00:24:59,359 --> 00:25:03,678
then let's just cast all 16 octahedrons

681
00:25:01,519 --> 00:25:06,879
so i'm just making that judgment call

682
00:25:03,679 --> 00:25:09,679
because it's the easiest thing to do and

683
00:25:06,880 --> 00:25:11,679
let's just find out if maybe that's fine

684
00:25:09,679 --> 00:25:13,519
because at that point it even removes

685
00:25:11,679 --> 00:25:14,480
one more step to this process which is

686
00:25:13,519 --> 00:25:16,639
to say

687
00:25:14,480 --> 00:25:18,798
that now we just don't need entropy at

688
00:25:16,640 --> 00:25:22,320
all so the entropy is just gone from the

689
00:25:18,798 --> 00:25:24,879
system and the sampling is just

690
00:25:22,319 --> 00:25:28,399
just literally over the octahedron so we

691
00:25:24,880 --> 00:25:30,559
basically have this u32 octahedron index

692
00:25:28,400 --> 00:25:32,400
it's just going to be zero

693
00:25:30,558 --> 00:25:36,558
and then it's going to go to whatever

694
00:25:32,400 --> 00:25:38,720
the octahedron count is and that's like

695
00:25:36,558 --> 00:25:40,240
it

696
00:25:38,720 --> 00:25:42,400
right

697
00:25:40,240 --> 00:25:44,480
so then we don't use the mask or any of

698
00:25:42,400 --> 00:25:46,559
those things we just say like okay the

699
00:25:44,480 --> 00:25:47,278
sample direction is going to be whatever

700
00:25:46,558 --> 00:25:49,119
the

701
00:25:47,278 --> 00:25:52,640
you know whatever the

702
00:25:49,119 --> 00:25:55,359
uh computed offset is into the table

703
00:25:52,640 --> 00:25:58,159
uh and and that's it

704
00:25:55,359 --> 00:25:59,519
right uh

705
00:25:58,159 --> 00:26:00,640
that would be it

706
00:25:59,519 --> 00:26:02,079
so

707
00:26:00,640 --> 00:26:03,600
i have to think about if i'm missing

708
00:26:02,079 --> 00:26:06,879
something here there's also this other

709
00:26:03,599 --> 00:26:09,038
thing a light sampling sphere mask

710
00:26:06,880 --> 00:26:10,799
which again don't really remember much

711
00:26:09,038 --> 00:26:12,798
about that i think that's probably going

712
00:26:10,798 --> 00:26:15,200
to be below these here

713
00:26:12,798 --> 00:26:17,918
right yeah

714
00:26:15,200 --> 00:26:21,480
so there's a sphere count

715
00:26:17,919 --> 00:26:21,480
of sample directions

716
00:26:26,720 --> 00:26:30,960
and it's using the same offset

717
00:26:33,038 --> 00:26:37,759
i i really couldn't say i know why we

718
00:26:35,359 --> 00:26:40,639
have both of these

719
00:26:37,759 --> 00:26:43,038
sample direction table

720
00:26:40,640 --> 00:26:46,720
like what is the point

721
00:26:43,038 --> 00:26:46,720
of that hold on a second

722
00:26:50,558 --> 00:26:57,440
so the sample sphere doesn't get used

723
00:26:54,558 --> 00:26:58,798
so those must have just been old things

724
00:26:57,440 --> 00:27:02,080
i guess

725
00:26:58,798 --> 00:27:04,639
um so that just goes away right so in

726
00:27:02,079 --> 00:27:06,798
here we're just grabbing the octahedron

727
00:27:04,640 --> 00:27:09,600
that we're going to use and that sample

728
00:27:06,798 --> 00:27:13,119
dir we just pull out of here

729
00:27:09,599 --> 00:27:13,119
like it's this right

730
00:27:13,359 --> 00:27:17,678
um and this function doesn't get past

731
00:27:15,759 --> 00:27:18,640
sample directions

732
00:27:17,679 --> 00:27:20,720
uh

733
00:27:18,640 --> 00:27:22,799
nor does it get past i mean we could

734
00:27:20,720 --> 00:27:25,440
pass it the base pointer if we wanted to

735
00:27:22,798 --> 00:27:27,759
but nor does it get past the

736
00:27:25,440 --> 00:27:30,759
uh what and what the heck is quadrant

737
00:27:27,759 --> 00:27:30,759
index

738
00:27:34,079 --> 00:27:38,158
so oh quadrant index is just which of

739
00:27:36,159 --> 00:27:39,600
the four yet okay that's fine we don't

740
00:27:38,159 --> 00:27:41,278
care about that either

741
00:27:39,599 --> 00:27:42,558
um so that's that can still stay in

742
00:27:41,278 --> 00:27:44,000
there so if i get rid of sample

743
00:27:42,558 --> 00:27:45,278
directions i just want to see where

744
00:27:44,000 --> 00:27:47,599
we're at here

745
00:27:45,278 --> 00:27:49,839
um so this does this guy not have the

746
00:27:47,599 --> 00:27:50,639
solution pointer no he does so he has

747
00:27:49,839 --> 00:27:51,759
that

748
00:27:50,640 --> 00:27:54,960
um

749
00:27:51,759 --> 00:27:55,960
we have the octahedron index

750
00:27:54,960 --> 00:27:57,840
sample

751
00:27:55,960 --> 00:27:59,919
directions

752
00:27:57,839 --> 00:28:01,759
ray index walk table offset so this is

753
00:27:59,919 --> 00:28:03,759
just it's just these

754
00:28:01,759 --> 00:28:05,839
i mean that's all it is

755
00:28:03,759 --> 00:28:07,519
right

756
00:28:05,839 --> 00:28:10,480
uh and so the only thing is what is it

757
00:28:07,519 --> 00:28:13,278
complaining about sample batch is not

758
00:28:10,480 --> 00:28:14,558
did not get replaced so

759
00:28:13,278 --> 00:28:16,960
this would do

760
00:28:14,558 --> 00:28:20,798
all of them right

761
00:28:16,960 --> 00:28:23,919
this would do the entire set every frame

762
00:28:20,798 --> 00:28:23,918
uh and

763
00:28:27,038 --> 00:28:32,319
the only problem is this code right here

764
00:28:31,278 --> 00:28:34,960
um

765
00:28:32,319 --> 00:28:36,319
where transfer pps gets written to the

766
00:28:34,960 --> 00:28:37,038
rgb

767
00:28:36,319 --> 00:28:39,119
uh

768
00:28:37,038 --> 00:28:40,319
for this particular array you know what

769
00:28:39,119 --> 00:28:41,839
i'm saying

770
00:28:40,319 --> 00:28:43,599
um

771
00:28:41,839 --> 00:28:45,038
you can see here that i'm grumpy about

772
00:28:43,599 --> 00:28:48,879
this apparently like this part didn't

773
00:28:45,038 --> 00:28:50,158
really get optimized that's okay because

774
00:28:48,880 --> 00:28:51,760
we're now sort of changing a little bit

775
00:28:50,159 --> 00:28:54,000
how it works so maybe we want that

776
00:28:51,759 --> 00:28:56,240
anyway

777
00:28:54,000 --> 00:28:58,240
uh so we'll find out uh yeah we can we

778
00:28:56,240 --> 00:29:01,599
can probably update this to be better

779
00:28:58,240 --> 00:29:03,759
than it is right uh because we can fix

780
00:29:01,599 --> 00:29:05,278
the you know we can fix the way that it

781
00:29:03,759 --> 00:29:07,200
actually gets sort of handled through

782
00:29:05,278 --> 00:29:09,038
this loop when we're doing kind of final

783
00:29:07,200 --> 00:29:12,080
options we don't have to do that now

784
00:29:09,038 --> 00:29:14,720
but we can make this better for sure

785
00:29:12,079 --> 00:29:16,079
so when we look at this uh

786
00:29:14,720 --> 00:29:18,079
really what we're what we're talking

787
00:29:16,079 --> 00:29:19,278
about now is if we just clear this

788
00:29:18,079 --> 00:29:22,158
instead

789
00:29:19,278 --> 00:29:23,679
um so here where we start at transfer vs

790
00:29:22,159 --> 00:29:25,120
this used to not bother clearing it

791
00:29:23,679 --> 00:29:26,399
because it was just gonna wasn't

792
00:29:25,119 --> 00:29:27,759
actually gonna

793
00:29:26,398 --> 00:29:28,879
ever get used it was always gonna get

794
00:29:27,759 --> 00:29:31,278
overwritten

795
00:29:28,880 --> 00:29:34,320
if we now clear it first

796
00:29:31,278 --> 00:29:36,558
and then we go ahead and do a

797
00:29:34,319 --> 00:29:39,359
like a basically a sum

798
00:29:36,558 --> 00:29:42,319
where we average all of the things

799
00:29:39,359 --> 00:29:44,879
together that we put in here

800
00:29:42,319 --> 00:29:46,558
you can then imagine this to just being

801
00:29:44,880 --> 00:29:47,679
a plus equals

802
00:29:46,558 --> 00:29:50,240
right

803
00:29:47,679 --> 00:29:51,278
this sort of a thing

804
00:29:50,240 --> 00:29:52,720
um

805
00:29:51,278 --> 00:29:54,880
and

806
00:29:52,720 --> 00:29:58,558
we should

807
00:29:54,880 --> 00:30:01,600
be able to multiply this by the weight

808
00:29:58,558 --> 00:30:02,639
like um you know like rayweight or

809
00:30:01,599 --> 00:30:04,798
something

810
00:30:02,640 --> 00:30:06,799
and you can see that this is just stupid

811
00:30:04,798 --> 00:30:08,319
code like this should be done wide and

812
00:30:06,798 --> 00:30:10,639
isn't you can see why we put this

813
00:30:08,319 --> 00:30:12,720
comment in here so that comment

814
00:30:10,640 --> 00:30:14,080
remains true this should all be done

815
00:30:12,720 --> 00:30:15,600
wide and then we just convert it down at

816
00:30:14,079 --> 00:30:17,119
the end but at the moment we don't care

817
00:30:15,599 --> 00:30:19,119
too much about that

818
00:30:17,119 --> 00:30:21,278
but if we just do an accumulator there

819
00:30:19,119 --> 00:30:24,158
right so that we accumulate those values

820
00:30:21,278 --> 00:30:27,278
together just average the samples that

821
00:30:24,159 --> 00:30:29,520
are sent out we know what the ray weight

822
00:30:27,278 --> 00:30:31,759
is it's just going to be how many

823
00:30:29,519 --> 00:30:33,359
octahedrons we're going to do so it's

824
00:30:31,759 --> 00:30:35,440
this value here

825
00:30:33,359 --> 00:30:38,240
um so if we just

826
00:30:35,440 --> 00:30:39,360
take the total number of octahedrons

827
00:30:38,240 --> 00:30:40,720
and we say

828
00:30:39,359 --> 00:30:43,678
we're going to do all the octahedrons

829
00:30:40,720 --> 00:30:45,759
that we have that we generate

830
00:30:43,679 --> 00:30:47,519
we are going to divide

831
00:30:45,759 --> 00:30:49,119
that you know one over that number we're

832
00:30:47,519 --> 00:30:50,720
going to divide to find out how much

833
00:30:49,119 --> 00:30:52,798
each individual octahedron should

834
00:30:50,720 --> 00:30:54,960
compute to the whole so we have 16 so

835
00:30:52,798 --> 00:30:56,960
each one contributes 1 16 of the

836
00:30:54,960 --> 00:31:00,000
lighting answer right

837
00:30:56,960 --> 00:31:02,798
and we do that each time we now get rid

838
00:31:00,000 --> 00:31:04,798
of any sort of external understanding of

839
00:31:02,798 --> 00:31:06,960
like what the sample directions are or

840
00:31:04,798 --> 00:31:08,319
what the entropy index is or any of that

841
00:31:06,960 --> 00:31:10,558
stuff

842
00:31:08,319 --> 00:31:13,918
and now we're literally just stepping

843
00:31:10,558 --> 00:31:15,359
through the rows of the atlas table

844
00:31:13,919 --> 00:31:16,640
um

845
00:31:15,359 --> 00:31:17,439
as we go

846
00:31:16,640 --> 00:31:20,320
right

847
00:31:17,440 --> 00:31:20,320
uh now

848
00:31:22,640 --> 00:31:29,038
i guess i to be honest i'm not sure i

849
00:31:25,440 --> 00:31:32,640
understand how we know which one so like

850
00:31:29,038 --> 00:31:33,839
i think about this but s y here

851
00:31:32,640 --> 00:31:35,759
uh

852
00:31:33,839 --> 00:31:37,439
like the lighting atlas texas like which

853
00:31:35,759 --> 00:31:39,599
one that we're

854
00:31:37,440 --> 00:31:41,200
using

855
00:31:39,599 --> 00:31:42,798
um

856
00:31:41,200 --> 00:31:47,399
that

857
00:31:42,798 --> 00:31:47,398
i don't understand how we know

858
00:31:50,720 --> 00:31:54,079
so so this is a little confusing so

859
00:31:52,480 --> 00:31:56,480
let's let's try to work this out because

860
00:31:54,079 --> 00:31:58,558
this i don't remember how this works

861
00:31:56,480 --> 00:32:01,839
and there's a little bit of an issue

862
00:31:58,558 --> 00:32:01,839
here that i'm not sure i follow

863
00:32:02,319 --> 00:32:06,398
so when we

864
00:32:04,240 --> 00:32:08,558
like call into grid raycast right we've

865
00:32:06,398 --> 00:32:10,639
got the spec texel here and the spec

866
00:32:08,558 --> 00:32:12,879
texel is what

867
00:32:10,640 --> 00:32:14,799
what the first texel is in the row you

868
00:32:12,880 --> 00:32:17,120
can see that we're going to step by wise

869
00:32:14,798 --> 00:32:20,079
and write all the x's

870
00:32:17,119 --> 00:32:24,158
when we pick out a sample direction

871
00:32:20,079 --> 00:32:24,158
i don't think i understand

872
00:32:24,720 --> 00:32:31,000
how does this know which row

873
00:32:27,519 --> 00:32:31,000
we're on

874
00:32:47,519 --> 00:32:51,519
so this seems like

875
00:32:49,759 --> 00:32:53,119
either there was a bug

876
00:32:51,519 --> 00:32:54,558
in it already

877
00:32:53,119 --> 00:32:57,518
there's three possibilities there's a

878
00:32:54,558 --> 00:32:59,678
bug in it already a

879
00:32:57,519 --> 00:33:01,200
seems probably unlikely b i don't really

880
00:32:59,679 --> 00:33:02,559
understand what this code is doing and i

881
00:33:01,200 --> 00:33:05,038
missed something

882
00:33:02,558 --> 00:33:06,798
or c i i accidentally deleted something

883
00:33:05,038 --> 00:33:09,599
very important

884
00:33:06,798 --> 00:33:09,599
so um

885
00:33:09,759 --> 00:33:14,798
here's what i'm trying to say

886
00:33:11,519 --> 00:33:16,480
we go over these ray indices here and

887
00:33:14,798 --> 00:33:18,398
there's eight of them that's not an

888
00:33:16,480 --> 00:33:21,519
accident the reason there are eight is

889
00:33:18,398 --> 00:33:23,518
because each row of an octahedral map

890
00:33:21,519 --> 00:33:26,558
because we said that they were eight by

891
00:33:23,519 --> 00:33:30,240
eight each row of our octahedral map

892
00:33:26,558 --> 00:33:31,200
there's eight rows represented

893
00:33:30,240 --> 00:33:33,038
here

894
00:33:31,200 --> 00:33:36,840
by the sy loop

895
00:33:33,038 --> 00:33:40,000
this is the eight rows of the octahedral

896
00:33:36,839 --> 00:33:42,319
map right

897
00:33:40,000 --> 00:33:44,720
and these eight rows of the i think by

898
00:33:42,319 --> 00:33:47,599
the way we did this already

899
00:33:44,720 --> 00:33:49,519
um the eight rows of the octahedral map

900
00:33:47,599 --> 00:33:51,038
here

901
00:33:49,519 --> 00:33:54,960
are then

902
00:33:51,038 --> 00:33:57,119
this eight is the eight columns of that

903
00:33:54,960 --> 00:33:59,120
row of the octahedral map

904
00:33:57,119 --> 00:34:02,158
now each one of those

905
00:33:59,119 --> 00:34:05,839
has to go out a particular direction

906
00:34:02,159 --> 00:34:08,240
right so the sample direction ray index

907
00:34:05,839 --> 00:34:11,440
this part here is what makes sure that

908
00:34:08,239 --> 00:34:14,638
you're grabbing the correct one

909
00:34:11,440 --> 00:34:16,079
but what i don't understand is how

910
00:34:14,639 --> 00:34:19,039
did this

911
00:34:16,079 --> 00:34:21,760
this this walking of the indices

912
00:34:19,039 --> 00:34:23,679
has to be correct for the direction

913
00:34:21,760 --> 00:34:26,079
which at this point i don't know that it

914
00:34:23,679 --> 00:34:27,280
is it's probably not that might have

915
00:34:26,079 --> 00:34:29,119
been the bug

916
00:34:27,280 --> 00:34:31,280
so we look at the sampling spheres part

917
00:34:29,119 --> 00:34:34,559
i don't understand how this got packed

918
00:34:31,280 --> 00:34:36,399
in here exactly right

919
00:34:34,559 --> 00:34:38,719
you can see there's a total light sample

920
00:34:36,398 --> 00:34:40,319
direction count for these sampling

921
00:34:38,719 --> 00:34:42,638
directions these are the directions that

922
00:34:40,320 --> 00:34:45,039
come out the sphere right

923
00:34:42,639 --> 00:34:47,039
and you can see here that we've got

924
00:34:45,039 --> 00:34:49,039
this which is light light sample

925
00:34:47,039 --> 00:34:50,960
directions per octahedron this is what

926
00:34:49,039 --> 00:34:53,519
i'm talking about there's it's it's a

927
00:34:50,960 --> 00:34:55,599
square right it's a it's the map dim

928
00:34:53,519 --> 00:34:58,400
which is eight times the map dim which

929
00:34:55,599 --> 00:35:00,800
is eight right it's eight times eight

930
00:34:58,400 --> 00:35:02,720
so the total number is the octahedral

931
00:35:00,800 --> 00:35:04,720
count times the light sample directions

932
00:35:02,719 --> 00:35:06,799
per octahedron

933
00:35:04,719 --> 00:35:09,679
you know what i'm saying

934
00:35:06,800 --> 00:35:09,680
i think you know what i'm saying

935
00:35:10,559 --> 00:35:15,920
so i think the part that i'm missing

936
00:35:13,280 --> 00:35:18,320
is these are packed these are obviously

937
00:35:15,920 --> 00:35:20,800
packed so that we have them in the

938
00:35:18,320 --> 00:35:23,440
correct order right we've got them

939
00:35:20,800 --> 00:35:24,560
in the order where it is

940
00:35:23,440 --> 00:35:28,800
by

941
00:35:24,559 --> 00:35:31,039
row then by column or whatever right

942
00:35:28,800 --> 00:35:32,800
and so this

943
00:35:31,039 --> 00:35:35,279
has to actually respect that and right

944
00:35:32,800 --> 00:35:38,000
now it would not be

945
00:35:35,280 --> 00:35:38,000
you know what i'm saying

946
00:35:39,838 --> 00:35:44,400
so light sample directions per

947
00:35:41,519 --> 00:35:45,599
octahedron this is actually

948
00:35:44,400 --> 00:35:48,240
not

949
00:35:45,599 --> 00:35:48,240
correct

950
00:35:56,838 --> 00:36:03,119
yeah so this needs an sy

951
00:36:00,880 --> 00:36:06,079
value

952
00:36:03,119 --> 00:36:08,079
so i guess

953
00:36:06,079 --> 00:36:09,440
what i would say

954
00:36:08,079 --> 00:36:12,480
is

955
00:36:09,440 --> 00:36:13,269
we really just need the base pointer

956
00:36:12,480 --> 00:36:14,480
in here

957
00:36:13,269 --> 00:36:15,079
[Music]

958
00:36:14,480 --> 00:36:18,320
to

959
00:36:15,079 --> 00:36:20,159
[Music]

960
00:36:18,320 --> 00:36:22,559
to be something along the following

961
00:36:20,159 --> 00:36:22,559
lines

962
00:36:22,719 --> 00:36:26,559
right

963
00:36:23,599 --> 00:36:28,400
if you imagine the sample direction

964
00:36:26,559 --> 00:36:30,159
is just unpacked

965
00:36:28,400 --> 00:36:31,119
here

966
00:36:30,159 --> 00:36:33,759
right

967
00:36:31,119 --> 00:36:37,200
then we actually would know what the

968
00:36:33,760 --> 00:36:40,320
sample direction offset is so the sample

969
00:36:37,199 --> 00:36:43,279
the light sample direction here for

970
00:36:40,320 --> 00:36:45,838
sample dir we can actually compute that

971
00:36:43,280 --> 00:36:48,720
index directly it's going to be the ray

972
00:36:45,838 --> 00:36:52,320
index is the small is the minor index so

973
00:36:48,719 --> 00:36:57,358
it just goes each time right

974
00:36:52,320 --> 00:36:57,359
it's the octahedron index times

975
00:36:57,440 --> 00:37:03,039
the light samples

976
00:36:59,920 --> 00:37:05,440
uh directions per octahedron right

977
00:37:03,039 --> 00:37:09,119
then it's going to be plus

978
00:37:05,440 --> 00:37:11,920
the rho index so right and and this is

979
00:37:09,119 --> 00:37:14,160
this ray index is really column index

980
00:37:11,920 --> 00:37:14,159
right

981
00:37:16,480 --> 00:37:23,679
so the row index times the uh

982
00:37:20,320 --> 00:37:27,440
light octahedral map dim

983
00:37:23,679 --> 00:37:29,039
plus the ray index that's the actual

984
00:37:27,440 --> 00:37:31,039
like

985
00:37:29,039 --> 00:37:32,559
that's the actual way that this is being

986
00:37:31,039 --> 00:37:34,480
stepped

987
00:37:32,559 --> 00:37:37,440
you know what i'm saying

988
00:37:34,480 --> 00:37:39,679
and since this piece of code doesn't

989
00:37:37,440 --> 00:37:42,000
actually know the

990
00:37:39,679 --> 00:37:44,960
the actual s y

991
00:37:42,000 --> 00:37:47,358
it can't compute the correct value here

992
00:37:44,960 --> 00:37:49,039
and that was the one missing piece that

993
00:37:47,358 --> 00:37:52,319
was confusing me but it's not convincing

994
00:37:49,039 --> 00:37:52,320
me now because i worked through it right

995
00:37:52,559 --> 00:37:58,400
so what we actually want to do here is

996
00:37:56,400 --> 00:38:01,280
you know honestly

997
00:37:58,400 --> 00:38:03,599
we we really would rather rebuild the

998
00:38:01,280 --> 00:38:05,760
lighting table to

999
00:38:03,599 --> 00:38:08,400
go in the correct order

1000
00:38:05,760 --> 00:38:11,010
meaning what you'd rather do

1001
00:38:08,400 --> 00:38:13,358
is just make it so that the

1002
00:38:11,010 --> 00:38:14,160
[Music]

1003
00:38:13,358 --> 00:38:16,319
right

1004
00:38:14,159 --> 00:38:17,440
take a look at how this is stepped

1005
00:38:16,320 --> 00:38:19,440
this

1006
00:38:17,440 --> 00:38:21,519
is the thing that's actually in the

1007
00:38:19,440 --> 00:38:25,599
outside loop

1008
00:38:21,519 --> 00:38:28,159
so what we would rather do is move this

1009
00:38:25,599 --> 00:38:32,160
as the prime index

1010
00:38:28,159 --> 00:38:35,519
and the octahedron as the interior index

1011
00:38:32,159 --> 00:38:38,319
so that we inside here just slight step

1012
00:38:35,519 --> 00:38:41,440
it one one at a time

1013
00:38:38,320 --> 00:38:41,440
we don't have to do that right now

1014
00:38:41,519 --> 00:38:46,480
but that's just smarter at that point

1015
00:38:44,400 --> 00:38:50,240
right it's a much easier to

1016
00:38:46,480 --> 00:38:50,240
for the code to be understood

1017
00:38:58,320 --> 00:39:01,838
so i want to do that eventually

1018
00:39:08,800 --> 00:39:11,039
okay

1019
00:39:12,079 --> 00:39:16,240
so let's assume that we go with that

1020
00:39:14,639 --> 00:39:17,440
um

1021
00:39:16,239 --> 00:39:19,679
either way

1022
00:39:17,440 --> 00:39:22,480
we do need the sy

1023
00:39:19,679 --> 00:39:24,000
value here and maybe that gets rolled in

1024
00:39:22,480 --> 00:39:24,960
here too i don't know that's a good

1025
00:39:24,000 --> 00:39:26,880
question

1026
00:39:24,960 --> 00:39:31,440
but if we take a look at how the sy

1027
00:39:26,880 --> 00:39:31,440
value works out so in full cast

1028
00:39:32,800 --> 00:39:39,200
um all it's doing is stepping through

1029
00:39:36,000 --> 00:39:42,639
those texels and calling grid raycast

1030
00:39:39,199 --> 00:39:44,639
right that's like the only thing

1031
00:39:42,639 --> 00:39:46,799
that it actually does so it may make

1032
00:39:44,639 --> 00:39:48,799
sense to now actually finally collapse

1033
00:39:46,800 --> 00:39:51,599
these routines so that

1034
00:39:48,800 --> 00:39:53,599
grid raycast gets welded in here right

1035
00:39:51,599 --> 00:39:56,400
as this gets simplified we may find that

1036
00:39:53,599 --> 00:39:58,800
that's possible i don't know uh it may

1037
00:39:56,400 --> 00:40:00,480
or may not be we're gonna you know we'll

1038
00:39:58,800 --> 00:40:02,079
have to see

1039
00:40:00,480 --> 00:40:04,159
for the time being though in order to

1040
00:40:02,079 --> 00:40:05,839
keep things relatively straightforward

1041
00:40:04,159 --> 00:40:08,838
what i'm going to do is slightly simpler

1042
00:40:05,838 --> 00:40:12,318
than that i'm just going to pass

1043
00:40:08,838 --> 00:40:14,799
um the sy value

1044
00:40:12,318 --> 00:40:17,199
down the line so in here there's just

1045
00:40:14,800 --> 00:40:19,920
going to be like a sy value that gets

1046
00:40:17,199 --> 00:40:22,078
passed in and i'll just put so after the

1047
00:40:19,920 --> 00:40:23,440
the work value that sy value will will

1048
00:40:22,079 --> 00:40:25,839
get passed down

1049
00:40:23,440 --> 00:40:26,639
and so if we have the sy value then we

1050
00:40:25,838 --> 00:40:28,960
can

1051
00:40:26,639 --> 00:40:31,039
back out the sample direction

1052
00:40:28,960 --> 00:40:33,838
value directly here

1053
00:40:31,039 --> 00:40:36,159
and we can just say like okay

1054
00:40:33,838 --> 00:40:38,159
here's the sample direction table here's

1055
00:40:36,159 --> 00:40:40,078
the octahedral index that we're talking

1056
00:40:38,159 --> 00:40:42,559
about and we just need an additional

1057
00:40:40,079 --> 00:40:44,560
value in here um

1058
00:40:42,559 --> 00:40:46,239
for

1059
00:40:44,559 --> 00:40:47,838
i don't remember what the value was

1060
00:40:46,239 --> 00:40:51,799
where's that i know

1061
00:40:47,838 --> 00:40:51,799
it is this

1062
00:40:52,719 --> 00:40:55,919
so we take the base pointer that's the

1063
00:40:54,559 --> 00:40:58,799
entire table

1064
00:40:55,920 --> 00:40:59,680
we offset it by which row we're on

1065
00:40:58,800 --> 00:41:02,400
right

1066
00:40:59,679 --> 00:41:05,598
as well as which octahedron we're on and

1067
00:41:02,400 --> 00:41:06,800
right now it looks kind of like that

1068
00:41:05,599 --> 00:41:10,079
you know what i'm saying

1069
00:41:06,800 --> 00:41:12,160
so as you step through the sys this is

1070
00:41:10,079 --> 00:41:14,640
what you get right

1071
00:41:12,159 --> 00:41:16,719
and i don't actually remember i want to

1072
00:41:14,639 --> 00:41:18,799
check to make sure the sy value isn't

1073
00:41:16,719 --> 00:41:20,318
offset there i don't know it might be no

1074
00:41:18,800 --> 00:41:21,680
it's not right so it's stepping from

1075
00:41:20,318 --> 00:41:24,559
zero to eight

1076
00:41:21,679 --> 00:41:27,838
uh so that's fine total casts initiated

1077
00:41:24,559 --> 00:41:31,119
is now totally false so now this is

1078
00:41:27,838 --> 00:41:34,318
going to actually include this number

1079
00:41:31,119 --> 00:41:36,480
um so that's fine

1080
00:41:34,318 --> 00:41:37,519
but doesn't really matter at the moment

1081
00:41:36,480 --> 00:41:39,280
okay

1082
00:41:37,519 --> 00:41:42,880
so

1083
00:41:39,280 --> 00:41:42,880
when we call full cast

1084
00:41:45,838 --> 00:41:49,920
we

1085
00:41:46,838 --> 00:41:52,799
have the tile the center and the entropy

1086
00:41:49,920 --> 00:41:55,200
index so the entropy now goes away

1087
00:41:52,800 --> 00:41:57,440
and you know we can leave the sample

1088
00:41:55,199 --> 00:41:59,679
point entropy in the work order

1089
00:41:57,440 --> 00:42:01,679
just in case we decide to add it back in

1090
00:41:59,679 --> 00:42:03,358
there's no real cost to having it there

1091
00:42:01,679 --> 00:42:05,679
but if it turns out that all this stuff

1092
00:42:03,358 --> 00:42:07,838
works to our satisfaction later we can

1093
00:42:05,679 --> 00:42:10,000
just pull the entry index out entirely

1094
00:42:07,838 --> 00:42:12,480
because now there's no actual entropy in

1095
00:42:10,000 --> 00:42:15,199
the lighting system anymore which you

1096
00:42:12,480 --> 00:42:16,400
know maybe is good maybe is bad i'm not

1097
00:42:15,199 --> 00:42:19,279
actually sure

1098
00:42:16,400 --> 00:42:20,559
um which one it is okay so now we're

1099
00:42:19,280 --> 00:42:22,800
actually

1100
00:42:20,559 --> 00:42:25,279
also totally stable like the lighting

1101
00:42:22,800 --> 00:42:27,440
has none of the artifacts anymore

1102
00:42:25,280 --> 00:42:29,920
which suggests that that was a bug it is

1103
00:42:27,440 --> 00:42:30,960
however set at too low of a blend rate

1104
00:42:29,920 --> 00:42:32,480
right now

1105
00:42:30,960 --> 00:42:34,240
because the blending is now happening

1106
00:42:32,480 --> 00:42:36,639
automatically so what we should be able

1107
00:42:34,239 --> 00:42:40,000
to find uh somewhere in here

1108
00:42:36,639 --> 00:42:42,239
uh is like an over 60 the the you know

1109
00:42:40,000 --> 00:42:45,440
the actual value here this should be

1110
00:42:42,239 --> 00:42:48,159
able to um crank this up to something

1111
00:42:45,440 --> 00:42:50,480
much more aggressive so let's say

1112
00:42:48,159 --> 00:42:52,239
it only takes maybe four frames for the

1113
00:42:50,480 --> 00:42:54,960
lighting to be completely

1114
00:42:52,239 --> 00:42:56,879
uh up to date so very little a low

1115
00:42:54,960 --> 00:42:58,480
amount of lag right

1116
00:42:56,880 --> 00:43:00,640
which would look like this

1117
00:42:58,480 --> 00:43:02,400
and you know it looks okay but you can

1118
00:43:00,639 --> 00:43:03,279
see we get there there is a little bit

1119
00:43:02,400 --> 00:43:05,920
of

1120
00:43:03,280 --> 00:43:07,760
shifting that's happening oddly enough

1121
00:43:05,920 --> 00:43:09,280
it seems to happen mostly when the

1122
00:43:07,760 --> 00:43:10,720
lighting

1123
00:43:09,280 --> 00:43:13,200
slides

1124
00:43:10,719 --> 00:43:15,358
um so i assume that has to do with the

1125
00:43:13,199 --> 00:43:17,199
fact that we've and we have some weird

1126
00:43:15,358 --> 00:43:19,679
artifacts there like like i don't know

1127
00:43:17,199 --> 00:43:21,919
that that this is probably because these

1128
00:43:19,679 --> 00:43:23,039
are no longer centered as you know we

1129
00:43:21,920 --> 00:43:24,800
kind of

1130
00:43:23,039 --> 00:43:26,159
have them now at the corners of these

1131
00:43:24,800 --> 00:43:27,599
things which is not what we intended

1132
00:43:26,159 --> 00:43:30,480
originally so there's a little bit of

1133
00:43:27,599 --> 00:43:32,720
that going on as well

1134
00:43:30,480 --> 00:43:35,199
so we're getting closer now but we still

1135
00:43:32,719 --> 00:43:38,078
have this every time the lighting shifts

1136
00:43:35,199 --> 00:43:40,719
it looks like there's like kind of weird

1137
00:43:38,079 --> 00:43:41,920
artifacts based on your alignment

1138
00:43:40,719 --> 00:43:44,480
um

1139
00:43:41,920 --> 00:43:45,680
where you know where you are because

1140
00:43:44,480 --> 00:43:48,800
when you're actually when you're

1141
00:43:45,679 --> 00:43:50,960
stationary even if the light moves it's

1142
00:43:48,800 --> 00:43:52,560
kind of okay but you can see you know it

1143
00:43:50,960 --> 00:43:54,318
doesn't look quite right so i think we

1144
00:43:52,559 --> 00:43:55,920
probably still have some bugs in how

1145
00:43:54,318 --> 00:43:58,880
we're indexing these things at the very

1146
00:43:55,920 --> 00:44:01,440
least right and and we can sort of

1147
00:43:58,880 --> 00:44:01,440
go from there

1148
00:44:01,599 --> 00:44:07,760
um that said again pretty stable i don't

1149
00:44:05,039 --> 00:44:09,039
know what this value should actually be

1150
00:44:07,760 --> 00:44:11,200
um

1151
00:44:09,039 --> 00:44:13,519
i think let's hold off on tuning

1152
00:44:11,199 --> 00:44:14,879
anything like this until we actually do

1153
00:44:13,519 --> 00:44:16,559
a debugging pass which i think is what

1154
00:44:14,880 --> 00:44:19,119
we want to do now

1155
00:44:16,559 --> 00:44:20,000
um looking at the performance of this

1156
00:44:19,119 --> 00:44:21,280
now

1157
00:44:20,000 --> 00:44:23,358
we're not even in the fullest

1158
00:44:21,280 --> 00:44:24,800
performance build and i think we're

1159
00:44:23,358 --> 00:44:27,759
pretty much okay

1160
00:44:24,800 --> 00:44:29,839
um you know like it's not quite as good

1161
00:44:27,760 --> 00:44:32,480
as i would like it to be at the moment

1162
00:44:29,838 --> 00:44:33,440
but it's not it's not bad

1163
00:44:32,480 --> 00:44:35,519
and

1164
00:44:33,440 --> 00:44:37,838
now we're like in a we're in a very

1165
00:44:35,519 --> 00:44:41,199
stable zone i would say

1166
00:44:37,838 --> 00:44:42,960
right um we're in a very stable zone for

1167
00:44:41,199 --> 00:44:45,439
performance so i think we just

1168
00:44:42,960 --> 00:44:47,280
concentrate on getting this now to be

1169
00:44:45,440 --> 00:44:48,318
less buggy but i think it will be pretty

1170
00:44:47,280 --> 00:44:49,440
stable

1171
00:44:48,318 --> 00:44:50,800
uh

1172
00:44:49,440 --> 00:44:53,599
going forward

1173
00:44:50,800 --> 00:44:53,599
also we can

1174
00:44:54,719 --> 00:44:59,679
if we want to

1175
00:44:57,358 --> 00:45:01,598
um we can add some more

1176
00:44:59,679 --> 00:45:03,919
uh

1177
00:45:01,599 --> 00:45:05,760
we can figure out some ways to to maybe

1178
00:45:03,920 --> 00:45:07,838
add the entropy back in

1179
00:45:05,760 --> 00:45:09,280
by generating more light spheres and

1180
00:45:07,838 --> 00:45:11,679
every frame we use a different light

1181
00:45:09,280 --> 00:45:13,519
sphere set uh we didn't do that

1182
00:45:11,679 --> 00:45:16,159
originally because we already were

1183
00:45:13,519 --> 00:45:18,318
thinking that we wouldn't do all 16 like

1184
00:45:16,159 --> 00:45:20,078
you know 16 was the number that we

1185
00:45:18,318 --> 00:45:22,719
thought was the total amount we'd cycle

1186
00:45:20,079 --> 00:45:24,160
through and we did one every frame so it

1187
00:45:22,719 --> 00:45:26,559
took 16 frames to sample all the

1188
00:45:24,159 --> 00:45:29,519
octahedrons now we're like okay that was

1189
00:45:26,559 --> 00:45:32,239
fine like we easily can do all of those

1190
00:45:29,519 --> 00:45:35,838
so maybe we want to up that number right

1191
00:45:32,239 --> 00:45:38,078
to 256 spheres or something

1192
00:45:35,838 --> 00:45:40,000
and then that way you know we can still

1193
00:45:38,079 --> 00:45:41,039
introduce some entropy to the system

1194
00:45:40,000 --> 00:45:42,880
that's why i said i didn't want to pull

1195
00:45:41,039 --> 00:45:44,880
that out later because we may we may

1196
00:45:42,880 --> 00:45:47,440
find that we actually still need that

1197
00:45:44,880 --> 00:45:49,200
okay but at the moment we're fine for

1198
00:45:47,440 --> 00:45:51,200
performance and stability i think and

1199
00:45:49,199 --> 00:45:53,358
now i think we're just in bug land and

1200
00:45:51,199 --> 00:45:56,318
we want to go figure out how to

1201
00:45:53,358 --> 00:45:58,159
reduce the sort of bugginess of the

1202
00:45:56,318 --> 00:46:00,400
actual light computation which i think

1203
00:45:58,159 --> 00:46:02,318
is probably wrong you know what i mean i

1204
00:46:00,400 --> 00:46:03,838
i think it's you know since we made the

1205
00:46:02,318 --> 00:46:05,679
simplifications i think it's probably

1206
00:46:03,838 --> 00:46:08,559
incorrect at the moment and what we're

1207
00:46:05,679 --> 00:46:11,519
going to want to do is you know

1208
00:46:08,559 --> 00:46:12,880
sort of reduce the the sort of wonkiness

1209
00:46:11,519 --> 00:46:14,639
there by

1210
00:46:12,880 --> 00:46:16,160
actually going through and looking at

1211
00:46:14,639 --> 00:46:17,598
where arrays are being cast from make

1212
00:46:16,159 --> 00:46:19,759
sure they're being cast from the correct

1213
00:46:17,599 --> 00:46:21,119
place and that they're stepping properly

1214
00:46:19,760 --> 00:46:23,200
all that stuff because we kind of

1215
00:46:21,119 --> 00:46:26,079
shifted that stuff a little bit and we

1216
00:46:23,199 --> 00:46:28,480
do have a bunch of like debug

1217
00:46:26,079 --> 00:46:30,560
code in here right so that we can look

1218
00:46:28,480 --> 00:46:31,599
at individual light casts and things

1219
00:46:30,559 --> 00:46:34,159
like this

1220
00:46:31,599 --> 00:46:36,240
um and do various stepping so we when we

1221
00:46:34,159 --> 00:46:38,639
debug the lighting the first time around

1222
00:46:36,239 --> 00:46:41,439
we left in the code that we would need

1223
00:46:38,639 --> 00:46:45,440
to be able to fix some of that stuff and

1224
00:46:41,440 --> 00:46:47,039
so you know i think that is

1225
00:46:45,440 --> 00:46:49,039
we we shouldn't be starting completely

1226
00:46:47,039 --> 00:46:49,920
from scratch like we've got

1227
00:46:49,039 --> 00:46:52,159
uh

1228
00:46:49,920 --> 00:46:54,559
we've got stuff here that we can use you

1229
00:46:52,159 --> 00:46:54,559
know what i mean

1230
00:46:54,880 --> 00:46:58,640
all right so let's first just

1231
00:46:57,199 --> 00:47:00,000
make sure we're all on the same page

1232
00:46:58,639 --> 00:47:03,039
here because like i said it's been a

1233
00:47:00,000 --> 00:47:03,039
while so we looked at this code

1234
00:47:03,280 --> 00:47:09,040
so we now step over all 16 octahedrons

1235
00:47:06,480 --> 00:47:11,599
that we have we grab out the sample

1236
00:47:09,039 --> 00:47:13,119
direction batch by saying it's the table

1237
00:47:11,599 --> 00:47:16,000
times which octahedron where you think

1238
00:47:13,119 --> 00:47:17,358
we're on times whichever row we want

1239
00:47:16,000 --> 00:47:19,519
that gives us our initial sample

1240
00:47:17,358 --> 00:47:21,759
direction and then we're going to go

1241
00:47:19,519 --> 00:47:24,239
over all eight of those sample

1242
00:47:21,760 --> 00:47:27,839
directions one at a time we're gonna

1243
00:47:24,239 --> 00:47:30,078
produce after the raycast and uh

1244
00:47:27,838 --> 00:47:31,599
doing like sort of the computation of

1245
00:47:30,079 --> 00:47:33,519
the reflectance and all that stuff

1246
00:47:31,599 --> 00:47:36,960
sampling this this is basically where we

1247
00:47:33,519 --> 00:47:39,599
sample the uh the old octahedral map

1248
00:47:36,960 --> 00:47:40,960
right when we do the sampling we figure

1249
00:47:39,599 --> 00:47:43,920
out how much we're going to transfer and

1250
00:47:40,960 --> 00:47:45,599
then we sum that into our transfer value

1251
00:47:43,920 --> 00:47:47,280
we're going to do that for every

1252
00:47:45,599 --> 00:47:48,240
octahedron so we're going to do that 16

1253
00:47:47,280 --> 00:47:49,760
times

1254
00:47:48,239 --> 00:47:53,598
and then we're going to write it out

1255
00:47:49,760 --> 00:47:55,680
once to the final map right so

1256
00:47:53,599 --> 00:47:58,318
that's what this is doing and that app

1257
00:47:55,679 --> 00:48:00,558
this right here applies that blend rate

1258
00:47:58,318 --> 00:48:03,440
so that t update blend rate that's what

1259
00:48:00,559 --> 00:48:06,880
this is right

1260
00:48:03,440 --> 00:48:10,800
so we're going to do that and we do that

1261
00:48:06,880 --> 00:48:14,400
for anybody who is not inside

1262
00:48:10,800 --> 00:48:17,039
um who doesn't start off inside a

1263
00:48:14,400 --> 00:48:18,480
one of our grid leaves

1264
00:48:17,039 --> 00:48:21,039
and we sort of determined that's

1265
00:48:18,480 --> 00:48:23,679
actually kind of buggy though

1266
00:48:21,039 --> 00:48:26,318
because if a light

1267
00:48:23,679 --> 00:48:28,799
if you're enclosed by a light

1268
00:48:26,318 --> 00:48:31,199
you are not supposed to be completely

1269
00:48:28,800 --> 00:48:33,200
dim like you should probably have at

1270
00:48:31,199 --> 00:48:37,039
least whatever the value of that light

1271
00:48:33,199 --> 00:48:38,399
is should be what you write in as your

1272
00:48:37,039 --> 00:48:40,318
uh

1273
00:48:38,400 --> 00:48:42,318
as your light value like you should be

1274
00:48:40,318 --> 00:48:43,679
radiating that in all directions right

1275
00:48:42,318 --> 00:48:47,358
because you're you know you're basically

1276
00:48:43,679 --> 00:48:47,358
like enclosed by the light

1277
00:48:47,599 --> 00:48:51,519
so i don't know how we want to handle

1278
00:48:49,599 --> 00:48:53,200
that maybe we i don't know what we want

1279
00:48:51,519 --> 00:48:55,599
to do it could be that the correct thing

1280
00:48:53,199 --> 00:48:57,439
to do there is something else but you

1281
00:48:55,599 --> 00:48:58,800
know we we probably need to do something

1282
00:48:57,440 --> 00:49:00,480
about that

1283
00:48:58,800 --> 00:49:02,720
so that's going to have to change and we

1284
00:49:00,480 --> 00:49:03,838
know that's going to have to change

1285
00:49:02,719 --> 00:49:05,118
um

1286
00:49:03,838 --> 00:49:07,519
that said

1287
00:49:05,119 --> 00:49:10,519
everything else i think is fairly

1288
00:49:07,519 --> 00:49:10,519
straightforward

1289
00:49:16,400 --> 00:49:19,838
i don't know um

1290
00:49:20,400 --> 00:49:25,920
there are a few things that might

1291
00:49:23,599 --> 00:49:29,680
not be true anymore as well

1292
00:49:25,920 --> 00:49:32,400
so one of the things that we did here

1293
00:49:29,679 --> 00:49:34,159
is we computed the walk table and we

1294
00:49:32,400 --> 00:49:36,720
verified that it's faster to compute the

1295
00:49:34,159 --> 00:49:36,719
walk table

1296
00:49:38,079 --> 00:49:42,400
and just look up

1297
00:49:40,719 --> 00:49:44,399
the walk table

1298
00:49:42,400 --> 00:49:46,960
than it is to

1299
00:49:44,400 --> 00:49:49,200
uh produce the walk table dynamically on

1300
00:49:46,960 --> 00:49:50,720
the fly

1301
00:49:49,199 --> 00:49:51,759
however

1302
00:49:50,719 --> 00:49:53,439
right

1303
00:49:51,760 --> 00:49:54,559
however

1304
00:49:53,440 --> 00:49:56,960
um

1305
00:49:54,559 --> 00:49:58,400
we don't actually know

1306
00:49:56,960 --> 00:50:01,199
that that's true anymore

1307
00:49:58,400 --> 00:50:03,280
now that we've moved to 2d because this

1308
00:50:01,199 --> 00:50:05,358
was for 3d which is a lot more

1309
00:50:03,280 --> 00:50:07,760
complicated because you have three

1310
00:50:05,358 --> 00:50:09,199
possible step directions you can take

1311
00:50:07,760 --> 00:50:11,040
x y and z

1312
00:50:09,199 --> 00:50:12,399
and three when you're talking about a

1313
00:50:11,039 --> 00:50:15,358
really tight loop

1314
00:50:12,400 --> 00:50:17,680
uh where everything counts three is a

1315
00:50:15,358 --> 00:50:19,199
lot more expensive than two two is

1316
00:50:17,679 --> 00:50:22,558
literally just one

1317
00:50:19,199 --> 00:50:24,639
branch right either you're going to go

1318
00:50:22,559 --> 00:50:28,079
a step in y or you're going to go step

1319
00:50:24,639 --> 00:50:29,358
in x when you have to do like x or y or

1320
00:50:28,079 --> 00:50:31,760
z

1321
00:50:29,358 --> 00:50:33,920
you can see how maybe that would have

1322
00:50:31,760 --> 00:50:36,000
tipped the balance in favor of a table

1323
00:50:33,920 --> 00:50:38,400
whereas if you just have x and y and

1324
00:50:36,000 --> 00:50:41,838
it's just a straight bresenham walk

1325
00:50:38,400 --> 00:50:45,280
along there not only

1326
00:50:41,838 --> 00:50:47,920
you know not only might it change but we

1327
00:50:45,280 --> 00:50:50,240
could probably do at a literal like

1328
00:50:47,920 --> 00:50:51,119
integer bresenham walk or something like

1329
00:50:50,239 --> 00:50:52,318
this

1330
00:50:51,119 --> 00:50:55,519
where where

1331
00:50:52,318 --> 00:50:58,719
we don't even use the float

1332
00:50:55,519 --> 00:51:00,960
where we don't even use the um

1333
00:50:58,719 --> 00:51:03,759
sse registers right so it could be that

1334
00:51:00,960 --> 00:51:05,119
we could actually hide the cost of doing

1335
00:51:03,760 --> 00:51:06,559
the walk

1336
00:51:05,119 --> 00:51:08,640
which would get us out of the business

1337
00:51:06,559 --> 00:51:10,559
of building these tables at all right we

1338
00:51:08,639 --> 00:51:12,879
could literally do

1339
00:51:10,559 --> 00:51:14,319
the comparison just the one comparison

1340
00:51:12,880 --> 00:51:15,920
each time

1341
00:51:14,318 --> 00:51:18,558
uh and go

1342
00:51:15,920 --> 00:51:21,280
now it may be that that is still just

1343
00:51:18,559 --> 00:51:23,599
too expensive because it's mispredicted

1344
00:51:21,280 --> 00:51:26,240
and having a table that just you always

1345
00:51:23,599 --> 00:51:30,240
grab whatever it is each time

1346
00:51:26,239 --> 00:51:35,078
uh is just too compelling right uh

1347
00:51:30,239 --> 00:51:35,078
you know i just don't know um

1348
00:51:37,358 --> 00:51:40,480
i just don't know

1349
00:51:38,719 --> 00:51:42,159
so we probably will have to run that

1350
00:51:40,480 --> 00:51:44,000
test again at some point i don't think

1351
00:51:42,159 --> 00:51:45,279
we should do it now but you know at some

1352
00:51:44,000 --> 00:51:47,599
point that is something we would

1353
00:51:45,280 --> 00:51:49,519
probably have to figure out because we

1354
00:51:47,599 --> 00:51:52,318
definitely have

1355
00:51:49,519 --> 00:51:55,199
you know uh

1356
00:51:52,318 --> 00:51:56,719
we definitely have some some

1357
00:51:55,199 --> 00:51:59,039
flexibility there that we didn't have

1358
00:51:56,719 --> 00:51:59,039
before

1359
00:51:59,679 --> 00:52:03,679
so

1360
00:52:00,639 --> 00:52:06,078
all right um if we take a look at how we

1361
00:52:03,679 --> 00:52:07,919
do the get quadrant 4 stuff let's just

1362
00:52:06,079 --> 00:52:10,400
go over this one more time because again

1363
00:52:07,920 --> 00:52:13,440
this is subtle as well

1364
00:52:10,400 --> 00:52:13,440
so the way this works

1365
00:52:14,079 --> 00:52:17,599
is we're going to loop over all of the

1366
00:52:15,838 --> 00:52:20,239
sample directions

1367
00:52:17,599 --> 00:52:20,240
you can

1368
00:52:20,880 --> 00:52:23,519
you can see how this works here we're

1369
00:52:22,239 --> 00:52:25,759
going to loop over all the sample

1370
00:52:23,519 --> 00:52:29,199
directions and the sample directions

1371
00:52:25,760 --> 00:52:31,520
are for whichever uh you know whatever

1372
00:52:29,199 --> 00:52:33,279
particular node you are we have this

1373
00:52:31,519 --> 00:52:34,960
idea that

1374
00:52:33,280 --> 00:52:38,240
we

1375
00:52:34,960 --> 00:52:39,358
the actual places you're casting from

1376
00:52:38,239 --> 00:52:41,679
are

1377
00:52:39,358 --> 00:52:42,960
they're finer grained like there are

1378
00:52:41,679 --> 00:52:45,519
more

1379
00:52:42,960 --> 00:52:47,920
light nodes in fact i think we can just

1380
00:52:45,519 --> 00:52:50,239
put that back in here i don't i don't

1381
00:52:47,920 --> 00:52:50,240
um

1382
00:52:55,599 --> 00:53:01,318
i'm gonna turn on draw octahedral values

1383
00:52:57,519 --> 00:53:01,318
so you can see what i'm talking about

1384
00:53:02,719 --> 00:53:07,279
so

1385
00:53:03,519 --> 00:53:09,759
these are the locations

1386
00:53:07,280 --> 00:53:12,880
if you can see there uh these are the

1387
00:53:09,760 --> 00:53:14,640
locations where we are actually taking

1388
00:53:12,880 --> 00:53:17,200
light probes

1389
00:53:14,639 --> 00:53:18,639
so each one of these

1390
00:53:17,199 --> 00:53:19,838
places

1391
00:53:18,639 --> 00:53:20,960
stores

1392
00:53:19,838 --> 00:53:22,799
a

1393
00:53:20,960 --> 00:53:26,639
a light probe

1394
00:53:22,800 --> 00:53:29,280
value and on each frame we cast

1395
00:53:26,639 --> 00:53:31,598
uh out from from these

1396
00:53:29,280 --> 00:53:33,839
so on each frame we cast

1397
00:53:31,599 --> 00:53:36,960
uh however many rays it was now so it's

1398
00:53:33,838 --> 00:53:39,358
16 times eight so right uh

1399
00:53:36,960 --> 00:53:39,358
i think

1400
00:53:41,199 --> 00:53:49,039
no it's 16 times 8 times 8. so it's 16

1401
00:53:45,599 --> 00:53:50,000
times 20 16 times 64.

1402
00:53:49,039 --> 00:53:52,639
right

1403
00:53:50,000 --> 00:53:54,559
so we cast 16 times 64 raised out of

1404
00:53:52,639 --> 00:53:56,318
each one of these every frame just to

1405
00:53:54,559 --> 00:53:58,000
let you know how powerful computers are

1406
00:53:56,318 --> 00:53:59,679
right i mean yes we completely

1407
00:53:58,000 --> 00:54:01,920
multi-threaded this and yes it is simdee

1408
00:53:59,679 --> 00:54:04,000
so it's going it's it's utilizing the

1409
00:54:01,920 --> 00:54:07,119
performance of the cpu well but i mean

1410
00:54:04,000 --> 00:54:08,639
come on man computers are fast

1411
00:54:07,119 --> 00:54:11,200
so we're doing those casts out of each

1412
00:54:08,639 --> 00:54:13,358
one of these right

1413
00:54:11,199 --> 00:54:15,199
um but the but the thing is if you look

1414
00:54:13,358 --> 00:54:17,199
and i don't know if we have enough debug

1415
00:54:15,199 --> 00:54:19,279
space for these i should probably switch

1416
00:54:17,199 --> 00:54:20,399
to using the other debug diagram stuff

1417
00:54:19,280 --> 00:54:22,000
but

1418
00:54:20,400 --> 00:54:23,200
um

1419
00:54:22,000 --> 00:54:24,500
yeah we don't

1420
00:54:23,199 --> 00:54:28,250
uh so

1421
00:54:24,500 --> 00:54:28,250
[Music]

1422
00:54:29,440 --> 00:54:34,280
where is our debug lines

1423
00:54:38,559 --> 00:54:41,280
debug line

1424
00:54:50,838 --> 00:54:56,798
count let's just give ourselves a little

1425
00:54:53,679 --> 00:54:56,798
more debug space here

1426
00:54:58,639 --> 00:55:02,400
all right how what oh

1427
00:55:03,440 --> 00:55:09,039
is this just

1428
00:55:04,838 --> 00:55:09,039
because we have a um

1429
00:55:09,358 --> 00:55:16,159
we only have 16 bit for

1430
00:55:13,519 --> 00:55:18,559
line indices

1431
00:55:16,159 --> 00:55:21,519
so the problem here

1432
00:55:18,559 --> 00:55:23,519
is actually just that like we can't

1433
00:55:21,519 --> 00:55:24,559
actually fit

1434
00:55:23,519 --> 00:55:26,480
um

1435
00:55:24,559 --> 00:55:29,119
this many

1436
00:55:26,480 --> 00:55:31,679
lines

1437
00:55:29,119 --> 00:55:33,039
yeah we should we should just fix that

1438
00:55:31,679 --> 00:55:34,719
we should just have multiple line

1439
00:55:33,039 --> 00:55:36,639
batches because this is the that's the

1440
00:55:34,719 --> 00:55:37,519
problem that we're getting here right is

1441
00:55:36,639 --> 00:55:40,558
that

1442
00:55:37,519 --> 00:55:41,519
we end up with too many of these

1443
00:55:40,559 --> 00:55:43,280
uh

1444
00:55:41,519 --> 00:55:46,159
when we push them on

1445
00:55:43,280 --> 00:55:47,760
so you know we could fix that right um

1446
00:55:46,159 --> 00:55:49,920
in fact

1447
00:55:47,760 --> 00:55:51,760
it should be pretty easy to fix it right

1448
00:55:49,920 --> 00:55:53,280
um let's just see what happens if we try

1449
00:55:51,760 --> 00:55:56,480
to fix that here

1450
00:55:53,280 --> 00:56:00,359
so if we go to when we do the draw debug

1451
00:55:56,480 --> 00:56:00,358
lines um

1452
00:56:05,838 --> 00:56:08,880
the lighting values when they actually

1453
00:56:07,519 --> 00:56:09,679
push out the

1454
00:56:08,880 --> 00:56:13,039
the

1455
00:56:09,679 --> 00:56:13,039
the debug lines there right

1456
00:56:15,519 --> 00:56:19,280
this

1457
00:56:17,519 --> 00:56:21,519
um

1458
00:56:19,280 --> 00:56:23,680
i feel like this is actually a lot we i

1459
00:56:21,519 --> 00:56:26,639
don't know why we didn't do this before

1460
00:56:23,679 --> 00:56:28,960
but i feel like we could just solve this

1461
00:56:26,639 --> 00:56:32,639
by breaking this up into chunks

1462
00:56:28,960 --> 00:56:36,159
right so if we did something like this

1463
00:56:32,639 --> 00:56:37,679
which is like debug lines left and we

1464
00:56:36,159 --> 00:56:40,159
just said all right this is how many

1465
00:56:37,679 --> 00:56:41,759
debug lines there are

1466
00:56:40,159 --> 00:56:43,920
if we want to keep the indices always

1467
00:56:41,760 --> 00:56:45,599
below 16 bits because that's what we

1468
00:56:43,920 --> 00:56:46,960
have for dispatching to the graphics

1469
00:56:45,599 --> 00:56:50,240
card

1470
00:56:46,960 --> 00:56:51,519
and we don't want to bump that to 32.

1471
00:56:50,239 --> 00:56:53,039
it seems pretty easy at this point to

1472
00:56:51,519 --> 00:56:55,039
just say well whatever debug lines are

1473
00:56:53,039 --> 00:56:58,798
left we'll just say as long as there are

1474
00:56:55,039 --> 00:56:59,449
debug lines left to draw

1475
00:56:58,798 --> 00:57:02,400
we will

1476
00:56:59,449 --> 00:57:05,679
[Music]

1477
00:57:02,400 --> 00:57:05,680
compute a batch value

1478
00:57:06,000 --> 00:57:11,199
which is just whatever the minimum value

1479
00:57:08,159 --> 00:57:14,318
is between how many lines are left

1480
00:57:11,199 --> 00:57:16,558
and what fits in 16 bits

1481
00:57:14,318 --> 00:57:16,558
right

1482
00:57:18,400 --> 00:57:23,599
that kind of thing

1483
00:57:20,000 --> 00:57:26,000
um we'll then just like go through those

1484
00:57:23,599 --> 00:57:27,280
uh and maybe we can you know we can do

1485
00:57:26,000 --> 00:57:29,280
this with an offset so it'll be a little

1486
00:57:27,280 --> 00:57:32,640
easier for us we could do something like

1487
00:57:29,280 --> 00:57:32,640
this so we say like

1488
00:57:32,880 --> 00:57:37,680
debug line index we'll start at zero

1489
00:57:35,920 --> 00:57:40,159
um and we'll just say look while the

1490
00:57:37,679 --> 00:57:41,919
debug line index is less than however

1491
00:57:40,159 --> 00:57:44,480
many debug lines there are

1492
00:57:41,920 --> 00:57:46,480
we will compute the value of the lines

1493
00:57:44,480 --> 00:57:49,199
left by subtracting where we're at from

1494
00:57:46,480 --> 00:57:50,960
the total number like so uh and then

1495
00:57:49,199 --> 00:57:53,759
we'll just say look we're gonna do as

1496
00:57:50,960 --> 00:57:57,519
many as we can which sometimes is all of

1497
00:57:53,760 --> 00:57:59,920
them and sometimes is only 16 bits worth

1498
00:57:57,519 --> 00:58:03,599
uh we'll then ask that for that value

1499
00:57:59,920 --> 00:58:03,599
we'll loop through that value

1500
00:58:04,480 --> 00:58:09,639
um

1501
00:58:05,280 --> 00:58:09,640
and we will

1502
00:58:14,239 --> 00:58:18,639
have a sub index here where we push you

1503
00:58:16,559 --> 00:58:21,640
know we push the line segments one at a

1504
00:58:18,639 --> 00:58:21,639
time

1505
00:58:22,798 --> 00:58:27,679
like so

1506
00:58:24,960 --> 00:58:28,880
uh when we're done we just advance debug

1507
00:58:27,679 --> 00:58:29,838
line index

1508
00:58:28,880 --> 00:58:31,838
uh

1509
00:58:29,838 --> 00:58:33,679
you know

1510
00:58:31,838 --> 00:58:35,920
by the batch count and that should allow

1511
00:58:33,679 --> 00:58:38,480
us to just batch these up into 16-bit

1512
00:58:35,920 --> 00:58:40,318
capable chunks which in theory should

1513
00:58:38,480 --> 00:58:42,400
mean that we don't have

1514
00:58:40,318 --> 00:58:44,318
a limitation right

1515
00:58:42,400 --> 00:58:48,760
or at least i think it should

1516
00:58:44,318 --> 00:58:48,759
we should probably switch this into

1517
00:58:50,159 --> 00:58:52,719
one second

1518
00:58:59,358 --> 00:59:02,318
yeah so

1519
00:59:01,199 --> 00:59:03,439
we should probably search this in debug

1520
00:59:02,318 --> 00:59:04,480
mode to make sure this is actually going

1521
00:59:03,440 --> 00:59:06,318
to do it because it looks like it still

1522
00:59:04,480 --> 00:59:08,400
doesn't like that but i'm not sure why

1523
00:59:06,318 --> 00:59:10,798
it wouldn't do we have a total frame

1524
00:59:08,400 --> 00:59:14,079
limit on 16 bits do we never reduce

1525
00:59:10,798 --> 00:59:16,318
those do we never rebase those values

1526
00:59:14,079 --> 00:59:18,318
um that would be kind of weird

1527
00:59:16,318 --> 00:59:20,960
if that's true

1528
00:59:18,318 --> 00:59:20,960
but it might be

1529
00:59:23,838 --> 00:59:27,519
here's where we like update batches

1530
00:59:31,280 --> 00:59:36,519
it sure looks like this would be fine

1531
00:59:33,519 --> 00:59:36,519
right

1532
00:59:52,079 --> 00:59:56,880
so if we take a look at

1533
00:59:53,838 --> 00:59:56,880
what this says here

1534
00:59:57,119 --> 01:00:02,720
there's a max quads per batch that

1535
00:59:59,199 --> 01:00:05,118
already has this baked in right

1536
01:00:02,719 --> 01:00:08,078
so it looks like this should work

1537
01:00:05,119 --> 01:00:10,400
meaning it looks like as long as we

1538
01:00:08,079 --> 01:00:13,760
you know don't try to call this value

1539
01:00:10,400 --> 01:00:17,440
with something that's too large there

1540
01:00:13,760 --> 01:00:20,079
it sure seems like that would work

1541
01:00:17,440 --> 01:00:23,760
i mean it could be the pr the fact that

1542
01:00:20,079 --> 01:00:23,760
this is slightly off

1543
01:00:24,880 --> 01:00:29,760
i guess the problem is the max quads per

1544
01:00:27,119 --> 01:00:34,079
batch value we probably need this to

1545
01:00:29,760 --> 01:00:36,559
respect i mean you just like here

1546
01:00:34,079 --> 01:00:41,039
let's suppose we just said the max batch

1547
01:00:36,559 --> 01:00:41,040
value is 4 000 of these right

1548
01:00:41,358 --> 01:00:43,838
um

1549
01:00:45,358 --> 01:00:48,558
yeah

1550
01:00:46,239 --> 01:00:50,159
so we just need that batch value to be

1551
01:00:48,559 --> 01:00:53,040
you know maybe we need to export that

1552
01:00:50,159 --> 01:00:54,000
from the renderer so the we know like

1553
01:00:53,039 --> 01:00:55,119
look you have to

1554
01:00:54,000 --> 01:00:57,280
[Music]

1555
01:00:55,119 --> 01:01:00,480
provide a number that's that's you know

1556
01:00:57,280 --> 01:01:03,599
sufficient but anyway now we're out of

1557
01:01:00,480 --> 01:01:05,440
the we don't have the issue anymore of

1558
01:01:03,599 --> 01:01:06,960
having too many

1559
01:01:05,440 --> 01:01:08,798
debug lines we can have as many as we

1560
01:01:06,960 --> 01:01:11,199
want um so we can draw everything now of

1561
01:01:08,798 --> 01:01:13,519
course there is the issue of we can't

1562
01:01:11,199 --> 01:01:15,679
figure out what the heck anything is so

1563
01:01:13,519 --> 01:01:18,318
there's that um but

1564
01:01:15,679 --> 01:01:20,318
uh if we turn off like

1565
01:01:18,318 --> 01:01:21,599
like maybe rendering the occluders we

1566
01:01:20,318 --> 01:01:24,639
can look at the sort of thing that i was

1567
01:01:21,599 --> 01:01:26,480
talking about before so if we go um and

1568
01:01:24,639 --> 01:01:28,318
in fact you can also kind of see

1569
01:01:26,480 --> 01:01:29,119
here in this area

1570
01:01:28,318 --> 01:01:29,920
where

1571
01:01:29,119 --> 01:01:33,599
uh

1572
01:01:29,920 --> 01:01:35,440
you've got the occluders drawn right or

1573
01:01:33,599 --> 01:01:37,599
i should say where you've got

1574
01:01:35,440 --> 01:01:40,400
arbitrary stuff drawn so just things are

1575
01:01:37,599 --> 01:01:42,240
being drawn that are lights or occluders

1576
01:01:40,400 --> 01:01:45,440
you can see that for example we have

1577
01:01:42,239 --> 01:01:48,959
trees in this area right those are

1578
01:01:45,440 --> 01:01:48,960
that's what these all are

1579
01:01:49,039 --> 01:01:52,318
but then you've also got like this stuff

1580
01:01:50,719 --> 01:01:54,078
which i don't have any idea what that is

1581
01:01:52,318 --> 01:01:56,558
i assume those are the lights right

1582
01:01:54,079 --> 01:01:58,318
there wherever the lights are

1583
01:01:56,559 --> 01:01:59,599
um and you can also see kind of the

1584
01:01:58,318 --> 01:02:02,000
problem that i was saying before is that

1585
01:01:59,599 --> 01:02:03,920
like plenty of sample points are inside

1586
01:02:02,000 --> 01:02:05,199
where the lights are and right now we're

1587
01:02:03,920 --> 01:02:06,960
treating that as if they're inside

1588
01:02:05,199 --> 01:02:09,118
occluders but they're not they're inside

1589
01:02:06,960 --> 01:02:09,920
lights right

1590
01:02:09,119 --> 01:02:12,640
so

1591
01:02:09,920 --> 01:02:12,639
that's an issue

1592
01:02:15,760 --> 01:02:18,319
to be sure

1593
01:02:19,119 --> 01:02:23,000
so um

1594
01:02:34,880 --> 01:02:37,200
so i'm not sure what we want to do with

1595
01:02:36,239 --> 01:02:38,798
that we're going to have to think about

1596
01:02:37,199 --> 01:02:40,798
that a little bit more

1597
01:02:38,798 --> 01:02:42,480
right um

1598
01:02:40,798 --> 01:02:43,440
inside here you can see there's a lot

1599
01:02:42,480 --> 01:02:44,880
more

1600
01:02:43,440 --> 01:02:46,880
occluders that's because there are

1601
01:02:44,880 --> 01:02:49,838
ceiling tiles so those are the ceiling

1602
01:02:46,880 --> 01:02:52,079
tiles there um and those are there just

1603
01:02:49,838 --> 01:02:53,838
because interior spaces need to have

1604
01:02:52,079 --> 01:02:55,200
bounce from the ceiling exterior spaces

1605
01:02:53,838 --> 01:02:57,119
obviously wouldn't

1606
01:02:55,199 --> 01:02:58,879
have bounced from anything but interior

1607
01:02:57,119 --> 01:03:00,960
spaces even though we're not drawing a

1608
01:02:58,880 --> 01:03:02,400
ceiling want to have lighting bounce

1609
01:03:00,960 --> 01:03:04,400
from the ceiling so that's why those are

1610
01:03:02,400 --> 01:03:06,639
there

1611
01:03:04,400 --> 01:03:08,079
uh similarly you can see the thing that

1612
01:03:06,639 --> 01:03:10,159
i was talking about before where you

1613
01:03:08,079 --> 01:03:11,359
know you can see how these are

1614
01:03:10,159 --> 01:03:13,199
these

1615
01:03:11,358 --> 01:03:14,719
bits are kind of off so the first thing

1616
01:03:13,199 --> 01:03:17,279
i think i might want to do is let's try

1617
01:03:14,719 --> 01:03:20,879
to restore the alignment of these

1618
01:03:17,280 --> 01:03:23,119
to actually be aligned more on the

1619
01:03:20,880 --> 01:03:26,318
actual like i feel like these want to be

1620
01:03:23,119 --> 01:03:28,318
aligned so that their centers are at the

1621
01:03:26,318 --> 01:03:30,960
we want the centers of the sampling to

1622
01:03:28,318 --> 01:03:32,400
be at the centers of our actual grid

1623
01:03:30,960 --> 01:03:34,720
because that's where people are going to

1624
01:03:32,400 --> 01:03:36,798
be most of the time so we'd like to have

1625
01:03:34,719 --> 01:03:38,480
the lighting computed properly around

1626
01:03:36,798 --> 01:03:41,519
like where the things are we're actually

1627
01:03:38,480 --> 01:03:44,000
lighting um and furthermore it avoids

1628
01:03:41,519 --> 01:03:45,920
problems of like having stuff that's

1629
01:03:44,000 --> 01:03:47,838
right on the boundary of being inside or

1630
01:03:45,920 --> 01:03:49,599
outside something which again is just

1631
01:03:47,838 --> 01:03:51,679
creating a lot of problems for us that

1632
01:03:49,599 --> 01:03:53,599
we wouldn't ordinarily have to deal with

1633
01:03:51,679 --> 01:03:55,440
if we're not putting our probes right on

1634
01:03:53,599 --> 01:03:56,880
the boundary of where something goes

1635
01:03:55,440 --> 01:03:59,200
from being inside being outside although

1636
01:03:56,880 --> 01:04:01,920
we probably do need to deal with that in

1637
01:03:59,199 --> 01:04:01,919
in separate ways

1638
01:04:02,079 --> 01:04:07,200
in other ways anyway but

1639
01:04:04,400 --> 01:04:08,720
so why did we get that alignment change

1640
01:04:07,199 --> 01:04:10,399
um

1641
01:04:08,719 --> 01:04:11,519
last weekend we we basically had that

1642
01:04:10,400 --> 01:04:12,400
happen

1643
01:04:11,519 --> 01:04:14,880
and

1644
01:04:12,400 --> 01:04:17,680
i'm assuming that it has to do with the

1645
01:04:14,880 --> 01:04:17,680
fact that we

1646
01:04:24,960 --> 01:04:31,119
i'm assuming that when we went to change

1647
01:04:28,239 --> 01:04:33,358
the alignment of things in the world to

1648
01:04:31,119 --> 01:04:37,280
not use z

1649
01:04:33,358 --> 01:04:38,838
we used the plus five offset

1650
01:04:37,280 --> 01:04:41,519
like we used that

1651
01:04:38,838 --> 01:04:46,719
that uh

1652
01:04:41,519 --> 01:04:46,719
offset by a percentage of a tile right

1653
01:04:46,880 --> 01:04:51,119
and so if we want the lighting to be

1654
01:04:48,960 --> 01:04:54,880
centered around it the lighting center

1655
01:04:51,119 --> 01:04:55,760
would also have to be offset by

1656
01:04:54,880 --> 01:04:56,880
that

1657
01:04:55,760 --> 01:05:00,000
right

1658
01:04:56,880 --> 01:05:02,960
so when we do our alignment in the

1659
01:05:00,000 --> 01:05:07,119
lighting code

1660
01:05:02,960 --> 01:05:10,880
um we need the lighting itself to align

1661
01:05:07,119 --> 01:05:14,000
to a tile boundary that's off by

1662
01:05:10,880 --> 01:05:16,798
that same percent that same

1663
01:05:14,000 --> 01:05:16,798
fifth of a tile

1664
01:05:17,519 --> 01:05:22,239
like so in here right where we do all

1665
01:05:20,079 --> 01:05:24,318
this stuff like voxel dim is one

1666
01:05:22,239 --> 01:05:25,598
fundamental unit and blah blah blah

1667
01:05:24,318 --> 01:05:26,480
right

1668
01:05:25,599 --> 01:05:28,000
and

1669
01:05:26,480 --> 01:05:30,159
we

1670
01:05:28,000 --> 01:05:32,159
we do all this stuff to determine like

1671
01:05:30,159 --> 01:05:34,159
where the thing is going to be which is

1672
01:05:32,159 --> 01:05:37,118
right down here

1673
01:05:34,159 --> 01:05:39,199
and we say all right it's going to be at

1674
01:05:37,119 --> 01:05:41,440
this particular offset

1675
01:05:39,199 --> 01:05:43,358
um

1676
01:05:41,440 --> 01:05:45,440
right you can see here where we where

1677
01:05:43,358 --> 01:05:48,639
we're saying like we set the offset to

1678
01:05:45,440 --> 01:05:49,519
this particular value and all that stuff

1679
01:05:48,639 --> 01:05:53,519
so

1680
01:05:49,519 --> 01:05:56,639
this part needs to be offset by that 0.5

1681
01:05:53,519 --> 01:05:56,639
of a cell dim

1682
01:05:59,280 --> 01:06:02,280
right

1683
01:06:25,440 --> 01:06:28,440
so

1684
01:06:35,679 --> 01:06:40,719
i mean really i think i i don't know to

1685
01:06:38,798 --> 01:06:43,920
what extent this is

1686
01:06:40,719 --> 01:06:46,719
going to be exactly correct but i think

1687
01:06:43,920 --> 01:06:49,680
we're really just talking about

1688
01:06:46,719 --> 01:06:52,959
like atlas min corner the x value would

1689
01:06:49,679 --> 01:06:55,358
be offset by

1690
01:06:52,960 --> 01:06:58,000
whatever the voxel size is

1691
01:06:55,358 --> 01:06:59,119
right so half of one of these voxels

1692
01:06:58,000 --> 01:07:02,559
so

1693
01:06:59,119 --> 01:07:06,240
the like when we pass in here

1694
01:07:02,559 --> 01:07:08,798
we've got the vox cell dim right

1695
01:07:06,239 --> 01:07:10,558
i think we just want this offset by half

1696
01:07:08,798 --> 01:07:13,440
because that's how things are aligned in

1697
01:07:10,559 --> 01:07:13,440
the world currently

1698
01:07:13,519 --> 01:07:17,358
something like this

1699
01:07:16,079 --> 01:07:18,960
right

1700
01:07:17,358 --> 01:07:20,798
um

1701
01:07:18,960 --> 01:07:22,880
and we should be able to do i don't know

1702
01:07:20,798 --> 01:07:24,480
if we've got x y but

1703
01:07:22,880 --> 01:07:25,519
maybe we do

1704
01:07:24,480 --> 01:07:28,400
yeah

1705
01:07:25,519 --> 01:07:30,159
so if we just offset the x y

1706
01:07:28,400 --> 01:07:31,838
by that much leave the z where it is

1707
01:07:30,159 --> 01:07:34,159
because that's this kind of absolute

1708
01:07:31,838 --> 01:07:36,159
thing and it's off differently then in

1709
01:07:34,159 --> 01:07:41,480
theory the location where we take these

1710
01:07:36,159 --> 01:07:41,480
samples would now be centered whoa

1711
01:07:43,440 --> 01:07:48,559
that's some interesting light poisoning

1712
01:07:46,159 --> 01:07:50,239
presumably because now it's sampling off

1713
01:07:48,559 --> 01:07:52,079
the edge

1714
01:07:50,239 --> 01:07:55,558
that's pretty cool though

1715
01:07:52,079 --> 01:07:55,559
you have to admit

1716
01:07:59,679 --> 01:08:03,279
that's some interesting light poisoning

1717
01:08:08,159 --> 01:08:12,719
uh but anyway

1718
01:08:10,880 --> 01:08:14,960
light poisoning aside

1719
01:08:12,719 --> 01:08:14,959
um

1720
01:08:16,158 --> 01:08:21,599
i assume we effectively want to do that

1721
01:08:19,039 --> 01:08:22,838
right like i assume we effectively want

1722
01:08:21,600 --> 01:08:26,000
to sample

1723
01:08:22,838 --> 01:08:28,960
lighting add an offset of the boundary

1724
01:08:26,000 --> 01:08:31,520
like that now why that would actually

1725
01:08:28,960 --> 01:08:33,600
produce

1726
01:08:31,520 --> 01:08:36,560
the light poisoning that we just saw

1727
01:08:33,600 --> 01:08:38,239
though i'm not sure why so you know we

1728
01:08:36,560 --> 01:08:40,000
know we've got some bugs in here so it

1729
01:08:38,238 --> 01:08:41,599
could just be related to other problems

1730
01:08:40,000 --> 01:08:42,798
that we're having it might not really

1731
01:08:41,600 --> 01:08:45,039
have anything to do with that and this

1732
01:08:42,798 --> 01:08:47,838
just exposed it but the fact that that

1733
01:08:45,039 --> 01:08:50,479
occurred was not what i was expecting

1734
01:08:47,838 --> 01:08:54,318
um so that's a little disconcerting

1735
01:08:50,479 --> 01:08:56,559
right um i don't understand exactly why

1736
01:08:54,319 --> 01:08:59,920
that would have provoked it because in

1737
01:08:56,560 --> 01:08:59,920
theory this should just be

1738
01:09:00,479 --> 01:09:04,479
in theory that sampling shouldn't really

1739
01:09:03,119 --> 01:09:06,479
have

1740
01:09:04,479 --> 01:09:08,798
much to do with anything and the

1741
01:09:06,479 --> 01:09:10,399
alignment relative you know the

1742
01:09:08,798 --> 01:09:13,519
alignment of

1743
01:09:10,399 --> 01:09:15,838
the cells of the

1744
01:09:13,520 --> 01:09:18,319
spatial partition

1745
01:09:15,838 --> 01:09:20,479
should be the same either way because

1746
01:09:18,319 --> 01:09:22,319
the whole thing got shifted

1747
01:09:20,479 --> 01:09:24,079
in that direction

1748
01:09:22,319 --> 01:09:25,759
you know what i mean so you can see that

1749
01:09:24,079 --> 01:09:28,000
like the cells of the spatial prediction

1750
01:09:25,759 --> 01:09:29,439
also got shifted 0.5 so there really

1751
01:09:28,000 --> 01:09:31,838
shouldn't have been a behavioral

1752
01:09:29,439 --> 01:09:34,559
difference i don't know why this in

1753
01:09:31,838 --> 01:09:36,719
particular like leaving this out

1754
01:09:34,560 --> 01:09:39,199
i don't know why

1755
01:09:36,719 --> 01:09:40,880
small changes in that

1756
01:09:39,198 --> 01:09:42,719
alignment

1757
01:09:40,880 --> 01:09:44,159
should produce light poisoning like that

1758
01:09:42,719 --> 01:09:46,319
or not i

1759
01:09:44,158 --> 01:09:48,000
i can't intuit that

1760
01:09:46,319 --> 01:09:51,039
um

1761
01:09:48,000 --> 01:09:53,359
offhand so that's really confusing

1762
01:09:51,039 --> 01:09:55,760
and a bit troubling i mean it may just

1763
01:09:53,359 --> 01:09:58,400
be that you know when we go fix whatever

1764
01:09:55,760 --> 01:10:00,880
other bugs we have that just goes away

1765
01:09:58,399 --> 01:10:02,719
because it's actually just a product of

1766
01:10:00,880 --> 01:10:03,920
uh one of the other things that we

1767
01:10:02,719 --> 01:10:05,520
haven't

1768
01:10:03,920 --> 01:10:08,800
sort of debugged yet

1769
01:10:05,520 --> 01:10:10,960
but if it does actually have to do with

1770
01:10:08,800 --> 01:10:14,560
how they're aligned

1771
01:10:10,960 --> 01:10:15,279
i don't quite understand why that would

1772
01:10:14,560 --> 01:10:17,840
be

1773
01:10:15,279 --> 01:10:17,840
um

1774
01:10:23,119 --> 01:10:28,079
so that's a bit weird right i i don't

1775
01:10:26,238 --> 01:10:30,718
understand why that would be because the

1776
01:10:28,079 --> 01:10:32,559
spatial grid is derived from the atlas

1777
01:10:30,719 --> 01:10:33,600
grid so they're always these two are

1778
01:10:32,560 --> 01:10:35,440
always going to be aligned so the

1779
01:10:33,600 --> 01:10:37,360
lighting system in theory

1780
01:10:35,439 --> 01:10:39,599
the part that i'm not intuiting as to

1781
01:10:37,359 --> 01:10:41,439
why this would make a difference is it

1782
01:10:39,600 --> 01:10:43,360
shouldn't really matter like where i

1783
01:10:41,439 --> 01:10:45,359
slide the lighting

1784
01:10:43,359 --> 01:10:47,599
alignment if i move it just a little bit

1785
01:10:45,359 --> 01:10:48,799
in one direction why would that change

1786
01:10:47,600 --> 01:10:50,880
the like

1787
01:10:48,800 --> 01:10:52,159
feedback

1788
01:10:50,880 --> 01:10:55,440
uh

1789
01:10:52,158 --> 01:10:55,439
properties of it right

1790
01:10:57,439 --> 01:11:01,039
it doesn't really make good sense to me

1791
01:11:03,520 --> 01:11:09,040
um it's possible that it's totally fine

1792
01:11:05,679 --> 01:11:09,039
and it's just related to something else

1793
01:11:09,279 --> 01:11:12,960
like we know the light the lighting is

1794
01:11:11,520 --> 01:11:15,280
busted

1795
01:11:12,960 --> 01:11:18,079
um and we have to debug it so it could

1796
01:11:15,279 --> 01:11:21,198
be that that's just

1797
01:11:18,079 --> 01:11:23,198
that's just an artifact of

1798
01:11:21,198 --> 01:11:26,000
the bustedness

1799
01:11:23,198 --> 01:11:27,439
but i don't know it's a bit confusing to

1800
01:11:26,000 --> 01:11:28,399
say the least

1801
01:11:27,439 --> 01:11:30,238
um

1802
01:11:28,399 --> 01:11:32,960
so anyway i'm gonna leave that in there

1803
01:11:30,238 --> 01:11:35,678
for now because i think the more bugs we

1804
01:11:32,960 --> 01:11:38,880
have the better in this case because

1805
01:11:35,679 --> 01:11:40,880
uh the sort of more obvious the failure

1806
01:11:38,880 --> 01:11:43,359
of the lighting the hopefully easier it

1807
01:11:40,880 --> 01:11:46,719
will be to find those bugs

1808
01:11:43,359 --> 01:11:49,198
um i love that light leaking over time

1809
01:11:46,719 --> 01:11:50,800
it looks super cool um

1810
01:11:49,198 --> 01:11:52,960
unfortunately we would rather have that

1811
01:11:50,800 --> 01:11:55,199
happen when we want it to happen and not

1812
01:11:52,960 --> 01:11:57,600
when we don't uh but you know what are

1813
01:11:55,198 --> 01:11:57,599
you gonna do

1814
01:11:57,920 --> 01:12:01,600
anyway uh so let's

1815
01:12:03,520 --> 01:12:06,480
let's uh

1816
01:12:04,800 --> 01:12:09,600
nerf that out now

1817
01:12:06,479 --> 01:12:11,759
uh and let's start talking about uh how

1818
01:12:09,600 --> 01:12:14,480
we want to look at these values

1819
01:12:11,760 --> 01:12:15,440
uh a little bit more closely

1820
01:12:14,479 --> 01:12:16,479
so

1821
01:12:15,439 --> 01:12:19,479
you know

1822
01:12:16,479 --> 01:12:19,479
um

1823
01:12:22,399 --> 01:12:26,639
so i guess i would start

1824
01:12:24,640 --> 01:12:31,280
with the observation

1825
01:12:26,640 --> 01:12:31,280
that there is very clearly

1826
01:12:32,719 --> 01:12:36,679
that's just really strange

1827
01:12:40,960 --> 01:12:45,760
so i think we're just sampling

1828
01:12:42,960 --> 01:12:48,000
directions wrong i mean honestly i think

1829
01:12:45,760 --> 01:12:50,960
that's mostly what's happening you can

1830
01:12:48,000 --> 01:12:53,359
see that here it's like oh you know

1831
01:12:50,960 --> 01:12:55,119
everybody seems to suddenly be able to

1832
01:12:53,359 --> 01:12:56,399
see the light source

1833
01:12:55,119 --> 01:12:58,640
um

1834
01:12:56,399 --> 01:13:00,559
in one case and nobody can see it in the

1835
01:12:58,640 --> 01:13:02,400
other and that strikes me as just a

1836
01:13:00,560 --> 01:13:05,400
sampling issue

1837
01:13:02,399 --> 01:13:05,399
uh

1838
01:13:06,719 --> 01:13:10,560
so i feel like we probably just have a

1839
01:13:08,800 --> 01:13:11,920
sample direction issue here where we're

1840
01:13:10,560 --> 01:13:14,560
not really sampling the sample

1841
01:13:11,920 --> 01:13:16,800
directions the way that we think we are

1842
01:13:14,560 --> 01:13:18,400
um

1843
01:13:16,800 --> 01:13:20,480
and so i think what i'll start with is

1844
01:13:18,399 --> 01:13:22,719
now that we can like i'm gonna go back

1845
01:13:20,479 --> 01:13:25,599
to debug draw

1846
01:13:22,719 --> 01:13:27,279
um octahedral values and i'm gonna put

1847
01:13:25,600 --> 01:13:29,440
back in the

1848
01:13:27,279 --> 01:13:31,198
thing that draws like the actual

1849
01:13:29,439 --> 01:13:33,519
octahedral map

1850
01:13:31,198 --> 01:13:35,519
uh so that we can see those and now that

1851
01:13:33,520 --> 01:13:38,480
i know that i can crank my debug line

1852
01:13:35,520 --> 01:13:40,480
count up a bunch um i should be fine to

1853
01:13:38,479 --> 01:13:43,039
see them all right

1854
01:13:40,479 --> 01:13:44,639
so what i'd like to do now is just these

1855
01:13:43,039 --> 01:13:45,920
are these are our little kind of like i

1856
01:13:44,640 --> 01:13:47,840
don't know if those of you remember like

1857
01:13:45,920 --> 01:13:52,000
those little koosh balls

1858
01:13:47,840 --> 01:13:52,000
right like they were they were like um

1859
01:13:59,520 --> 01:14:02,480
you remember these things

1860
01:14:03,840 --> 01:14:08,079
they were like

1861
01:14:06,079 --> 01:14:12,158
all the rage for a little while

1862
01:14:08,079 --> 01:14:13,439
uh in like the 19 early 90s maybe

1863
01:14:12,158 --> 01:14:14,799
um

1864
01:14:13,439 --> 01:14:16,479
i want to say

1865
01:14:14,800 --> 01:14:17,840
maybe

1866
01:14:16,479 --> 01:14:18,879
uh

1867
01:14:17,840 --> 01:14:21,039
so

1868
01:14:18,880 --> 01:14:22,880
like the koosh ball

1869
01:14:21,039 --> 01:14:24,238
is is effectively what we're drawing

1870
01:14:22,880 --> 01:14:26,480
here right we're drawing a little koosh

1871
01:14:24,238 --> 01:14:26,479
ball

1872
01:14:26,880 --> 01:14:32,480
um and the koosh ball shows us what the

1873
01:14:29,679 --> 01:14:35,279
lighting is in any particular direction

1874
01:14:32,479 --> 01:14:37,439
from one of these light probes so it

1875
01:14:35,279 --> 01:14:39,119
gives us a way of sort of trying to

1876
01:14:37,439 --> 01:14:40,960
figure out what the heck is going on

1877
01:14:39,119 --> 01:14:42,960
because it's hard with lighting

1878
01:14:40,960 --> 01:14:45,039
um it's easy to debug an individual

1879
01:14:42,960 --> 01:14:46,399
raycast or something which is the you

1880
01:14:45,039 --> 01:14:48,238
know something we're going to want to do

1881
01:14:46,399 --> 01:14:49,679
for sure because we may find that our

1882
01:14:48,238 --> 01:14:52,158
raycast is just busted or something like

1883
01:14:49,679 --> 01:14:53,440
that right so when you start small it's

1884
01:14:52,158 --> 01:14:54,799
easy to debug an individual raycast but

1885
01:14:53,439 --> 01:14:56,238
then it starts to get kind of harder

1886
01:14:54,800 --> 01:14:58,560
when you talk about just like okay is

1887
01:14:56,238 --> 01:15:00,238
the light transport sensible right now

1888
01:14:58,560 --> 01:15:01,360
or not or you know various things like

1889
01:15:00,238 --> 01:15:02,959
this

1890
01:15:01,359 --> 01:15:04,639
so if we take a look at the little koosh

1891
01:15:02,960 --> 01:15:06,640
ball it kind of helps us a little to

1892
01:15:04,640 --> 01:15:08,800
figure out what's going on um and we can

1893
01:15:06,640 --> 01:15:11,520
sort of see in certain cases i think i

1894
01:15:08,800 --> 01:15:15,360
would like to turn on the voxel cells

1895
01:15:11,520 --> 01:15:15,360
um so draw spatial grid

1896
01:15:17,119 --> 01:15:22,238
um i'm gonna say like let's let's draw

1897
01:15:20,719 --> 01:15:24,880
part of the spatial grid and not the

1898
01:15:22,238 --> 01:15:26,879
other part so this is just like me going

1899
01:15:24,880 --> 01:15:28,800
you know what don't draw the actual like

1900
01:15:26,880 --> 01:15:29,600
occluders and stuff i don't want to see

1901
01:15:28,800 --> 01:15:33,119
those

1902
01:15:29,600 --> 01:15:35,280
um let's just draw the cell boundaries

1903
01:15:33,119 --> 01:15:37,359
just so i can see where they are

1904
01:15:35,279 --> 01:15:40,000
so here are like the cells they're drawn

1905
01:15:37,359 --> 01:15:42,158
inset slightly only slightly

1906
01:15:40,000 --> 01:15:43,359
um so they you know there's not actually

1907
01:15:42,158 --> 01:15:44,559
a gap between them but they're just

1908
01:15:43,359 --> 01:15:46,399
drawn that way so you can see them a

1909
01:15:44,560 --> 01:15:49,120
little more clearly

1910
01:15:46,399 --> 01:15:51,439
uh and if you look you can kind of see

1911
01:15:49,119 --> 01:15:53,920
like some nonsensical stuff here right

1912
01:15:51,439 --> 01:15:56,719
you can see that these particular koosh

1913
01:15:53,920 --> 01:16:00,000
balls got basically no lighting

1914
01:15:56,719 --> 01:16:02,319
even though these got tons of lighting

1915
01:16:00,000 --> 01:16:04,319
so some fairly nonsensical things

1916
01:16:02,319 --> 01:16:06,960
going on

1917
01:16:04,319 --> 01:16:10,000
and what we determined for

1918
01:16:06,960 --> 01:16:12,079
these sort of blatant ones here

1919
01:16:10,000 --> 01:16:14,079
um and in fact i guess i can turn this

1920
01:16:12,079 --> 01:16:15,600
on temporarily so you can see it

1921
01:16:14,079 --> 01:16:18,319
although it just becomes too much

1922
01:16:15,600 --> 01:16:21,280
unfortunately to really parse hopefully

1923
01:16:18,319 --> 01:16:22,158
you can see it if i narrate it

1924
01:16:21,279 --> 01:16:24,719
um

1925
01:16:22,158 --> 01:16:26,079
what you can see here is that actually

1926
01:16:24,719 --> 01:16:29,119
these

1927
01:16:26,079 --> 01:16:30,479
are inside lights so there's a you see

1928
01:16:29,119 --> 01:16:32,000
how there's a light that moves with the

1929
01:16:30,479 --> 01:16:32,959
hero's head here

1930
01:16:32,000 --> 01:16:35,840
right

1931
01:16:32,960 --> 01:16:35,840
um

1932
01:16:37,600 --> 01:16:41,039
and and you know what you can see a

1933
01:16:38,880 --> 01:16:41,920
pretty obvious bug there too

1934
01:16:41,039 --> 01:16:43,600
like

1935
01:16:41,920 --> 01:16:47,480
why does that

1936
01:16:43,600 --> 01:16:47,480
not update now

1937
01:16:48,880 --> 01:16:52,239
like what's going on

1938
01:16:54,079 --> 01:16:58,880
so there's some pretty weird stuff

1939
01:16:56,560 --> 01:17:01,679
happening right you can see how strange

1940
01:16:58,880 --> 01:17:03,279
this is so i mean it's kind of good news

1941
01:17:01,679 --> 01:17:06,079
right i mean it's never good news that

1942
01:17:03,279 --> 01:17:09,279
you have a bug but it's always good news

1943
01:17:06,079 --> 01:17:11,439
if the bug is blatant because it gives

1944
01:17:09,279 --> 01:17:12,960
us a better chance of finding it right

1945
01:17:11,439 --> 01:17:14,719
lighting can be real like you see what

1946
01:17:12,960 --> 01:17:16,640
happened there

1947
01:17:14,719 --> 01:17:18,480
those were black as i hopped through

1948
01:17:16,640 --> 01:17:21,199
them which is what you would expect to

1949
01:17:18,479 --> 01:17:22,559
have happen with that if it's enclosed

1950
01:17:21,198 --> 01:17:23,919
right like you can see it's entirely

1951
01:17:22,560 --> 01:17:25,600
enclosed there

1952
01:17:23,920 --> 01:17:27,760
um

1953
01:17:25,600 --> 01:17:30,320
but that one that's now entirely

1954
01:17:27,760 --> 01:17:30,320
enclosed

1955
01:17:43,119 --> 01:17:49,198
because we available it right in order

1956
01:17:45,679 --> 01:17:52,079
to go down to this new 2d uh sort of

1957
01:17:49,198 --> 01:17:53,198
flat plain version that we're doing

1958
01:17:52,079 --> 01:17:54,800
and so

1959
01:17:53,198 --> 01:17:56,399
i think we just want to start there and

1960
01:17:54,800 --> 01:17:58,000
work our way up from the raycast because

1961
01:17:56,399 --> 01:17:59,119
i think the raycast might just plain be

1962
01:17:58,000 --> 01:18:01,679
broken

1963
01:17:59,119 --> 01:18:03,439
that's my guess because it does make

1964
01:18:01,679 --> 01:18:05,600
sense that these things inside the light

1965
01:18:03,439 --> 01:18:07,599
are registering as black because we do

1966
01:18:05,600 --> 01:18:09,199
have code that does that it does not

1967
01:18:07,600 --> 01:18:10,840
make sense why they're not registering

1968
01:18:09,198 --> 01:18:14,319
as black

1969
01:18:10,840 --> 01:18:18,119
consistently so that is

1970
01:18:14,319 --> 01:18:18,119
wrong you know what i mean

1971
01:18:27,600 --> 01:18:31,280
ah um

1972
01:18:29,520 --> 01:18:32,560
so the heroes lightbox sometimes red and

1973
01:18:31,279 --> 01:18:34,479
sometimes green

1974
01:18:32,560 --> 01:18:36,640
uh the reason for that is just to make

1975
01:18:34,479 --> 01:18:38,559
it easier to see which node it's in i

1976
01:18:36,640 --> 01:18:39,600
mean easier to see and this is kind of a

1977
01:18:38,560 --> 01:18:41,840
laughable thing to say because there's

1978
01:18:39,600 --> 01:18:44,159
too many boxes but what what's happening

1979
01:18:41,840 --> 01:18:47,199
there is just that

1980
01:18:44,158 --> 01:18:49,359
if you look at the spatial partition i

1981
01:18:47,198 --> 01:18:50,639
colored it so that there's cyan and

1982
01:18:49,359 --> 01:18:52,719
magenta

1983
01:18:50,640 --> 01:18:53,520
alternating

1984
01:18:52,719 --> 01:18:56,399
right

1985
01:18:53,520 --> 01:18:58,480
um and so when you turn off

1986
01:18:56,399 --> 01:19:01,439
like let's turn off the

1987
01:18:58,479 --> 01:19:03,919
the non-occluders so the the actual

1988
01:19:01,439 --> 01:19:06,238
spatial grid will now go away

1989
01:19:03,920 --> 01:19:09,039
and this is just the occluders what i

1990
01:19:06,238 --> 01:19:11,439
did is i colored the occluders based on

1991
01:19:09,039 --> 01:19:14,399
which cells they were in just so you can

1992
01:19:11,439 --> 01:19:16,879
see alternating cell boundaries so as

1993
01:19:14,399 --> 01:19:18,960
the hero's light source moves between

1994
01:19:16,880 --> 01:19:21,199
cell boundaries it will be cyan when

1995
01:19:18,960 --> 01:19:23,279
it's inside a cyan boundary

1996
01:19:21,198 --> 01:19:24,960
like in that case or it will be magenta

1997
01:19:23,279 --> 01:19:26,880
when it's inside a magenta boundary and

1998
01:19:24,960 --> 01:19:28,079
when it moves between the two you can

1999
01:19:26,880 --> 01:19:30,880
actually see

2000
01:19:28,079 --> 01:19:32,559
that the it will be clipped so half will

2001
01:19:30,880 --> 01:19:34,560
be magenta and half will be cyan because

2002
01:19:32,560 --> 01:19:37,280
it's in two different nodes

2003
01:19:34,560 --> 01:19:39,199
at once and in fact if we do i think we

2004
01:19:37,279 --> 01:19:40,639
have a thing here i don't even remember

2005
01:19:39,198 --> 01:19:42,319
where it is

2006
01:19:40,640 --> 01:19:45,280
uh in like a time there's like a way to

2007
01:19:42,319 --> 01:19:48,079
slow the time step down

2008
01:19:45,279 --> 01:19:51,039
so if i if i really slow the time step

2009
01:19:48,079 --> 01:19:52,719
down um so that i can hop the hero like

2010
01:19:51,039 --> 01:19:54,800
really slowly

2011
01:19:52,719 --> 01:19:58,000
you can actually see what i'm talking

2012
01:19:54,800 --> 01:19:58,000
about here so like

2013
01:19:59,920 --> 01:20:05,199
you see how there's like two boxes

2014
01:20:03,520 --> 01:20:08,639
you know what i'm saying

2015
01:20:05,198 --> 01:20:12,079
so basically the the coloration here

2016
01:20:08,639 --> 01:20:14,400
doesn't show any state information

2017
01:20:12,079 --> 01:20:17,039
it's purely just telling you

2018
01:20:14,399 --> 01:20:20,319
what node things got sorted into

2019
01:20:17,039 --> 01:20:22,158
and currently like to the best of my

2020
01:20:20,319 --> 01:20:24,399
visual ability given that this isn't the

2021
01:20:22,158 --> 01:20:28,559
world's best visualization but

2022
01:20:24,399 --> 01:20:30,559
to the extent that i can parse it um

2023
01:20:28,560 --> 01:20:33,520
it sure looks

2024
01:20:30,560 --> 01:20:36,239
fine like the spatial partition looks

2025
01:20:33,520 --> 01:20:39,440
correct i don't see any obvious

2026
01:20:36,238 --> 01:20:40,559
indication that the spatial partition is

2027
01:20:39,439 --> 01:20:42,079
wrong

2028
01:20:40,560 --> 01:20:44,320
maybe i'll slow this down a little bit

2029
01:20:42,079 --> 01:20:47,198
here

2030
01:20:44,319 --> 01:20:49,198
so as you move things such as the hero's

2031
01:20:47,198 --> 01:20:52,079
light source around the spatial

2032
01:20:49,198 --> 01:20:54,399
partition um even when the spatial

2033
01:20:52,079 --> 01:20:57,519
partition is sliding like it is now or

2034
01:20:54,399 --> 01:20:59,839
doing things it looks pretty much right

2035
01:20:57,520 --> 01:21:02,400
like like i don't see any evidence that

2036
01:20:59,840 --> 01:21:04,400
things are getting sorted wrong um or

2037
01:21:02,399 --> 01:21:06,719
that boxes aren't clipping properly into

2038
01:21:04,399 --> 01:21:09,119
the spatial partition or any of that

2039
01:21:06,719 --> 01:21:10,319
stuff it all actually looks like

2040
01:21:09,119 --> 01:21:11,519
a-okay

2041
01:21:10,319 --> 01:21:13,679
right

2042
01:21:11,520 --> 01:21:16,000
so it looks to me like the place to

2043
01:21:13,679 --> 01:21:18,560
start is the raycaster the raycaster

2044
01:21:16,000 --> 01:21:20,238
looks like we probably broke it um and

2045
01:21:18,560 --> 01:21:22,480
that makes perfect sense because it was

2046
01:21:20,238 --> 01:21:23,919
pretty crazily optimized like because

2047
01:21:22,479 --> 01:21:25,519
because that was the part we were just

2048
01:21:23,920 --> 01:21:26,840
trying to figure out how fast we could

2049
01:21:25,520 --> 01:21:30,719
make it

2050
01:21:26,840 --> 01:21:33,360
run uh it makes sense right uh oh heroin

2051
01:21:30,719 --> 01:21:33,359
wants to

2052
01:21:33,520 --> 01:21:40,280
suggest something in line 152

2053
01:21:36,960 --> 01:21:40,279
line 152.

2054
01:21:42,079 --> 01:21:48,800
the first factor be s y times 16 times

2055
01:21:46,479 --> 01:21:48,799
eight

2056
01:21:50,000 --> 01:21:54,479
do you mean this one right here

2057
01:21:52,880 --> 01:21:57,480
by the way

2058
01:21:54,479 --> 01:21:57,479
um

2059
01:22:06,399 --> 01:22:09,638
this one

2060
01:22:14,079 --> 01:22:15,920
okay

2061
01:22:15,039 --> 01:22:17,600
um

2062
01:22:15,920 --> 01:22:19,039
i don't believe so

2063
01:22:17,600 --> 01:22:20,639
but again we haven't looked at this

2064
01:22:19,039 --> 01:22:22,158
closely so just to explain where that

2065
01:22:20,639 --> 01:22:25,760
number comes from

2066
01:22:22,158 --> 01:22:27,439
so when we compute the lighting table

2067
01:22:25,760 --> 01:22:32,639
we have this thing called light sample

2068
01:22:27,439 --> 01:22:32,638
directions per octahedron which is 64.

2069
01:22:34,479 --> 01:22:36,799
right

2070
01:22:35,520 --> 01:22:40,560
um

2071
01:22:36,800 --> 01:22:44,239
so i don't think so

2072
01:22:40,560 --> 01:22:44,239
because this is already

2073
01:22:46,479 --> 01:22:51,519
this is already the number it should be

2074
01:22:48,880 --> 01:22:52,960
right like it's 64.

2075
01:22:51,520 --> 01:22:55,600
you know what i'm saying

2076
01:22:52,960 --> 01:22:56,880
i don't know where you got 16 times 8

2077
01:22:55,600 --> 01:22:58,880
from

2078
01:22:56,880 --> 01:23:00,319
so if you really think it should be 16

2079
01:22:58,880 --> 01:23:02,079
times 8

2080
01:23:00,319 --> 01:23:05,039
then then that's not what it is it's

2081
01:23:02,079 --> 01:23:06,639
actually 8 times 8 at the moment right

2082
01:23:05,039 --> 01:23:07,600
but assuming that you meant eight times

2083
01:23:06,639 --> 01:23:08,880
eight

2084
01:23:07,600 --> 01:23:11,520
it does

2085
01:23:08,880 --> 01:23:13,279
that is what that factor is it's baked

2086
01:23:11,520 --> 01:23:15,600
into here

2087
01:23:13,279 --> 01:23:15,599
um

2088
01:23:16,079 --> 01:23:18,238
i don't know if that answers the

2089
01:23:17,119 --> 01:23:20,880
question

2090
01:23:18,238 --> 01:23:22,879
but like i said this stuff we need to go

2091
01:23:20,880 --> 01:23:25,039
look at so

2092
01:23:22,880 --> 01:23:27,039
this may be wrong i don't think what

2093
01:23:25,039 --> 01:23:29,519
you're talking about is wrong

2094
01:23:27,039 --> 01:23:32,079
but then again

2095
01:23:29,520 --> 01:23:33,679
like i said this kind of needs to now be

2096
01:23:32,079 --> 01:23:36,399
updated because we really kind of

2097
01:23:33,679 --> 01:23:38,800
changed dramatically what it was doing

2098
01:23:36,399 --> 01:23:41,119
and so this was highly optimized for the

2099
01:23:38,800 --> 01:23:42,880
case that we had because we needed to to

2100
01:23:41,119 --> 01:23:44,399
take some performance analysis of it so

2101
01:23:42,880 --> 01:23:45,840
we didn't really have a choice

2102
01:23:44,399 --> 01:23:47,759
and now we're kind of changing some of

2103
01:23:45,840 --> 01:23:50,400
those assumptions so some of something

2104
01:23:47,760 --> 01:23:51,920
it could very well be wrong i i'm not

2105
01:23:50,399 --> 01:23:53,039
i'm just saying why i don't think what

2106
01:23:51,920 --> 01:23:54,399
you were saying

2107
01:23:53,039 --> 01:23:56,319
is wrong

2108
01:23:54,399 --> 01:23:58,238
based on my current

2109
01:23:56,319 --> 01:24:00,880
analysis of how this is working but that

2110
01:23:58,238 --> 01:24:03,839
is far from final right um does that

2111
01:24:00,880 --> 01:24:03,840
make sense

2112
01:24:13,279 --> 01:24:18,399
yeah it's a it's a bit weird because the

2113
01:24:16,158 --> 01:24:20,799
outside there's a loop outside here over

2114
01:24:18,399 --> 01:24:22,799
eight things and a loop inside here over

2115
01:24:20,800 --> 01:24:25,600
eight things and what's actually

2116
01:24:22,800 --> 01:24:27,119
happening is the stride here

2117
01:24:25,600 --> 01:24:28,840
is

2118
01:24:27,119 --> 01:24:32,158
is getting picked up by

2119
01:24:28,840 --> 01:24:32,159
this um

2120
01:24:34,719 --> 01:24:38,319
and this might this part might be wrong

2121
01:24:37,439 --> 01:24:40,158
um

2122
01:24:38,319 --> 01:24:43,880
right here

2123
01:24:40,158 --> 01:24:43,879
let me think about that

2124
01:24:44,800 --> 01:24:48,480
no i think that's right so so basically

2125
01:24:47,039 --> 01:24:50,560
what you're doing right is you're saying

2126
01:24:48,479 --> 01:24:52,559
here's the sample direction table it was

2127
01:24:50,560 --> 01:24:54,159
built basically wrong because it was

2128
01:24:52,560 --> 01:24:55,679
built for the old way we were looping

2129
01:24:54,158 --> 01:24:57,839
over these but we don't really want to

2130
01:24:55,679 --> 01:24:59,760
go change that right now i mean we could

2131
01:24:57,840 --> 01:25:01,760
but you know we didn't so we're still

2132
01:24:59,760 --> 01:25:03,039
using the same lookup and the old lookup

2133
01:25:01,760 --> 01:25:06,079
used to be

2134
01:25:03,039 --> 01:25:09,840
you would loop over all the sys and all

2135
01:25:06,079 --> 01:25:13,198
the sx's so it was an sy sx loop

2136
01:25:09,840 --> 01:25:16,159
for one octahedron which is 64 things

2137
01:25:13,198 --> 01:25:19,119
what we're doing now is taking one sl

2138
01:25:16,158 --> 01:25:21,679
one octahedron which is 64 things going

2139
01:25:19,119 --> 01:25:24,479
into a random row of it based on what

2140
01:25:21,679 --> 01:25:26,560
the outside loop tells us to do and then

2141
01:25:24,479 --> 01:25:29,119
going over eight of those so we're

2142
01:25:26,560 --> 01:25:30,800
effectively like doing eight and then

2143
01:25:29,119 --> 01:25:33,279
skipping

2144
01:25:30,800 --> 01:25:35,279
64 minus eight like we're going 64

2145
01:25:33,279 --> 01:25:37,359
forward after having done eight in that

2146
01:25:35,279 --> 01:25:39,840
location going so far forward and doing

2147
01:25:37,359 --> 01:25:40,880
eight there does that make sense and the

2148
01:25:39,840 --> 01:25:43,119
reason we're doing that is because the

2149
01:25:40,880 --> 01:25:46,560
table was made for the other the table

2150
01:25:43,119 --> 01:25:48,158
was made for octahedral index being the

2151
01:25:46,560 --> 01:25:50,639
outer index

2152
01:25:48,158 --> 01:25:53,679
sy being the middle index and sx being

2153
01:25:50,639 --> 01:25:55,760
the interior index and we flipped

2154
01:25:53,679 --> 01:25:58,000
sy and octahedron now we're doing all

2155
01:25:55,760 --> 01:25:58,960
the octahedrons for one sy

2156
01:25:58,000 --> 01:26:01,279
right

2157
01:25:58,960 --> 01:26:02,719
so if we built the table now and like i

2158
01:26:01,279 --> 01:26:04,559
said when i when we went over this code

2159
01:26:02,719 --> 01:26:06,719
actually said this and i mean it we

2160
01:26:04,560 --> 01:26:08,960
should rebuild the table to actually be

2161
01:26:06,719 --> 01:26:12,239
in the other order where

2162
01:26:08,960 --> 01:26:15,359
s y and uh sx

2163
01:26:12,238 --> 01:26:16,399
octahedralines are sorted so that we go

2164
01:26:15,359 --> 01:26:17,839
s y

2165
01:26:16,399 --> 01:26:18,799
first

2166
01:26:17,840 --> 01:26:21,039
then

2167
01:26:18,800 --> 01:26:25,039
octahedron then

2168
01:26:21,039 --> 01:26:27,840
sx that's the actual order we want right

2169
01:26:25,039 --> 01:26:28,880
um because we update rows of the map at

2170
01:26:27,840 --> 01:26:31,199
a time

2171
01:26:28,880 --> 01:26:33,279
and then inside the rows of the map we

2172
01:26:31,198 --> 01:26:34,399
want to cast lots of rays for each

2173
01:26:33,279 --> 01:26:37,039
column

2174
01:26:34,399 --> 01:26:39,519
and we weren't set up to do that before

2175
01:26:37,039 --> 01:26:42,639
hopefully that explains a little bit

2176
01:26:39,520 --> 01:26:45,520
does it um

2177
01:26:42,639 --> 01:26:45,520
about how this is working

2178
01:26:49,439 --> 01:26:54,000
yeah it's it's non-intuitive

2179
01:26:51,600 --> 01:26:55,600
specifically because the table was built

2180
01:26:54,000 --> 01:26:57,840
for the old way of doing it and we are

2181
01:26:55,600 --> 01:26:58,960
trying to not update the table right now

2182
01:26:57,840 --> 01:27:01,520
but

2183
01:26:58,960 --> 01:27:03,600
this is not how you want it to look you

2184
01:27:01,520 --> 01:27:05,360
want it to look the way you were just

2185
01:27:03,600 --> 01:27:08,079
saying so the reason that they don't

2186
01:27:05,359 --> 01:27:10,238
match up is very specifically because

2187
01:27:08,079 --> 01:27:12,479
of that weirdness right

2188
01:27:10,238 --> 01:27:14,000
so

2189
01:27:12,479 --> 01:27:15,519
so anyway

2190
01:27:14,000 --> 01:27:17,520
uh

2191
01:27:15,520 --> 01:27:18,880
unfortunately i mean unfortunately i

2192
01:27:17,520 --> 01:27:21,280
think this is probably still correct

2193
01:27:18,880 --> 01:27:22,560
though right um i would like it to be

2194
01:27:21,279 --> 01:27:23,599
wrong because then it would just be like

2195
01:27:22,560 --> 01:27:24,960
something that maybe would cause the

2196
01:27:23,600 --> 01:27:26,719
problem but i don't actually think it's

2197
01:27:24,960 --> 01:27:29,520
wrong right now but but hold that

2198
01:27:26,719 --> 01:27:32,399
thought because again

2199
01:27:29,520 --> 01:27:34,719
we have not really done a good pass over

2200
01:27:32,399 --> 01:27:36,479
this to make sure that that's true so it

2201
01:27:34,719 --> 01:27:38,079
still could just be wrong i just gave

2202
01:27:36,479 --> 01:27:39,759
you the explanation of why i think it's

2203
01:27:38,079 --> 01:27:41,760
right at the moment but that could just

2204
01:27:39,760 --> 01:27:44,159
be complete bs and when we actually look

2205
01:27:41,760 --> 01:27:47,679
a little bit closer we'll find that in

2206
01:27:44,158 --> 01:27:48,638
fact actually no right

2207
01:27:47,679 --> 01:27:52,079
all right

2208
01:27:48,639 --> 01:27:55,440
so uh getting back to the raycast itself

2209
01:27:52,079 --> 01:27:57,519
i think what we want to do now is try to

2210
01:27:55,439 --> 01:27:59,359
actually get some kind of verification

2211
01:27:57,520 --> 01:28:01,360
that the raycast is working at all

2212
01:27:59,359 --> 01:28:02,639
because it's entirely possible that when

2213
01:28:01,359 --> 01:28:04,559
we

2214
01:28:02,639 --> 01:28:06,480
change the computation of the walk table

2215
01:28:04,560 --> 01:28:07,840
let's say then we just completely broke

2216
01:28:06,479 --> 01:28:09,839
it like it could be that the raycasting

2217
01:28:07,840 --> 01:28:11,600
is just not working anymore one of the

2218
01:28:09,840 --> 01:28:14,319
problems with some of the lighting

2219
01:28:11,600 --> 01:28:15,760
is it's really hard to see errors like

2220
01:28:14,319 --> 01:28:17,119
when we're looking at it

2221
01:28:15,760 --> 01:28:19,360
we can see that

2222
01:28:17,119 --> 01:28:21,198
that it's probably not right but it's

2223
01:28:19,359 --> 01:28:22,799
just such a subtle like lighting is such

2224
01:28:21,198 --> 01:28:25,359
a subtle thing

2225
01:28:22,800 --> 01:28:26,960
that although we can tell it's probably

2226
01:28:25,359 --> 01:28:29,519
not perfect

2227
01:28:26,960 --> 01:28:30,399
we can't tell how it's broken we just

2228
01:28:29,520 --> 01:28:32,719
kind of

2229
01:28:30,399 --> 01:28:33,839
see that it doesn't quite look right but

2230
01:28:32,719 --> 01:28:35,279
it's like

2231
01:28:33,840 --> 01:28:36,719
your brain doesn't have a lot of

2232
01:28:35,279 --> 01:28:38,719
intuition when it looks at something

2233
01:28:36,719 --> 01:28:41,198
like lighting unless it's just

2234
01:28:38,719 --> 01:28:43,039
completely bonkers where you just get

2235
01:28:41,198 --> 01:28:44,399
complete nonsense

2236
01:28:43,039 --> 01:28:46,158
and your brain's like oh like there's

2237
01:28:44,399 --> 01:28:47,759
nands in there or something right you

2238
01:28:46,158 --> 01:28:49,039
know what i mean

2239
01:28:47,760 --> 01:28:50,320
um

2240
01:28:49,039 --> 01:28:52,880
when you get to this point where you're

2241
01:28:50,319 --> 01:28:55,198
like well it's probably not working but

2242
01:28:52,880 --> 01:28:58,079
it kind of still does look like lighting

2243
01:28:55,198 --> 01:28:59,599
the problem we have is

2244
01:28:58,079 --> 01:29:00,800
you you're just nothing's going to jump

2245
01:28:59,600 --> 01:29:02,079
out at you right like you're not going

2246
01:29:00,800 --> 01:29:04,000
to look at something you're like oh it's

2247
01:29:02,079 --> 01:29:06,158
probably x right

2248
01:29:04,000 --> 01:29:08,319
so we need to do now is kind of go into

2249
01:29:06,158 --> 01:29:11,198
a more detailed analysis of like maybe

2250
01:29:08,319 --> 01:29:13,759
some test cases like pick some isolated

2251
01:29:11,198 --> 01:29:16,158
particular places to cast rays from and

2252
01:29:13,760 --> 01:29:17,679
see what the raycast result does

2253
01:29:16,158 --> 01:29:20,238
because we probably just have some

2254
01:29:17,679 --> 01:29:22,719
fundamental bug in like the raycast

2255
01:29:20,238 --> 01:29:25,359
right where we're we're actually just

2256
01:29:22,719 --> 01:29:27,679
you know stepping through the grid wrong

2257
01:29:25,359 --> 01:29:29,759
so that rays are fairly arbitrary and

2258
01:29:27,679 --> 01:29:31,199
incoherent or something like this we

2259
01:29:29,760 --> 01:29:33,119
probably have something going on like

2260
01:29:31,198 --> 01:29:35,599
that and so if we have something going

2261
01:29:33,119 --> 01:29:38,079
on like that that helps us understand

2262
01:29:35,600 --> 01:29:39,520
what the heck um

2263
01:29:38,079 --> 01:29:42,479
it will help us understand what the heck

2264
01:29:39,520 --> 01:29:46,159
is going on by isolating some cases what

2265
01:29:42,479 --> 01:29:47,919
i would like to do um at the moment is

2266
01:29:46,158 --> 01:29:50,559
ask the question

2267
01:29:47,920 --> 01:29:53,840
what the heck is going on in here right

2268
01:29:50,560 --> 01:29:53,840
uh so

2269
01:29:54,800 --> 01:29:57,760
so this part

2270
01:30:01,520 --> 01:30:07,840
i mean you can see some some oddity

2271
01:30:04,319 --> 01:30:07,840
you can see some oddity here

2272
01:30:08,560 --> 01:30:13,280
this code when we do full cast

2273
01:30:12,079 --> 01:30:15,119
is

2274
01:30:13,279 --> 01:30:16,238
basically saying

2275
01:30:15,119 --> 01:30:18,960
all right

2276
01:30:16,238 --> 01:30:19,759
find out if you are inside if one of

2277
01:30:18,960 --> 01:30:21,520
these

2278
01:30:19,760 --> 01:30:23,440
lighting nodes

2279
01:30:21,520 --> 01:30:24,320
is inside

2280
01:30:23,439 --> 01:30:26,000
a

2281
01:30:24,319 --> 01:30:29,920
a

2282
01:30:26,000 --> 01:30:29,920
leaf of the spatial partition

2283
01:30:30,158 --> 01:30:35,359
and it looks like what we do in that

2284
01:30:31,840 --> 01:30:39,119
case is actually not to write black into

2285
01:30:35,359 --> 01:30:42,559
it but to actually write nothing into it

2286
01:30:39,119 --> 01:30:44,319
and so that means that the thing that i

2287
01:30:42,560 --> 01:30:46,960
saw when i was like hopping along and i

2288
01:30:44,319 --> 01:30:49,599
was like oh that seems wrong

2289
01:30:46,960 --> 01:30:51,600
actually the thing that was wrong is the

2290
01:30:49,600 --> 01:30:53,120
thing i thought was right meaning when

2291
01:30:51,600 --> 01:30:54,800
we hopped over something and it did

2292
01:30:53,119 --> 01:30:56,238
change to black that actually is the

2293
01:30:54,800 --> 01:30:58,079
thing that doesn't make sense because

2294
01:30:56,238 --> 01:31:00,399
according to this we don't update those

2295
01:30:58,079 --> 01:31:02,399
values they just stay the same

2296
01:31:00,399 --> 01:31:04,879
so i think the first thing i might

2297
01:31:02,399 --> 01:31:07,119
suggest

2298
01:31:04,880 --> 01:31:10,239
is if we look at how this code works uh

2299
01:31:07,119 --> 01:31:12,719
in the sy iterator for uh

2300
01:31:10,238 --> 01:31:15,279
writing these textuals

2301
01:31:12,719 --> 01:31:16,719
i might add something here that the

2302
01:31:15,279 --> 01:31:18,639
moment will just be for debug but

2303
01:31:16,719 --> 01:31:20,239
eventually we'll want to actually do

2304
01:31:18,639 --> 01:31:22,960
something here

2305
01:31:20,238 --> 01:31:25,759
where we loop over these spec texels and

2306
01:31:22,960 --> 01:31:30,158
you can see here us like doing a write a

2307
01:31:25,760 --> 01:31:34,800
read modify write on the spec texels

2308
01:31:30,158 --> 01:31:36,638
what i want to do here is to just say

2309
01:31:34,800 --> 01:31:38,320
maybe we

2310
01:31:36,639 --> 01:31:41,719
are going to just write

2311
01:31:38,319 --> 01:31:41,719
like black

2312
01:31:44,719 --> 01:31:49,600
so here you know eventually

2313
01:31:47,279 --> 01:31:51,279
we will uh or you know what we could

2314
01:31:49,600 --> 01:31:52,800
even do something fancier than that we

2315
01:31:51,279 --> 01:31:56,719
could write

2316
01:31:52,800 --> 01:31:56,719
magenta right um

2317
01:31:57,520 --> 01:32:01,600
let me take a look at our

2318
01:31:59,359 --> 01:32:03,519
uh

2319
01:32:01,600 --> 01:32:07,920
on our sim decode here

2320
01:32:03,520 --> 01:32:07,920
i assume we have something for loads yet

2321
01:32:10,479 --> 01:32:15,759
so let's let's do a magenta thing

2322
01:32:13,439 --> 01:32:15,759
right

2323
01:32:23,439 --> 01:32:26,719
if we wanted to write out magenta to

2324
01:32:25,119 --> 01:32:29,359
each of these slots it's a little bit

2325
01:32:26,719 --> 01:32:31,119
squeaky uh the way that that works

2326
01:32:29,359 --> 01:32:33,519
because they're they're

2327
01:32:31,119 --> 01:32:34,399
we're writing out

2328
01:32:33,520 --> 01:32:36,480
4

2329
01:32:34,399 --> 01:32:37,279
times 6 24

2330
01:32:36,479 --> 01:32:39,439
right

2331
01:32:37,279 --> 01:32:40,960
we're writing out 24 but it's actually

2332
01:32:39,439 --> 01:32:42,079
three times eight

2333
01:32:40,960 --> 01:32:44,800
so it's

2334
01:32:42,079 --> 01:32:46,079
first color goes here second color spans

2335
01:32:44,800 --> 01:32:48,320
these two

2336
01:32:46,079 --> 01:32:48,319
right

2337
01:32:48,800 --> 01:32:52,880
makes sense then we're uh

2338
01:32:52,000 --> 01:32:55,840
back

2339
01:32:52,880 --> 01:32:58,000
here

2340
01:32:55,840 --> 01:32:58,880
uh and that's one pack

2341
01:32:58,000 --> 01:33:00,399
right

2342
01:32:58,880 --> 01:33:03,119
so it's

2343
01:33:00,399 --> 01:33:04,238
color a you know color zero

2344
01:33:03,119 --> 01:33:05,119
color

2345
01:33:04,238 --> 01:33:06,638
one

2346
01:33:05,119 --> 01:33:09,599
color two

2347
01:33:06,639 --> 01:33:10,480
color three for a pack of four

2348
01:33:09,600 --> 01:33:12,320
um

2349
01:33:10,479 --> 01:33:14,559
and then it just repeats again so i can

2350
01:33:12,319 --> 01:33:17,599
actually just use the same pattern

2351
01:33:14,560 --> 01:33:21,840
uh but this will just cold right magenta

2352
01:33:17,600 --> 01:33:24,960
to directly into these slots

2353
01:33:21,840 --> 01:33:24,960
for the spec texel

2354
01:33:25,198 --> 01:33:27,599
and

2355
01:33:29,920 --> 01:33:34,880
that will let us see what we actually

2356
01:33:32,399 --> 01:33:36,799
think is interior and what we don't so

2357
01:33:34,880 --> 01:33:38,880
when we run this

2358
01:33:36,800 --> 01:33:40,639
right

2359
01:33:38,880 --> 01:33:42,880
here is our purple

2360
01:33:40,639 --> 01:33:46,239
magic purple set

2361
01:33:42,880 --> 01:33:48,560
um and what you can see here is actually

2362
01:33:46,238 --> 01:33:50,479
that's just totally correct so that

2363
01:33:48,560 --> 01:33:53,120
piece of code is is

2364
01:33:50,479 --> 01:33:53,919
is definitely working right

2365
01:33:53,119 --> 01:33:56,559
right

2366
01:33:53,920 --> 01:33:59,039
so that thing we saw where it was going

2367
01:33:56,560 --> 01:34:01,520
to black before was like another bug

2368
01:33:59,039 --> 01:34:03,760
right that's like another buggy thing

2369
01:34:01,520 --> 01:34:06,080
um that's happening there i also

2370
01:34:03,760 --> 01:34:08,159
this weird like strobing effect that you

2371
01:34:06,079 --> 01:34:10,238
see there that should really not be

2372
01:34:08,158 --> 01:34:12,399
occurring so that

2373
01:34:10,238 --> 01:34:14,079
that also feels like our copy is busted

2374
01:34:12,399 --> 01:34:15,839
like we've got a lot of broken stuff

2375
01:34:14,079 --> 01:34:17,600
right so i think it's

2376
01:34:15,840 --> 01:34:19,920
this is actually not that bad it just

2377
01:34:17,600 --> 01:34:21,840
means that when we did this sort of like

2378
01:34:19,920 --> 01:34:23,440
adjustment we definitely broke stuff

2379
01:34:21,840 --> 01:34:25,039
just like we thought we would

2380
01:34:23,439 --> 01:34:26,960
and hopefully as we work through it and

2381
01:34:25,039 --> 01:34:28,639
remove those bugs that that'll be the

2382
01:34:26,960 --> 01:34:30,719
end of it right it'll just be

2383
01:34:28,639 --> 01:34:34,000
it'll be correct so you can kind of see

2384
01:34:30,719 --> 01:34:35,520
the what's happening um

2385
01:34:34,000 --> 01:34:37,279
here

2386
01:34:35,520 --> 01:34:38,639
this looks like we kind of had a bug in

2387
01:34:37,279 --> 01:34:40,000
general that we didn't know about

2388
01:34:38,639 --> 01:34:41,679
originally in our lighting code though

2389
01:34:40,000 --> 01:34:44,079
we never really thought about the fact

2390
01:34:41,679 --> 01:34:46,560
that lights would fall into that uh

2391
01:34:44,079 --> 01:34:49,279
region and so we you know you can see

2392
01:34:46,560 --> 01:34:50,960
here those are the sources of light they

2393
01:34:49,279 --> 01:34:53,039
were actually getting set to black which

2394
01:34:50,960 --> 01:34:55,279
is totally wrong

2395
01:34:53,039 --> 01:34:56,719
um before i mean they wouldn't be set to

2396
01:34:55,279 --> 01:34:58,719
black but they would not be picking up

2397
01:34:56,719 --> 01:35:00,560
light from their actual local light

2398
01:34:58,719 --> 01:35:03,198
source like they should have been

2399
01:35:00,560 --> 01:35:04,880
so we we actually kind of found a bug

2400
01:35:03,198 --> 01:35:07,039
there that we never really addressed in

2401
01:35:04,880 --> 01:35:08,880
the original version as well so we'll

2402
01:35:07,039 --> 01:35:10,399
this will actually be better in that way

2403
01:35:08,880 --> 01:35:13,199
too because we'll come up with a

2404
01:35:10,399 --> 01:35:15,759
solution for that like allowing casting

2405
01:35:13,198 --> 01:35:17,839
uh allowing it to do a gather

2406
01:35:15,760 --> 01:35:22,920
um when it's inside

2407
01:35:17,840 --> 01:35:22,920
uh in some way you know or another right

2408
01:35:28,079 --> 01:35:32,479
uh on clan sweeney i totally agree with

2409
01:35:29,920 --> 01:35:32,480
that comment

2410
01:35:33,198 --> 01:35:38,000
all right uh so this is good and i think

2411
01:35:35,439 --> 01:35:40,479
i might leave this in here for now uh we

2412
01:35:38,000 --> 01:35:42,560
can turn it on and off at will so you

2413
01:35:40,479 --> 01:35:44,319
know maybe

2414
01:35:42,560 --> 01:35:46,800
while we're debugging some of the other

2415
01:35:44,319 --> 01:35:49,759
things in the lighting uh we can set

2416
01:35:46,800 --> 01:35:52,239
this uh to off if we want to

2417
01:35:49,760 --> 01:35:54,880
we can also sort of have it set to on

2418
01:35:52,238 --> 01:35:56,479
but have a choice of what happens here

2419
01:35:54,880 --> 01:35:57,319
so we can do

2420
01:35:56,479 --> 01:36:00,469
like a

2421
01:35:57,319 --> 01:36:00,469
[Music]

2422
01:36:00,639 --> 01:36:04,440
something more like this

2423
01:36:12,238 --> 01:36:16,638
where we just clear everything so

2424
01:36:14,560 --> 01:36:18,800
everything is going to go to black now

2425
01:36:16,639 --> 01:36:20,560
um which will probably be more useful

2426
01:36:18,800 --> 01:36:23,679
for debugging the lighting so it's not

2427
01:36:20,560 --> 01:36:26,159
leading to magenta bleed into everything

2428
01:36:23,679 --> 01:36:28,319
um so if we clamp the black values to

2429
01:36:26,158 --> 01:36:29,920
black now

2430
01:36:28,319 --> 01:36:31,359
and we can probably turn off the spatial

2431
01:36:29,920 --> 01:36:33,520
partition because you know maybe we'll

2432
01:36:31,359 --> 01:36:36,399
turn it on again from time to time

2433
01:36:33,520 --> 01:36:39,119
but we can more or less turn off that uh

2434
01:36:36,399 --> 01:36:40,879
rendering because at the moment

2435
01:36:39,118 --> 01:36:43,359
it looks totally that looks totally

2436
01:36:40,880 --> 01:36:45,039
right it just it appears to be

2437
01:36:43,359 --> 01:36:46,880
um

2438
01:36:45,039 --> 01:36:51,639
where's our octahedral value oh i'm in

2439
01:36:46,880 --> 01:36:51,639
the wrong piece of code there we go

2440
01:36:52,079 --> 01:36:56,639
uh

2441
01:36:53,359 --> 01:36:59,198
it looks like the spatial partition is

2442
01:36:56,639 --> 01:37:00,960
always creating the correct actual

2443
01:36:59,198 --> 01:37:02,319
partition

2444
01:37:00,960 --> 01:37:03,920
we are just looking up into it

2445
01:37:02,319 --> 01:37:05,439
incorrectly or something like that right

2446
01:37:03,920 --> 01:37:07,520
so i don't think we need to draw that at

2447
01:37:05,439 --> 01:37:10,000
the moment

2448
01:37:07,520 --> 01:37:13,440
um as far as i can tell either

2449
01:37:10,000 --> 01:37:15,679
so looking now at this

2450
01:37:13,439 --> 01:37:16,719
we should be able to now start focusing

2451
01:37:15,679 --> 01:37:18,880
on

2452
01:37:16,719 --> 01:37:20,719
yeah like exactly what you expect and

2453
01:37:18,880 --> 01:37:22,880
you can see like just looking at the

2454
01:37:20,719 --> 01:37:25,359
koosh ball display

2455
01:37:22,880 --> 01:37:27,600
you can see like

2456
01:37:25,359 --> 01:37:29,279
some pretty obvious indications that

2457
01:37:27,600 --> 01:37:31,199
things are wrong here

2458
01:37:29,279 --> 01:37:34,399
like it doesn't really make a lot of

2459
01:37:31,198 --> 01:37:35,279
sense what we're seeing in in these

2460
01:37:34,399 --> 01:37:38,559
uh

2461
01:37:35,279 --> 01:37:41,039
in these koosh balls anyway i mean

2462
01:37:38,560 --> 01:37:43,119
you wouldn't like why is there an

2463
01:37:41,039 --> 01:37:45,198
equivalent amount of light coming from

2464
01:37:43,118 --> 01:37:46,559
the left of this

2465
01:37:45,198 --> 01:37:48,799
um

2466
01:37:46,560 --> 01:37:52,000
and the right of this

2467
01:37:48,800 --> 01:37:54,239
when pretty clearly more light sources

2468
01:37:52,000 --> 01:37:56,158
are over here on this side right that

2469
01:37:54,238 --> 01:37:58,638
doesn't really make a lot of sense

2470
01:37:56,158 --> 01:37:59,839
there's no light coming from over here

2471
01:37:58,639 --> 01:38:02,880
um

2472
01:37:59,840 --> 01:38:04,560
that we know of and we similarly like we

2473
01:38:02,880 --> 01:38:06,880
have no idea what's producing this weird

2474
01:38:04,560 --> 01:38:08,800
green light out here right

2475
01:38:06,880 --> 01:38:10,800
probably something to do with

2476
01:38:08,800 --> 01:38:12,639
out of bounds fetching incorrectly or

2477
01:38:10,800 --> 01:38:13,920
something so you know we've we've got

2478
01:38:12,639 --> 01:38:15,359
issues right

2479
01:38:13,920 --> 01:38:16,399
uh and like i said that's not really a

2480
01:38:15,359 --> 01:38:18,158
bad thing

2481
01:38:16,399 --> 01:38:19,439
uh because the more pronounced they are

2482
01:38:18,158 --> 01:38:21,279
the easier they're gonna be for us to

2483
01:38:19,439 --> 01:38:23,599
know if we found them

2484
01:38:21,279 --> 01:38:26,479
you know

2485
01:38:23,600 --> 01:38:28,880
uh so all right

2486
01:38:26,479 --> 01:38:31,439
so moving on um

2487
01:38:28,880 --> 01:38:34,159
the looking at the koosh

2488
01:38:31,439 --> 01:38:35,678
uh i want to take a look at this uh at

2489
01:38:34,158 --> 01:38:36,799
the quadrant

2490
01:38:35,679 --> 01:38:39,118
stuff

2491
01:38:36,800 --> 01:38:41,199
and i want to think about

2492
01:38:39,118 --> 01:38:42,719
what we're actually seeing

2493
01:38:41,198 --> 01:38:44,479
um

2494
01:38:42,719 --> 01:38:46,639
quadrant rise so we've got this thing

2495
01:38:44,479 --> 01:38:49,439
that does a quadrant index

2496
01:38:46,639 --> 01:38:49,440
right uh

2497
01:38:49,679 --> 01:38:55,440
we look up into the lighting walk table

2498
01:38:52,319 --> 01:38:58,559
and i don't actually know

2499
01:38:55,439 --> 01:39:01,439
uh where we where we actually compute

2500
01:38:58,560 --> 01:39:03,840
that or i should say allocate that

2501
01:39:01,439 --> 01:39:06,399
in here we

2502
01:39:03,840 --> 01:39:07,679
we grab you know the sample direction

2503
01:39:06,399 --> 01:39:10,679
table

2504
01:39:07,679 --> 01:39:10,679
we

2505
01:39:15,520 --> 01:39:20,480
we have the sample direction table

2506
01:39:18,238 --> 01:39:24,399
from

2507
01:39:20,479 --> 01:39:26,479
the uh from the inl file

2508
01:39:24,399 --> 01:39:28,559
it's this thing

2509
01:39:26,479 --> 01:39:30,238
uh and it's gonna be that

2510
01:39:28,560 --> 01:39:32,880
the the light sample directions for

2511
01:39:30,238 --> 01:39:35,439
octahedron right this this whole thing

2512
01:39:32,880 --> 01:39:35,440
you know what i mean

2513
01:39:36,000 --> 01:39:42,479
so we have the sample direction table

2514
01:39:38,719 --> 01:39:44,158
and we index into that based on

2515
01:39:42,479 --> 01:39:44,959
where we are

2516
01:39:44,158 --> 01:39:47,118
uh

2517
01:39:44,960 --> 01:39:48,960
which direction we're heading out of the

2518
01:39:47,118 --> 01:39:51,198
cell

2519
01:39:48,960 --> 01:39:53,039
and then interior to that

2520
01:39:51,198 --> 01:39:56,000
we have the quadrants

2521
01:39:53,039 --> 01:39:57,039
right so when we do compute walk table

2522
01:39:56,000 --> 01:39:59,198
we

2523
01:39:57,039 --> 01:40:01,840
pick these xy quadrants they used to be

2524
01:39:59,198 --> 01:40:04,638
octans now they're quadrants

2525
01:40:01,840 --> 01:40:07,920
uh because the resolution of the spatial

2526
01:40:04,639 --> 01:40:09,679
grid is half that of the actual sampling

2527
01:40:07,920 --> 01:40:11,920
of lighting because we just found that

2528
01:40:09,679 --> 01:40:13,760
we weren't having enough

2529
01:40:11,920 --> 01:40:14,880
occluders in there

2530
01:40:13,760 --> 01:40:17,119
right

2531
01:40:14,880 --> 01:40:17,118
um

2532
01:40:18,560 --> 01:40:21,560
uh

2533
01:40:23,359 --> 01:40:27,599
yes greg

2534
01:40:24,960 --> 01:40:29,920
greg inc that's exactly right um

2535
01:40:27,600 --> 01:40:33,760
another way to say it would be

2536
01:40:29,920 --> 01:40:35,600
the more blatant an error is the easier

2537
01:40:33,760 --> 01:40:38,719
it is to find

2538
01:40:35,600 --> 01:40:41,600
and so the worst thing is if you have

2539
01:40:38,719 --> 01:40:44,000
like a really subtle error one that you

2540
01:40:41,600 --> 01:40:45,520
that is causing perception like it like

2541
01:40:44,000 --> 01:40:46,319
you can see that the lighting is not

2542
01:40:45,520 --> 01:40:48,320
quite

2543
01:40:46,319 --> 01:40:50,799
as good as you think it should be but

2544
01:40:48,319 --> 01:40:53,039
but it's like you really can't find any

2545
01:40:50,800 --> 01:40:55,520
obvious reasons why like it's not like

2546
01:40:53,039 --> 01:40:58,319
oh there's blatant you know here's this

2547
01:40:55,520 --> 01:41:00,560
obviously grotesque error right

2548
01:40:58,319 --> 01:41:03,198
because it really doesn't give you any

2549
01:41:00,560 --> 01:41:04,560
idea where to look you know what i mean

2550
01:41:03,198 --> 01:41:05,439
um

2551
01:41:04,560 --> 01:41:09,119
you

2552
01:41:05,439 --> 01:41:11,599
the the more like pronounced an error is

2553
01:41:09,118 --> 01:41:14,399
the happier you usually are

2554
01:41:11,600 --> 01:41:16,320
and the more subtle or

2555
01:41:14,399 --> 01:41:20,079
rare an error is

2556
01:41:16,319 --> 01:41:24,000
the scarier it is because you're like

2557
01:41:20,079 --> 01:41:26,319
the harder it is to see this thing occur

2558
01:41:24,000 --> 01:41:27,760
the less likely i am going to be able to

2559
01:41:26,319 --> 01:41:29,759
find it right you know like it just

2560
01:41:27,760 --> 01:41:33,840
keeps getting harder and harder to track

2561
01:41:29,760 --> 01:41:33,840
the less of a trail it leaves right

2562
01:41:33,920 --> 01:41:38,399
now the bad news is

2563
01:41:36,399 --> 01:41:39,839
we probably also have subtle errors in

2564
01:41:38,399 --> 01:41:41,039
the lighting because you almost always

2565
01:41:39,840 --> 01:41:42,400
do

2566
01:41:41,039 --> 01:41:44,238
so

2567
01:41:42,399 --> 01:41:45,759
these ones that we're looking at now are

2568
01:41:44,238 --> 01:41:47,759
going to be easy ones to find and then

2569
01:41:45,760 --> 01:41:49,280
after they're gone

2570
01:41:47,760 --> 01:41:50,480
the bad news is there's probably also

2571
01:41:49,279 --> 01:41:52,639
subtle ones so

2572
01:41:50,479 --> 01:41:54,319
it's not quite the same as saying yay we

2573
01:41:52,639 --> 01:41:56,560
only have

2574
01:41:54,319 --> 01:41:57,920
you know blatant errors it's more like

2575
01:41:56,560 --> 01:41:59,920
i'm happy to be working on the blatant

2576
01:41:57,920 --> 01:42:01,840
errors now because i more or less know

2577
01:41:59,920 --> 01:42:03,760
we're going to have not so blatant ones

2578
01:42:01,840 --> 01:42:07,039
later and those are going to be bad

2579
01:42:03,760 --> 01:42:07,039
right that makes some sense

2580
01:42:11,920 --> 01:42:17,679
hopefully that like uh you know

2581
01:42:14,800 --> 01:42:21,279
clarifies that a little bit right

2582
01:42:17,679 --> 01:42:23,199
um subtle errors are the worst by far

2583
01:42:21,279 --> 01:42:24,319
by far i mean they're so bad that

2584
01:42:23,198 --> 01:42:26,559
sometimes you don't even know you have

2585
01:42:24,319 --> 01:42:27,359
them right that's the that's the real

2586
01:42:26,560 --> 01:42:30,719
thing

2587
01:42:27,359 --> 01:42:33,118
um if an error doesn't appear

2588
01:42:30,719 --> 01:42:34,800
to you like you you don't think you

2589
01:42:33,118 --> 01:42:36,479
don't even know it's there that's the

2590
01:42:34,800 --> 01:42:38,400
worst kind because then you know it

2591
01:42:36,479 --> 01:42:40,559
crops up later

2592
01:42:38,399 --> 01:42:44,879
uh on like a end user's machine or

2593
01:42:40,560 --> 01:42:47,199
something right um so it's like ah right

2594
01:42:44,880 --> 01:42:49,359
so so usually you really really hope

2595
01:42:47,198 --> 01:42:52,158
that your bugs are bad like they have

2596
01:42:49,359 --> 01:42:53,519
bad obvious effects that occur on your

2597
01:42:52,158 --> 01:42:55,839
machine

2598
01:42:53,520 --> 01:42:57,760
and in a reliable way because you have a

2599
01:42:55,840 --> 01:42:59,279
really good chance of finding those in a

2600
01:42:57,760 --> 01:43:01,199
reasonable amount of time

2601
01:42:59,279 --> 01:43:03,840
and the opposite is not true like the

2602
01:43:01,198 --> 01:43:04,638
subtle bugs

2603
01:43:03,840 --> 01:43:05,520
i

2604
01:43:04,639 --> 01:43:07,359
you know

2605
01:43:05,520 --> 01:43:09,360
where you can't really tell is the

2606
01:43:07,359 --> 01:43:10,479
lighting yeah it kind of feels like it's

2607
01:43:09,359 --> 01:43:12,960
a little wrong you know that kind of

2608
01:43:10,479 --> 01:43:14,638
stuff that's just the worst because you

2609
01:43:12,960 --> 01:43:16,800
know then you're really talking about

2610
01:43:14,639 --> 01:43:18,000
having to be extraordinarily meticulous

2611
01:43:16,800 --> 01:43:20,239
and you have to add all of this

2612
01:43:18,000 --> 01:43:23,039
infrastructure to try and like

2613
01:43:20,238 --> 01:43:25,599
okay can we you know corroborate these

2614
01:43:23,039 --> 01:43:27,600
values with some other system and you

2615
01:43:25,600 --> 01:43:29,760
know it just it becomes really difficult

2616
01:43:27,600 --> 01:43:31,520
so so you usually are very happy in

2617
01:43:29,760 --> 01:43:33,199
something like lighting anyway usually

2618
01:43:31,520 --> 01:43:35,440
very happy if something's obviously

2619
01:43:33,198 --> 01:43:38,000
wrong that's that's like a way better

2620
01:43:35,439 --> 01:43:39,519
situation than when just got that

2621
01:43:38,000 --> 01:43:42,079
sinking feeling it's like it doesn't

2622
01:43:39,520 --> 01:43:44,800
feel like it's quite right

2623
01:43:42,079 --> 01:43:47,920
a lot harder

2624
01:43:44,800 --> 01:43:50,400
anyway uh so when we do our walk table

2625
01:43:47,920 --> 01:43:52,079
computations here uh with the remainder

2626
01:43:50,399 --> 01:43:54,079
stuff i want to see if those are getting

2627
01:43:52,079 --> 01:43:55,920
computed properly

2628
01:43:54,079 --> 01:43:57,840
in the grid raycast or if i at least

2629
01:43:55,920 --> 01:43:59,039
think they are right i i want to just do

2630
01:43:57,840 --> 01:44:00,560
a quick check to see how those are

2631
01:43:59,039 --> 01:44:03,118
actually getting computed

2632
01:44:00,560 --> 01:44:03,119
so like

2633
01:44:03,679 --> 01:44:06,840
the remainder

2634
01:44:07,279 --> 01:44:13,759
is getting pushed down

2635
01:44:10,158 --> 01:44:13,759
by full cast i think

2636
01:44:20,560 --> 01:44:25,600
so basically what happens is the outer

2637
01:44:22,960 --> 01:44:27,679
code uh that calls

2638
01:44:25,600 --> 01:44:29,840
full cast

2639
01:44:27,679 --> 01:44:32,880
um

2640
01:44:29,840 --> 01:44:34,800
that code is stepping through the voxel

2641
01:44:32,880 --> 01:44:37,920
for sampling

2642
01:44:34,800 --> 01:44:39,920
and at each point in the voxel for

2643
01:44:37,920 --> 01:44:42,158
sampling

2644
01:44:39,920 --> 01:44:43,199
we know that we're in whatever quadrant

2645
01:44:42,158 --> 01:44:44,000
is like

2646
01:44:43,198 --> 01:44:46,399
the

2647
01:44:44,000 --> 01:44:49,039
you know the the truncation

2648
01:44:46,399 --> 01:44:51,599
of atlas index the the like ending of

2649
01:44:49,039 --> 01:44:52,880
the bottom bit if you will so like x is

2650
01:44:51,600 --> 01:44:55,520
like

2651
01:44:52,880 --> 01:44:57,760
uh zero quadrant one quadrant zero quad

2652
01:44:55,520 --> 01:44:59,360
one quadrant of x and y is like zero

2653
01:44:57,760 --> 01:45:01,600
quadrant one quadrant zerocoin as we

2654
01:44:59,359 --> 01:45:03,920
step through

2655
01:45:01,600 --> 01:45:06,079
so when we do

2656
01:45:03,920 --> 01:45:08,319
this

2657
01:45:06,079 --> 01:45:11,279
atlas index

2658
01:45:08,319 --> 01:45:13,759
when we pass the atlas index in here uh

2659
01:45:11,279 --> 01:45:15,759
we divide it by two to know

2660
01:45:13,760 --> 01:45:18,079
where we would be in the spatial

2661
01:45:15,760 --> 01:45:20,480
partition

2662
01:45:18,079 --> 01:45:22,559
and we are basically using the remainder

2663
01:45:20,479 --> 01:45:25,919
to know what the

2664
01:45:22,560 --> 01:45:25,920
quadrant is that we're in

2665
01:45:27,840 --> 01:45:30,480
now

2666
01:45:29,039 --> 01:45:33,039
the problem

2667
01:45:30,479 --> 01:45:35,279
with that

2668
01:45:33,039 --> 01:45:38,639
uh is that

2669
01:45:35,279 --> 01:45:40,719
we should verify

2670
01:45:38,639 --> 01:45:44,440
that it still works out to be the

2671
01:45:40,719 --> 01:45:44,439
correct partition

2672
01:45:44,560 --> 01:45:49,360
this atlas to spatial grid index offset

2673
01:45:46,880 --> 01:45:51,039
that presumably is like one one zero or

2674
01:45:49,359 --> 01:45:52,639
whatever right

2675
01:45:51,039 --> 01:45:56,679
um

2676
01:45:52,639 --> 01:45:56,679
let's find out if that's actually true

2677
01:45:58,639 --> 01:46:01,840
yeah

2678
01:46:00,158 --> 01:46:06,638
um

2679
01:46:01,840 --> 01:46:08,639
so it skips one spatial grid because in

2680
01:46:06,639 --> 01:46:10,000
you know there's an apron

2681
01:46:08,639 --> 01:46:11,440
uh in the spatial partition that

2682
01:46:10,000 --> 01:46:12,960
basically says like if you're inside

2683
01:46:11,439 --> 01:46:14,479
this apron you're

2684
01:46:12,960 --> 01:46:17,039
you're outside of where we're sampling

2685
01:46:14,479 --> 01:46:19,678
lighting so just stop your you know stop

2686
01:46:17,039 --> 01:46:20,479
your search right

2687
01:46:19,679 --> 01:46:23,118
um

2688
01:46:20,479 --> 01:46:26,079
so that offset prevents you from being

2689
01:46:23,118 --> 01:46:28,559
in the apron and the other part here

2690
01:46:26,079 --> 01:46:30,880
this half atlas index

2691
01:46:28,560 --> 01:46:33,440
uh is the part that says where you

2692
01:46:30,880 --> 01:46:34,960
actually are inside it

2693
01:46:33,439 --> 01:46:37,359
uh

2694
01:46:34,960 --> 01:46:38,880
drawing this seems good like if we

2695
01:46:37,359 --> 01:46:40,158
should probably draw the raycast to make

2696
01:46:38,880 --> 01:46:42,239
sure that it's picking the correct

2697
01:46:40,158 --> 01:46:44,638
spatial index

2698
01:46:42,238 --> 01:46:46,079
um so we'll have to test that out in a

2699
01:46:44,639 --> 01:46:48,319
second

2700
01:46:46,079 --> 01:46:50,000
uh but anyway so

2701
01:46:48,319 --> 01:46:52,079
then when we loop through here and we

2702
01:46:50,000 --> 01:46:55,800
look to see whether we're in things i

2703
01:46:52,079 --> 01:46:55,800
feel like the initial

2704
01:46:57,198 --> 01:47:01,359
like the initial grid index computation

2705
01:46:59,679 --> 01:47:03,760
so this computation

2706
01:47:01,359 --> 01:47:05,118
kind of has to be correct because if it

2707
01:47:03,760 --> 01:47:07,360
wasn't correct

2708
01:47:05,118 --> 01:47:10,960
this code wouldn't work and we kind of

2709
01:47:07,359 --> 01:47:12,158
verified that it did like if you look

2710
01:47:10,960 --> 01:47:13,198
at where

2711
01:47:12,158 --> 01:47:14,079
um

2712
01:47:13,198 --> 01:47:17,118
the

2713
01:47:14,079 --> 01:47:20,000
blacked out koosh balls are

2714
01:47:17,118 --> 01:47:23,839
they're exactly correct like i don't see

2715
01:47:20,000 --> 01:47:26,079
any error there at all period right

2716
01:47:23,840 --> 01:47:26,079
um

2717
01:47:27,520 --> 01:47:33,119
i do see errors in shifting so like this

2718
01:47:30,719 --> 01:47:35,520
that when we slide that just looks

2719
01:47:33,118 --> 01:47:38,079
totally wrong

2720
01:47:35,520 --> 01:47:41,520
those that should not be happening

2721
01:47:38,079 --> 01:47:42,880
right so our copy like when we

2722
01:47:41,520 --> 01:47:46,800
uh

2723
01:47:42,880 --> 01:47:48,719
when the lighting so this

2724
01:47:46,800 --> 01:47:50,480
that slide

2725
01:47:48,719 --> 01:47:51,359
does not work properly

2726
01:47:50,479 --> 01:47:53,359
um

2727
01:47:51,359 --> 01:47:55,759
so we definitely have to debug this

2728
01:47:53,359 --> 01:47:57,759
slide and that's fine that's just the

2729
01:47:55,760 --> 01:48:00,000
block copy operation

2730
01:47:57,760 --> 01:48:00,000
um

2731
01:48:00,399 --> 01:48:03,519
but

2732
01:48:01,359 --> 01:48:06,399
the actual spacer facial partition

2733
01:48:03,520 --> 01:48:08,239
lookup appears completely correct

2734
01:48:06,399 --> 01:48:10,719
like i don't see any indication of it

2735
01:48:08,238 --> 01:48:10,718
being wrong

2736
01:48:11,039 --> 01:48:15,840
so i think we can safely eliminate this

2737
01:48:13,679 --> 01:48:18,319
particular part where we compute the

2738
01:48:15,840 --> 01:48:20,239
initial grid index

2739
01:48:18,319 --> 01:48:22,238
that seems to be correct now is the

2740
01:48:20,238 --> 01:48:24,638
quadrant index computed correctly i

2741
01:48:22,238 --> 01:48:26,638
suppose it could be wrong

2742
01:48:24,639 --> 01:48:29,199
but we at least know that the initial

2743
01:48:26,639 --> 01:48:30,480
index isn't wrong so maybe the quadrant

2744
01:48:29,198 --> 01:48:33,759
in this could be wrong

2745
01:48:30,479 --> 01:48:37,519
i don't know um we'll have to see

2746
01:48:33,760 --> 01:48:37,520
but this part seems correct

2747
01:48:38,479 --> 01:48:43,439
all right

2748
01:48:39,679 --> 01:48:45,840
so looking into grid raycast and compute

2749
01:48:43,439 --> 01:48:47,599
walk table these have to agree because

2750
01:48:45,840 --> 01:48:49,360
basically compute walktable is just

2751
01:48:47,600 --> 01:48:50,480
precomputing what gridcast would have

2752
01:48:49,359 --> 01:48:53,279
done

2753
01:48:50,479 --> 01:48:54,799
had we figured out which steps to take

2754
01:48:53,279 --> 01:48:56,719
directly rather than building a table

2755
01:48:54,800 --> 01:48:58,840
for them

2756
01:48:56,719 --> 01:49:01,679
so when we

2757
01:48:58,840 --> 01:49:06,199
look uh

2758
01:49:01,679 --> 01:49:06,199
at how the table is laid out

2759
01:49:11,439 --> 01:49:14,439
hmm

2760
01:49:23,760 --> 01:49:26,760
um

2761
01:49:31,198 --> 01:49:35,519
i'll be completely honest i'm not really

2762
01:49:33,279 --> 01:49:38,479
sure exactly how this is working so i

2763
01:49:35,520 --> 01:49:42,480
may want to go look

2764
01:49:38,479 --> 01:49:45,919
at walk table entry here i guess well

2765
01:49:42,479 --> 01:49:48,718
okay so i guess i see what's happening

2766
01:49:45,920 --> 01:49:50,319
but i um

2767
01:49:48,719 --> 01:49:55,079
yeah so

2768
01:49:50,319 --> 01:49:55,079
this is a little bit squirrely

2769
01:49:56,800 --> 01:50:00,560
so you can kind of see how this is

2770
01:49:58,560 --> 01:50:03,280
packed in here we've got the lighting

2771
01:50:00,560 --> 01:50:05,039
table and for each of the entries into

2772
01:50:03,279 --> 01:50:07,599
the lighting table we are storing four

2773
01:50:05,039 --> 01:50:09,118
different tables one for each quadrant

2774
01:50:07,599 --> 01:50:11,440
which makes perfect sense right that's

2775
01:50:09,118 --> 01:50:12,319
fine

2776
01:50:11,439 --> 01:50:13,198
um

2777
01:50:12,319 --> 01:50:14,960
but

2778
01:50:13,198 --> 01:50:17,279
uh

2779
01:50:14,960 --> 01:50:19,279
and and you can see too here like you

2780
01:50:17,279 --> 01:50:21,920
can see why

2781
01:50:19,279 --> 01:50:23,519
it would make sense for us to compute to

2782
01:50:21,920 --> 01:50:25,279
be able to compute this on the fly which

2783
01:50:23,520 --> 01:50:28,320
we might now be able to do

2784
01:50:25,279 --> 01:50:30,399
i'm not sure how much it would cost

2785
01:50:28,319 --> 01:50:33,279
to you know we did the analysis before

2786
01:50:30,399 --> 01:50:35,198
when it was octants and in 3d but it

2787
01:50:33,279 --> 01:50:36,719
might be different now there's quadrants

2788
01:50:35,198 --> 01:50:39,439
in 2d

2789
01:50:36,719 --> 01:50:41,198
you can see why this is annoying because

2790
01:50:39,439 --> 01:50:42,879
when we actually look at what the

2791
01:50:41,198 --> 01:50:45,759
quadrants are

2792
01:50:42,880 --> 01:50:47,599
um it it limits our ability to change

2793
01:50:45,760 --> 01:50:50,159
the spatial

2794
01:50:47,599 --> 01:50:52,560
partition's relative size

2795
01:50:50,158 --> 01:50:54,638
to the uh

2796
01:50:52,560 --> 01:50:57,360
to the um

2797
01:50:54,639 --> 01:50:57,359
to the sampling

2798
01:50:59,679 --> 01:51:04,399
if it's computed on the fly

2799
01:51:02,719 --> 01:51:07,359
we don't have that problem

2800
01:51:04,399 --> 01:51:08,719
if it's pre-computed

2801
01:51:07,359 --> 01:51:11,039
if it's pre-computed we do have that

2802
01:51:08,719 --> 01:51:13,359
problem because pre-computation involves

2803
01:51:11,039 --> 01:51:16,719
storing a table the more

2804
01:51:13,359 --> 01:51:18,639
uh offsets you can be at inside the

2805
01:51:16,719 --> 01:51:22,158
spatial audition the more tables we have

2806
01:51:18,639 --> 01:51:23,840
to store you know what i'm saying

2807
01:51:22,158 --> 01:51:26,479
so i do think computing this on the fly

2808
01:51:23,840 --> 01:51:26,480
would be better

2809
01:51:28,158 --> 01:51:31,439
if we can now get away with it which

2810
01:51:29,920 --> 01:51:33,840
it's possible that we would be able to

2811
01:51:31,439 --> 01:51:36,319
because it would just be a very simple

2812
01:51:33,840 --> 01:51:40,079
we could do a very simple breslin ham

2813
01:51:36,319 --> 01:51:42,880
uh that just does xy right uh so it only

2814
01:51:40,079 --> 01:51:45,359
has to do like

2815
01:51:42,880 --> 01:51:46,840
it would be it would be branchless

2816
01:51:45,359 --> 01:51:50,399
um

2817
01:51:46,840 --> 01:51:52,960
and it's fairly simple

2818
01:51:50,399 --> 01:51:55,118
maybe the skylake can figure it out okay

2819
01:51:52,960 --> 01:51:56,960
you know we don't really don't know

2820
01:51:55,118 --> 01:51:58,639
so anyway uh i feel like we should

2821
01:51:56,960 --> 01:52:01,198
probably try that i just don't want to

2822
01:51:58,639 --> 01:52:03,599
do that yet because uh with so many bugs

2823
01:52:01,198 --> 01:52:05,039
in play we don't want to be changing yet

2824
01:52:03,599 --> 01:52:06,960
another thing so i want to first get

2825
01:52:05,039 --> 01:52:09,840
that working with the table and then

2826
01:52:06,960 --> 01:52:12,158
swap it to dynamic uh also that way we

2827
01:52:09,840 --> 01:52:13,760
can see if we take a bad speed hit for

2828
01:52:12,158 --> 01:52:15,118
switching it to dynamic

2829
01:52:13,760 --> 01:52:16,239
um

2830
01:52:15,118 --> 01:52:17,759
or maybe we could even get a speed

2831
01:52:16,238 --> 01:52:21,519
improvement now you know who knows how

2832
01:52:17,760 --> 01:52:23,520
that uh cost has has switched

2833
01:52:21,520 --> 01:52:25,440
so in here what we're effectively doing

2834
01:52:23,520 --> 01:52:28,000
is saying well there's going to be a

2835
01:52:25,439 --> 01:52:29,519
quadrant offset which we compute by just

2836
01:52:28,000 --> 01:52:31,118
looping over the four quadrants that

2837
01:52:29,520 --> 01:52:34,000
there would be

2838
01:52:31,118 --> 01:52:35,920
uh and the starting location uh puts

2839
01:52:34,000 --> 01:52:38,000
sort of a cell dimension

2840
01:52:35,920 --> 01:52:40,719
you know it puts us a quarter of a cell

2841
01:52:38,000 --> 01:52:40,719
dimension in

2842
01:52:41,279 --> 01:52:44,000
um

2843
01:52:42,079 --> 01:52:45,439
to start with and then it goes a half

2844
01:52:44,000 --> 01:52:47,840
cell dimension

2845
01:52:45,439 --> 01:52:50,079
from there

2846
01:52:47,840 --> 01:52:50,079
uh

2847
01:52:52,880 --> 01:52:56,960
i mean i that seems like that would

2848
01:52:54,960 --> 01:52:59,039
always be correct

2849
01:52:56,960 --> 01:53:02,880
and again we don't care about z anymore

2850
01:52:59,039 --> 01:53:05,198
so we're just only talking about x and y

2851
01:53:02,880 --> 01:53:05,199
um

2852
01:53:05,279 --> 01:53:10,840
so it seems like that would always be

2853
01:53:07,840 --> 01:53:10,840
proper

2854
01:53:29,520 --> 01:53:33,840
i mean that seems correct to me

2855
01:53:32,158 --> 01:53:35,198
i don't know maybe it's not

2856
01:53:33,840 --> 01:53:37,840
but anyway we go through the sample

2857
01:53:35,198 --> 01:53:38,839
directions here we pull them out and we

2858
01:53:37,840 --> 01:53:40,960
do the

2859
01:53:38,840 --> 01:53:43,199
walk um

2860
01:53:40,960 --> 01:53:45,118
we do an over complicated thing here

2861
01:53:43,198 --> 01:53:46,799
because it used to do all three

2862
01:53:45,118 --> 01:53:49,519
dimensions so you can see it kind of

2863
01:53:46,800 --> 01:53:51,840
doing more probably than it needs to

2864
01:53:49,520 --> 01:53:53,280
um

2865
01:53:51,840 --> 01:53:57,119
really in this case

2866
01:53:53,279 --> 01:53:58,960
and then uh yeah we just you can see us

2867
01:53:57,118 --> 01:54:01,359
had so we had some debug cases in here

2868
01:53:58,960 --> 01:54:02,639
we were doing before they're still here

2869
01:54:01,359 --> 01:54:03,839
um

2870
01:54:02,639 --> 01:54:05,359
we

2871
01:54:03,840 --> 01:54:07,360
pretty much just do what you would

2872
01:54:05,359 --> 01:54:09,118
expect and we choose

2873
01:54:07,359 --> 01:54:10,880
which uh

2874
01:54:09,118 --> 01:54:13,598
you know which

2875
01:54:10,880 --> 01:54:15,520
one of these we want based on whichever

2876
01:54:13,599 --> 01:54:17,520
the best dimension was you know at the

2877
01:54:15,520 --> 01:54:20,880
time this is the delta this is like

2878
01:54:17,520 --> 01:54:23,840
where how you'd step through it right

2879
01:54:20,880 --> 01:54:23,840
um

2880
01:54:38,000 --> 01:54:41,920
and i don't really see

2881
01:54:43,679 --> 01:54:46,639
i don't see anything particularly

2882
01:54:45,079 --> 01:54:49,800
suspicious

2883
01:54:46,639 --> 01:54:49,800
in here

2884
01:55:25,760 --> 01:55:29,039
yeah i can't see anything suspicious

2885
01:55:27,760 --> 01:55:33,119
like that just all looks pretty

2886
01:55:29,039 --> 01:55:34,639
reasonable right um

2887
01:55:33,118 --> 01:55:37,639
there's nothing there's nothing

2888
01:55:34,639 --> 01:55:37,639
particularly

2889
01:55:48,719 --> 01:55:54,480
so one thing that's a little odd is so

2890
01:55:50,639 --> 01:55:54,930
the way that t terminate works here

2891
01:55:54,479 --> 01:55:56,399
um

2892
01:55:54,930 --> 01:56:01,400
[Music]

2893
01:55:56,399 --> 01:56:01,399
not actually sure i understand

2894
01:56:03,198 --> 01:56:07,279
uh

2895
01:56:05,279 --> 01:56:10,880
i guess that just prevents us from

2896
01:56:07,279 --> 01:56:12,000
casting rays particularly far

2897
01:56:10,880 --> 01:56:15,000
right

2898
01:56:12,000 --> 01:56:15,000
um

2899
01:56:19,439 --> 01:56:25,079
i i don't

2900
01:56:21,279 --> 01:56:25,079
actually know

2901
01:56:34,560 --> 01:56:42,199
in grid raycast i assume we just

2902
01:56:37,760 --> 01:56:42,199
don't go further than that

2903
01:56:44,560 --> 01:56:50,159
you can see here like whenever we end

2904
01:56:48,479 --> 01:56:53,198
we just do

2905
01:56:50,158 --> 01:56:56,559
and you know this is interesting so when

2906
01:56:53,198 --> 01:56:59,279
we get to a terminator like if we cast

2907
01:56:56,560 --> 01:56:59,280
outside

2908
01:56:59,439 --> 01:57:01,759
um

2909
01:57:00,238 --> 01:57:06,319
you can see here

2910
01:57:01,760 --> 01:57:08,079
us doing the like sample out of there uh

2911
01:57:06,319 --> 01:57:09,279
that may also be part of the reason we

2912
01:57:08,079 --> 01:57:10,559
get that light leaking you'll have to

2913
01:57:09,279 --> 01:57:11,840
think about that whether this is

2914
01:57:10,560 --> 01:57:14,080
actually

2915
01:57:11,840 --> 01:57:16,480
what you want or not but

2916
01:57:14,079 --> 01:57:18,719
um either way so that t terminates just

2917
01:57:16,479 --> 01:57:20,238
there so that we do gathers if you know

2918
01:57:18,719 --> 01:57:22,880
things that are far away we don't just

2919
01:57:20,238 --> 01:57:25,919
keep casting for other forever

2920
01:57:22,880 --> 01:57:26,880
uh we do gathers on those

2921
01:57:25,920 --> 01:57:29,279
uh

2922
01:57:26,880 --> 01:57:30,400
so i guess i would say like i just don't

2923
01:57:29,279 --> 01:57:32,880
see

2924
01:57:30,399 --> 01:57:35,118
i don't see any obvious uh places in the

2925
01:57:32,880 --> 01:57:36,960
code where it's wrong so i think the the

2926
01:57:35,118 --> 01:57:39,279
thing we want to do now

2927
01:57:36,960 --> 01:57:40,960
is go in there and

2928
01:57:39,279 --> 01:57:44,000
try to draw

2929
01:57:40,960 --> 01:57:45,439
one particular raycast i don't know

2930
01:57:44,000 --> 01:57:48,719
uh

2931
01:57:45,439 --> 01:57:52,000
what the best way to pick

2932
01:57:48,719 --> 01:57:52,880
a raycast direction would be

2933
01:57:52,000 --> 01:57:55,439
but

2934
01:57:52,880 --> 01:57:55,440
you know

2935
01:57:55,599 --> 01:57:58,480
at startup

2936
01:58:05,840 --> 01:58:09,520
at startup i would say

2937
01:58:08,319 --> 01:58:13,118
you know

2938
01:58:09,520 --> 01:58:14,320
this seems kind of implausible anyway

2939
01:58:13,118 --> 01:58:15,920
probably

2940
01:58:14,319 --> 01:58:18,319
um

2941
01:58:15,920 --> 01:58:21,359
you know i think we could probably just

2942
01:58:18,319 --> 01:58:23,198
do at startup we could do a cast

2943
01:58:21,359 --> 01:58:25,279
and we'll pick one that happens to be

2944
01:58:23,198 --> 01:58:28,479
close to the hero or something and just

2945
01:58:25,279 --> 01:58:31,279
look at what it looks like because

2946
01:58:28,479 --> 01:58:32,879
most of the area seems wrong like most

2947
01:58:31,279 --> 01:58:34,399
of the lighting seems sort of subtly

2948
01:58:32,880 --> 01:58:37,359
wrong at least

2949
01:58:34,399 --> 01:58:39,359
so probably we can go from there let's

2950
01:58:37,359 --> 01:58:41,279
make sure before i start this that the

2951
01:58:39,359 --> 01:58:42,319
walk table stuff actually does make

2952
01:58:41,279 --> 01:58:44,079
sense

2953
01:58:42,319 --> 01:58:45,599
when you look at the light sampling walk

2954
01:58:44,079 --> 01:58:47,599
table

2955
01:58:45,599 --> 01:58:49,520
and you look up the quadrant index there

2956
01:58:47,599 --> 01:58:52,639
i wanted to see like in the lighting

2957
01:58:49,520 --> 01:58:55,520
solution itself how exactly

2958
01:58:52,639 --> 01:58:57,840
was this yeah so so this here

2959
01:58:55,520 --> 01:58:57,840
um

2960
01:58:58,560 --> 01:59:04,320
the light sampling walk table here

2961
01:59:02,079 --> 01:59:05,920
has an index value of eight it doesn't

2962
01:59:04,319 --> 01:59:07,920
need to do that anymore right it's only

2963
01:59:05,920 --> 01:59:10,158
four now

2964
01:59:07,920 --> 01:59:10,158
um

2965
01:59:15,439 --> 01:59:19,279
but other than that i mean that was just

2966
01:59:17,679 --> 01:59:21,279
extra space that's not being used other

2967
01:59:19,279 --> 01:59:23,359
than that it's fine

2968
01:59:21,279 --> 01:59:25,439
um it's exactly

2969
01:59:23,359 --> 01:59:28,079
you know it's used exact same way just

2970
01:59:25,439 --> 01:59:30,000
the the top four entries aren't used so

2971
01:59:28,079 --> 01:59:31,279
you know it doesn't actually need to be

2972
01:59:30,000 --> 01:59:32,719
there

2973
01:59:31,279 --> 01:59:34,238
um

2974
01:59:32,719 --> 01:59:36,000
and the way this is getting indexed is

2975
01:59:34,238 --> 01:59:37,919
exactly how we would expect it looks up

2976
01:59:36,000 --> 01:59:40,639
the quadrant index

2977
01:59:37,920 --> 01:59:42,880
it offsets it by whatever the walk table

2978
01:59:40,639 --> 01:59:45,920
offset thinks it should be

2979
01:59:42,880 --> 01:59:48,400
um at that point to produce the you know

2980
01:59:45,920 --> 01:59:50,079
for for this particular array direction

2981
01:59:48,399 --> 01:59:51,279
and then it just uses that walk table

2982
01:59:50,079 --> 01:59:55,079
entry

2983
01:59:51,279 --> 01:59:55,079
uh from then on

2984
02:00:00,880 --> 02:00:04,599
and that seems correct

2985
02:00:18,000 --> 02:00:22,319
so it's like we left in some of this

2986
02:00:19,599 --> 02:00:23,840
test code here as well too for like

2987
02:00:22,319 --> 02:00:25,118
things like checking boundaries so

2988
02:00:23,840 --> 02:00:26,639
that's kind of good it's not turned on

2989
02:00:25,118 --> 02:00:28,158
right now

2990
02:00:26,639 --> 02:00:30,560
but

2991
02:00:28,158 --> 02:00:33,118
that doesn't let us do some

2992
02:00:30,560 --> 02:00:34,800
some further testing so you can see here

2993
02:00:33,118 --> 02:00:36,639
like the very simple update that we're

2994
02:00:34,800 --> 02:00:39,199
doing as well

2995
02:00:36,639 --> 02:00:41,840
all seems normal

2996
02:00:39,198 --> 02:00:41,839
um

2997
02:00:52,880 --> 02:00:58,960
i guess i don't quite see how

2998
02:00:55,198 --> 02:00:58,960
t-terminate is working here

2999
02:01:03,520 --> 02:01:09,840
why is t-terminate written differently

3000
02:01:06,560 --> 02:01:09,840
per step

3001
02:01:12,880 --> 02:01:16,079
does that make any sense

3002
02:01:18,399 --> 02:01:23,279
i that that seems a little

3003
02:01:20,840 --> 02:01:25,039
weird like why do we need to update to

3004
02:01:23,279 --> 02:01:28,679
terminate per step

3005
02:01:25,039 --> 02:01:28,679
like wouldn't you just

3006
02:01:41,359 --> 02:01:44,399
i guess we're just doing that as a

3007
02:01:42,880 --> 02:01:45,760
convenience feature so that you just

3008
02:01:44,399 --> 02:01:47,439
look that up in the table so you don't

3009
02:01:45,760 --> 02:01:50,079
have to pull it yourself so when you get

3010
02:01:47,439 --> 02:01:51,678
to a terminate

3011
02:01:50,079 --> 02:01:54,479
um

3012
02:01:51,679 --> 02:01:56,239
like when cost metric drops below zero

3013
02:01:54,479 --> 02:01:59,678
you just use whatever that termination

3014
02:01:56,238 --> 02:02:03,879
position was and off you go i guess

3015
02:01:59,679 --> 02:02:03,880
how does cost metric get updated

3016
02:02:12,238 --> 02:02:16,559
interesting

3017
02:02:13,760 --> 02:02:19,760
so we actually had our cost metric

3018
02:02:16,560 --> 02:02:22,239
our cost metric is just

3019
02:02:19,760 --> 02:02:25,440
weighted by how many

3020
02:02:22,238 --> 02:02:25,439
leaves you tested

3021
02:02:26,079 --> 02:02:31,359
what an interesting dynamic condition

3022
02:02:29,679 --> 02:02:34,639
i don't know if that was really smart or

3023
02:02:31,359 --> 02:02:34,639
really weird but

3024
02:02:36,479 --> 02:02:39,879
i like it

3025
02:03:02,079 --> 02:03:05,599
so

3026
02:03:03,279 --> 02:03:07,439
that value might be

3027
02:03:05,599 --> 02:03:09,920
a bit low

3028
02:03:07,439 --> 02:03:09,919
as well

3029
02:03:10,079 --> 02:03:12,319
right

3030
02:03:12,560 --> 02:03:15,039
like

3031
02:03:13,520 --> 02:03:17,599
that's a really

3032
02:03:15,039 --> 02:03:21,679
kind of conservative value like only

3033
02:03:17,599 --> 02:03:23,360
eight squares of testing

3034
02:03:21,679 --> 02:03:24,560
um and i can see why we may have done

3035
02:03:23,359 --> 02:03:26,479
that before because we were trying to

3036
02:03:24,560 --> 02:03:28,560
optimize things but that that may also

3037
02:03:26,479 --> 02:03:31,839
just be kind of

3038
02:03:28,560 --> 02:03:31,840
not necessary right

3039
02:03:31,920 --> 02:03:34,158
um

3040
02:03:36,158 --> 02:03:38,799
so i don't know what we want to do about

3041
02:03:37,520 --> 02:03:40,560
that

3042
02:03:38,800 --> 02:03:43,119
uh i don't know how flexible we are here

3043
02:03:40,560 --> 02:03:46,000
like like if we wanted to do more than

3044
02:03:43,118 --> 02:03:46,000
that number

3045
02:03:53,920 --> 02:03:58,480
how would we feel about it

3046
02:03:56,800 --> 02:03:59,920
like it still seems pretty stable in

3047
02:03:58,479 --> 02:04:03,598
terms of frame rate so i don't think

3048
02:03:59,920 --> 02:04:05,199
that cost was too particularly bad right

3049
02:04:03,599 --> 02:04:07,440
um

3050
02:04:05,198 --> 02:04:08,799
like like it's worse right you can see

3051
02:04:07,439 --> 02:04:10,319
it's definitely worse it's more like a

3052
02:04:08,800 --> 02:04:12,480
30 frames per second but it's also

3053
02:04:10,319 --> 02:04:14,158
drawing a bunch of debug stuff

3054
02:04:12,479 --> 02:04:17,158
you know what i mean

3055
02:04:14,158 --> 02:04:17,158
um

3056
02:04:25,840 --> 02:04:29,119
we need a way of ha we probably should

3057
02:04:27,520 --> 02:04:30,800
have a thing where we we do an actual

3058
02:04:29,118 --> 02:04:32,319
test that doesn't have to do you know

3059
02:04:30,800 --> 02:04:33,440
that doesn't need debug stuff in it

3060
02:04:32,319 --> 02:04:34,479
right but

3061
02:04:33,439 --> 02:04:36,158
yeah so

3062
02:04:34,479 --> 02:04:38,000
you know that that value could stand to

3063
02:04:36,158 --> 02:04:40,158
be a lot higher and i suspect we

3064
02:04:38,000 --> 02:04:42,560
probably want it to be a lot more like

3065
02:04:40,158 --> 02:04:44,559
16 now that the lighting is pretty fast

3066
02:04:42,560 --> 02:04:46,800
because i feel like it wasn't much light

3067
02:04:44,560 --> 02:04:48,880
transport before if it's if it's only

3068
02:04:46,800 --> 02:04:51,679
doing eight i don't know it's hard to

3069
02:04:48,880 --> 02:04:53,599
say though um

3070
02:04:51,679 --> 02:04:55,039
it's good to know like i'm glad we know

3071
02:04:53,599 --> 02:04:56,960
that number is there and that we can

3072
02:04:55,039 --> 02:04:59,039
change it to something else because

3073
02:04:56,960 --> 02:05:00,399
you know we'll see but at the moment i

3074
02:04:59,039 --> 02:05:02,158
guess i would say

3075
02:05:00,399 --> 02:05:04,158
you know who knows so

3076
02:05:02,158 --> 02:05:05,759
i'm gonna put a to do in there because

3077
02:05:04,158 --> 02:05:10,399
you know

3078
02:05:05,760 --> 02:05:13,840
let's tune this value in the future

3079
02:05:10,399 --> 02:05:15,279
maybe it should be more than eight

3080
02:05:13,840 --> 02:05:16,319
um because that's pretty conservative

3081
02:05:15,279 --> 02:05:18,719
that's basically saying you're only

3082
02:05:16,319 --> 02:05:20,880
going to search through eight cells

3083
02:05:18,719 --> 02:05:22,880
and if any of those eight cells were

3084
02:05:20,880 --> 02:05:24,639
like complicated and had like two or

3085
02:05:22,880 --> 02:05:26,800
three leaves then it's even less like

3086
02:05:24,639 --> 02:05:28,719
maybe it's more like five cells that

3087
02:05:26,800 --> 02:05:30,480
you're going to search through

3088
02:05:28,719 --> 02:05:31,920
and since the gather is kind of bucket

3089
02:05:30,479 --> 02:05:34,718
brigade like it's still going to sample

3090
02:05:31,920 --> 02:05:35,109
from where the for where the ray ends

3091
02:05:34,719 --> 02:05:37,599
um

3092
02:05:35,109 --> 02:05:39,279
[Music]

3093
02:05:37,599 --> 02:05:41,279
it's not like the lighting doesn't still

3094
02:05:39,279 --> 02:05:44,158
transport over distances but it

3095
02:05:41,279 --> 02:05:46,479
transports more slowly right

3096
02:05:44,158 --> 02:05:49,039
at the on the other hand it does reduce

3097
02:05:46,479 --> 02:05:51,118
the error that's introduced in casting

3098
02:05:49,039 --> 02:05:53,039
rays particularly far because they start

3099
02:05:51,118 --> 02:05:54,799
being fairly they're not very dense in

3100
02:05:53,039 --> 02:05:56,158
terms of how they're sampled

3101
02:05:54,800 --> 02:05:57,760
so it is

3102
02:05:56,158 --> 02:05:59,920
hard to say what this correct value

3103
02:05:57,760 --> 02:06:01,360
should be maybe having it low is

3104
02:05:59,920 --> 02:06:03,279
actually good

3105
02:06:01,359 --> 02:06:05,679
it could also be that we want to stop

3106
02:06:03,279 --> 02:06:07,198
doing a cost analysis and just do a

3107
02:06:05,679 --> 02:06:08,480
distance

3108
02:06:07,198 --> 02:06:11,118
you know there's a lot of ways we want

3109
02:06:08,479 --> 02:06:12,399
to think about this so i would say we'll

3110
02:06:11,118 --> 02:06:16,118
you know want to talk about that a

3111
02:06:12,399 --> 02:06:16,118
little bit more um

3112
02:06:32,238 --> 02:06:36,879
so that's gonna need a little more work

3113
02:06:35,520 --> 02:06:39,440
for sure

3114
02:06:36,880 --> 02:06:39,440
for sure

3115
02:06:39,840 --> 02:06:42,239
okay

3116
02:06:41,359 --> 02:06:43,598
so

3117
02:06:42,238 --> 02:06:44,559
let's

3118
02:06:43,599 --> 02:06:45,289
try

3119
02:06:44,560 --> 02:06:47,039
to

3120
02:06:45,289 --> 02:06:49,198
[Music]

3121
02:06:47,039 --> 02:06:51,840
get more

3122
02:06:49,198 --> 02:06:54,638
sane here let's try to to to get a

3123
02:06:51,840 --> 02:06:55,440
little bit more in the weeds

3124
02:06:54,639 --> 02:06:57,840
so

3125
02:06:55,439 --> 02:07:00,719
when we actually do our raycast we have

3126
02:06:57,840 --> 02:07:03,199
a bunch of things that help us draw what

3127
02:07:00,719 --> 02:07:04,639
actually happens during the raycast

3128
02:07:03,198 --> 02:07:07,919
so i think what we need to do is kind of

3129
02:07:04,639 --> 02:07:07,920
re-enable those right

3130
02:07:10,238 --> 02:07:13,359
when we pass down the debugging thing

3131
02:07:12,560 --> 02:07:14,800
here

3132
02:07:13,359 --> 02:07:17,039
uh

3133
02:07:14,800 --> 02:07:19,520
we you can see us kind of doing some

3134
02:07:17,039 --> 02:07:19,519
debug

3135
02:07:19,840 --> 02:07:22,400
drawing right

3136
02:07:21,520 --> 02:07:25,840
um

3137
02:07:22,399 --> 02:07:25,839
here's us showing like

3138
02:07:26,319 --> 02:07:31,920
what we were looking at and what we were

3139
02:07:28,560 --> 02:07:31,920
con testing against

3140
02:07:32,479 --> 02:07:35,198
right

3141
02:07:33,920 --> 02:07:36,239
so

3142
02:07:35,198 --> 02:07:37,279
uh

3143
02:07:36,238 --> 02:07:40,759
yeah

3144
02:07:37,279 --> 02:07:40,759
i i guess

3145
02:07:41,599 --> 02:07:45,279
i guess we just probably want that to be

3146
02:07:43,198 --> 02:07:47,759
turned back on and i would say we

3147
02:07:45,279 --> 02:07:50,759
probably want this to be like a pound to

3148
02:07:47,760 --> 02:07:50,760
find

3149
02:07:56,800 --> 02:08:00,880
um so they don't have to like

3150
02:07:58,800 --> 02:08:03,440
go through all of these

3151
02:08:00,880 --> 02:08:04,800
conditions manually and turn them on and

3152
02:08:03,439 --> 02:08:06,719
off

3153
02:08:04,800 --> 02:08:08,960
so we probably just want to say like

3154
02:08:06,719 --> 02:08:12,960
look if we're debugging

3155
02:08:08,960 --> 02:08:15,039
um oh i forgot about this age comp

3156
02:08:12,960 --> 02:08:17,039
we yeah we do someday need to figure out

3157
02:08:15,039 --> 02:08:18,880
whether that h-comp is a good idea

3158
02:08:17,039 --> 02:08:21,880
at the moment nobody knows

3159
02:08:18,880 --> 02:08:21,880
right

3160
02:08:24,800 --> 02:08:29,119
got a lot of little like

3161
02:08:26,479 --> 02:08:33,559
notes about probable bugs in here maybe

3162
02:08:29,118 --> 02:08:33,559
our bugs are in some of those routines

3163
02:08:38,319 --> 02:08:42,158
all right

3164
02:08:39,520 --> 02:08:44,000
um now we don't really know uh which one

3165
02:08:42,158 --> 02:08:46,238
of these we want to debug but it

3166
02:08:44,000 --> 02:08:48,319
shouldn't be that hard for us to figure

3167
02:08:46,238 --> 02:08:51,319
out you know what i mean

3168
02:08:48,319 --> 02:08:51,319
um

3169
02:08:52,719 --> 02:09:00,359
we have some kind of a

3170
02:08:55,039 --> 02:09:00,359
complaint here with wrecked center damn

3171
02:09:04,800 --> 02:09:07,760
looks like there's

3172
02:09:09,520 --> 02:09:12,719
is rect center dim

3173
02:09:16,560 --> 02:09:22,560
it's two v threes

3174
02:09:19,679 --> 02:09:25,599
is probe sample piece single maybe not

3175
02:09:22,560 --> 02:09:25,599
the right kind of value

3176
02:09:30,880 --> 02:09:34,960
yeah so the problem is probe samples we

3177
02:09:33,039 --> 02:09:37,118
we updated this code now pro sample

3178
02:09:34,960 --> 02:09:38,078
piece single is is really ray origin

3179
02:09:37,118 --> 02:09:40,880
packed

3180
02:09:38,078 --> 02:09:43,880
comes in directly it looks like

3181
02:09:40,880 --> 02:09:43,880
um

3182
02:09:49,760 --> 02:09:55,440
that that puts ray origin single in

3183
02:09:52,158 --> 02:09:58,078
there so i wonder if maybe that

3184
02:09:55,439 --> 02:10:00,399
value needs to be

3185
02:09:58,078 --> 02:10:01,519
replaced with with rare origin single

3186
02:10:00,399 --> 02:10:04,479
i'm not sure

3187
02:10:01,520 --> 02:10:08,560
what it actually wants to do so

3188
02:10:04,479 --> 02:10:12,678
it's taking probe sample piece single

3189
02:10:08,560 --> 02:10:12,679
ray origin single

3190
02:10:15,039 --> 02:10:21,279
it's really just that probe sample piece

3191
02:10:17,198 --> 02:10:21,279
single so the probe sample piece single

3192
02:10:24,639 --> 02:10:28,960
looks like it it's never really single

3193
02:10:27,198 --> 02:10:30,399
anymore like we probably just didn't

3194
02:10:28,960 --> 02:10:31,679
update the name

3195
02:10:30,399 --> 02:10:35,839
right

3196
02:10:31,679 --> 02:10:35,840
but it's always computed packed

3197
02:10:36,000 --> 02:10:39,000
now

3198
02:10:47,920 --> 02:10:51,279
and you can kind of see like

3199
02:10:52,479 --> 02:10:56,519
this does the entire sample

3200
02:11:03,039 --> 02:11:09,078
you know we we compute the the

3201
02:11:05,039 --> 02:11:09,078
coordinates off of this thing

3202
02:11:21,920 --> 02:11:29,719
although to be honest i don't totally

3203
02:11:24,078 --> 02:11:29,719
understand what this is trying to do

3204
02:11:49,679 --> 02:11:53,920
like this is

3205
02:11:51,039 --> 02:11:56,238
this is wide but it's always still just

3206
02:11:53,920 --> 02:11:58,560
a scalar value like you could extract

3207
02:11:56,238 --> 02:12:01,559
any given one of these and it would work

3208
02:11:58,560 --> 02:12:01,560
right

3209
02:12:17,118 --> 02:12:23,198
so i don't know my assumption here is

3210
02:12:19,279 --> 02:12:23,198
that we can just extract this like

3211
02:12:24,639 --> 02:12:27,840
we can just do like

3212
02:12:28,560 --> 02:12:35,800
any component of probe p single

3213
02:12:31,359 --> 02:12:35,799
is what we want to draw here

3214
02:12:50,960 --> 02:12:54,960
i think

3215
02:12:52,800 --> 02:12:56,159
uh we'll find out

3216
02:12:54,960 --> 02:12:57,760
right

3217
02:12:56,158 --> 02:13:01,118
um

3218
02:12:57,760 --> 02:13:02,800
although i guess we can't

3219
02:13:01,118 --> 02:13:05,839
it's not a get component because they're

3220
02:13:02,800 --> 02:13:07,039
packed in like xyz

3221
02:13:05,840 --> 02:13:08,400
so

3222
02:13:07,039 --> 02:13:10,800
now

3223
02:13:08,399 --> 02:13:10,799
um

3224
02:13:14,560 --> 02:13:17,840
i guess we need to do

3225
02:13:28,840 --> 02:13:32,560
this makes sense

3226
02:13:34,319 --> 02:13:38,319
so we just need to turn them into sort

3227
02:13:36,560 --> 02:13:40,639
of the scalar version for use with the

3228
02:13:38,319 --> 02:13:42,799
debug routines and i think that's mostly

3229
02:13:40,639 --> 02:13:44,480
what we're talking about here

3230
02:13:42,800 --> 02:13:46,639
um

3231
02:13:44,479 --> 02:13:48,799
and this is like you know

3232
02:13:46,639 --> 02:13:51,679
actually e

3233
02:13:48,800 --> 02:13:51,679
zero one two

3234
02:13:52,000 --> 02:13:56,238
well they might be i don't really

3235
02:13:53,760 --> 02:13:59,280
remember what we how these worked out

3236
02:13:56,238 --> 02:14:01,839
yeah no it's e

3237
02:13:59,279 --> 02:14:03,599
so that's kind of a pain but you know

3238
02:14:01,840 --> 02:14:05,760
whatever it's just a piece of debug code

3239
02:14:03,599 --> 02:14:09,360
so we don't really care

3240
02:14:05,760 --> 02:14:09,360
so with debugging turned on

3241
02:14:09,760 --> 02:14:13,280
we should now be able to

3242
02:14:11,520 --> 02:14:15,440
send down

3243
02:14:13,279 --> 02:14:16,559
a request to

3244
02:14:15,439 --> 02:14:17,919
debug

3245
02:14:16,560 --> 02:14:21,119
something

3246
02:14:17,920 --> 02:14:22,800
in the grid raycast here

3247
02:14:21,118 --> 02:14:24,799
it's a little

3248
02:14:22,800 --> 02:14:26,000
difficult to

3249
02:14:24,800 --> 02:14:27,760
figure out how we're going to handle

3250
02:14:26,000 --> 02:14:28,639
this because we're doing eight rays at a

3251
02:14:27,760 --> 02:14:31,280
time

3252
02:14:28,639 --> 02:14:33,118
so which one of these is going to be the

3253
02:14:31,279 --> 02:14:35,198
one that you debug is a little bit

3254
02:14:33,118 --> 02:14:37,118
confusing

3255
02:14:35,198 --> 02:14:39,598
but presumably it just does the first

3256
02:14:37,118 --> 02:14:40,880
ray in the set

3257
02:14:39,599 --> 02:14:43,440
i guess we could try to make something

3258
02:14:40,880 --> 02:14:44,400
that allows you to select a sub ray out

3259
02:14:43,439 --> 02:14:46,638
of that

3260
02:14:44,399 --> 02:14:46,638
but

3261
02:14:50,639 --> 02:14:52,960
at the moment we'll just do the first

3262
02:14:52,000 --> 02:14:54,479
one

3263
02:14:52,960 --> 02:14:56,319
problem is it could be that the first

3264
02:14:54,479 --> 02:14:57,359
one is correct and other ones are wrong

3265
02:14:56,319 --> 02:14:59,840
because we're stepping through this

3266
02:14:57,359 --> 02:15:01,839
table incorrectly so we probably will

3267
02:14:59,840 --> 02:15:05,279
need to do something where we pick a

3268
02:15:01,840 --> 02:15:09,360
particular one right so like in here we

3269
02:15:05,279 --> 02:15:12,800
turn on debugging based on which one of

3270
02:15:09,359 --> 02:15:16,000
this like what the actual octahedral

3271
02:15:12,800 --> 02:15:18,239
sample versus you know

3272
02:15:16,000 --> 02:15:20,840
and ray sample we do one particular one

3273
02:15:18,238 --> 02:15:23,359
of those to pluck out a particular value

3274
02:15:20,840 --> 02:15:25,119
so uh you know like that might be a

3275
02:15:23,359 --> 02:15:26,559
little bit

3276
02:15:25,118 --> 02:15:27,679
uh of an issue for sure

3277
02:15:26,560 --> 02:15:30,079
[Music]

3278
02:15:27,679 --> 02:15:32,639
um but we'll see so inside full cast

3279
02:15:30,078 --> 02:15:35,840
here what we want to be able to do

3280
02:15:32,639 --> 02:15:37,118
is send down a debug value here like

3281
02:15:35,840 --> 02:15:38,639
debug true

3282
02:15:37,118 --> 02:15:41,839
at some point

3283
02:15:38,639 --> 02:15:41,840
um and

3284
02:15:43,198 --> 02:15:47,359
i guess because we know what the atlas

3285
02:15:45,520 --> 02:15:50,360
index is

3286
02:15:47,359 --> 02:15:50,359
like

3287
02:15:51,520 --> 02:15:56,400
i think this code is probably what we

3288
02:15:54,158 --> 02:15:57,519
want more or less

3289
02:15:56,399 --> 02:15:59,279
it's just

3290
02:15:57,520 --> 02:16:00,800
kind of old right so

3291
02:15:59,279 --> 02:16:03,439
if we put this

3292
02:16:00,800 --> 02:16:05,440
uh in here

3293
02:16:03,439 --> 02:16:06,559
it's really atlas index

3294
02:16:05,439 --> 02:16:08,399
x

3295
02:16:06,560 --> 02:16:11,360
atlas index y

3296
02:16:08,399 --> 02:16:13,519
and atlas index z and they want to all

3297
02:16:11,359 --> 02:16:15,920
equal something like whichever the debug

3298
02:16:13,520 --> 02:16:18,560
value is that we're looking for right so

3299
02:16:15,920 --> 02:16:22,239
it's like oh it's you know

3300
02:16:18,560 --> 02:16:23,840
it's some particular one of these

3301
02:16:22,238 --> 02:16:26,638
who knows what

3302
02:16:23,840 --> 02:16:27,520
uh and then debug this

3303
02:16:26,639 --> 02:16:29,118
gets

3304
02:16:27,520 --> 02:16:30,560
sent down

3305
02:16:29,118 --> 02:16:32,398
as

3306
02:16:30,560 --> 02:16:34,719
you know in this grid

3307
02:16:32,398 --> 02:16:37,039
raycast here or whatever

3308
02:16:34,718 --> 02:16:37,039
um

3309
02:16:38,478 --> 02:16:43,199
it looks like this one

3310
02:16:40,638 --> 02:16:44,239
you know i'm not sure why these two are

3311
02:16:43,200 --> 02:16:46,399
separate

3312
02:16:44,239 --> 02:16:48,638
maybe this was not one we actually care

3313
02:16:46,398 --> 02:16:51,279
about at the moment it's really this one

3314
02:16:48,638 --> 02:16:52,879
um that we care about right so

3315
02:16:51,280 --> 02:16:54,479
like that

3316
02:16:52,879 --> 02:16:57,039
uh

3317
02:16:54,478 --> 02:16:59,438
then when this gets called here we just

3318
02:16:57,040 --> 02:17:01,599
need to update the sy here will just be

3319
02:16:59,439 --> 02:17:04,960
let's say zero because that's the debug

3320
02:17:01,599 --> 02:17:04,960
that's the sy we're gonna debug

3321
02:17:05,359 --> 02:17:08,359
the

3322
02:17:11,439 --> 02:17:17,439
rest of this looks a little off so the

3323
02:17:14,318 --> 02:17:17,439
initial grid index

3324
02:17:17,840 --> 02:17:22,239
and then the quadrant index so basically

3325
02:17:20,000 --> 02:17:24,638
like this

3326
02:17:22,239 --> 02:17:26,879
because we changed this around

3327
02:17:24,638 --> 02:17:26,879
um

3328
02:17:27,040 --> 02:17:32,559
looks like that

3329
02:17:30,000 --> 02:17:32,558
and

3330
02:17:34,558 --> 02:17:40,398
this will allow us to do a debug pass on

3331
02:17:37,840 --> 02:17:43,519
whatever we set solution debug grid

3332
02:17:40,398 --> 02:17:46,799
index to be right

3333
02:17:43,519 --> 02:17:47,519
so in here debug grid index

3334
02:17:46,799 --> 02:17:49,840
is

3335
02:17:47,519 --> 02:17:51,040
currently set to some random thing

3336
02:17:49,840 --> 02:17:52,239
right

3337
02:17:51,040 --> 02:17:54,559
um

3338
02:17:52,239 --> 02:17:55,439
and debug ray index i don't know where

3339
02:17:54,558 --> 02:17:57,920
that

3340
02:17:55,439 --> 02:18:00,239
gets used by anybody

3341
02:17:57,920 --> 02:18:00,239
that's

3342
02:18:01,439 --> 02:18:05,120
i guess that's what tries to determine

3343
02:18:03,439 --> 02:18:07,920
which one of these we're going to do

3344
02:18:05,120 --> 02:18:09,280
yeah so these are done internal

3345
02:18:07,920 --> 02:18:11,679
right now so

3346
02:18:09,280 --> 02:18:14,079
that's kind of a problem because

3347
02:18:11,679 --> 02:18:15,760
so although this value we can pull out

3348
02:18:14,079 --> 02:18:16,638
the correct thing

3349
02:18:15,760 --> 02:18:18,079
um

3350
02:18:16,638 --> 02:18:21,759
for ty

3351
02:18:18,079 --> 02:18:23,120
tx is handled internal now so that's not

3352
02:18:21,760 --> 02:18:24,960
gonna cut it right

3353
02:18:23,120 --> 02:18:26,319
now we could pass these values down

3354
02:18:24,959 --> 02:18:27,678
which maybe is what we want to do like

3355
02:18:26,318 --> 02:18:30,239
instead of debug there's like an actual

3356
02:18:27,679 --> 02:18:32,318
debug like packet that you pass down

3357
02:18:30,239 --> 02:18:33,439
that has this information in it i don't

3358
02:18:32,318 --> 02:18:36,439
know

3359
02:18:33,439 --> 02:18:36,439
um

3360
02:18:40,558 --> 02:18:43,759
so yeah i think we may have to kind of

3361
02:18:42,000 --> 02:18:45,519
like update the way we do this a little

3362
02:18:43,760 --> 02:18:46,800
maybe we make a little debug bundle that

3363
02:18:45,519 --> 02:18:49,200
has like exactly what you're trying to

3364
02:18:46,799 --> 02:18:50,840
debug you pass that down and you go from

3365
02:18:49,200 --> 02:18:53,200
there

3366
02:18:50,840 --> 02:18:55,840
um okay

3367
02:18:53,200 --> 02:18:56,960
so so i think this maybe is not so

3368
02:18:55,840 --> 02:18:57,409
useful

3369
02:18:56,959 --> 02:19:00,000
um

3370
02:18:57,409 --> 02:19:01,359
[Music]

3371
02:19:00,000 --> 02:19:04,000
i'm gonna get rid of this because i

3372
02:19:01,359 --> 02:19:07,559
don't think we care about that anymore

3373
02:19:04,000 --> 02:19:07,558
uh yeah

3374
02:19:12,079 --> 02:19:17,840
um so this should draw a raycast i

3375
02:19:14,959 --> 02:19:20,159
believe uh and we'll see but i believe

3376
02:19:17,840 --> 02:19:21,760
it will draw one raycast

3377
02:19:20,159 --> 02:19:24,000
but we have to actually pick which one

3378
02:19:21,760 --> 02:19:25,439
we want it to be because we have no idea

3379
02:19:24,000 --> 02:19:27,439
which of these raycasts it's actually

3380
02:19:25,439 --> 02:19:29,519
going to draw

3381
02:19:27,439 --> 02:19:31,280
and maybe i will like turn off some of

3382
02:19:29,519 --> 02:19:33,200
this other debugging now just so i can

3383
02:19:31,280 --> 02:19:35,200
see it a little bit better

3384
02:19:33,200 --> 02:19:37,679
because we actually also don't know like

3385
02:19:35,200 --> 02:19:42,920
where it is at the moment so maybe i'll

3386
02:19:37,679 --> 02:19:42,920
turn off the octahedral values

3387
02:19:49,120 --> 02:19:51,359
and

3388
02:19:56,879 --> 02:20:00,478
we'll see if we can find out where

3389
02:19:58,719 --> 02:20:02,000
that's going to be also we probably

3390
02:20:00,478 --> 02:20:04,239
should try to set it maybe that there

3391
02:20:02,000 --> 02:20:05,920
aren't that many of those

3392
02:20:04,239 --> 02:20:07,199
in the world that we may have it set to

3393
02:20:05,920 --> 02:20:08,239
a value that we never actually get to

3394
02:20:07,200 --> 02:20:09,280
because we reduced the number

3395
02:20:08,239 --> 02:20:12,398
dramatically

3396
02:20:09,280 --> 02:20:14,079
when we got rid of the z slices

3397
02:20:12,398 --> 02:20:15,599
so probably the

3398
02:20:14,079 --> 02:20:16,398
the actual

3399
02:20:15,600 --> 02:20:18,640
debug

3400
02:20:16,398 --> 02:20:21,799
this is probably too high

3401
02:20:18,639 --> 02:20:21,799
in fact

3402
02:20:31,359 --> 02:20:35,840
yeah it's 24 by 16 by two

3403
02:20:34,398 --> 02:20:37,840
so like

3404
02:20:35,840 --> 02:20:39,600
um

3405
02:20:37,840 --> 02:20:41,840
if we look at how many of these there

3406
02:20:39,600 --> 02:20:42,840
actually are

3407
02:20:41,840 --> 02:20:47,120
let me

3408
02:20:42,840 --> 02:20:49,200
just launch speed crunch there

3409
02:20:47,120 --> 02:20:54,399
24 by 16 by two

3410
02:20:49,200 --> 02:20:56,079
is 768 and this is set to 717 right um

3411
02:20:54,398 --> 02:20:57,358
so it's like

3412
02:20:56,079 --> 02:20:59,439
gonna be

3413
02:20:57,359 --> 02:21:01,520
like one of the last things off in the

3414
02:20:59,439 --> 02:21:02,559
corner like up here or something like

3415
02:21:01,520 --> 02:21:04,079
that

3416
02:21:02,559 --> 02:21:05,119
um

3417
02:21:04,079 --> 02:21:07,039
so

3418
02:21:05,120 --> 02:21:08,880
you know we

3419
02:21:07,040 --> 02:21:10,000
it may even be like in an apron or

3420
02:21:08,879 --> 02:21:12,398
something so

3421
02:21:10,000 --> 02:21:13,920
let's try setting this down a little bit

3422
02:21:12,398 --> 02:21:16,000
and then let's try like you know i don't

3423
02:21:13,920 --> 02:21:17,120
know whatever this is going to be

3424
02:21:16,000 --> 02:21:19,760
um

3425
02:21:17,120 --> 02:21:20,880
and we'll set debug ray index to zero or

3426
02:21:19,760 --> 02:21:24,920
something

3427
02:21:20,879 --> 02:21:24,920
and we'll kind of go from there

3428
02:21:28,879 --> 02:21:32,398
all right

3429
02:21:30,079 --> 02:21:32,398
um

3430
02:21:33,040 --> 02:21:36,000
so i don't see it though so let's step

3431
02:21:34,639 --> 02:21:37,920
through the code and see we may just

3432
02:21:36,000 --> 02:21:39,600
never we we may have a bug where we're

3433
02:21:37,920 --> 02:21:41,760
not actually triggering that code path

3434
02:21:39,600 --> 02:21:42,960
right

3435
02:21:41,760 --> 02:21:44,880
so let's go ahead and take a look at

3436
02:21:42,959 --> 02:21:48,318
that actually also

3437
02:21:44,879 --> 02:21:50,959
the other thing i would say is

3438
02:21:48,318 --> 02:21:52,639
we probably want that grid debug

3439
02:21:50,959 --> 02:21:54,719
grid lighting thing

3440
02:21:52,639 --> 02:21:58,318
to control the

3441
02:21:54,719 --> 02:22:00,799
the outer code as well so we you know

3442
02:21:58,318 --> 02:22:03,840
in the code where we did

3443
02:22:00,799 --> 02:22:06,000
if grid raycast debugging that probably

3444
02:22:03,840 --> 02:22:08,239
wants to be like a pound defined that's

3445
02:22:06,000 --> 02:22:09,280
up at the top of the code or maybe like

3446
02:22:08,239 --> 02:22:12,719
in here

3447
02:22:09,280 --> 02:22:14,159
or something to control

3448
02:22:12,719 --> 02:22:15,199
this

3449
02:22:14,159 --> 02:22:17,439
because

3450
02:22:15,200 --> 02:22:19,840
we want that grid raycast debugging

3451
02:22:17,439 --> 02:22:22,318
control to also happen to happen

3452
02:22:19,840 --> 02:22:24,960
uniformly so that the calling code

3453
02:22:22,318 --> 02:22:27,600
enables right like this code here wants

3454
02:22:24,959 --> 02:22:29,839
to enable at the same time

3455
02:22:27,600 --> 02:22:29,840
um

3456
02:22:33,520 --> 02:22:39,680
that's my story and i'm sticking to it

3457
02:22:36,639 --> 02:22:41,279
so then uh when this code sort of does

3458
02:22:39,680 --> 02:22:42,720
its thing we should at least see this

3459
02:22:41,280 --> 02:22:44,800
stuff running so it's a bit weird that

3460
02:22:42,719 --> 02:22:46,959
we don't and i don't really know why

3461
02:22:44,799 --> 02:22:49,438
that would be so let's go ahead and set

3462
02:22:46,959 --> 02:22:53,438
it to debug mode and find out like why

3463
02:22:49,439 --> 02:22:53,439
we don't ever seem to actually get

3464
02:22:54,079 --> 02:22:58,639
uh any stepping

3465
02:22:56,799 --> 02:23:01,199
like like why are we not seeing those

3466
02:22:58,639 --> 02:23:06,398
little steps in there and i don't know

3467
02:23:01,200 --> 02:23:06,399
so in the lighting code here

3468
02:23:06,719 --> 02:23:10,478
let's make sure this is running

3469
02:23:08,000 --> 02:23:10,478
correctly

3470
02:23:12,879 --> 02:23:17,599
so here's the debug build doing whatever

3471
02:23:15,359 --> 02:23:19,920
the debug build is doing

3472
02:23:17,600 --> 02:23:22,079
and then if i go down to that code

3473
02:23:19,920 --> 02:23:24,960
inside full cast

3474
02:23:22,079 --> 02:23:27,039
which is right here

3475
02:23:24,959 --> 02:23:30,759
you know

3476
02:23:27,040 --> 02:23:30,760
does this ever run

3477
02:23:32,799 --> 02:23:34,189
so

3478
02:23:33,520 --> 02:23:37,309
solution

3479
02:23:34,190 --> 02:23:37,309
[Music]

3480
02:23:38,239 --> 02:23:43,199
debug grid index is 200

3481
02:23:41,200 --> 02:23:44,000
initial grid index here

3482
02:23:43,200 --> 02:23:46,640
like

3483
02:23:44,000 --> 02:23:49,520
just is never 200

3484
02:23:46,639 --> 02:23:49,519
is that what we're learning

3485
02:23:58,719 --> 02:24:02,559
that sure seems to be the case

3486
02:24:00,879 --> 02:24:04,159
so am i

3487
02:24:02,559 --> 02:24:06,318
when we did the light look up voxel dim

3488
02:24:04,159 --> 02:24:08,559
am i misunderstanding what the actual

3489
02:24:06,318 --> 02:24:10,799
dimensions are that we step over

3490
02:24:08,559 --> 02:24:12,079
and if so that's a pretty bad mistake on

3491
02:24:10,799 --> 02:24:13,358
my part because that means i don't

3492
02:24:12,079 --> 02:24:15,760
understand how the actual light

3493
02:24:13,359 --> 02:24:19,170
propagation code like it should be

3494
02:24:15,760 --> 02:24:22,238
stepping over those total values right

3495
02:24:19,170 --> 02:24:22,238
[Music]

3496
02:24:27,840 --> 02:24:31,280
like

3497
02:24:28,959 --> 02:24:34,079
what's the deal so let's take a look at

3498
02:24:31,280 --> 02:24:34,079
atlas index

3499
02:24:41,439 --> 02:24:46,079
so these numbers we would expect to

3500
02:24:43,439 --> 02:24:47,840
range however voxel dim has ranged which

3501
02:24:46,079 --> 02:24:50,000
is exactly what i looked up right i mean

3502
02:24:47,840 --> 02:24:51,520
the number that i did was 24 times 16

3503
02:24:50,000 --> 02:24:53,680
times two

3504
02:24:51,520 --> 02:24:55,359
right

3505
02:24:53,680 --> 02:24:57,840
um oh

3506
02:24:55,359 --> 02:24:59,280
nope i'm wrong

3507
02:24:57,840 --> 02:25:02,000
so

3508
02:24:59,280 --> 02:25:06,000
actually

3509
02:25:02,000 --> 02:25:09,120
grid index is the spatial partition and

3510
02:25:06,000 --> 02:25:11,120
the spatial partition is only half that

3511
02:25:09,120 --> 02:25:13,200
so the spatial partition is actually 12

3512
02:25:11,120 --> 02:25:14,960
times 8 times 1.

3513
02:25:13,200 --> 02:25:18,479
so there's hardly anything in the

3514
02:25:14,959 --> 02:25:20,239
spatial partition there's hardly

3515
02:25:18,478 --> 02:25:21,840
much of a spatial partition at all right

3516
02:25:20,239 --> 02:25:24,318
which is weird

3517
02:25:21,840 --> 02:25:26,478
again sort of suggests that as we've

3518
02:25:24,318 --> 02:25:27,840
collapsed this down to 2d i mean there

3519
02:25:26,478 --> 02:25:29,199
could be situations where there's lots

3520
02:25:27,840 --> 02:25:31,120
of things involved but it's starting to

3521
02:25:29,200 --> 02:25:33,520
feel like maybe

3522
02:25:31,120 --> 02:25:35,280
for this ray casting you want

3523
02:25:33,520 --> 02:25:36,880
much coarser

3524
02:25:35,280 --> 02:25:39,600
than we're using because now we're not

3525
02:25:36,879 --> 02:25:40,879
using z and blah blah so you know

3526
02:25:39,600 --> 02:25:42,960
we'll cross that bridge when we come to

3527
02:25:40,879 --> 02:25:44,639
it but

3528
02:25:42,959 --> 02:25:44,989
so all right that's fine

3529
02:25:44,639 --> 02:25:48,039
um

3530
02:25:44,989 --> 02:25:48,039
[Music]

3531
02:25:49,680 --> 02:25:53,520
oops uh

3532
02:25:51,520 --> 02:25:54,880
debug grid index

3533
02:25:53,520 --> 02:25:58,319
let's try something much more

3534
02:25:54,879 --> 02:25:58,318
conservative like 30.

3535
02:26:03,120 --> 02:26:07,040
um

3536
02:26:04,318 --> 02:26:09,600
and now we are finally in the debug code

3537
02:26:07,040 --> 02:26:11,120
thankfully so that's good news

3538
02:26:09,600 --> 02:26:11,920
and

3539
02:26:11,120 --> 02:26:14,000
yeah

3540
02:26:11,920 --> 02:26:16,318
that's just good news

3541
02:26:14,000 --> 02:26:18,000
um so now we should be able to see it uh

3542
02:26:16,318 --> 02:26:19,600
i mean hopefully i don't know if that's

3543
02:26:18,000 --> 02:26:23,439
actually true

3544
02:26:19,600 --> 02:26:26,079
but we also might want to run it in

3545
02:26:23,439 --> 02:26:26,079
in o2

3546
02:26:26,398 --> 02:26:29,760
because debug

3547
02:26:28,159 --> 02:26:31,359
builds are not fast enough for lighting

3548
02:26:29,760 --> 02:26:32,840
at the moment everything else is fast

3549
02:26:31,359 --> 02:26:35,359
enough but not

3550
02:26:32,840 --> 02:26:36,799
that uh so now we just want to figure

3551
02:26:35,359 --> 02:26:39,520
out if we can see it it looks like it's

3552
02:26:36,799 --> 02:26:42,639
now like like hey there's

3553
02:26:39,520 --> 02:26:45,520
there's the uh the debug right um where

3554
02:26:42,639 --> 02:26:46,478
it's where it's doing some casting

3555
02:26:45,520 --> 02:26:49,479
and

3556
02:26:46,478 --> 02:26:49,478
uh

3557
02:26:50,559 --> 02:26:52,959
you know

3558
02:26:54,079 --> 02:26:58,879
if i had to say

3559
02:26:55,680 --> 02:27:00,880
i would say that's pretty wrong like

3560
02:26:58,879 --> 02:27:02,318
exactly what i think is happening seems

3561
02:27:00,879 --> 02:27:03,699
to be happening which is that this code

3562
02:27:02,318 --> 02:27:04,879
is kind of busted so

3563
02:27:03,700 --> 02:27:07,439
[Music]

3564
02:27:04,879 --> 02:27:09,039
uh let's try to move this into position

3565
02:27:07,439 --> 02:27:10,800
i don't we

3566
02:27:09,040 --> 02:27:12,880
i think we actually have a weird way of

3567
02:27:10,799 --> 02:27:14,840
doing that um that we put in here that's

3568
02:27:12,879 --> 02:27:18,478
kind of ridiculous

3569
02:27:14,840 --> 02:27:18,478
um like

3570
02:27:18,719 --> 02:27:21,760
right there was like a

3571
02:27:22,639 --> 02:27:26,079
this thing

3572
02:27:24,959 --> 02:27:28,079
so

3573
02:27:26,079 --> 02:27:32,559
we can actually move it to like

3574
02:27:28,079 --> 02:27:32,559
something that's inbounds like that

3575
02:27:33,680 --> 02:27:38,559
and we can see

3576
02:27:35,280 --> 02:27:40,319
where the actual hit location is

3577
02:27:38,559 --> 02:27:42,799
i will say that

3578
02:27:40,318 --> 02:27:46,159
hit location is correct right like it

3579
02:27:42,799 --> 02:27:49,840
actually did the raycast downward and it

3580
02:27:46,159 --> 02:27:51,280
properly picked the floor right

3581
02:27:49,840 --> 02:27:53,040
so hey the good news is our debug

3582
02:27:51,280 --> 02:27:55,600
visualization is quite good actually so

3583
02:27:53,040 --> 02:27:57,280
we're still in a good position there um

3584
02:27:55,600 --> 02:27:59,439
i i'll be honest i don't actually

3585
02:27:57,280 --> 02:28:00,880
remember what the purple line is we have

3586
02:27:59,439 --> 02:28:02,800
to go look at like what that's supposed

3587
02:28:00,879 --> 02:28:04,559
to be i have no idea

3588
02:28:02,799 --> 02:28:06,000
um but let's go ahead and re-enable this

3589
02:28:04,559 --> 02:28:08,478
because this is not really going to work

3590
02:28:06,000 --> 02:28:12,639
properly now this purple line

3591
02:28:08,478 --> 02:28:15,279
um because it's it's like we don't

3592
02:28:12,639 --> 02:28:17,439
we're not properly tracking like which

3593
02:28:15,280 --> 02:28:20,079
ray we're trying to cast

3594
02:28:17,439 --> 02:28:21,760
so we should probably try to make this

3595
02:28:20,079 --> 02:28:23,520
be an actual

3596
02:28:21,760 --> 02:28:26,520
you know thing we passed down for

3597
02:28:23,520 --> 02:28:26,520
debugging

3598
02:28:26,959 --> 02:28:29,279
um

3599
02:28:29,680 --> 02:28:35,439
and to do

3600
02:28:31,840 --> 02:28:36,478
that i'm going to need

3601
02:28:35,439 --> 02:28:38,840
like

3602
02:28:36,478 --> 02:28:43,199
debug

3603
02:28:38,840 --> 02:28:46,639
ray pick something like that

3604
02:28:43,200 --> 02:28:48,240
and in debug ray pic i am going to have

3605
02:28:46,639 --> 02:28:49,358
to pass down

3606
02:28:48,239 --> 02:28:50,559
like

3607
02:28:49,359 --> 02:28:53,200
the

3608
02:28:50,559 --> 02:28:54,639
particular index i guess of which ray

3609
02:28:53,200 --> 02:28:57,439
you want

3610
02:28:54,639 --> 02:28:57,439
um although

3611
02:29:01,680 --> 02:29:05,120
yeah i don't know

3612
02:29:02,879 --> 02:29:05,119
um

3613
02:29:06,318 --> 02:29:09,439
we'll say that there's an enabled and

3614
02:29:08,398 --> 02:29:12,959
then in here there's going to be

3615
02:29:09,439 --> 02:29:14,079
something like a pic value and i'm not

3616
02:29:12,959 --> 02:29:16,478
sure

3617
02:29:14,079 --> 02:29:16,478
maybe

3618
02:29:17,439 --> 02:29:22,040
um

3619
02:29:18,318 --> 02:29:22,039
we do it like this

3620
02:29:24,719 --> 02:29:27,599
like

3621
02:29:26,000 --> 02:29:28,879
i don't know

3622
02:29:27,600 --> 02:29:30,640
um

3623
02:29:28,879 --> 02:29:34,079
where you can basically say

3624
02:29:30,639 --> 02:29:36,079
which ray out of the eight ray pack and

3625
02:29:34,079 --> 02:29:38,478
which octahedron out of the 16

3626
02:29:36,079 --> 02:29:41,439
octahedrons that could cast like which

3627
02:29:38,478 --> 02:29:44,159
one are you talking about

3628
02:29:41,439 --> 02:29:45,920
it's something

3629
02:29:44,159 --> 02:29:48,079
i don't know

3630
02:29:45,920 --> 02:29:49,120
so if we imagined doing something like

3631
02:29:48,079 --> 02:29:50,729
that

3632
02:29:49,120 --> 02:29:53,200
then um

3633
02:29:50,729 --> 02:29:56,159
[Music]

3634
02:29:53,200 --> 02:29:59,840
when we go to do grid raycast then

3635
02:29:56,159 --> 02:30:01,840
actually the debug value here is like

3636
02:29:59,840 --> 02:30:03,439
like this

3637
02:30:01,840 --> 02:30:05,359
um

3638
02:30:03,439 --> 02:30:08,559
something like that

3639
02:30:05,359 --> 02:30:10,960
uh debugging in this case equals uh

3640
02:30:08,559 --> 02:30:14,639
debug pick enabled

3641
02:30:10,959 --> 02:30:14,639
right uh something like this

3642
02:30:14,719 --> 02:30:18,639
although

3643
02:30:16,079 --> 02:30:20,879
um also i don't really know why

3644
02:30:18,639 --> 02:30:22,639
these are separate

3645
02:30:20,879 --> 02:30:24,318
that doesn't really make a lot of sense

3646
02:30:22,639 --> 02:30:25,920
they probably should be together

3647
02:30:24,318 --> 02:30:27,519
uh this probably wants to be done

3648
02:30:25,920 --> 02:30:31,200
slightly differently it probably wants

3649
02:30:27,520 --> 02:30:32,399
to be done like that and then debugging

3650
02:30:31,200 --> 02:30:34,960
is actually

3651
02:30:32,398 --> 02:30:37,439
deferred to here

3652
02:30:34,959 --> 02:30:38,478
where we actually compute this

3653
02:30:37,439 --> 02:30:39,520
value

3654
02:30:38,478 --> 02:30:42,478
as

3655
02:30:39,520 --> 02:30:43,920
something based off of the debug pick

3656
02:30:42,478 --> 02:30:46,639
per ray

3657
02:30:43,920 --> 02:30:48,159
so in here we would say it's if it's

3658
02:30:46,639 --> 02:30:51,439
enabled

3659
02:30:48,159 --> 02:30:54,398
and the octahedron index is correct

3660
02:30:51,439 --> 02:30:55,840
and the ray index is correct well then

3661
02:30:54,398 --> 02:30:57,119
you can have your debugging and in any

3662
02:30:55,840 --> 02:30:58,719
other case

3663
02:30:57,120 --> 02:31:02,479
you can't

3664
02:30:58,719 --> 02:31:04,239
so debug pick octahedron index

3665
02:31:02,478 --> 02:31:05,840
you can see i'm just peeling these off

3666
02:31:04,239 --> 02:31:07,600
one at a time

3667
02:31:05,840 --> 02:31:09,120
debug pick

3668
02:31:07,600 --> 02:31:10,960
ray index

3669
02:31:09,120 --> 02:31:13,520
um and that way now you can sort of

3670
02:31:10,959 --> 02:31:15,358
slice that off and just you know you can

3671
02:31:13,520 --> 02:31:17,760
see exactly what you wanted to have

3672
02:31:15,359 --> 02:31:17,760
happen

3673
02:31:18,159 --> 02:31:21,520
on each individual raycast

3674
02:31:20,639 --> 02:31:23,439
um

3675
02:31:21,520 --> 02:31:25,840
in the case of here we don't want any

3676
02:31:23,439 --> 02:31:28,239
debugging so we can just pass

3677
02:31:25,840 --> 02:31:29,840
the the garbage value i i think i might

3678
02:31:28,239 --> 02:31:31,039
keep it as a default parameter here

3679
02:31:29,840 --> 02:31:33,040
though because

3680
02:31:31,040 --> 02:31:34,960
we probably want it to only happen when

3681
02:31:33,040 --> 02:31:36,800
grid raycast

3682
02:31:34,959 --> 02:31:39,039
is happening in the first place so we

3683
02:31:36,799 --> 02:31:39,429
may want to do something like this

3684
02:31:39,040 --> 02:31:40,960
um

3685
02:31:39,430 --> 02:31:42,479
[Music]

3686
02:31:40,959 --> 02:31:44,000
because we don't actually want to pass a

3687
02:31:42,478 --> 02:31:46,318
value here at all

3688
02:31:44,000 --> 02:31:48,719
um if we're not you know that doesn't

3689
02:31:46,318 --> 02:31:53,680
actually need to be there right

3690
02:31:48,719 --> 02:31:53,679
so then we have this debug repeat bundle

3691
02:31:55,520 --> 02:31:59,760
and we'll pass that along and in here

3692
02:31:57,840 --> 02:32:02,000
we're just going to say you know enabled

3693
02:31:59,760 --> 02:32:05,280
is obviously true

3694
02:32:02,000 --> 02:32:06,799
um octahedral index

3695
02:32:05,280 --> 02:32:08,840
equals something

3696
02:32:06,799 --> 02:32:11,759
and ray index equals

3697
02:32:08,840 --> 02:32:13,200
something right

3698
02:32:11,760 --> 02:32:15,520
uh so

3699
02:32:13,200 --> 02:32:16,720
we can now pick out which which specific

3700
02:32:15,520 --> 02:32:18,560
one we want

3701
02:32:16,719 --> 02:32:21,840
but we have sort of this this whole

3702
02:32:18,559 --> 02:32:23,600
situation is is probably less than ideal

3703
02:32:21,840 --> 02:32:25,359
i'm assuming we would actually want here

3704
02:32:23,600 --> 02:32:27,600
is just to have the solution actually

3705
02:32:25,359 --> 02:32:28,880
pick out each of these things

3706
02:32:27,600 --> 02:32:31,120
and

3707
02:32:28,879 --> 02:32:31,119
uh

3708
02:32:34,000 --> 02:32:40,159
you know maybe we can clamp each one of

3709
02:32:36,000 --> 02:32:41,680
these right um in it in a way as well

3710
02:32:40,159 --> 02:32:43,760
i'm gonna need i'm gonna get i'm out of

3711
02:32:41,680 --> 02:32:45,600
water here uh which is not great so we

3712
02:32:43,760 --> 02:32:48,840
may wanna take a quick break and get

3713
02:32:45,600 --> 02:32:48,840
some water

3714
02:32:52,879 --> 02:32:57,438
that probably should happen

3715
02:32:55,680 --> 02:33:00,239
but whatevs

3716
02:32:57,439 --> 02:33:02,479
uh so i pretty much just need to

3717
02:33:00,239 --> 02:33:05,199
make this so that we can pick these

3718
02:33:02,478 --> 02:33:09,519
more easily and if we

3719
02:33:05,200 --> 02:33:11,200
do so so we could probably

3720
02:33:09,520 --> 02:33:13,520
just change

3721
02:33:11,200 --> 02:33:15,600
the debug pick to maybe just be a pass

3722
02:33:13,520 --> 02:33:17,680
through

3723
02:33:15,600 --> 02:33:19,760
so like maybe

3724
02:33:17,680 --> 02:33:22,479
the grid index

3725
02:33:19,760 --> 02:33:24,239
is in here as well it just gets ignored

3726
02:33:22,478 --> 02:33:25,760
inside the raycast team but otherwise

3727
02:33:24,239 --> 02:33:29,439
it's fine

3728
02:33:25,760 --> 02:33:32,398
uh and all of these are like

3729
02:33:29,439 --> 02:33:33,680
debug pic dot you know so that's like

3730
02:33:32,398 --> 02:33:36,559
debug pic

3731
02:33:33,680 --> 02:33:38,559
dot grid index right debug this this

3732
02:33:36,559 --> 02:33:40,879
that the other thing

3733
02:33:38,559 --> 02:33:40,879
um

3734
02:33:41,520 --> 02:33:45,359
that seems like it makes some sense to

3735
02:33:43,280 --> 02:33:46,239
me maybe

3736
02:33:45,359 --> 02:33:48,960
um

3737
02:33:46,239 --> 02:33:51,680
and then the t y value

3738
02:33:48,959 --> 02:33:53,759
would be one more thing on here right so

3739
02:33:51,680 --> 02:33:55,840
there's like the grid index the s y the

3740
02:33:53,760 --> 02:33:57,520
octahedron and the ray and you know each

3741
02:33:55,840 --> 02:33:58,719
one of those you could sort of

3742
02:33:57,520 --> 02:34:01,280
uh

3743
02:33:58,719 --> 02:34:03,438
adjust separately to like pick out each

3744
02:34:01,280 --> 02:34:04,800
individual piece of the problem that you

3745
02:34:03,439 --> 02:34:06,318
have right

3746
02:34:04,799 --> 02:34:08,239
so let's go ahead and implement that but

3747
02:34:06,318 --> 02:34:11,439
i would say let's take a quick break

3748
02:34:08,239 --> 02:34:14,318
and get some water maybe even a snack is

3749
02:34:11,439 --> 02:34:15,760
everyone oh cool with that

3750
02:34:14,318 --> 02:34:18,239
maybe

3751
02:34:15,760 --> 02:34:18,239
anyone

3752
02:34:20,959 --> 02:34:23,438
bueller

3753
02:34:24,239 --> 02:34:27,199
you know snack time

3754
02:34:28,559 --> 02:34:31,279
yes

3755
02:34:29,760 --> 02:34:33,680
everyone says

3756
02:34:31,280 --> 02:34:33,680
yes

3757
02:34:34,318 --> 02:34:40,398
what in sobot oh my god no in sobot

3758
02:34:38,799 --> 02:34:41,920
no

3759
02:34:40,398 --> 02:34:44,398
wrong

3760
02:34:41,920 --> 02:34:46,159
all right so snack time

3761
02:34:44,398 --> 02:34:48,239
uh

3762
02:34:46,159 --> 02:34:49,840
take five everybody

3763
02:34:48,239 --> 02:34:51,920
take five and do a snack time and we'll

3764
02:34:49,840 --> 02:34:53,439
be right back

3765
02:34:51,920 --> 02:34:56,000
no i'm not providing the snacks what do

3766
02:34:53,439 --> 02:34:58,398
you think this is google we don't have

3767
02:34:56,000 --> 02:34:59,760
12 billion dollars of snacks

3768
02:34:58,398 --> 02:35:01,760
for all of our

3769
02:34:59,760 --> 02:35:03,059
like no you got to provide your own

3770
02:35:01,760 --> 02:35:17,520
snacks

3771
02:35:03,059 --> 02:35:17,519
[Music]

3772
02:35:18,639 --> 02:35:26,998
foreign

3773
02:35:20,590 --> 02:35:26,998
[Music]

3774
02:35:30,159 --> 02:35:33,159
bye

3775
02:35:37,239 --> 02:37:01,659
[Music]

3776
02:37:01,290 --> 02:37:36,059
[Applause]

3777
02:37:01,659 --> 02:37:36,058
[Music]

3778
02:37:37,760 --> 02:37:40,760
oh

3779
02:37:46,879 --> 02:37:49,879
uh

3780
02:37:50,379 --> 02:39:39,088
[Music]

3781
02:39:36,020 --> 02:39:39,088
[Applause]

3782
02:39:40,959 --> 02:40:10,789
[Music]

3783
02:40:12,959 --> 02:40:15,959
me

3784
02:40:28,159 --> 02:40:36,498
foreign

3785
02:40:30,090 --> 02:40:36,498
[Music]

3786
02:40:39,680 --> 02:40:42,680
be

3787
02:40:46,750 --> 02:42:13,859
[Music]

3788
02:42:10,790 --> 02:42:13,859
[Applause]

3789
02:42:15,729 --> 02:42:45,558
[Music]

3790
02:42:47,279 --> 02:42:50,279
oh

3791
02:43:02,959 --> 02:43:11,228
oh

3792
02:43:04,819 --> 02:43:11,228
[Music]

3793
02:43:14,398 --> 02:43:17,398
bye

3794
02:43:21,479 --> 02:44:48,588
[Music]

3795
02:44:45,520 --> 02:44:48,588
[Applause]

3796
02:44:50,459 --> 02:45:20,289
[Music]

3797
02:45:22,000 --> 02:45:25,000
um

3798
02:45:37,680 --> 02:47:20,290
oh

3799
02:45:39,590 --> 02:47:23,359
[Music]

3800
02:47:20,290 --> 02:47:23,359
[Applause]

3801
02:47:25,260 --> 02:47:33,760
[Music]

3802
02:47:31,680 --> 02:47:35,840
all right hopefully everyone has snacked

3803
02:47:33,760 --> 02:47:35,840
up

3804
02:47:44,639 --> 02:47:48,199
everyone have their snacks

3805
02:48:00,719 --> 02:48:05,519
breakfast of champions

3806
02:48:02,559 --> 02:48:05,519
honeycomb cereal

3807
02:48:09,359 --> 02:48:13,079
i think we can all agree

3808
02:48:16,719 --> 02:48:20,639
they tried to change the formula for

3809
02:48:18,079 --> 02:48:22,079
honeycomb cereal and it was awful

3810
02:48:20,639 --> 02:48:24,079
and everyone complained so much they

3811
02:48:22,079 --> 02:48:25,520
changed it back and i was like thank god

3812
02:48:24,079 --> 02:48:26,719
because honeycomb cereal is great but

3813
02:48:25,520 --> 02:48:29,880
the new one they tried to change it to

3814
02:48:26,719 --> 02:48:29,879
is terrible

3815
02:48:30,239 --> 02:48:32,959
absolutely terrible

3816
02:48:33,760 --> 02:48:38,159
all right

3817
02:48:34,799 --> 02:48:38,159
let's do this so

3818
02:48:41,040 --> 02:48:46,319
yes choose the force

3819
02:48:42,879 --> 02:48:46,318
i still inhale it as an adult

3820
02:48:46,639 --> 02:48:50,959
that's what i'm saying

3821
02:48:48,639 --> 02:48:50,959
alright

3822
02:48:56,840 --> 02:49:00,719
so we want to be able to set these up

3823
02:48:59,359 --> 02:49:03,359
here

3824
02:49:00,719 --> 02:49:06,719
uh and now we kind of don't really need

3825
02:49:03,359 --> 02:49:06,720
to have this be

3826
02:49:06,799 --> 02:49:10,478
constructed here we can probably just

3827
02:49:08,478 --> 02:49:12,639
pass this down

3828
02:49:10,478 --> 02:49:14,318
uh directly so we can sort of do

3829
02:49:12,639 --> 02:49:16,000
something where we we check the grid

3830
02:49:14,318 --> 02:49:16,879
index here

3831
02:49:16,000 --> 02:49:17,840
and

3832
02:49:16,879 --> 02:49:21,039
then we

3833
02:49:17,840 --> 02:49:23,840
you know assuming the grid index passes

3834
02:49:21,040 --> 02:49:27,600
we just pass the the solution

3835
02:49:23,840 --> 02:49:29,920
uh debug pick down directly like so

3836
02:49:27,600 --> 02:49:33,279
and uh this

3837
02:49:29,920 --> 02:49:35,120
quadrant index value though

3838
02:49:33,279 --> 02:49:36,640
um

3839
02:49:35,120 --> 02:49:37,760
that's a little harder

3840
02:49:36,639 --> 02:49:38,840
because we need to be able to compute

3841
02:49:37,760 --> 02:49:42,159
that

3842
02:49:38,840 --> 02:49:42,159
right so

3843
02:49:42,398 --> 02:49:46,799
we probably want to make sure

3844
02:49:45,200 --> 02:49:48,319
that it's the same

3845
02:49:46,799 --> 02:49:49,438
like it should be the same quadrant

3846
02:49:48,318 --> 02:49:50,879
index that

3847
02:49:49,439 --> 02:49:52,800
whatever we computed because we're

3848
02:49:50,879 --> 02:49:54,318
checking to see we're on a particular

3849
02:49:52,799 --> 02:49:56,478
one we should use the same quadrant

3850
02:49:54,318 --> 02:49:58,719
index right

3851
02:49:56,478 --> 02:50:01,039
so i think that's okay

3852
02:49:58,719 --> 02:50:03,519
um a lot of these values we don't care

3853
02:50:01,040 --> 02:50:04,720
about right these are not relevant

3854
02:50:03,520 --> 02:50:07,720
anymore

3855
02:50:04,719 --> 02:50:07,719
so

3856
02:50:08,879 --> 02:50:14,000
like none of this stuff

3857
02:50:11,359 --> 02:50:14,000
matters at all

3858
02:50:14,799 --> 02:50:17,840
like at all at all

3859
02:50:21,439 --> 02:50:26,479
expected direction is kind of nice

3860
02:50:23,920 --> 02:50:29,600
we probably want to keep that

3861
02:50:26,478 --> 02:50:32,159
um and we still can

3862
02:50:29,600 --> 02:50:34,399
because we will know the tx and ty

3863
02:50:32,159 --> 02:50:34,398
um

3864
02:50:35,760 --> 02:50:39,760
it's basically this and maybe we want to

3865
02:50:37,439 --> 02:50:41,920
call it that so we have tx

3866
02:50:39,760 --> 02:50:43,840
nty here

3867
02:50:41,920 --> 02:50:46,159
like so

3868
02:50:43,840 --> 02:50:47,439
maybe that's just a better idea

3869
02:50:46,159 --> 02:50:49,039
um

3870
02:50:47,439 --> 02:50:51,200
and that way we can pull those values

3871
02:50:49,040 --> 02:50:53,359
out as necessary so i don't think we

3872
02:50:51,200 --> 02:50:55,120
need like any of this

3873
02:50:53,359 --> 02:51:00,159
that's just gone

3874
02:50:55,120 --> 02:51:00,160
uh but this we do want so we want to

3875
02:51:00,639 --> 02:51:05,519
do our debug pick

3876
02:51:02,318 --> 02:51:06,398
tx and rd bug pick ty

3877
02:51:05,520 --> 02:51:08,960
um

3878
02:51:06,398 --> 02:51:12,639
that seems that seems good and similarly

3879
02:51:08,959 --> 02:51:15,679
like that would get you know be that

3880
02:51:12,639 --> 02:51:17,199
we would pull it out of out of that

3881
02:51:15,680 --> 02:51:19,040
and off we go

3882
02:51:17,200 --> 02:51:20,000
so i think that's all good

3883
02:51:19,040 --> 02:51:23,359
um

3884
02:51:20,000 --> 02:51:23,359
we just have to make sure that

3885
02:51:24,478 --> 02:51:28,000
we now actually track those values so

3886
02:51:26,398 --> 02:51:29,039
instead of this stuff

3887
02:51:28,000 --> 02:51:30,398
like

3888
02:51:29,040 --> 02:51:34,000
these two things

3889
02:51:30,398 --> 02:51:34,000
we now have a debug ray pic

3890
02:51:34,398 --> 02:51:38,559
like this

3891
02:51:36,398 --> 02:51:40,239
and then in the places where we were uh

3892
02:51:38,559 --> 02:51:41,920
allowing you to edit those before we

3893
02:51:40,239 --> 02:51:44,000
need like actual thing to allow you to

3894
02:51:41,920 --> 02:51:45,279
pick them differently right

3895
02:51:44,000 --> 02:51:47,200
so

3896
02:51:45,279 --> 02:51:49,359
um i don't know what this is complaining

3897
02:51:47,200 --> 02:51:50,880
about initial greatness uh was there is

3898
02:51:49,359 --> 02:51:52,640
there no grid index in that i thought we

3899
02:51:50,879 --> 02:51:54,239
put a grid inside in there right yeah we

3900
02:51:52,639 --> 02:51:56,959
did

3901
02:51:54,239 --> 02:51:56,959
what's the problem

3902
02:51:59,359 --> 02:52:02,800
oh it's not a real 3-2 okay well that's

3903
02:52:01,359 --> 02:52:05,840
fine

3904
02:52:02,799 --> 02:52:05,840
we can fix that a second

3905
02:52:09,279 --> 02:52:12,880
that's going to be tx now

3906
02:52:13,520 --> 02:52:16,800
okay so i think we're all good

3907
02:52:20,478 --> 02:52:22,879
now we just need to make sure that all

3908
02:52:21,680 --> 02:52:26,040
this stuff

3909
02:52:22,879 --> 02:52:26,039
is reasonable

3910
02:52:28,478 --> 02:52:31,519
so we don't really know what we want all

3911
02:52:30,239 --> 02:52:32,559
this stuff to be

3912
02:52:31,520 --> 02:52:34,560
um

3913
02:52:32,559 --> 02:52:37,039
because we don't know what

3914
02:52:34,559 --> 02:52:39,278
ones we want to actually debug

3915
02:52:37,040 --> 02:52:39,279
but

3916
02:52:40,079 --> 02:52:43,039
that's

3917
02:52:41,040 --> 02:52:44,319
a question for the next thing we're

3918
02:52:43,040 --> 02:52:47,760
going to do

3919
02:52:44,318 --> 02:52:50,239
um so we should here be able to do like

3920
02:52:47,760 --> 02:52:51,760
okay solution debug pick enabled equals

3921
02:52:50,239 --> 02:52:54,879
true

3922
02:52:51,760 --> 02:52:57,120
um or maybe it's it's

3923
02:52:54,879 --> 02:53:01,039
this raycast debugging like it's enabled

3924
02:52:57,120 --> 02:53:01,040
if if we set that to one

3925
02:53:05,359 --> 02:53:07,680
i don't know what to do about this part

3926
02:53:06,719 --> 02:53:09,358
here

3927
02:53:07,680 --> 02:53:13,359
i guess we just say

3928
02:53:09,359 --> 02:53:13,359
hey we want to be able to do

3929
02:53:13,600 --> 02:53:17,359
each of these values separately so

3930
02:53:15,680 --> 02:53:21,359
there's the grid index and the

3931
02:53:17,359 --> 02:53:23,439
octahedron index the tx and the ty

3932
02:53:21,359 --> 02:53:24,479
and we want them to we want to do each

3933
02:53:23,439 --> 02:53:26,318
of them

3934
02:53:24,478 --> 02:53:28,559
so have fun

3935
02:53:26,318 --> 02:53:28,559
right

3936
02:53:30,799 --> 02:53:35,358
all right

3937
02:53:33,120 --> 02:53:35,359
so

3938
02:53:37,600 --> 02:53:42,318
i guess the first thing we can say is we

3939
02:53:40,079 --> 02:53:44,719
already know that like something's wrong

3940
02:53:42,318 --> 02:53:46,879
about this uh like like i screwed

3941
02:53:44,719 --> 02:53:48,079
something up right and it could just be

3942
02:53:46,879 --> 02:53:49,438
the debug stuff because we put it in

3943
02:53:48,079 --> 02:53:51,120
there but we noticed this right off the

3944
02:53:49,439 --> 02:53:52,880
bat when we first did it

3945
02:53:51,120 --> 02:53:54,880
so my understanding is that the ray

3946
02:53:52,879 --> 02:53:57,278
direction

3947
02:53:54,879 --> 02:53:59,599
which is that yellow line there

3948
02:53:57,279 --> 02:54:01,600
um it does seem like the ray direction

3949
02:53:59,600 --> 02:54:03,359
is sort of working in some sense meaning

3950
02:54:01,600 --> 02:54:05,520
it's going you know and it's doing some

3951
02:54:03,359 --> 02:54:07,040
kind of uh an actual ray cast there and

3952
02:54:05,520 --> 02:54:09,279
if we go

3953
02:54:07,040 --> 02:54:11,680
uh into the lighting control panel here

3954
02:54:09,279 --> 02:54:14,159
and we move the grid index around right

3955
02:54:11,680 --> 02:54:15,520
um which i guess we don't have for we

3956
02:54:14,159 --> 02:54:17,119
should probably that's why i said our

3957
02:54:15,520 --> 02:54:18,239
debug system sucks so one of the first

3958
02:54:17,120 --> 02:54:21,120
things i said was like we have to

3959
02:54:18,239 --> 02:54:22,478
improve the debug system someday

3960
02:54:21,120 --> 02:54:24,560
if we change this value to something

3961
02:54:22,478 --> 02:54:27,519
over here which i don't remember

3962
02:54:24,559 --> 02:54:27,519
what it roughly was

3963
02:54:27,760 --> 02:54:30,159
we'll have to have something that allows

3964
02:54:28,959 --> 02:54:33,119
you to

3965
02:54:30,159 --> 02:54:35,039
pick u32s easier but

3966
02:54:33,120 --> 02:54:36,240
um

3967
02:54:35,040 --> 02:54:38,080
if we make it something further over

3968
02:54:36,239 --> 02:54:39,840
there i mean it doesn't even matter you

3969
02:54:38,079 --> 02:54:42,398
can even see the error here

3970
02:54:39,840 --> 02:54:44,398
you can see that it's

3971
02:54:42,398 --> 02:54:46,478
the expected direction which i believe

3972
02:54:44,398 --> 02:54:47,278
is this um

3973
02:54:46,478 --> 02:54:50,000
that

3974
02:54:47,279 --> 02:54:51,600
line that's that's magenta

3975
02:54:50,000 --> 02:54:54,159
it's not going in the direction that we

3976
02:54:51,600 --> 02:54:55,760
actually raycast right so that may just

3977
02:54:54,159 --> 02:54:57,760
be because we tweak the debug code but

3978
02:54:55,760 --> 02:55:00,639
it could also be like hey that's problem

3979
02:54:57,760 --> 02:55:02,239
number one like we're casting

3980
02:55:00,639 --> 02:55:05,039
we're casting in a different direction

3981
02:55:02,239 --> 02:55:07,119
than we think we should be casting

3982
02:55:05,040 --> 02:55:08,399
based on the octahedral map's output

3983
02:55:07,120 --> 02:55:10,720
direction

3984
02:55:08,398 --> 02:55:10,719
right

3985
02:55:11,760 --> 02:55:15,520
so first things first

3986
02:55:13,680 --> 02:55:17,040
those two things have to line up and

3987
02:55:15,520 --> 02:55:19,200
they ain't

3988
02:55:17,040 --> 02:55:20,640
if we go

3989
02:55:19,200 --> 02:55:21,680
to full cast

3990
02:55:20,639 --> 02:55:23,599
you can see where those are getting

3991
02:55:21,680 --> 02:55:25,040
drawn

3992
02:55:23,600 --> 02:55:27,520
so this

3993
02:55:25,040 --> 02:55:27,520
right here

3994
02:55:27,840 --> 02:55:32,398
this is saying

3995
02:55:29,600 --> 02:55:35,680
for the specular atlas

3996
02:55:32,398 --> 02:55:38,879
we have a debug pic tx and a debug pic

3997
02:55:35,680 --> 02:55:38,880
ty right

3998
02:55:42,239 --> 02:55:46,799
we have to check to make sure that those

3999
02:55:45,040 --> 02:55:49,279
don't include the apron

4000
02:55:46,799 --> 02:55:49,278
they might

4001
02:55:50,079 --> 02:55:52,879
let's double check

4002
02:55:57,439 --> 02:56:01,200
it looks like those kind of include the

4003
02:55:58,719 --> 02:56:01,199
apron

4004
02:56:05,760 --> 02:56:08,159
sort of

4005
02:56:09,200 --> 02:56:13,479
like there's a minus one in there

4006
02:56:18,719 --> 02:56:21,719
right

4007
02:56:26,959 --> 02:56:31,759
so that seems maybe like

4008
02:56:29,520 --> 02:56:31,760
this

4009
02:56:32,079 --> 02:56:36,000
is actually this like we actually want

4010
02:56:34,159 --> 02:56:41,318
to add one

4011
02:56:36,000 --> 02:56:41,318
uh because this includes the apron

4012
02:56:45,200 --> 02:56:48,720
that's my story and i'm sticking to it

4013
02:56:51,359 --> 02:56:54,399
however

4014
02:56:53,279 --> 02:56:56,159
uh

4015
02:56:54,398 --> 02:56:57,680
doesn't really help because they're

4016
02:56:56,159 --> 02:56:59,200
still wrong

4017
02:56:57,680 --> 02:57:00,720
you know what i'm saying

4018
02:56:59,200 --> 02:57:02,720
uh so

4019
02:57:00,719 --> 02:57:06,159
the

4020
02:57:02,719 --> 02:57:08,879
the direction we expect

4021
02:57:06,159 --> 02:57:10,879
for the xy that we're writing to

4022
02:57:08,879 --> 02:57:12,559
is not the direction that is actually

4023
02:57:10,879 --> 02:57:14,639
getting cast

4024
02:57:12,559 --> 02:57:17,680
and so that's like

4025
02:57:14,639 --> 02:57:19,278
i mean problem number one

4026
02:57:17,680 --> 02:57:21,040
and you can see us drawing the expected

4027
02:57:19,279 --> 02:57:23,439
direction here from the location that we

4028
02:57:21,040 --> 02:57:25,040
start we're drawing out the expected

4029
02:57:23,439 --> 02:57:26,880
direction

4030
02:57:25,040 --> 02:57:30,399
that's the purple line

4031
02:57:26,879 --> 02:57:32,719
and then when we do our grid raycast

4032
02:57:30,398 --> 02:57:32,719
here

4033
02:57:33,760 --> 02:57:38,960
which presumably is slightly wrong

4034
02:57:36,398 --> 02:57:41,519
uh when we are drawing this stuff

4035
02:57:38,959 --> 02:57:42,239
where we you know do these debug boxes

4036
02:57:41,520 --> 02:57:44,640
and

4037
02:57:42,239 --> 02:57:46,959
push like sort of the the direct the ray

4038
02:57:44,639 --> 02:57:48,879
as it goes uh you can see probably at

4039
02:57:46,959 --> 02:57:51,438
the bottom here

4040
02:57:48,879 --> 02:57:54,000
we uh we

4041
02:57:51,439 --> 02:57:56,960
do like a long ray uh

4042
02:57:54,000 --> 02:57:59,200
that's how far we go right

4043
02:57:56,959 --> 02:57:59,199
um

4044
02:57:59,359 --> 02:58:06,559
this whole thing

4045
02:58:01,439 --> 02:58:06,559
is just wrong apparently apparently

4046
02:58:14,719 --> 02:58:16,840
right

4047
02:58:15,680 --> 02:58:19,279
this

4048
02:58:16,840 --> 02:58:21,439
value where we pick a

4049
02:58:19,279 --> 02:58:23,040
something out of the sample

4050
02:58:21,439 --> 02:58:24,960
table

4051
02:58:23,040 --> 02:58:28,800
and we

4052
02:58:24,959 --> 02:58:28,799
you know get the direction of it

4053
02:58:28,879 --> 02:58:33,278
that direction does not

4054
02:58:31,200 --> 02:58:35,120
necessarily match this

4055
02:58:33,279 --> 02:58:36,720
now i guess when i think about it that's

4056
02:58:35,120 --> 02:58:39,520
okay because this is a direction

4057
02:58:36,719 --> 02:58:42,398
straight out of so it doesn't have to be

4058
02:58:39,520 --> 02:58:44,640
exactly right i guess so so um

4059
02:58:42,398 --> 02:58:46,559
false alarm as long as it appears to

4060
02:58:44,639 --> 02:58:48,000
come out the same face of the octahedron

4061
02:58:46,559 --> 02:58:50,239
it's fine

4062
02:58:48,000 --> 02:58:52,159
right uh i guess is how we would put

4063
02:58:50,239 --> 02:58:54,239
that

4064
02:58:52,159 --> 02:58:56,398
so that's actually okay i guess now that

4065
02:58:54,239 --> 02:58:57,680
i think about it that's that's all right

4066
02:58:56,398 --> 02:59:00,239
all right so the next thing we need to

4067
02:58:57,680 --> 02:59:03,840
do is make it so that we can

4068
02:59:00,239 --> 02:59:06,079
edit those u32 values right in some way

4069
02:59:03,840 --> 02:59:06,079
um

4070
02:59:10,799 --> 02:59:17,519
and i think our trick for that before

4071
02:59:14,799 --> 02:59:17,519
was to say

4072
02:59:19,600 --> 02:59:24,000
um

4073
02:59:21,760 --> 02:59:26,719
we just make them real 32s because those

4074
02:59:24,000 --> 02:59:26,719
were editable

4075
02:59:26,840 --> 02:59:30,318
um

4076
02:59:28,559 --> 02:59:31,600
i'm not sure how i feel about that but

4077
02:59:30,318 --> 02:59:33,760
you know it's probably the wrong time to

4078
02:59:31,600 --> 02:59:35,439
go monkeying around in here

4079
02:59:33,760 --> 02:59:36,960
uh although we really would like to

4080
02:59:35,439 --> 02:59:38,880
improve this debug stuff because it's

4081
02:59:36,959 --> 02:59:41,119
terrible right

4082
02:59:38,879 --> 02:59:41,119
um

4083
02:59:41,200 --> 02:59:47,279
it was high on the list of things to

4084
02:59:44,398 --> 02:59:49,519
rip up entirely

4085
02:59:47,279 --> 02:59:49,520
but

4086
02:59:49,840 --> 02:59:55,200
so where we have

4087
02:59:51,760 --> 02:59:59,359
uh editable f32s

4088
02:59:55,200 --> 02:59:59,359
um we at the moment

4089
02:59:59,439 --> 03:00:03,840
don't have any way to

4090
03:00:01,520 --> 03:00:06,479
actually edit those

4091
03:00:03,840 --> 03:00:08,318
that is an interesting debug ui i don't

4092
03:00:06,478 --> 03:00:10,639
know what that's supposed to be there's

4093
03:00:08,318 --> 03:00:11,840
like literally nothing in it

4094
03:00:10,639 --> 03:00:13,039
okay

4095
03:00:11,840 --> 03:00:15,359
i guess we

4096
03:00:13,040 --> 03:00:18,080
don't put anything in that file anymore

4097
03:00:15,359 --> 03:00:19,760
um so where we actually edit these in

4098
03:00:18,079 --> 03:00:21,840
the debug system here which is like i

4099
03:00:19,760 --> 03:00:24,478
said way too complicated for what it

4100
03:00:21,840 --> 03:00:26,318
does so simplifying this is is high on

4101
03:00:24,478 --> 03:00:28,478
the list of things to do

4102
03:00:26,318 --> 03:00:30,719
um but when we actually draw these out

4103
03:00:28,478 --> 03:00:32,318
we've got sort of a thing for editing

4104
03:00:30,719 --> 03:00:35,278
these

4105
03:00:32,318 --> 03:00:37,119
where if it happens to be an f32

4106
03:00:35,279 --> 03:00:39,359
we have a way to

4107
03:00:37,120 --> 03:00:41,439
edit that but if it's not

4108
03:00:39,359 --> 03:00:42,399
we don't right

4109
03:00:41,439 --> 03:00:44,639
and

4110
03:00:42,398 --> 03:00:44,639
so

4111
03:00:47,200 --> 03:00:50,479
you know

4112
03:00:48,159 --> 03:00:53,680
when we draw these we track whether you

4113
03:00:50,478 --> 03:00:55,679
can hit them and when we do that you

4114
03:00:53,680 --> 03:00:56,880
know there's so there's the interact

4115
03:00:55,680 --> 03:00:58,239
code here

4116
03:00:56,879 --> 03:00:59,920
which i forget exactly where it is but

4117
03:00:58,239 --> 03:01:03,039
it's here it is

4118
03:00:59,920 --> 03:01:05,520
um you can see like booleans can toggle

4119
03:01:03,040 --> 03:01:08,240
r32s can drag

4120
03:01:05,520 --> 03:01:10,640
but you know u32s can't do anything at

4121
03:01:08,239 --> 03:01:10,639
the moment

4122
03:01:11,359 --> 03:01:13,600
so

4123
03:01:18,799 --> 03:01:22,879
you can see here if we wanted to we

4124
03:01:21,279 --> 03:01:24,640
could have a pretty

4125
03:01:22,879 --> 03:01:25,679
difficult to edit because it's not very

4126
03:01:24,639 --> 03:01:29,680
good but

4127
03:01:25,680 --> 03:01:31,200
you could see having a u32 one and

4128
03:01:29,680 --> 03:01:33,439
excuse me

4129
03:01:31,200 --> 03:01:36,399
it would just be that

4130
03:01:33,439 --> 03:01:37,680
so maybe we allow that to occur

4131
03:01:36,398 --> 03:01:38,879
i don't know

4132
03:01:37,680 --> 03:01:41,600
um

4133
03:01:38,879 --> 03:01:44,879
and or maybe it's just terrible

4134
03:01:41,600 --> 03:01:44,880
uh i guess we'll find out

4135
03:01:45,200 --> 03:01:48,200
so

4136
03:01:50,559 --> 03:01:55,278
not sure why i can't there we go um

4137
03:01:53,359 --> 03:01:58,079
so i don't actually know

4138
03:01:55,279 --> 03:01:59,359
how we want to deal with d mouse p here

4139
03:01:58,079 --> 03:02:00,799
because i'm not sure if that's like

4140
03:01:59,359 --> 03:02:03,840
normalized i'm not sure what we keep

4141
03:02:00,799 --> 03:02:03,840
those coordinates in

4142
03:02:04,239 --> 03:02:08,959
but

4143
03:02:06,159 --> 03:02:11,959
mostly we probably just want

4144
03:02:08,959 --> 03:02:11,959
this

4145
03:02:18,639 --> 03:02:22,159
we probably just want like a sine or

4146
03:02:20,239 --> 03:02:25,520
zero

4147
03:02:22,159 --> 03:02:25,520
which i guess we don't have

4148
03:02:25,840 --> 03:02:31,279
we only have sine of

4149
03:02:29,040 --> 03:02:33,520
which is a little unfortunate

4150
03:02:31,279 --> 03:02:33,520
right

4151
03:02:35,279 --> 03:02:38,800
so i don't know about that but

4152
03:02:42,000 --> 03:02:44,559
presumably we just want something more

4153
03:02:43,520 --> 03:02:47,600
like this

4154
03:02:44,559 --> 03:02:47,600
if it's less than zero

4155
03:02:50,398 --> 03:02:54,799
we would ink

4156
03:02:52,879 --> 03:02:56,079
if it's greater than zero

4157
03:02:54,799 --> 03:02:58,159
sorry

4158
03:02:56,079 --> 03:02:59,520
i mean deck

4159
03:02:58,159 --> 03:03:00,879
and if it's equal to zero we just don't

4160
03:02:59,520 --> 03:03:03,520
do anything

4161
03:03:00,879 --> 03:03:03,519
you know what i mean

4162
03:03:06,879 --> 03:03:12,679
um and that'll give us crappy editing of

4163
03:03:09,520 --> 03:03:12,680
those values

4164
03:03:16,959 --> 03:03:21,438
uh right so

4165
03:03:19,520 --> 03:03:22,159
you know it's not good

4166
03:03:21,439 --> 03:03:23,040
but

4167
03:03:22,159 --> 03:03:26,398
it's

4168
03:03:23,040 --> 03:03:28,560
it's workable for the immediate moment

4169
03:03:26,398 --> 03:03:31,278
um so then if we kind of look at what's

4170
03:03:28,559 --> 03:03:33,519
happening here with these casts uh i

4171
03:03:31,279 --> 03:03:34,800
guess i can't quite say what i'm looking

4172
03:03:33,520 --> 03:03:36,640
at there you can see there's kind of

4173
03:03:34,799 --> 03:03:39,119
some weirdness here where

4174
03:03:36,639 --> 03:03:40,559
you see like multiple cast values i

4175
03:03:39,120 --> 03:03:41,439
don't really know why

4176
03:03:40,559 --> 03:03:43,359
right

4177
03:03:41,439 --> 03:03:45,040
um and you know we're gonna have to

4178
03:03:43,359 --> 03:03:47,359
clamp these values because at the moment

4179
03:03:45,040 --> 03:03:49,600
if you go outside of the 16 you would

4180
03:03:47,359 --> 03:03:51,359
get a kind of meaningless value but

4181
03:03:49,600 --> 03:03:52,880
what's interesting is it it seems like

4182
03:03:51,359 --> 03:03:55,040
it's doing kind of weird things where

4183
03:03:52,879 --> 03:03:59,039
it's like casting straight down

4184
03:03:55,040 --> 03:04:00,640
for some like large number of these um

4185
03:03:59,040 --> 03:04:02,160
so i don't know like

4186
03:04:00,639 --> 03:04:03,840
i do want to go like get this working

4187
03:04:02,159 --> 03:04:05,760
because it looks like there is some

4188
03:04:03,840 --> 03:04:07,520
badness going on here

4189
03:04:05,760 --> 03:04:08,960
so let me just add a clamp for these and

4190
03:04:07,520 --> 03:04:10,479
then we'll kind of walk through them and

4191
03:04:08,959 --> 03:04:14,039
see like why is it doing what it's doing

4192
03:04:10,478 --> 03:04:14,039
because i don't really know

4193
03:04:25,279 --> 03:04:28,479
so inside the lining code

4194
03:04:29,840 --> 03:04:34,799
where we put those debug values in

4195
03:04:32,398 --> 03:04:37,278
when i go through the grid index thing i

4196
03:04:34,799 --> 03:04:40,799
guess when we do equals

4197
03:04:37,279 --> 03:04:40,800
grid index or whatever it is

4198
03:04:40,959 --> 03:04:43,278
um

4199
03:04:44,000 --> 03:04:47,000
oops

4200
03:04:52,239 --> 03:04:56,799
what just happened

4201
03:04:53,760 --> 03:04:58,478
debug pick dot grid there we go

4202
03:04:56,799 --> 03:05:00,478
search woes

4203
03:04:58,478 --> 03:05:02,559
uh when we actually get this we we want

4204
03:05:00,478 --> 03:05:04,159
to clamp these values i think i don't

4205
03:05:02,559 --> 03:05:06,398
think we have any real way to clamp

4206
03:05:04,159 --> 03:05:08,239
stuff that's you know i think these are

4207
03:05:06,398 --> 03:05:09,680
all just for floating point most times i

4208
03:05:08,239 --> 03:05:11,680
don't know it looks like we do have some

4209
03:05:09,680 --> 03:05:13,680
s32 stuff in here

4210
03:05:11,680 --> 03:05:15,680
um so we should probably be able to do

4211
03:05:13,680 --> 03:05:17,439
some clamping here

4212
03:05:15,680 --> 03:05:20,559
and what we would want to do

4213
03:05:17,439 --> 03:05:22,000
is make sure that like all of the values

4214
03:05:20,559 --> 03:05:24,879
that

4215
03:05:22,000 --> 03:05:27,040
have fixed lower upper and lower bounds

4216
03:05:24,879 --> 03:05:27,920
are within those upper and lower bounds

4217
03:05:27,040 --> 03:05:30,160
right

4218
03:05:27,920 --> 03:05:30,159
so

4219
03:05:30,398 --> 03:05:33,639
we know

4220
03:05:33,680 --> 03:05:38,318
that like the debug pick

4221
03:05:36,318 --> 03:05:39,840
tx value

4222
03:05:38,318 --> 03:05:42,719
can only be

4223
03:05:39,840 --> 03:05:44,960
between zero and seven

4224
03:05:42,719 --> 03:05:47,599
and the same with the t y value

4225
03:05:44,959 --> 03:05:50,318
so those have to be clamped we also know

4226
03:05:47,600 --> 03:05:53,040
that the octahedral index

4227
03:05:50,318 --> 03:05:54,239
is only allowed to go up to whatever

4228
03:05:53,040 --> 03:05:56,240
that

4229
03:05:54,239 --> 03:05:58,840
predefined constant is in the generation

4230
03:05:56,239 --> 03:06:02,159
table so like you're not allowed to

4231
03:05:58,840 --> 03:06:04,079
go over whatever the light sampling

4232
03:06:02,159 --> 03:06:05,200
octahedron count is

4233
03:06:04,079 --> 03:06:07,920
so that

4234
03:06:05,200 --> 03:06:09,279
is the maximum value it can take

4235
03:06:07,920 --> 03:06:12,559
and so we'll just make sure that those

4236
03:06:09,279 --> 03:06:14,640
values are clamped so that if you try to

4237
03:06:12,559 --> 03:06:17,278
do something higher than those

4238
03:06:14,639 --> 03:06:18,799
it just gets thrown out

4239
03:06:17,279 --> 03:06:19,600
because otherwise we could crash like

4240
03:06:18,799 --> 03:06:21,840
because

4241
03:06:19,600 --> 03:06:24,000
the debug

4242
03:06:21,840 --> 03:06:26,000
although this part wouldn't matter it

4243
03:06:24,000 --> 03:06:28,000
just wouldn't pick anything because

4244
03:06:26,000 --> 03:06:30,079
you'd be out of range of any value that

4245
03:06:28,000 --> 03:06:32,159
it actually tries same with the grid

4246
03:06:30,079 --> 03:06:36,079
index right

4247
03:06:32,159 --> 03:06:37,920
um that's not true for t y because t y

4248
03:06:36,079 --> 03:06:39,920
is actually going to say where in the

4249
03:06:37,920 --> 03:06:43,120
table you're going to look up you know

4250
03:06:39,920 --> 03:06:45,439
what i mean um so

4251
03:06:43,120 --> 03:06:45,439
you know

4252
03:06:48,478 --> 03:06:51,278
it does matter

4253
03:06:55,680 --> 03:06:58,720
all right

4254
03:06:57,920 --> 03:06:59,398
so

4255
03:06:58,719 --> 03:07:02,478
if

4256
03:06:59,398 --> 03:07:04,719
we've have it all if we look at like

4257
03:07:02,478 --> 03:07:06,559
some of these things maybe we put them

4258
03:07:04,719 --> 03:07:08,799
right in the middle there

4259
03:07:06,559 --> 03:07:08,799
right

4260
03:07:08,879 --> 03:07:13,438
um the first thing i would say is i

4261
03:07:10,879 --> 03:07:16,398
don't totally understand what i'm seeing

4262
03:07:13,439 --> 03:07:18,479
like i don't really quite get

4263
03:07:16,398 --> 03:07:20,000
why i'm seeing multiples i think what

4264
03:07:18,478 --> 03:07:21,840
i'm seeing here

4265
03:07:20,000 --> 03:07:25,439
is that it

4266
03:07:21,840 --> 03:07:27,520
is that it casts two z-layers

4267
03:07:25,439 --> 03:07:29,760
because which i guess makes sense so

4268
03:07:27,520 --> 03:07:32,159
we're seeing two different z-layers

4269
03:07:29,760 --> 03:07:33,680
because the grid index in the spatial

4270
03:07:32,159 --> 03:07:35,119
partition will be the same no matter

4271
03:07:33,680 --> 03:07:36,800
which one you are

4272
03:07:35,120 --> 03:07:38,880
and so it may make sense for us to

4273
03:07:36,799 --> 03:07:40,079
change that to an atlas index and maybe

4274
03:07:38,879 --> 03:07:41,679
i'll do that right now so that we're

4275
03:07:40,079 --> 03:07:44,239
only picking one

4276
03:07:41,680 --> 03:07:46,880
and not many

4277
03:07:44,239 --> 03:07:46,879
that to me

4278
03:07:46,959 --> 03:07:51,599
seems saner so

4279
03:07:48,799 --> 03:07:51,599
while we're at it

4280
03:07:51,760 --> 03:07:57,200
let's make sure we can pick

4281
03:07:54,159 --> 03:08:00,159
explicitly one of these so we have a

4282
03:07:57,200 --> 03:08:02,240
atlas index here

4283
03:08:00,159 --> 03:08:03,520
not a grid index

4284
03:08:02,239 --> 03:08:05,600
so when we're

4285
03:08:03,520 --> 03:08:07,279
looking through this

4286
03:08:05,600 --> 03:08:09,120
we have an atlas index i don't know if

4287
03:08:07,279 --> 03:08:10,159
we have an our equals comparator for

4288
03:08:09,120 --> 03:08:12,479
those if

4289
03:08:10,159 --> 03:08:12,478
we do

4290
03:08:12,879 --> 03:08:16,000
it would just be this

4291
03:08:16,079 --> 03:08:18,959
code

4292
03:08:17,120 --> 03:08:23,279
and we do

4293
03:08:18,959 --> 03:08:23,278
so when we're setting this up

4294
03:08:23,840 --> 03:08:29,120
we would you know actually set it to

4295
03:08:25,920 --> 03:08:30,318
something i don't know what um

4296
03:08:29,120 --> 03:08:31,760
you know

4297
03:08:30,318 --> 03:08:32,799
eight

4298
03:08:31,760 --> 03:08:35,520
four

4299
03:08:32,799 --> 03:08:37,679
zero or one i don't know

4300
03:08:35,520 --> 03:08:40,159
doesn't matter

4301
03:08:37,680 --> 03:08:43,040
uh and so that way we can actually see

4302
03:08:40,159 --> 03:08:45,200
these values i don't know if this is

4303
03:08:43,040 --> 03:08:46,720
possible to edit i don't think it is so

4304
03:08:45,200 --> 03:08:49,200
i don't think we want to pass it down as

4305
03:08:46,719 --> 03:08:50,559
a single debug value right

4306
03:08:49,200 --> 03:08:52,240
because we don't have an edit for that

4307
03:08:50,559 --> 03:08:54,000
so what we really want is just the x y

4308
03:08:52,239 --> 03:08:56,000
and z separate

4309
03:08:54,000 --> 03:08:58,079
um and we can clamp those as well

4310
03:08:56,000 --> 03:08:59,680
because we do know the dimensions of

4311
03:08:58,079 --> 03:09:02,398
this uh the

4312
03:08:59,680 --> 03:09:05,680
the sampling grid right

4313
03:09:02,398 --> 03:09:07,680
so when we are going through those

4314
03:09:05,680 --> 03:09:10,318
uh we should be able to clamp those as

4315
03:09:07,680 --> 03:09:12,960
well so where we do our clamp

4316
03:09:10,318 --> 03:09:17,119
of each of these we can also do

4317
03:09:12,959 --> 03:09:17,669
our clamp of atlas index

4318
03:09:17,120 --> 03:09:20,819
so

4319
03:09:17,670 --> 03:09:20,818
[Music]

4320
03:09:22,959 --> 03:09:30,398
we need the voxel dimension for the

4321
03:09:27,680 --> 03:09:32,559
actual uh we need the voxel dimension

4322
03:09:30,398 --> 03:09:33,920
for the atlas grid

4323
03:09:32,559 --> 03:09:37,840
right

4324
03:09:33,920 --> 03:09:39,359
and so the voxel grid

4325
03:09:37,840 --> 03:09:42,478
here

4326
03:09:39,359 --> 03:09:45,200
uh we want the cell count

4327
03:09:42,478 --> 03:09:48,879
out of that voxel grid so we would want

4328
03:09:45,200 --> 03:09:50,880
like atlas grids cell count x

4329
03:09:48,879 --> 03:09:53,519
we want to clamp it now i don't know if

4330
03:09:50,879 --> 03:09:56,159
we have a clamp that works with v3s

4331
03:09:53,520 --> 03:09:57,520
one of the bummers about this jump

4332
03:09:56,159 --> 03:10:00,238
stuff that's in

4333
03:09:57,520 --> 03:10:02,319
uh fork coder flurry

4334
03:10:00,238 --> 03:10:04,079
is it doesn't show you any of the types

4335
03:10:02,318 --> 03:10:06,879
so when you look at clamp you have no

4336
03:10:04,079 --> 03:10:09,200
idea like which clamp is which right it

4337
03:10:06,879 --> 03:10:10,639
doesn't really have overloading where it

4338
03:10:09,200 --> 03:10:12,399
just tells you the

4339
03:10:10,639 --> 03:10:14,079
the name of the thing so i don't

4340
03:10:12,398 --> 03:10:15,760
actually know if we have one because

4341
03:10:14,079 --> 03:10:17,279
like i said on handmade hero you know i

4342
03:10:15,760 --> 03:10:19,040
program on it so infrequently that i

4343
03:10:17,279 --> 03:10:21,600
don't remember like which stuff we've

4344
03:10:19,040 --> 03:10:24,399
written and which stuff we haven't

4345
03:10:21,600 --> 03:10:28,159
so i have no idea uh but presumably we

4346
03:10:24,398 --> 03:10:30,318
cannot do this like i assume

4347
03:10:28,159 --> 03:10:32,079
we don't have the ability to do

4348
03:10:30,318 --> 03:10:33,840
that

4349
03:10:32,079 --> 03:10:35,039
where it would just do the whole clamp

4350
03:10:33,840 --> 03:10:37,920
for us

4351
03:10:35,040 --> 03:10:40,960
um i'm not sure but let's find out

4352
03:10:37,920 --> 03:10:45,040
uh yeah it looks like we don't have one

4353
03:10:40,959 --> 03:10:46,478
but we could just add one uh you know it

4354
03:10:45,040 --> 03:10:47,840
seems like the kind of thing we might

4355
03:10:46,478 --> 03:10:50,238
want

4356
03:10:47,840 --> 03:10:51,040
so if we just had a clamp function in

4357
03:10:50,238 --> 03:10:52,000
here

4358
03:10:51,040 --> 03:10:54,960
that we

4359
03:10:52,000 --> 03:10:56,000
appended right so in math

4360
03:10:54,959 --> 03:10:58,799
maybe

4361
03:10:56,000 --> 03:11:02,238
um if we just had a clamp where we clamp

4362
03:10:58,799 --> 03:11:03,759
each individual member that seems like

4363
03:11:02,238 --> 03:11:06,318
something we would use

4364
03:11:03,760 --> 03:11:09,040
maybe it's not i don't know um but it

4365
03:11:06,318 --> 03:11:12,879
seems like something we would use

4366
03:11:09,040 --> 03:11:15,520
so let's suppose we just add that um to

4367
03:11:12,879 --> 03:11:17,039
this set of things we've got here

4368
03:11:15,520 --> 03:11:18,560
because you can see we have quite a few

4369
03:11:17,040 --> 03:11:19,840
things that operate on these like

4370
03:11:18,559 --> 03:11:23,840
integer

4371
03:11:19,840 --> 03:11:23,840
three wide integer vectors right

4372
03:11:24,238 --> 03:11:28,478
so maybe we just add a clamp the clamp

4373
03:11:26,318 --> 03:11:28,478
would

4374
03:11:32,359 --> 03:11:36,439
be uh

4375
03:11:38,318 --> 03:11:40,959
something like this

4376
03:11:41,840 --> 03:11:45,920
and i don't know if we have minimums or

4377
03:11:43,200 --> 03:11:47,760
maximums for vectors uh and i guess i

4378
03:11:45,920 --> 03:11:50,398
don't care i probably will just do it

4379
03:11:47,760 --> 03:11:51,840
like this where we say clamp

4380
03:11:50,398 --> 03:11:54,639
min x

4381
03:11:51,840 --> 03:11:56,719
vx max x

4382
03:11:54,639 --> 03:12:00,119
and

4383
03:11:56,719 --> 03:12:00,119
we just do

4384
03:12:04,799 --> 03:12:09,119
exactly what you would expect

4385
03:12:06,719 --> 03:12:09,119
oops

4386
03:12:12,478 --> 03:12:17,760
so now we should be able to uh do this

4387
03:12:16,238 --> 03:12:20,079
the only problem is this is an actual

4388
03:12:17,760 --> 03:12:23,520
maximum value not a dim so this also

4389
03:12:20,079 --> 03:12:25,760
needs to have one subtracted from it

4390
03:12:23,520 --> 03:12:27,040
uh in order to be proper other than that

4391
03:12:25,760 --> 03:12:28,398
i think it's fine

4392
03:12:27,040 --> 03:12:30,479
and

4393
03:12:28,398 --> 03:12:33,599
then we should be able to like actually

4394
03:12:30,478 --> 03:12:34,959
pick exactly who we're looking at

4395
03:12:33,600 --> 03:12:37,600
so

4396
03:12:34,959 --> 03:12:40,799
i don't remember oops that's debug break

4397
03:12:37,600 --> 03:12:40,800
which is not what i meant to do

4398
03:12:41,040 --> 03:12:44,319
i don't remember i had to learn which

4399
03:12:42,159 --> 03:12:45,680
commands it's okay so it looks like f7

4400
03:12:44,318 --> 03:12:47,760
is our friend

4401
03:12:45,680 --> 03:12:48,960
for lighting and so

4402
03:12:47,760 --> 03:12:50,318
in theory

4403
03:12:48,959 --> 03:12:52,159
i don't actually know if this is true

4404
03:12:50,318 --> 03:12:53,199
but in theory

4405
03:12:52,159 --> 03:12:55,039
um

4406
03:12:53,200 --> 03:12:56,239
we should be able to edit these although

4407
03:12:55,040 --> 03:12:58,319
i can't

4408
03:12:56,238 --> 03:13:02,639
i'm not sure why

4409
03:12:58,318 --> 03:13:02,639
o is because it's an s32

4410
03:13:05,200 --> 03:13:11,120
that's uh that's an interesting one

4411
03:13:08,000 --> 03:13:14,559
so i guess technically

4412
03:13:11,120 --> 03:13:18,880
um you would just do that

4413
03:13:14,559 --> 03:13:18,879
and you would allow

4414
03:13:19,760 --> 03:13:24,200
drag value to happen

4415
03:13:36,639 --> 03:13:39,799
on both

4416
03:13:42,959 --> 03:13:45,759
so i think that's fine

4417
03:13:50,799 --> 03:13:55,000
i don't actually know i think it's fine

4418
03:13:57,359 --> 03:14:03,359
so now we can like more precisely

4419
03:14:00,478 --> 03:14:05,358
sort of drag this along um with the

4420
03:14:03,359 --> 03:14:07,040
super crappy debug system but you know

4421
03:14:05,359 --> 03:14:08,559
it's there

4422
03:14:07,040 --> 03:14:09,680
um it would be nice to have like yeah it

4423
03:14:08,559 --> 03:14:11,359
would have nice to have just like you

4424
03:14:09,680 --> 03:14:12,880
click maybe you click the left button

4425
03:14:11,359 --> 03:14:14,640
that goes up and you click the right

4426
03:14:12,879 --> 03:14:16,719
button it goes down would be like a

4427
03:14:14,639 --> 03:14:18,879
nicer way to do it right

4428
03:14:16,719 --> 03:14:20,879
um because like how is that not clamping

4429
03:14:18,879 --> 03:14:23,278
the value also right like didn't we

4430
03:14:20,879 --> 03:14:24,719
select clamping for the value why does

4431
03:14:23,279 --> 03:14:27,359
it not clamp

4432
03:14:24,719 --> 03:14:29,679
i guess because this overwrites it

4433
03:14:27,359 --> 03:14:30,880
such a crappy debug system it's so

4434
03:14:29,680 --> 03:14:32,318
terrible

4435
03:14:30,879 --> 03:14:35,278
like i don't know why the clamping is

4436
03:14:32,318 --> 03:14:36,959
not reflected back in here like

4437
03:14:35,279 --> 03:14:39,120
like

4438
03:14:36,959 --> 03:14:40,318
it's it's weird like see that one does

4439
03:14:39,120 --> 03:14:43,200
right

4440
03:14:40,318 --> 03:14:43,199
but this one doesn't

4441
03:14:45,439 --> 03:14:48,238
why

4442
03:14:47,040 --> 03:14:50,720
i mean

4443
03:14:48,238 --> 03:14:53,520
no idea did i mess up the code that does

4444
03:14:50,719 --> 03:14:55,119
that

4445
03:14:53,520 --> 03:14:57,439
i mean sure looks like i'm writing back

4446
03:14:55,120 --> 03:14:59,520
to it right so you know why does that

4447
03:14:57,439 --> 03:15:00,559
not clamp i have no idea

4448
03:14:59,520 --> 03:15:03,680
um

4449
03:15:00,559 --> 03:15:05,199
i do think in this case maybe i i

4450
03:15:03,680 --> 03:15:06,479
because it's so

4451
03:15:05,200 --> 03:15:09,200
bad

4452
03:15:06,478 --> 03:15:12,238
maybe for now i actually do have a thing

4453
03:15:09,200 --> 03:15:14,159
here that's like you know um

4454
03:15:12,238 --> 03:15:15,760
instead of drag value there's like some

4455
03:15:14,159 --> 03:15:17,680
kind of thing like

4456
03:15:15,760 --> 03:15:21,000
uh

4457
03:15:17,680 --> 03:15:21,000
tick value

4458
03:15:30,238 --> 03:15:33,039
so

4459
03:15:31,040 --> 03:15:37,359
maybe in this case

4460
03:15:33,040 --> 03:15:37,359
um there's like a tick value

4461
03:15:37,680 --> 03:15:40,559
and

4462
03:15:39,279 --> 03:15:44,200
then when

4463
03:15:40,559 --> 03:15:44,199
we do that

4464
03:15:56,398 --> 03:16:02,238
in here i would just have one

4465
03:15:59,398 --> 03:16:03,840
for uh

4466
03:16:02,238 --> 03:16:06,879
this that lets you

4467
03:16:03,840 --> 03:16:10,079
click up or down by one or something

4468
03:16:06,879 --> 03:16:12,959
crappy like that um

4469
03:16:10,079 --> 03:16:17,520
you know uh

4470
03:16:12,959 --> 03:16:19,599
i'm not sure exactly what this

4471
03:16:17,520 --> 03:16:23,600
input state

4472
03:16:19,600 --> 03:16:25,359
really is so it's probably easy enough

4473
03:16:23,600 --> 03:16:28,238
to just say

4474
03:16:25,359 --> 03:16:31,040
all right uh we've got

4475
03:16:28,238 --> 03:16:32,079
this exact case here

4476
03:16:31,040 --> 03:16:33,920
and

4477
03:16:32,079 --> 03:16:35,920
it's

4478
03:16:33,920 --> 03:16:37,040
tick value

4479
03:16:35,920 --> 03:16:39,520
and

4480
03:16:37,040 --> 03:16:40,640
if you see it

4481
03:16:39,520 --> 03:16:42,960
you

4482
03:16:40,639 --> 03:16:45,840
actually just use like

4483
03:16:42,959 --> 03:16:45,839
if the input

4484
03:16:46,478 --> 03:16:49,278
um

4485
03:16:46,930 --> 03:16:51,200
[Music]

4486
03:16:49,279 --> 03:16:52,800
has like you know

4487
03:16:51,200 --> 03:16:54,479
the shift key down or something right

4488
03:16:52,799 --> 03:16:56,840
like something's extremely bad i don't

4489
03:16:54,478 --> 03:16:59,920
know why game input cannot be

4490
03:16:56,840 --> 03:16:59,920
found uh

4491
03:17:02,478 --> 03:17:06,398
it's like right there

4492
03:17:04,398 --> 03:17:08,478
um but anyway so

4493
03:17:06,398 --> 03:17:10,318
if we look here you've got like shift

4494
03:17:08,478 --> 03:17:12,959
down or something so maybe like just

4495
03:17:10,318 --> 03:17:14,799
shift if you're pressing shift it goes

4496
03:17:12,959 --> 03:17:16,639
upwards if you're not you're not or

4497
03:17:14,799 --> 03:17:17,359
something right so you just say like

4498
03:17:16,639 --> 03:17:19,599
shift down

4499
03:17:17,360 --> 03:17:21,040
[Music]

4500
03:17:19,600 --> 03:17:22,800
you subtract

4501
03:17:21,040 --> 03:17:23,680
not down you increment

4502
03:17:22,799 --> 03:17:27,559
and

4503
03:17:23,680 --> 03:17:27,559
and that's it

4504
03:17:27,920 --> 03:17:30,639
although oops that's in the wrong one

4505
03:17:29,279 --> 03:17:31,600
this

4506
03:17:30,639 --> 03:17:34,398
doesn't

4507
03:17:31,600 --> 03:17:34,399
doesn't exist

4508
03:17:34,559 --> 03:17:37,959
this does

4509
03:17:40,959 --> 03:17:44,559
yeah so not great again just because the

4510
03:17:42,799 --> 03:17:46,079
debug system is super crappy but i just

4511
03:17:44,559 --> 03:17:48,159
don't want to deal with it for right now

4512
03:17:46,079 --> 03:17:51,680
so we're just going to leave it crappy

4513
03:17:48,159 --> 03:17:54,719
uh and then maybe we can sort of figure

4514
03:17:51,680 --> 03:17:57,359
out a way to make this

4515
03:17:54,719 --> 03:17:57,358
do something

4516
03:17:58,159 --> 03:18:02,639
somehow that

4517
03:18:00,159 --> 03:18:04,478
doesn't seem to actually increment it

4518
03:18:02,639 --> 03:18:06,799
will decrement but it won't increment

4519
03:18:04,478 --> 03:18:08,559
which is a little bit weird

4520
03:18:06,799 --> 03:18:10,079
oh because

4521
03:18:08,559 --> 03:18:11,840
there's still an f in there

4522
03:18:10,079 --> 03:18:13,439
uh and then that's it

4523
03:18:11,840 --> 03:18:17,279
that'll just be what we use and it's

4524
03:18:13,439 --> 03:18:17,279
really bad but oh well

4525
03:18:18,159 --> 03:18:21,359
we should have written a better one if

4526
03:18:19,359 --> 03:18:22,559
we wanted a better one

4527
03:18:21,359 --> 03:18:25,040
so

4528
03:18:22,559 --> 03:18:27,359
there's us sort of

4529
03:18:25,040 --> 03:18:29,840
going through those particular values

4530
03:18:27,359 --> 03:18:32,000
right i don't know why sometimes it goes

4531
03:18:29,840 --> 03:18:34,238
too many i guess if you if you hold it

4532
03:18:32,000 --> 03:18:36,238
down it goes up yeah

4533
03:18:34,238 --> 03:18:39,520
i kind of only wanted to do on the end

4534
03:18:36,238 --> 03:18:41,600
of an interaction so i guess maybe

4535
03:18:39,520 --> 03:18:42,720
that's this

4536
03:18:41,600 --> 03:18:44,960
right

4537
03:18:42,719 --> 03:18:44,959
um

4538
03:18:45,200 --> 03:18:50,800
so on end interact that

4539
03:18:48,398 --> 03:18:53,278
might be the more

4540
03:18:50,799 --> 03:18:55,039
like sane place to put it so it could be

4541
03:18:53,279 --> 03:18:58,000
that like this

4542
03:18:55,040 --> 03:19:01,560
should actually be

4543
03:18:58,000 --> 03:19:01,559
where that happens

4544
03:19:04,398 --> 03:19:08,079
like right here

4545
03:19:06,079 --> 03:19:09,760
so when we do these interactions and

4546
03:19:08,079 --> 03:19:12,318
like there's the toggle value like the

4547
03:19:09,760 --> 03:19:13,279
tick value actually goes in there

4548
03:19:12,318 --> 03:19:14,478
um

4549
03:19:13,279 --> 03:19:16,319
and

4550
03:19:14,478 --> 03:19:18,238
so that you only do it once when you

4551
03:19:16,318 --> 03:19:21,039
click it doesn't like keep going while

4552
03:19:18,238 --> 03:19:21,039
you hold it down

4553
03:19:21,760 --> 03:19:23,840
uh

4554
03:19:22,719 --> 03:19:25,358
so

4555
03:19:23,840 --> 03:19:29,760
yeah

4556
03:19:25,359 --> 03:19:29,760
that's a lot more sane now um

4557
03:19:30,478 --> 03:19:35,039
although it looks like the uh

4558
03:19:39,760 --> 03:19:42,478
it still looks kind of like that was a

4559
03:19:40,879 --> 03:19:44,478
little bit weird like

4560
03:19:42,478 --> 03:19:47,438
why did it stop when we came out let's

4561
03:19:44,478 --> 03:19:50,478
look at this a little closely

4562
03:19:47,439 --> 03:19:50,479
so why is nine

4563
03:19:51,200 --> 03:19:56,760
why does only every other one show up

4564
03:20:00,478 --> 03:20:07,519
because i see because it's inside the

4565
03:20:03,920 --> 03:20:09,520
wall area so it never gets to that point

4566
03:20:07,520 --> 03:20:12,000
we should probably include drawing for

4567
03:20:09,520 --> 03:20:13,359
that shouldn't we

4568
03:20:12,000 --> 03:20:16,238
yeah

4569
03:20:13,359 --> 03:20:16,238
all right well anyway

4570
03:20:18,959 --> 03:20:22,799
fair enough

4571
03:20:20,238 --> 03:20:22,799
fair enough

4572
03:20:23,040 --> 03:20:26,840
all right so let's try to set this to

4573
03:20:24,959 --> 03:20:28,879
something that we actually want to look

4574
03:20:26,840 --> 03:20:30,478
at and it's a little bit annoying

4575
03:20:28,879 --> 03:20:32,238
because we do have sort of light bleed

4576
03:20:30,478 --> 03:20:33,840
here

4577
03:20:32,238 --> 03:20:36,318
i don't know why that doesn't clamp like

4578
03:20:33,840 --> 03:20:39,200
we said before that's very weird and i

4579
03:20:36,318 --> 03:20:39,199
don't understand it

4580
03:20:39,760 --> 03:20:43,359
but

4581
03:20:40,478 --> 03:20:44,799
the debug system is its own pain painful

4582
03:20:43,359 --> 03:20:47,120
reality

4583
03:20:44,799 --> 03:20:50,238
that we will address in good time

4584
03:20:47,120 --> 03:20:52,079
so if we look here at the different ways

4585
03:20:50,238 --> 03:20:53,279
we can cast we can now kind of step

4586
03:20:52,079 --> 03:20:54,079
through them

4587
03:20:53,279 --> 03:20:55,359
so

4588
03:20:54,079 --> 03:20:57,760
if we

4589
03:20:55,359 --> 03:21:00,079
like here's one thing if we step through

4590
03:20:57,760 --> 03:21:03,920
all the octahedrons they should each be

4591
03:21:00,079 --> 03:21:05,279
like out a different face um

4592
03:21:03,920 --> 03:21:06,719
sorry

4593
03:21:05,279 --> 03:21:07,840
if we step through the tx and ty they

4594
03:21:06,719 --> 03:21:09,119
should all be out of different face but

4595
03:21:07,840 --> 03:21:11,040
the octahedron index should all be out

4596
03:21:09,120 --> 03:21:13,439
the same face so basically like all of

4597
03:21:11,040 --> 03:21:14,800
these should be out a downward face of

4598
03:21:13,439 --> 03:21:16,880
the octahedron

4599
03:21:14,799 --> 03:21:19,438
now one thing that doesn't make good

4600
03:21:16,879 --> 03:21:21,119
sense to me is the octahedron isn't

4601
03:21:19,439 --> 03:21:23,760
aligned this way

4602
03:21:21,120 --> 03:21:26,000
so actually i don't understand why we're

4603
03:21:23,760 --> 03:21:28,318
getting a straight down arrow for the

4604
03:21:26,000 --> 03:21:29,680
expected direction because that's not

4605
03:21:28,318 --> 03:21:32,959
actually a legal direction for the

4606
03:21:29,680 --> 03:21:32,960
octahedral map is it

4607
03:21:35,040 --> 03:21:39,600
like that doesn't make any sense

4608
03:21:37,520 --> 03:21:41,920
how is that a thing

4609
03:21:39,600 --> 03:21:45,520
like if we look at

4610
03:21:41,920 --> 03:21:45,520
um expected direction

4611
03:21:47,920 --> 03:21:52,159
this

4612
03:21:49,279 --> 03:21:54,399
how is expected direction for this

4613
03:21:52,159 --> 03:21:56,719
octahedral map

4614
03:21:54,398 --> 03:21:56,719
um

4615
03:21:58,000 --> 03:22:01,359
how is it pointing downward it should

4616
03:21:59,760 --> 03:22:04,359
never be able to point downward should

4617
03:22:01,359 --> 03:22:04,359
it

4618
03:22:28,079 --> 03:22:32,680
i mean that really just seems wrong

4619
03:22:39,040 --> 03:22:42,239
i mean that's that's that's just gotta

4620
03:22:41,120 --> 03:22:44,079
be wrong

4621
03:22:42,238 --> 03:22:46,398
so like i feel like this routine is

4622
03:22:44,079 --> 03:22:47,680
busted because there shouldn't yeah i

4623
03:22:46,398 --> 03:22:50,398
mean you can look at you can just look

4624
03:22:47,680 --> 03:22:52,960
at how it works right

4625
03:22:50,398 --> 03:22:54,799
when you call direction from txty you're

4626
03:22:52,959 --> 03:22:56,959
gonna step in here and you're gonna

4627
03:22:54,799 --> 03:23:00,840
compute the you're gonna remove the

4628
03:22:56,959 --> 03:23:03,679
apron part of this right

4629
03:23:00,840 --> 03:23:06,478
um and you're just gonna step through

4630
03:23:03,680 --> 03:23:07,200
the oxy coefficient.x is just telling

4631
03:23:06,478 --> 03:23:10,398
you

4632
03:23:07,200 --> 03:23:12,239
uh for each step

4633
03:23:10,398 --> 03:23:13,599
where are you in the octahedral map

4634
03:23:12,238 --> 03:23:15,520
right

4635
03:23:13,600 --> 03:23:17,439
um

4636
03:23:15,520 --> 03:23:19,359
so the direction vector heading out of

4637
03:23:17,439 --> 03:23:22,800
the octahedral map

4638
03:23:19,359 --> 03:23:22,800
is just going to be based on

4639
03:23:23,760 --> 03:23:26,079
i mean

4640
03:23:27,600 --> 03:23:33,439
i suppose if you're close to the bottom

4641
03:23:30,959 --> 03:23:35,358
of the thing uh okay i suppose that's

4642
03:23:33,439 --> 03:23:36,960
okay it's not really because it's not

4643
03:23:35,359 --> 03:23:38,318
really technically the face of the

4644
03:23:36,959 --> 03:23:40,639
octahedron that we're looking at here

4645
03:23:38,318 --> 03:23:46,238
it's which it's this particular pixel

4646
03:23:40,639 --> 03:23:46,238
right which could be close to down sure

4647
03:23:46,639 --> 03:23:49,119
i mean

4648
03:23:50,238 --> 03:23:55,359
uh greg inc by the way no they're not uh

4649
03:23:53,040 --> 03:23:58,800
light bleed is kind of a natural thing

4650
03:23:55,359 --> 03:24:01,680
that happens if you just don't have a

4651
03:23:58,799 --> 03:24:03,599
watertight ray tracing so you know

4652
03:24:01,680 --> 03:24:05,040
light bleed can mean like well i've got

4653
03:24:03,600 --> 03:24:06,640
a wall

4654
03:24:05,040 --> 03:24:07,680
and there's a light on the other side of

4655
03:24:06,639 --> 03:24:10,000
the wall

4656
03:24:07,680 --> 03:24:11,439
and it comes in

4657
03:24:10,000 --> 03:24:13,840
right

4658
03:24:11,439 --> 03:24:15,279
and you know that's not that big of a

4659
03:24:13,840 --> 03:24:17,279
problem you can choose to leave that in

4660
03:24:15,279 --> 03:24:18,800
if you want depends how bad it is or if

4661
03:24:17,279 --> 03:24:20,479
it affects your gameplay significantly

4662
03:24:18,799 --> 03:24:22,879
and so on you know so that's like

4663
03:24:20,478 --> 03:24:26,639
light bleed is is not that bad light

4664
03:24:22,879 --> 03:24:28,959
poisoning is like when you have some

4665
03:24:26,639 --> 03:24:30,159
critical error like we have at least one

4666
03:24:28,959 --> 03:24:32,079
of at the moment

4667
03:24:30,159 --> 03:24:34,318
where some values that are like out of

4668
03:24:32,079 --> 03:24:35,760
bounds or something cause the entire

4669
03:24:34,318 --> 03:24:38,079
system to create like basically a

4670
03:24:35,760 --> 03:24:41,120
feedback loop it's it's very much

4671
03:24:38,079 --> 03:24:43,359
the exact same thing as feedback and

4672
03:24:41,120 --> 03:24:45,279
audio so like a microphone and a

4673
03:24:43,359 --> 03:24:47,359
transmitter are like close to each other

4674
03:24:45,279 --> 03:24:49,439
and the and they just go like

4675
03:24:47,359 --> 03:24:50,479
you know what i mean um that's happening

4676
03:24:49,439 --> 03:24:53,040
in the light

4677
03:24:50,478 --> 03:24:56,159
and it the reason i call it poisoning is

4678
03:24:53,040 --> 03:24:58,479
because because you when you have like a

4679
03:24:56,159 --> 03:25:00,238
radiosity kind of effect

4680
03:24:58,478 --> 03:25:02,000
right

4681
03:25:00,238 --> 03:25:03,680
if there's any

4682
03:25:02,000 --> 03:25:05,359
one if there's any

4683
03:25:03,680 --> 03:25:09,120
critical bug like that

4684
03:25:05,359 --> 03:25:10,399
in just one part of your light solution

4685
03:25:09,120 --> 03:25:12,560
it will quickly spread to the whole

4686
03:25:10,398 --> 03:25:14,799
thing because they're all you're

4687
03:25:12,559 --> 03:25:16,639
bouncing the light around in real global

4688
03:25:14,799 --> 03:25:18,000
illumination if you don't do global

4689
03:25:16,639 --> 03:25:19,358
illumination you can't really have that

4690
03:25:18,000 --> 03:25:21,520
kind of light poisoning because your

4691
03:25:19,359 --> 03:25:23,600
lighting is all local so it won't spread

4692
03:25:21,520 --> 03:25:26,960
but when you have global illumination

4693
03:25:23,600 --> 03:25:26,960
your bug will spread

4694
03:25:27,200 --> 03:25:30,159
and so that's what i'm talking about i

4695
03:25:28,959 --> 03:25:32,398
call light poisoning it's not the same

4696
03:25:30,159 --> 03:25:34,478
as light bleed light bleed is something

4697
03:25:32,398 --> 03:25:36,559
that you might

4698
03:25:34,478 --> 03:25:39,438
be okay with like it's not necessarily a

4699
03:25:36,559 --> 03:25:40,959
bug it it is a bug in the grand scheme

4700
03:25:39,439 --> 03:25:42,880
of things meaning in terms of the

4701
03:25:40,959 --> 03:25:43,919
product but it may not actually be a bug

4702
03:25:42,879 --> 03:25:45,679
in the lighting system meaning your

4703
03:25:43,920 --> 03:25:47,279
lighting system may just not be designed

4704
03:25:45,680 --> 03:25:49,120
to handle that so you wouldn't

4705
03:25:47,279 --> 03:25:50,399
necessarily think of light bleed as like

4706
03:25:49,120 --> 03:25:52,640
a critical failure

4707
03:25:50,398 --> 03:25:55,358
light poisoning is always a bug like

4708
03:25:52,639 --> 03:25:56,639
like it's no matter what you did

4709
03:25:55,359 --> 03:25:58,159
you screwed up if you have light

4710
03:25:56,639 --> 03:25:59,680
poisoning whereas light bleed might be

4711
03:25:58,159 --> 03:26:02,000
something you just accept because your

4712
03:25:59,680 --> 03:26:04,000
lighting algorithm is always approximate

4713
03:26:02,000 --> 03:26:04,959
and like you just don't have the you

4714
03:26:04,000 --> 03:26:06,639
know

4715
03:26:04,959 --> 03:26:08,398
you you haven't dedicated the resources

4716
03:26:06,639 --> 03:26:10,079
to it or it's too cumbersome or whatever

4717
03:26:08,398 --> 03:26:11,199
so you you know light bleed you're just

4718
03:26:10,079 --> 03:26:13,600
gonna have it in the game and it ships

4719
03:26:11,200 --> 03:26:15,520
it's okay right so i would like to draw

4720
03:26:13,600 --> 03:26:17,279
distinction there because light bleed is

4721
03:26:15,520 --> 03:26:18,479
significantly less bad than light

4722
03:26:17,279 --> 03:26:19,840
poisoning and what i'm talking about

4723
03:26:18,478 --> 03:26:22,398
here is actually like poisoning like the

4724
03:26:19,840 --> 03:26:26,238
bad it's the worst case light bleed is

4725
03:26:22,398 --> 03:26:26,238
is not nearly as bad of a case

4726
03:26:26,639 --> 03:26:28,959
you might still want to get rid of it

4727
03:26:27,840 --> 03:26:30,960
but

4728
03:26:28,959 --> 03:26:33,839
it's not as bad as this it's not as bad

4729
03:26:30,959 --> 03:26:33,839
as this situation

4730
03:26:34,159 --> 03:26:38,639
okay so um

4731
03:26:36,398 --> 03:26:40,559
moving

4732
03:26:38,639 --> 03:26:42,799
forward

4733
03:26:40,559 --> 03:26:42,799
uh

4734
03:26:42,959 --> 03:26:46,639
we're doing the grid raycast and that

4735
03:26:44,238 --> 03:26:48,478
seems a little bit more sane um i'm okay

4736
03:26:46,639 --> 03:26:51,039
with that at the moment

4737
03:26:48,478 --> 03:26:53,199
um yeah to a certain extent right i

4738
03:26:51,040 --> 03:26:56,319
don't want to overstate it

4739
03:26:53,200 --> 03:26:59,359
um so let's suppose we go one

4740
03:26:56,318 --> 03:27:01,760
forward in x to something i can see so

4741
03:26:59,359 --> 03:27:04,559
like right here

4742
03:27:01,760 --> 03:27:06,478
so that's 10 4 1

4743
03:27:04,559 --> 03:27:09,199
i'm going to set that to be like what it

4744
03:27:06,478 --> 03:27:11,358
initializes to at the outset so that we

4745
03:27:09,200 --> 03:27:14,359
can on startup we're always going to be

4746
03:27:11,359 --> 03:27:14,359
there

4747
03:27:14,478 --> 03:27:20,478
um and then i'm just gonna like look at

4748
03:27:16,639 --> 03:27:23,519
some of these casts from here to see uh

4749
03:27:20,478 --> 03:27:25,920
what we end up doing um for some of the

4750
03:27:23,520 --> 03:27:27,120
octahedron right

4751
03:27:25,920 --> 03:27:30,398
so there's

4752
03:27:27,120 --> 03:27:32,399
um another cast

4753
03:27:30,398 --> 03:27:35,199
these are all should be facing pretty

4754
03:27:32,398 --> 03:27:36,799
much down okay so there's some really

4755
03:27:35,200 --> 03:27:38,239
critical failure

4756
03:27:36,799 --> 03:27:41,519
that's happening

4757
03:27:38,238 --> 03:27:44,719
um when the octahedron index so

4758
03:27:41,520 --> 03:27:47,600
you know supposedly

4759
03:27:44,719 --> 03:27:47,599
supposedly

4760
03:27:47,680 --> 03:27:52,559
when we look at the sampling tables that

4761
03:27:49,279 --> 03:27:55,279
we built we're supposed to get 16

4762
03:27:52,559 --> 03:27:57,439
different octahedron

4763
03:27:55,279 --> 03:27:58,880
but from looking at that

4764
03:27:57,439 --> 03:28:00,800
we don't

4765
03:27:58,879 --> 03:28:02,478
when we get up above a certain number of

4766
03:28:00,799 --> 03:28:04,478
octahedron they just look like they're

4767
03:28:02,478 --> 03:28:07,119
just repeating themselves

4768
03:28:04,478 --> 03:28:08,719
and so i don't actually know if that's a

4769
03:28:07,120 --> 03:28:10,560
problem with the table or a problem that

4770
03:28:08,719 --> 03:28:12,478
we're looking up into the table

4771
03:28:10,559 --> 03:28:13,680
but it's definitely not

4772
03:28:12,478 --> 03:28:15,039
correct

4773
03:28:13,680 --> 03:28:16,880
you know what i'm saying

4774
03:28:15,040 --> 03:28:18,399
so that's the first problem is we should

4775
03:28:16,879 --> 03:28:21,039
be able to drive that number all the way

4776
03:28:18,398 --> 03:28:22,159
to 15 and we shouldn't see it bottom out

4777
03:28:21,040 --> 03:28:24,319
like that

4778
03:28:22,159 --> 03:28:26,079
now looking at the table i would also

4779
03:28:24,318 --> 03:28:27,920
say that the table itself doesn't look

4780
03:28:26,079 --> 03:28:30,079
like it has that error because that

4781
03:28:27,920 --> 03:28:32,079
error would look like a bunch of things

4782
03:28:30,079 --> 03:28:34,398
that just have zero zero negative one in

4783
03:28:32,079 --> 03:28:36,959
them or something right and that doesn't

4784
03:28:34,398 --> 03:28:39,840
really seem to be the case so

4785
03:28:36,959 --> 03:28:39,839
yeah

4786
03:28:40,318 --> 03:28:43,318
um

4787
03:28:55,120 --> 03:29:02,239
and the total number of these that

4788
03:28:57,680 --> 03:29:04,880
should be in here is 16 times 64.

4789
03:29:02,238 --> 03:29:07,039
right because total light sample

4790
03:29:04,879 --> 03:29:09,119
direction count

4791
03:29:07,040 --> 03:29:11,439
is the octahedrons times the per

4792
03:29:09,120 --> 03:29:14,800
octahedron

4793
03:29:11,439 --> 03:29:15,840
that's 16 times 64.

4794
03:29:14,799 --> 03:29:19,438
so

4795
03:29:15,840 --> 03:29:21,439
16 times 64 is 1024

4796
03:29:19,439 --> 03:29:24,479
and i guess i don't know

4797
03:29:21,439 --> 03:29:26,559
uh exactly where line 1024 is but it

4798
03:29:24,478 --> 03:29:28,719
should still be yeah so so

4799
03:29:26,559 --> 03:29:30,398
there's definitely the correct number of

4800
03:29:28,719 --> 03:29:31,920
vectors in here

4801
03:29:30,398 --> 03:29:35,639
so it's not like we're reading off the

4802
03:29:31,920 --> 03:29:35,639
end of the table or something

4803
03:29:36,000 --> 03:29:40,478
by asking for those values so let's take

4804
03:29:38,159 --> 03:29:42,000
a look and see what's going on here

4805
03:29:40,478 --> 03:29:43,760
because something's

4806
03:29:42,000 --> 03:29:46,000
funny is going on

4807
03:29:43,760 --> 03:29:47,200
and i'm not really sure

4808
03:29:46,000 --> 03:29:49,840
what it is

4809
03:29:47,200 --> 03:29:52,479
so in grid raycast where we're picking

4810
03:29:49,840 --> 03:29:54,318
out this sample direction we're starting

4811
03:29:52,478 --> 03:29:56,159
out the sample table

4812
03:29:54,318 --> 03:29:58,000
um we're stepping through the

4813
03:29:56,159 --> 03:30:00,398
octahedrons here

4814
03:29:58,000 --> 03:30:02,000
and then through the sy values the

4815
03:30:00,398 --> 03:30:04,799
octahedrons

4816
03:30:02,000 --> 03:30:06,879
we should be going from zero to you know

4817
03:30:04,799 --> 03:30:10,639
16 or whatever right

4818
03:30:06,879 --> 03:30:13,639
and did i mess up like this thing

4819
03:30:10,639 --> 03:30:13,639
um

4820
03:30:26,799 --> 03:30:29,799
hmm

4821
03:30:31,840 --> 03:30:35,880
i mean it still looks correct

4822
03:30:52,478 --> 03:30:55,478
um

4823
03:30:58,719 --> 03:31:02,458
so

4824
03:30:59,280 --> 03:31:02,459
[Music]

4825
03:31:05,200 --> 03:31:09,120
so why is that happening let me just

4826
03:31:07,439 --> 03:31:10,639
recompile this real quick so that it has

4827
03:31:09,120 --> 03:31:13,200
the oops

4828
03:31:10,639 --> 03:31:16,159
what did i do

4829
03:31:13,200 --> 03:31:19,040
accidentally inserted a z

4830
03:31:16,159 --> 03:31:21,279
that's uh that's not gonna fly

4831
03:31:19,040 --> 03:31:21,279
um

4832
03:31:22,079 --> 03:31:28,159
so that's perplexing and maybe we just

4833
03:31:26,000 --> 03:31:31,279
step in in debug mode and see what's

4834
03:31:28,159 --> 03:31:33,200
going on there but that's pretty wild

4835
03:31:31,279 --> 03:31:36,479
and i don't understand it so the

4836
03:31:33,200 --> 03:31:41,840
octahedral index right we get 0 is right

4837
03:31:36,478 --> 03:31:41,840
1 is right 2 is right 3 is right 4

4838
03:31:42,879 --> 03:31:47,679
4 through 15 are just all wrong

4839
03:31:52,159 --> 03:31:56,238
so

4840
03:31:53,040 --> 03:31:58,399
how is that possible like like why are

4841
03:31:56,238 --> 03:32:00,559
all those values

4842
03:31:58,398 --> 03:32:02,879
apparently just pointing straight down

4843
03:32:00,559 --> 03:32:06,719
instead of actual correct values it

4844
03:32:02,879 --> 03:32:08,398
seemed it sure seems like we're stepping

4845
03:32:06,719 --> 03:32:11,238
too far or

4846
03:32:08,398 --> 03:32:14,398
or maybe we built the

4847
03:32:11,238 --> 03:32:16,799
table incorrectly

4848
03:32:14,398 --> 03:32:16,799
um

4849
03:32:21,840 --> 03:32:27,120
that's just really really confusing and

4850
03:32:25,120 --> 03:32:30,160
the more i stare at that thing though i

4851
03:32:27,120 --> 03:32:32,319
can't really figure out exactly why

4852
03:32:30,159 --> 03:32:34,318
um maybe we're looking up in that table

4853
03:32:32,318 --> 03:32:37,199
slightly wrong let's let's take a quick

4854
03:32:34,318 --> 03:32:39,359
look uh at maybe we're misunderstanding

4855
03:32:37,200 --> 03:32:40,720
how that table is packed

4856
03:32:39,359 --> 03:32:42,399
because it is kind of janky and we

4857
03:32:40,719 --> 03:32:43,679
should probably go back and and repack

4858
03:32:42,398 --> 03:32:44,799
it to the way we want it to be packed

4859
03:32:43,680 --> 03:32:46,318
now instead of trying to pull stuff out

4860
03:32:44,799 --> 03:32:47,438
of it but you never know

4861
03:32:46,318 --> 03:32:49,359
let's take a look at that sample

4862
03:32:47,439 --> 03:32:50,398
direction table stuff

4863
03:32:49,359 --> 03:32:52,640
right

4864
03:32:50,398 --> 03:32:52,639
um

4865
03:32:53,040 --> 03:32:56,880
so

4866
03:32:54,559 --> 03:32:59,519
the sample direction table

4867
03:32:56,879 --> 03:33:02,519
is is this thing i believe

4868
03:32:59,520 --> 03:33:02,520
um

4869
03:33:12,799 --> 03:33:19,840
and the walk table offset

4870
03:33:16,879 --> 03:33:19,839
aha

4871
03:33:20,639 --> 03:33:23,039
right

4872
03:33:26,318 --> 03:33:33,799
so i

4873
03:33:27,680 --> 03:33:33,800
kind of see what the problem is here

4874
03:33:35,520 --> 03:33:38,560
yep

4875
03:33:37,520 --> 03:33:40,000
so

4876
03:33:38,559 --> 03:33:41,439
much like a lot of things here it's just

4877
03:33:40,000 --> 03:33:43,600
the fact that we don't work on this code

4878
03:33:41,439 --> 03:33:45,520
very often so it falls out of our head

4879
03:33:43,600 --> 03:33:47,279
the walk table offset

4880
03:33:45,520 --> 03:33:49,439
again because this is highly optimized

4881
03:33:47,279 --> 03:33:50,560
code we don't have the luxury

4882
03:33:49,439 --> 03:33:52,000
well it's not highly optimized it is

4883
03:33:50,559 --> 03:33:53,519
optimized code

4884
03:33:52,000 --> 03:33:54,799
we don't have the luxury of having

4885
03:33:53,520 --> 03:33:56,960
everything

4886
03:33:54,799 --> 03:33:58,159
be kind of like sparse and easy to

4887
03:33:56,959 --> 03:34:00,559
modify

4888
03:33:58,159 --> 03:34:03,600
the walk table offset is accessed

4889
03:34:00,559 --> 03:34:05,680
directly from the sample direction table

4890
03:34:03,600 --> 03:34:07,840
it probably doesn't line up anymore

4891
03:34:05,680 --> 03:34:11,920
because previously

4892
03:34:07,840 --> 03:34:15,760
the walk table offset was generated

4893
03:34:11,920 --> 03:34:18,639
assuming there were octants

4894
03:34:15,760 --> 03:34:21,680
and other weird things like that

4895
03:34:18,639 --> 03:34:23,920
and none of that may be correct anymore

4896
03:34:21,680 --> 03:34:26,079
so we probably need to go make sure that

4897
03:34:23,920 --> 03:34:28,799
this actually lines up at all because it

4898
03:34:26,079 --> 03:34:31,680
might actually just not right now

4899
03:34:28,799 --> 03:34:34,559
um and we probably have to take this a

4900
03:34:31,680 --> 03:34:35,600
little more seriously

4901
03:34:34,559 --> 03:34:38,159
right

4902
03:34:35,600 --> 03:34:39,680
i mean that said this part

4903
03:34:38,159 --> 03:34:42,799
wouldn't be though

4904
03:34:39,680 --> 03:34:46,159
so maybe that's not really true

4905
03:34:42,799 --> 03:34:48,398
um because the array direction like like

4906
03:34:46,159 --> 03:34:51,439
ignore walk table temporarily the ray

4907
03:34:48,398 --> 03:34:51,439
direction here

4908
03:34:52,719 --> 03:34:57,199
that actually should be fine

4909
03:34:54,959 --> 03:34:58,000
so now i take it back

4910
03:34:57,200 --> 03:34:59,760
um

4911
03:34:58,000 --> 03:35:01,520
because we would still see it the

4912
03:34:59,760 --> 03:35:05,040
direction of the ray should still be

4913
03:35:01,520 --> 03:35:07,439
correct so still not quite

4914
03:35:05,040 --> 03:35:09,200
yeah still not quite making sense

4915
03:35:07,439 --> 03:35:11,439
so let's try to actually figure out what

4916
03:35:09,200 --> 03:35:12,960
these values are i mean maybe the best

4917
03:35:11,439 --> 03:35:14,479
thing to do here

4918
03:35:12,959 --> 03:35:17,119
would be to actually show what this

4919
03:35:14,478 --> 03:35:17,119
value is

4920
03:35:18,959 --> 03:35:22,719
so this

4921
03:35:20,879 --> 03:35:25,358
we will actually compute

4922
03:35:22,719 --> 03:35:28,959
as its own value we can inspect

4923
03:35:25,359 --> 03:35:31,359
and we'll put the directional asset

4924
03:35:28,959 --> 03:35:33,679
you know in there

4925
03:35:31,359 --> 03:35:36,000
um

4926
03:35:33,680 --> 03:35:39,040
we will also make it easier on ourselves

4927
03:35:36,000 --> 03:35:41,359
by doing this

4928
03:35:39,040 --> 03:35:41,359
if

4929
03:35:41,680 --> 03:35:46,238
set debug true kind of a thing that way

4930
03:35:44,079 --> 03:35:48,159
i can set a breakpoint

4931
03:35:46,238 --> 03:35:49,680
on that line which just speeds things up

4932
03:35:48,159 --> 03:35:51,119
a little bit

4933
03:35:49,680 --> 03:35:52,960
instead of having to look at an actual

4934
03:35:51,120 --> 03:35:54,720
value

4935
03:35:52,959 --> 03:35:56,559
so

4936
03:35:54,719 --> 03:35:59,719
if we go

4937
03:35:56,559 --> 03:35:59,719
in there

4938
03:36:07,840 --> 03:36:11,120
um

4939
03:36:08,639 --> 03:36:14,478
and we look at what sort of

4940
03:36:11,120 --> 03:36:15,920
numbers we're plucking out of this table

4941
03:36:14,478 --> 03:36:17,199
we could also add an assertion that just

4942
03:36:15,920 --> 03:36:19,359
says look let's make sure we're not

4943
03:36:17,200 --> 03:36:22,079
outside the table

4944
03:36:19,359 --> 03:36:23,520
um when we get here let's just look like

4945
03:36:22,079 --> 03:36:26,879
so what are all these values so what's

4946
03:36:23,520 --> 03:36:26,880
dur offset for example

4947
03:36:28,000 --> 03:36:30,238
right

4948
03:36:30,879 --> 03:36:34,719
okay

4949
03:36:32,159 --> 03:36:37,200
um and so now if i change like solution

4950
03:36:34,719 --> 03:36:38,799
so so let's go change the debug pick

4951
03:36:37,200 --> 03:36:40,960
octahedron i don't know if i can edit

4952
03:36:38,799 --> 03:36:43,438
these maybe i can let's change this to

4953
03:36:40,959 --> 03:36:44,318
something that was previously bad so 10

4954
03:36:43,439 --> 03:36:45,920
right

4955
03:36:44,318 --> 03:36:50,238
so now let's see what the directional

4956
03:36:45,920 --> 03:36:50,238
offset is now that it's 10.

4957
03:36:56,639 --> 03:36:59,599
so uh

4958
03:36:57,920 --> 03:37:01,279
that seems fine

4959
03:36:59,600 --> 03:37:04,079
right i mean that doesn't seem weird and

4960
03:37:01,279 --> 03:37:07,760
what's ray d single at this point

4961
03:37:04,079 --> 03:37:07,760
i mean how is it getting that value

4962
03:37:12,959 --> 03:37:18,719
so sample dir plus dir offset is is the

4963
03:37:16,879 --> 03:37:20,079
sample direction table so it's a

4964
03:37:18,719 --> 03:37:21,278
solution

4965
03:37:20,079 --> 03:37:23,120
sample

4966
03:37:21,279 --> 03:37:25,200
direction table

4967
03:37:23,120 --> 03:37:26,880
right

4968
03:37:25,200 --> 03:37:28,239
here's the table

4969
03:37:26,879 --> 03:37:32,000
um

4970
03:37:28,238 --> 03:37:34,559
we are looking at this 640th one

4971
03:37:32,000 --> 03:37:34,559
of those

4972
03:37:34,959 --> 03:37:38,559
and you're telling me that that's this

4973
03:37:36,478 --> 03:37:40,639
year then that appears

4974
03:37:38,559 --> 03:37:44,398
nowhere in that table

4975
03:37:40,639 --> 03:37:48,000
like those values are not in the table

4976
03:37:44,398 --> 03:37:49,119
so this lookup is broken we were correct

4977
03:37:48,000 --> 03:37:51,439
before

4978
03:37:49,120 --> 03:37:53,120
when we were like this looks suspicious

4979
03:37:51,439 --> 03:37:55,520
but somehow

4980
03:37:53,120 --> 03:37:57,439
our suspicions failed to actually find

4981
03:37:55,520 --> 03:37:58,800
the problem because there is a problem

4982
03:37:57,439 --> 03:38:01,840
but i don't know

4983
03:37:58,799 --> 03:38:01,840
what it actually is

4984
03:38:02,079 --> 03:38:05,200
one question would be do we copy this

4985
03:38:04,159 --> 03:38:07,119
table

4986
03:38:05,200 --> 03:38:09,200
and if the answer is that we copy the

4987
03:38:07,120 --> 03:38:13,079
table

4988
03:38:09,200 --> 03:38:13,079
are we copying it wrong

4989
03:38:14,238 --> 03:38:17,039
i don't know

4990
03:38:16,159 --> 03:38:18,478
um

4991
03:38:17,040 --> 03:38:20,319
so maybe let's take a little bit closer

4992
03:38:18,478 --> 03:38:23,438
look at that but in general

4993
03:38:20,318 --> 03:38:24,959
so sampleder now

4994
03:38:23,439 --> 03:38:27,199
is actually indexing into what we think

4995
03:38:24,959 --> 03:38:28,559
would be a correct uh correct placement

4996
03:38:27,199 --> 03:38:30,800
of the table

4997
03:38:28,559 --> 03:38:32,959
there's 1024 entries in it and we're

4998
03:38:30,799 --> 03:38:34,159
only on entry 640 we should be pulling

4999
03:38:32,959 --> 03:38:36,238
off

5000
03:38:34,159 --> 03:38:38,559
an actual valid

5001
03:38:36,238 --> 03:38:41,439
entry of the table

5002
03:38:38,559 --> 03:38:44,079
if we look uh at light sample direction

5003
03:38:41,439 --> 03:38:47,279
here right like

5004
03:38:44,079 --> 03:38:47,279
we should have

5005
03:38:48,238 --> 03:38:52,000
this should have been in in the right

5006
03:38:49,760 --> 03:38:53,920
place so

5007
03:38:52,000 --> 03:38:54,879
so i don't know i'm to try one other

5008
03:38:53,920 --> 03:38:56,398
thing

5009
03:38:54,879 --> 03:38:58,559
i'm going to look at sample direction

5010
03:38:56,398 --> 03:39:00,719
table directly so the global variable

5011
03:38:58,559 --> 03:39:01,439
sample direction table

5012
03:39:00,719 --> 03:39:04,318
right

5013
03:39:01,439 --> 03:39:06,079
this is the actual table

5014
03:39:04,318 --> 03:39:07,760
that's the hard-coded table before it

5015
03:39:06,079 --> 03:39:09,520
gets copied into the lighting system if

5016
03:39:07,760 --> 03:39:12,880
that's what actually happens

5017
03:39:09,520 --> 03:39:15,279
if i go to number 640 am i going to see

5018
03:39:12,879 --> 03:39:19,799
straight downward pointing vectors there

5019
03:39:15,279 --> 03:39:19,800
i don't know there's only 512 of them

5020
03:39:22,398 --> 03:39:25,680
and what is this about

5021
03:39:26,318 --> 03:39:30,559
are those actually there

5022
03:39:28,639 --> 03:39:33,039
i don't remember seeing that

5023
03:39:30,559 --> 03:39:34,799
if i go to 512 which would just be

5024
03:39:33,040 --> 03:39:36,960
slightly down from here

5025
03:39:34,799 --> 03:39:40,879
i don't see those values

5026
03:39:36,959 --> 03:39:44,839
maybe i do oh well no i do that's one

5027
03:39:40,879 --> 03:39:44,839
how many of those are there

5028
03:39:53,120 --> 03:39:58,079
so here's the scary part

5029
03:39:55,439 --> 03:40:00,800
looking more closely at the table

5030
03:39:58,079 --> 03:40:00,799
they're in there

5031
03:40:01,439 --> 03:40:07,120
so it looks like the um

5032
03:40:04,639 --> 03:40:08,478
culprit actually here

5033
03:40:07,120 --> 03:40:10,000
is our

5034
03:40:08,478 --> 03:40:12,318
table build

5035
03:40:10,000 --> 03:40:14,799
like our table is actually

5036
03:40:12,318 --> 03:40:14,799
busted

5037
03:40:14,879 --> 03:40:20,478
for reals though

5038
03:40:17,680 --> 03:40:20,479
for reals

5039
03:40:20,959 --> 03:40:25,438
um

5040
03:40:23,199 --> 03:40:27,840
so that's uh oh oh no sunday it's

5041
03:40:25,439 --> 03:40:30,639
three-dimensional global illumination

5042
03:40:27,840 --> 03:40:33,439
um at the moment

5043
03:40:30,639 --> 03:40:36,719
uh although we

5044
03:40:33,439 --> 03:40:38,079
we could simplify it down to being more

5045
03:40:36,719 --> 03:40:40,318
2d

5046
03:40:38,079 --> 03:40:40,318
um

5047
03:40:41,120 --> 03:40:45,359
at that at the moment it's like

5048
03:40:42,959 --> 03:40:48,398
completely 3d

5049
03:40:45,359 --> 03:40:51,439
but we may not really need it to be that

5050
03:40:48,398 --> 03:40:52,318
um although it seems fast enough

5051
03:40:51,439 --> 03:40:53,760
so

5052
03:40:52,318 --> 03:40:55,439
you know we'll probably just leave it as

5053
03:40:53,760 --> 03:40:57,439
3d

5054
03:40:55,439 --> 03:40:59,040
um

5055
03:40:57,439 --> 03:41:02,079
but you know we could simplify it

5056
03:40:59,040 --> 03:41:05,120
further and make it like really just 2d

5057
03:41:02,079 --> 03:41:05,610
um because the world is pretty 2d so you

5058
03:41:05,120 --> 03:41:06,880
could do

5059
03:41:05,610 --> 03:41:09,199
[Music]

5060
03:41:06,879 --> 03:41:10,799
you could take more advantage of that uh

5061
03:41:09,199 --> 03:41:12,960
at the moment it's

5062
03:41:10,799 --> 03:41:15,840
the only thing that we really did there

5063
03:41:12,959 --> 03:41:18,079
is we just squished it down so we're

5064
03:41:15,840 --> 03:41:19,760
only computing a very small number of

5065
03:41:18,079 --> 03:41:23,120
light probes because since the world is

5066
03:41:19,760 --> 03:41:24,159
2d we don't need a lot of probes in z

5067
03:41:23,120 --> 03:41:26,479
right

5068
03:41:24,159 --> 03:41:30,079
um so we get a speed boost from the fact

5069
03:41:26,478 --> 03:41:31,599
that the world is not uh very large in z

5070
03:41:30,079 --> 03:41:34,318
but at the moment we really don't take

5071
03:41:31,600 --> 03:41:35,600
advantage of it any other way so we

5072
03:41:34,318 --> 03:41:38,559
could

5073
03:41:35,600 --> 03:41:40,720
eventually move to something that takes

5074
03:41:38,559 --> 03:41:43,920
more advantage of the 2d nature of

5075
03:41:40,719 --> 03:41:46,478
things but at the moment we don't really

5076
03:41:43,920 --> 03:41:46,478
you know what i mean

5077
03:41:55,199 --> 03:41:58,079
anyway

5078
03:41:56,559 --> 03:42:00,238
uh so

5079
03:41:58,079 --> 03:42:01,680
well that's

5080
03:42:00,238 --> 03:42:03,760
good to know

5081
03:42:01,680 --> 03:42:06,318
um so i guess the answer is the table

5082
03:42:03,760 --> 03:42:08,000
generator is now needs to get fixed

5083
03:42:06,318 --> 03:42:09,680
before we do anything else because we

5084
03:42:08,000 --> 03:42:10,398
can't really count on what we're looking

5085
03:42:09,680 --> 03:42:11,439
at

5086
03:42:10,398 --> 03:42:14,719
um

5087
03:42:11,439 --> 03:42:14,720
with the table so

5088
03:42:14,959 --> 03:42:17,198
um

5089
03:42:17,680 --> 03:42:22,398
so that kind of has to get

5090
03:42:19,920 --> 03:42:25,760
uh fixed i don't actually even remember

5091
03:42:22,398 --> 03:42:27,920
where we had that um it's not in the

5092
03:42:25,760 --> 03:42:29,439
light profiler

5093
03:42:27,920 --> 03:42:31,920
um

5094
03:42:29,439 --> 03:42:31,920
it's

5095
03:42:34,719 --> 03:42:38,398
h8 sphere right

5096
03:42:37,680 --> 03:42:42,159
so

5097
03:42:38,398 --> 03:42:43,760
um in hh sphere we go through and we

5098
03:42:42,159 --> 03:42:45,760
generate these distributions and the

5099
03:42:43,760 --> 03:42:46,960
place where those kind of null like

5100
03:42:45,760 --> 03:42:50,318
those

5101
03:42:46,959 --> 03:42:52,719
those bs distributions um i believe are

5102
03:42:50,318 --> 03:42:56,478
probably coming from like this

5103
03:42:52,719 --> 03:42:59,358
so um if we don't find uh something on

5104
03:42:56,478 --> 03:43:00,559
the sphere that can go out the

5105
03:42:59,359 --> 03:43:03,040
that can go in the direction we're

5106
03:43:00,559 --> 03:43:03,039
trying to go

5107
03:43:03,279 --> 03:43:07,840
for this particular one i think that's

5108
03:43:05,359 --> 03:43:08,880
probably what's happening there

5109
03:43:07,840 --> 03:43:11,760
uh

5110
03:43:08,879 --> 03:43:13,599
so yeah like hard to say

5111
03:43:11,760 --> 03:43:15,439
probably what we want to do here is just

5112
03:43:13,600 --> 03:43:17,680
switch to stratified sampling we can

5113
03:43:15,439 --> 03:43:18,840
probably fix this to be a little bit

5114
03:43:17,680 --> 03:43:20,639
better than it is

5115
03:43:18,840 --> 03:43:22,559
anyway um

5116
03:43:20,639 --> 03:43:24,159
but i think that's what we actually need

5117
03:43:22,559 --> 03:43:26,079
to do here so

5118
03:43:24,159 --> 03:43:26,959
this code probably needs to be cleaned

5119
03:43:26,079 --> 03:43:30,799
up

5120
03:43:26,959 --> 03:43:32,959
uh pretty much as the next thing to do

5121
03:43:30,799 --> 03:43:35,599
and then we can finish debugging the

5122
03:43:32,959 --> 03:43:36,879
raycasting which now i'm wondering you

5123
03:43:35,600 --> 03:43:37,920
know

5124
03:43:36,879 --> 03:43:39,599
how much

5125
03:43:37,920 --> 03:43:41,359
this has been contributing to our

5126
03:43:39,600 --> 03:43:44,318
lighting woes right

5127
03:43:41,359 --> 03:43:45,840
so fixing this table

5128
03:43:44,318 --> 03:43:47,840
uh maybe we should say that until next

5129
03:43:45,840 --> 03:43:50,079
weekend because we know exac that's

5130
03:43:47,840 --> 03:43:51,680
starting in you know fresh

5131
03:43:50,079 --> 03:43:52,719
so i think we kind of know what we have

5132
03:43:51,680 --> 03:43:54,559
to do

5133
03:43:52,719 --> 03:43:56,318
uh so maybe we save that until the next

5134
03:43:54,559 --> 03:43:58,639
time we

5135
03:43:56,318 --> 03:44:00,719
fix the table and we can while we're

5136
03:43:58,639 --> 03:44:02,719
doing that we reorganize the table so

5137
03:44:00,719 --> 03:44:04,879
that it it just samples in the correct

5138
03:44:02,719 --> 03:44:06,478
order so that this garbage goes away

5139
03:44:04,879 --> 03:44:08,398
right because now we don't have to use a

5140
03:44:06,478 --> 03:44:09,760
table that was built for the old system

5141
03:44:08,398 --> 03:44:11,198
we just build the table in the correct

5142
03:44:09,760 --> 03:44:12,559
order

5143
03:44:11,199 --> 03:44:15,120
when we build the table in the correct

5144
03:44:12,559 --> 03:44:18,318
order we will solve uh you know and

5145
03:44:15,120 --> 03:44:20,079
we'll fix what was happening here where

5146
03:44:18,318 --> 03:44:22,799
we weren't uh we're we're obviously

5147
03:44:20,079 --> 03:44:24,318
generating uh totally bogus

5148
03:44:22,799 --> 03:44:25,840
uh samples

5149
03:44:24,318 --> 03:44:27,439
so we'll you know we'll generate the

5150
03:44:25,840 --> 03:44:29,120
table that way

5151
03:44:27,439 --> 03:44:30,880
and uh

5152
03:44:29,120 --> 03:44:34,560
we can

5153
03:44:30,879 --> 03:44:34,559
then i think just

5154
03:44:39,760 --> 03:44:44,398
you know

5155
03:44:41,520 --> 03:44:47,359
at that point i think we just go

5156
03:44:44,398 --> 03:44:48,559
ahead with debugging the raycasting then

5157
03:44:47,359 --> 03:44:49,840
because

5158
03:44:48,559 --> 03:44:52,159
that should eliminate the problem we're

5159
03:44:49,840 --> 03:44:53,680
seeing currently and i don't know how

5160
03:44:52,159 --> 03:44:56,719
much of our problems that we're seeing

5161
03:44:53,680 --> 03:44:58,238
have to do with that the table being bad

5162
03:44:56,719 --> 03:45:01,760
because that may have caused other

5163
03:44:58,238 --> 03:45:04,799
problems as well you don't know how much

5164
03:45:01,760 --> 03:45:07,040
bad stuff there is in this table

5165
03:45:04,799 --> 03:45:07,039
um

5166
03:45:08,000 --> 03:45:12,879
it's also possible that the sample

5167
03:45:10,318 --> 03:45:14,318
directions now could just be randomized

5168
03:45:12,879 --> 03:45:17,438
samples that are

5169
03:45:14,318 --> 03:45:19,039
stratified inside

5170
03:45:17,439 --> 03:45:21,920
each of the different

5171
03:45:19,040 --> 03:45:24,960
octahedral regions

5172
03:45:21,920 --> 03:45:27,040
and that may actually be preferable now

5173
03:45:24,959 --> 03:45:28,799
so instead of doing poisson sampling

5174
03:45:27,040 --> 03:45:30,399
which is what we're doing before

5175
03:45:28,799 --> 03:45:32,799
it may make more sense now to switch to

5176
03:45:30,398 --> 03:45:37,920
basically stratified sampling where we

5177
03:45:32,799 --> 03:45:37,920
just say let's pick white noise inside

5178
03:45:39,520 --> 03:45:42,560
the

5179
03:45:40,879 --> 03:45:45,759
you know the xy

5180
03:45:42,559 --> 03:45:48,079
the the txty locations

5181
03:45:45,760 --> 03:45:48,079
um

5182
03:45:52,879 --> 03:45:56,799
it's probably still better to do poisson

5183
03:45:55,199 --> 03:45:59,960
distributions

5184
03:45:56,799 --> 03:45:59,959
i mean

5185
03:46:13,439 --> 03:46:18,000
you know it's probably still better

5186
03:46:16,879 --> 03:46:19,679
uh

5187
03:46:18,000 --> 03:46:21,199
because okay you're not allowed to

5188
03:46:19,680 --> 03:46:25,120
comment on that if your lame is

5189
03:46:21,199 --> 03:46:26,560
literally poisson process on twitch

5190
03:46:25,120 --> 03:46:28,000
poisson distributions are still going to

5191
03:46:26,559 --> 03:46:30,398
be better

5192
03:46:28,000 --> 03:46:31,920
so we probably just want to fix the

5193
03:46:30,398 --> 03:46:33,519
sphere distribution there's it's a

5194
03:46:31,920 --> 03:46:36,960
little bit hard because when you produce

5195
03:46:33,520 --> 03:46:37,920
a poisson distribution over the sphere

5196
03:46:36,959 --> 03:46:39,278
you

5197
03:46:37,920 --> 03:46:41,279
then have this problem of you're going

5198
03:46:39,279 --> 03:46:43,520
to have to be at least slightly over

5199
03:46:41,279 --> 03:46:45,279
sampling because otherwise you won't get

5200
03:46:43,520 --> 03:46:47,920
enough samples

5201
03:46:45,279 --> 03:46:49,600
falling within each one of your

5202
03:46:47,920 --> 03:46:53,439
grid locations each one of your

5203
03:46:49,600 --> 03:46:56,399
octahedral quadrants right

5204
03:46:53,439 --> 03:46:58,479
so you kind of have this problem

5205
03:46:56,398 --> 03:46:59,920
where you have to sort of set your

5206
03:46:58,478 --> 03:47:02,719
coefficients

5207
03:46:59,920 --> 03:47:05,680
conservatively so that you

5208
03:47:02,719 --> 03:47:08,079
you know you have a poisson distribution

5209
03:47:05,680 --> 03:47:09,680
but the poisson distribution is slightly

5210
03:47:08,079 --> 03:47:12,398
more dense than what you're actually

5211
03:47:09,680 --> 03:47:15,120
going to use so that when you go to pick

5212
03:47:12,398 --> 03:47:18,079
elements out of it you always know that

5213
03:47:15,120 --> 03:47:19,120
you'll have enough in each one of your

5214
03:47:18,079 --> 03:47:21,359
regions

5215
03:47:19,120 --> 03:47:21,359
right

5216
03:47:22,559 --> 03:47:26,879
um

5217
03:47:24,879 --> 03:47:28,559
and we could make the generator sort of

5218
03:47:26,879 --> 03:47:30,478
aware of that so one thing the generator

5219
03:47:28,559 --> 03:47:31,760
could do is it could sort of say well

5220
03:47:30,478 --> 03:47:34,000
look

5221
03:47:31,760 --> 03:47:35,120
we're going to keep increasing the

5222
03:47:34,000 --> 03:47:38,000
density

5223
03:47:35,120 --> 03:47:38,800
of the poisson distribution until we get

5224
03:47:38,000 --> 03:47:41,840
one

5225
03:47:38,799 --> 03:47:43,519
where there's the right number

5226
03:47:41,840 --> 03:47:46,680
um

5227
03:47:43,520 --> 03:47:46,680
you know

5228
03:47:51,359 --> 03:47:55,000
that seems plausible

5229
03:48:08,799 --> 03:48:11,799
uh

5230
03:48:18,000 --> 03:48:20,559
so yeah

5231
03:48:20,719 --> 03:48:23,840
sorry what's the question there

5232
03:48:22,639 --> 03:48:25,519
will it still be mapped to the

5233
03:48:23,840 --> 03:48:27,279
octahedral map because if so couldn't we

5234
03:48:25,520 --> 03:48:29,439
just generate the noise on there that

5235
03:48:27,279 --> 03:48:30,880
has a square surface right

5236
03:48:29,439 --> 03:48:33,760
um

5237
03:48:30,879 --> 03:48:37,438
so the problem with that is that we want

5238
03:48:33,760 --> 03:48:39,680
to sample the sphere evenly

5239
03:48:37,439 --> 03:48:41,880
you know what i'm saying

5240
03:48:39,680 --> 03:48:45,600
we don't care about sampling the

5241
03:48:41,879 --> 03:48:47,599
octahedral map evenly because the noise

5242
03:48:45,600 --> 03:48:52,640
in our lighting is going to come from

5243
03:48:47,600 --> 03:48:54,479
sampling the sphere evenly or unevenly

5244
03:48:52,639 --> 03:48:57,198
the fact that they have to then get

5245
03:48:54,478 --> 03:48:59,599
bucketed into

5246
03:48:57,199 --> 03:49:02,880
texels on the octahedral map

5247
03:48:59,600 --> 03:49:05,040
is kind of incidental right

5248
03:49:02,879 --> 03:49:06,559
so we just want to make sure that we

5249
03:49:05,040 --> 03:49:07,680
have

5250
03:49:06,559 --> 03:49:09,278
16

5251
03:49:07,680 --> 03:49:11,199
in each one

5252
03:49:09,279 --> 03:49:14,079
but we want them to be evenly

5253
03:49:11,199 --> 03:49:16,239
distributed on the sphere not on the

5254
03:49:14,079 --> 03:49:18,238
octahedron we don't care how they're

5255
03:49:16,238 --> 03:49:20,639
distributed on the octahedron at all

5256
03:49:18,238 --> 03:49:22,799
except that there needs to be 16 of them

5257
03:49:20,639 --> 03:49:25,840
per tile right

5258
03:49:22,799 --> 03:49:28,159
so i don't know that we really want to

5259
03:49:25,840 --> 03:49:29,359
generate them on the octahedron i mean

5260
03:49:28,159 --> 03:49:30,879
you could generate the energy but you

5261
03:49:29,359 --> 03:49:33,040
still want to measure

5262
03:49:30,879 --> 03:49:34,238
as far as the poisson nature of the

5263
03:49:33,040 --> 03:49:36,399
distribution you want to measure it on

5264
03:49:34,238 --> 03:49:38,318
the sphere not on the octahedron unless

5265
03:49:36,398 --> 03:49:40,879
i'm missing something there if that

5266
03:49:38,318 --> 03:49:40,879
makes sense

5267
03:49:41,680 --> 03:49:46,159
so

5268
03:49:43,840 --> 03:49:48,960
so i'm gonna say uh i think we're in

5269
03:49:46,159 --> 03:49:51,039
good shape here we

5270
03:49:48,959 --> 03:49:53,119
this is looking pretty good

5271
03:49:51,040 --> 03:49:55,120
i think we just need to then say all

5272
03:49:53,120 --> 03:49:57,359
right we're gonna do another the next

5273
03:49:55,120 --> 03:49:59,520
stream we start off the first thing we

5274
03:49:57,359 --> 03:50:02,079
do is rebuild the tables and we make

5275
03:49:59,520 --> 03:50:04,079
sure the tables are really good right so

5276
03:50:02,079 --> 03:50:06,159
that's our next goal and while we're

5277
03:50:04,079 --> 03:50:07,439
doing that we can nicely rearrange them

5278
03:50:06,159 --> 03:50:08,959
so that we step through the table

5279
03:50:07,439 --> 03:50:11,199
linearly here

5280
03:50:08,959 --> 03:50:11,198
right

5281
03:50:12,719 --> 03:50:15,920
and

5282
03:50:14,478 --> 03:50:19,198
i think

5283
03:50:15,920 --> 03:50:21,120
you could also so

5284
03:50:19,199 --> 03:50:23,520
the other nice thing about this is we

5285
03:50:21,120 --> 03:50:26,399
can change this to a single loop

5286
03:50:23,520 --> 03:50:28,800
so what we can do next time right

5287
03:50:26,398 --> 03:50:29,920
is you can replace this

5288
03:50:28,799 --> 03:50:35,840
loop

5289
03:50:29,920 --> 03:50:35,840
um with something that looks like this

5290
03:50:41,199 --> 03:50:46,520
or like

5291
03:50:43,520 --> 03:50:46,520
uh

5292
03:50:55,760 --> 03:50:58,398
so

5293
03:50:56,799 --> 03:51:01,398
imagine it looks something more like

5294
03:50:58,398 --> 03:51:01,398
this

5295
03:51:05,920 --> 03:51:10,079
you know

5296
03:51:07,279 --> 03:51:11,840
so now what because the only reason we

5297
03:51:10,079 --> 03:51:14,398
needed this internal loop in the first

5298
03:51:11,840 --> 03:51:17,439
place is because we need transfer pps to

5299
03:51:14,398 --> 03:51:21,519
write out correctly as a row

5300
03:51:17,439 --> 03:51:23,520
but we don't actually need to

5301
03:51:21,520 --> 03:51:24,960
do two loops we just need to make sure

5302
03:51:23,520 --> 03:51:27,600
that we're writing into the right slot

5303
03:51:24,959 --> 03:51:29,759
of this so we can just then change it to

5304
03:51:27,600 --> 03:51:30,720
us just streaming through all of these

5305
03:51:29,760 --> 03:51:33,199
values

5306
03:51:30,719 --> 03:51:34,478
and picking out the correct ray

5307
03:51:33,199 --> 03:51:36,319
you know what i'm saying

5308
03:51:34,478 --> 03:51:38,079
so the other thing we can do now is

5309
03:51:36,318 --> 03:51:39,600
change the table to just be like we

5310
03:51:38,079 --> 03:51:42,398
literally just walk through this entire

5311
03:51:39,600 --> 03:51:44,720
table doing this each time and in fact

5312
03:51:42,398 --> 03:51:46,559
we can't even do something we can't even

5313
03:51:44,719 --> 03:51:48,959
we can even do better than that we can

5314
03:51:46,559 --> 03:51:50,799
have it so that we don't pass sy anymore

5315
03:51:48,959 --> 03:51:52,559
what we can do instead is just have it

5316
03:51:50,799 --> 03:51:53,059
so that this

5317
03:51:52,559 --> 03:51:54,318
function

5318
03:51:53,059 --> 03:51:55,198
[Music]

5319
03:51:54,318 --> 03:51:57,760
here

5320
03:51:55,199 --> 03:52:00,479
um we can just have it so that this

5321
03:51:57,760 --> 03:52:01,520
actually executes

5322
03:52:00,478 --> 03:52:02,639
on

5323
03:52:01,520 --> 03:52:04,960
the

5324
03:52:02,639 --> 03:52:04,959
uh

5325
03:52:06,238 --> 03:52:09,840
on the outside of the syllabus we just

5326
03:52:08,559 --> 03:52:11,760
change this so that instead of the

5327
03:52:09,840 --> 03:52:14,079
octahedron being here the s

5328
03:52:11,760 --> 03:52:15,680
the sy loop is actually here and then we

5329
03:52:14,079 --> 03:52:17,439
change this because we don't really need

5330
03:52:15,680 --> 03:52:18,800
it so we can weld all of this together

5331
03:52:17,439 --> 03:52:20,159
now right

5332
03:52:18,799 --> 03:52:22,318
i don't think there's any way to really

5333
03:52:20,159 --> 03:52:22,318
do

5334
03:52:22,799 --> 03:52:28,238
anything

5335
03:52:24,120 --> 03:52:28,239
fancier than that but

5336
03:52:30,159 --> 03:52:33,520
yeah

5337
03:52:31,520 --> 03:52:37,120
um

5338
03:52:33,520 --> 03:52:37,120
but i think that's everything right

5339
03:52:37,439 --> 03:52:40,720
um so i do think next time we've got a

5340
03:52:39,279 --> 03:52:42,560
pretty clear set of things we know

5341
03:52:40,719 --> 03:52:43,679
exactly what we want to do so i think

5342
03:52:42,559 --> 03:52:46,398
that's fine

5343
03:52:43,680 --> 03:52:48,398
and so i think we'll call it here

5344
03:52:46,398 --> 03:52:51,358
and then we'll go

5345
03:52:48,398 --> 03:52:53,198
uh next time and just look at building

5346
03:52:51,359 --> 03:52:55,920
the table correctly so it's just one

5347
03:52:53,199 --> 03:52:57,680
stream you do it you do the stream

5348
03:52:55,920 --> 03:52:58,879
straight through

5349
03:52:57,680 --> 03:53:04,520
and

5350
03:52:58,879 --> 03:53:04,519
uh yeah and then and off you go

5351
03:53:15,439 --> 03:53:18,680
in fact

5352
03:53:22,318 --> 03:53:29,478
in fact you could just do

5353
03:53:26,478 --> 03:53:29,478
this

5354
03:53:36,719 --> 03:53:45,438
and only advanced transfer pps each time

5355
03:53:42,559 --> 03:53:49,680
i'm not sure so one thing that that is

5356
03:53:45,439 --> 03:53:51,520
just sort of a a bigger question here is

5357
03:53:49,680 --> 03:53:54,000
now that we know we're going to do this

5358
03:53:51,520 --> 03:53:56,159
entire like raycast

5359
03:53:54,000 --> 03:53:59,439
convolution thing here uh where we do

5360
03:53:56,159 --> 03:54:01,680
the entire set of rays all at once

5361
03:53:59,439 --> 03:54:04,960
it may also be the case that there's

5362
03:54:01,680 --> 03:54:06,479
just a smarter way to

5363
03:54:04,959 --> 03:54:09,119
batch them

5364
03:54:06,478 --> 03:54:09,119
than this

5365
03:54:11,840 --> 03:54:17,719
and that i don't know

5366
03:54:14,719 --> 03:54:17,719
so

5367
03:54:23,520 --> 03:54:25,439
so we'll have to think about that as

5368
03:54:24,719 --> 03:54:28,478
well

5369
03:54:25,439 --> 03:54:30,800
but for now i'm going to leave it there

5370
03:54:28,478 --> 03:54:33,679
and we will come back to this

5371
03:54:30,799 --> 03:54:36,079
next time all right

5372
03:54:33,680 --> 03:54:38,318
thank you everyone for joining me for

5373
03:54:36,079 --> 03:54:40,238
another episode of handmade hero

5374
03:54:38,318 --> 03:54:42,159
i will be back here next time to

5375
03:54:40,238 --> 03:54:45,279
regenerate that table

5376
03:54:42,159 --> 03:54:46,879
uh and then i think we will be in better

5377
03:54:45,279 --> 03:54:48,479
shape alright

5378
03:54:46,879 --> 03:54:52,198
take it easy everybody

5379
03:54:48,478 --> 03:54:52,198
i'll see you next time

