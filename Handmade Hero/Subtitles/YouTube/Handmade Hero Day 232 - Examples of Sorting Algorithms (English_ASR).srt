1
00:00:00,439 --> 00:00:06,120
start recording hello everyone and

2
00:00:04,290 --> 00:00:10,309
welcome to handmade Hero the show recode

3
00:00:06,120 --> 00:00:15,388
a complete game live on stream you know

4
00:00:10,308 --> 00:00:17,070
yesterday I asked for some people to

5
00:00:15,388 --> 00:00:19,079
post in the forums and we didn't get

6
00:00:17,070 --> 00:00:20,368
very much post in the forums just ok cuz

7
00:00:19,079 --> 00:00:22,979
maybe no one knows the answers to the

8
00:00:20,368 --> 00:00:25,948
question I was asking but I will say

9
00:00:22,980 --> 00:00:27,480
that even just on last night's dream I

10
00:00:25,949 --> 00:00:29,330
don't know who it was who originally

11
00:00:27,480 --> 00:00:31,768
posted the link to the MIT

12
00:00:29,329 --> 00:00:34,439
OpenCourseWare video that i retweeted on

13
00:00:31,768 --> 00:00:36,659
the on the on the tweet stream here this

14
00:00:34,439 --> 00:00:41,339
if you if you go to the tweet bot i

15
00:00:36,659 --> 00:00:47,788
retweeted it somewhere here this this

16
00:00:41,340 --> 00:00:50,129
right here this guy i thought that was a

17
00:00:47,789 --> 00:00:52,859
pretty good lecture i it was still a

18
00:00:50,128 --> 00:00:55,289
little opaque in some parts but honestly

19
00:00:52,859 --> 00:00:58,229
like it actually clarified a fair number

20
00:00:55,289 --> 00:01:00,989
of things for me on the whole PNP thing

21
00:00:58,229 --> 00:01:03,209
and why you often hear people either

22
00:01:00,988 --> 00:01:04,768
saying wrong things or saying things

23
00:01:03,210 --> 00:01:06,000
that sound conflicting and you're just

24
00:01:04,769 --> 00:01:13,130
like wait a minute I don't understand

25
00:01:06,000 --> 00:01:15,629
what are we actually saying here well

26
00:01:13,129 --> 00:01:18,449
like I said before I don't want to go

27
00:01:15,629 --> 00:01:20,250
into PNP kind of stuff too much because

28
00:01:18,450 --> 00:01:21,960
I don't really know anything about it so

29
00:01:20,250 --> 00:01:23,250
it doesn't make any sense for me to talk

30
00:01:21,959 --> 00:01:25,618
about it on the stream but I do like

31
00:01:23,250 --> 00:01:27,599
mentioning stuff like this just as sort

32
00:01:25,618 --> 00:01:29,400
of a sides because I feel like it maybe

33
00:01:27,599 --> 00:01:31,469
encourages people to go learn about

34
00:01:29,400 --> 00:01:35,790
these things so I'm just gonna briefly

35
00:01:31,469 --> 00:01:37,530
say what was on that video and hope that

36
00:01:35,790 --> 00:01:39,090
maybe some of you out there will be

37
00:01:37,530 --> 00:01:40,500
interested in it and you'll go take a

38
00:01:39,090 --> 00:01:41,790
look at it because obviously you can

39
00:01:40,500 --> 00:01:43,228
watch that video and it's MIT

40
00:01:41,790 --> 00:01:44,820
OpenCourseWare so you could then go

41
00:01:43,228 --> 00:01:47,700
watch a whole bunch of videos about this

42
00:01:44,819 --> 00:01:50,099
and maybe get interested in some of the

43
00:01:47,700 --> 00:01:51,570
theoretical CS stuff which is again not

44
00:01:50,099 --> 00:01:55,500
something we cover on handmade hero and

45
00:01:51,569 --> 00:01:57,569
not something I know but so here was the

46
00:01:55,500 --> 00:02:00,090
interesting diagram that he drew in that

47
00:01:57,569 --> 00:02:03,359
lecturer that I thought was pretty great

48
00:02:00,090 --> 00:02:06,359
and I think I figured out based on the

49
00:02:03,359 --> 00:02:09,360
way he was talking where one of my

50
00:02:06,359 --> 00:02:11,789
biggest confusions about how people talk

51
00:02:09,360 --> 00:02:13,959
about things like P and NP came in and

52
00:02:11,789 --> 00:02:16,989
so I'll just briefly say what those were

53
00:02:13,959 --> 00:02:20,259
again please don't take anything about

54
00:02:16,989 --> 00:02:22,420
to say as instructive because I am NOT a

55
00:02:20,259 --> 00:02:25,629
theoretical computer science person so I

56
00:02:22,419 --> 00:02:27,729
don't know I'm merely telling you what

57
00:02:25,629 --> 00:02:29,318
my impression was of this thing so he

58
00:02:27,729 --> 00:02:31,539
drew a pretty cool diagram and it kind

59
00:02:29,318 --> 00:02:33,699
of looked like this where he sort of

60
00:02:31,539 --> 00:02:36,009
said like okay let's pretend that we

61
00:02:33,699 --> 00:02:38,169
just have some notion of how difficult a

62
00:02:36,009 --> 00:02:39,459
problem is and he said I didn't really

63
00:02:38,169 --> 00:02:41,530
want to talk too much about that because

64
00:02:39,459 --> 00:02:43,090
in order to get more specific you had to

65
00:02:41,530 --> 00:02:44,890
start using terms that had very specific

66
00:02:43,090 --> 00:02:46,599
definitions and this is just meant to

67
00:02:44,889 --> 00:02:48,068
sort of a blanket picture so he didn't

68
00:02:46,599 --> 00:02:49,539
want to say complexity or anything like

69
00:02:48,068 --> 00:02:51,729
that but so he just said difficult like

70
00:02:49,539 --> 00:02:53,469
the problems get harder as we go in this

71
00:02:51,729 --> 00:02:54,639
direction so like the hardest problems

72
00:02:53,469 --> 00:02:57,580
would be out here and the easiest

73
00:02:54,639 --> 00:02:59,229
problems would be here and then he sort

74
00:02:57,580 --> 00:03:01,420
of like started like dividing up this

75
00:02:59,229 --> 00:03:05,169
line and what he did was he said like

76
00:03:01,419 --> 00:03:07,958
okay let's go ahead and talk about where

77
00:03:05,169 --> 00:03:10,238
things are in terms of like when we're

78
00:03:07,959 --> 00:03:11,920
saying P or NP what do we mean when

79
00:03:10,239 --> 00:03:13,269
we're talking about those things and he

80
00:03:11,919 --> 00:03:14,169
drew something that looked basically

81
00:03:13,269 --> 00:03:16,060
like this

82
00:03:14,169 --> 00:03:21,208
he said that P was like from here to

83
00:03:16,060 --> 00:03:23,890
here right and he's like you know NP is

84
00:03:21,209 --> 00:03:28,209
from here to here and then he goes like

85
00:03:23,889 --> 00:03:29,439
okay you know here is exp right which

86
00:03:28,209 --> 00:03:31,390
was something that I think I mentioned

87
00:03:29,439 --> 00:03:34,780
on the chat yesterday and then he was

88
00:03:31,389 --> 00:03:38,259
like okay then here is like R so he drew

89
00:03:34,780 --> 00:03:40,689
this little thing so already just having

90
00:03:38,259 --> 00:03:42,669
this this simple diagram and remember I

91
00:03:40,689 --> 00:03:46,120
I got confused on last dream although I

92
00:03:42,669 --> 00:03:47,768
think I kind of had this Osmo sized

93
00:03:46,120 --> 00:03:49,000
inner diffused into my brain for him

94
00:03:47,769 --> 00:03:50,889
because I was kind of thinking about it

95
00:03:49,000 --> 00:03:56,829
in a different way but remember NP is

96
00:03:50,889 --> 00:03:57,909
non-deterministic polynomial time and we

97
00:03:56,829 --> 00:03:59,739
could talk about that a bit later but

98
00:03:57,909 --> 00:04:01,299
that's just like you know P is

99
00:03:59,739 --> 00:04:04,090
definitely polynomial time we talked

100
00:04:01,299 --> 00:04:06,280
about that yesterday and this is not to

101
00:04:04,090 --> 00:04:08,170
respond all the time all right and these

102
00:04:06,280 --> 00:04:10,419
we don't know what they are yet all

103
00:04:08,169 --> 00:04:12,939
right so the first thing that

104
00:04:10,419 --> 00:04:14,229
immediately was kind of clarifying for

105
00:04:12,939 --> 00:04:18,100
me when you do this diagram was like oh

106
00:04:14,229 --> 00:04:19,569
I get it the reason why you start to get

107
00:04:18,100 --> 00:04:22,450
confused when you hear people talk about

108
00:04:19,569 --> 00:04:25,509
stuff with P and NP even if you don't

109
00:04:22,449 --> 00:04:27,579
even know what they mean is because NP

110
00:04:25,509 --> 00:04:31,538
is always like thought of as

111
00:04:27,579 --> 00:04:35,079
superset of P right so it's not like

112
00:04:31,538 --> 00:04:39,188
this is P and this is NP right it's like

113
00:04:35,079 --> 00:04:42,218
this is P and NP includes all of P in it

114
00:04:39,189 --> 00:04:45,520
right and so somebody might say that

115
00:04:42,218 --> 00:04:47,348
something was in NP even though it was

116
00:04:45,519 --> 00:04:48,188
actually polynomial time and they're not

117
00:04:47,348 --> 00:04:51,069
wrong

118
00:04:48,189 --> 00:04:53,110
does that make sense so like already

119
00:04:51,069 --> 00:04:55,030
that was kind of nice to see it drawn so

120
00:04:53,110 --> 00:04:56,530
clearly we're like oh these the way that

121
00:04:55,029 --> 00:04:59,378
computer scientists chose to break this

122
00:04:56,529 --> 00:05:01,418
down they didn't make the sets exclusive

123
00:04:59,379 --> 00:05:03,189
they made them like inclusive so it's

124
00:05:01,418 --> 00:05:05,109
like polynomial time is some set of

125
00:05:03,189 --> 00:05:07,360
algorithms non-deterministic polynomial

126
00:05:05,110 --> 00:05:11,379
time is like a bigger set that includes

127
00:05:07,360 --> 00:05:14,650
all of the original set right an exp and

128
00:05:11,379 --> 00:05:17,199
R and keep keep going out from there so

129
00:05:14,649 --> 00:05:18,818
like okay that's that's really nice like

130
00:05:17,199 --> 00:05:20,169
that was pretty clarifying I thought

131
00:05:18,819 --> 00:05:24,520
that was pretty good just to start with

132
00:05:20,168 --> 00:05:26,620
okay the next thing that he said that

133
00:05:24,519 --> 00:05:27,968
was really helpful I thought and he kind

134
00:05:26,620 --> 00:05:30,639
of didn't say this in the clearest way

135
00:05:27,968 --> 00:05:32,139
possible so I apologize maybe I

136
00:05:30,639 --> 00:05:33,939
misunderstood him but it seemed he

137
00:05:32,139 --> 00:05:35,740
seemed like after he said a bunch of

138
00:05:33,939 --> 00:05:37,750
things that kind of like routed you know

139
00:05:35,740 --> 00:05:39,788
zeroed in on this and I if this is

140
00:05:37,750 --> 00:05:42,658
actually the way the computer science

141
00:05:39,788 --> 00:05:45,250
fear theory people talk about it then

142
00:05:42,658 --> 00:05:47,228
now I understand why a lot of things

143
00:05:45,250 --> 00:05:50,288
they said weren't making sense before so

144
00:05:47,228 --> 00:05:52,269
this would be pretty great too and that

145
00:05:50,288 --> 00:05:53,889
is we mentioned np-hard in that it

146
00:05:52,269 --> 00:05:55,689
always seems to be used weird or used

147
00:05:53,889 --> 00:05:56,829
wrong and like I said on the previous

148
00:05:55,689 --> 00:05:58,209
thing I was like I don't even know what

149
00:05:56,829 --> 00:06:00,250
it means like I don't want to pretend to

150
00:05:58,209 --> 00:06:03,968
know I don't know I'll probably just get

151
00:06:00,250 --> 00:06:06,459
it wrong well this is sort of clarified

152
00:06:03,968 --> 00:06:08,379
as well and the np-complete thing which

153
00:06:06,459 --> 00:06:09,908
was also kind of annoying and when you

154
00:06:08,379 --> 00:06:11,289
hear people say it and blah blah blah

155
00:06:09,908 --> 00:06:12,968
and you never really know what any of

156
00:06:11,288 --> 00:06:16,329
this stuff is well he clarified that too

157
00:06:12,968 --> 00:06:18,639
which is pretty great what he basically

158
00:06:16,329 --> 00:06:23,408
said after going through a bunch of

159
00:06:18,639 --> 00:06:26,560
things was that hard means basically

160
00:06:23,408 --> 00:06:28,750
greater than or equal to right and this

161
00:06:26,560 --> 00:06:30,459
the equal to part was the part that

162
00:06:28,750 --> 00:06:32,168
always confused me because I thought

163
00:06:30,459 --> 00:06:34,299
when they said CS things they usually

164
00:06:32,168 --> 00:06:36,008
meant greater than so I thought when

165
00:06:34,300 --> 00:06:38,560
they would say something like np-hard

166
00:06:36,009 --> 00:06:41,338
what that meant was that it was like

167
00:06:38,560 --> 00:06:43,858
outside of NP like it was to this

168
00:06:41,338 --> 00:06:46,649
of NP right it's empty hard meaning I

169
00:06:43,858 --> 00:06:48,628
can't solve it using an NP algorithm

170
00:06:46,649 --> 00:06:50,759
right that's what I thought they meant

171
00:06:48,629 --> 00:06:52,588
but that's not what they mean when they

172
00:06:50,759 --> 00:06:56,338
say NP hard they mean greater than or

173
00:06:52,588 --> 00:06:59,579
equal to NP which I which never sunk in

174
00:06:56,338 --> 00:07:01,769
for me so what that means is that like

175
00:06:59,579 --> 00:07:04,288
right at this point where you transition

176
00:07:01,769 --> 00:07:06,629
from NP to X they're actually saying

177
00:07:04,288 --> 00:07:08,668
well it's either right at that point or

178
00:07:06,629 --> 00:07:12,088
this this direction so it could still be

179
00:07:08,668 --> 00:07:15,329
in NP but it's definitely not easier

180
00:07:12,088 --> 00:07:17,038
than anything in mp it's not right

181
00:07:15,329 --> 00:07:19,049
because these problems would you know if

182
00:07:17,038 --> 00:07:21,209
we imagine that we started breaking up

183
00:07:19,048 --> 00:07:23,959
NP problems into some finer

184
00:07:21,209 --> 00:07:27,179
discretization of how hard they were

185
00:07:23,959 --> 00:07:29,999
np-hard means that it's at the very end

186
00:07:27,178 --> 00:07:32,668
of those problems but it might still be

187
00:07:29,999 --> 00:07:34,619
there right so it's greater than or

188
00:07:32,668 --> 00:07:36,209
equal to it might be right there or it

189
00:07:34,619 --> 00:07:37,559
could be out here right but it might

190
00:07:36,209 --> 00:07:38,939
still be there so greater than or equal

191
00:07:37,559 --> 00:07:40,469
to that was like a big thing that was

192
00:07:38,939 --> 00:07:42,028
like oh that's nice now I get it

193
00:07:40,468 --> 00:07:43,468
when they say that it makes sense where

194
00:07:42,028 --> 00:07:45,499
it lines up so that's pretty cool

195
00:07:43,468 --> 00:07:48,988
second great thing from that lecture

196
00:07:45,499 --> 00:07:51,569
okay third great thing is finally saying

197
00:07:48,988 --> 00:07:55,948
what np-complete actually really means

198
00:07:51,569 --> 00:07:56,999
at least as far as the the part that I

199
00:07:55,949 --> 00:07:58,218
thought had always been kind of

200
00:07:56,999 --> 00:08:00,419
confusing about it

201
00:07:58,218 --> 00:08:02,459
np-complete doesn't actually mean that

202
00:08:00,418 --> 00:08:04,769
something is in NP that's not what they

203
00:08:02,459 --> 00:08:06,028
use that term to mean again a assuming

204
00:08:04,769 --> 00:08:07,829
that I understood what he was saying in

205
00:08:06,028 --> 00:08:10,678
this lecture correctly what they

206
00:08:07,829 --> 00:08:14,418
actually mean by np-complete is that

207
00:08:10,678 --> 00:08:17,488
they have proved both that it is in NP

208
00:08:14,418 --> 00:08:18,928
right meaning that that the first part

209
00:08:17,488 --> 00:08:21,448
of what you know the part that I would

210
00:08:18,928 --> 00:08:23,399
have thought np-complete meant they have

211
00:08:21,449 --> 00:08:27,088
proved that it is in NP so it's

212
00:08:23,399 --> 00:08:30,598
somewhere in here right but they have

213
00:08:27,088 --> 00:08:33,778
also proved it it is empty heart meaning

214
00:08:30,598 --> 00:08:37,799
that it has np-complete means literally

215
00:08:33,778 --> 00:08:39,479
this one point right here so np-complete

216
00:08:37,799 --> 00:08:40,978
does not mean that something like if

217
00:08:39,479 --> 00:08:43,199
something was in here if it was an

218
00:08:40,979 --> 00:08:44,519
easier problem in the NP space for

219
00:08:43,198 --> 00:08:47,008
whatever that means and I don't pretend

220
00:08:44,519 --> 00:08:48,808
to know but if it was an easier problem

221
00:08:47,009 --> 00:08:53,399
than the hardest problems at NP its not

222
00:08:48,808 --> 00:08:55,469
MP complete its it may be in NP and it

223
00:08:53,399 --> 00:08:57,629
may be not in P

224
00:08:55,470 --> 00:08:59,190
not that we can prove that yet because

225
00:08:57,629 --> 00:09:02,029
the whole thing about whether P equals

226
00:08:59,190 --> 00:09:04,440
NP right these might be the same but

227
00:09:02,029 --> 00:09:07,799
assuming they weren't the same it might

228
00:09:04,440 --> 00:09:09,450
be not in P and it may be in NP but it

229
00:09:07,799 --> 00:09:12,029
might still not be NP complete because

230
00:09:09,450 --> 00:09:16,350
if it isn't NP hard if it's not the

231
00:09:12,029 --> 00:09:18,600
hardest type of problem in NP then you

232
00:09:16,350 --> 00:09:19,950
wouldn't call it NP complete right now

233
00:09:18,600 --> 00:09:21,120
again we don't even know if that's

234
00:09:19,950 --> 00:09:22,740
possible like we don't know if it's

235
00:09:21,120 --> 00:09:24,360
possible for something to be in NP and

236
00:09:22,740 --> 00:09:26,159
that B and P complete like like I don't

237
00:09:24,360 --> 00:09:28,320
even know they didn't cover any of that

238
00:09:26,159 --> 00:09:30,899
so you need a real computer science

239
00:09:28,320 --> 00:09:32,610
theory guy to start talking about what

240
00:09:30,899 --> 00:09:34,620
else what other possibilities there are

241
00:09:32,610 --> 00:09:36,750
but I really liked that part was like oh

242
00:09:34,620 --> 00:09:38,460
okay I think I get it now I mean to the

243
00:09:36,750 --> 00:09:40,500
extent that a non theoretician is going

244
00:09:38,460 --> 00:09:41,790
to get it I think I get it now what you

245
00:09:40,500 --> 00:09:43,980
mean when you say NP complete you're

246
00:09:41,789 --> 00:09:47,159
saying that it's right here it's as hard

247
00:09:43,980 --> 00:09:50,009
as any other problem in NP and is in NP

248
00:09:47,159 --> 00:09:51,959
so it's not out here right and that was

249
00:09:50,009 --> 00:09:53,370
kind of solidifying okay so the other

250
00:09:51,960 --> 00:09:55,230
things that I thought were good in here

251
00:09:53,370 --> 00:09:57,269
is he talked about what's outside

252
00:09:55,230 --> 00:09:58,379
because that came up on the chat I asked

253
00:09:57,269 --> 00:09:59,669
about that I was like what is it called

254
00:09:58,379 --> 00:10:00,990
you know what are the heart of things

255
00:09:59,669 --> 00:10:02,699
are there heart of things do we know the

256
00:10:00,990 --> 00:10:03,389
law and it turns out that we do know a

257
00:10:02,700 --> 00:10:06,570
couple things

258
00:10:03,389 --> 00:10:07,649
exp is exponential time right and I

259
00:10:06,570 --> 00:10:09,030
talked about that

260
00:10:07,649 --> 00:10:12,439
which was like two to the end or

261
00:10:09,029 --> 00:10:15,899
whatever right exp is exponential time R

262
00:10:12,440 --> 00:10:20,160
is finite time which just means it it

263
00:10:15,899 --> 00:10:22,169
finishes like like I can be solved in in

264
00:10:20,159 --> 00:10:25,519
eons perhaps but not an infinite amount

265
00:10:22,169 --> 00:10:25,519
of time it doesn't take an infinite time

266
00:10:26,840 --> 00:10:33,450
and he said we do have examples of

267
00:10:30,809 --> 00:10:36,239
things that are in our but that are not

268
00:10:33,450 --> 00:10:39,180
in any of these so like this space out

269
00:10:36,240 --> 00:10:40,529
here right does have problems in it

270
00:10:39,179 --> 00:10:42,569
and he said that there are problems

271
00:10:40,529 --> 00:10:44,909
outside of our so this space out here

272
00:10:42,570 --> 00:10:46,890
does so like the halting problem which

273
00:10:44,909 --> 00:10:48,539
is just given a program can you tell

274
00:10:46,889 --> 00:10:50,490
whether it will ever actually finish or

275
00:10:48,539 --> 00:10:52,379
whether it will loop forever that

276
00:10:50,490 --> 00:10:53,970
problem is you know out here apparently

277
00:10:52,379 --> 00:10:56,669
again he just mentioned that kind of

278
00:10:53,970 --> 00:10:57,960
offhand to the lecture and you know he

279
00:10:56,669 --> 00:11:01,709
said they'd go into that later and

280
00:10:57,960 --> 00:11:03,710
whatever but anyway so it did kind of

281
00:11:01,710 --> 00:11:06,120
answer to these questions what he said

282
00:11:03,710 --> 00:11:07,800
and this was sort of what we talked

283
00:11:06,120 --> 00:11:08,379
about with the P equals NP thing you

284
00:11:07,799 --> 00:11:10,809
know being a

285
00:11:08,379 --> 00:11:13,509
question he just basically said well you

286
00:11:10,809 --> 00:11:16,329
know we don't know if this region really

287
00:11:13,509 --> 00:11:18,580
exists for all we know P and NP might be

288
00:11:16,330 --> 00:11:20,200
the same so like this might move you

289
00:11:18,580 --> 00:11:22,330
know all the way out to here someday and

290
00:11:20,200 --> 00:11:24,580
we just have that and then he also

291
00:11:22,330 --> 00:11:27,220
seemed to imply and I don't really know

292
00:11:24,580 --> 00:11:31,360
again not being a CS theory person I was

293
00:11:27,220 --> 00:11:33,820
like really okay I mean you know I cool

294
00:11:31,360 --> 00:11:36,850
he seemed to imply the same was true for

295
00:11:33,820 --> 00:11:38,650
NP + X he was saying that they didn't

296
00:11:36,850 --> 00:11:41,470
it's ever at least it sounded like they

297
00:11:38,649 --> 00:11:43,149
didn't even really know whether any of

298
00:11:41,470 --> 00:11:45,430
this range was actually partitioning

299
00:11:43,149 --> 00:11:48,279
ball it might be that P just goes all

300
00:11:45,429 --> 00:11:50,609
the way out to R and then there's R so

301
00:11:48,279 --> 00:11:53,379
there's just P n R it sounded like that

302
00:11:50,610 --> 00:11:55,120
but maybe I misinterpreted we was saying

303
00:11:53,379 --> 00:11:59,350
again that's not something I have any

304
00:11:55,120 --> 00:12:02,289
idea about not a CS person so no idea

305
00:11:59,350 --> 00:12:04,750
but anyway at least this stuff was

306
00:12:02,289 --> 00:12:06,250
pretty much easier to understand in his

307
00:12:04,750 --> 00:12:07,929
lecture than I've ever seen it presented

308
00:12:06,250 --> 00:12:09,610
before so that was pretty great

309
00:12:07,929 --> 00:12:12,189
it's a really easy lecture to watch it

310
00:12:09,610 --> 00:12:14,740
doesn't require any fancy math or

311
00:12:12,190 --> 00:12:16,510
anything and you know it he explains it

312
00:12:14,740 --> 00:12:18,580
in very intuitive way most of most of

313
00:12:16,509 --> 00:12:20,230
the things so I thought that was all

314
00:12:18,580 --> 00:12:21,340
pretty cool and so I would highly

315
00:12:20,230 --> 00:12:23,289
recommend if you think any of that's

316
00:12:21,340 --> 00:12:24,879
interesting to go check out that lecture

317
00:12:23,289 --> 00:12:27,549
it's an easy thing to watch it's fun

318
00:12:24,879 --> 00:12:28,809
sometime you just put it on and check it

319
00:12:27,549 --> 00:12:30,159
out and maybe you'll get interested in

320
00:12:28,809 --> 00:12:31,509
some of this stuff like I said it's all

321
00:12:30,159 --> 00:12:32,829
pretty interesting I've never really had

322
00:12:31,509 --> 00:12:34,149
time to look into it that's why I don't

323
00:12:32,830 --> 00:12:36,490
know any of it but that doesn't mean

324
00:12:34,149 --> 00:12:37,840
it's not interesting to know so maybe

325
00:12:36,490 --> 00:12:40,029
check it out give it something that

326
00:12:37,840 --> 00:12:42,399
piques your interest what I will say did

327
00:12:40,029 --> 00:12:43,870
not go so well cuz that went great I was

328
00:12:42,399 --> 00:12:45,490
like awesome that clarifies so many

329
00:12:43,870 --> 00:12:47,259
things maybe we can avoid making any

330
00:12:45,490 --> 00:12:48,639
more Naumann clay sure mistakes on the

331
00:12:47,259 --> 00:12:49,960
stream if I ever refer to this stuff

332
00:12:48,639 --> 00:12:52,029
which I don't know what I will but if I

333
00:12:49,960 --> 00:12:53,680
do that was really great I think it

334
00:12:52,029 --> 00:12:54,879
would help me in the future just having

335
00:12:53,679 --> 00:12:56,439
this mental picture it would help me

336
00:12:54,879 --> 00:12:58,299
from making stupid mistakes when I'm

337
00:12:56,440 --> 00:13:01,780
trying to you know refer to something

338
00:12:58,299 --> 00:13:04,990
right but the thing that did not go so

339
00:13:01,779 --> 00:13:06,970
well was traveling salesmen and so

340
00:13:04,990 --> 00:13:09,430
traveling salesmen I still want if

341
00:13:06,970 --> 00:13:11,470
somebody who's somebody who's a serious

342
00:13:09,429 --> 00:13:14,379
CS person ever watches the stream and

343
00:13:11,470 --> 00:13:16,930
wants to explain this a little bit

344
00:13:14,379 --> 00:13:18,909
better I would love to hear it so one

345
00:13:16,929 --> 00:13:20,379
thing that was clarified and this I mean

346
00:13:18,909 --> 00:13:21,659
you know again I don't really think this

347
00:13:20,379 --> 00:13:22,799
is all that relevant

348
00:13:21,659 --> 00:13:25,199
you know at least explains to the

349
00:13:22,799 --> 00:13:28,500
confusion if people said well the NP

350
00:13:25,200 --> 00:13:29,940
part like obviously these MP things they

351
00:13:28,500 --> 00:13:34,379
only deal with what's called decision

352
00:13:29,940 --> 00:13:35,580
problems right and we didn't really talk

353
00:13:34,379 --> 00:13:37,139
about that yesterday because again it's

354
00:13:35,580 --> 00:13:38,490
it's more CS theory kind of stuff but a

355
00:13:37,139 --> 00:13:40,500
decision problem is just something that

356
00:13:38,490 --> 00:13:43,860
returns like true or false right it's

357
00:13:40,500 --> 00:13:45,570
like bool function of something right

358
00:13:43,860 --> 00:13:47,039
it's like that's what we're talking

359
00:13:45,570 --> 00:13:49,170
about so the thing can return true or

360
00:13:47,039 --> 00:13:50,459
false that's the only kinds of functions

361
00:13:49,169 --> 00:13:51,740
that they talk about when they're trying

362
00:13:50,460 --> 00:13:54,900
to talk about NP

363
00:13:51,740 --> 00:13:57,360
you know why I don't pretend to know

364
00:13:54,899 --> 00:13:59,579
that's CS theory stuff like I said so

365
00:13:57,360 --> 00:14:00,960
don't know but that's what they were

366
00:13:59,580 --> 00:14:02,700
talking about so when they're talking

367
00:14:00,960 --> 00:14:04,530
about this class of NP problems they're

368
00:14:02,700 --> 00:14:09,480
talking about things that can be phrased

369
00:14:04,529 --> 00:14:12,299
like this so obviously traveling

370
00:14:09,480 --> 00:14:14,820
salesmen the one I refer to when I

371
00:14:12,299 --> 00:14:16,889
described it is find the shortest path

372
00:14:14,820 --> 00:14:18,510
right it was like a graph theory thing

373
00:14:16,889 --> 00:14:20,460
and we were saying oh there's these

374
00:14:18,509 --> 00:14:23,519
points in the graph find the shortest

375
00:14:20,460 --> 00:14:25,980
path through them right it was like you

376
00:14:23,519 --> 00:14:29,429
know if I've got some network of things

377
00:14:25,980 --> 00:14:36,870
here and basically I have a series of

378
00:14:29,429 --> 00:14:40,109
nodes like so and I want to know I want

379
00:14:36,870 --> 00:14:42,179
to visit all the nodes right and I want

380
00:14:40,110 --> 00:14:43,649
to visit all the nodes and I want to

381
00:14:42,179 --> 00:14:45,839
know the shortest route I could take

382
00:14:43,649 --> 00:14:47,789
that would visit all the nodes at least

383
00:14:45,840 --> 00:14:49,620
once right each node has to get hit

384
00:14:47,789 --> 00:14:53,309
what's the shortest path that would do

385
00:14:49,620 --> 00:14:55,289
that right and so what people were

386
00:14:53,309 --> 00:14:58,319
saying as well the decision version of

387
00:14:55,289 --> 00:15:00,599
this is we could we could turn that into

388
00:14:58,320 --> 00:15:02,070
because because if I want do that I'd

389
00:15:00,600 --> 00:15:04,920
have to return a path right

390
00:15:02,070 --> 00:15:06,480
I can't phrase that as bool F because if

391
00:15:04,919 --> 00:15:08,339
I want to find a shortest path will I

392
00:15:06,480 --> 00:15:09,960
need to return the path right it's a

393
00:15:08,340 --> 00:15:11,730
sequence it's like oh well start at node

394
00:15:09,960 --> 00:15:14,790
1 and go to node 5 and then fort right

395
00:15:11,730 --> 00:15:16,860
it has to return some some string of

396
00:15:14,789 --> 00:15:19,019
digits and a string of digits is not a

397
00:15:16,860 --> 00:15:22,529
boolean right

398
00:15:19,019 --> 00:15:25,740
and so what they do to turn this into a

399
00:15:22,529 --> 00:15:27,209
decision problem is they say well okay

400
00:15:25,740 --> 00:15:29,779
in order to turn this into a decision

401
00:15:27,210 --> 00:15:32,160
problem we'll just say is there a path

402
00:15:29,779 --> 00:15:35,079
shorter than some length that I'm going

403
00:15:32,159 --> 00:15:36,429
to give you so I'll say okay

404
00:15:35,080 --> 00:15:39,040
is there a path that reaches all the

405
00:15:36,429 --> 00:15:41,919
nodes that's shorter than length 15 now

406
00:15:39,039 --> 00:15:44,349
that's true or false right definitely

407
00:15:41,919 --> 00:15:46,809
true or false so now you can phrase it

408
00:15:44,350 --> 00:15:51,370
in in terms of this but you won't

409
00:15:46,809 --> 00:15:52,179
actually be able to you won't have the

410
00:15:51,370 --> 00:15:53,830
problem that we talked about yesterday

411
00:15:52,179 --> 00:15:55,659
of not being able to verify the path

412
00:15:53,830 --> 00:15:57,639
because now you don't have to verify

413
00:15:55,659 --> 00:15:59,500
that its shortest you just have to

414
00:15:57,639 --> 00:16:02,669
verify that it's 15 or less and you can

415
00:15:59,500 --> 00:16:04,990
do that by just walking the path right

416
00:16:02,669 --> 00:16:06,549
because one of the things is in this

417
00:16:04,990 --> 00:16:09,250
bool even though they're phrased this

418
00:16:06,549 --> 00:16:11,740
way the answer is still expected to be

419
00:16:09,250 --> 00:16:13,360
shown meaning you're still it's still

420
00:16:11,740 --> 00:16:15,340
supposed to be able to show you this

421
00:16:13,360 --> 00:16:18,159
inside so what you should be able to do

422
00:16:15,340 --> 00:16:20,110
is walk the path add up the values and

423
00:16:18,159 --> 00:16:21,939
end up with something less than 15 and

424
00:16:20,110 --> 00:16:24,430
verify that you visit all the node once

425
00:16:21,940 --> 00:16:25,960
obviously we could do that trivially so

426
00:16:24,429 --> 00:16:27,849
we don't have to worry about the problem

427
00:16:25,960 --> 00:16:30,639
I talked about yesterday of not having a

428
00:16:27,850 --> 00:16:32,920
verifier that runs in polynomial time so

429
00:16:30,639 --> 00:16:35,470
we could do that right and so what

430
00:16:32,919 --> 00:16:37,209
people were claiming is well that means

431
00:16:35,470 --> 00:16:40,480
that traveling the regular Traveling

432
00:16:37,210 --> 00:16:44,050
Salesman problem could easily be

433
00:16:40,480 --> 00:16:46,420
considered you know NP in terms of how

434
00:16:44,049 --> 00:16:50,199
hard it is because all you have to do is

435
00:16:46,419 --> 00:16:52,269
if you have if you had one of these that

436
00:16:50,200 --> 00:16:54,759
told you whether it was you know you

437
00:16:52,269 --> 00:16:56,710
could pass in is it less than 15 or

438
00:16:54,759 --> 00:16:59,230
whatever right and it would tell you yes

439
00:16:56,710 --> 00:17:01,150
or no then what you could do is you

440
00:16:59,230 --> 00:17:04,539
could just call that with a binary

441
00:17:01,149 --> 00:17:07,059
search on the you know the number right

442
00:17:04,539 --> 00:17:09,670
you could just say oh is there one

443
00:17:07,059 --> 00:17:11,588
that's less than 4000 no yeah okay

444
00:17:09,670 --> 00:17:13,420
is there one that's less than 8000 right

445
00:17:11,588 --> 00:17:16,359
and you could just keep picking numbers

446
00:17:13,420 --> 00:17:18,730
and binary search till you found the the

447
00:17:16,359 --> 00:17:22,599
thing and then that number and that path

448
00:17:18,730 --> 00:17:25,750
would be the shortest path okay what I

449
00:17:22,599 --> 00:17:26,889
don't understand about that though what

450
00:17:25,750 --> 00:17:28,690
I don't understand about that activation

451
00:17:26,890 --> 00:17:30,250
is why I say that I didn't feel like we

452
00:17:28,690 --> 00:17:32,200
quite got an explanation about

453
00:17:30,250 --> 00:17:34,539
travelling salesmen for the layman about

454
00:17:32,200 --> 00:17:36,490
whether it actually would be considered

455
00:17:34,539 --> 00:17:37,509
NP or not in the sense that again it's

456
00:17:36,490 --> 00:17:39,130
not a certain problem so I can't really

457
00:17:37,509 --> 00:17:42,339
be but how hard is it is it exponential

458
00:17:39,130 --> 00:17:44,940
or not the reason that it's a little bit

459
00:17:42,339 --> 00:17:48,369
that's a little assassin to me is

460
00:17:44,940 --> 00:17:48,910
assuming that we've got a cost for each

461
00:17:48,369 --> 00:17:50,979
of the

462
00:17:48,910 --> 00:17:54,040
routes you know like this is five and

463
00:17:50,980 --> 00:17:56,259
this is ten or whatever right the person

464
00:17:54,039 --> 00:17:58,839
who constructs this graph could just

465
00:17:56,259 --> 00:18:03,029
make sure that the weight of the the the

466
00:17:58,839 --> 00:18:06,849
costs here you know if there's n nodes

467
00:18:03,029 --> 00:18:08,319
right in this graph because this is what

468
00:18:06,849 --> 00:18:10,389
we're talking about the the complexity

469
00:18:08,319 --> 00:18:12,939
of this is you know oh two to the N

470
00:18:10,390 --> 00:18:15,700
currently we don't or actually no it's

471
00:18:12,940 --> 00:18:17,019
it's factorial I think right I think

472
00:18:15,700 --> 00:18:19,269
that's what traveling salesman is I

473
00:18:17,019 --> 00:18:21,940
don't remember but point being gets n

474
00:18:19,269 --> 00:18:25,690
factorial point being if you have n

475
00:18:21,940 --> 00:18:28,870
nodes right and what you're saying is

476
00:18:25,690 --> 00:18:30,490
well if we proved P equal to NP then I

477
00:18:28,869 --> 00:18:32,949
could give you a polynomial time

478
00:18:30,490 --> 00:18:36,150
algorithm that would tell you whether

479
00:18:32,950 --> 00:18:38,289
for a given size right whatever that is

480
00:18:36,150 --> 00:18:40,060
whether or not there was a path then I

481
00:18:38,289 --> 00:18:42,190
just binary search well that means

482
00:18:40,059 --> 00:18:45,069
there's some polynomial time thing right

483
00:18:42,190 --> 00:18:47,860
and then it's gonna be log you know n

484
00:18:45,069 --> 00:18:50,319
times that polynomial time oh isn't that

485
00:18:47,859 --> 00:18:53,319
in P well the thing that I have a

486
00:18:50,319 --> 00:18:55,869
problem of is this n the N is not the

487
00:18:53,319 --> 00:18:59,819
same in here right what it's gonna be

488
00:18:55,869 --> 00:19:02,709
log in is the sum of the route lengths

489
00:18:59,819 --> 00:19:05,379
right which is not part of the

490
00:19:02,710 --> 00:19:08,410
definition of the original n the route

491
00:19:05,380 --> 00:19:11,890
links are just freely settable so if I

492
00:19:08,410 --> 00:19:13,900
wanted to be if I wanted to be mean what

493
00:19:11,890 --> 00:19:15,759
I would do is I'd set the total route

494
00:19:13,900 --> 00:19:17,380
links in fact I can just set every route

495
00:19:15,759 --> 00:19:19,839
length because I'm being very mean I

496
00:19:17,380 --> 00:19:21,460
could just set the but I could just set

497
00:19:19,839 --> 00:19:30,359
the route links to be something that

498
00:19:21,460 --> 00:19:33,970
adds up to two to the two to the N right

499
00:19:30,359 --> 00:19:35,799
now just because you take log base two

500
00:19:33,970 --> 00:19:37,630
of it you still end up with a running

501
00:19:35,799 --> 00:19:40,210
time right you're taking log base two of

502
00:19:37,630 --> 00:19:42,850
this value well now you still end up

503
00:19:40,210 --> 00:19:45,940
with log base 2 of 2 to the 2 to the N

504
00:19:42,849 --> 00:19:51,069
which hey is just two n times P which is

505
00:19:45,940 --> 00:19:52,960
still exponential right so my feeling is

506
00:19:51,069 --> 00:19:54,759
that in order to claim that we would

507
00:19:52,960 --> 00:19:57,100
actually be able to solve the Traveling

508
00:19:54,759 --> 00:19:59,799
Salesman time in polynomial time given

509
00:19:57,099 --> 00:20:02,679
that P equalled NP if someone proved

510
00:19:59,799 --> 00:20:04,839
this someone would have to explain to me

511
00:20:02,680 --> 00:20:06,580
how that's actually going to work when

512
00:20:04,839 --> 00:20:08,709
you can when you can feel free to it

513
00:20:06,579 --> 00:20:10,119
seemingly confound that by just setting

514
00:20:08,710 --> 00:20:12,519
the route lengths to be sufficiently

515
00:20:10,119 --> 00:20:17,889
large that a binary search of them takes

516
00:20:12,519 --> 00:20:19,720
to end time now maybe it's just well you

517
00:20:17,890 --> 00:20:23,880
can be clever about how you binary

518
00:20:19,720 --> 00:20:26,110
search like binary search the the actual

519
00:20:23,880 --> 00:20:28,060
breakpoints of the things but then it

520
00:20:26,109 --> 00:20:30,699
assumes that you know how you might

521
00:20:28,059 --> 00:20:33,099
traverse the paths which should be 2 n

522
00:20:30,700 --> 00:20:38,250
different possible ways and so I don't

523
00:20:33,099 --> 00:20:49,589
know I am unconvinced Casey remains

524
00:20:38,250 --> 00:20:52,089
unconvinced that if P equals NP then

525
00:20:49,589 --> 00:20:54,309
real travelling salesman not the

526
00:20:52,089 --> 00:21:07,299
decision problem but real traveling

527
00:20:54,309 --> 00:21:09,129
salesman could be done in P time so that

528
00:21:07,299 --> 00:21:11,829
doesn't mean I think that that's wrong

529
00:21:09,130 --> 00:21:14,050
it just means because like I said not a

530
00:21:11,829 --> 00:21:16,119
cs30 person so I have no business saying

531
00:21:14,049 --> 00:21:17,889
wrong or not what I am saying is this

532
00:21:16,119 --> 00:21:20,019
explanation didn't convince me this

533
00:21:17,890 --> 00:21:22,240
explanation sounds like it's really just

534
00:21:20,019 --> 00:21:24,099
a cop-out and I could still construct

535
00:21:22,240 --> 00:21:26,079
problems that make it so you take to to

536
00:21:24,099 --> 00:21:27,219
the end time because a real solution the

537
00:21:26,079 --> 00:21:28,809
Traveling Salesman the wit in P time

538
00:21:27,220 --> 00:21:30,700
would not care what the route lengths

539
00:21:28,809 --> 00:21:33,309
are the route links are just numbers

540
00:21:30,700 --> 00:21:34,809
that are input to it but this is very

541
00:21:33,309 --> 00:21:37,750
dependent on those route lengths which

542
00:21:34,809 --> 00:21:39,190
introduces a whole other problem and so

543
00:21:37,750 --> 00:21:42,279
someone would have to say to me oh but

544
00:21:39,190 --> 00:21:44,769
that problem is also solved when P hears

545
00:21:42,279 --> 00:21:46,869
that solution right so I'd like to see

546
00:21:44,769 --> 00:21:48,700
that before I'm willing to say okay so

547
00:21:46,869 --> 00:21:50,289
Traveling Salesman still remains a

548
00:21:48,700 --> 00:21:51,700
little bit of a nastiness there but at

549
00:21:50,289 --> 00:21:53,649
least we got into why there was

550
00:21:51,700 --> 00:21:55,299
confusion because people who are saying

551
00:21:53,650 --> 00:21:56,350
it was an MP we're talking about the

552
00:21:55,299 --> 00:21:59,559
decision problem they're definitely

553
00:21:56,349 --> 00:22:01,569
right about that because that was

554
00:21:59,559 --> 00:22:03,159
mentioned in the lecture so that's not a

555
00:22:01,569 --> 00:22:05,379
question the question is more just

556
00:22:03,160 --> 00:22:08,259
actual travelling salesmen what's the

557
00:22:05,380 --> 00:22:09,790
deal there right so if you are a CS

558
00:22:08,259 --> 00:22:12,400
person whoever ends up watching this

559
00:22:09,789 --> 00:22:14,920
lecture and wants to do the handmade

560
00:22:12,400 --> 00:22:15,740
hero community or at least me a favor

561
00:22:14,920 --> 00:22:17,960
and post

562
00:22:15,740 --> 00:22:20,690
that explanation is I would love to see

563
00:22:17,960 --> 00:22:22,850
it just out of curiosity because hey I

564
00:22:20,690 --> 00:22:25,070
guess nobody really thinks P will ever

565
00:22:22,849 --> 00:22:29,899
be proven equal to MP anyway so it's

566
00:22:25,069 --> 00:22:32,240
largely academic but so is CS theory

567
00:22:29,900 --> 00:22:38,929
it's largely academic and it's it's

568
00:22:32,240 --> 00:22:40,370
interesting what can I say all right so

569
00:22:38,929 --> 00:22:42,160
hopefully that doesn't make you

570
00:22:40,369 --> 00:22:43,759
aggravated hopefully that makes you

571
00:22:42,160 --> 00:22:45,890
interested in going to watch that

572
00:22:43,759 --> 00:22:47,450
lecture because I know I had a great

573
00:22:45,890 --> 00:22:48,350
time watching it and I hope that other

574
00:22:47,450 --> 00:22:49,640
people will too

575
00:22:48,349 --> 00:22:51,169
thank you very much to ever post

576
00:22:49,640 --> 00:22:53,330
originally it was it long boolean I

577
00:22:51,170 --> 00:22:56,929
don't remember who posted it on the chat

578
00:22:53,329 --> 00:22:58,129
please take credit where credit is due

579
00:22:56,929 --> 00:23:00,559
for posting that initially someone

580
00:22:58,130 --> 00:23:02,300
posted on the chat like yesterday and

581
00:23:00,558 --> 00:23:05,299
and I washed it last night and it was

582
00:23:02,299 --> 00:23:07,369
great all right so let's get back to to

583
00:23:05,299 --> 00:23:10,129
our sorting situation here and the

584
00:23:07,369 --> 00:23:11,569
practical part of this right like I said

585
00:23:10,130 --> 00:23:12,740
all the CS theory stuff the reason I

586
00:23:11,569 --> 00:23:14,210
don't know it is cuz it never really

587
00:23:12,740 --> 00:23:15,890
comes up so I've never really been able

588
00:23:14,210 --> 00:23:17,929
to justify going to study it but the

589
00:23:15,890 --> 00:23:19,490
order notation part the simple part of

590
00:23:17,929 --> 00:23:21,140
just figuring out what the scalability

591
00:23:19,490 --> 00:23:22,160
is and algorithms I really do feel like

592
00:23:21,140 --> 00:23:23,929
it comes up a lot

593
00:23:22,160 --> 00:23:25,490
Tom Forsythe and I had exchanged on

594
00:23:23,929 --> 00:23:27,080
Twitter yesterday actually where he was

595
00:23:25,490 --> 00:23:28,940
saying he he was expecting me to rant

596
00:23:27,079 --> 00:23:30,889
about how it wasn't useful I don't know

597
00:23:28,940 --> 00:23:33,019
I think it is useful what can I say bye

598
00:23:30,890 --> 00:23:34,550
I love to rant you know I love to rant I

599
00:23:33,019 --> 00:23:36,079
love to complain about things or

600
00:23:34,549 --> 00:23:37,879
notations not one of them I think it's a

601
00:23:36,079 --> 00:23:40,029
great thing I'm glad that CS

602
00:23:37,880 --> 00:23:41,990
theoreticians works that stuff out I

603
00:23:40,029 --> 00:23:43,369
think about it all the time when I'm

604
00:23:41,990 --> 00:23:44,779
doing stuff if I'm working something

605
00:23:43,369 --> 00:23:47,389
like oh that's gonna be N squared like I

606
00:23:44,779 --> 00:23:49,428
think I'm in my head and I'm glad that

607
00:23:47,390 --> 00:23:51,679
you know that that sort of framework had

608
00:23:49,429 --> 00:23:53,929
been put in place for me the other stuff

609
00:23:51,679 --> 00:23:56,090
that I don't know the exp the R that's a

610
00:23:53,929 --> 00:23:57,350
do I see how I'd ever use that not

611
00:23:56,089 --> 00:23:58,428
really but you know at the same time

612
00:23:57,349 --> 00:24:01,669
like I said it's all interesting so

613
00:23:58,429 --> 00:24:03,140
that's good anyway and maybe someday it

614
00:24:01,670 --> 00:24:04,700
will be big you know maybe if I knew it

615
00:24:03,140 --> 00:24:05,809
really well I would be able to use it

616
00:24:04,700 --> 00:24:07,130
you know you never know until you

617
00:24:05,808 --> 00:24:08,599
actually know something really well it's

618
00:24:07,130 --> 00:24:09,590
hard to say whether it's gonna be

619
00:24:08,599 --> 00:24:12,139
practically useful because you don't

620
00:24:09,589 --> 00:24:13,339
know it so that's usually the case with

621
00:24:12,140 --> 00:24:14,480
math stuff when you learn it you're like

622
00:24:13,339 --> 00:24:16,159
oh you know what maybe I could use that

623
00:24:14,480 --> 00:24:19,579
maybe there's something I could do with

624
00:24:16,160 --> 00:24:21,558
that so anyway back to sorting we talked

625
00:24:19,579 --> 00:24:23,329
yesterday very briefly about the fact

626
00:24:21,558 --> 00:24:24,619
that our bubble squirt was sort was N

627
00:24:23,329 --> 00:24:26,149
squared and the reason that we were

628
00:24:24,619 --> 00:24:28,979
saying that it was N squared was because

629
00:24:26,150 --> 00:24:31,440
it takes n passes right

630
00:24:28,980 --> 00:24:33,029
/ n things right we have the the

631
00:24:31,440 --> 00:24:36,150
elements that we're trying to sort and

632
00:24:33,029 --> 00:24:39,178
we have to do n passes over that right

633
00:24:36,150 --> 00:24:41,690
so n passes times n things is M squared

634
00:24:39,179 --> 00:24:44,519
that was very easy and we could see it

635
00:24:41,690 --> 00:24:46,679
directly because actually I guess I

636
00:24:44,519 --> 00:24:50,179
don't have my code up yet but when we

637
00:24:46,679 --> 00:24:53,669
looked at the actual code in handmade

638
00:24:50,179 --> 00:24:57,870
code handmade render grip when we have

639
00:24:53,669 --> 00:24:59,940
our sort here see here there it is you

640
00:24:57,869 --> 00:25:01,558
can actually just see it here is the

641
00:24:59,940 --> 00:25:03,570
outer loop here's the inner loop if I

642
00:25:01,558 --> 00:25:05,490
multiply the number of things here it's

643
00:25:03,569 --> 00:25:07,319
count times and everything's here count

644
00:25:05,490 --> 00:25:09,539
minus 1 I get count squared - count

645
00:25:07,319 --> 00:25:12,119
which is obviously going to grow at the

646
00:25:09,539 --> 00:25:14,428
order of count squared now just in case

647
00:25:12,119 --> 00:25:15,479
that confuses people I know we said it a

648
00:25:14,429 --> 00:25:18,120
couple times just want to make sure

649
00:25:15,480 --> 00:25:20,069
everyone understands if I say something

650
00:25:18,119 --> 00:25:22,769
like the running time of this thing is N

651
00:25:20,069 --> 00:25:24,298
squared plus n why do we then say oh

652
00:25:22,769 --> 00:25:26,190
it's just N squared

653
00:25:24,298 --> 00:25:28,079
why do we say that where does the n go

654
00:25:26,190 --> 00:25:30,360
well the reason is because I only care

655
00:25:28,079 --> 00:25:32,369
about the worst case term because like I

656
00:25:30,359 --> 00:25:35,759
said you know N squared looks like this

657
00:25:32,369 --> 00:25:37,500
n looks like that as soon as I want to

658
00:25:35,759 --> 00:25:39,569
only talk about what happens at the

659
00:25:37,500 --> 00:25:41,789
limit of this thing well this dominates

660
00:25:39,569 --> 00:25:44,490
I don't care how much this is that's so

661
00:25:41,789 --> 00:25:47,250
minor at this point I don't care so this

662
00:25:44,490 --> 00:25:49,169
Plus this is not really my concern right

663
00:25:47,250 --> 00:25:50,400
I only care about this so when we do

664
00:25:49,169 --> 00:25:52,559
order notation we're strictly talking

665
00:25:50,400 --> 00:25:54,030
about hustling scales we could write

666
00:25:52,558 --> 00:25:55,678
this if we wanted to be a little more

667
00:25:54,029 --> 00:25:58,019
Civic nothing wrong with it but in

668
00:25:55,679 --> 00:25:59,910
general we don't really care we don't

669
00:25:58,019 --> 00:26:01,910
care about this that much because this

670
00:25:59,910 --> 00:26:04,440
will dominate as we get out to those

671
00:26:01,910 --> 00:26:06,210
those higher numbers and it just doesn't

672
00:26:04,440 --> 00:26:07,410
matter that there's an extra n in there

673
00:26:06,210 --> 00:26:11,130
because this is what's gonna kill you

674
00:26:07,410 --> 00:26:12,720
right so again that's because we're

675
00:26:11,130 --> 00:26:14,400
talking about scaling it's sort of like

676
00:26:12,720 --> 00:26:16,350
when you you know in math you let when

677
00:26:14,400 --> 00:26:17,880
you try to let things go to infinity you

678
00:26:16,349 --> 00:26:19,409
only care about certain things cuz other

679
00:26:17,880 --> 00:26:20,970
things disappear it's a little bit like

680
00:26:19,410 --> 00:26:22,320
that you only care about the dominant

681
00:26:20,970 --> 00:26:23,850
term when you're talking about scaling

682
00:26:22,319 --> 00:26:25,500
and these other terms that just will

683
00:26:23,849 --> 00:26:27,178
never be able to grow that fast it

684
00:26:25,500 --> 00:26:28,380
doesn't matter even if they were you

685
00:26:27,179 --> 00:26:32,880
know at higher constants or something

686
00:26:28,380 --> 00:26:34,710
it's just not gonna matter right so you

687
00:26:32,880 --> 00:26:37,200
can see in here that's what we had and

688
00:26:34,710 --> 00:26:39,210
this bubble sort was gonna have to take

689
00:26:37,200 --> 00:26:41,700
count passes over count minus 1 things

690
00:26:39,210 --> 00:26:44,190
and that's just too slow

691
00:26:41,700 --> 00:26:45,539
right again if we have a lot of items

692
00:26:44,190 --> 00:26:46,650
now why isn't it a problem in our

693
00:26:45,539 --> 00:26:52,859
current thing we don't have enough

694
00:26:46,650 --> 00:26:53,940
enemies and that brings us to the first

695
00:26:52,859 --> 00:27:00,359
thing that we should really point out

696
00:26:53,940 --> 00:27:07,019
here and that is scaling only matters if

697
00:27:00,359 --> 00:27:09,209
you actually scale right and so one of

698
00:27:07,019 --> 00:27:11,009
the problems with order notation is that

699
00:27:09,210 --> 00:27:14,250
it only really kicks in once you have a

700
00:27:11,009 --> 00:27:16,259
lot of items right what it's designed to

701
00:27:14,250 --> 00:27:18,269
do is to say what happens if we want to

702
00:27:16,259 --> 00:27:20,490
do these things in bulk a huge number of

703
00:27:18,269 --> 00:27:22,230
them it's very good at answering that

704
00:27:20,490 --> 00:27:23,730
question it's not very good at telling

705
00:27:22,230 --> 00:27:28,049
you what to do if you don't have very

706
00:27:23,730 --> 00:27:31,470
many things and unfortunately very many

707
00:27:28,049 --> 00:27:33,359
things can differ quite a bit depending

708
00:27:31,470 --> 00:27:35,430
on the algorithm and why does it differ

709
00:27:33,359 --> 00:27:37,949
well if you remember I talked a little

710
00:27:35,430 --> 00:27:39,870
bit yesterday about constants what I

711
00:27:37,950 --> 00:27:40,830
said was that well if I want to talk

712
00:27:39,869 --> 00:27:43,139
about the order of something

713
00:27:40,829 --> 00:27:45,649
execution-wise I say that there's some

714
00:27:43,140 --> 00:27:49,830
constant right maybe I say there's C -

715
00:27:45,650 --> 00:27:53,220
you know M squared plus C 1 and plus C 0

716
00:27:49,829 --> 00:27:56,309
right and what I'm talking about here is

717
00:27:53,220 --> 00:27:58,650
like the cost for doing the N squared

718
00:27:56,309 --> 00:28:00,210
part of things right whatever that part

719
00:27:58,650 --> 00:28:02,340
of the algorithm is is might be one

720
00:28:00,210 --> 00:28:03,750
thing the cost for doing the linear part

721
00:28:02,339 --> 00:28:04,859
might be another and then there might

722
00:28:03,750 --> 00:28:06,599
just be some overhead

723
00:28:04,859 --> 00:28:07,979
right some startup cost it doesn't

724
00:28:06,599 --> 00:28:10,169
matter how many things I process I'm

725
00:28:07,980 --> 00:28:11,700
always gonna pay it right you can

726
00:28:10,170 --> 00:28:14,519
imagine this being a very kind of like

727
00:28:11,700 --> 00:28:16,769
crude way of talking a little bit about

728
00:28:14,519 --> 00:28:19,769
how much it costs to execute something

729
00:28:16,769 --> 00:28:22,619
right and what you can see from this

730
00:28:19,769 --> 00:28:24,629
sort of thing here is that these C's

731
00:28:22,619 --> 00:28:27,089
will not matter at all

732
00:28:24,630 --> 00:28:29,780
when I let and get very large right as n

733
00:28:27,089 --> 00:28:33,480
gets very large right billions trillions

734
00:28:29,779 --> 00:28:36,629
infinity when it gets very large only

735
00:28:33,480 --> 00:28:38,490
the biggest term will count right only

736
00:28:36,630 --> 00:28:40,770
the biggest term because it doesn't

737
00:28:38,490 --> 00:28:43,440
matter what the C is unless the C is 0 n

738
00:28:40,769 --> 00:28:44,849
squared will be so much larger than n by

739
00:28:43,440 --> 00:28:47,190
the time we get out to those very large

740
00:28:44,849 --> 00:28:53,369
numbers that even if the C one part

741
00:28:47,190 --> 00:28:55,289
right was very very very even if the C

742
00:28:53,369 --> 00:28:58,109
one part was very very big and

743
00:28:55,289 --> 00:29:00,750
two part was very very small so that at

744
00:28:58,109 --> 00:29:02,609
the beginning the N squared term even

745
00:29:00,750 --> 00:29:04,140
though it's a larger term was getting

746
00:29:02,609 --> 00:29:07,109
multiplied by very small coefficient

747
00:29:04,140 --> 00:29:08,670
right eventually I'll get so that n

748
00:29:07,109 --> 00:29:10,949
square is so big that no matter how tiny

749
00:29:08,670 --> 00:29:12,600
this is it doesn't matter right so when

750
00:29:10,950 --> 00:29:14,279
we talk about order notation we're sort

751
00:29:12,599 --> 00:29:16,349
of what talking about what happens at

752
00:29:14,279 --> 00:29:19,769
the limit as we scale this thing and

753
00:29:16,349 --> 00:29:22,109
that's why we care about this part about

754
00:29:19,769 --> 00:29:24,329
what this highest exponent is that's why

755
00:29:22,109 --> 00:29:27,929
that's what we say N squared that's why

756
00:29:24,329 --> 00:29:31,589
we say that about it right but since we

757
00:29:27,930 --> 00:29:33,240
are not always at the limit when we're

758
00:29:31,589 --> 00:29:35,819
talking about game programming and

759
00:29:33,240 --> 00:29:38,730
practical programming things the C's

760
00:29:35,819 --> 00:29:40,980
actually matter and so what happens is a

761
00:29:38,730 --> 00:29:42,930
vote how many items are you sorting well

762
00:29:40,980 --> 00:29:46,529
I don't know let's find out actually how

763
00:29:42,930 --> 00:29:49,259
many items are we sorting you know it's

764
00:29:46,529 --> 00:29:51,509
not infinity I'll give you a hint so

765
00:29:49,259 --> 00:29:55,710
let's go ahead and break there on that

766
00:29:51,509 --> 00:29:58,980
guy sort entries sort entries let's go

767
00:29:55,710 --> 00:30:00,299
ahead and run there here's a typical

768
00:29:58,980 --> 00:30:03,509
call to store instances probably

769
00:30:00,299 --> 00:30:09,259
rendering our cutscene and count just

770
00:30:03,509 --> 00:30:10,650
one okay great so that's that that's one

771
00:30:09,259 --> 00:30:16,079
let's count

772
00:30:10,650 --> 00:30:22,759
now let's see here also one can we ever

773
00:30:16,079 --> 00:30:22,759
get more than 179 there we go

774
00:30:23,059 --> 00:30:28,589
looks like 80 is somewhere around where

775
00:30:25,799 --> 00:30:32,190
we're at let's try running the game this

776
00:30:28,589 --> 00:30:38,659
is the cutscene let's see where that's

777
00:30:32,190 --> 00:30:42,180
at County is a hundred count is 160 yeah

778
00:30:38,660 --> 00:30:45,360
so what we're talking about curious it's

779
00:30:42,180 --> 00:30:49,470
not that large right it's 160 that's the

780
00:30:45,359 --> 00:30:53,969
number so what that means is that 160

781
00:30:49,470 --> 00:30:58,289
well you know what's 160 squared all

782
00:30:53,970 --> 00:31:00,539
right 25,000 anyone here think that a

783
00:30:58,289 --> 00:31:02,599
computer has trouble processing 25,000

784
00:31:00,539 --> 00:31:05,309
things No

785
00:31:02,599 --> 00:31:06,750
so one of the problems that were faced

786
00:31:05,309 --> 00:31:09,240
with very frequently when we're dealing

787
00:31:06,750 --> 00:31:12,450
with actual practical usage

788
00:31:09,240 --> 00:31:14,009
these things is we may be below the

789
00:31:12,450 --> 00:31:15,840
point where the numbers are growing

790
00:31:14,009 --> 00:31:17,609
large enough to start ignoring what the

791
00:31:15,839 --> 00:31:21,720
seas are or even carrying what the seas

792
00:31:17,609 --> 00:31:23,699
are so it may be for example one common

793
00:31:21,720 --> 00:31:25,410
thing is that let's say we have

794
00:31:23,700 --> 00:31:27,690
something that's N squared and something

795
00:31:25,410 --> 00:31:29,970
that's n but the number of things we're

796
00:31:27,690 --> 00:31:32,700
doing is so low that these values don't

797
00:31:29,970 --> 00:31:35,339
actually come out to be very large right

798
00:31:32,700 --> 00:31:36,450
so maybe our n squared is 25,000 right

799
00:31:35,339 --> 00:31:38,699
so we have one thing that would do

800
00:31:36,450 --> 00:31:40,799
something 160 times and one things that

801
00:31:38,700 --> 00:31:42,210
would do it 25,000 times right those

802
00:31:40,799 --> 00:31:44,399
would be the two algorithms this is

803
00:31:42,210 --> 00:31:46,319
algorithm a this is algorithm B they

804
00:31:44,400 --> 00:31:48,870
both do the same thing one so N squared

805
00:31:46,319 --> 00:31:52,139
1 so n we know that this will do 160

806
00:31:48,869 --> 00:31:58,069
this does turn in twenty twenty-five

807
00:31:52,140 --> 00:32:01,050
thousand well how much slower would each

808
00:31:58,069 --> 00:32:02,970
operation in B have to be in order for

809
00:32:01,049 --> 00:32:04,619
it to be s slow as a well we already

810
00:32:02,970 --> 00:32:06,569
know it's doing a hundred sixty things

811
00:32:04,619 --> 00:32:11,759
so if it was a hundred and sixty times

812
00:32:06,569 --> 00:32:13,470
slower that would be enough right well

813
00:32:11,759 --> 00:32:15,480
what sort of thing is on the magnitude

814
00:32:13,470 --> 00:32:18,960
of a hundred and sixty times slower a

815
00:32:15,480 --> 00:32:20,789
cache miss right you will oftentimes

816
00:32:18,960 --> 00:32:23,250
wait for hundreds of cycles on a cache

817
00:32:20,789 --> 00:32:26,819
miss depending on the processor and so

818
00:32:23,250 --> 00:32:28,920
if B was an extremely extremely cache

819
00:32:26,819 --> 00:32:31,019
unfriendly thing to do let's say don't

820
00:32:28,920 --> 00:32:33,000
know how but let's say it was and a was

821
00:32:31,019 --> 00:32:35,759
extremely extremely cache friendly you

822
00:32:33,000 --> 00:32:37,650
might see the kind of thing worse for a

823
00:32:35,759 --> 00:32:42,539
lot of workloads a was actually somehow

824
00:32:37,650 --> 00:32:45,509
faster and B was slower now if you crank

825
00:32:42,539 --> 00:32:48,389
that number up to like 100 billion all

826
00:32:45,509 --> 00:32:49,890
of a sudden there's no way you're ever

827
00:32:48,390 --> 00:32:53,310
gonna want to do anything other than one

828
00:32:49,890 --> 00:32:55,710
because a will take forever but if you

829
00:32:53,309 --> 00:32:59,789
never do that all bets are off

830
00:32:55,710 --> 00:33:04,470
right furthermore the other thing that

831
00:32:59,789 --> 00:33:08,789
may happen and I'm gonna mention

832
00:33:04,470 --> 00:33:11,279
quicksort here pretty soon because it's

833
00:33:08,789 --> 00:33:15,059
relevant is that remember when we talk

834
00:33:11,279 --> 00:33:18,149
about Oh N squared versus Oh n we are

835
00:33:15,059 --> 00:33:19,859
talking about worst case right we talked

836
00:33:18,150 --> 00:33:21,570
about this yesterday when we say

837
00:33:19,859 --> 00:33:23,069
something's Oh M squared we don't mean

838
00:33:21,569 --> 00:33:27,240
that it takes Oh N squared

839
00:33:23,069 --> 00:33:30,778
time we mean that it might take oh in

840
00:33:27,240 --> 00:33:33,388
squared time it could often only take oh

841
00:33:30,778 --> 00:33:36,599
end time it could often take oh one time

842
00:33:33,388 --> 00:33:37,079
we have no idea how much time it might

843
00:33:36,599 --> 00:33:39,959
take

844
00:33:37,079 --> 00:33:43,048
we just know it won't take more than N

845
00:33:39,960 --> 00:33:44,880
squared running time right and so what

846
00:33:43,048 --> 00:33:47,658
might very well happen is there might be

847
00:33:44,880 --> 00:33:50,820
a great algorithm that's Oh N squared

848
00:33:47,659 --> 00:33:54,570
but it almost always performs its work

849
00:33:50,819 --> 00:33:58,259
actually in Oh n time and so as the case

850
00:33:54,569 --> 00:33:59,819
with sorts for example we know that this

851
00:33:58,259 --> 00:34:01,679
is quicksort right here we haven't

852
00:33:59,819 --> 00:34:04,829
talked about it yet quicksort is an O n

853
00:34:01,679 --> 00:34:06,360
squared algorithm right merge sort

854
00:34:04,829 --> 00:34:11,940
the one that I talked about the other

855
00:34:06,359 --> 00:34:14,608
day is actually o log n well and log n

856
00:34:11,940 --> 00:34:18,210
right and we talked about what that

857
00:34:14,608 --> 00:34:21,389
means right so it's log base two so it's

858
00:34:18,210 --> 00:34:24,269
the it's two to the x equals n solve for

859
00:34:21,389 --> 00:34:27,000
X right it's it's what 2 raised to what

860
00:34:24,269 --> 00:34:28,918
power equals n so a very flattening

861
00:34:27,000 --> 00:34:30,179
function no matter how big you make end

862
00:34:28,918 --> 00:34:32,088
this comes out to be a pretty small

863
00:34:30,179 --> 00:34:34,800
number because it's log base two right

864
00:34:32,088 --> 00:34:36,599
it's the opposite of how nasty this is

865
00:34:34,800 --> 00:34:39,149
it's like a very good thing it's it's

866
00:34:36,599 --> 00:34:43,200
sort of reducing our number by a lot so

867
00:34:39,148 --> 00:34:46,588
we have an O log N and log N and we have

868
00:34:43,199 --> 00:34:48,568
an O n squared now quicksort actually

869
00:34:46,588 --> 00:34:49,648
I'm telling you these two sorts this one

870
00:34:48,568 --> 00:34:51,929
you've seen this one you haven't seen

871
00:34:49,648 --> 00:34:55,138
yet quicksort is Oh N squared merge sort

872
00:34:51,929 --> 00:34:57,930
is Oh n log n however the C runtime

873
00:34:55,139 --> 00:34:59,910
library chose to implement this one this

874
00:34:57,929 --> 00:35:02,309
is the default sort now why on earth

875
00:34:59,909 --> 00:35:04,769
would they do that why would they make

876
00:35:02,309 --> 00:35:07,500
the default sort the N squared when they

877
00:35:04,769 --> 00:35:09,088
know full well there is a trivial I mean

878
00:35:07,500 --> 00:35:11,309
I showed you how easy it was we did it

879
00:35:09,088 --> 00:35:13,199
on the blackboard right a trivial sort

880
00:35:11,309 --> 00:35:16,318
that would not have been that way and

881
00:35:13,199 --> 00:35:18,929
the answer is because quicksort most of

882
00:35:16,318 --> 00:35:21,210
the time actually doesn't go n squared

883
00:35:18,929 --> 00:35:23,549
most of the time quick sorts actually Oh

884
00:35:21,210 --> 00:35:30,000
n that's this expected running time is

885
00:35:23,550 --> 00:35:31,530
not N squared and it turns out that it's

886
00:35:30,000 --> 00:35:32,940
expected running time in practice when

887
00:35:31,530 --> 00:35:34,829
measured is often times faster than

888
00:35:32,940 --> 00:35:36,088
merge sort at least back in the day when

889
00:35:34,829 --> 00:35:36,960
they were running on the kinds of

890
00:35:36,088 --> 00:35:39,449
machines

891
00:35:36,960 --> 00:35:40,740
that they were using for the C runtime

892
00:35:39,449 --> 00:35:43,049
library when that was being developed

893
00:35:40,739 --> 00:35:44,669
right so that's another thing that can

894
00:35:43,050 --> 00:35:46,230
happen is you can get caught up thinking

895
00:35:44,670 --> 00:35:47,909
about the worst case that the worst case

896
00:35:46,230 --> 00:35:49,559
isn't actually the one that you ever hit

897
00:35:47,909 --> 00:35:50,098
where you hit it very rarely and don't

898
00:35:49,559 --> 00:35:52,108
care

899
00:35:50,099 --> 00:35:53,519
for example now that's where the thing

900
00:35:52,108 --> 00:35:54,659
tends to make me pretty nervous I don't

901
00:35:53,519 --> 00:35:56,070
like knowing that there's some kind of

902
00:35:54,659 --> 00:35:58,230
worse case hiding in my thing that might

903
00:35:56,070 --> 00:36:00,210
make me explode but you know again it

904
00:35:58,230 --> 00:36:01,800
depends on the app application it tends

905
00:36:00,210 --> 00:36:04,139
on what you're doing if it's the case

906
00:36:01,800 --> 00:36:07,680
that it means like one frame out of a

907
00:36:04,139 --> 00:36:09,569
billion you hit a stutter maybe that's

908
00:36:07,679 --> 00:36:11,848
fine because let's face it the graphics

909
00:36:09,570 --> 00:36:13,680
driver an Adobe Acrobat and whatever

910
00:36:11,849 --> 00:36:15,539
other garbage the user has running on

911
00:36:13,679 --> 00:36:18,659
their machine the updater for

912
00:36:15,539 --> 00:36:20,009
again the updater for flash might decide

913
00:36:18,659 --> 00:36:22,108
to run right in the middle of your game

914
00:36:20,010 --> 00:36:25,470
and that's tons of lag frames right

915
00:36:22,108 --> 00:36:27,179
there maybe the fact that sometimes once

916
00:36:25,469 --> 00:36:29,338
in a blue moon in this rare case you get

917
00:36:27,179 --> 00:36:33,960
just the right input to guilt om squared

918
00:36:29,338 --> 00:36:37,588
on some album that wasn't that way maybe

919
00:36:33,960 --> 00:36:39,329
that's fine right but if it's something

920
00:36:37,588 --> 00:36:40,980
that's absolutely time critical and you

921
00:36:39,329 --> 00:36:43,230
know that you cannot afford something

922
00:36:40,980 --> 00:36:45,329
like that maybe it's not such a good

923
00:36:43,230 --> 00:36:47,369
decision and then maybe even though you

924
00:36:45,329 --> 00:36:49,440
know that this will be faster most of

925
00:36:47,369 --> 00:36:52,410
the time maybe you pick this because you

926
00:36:49,440 --> 00:36:55,139
don't want to risk having that just

927
00:36:52,409 --> 00:36:59,819
perfectly Allah the stars aligned and I

928
00:36:55,139 --> 00:37:01,679
went M squared on my quicksort right so

929
00:36:59,820 --> 00:37:02,820
that's another thing to be aware of is

930
00:37:01,679 --> 00:37:04,559
that when you look at these order

931
00:37:02,820 --> 00:37:05,760
notation things you need to be aware of

932
00:37:04,559 --> 00:37:07,079
what they're telling you is the worst

933
00:37:05,760 --> 00:37:09,359
thing that could happen they're not

934
00:37:07,079 --> 00:37:11,579
necessarily telling you the average or

935
00:37:09,358 --> 00:37:13,259
expected or anything else they're just

936
00:37:11,579 --> 00:37:15,358
kind of saying hey ma'am

937
00:37:13,260 --> 00:37:18,420
this is what what could happen in the

938
00:37:15,358 --> 00:37:20,429
worst case alright so let's talk about

939
00:37:18,420 --> 00:37:22,230
some other sorts here just kind of

940
00:37:20,429 --> 00:37:24,960
briefly I'll talk about some of the ones

941
00:37:22,230 --> 00:37:26,219
that we that have been mentioned and

942
00:37:24,960 --> 00:37:27,539
I'll just briefly sort of say what they

943
00:37:26,219 --> 00:37:29,009
are before we get around it know if

944
00:37:27,539 --> 00:37:30,449
we'll have time today to really write

945
00:37:29,010 --> 00:37:32,670
one where because I kind of decided it

946
00:37:30,449 --> 00:37:33,659
was we need a more blackboard time bathe

947
00:37:32,670 --> 00:37:35,820
because I kind of wanted to talk about

948
00:37:33,659 --> 00:37:39,539
some of the stuff that I saw in that

949
00:37:35,820 --> 00:37:41,609
that cool lecture yesterday all right so

950
00:37:39,539 --> 00:37:43,650
anyway let's talk about some sorting

951
00:37:41,608 --> 00:37:46,380
algorithms here and what they what they

952
00:37:43,650 --> 00:37:49,889
do so you know that there was the bubble

953
00:37:46,380 --> 00:37:50,640
sort we talked about that one already I

954
00:37:49,889 --> 00:37:52,799
showed you

955
00:37:50,639 --> 00:37:54,690
sort which is just we break the problem

956
00:37:52,800 --> 00:37:56,820
down to pieces sort the pieces and then

957
00:37:54,690 --> 00:37:57,510
merge the pieces together so we have

958
00:37:56,820 --> 00:37:59,280
bubble sort

959
00:37:57,510 --> 00:38:01,740
we have merge sort then we've got

960
00:37:59,280 --> 00:38:04,380
quicksort which we haven't talked about

961
00:38:01,739 --> 00:38:05,789
yet but this is the default one in the C

962
00:38:04,380 --> 00:38:08,849
runtime library this is the one that's

963
00:38:05,789 --> 00:38:12,929
in the CRT so if you actually go and you

964
00:38:08,849 --> 00:38:15,719
look at the function Q sort kind of grab

965
00:38:12,929 --> 00:38:17,399
it here you can see this one here this

966
00:38:15,719 --> 00:38:19,439
one typically is implemented by

967
00:38:17,400 --> 00:38:20,789
quicksort that's why it's called Q sort

968
00:38:19,440 --> 00:38:23,579
now I don't actually know if it's

969
00:38:20,789 --> 00:38:24,690
required to be quicksort it may be that

970
00:38:23,579 --> 00:38:26,849
the spec allows you to implement

971
00:38:24,690 --> 00:38:28,590
whatever you want I don't really know

972
00:38:26,849 --> 00:38:30,779
I'm not a spec slower kind of a person

973
00:38:28,590 --> 00:38:33,170
but point being it's called Q sort

974
00:38:30,780 --> 00:38:36,570
because that's what it traditionally was

975
00:38:33,170 --> 00:38:40,260
so that's a common one because you know

976
00:38:36,570 --> 00:38:41,880
you'd see that we've also have in this

977
00:38:40,260 --> 00:38:43,800
list one that got mentioned a couple

978
00:38:41,880 --> 00:38:46,769
times on the stream which is radix sort

979
00:38:43,800 --> 00:38:49,620
and that's kind of a very special kind

980
00:38:46,769 --> 00:38:52,889
of odd sort and I feel like these are

981
00:38:49,619 --> 00:38:55,219
all the ones that got mentioned Oh

982
00:38:52,889 --> 00:38:58,710
insertion sort

983
00:38:55,219 --> 00:39:01,529
where's mentioned as well and this one I

984
00:38:58,710 --> 00:39:08,309
don't ever I don't think I've ever done

985
00:39:01,530 --> 00:39:10,260
really okay I think I have done a pseudo

986
00:39:08,309 --> 00:39:12,210
insertion sort I think I have done a

987
00:39:10,260 --> 00:39:13,920
pseudo insertion sort we'll talk about

988
00:39:12,210 --> 00:39:15,030
that something that's sort of like an

989
00:39:13,920 --> 00:39:18,889
insertion sort I don't think I've ever

990
00:39:15,030 --> 00:39:21,960
really done a full insertion sort okay

991
00:39:18,889 --> 00:39:23,879
so let's talk about these so bubble sort

992
00:39:21,960 --> 00:39:25,139
we know what it was we said it's Owen

993
00:39:23,880 --> 00:39:26,640
squared we've been over that a dozen

994
00:39:25,139 --> 00:39:27,869
times now hopefully everyone understands

995
00:39:26,639 --> 00:39:29,489
why and everyone understands how you

996
00:39:27,869 --> 00:39:31,799
implement this right you just go through

997
00:39:29,489 --> 00:39:33,349
all the items and you just swap any oops

998
00:39:31,800 --> 00:39:37,830
did that come out I hope I didn't just

999
00:39:33,349 --> 00:39:41,670
ruin my my plug there you double-check

1000
00:39:37,829 --> 00:39:43,289
that disaster disaster I did order some

1001
00:39:41,670 --> 00:39:43,650
longer cables for this so I'm opening

1002
00:39:43,289 --> 00:39:45,000
that

1003
00:39:43,650 --> 00:39:47,190
hoping that I won't have this problem

1004
00:39:45,000 --> 00:39:51,170
anymore once they finally arrive yeah

1005
00:39:47,190 --> 00:39:54,720
okay I'm still on that side so I'm sorry

1006
00:39:51,170 --> 00:39:56,460
back to what I was saying so yeah so

1007
00:39:54,719 --> 00:39:58,259
bubble sort we know what so n squared

1008
00:39:56,460 --> 00:39:59,789
you just go through all the elements and

1009
00:39:58,260 --> 00:40:01,110
you keep moving them up if they're

1010
00:39:59,789 --> 00:40:02,019
supposed to be up or down sir supposed

1011
00:40:01,110 --> 00:40:03,550
to be down and if you know

1012
00:40:02,019 --> 00:40:04,329
you do that end-times you know that even

1013
00:40:03,550 --> 00:40:05,769
if something was all the way at the end

1014
00:40:04,329 --> 00:40:08,230
it will be all the way at the top you

1015
00:40:05,769 --> 00:40:11,619
have to do em passes over n things

1016
00:40:08,230 --> 00:40:13,719
ergo it is N squared

1017
00:40:11,619 --> 00:40:15,309
now the merge sort we know that it's

1018
00:40:13,719 --> 00:40:16,750
basically the same thing in terms of at

1019
00:40:15,309 --> 00:40:19,420
the low level we have to do passes over

1020
00:40:16,750 --> 00:40:22,780
and items every time but we only have to

1021
00:40:19,420 --> 00:40:27,599
do log n of them so it's log n log n

1022
00:40:22,780 --> 00:40:34,590
right this is n passes over n items and

1023
00:40:27,599 --> 00:40:41,949
this is log and passes over n items

1024
00:40:34,590 --> 00:40:44,380
right okay so quicksort is actually kind

1025
00:40:41,949 --> 00:40:46,210
of a weird it's it's really a pretty

1026
00:40:44,380 --> 00:40:47,470
weird algorithm and the reason that I

1027
00:40:46,210 --> 00:40:48,940
say that quicksort is a pretty weird

1028
00:40:47,469 --> 00:40:50,469
algorithm is because to me it feels

1029
00:40:48,940 --> 00:40:55,150
almost like a randomized algorithm in

1030
00:40:50,469 --> 00:40:57,369
fact there are randomized quicksort but

1031
00:40:55,150 --> 00:40:59,980
it's not usually discussed in the terms

1032
00:40:57,369 --> 00:41:01,809
of a randomized algorithm because it's

1033
00:40:59,980 --> 00:41:05,289
often implemented I think even the CRT

1034
00:41:01,809 --> 00:41:07,360
implementation of it is not done

1035
00:41:05,289 --> 00:41:09,449
randomly it's not done it's it's not

1036
00:41:07,360 --> 00:41:13,870
done with any randomness in some sense

1037
00:41:09,449 --> 00:41:15,339
so how does quicksort work first I will

1038
00:41:13,869 --> 00:41:16,269
tell you that it's Oh N squared and I

1039
00:41:15,340 --> 00:41:17,470
don't know that we're going to try and

1040
00:41:16,269 --> 00:41:19,210
prove that here because some of these

1041
00:41:17,469 --> 00:41:21,339
things as we go through them radix sort

1042
00:41:19,210 --> 00:41:23,440
is probably easy an insertion sort is

1043
00:41:21,340 --> 00:41:25,360
probably easy but quicksort

1044
00:41:23,440 --> 00:41:27,880
I don't remember it may be kind of hard

1045
00:41:25,360 --> 00:41:30,760
to see why it's N squared unless you got

1046
00:41:27,880 --> 00:41:34,809
some CS skills but let's see

1047
00:41:30,760 --> 00:41:36,880
so quicksort is sort of a little bit

1048
00:41:34,809 --> 00:41:39,610
like the merge sort it's based on

1049
00:41:36,880 --> 00:41:41,170
breaking things up but unlike the merge

1050
00:41:39,610 --> 00:41:43,599
sort which does it kind of in a very

1051
00:41:41,170 --> 00:41:45,940
deterministic way which breaks it down

1052
00:41:43,599 --> 00:41:47,769
to like individual pairs and then merges

1053
00:41:45,940 --> 00:41:50,409
the pairs and up into bigger bigger

1054
00:41:47,769 --> 00:41:52,300
elements that goes it uses what's called

1055
00:41:50,409 --> 00:41:54,159
a partition and so I'm gonna go over

1056
00:41:52,300 --> 00:41:57,280
here and talk about that so it just does

1057
00:41:54,159 --> 00:41:59,170
a partition pass first right well my

1058
00:41:57,280 --> 00:42:01,720
handwriting just gets worse and worse it

1059
00:41:59,170 --> 00:42:03,280
does what's called a partition I blame

1060
00:42:01,719 --> 00:42:04,389
the tablets I feel like if I was

1061
00:42:03,280 --> 00:42:06,100
actually writing on chalkboard or

1062
00:42:04,389 --> 00:42:09,039
something I'd be fine anyway it is a

1063
00:42:06,099 --> 00:42:12,610
partition pass to basically break up

1064
00:42:09,039 --> 00:42:15,009
things into groups based on how they

1065
00:42:12,610 --> 00:42:15,190
relate to one particular value in the in

1066
00:42:15,010 --> 00:42:18,369
the

1067
00:42:15,190 --> 00:42:20,920
set of things so for example if I have a

1068
00:42:18,369 --> 00:42:26,920
bunch of stuff in here five nine four

1069
00:42:20,920 --> 00:42:29,500
three one two seven like so what a

1070
00:42:26,920 --> 00:42:30,818
quicksort will do is quicksort will say

1071
00:42:29,500 --> 00:42:33,130
all right I got to start sorting this

1072
00:42:30,818 --> 00:42:35,529
the first thing to do is pick what's

1073
00:42:33,130 --> 00:42:37,059
called a pivot which is one of the

1074
00:42:35,530 --> 00:42:37,930
elements although I guess technically it

1075
00:42:37,059 --> 00:42:40,869
wouldn't have to be one of the almost

1076
00:42:37,929 --> 00:42:43,149
it's just some number right so I'm going

1077
00:42:40,869 --> 00:42:45,910
to pick a pivot and I'm gonna break this

1078
00:42:43,150 --> 00:42:47,889
group up into two smaller groups based

1079
00:42:45,909 --> 00:42:51,159
on where they land relative to the pivot

1080
00:42:47,889 --> 00:42:52,719
right so maybe I say the pivot in this

1081
00:42:51,159 --> 00:42:54,940
case is three because that's just what I

1082
00:42:52,719 --> 00:42:59,009
happen to pick and so I break this up

1083
00:42:54,940 --> 00:43:01,000
into things that are less than three or

1084
00:42:59,010 --> 00:43:02,290
less than or equal to depend on when I

1085
00:43:01,000 --> 00:43:04,179
do it but let's just say less than three

1086
00:43:02,289 --> 00:43:07,019
so in this case we have one and two and

1087
00:43:04,179 --> 00:43:10,419
then I do things that are more than

1088
00:43:07,019 --> 00:43:12,068
three or equal to right because I need

1089
00:43:10,420 --> 00:43:12,639
to put the three itself in there

1090
00:43:12,068 --> 00:43:15,279
somewhere

1091
00:43:12,639 --> 00:43:16,779
and so then I would have like okay more

1092
00:43:15,280 --> 00:43:25,109
than equal to three it's like okay got

1093
00:43:16,780 --> 00:43:25,109
three four five what's seven nine right

1094
00:43:25,889 --> 00:43:33,429
so now what you immediately know right

1095
00:43:29,889 --> 00:43:36,818
is that these things always come before

1096
00:43:33,429 --> 00:43:39,159
these things so unlike in our merge sort

1097
00:43:36,818 --> 00:43:40,929
because remember our merge sort when we

1098
00:43:39,159 --> 00:43:42,940
broke it down to pieces we had no idea

1099
00:43:40,929 --> 00:43:44,799
what order the pieces came in that's why

1100
00:43:42,940 --> 00:43:46,358
we had to at every step we had to do a

1101
00:43:44,800 --> 00:43:48,039
merge we had to do a merge

1102
00:43:46,358 --> 00:43:50,710
every time figure out where things go

1103
00:43:48,039 --> 00:43:52,329
but after this partition we know that

1104
00:43:50,710 --> 00:43:54,119
the one and two come first and the three

1105
00:43:52,329 --> 00:43:58,240
four five seven nine they come after

1106
00:43:54,119 --> 00:44:00,640
right that makes sense so you've already

1107
00:43:58,239 --> 00:44:02,409
figured out part of your sort you and

1108
00:44:00,639 --> 00:44:03,489
you can do this in place right you could

1109
00:44:02,409 --> 00:44:05,710
imagine doing this in place where you

1110
00:44:03,489 --> 00:44:07,479
just kind of swap things out as

1111
00:44:05,710 --> 00:44:09,608
necessary right I could like I could

1112
00:44:07,480 --> 00:44:11,980
just go oh I got to do less than you

1113
00:44:09,608 --> 00:44:14,348
know and more than three I can imagine

1114
00:44:11,980 --> 00:44:16,659
kind doing in place or if I don't want

1115
00:44:14,349 --> 00:44:18,940
to it in place for whatever reason I can

1116
00:44:16,659 --> 00:44:20,889
do it with just two buffers of the same

1117
00:44:18,940 --> 00:44:22,780
size right and I just kind of write them

1118
00:44:20,889 --> 00:44:25,000
through I go okay what's less than three

1119
00:44:22,780 --> 00:44:26,500
just put them into their position then I

1120
00:44:25,000 --> 00:44:27,909
go what's more than three put those into

1121
00:44:26,500 --> 00:44:28,699
their position right and then I know

1122
00:44:27,909 --> 00:44:30,230
that I can

1123
00:44:28,699 --> 00:44:32,179
ping-pong back and forth between those

1124
00:44:30,230 --> 00:44:34,789
really easily and things just get more

1125
00:44:32,179 --> 00:44:36,230
and more sorted right and so all I have

1126
00:44:34,789 --> 00:44:37,579
to do to continue down my quick start

1127
00:44:36,230 --> 00:44:38,030
path you can kind of see where this is

1128
00:44:37,579 --> 00:44:39,980
going

1129
00:44:38,030 --> 00:44:41,780
I just keep applying that I pick a pivot

1130
00:44:39,980 --> 00:44:44,210
again I say the pivots too it's like oh

1131
00:44:41,780 --> 00:44:45,260
wait actually probably you wouldn't

1132
00:44:44,210 --> 00:44:47,119
actually do this you just go when you

1133
00:44:45,260 --> 00:44:49,040
get down to two items you just swap them

1134
00:44:47,119 --> 00:44:50,420
if they're not equal right so if they're

1135
00:44:49,039 --> 00:44:51,858
in the wrong order so probably don't

1136
00:44:50,420 --> 00:44:53,480
focus on this one but point being when

1137
00:44:51,858 --> 00:44:54,920
you still have more than two items you

1138
00:44:53,480 --> 00:44:55,639
just do the same thing again pick

1139
00:44:54,920 --> 00:44:58,039
another pivot

1140
00:44:55,639 --> 00:45:00,980
what's the pivot I baby I pick seven

1141
00:44:58,039 --> 00:45:03,019
this time right and so then I go okay I

1142
00:45:00,980 --> 00:45:05,119
pick seven for the pivot I need to do

1143
00:45:03,019 --> 00:45:06,380
more than seven less than seven right so

1144
00:45:05,119 --> 00:45:08,329
less than seven things are gonna be

1145
00:45:06,380 --> 00:45:09,470
three four five and the greater than

1146
00:45:08,329 --> 00:45:11,420
seven things are gonna be seven and nine

1147
00:45:09,469 --> 00:45:13,098
this is now done because I've you know

1148
00:45:11,420 --> 00:45:15,409
consorted this one needs to pick a pivot

1149
00:45:13,099 --> 00:45:17,000
again so I picked the pivot five maybe

1150
00:45:15,409 --> 00:45:19,129
and then I've got just five and three

1151
00:45:17,000 --> 00:45:23,630
four and hey now my whole thing sorted

1152
00:45:19,130 --> 00:45:27,320
right and so what you can kind of see

1153
00:45:23,630 --> 00:45:30,320
about this hopefully is you can see why

1154
00:45:27,320 --> 00:45:34,609
I say that there's like an expected

1155
00:45:30,320 --> 00:45:38,059
running time of om but a worst case of

1156
00:45:34,608 --> 00:45:41,420
Oh N squared right and the reason is

1157
00:45:38,059 --> 00:45:44,529
because how long this takes depends on

1158
00:45:41,420 --> 00:45:47,300
what you pick for the pivot right

1159
00:45:44,530 --> 00:45:51,079
because if I pick a pivot that splits

1160
00:45:47,300 --> 00:45:53,780
things fairly well then I will be able

1161
00:45:51,079 --> 00:45:55,880
to do this very quickly right I will not

1162
00:45:53,780 --> 00:45:59,630
have to go through very many passes at

1163
00:45:55,880 --> 00:46:01,750
all it's actually wait sorry did I say

1164
00:45:59,630 --> 00:46:04,640
expect it I win that's that's not right

1165
00:46:01,750 --> 00:46:12,559
that's bad I believe it would still be

1166
00:46:04,639 --> 00:46:15,159
an log n yeah I don't think it's

1167
00:46:12,559 --> 00:46:18,049
expected Oh ed that's that's that's

1168
00:46:15,159 --> 00:46:20,029
pretend I didn't say that I don't I

1169
00:46:18,050 --> 00:46:21,680
don't I don't see how it would be

1170
00:46:20,030 --> 00:46:25,790
expected Oh in it would probably still

1171
00:46:21,679 --> 00:46:29,088
be expected n log n yeah anyway but

1172
00:46:25,789 --> 00:46:31,219
worst case N squared point being the

1173
00:46:29,088 --> 00:46:33,318
reason is because if I pick this pivot

1174
00:46:31,219 --> 00:46:35,929
poorly I may end up still having to do n

1175
00:46:33,318 --> 00:46:38,358
steps right let's say every time I

1176
00:46:35,929 --> 00:46:42,828
picked the highest one so I pick nine

1177
00:46:38,358 --> 00:46:45,529
right and that means I'm still I if I do

1178
00:46:42,829 --> 00:46:50,089
this this way so I pick nine I end up

1179
00:46:45,530 --> 00:46:52,490
with one two three four five seven in

1180
00:46:50,088 --> 00:46:54,380
one group and then nine right okay I

1181
00:46:52,489 --> 00:46:56,750
pick again I pick wrong again I get

1182
00:46:54,380 --> 00:46:58,369
seven so I'm one two three four five and

1183
00:46:56,750 --> 00:47:00,730
then seven I pick wrong again I pick

1184
00:46:58,369 --> 00:47:03,829
five I got one two three four and five

1185
00:47:00,730 --> 00:47:05,659
right and essentially what you can see

1186
00:47:03,829 --> 00:47:08,539
is I'm gonna have to go through n steps

1187
00:47:05,659 --> 00:47:10,759
because I'm only removing one thing I'm

1188
00:47:08,539 --> 00:47:14,690
only sorting one element every time it's

1189
00:47:10,760 --> 00:47:17,150
just as bad as a bubble sort right so

1190
00:47:14,690 --> 00:47:18,760
the fact that this is expected to be

1191
00:47:17,150 --> 00:47:20,869
faster

1192
00:47:18,760 --> 00:47:22,700
the only reason it's suspected to be

1193
00:47:20,869 --> 00:47:25,640
faster is because you assumed it would

1194
00:47:22,699 --> 00:47:27,500
be very very very unlikely that no

1195
00:47:25,639 --> 00:47:29,509
matter how you chose to pick your pivot

1196
00:47:27,500 --> 00:47:32,599
that you can somehow manage to pick it

1197
00:47:29,510 --> 00:47:34,550
that poorly that often right what are

1198
00:47:32,599 --> 00:47:37,068
the chances that if you have a hundred

1199
00:47:34,550 --> 00:47:39,890
items you will pick wrong every single

1200
00:47:37,068 --> 00:47:41,750
time that's a one in 100 chance followed

1201
00:47:39,889 --> 00:47:44,210
by a one in 99 chance followed by one a

1202
00:47:41,750 --> 00:47:46,400
98 chance right you would have to go

1203
00:47:44,210 --> 00:47:48,769
through this incredibly unusual thing to

1204
00:47:46,400 --> 00:47:50,269
hit that that worst n-squared case so

1205
00:47:48,769 --> 00:47:52,789
most of the time you'll end up with a

1206
00:47:50,269 --> 00:47:59,780
pivot that splits it into 1/3 and 2/3

1207
00:47:52,789 --> 00:48:04,639
let's say right which is pretty good so

1208
00:47:59,780 --> 00:48:06,380
that is is quicksort and that is an

1209
00:48:04,639 --> 00:48:07,639
example the reason that I decided to

1210
00:48:06,380 --> 00:48:09,318
describe it here even though I don't

1211
00:48:07,639 --> 00:48:13,338
think I've ever written or cared about

1212
00:48:09,318 --> 00:48:17,480
quicksort myself the reason that that is

1213
00:48:13,338 --> 00:48:19,190
so the reason I chose to describe it I

1214
00:48:17,480 --> 00:48:21,650
wanted to give an example of an

1215
00:48:19,190 --> 00:48:23,358
algorithm that might be N squared but

1216
00:48:21,650 --> 00:48:25,369
might not be N squared when you run it

1217
00:48:23,358 --> 00:48:27,230
it's worst case as always N squared

1218
00:48:25,369 --> 00:48:29,599
because we do know exactly how to

1219
00:48:27,230 --> 00:48:31,068
produce that scenario you just make sure

1220
00:48:29,599 --> 00:48:33,010
you feed it the inputs in just the right

1221
00:48:31,068 --> 00:48:35,630
way so that it picks the wrong values

1222
00:48:33,010 --> 00:48:37,700
but the chance of that actually

1223
00:48:35,630 --> 00:48:40,460
happening practice incredibly incredibly

1224
00:48:37,699 --> 00:48:42,139
incredibly slim especially because as

1225
00:48:40,460 --> 00:48:43,550
you get more items the chances that you

1226
00:48:42,139 --> 00:48:46,460
can pick wrong that many times in a row

1227
00:48:43,550 --> 00:48:49,339
just keep going up and up and up right

1228
00:48:46,460 --> 00:48:52,010
so that's the deal with quicksort and

1229
00:48:49,338 --> 00:48:54,440
the thing with quicksort to remember is

1230
00:48:52,010 --> 00:48:55,500
again that pivot picking is the most

1231
00:48:54,440 --> 00:48:57,920
important thing

1232
00:48:55,500 --> 00:49:01,230
and so when you are writing quick sorts

1233
00:48:57,920 --> 00:49:05,430
basically there's you you might almost

1234
00:49:01,230 --> 00:49:08,579
say if you know something about how the

1235
00:49:05,429 --> 00:49:10,559
data might look when it comes in like

1236
00:49:08,579 --> 00:49:13,049
for example you know some really good

1237
00:49:10,559 --> 00:49:15,239
potential pivots or you know that it's

1238
00:49:13,050 --> 00:49:19,680
very evenly distributed the values are

1239
00:49:15,239 --> 00:49:22,589
like let's say for example that you knew

1240
00:49:19,679 --> 00:49:23,489
that your values had a certain range to

1241
00:49:22,590 --> 00:49:26,010
them and that they were pretty

1242
00:49:23,489 --> 00:49:27,839
distributed over that range that gives

1243
00:49:26,010 --> 00:49:31,500
you a really easy way to pick those

1244
00:49:27,840 --> 00:49:33,300
pivots you know that like the the dip

1245
00:49:31,500 --> 00:49:34,800
you know halfway between the min and the

1246
00:49:33,300 --> 00:49:36,990
max value if you knew what those were

1247
00:49:34,800 --> 00:49:38,460
would be a great pivot because you know

1248
00:49:36,989 --> 00:49:39,839
that things are evenly spread throughout

1249
00:49:38,460 --> 00:49:42,840
that range so you know that will split

1250
00:49:39,840 --> 00:49:44,430
them roughly in half right so if you

1251
00:49:42,840 --> 00:49:46,920
have a bunch of information about the

1252
00:49:44,429 --> 00:49:48,629
things that you're sorting and you find

1253
00:49:46,920 --> 00:49:51,869
that you're it's very important for you

1254
00:49:48,630 --> 00:49:54,030
to write a good sort quicksort might you

1255
00:49:51,869 --> 00:49:55,859
might be able to actually guarantee for

1256
00:49:54,030 --> 00:49:57,840
your data that it won't hit the N

1257
00:49:55,860 --> 00:50:00,150
squared case and then you know maybe

1258
00:49:57,840 --> 00:50:02,309
that's a really good album so again even

1259
00:50:00,150 --> 00:50:04,230
when we say that it's Oh n squared it

1260
00:50:02,309 --> 00:50:06,179
might not actually be om squared for you

1261
00:50:04,230 --> 00:50:08,550
because you may be able to use specific

1262
00:50:06,179 --> 00:50:11,519
knowledge that you know about the the

1263
00:50:08,550 --> 00:50:13,500
values that you're putting in there that

1264
00:50:11,519 --> 00:50:16,699
would make it so that you could avoid

1265
00:50:13,500 --> 00:50:20,039
ever hitting the N squared case right

1266
00:50:16,699 --> 00:50:21,480
and again that's also a good example of

1267
00:50:20,039 --> 00:50:23,759
like I was saying I was talking about

1268
00:50:21,480 --> 00:50:25,469
randomized algorithms before that's kind

1269
00:50:23,760 --> 00:50:28,320
of a good example of a randomized

1270
00:50:25,469 --> 00:50:32,549
algorithm in the sense that you could

1271
00:50:28,320 --> 00:50:35,240
imagine using randomness to ensure that

1272
00:50:32,550 --> 00:50:38,340
you wouldn't ever get highly correlated

1273
00:50:35,239 --> 00:50:43,679
things in this list right

1274
00:50:38,340 --> 00:50:47,280
like if for example what am i transect

1275
00:50:43,679 --> 00:50:51,779
so here's a perfect example it's already

1276
00:50:47,280 --> 00:50:54,660
in hand made here so let's say that the

1277
00:50:51,780 --> 00:50:57,330
way that this thing worked was it always

1278
00:50:54,659 --> 00:50:59,129
just picked the first value in the list

1279
00:50:57,329 --> 00:51:03,509
as the pivot that's just what it did

1280
00:50:59,130 --> 00:51:06,119
right well if we were to do that we

1281
00:51:03,510 --> 00:51:08,010
would pretty much be guaranteed N

1282
00:51:06,119 --> 00:51:09,359
squared running time for our cutscenes

1283
00:51:08,010 --> 00:51:11,940
in our sort B

1284
00:51:09,360 --> 00:51:13,410
we know that our our cutscenes put

1285
00:51:11,940 --> 00:51:16,320
things into the render queue in

1286
00:51:13,409 --> 00:51:18,269
precisely an ordered fashion the Z's

1287
00:51:16,320 --> 00:51:20,039
just go up linearly they go like one two

1288
00:51:18,269 --> 00:51:23,159
three four five six seven right the Z's

1289
00:51:20,039 --> 00:51:24,809
just go straight up so whatever you know

1290
00:51:23,159 --> 00:51:26,219
the the Louis II happens first the

1291
00:51:24,809 --> 00:51:28,139
highest C happens last or whatever we

1292
00:51:26,219 --> 00:51:30,599
know that that's always the case and so

1293
00:51:28,139 --> 00:51:33,599
it would be like the absolute worst case

1294
00:51:30,599 --> 00:51:36,059
for this thing but if instead what you

1295
00:51:33,599 --> 00:51:38,579
did when you started out is you randomly

1296
00:51:36,059 --> 00:51:41,340
permute it all the elements in the list

1297
00:51:38,579 --> 00:51:43,799
and then ran quicksort then you would

1298
00:51:41,340 --> 00:51:46,110
know that no matter what the algorithm

1299
00:51:43,800 --> 00:51:48,480
was outputting you would always end up

1300
00:51:46,110 --> 00:51:50,099
with sort of a jumbled version of it so

1301
00:51:48,480 --> 00:51:51,840
you could never hit such a reliable

1302
00:51:50,099 --> 00:51:53,909
worst case that might be coming out of

1303
00:51:51,840 --> 00:51:55,850
your algorithm so there are cases where

1304
00:51:53,909 --> 00:51:58,769
people use randomness to try and

1305
00:51:55,849 --> 00:52:01,259
decrease the likelihood that some highly

1306
00:51:58,769 --> 00:52:03,960
correlated algorithm on one end of the

1307
00:52:01,260 --> 00:52:07,590
pipeline isn't totally messing up your

1308
00:52:03,960 --> 00:52:09,119
sort on the on the back end now I don't

1309
00:52:07,590 --> 00:52:10,710
tend to really love to stuff like that

1310
00:52:09,119 --> 00:52:12,269
because in general I'm like well if you

1311
00:52:10,710 --> 00:52:13,530
have that information you should just

1312
00:52:12,269 --> 00:52:15,599
try to feed that information into your

1313
00:52:13,530 --> 00:52:17,310
sort like right another sort right but

1314
00:52:15,599 --> 00:52:19,889
again if your goal is to write a

1315
00:52:17,309 --> 00:52:22,349
general-purpose sort maybe you need to

1316
00:52:19,889 --> 00:52:24,329
do something like that okay

1317
00:52:22,349 --> 00:52:26,880
so let's talk about another sort here

1318
00:52:24,329 --> 00:52:31,110
let's talk about radix sort radix sort

1319
00:52:26,880 --> 00:52:33,110
is an O one sort not really people often

1320
00:52:31,110 --> 00:52:36,120
say say oh sorry

1321
00:52:33,110 --> 00:52:40,980
that's good oh one sort it's actually o

1322
00:52:36,119 --> 00:52:43,170
K n I don't know why I said brain is

1323
00:52:40,980 --> 00:52:45,240
going a little bit obviously it has to

1324
00:52:43,170 --> 00:52:48,599
visit all the items that's that's a

1325
00:52:45,239 --> 00:52:50,609
that's a non-issue but it's got an extra

1326
00:52:48,599 --> 00:52:52,799
kind of weird thing in here so let me

1327
00:52:50,610 --> 00:52:56,160
talk about this let me talk about this

1328
00:52:52,800 --> 00:52:57,120
for a minute because it's kind of it's

1329
00:52:56,159 --> 00:52:58,500
kind of like the Traveling Salesman

1330
00:52:57,119 --> 00:53:00,509
thing where I said you're introducing

1331
00:52:58,500 --> 00:53:03,269
this other thing radix sort introduces

1332
00:53:00,510 --> 00:53:05,550
another thing so how does the radix sort

1333
00:53:03,269 --> 00:53:08,280
work a radix sort basically says well

1334
00:53:05,550 --> 00:53:10,260
you know this is a computer and the

1335
00:53:08,280 --> 00:53:12,840
chances that I'm sorting on something

1336
00:53:10,260 --> 00:53:15,090
that is truly arbitrary right is

1337
00:53:12,840 --> 00:53:16,920
actually somewhat low now there's 20

1338
00:53:15,090 --> 00:53:18,630
times that we do sort on arbitrary

1339
00:53:16,920 --> 00:53:20,309
things you can imagine like a sequel

1340
00:53:18,630 --> 00:53:22,079
query that has to sort things there's

1341
00:53:20,309 --> 00:53:24,409
often complex stuff that's trying to

1342
00:53:22,079 --> 00:53:28,049
sort on or whatever

1343
00:53:24,409 --> 00:53:30,000
radix sort not gonna help you there but

1344
00:53:28,050 --> 00:53:33,170
a lot of times we're sorting on things

1345
00:53:30,000 --> 00:53:36,389
that are like you know it's a 32 bit int

1346
00:53:33,170 --> 00:53:38,400
right and we know that no matter what

1347
00:53:36,389 --> 00:53:40,650
value could dream up we're storing it in

1348
00:53:38,400 --> 00:53:42,000
a 32 bit int so it ain't never gonna be

1349
00:53:40,650 --> 00:53:43,550
bigger than for a billion right that's

1350
00:53:42,000 --> 00:53:47,579
just that's just the truth

1351
00:53:43,550 --> 00:53:49,019
so radix sort is about exploiting the

1352
00:53:47,579 --> 00:53:51,990
fact that even though we're talking

1353
00:53:49,019 --> 00:53:54,539
about very specific numbers that in our

1354
00:53:51,989 --> 00:53:56,098
imagination are arbitrary in practice in

1355
00:53:54,539 --> 00:53:57,449
the computer most of the time in stuff

1356
00:53:56,099 --> 00:53:58,859
that were computing with isn't really

1357
00:53:57,449 --> 00:54:01,169
arbitrary because it's got to fit in

1358
00:53:58,858 --> 00:54:02,309
something the CPU actually works with so

1359
00:54:01,170 --> 00:54:05,579
radix sort

1360
00:54:02,309 --> 00:54:08,460
does sorting based on a direct look at

1361
00:54:05,579 --> 00:54:10,200
the values that its story the sort key

1362
00:54:08,460 --> 00:54:13,710
that sorting and it assumes that they

1363
00:54:10,199 --> 00:54:16,439
are a fixed size and this K that's in

1364
00:54:13,710 --> 00:54:18,900
here is that size so a radix sort is

1365
00:54:16,440 --> 00:54:21,150
actually has two different sort of

1366
00:54:18,900 --> 00:54:24,329
things that affect its running time it's

1367
00:54:21,150 --> 00:54:29,430
the number of digits right or bits I

1368
00:54:24,329 --> 00:54:33,630
should say like the bit count right and

1369
00:54:29,429 --> 00:54:36,358
then there's the the I shouldn't say bit

1370
00:54:33,630 --> 00:54:38,309
count this is again if you if you want

1371
00:54:36,358 --> 00:54:40,679
to be a little more CSE it's really just

1372
00:54:38,309 --> 00:54:42,480
I'm gonna say digit count I guess

1373
00:54:40,679 --> 00:54:44,338
because the radix sort I think

1374
00:54:42,480 --> 00:54:46,108
conceptually is more about whatever you

1375
00:54:44,338 --> 00:54:47,519
consider digit to be and maybe you want

1376
00:54:46,108 --> 00:54:53,309
them to be binary or maybe you want that

1377
00:54:47,519 --> 00:54:55,318
to be you know a bit or whatever because

1378
00:54:53,309 --> 00:54:57,539
when you actually go to implement the

1379
00:54:55,318 --> 00:54:59,759
radix sort you could you could do it you

1380
00:54:57,539 --> 00:55:02,400
could choose to chunk those things up in

1381
00:54:59,760 --> 00:55:04,589
different ways right okay so the radix

1382
00:55:02,400 --> 00:55:06,690
sort has a dependency on the digits and

1383
00:55:04,588 --> 00:55:08,190
it has a dependency on the the number of

1384
00:55:06,690 --> 00:55:10,530
items so how many things that you're

1385
00:55:08,190 --> 00:55:12,510
going to sort and the way that it works

1386
00:55:10,530 --> 00:55:14,220
is basically by peeling and I think

1387
00:55:12,510 --> 00:55:16,290
we're out of time so maybe we'll yeah

1388
00:55:14,219 --> 00:55:18,209
we'll talk about how it works in detail

1389
00:55:16,289 --> 00:55:20,099
more tomorrow but it basically works by

1390
00:55:18,210 --> 00:55:24,659
peeling it says well I know that I've

1391
00:55:20,099 --> 00:55:27,180
only got 32 bits worth of possible

1392
00:55:24,659 --> 00:55:28,980
things and I write if I'm sorting the

1393
00:55:27,179 --> 00:55:30,568
set of all 32 bit integers even you know

1394
00:55:28,980 --> 00:55:32,730
if every single possible 13 sure was in

1395
00:55:30,568 --> 00:55:36,650
the set I know that I could basically

1396
00:55:32,730 --> 00:55:36,650
talk about 32 different

1397
00:55:36,659 --> 00:55:44,399
sort of categorizes if you will of where

1398
00:55:42,000 --> 00:55:47,250
things would fall in the final result

1399
00:55:44,400 --> 00:55:49,440
right conceptually speaking you could

1400
00:55:47,250 --> 00:55:52,739
just think of it as saying well I know

1401
00:55:49,440 --> 00:55:55,769
that I've got this 32-bit value and I

1402
00:55:52,739 --> 00:55:59,608
know that this bit here right is going

1403
00:55:55,769 --> 00:56:01,048
to be let me take the high bit first so

1404
00:55:59,608 --> 00:56:01,409
assuming that we're sorting high bit

1405
00:56:01,048 --> 00:56:04,349
first

1406
00:56:01,409 --> 00:56:06,420
I know that this bit here right anything

1407
00:56:04,349 --> 00:56:08,460
with this bit set is going to come after

1408
00:56:06,420 --> 00:56:11,190
so anything that that doesn't have this

1409
00:56:08,460 --> 00:56:14,699
bit set right so right off the bat I can

1410
00:56:11,190 --> 00:56:16,500
partition my my things into two halves

1411
00:56:14,699 --> 00:56:17,848
stuff that does have that bit set so

1412
00:56:16,500 --> 00:56:20,730
that doesn't have that bit set right

1413
00:56:17,849 --> 00:56:23,220
then I could do the exact same thing to

1414
00:56:20,730 --> 00:56:25,889
those partitions using the second bit

1415
00:56:23,219 --> 00:56:27,389
right and then partition those into

1416
00:56:25,889 --> 00:56:29,338
things that do and don't have that bit

1417
00:56:27,389 --> 00:56:32,429
set and don't do it don't have that bit

1418
00:56:29,338 --> 00:56:34,920
set right and if I just do that 32 times

1419
00:56:32,429 --> 00:56:37,078
if I just did that 32 times going down

1420
00:56:34,920 --> 00:56:39,838
it I would have my complete thing sorted

1421
00:56:37,079 --> 00:56:42,930
right because I can just do literally

1422
00:56:39,838 --> 00:56:45,619
just a binary split each time and then

1423
00:56:42,929 --> 00:56:51,419
by the time I get to the 32nd pass

1424
00:56:45,619 --> 00:56:53,640
everything's sorted and so that's why it

1425
00:56:51,420 --> 00:56:57,150
changes it into something that does not

1426
00:56:53,639 --> 00:56:59,670
actually require even in log n

1427
00:56:57,150 --> 00:57:03,510
operations there's no log n in here

1428
00:56:59,670 --> 00:57:05,730
right it's only K times n where K is the

1429
00:57:03,510 --> 00:57:07,500
number of those sort of like

1430
00:57:05,730 --> 00:57:09,869
discriminators that you're going to do

1431
00:57:07,500 --> 00:57:12,900
right and sort of the reason that I said

1432
00:57:09,869 --> 00:57:14,490
it it's not clear what this actually

1433
00:57:12,900 --> 00:57:16,380
means is because it's sort of up to the

1434
00:57:14,489 --> 00:57:19,348
implementer how they might want to break

1435
00:57:16,380 --> 00:57:21,150
things up right and so you might want to

1436
00:57:19,349 --> 00:57:23,548
break them up into bigger values than

1437
00:57:21,150 --> 00:57:25,650
just per bit because you know maybe it's

1438
00:57:23,548 --> 00:57:27,559
it's more efficient to to break things

1439
00:57:25,650 --> 00:57:31,019
into more than that number of buckets

1440
00:57:27,559 --> 00:57:32,970
now this does require space you can't do

1441
00:57:31,019 --> 00:57:34,318
these in place at least I don't know of

1442
00:57:32,969 --> 00:57:36,778
any way to do them in space I don't

1443
00:57:34,318 --> 00:57:40,250
study sorting so maybe there is but so

1444
00:57:36,778 --> 00:57:42,829
this requires extra space but you know

1445
00:57:40,250 --> 00:57:45,150
usually that's not such a big problem

1446
00:57:42,829 --> 00:57:47,490
and then finally we've got insertion

1447
00:57:45,150 --> 00:57:49,079
sort insertion sort and again we'll talk

1448
00:57:47,489 --> 00:57:50,489
about this one tomorrow

1449
00:57:49,079 --> 00:57:52,349
probably implement maybe we'll implement

1450
00:57:50,489 --> 00:57:54,269
this and this that seems like a pretty

1451
00:57:52,349 --> 00:57:55,139
good thing people seem to be very

1452
00:57:54,269 --> 00:57:57,449
excited about that

1453
00:57:55,139 --> 00:57:58,650
so maybe we'll implement these two and

1454
00:57:57,449 --> 00:57:59,939
of course we already have this one

1455
00:57:58,650 --> 00:58:01,470
I'm not going to implement this one

1456
00:57:59,940 --> 00:58:02,490
because I don't really care about it and

1457
00:58:01,469 --> 00:58:07,739
I'm not going to implement this one

1458
00:58:02,489 --> 00:58:10,619
because it's not that useful but I'll

1459
00:58:07,739 --> 00:58:12,119
just briefly say I believe insertion

1460
00:58:10,619 --> 00:58:14,369
sort assuming that I remember that one

1461
00:58:12,119 --> 00:58:16,139
is Oh N squared and the reason is

1462
00:58:14,369 --> 00:58:18,239
because the way it works is it just says

1463
00:58:16,139 --> 00:58:20,549
well you know what I'll just take the

1464
00:58:18,239 --> 00:58:22,589
things here are my items right I'll just

1465
00:58:20,550 --> 00:58:24,360
take them and I'll make a thing that I'm

1466
00:58:22,590 --> 00:58:25,980
gonna put them in or whatever and I'll

1467
00:58:24,360 --> 00:58:27,300
say like okay I go with the first one

1468
00:58:25,980 --> 00:58:29,309
and I just stick it in the first slot

1469
00:58:27,300 --> 00:58:31,710
right so you know I got a and a goes

1470
00:58:29,309 --> 00:58:34,320
here I take the next one and I just go

1471
00:58:31,710 --> 00:58:36,059
should it go in the first you know what

1472
00:58:34,320 --> 00:58:39,000
is this relationship to a if it's less

1473
00:58:36,059 --> 00:58:41,759
than a I move a up one and I put myself

1474
00:58:39,000 --> 00:58:43,500
in its place if it's not then I just go

1475
00:58:41,760 --> 00:58:46,020
to the next one right in which case I

1476
00:58:43,500 --> 00:58:49,079
put B here so the reason this gets

1477
00:58:46,019 --> 00:58:50,880
slower is because as I go right I have

1478
00:58:49,079 --> 00:58:52,769
to move all of these things out of the

1479
00:58:50,880 --> 00:58:54,510
way and even if I didn't even if it's a

1480
00:58:52,769 --> 00:58:56,489
linked list or something I still have to

1481
00:58:54,510 --> 00:58:58,380
potentially visit all the items for

1482
00:58:56,489 --> 00:59:01,529
every insertion which is N squared again

1483
00:58:58,380 --> 00:59:04,710
right so even if I assume that I have

1484
00:59:01,530 --> 00:59:06,960
some easy way of I don't have to

1485
00:59:04,710 --> 00:59:09,269
actually copy everything out it's still

1486
00:59:06,960 --> 00:59:11,340
N squared because just looking at

1487
00:59:09,269 --> 00:59:14,460
everything I might have to do that n

1488
00:59:11,340 --> 00:59:15,840
times for every insertion right so

1489
00:59:14,460 --> 00:59:17,610
insertion sort not particularly

1490
00:59:15,840 --> 00:59:19,170
interesting but the reason that I said

1491
00:59:17,610 --> 00:59:20,849
sometimes I do a pseudo insertion sort

1492
00:59:19,170 --> 00:59:23,789
is because I do find this sort of a

1493
00:59:20,849 --> 00:59:25,500
thing very handy if I just want like top

1494
00:59:23,789 --> 00:59:27,630
n right

1495
00:59:25,500 --> 00:59:30,150
so let's say that I I don't care about

1496
00:59:27,630 --> 00:59:33,329
sorting I just want to know like I've

1497
00:59:30,150 --> 00:59:37,440
got a thousand items right and I want to

1498
00:59:33,329 --> 00:59:39,869
know what the highest four are right so

1499
00:59:37,440 --> 00:59:41,639
what are the highest four in this thing

1500
00:59:39,869 --> 00:59:43,440
well I might make a little thing that

1501
00:59:41,639 --> 00:59:45,359
just has four entries and I just do

1502
00:59:43,440 --> 00:59:46,679
exactly an insertion sort on it because

1503
00:59:45,360 --> 00:59:48,900
I know that that'll be really really

1504
00:59:46,679 --> 00:59:51,000
fast to just go through and go like okay

1505
00:59:48,900 --> 00:59:53,490
for each item I just do n pass through

1506
00:59:51,000 --> 00:59:55,889
and so then it becomes an O four times n

1507
00:59:53,489 --> 00:59:57,719
right or just Oh n algorithm just go

1508
00:59:55,889 --> 00:59:59,429
through all the items look at this

1509
00:59:57,719 --> 01:00:02,699
little side table that's got you know

1510
00:59:59,429 --> 01:00:05,009
four entries in it right and

1511
01:00:02,699 --> 01:00:06,269
like okay is this item greater than this

1512
01:00:05,010 --> 01:00:07,380
one is greater than this one is greater

1513
01:00:06,269 --> 01:00:09,210
than this one is greater than this one

1514
01:00:07,380 --> 01:00:11,220
right and when I find one that's greater

1515
01:00:09,210 --> 01:00:13,740
than I just move everything down right

1516
01:00:11,219 --> 01:00:15,989
and one falls off the end and I stick it

1517
01:00:13,739 --> 01:00:17,189
in and that's all really fast operations

1518
01:00:15,989 --> 01:00:19,229
because we're just talking about a few

1519
01:00:17,190 --> 01:00:21,570
bytes of memory that should just kind of

1520
01:00:19,230 --> 01:00:22,679
romp around in there right so that's a

1521
01:00:21,570 --> 01:00:23,970
place where I do use a certain start the

1522
01:00:22,679 --> 01:00:25,919
reason I called that into pseudo

1523
01:00:23,969 --> 01:00:27,750
insertion sort is because I never use it

1524
01:00:25,920 --> 01:00:30,500
to actually sort all the items I just

1525
01:00:27,750 --> 01:00:33,949
use it if I'm trying to find the top end

1526
01:00:30,500 --> 01:00:36,659
so yeah not really in the surcin sort

1527
01:00:33,949 --> 01:00:38,009
all right with that let's go to the QA I

1528
01:00:36,659 --> 01:00:39,389
think that wraps up pretty much

1529
01:00:38,010 --> 01:00:41,609
everything that I want to say about

1530
01:00:39,389 --> 01:00:44,219
order notation because again not my area

1531
01:00:41,608 --> 01:00:47,608
of expertise don't really have much to

1532
01:00:44,219 --> 01:00:48,899
add about it in general I think that's

1533
01:00:47,608 --> 01:00:52,500
all the information that we'll need for

1534
01:00:48,900 --> 01:00:56,338
handmade hero at all and tomorrow we'll

1535
01:00:52,500 --> 01:00:58,349
just implement the tooth those two sorts

1536
01:00:56,338 --> 01:01:01,130
there emerged in radix so you can

1537
01:00:58,349 --> 01:01:01,130
actually see how they work

1538
01:01:09,309 --> 01:01:14,019
all right q-and-a

1539
01:01:19,268 --> 01:01:21,328
you

1540
01:01:28,159 --> 01:01:34,578
snowy crystal Zee so why would you not

1541
01:01:30,380 --> 01:01:37,309
always do radix sort with a sort of just

1542
01:01:34,579 --> 01:01:40,130
whatever the size of the type is okay so

1543
01:01:37,309 --> 01:01:44,240
there's a lot of reasons for that let me

1544
01:01:40,130 --> 01:01:47,450
just let me just sort of give you let me

1545
01:01:44,239 --> 01:01:48,679
just sort of give you an example so okay

1546
01:01:47,449 --> 01:01:51,078
what did I say

1547
01:01:48,679 --> 01:01:53,328
I said that we can always do sort in n

1548
01:01:51,079 --> 01:01:55,640
log n time right we know that that's

1549
01:01:53,329 --> 01:01:57,589
what we can do and I believe it correct

1550
01:01:55,639 --> 01:01:59,389
me if I'm wrong see us guys on this but

1551
01:01:57,588 --> 01:02:02,869
I believe that this is actually proven

1552
01:01:59,389 --> 01:02:05,058
meaning this is the proven lower bound

1553
01:02:02,869 --> 01:02:07,430
I think somebody actually just

1554
01:02:05,059 --> 01:02:10,278
demonstrated flat-out math lies that

1555
01:02:07,429 --> 01:02:13,608
there will never be an O n sort it's not

1556
01:02:10,278 --> 01:02:15,548
possible it just does not exist so if

1557
01:02:13,608 --> 01:02:19,400
you're talking about general sorting

1558
01:02:15,548 --> 01:02:20,059
there is no way to actually do better

1559
01:02:19,400 --> 01:02:22,700
than this

1560
01:02:20,059 --> 01:02:24,798
but we know we always can because you

1561
01:02:22,699 --> 01:02:28,689
could use a merge sort for example and

1562
01:02:24,798 --> 01:02:30,650
you know that that will do that right I

1563
01:02:28,690 --> 01:02:32,358
think there are other ones I know if I

1564
01:02:30,650 --> 01:02:35,240
keep sword I said that there's there's

1565
01:02:32,358 --> 01:02:36,769
more than one there are multiple sort

1566
01:02:35,239 --> 01:02:39,318
algorithms that will always do that and

1567
01:02:36,769 --> 01:02:42,769
so the thing is well how many items are

1568
01:02:39,318 --> 01:02:46,849
you sorting right you know if you are

1569
01:02:42,769 --> 01:02:49,818
sorting in fact you could almost do this

1570
01:02:46,849 --> 01:02:52,849
math wise a radix sort I just said takes

1571
01:02:49,818 --> 01:02:54,259
K n time right where this is the number

1572
01:02:52,849 --> 01:02:55,760
of like bucket things that you're that

1573
01:02:54,260 --> 01:02:58,730
you're using for it that's like how am i

1574
01:02:55,760 --> 01:03:01,910
it's going to take well if we look at

1575
01:02:58,730 --> 01:03:06,650
these two here the question you could

1576
01:03:01,909 --> 01:03:09,348
ask would be when is this value worse

1577
01:03:06,650 --> 01:03:11,298
than this value and the answer is they

1578
01:03:09,349 --> 01:03:15,380
have both have the N so you're just

1579
01:03:11,298 --> 01:03:20,048
talking about comparing K right to log

1580
01:03:15,380 --> 01:03:23,240
in if log n is actually smaller than K

1581
01:03:20,048 --> 01:03:25,489
right if that's you know if that's

1582
01:03:23,239 --> 01:03:28,848
actually smaller then this is probably

1583
01:03:25,489 --> 01:03:31,038
not such a win right and this might be

1584
01:03:28,849 --> 01:03:32,660
the case because often times you know

1585
01:03:31,039 --> 01:03:34,160
let's say I'm sorting you know maybe I'm

1586
01:03:32,659 --> 01:03:35,298
sorting a million items or something

1587
01:03:34,159 --> 01:03:38,420
like this so let's make it easier on

1588
01:03:35,298 --> 01:03:40,730
ourselves and say that we're sorting you

1589
01:03:38,420 --> 01:03:43,280
know 60 64,000

1590
01:03:40,730 --> 01:03:46,250
right so we know that login is is like

1591
01:03:43,280 --> 01:03:47,960
sixteen or something right then you're

1592
01:03:46,250 --> 01:03:50,659
gonna say well you know if it's sixteen

1593
01:03:47,960 --> 01:03:52,880
then this K you know how many things

1594
01:03:50,659 --> 01:03:55,190
that we're gonna sort this K was like 32

1595
01:03:52,880 --> 01:03:56,450
is that such a good idea right but maybe

1596
01:03:55,190 --> 01:03:57,950
it's smaller than that maybe I'm doing

1597
01:03:56,449 --> 01:03:59,899
it in bigger buckets so maybe it's more

1598
01:03:57,949 --> 01:04:03,379
like four or five right something like

1599
01:03:59,900 --> 01:04:07,880
that right well that's fine right that's

1600
01:04:03,380 --> 01:04:10,280
totally fine but that only that will

1601
01:04:07,880 --> 01:04:11,869
only be true as long as the thing that

1602
01:04:10,280 --> 01:04:14,660
you're sorting on the sort key is very

1603
01:04:11,869 --> 01:04:18,108
small right it's gotta be something like

1604
01:04:14,659 --> 01:04:20,839
a 16-bit integer right 32-bit integer

1605
01:04:18,108 --> 01:04:22,309
it's got to be something like that if I

1606
01:04:20,840 --> 01:04:24,108
had a giant type like you were

1607
01:04:22,309 --> 01:04:27,858
suggesting let's say I had a type that

1608
01:04:24,108 --> 01:04:30,230
was like 256 bytes you know long well

1609
01:04:27,858 --> 01:04:31,340
now suddenly K is almost always gonna be

1610
01:04:30,230 --> 01:04:33,769
bigger than long it's gonna be much

1611
01:04:31,340 --> 01:04:36,740
bigger than log n right log n might be

1612
01:04:33,769 --> 01:04:39,349
something only like 16 or like 20 or

1613
01:04:36,739 --> 01:04:42,289
even 30 - if we were sorting four

1614
01:04:39,349 --> 01:04:45,019
billion items it would only be 32 right

1615
01:04:42,289 --> 01:04:46,759
whereas this K is now massive no matter

1616
01:04:45,019 --> 01:04:48,650
what you were doing with this is 2056

1617
01:04:46,760 --> 01:04:51,470
bytes long that means this K is it's

1618
01:04:48,650 --> 01:04:55,190
probably 256 it could be maybe maybe

1619
01:04:51,469 --> 01:04:56,509
it's 128 maybe it's even as low as 64 or

1620
01:04:55,190 --> 01:04:57,710
something maybe depending on how you

1621
01:04:56,510 --> 01:05:00,109
were bucketing these things and how much

1622
01:04:57,710 --> 01:05:02,179
remember you chose to use but man right

1623
01:05:00,108 --> 01:05:04,159
that's starting to get pretty brutal

1624
01:05:02,179 --> 01:05:05,239
it's actually you're doing twice the

1625
01:05:04,159 --> 01:05:07,159
amount of work four times you're going

1626
01:05:05,239 --> 01:05:11,899
to work a considerably more amount of

1627
01:05:07,159 --> 01:05:14,420
work on this sort right so that's the

1628
01:05:11,900 --> 01:05:16,369
first reason is because K and log in do

1629
01:05:14,420 --> 01:05:18,579
not always compare favorably a lot of

1630
01:05:16,369 --> 01:05:21,440
times they do and the K is better maybe

1631
01:05:18,579 --> 01:05:24,500
but a lot of times they don't and so

1632
01:05:21,440 --> 01:05:28,909
that's one thing right the other thing

1633
01:05:24,500 --> 01:05:36,639
is you it may be impossible right so it

1634
01:05:28,909 --> 01:05:40,909
may be like impossible to make the key

1635
01:05:36,639 --> 01:05:43,629
right and so if I'm gonna sort on things

1636
01:05:40,909 --> 01:05:47,029
it may be that I need to compute

1637
01:05:43,630 --> 01:05:50,000
something that happens between these two

1638
01:05:47,030 --> 01:05:52,609
things that is not representable as a as

1639
01:05:50,000 --> 01:05:53,539
a a quantity now I know that sounds a

1640
01:05:52,608 --> 01:05:54,679
little weird and you're like what are

1641
01:05:53,539 --> 01:05:57,170
you talking about

1642
01:05:54,679 --> 01:06:00,889
well let's say we were trying to sort

1643
01:05:57,170 --> 01:06:03,950
based on the the euclidean distance

1644
01:06:00,889 --> 01:06:05,690
between two things so I've got this is

1645
01:06:03,949 --> 01:06:09,739
the thing that I'm sorting I'm sorting

1646
01:06:05,690 --> 01:06:12,139
an entity right and my entity has a v3

1647
01:06:09,739 --> 01:06:15,348
in it that's the location where is that

1648
01:06:12,139 --> 01:06:17,539
thing right and so I want to sort these

1649
01:06:15,349 --> 01:06:22,250
entities and I want to sort them based

1650
01:06:17,539 --> 01:06:25,159
on how far away they are like from each

1651
01:06:22,250 --> 01:06:26,269
other or something like this right see

1652
01:06:25,159 --> 01:06:33,319
if this is I don't even know if this is

1653
01:06:26,269 --> 01:06:34,789
actually all that legal I could make it

1654
01:06:33,320 --> 01:06:37,340
into a total ordering by doing some

1655
01:06:34,789 --> 01:06:40,329
things but that would require me to talk

1656
01:06:37,340 --> 01:06:46,099
about this but okay so partial ordering

1657
01:06:40,329 --> 01:06:47,630
and total ordering this gets into some

1658
01:06:46,099 --> 01:06:48,830
sorting stuff I don't know if maybe

1659
01:06:47,630 --> 01:06:51,079
we'll talk about this if maybe we won't

1660
01:06:48,829 --> 01:06:52,340
but point being let's say that the thing

1661
01:06:51,079 --> 01:06:53,960
that I want to sort on was actually a

1662
01:06:52,340 --> 01:06:56,180
function and it was a function of the

1663
01:06:53,960 --> 01:06:58,490
two things so I'm gonna sort on

1664
01:06:56,179 --> 01:07:01,190
something that's like you know I I want

1665
01:06:58,489 --> 01:07:03,618
to know you know distance between entity

1666
01:07:01,190 --> 01:07:07,429
a and entity B right and that's gonna be

1667
01:07:03,619 --> 01:07:10,789
like a P minus B P right and it's gonna

1668
01:07:07,429 --> 01:07:15,679
be whatever that that length is right

1669
01:07:10,789 --> 01:07:17,000
and that's gonna be well I guess I'm not

1670
01:07:15,679 --> 01:07:18,019
sure exactly how I could make turn this

1671
01:07:17,000 --> 01:07:22,909
into a sort I have to turn this into

1672
01:07:18,019 --> 01:07:24,139
something sorty because the length is

1673
01:07:22,909 --> 01:07:27,049
always gonna be positive so I need

1674
01:07:24,139 --> 01:07:32,239
something I need to I need a way of

1675
01:07:27,050 --> 01:07:33,950
using you have to just trust me that

1676
01:07:32,239 --> 01:07:37,039
these things exist if I can't think of

1677
01:07:33,949 --> 01:07:38,899
it just give me a second I'll I'll think

1678
01:07:37,039 --> 01:07:40,400
of a better example cuz that won't give

1679
01:07:38,900 --> 01:07:43,030
me a that won't give me a value that I

1680
01:07:40,400 --> 01:07:43,030
can store it on

1681
01:07:53,818 --> 01:08:16,930
how about how about a string okay so

1682
01:08:14,889 --> 01:08:19,869
I've got an Indiana has a name the name

1683
01:08:16,930 --> 01:08:22,088
is arbitrarily long so it can be you

1684
01:08:19,869 --> 01:08:24,969
know I don't know 26 bytes we have no

1685
01:08:22,088 --> 01:08:27,789
idea right and now I tell you I want to

1686
01:08:24,969 --> 01:08:29,289
sort these entities by their names so

1687
01:08:27,789 --> 01:08:32,409
that they're in alphabetical order or

1688
01:08:29,289 --> 01:08:34,988
something like this now I'm like well

1689
01:08:32,409 --> 01:08:37,599
okay for the rest of all of these sorts

1690
01:08:34,988 --> 01:08:39,309
right for all the other sorts all they

1691
01:08:37,600 --> 01:08:42,219
have to do is compare two items which

1692
01:08:39,310 --> 01:08:44,739
means it does not matter how long those

1693
01:08:42,219 --> 01:08:47,109
strings are they just work and they'll

1694
01:08:44,738 --> 01:08:49,869
compare the two strings and off you go

1695
01:08:47,109 --> 01:08:51,969
radix sort needs the sort key to be a

1696
01:08:49,869 --> 01:08:53,829
fixed length which means that the only

1697
01:08:51,969 --> 01:08:56,710
way you could possibly turn it into a

1698
01:08:53,829 --> 01:08:58,930
radix sort is you'd first have to go

1699
01:08:56,710 --> 01:09:01,060
through every single entity and you'd

1700
01:08:58,930 --> 01:09:04,180
have to look at how long the name was

1701
01:09:01,060 --> 01:09:06,310
right and then you'd have to make your

1702
01:09:04,180 --> 01:09:10,060
sort key be that many bits

1703
01:09:06,310 --> 01:09:12,039
however you know many bytes that thing

1704
01:09:10,060 --> 01:09:13,989
is you'd have to make it be you know

1705
01:09:12,039 --> 01:09:15,488
however many bits Long's the longest

1706
01:09:13,988 --> 01:09:16,869
name was that's how big your sorc you'd

1707
01:09:15,488 --> 01:09:20,259
have to be and then you'd have to

1708
01:09:16,869 --> 01:09:23,890
actually do the radix sort on that giant

1709
01:09:20,259 --> 01:09:25,930
thing right and so that right there is a

1710
01:09:23,890 --> 01:09:27,969
good example of how it may not even be

1711
01:09:25,930 --> 01:09:30,130
all that feasible even to just set up

1712
01:09:27,969 --> 01:09:32,319
the radix sort because even to just know

1713
01:09:30,130 --> 01:09:34,180
how big the key is you would have to do

1714
01:09:32,319 --> 01:09:36,609
a pass over all the data just to find

1715
01:09:34,180 --> 01:09:37,779
that out right whereas all the rest of

1716
01:09:36,609 --> 01:09:40,060
the people they don't care at all about

1717
01:09:37,779 --> 01:09:42,339
that furthermore you could invent kind

1718
01:09:40,060 --> 01:09:45,130
of really strange things in here which

1719
01:09:42,338 --> 01:09:49,689
is let's suppose that our sort order

1720
01:09:45,130 --> 01:09:51,640
actually takes into account some kind of

1721
01:09:49,689 --> 01:09:54,939
cross string behavior that might happen

1722
01:09:51,640 --> 01:09:59,190
so for example maybe I say something

1723
01:09:54,939 --> 01:09:59,189
like oh I've got like Dave

1724
01:09:59,979 --> 01:10:09,609
Bauer or something right is one of my

1725
01:10:03,100 --> 01:10:13,239
strings and let Carl Worthington is one

1726
01:10:09,609 --> 01:10:20,500
of my entities right and and then

1727
01:10:13,238 --> 01:10:24,488
there's like let's say Big Tuna all

1728
01:10:20,500 --> 01:10:26,409
right so here are some strings with all

1729
01:10:24,488 --> 01:10:28,479
of the other sort functions it would be

1730
01:10:26,409 --> 01:10:30,849
free for me to introduce weird cross

1731
01:10:28,479 --> 01:10:33,309
strings that think crossed string things

1732
01:10:30,850 --> 01:10:38,079
that happen I could say something like

1733
01:10:33,310 --> 01:10:41,469
they appear in alphabetical order except

1734
01:10:38,079 --> 01:10:43,869
for if the name Carl is being compared

1735
01:10:41,469 --> 01:10:44,649
to the name Dave and if it is I want to

1736
01:10:43,869 --> 01:10:47,859
switch the order

1737
01:10:44,649 --> 01:10:50,170
so all Carl's always appear before all

1738
01:10:47,859 --> 01:10:53,649
Dave's but otherwise everything is in

1739
01:10:50,170 --> 01:10:55,630
alphabetical order right now I would

1740
01:10:53,649 --> 01:10:57,939
have to do a thing we're like I have to

1741
01:10:55,630 --> 01:10:58,929
pre-process if you even can I mean you

1742
01:10:57,939 --> 01:11:01,629
could come up with things that are

1743
01:10:58,929 --> 01:11:03,760
pretty crazy here that maybe I'm traffic

1744
01:11:01,630 --> 01:11:05,679
if you can always pre-process or not I'd

1745
01:11:03,760 --> 01:11:07,900
have to do some weird thing to like

1746
01:11:05,679 --> 01:11:10,480
pre-process the names to make sure that

1747
01:11:07,899 --> 01:11:12,488
the the bit value I end up using for the

1748
01:11:10,479 --> 01:11:14,289
sort key for the radix is always the

1749
01:11:12,488 --> 01:11:15,849
right thing in that case or other stuff

1750
01:11:14,289 --> 01:11:17,769
like that right whereas in the other

1751
01:11:15,850 --> 01:11:19,510
cases in the comparison function when I

1752
01:11:17,770 --> 01:11:21,760
do you know I write my comparison

1753
01:11:19,510 --> 01:11:24,190
function for the sort all I just do is

1754
01:11:21,760 --> 01:11:26,230
say like oh well if it's like a Dave you

1755
01:11:24,189 --> 01:11:28,479
know if it's a Dave in a car all you

1756
01:11:26,229 --> 01:11:30,909
know do this one branch else do this

1757
01:11:28,479 --> 01:11:32,139
other branch and it's free right I don't

1758
01:11:30,909 --> 01:11:34,479
have to think at all I have to do

1759
01:11:32,140 --> 01:11:36,429
anything it just works so I can throw

1760
01:11:34,479 --> 01:11:38,589
special case stuff I can throw variable

1761
01:11:36,429 --> 01:11:40,659
length stuff everything just works with

1762
01:11:38,590 --> 01:11:43,060
all the other sorts radix sorts none of

1763
01:11:40,659 --> 01:11:46,119
it works radix sorts all you have to do

1764
01:11:43,060 --> 01:11:49,750
all this work to turn things into

1765
01:11:46,119 --> 01:11:52,960
strings of bits first and then you can

1766
01:11:49,750 --> 01:11:54,340
do it right and so that's another reason

1767
01:11:52,960 --> 01:11:56,380
why you wouldn't want to use a radix

1768
01:11:54,340 --> 01:11:57,699
sort is because it's very difficult to

1769
01:11:56,380 --> 01:12:05,340
turn things into radix sorts if they

1770
01:11:57,698 --> 01:12:05,339
have complexity in them let's see here

1771
01:12:06,229 --> 01:12:10,099
where my on cues

1772
01:12:11,179 --> 01:12:17,429
any news on potential pet white guests

1773
01:12:14,069 --> 01:12:20,518
stream stay tuned on that did you

1774
01:12:17,429 --> 01:12:23,248
mention sort stability at all I did not

1775
01:12:20,519 --> 01:12:27,199
so sort stability that's pretty easy to

1776
01:12:23,248 --> 01:12:27,198
to talk about so I'll talk about that

1777
01:12:29,479 --> 01:12:35,219
so sort stability just means that if I

1778
01:12:32,519 --> 01:12:44,309
am going to take some input right and

1779
01:12:35,219 --> 01:12:47,099
the input looks like a b c a d e f or

1780
01:12:44,309 --> 01:12:49,409
something like this right

1781
01:12:47,099 --> 01:12:51,659
imagine i have this and i say want this

1782
01:12:49,408 --> 01:12:58,198
sorted well all of the sorts will always

1783
01:12:51,658 --> 01:12:59,368
give you back a a b c d e okay so every

1784
01:12:58,198 --> 01:13:03,828
single sort that we're going to use

1785
01:12:59,368 --> 01:13:08,130
would do this for you no problem but the

1786
01:13:03,828 --> 01:13:10,768
question is which order do the a's come

1787
01:13:08,130 --> 01:13:13,409
in let's suppose there was something not

1788
01:13:10,769 --> 01:13:16,139
in the sort key that's stored over here

1789
01:13:13,408 --> 01:13:17,759
right so i have for each one of these

1790
01:13:16,139 --> 01:13:21,389
elements i have some number associated

1791
01:13:17,760 --> 01:13:25,139
with them five nine two three one seven

1792
01:13:21,389 --> 01:13:26,309
eight right so the question is well for

1793
01:13:25,139 --> 01:13:27,569
all these other guys i don't care

1794
01:13:26,309 --> 01:13:29,699
because i know that they're going to

1795
01:13:27,569 --> 01:13:31,288
come out in what in there's only one

1796
01:13:29,698 --> 01:13:33,958
order they can come out in b c d e f

1797
01:13:31,288 --> 01:13:35,309
right so i know this is gonna be the the

1798
01:13:33,958 --> 01:13:36,658
b that had the nine in it this is gonna

1799
01:13:35,309 --> 01:13:37,949
be the C with the two this is gonna be

1800
01:13:36,658 --> 01:13:39,149
the D with the one this is gonna be the

1801
01:13:37,948 --> 01:13:42,208
e that at the seven that's gonna be the

1802
01:13:39,149 --> 01:13:45,138
F that have the eight right but what

1803
01:13:42,208 --> 01:13:48,689
order do the A's come out in well that

1804
01:13:45,139 --> 01:13:51,719
is what sort stability is if a sort is

1805
01:13:48,689 --> 01:13:53,698
considered stable what it means is that

1806
01:13:51,719 --> 01:13:55,828
the A's will come out in the same order

1807
01:13:53,698 --> 01:13:59,009
in which you put them in or at least in

1808
01:13:55,828 --> 01:14:00,328
a predictable order right maybe you

1809
01:13:59,010 --> 01:14:01,650
could argue that one that have them came

1810
01:14:00,328 --> 01:14:02,880
out backwards was still stable because

1811
01:14:01,649 --> 01:14:04,978
we know they always come up backwards

1812
01:14:02,880 --> 01:14:05,998
but point being stable generally means

1813
01:14:04,979 --> 01:14:08,130
they caught in the same order you put

1814
01:14:05,998 --> 01:14:13,198
them in so the a5 comes out first and

1815
01:14:08,130 --> 01:14:15,859
the a3 comes out second okay if a sort

1816
01:14:13,198 --> 01:14:15,859
is not stable

1817
01:14:16,289 --> 01:14:19,409
that means they they could come out in

1818
01:14:17,520 --> 01:14:21,030
any order we don't know maybe the a

1819
01:14:19,409 --> 01:14:22,439
comes three comes first maybe the five

1820
01:14:21,029 --> 01:14:25,979
comes first we are not guaranteeing

1821
01:14:22,439 --> 01:14:27,299
anything very very simple concept first

1822
01:14:25,979 --> 01:14:30,689
question probably have why would you

1823
01:14:27,300 --> 01:14:32,369
care and the answer why you care is

1824
01:14:30,689 --> 01:14:36,059
because sometimes you want to sort by

1825
01:14:32,369 --> 01:14:39,149
more than one thing sort of in waves

1826
01:14:36,060 --> 01:14:41,100
right so for example I might want to do

1827
01:14:39,149 --> 01:14:46,019
something you ever see this where you go

1828
01:14:41,100 --> 01:14:48,930
like oh you know somebody gave me this

1829
01:14:46,020 --> 01:14:51,980
thing right and it's like oh it's like

1830
01:14:48,930 --> 01:14:54,990
here's the name and here's the like date

1831
01:14:51,979 --> 01:15:01,769
and here's the like you know quantity of

1832
01:14:54,989 --> 01:15:03,689
tuna right and like this is in Windows

1833
01:15:01,770 --> 01:15:05,280
Explorer and so like then I've got all

1834
01:15:03,689 --> 01:15:07,559
these things where it's like oh here's

1835
01:15:05,279 --> 01:15:11,159
like in food text and that was made on

1836
01:15:07,560 --> 01:15:14,789
like July 9th you know and it has like

1837
01:15:11,159 --> 01:15:18,779
two tons of tuna in it right and bla bla

1838
01:15:14,789 --> 01:15:20,789
bla bla bla right well you might want to

1839
01:15:18,779 --> 01:15:22,739
go like sort these by name like give me

1840
01:15:20,789 --> 01:15:23,789
the the sort by name right and you're

1841
01:15:22,739 --> 01:15:25,469
like well it doesn't matter whatever

1842
01:15:23,789 --> 01:15:28,829
sort we do it'll sort by name it's fine

1843
01:15:25,470 --> 01:15:30,990
right but then we maybe we want to do

1844
01:15:28,829 --> 01:15:32,550
like sort by date I took out sort by

1845
01:15:30,989 --> 01:15:33,989
date and it's like okay we sort by date

1846
01:15:32,550 --> 01:15:38,420
and I notice like there's a couple

1847
01:15:33,989 --> 01:15:40,229
things here that have July 9th right

1848
01:15:38,420 --> 01:15:42,329
kind of weird right there's a couple

1849
01:15:40,229 --> 01:15:44,939
things to judge a night so I want to see

1850
01:15:42,329 --> 01:15:47,010
on July 9th what had the highest

1851
01:15:44,939 --> 01:15:50,069
quantity of tuna well if I've got a

1852
01:15:47,010 --> 01:15:52,050
stable sort right I can do stuff like

1853
01:15:50,069 --> 01:15:54,119
say oh well sort by the quantity of tuna

1854
01:15:52,050 --> 01:15:55,409
first and then sort by the date or sort

1855
01:15:54,119 --> 01:15:58,550
by the date and then the quantity of

1856
01:15:55,409 --> 01:16:01,859
tuna and know that it will leave my

1857
01:15:58,550 --> 01:16:03,539
original sort right items will come in

1858
01:16:01,859 --> 01:16:05,369
the same order that they used to come in

1859
01:16:03,539 --> 01:16:07,289
so for to answer the question that I

1860
01:16:05,369 --> 01:16:09,300
gave as an example if I sort first by

1861
01:16:07,289 --> 01:16:11,239
quantity of tuna I know that all of my

1862
01:16:09,300 --> 01:16:13,680
things go in descending order of tuna

1863
01:16:11,239 --> 01:16:15,989
then I could just go click on sort by

1864
01:16:13,680 --> 01:16:17,820
date and it would bring the July nights

1865
01:16:15,989 --> 01:16:21,329
all together and I would know that it

1866
01:16:17,819 --> 01:16:24,090
would always be descending because they

1867
01:16:21,329 --> 01:16:26,640
started out I had pre-sorted my list for

1868
01:16:24,090 --> 01:16:28,250
quantity of tuna I click on date and I

1869
01:16:26,640 --> 01:16:29,559
know it's stable so it will never

1870
01:16:28,250 --> 01:16:32,109
rearrange

1871
01:16:29,559 --> 01:16:34,689
these up to put the zero first when I do

1872
01:16:32,109 --> 01:16:36,879
my date sort right it will keep them the

1873
01:16:34,689 --> 01:16:39,369
same and so sometimes being able to like

1874
01:16:36,878 --> 01:16:40,628
sort by one thing and then start sort by

1875
01:16:39,368 --> 01:16:44,438
another thing and know that the first

1876
01:16:40,628 --> 01:16:46,809
sort will now take precedence anytime I

1877
01:16:44,439 --> 01:16:50,859
have equivalent values in my second sort

1878
01:16:46,809 --> 01:16:53,889
is kind of handy right so in this case

1879
01:16:50,859 --> 01:16:56,379
here it's like let's say this sort was

1880
01:16:53,889 --> 01:16:58,719
important I sorted this on something

1881
01:16:56,378 --> 01:17:01,988
else before and so this value and this

1882
01:16:58,719 --> 01:17:04,479
value I want to know the fact that this

1883
01:17:01,988 --> 01:17:06,728
one was the lesser of the two for some

1884
01:17:04,479 --> 01:17:08,708
other sort and then I run this sort I

1885
01:17:06,729 --> 01:17:10,269
want to preserve that order so I know

1886
01:17:08,708 --> 01:17:11,648
that I'm going to encounter these in

1887
01:17:10,269 --> 01:17:14,918
that proper order that I tried to

1888
01:17:11,649 --> 01:17:17,800
prepare over here I won't get that if

1889
01:17:14,918 --> 01:17:22,568
the source is not stable not a huge deal

1890
01:17:17,800 --> 01:17:23,739
to be honest with you I can't think of a

1891
01:17:22,569 --> 01:17:27,819
time I've ever cared about stable

1892
01:17:23,738 --> 01:17:35,558
sorting doesn't mean you don't care it

1893
01:17:27,819 --> 01:17:37,569
just means I don't usually care me below

1894
01:17:35,559 --> 01:17:39,909
what else if anything do you think we'll

1895
01:17:37,569 --> 01:17:42,489
need to sort besides the sprites I don't

1896
01:17:39,908 --> 01:17:44,648
know it's possible that there'll be one

1897
01:17:42,488 --> 01:17:47,878
or two other things it's possible that

1898
01:17:44,649 --> 01:17:47,878
the sprites will be the only thing

1899
01:17:51,109 --> 01:17:54,989
cuber Caleb could we possibly generate

1900
01:17:53,159 --> 01:17:56,519
hints the ground chunks in such a way

1901
01:17:54,989 --> 01:18:02,750
that you using radix sort would be more

1902
01:17:56,520 --> 01:18:04,020
optimal I'm pretty sure that actually a

1903
01:18:02,750 --> 01:18:06,180
radix sort

1904
01:18:04,020 --> 01:18:08,940
radix sort might well be optimal just in

1905
01:18:06,180 --> 01:18:13,560
general for what we're doing but it's

1906
01:18:08,939 --> 01:18:16,409
hard to say Cronos yes it is proven I'm

1907
01:18:13,560 --> 01:18:19,230
pretty sure I assume thing you're saying

1908
01:18:16,409 --> 01:18:22,800
that was response to was was the fact

1909
01:18:19,229 --> 01:18:25,859
that I was saying that o n log n is the

1910
01:18:22,800 --> 01:18:27,360
fastest that sorts will ever be meaning

1911
01:18:25,859 --> 01:18:34,099
that there is no such thing as a sort of

1912
01:18:27,359 --> 01:18:34,099
general data that can go below n log N

1913
01:18:55,969 --> 01:18:59,149
long billion is shellsort basically

1914
01:18:58,458 --> 01:19:01,248
bubblesort

1915
01:18:59,149 --> 01:19:05,679
with a variable span between values

1916
01:19:01,248 --> 01:19:09,819
being compared yes as far as I remember

1917
01:19:05,679 --> 01:19:09,819
my recollection of shellsort

1918
01:19:12,788 --> 01:19:18,050
which I believe is named after someone

1919
01:19:15,078 --> 01:19:19,308
named shel I don't know if that's true I

1920
01:19:18,050 --> 01:19:20,689
don't know why it's called a shellsort

1921
01:19:19,309 --> 01:19:22,070
I'll be completely honest with you I

1922
01:19:20,689 --> 01:19:22,610
don't I don't remember why it's called a

1923
01:19:22,069 --> 01:19:25,458
shellsort

1924
01:19:22,609 --> 01:19:27,109
it just is my understanding is shellsort

1925
01:19:25,458 --> 01:19:28,880
is exactly the same as bubblesort it's

1926
01:19:27,109 --> 01:19:31,188
just you compare sort of a different

1927
01:19:28,880 --> 01:19:33,529
span so you go like oh okay

1928
01:19:31,189 --> 01:19:35,449
you know here's my items and normally in

1929
01:19:33,529 --> 01:19:36,918
bubble sort I compare these two then I

1930
01:19:35,448 --> 01:19:38,299
compare these two that I compare these

1931
01:19:36,918 --> 01:19:39,498
two then I compare these two then I

1932
01:19:38,300 --> 01:19:42,099
compare these two they can read these do

1933
01:19:39,498 --> 01:19:44,328
right that's a bubble sort and I do that

1934
01:19:42,099 --> 01:19:46,069
until the list of sort of keep doing it

1935
01:19:44,328 --> 01:19:48,018
doing it doing it doing it doing it to

1936
01:19:46,069 --> 01:19:51,139
list the story of a shellsort says yeah

1937
01:19:48,019 --> 01:19:53,748
you know what let's not do that let's do

1938
01:19:51,139 --> 01:19:55,819
like first we'll do like this you know

1939
01:19:53,748 --> 01:19:57,408
do elements that are that far away from

1940
01:19:55,819 --> 01:19:58,908
each other or something right and then

1941
01:19:57,408 --> 01:20:01,308
maybe we'll do elements that are that

1942
01:19:58,908 --> 01:20:03,168
are less right and I feel like there's

1943
01:20:01,309 --> 01:20:06,189
like a whole family of shell sorts and

1944
01:20:03,168 --> 01:20:11,328
they're based on how you choose on which

1945
01:20:06,189 --> 01:20:13,610
passes which distances you know and the

1946
01:20:11,328 --> 01:20:14,868
idea is hey you could move if there's

1947
01:20:13,609 --> 01:20:16,819
things at the bottom that really should

1948
01:20:14,868 --> 01:20:19,368
be towards the top those first passes

1949
01:20:16,819 --> 01:20:21,228
like get them up there right and so I

1950
01:20:19,368 --> 01:20:24,139
feel like shell sorts are generally

1951
01:20:21,229 --> 01:20:27,050
about - basically they're the idea is

1952
01:20:24,139 --> 01:20:28,998
tune a bubble sort so that the kinds of

1953
01:20:27,050 --> 01:20:32,029
data that you're getting actually takes

1954
01:20:28,998 --> 01:20:34,399
very few of those passes to bubble up to

1955
01:20:32,029 --> 01:20:35,779
the right place and you can imagine that

1956
01:20:34,399 --> 01:20:37,668
working right if you know kind of how

1957
01:20:35,779 --> 01:20:39,319
your data might might come out you can

1958
01:20:37,668 --> 01:20:41,748
probably design some shell passes that

1959
01:20:39,319 --> 01:20:45,288
will have it take this with a grain of

1960
01:20:41,748 --> 01:20:46,938
salt because I don't remember that may

1961
01:20:45,288 --> 01:20:48,618
have a totally inaccurate explanation of

1962
01:20:46,939 --> 01:20:50,769
shellsort but that's what I remember it

1963
01:20:48,618 --> 01:20:50,768
being

1964
01:20:57,689 --> 01:21:02,169
mr. slick 10:15

1965
01:20:59,649 --> 01:21:04,420
is this cross-platform yet it depends

1966
01:21:02,170 --> 01:21:05,739
what you mean I as I said many times in

1967
01:21:04,420 --> 01:21:07,000
the stream I it will not be

1968
01:21:05,738 --> 01:21:09,549
cross-platform until we're done with it

1969
01:21:07,000 --> 01:21:11,439
because I won't be doing streams for

1970
01:21:09,550 --> 01:21:14,559
other platforms till we finish the game

1971
01:21:11,439 --> 01:21:16,598
on one platform but other people have

1972
01:21:14,559 --> 01:21:19,800
done ports so there's an SD L port of it

1973
01:21:16,599 --> 01:21:22,090
if you want to use the SD l port of it

1974
01:21:19,800 --> 01:21:24,909
so it's cross-platform in the sense that

1975
01:21:22,090 --> 01:21:28,750
other people have posted the code on the

1976
01:21:24,908 --> 01:21:30,488
on the get on the github that you get

1977
01:21:28,750 --> 01:21:32,920
when you pre-order the game or whatever

1978
01:21:30,488 --> 01:21:34,868
there's an SD L port up there that

1979
01:21:32,920 --> 01:21:36,880
people did and I don't I haven't looked

1980
01:21:34,868 --> 01:21:39,179
at it but I assume it's up to date I'm

1981
01:21:36,880 --> 01:21:39,179
not sure

1982
01:21:45,890 --> 01:21:49,920
dragon keno - with something like a

1983
01:21:48,060 --> 01:21:50,910
PivotTable be a sort problem or

1984
01:21:49,920 --> 01:21:53,190
something else altogether

1985
01:21:50,909 --> 01:21:55,170
is that more a sort amalgamation

1986
01:21:53,189 --> 01:21:56,729
summarization I'm sorry I don't really

1987
01:21:55,170 --> 01:21:58,440
know what a pivot table is I know

1988
01:21:56,729 --> 01:22:05,489
there's something in like s Excel or

1989
01:21:58,439 --> 01:22:07,949
something but I never used one elven off

1990
01:22:05,489 --> 01:22:09,420
topic which more do you like the fixed

1991
01:22:07,949 --> 01:22:11,340
function API of OpenGL or the

1992
01:22:09,420 --> 01:22:12,690
programmable one I've been using the

1993
01:22:11,340 --> 01:22:14,130
modern approach but reading examples for

1994
01:22:12,689 --> 01:22:15,689
the fixed pipeline they seem to be a lot

1995
01:22:14,130 --> 01:22:19,109
more intuitive easier understand the

1996
01:22:15,689 --> 01:22:22,789
flow of things I prefer the programmable

1997
01:22:19,109 --> 01:22:26,339
one but I wish that it had been better

1998
01:22:22,789 --> 01:22:28,260
designed at this point it's kind of all

1999
01:22:26,340 --> 01:22:30,750
smooshed together now because it went

2000
01:22:28,260 --> 01:22:35,090
through so many likes baby steps to get

2001
01:22:30,750 --> 01:22:35,090
to where it went it's kind of you know

2002
01:22:36,680 --> 01:22:42,720
snowy crystals so bio description is a

2003
01:22:39,899 --> 01:22:47,279
stable sort resource intensive since it

2004
01:22:42,720 --> 01:22:49,079
seems like it could be max N squared n

2005
01:22:47,279 --> 01:22:53,689
log n depending on sort type since you

2006
01:22:49,079 --> 01:22:56,309
have to run through the data twice no

2007
01:22:53,689 --> 01:22:59,579
so really all that matters like for

2008
01:22:56,310 --> 01:23:02,190
example I think I think you could do

2009
01:22:59,579 --> 01:23:05,010
like a stable merge sort right because

2010
01:23:02,189 --> 01:23:08,429
you're only reversing elements when you

2011
01:23:05,010 --> 01:23:10,199
have to and so like for example I feel

2012
01:23:08,430 --> 01:23:12,390
like you could do a stable merge sort

2013
01:23:10,199 --> 01:23:15,420
just fine and it's Oh n log n right

2014
01:23:12,390 --> 01:23:17,100
because all that matters in fact let's

2015
01:23:15,420 --> 01:23:23,220
let's double check I mean you know this

2016
01:23:17,100 --> 01:23:25,620
is this is known merge sort stable yeah

2017
01:23:23,220 --> 01:23:28,980
so most implementations views a stable

2018
01:23:25,619 --> 01:23:31,439
sort because you know when you're going

2019
01:23:28,979 --> 01:23:33,629
through the elements if the way that the

2020
01:23:31,439 --> 01:23:35,909
sort is set up makes it easy for you to

2021
01:23:33,630 --> 01:23:37,680
just copy the things in the order they

2022
01:23:35,909 --> 01:23:40,079
happened in the original thing when you

2023
01:23:37,680 --> 01:23:42,150
don't detect a switch then it's stable I

2024
01:23:40,079 --> 01:23:46,460
feel like bubble sort would also be

2025
01:23:42,149 --> 01:23:46,460
stable and it's only N squared right

2026
01:23:53,600 --> 01:23:56,960
let's see

2027
01:24:10,869 --> 01:24:15,439
Narad 91 wouldn't you stop teasing us

2028
01:24:14,180 --> 01:24:19,100
with the interactive fiction post and

2029
01:24:15,439 --> 01:24:21,649
get to the details what details are you

2030
01:24:19,100 --> 01:24:23,570
talking about in so far us will you

2031
01:24:21,649 --> 01:24:25,729
leave in some bugs for speedrunners to

2032
01:24:23,569 --> 01:24:28,549
break the game with up well

2033
01:24:25,729 --> 01:24:29,869
you don't leave in bugs or speedrunners

2034
01:24:28,550 --> 01:24:32,060
to break the game with you just you just

2035
01:24:29,869 --> 01:24:33,260
have bugs I mean what are the chances

2036
01:24:32,060 --> 01:24:36,170
that we're gonna make this whole game

2037
01:24:33,260 --> 01:24:37,730
and not have any bugs in it right like

2038
01:24:36,170 --> 01:24:39,319
you always have bugs and so we don't

2039
01:24:37,729 --> 01:24:40,819
need to leave them in we'll just we'll

2040
01:24:39,319 --> 01:24:42,920
just have they'll just be some and

2041
01:24:40,819 --> 01:24:50,389
they'll find them and then it will be

2042
01:24:42,920 --> 01:24:51,710
fun or funny to watch dragon Kino 2 with

2043
01:24:50,390 --> 01:24:53,450
a sort is this actually adjusting and

2044
01:24:51,710 --> 01:24:55,340
rewriting the data on the disk or would

2045
01:24:53,449 --> 01:24:57,349
it just be in using would just be

2046
01:24:55,340 --> 01:24:59,390
updating X's or pointers just once you

2047
01:24:57,350 --> 01:25:01,130
sort could you read start to finish or

2048
01:24:59,390 --> 01:25:04,160
is it pointer intensive read 10 records

2049
01:25:01,130 --> 01:25:05,390
jump read next five jump well it depends

2050
01:25:04,159 --> 01:25:07,130
what you're doing right in our case

2051
01:25:05,390 --> 01:25:08,600
we're just sorting in memory and you can

2052
01:25:07,130 --> 01:25:10,640
see right here all we do is just swap

2053
01:25:08,600 --> 01:25:12,079
the stuff in place but if you wanted to

2054
01:25:10,640 --> 01:25:13,850
you could do it in a different way you

2055
01:25:12,079 --> 01:25:15,529
could do it with a reference table and

2056
01:25:13,850 --> 01:25:17,329
in fact you could almost actually to be

2057
01:25:15,529 --> 01:25:18,949
honest we're already sort of doing it

2058
01:25:17,329 --> 01:25:21,050
with with a reference table right

2059
01:25:18,949 --> 01:25:24,229
because what we sort is not the actual

2060
01:25:21,050 --> 01:25:26,360
things we just sort the addresses of the

2061
01:25:24,229 --> 01:25:27,859
things so we sort by the sort key and we

2062
01:25:26,359 --> 01:25:29,238
remember what the addresses are and then

2063
01:25:27,859 --> 01:25:30,769
we just go grab those addresses so we're

2064
01:25:29,238 --> 01:25:32,809
already kind of using one level of

2065
01:25:30,770 --> 01:25:36,040
indirection to avoid having to copy

2066
01:25:32,810 --> 01:25:36,039
things around when we do our sort

2067
01:25:44,789 --> 01:25:49,800
new rad 91 says I mean how you actually

2068
01:25:48,510 --> 01:25:51,780
went about solving the problems it seems

2069
01:25:49,800 --> 01:25:54,869
so closed for weeks then cliffhanger so

2070
01:25:51,779 --> 01:25:57,840
I hate to disappoint you but we're not

2071
01:25:54,869 --> 01:25:59,429
going to talk about the solutions all

2072
01:25:57,840 --> 01:26:01,079
this all the Molly rocket code is

2073
01:25:59,429 --> 01:26:03,270
proprietary I've said this before but

2074
01:26:01,079 --> 01:26:06,238
I'll say it again like we don't post

2075
01:26:03,270 --> 01:26:08,909
that so like our engine will be

2076
01:26:06,238 --> 01:26:10,049
proprietary and it will not be discussed

2077
01:26:08,908 --> 01:26:13,738
how it works

2078
01:26:10,050 --> 01:26:15,179
so the posts on the current one are four

2079
01:26:13,738 --> 01:26:16,919
players mostly they're just talking

2080
01:26:15,179 --> 01:26:18,929
about why we thought there were problems

2081
01:26:16,920 --> 01:26:21,179
and which problems it is that we are

2082
01:26:18,929 --> 01:26:23,279
solving if that makes sense

2083
01:26:21,179 --> 01:26:24,929
and there will be then there'll be a

2084
01:26:23,279 --> 01:26:27,988
game announcement on there that that

2085
01:26:24,929 --> 01:26:29,760
talks about the game and and that sort

2086
01:26:27,988 --> 01:26:30,959
of stuff but we don't that's not a

2087
01:26:29,760 --> 01:26:32,340
programming blog and there's not going

2088
01:26:30,960 --> 01:26:34,020
to be any discussion of the programming

2089
01:26:32,340 --> 01:26:37,739
on there so I can save you the trouble

2090
01:26:34,020 --> 01:26:40,260
if you're expecting that there's there's

2091
01:26:37,738 --> 01:26:42,238
not going to be there's not going to be

2092
01:26:40,260 --> 01:26:44,750
any programming discussions on the Molly

2093
01:26:42,238 --> 01:26:44,750
rocket blog

2094
01:27:01,448 --> 01:27:06,829
snowy crystals

2095
01:27:03,619 --> 01:27:08,840
I read a post the other day that said

2096
01:27:06,829 --> 01:27:10,880
syntax coloring is bad for programming

2097
01:27:08,840 --> 01:27:12,680
practices and in enforces skimming

2098
01:27:10,880 --> 01:27:16,789
rather than understanding do you agree

2099
01:27:12,680 --> 01:27:18,710
or not I feel like that's a pretty

2100
01:27:16,789 --> 01:27:21,260
that's got to be a pretty data free I

2101
01:27:18,710 --> 01:27:22,609
mean that's just obviously a random

2102
01:27:21,260 --> 01:27:27,079
statement I mean how could anyone have

2103
01:27:22,609 --> 01:27:29,779
proven such a thing so that sounds kind

2104
01:27:27,079 --> 01:27:31,609
of arbitrary to me but I guess on the

2105
01:27:29,779 --> 01:27:33,198
other hand what I will say is I turn a

2106
01:27:31,609 --> 01:27:35,929
lot of it off like you can notice that I

2107
01:27:33,198 --> 01:27:38,509
generally don't syntax highlight very

2108
01:27:35,930 --> 01:27:42,289
much so I guess for my tastes I don't

2109
01:27:38,510 --> 01:27:43,909
tend to like that much of it but that

2110
01:27:42,289 --> 01:27:45,380
may just because I don't love the way

2111
01:27:43,909 --> 01:27:48,130
that syntax how others tend to highlight

2112
01:27:45,380 --> 01:27:54,109
things I don't know so I would say

2113
01:27:48,130 --> 01:28:01,250
probably depends on the person very

2114
01:27:54,109 --> 01:28:03,170
since no rad 91 now I know that I have

2115
01:28:01,250 --> 01:28:05,689
to buy a game to find out that's fine

2116
01:28:03,170 --> 01:28:08,659
thank you uh you won't have to buy the

2117
01:28:05,689 --> 01:28:10,309
game to find out the because the game

2118
01:28:08,659 --> 01:28:13,069
won't say how its programmed either and

2119
01:28:10,310 --> 01:28:15,140
on the blog we will talk about like what

2120
01:28:13,069 --> 01:28:17,210
the game does that's interesting and and

2121
01:28:15,140 --> 01:28:19,280
they'll be gameplay videos and stuff

2122
01:28:17,210 --> 01:28:21,409
like that so obviously like we'll talk

2123
01:28:19,279 --> 01:28:23,988
about which problems we feel like we

2124
01:28:21,409 --> 01:28:24,619
solved and how well we solved them if

2125
01:28:23,988 --> 01:28:26,809
that makes sense

2126
01:28:24,619 --> 01:28:28,849
but we just won't be talking about how

2127
01:28:26,810 --> 01:28:33,430
we solve them meaning the the actual

2128
01:28:28,850 --> 01:28:33,430
implementation will not be public

2129
01:28:46,539 --> 01:28:56,600
let's see any cues any other cues I

2130
01:28:54,130 --> 01:28:57,710
think we're done with Q&amp;A anyway so it's

2131
01:28:56,600 --> 01:29:02,120
probably good that there are no more

2132
01:28:57,710 --> 01:29:17,060
queues because that means we can wrap it

2133
01:29:02,119 --> 01:29:21,279
up all right it looks like that's about

2134
01:29:17,060 --> 01:29:27,010
it on the questions if that makes sense

2135
01:29:21,279 --> 01:29:29,149
so yeah let's go ahead and and wind down

2136
01:29:27,010 --> 01:29:30,920
thank you very much for joining me for

2137
01:29:29,149 --> 01:29:32,379
another episode of handmade hero it's

2138
01:29:30,920 --> 01:29:35,600
been a pleasure coding with you as

2139
01:29:32,380 --> 01:29:37,190
always we will be back to programming

2140
01:29:35,600 --> 01:29:40,510
tomorrow as I think we have now gotten

2141
01:29:37,189 --> 01:29:44,269
through everything that there is to say

2142
01:29:40,510 --> 01:29:46,820
from my perspective on our notation

2143
01:29:44,270 --> 01:29:50,420
because that's like I said all I know I

2144
01:29:46,819 --> 01:29:52,189
am NOT a CS person so you know as much

2145
01:29:50,420 --> 01:29:54,319
as I do about augmentation now which is

2146
01:29:52,189 --> 01:29:57,649
not very much but it's the amount that I

2147
01:29:54,319 --> 01:29:59,869
think you should know if you are someone

2148
01:29:57,649 --> 01:30:02,089
who does game programming because I feel

2149
01:29:59,869 --> 01:30:06,019
like you should be aware of of what the

2150
01:30:02,090 --> 01:30:07,969
complexity is of the algorithms that you

2151
01:30:06,020 --> 01:30:09,650
choose and so now that we're done with

2152
01:30:07,969 --> 01:30:13,640
that tomorrow we can implement some of

2153
01:30:09,649 --> 01:30:15,049
those sorts and yeah and then we will be

2154
01:30:13,640 --> 01:30:17,210
done with sorting because there really

2155
01:30:15,050 --> 01:30:18,469
isn't that much to it and it's not that

2156
01:30:17,210 --> 01:30:20,630
big of a deal

2157
01:30:18,469 --> 01:30:23,989
for games most of the time sorts are not

2158
01:30:20,630 --> 01:30:25,190
really that important and so really I

2159
01:30:23,988 --> 01:30:26,839
just wanted to go over it as an

2160
01:30:25,189 --> 01:30:28,189
introduction orientation because we talk

2161
01:30:26,840 --> 01:30:30,949
about it a lot and I mention order

2162
01:30:28,189 --> 01:30:32,389
notation on Hammad here so far sorting

2163
01:30:30,949 --> 01:30:33,679
is kind of a very classic one there's a

2164
01:30:32,390 --> 01:30:36,260
lot of literature on it so it's just a

2165
01:30:33,680 --> 01:30:37,520
good place to kind of sneak in a time

2166
01:30:36,260 --> 01:30:39,140
talking about hey there's a whole field

2167
01:30:37,520 --> 01:30:41,510
here and there's all these things to

2168
01:30:39,140 --> 01:30:42,050
know about if you care and so that's

2169
01:30:41,510 --> 01:30:43,369
what we did

2170
01:30:42,050 --> 01:30:44,600
so we'll implant to the marrow and

2171
01:30:43,369 --> 01:30:47,899
that'll be the end of our sorting we'll

2172
01:30:44,600 --> 01:30:52,190
move on to some other stuff that is it

2173
01:30:47,899 --> 01:30:55,549
for now if you would like to follow

2174
01:30:52,189 --> 01:30:56,779
along at home with the coding tomorrow

2175
01:30:55,550 --> 01:30:58,760
you can always pre-order the game it

2176
01:30:56,779 --> 01:30:59,539
comes the source code on handmade hero

2177
01:30:58,760 --> 01:31:01,880
org

2178
01:30:59,539 --> 01:31:03,109
you can also go to our forum site and

2179
01:31:01,880 --> 01:31:05,210
ask questions if you have follow-up

2180
01:31:03,109 --> 01:31:06,439
questions you can subscribe to our

2181
01:31:05,210 --> 01:31:09,350
patreon if you want to support the video

2182
01:31:06,439 --> 01:31:11,269
series and you can also look at our

2183
01:31:09,350 --> 01:31:14,930
tweet pot to find out when we are

2184
01:31:11,270 --> 01:31:16,580
broadcasting live and that of course is

2185
01:31:14,930 --> 01:31:17,869
known for tomorrow 5:00 p.m. Pacific

2186
01:31:16,579 --> 01:31:19,189
Standard Time I will be right back here

2187
01:31:17,869 --> 01:31:22,760
for the last few more the week the

2188
01:31:19,189 --> 01:31:24,319
Friday's game and then the tweet bots

2189
01:31:22,760 --> 01:31:27,890
will of course after that tell you when

2190
01:31:24,319 --> 01:31:30,380
we will be live next week that's it for

2191
01:31:27,890 --> 01:31:32,420
today thanks everyone for joining me and

2192
01:31:30,380 --> 01:31:36,020
I will catch you guys on the Internet

2193
01:31:32,420 --> 01:31:39,760
and hopefully tomorrow at 5 p.m. for our

2194
01:31:36,020 --> 01:31:39,760
sorting take it easy everyone

