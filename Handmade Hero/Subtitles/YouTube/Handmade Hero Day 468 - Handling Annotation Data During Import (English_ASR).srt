1
00:00:00,060 --> 00:00:04,048
hello everyone and welcome to handmade

2
00:00:01,829 --> 00:00:07,200
Hero show recode a complete game live on

3
00:00:04,049 --> 00:00:10,820
stream we are going to take a look today

4
00:00:07,200 --> 00:00:14,490
at cleaning up our sort of on-demand

5
00:00:10,820 --> 00:00:16,859
asset importing and really where we've

6
00:00:14,490 --> 00:00:18,600
gotten with that is we did all the heavy

7
00:00:16,859 --> 00:00:21,630
lifting

8
00:00:18,600 --> 00:00:23,340
we even have now a tool that can manage

9
00:00:21,629 --> 00:00:29,189
our file formats for us and all kinds of

10
00:00:23,339 --> 00:00:31,410
stuff like this and you know the place

11
00:00:29,189 --> 00:00:34,590
that we've kind of gotten to is we now

12
00:00:31,410 --> 00:00:37,770
really have to start deciding what we

13
00:00:34,590 --> 00:00:40,109
want our asset specification to be what

14
00:00:37,770 --> 00:00:42,239
we want our for word specification to be

15
00:00:40,109 --> 00:00:46,378
where the game says I want to put this

16
00:00:42,238 --> 00:00:48,328
asset in in this place and this is a

17
00:00:46,378 --> 00:00:50,460
really tricky problem it's a very tricky

18
00:00:48,329 --> 00:00:52,410
problem because it's not the kind of

19
00:00:50,460 --> 00:00:54,808
thing where the right answers can be

20
00:00:52,409 --> 00:00:57,448
measured in terms of certain specific

21
00:00:54,808 --> 00:00:58,979
things that are easy to understand based

22
00:00:57,448 --> 00:01:02,250
on the other sorts of things we've done

23
00:00:58,979 --> 00:01:04,259
on handmade hero it doesn't have a lot

24
00:01:02,250 --> 00:01:07,079
to do with performance there are some

25
00:01:04,260 --> 00:01:09,060
performance implications but most of

26
00:01:07,079 --> 00:01:10,950
time we have plenty of CPU power around

27
00:01:09,060 --> 00:01:14,960
for matching assets it's not really a

28
00:01:10,950 --> 00:01:19,079
huge deal it's not really a space issue

29
00:01:14,959 --> 00:01:21,149
assets typically the like bitmap data or

30
00:01:19,079 --> 00:01:23,188
whatever else is is the asset that

31
00:01:21,150 --> 00:01:25,830
you're talking about typically the asset

32
00:01:23,188 --> 00:01:28,798
data itself is just much much larger

33
00:01:25,829 --> 00:01:31,170
than any of the metadata associated with

34
00:01:28,799 --> 00:01:33,570
it so it's not a storage concern so we

35
00:01:31,170 --> 00:01:34,590
can't say let's optimize for storage we

36
00:01:33,569 --> 00:01:36,929
can't really say that's optimized for

37
00:01:34,590 --> 00:01:39,030
speed probably cuz both of those two

38
00:01:36,930 --> 00:01:40,740
things really it's not gonna matter very

39
00:01:39,030 --> 00:01:43,469
much which one we do we have a flex way

40
00:01:40,739 --> 00:01:46,259
to either it's not the kind of thing we

41
00:01:43,469 --> 00:01:47,728
can really look at as an API problem and

42
00:01:46,259 --> 00:01:49,170
the reason for that is because a lot of

43
00:01:47,728 --> 00:01:51,060
the things we would look at for an API

44
00:01:49,170 --> 00:01:52,890
problem just aren't involved here this

45
00:01:51,060 --> 00:01:54,750
has to do with communicating between a

46
00:01:52,890 --> 00:01:58,500
programmer and an artist basically not

47
00:01:54,750 --> 00:02:00,328
between two parts of code and so what we

48
00:01:58,500 --> 00:02:03,359
really now have to focus on is something

49
00:02:00,328 --> 00:02:05,849
a little bit more existential a little

50
00:02:03,359 --> 00:02:07,319
bit sort of further out side the

51
00:02:05,849 --> 00:02:10,469
boundaries of what we normally talk

52
00:02:07,319 --> 00:02:13,959
about and just go towards a vague kind

53
00:02:10,469 --> 00:02:16,979
of exploration of like look

54
00:02:13,959 --> 00:02:19,209
if we just kind of follow the API design

55
00:02:16,979 --> 00:02:22,810
principles loosely that I've talked

56
00:02:19,209 --> 00:02:24,280
about in the series before meaning focus

57
00:02:22,810 --> 00:02:26,199
on the usage code what does it look like

58
00:02:24,280 --> 00:02:29,109
what would what would make the most

59
00:02:26,199 --> 00:02:31,089
sense for us to type in here take a look

60
00:02:29,109 --> 00:02:33,489
at that take a look at the other side

61
00:02:31,090 --> 00:02:35,019
the side that's improving the importing

62
00:02:33,489 --> 00:02:37,200
where is it getting a theta from what

63
00:02:35,019 --> 00:02:40,180
kinds of things are the artists making

64
00:02:37,199 --> 00:02:44,108
that sort of thing and just try to see

65
00:02:40,180 --> 00:02:46,239
if we can guess what the right sort of

66
00:02:44,109 --> 00:02:50,139
thing is for all of these kind of

67
00:02:46,239 --> 00:02:52,750
competing all of these things that are

68
00:02:50,139 --> 00:02:56,379
in tension with each other what makes

69
00:02:52,750 --> 00:02:59,530
the most sense for us and we kind of

70
00:02:56,378 --> 00:03:02,289
know that the tagging is a nice flexible

71
00:02:59,530 --> 00:03:04,780
way to just say look we can put a bunch

72
00:03:02,289 --> 00:03:07,358
of stuff onto an asset and say here's

73
00:03:04,780 --> 00:03:10,568
just some values and some tags that say

74
00:03:07,359 --> 00:03:12,879
what those values mean we know that we

75
00:03:10,568 --> 00:03:15,280
can do that and that it's very flexible

76
00:03:12,878 --> 00:03:18,608
and allows us to add new things that's

77
00:03:15,280 --> 00:03:23,199
probably good but the question is how do

78
00:03:18,609 --> 00:03:25,299
we use those tags to actually create a

79
00:03:23,199 --> 00:03:27,669
system that works well on the other side

80
00:03:25,299 --> 00:03:29,650
or on both sides really so how do we

81
00:03:27,669 --> 00:03:32,379
know what the tags are for an imported

82
00:03:29,650 --> 00:03:34,780
asset and then when we load something in

83
00:03:32,378 --> 00:03:37,810
how do we process those tags into some

84
00:03:34,780 --> 00:03:42,039
kind of a state that allows the people

85
00:03:37,810 --> 00:03:44,739
who are using the asset system to

86
00:03:42,039 --> 00:03:47,378
efficiently talk about the kinds of

87
00:03:44,739 --> 00:03:48,310
assets they need and get them and one of

88
00:03:47,378 --> 00:03:49,780
the things that we might want to

89
00:03:48,310 --> 00:03:52,150
consider in the mix here which I mention

90
00:03:49,780 --> 00:03:53,799
a couple times is if this is something

91
00:03:52,150 --> 00:03:56,549
that people continue to learn from in

92
00:03:53,799 --> 00:03:59,019
the future and use as sort of like a

93
00:03:56,549 --> 00:04:00,219
like I've said all the code for hammer

94
00:03:59,019 --> 00:04:02,709
here will be released in the public

95
00:04:00,219 --> 00:04:05,318
domain eventually at that time if it's

96
00:04:02,709 --> 00:04:08,560
sort of used as a playground for things

97
00:04:05,318 --> 00:04:11,078
people trying out various algorithms or

98
00:04:08,560 --> 00:04:13,959
you know learning and experimenting with

99
00:04:11,079 --> 00:04:16,000
low-level code or whatever it's nice to

100
00:04:13,959 --> 00:04:17,709
be able to have them be able to trade

101
00:04:16,000 --> 00:04:21,339
stuff around like it'd be nice to be

102
00:04:17,709 --> 00:04:23,709
able to say here I posted some new mods

103
00:04:21,339 --> 00:04:25,179
to handmade hero and and here are the

104
00:04:23,709 --> 00:04:27,189
sprites that go with it

105
00:04:25,180 --> 00:04:29,470
it would be nice if those

106
00:04:27,189 --> 00:04:32,740
could integrate into the system cleanly

107
00:04:29,470 --> 00:04:35,260
and not require a lot of rewrites of the

108
00:04:32,740 --> 00:04:39,009
asset matching system so be not it'd be

109
00:04:35,259 --> 00:04:40,959
nice to have a way of exposing things

110
00:04:39,009 --> 00:04:43,420
easily when you add something the code

111
00:04:40,959 --> 00:04:45,579
base having it be pretty easy to expose

112
00:04:43,420 --> 00:04:47,500
it such that people can write sprite

113
00:04:45,579 --> 00:04:49,870
sheets for that and have that flow

114
00:04:47,500 --> 00:04:52,600
through the system without everyone

115
00:04:49,870 --> 00:04:55,000
having to change the way they're doing

116
00:04:52,600 --> 00:04:57,370
things or who knows what right so that

117
00:04:55,000 --> 00:04:58,329
miscibility would be nice and you can

118
00:04:57,370 --> 00:05:00,790
even think of it a little bit more

119
00:04:58,329 --> 00:05:03,579
broadly and say if we eventually allow

120
00:05:00,790 --> 00:05:05,500
multiple dll's to be loaded so you know

121
00:05:03,579 --> 00:05:07,779
in the future let's suppose we're done

122
00:05:05,500 --> 00:05:09,579
with with the main part of the game and

123
00:05:07,779 --> 00:05:12,759
we say what if we want to break this

124
00:05:09,579 --> 00:05:14,709
into something easily model how would we

125
00:05:12,759 --> 00:05:16,719
make it so that you could load lots of

126
00:05:14,709 --> 00:05:20,439
different gameplay DLLs and have them

127
00:05:16,720 --> 00:05:23,140
all mixed together right well if we want

128
00:05:20,439 --> 00:05:24,699
to do something like that what

129
00:05:23,139 --> 00:05:26,500
implications would that have for the

130
00:05:24,699 --> 00:05:29,050
asset system right cuz now you've got

131
00:05:26,500 --> 00:05:30,850
multiple people all of whom are talking

132
00:05:29,050 --> 00:05:33,160
about potentially different sorts of

133
00:05:30,850 --> 00:05:35,439
tags maybe even tags that only they

134
00:05:33,160 --> 00:05:37,240
understand and know about how would that

135
00:05:35,439 --> 00:05:40,839
come into play what would that mean

136
00:05:37,240 --> 00:05:42,550
right so we kind of have a lot of

137
00:05:40,839 --> 00:05:44,649
competing concerns there it's difficult

138
00:05:42,550 --> 00:05:46,540
to really think them through so what we

139
00:05:44,649 --> 00:05:48,370
want to do is just be aware of that see

140
00:05:46,540 --> 00:05:49,750
what kind of progress we can make we've

141
00:05:48,370 --> 00:05:51,879
got some obvious clean up stuff we can

142
00:05:49,750 --> 00:05:54,339
do I might start with that today but our

143
00:05:51,879 --> 00:05:57,040
goal with today and tomorrow's ticker to

144
00:05:54,339 --> 00:05:58,750
get to a point where if you know maybe

145
00:05:57,040 --> 00:06:01,750
we're not done with it but at least we

146
00:05:58,750 --> 00:06:05,529
sort of understand what we're gonna do

147
00:06:01,750 --> 00:06:07,000
to finalize that matching in a way that

148
00:06:05,529 --> 00:06:08,289
we think will work going forward it

149
00:06:07,000 --> 00:06:09,370
doesn't have to be completely final we

150
00:06:08,290 --> 00:06:13,680
can always come back and end it but

151
00:06:09,370 --> 00:06:16,030
something that we at least believe to be

152
00:06:13,680 --> 00:06:17,829
you know that we could plausibly say

153
00:06:16,029 --> 00:06:21,819
here this seems like we could ship with

154
00:06:17,829 --> 00:06:25,800
this right we just so we just need a

155
00:06:21,819 --> 00:06:28,629
convincing argument so all right let's

156
00:06:25,800 --> 00:06:32,800
go ahead and remind ourselves of where

157
00:06:28,629 --> 00:06:35,769
we are so what we did last weekend is

158
00:06:32,800 --> 00:06:36,759
this is the game running right now right

159
00:06:35,769 --> 00:06:40,259
and we can sort of see it's running

160
00:06:36,759 --> 00:06:40,259
debug mode so it's slower than normal

161
00:06:40,689 --> 00:06:43,689
this is what we're running right now and

162
00:06:42,218 --> 00:06:45,428
as you can see it's got the hero in

163
00:06:43,689 --> 00:06:47,709
there with the correct sprites as it

164
00:06:45,428 --> 00:06:50,888
should that was actually pretty cool

165
00:06:47,709 --> 00:06:55,238
because what we did is we actually made

166
00:06:50,889 --> 00:06:57,489
an editor binary that would allow us to

167
00:06:55,238 --> 00:07:00,218
mess with our art files right it's

168
00:06:57,488 --> 00:07:03,488
called HHA edit going to the day

169
00:07:00,218 --> 00:07:05,288
director here this HHA edit lets you do

170
00:07:03,488 --> 00:07:07,028
stuff where you can actually work with

171
00:07:05,288 --> 00:07:09,639
the data files and what we did is we

172
00:07:07,028 --> 00:07:12,579
told it to upgrade all our old visa art

173
00:07:09,639 --> 00:07:14,228
files to v1 art files what that allows

174
00:07:12,579 --> 00:07:15,819
us to do and it's pretty cool is it

175
00:07:14,228 --> 00:07:17,889
basically means we can stick with a

176
00:07:15,819 --> 00:07:19,929
binary asset format that's really easy

177
00:07:17,889 --> 00:07:23,079
to work with and doesn't require any

178
00:07:19,928 --> 00:07:25,058
parsing but we also have this external

179
00:07:23,079 --> 00:07:26,588
tool we can use to rewrite it or maybe

180
00:07:25,059 --> 00:07:29,319
merge things in the future if we'd like

181
00:07:26,588 --> 00:07:30,728
to that sort of stuff and that's very

182
00:07:29,319 --> 00:07:33,069
powerful because it means if we want to

183
00:07:30,728 --> 00:07:35,378
upgrade our binary file format we don't

184
00:07:33,069 --> 00:07:37,419
have to have our game understand the

185
00:07:35,379 --> 00:07:38,979
changes the game can just move to the

186
00:07:37,418 --> 00:07:41,168
new version and only understand one

187
00:07:38,978 --> 00:07:44,019
version and then haan it can just

188
00:07:41,168 --> 00:07:46,118
upgrade the the older version files to

189
00:07:44,019 --> 00:07:48,668
the newer ones and so with that lets us

190
00:07:46,119 --> 00:07:50,829
do is that lets us settle on a v1 file

191
00:07:48,668 --> 00:07:54,068
format that's whatever we want it to be

192
00:07:50,829 --> 00:07:57,249
and then we can just upgrade all our v-0

193
00:07:54,069 --> 00:07:59,889
files to be v1 files right so we haven't

194
00:07:57,249 --> 00:08:02,649
necessarily baked this v1 format we can

195
00:07:59,889 --> 00:08:06,399
change this view one format still and

196
00:08:02,649 --> 00:08:07,809
you know kind of go from there and we

197
00:08:06,399 --> 00:08:09,879
may want to do that remember to add

198
00:08:07,809 --> 00:08:11,079
additional things to it but that's where

199
00:08:09,879 --> 00:08:12,519
we're at right now we have that

200
00:08:11,079 --> 00:08:18,369
flexibility and that's a really good

201
00:08:12,519 --> 00:08:20,348
thing right okay so what we need to do

202
00:08:18,369 --> 00:08:23,649
now we've got a couple things we want to

203
00:08:20,348 --> 00:08:26,288
clean up but what we need to do now is

204
00:08:23,649 --> 00:08:27,759
we'd like to start getting this art into

205
00:08:26,288 --> 00:08:29,649
the game and we can start with some

206
00:08:27,759 --> 00:08:32,229
pretty basic stuff right we we're

207
00:08:29,649 --> 00:08:34,808
looking at a world that's mostly doesn't

208
00:08:32,229 --> 00:08:36,550
have art in it and it has the wrong art

209
00:08:34,808 --> 00:08:39,429
for the hero it's the old artwork for

210
00:08:36,549 --> 00:08:41,649
the hero and so what we want to do is be

211
00:08:39,429 --> 00:08:44,318
able to do stuff like put in you know

212
00:08:41,649 --> 00:08:49,058
say like floor textures right on this on

213
00:08:44,318 --> 00:08:51,849
these floor cells here we might want to

214
00:08:49,058 --> 00:08:54,730
put walls textures and ceiling textures

215
00:08:51,850 --> 00:08:57,790
on these tiles right

216
00:08:54,730 --> 00:08:59,829
coming out a bit more let me let me zoom

217
00:08:57,789 --> 00:09:02,860
out here and there we go so coming out a

218
00:08:59,828 --> 00:09:07,479
bit more here if we wanted to go ahead

219
00:09:02,860 --> 00:09:09,850
and and start to to put other characters

220
00:09:07,480 --> 00:09:11,680
in these rooms you know maybe have

221
00:09:09,850 --> 00:09:15,220
someone who walks around in the hallway

222
00:09:11,679 --> 00:09:17,919
how would we specify which sprites they

223
00:09:15,220 --> 00:09:22,540
were using right and so if you take a

224
00:09:17,919 --> 00:09:25,599
look in in the handmade artwork stuff

225
00:09:22,539 --> 00:09:27,188
here that we have we just have a ton of

226
00:09:25,600 --> 00:09:29,589
stuff that we can bring in so we've got

227
00:09:27,188 --> 00:09:31,899
a lot of characters we can bring in here

228
00:09:29,589 --> 00:09:34,300
right lots of different characters all

229
00:09:31,899 --> 00:09:39,970
the sort of different styles to them

230
00:09:34,299 --> 00:09:42,248
I love the braces and this one so how do

231
00:09:39,970 --> 00:09:43,959
we get these characters into the game

232
00:09:42,249 --> 00:09:45,850
and how do we specify what they are

233
00:09:43,958 --> 00:09:48,758
that's the question for us because now

234
00:09:45,850 --> 00:09:52,209
we know we can load them all and put

235
00:09:48,759 --> 00:09:53,709
them into our our system for artwork but

236
00:09:52,208 --> 00:09:56,789
the question is just how do we actually

237
00:09:53,708 --> 00:09:59,558
refer to them right okay

238
00:09:56,789 --> 00:10:01,568
so with that in mind I think there were

239
00:09:59,558 --> 00:10:04,149
a few things we hadn't quite finished

240
00:10:01,568 --> 00:10:06,219
yet and so those are the things that I

241
00:10:04,149 --> 00:10:09,549
think I'd like to focus on today because

242
00:10:06,220 --> 00:10:11,620
we don't really quite need to run up

243
00:10:09,549 --> 00:10:13,240
into the tags issue and I'd like to put

244
00:10:11,620 --> 00:10:15,220
that off as long as possible because

245
00:10:13,240 --> 00:10:17,019
that's the heart that's the like it's

246
00:10:15,220 --> 00:10:19,389
not about writing code it's about making

247
00:10:17,019 --> 00:10:21,039
some hard decisions and that's always a

248
00:10:19,389 --> 00:10:22,149
little bit frustrating right because you

249
00:10:21,039 --> 00:10:24,669
don't really know if you're doing the

250
00:10:22,149 --> 00:10:27,879
right thing and you gotta do some

251
00:10:24,669 --> 00:10:29,759
experimentation but what I'd like to do

252
00:10:27,879 --> 00:10:31,930
first is I'd like to just go ahead and

253
00:10:29,759 --> 00:10:33,970
patch in the stuff that we're missing

254
00:10:31,929 --> 00:10:35,859
that we didn't have a chance to finish

255
00:10:33,970 --> 00:10:37,959
and I'll just quickly go over what that

256
00:10:35,860 --> 00:10:40,000
is so if you remember correctly we have

257
00:10:37,958 --> 00:10:42,128
this check for art changes it actually

258
00:10:40,000 --> 00:10:43,899
runs it startup and what check for art

259
00:10:42,129 --> 00:10:46,000
change is gonna do is it's gonna look

260
00:10:43,899 --> 00:10:47,438
through all of the files and it's gonna

261
00:10:46,000 --> 00:10:50,379
see whether we understand what those

262
00:10:47,438 --> 00:10:52,088
files are and we wrote all this and we

263
00:10:50,379 --> 00:10:54,519
sort of just let put it to the side like

264
00:10:52,089 --> 00:10:58,240
if this is our this is our sort of

265
00:10:54,519 --> 00:11:00,399
runtime updating part and we can sort of

266
00:10:58,240 --> 00:11:02,139
see what it does it loops over a hash

267
00:11:00,399 --> 00:11:03,938
table and looks to see whether or not

268
00:11:02,139 --> 00:11:06,818
the particular file in question that it

269
00:11:03,938 --> 00:11:08,139
sees is a file that we know about and if

270
00:11:06,818 --> 00:11:11,019
that file is a file that we

271
00:11:08,139 --> 00:11:12,819
know about we go to see whether or not

272
00:11:11,019 --> 00:11:15,100
it has changed right we use the file

273
00:11:12,820 --> 00:11:16,810
date as a way of saying look do we have

274
00:11:15,100 --> 00:11:19,360
to reload this thing do we think we have

275
00:11:16,809 --> 00:11:20,649
to reload this thing or is it probably

276
00:11:19,360 --> 00:11:22,629
the same because we've seen it before

277
00:11:20,649 --> 00:11:26,199
have the same file date so it's probably

278
00:11:22,629 --> 00:11:29,439
the same file right and that's what

279
00:11:26,200 --> 00:11:32,920
we're doing but we didn't really have

280
00:11:29,440 --> 00:11:35,500
any way of making that persist that was

281
00:11:32,919 --> 00:11:37,959
what stopped this from being complete so

282
00:11:35,500 --> 00:11:40,419
when this happens we stored this

283
00:11:37,960 --> 00:11:43,000
information into these hash this hash

284
00:11:40,419 --> 00:11:45,339
information stuff here into the hash

285
00:11:43,000 --> 00:11:48,490
table you remember this hash table was a

286
00:11:45,340 --> 00:11:51,940
nice little convenient thing whereas

287
00:11:48,490 --> 00:11:54,490
here as a source file and this asset

288
00:11:51,940 --> 00:11:56,950
source file information here what this

289
00:11:54,490 --> 00:11:59,320
did was say hey here's a source file and

290
00:11:56,950 --> 00:12:01,930
here's the grid that said you know what

291
00:11:59,320 --> 00:12:04,450
assets we imported from that this is

292
00:12:01,929 --> 00:12:10,419
just a very simple structure that lets

293
00:12:04,450 --> 00:12:13,360
us kind of get from a Photoshop export a

294
00:12:10,419 --> 00:12:15,759
PNG that Photoshop export to the assets

295
00:12:13,360 --> 00:12:18,279
in our asset system it's not persistent

296
00:12:15,759 --> 00:12:20,019
and if you remember when we stopped and

297
00:12:18,279 --> 00:12:23,439
we moved over to updating our file

298
00:12:20,019 --> 00:12:26,639
format the thing that wasn't working yet

299
00:12:23,440 --> 00:12:30,250
was that persistence if you ran the game

300
00:12:26,639 --> 00:12:32,500
with an important asset file then what

301
00:12:30,250 --> 00:12:36,159
what happened is it would say okay I'm

302
00:12:32,500 --> 00:12:37,120
gonna import all of these p.m. G's that

303
00:12:36,159 --> 00:12:39,850
you told me about

304
00:12:37,120 --> 00:12:41,980
we actually restricted it to just ones

305
00:12:39,850 --> 00:12:43,930
that that were hand things so that we

306
00:12:41,980 --> 00:12:46,930
could not wait as long so we were just

307
00:12:43,929 --> 00:12:48,399
importing a few it would import all of

308
00:12:46,929 --> 00:12:52,299
those into our assets ISM and that

309
00:12:48,399 --> 00:12:54,039
worked great yay for us but if you close

310
00:12:52,299 --> 00:12:56,439
the game and restart the game it would

311
00:12:54,039 --> 00:12:59,019
import them all again why because this

312
00:12:56,440 --> 00:13:01,240
is memory resident only so when you

313
00:12:59,019 --> 00:13:03,610
close the game it goes away when you run

314
00:13:01,240 --> 00:13:05,200
the game again it sees those pngs it's

315
00:13:03,610 --> 00:13:08,019
like I've never seen this before and

316
00:13:05,200 --> 00:13:09,910
it's right as far as it knows it's never

317
00:13:08,019 --> 00:13:11,529
seen them before because it only has

318
00:13:09,909 --> 00:13:13,509
like short-term memory right it only

319
00:13:11,529 --> 00:13:14,169
knows for that run of the game what it's

320
00:13:13,509 --> 00:13:17,049
seen before

321
00:13:14,169 --> 00:13:19,929
so what we wanted to do was make this

322
00:13:17,049 --> 00:13:21,639
persistent and what I did when we sort

323
00:13:19,929 --> 00:13:23,349
of updated that file format

324
00:13:21,639 --> 00:13:24,669
and hopefully I mentioned why I was

325
00:13:23,350 --> 00:13:26,409
doing this but maybe sometimes I forget

326
00:13:24,669 --> 00:13:29,500
to say why I do things but hopefully

327
00:13:26,409 --> 00:13:31,870
it's clear most of time what I did when

328
00:13:29,500 --> 00:13:34,990
we were updating is I just I gave us a

329
00:13:31,870 --> 00:13:36,700
way to mark that so this HHA annotation

330
00:13:34,990 --> 00:13:38,799
thing that we can now in our new file

331
00:13:36,700 --> 00:13:40,540
format put on every file right

332
00:13:38,799 --> 00:13:43,328
optionally it's just an additional field

333
00:13:40,539 --> 00:13:46,809
that you can stick on every asset it

334
00:13:43,328 --> 00:13:48,939
allows us to say exactly this right it

335
00:13:46,809 --> 00:13:52,088
allows it to say ok here is the file

336
00:13:48,940 --> 00:13:55,029
date of the PNG came from if we want to

337
00:13:52,089 --> 00:13:56,470
we can even have a checksum right we can

338
00:13:55,028 --> 00:13:57,939
cover why we might want to do that and

339
00:13:56,470 --> 00:13:59,379
optionally do that we don't have to do

340
00:13:57,940 --> 00:14:03,850
that but we got space for it if we want

341
00:13:59,379 --> 00:14:06,070
to we can store the name we can store

342
00:14:03,850 --> 00:14:07,870
what the asset was called and what his

343
00:14:06,070 --> 00:14:09,610
description was and if there was an

344
00:14:07,870 --> 00:14:11,560
author again we don't really know that

345
00:14:09,610 --> 00:14:13,209
information right now but if eventually

346
00:14:11,559 --> 00:14:16,299
we wanted to tag things like that we

347
00:14:13,208 --> 00:14:17,109
could and so you could kind of see where

348
00:14:16,299 --> 00:14:20,889
we're going with this

349
00:14:17,110 --> 00:14:22,389
we now have a place that says all of

350
00:14:20,889 --> 00:14:23,799
this information it says what the

351
00:14:22,389 --> 00:14:31,259
spritesheet was

352
00:14:23,799 --> 00:14:37,259
location-wise write all of that stuff ok

353
00:14:31,259 --> 00:14:39,970
so hopefully you can see why this is

354
00:14:37,259 --> 00:14:42,220
gonna well why I put this in there

355
00:14:39,970 --> 00:14:45,579
because this is a way for us to solve

356
00:14:42,220 --> 00:14:48,070
the problem of storing this information

357
00:14:45,578 --> 00:14:50,469
there were two ways I could have solved

358
00:14:48,070 --> 00:14:53,440
the problem one way is to store a

359
00:14:50,470 --> 00:14:55,440
separate file that would keep track of

360
00:14:53,440 --> 00:14:57,790
this information we could have done that

361
00:14:55,440 --> 00:15:00,519
why did I decide not to do that well

362
00:14:57,789 --> 00:15:02,860
again because I really just don't know

363
00:15:00,519 --> 00:15:04,899
how these files are gonna end up getting

364
00:15:02,860 --> 00:15:07,419
used by the world at large once this

365
00:15:04,899 --> 00:15:09,220
game is released you know could be we

366
00:15:07,419 --> 00:15:11,979
release handmade hero and no one cares

367
00:15:09,220 --> 00:15:13,360
right it could be released handmade hero

368
00:15:11,980 --> 00:15:16,180
and people are starting to use it for

369
00:15:13,360 --> 00:15:18,519
educational purposes in some ways right

370
00:15:16,179 --> 00:15:20,198
and maybe it's helping people get

371
00:15:18,519 --> 00:15:22,360
interested in low level programming at

372
00:15:20,198 --> 00:15:25,120
that point I would like this file format

373
00:15:22,360 --> 00:15:27,399
to be against a way that people can

374
00:15:25,120 --> 00:15:29,919
share things with each other and learn

375
00:15:27,399 --> 00:15:32,289
about low-level file formats by looking

376
00:15:29,919 --> 00:15:34,389
at it right and so what I wanted to do

377
00:15:32,289 --> 00:15:34,959
was like okay instead of storing a

378
00:15:34,389 --> 00:15:37,929
separate

379
00:15:34,960 --> 00:15:41,800
file so it won't properly transport when

380
00:15:37,929 --> 00:15:43,269
you send someone in HHA right I want to

381
00:15:41,799 --> 00:15:46,149
make it so that when I send someone in

382
00:15:43,269 --> 00:15:47,799
HHA they get the import data with it

383
00:15:46,149 --> 00:15:49,090
because I feel like that might be a

384
00:15:47,799 --> 00:15:51,219
little bit more powerful a bit more

385
00:15:49,090 --> 00:15:53,680
useful and furthermore if you can tag

386
00:15:51,220 --> 00:15:56,320
these things with names descriptions and

387
00:15:53,679 --> 00:15:59,199
authors again that that fosters a

388
00:15:56,320 --> 00:16:01,060
certain sense of understanding of what's

389
00:15:59,200 --> 00:16:02,590
in the file and ability to share them

390
00:16:01,059 --> 00:16:05,889
with other people in a way that you can

391
00:16:02,590 --> 00:16:08,980
look and go oh okay you know this this

392
00:16:05,889 --> 00:16:11,049
was made by Carl and and then this one

393
00:16:08,980 --> 00:16:14,320
was made by you know Mary and this one

394
00:16:11,049 --> 00:16:17,159
was made by you know someone from chat

395
00:16:14,320 --> 00:16:21,850
this one was made by Sherlock 93 right

396
00:16:17,159 --> 00:16:23,980
and so I think that just is it's just a

397
00:16:21,850 --> 00:16:25,509
better way to do it based on what might

398
00:16:23,980 --> 00:16:27,129
get it might get used for in the future

399
00:16:25,509 --> 00:16:28,769
if it does get used for education

400
00:16:27,129 --> 00:16:31,570
personally if no-one cares about this

401
00:16:28,769 --> 00:16:32,919
after we're done here and it was just

402
00:16:31,570 --> 00:16:34,690
something that that we all did together

403
00:16:32,919 --> 00:16:36,610
and had a good time doing that's totally

404
00:16:34,690 --> 00:16:37,870
fine but I also want to be prepared in

405
00:16:36,610 --> 00:16:39,669
case it ends up being something that

406
00:16:37,870 --> 00:16:42,850
people do learn from and can share with

407
00:16:39,669 --> 00:16:44,889
each other so let's take a look at how

408
00:16:42,850 --> 00:16:47,529
we might do that we know we have this

409
00:16:44,889 --> 00:16:49,149
HHA annotation array at the moment we're

410
00:16:47,529 --> 00:16:50,799
really not doing very much with it and

411
00:16:49,149 --> 00:16:53,980
that's sort of what we need to rectify

412
00:16:50,799 --> 00:16:57,279
we need to weld in our new understanding

413
00:16:53,980 --> 00:16:58,840
of what the file can do into the asset

414
00:16:57,279 --> 00:17:01,299
loader because right now the asset

415
00:16:58,840 --> 00:17:03,129
loader just doesn't care and if we take

416
00:17:01,299 --> 00:17:05,259
a look here like I'll move this over to

417
00:17:03,129 --> 00:17:07,569
this side and let me bring the asset

418
00:17:05,259 --> 00:17:09,069
system up over on the other side here if

419
00:17:07,569 --> 00:17:11,049
we look at how these files are loaded

420
00:17:09,069 --> 00:17:13,088
what you can see is we just load the

421
00:17:11,049 --> 00:17:14,980
assets but we don't care about the

422
00:17:13,088 --> 00:17:17,859
annotation and why should we we don't

423
00:17:14,980 --> 00:17:20,019
have any reason to right so what we want

424
00:17:17,859 --> 00:17:22,569
to do is we want to say okay now let's

425
00:17:20,019 --> 00:17:25,750
start paying attention to have a reason

426
00:17:22,569 --> 00:17:28,869
to we're gonna make this code aware of

427
00:17:25,750 --> 00:17:31,359
where its assets came from so that it

428
00:17:28,869 --> 00:17:33,459
can now make correct decisions on import

429
00:17:31,359 --> 00:17:35,469
right so that's what we're doing we're

430
00:17:33,460 --> 00:17:37,390
just updating this code in a way that

431
00:17:35,470 --> 00:17:40,360
allows us to use annotations from the

432
00:17:37,390 --> 00:17:43,660
file so that it can avoid re-imported

433
00:17:40,359 --> 00:17:44,889
things it already imported on prior runs

434
00:17:43,660 --> 00:17:46,540
of the program and that's all we're

435
00:17:44,890 --> 00:17:48,070
trying to do here that's what we want to

436
00:17:46,539 --> 00:17:51,029
get to

437
00:17:48,069 --> 00:17:52,299
so if we take a look at what's going on

438
00:17:51,029 --> 00:17:54,430
you know

439
00:17:52,299 --> 00:17:56,500
allocate game assets it comes through

440
00:17:54,430 --> 00:17:59,019
and it reads all the HHA files that it

441
00:17:56,500 --> 00:18:01,869
currently has this is that sort of check

442
00:17:59,019 --> 00:18:04,059
to see what's going on there when it

443
00:18:01,869 --> 00:18:06,759
does this you can see that it kind of

444
00:18:04,059 --> 00:18:09,009
snaps an asset base in a tag base and an

445
00:18:06,759 --> 00:18:11,559
asset count and a tag count those are

446
00:18:09,009 --> 00:18:14,440
there to allow it to load the asset and

447
00:18:11,559 --> 00:18:17,589
tag arrays correctly what we want to do

448
00:18:14,440 --> 00:18:19,600
here is also respect the fact that the

449
00:18:17,589 --> 00:18:21,279
annotation array which has the same

450
00:18:19,599 --> 00:18:23,799
number assets in it as the asset array

451
00:18:21,279 --> 00:18:26,139
may be there and we may want to load it

452
00:18:23,799 --> 00:18:27,639
that brings us to this piece of code we

453
00:18:26,140 --> 00:18:30,400
have the information we need to allocate

454
00:18:27,640 --> 00:18:33,990
it because it's the max asset count we

455
00:18:30,400 --> 00:18:37,620
want to have a slot for annotations that

456
00:18:33,990 --> 00:18:40,240
exactly mirrors are in our asset count

457
00:18:37,619 --> 00:18:43,479
our asset array so all we're really

458
00:18:40,240 --> 00:18:45,609
talking about here is in here we would

459
00:18:43,480 --> 00:18:49,329
have in addition to assets we would have

460
00:18:45,609 --> 00:18:51,219
annotations right now the question is do

461
00:18:49,329 --> 00:18:55,809
we need to bother doing that and the

462
00:18:51,220 --> 00:18:58,059
answer is uh well me we we don't really

463
00:18:55,809 --> 00:18:59,980
need to allocate it that way why is that

464
00:18:58,059 --> 00:19:02,769
because if you take a look at what we

465
00:18:59,980 --> 00:19:05,049
would actually be doing with that asset

466
00:19:02,769 --> 00:19:08,319
array we know that it's going to be

467
00:19:05,049 --> 00:19:09,430
stored with the assets proper right we

468
00:19:08,319 --> 00:19:11,259
know that we're essentially going to

469
00:19:09,430 --> 00:19:13,269
take these and store them with the

470
00:19:11,259 --> 00:19:14,379
assets themselves because that's the

471
00:19:13,269 --> 00:19:16,629
only time we're going to be using them

472
00:19:14,380 --> 00:19:18,670
so if we want to we can just weld that

473
00:19:16,630 --> 00:19:20,260
information in because we know we're

474
00:19:18,670 --> 00:19:21,850
already storing things slightly

475
00:19:20,259 --> 00:19:24,129
differently from the way they appear on

476
00:19:21,849 --> 00:19:25,779
disk so if I take a look at the H file

477
00:19:24,130 --> 00:19:28,060
here what you can see right we've got

478
00:19:25,779 --> 00:19:31,149
all this information about the asset

479
00:19:28,059 --> 00:19:33,369
this HHA asset here we can just expand

480
00:19:31,150 --> 00:19:36,850
it to say hey store the annotation as

481
00:19:33,369 --> 00:19:39,849
well right when you load it store the

482
00:19:36,849 --> 00:19:41,619
annotation as well so then we don't

483
00:19:39,849 --> 00:19:43,980
really need an additional push array

484
00:19:41,619 --> 00:19:46,689
we'll just create the space we need

485
00:19:43,980 --> 00:19:49,599
right off the bat right we'll just do

486
00:19:46,690 --> 00:19:54,279
that first and so if we go ahead and

487
00:19:49,599 --> 00:19:56,289
take from here right Jimmy if we go

488
00:19:54,279 --> 00:20:00,369
ahead and take from here when we come

489
00:19:56,289 --> 00:20:01,778
through this part of the code when we do

490
00:20:00,369 --> 00:20:03,728
our data reads we can

491
00:20:01,778 --> 00:20:06,219
now make another right we've got a

492
00:20:03,729 --> 00:20:07,389
temporary data read for those HHS it's

493
00:20:06,219 --> 00:20:09,879
because we're pulling them out and

494
00:20:07,388 --> 00:20:11,798
putting them into sort of a new

495
00:20:09,878 --> 00:20:13,959
structure we're loading them kind of

496
00:20:11,798 --> 00:20:18,069
piecemeal there when we do that

497
00:20:13,960 --> 00:20:20,200
piecemeal merge load when we do that we

498
00:20:18,069 --> 00:20:21,579
also have the option of pulling out the

499
00:20:20,200 --> 00:20:23,348
annotations and loading them that way

500
00:20:21,579 --> 00:20:25,239
right so we can do it either way we can

501
00:20:23,348 --> 00:20:26,589
have a parallel array if we want to we

502
00:20:25,239 --> 00:20:28,989
can have them weld them if we want to

503
00:20:26,589 --> 00:20:30,819
there's not a lot of issues to either

504
00:20:28,989 --> 00:20:32,139
one we I'm just gonna start with this

505
00:20:30,819 --> 00:20:33,999
one custom or straightforward if in the

506
00:20:32,138 --> 00:20:35,918
future we sort of screw around with this

507
00:20:33,999 --> 00:20:38,950
a little bit and end up doing things

508
00:20:35,919 --> 00:20:40,950
more direct load like where we do where

509
00:20:38,950 --> 00:20:43,929
we do more direct loading and less

510
00:20:40,950 --> 00:20:48,129
fussing at the merge stage which we

511
00:20:43,929 --> 00:20:49,778
could do if we want to do that then we

512
00:20:48,128 --> 00:20:51,189
would play with this more right but at

513
00:20:49,778 --> 00:20:54,338
the moment we don't really have to worry

514
00:20:51,190 --> 00:20:56,859
about that nearly as much okay

515
00:20:54,338 --> 00:20:58,509
so how are we gonna do that well right

516
00:20:56,858 --> 00:21:02,408
here where we do platform to you to read

517
00:20:58,509 --> 00:21:05,348
file it like this we read the asset

518
00:21:02,409 --> 00:21:06,940
array and it's really easy for us to

519
00:21:05,348 --> 00:21:10,269
just load the annotation right right

520
00:21:06,940 --> 00:21:12,219
it's literally just a case of changing

521
00:21:10,269 --> 00:21:14,108
from loading one place to loading

522
00:21:12,219 --> 00:21:15,879
another and changing from loading one

523
00:21:14,108 --> 00:21:17,769
struct to loading another right there

524
00:21:15,878 --> 00:21:20,319
there's that's it I mean that's the

525
00:21:17,769 --> 00:21:22,388
entirety of it and so all we really need

526
00:21:20,319 --> 00:21:23,888
is a place to put it temporarily since

527
00:21:22,388 --> 00:21:28,178
we already have temporary memory it's

528
00:21:23,888 --> 00:21:30,248
free for us to do this right we can just

529
00:21:28,179 --> 00:21:34,059
go ahead and push on another temporary

530
00:21:30,249 --> 00:21:36,338
array and we can read it in so when we

531
00:21:34,058 --> 00:21:38,558
read these two arrays in we now have all

532
00:21:36,338 --> 00:21:40,450
the annotations ready and when we pull

533
00:21:38,558 --> 00:21:47,319
them in here we can trivially just use

534
00:21:40,450 --> 00:21:51,419
them right and it's exactly analogous

535
00:21:47,319 --> 00:21:55,418
there's no difference between these two

536
00:21:51,419 --> 00:21:57,219
like so right now there is one thing we

537
00:21:55,419 --> 00:22:00,129
have to be aware of which is that

538
00:21:57,219 --> 00:22:03,278
although the assets array always has to

539
00:22:00,128 --> 00:22:04,658
be there and in fact we just check to

540
00:22:03,278 --> 00:22:06,368
see if there's an asset count to make

541
00:22:04,659 --> 00:22:07,950
sure we need to load it at all but if

542
00:22:06,368 --> 00:22:12,238
there is then it's got to be there

543
00:22:07,950 --> 00:22:15,308
annotations not so right we do not need

544
00:22:12,239 --> 00:22:15,740
to do anything with annotations in a

545
00:22:15,308 --> 00:22:17,899
file

546
00:22:15,740 --> 00:22:20,539
can have the annotation strip so if I

547
00:22:17,900 --> 00:22:22,940
want to I can support that pretty easily

548
00:22:20,539 --> 00:22:26,299
along this code path by saying look

549
00:22:22,940 --> 00:22:29,539
there may or may not be an HHA

550
00:22:26,299 --> 00:22:34,220
annotation array okay in some cases if

551
00:22:29,539 --> 00:22:36,409
we find that there sorry if we find that

552
00:22:34,220 --> 00:22:38,089
this does not evaluate to value X it's

553
00:22:36,410 --> 00:22:40,130
zero instead of a valid offset in the

554
00:22:38,089 --> 00:22:41,839
file then we'll just say hey look there

555
00:22:40,130 --> 00:22:43,520
isn't one so then when we come through

556
00:22:41,839 --> 00:22:45,919
here and we say we're gonna point at one

557
00:22:43,519 --> 00:22:49,670
of these what we can do instead is say

558
00:22:45,920 --> 00:22:52,880
alright let's just pretend that it's

559
00:22:49,670 --> 00:22:58,210
zero for now and then if there is an

560
00:22:52,880 --> 00:23:03,410
annotation array then we set it to

561
00:22:58,210 --> 00:23:05,480
something okay so off we go we can also

562
00:23:03,410 --> 00:23:12,019
make it be a null annotation maybe

563
00:23:05,480 --> 00:23:13,490
that's easier the null annotation can

564
00:23:12,019 --> 00:23:15,410
just be you know something that sticks

565
00:23:13,490 --> 00:23:18,529
sticks around just like hey here's ours

566
00:23:15,410 --> 00:23:23,269
our big old zero and so we could do it

567
00:23:18,529 --> 00:23:25,670
just point at that right just a big ol

568
00:23:23,269 --> 00:23:27,529
block of zeros so that way we know that

569
00:23:25,670 --> 00:23:29,630
the annotation is always valid in here

570
00:23:27,529 --> 00:23:31,190
it just may be a block of zeros but it's

571
00:23:29,630 --> 00:23:32,890
never a null pointer we got to check for

572
00:23:31,190 --> 00:23:35,660
that so we can just check for the actual

573
00:23:32,890 --> 00:23:37,580
parts that we want when we want them and

574
00:23:35,660 --> 00:23:39,230
that will support both cases where we

575
00:23:37,579 --> 00:23:41,569
have an array and where we don't and

576
00:23:39,230 --> 00:23:43,519
where an annotation has or doesn't have

577
00:23:41,569 --> 00:23:46,909
certain of the strings that are there

578
00:23:43,519 --> 00:23:49,369
right so if we look at what goes on in

579
00:23:46,910 --> 00:23:51,650
here you can see here that we track the

580
00:23:49,369 --> 00:23:54,500
asset data when we put it in there you

581
00:23:51,650 --> 00:23:56,600
can see that we assign it here by the

582
00:23:54,500 --> 00:24:02,720
same token right we can assign the

583
00:23:56,599 --> 00:24:04,699
annotation right so we can do this

584
00:24:02,720 --> 00:24:09,079
trivially where we just assign that

585
00:24:04,700 --> 00:24:12,140
annotation and we you know we now have

586
00:24:09,079 --> 00:24:13,939
exactly what we wanted for that once we

587
00:24:12,140 --> 00:24:16,790
have that annotation information in

588
00:24:13,940 --> 00:24:18,620
there it's now the main problem that

589
00:24:16,789 --> 00:24:21,049
we're gonna have is we have to now

590
00:24:18,619 --> 00:24:23,649
rebuild our source file we need to make

591
00:24:21,049 --> 00:24:26,928
this source file information work again

592
00:24:23,650 --> 00:24:28,910
because right now we don't have any way

593
00:24:26,929 --> 00:24:29,570
of reconstructing this we have to

594
00:24:28,910 --> 00:24:31,400
reconstruct it from

595
00:24:29,569 --> 00:24:33,230
the annotations right so our goal now is

596
00:24:31,400 --> 00:24:35,870
to build this asset source file

597
00:24:33,230 --> 00:24:40,069
information up again where we can sort

598
00:24:35,869 --> 00:24:42,199
of say look let's rebuild for every

599
00:24:40,069 --> 00:24:44,359
asset let's let's go ahead and rebuild

600
00:24:42,200 --> 00:24:46,430
sort of the hash table we were using now

601
00:24:44,359 --> 00:24:52,909
we have a couple different ways that we

602
00:24:46,430 --> 00:24:57,740
can proceed so right now what we do is

603
00:24:52,910 --> 00:24:59,990
we have the asset source file and we

604
00:24:57,740 --> 00:25:01,370
then just use this well you know I'm not

605
00:24:59,990 --> 00:25:04,160
gonna go into that part let's just let's

606
00:25:01,369 --> 00:25:05,809
just say we're gonna use this so what we

607
00:25:04,160 --> 00:25:08,360
need to do is we need to look over all

608
00:25:05,809 --> 00:25:10,639
of our assets as we merge them in and we

609
00:25:08,359 --> 00:25:12,949
need to build an asset source file a

610
00:25:10,640 --> 00:25:16,490
sort of backing store that tells us

611
00:25:12,950 --> 00:25:19,370
where these things came from right and

612
00:25:16,490 --> 00:25:21,829
we need to sort of figure out some way

613
00:25:19,369 --> 00:25:24,649
of reconstructing that information now

614
00:25:21,829 --> 00:25:26,179
we have in the file format a bunch of

615
00:25:24,650 --> 00:25:27,650
the stuff we need we know we need the

616
00:25:26,180 --> 00:25:29,660
source file date in fact let me just

617
00:25:27,650 --> 00:25:32,930
bring those both up together so you can

618
00:25:29,660 --> 00:25:35,060
kind of see them here so here is our

619
00:25:32,930 --> 00:25:37,580
asset source file information you can

620
00:25:35,059 --> 00:25:39,559
see that it has a grid here that's

621
00:25:37,579 --> 00:25:42,740
that's well this will tell us where in

622
00:25:39,559 --> 00:25:45,679
the grid various assets go it's got a

623
00:25:42,740 --> 00:25:47,680
file date we've got that too and it's

624
00:25:45,680 --> 00:25:50,799
got a base name and we've got that right

625
00:25:47,680 --> 00:25:55,730
these are not particularly relevant to

626
00:25:50,799 --> 00:25:57,289
the asset source file so they don't

627
00:25:55,730 --> 00:25:58,579
really need to be stored in here those

628
00:25:57,289 --> 00:26:01,720
are just tags that go with any

629
00:25:58,579 --> 00:26:05,210
particular entity any particular asset

630
00:26:01,720 --> 00:26:07,190
Jimmy so really what we're looking at

631
00:26:05,210 --> 00:26:09,289
primarily is we don't really have to

632
00:26:07,190 --> 00:26:11,180
load these right these don't have to be

633
00:26:09,289 --> 00:26:18,619
loaded they might have to be saved but

634
00:26:11,180 --> 00:26:19,970
they don't have to be loaded because we

635
00:26:18,619 --> 00:26:21,500
don't really care we just have to

636
00:26:19,970 --> 00:26:23,809
preserve them so that if we load an

637
00:26:21,500 --> 00:26:25,609
asset and rewrite the asset we need to

638
00:26:23,809 --> 00:26:27,859
remember to repoint to the correct name

639
00:26:25,609 --> 00:26:30,500
description and an author but otherwise

640
00:26:27,859 --> 00:26:32,809
we don't care however the source file

641
00:26:30,500 --> 00:26:35,329
base name offset we do need to load that

642
00:26:32,809 --> 00:26:37,909
that is important for us to load and

643
00:26:35,329 --> 00:26:41,750
when we load it in we're gonna have to

644
00:26:37,910 --> 00:26:43,840
look at that name right now this creates

645
00:26:41,750 --> 00:26:45,460
a bit of a dilemma for us

646
00:26:43,839 --> 00:26:48,059
and that is that we haven't done a

647
00:26:45,460 --> 00:26:50,650
particularly good job looking here at

648
00:26:48,059 --> 00:26:52,690
minimizing the amount of data read we're

649
00:26:50,650 --> 00:26:58,350
gonna have to do and why do I say that

650
00:26:52,690 --> 00:27:01,240
well suppose this this file had 10,000

651
00:26:58,349 --> 00:27:02,559
assets in it but they only came from a

652
00:27:01,240 --> 00:27:05,559
total of 20 files

653
00:27:02,559 --> 00:27:07,690
well if right here I mean the easiest

654
00:27:05,559 --> 00:27:10,990
thing for us to do right you slap this

655
00:27:07,690 --> 00:27:15,670
platform data read directly into this

656
00:27:10,990 --> 00:27:17,829
loop so every time we get an asset we

657
00:27:15,670 --> 00:27:19,900
just read into a little buffer what the

658
00:27:17,829 --> 00:27:22,559
file name was we grab that you know part

659
00:27:19,900 --> 00:27:26,290
out of the file and off we go

660
00:27:22,559 --> 00:27:27,909
it's plausible that we can do that but

661
00:27:26,289 --> 00:27:30,490
that basically means that we're going to

662
00:27:27,910 --> 00:27:32,110
bite an entire kernel transition right

663
00:27:30,490 --> 00:27:35,980
we're gonna like call into the operating

664
00:27:32,109 --> 00:27:38,909
system for every asset so if we have to

665
00:27:35,980 --> 00:27:43,269
load 10,000 assets we're going to hit

666
00:27:38,910 --> 00:27:46,210
10,000 times that's not a very nice way

667
00:27:43,269 --> 00:27:48,490
to do this especially because if you

668
00:27:46,210 --> 00:27:51,430
look at what happens here we only really

669
00:27:48,490 --> 00:27:56,490
issue two reads up sorry three reads

670
00:27:51,430 --> 00:27:59,950
tags assets annotations for every file

671
00:27:56,490 --> 00:28:04,990
so if a file has 10,000 assets in it we

672
00:27:59,950 --> 00:28:07,870
only hit three reads right it's not

673
00:28:04,990 --> 00:28:11,410
great you know yeah I'm saying it's not

674
00:28:07,869 --> 00:28:13,899
great and so to me that kind of suggests

675
00:28:11,410 --> 00:28:16,810
what we would like to do here is perhaps

676
00:28:13,900 --> 00:28:20,370
actually introduce the notion of a

677
00:28:16,809 --> 00:28:22,720
separate array for source files right

678
00:28:20,369 --> 00:28:26,889
because that is something that actually

679
00:28:22,720 --> 00:28:28,420
needs to get read at runtime and so

680
00:28:26,890 --> 00:28:30,400
because it's something that wants to get

681
00:28:28,420 --> 00:28:33,850
read at runtime it kind of seems like

682
00:28:30,400 --> 00:28:36,960
the sort of thing we may want to deal

683
00:28:33,849 --> 00:28:36,959
with more directly there

684
00:28:46,630 --> 00:28:53,800
and I'm just not sure whether that's you

685
00:28:50,180 --> 00:28:57,410
know something we care about or not

686
00:28:53,799 --> 00:29:00,619
here's what I will say we could just

687
00:28:57,410 --> 00:29:02,750
proceed without doing that and the way

688
00:29:00,619 --> 00:29:05,029
we would do that is we wouldn't bother

689
00:29:02,750 --> 00:29:07,250
building the source file information if

690
00:29:05,029 --> 00:29:09,019
this isn't an editable file because we

691
00:29:07,250 --> 00:29:12,500
know we don't care if it's not an

692
00:29:09,019 --> 00:29:15,470
editable file right so meaning if we

693
00:29:12,500 --> 00:29:22,309
don't do if this this file isn't open

694
00:29:15,470 --> 00:29:25,519
for updating and you know we we can add

695
00:29:22,309 --> 00:29:27,980
a tag that says whether a files

696
00:29:25,519 --> 00:29:32,839
available for updating right like that's

697
00:29:27,980 --> 00:29:34,400
something that we can do if we're not

698
00:29:32,839 --> 00:29:37,009
allowing updating on a file at the

699
00:29:34,400 --> 00:29:39,769
moment we can just not process that data

700
00:29:37,009 --> 00:29:44,690
and then if we are allowing updating on

701
00:29:39,769 --> 00:29:46,730
a file we can process the data that

702
00:29:44,690 --> 00:29:49,610
means it will be fundamentally slower to

703
00:29:46,730 --> 00:29:52,569
load in that kind of dev mode because

704
00:29:49,609 --> 00:29:55,369
we're hitting a lot of those asset

705
00:29:52,569 --> 00:29:58,009
loading calls that really should just

706
00:29:55,369 --> 00:29:59,809
all be done as one call but it would not

707
00:29:58,009 --> 00:30:02,029
affect the runtime of the non

708
00:29:59,809 --> 00:30:04,329
development side of things so if you

709
00:30:02,029 --> 00:30:08,000
launch the game and you don't have

710
00:30:04,329 --> 00:30:14,269
anything open for editing it wouldn't

711
00:30:08,000 --> 00:30:21,289
affect things mataf oh I'm out of liquid

712
00:30:14,269 --> 00:30:25,490
horrible state to be in so I really

713
00:30:21,289 --> 00:30:29,109
can't say which of those two I should

714
00:30:25,490 --> 00:30:29,109
pick here's I'm gonna say

715
00:30:31,220 --> 00:30:35,660
rather than comprehend codebase I'm

716
00:30:33,319 --> 00:30:37,490
going to do the simpler one and just

717
00:30:35,660 --> 00:30:40,190
read from the file in the case where the

718
00:30:37,490 --> 00:30:42,549
thing is open for reading and the reason

719
00:30:40,190 --> 00:30:45,559
that I'm going to do that is because

720
00:30:42,549 --> 00:30:46,190
nowadays disk access is getting a lot

721
00:30:45,559 --> 00:30:48,049
cheaper

722
00:30:46,190 --> 00:30:51,799
you know you get em two drives that are

723
00:30:48,049 --> 00:30:53,359
just like absolutely sick at reading and

724
00:30:51,799 --> 00:30:55,369
we're gonna be hitting the cache most

725
00:30:53,359 --> 00:30:58,459
the time anyway so I'm just gonna say

726
00:30:55,369 --> 00:31:00,739
look let's see how bad it is and if it

727
00:30:58,460 --> 00:31:02,660
gets bad enough we'll fix it

728
00:31:00,740 --> 00:31:04,730
but I won't over complicate things now

729
00:31:02,660 --> 00:31:06,050
in a sort of a premature attempt to

730
00:31:04,730 --> 00:31:08,029
avoid that eventualities

731
00:31:06,049 --> 00:31:09,950
I'll just note it in the code and we'll

732
00:31:08,029 --> 00:31:14,259
go from there and we'll just say look

733
00:31:09,950 --> 00:31:16,519
this only happens if you're in dev mode

734
00:31:14,259 --> 00:31:20,019
so we'll put enough around it and I'll

735
00:31:16,519 --> 00:31:20,019
also tag it to say look

736
00:32:00,359 --> 00:32:04,740
so at the moment we'll just say that and

737
00:32:02,640 --> 00:32:06,990
and you know maybe I'll even make it to

738
00:32:04,740 --> 00:32:08,669
do so we'll just say look maybe we will

739
00:32:06,990 --> 00:32:11,339
want to look at this and we'll kind of

740
00:32:08,669 --> 00:32:13,679
feel out how it goes you know I think

741
00:32:11,339 --> 00:32:15,389
that's a reasonable decision so what I

742
00:32:13,679 --> 00:32:17,100
want to do here is I want to have some

743
00:32:15,390 --> 00:32:21,230
notion of whether or not this file has

744
00:32:17,099 --> 00:32:24,629
to be edited whether this file house has

745
00:32:21,230 --> 00:32:30,390
editing allowed if you will so I'm just

746
00:32:24,630 --> 00:32:33,059
gonna say like if file allow editing and

747
00:32:30,390 --> 00:32:36,240
and so that will give us a way to mark

748
00:32:33,058 --> 00:32:38,548
our files specifically and anyone who

749
00:32:36,240 --> 00:32:40,609
wants to know whether a file can be

750
00:32:38,548 --> 00:32:47,099
edited can just look at that one flag

751
00:32:40,609 --> 00:32:48,808
right so what I'll do here is I'll say

752
00:32:47,099 --> 00:32:54,389
look we only have one file that allows

753
00:32:48,808 --> 00:32:56,819
editing at the moment it's this one all

754
00:32:54,390 --> 00:32:59,190
the rest of them don't so that'll make

755
00:32:56,819 --> 00:33:02,220
it easy we would only trigger this path

756
00:32:59,190 --> 00:33:04,740
in that one case and then we'll do the

757
00:33:02,220 --> 00:33:07,500
load here for the asset we can find out

758
00:33:04,740 --> 00:33:10,679
what that asset file is what I'm gonna

759
00:33:07,500 --> 00:33:12,419
do again we've got a temp memory so what

760
00:33:10,679 --> 00:33:14,548
I can do here is I can literally just

761
00:33:12,419 --> 00:33:18,030
make a quick little temp space for this

762
00:33:14,548 --> 00:33:21,900
thing this is the assets source name

763
00:33:18,029 --> 00:33:24,210
right I could even temp around this but

764
00:33:21,900 --> 00:33:26,280
it's probably not even worth it because

765
00:33:24,210 --> 00:33:27,720
it'll get cleaned up at the end but you

766
00:33:26,279 --> 00:33:30,089
know if we cared about the fact that

767
00:33:27,720 --> 00:33:32,519
we're loading 10,000 things so we're you

768
00:33:30,089 --> 00:33:34,829
know wasting you know a megabyte of

769
00:33:32,519 --> 00:33:36,210
memory here or whatever we could clean

770
00:33:34,829 --> 00:33:38,308
that up as well but we don't really care

771
00:33:36,210 --> 00:33:40,380
it's probably faster to just push on

772
00:33:38,308 --> 00:33:42,269
there and then come back to it later I

773
00:33:40,380 --> 00:33:44,130
don't know it's hard to say catch things

774
00:33:42,269 --> 00:33:45,298
blah blah blah you could try the other

775
00:33:44,130 --> 00:33:47,060
way and see which one's faster for you

776
00:33:45,298 --> 00:33:48,619
but

777
00:33:47,059 --> 00:33:50,720
so when we come through here what we

778
00:33:48,619 --> 00:33:54,259
want to do is say hey look for this

779
00:33:50,720 --> 00:33:56,600
annotation right we want to know like

780
00:33:54,259 --> 00:33:59,059
the file name count right the the the

781
00:33:56,599 --> 00:34:02,599
source file name count and we want to

782
00:33:59,059 --> 00:34:04,099
load we want to make an array here that

783
00:34:02,599 --> 00:34:08,418
we can load into that's gonna tell us

784
00:34:04,099 --> 00:34:11,929
that right and I think I don't really

785
00:34:08,418 --> 00:34:13,638
remember exactly what we said here so it

786
00:34:11,929 --> 00:34:15,559
looks like we've got a null terminator

787
00:34:13,639 --> 00:34:19,579
there as well it looks like we wanted a

788
00:34:15,559 --> 00:34:22,340
null terminator I'm not sure what we did

789
00:34:19,579 --> 00:34:24,230
there exactly but you know looks like

790
00:34:22,340 --> 00:34:25,610
what we wanted

791
00:34:24,230 --> 00:34:26,990
so suppose we wanted a melter me I'm

792
00:34:25,610 --> 00:34:32,628
also gonna just give it the padding

793
00:34:26,989 --> 00:34:35,918
right here's that source file name it's

794
00:34:32,628 --> 00:34:38,239
gonna get loaded in the source file name

795
00:34:35,918 --> 00:34:40,638
I'm gonna put the Terminator at the end

796
00:34:38,239 --> 00:34:41,719
of it after it's loaded they do it after

797
00:34:40,639 --> 00:34:44,570
it's loaded I mean it doesn't matter

798
00:34:41,719 --> 00:34:46,939
when I do it either ones fine and then

799
00:34:44,570 --> 00:34:50,389
when we load this year we know we've got

800
00:34:46,940 --> 00:34:53,570
an offset that we want to load from and

801
00:34:50,389 --> 00:34:59,240
so and we know we want to load this many

802
00:34:53,570 --> 00:35:01,880
characters right so when we load this in

803
00:34:59,239 --> 00:35:06,079
I just have to make sure I specify what

804
00:35:01,880 --> 00:35:08,090
exactly what are to read at a piece of

805
00:35:06,079 --> 00:35:09,889
information are so when we do read data

806
00:35:08,090 --> 00:35:12,200
from file right we have to pass it the

807
00:35:09,889 --> 00:35:15,650
location to read from and then the it's

808
00:35:12,199 --> 00:35:17,569
the amount to read is how we did that so

809
00:35:15,650 --> 00:35:18,889
like I said we know the amount to read

810
00:35:17,570 --> 00:35:21,470
it's just the name of thing but we need

811
00:35:18,889 --> 00:35:24,109
to know where well we we know that as

812
00:35:21,469 --> 00:35:27,349
well because we have the annotation so

813
00:35:24,110 --> 00:35:30,559
in fact I can do it this way so from the

814
00:35:27,349 --> 00:35:34,339
annotation we know that the source where

815
00:35:30,559 --> 00:35:36,619
is that here we know that the source

816
00:35:34,340 --> 00:35:38,930
file base name offset is the location

817
00:35:36,619 --> 00:35:40,549
that we actually want to read from and

818
00:35:38,929 --> 00:35:44,199
then again we know the source file name

819
00:35:40,550 --> 00:35:48,370
count because the source file name count

820
00:35:44,199 --> 00:35:48,369
can come from the exact same place

821
00:35:48,820 --> 00:35:54,080
right so we can load these source file

822
00:35:51,739 --> 00:35:56,000
names in once we read them we just need

823
00:35:54,079 --> 00:35:58,400
a place for it well that's exactly what

824
00:35:56,000 --> 00:36:02,360
we made right here so there it goes now

825
00:35:58,400 --> 00:36:04,910
we've got that name from the file and

826
00:36:02,360 --> 00:36:08,599
what we want to do is we want to just

827
00:36:04,909 --> 00:36:11,210
create the placement information for

828
00:36:08,599 --> 00:36:12,949
this asset now right so if we go back

829
00:36:11,210 --> 00:36:15,949
and look we've got this asset source

830
00:36:12,949 --> 00:36:20,149
file what we want to do is say hey the

831
00:36:15,949 --> 00:36:22,429
asset source file in this case we need

832
00:36:20,150 --> 00:36:24,680
to say something here where we passed a

833
00:36:22,429 --> 00:36:27,440
source file name in and it does the hash

834
00:36:24,679 --> 00:36:30,139
lookup for us so we kind of want that to

835
00:36:27,440 --> 00:36:31,820
happen here and then it will give us

836
00:36:30,139 --> 00:36:33,889
back that source file then what we want

837
00:36:31,820 --> 00:36:36,590
to do is look to see whether the

838
00:36:33,889 --> 00:36:39,710
location in this grid is occupied by

839
00:36:36,590 --> 00:36:43,250
somebody who is a newer version than us

840
00:36:39,710 --> 00:36:47,269
or not if that makes sense so we we need

841
00:36:43,250 --> 00:36:50,780
to see when we go look at this asset

842
00:36:47,269 --> 00:36:53,150
import grid here we need to see whether

843
00:36:50,780 --> 00:36:55,610
or not there's already somebody in there

844
00:36:53,150 --> 00:36:58,880
that has a lower precedence than we do

845
00:36:55,610 --> 00:37:01,309
right because we don't you need sort of

846
00:36:58,880 --> 00:37:03,019
a there's a primacy number and we need

847
00:37:01,309 --> 00:37:07,400
to see whether or not the primacy number

848
00:37:03,019 --> 00:37:08,110
is is higher or lower than ours that

849
00:37:07,400 --> 00:37:13,010
makes sense

850
00:37:08,110 --> 00:37:13,970
so when we look in there what we're

851
00:37:13,010 --> 00:37:15,980
effect we can do is say we get the

852
00:37:13,969 --> 00:37:25,069
source file back we're gonna say alright

853
00:37:15,980 --> 00:37:28,730
if the source file asset indices for

854
00:37:25,070 --> 00:37:34,100
wherever we're looking so we need grid Y

855
00:37:28,730 --> 00:37:36,019
and grid X for that asset we want to say

856
00:37:34,099 --> 00:37:44,679
we want to have some kind of query which

857
00:37:36,019 --> 00:37:50,210
says take takes precedence over or like

858
00:37:44,679 --> 00:37:52,609
precedence is lower than right so we

859
00:37:50,210 --> 00:37:57,800
want to do here say look here is the

860
00:37:52,610 --> 00:38:01,760
asset we're talking about okay if this

861
00:37:57,800 --> 00:38:05,180
asset index here and then we know our

862
00:38:01,760 --> 00:38:08,350
number because that's something that we

863
00:38:05,179 --> 00:38:11,659
will have loaded out of our tags right

864
00:38:08,349 --> 00:38:13,759
so I probably want to pull that number

865
00:38:11,659 --> 00:38:15,500
out here so that it's available at all

866
00:38:13,760 --> 00:38:18,410
times because it's going to be relevant

867
00:38:15,500 --> 00:38:21,469
to us as we're doing sort of asset merge

868
00:38:18,409 --> 00:38:24,440
sort of stuff so we probably want to

869
00:38:21,469 --> 00:38:27,679
know when one comes in here there is

870
00:38:24,440 --> 00:38:30,710
another way we could do it we could just

871
00:38:27,679 --> 00:38:34,279
remember everybody like all the assets

872
00:38:30,710 --> 00:38:36,409
that happen to be mapped on to this grid

873
00:38:34,280 --> 00:38:38,980
location rather than just the most

874
00:38:36,409 --> 00:38:38,980
recent one

875
00:39:03,329 --> 00:39:09,599
I'm not sure how we want to do that I

876
00:39:06,650 --> 00:39:12,619
don't know that that would really get us

877
00:39:09,599 --> 00:39:12,619
anything in particular

878
00:39:28,760 --> 00:39:34,460
I don't really think it will so I'm just

879
00:39:31,610 --> 00:39:35,809
not going to bother with that so what we

880
00:39:34,460 --> 00:39:37,309
want to do here is see if the precedents

881
00:39:35,809 --> 00:39:39,110
learned that you know the other thing we

882
00:39:37,309 --> 00:39:42,049
could do is just make this be an error

883
00:39:39,110 --> 00:39:44,210
like you're just not allowed to do it so

884
00:39:42,050 --> 00:39:45,710
we could actually just say hey if

885
00:39:44,210 --> 00:39:47,869
there's already something in this slot

886
00:39:45,710 --> 00:39:50,630
you've got an error and we need to just

887
00:39:47,869 --> 00:39:52,069
let you know that you've got to use HHA

888
00:39:50,630 --> 00:39:54,170
edit to like delete an asset or

889
00:39:52,070 --> 00:39:56,269
something because you've got two assets

890
00:39:54,170 --> 00:40:00,980
open for editing that both came from the

891
00:39:56,269 --> 00:40:04,610
same sprite sheet apparently right so

892
00:40:00,980 --> 00:40:06,349
what I might do is say all right look if

893
00:40:04,610 --> 00:40:15,680
this equals zero we're good to go

894
00:40:06,349 --> 00:40:17,239
if it doesn't it's an error right and if

895
00:40:15,679 --> 00:40:20,779
you remember correctly we actually have

896
00:40:17,239 --> 00:40:22,699
some error reporting in here right you

897
00:40:20,780 --> 00:40:26,690
can see that we've got sort of this out

898
00:40:22,699 --> 00:40:29,389
F to match our thing so we can if we

899
00:40:26,690 --> 00:40:33,849
want to sort of have the notion that

900
00:40:29,389 --> 00:40:37,549
there is an error like an error stream

901
00:40:33,849 --> 00:40:39,559
that's coming and because we were

902
00:40:37,550 --> 00:40:42,230
previously like you know here's the

903
00:40:39,559 --> 00:40:44,989
error stream stuff it just so happens

904
00:40:42,230 --> 00:40:46,429
that this error stream is actually in

905
00:40:44,989 --> 00:40:49,669
the right place for that

906
00:40:46,429 --> 00:40:51,799
right so we can I think just just

907
00:40:49,670 --> 00:40:53,659
literally output the error to that file

908
00:40:51,800 --> 00:40:55,400
and it all just works so I don't even

909
00:40:53,659 --> 00:41:00,309
need that to be it to do I can go do it

910
00:40:55,400 --> 00:41:08,440
right and what I can say is like asset

911
00:41:00,309 --> 00:41:08,440
you know sent you and sent you both

912
00:41:09,880 --> 00:41:20,090
occupy same slot in sprite sheet and

913
00:41:14,630 --> 00:41:24,640
cannot be edited properly something like

914
00:41:20,090 --> 00:41:24,640
that and then what I could say is like

915
00:41:27,659 --> 00:41:34,920
well you know what I should probably do

916
00:41:29,960 --> 00:41:40,800
is say here's the spritesheet and here's

917
00:41:34,920 --> 00:41:43,769
the grid location so I could I can sort

918
00:41:40,800 --> 00:41:51,960
of print this out almost like C style C

919
00:41:43,769 --> 00:41:54,900
compiler style right so this way we can

920
00:41:51,960 --> 00:41:57,389
say here's a source file name here's the

921
00:41:54,900 --> 00:41:58,500
grid Y and grid X and I should reverse

922
00:41:57,389 --> 00:42:02,579
those two because we're in human

923
00:41:58,500 --> 00:42:05,369
readable form here so there's the source

924
00:42:02,579 --> 00:42:07,019
file name the two grid locations we know

925
00:42:05,369 --> 00:42:09,539
which two assets we're talking about

926
00:42:07,019 --> 00:42:12,849
because we know this particular asset

927
00:42:09,539 --> 00:42:15,929
index is

928
00:42:12,849 --> 00:42:28,298
[Music]

929
00:42:15,929 --> 00:42:33,969
this and the other asset index that was

930
00:42:28,298 --> 00:42:36,518
in here we do we know well I guess so

931
00:42:33,969 --> 00:42:37,838
when we are actually looking at assets I

932
00:42:36,518 --> 00:42:41,528
guess we can just use this

933
00:42:37,838 --> 00:42:45,880
so actually we know which asset index it

934
00:42:41,528 --> 00:42:48,539
is there so I can't actually get that

935
00:42:45,880 --> 00:43:14,440
asset out so this that would be a

936
00:42:48,539 --> 00:43:16,209
conflicting asset is alright so if the

937
00:43:14,440 --> 00:43:18,369
grid if what's in there currently is

938
00:43:16,208 --> 00:43:19,659
zero right and I could do it this way as

939
00:43:18,369 --> 00:43:21,789
well just to make it a little bit

940
00:43:19,659 --> 00:43:24,098
clearer so you know we can say all right

941
00:43:21,789 --> 00:43:29,650
in that case the asset that's in this

942
00:43:24,099 --> 00:43:31,119
grid is my asset right so replace it so

943
00:43:29,650 --> 00:43:33,670
that works but what I can also do here

944
00:43:31,119 --> 00:43:35,739
is say like okay hey if we did find a

945
00:43:33,670 --> 00:43:36,568
conflict then whatever the one that was

946
00:43:35,739 --> 00:43:39,369
in there right now

947
00:43:36,568 --> 00:43:41,380
let's print out what its asset index was

948
00:43:39,369 --> 00:43:45,039
to so then we've got alright we've got

949
00:43:41,380 --> 00:43:47,949
the asset asset index in file and we've

950
00:43:45,039 --> 00:43:50,170
got the conflict asset index and file so

951
00:43:47,949 --> 00:43:54,068
that tells you the two assets in that

952
00:43:50,170 --> 00:43:56,769
file that we're wrong and and off we go

953
00:43:54,068 --> 00:43:59,650
so I think that's all good

954
00:43:56,768 --> 00:44:03,669
probably that will print out the error

955
00:43:59,650 --> 00:44:06,338
into the into the source files asset

956
00:44:03,670 --> 00:44:08,108
error buffer and that way when we

957
00:44:06,338 --> 00:44:10,150
actually have a nice way of printing

958
00:44:08,108 --> 00:44:14,588
those out somewhere which we'll want to

959
00:44:10,150 --> 00:44:17,949
do eventually we will have this airport

960
00:44:14,588 --> 00:44:20,139
to us properly so this will place it

961
00:44:17,949 --> 00:44:22,059
into that file correctly there really

962
00:44:20,139 --> 00:44:26,348
isn't anything else we particularly need

963
00:44:22,059 --> 00:44:28,960
to do here except for the fact that when

964
00:44:26,349 --> 00:44:32,650
we are importing these assets in

965
00:44:28,960 --> 00:44:34,269
that file date there we could end up

966
00:44:32,650 --> 00:44:37,389
with a conflict now this is kind of

967
00:44:34,269 --> 00:44:40,599
annoying but it's just the way it is

968
00:44:37,389 --> 00:44:43,088
so we need to set that file date to the

969
00:44:40,599 --> 00:44:45,130
lowest possible file date so what we

970
00:44:43,088 --> 00:44:46,900
want to do here is say when we get grab

971
00:44:45,130 --> 00:44:50,108
this file we need a thing here that's

972
00:44:46,900 --> 00:44:52,720
like you know look up file or whatever

973
00:44:50,108 --> 00:44:56,170
right and then we need to say look if

974
00:44:52,719 --> 00:44:58,480
the source files file date is greater

975
00:44:56,170 --> 00:45:01,088
than our file then what we think the

976
00:44:58,480 --> 00:45:02,889
file date should be right because we

977
00:45:01,088 --> 00:45:04,960
have an opinion about that right our h/h

978
00:45:02,889 --> 00:45:08,858
annotation says what we think the source

979
00:45:04,960 --> 00:45:11,079
file date was if it's higher we need to

980
00:45:08,858 --> 00:45:14,559
set it two hours so that we always pick

981
00:45:11,079 --> 00:45:16,779
the lowest source file date right and

982
00:45:14,559 --> 00:45:18,849
then we can set the checksum if we want

983
00:45:16,780 --> 00:45:27,400
to again we don't have that right now

984
00:45:18,849 --> 00:45:30,460
but the file checksum equals H

985
00:45:27,400 --> 00:45:32,139
sanitation source file checksum so in

986
00:45:30,460 --> 00:45:36,490
this case you know when we goups file

987
00:45:32,139 --> 00:45:38,889
data try validate so in this case when

988
00:45:36,489 --> 00:45:42,129
we look at that information we say okay

989
00:45:38,889 --> 00:45:44,710
when the source file comes back if for

990
00:45:42,130 --> 00:45:47,230
some reason we've got a mismatch here we

991
00:45:44,710 --> 00:45:49,510
need to set it to whatever ours is right

992
00:45:47,230 --> 00:45:51,460
and we can do this a little bit more

993
00:45:49,510 --> 00:45:53,770
strategically here maybe that stuff that

994
00:45:51,460 --> 00:45:55,809
kind of needs to get handled in the

995
00:45:53,769 --> 00:45:58,480
lookup or whatever so what I can do is I

996
00:45:55,809 --> 00:46:00,849
can also just pass those along in case

997
00:45:58,480 --> 00:46:03,190
it wants to do more complicated conflict

998
00:46:00,849 --> 00:46:04,780
resolution maybe we do it like that and

999
00:46:03,190 --> 00:46:06,280
it gets handled in the lookup right so

1000
00:46:04,780 --> 00:46:07,450
we've got the date and checksum and

1001
00:46:06,280 --> 00:46:14,019
those kind of flow through the pipeline

1002
00:46:07,449 --> 00:46:18,939
automatically right so once we've done

1003
00:46:14,019 --> 00:46:21,449
that we are ready to go that that pretty

1004
00:46:18,940 --> 00:46:24,099
much imports all that information in and

1005
00:46:21,449 --> 00:46:26,259
so we just need our lookup file or

1006
00:46:24,099 --> 00:46:29,588
whatever function and I think this code

1007
00:46:26,260 --> 00:46:31,900
path is good to go what we don't have is

1008
00:46:29,588 --> 00:46:35,199
a thing on the other end that will

1009
00:46:31,900 --> 00:46:38,710
properly save this information into the

1010
00:46:35,199 --> 00:46:41,919
annotation slot for new assets so that

1011
00:46:38,710 --> 00:46:42,460
part we still have to do and it's not

1012
00:46:41,920 --> 00:46:44,289
very good

1013
00:46:42,460 --> 00:46:48,338
cult because we kind of already have it

1014
00:46:44,289 --> 00:46:51,869
all set up to to work with the asset

1015
00:46:48,338 --> 00:46:56,380
arrays so it's pretty straightforward

1016
00:46:51,869 --> 00:46:58,660
but we we got to go do it right so I'm

1017
00:46:56,380 --> 00:47:00,480
gonna do that but first let's let's take

1018
00:46:58,659 --> 00:47:05,769
care of lookup file or whatever what we

1019
00:47:00,480 --> 00:47:08,980
can recall here is back in in check for

1020
00:47:05,769 --> 00:47:11,920
our changes here is the thing that does

1021
00:47:08,980 --> 00:47:18,070
what we want so really all we have to do

1022
00:47:11,920 --> 00:47:22,450
here is extract this code out from what

1023
00:47:18,070 --> 00:47:24,730
we're doing in in this scanning loop

1024
00:47:22,449 --> 00:47:29,618
here so we just need to extract this

1025
00:47:24,730 --> 00:47:31,088
code and we need to make that into like

1026
00:47:29,619 --> 00:47:33,640
a callable thing so it could be done

1027
00:47:31,088 --> 00:47:35,380
from more than one place right so I'm

1028
00:47:33,639 --> 00:47:38,440
going to do first is is sort of pull

1029
00:47:35,380 --> 00:47:43,838
this out here and make this me something

1030
00:47:38,440 --> 00:47:45,280
we can call again got some compression

1031
00:47:43,838 --> 00:47:46,989
or active programming here right just

1032
00:47:45,280 --> 00:47:48,820
say look we see ourselves using this

1033
00:47:46,989 --> 00:47:52,149
multiple times let's make it into

1034
00:47:48,820 --> 00:47:54,280
something we can and most this stuff

1035
00:47:52,150 --> 00:47:57,760
here totally straightforward we don't

1036
00:47:54,280 --> 00:48:00,070
have is the hash value right so we need

1037
00:47:57,760 --> 00:48:00,940
to pass that hash value in and that

1038
00:48:00,070 --> 00:48:02,650
means we're probably gonna have a

1039
00:48:00,940 --> 00:48:04,659
two-layer thing here because sometimes

1040
00:48:02,650 --> 00:48:07,059
people have the hash value other times

1041
00:48:04,659 --> 00:48:13,889
they don't so anyway this is going to be

1042
00:48:07,059 --> 00:48:16,690
like a get or create asset source file

1043
00:48:13,889 --> 00:48:19,569
and this will return that asset source

1044
00:48:16,690 --> 00:48:22,240
file we know that we're passing a hash

1045
00:48:19,570 --> 00:48:24,550
value here that will allow us to access

1046
00:48:22,239 --> 00:48:33,069
it we also know that we need the base

1047
00:48:24,550 --> 00:48:34,690
name and the assets right so then we

1048
00:48:33,070 --> 00:48:38,430
flew through here okay you can see us

1049
00:48:34,690 --> 00:48:38,429
updating the hash value like so

1050
00:48:43,268 --> 00:48:47,508
you make that a little clearer there we

1051
00:48:45,710 --> 00:48:49,009
passing the unmodern hash value we

1052
00:48:47,509 --> 00:48:51,349
produce the hash fire that has been

1053
00:48:49,009 --> 00:48:53,539
modded properly we then go ahead and

1054
00:48:51,349 --> 00:48:55,160
search for the match if we find the

1055
00:48:53,539 --> 00:48:56,720
match we're done when we look through

1056
00:48:55,159 --> 00:48:58,879
here if we did not find a match we

1057
00:48:56,719 --> 00:49:01,879
create a new one and then we return the

1058
00:48:58,880 --> 00:49:03,499
match ready to go right so we've got

1059
00:49:01,880 --> 00:49:05,869
some there's more to it than that

1060
00:49:03,498 --> 00:49:07,788
potentially but that's mostly what we're

1061
00:49:05,869 --> 00:49:10,400
looking at here so then what I want to

1062
00:49:07,789 --> 00:49:11,989
do is fill out this in terms of this

1063
00:49:10,400 --> 00:49:15,170
other file as it turns of this other

1064
00:49:11,989 --> 00:49:16,880
function so here again we don't actually

1065
00:49:15,170 --> 00:49:20,180
want to do this anymore now I just want

1066
00:49:16,880 --> 00:49:21,798
to pass the hash value in like so and

1067
00:49:20,179 --> 00:49:25,190
then the question is well where's the

1068
00:49:21,798 --> 00:49:36,619
base name the base name is is in in here

1069
00:49:25,190 --> 00:49:41,329
right hash bar there's the assets here's

1070
00:49:36,619 --> 00:49:42,710
our match and so then this fought this

1071
00:49:41,329 --> 00:49:43,999
stuff doesn't really have to execute now

1072
00:49:42,710 --> 00:49:46,068
I thought well good by the way this is

1073
00:49:43,998 --> 00:49:53,718
like that

1074
00:49:46,068 --> 00:49:55,880
and this is like that right and that all

1075
00:49:53,719 --> 00:49:58,489
looks fine so then what we want to do is

1076
00:49:55,880 --> 00:50:00,890
say okay this code goes away we can just

1077
00:49:58,489 --> 00:50:02,690
get the match directly like so we want

1078
00:50:00,889 --> 00:50:05,058
to assert because we're basically saying

1079
00:50:02,690 --> 00:50:07,940
look it has to succeed it will create a

1080
00:50:05,059 --> 00:50:10,579
new one if it doesn't find one and then

1081
00:50:07,940 --> 00:50:15,259
we'll proceed to do some stuff with it

1082
00:50:10,579 --> 00:50:18,170
right okay so that's most of the code

1083
00:50:15,259 --> 00:50:21,619
that we actually wanted what we want to

1084
00:50:18,170 --> 00:50:23,778
do now is say well okay the asset source

1085
00:50:21,619 --> 00:50:25,910
file version here get or create asset

1086
00:50:23,778 --> 00:50:27,739
source file there's another version we

1087
00:50:25,909 --> 00:50:30,558
may want of this it does something

1088
00:50:27,739 --> 00:50:32,659
slightly different here we just have the

1089
00:50:30,559 --> 00:50:35,150
base name we don't know what the hash

1090
00:50:32,659 --> 00:50:39,199
value is for the base name we also have

1091
00:50:35,150 --> 00:50:42,680
the file date and the file checksum that

1092
00:50:39,199 --> 00:50:46,548
we're passing and what we want to do

1093
00:50:42,679 --> 00:50:50,509
here is first produce the string hash

1094
00:50:46,548 --> 00:50:53,079
and you can see here the update string

1095
00:50:50,509 --> 00:50:55,960
hash function

1096
00:50:53,079 --> 00:50:57,880
where that came from this right here I

1097
00:50:55,960 --> 00:51:00,190
don't know that we have a thing that

1098
00:50:57,880 --> 00:51:01,809
hashes the whole strength we don't so we

1099
00:51:00,190 --> 00:51:06,970
should probably make something that just

1100
00:51:01,809 --> 00:51:10,659
hashes the whole string where we just

1101
00:51:06,969 --> 00:51:12,759
pass as E string here and this is just a

1102
00:51:10,659 --> 00:51:16,750
simplest saying alright the hash value

1103
00:51:12,760 --> 00:51:23,230
equals 0 to start with right

1104
00:51:16,750 --> 00:51:28,059
while star Z update string hash hash

1105
00:51:23,230 --> 00:51:33,250
value star Z we can even do that if we

1106
00:51:28,059 --> 00:51:36,400
are so inclined right so that lets us

1107
00:51:33,250 --> 00:51:40,360
produce the entire string hash in one go

1108
00:51:36,400 --> 00:51:42,610
which is something we do want to do you

1109
00:51:40,360 --> 00:51:44,890
can see here you're producing it in line

1110
00:51:42,610 --> 00:51:47,440
to this so that we don't have to look at

1111
00:51:44,889 --> 00:51:49,150
the string twice arguably not necessary

1112
00:51:47,440 --> 00:51:50,650
to be that hot all about it but it

1113
00:51:49,150 --> 00:51:53,619
doesn't matter that's just how it is we

1114
00:51:50,650 --> 00:51:54,970
don't need to undo it so here we know we

1115
00:51:53,619 --> 00:51:59,019
want to take the string hash of this

1116
00:51:54,969 --> 00:52:03,189
base name so then we can do asset source

1117
00:51:59,019 --> 00:52:06,340
file your salt equals get or create

1118
00:52:03,190 --> 00:52:09,579
asset source file we can pass that in

1119
00:52:06,340 --> 00:52:14,880
here we know we've got the assets hash

1120
00:52:09,579 --> 00:52:18,039
of the base name and the base name and

1121
00:52:14,880 --> 00:52:20,110
then what we want to do is again take a

1122
00:52:18,039 --> 00:52:23,710
look at the date and check some

1123
00:52:20,110 --> 00:52:26,380
information on the file so what we want

1124
00:52:23,710 --> 00:52:31,750
to do is say look if this files file

1125
00:52:26,380 --> 00:52:36,039
date that it's got in there is 0 so you

1126
00:52:31,750 --> 00:52:38,530
know the this right here if the file

1127
00:52:36,039 --> 00:52:40,179
date is 0 then we know it was new it was

1128
00:52:38,530 --> 00:52:42,490
newly we're the first people creating it

1129
00:52:40,179 --> 00:52:45,009
so if the file date is 0 we want to

1130
00:52:42,489 --> 00:52:47,979
reset it and we also want to reset it in

1131
00:52:45,010 --> 00:52:53,200
the case where we have an earlier one

1132
00:52:47,980 --> 00:52:59,199
right so if it's 0 or if the file date

1133
00:52:53,199 --> 00:53:02,949
is on the the one we find is greater

1134
00:52:59,199 --> 00:53:06,819
than our file date then we need to reset

1135
00:53:02,949 --> 00:53:09,819
it and the reason to prefer

1136
00:53:06,820 --> 00:53:11,530
a file date that's lower is because if

1137
00:53:09,820 --> 00:53:13,000
you remember the point of the file date

1138
00:53:11,530 --> 00:53:15,760
tracking is to make sure that we don't

1139
00:53:13,000 --> 00:53:18,219
use old assets if we have two assets

1140
00:53:15,760 --> 00:53:21,250
that came from a source file and one of

1141
00:53:18,219 --> 00:53:23,649
them is saying well I was from date this

1142
00:53:21,250 --> 00:53:25,929
and I was saying I'm from date VAT right

1143
00:53:23,650 --> 00:53:29,829
what we wanted you is use the earliest

1144
00:53:25,929 --> 00:53:31,899
date possible because maybe the asset

1145
00:53:29,829 --> 00:53:32,860
file has been updated and if we use the

1146
00:53:31,900 --> 00:53:35,470
later date

1147
00:53:32,860 --> 00:53:37,900
that earlier date asset risks not

1148
00:53:35,469 --> 00:53:41,259
getting it's new version there's no harm

1149
00:53:37,900 --> 00:53:43,440
done INRI important something right so

1150
00:53:41,260 --> 00:53:46,210
we want to make sure that we're always

1151
00:53:43,440 --> 00:53:48,820
preferring younger dates in terms of

1152
00:53:46,210 --> 00:53:52,960
when files should be operated younger

1153
00:53:48,820 --> 00:53:55,539
dates know older dates more elderly if

1154
00:53:52,960 --> 00:54:00,369
we want the older file date which is a

1155
00:53:55,539 --> 00:54:03,039
lower value right I don't know how you

1156
00:54:00,369 --> 00:54:05,319
want to say that but we want dates that

1157
00:54:03,039 --> 00:54:09,730
are lower even though that means the

1158
00:54:05,320 --> 00:54:11,559
file is older confusing anyway so we

1159
00:54:09,730 --> 00:54:14,469
want to prefer those so we do prefer

1160
00:54:11,559 --> 00:54:16,299
those here and then this is the file

1161
00:54:14,469 --> 00:54:19,629
that we'll call in the case where we're

1162
00:54:16,300 --> 00:54:22,090
actually saying look here's the data

1163
00:54:19,630 --> 00:54:25,690
here's the date information and stuff

1164
00:54:22,090 --> 00:54:27,309
like that that we actually have so now

1165
00:54:25,690 --> 00:54:30,550
we know what lookup file or whatever

1166
00:54:27,309 --> 00:54:34,090
actually is in its passing exactly the

1167
00:54:30,550 --> 00:54:36,370
things we want here just like so so we

1168
00:54:34,090 --> 00:54:38,559
just go ahead and suck those up into the

1169
00:54:36,369 --> 00:54:40,690
function call and now we're good to go

1170
00:54:38,559 --> 00:54:42,730
so now if we look at what we're doing

1171
00:54:40,690 --> 00:54:44,650
here what's this game assets actually

1172
00:54:42,730 --> 00:54:45,909
yeah game assets don't ask me why as

1173
00:54:44,650 --> 00:54:49,090
opposed to like the other kinds of

1174
00:54:45,909 --> 00:54:52,500
assets we have apparently anyway if we

1175
00:54:49,090 --> 00:54:52,500
go ahead and and

1176
00:55:00,829 --> 00:55:07,199
get a great asset source file we passed

1177
00:55:03,778 --> 00:55:09,659
the assets game assets the base name

1178
00:55:07,199 --> 00:55:11,639
gets passed second right yeah and then

1179
00:55:09,659 --> 00:55:19,429
the string hash of the base name gets

1180
00:55:11,639 --> 00:55:25,338
passed there that sure looks like it is

1181
00:55:19,429 --> 00:55:40,828
the string hash of not produce the right

1182
00:55:25,338 --> 00:55:42,630
value it doesn't all right so annotation

1183
00:55:40,829 --> 00:55:44,699
index is just a typo here obviously we

1184
00:55:42,630 --> 00:55:47,190
don't actually need an annotation index

1185
00:55:44,699 --> 00:55:48,989
it's just an asset index because they

1186
00:55:47,190 --> 00:55:53,909
are parallel arrays if they exist

1187
00:55:48,989 --> 00:55:57,599
they're required to match right so here

1188
00:55:53,909 --> 00:55:59,699
we've got you 64's I must have

1189
00:55:57,599 --> 00:56:02,579
accidentally said you 32 there I didn't

1190
00:55:59,699 --> 00:56:04,650
actually mean for it to be you 32 I want

1191
00:56:02,579 --> 00:56:07,619
it to be 64 so apologize for that

1192
00:56:04,650 --> 00:56:10,369
supposed to look like that anyway we

1193
00:56:07,619 --> 00:56:13,528
then have the grid wide grid X stuff I

1194
00:56:10,369 --> 00:56:15,989
wrote those out in shorthand and really

1195
00:56:13,528 --> 00:56:17,278
we we have that information we don't

1196
00:56:15,989 --> 00:56:19,920
need to compute it it's just it's a

1197
00:56:17,278 --> 00:56:21,748
little bit longer handed it's right

1198
00:56:19,920 --> 00:56:27,170
sheet X from the Anna

1199
00:56:21,748 --> 00:56:30,868
HHH annotation like so and then here

1200
00:56:27,170 --> 00:56:33,269
this is not file that's supposed to be

1201
00:56:30,869 --> 00:56:36,778
source file so that's a bit of screw-up

1202
00:56:33,268 --> 00:56:39,268
glad that got caught and that's it so

1203
00:56:36,778 --> 00:56:42,239
that imports all of the annotation data

1204
00:56:39,268 --> 00:56:44,308
that we actually care about the rest of

1205
00:56:42,239 --> 00:56:46,380
it just leaves us pass through because

1206
00:56:44,309 --> 00:56:48,119
we don't need to know the author or the

1207
00:56:46,380 --> 00:56:50,099
description or any of that stuff at the

1208
00:56:48,119 --> 00:56:51,599
moment maybe we want to load those later

1209
00:56:50,099 --> 00:56:53,969
for some other reason in some kind of

1210
00:56:51,599 --> 00:56:55,739
editing mode or something I don't know

1211
00:56:53,969 --> 00:56:56,818
but the moment we don't care we just

1212
00:56:55,739 --> 00:56:58,650
need to preserve them and this will

1213
00:56:56,818 --> 00:57:00,538
preserve them so long as when we

1214
00:56:58,650 --> 00:57:02,219
actually go to write assets out we write

1215
00:57:00,539 --> 00:57:04,319
out their annotations as well which we

1216
00:57:02,219 --> 00:57:07,048
have not done yet and that is the last

1217
00:57:04,318 --> 00:57:10,018
thing that we want to do to support that

1218
00:57:07,048 --> 00:57:12,300
editing I think that's really it I can't

1219
00:57:10,018 --> 00:57:15,179
oh wait there's one of the

1220
00:57:12,300 --> 00:57:16,860
doing that was down sampling so so after

1221
00:57:15,179 --> 00:57:21,349
he finished us we'll do down sampling as

1222
00:57:16,860 --> 00:57:21,349
well yeah yeah sorry

1223
00:57:22,280 --> 00:57:28,860
so if I want to do that let's just go

1224
00:57:26,159 --> 00:57:31,500
ahead and go to the place where we

1225
00:57:28,860 --> 00:57:34,200
actually write these things out so you

1226
00:57:31,500 --> 00:57:38,070
know we have sort of all of this done

1227
00:57:34,199 --> 00:57:43,259
already right we already did the right

1228
00:57:38,070 --> 00:57:45,180
changes here it is and we also have

1229
00:57:43,260 --> 00:57:47,880
right asset data right you can see it

1230
00:57:45,179 --> 00:57:50,730
doing this this stuff here this is

1231
00:57:47,880 --> 00:57:51,780
really all we're gonna need so when we

1232
00:57:50,730 --> 00:57:54,869
come through here to do write

1233
00:57:51,780 --> 00:57:56,670
modifications to HHA now is the point

1234
00:57:54,869 --> 00:57:59,549
where we can make this work with the new

1235
00:57:56,670 --> 00:58:01,289
file format and include the annotations

1236
00:57:59,550 --> 00:58:03,570
with it and I think that's really the

1237
00:58:01,289 --> 00:58:05,309
last thing that we need to do there in

1238
00:58:03,570 --> 00:58:07,170
terms of bookkeeping I think that's

1239
00:58:05,309 --> 00:58:09,690
that's the end of our bookkeeping you

1240
00:58:07,170 --> 00:58:12,119
know other than debugging obviously but

1241
00:58:09,690 --> 00:58:14,460
off we go and so what we need to do now

1242
00:58:12,119 --> 00:58:16,500
is adapt this to the fact that we don't

1243
00:58:14,460 --> 00:58:18,119
have to use asset types anymore asset

1244
00:58:16,500 --> 00:58:20,250
types are not relevant it's just tags

1245
00:58:18,119 --> 00:58:23,369
and assets and what we need to do is

1246
00:58:20,250 --> 00:58:25,739
expand this to put in the annotations

1247
00:58:23,369 --> 00:58:28,049
because we want our annotations array to

1248
00:58:25,739 --> 00:58:29,759
be preserved now so really we're just

1249
00:58:28,050 --> 00:58:30,990
replacing one array with another and

1250
00:58:29,760 --> 00:58:32,460
that array happens to be one that we

1251
00:58:30,989 --> 00:58:36,509
actually wanted instead of one that we

1252
00:58:32,460 --> 00:58:40,320
don't so here's our annotation array and

1253
00:58:36,510 --> 00:58:41,880
here's our annotation array size so we

1254
00:58:40,320 --> 00:58:43,650
need to we know we need to write that

1255
00:58:41,880 --> 00:58:46,019
out the question is where is it going to

1256
00:58:43,650 --> 00:58:48,150
come from also let's take a look here we

1257
00:58:46,019 --> 00:58:50,340
know that we're doing our tag build up

1258
00:58:48,150 --> 00:58:52,680
here there's nothing probably specific

1259
00:58:50,340 --> 00:58:55,559
that has to happen in this I would like

1260
00:58:52,679 --> 00:58:58,980
to assert that this file uh is allows

1261
00:58:55,559 --> 00:59:00,690
editing right because if this was set to

1262
00:58:58,980 --> 00:59:03,329
false and we got to a write

1263
00:59:00,690 --> 00:59:05,070
modifications call that seems really bad

1264
00:59:03,329 --> 00:59:06,569
because then we're about to overwrite

1265
00:59:05,070 --> 00:59:08,430
data in a file that we said it wasn't

1266
00:59:06,570 --> 00:59:10,230
supposed to be edited so we probably

1267
00:59:08,429 --> 00:59:12,029
want to alert ourselves in debug mode to

1268
00:59:10,230 --> 00:59:15,090
that fact because something's gone us

1269
00:59:12,030 --> 00:59:17,220
seriously pear-shaped at that point so

1270
00:59:15,090 --> 00:59:19,740
when we come through here we build up

1271
00:59:17,219 --> 00:59:21,209
how much tags we want we know all the

1272
00:59:19,739 --> 00:59:24,119
rest of the information that we actually

1273
00:59:21,210 --> 00:59:25,650
need and what we do now is instead of

1274
00:59:24,119 --> 00:59:28,650
that asset types array I just

1275
00:59:25,650 --> 00:59:30,000
build the annotation array size and

1276
00:59:28,650 --> 00:59:32,579
again that's gonna be the asset count

1277
00:59:30,000 --> 00:59:35,760
times the size of the HHA annotations

1278
00:59:32,579 --> 00:59:38,339
and that's good to go we then come

1279
00:59:35,760 --> 00:59:40,920
through here and say again don't need

1280
00:59:38,338 --> 00:59:42,568
this annotations is not something that

1281
00:59:40,920 --> 00:59:44,849
gets counted so if we take a look at the

1282
00:59:42,568 --> 00:59:47,068
header file now right we got tags asses

1283
00:59:44,849 --> 00:59:49,048
annotations we don't need a count for

1284
00:59:47,068 --> 00:59:50,880
annotations because either it's 0 or

1285
00:59:49,048 --> 00:59:52,889
it's a valid offset that's all the

1286
00:59:50,880 --> 00:59:55,318
information we need we know that it has

1287
00:59:52,889 --> 00:59:57,179
the same number in it as asset counts if

1288
00:59:55,318 --> 00:59:58,440
it exists in the first place but doesn't

1289
00:59:57,179 --> 01:00:00,568
exist it's just not there if it does

1290
00:59:58,440 --> 01:00:03,028
exist it's got as many as those in it so

1291
01:00:00,568 --> 01:00:07,650
no no worries there so now we just put

1292
01:00:03,028 --> 01:00:09,420
the annotations in here you can see me

1293
01:00:07,650 --> 01:00:16,528
setting that up here so what we say is

1294
01:00:09,420 --> 01:00:19,619
like alright header annotations so this

1295
01:00:16,528 --> 01:00:25,829
is the tag array size here and this is

1296
01:00:19,619 --> 01:00:28,440
going to be sorry assets plus asset

1297
01:00:25,829 --> 01:00:30,450
array size right so we just say alright

1298
01:00:28,440 --> 01:00:36,990
the tags start at the watermark the

1299
01:00:30,449 --> 01:00:39,058
assets are the assets are where the tags

1300
01:00:36,989 --> 01:00:41,098
were plus however big the tags were and

1301
01:00:39,059 --> 01:00:42,660
the annotations are wherever the assets

1302
01:00:41,099 --> 01:00:45,000
were plus however big the assets were

1303
01:00:42,659 --> 01:00:47,219
right very straightforward tag those on

1304
01:00:45,000 --> 01:00:50,068
we can then go ahead and get those

1305
01:00:47,219 --> 01:00:52,019
location sorry not those locations we

1306
01:00:50,068 --> 01:00:54,568
can then go ahead and get space to build

1307
01:00:52,019 --> 01:00:56,099
those before we write them out again all

1308
01:00:54,568 --> 01:00:57,599
we have to do here is just make sure

1309
01:00:56,099 --> 01:00:59,730
that we allocate additional one for

1310
01:00:57,599 --> 01:01:02,970
annotations replace the asset types with

1311
01:00:59,730 --> 01:01:04,798
with that an asset type count there

1312
01:01:02,969 --> 01:01:06,509
shouldn't be an asset type count also so

1313
01:01:04,798 --> 01:01:11,159
I need to get rid of that so that's gone

1314
01:01:06,510 --> 01:01:13,289
right so we go ahead and do that we

1315
01:01:11,159 --> 01:01:16,048
don't have a desk type here that's not a

1316
01:01:13,289 --> 01:01:18,089
thing so that goes away and then we

1317
01:01:16,048 --> 01:01:20,068
start looping over stuff we don't need

1318
01:01:18,088 --> 01:01:22,440
to loop by type ID anymore that's not a

1319
01:01:20,068 --> 01:01:24,389
thing we can just loop over all the

1320
01:01:22,440 --> 01:01:27,990
assets and find the assets that we

1321
01:01:24,389 --> 01:01:30,420
actually were trying to output we we

1322
01:01:27,989 --> 01:01:33,179
don't need to do this right so here is

1323
01:01:30,420 --> 01:01:36,000
the actual thing that we're doing we can

1324
01:01:33,179 --> 01:01:37,269
just use the asset index we can start at

1325
01:01:36,000 --> 01:01:39,190
0

1326
01:01:37,269 --> 01:01:42,099
and while we can skip asset zero if we

1327
01:01:39,190 --> 01:01:44,320
want to and I'll call this this is

1328
01:01:42,099 --> 01:01:48,339
really global asset index right so let's

1329
01:01:44,320 --> 01:01:55,840
just call it global asset index we go

1330
01:01:48,340 --> 01:01:57,640
through all of the assets and for each

1331
01:01:55,840 --> 01:01:59,650
one of those we see if it was in this

1332
01:01:57,639 --> 01:02:03,730
file if it wasn't this file then we go

1333
01:01:59,650 --> 01:02:06,130
ahead and write it out asset index and

1334
01:02:03,730 --> 01:02:09,130
file is going to kind of be assigned

1335
01:02:06,130 --> 01:02:12,460
going upwards and what we want to do

1336
01:02:09,130 --> 01:02:15,039
here because we're resetting this asset

1337
01:02:12,460 --> 01:02:18,130
array we probably should reset the

1338
01:02:15,039 --> 01:02:21,550
assets idea of which asset it is as well

1339
01:02:18,130 --> 01:02:26,200
right so in other words in here we sort

1340
01:02:21,550 --> 01:02:28,600
of have the source asset that it came

1341
01:02:26,199 --> 01:02:31,569
from it's got an asset index and file

1342
01:02:28,599 --> 01:02:34,000
value we want to set that to be the new

1343
01:02:31,570 --> 01:02:36,910
asset index and file right because

1344
01:02:34,000 --> 01:02:39,210
that's where it is now it we could could

1345
01:02:36,909 --> 01:02:41,440
have moved it right

1346
01:02:39,210 --> 01:02:44,409
usually we won't because we're going in

1347
01:02:41,440 --> 01:02:46,420
order but just in case we should store

1348
01:02:44,409 --> 01:02:48,670
that information right we could

1349
01:02:46,420 --> 01:02:49,690
alternatively assert that but I don't

1350
01:02:48,670 --> 01:02:51,070
know that we care about sorting it

1351
01:02:49,690 --> 01:02:56,260
because we just care that it lines up

1352
01:02:51,070 --> 01:02:59,140
correctly if that makes sense so anyway

1353
01:02:56,260 --> 01:03:00,609
here we are with our do we haven't use

1354
01:02:59,139 --> 01:03:06,670
that information now I think about it

1355
01:03:00,608 --> 01:03:09,460
though it doesn't matter well look at

1356
01:03:06,670 --> 01:03:11,680
that later all right so anyway moving

1357
01:03:09,460 --> 01:03:14,230
forwards looking at what we're actually

1358
01:03:11,679 --> 01:03:17,858
gonna output here we've got sort of this

1359
01:03:14,230 --> 01:03:20,590
guest information so what's actually

1360
01:03:17,858 --> 01:03:23,650
stored there so here's our HHA asset we

1361
01:03:20,590 --> 01:03:26,320
now need the information that's going to

1362
01:03:23,650 --> 01:03:28,030
come with this asset we don't need any

1363
01:03:26,320 --> 01:03:36,640
of this stuff right because it's

1364
01:03:28,030 --> 01:03:39,190
basically all yeah if this is all for

1365
01:03:36,639 --> 01:03:41,549
the type we don't care about that at all

1366
01:03:39,190 --> 01:03:44,559
right that's gone goodbye not relevant

1367
01:03:41,550 --> 01:03:46,720
so all we need to do is copy the HHA and

1368
01:03:44,559 --> 01:03:49,179
then update our tags right because our

1369
01:03:46,719 --> 01:03:51,039
tags the tags are going to get repacked

1370
01:03:49,179 --> 01:03:52,149
now they might not line up

1371
01:03:51,039 --> 01:03:54,039
the way that they used to so we're just

1372
01:03:52,150 --> 01:03:56,380
repacking their tags so we grab the

1373
01:03:54,039 --> 01:03:59,110
source HHA out then all we need to do is

1374
01:03:56,380 --> 01:04:01,300
just like pack the tags in there the

1375
01:03:59,110 --> 01:04:05,230
first tag index one past last tag index

1376
01:04:01,300 --> 01:04:07,600
bit I that just shouldn't that have been

1377
01:04:05,230 --> 01:04:12,990
updated is there a reason we weren't

1378
01:04:07,599 --> 01:04:15,460
updating that does anyone know

1379
01:04:12,989 --> 01:04:25,599
does that look that that looks wrong to

1380
01:04:15,460 --> 01:04:27,579
you right does that not I mean I mean I

1381
01:04:25,599 --> 01:04:30,819
mean that's definitely that's got to be

1382
01:04:27,579 --> 01:04:34,150
wrong I don't I don't see any way for

1383
01:04:30,820 --> 01:04:37,539
that not to be wrong this should say

1384
01:04:34,150 --> 01:04:41,590
first tag index equals tag index and

1385
01:04:37,539 --> 01:04:45,340
file and this should say one passed last

1386
01:04:41,590 --> 01:04:52,559
time circles Tagus and file right I mean

1387
01:04:45,340 --> 01:04:55,900
that's just seems pretty obvious to me

1388
01:04:52,559 --> 01:04:57,369
let's not missing something anyway so

1389
01:04:55,900 --> 01:04:59,820
that's a much simpler loop now that

1390
01:04:57,369 --> 01:05:02,469
builds our entire asset array

1391
01:04:59,820 --> 01:05:04,360
information up and so now we need to do

1392
01:05:02,469 --> 01:05:07,929
is account for the fact that annotations

1393
01:05:04,360 --> 01:05:09,550
were never included in here again not

1394
01:05:07,929 --> 01:05:12,009
particularly difficult we should be able

1395
01:05:09,550 --> 01:05:15,160
to just say agency annotation deaths

1396
01:05:12,010 --> 01:05:18,880
annotation equals annotation array plus

1397
01:05:15,159 --> 01:05:20,739
asset index and file and then we can

1398
01:05:18,880 --> 01:05:23,110
literally just I don't even think we

1399
01:05:20,739 --> 01:05:26,129
need to update anything in it I think

1400
01:05:23,110 --> 01:05:26,130
it's literally like this

1401
01:05:32,420 --> 01:05:37,769
III mean I think that's it cuz all of it

1402
01:05:35,730 --> 01:05:39,298
is just some indices and some you know

1403
01:05:37,768 --> 01:05:41,518
check sums and stuff and they'll just

1404
01:05:39,298 --> 01:05:43,018
copy over and they're correct right so

1405
01:05:41,518 --> 01:05:44,669
that they're just gonna reference into

1406
01:05:43,018 --> 01:05:46,889
the file as then the file hasn't been

1407
01:05:44,670 --> 01:05:48,869
touched in terms of the data that's in

1408
01:05:46,889 --> 01:05:51,150
it so I feel like that's just fine there

1409
01:05:48,869 --> 01:05:56,009
really isn't anything else to to deal

1410
01:05:51,150 --> 01:05:58,490
with in there right so that seems

1411
01:05:56,009 --> 01:06:05,119
totally fine to me and I think that's

1412
01:05:58,489 --> 01:06:16,139
really all we needed so that should be

1413
01:06:05,119 --> 01:06:17,068
fine um oh you can hear must be time for

1414
01:06:16,139 --> 01:06:22,710
the Blue Angels

1415
01:06:17,068 --> 01:06:25,349
I can hear Jets outside so that all

1416
01:06:22,710 --> 01:06:29,190
seems totally reasonable

1417
01:06:25,349 --> 01:06:31,109
last but not least to complete this we

1418
01:06:29,190 --> 01:06:35,490
get you know obviously besides debugging

1419
01:06:31,108 --> 01:06:38,038
that what we need to do is go and make

1420
01:06:35,489 --> 01:06:42,750
it so that when we pack in a new ass

1421
01:06:38,039 --> 01:06:45,299
asset so in here for example and we're

1422
01:06:42,750 --> 01:06:49,259
going through when we pack in a new

1423
01:06:45,298 --> 01:06:51,619
asset we need to add information into

1424
01:06:49,259 --> 01:06:55,259
the annotation to account for that right

1425
01:06:51,619 --> 01:06:57,539
so if you look in here right we come

1426
01:06:55,259 --> 01:06:59,789
through and we say we're gonna put a new

1427
01:06:57,539 --> 01:07:02,880
asset into this file or whatever else it

1428
01:06:59,789 --> 01:07:04,710
is that we're doing here so we're going

1429
01:07:02,880 --> 01:07:11,160
to grab a new asset in and what we need

1430
01:07:04,710 --> 01:07:14,639
to do is we need to we need to reserve

1431
01:07:11,159 --> 01:07:19,528
the asset data for the stuff that we

1432
01:07:14,639 --> 01:07:22,230
store right and so what we want to do

1433
01:07:19,528 --> 01:07:24,750
here is make sure that the HHA asset

1434
01:07:22,230 --> 01:07:29,278
data size gets updated to reflect the

1435
01:07:24,750 --> 01:07:31,920
new data size right and this in fact

1436
01:07:29,278 --> 01:07:33,509
when this does this it's less about we

1437
01:07:31,920 --> 01:07:34,920
don't really need to worry about these

1438
01:07:33,509 --> 01:07:38,960
two dimensions anymore

1439
01:07:34,920 --> 01:07:38,960
we can actually just check the size

1440
01:07:45,000 --> 01:07:51,400
so if it doesn't have storage or

1441
01:07:47,940 --> 01:07:54,670
wouldn't fit then we need to update it

1442
01:07:51,400 --> 01:07:56,680
right so that's how that works then this

1443
01:07:54,670 --> 01:07:58,930
stuff just goes passes on through and

1444
01:07:56,679 --> 01:08:03,309
everybody's fine and dandy and that's

1445
01:07:58,929 --> 01:08:06,789
all nice so that's fine but then you can

1446
01:08:03,309 --> 01:08:09,549
see here when we set up this HHA and we

1447
01:08:06,789 --> 01:08:12,340
place the the stuff in here we when we

1448
01:08:09,550 --> 01:08:16,750
write the asset data out we don't write

1449
01:08:12,340 --> 01:08:19,000
out any annotation information right we

1450
01:08:16,750 --> 01:08:20,319
so what we need to do here is we need to

1451
01:08:19,000 --> 01:08:24,310
make sure that we're actually going to

1452
01:08:20,319 --> 01:08:28,270
store the information for this assets

1453
01:08:24,310 --> 01:08:30,039
annotation properly so in order to do

1454
01:08:28,270 --> 01:08:34,299
that we kind of have two things that we

1455
01:08:30,039 --> 01:08:36,449
want to do so the first is we need to

1456
01:08:34,298 --> 01:08:39,279
fill in all of the pieces of the

1457
01:08:36,449 --> 01:08:41,920
annotation that are relevant to us right

1458
01:08:39,279 --> 01:08:45,689
so when we come through here and we get

1459
01:08:41,920 --> 01:08:49,350
the asset out if we had an actual asset

1460
01:08:45,689 --> 01:08:52,329
then we'll inherit what its annotations

1461
01:08:49,350 --> 01:08:54,640
were at the moment and that's good but

1462
01:08:52,329 --> 01:08:56,529
we also need to say look the annotation

1463
01:08:54,640 --> 01:08:59,980
itself has a bunch of stuff we may need

1464
01:08:56,529 --> 01:09:02,130
to set you know based on what we're

1465
01:08:59,979 --> 01:09:04,568
actually doing here okay

1466
01:09:02,130 --> 01:09:07,480
so here's all the stuff we may need to

1467
01:09:04,569 --> 01:09:09,280
set and let's make sure we set it we

1468
01:09:07,479 --> 01:09:16,750
need to set the source file date for

1469
01:09:09,279 --> 01:09:22,358
sure we need to set the checksum for

1470
01:09:16,750 --> 01:09:24,460
sure and then we need to set the

1471
01:09:22,359 --> 01:09:26,500
spritesheet stuff for sure like that's

1472
01:09:24,460 --> 01:09:28,630
always going to be updated because all

1473
01:09:26,500 --> 01:09:30,520
of that stuff has now been updated maybe

1474
01:09:28,630 --> 01:09:34,510
it's the same in the file maybe it isn't

1475
01:09:30,520 --> 01:09:36,100
but we we can't hurt to overwrite

1476
01:09:34,510 --> 01:09:39,850
something with the same value that it

1477
01:09:36,100 --> 01:09:41,890
used to be right then we've got our four

1478
01:09:39,850 --> 01:09:43,210
strings and we have to decide what we

1479
01:09:41,890 --> 01:09:44,710
want to do with those strings but that's

1480
01:09:43,210 --> 01:09:48,119
sort of separate issue that we'll get to

1481
01:09:44,710 --> 01:09:50,199
in a second so we need to specify this

1482
01:09:48,119 --> 01:09:52,989
information and this information needs

1483
01:09:50,199 --> 01:09:55,389
to kind of come in as part of this

1484
01:09:52,989 --> 01:09:57,519
process what we don't

1485
01:09:55,390 --> 01:10:01,090
have right now is a convenient way for

1486
01:09:57,520 --> 01:10:04,480
that to occur what we should do is we

1487
01:10:01,090 --> 01:10:06,100
can get some of it out of here so the

1488
01:10:04,479 --> 01:10:08,109
check some information that sort of

1489
01:10:06,100 --> 01:10:09,910
stuff can get updated here let's take a

1490
01:10:08,109 --> 01:10:12,489
look at how that would work so we look

1491
01:10:09,909 --> 01:10:14,109
at what's going on here

1492
01:10:12,489 --> 01:10:15,880
when we come through here we set the

1493
01:10:14,109 --> 01:10:17,949
date let me say do we want to do this

1494
01:10:15,880 --> 01:10:20,470
before or after now we can sort of have

1495
01:10:17,949 --> 01:10:26,050
a good reason to do it so we can base

1496
01:10:20,470 --> 01:10:32,310
say we update this first because assets

1497
01:10:26,050 --> 01:10:33,420
that get packed from here on out need to

1498
01:10:32,310 --> 01:10:37,450
[Music]

1499
01:10:33,420 --> 01:10:48,520
be able to stamp themselves with the

1500
01:10:37,449 --> 01:10:51,010
right data right so what we need to do

1501
01:10:48,520 --> 01:10:53,710
here is we need to set these two we'll

1502
01:10:51,010 --> 01:10:55,239
want to talk about that checksum if we

1503
01:10:53,710 --> 01:10:57,609
end up doing that

1504
01:10:55,239 --> 01:11:00,550
that'll want to be set here as well we

1505
01:10:57,609 --> 01:11:02,710
have those two pieces of information and

1506
01:11:00,550 --> 01:11:05,440
they're ready to go what we need to do

1507
01:11:02,710 --> 01:11:08,350
now is just copy them in we have the

1508
01:11:05,439 --> 01:11:12,189
source file here it's this file just the

1509
01:11:08,350 --> 01:11:16,090
file pointer right so we can save file

1510
01:11:12,189 --> 01:11:19,359
date well checksum those are both there

1511
01:11:16,090 --> 01:11:21,819
spritesheet X&amp;Y we know what they are we

1512
01:11:19,359 --> 01:11:24,279
had to figure those out there why index

1513
01:11:21,819 --> 01:11:26,349
an X index so we can just copy those in

1514
01:11:24,279 --> 01:11:29,380
directly and so then we're really just

1515
01:11:26,350 --> 01:11:31,480
left with four strings question is where

1516
01:11:29,380 --> 01:11:33,520
do the four strings come from if you

1517
01:11:31,479 --> 01:11:42,189
look at what we're dealing with here

1518
01:11:33,520 --> 01:11:45,190
these can these we can deal with in one

1519
01:11:42,189 --> 01:11:46,389
of two ways we can be maximally pigley

1520
01:11:45,189 --> 01:11:51,309
pigley about it

1521
01:11:46,390 --> 01:11:54,160
picky about it and put the pig hat on we

1522
01:11:51,310 --> 01:12:00,490
could choose to be more efficient it

1523
01:11:54,159 --> 01:12:04,210
depends because these strings are going

1524
01:12:00,489 --> 01:12:06,819
to appear multiple times right so the

1525
01:12:04,210 --> 01:12:09,099
author for a large number of assets will

1526
01:12:06,819 --> 01:12:10,929
probably be the same like an ax

1527
01:12:09,099 --> 01:12:13,449
has drawn all of the ones that are in

1528
01:12:10,929 --> 01:12:16,359
the directory currently so all of those

1529
01:12:13,448 --> 01:12:21,428
would have an a record as the author on

1530
01:12:16,359 --> 01:12:23,169
them right the source file name is going

1531
01:12:21,429 --> 01:12:25,689
to be the same for every sprite that

1532
01:12:23,168 --> 01:12:29,319
comes from the same sprite sheet so we

1533
01:12:25,689 --> 01:12:35,189
don't really have to write those strings

1534
01:12:29,319 --> 01:12:37,358
multiple times right but again

1535
01:12:35,189 --> 01:12:39,939
optimization that we don't necessarily

1536
01:12:37,359 --> 01:12:42,550
want to make yet because why complicate

1537
01:12:39,939 --> 01:12:44,469
our code when we don't actually need to

1538
01:12:42,550 --> 01:12:46,628
deal with it quite yet it'd be pretty

1539
01:12:44,469 --> 01:12:48,819
easy for us to just make something that

1540
01:12:46,628 --> 01:12:51,368
does a string compaction like we could

1541
01:12:48,819 --> 01:12:52,868
put that in HHA edit we can have an HHA

1542
01:12:51,368 --> 01:12:55,029
edit thing you run that does like an

1543
01:12:52,868 --> 01:12:56,708
optimization pass on the thing that

1544
01:12:55,029 --> 01:12:58,148
seems better to me because then we're

1545
01:12:56,708 --> 01:13:03,090
not worrying about if we've got like

1546
01:12:58,149 --> 01:13:03,090
squirrely little errors in here right so

1547
01:13:28,659 --> 01:13:32,260
so I'll put it to do in there we can't

1548
01:13:30,550 --> 01:13:34,029
choose to address it in the future if we

1549
01:13:32,260 --> 01:13:36,130
want to we don't necessarily have to

1550
01:13:34,029 --> 01:13:37,929
that's kind of up to us

1551
01:13:36,130 --> 01:13:40,090
so then what I'll do is I'll do a ripe

1552
01:13:37,930 --> 01:13:45,039
asset string call this directly mirrors

1553
01:13:40,090 --> 01:13:47,350
the one that we already did in HHA edit

1554
01:13:45,039 --> 01:13:49,000
right it's the same thing and what this

1555
01:13:47,350 --> 01:13:53,220
is going to do is this is just going to

1556
01:13:49,000 --> 01:14:01,000
let us write these out a little bit more

1557
01:13:53,220 --> 01:14:11,470
compactly I should do it this way we

1558
01:14:01,000 --> 01:14:13,779
write acid data so I'm going to say

1559
01:14:11,470 --> 01:14:20,710
write asset string and then I'm going to

1560
01:14:13,779 --> 01:14:24,340
give it the count and the offset those

1561
01:14:20,710 --> 01:14:27,600
are gonna go like that and then I just

1562
01:14:24,340 --> 01:14:29,890
need the information here we should have

1563
01:14:27,600 --> 01:14:32,140
access to that information but we don't

1564
01:14:29,890 --> 01:14:33,520
and so one things we're gonna need is

1565
01:14:32,140 --> 01:14:36,610
we're gonna need some additional

1566
01:14:33,520 --> 01:14:39,370
information we're gonna need a way to

1567
01:14:36,609 --> 01:14:41,739
get that additional information that we

1568
01:14:39,369 --> 01:14:43,210
don't have right now and so I'm gonna

1569
01:14:41,739 --> 01:14:49,119
just introduce a little thing that's

1570
01:14:43,210 --> 01:14:50,829
like you know import annotation I'm just

1571
01:14:49,119 --> 01:14:56,590
gonna introduce some strings here I'm

1572
01:14:50,829 --> 01:14:59,590
gonna say that we've got a asset name or

1573
01:14:56,590 --> 01:15:02,050
let's just say name description and

1574
01:14:59,590 --> 01:15:05,440
author I'm going to say that we've got

1575
01:15:02,050 --> 01:15:09,730
those that those will come in along with

1576
01:15:05,439 --> 01:15:12,309
the rest of the import tags so you know

1577
01:15:09,729 --> 01:15:15,129
we'll say this actually you know what

1578
01:15:12,310 --> 01:15:18,210
import grid tags could actually have

1579
01:15:15,130 --> 01:15:18,210
that on it

1580
01:15:24,140 --> 01:15:34,079
where did we define that how come my

1581
01:15:32,729 --> 01:15:36,899
search didn't work I must have typed it

1582
01:15:34,079 --> 01:15:46,470
wrong so with the import grid tags I'm

1583
01:15:36,899 --> 01:15:48,689
just gonna put it right there okay so

1584
01:15:46,470 --> 01:15:51,869
I'm gonna do that and I'm gonna come

1585
01:15:48,689 --> 01:15:53,429
back here and I'm gonna just do a little

1586
01:15:51,869 --> 01:15:54,479
bit I might clean up some string stuff

1587
01:15:53,430 --> 01:15:57,060
too while I'm at it

1588
01:15:54,479 --> 01:15:58,949
we'll see so what I want to do here is

1589
01:15:57,060 --> 01:16:01,170
say all right we know that the grid tags

1590
01:15:58,949 --> 01:16:03,689
have this information on it so I want to

1591
01:16:01,170 --> 01:16:06,600
write this asset string coming from the

1592
01:16:03,689 --> 01:16:12,419
grid tags that we have so here's that

1593
01:16:06,600 --> 01:16:15,650
grid tag array right the grid tag array

1594
01:16:12,420 --> 01:16:15,649
has a name

1595
01:16:22,719 --> 01:16:34,158
description just not the sender height

1596
01:16:29,469 --> 01:16:36,469
and author and so we've got these three

1597
01:16:34,158 --> 01:16:40,129
here and what I want to do now is just

1598
01:16:36,469 --> 01:16:49,210
match these up so we've got the name

1599
01:16:40,130 --> 01:16:57,849
count asset name count and this is asset

1600
01:16:49,210 --> 01:17:10,698
name offset oops I did that wrong

1601
01:16:57,849 --> 01:17:26,078
description and then finally we've got

1602
01:17:10,698 --> 01:17:26,078
the author it's just off account a size

1603
01:17:36,908 --> 01:17:43,929
and this was called annotation array

1604
01:17:43,960 --> 01:17:53,118
there we go good tags were a pointer and

1605
01:17:52,429 --> 01:17:56,690
off we go

1606
01:17:53,118 --> 01:17:59,238
so our final write asset string is a

1607
01:17:56,689 --> 01:18:02,859
little bit different this one is the

1608
01:17:59,238 --> 01:18:02,859
source base name right

1609
01:18:07,510 --> 01:18:29,289
what's that called again source file

1610
01:18:13,449 --> 01:18:30,489
base name counts so off we go we had a

1611
01:18:29,289 --> 01:18:32,560
lot of these we'd probably introduced a

1612
01:18:30,489 --> 01:18:34,269
file string class that somehow had to

1613
01:18:32,560 --> 01:18:36,550
deal with that not class bus truck

1614
01:18:34,270 --> 01:18:38,770
problem is you want them separated so

1615
01:18:36,550 --> 01:18:42,659
it's kind of hard to do it's a long

1616
01:18:38,770 --> 01:18:45,070
story anyway so when we deal with this

1617
01:18:42,659 --> 01:18:47,019
the only question we have now is where

1618
01:18:45,069 --> 01:18:49,239
is that going to come from and the

1619
01:18:47,020 --> 01:18:49,870
answers that comes from the file it's

1620
01:18:49,239 --> 01:18:51,670
right here

1621
01:18:49,869 --> 01:18:53,859
problem is base name is actually an

1622
01:18:51,670 --> 01:18:55,630
ASCII Z string we'd rather this not be

1623
01:18:53,859 --> 01:18:56,979
we'd rather just be a string so I'm just

1624
01:18:55,630 --> 01:18:57,880
gonna go ahead and make it a string and

1625
01:18:56,979 --> 01:18:59,500
we're gonna deal with the implications

1626
01:18:57,880 --> 01:19:00,850
of that later because I want everything

1627
01:18:59,500 --> 01:19:02,619
to be a string now since we introduced

1628
01:19:00,850 --> 01:19:04,060
that string type I would like everything

1629
01:19:02,619 --> 01:19:05,470
to be it cuz I like those better I like

1630
01:19:04,060 --> 01:19:07,960
counted strings better than asked easy

1631
01:19:05,470 --> 01:19:10,240
strings they're just easier to use

1632
01:19:07,960 --> 01:19:13,420
so anyway I'm gonna say bass name in

1633
01:19:10,239 --> 01:19:16,300
here and off we go so now we've got our

1634
01:19:13,420 --> 01:19:18,430
right asset string that will write out

1635
01:19:16,300 --> 01:19:22,300
all of the strings and so what we need

1636
01:19:18,430 --> 01:19:24,520
to do from for that is actually have one

1637
01:19:22,300 --> 01:19:32,110
of those and it's gonna mirror our right

1638
01:19:24,520 --> 01:19:35,170
asset data so right here it needs to

1639
01:19:32,109 --> 01:19:38,319
take the asset file - right - and then

1640
01:19:35,170 --> 01:19:43,149
it needs the source and then it just

1641
01:19:38,319 --> 01:19:44,319
needs to know hey you know what are we

1642
01:19:43,149 --> 01:19:47,619
gonna what are we getting actually right

1643
01:19:44,319 --> 01:19:49,389
into and what you can see here is we we

1644
01:19:47,619 --> 01:19:50,890
gonna have to call reserve data so we're

1645
01:19:49,390 --> 01:19:52,690
basically pushing the data out each

1646
01:19:50,890 --> 01:19:56,380
individual time here let me write this

1647
01:19:52,689 --> 01:19:59,289
out and you know we could actually see

1648
01:19:56,380 --> 01:20:01,690
whether it fits in the old location that

1649
01:19:59,289 --> 01:20:05,279
the annotation was I don't know that I'm

1650
01:20:01,689 --> 01:20:05,279
super motivated to do that

1651
01:20:09,140 --> 01:20:22,210
I really just don't know how I feel

1652
01:20:18,500 --> 01:20:22,210
about that let me show you what I mean

1653
01:20:25,180 --> 01:20:28,810
what I mean is this

1654
01:20:30,279 --> 01:20:37,069
if the source count is less than or

1655
01:20:34,130 --> 01:20:39,470
equal to the count this would not need

1656
01:20:37,069 --> 01:20:41,539
to be reserved right but if it's the

1657
01:20:39,470 --> 01:20:44,360
other way around it would be so if the

1658
01:20:41,539 --> 01:20:46,430
source count is greater than the count

1659
01:20:44,359 --> 01:20:47,779
that's currently there then the count

1660
01:20:46,430 --> 01:20:50,510
that's currently there needs to become

1661
01:20:47,779 --> 01:20:51,979
the source count and the offset that's

1662
01:20:50,510 --> 01:20:56,420
currently there needs to become a

1663
01:20:51,979 --> 01:20:58,819
reserved data right so the reserved data

1664
01:20:56,420 --> 01:21:04,039
this would need to take the assets the

1665
01:20:58,819 --> 01:21:07,609
game assets like so right and it would

1666
01:21:04,039 --> 01:21:11,029
need to reserve that much however much

1667
01:21:07,609 --> 01:21:13,789
that is right so the count would need to

1668
01:21:11,029 --> 01:21:15,920
get reserved but then when you're when

1669
01:21:13,789 --> 01:21:19,250
we're done then this just calls right

1670
01:21:15,920 --> 01:21:23,510
asset data and it just passes the file

1671
01:21:19,250 --> 01:21:25,729
and the source data that it's trying to

1672
01:21:23,510 --> 01:21:28,460
write and just says look right to this

1673
01:21:25,729 --> 01:21:34,159
location this amount and off you go

1674
01:21:28,460 --> 01:21:36,770
right another way to look at this would

1675
01:21:34,159 --> 01:21:38,389
actually be it's a little bit simpler to

1676
01:21:36,770 --> 01:21:40,640
preffer eight the code because I would

1677
01:21:38,390 --> 01:21:42,320
have to set the count since the count

1678
01:21:40,640 --> 01:21:44,090
has to get set in either case we could

1679
01:21:42,319 --> 01:21:45,649
just do this like look the counts always

1680
01:21:44,090 --> 01:21:48,110
gonna be set so the question is just

1681
01:21:45,649 --> 01:21:53,000
whether the offset is set and so we just

1682
01:21:48,109 --> 01:21:54,889
do it this way so meaning if the source

1683
01:21:53,000 --> 01:21:56,720
count doesn't fit in the space that was

1684
01:21:54,890 --> 01:22:00,170
already used for whatever the Sanitation

1685
01:21:56,720 --> 01:22:01,880
is then we reserved the data for the new

1686
01:22:00,170 --> 01:22:03,560
space and it goes there and then

1687
01:22:01,880 --> 01:22:05,329
regardless we're always going to change

1688
01:22:03,560 --> 01:22:10,120
the count to be whatever the new count

1689
01:22:05,329 --> 01:22:10,119
is and we're gonna write that out right

1690
01:22:12,460 --> 01:22:16,279
so it kind of looks more like that we

1691
01:22:14,750 --> 01:22:18,739
always write the count and then we

1692
01:22:16,279 --> 01:22:18,979
always write the data at the offset one

1693
01:22:18,739 --> 01:22:27,679
way

1694
01:22:18,979 --> 01:22:30,649
the other right um that seems okay you

1695
01:22:27,680 --> 01:22:33,950
know it seems it seems okay I guess it's

1696
01:22:30,649 --> 01:22:37,189
all I can really say this has to be au

1697
01:22:33,949 --> 01:22:38,510
32 in both cases but that's okay we know

1698
01:22:37,189 --> 01:22:41,000
we're not gonna have strings longer than

1699
01:22:38,510 --> 01:22:42,320
that because that would be ridiculous

1700
01:22:41,000 --> 01:22:51,409
you couldn't even display them on the

1701
01:22:42,319 --> 01:22:54,619
screen um I guess I so anyway that

1702
01:22:51,409 --> 01:22:57,949
writes out our data moving through here

1703
01:22:54,619 --> 01:23:02,899
we now have to deal with the changes

1704
01:22:57,949 --> 01:23:06,050
that we made for for the base name stuff

1705
01:23:02,899 --> 01:23:09,439
right we need a way to copy on the

1706
01:23:06,050 --> 01:23:12,500
regular kind of string there we can do

1707
01:23:09,439 --> 01:23:13,250
that pretty easily let me take a look

1708
01:23:12,500 --> 01:23:23,149
what else we got

1709
01:23:13,250 --> 01:23:24,649
so this has to take assets now and so

1710
01:23:23,149 --> 01:23:29,109
really we're just down to the checksum

1711
01:23:24,649 --> 01:23:34,000
and being able to push that string on to

1712
01:23:29,109 --> 01:23:36,139
the stack there when we're actually I

1713
01:23:34,000 --> 01:23:38,210
guess that strings R equals to that yeah

1714
01:23:36,140 --> 01:23:40,220
that all just works so what we need to

1715
01:23:38,210 --> 01:23:44,750
do is we need to have a thing in our

1716
01:23:40,220 --> 01:23:47,989
memory we've got the push string call

1717
01:23:44,750 --> 01:23:52,100
here and what we want to do is probably

1718
01:23:47,988 --> 01:23:53,659
have a in line I don't know why we

1719
01:23:52,100 --> 01:23:56,780
bother ever typing in line that Patrick

1720
01:23:53,659 --> 01:24:02,210
Fowler doesn't care so if I do marina

1721
01:23:56,779 --> 01:24:05,679
arena and I do something that's that's

1722
01:24:02,210 --> 01:24:12,550
like here's the length there's a source

1723
01:24:05,680 --> 01:24:12,550
what I can do is just make this thing

1724
01:24:15,868 --> 01:24:24,368
Jonica how it is that's kind of more of

1725
01:24:22,149 --> 01:24:42,029
a push string Z what I might do is just

1726
01:24:24,368 --> 01:24:45,728
say like that you know and and then

1727
01:24:42,029 --> 01:24:49,988
regular push string is what I want to

1728
01:24:45,729 --> 01:24:55,030
actually move to that'll do the other

1729
01:24:49,988 --> 01:25:00,638
kind of push so if we do push string

1730
01:24:55,029 --> 01:25:03,939
memory rina rina power source then what

1731
01:25:00,639 --> 01:25:08,109
it'll do is basically the same thing

1732
01:25:03,939 --> 01:25:11,018
here where it takes the string length I

1733
01:25:08,109 --> 01:25:18,788
don't know why we don't just use string

1734
01:25:11,019 --> 01:25:23,050
length here but then we push the size on

1735
01:25:18,788 --> 01:25:26,439
there and we and copy right and and do

1736
01:25:23,050 --> 01:25:29,288
we have a push copy we do so a push push

1737
01:25:26,439 --> 01:25:33,219
copy in this case would actually be what

1738
01:25:29,288 --> 01:25:36,998
we want so really we can make this much

1739
01:25:33,219 --> 01:25:39,849
more simplified than than even that

1740
01:25:36,998 --> 01:25:42,969
right what we can do is say this is just

1741
01:25:39,849 --> 01:25:46,090
push string is just a pretty basic we

1742
01:25:42,969 --> 01:25:48,489
just say look here's the result the

1743
01:25:46,090 --> 01:25:50,529
result count is however long that thing

1744
01:25:48,488 --> 01:25:52,828
was the result data is just the push

1745
01:25:50,529 --> 01:25:52,828
copy

1746
01:26:02,210 --> 01:26:08,670
right I mean that's that's all there is

1747
01:26:05,189 --> 01:26:11,039
to it it's it's pretty basic so

1748
01:26:08,670 --> 01:26:12,600
returning a string here is maybe a

1749
01:26:11,039 --> 01:26:19,380
little harder because it doesn't look

1750
01:26:12,600 --> 01:26:21,560
like it knows what a buffer is so I

1751
01:26:19,380 --> 01:26:25,369
guess that needs to be defined earlier

1752
01:26:21,560 --> 01:26:25,370
potentially which is fine with me

1753
01:26:27,800 --> 01:26:37,230
copy is something that's probably in

1754
01:26:32,250 --> 01:26:38,909
here I don't know where we put copy that

1755
01:26:37,229 --> 01:26:44,939
should be in memory anyway I'm not sure

1756
01:26:38,909 --> 01:26:48,149
why it's not oh it's just too fine to

1757
01:26:44,939 --> 01:26:49,979
lower down right um so copy should

1758
01:26:48,149 --> 01:26:52,109
really be up at the top because anybody

1759
01:26:49,979 --> 01:26:54,509
who's doing memory pushes might need to

1760
01:26:52,109 --> 01:26:58,949
use that so that should actually be up

1761
01:26:54,510 --> 01:27:03,510
here and then I think we're good so

1762
01:26:58,949 --> 01:27:04,679
there we go so now we're just down to

1763
01:27:03,510 --> 01:27:06,090
checksum I don't know how much time I

1764
01:27:04,680 --> 01:27:10,289
got left I guess I got about 10 minutes

1765
01:27:06,090 --> 01:27:11,640
left so the last thing we want would

1766
01:27:10,289 --> 01:27:14,729
want to implement here is to check

1767
01:27:11,640 --> 01:27:17,430
something and you know we've we've read

1768
01:27:14,729 --> 01:27:19,829
the data in so you can see we've already

1769
01:27:17,430 --> 01:27:21,440
got a file buffer so really what we

1770
01:27:19,829 --> 01:27:25,470
won't want to do here is say like

1771
01:27:21,439 --> 01:27:28,229
checksum of and pass this file buffer in

1772
01:27:25,470 --> 01:27:33,110
and so what we want to do is have some

1773
01:27:28,229 --> 01:27:37,439
way of asking when we have a file

1774
01:27:33,109 --> 01:27:39,269
you know what's the checksum and that

1775
01:27:37,439 --> 01:27:42,119
can be a shared call that can be

1776
01:27:39,270 --> 01:27:44,790
something that goes in here where we say

1777
01:27:42,119 --> 01:27:47,640
you know give me back the 64-bit

1778
01:27:44,789 --> 01:27:49,619
checksum of whatever this thing is

1779
01:27:47,640 --> 01:27:51,030
and we just need some way of producing

1780
01:27:49,619 --> 01:27:54,779
this actual checksum

1781
01:27:51,029 --> 01:27:58,079
what is it checksum well a checksum is a

1782
01:27:54,779 --> 01:28:00,899
number that's basically it's you've seen

1783
01:27:58,079 --> 01:28:03,930
us do stuff with exactly this it's

1784
01:28:00,899 --> 01:28:06,689
basically a hash value right they serve

1785
01:28:03,930 --> 01:28:09,180
exactly the same purpose it's just they

1786
01:28:06,689 --> 01:28:10,319
have slightly different criteria for

1787
01:28:09,180 --> 01:28:15,060
which they might

1788
01:28:10,319 --> 01:28:17,729
to be judged right so in both cases in a

1789
01:28:15,060 --> 01:28:19,320
hash value in a checksum or another name

1790
01:28:17,729 --> 01:28:23,039
for a checksum in a lot cases the hash

1791
01:28:19,319 --> 01:28:26,908
value in the cryptographic sense right

1792
01:28:23,039 --> 01:28:28,380
so cryptographic hash there's a lot of

1793
01:28:26,908 --> 01:28:30,779
names for things that are basically very

1794
01:28:28,380 --> 01:28:32,039
similar in all of these cases we're

1795
01:28:30,779 --> 01:28:34,920
talking about roughly the same thing

1796
01:28:32,039 --> 01:28:38,069
we're talking about taking a very large

1797
01:28:34,920 --> 01:28:40,679
amount of data an entire files worth of

1798
01:28:38,069 --> 01:28:43,408
data in this case but in a hash entire

1799
01:28:40,679 --> 01:28:47,190
string or a bitmap or whatever we have a

1800
01:28:43,408 --> 01:28:50,129
very large several K several megabytes

1801
01:28:47,189 --> 01:28:52,618
several gigabytes even of data and what

1802
01:28:50,130 --> 01:28:55,880
we want to do is we want to reduce that

1803
01:28:52,618 --> 01:28:59,549
data down to an incredibly tiny size

1804
01:28:55,880 --> 01:29:02,310
compared to its original why do we want

1805
01:28:59,550 --> 01:29:03,900
to do this not to use it because we

1806
01:29:02,310 --> 01:29:06,360
can't write it's not it's not

1807
01:29:03,899 --> 01:29:07,738
compression we can't get the original

1808
01:29:06,359 --> 01:29:09,630
back so we're not trying to make a

1809
01:29:07,738 --> 01:29:11,729
smaller version that we can then expand

1810
01:29:09,630 --> 01:29:14,210
original version no we're just trying to

1811
01:29:11,729 --> 01:29:17,279
come up with a number that in some way

1812
01:29:14,210 --> 01:29:18,289
identifies this larger piece of data why

1813
01:29:17,279 --> 01:29:21,840
do we want to do that

1814
01:29:18,289 --> 01:29:24,630
well the reason is because in the hash

1815
01:29:21,840 --> 01:29:28,469
case we want to try and use that data to

1816
01:29:24,630 --> 01:29:30,989
put it into a slot that can identify it

1817
01:29:28,469 --> 01:29:33,510
more uniquely so we don't just search a

1818
01:29:30,988 --> 01:29:36,029
hole linked list full of things to find

1819
01:29:33,510 --> 01:29:38,969
it right we're trying to segregate out a

1820
01:29:36,029 --> 01:29:42,118
set into different things by using this

1821
01:29:38,969 --> 01:29:43,980
sort of ID value right so in in that

1822
01:29:42,118 --> 01:29:46,019
case what a hash is trying to do is

1823
01:29:43,979 --> 01:29:48,750
create a value that's likely to be

1824
01:29:46,020 --> 01:29:56,190
distinct from the other things we will

1825
01:29:48,750 --> 01:29:58,260
also put in the hash right in the file

1826
01:29:56,189 --> 01:30:03,089
case it's a little different it's

1827
01:29:58,260 --> 01:30:05,429
similar but not exact in the hash table

1828
01:30:03,090 --> 01:30:08,190
sense what we wanted is we have many

1829
01:30:05,429 --> 01:30:10,908
disparate things there totally different

1830
01:30:08,189 --> 01:30:14,609
right a set of strings that are not

1831
01:30:10,908 --> 01:30:18,170
coming from the same place one is KC the

1832
01:30:14,609 --> 01:30:21,389
other is Carl or Lemongrab right and

1833
01:30:18,170 --> 01:30:23,890
what we want to do is file these into

1834
01:30:21,389 --> 01:30:26,560
nicely segregated buckets if we

1835
01:30:23,890 --> 01:30:29,410
have 10,000 strings and a thousand

1836
01:30:26,560 --> 01:30:31,810
buckets what we want ideally is for ten

1837
01:30:29,409 --> 01:30:35,829
strings to go in each bucket we want two

1838
01:30:31,810 --> 01:30:37,180
perfectly distributed by our hash

1839
01:30:35,829 --> 01:30:39,489
buckets right so that's we're trying to

1840
01:30:37,180 --> 01:30:41,230
but they're disparate things totally

1841
01:30:39,489 --> 01:30:43,510
different Casey and Lemongrab are

1842
01:30:41,229 --> 01:30:47,229
totally different strings for our

1843
01:30:43,510 --> 01:30:49,360
checksumming not so checksumming is for

1844
01:30:47,229 --> 01:30:51,549
a different purpose it's to try to take

1845
01:30:49,359 --> 01:30:53,079
two things that are probably very

1846
01:30:51,550 --> 01:30:55,840
similar that have only had slight

1847
01:30:53,079 --> 01:30:58,449
changes made to them and determine

1848
01:30:55,840 --> 01:31:00,909
whether there's any difference so what

1849
01:30:58,449 --> 01:31:04,029
it's trying to do is it's more trying to

1850
01:31:00,909 --> 01:31:08,260
pick up subtle differences so if I said

1851
01:31:04,029 --> 01:31:12,369
Lemongrab and lemongrass I want those

1852
01:31:08,260 --> 01:31:15,489
two to hash to something distinct much

1853
01:31:12,369 --> 01:31:17,619
more so than I would ever care if KC and

1854
01:31:15,489 --> 01:31:21,880
Lemongrab hash two different things

1855
01:31:17,619 --> 01:31:24,909
why because I'm expecting my art files

1856
01:31:21,880 --> 01:31:26,470
to have small changes made to them I'm

1857
01:31:24,909 --> 01:31:30,189
expecting artists to make small changes

1858
01:31:26,470 --> 01:31:32,619
and then re-save them I'm not expecting

1859
01:31:30,189 --> 01:31:34,329
to be completely different every time so

1860
01:31:32,619 --> 01:31:38,170
I would almost rather something that

1861
01:31:34,329 --> 01:31:42,100
doesn't quite have the same usage as a

1862
01:31:38,170 --> 01:31:43,230
hash in the in the hash table sense it's

1863
01:31:42,100 --> 01:31:46,000
not the same thing

1864
01:31:43,229 --> 01:31:47,889
often times good functions can do both

1865
01:31:46,000 --> 01:31:50,170
they're not completely different

1866
01:31:47,890 --> 01:31:53,260
problems they're very similar so it's

1867
01:31:50,170 --> 01:31:55,449
not a super disparate thing but the the

1868
01:31:53,260 --> 01:31:58,119
end goal is not quite the same I guess

1869
01:31:55,449 --> 01:32:01,119
it's all I'm trying to point out all

1870
01:31:58,119 --> 01:32:04,289
right um so what would this look like

1871
01:32:01,119 --> 01:32:04,289
well first of all

1872
01:32:13,550 --> 01:32:22,890
we literally could do this right we

1873
01:32:20,939 --> 01:32:25,559
literally could do this if we wanted to

1874
01:32:22,890 --> 01:32:30,600
store the checksum we could literally

1875
01:32:25,560 --> 01:32:34,470
say look let's let's just straight-up

1876
01:32:30,600 --> 01:32:38,010
store the the let's straight-up just

1877
01:32:34,470 --> 01:32:39,659
reduce our string hash it would work but

1878
01:32:38,010 --> 01:32:41,489
I think we would probably want something

1879
01:32:39,659 --> 01:32:44,039
better we would probably want to look at

1880
01:32:41,489 --> 01:32:46,829
some cryptographic hashes they're more

1881
01:32:44,039 --> 01:32:48,810
sensitive to trying to make small bit

1882
01:32:46,829 --> 01:32:52,199
changes guarantee that they produce

1883
01:32:48,810 --> 01:32:53,789
different hash values and so that would

1884
01:32:52,199 --> 01:32:55,349
be more probably what we would want

1885
01:32:53,789 --> 01:32:59,939
something that's more about preventing

1886
01:32:55,350 --> 01:33:03,510
small changes here's the thing

1887
01:32:59,939 --> 01:33:09,000
I put the Hat this the hash stuff in as

1888
01:33:03,510 --> 01:33:10,890
sort of a just in case we want it my

1889
01:33:09,000 --> 01:33:16,159
question that I have is do we really

1890
01:33:10,890 --> 01:33:16,160
want it what's it gonna do for us right

1891
01:33:16,970 --> 01:33:20,789
because I don't know that it's really

1892
01:33:19,380 --> 01:33:26,670
gonna do anything for us

1893
01:33:20,789 --> 01:33:28,769
right if two hash values matched how

1894
01:33:26,670 --> 01:33:30,480
would that help us we still don't really

1895
01:33:28,770 --> 01:33:35,730
know it could have been a hash collision

1896
01:33:30,479 --> 01:33:37,379
right so I don't really know it seems

1897
01:33:35,729 --> 01:33:40,500
more like you would want to match the

1898
01:33:37,380 --> 01:33:42,569
asset data and see if the asset data

1899
01:33:40,500 --> 01:33:44,880
changed I don't know so we can use a

1900
01:33:42,569 --> 01:33:47,819
string - I mean we can use the checksum

1901
01:33:44,880 --> 01:33:49,739
or we could not I'm not sure how much we

1902
01:33:47,819 --> 01:33:53,069
care about that but this is where we

1903
01:33:49,739 --> 01:33:55,579
would do it right let's just finish that

1904
01:33:53,069 --> 01:33:55,579
up here

1905
01:34:01,420 --> 01:34:17,960
where is our share - there we go so what

1906
01:34:16,279 --> 01:34:40,399
I would do here is say okay you know

1907
01:34:17,960 --> 01:34:42,289
here's our string and that would give us

1908
01:34:40,399 --> 01:34:43,729
a checksum right it's not a good check

1909
01:34:42,289 --> 01:34:47,479
sign with something 1 we would want but

1910
01:34:43,729 --> 01:34:49,750
it is actually checksum okay and again

1911
01:34:47,479 --> 01:34:53,509
the reason for that is just because look

1912
01:34:49,750 --> 01:34:56,510
anything you do that mixes all the

1913
01:34:53,510 --> 01:34:59,030
values together somehow is a checksum

1914
01:34:56,510 --> 01:35:00,050
right if you change some of the values

1915
01:34:59,029 --> 01:35:02,840
it might change

1916
01:35:00,050 --> 01:35:06,260
there's better and worse versions of it

1917
01:35:02,840 --> 01:35:08,539
and we could look at using them for

1918
01:35:06,260 --> 01:35:10,640
example you know a common one in this

1919
01:35:08,539 --> 01:35:12,920
case might be what's called the bleh

1920
01:35:10,640 --> 01:35:14,329
cache oops not black hash play cache

1921
01:35:12,920 --> 01:35:16,520
it's probably also something called a

1922
01:35:14,329 --> 01:35:21,140
black hash there's red and black trees

1923
01:35:16,520 --> 01:35:22,670
for example the play cache is an example

1924
01:35:21,140 --> 01:35:24,860
of a hash you might use for something

1925
01:35:22,670 --> 01:35:28,970
like this and they oftentimes they'll

1926
01:35:24,859 --> 01:35:30,949
produce bigger bigger hash vectors as

1927
01:35:28,970 --> 01:35:37,640
well so in this case you can see this

1928
01:35:30,949 --> 01:35:39,050
one is what like 512 or 256 right so if

1929
01:35:37,640 --> 01:35:41,990
you wanted to we could support bigger

1930
01:35:39,050 --> 01:35:44,510
hashes and that gives us more resilience

1931
01:35:41,989 --> 01:35:46,460
the more the bigger the hash value the

1932
01:35:44,510 --> 01:35:52,610
more of the data you're sort of checking

1933
01:35:46,460 --> 01:35:55,270
right the the wider the less likely you

1934
01:35:52,609 --> 01:35:57,920
are to be able to have a collision right

1935
01:35:55,270 --> 01:35:59,750
but any good hash value you can always

1936
01:35:57,920 --> 01:36:01,039
truncate so you can also just take the

1937
01:35:59,750 --> 01:36:04,789
first two from it and there's your

1938
01:36:01,039 --> 01:36:07,010
64-bit hash so you can always yeah you

1939
01:36:04,789 --> 01:36:09,470
can always do sort of sub subgrade

1940
01:36:07,010 --> 01:36:11,869
hashes if you want so we could do a

1941
01:36:09,470 --> 01:36:14,560
blake hash there's also obviously the

1942
01:36:11,869 --> 01:36:14,559
ones that are

1943
01:36:17,000 --> 01:36:22,439
sort of the government approved versions

1944
01:36:20,099 --> 01:36:25,500
right which is sha

1945
01:36:22,439 --> 01:36:30,299
I think sha is not probably as good for

1946
01:36:25,500 --> 01:36:33,458
our purposes - I believe sha is more

1947
01:36:30,300 --> 01:36:33,458
[Music]

1948
01:36:39,368 --> 01:36:46,148
you know I can't remember now I think

1949
01:36:42,550 --> 01:36:47,559
about it I'm not gonna say that because

1950
01:36:46,149 --> 01:36:48,969
I don't really remember I haven't looked

1951
01:36:47,559 --> 01:36:51,760
at Blake very carefully so I'm not gonna

1952
01:36:48,969 --> 01:36:53,109
make that statement um there's a lot of

1953
01:36:51,760 --> 01:36:55,599
hash values out there we could also use

1954
01:36:53,109 --> 01:36:58,389
something more like a murmur hash which

1955
01:36:55,599 --> 01:37:01,569
is a faster hash so that it doesn't take

1956
01:36:58,389 --> 01:37:04,659
as long to import things and and check

1957
01:37:01,569 --> 01:37:06,789
the hash on them so you do a lot of

1958
01:37:04,658 --> 01:37:08,918
things we'll pick that up tomorrow and

1959
01:37:06,788 --> 01:37:11,318
see what we want to do for now we have a

1960
01:37:08,918 --> 01:37:14,618
crappy hash value in there and what I

1961
01:37:11,319 --> 01:37:17,019
could do here is just make put that make

1962
01:37:14,618 --> 01:37:29,018
sure we put that to do in there where is

1963
01:37:17,019 --> 01:37:32,918
our sure but I think that's basically it

1964
01:37:29,019 --> 01:37:34,869
and I'll guess I'll run this but it

1965
01:37:32,918 --> 01:37:36,099
shouldn't do hopefully we should still

1966
01:37:34,868 --> 01:37:37,719
run just fine because again it's not

1967
01:37:36,099 --> 01:37:39,969
importing anything right now we didn't

1968
01:37:37,719 --> 01:37:41,408
make a local file for importing so we

1969
01:37:39,969 --> 01:37:43,628
should be good to go I'll go ahead and

1970
01:37:41,408 --> 01:37:45,998
go to the Q&amp;A now but I think we've got

1971
01:37:43,628 --> 01:37:49,029
most of the stuff into position that we

1972
01:37:45,998 --> 01:37:50,588
needed all I think we redid all of the

1973
01:37:49,029 --> 01:37:52,358
import export stuff so tomorrow it's

1974
01:37:50,588 --> 01:37:54,038
basically just we should probably put in

1975
01:37:52,359 --> 01:37:56,349
a better hash function if we're gonna

1976
01:37:54,038 --> 01:37:57,998
use one at all put in a better hash

1977
01:37:56,349 --> 01:38:00,538
function there maybe make a little more

1978
01:37:57,998 --> 01:38:04,358
space for it look maybe we want a 512

1979
01:38:00,538 --> 01:38:06,368
size hash I don't know but we can put in

1980
01:38:04,359 --> 01:38:12,999
a better hash if we want to and then we

1981
01:38:06,368 --> 01:38:17,518
can we can start the debugging process

1982
01:38:12,998 --> 01:38:17,519
on that on the all the stuff we did

1983
01:38:33,350 --> 01:38:36,440
a blonde orphan how often are assets

1984
01:38:35,630 --> 01:38:38,449
updated what are the performance

1985
01:38:36,439 --> 01:38:43,210
characteristics you're aiming at so

1986
01:38:38,449 --> 01:38:48,229
mostly I guess what I would say is the

1987
01:38:43,210 --> 01:38:52,489
assets are loaded by the artist and so

1988
01:38:48,229 --> 01:38:54,169
you don't want anything to slow that

1989
01:38:52,489 --> 01:38:56,989
will uh know it like you don't want the

1990
01:38:54,170 --> 01:39:02,659
artist sitting around waiting so if you

1991
01:38:56,989 --> 01:39:07,519
have a problem with if you've got

1992
01:39:02,659 --> 01:39:11,389
something a bit so slow that you don't

1993
01:39:07,520 --> 01:39:16,910
actually that you're actually costing

1994
01:39:11,390 --> 01:39:19,220
the artist time then you know you you've

1995
01:39:16,909 --> 01:39:21,829
you've got issues so you don't want to

1996
01:39:19,220 --> 01:39:25,400
do anything obviously stupid but beyond

1997
01:39:21,829 --> 01:39:27,590
that we don't care we don't need this

1998
01:39:25,399 --> 01:39:30,019
thing to to do anything high throughput

1999
01:39:27,590 --> 01:39:32,659
assets will only be updated one sprite

2000
01:39:30,020 --> 01:39:35,390
sheet at a time particularly so

2001
01:39:32,659 --> 01:39:38,449
basically an artist saves a sprite sheet

2002
01:39:35,390 --> 01:39:41,810
we load the sprite sheet we want that to

2003
01:39:38,449 --> 01:39:43,399
run in a couple seconds right we we

2004
01:39:41,810 --> 01:39:45,260
don't want that to be like basically

2005
01:39:43,399 --> 01:39:47,449
think of it as a build when we run a

2006
01:39:45,260 --> 01:39:49,760
build if it takes two three seconds for

2007
01:39:47,449 --> 01:39:53,599
us that's we don't care right that's

2008
01:39:49,760 --> 01:39:57,470
fine if it takes ten seconds if we take

2009
01:39:53,600 --> 01:40:00,289
30 seconds really bad right and if it

2010
01:39:57,470 --> 01:40:04,369
takes like minutes that's awful so we

2011
01:40:00,289 --> 01:40:06,800
don't care if we're one second or three

2012
01:40:04,369 --> 01:40:08,630
seconds or half a second those are all

2013
01:40:06,800 --> 01:40:12,800
probably equivalent to the artist in

2014
01:40:08,630 --> 01:40:17,840
terms of time if we're ten seconds or

2015
01:40:12,800 --> 01:40:24,260
over not great not not great so I would

2016
01:40:17,840 --> 01:40:26,900
consider that an issue if our import

2017
01:40:24,260 --> 01:40:30,260
took longer than a few seconds per

2018
01:40:26,899 --> 01:40:32,119
sprite sheet I would I I think we need

2019
01:40:30,260 --> 01:40:33,770
to fix we would need to optimize that

2020
01:40:32,119 --> 01:40:38,930
because that's not an acceptable

2021
01:40:33,770 --> 01:40:40,340
turnaround time for the artist would you

2022
01:40:38,930 --> 01:40:41,810
suggest any resources that cover modern

2023
01:40:40,340 --> 01:40:43,029
cirrhosis memory management very well I

2024
01:40:41,810 --> 01:40:46,100
tend to over his unique pointer

2025
01:40:43,029 --> 01:40:47,069
basically C++ memory management modern

2026
01:40:46,100 --> 01:40:50,280
zo scenario management

2027
01:40:47,069 --> 01:40:51,420
awful don't ever do it if you're trying

2028
01:40:50,279 --> 01:40:52,409
to learn it because you're working at it

2029
01:40:51,420 --> 01:40:55,079
at a job

2030
01:40:52,409 --> 01:40:57,029
hopefully they just sort of have their

2031
01:40:55,079 --> 01:40:58,829
own policy about what they're doing and

2032
01:40:57,029 --> 01:41:01,019
just follow that policy because you have

2033
01:40:58,829 --> 01:41:01,559
to but modern C++ menu management is

2034
01:41:01,020 --> 01:41:03,660
awful

2035
01:41:01,560 --> 01:41:04,860
don't ever do any of it it's all by

2036
01:41:03,659 --> 01:41:07,250
people who don't understand memory

2037
01:41:04,859 --> 01:41:10,019
management full stop

2038
01:41:07,250 --> 01:41:12,180
it's modern C++ money management is

2039
01:41:10,020 --> 01:41:13,710
worse than garbage collection if you

2040
01:41:12,180 --> 01:41:15,920
have a choice between C++ memory

2041
01:41:13,710 --> 01:41:17,850
management and like c-sharp c-sharp

2042
01:41:15,920 --> 01:41:19,590
probably smarter it's probably better

2043
01:41:17,850 --> 01:41:21,510
probably better performance - honestly

2044
01:41:19,590 --> 01:41:23,400
in most cases modern CMOS memory

2045
01:41:21,510 --> 01:41:28,860
management is is terrible it's it's

2046
01:41:23,399 --> 01:41:32,429
really really really bad it's it's

2047
01:41:28,859 --> 01:41:33,989
extremely bad you already have an adler

2048
01:41:32,430 --> 01:41:35,700
3-2 function written out in the PM g

2049
01:41:33,989 --> 01:41:46,289
partner why not hit parser you why is

2050
01:41:35,699 --> 01:41:48,920
that did we do that where did we do I

2051
01:41:46,289 --> 01:41:52,279
don't remember us implementing that

2052
01:41:48,920 --> 01:41:52,279
where is that

2053
01:41:57,500 --> 01:42:11,029
I don't I don't remember doing that well

2054
01:42:09,319 --> 01:42:16,069
GJ Nate where do you think we

2055
01:42:11,029 --> 01:42:17,539
implemented Adler 32 I you know I only

2056
01:42:16,069 --> 01:42:19,909
work on this on the weekends I may well

2057
01:42:17,539 --> 01:42:22,159
have forgotten but if I wanted to run

2058
01:42:19,909 --> 01:42:24,470
the game locally is the steps I need to

2059
01:42:22,159 --> 01:42:26,779
run the test asset build first and then

2060
01:42:24,470 --> 01:42:30,430
we could run the HJ edit to update to v1

2061
01:42:26,779 --> 01:42:30,429
if we wanted yes

2062
01:42:33,640 --> 01:42:37,970
looking at struct HHA annotation could

2063
01:42:36,350 --> 01:42:39,380
we append the authors of assets into the

2064
01:42:37,970 --> 01:42:46,699
credits for the assets in the current

2065
01:42:39,380 --> 01:42:49,640
rent of the game you could yes Martin

2066
01:42:46,699 --> 01:42:54,800
says pre stream off-topic GLS whistling

2067
01:42:49,640 --> 01:42:57,470
with GL texture Swizzle RGBA rgba works

2068
01:42:54,800 --> 01:43:00,110
fine with GL v 3 + 3 3 point 3 higher

2069
01:42:57,470 --> 01:43:02,060
even for core profile before 3 3 it

2070
01:43:00,109 --> 01:43:04,460
works only if the extension is present

2071
01:43:02,060 --> 01:43:10,970
so you get whatever channel into any

2072
01:43:04,460 --> 01:43:12,380
channel you want really is this another

2073
01:43:10,970 --> 01:43:13,850
one of those things Martin's although

2074
01:43:12,380 --> 01:43:21,109
where you have a magic computer where

2075
01:43:13,850 --> 01:43:25,250
this works and I don't that's what

2076
01:43:21,109 --> 01:43:27,769
happened with with I control ports I'm

2077
01:43:25,250 --> 01:43:33,319
sorry ok I owe completion ports when we

2078
01:43:27,770 --> 01:43:35,540
were doing IOC fees I didn't really test

2079
01:43:33,319 --> 01:43:38,119
that maybe a third thoroughly though so

2080
01:43:35,539 --> 01:43:40,819
that may be true that's good to know if

2081
01:43:38,119 --> 01:43:46,069
GL texture special RGBA works fine with

2082
01:43:40,819 --> 01:43:47,509
3/3 higher that's probably fine for a

2083
01:43:46,069 --> 01:43:49,279
lot of purposes for our purposes that

2084
01:43:47,510 --> 01:43:54,470
probably fine and hamate here I think we

2085
01:43:49,279 --> 01:43:58,579
require three three or so but that's

2086
01:43:54,470 --> 01:44:00,619
good to know if that's actually true nor

2087
01:43:58,579 --> 01:44:02,210
declare I do not have any thoughts on

2088
01:44:00,619 --> 01:44:04,420
the rest programming language I don't

2089
01:44:02,210 --> 01:44:04,420
use it

2090
01:44:06,418 --> 01:44:16,738
I thought you added it along with the

2091
01:44:09,658 --> 01:44:18,988
Huffman compression I don't think so

2092
01:44:16,738 --> 01:44:25,859
what I mean if you can find it let me

2093
01:44:18,988 --> 01:44:27,779
know what would we have been doing what

2094
01:44:25,859 --> 01:44:31,398
would it have been doing for us that we

2095
01:44:27,779 --> 01:44:31,398
would have needed to implement it

2096
01:44:44,658 --> 01:44:49,679
Martin's says it's in the core spec okay

2097
01:44:47,969 --> 01:44:51,569
well that's good I mean that's good that

2098
01:44:49,679 --> 01:44:55,289
they have that because I I kind of

2099
01:44:51,569 --> 01:44:57,090
missed it it was really nice when they

2100
01:44:55,289 --> 01:44:59,460
used to have it I may have just been

2101
01:44:57,090 --> 01:45:01,050
using OpenGL 3 and didn't have the

2102
01:44:59,460 --> 01:45:02,310
extension or something in a weird case

2103
01:45:01,050 --> 01:45:04,289
and so I thought they'd removed it

2104
01:45:02,310 --> 01:45:07,620
permanently but it's good to know that

2105
01:45:04,289 --> 01:45:12,479
it's back because I seems pretty useful

2106
01:45:07,619 --> 01:45:14,519
right which would be a 7 it C++ memory

2107
01:45:12,479 --> 01:45:17,669
management bad for games or just bad

2108
01:45:14,520 --> 01:45:19,230
just bad if the latter what's a general

2109
01:45:17,670 --> 01:45:23,340
what's a good general purpose memory

2110
01:45:19,229 --> 01:45:28,439
management strategy for C++ um so in my

2111
01:45:23,340 --> 01:45:32,639
opinion there's really only two sort of

2112
01:45:28,439 --> 01:45:35,039
memory cases right there are things that

2113
01:45:32,639 --> 01:45:38,579
behave like stacks and things that

2114
01:45:35,039 --> 01:45:40,229
behave in random fashions and everything

2115
01:45:38,579 --> 01:45:42,779
that can behave like a stack should be

2116
01:45:40,229 --> 01:45:45,658
made to in my opinion which meet which

2117
01:45:42,779 --> 01:45:47,729
is 90% of all allocations should be done

2118
01:45:45,658 --> 01:45:50,670
that way and you should be doing them

2119
01:45:47,729 --> 01:45:53,638
that way with arenas basically the other

2120
01:45:50,670 --> 01:45:57,658
10% should be done probably with free

2121
01:45:53,639 --> 01:45:59,699
list management so that's what I would

2122
01:45:57,658 --> 01:46:01,948
do and see those plus I would not use

2123
01:45:59,698 --> 01:46:03,689
any of that unique pointer shared

2124
01:46:01,948 --> 01:46:07,049
pointer nonsense those are just garbage

2125
01:46:03,689 --> 01:46:09,539
ra íí- and all that stuff is complete is

2126
01:46:07,050 --> 01:46:11,159
only for toy programming it's like when

2127
01:46:09,539 --> 01:46:12,479
people use that stuff they really don't

2128
01:46:11,158 --> 01:46:13,619
know what they're doing sorry and I'm

2129
01:46:12,479 --> 01:46:14,908
stepping on a lot of people's toes out

2130
01:46:13,619 --> 01:46:16,439
there who are experienced programmers

2131
01:46:14,908 --> 01:46:18,029
who say that these are smart things to

2132
01:46:16,439 --> 01:46:22,198
do they're wrong I mean they just are

2133
01:46:18,029 --> 01:46:24,119
you spend a ton of time your C++ code

2134
01:46:22,198 --> 01:46:28,259
just does tons of work that it doesn't

2135
01:46:24,119 --> 01:46:30,329
need to do you know so on handmade hero

2136
01:46:28,260 --> 01:46:33,000
we don't quite go full pull like a

2137
01:46:30,329 --> 01:46:36,210
handmade hero we are not quite as good

2138
01:46:33,000 --> 01:46:38,729
as we should be we use arenas so we get

2139
01:46:36,210 --> 01:46:41,429
a lot of wind out of that but we don't

2140
01:46:38,729 --> 01:46:43,138
really implement much more on top of

2141
01:46:41,429 --> 01:46:46,230
that for the more general purpose kinds

2142
01:46:43,139 --> 01:46:48,900
of stuff right so we you know we only

2143
01:46:46,229 --> 01:46:50,428
can go to we can only do certain things

2144
01:46:48,899 --> 01:46:55,738
on handmade hero right it's it's a

2145
01:46:50,429 --> 01:46:57,590
limited scope thing and there's only so

2146
01:46:55,738 --> 01:46:59,479
much we can do but

2147
01:46:57,590 --> 01:47:01,640
the stuff we do with arenas on handmade

2148
01:46:59,479 --> 01:47:03,319
hero is kind of similar to what I think

2149
01:47:01,640 --> 01:47:07,070
most memory management should look like

2150
01:47:03,319 --> 01:47:09,199
in most things most of the time because

2151
01:47:07,069 --> 01:47:11,090
most of the time what you want to do is

2152
01:47:09,199 --> 01:47:13,399
you want to be working in temporary

2153
01:47:11,090 --> 01:47:16,069
stacks most things can be implemented

2154
01:47:13,399 --> 01:47:17,509
that way and they're very very fast what

2155
01:47:16,069 --> 01:47:19,039
you want new memory you just push

2156
01:47:17,510 --> 01:47:20,510
forward you don't need to do anything

2157
01:47:19,039 --> 01:47:21,859
there's no mutex thing there's no

2158
01:47:20,510 --> 01:47:23,900
looking into tables there's no nothing

2159
01:47:21,859 --> 01:47:27,170
you just go can I fit it if yes it just

2160
01:47:23,899 --> 01:47:30,829
goes it's like an if or two to go and

2161
01:47:27,170 --> 01:47:33,560
that's really important and then cleanup

2162
01:47:30,829 --> 01:47:36,739
is instant you just roll back the arena

2163
01:47:33,560 --> 01:47:38,690
pointer so you don't have to go through

2164
01:47:36,739 --> 01:47:40,670
all of these pointer chains freeing

2165
01:47:38,689 --> 01:47:45,049
everything which is really really bad

2166
01:47:40,670 --> 01:47:47,119
right that kind of stuff is just bad

2167
01:47:45,050 --> 01:47:49,250
programming when you're crawling through

2168
01:47:47,119 --> 01:47:50,809
pointers freeing things that you don't

2169
01:47:49,250 --> 01:47:52,550
need to do because you know you can

2170
01:47:50,810 --> 01:47:56,180
clean up everything in bulk that's

2171
01:47:52,550 --> 01:47:57,980
really bad you're wasting a ton of time

2172
01:47:56,180 --> 01:48:02,180
right a ton of processor time doing

2173
01:47:57,979 --> 01:48:04,789
nothing once you get rid of all that

2174
01:48:02,180 --> 01:48:08,210
stuff then you're left with just things

2175
01:48:04,789 --> 01:48:10,159
that stay around for like unpredictable

2176
01:48:08,210 --> 01:48:12,409
amount of times so like we're allocating

2177
01:48:10,159 --> 01:48:14,869
something and we don't know when it's

2178
01:48:12,409 --> 01:48:19,779
going to be de-allocated and for those

2179
01:48:14,869 --> 01:48:22,369
you need more thoughtful approaches and

2180
01:48:19,779 --> 01:48:23,479
that's the place where if you were using

2181
01:48:22,369 --> 01:48:25,819
garbage collection or something like

2182
01:48:23,479 --> 01:48:27,439
that I'd be like fine that's fine like

2183
01:48:25,819 --> 01:48:31,549
you know I'm probably not how I would do

2184
01:48:27,439 --> 01:48:33,019
it but it's fine or if you're using

2185
01:48:31,550 --> 01:48:35,119
something where you were using some

2186
01:48:33,020 --> 01:48:37,640
reference counting again that's fine

2187
01:48:35,119 --> 01:48:40,640
like there are cases where things like

2188
01:48:37,640 --> 01:48:42,650
that do become okay and they are

2189
01:48:40,640 --> 01:48:44,750
reasonable and they aren't costing more

2190
01:48:42,649 --> 01:48:47,569
time than they should and so on but

2191
01:48:44,750 --> 01:48:51,140
that's the only place that I ever want

2192
01:48:47,569 --> 01:48:53,389
to see those sorts of crawley based

2193
01:48:51,140 --> 01:48:55,160
pointer looking things like the way

2194
01:48:53,390 --> 01:48:57,200
garbage collection analyzes like the

2195
01:48:55,159 --> 01:48:58,639
waste modern c++ does all of its stupid

2196
01:48:57,199 --> 01:49:01,090
unique pointer sharing pointer smart

2197
01:48:58,640 --> 01:49:03,619
pointer kinds of things all that stuff

2198
01:49:01,090 --> 01:49:05,869
should only be happening in the case

2199
01:49:03,619 --> 01:49:09,439
where the memory lifetime isn't known

2200
01:49:05,869 --> 01:49:11,369
and the memory lifetime for almost

2201
01:49:09,439 --> 01:49:14,250
everything in almost every

2202
01:49:11,369 --> 01:49:16,380
program is known that's the crucial

2203
01:49:14,250 --> 01:49:19,739
that's the part that's so frustrating

2204
01:49:16,380 --> 01:49:23,010
people act like we don't know when the

2205
01:49:19,739 --> 01:49:27,809
memory is going away we almost always do

2206
01:49:23,010 --> 01:49:30,420
like 90% is even probably low like 99%

2207
01:49:27,810 --> 01:49:33,480
of all memory you probably know exactly

2208
01:49:30,420 --> 01:49:36,060
how long it needs to be there at compile

2209
01:49:33,479 --> 01:49:37,949
time right and it's just ridiculous to

2210
01:49:36,060 --> 01:49:40,410
write code in a way that pretends that

2211
01:49:37,949 --> 01:49:43,590
everything is volatile and completely

2212
01:49:40,409 --> 01:49:46,529
arbitrary that's almost never true you

2213
01:49:43,590 --> 01:49:48,590
know and so all of that - leave us trust

2214
01:49:46,529 --> 01:49:51,679
memory management is just based on bad

2215
01:49:48,590 --> 01:49:55,470
understandings of how memory works and

2216
01:49:51,680 --> 01:49:58,140
it's about focusing on the language not

2217
01:49:55,470 --> 01:50:04,829
the hardware which you know I find to be

2218
01:49:58,140 --> 01:50:06,240
a grievous error do you use any of the

2219
01:50:04,829 --> 01:50:09,449
handmade coding your 9:30 for a project

2220
01:50:06,239 --> 01:50:12,479
I don't at the moment but I will be

2221
01:50:09,449 --> 01:50:15,389
moving the PNG parser in there now that

2222
01:50:12,479 --> 01:50:19,289
I have my own PNG parser I can use that

2223
01:50:15,390 --> 01:50:21,329
one currently I have a thing that I have

2224
01:50:19,289 --> 01:50:23,880
a PSD loader and that's what we use for

2225
01:50:21,329 --> 01:50:28,170
everything and I don't have a PNG or

2226
01:50:23,880 --> 01:50:30,810
JPEG loader so for our website which is

2227
01:50:28,170 --> 01:50:33,989
the only thing that loads pngs or JPEGs

2228
01:50:30,810 --> 01:50:37,770
for our website I actually still call

2229
01:50:33,989 --> 01:50:40,469
out to like external tools it like the

2230
01:50:37,770 --> 01:50:42,450
the web builder will like all possibly

2231
01:50:40,470 --> 01:50:45,210
like free image I think it'll call like

2232
01:50:42,449 --> 01:50:50,880
a DLL to put those into other formats

2233
01:50:45,210 --> 01:50:53,579
and now I can just switch to using our

2234
01:50:50,880 --> 01:50:57,270
PNG ourselves' no sorry it's not that

2235
01:50:53,579 --> 01:50:59,970
it's not very much it's some image magic

2236
01:50:57,270 --> 01:51:01,620
it calls out like if it needs to do it

2237
01:50:59,970 --> 01:51:03,720
needs to produce like multiple sizes of

2238
01:51:01,619 --> 01:51:05,760
a thing and it was the website stuff so

2239
01:51:03,720 --> 01:51:07,680
I was kind of in a hurry so all I do is

2240
01:51:05,760 --> 01:51:10,409
I call out to a shell out to image

2241
01:51:07,680 --> 01:51:12,240
magics convert utility so that no matter

2242
01:51:10,409 --> 01:51:15,029
what the input file format is it would

2243
01:51:12,239 --> 01:51:16,769
resize it down we only use PNG and JPEG

2244
01:51:15,029 --> 01:51:19,139
so what I'll probably do is at some

2245
01:51:16,770 --> 01:51:21,350
point write my own JPEG and then I can

2246
01:51:19,140 --> 01:51:23,400
just have it entirely in our code base

2247
01:51:21,350 --> 01:51:24,870
which would be nice that's like one of

2248
01:51:23,399 --> 01:51:28,739
the only things we use

2249
01:51:24,869 --> 01:51:30,090
now there's like to to external calls we

2250
01:51:28,739 --> 01:51:33,239
make in our entire code base right now

2251
01:51:30,090 --> 01:51:34,500
one is for that which is the website so

2252
01:51:33,239 --> 01:51:35,699
I don't really care it could stay that

2253
01:51:34,500 --> 01:51:40,170
way I don't I don't really care about

2254
01:51:35,699 --> 01:51:44,939
that but for 1935 we do use one external

2255
01:51:40,170 --> 01:51:46,649
tool that's a forbus compressor and so

2256
01:51:44,939 --> 01:51:48,710
someday I'd like to put in our own audio

2257
01:51:46,649 --> 01:51:51,299
compression because Vorbis sucks anyway

2258
01:51:48,710 --> 01:51:52,739
so I'd like to put in our own audio

2259
01:51:51,300 --> 01:51:54,600
compressor at some point but that was

2260
01:51:52,739 --> 01:51:57,300
just a bridge too far I've already

2261
01:51:54,600 --> 01:51:59,490
always swamped with coding work on 1935

2262
01:51:57,300 --> 01:52:09,060
I just couldn't afford it so but someday

2263
01:51:59,489 --> 01:52:10,590
I'll get there Eliminator will you be

2264
01:52:09,060 --> 01:52:12,180
changing your fonts to be packed bitmaps

2265
01:52:10,590 --> 01:52:13,710
rather than a bitmap per glyph if not

2266
01:52:12,180 --> 01:52:16,970
how would you store the UVs for the

2267
01:52:13,710 --> 01:52:16,970
glyphs in the h @j file

2268
01:52:17,060 --> 01:52:22,710
no I we probably wouldn't bother cuz we

2269
01:52:20,039 --> 01:52:30,899
don't really have to I mean maybe we

2270
01:52:22,710 --> 01:52:32,430
would at some point I'm not sure but if

2271
01:52:30,899 --> 01:52:35,399
not how would you store the UVs for the

2272
01:52:32,430 --> 01:52:38,100
glyphs in the h @j file well so the same

2273
01:52:35,399 --> 01:52:41,129
way that we store the glyphs now as just

2274
01:52:38,100 --> 01:52:42,840
an array of bit Magnus's indices you

2275
01:52:41,130 --> 01:52:46,069
could just or the bitmap index and the

2276
01:52:42,840 --> 01:52:46,069
UV right

2277
01:52:49,918 --> 01:52:56,639
have you tried the opus codec by the way

2278
01:52:53,029 --> 01:53:03,958
no I haven't is but it is is that the

2279
01:52:56,639 --> 01:53:08,609
one that's lossless or is that just a

2280
01:53:03,958 --> 01:53:13,498
new one that they made what's the what's

2281
01:53:08,609 --> 01:53:19,859
the lossless one it's not it's not opus

2282
01:53:13,498 --> 01:53:27,569
is it it's it's flax that's the one so

2283
01:53:19,859 --> 01:53:29,488
no I have not tried opus is it necessary

2284
01:53:27,569 --> 01:53:33,299
to use pragma pack push and pop for the

2285
01:53:29,488 --> 01:53:35,549
a jamais tracks it is sort of the reason

2286
01:53:33,300 --> 01:53:37,320
that it is sort of is because we don't

2287
01:53:35,550 --> 01:53:39,570
want different versions of different

2288
01:53:37,319 --> 01:53:42,268
compilers deciding to pack those structs

2289
01:53:39,569 --> 01:53:43,948
differently and so we're just trying to

2290
01:53:42,269 --> 01:53:46,409
make sure that if other people are

2291
01:53:43,948 --> 01:53:47,819
compiling them on say a 32-bit compiler

2292
01:53:46,408 --> 01:53:50,129
or something that might make a different

2293
01:53:47,819 --> 01:53:52,948
decision about how it got packed they

2294
01:53:50,130 --> 01:53:54,929
would say the same are there any things

2295
01:53:52,948 --> 01:53:58,138
in there right now that I think it would

2296
01:53:54,929 --> 01:54:00,090
affect no so I don't think we need it at

2297
01:53:58,139 --> 01:54:02,099
the moment but it's just it's a really

2298
01:54:00,090 --> 01:54:09,059
bad idea to roll the dice on that like

2299
01:54:02,099 --> 01:54:10,559
you don't generally want to to start

2300
01:54:09,059 --> 01:54:14,219
making a file format in something that's

2301
01:54:10,559 --> 01:54:18,800
not that doesn't have the C packing

2302
01:54:14,219 --> 01:54:18,800
rules turned off right

2303
01:54:42,090 --> 01:54:45,519
and you just to expand that a little bit

2304
01:54:44,618 --> 01:54:48,399
since people are talking about in the

2305
01:54:45,519 --> 01:54:51,550
chat the reason that I say Vorbis sucks

2306
01:54:48,399 --> 01:54:54,308
it's not the compression quality or

2307
01:54:51,550 --> 01:54:56,469
amount that sucks like I it's acceptable

2308
01:54:54,309 --> 01:54:57,969
for youth you know you can compress

2309
01:54:56,469 --> 01:55:00,908
things pretty reasonably and they still

2310
01:54:57,969 --> 01:55:03,429
sound okay so it's it's I feel like it's

2311
01:55:00,908 --> 01:55:05,018
competitive with mp3 just fine

2312
01:55:03,429 --> 01:55:06,550
which you know is obviously a standard

2313
01:55:05,019 --> 01:55:08,079
that everyone not finds acceptable and

2314
01:55:06,550 --> 01:55:10,179
uses for everything so you know it's a

2315
01:55:08,078 --> 01:55:15,058
reasonable replacement in that sense the

2316
01:55:10,179 --> 01:55:19,029
problem is it's just crappy code right

2317
01:55:15,059 --> 01:55:22,480
it's built in two layers for no reason

2318
01:55:19,029 --> 01:55:25,960
right so the Orbis the Vorbis if you use

2319
01:55:22,479 --> 01:55:30,549
their code for it what ends up happening

2320
01:55:25,960 --> 01:55:33,760
is you have to have it encode Vorbis

2321
01:55:30,550 --> 01:55:35,529
output into aughh streams that can be

2322
01:55:33,760 --> 01:55:38,409
broken up into packets and always it

2323
01:55:35,529 --> 01:55:40,719
right none of that stuff i want like i

2324
01:55:38,408 --> 01:55:43,149
have a game it's got its own streaming

2325
01:55:40,719 --> 01:55:46,118
system its own file format it knows

2326
01:55:43,149 --> 01:55:49,448
where everything is it just wants you to

2327
01:55:46,118 --> 01:55:51,908
output right data that it can quickly

2328
01:55:49,448 --> 01:55:54,939
decompress with a nice clean easy

2329
01:55:51,908 --> 01:55:57,698
efficient code stream into sound data

2330
01:55:54,939 --> 01:55:58,328
again and it really just isn't set up

2331
01:55:57,698 --> 01:56:00,428
for that

2332
01:55:58,328 --> 01:56:03,849
it's it's got way too much complexity

2333
01:56:00,429 --> 01:56:07,929
the OGG part is just bad and but you

2334
01:56:03,849 --> 01:56:08,949
have to use it more or less and so even

2335
01:56:07,929 --> 01:56:10,719
if I was gonna stick with it I'd

2336
01:56:08,948 --> 01:56:12,549
probably make a thing that parses out

2337
01:56:10,719 --> 01:56:16,239
the augs dream that comes out of the

2338
01:56:12,550 --> 01:56:18,998
compressor andrey encodes the Vorbis

2339
01:56:16,238 --> 01:56:21,729
part and then write my own Vorbis the

2340
01:56:18,998 --> 01:56:24,908
compressor part that just went directly

2341
01:56:21,729 --> 01:56:26,788
to bypass that kind of crap because it's

2342
01:56:24,908 --> 01:56:29,649
got a bunch of cruft you just don't want

2343
01:56:26,788 --> 01:56:32,439
so fundamentally the compression model

2344
01:56:29,649 --> 01:56:33,729
I'm not an audio compression guy so I'm

2345
01:56:32,439 --> 01:56:38,558
not in a position to say whether it's

2346
01:56:33,729 --> 01:56:39,998
good or bad right so I'm not complaining

2347
01:56:38,559 --> 01:56:42,760
about the compression quality I'm

2348
01:56:39,998 --> 01:56:47,229
complaining about the code quality it's

2349
01:56:42,760 --> 01:56:49,150
just not suitable for what I want to do

2350
01:56:47,229 --> 01:56:51,788
and so I would much rather have a code

2351
01:56:49,149 --> 01:56:54,978
base I control so I can make a really

2352
01:56:51,788 --> 01:57:00,408
nice clean efficient D

2353
01:56:54,979 --> 01:57:02,559
d compressor part that's the important

2354
01:57:00,408 --> 01:57:02,558
part

2355
01:57:03,908 --> 01:57:08,888
Martin's was posting some stuff about

2356
01:57:06,319 --> 01:57:08,889
opus

2357
01:57:31,010 --> 01:57:38,520
so here's a question with opus by the

2358
01:57:33,869 --> 01:57:40,079
way what is the actual code complexity

2359
01:57:38,520 --> 01:57:42,210
level because that's the other thing

2360
01:57:40,079 --> 01:57:44,100
that I find is problematic with audio

2361
01:57:42,210 --> 01:57:48,300
codecs a lot of time I mean here's the

2362
01:57:44,100 --> 01:57:52,100
thing and a lot of people don't

2363
01:57:48,300 --> 01:57:54,300
understand this fundamentally right I

2364
01:57:52,100 --> 01:57:57,810
don't care how complicated your

2365
01:57:54,300 --> 01:57:59,489
compressor is really you know I gotta

2366
01:57:57,810 --> 01:58:00,180
use a library to do compression cuz I

2367
01:57:59,489 --> 01:58:01,889
ain't gonna do it

2368
01:58:00,180 --> 01:58:04,170
and it's super complicated whatever

2369
01:58:01,890 --> 01:58:07,140
right I don't want to have to use a

2370
01:58:04,170 --> 01:58:09,090
library to decode stuff I want to be

2371
01:58:07,140 --> 01:58:10,980
able to write it and I want it to be

2372
01:58:09,090 --> 01:58:15,569
simple right it shouldn't be complicated

2373
01:58:10,979 --> 01:58:18,509
to do a decode um and so I want to see

2374
01:58:15,569 --> 01:58:21,689
like a five thousand line decoder in one

2375
01:58:18,510 --> 01:58:23,730
file for your for your audio compressor

2376
01:58:21,689 --> 01:58:30,210
if you can't do that you've got a

2377
01:58:23,729 --> 01:58:33,299
problem in my opinion right and ya FFTs

2378
01:58:30,210 --> 01:58:35,819
can be a little bit nasty in there you

2379
01:58:33,300 --> 01:58:38,130
know there's a lot of audio codecs that

2380
01:58:35,819 --> 01:58:39,869
rely on FF T's and so you know I'm gonna

2381
01:58:38,130 --> 01:58:42,810
cut used to slack on stuff like that I

2382
01:58:39,869 --> 01:58:47,220
don't mind but it should be basically

2383
01:58:42,810 --> 01:58:52,350
straightforward compared to you know any

2384
01:58:47,220 --> 01:58:57,210
reasonable audio codec decoder and if

2385
01:58:52,350 --> 01:58:59,820
you're coming to me and go and look you

2386
01:58:57,210 --> 01:59:02,489
know we could we can get ten to one if

2387
01:58:59,819 --> 01:59:04,170
it was a simple five thousand line

2388
01:59:02,489 --> 01:59:07,619
decoder but we really wanted to get

2389
01:59:04,170 --> 01:59:10,050
eleven to one and it's now it's this

2390
01:59:07,619 --> 01:59:12,809
giant fifty thousand line D compressor

2391
01:59:10,050 --> 01:59:16,170
that is a really bad trade-off right

2392
01:59:12,810 --> 01:59:17,610
there is no game that I can ship with

2393
01:59:16,170 --> 01:59:19,079
eleven to one compression that I

2394
01:59:17,609 --> 01:59:21,750
couldn't have just shipped with ten to

2395
01:59:19,079 --> 01:59:23,729
one compression it affects me not at all

2396
01:59:21,750 --> 01:59:26,010
so really what it did is made my

2397
01:59:23,729 --> 01:59:27,659
codebase worse made it more likely to

2398
01:59:26,010 --> 01:59:29,520
have bugs and made it harder for me to

2399
01:59:27,659 --> 01:59:32,220
maintain because now there's this giant

2400
01:59:29,520 --> 01:59:33,180
50,000 line wart sitting in there that I

2401
01:59:32,220 --> 01:59:35,159
don't know what it does

2402
01:59:33,180 --> 01:59:37,710
I can't evaluate it very effectively

2403
01:59:35,159 --> 01:59:39,420
porting it can be problematic it may not

2404
01:59:37,710 --> 01:59:42,060
work properly on all processors

2405
01:59:39,420 --> 01:59:43,859
I have optimization problems now because

2406
01:59:42,060 --> 01:59:44,369
I got to worry about how fifty thousand

2407
01:59:43,859 --> 01:59:47,338
lines of

2408
01:59:44,368 --> 01:59:49,648
is being executed by something right so

2409
01:59:47,338 --> 01:59:53,609
these are bad trade out trade offs in my

2410
01:59:49,649 --> 01:59:55,859
opinion um so audio codecs I think once

2411
01:59:53,609 --> 01:59:57,749
they get above some magic number I'm not

2412
01:59:55,859 --> 02:00:03,629
sure what it is let's say it's 8 to 1

2413
01:59:57,748 --> 02:00:07,769
ish maybe 10 to 1 somewhere around there

2414
02:00:03,628 --> 02:00:10,529
I don't want any more complexity there's

2415
02:00:07,769 --> 02:00:14,039
if you're if if it takes more complexity

2416
02:00:10,529 --> 02:00:16,498
to get further down than that I don't

2417
02:00:14,038 --> 02:00:18,988
want it you're making a bad trade off

2418
02:00:16,498 --> 02:00:20,908
for me I understand why you're doing it

2419
02:00:18,988 --> 02:00:22,799
because you're making an audio codec you

2420
02:00:20,908 --> 02:00:24,448
want it to be as compressed as possible

2421
02:00:22,800 --> 02:00:28,199
that's your whole thing right the

2422
02:00:24,448 --> 02:00:32,759
highest quality the lowest data rate but

2423
02:00:28,198 --> 02:00:35,608
that's just not what I want so you're

2424
02:00:32,760 --> 02:00:38,128
giving me features I don't want or

2425
02:00:35,609 --> 02:00:41,760
improvement optimization in the data

2426
02:00:38,128 --> 02:00:43,559
rate that I don't want and you're making

2427
02:00:41,760 --> 02:00:46,498
it worse for me on the integration side

2428
02:00:43,559 --> 02:00:50,729
so that's really crucial to understand I

2429
02:00:46,498 --> 02:00:53,958
want a very simple decoder that I can

2430
02:00:50,729 --> 02:00:59,939
write myself in a couple weeks right

2431
02:00:53,958 --> 02:01:03,809
let's say from your spec I want that so

2432
02:00:59,939 --> 02:01:04,800
if if they've got that I'm happy I would

2433
02:01:03,809 --> 02:01:08,338
be happy with that

2434
02:01:04,800 --> 02:01:12,439
right that's that's really all actually

2435
02:01:08,338 --> 02:01:12,439
about that Vorbis is not that right

2436
02:01:27,609 --> 02:01:36,130
ruah 47,000 lines yes so 47,000 lines

2437
02:01:31,899 --> 02:01:37,839
it's just way too big for a decoder it's

2438
02:01:36,130 --> 02:01:38,199
just it's I guarantee you it's not worth

2439
02:01:37,840 --> 02:01:40,239
it

2440
02:01:38,199 --> 02:01:42,489
right it's worth it for some people

2441
02:01:40,239 --> 02:01:44,949
meaning if what you're trying to do is

2442
02:01:42,489 --> 02:01:46,479
is maximally get the highest quality in

2443
02:01:44,949 --> 02:01:47,260
the lowest space and accept no

2444
02:01:46,479 --> 02:01:49,750
substitutes

2445
02:01:47,260 --> 02:01:56,260
you know we're sending the probe into

2446
02:01:49,750 --> 02:01:58,329
outer space then great but for a game

2447
02:01:56,260 --> 02:02:00,369
it's just not necessary if I can't fit

2448
02:01:58,329 --> 02:02:04,180
the if the did compressor in like less

2449
02:02:00,369 --> 02:02:06,609
than 10 K of code I yeah I don't I don't

2450
02:02:04,180 --> 02:02:08,980
really want it right and so I would like

2451
02:02:06,609 --> 02:02:10,420
to make a simpler audio codec one that

2452
02:02:08,979 --> 02:02:13,239
just gets eight to one ten to one

2453
02:02:10,420 --> 02:02:17,680
whatever something reasonable shippable

2454
02:02:13,239 --> 02:02:20,380
but simple 5,000 lines 10,000 lines no

2455
02:02:17,680 --> 02:02:22,360
more that would be my sweet spot and

2456
02:02:20,380 --> 02:02:25,029
that's what I would be aiming for to

2457
02:02:22,359 --> 02:02:26,769
replace Vorbis with which may just be

2458
02:02:25,029 --> 02:02:30,279
basically Vorbis like I could just do

2459
02:02:26,770 --> 02:02:33,790
more or less Vorbis right but trim out

2460
02:02:30,279 --> 02:02:37,389
the fat and and maybe it gets there I

2461
02:02:33,789 --> 02:02:39,670
don't know opus might be similar right

2462
02:02:37,390 --> 02:02:41,860
like for all I know if we went started

2463
02:02:39,670 --> 02:02:45,369
looking at opus and how it worked it may

2464
02:02:41,859 --> 02:02:47,679
be like yeah okay so if we just get rid

2465
02:02:45,369 --> 02:02:49,000
of certain modes that it does like maybe

2466
02:02:47,680 --> 02:02:50,860
it's got all these different things you

2467
02:02:49,000 --> 02:02:52,449
can do like oh this looks like speech so

2468
02:02:50,859 --> 02:02:53,949
I'm gonna do like a speech codec here

2469
02:02:52,449 --> 02:02:55,779
and all this looks like music some of

2470
02:02:53,949 --> 02:02:56,949
your music codec here and all this looks

2471
02:02:55,779 --> 02:02:58,599
like this and it's got like all these

2472
02:02:56,949 --> 02:03:00,460
crazy things and maybe they're really

2473
02:02:58,600 --> 02:03:02,440
disparate and maybe we only care about

2474
02:03:00,460 --> 02:03:03,489
like picking the one that works best and

2475
02:03:02,439 --> 02:03:04,869
just using that for everything even

2476
02:03:03,489 --> 02:03:08,260
though it's a little less efficient for

2477
02:03:04,869 --> 02:03:12,340
some things you know what maybe that you

2478
02:03:08,260 --> 02:03:16,860
could make a simplified opus that could

2479
02:03:12,340 --> 02:03:19,569
still work right and so that's like

2480
02:03:16,859 --> 02:03:21,579
totally viable - right so I don't know

2481
02:03:19,569 --> 02:03:24,039
but at some point I would like to figure

2482
02:03:21,579 --> 02:03:25,960
out how to do that because that's a

2483
02:03:24,039 --> 02:03:29,859
really big nasty wart in our code base

2484
02:03:25,960 --> 02:03:35,470
right now that I don't like so all right

2485
02:03:29,859 --> 02:03:36,519
that said we are done for today thank

2486
02:03:35,470 --> 02:03:37,780
you everyone for joining me for an

2487
02:03:36,520 --> 02:03:39,250
episode of handmade hero it's been a

2488
02:03:37,779 --> 02:03:41,079
pleasure coding with you as always if

2489
02:03:39,250 --> 02:03:42,789
you would like

2490
02:03:41,079 --> 02:03:46,229
to follow along the series at home you

2491
02:03:42,789 --> 02:03:48,460
can always go to handmade hero org and

2492
02:03:46,229 --> 02:03:49,539
you don't need the slash game on there

2493
02:03:48,460 --> 02:03:52,210
that's just what happens if you click

2494
02:03:49,539 --> 02:03:53,949
this um go to him meteor org and you can

2495
02:03:52,210 --> 02:03:55,180
pre-order the game it comes with all the

2496
02:03:53,949 --> 02:03:58,539
source code so that you can play around

2497
02:03:55,180 --> 02:04:00,369
with it yourself we also have some other

2498
02:03:58,539 --> 02:04:02,350
useful stuff here there's a watch page

2499
02:04:00,369 --> 02:04:04,599
where you can go to watch the series

2500
02:04:02,350 --> 02:04:06,130
it's got a viewer on there that anytime

2501
02:04:04,600 --> 02:04:07,360
we're live it comes up otherwise it'll

2502
02:04:06,130 --> 02:04:08,710
show you the schedule so you can know

2503
02:04:07,359 --> 02:04:10,719
when we're gonna be live next pretty

2504
02:04:08,710 --> 02:04:12,430
handy it's also got an episode guide you

2505
02:04:10,720 --> 02:04:14,199
can use to watch old episodes and it has

2506
02:04:12,430 --> 02:04:15,760
search by P string it's awesome you can

2507
02:04:14,199 --> 02:04:17,319
just type in stuff you want to know

2508
02:04:15,760 --> 02:04:19,270
where we did the PNG decompressor just

2509
02:04:17,319 --> 02:04:23,079
type PNG in there it's got it all it's

2510
02:04:19,270 --> 02:04:24,310
pretty great we also have a FAQ if

2511
02:04:23,079 --> 02:04:25,930
there's any question about series you

2512
02:04:24,310 --> 02:04:27,550
have that are easily answerable and

2513
02:04:25,930 --> 02:04:29,650
finally you have a handmade fun if you

2514
02:04:27,550 --> 02:04:32,289
want to support things such as that

2515
02:04:29,649 --> 02:04:34,960
awesome episode guide or the forums that

2516
02:04:32,289 --> 02:04:36,640
people use a handmade network stuff like

2517
02:04:34,960 --> 02:04:38,170
that you can always contribute to the

2518
02:04:36,640 --> 02:04:40,420
handmade fund we give that money away

2519
02:04:38,170 --> 02:04:43,750
every month however much we get we give

2520
02:04:40,420 --> 02:04:46,390
away to the folks doing useful projects

2521
02:04:43,750 --> 02:04:50,289
for people who do handmade hero style

2522
02:04:46,390 --> 02:04:52,990
programming that's it for this this fine

2523
02:04:50,289 --> 02:04:56,949
Saturday we'll be back tomorrow for

2524
02:04:52,989 --> 02:04:59,170
another stream probably tomorrow we

2525
02:04:56,949 --> 02:05:00,519
could implement the hash and then we're

2526
02:04:59,170 --> 02:05:03,399
out of stuff so it's just really

2527
02:05:00,520 --> 02:05:06,610
debugging and the hash tomorrow and then

2528
02:05:03,399 --> 02:05:08,559
we're we're into that nasty tag problem

2529
02:05:06,609 --> 02:05:10,659
that I've talked about started a series

2530
02:05:08,560 --> 02:05:14,020
not looking forward to that but

2531
02:05:10,659 --> 02:05:15,849
hopefully we will get lucky and be able

2532
02:05:14,020 --> 02:05:19,030
to come up with something that works

2533
02:05:15,850 --> 02:05:20,770
pretty well we'll see until then have

2534
02:05:19,029 --> 02:05:23,699
fun programming and I'll see everyone on

2535
02:05:20,770 --> 02:05:23,700
the Internet tegus everybody

