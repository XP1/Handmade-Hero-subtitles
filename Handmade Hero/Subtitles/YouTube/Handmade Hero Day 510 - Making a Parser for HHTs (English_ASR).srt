1
00:00:02,509 --> 00:00:06,750
hello everyone and welcome to hand made

2
00:00:04,919 --> 00:00:09,570
here oh sure we could complete game live

3
00:00:06,750 --> 00:00:12,990
on stream I have an announcement to make

4
00:00:09,570 --> 00:00:16,289
at the beginning of the stream here that

5
00:00:12,990 --> 00:00:19,379
is basically it's you know it's it's

6
00:00:16,289 --> 00:00:23,640
more or less handmade hero job job

7
00:00:19,379 --> 00:00:25,410
listings I guess is what I would say and

8
00:00:23,640 --> 00:00:29,550
hopefully there's enough people out

9
00:00:25,410 --> 00:00:31,289
there watching to maybe help out with

10
00:00:29,550 --> 00:00:35,820
this so let me let me give you the

11
00:00:31,289 --> 00:00:38,820
rundown so a fellow I know his name's

12
00:00:35,820 --> 00:00:41,730
Alex Austin and he's been a game

13
00:00:38,820 --> 00:00:43,320
developer for a long time and you may

14
00:00:41,729 --> 00:00:47,569
know some of his games if you follow

15
00:00:43,320 --> 00:00:52,109
indie gaming in fact if you were around

16
00:00:47,570 --> 00:00:55,590
for the original Humble Bundle I believe

17
00:00:52,109 --> 00:01:00,570
that you would probably know his work so

18
00:00:55,590 --> 00:01:03,750
he did gif which was a game with Edmund

19
00:01:00,570 --> 00:01:05,519
McMillen he did a hockey game I think

20
00:01:03,750 --> 00:01:07,469
just called hockey question mark can't

21
00:01:05,519 --> 00:01:10,020
matter what it's called he did golf for

22
00:01:07,469 --> 00:01:15,478
workgroups and he's currently and other

23
00:01:10,019 --> 00:01:19,259
games too but he also now is working on

24
00:01:15,478 --> 00:01:22,950
a game called Subrosa and you can find

25
00:01:19,259 --> 00:01:28,099
this game on on the web here and

26
00:01:22,950 --> 00:01:31,799
actually see what's what it's about

27
00:01:28,099 --> 00:01:33,629
it's basically a game where in you you

28
00:01:31,799 --> 00:01:38,009
know you you sort of play

29
00:01:33,629 --> 00:01:41,420
this trying to I'm trying to think of of

30
00:01:38,009 --> 00:01:46,819
what the the right way to describe it is

31
00:01:41,420 --> 00:01:49,649
you are in a city and you have teams and

32
00:01:46,819 --> 00:01:51,868
rather than be like a simple kind of

33
00:01:49,649 --> 00:01:53,219
deathmatch or capture the flag kind of

34
00:01:51,868 --> 00:01:56,700
thing where the teams try to shoot each

35
00:01:53,219 --> 00:02:01,019
other over some objective I it's

36
00:01:56,700 --> 00:02:04,290
actually a game that involves a handoff

37
00:02:01,019 --> 00:02:07,590
so there's at least three teams one team

38
00:02:04,290 --> 00:02:11,000
has a disc another team has money for

39
00:02:07,590 --> 00:02:13,590
the disc and the third team has neither

40
00:02:11,000 --> 00:02:16,469
and the goal

41
00:02:13,590 --> 00:02:18,569
for the team with the disk to sell it to

42
00:02:16,469 --> 00:02:22,560
the team with the money in exchange for

43
00:02:18,568 --> 00:02:24,269
the money however in some sense that's

44
00:02:22,560 --> 00:02:28,348
not really the goal either the goal is

45
00:02:24,270 --> 00:02:31,290
just to get the money really and so

46
00:02:28,348 --> 00:02:33,000
there's many ways that can go down the

47
00:02:31,289 --> 00:02:36,239
team with the disk can arrange a drop

48
00:02:33,000 --> 00:02:37,949
with the team who has the money and you

49
00:02:36,239 --> 00:02:39,090
know you can actually do legit exchange

50
00:02:37,949 --> 00:02:41,488
and if no one gets an itchy trigger

51
00:02:39,090 --> 00:02:43,920
finger it doesn't erupt into a firefight

52
00:02:41,489 --> 00:02:47,060
and it's fine but the third team could

53
00:02:43,919 --> 00:02:49,589
always stumble in on this and you know

54
00:02:47,060 --> 00:02:51,150
start shooting and whatever so it's kind

55
00:02:49,590 --> 00:02:53,909
of a game that's about taking the

56
00:02:51,150 --> 00:02:56,450
standard grand theft auto mechanics

57
00:02:53,909 --> 00:03:02,098
where there's cars and people with guns

58
00:02:56,449 --> 00:03:07,048
and making sort of a standard Hollywood

59
00:03:02,098 --> 00:03:08,969
style drop be part of it so there's you

60
00:03:07,049 --> 00:03:10,200
know plenty of deception and saying

61
00:03:08,969 --> 00:03:13,019
you're gonna meet someplace when you're

62
00:03:10,199 --> 00:03:14,518
not actually going to or you know don't

63
00:03:13,019 --> 00:03:16,349
actually bring the cash or you know

64
00:03:14,519 --> 00:03:17,760
doing sort of the thing where you both

65
00:03:16,348 --> 00:03:21,298
put it down on the ground and step away

66
00:03:17,759 --> 00:03:23,099
slowly so it's it's a interesting take

67
00:03:21,299 --> 00:03:26,609
on first-person shooters it's been

68
00:03:23,099 --> 00:03:31,169
around a while and it's published by

69
00:03:26,609 --> 00:03:33,390
devolver digital and the long and short

70
00:03:31,169 --> 00:03:35,039
of it is he's the only programmer on the

71
00:03:33,389 --> 00:03:39,809
project and he needs a second programmer

72
00:03:35,039 --> 00:03:40,858
on the project so there is contract work

73
00:03:39,810 --> 00:03:44,969
that's going to be available for this

74
00:03:40,859 --> 00:03:47,250
game and like I've said many times it's

75
00:03:44,969 --> 00:03:50,280
always hard to find engine people people

76
00:03:47,250 --> 00:03:52,500
who can do low-level code work it's an

77
00:03:50,280 --> 00:03:53,849
entirely C engine so it needs to be

78
00:03:52,500 --> 00:03:55,199
somebody who understands how to program

79
00:03:53,849 --> 00:03:57,150
things like we program on handmade hero

80
00:03:55,199 --> 00:03:59,068
you can't be throwing templates into the

81
00:03:57,150 --> 00:04:03,209
mix it's not going to work you won't

82
00:03:59,068 --> 00:04:06,388
even be able to build and so if this is

83
00:04:03,209 --> 00:04:10,979
something that interests you feel free

84
00:04:06,389 --> 00:04:13,260
to to bring it up contact me you can

85
00:04:10,979 --> 00:04:17,488
actually at the end of the game on the

86
00:04:13,259 --> 00:04:19,689
chat if you want to bring it up or you

87
00:04:17,488 --> 00:04:23,079
can just mail me

88
00:04:19,689 --> 00:04:26,560
people know how to contact me or you can

89
00:04:23,079 --> 00:04:30,490
find Alex Austin on Twitter

90
00:04:26,560 --> 00:04:33,910
and just shout directly at him but point

91
00:04:30,490 --> 00:04:38,889
being get in touch this is him

92
00:04:33,910 --> 00:04:40,570
and you know you can't okay it's got all

93
00:04:38,889 --> 00:04:43,990
physics space movement in it as well so

94
00:04:40,569 --> 00:04:47,319
it's kind of amusing into a lot of kind

95
00:04:43,990 --> 00:04:52,060
of crazy things with the system but

96
00:04:47,319 --> 00:04:53,920
anyway just wanted to put the word out

97
00:04:52,060 --> 00:04:56,350
because like I said engine programmers

98
00:04:53,920 --> 00:04:57,910
are hard to find the type of people who

99
00:04:56,350 --> 00:05:00,300
watch handmade here are kind of probably

100
00:04:57,910 --> 00:05:02,890
the people who could help out here

101
00:05:00,300 --> 00:05:04,030
getting the project finished so if that

102
00:05:02,889 --> 00:05:06,819
sounds like something you'd be

103
00:05:04,029 --> 00:05:08,859
interested in again I make I am not

104
00:05:06,819 --> 00:05:12,879
involved in this process whatsoever I

105
00:05:08,860 --> 00:05:14,680
make no warranties about the job or vice

106
00:05:12,879 --> 00:05:16,899
versa I told Alex I am NOT vetting

107
00:05:14,680 --> 00:05:19,569
anyone for it either so I'm simply

108
00:05:16,899 --> 00:05:22,659
acting as someone who lets you know that

109
00:05:19,569 --> 00:05:26,170
job is out there and maybe you want to

110
00:05:22,660 --> 00:05:29,140
see if you can get it I know nothing

111
00:05:26,170 --> 00:05:31,870
about the project or its state I don't

112
00:05:29,139 --> 00:05:34,169
vote for it and I won't vouch for you I

113
00:05:31,870 --> 00:05:36,189
am totally disinterested third party

114
00:05:34,170 --> 00:05:38,860
although I guess I'm interested enough

115
00:05:36,189 --> 00:05:43,060
to say I like Alex and wanted to help

116
00:05:38,860 --> 00:05:45,370
him out so we'll save that but I make no

117
00:05:43,060 --> 00:05:47,500
warranties to anybody I just want to

118
00:05:45,370 --> 00:05:49,050
help get people connected and then I

119
00:05:47,500 --> 00:05:52,959
trust that the two of you can figure out

120
00:05:49,050 --> 00:05:57,129
whether you would work well together or

121
00:05:52,959 --> 00:05:59,469
not so there you go so you've got the

122
00:05:57,129 --> 00:06:01,029
information now and this is obviously in

123
00:05:59,470 --> 00:06:03,070
the main part of the hand-made here of

124
00:06:01,029 --> 00:06:04,750
video so it will be uploaded to youtube

125
00:06:03,069 --> 00:06:08,050
if you need that contact information

126
00:06:04,750 --> 00:06:13,209
later you can go get it from this

127
00:06:08,050 --> 00:06:15,040
episode's video on demand okay so today

128
00:06:13,209 --> 00:06:19,089
we are going to start working with our

129
00:06:15,040 --> 00:06:23,230
tags file we have a typo in there that

130
00:06:19,089 --> 00:06:25,739
has been noted and so we've got to go

131
00:06:23,230 --> 00:06:28,230
take a look at

132
00:06:25,740 --> 00:06:31,050
at what we've got for for bugs in there

133
00:06:28,230 --> 00:06:32,930
in terms of our data entry you know no

134
00:06:31,050 --> 00:06:36,860
one ever said I was great at clerical

135
00:06:32,930 --> 00:06:41,310
but let me go ahead and load it up the

136
00:06:36,860 --> 00:06:44,340
project here and we'll load up that that

137
00:06:41,310 --> 00:06:47,430
source aren't there

138
00:06:44,339 --> 00:06:48,599
oops that is in tags and you know so

139
00:06:47,430 --> 00:06:49,410
here's another thing remember I was

140
00:06:48,600 --> 00:06:51,180
wondering whether I should put these in

141
00:06:49,410 --> 00:06:52,380
a separate directory or not so here's

142
00:06:51,180 --> 00:06:55,889
another thing that's actually kind of

143
00:06:52,379 --> 00:06:58,110
nice is that since these hht files are

144
00:06:55,889 --> 00:07:00,149
here I could auto load them as well when

145
00:06:58,110 --> 00:07:02,340
we load the project by saying load

146
00:07:00,149 --> 00:07:04,199
everything in the tags directory in for

147
00:07:02,339 --> 00:07:08,789
coder so that's another nice reason to

148
00:07:04,199 --> 00:07:09,990
say that they exist in their own

149
00:07:08,790 --> 00:07:11,430
separate directory because that just

150
00:07:09,990 --> 00:07:12,259
kind of yeah it just makes it a little

151
00:07:11,430 --> 00:07:14,910
bit easier on us

152
00:07:12,259 --> 00:07:17,730
alright so let's address these two typos

153
00:07:14,910 --> 00:07:18,900
that I made apparently I said under oops

154
00:07:17,730 --> 00:07:21,720
that's not what I want

155
00:07:18,899 --> 00:07:24,419
apparently I said undead and bones yeah

156
00:07:21,720 --> 00:07:27,720
I did and presumably I only said that in

157
00:07:24,420 --> 00:07:31,710
one place and then it looks like we've

158
00:07:27,720 --> 00:07:35,010
got a hands that's marked instead of a

159
00:07:31,709 --> 00:07:37,289
head and so let's just double check that

160
00:07:35,009 --> 00:07:40,740
yeah so this is supposed to be a head I

161
00:07:37,290 --> 00:07:42,300
don't know if we've got any other issues

162
00:07:40,740 --> 00:07:44,939
someone was saying maybe there was some

163
00:07:42,300 --> 00:07:46,949
missing common here one of the things is

164
00:07:44,939 --> 00:07:49,589
that we probably don't need to worry too

165
00:07:46,949 --> 00:07:51,899
much about it because at you know once

166
00:07:49,589 --> 00:07:54,329
we build which I guess is what we're

167
00:07:51,899 --> 00:07:56,639
starting on today once we build

168
00:07:54,329 --> 00:07:58,829
something that compiles this it should

169
00:07:56,639 --> 00:08:03,449
be able to report to us things like the

170
00:07:58,829 --> 00:08:04,740
fact that the undead word wasn't in the

171
00:08:03,449 --> 00:08:08,459
the set of things oh there's the missing

172
00:08:04,740 --> 00:08:11,280
comma or that there's no comma between

173
00:08:08,459 --> 00:08:13,289
things when there should be now granted

174
00:08:11,279 --> 00:08:15,769
I guess to be completely honest with you

175
00:08:13,290 --> 00:08:18,270
I don't know why I put a comma in there

176
00:08:15,769 --> 00:08:21,659
there really isn't a need to have a

177
00:08:18,269 --> 00:08:23,819
comma in there because it's not like you

178
00:08:21,660 --> 00:08:26,730
couldn't just interpret a space as being

179
00:08:23,819 --> 00:08:28,259
the thing that separated tags so I'll be

180
00:08:26,730 --> 00:08:32,399
honest maybe we just shouldn't bother

181
00:08:28,259 --> 00:08:34,980
having the comma in the first place but

182
00:08:32,399 --> 00:08:37,379
who cares so I think I might just leave

183
00:08:34,980 --> 00:08:41,100
it at the moment that way because

184
00:08:37,379 --> 00:08:43,820
I just want to do that right yeah I

185
00:08:41,100 --> 00:08:46,920
don't have another explanation for it

186
00:08:43,820 --> 00:08:48,780
okay so what I would like to do now is I

187
00:08:46,919 --> 00:08:51,449
would like to make a way to load this

188
00:08:48,779 --> 00:08:56,480
tag file and make that be the way that

189
00:08:51,450 --> 00:08:56,480
we get the information that we need

190
00:08:58,909 --> 00:09:06,149
there's sort of two steps to this

191
00:09:00,990 --> 00:09:08,159
process now we could get rid of one of

192
00:09:06,149 --> 00:09:09,840
the steps right

193
00:09:08,159 --> 00:09:14,850
and I'll sue that doesn't sound good

194
00:09:09,840 --> 00:09:19,070
that sounds that sounds ambulance fire

195
00:09:14,850 --> 00:09:20,970
engine II I hope that's not my building

196
00:09:19,070 --> 00:09:23,040
otherwise the stream will be cut

197
00:09:20,970 --> 00:09:25,200
relatively short so there's two parts

198
00:09:23,039 --> 00:09:26,730
this process one part is parsing this

199
00:09:25,200 --> 00:09:28,440
file that's really pretty

200
00:09:26,730 --> 00:09:31,310
straightforward you see me parse things

201
00:09:28,440 --> 00:09:33,810
before so we should be able to do that

202
00:09:31,309 --> 00:09:36,000
without really encountering anything

203
00:09:33,809 --> 00:09:40,049
that you haven't already seen on

204
00:09:36,000 --> 00:09:41,429
handmade hero but the other thing is

205
00:09:40,049 --> 00:09:43,469
that we need to be able to find these

206
00:09:41,429 --> 00:09:45,629
files once they're described and there's

207
00:09:43,470 --> 00:09:49,040
two ways you could do that one is that

208
00:09:45,629 --> 00:09:52,139
we can augment this information here

209
00:09:49,039 --> 00:09:54,899
with information about the complete path

210
00:09:52,139 --> 00:09:56,299
so I could manually go and markup each

211
00:09:54,899 --> 00:09:58,559
of these things with where it comes from

212
00:09:56,299 --> 00:10:00,599
but I'd rather not do that what I'd

213
00:09:58,559 --> 00:10:04,559
rather do is say look there's some rule

214
00:10:00,600 --> 00:10:07,560
for how these things are found and once

215
00:10:04,559 --> 00:10:10,829
you know that rule you can just know

216
00:10:07,559 --> 00:10:13,829
where to look and we'll sort of scan the

217
00:10:10,830 --> 00:10:22,230
directory for that you know piece of

218
00:10:13,830 --> 00:10:27,210
information now this part may not like

219
00:10:22,230 --> 00:10:30,960
we we may want to further say that this

220
00:10:27,210 --> 00:10:32,340
part is just kind of hard-coded we could

221
00:10:30,960 --> 00:10:34,200
make it so that we don't really search

222
00:10:32,340 --> 00:10:36,300
sub directories we just say it has to be

223
00:10:34,200 --> 00:10:37,590
in base game and then depending on which

224
00:10:36,299 --> 00:10:39,509
one of these it is it'll either be an

225
00:10:37,590 --> 00:10:44,670
art music or sound certainly could do

226
00:10:39,509 --> 00:10:46,529
that but one way or another we're gonna

227
00:10:44,669 --> 00:10:47,819
have to make a way to find these and if

228
00:10:46,529 --> 00:10:51,250
we wanted to just search through the

229
00:10:47,820 --> 00:10:54,240
entire directory structure including

230
00:10:51,250 --> 00:10:56,679
finding them if you arbitrarily made

231
00:10:54,240 --> 00:10:59,110
random categorizations of things here

232
00:10:56,679 --> 00:11:03,068
and then anytime you typed Black Forest

233
00:10:59,110 --> 00:11:05,889
dot oh you know oh one PNG it would find

234
00:11:03,068 --> 00:11:08,198
it or something like that we also have

235
00:11:05,889 --> 00:11:10,028
to have a way of searching sort of

236
00:11:08,198 --> 00:11:14,588
through subdirectories if this makes

237
00:11:10,028 --> 00:11:17,519
sense so we will have to address some of

238
00:11:14,589 --> 00:11:23,379
these issues we're going to have to

239
00:11:17,519 --> 00:11:27,519
figure out how to do a little bit better

240
00:11:23,379 --> 00:11:29,829
file assessment then we were doing

241
00:11:27,519 --> 00:11:33,759
previously because at the very least we

242
00:11:29,828 --> 00:11:35,859
need some way of loading things out of

243
00:11:33,759 --> 00:11:37,180
sort of a deeper nested hierarchy than

244
00:11:35,860 --> 00:11:41,019
we have before because before we were

245
00:11:37,179 --> 00:11:42,099
just saying we just iterate over just

246
00:11:41,019 --> 00:11:47,818
the one

247
00:11:42,100 --> 00:11:51,459
just the one directory okay so in this

248
00:11:47,818 --> 00:11:55,568
schema I'm gonna go ahead and say that

249
00:11:51,458 --> 00:11:59,049
probably what I would do is if we parse

250
00:11:55,568 --> 00:12:01,448
this file we can parse the file and

251
00:11:59,049 --> 00:12:07,058
create sort of an understanding of what

252
00:12:01,448 --> 00:12:11,109
the assets are and I think we could

253
00:12:07,058 --> 00:12:17,078
potentially look at this process as a

254
00:12:11,110 --> 00:12:19,750
way of also giving us our like also

255
00:12:17,078 --> 00:12:23,558
giving us a potential for how to make

256
00:12:19,750 --> 00:12:28,240
placeholders for things so for example

257
00:12:23,558 --> 00:12:33,370
if I have one of these one of these

258
00:12:28,240 --> 00:12:35,740
things like a block and I give it a PNG

259
00:12:33,370 --> 00:12:39,399
name that doesn't exist and I put tags

260
00:12:35,740 --> 00:12:42,068
in there we could just have that thing

261
00:12:39,399 --> 00:12:48,188
show up in the game and it could write

262
00:12:42,068 --> 00:12:50,860
out a temporary PNG that is ready to be

263
00:12:48,188 --> 00:12:53,169
filled in by the artist right because

264
00:12:50,860 --> 00:12:54,550
before we didn't really have much of a

265
00:12:53,169 --> 00:12:56,708
way of doing that we would have just had

266
00:12:54,549 --> 00:12:58,838
to create the PNG ourselves in like

267
00:12:56,708 --> 00:13:00,729
or something I guess but this would give

268
00:12:58,839 --> 00:13:02,920
us a way right from the text editor also

269
00:13:00,730 --> 00:13:04,499
to sort of say look there needs to be

270
00:13:02,919 --> 00:13:09,688
other stuff in here and

271
00:13:04,499 --> 00:13:12,449
just make those right and so that's one

272
00:13:09,688 --> 00:13:14,788
thing we could do and it seems good

273
00:13:12,448 --> 00:13:16,558
because as we develop this what's gonna

274
00:13:14,788 --> 00:13:19,948
happen is we're gonna want to have

275
00:13:16,558 --> 00:13:22,858
things that we need Anna to create our

276
00:13:19,948 --> 00:13:24,718
for but we don't want to wait for her to

277
00:13:22,859 --> 00:13:27,028
make the art for us to actually put it

278
00:13:24,719 --> 00:13:28,589
in the game and get it working and so

279
00:13:27,028 --> 00:13:31,168
this would give us also a really nice

280
00:13:28,589 --> 00:13:33,089
way of just stubbing that out and then

281
00:13:31,168 --> 00:13:35,249
we can just hand the game to her with

282
00:13:33,089 --> 00:13:37,169
those placeholders that are generated

283
00:13:35,249 --> 00:13:40,019
sitting there and she can just open them

284
00:13:37,168 --> 00:13:43,798
up and draw over them and that's all

285
00:13:40,019 --> 00:13:46,078
that needs to happen right and so that

286
00:13:43,798 --> 00:13:48,208
gives us a pretty compelling way to sort

287
00:13:46,078 --> 00:13:50,038
of drive that process potentially and

288
00:13:48,208 --> 00:13:51,508
maybe there are some details that need

289
00:13:50,038 --> 00:13:52,828
to get ironed down in there but that's

290
00:13:51,509 --> 00:13:55,048
something we didn't really have a way to

291
00:13:52,828 --> 00:13:57,088
do quickly in text before we would have

292
00:13:55,048 --> 00:13:58,438
had to create an actual art file and so

293
00:13:57,089 --> 00:14:01,709
this is one thing we might want to think

294
00:13:58,438 --> 00:14:06,418
about is you know can we sort of create

295
00:14:01,708 --> 00:14:09,928
that that opportunity to improve you

296
00:14:06,418 --> 00:14:12,178
know what we were doing and so I think

297
00:14:09,928 --> 00:14:16,318
that's a good idea and I think you know

298
00:14:12,178 --> 00:14:17,848
what we could do is take in the art

299
00:14:16,318 --> 00:14:22,348
directory you know we've got these

300
00:14:17,849 --> 00:14:24,059
template files for example and one of

301
00:14:22,349 --> 00:14:27,449
the things we could do is we could take

302
00:14:24,058 --> 00:14:29,428
those template files we could draw into

303
00:14:27,448 --> 00:14:34,308
the template file some like placeholder

304
00:14:29,428 --> 00:14:37,948
garbage that's just what you know will

305
00:14:34,308 --> 00:14:39,269
what we'll expect to see when we don't

306
00:14:37,948 --> 00:14:43,769
have an asset for something that we

307
00:14:39,269 --> 00:14:46,399
actually want and then we could take

308
00:14:43,769 --> 00:14:49,649
those template files and copy those out

309
00:14:46,399 --> 00:14:51,869
into like when we want to create a stub

310
00:14:49,649 --> 00:14:56,220
we just have the game automatically

311
00:14:51,869 --> 00:14:59,459
copied those template files into the

312
00:14:56,220 --> 00:15:02,819
location that it wanted there to be a

313
00:14:59,458 --> 00:15:07,948
file and that there currently is not a

314
00:15:02,818 --> 00:15:13,639
file right it's so that's that's where

315
00:15:07,948 --> 00:15:17,508
I'm at and yeah I don't think I have

316
00:15:13,639 --> 00:15:17,509
anything else to say about it

317
00:15:17,690 --> 00:15:28,610
I think that's it all right

318
00:15:26,240 --> 00:15:31,039
so let's go ahead and get started I'm

319
00:15:28,610 --> 00:15:32,450
just gonna do the basic thing you know

320
00:15:31,039 --> 00:15:34,099
I'm not going to try to do anything

321
00:15:32,450 --> 00:15:37,360
fancy at first and we'll kind of just

322
00:15:34,100 --> 00:15:40,909
work towards getting to what I just said

323
00:15:37,360 --> 00:15:44,870
if you remember we actually already have

324
00:15:40,909 --> 00:15:48,019
in our project we have a thing that does

325
00:15:44,870 --> 00:15:50,750
parsing right we have a tokenizer and

326
00:15:48,019 --> 00:15:54,139
you can kind of see in here we've got a

327
00:15:50,750 --> 00:15:54,679
bunch of stuff that we use to make it

328
00:15:54,139 --> 00:15:59,899
work

329
00:15:54,679 --> 00:16:02,329
this tokenizer is in our like was in our

330
00:15:59,899 --> 00:16:03,379
meta programming demo that we did where

331
00:16:02,330 --> 00:16:06,710
we just kind of made this simple

332
00:16:03,379 --> 00:16:07,909
preprocessor right thing that we wasn't

333
00:16:06,710 --> 00:16:09,769
designed to actually be used on handmade

334
00:16:07,909 --> 00:16:11,360
hero it was just something that I showed

335
00:16:09,769 --> 00:16:15,439
one time about how you might do meta

336
00:16:11,360 --> 00:16:18,529
programming and so that's already there

337
00:16:15,440 --> 00:16:21,410
and is capable of parsing see like stuff

338
00:16:18,529 --> 00:16:22,970
and so we can just use this code and

339
00:16:21,409 --> 00:16:25,879
make that into a thing that actually

340
00:16:22,970 --> 00:16:28,639
exists inside handmade hero for real and

341
00:16:25,879 --> 00:16:32,029
so that's what I would like to do now if

342
00:16:28,639 --> 00:16:34,429
we look back at what's happening inside

343
00:16:32,029 --> 00:16:39,079
handmade hero I believe you know inside

344
00:16:34,429 --> 00:16:42,139
the asset builder we also do have some

345
00:16:39,080 --> 00:16:44,930
token sort of stuff I don't remember

346
00:16:42,139 --> 00:16:46,939
exactly how we were doing it to

347
00:16:44,929 --> 00:16:48,669
completely honest with you because it's

348
00:16:46,940 --> 00:16:50,510
been a while since we've been

349
00:16:48,669 --> 00:16:53,389
programming handmade here we just got

350
00:16:50,509 --> 00:16:55,220
back from break but if you remember

351
00:16:53,389 --> 00:16:56,779
correctly we got this asset type stuff

352
00:16:55,220 --> 00:17:00,040
and we sort of had a thing here that

353
00:16:56,779 --> 00:17:03,139
would you know do some kind of crappy

354
00:17:00,039 --> 00:17:06,409
HHA like that's it's not in there where

355
00:17:03,139 --> 00:17:11,539
is the actual parse part of things I

356
00:17:06,410 --> 00:17:17,300
don't actually know where it is let me

357
00:17:11,539 --> 00:17:21,250
see what we've got here it's not in the

358
00:17:17,299 --> 00:17:21,250
asset builder anymore is it

359
00:17:24,119 --> 00:17:31,388
might be and non handmade types but it

360
00:17:28,028 --> 00:17:38,859
might be in the HHA stuff which is in

361
00:17:31,388 --> 00:17:40,719
file formats I'm not sure where we

362
00:17:38,859 --> 00:17:47,548
actually put this let me see where we

363
00:17:40,720 --> 00:17:50,379
call a tag ID from name it looks like

364
00:17:47,548 --> 00:17:52,599
it's okay so it's in end tags so here's

365
00:17:50,378 --> 00:17:53,678
the begin tag sirs the end tags I just

366
00:17:52,599 --> 00:17:57,329
want to look at how we're doing the

367
00:17:53,679 --> 00:17:59,460
parsing here so there's pop token right

368
00:17:57,329 --> 00:18:02,259
so you see what I mean we kind of got

369
00:17:59,460 --> 00:18:06,038
code that does this in here as well

370
00:18:02,259 --> 00:18:08,079
right and it pulls tokens off lists in a

371
00:18:06,038 --> 00:18:11,558
pretty undignified fashion right it's

372
00:18:08,079 --> 00:18:16,148
just a simple thing and so you know I

373
00:18:11,558 --> 00:18:18,250
think what we can do is say let's unify

374
00:18:16,148 --> 00:18:21,369
these get a real tokenizer in here

375
00:18:18,250 --> 00:18:22,659
because we already wrote one and then we

376
00:18:21,369 --> 00:18:24,969
know that we're gonna be ignoring file

377
00:18:22,659 --> 00:18:27,580
names from now on so we don't need this

378
00:18:24,970 --> 00:18:30,819
nonsense here anymore so basically this

379
00:18:27,579 --> 00:18:33,009
stuff can kind of go away right so

380
00:18:30,819 --> 00:18:36,878
that's what I want to do so I'm gonna

381
00:18:33,009 --> 00:18:39,548
make a handmade tokenizer here right and

382
00:18:36,878 --> 00:18:41,798
in here we're just gonna populate that

383
00:18:39,548 --> 00:18:45,308
by again going out to the simple

384
00:18:41,798 --> 00:18:48,878
preprocessor and saying let's take a

385
00:18:45,308 --> 00:18:51,099
look at what we had in there now I don't

386
00:18:48,878 --> 00:18:53,349
know so it looks like here's our token

387
00:18:51,099 --> 00:18:55,959
stuff right so I'm gonna pull that stuff

388
00:18:53,349 --> 00:18:59,949
out and one of the things I might do is

389
00:18:55,960 --> 00:19:02,230
we could still leave that this tokenizer

390
00:18:59,950 --> 00:19:03,819
in I mean not leave sometimes we could

391
00:19:02,230 --> 00:19:08,259
still leave the meta permian thing in

392
00:19:03,819 --> 00:19:10,000
place we could still have it work and so

393
00:19:08,259 --> 00:19:13,210
we might want to do that

394
00:19:10,000 --> 00:19:16,000
if we hit build at the moment we still

395
00:19:13,210 --> 00:19:17,259
can build the simple processor I don't

396
00:19:16,000 --> 00:19:21,419
think it actually is being built at the

397
00:19:17,259 --> 00:19:21,419
moment simple pre process or

398
00:19:26,548 --> 00:19:31,599
there's the build line and here's us

399
00:19:29,288 --> 00:19:34,000
running it so let me go ahead and build

400
00:19:31,599 --> 00:19:36,398
it you can see it getting built there so

401
00:19:34,000 --> 00:19:39,038
I can leave it building and I can even

402
00:19:36,398 --> 00:19:41,109
run it if I want to and it produces

403
00:19:39,038 --> 00:19:43,569
handmade generated H which to be honest

404
00:19:41,109 --> 00:19:50,278
with you I assume is still sitting

405
00:19:43,569 --> 00:19:53,439
around here because probably it would be

406
00:19:50,278 --> 00:20:03,880
looks like so did we delete it or is it

407
00:19:53,440 --> 00:20:06,190
in the build so I'm not sure I'm not

408
00:20:03,880 --> 00:20:07,389
sure where this would have been in it is

409
00:20:06,190 --> 00:20:08,710
would have been in build so it would

410
00:20:07,388 --> 00:20:10,778
have created it in the build directory

411
00:20:08,710 --> 00:20:12,009
and I guess we just never run this on

412
00:20:10,778 --> 00:20:14,819
this machine so I'm gonna go ahead and

413
00:20:12,009 --> 00:20:17,769
run it right and see oh that's fantastic

414
00:20:14,819 --> 00:20:19,839
so this is good we've got an old

415
00:20:17,769 --> 00:20:21,849
preprocessor that's kind of necrotic at

416
00:20:19,839 --> 00:20:23,319
this point so let's just get that

417
00:20:21,849 --> 00:20:24,759
reworking and then we'll pull the

418
00:20:23,319 --> 00:20:27,369
tokenizer out and we'll share the

419
00:20:24,759 --> 00:20:28,839
tokenizer across those two projects and

420
00:20:27,369 --> 00:20:31,599
then we'll know that we've got something

421
00:20:28,839 --> 00:20:36,638
that's in good shape so let's go ahead

422
00:20:31,599 --> 00:20:38,319
and do an MS dev on that and and and see

423
00:20:36,638 --> 00:20:41,250
what's going on there so simple

424
00:20:38,319 --> 00:20:44,548
preprocessor we'll load that up and

425
00:20:41,250 --> 00:20:46,480
inside here we'll you know set the

426
00:20:44,548 --> 00:20:49,450
properties to the extent that we need

427
00:20:46,480 --> 00:20:53,139
them I don't actually know what the

428
00:20:49,450 --> 00:20:54,610
properties are it looks like there

429
00:20:53,138 --> 00:20:57,069
aren't any it looks like it just dumps

430
00:20:54,609 --> 00:21:00,908
to standard out I guess might be what

431
00:20:57,069 --> 00:21:03,308
happens so let me see what does it do oh

432
00:21:00,909 --> 00:21:06,210
it just reads these file names

433
00:21:03,308 --> 00:21:06,210
I guess directly

434
00:21:11,130 --> 00:21:15,690
I see so it just couldn't find the files

435
00:21:13,589 --> 00:21:18,178
so it probably just asserted so it's

436
00:21:15,690 --> 00:21:22,440
probably fine if I ran out the entire

437
00:21:18,179 --> 00:21:24,298
thing yeah so never mind it's not

438
00:21:22,440 --> 00:21:25,529
actually crash II it's actually just

439
00:21:24,298 --> 00:21:27,000
asserting which is probably what it

440
00:21:25,529 --> 00:21:29,190
should have done anyway so never mind

441
00:21:27,000 --> 00:21:31,798
all right so that produced handmade

442
00:21:29,190 --> 00:21:33,538
generated eh and so we can look at that

443
00:21:31,798 --> 00:21:35,160
and verify that's actually building

444
00:21:33,538 --> 00:21:37,500
something reasonable

445
00:21:35,160 --> 00:21:39,210
so here's handmade generated eh let's

446
00:21:37,500 --> 00:21:42,599
see it okay so it doesn't have anything

447
00:21:39,210 --> 00:21:45,298
in it that may be intentional because

448
00:21:42,599 --> 00:21:48,119
again handmade the simple preprocessor

449
00:21:45,298 --> 00:21:49,970
was looking for particular tokens to

450
00:21:48,119 --> 00:21:53,158
signify that something should be read

451
00:21:49,970 --> 00:21:55,589
and I think we got rid of those so let's

452
00:21:53,159 --> 00:21:59,640
just add one back in synthetically at

453
00:21:55,589 --> 00:22:04,759
the moment just to make sure that this

454
00:21:59,640 --> 00:22:04,759
thing still works so in here let's see

455
00:22:06,140 --> 00:22:12,990
what's our keyword it's called

456
00:22:08,880 --> 00:22:15,470
introspect and I'm loading like sim

457
00:22:12,990 --> 00:22:19,798
regions so like if I go into sim region

458
00:22:15,470 --> 00:22:24,269
eh if I just put like introspects in

459
00:22:19,798 --> 00:22:26,429
here in a couple of these places then I

460
00:22:24,269 --> 00:22:30,029
should get something I guess in turr

461
00:22:26,429 --> 00:22:31,380
spec needed like a group so you know

462
00:22:30,029 --> 00:22:33,210
maybe I'll just say this is the same

463
00:22:31,380 --> 00:22:38,850
region introspection code or something

464
00:22:33,210 --> 00:22:41,610
like that let's just say and so now if I

465
00:22:38,849 --> 00:22:46,019
look at that generated code if I reload

466
00:22:41,609 --> 00:22:47,339
this hopefully I get something so I

467
00:22:46,019 --> 00:22:48,960
didn't get anything so that makes me

468
00:22:47,339 --> 00:22:50,519
think that this is slightly busted

469
00:22:48,960 --> 00:22:52,558
although it did give us an error so it's

470
00:22:50,519 --> 00:22:56,029
at least parsing this when it said par

471
00:22:52,558 --> 00:22:56,029
struct tokenizer

472
00:22:59,710 --> 00:23:13,370
it looks like it looks like it would

473
00:23:11,089 --> 00:23:15,699
have just print EFT directly in here

474
00:23:13,369 --> 00:23:15,699
right

475
00:23:15,779 --> 00:23:18,899
[Music]

476
00:23:24,690 --> 00:23:28,630
so I'm not 100% certain what's wrong

477
00:23:27,579 --> 00:23:30,849
there so maybe I will

478
00:23:28,630 --> 00:23:35,830
Emma stove that and just see what

479
00:23:30,849 --> 00:23:38,589
happens so I guess I have to set the

480
00:23:35,829 --> 00:23:40,960
directory and I guess that handmade

481
00:23:38,589 --> 00:23:44,559
generated oh you know what the problem

482
00:23:40,960 --> 00:23:46,960
was the handmade generated does get does

483
00:23:44,559 --> 00:23:49,839
get created in here because this is

484
00:23:46,960 --> 00:23:53,680
where it this is where it actually did

485
00:23:49,839 --> 00:23:55,569
the build so the fact that I ran it in

486
00:23:53,680 --> 00:23:58,269
the wrong directory before was the only

487
00:23:55,569 --> 00:24:00,669
reason that it generated this file so I

488
00:23:58,269 --> 00:24:04,869
actually don't want to look at that one

489
00:24:00,670 --> 00:24:07,029
so maybe it actually is fine so if I

490
00:24:04,869 --> 00:24:09,489
look in the current handmade code

491
00:24:07,029 --> 00:24:12,970
directory for handmade generated and

492
00:24:09,490 --> 00:24:14,980
just look at it so there okay so it

493
00:24:12,970 --> 00:24:20,500
totally is still generating everything

494
00:24:14,980 --> 00:24:23,500
just fine and you know off we go

495
00:24:20,500 --> 00:24:26,289
so that's all fine it's so our

496
00:24:23,500 --> 00:24:28,509
introspection code is is just fine

497
00:24:26,289 --> 00:24:32,710
and does exactly what we think it should

498
00:24:28,509 --> 00:24:34,089
do and so let's go ahead and verify that

499
00:24:32,710 --> 00:24:37,960
we can make the tokenizer

500
00:24:34,089 --> 00:24:41,019
work sort of separate from that right so

501
00:24:37,960 --> 00:24:43,480
if in here I want to do a comparison I

502
00:24:41,019 --> 00:24:44,619
can take handmade generated and what I'm

503
00:24:43,480 --> 00:24:46,870
going to do is I'm going to take this

504
00:24:44,619 --> 00:24:48,939
age file that I know is what I expect

505
00:24:46,869 --> 00:24:51,459
this thing to output using the tokenizer

506
00:24:48,940 --> 00:24:54,009
as it was originally intended and I'm

507
00:24:51,460 --> 00:24:57,069
just going to rename it to ma generated

508
00:24:54,009 --> 00:25:00,670
original and that way I can run a diff

509
00:24:57,069 --> 00:25:03,399
against them and see what the difference

510
00:25:00,670 --> 00:25:05,560
is between that one and a new one so for

511
00:25:03,400 --> 00:25:07,690
example if I run the code again it'll

512
00:25:05,559 --> 00:25:09,069
generate the handmade generated and now

513
00:25:07,690 --> 00:25:13,330
what I can do is I don't know if I have

514
00:25:09,069 --> 00:25:14,799
a diff installed in this machine I do so

515
00:25:13,329 --> 00:25:17,019
this is meld I don't know if we've ever

516
00:25:14,799 --> 00:25:18,730
used this on stream before but basically

517
00:25:17,019 --> 00:25:24,519
meld is just a program you can download

518
00:25:18,730 --> 00:25:26,829
for free and if you've never seen a diff

519
00:25:24,519 --> 00:25:28,029
utility before then you won't be

520
00:25:26,829 --> 00:25:30,279
familiar with it but if you ever have

521
00:25:28,029 --> 00:25:32,319
then you know what this is essentially

522
00:25:30,279 --> 00:25:34,119
what it lets you do is load two files or

523
00:25:32,319 --> 00:25:35,589
two directories or you know various

524
00:25:34,119 --> 00:25:38,319
other things and seshu

525
00:25:35,589 --> 00:25:39,869
any differences between them so you can

526
00:25:38,319 --> 00:25:44,379
download it from here at meld merge

527
00:25:39,869 --> 00:25:47,709
there's a get it button and you can get

528
00:25:44,380 --> 00:25:48,970
it and then here is the two buttons this

529
00:25:47,710 --> 00:25:52,750
is the Windows version that we're using

530
00:25:48,970 --> 00:25:55,000
I think we might not be on 3.2 but we're

531
00:25:52,750 --> 00:25:58,179
you know we're something along those

532
00:25:55,000 --> 00:26:01,750
lines and so if I go ahead and open up

533
00:25:58,179 --> 00:26:10,440
meld and say look could you please grab

534
00:26:01,750 --> 00:26:14,640
w handmade code handmade generated dot h

535
00:26:10,440 --> 00:26:17,200
here's the original here is the new one

536
00:26:14,640 --> 00:26:21,370
right so it's the original versus the

537
00:26:17,200 --> 00:26:24,278
new one and then I say compare what I

538
00:26:21,369 --> 00:26:30,038
should be able to do now is I should be

539
00:26:24,278 --> 00:26:32,769
able to let me see I don't know if

540
00:26:30,038 --> 00:26:34,859
there's a refresh button I would hope

541
00:26:32,769 --> 00:26:38,288
that there was but there might not be

542
00:26:34,859 --> 00:26:40,449
okay so f5 does refresh so what I'm

543
00:26:38,288 --> 00:26:44,730
going to do is let's suppose that I

544
00:26:40,450 --> 00:26:50,399
broke the tokenizer right so in here

545
00:26:44,730 --> 00:26:53,950
when it's gonna look for I don't know

546
00:26:50,398 --> 00:26:54,849
when it's gonna look for pointer I just

547
00:26:53,950 --> 00:26:56,649
it's gone

548
00:26:54,849 --> 00:27:00,398
so it'll never it'll never say that

549
00:26:56,648 --> 00:27:04,389
there's a pointer or better yet it just

550
00:27:00,398 --> 00:27:07,109
says that the pointer is like an

551
00:27:04,390 --> 00:27:11,288
identifier or something right

552
00:27:07,109 --> 00:27:13,928
so it's just busted now when I run it

553
00:27:11,288 --> 00:27:15,759
and I and I hit f5 I want to see it

554
00:27:13,929 --> 00:27:19,210
break right

555
00:27:15,759 --> 00:27:22,240
for some reason oh there we go so it's

556
00:27:19,210 --> 00:27:25,390
asking me to reload I say yes and so now

557
00:27:22,240 --> 00:27:28,778
I can see that it's not producing the

558
00:27:25,390 --> 00:27:32,320
correct results so this basically allows

559
00:27:28,778 --> 00:27:34,210
me to set up a standing test to verify

560
00:27:32,319 --> 00:27:37,538
that what I think should be happening

561
00:27:34,210 --> 00:27:39,730
with tokenizer is happening and so that

562
00:27:37,538 --> 00:27:43,329
will allow me to check to make sure that

563
00:27:39,730 --> 00:27:46,210
I haven't broken it as we go

564
00:27:43,329 --> 00:27:48,460
so again just takes a couple seconds to

565
00:27:46,210 --> 00:27:49,059
set that up it's an easy test to get so

566
00:27:48,460 --> 00:27:53,049
I might as well

567
00:27:49,059 --> 00:27:54,940
I'll get it alright so inside handmade

568
00:27:53,049 --> 00:27:57,159
code I'm gonna open up handmade

569
00:27:54,940 --> 00:27:58,740
tokenizer dot HD I already created it

570
00:27:57,160 --> 00:28:01,570
but I guess I didn't save it to a file

571
00:27:58,740 --> 00:28:05,250
and so what I want to do now is I just

572
00:28:01,569 --> 00:28:07,480
want to put the sort of the the base

573
00:28:05,250 --> 00:28:12,069
information that you actually need for

574
00:28:07,480 --> 00:28:14,710
the tokenizer in here and I need to grab

575
00:28:12,069 --> 00:28:17,589
like the support for the tokenizer which

576
00:28:14,710 --> 00:28:21,069
is this stuff and I need to put that

577
00:28:17,589 --> 00:28:24,089
into the C file the corresponding C file

578
00:28:21,069 --> 00:28:27,099
so just cooling these out of the simple

579
00:28:24,089 --> 00:28:29,829
preprocessor and I'm putting them into

580
00:28:27,099 --> 00:28:33,849
this separate code that I will include

581
00:28:29,829 --> 00:28:35,679
in both places so now in here where I've

582
00:28:33,849 --> 00:28:38,500
got this little preprocessor now I'm

583
00:28:35,680 --> 00:28:41,850
just gonna want it to say okay you can

584
00:28:38,500 --> 00:28:47,680
go ahead and grab the handmade tokenizer

585
00:28:41,849 --> 00:28:49,419
and use that instead of having to you

586
00:28:47,680 --> 00:28:51,820
know implement your own and that way

587
00:28:49,420 --> 00:28:55,860
both programs can share it so I'm gonna

588
00:28:51,819 --> 00:28:58,029
go ahead and compile it and I think we

589
00:28:55,859 --> 00:29:00,099
what is what's the problem here

590
00:28:58,029 --> 00:29:01,930
handmade took in our study H I isn't

591
00:29:00,099 --> 00:29:04,480
there a handmade took a nicer dot H it's

592
00:29:01,930 --> 00:29:12,700
right there what's the problem is it not

593
00:29:04,480 --> 00:29:14,880
in the right place so it turns out I put

594
00:29:12,700 --> 00:29:17,440
neither of those in the right place

595
00:29:14,880 --> 00:29:20,160
where did I put them probably in the

596
00:29:17,440 --> 00:29:20,160
build directory huh

597
00:29:24,380 --> 00:29:32,020
where did they go I need some way of in

598
00:29:28,579 --> 00:29:35,538
in for coder to say where stuff is

599
00:29:32,019 --> 00:29:37,849
better I get confused about that a lot

600
00:29:35,538 --> 00:29:39,890
and I don't necessarily know where

601
00:29:37,849 --> 00:29:43,269
things go when they're created once

602
00:29:39,890 --> 00:29:43,270
they're created I don't have to care

603
00:29:48,259 --> 00:29:51,839
so here we are it created them in the

604
00:29:50,579 --> 00:29:55,889
tags rectory because that's where I

605
00:29:51,839 --> 00:29:59,569
happen to be at the time yeah not what I

606
00:29:55,890 --> 00:30:06,020
wanted there we go

607
00:29:59,569 --> 00:30:06,019
so ignoring that slight inconvenience

608
00:30:07,309 --> 00:30:10,349
okay

609
00:30:08,519 --> 00:30:12,450
so the simple preprocessor just gets

610
00:30:10,349 --> 00:30:14,519
compiled again and you know it should be

611
00:30:12,450 --> 00:30:15,660
like I said here it should just be

612
00:30:14,519 --> 00:30:19,019
identical because I haven't done

613
00:30:15,660 --> 00:30:22,310
anything yet right and so the first

614
00:30:19,019 --> 00:30:24,779
thing I want to do is I don't want the

615
00:30:22,309 --> 00:30:26,129
tokenizer to be working on C strings I

616
00:30:24,779 --> 00:30:29,759
want it to be working on length style

617
00:30:26,130 --> 00:30:32,760
strings and so you know you can see that

618
00:30:29,759 --> 00:30:35,069
the tokens themselves already have this

619
00:30:32,759 --> 00:30:38,279
structure they already have a text

620
00:30:35,069 --> 00:30:40,679
length and a text so really the only

621
00:30:38,279 --> 00:30:41,940
problem is that the tokenizer itself

622
00:30:40,680 --> 00:30:44,100
does not work that way

623
00:30:41,940 --> 00:30:48,660
so the tokenizer is based on null

624
00:30:44,099 --> 00:30:50,009
terminated strings so the tokens I can

625
00:30:48,660 --> 00:30:54,140
trivially convert to strings

626
00:30:50,009 --> 00:30:55,289
very easily it's just going to be the

627
00:30:54,140 --> 00:30:57,300
tokenizer

628
00:30:55,289 --> 00:31:00,690
checking that actually needs to get

629
00:30:57,299 --> 00:31:02,369
improved okay so what I need to do here

630
00:31:00,690 --> 00:31:04,890
is I need to look at the definition of

631
00:31:02,369 --> 00:31:06,839
string you can see here that it's just a

632
00:31:04,890 --> 00:31:10,440
buffer and a buffer is just a counting

633
00:31:06,839 --> 00:31:14,279
data right and so what I need to do is I

634
00:31:10,440 --> 00:31:17,730
need to sort of import this as something

635
00:31:14,279 --> 00:31:21,869
that's going to happen into my my code

636
00:31:17,730 --> 00:31:23,789
here and so I sort of need this to

637
00:31:21,869 --> 00:31:25,349
include handmade shared which means that

638
00:31:23,789 --> 00:31:27,599
the simple preprocessor wants that

639
00:31:25,349 --> 00:31:29,819
information right so in here I'm going

640
00:31:27,599 --> 00:31:31,799
to try to do that here's handmade shared

641
00:31:29,819 --> 00:31:33,359
age and I probably will need some other

642
00:31:31,799 --> 00:31:38,730
things like it probably needs like

643
00:31:33,359 --> 00:31:41,579
handmade platform that H probably not

644
00:31:38,730 --> 00:31:46,500
sure so let's take a look at what it's

645
00:31:41,579 --> 00:31:50,639
complaining about there for V fours and

646
00:31:46,500 --> 00:31:52,650
in fact then I think about it really

647
00:31:50,640 --> 00:31:56,310
that buffer stuff should probably be in

648
00:31:52,650 --> 00:31:59,120
the platform part because that's just

649
00:31:56,309 --> 00:32:01,220
sort of a fundamental type

650
00:31:59,119 --> 00:32:04,008
we could obviously just put it in here

651
00:32:01,220 --> 00:32:05,329
now I think about it yeah in fact that

652
00:32:04,009 --> 00:32:08,990
is handmade types why did I think I

653
00:32:05,329 --> 00:32:13,009
needed handmade shared good question

654
00:32:08,990 --> 00:32:14,538
Casey um so if I get handmade types then

655
00:32:13,009 --> 00:32:16,610
I can get the tokenizer and that would

656
00:32:14,538 --> 00:32:18,648
allow me to say look there's a string in

657
00:32:16,609 --> 00:32:21,798
here that's just the value of the token

658
00:32:18,648 --> 00:32:23,898
right and then I should be able to

659
00:32:21,798 --> 00:32:26,329
basically port the code forward without

660
00:32:23,898 --> 00:32:29,768
doing much work just looping through the

661
00:32:26,329 --> 00:32:34,490
errors here that I have and fixing those

662
00:32:29,769 --> 00:32:36,859
so like I said in here if we look at the

663
00:32:34,490 --> 00:32:38,599
type it's just counting data so anywhere

664
00:32:36,859 --> 00:32:40,519
there was a text length is now just

665
00:32:38,599 --> 00:32:44,449
gonna be like you know text length is

666
00:32:40,519 --> 00:32:46,730
gonna be valued count right and really

667
00:32:44,450 --> 00:32:49,009
it's just a straight replacement and

668
00:32:46,730 --> 00:32:51,649
then it should work so then the only

669
00:32:49,009 --> 00:32:53,899
question is well what about text which

670
00:32:51,648 --> 00:32:56,058
is this one that one's a little bit more

671
00:32:53,898 --> 00:32:57,859
difficult because again it's a you eight

672
00:32:56,058 --> 00:33:00,528
pointer because we don't really use care

673
00:32:57,859 --> 00:33:02,359
pointers in handmade here oh but no big

674
00:33:00,528 --> 00:33:04,970
deal right it's still something we can

675
00:33:02,359 --> 00:33:06,798
handle pretty easily so a dot text is

676
00:33:04,970 --> 00:33:09,429
really gonna be a dot value dot data

677
00:33:06,798 --> 00:33:13,460
right

678
00:33:09,429 --> 00:33:15,649
and then we'll compile again so then at

679
00:33:13,460 --> 00:33:23,690
that point really all we have to worry

680
00:33:15,648 --> 00:33:27,109
about you can see well there's really

681
00:33:23,690 --> 00:33:28,429
not many so it's very very few right so

682
00:33:27,109 --> 00:33:29,719
other than the ones that are in the

683
00:33:28,429 --> 00:33:32,179
preprocessor which we'll deal with in a

684
00:33:29,720 --> 00:33:35,269
second you can kind of see that we have

685
00:33:32,179 --> 00:33:36,559
very very few things here that we

686
00:33:35,269 --> 00:33:39,940
actually need to fix and they're all

687
00:33:36,558 --> 00:33:43,190
exactly the same thing they are because

688
00:33:39,940 --> 00:33:48,288
the tokenizer itself is still using a

689
00:33:43,190 --> 00:33:50,509
null terminated string right okay so I'm

690
00:33:48,288 --> 00:33:52,700
gonna kind of cheese this out for a

691
00:33:50,509 --> 00:33:55,069
minute here and say I'm gonna cast these

692
00:33:52,700 --> 00:33:57,379
two you eights knowing full well that

693
00:33:55,069 --> 00:34:05,928
pretty soon I well in fact I might even

694
00:33:57,378 --> 00:34:09,798
do this so we can just see this in a

695
00:34:05,929 --> 00:34:12,378
second and and remove it because I don't

696
00:34:09,798 --> 00:34:18,108
actually want it there

697
00:34:12,378 --> 00:34:21,288
in the long in in the eventual system it

698
00:34:18,108 --> 00:34:24,739
will get removed so I want to oh don't

699
00:34:21,289 --> 00:34:28,960
ask me why I put up Prentiss ease around

700
00:34:24,739 --> 00:34:31,909
that which was not at all necessary and

701
00:34:28,960 --> 00:34:34,278
so now if you look there are no more

702
00:34:31,909 --> 00:34:36,559
errors in the actual tokenizer so the

703
00:34:34,278 --> 00:34:40,398
tokenizer itself is self-contained and

704
00:34:36,559 --> 00:34:42,200
uses the string the only difference that

705
00:34:40,398 --> 00:34:43,578
we're getting errors from now is that

706
00:34:42,199 --> 00:34:47,028
the preprocessor which uses the

707
00:34:43,579 --> 00:34:48,649
tokenizer that is not so if you look at

708
00:34:47,028 --> 00:34:50,418
where that's happening you can see it's

709
00:34:48,648 --> 00:34:52,068
mostly when it goes to try and print

710
00:34:50,418 --> 00:34:54,199
things out you can see that it's

711
00:34:52,068 --> 00:34:56,869
grabbing those things here and having

712
00:34:54,199 --> 00:34:59,838
trouble right but again same text

713
00:34:56,869 --> 00:35:01,818
replacement will work here so where I

714
00:34:59,838 --> 00:35:04,759
was saying dot text length before dot

715
00:35:01,818 --> 00:35:08,298
value dot count will suffice

716
00:35:04,759 --> 00:35:12,409
pretty much for everything no big deal

717
00:35:08,298 --> 00:35:15,079
there right and the same is true for

718
00:35:12,409 --> 00:35:18,879
text so every word that I was seeing dot

719
00:35:15,079 --> 00:35:18,880
text I can do dot value data

720
00:35:24,980 --> 00:35:30,409
lovely and so now of course we can check

721
00:35:27,949 --> 00:35:31,819
and say make sure they're still

722
00:35:30,409 --> 00:35:33,348
identical they should because we haven't

723
00:35:31,820 --> 00:35:35,780
really done anything we just changed a

724
00:35:33,349 --> 00:35:37,579
little tiny bit of it but now let's take

725
00:35:35,780 --> 00:35:41,060
that one extra step and say okay the

726
00:35:37,579 --> 00:35:44,030
tokenizer itself is going to need to

727
00:35:41,059 --> 00:35:46,699
operate on strings not carry stars so

728
00:35:44,030 --> 00:35:48,950
what I need to do now is sort of change

729
00:35:46,699 --> 00:35:50,809
the way in which that tokenizer was

730
00:35:48,949 --> 00:35:53,210
operating which will involve some

731
00:35:50,809 --> 00:35:55,099
significant changes because while some

732
00:35:53,210 --> 00:35:57,409
of the things like these comparisons

733
00:35:55,099 --> 00:36:00,470
will be just fine some of the other

734
00:35:57,409 --> 00:36:06,230
things will not be because there will be

735
00:36:00,469 --> 00:36:08,419
issues regarding how Jimmy regarding how

736
00:36:06,230 --> 00:36:09,800
they check for the end of the stream so

737
00:36:08,420 --> 00:36:12,409
that's really what we got to look at

738
00:36:09,800 --> 00:36:15,849
here okay so looking back at the

739
00:36:12,409 --> 00:36:18,108
tokenizer we want this to take a string

740
00:36:15,849 --> 00:36:20,539
before I do that actually let me just go

741
00:36:18,108 --> 00:36:23,088
ahead and turn this into handmade Caro

742
00:36:20,539 --> 00:36:25,550
internal style we'll turn those in lines

743
00:36:23,088 --> 00:36:29,719
into internals and we'll turn these

744
00:36:25,550 --> 00:36:32,269
pools into b32 X's just so we're more in

745
00:36:29,719 --> 00:36:36,709
line with with the way that we tend to

746
00:36:32,269 --> 00:36:39,889
mark things up in the code similarly

747
00:36:36,710 --> 00:36:42,679
where I've got those intz I'll probably

748
00:36:39,889 --> 00:36:44,150
fix those as well let me do that as I go

749
00:36:42,679 --> 00:36:46,539
through it though it's not very much

750
00:36:44,150 --> 00:36:50,269
code here it won't take very long

751
00:36:46,539 --> 00:36:53,690
okay so we've got this stuff is end of

752
00:36:50,269 --> 00:36:55,190
line is whitespace and so on and what

753
00:36:53,690 --> 00:36:58,849
I'm curious about is do we have

754
00:36:55,190 --> 00:37:01,970
multiples right and what you can see

755
00:36:58,849 --> 00:37:03,559
right here is we absolutely do we've got

756
00:37:01,969 --> 00:37:06,019
two different versions of its whitespace

757
00:37:03,559 --> 00:37:09,858
because hey unsurprisingly we had to do

758
00:37:06,019 --> 00:37:12,608
that before and so we have a version of

759
00:37:09,858 --> 00:37:17,000
is whitespace that's happening inside

760
00:37:12,608 --> 00:37:18,289
some of the shared code here and that's

761
00:37:17,000 --> 00:37:21,139
something that multiple people were

762
00:37:18,289 --> 00:37:22,880
using we've got string hash of and so on

763
00:37:21,139 --> 00:37:26,150
and so you can kind of get the sense

764
00:37:22,880 --> 00:37:28,190
that these sorts of things already are

765
00:37:26,150 --> 00:37:31,338
happening elsewhere and so I don't

766
00:37:28,190 --> 00:37:31,840
really want that to occur also I kind of

767
00:37:31,338 --> 00:37:37,840
want to do

768
00:37:31,840 --> 00:37:39,670
listen here - this stuff should all be I

769
00:37:37,840 --> 00:37:41,920
should really not have in line anywhere

770
00:37:39,670 --> 00:37:44,619
we don't really need in line as a thing

771
00:37:41,920 --> 00:37:48,119
I don't know why we've got it doesn't

772
00:37:44,619 --> 00:37:50,319
really do anything um so anyway let's

773
00:37:48,119 --> 00:37:52,719
let's just look at making sure that we

774
00:37:50,320 --> 00:37:56,320
don't have duplicates here this stuff is

775
00:37:52,719 --> 00:37:59,259
all in the shared code I believe and

776
00:37:56,320 --> 00:38:02,320
again you can kind of see that's in here

777
00:37:59,260 --> 00:38:04,300
we've got a like mostly string sorts of

778
00:38:02,320 --> 00:38:06,840
stuff you can see that there's just a

779
00:38:04,300 --> 00:38:12,850
lot of string based stuff in here so

780
00:38:06,840 --> 00:38:16,570
what file is this actually I'm actually

781
00:38:12,849 --> 00:38:19,239
know which file this is it is handmade

782
00:38:16,570 --> 00:38:21,130
shared so the interesting thing about

783
00:38:19,239 --> 00:38:24,779
handmade shared like looking at it is

784
00:38:21,130 --> 00:38:24,780
that it's almost all string utilities

785
00:38:24,960 --> 00:38:29,579
it's like all string memory utilities

786
00:38:29,610 --> 00:38:37,840
which is kind of kind of odd um so yeah

787
00:38:35,079 --> 00:38:39,549
and if you look at like this stuff is a

788
00:38:37,840 --> 00:38:43,539
little bit out of place like getting the

789
00:38:39,550 --> 00:38:48,330
debug color that's why those like v3 is

790
00:38:43,539 --> 00:38:48,329
before dependencies were in there so

791
00:38:50,309 --> 00:38:56,519
what I kind of want to do is sort of

792
00:38:53,889 --> 00:38:58,779
delineate this code a little bit better

793
00:38:56,519 --> 00:38:59,920
let's find a place for those debug

794
00:38:58,780 --> 00:39:02,590
colors that makes a little bit more

795
00:38:59,920 --> 00:39:08,050
sense how about for example in like some

796
00:39:02,590 --> 00:39:11,070
of the debug actual files like can we

797
00:39:08,050 --> 00:39:11,070
just put that in here

798
00:39:15,030 --> 00:39:19,870
like is there any downside the bat just

799
00:39:17,800 --> 00:39:22,630
what I'm wondering like could I just

800
00:39:19,869 --> 00:39:24,989
have done this and does that work right

801
00:39:22,630 --> 00:39:28,240
and I don't know if that's a problem but

802
00:39:24,989 --> 00:39:29,979
so in entity an in-game editor there's

803
00:39:28,239 --> 00:39:34,809
our third why aren't there is that

804
00:39:29,980 --> 00:39:41,710
because the debug the debug dot H file

805
00:39:34,809 --> 00:39:44,170
wasn't included or what right because

806
00:39:41,710 --> 00:39:49,990
here it is which which one are we in

807
00:39:44,170 --> 00:39:56,829
here have made us CBP yeah I'm not sure

808
00:39:49,989 --> 00:39:59,319
why why that wouldn't be there so debug

809
00:39:56,829 --> 00:40:02,440
dot CPP is there but debug H I guess

810
00:39:59,320 --> 00:40:04,870
isn't so we keep that included kind of

811
00:40:02,440 --> 00:40:06,369
out to the back if so I'm not sure like

812
00:40:04,869 --> 00:40:13,900
we're the best place for that to go

813
00:40:06,369 --> 00:40:19,599
would be right it's a little bit tricky

814
00:40:13,900 --> 00:40:20,769
to say but I really want to split this

815
00:40:19,599 --> 00:40:25,269
into two because I really just don't

816
00:40:20,769 --> 00:40:28,269
find that to be appropriate you know um

817
00:40:25,269 --> 00:40:30,039
what I might do for now is just I might

818
00:40:28,269 --> 00:40:31,570
go ahead and say let's put it in here by

819
00:40:30,039 --> 00:40:35,079
the way this is such busy work and

820
00:40:31,570 --> 00:40:38,470
nonsense like if c plus plus had ever

821
00:40:35,079 --> 00:40:39,880
added a proper parsing model you

822
00:40:38,469 --> 00:40:43,209
wouldn't have to care where things went

823
00:40:39,880 --> 00:40:46,450
right it's kind of ludicrous that you

824
00:40:43,210 --> 00:40:51,010
ever have to but that's just no par for

825
00:40:46,449 --> 00:40:52,569
the course so anyway I can just put them

826
00:40:51,010 --> 00:40:53,830
in handmade for now and they can just

827
00:40:52,570 --> 00:40:55,930
sit there is something that people can

828
00:40:53,829 --> 00:40:58,239
access but that way I don't have to

829
00:40:55,929 --> 00:41:01,269
worry too much about that and then

830
00:40:58,239 --> 00:41:08,349
inside the the preprocessor I'll include

831
00:41:01,269 --> 00:41:11,699
that shared code right and we'll take a

832
00:41:08,349 --> 00:41:11,699
look at what has to happen there

833
00:41:14,510 --> 00:41:21,780
perfect and so now I also am getting an

834
00:41:18,568 --> 00:41:23,250
error on those multiple-- defined

835
00:41:21,780 --> 00:41:25,260
functions which is even better that

836
00:41:23,250 --> 00:41:27,210
means I don't have to go remove them

837
00:41:25,260 --> 00:41:29,579
myself I can have the compiler tell me

838
00:41:27,210 --> 00:41:32,309
that there are two and so all I really

839
00:41:29,579 --> 00:41:36,329
want to do now is say look at the two is

840
00:41:32,309 --> 00:41:40,410
end of lines and I just want to get rid

841
00:41:36,329 --> 00:41:42,568
of one of them I want to get rid of the

842
00:41:40,409 --> 00:41:44,159
one that's in the tokenizer and use the

843
00:41:42,568 --> 00:41:46,308
one that's in the shared set but I just

844
00:41:44,159 --> 00:41:49,529
want to make sure that they're the same

845
00:41:46,309 --> 00:41:52,349
and so there's is white spacing is end

846
00:41:49,530 --> 00:41:54,990
of line so in here I don't know if we've

847
00:41:52,349 --> 00:41:58,740
gotten is alpha anywhere it looks like

848
00:41:54,989 --> 00:42:00,868
we've only got one of those so I would

849
00:41:58,739 --> 00:42:04,798
say these also should probably come out

850
00:42:00,869 --> 00:42:07,170
in here as things that can be used by

851
00:42:04,798 --> 00:42:09,869
anybody and so then we're just left with

852
00:42:07,170 --> 00:42:12,450
the ones that are actual token you know

853
00:42:09,869 --> 00:42:16,380
tokenizer based operations and that's

854
00:42:12,449 --> 00:42:19,318
good so now what I've done again just

855
00:42:16,380 --> 00:42:22,079
really tiny little baby steps that just

856
00:42:19,318 --> 00:42:25,920
get things into a good position I now am

857
00:42:22,079 --> 00:42:27,930
running the the simple preprocessor so I

858
00:42:25,920 --> 00:42:29,970
know there's a test case it's producing

859
00:42:27,929 --> 00:42:33,000
the correct output I know that I've got

860
00:42:29,969 --> 00:42:35,159
a parser running on this tokenizer so I

861
00:42:33,000 --> 00:42:37,739
know that it works and now what I can do

862
00:42:35,159 --> 00:42:39,989
is make that one last change that I

863
00:42:37,739 --> 00:42:42,588
wanted to make and what I want to make

864
00:42:39,989 --> 00:42:46,519
here is a thing that says here is the

865
00:42:42,588 --> 00:42:50,068
input to the tokenizer

866
00:42:46,519 --> 00:42:53,818
and it can run very very straightforward

867
00:42:50,068 --> 00:42:55,769
right so let's go ahead and do that in

868
00:42:53,818 --> 00:43:06,199
here where I create the tokenizer in the

869
00:42:55,769 --> 00:43:06,199
first place wherever that is yeah

870
00:43:06,460 --> 00:43:10,690
so I'm not crazy about this the reason

871
00:43:09,068 --> 00:43:12,279
I'm not crazy about this doesn't give

872
00:43:10,690 --> 00:43:14,318
any structured place for initialization

873
00:43:12,280 --> 00:43:16,900
the tokenizer and I probably want

874
00:43:14,318 --> 00:43:18,159
something like that to happen because

875
00:43:16,900 --> 00:43:19,450
maybe I want to set some additional

876
00:43:18,159 --> 00:43:21,670
parameters or whatever so I probably

877
00:43:19,449 --> 00:43:24,068
want to stop this way of doing

878
00:43:21,670 --> 00:43:25,659
initialization and what I would like to

879
00:43:24,068 --> 00:43:27,969
do is I'd like to move to something a

880
00:43:25,659 --> 00:43:29,409
little bit more specific so I'd like to

881
00:43:27,969 --> 00:43:33,368
be able to oh and let's get rid of these

882
00:43:29,409 --> 00:43:34,509
statics while we're at it - what I'd

883
00:43:33,369 --> 00:43:35,108
like to do is move to something more

884
00:43:34,510 --> 00:43:38,859
like this

885
00:43:35,108 --> 00:43:43,269
hey I'll give you the string - tokenize

886
00:43:38,858 --> 00:43:44,889
you give me back the tokenizer right and

887
00:43:43,269 --> 00:43:48,909
so then I can just say all right the

888
00:43:44,889 --> 00:43:50,500
results is just going to be copying this

889
00:43:48,909 --> 00:43:52,808
in and returning it but at least then I

890
00:43:50,500 --> 00:43:54,429
know I have a structured place where

891
00:43:52,809 --> 00:43:56,890
that's occurring and I can fuss with it

892
00:43:54,429 --> 00:43:59,379
later and so then you hear what we'll do

893
00:43:56,889 --> 00:44:01,808
is we'll say hey let's tokenize this we

894
00:43:59,380 --> 00:44:03,400
want to organize the final contents but

895
00:44:01,809 --> 00:44:05,740
of course the file contents are a string

896
00:44:03,400 --> 00:44:07,900
now so the care star isn't going to cut

897
00:44:05,739 --> 00:44:10,769
it what that also means is read entire

898
00:44:07,900 --> 00:44:13,240
file into the memory and I'll terminate

899
00:44:10,769 --> 00:44:15,548
doesn't need to be none anymore they can

900
00:44:13,239 --> 00:44:18,750
just be read into a fire file into

901
00:44:15,548 --> 00:44:22,389
memory and it can return a string itself

902
00:44:18,750 --> 00:44:24,369
which is nice that means I come up here

903
00:44:22,389 --> 00:44:27,759
and again this simplifies this piece of

904
00:44:24,369 --> 00:44:29,769
code quite nicely for us in here when we

905
00:44:27,760 --> 00:44:31,900
actually do this we no longer need the

906
00:44:29,769 --> 00:44:34,389
plus one instead all we have to do is

907
00:44:31,900 --> 00:44:36,818
actually just do the read and when we

908
00:44:34,389 --> 00:44:39,068
produce that result which we malloc

909
00:44:36,818 --> 00:44:41,289
right we can now just bundle those two

910
00:44:39,068 --> 00:44:44,048
things up into the string result in one

911
00:44:41,289 --> 00:44:46,269
go and so the way we would do that is

912
00:44:44,048 --> 00:44:48,039
say oops that we would not leave

913
00:44:46,269 --> 00:44:51,489
ourselves in command mode otherwise that

914
00:44:48,039 --> 00:44:53,349
happens instead we would say start with

915
00:44:51,489 --> 00:44:54,939
a null result so if we return it the

916
00:44:53,349 --> 00:44:57,510
person knows there is nothing in the

917
00:44:54,940 --> 00:44:59,440
file or we couldn't open it who knows

918
00:44:57,510 --> 00:45:01,599
again this is just for the symbol

919
00:44:59,440 --> 00:45:03,670
processor so we really don't care but

920
00:45:01,599 --> 00:45:05,740
then we say ok the result count is gonna

921
00:45:03,670 --> 00:45:08,318
be whatever the file size was you tell

922
00:45:05,739 --> 00:45:10,479
me the result data is going to be

923
00:45:08,318 --> 00:45:12,818
allocated by this handy little malloc

924
00:45:10,480 --> 00:45:15,490
call here we're gonna read into that

925
00:45:12,818 --> 00:45:18,099
piece of information based on the count

926
00:45:15,489 --> 00:45:19,689
into the data and then instead of saying

927
00:45:18,099 --> 00:45:20,200
a null terminator we're not going to

928
00:45:19,690 --> 00:45:21,429
bother

929
00:45:20,199 --> 00:45:23,679
because now we're returning the size

930
00:45:21,429 --> 00:45:26,440
that means all of this stuff flows

931
00:45:23,679 --> 00:45:29,019
nicely and works exactly as it should

932
00:45:26,440 --> 00:45:31,869
however now you can see all of our

933
00:45:29,019 --> 00:45:34,710
parsing is busted because we change from

934
00:45:31,869 --> 00:45:37,210
having a cursor base null-terminated

935
00:45:34,710 --> 00:45:38,440
input to having a string based input and

936
00:45:37,210 --> 00:45:41,050
now we have to go deal with that but you

937
00:45:38,440 --> 00:45:42,369
can see there isn't much else that's a

938
00:45:41,050 --> 00:45:47,650
problem here

939
00:45:42,369 --> 00:45:49,539
I accidentally here forgot to replace

940
00:45:47,650 --> 00:45:51,130
that result count so that's not really

941
00:45:49,539 --> 00:45:52,750
something we have to address read and

942
00:45:51,130 --> 00:45:56,220
tariff on to memory we've got to rename

943
00:45:52,750 --> 00:46:01,059
and then tokenize we have to fix right

944
00:45:56,219 --> 00:46:06,279
it's just a R that was missing so that's

945
00:46:01,059 --> 00:46:09,400
really it for the mods to the using code

946
00:46:06,280 --> 00:46:11,380
very straightforward which is great but

947
00:46:09,400 --> 00:46:14,559
now we have to go back to the tokenizer

948
00:46:11,380 --> 00:46:16,150
and do the more difficult work so if we

949
00:46:14,559 --> 00:46:18,608
look at what's gonna happen here token

950
00:46:16,150 --> 00:46:21,700
equals is fine because token already was

951
00:46:18,608 --> 00:46:25,029
a string like class and it has to do

952
00:46:21,699 --> 00:46:26,649
this operation anyway we probably don't

953
00:46:25,030 --> 00:46:31,990
have to actually use this anymore

954
00:46:26,650 --> 00:46:35,410
because strings are equal probably

955
00:46:31,989 --> 00:46:39,328
exists for a string you can see it right

956
00:46:35,409 --> 00:46:42,670
here this is the code we actually needed

957
00:46:39,329 --> 00:46:46,440
so I believe that we can effectively say

958
00:46:42,670 --> 00:46:57,869
you don't actually need to call this

959
00:46:46,440 --> 00:46:57,869
instead you know you could just do this

960
00:47:02,849 --> 00:47:08,019
because again we already had that code

961
00:47:05,349 --> 00:47:09,639
now info and you know what it's we even

962
00:47:08,019 --> 00:47:13,869
had an even simpler we already have one

963
00:47:09,639 --> 00:47:18,250
that cracks it for you too so it's it's

964
00:47:13,869 --> 00:47:21,339
actually that it's it's that simple so I

965
00:47:18,250 --> 00:47:28,210
think you know that becomes pretty

966
00:47:21,340 --> 00:47:29,470
obvious and presumably that's all we we

967
00:47:28,210 --> 00:47:31,300
need to do there this code can be

968
00:47:29,469 --> 00:47:32,439
eliminated as soon as I verify that

969
00:47:31,300 --> 00:47:33,700
everything's fine and there wasn't

970
00:47:32,440 --> 00:47:39,190
something strange going here and think

971
00:47:33,699 --> 00:47:40,269
of so that's just fine so now we're down

972
00:47:39,190 --> 00:47:45,820
to the code we actually have to play

973
00:47:40,269 --> 00:47:48,400
with and what you can see here is if you

974
00:47:45,820 --> 00:47:50,680
change from nil terminated strings to

975
00:47:48,400 --> 00:47:52,030
length based strings which I highly

976
00:47:50,679 --> 00:47:55,619
recommend by the way I think length

977
00:47:52,030 --> 00:47:55,620
based rings are the only real way to go

978
00:47:56,039 --> 00:48:01,380
literally everything that you ever do

979
00:47:58,630 --> 00:48:05,920
gets easier with length based strings

980
00:48:01,380 --> 00:48:11,710
except one thing and it's this thing so

981
00:48:05,920 --> 00:48:15,010
checking for tokens by hand is the one

982
00:48:11,710 --> 00:48:16,599
thing that gets harder I don't know

983
00:48:15,010 --> 00:48:19,000
anything else that does every other

984
00:48:16,599 --> 00:48:19,599
piece of code usually gets easier not

985
00:48:19,000 --> 00:48:24,670
this one

986
00:48:19,599 --> 00:48:28,119
right so there you go but that's what's

987
00:48:24,670 --> 00:48:30,159
gonna happen so I in here when we have

988
00:48:28,119 --> 00:48:32,159
to do something like you know whitespace

989
00:48:30,159 --> 00:48:35,500
this obviously will work just fine

990
00:48:32,159 --> 00:48:37,029
because what we can do is anytime we're

991
00:48:35,500 --> 00:48:39,309
looking at one character we can just

992
00:48:37,030 --> 00:48:42,340
first say that this is while there's any

993
00:48:39,309 --> 00:48:47,940
left in the input so here I can say

994
00:48:42,340 --> 00:48:50,410
while you know tokenizer input dot count

995
00:48:47,940 --> 00:48:52,269
that lets me know that there is

996
00:48:50,409 --> 00:48:54,759
something to check in the buffer still

997
00:48:52,269 --> 00:48:56,349
and not nothing

998
00:48:54,760 --> 00:48:59,050
that means anywhere here where I'm

999
00:48:56,349 --> 00:49:00,489
checking at zero will just work but any

1000
00:48:59,050 --> 00:49:05,550
where here where I'm checking at one

1001
00:49:00,489 --> 00:49:09,069
won't right however I can cheat okay

1002
00:49:05,550 --> 00:49:11,890
there's a pretty easy way to cheat one

1003
00:49:09,070 --> 00:49:13,750
character look ahead token lookups and

1004
00:49:11,889 --> 00:49:18,098
that's just pre do it

1005
00:49:13,750 --> 00:49:21,280
so what I can say here is I can say at

1006
00:49:18,099 --> 00:49:23,980
zero equals tokenizer input data zero

1007
00:49:21,280 --> 00:49:28,540
and then I can say at 1 equals tokenizer

1008
00:49:23,980 --> 00:49:31,449
input data 1 the problem is this right

1009
00:49:28,539 --> 00:49:32,829
will crash bomb on a site crash but

1010
00:49:31,449 --> 00:49:36,789
it'll read off the end of the buffer at

1011
00:49:32,829 --> 00:49:39,009
least if the count is not greater than 1

1012
00:49:36,789 --> 00:49:41,289
so what I can do instead is just say

1013
00:49:39,010 --> 00:49:44,080
let's make sure it has to be right token

1014
00:49:41,289 --> 00:49:47,469
as their input count is greater than 1

1015
00:49:44,079 --> 00:49:51,159
then I use this it's otherwise a zero

1016
00:49:47,469 --> 00:49:56,589
right now all of this code just kind of

1017
00:49:51,159 --> 00:49:59,409
works because all I have to do is just

1018
00:49:56,590 --> 00:50:08,050
look at the two pre-prepared values I

1019
00:49:59,409 --> 00:50:23,710
have and everyone's happy right no big

1020
00:50:08,050 --> 00:50:31,390
deal how it we now have the problem of

1021
00:50:23,710 --> 00:50:32,769
how do we advance I probably should have

1022
00:50:31,389 --> 00:50:33,879
done all that removal by the way because

1023
00:50:32,769 --> 00:50:35,050
I'm kind of doing to illustrate a point

1024
00:50:33,880 --> 00:50:36,640
but we're about to do another change

1025
00:50:35,050 --> 00:50:40,420
that will probably make it not be so

1026
00:50:36,639 --> 00:50:43,569
good right so how do I advance now

1027
00:50:40,420 --> 00:50:45,010
because you know I I need to move this

1028
00:50:43,570 --> 00:50:46,030
forward and so like all these statements

1029
00:50:45,010 --> 00:50:48,010
have to have moving forward

1030
00:50:46,030 --> 00:50:50,619
and these things won't get updated

1031
00:50:48,010 --> 00:50:53,020
properly if I update it and then check

1032
00:50:50,619 --> 00:50:54,190
them again right so in addition to be

1033
00:50:53,019 --> 00:50:55,480
able to update each time through the

1034
00:50:54,190 --> 00:50:57,639
loop I have to be able to update it

1035
00:50:55,480 --> 00:51:02,349
maybe more frequently like right here or

1036
00:50:57,639 --> 00:51:06,719
right here right well as you might

1037
00:51:02,349 --> 00:51:09,730
expect I can just make this be more

1038
00:51:06,719 --> 00:51:12,539
systematic I can make the tokenizer

1039
00:51:09,730 --> 00:51:15,219
itself have its read ahead buffer

1040
00:51:12,539 --> 00:51:20,519
actually be something that's updated out

1041
00:51:15,219 --> 00:51:23,439
of the regular buffer right now again

1042
00:51:20,519 --> 00:51:25,119
maybe this is a little bit of a cheating

1043
00:51:23,440 --> 00:51:27,309
kind of thing I don't know how you want

1044
00:51:25,119 --> 00:51:34,990
to look at it

1045
00:51:27,309 --> 00:51:40,469
I just find it to be kind of convenient

1046
00:51:34,989 --> 00:51:42,969
right so what I can do here is say okay

1047
00:51:40,469 --> 00:51:46,869
suppose we left it the way it was and

1048
00:51:42,969 --> 00:51:51,219
just said look let's actually make there

1049
00:51:46,869 --> 00:51:54,609
be a thing in here that is caressed are

1050
00:51:51,219 --> 00:51:56,349
at but maybe it's not really at because

1051
00:51:54,610 --> 00:51:58,420
I want to go through the code and change

1052
00:51:56,349 --> 00:52:02,409
it so that we're not ever incrementing

1053
00:51:58,420 --> 00:52:04,780
that pointer or something right so we'll

1054
00:52:02,409 --> 00:52:09,250
call it something else which is just

1055
00:52:04,780 --> 00:52:10,180
like you know a and there's two of them

1056
00:52:09,250 --> 00:52:14,289
or something right

1057
00:52:10,179 --> 00:52:16,239
then from then on I can just have any

1058
00:52:14,289 --> 00:52:19,480
time I would have been doing a plus plus

1059
00:52:16,239 --> 00:52:22,989
I can just call advance an advance takes

1060
00:52:19,480 --> 00:52:30,750
however many characters to go forward

1061
00:52:22,989 --> 00:52:34,779
right so oops maybe something like that

1062
00:52:30,750 --> 00:52:36,340
advance cares so now any time I was

1063
00:52:34,780 --> 00:52:43,480
doing this I can just call advanced

1064
00:52:36,340 --> 00:52:45,160
cares like so and that moves my

1065
00:52:43,480 --> 00:52:49,449
tokenizer forwards in the same way that

1066
00:52:45,159 --> 00:52:52,179
it used to but I can still keep all of

1067
00:52:49,449 --> 00:52:53,889
the checking exactly the same cuz all I

1068
00:52:52,179 --> 00:52:57,250
have to know is what's the farthest

1069
00:52:53,889 --> 00:53:00,299
ahead that I ever look and I just make

1070
00:52:57,250 --> 00:53:04,690
sure that I actually have that right

1071
00:53:00,300 --> 00:53:07,380
makes sense I'll leave it as that for

1072
00:53:04,690 --> 00:53:10,090
now what what the hey live dangerously

1073
00:53:07,380 --> 00:53:11,829
pretty straightforward right and so then

1074
00:53:10,090 --> 00:53:14,470
if I come down here to this code I can

1075
00:53:11,829 --> 00:53:17,949
do this stuff exactly the same way if I

1076
00:53:14,469 --> 00:53:22,329
want to write I can say okay this is

1077
00:53:17,949 --> 00:53:26,439
this is gonna be advance cares to open

1078
00:53:22,329 --> 00:53:28,299
answer one right so I do this kind of

1079
00:53:26,440 --> 00:53:33,420
nonsense I just say well I need this

1080
00:53:28,300 --> 00:53:37,390
thing to be whatever the actual you know

1081
00:53:33,420 --> 00:53:37,990
string is that I would get instead of

1082
00:53:37,389 --> 00:53:40,480
doing it that way

1083
00:53:37,989 --> 00:53:45,539
why had to say you know what there was

1084
00:53:40,480 --> 00:53:52,929
is just gonna be whatever the input was

1085
00:53:45,539 --> 00:53:55,389
and then you know if the count was valid

1086
00:53:52,929 --> 00:53:57,789
at all it's one so it'll either be 0 or

1087
00:53:55,389 --> 00:54:05,859
1 based on what we have so we initialize

1088
00:53:57,789 --> 00:54:08,440
this basically the same way but we do a

1089
00:54:05,860 --> 00:54:11,620
little check there and so then we say

1090
00:54:08,440 --> 00:54:13,450
all right grab that see out and then

1091
00:54:11,619 --> 00:54:15,759
advance one so we're just gonna eat one

1092
00:54:13,449 --> 00:54:17,949
character I don't really that's the best

1093
00:54:15,760 --> 00:54:19,390
way to do this but that's how we were

1094
00:54:17,949 --> 00:54:19,779
doing it so we'll just stick with that

1095
00:54:19,389 --> 00:54:22,539
for now

1096
00:54:19,780 --> 00:54:24,430
all this stuff just works if it wants to

1097
00:54:22,539 --> 00:54:26,019
read one token if it doesn't want to

1098
00:54:24,429 --> 00:54:28,719
read one token then it has to do this

1099
00:54:26,019 --> 00:54:30,550
sort of thing and that's fine too

1100
00:54:28,719 --> 00:54:31,719
right so again we can kind of do the

1101
00:54:30,550 --> 00:54:34,600
exact same thing that we were doing

1102
00:54:31,719 --> 00:54:36,969
before so at this point we can just say

1103
00:54:34,599 --> 00:54:41,829
that the token value is going to be the

1104
00:54:36,969 --> 00:54:43,809
tokenizer input that just works and it

1105
00:54:41,829 --> 00:54:45,759
just has the wrong count so then all we

1106
00:54:43,809 --> 00:54:48,400
have to do is actually get the count

1107
00:54:45,760 --> 00:54:57,700
correct so as we do this I'll do

1108
00:54:48,400 --> 00:55:00,039
advanced cares advanced cares and in

1109
00:54:57,699 --> 00:55:02,199
here where we're doing this difference

1110
00:55:00,039 --> 00:55:05,769
this difference will now work properly

1111
00:55:02,199 --> 00:55:08,799
so I can just say look the input dot

1112
00:55:05,769 --> 00:55:13,259
data minus the value dot data that gives

1113
00:55:08,800 --> 00:55:20,350
me the correct count for my token and

1114
00:55:13,260 --> 00:55:22,540
we're done right so that should work as

1115
00:55:20,349 --> 00:55:27,190
well in here all of this stuff should

1116
00:55:22,539 --> 00:55:28,929
still work and you can see that nowhere

1117
00:55:27,190 --> 00:55:34,389
in here have we ever looked past that

1118
00:55:28,929 --> 00:55:37,329
second character either right so we

1119
00:55:34,389 --> 00:55:38,799
believe or like you know we don't have

1120
00:55:37,329 --> 00:55:40,210
any reason to believe that that won't

1121
00:55:38,800 --> 00:55:43,000
just be fine

1122
00:55:40,210 --> 00:55:44,769
off we go we do need our parse number in

1123
00:55:43,000 --> 00:55:46,659
here so we should probably enable this

1124
00:55:44,769 --> 00:55:50,170
but we'll cross that bridge in a second

1125
00:55:46,659 --> 00:55:52,548
here and then we're good so now we've

1126
00:55:50,170 --> 00:55:54,679
got the rest of this code doesn't care

1127
00:55:52,548 --> 00:55:59,119
really at all how these things are going

1128
00:55:54,679 --> 00:56:02,539
right okay so what I want to do now is I

1129
00:55:59,119 --> 00:56:04,818
need something here and so what I want

1130
00:56:02,539 --> 00:56:06,890
to do is every time you were gonna do

1131
00:56:04,818 --> 00:56:10,278
this advanced Kerris thing I need to

1132
00:56:06,889 --> 00:56:12,879
make that actually work and so I need

1133
00:56:10,278 --> 00:56:17,748
something up here that's gonna let me do

1134
00:56:12,880 --> 00:56:22,880
that motion right so let me go ahead and

1135
00:56:17,748 --> 00:56:26,538
and speck that in here so if I pass a

1136
00:56:22,880 --> 00:56:28,849
tokenizer and then I pass the like you

1137
00:56:26,539 --> 00:56:32,150
know the count here that I'm trying to

1138
00:56:28,849 --> 00:56:37,219
go forwards then what I want to do is I

1139
00:56:32,150 --> 00:56:39,769
have fundamentally two cases on the one

1140
00:56:37,219 --> 00:56:41,269
hand I've got the case where the count

1141
00:56:39,768 --> 00:56:42,889
is some amount that I could move

1142
00:56:41,268 --> 00:56:45,169
forwards and the other case I have one

1143
00:56:42,889 --> 00:56:47,958
where it would extend past the end of

1144
00:56:45,170 --> 00:56:51,489
the buffer right and so what I want to

1145
00:56:47,958 --> 00:56:54,978
do is say take the tokenizer input I

1146
00:56:51,489 --> 00:56:56,929
know that has a count if my count is

1147
00:56:54,978 --> 00:57:05,718
greater than the count of that thing

1148
00:56:56,929 --> 00:57:09,999
right then I want to clamp it and then

1149
00:57:05,719 --> 00:57:15,650
at the end I want to do a move forward

1150
00:57:09,998 --> 00:57:18,738
by that amount and then I also want to

1151
00:57:15,650 --> 00:57:21,349
reflect the fact that there isn't you

1152
00:57:18,739 --> 00:57:22,608
know I move it forwards and go right now

1153
00:57:21,349 --> 00:57:24,499
that's an operation that we would

1154
00:57:22,608 --> 00:57:27,650
normally have just advancing a string

1155
00:57:24,498 --> 00:57:29,328
and so I think we already have it right

1156
00:57:27,650 --> 00:57:33,259
I wanted to sketch it in there because

1157
00:57:29,329 --> 00:57:36,798
you know I wanted to explain what was

1158
00:57:33,259 --> 00:57:38,349
going on there but you can see here we

1159
00:57:36,798 --> 00:57:43,130
already have a thing that does that

1160
00:57:38,349 --> 00:57:46,699
exact operation right look at this it's

1161
00:57:43,130 --> 00:57:52,670
the same code right furthermore it will

1162
00:57:46,699 --> 00:57:55,130
return I guess the it will return the

1163
00:57:52,670 --> 00:57:58,849
part of the data that it consumed as

1164
00:57:55,130 --> 00:58:01,309
sort of a separate chunk which in this

1165
00:57:58,849 --> 00:58:03,829
case I guess we don't really need but

1166
00:58:01,309 --> 00:58:05,479
there you go so instead of even

1167
00:58:03,829 --> 00:58:06,119
bothering with any of this I can

1168
00:58:05,478 --> 00:58:09,179
actually

1169
00:58:06,119 --> 00:58:12,390
just say look advance this by that and

1170
00:58:09,179 --> 00:58:16,409
that's the end of it right so that's

1171
00:58:12,389 --> 00:58:18,239
even easier because now I don't even

1172
00:58:16,409 --> 00:58:21,108
have to implant that part of the code so

1173
00:58:18,239 --> 00:58:26,308
then the last part of the code I need is

1174
00:58:21,108 --> 00:58:30,719
I need to be able to have that at array

1175
00:58:26,309 --> 00:58:36,210
actually work so I need a way of saying

1176
00:58:30,719 --> 00:58:38,578
after I've moved please refill the at

1177
00:58:36,210 --> 00:58:41,159
buffers so at zero needs to equal

1178
00:58:38,579 --> 00:58:45,869
something and at one needs to equal

1179
00:58:41,159 --> 00:58:48,028
something right and so please do that

1180
00:58:45,869 --> 00:58:50,430
and if I structure it so that I've got

1181
00:58:48,028 --> 00:58:54,268
two of those it means that I can also

1182
00:58:50,429 --> 00:59:01,108
just call that same thing here so that I

1183
00:58:54,268 --> 00:59:04,439
don't have to treat startup separately

1184
00:59:01,108 --> 00:59:06,210
from moot from moving forwards right so

1185
00:59:04,440 --> 00:59:08,700
I'm gonna go ahead and do that here and

1186
00:59:06,210 --> 00:59:11,489
just say look I've got three cases

1187
00:59:08,699 --> 00:59:19,169
because and so I'm just gonna handle all

1188
00:59:11,489 --> 00:59:22,380
three right because why not so the cases

1189
00:59:19,170 --> 00:59:28,139
I have is I have the case where the

1190
00:59:22,380 --> 00:59:34,588
tokenizer value count equals zero I have

1191
00:59:28,139 --> 00:59:37,288
the case oops where it equals one and I

1192
00:59:34,588 --> 00:59:40,159
have everything else in the case where

1193
00:59:37,289 --> 00:59:46,259
it's anything else then it just works

1194
00:59:40,159 --> 00:59:48,659
right no issues in the case where I only

1195
00:59:46,259 --> 00:59:50,849
have one then I can set the first one

1196
00:59:48,659 --> 00:59:53,719
but the second one can't be and if I

1197
00:59:50,849 --> 00:59:59,489
have neither then I can set neither

1198
00:59:53,719 --> 01:00:04,759
right oh and don't ask me why I've typed

1199
00:59:59,489 --> 01:00:04,759
value when it's not value its input

1200
01:00:07,168 --> 01:00:13,748
all right so moving on let's see what

1201
01:00:10,268 --> 01:00:18,218
we've messed up you can kind of see here

1202
01:00:13,748 --> 01:00:20,348
that for some reason I I don't know why

1203
01:00:18,219 --> 01:00:23,019
I did that

1204
01:00:20,349 --> 01:00:24,939
what I actually meant to do was that I

1205
01:00:23,018 --> 01:00:27,668
was trying to assign the value there not

1206
01:00:24,938 --> 01:00:30,668
the rest of it um so when we do this

1207
01:00:27,668 --> 01:00:35,318
advance Chara's bit here

1208
01:00:30,668 --> 01:00:38,469
I forgot my comma looks like that's

1209
01:00:35,318 --> 01:00:42,668
about it and so now we have a parser

1210
01:00:38,469 --> 01:00:44,528
I'm sorry tokenizer that's running using

1211
01:00:42,668 --> 01:00:46,688
fixed length strings instead of null

1212
01:00:44,528 --> 01:00:49,659
terminated now we don't know if it works

1213
01:00:46,688 --> 01:00:50,739
it didn't crash but we don't know if it

1214
01:00:49,659 --> 01:00:52,719
works

1215
01:00:50,739 --> 01:00:55,659
let's check the files are identical so

1216
01:00:52,719 --> 01:00:58,329
it looks like it did correctly produce

1217
01:00:55,659 --> 01:01:00,848
the same results so hopefully that's

1218
01:00:58,329 --> 01:01:04,028
mostly correct now we didn't parse

1219
01:01:00,849 --> 01:01:07,959
numbers we should let's go ahead and

1220
01:01:04,028 --> 01:01:09,400
parse one of these numbers here so what

1221
01:01:07,958 --> 01:01:11,198
I'd like to do if we're gonna parse a

1222
01:01:09,400 --> 01:01:14,709
number I think we already have this

1223
01:01:11,199 --> 01:01:19,438
right we in the shared code there was a

1224
01:01:14,708 --> 01:01:27,448
way to parse like a like a an ASCII

1225
01:01:19,438 --> 01:01:27,449
thing like sp2 from ze right and stuff

1226
01:01:27,568 --> 01:01:38,798
so we've got these here right so we can

1227
01:01:33,219 --> 01:01:42,059
parse numbers well actually no what do I

1228
01:01:38,798 --> 01:01:42,059
care about parsing numbers

1229
01:01:46,190 --> 01:01:53,880
you know I probably do but I'm gonna

1230
01:01:48,869 --> 01:01:55,170
hold off on that because I guess we can

1231
01:01:53,880 --> 01:01:57,088
implement everything we were going to

1232
01:01:55,170 --> 01:01:59,760
implement today or you know the next

1233
01:01:57,088 --> 01:02:02,880
couple days without it so I guess why

1234
01:01:59,760 --> 01:02:08,180
complicate matters so now I have a

1235
01:02:02,880 --> 01:02:10,440
tokenizer that I can use to you know

1236
01:02:08,179 --> 01:02:13,289
grab all of that data that we were

1237
01:02:10,440 --> 01:02:17,159
creating in those tags files so it you

1238
01:02:13,289 --> 01:02:20,940
know in one of these guys here where

1239
01:02:17,159 --> 01:02:23,969
we've got this thing if now I just want

1240
01:02:20,940 --> 01:02:26,639
to parse that thing I should now be able

1241
01:02:23,969 --> 01:02:28,230
to do that now looking at it there's a

1242
01:02:26,639 --> 01:02:31,650
couple things that I'm gonna have to

1243
01:02:28,230 --> 01:02:33,568
augment my tokenizer to handle so let's

1244
01:02:31,650 --> 01:02:36,389
just do a little awed it and say what do

1245
01:02:33,568 --> 01:02:38,849
we got to add so you're looking here and

1246
01:02:36,389 --> 01:02:40,379
you say well we've got some identifiers

1247
01:02:38,849 --> 01:02:43,588
those will just work we've got strings

1248
01:02:40,380 --> 01:02:47,789
those are just work braces semicolons

1249
01:02:43,588 --> 01:02:50,608
equals commas braces semicolons

1250
01:02:47,789 --> 01:02:55,769
we don't have equals and we don't have

1251
01:02:50,608 --> 01:02:58,130
comma right so let's just start by

1252
01:02:55,769 --> 01:02:58,130
adding

1253
01:03:04,150 --> 01:03:08,858
going to the tokenizer it's pretty

1254
01:03:06,458 --> 01:03:16,318
trivial we can add any single character

1255
01:03:08,858 --> 01:03:16,318
things we want you know with no effort

1256
01:03:20,278 --> 01:03:25,449
so that's good and then we just need to

1257
01:03:22,599 --> 01:03:27,880
know do we support comments properly and

1258
01:03:25,449 --> 01:03:30,818
since eat all whitespace we'll skip the

1259
01:03:27,880 --> 01:03:32,709
commas first I can tell we don't have to

1260
01:03:30,818 --> 01:03:36,579
worry about the fact that this is up

1261
01:03:32,708 --> 01:03:42,159
there so should be able to parse this

1262
01:03:36,579 --> 01:03:45,219
whole thing right no issue um so let's

1263
01:03:42,159 --> 01:03:47,618
see we just go into the asset import

1264
01:03:45,219 --> 01:03:49,869
stuff and this probably needs to get

1265
01:03:47,619 --> 01:03:52,660
broken out at this point into like an

1266
01:03:49,869 --> 01:03:54,599
asset import versus the asset loading

1267
01:03:52,659 --> 01:03:57,338
but you know one thing at a time

1268
01:03:54,599 --> 01:03:59,349
so let's suppose we do have some code

1269
01:03:57,338 --> 01:04:04,929
here and we just want to parse one of

1270
01:03:59,349 --> 01:04:07,690
these things and say you know read the

1271
01:04:04,929 --> 01:04:11,190
whole thing let's verify that we can do

1272
01:04:07,690 --> 01:04:15,278
that right so let's suppose we have a

1273
01:04:11,190 --> 01:04:21,219
parse HH t I believe is what it's called

1274
01:04:15,278 --> 01:04:23,469
right and if I want to try and test this

1275
01:04:21,219 --> 01:04:25,420
outside of handmade here oh maybe it

1276
01:04:23,469 --> 01:04:28,179
makes sense for me to just put this you

1277
01:04:25,420 --> 01:04:31,989
know I mean I could even put this in the

1278
01:04:28,179 --> 01:04:35,198
preprocessor right but anyway let's just

1279
01:04:31,989 --> 01:04:36,670
try to make this be something you know

1280
01:04:35,199 --> 01:04:40,650
what actually let's just go let's just

1281
01:04:36,670 --> 01:04:45,249
go for the gusto let's actually put this

1282
01:04:40,650 --> 01:04:48,579
into its own own like handmade hht or

1283
01:04:45,248 --> 01:04:50,468
something right like I don't know and so

1284
01:04:48,579 --> 01:04:51,999
inside here will just write the parser

1285
01:04:50,469 --> 01:04:53,920
and then that way we can include it

1286
01:04:51,998 --> 01:04:58,478
anywhere we want to and it'll just work

1287
01:04:53,920 --> 01:05:01,059
right and that seems good so how will we

1288
01:04:58,478 --> 01:05:02,379
parse this thing well it shouldn't be

1289
01:05:01,059 --> 01:05:04,839
that hard there's not a lot of

1290
01:05:02,380 --> 01:05:06,608
constructs in this thing so what we'll

1291
01:05:04,838 --> 01:05:09,278
say is look you want a person hht a

1292
01:05:06,608 --> 01:05:12,038
great give us the input right just give

1293
01:05:09,278 --> 01:05:14,380
us the give us the thing and furthermore

1294
01:05:12,039 --> 01:05:17,290
I could just say look let's even just

1295
01:05:14,380 --> 01:05:19,119
say that you give me the tokenizer

1296
01:05:17,289 --> 01:05:21,400
so you've prepared it and you're just

1297
01:05:19,119 --> 01:05:22,750
gonna pass me and I'm gonna assume that

1298
01:05:21,400 --> 01:05:25,930
you've prepared to organize that I can

1299
01:05:22,750 --> 01:05:28,119
get tokens from and I don't care how you

1300
01:05:25,929 --> 01:05:32,589
got it into that stage just make sure it

1301
01:05:28,119 --> 01:05:35,799
works right and so let's do that if we

1302
01:05:32,590 --> 01:05:39,880
want to parse this thing then all we

1303
01:05:35,800 --> 01:05:42,789
have to do is say start by grabbing

1304
01:05:39,880 --> 01:05:47,650
tokens off the stream so you know here's

1305
01:05:42,789 --> 01:05:52,480
a token from the tokenizer look at the

1306
01:05:47,650 --> 01:05:54,820
type of the token right as you do and in

1307
01:05:52,480 --> 01:05:57,940
this case you know I could do a switch

1308
01:05:54,820 --> 01:06:00,510
here but really I don't need to um

1309
01:05:57,940 --> 01:06:08,590
because we only support one thing right

1310
01:06:00,510 --> 01:06:11,770
if the token is not an identifier it

1311
01:06:08,590 --> 01:06:13,780
doesn't matter right I mean that's not

1312
01:06:11,769 --> 01:06:16,780
an identifier at the root we don't

1313
01:06:13,780 --> 01:06:20,830
handle so you know this is the end of

1314
01:06:16,780 --> 01:06:25,000
parsing right here and we can choose to

1315
01:06:20,829 --> 01:06:28,659
issue an error or not you know based on

1316
01:06:25,000 --> 01:06:30,909
whether or not it's it's actually the

1317
01:06:28,659 --> 01:06:33,519
end so one way to look at it would be

1318
01:06:30,909 --> 01:06:37,719
well if token end of stream happened

1319
01:06:33,519 --> 01:06:40,509
that's great because that means that

1320
01:06:37,719 --> 01:06:42,789
that was the end of the file so we do

1321
01:06:40,510 --> 01:06:46,470
want to break but otherwise we could say

1322
01:06:42,789 --> 01:06:48,789
look there's an error in that case right

1323
01:06:46,469 --> 01:06:50,049
and that brings up another thing that we

1324
01:06:48,789 --> 01:06:53,679
want to do which is have some way of

1325
01:06:50,050 --> 01:06:56,200
handling how errors work right that's

1326
01:06:53,679 --> 01:06:58,989
something we'd want to do so we'll talk

1327
01:06:56,199 --> 01:07:01,869
about that a second assuming we get an

1328
01:06:58,989 --> 01:07:04,769
identifier then we just want to do some

1329
01:07:01,869 --> 01:07:09,400
way of like parse top-level block right

1330
01:07:04,769 --> 01:07:11,110
and we pass the tokenizer down and we

1331
01:07:09,400 --> 01:07:13,570
pass whatever the type of the thing was

1332
01:07:11,110 --> 01:07:16,690
like whatever that top-level block type

1333
01:07:13,570 --> 01:07:18,640
was right and so then we'd start here

1334
01:07:16,690 --> 01:07:21,490
and we'd say okay we're going to parse

1335
01:07:18,639 --> 01:07:25,210
the top little block that's all well and

1336
01:07:21,489 --> 01:07:27,909
good in the token that we passed down

1337
01:07:25,210 --> 01:07:29,679
here this is now gonna have to look to

1338
01:07:27,909 --> 01:07:33,670
see what kind of token that was

1339
01:07:29,679 --> 01:07:36,669
so of the token types it could be we

1340
01:07:33,670 --> 01:07:43,720
only have unknown set so we're basically

1341
01:07:36,670 --> 01:07:47,858
going to do something like this and this

1342
01:07:43,719 --> 01:07:50,769
would be an unknown type of top-level

1343
01:07:47,858 --> 01:07:53,108
block so in here when I have like token

1344
01:07:50,769 --> 01:07:54,759
equals toucan equals and so on we know

1345
01:07:53,108 --> 01:08:07,088
what those are going to be so it's going

1346
01:07:54,760 --> 01:08:09,460
to be default right block and then some

1347
01:08:07,088 --> 01:08:31,948
host of other things that we've got so

1348
01:08:09,460 --> 01:08:31,948
body character hand cover head item

1349
01:08:34,948 --> 01:08:46,238
obstacles and that's it that's all we've

1350
01:08:40,270 --> 01:08:50,640
got so far right so each of these we

1351
01:08:46,238 --> 01:08:53,019
would have some kind of parsing for

1352
01:08:50,640 --> 01:08:53,710
ambles kind of figure out how we want do

1353
01:08:53,020 --> 01:08:55,810
that

1354
01:08:53,710 --> 01:08:59,039
later on and we may want to roll these

1355
01:08:55,810 --> 01:09:03,310
into an array as well we'll kind of see

1356
01:08:59,039 --> 01:09:04,448
how we want to do that in a second but

1357
01:09:03,310 --> 01:09:05,798
assuming that we want a purse one of

1358
01:09:04,448 --> 01:09:08,408
those we would press it and we'd parse

1359
01:09:05,798 --> 01:09:11,048
the block up until the closing semicolon

1360
01:09:08,408 --> 01:09:14,500
and then in return there right and

1361
01:09:11,048 --> 01:09:20,189
that's all we would have to do should

1362
01:09:14,500 --> 01:09:23,850
call this block type or block token

1363
01:09:20,189 --> 01:09:28,309
so let's see what we've got with respect

1364
01:09:23,850 --> 01:09:33,150
to that information like what do we have

1365
01:09:28,310 --> 01:09:35,780
for the file formats like do we know

1366
01:09:33,149 --> 01:09:38,609
what those different types of things are

1367
01:09:35,779 --> 01:09:41,550
because we probably don't actually write

1368
01:09:38,609 --> 01:09:44,969
in terms of the parsable things but

1369
01:09:41,550 --> 01:09:48,300
maybe we do so I'm gonna go into hamid

1370
01:09:44,970 --> 01:09:50,940
asset and see like where is character as

1371
01:09:48,300 --> 01:09:54,690
a string right and so you can see it

1372
01:09:50,939 --> 01:09:56,699
here it's kind of doing this this

1373
01:09:54,689 --> 01:10:01,169
breakout here where it's got the you

1374
01:09:56,699 --> 01:10:02,819
know the different pieces of like tag

1375
01:10:01,170 --> 01:10:04,770
information that it's kind of generating

1376
01:10:02,819 --> 01:10:08,429
off of the fact that it knows you know

1377
01:10:04,770 --> 01:10:12,810
what the what the block had body a lot

1378
01:10:08,430 --> 01:10:14,970
so you know this is basically what we're

1379
01:10:12,810 --> 01:10:17,370
gonna do so in some sense we could go

1380
01:10:14,970 --> 01:10:19,440
ahead and pull this code into here

1381
01:10:17,369 --> 01:10:21,659
because this is literally exactly what

1382
01:10:19,439 --> 01:10:24,719
we're gonna do and they begin tags end

1383
01:10:21,659 --> 01:10:27,119
tags part of this itself is also exactly

1384
01:10:24,720 --> 01:10:29,460
what we're gonna do because exactly

1385
01:10:27,119 --> 01:10:34,260
which tags are in here that's what's

1386
01:10:29,460 --> 01:10:36,779
gonna get added to the tag set right so

1387
01:10:34,260 --> 01:10:39,449
it depends also on whether we want to do

1388
01:10:36,779 --> 01:10:40,949
an intermediary like whether we want to

1389
01:10:39,449 --> 01:10:44,849
create a standing data structure for

1390
01:10:40,949 --> 01:10:48,750
this or not that you know or whether we

1391
01:10:44,850 --> 01:10:50,550
want to weld it in directly in the you

1392
01:10:48,750 --> 01:10:51,810
know into this code because this is the

1393
01:10:50,550 --> 01:10:55,619
only thing that it really needs to do

1394
01:10:51,810 --> 01:10:59,600
and I don't know the answer to that

1395
01:10:55,619 --> 01:10:59,599
question unfortunately

1396
01:11:14,819 --> 01:11:19,948
that's a little harder to say you know

1397
01:11:21,929 --> 01:11:27,250
I'm gonna I'm gonna kind of put a pause

1398
01:11:24,939 --> 01:11:29,109
on that thought pattern right now but

1399
01:11:27,250 --> 01:11:42,039
this is basically all we're doing right

1400
01:11:29,109 --> 01:11:44,198
it's just this so assuming that we stick

1401
01:11:42,039 --> 01:11:47,140
with that right all of these things are

1402
01:11:44,198 --> 01:11:51,250
then gonna have a parse where they then

1403
01:11:47,140 --> 01:11:53,230
you know get the tags and other things

1404
01:11:51,250 --> 01:11:55,359
that might be associated with them and

1405
01:11:53,229 --> 01:11:56,979
if we go back to the way the hht works

1406
01:11:55,359 --> 01:11:59,349
you can kind of see that you know it has

1407
01:11:56,979 --> 01:12:01,509
like an author and description those can

1408
01:11:59,350 --> 01:12:02,949
appear here and then it has tags those

1409
01:12:01,510 --> 01:12:04,869
are the three things we know about so

1410
01:12:02,948 --> 01:12:06,210
far but we actually have some other

1411
01:12:04,869 --> 01:12:10,000
things that are going to happen as well

1412
01:12:06,210 --> 01:12:12,010
so remember we've got a line points and

1413
01:12:10,000 --> 01:12:15,010
so if we want to go look at what's going

1414
01:12:12,010 --> 01:12:19,210
to happen there we're gonna need to

1415
01:12:15,010 --> 01:12:22,840
store this information as well in here

1416
01:12:19,210 --> 01:12:24,658
so the P percent size and type that's

1417
01:12:22,840 --> 01:12:28,929
going to have to be stored in there

1418
01:12:24,658 --> 01:12:30,609
along with like it just says right there

1419
01:12:28,929 --> 01:12:32,679
these are generally imported from the

1420
01:12:30,609 --> 01:12:36,309
text file augmentation of the PNG right

1421
01:12:32,679 --> 01:12:38,829
and so we're gonna have to store that

1422
01:12:36,310 --> 01:12:40,750
data in here too we don't actually know

1423
01:12:38,829 --> 01:12:44,140
what that looks like yet but it's just

1424
01:12:40,750 --> 01:12:47,250
any textual representation of this so

1425
01:12:44,140 --> 01:12:51,010
it's gotta have these it's got to have

1426
01:12:47,250 --> 01:12:53,890
the scaling value and it's got to have

1427
01:12:51,010 --> 01:12:55,210
the alignment percent value and those

1428
01:12:53,890 --> 01:12:57,340
can just be represented by

1429
01:12:55,210 --> 01:12:59,050
floating-point numbers so that's that's

1430
01:12:57,340 --> 01:13:03,039
the time what I'll have to add the

1431
01:12:59,050 --> 01:13:06,940
actual number parser into the mix

1432
01:13:03,039 --> 01:13:11,130
because it's got to be able to be read

1433
01:13:06,939 --> 01:13:11,129
from this file as it goes

1434
01:13:11,560 --> 01:13:18,190
hmm whoa I did not get much sleep last

1435
01:13:16,699 --> 01:13:22,429
night

1436
01:13:18,189 --> 01:13:24,919
all right so working through that I

1437
01:13:22,430 --> 01:13:26,960
think all of these things basically this

1438
01:13:24,920 --> 01:13:28,850
head part is really more of like a piece

1439
01:13:26,960 --> 01:13:31,399
of type information this head obstacles

1440
01:13:28,850 --> 01:13:34,220
default block that sort of stuff

1441
01:13:31,399 --> 01:13:36,189
right and so what I'm thinking is I

1442
01:13:34,220 --> 01:13:43,039
think we kind of want to just table

1443
01:13:36,189 --> 01:13:47,419
drive that probably and go from there so

1444
01:13:43,039 --> 01:13:57,369
I think what I'd like to do is say you

1445
01:13:47,420 --> 01:13:57,369
know lock type here are my block types

1446
01:13:58,060 --> 01:14:04,130
and since really that's just something

1447
01:14:01,909 --> 01:14:06,559
that lets you know what the default tags

1448
01:14:04,130 --> 01:14:09,770
that should be I can just store the

1449
01:14:06,560 --> 01:14:13,070
deeps fault tag set somewhere and leave

1450
01:14:09,770 --> 01:14:20,270
that so the table driving should be fine

1451
01:14:13,069 --> 01:14:24,279
I don't think we need to you know deal

1452
01:14:20,270 --> 01:14:24,280
with anything more complicated

1453
01:14:30,180 --> 01:14:38,430
so then I can just do you know block

1454
01:14:34,140 --> 01:14:43,440
type index and for each one of the block

1455
01:14:38,430 --> 01:14:49,950
types that we've got then I can do and

1456
01:14:43,439 --> 01:14:58,259
if it's choking equals and say the block

1457
01:14:49,949 --> 01:15:00,479
type block type index order I go ahead

1458
01:14:58,260 --> 01:15:03,630
and check if they are great if they

1459
01:15:00,479 --> 01:15:05,989
aren't no big deal and then you know

1460
01:15:03,630 --> 01:15:09,359
it's an error if we never found one and

1461
01:15:05,989 --> 01:15:11,099
so for now I'll just do like a found

1462
01:15:09,359 --> 01:15:15,329
equals false and here I'll do with found

1463
01:15:11,100 --> 01:15:23,730
equals true and then we'll just say if

1464
01:15:15,329 --> 01:15:26,130
found else you know error and once we've

1465
01:15:23,729 --> 01:15:29,519
got that then what I want to do is say

1466
01:15:26,130 --> 01:15:32,449
well if we found one then we kind of

1467
01:15:29,520 --> 01:15:35,880
need to actually parse the remaining

1468
01:15:32,449 --> 01:15:39,929
components of the block so if I go into

1469
01:15:35,880 --> 01:15:42,930
this hht here I want to be able to grab

1470
01:15:39,930 --> 01:15:45,110
the rest of this stuff so at that part I

1471
01:15:42,930 --> 01:15:48,690
kind of need to do a thing that's like

1472
01:15:45,109 --> 01:15:51,179
going to get each of those pieces I need

1473
01:15:48,689 --> 01:15:53,789
to know what the file name is so I need

1474
01:15:51,180 --> 01:15:55,710
to do a get token there and what you'll

1475
01:15:53,789 --> 01:15:58,649
see if I create this codes you can see a

1476
01:15:55,710 --> 01:16:06,000
pattern emerges I need to do you know an

1477
01:15:58,649 --> 01:16:10,739
open brace right I need to do sort of

1478
01:16:06,000 --> 01:16:17,449
like parse all the fields here and then

1479
01:16:10,739 --> 01:16:21,599
I need to do a like close brace and

1480
01:16:17,449 --> 01:16:24,750
semicolon right and now in order to give

1481
01:16:21,600 --> 01:16:27,030
errors when something doesn't work I

1482
01:16:24,750 --> 01:16:28,500
need to be able to guarantee that this

1483
01:16:27,029 --> 01:16:31,739
is the case so I would be sitting around

1484
01:16:28,500 --> 01:16:35,760
doing stuff like well alright let's you

1485
01:16:31,739 --> 01:16:38,719
know make sure this like string is here

1486
01:16:35,760 --> 01:16:40,630
or whatever let me that's called

1487
01:16:38,720 --> 01:16:44,230
oops

1488
01:16:40,630 --> 01:16:45,880
not my intention I wanted to cognise

1489
01:16:44,229 --> 01:16:48,159
about age there we go

1490
01:16:45,880 --> 01:16:52,079
soo and here I'm like yeah yeah okay so

1491
01:16:48,159 --> 01:16:58,170
there's got to be a token string and

1492
01:16:52,079 --> 01:16:58,170
there's got to be you know an open brace

1493
01:17:00,899 --> 01:17:06,579
and then you know if not there's then

1494
01:17:04,840 --> 01:17:08,500
there's an error but oh wait you know

1495
01:17:06,579 --> 01:17:11,019
then I'm not really saying which one was

1496
01:17:08,500 --> 01:17:18,430
the error right so I'd really need to do

1497
01:17:11,020 --> 01:17:21,280
it like this in order to report that

1498
01:17:18,430 --> 01:17:24,610
error nicely right and you can kind of

1499
01:17:21,279 --> 01:17:26,679
see how that gets fairly tedious and I

1500
01:17:24,609 --> 01:17:29,679
need to do that for all of these it's

1501
01:17:26,680 --> 01:17:33,010
just it's not very satisfying to keep

1502
01:17:29,680 --> 01:17:35,670
doing that reporting and so what I'd

1503
01:17:33,010 --> 01:17:39,550
rather do is just have there be an

1504
01:17:35,670 --> 01:17:45,010
understanding that there is a concept

1505
01:17:39,550 --> 01:17:49,630
inside the tokenizer that when I want

1506
01:17:45,010 --> 01:17:51,760
only one particular type of token oh and

1507
01:17:49,630 --> 01:17:56,170
we already have it that I can just ask

1508
01:17:51,760 --> 01:17:58,000
for just that type of token right and so

1509
01:17:56,170 --> 01:18:01,270
that way I can do a require token I

1510
01:17:58,000 --> 01:18:04,720
don't know why it returns a bool it

1511
01:18:01,270 --> 01:18:09,460
shouldn't it should return the token so

1512
01:18:04,720 --> 01:18:12,510
that's just unfortunate right so what

1513
01:18:09,460 --> 01:18:12,510
this should really do is say

1514
01:18:17,010 --> 01:18:23,820
that right and then it should return the

1515
01:18:21,988 --> 01:18:25,919
token in question that's what should be

1516
01:18:23,819 --> 01:18:28,170
going on unfortunately that wasn't

1517
01:18:25,920 --> 01:18:29,909
what's going on but there you go now I

1518
01:18:28,170 --> 01:18:32,850
do have to then look back at my

1519
01:18:29,909 --> 01:18:34,680
professor and see how was required token

1520
01:18:32,850 --> 01:18:38,160
being used here right yeah you can kind

1521
01:18:34,680 --> 01:18:41,100
of see it was being used in and in these

1522
01:18:38,159 --> 01:18:45,238
cases here where it was like trying to

1523
01:18:41,100 --> 01:18:48,030
open the if block and that's probably

1524
01:18:45,238 --> 01:18:50,129
not what I want to do right like I mean

1525
01:18:48,029 --> 01:18:51,659
you can do it that way if we're going to

1526
01:18:50,130 --> 01:18:57,210
do it that way you would have to at

1527
01:18:51,659 --> 01:18:59,970
least have a way to point to the thing

1528
01:18:57,210 --> 01:19:02,100
that you wanted to actually get so but

1529
01:18:59,970 --> 01:19:04,680
it opens a valid question right and it's

1530
01:19:02,100 --> 01:19:07,110
the other aspect of this so once we

1531
01:19:04,680 --> 01:19:11,010
start getting into the mix you can see

1532
01:19:07,109 --> 01:19:13,019
that two things become clearer one is

1533
01:19:11,010 --> 01:19:27,150
we'd like to be able to do stuff like

1534
01:19:13,020 --> 01:19:29,130
this with this sort of syntax right so I

1535
01:19:27,149 --> 01:19:41,159
want to be able to do that's not what I

1536
01:19:29,130 --> 01:19:44,159
wanted right so once it looks like that

1537
01:19:41,159 --> 01:19:47,399
I want to be able to not have to do this

1538
01:19:44,159 --> 01:19:49,079
and I would like to know at various

1539
01:19:47,399 --> 01:19:51,059
points in time whether I should even

1540
01:19:49,079 --> 01:19:59,189
bother so I might want to be able to do

1541
01:19:51,060 --> 01:20:01,620
something like this and go that would

1542
01:19:59,189 --> 01:20:03,389
allow me to do stuff like require a

1543
01:20:01,619 --> 01:20:05,099
bunch of tokens and then just do one

1544
01:20:03,390 --> 01:20:06,989
check look are we still parsing or did

1545
01:20:05,100 --> 01:20:10,500
we hit an error condition and then don't

1546
01:20:06,988 --> 01:20:16,469
keep trying afterwards right furthermore

1547
01:20:10,500 --> 01:20:18,390
it would let me do this in these loops

1548
01:20:16,470 --> 01:20:20,430
so that if there's an error if they

1549
01:20:18,390 --> 01:20:22,260
don't just loop forever on the error if

1550
01:20:20,430 --> 01:20:26,070
you forgot to put a case they stop

1551
01:20:22,260 --> 01:20:27,420
looping when they hit an error right so

1552
01:20:26,069 --> 01:20:30,449
you can see how you can start to build

1553
01:20:27,420 --> 01:20:31,109
up the tokenizer into a thing that sort

1554
01:20:30,449 --> 01:20:32,609
of has

1555
01:20:31,109 --> 01:20:35,159
more utility than just getting the

1556
01:20:32,609 --> 01:20:39,509
tokens you can also put into there some

1557
01:20:35,159 --> 01:20:44,699
error handling right so I can have here

1558
01:20:39,510 --> 01:20:47,600
a thing that's like error you know and I

1559
01:20:44,699 --> 01:20:50,760
can also have a thing in here that

1560
01:20:47,600 --> 01:20:52,800
stores those errors for me if I want to

1561
01:20:50,760 --> 01:20:57,239
so you know I can have a thing that's

1562
01:20:52,800 --> 01:20:59,130
like structs you know tokenizer air or

1563
01:20:57,239 --> 01:21:00,389
whatever right but since I think we

1564
01:20:59,130 --> 01:21:01,710
already have the notion of a narrow

1565
01:21:00,390 --> 01:21:03,329
stream I think I'll probably just link

1566
01:21:01,710 --> 01:21:06,600
those up together we'll look at that in

1567
01:21:03,329 --> 01:21:09,149
a second but the long and short of it is

1568
01:21:06,600 --> 01:21:11,070
what I want to have is I want to have

1569
01:21:09,149 --> 01:21:14,809
therefore a thing that's like hey

1570
01:21:11,069 --> 01:21:18,509
there's an error call on the tokenizer

1571
01:21:14,810 --> 01:21:20,570
right and it allows me to pass some

1572
01:21:18,510 --> 01:21:23,010
message that says what's wrong

1573
01:21:20,569 --> 01:21:25,649
furthermore I'd like to be able to pass

1574
01:21:23,010 --> 01:21:28,260
the token in question so whatever the

1575
01:21:25,649 --> 01:21:30,569
token was that caused the error at the

1576
01:21:28,260 --> 01:21:32,460
point that I know about it I'd like to

1577
01:21:30,569 --> 01:21:34,349
be able to specify that because it might

1578
01:21:32,460 --> 01:21:36,149
be some token from further back in the

1579
01:21:34,350 --> 01:21:37,650
stream and I don't want to try to I

1580
01:21:36,149 --> 01:21:41,609
don't want a report mirror on token that

1581
01:21:37,649 --> 01:21:43,109
isn't actually the correct one right so

1582
01:21:41,609 --> 01:21:45,960
what this would do at a very minimum is

1583
01:21:43,109 --> 01:21:49,799
set the error to true but beyond that

1584
01:21:45,960 --> 01:21:54,449
it'll be like to do like hook up to an

1585
01:21:49,800 --> 01:21:56,670
air stream right so pretty easy here and

1586
01:21:54,449 --> 01:22:02,340
now what we can do is say all right when

1587
01:21:56,670 --> 01:22:05,880
we get a required token and in here I

1588
01:22:02,340 --> 01:22:09,600
can just say look when I got this token

1589
01:22:05,880 --> 01:22:12,180
that you asked me to get it was not the

1590
01:22:09,600 --> 01:22:14,280
kind I expected it to be right and we

1591
01:22:12,180 --> 01:22:17,579
can get better error messages later if

1592
01:22:14,279 --> 01:22:18,899
we need them by doing more work here but

1593
01:22:17,579 --> 01:22:20,039
at the moment this at least tells us

1594
01:22:18,899 --> 01:22:26,489
exactly what we need to know which is

1595
01:22:20,039 --> 01:22:28,109
what caused the error right okay so

1596
01:22:26,489 --> 01:22:30,119
that's pretty straightforward and now

1597
01:22:28,109 --> 01:22:31,259
this code again becomes very simple we

1598
01:22:30,119 --> 01:22:33,840
can also go back to the simple

1599
01:22:31,260 --> 01:22:38,100
preprocessor and make that work as well

1600
01:22:33,840 --> 01:22:42,029
so when you do if require token here we

1601
01:22:38,100 --> 01:22:44,250
can just make that again be an

1602
01:22:42,029 --> 01:22:47,609
now there's a couple different things we

1603
01:22:44,250 --> 01:22:49,890
can do one is we could say that here

1604
01:22:47,609 --> 01:22:52,739
when you do the open brace if it doesn't

1605
01:22:49,890 --> 01:22:53,910
actually want to do a par struct if it

1606
01:22:52,739 --> 01:22:54,869
doesn't actually want to raise an ear he

1607
01:22:53,909 --> 01:22:58,260
doesn't have to

1608
01:22:54,869 --> 01:23:00,269
we can also retain the old behavior

1609
01:22:58,260 --> 01:23:03,360
under a different thing which is called

1610
01:23:00,270 --> 01:23:04,740
optional token right and if you look at

1611
01:23:03,359 --> 01:23:07,199
what happens here you can see that we

1612
01:23:04,739 --> 01:23:09,029
had one here that didn't produce an

1613
01:23:07,199 --> 01:23:11,670
error message so that can still be after

1614
01:23:09,029 --> 01:23:15,239
token but here we have required token

1615
01:23:11,670 --> 01:23:21,539
and that we can rely on the actual error

1616
01:23:15,239 --> 01:23:23,729
reporting to occur right similarly in

1617
01:23:21,539 --> 01:23:25,979
here we could require that the word is

1618
01:23:23,729 --> 01:23:30,929
struct so you could actually make a

1619
01:23:25,979 --> 01:23:32,909
require identifier I don't know that I

1620
01:23:30,930 --> 01:23:34,350
really care about that so we're probably

1621
01:23:32,909 --> 01:23:37,289
not going to bother but you can see how

1622
01:23:34,350 --> 01:23:40,140
you can start you know continue to lever

1623
01:23:37,289 --> 01:23:45,630
those things up until you had a pretty

1624
01:23:40,140 --> 01:23:48,180
capable little utility there okay so I'm

1625
01:23:45,630 --> 01:23:50,250
gonna go ahead and put the optional

1626
01:23:48,180 --> 01:23:53,539
token part in as well so here we've got

1627
01:23:50,250 --> 01:23:56,010
require token we're also going to have

1628
01:23:53,539 --> 01:23:57,750
that same call that we had before I

1629
01:23:56,010 --> 01:23:59,039
probably just kept it and I could have

1630
01:23:57,750 --> 01:24:03,180
renamed it but I just wasn't thinking at

1631
01:23:59,039 --> 01:24:06,329
the time so here we just say look if the

1632
01:24:03,180 --> 01:24:11,880
token equals is arrow type then it's

1633
01:24:06,329 --> 01:24:13,140
it's the right thing right and we just

1634
01:24:11,880 --> 01:24:15,359
never issue an error so that's just

1635
01:24:13,140 --> 01:24:16,980
saying look here's an optional token if

1636
01:24:15,359 --> 01:24:19,710
it has up being this type you know get a

1637
01:24:16,979 --> 01:24:21,659
token if it's that type go tell me true

1638
01:24:19,710 --> 01:24:22,739
otherwise don't so we can still retain

1639
01:24:21,659 --> 01:24:26,489
that functionality just call it

1640
01:24:22,739 --> 01:24:28,289
something else okay so in here we can

1641
01:24:26,489 --> 01:24:32,309
say that there was an unexpected token

1642
01:24:28,289 --> 01:24:37,739
again so pretty easy on this token we

1643
01:24:32,310 --> 01:24:42,090
just say you know unexpected top token

1644
01:24:37,739 --> 01:24:43,559
you know whatever and in here same thing

1645
01:24:42,090 --> 01:24:45,420
like anything that was happening here

1646
01:24:43,560 --> 01:24:48,750
parse a little top of our block we did

1647
01:24:45,420 --> 01:24:53,550
token equals if we found one otherwise

1648
01:24:48,750 --> 01:24:55,828
here we can say yeah that block type

1649
01:24:53,550 --> 01:24:59,599
that you passed down

1650
01:24:55,828 --> 01:25:03,408
I don't recognize that right

1651
01:24:59,599 --> 01:25:06,900
unrecognized Loctite you know I'm saying

1652
01:25:03,408 --> 01:25:10,319
so off we go with that and then in here

1653
01:25:06,899 --> 01:25:14,308
we now have the way to do this checking

1654
01:25:10,319 --> 01:25:16,198
we want that parsing check to occur and

1655
01:25:14,309 --> 01:25:18,900
so the way we're going to do that again

1656
01:25:16,198 --> 01:25:22,529
is very very straightforward in here we

1657
01:25:18,899 --> 01:25:24,569
just have a be 32 that says hey tell me

1658
01:25:22,529 --> 01:25:28,250
if I'm parsing or not all that has to do

1659
01:25:24,569 --> 01:25:35,698
is say result equals tokenizer error

1660
01:25:28,250 --> 01:25:39,988
right if that's not set we're going done

1661
01:25:35,698 --> 01:25:42,089
deal right so in here the same thing we

1662
01:25:39,988 --> 01:25:44,698
can come in here parse all of the fields

1663
01:25:42,090 --> 01:25:45,900
that we have like so we don't have to

1664
01:25:44,698 --> 01:25:47,578
report in error because we know it would

1665
01:25:45,899 --> 01:25:48,839
have already got reported and then we

1666
01:25:47,578 --> 01:25:51,179
know that we have to require a

1667
01:25:48,840 --> 01:25:55,679
particular way of closing the tokenizer

1668
01:25:51,179 --> 01:26:05,190
here and so we expect to see the close

1669
01:25:55,679 --> 01:26:07,590
brace and the semicolon right so that's

1670
01:26:05,189 --> 01:26:11,729
all we really need to do to get the

1671
01:26:07,590 --> 01:26:13,559
basic parsing flow going now what we

1672
01:26:11,729 --> 01:26:15,118
need is some of the more specialized

1673
01:26:13,559 --> 01:26:19,679
stuff that has to do with what's

1674
01:26:15,118 --> 01:26:20,908
actually inside these files right but

1675
01:26:19,679 --> 01:26:26,730
we're basically good to go

1676
01:26:20,908 --> 01:26:28,529
let me handle that one error there yeah

1677
01:26:26,729 --> 01:26:32,308
so this one doesn't have to do an if

1678
01:26:28,529 --> 01:26:34,408
here this one can actually you know if

1679
01:26:32,309 --> 01:26:40,199
we wanted to do it we would just say it

1680
01:26:34,408 --> 01:26:42,029
like this but I don't even know if we

1681
01:26:40,198 --> 01:26:43,019
needed to do that if we could have

1682
01:26:42,029 --> 01:26:44,250
structure this a little bit differently

1683
01:26:43,020 --> 01:26:45,480
if we want to let's just verify that

1684
01:26:44,250 --> 01:26:47,130
that still works though because we've

1685
01:26:45,479 --> 01:26:48,718
replaced those let's verify that still

1686
01:26:47,130 --> 01:26:50,400
produces two correct results because we

1687
01:26:48,719 --> 01:26:54,599
may have made a little error there or

1688
01:26:50,399 --> 01:26:57,029
something but that's fine okay all right

1689
01:26:54,599 --> 01:27:01,230
so they require to can stuff should

1690
01:26:57,029 --> 01:27:04,590
presumably fine in here we've got the

1691
01:27:01,229 --> 01:27:07,019
case where we found a block that is one

1692
01:27:04,590 --> 01:27:08,159
of the types that we want and so now

1693
01:27:07,020 --> 01:27:09,420
let's just make sure that we can parse

1694
01:27:08,158 --> 01:27:11,609
the actual contents of that

1695
01:27:09,420 --> 01:27:14,670
Blagh and looking in here there's only

1696
01:27:11,609 --> 01:27:18,269
three things that it can actually be so

1697
01:27:14,670 --> 01:27:18,690
when we actually now inside here do our

1698
01:27:18,270 --> 01:27:21,030
loop

1699
01:27:18,689 --> 01:27:23,189
remember we're gonna parse as many of

1700
01:27:21,029 --> 01:27:25,019
these as occur in the block so actually

1701
01:27:23,189 --> 01:27:28,139
we can do this you know what I mean

1702
01:27:25,020 --> 01:27:30,449
where we actually do a while parsing and

1703
01:27:28,140 --> 01:27:31,590
go from there now I'll take this

1704
01:27:30,448 --> 01:27:34,649
opportunity to show you another

1705
01:27:31,590 --> 01:27:35,850
ridiculous trick that's probably too

1706
01:27:34,649 --> 01:27:37,889
clever for its own good and I don't

1707
01:27:35,850 --> 01:27:39,840
necessarily recommend it but I can show

1708
01:27:37,890 --> 01:27:43,170
it to you anyway

1709
01:27:39,840 --> 01:27:44,670
we'll get to that a second so let's say

1710
01:27:43,170 --> 01:27:45,750
I go in here actually know what I

1711
01:27:44,670 --> 01:27:46,829
probably won't even need it now so I

1712
01:27:45,750 --> 01:27:50,100
won't actually show the drinking

1713
01:27:46,829 --> 01:27:52,948
probably but anyway so what we're gonna

1714
01:27:50,100 --> 01:28:01,829
do now is we need everything in here to

1715
01:27:52,948 --> 01:28:06,089
basically be look I let's get a token we

1716
01:28:01,829 --> 01:28:12,529
don't know what it is if it's going to

1717
01:28:06,090 --> 01:28:14,969
be a close brace right good we're done

1718
01:28:12,529 --> 01:28:18,269
otherwise we got work to do

1719
01:28:14,969 --> 01:28:20,460
right and then I can get rid of this so

1720
01:28:18,270 --> 01:28:23,370
as we go through here we can then say

1721
01:28:20,460 --> 01:28:28,739
all right we then therefore expect it to

1722
01:28:23,369 --> 01:28:30,988
be a token identifier and we can process

1723
01:28:28,738 --> 01:28:33,569
that if it's neither of those two things

1724
01:28:30,988 --> 01:28:36,809
we're kind of done right then that's

1725
01:28:33,569 --> 01:28:38,069
just an error that we can't recover from

1726
01:28:36,810 --> 01:28:41,000
because we have no idea what you're

1727
01:28:38,069 --> 01:28:41,000
trying to say here right

1728
01:28:46,908 --> 01:28:54,319
or I guess I could say like expected

1729
01:28:49,880 --> 01:28:56,679
fields name but instead I got this

1730
01:28:54,319 --> 01:28:56,679
garbage

1731
01:28:56,828 --> 01:29:01,189
if I get an actual identifier out of it

1732
01:28:59,630 --> 01:29:03,590
then I can look to see what kind of

1733
01:29:01,189 --> 01:29:05,689
identifiers it actually is now I could

1734
01:29:03,590 --> 01:29:08,239
just skip this and say look it's just

1735
01:29:05,689 --> 01:29:09,888
too token equals instead and that's

1736
01:29:08,238 --> 01:29:17,299
totally valid we know what they are

1737
01:29:09,889 --> 01:29:20,809
they're author description and tags

1738
01:29:17,300 --> 01:29:23,150
right for these two there really isn't

1739
01:29:20,809 --> 01:29:25,699
much to it we're basically just gonna

1740
01:29:23,149 --> 01:29:30,469
get a token that has to it has to be

1741
01:29:25,698 --> 01:29:32,598
equals there's no other thing that's

1742
01:29:30,469 --> 01:29:39,279
allowed there and then it has to be a

1743
01:29:32,599 --> 01:29:43,010
string and then it has to be a semicolon

1744
01:29:39,279 --> 01:29:44,389
that's all that we get right and the

1745
01:29:43,010 --> 01:29:46,429
same is true of the description here

1746
01:29:44,389 --> 01:29:51,679
right that's what we have to do and so

1747
01:29:46,429 --> 01:29:55,010
we can get the description and we can

1748
01:29:51,679 --> 01:29:56,569
get the author and we could do something

1749
01:29:55,010 --> 01:29:57,860
with them but of course at the moment

1750
01:29:56,569 --> 01:30:02,389
we're just parsing so we don't really

1751
01:29:57,859 --> 01:30:03,618
have any thing to do but obviously we're

1752
01:30:02,389 --> 01:30:07,609
going to do something with those in the

1753
01:30:03,618 --> 01:30:10,038
future and then furthermore for our tags

1754
01:30:07,609 --> 01:30:13,939
here we now want to be able to parse

1755
01:30:10,038 --> 01:30:15,948
comma separated lists right and so what

1756
01:30:13,939 --> 01:30:21,558
I want to do there again is just open

1757
01:30:15,948 --> 01:30:22,669
another one of these because I can and

1758
01:30:21,559 --> 01:30:24,559
in here we're just going to continue

1759
01:30:22,670 --> 01:30:26,389
down now what I would like to do is pull

1760
01:30:24,559 --> 01:30:29,029
this out because I don't really want to

1761
01:30:26,389 --> 01:30:30,440
read too many nests in here again just

1762
01:30:29,029 --> 01:30:32,139
matter of personal preference you could

1763
01:30:30,439 --> 01:30:34,569
just leave it in there there's no

1764
01:30:32,139 --> 01:30:37,010
there's no right or wrong answer there

1765
01:30:34,569 --> 01:30:37,998
it makes it a little easier to read and

1766
01:30:37,010 --> 01:30:39,409
one way to move it out in these a little

1767
01:30:37,998 --> 01:30:42,260
harder in because now the person's got

1768
01:30:39,408 --> 01:30:45,558
to go up there so you know this it's

1769
01:30:42,260 --> 01:30:49,880
always a little imperfect in that

1770
01:30:45,559 --> 01:30:51,920
respect but so we have parks tag lists

1771
01:30:49,880 --> 01:30:54,708
we're gonna pass the tokenizer and say

1772
01:30:51,920 --> 01:30:57,699
hey you got a person's tag list for me

1773
01:30:54,708 --> 01:30:57,698
please do so

1774
01:31:02,350 --> 01:31:06,850
and so one of things I want to do here

1775
01:31:03,729 --> 01:31:08,349
is get rid of the equals right and then

1776
01:31:06,850 --> 01:31:10,930
I expect you to eat up the rest of the

1777
01:31:08,350 --> 01:31:14,020
tag list right and so when here again

1778
01:31:10,930 --> 01:31:16,840
I'm gonna say give me a token just you

1779
01:31:14,020 --> 01:31:26,190
know push it forward and then I'm gonna

1780
01:31:16,840 --> 01:31:26,190
say if the token is a semicolon then

1781
01:31:28,470 --> 01:31:38,070
we're done here if the token is an

1782
01:31:32,199 --> 01:31:44,319
identifier then what I need to do is

1783
01:31:38,069 --> 01:31:47,039
call the tag to ID call and if it's

1784
01:31:44,319 --> 01:31:49,359
something else were in trouble because

1785
01:31:47,039 --> 01:32:03,939
there shouldn't be anything else in the

1786
01:31:49,359 --> 01:32:07,179
tag list right or expected tag name at

1787
01:32:03,939 --> 01:32:09,759
that point we just need to know if we

1788
01:32:07,180 --> 01:32:12,400
got an identifier we would require a

1789
01:32:09,760 --> 01:32:17,619
token to be a comma if the next thing

1790
01:32:12,399 --> 01:32:19,079
isn't a semicolon right so there's a

1791
01:32:17,619 --> 01:32:21,010
couple different ways you can do this a

1792
01:32:19,079 --> 01:32:23,079
possibly smarter way than what we do it

1793
01:32:21,010 --> 01:32:24,220
is to have a peek token call we don't

1794
01:32:23,079 --> 01:32:27,100
really need one here so I'm not going to

1795
01:32:24,220 --> 01:32:28,329
bother so I'm just going to call this

1796
01:32:27,100 --> 01:32:32,380
comma Chuck

1797
01:32:28,329 --> 01:32:35,140
and I'm gonna say get the token and then

1798
01:32:32,380 --> 01:32:40,150
I'm gonna say like if comma check dot

1799
01:32:35,140 --> 01:32:41,200
type equals token semicolon then you

1800
01:32:40,149 --> 01:32:44,759
know we're good to go

1801
01:32:41,199 --> 01:32:54,309
else if comma check equals type token

1802
01:32:44,760 --> 01:32:57,539
comma then you know how about it oh this

1803
01:32:54,310 --> 01:32:57,539
actually has to happen here though

1804
01:32:58,210 --> 01:33:01,809
then we're fine

1805
01:32:59,920 --> 01:33:07,690
and I guess actually the way to put it

1806
01:33:01,809 --> 01:33:22,239
would be if it's not a comma at that

1807
01:33:07,689 --> 01:33:23,649
point we've got an issue there's a

1808
01:33:22,238 --> 01:33:26,198
couple other ways you can do that part

1809
01:33:23,649 --> 01:33:27,339
two again all of this stuff is just hey

1810
01:33:26,198 --> 01:33:28,538
when you're writing parsers by hand

1811
01:33:27,340 --> 01:33:30,099
there's a lot of different ways you can

1812
01:33:28,538 --> 01:33:33,069
kind of keep things compressed and not

1813
01:33:30,099 --> 01:33:35,800
have to type too much out and it's

1814
01:33:33,069 --> 01:33:38,889
really up to you which one you use and

1815
01:33:35,800 --> 01:33:41,889
how you want to do it anyway once you've

1816
01:33:38,889 --> 01:33:48,159
got that I think we're we're pretty much

1817
01:33:41,889 --> 01:33:51,420
parsing the file I mean that's it so you

1818
01:33:48,158 --> 01:33:57,670
know like 50 lines of code or something

1819
01:33:51,420 --> 01:33:59,469
and you're done so I don't actually know

1820
01:33:57,670 --> 01:34:02,019
exactly how we want to test this there's

1821
01:33:59,469 --> 01:34:04,239
a couple of ways we could do it what I'm

1822
01:34:02,019 --> 01:34:07,570
gonna do for now is let's just get it

1823
01:34:04,238 --> 01:34:15,459
compiling I'm gonna throw it in here

1824
01:34:07,569 --> 01:34:17,828
as you know handmade hht that's CPP the

1825
01:34:15,460 --> 01:34:21,429
asset system is going to want to call

1826
01:34:17,828 --> 01:34:25,210
that which is fine and we'll just do

1827
01:34:21,429 --> 01:34:31,300
this you know I go up to the hht file

1828
01:34:25,210 --> 01:34:33,368
here I assume those are soon here inside

1829
01:34:31,300 --> 01:34:36,489
here I can just say look this is the

1830
01:34:33,368 --> 01:34:38,710
call to that thing so if you want to

1831
01:34:36,488 --> 01:34:40,839
call it you know be my guest

1832
01:34:38,710 --> 01:34:43,510
and now at least we can compile it and

1833
01:34:40,840 --> 01:34:46,809
go get rid of the obvious compilers

1834
01:34:43,510 --> 01:34:51,059
stuff like that right so let's see what

1835
01:34:46,809 --> 01:34:51,059
the bugs are here we've got

1836
01:34:56,770 --> 01:35:09,770
the use of type Oh ask me why I did that

1837
01:35:04,100 --> 01:35:11,449
I don't know all right so the tokenizer

1838
01:35:09,770 --> 01:35:13,460
undeclared identifier right that's

1839
01:35:11,448 --> 01:35:18,229
because we have not yet put the

1840
01:35:13,460 --> 01:35:20,600
tokenizer in here so in addition we're

1841
01:35:18,229 --> 01:35:21,709
gonna have to put that guy in there and

1842
01:35:20,600 --> 01:35:22,850
that should probably moved up a little

1843
01:35:21,710 --> 01:35:24,550
further because that's going to be more

1844
01:35:22,850 --> 01:35:28,370
of a utility guy so he's going to be

1845
01:35:24,550 --> 01:35:30,679
done it's gonna be used by probably more

1846
01:35:28,369 --> 01:35:36,319
people than just the hhd I would imagine

1847
01:35:30,679 --> 01:35:39,649
but who knows I'm awesome typing those

1848
01:35:36,319 --> 01:35:41,059
two letters in order apparently so let's

1849
01:35:39,649 --> 01:35:43,639
go ahead and take a look at some of

1850
01:35:41,060 --> 01:35:48,080
these so you can kind of see here now

1851
01:35:43,640 --> 01:35:53,630
we've got the conflict and this is good

1852
01:35:48,079 --> 01:35:55,819
because now we're talking about merging

1853
01:35:53,630 --> 01:35:57,380
these two code paths in a sense now we

1854
01:35:55,819 --> 01:35:59,750
don't really care because this code

1855
01:35:57,380 --> 01:36:02,929
paths going away I could just nuke this

1856
01:35:59,750 --> 01:36:08,329
code path and be done with it um but you

1857
01:36:02,929 --> 01:36:09,770
know why not just take this part of the

1858
01:36:08,329 --> 01:36:12,800
code in and make it work in both cases

1859
01:36:09,770 --> 01:36:14,360
right there's no reason not to and so

1860
01:36:12,800 --> 01:36:18,789
what I'm gonna do here is just say all

1861
01:36:14,359 --> 01:36:22,698
right in the in the tokenizer case I

1862
01:36:18,789 --> 01:36:24,289
kind of think yeah maybe I was maybe my

1863
01:36:22,698 --> 01:36:26,119
past self a smarter my for yourself

1864
01:36:24,289 --> 01:36:28,789
maybe this should be called text not

1865
01:36:26,119 --> 01:36:31,599
value why do I think that because the

1866
01:36:28,789 --> 01:36:34,729
text is different than the value right

1867
01:36:31,600 --> 01:36:37,910
and so I might say that this is is a

1868
01:36:34,729 --> 01:36:42,019
little bit more how that should go you

1869
01:36:37,909 --> 01:36:47,119
know you know maybe you want something

1870
01:36:42,020 --> 01:36:49,550
more like this right where you got a

1871
01:36:47,119 --> 01:36:53,260
couple of different value types that can

1872
01:36:49,550 --> 01:36:56,360
happen like an f32 or an S 32 value type

1873
01:36:53,260 --> 01:36:59,980
on the token so let's go ahead and like

1874
01:36:56,359 --> 01:37:02,769
move forward with that as more of the

1875
01:36:59,979 --> 01:37:06,678
idea for how this is going to work right

1876
01:37:02,770 --> 01:37:09,510
and so for these wherever you saw result

1877
01:37:06,679 --> 01:37:13,079
value before so here

1878
01:37:09,510 --> 01:37:15,150
you is gonna have to become f/32 and

1879
01:37:13,079 --> 01:37:20,430
that's all fine you can see that really

1880
01:37:15,149 --> 01:37:22,139
wasn't much of a thing so whatever that

1881
01:37:20,430 --> 01:37:23,850
didn't really happen in very many places

1882
01:37:22,140 --> 01:37:25,530
but now we're gonna have to do is kind

1883
01:37:23,850 --> 01:37:26,850
of retcon that back and pretend to we

1884
01:37:25,529 --> 01:37:28,738
knew what we were doing over here

1885
01:37:26,850 --> 01:37:31,829
so everywhere that we saw something like

1886
01:37:28,738 --> 01:37:33,869
token value that's gonna have to be

1887
01:37:31,829 --> 01:37:37,050
token dot text right

1888
01:37:33,869 --> 01:37:38,880
and so that's unfortunate but again like

1889
01:37:37,050 --> 01:37:40,680
we just we screwed up look you know if

1890
01:37:38,880 --> 01:37:42,060
you screw it up you screw up I'm behind

1891
01:37:40,680 --> 01:37:45,030
my head I can't even see what that last

1892
01:37:42,060 --> 01:37:48,390
one was okay there we go that's fine um

1893
01:37:45,029 --> 01:37:50,488
so again same thing here so like you

1894
01:37:48,390 --> 01:37:56,220
know value dot count is gonna have to be

1895
01:37:50,488 --> 01:37:59,488
a text count right just fix all those

1896
01:37:56,220 --> 01:38:03,239
and similarly here like text dot data

1897
01:37:59,488 --> 01:38:08,639
I'm sorry value data it's gonna have to

1898
01:38:03,238 --> 01:38:10,738
be text dot data and so we're just kind

1899
01:38:08,640 --> 01:38:14,850
of cleaning up that you know worse

1900
01:38:10,738 --> 01:38:16,559
naming using the better one all right so

1901
01:38:14,850 --> 01:38:18,870
here for some reason I did require I

1902
01:38:16,560 --> 01:38:21,690
meant tokenizer it just I typed it wrong

1903
01:38:18,869 --> 01:38:33,059
there so let's just go ahead and fix

1904
01:38:21,689 --> 01:38:35,549
those and get these two things merged so

1905
01:38:33,060 --> 01:38:38,250
what else we got there

1906
01:38:35,550 --> 01:38:41,779
looks like error is busted in that one I

1907
01:38:38,250 --> 01:38:41,779
just missed in one of these

1908
01:38:46,869 --> 01:39:07,130
what is the problem exactly Oh block

1909
01:38:57,079 --> 01:39:07,609
type is not a thing this is supposed to

1910
01:39:07,130 --> 01:39:14,260
be blocked

1911
01:39:07,609 --> 01:39:18,889
okay that's just a naming fail uh I

1912
01:39:14,260 --> 01:39:21,710
think that's about it so now we release

1913
01:39:18,890 --> 01:39:23,690
it to do the parsing process and then we

1914
01:39:21,710 --> 01:39:26,510
have the ingest done and we have to

1915
01:39:23,689 --> 01:39:29,179
decide how we want to actually interface

1916
01:39:26,510 --> 01:39:30,350
it with the main asset system right and

1917
01:39:29,180 --> 01:39:31,640
that's kind of a little bit of a

1918
01:39:30,350 --> 01:39:32,930
boundary value problem you know think

1919
01:39:31,640 --> 01:39:34,579
about both sides like how do we want

1920
01:39:32,930 --> 01:39:36,320
this took up and do we need this parser

1921
01:39:34,579 --> 01:39:39,199
to operate anywhere else or can it just

1922
01:39:36,319 --> 01:39:44,449
literally operate in that one place and

1923
01:39:39,199 --> 01:39:46,159
you know I'm not sure right so I think

1924
01:39:44,449 --> 01:39:49,970
that's all we really need to do here

1925
01:39:46,159 --> 01:39:53,210
let's go ahead and try calling it just

1926
01:39:49,970 --> 01:39:55,250
as a simple matter of course on

1927
01:39:53,210 --> 01:39:58,699
something and see whether or not we can

1928
01:39:55,250 --> 01:40:03,079
get a reasonable result so what I'm

1929
01:39:58,699 --> 01:40:04,130
gonna do because I feel like it because

1930
01:40:03,079 --> 01:40:08,510
I'm going to go into the simple

1931
01:40:04,130 --> 01:40:11,029
preprocessor here and or maybe HHA edit

1932
01:40:08,510 --> 01:40:13,100
and just say let's call it from there

1933
01:40:11,029 --> 01:40:16,340
because it's easier

1934
01:40:13,100 --> 01:40:18,200
so inside HHA edit I think I've got like

1935
01:40:16,340 --> 01:40:22,430
read entire file right you know here it

1936
01:40:18,199 --> 01:40:25,588
is and

1937
01:40:22,430 --> 01:40:25,588
[Music]

1938
01:40:32,199 --> 01:40:37,369
so like looking at how this code works

1939
01:40:34,989 --> 01:40:41,619
I'm thinking maybe I can just drop a

1940
01:40:37,369 --> 01:40:44,269
thing in here that does like a parse and

1941
01:40:41,619 --> 01:40:49,460
maybe we just make that happen

1942
01:40:44,270 --> 01:40:50,510
right so just to give you some just give

1943
01:40:49,460 --> 01:40:52,550
you a little back home I'm sorry my here

1944
01:40:50,510 --> 01:40:57,650
so what if I just add a thing here the

1945
01:40:52,550 --> 01:41:05,860
slack all right yeah like if args 1 you

1946
01:40:57,649 --> 01:41:10,879
know instead of - create is like - I

1947
01:41:05,859 --> 01:41:21,229
don't know check each HT who knew who

1948
01:41:10,880 --> 01:41:23,449
knows great this would be something that

1949
01:41:21,229 --> 01:41:26,000
just runs the parser and then prints out

1950
01:41:23,449 --> 01:41:28,189
the error message just right and just

1951
01:41:26,000 --> 01:41:33,289
because I want a convenient way to run

1952
01:41:28,189 --> 01:41:38,059
this and test it and so you know it

1953
01:41:33,289 --> 01:41:44,449
would do this exact thing here it would

1954
01:41:38,060 --> 01:41:48,280
load that file in and it would have to

1955
01:41:44,449 --> 01:41:51,949
exist we would read it in its entirety

1956
01:41:48,279 --> 01:41:55,039
in fact I really just want the read

1957
01:41:51,949 --> 01:42:00,970
entire file does anyone actually call

1958
01:41:55,039 --> 01:42:00,970
that yes

1959
01:42:12,090 --> 01:42:21,400
so when Reid HHA it calls that but other

1960
01:42:15,488 --> 01:42:24,669
people don't use it or something all

1961
01:42:21,399 --> 01:42:26,078
right who cares anyway so if I was going

1962
01:42:24,670 --> 01:42:30,420
to do this I just say all right get that

1963
01:42:26,078 --> 01:42:30,420
for me I'm gonna say read entire file

1964
01:42:32,248 --> 01:42:51,069
and off you go

1965
01:42:34,479 --> 01:42:57,249
I don't care about any of this I can't

1966
01:42:51,069 --> 01:43:00,130
find it I say that and then here I'll

1967
01:42:57,248 --> 01:43:04,448
just do tokenizer tokenizer it was

1968
01:43:00,130 --> 01:43:09,639
tokenize I'm gonna pretend this returns

1969
01:43:04,448 --> 01:43:12,748
a string and then I'm going to called

1970
01:43:09,639 --> 01:43:12,748
parse hhd

1971
01:43:32,029 --> 01:43:36,539
so this probably needs to be a little

1972
01:43:34,770 --> 01:43:38,940
bit more robust than that

1973
01:43:36,539 --> 01:43:40,380
but I don't know you know maybe we don't

1974
01:43:38,939 --> 01:43:43,500
care super much we could look at that a

1975
01:43:40,380 --> 01:43:45,659
little bit later but now if I did this

1976
01:43:43,500 --> 01:43:46,939
that would give me what I want which is

1977
01:43:45,659 --> 01:43:49,319
the way to run this a little bit more

1978
01:43:46,939 --> 01:43:51,779
straightforwardly and simply right if I

1979
01:43:49,319 --> 01:43:53,489
go back to read entire file and I could

1980
01:43:51,779 --> 01:43:55,469
I could clearly say that this returns a

1981
01:43:53,489 --> 01:43:59,340
string I can't really say that the

1982
01:43:55,470 --> 01:44:02,610
hh-hey edit which already includes these

1983
01:43:59,340 --> 01:44:04,650
things can call that and so I can also

1984
01:44:02,609 --> 01:44:09,359
say in here too that you know handmade

1985
01:44:04,649 --> 01:44:12,269
tokenizer that age and handmade hht that

1986
01:44:09,359 --> 01:44:15,149
a chirp both in there because I already

1987
01:44:12,270 --> 01:44:18,360
have worked all that out so good news

1988
01:44:15,149 --> 01:44:20,519
everyone right so all that stuff is just

1989
01:44:18,359 --> 01:44:24,929
there and here we do read entire file

1990
01:44:20,520 --> 01:44:27,240
like I said this is kind of the the same

1991
01:44:24,930 --> 01:44:29,520
thing so if I just go to the

1992
01:44:27,239 --> 01:44:34,469
preprocessor the one I already had this

1993
01:44:29,520 --> 01:44:36,510
thing is basically the same but it uses

1994
01:44:34,470 --> 01:44:39,449
this file handle like assuming that

1995
01:44:36,510 --> 01:44:42,030
you've already opened it so really it's

1996
01:44:39,449 --> 01:44:45,689
just this code again exactly this code

1997
01:44:42,029 --> 01:44:55,469
again and so I should be able to just do

1998
01:44:45,689 --> 01:44:58,469
that here right like that and you can

1999
01:44:55,470 --> 01:45:01,070
see that this code is exactly the same

2000
01:44:58,470 --> 01:45:01,070
oops

2001
01:45:01,159 --> 01:45:14,449
so that's all good and this code gives

2002
01:45:11,460 --> 01:45:14,449
also exactly the same

2003
01:45:15,180 --> 01:45:21,390
so there you go so if we do the read

2004
01:45:18,880 --> 01:45:26,310
entire file on that then we've got that

2005
01:45:21,390 --> 01:45:26,310
ability to you know call that

2006
01:45:26,850 --> 01:45:30,970
tribulation to our file the fact that

2007
01:45:29,560 --> 01:45:33,460
that's clogging of datastore doesn't

2008
01:45:30,970 --> 01:45:36,970
matter we can just say that and it still

2009
01:45:33,460 --> 01:45:39,730
would work so we have the ability to

2010
01:45:36,970 --> 01:45:42,340
load it this way here we need to do the

2011
01:45:39,729 --> 01:45:44,109
open file so we do need this and that is

2012
01:45:42,340 --> 01:45:45,460
good actually because that loves to

2013
01:45:44,109 --> 01:45:48,429
check for the error which is what we

2014
01:45:45,460 --> 01:45:50,649
wanted to do so here we can do this and

2015
01:45:48,430 --> 01:45:55,000
print out the error message if we can't

2016
01:45:50,649 --> 01:45:58,149
find it so you know can't open file and

2017
01:45:55,000 --> 01:46:01,060
then here we'll get the file out we can

2018
01:45:58,149 --> 01:46:03,069
load it in and then we can F close it

2019
01:46:01,060 --> 01:46:05,530
not that it matters because it's not a

2020
01:46:03,069 --> 01:46:08,439
big deal so death in this case is

2021
01:46:05,529 --> 01:46:11,769
actually source because we're not doing

2022
01:46:08,439 --> 01:46:16,359
anything to the file all right so that

2023
01:46:11,770 --> 01:46:29,910
should work let's see I've got an issue

2024
01:46:16,359 --> 01:46:35,109
somewhere here I was missing a open

2025
01:46:29,909 --> 01:46:41,920
paren there we go and let's see so can't

2026
01:46:35,109 --> 01:46:47,859
convert argument oh nice so I think that

2027
01:46:41,920 --> 01:46:53,289
does it and now we could if we want to

2028
01:46:47,859 --> 01:46:55,920
just run this code and should probably

2029
01:46:53,289 --> 01:47:00,550
also at some point nuke the

2030
01:46:55,920 --> 01:47:03,340
introspection marker or spit anyway so

2031
01:47:00,550 --> 01:47:05,409
once I've got that under control I

2032
01:47:03,340 --> 01:47:07,060
should be able to call it check hht

2033
01:47:05,409 --> 01:47:09,010
which means I can step through the code

2034
01:47:07,060 --> 01:47:12,760
and debugger and see what actually

2035
01:47:09,010 --> 01:47:16,869
happens so if I go into here and say all

2036
01:47:12,760 --> 01:47:18,550
right let's load up a che edit which it

2037
01:47:16,869 --> 01:47:23,109
looks like we don't have in here so let

2038
01:47:18,550 --> 01:47:28,090
me actually call it chemist of W build a

2039
01:47:23,109 --> 01:47:30,969
che che edit dot exe so if I say

2040
01:47:28,090 --> 01:47:34,650
the properties on the sky and set the

2041
01:47:30,970 --> 01:47:38,010
parameters to like - Shrek hht and I say

2042
01:47:34,649 --> 01:47:41,369
you know we'll start with simple one

2043
01:47:38,010 --> 01:47:49,420
intro cutscene

2044
01:47:41,369 --> 01:47:53,109
hht yeah so start with a simple one and

2045
01:47:49,420 --> 01:47:55,989
try to run that so let's just step in

2046
01:47:53,109 --> 01:47:58,119
there and see and then we'll save for

2047
01:47:55,989 --> 01:48:00,069
next week the issue of how to integrate

2048
01:47:58,119 --> 01:48:02,979
things and how to debug this a little

2049
01:48:00,069 --> 01:48:04,719
bit more further right so let's try to

2050
01:48:02,979 --> 01:48:06,909
open it we're gonna read the entire file

2051
01:48:04,720 --> 01:48:11,860
we look at what the contents are or we

2052
01:48:06,909 --> 01:48:13,960
try to let's see here all right chances

2053
01:48:11,859 --> 01:48:15,579
aren't that is because we are not

2054
01:48:13,960 --> 01:48:17,800
building in debug mode and of course

2055
01:48:15,579 --> 01:48:20,909
Visual Studio can never find the results

2056
01:48:17,800 --> 01:48:24,100
of anything if you're not in debug mode

2057
01:48:20,909 --> 01:48:26,739
might as well not even be there alright

2058
01:48:24,100 --> 01:48:30,039
so let's go ahead and run

2059
01:48:26,739 --> 01:48:32,739
oops let's go ahead and run here we are

2060
01:48:30,039 --> 01:48:37,000
loading the contents there looks pretty

2061
01:48:32,739 --> 01:48:38,829
good we're going to the tokenizer let's

2062
01:48:37,000 --> 01:48:41,439
look at that refill make sure that works

2063
01:48:38,829 --> 01:48:42,519
okay should work fine and so you know if

2064
01:48:41,439 --> 01:48:45,069
we look at the state of the tokenizer

2065
01:48:42,520 --> 01:48:46,870
here you can see loading those first two

2066
01:48:45,069 --> 01:48:50,769
characters in setting the error to

2067
01:48:46,869 --> 01:48:53,609
nothing so then we go into the parse hht

2068
01:48:50,770 --> 01:48:55,810
we say let's see what we've got we

2069
01:48:53,609 --> 01:49:03,039
immediately get a token back and that

2070
01:48:55,810 --> 01:49:05,470
token is plate right 5 and there's the

2071
01:49:03,039 --> 01:49:07,720
pointer so we go to parse top level

2072
01:49:05,470 --> 01:49:09,820
block oh we didn't put plate in there

2073
01:49:07,720 --> 01:49:12,490
right we don't have plate yet we got to

2074
01:49:09,819 --> 01:49:15,880
put plate in there I didn't check that

2075
01:49:12,489 --> 01:49:21,909
one so we do want pleat as an as a valid

2076
01:49:15,880 --> 01:49:24,569
top-level block there we go and so let's

2077
01:49:21,909 --> 01:49:24,569
try that one more time

2078
01:49:26,729 --> 01:49:34,779
set a breakpoint here

2079
01:49:30,119 --> 01:49:37,479
okay so after initializing this I guess

2080
01:49:34,779 --> 01:49:38,889
I'll run to here we're going to loop

2081
01:49:37,479 --> 01:49:41,039
through and see if we find anything I'll

2082
01:49:38,890 --> 01:49:44,260
skip to the to the exciting conclusion

2083
01:49:41,039 --> 01:49:46,239
find is true or found is true so we did

2084
01:49:44,260 --> 01:49:47,800
find it we then have to require that

2085
01:49:46,239 --> 01:49:51,550
this thing is a string did we get back a

2086
01:49:47,800 --> 01:49:54,130
string turns out we did everyone's happy

2087
01:49:51,550 --> 01:49:56,590
so then we can continue parsing we get

2088
01:49:54,130 --> 01:50:01,420
the token back we look at what it is it

2089
01:49:56,590 --> 01:50:06,119
says it's a closed brace why do I not

2090
01:50:01,420 --> 01:50:06,119
believe you is that actually true

2091
01:50:16,670 --> 01:50:30,819
where's the where's the actual contents

2092
01:50:24,618 --> 01:50:30,819
of this file am I missing something

2093
01:50:39,000 --> 01:50:47,239
parce hht here's the file contents

2094
01:50:52,529 --> 01:51:10,259
so this is what I expected to see in

2095
01:50:56,670 --> 01:51:35,690
that file right where is it where is

2096
01:51:10,260 --> 01:51:35,690
that data I'm so confused right now okay

2097
01:51:42,850 --> 01:51:48,520
to someone want to tell me what's going

2098
01:51:45,279 --> 01:51:55,750
on is this just a for coder thing or

2099
01:51:48,520 --> 01:52:00,100
something so if I were to open another

2100
01:51:55,750 --> 01:52:03,789
for coder and go to tags in chore

2101
01:52:00,100 --> 01:52:09,210
cutscene it just wouldn't show up if I

2102
01:52:03,789 --> 01:52:09,210
was to open note pad would it show up

2103
01:52:11,100 --> 01:52:14,670
asking for a friend

2104
01:52:24,060 --> 01:52:29,320
well I don't know

2105
01:52:27,159 --> 01:52:31,359
that's a weird fur coder thing I'm

2106
01:52:29,319 --> 01:52:32,259
creeped out I don't know what's

2107
01:52:31,359 --> 01:52:34,089
happening there

2108
01:52:32,260 --> 01:52:35,920
so we'll have to look into that as a

2109
01:52:34,090 --> 01:52:38,619
separate thing but the good news is our

2110
01:52:35,920 --> 01:52:41,260
parser worked because it actually is a

2111
01:52:38,619 --> 01:52:43,809
close race is the next thing so it broke

2112
01:52:41,260 --> 01:52:45,690
out of this and it requires a token

2113
01:52:43,810 --> 01:52:48,580
semicolon I don't think there was one

2114
01:52:45,689 --> 01:52:51,909
actually so it sets an error which is

2115
01:52:48,579 --> 01:52:54,489
correct and we would have had the error

2116
01:52:51,909 --> 01:52:57,609
that there was expected semicolon we

2117
01:52:54,489 --> 01:53:00,760
then break out and we're done right

2118
01:52:57,609 --> 01:53:04,239
so I might set a breakpoint at the error

2119
01:53:00,760 --> 01:53:06,250
function and say let's run there it

2120
01:53:04,239 --> 01:53:09,189
should be an error and the error is that

2121
01:53:06,250 --> 01:53:10,569
there was a missing sound the error was

2122
01:53:09,189 --> 01:53:13,419
that there was unexpected token Tech has

2123
01:53:10,569 --> 01:53:18,159
expected a semicolon didn't get one

2124
01:53:13,420 --> 01:53:20,079
and so that's correct let's try loading

2125
01:53:18,159 --> 01:53:26,289
the more difficult one and see where

2126
01:53:20,079 --> 01:53:31,059
that gets to so here's our base game hht

2127
01:53:26,289 --> 01:53:34,029
and we'll run that we get in here what's

2128
01:53:31,060 --> 01:53:35,680
the error unexpected token type where

2129
01:53:34,029 --> 01:53:40,929
are we on that

2130
01:53:35,680 --> 01:53:46,420
we're on interesting so we're on the

2131
01:53:40,930 --> 01:53:53,619
open brace for default oh yeah that's

2132
01:53:46,420 --> 01:53:55,210
actually true so we actually have

2133
01:53:53,619 --> 01:53:58,059
another type here that we didn't think

2134
01:53:55,210 --> 01:54:00,369
of which is that when it's default it

2135
01:53:58,060 --> 01:54:02,970
doesn't need a name

2136
01:54:00,369 --> 01:54:07,989
so really what we need to do here is

2137
01:54:02,970 --> 01:54:09,789
handle default separately and it doesn't

2138
01:54:07,989 --> 01:54:13,539
need a file name

2139
01:54:09,789 --> 01:54:15,909
in that case right so that's actually

2140
01:54:13,539 --> 01:54:21,250
kind of tricky so we actually have a

2141
01:54:15,909 --> 01:54:23,139
token file name and you know I don't

2142
01:54:21,250 --> 01:54:25,300
know how exactly we want to do that but

2143
01:54:23,140 --> 01:54:28,480
here's one way we could do a require

2144
01:54:25,300 --> 01:54:30,900
token here and so we would do something

2145
01:54:28,479 --> 01:54:30,899
like

2146
01:54:32,559 --> 01:54:49,119
this I and we'd probably do some other

2147
01:54:47,469 --> 01:54:51,489
things here like set up where we were

2148
01:54:49,118 --> 01:54:53,049
writing to or whatever right but so

2149
01:54:51,488 --> 01:54:54,669
that's important actually so we had

2150
01:54:53,050 --> 01:54:58,389
forgotten that defaults don't have a

2151
01:54:54,670 --> 01:55:01,029
file name so that's a good one

2152
01:54:58,389 --> 01:55:01,599
and so now the entire fire file parses

2153
01:55:01,029 --> 01:55:04,750
properly

2154
01:55:01,599 --> 01:55:06,819
looks like right so hey good job we

2155
01:55:04,750 --> 01:55:09,038
wrote a parser for hht good to go next

2156
01:55:06,819 --> 01:55:12,788
weekend we can just use that data that

2157
01:55:09,038 --> 01:55:13,868
we get just parsed and off we go let's

2158
01:55:12,788 --> 01:55:21,038
go ahead and go to the

2159
01:55:13,868 --> 01:55:23,880
question-and-answer I see if I can make

2160
01:55:21,038 --> 01:55:23,880
that happen there

2161
01:55:45,720 --> 01:55:50,579
could the fork odor bug be it all

2162
01:55:48,039 --> 01:55:57,460
related to your in comment calculator I

2163
01:55:50,579 --> 01:55:58,779
mean certainly could low employee now

2164
01:55:57,460 --> 01:55:59,949
that we are using this method assigned

2165
01:55:58,779 --> 01:56:01,869
taxes this change how you plan to

2166
01:55:59,949 --> 01:56:03,849
organize lots of little items on a sheet

2167
01:56:01,869 --> 01:56:06,010
that may have differing non sheet wide

2168
01:56:03,850 --> 01:56:07,480
tags and in cases where using

2169
01:56:06,010 --> 01:56:08,980
significance of positioning in the

2170
01:56:07,479 --> 01:56:10,779
spreadsheet is too limiting for example

2171
01:56:08,979 --> 01:56:12,549
maybe collection of different fauna each

2172
01:56:10,779 --> 01:56:14,469
plant may have different tags for

2173
01:56:12,550 --> 01:56:17,949
attributes but cannot easily put into

2174
01:56:14,470 --> 01:56:22,420
categories yeah we could just have a

2175
01:56:17,949 --> 01:56:23,920
type that's like misc and then we could

2176
01:56:22,420 --> 01:56:34,359
just have it so that you have to specify

2177
01:56:23,920 --> 01:56:39,130
a tag per panel or something right yeah

2178
01:56:34,359 --> 01:56:42,309
so absolutely I just I probably wait

2179
01:56:39,130 --> 01:56:44,409
until I actually have that in front of

2180
01:56:42,310 --> 01:56:48,820
me so like when we do the cover maybe if

2181
01:56:44,409 --> 01:56:55,569
the cover works that way kind of you

2182
01:56:48,819 --> 01:56:56,859
know we can we can deal with that we

2183
01:56:55,569 --> 01:56:58,509
have some Advanced Pricing features that

2184
01:56:56,859 --> 01:56:59,619
are interesting to you but may be too

2185
01:56:58,510 --> 01:57:09,610
much working on this very for handmade

2186
01:56:59,619 --> 01:57:11,649
hero parsing is not really advanced like

2187
01:57:09,609 --> 01:57:15,519
what I wrote here is just all you need

2188
01:57:11,649 --> 01:57:19,269
really I mean you can that's pretty much

2189
01:57:15,520 --> 01:57:20,440
it right one of the things that you know

2190
01:57:19,270 --> 01:57:23,470
you would probably do if you were doing

2191
01:57:20,439 --> 01:57:25,089
a more real thing like something that

2192
01:57:23,470 --> 01:57:26,199
wasn't just made for a simple game data

2193
01:57:25,090 --> 01:57:32,789
file and you're trying to do you know

2194
01:57:26,199 --> 01:57:35,170
something else one thing you might do is

2195
01:57:32,789 --> 01:57:38,920
instead of just having a club called get

2196
01:57:35,170 --> 01:57:41,440
token you usually have peak token so you

2197
01:57:38,920 --> 01:57:43,000
can just look at a token or be able to

2198
01:57:41,439 --> 01:57:44,679
go backwards and forwards and tokens for

2199
01:57:43,000 --> 01:57:46,060
example so you don't just get them off

2200
01:57:44,680 --> 01:57:51,970
the input stream you can actually like

2201
01:57:46,060 --> 01:57:57,600
move around and the other thing is raw

2202
01:57:51,970 --> 01:57:59,320
versus regular tokens so when I do

2203
01:57:57,600 --> 01:58:01,210
parsers for a

2204
01:57:59,319 --> 01:58:04,599
sort of more industrial-strength use

2205
01:58:01,210 --> 01:58:07,328
Tilly what I'll do is there's one call

2206
01:58:04,599 --> 01:58:09,699
which is called get raw token and that

2207
01:58:07,328 --> 01:58:13,269
literally produces the next thing that

2208
01:58:09,698 --> 01:58:16,689
was seen in the input stream so if it

2209
01:58:13,270 --> 01:58:18,900
was whitespace it'll say whitespace as a

2210
01:58:16,689 --> 01:58:23,019
token that comes back if it was a comma

2211
01:58:18,899 --> 01:58:26,368
comment it'll say comment right and then

2212
01:58:23,020 --> 01:58:29,469
get token as opposed to get token raw

2213
01:58:26,368 --> 01:58:31,988
we'll just keep calling get token raw

2214
01:58:29,469 --> 01:58:40,420
until it sees a non white space or

2215
01:58:31,988 --> 01:58:42,129
comment result right that's really the

2216
01:58:40,420 --> 01:58:43,868
only thing that you might do differently

2217
01:58:42,130 --> 01:58:45,819
and the reason for that is so that you

2218
01:58:43,868 --> 01:58:48,069
can do things like write translation

2219
01:58:45,819 --> 01:58:50,859
layers that preserve the comments and

2220
01:58:48,069 --> 01:58:52,569
spacing of input things and only

2221
01:58:50,859 --> 01:58:54,639
modifying the tokens they actually care

2222
01:58:52,569 --> 01:58:56,500
about because you don't always just want

2223
01:58:54,639 --> 01:58:58,420
to understand your input you also

2224
01:58:56,500 --> 01:59:02,229
sometimes want to preserve it in ways

2225
01:58:58,420 --> 01:59:04,868
that are important and the other thing

2226
01:59:02,229 --> 01:59:06,698
that we would we will probably add this

2227
01:59:04,868 --> 01:59:08,738
though so I wouldn't say it's something

2228
01:59:06,698 --> 01:59:10,149
that we that is advanced it's probably

2229
01:59:08,738 --> 01:59:14,468
something else at is tracking the line

2230
01:59:10,149 --> 01:59:17,908
and column number so that just just for

2231
01:59:14,469 --> 01:59:17,908
it just for air reporting right

2232
01:59:22,000 --> 01:59:24,899
so

2233
01:59:40,960 --> 01:59:44,550
what is the community

2234
01:59:55,800 --> 02:00:00,820
are there things that recursive descent

2235
01:59:58,060 --> 02:00:06,270
is not good for or does it cut it for

2236
02:00:00,819 --> 02:00:06,269
them for most of the parsing stuff I

2237
02:00:06,810 --> 02:00:13,320
guess what I would say is recursive

2238
02:00:09,939 --> 02:00:17,949
descent doesn't really work very well

2239
02:00:13,319 --> 02:00:21,699
and if you're talking about that alone

2240
02:00:17,949 --> 02:00:26,349
and you'll notice that like I didn't

2241
02:00:21,699 --> 02:00:30,090
even do recursive descent so we do a

2242
02:00:26,350 --> 02:00:32,530
little bit of descent and we could have

2243
02:00:30,090 --> 02:00:35,350
recursion if we wanted to but you'll

2244
02:00:32,529 --> 02:00:37,719
notice even I did loops and stuff in

2245
02:00:35,350 --> 02:00:40,060
there right technically a recursive

2246
02:00:37,720 --> 02:00:42,310
descent parser would not have loops and

2247
02:00:40,060 --> 02:00:46,470
custom checking and stuff like that it

2248
02:00:42,310 --> 02:00:50,050
would always recurse to repeat right and

2249
02:00:46,470 --> 02:00:54,490
so I think I would say recursive descent

2250
02:00:50,050 --> 02:00:59,980
is not really good for anything other

2251
02:00:54,489 --> 02:01:02,679
than recursively descending it's one way

2252
02:00:59,979 --> 02:01:04,089
that you structure a parser by hand for

2253
02:01:02,680 --> 02:01:06,490
the parts of the parser that are

2254
02:01:04,090 --> 02:01:08,199
conveniently done that way like I want

2255
02:01:06,489 --> 02:01:11,349
to parse an expression here so I call

2256
02:01:08,199 --> 02:01:12,579
parse expression but don't parse the

2257
02:01:11,350 --> 02:01:15,400
expression with recursive descent

2258
02:01:12,579 --> 02:01:20,380
because recursive descent sucks at

2259
02:01:15,399 --> 02:01:22,119
parsing expressions right that's all

2260
02:01:20,380 --> 02:01:23,800
so things that are lists of things

2261
02:01:22,119 --> 02:01:27,329
should be parsed with a simple list

2262
02:01:23,800 --> 02:01:27,329
parser right

2263
02:01:39,000 --> 02:01:43,170
what is your opinion the Vulcan API in

2264
02:01:40,770 --> 02:01:46,080
its future I don't think it really has a

2265
02:01:43,170 --> 02:01:50,100
future except maybe as androids default

2266
02:01:46,079 --> 02:01:51,600
API so maybe that's where that'll be

2267
02:01:50,100 --> 02:01:59,730
I've talked about multiple time so you

2268
02:01:51,600 --> 02:02:00,840
can go look up in the search I wasn't

2269
02:01:59,729 --> 02:02:02,039
here for all face cream but it's

2270
02:02:00,840 --> 02:02:07,380
required took and what you'd use for

2271
02:02:02,039 --> 02:02:10,890
look-ahead No so for look ahead so

2272
02:02:07,380 --> 02:02:12,510
there's okay I mean I guess I didn't

2273
02:02:10,890 --> 02:02:14,190
mean to open up a Pandora's box of

2274
02:02:12,510 --> 02:02:15,810
parsing questions you know I was just

2275
02:02:14,189 --> 02:02:18,689
trying to say let's have the text file

2276
02:02:15,810 --> 02:02:20,970
that we can use you know so I was more

2277
02:02:18,689 --> 02:02:22,519
to typing in the parser because I wanted

2278
02:02:20,970 --> 02:02:25,619
to make sure that we had what we needed

2279
02:02:22,520 --> 02:02:29,730
I wasn't really trying to open the

2280
02:02:25,619 --> 02:02:32,069
bigger topic of like if you were gonna

2281
02:02:29,729 --> 02:02:38,369
write a compiler you know what should

2282
02:02:32,069 --> 02:02:40,739
your parser look like if you were doing

2283
02:02:38,369 --> 02:02:44,069
look ahead then there's two types of

2284
02:02:40,739 --> 02:02:46,829
look ahead that you have to handle and

2285
02:02:44,069 --> 02:02:48,989
one is like way harder than the other so

2286
02:02:46,829 --> 02:02:51,359
the type of look ahead that's easy to

2287
02:02:48,989 --> 02:02:57,229
handle is when the token types can't

2288
02:02:51,359 --> 02:03:00,239
vary so to give an example of that is

2289
02:02:57,229 --> 02:03:02,250
let's suppose that there's a rigorous

2290
02:03:00,239 --> 02:03:07,309
definition of every type of thing that

2291
02:03:02,250 --> 02:03:10,079
might get tokenized and anything that is

2292
02:03:07,310 --> 02:03:12,539
ambiguous grammatically can still be

2293
02:03:10,079 --> 02:03:15,090
just represented by a token the thing

2294
02:03:12,539 --> 02:03:17,130
gets disambiguated later and so the

2295
02:03:15,090 --> 02:03:19,680
example would be like in C and C++

2296
02:03:17,130 --> 02:03:23,970
you can pretty much do this I get a

2297
02:03:19,680 --> 02:03:25,890
token and yeah technically the grammar

2298
02:03:23,970 --> 02:03:28,409
wants to know something like is this a

2299
02:03:25,890 --> 02:03:30,150
type or is this an identifier and you

2300
02:03:28,409 --> 02:03:36,359
can't really know that without having

2301
02:03:30,149 --> 02:03:39,029
more context to the system but it

2302
02:03:36,359 --> 02:03:41,609
doesn't really cause a problem for a

2303
02:03:39,029 --> 02:03:43,649
fixed tokenizer because you can still

2304
02:03:41,609 --> 02:03:46,619
just call that like an indeterminate

2305
02:03:43,649 --> 02:03:48,000
name and then further up the stream when

2306
02:03:46,619 --> 02:03:51,119
people are actually trying to resolve

2307
02:03:48,000 --> 02:03:52,380
stuff they can go ahead and change how

2308
02:03:51,119 --> 02:03:56,039
they decided to

2309
02:03:52,380 --> 02:04:00,659
parce right but the tokenizer doesn't

2310
02:03:56,039 --> 02:04:02,789
have to care so that kind of look ahead

2311
02:04:00,658 --> 02:04:04,979
is easy to implement the way I do it

2312
02:04:02,789 --> 02:04:07,920
typically is I tokenize the whole darn

2313
02:04:04,979 --> 02:04:12,329
file and I actually just have the parser

2314
02:04:07,920 --> 02:04:14,550
work on that right that way they can

2315
02:04:12,329 --> 02:04:16,859
jump all around they can look as me

2316
02:04:14,550 --> 02:04:18,810
tokens in as they want they can reverse

2317
02:04:16,859 --> 02:04:20,250
back to previous tokens they can do

2318
02:04:18,810 --> 02:04:21,719
whatever they want so I just tokenize a

2319
02:04:20,250 --> 02:04:25,170
file and then you operate on the tokens

2320
02:04:21,719 --> 02:04:29,819
done there's another kind of language

2321
02:04:25,170 --> 02:04:34,649
and I don't really know what an example

2322
02:04:29,819 --> 02:04:38,460
is Swift might have this I can't

2323
02:04:34,649 --> 02:04:41,698
remember but if you define a language

2324
02:04:38,460 --> 02:04:47,369
where things directives in the language

2325
02:04:41,698 --> 02:04:48,928
can change the token definition so you

2326
02:04:47,369 --> 02:04:50,760
know let's say for example that I

2327
02:04:48,929 --> 02:04:54,719
defined a language doesn't have strings

2328
02:04:50,760 --> 02:04:58,880
in it so like quote a bunch of stuff and

2329
02:04:54,719 --> 02:05:01,560
then quote isn't a thing right

2330
02:04:58,880 --> 02:05:03,389
well if I tokenize something with that

2331
02:05:01,560 --> 02:05:05,010
then anything that appears like quote

2332
02:05:03,389 --> 02:05:07,079
author quote like what I'm looking at

2333
02:05:05,010 --> 02:05:10,850
the screen right now will appear as

2334
02:05:07,079 --> 02:05:14,238
three tokens double quote is token one

2335
02:05:10,850 --> 02:05:17,400
identify our author is token two and

2336
02:05:14,238 --> 02:05:20,059
then double quote is token three again

2337
02:05:17,399 --> 02:05:20,059
right

2338
02:05:21,619 --> 02:05:27,569
but if inside that language I have the

2339
02:05:25,198 --> 02:05:29,279
ability to describe it's using I don't

2340
02:05:27,569 --> 02:05:35,309
know a regular expression or something

2341
02:05:29,279 --> 02:05:36,750
or some other definition if I have the

2342
02:05:35,310 --> 02:05:39,030
ability to describe how to create a

2343
02:05:36,750 --> 02:05:41,670
token and I add the ability to say if

2344
02:05:39,029 --> 02:05:43,259
you see a quote take everything up till

2345
02:05:41,670 --> 02:05:49,789
the next quote no matter what it is is

2346
02:05:43,260 --> 02:05:54,750
one token now you can't do that right so

2347
02:05:49,789 --> 02:05:59,189
basically you have two different types

2348
02:05:54,750 --> 02:06:01,829
of parser problem one is where token the

2349
02:05:59,189 --> 02:06:04,408
act of determining what isn't isn't a

2350
02:06:01,829 --> 02:06:06,389
whole piece of text for tokenizing

2351
02:06:04,408 --> 02:06:10,109
purposes is

2352
02:06:06,389 --> 02:06:13,529
able to be locked down at compile-time

2353
02:06:10,109 --> 02:06:16,069
of the language then that's really easy

2354
02:06:13,529 --> 02:06:18,988
just tokenize the entire file if you

2355
02:06:16,069 --> 02:06:20,969
don't have that and you have the ability

2356
02:06:18,988 --> 02:06:23,668
to define in the language what's going

2357
02:06:20,969 --> 02:06:25,408
on then you've got it harder and you

2358
02:06:23,668 --> 02:06:27,389
have to make all kinds of concession

2359
02:06:25,408 --> 02:06:29,158
stat as well as you'd better know what

2360
02:06:27,389 --> 02:06:31,078
you're doing because the language if

2361
02:06:29,158 --> 02:06:34,408
you're not careful could have all kinds

2362
02:06:31,078 --> 02:06:40,288
of ambiguities and like things where you

2363
02:06:34,408 --> 02:06:41,759
have no idea like what you know things

2364
02:06:40,288 --> 02:06:47,398
where the user can accidentally make

2365
02:06:41,760 --> 02:06:48,809
totally indeterminate files a campy

2366
02:06:47,399 --> 02:06:50,099
parser that you don't know if they're

2367
02:06:48,809 --> 02:06:52,550
correct or not or other things like that

2368
02:06:50,099 --> 02:06:52,550
right

2369
02:06:57,939 --> 02:07:03,039
all right so I think that's everything

2370
02:07:00,039 --> 02:07:08,800
for questions socially so I'm gonna go

2371
02:07:03,039 --> 02:07:12,609
ahead and bow out gracefully as

2372
02:07:08,800 --> 02:07:15,010
gracefully as as I can ever really do so

2373
02:07:12,609 --> 02:07:16,448
let's go ahead and close this down no

2374
02:07:15,010 --> 02:07:19,119
complaints with how that went today I

2375
02:07:16,448 --> 02:07:21,069
would say that was great we did exactly

2376
02:07:19,118 --> 02:07:26,679
what we wanted which is basically we

2377
02:07:21,069 --> 02:07:28,779
made a parser for our file format and we

2378
02:07:26,679 --> 02:07:31,510
are good to go so we can pretty much

2379
02:07:28,779 --> 02:07:33,819
just start working with those files

2380
02:07:31,510 --> 02:07:36,099
immediately when we return next weekend

2381
02:07:33,819 --> 02:07:37,210
so thank you everyone for joining me for

2382
02:07:36,099 --> 02:07:39,010
those sort of handmade here oaths what a

2383
02:07:37,210 --> 02:07:40,539
pleasure coding with you as always if

2384
02:07:39,010 --> 02:07:42,730
you would like to follow series at home

2385
02:07:40,539 --> 02:07:45,819
you can always go to handmade hero org

2386
02:07:42,729 --> 02:07:48,279
and press that pre-order button it comes

2387
02:07:45,819 --> 02:07:50,948
with the source code so you can play

2388
02:07:48,279 --> 02:07:52,389
around at home and you can play around

2389
02:07:50,948 --> 02:07:55,779
with your own parts or designs if you'd

2390
02:07:52,389 --> 02:07:56,710
like that's about it for this weekend

2391
02:07:55,779 --> 02:07:58,658
I don't know that there'll be any

2392
02:07:56,710 --> 02:08:01,118
streams this week but I have already

2393
02:07:58,658 --> 02:08:04,618
posted a schedule on the watch page

2394
02:08:01,118 --> 02:08:07,809
unfortunately the watch page is my

2395
02:08:04,618 --> 02:08:09,549
stream from hive right now but once that

2396
02:08:07,810 --> 02:08:10,869
stream ends it will pop back to the

2397
02:08:09,550 --> 02:08:13,179
schedule so you can see when we're gonna

2398
02:08:10,868 --> 02:08:14,679
be live next weekend same time same

2399
02:08:13,179 --> 02:08:17,440
place is pretty much the short answer

2400
02:08:14,679 --> 02:08:18,940
but if there are any updates it'll show

2401
02:08:17,439 --> 02:08:22,539
up on the watch page you can also

2402
02:08:18,939 --> 02:08:24,219
obviously subscribe on YouTube or twitch

2403
02:08:22,539 --> 02:08:27,189
for notifications and all that stuff

2404
02:08:24,219 --> 02:08:28,810
work check the handmade hero Twitter all

2405
02:08:27,189 --> 02:08:31,598
that stuff

2406
02:08:28,810 --> 02:08:33,369
also yeah well it's not subscribe on

2407
02:08:31,599 --> 02:08:35,380
Twitch subscribe is for paying money

2408
02:08:33,368 --> 02:08:37,598
what is it that's follow follow if you

2409
02:08:35,380 --> 02:08:39,520
can also follow it on Twitch and set

2410
02:08:37,599 --> 02:08:41,199
your notifications to on and that I'll

2411
02:08:39,520 --> 02:08:43,830
just email you whenever we're live so

2412
02:08:41,198 --> 02:08:46,509
you can also get notified that way

2413
02:08:43,829 --> 02:08:48,010
that's it for this week have fun

2414
02:08:46,510 --> 02:08:51,340
programming everyone over the coming

2415
02:08:48,010 --> 02:08:54,000
week and I will see everyone back here

2416
02:08:51,340 --> 02:08:54,000
next weekend

