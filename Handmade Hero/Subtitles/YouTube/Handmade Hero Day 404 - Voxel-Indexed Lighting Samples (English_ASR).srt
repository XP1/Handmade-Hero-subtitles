1
00:00:01,100 --> 00:00:05,759
recording hello everyone and welcome to

2
00:00:03,899 --> 00:00:09,539
handmade Hero the show that we code a

3
00:00:05,759 --> 00:00:12,300
complete game live on stream we are in

4
00:00:09,539 --> 00:00:16,339
the middle of some lighting stuff and we

5
00:00:12,300 --> 00:00:19,080
kind of have a bit of a you know

6
00:00:16,339 --> 00:00:21,660
question a conundrum to deal with today

7
00:00:19,079 --> 00:00:23,698
today is day 404 which of course means

8
00:00:21,660 --> 00:00:28,740
that this episode will not be findable

9
00:00:23,699 --> 00:00:30,300
by HTTP but if you take a look at where

10
00:00:28,739 --> 00:00:33,058
we're at in the code base I'll show you

11
00:00:30,300 --> 00:00:36,329
what we threw in at the end of the

12
00:00:33,058 --> 00:00:38,399
stream yesterday and it kind of brought

13
00:00:36,329 --> 00:00:42,719
up a good question that we I think need

14
00:00:38,399 --> 00:00:47,879
to or want to address relatively soon

15
00:00:42,719 --> 00:00:50,489
so here is the current little test room

16
00:00:47,878 --> 00:00:52,198
with no lighting in and then if I go

17
00:00:50,488 --> 00:00:54,448
ahead and run our sort of offline test

18
00:00:52,198 --> 00:00:57,420
lighting version you can see the

19
00:00:54,448 --> 00:01:01,229
reflector solution for it and if we go

20
00:00:57,420 --> 00:01:03,510
ahead and switch to viewing the the

21
00:01:01,229 --> 00:01:05,879
actual world colored with the lighting

22
00:01:03,509 --> 00:01:07,438
solution you can actually see that oddly

23
00:01:05,879 --> 00:01:09,959
enough it's starting to look pretty nice

24
00:01:07,438 --> 00:01:14,309
in terms of how the lighting gets

25
00:01:09,959 --> 00:01:18,239
computed however we do have this sort of

26
00:01:14,310 --> 00:01:20,909
question I was asking at the end of the

27
00:01:18,239 --> 00:01:22,618
stream last time which is what are we

28
00:01:20,909 --> 00:01:24,890
going to do about actually

29
00:01:22,618 --> 00:01:28,828
reconstructing the per-pixel lighting

30
00:01:24,890 --> 00:01:31,799
from the you know course lighting

31
00:01:28,828 --> 00:01:34,438
computations that we do and what you can

32
00:01:31,799 --> 00:01:37,618
see here is that in some circumstances

33
00:01:34,438 --> 00:01:39,868
when because what we're what we're

34
00:01:37,618 --> 00:01:44,219
actually sending down here is a vertex

35
00:01:39,868 --> 00:01:46,228
based lighting just as a test and so

36
00:01:44,219 --> 00:01:48,509
what you can see here is we're computing

37
00:01:46,228 --> 00:01:52,349
the lighting at the vertices basically

38
00:01:48,509 --> 00:01:53,700
not exactly at the vertices but a better

39
00:01:52,349 --> 00:01:56,879
way to say it might be we're putting

40
00:01:53,700 --> 00:01:59,960
little panels near the vertices to

41
00:01:56,879 --> 00:02:02,310
determine what we think they should be

42
00:01:59,959 --> 00:02:07,949
how that we think they should be lit and

43
00:02:02,310 --> 00:02:10,189
then each one of these cubes or sprites

44
00:02:07,950 --> 00:02:13,830
as well depending on the circumstance is

45
00:02:10,189 --> 00:02:15,659
getting lit by interpolating among

46
00:02:13,830 --> 00:02:18,090
that solution to give it a color wash

47
00:02:15,659 --> 00:02:23,099
and what you can see is that actually

48
00:02:18,090 --> 00:02:27,449
looks really nice like here or here or

49
00:02:23,099 --> 00:02:30,120
here and here down in this area and so

50
00:02:27,449 --> 00:02:32,759
on I it actually looks pretty good

51
00:02:30,120 --> 00:02:35,520
because you end up with a solution where

52
00:02:32,759 --> 00:02:37,469
the the lighting tends to be fairly

53
00:02:35,520 --> 00:02:40,200
smooth across the vertices and doesn't

54
00:02:37,469 --> 00:02:43,889
vary very much but the problem that you

55
00:02:40,199 --> 00:02:46,319
quickly get into with the with doing

56
00:02:43,889 --> 00:02:48,899
schema sway is when you do the

57
00:02:46,319 --> 00:02:51,419
interpolation you can see how you get

58
00:02:48,900 --> 00:02:53,730
banding in cases where you know you've

59
00:02:51,419 --> 00:02:56,309
got two dark vertices and to light

60
00:02:53,729 --> 00:03:07,349
vertices opposed but you know opposing

61
00:02:56,310 --> 00:03:12,120
each other and it just says that it does

62
00:03:07,349 --> 00:03:14,939
not produce and a satisfying lighting

63
00:03:12,120 --> 00:03:18,420
solution at all right it's definitely

64
00:03:14,939 --> 00:03:20,489
not something that you would want you

65
00:03:18,419 --> 00:03:22,139
just don't want that look right that's

66
00:03:20,489 --> 00:03:24,269
not going to be satisfying at all

67
00:03:22,139 --> 00:03:27,359
now all the lighting that we're

68
00:03:24,269 --> 00:03:31,439
contemplating doing is approximate so

69
00:03:27,360 --> 00:03:34,140
it's not as if there's something you

70
00:03:31,439 --> 00:03:36,959
know inherent in here that I'm objecting

71
00:03:34,139 --> 00:03:38,639
to in terms of its accuracy it's I'm

72
00:03:36,959 --> 00:03:40,590
just objecting to the fact that we will

73
00:03:38,639 --> 00:03:42,779
have these artifacts and we don't want

74
00:03:40,590 --> 00:03:45,590
those artifacts so what we're trying to

75
00:03:42,780 --> 00:03:48,390
do here is come up with some way of

76
00:03:45,590 --> 00:03:52,110
making it less likely that we'll get

77
00:03:48,389 --> 00:03:57,419
artifacts of this nature and that way we

78
00:03:52,110 --> 00:04:00,230
can I just want something that will

79
00:03:57,419 --> 00:04:05,099
produce smoother nicer results here and

80
00:04:00,229 --> 00:04:07,889
the the question that we have to address

81
00:04:05,099 --> 00:04:09,959
in order to figure out how you know what

82
00:04:07,889 --> 00:04:14,819
our strategy is going to be for avoiding

83
00:04:09,959 --> 00:04:16,439
that problem is that we don't know how

84
00:04:14,819 --> 00:04:19,290
we're going to be reconstructing the

85
00:04:16,439 --> 00:04:20,699
lighting from a lighting solution we

86
00:04:19,290 --> 00:04:22,530
know we are going to have a lighting

87
00:04:20,699 --> 00:04:24,509
solution that will be coarser than the

88
00:04:22,529 --> 00:04:26,009
optimal solution in terms of bouncing

89
00:04:24,509 --> 00:04:28,259
light around

90
00:04:26,009 --> 00:04:31,529
and I'm actually starting to be

91
00:04:28,259 --> 00:04:34,170
relatively pleased with this sort of

92
00:04:31,529 --> 00:04:35,909
reflectors idea here and how it's

93
00:04:34,170 --> 00:04:39,930
working basically just light samples

94
00:04:35,910 --> 00:04:42,150
that are taken throughout the world and

95
00:04:39,930 --> 00:04:44,790
we actually do relatively good lighting

96
00:04:42,149 --> 00:04:46,529
computation on those I think we're going

97
00:04:44,790 --> 00:04:48,210
to be able to make that work I suspect

98
00:04:46,529 --> 00:04:51,359
I'm not sure but I think we probably

99
00:04:48,209 --> 00:04:53,069
will be able to make it work on the GPU

100
00:04:51,360 --> 00:04:56,790
and so it'll be able to run reasonably

101
00:04:53,069 --> 00:05:00,870
quickly however what I don't really know

102
00:04:56,790 --> 00:05:02,550
how we're going to do is take that and

103
00:05:00,870 --> 00:05:03,420
no matter what we do right we're going

104
00:05:02,550 --> 00:05:04,680
to have something like this like it

105
00:05:03,420 --> 00:05:06,509
works where it's a core sample of

106
00:05:04,680 --> 00:05:09,569
lighting I don't know how we're going to

107
00:05:06,509 --> 00:05:13,099
take that and convert that into actual

108
00:05:09,569 --> 00:05:15,269
lighting for the pixels in the game and

109
00:05:13,100 --> 00:05:19,500
there's a number of different ways that

110
00:05:15,269 --> 00:05:22,139
we could try to make this work and I

111
00:05:19,500 --> 00:05:25,168
just don't know which of them is going

112
00:05:22,139 --> 00:05:27,389
to be the most intelligent or or I

113
00:05:25,168 --> 00:05:29,699
shouldn't even say that it's more that I

114
00:05:27,389 --> 00:05:32,969
don't even really know what the space of

115
00:05:29,699 --> 00:05:35,099
total options are inside the space of

116
00:05:32,970 --> 00:05:36,720
what we could do like I just don't even

117
00:05:35,100 --> 00:05:39,960
really know what all of our options are

118
00:05:36,720 --> 00:05:41,400
if you look you can kind of see that if

119
00:05:39,959 --> 00:05:47,250
you just take a look at these reflectors

120
00:05:41,399 --> 00:05:51,149
here then you know one one way we could

121
00:05:47,250 --> 00:05:55,350
approach this problem is by just trying

122
00:05:51,149 --> 00:05:58,469
to use these sample points for the

123
00:05:55,350 --> 00:06:00,419
lighting as something that we gather up

124
00:05:58,470 --> 00:06:04,740
to compute the lighting at any given

125
00:06:00,418 --> 00:06:06,870
pixel right and that's a pretty

126
00:06:04,740 --> 00:06:10,110
reasonable way to approach this problem

127
00:06:06,870 --> 00:06:12,060
it's just an interpolation problem so

128
00:06:10,110 --> 00:06:16,860
the idea is the first path splashed down

129
00:06:12,060 --> 00:06:21,478
a number of different light samples like

130
00:06:16,860 --> 00:06:25,110
this and then the rendering actually per

131
00:06:21,478 --> 00:06:29,490
pixel just goes and tries to find what

132
00:06:25,110 --> 00:06:31,470
light samples are close by right now the

133
00:06:29,490 --> 00:06:34,288
problem with that and I'm not sure

134
00:06:31,470 --> 00:06:36,050
exactly how we would want to deal with

135
00:06:34,288 --> 00:06:39,060
this but there's a problem with that

136
00:06:36,050 --> 00:06:39,810
kind of a scheme like the gather light

137
00:06:39,060 --> 00:06:44,459
kind of

138
00:06:39,810 --> 00:06:48,269
and that is what happens at edges such

139
00:06:44,459 --> 00:06:50,159
as this one so if you take a look at you

140
00:06:48,269 --> 00:06:51,899
know if I swap between these quickly you

141
00:06:50,160 --> 00:06:54,600
can kind of see what the problem would

142
00:06:51,899 --> 00:06:57,659
begin to be if I want to know what the

143
00:06:54,600 --> 00:07:01,110
color should be in this area then you

144
00:06:57,660 --> 00:07:04,620
know I'm sampling the lighting from say

145
00:07:01,110 --> 00:07:07,470
this and this I don't really know where

146
00:07:04,620 --> 00:07:09,930
it goes from red to grey right I just

147
00:07:07,470 --> 00:07:13,410
know that somewhere in between here it

148
00:07:09,930 --> 00:07:15,870
changed and so we would have to kind of

149
00:07:13,410 --> 00:07:18,919
have a relatively smart reconstruction

150
00:07:15,870 --> 00:07:22,800
filter probably something which said oh

151
00:07:18,918 --> 00:07:24,509
you know this surface the lighting

152
00:07:22,800 --> 00:07:26,100
samples from this surface and the

153
00:07:24,509 --> 00:07:28,379
lighting samples are from this surface

154
00:07:26,100 --> 00:07:31,080
when I'm reconstructing this surface

155
00:07:28,379 --> 00:07:32,550
wait the samples from this surface more

156
00:07:31,079 --> 00:07:34,349
heavily than from this surface or

157
00:07:32,550 --> 00:07:36,060
something because otherwise you end up

158
00:07:34,350 --> 00:07:38,250
getting a lot of way too much color

159
00:07:36,060 --> 00:07:40,259
bleed like this right here will be like

160
00:07:38,250 --> 00:07:42,569
fully red like this as it interpolates

161
00:07:40,259 --> 00:07:44,550
between the red and the grey and that's

162
00:07:42,569 --> 00:07:47,149
not really what you want right you want

163
00:07:44,550 --> 00:07:50,550
a nice hard edge there like we have now

164
00:07:47,149 --> 00:07:53,849
this is really the more accurate way to

165
00:07:50,550 --> 00:07:56,579
look at that and so you know again like

166
00:07:53,850 --> 00:07:57,689
I'm not 100% certain how we really want

167
00:07:56,579 --> 00:07:59,939
to do that

168
00:07:57,689 --> 00:08:01,918
so it may be that we just want to send

169
00:07:59,939 --> 00:08:03,810
down local interpolators one of the

170
00:08:01,918 --> 00:08:06,930
ideas that someone came up with on the

171
00:08:03,810 --> 00:08:08,339
last stream or I mean at least this is

172
00:08:06,930 --> 00:08:10,139
how I interpreted the idea not unless

173
00:08:08,339 --> 00:08:12,599
they're exactly what they're going for

174
00:08:10,139 --> 00:08:14,459
but one of the things we could do is per

175
00:08:12,600 --> 00:08:16,310
quad just send down the for

176
00:08:14,459 --> 00:08:18,989
interpolation points have our own

177
00:08:16,310 --> 00:08:20,370
interpolation scheme that we use and

178
00:08:18,990 --> 00:08:23,610
just go from there

179
00:08:20,370 --> 00:08:31,319
right meaning we don't actually do a

180
00:08:23,610 --> 00:08:34,710
global gather at all we just do an

181
00:08:31,319 --> 00:08:37,500
interpolation scheme that's not based on

182
00:08:34,710 --> 00:08:41,610
that and if we think about how that

183
00:08:37,500 --> 00:08:43,589
would have to work it's actually not

184
00:08:41,610 --> 00:08:46,529
that difficult to determine how that

185
00:08:43,589 --> 00:08:48,690
should probably work basically all we

186
00:08:46,529 --> 00:08:51,779
need to do is come up with some

187
00:08:48,690 --> 00:08:53,190
different way of specifying the color

188
00:08:51,779 --> 00:08:55,769
wash over the surface

189
00:08:53,190 --> 00:08:59,040
so that it doesn't have that sort of

190
00:08:55,769 --> 00:09:02,720
banding artifact kind of thing happening

191
00:08:59,039 --> 00:09:05,159
to it right so that idea

192
00:09:02,720 --> 00:09:07,199
those last thing we discussed right it

193
00:09:05,159 --> 00:09:10,438
was basically saying well you know I

194
00:09:07,198 --> 00:09:14,519
forgot we got a sprayer of some free up

195
00:09:10,438 --> 00:09:16,828
some GPU resources for Milton so if you

196
00:09:14,519 --> 00:09:19,438
take a look at what's going on with the

197
00:09:16,828 --> 00:09:21,269
current interpolation the current

198
00:09:19,438 --> 00:09:24,448
interpolation is doing interpolation

199
00:09:21,269 --> 00:09:29,698
like this so let's say we have dark dark

200
00:09:24,448 --> 00:09:31,859
and light and then we imagine it's a

201
00:09:29,698 --> 00:09:34,679
quad so you know we get the problem

202
00:09:31,860 --> 00:09:36,810
where there's light over here as well so

203
00:09:34,679 --> 00:09:40,859
what will happen here is because dark

204
00:09:36,809 --> 00:09:44,309
and dark are on the diagonal here this

205
00:09:40,860 --> 00:09:46,649
entire diagonal will be dark right it

206
00:09:44,309 --> 00:09:48,419
will always be completely dark in fact

207
00:09:46,649 --> 00:09:51,120
if you imagine that these are just the

208
00:09:48,419 --> 00:09:53,759
value 1 and the value 0 and we have the

209
00:09:51,120 --> 00:09:55,110
value 1 here what you can see will

210
00:09:53,759 --> 00:09:57,240
happen when you do this kind of

211
00:09:55,110 --> 00:09:59,278
interpolation is that everything across

212
00:09:57,240 --> 00:10:01,019
this line will be 0 because the the

213
00:09:59,278 --> 00:10:04,139
linear interpolation across this line

214
00:10:01,019 --> 00:10:05,970
right will always stay at 0

215
00:10:04,139 --> 00:10:07,589
there's never anywhere else for it to go

216
00:10:05,970 --> 00:10:09,060
because this point isn't involved in the

217
00:10:07,589 --> 00:10:13,470
interpolation across this triangle line

218
00:10:09,059 --> 00:10:17,549
right so this point will correctly be

219
00:10:13,470 --> 00:10:20,879
point 5 you know that is what that point

220
00:10:17,549 --> 00:10:23,309
will be but this point will still be 0

221
00:10:20,879 --> 00:10:26,009
so that's why you get that dark band

222
00:10:23,309 --> 00:10:27,750
that comes down so the other question is

223
00:10:26,009 --> 00:10:30,120
well what would happen if we were doing

224
00:10:27,750 --> 00:10:30,839
proper bilinear here you know what would

225
00:10:30,120 --> 00:10:33,149
that look like

226
00:10:30,839 --> 00:10:37,139
so if you imagine we have bilinear that

227
00:10:33,149 --> 00:10:42,480
was you know built on the same

228
00:10:37,139 --> 00:10:44,818
distribution of of magnitudes then along

229
00:10:42,480 --> 00:10:47,519
this diagonal we no longer get that same

230
00:10:44,818 --> 00:10:48,929
behavior because if we bilinear these no

231
00:10:47,519 --> 00:10:51,360
matter which way we do it we're going to

232
00:10:48,929 --> 00:10:53,549
get point 5 here and we're going to get

233
00:10:51,360 --> 00:10:55,769
point 5 here right because we know

234
00:10:53,549 --> 00:10:57,688
that's true we know that even if we did

235
00:10:55,769 --> 00:11:01,230
it the other way we would get point 5 in

236
00:10:57,688 --> 00:11:04,078
both cases right and so now when we

237
00:11:01,230 --> 00:11:06,980
interpolate this position we're actually

238
00:11:04,078 --> 00:11:12,279
gonna get point 5 here right

239
00:11:06,980 --> 00:11:16,220
so this produces a more rectilinear

240
00:11:12,279 --> 00:11:19,819
blend of the colors which in art because

241
00:11:16,220 --> 00:11:22,730
all of our stuff is rectilinear may well

242
00:11:19,820 --> 00:11:25,310
produce less objectionable artifacts for

243
00:11:22,730 --> 00:11:27,080
this very reason so what this would do

244
00:11:25,309 --> 00:11:31,119
instead is this would produce something

245
00:11:27,080 --> 00:11:34,100
that was like bright up here right and

246
00:11:31,120 --> 00:11:36,320
then got sort of a little bit darker as

247
00:11:34,100 --> 00:11:39,560
it got to here right the standard

248
00:11:36,320 --> 00:11:43,820
bilinear interpolation pattern and then

249
00:11:39,559 --> 00:11:45,319
as we got further out to the ones it's

250
00:11:43,820 --> 00:11:47,510
going to have the same thing here where

251
00:11:45,320 --> 00:11:53,150
it's got kind of a bright bit here and

252
00:11:47,509 --> 00:11:59,720
then darker like so and this is the that

253
00:11:53,149 --> 00:12:01,250
part is very dark there and so you could

254
00:11:59,720 --> 00:12:04,730
imagine this producing a less objection

255
00:12:01,250 --> 00:12:06,860
artifact perhaps however you're still

256
00:12:04,730 --> 00:12:08,750
going to end up I think if you went this

257
00:12:06,860 --> 00:12:10,970
route and we could test it certainly but

258
00:12:08,750 --> 00:12:13,460
I think you're still going to end up

259
00:12:10,970 --> 00:12:16,550
with objectionable artifact they're just

260
00:12:13,460 --> 00:12:18,680
going to be crosswise right you're going

261
00:12:16,549 --> 00:12:24,189
to end up with weird like patterns that

262
00:12:18,679 --> 00:12:24,189
look like this this sort of a of a thing

263
00:12:24,789 --> 00:12:29,389
just like you do with bilinear filtering

264
00:12:27,259 --> 00:12:31,429
right you know you know the pattern I'm

265
00:12:29,389 --> 00:12:33,139
talking about it looks like this kind of

266
00:12:31,429 --> 00:12:34,849
a thing I don't know if we can find

267
00:12:33,139 --> 00:12:43,850
someone who's drawn that diagram

268
00:12:34,850 --> 00:12:47,120
bilinear yeah it's right in fact there

269
00:12:43,850 --> 00:12:50,389
it is very first thing so you see those

270
00:12:47,120 --> 00:12:51,769
plus patterns those plus patterns is

271
00:12:50,389 --> 00:12:56,899
what we would get kind of blown up

272
00:12:51,769 --> 00:12:58,519
pretty large right I don't know if

273
00:12:56,899 --> 00:13:03,110
there's any other images that would show

274
00:12:58,519 --> 00:13:05,419
it well doesn't look like it looks like

275
00:13:03,110 --> 00:13:09,320
these are all talking about sort of

276
00:13:05,419 --> 00:13:12,079
something a little more not really well

277
00:13:09,320 --> 00:13:14,230
there you go that's a pretty good one

278
00:13:12,080 --> 00:13:14,230
too

279
00:13:15,139 --> 00:13:29,009
right so this right here is not sure

280
00:13:27,028 --> 00:13:31,110
what exactly this is a curve based one

281
00:13:29,009 --> 00:13:34,919
or whatever yeah this right here is the

282
00:13:31,110 --> 00:13:39,509
kind of thing that we would see sort of

283
00:13:34,919 --> 00:13:42,208
in the Centers of our pixels I think and

284
00:13:39,509 --> 00:13:44,550
potentially around edges it's again like

285
00:13:42,208 --> 00:13:47,458
I said kind of hard to really know

286
00:13:44,549 --> 00:13:50,549
exactly what it would look like I don't

287
00:13:47,458 --> 00:13:54,838
know if I can zoom in on this can i yeah

288
00:13:50,549 --> 00:13:57,628
there we go so I can't tell they don't

289
00:13:54,839 --> 00:13:58,889
have any of the worst-case in here like

290
00:13:57,629 --> 00:14:02,459
I was talking about where there's two

291
00:13:58,889 --> 00:14:04,740
bright pixels on either side and two

292
00:14:02,458 --> 00:14:06,799
dark pixels on either side which is kind

293
00:14:04,740 --> 00:14:08,669
of the thing that we want to see but I

294
00:14:06,799 --> 00:14:10,318
need like a little thing where I can

295
00:14:08,669 --> 00:14:13,740
just put in something to by linear

296
00:14:10,318 --> 00:14:17,338
filter so anyway the point there is

297
00:14:13,740 --> 00:14:19,049
simply that they're still going to be

298
00:14:17,339 --> 00:14:23,550
artifacts if we use a bilinear filter

299
00:14:19,049 --> 00:14:25,740
however this is lighting and lighting

300
00:14:23,549 --> 00:14:29,639
tends to be more radial right because

301
00:14:25,740 --> 00:14:32,428
the fall-off curve across a plane tends

302
00:14:29,639 --> 00:14:35,129
to be more about distance and distance

303
00:14:32,428 --> 00:14:39,448
tends to be radial it doesn't tend to be

304
00:14:35,129 --> 00:14:41,039
linear right it's linear along you know

305
00:14:39,448 --> 00:14:43,740
a line I guess you could say you could

306
00:14:41,039 --> 00:14:45,688
approximate linearly but not as that lot

307
00:14:43,740 --> 00:14:49,049
as that line becomes a plane right

308
00:14:45,688 --> 00:14:52,198
because if you imagine you know of the

309
00:14:49,049 --> 00:14:54,539
light being very far away and casting on

310
00:14:52,198 --> 00:14:56,729
here then as it gets dimmer it does form

311
00:14:54,539 --> 00:14:58,588
sort of a linear interpolation but if

312
00:14:56,730 --> 00:15:01,019
you imagine the light being very close

313
00:14:58,589 --> 00:15:05,339
then it's typically going to be very

314
00:15:01,019 --> 00:15:07,470
curved right so one thing we could think

315
00:15:05,339 --> 00:15:08,730
about in addition is saying well if

316
00:15:07,470 --> 00:15:11,100
we're going to interpolate lighting

317
00:15:08,730 --> 00:15:14,129
across a quad and we've only computed

318
00:15:11,100 --> 00:15:16,678
things at the vertices or you know maybe

319
00:15:14,129 --> 00:15:18,749
we even get a little fancier and compute

320
00:15:16,678 --> 00:15:21,480
more than just the vertices like maybe

321
00:15:18,749 --> 00:15:23,548
we go nuts and there's just like tons of

322
00:15:21,480 --> 00:15:26,129
points that we computed I don't know

323
00:15:23,548 --> 00:15:27,899
right but let's suppose we do something

324
00:15:26,129 --> 00:15:30,120
where we've got some number

325
00:15:27,899 --> 00:15:31,649
sample points we could choose to

326
00:15:30,120 --> 00:15:34,409
reconstruct them with something that

327
00:15:31,649 --> 00:15:36,659
isn't linear right we could use

328
00:15:34,409 --> 00:15:38,899
something like a radial you know some

329
00:15:36,659 --> 00:15:42,259
kind of radial normalized interpolation

330
00:15:38,899 --> 00:15:44,970
like a weighted some kind of a thing

331
00:15:42,259 --> 00:15:47,700
that normalizes the contribution up

332
00:15:44,970 --> 00:15:50,190
based on a distance value so that these

333
00:15:47,700 --> 00:15:53,820
points are actually radio right and have

334
00:15:50,190 --> 00:15:55,920
radial interference patterns and that

335
00:15:53,820 --> 00:15:59,160
again might give us something that looks

336
00:15:55,919 --> 00:16:02,479
more lighting esque than reconstructing

337
00:15:59,159 --> 00:16:05,370
it with simply a linear interpolation

338
00:16:02,480 --> 00:16:07,649
since we probably have plenty of per

339
00:16:05,370 --> 00:16:11,399
pixel time to do that I would think on a

340
00:16:07,649 --> 00:16:13,079
higher end card and we can if we want to

341
00:16:11,399 --> 00:16:15,419
play it a little bit fast and loose

342
00:16:13,080 --> 00:16:16,800
there and maybe do different things

343
00:16:15,419 --> 00:16:18,509
depending on whether we're on the front

344
00:16:16,799 --> 00:16:29,039
depth field or not right like our first

345
00:16:18,509 --> 00:16:32,669
step feel we could do stuff like doing

346
00:16:29,039 --> 00:16:34,829
the lighting differently per destiel if

347
00:16:32,669 --> 00:16:36,089
we need to speed wise or I don't know

348
00:16:34,830 --> 00:16:39,509
that could lead to artifacts so I'm not

349
00:16:36,090 --> 00:16:40,639
sure on high-end GPUs I really don't

350
00:16:39,509 --> 00:16:42,720
think we're going to have a problem

351
00:16:40,639 --> 00:16:44,639
because you know they have so much

352
00:16:42,720 --> 00:16:45,960
horsepower to spare and hey you can

353
00:16:44,639 --> 00:16:47,279
always turn lighting down to a low

354
00:16:45,960 --> 00:16:50,280
quality setting if it turned out to be

355
00:16:47,279 --> 00:16:51,839
something we needed to get rid of so

356
00:16:50,279 --> 00:16:55,129
point being I think we would have time

357
00:16:51,840 --> 00:16:58,790
to do something fancier there where the

358
00:16:55,129 --> 00:17:01,759
where the quads themselves are sort of

359
00:16:58,789 --> 00:17:04,889
shaded with something a little bit more

360
00:17:01,759 --> 00:17:06,269
fancy and so if we thought about you

361
00:17:04,890 --> 00:17:11,310
know if we if we took a look at how we

362
00:17:06,269 --> 00:17:13,170
were going to do that potentially the

363
00:17:11,309 --> 00:17:17,639
problem is we need access to these

364
00:17:13,170 --> 00:17:20,759
things a you know in our shaders right

365
00:17:17,640 --> 00:17:22,110
and in order to have access to these in

366
00:17:20,759 --> 00:17:27,750
our shaders we have to kind of again

367
00:17:22,109 --> 00:17:29,519
decide how we want to interpolate our

368
00:17:27,750 --> 00:17:31,740
lighting and how we're going to access

369
00:17:29,519 --> 00:17:34,259
the interpolation to our lighting and so

370
00:17:31,740 --> 00:17:37,910
again that brings us just back to the to

371
00:17:34,259 --> 00:17:41,490
the very basic question of do we want to

372
00:17:37,910 --> 00:17:43,950
interpolate across primitives or not

373
00:17:41,490 --> 00:17:46,019
right meaning is this going to be a

374
00:17:43,950 --> 00:17:47,700
global lookup of the lighting or is it

375
00:17:46,019 --> 00:17:59,639
just going to be local to the primitive

376
00:17:47,700 --> 00:18:02,819
we happen to be sending down meaning if

377
00:17:59,640 --> 00:18:03,990
this or our sample points do we want to

378
00:18:02,819 --> 00:18:07,798
have all of these sample points

379
00:18:03,990 --> 00:18:10,740
available to the primitives so that when

380
00:18:07,798 --> 00:18:13,259
the primitive is shading itself it looks

381
00:18:10,740 --> 00:18:16,980
up into say a texture that has these

382
00:18:13,259 --> 00:18:20,700
sample points encoded or are we going to

383
00:18:16,980 --> 00:18:24,778
do something that is you know unrelated

384
00:18:20,700 --> 00:18:28,380
to this in some way and you're just

385
00:18:24,778 --> 00:18:31,140
going to send down information for how

386
00:18:28,380 --> 00:18:35,070
to shade a particular triangle right or

387
00:18:31,140 --> 00:18:36,630
something like this and I really like I

388
00:18:35,069 --> 00:18:39,028
said I really don't know so this is all

389
00:18:36,630 --> 00:18:40,559
experimental I have no particular idea

390
00:18:39,028 --> 00:18:44,640
about what the best way to do this would

391
00:18:40,558 --> 00:18:47,339
be what I will say is I'm definitely

392
00:18:44,640 --> 00:18:50,220
tempted to do something that uses all

393
00:18:47,339 --> 00:18:52,379
the samples meaning that allows the per

394
00:18:50,220 --> 00:18:54,500
pixel reconstruction to actually take

395
00:18:52,380 --> 00:18:56,520
into account everything that it sees

396
00:18:54,500 --> 00:18:58,619
everything that we've computed the

397
00:18:56,519 --> 00:19:01,679
reason for that is it feels a lot like

398
00:18:58,619 --> 00:19:05,369
throwing information away if for example

399
00:19:01,679 --> 00:19:08,220
when we go to shade you know this thing

400
00:19:05,369 --> 00:19:10,589
right here we've really done ourselves a

401
00:19:08,220 --> 00:19:17,038
disservice it seems if we throw away the

402
00:19:10,589 --> 00:19:19,769
lighting information for the you know

403
00:19:17,038 --> 00:19:22,169
for the piece of the ground that's right

404
00:19:19,769 --> 00:19:24,960
next to it because man that seems like

405
00:19:22,169 --> 00:19:26,520
useful information right and it seems

406
00:19:24,960 --> 00:19:30,149
like we could get much nicer lighting

407
00:19:26,519 --> 00:19:31,639
solutions by you know gathering from the

408
00:19:30,148 --> 00:19:33,989
things that are closeby

409
00:19:31,640 --> 00:19:41,909
so it definitely seems like the kind of

410
00:19:33,990 --> 00:19:43,319
thing that's a little bit tough - it's

411
00:19:41,909 --> 00:19:45,690
just the kind of thing that seems a

412
00:19:43,319 --> 00:19:47,759
little bit a little bit hard to pass up

413
00:19:45,690 --> 00:19:51,720
it's like it seems like we want to push

414
00:19:47,759 --> 00:19:54,390
that information down to the card and

415
00:19:51,720 --> 00:19:56,460
have it do the reconstruction

416
00:19:54,390 --> 00:19:59,190
so that raises the question of how we

417
00:19:56,460 --> 00:20:02,240
would store and how we would index you

418
00:19:59,190 --> 00:20:05,100
know into something that looks like this

419
00:20:02,240 --> 00:20:07,410
and again that's kind of one of those

420
00:20:05,099 --> 00:20:09,059
things that I wish I had a better idea

421
00:20:07,410 --> 00:20:11,130
of how we should do it

422
00:20:09,059 --> 00:20:15,139
I don't but let me just talk through a

423
00:20:11,130 --> 00:20:15,140
little bit of it here oops

424
00:20:20,480 --> 00:20:28,049
of course the the classic cannot access

425
00:20:25,740 --> 00:20:34,279
the tablet I do not know why that

426
00:20:28,049 --> 00:20:44,059
happens no one seems to know all right

427
00:20:34,279 --> 00:20:50,160
so here we are on day 404 lighting

428
00:20:44,059 --> 00:20:52,500
lookup so what I need to do here is I

429
00:20:50,160 --> 00:20:56,430
need to take what is essentially spatial

430
00:20:52,500 --> 00:20:58,079
data right so I've got you know only

431
00:20:56,430 --> 00:20:59,970
take that corner case that we have there

432
00:20:58,079 --> 00:21:04,199
for example so let's suppose we're

433
00:20:59,970 --> 00:21:07,440
looking at the place like this where we

434
00:21:04,200 --> 00:21:10,740
sort of have the wall here and the

435
00:21:07,440 --> 00:21:13,620
ground here and we're trying to light

436
00:21:10,740 --> 00:21:16,829
this stuff so we know right now that we

437
00:21:13,619 --> 00:21:19,259
took lighting samples at effectively

438
00:21:16,829 --> 00:21:21,029
these locations but that's not really

439
00:21:19,259 --> 00:21:22,740
the important part you know the

440
00:21:21,029 --> 00:21:24,960
important part is we took some lighting

441
00:21:22,740 --> 00:21:26,069
samples and those ladies samples we

442
00:21:24,960 --> 00:21:30,090
could really distribute anywhere

443
00:21:26,069 --> 00:21:32,879
honestly right because the point of the

444
00:21:30,089 --> 00:21:35,459
reconstruction is to take lighting

445
00:21:32,880 --> 00:21:37,410
samples that we distributed and do

446
00:21:35,460 --> 00:21:38,880
something sensible with them so we

447
00:21:37,410 --> 00:21:40,290
probably don't really need to think too

448
00:21:38,880 --> 00:21:41,910
hard about where the lighting samples

449
00:21:40,289 --> 00:21:43,649
are we just need to think about the fact

450
00:21:41,910 --> 00:21:45,240
that we have some lighting samples in

451
00:21:43,650 --> 00:21:50,519
space and now we need to reconstruct

452
00:21:45,240 --> 00:21:52,019
lighting from them right okay so once we

453
00:21:50,519 --> 00:21:54,809
have these lighting samples in space

454
00:21:52,019 --> 00:21:56,519
then what we want to do is say okay when

455
00:21:54,809 --> 00:21:59,009
I am computing something like one of

456
00:21:56,519 --> 00:22:02,220
these pixels I want to be able to take a

457
00:21:59,009 --> 00:22:05,359
neighborhood around where I am and see

458
00:22:02,220 --> 00:22:08,548
what all of the lighting is in that area

459
00:22:05,359 --> 00:22:16,908
right so it's kind of like a sphere

460
00:22:08,548 --> 00:22:16,908
full query wow that's some handwriting

461
00:22:27,019 --> 00:22:33,019
there you go so it's kind of like a

462
00:22:29,390 --> 00:22:34,790
spherical query in a sense that what we

463
00:22:33,019 --> 00:22:36,349
would ideally like to do is we'd like to

464
00:22:34,789 --> 00:22:39,230
be able to say okay I'm going to shade

465
00:22:36,349 --> 00:22:41,839
this pixel please tell me all of the

466
00:22:39,230 --> 00:22:47,360
lighting samples that are within you

467
00:22:41,839 --> 00:22:50,689
know are some radius of me and I'm going

468
00:22:47,359 --> 00:22:52,819
to take all those samples and average

469
00:22:50,690 --> 00:23:03,039
them together based on how far away I am

470
00:22:52,819 --> 00:23:08,659
from them let's say right by the way

471
00:23:03,039 --> 00:23:13,460
this is some good lemonade anyway so we

472
00:23:08,660 --> 00:23:17,140
need two things for this first of all we

473
00:23:13,460 --> 00:23:17,140
need to send samples to the card

474
00:23:22,559 --> 00:23:30,869
right and we don't know in the future

475
00:23:27,470 --> 00:23:32,339
those lighting samples might not be sent

476
00:23:30,869 --> 00:23:35,399
to the car they may actually just be

477
00:23:32,339 --> 00:23:37,439
created on the card right

478
00:23:35,400 --> 00:23:40,170
so saying sending lighting samples so

479
00:23:37,440 --> 00:23:44,820
the card is really just for our current

480
00:23:40,170 --> 00:23:46,200
test purposes so that's you know this is

481
00:23:44,819 --> 00:23:47,429
really just something we need to do for

482
00:23:46,200 --> 00:23:48,900
right now because we would like to go to

483
00:23:47,430 --> 00:23:51,029
compute lighting on the CPU at least for

484
00:23:48,900 --> 00:23:54,690
now we may not compute lighting on the

485
00:23:51,029 --> 00:23:57,389
CPU in the long run we may just have the

486
00:23:54,690 --> 00:24:00,360
GPU do it but you know that's neither

487
00:23:57,390 --> 00:24:02,400
here nor there so at some point we have

488
00:24:00,359 --> 00:24:08,819
to send like a filter card which means

489
00:24:02,400 --> 00:24:13,550
we need a storage format for them and

490
00:24:08,819 --> 00:24:13,549
number two we need to be able to quickly

491
00:24:15,170 --> 00:24:25,769
spatially query them right so we need

492
00:24:23,160 --> 00:24:27,630
two things we need a storage format that

493
00:24:25,769 --> 00:24:29,639
will store these lighting samples with

494
00:24:27,630 --> 00:24:32,700
something that the graphics card can

495
00:24:29,640 --> 00:24:36,290
access and the second thing we need is a

496
00:24:32,700 --> 00:24:39,240
way to quickly spatially query what up

497
00:24:36,289 --> 00:24:43,649
what lighting samples are near to a

498
00:24:39,240 --> 00:24:46,349
particular 3d point in space right those

499
00:24:43,650 --> 00:24:48,690
are the two things we need in order to

500
00:24:46,349 --> 00:24:49,949
do those two things they're actually the

501
00:24:48,690 --> 00:24:52,559
first ones pretty straightforward I

502
00:24:49,950 --> 00:24:54,509
think right if we think about how we

503
00:24:52,559 --> 00:24:56,899
would store these well we know that a

504
00:24:54,509 --> 00:25:02,670
lighting sample is like an X Y and a Z

505
00:24:56,900 --> 00:25:09,150
right and then you know a RG and a B

506
00:25:02,670 --> 00:25:16,320
intensity so really we can just store

507
00:25:09,150 --> 00:25:18,720
this with to RGB textures maybe there's

508
00:25:16,319 --> 00:25:23,359
something more clever we would want to

509
00:25:18,720 --> 00:25:25,680
do at some point but really you know the

510
00:25:23,359 --> 00:25:29,719
without thinking too hard about it too

511
00:25:25,680 --> 00:25:32,039
RGB textures I will store them all

512
00:25:29,720 --> 00:25:34,269
there's there's really nothing more to

513
00:25:32,039 --> 00:25:36,878
it than that right

514
00:25:34,269 --> 00:25:39,788
then for the spatial query aspect of it

515
00:25:36,878 --> 00:25:42,968
that parts a little bit trickier but we

516
00:25:39,788 --> 00:25:44,979
do have options for it so the simplest

517
00:25:42,969 --> 00:25:49,479
option probably is just going to be a

518
00:25:44,979 --> 00:25:51,429
voxel right so what we would do if we

519
00:25:49,479 --> 00:25:53,700
wanted to store a spatial query that was

520
00:25:51,429 --> 00:25:58,538
not particularly intelligent in any real

521
00:25:53,700 --> 00:26:00,759
fancy way but which we you know like I

522
00:25:58,538 --> 00:26:03,128
said wanted to construct something that

523
00:26:00,759 --> 00:26:04,778
was a relatively simple spatial query we

524
00:26:03,128 --> 00:26:08,949
could do something that was sort of a

525
00:26:04,778 --> 00:26:13,450
you know a lookup structure that was you

526
00:26:08,950 --> 00:26:16,659
know 256 by 256 by say 32 something like

527
00:26:13,450 --> 00:26:22,709
this which is not a huge amount of space

528
00:26:16,659 --> 00:26:26,859
even though it is a voxel right it's um

529
00:26:22,709 --> 00:26:28,269
let's say we probably need 16 I guess it

530
00:26:26,858 --> 00:26:30,628
depends on how many reflections we have

531
00:26:28,269 --> 00:26:32,888
don't love it so you know it's probably

532
00:26:30,628 --> 00:26:36,519
let's say each one of those needs to be

533
00:26:32,888 --> 00:26:39,699
16 bit so it's 4 megabytes which is not

534
00:26:36,519 --> 00:26:43,229
the end of the world right

535
00:26:39,700 --> 00:26:46,328
but in that 2 3 6 by 2 6 by 32 texture

536
00:26:43,229 --> 00:26:51,038
what we would do is it each cell we

537
00:26:46,328 --> 00:26:56,469
would just store an index to the the

538
00:26:51,038 --> 00:27:00,548
texture set right so in this texture

539
00:26:56,469 --> 00:27:02,459
series here in in this these these two

540
00:27:00,548 --> 00:27:05,288
textures right we've got two textures

541
00:27:02,459 --> 00:27:08,229
imagine that they were just either 1d

542
00:27:05,288 --> 00:27:10,658
textures or 2d textures that we treat it

543
00:27:08,229 --> 00:27:14,409
as 1d textures either way doesn't really

544
00:27:10,659 --> 00:27:17,469
matter but imagine that we've got you

545
00:27:14,409 --> 00:27:21,309
know the XYZ texture and the RGB texture

546
00:27:17,469 --> 00:27:24,538
they're just some big list of lighting

547
00:27:21,308 --> 00:27:28,328
samples however many we decide to take

548
00:27:24,538 --> 00:27:33,598
right and you imagine the first Texel is

549
00:27:28,328 --> 00:27:38,158
zero and then the you know 6 5 5 3 6

550
00:27:33,598 --> 00:27:41,888
well just uh 5 3 5 is the maximum one

551
00:27:38,159 --> 00:27:45,039
what you can imagine is in this texture

552
00:27:41,888 --> 00:27:46,399
we just store a single 16-bit value that

553
00:27:45,038 --> 00:27:50,150
says we're

554
00:27:46,400 --> 00:27:55,480
the textures for this where the letting

555
00:27:50,150 --> 00:27:58,400
samples for that block start right and

556
00:27:55,480 --> 00:28:00,349
we could choose to store account in here

557
00:27:58,400 --> 00:28:02,600
as well if we want to make this a 32-bit

558
00:28:00,349 --> 00:28:07,339
texture so it's 8 megabytes we could

559
00:28:02,599 --> 00:28:09,230
store an offset and account and then we

560
00:28:07,339 --> 00:28:15,649
would know how many of them to read as

561
00:28:09,230 --> 00:28:21,019
well or we could just assume that there

562
00:28:15,650 --> 00:28:22,820
is like a fixed number of there's a

563
00:28:21,019 --> 00:28:26,089
fixed number store or a null terminator

564
00:28:22,819 --> 00:28:29,990
right you could imagine that when the

565
00:28:26,089 --> 00:28:33,409
XYZ value that you encounter has some

566
00:28:29,990 --> 00:28:36,349
special value so for example if you just

567
00:28:33,410 --> 00:28:40,490
put you know in inside X or something

568
00:28:36,349 --> 00:28:42,559
like this you know you've hit the null

569
00:28:40,490 --> 00:28:45,170
terminator so you know you've got

570
00:28:42,559 --> 00:28:46,669
different ways you can can deal with it

571
00:28:45,170 --> 00:28:48,380
and it depends whether you care about

572
00:28:46,670 --> 00:28:58,279
this texture getting bloated or this

573
00:28:48,380 --> 00:29:02,150
texture getting bloated I'm not sure I

574
00:28:58,279 --> 00:29:08,269
know off the bat which one of those

575
00:29:02,150 --> 00:29:11,690
would be better this RGB right here this

576
00:29:08,269 --> 00:29:14,480
texture can be 24-bit this texture here

577
00:29:11,690 --> 00:29:17,750
probably can't be this texture here

578
00:29:14,480 --> 00:29:21,970
probably has to be actually a float

579
00:29:17,750 --> 00:29:24,410
texture or a 16-bit per channel texture

580
00:29:21,970 --> 00:29:27,980
just because it's storing positions in

581
00:29:24,410 --> 00:29:30,860
space and we need to be able to

582
00:29:27,980 --> 00:29:32,839
reconstruct that with some fidelity so

583
00:29:30,859 --> 00:29:37,219
it suggests to me that this would

584
00:29:32,839 --> 00:29:44,720
probably be a fairly large texture if we

585
00:29:37,220 --> 00:29:46,759
assume that that this texture is if we

586
00:29:44,720 --> 00:29:49,009
if we assume that this texture is

587
00:29:46,759 --> 00:29:57,019
actually a floating point then it's

588
00:29:49,009 --> 00:29:58,700
actually 32 64 what 96 bit because it's

589
00:29:57,019 --> 00:30:01,398
right

590
00:29:58,700 --> 00:30:03,919
[Music]

591
00:30:01,398 --> 00:30:14,719
so this entire thing when taken together

592
00:30:03,919 --> 00:30:17,690
is 96 plus 24 bits or 120 bit right so

593
00:30:14,720 --> 00:30:22,069
yeah if we just if you think about 120

594
00:30:17,690 --> 00:30:25,759
bit texture versus this one wasting

595
00:30:22,069 --> 00:30:26,989
space wasting 120 bits in here every

596
00:30:25,759 --> 00:30:30,409
time you have a null terminator it

597
00:30:26,989 --> 00:30:32,269
depends I it's really hard for me to say

598
00:30:30,409 --> 00:30:34,309
I really don't know because in here this

599
00:30:32,269 --> 00:30:38,538
would bloat all of these even the ones

600
00:30:34,308 --> 00:30:40,489
that don't have anything in them so you

601
00:30:38,538 --> 00:30:43,128
know if you if you made this one go from

602
00:30:40,489 --> 00:30:46,278
16-bit to 32-bit you're doubling the

603
00:30:43,128 --> 00:30:49,069
size of this you're not doubling the

604
00:30:46,278 --> 00:30:51,108
size of this so the fact that this one

605
00:30:49,069 --> 00:30:52,608
stores a lot more bits per it's out of

606
00:30:51,108 --> 00:30:53,778
note you can see why it's a tough trade

607
00:30:52,608 --> 00:30:59,089
out there you'd have to kind of think it

608
00:30:53,778 --> 00:31:01,489
through a little better but hopefully

609
00:30:59,089 --> 00:31:04,009
this makes some sense my the thing that

610
00:31:01,489 --> 00:31:08,499
makes me a little nervous about this in

611
00:31:04,009 --> 00:31:11,839
general is that it does it is kind of

612
00:31:08,499 --> 00:31:15,190
its kind of compute shader a I assume

613
00:31:11,839 --> 00:31:15,189
let me see here

614
00:31:31,240 --> 00:31:37,700
where is the there it is

615
00:31:34,480 --> 00:31:37,700
[Music]

616
00:31:42,880 --> 00:31:52,720
I assume if I'm not mistaken although I

617
00:31:48,549 --> 00:32:00,369
might be mistaken I don't know if you

618
00:31:52,720 --> 00:32:06,400
can do like I don't really know if you

619
00:32:00,369 --> 00:32:09,839
can do anything sensible for creating

620
00:32:06,400 --> 00:32:15,519
this kind of a lookup structure on the

621
00:32:09,839 --> 00:32:17,799
graphics card however on the CPU it's

622
00:32:15,519 --> 00:32:19,629
not so onerous because we're just doing

623
00:32:17,799 --> 00:32:22,079
testing so we could pretty trivially

624
00:32:19,630 --> 00:32:24,850
create one of these on the CPU obviously

625
00:32:22,079 --> 00:32:28,389
but this wouldn't be a very good way to

626
00:32:24,849 --> 00:32:29,859
store it for GPU generation and the

627
00:32:28,390 --> 00:32:32,200
reason for that is because packed

628
00:32:29,859 --> 00:32:34,599
storage of this of this kind is

629
00:32:32,200 --> 00:32:37,000
difficult for the GPU to recreate in

630
00:32:34,599 --> 00:32:40,480
parallel right

631
00:32:37,000 --> 00:32:43,029
using Atomics you could make a linked

632
00:32:40,480 --> 00:32:49,799
list version of this so you could add

633
00:32:43,029 --> 00:32:55,180
the lighting samples to the voxel as

634
00:32:49,799 --> 00:32:56,919
sort of a using Atomics every time you

635
00:32:55,180 --> 00:33:01,029
went to write one in you would write one

636
00:32:56,920 --> 00:33:03,759
in and put a link like a next pointer

637
00:33:01,029 --> 00:33:06,339
effectively into one of them so you

638
00:33:03,759 --> 00:33:09,460
could do something like that but again

639
00:33:06,339 --> 00:33:12,659
it's pretty it's just pretty dicey right

640
00:33:09,460 --> 00:33:16,120
it's a pretty it's a pretty nasty

641
00:33:12,660 --> 00:33:17,769
operation to have to do so we could do

642
00:33:16,119 --> 00:33:20,919
something like that but it is going to

643
00:33:17,769 --> 00:33:23,529
be a little bit tricky I don't know if

644
00:33:20,920 --> 00:33:26,470
we if we would therefore have to move up

645
00:33:23,529 --> 00:33:29,410
a level of of OpenGL shading because I

646
00:33:26,470 --> 00:33:32,769
don't know where Atomics come in I don't

647
00:33:29,410 --> 00:33:38,500
know when you can get atomic operations

648
00:33:32,769 --> 00:33:43,690
in shaders they are a very old concept

649
00:33:38,500 --> 00:33:48,690
but they're not i don't know how widely

650
00:33:43,690 --> 00:33:48,690
supported they are right let me see

651
00:33:55,880 --> 00:33:59,950
so it seems like

652
00:34:04,650 --> 00:34:11,450
atomic counter is not really what I'm

653
00:34:08,668 --> 00:34:11,449
looking for

654
00:34:18,559 --> 00:34:21,849
let's also see here

655
00:34:24,579 --> 00:34:29,659
because I'm pretty sure that basically

656
00:34:26,929 --> 00:34:33,499
if we wanted to compute lighting on the

657
00:34:29,659 --> 00:34:35,389
graphics card and provide it to the game

658
00:34:33,498 --> 00:34:38,028
in a way that was easy for it to look up

659
00:34:35,389 --> 00:34:40,309
I'm pretty sure that it would require

660
00:34:38,028 --> 00:34:42,798
fancier shading than what we have I'm

661
00:34:40,309 --> 00:34:46,759
just I'm not 100% certain but I believe

662
00:34:42,798 --> 00:34:48,918
it would be I can't think of a lot of

663
00:34:46,759 --> 00:34:52,219
ways to look up lighting that wouldn't

664
00:34:48,918 --> 00:35:00,489
require that but I could be wrong about

665
00:34:52,219 --> 00:35:00,488
that trying to think

666
00:35:23,800 --> 00:35:30,530
yeah I mean all I can say is if we want

667
00:35:29,119 --> 00:35:32,059
to do something now which will allow us

668
00:35:30,530 --> 00:35:34,790
to play around with it this would be

669
00:35:32,059 --> 00:35:37,519
fine because creating this on the GPU on

670
00:35:34,789 --> 00:35:38,809
the CPU is not hard and we don't care

671
00:35:37,519 --> 00:35:41,960
how long it takes to run because we're

672
00:35:38,809 --> 00:35:44,299
just doing a test pass so the problem is

673
00:35:41,960 --> 00:35:45,559
just if we wanted to do something if we

674
00:35:44,300 --> 00:35:47,600
were trying to do something that was

675
00:35:45,559 --> 00:35:48,799
forward-looking but I don't know how

676
00:35:47,599 --> 00:35:50,809
necessary that is because we don't

677
00:35:48,800 --> 00:35:54,380
really even know how well this will work

678
00:35:50,809 --> 00:35:56,059
right and it might be just premature to

679
00:35:54,380 --> 00:35:57,800
be thinking about how we will run things

680
00:35:56,059 --> 00:35:59,779
on the GPU before we've actually gotten

681
00:35:57,800 --> 00:36:10,360
to the point where we're happy with the

682
00:35:59,780 --> 00:36:10,360
results that said it is sort of true

683
00:36:13,090 --> 00:36:22,640
that we may not need something that

684
00:36:18,500 --> 00:36:26,090
complicated for example in terms of like

685
00:36:22,639 --> 00:36:28,400
the key if we did have a voxel where we

686
00:36:26,090 --> 00:36:30,170
eventually dump things into the voxel

687
00:36:28,400 --> 00:36:32,900
maybe it would be possible to just use

688
00:36:30,170 --> 00:36:35,269
that directly to store the lytic

689
00:36:32,900 --> 00:36:38,660
information where we just kind of

690
00:36:35,269 --> 00:36:45,739
average our lighting samples into a

691
00:36:38,659 --> 00:36:48,230
voxel after we compute them I don't

692
00:36:45,739 --> 00:36:50,299
really know and so you could just

693
00:36:48,230 --> 00:36:56,449
imagine getting your lighting from the

694
00:36:50,300 --> 00:36:58,250
voxel and you just don't bother with the

695
00:36:56,449 --> 00:37:00,710
secondary lookup I mean if you think

696
00:36:58,250 --> 00:37:02,480
about it right you could imagine taking

697
00:37:00,710 --> 00:37:06,260
the lighting samples and rendering the

698
00:37:02,480 --> 00:37:07,820
lighting samples into a voxel as sort of

699
00:37:06,260 --> 00:37:10,490
just a rasterized version of the

700
00:37:07,820 --> 00:37:12,880
lighting and then everyone reconstructs

701
00:37:10,489 --> 00:37:14,989
by just looking up into the voxel and

702
00:37:12,880 --> 00:37:17,570
interpolating between the various points

703
00:37:14,989 --> 00:37:21,769
in the voxel and we could use a better

704
00:37:17,570 --> 00:37:24,050
interpolator than bilinear or try linear

705
00:37:21,769 --> 00:37:25,849
in this case we could use it better

706
00:37:24,050 --> 00:37:31,820
interpolator than trilinear if we wanted

707
00:37:25,849 --> 00:37:34,960
to seems like not a terrible idea it's

708
00:37:31,820 --> 00:37:34,960
not necessarily a good idea

709
00:37:36,309 --> 00:37:39,820
but that would mean we wouldn't really

710
00:37:37,869 --> 00:37:43,639
have to deal with any kind of a like

711
00:37:39,820 --> 00:37:46,769
more elaborate lookup structure

712
00:37:43,639 --> 00:37:46,769
[Music]

713
00:37:55,780 --> 00:38:06,619
yeah hard to say let's maybe let's maybe

714
00:38:03,260 --> 00:38:10,329
try that I mean I guess we could sort of

715
00:38:06,619 --> 00:38:13,400
look at both options to a certain extent

716
00:38:10,329 --> 00:38:16,280
but maybe we could just try that and

717
00:38:13,400 --> 00:38:18,829
because it if you know if we wanted to

718
00:38:16,280 --> 00:38:21,559
we could imagine that just sending down

719
00:38:18,829 --> 00:38:24,410
a very high-resolution voxel is sort of

720
00:38:21,559 --> 00:38:27,740
an approximation to this anyway so we

721
00:38:24,409 --> 00:38:30,618
could kind of also see by changing sort

722
00:38:27,739 --> 00:38:33,439
of the resolution of the voxel we could

723
00:38:30,619 --> 00:38:36,950
maybe figure out - you know to some

724
00:38:33,440 --> 00:38:39,079
extent how we wanted the light how the

725
00:38:36,949 --> 00:38:42,588
lighting would improve if we were if we

726
00:38:39,079 --> 00:38:44,539
were doing a scheme that more that used

727
00:38:42,588 --> 00:38:55,150
sparse storage in order to make things

728
00:38:44,539 --> 00:38:55,150
clearer but yeah but it does seem

729
00:39:01,809 --> 00:39:05,099
it does seem alright

730
00:39:13,849 --> 00:39:19,818
all right okay I can I can I could maybe

731
00:39:17,088 --> 00:39:23,058
believe that so let me take a look at

732
00:39:19,818 --> 00:39:27,768
see what our options are in GLSL three

733
00:39:23,059 --> 00:39:30,559
here in terms of sampling from a 3d

734
00:39:27,768 --> 00:39:33,498
texture I assume we can do that because

735
00:39:30,559 --> 00:39:35,650
that's pretty old-school right so you

736
00:39:33,498 --> 00:39:40,038
can see here we've got texture lookup

737
00:39:35,650 --> 00:39:45,099
for a 3d sampler and we can just pass in

738
00:39:40,039 --> 00:39:48,109
a 3d uvw and it will give us back

739
00:39:45,099 --> 00:39:53,989
exactly what we would have expected so

740
00:39:48,108 --> 00:40:00,380
that seems pretty easy no big deal there

741
00:39:53,989 --> 00:40:02,239
I guess uh projective texture look up

742
00:40:00,380 --> 00:40:05,469
with us we don't need we shouldn't

743
00:40:02,239 --> 00:40:08,929
really need anything else I don't think

744
00:40:05,469 --> 00:40:13,429
so it depends on the circumstance we may

745
00:40:08,929 --> 00:40:20,118
want to do a textile fetch instead this

746
00:40:13,429 --> 00:40:24,558
will this will give us back I don't know

747
00:40:20,119 --> 00:40:28,130
that might not be true so hmm if we turn

748
00:40:24,559 --> 00:40:33,079
off any filtering then the texture

749
00:40:28,130 --> 00:40:34,940
lookup would give us what we need I

750
00:40:33,079 --> 00:40:38,039
think

751
00:40:34,940 --> 00:40:38,039
[Music]

752
00:40:41,420 --> 00:40:48,180
so I think we could just use the regular

753
00:40:44,639 --> 00:40:53,098
texture fetch with no filtering and then

754
00:40:48,179 --> 00:40:55,699
if we want to we can grab you know

755
00:40:53,099 --> 00:40:58,829
multiple samples from the texture and

756
00:40:55,699 --> 00:41:00,689
average them together or rather radially

757
00:40:58,829 --> 00:41:01,680
blend them together based on distance or

758
00:41:00,690 --> 00:41:04,108
something like I was talking about

759
00:41:01,679 --> 00:41:06,858
before to give ourselves interpolation

760
00:41:04,108 --> 00:41:06,858
of the lighting

761
00:41:15,010 --> 00:41:20,560
so the thing that makes me a little

762
00:41:16,840 --> 00:41:22,869
nervous about this is that I'm worried

763
00:41:20,559 --> 00:41:30,070
about the artifacts that we'll get from

764
00:41:22,869 --> 00:41:37,358
things moving across cell boundaries so

765
00:41:30,070 --> 00:41:40,090
for example imagine that you have a

766
00:41:37,358 --> 00:41:42,489
lighting sample that's right here and

767
00:41:40,090 --> 00:41:44,590
another letting sample that's right here

768
00:41:42,489 --> 00:41:47,589
when they get box two lives they'll each

769
00:41:44,590 --> 00:41:50,108
be setting what the lighting is in their

770
00:41:47,590 --> 00:41:52,420
part of the voxel however if you then

771
00:41:50,108 --> 00:41:55,449
moved this whatever this was was a

772
00:41:52,420 --> 00:41:58,409
moving thing and it moved so that on the

773
00:41:55,449 --> 00:41:58,409
next frame

774
00:41:59,429 --> 00:42:04,118
they're both inside one I didn't draw

775
00:42:02,289 --> 00:42:06,300
this very well let me draw a little

776
00:42:04,119 --> 00:42:06,300
bigger

777
00:42:18,289 --> 00:42:28,130
so here's frame zero here's frame one

778
00:42:24,610 --> 00:42:30,320
and imagine that I have you know to

779
00:42:28,130 --> 00:42:33,260
letting samples one here and one here

780
00:42:30,320 --> 00:42:35,840
and then on the next frame they're

781
00:42:33,260 --> 00:42:39,170
moving in this direction so they both

782
00:42:35,840 --> 00:42:41,809
end up in the same cell so if we do a

783
00:42:39,170 --> 00:42:44,000
voxel scheme that can't record all the

784
00:42:41,809 --> 00:42:47,389
reflectors so they're not moving

785
00:42:44,000 --> 00:42:49,550
continuously around the world they would

786
00:42:47,389 --> 00:42:50,690
have to get averaged together here which

787
00:42:49,550 --> 00:42:54,260
means you'll get a very different

788
00:42:50,690 --> 00:42:55,700
lighting result on frame one as from

789
00:42:54,260 --> 00:42:58,370
frame 0 because in frame zero you're

790
00:42:55,699 --> 00:42:59,929
considering the contribution of each one

791
00:42:58,369 --> 00:43:02,150
of those reflectors separately and on

792
00:42:59,929 --> 00:43:03,859
frame 1 you're having to smush them

793
00:43:02,150 --> 00:43:07,880
together and being they have to be

794
00:43:03,860 --> 00:43:11,200
considered as a pair as a lookup

795
00:43:07,880 --> 00:43:14,180
combined pair uh and I don't love that

796
00:43:11,199 --> 00:43:17,779
because again that that puts us back to

797
00:43:14,179 --> 00:43:25,489
a sort of artifact a pretty pretty heavy

798
00:43:17,780 --> 00:43:27,470
artifact potential I would think so I

799
00:43:25,489 --> 00:43:30,169
guess I don't know that I really believe

800
00:43:27,469 --> 00:43:34,339
that that that putting things into the

801
00:43:30,170 --> 00:43:35,930
voxel as you know just a single sample

802
00:43:34,340 --> 00:43:37,670
per voxel and everything else gets

803
00:43:35,929 --> 00:43:43,210
mushed down to that but that's really

804
00:43:37,670 --> 00:43:45,500
going to be what I want in the end I

805
00:43:43,210 --> 00:43:49,309
suspect that I probably will need

806
00:43:45,500 --> 00:43:51,650
something that's going to treat each

807
00:43:49,309 --> 00:43:54,159
reflector individually and store all the

808
00:43:51,650 --> 00:43:54,160
reflectors

809
00:44:12,480 --> 00:44:15,230
Hey

810
00:44:28,190 --> 00:44:33,179
well I guess what I'm going to say then

811
00:44:31,139 --> 00:44:36,839
is let's just do the original thing I

812
00:44:33,179 --> 00:44:45,239
was talking about and let's see what it

813
00:44:36,840 --> 00:44:47,640
how it results right in other words

814
00:44:45,239 --> 00:44:55,769
let's suppose that we're going to do

815
00:44:47,639 --> 00:44:58,650
lighting here and I want to encode the

816
00:44:55,769 --> 00:45:01,230
this lighting information into some

817
00:44:58,650 --> 00:45:06,269
bitmaps that a graphic card could accept

818
00:45:01,230 --> 00:45:15,929
and use to reconstruct lighting you know

819
00:45:06,269 --> 00:45:24,480
somehow so so if we imagined that we

820
00:45:15,929 --> 00:45:26,669
were going to do that and I was going to

821
00:45:24,480 --> 00:45:28,230
do an output lighting here and what I

822
00:45:26,670 --> 00:45:32,000
want to do inside this output lighting

823
00:45:28,230 --> 00:45:32,000
is I want to do like an output lighting

824
00:45:32,420 --> 00:45:41,400
textures something like this so what I

825
00:45:38,039 --> 00:45:48,559
want to do is I want to basically do a

826
00:45:41,400 --> 00:45:48,559
voxel where I place each reflector into

827
00:45:48,769 --> 00:45:56,070
like into a voxel and then sort of make

828
00:45:53,219 --> 00:45:58,049
those up take take that voxel and

829
00:45:56,070 --> 00:46:02,220
convert it into one of the texture

830
00:45:58,050 --> 00:46:10,590
formats that we you know that we can

831
00:46:02,219 --> 00:46:12,359
send to the card so for example what I

832
00:46:10,590 --> 00:46:16,940
would want to do here is say that

833
00:46:12,360 --> 00:46:16,940
lighting solution as a thing

834
00:46:22,010 --> 00:46:27,920
notes in your stomach there it is so if

835
00:46:25,530 --> 00:46:30,900
we imagine that lighting solution has

836
00:46:27,920 --> 00:46:35,220
some voxel information in it that it's

837
00:46:30,900 --> 00:46:37,820
going to generate and also has some

838
00:46:35,219 --> 00:46:45,659
[Music]

839
00:46:37,820 --> 00:46:57,780
place to store these elements let's say

840
00:46:45,659 --> 00:47:00,779
I've got something like this so I've got

841
00:46:57,780 --> 00:47:04,050
a position texture that's just going to

842
00:47:00,780 --> 00:47:06,570
be you know however many lighting

843
00:47:04,050 --> 00:47:14,850
elements I have at maximum which is 4096

844
00:47:06,570 --> 00:47:17,610
in this case I've got a RGB texture so

845
00:47:14,849 --> 00:47:19,049
that's just going to be well I guess

846
00:47:17,610 --> 00:47:21,660
there's not really good way to do that

847
00:47:19,050 --> 00:47:28,320
but this is the color texture and it's

848
00:47:21,659 --> 00:47:30,899
going to be three of these each and I

849
00:47:28,320 --> 00:47:32,820
don't think we really need like I could

850
00:47:30,900 --> 00:47:34,380
do a you thirty-two pack 232 but there's

851
00:47:32,820 --> 00:47:35,910
really no point because we only need the

852
00:47:34,380 --> 00:47:46,050
are G and the B I'm not sure there's

853
00:47:35,909 --> 00:47:49,259
anything else that you need there so

854
00:47:46,050 --> 00:47:52,140
those are lighting samples and then we

855
00:47:49,260 --> 00:47:56,210
need the voxel lookup

856
00:47:52,139 --> 00:48:03,869
so the voxel lookup is going to have a

857
00:47:56,210 --> 00:48:07,349
count and a like a count in an index

858
00:48:03,869 --> 00:48:10,440
essentially and I guess that really the

859
00:48:07,349 --> 00:48:14,519
count has to be small so really you

860
00:48:10,440 --> 00:48:17,190
could probably fit the count and the

861
00:48:14,519 --> 00:48:19,559
index into 24 bits

862
00:48:17,190 --> 00:48:21,599
you don't need 32 bits for that because

863
00:48:19,559 --> 00:48:24,840
the count is in fact the count could

864
00:48:21,599 --> 00:48:29,099
even be if you just use the single

865
00:48:24,840 --> 00:48:31,050
16-bit value the camp could even be sort

866
00:48:29,099 --> 00:48:33,389
of snuggled in there probably with it

867
00:48:31,050 --> 00:48:34,800
because you probably can't have that

868
00:48:33,389 --> 00:48:36,420
many in there but

869
00:48:34,800 --> 00:48:37,800
you won't get that fancy just yet

870
00:48:36,420 --> 00:48:39,990
because that's probably putting the cart

871
00:48:37,800 --> 00:48:47,220
before the horse so I guess we'll just

872
00:48:39,989 --> 00:48:51,000
say that this is the voxel lookup or

873
00:48:47,219 --> 00:48:52,889
something and who knows what that is I

874
00:48:51,000 --> 00:48:55,829
certainly don't but probably something

875
00:48:52,889 --> 00:48:57,629
like that right so these are the things

876
00:48:55,829 --> 00:49:03,239
that we would send down to the graphics

877
00:48:57,630 --> 00:49:05,190
card and like I said I don't know if we

878
00:49:03,239 --> 00:49:07,049
want to just make this a 32-bit texture

879
00:49:05,190 --> 00:49:08,970
because I don't know there's nothing the

880
00:49:07,050 --> 00:49:11,070
problem is there's nothing else to

881
00:49:08,969 --> 00:49:14,189
suppress to store in there at least not

882
00:49:11,070 --> 00:49:17,070
that I can think of because our lighting

883
00:49:14,190 --> 00:49:18,980
is just going to be RGB intensity and

884
00:49:17,070 --> 00:49:22,200
there's really nothing else to put

885
00:49:18,980 --> 00:49:23,550
informational e in there but I guess you

886
00:49:22,199 --> 00:49:24,989
know what one thing we could say is

887
00:49:23,550 --> 00:49:27,330
we're trying to do this is the test so

888
00:49:24,989 --> 00:49:28,859
let's just keep it simple since we have

889
00:49:27,329 --> 00:49:32,069
functions that pack this stuff already

890
00:49:28,860 --> 00:49:35,400
and maybe that's just an easier way to

891
00:49:32,070 --> 00:49:38,370
go so you imagine we've got our box to

892
00:49:35,400 --> 00:49:40,170
look up in here and I guess again that

893
00:49:38,369 --> 00:49:44,309
will make that a u-32 because we'll use

894
00:49:40,170 --> 00:49:48,030
a 16-bit index and a 16-bit offset it's

895
00:49:44,309 --> 00:49:49,949
a bit index of 6 to account for now so

896
00:49:48,030 --> 00:49:51,960
there we go let's see how big that is

897
00:49:49,949 --> 00:50:00,239
I'm just curious how much data that is

898
00:49:51,960 --> 00:50:04,820
it's a lot it's 4096 times I guess

899
00:50:00,239 --> 00:50:04,819
that's three floats times 4 so that is

900
00:50:17,289 --> 00:50:28,640
that's just 4000s kind of for and I

901
00:50:27,199 --> 00:50:35,919
think we said this is eight megabytes

902
00:50:28,639 --> 00:50:35,920
right yep

903
00:50:39,978 --> 00:50:46,958
so this is 16 K just give just 8 a.m.

904
00:50:47,619 --> 00:51:02,890
and I guess 49 152 1024 is 48 right so

905
00:50:58,909 --> 00:51:04,940
you know these are tiny and that is

906
00:51:02,889 --> 00:51:08,568
understandable right because they do

907
00:51:04,940 --> 00:51:10,400
those really don't take up any space by

908
00:51:08,568 --> 00:51:13,338
comparison because there's only so many

909
00:51:10,400 --> 00:51:15,170
reflectors that we actually have and

910
00:51:13,338 --> 00:51:17,690
they're not multi-dimensional so they're

911
00:51:15,170 --> 00:51:19,219
pretty tiny the box will look up is what

912
00:51:17,690 --> 00:51:20,869
takes up all the space and of course

913
00:51:19,219 --> 00:51:23,358
that's because it's massively redundant

914
00:51:20,869 --> 00:51:34,278
like there's way more space taken up by

915
00:51:23,358 --> 00:51:36,469
it than it probably needs so this is

916
00:51:34,278 --> 00:51:42,528
really good lemonade you know it's

917
00:51:36,469 --> 00:51:46,849
Newman's own lemonade I'm kind of a

918
00:51:42,528 --> 00:51:47,059
Newman's Own fan I don't get paid to say

919
00:51:46,849 --> 00:51:53,229
that

920
00:51:47,059 --> 00:51:56,150
I just am they have really good little

921
00:51:53,228 --> 00:51:59,679
Newman O's the little like Oreo kind of

922
00:51:56,150 --> 00:52:01,670
cookie things those are really good and

923
00:51:59,679 --> 00:52:07,009
so are the chocolate chip cookies

924
00:52:01,670 --> 00:52:07,608
alright so what we want to do is fill

925
00:52:07,009 --> 00:52:11,269
this out

926
00:52:07,608 --> 00:52:13,248
and in order to keep this relatively

927
00:52:11,268 --> 00:52:15,198
condensed for now like I said to make it

928
00:52:13,248 --> 00:52:17,409
easier on us we probably don't want to

929
00:52:15,199 --> 00:52:19,699
make it be a skip list kind of a thing

930
00:52:17,409 --> 00:52:23,478
well skip list is probably one word a

931
00:52:19,699 --> 00:52:25,278
linked list I don't know how we would

932
00:52:23,478 --> 00:52:26,750
create a structure like this on the GPU

933
00:52:25,278 --> 00:52:28,099
efficiently and the

934
00:52:26,750 --> 00:52:30,199
for that is because things have to get

935
00:52:28,099 --> 00:52:32,389
packed so the way we would have to do

936
00:52:30,199 --> 00:52:34,219
this and we can just on the CPU very

937
00:52:32,389 --> 00:52:35,900
easily but on the GPU I don't know or

938
00:52:34,219 --> 00:52:38,000
even just how we would do a fast version

939
00:52:35,900 --> 00:52:42,079
of it on the CPU also seems a little bit

940
00:52:38,000 --> 00:52:45,920
tricky which is to say that if we want

941
00:52:42,079 --> 00:52:48,049
to make it so that the all of the

942
00:52:45,920 --> 00:52:52,280
reflectors that occur inside a given

943
00:52:48,050 --> 00:52:54,260
voxel that all of them are packed

944
00:52:52,280 --> 00:52:56,500
together in the PC texture list so that

945
00:52:54,260 --> 00:52:58,820
we can have just a count that tells you

946
00:52:56,500 --> 00:53:02,030
how many there are and you read it

947
00:52:58,820 --> 00:53:05,630
that is pretty difficult to do because

948
00:53:02,030 --> 00:53:09,320
it that requires sort of pre-processing

949
00:53:05,630 --> 00:53:11,890
the data so that you know ahead of time

950
00:53:09,320 --> 00:53:15,800
which how many go into each bucket and

951
00:53:11,889 --> 00:53:22,969
then fill the bucket so in theory we

952
00:53:15,800 --> 00:53:26,450
could test as well a more like a more

953
00:53:22,969 --> 00:53:30,289
likely version of this if you will and

954
00:53:26,449 --> 00:53:43,849
that would be something that was you

955
00:53:30,289 --> 00:53:47,590
know let's say like this that would be

956
00:53:43,849 --> 00:53:50,539
something where we store you know that

957
00:53:47,590 --> 00:54:02,240
so in here we actually have something

958
00:53:50,539 --> 00:54:06,289
like this and each one of these stores

959
00:54:02,239 --> 00:54:10,279
the position of the light reflector and

960
00:54:06,289 --> 00:54:12,829
the next one that you should look at

961
00:54:10,280 --> 00:54:17,120
inside this array so you kind of like

962
00:54:12,829 --> 00:54:20,420
skip you know skip through it as a

963
00:54:17,119 --> 00:54:23,089
lookup that's something that's more

964
00:54:20,420 --> 00:54:25,639
likely to possibly be created on the

965
00:54:23,090 --> 00:54:28,460
card again I don't really want to say

966
00:54:25,639 --> 00:54:32,109
that too firmly but basically you know

967
00:54:28,460 --> 00:54:35,720
that it's more or less what happens and

968
00:54:32,110 --> 00:54:38,120
then this box will look up would just be

969
00:54:35,719 --> 00:54:40,519
a single 16 bit so just tell you where

970
00:54:38,119 --> 00:54:42,349
the first one was and then this would

971
00:54:40,519 --> 00:54:45,530
where the next one was now of course

972
00:54:42,349 --> 00:54:47,480
again we don't really need a full 32-bit

973
00:54:45,530 --> 00:54:52,370
value here you know this could be a

974
00:54:47,480 --> 00:54:55,039
16-bit value but I'm not really sure I

975
00:54:52,369 --> 00:54:56,900
see a lot of ways of how we would pack

976
00:54:55,039 --> 00:54:58,309
the rest of this stuff down in a way

977
00:54:56,900 --> 00:55:01,670
that made sense

978
00:54:58,309 --> 00:55:03,500
we still need 24 bits for the color at

979
00:55:01,670 --> 00:55:05,240
least and so that doesn't really help us

980
00:55:03,500 --> 00:55:06,500
if we could make this an 8-bit value

981
00:55:05,239 --> 00:55:13,459
that would be amazing

982
00:55:06,500 --> 00:55:15,409
because then you could do this and that

983
00:55:13,460 --> 00:55:18,170
would be kind of Awesome but

984
00:55:15,409 --> 00:55:21,379
unfortunately if the element list is

985
00:55:18,170 --> 00:55:23,780
4096 long than having a next pointer

986
00:55:21,380 --> 00:55:28,160
that's only 8-bit doesn't really help

987
00:55:23,780 --> 00:55:29,750
you and so it seems like that's a bit of

988
00:55:28,159 --> 00:55:30,920
a non-starter so again I think that's

989
00:55:29,750 --> 00:55:36,170
probably putting the cart before the

990
00:55:30,920 --> 00:55:36,920
horse in trying to make that work so

991
00:55:36,170 --> 00:55:38,269
we're just going to leave it like that

992
00:55:36,920 --> 00:55:39,909
for now we'll try to figure out how to

993
00:55:38,269 --> 00:55:43,039
do some shenanigans later to make that

994
00:55:39,909 --> 00:55:44,420
less problematic perhaps on the other

995
00:55:43,039 --> 00:55:47,210
hand it is worth noting like I said this

996
00:55:44,420 --> 00:55:49,220
is the small part of the problem so it's

997
00:55:47,210 --> 00:55:51,050
really not the most important part if

998
00:55:49,219 --> 00:55:56,089
the box will look up that's the big one

999
00:55:51,050 --> 00:55:57,530
and it's kind of nasty right so let's go

1000
00:55:56,090 --> 00:56:00,079
ahead and see how we would make

1001
00:55:57,530 --> 00:56:02,060
something like this I think you'll be

1002
00:56:00,079 --> 00:56:05,000
surprised at just how simple it actually

1003
00:56:02,059 --> 00:56:07,489
is especially if we do a linked list

1004
00:56:05,000 --> 00:56:11,210
version like this creating it is

1005
00:56:07,489 --> 00:56:12,799
actually really basic so if we have a

1006
00:56:11,210 --> 00:56:15,289
lighting solution and we're trying to

1007
00:56:12,800 --> 00:56:17,480
make one of these texture things out of

1008
00:56:15,289 --> 00:56:20,480
it we can actually do that pretty

1009
00:56:17,480 --> 00:56:22,449
directly one thing I can do is pull this

1010
00:56:20,480 --> 00:56:29,690
out so it's a little bit more explicit

1011
00:56:22,449 --> 00:56:36,589
lighting textures and we can just call

1012
00:56:29,690 --> 00:56:42,920
the P C and look up so if you and I

1013
00:56:36,590 --> 00:56:48,320
guess this is actually like key next I

1014
00:56:42,920 --> 00:56:50,599
guess it's both of those so if you take

1015
00:56:48,320 --> 00:56:53,120
a look at what happens here we've got

1016
00:56:50,599 --> 00:56:54,170
some number of lighting elements that

1017
00:56:53,119 --> 00:56:57,710
we've computed

1018
00:56:54,170 --> 00:56:59,900
right and when we do output lighting

1019
00:56:57,710 --> 00:57:03,318
textures we don't need to output quads

1020
00:56:59,900 --> 00:57:05,510
right that's not necessary so what we're

1021
00:57:03,318 --> 00:57:10,838
going to do here is pretend that we're

1022
00:57:05,510 --> 00:57:10,839
taking a lighting solution and we are

1023
00:57:11,380 --> 00:57:19,849
going to take one of these lighting

1024
00:57:13,489 --> 00:57:21,679
textures and that lighting those

1025
00:57:19,849 --> 00:57:23,838
lighting textures will get filled out by

1026
00:57:21,679 --> 00:57:28,629
this routine so the first thing that we

1027
00:57:23,838 --> 00:57:28,630
want to do is we want to clear right

1028
00:57:31,358 --> 00:57:36,889
everything in the lookup because we need

1029
00:57:35,000 --> 00:57:39,018
to start with that lookup structure the

1030
00:57:36,889 --> 00:57:41,420
voxel lookup structure we need to start

1031
00:57:39,018 --> 00:57:42,889
with that being completely clean so it

1032
00:57:41,420 --> 00:57:49,059
needs to have zero everywhere and we'll

1033
00:57:42,889 --> 00:57:55,250
just say that zero is the sort of the

1034
00:57:49,059 --> 00:57:56,960
the null value it's unused right and if

1035
00:57:55,250 --> 00:57:58,130
we wanted to we could also beef up this

1036
00:57:56,960 --> 00:58:00,490
number if we want to be able to store

1037
00:57:58,130 --> 00:58:11,920
more of these things we probably should

1038
00:58:00,489 --> 00:58:14,959
but we'll get to that a bit later so

1039
00:58:11,920 --> 00:58:16,789
when we come through here when we start

1040
00:58:14,960 --> 00:58:18,710
with a completely empty lookup what we

1041
00:58:16,789 --> 00:58:22,250
know is that every time we get one of

1042
00:58:18,710 --> 00:58:24,500
these element values here so let's take

1043
00:58:22,250 --> 00:58:31,969
a look for example at just a single

1044
00:58:24,500 --> 00:58:35,420
element value so if you take a look at

1045
00:58:31,969 --> 00:58:37,639
one of these elements values what we can

1046
00:58:35,420 --> 00:58:41,829
see is we've got a front emit that we

1047
00:58:37,639 --> 00:58:44,828
generate this way and can pack down

1048
00:58:41,829 --> 00:58:44,829
consuming

1049
00:58:48,880 --> 00:58:52,579
so we can create a color from it by

1050
00:58:51,260 --> 00:58:59,360
doing exactly what we're doing before

1051
00:58:52,579 --> 00:59:01,489
where we pack this down and we don't

1052
00:58:59,360 --> 00:59:03,890
have anything to merge it with anymore

1053
00:59:01,489 --> 00:59:06,379
right we're just packing in the the

1054
00:59:03,889 --> 00:59:10,699
front emit color of this lighting sample

1055
00:59:06,380 --> 00:59:12,530
now it's worth noting that we want to do

1056
00:59:10,699 --> 00:59:22,429
something smarter here than what we have

1057
00:59:12,530 --> 00:59:24,890
been doing so what that front emit

1058
00:59:22,429 --> 00:59:27,079
lighting is telling us is how much light

1059
00:59:24,889 --> 00:59:31,579
we've received I can't remember if we've

1060
00:59:27,079 --> 00:59:35,630
modulated by our bounce I think we have

1061
00:59:31,579 --> 00:59:38,329
so what we're going to want to do is

1062
00:59:35,630 --> 00:59:42,700
take that out of the equation in fact we

1063
00:59:38,329 --> 00:59:42,699
can do that right now let's just do that

1064
00:59:49,329 --> 00:59:54,519
so what you can see for example in

1065
00:59:59,019 --> 01:00:04,219
output lighting quads what you can see

1066
01:00:02,119 --> 01:00:07,940
here is we take the front emit and we

1067
01:00:04,219 --> 01:00:10,009
just pack that down directly right when

1068
01:00:07,940 --> 01:00:17,599
we're when we're just showing reflectors

1069
01:00:10,010 --> 01:00:20,089
so what I want you to see here is when

1070
01:00:17,599 --> 01:00:21,798
we run the lighting solution sorry I'm

1071
01:00:20,088 --> 01:00:22,909
coming up this a roundabout way I'm not

1072
01:00:21,798 --> 01:00:31,608
sure how to explain it other than to

1073
01:00:22,909 --> 01:00:33,230
show it to you what we see here is I'm

1074
01:00:31,608 --> 01:00:35,179
also not sure why that's wearing slower

1075
01:00:33,230 --> 01:00:41,480
all sudden is it just because of the

1076
01:00:35,179 --> 01:00:48,679
size of the thing changed now we don't

1077
01:00:41,480 --> 01:00:51,108
need to upload anything I guess it's

1078
01:00:48,679 --> 01:00:54,098
just because we use more memory there

1079
01:00:51,108 --> 01:00:54,098
I'm not sure why that is

1080
01:00:58,269 --> 01:01:02,199
I feel like that's taking more time than

1081
01:01:00,280 --> 01:01:05,830
sorry give me one second I just want to

1082
01:01:02,199 --> 01:01:10,779
know why that would be the case its

1083
01:01:05,829 --> 01:01:15,009
world mode nobody uses the lighting

1084
01:01:10,780 --> 01:01:21,340
textures what did I do wrong maybe I'm

1085
01:01:15,010 --> 01:01:24,060
maybe I'm mistaken maybe it was very

1086
01:01:21,340 --> 01:01:24,059
going that slowly

1087
01:01:34,030 --> 01:01:37,180
well I guess there's not a whole lot we

1088
01:01:35,889 --> 01:01:39,219
can do that at the moment because it

1089
01:01:37,179 --> 01:01:41,429
looks like it's entirely spent and swap

1090
01:01:39,219 --> 01:01:41,429
buffers

1091
01:01:48,260 --> 01:01:50,320
you

1092
01:02:04,380 --> 01:02:08,190
hmm

1093
01:02:06,480 --> 01:02:11,639
well I'm not sure what to make of that I

1094
01:02:08,190 --> 01:02:12,990
guess we can investigate later anyway so

1095
01:02:11,639 --> 01:02:17,608
if we take a look at what happens here

1096
01:02:12,989 --> 01:02:19,679
back to what I was saying for what you

1097
01:02:17,608 --> 01:02:24,809
can see is for example this is red and

1098
01:02:19,679 --> 01:02:27,629
this is blue that's actually not the

1099
01:02:24,809 --> 01:02:29,940
lighting that's falling on this point

1100
01:02:27,630 --> 01:02:32,849
that's the lighting modulated by the

1101
01:02:29,940 --> 01:02:35,550
color of the surface and we actually

1102
01:02:32,849 --> 01:02:37,050
want to stop doing that now the reason

1103
01:02:35,550 --> 01:02:38,519
we want to stop doing that now is

1104
01:02:37,050 --> 01:02:41,010
because we're going to assume that a

1105
01:02:38,519 --> 01:02:44,250
surface will take its color into account

1106
01:02:41,010 --> 01:02:46,500
when it gets rendered so presumably

1107
01:02:44,250 --> 01:02:48,449
because that way we can interpolate

1108
01:02:46,500 --> 01:02:51,719
between lighting samples even if the two

1109
01:02:48,449 --> 01:02:54,328
surfaces are different so what we want

1110
01:02:51,719 --> 01:02:56,399
to do here is we want to change it so

1111
01:02:54,329 --> 01:03:06,570
that the way we were computing the front

1112
01:02:56,400 --> 01:03:11,670
emit C which is actually here the way

1113
01:03:06,570 --> 01:03:12,110
we're computing the front emit C we want

1114
01:03:11,670 --> 01:03:15,239
to

1115
01:03:12,110 --> 01:03:15,239
[Music]

1116
01:03:20,280 --> 01:03:29,519
here we go when we do our light color

1117
01:03:24,599 --> 01:03:32,549
and we do our bounces here what we want

1118
01:03:29,519 --> 01:03:36,329
to do is make it so that when we do this

1119
01:03:32,550 --> 01:03:38,460
Hadamard reflect color - when we're

1120
01:03:36,329 --> 01:03:40,529
computing our total light so this is the

1121
01:03:38,460 --> 01:03:44,070
total light that comes in we actually

1122
01:03:40,530 --> 01:03:46,620
don't want to do this here right what we

1123
01:03:44,070 --> 01:03:50,010
want to do is just use the total light

1124
01:03:46,619 --> 01:03:51,839
value as the result instead of as how

1125
01:03:50,010 --> 01:03:58,590
much light we're storing is coming from

1126
01:03:51,840 --> 01:04:01,530
this surface like so so like that and

1127
01:03:58,590 --> 01:04:04,050
then what we want to do is say okay we

1128
01:04:01,530 --> 01:04:06,690
still do want that reflected color to

1129
01:04:04,050 --> 01:04:09,480
actually be what happens when light

1130
01:04:06,690 --> 01:04:12,450
bounces off a surface so when we are

1131
01:04:09,480 --> 01:04:16,949
actually grabbing the light in the first

1132
01:04:12,449 --> 01:04:19,799
place right when we say the source is

1133
01:04:16,949 --> 01:04:22,289
front emit see that is where we're going

1134
01:04:19,800 --> 01:04:25,019
to do that multiplication so the light

1135
01:04:22,289 --> 01:04:27,509
color that comes in is going to be the

1136
01:04:25,019 --> 01:04:33,599
sources reflected color times the

1137
01:04:27,510 --> 01:04:35,310
sources front emit color right and so

1138
01:04:33,599 --> 01:04:38,819
what that means is that when we store

1139
01:04:35,309 --> 01:04:40,610
this in the first place and we do that

1140
01:04:38,820 --> 01:04:43,410
sort of front end it's the color RGB

1141
01:04:40,610 --> 01:04:45,120
part of it right where the color RGB is

1142
01:04:43,409 --> 01:04:46,589
putting the rest in there we don't

1143
01:04:45,119 --> 01:04:48,809
actually want to do that anymore

1144
01:04:46,590 --> 01:04:52,920
so we just want to set the front

1145
01:04:48,809 --> 01:04:54,809
emission to be you know a colorless

1146
01:04:52,920 --> 01:04:59,579
version because it will get the color

1147
01:04:54,809 --> 01:05:04,279
when it actually does that initial out

1148
01:04:59,579 --> 01:05:04,279
right okay

1149
01:05:11,940 --> 01:05:22,230
so now when we make this go in theory

1150
01:05:19,469 --> 01:05:24,989
those should just be well alright that

1151
01:05:22,230 --> 01:05:29,780
did not go anywhere close to what I

1152
01:05:24,989 --> 01:05:32,429
thought it would do but that's okay I

1153
01:05:29,780 --> 01:05:35,730
somehow I took that out and still did

1154
01:05:32,429 --> 01:05:38,029
exactly the same thing how is that even

1155
01:05:35,730 --> 01:05:38,030
possible

1156
01:05:38,659 --> 01:05:47,399
let's try that one more time

1157
01:05:40,619 --> 01:05:50,789
so obviously ya didn't do a very good

1158
01:05:47,400 --> 01:05:55,590
job with that I'm assuming it doesn't

1159
01:05:50,789 --> 01:05:58,409
get modulated here right like it

1160
01:05:55,590 --> 01:06:08,180
definitely doesn't it's just the front

1161
01:05:58,409 --> 01:06:08,179
emit X Y Z right yeah

1162
01:06:11,309 --> 01:06:16,919
Oh awesome

1163
01:06:14,668 --> 01:06:26,518
I said I was going to get rid of it and

1164
01:06:16,918 --> 01:06:30,838
I didn't rate it there we go there we go

1165
01:06:26,518 --> 01:06:32,818
so now this is just a a pure lighting

1166
01:06:30,838 --> 01:06:34,889
solution that we're drawing right so

1167
01:06:32,818 --> 01:06:38,880
it's the light that got bounced around

1168
01:06:34,889 --> 01:06:39,538
and how it got bounced around so if that

1169
01:06:38,880 --> 01:06:41,939
makes sense

1170
01:06:39,539 --> 01:06:44,609
now what that means is you can still get

1171
01:06:41,938 --> 01:06:47,098
red twinges and stuff like that when you

1172
01:06:44,608 --> 01:06:49,739
bounce something off of like a red

1173
01:06:47,099 --> 01:06:51,838
surface or whatever and we should in

1174
01:06:49,739 --> 01:06:54,739
theory be able to create some

1175
01:06:51,838 --> 01:06:57,208
circumstances where we get very clear

1176
01:06:54,739 --> 01:07:04,679
examples of that and I will try to do

1177
01:06:57,208 --> 01:07:11,158
that here let's see if we can get

1178
01:07:04,679 --> 01:07:12,749
something like that I don't know I don't

1179
01:07:11,159 --> 01:07:16,519
seem to be really getting it so I may

1180
01:07:12,748 --> 01:07:16,518
have messed something I've left to check

1181
01:07:18,949 --> 01:07:24,329
because there should be ways for me to

1182
01:07:21,389 --> 01:07:28,018
get like blue bounce and stuff like that

1183
01:07:24,329 --> 01:07:31,890
on two surfaces here but I'm not really

1184
01:07:28,018 --> 01:07:34,738
seeing it so I think we still maybe have

1185
01:07:31,889 --> 01:07:39,838
some problems here let me just go check

1186
01:07:34,739 --> 01:07:42,239
what light color that's used for yeah so

1187
01:07:39,838 --> 01:07:44,130
in theory this should this line should

1188
01:07:42,239 --> 01:07:47,699
still take whatever the emitted color is

1189
01:07:44,130 --> 01:07:53,939
going to be and color it by whatever the

1190
01:07:47,699 --> 01:07:56,699
sources reflectance is right so we still

1191
01:07:53,938 --> 01:07:58,558
should be getting that contribution we

1192
01:07:56,699 --> 01:08:00,239
don't really seem to be which is a

1193
01:07:58,559 --> 01:08:04,609
little odd

1194
01:08:00,239 --> 01:08:04,608
why is photons or speeds still here

1195
01:08:11,670 --> 01:08:24,460
there yeah so I'm a little weirded out

1196
01:08:17,140 --> 01:08:26,739
by that because in theory in theory that

1197
01:08:24,460 --> 01:08:30,369
bounce light should still colorize

1198
01:08:26,738 --> 01:08:31,750
itself right any light that bounces off

1199
01:08:30,369 --> 01:08:33,939
surface and goes to another surface

1200
01:08:31,750 --> 01:08:35,949
should be getting colorized by this

1201
01:08:33,939 --> 01:08:38,139
Hadamard product here where the

1202
01:08:35,949 --> 01:08:41,949
reflection color and the mist front emit

1203
01:08:38,140 --> 01:08:44,770
color merged together to produce the

1204
01:08:41,949 --> 01:08:49,179
light color that will actually get used

1205
01:08:44,770 --> 01:08:55,140
for the diffused contribution right so I

1206
01:08:49,180 --> 01:08:55,140
don't really know why that busted

1207
01:09:13,380 --> 01:09:17,960
because it certainly seems like that

1208
01:09:15,510 --> 01:09:17,960
should work

1209
01:09:37,159 --> 01:09:43,670
what is the global lighting render

1210
01:09:39,199 --> 01:09:47,750
iteration count these days for

1211
01:09:43,670 --> 01:09:49,670
apparently since we're not using the

1212
01:09:47,750 --> 01:09:53,869
seclusion iteration anymore so this is

1213
01:09:49,670 --> 01:09:56,500
probably not super relevant you could

1214
01:09:53,869 --> 01:09:56,500
just get rid of it

1215
01:10:10,460 --> 01:10:20,829
yeah I don't really I don't know why I'm

1216
01:10:13,039 --> 01:10:20,829
not seeing anything other it's almost I

1217
01:10:21,430 --> 01:10:27,110
mean I mean there are some places where

1218
01:10:24,380 --> 01:10:31,329
you do get a little bit of that bounce

1219
01:10:27,109 --> 01:10:33,619
color in there but it just doesn't seem

1220
01:10:31,329 --> 01:10:36,039
nearly as much as I would have expected

1221
01:10:33,619 --> 01:10:40,269
like you get a very little bit there but

1222
01:10:36,039 --> 01:10:44,420
it's just it's so little it's odd to me

1223
01:10:40,270 --> 01:10:45,770
and I think that that could be I mean it

1224
01:10:44,420 --> 01:10:47,630
could just because our letting equations

1225
01:10:45,770 --> 01:10:48,890
aren't real yet like it could be that we

1226
01:10:47,630 --> 01:10:53,989
just need to make our letting equations

1227
01:10:48,890 --> 01:10:56,600
actually be reasonable but anyway let's

1228
01:10:53,989 --> 01:10:58,550
ignore that for now I don't love it but

1229
01:10:56,600 --> 01:10:59,870
let's ignore that for now and when we go

1230
01:10:58,550 --> 01:11:02,619
through the letting equations to try to

1231
01:10:59,869 --> 01:11:06,019
make the transfer be more accurate I

1232
01:11:02,619 --> 01:11:07,909
will pay closer attention to that for

1233
01:11:06,020 --> 01:11:11,300
now I just wanted to point out the fact

1234
01:11:07,909 --> 01:11:13,939
that this is now a more pure lighting

1235
01:11:11,300 --> 01:11:16,070
solution but doesn't that every point

1236
01:11:13,939 --> 01:11:18,019
tells you what the actual lighting is

1237
01:11:16,069 --> 01:11:21,469
not the lighting times whatever the

1238
01:11:18,020 --> 01:11:24,470
surface is at that location and so then

1239
01:11:21,470 --> 01:11:28,220
if we go in here and say we don't want

1240
01:11:24,470 --> 01:11:29,960
to look at the reflectors anymore then

1241
01:11:28,220 --> 01:11:32,060
what you can see is now we've got a

1242
01:11:29,960 --> 01:11:34,069
solution that's a little bit more true

1243
01:11:32,060 --> 01:11:36,920
because it gets modulated at the end by

1244
01:11:34,069 --> 01:11:39,109
the vertex color and so we were kind of

1245
01:11:36,920 --> 01:11:42,590
doubly modulating before which is not

1246
01:11:39,109 --> 01:11:44,689
right so this is a little bit more

1247
01:11:42,590 --> 01:11:47,180
accurate and this is what we actually

1248
01:11:44,689 --> 01:11:49,489
want to send down like I said to the

1249
01:11:47,180 --> 01:11:56,869
card in the first place for

1250
01:11:49,489 --> 01:11:58,519
reconstruction okay so now if we want to

1251
01:11:56,869 --> 01:12:00,739
actually do the slaving Pacal's guy

1252
01:11:58,520 --> 01:12:03,650
saying packing these things into a look

1253
01:12:00,739 --> 01:12:05,329
up texture it's not very difficult like

1254
01:12:03,649 --> 01:12:11,029
you can see we do the simple pack here

1255
01:12:05,329 --> 01:12:13,569
we've got the the color and we know that

1256
01:12:11,029 --> 01:12:20,000
now we just have to figure out a way to

1257
01:12:13,569 --> 01:12:23,090
place these things into these lighting

1258
01:12:20,000 --> 01:12:24,109
textures here so we've got two things we

1259
01:12:23,090 --> 01:12:27,289
need to do fir

1260
01:12:24,109 --> 01:12:30,199
we need to store the elements position

1261
01:12:27,289 --> 01:12:33,590
and color into the lighting textual

1262
01:12:30,199 --> 01:12:37,309
information and then we need to add to

1263
01:12:33,590 --> 01:12:41,180
the lookup chain this Texel so both of

1264
01:12:37,310 --> 01:12:43,700
these are pretty easy to do right first

1265
01:12:41,180 --> 01:12:47,390
of all the only real thing is mapping

1266
01:12:43,699 --> 01:12:53,869
the position correctly into the lookup

1267
01:12:47,390 --> 01:12:56,690
that's about it right so I guess there's

1268
01:12:53,869 --> 01:13:03,079
two things we probably need to need to

1269
01:12:56,689 --> 01:13:04,879
be aware of here and and mostly the only

1270
01:13:03,079 --> 01:13:06,140
difficult part of it is the lookup

1271
01:13:04,880 --> 01:13:07,760
structure we have to figure out how

1272
01:13:06,140 --> 01:13:10,310
that's mapped but let's assume

1273
01:13:07,760 --> 01:13:12,590
temporarily that we know where we are in

1274
01:13:10,310 --> 01:13:28,970
the lookup structure so let's assume we

1275
01:13:12,590 --> 01:13:31,819
have something like this so we have some

1276
01:13:28,970 --> 01:13:33,470
way of knowing where this element is in

1277
01:13:31,819 --> 01:13:35,899
the lookup structure right let's say

1278
01:13:33,470 --> 01:13:37,699
we've got that so far well if we have

1279
01:13:35,899 --> 01:13:40,129
that then everything else becomes fairly

1280
01:13:37,699 --> 01:13:43,329
straightforward we know that whatever

1281
01:13:40,130 --> 01:13:46,130
the wherever we're going to pack this

1282
01:13:43,329 --> 01:13:48,050
this particular lighting element we know

1283
01:13:46,130 --> 01:13:50,180
what that is because every time we add a

1284
01:13:48,050 --> 01:13:54,020
new element we just increment by one

1285
01:13:50,180 --> 01:13:56,360
right so you know we basically have a

1286
01:13:54,020 --> 01:13:57,290
pack index that starts at zero what

1287
01:13:56,359 --> 01:14:01,189
we're going to do is we're going to

1288
01:13:57,289 --> 01:14:04,420
assert that the pack index is less than

1289
01:14:01,189 --> 01:14:04,419
the number that can fit in here

1290
01:14:11,189 --> 01:14:14,429
and we're going to pre-increment it now

1291
01:14:13,170 --> 01:14:15,779
why are we going to pre-increment it

1292
01:14:14,430 --> 01:14:19,110
we're going to pre-increment it because

1293
01:14:15,779 --> 01:14:20,819
I said that zero is not a valid value so

1294
01:14:19,109 --> 01:14:23,099
if I started at zero I'm just going to

1295
01:14:20,819 --> 01:14:24,299
pre increment it and then do my test

1296
01:14:23,100 --> 01:14:28,560
because I'm going to put it in this

1297
01:14:24,300 --> 01:14:34,890
particular location right so once I've

1298
01:14:28,560 --> 01:14:41,670
got that I know that I'm going to look

1299
01:14:34,890 --> 01:14:47,010
at my peen X at that location and in

1300
01:14:41,670 --> 01:14:49,710
fact I could disclose Phoenix and I know

1301
01:14:47,010 --> 01:14:52,860
I need to set two things I need to set

1302
01:14:49,710 --> 01:14:55,649
the next pointer basically and the

1303
01:14:52,859 --> 01:14:57,989
p-value the p-value we just have it's

1304
01:14:55,649 --> 01:15:01,529
whatever the elements location was right

1305
01:14:57,989 --> 01:15:03,659
and the P next value here we know that

1306
01:15:01,529 --> 01:15:07,949
that's going to be whatever was in the

1307
01:15:03,659 --> 01:15:09,389
lookup right so whatever was previously

1308
01:15:07,949 --> 01:15:11,340
the value and lookup tail at that point

1309
01:15:09,390 --> 01:15:13,260
that's going to be our next pointer then

1310
01:15:11,340 --> 01:15:16,980
we just do the standard linked list

1311
01:15:13,260 --> 01:15:19,260
addition we put ourselves at the head of

1312
01:15:16,979 --> 01:15:22,169
the lookup so that makes that voxel

1313
01:15:19,260 --> 01:15:23,550
structure we take whatever the chain was

1314
01:15:22,170 --> 01:15:26,039
that was hanging off that point in the

1315
01:15:23,550 --> 01:15:28,440
voxel we make that hang off of us and

1316
01:15:26,039 --> 01:15:30,539
then we make ourselves the head right

1317
01:15:28,439 --> 01:15:35,429
very straightforward prostitution we do

1318
01:15:30,539 --> 01:15:37,350
that a million times on hand material so

1319
01:15:35,430 --> 01:15:39,150
after that we still need to use that PAC

1320
01:15:37,350 --> 01:15:41,970
index one more time because we also need

1321
01:15:39,149 --> 01:15:45,029
to take our desk color here and store

1322
01:15:41,970 --> 01:15:47,340
that but of course we can do that with

1323
01:15:45,029 --> 01:15:53,309
just one simple storage right there we

1324
01:15:47,340 --> 01:15:55,619
go and that's it right so really the

1325
01:15:53,310 --> 01:15:59,039
only problem that we have is how to do

1326
01:15:55,619 --> 01:16:03,840
this part how to map into where the

1327
01:15:59,039 --> 01:16:05,189
textile supposed to be dupes I don't

1328
01:16:03,840 --> 01:16:07,710
know why there's a Hadamard still in

1329
01:16:05,189 --> 01:16:10,079
there I don't need to multiply it so

1330
01:16:07,710 --> 01:16:15,659
really the only problem that we have oh

1331
01:16:10,079 --> 01:16:17,550
and I should the only problem that I

1332
01:16:15,659 --> 01:16:20,819
have is figuring out how to map a

1333
01:16:17,550 --> 01:16:23,710
position like this element P into the

1334
01:16:20,819 --> 01:16:25,000
lookup table in the first place

1335
01:16:23,710 --> 01:16:30,489
so there's a couple different ways we

1336
01:16:25,000 --> 01:16:37,420
can do this and it's kinda tricky right

1337
01:16:30,489 --> 01:16:39,219
it's a kind of touchy problem I'm going

1338
01:16:37,420 --> 01:16:41,980
to do a very straightforward version of

1339
01:16:39,220 --> 01:16:43,570
it first but we will probably have to do

1340
01:16:41,979 --> 01:16:47,349
something fancier in the future and I

1341
01:16:43,569 --> 01:16:54,029
can try to explain why so let me let me

1342
01:16:47,350 --> 01:16:54,030
show you what's going on here so a voxel

1343
01:16:56,039 --> 01:17:03,430
you generally think of as something that

1344
01:16:58,539 --> 01:17:08,220
you know looks like this or whatever

1345
01:17:03,430 --> 01:17:11,020
right it's a bunch of cubes in space and

1346
01:17:08,220 --> 01:17:13,449
we just think of looking up into them to

1347
01:17:11,020 --> 01:17:17,110
find out what's inside a particular

1348
01:17:13,449 --> 01:17:20,109
region of space but it's worth noting

1349
01:17:17,109 --> 01:17:25,750
that you don't have to do that for your

1350
01:17:20,109 --> 01:17:29,289
voxel right if you think about how we

1351
01:17:25,750 --> 01:17:32,350
view the world in a 3d game it's a

1352
01:17:29,289 --> 01:17:36,699
perspective projection so there's an ear

1353
01:17:32,350 --> 01:17:38,500
clip plane and a for our clip plane and

1354
01:17:36,699 --> 01:17:41,769
if you imagine putting one of these

1355
01:17:38,500 --> 01:17:46,569
voxels in world space right like this is

1356
01:17:41,770 --> 01:17:52,120
here it would be something that looked

1357
01:17:46,569 --> 01:17:55,449
you know like this right and what you

1358
01:17:52,119 --> 01:18:01,569
can see is that the space of things

1359
01:17:55,449 --> 01:18:05,019
that's covered by the camera view is a

1360
01:18:01,569 --> 01:18:08,340
different sort of geometric density in

1361
01:18:05,020 --> 01:18:11,230
screen space as this voxel would be

1362
01:18:08,340 --> 01:18:13,750
because when you get closer to the

1363
01:18:11,229 --> 01:18:16,269
viewer the cells are much larger per

1364
01:18:13,750 --> 01:18:17,859
unit of screen space than when you get

1365
01:18:16,270 --> 01:18:22,570
further from the viewer when they're

1366
01:18:17,859 --> 01:18:25,119
much smaller right so chances are

1367
01:18:22,569 --> 01:18:27,159
indexing into the voxel we don't really

1368
01:18:25,119 --> 01:18:31,119
want to do world space because look what

1369
01:18:27,159 --> 01:18:35,789
happens if we try to align our voxel so

1370
01:18:31,119 --> 01:18:35,789
that it covers the entire camera space

1371
01:18:40,260 --> 01:18:45,489
well it's got to be as big as the far

1372
01:18:43,210 --> 01:18:48,960
cliff plane right so we know that it has

1373
01:18:45,488 --> 01:18:48,959
to look basically like this

1374
01:18:56,979 --> 01:19:03,760
right that's what we know however you

1375
01:19:01,420 --> 01:19:05,769
can see that now a bunch of our voxel is

1376
01:19:03,760 --> 01:19:09,130
getting used for stuff that is not on

1377
01:19:05,769 --> 01:19:11,199
the screen and so probably what we would

1378
01:19:09,130 --> 01:19:15,340
want to do to make more economical use

1379
01:19:11,198 --> 01:19:24,368
of it is to bend the voxel so that it

1380
01:19:15,340 --> 01:19:27,150
actually looks more like this right now

1381
01:19:24,368 --> 01:19:29,439
you may think that there is some kind of

1382
01:19:27,149 --> 01:19:31,658
that that's like really difficult to do

1383
01:19:29,439 --> 01:19:33,339
or something it's like oh wait but we

1384
01:19:31,658 --> 01:19:35,978
only have a 3d texture lookup and we

1385
01:19:33,340 --> 01:19:39,880
just have you because remember we are

1386
01:19:35,979 --> 01:19:43,719
allowed to pass anything we want to the

1387
01:19:39,880 --> 01:19:45,670
lookup to the 3d texture we're under no

1388
01:19:43,719 --> 01:19:48,340
obligation to pass world space

1389
01:19:45,670 --> 01:19:52,510
coordinates so what we could do is we

1390
01:19:48,340 --> 01:19:56,260
could use a perspective divide to

1391
01:19:52,510 --> 01:20:00,670
actually prospectively project our uvw

1392
01:19:56,260 --> 01:20:03,519
coordinates so that they create a warped

1393
01:20:00,670 --> 01:20:05,769
look up now the voxel doesn't work it's

1394
01:20:03,519 --> 01:20:08,170
still just space in memory right it's

1395
01:20:05,769 --> 01:20:10,479
not changing what we're storing it just

1396
01:20:08,170 --> 01:20:15,190
changes how we look up into what we're

1397
01:20:10,479 --> 01:20:16,389
storing and like I said that's probably

1398
01:20:15,189 --> 01:20:17,319
something we're going to want to do we

1399
01:20:16,389 --> 01:20:19,359
just don't want to do it right away

1400
01:20:17,319 --> 01:20:21,788
because it just adds another thing to

1401
01:20:19,359 --> 01:20:23,738
get wrong into the set of things we're

1402
01:20:21,788 --> 01:20:25,538
trying to do right now and so getting

1403
01:20:23,738 --> 01:20:27,968
things working one at a time is a lot

1404
01:20:25,538 --> 01:20:30,099
better so we'd rather do is get the

1405
01:20:27,969 --> 01:20:33,279
voxel working first regularly because

1406
01:20:30,099 --> 01:20:36,840
that's much simpler and then work on

1407
01:20:33,279 --> 01:20:36,840
warping it after right

1408
01:20:42,029 --> 01:20:48,699
okay so the next thing we need to do

1409
01:20:46,390 --> 01:20:51,100
then is come up with some simpler scheme

1410
01:20:48,699 --> 01:20:52,960
from index for indexing into our voxel

1411
01:20:51,100 --> 01:20:54,220
and there's a pretty easy way we can do

1412
01:20:52,960 --> 01:20:55,510
that especially since we're computing

1413
01:20:54,220 --> 01:20:57,070
this offline we don't have to care about

1414
01:20:55,510 --> 01:20:59,409
the speed at the moment we can do

1415
01:20:57,069 --> 01:21:01,630
something pretty basic what I'm going to

1416
01:20:59,409 --> 01:21:06,189
do is I'm going to take a min corner and

1417
01:21:01,630 --> 01:21:07,329
a max corner I'm just going to spin

1418
01:21:06,189 --> 01:21:08,469
through all of the lighting elements

1419
01:21:07,329 --> 01:21:10,989
that we computed I'm just going to

1420
01:21:08,470 --> 01:21:13,420
compute the bounds right I'm just going

1421
01:21:10,989 --> 01:21:15,760
to say all right I think we've got a

1422
01:21:13,420 --> 01:21:27,489
real thirty-two minimum and real through

1423
01:21:15,760 --> 01:21:29,850
to maximum here I have these I don't

1424
01:21:27,489 --> 01:21:29,849
even know

1425
01:21:36,760 --> 01:21:46,900
yeah okay area so all I'm going to do is

1426
01:21:45,220 --> 01:21:48,550
I'm just going to set these to the min

1427
01:21:46,899 --> 01:21:49,899
and Max values they can possibly be now

1428
01:21:48,550 --> 01:21:51,250
you'll notice I set the min corner to

1429
01:21:49,899 --> 01:21:53,649
the maximum and the max corner to the

1430
01:21:51,250 --> 01:21:56,470
minimum right which is like an inverted

1431
01:21:53,649 --> 01:22:01,750
infinity rectangle which by the way

1432
01:21:56,470 --> 01:22:03,340
would be a great name for a album what I

1433
01:22:01,750 --> 01:22:04,689
want to do is I want to go through each

1434
01:22:03,340 --> 01:22:07,630
of the lighting elements that we have

1435
01:22:04,689 --> 01:22:12,039
first and I just want to take in the

1436
01:22:07,630 --> 01:22:16,690
position and set each of the min quarter

1437
01:22:12,039 --> 01:22:19,689
and Max corners to the lowest possible x

1438
01:22:16,689 --> 01:22:22,569
y&amp;z value and the highest possible XYZ

1439
01:22:19,689 --> 01:22:26,129
value we ever see right now I don't know

1440
01:22:22,569 --> 01:22:26,130
if we have a math function for this oh

1441
01:22:28,020 --> 01:22:37,120
hey look we actually have this function

1442
01:22:31,210 --> 01:22:43,619
already to that we only have it in 2d

1443
01:22:37,119 --> 01:22:43,619
huh because that's actually what we want

1444
01:22:55,909 --> 01:23:03,789
oh well but that's okay no big deal so

1445
01:23:06,159 --> 01:23:15,099
all I want to do here is I want to say

1446
01:23:08,479 --> 01:23:15,099
alright the min corner for our vector

1447
01:23:17,920 --> 01:23:26,420
you can see here I've got an e value

1448
01:23:24,979 --> 01:23:28,159
here for each of these guys I don't know

1449
01:23:26,420 --> 01:23:35,000
why it gets this is old code so it still

1450
01:23:28,159 --> 01:23:36,470
uses the real 32 value okay so what do I

1451
01:23:35,000 --> 01:23:41,659
do is I want to go through each of the

1452
01:23:36,470 --> 01:23:45,619
mid corner max corners and I want to set

1453
01:23:41,659 --> 01:23:59,119
them to the minimum value and the

1454
01:23:45,619 --> 01:24:10,550
maximum value of themselves like so and

1455
01:23:59,119 --> 01:24:11,210
whatever the new value is for P there we

1456
01:24:10,550 --> 01:24:13,400
go

1457
01:24:11,210 --> 01:24:21,260
so basically just spinning through here

1458
01:24:13,399 --> 01:24:22,519
it's something you call it minimum so

1459
01:24:21,260 --> 01:24:23,930
basically what this will give us is this

1460
01:24:22,520 --> 01:24:26,150
will give us the minimum possible value

1461
01:24:23,930 --> 01:24:27,409
that anything can take and the maximum

1462
01:24:26,149 --> 01:24:30,949
possible value that and they can could

1463
01:24:27,409 --> 01:24:33,500
take in our system now once we have that

1464
01:24:30,949 --> 01:24:36,349
we then know the bounds of the voxel in

1465
01:24:33,500 --> 01:24:38,569
three dimensions so at that point we can

1466
01:24:36,350 --> 01:24:40,940
actually map things into the voxel in a

1467
01:24:38,569 --> 01:24:43,939
fairly straightforward fashion just by

1468
01:24:40,939 --> 01:24:45,979
using basic discrete map right

1469
01:24:43,939 --> 01:24:47,539
so let's say we've got this min corner

1470
01:24:45,979 --> 01:24:50,239
in this max court the min corner math

1471
01:24:47,539 --> 01:24:51,800
corner I want to expand them a little

1472
01:24:50,239 --> 01:24:54,079
bit just to give us so that we're not

1473
01:24:51,800 --> 01:24:55,550
fetching to the very end of them I find

1474
01:24:54,079 --> 01:24:58,069
it usually that's a little bit more

1475
01:24:55,550 --> 01:24:59,600
convenient you don't have to do that if

1476
01:24:58,069 --> 01:25:03,279
you don't want to if you want to ride

1477
01:24:59,600 --> 01:25:07,539
the epsilon edge you can definitely have

1478
01:25:03,279 --> 01:25:18,340
you know you can you can

1479
01:25:07,539 --> 01:25:20,199
he is as brash as you wish here we go so

1480
01:25:18,340 --> 01:25:22,000
I'm just going to expand it by pushing

1481
01:25:20,199 --> 01:25:24,340
the min corner and the max corners out

1482
01:25:22,000 --> 01:25:27,819
just a little bit and then what I'm

1483
01:25:24,340 --> 01:25:30,880
going to do is I'm going to create the

1484
01:25:27,819 --> 01:25:32,439
span value for these and what the fan

1485
01:25:30,880 --> 01:25:33,850
value is is I'm basically saying all

1486
01:25:32,439 --> 01:25:35,589
right a doesn't mean quarter the max

1487
01:25:33,850 --> 01:25:37,539
corner I know what I'm going to have to

1488
01:25:35,590 --> 01:25:40,060
do is every time a position comes in I

1489
01:25:37,539 --> 01:25:41,619
need a way of mapping this into my voxel

1490
01:25:40,060 --> 01:25:42,880
we've done this a lot of times before

1491
01:25:41,619 --> 01:25:46,239
like when we want to put things into

1492
01:25:42,880 --> 01:25:50,440
grids right and so you imagine we've got

1493
01:25:46,239 --> 01:25:53,619
sort of a thing that looks like this so

1494
01:25:50,439 --> 01:25:55,059
on for each one of these axes we're

1495
01:25:53,619 --> 01:25:56,920
going to want to say oh we've got a p

1496
01:25:55,060 --> 01:25:58,630
value that came in here

1497
01:25:56,920 --> 01:26:00,069
well that better not be because that's

1498
01:25:58,630 --> 01:26:01,989
outside the zone let's say people I

1499
01:26:00,069 --> 01:26:04,059
became in here we just need to figure

1500
01:26:01,989 --> 01:26:05,500
out what grid square is in so all we're

1501
01:26:04,060 --> 01:26:09,390
going to do here is we're just going to

1502
01:26:05,500 --> 01:26:12,340
figure out by dividing by this you know

1503
01:26:09,390 --> 01:26:15,130
cell size here essentially how big the

1504
01:26:12,340 --> 01:26:17,500
cell sizes we're going to figure out how

1505
01:26:15,130 --> 01:26:19,119
many of them we would have to go to get

1506
01:26:17,500 --> 01:26:21,250
to this one and we're going to truncate

1507
01:26:19,119 --> 01:26:24,279
that value obviously because we want it

1508
01:26:21,250 --> 01:26:26,680
to be stored we want to produce the next

1509
01:26:24,279 --> 01:26:29,289
lowest value right so if it's here we

1510
01:26:26,680 --> 01:26:31,450
want to produce 0 not 1 if it's here we

1511
01:26:29,289 --> 01:26:33,579
want to produce 1 not 2 right so we want

1512
01:26:31,449 --> 01:26:36,539
to create basically the divide truncated

1513
01:26:33,579 --> 01:26:38,590
down and that's all we're trying to do

1514
01:26:36,539 --> 01:26:41,430
and like I said we've done this before

1515
01:26:38,590 --> 01:26:42,690
we did this in the world code

1516
01:26:41,430 --> 01:26:46,090
[Music]

1517
01:26:42,689 --> 01:26:47,679
let's see where we've got that just so I

1518
01:26:46,090 --> 01:26:52,960
can show you what what we're talking

1519
01:26:47,680 --> 01:26:54,360
about here I think we did oh no we

1520
01:26:52,960 --> 01:26:57,460
switch it to a hash table goodnight

1521
01:26:54,359 --> 01:26:59,189
goodnight we didn't do that I think we

1522
01:26:57,460 --> 01:27:01,510
did at one point we just don't do it now

1523
01:26:59,189 --> 01:27:03,759
so anyway that's all I really want to do

1524
01:27:01,510 --> 01:27:05,890
so what I need to do is create that span

1525
01:27:03,760 --> 01:27:07,150
value and the span value is just going

1526
01:27:05,890 --> 01:27:09,190
to be the min corner minus the max

1527
01:27:07,149 --> 01:27:11,949
corner so that now we have an X Y and a

1528
01:27:09,189 --> 01:27:13,839
Z value that is how big each of those

1529
01:27:11,949 --> 01:27:14,859
dimensions are right

1530
01:27:13,840 --> 01:27:19,000
in fact I could just solve this

1531
01:27:14,859 --> 01:27:21,369
dimension so then what I need to do is

1532
01:27:19,000 --> 01:27:23,800
come up with a way of doing that divide

1533
01:27:21,369 --> 01:27:27,159
so we know that we've got these various

1534
01:27:23,800 --> 01:27:29,320
cell values here and we know how big

1535
01:27:27,159 --> 01:27:33,250
they have to be so what I'm going to do

1536
01:27:29,319 --> 01:27:52,719
is I maybe compute that like light look

1537
01:27:33,250 --> 01:27:54,489
up X or something line Z and I'm putting

1538
01:27:52,720 --> 01:27:56,320
these in an arbitrary order here it

1539
01:27:54,489 --> 01:27:59,289
doesn't really matter which order we do

1540
01:27:56,319 --> 01:28:02,340
them in if we wanted to be fancier maybe

1541
01:27:59,289 --> 01:28:04,720
we would put them in reverse order

1542
01:28:02,340 --> 01:28:06,880
because that's a little more consistent

1543
01:28:04,720 --> 01:28:09,940
with how we tend to do things we tend to

1544
01:28:06,880 --> 01:28:12,069
put the X as the minor the Y is the

1545
01:28:09,939 --> 01:28:15,639
major so the Z would therefore be the

1546
01:28:12,069 --> 01:28:16,989
you know the most major at that point so

1547
01:28:15,640 --> 01:28:18,700
maybe that's the easiest way to keep

1548
01:28:16,989 --> 01:28:20,469
that doesn't really matter the choice is

1549
01:28:18,699 --> 01:28:22,479
arbitrary how we wish to look up into

1550
01:28:20,470 --> 01:28:24,640
our texture all that matters is the one

1551
01:28:22,479 --> 01:28:26,859
that we want to look up to the Z can be

1552
01:28:24,640 --> 01:28:30,700
smaller don't ask me why I made that 2

1553
01:28:26,859 --> 01:28:36,130
to 6 you probably still could I don't

1554
01:28:30,699 --> 01:28:38,319
know how big would that be and that's a

1555
01:28:36,130 --> 01:28:43,390
lot bigger they're 64 Meg's just for the

1556
01:28:38,319 --> 01:28:47,619
lookup if Z is not under sampled all

1557
01:28:43,390 --> 01:28:50,470
right so anyway back there so anyway

1558
01:28:47,619 --> 01:28:54,069
once we know what those are we can then

1559
01:28:50,470 --> 01:28:56,940
produce the size of a cell because we

1560
01:28:54,069 --> 01:29:00,130
now know that like the cell dimension is

1561
01:28:56,939 --> 01:29:02,589
just going to be a series of divides

1562
01:29:00,130 --> 01:29:04,480
right so we've got the dimension X and

1563
01:29:02,590 --> 01:29:11,650
we need to divide by how many of them

1564
01:29:04,479 --> 01:29:13,449
there are in X right it's got the

1565
01:29:11,649 --> 01:29:16,170
dimension Y and we need to know how many

1566
01:29:13,449 --> 01:29:16,170
there are and why

1567
01:29:20,229 --> 01:29:26,629
so we can now produce how big each cell

1568
01:29:23,149 --> 01:29:30,319
is and furthermore we can produce the

1569
01:29:26,630 --> 01:29:32,000
inverse of that as well right so if we

1570
01:29:30,319 --> 01:29:33,949
wanted to do the inverse seldom which is

1571
01:29:32,000 --> 01:29:36,680
what we actually need the fact they

1572
01:29:33,949 --> 01:29:38,989
don't know that we ever need this one so

1573
01:29:36,680 --> 01:29:40,430
we could just I think we might be able

1574
01:29:38,989 --> 01:29:45,949
to produce the inverse cell dimension

1575
01:29:40,430 --> 01:29:55,159
always which is just one over how big

1576
01:29:45,949 --> 01:29:57,409
the cell is and so what that will do

1577
01:29:55,159 --> 01:29:59,510
right is the inverse seldom is something

1578
01:29:57,409 --> 01:30:03,170
that takes an actual position and turns

1579
01:29:59,510 --> 01:30:06,170
it into an index into our voxel which is

1580
01:30:03,170 --> 01:30:08,000
exactly what we want so we know that the

1581
01:30:06,170 --> 01:30:14,810
voxel position is the element position

1582
01:30:08,000 --> 01:30:16,369
kinds that inverse cell right now we

1583
01:30:14,810 --> 01:30:18,890
have to be careful here because really

1584
01:30:16,369 --> 01:30:21,829
that just gives us the span that the

1585
01:30:18,890 --> 01:30:24,320
stepping we still need one more thing

1586
01:30:21,829 --> 01:30:26,390
here which is a way of centering it

1587
01:30:24,319 --> 01:30:28,069
around where the voxel is and again

1588
01:30:26,390 --> 01:30:29,900
that's the min corner part of that right

1589
01:30:28,069 --> 01:30:31,880
so by first subtracting we the min

1590
01:30:29,899 --> 01:30:34,159
quarter now we know we're relative to

1591
01:30:31,880 --> 01:30:36,500
the inside of the voxel space then by

1592
01:30:34,159 --> 01:30:40,010
Hadamard product with the inverse cell

1593
01:30:36,500 --> 01:30:42,859
dimension we then know okay we are now

1594
01:30:40,010 --> 01:30:44,840
in the numerical space of this voxel

1595
01:30:42,859 --> 01:30:49,159
zero one two three four in each of the

1596
01:30:44,840 --> 01:30:51,350
dimensions at that point but we still

1597
01:30:49,159 --> 01:30:53,000
have fractional here and we don't want

1598
01:30:51,350 --> 01:30:55,010
to look up by fractional so we need to

1599
01:30:53,000 --> 01:31:00,100
truncate each of these to get the actual

1600
01:30:55,010 --> 01:31:00,100
voxel x y&amp;z so to produce those values

1601
01:31:03,520 --> 01:31:11,690
we want to do a truncate and to just

1602
01:31:09,949 --> 01:31:13,689
truncate each of these to place it into

1603
01:31:11,689 --> 01:31:16,689
the voxel at the location it should go

1604
01:31:13,689 --> 01:31:16,689
right

1605
01:31:21,189 --> 01:31:28,849
and I guess I said we were doing it this

1606
01:31:23,449 --> 01:31:33,829
way right and that should basically do

1607
01:31:28,850 --> 01:31:35,900
it oh this is off of the destination

1608
01:31:33,829 --> 01:31:38,809
there that should basically do it like

1609
01:31:35,899 --> 01:31:42,979
that pretty much a you know modular bugs

1610
01:31:38,810 --> 01:31:44,900
will give us the the complete set of

1611
01:31:42,979 --> 01:31:51,979
textures we would need to pass down to

1612
01:31:44,899 --> 01:31:53,239
the card in order to determine all of

1613
01:31:51,979 --> 01:31:57,319
the lighting gathers that we might need

1614
01:31:53,239 --> 01:32:01,250
to do right and that's it that's all

1615
01:31:57,319 --> 01:32:02,840
there is to it so at that point we would

1616
01:32:01,250 --> 01:32:05,119
just need a way of sending these down to

1617
01:32:02,840 --> 01:32:08,360
the card and then we could actually use

1618
01:32:05,119 --> 01:32:10,250
them when we are when we are actually

1619
01:32:08,359 --> 01:32:12,439
doing you're letting equations however

1620
01:32:10,250 --> 01:32:14,449
we yeah obviously have a bunch of work

1621
01:32:12,439 --> 01:32:16,429
we would have to do there and I don't

1622
01:32:14,449 --> 01:32:19,429
know how much time we really have here

1623
01:32:16,430 --> 01:32:25,010
we only have about 15 minutes left so

1624
01:32:19,430 --> 01:32:28,289
I'm not really sure I guess what I'll do

1625
01:32:25,010 --> 01:32:31,829
here is say well you know

1626
01:32:28,289 --> 01:32:31,828
[Music]

1627
01:32:39,050 --> 01:32:47,130
inside handmade worldin mode here when

1628
01:32:44,670 --> 01:33:02,489
we have put this lighting maybe I'll

1629
01:32:47,130 --> 01:33:05,069
just say hey like I guess what we'll say

1630
01:33:02,488 --> 01:33:10,649
is alright let's have a letting texture

1631
01:33:05,069 --> 01:33:12,929
in there when you when you generate the

1632
01:33:10,649 --> 01:33:15,059
lighting once you also generate the

1633
01:33:12,929 --> 01:33:37,500
lighting textures just so we can we

1634
01:33:15,060 --> 01:33:40,650
could test it and that should run that

1635
01:33:37,500 --> 01:33:44,250
code path we just can't see if it's

1636
01:33:40,649 --> 01:33:49,638
actually working we don't know what it

1637
01:33:44,250 --> 01:33:49,639
created and so you know there's that

1638
01:33:55,949 --> 01:34:02,789
I guess what I could do real quick and

1639
01:33:58,050 --> 01:34:07,130
this does seem like maybe a good idea is

1640
01:34:02,789 --> 01:34:12,090
I could make an output routine that just

1641
01:34:07,130 --> 01:34:15,810
puts little Splatt Splatt squads

1642
01:34:12,090 --> 01:34:22,319
everywhere to show the values of the

1643
01:34:15,810 --> 01:34:33,210
voxel in all locations that actually

1644
01:34:22,319 --> 01:34:35,250
seems like a pretty good idea yeah let's

1645
01:34:33,210 --> 01:34:40,199
let's do that

1646
01:34:35,250 --> 01:34:42,260
so so let's let's figure out a way to

1647
01:34:40,199 --> 01:34:46,679
make that happen

1648
01:34:42,260 --> 01:34:50,100
when we call output lighting here let's

1649
01:34:46,680 --> 01:35:03,840
actually call output lighting with the

1650
01:34:50,100 --> 01:35:14,030
test textures as well and so here where

1651
01:35:03,840 --> 01:35:14,029
we're going to do a why call the desk

1652
01:35:14,510 --> 01:35:19,440
here we're going to output this stuff

1653
01:35:16,649 --> 01:35:25,710
let's say that if we got the textures

1654
01:35:19,439 --> 01:35:29,189
that we're going to do some kind of a

1655
01:35:25,710 --> 01:35:32,939
quad output lighting that comes just

1656
01:35:29,189 --> 01:35:39,509
from those right so what I'll do here is

1657
01:35:32,939 --> 01:35:46,409
I'll copy this routine and I'll just

1658
01:35:39,510 --> 01:35:49,039
call this some kind of debug texture

1659
01:35:46,409 --> 01:35:49,039
output right

1660
01:35:56,420 --> 01:35:59,480
and we don't really know ahead of time

1661
01:35:57,979 --> 01:36:02,389
how many there are because we don't know

1662
01:35:59,479 --> 01:36:04,309
how many are in these textures here so

1663
01:36:02,390 --> 01:36:06,380
we'll probably have to pass the lighting

1664
01:36:04,310 --> 01:36:08,900
solution I guess just so we have that

1665
01:36:06,380 --> 01:36:10,460
value we could store it in the textures

1666
01:36:08,899 --> 01:36:13,159
as well but again this is just for debug

1667
01:36:10,460 --> 01:36:14,480
so it probably shouldn't matter and so

1668
01:36:13,159 --> 01:36:19,189
then what we could do here is we could

1669
01:36:14,479 --> 01:36:35,959
just say well alright let's just step

1670
01:36:19,189 --> 01:36:37,369
through each of these axes and let's

1671
01:36:35,960 --> 01:36:39,409
just output the cost of the voxel

1672
01:36:37,369 --> 01:36:47,149
because that way at least we know what's

1673
01:36:39,409 --> 01:36:49,789
in there right and that's better than

1674
01:36:47,149 --> 01:36:51,529
you know starting next week not knowing

1675
01:36:49,789 --> 01:36:54,439
whether we built our voxel correctly and

1676
01:36:51,529 --> 01:36:56,090
we still have to figure out with what we

1677
01:36:54,439 --> 01:37:06,319
sent down to the card was even remotely

1678
01:36:56,090 --> 01:37:12,369
correct all right so the textures look

1679
01:37:06,319 --> 01:37:12,369
up we are going to

1680
01:37:18,738 --> 01:37:28,738
get the first one out here so this is

1681
01:37:21,420 --> 01:37:32,690
our like first index or I guess we

1682
01:37:28,738 --> 01:37:32,689
should just say it's just our index and

1683
01:37:34,969 --> 01:37:53,908
we just want to loop so we're going to

1684
01:37:38,729 --> 01:37:56,069
grab out the T next I guess I don't we

1685
01:37:53,908 --> 01:37:58,379
need to do it well little bit done so

1686
01:37:56,069 --> 01:38:01,109
we're going to grab out that PMF value

1687
01:37:58,380 --> 01:38:03,060
we're going to look at it but then

1688
01:38:01,109 --> 01:38:08,849
immediately after we'll just keep going

1689
01:38:03,060 --> 01:38:13,710
on it so so we know that this is the

1690
01:38:08,850 --> 01:38:19,949
location and we know the color is just

1691
01:38:13,710 --> 01:38:22,619
whatever that index is so that gives us

1692
01:38:19,948 --> 01:38:26,759
the position and the color value and so

1693
01:38:22,619 --> 01:38:28,710
now we can make something we could you

1694
01:38:26,760 --> 01:38:31,800
know push a cube or something on here I

1695
01:38:28,710 --> 01:38:33,899
guess that had that that letting color

1696
01:38:31,800 --> 01:38:36,029
in fact maybe that's what we'll do since

1697
01:38:33,899 --> 01:38:38,279
we don't have normals anymore right at

1698
01:38:36,029 --> 01:38:40,979
this point maybe that's exactly what

1699
01:38:38,279 --> 01:38:44,300
we'll do let me see what our options are

1700
01:38:40,979 --> 01:38:44,299
for doing something like push cube

1701
01:38:55,250 --> 01:39:05,539
so pushed you will take the render group

1702
01:39:02,920 --> 01:39:07,368
the bitmap ID which is just a white

1703
01:39:05,539 --> 01:39:09,769
bitmap we don't want an actual different

1704
01:39:07,368 --> 01:39:12,198
bitmap on there but we know the position

1705
01:39:09,770 --> 01:39:16,730
we know the radius should just be some

1706
01:39:12,198 --> 01:39:20,388
small radius and yeah I don't know what

1707
01:39:16,729 --> 01:39:24,829
to do about the height exactly and then

1708
01:39:20,389 --> 01:39:35,300
the color is just going to have to be an

1709
01:39:24,829 --> 01:39:42,738
unpack seems dumb to pack and then

1710
01:39:35,300 --> 01:39:45,070
unpack this in that way but what are you

1711
01:39:42,738 --> 01:39:45,069
going to do

1712
01:39:50,769 --> 01:40:00,829
this code really needs to be cleaned up

1713
01:39:57,948 --> 01:40:02,839
a bit in fact the way that we're doing

1714
01:40:00,828 --> 01:40:10,429
this now we in fact I could clean this

1715
01:40:02,840 --> 01:40:12,860
up right now let's just do this it looks

1716
01:40:10,429 --> 01:40:14,090
like the push cube what is the

1717
01:40:12,859 --> 01:40:25,158
difference between these two routines

1718
01:40:14,090 --> 01:40:27,469
that one takes a bitmap ID and this one

1719
01:40:25,158 --> 01:40:31,118
takes the resolved bitmap and it also

1720
01:40:27,469 --> 01:40:37,248
takes an emission value all right

1721
01:40:31,118 --> 01:40:39,698
so let's just make this take a color

1722
01:40:37,248 --> 01:40:39,698
value

1723
01:40:58,878 --> 01:41:02,698
and I guess the only question is can we

1724
01:41:00,929 --> 01:41:05,819
trust the people who have passed us in

1725
01:41:02,698 --> 01:41:08,358
are going to actually pre-multiply it

1726
01:41:05,819 --> 01:41:08,358
properly

1727
01:41:10,849 --> 01:41:22,889
alright maybe I won't do that maybe I

1728
01:41:19,859 --> 01:41:26,459
want alright so what we need to do here

1729
01:41:22,889 --> 01:41:44,248
is we need to unpack this this normal

1730
01:41:26,458 --> 01:41:46,708
value see here so this unpack is going

1731
01:41:44,248 --> 01:41:55,319
to leave things essentially the way they

1732
01:41:46,708 --> 01:41:57,328
are so when we do that unpack 4x8 these

1733
01:41:55,319 --> 01:42:06,058
are going to be in the 255 space so we

1734
01:41:57,328 --> 01:42:09,208
really need to do you know just to get

1735
01:42:06,059 --> 01:42:12,059
it out of there I so once you've got

1736
01:42:09,208 --> 01:42:14,418
that we can pass it down and I guess

1737
01:42:12,059 --> 01:42:14,418
that's fine

1738
01:42:25,149 --> 01:42:33,189
all right so let's see here

1739
01:42:30,060 --> 01:42:36,550
this should allow us if we do this

1740
01:42:33,189 --> 01:42:38,408
output texture debug bit here this

1741
01:42:36,550 --> 01:42:41,199
should allow us to see cubes that

1742
01:42:38,408 --> 01:42:44,049
represent everywhere that we stored a

1743
01:42:41,198 --> 01:42:49,439
lighting sample in our voxel now it

1744
01:42:44,050 --> 01:42:52,719
doesn't quite show us yet exactly what

1745
01:42:49,439 --> 01:42:54,369
whether the voxel got sorted properly it

1746
01:42:52,719 --> 01:42:56,469
would just show us whether we stored

1747
01:42:54,369 --> 01:42:57,908
stuff properly at all the reason I say

1748
01:42:56,469 --> 01:43:00,760
it doesn't say whether we store it in

1749
01:42:57,908 --> 01:43:02,229
the Box property properly is well we're

1750
01:43:00,760 --> 01:43:03,940
going to get stuff out and we're going

1751
01:43:02,229 --> 01:43:07,988
to draw it at the location that's

1752
01:43:03,939 --> 01:43:10,238
supposed to be drawn at so even if we

1753
01:43:07,988 --> 01:43:12,658
sort it in the wrong voxel location we

1754
01:43:10,238 --> 01:43:16,839
would still output it in the right place

1755
01:43:12,658 --> 01:43:19,149
so at the moment we're really only going

1756
01:43:16,840 --> 01:43:20,440
to be be able to debug well of course

1757
01:43:19,149 --> 01:43:24,059
since we don't do anything that's a good

1758
01:43:20,439 --> 01:43:24,059
sign that we still have bugs to work on

1759
01:43:24,510 --> 01:43:30,429
we're only really going to be able to

1760
01:43:27,158 --> 01:43:32,589
debug the fact that the things restored

1761
01:43:30,429 --> 01:43:34,869
and we'll have to come up with a clever

1762
01:43:32,590 --> 01:43:37,510
way to figure out whether they were

1763
01:43:34,869 --> 01:43:42,219
stored in the right place right so we

1764
01:43:37,510 --> 01:43:42,429
have those two separate things to do all

1765
01:43:42,219 --> 01:43:44,710
right

1766
01:43:42,429 --> 01:43:49,929
so let's start by stepping through this

1767
01:43:44,710 --> 01:43:52,260
I'm going to switch out of of optimized

1768
01:43:49,929 --> 01:43:52,260
mode

1769
01:43:57,078 --> 01:44:01,549
and I'm going to go ahead and just set a

1770
01:44:00,828 --> 01:44:12,858
breakpoint

1771
01:44:01,550 --> 01:44:14,510
I think it's called lighting test let's

1772
01:44:12,859 --> 01:44:16,939
do let's just go output learning

1773
01:44:14,510 --> 01:44:22,729
textures we don't really care about rest

1774
01:44:16,939 --> 01:44:23,989
of the I suppose I so we don't care

1775
01:44:22,729 --> 01:44:31,939
about lighting test actually because

1776
01:44:23,988 --> 01:44:33,678
that's mostly irrelevant we got to wait

1777
01:44:31,939 --> 01:44:42,530
for a while for our extremely slow debug

1778
01:44:33,679 --> 01:44:44,679
to happen and then we got a take a look

1779
01:44:42,529 --> 01:44:44,679
at this

1780
01:44:51,279 --> 01:44:54,519
although now I think about the other

1781
01:44:52,689 --> 01:44:58,149
thing I probably do just turn the Ray

1782
01:44:54,520 --> 01:45:00,239
casting count down because we don't

1783
01:44:58,149 --> 01:45:02,408
really need to be doing anything

1784
01:45:00,238 --> 01:45:07,388
particular with the lighting solution at

1785
01:45:02,408 --> 01:45:08,888
this point so we're really just blowing

1786
01:45:07,389 --> 01:45:17,349
a bunch of random time on that effect

1787
01:45:08,889 --> 01:45:20,109
let me go ahead and do that oh it is

1788
01:45:17,349 --> 01:45:23,940
only doing eight man the debug version

1789
01:45:20,109 --> 01:45:26,670
of this is so much slower I wonder why

1790
01:45:23,939 --> 01:45:28,719
it would be interesting to see what I

1791
01:45:26,670 --> 01:45:33,069
guess probably because all these things

1792
01:45:28,719 --> 01:45:35,578
turn into function calls all right we'll

1793
01:45:33,069 --> 01:45:35,578
wait for it

1794
01:45:39,710 --> 01:45:43,699
this is one of those things where you

1795
01:45:41,359 --> 01:45:45,799
really wish you could just put a little

1796
01:45:43,699 --> 01:45:49,069
block around something and say optimize

1797
01:45:45,800 --> 01:45:52,760
just this one routine but Visual Studio

1798
01:45:49,069 --> 01:45:55,639
can't really do that because it it won't

1799
01:45:52,760 --> 01:46:00,070
inline functions who are outside of that

1800
01:45:55,640 --> 01:46:00,070
block like it's yeah it's kind of a mess

1801
01:46:35,560 --> 01:46:41,270
all right so if we take a look at what

1802
01:46:39,260 --> 01:46:43,159
happens here let's first start by trying

1803
01:46:41,270 --> 01:46:48,620
to look and see whether the min Corner

1804
01:46:43,159 --> 01:46:56,359
and Max corner are reasonable those do

1805
01:46:48,619 --> 01:46:58,250
seem pretty reasonable I guess it makes

1806
01:46:56,359 --> 01:47:00,679
sense that they're basically exactly the

1807
01:46:58,250 --> 01:47:02,779
same values because of the way we sort

1808
01:47:00,680 --> 01:47:07,400
of symmetric recreate the world there's

1809
01:47:02,779 --> 01:47:08,289
a little suspicious but I'll give them

1810
01:47:07,399 --> 01:47:12,849
that

1811
01:47:08,289 --> 01:47:12,850
so let's see here

1812
01:47:19,720 --> 01:47:31,460
so if we compute one of these voxel P

1813
01:47:23,750 --> 01:47:33,738
values see what the x y&amp;z is 144 130 10

1814
01:47:31,460 --> 01:47:36,020
those are saying we look up to look up

1815
01:47:33,738 --> 01:47:39,819
at which should always be 0 first time

1816
01:47:36,020 --> 01:47:48,350
through we do some color packing there

1817
01:47:39,819 --> 01:47:50,479
and we say ok the lookup value is going

1818
01:47:48,350 --> 01:47:57,400
to point to us we are going to point to

1819
01:47:50,479 --> 01:47:57,399
nothing we set the position just fine

1820
01:47:58,029 --> 01:48:09,769
that's all good and then we've got our

1821
01:48:01,359 --> 01:48:14,449
destination color that we set so that

1822
01:48:09,770 --> 01:48:18,130
all seems pretty reasonable so let's

1823
01:48:14,449 --> 01:48:18,130
take a look at output texture debug

1824
01:48:25,229 --> 01:48:35,939
so we never get in here even though we

1825
01:48:28,079 --> 01:48:44,939
saw that oh wow

1826
01:48:35,939 --> 01:48:45,989
not a great day for oh man alright well

1827
01:48:44,939 --> 01:48:49,169
I'm glad I didn't spend too much time

1828
01:48:45,989 --> 01:48:50,789
looking for that like I didn't even pass

1829
01:48:49,170 --> 01:48:55,079
the values that we were trying to look

1830
01:48:50,789 --> 01:48:57,529
up that's great good job nice wonderful

1831
01:48:55,079 --> 01:49:03,930
[Music]

1832
01:48:57,529 --> 01:49:09,019
Wow anyway let's go ahead and see how

1833
01:49:03,930 --> 01:49:09,020
that goes here in in release mode

1834
01:49:14,550 --> 01:49:27,500
alright that did produce a bunch of

1835
01:49:21,149 --> 01:49:27,500
cubes but they are weirdly positioned

1836
01:49:28,699 --> 01:49:35,220
and if I switch to the non debug camera

1837
01:49:33,630 --> 01:49:38,520
I can't see them anymore

1838
01:49:35,220 --> 01:49:40,760
so something is a little off I'm just

1839
01:49:38,520 --> 01:49:43,959
not sure what

1840
01:49:40,760 --> 01:49:43,958
[Music]

1841
01:49:51,189 --> 01:49:59,429
we are still starring the element P when

1842
01:49:55,958 --> 01:49:59,429
we do the app protects your debug

1843
01:50:16,399 --> 01:50:19,399
hmm

1844
01:50:29,579 --> 01:50:37,930
I'm not sure what's going on there they

1845
01:50:35,859 --> 01:50:46,329
seem to be slightly invalid values

1846
01:50:37,930 --> 01:50:57,270
somehow I'm just not sure how here's a

1847
01:50:46,329 --> 01:50:57,269
question can we do that

1848
01:51:12,949 --> 01:51:18,050
that could work or that didn't work that

1849
01:51:22,699 --> 01:51:32,670
looks like that works surprisingly well

1850
01:51:25,609 --> 01:51:38,250
should do that more often that seems

1851
01:51:32,670 --> 01:51:41,250
like a perfectly sane value that does

1852
01:51:38,250 --> 01:51:43,670
not look anything like a perfectly sane

1853
01:51:41,250 --> 01:51:43,670
value

1854
01:51:54,880 --> 01:52:04,719
hmm so how is that

1855
01:52:17,250 --> 01:52:29,119
how is that getting generated so the

1856
01:52:23,850 --> 01:52:29,120
Alpha should always just be one right

1857
01:52:31,760 --> 01:52:37,970
that does RGB a unpack already do that

1858
01:52:35,279 --> 01:52:37,969
for me

1859
01:52:47,319 --> 01:52:56,078
I mean it sure doesn't look like it

1860
01:52:48,880 --> 01:53:01,170
right that should produce the zero to

1861
01:52:56,078 --> 01:53:01,170
255 version of the impact values

1862
01:53:07,039 --> 01:53:14,199
hmm so I'm not sure what's up with that

1863
01:53:11,029 --> 01:53:14,199
let me try this

1864
01:53:35,929 --> 01:53:41,840
so that looks like we are storing

1865
01:53:39,170 --> 01:53:43,940
lighting samples pretty much the way

1866
01:53:41,840 --> 01:53:45,710
they should be stored we don't know if

1867
01:53:43,939 --> 01:53:48,379
they're in the right Vox containers so

1868
01:53:45,710 --> 01:53:56,600
it looks like it's just the color that

1869
01:53:48,380 --> 01:54:00,050
is wrong to me so all we have to do is

1870
01:53:56,600 --> 01:54:03,320
just debug the color value and then we

1871
01:54:00,050 --> 01:54:05,510
should be good to go it looks like the

1872
01:54:03,319 --> 01:54:07,609
front emit our G and B they're being

1873
01:54:05,510 --> 01:54:12,829
clamped zero to one then we're doing in

1874
01:54:07,609 --> 01:54:16,969
RGB pack four by eight it looks like we

1875
01:54:12,829 --> 01:54:21,170
forgot the 255 there yeah so basically

1876
01:54:16,969 --> 01:54:23,739
this is the only problem and then I

1877
01:54:21,170 --> 01:54:23,739
think we're good

1878
01:54:33,510 --> 01:54:44,659
there we go I so I think we now have a

1879
01:54:40,349 --> 01:54:44,659
nice little world of lighting samples

1880
01:54:47,599 --> 01:54:57,260
there we go and we're pretty much ready

1881
01:54:49,979 --> 01:55:01,308
for next time so let me go to the Q&amp;A

1882
01:54:57,260 --> 01:55:01,309
and I'll remove the fragment

1883
01:55:16,760 --> 01:55:27,140
anyone have questions on what we did I'm

1884
01:55:23,579 --> 01:55:27,140
pretty interested to see how this works

1885
01:55:36,539 --> 01:55:53,319
like I'll be very interested to see how

1886
01:55:40,029 --> 01:55:54,909
the gathering works well because at this

1887
01:55:53,319 --> 01:55:57,880
point the other really interesting thing

1888
01:55:54,909 --> 01:56:00,699
that I find about this is we no longer

1889
01:55:57,880 --> 01:56:03,130
really have to care where we put the

1890
01:56:00,699 --> 01:56:05,109
lighting samples for week because if we

1891
01:56:03,130 --> 01:56:10,750
reconstruct the lighting samples per

1892
01:56:05,109 --> 01:56:12,579
pixel then we can scatter our lighting

1893
01:56:10,750 --> 01:56:15,880
samples around the world in whatever

1894
01:56:12,579 --> 01:56:17,890
places make the most sense for creating

1895
01:56:15,880 --> 01:56:19,840
good lighting solutions we don't have to

1896
01:56:17,890 --> 01:56:22,720
put them in particular locations because

1897
01:56:19,840 --> 01:56:26,069
we know we need to output the values

1898
01:56:22,720 --> 01:56:26,070
asset location directly

1899
01:57:48,930 --> 01:57:54,920
oh thanks okay so you guys made a gist

1900
01:57:52,140 --> 01:57:54,920
that was

1901
01:58:33,340 --> 01:58:39,210
this is a pretty advanced you guys had a

1902
01:58:36,639 --> 01:58:39,210
lot of stuff in here

1903
01:59:13,220 --> 01:59:16,690
I don't see any questions

1904
02:00:06,689 --> 02:00:15,659
let's see Rome 0 0 0 1 0 1 1 maybe it's

1905
02:00:14,250 --> 02:00:18,060
a non-issue but because the entity is

1906
02:00:15,659 --> 02:00:19,829
tilted when it walks in front of a cube

1907
02:00:18,060 --> 02:00:21,270
it is being cut is there an elegant

1908
02:00:19,829 --> 02:00:23,309
solution for it

1909
02:00:21,270 --> 02:00:31,260
well actually we kind of have some

1910
02:00:23,310 --> 02:00:35,100
solutions for that already well I I

1911
02:00:31,260 --> 02:00:37,079
don't know if we want to play with this

1912
02:00:35,100 --> 02:00:40,590
too much at the moment but basically

1913
02:00:37,079 --> 02:00:42,869
what we what we see here is a little bit

1914
02:00:40,590 --> 02:00:45,510
difficult because we don't have actual

1915
02:00:42,869 --> 02:00:47,069
representative artwork in right now the

1916
02:00:45,510 --> 02:00:48,930
artwork is kind of drawn as an angle

1917
02:00:47,069 --> 02:00:53,239
that is not the angle that the actual

1918
02:00:48,930 --> 02:00:55,500
artwork is for the game so the cutting

1919
02:00:53,239 --> 02:00:58,800
problem will actually be lessened a

1920
02:00:55,500 --> 02:01:00,479
little bit but we already do have some

1921
02:00:58,800 --> 02:01:02,909
solutions in there for that we have a

1922
02:01:00,479 --> 02:01:05,849
bias value that you can add in which

1923
02:01:02,909 --> 02:01:09,329
causes things to appear in front of

1924
02:01:05,850 --> 02:01:18,000
where they actually are to prevent these

1925
02:01:09,329 --> 02:01:21,449
kinds of problems so for example yeah

1926
02:01:18,000 --> 02:01:23,760
like if I if I put the hero bitmap back

1927
02:01:21,449 --> 02:01:26,899
in so we have somebody we can actually

1928
02:01:23,760 --> 02:01:26,900
drive around

1929
02:01:42,210 --> 02:01:46,199
so there's the clipping well okay we've

1930
02:01:44,819 --> 02:01:48,449
also have that giant light in the way

1931
02:01:46,199 --> 02:01:50,789
which isn't going to help but there's

1932
02:01:48,449 --> 02:01:52,739
you can still see the clip there we go

1933
02:01:50,789 --> 02:01:55,680
you can see the clipping problem that

1934
02:01:52,739 --> 02:01:59,010
you're talking about there so we have

1935
02:01:55,680 --> 02:02:02,880
ways in which that can be modified so

1936
02:01:59,010 --> 02:02:04,590
for example if we wanted to we could

1937
02:02:02,880 --> 02:02:10,650
increase the degree - with it

1938
02:02:04,590 --> 02:02:13,680
- which bitmaps get biased V values for

1939
02:02:10,649 --> 02:02:18,739
example let's say let me see where we've

1940
02:02:13,680 --> 02:02:18,740
got this here this is the lighting code

1941
02:02:24,470 --> 02:02:30,270
we don't want line segments we just want

1942
02:02:27,659 --> 02:02:34,970
bit maps so you can see the Z bias

1943
02:02:30,270 --> 02:02:38,180
values here that gets added into the

1944
02:02:34,970 --> 02:02:42,030
into the sprites that we output we have

1945
02:02:38,180 --> 02:02:44,159
really we can adjust this however we

1946
02:02:42,029 --> 02:02:46,079
want and again it's always kind of a

1947
02:02:44,159 --> 02:02:48,539
hack to try and put things that are 2d

1948
02:02:46,079 --> 02:02:50,399
into 3d so there isn't really a right

1949
02:02:48,539 --> 02:02:53,550
answer to this but you could imagine

1950
02:02:50,399 --> 02:02:59,939
making it a much more pronounced Z bias

1951
02:02:53,550 --> 02:03:01,560
value right so for example and this is

1952
02:02:59,939 --> 02:03:03,149
course creates a problem within your

1953
02:03:01,560 --> 02:03:07,320
clip plane but you can see now there's

1954
02:03:03,149 --> 02:03:10,139
actually that hero appears in front of

1955
02:03:07,319 --> 02:03:11,519
these cubes up until it gets clipped by

1956
02:03:10,140 --> 02:03:13,200
the near clip plane which is actually

1957
02:03:11,520 --> 02:03:15,870
out pretty handsome I pull back a little

1958
02:03:13,199 --> 02:03:19,829
bit here now you can kind of see that he

1959
02:03:15,869 --> 02:03:22,319
doesn't get clipped anymore right so we

1960
02:03:19,829 --> 02:03:23,909
do have sorry about the light that's in

1961
02:03:22,319 --> 02:03:24,960
the way there we were like if they were

1962
02:03:23,909 --> 02:03:26,279
playing with lighting so we're not

1963
02:03:24,960 --> 02:03:28,560
really in a position to start talking

1964
02:03:26,279 --> 02:03:30,989
about sprites so you can kind of see how

1965
02:03:28,560 --> 02:03:34,440
the Z bias value does allow you to deal

1966
02:03:30,989 --> 02:03:36,269
with these problems in some ways but

1967
02:03:34,439 --> 02:03:38,849
it's always a little bit of a trade-off

1968
02:03:36,270 --> 02:03:41,100
because you know the more Z bias you add

1969
02:03:38,850 --> 02:03:43,110
in there the more you get problems of

1970
02:03:41,100 --> 02:03:45,300
like I don't know if I can go downstairs

1971
02:03:43,109 --> 02:03:48,179
anymore because we kind of kick cart

1972
02:03:45,300 --> 02:03:50,279
caved ourselves off but you can imagine

1973
02:03:48,180 --> 02:03:53,340
problems of like now when I'm standing

1974
02:03:50,279 --> 02:03:54,630
in front of you know this this red piece

1975
02:03:53,340 --> 02:03:56,760
right here for example

1976
02:03:54,630 --> 02:03:58,230
maybe I can get in a place where I

1977
02:03:56,760 --> 02:04:02,100
should be clipped by it like right there

1978
02:03:58,229 --> 02:04:03,359
and I'm not so the problem with using Z

1979
02:04:02,100 --> 02:04:05,579
bias too aggressively

1980
02:04:03,359 --> 02:04:07,799
is that you can only really put it to a

1981
02:04:05,579 --> 02:04:14,390
certain level before it becomes a

1982
02:04:07,800 --> 02:04:16,949
problem right I'm not sure what the

1983
02:04:14,390 --> 02:04:23,010
really best way to deal with some of

1984
02:04:16,949 --> 02:04:27,300
this stuff is in the end we just have

1985
02:04:23,010 --> 02:04:29,820
tools we can use to try to combat the

1986
02:04:27,300 --> 02:04:31,800
obvious problems my hunch is we won't

1987
02:04:29,819 --> 02:04:34,109
have to do as much with it in the future

1988
02:04:31,800 --> 02:04:37,590
because the artwork will be centered

1989
02:04:34,109 --> 02:04:39,439
more properly on the squares and we

1990
02:04:37,590 --> 02:04:43,590
won't have as much problem with overlap

1991
02:04:39,439 --> 02:04:45,689
but it's hard to say right so will that

1992
02:04:43,590 --> 02:04:47,699
we'll play around with it and you know

1993
02:04:45,689 --> 02:04:50,429
we'll see how bad it is when we actually

1994
02:04:47,699 --> 02:04:51,960
have to put together the final stuff but

1995
02:04:50,430 --> 02:04:53,909
there's never going to be I don't think

1996
02:04:51,960 --> 02:04:57,289
a perfect solution when you're trying to

1997
02:04:53,909 --> 02:04:57,289
place to do things in 3d

1998
02:05:15,010 --> 02:05:18,880
when we made the high-end low-priority

1999
02:05:16,810 --> 02:05:20,590
thread cues how did we make the hike you

2000
02:05:18,880 --> 02:05:22,029
actually have a higher priority I can't

2001
02:05:20,590 --> 02:05:25,079
find the difference between them in the

2002
02:05:22,029 --> 02:05:28,420
implementation if that makes sense so

2003
02:05:25,079 --> 02:05:30,519
that nomenclature is about how we are

2004
02:05:28,420 --> 02:05:34,680
treating the cues in our code they are

2005
02:05:30,520 --> 02:05:38,080
not higher or lower priority in Windows

2006
02:05:34,680 --> 02:05:40,239
so what the high priority queue is is

2007
02:05:38,079 --> 02:05:44,619
the thing that all threads will take

2008
02:05:40,238 --> 02:05:46,679
work out of so here I can sort of show

2009
02:05:44,619 --> 02:05:46,680
you

2010
02:06:00,689 --> 02:06:07,469
ah okay so here's where we create the

2011
02:06:05,250 --> 02:06:09,689
queues right and we create two low

2012
02:06:07,470 --> 02:06:11,670
priority queues and six high priority

2013
02:06:09,689 --> 02:06:14,039
queues the high priority queues are

2014
02:06:11,670 --> 02:06:16,380
strictly for doing CPU work that has to

2015
02:06:14,039 --> 02:06:18,329
be finished immediately right so it's

2016
02:06:16,380 --> 02:06:20,279
just like the software renderer run

2017
02:06:18,329 --> 02:06:21,689
through the high priority queues the low

2018
02:06:20,279 --> 02:06:24,119
priority queues are things that are just

2019
02:06:21,689 --> 02:06:26,699
waiting for stuff to happen like oh I

2020
02:06:24,119 --> 02:06:29,010
have to do a load like I have to load a

2021
02:06:26,699 --> 02:06:30,510
file and so I'm waiting to like load

2022
02:06:29,010 --> 02:06:34,140
some data out of the file or something

2023
02:06:30,510 --> 02:06:42,600
like that right so if you look at how

2024
02:06:34,140 --> 02:06:45,000
those end up getting used what you can

2025
02:06:42,600 --> 02:06:46,860
see is that here we add entries for

2026
02:06:45,000 --> 02:06:50,100
example to these low priority queues

2027
02:06:46,859 --> 02:06:52,799
right and then those low priority queues

2028
02:06:50,100 --> 02:06:55,680
are going to call us back for example on

2029
02:06:52,800 --> 02:07:04,980
this I believe that no it's not quite

2030
02:06:55,680 --> 02:07:10,440
here where is it where is low desk at

2031
02:07:04,979 --> 02:07:12,059
work dirty so this the the low priority

2032
02:07:10,439 --> 02:07:16,949
queue is going to be calling back here

2033
02:07:12,060 --> 02:07:24,180
at the the load asset work call right

2034
02:07:16,949 --> 02:07:25,559
that's what's going to happen so if you

2035
02:07:24,180 --> 02:07:27,840
take a look at how that sort of thing

2036
02:07:25,560 --> 02:07:33,780
works and you take a look at instead how

2037
02:07:27,840 --> 02:07:34,949
say the the renderer works there's a big

2038
02:07:33,779 --> 02:07:37,649
difference between the two of them and

2039
02:07:34,949 --> 02:07:41,189
the big difference is the complete all

2040
02:07:37,649 --> 02:07:42,689
work operation right so when we use the

2041
02:07:41,189 --> 02:07:44,699
high priority queues what we tend to do

2042
02:07:42,689 --> 02:07:46,859
here is we push a bunch of stuff into

2043
02:07:44,699 --> 02:07:49,800
these queues and then we say complete

2044
02:07:46,859 --> 02:07:51,929
all work on the queue that we used right

2045
02:07:49,800 --> 02:07:55,800
whereas when we're doing something

2046
02:07:51,930 --> 02:07:57,510
that's just a slow overlap operation we

2047
02:07:55,800 --> 02:08:02,340
push stuff on to the queues but we never

2048
02:07:57,510 --> 02:08:03,869
call complete all work right now why

2049
02:08:02,340 --> 02:08:05,970
does this make one a high part if you

2050
02:08:03,869 --> 02:08:08,250
would want a low priority queue well the

2051
02:08:05,970 --> 02:08:10,760
reason is because when we call complete

2052
02:08:08,250 --> 02:08:10,760
all work

2053
02:08:19,829 --> 02:08:22,948
when we call complete I'll work but

2054
02:08:21,479 --> 02:08:24,868
we're essentially doing is taking cue

2055
02:08:22,948 --> 02:08:27,089
and we're forcing ourselves to do all

2056
02:08:24,868 --> 02:08:32,118
the work out of the cue that we can do

2057
02:08:27,090 --> 02:08:34,560
right so we're just like going down that

2058
02:08:32,118 --> 02:08:37,589
we're putting a bunch of work into a cue

2059
02:08:34,560 --> 02:08:39,750
then we're forcing ourselves to even on

2060
02:08:37,590 --> 02:08:41,489
the thread that launched that work we're

2061
02:08:39,750 --> 02:08:46,170
going to sit there and keep doing work

2062
02:08:41,488 --> 02:08:47,459
until the queue is empty right similarly

2063
02:08:46,170 --> 02:08:50,789
if you take a look at how the thread

2064
02:08:47,460 --> 02:08:54,090
proc works it's just going to do get

2065
02:08:50,789 --> 02:08:57,090
work out of the queue do the work that

2066
02:08:54,090 --> 02:08:59,639
we prologue with you and then wait if

2067
02:08:57,090 --> 02:09:03,480
there isn't any work to do right if we

2068
02:08:59,639 --> 02:09:06,989
run out of work we we will just sort of

2069
02:09:03,479 --> 02:09:09,598
pause right you can see like we should

2070
02:09:06,988 --> 02:09:11,459
sleep that value is false if we did work

2071
02:09:09,599 --> 02:09:12,960
if we didn't do if we didn't financing

2072
02:09:11,460 --> 02:09:17,368
the cue then we say that we should sleep

2073
02:09:12,960 --> 02:09:19,050
right so essentially what we do is we

2074
02:09:17,368 --> 02:09:23,908
just partitioned our work into two

2075
02:09:19,050 --> 02:09:26,369
queues one that will just we push

2076
02:09:23,908 --> 02:09:28,589
everything into we know that the other

2077
02:09:26,368 --> 02:09:31,319
threads as they wake up will do work out

2078
02:09:28,590 --> 02:09:33,719
of that queue and then we will also sit

2079
02:09:31,319 --> 02:09:35,880
there on that queue and just do the work

2080
02:09:33,719 --> 02:09:39,599
that's in it till we're done so everyone

2081
02:09:35,880 --> 02:09:42,868
will focus on that cue work and you know

2082
02:09:39,599 --> 02:09:44,400
it will it will happen right the low

2083
02:09:42,868 --> 02:09:46,679
priority queues are different there's

2084
02:09:44,399 --> 02:09:49,019
just two threads sitting around doing

2085
02:09:46,679 --> 02:09:51,118
work in those queues all the time if

2086
02:09:49,020 --> 02:09:55,130
there's anything in them but nobody will

2087
02:09:51,118 --> 02:09:58,198
actually block on them to finish right

2088
02:09:55,130 --> 02:10:00,779
so we've never actually we don't

2089
02:09:58,198 --> 02:10:04,079
actually do anything to try and make

2090
02:10:00,779 --> 02:10:08,009
these choose higher or lower priority in

2091
02:10:04,079 --> 02:10:12,689
any particular sense all we're really

2092
02:10:08,010 --> 02:10:15,060
doing is all we're really doing is

2093
02:10:12,689 --> 02:10:17,549
treating one differently than the other

2094
02:10:15,060 --> 02:10:19,199
and we put more threads on one than the

2095
02:10:17,550 --> 02:10:22,920
other is another way that it's higher

2096
02:10:19,198 --> 02:10:25,979
priority right if we wanted to be fancy

2097
02:10:22,920 --> 02:10:28,680
or we could be fancier what we could do

2098
02:10:25,979 --> 02:10:30,269
is we could say all right all threads

2099
02:10:28,680 --> 02:10:31,829
when they wake up pull out of the high

2100
02:10:30,270 --> 02:10:33,030
priority 2 first and if there's nothing

2101
02:10:31,829 --> 02:10:35,430
there then they pull out the low

2102
02:10:33,029 --> 02:10:40,130
priority queue right so we could have

2103
02:10:35,430 --> 02:10:43,250
actually made all threads that exist

2104
02:10:40,130 --> 02:10:45,720
focus on the high priority queue work

2105
02:10:43,250 --> 02:10:48,420
but the reason we didn't do that is

2106
02:10:45,720 --> 02:10:50,039
because we're not really treating the

2107
02:10:48,420 --> 02:10:51,840
low priority queue as something where

2108
02:10:50,039 --> 02:10:53,488
work gets done it's more something just

2109
02:10:51,840 --> 02:10:57,060
sits around waiting for files to come in

2110
02:10:53,488 --> 02:11:00,449
right so there didn't seem to be a need

2111
02:10:57,060 --> 02:11:03,720
to like actually try to make ourselves

2112
02:11:00,449 --> 02:11:06,229
be perfectly subscribed hopefully that

2113
02:11:03,720 --> 02:11:06,230
makes some sense

2114
02:11:18,168 --> 02:11:20,918
hmm

2115
02:11:22,578 --> 02:11:25,819
if I was to guess I would say the

2116
02:11:24,139 --> 02:11:27,710
problem is not the 2d entities in 3d

2117
02:11:25,819 --> 02:11:29,929
space at rather 2d entities with 3d

2118
02:11:27,710 --> 02:11:32,750
entities if those cubes are sprites like

2119
02:11:29,929 --> 02:11:35,899
the trees it would work just fine sadly

2120
02:11:32,750 --> 02:11:38,118
that's not really true I mean I guess it

2121
02:11:35,899 --> 02:11:40,609
depends on how you look at it in terms

2122
02:11:38,118 --> 02:11:42,920
of your how you want to phrase it so

2123
02:11:40,609 --> 02:11:46,069
maybe this is what you mean but the

2124
02:11:42,920 --> 02:11:50,059
problem is in fact the three deenis of

2125
02:11:46,069 --> 02:11:53,299
the world so if you look at the fact

2126
02:11:50,059 --> 02:11:55,329
that these want to be in perspective and

2127
02:11:53,300 --> 02:11:58,010
you can even see how the trees are

2128
02:11:55,328 --> 02:12:00,769
warped in perspective slightly as well

2129
02:11:58,010 --> 02:12:02,840
the fact that we want some perspective

2130
02:12:00,770 --> 02:12:04,699
to the world that's actually the problem

2131
02:12:02,840 --> 02:12:07,550
it doesn't matter whether they're

2132
02:12:04,698 --> 02:12:11,928
sprites forth or cubes or anything else

2133
02:12:07,550 --> 02:12:13,639
as long as there is a flat surface that

2134
02:12:11,929 --> 02:12:17,420
wants to have some perspective to it

2135
02:12:13,639 --> 02:12:22,279
that can flip that's the problem if we

2136
02:12:17,420 --> 02:12:23,630
let this sprite fold back to match what

2137
02:12:22,279 --> 02:12:26,238
was happening here then we'd have no

2138
02:12:23,630 --> 02:12:29,569
problem right but what we're trying to

2139
02:12:26,238 --> 02:12:32,558
do is fake it so that the world has the

2140
02:12:29,569 --> 02:12:35,840
ability to have perspective in it and

2141
02:12:32,559 --> 02:12:43,520
because we're doing that we run into

2142
02:12:35,840 --> 02:12:45,559
these problems right so if you want to

2143
02:12:43,520 --> 02:12:48,110
call that 2d entities with 3d entities

2144
02:12:45,559 --> 02:12:50,329
problem that's fine it's really more a

2145
02:12:48,109 --> 02:12:54,098
2d entities with perspective problem

2146
02:12:50,328 --> 02:12:54,099
might be the best way to put it

2147
02:13:03,319 --> 02:13:06,739
in the suffer render we aligned the

2148
02:13:04,939 --> 02:13:08,299
memory to 16 bytes for Cindy but then we

2149
02:13:06,739 --> 02:13:11,689
use the unalloyed load and storage

2150
02:13:08,300 --> 02:13:14,420
instructions why is that um so it

2151
02:13:11,689 --> 02:13:18,710
depends on the situation one thing that

2152
02:13:14,420 --> 02:13:23,510
was very strange I guess I don't think

2153
02:13:18,710 --> 02:13:26,180
it's actually that strange my

2154
02:13:23,510 --> 02:13:28,550
recollection was that we found that it

2155
02:13:26,180 --> 02:13:30,590
was no slower to do unaligned rights

2156
02:13:28,550 --> 02:13:36,880
than aligned rights that was my

2157
02:13:30,590 --> 02:13:40,880
recollection however we don't use all

2158
02:13:36,880 --> 02:13:47,449
unaligned reads and writes for example

2159
02:13:40,880 --> 02:13:55,359
this is this is aligned right that's an

2160
02:13:47,449 --> 02:13:59,029
aligned load these are both aligned

2161
02:13:55,359 --> 02:14:00,969
that's aligned so all of our pixel loads

2162
02:13:59,029 --> 02:14:04,699
are actually aligned

2163
02:14:00,970 --> 02:14:09,400
what's unaligned is reading from the

2164
02:14:04,699 --> 02:14:12,559
texture sorry remember correctly

2165
02:14:09,399 --> 02:14:12,559
[Music]

2166
02:14:14,140 --> 02:14:26,750
actually I guess the text but the

2167
02:14:18,380 --> 02:14:28,340
texture I guess isn't loaded well all

2168
02:14:26,750 --> 02:14:30,500
right so I don't know do we still have

2169
02:14:28,340 --> 02:14:39,800
any online loads where are the I don't

2170
02:14:30,500 --> 02:14:42,560
see any on the line loads where are the

2171
02:14:39,800 --> 02:14:44,539
under line loads are they gone I guess

2172
02:14:42,560 --> 02:14:48,700
they're gone I remember using one as

2173
02:14:44,539 --> 02:14:48,699
well but I guess it's not there anymore

2174
02:14:49,960 --> 02:14:57,670
so Alex come beware what on a line load

2175
02:14:53,420 --> 02:14:59,960
and store I guess are you talking about

2176
02:14:57,670 --> 02:15:02,210
am i searching for the wrong thing

2177
02:14:59,960 --> 02:15:05,109
pretty sure load you and store you is

2178
02:15:02,210 --> 02:15:05,109
the mnemonic for them

2179
02:15:10,300 --> 02:15:15,369
yeah I don't remember that actually

2180
02:15:12,130 --> 02:15:18,159
being a speed wind though I think we

2181
02:15:15,369 --> 02:15:22,059
just I can't remember if it actually

2182
02:15:18,159 --> 02:15:26,579
helped I think that modern ships may

2183
02:15:22,060 --> 02:15:26,580
just not care very much about unaligned

2184
02:15:27,000 --> 02:15:36,479
versus aligned so I don't know if if the

2185
02:15:30,850 --> 02:15:36,480
chip actually cares but we did do it and

2186
02:15:40,770 --> 02:15:46,210
that said this is actually pretty old

2187
02:15:42,850 --> 02:15:57,010
ship so if ships didn't care this ship

2188
02:15:46,210 --> 02:16:00,010
might still care and the other thing is

2189
02:15:57,010 --> 02:16:05,380
to remember is the reason to align those

2190
02:16:00,010 --> 02:16:07,180
is actually not just because you want to

2191
02:16:05,380 --> 02:16:09,670
use a lined load and stores it's also

2192
02:16:07,180 --> 02:16:14,530
because you don't want false sharing of

2193
02:16:09,670 --> 02:16:16,779
the cache line so you need to make sure

2194
02:16:14,529 --> 02:16:20,619
that the tiles of the tiled renderer end

2195
02:16:16,779 --> 02:16:25,899
on a cache boundary so right if you want

2196
02:16:20,619 --> 02:16:29,340
to have thread 0 working on this tile

2197
02:16:25,899 --> 02:16:33,099
and thread 1 working on this tile right

2198
02:16:29,340 --> 02:16:35,200
at the boundary here you have to

2199
02:16:33,099 --> 02:16:38,019
remember that if both people are writing

2200
02:16:35,200 --> 02:16:39,519
to pixels that are at the boundary you

2201
02:16:38,019 --> 02:16:43,630
have to make sure that they're not

2202
02:16:39,519 --> 02:16:45,819
sharing cache line okay because what

2203
02:16:43,629 --> 02:16:49,109
will happen is if thread 0 and thread 1

2204
02:16:45,819 --> 02:16:52,360
are both pounding on the same cache line

2205
02:16:49,110 --> 02:16:54,130
you're going to be in a world of hurt so

2206
02:16:52,360 --> 02:16:56,980
you want to make sure that the cache

2207
02:16:54,129 --> 02:17:01,659
lines which are 64 bytes you want to

2208
02:16:56,979 --> 02:17:03,909
make sure that they end right right at

2209
02:17:01,659 --> 02:17:05,860
the end and this one starts on a fresh

2210
02:17:03,909 --> 02:17:08,200
cache line so that the cache line

2211
02:17:05,860 --> 02:17:10,750
doesn't have to bounce back and forth

2212
02:17:08,200 --> 02:17:17,829
between the two threads to write to the

2213
02:17:10,750 --> 02:17:19,718
different portions of it right so so the

2214
02:17:17,829 --> 02:17:21,099
real reason to be aligned there I

2215
02:17:19,718 --> 02:17:25,688
suspect is action

2216
02:17:21,099 --> 02:17:27,969
much more stringent than the unaligned

2217
02:17:25,689 --> 02:17:30,699
loads and stores would be it's actually

2218
02:17:27,968 --> 02:17:35,259
because you would get bad memory

2219
02:17:30,699 --> 02:17:38,800
behavior at the boundary due to false

2220
02:17:35,260 --> 02:17:41,880
sharing as the cache line bounced back

2221
02:17:38,799 --> 02:17:41,879
and forth between the cores

2222
02:18:12,030 --> 02:18:17,040
uh-uh so anyway all right that's about

2223
02:18:14,308 --> 02:18:21,329
it for today I think we've covered

2224
02:18:17,040 --> 02:18:26,910
enough when I go ahead and close down

2225
02:18:21,329 --> 02:18:28,019
the street alright everyone thanks for

2226
02:18:26,909 --> 02:18:29,519
joining me for this sort of handmade

2227
02:18:28,019 --> 02:18:31,260
share it's a pleasure coding with you as

2228
02:18:29,519 --> 02:18:32,760
always if you would like to follow along

2229
02:18:31,260 --> 02:18:34,469
the series at home you can always peer

2230
02:18:32,760 --> 02:18:36,179
to the game on handmade hero org it

2231
02:18:34,468 --> 02:18:39,089
comes to the source code so you can

2232
02:18:36,179 --> 02:18:40,500
follow along at home we also have forum

2233
02:18:39,090 --> 02:18:42,750
site and go to to ask questions the

2234
02:18:40,500 --> 02:18:44,760
patreon page and go to if you want to

2235
02:18:42,750 --> 02:18:46,920
support the video series that is if we

2236
02:18:44,760 --> 02:18:48,450
don't get the platform for I don't know

2237
02:18:46,920 --> 02:18:50,909
doing something patreon doesn't like

2238
02:18:48,450 --> 02:18:53,010
apparently it's on the table now we also

2239
02:18:50,909 --> 02:18:55,819
have a schedule bot that tweets the

2240
02:18:53,010 --> 02:18:58,559
schedule you if you want to go ahead and

2241
02:18:55,819 --> 02:19:00,209
no we're going to be live and an episode

2242
02:18:58,558 --> 02:19:03,239
guide that you can go to if you want to

2243
02:19:00,209 --> 02:19:04,529
catch up on old episodes for example if

2244
02:19:03,239 --> 02:19:06,119
you want to know about aligned loads of

2245
02:19:04,530 --> 02:19:08,550
stores and when we put those in and out

2246
02:19:06,120 --> 02:19:10,650
you can go ahead and use that it's got a

2247
02:19:08,549 --> 02:19:14,039
handy search feature too now that's

2248
02:19:10,649 --> 02:19:16,529
pretty awesome that's about it I will be

2249
02:19:14,040 --> 02:19:18,090
back next weekend to play around with

2250
02:19:16,530 --> 02:19:20,719
getting the GPU to reconstruct that

2251
02:19:18,090 --> 02:19:23,489
lighting that we send down to it and

2252
02:19:20,718 --> 02:19:25,829
then we're getting close to having some

2253
02:19:23,489 --> 02:19:28,019
real lighting we're going to have to

2254
02:19:25,829 --> 02:19:29,579
start figuring out how we can put the

2255
02:19:28,019 --> 02:19:31,380
lighting computation on the graphics

2256
02:19:29,579 --> 02:19:36,629
card that's going to be a little bit of

2257
02:19:31,379 --> 02:19:37,500
a journey but hey you know what can you

2258
02:19:36,629 --> 02:19:38,909
do

2259
02:19:37,500 --> 02:19:41,519
so we've got a couple more weeks of

2260
02:19:38,909 --> 02:19:42,899
lighting left and it's starting to get

2261
02:19:41,519 --> 02:19:44,489
kind of come together which is kind of

2262
02:19:42,899 --> 02:19:46,649
exciting so hopefully you're joining me

2263
02:19:44,489 --> 02:19:48,299
for that until then have fun programming

2264
02:19:46,649 --> 02:19:50,569
and I'll see you on the Internet take it

2265
02:19:48,299 --> 02:19:50,569
easy everybody

