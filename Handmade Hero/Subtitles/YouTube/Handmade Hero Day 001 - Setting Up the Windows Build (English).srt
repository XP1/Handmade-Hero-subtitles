1
00:00:00,000 --> 00:00:04,500
Gonna go and hit hit the start record button and I'm gonna minimize OBS here.

2
00:00:04,500 --> 00:00:09,500
And I'm going to welcome everyone to the very first episode of Handmade Hero.

3
00:00:09,500 --> 00:00:12,000
I am super excited about this project

4
00:00:12,000 --> 00:00:16,000
I was thinking that this was going to be basically me on a live programming stream

5
00:00:16,000 --> 00:00:19,500
Making a game for people to sort of learn from

6
00:00:19,500 --> 00:00:21,500
But basically that there were gonna be like five people watching

7
00:00:21,500 --> 00:00:25,500
Because I assumed that it would take a long time to generate any interest.

8
00:00:25,500 --> 00:00:29,000
But actually, the response from people has been completely overwhelming

9
00:00:29,000 --> 00:00:31,000
I was so psyched about it

10
00:00:31,000 --> 00:00:33,000
And it's been so great to see so many people here

11
00:00:33,000 --> 00:00:36,000
Even on the test stream that we did where we were just kind of practicing stuff.

12
00:00:36,500 --> 00:00:40,000
Everyone was awesome, the community was awesome, the questions were awesome.

13
00:00:40,000 --> 00:00:43,500
And, it was just fantastic. I had an absolute blast doing it.

14
00:00:43,500 --> 00:00:45,600
And so I'm really looking forward to this.

15
00:00:46,000 --> 00:00:48,000
Before we get started started

16
00:00:48,000 --> 00:00:50,000
I just wanted to say a couple things

17
00:00:50,000 --> 00:00:51,700
And I'll probably try to, you know, take a minute

18
00:00:51,700 --> 00:00:54,000
At the beginning of every stream just to repeat these for anyone

19
00:00:54,000 --> 00:00:55,500
Who's coming back

20
00:00:56,000 --> 00:00:58,000
Who hasn't necessarily seen

21
00:00:58,000 --> 00:00:59,399
The livestream before.

22
00:00:59,500 --> 00:01:02,500
Basically this is a series where we program an entire game from scratch

23
00:01:02,500 --> 00:01:04,500
With explanations of everything I'm doing.

24
00:01:05,000 --> 00:01:08,000
Now, in order to actually finish an entire game

25
00:01:08,000 --> 00:01:09,500
At some reasonable point in the future

26
00:01:09,500 --> 00:01:13,000
I cannot explain everything  in complete detail

27
00:01:13,000 --> 00:01:17,000
So I have to constantly reference back to things that I've already explained

28
00:01:17,000 --> 00:01:21,200
And, I have to trust that you're gonna be able to keep track of the things that I've explained

29
00:01:21,200 --> 00:01:23,500
And, if you don't understand them

30
00:01:23,500 --> 00:01:27,500
Ask questions, you can use the email link on handmadehero.com

31
00:01:28,000 --> 00:01:30,500
You can basically go there any time you want

32
00:01:30,500 --> 00:01:34,500
And there is a, sorry, handmadehero.org, you can go there any time you want

33
00:01:34,500 --> 00:01:37,500
And there is an Email a Question button, so you can ask there.

34
00:01:37,500 --> 00:01:40,500
You can ask on the twitch chat at the end of the stream

35
00:01:40,500 --> 00:01:43,000
There'll be a time for a Questions and Answers.

36
00:01:43,000 --> 00:01:45,750
Or you can just ask on internet forums, stuff like that

37
00:01:45,750 --> 00:01:48,500
There's been a whole community of people who've been helping out.

38
00:01:49,000 --> 00:01:49,284
So.

39
00:01:50,000 --> 00:01:53,500
I won't be able to drill down into everything,  everytime.

40
00:01:53,500 --> 00:01:55,650
I'll have to reference back to stuff that we've already done.

41
00:01:55,650 --> 00:01:57,500
So please, keep that in mind.

42
00:01:57,500 --> 00:01:59,400
It's ok if you get a little lost

43
00:01:59,400 --> 00:02:01,000
If we blow past something that

44
00:02:01,000 --> 00:02:03,000
We covered earlier on a different stream

45
00:02:03,000 --> 00:02:05,000
And you're like: What was that? It's ok.

46
00:02:05,000 --> 00:02:07,000
All of the videos will be archived.

47
00:02:07,000 --> 00:02:09,000
You can go back and watch them again.

48
00:02:09,000 --> 00:02:13,500
You can go, sort of, look and see if people in the comments have added stuff

49
00:02:13,500 --> 00:02:16,000
And we'll try to have a lot of resources available for you.

50
00:02:16,000 --> 00:02:18,000
You can also, if you preorder the game at any time

51
00:02:18,000 --> 00:02:19,500
You'll get all the source code to it.

52
00:02:19,500 --> 00:02:21,800
Every night you can download the source code, follow along

53
00:02:21,800 --> 00:02:24,000
Play around with it at home, and all that stuff.

54
00:02:24,500 --> 00:02:27,500
So hopefully there'll be plenty of resources for you.

55
00:02:28,000 --> 00:02:30,000
With that said

56
00:02:30,000 --> 00:02:32,000
I am going to get started.

57
00:02:32,000 --> 00:02:34,500
And please keep in mind as we do this

58
00:02:34,500 --> 00:02:38,000
That basically everything that I'm  going to show you here

59
00:02:38,000 --> 00:02:39,500
Is one way

60
00:02:39,500 --> 00:02:41,000
To code a game from scratch.

61
00:02:41,000 --> 00:02:43,000
It is not the only way

62
00:02:43,000 --> 00:02:44,500
And I don't want you to think

63
00:02:44,500 --> 00:02:47,500
That you have to do absolutely everything I do the way I do it.

64
00:02:47,500 --> 00:02:49,500
I'm just showing you the way that I make games

65
00:02:50,000 --> 00:02:53,500
So that you can see one complete  way of doing it and see that...

66
00:02:53,500 --> 00:02:55,500
You know, where there's nothing left out.

67
00:02:55,500 --> 00:02:58,000
But you should develop your own techniques

68
00:02:58,000 --> 00:03:01,000
And you should feel free to experiment with your own styles

69
00:03:01,000 --> 00:03:04,000
And... and try different things and see what works the best for you.

70
00:03:04,500 --> 00:03:05,699
Alright. Let's get going.

71
00:03:05,699 --> 00:03:07,500
So the first thing I wanna do

72
00:03:07,500 --> 00:03:10,000
Is I got to actually build

73
00:03:10,000 --> 00:03:11,000
Something.

74
00:03:11,000 --> 00:03:13,000
I have to get a project started.

75
00:03:13,000 --> 00:03:16,000
And as anyone who's ever actually done a game

76
00:03:16,000 --> 00:03:18,000
Or really probably any computer project knows

77
00:03:18,000 --> 00:03:21,276
Getting a project started is a bit of drudgework.

78
00:03:21,276 --> 00:03:23,042
It's really unfortunate, but it is.

79
00:03:23,043 --> 00:03:25,378
And basically what happens is

80
00:03:25,377 --> 00:03:27,709
You're going to have to create something

81
00:03:28,043 --> 00:03:31,757
That allows you to build the actual text files

82
00:03:31,757 --> 00:03:33,498
That you typed in into the source

83
00:03:33,500 --> 00:03:36,599
You're gonna have to do something that allows us to get built into executable.

84
00:03:36,611 --> 00:03:39,099
And in the intro stream we talked about the basics of that

85
00:03:39,144 --> 00:03:40,400
So if you're unfamilitar with it

86
00:03:40,400 --> 00:03:41,817
You're gonna have to go watch that to

87
00:03:41,817 --> 00:03:44,039
To sort of get you up to speed, but hopefully most people understand

88
00:03:44,038 --> 00:03:47,599
What a compiler is, what a linker is, what an executable is.

89
00:03:47,610 --> 00:03:50,296
A compiler is something that takes the source code that we typed

90
00:03:50,296 --> 00:03:53,776
And it turns it into partially, partially executable code.

91
00:03:53,776 --> 00:03:56,342
And a linker is something that gathers all that executable code

92
00:03:56,342 --> 00:03:58,475
And puts it into an executable

93
00:03:58,475 --> 00:04:01,000
Which is something that we can actually run on our computer.

94
00:04:01,055 --> 00:04:03,000
And what we did in the test stream

95
00:04:03,000 --> 00:04:05,500
Where I was sort of teaching people very, very, very basic things

96
00:04:05,500 --> 00:04:08,008
What we did in the test stream was  we used Visual Studio

97
00:04:08,008 --> 00:04:10,483
Which you can download for free, actually.

98
00:04:10,484 --> 00:04:12,778
This is Visual Studio 2013 Community Edition.

99
00:04:13,449 --> 00:04:15,244
And that's what we'll be using for compiling

100
00:04:15,245 --> 00:04:17,199
And running our code

101
00:04:17,199 --> 00:04:20,000
You can actually go get it at visualstudio.com

102
00:04:20,000 --> 00:04:23,230
Because Microsoft has now made it free for small teams or personal use

103
00:04:23,230 --> 00:04:26,054
Which you are if you're one  person at home, following along.

104
00:04:26,053 --> 00:04:29,275
You can download it here  and install this exact same thing.

105
00:04:29,276 --> 00:04:30,622
It doesn't cost any money.

106
00:04:30,622 --> 00:04:32,028
You can use it for free.

107
00:04:32,028 --> 00:04:33,607
So this tool right here

108
00:04:33,607 --> 00:04:37,339
Is what we're gonna be using to debug and compile.

109
00:04:39,074 --> 00:04:40,834
And what we did in the test stream

110
00:04:40,834 --> 00:04:43,079
Is we actually used this to make our project.

111
00:04:43,249 --> 00:04:45,237
But I never do that in real game development

112
00:04:45,237 --> 00:04:47,084
And most real game developers don't either

113
00:04:47,084 --> 00:04:49,447
Although, some certainly do, so if you want to

114
00:04:49,447 --> 00:04:50,918
You can certainly try to do that.

115
00:04:50,918 --> 00:04:52,679
The way that I do things

116
00:04:52,678 --> 00:04:54,764
Is I actually don't edit in here

117
00:04:54,764 --> 00:04:56,404
And I don't build from in here.

118
00:04:56,404 --> 00:04:58,479
I only run and debug from in here.

119
00:04:58,480 --> 00:05:01,301
I basically use this tool as my debugger

120
00:05:01,300 --> 00:05:04,870
And I access its compilation functions

121
00:05:04,870 --> 00:05:06,040
From the command line.

122
00:05:06,040 --> 00:05:08,790
Now we didn't cover the command line in the intro stream.

123
00:05:08,790 --> 00:05:11,129
So I'm gonna talk a little bit about that here.

124
00:05:11,129 --> 00:05:15,024
Basically what happens is, on your machine, if you're on Windows...

125
00:05:15,024 --> 00:05:17,014
If you're on Linux you already know what a command line is

126
00:05:17,014 --> 00:05:19,884
Because you don't, you don't use Linux without a command line.

127
00:05:19,884 --> 00:05:22,464
But, if you're on Windows, even if you're a programmer

128
00:05:22,464 --> 00:05:24,780
It's possible you may never have even used the command line.

129
00:05:24,781 --> 00:05:27,542
It's possible these days, that can be the case.

130
00:05:27,541 --> 00:05:29,977
So if you go into your All Programs

131
00:05:29,978 --> 00:05:31,860
And you're looking under Accessories

132
00:05:31,860 --> 00:05:33,752
There is a thing here called Command Prompt.

133
00:05:33,752 --> 00:05:37,104
And when you click on it you get this little text window.

134
00:05:37,105 --> 00:05:40,132
And all this text window is, is it's something that allows you to

135
00:05:40,132 --> 00:05:43,533
Basically have a dialog with your computer the old-fashioned way.

136
00:05:43,533 --> 00:05:46,463
You can type a command in, you can hit return

137
00:05:46,463 --> 00:05:48,658
And it spits something back out to you.

138
00:05:48,658 --> 00:05:50,865
Now this is super tiny 'cause the  fonts aren't set.

139
00:05:50,865 --> 00:05:52,698
I have my own over here that I set the fonts to.

140
00:05:52,697 --> 00:05:56,363
But I just wanted to show you the one that comes up when you launch it by default.

141
00:05:56,363 --> 00:05:58,000
And basically we're gonna be using this

142
00:05:58,000 --> 00:06:01,223
To sort of show you how to execute some commands

143
00:06:01,223 --> 00:06:04,228
And I'll show you why you wanna execute commands through it, in a second aswell.

144
00:06:04,298 --> 00:06:06,806
But, if you're like me

145
00:06:06,807 --> 00:06:08,761
You wanna customize that a little bit.

146
00:06:08,761 --> 00:06:12,234
If you right-click on a Command Prompt shortcut

147
00:06:12,233 --> 00:06:14,645
And, I assume you all know how to do shortcuts, but just in case

148
00:06:14,646 --> 00:06:17,444
You can, you know, Control-click and drag this out to the desktop.

149
00:06:17,444 --> 00:06:19,723
You can make a shortcut for it, or anything like that.

150
00:06:19,723 --> 00:06:22,919
If you right-click on a shortcut to a Command Prompt and hit Properties

151
00:06:22,918 --> 00:06:26,379
You can go in here and you can customize a bunch of stuff

152
00:06:26,379 --> 00:06:28,875
Like the fonts, where it is on the screen.

153
00:06:28,875 --> 00:06:31,721
I won't belabor this because it's pretty self-explanatory

154
00:06:31,721 --> 00:06:33,988
But you can basically customize it, and I did that.

155
00:06:34,266 --> 00:06:38,343
I think during the pre, sort of the, the lead-up to the show

156
00:06:38,343 --> 00:06:40,151
People were saying the fonts were a little too dark.

157
00:06:40,151 --> 00:06:43,045
So I'm gonna go ahead and actually just  make them a little brighter in this one.

158
00:06:43,045 --> 00:06:47,158
We made them brighter in Visual Studio and in Emacs and people seemed to think that was good

159
00:06:47,158 --> 00:06:50,992
So I'm just gonna brighten those up a little bit there, and hit OK.

160
00:06:50,992 --> 00:06:54,237
Once you've got have that customized, when you double-click on it, you'll get

161
00:06:54,237 --> 00:06:57,046
Precisely the, you know, precisely the stuff that you said

162
00:06:57,045 --> 00:06:59,313
And then the window will be where you want it, and you can use that.

163
00:06:59,314 --> 00:07:02,701
And like I said I made the fonts a little bigger so they're easier to read, on the stream.

164
00:07:02,701 --> 00:07:04,269
So.

165
00:07:04,716 --> 00:07:07,273
First things first.

166
00:07:08,250 --> 00:07:11,649
What I like to do, and this is unusual.

167
00:07:11,649 --> 00:07:13,627
I don't know many people who do this.

168
00:07:13,627 --> 00:07:16,353
I've heard people tell me that it is

169
00:07:16,353 --> 00:07:21,720
If you used to use an Amiga, the computer from the late eighties.

170
00:07:21,720 --> 00:07:24,288
If you used to use an Amiga computer, then you do this.

171
00:07:24,288 --> 00:07:27,532
And, I don't know if that's true, but that's what I've heard.

172
00:07:27,531 --> 00:07:31,041
I did use an Amiga for a long time, that was one of my favorite computers.

173
00:07:31,041 --> 00:07:33,000
Probably my favorite computer of all time.

174
00:07:33,000 --> 00:07:34,827
What I like to do

175
00:07:34,827 --> 00:07:38,855
Is I like to use a command called subst

176
00:07:39,060 --> 00:07:42,003
And I'll actually go ahead and delete

177
00:07:42,004 --> 00:07:45,959
The subst that I actually already set up in this machine, just so you can see

178
00:07:45,959 --> 00:07:48,612
How it actually works, or at least I'll try to.

179
00:07:48,612 --> 00:07:50,421
Let's see if I can get that to work.

180
00:07:50,420 --> 00:07:51,421
Yeah.

181
00:07:51,422 --> 00:07:53,605
So basically what I like to do is

182
00:07:53,605 --> 00:07:56,258
On Windows, you know, you've got these drives, right?

183
00:07:56,257 --> 00:07:59,368
I've got, you know, I've got drives in this machine that are actually drives

184
00:07:59,369 --> 00:08:02,155
I've got the C drive, I've got the D drive, that's a, you know, whatever.

185
00:08:02,154 --> 00:08:05,096
And you can quickly always refer to those in the File Explorer, whatever

186
00:08:05,096 --> 00:08:07,231
By just hitting, you know, c: or whatever

187
00:08:07,232 --> 00:08:08,474
d:

188
00:08:08,473 --> 00:08:10,824
What I like to do is I like to take

189
00:08:10,824 --> 00:08:14,334
The, the place on my drive that I'm gonna be doing my development

190
00:08:14,334 --> 00:08:18,747
And I like to subst a fake drive letter, so that it points there.

191
00:08:18,747 --> 00:08:21,798
So this command, subst, you can type it in on the command line, subst

192
00:08:21,798 --> 00:08:23,824
It doesn't do anything if you just type it by itself.

193
00:08:23,824 --> 00:08:26,646
But if you type subst with a, like /?

194
00:08:26,646 --> 00:08:30,048
Right? That's the universal symbol for,  well you know what?

195
00:08:30,048 --> 00:08:31,833
Let me go back to the big font version.

196
00:08:31,833 --> 00:08:35,064
If you type subst /? you'll get help on it.

197
00:08:35,365 --> 00:08:38,947
Basically all it is, is a command  that allows you to type subst

198
00:08:38,947 --> 00:08:41,961
And then a drive letter that you want to make.

199
00:08:41,961 --> 00:08:44,711
Basically a fake drive, and I'm gonna use w:

200
00:08:44,711 --> 00:08:47,956
And then give a path on the actual hard drive

201
00:08:47,956 --> 00:08:51,826
Where you want that drive to essentially, exist.

202
00:08:51,826 --> 00:08:56,072
So I made a directory on the J drive, that's an actual drive in this machine

203
00:08:56,072 --> 00:09:00,485
And I made it, called, work, it's what I made it.

204
00:09:00,485 --> 00:09:03,657
And so I'm gonna subst w: to be work.

205
00:09:03,657 --> 00:09:07,661
And now, instead of having to always go to j: and cd to work.

206
00:09:07,660 --> 00:09:10,771
Now that's, that's basically, cd is probably

207
00:09:10,772 --> 00:09:12,979
A new command for people who don't  know the command line.

208
00:09:12,979 --> 00:09:14,993
Basically this is how you move around directories.

209
00:09:14,993 --> 00:09:18,659
So if you remember, up here

210
00:09:18,658 --> 00:09:21,975
You know, when you're working in like a file explorer.

211
00:09:21,975 --> 00:09:25,026
If you look at this thing, this is a path to a file, right?

212
00:09:25,025 --> 00:09:28,944
If you want to move around on an actual command line

213
00:09:28,945 --> 00:09:30,971
You can use the cd command to do that.

214
00:09:30,971 --> 00:09:33,311
So you know, if you start out somewhere like I started on w:

215
00:09:33,311 --> 00:09:36,216
I want to go into the handmade directory, now I'm in the handmade directory

216
00:09:36,216 --> 00:09:37,736
And it always prints out where it is here.

217
00:09:37,736 --> 00:09:41,040
Again that's not really, you should be able  to learn this separate from this stream.

218
00:09:41,041 --> 00:09:43,597
That's stuff you can look up, just how to basically use a command line

219
00:09:43,596 --> 00:09:45,394
So I'm not gonna teach you a ton of stuff.

220
00:09:45,394 --> 00:09:47,443
cd .. goes back and so on.

221
00:09:47,443 --> 00:09:50,675
You should just go learn those if you're totally unfamiliar with command lines.

222
00:09:51,543 --> 00:09:55,764
Anyway, I like to subst a drive to it just  because it's really, makes it more convenient.

223
00:09:55,764 --> 00:09:56,982
It's less typing for me

224
00:09:56,982 --> 00:10:00,841
And it's so that if I ever need to hardcode debug paths into something

225
00:10:00,841 --> 00:10:03,024
It makes them so they're not quite so hardcoded.

226
00:10:03,024 --> 00:10:05,846
I can refer to w: something and then if in the future

227
00:10:05,846 --> 00:10:10,284
I move the drive or, you know, I move where it  actually is on the physical hard drive around

228
00:10:10,284 --> 00:10:13,323
It's no big deal 'cause I can just subst the drive to the new location, right?

229
00:10:13,323 --> 00:10:14,637
So it's totally good.

230
00:10:15,868 --> 00:10:17,363
No big deal.

231
00:10:17,798 --> 00:10:18,942
Alright.

232
00:10:18,942 --> 00:10:22,222
So anyway, I made a directory here, it's the handmade directory.

233
00:10:22,222 --> 00:10:25,237
And what I did, and I'll actually show this in Explorer too

234
00:10:25,238 --> 00:10:27,300
For those of you just who are sort of warming up

235
00:10:27,299 --> 00:10:29,832
To the idea of having command line.

236
00:10:29,832 --> 00:10:33,004
You can see that I've actually, if  you actually go into the Explorer

237
00:10:33,004 --> 00:10:38,262
Um, in the j:&lt;b&gt;\&lt;/b&gt;work&lt;b&gt;\&lt;/b&gt;handmade directory

238
00:10:38,261 --> 00:10:42,530
You can see that the directory listing in here is the same as the directory listing in here.

239
00:10:42,530 --> 00:10:45,931
And dir is what gets me that, right? No big deal.

240
00:10:45,932 --> 00:10:48,018
Again, I'm really not gonna spend a lot of time teaching this stuff

241
00:10:48,018 --> 00:10:51,648
Becuase hopefully this is stuff you can just go read a basic tutorial webpage on.

242
00:10:51,683 --> 00:10:53,516
And so I don't want to spend a lot of time in the stream right now.

243
00:10:53,517 --> 00:10:55,989
But I'll just mention the things I do as I go, so you know.

244
00:10:56,484 --> 00:10:59,113
And basically I made a misc directory here

245
00:10:59,113 --> 00:11:00,849
And the reason I made a misc directory here

246
00:11:00,849 --> 00:11:04,021
Was because I decided to put my .emacs config file in there.

247
00:11:04,020 --> 00:11:06,818
'Cause I'm gonna be using Emacs to edit on the stream

248
00:11:06,818 --> 00:11:09,856
And I figured that anyone who for some reason wants to edit in Emacs

249
00:11:09,856 --> 00:11:15,875
Along with me, instead of editing it in some text editor that they find fun, and nice

250
00:11:15,875 --> 00:11:17,190
They will be able to do that.

251
00:11:17,190 --> 00:11:21,326
So anytime you actually go and, if you download the Handmade Hero source code

252
00:11:21,326 --> 00:11:24,183
It'll have that .emacs file in there in case  you want to just use

253
00:11:24,183 --> 00:11:26,462
The same setup that I'm using.

254
00:11:26,462 --> 00:11:30,381
But other than that you will notice that the directory for handmade is empty.

255
00:11:30,381 --> 00:11:33,348
That is because we are gonna be doing absolutely everything from scratch

256
00:11:33,349 --> 00:11:34,868
So there's nothing in there.

257
00:11:34,868 --> 00:11:38,426
And absolutely everything that it takes to run this game

258
00:11:38,426 --> 00:11:40,440
Will be written in this directory

259
00:11:40,440 --> 00:11:44,275
So it will be full of good code by the end of the series.

260
00:11:46,445 --> 00:11:47,482
Now.

261
00:11:48,725 --> 00:11:52,608
The first thing we're going to do is we are going to launch Emacs.

262
00:11:52,607 --> 00:11:56,610
And we are going to make a simple single cpp file, single source file

263
00:11:56,610 --> 00:12:00,024
That we can use to actually get our build going.

264
00:12:00,024 --> 00:12:02,508
And like I said, this is going to be the drudgework.

265
00:12:02,508 --> 00:12:06,451
In fact tonight will probably be the most drudgeworky night.

266
00:12:06,451 --> 00:12:09,889
It's too bad to start off the series with the drudgework, but hey

267
00:12:09,889 --> 00:12:12,697
This is where projects actually start, there's nothing you can do about it.

268
00:12:12,697 --> 00:12:16,389
So, I am going to go ahead in here

269
00:12:16,389 --> 00:12:19,801
And, inside Emacs, you know, there's all kinds of stuff I can do.

270
00:12:19,801 --> 00:12:22,310
I'm not gonna explain all of these things because, again

271
00:12:22,309 --> 00:12:26,035
I don't even necessarily encourage people to use Emacs, it's just the editor I'm fastest with.

272
00:12:26,035 --> 00:12:29,460
So I think you should all use the text editor you're fastest with

273
00:12:29,461 --> 00:12:30,485
But hey

274
00:12:30,485 --> 00:12:33,163
If you really wanna follow me, you can follow me and use that .emacs file.

275
00:12:33,163 --> 00:12:34,936
So I'm gonna make a directory in here

276
00:12:34,936 --> 00:12:36,588
I'm gonna make a directory called code

277
00:12:36,587 --> 00:12:38,879
And inside that directory called code

278
00:12:38,879 --> 00:12:42,979
I am going to make a handmade...

279
00:12:42,979 --> 00:12:49,033
Actually I'm gonna call it win32_handmade.cpp, right?

280
00:12:49,033 --> 00:12:53,193
Now I have Emacs programmed to insert a little header into each of these.

281
00:12:53,193 --> 00:12:56,400
And what this header actually is, is this is sort of

282
00:12:56,400 --> 00:12:59,620
A little bit anachronistic these days, but I'll tell you what it is.

283
00:12:59,620 --> 00:13:02,635
Basically, you know, inside a comment

284
00:13:02,635 --> 00:13:05,120
What it basically does is it says, hey

285
00:13:05,120 --> 00:13:07,580
I am going to

286
00:13:07,580 --> 00:13:10,185
Actually put little markers in

287
00:13:10,184 --> 00:13:13,766
That some external tool could come along later

288
00:13:13,767 --> 00:13:18,132
And fill in the filename, the date of the file

289
00:13:18,131 --> 00:13:20,748
And the revision it was checked into source code control.

290
00:13:20,749 --> 00:13:23,389
So all of those are actually totally unnecessary

291
00:13:23,389 --> 00:13:26,102
It's just a comment, it has nothing to do with the code, obviously.

292
00:13:26,102 --> 00:13:29,001
But it basically just puts in some boilerplate

293
00:13:29,022 --> 00:13:32,037
Automatically for me any time I create  a source file

294
00:13:32,037 --> 00:13:35,280
And this allows it to play nicely with people's revision control systems

295
00:13:35,279 --> 00:13:36,775
That do this kind of stuff.

296
00:13:36,775 --> 00:13:40,115
So if you happen to check the source code into

297
00:13:40,115 --> 00:13:42,226
A revision control system that you prefer

298
00:13:42,226 --> 00:13:45,144
And it has keyword replacement, you can turn that on

299
00:13:45,144 --> 00:13:48,328
And all the files will get marked cleanly, so that you can see them.

300
00:13:48,750 --> 00:13:49,571
Now.

301
00:13:50,017 --> 00:13:52,200
I'm gonna take one quick second

302
00:13:52,200 --> 00:13:54,889
'Cause I think we didn't do this at the beginning of the stream

303
00:13:54,889 --> 00:13:57,034
I am going to see if I can

304
00:13:57,034 --> 00:13:59,966
Brighten the comments a little bit.

305
00:13:59,966 --> 00:14:03,186
Because I know that people were saying they were having trouble reading some of them.

306
00:14:03,186 --> 00:14:06,104
And I think it will only take a  second here to do that.

307
00:14:06,104 --> 00:14:09,306
So, list-colors-display, let's take a look.

308
00:14:09,306 --> 00:14:13,195
Those of you who were with me at the beginning  of the stream I greatly appreciate your help

309
00:14:13,195 --> 00:14:15,824
Figuring out exactly what the color should be for everything.

310
00:14:15,823 --> 00:14:18,006
So I feel like one of those grays looks good

311
00:14:18,006 --> 00:14:21,684
Maybe a gray50, let's say

312
00:14:21,684 --> 00:14:23,408
gray50 sounds good to me.

313
00:14:23,408 --> 00:14:27,485
We'll try that and we'll see, gray50.

314
00:14:28,450 --> 00:14:30,693
And we will see if that

315
00:14:32,056 --> 00:14:34,648
If that makes it a little bit easier to see, ok.

316
00:14:36,120 --> 00:14:37,748
There we go, so

317
00:14:37,783 --> 00:14:41,413
What I'm going to do in this file is absolutely nothing.

318
00:14:41,413 --> 00:14:45,525
I am just going to insert the entry point for Windows.

319
00:14:45,525 --> 00:14:48,419
Now, those of you who actually were in the intro stream

320
00:14:48,419 --> 00:14:50,457
We covered this a little bit, but basically

321
00:14:50,457 --> 00:14:52,870
What you wanna do whenever you're  programming on windows.

322
00:14:52,870 --> 00:14:56,488
Is you're going to need to use something called MSDN.

323
00:14:56,488 --> 00:15:00,467
So, it is basically the documentation for everything that is on Windows

324
00:15:00,466 --> 00:15:02,480
So if I search for WinMain

325
00:15:02,480 --> 00:15:04,567
Which is the entry point for Windows

326
00:15:04,567 --> 00:15:07,943
You will see that the first hit is msdn.microsoft.com

327
00:15:07,943 --> 00:15:10,235
And that is the documentation for Windows.

328
00:15:10,235 --> 00:15:13,600
Now you may ask me, how do you  know how to search for WinMain?

329
00:15:13,600 --> 00:15:15,783
How do you know what to type  in there when you search?

330
00:15:15,783 --> 00:15:19,461
Well the answer is, WinMain you probably could've figured out.

331
00:15:19,461 --> 00:15:22,596
Because you could go look on some  tutorials for Windows or that sort of stuff.

332
00:15:22,596 --> 00:15:25,346
So that's not that interesting  of a question to answer, but

333
00:15:25,346 --> 00:15:29,288
What is interesting is, for the rest of  programming in Windows and all the minutia

334
00:15:29,288 --> 00:15:30,721
How do you know what to search for?

335
00:15:30,721 --> 00:15:33,437
Yeah there's MSDN and maybe there's a table of contents, but

336
00:15:33,437 --> 00:15:36,609
Trust me, it's huge and it's very hard to find your way around.

337
00:15:36,609 --> 00:15:40,191
The answer is: That's one of the  reasons I'm doing this series.

338
00:15:40,191 --> 00:15:42,747
I don't think there is any way you can know what to search for.

339
00:15:42,746 --> 00:15:45,930
The whole point of this series is basically to give you all those things

340
00:15:45,931 --> 00:15:48,114
That you should search for, to show you

341
00:15:48,114 --> 00:15:50,393
How to make stuff, and I'll go through it quickly

342
00:15:50,393 --> 00:15:53,335
So like I said I can't sit here and explain every last little thing

343
00:15:53,335 --> 00:15:57,013
But, this whole series is supposed to be  that backbone where you can go

344
00:15:57,013 --> 00:16:00,040
How did I know I was supposed to search for this crazy thing in Windows?

345
00:16:00,039 --> 00:16:01,414
It's like, you weren't.

346
00:16:01,414 --> 00:16:05,057
It's just a lot of bad trial and error and years of experience in the industry

347
00:16:05,057 --> 00:16:08,892
That exposes you to these things, so that you know to search for such and such.

348
00:16:08,892 --> 00:16:12,992
And so this series is supposed to actually be that backtone that tells you what to search in.

349
00:16:12,991 --> 00:16:16,452
But, just because I'm gonna show you all those things

350
00:16:16,452 --> 00:16:18,731
It doesn't mean you shouldn't learn  how to use MSDN.

351
00:16:18,731 --> 00:16:22,216
You really need to learn how to use this website, to read these pages

352
00:16:22,216 --> 00:16:23,893
And to understand what they say

353
00:16:23,893 --> 00:16:26,944
Because it's how you're going to be able to fill in all that knowledge.

354
00:16:26,943 --> 00:16:29,572
Because like I said, I can't go into every last little detail

355
00:16:29,572 --> 00:16:31,792
On what every last thing is, I can only give you

356
00:16:31,792 --> 00:16:35,120
You know, a good explanation of each part and then you're gonna have to go, kinda

357
00:16:35,120 --> 00:16:38,002
You know, do more exploring on your own to fully understand

358
00:16:38,003 --> 00:16:40,463
Absolutely everything that I do

359
00:16:40,462 --> 00:16:43,562
If I don't have, you know, if I

360
00:16:43,562 --> 00:16:45,709
Haven't sort of being able to kind of go into like:

361
00:16:45,708 --> 00:16:49,603
Here's why there's an HINSTANCE and here's what the kernel did in 1994, and stuff

362
00:16:49,604 --> 00:16:51,919
You kind of, you know, the stream would go on forever.

363
00:16:51,918 --> 00:16:52,967
So.

364
00:16:53,317 --> 00:16:56,538
This is the entry point  that Windows will be looking for.

365
00:16:56,538 --> 00:17:00,432
And technically, it's actually the entry point that the C Runtime Library

366
00:17:00,432 --> 00:17:03,302
That links with our program will be entering

367
00:17:03,302 --> 00:17:05,305
But we'll see that in just one second.

368
00:17:06,760 --> 00:17:09,261
For now we have to concentrate  on getting our build going

369
00:17:09,261 --> 00:17:12,107
So what I'm gonna do, is I'm gonna cut this out here

370
00:17:12,107 --> 00:17:14,633
And I paste that into our program.

371
00:17:14,633 --> 00:17:17,295
Now what we wanna do, and these _In_s are little markups...

372
00:17:17,295 --> 00:17:20,026
I don't know why the leave them in here, they're kind of annoying actually.

373
00:17:20,026 --> 00:17:23,159
These _In_s are little markups, that you don't actually want to have in code.

374
00:17:23,159 --> 00:17:24,835
They're not actually C code really.

375
00:17:24,835 --> 00:17:26,876
They are basically just something

376
00:17:26,876 --> 00:17:31,157
That lets you know that the parameters are being passed in to you

377
00:17:31,157 --> 00:17:33,165
As opposed... or into the function  whatever the function is.

378
00:17:33,165 --> 00:17:36,653
As opposed to _Out_ parameters which come back out to you.

379
00:17:37,021 --> 00:17:37,778
So.

380
00:17:37,778 --> 00:17:41,313
I am going to include windows.h for now.

381
00:17:41,313 --> 00:17:44,412
Which is the header file on Windows

382
00:17:44,412 --> 00:17:47,556
That has all of the definitions, well

383
00:17:47,556 --> 00:17:49,953
It's not actually all, many of  the definitions

384
00:17:49,953 --> 00:17:53,178
That are functions that we will need to call

385
00:17:53,179 --> 00:17:54,923
In order to get our job done.

386
00:17:54,923 --> 00:17:57,700
To actually get us up and running on Windows.

387
00:17:57,700 --> 00:17:59,663
And again, if you don't know what some of these things are

388
00:17:59,663 --> 00:18:02,519
I highly recommend you go watch  the intro stream that we did

389
00:18:02,519 --> 00:18:05,904
The test stream. I'm kind of assuming that people can sort of read C code.

390
00:18:05,904 --> 00:18:08,532
And if they can't read C code, definitely go back

391
00:18:08,532 --> 00:18:11,803
And watch that intro stream because it will teach you how to read

392
00:18:11,804 --> 00:18:14,753
These things, so that you won't be confused by that.

393
00:18:14,752 --> 00:18:15,636
So.

394
00:18:17,954 --> 00:18:19,928
And it's all, I should also say...

395
00:18:20,652 --> 00:18:23,417
If you go to handmadehero.org

396
00:18:23,416 --> 00:18:25,080
It's on this Archive button

397
00:18:25,080 --> 00:18:27,742
This Archive button right here has all the stuff, Intro to C on Windows

398
00:18:27,742 --> 00:18:28,913
That sort of stuff, so

399
00:18:28,913 --> 00:18:31,070
If you're totally new to programming and totally new to C

400
00:18:31,070 --> 00:18:33,572
You definitely want to start there.  But assuming that you know what this stuff is

401
00:18:33,573 --> 00:18:37,016
And can read C reasonably ok,  or at least a little bit

402
00:18:37,016 --> 00:18:39,816
Basically what we're doing in here is we're including a header file

403
00:18:39,816 --> 00:18:43,499
And that's just a bunch of definitions of functions we can call and types we can use

404
00:18:43,499 --> 00:18:46,115
That Windows wants us to use to  communicate with us.

405
00:18:46,115 --> 00:18:49,110
And this is going to be an entry point where Windows will pass us

406
00:18:49,111 --> 00:18:50,786
A handle to our executable

407
00:18:50,786 --> 00:18:53,517
This hPrevInstance is not something we actually need to use

408
00:18:53,517 --> 00:18:55,020
It's sort of legacy at this point.

409
00:18:55,020 --> 00:18:57,729
Our command line, the command line that got set

410
00:18:57,729 --> 00:19:00,184
When we ran the program, and nCmdShow

411
00:19:00,184 --> 00:19:03,328
Which I'll say what it again is because it's so darn funny.

412
00:19:03,328 --> 00:19:06,346
I said what it is on the intro stream but I'm gonna say it again.

413
00:19:06,346 --> 00:19:09,812
When you actually look at an executable, so

414
00:19:09,813 --> 00:19:12,372
For example if I go out here to

415
00:19:12,739 --> 00:19:15,125
To one of these guys and I hit Properties

416
00:19:15,125 --> 00:19:17,167
You see this little Run dialog box?

417
00:19:17,167 --> 00:19:20,599
It's like Run: and it's got this dropdown, Normal window, Minimized, Maximized.

418
00:19:20,599 --> 00:19:22,263
Well, whatever that gets set to

419
00:19:22,263 --> 00:19:24,948
When Windows calls into us and starts up our code

420
00:19:24,949 --> 00:19:27,301
It's gonna be here, it's that int nCmdShow.

421
00:19:27,300 --> 00:19:29,928
Like it was so important they decided to pass it to you.

422
00:19:29,929 --> 00:19:32,527
So yeah, there you go, anyway

423
00:19:33,067 --> 00:19:36,683
So I'm not gonna do anything here other than return 0 for now.

424
00:19:36,683 --> 00:19:39,186
So I'm just gonna leave this as a stub

425
00:19:39,186 --> 00:19:41,587
We're not gonna do any code, because what we need to do

426
00:19:41,587 --> 00:19:44,764
Is we need to get this building and executing as it is.

427
00:19:44,765 --> 00:19:46,859
Now here's how I like to do builds.

428
00:19:47,247 --> 00:19:50,659
And this is going to shock and horrify

429
00:19:50,659 --> 00:19:53,530
Absolutely everyone out there, and I apologize for that

430
00:19:53,529 --> 00:19:55,614
But you know what? It's how I build stuff.

431
00:19:55,614 --> 00:19:57,361
It's how I build all my stuff these days.

432
00:20:00,057 --> 00:20:02,682
And I'm showing you how I program games, so that's...

433
00:20:02,682 --> 00:20:04,705
That's where it's at.

434
00:20:04,705 --> 00:20:05,767
Here's how I do it.

435
00:20:06,728 --> 00:20:10,692
In the directory, the root directory of the code

436
00:20:10,692 --> 00:20:14,380
For the project, basically wherever I'm going to be doing stuff

437
00:20:15,115 --> 00:20:18,721
I make what is called a build.bat file

438
00:20:18,721 --> 00:20:21,806
And what a bat file is, and the reson that I was talking to you guys

439
00:20:21,806 --> 00:20:23,348
About the command line, which is this thing

440
00:20:23,348 --> 00:20:25,125
Where you can type in commands that do stuff

441
00:20:25,125 --> 00:20:26,617
And I can get printouts back.

442
00:20:27,403 --> 00:20:29,642
A bat file is basically just a script.

443
00:20:29,642 --> 00:20:32,430
It's a script of things that the command line should do.

444
00:20:32,430 --> 00:20:33,432
That's it.

445
00:20:33,432 --> 00:20:36,047
And so what I typically do nowadays

446
00:20:36,047 --> 00:20:39,622
Is I don't actually bother using a makesystem or anything.

447
00:20:39,622 --> 00:20:41,236
What other programmers do

448
00:20:41,236 --> 00:20:43,862
Is they typically have something called a makesystem.

449
00:20:43,862 --> 00:20:47,058
So basically, like for example GNU Make

450
00:20:47,058 --> 00:20:49,071
Would be an example of an original one.

451
00:20:49,071 --> 00:20:52,707
They use things called Ninja, for example.

452
00:20:52,708 --> 00:20:53,576
Build system.

453
00:20:53,576 --> 00:20:56,038
I don't know how to actually search for that

454
00:20:56,038 --> 00:20:57,642
'Cause there are real ninjas in the world.

455
00:20:57,642 --> 00:20:58,837
There you go.

456
00:20:58,837 --> 00:21:01,238
A small build system with a focus on speed.

457
00:21:01,238 --> 00:21:02,158
They use that.

458
00:21:02,157 --> 00:21:04,465
They use something called CMake.

459
00:21:04,465 --> 00:21:06,346
A lot of these things.

460
00:21:06,346 --> 00:21:09,717
People love their build tools, They love their build tools.

461
00:21:09,717 --> 00:21:12,761
They just like to have build tools on top of build tools

462
00:21:12,760 --> 00:21:15,437
And build tools that launch scripts that run other build tools

463
00:21:15,438 --> 00:21:17,153
And build tools for analyzing  their build tools

464
00:21:17,153 --> 00:21:20,943
And build tools for optimizing the build tools that optimize their build tools.

465
00:21:20,943 --> 00:21:21,730
They love it.

466
00:21:21,976 --> 00:21:22,956
I don't love it

467
00:21:22,955 --> 00:21:25,775
'Cause usually what I find is I spend  all my time screwing with the build tools.

468
00:21:25,776 --> 00:21:26,930
Just trying to get stuff to build.

469
00:21:26,930 --> 00:21:29,115
So I just said screw it, there's no more build tools.

470
00:21:29,115 --> 00:21:31,414
It's a batch file.  There's just a batch file

471
00:21:31,414 --> 00:21:32,476
That's all there is.

472
00:21:32,477 --> 00:21:35,338
And the batch file, compiles the code.

473
00:21:35,337 --> 00:21:38,473
Compiles all the code, every time.

474
00:21:39,352 --> 00:21:42,080
And the reason that's gonna shock and horrify a lot of people is 'cause they're gonna be like:

475
00:21:42,079 --> 00:21:45,675
Oh. My. God.  You compile all the code all the time?

476
00:21:45,675 --> 00:21:47,861
The whole point of a makefile

477
00:21:47,862 --> 00:21:50,344
Is that you only compile the code that changed.

478
00:21:50,344 --> 00:21:53,807
And that's what a lot of those utilities do, they try to optimize things

479
00:21:53,807 --> 00:21:57,790
So that they only do the minimal amount of work necessary to rebuild the project.

480
00:21:57,790 --> 00:22:00,395
And when projects get very large, that can get really slow.

481
00:22:00,886 --> 00:22:02,971
But I have found that actually

482
00:22:02,971 --> 00:22:04,738
If you just code sanely

483
00:22:04,738 --> 00:22:07,333
I now compile very large programs

484
00:22:07,333 --> 00:22:10,367
Certainly, larger...

485
00:22:10,366 --> 00:22:13,605
Considerably larger than what we would take to make a good

486
00:22:13,605 --> 00:22:16,413
Full, professional-quality game on this stream.

487
00:22:16,413 --> 00:22:18,968
Much larger, by just using a batch file

488
00:22:18,968 --> 00:22:20,848
And it's only a couple of seconds.

489
00:22:20,847 --> 00:22:25,260
So I think the time has come for people to maybe start re-thinking the way builds work

490
00:22:25,260 --> 00:22:28,437
But, you know, again, like I said, just me.

491
00:22:28,438 --> 00:22:31,605
So what we're gonna do here is we're  gonna start with a line that's @echo off

492
00:22:31,605 --> 00:22:33,626
That is nothing other than

493
00:22:33,626 --> 00:22:35,884
Basically, echo off is a command that says

494
00:22:35,884 --> 00:22:38,714
Don't print the things in this batch file as you do them.

495
00:22:38,714 --> 00:22:41,115
Don't show me every line

496
00:22:41,115 --> 00:22:43,046
That you're about to run when you run it.

497
00:22:43,046 --> 00:22:45,088
And this little @ symbol here

498
00:22:45,088 --> 00:22:48,337
Is basically a thing that says don't echo this particular line.

499
00:22:48,337 --> 00:22:50,216
Because, basically what will happen is

500
00:22:50,217 --> 00:22:52,567
You know, let's say I save that here.

501
00:22:52,567 --> 00:22:54,140
So I got that build.bat

502
00:22:54,140 --> 00:22:57,163
So I go into by code directory and I dir it and the build.bat

503
00:22:57,163 --> 00:22:59,298
You can see it there, it's right here.

504
00:22:59,298 --> 00:23:01,829
And basically I run that build.bat file

505
00:23:01,829 --> 00:23:04,189
And you can see it prints out the line echo off.

506
00:23:04,190 --> 00:23:07,245
So the line that I was trying to use to stop it from

507
00:23:07,244 --> 00:23:09,729
Putting lines out to the console when it did things

508
00:23:09,730 --> 00:23:11,269
It's actually itself echoing.

509
00:23:11,269 --> 00:23:14,848
So the @ is basically a thing that says don't echo that line either.

510
00:23:14,848 --> 00:23:18,234
Because you have to, it hasn't turned off yet, so that's the way

511
00:23:18,234 --> 00:23:19,647
That you do it, yeah.

512
00:23:19,647 --> 00:23:23,010
Windows batch files ladies and gentleman, they're kind of amazing.

513
00:23:23,010 --> 00:23:25,451
And so then the next thing that I need to do

514
00:23:25,451 --> 00:23:27,754
Is I need to compile this program.

515
00:23:27,753 --> 00:23:30,637
And the way you compile programs is you use

516
00:23:30,637 --> 00:23:33,682
Basically, the Microsoft compiler is called cl.

517
00:23:33,682 --> 00:23:35,038
And if you type it in

518
00:23:35,038 --> 00:23:38,584
What you'll get, even after you've installed Visual Studio 2013

519
00:23:38,584 --> 00:23:40,499
Is you'll get this note here

520
00:23:40,499 --> 00:23:42,778
It's like 'cl' is not recognized

521
00:23:42,778 --> 00:23:46,461
As an internal or external command, operable program or batch file.

522
00:23:46,461 --> 00:23:48,547
And the reason that you get that is because

523
00:23:48,547 --> 00:23:50,860
There's a thing called the Path.

524
00:23:50,859 --> 00:23:53,123
In fact if you hit set, you can see it

525
00:23:53,124 --> 00:23:55,725
It's this gigantic thing that's happening here.

526
00:23:55,724 --> 00:23:58,105
Yeah, kinda crazy.

527
00:23:58,105 --> 00:24:00,543
Basically there's this thing  called the Path

528
00:24:00,542 --> 00:24:03,247
And what it is, is anytime  you're in this command line

529
00:24:03,248 --> 00:24:05,883
These are all the actual variables that are set in my command line

530
00:24:05,883 --> 00:24:08,054
They're things called environment variables, that control stuff.

531
00:24:08,054 --> 00:24:11,201
You don't really need to know any of them,  honestly, for what we're doing

532
00:24:11,201 --> 00:24:12,942
But Path is somewhat important.

533
00:24:12,942 --> 00:24:16,308
What Path is, is this thing that says: here are all the places to search.

534
00:24:16,308 --> 00:24:19,176
When I type for a command, look at all these places

535
00:24:19,176 --> 00:24:22,821
In order, and the first time you find it, go, right?

536
00:24:23,380 --> 00:24:24,262
So.

537
00:24:24,261 --> 00:24:28,047
What happens is when I type cl it can't find it because that's not in the Path.

538
00:24:30,136 --> 00:24:33,061
This happens even after you've installed Visual Studio, and you're like, ah

539
00:24:33,061 --> 00:24:34,315
How do I get it to go?

540
00:24:34,605 --> 00:24:37,856
Well, it turns out that Visual Studio is kind of a little janky

541
00:24:37,856 --> 00:24:39,818
And we're gonna work around this a little later on

542
00:24:39,818 --> 00:24:41,676
But at first I don't wanna quite work around it yet

543
00:24:41,676 --> 00:24:43,754
I just wanna show you how to  do the basic maneuver.

544
00:24:43,755 --> 00:24:47,877
And what you have to do, is you have to go find

545
00:24:47,876 --> 00:24:51,231
Where Visual Studio actually is, ok?

546
00:24:51,231 --> 00:24:54,865
So basically, I don't know if you've ever seen this guy

547
00:24:54,865 --> 00:24:57,699
It's called vcvars32, anyone who knows what I'm talking about.

548
00:24:57,699 --> 00:25:00,000
Or I think it's vcvarsall, actually, might be it.

549
00:25:00,000 --> 00:25:03,515
Basically what we're doing is we're going  to look for a particular program that we need

550
00:25:03,515 --> 00:25:07,567
That Visual Studio installs, that will set up our command line for us

551
00:25:07,567 --> 00:25:09,819
To do the compiles from the command line.

552
00:25:09,819 --> 00:25:11,107
So.

553
00:25:11,107 --> 00:25:14,788
Where that is, is you have to first find

554
00:25:14,788 --> 00:25:16,773
Visual Studio itself, right?

555
00:25:16,773 --> 00:25:20,000
So we're gonna type c: to go over to the c: drive, ok?

556
00:25:20,000 --> 00:25:24,145
We're going to cd to what's called the Program Files directory

557
00:25:24,145 --> 00:25:26,456
And this is not... this is a trick.

558
00:25:26,457 --> 00:25:28,570
But we're gonna go over to the Program Files directory

559
00:25:28,569 --> 00:25:32,086
Which is where you would think it is, and we're gonna take a directory, ok?

560
00:25:32,086 --> 00:25:35,279
And here you can see Microsoft Visual Studio 12

561
00:25:35,279 --> 00:25:36,441
Which is the thing we installed.

562
00:25:36,441 --> 00:25:39,656
Now, Microsoft likes to do this sort of stuff.

563
00:25:39,656 --> 00:25:42,605
They like to call their program Microsoft Visual Studio 2013

564
00:25:42,605 --> 00:25:44,521
But then you list it on the drive it's Visual Studio 12

565
00:25:44,521 --> 00:25:48,201
So, you just get to magically find out and know

566
00:25:48,201 --> 00:25:51,941
What version number your thing actually is

567
00:25:51,941 --> 00:25:56,096
As opposed to the like branding thing that marketing decided to name it.

568
00:25:56,096 --> 00:26:00,206
And they constantly do this, like it's never actually named the same thing as it is

569
00:26:00,207 --> 00:26:01,809
When you go to actually look for it.

570
00:26:01,808 --> 00:26:05,257
It's maddening.  It's Microsoft. What you gonna do?

571
00:26:05,768 --> 00:26:06,673
Anyway

572
00:26:07,300 --> 00:26:09,134
If I go into there

573
00:26:10,412 --> 00:26:11,352
There it is.

574
00:26:11,352 --> 00:26:15,671
If I go into there, I can do a directory, and I will see

575
00:26:15,671 --> 00:26:18,330
What is in here, and I can look

576
00:26:18,329 --> 00:26:20,175
And I can start to get nervous

577
00:26:20,175 --> 00:26:25,470
Because there is... where is,  where is all the stuff? Is not here.

578
00:26:25,470 --> 00:26:27,733
I know what should be in here, I'm looking for the compiler

579
00:26:27,733 --> 00:26:29,718
I said there was a cl and as you see it's not there.

580
00:26:29,719 --> 00:26:33,307
Well the reason it's not there is basically a historical accident.

581
00:26:33,678 --> 00:26:36,941
So, what happened long long  long long time ago

582
00:26:36,941 --> 00:26:43,557
When Windows was still only running on 32-bit x86 processors

583
00:26:43,557 --> 00:26:46,878
Is, there was, you know,  a split

584
00:26:46,878 --> 00:26:51,708
And there was a, a sort of a push by Intel to go to something called the Itanium processor

585
00:26:51,709 --> 00:26:55,076
Which was gonna be a 64-bit processor, it was gonna be their new processor line.

586
00:26:55,076 --> 00:26:59,429
And, meanwhile AMD staid with x86

587
00:26:59,429 --> 00:27:02,262
And... because they didn't have the  license for Itanium or any of that stuff.

588
00:27:02,261 --> 00:27:06,034
And they started developing their own 64-bit version of x86

589
00:27:06,035 --> 00:27:09,843
Which of course is the CPU that is in all of these machines.

590
00:27:09,843 --> 00:27:14,708
Well, the Itanium project that Intel had championed did not pan out at all.

591
00:27:14,708 --> 00:27:17,825
I mean, it exists, and it's something that you could run

592
00:27:17,825 --> 00:27:20,420
But nobody wanted to go to a completely new architecture

593
00:27:20,420 --> 00:27:22,998
And switch to this whole new thing so, that didn't work out.

594
00:27:22,998 --> 00:27:25,668
What ended up happening is AMD's  64-bit architecture

595
00:27:25,667 --> 00:27:31,112
Which was just x86 upgraded to basically handle 64 bit

596
00:27:33,039 --> 00:27:35,570
And it still could run x86 code just fine.

597
00:27:35,570 --> 00:27:36,789
That's the thing that won.

598
00:27:36,789 --> 00:27:41,514
And when, you know, everything in  the PC world went from 32-bit to 64-bit

599
00:27:41,515 --> 00:27:45,985
And you had things like Windows 7 64-bit Edition and those sorts of things

600
00:27:45,984 --> 00:27:48,260
When you install those, right?

601
00:27:48,260 --> 00:27:53,114
Those are things that are using the 64-bit capabilities of the CPU.

602
00:27:53,114 --> 00:27:54,844
And, you know, we'll talk a little bit more about

603
00:27:54,844 --> 00:27:58,269
What the differences between 32  and 64-bit CPUs and stuff like that

604
00:27:58,269 --> 00:27:59,999
Later on the stream when it becomes more relevant

605
00:27:59,999 --> 00:28:01,867
But basically what happened at that time

606
00:28:01,867 --> 00:28:03,945
Was Microsoft decided

607
00:28:03,945 --> 00:28:07,499
Probably for reasons of trying to make legacy stuff working

608
00:28:07,499 --> 00:28:11,307
Maybe just because they weren't,  you know, thinking super hard that day

609
00:28:11,307 --> 00:28:13,931
They decided to make two Program Files directories.

610
00:28:13,931 --> 00:28:18,679
So there's Program Files, and there's Program Files (x86)

611
00:28:18,679 --> 00:28:21,732
And basically programs that are compiled

612
00:28:21,731 --> 00:28:25,423
To run under the 32-bit  version of Windows

613
00:28:25,423 --> 00:28:27,479
Go into the x86 one

614
00:28:27,479 --> 00:28:30,230
And things that are designed to run on the x64-bit one

615
00:28:30,230 --> 00:28:32,146
Go into the main Program Files one.

616
00:28:32,146 --> 00:28:35,571
And Visual Studio still hasn't been updated

617
00:28:35,571 --> 00:28:38,171
To run on 64-bit computers.

618
00:28:38,172 --> 00:28:41,562
Now, it's been I don't even know how many years

619
00:28:41,561 --> 00:28:42,815
Since we've all been

620
00:28:42,816 --> 00:28:45,578
Running, I mean, developers especially been running 64-bit things.

621
00:28:45,578 --> 00:28:48,818
But, like, they couldn't figure it out, they're like, that's not where they're at

622
00:28:50,978 --> 00:28:54,542
So heaven knows why that's going on, but, that's the case.

623
00:28:54,541 --> 00:28:57,317
So what you actually have todo is go to Program Files (x86)

624
00:28:57,317 --> 00:29:00,336
And in there, you will see the same directory again

625
00:29:00,336 --> 00:29:04,295
Microsoft Visual Studio 12, or whatever it is

626
00:29:04,295 --> 00:29:05,723
There, yeah, there we go.

627
00:29:05,722 --> 00:29:07,162
And in there

628
00:29:07,162 --> 00:29:09,206
Now we can actually find the  thing that we needed

629
00:29:09,205 --> 00:29:11,991
So when we hit dir inside the Visual Studio 12 directory

630
00:29:11,991 --> 00:29:15,207
You will se all of this stuff, the only one you care about is VC

631
00:29:15,208 --> 00:29:16,915
That stands for Visual C.

632
00:29:16,914 --> 00:29:19,212
And we are using C so that is what we want.

633
00:29:19,212 --> 00:29:21,743
We can go in there and when we do a dir we will see

634
00:29:21,743 --> 00:29:24,541
vcvarsall.bat

635
00:29:24,798 --> 00:29:28,965
And vcvarsall.bat is the thing we actually need to run.

636
00:29:28,965 --> 00:29:32,088
So you'll notice, cl still doesn't work.

637
00:29:32,088 --> 00:29:35,421
vcvarsall.bat, if you run that

638
00:29:35,421 --> 00:29:38,346
It will configure all the stuff, the Path, everything, you run cl

639
00:29:38,346 --> 00:29:40,065
And now it works.

640
00:29:40,413 --> 00:29:41,342
But.

641
00:29:41,608 --> 00:29:43,593
There is a catch ladies and gentleman.

642
00:29:43,594 --> 00:29:45,429
vcvarsall

643
00:29:45,429 --> 00:29:49,436
Only compiles for running a particular version of the compiler

644
00:29:49,435 --> 00:29:51,087
Either the 64-bit one

645
00:29:51,087 --> 00:29:52,762
Or the 32-bit one.

646
00:29:52,762 --> 00:29:55,596
So if we want to run the 64-bit one

647
00:29:55,596 --> 00:30:00,325
We actually have to call vcvars x64.

648
00:30:00,325 --> 00:30:04,318
'Cause you can notice, when I ran it, there is a x86 there at the end.

649
00:30:04,318 --> 00:30:07,498
So that's the 32-bit compiler, which is fine, I think

650
00:30:07,498 --> 00:30:09,184
I think you can compile for...

651
00:30:09,184 --> 00:30:11,077
You may not be able to, I don't even know.

652
00:30:11,077 --> 00:30:14,072
I haven't tried to compile 32-bit with a 64-bit compiler.

653
00:30:14,073 --> 00:30:15,037
I don't know.

654
00:30:15,037 --> 00:30:17,447
We're gonna start off compiling 64-bit code

655
00:30:17,446 --> 00:30:22,484
Because that is the most prevalent PC, CPU kind

656
00:30:22,484 --> 00:30:24,962
Most prevalent PC CPU operating system out there

657
00:30:24,962 --> 00:30:28,049
And it's a more powerful chipset, chip type

658
00:30:28,049 --> 00:30:30,149
'Cause it has more instructions that we might all play with later.

659
00:30:30,150 --> 00:30:32,916
So we are going to go ahead and run that.

660
00:30:32,915 --> 00:30:35,211
And if you put the x64 after it

661
00:30:35,211 --> 00:30:39,411
Then when you run cl, you can see that now you get the compiler for x64

662
00:30:39,411 --> 00:30:43,519
Everything is the same, except for that little guy there, ok?

663
00:30:43,519 --> 00:30:45,505
So what you have to remember

664
00:30:45,505 --> 00:30:47,409
And I know it's a little annoying

665
00:30:47,409 --> 00:30:51,988
Is you have to remember to run this when you start, start off your stuff.

666
00:30:51,988 --> 00:30:52,664
Right?

667
00:30:52,664 --> 00:30:55,075
But, we can do a little bit better.

668
00:30:55,075 --> 00:30:57,519
If we want to we can do a little better, anyway.

669
00:30:57,519 --> 00:31:00,984
What I like to do, 'cause I showed you that subst trick before, right?

670
00:31:00,984 --> 00:31:04,221
What I like to do is I like to go into the Startup folder

671
00:31:04,221 --> 00:31:05,931
See the Startup folder up here?

672
00:31:05,931 --> 00:31:07,859
If I right-click on...

673
00:31:07,858 --> 00:31:11,186
Well, actually I guess you wouldn't have one yet, so I'm gonna right-click on Startup and hit Open.

674
00:31:11,828 --> 00:31:15,019
That basically brings up a folder that will execute anything that you put in it

675
00:31:15,019 --> 00:31:17,028
When the machine starts up.

676
00:31:17,028 --> 00:31:20,596
Wo what I like to do is I like to drop a startup.bat in there, aswell.

677
00:31:20,596 --> 00:31:23,292
And I just edit it with Notepad, I'm not fancy

678
00:31:23,292 --> 00:31:25,897
I don't even bother opening Emacs or anything.

679
00:31:25,897 --> 00:31:29,592
But I like putting a file in there called startup.bat and I put in the subst line

680
00:31:29,593 --> 00:31:32,289
And so while you're in there you might aswell go ahead

681
00:31:32,289 --> 00:31:35,870
And run vcvarsall right from there, right?

682
00:31:35,871 --> 00:31:39,680
Now there's a catch, of course, 'cause there's always a catch.

683
00:31:39,680 --> 00:31:42,307
The catch is, that if you're in a batch file

684
00:31:42,307 --> 00:31:44,339
And you wanna call another batch file

685
00:31:44,339 --> 00:31:48,332
In order to be compatible with the most number of command lines settings that people might use

686
00:31:48,333 --> 00:31:50,422
You have to use the command call.

687
00:31:50,422 --> 00:31:52,177
Do not ask me why.

688
00:31:52,176 --> 00:31:54,219
I really do not know.

689
00:31:54,220 --> 00:31:56,687
I think it's some historical reason about they have to set

690
00:31:56,686 --> 00:32:00,255
Some state in order for the other one to come back to here

691
00:32:00,256 --> 00:32:02,792
After you finished it, and blah blah blah.

692
00:32:02,791 --> 00:32:06,257
But assuming that you want this to actually dispatch to the other batch file

693
00:32:06,258 --> 00:32:09,150
And then actually come back and execute any more lines you might

694
00:32:09,150 --> 00:32:10,125
Put into Startup...

695
00:32:10,125 --> 00:32:13,487
If you didn't put any more lines you'd be fine, you just go execute that, and that'd be it.

696
00:32:13,487 --> 00:32:17,515
But assuming you actually wanted to do this and come back

697
00:32:17,515 --> 00:32:18,961
You can put that in there.

698
00:32:18,961 --> 00:32:21,440
Now, the only thing I'm not sure about

699
00:32:21,440 --> 00:32:23,826
Because I don't always do it this way

700
00:32:23,826 --> 00:32:27,269
Is whether that's sticky for the whole system.

701
00:32:27,269 --> 00:32:29,759
I don't know if it is, it might not be.

702
00:32:29,759 --> 00:32:31,538
And so the other thing that you can do...

703
00:32:31,538 --> 00:32:34,269
I'm just showing that as one option,  you can try that, I'm not gonna spend

704
00:32:34,269 --> 00:32:35,577
Time trying this on the stream.

705
00:32:35,577 --> 00:32:39,009
The other thing that you can do, and this is also pretty cool

706
00:32:39,009 --> 00:32:41,442
Since this definitely does work at startup all the time

707
00:32:41,442 --> 00:32:43,759
subst do always works so I always put that in there.

708
00:32:43,759 --> 00:32:46,238
The other thing you can do and the way that I'm going to do it

709
00:32:46,238 --> 00:32:47,626
Because...

710
00:32:47,856 --> 00:32:50,013
You know? I don't have a because.

711
00:32:50,013 --> 00:32:52,067
I'm not even gonna say because 'cause I don't have one.

712
00:32:52,067 --> 00:32:54,144
And, you know, don't make up a  because if you don't have one.

713
00:32:54,144 --> 00:32:55,326
This is just the way I do it.

714
00:32:55,326 --> 00:32:57,037
So maybe that means it doesn't work in there, I don't know.

715
00:32:57,037 --> 00:32:59,010
This is the way I've always done it, so I'm gonna do it.

716
00:32:59,010 --> 00:33:03,336
So, in here, I've got my misc directory

717
00:33:03,336 --> 00:33:06,802
Where I put stuff that, you know, you don't have to use, you just, you can use it if you want to.

718
00:33:06,803 --> 00:33:10,108
I'm gonna go ahead and I'm gonna create a batch file in here

719
00:33:10,107 --> 00:33:13,344
And I'm just gonna call that shell.bat

720
00:33:13,344 --> 00:33:14,721
Right?

721
00:33:14,721 --> 00:33:16,775
I'm gonna call that shell.bat and I'm gonna edit it

722
00:33:16,775 --> 00:33:19,298
And in there I'm gonna put

723
00:33:19,298 --> 00:33:22,065
The actual thing that I'm gonna call, right?

724
00:33:22,065 --> 00:33:25,026
And so that way, anything that I want to happen

725
00:33:25,026 --> 00:33:28,801
Any sort of configuration for the shell when I start it up

726
00:33:28,800 --> 00:33:32,221
That I want to have happen, I can have happen in there.

727
00:33:32,221 --> 00:33:33,769
If that makes sense, right?

728
00:33:33,769 --> 00:33:36,202
And there's some things that we might wanna do

729
00:33:36,202 --> 00:33:38,624
Actually, I can show you some other tricks that are pretty cool

730
00:33:38,624 --> 00:33:40,690
That me might wanna do in there, for example

731
00:33:40,690 --> 00:33:44,212
We can also make the Path point to something in our directory

732
00:33:44,212 --> 00:33:47,677
So if we wanna put like little tools  that we have, or things like that in there

733
00:33:47,678 --> 00:33:50,972
We can actually make it so that that happens aswell.

734
00:33:50,971 --> 00:33:54,471
So for example, if I wanted to...

735
00:33:54,471 --> 00:33:56,433
Let's say...

736
00:33:56,984 --> 00:34:00,232
So let's say I wanna make the Path point to something in our, in our guy.

737
00:34:00,232 --> 00:34:03,261
So I can do set path=%path%

738
00:34:03,261 --> 00:34:05,178
Which just means insert the old Path in here

739
00:34:05,179 --> 00:34:06,108
Right?

740
00:34:06,107 --> 00:34:09,217
I can do that, set the Path equal to the old Path

741
00:34:09,217 --> 00:34:11,547
Oh well, you know what? Let's put ourselves first.

742
00:34:11,547 --> 00:34:12,672
Why not?

743
00:34:12,672 --> 00:34:14,932
I'm gonna make it so that it looks in

744
00:34:14,932 --> 00:34:17,411
Our handmade directory

745
00:34:17,411 --> 00:34:19,179
And underneath misc.

746
00:34:19,179 --> 00:34:21,014
Right? So anything in the handmade\misc

747
00:34:21,014 --> 00:34:23,252
You know what?  Let's go even further than that.

748
00:34:23,253 --> 00:34:25,892
Let's make it... should we make it bin?

749
00:34:25,891 --> 00:34:27,567
Nah, why complicate things?

750
00:34:27,567 --> 00:34:29,610
So I'm gonna make it look in the  handmade\misc directory

751
00:34:29,610 --> 00:34:31,914
And so that way, anytime we run something from the command line

752
00:34:31,914 --> 00:34:35,219
It can look in there and it can actually just run it if there's something in there.

753
00:34:35,219 --> 00:34:37,491
Right? And so that will be pretty cool.

754
00:34:38,043 --> 00:34:38,972
So.

755
00:34:39,327 --> 00:34:42,139
Now, what happens if we actually go in here

756
00:34:42,139 --> 00:34:43,860
If we actually run this guy, right?

757
00:34:43,860 --> 00:34:45,467
Let's see what happens when we do cl

758
00:34:45,467 --> 00:34:47,888
Yeah, 'cl' is not recognized as an intenal or external command.

759
00:34:47,889 --> 00:34:50,804
So I was right to suspect that we probably can't put it in the startup

760
00:34:50,804 --> 00:34:52,260
'Cause if we put it in the startup

761
00:34:52,260 --> 00:34:54,407
It's only gonna be scoped to that little startup shell

762
00:34:54,407 --> 00:34:57,309
Like, if you noticed, right? Basically what happens is

763
00:34:57,309 --> 00:34:59,581
I go in here to Startup, I run this thing

764
00:34:59,581 --> 00:35:01,693
It kind of flashes, it does the command and goes.

765
00:35:01,693 --> 00:35:04,402
subst is sticky, it works for the whole machine.

766
00:35:04,402 --> 00:35:08,269
You can see even Explorer gets that W drive that I decided to make.

767
00:35:08,268 --> 00:35:10,300
But vcvarsall

768
00:35:10,300 --> 00:35:12,664
Just sets local environment  variables to the shell

769
00:35:12,664 --> 00:35:15,108
And so it has to be local to that shell.

770
00:35:15,108 --> 00:35:17,655
So basically what we wanna do is at shell startup

771
00:35:17,655 --> 00:35:19,549
When we actually start the shell

772
00:35:19,550 --> 00:35:21,788
We want to do those changes, right?

773
00:35:21,788 --> 00:35:24,460
So we want to make sure that we can basically go in here

774
00:35:24,460 --> 00:35:25,344
Right?

775
00:35:25,344 --> 00:35:26,985
Run our shell.bat

776
00:35:26,985 --> 00:35:28,614
Um, oh, that's good.

777
00:35:29,521 --> 00:35:31,518
Already got a typo.

778
00:35:31,518 --> 00:35:33,744
We haven't even started programming yet.

779
00:35:33,744 --> 00:35:35,282
Anything that's got spaces in it

780
00:35:35,282 --> 00:35:36,900
Since spaces are considered delimiting

781
00:35:36,900 --> 00:35:39,195
You gotta enclose them in double quotes.

782
00:35:39,195 --> 00:35:41,480
I forget that all the time

783
00:35:41,480 --> 00:35:43,097
And I suspect you will too.

784
00:35:43,097 --> 00:35:45,690
Anyway, I run that, and that'll run our vcvars

785
00:35:45,690 --> 00:35:48,582
And now we will get our cl back, and we're good to go.

786
00:35:48,583 --> 00:35:51,360
We can go one step further

787
00:35:51,739 --> 00:35:54,021
And, well, you know what?

788
00:35:54,021 --> 00:35:56,581
I may even remember this  command line switch.

789
00:35:56,581 --> 00:35:59,289
I'm not gonna promise it to you, but I think

790
00:35:59,289 --> 00:36:00,585
I may...

791
00:36:00,585 --> 00:36:03,890
Actually remember the command line switch for telling the shell

792
00:36:03,891 --> 00:36:05,624
To actually execute something

793
00:36:05,623 --> 00:36:07,551
On startup, on its own.

794
00:36:07,552 --> 00:36:09,836
So we don't even have to go in  there and run that.

795
00:36:10,351 --> 00:36:13,346
Hmmmmm... Is it /k?

796
00:36:13,347 --> 00:36:14,781
Do we think it's /k?

797
00:36:14,780 --> 00:36:17,489
Does anyone wanna place bets? I think the stream should place bets.

798
00:36:17,489 --> 00:36:18,763
Some poeple on the stream know.

799
00:36:20,679 --> 00:36:23,617
We're gonna look it up in a second but we're just gonna type /k for now.

800
00:36:24,351 --> 00:36:27,565
We're gonna type /k and then we're gonna tell it to go ahead and run

801
00:36:27,565 --> 00:36:31,088
handmade\misc\shell.bat

802
00:36:31,088 --> 00:36:33,234
Like that, and we're gonna see what happens.

803
00:36:33,601 --> 00:36:34,439
Bam.

804
00:36:34,438 --> 00:36:37,502
Did you see that? Did you see that?

805
00:36:37,503 --> 00:36:41,083
That is a useless set of neurons right there, ladies and gentleman

806
00:36:41,083 --> 00:36:43,574
Remembering stuff like that. That's what happens

807
00:36:43,574 --> 00:36:47,097
When you get to be 38 years old now

808
00:36:47,097 --> 00:36:50,287
And have dealt with this stuff for far too long.

809
00:36:50,286 --> 00:36:52,214
Ok so now we are at a position

810
00:36:52,215 --> 00:36:53,923
Where we can double-click on that icon

811
00:36:53,923 --> 00:36:55,657
And we can actually run a compiler.

812
00:36:55,657 --> 00:36:59,582
Congratulations.  That is some big big news right there.

813
00:36:59,869 --> 00:37:03,082
Surely it's not very far to a complete  game from there, right?

814
00:37:03,081 --> 00:37:04,469
Surely.

815
00:37:04,469 --> 00:37:05,663
Ok.

816
00:37:05,664 --> 00:37:08,946
So anyway, if we can do a cl then we can basically build an executable.

817
00:37:08,945 --> 00:37:10,827
That is mostly all we need.

818
00:37:10,827 --> 00:37:12,663
So if we go in here

819
00:37:12,664 --> 00:37:15,923
And, oh, and I guess I did that setting that Path to handmade

820
00:37:15,922 --> 00:37:18,412
I didn't actually show anything that we can do in there

821
00:37:18,413 --> 00:37:19,733
I set the Path to there

822
00:37:19,733 --> 00:37:21,879
So basically obviously we can run shell again.

823
00:37:21,878 --> 00:37:23,898
And that would work because it  found it in the Path.

824
00:37:23,898 --> 00:37:26,962
Now, remember, shell wasn't there but it went and looked in that Path that we set.

825
00:37:26,963 --> 00:37:29,682
If I hit click set again, you can see

826
00:37:29,681 --> 00:37:32,596
That I got right here, it now  inserted me into that Path

827
00:37:32,597 --> 00:37:34,410
So it's looking through each of these, right?

828
00:37:34,409 --> 00:37:36,625
And it's gotta find the stuff that I put there.

829
00:37:36,625 --> 00:37:39,286
So, now that I've got that set

830
00:37:39,286 --> 00:37:40,411
I can put something else in there,

831
00:37:40,411 --> 00:37:44,117
So why don't I, instead of  running Emacs from an icon?

832
00:37:44,117 --> 00:37:47,641
Let's, let's stop doing that, let's, you know, there's no need for that.

833
00:37:47,641 --> 00:37:49,581
What we can actually do instead

834
00:37:49,581 --> 00:37:53,187
Is we can run Emacs directly from our shell.

835
00:37:53,186 --> 00:37:55,547
So basically the only thing we'll start up is this.

836
00:37:56,603 --> 00:37:57,475
Ok.

837
00:37:57,476 --> 00:37:59,771
So, and you know what? I'm gonna close this aswell.

838
00:37:59,771 --> 00:38:01,573
So we're gonna have a little party here.

839
00:38:01,572 --> 00:38:03,591
Ok.  So if I want to

840
00:38:03,592 --> 00:38:05,784
I can basically make another batch file

841
00:38:05,784 --> 00:38:08,836
So inside handmade\misc

842
00:38:08,836 --> 00:38:10,396
I will make notepad...

843
00:38:10,396 --> 00:38:14,311
And I will go ahead and say that  this is going to be

844
00:38:14,311 --> 00:38:17,867
My Emacs launcher. Save.

845
00:38:19,038 --> 00:38:20,449
Why did... Oh, you know what?

846
00:38:20,449 --> 00:38:22,641
I should give it a name so I don't have to actually into..

847
00:38:22,641 --> 00:38:24,971
notepad emacs.bat

848
00:38:24,971 --> 00:38:27,208
And I do want to create a new file.

849
00:38:27,208 --> 00:38:28,378
I'm gonna @echo off

850
00:38:28,378 --> 00:38:31,856
And I'm gonna go over here to the GNU Emacs icon that I had

851
00:38:31,856 --> 00:38:34,759
And I'm gonna copy in what was in there.

852
00:38:36,572 --> 00:38:38,960
So, what's interesting about this

853
00:38:38,960 --> 00:38:42,126
And I'll show you this part aswell 'cause I've customized this icon

854
00:38:42,126 --> 00:38:44,880
And it's good for you to know if you do wanna follow along with Emacs.

855
00:38:44,880 --> 00:38:47,807
When you do this runemacs command to run Emacs

856
00:38:47,807 --> 00:38:50,940
And this has to be wherever you installed it, it comes in like a zip file

857
00:38:50,940 --> 00:38:53,958
So wherever you unzipped it, you're gonna have to find the runemacs command

858
00:38:53,958 --> 00:38:55,335
And you're gonna have to call that.

859
00:38:55,335 --> 00:38:59,191
I unzipped it just into Program Files (x86) where everything else that's x86 goes

860
00:38:59,190 --> 00:39:02,736
Why not? You can put it into  something more sanely named if you wish.

861
00:39:02,737 --> 00:39:07,132
-q -l w:&lt;b&gt;\&lt;/b&gt;handmade\misc\.emacs is just a way of saying

862
00:39:07,132 --> 00:39:10,300
Load this as the config file, I think -q might be

863
00:39:11,699 --> 00:39:13,638
You know, I don't even know what -q is

864
00:39:13,639 --> 00:39:17,001
-l loads this file right here

865
00:39:17,001 --> 00:39:20,995
I believe, which is the one that I created my custom emacs file.

866
00:39:20,994 --> 00:39:23,610
And so that way it will come up with my settings.

867
00:39:23,610 --> 00:39:25,746
So I'm gonna go ahead and save that.

868
00:39:25,746 --> 00:39:26,800
And close it.

869
00:39:26,800 --> 00:39:29,382
And now, no matter where we are, in theory

870
00:39:29,382 --> 00:39:31,230
If we wish to summon our editor

871
00:39:31,231 --> 00:39:34,019
You can type emacs, and bum, there it is.

872
00:39:34,018 --> 00:39:37,645
Close it.  Comes back.  Everyone is happy.

873
00:39:37,646 --> 00:39:42,557
And, we're starting to get a little closer to a machine I can actually use to develop code.

874
00:39:42,556 --> 00:39:46,940
The other thing that is good to know, is devenv.

875
00:39:46,940 --> 00:39:50,625
devenv is the name of the actual Visual Studio IDE

876
00:39:50,625 --> 00:39:53,148
And if I type that in and hit return

877
00:39:53,148 --> 00:39:56,407
It will load it, just like I'd clicked on the icon, and now

878
00:39:56,407 --> 00:39:58,304
We are at the point

879
00:39:58,304 --> 00:40:00,148
Where all we need...

880
00:40:00,148 --> 00:40:01,871
Plew, plew.

881
00:40:01,871 --> 00:40:04,430
Is just our command prompt, ladies and gentleman

882
00:40:04,429 --> 00:40:06,781
So get rid of those icons, they are gone.

883
00:40:06,782 --> 00:40:07,987
So.

884
00:40:07,987 --> 00:40:10,648
That is the drudgework of setting up

885
00:40:10,648 --> 00:40:12,771
A machine to actually develop on.

886
00:40:12,771 --> 00:40:16,192
If you want to have some of the same stuff that I have, obviously

887
00:40:16,192 --> 00:40:19,061
You can go grab GNU Emacs yourself.

888
00:40:19,061 --> 00:40:22,067
You can search for it here, you can go to GNU Emacs

889
00:40:22,067 --> 00:40:23,972
And it willl come up.

890
00:40:23,972 --> 00:40:28,057
You can click through to the various fun locations.

891
00:40:28,057 --> 00:40:31,523
I think, there's an Obtaining, click on Obtaining.

892
00:40:31,523 --> 00:40:33,876
You click on nearby GNU mirror

893
00:40:33,876 --> 00:40:39,086
And after clicking on that there's a windows/ directory that you can click on to go in

894
00:40:39,085 --> 00:40:42,413
And get the correct one, I am using...

895
00:40:42,414 --> 00:40:45,810
Because a lot of stuff has broken in recent Emacses

896
00:40:45,809 --> 00:40:50,181
I am using version 23.4.1

897
00:40:50,181 --> 00:40:55,632
And so you can go in and you can download 23.4

898
00:40:55,632 --> 00:41:00,062
Which is this bin, 23.4-bin-i386.zip

899
00:41:00,063 --> 00:41:01,474
That's what I'm using.

900
00:41:01,474 --> 00:41:03,861
Ok.  So.

901
00:41:03,860 --> 00:41:07,510
We have about 20 minutes left to go

902
00:41:07,510 --> 00:41:10,596
Which is plenty of time to get our code working.

903
00:41:12,594 --> 00:41:13,971
Drudgework done.

904
00:41:15,199 --> 00:41:16,416
Here we go.

905
00:41:16,416 --> 00:41:19,077
So I'm gonna actually go in here to handmade\code

906
00:41:19,077 --> 00:41:20,661
I'm gonna hit emacs

907
00:41:20,661 --> 00:41:23,173
And I'm gonna open up my build.bat

908
00:41:23,172 --> 00:41:27,156
I can now take this win32_handmade thing that I made here

909
00:41:27,157 --> 00:41:28,947
And I'm gonna say

910
00:41:28,947 --> 00:41:31,471
I want to build this code

911
00:41:31,471 --> 00:41:35,085
But I don't want to build it where it actually is right now

912
00:41:35,085 --> 00:41:37,736
I don't want to build it right in its current location.

913
00:41:37,737 --> 00:41:39,619
And the reason that I don't want to do that

914
00:41:39,619 --> 00:41:41,260
Is be... well, you know what?

915
00:41:41,260 --> 00:41:43,234
Why tell you when I can show you?

916
00:41:43,233 --> 00:41:44,954
So, cl is the compiler

917
00:41:44,954 --> 00:41:47,559
If I wanna compile something I can actually just type

918
00:41:47,559 --> 00:41:51,324
cl win32_handmade.cpp hit return.

919
00:41:51,324 --> 00:41:55,168
It will then do the compilation and you can see that it spit it out.

920
00:41:55,168 --> 00:41:57,693
Here is the win32_handmade.exe

921
00:41:57,693 --> 00:42:01,159
Here is the win32_handmade.obj

922
00:42:01,159 --> 00:42:04,990
Now.  I will be getting a little bit ahead of things here

923
00:42:04,990 --> 00:42:07,813
So, you don't have to worry about this too much

924
00:42:07,813 --> 00:42:10,855
Becuase we'll talk about compiler switches in a separate episode.

925
00:42:11,360 --> 00:42:14,596
Later on down the road when we talk about optimizations and stuff like this.

926
00:42:14,596 --> 00:42:15,456
But.

927
00:42:15,456 --> 00:42:18,704
When you do cl, if I put /Zi

928
00:42:18,704 --> 00:42:21,779
That will actually cause it to generate what's called debug info

929
00:42:21,780 --> 00:42:24,351
Which allows us to debug the program more effectively.

930
00:42:24,648 --> 00:42:28,596
When I do that you will notice that  we start getting a lot of crap in here.

931
00:42:28,597 --> 00:42:30,938
There is just a lot of crap in here.

932
00:42:30,938 --> 00:42:34,115
There is this pdb file, which is debug info that it spit out.

933
00:42:34,115 --> 00:42:36,721
There's another pdb file which is a separate thing that it uses

934
00:42:36,721 --> 00:42:39,865
These are both part of the debug info, I believe...

935
00:42:39,865 --> 00:42:40,920
Don't quote me on that.

936
00:42:40,920 --> 00:42:43,663
They change it every version, I don't  know if you can maybe get rid of this

937
00:42:43,664 --> 00:42:45,362
But I don't think you can, I think you need both.

938
00:42:45,362 --> 00:42:48,838
The obj file is the intermediate file that it used when it first compiled this.

939
00:42:48,838 --> 00:42:50,228
This was the thing that it linked with.

940
00:42:50,228 --> 00:42:52,833
I think this is some kind of incremental linker data.

941
00:42:52,833 --> 00:42:56,218
So, it's gonna start spewing stuff into our directory

942
00:42:56,217 --> 00:42:58,971
And I don't want my directory to look like that.

943
00:42:58,972 --> 00:43:01,394
That is not ok, that is not ok.

944
00:43:01,393 --> 00:43:03,011
I am getting rid of those pdbs

945
00:43:03,012 --> 00:43:04,789
And you noticed I did  del *.pdb

946
00:43:04,789 --> 00:43:08,083
Which basically says delete everything that's got a .pdb at the end of it.

947
00:43:08,083 --> 00:43:11,319
I'm gonna delete *.ilk I'm gonna delete *.obj

948
00:43:11,320 --> 00:43:14,912
And I am back to what I actually wanted which is just the exe.

949
00:43:14,911 --> 00:43:17,755
So, I'm even gonna delete that, because

950
00:43:17,755 --> 00:43:19,288
We're gonna try and make that a different way

951
00:43:19,288 --> 00:43:21,436
So what I wanna do is I want to basically

952
00:43:21,436 --> 00:43:25,325
Force all this stuff to go somewhere else, and keep my source directory clean.

953
00:43:25,324 --> 00:43:29,016
So what I'm gonna is I'm gonna use a thing called pushd popd.

954
00:43:29,016 --> 00:43:33,010
pushd and popd means push directory, pop directory.

955
00:43:33,010 --> 00:43:35,355
So I'm going to build this

956
00:43:35,356 --> 00:43:38,584
Back a few, in build, I think.

957
00:43:38,583 --> 00:43:41,277
I'm gonna go back two of these, this is the syntax for back a directory.

958
00:43:41,277 --> 00:43:43,170
So I'm gonna back two directories from where we are.

959
00:43:43,170 --> 00:43:45,224
So, out of code, out of handmade.

960
00:43:46,014 --> 00:43:48,661
And I am going to go into a build directory.

961
00:43:48,661 --> 00:43:52,434
Now of course that may not exist, so I'm  gonna double-check that it's made first

962
00:43:52,434 --> 00:43:54,895
Then, I am going to cl

963
00:43:55,313 --> 00:43:56,358
This file.

964
00:43:56,358 --> 00:44:02,732
I'm going to cl handmade/code/win32_handmade.cpp

965
00:44:02,733 --> 00:44:04,010
Like that.

966
00:44:04,010 --> 00:44:06,042
And then I'm gonna popd back out.

967
00:44:06,041 --> 00:44:08,177
So that will bring me back to where I originally was

968
00:44:08,177 --> 00:44:10,359
Before I ran this build.bat

969
00:44:10,360 --> 00:44:11,532
Now that's not strictly necessary

970
00:44:11,532 --> 00:44:15,248
But basically pushd and popd are sort of like enclosing something you do

971
00:44:15,806 --> 00:44:17,407
In a block

972
00:44:17,407 --> 00:44:20,333
So that when you're done with it, you return to the directory you started from

973
00:44:20,333 --> 00:44:21,622
So that you don't have to remember it.

974
00:44:21,621 --> 00:44:25,487
Right? If I was to just use a cd here, it would change the directory permanently

975
00:44:25,487 --> 00:44:28,623
And that's not going to be very useful. So.

976
00:44:29,795 --> 00:44:33,000
Here's my build.bat I build it, and, oh...

977
00:44:33,000 --> 00:44:36,704
Not off to a good start,  it can not find my, oh...

978
00:44:36,704 --> 00:44:38,004
How about that?

979
00:44:38,003 --> 00:44:42,635
I'm using the wrong... You can tell I use Linux most of the day.

980
00:44:42,635 --> 00:44:48,382
Linux of course uses slashes for directories, that go forward, and Windows uses backwards.

981
00:44:48,382 --> 00:44:51,087
And you can't, you can't mix  and match the two.

982
00:44:51,088 --> 00:44:52,818
Although you should've been able todo that.

983
00:44:52,818 --> 00:44:54,026
You know what I think?

984
00:44:54,025 --> 00:44:55,731
You should've been able to do that, shouldn't you?

985
00:44:55,731 --> 00:44:59,481
Oh, you know, you can do it in the cl, I bet, let's take a look...

986
00:44:59,481 --> 00:45:03,905
No, maybe not.  Alright, what's going on here? Let's take a look...

987
00:45:03,905 --> 00:45:07,608
handmade\code\win32...

988
00:45:10,454 --> 00:45:11,591
Do?

989
00:45:11,590 --> 00:45:14,853
win32_handmade.cpp

990
00:45:14,853 --> 00:45:17,651
What is the complaint?

991
00:45:17,652 --> 00:45:20,159
Syntax for the command is incorrect.

992
00:45:20,159 --> 00:45:23,955
Ohh, wow, well, I'm very glad I decided to show you that

993
00:45:23,956 --> 00:45:27,358
Because I believe, that means...

994
00:45:27,358 --> 00:45:31,189
That we did not actually enable something that we needed to enable.

995
00:45:31,188 --> 00:45:33,882
Windows, ladies and gentleman, it is always fun.

996
00:45:33,882 --> 00:45:36,739
So, I believe...

997
00:45:36,739 --> 00:45:40,222
This may actually be, let's see, pushd

998
00:45:40,222 --> 00:45:42,834
Let's see, pushd

999
00:45:43,820 --> 00:45:48,336
You're gonna have to get used to this, by the way, 'cause this sort of thing is going to happen a lot.

1000
00:45:48,336 --> 00:45:52,759
Especially in things that I've done... haven't done for a long time.

1001
00:45:52,760 --> 00:45:54,990
So that actually works just fine.

1002
00:45:54,989 --> 00:45:57,996
The pushd works fine the way that it appears to be here.

1003
00:45:57,996 --> 00:46:01,769
The mkdir works just fine.

1004
00:46:01,769 --> 00:46:04,811
So what is it actually complaining about? I don't actually know.

1005
00:46:04,811 --> 00:46:08,166
Is this just becuase we don't have command extensions enabled?

1006
00:46:08,166 --> 00:46:09,420
That would be starnge.

1007
00:46:09,420 --> 00:46:11,359
At least I feel like that would be strange.

1008
00:46:11,360 --> 00:46:14,285
But it could actually be true, I always use them

1009
00:46:14,284 --> 00:46:16,781
I always have them enabled on my machine.

1010
00:46:16,782 --> 00:46:18,442
No, it worked fine.

1011
00:46:18,442 --> 00:46:19,764
So there you go, that just works.

1012
00:46:19,764 --> 00:46:25,395
Cannot open source file: 'handmade\code\win32_handmade.cpp': No such file or directory.

1013
00:46:25,396 --> 00:46:28,519
So I'm gonna actually just go ahead and see... can we do that here?

1014
00:46:28,518 --> 00:46:30,863
So that I can see what actual directory

1015
00:46:30,864 --> 00:46:33,186
It ends up in when it tries to do the build.

1016
00:46:33,186 --> 00:46:36,437
So it ends up in w:\build Oh! doh.

1017
00:46:36,436 --> 00:46:39,559
Ok, everything is fine, I'm just not thinking straight tonight.

1018
00:46:39,559 --> 00:46:40,778
That's totally fine.

1019
00:46:40,778 --> 00:46:42,788
So what I did is I told it to go  to the build directory

1020
00:46:42,788 --> 00:46:45,795
And then I told it that this was the path to the thing, but it's not the path to the thing.

1021
00:46:45,795 --> 00:46:47,744
Because of course these paths are all relative

1022
00:46:47,744 --> 00:46:49,882
I'm using relative paths  instead of absolute paths

1023
00:46:49,882 --> 00:46:52,586
So that you can build it in your machine wherever you happen to put it.

1024
00:46:52,586 --> 00:46:54,675
So instead of typing w:&lt;b&gt;\&lt;/b&gt;handmade right?

1025
00:46:54,675 --> 00:46:57,520
If I'd typed that, it probably would've worked just fine

1026
00:46:57,521 --> 00:46:58,752
And you can see that it does.

1027
00:46:58,751 --> 00:47:01,898
But since I tried to use a relative path, I forgot I'm inside the build directory

1028
00:47:01,898 --> 00:47:04,986
So I have to go back out one to get it, yeah.

1029
00:47:04,985 --> 00:47:09,989
Fantastic.  This is the kind of stuff that you love to do when setting up a machine.

1030
00:47:09,989 --> 00:47:12,741
So that actually builds, as you can see, it did the build.

1031
00:47:12,742 --> 00:47:14,460
It didn't dump anything in our directory.

1032
00:47:14,460 --> 00:47:18,338
And so now if I dir that build directory, you can see our win32_handmade executable

1033
00:47:18,338 --> 00:47:22,239
There it is, right? It's just sitting there, it's ready to go.

1034
00:47:23,851 --> 00:47:25,500
All is well and good.

1035
00:47:25,501 --> 00:47:28,798
Now you may ask, where does all the complicated build stuff come in?

1036
00:47:28,797 --> 00:47:31,375
Well, the answer is there isn't going to be any complicated build stuff.

1037
00:47:31,376 --> 00:47:36,879
That is, what you see right here,  going to be the way we build this project

1038
00:47:36,878 --> 00:47:39,780
Right up 'til the day we ship it, and I'm not kidding.

1039
00:47:39,780 --> 00:47:42,266
If you think I'm kidding, I'm not kidding.

1040
00:47:42,266 --> 00:47:46,851
And we are going to be totally fine, you just have to trust me, on that one.

1041
00:47:46,851 --> 00:47:50,310
So that is really all you need to build a project, now, what's gonna happen here

1042
00:47:50,311 --> 00:47:52,088
And this will change a little

1043
00:47:52,088 --> 00:47:56,325
Is we are going to start putting things on this line, that are options to the compiler

1044
00:47:56,324 --> 00:47:58,031
'Cause the compiler has a lot of options

1045
00:47:58,032 --> 00:48:00,818
And we are going to do stuff that tells the compiler

1046
00:48:00,818 --> 00:48:04,592
That we wanted to produce certain types of executables, and these sorts of things.

1047
00:48:04,592 --> 00:48:07,610
We're going to control a bunch of stuff about it

1048
00:48:07,610 --> 00:48:10,559
And so, saying it's exactly this isn't quite true.

1049
00:48:10,559 --> 00:48:13,230
But this is the entirety of the code that will be happening.

1050
00:48:13,230 --> 00:48:15,516
Basically we'll just be adding things

1051
00:48:15,516 --> 00:48:19,277
To this line, we'll probably set some variables up here equal to...

1052
00:48:19,277 --> 00:48:22,876
Like a set of debug flags and a set of release flags, and then we'll pick which one

1053
00:48:22,876 --> 00:48:24,282
We're trying to use at any time.

1054
00:48:24,282 --> 00:48:26,673
So the only thing I'm gonna do, is again, I'm gonna jump ahead a litte bit here

1055
00:48:26,673 --> 00:48:29,076
And I'm gonna add some compiler flags, I'm just gonna tell it to generate

1056
00:48:29,077 --> 00:48:32,328
Debug info, that debug info that we talked about before.

1057
00:48:32,327 --> 00:48:34,487
I'm going to build that.

1058
00:48:34,487 --> 00:48:38,922
And then back in that build directory, we should be fine.

1059
00:48:38,922 --> 00:48:40,628
There it is.  So.

1060
00:48:40,628 --> 00:48:44,565
What we can do now, is we can actually go and step into our code.

1061
00:48:44,565 --> 00:48:47,224
We actually have a working Win32 program now.

1062
00:48:47,224 --> 00:48:50,590
Built by the command line using our own batch file

1063
00:48:50,590 --> 00:48:52,599
Which is all good, all good.

1064
00:48:52,599 --> 00:48:57,336
If I now want to actually go and step into that, and look it in the debugger

1065
00:48:57,335 --> 00:49:00,423
That devenv thing that brings up Visual Studio, we just have to call that

1066
00:49:00,423 --> 00:49:04,882
With the actual path to the executable that we are going to run.

1067
00:49:04,882 --> 00:49:06,322
So there we go.

1068
00:49:07,146 --> 00:49:08,609
Up comes our project.

1069
00:49:08,608 --> 00:49:11,605
Now if you click in Solution Explorer, you will see that what happens

1070
00:49:11,605 --> 00:49:14,251
You know, we never created a project, right? in here, right? So what happened?

1071
00:49:14,251 --> 00:49:17,049
Well basically if you tell devenv  to just load an executable

1072
00:49:17,050 --> 00:49:18,350
From the command line like this

1073
00:49:18,349 --> 00:49:22,621
If will just make a dummy solution for it with that executable

1074
00:49:22,621 --> 00:49:25,744
And you can go in and set the debug properties on it, just the same.

1075
00:49:25,744 --> 00:49:30,969
Just as if, it was some project that you had created in here, right?

1076
00:49:30,969 --> 00:49:35,613
So, what I do wanna do is, I do want to say where we're going to run from.

1077
00:49:35,614 --> 00:49:39,677
Becuase one of the things that's true in any low-level piece of code

1078
00:49:39,677 --> 00:49:42,150
Is that you basically have a directory

1079
00:49:42,150 --> 00:49:45,575
That the program was launched in, and it's called the current working directory

1080
00:49:45,574 --> 00:49:49,719
And basically everything that you do when you reference things in your code

1081
00:49:49,719 --> 00:49:51,403
When you try to load files

1082
00:49:51,403 --> 00:49:54,213
If you use a relative path, like the kinds I was using here...

1083
00:49:54,213 --> 00:49:56,117
And just to be clear about what a relative path is

1084
00:49:56,117 --> 00:49:58,903
Again, something you should probably look up on your own, it's very straightforward.

1085
00:49:58,903 --> 00:50:01,608
But, a relative path is basically saying

1086
00:50:01,608 --> 00:50:05,636
I'm at some place, and you can see  the current working directory for my shell

1087
00:50:05,637 --> 00:50:07,971
Right here, w:&lt;b&gt;\&lt;/b&gt;handmade\code Right?

1088
00:50:07,971 --> 00:50:10,280
But if I want to reference something

1089
00:50:10,280 --> 00:50:13,485
I can use an absolute path by  saying, the whole path

1090
00:50:13,485 --> 00:50:16,619
Like dir w:\build says  dir that directory

1091
00:50:16,619 --> 00:50:19,058
You know, tells me exactly where it is and it does it.

1092
00:50:19,059 --> 00:50:20,835
But I can also use a relative path

1093
00:50:20,835 --> 00:50:24,050
Which is go back one, go back two, then go into build

1094
00:50:24,050 --> 00:50:25,061
That's relative.

1095
00:50:25,061 --> 00:50:27,151
But the question is relative to what?

1096
00:50:27,150 --> 00:50:30,331
And so basically just like the shell has a current working directory

1097
00:50:30,331 --> 00:50:32,259
We have a current working directory

1098
00:50:32,259 --> 00:50:34,918
And that current working directory is important

1099
00:50:34,918 --> 00:50:37,077
Because if we want our game to run

1100
00:50:37,077 --> 00:50:39,469
Without any external knowledge of where it is

1101
00:50:39,469 --> 00:50:42,952
We kind of want it to load things out of wherever it happens to be

1102
00:50:42,952 --> 00:50:45,285
And wherever the user happens to run it.

1103
00:50:46,922 --> 00:50:48,989
So to set ourselves up for success

1104
00:50:48,989 --> 00:50:51,253
I am basically going to say, well

1105
00:50:51,253 --> 00:50:54,005
Let's make a directory under handmade

1106
00:50:54,005 --> 00:50:55,003
Right?

1107
00:50:55,003 --> 00:50:57,952
Called, hmmm, I usually call it data.

1108
00:50:57,952 --> 00:51:00,587
To be honest with you, I know it's not a great name.

1109
00:51:01,516 --> 00:51:03,733
I'm open to other suggestions.

1110
00:51:03,733 --> 00:51:05,730
So I'm gonna make a directory called data

1111
00:51:05,731 --> 00:51:07,565
And I'm gonna say that we're gonna put

1112
00:51:07,565 --> 00:51:09,898
Basically what we will be  shipping with the game

1113
00:51:09,898 --> 00:51:12,568
So the packaged art assets or anything else like that

1114
00:51:12,568 --> 00:51:15,576
I'm gonna put those underneath the data directory.

1115
00:51:15,576 --> 00:51:17,875
So in order to tell this

1116
00:51:17,875 --> 00:51:19,905
That when we debug the program

1117
00:51:19,905 --> 00:51:22,831
We want you to run it in that directory.

1118
00:51:22,831 --> 00:51:28,172
I'm gonna put that, ups,  I'm gonna put that into the home directory

1119
00:51:28,172 --> 00:51:30,772
So that it knows the working directory, so that it knows

1120
00:51:30,773 --> 00:51:32,062
That that's where I want it.

1121
00:51:32,061 --> 00:51:34,429
So I'm gonna go in here, well I'm just gonna type it in.

1122
00:51:34,429 --> 00:51:36,067
See Working Directory?

1123
00:51:36,067 --> 00:51:38,378
I'm gonna type in the working directory, I'm sorry that's tiny.

1124
00:51:38,378 --> 00:51:39,225
Hopefully this...

1125
00:51:39,224 --> 00:51:41,291
We will almost never be editing these project settings

1126
00:51:41,291 --> 00:51:43,253
So hopefully you don't even really have to read this.

1127
00:51:43,253 --> 00:51:44,728
There's a thing called Working Directory

1128
00:51:44,728 --> 00:51:49,940
We're just gonna put in that handmade\data and we're gonna hit return there, right?

1129
00:51:49,940 --> 00:51:51,984
So now when we run our code

1130
00:51:51,985 --> 00:51:54,144
It will run it as if it was running out of this directory

1131
00:51:54,143 --> 00:51:56,454
So we can kind of, always be running

1132
00:51:56,454 --> 00:51:59,867
Sort of in a closer configuration to what we will actually ship

1133
00:51:59,867 --> 00:52:02,445
To end users who buy the game  and want to play it

1134
00:52:02,445 --> 00:52:05,092
So that we won't have surprises down the road.

1135
00:52:05,092 --> 00:52:06,056
Ok.

1136
00:52:06,056 --> 00:52:07,809
Furthermore, this Arguments field here

1137
00:52:07,809 --> 00:52:10,108
Is where we'll put things that we pass to the game

1138
00:52:10,108 --> 00:52:13,045
For like, you know, parameters and stuff, debug parameters that we want.

1139
00:52:13,045 --> 00:52:13,811
Alright.

1140
00:52:13,811 --> 00:52:16,307
So once we've set that, we can hit F11

1141
00:52:16,307 --> 00:52:18,257
And F11 will... oops

1142
00:52:18,257 --> 00:52:20,498
I gotta close this Properties window.

1143
00:52:20,498 --> 00:52:22,588
Well, no, it closed it for me, well thank you.

1144
00:52:22,588 --> 00:52:26,454
We're gonna hit F11 which means start our application

1145
00:52:26,454 --> 00:52:28,636
And stop on the first line of main

1146
00:52:28,637 --> 00:52:30,402
Which is exactly what it did.

1147
00:52:30,402 --> 00:52:33,537
And you can see the little thing highlighted here, where it stopped.

1148
00:52:33,536 --> 00:52:35,034
This is actually our code.

1149
00:52:35,034 --> 00:52:38,598
This is the thing that we built, it's exactly what we hoped for.

1150
00:52:38,599 --> 00:52:41,059
So, we can go like this, it ends.

1151
00:52:41,059 --> 00:52:43,346
Our first Windows program ladies and gentleman.

1152
00:52:43,347 --> 00:52:45,762
But, you may ask what is this all this stuff here.

1153
00:52:45,762 --> 00:52:46,958
That's a very good question.

1154
00:52:46,958 --> 00:52:49,593
We covered it in the intro stream but I'm gonna mention it a little bit

1155
00:52:49,592 --> 00:52:52,797
In this stream aswell because it's kind of important.

1156
00:52:52,797 --> 00:52:54,144
So.

1157
00:52:54,144 --> 00:52:56,617
Now that we have our build going

1158
00:52:56,617 --> 00:53:00,402
We can start to look at actual Win32 code.

1159
00:53:00,402 --> 00:53:05,871
When I said this was the entry point for Windows, what does that mean?

1160
00:53:05,871 --> 00:53:07,994
You know, what is an entry point?

1161
00:53:09,911 --> 00:53:13,753
For those of you who are well familiar with programming or who took the intro...

1162
00:53:13,753 --> 00:53:15,980
Who watched the intro stream.

1163
00:53:15,980 --> 00:53:17,224
You know that this is a function.

1164
00:53:17,224 --> 00:53:19,465
It's something that gets called,  it executes the code inside of it

1165
00:53:19,465 --> 00:53:21,578
And it returns to whoever who called it

1166
00:53:21,579 --> 00:53:23,204
And that is what it does

1167
00:53:23,204 --> 00:53:26,769
But the question is who called us and how did they do it?

1168
00:53:26,768 --> 00:53:28,045
Well, the answer is

1169
00:53:28,045 --> 00:53:32,004
That in this particular way of compiling which we're doing right now

1170
00:53:32,005 --> 00:53:35,974
It's not actually Windows the  operating system that calls into us.

1171
00:53:35,974 --> 00:53:39,110
The person who actually calls into us is the C Runtime Library.

1172
00:53:39,110 --> 00:53:42,918
Now the C Runtime Library is something that ships with al C compilers

1173
00:53:42,918 --> 00:53:45,530
As mandated by the C specification

1174
00:53:45,530 --> 00:53:47,260
And if you go online

1175
00:53:47,260 --> 00:53:50,917
In fact you can look for  c runtime library

1176
00:53:50,916 --> 00:53:54,679
You will find, probably, some documentation somewhere

1177
00:53:54,679 --> 00:53:56,757
That talks about what is in it.

1178
00:53:56,757 --> 00:53:59,358
So let's see if I can get something for example here.

1179
00:53:59,358 --> 00:54:03,456
Yes, here we go, CRT,  C Runtime Library Features.

1180
00:54:03,885 --> 00:54:06,543
If I go into something like  Files and Streams

1181
00:54:06,543 --> 00:54:10,897
And open that up, you can see that it's basically got a bunch of documentation

1182
00:54:10,898 --> 00:54:14,021
That tells me about the sorts of things that this thing can do.

1183
00:54:14,021 --> 00:54:16,065
Right? It's like some, you know, here we go, here's some

1184
00:54:16,065 --> 00:54:17,992
Functions that are in the C Runtime Library

1185
00:54:17,992 --> 00:54:21,498
setlocale, _wsetlocale, who knows, we don't really care about these.

1186
00:54:21,498 --> 00:54:25,829
But point being, this is stuff that is not part of Windows.

1187
00:54:25,829 --> 00:54:28,057
It is not in the operating system.

1188
00:54:28,057 --> 00:54:32,480
It's just part of the standard library that everyone has to support

1189
00:54:32,481 --> 00:54:36,951
When they ship a C compiler, because code will be written to expect it to be there.

1190
00:54:37,311 --> 00:54:40,527
That's all well and good, we won't really be calling any of that

1191
00:54:40,527 --> 00:54:42,454
But, the truth of the matter is

1192
00:54:42,454 --> 00:54:46,680
It's actually very very difficult nowadays to build an application

1193
00:54:46,679 --> 00:54:50,359
Without the compiler essentially sticking the C Runtime Library in there.

1194
00:54:50,360 --> 00:54:53,693
So I'm not really gonna call hardly anything from the C Runtime Library

1195
00:54:53,693 --> 00:54:57,710
'Cause I wanna show you how to make basically everything from scratch yourself

1196
00:54:57,710 --> 00:55:01,168
But, we will still have to link  with the C Runtime Library

1197
00:55:01,168 --> 00:55:03,467
Because if we don't link  with the C Runtime Library

1198
00:55:03,467 --> 00:55:05,384
The compiler is going to be very unhappy.

1199
00:55:05,384 --> 00:55:08,193
It counts on the C Runtime Library for a number of things

1200
00:55:08,193 --> 00:55:09,273
Like stack grows

1201
00:55:09,273 --> 00:55:12,001
Like C++ initializer list that happen at startup time.

1202
00:55:12,001 --> 00:55:15,949
All sorts of things are actually hardcoded into the compiler to call

1203
00:55:15,949 --> 00:55:18,561
Into that C Runtime Library so that if it's not there

1204
00:55:18,561 --> 00:55:22,323
You have to implement all that  code yourself, to compensate

1205
00:55:22,322 --> 00:55:25,909
For the fact that the compiler was basically doing a lousy job.

1206
00:55:27,942 --> 00:55:30,186
I don't think that's particularly useful

1207
00:55:30,186 --> 00:55:33,074
And nobody I know actually ships

1208
00:55:33,074 --> 00:55:35,592
Without linking to the  C Runtime Library.

1209
00:55:35,592 --> 00:55:38,645
So we are not actually going to address that here.

1210
00:55:38,646 --> 00:55:41,468
But, what that does mean is

1211
00:55:41,467 --> 00:55:45,611
You should be aware, when you get called, it's not Windows who is calling you.

1212
00:55:45,612 --> 00:55:48,514
If I hit F11 here

1213
00:55:48,514 --> 00:55:51,208
I can bring up something called the Call Stack, right?

1214
00:55:51,208 --> 00:55:53,298
And waht the call stack is, oh...

1215
00:55:53,297 --> 00:55:56,014
Awesome, is this not set? There we go.  Ok.

1216
00:55:56,014 --> 00:55:57,826
So basically you can see it came up

1217
00:55:57,826 --> 00:56:01,889
In I guess what you might want to call training-wheels mode.

1218
00:56:01,889 --> 00:56:06,335
The call stack is a thing that shows you where you are in your program

1219
00:56:06,335 --> 00:56:09,075
Basically by showing all of the functions

1220
00:56:09,076 --> 00:56:12,677
That have been called, that called eachother that called eachother, to call to you.

1221
00:56:12,677 --> 00:56:17,365
Right? It's the entire stack of functions up to the point where you are.

1222
00:56:17,365 --> 00:56:21,730
So, it decided to only show me my actual function

1223
00:56:21,731 --> 00:56:25,771
Right? It didn't show me any functions that  were outside of us, in the C Runtime Library.

1224
00:56:25,771 --> 00:56:30,113
But, it looks like there's a button here called Show External Code

1225
00:56:30,112 --> 00:56:31,692
You can see it right here  there's a checkbox

1226
00:56:31,692 --> 00:56:33,514
If you hit Show External Code

1227
00:56:33,514 --> 00:56:36,254
All of the sudden you can see this other stuff that happens.

1228
00:56:36,255 --> 00:56:41,548
ntdll.dll and kernel32.dll are the actual operating system.

1229
00:56:41,548 --> 00:56:44,730
We're gonna talk more about what dlls are and that sort of stuff much later

1230
00:56:44,730 --> 00:56:46,715
So don't get too hung up on what those are

1231
00:56:46,715 --> 00:56:48,922
But point being that's code that's actually in the operating system.

1232
00:56:48,922 --> 00:56:51,684
If we jump out there we're just  gonna see assembly language code

1233
00:56:51,684 --> 00:56:54,795
That's basically stuff that's in the operating  system that we don't have source code to

1234
00:56:54,795 --> 00:56:58,731
'Cause Microsoft does not release the source code to Windows.

1235
00:56:58,731 --> 00:57:03,190
But, after Windows calls into our executable, you'll notice

1236
00:57:03,190 --> 00:57:06,383
The first thing that's called is not us, at all.

1237
00:57:06,382 --> 00:57:08,472
It is actually...

1238
00:57:08,472 --> 00:57:10,284
Some code we didn't write.

1239
00:57:10,284 --> 00:57:12,454
It is crt0.c

1240
00:57:12,454 --> 00:57:14,313
And you can see that  that, if you hover over it

1241
00:57:14,313 --> 00:57:17,144
You'll actually get a tooltip that  shows you were it is, and it's actually

1242
00:57:17,144 --> 00:57:19,420
Out in the Visual Studio directory

1243
00:57:19,420 --> 00:57:23,125
So this is the code that they shipped with the C Runtime Library.

1244
00:57:23,125 --> 00:57:25,306
And they shipped the source code to the C Runtime Library

1245
00:57:25,306 --> 00:57:27,547
So even though it's compiled code that we're in right now

1246
00:57:27,547 --> 00:57:30,008
We can actually view the source, which is kind of nice of them

1247
00:57:30,009 --> 00:57:33,005
To provide that so we can see what's going on.

1248
00:57:33,005 --> 00:57:36,916
So as you can see there's a whole host of things that happens.

1249
00:57:36,916 --> 00:57:40,202
And this is actually

1250
00:57:40,202 --> 00:57:42,978
The place where things start up in Windows.

1251
00:57:42,978 --> 00:57:47,180
Right? So if we really really truly  want to see

1252
00:57:47,179 --> 00:57:50,477
Where the code starts  when Windows calls us...

1253
00:57:50,478 --> 00:57:54,541
When Windows get-loads our executables, does its patching, and gets us ready to go

1254
00:57:54,541 --> 00:57:56,724
This is actually where the code starts.

1255
00:57:56,724 --> 00:57:59,521
These things all happened first

1256
00:57:59,521 --> 00:58:01,413
They're in code we did not write

1257
00:58:01,414 --> 00:58:05,176
And they are doing a bunch of things to set up the C Runtime Library

1258
00:58:05,175 --> 00:58:08,356
Which unfortunately we're not even going to use, but

1259
00:58:08,356 --> 00:58:11,166
It's good to know that it's there just so you don't get confused.

1260
00:58:11,166 --> 00:58:13,929
It then will actually dispatch to us

1261
00:58:13,929 --> 00:58:16,611
And so you can see if I step into there

1262
00:58:16,612 --> 00:58:18,376
That's where we go, right?

1263
00:58:18,376 --> 00:58:19,352
So it's all good.

1264
00:58:20,083 --> 00:58:22,068
That is what is actually happening.

1265
00:58:22,068 --> 00:58:23,078
Alright.

1266
00:58:23,077 --> 00:58:24,855
So one more thing I wanna do

1267
00:58:24,855 --> 00:58:28,070
Just to get things to a place where we have done all of the drudgework.

1268
00:58:28,070 --> 00:58:32,029
So that we can actually do something interesting on tomorrow's stream.

1269
00:58:32,030 --> 00:58:33,829
If I hit, let's see...

1270
00:58:33,829 --> 00:58:36,789
I want to be able to basically make it so that I can compile

1271
00:58:36,789 --> 00:58:40,458
My code from inside Emacs.

1272
00:58:40,458 --> 00:58:42,211
But I don't have it set up to do that yet.

1273
00:58:42,211 --> 00:58:45,509
What I wanna do is I wanna make it  so that I can hit Alt-M, basically

1274
00:58:45,509 --> 00:58:49,293
And I can... I can basically, oh you know what?

1275
00:58:49,293 --> 00:58:52,335
I think I can actually just do it right here, does that actually work?

1276
00:58:52,335 --> 00:58:53,786
No, I guess it doesn't.

1277
00:58:53,786 --> 00:58:55,702
You know what? Maybe I'll save that to next time

1278
00:58:55,702 --> 00:58:58,047
'Cause I don't actually wanna kind of complicate things for that matter.

1279
00:58:58,047 --> 00:59:00,880
We probably have, maybe 5 minutes left on the stream.

1280
00:59:00,880 --> 00:59:04,096
I will show you how to get that stuff working in the next one

1281
00:59:04,097 --> 00:59:06,615
But, for right now I guess what we could do

1282
00:59:06,615 --> 00:59:09,425
Is we could at least just have our Windows program do something

1283
00:59:09,425 --> 00:59:12,525
So that we know that it's actually running and doing something amusing.

1284
00:59:12,525 --> 00:59:16,461
So what I'm gonna do, is I'm gonna call a function called MessageBoxEx

1285
00:59:16,460 --> 00:59:18,492
Why not? Actually I guess I could just call MessageBox

1286
00:59:18,492 --> 00:59:20,152
But I think I wanna call MessageBoxEx

1287
00:59:20,152 --> 00:59:21,928
'Cause, you know, it's a little more fun.

1288
00:59:21,929 --> 00:59:24,960
MessageBoxEx is just something that pops up a message box.

1289
00:59:24,960 --> 00:59:27,920
It's the easiest thing for us to call that we can quickly see

1290
00:59:27,920 --> 00:59:29,521
That our code is actually working.

1291
00:59:29,521 --> 00:59:32,460
So if we look at it here we can see what it actually calls.

1292
00:59:32,460 --> 00:59:34,932
We can look at MessageBox  and see if it's a little simpler

1293
00:59:34,932 --> 00:59:37,068
Because they both do basically the same thing, yeah, that's even simpler

1294
00:59:37,068 --> 00:59:39,646
So we'll just call MessageBox, it's even simpler.

1295
00:59:39,646 --> 00:59:42,293
MessageBox basically takes a bunch of things

1296
00:59:42,293 --> 00:59:44,836
That we'll be covering more in detail what they actually are.

1297
00:59:44,835 --> 00:59:47,761
But the HWND is basically a handle to a window

1298
00:59:47,762 --> 00:59:50,026
And we haven't open a window yet so we're just gonna pass 0 there.

1299
00:59:50,025 --> 00:59:52,695
It then takes a string, just a regular old string

1300
00:59:52,695 --> 00:59:53,938
ANSI string

1301
00:59:53,938 --> 00:59:58,233
That's basically what you want to... excuse me

1302
00:59:58,233 --> 01:00:00,927
What you want to display  in the message box.

1303
01:00:00,927 --> 01:00:05,467
This is Handmade Hero.

1304
01:00:05,467 --> 01:00:08,509
And it has a caption

1305
01:00:08,509 --> 01:00:10,447
Which is the thing that appears sort of as the title

1306
01:00:10,447 --> 01:00:12,838
I believe of it, so let's make that Handmade Hero.

1307
01:00:12,838 --> 01:00:16,543
Right? And then it has like a little, sort of a

1308
01:00:16,543 --> 01:00:18,900
I wanna say a predefined value here

1309
01:00:18,900 --> 01:00:21,894
That basically says what kind  of like icon it is and...

1310
01:00:21,894 --> 01:00:25,250
What you want it to be, well we don't really have anything to ask the user

1311
01:00:25,250 --> 01:00:27,269
So we're gonna to pass MB_OK

1312
01:00:27,269 --> 01:00:29,302
And we don't really have a...

1313
01:00:29,302 --> 01:00:32,077
I guess anything in particular we want to...

1314
01:00:32,077 --> 01:00:35,467
Warn about anything so we are going  to pass MB_ICONINFORMATION

1315
01:00:35,467 --> 01:00:38,010
So, for those of you who were with me

1316
01:00:38,010 --> 01:00:39,879
In the intro stream

1317
01:00:39,878 --> 01:00:43,163
This is a bitwise operator, it ors things together.

1318
01:00:43,164 --> 01:00:46,531
If you're uncomfortable with that I highly recommend watching the intro stream

1319
01:00:46,530 --> 01:00:49,549
Because it will tell you about that operator and how it works.

1320
01:00:49,550 --> 01:00:55,981
But in that stream people were asking, do you do much bitwise manipulation in real coding?

1321
01:00:55,981 --> 01:00:57,398
And I said something like:

1322
01:00:57,398 --> 01:01:00,579
I bet we'll do some in the first stream, you do it all the time.

1323
01:01:00,579 --> 01:01:03,621
And ladies and gentleman,  even though I was not planning that

1324
01:01:03,621 --> 01:01:05,235
You can see right here

1325
01:01:05,235 --> 01:01:07,394
That it actually happens and the reason that it happens

1326
01:01:07,393 --> 01:01:11,225
Is because the way that people often likes to do flags

1327
01:01:11,226 --> 01:01:12,827
Like when you just wanna set some flags

1328
01:01:12,827 --> 01:01:15,916
Like ok, I'm calling this function and I wanna set some things like:

1329
01:01:15,916 --> 01:01:18,354
Do this, do that, don't do this, don't do that.

1330
01:01:18,353 --> 01:01:20,199
Some little booleans like toggles.

1331
01:01:20,199 --> 01:01:22,614
A lot of times what they'll do is is they'll use a bitfield

1332
01:01:22,614 --> 01:01:24,553
Which is basically saying that each bit

1333
01:01:24,554 --> 01:01:28,014
In a particular sized thing like in a 32-bit value

1334
01:01:28,014 --> 01:01:30,068
Each bit means a specific thing

1335
01:01:30,068 --> 01:01:32,192
And what you'll do is you'll or the bits together

1336
01:01:32,193 --> 01:01:33,842
To set the things that you want set.

1337
01:01:33,842 --> 01:01:35,733
So in this case we want MB_OK

1338
01:01:35,733 --> 01:01:38,311
To say that it's a dialog box that has an OK button.

1339
01:01:38,311 --> 01:01:41,387
And in this case we want MB_ICONINFORMATION to say we want to have a little

1340
01:01:41,387 --> 01:01:43,210
Information symbol next to it.

1341
01:01:43,210 --> 01:01:45,323
And we're gonna or those two together

1342
01:01:45,324 --> 01:01:48,552
To basically say that that is what our dialog box is going to do.

1343
01:01:48,552 --> 01:01:51,942
Now if I go ahead and do our build...

1344
01:01:51,942 --> 01:01:54,786
Oops, if I actually go to the right directory and do our build

1345
01:01:54,786 --> 01:01:57,143
It will rebuild our thing, oh...

1346
01:01:57,143 --> 01:01:59,465
And, we get to the other part of our build

1347
01:01:59,465 --> 01:02:00,742
So...

1348
01:02:00,742 --> 01:02:02,844
When we actually call something

1349
01:02:02,844 --> 01:02:06,048
And this is a little bit confusing, I, I...

1350
01:02:06,047 --> 01:02:09,356
This is one of those things that you wish the compiler didn't do for you

1351
01:02:09,356 --> 01:02:12,503
But it does do it for you and so it's kind of a little confusing.

1352
01:02:12,503 --> 01:02:13,635
But.

1353
01:02:13,635 --> 01:02:16,613
When you compile a program, as we did here

1354
01:02:16,612 --> 01:02:19,608
And you can see our command to compile our program

1355
01:02:19,608 --> 01:02:22,313
Did not actually include anything other than our code

1356
01:02:22,313 --> 01:02:24,170
Right? It's handmade.cpp

1357
01:02:24,170 --> 01:02:26,991
And when I built it you saw me run it and everything worked properly

1358
01:02:26,992 --> 01:02:29,071
So you're like: oh ok, that makes sense.

1359
01:02:29,070 --> 01:02:32,844
I build the cpp file, right?  It compiles the code, it links it together

1360
01:02:32,844 --> 01:02:35,816
It builds that executable, all the stuff we covered in the intro stream

1361
01:02:35,815 --> 01:02:39,067
If you're unfamiliar with it you can take a look at that, again, for more detail.

1362
01:02:39,067 --> 01:02:42,387
It builds our executable and  then we run it and it's all good, right?

1363
01:02:42,387 --> 01:02:45,812
That's all that had to happen, but that's not actually entirely true.

1364
01:02:45,811 --> 01:02:47,438
What actually happens is

1365
01:02:47,438 --> 01:02:50,526
Windows needs to basically bind to us

1366
01:02:50,525 --> 01:02:52,533
And we did talk about this in  the stream a little bit too

1367
01:02:52,534 --> 01:02:57,248
But Windows basically needs to find the  places in our executable where we try to call it.

1368
01:02:57,248 --> 01:03:00,347
And it needs to be able to go in there, reach in there

1369
01:03:00,347 --> 01:03:02,286
And patch those locations

1370
01:03:02,286 --> 01:03:07,069
To point to its own code that's running at that time in memory, right?

1371
01:03:07,661 --> 01:03:11,109
And in order to do that it uses what's called an import library.

1372
01:03:11,110 --> 01:03:13,026
What happens is when you link

1373
01:03:13,025 --> 01:03:15,753
When you actually build your program in here

1374
01:03:15,753 --> 01:03:18,969
And it links together the obj files and makes an executable

1375
01:03:18,969 --> 01:03:21,628
What it has to do is it has to  have a library that says

1376
01:03:21,628 --> 01:03:25,971
Here are the functions that Windows  actually is going to call...

1377
01:03:25,971 --> 01:03:28,630
Here are the functions you're going to call that are in Windows

1378
01:03:28,630 --> 01:03:30,731
And I'm going to put little markers in

1379
01:03:30,731 --> 01:03:32,902
This library tells me how to put little markers in

1380
01:03:32,902 --> 01:03:33,889
Where they should go

1381
01:03:33,889 --> 01:03:36,943
So that they can actually be found  by Windows when it loads it

1382
01:03:36,943 --> 01:03:38,011
And off you go.

1383
01:03:38,010 --> 01:03:40,971
And in the intro stream I drew a little diagram that shows like how that works

1384
01:03:40,971 --> 01:03:43,385
Where Windows loads it, it looks at that table of fixups

1385
01:03:43,385 --> 01:03:44,976
It goes through, patches your executable

1386
01:03:44,976 --> 01:03:46,857
And that sort of stuff, so if you're interested about that

1387
01:03:46,858 --> 01:03:52,163
I highly recommend watching the episode of the intro stream that talks about that.

1388
01:03:52,163 --> 01:03:56,215
Anyway, the problem is, we didn't specify any import libraries

1389
01:03:56,215 --> 01:04:00,581
So technicaly we should not actually have been able to call anything in Windows

1390
01:04:00,581 --> 01:04:01,858
At all.

1391
01:04:01,858 --> 01:04:06,060
And I don't actually know if it's true because I think they may sneak kernel32 in there

1392
01:04:06,059 --> 01:04:08,753
I'm not actually sure if they do, you know what?  I'm just gonna go ahead and test it

1393
01:04:08,753 --> 01:04:09,972
Since I know how to test it.

1394
01:04:09,972 --> 01:04:12,585
Let's actually just call... Well, you know what?

1395
01:04:12,585 --> 01:04:15,894
I'll call GetModuleHandle, let's see...

1396
01:04:17,577 --> 01:04:20,166
Yeah, so they do. They actually do sneak it in there.

1397
01:04:20,166 --> 01:04:22,802
So basically what happens is they sneak in

1398
01:04:22,802 --> 01:04:25,461
One import library or at least one import library.

1399
01:04:25,460 --> 01:04:28,734
The import library that they sneak in is the import library for the kernel.

1400
01:04:28,735 --> 01:04:33,414
So basically you're allowed to call things that happen to call into the kernel.

1401
01:04:33,414 --> 01:04:35,167
You can call those.

1402
01:04:35,166 --> 01:04:39,264
We'll see a bunch of them when we actually  start programming Windows for real tomorrow.

1403
01:04:39,264 --> 01:04:40,413
We'll see a bunch of calls.

1404
01:04:40,414 --> 01:04:42,051
But when you call into the kernel

1405
01:04:42,050 --> 01:04:44,628
You're actually fine because they snuck it in there for you.

1406
01:04:44,628 --> 01:04:47,380
If you call into something else

1407
01:04:47,380 --> 01:04:49,180
For example the UI system

1408
01:04:49,179 --> 01:04:52,164
Which exists in something called user32.dll

1409
01:04:52,164 --> 01:04:53,777
It doesn't include it.

1410
01:04:53,777 --> 01:04:55,425
So basically what I have to do

1411
01:04:55,425 --> 01:04:57,039
Is I have to go in here

1412
01:04:57,039 --> 01:04:58,757
And I have to specify, and I'm...

1413
01:04:58,757 --> 01:05:01,509
Totally doing this by memory, I'm assuming this is correct.

1414
01:05:01,510 --> 01:05:04,540
Is it /LINKER or /LINK?

1415
01:05:04,539 --> 01:05:08,057
/LINKER... let's, I don't even remember what it is.

1416
01:05:08,057 --> 01:05:09,485
What is the option for the linker?

1417
01:05:09,485 --> 01:05:11,505
In fact do I even  need to specify the option for the linker?

1418
01:05:11,505 --> 01:05:13,003
No I don't, nevermind.

1419
01:05:13,003 --> 01:05:15,163
So, anyway...

1420
01:05:15,163 --> 01:05:18,273
If I go in there and give it the import library

1421
01:05:18,273 --> 01:05:20,270
That I actually need to call the function

1422
01:05:20,271 --> 01:05:23,151
And where that function is actually mentioned so that Windows knows where it is

1423
01:05:23,150 --> 01:05:25,924
Then all of the sudden my code compiles, right?

1424
01:05:25,925 --> 01:05:27,249
If I don't do that

1425
01:05:27,248 --> 01:05:29,895
If I don't specify the import libraries that I need

1426
01:05:29,896 --> 01:05:31,173
Right? And I compile it

1427
01:05:31,172 --> 01:05:33,413
Then I'll get what's called an  unresolved external symbol.

1428
01:05:33,414 --> 01:05:35,713
Again, covered in the stream if you don't know what that is

1429
01:05:35,713 --> 01:05:39,323
They happen in other languages aswell so I hope that you were familiar with them.

1430
01:05:39,322 --> 01:05:40,775
But basically what it says is

1431
01:05:40,775 --> 01:05:44,280
I can't find the actual, sort of...

1432
01:05:44,280 --> 01:05:46,358
Actual call that I need to make

1433
01:05:46,358 --> 01:05:49,319
That you're saying that windows.h defined

1434
01:05:49,320 --> 01:05:52,652
I can't actually find where that  function actually is.

1435
01:05:52,652 --> 01:05:55,135
And it makes sense that it can't find it because we didn't define it

1436
01:05:55,135 --> 01:05:58,293
And neither did windows.h, all it did was say that there was one.

1437
01:05:58,293 --> 01:06:00,882
So what the library does is it actually gives it

1438
01:06:00,882 --> 01:06:03,076
The information it needs

1439
01:06:03,077 --> 01:06:05,980
To actually sort of insert

1440
01:06:05,980 --> 01:06:08,684
The placeholder that says: When Windows loads this

1441
01:06:08,684 --> 01:06:10,751
Patch this up to call into Windows code

1442
01:06:10,751 --> 01:06:13,990
'Cause this doesn't exist in our executable, it exists in Windows.

1443
01:06:13,990 --> 01:06:17,496
Now, the question is, how did I know that it was user32?

1444
01:06:17,496 --> 01:06:20,864
I mean, I knew 'cause it was memory, but what would you do if you didn't know that?

1445
01:06:20,864 --> 01:06:24,764
Well the anser is: I said, you gotta get used to using MSDN, and I meant it.

1446
01:06:24,764 --> 01:06:27,400
What you wanna do is you wanna scroll down to the bottom

1447
01:06:27,400 --> 01:06:31,163
Of MSDN's documentation on the function you're trying to call.

1448
01:06:32,775 --> 01:06:34,574
And down there you will find...

1449
01:06:35,550 --> 01:06:38,720
Explanations of that particular function.

1450
01:06:38,719 --> 01:06:40,135
Now you will see...

1451
01:06:40,135 --> 01:06:42,737
What the minimum client is  that you can call it.

1452
01:06:42,737 --> 01:06:45,836
And if you care about server then you  actually can find that aswell, but we don't.

1453
01:06:45,836 --> 01:06:47,798
We only ship to basic client OSs.

1454
01:06:47,798 --> 01:06:50,097
We're not gonna ship to people running servers, certainly.

1455
01:06:50,561 --> 01:06:52,790
The minimum supported client  so you can find out

1456
01:06:52,791 --> 01:06:55,345
If that function is callable by you

1457
01:06:55,344 --> 01:06:57,063
On your target platform.

1458
01:06:57,063 --> 01:07:00,755
So if I'm targeting Windows 95, let's say

1459
01:07:00,755 --> 01:07:02,335
I can't call this function.

1460
01:07:02,335 --> 01:07:04,737
I have to call some other function, let's say.

1461
01:07:04,737 --> 01:07:07,024
Now I actually think this function was in Windows 95

1462
01:07:07,025 --> 01:07:08,789
So I think this might be a little agressive

1463
01:07:08,789 --> 01:07:11,192
When it says Windows 2000 Professional, but point being...

1464
01:07:11,193 --> 01:07:13,678
Certainly antyhing after that it's fine, Windows XP...

1465
01:07:13,677 --> 01:07:16,115
Windows XP will probably be  our minimum platform

1466
01:07:16,115 --> 01:07:19,807
Right? So we can, we're, we're scot-free.

1467
01:07:19,807 --> 01:07:21,967
It tells you what header it's in

1468
01:07:21,967 --> 01:07:26,901
Basically it says: Well it's in Winuser but include Windows.h which includes Winuser.

1469
01:07:26,900 --> 01:07:30,708
It tells you what dll it's in, so that's actually what will get loaded at runtime

1470
01:07:30,708 --> 01:07:31,730
To actually support you.

1471
01:07:31,731 --> 01:07:34,785
And we'll talk about what dlls are later 'cause we'll be manually loading them

1472
01:07:34,784 --> 01:07:37,837
For things like the gamepad support.

1473
01:07:37,838 --> 01:07:41,124
And it tells you what library  you will need to link with.

1474
01:07:41,123 --> 01:07:42,945
So all I did, right?

1475
01:07:42,945 --> 01:07:45,210
Essentially was, I'm short-circuiting this process 'cause I knew

1476
01:07:45,210 --> 01:07:47,253
But all you actually have to do when you call something

1477
01:07:47,253 --> 01:07:49,389
Is go find the documentation for the function

1478
01:07:49,389 --> 01:07:51,061
Go down to the bottom

1479
01:07:51,061 --> 01:07:52,860
And right there it will tell you

1480
01:07:52,860 --> 01:07:55,728
What the lib is that you need, now there's one other thing

1481
01:07:55,728 --> 01:07:58,050
We covered this on the other stream but I'm gonna mention it again.

1482
01:07:58,050 --> 01:08:00,813
A lot of functions, if they take strings in Windows

1483
01:08:00,813 --> 01:08:03,786
They have an ANSI and a wide character version.

1484
01:08:03,786 --> 01:08:07,873
The wide character version is  if you have UTF-16-encoded stuff

1485
01:08:07,873 --> 01:08:09,777
And the ANSI version is if you have

1486
01:08:09,777 --> 01:08:13,445
Just regular ASCII that you're going to try and pass it.

1487
01:08:13,445 --> 01:08:16,289
Now you may wonder, why it has these two

1488
01:08:16,289 --> 01:08:18,577
And I called this MessageBox function

1489
01:08:18,577 --> 01:08:21,248
Like, what's going on there? Like, that doesn't make any sense, right?

1490
01:08:21,247 --> 01:08:24,056
Well the answer is because in all of Windows

1491
01:08:24,056 --> 01:08:26,761
Everything that takes a string is actually not

1492
01:08:26,761 --> 01:08:28,677
The function that you actually call.

1493
01:08:28,677 --> 01:08:30,337
You actually call a macro

1494
01:08:30,337 --> 01:08:33,728
So inside windows.h there's actually a #define

1495
01:08:33,728 --> 01:08:37,025
Which is how you do macros in C, how you replace text in c.

1496
01:08:37,025 --> 01:08:39,858
It is actually a #define that #defines MessageBox

1497
01:08:39,859 --> 01:08:42,529
To MessageBoxA or MessageBoxW

1498
01:08:42,529 --> 01:08:47,904
Depending on whether or not you're compiling in UTF-8 mode or ANSI mode.

1499
01:08:47,904 --> 01:08:50,586
By default, if you just call cl

1500
01:08:50,586 --> 01:08:54,057
The compiler is set to compile without being in Unicode mode

1501
01:08:54,057 --> 01:08:55,439
So it's gonna compile in ANSI mode

1502
01:08:55,439 --> 01:08:57,865
Which means that we're gonna call MessageBoxA, which is what we wanted

1503
01:08:57,865 --> 01:08:59,815
Because this is an ANSI string.

1504
01:08:59,815 --> 01:09:03,077
But if we were trying to pass UTF-16 to it

1505
01:09:03,078 --> 01:09:05,853
We wouldn't have to switch the  compiler to compiling in Unicode mode.

1506
01:09:05,853 --> 01:09:07,408
Which is, basically

1507
01:09:07,408 --> 01:09:09,080
Putting in a #define or anything like that to switch it

1508
01:09:09,081 --> 01:09:10,474
We don't have to do anything like that.

1509
01:09:10,474 --> 01:09:12,900
We could just go ahead and stop using the macro.

1510
01:09:12,900 --> 01:09:16,233
The macro is just something Windows did for backwards compatibility a long time ago.

1511
01:09:16,233 --> 01:09:18,752
So we can actually just actually short-circuit that process entirely

1512
01:09:18,752 --> 01:09:21,829
And call the actual function that we actually wanted.

1513
01:09:21,828 --> 01:09:24,068
And that'll work just fine as you can see.

1514
01:09:24,069 --> 01:09:26,136
Again, we need that user32.lib

1515
01:09:26,136 --> 01:09:27,564
To make sure that it can find it

1516
01:09:27,564 --> 01:09:29,561
But other than that we're good to go.

1517
01:09:29,560 --> 01:09:32,149
So now, if we go to our program and we run it...

1518
01:09:33,182 --> 01:09:35,400
Take out the breakpoint that I set there

1519
01:09:35,400 --> 01:09:38,152
You can see that our app now actually prints

1520
01:09:38,152 --> 01:09:41,728
Something on the screen. This is Handmade Hero.  Handmade Hero.

1521
01:09:41,728 --> 01:09:44,364
Now that is completely uninteresting to me.

1522
01:09:44,363 --> 01:09:47,951
I would much rather see some  sprites flying around the screen.

1523
01:09:47,951 --> 01:09:48,798
But.

1524
01:09:48,798 --> 01:09:53,070
Like I said, there is a lot of drudgework in getting a project up and running.

1525
01:09:53,070 --> 01:09:55,126
And we had to do that all tonight.

1526
01:09:55,126 --> 01:09:56,971
So in order to keep this stream

1527
01:09:56,971 --> 01:09:58,550
To only an hour I will...

1528
01:09:58,551 --> 01:10:01,802
Even though I would love to go spend the next hour so we can actually put

1529
01:10:01,801 --> 01:10:03,217
Some graphics on the screen

1530
01:10:03,217 --> 01:10:05,435
I am not going to do that, I am going to stop.

1531
01:10:05,435 --> 01:10:07,350
We will do that tomorrow.

1532
01:10:07,350 --> 01:10:09,800
And honestly, I guess I would say that went pretty well

1533
01:10:09,801 --> 01:10:11,588
Because we got everything out of the way

1534
01:10:11,588 --> 01:10:16,291
That we need to get out of the way to build, run, and have fun on Windows.

1535
01:10:16,291 --> 01:10:18,532
So from here, tomorrow

1536
01:10:18,532 --> 01:10:21,712
At 8:00 pm, pacific time, again

1537
01:10:21,712 --> 01:10:25,462
We will, probably be able to, I think

1538
01:10:25,462 --> 01:10:27,552
Open a Window and draw some stuff to it.

1539
01:10:27,552 --> 01:10:30,048
We may not get to user input yet

1540
01:10:30,048 --> 01:10:32,243
But I think we'll be able to draw, open a Window, draw stuff to it

1541
01:10:32,243 --> 01:10:35,053
And the day after that, we'll get user input for sure.

1542
01:10:35,052 --> 01:10:38,024
Basic user input but user input nonetheless.

1543
01:10:38,024 --> 01:10:39,150
So.

1544
01:10:39,150 --> 01:10:40,161
With that

1545
01:10:40,161 --> 01:10:43,296
I'd like to thank everyone for joining us for the first edition

1546
01:10:43,296 --> 01:10:45,734
The very first episode of Handmade Hero.

1547
01:10:45,734 --> 01:10:49,078
It has been delightful, even though it was drudgework today.

1548
01:10:49,078 --> 01:10:51,725
Which is what happens at the beginning of every project, I'm afraid.

1549
01:10:51,725 --> 01:10:53,501
Even though it was drudgework today

1550
01:10:53,501 --> 01:10:56,845
I still enjoyed going through it with you, and I hope

1551
01:10:56,845 --> 01:10:59,631
That you will come back tomorrow when we will do something

1552
01:10:59,631 --> 01:11:01,582
Frankly, a lot more exciting.

1553
01:11:01,582 --> 01:11:02,336
But

1554
01:11:02,336 --> 01:11:04,054
We will still be dealing with Windows a little bit

1555
01:11:04,054 --> 01:11:05,680
So we're still not quite out of the drudgework.

1556
01:11:05,680 --> 01:11:08,722
It will be more exciting because at least we'll actually see things happenning, but

1557
01:11:08,721 --> 01:11:10,648
The real excitement will probably pick up

1558
01:11:10,649 --> 01:11:12,959
In a week or so when we're off Windows and actually just dealing

1559
01:11:12,958 --> 01:11:14,282
With all fun game code

1560
01:11:14,283 --> 01:11:16,883
And rendering code which is just so much more exciting.

1561
01:11:16,882 --> 01:11:19,947
It's why I like to do it, instead of sitting around programming Windows all day.

1562
01:11:19,948 --> 01:11:22,851
If you would like to  be on the source tree

1563
01:11:22,850 --> 01:11:25,282
Or if you already are on the source tree

1564
01:11:25,283 --> 01:11:27,704
You can preorder the game here and you will get it.

1565
01:11:27,703 --> 01:11:29,212
It will give you an email

1566
01:11:29,212 --> 01:11:31,836
So for those of you who got that email, there's a link in there.

1567
01:11:31,837 --> 01:11:35,807
And what I will do is tonight I will  upload this code, this setup that we made

1568
01:11:35,807 --> 01:11:37,432
I will upload that

1569
01:11:37,432 --> 01:11:40,832
And so you can go back to that email that you got, with that link in it

1570
01:11:40,832 --> 01:11:44,237
Which you should bookmark because you can go back to it all the time and download the code.

1571
01:11:44,237 --> 01:11:48,242
You can go there, you can download that code and you can be setup just like this

1572
01:11:48,242 --> 01:11:50,610
So that you can see everything that we did.

1573
01:11:50,609 --> 01:11:52,618
I know I went fast through everything today

1574
01:11:52,618 --> 01:11:55,787
And we're gonna be going fast  through things.

1575
01:11:55,787 --> 01:11:57,378
That's just what we're gonna have to do

1576
01:11:57,378 --> 01:11:59,212
To actually get through  a meaningful amount of stuff

1577
01:11:59,212 --> 01:12:00,757
In a reasonable amount of time.

1578
01:12:00,757 --> 01:12:01,801
But

1579
01:12:01,801 --> 01:12:03,531
While we're going fast I think

1580
01:12:03,532 --> 01:12:07,177
It's easy if you can go back to the source code, look through it yourself

1581
01:12:07,177 --> 01:12:09,523
Think about each individual thing, what did he say about this?

1582
01:12:09,523 --> 01:12:12,146
Make sure that you're comforable with it, if you're not comforable with it, ask questions

1583
01:12:12,146 --> 01:12:15,305
Go read that MSDN, get comfortable there, play around with it

1584
01:12:15,305 --> 01:12:18,149
Call some other stuff, change this MessageBoxEx

1585
01:12:18,149 --> 01:12:20,785
Play with the build, play with the compiler, do all that stuff

1586
01:12:20,784 --> 01:12:24,255
Because really, the way that you're gonna learn is not just by watching me.

1587
01:12:24,256 --> 01:12:29,829
What I do here on the stream is  basically showing you sort of the backbone

1588
01:12:29,828 --> 01:12:33,148
Showing you how to make the game sort of like by example.

1589
01:12:33,149 --> 01:12:36,400
But what's really gonna solidify it for you is you trying it yourself

1590
01:12:36,399 --> 01:12:38,013
And you doing these things yourself.

1591
01:12:38,014 --> 01:12:40,893
So you should go back now and try all of the things that I just did.

1592
01:12:40,893 --> 01:12:42,239
All of that stuff.

1593
01:12:42,239 --> 01:12:44,353
Try it yourself, play around with it yourself.

1594
01:12:44,353 --> 01:12:47,731
Make the mistakes, make the same mistakes that I did, make different mistakes.

1595
01:12:47,731 --> 01:12:50,506
And really get comfortable with that stuff.

1596
01:12:50,506 --> 01:12:54,976
And if you do that every day, just spend an hour or two redoing this stuff that I did

1597
01:12:54,975 --> 01:12:58,388
And learning about them, that's really gonna be what solidifies it for you.

1598
01:12:58,389 --> 01:12:59,619
'Cause if you just watch me

1599
01:12:59,619 --> 01:13:02,104
I mean if you're just entertained by watching me code a game, that's great

1600
01:13:02,104 --> 01:13:03,149
There's no problem with that.

1601
01:13:03,149 --> 01:13:05,122
But if you really wanna learn  how to do this stuff

1602
01:13:05,122 --> 01:13:06,423
Definitely go through.

1603
01:13:06,423 --> 01:13:07,585
Do it yourself.

1604
01:13:07,585 --> 01:13:11,368
Ask questions, go on the interntet, find resources, just do some reading

1605
01:13:11,368 --> 01:13:13,029
Really soak that stuff in

1606
01:13:13,029 --> 01:13:14,747
Because that's what's really gonna make the difference

1607
01:13:14,747 --> 01:13:16,628
When you actually go and do it yourself

1608
01:13:16,628 --> 01:13:18,404
And sort of struggle through it a little bit and go:

1609
01:13:18,404 --> 01:13:21,853
Oh, what did he do there? Oh, right he did this, go back to the video, see what's going on.

1610
01:13:21,853 --> 01:13:25,417
That process is what's gonna really drill it into your brain and then you're just gonna know it

1611
01:13:25,417 --> 01:13:27,657
And you're gonna have it down cold.

1612
01:13:27,658 --> 01:13:31,385
So that's really the thing to do and I encourage everyone to do it.

1613
01:13:31,385 --> 01:13:33,230
So, that's it for this stream.

1614
01:13:33,230 --> 01:13:36,679
There will now be about 30 minutes of Q&amp;A.

1615
01:13:36,679 --> 01:13:41,752
And I will stop the recording now so that we can have two separate streams on youtube

1616
01:13:41,752 --> 01:13:44,933
And so people can sort of jump between Q&amp;A and the regular.

1617
01:13:44,934 --> 01:13:50,000
So, I will see you back here  in just a few seconds for the Q&amp;A.

