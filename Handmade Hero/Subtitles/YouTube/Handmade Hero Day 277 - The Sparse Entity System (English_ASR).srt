1
00:00:01,730 --> 00:00:06,778
hello everyone and welcome to handmade

2
00:00:05,250 --> 00:00:10,109
Hero the show recode a complete game

3
00:00:06,778 --> 00:00:12,449
live on stream we have a new member of

4
00:00:10,109 --> 00:00:15,449
the handmade hero family today I am

5
00:00:12,449 --> 00:00:19,379
pleased to say as you know since

6
00:00:15,449 --> 00:00:21,629
starting the series we have had Allen

7
00:00:19,379 --> 00:00:23,879
Webster create an editor that we now use

8
00:00:21,629 --> 00:00:27,239
on the stream so we no longer use canoe

9
00:00:23,879 --> 00:00:30,599
Emacs we use for coder on the stream and

10
00:00:27,239 --> 00:00:32,969
it turns out that we now are able to

11
00:00:30,599 --> 00:00:36,840
switch over to our own drawing program

12
00:00:32,969 --> 00:00:39,719
as well and let me be it's called Milton

13
00:00:36,840 --> 00:00:42,750
and it's actually on the handmade

14
00:00:39,719 --> 00:00:45,120
Network site much like for coder is and

15
00:00:42,750 --> 00:00:49,140
I wish that I could pronounce that I'll

16
00:00:45,119 --> 00:00:50,729
tell you a little story I as well I

17
00:00:49,140 --> 00:00:52,198
won't say used to because we probably

18
00:00:50,729 --> 00:00:55,669
will do more episodes in the future but

19
00:00:52,198 --> 00:00:58,920
every so often myself and Jeff Roberts

20
00:00:55,670 --> 00:01:02,730
we do a podcast called the Jeff and

21
00:00:58,920 --> 00:01:04,799
Casey show and on this podcast quite

22
00:01:02,729 --> 00:01:08,908
some time I believe before a hand made

23
00:01:04,799 --> 00:01:15,570
hero even was the thing we got an email

24
00:01:08,909 --> 00:01:18,630
from someone named Sergio and I tried we

25
00:01:15,569 --> 00:01:22,109
liked would read mail on the air like

26
00:01:18,629 --> 00:01:26,129
when we receive letters to the show we'd

27
00:01:22,109 --> 00:01:28,500
read them it for the episodes and it

28
00:01:26,129 --> 00:01:30,810
just so happened that for some reason I

29
00:01:28,500 --> 00:01:32,790
wanted to try and say like Sergio in

30
00:01:30,810 --> 00:01:34,379
like a in like a sexy Spanish I want to

31
00:01:32,790 --> 00:01:36,118
be like say Akio or something like this

32
00:01:34,379 --> 00:01:38,578
and I and I was like but I don't know

33
00:01:36,118 --> 00:01:41,159
how I was like I don't have any Spanish

34
00:01:38,578 --> 00:01:44,149
skills whatsoever like I I have no idea

35
00:01:41,159 --> 00:01:47,250
how to say Sergio properly let alone

36
00:01:44,149 --> 00:01:48,780
sexily and so it was just it was a bit

37
00:01:47,250 --> 00:01:52,739
of a joke at the time but point being

38
00:01:48,780 --> 00:01:56,009
that happened well fast forward to after

39
00:01:52,739 --> 00:01:58,618
handmade hero and it turns out that this

40
00:01:56,009 --> 00:02:02,250
paint program is actually made by the

41
00:01:58,618 --> 00:02:05,728
same and I'll just say Sergio so I won't

42
00:02:02,250 --> 00:02:07,409
try to pronounce his name in the sexy

43
00:02:05,728 --> 00:02:09,628
fashion because I I have been informed

44
00:02:07,409 --> 00:02:13,140
that I already failed at it but point

45
00:02:09,628 --> 00:02:15,840
being if you scroll down on here Milton

46
00:02:13,139 --> 00:02:17,369
handmade network you will get to him

47
00:02:15,840 --> 00:02:20,509
here he is

48
00:02:17,370 --> 00:02:22,819
let's let's say it's Sergio Gonzales

49
00:02:20,509 --> 00:02:26,159
Sergio I don't know you know what

50
00:02:22,818 --> 00:02:28,530
Sergio send me a wave file of you saying

51
00:02:26,159 --> 00:02:30,359
your name if you want to say it sexy you

52
00:02:28,530 --> 00:02:31,590
can say it sexy if you wanted to say it

53
00:02:30,360 --> 00:02:33,840
regular you could say it regular but

54
00:02:31,590 --> 00:02:37,439
least it'll be pronounced correctly and

55
00:02:33,840 --> 00:02:39,870
so I can finally like you know get past

56
00:02:37,439 --> 00:02:41,310
that problematic pronunciation that I

57
00:02:39,870 --> 00:02:44,610
did on the Jeff and Kate show which was

58
00:02:41,310 --> 00:02:48,870
horribly wrong and not sexy at all but

59
00:02:44,610 --> 00:02:50,720
point being you can go and you can check

60
00:02:48,870 --> 00:02:53,819
this out this drawing program yourself

61
00:02:50,719 --> 00:02:55,229
it's basically a replacement for what we

62
00:02:53,819 --> 00:02:56,579
have been using you know it's got like

63
00:02:55,229 --> 00:02:59,310
infinite canvas and stuff like that just

64
00:02:56,580 --> 00:03:00,570
like mischief did but it's actually

65
00:02:59,310 --> 00:03:02,219
quite a bit better than a mischief in a

66
00:03:00,569 --> 00:03:04,139
number of ways like it automatically

67
00:03:02,219 --> 00:03:06,689
saves your progress and stuff so you

68
00:03:04,139 --> 00:03:07,738
don't have to worry about any of that so

69
00:03:06,689 --> 00:03:09,959
it kind of seems like it might actually

70
00:03:07,739 --> 00:03:13,439
be a little bit better than then

71
00:03:09,959 --> 00:03:15,060
mischeif was much like for coder is

72
00:03:13,439 --> 00:03:17,939
starting out to be better than the new

73
00:03:15,060 --> 00:03:20,099
Emacs so upgrades all around and point

74
00:03:17,939 --> 00:03:22,469
being he did not have a patreon when I

75
00:03:20,099 --> 00:03:24,959
last checked but it looks like this is

76
00:03:22,469 --> 00:03:26,699
actually happening now alright so there

77
00:03:24,959 --> 00:03:28,739
is a brand new patreon that you can

78
00:03:26,699 --> 00:03:32,759
support as well I will be supporting it

79
00:03:28,739 --> 00:03:34,409
immediately after this and and yeah I

80
00:03:32,759 --> 00:03:36,268
always try to like any products that we

81
00:03:34,409 --> 00:03:37,709
use on stream I try to put some money

82
00:03:36,269 --> 00:03:39,780
from the handmade here at patreon over

83
00:03:37,709 --> 00:03:41,370
into those every month to help the folks

84
00:03:39,780 --> 00:03:43,349
who are making stuff that we can use and

85
00:03:41,370 --> 00:03:46,860
so here is the package some really cool

86
00:03:43,349 --> 00:03:49,019
stuff about it actually is I love that

87
00:03:46,860 --> 00:03:50,459
the old-school deluxe paint interface

88
00:03:49,019 --> 00:03:53,069
kind of thing where if you hit the tab

89
00:03:50,459 --> 00:03:55,920
key everything goes away I really like

90
00:03:53,069 --> 00:03:57,989
that and it doesn't have the bug of alt

91
00:03:55,919 --> 00:03:59,488
tab switching to eyedropper mode which

92
00:03:57,989 --> 00:04:06,299
is a huge pain in mischief

93
00:03:59,489 --> 00:04:12,530
so already like you know this is a bit

94
00:04:06,299 --> 00:04:12,530
of an improvement

95
00:04:15,409 --> 00:04:19,170
but there's still some kinks to work out

96
00:04:17,339 --> 00:04:21,779
so we're just trying it out we're gonna

97
00:04:19,170 --> 00:04:25,170
try it for a while mostly the only thing

98
00:04:21,779 --> 00:04:27,750
that I noticed is the the tracking speed

99
00:04:25,170 --> 00:04:30,180
seems a little laggy and I think that

100
00:04:27,750 --> 00:04:31,139
might have something to do with well

101
00:04:30,180 --> 00:04:32,160
actually I don't know yet

102
00:04:31,139 --> 00:04:33,599
yeah the source code is actually

103
00:04:32,160 --> 00:04:36,300
available so I was gonna go take a look

104
00:04:33,600 --> 00:04:39,480
at it on this particular machine this

105
00:04:36,300 --> 00:04:42,629
graphics card is is awfully old too and

106
00:04:39,480 --> 00:04:45,060
so you know anything that's that's not

107
00:04:42,629 --> 00:04:47,370
just so maybe causing it to be a little

108
00:04:45,060 --> 00:04:48,839
bit hiccup II so we'll see but as it is

109
00:04:47,370 --> 00:04:53,899
it seems like it's pretty easy to do

110
00:04:48,839 --> 00:04:57,679
like you know I can go ahead and say de

111
00:04:53,899 --> 00:04:59,969
277 just like before and I can write so

112
00:04:57,680 --> 00:05:01,139
like I said kind of cool that we're

113
00:04:59,970 --> 00:05:03,150
eventually switching over to all

114
00:05:01,139 --> 00:05:04,259
handmade stuff and like I said the

115
00:05:03,149 --> 00:05:05,969
source code to this is actually

116
00:05:04,259 --> 00:05:07,439
available as well so we can actually go

117
00:05:05,970 --> 00:05:10,110
check it at some point maybe if we do a

118
00:05:07,439 --> 00:05:11,969
stream and see what's happening in terms

119
00:05:10,110 --> 00:05:13,710
of the the refresh rate on this machine

120
00:05:11,970 --> 00:05:16,110
there might be some things we can do to

121
00:05:13,709 --> 00:05:17,039
to fix it on this machine for speed

122
00:05:16,110 --> 00:05:18,900
because that was the only thing that I

123
00:05:17,040 --> 00:05:20,550
noticed that was different I liked

124
00:05:18,899 --> 00:05:22,349
everything else more and it doesn't have

125
00:05:20,550 --> 00:05:25,770
that that nasty bug that always kind of

126
00:05:22,350 --> 00:05:26,310
plagued me which is pretty great so

127
00:05:25,769 --> 00:05:29,779
there we go

128
00:05:26,310 --> 00:05:33,089
so that's a new member of the team here

129
00:05:29,779 --> 00:05:34,829
at handmade hero and so now really I

130
00:05:33,089 --> 00:05:37,379
guess we just have to figure out some

131
00:05:34,829 --> 00:05:40,289
way if the debugger you know if we can

132
00:05:37,379 --> 00:05:42,269
replace Visual Studio we're down to

133
00:05:40,290 --> 00:05:45,300
almost nothing I guess we got the

134
00:05:42,269 --> 00:05:47,490
compiler but you know we're getting

135
00:05:45,300 --> 00:05:49,740
close to no tools but the compiler

136
00:05:47,490 --> 00:05:52,620
really that that aren't from the

137
00:05:49,740 --> 00:05:55,199
handmade hero community itself which is

138
00:05:52,620 --> 00:05:58,978
pretty pretty awesome if I do say so

139
00:05:55,199 --> 00:06:01,620
myself but all that being said we still

140
00:05:58,978 --> 00:06:03,478
have some programming to do that is you

141
00:06:01,620 --> 00:06:06,449
know we've got to get down to business

142
00:06:03,478 --> 00:06:07,500
and say 277 so if you want to follow

143
00:06:06,449 --> 00:06:10,129
along with the programming at home

144
00:06:07,500 --> 00:06:13,410
you're gonna want to unpack day to set

145
00:06:10,129 --> 00:06:19,228
276 is source code into a directory

146
00:06:13,410 --> 00:06:22,979
somewhere and that will be right

147
00:06:19,228 --> 00:06:26,159
matching up with where I am myself now

148
00:06:22,978 --> 00:06:26,729
what we ended on last time was we had

149
00:06:26,160 --> 00:06:29,910
pretty much

150
00:06:26,730 --> 00:06:33,300
gotten the hoppin under control in terms

151
00:06:29,910 --> 00:06:36,810
of what I wanted and basically we're

152
00:06:33,300 --> 00:06:38,730
waiting for probably some some new art

153
00:06:36,810 --> 00:06:41,430
and so what we'll probably do is revisit

154
00:06:38,730 --> 00:06:43,230
the hopping to when we get new art

155
00:06:41,430 --> 00:06:45,569
because I've kind of got it all shrunk

156
00:06:43,230 --> 00:06:47,490
down and and and scaled all weird and

157
00:06:45,569 --> 00:06:49,649
stuff because that's sort of the

158
00:06:47,490 --> 00:06:52,800
roundness that I expect or need the art

159
00:06:49,649 --> 00:06:54,179
to be eventually so like I said that's

160
00:06:52,800 --> 00:06:57,480
gonna be something that kind of has to

161
00:06:54,180 --> 00:06:59,550
get taken care of with art assets but

162
00:06:57,480 --> 00:07:02,879
for now the feel is actually feeling

163
00:06:59,550 --> 00:07:05,520
okay so the actual playability of it

164
00:07:02,879 --> 00:07:07,019
seems pretty reasonable to me and of

165
00:07:05,519 --> 00:07:10,740
course it's hard to say that until I

166
00:07:07,019 --> 00:07:13,500
actually start interacting with the game

167
00:07:10,740 --> 00:07:15,660
proper so we'll see how it goes but it's

168
00:07:13,500 --> 00:07:18,120
at least good enough at the moment for

169
00:07:15,660 --> 00:07:20,610
us to sort of for me to feel comfortable

170
00:07:18,120 --> 00:07:23,129
moving on to other parts of the game and

171
00:07:20,610 --> 00:07:25,110
bringing them up to speed I'm pretty

172
00:07:23,129 --> 00:07:27,269
confident that we can make this work as

173
00:07:25,110 --> 00:07:29,280
it is with you know with more tuning and

174
00:07:27,269 --> 00:07:40,859
more artwork we can figure out a way to

175
00:07:29,279 --> 00:07:44,189
make that happen all right so what are

176
00:07:40,860 --> 00:07:47,300
we going to do next well I think what I

177
00:07:44,189 --> 00:07:51,269
would like to do next is I would like to

178
00:07:47,300 --> 00:07:54,660
sort of try to move the entity system

179
00:07:51,269 --> 00:07:55,949
and the structure of the world mode I'd

180
00:07:54,660 --> 00:07:58,020
like to start trying to move those

181
00:07:55,949 --> 00:07:59,159
towards something more real like it's

182
00:07:58,019 --> 00:08:01,019
always kind of been a dumping ground

183
00:07:59,160 --> 00:08:03,480
where we just been like okay whatever

184
00:08:01,019 --> 00:08:06,029
we're doing it's fine doesn't matter and

185
00:08:03,480 --> 00:08:08,400
we kind of have to sort of start making

186
00:08:06,029 --> 00:08:11,129
that a little bit more real and we need

187
00:08:08,399 --> 00:08:13,139
to do that in two ways one way is we

188
00:08:11,129 --> 00:08:16,139
have to actually upgrade sort of the

189
00:08:13,139 --> 00:08:18,899
logic side of that and how it's working

190
00:08:16,139 --> 00:08:20,189
to be a little closer to what I think is

191
00:08:18,899 --> 00:08:21,569
a proper system because we've always

192
00:08:20,189 --> 00:08:22,769
sort of put the enemy system off and I

193
00:08:21,569 --> 00:08:26,519
think now is a good time to actually

194
00:08:22,769 --> 00:08:27,959
make it happen so we need to do that and

195
00:08:26,519 --> 00:08:32,069
then the other thing that we need to do

196
00:08:27,959 --> 00:08:33,809
is I would like to get the rendering

197
00:08:32,070 --> 00:08:36,060
under control now that I know exactly

198
00:08:33,809 --> 00:08:40,759
what we're going to be doing in terms of

199
00:08:36,059 --> 00:08:43,939
how scenes are basically so as far as

200
00:08:40,759 --> 00:08:45,769
I like layers are composited we want to

201
00:08:43,940 --> 00:08:47,240
sort of going and clean out that Z and

202
00:08:45,769 --> 00:08:49,970
all that sort of stuff so I think what

203
00:08:47,240 --> 00:08:53,360
I'm gonna do is I'm gonna partition us

204
00:08:49,970 --> 00:08:55,100
into a couple sort of passes through the

205
00:08:53,360 --> 00:08:58,070
code base the first thing that I'm gonna

206
00:08:55,100 --> 00:09:00,470
do is I'm gonna start by cleaning up the

207
00:08:58,070 --> 00:09:02,270
entity processing like that whole just

208
00:09:00,470 --> 00:09:04,250
the whole logic side of things I'm gonna

209
00:09:02,269 --> 00:09:06,230
start by doing some passes over that to

210
00:09:04,250 --> 00:09:08,179
sort of get that into a more reasonable

211
00:09:06,230 --> 00:09:10,460
place and that includes like the storing

212
00:09:08,179 --> 00:09:12,529
of the you know it's where things are

213
00:09:10,460 --> 00:09:13,790
stored and how and how they get unpacked

214
00:09:12,529 --> 00:09:15,620
and repacked and all those sort of

215
00:09:13,789 --> 00:09:20,299
things I want to take that and give that

216
00:09:15,620 --> 00:09:22,610
a good sort of once-over and then what

217
00:09:20,299 --> 00:09:24,529
I'd also like to do is ping pong after

218
00:09:22,610 --> 00:09:26,659
that over to the rendering thing and get

219
00:09:24,529 --> 00:09:28,519
seams rendering properly so that now

220
00:09:26,659 --> 00:09:30,049
that we know like how rooms sort of work

221
00:09:28,519 --> 00:09:32,779
I want to get that sort of nailed down

222
00:09:30,049 --> 00:09:34,819
as well and then we can come back and

223
00:09:32,779 --> 00:09:37,669
start really working on the entity stuff

224
00:09:34,820 --> 00:09:39,500
once that render part is complete and

225
00:09:37,669 --> 00:09:41,120
that'll be you know working on stuff

226
00:09:39,500 --> 00:09:41,809
like how we generate worlds and how we

227
00:09:41,120 --> 00:09:43,250
do

228
00:09:41,809 --> 00:09:45,229
AIS and that sort of thing and just

229
00:09:43,250 --> 00:09:47,799
basically putting in the gameplay stuff

230
00:09:45,230 --> 00:09:49,970
the kind of code that I hate as you know

231
00:09:47,799 --> 00:09:51,229
because it's really kind of arbitrary

232
00:09:49,970 --> 00:09:53,779
and doesn't have much to do with

233
00:09:51,230 --> 00:09:56,810
anything but you kind of have to do it

234
00:09:53,779 --> 00:09:59,179
so anyway that's what I'd like to do and

235
00:09:56,809 --> 00:10:01,729
so right now I just probably want to

236
00:09:59,179 --> 00:10:04,039
spend some time taking stock of where

237
00:10:01,730 --> 00:10:07,610
things are and I want to talk to you a

238
00:10:04,039 --> 00:10:10,579
little bit about sort of how I'm

239
00:10:07,610 --> 00:10:13,490
conceptualizing this stuff working and

240
00:10:10,580 --> 00:10:15,680
it's a little bit crazy and so I'm going

241
00:10:13,490 --> 00:10:18,259
to sort of tell you what my plan is

242
00:10:15,679 --> 00:10:22,279
going forwards and so here it is

243
00:10:18,259 --> 00:10:26,509
so in fact I I'll get some good usage

244
00:10:22,279 --> 00:10:32,899
out of out of Milton I think just to say

245
00:10:26,509 --> 00:10:36,019
the least so here's the deal there's

246
00:10:32,899 --> 00:10:39,379
lots of ways you can do entity systems

247
00:10:36,019 --> 00:10:41,059
right there's and you know what I might

248
00:10:39,379 --> 00:10:42,350
do - I might change this brush size a

249
00:10:41,059 --> 00:10:44,949
little bit I don't think it needs to be

250
00:10:42,350 --> 00:10:44,950
quite so big

251
00:10:46,460 --> 00:10:52,480
that's a little better yeah so there's

252
00:10:50,269 --> 00:10:56,569
lots of ways you can do entity systems

253
00:10:52,480 --> 00:11:00,560
and to the best of my knowledge oh wow I

254
00:10:56,570 --> 00:11:03,620
didn't draw that right to the best of my

255
00:11:00,559 --> 00:11:08,419
knowledge it's really not the case that

256
00:11:03,620 --> 00:11:11,028
there is canonical good and bad and you

257
00:11:08,419 --> 00:11:12,649
know that there isn't like some holy

258
00:11:11,028 --> 00:11:14,689
grail of enemy systems that somebody

259
00:11:12,649 --> 00:11:16,278
figured out at some point and if you

260
00:11:14,690 --> 00:11:17,990
just do it this way everything works out

261
00:11:16,278 --> 00:11:18,470
great I've never really seen that to be

262
00:11:17,990 --> 00:11:20,360
the case

263
00:11:18,470 --> 00:11:22,040
people have arguments about these sorts

264
00:11:20,360 --> 00:11:24,019
of things there's the object-oriented

265
00:11:22,039 --> 00:11:25,519
parts of the arguments of things but

266
00:11:24,019 --> 00:11:26,838
there's also all these other sorts of

267
00:11:25,519 --> 00:11:28,759
things people throw on the term

268
00:11:26,839 --> 00:11:30,589
component en Mnet's or entity component

269
00:11:28,759 --> 00:11:33,799
system they all these names for stuff

270
00:11:30,589 --> 00:11:36,470
but really a lot of it is is pretty

271
00:11:33,799 --> 00:11:38,809
underbaked right it's not like this is

272
00:11:36,470 --> 00:11:40,459
this isn't you know compiler Theory this

273
00:11:38,809 --> 00:11:42,949
isn't something where people have really

274
00:11:40,458 --> 00:11:45,469
codified like what an entity system

275
00:11:42,950 --> 00:11:46,730
actually is what it does what the

276
00:11:45,470 --> 00:11:48,019
different ways to do it are what the

277
00:11:46,730 --> 00:11:51,050
complexities of those are like it's an

278
00:11:48,019 --> 00:11:53,870
that it's a real like black art kind of

279
00:11:51,049 --> 00:11:55,219
a thing and you know like many things

280
00:11:53,870 --> 00:11:56,810
just because people like to get into

281
00:11:55,220 --> 00:11:57,740
arguments about something or claim that

282
00:11:56,809 --> 00:11:59,419
they have a very good way of doing

283
00:11:57,740 --> 00:12:00,350
something or somebody says that this is

284
00:11:59,419 --> 00:12:03,620
the way to do it and don't do it this

285
00:12:00,350 --> 00:12:05,480
way you know people like to have those

286
00:12:03,620 --> 00:12:08,720
arguments but only in some cases is

287
00:12:05,480 --> 00:12:12,350
there any actual back you know sort of

288
00:12:08,720 --> 00:12:14,360
sort of looking for actual theory or

289
00:12:12,350 --> 00:12:16,820
proof to back it up a lot of times

290
00:12:14,360 --> 00:12:18,139
they're just kind of spouting stuff and

291
00:12:16,820 --> 00:12:19,550
these systems are pretty much that way

292
00:12:18,139 --> 00:12:22,189
now there has been a lot of different

293
00:12:19,549 --> 00:12:25,069
kinds of or ways that people write in

294
00:12:22,190 --> 00:12:27,890
these systems obviously there's there's

295
00:12:25,070 --> 00:12:30,170
ones that look a lot like a traditional

296
00:12:27,889 --> 00:12:31,669
object-oriented program and the way

297
00:12:30,169 --> 00:12:34,039
those work is you know there might be

298
00:12:31,669 --> 00:12:35,809
some base class right that is just like

299
00:12:34,039 --> 00:12:38,929
oh these are you know this is entities

300
00:12:35,809 --> 00:12:40,699
just in general and then you know under

301
00:12:38,929 --> 00:12:43,879
here you know maybe we've got you know

302
00:12:40,700 --> 00:12:46,640
orcs right and then we've got humans or

303
00:12:43,879 --> 00:12:48,470
something like this you know and then

304
00:12:46,639 --> 00:12:51,230
under here you know we've got things

305
00:12:48,470 --> 00:12:54,200
like oh yeah there's you know there's

306
00:12:51,230 --> 00:12:55,820
the Prince you know or whatever and then

307
00:12:54,200 --> 00:12:57,530
there's the like you know

308
00:12:55,820 --> 00:12:58,580
and I don't I don't know what there

309
00:12:57,529 --> 00:13:00,079
would be over here oh there's a night

310
00:12:58,580 --> 00:13:01,340
for something like that you know there's

311
00:13:00,080 --> 00:13:03,259
the different types of things that are

312
00:13:01,340 --> 00:13:04,790
in here and over here there's you know

313
00:13:03,259 --> 00:13:06,230
there's the necromancer or whatever I

314
00:13:04,789 --> 00:13:09,909
don't know why this a necromancer or

315
00:13:06,230 --> 00:13:12,560
something like that but anyway you see

316
00:13:09,909 --> 00:13:16,819
there's been attempts of doing things

317
00:13:12,559 --> 00:13:20,059
this way and in general this style of

318
00:13:16,820 --> 00:13:22,310
sort of really really old-school object

319
00:13:20,059 --> 00:13:23,959
orientation for stuff pretty much nobody

320
00:13:22,309 --> 00:13:25,939
thinks is a good idea anymore as far as

321
00:13:23,960 --> 00:13:27,860
I know right like I don't see many

322
00:13:25,940 --> 00:13:30,350
people offering this as like a pretty

323
00:13:27,860 --> 00:13:32,899
good way to do things and the reason for

324
00:13:30,350 --> 00:13:36,070
that is because usually in games there

325
00:13:32,899 --> 00:13:39,409
are not rigor like like really rigid

326
00:13:36,070 --> 00:13:42,710
categorizations for things usually the

327
00:13:39,409 --> 00:13:44,539
units that you create in a game or the

328
00:13:42,710 --> 00:13:47,330
entities that you create in a game they

329
00:13:44,539 --> 00:13:50,179
borrow from lots of places right so you

330
00:13:47,330 --> 00:13:52,580
know it isn't like there's all unique

331
00:13:50,179 --> 00:13:55,309
code in Printz all unique code in human

332
00:13:52,580 --> 00:13:57,680
and all unique code in entity so prints

333
00:13:55,309 --> 00:13:59,419
is just a prince human entity code base

334
00:13:57,679 --> 00:14:01,189
and it all just works like usually

335
00:13:59,419 --> 00:14:03,529
that's not the case usually there's some

336
00:14:01,190 --> 00:14:05,960
stuff for example shared between the

337
00:14:03,529 --> 00:14:08,209
necro and the prince right and there's

338
00:14:05,960 --> 00:14:10,700
also stuff shared between you know the

339
00:14:08,210 --> 00:14:12,259
night and the necro but that the knight

340
00:14:10,700 --> 00:14:14,570
and the prince don't share but then

341
00:14:12,259 --> 00:14:16,639
there's stuff in the print right and so

342
00:14:14,570 --> 00:14:21,080
trying to break things into a class

343
00:14:16,639 --> 00:14:22,819
hierarchy often falls apart and so you

344
00:14:21,080 --> 00:14:24,200
know again that's separate from you know

345
00:14:22,820 --> 00:14:24,650
I rant about obturator partnering all

346
00:14:24,200 --> 00:14:26,780
the time

347
00:14:24,649 --> 00:14:28,730
you know week that's all separate stuff

348
00:14:26,779 --> 00:14:30,559
this is literally like forget whether

349
00:14:28,730 --> 00:14:33,080
you're even thinking of joining or not

350
00:14:30,559 --> 00:14:34,789
let's just say it doesn't mean they do

351
00:14:33,080 --> 00:14:36,259
it that you're just saying I'm going to

352
00:14:34,789 --> 00:14:39,049
classify these things hierarchically

353
00:14:36,259 --> 00:14:40,939
just that act is kind of fraught with

354
00:14:39,049 --> 00:14:49,159
peril and doesn't work out particularly

355
00:14:40,940 --> 00:14:52,640
well so what people tend to do nowadays

356
00:14:49,159 --> 00:14:54,589
in a lot of circumstances is they sort

357
00:14:52,639 --> 00:14:57,769
of dispense with this kind of notion to

358
00:14:54,590 --> 00:15:00,500
a large extent and instead they use you

359
00:14:57,769 --> 00:15:03,919
know sort of a for like a more

360
00:15:00,500 --> 00:15:06,950
compositional approach if you will which

361
00:15:03,919 --> 00:15:08,299
is to say okay you know yet maybe if I'm

362
00:15:06,950 --> 00:15:09,050
doing object-oriented programming so

363
00:15:08,299 --> 00:15:10,939
maybe I'm a

364
00:15:09,049 --> 00:15:12,588
during a program and I still do a little

365
00:15:10,940 --> 00:15:14,420
bit of C++ or maybe you're someone like

366
00:15:12,589 --> 00:15:16,880
John Lowe for example who does things

367
00:15:14,419 --> 00:15:18,500
this way who isn't really much of an

368
00:15:16,879 --> 00:15:21,049
auditorium programmer doesn't super like

369
00:15:18,500 --> 00:15:22,820
it but typically does like to have

370
00:15:21,049 --> 00:15:25,278
dispatcher and stuff handled for him and

371
00:15:22,820 --> 00:15:27,410
a few other things like this you know

372
00:15:25,278 --> 00:15:28,820
maybe you get rid of all that but say we

373
00:15:27,409 --> 00:15:30,860
still have we still have one any big

374
00:15:28,820 --> 00:15:32,420
class but then everyone else is is just

375
00:15:30,860 --> 00:15:34,490
the thing that comes off of that right

376
00:15:32,419 --> 00:15:37,189
you know there's a necro the prince and

377
00:15:34,490 --> 00:15:38,750
the knight and so on and now what we're

378
00:15:37,190 --> 00:15:40,399
gonna do is those things if they share

379
00:15:38,750 --> 00:15:42,950
rather than before thinking of it was

380
00:15:40,399 --> 00:15:45,019
like Oh a prince and a knight both have

381
00:15:42,950 --> 00:15:47,000
certain things that they share because

382
00:15:45,019 --> 00:15:49,278
they're human and we'll put that in here

383
00:15:47,000 --> 00:15:51,110
right rather than try and do that

384
00:15:49,278 --> 00:15:52,700
because it breaks down when then this

385
00:15:51,110 --> 00:15:53,990
guy wants to share one little piece of

386
00:15:52,700 --> 00:15:55,550
that but doesn't want to share the rest

387
00:15:53,990 --> 00:15:57,200
of it or whatever rather than do that

388
00:15:55,549 --> 00:15:59,359
what they do is they sort of put these

389
00:15:57,200 --> 00:16:01,430
things inside these objects as sort of

390
00:15:59,360 --> 00:16:07,909
like components so you can think of it

391
00:16:01,429 --> 00:16:12,559
as you know I have my my struct well

392
00:16:07,909 --> 00:16:15,259
this is struct necro and maybe it's got

393
00:16:12,559 --> 00:16:16,879
an inheritance of entity so maybe it

394
00:16:15,259 --> 00:16:18,289
does pull that in and again that's

395
00:16:16,879 --> 00:16:19,370
optional if you're not an option area

396
00:16:18,289 --> 00:16:22,429
programmer you wouldn't have that if you

397
00:16:19,370 --> 00:16:24,470
are you would and then in here you would

398
00:16:22,429 --> 00:16:27,500
have some things like oh well my necro

399
00:16:24,470 --> 00:16:30,740
uses you know the the burn you know

400
00:16:27,500 --> 00:16:32,208
burnable thing and that's like what you

401
00:16:30,740 --> 00:16:34,879
need if you're gonna be someone who can

402
00:16:32,208 --> 00:16:37,338
catch on fire let's say right and so

403
00:16:34,879 --> 00:16:39,200
burnable is in here and and you know if

404
00:16:37,339 --> 00:16:41,570
it needs to catch on fire then you can

405
00:16:39,200 --> 00:16:43,160
use this or add that to a list or you

406
00:16:41,570 --> 00:16:45,589
know whatever you want to do right and

407
00:16:43,159 --> 00:16:47,870
so what ends up happening is rather than

408
00:16:45,589 --> 00:16:50,360
stuff going into inheritance it goes

409
00:16:47,870 --> 00:16:52,039
into containment right it's like I'm

410
00:16:50,360 --> 00:16:54,909
Kurd struck in this thing and I put the

411
00:16:52,039 --> 00:16:59,659
things that I want for this guy in there

412
00:16:54,909 --> 00:17:02,299
okay that's you know been certainly one

413
00:16:59,659 --> 00:17:03,708
way another way that's been looked at

414
00:17:02,299 --> 00:17:09,740
for these sorts of things yet another

415
00:17:03,708 --> 00:17:14,178
way is like the act react model which

416
00:17:09,740 --> 00:17:17,150
was something from Looking Glass and

417
00:17:14,179 --> 00:17:22,230
this is sort of like it parallels in a

418
00:17:17,150 --> 00:17:23,970
lot of ways the AOS versus SOA thing

419
00:17:22,230 --> 00:17:25,588
so remember when we talked about an

420
00:17:23,970 --> 00:17:27,750
array of structure as versus a structure

421
00:17:25,588 --> 00:17:30,898
of arrays and we sort of talked about

422
00:17:27,750 --> 00:17:34,169
like oh well okay so a necro like what

423
00:17:30,898 --> 00:17:38,069
is that well that's you know like one

424
00:17:34,169 --> 00:17:42,110
burnable and and one you know health

425
00:17:38,069 --> 00:17:45,569
attribute or whatever you know and so on

426
00:17:42,109 --> 00:17:48,148
so it's got these things in it right it

427
00:17:45,569 --> 00:17:50,579
has its a has a relationship as you

428
00:17:48,148 --> 00:17:53,638
would say if you were in a land right

429
00:17:50,579 --> 00:17:55,500
they would do it this way

430
00:17:53,638 --> 00:17:57,569
and that's very much like the array of

431
00:17:55,500 --> 00:17:59,909
structures method right so when you do

432
00:17:57,569 --> 00:18:01,648
things like you can imagine in vertex

433
00:17:59,909 --> 00:18:04,760
land we were doing things like okay

434
00:18:01,648 --> 00:18:08,489
we've got a struct for our vertex and

435
00:18:04,759 --> 00:18:11,700
then we have an some real 32s in here

436
00:18:08,490 --> 00:18:13,620
for X Y Z and W right and that we called

437
00:18:11,700 --> 00:18:15,538
array of structures because we have an

438
00:18:13,619 --> 00:18:17,278
array and each entry in the array is a

439
00:18:15,538 --> 00:18:21,359
structure containing the components that

440
00:18:17,278 --> 00:18:22,558
we needed right but when we started

441
00:18:21,359 --> 00:18:24,058
talking about Cindi programming where

442
00:18:22,558 --> 00:18:25,319
you want to operate on all the X's at

443
00:18:24,058 --> 00:18:27,750
once all the Y's at once we'll disease

444
00:18:25,319 --> 00:18:29,759
it once we you know sort of went into

445
00:18:27,750 --> 00:18:31,919
this other way of doing things SOA which

446
00:18:29,759 --> 00:18:37,109
was like okay now instead of having like

447
00:18:31,919 --> 00:18:39,059
a vertex star for our vertices instead

448
00:18:37,109 --> 00:18:40,408
we have a pointer for each of the

449
00:18:39,058 --> 00:18:41,940
different types of vertices let's say

450
00:18:40,409 --> 00:18:43,260
and maybe we don't actually really quite

451
00:18:41,940 --> 00:18:45,750
do it that way but you know what I mean

452
00:18:43,259 --> 00:18:48,750
conceptually speaking where we have

453
00:18:45,750 --> 00:18:50,250
pointers for each of these right and now

454
00:18:48,750 --> 00:18:51,509
all the X's come together all the Y's

455
00:18:50,250 --> 00:18:55,259
come together all the Z's come together

456
00:18:51,509 --> 00:18:58,200
and so I use a specific index to refer

457
00:18:55,259 --> 00:19:01,200
to my particular one I'm talking about

458
00:18:58,200 --> 00:19:02,669
what vertex I want but it's in a

459
00:19:01,200 --> 00:19:04,798
different array for each element and

460
00:19:02,669 --> 00:19:08,070
that's to facilitate processing them you

461
00:19:04,798 --> 00:19:10,679
know in bulk well the act react system

462
00:19:08,069 --> 00:19:12,569
is very much the analog of that this was

463
00:19:10,679 --> 00:19:16,259
introduced by looking glass on theif the

464
00:19:12,569 --> 00:19:19,528
dark project and that's a way of

465
00:19:16,259 --> 00:19:21,269
basically rotating this concept so that

466
00:19:19,528 --> 00:19:23,579
instead of saying I have a struct it's

467
00:19:21,269 --> 00:19:26,250
got these things in it instead I say

468
00:19:23,579 --> 00:19:29,879
well actually what we have is the

469
00:19:26,250 --> 00:19:32,220
burnable table right for everything

470
00:19:29,880 --> 00:19:35,580
that's burnable has its burnable there

471
00:19:32,220 --> 00:19:38,909
and then i have the health table

472
00:19:35,579 --> 00:19:41,428
right and so on and these things get

473
00:19:38,909 --> 00:19:43,320
processed individually so the burned

474
00:19:41,429 --> 00:19:44,580
stuff does it's burning update the hell

475
00:19:43,319 --> 00:19:47,009
stuff does its health update whatever

476
00:19:44,579 --> 00:19:49,230
and then if I want to ask what a

477
00:19:47,009 --> 00:19:51,089
particular entities state is with

478
00:19:49,230 --> 00:19:53,940
respect to whether it's burning or not I

479
00:19:51,089 --> 00:19:56,488
look up in this table using it's like

480
00:19:53,940 --> 00:19:58,230
entity key whatever its ID is right so

481
00:19:56,489 --> 00:20:00,929
it's much more like a sort of multi

482
00:19:58,230 --> 00:20:02,069
table database sort of a thing the way

483
00:20:00,929 --> 00:20:03,450
that it's sort of conceptualized and

484
00:20:02,069 --> 00:20:04,288
again is the implementation deals I'm

485
00:20:03,450 --> 00:20:07,919
just trying to give you sort of the

486
00:20:04,288 --> 00:20:09,450
broad picture right so there's been lots

487
00:20:07,919 --> 00:20:10,919
and lots and lots of ways that people

488
00:20:09,450 --> 00:20:12,690
have approached this problem and you can

489
00:20:10,919 --> 00:20:14,749
see why it's a tricky problem

490
00:20:12,690 --> 00:20:18,058
the reason it's a tricky problem is

491
00:20:14,749 --> 00:20:21,778
because you are inherently trying to

492
00:20:18,058 --> 00:20:24,710
sort of compress down the information in

493
00:20:21,778 --> 00:20:27,778
a very sort of flexible broad space

494
00:20:24,710 --> 00:20:30,028
gameplay is a very flexible broad thing

495
00:20:27,778 --> 00:20:31,829
you typically want everything to be able

496
00:20:30,028 --> 00:20:35,128
to happen everywhere except when you

497
00:20:31,829 --> 00:20:37,439
don't right and so it's this very weird

498
00:20:35,128 --> 00:20:39,689
mix of like oh I did want that being

499
00:20:37,440 --> 00:20:41,429
fire but not if the guy has this thing

500
00:20:39,690 --> 00:20:42,778
and oh there should be this rule that if

501
00:20:41,429 --> 00:20:44,519
two things are on fire an extra so they

502
00:20:42,778 --> 00:20:45,989
should do this and and OH

503
00:20:44,519 --> 00:20:47,579
fire effects health and health effects

504
00:20:45,989 --> 00:20:49,769
fire right so you kind of have this

505
00:20:47,579 --> 00:20:52,470
really crazy space of just it's whatever

506
00:20:49,769 --> 00:20:55,079
the human imagination that was designing

507
00:20:52,470 --> 00:20:57,899
the game wanted to have happen no matter

508
00:20:55,079 --> 00:20:59,970
how crazy and theoretically unsound for

509
00:20:57,898 --> 00:21:02,699
any other particular reasons those

510
00:20:59,970 --> 00:21:05,069
things maybe that is nonetheless what

511
00:21:02,700 --> 00:21:06,450
the game design is and you need to get

512
00:21:05,069 --> 00:21:08,398
it working if you would like to ship

513
00:21:06,450 --> 00:21:11,069
that game as opposed to some other game

514
00:21:08,398 --> 00:21:14,729
so you have this very difficult problem

515
00:21:11,069 --> 00:21:16,798
of such a flexible crazy you know not

516
00:21:14,730 --> 00:21:19,409
clearly delineated set of operation that

517
00:21:16,798 --> 00:21:21,358
it's very very tricky to figure out the

518
00:21:19,409 --> 00:21:24,950
right ways of structuring these things

519
00:21:21,358 --> 00:21:24,949
cleanly so that you don't have problems

520
00:21:26,960 --> 00:21:34,169
okay so let me tell you some very basic

521
00:21:30,739 --> 00:21:38,429
problems that you have typically if you

522
00:21:34,169 --> 00:21:41,519
do lockdown sort of things in in you

523
00:21:38,429 --> 00:21:43,590
know in various ways so for example

524
00:21:41,519 --> 00:21:46,528
let's say I was going to do a struct

525
00:21:43,589 --> 00:21:48,388
necro this way okay it would be very

526
00:21:46,528 --> 00:21:49,259
very fast to process this truck necro

527
00:21:48,388 --> 00:21:50,909
for any four

528
00:21:49,259 --> 00:21:53,490
any code that was specific to how a

529
00:21:50,910 --> 00:21:55,470
necro worked it'd be pretty easy to

530
00:21:53,490 --> 00:21:57,359
write that code here because the

531
00:21:55,470 --> 00:21:59,009
compiler knows exactly where those

532
00:21:57,359 --> 00:22:01,019
things are it doesn't have to get them

533
00:21:59,009 --> 00:22:03,000
from anywhere you can just do what it

534
00:22:01,019 --> 00:22:05,429
needs to do and it's nice compiled C

535
00:22:03,000 --> 00:22:09,029
code you know it's gonna be really fast

536
00:22:05,429 --> 00:22:10,798
okay but compare that something like

537
00:22:09,029 --> 00:22:12,928
this where every time I want to talk

538
00:22:10,798 --> 00:22:15,029
about some aspect of it I gotta go go to

539
00:22:12,929 --> 00:22:16,980
a table right so I want to press this

540
00:22:15,029 --> 00:22:18,210
necro alright well to press the necro

541
00:22:16,980 --> 00:22:19,410
the first thing I do is look up its

542
00:22:18,210 --> 00:22:20,850
burnable second thing I'm gonna do is

543
00:22:19,410 --> 00:22:22,710
look up its health right there's two

544
00:22:20,849 --> 00:22:24,149
queries right there and then maybe I got

545
00:22:22,710 --> 00:22:25,440
to do even more who knows how many a

546
00:22:24,150 --> 00:22:27,470
file in a you know and you might have

547
00:22:25,440 --> 00:22:30,509
ten twenty thirty properties that matter

548
00:22:27,470 --> 00:22:32,220
you know it can get there can be a lot

549
00:22:30,509 --> 00:22:34,710
of overhead all of a sudden in

550
00:22:32,220 --> 00:22:37,950
processing one of these things because

551
00:22:34,710 --> 00:22:40,140
I'm doing all these lookups but because

552
00:22:37,950 --> 00:22:42,390
it's this general table system where you

553
00:22:40,140 --> 00:22:43,500
can just say oh does this entity have

554
00:22:42,390 --> 00:22:45,990
any of these things

555
00:22:43,500 --> 00:22:49,308
well now it's completely dynamic at

556
00:22:45,990 --> 00:22:51,240
runtime as well right like when I say

557
00:22:49,308 --> 00:22:52,889
necromancer well maybe it started out as

558
00:22:51,240 --> 00:22:54,359
a necromancer but if I wanted to add

559
00:22:52,890 --> 00:22:57,509
some property that it didn't have before

560
00:22:54,359 --> 00:23:00,029
like maybe I want to add you know

561
00:22:57,509 --> 00:23:02,308
ballerina to it or whatever cuz it's got

562
00:23:00,029 --> 00:23:04,579
you know or like ballet state which is

563
00:23:02,308 --> 00:23:07,410
the state of it's like dainty dancing

564
00:23:04,579 --> 00:23:09,629
all of a sudden I can because all I have

565
00:23:07,410 --> 00:23:11,610
to do is well we know that if this is

566
00:23:09,630 --> 00:23:15,450
something the game understands there'll

567
00:23:11,609 --> 00:23:20,240
be a Balor valeria that's good let's cut

568
00:23:15,450 --> 00:23:25,970
it again they'll be a ballerina table

569
00:23:20,240 --> 00:23:27,509
and wow I can't I can't spell today

570
00:23:25,970 --> 00:23:29,039
ballerina

571
00:23:27,509 --> 00:23:30,900
there we go there'll be a ballerina

572
00:23:29,039 --> 00:23:33,418
table and all I have to do is just

573
00:23:30,900 --> 00:23:36,150
create a new record for whatever this

574
00:23:33,419 --> 00:23:37,740
person's key is inside that table so I

575
00:23:36,150 --> 00:23:40,110
can always just dynamically add

576
00:23:37,740 --> 00:23:42,089
properties to any entity and that's

577
00:23:40,109 --> 00:23:43,889
obviously very valuable because that

578
00:23:42,089 --> 00:23:45,269
adds a lot of flexibility to the game

579
00:23:43,890 --> 00:23:47,759
that wouldn't have been there if you had

580
00:23:45,269 --> 00:23:49,529
to rigidly define what these trucks are

581
00:23:47,759 --> 00:23:50,640
now maybe you don't care right like

582
00:23:49,529 --> 00:23:51,899
maybe you're doing a game where that's

583
00:23:50,640 --> 00:23:54,150
just not relevant in which case this is

584
00:23:51,900 --> 00:23:55,559
not a win but you can see why it might

585
00:23:54,150 --> 00:23:57,059
be a win because if you want that

586
00:23:55,558 --> 00:24:00,750
flexibility for things to be sort of

587
00:23:57,058 --> 00:24:02,899
mutable you have that that sort of need

588
00:24:00,750 --> 00:24:04,759
there right

589
00:24:02,900 --> 00:24:06,140
so yeah and of course this system

590
00:24:04,759 --> 00:24:07,339
already explained the downsides of this

591
00:24:06,140 --> 00:24:09,170
systems just you know I don't really

592
00:24:07,339 --> 00:24:11,359
think anyone really takes that serious

593
00:24:09,170 --> 00:24:12,950
anymore but you know you've got systems

594
00:24:11,359 --> 00:24:15,709
like these sorts of things and that's

595
00:24:12,950 --> 00:24:17,180
sort of one example of how those might

596
00:24:15,710 --> 00:24:19,329
work another way that those might work

597
00:24:17,180 --> 00:24:21,230
is you can imagine doing something

598
00:24:19,329 --> 00:24:22,879
another sort of transmission on this

599
00:24:21,230 --> 00:24:25,730
where it's like okay I don't want to go

600
00:24:22,880 --> 00:24:27,200
this route but I do want to have the

601
00:24:25,730 --> 00:24:29,930
EULA dynamically add stuff so maybe

602
00:24:27,200 --> 00:24:32,690
instead of having these be wrote in here

603
00:24:29,930 --> 00:24:36,170
I have like a prop list in here instead

604
00:24:32,690 --> 00:24:39,680
and I just add props to this array or

605
00:24:36,170 --> 00:24:42,710
whatever it is right so all that stuff

606
00:24:39,680 --> 00:24:44,920
is eminently possible there's you know

607
00:24:42,710 --> 00:24:47,750
various ways we could store it etc etc

608
00:24:44,920 --> 00:24:50,390
so what I thought we would do on a

609
00:24:47,750 --> 00:24:52,250
handmade hero because I think this is

610
00:24:50,390 --> 00:24:57,320
probably one of the more interesting

611
00:24:52,250 --> 00:25:00,319
parts if that makes sense is I think we

612
00:24:57,319 --> 00:25:01,909
should just do a new entity system one

613
00:25:00,319 --> 00:25:06,019
that as far as I know and no one's ever

614
00:25:01,910 --> 00:25:09,019
done before and that way we can sort of

615
00:25:06,019 --> 00:25:10,879
see well okay what is it like to create

616
00:25:09,019 --> 00:25:12,710
one of these from scratch what are the

617
00:25:10,880 --> 00:25:14,090
trade-offs what do we do well and what

618
00:25:12,710 --> 00:25:16,640
don't we do well and how did it come out

619
00:25:14,089 --> 00:25:18,529
and so you can sort of see that from

620
00:25:16,640 --> 00:25:20,150
first principles and I think that would

621
00:25:18,529 --> 00:25:21,670
be pretty cool and since it forms the

622
00:25:20,150 --> 00:25:23,780
backbone of the entire game experience

623
00:25:21,670 --> 00:25:26,600
it's something that's worth spending

624
00:25:23,779 --> 00:25:28,369
time on and worth you know being a major

625
00:25:26,599 --> 00:25:29,990
part of the development process of

626
00:25:28,369 --> 00:25:32,389
handmade hero because it's what will

627
00:25:29,990 --> 00:25:38,029
drive everything in the game as far as

628
00:25:32,390 --> 00:25:39,830
logic is concerned right okay so I'm

629
00:25:38,029 --> 00:25:41,839
gonna introduce this concept and like I

630
00:25:39,829 --> 00:25:43,069
said I don't know of anyone ever having

631
00:25:41,839 --> 00:25:45,049
done this before doesn't mean no one has

632
00:25:43,069 --> 00:25:47,210
a lot of times in development or in

633
00:25:45,049 --> 00:25:48,559
programming in general you'll find that

634
00:25:47,210 --> 00:25:49,850
just because you do something from

635
00:25:48,559 --> 00:25:51,259
scratch and you've never heard of it and

636
00:25:49,849 --> 00:25:52,189
even if many people you know haven't

637
00:25:51,259 --> 00:25:55,759
heard of it that doesn't mean that

638
00:25:52,190 --> 00:25:57,580
someone somewhere hasn't done it maybe

639
00:25:55,759 --> 00:26:00,200
they just didn't tell anyone

640
00:25:57,579 --> 00:26:03,168
or maybe you just didn't hear about it

641
00:26:00,200 --> 00:26:04,250
I'm gonna do something and there are a

642
00:26:03,169 --> 00:26:07,159
number of reasons why this is a

643
00:26:04,250 --> 00:26:09,380
absolutely crazy idea but I'm gonna do

644
00:26:07,159 --> 00:26:14,090
it anyway I'm gonna do something I call

645
00:26:09,380 --> 00:26:18,519
the sparse entity system oh wow

646
00:26:14,089 --> 00:26:23,658
Franklin what's happened there sparse

647
00:26:18,519 --> 00:26:27,909
entity system and what this thing is is

648
00:26:23,659 --> 00:26:31,789
it was my way of trying to come up with

649
00:26:27,909 --> 00:26:35,539
sort of a different way of looking at

650
00:26:31,788 --> 00:26:38,450
entities that preserved all of the speed

651
00:26:35,538 --> 00:26:40,009
of how you would write code in C to deal

652
00:26:38,450 --> 00:26:43,399
with stuff when you know what you are

653
00:26:40,009 --> 00:26:45,500
dealing with but still have all the

654
00:26:43,398 --> 00:26:48,829
benefits of having entities that can do

655
00:26:45,500 --> 00:26:53,210
anything and become anything in any way

656
00:26:48,829 --> 00:26:55,129
right and so this is what I came up with

657
00:26:53,210 --> 00:26:57,740
and it's kind of a crazy idea

658
00:26:55,130 --> 00:26:59,389
but the only way you know whether idea

659
00:26:57,740 --> 00:27:00,859
is truly crazy or not is to try it and

660
00:26:59,388 --> 00:27:05,678
see if it works and if it works it

661
00:27:00,859 --> 00:27:07,879
wasn't that crazy so here's how it works

662
00:27:05,679 --> 00:27:13,370
first I would like to say a little bit

663
00:27:07,880 --> 00:27:14,870
about inheritance because there's

664
00:27:13,369 --> 00:27:16,339
something about inheritance that I say

665
00:27:14,869 --> 00:27:19,609
often and people look at me kind of

666
00:27:16,339 --> 00:27:21,648
funny but it's it's like obviously true

667
00:27:19,609 --> 00:27:23,388
I think so I don't think it's like

668
00:27:21,648 --> 00:27:24,739
contentious I think I just don't often

669
00:27:23,388 --> 00:27:26,240
take the time to explain it and it's not

670
00:27:24,740 --> 00:27:27,919
the way people maybe think about it

671
00:27:26,240 --> 00:27:30,859
normally so I'm just gonna say it here

672
00:27:27,919 --> 00:27:33,639
because it bears on what I'm about to

673
00:27:30,859 --> 00:27:38,269
say with smarts any system so

674
00:27:33,638 --> 00:27:41,509
inheritance is this concept that if

675
00:27:38,269 --> 00:27:43,220
you're a C++ programmer you've come to

676
00:27:41,509 --> 00:27:45,798
understand as meaning something

677
00:27:43,220 --> 00:27:47,210
relatively specific and now it doesn't

678
00:27:45,798 --> 00:27:49,609
necessarily mean something quite that

679
00:27:47,210 --> 00:27:52,610
specific in the general operating

680
00:27:49,609 --> 00:27:55,189
context but either way we can use this

681
00:27:52,609 --> 00:27:58,089
as sort of a point something to get the

682
00:27:55,190 --> 00:28:00,440
point across and what that is is

683
00:27:58,089 --> 00:28:03,888
inheritance is sort of like saying well

684
00:28:00,440 --> 00:28:07,730
I've got this struct right and I'm gonna

685
00:28:03,888 --> 00:28:08,119
call it foo and in that struct I have an

686
00:28:07,730 --> 00:28:08,980
integer

687
00:28:08,119 --> 00:28:13,389
X

688
00:28:08,980 --> 00:28:16,240
and I know that anytime I've got this

689
00:28:13,390 --> 00:28:19,270
integer X that there are some things

690
00:28:16,240 --> 00:28:22,269
that I might want to do on that integer

691
00:28:19,269 --> 00:28:24,910
X right so I have algorithms that depend

692
00:28:22,269 --> 00:28:27,579
on this integer X and maybe to make it a

693
00:28:24,910 --> 00:28:28,720
little bit more realistic typically you

694
00:28:27,579 --> 00:28:30,879
know we're gonna be bundling something

695
00:28:28,720 --> 00:28:32,769
so we have an integer X and then we've

696
00:28:30,880 --> 00:28:36,850
got some other thing here which is like

697
00:28:32,769 --> 00:28:41,400
a boolean I might as well use my types

698
00:28:36,849 --> 00:28:45,459
on s 32x and ab32

699
00:28:41,400 --> 00:28:47,830
which is like you know is it fat is it

700
00:28:45,460 --> 00:28:51,220
fatty right is it is it kind of like a

701
00:28:47,829 --> 00:28:53,470
bloated thing so I've got these two

702
00:28:51,220 --> 00:28:55,298
pieces of information here and then I've

703
00:28:53,470 --> 00:28:57,759
written these algorithms right that

704
00:28:55,298 --> 00:29:00,579
depend on those two things being

705
00:28:57,759 --> 00:29:03,460
together so X and fat are both supposed

706
00:29:00,579 --> 00:29:05,740
to be there and then I can write things

707
00:29:03,460 --> 00:29:08,620
in CC lets me write things very cleanly

708
00:29:05,740 --> 00:29:11,079
in ways that understand this so I can do

709
00:29:08,619 --> 00:29:14,769
something like you know make a function

710
00:29:11,079 --> 00:29:19,210
called D fatty Phi which takes one of

711
00:29:14,769 --> 00:29:22,210
these things in right here's my foo and

712
00:29:19,210 --> 00:29:26,710
this D FATA Phi is gonna do something

713
00:29:22,210 --> 00:29:30,370
like if you know the foo X is you know

714
00:29:26,710 --> 00:29:34,630
less than 10 then we'll just just a

715
00:29:30,369 --> 00:29:41,439
state from now on that the fat is is not

716
00:29:34,630 --> 00:29:44,110
fat anymore okay now again I know this

717
00:29:41,440 --> 00:29:46,539
looks really simple but I really want

718
00:29:44,109 --> 00:29:48,879
you to think about what is going on here

719
00:29:46,539 --> 00:29:51,069
because it's very very important and

720
00:29:48,880 --> 00:29:53,350
it's the cornerstone of understanding a

721
00:29:51,069 --> 00:29:57,339
lot of how architecture actually works

722
00:29:53,349 --> 00:30:01,509
at a low level okay there is no

723
00:29:57,339 --> 00:30:05,740
difference in terms of actual what we

724
00:30:01,509 --> 00:30:09,009
are doing theoretically right between

725
00:30:05,740 --> 00:30:12,069
writing D fat if I like this and writing

726
00:30:09,009 --> 00:30:14,339
D fat off' i in the equivalent way like

727
00:30:12,069 --> 00:30:14,339
this

728
00:30:20,259 --> 00:30:23,259
okay

729
00:30:28,099 --> 00:30:30,730
oops

730
00:30:35,880 --> 00:30:43,960
does that make sense now you can see it

731
00:30:40,720 --> 00:30:45,850
how it looks there right and on the left

732
00:30:43,960 --> 00:30:48,970
side we have something where we pass in

733
00:30:45,849 --> 00:30:51,819
a foo and we're going to say if the X in

734
00:30:48,970 --> 00:30:54,759
the foo is less than 10 then set the fat

735
00:30:51,819 --> 00:30:57,759
in the food to false but the logic and

736
00:30:54,759 --> 00:31:00,369
what this function does change is not at

737
00:30:57,759 --> 00:31:04,450
all if I were to just pass a pointer to

738
00:31:00,369 --> 00:31:06,969
an X and a pointer to a fat right now

739
00:31:04,450 --> 00:31:10,830
what has happened when I do this

740
00:31:06,970 --> 00:31:14,558
operation when I go from here to here is

741
00:31:10,829 --> 00:31:17,048
I've made this function more flexible

742
00:31:14,558 --> 00:31:20,619
right because now it can operate on any

743
00:31:17,048 --> 00:31:22,720
pair of X and fat instead of having to

744
00:31:20,619 --> 00:31:24,808
operate on ones that were right next to

745
00:31:22,720 --> 00:31:29,409
each other okay

746
00:31:24,808 --> 00:31:30,668
so in a sense this is an optimization of

747
00:31:29,409 --> 00:31:33,610
this

748
00:31:30,669 --> 00:31:36,700
it's an optimization in two ways first

749
00:31:33,609 --> 00:31:39,219
it optimizes our ability to semantically

750
00:31:36,700 --> 00:31:42,250
write the program because now it takes

751
00:31:39,220 --> 00:31:44,650
us less time if we know that we often

752
00:31:42,250 --> 00:31:48,609
have X's and fats occurring together in

753
00:31:44,650 --> 00:31:51,190
a meaningful way now we can use that foo

754
00:31:48,609 --> 00:31:53,129
everywhere instead which saves us typing

755
00:31:51,190 --> 00:31:56,580
and keeps our code more organized and

756
00:31:53,130 --> 00:31:59,289
reduces the errors we might make right

757
00:31:56,579 --> 00:32:01,629
but it also helps the compiler optimize

758
00:31:59,288 --> 00:32:04,179
because now it knows well I can just

759
00:32:01,630 --> 00:32:06,250
pass one pointer and know that there's a

760
00:32:04,179 --> 00:32:09,100
fixed offset for getting from the food

761
00:32:06,250 --> 00:32:11,890
from the X and the fat right and so I

762
00:32:09,099 --> 00:32:13,839
can do less work in the resulting

763
00:32:11,890 --> 00:32:17,470
machine code to accomplish the same

764
00:32:13,839 --> 00:32:23,109
operation okay so this is more

765
00:32:17,470 --> 00:32:25,058
cumbersome and slower potentially right

766
00:32:23,109 --> 00:32:28,750
it's both of these things potentially

767
00:32:25,058 --> 00:32:31,839
then this is and so typically we prefer

768
00:32:28,750 --> 00:32:36,130
this even though this is more powerful

769
00:32:31,839 --> 00:32:38,379
right it can do more things because

770
00:32:36,130 --> 00:32:41,350
instead of I only have to call it with a

771
00:32:38,380 --> 00:32:43,330
foo you could do it this way and so this

772
00:32:41,349 --> 00:32:45,519
function there'd be times when you have

773
00:32:43,329 --> 00:32:47,408
to bundle these things together pass

774
00:32:45,519 --> 00:32:49,329
them in and then unbundle them on the

775
00:32:47,409 --> 00:32:51,790
way out right it can

776
00:32:49,329 --> 00:32:53,949
do the other operations that this can do

777
00:32:51,789 --> 00:33:01,450
necessarily without essentially writing

778
00:32:53,950 --> 00:33:02,799
all this pre and post amble write very

779
00:33:01,450 --> 00:33:04,360
very obvious like I said there's nothing

780
00:33:02,799 --> 00:33:06,009
particularly interesting happening here

781
00:33:04,359 --> 00:33:09,399
I just wanted to get that out so you can

782
00:33:06,009 --> 00:33:11,049
see that right so now inheritance is

783
00:33:09,400 --> 00:33:13,330
essentially the same sort of

784
00:33:11,049 --> 00:33:15,279
understanding if I am now to say that I

785
00:33:13,329 --> 00:33:17,939
would like to inherit from struct foo

786
00:33:15,279 --> 00:33:22,359
and I would like to make a struct bar

787
00:33:17,940 --> 00:33:24,580
all right then obviously what I could do

788
00:33:22,359 --> 00:33:27,129
with really no loss of generality or

789
00:33:24,579 --> 00:33:28,899
anything else is I could just make a

790
00:33:27,130 --> 00:33:31,390
food pointer here that says well there's

791
00:33:28,900 --> 00:33:33,130
a foo right or it better yet I could

792
00:33:31,390 --> 00:33:37,720
just contain the flu entirely myself

793
00:33:33,130 --> 00:33:42,730
right and then anytime I actually want

794
00:33:37,720 --> 00:33:44,380
to use this this foo I just take the

795
00:33:42,730 --> 00:33:46,269
address of it right and I pass it

796
00:33:44,380 --> 00:33:49,330
through to the person who wants to use

797
00:33:46,269 --> 00:33:51,009
it right so I can call all the things

798
00:33:49,329 --> 00:33:53,589
that I would have called on bar on the

799
00:33:51,009 --> 00:33:55,839
foo and that will just work okay now

800
00:33:53,589 --> 00:33:57,789
when I do this I typically presumably

801
00:33:55,839 --> 00:34:00,579
want to add some more information here

802
00:33:57,789 --> 00:34:03,519
so maybe I add a real 32 here which is

803
00:34:00,579 --> 00:34:05,409
like you know swim pee it's half scrimpy

804
00:34:03,519 --> 00:34:07,450
the thing is right you know is it

805
00:34:05,410 --> 00:34:09,039
particularly swim pee I don't know maybe

806
00:34:07,450 --> 00:34:12,670
there's a zero to one number that's a

807
00:34:09,039 --> 00:34:15,789
swim penis right so I'm going to add

808
00:34:12,670 --> 00:34:19,240
that in here and so now what we're going

809
00:34:15,789 --> 00:34:21,039
to do is say well all right if you look

810
00:34:19,239 --> 00:34:23,109
at what happens when I try to you know

811
00:34:21,039 --> 00:34:25,029
when I try to construct this it starts

812
00:34:23,110 --> 00:34:26,980
to become a little bit cumbersome for me

813
00:34:25,030 --> 00:34:30,040
because now every time I have to call

814
00:34:26,980 --> 00:34:32,110
Dee fat if I on one of these bars I have

815
00:34:30,039 --> 00:34:34,869
to take the address of the foo inside it

816
00:34:32,110 --> 00:34:38,559
in order to call it right and that's

817
00:34:34,869 --> 00:34:40,329
kind of annoying so really all I want

818
00:34:38,559 --> 00:34:41,889
the compiler to do here for me it's just

819
00:34:40,329 --> 00:34:43,840
could you do that automatically you know

820
00:34:41,889 --> 00:34:46,960
that foo is the first thing in there

821
00:34:43,840 --> 00:34:49,470
right and so if you knew foo was the

822
00:34:46,960 --> 00:34:52,510
first thing you could just go ahead and

823
00:34:49,469 --> 00:34:54,129
pass the same pointer because a pointer

824
00:34:52,510 --> 00:34:55,810
to a bar and a pointer to foo are the

825
00:34:54,130 --> 00:34:59,170
same thing they always have a flue at

826
00:34:55,809 --> 00:35:01,239
the top right and so inheritance was

827
00:34:59,170 --> 00:35:02,490
just saying oh okay you know well if I

828
00:35:01,239 --> 00:35:04,379
have a bar I

829
00:35:02,489 --> 00:35:07,339
want to be able to say that it's got a

830
00:35:04,380 --> 00:35:09,210
public foo inside of it right

831
00:35:07,340 --> 00:35:13,170
that's probably should be lowercase

832
00:35:09,210 --> 00:35:17,789
there it's got a foo and then I only

833
00:35:13,170 --> 00:35:19,650
define the new things here right and now

834
00:35:17,789 --> 00:35:21,119
the compiler knows Oh anytime someone

835
00:35:19,650 --> 00:35:23,430
was expecting one of these I can just

836
00:35:21,119 --> 00:35:26,220
pass you know it regularly and it'll

837
00:35:23,429 --> 00:35:27,779
just work so it's all good okay and the

838
00:35:26,219 --> 00:35:31,230
reason that happened is because we

839
00:35:27,780 --> 00:35:34,110
preserved the condition that we needed

840
00:35:31,230 --> 00:35:36,599
to do the optimization just like here we

841
00:35:34,110 --> 00:35:39,059
know the relative offsets of things from

842
00:35:36,599 --> 00:35:41,368
the base pointer so everything can just

843
00:35:39,059 --> 00:35:44,309
be compiled with that knowledge in place

844
00:35:41,369 --> 00:35:46,079
right there's no difference we could

845
00:35:44,309 --> 00:35:47,429
have just stuck with this and every time

846
00:35:46,079 --> 00:35:49,289
we want to call D phat affiance

847
00:35:47,429 --> 00:35:50,940
something passed those pointers to the

848
00:35:49,289 --> 00:35:54,320
actual internal parts that we care about

849
00:35:50,940 --> 00:35:56,940
but it's just semantically much more

850
00:35:54,320 --> 00:35:59,850
much easier to use the inheritance way

851
00:35:56,940 --> 00:36:01,710
right and it's faster using this way

852
00:35:59,849 --> 00:36:05,880
because we know where everything is

853
00:36:01,710 --> 00:36:09,179
and that is why of course the base

854
00:36:05,880 --> 00:36:11,579
inheritance mechanism in C++ is so rigid

855
00:36:09,179 --> 00:36:13,710
and is so you might say underpowered

856
00:36:11,579 --> 00:36:15,269
compared to the inheritance mechanisms

857
00:36:13,710 --> 00:36:19,050
in other arbitrary to program Ed's for

858
00:36:15,269 --> 00:36:21,150
example it's because it was trying to

859
00:36:19,050 --> 00:36:23,280
retain this fast property of knowing

860
00:36:21,150 --> 00:36:28,440
where everything was relative to the

861
00:36:23,280 --> 00:36:31,019
base pointer so now let's look at

862
00:36:28,440 --> 00:36:35,670
precisely why this starts to fall apart

863
00:36:31,019 --> 00:36:37,230
and what it was actually doing when it

864
00:36:35,670 --> 00:36:38,400
fell apart or what it was trying to

865
00:36:37,230 --> 00:36:40,710
preserve when it fell apart that maybe

866
00:36:38,400 --> 00:36:41,820
we don't know preserve well I don't want

867
00:36:40,710 --> 00:36:43,260
a spoiler warning it too much on it

868
00:36:41,820 --> 00:36:45,869
looses say let me show you some more

869
00:36:43,260 --> 00:36:48,359
things all right so here are my

870
00:36:45,869 --> 00:36:50,190
structures I was talking about typically

871
00:36:48,358 --> 00:36:52,199
what happens now is when we start

872
00:36:50,190 --> 00:36:54,690
talking about this in the more realistic

873
00:36:52,199 --> 00:36:56,309
context you can start to see why

874
00:36:54,690 --> 00:36:58,470
inheritance begins to break down a

875
00:36:56,309 --> 00:36:59,849
little bit in the cases that we wanted

876
00:36:58,469 --> 00:37:01,858
to talk about above where we were

877
00:36:59,849 --> 00:37:03,269
talking about oh we've got burner bulls

878
00:37:01,858 --> 00:37:05,279
we've got health we've got those sorts

879
00:37:03,269 --> 00:37:07,230
of things so now if I want to start

880
00:37:05,280 --> 00:37:09,810
talking about something and I wanted to

881
00:37:07,230 --> 00:37:11,010
create one of these structs right like

882
00:37:09,809 --> 00:37:12,389
let's say I wanted to create one of

883
00:37:11,010 --> 00:37:14,670
those necros like I was talking about

884
00:37:12,389 --> 00:37:16,049
well now I want to do some inheritance

885
00:37:14,670 --> 00:37:17,849
here and I want to say

886
00:37:16,050 --> 00:37:21,510
it's I want to use it with things that

887
00:37:17,849 --> 00:37:25,739
expect you know a health thing there

888
00:37:21,510 --> 00:37:28,770
right and I also want to be able to use

889
00:37:25,739 --> 00:37:32,699
it with something that that supports you

890
00:37:28,769 --> 00:37:34,199
know a burnable right and and there's

891
00:37:32,699 --> 00:37:38,460
all these things I might want to inherit

892
00:37:34,199 --> 00:37:41,129
from okay because I my way of saying

893
00:37:38,460 --> 00:37:44,460
that I use functionality comes from

894
00:37:41,130 --> 00:37:47,000
inheritance okay I want to be able to

895
00:37:44,460 --> 00:37:49,889
grab all the functionality that I want

896
00:37:47,000 --> 00:37:51,510
well this obviously starts to break down

897
00:37:49,889 --> 00:37:53,879
very quickly and it's why you know this

898
00:37:51,510 --> 00:37:56,010
is the multiple inheritance case right

899
00:37:53,880 --> 00:38:04,440
that's very terrifying to C++

900
00:37:56,010 --> 00:38:07,920
programmers because it's so wacky but

901
00:38:04,440 --> 00:38:10,860
you can do it multiple inheritance is

902
00:38:07,920 --> 00:38:13,380
very problematic because now you can no

903
00:38:10,860 --> 00:38:16,050
longer use the trick that si was using

904
00:38:13,380 --> 00:38:17,430
we can't just say well I want to be able

905
00:38:16,050 --> 00:38:19,200
to pass this thing around to any

906
00:38:17,429 --> 00:38:21,299
function that expected one of the things

907
00:38:19,199 --> 00:38:22,169
that it it like kind of does it kind of

908
00:38:21,300 --> 00:38:23,760
looks like right

909
00:38:22,170 --> 00:38:26,670
it's a healable thing it's a burnable

910
00:38:23,760 --> 00:38:28,080
thing it's a whatever thing I can't keep

911
00:38:26,670 --> 00:38:30,480
using that trick because the trick I

912
00:38:28,079 --> 00:38:33,960
used was to put it first but only one

913
00:38:30,480 --> 00:38:37,559
thing can come first right and so now a

914
00:38:33,960 --> 00:38:39,210
pointer to a necro is no longer also a

915
00:38:37,559 --> 00:38:40,230
pointer to a health and a pointer to a

916
00:38:39,210 --> 00:38:42,090
burnable and a pointer to everything

917
00:38:40,230 --> 00:38:44,400
else because only one of those is

918
00:38:42,090 --> 00:38:46,320
actually going to be first so yes

919
00:38:44,400 --> 00:38:48,480
passing it to a health a thing that

920
00:38:46,320 --> 00:38:50,070
affects health that may work because

921
00:38:48,480 --> 00:38:51,809
that's the first thing let's say but

922
00:38:50,070 --> 00:38:53,700
passing it to a burnable that won't work

923
00:38:51,809 --> 00:38:55,519
the pointer has to be adjusted because

924
00:38:53,699 --> 00:38:58,710
the burnable is in a different place

925
00:38:55,519 --> 00:39:00,869
relative to that top necro pointer so

926
00:38:58,710 --> 00:39:04,920
when pointers get passed they have to be

927
00:39:00,869 --> 00:39:06,119
readjusted right and so now things start

928
00:39:04,920 --> 00:39:07,769
to break down and it starts to be a

929
00:39:06,119 --> 00:39:09,119
little more cumbersome but you can do it

930
00:39:07,769 --> 00:39:10,110
right you could still do it and you

931
00:39:09,119 --> 00:39:12,989
could lean on the multiple inheritance

932
00:39:10,110 --> 00:39:17,130
system and try to make that work believe

933
00:39:12,989 --> 00:39:19,019
me people have done it but now we get to

934
00:39:17,130 --> 00:39:21,360
the final problem and the one that's

935
00:39:19,019 --> 00:39:23,009
obviously just never works in C++ and

936
00:39:21,360 --> 00:39:26,160
that is if we wanted to make this

937
00:39:23,010 --> 00:39:28,260
dynamic if I built my whole code base

938
00:39:26,159 --> 00:39:29,609
around C++ as multiple inheritance and

939
00:39:28,260 --> 00:39:32,730
now I want to say

940
00:39:29,610 --> 00:39:35,670
oh you know what I created a necro he

941
00:39:32,730 --> 00:39:37,110
was running around and then he had the

942
00:39:35,670 --> 00:39:38,400
spell cast on him that gives him this

943
00:39:37,110 --> 00:39:42,210
extra property that normally doesn't

944
00:39:38,400 --> 00:39:46,710
have right uh what do I do

945
00:39:42,210 --> 00:39:50,099
I I can't add new inherited things to a

946
00:39:46,710 --> 00:39:52,170
C++ struct at runtime right that's not a

947
00:39:50,099 --> 00:39:53,009
capability that the language allows and

948
00:39:52,170 --> 00:39:55,260
for a good reason

949
00:39:53,010 --> 00:39:57,390
the language is a compile-time language

950
00:39:55,260 --> 00:39:59,910
the inheritance is compile-time oriented

951
00:39:57,389 --> 00:40:01,259
all of these things with the offsets and

952
00:39:59,909 --> 00:40:02,339
the pointer fix ups that I just talked

953
00:40:01,260 --> 00:40:03,210
about which have gotten much more

954
00:40:02,340 --> 00:40:05,630
complicated with the multiple

955
00:40:03,210 --> 00:40:09,119
inheritance all get baked into the code

956
00:40:05,630 --> 00:40:11,789
so now it's it's an answer I literally

957
00:40:09,119 --> 00:40:14,429
can't just choose what things I want to

958
00:40:11,789 --> 00:40:15,690
add to it and expect those to work and

959
00:40:14,429 --> 00:40:16,980
furthermore it wouldn't even make sense

960
00:40:15,690 --> 00:40:18,539
because where in the code would it ever

961
00:40:16,980 --> 00:40:20,490
be called there's there's so many

962
00:40:18,539 --> 00:40:26,460
reasons why that doesn't really work

963
00:40:20,489 --> 00:40:28,709
right so now comes the part about

964
00:40:26,460 --> 00:40:31,829
inheritance that I want to say that

965
00:40:28,710 --> 00:40:34,610
people don't usually understand when I

966
00:40:31,829 --> 00:40:37,289
say it but I'm so I'm gonna say it here

967
00:40:34,610 --> 00:40:42,269
what I normally say is inheritance is

968
00:40:37,289 --> 00:40:45,090
compression it's a compression algorithm

969
00:40:42,269 --> 00:40:46,679
and that's it that's all inheritance

970
00:40:45,090 --> 00:40:48,530
it's it's strictly a compression

971
00:40:46,679 --> 00:40:53,329
algorithm it doesn't do anything else

972
00:40:48,530 --> 00:40:57,060
and let me tell you what I mean by that

973
00:40:53,329 --> 00:40:59,789
let's say that I was to take every

974
00:40:57,059 --> 00:41:03,239
possible thing that could ever be

975
00:40:59,789 --> 00:41:04,889
contained in an entity right so let's

976
00:41:03,239 --> 00:41:06,029
say I've got all these properties right

977
00:41:04,889 --> 00:41:08,460
and I don't know how many there are

978
00:41:06,030 --> 00:41:12,390
let's say there's there's 200 of them

979
00:41:08,460 --> 00:41:15,599
okay let's say I was to take those and

980
00:41:12,389 --> 00:41:19,319
just actually put them all in one big

981
00:41:15,599 --> 00:41:21,480
struct right just they're all in there

982
00:41:19,320 --> 00:41:23,010
so I just have a giant struct and

983
00:41:21,480 --> 00:41:25,740
instead of anything to instead of trying

984
00:41:23,010 --> 00:41:28,260
to be clever here I was just to say okay

985
00:41:25,739 --> 00:41:30,659
I just have one giant struct and inside

986
00:41:28,260 --> 00:41:34,710
the struct is every last property that

987
00:41:30,659 --> 00:41:38,250
there is all of them right so here's you

988
00:41:34,710 --> 00:41:41,250
know the what did I have I had an S 32

989
00:41:38,250 --> 00:41:42,789
that was my X component I had to be 32

990
00:41:41,250 --> 00:41:45,400
for the fat

991
00:41:42,789 --> 00:41:50,169
I had that our 32 for the was ask

992
00:41:45,400 --> 00:41:52,028
wimpiness I had the squid penis right so

993
00:41:50,168 --> 00:41:54,188
I had all of these things in here down

994
00:41:52,028 --> 00:41:57,099
down down atomic everything that could

995
00:41:54,188 --> 00:42:00,129
possibly occur in an entity was all in

996
00:41:57,099 --> 00:42:02,140
there in fact much like what we have

997
00:42:00,130 --> 00:42:03,338
going on in here where I just said let's

998
00:42:02,139 --> 00:42:05,199
just stuff it in there and not care

999
00:42:03,338 --> 00:42:10,748
about it for now it's just anything that

1000
00:42:05,199 --> 00:42:14,409
anyone ever wanted is sitting there it's

1001
00:42:10,748 --> 00:42:18,759
giant right it's like a 64k structure or

1002
00:42:14,409 --> 00:42:21,578
something it's just huge well if I had

1003
00:42:18,759 --> 00:42:24,458
that that could be the thing that I pass

1004
00:42:21,579 --> 00:42:28,079
to any function because any whatever the

1005
00:42:24,458 --> 00:42:31,719
function was whatever it was gonna do

1006
00:42:28,079 --> 00:42:35,019
it'll work the stuff it's looking for is

1007
00:42:31,719 --> 00:42:39,639
there and furthermore it's much more

1008
00:42:35,018 --> 00:42:42,879
powerful than any of these because it

1009
00:42:39,639 --> 00:42:45,759
can actually operate across different

1010
00:42:42,880 --> 00:42:46,869
any two pieces or more if it wants to

1011
00:42:45,759 --> 00:42:48,759
grab something from the health and

1012
00:42:46,869 --> 00:42:51,999
something from the burnable I don't need

1013
00:42:48,759 --> 00:42:53,619
to make a health burnable class that's a

1014
00:42:51,998 --> 00:42:54,759
thing that has member functions for

1015
00:42:53,619 --> 00:42:56,679
those in or any of the other things I

1016
00:42:54,759 --> 00:42:58,659
don't need to do any of that I can just

1017
00:42:56,679 --> 00:42:59,829
say hey go look at the health and go

1018
00:42:58,659 --> 00:43:03,519
look at the burnable there alright in

1019
00:42:59,829 --> 00:43:05,289
this big struct right so what you're

1020
00:43:03,518 --> 00:43:06,548
doing when you create an inheritance

1021
00:43:05,289 --> 00:43:08,199
hierarchy in an object-oriented

1022
00:43:06,548 --> 00:43:10,208
programming language is you're just

1023
00:43:08,199 --> 00:43:13,088
compressing things that's all you're

1024
00:43:10,208 --> 00:43:16,268
doing you're doing compression on the

1025
00:43:13,088 --> 00:43:18,068
Struck's that you have by saying instead

1026
00:43:16,268 --> 00:43:20,998
of putting everything into one giant

1027
00:43:18,068 --> 00:43:23,228
struct I'm gonna take just the sub

1028
00:43:20,998 --> 00:43:25,149
configurations that I believe actually

1029
00:43:23,228 --> 00:43:27,428
ever get used in the program that I need

1030
00:43:25,150 --> 00:43:30,369
to actually talk about I'm gonna take

1031
00:43:27,429 --> 00:43:33,400
just those and make those out of the

1032
00:43:30,369 --> 00:43:35,048
inheritance hierarchy right so hey stuff

1033
00:43:33,400 --> 00:43:37,298
there are some things that have an X of

1034
00:43:35,048 --> 00:43:40,498
fat in ask Wimpy so that's why we had a

1035
00:43:37,298 --> 00:43:42,639
foo in a bar underneath it right and

1036
00:43:40,498 --> 00:43:44,468
there's other people who need just ask

1037
00:43:42,639 --> 00:43:46,389
wimpy so we made one of those but

1038
00:43:44,469 --> 00:43:49,438
there's never somebody who needs a you

1039
00:43:46,389 --> 00:43:49,438
know I don't know like

1040
00:43:50,858 --> 00:43:55,420
carrot top and ask wimpy so that never

1041
00:43:53,949 --> 00:43:58,480
occurred together and we just don't have

1042
00:43:55,420 --> 00:44:01,599
that right so essentially if you imagine

1043
00:43:58,480 --> 00:44:04,719
all of the data right so if you imagine

1044
00:44:01,599 --> 00:44:07,330
this is all the data that could possibly

1045
00:44:04,719 --> 00:44:09,039
occur and maybe we could even we could

1046
00:44:07,329 --> 00:44:11,949
even take this into the theoretical

1047
00:44:09,039 --> 00:44:14,199
realm and just say even if that means it

1048
00:44:11,949 --> 00:44:16,779
is infinite meaning it doesn't even

1049
00:44:14,199 --> 00:44:19,419
matter how big it is every possible

1050
00:44:16,780 --> 00:44:21,430
configuration of stuff that could occur

1051
00:44:19,420 --> 00:44:25,659
we've made it so that it can all coexist

1052
00:44:21,429 --> 00:44:29,230
together in a giant struct if we took

1053
00:44:25,659 --> 00:44:31,239
that and we specialized it by just

1054
00:44:29,230 --> 00:44:34,420
picking out the ones the combinations we

1055
00:44:31,239 --> 00:44:38,079
actually ever use that is what an

1056
00:44:34,420 --> 00:44:43,720
inheritance hierarchy is doing right to

1057
00:44:38,079 --> 00:44:47,559
the data now we can talk about

1058
00:44:43,719 --> 00:44:48,819
dispatches separate and dispatch is just

1059
00:44:47,559 --> 00:44:50,320
a function the glorified function

1060
00:44:48,820 --> 00:44:52,510
pointer so hopefully there's going to be

1061
00:44:50,320 --> 00:44:54,640
too much talk about that but that's what

1062
00:44:52,510 --> 00:44:57,369
we're actually doing to the data so data

1063
00:44:54,639 --> 00:45:00,879
wise inheritance is just a compression

1064
00:44:57,369 --> 00:45:04,150
algorithm it lets you not store a ton of

1065
00:45:00,880 --> 00:45:07,329
stuff you don't need that is it right

1066
00:45:04,150 --> 00:45:08,820
now this is where the sort of object

1067
00:45:07,329 --> 00:45:10,838
oriented programming lunacy comes in

1068
00:45:08,820 --> 00:45:12,940
because a lot of people would be like

1069
00:45:10,838 --> 00:45:15,279
well you know it's it's it's good

1070
00:45:12,940 --> 00:45:16,990
programming to like high data that isn't

1071
00:45:15,280 --> 00:45:19,690
necessary from other functions mostly

1072
00:45:16,989 --> 00:45:21,459
like okay if that's your thing you know

1073
00:45:19,690 --> 00:45:24,250
go away I don't want to hear from you

1074
00:45:21,460 --> 00:45:25,380
like go have your weird party over in

1075
00:45:24,250 --> 00:45:27,309
la-la land

1076
00:45:25,380 --> 00:45:29,170
assuming that you actually care about

1077
00:45:27,309 --> 00:45:31,809
what the CPU is actually doing at the

1078
00:45:29,170 --> 00:45:33,309
end of the day this the thing that

1079
00:45:31,809 --> 00:45:35,349
inheritance actually was gonna do for

1080
00:45:33,309 --> 00:45:37,179
you was it was going to make it so that

1081
00:45:35,349 --> 00:45:39,309
you aren't storing data that you don't

1082
00:45:37,179 --> 00:45:42,368
actually need to store which isn't

1083
00:45:39,309 --> 00:45:45,009
necessarily a waste of time right that's

1084
00:45:42,369 --> 00:45:46,450
important again for cash concerns and

1085
00:45:45,010 --> 00:45:48,010
all this stuff even if we don't care

1086
00:45:46,449 --> 00:45:50,348
because we have plenty of actual memory

1087
00:45:48,010 --> 00:45:52,270
which we don't always have either you

1088
00:45:50,349 --> 00:45:55,480
know we care about the footprint of

1089
00:45:52,269 --> 00:45:59,230
things and that is what inheritance lets

1090
00:45:55,480 --> 00:46:01,539
us do but it comes at that very specific

1091
00:45:59,230 --> 00:46:03,400
drawback of having a very hard time

1092
00:46:01,539 --> 00:46:06,759
mixing things in

1093
00:46:03,400 --> 00:46:09,670
very ways because we have to pre declare

1094
00:46:06,760 --> 00:46:12,130
all the different mixed kinds that we

1095
00:46:09,670 --> 00:46:14,980
might want rather than just letting them

1096
00:46:12,130 --> 00:46:16,838
happen organically at runtime we have to

1097
00:46:14,980 --> 00:46:18,400
care about that right and now

1098
00:46:16,838 --> 00:46:20,650
opportunity to program programming

1099
00:46:18,400 --> 00:46:23,099
languages that are dynamic and that

1100
00:46:20,650 --> 00:46:28,119
aren't like C++ in that compile time way

1101
00:46:23,099 --> 00:46:29,349
they obviously take a speed hit but they

1102
00:46:28,119 --> 00:46:31,568
get around this problem by saying well

1103
00:46:29,349 --> 00:46:33,250
we'll still keep the idea of having that

1104
00:46:31,568 --> 00:46:36,219
sort of inheritance kind of crazy thing

1105
00:46:33,250 --> 00:46:37,900
but now we'll just let you decide who

1106
00:46:36,219 --> 00:46:40,209
derive from it run time or do other

1107
00:46:37,900 --> 00:46:42,490
things like that that get around that

1108
00:46:40,210 --> 00:46:49,210
problem of having to decide everything

1109
00:46:42,489 --> 00:46:51,129
at the outset right okay so my idea for

1110
00:46:49,210 --> 00:46:52,630
this ridiculous enemy system that's the

1111
00:46:51,130 --> 00:46:56,260
one that I the third of the architecture

1112
00:46:52,630 --> 00:47:00,640
I want to try first is to do exactly

1113
00:46:56,260 --> 00:47:05,140
this so what I want to do is I want to

1114
00:47:00,639 --> 00:47:08,528
make a struct entity and this struct is

1115
00:47:05,139 --> 00:47:15,219
going to be epically huge okay it is

1116
00:47:08,528 --> 00:47:18,818
going to have everything in it like so

1117
00:47:15,219 --> 00:47:21,969
64 K think yeah it is a 64 K entity

1118
00:47:18,818 --> 00:47:28,619
struct maybe more okay it is really

1119
00:47:21,969 --> 00:47:31,318
really really really large epically huge

1120
00:47:28,619 --> 00:47:35,588
that's actually gonna be what it is and

1121
00:47:31,318 --> 00:47:39,788
what we're gonna do is we're just gonna

1122
00:47:35,588 --> 00:47:41,949
say alright look we know that we can't

1123
00:47:39,789 --> 00:47:44,160
possibly have every entity in the game

1124
00:47:41,949 --> 00:47:46,538
taking up 64 K all the time and

1125
00:47:44,159 --> 00:47:48,578
furthermore we don't really want to

1126
00:47:46,539 --> 00:47:52,778
process 64 K worth of any data all the

1127
00:47:48,579 --> 00:47:54,970
time but we already know that the

1128
00:47:52,778 --> 00:47:56,889
structure of our game involves sim

1129
00:47:54,969 --> 00:47:58,838
regions we simulate a region where we

1130
00:47:56,889 --> 00:48:00,429
load everything up and then we simulate

1131
00:47:58,838 --> 00:48:02,858
it and we put it all back right that's

1132
00:48:00,429 --> 00:48:05,469
already how it works so that we can pull

1133
00:48:02,858 --> 00:48:07,900
things into a common unified euclidean

1134
00:48:05,469 --> 00:48:12,278
space do some stuff and then put it back

1135
00:48:07,900 --> 00:48:14,139
right so my idea is well let's make a

1136
00:48:12,278 --> 00:48:15,820
thing that has everything in it that's

1137
00:48:14,139 --> 00:48:17,589
the over entity it's a

1138
00:48:15,820 --> 00:48:19,150
has all the possible properties it has

1139
00:48:17,590 --> 00:48:21,910
everything it's the most ridiculous

1140
00:48:19,150 --> 00:48:23,650
think you know binding of issac after 17

1141
00:48:21,909 --> 00:48:26,049
hours and it's got all this crazy stuff

1142
00:48:23,650 --> 00:48:27,160
on it can do everything it's it's

1143
00:48:26,050 --> 00:48:32,380
everything that everything could

1144
00:48:27,159 --> 00:48:35,199
possibly be that is what this is and

1145
00:48:32,380 --> 00:48:41,170
what we do is when we go to start

1146
00:48:35,199 --> 00:48:42,909
simulating we do a decompress to get

1147
00:48:41,170 --> 00:48:46,570
this entity structure and then we do a

1148
00:48:42,909 --> 00:48:49,329
compress when we're done so what happens

1149
00:48:46,570 --> 00:48:51,490
is we decompress out of a storage

1150
00:48:49,329 --> 00:48:54,460
basically our - like cold storage if you

1151
00:48:51,489 --> 00:48:56,229
will into our MV structure we then

1152
00:48:54,460 --> 00:48:58,179
compress the energy structure back out

1153
00:48:56,230 --> 00:49:00,789
when we go to store it and what this

1154
00:48:58,179 --> 00:49:02,589
will be is we've got this sort of you

1155
00:49:00,789 --> 00:49:05,469
know we've got this these world chunks

1156
00:49:02,590 --> 00:49:07,030
and what this will be is essentially a

1157
00:49:05,469 --> 00:49:08,079
streaming system well swim a bunch of

1158
00:49:07,030 --> 00:49:10,210
entities and then we'll go which

1159
00:49:08,079 --> 00:49:11,799
entities fall into this you know we're

1160
00:49:10,210 --> 00:49:14,110
writing them out to a world chunk we

1161
00:49:11,800 --> 00:49:16,660
open up the world chunk we write out all

1162
00:49:14,110 --> 00:49:18,670
the entities by compressing them in okay

1163
00:49:16,659 --> 00:49:20,619
and then that world chunk is closed and

1164
00:49:18,670 --> 00:49:22,000
it's stored right when we then want to

1165
00:49:20,619 --> 00:49:23,940
simulate that world chunk we open it

1166
00:49:22,000 --> 00:49:27,039
back up again and we decompress them out

1167
00:49:23,940 --> 00:49:28,809
okay now what do I mean by compress and

1168
00:49:27,039 --> 00:49:30,460
decompress well I don't mean try to run

1169
00:49:28,809 --> 00:49:32,230
like LZ on them or anything although

1170
00:49:30,460 --> 00:49:34,059
maybe that's a smarter way to do it

1171
00:49:32,230 --> 00:49:35,440
than what I'm thinking I don't even

1172
00:49:34,059 --> 00:49:37,599
really know it could be that that's

1173
00:49:35,440 --> 00:49:39,039
actually quite a good idea for all I

1174
00:49:37,599 --> 00:49:41,139
know like some kind of simple compressor

1175
00:49:39,039 --> 00:49:44,590
and we'll see when we start testing

1176
00:49:41,139 --> 00:49:46,389
things what I mean is more like and the

1177
00:49:44,590 --> 00:49:47,559
reason I called it sparse mate as far as

1178
00:49:46,389 --> 00:49:50,889
entity is because I'm thinking more like

1179
00:49:47,559 --> 00:49:53,230
a sparse matrix solver so basically this

1180
00:49:50,889 --> 00:49:55,000
entity has a bunch you know maybe it's

1181
00:49:53,230 --> 00:49:56,639
got you know a thousand things in it

1182
00:49:55,000 --> 00:49:59,199
right a thousand properties or something

1183
00:49:56,639 --> 00:50:01,809
well what I want to do is basically just

1184
00:49:59,199 --> 00:50:05,889
mark off which one of them's which ones

1185
00:50:01,809 --> 00:50:07,690
of them we decompressed and then when we

1186
00:50:05,889 --> 00:50:10,599
simulate the end of the we mark any ones

1187
00:50:07,690 --> 00:50:12,820
that we've added and we D mark ones that

1188
00:50:10,599 --> 00:50:15,130
we remove and then when we compress we

1189
00:50:12,820 --> 00:50:18,430
only look through we only grab those

1190
00:50:15,130 --> 00:50:22,360
ones that are actually there make sense

1191
00:50:18,429 --> 00:50:25,899
now you may be asking why do this right

1192
00:50:22,360 --> 00:50:28,840
why try this it sounds like it's

1193
00:50:25,900 --> 00:50:29,889
strictly worse than just keeping a list

1194
00:50:28,840 --> 00:50:31,780
of property

1195
00:50:29,889 --> 00:50:36,099
sort of like this sort of a system up

1196
00:50:31,780 --> 00:50:37,960
here that I talked about right here why

1197
00:50:36,099 --> 00:50:41,159
not just put those things into a list

1198
00:50:37,960 --> 00:50:44,769
and forgo this whole sort of operation

1199
00:50:41,159 --> 00:50:48,129
well the reason is because now all of

1200
00:50:44,769 --> 00:50:50,769
the simulation code right the simulation

1201
00:50:48,130 --> 00:50:52,570
code that's going to access this all of

1202
00:50:50,769 --> 00:50:56,139
this simulation code just gets written

1203
00:50:52,570 --> 00:50:58,360
in straight C style where it knows the

1204
00:50:56,139 --> 00:51:00,699
offsets of everything it can be written

1205
00:50:58,360 --> 00:51:03,700
at full speed it doesn't have to do any

1206
00:51:00,699 --> 00:51:06,369
lookups it's based and it has free rein

1207
00:51:03,699 --> 00:51:08,529
to do whatever it wants any single piece

1208
00:51:06,369 --> 00:51:09,069
of simulation code can pull it doesn't

1209
00:51:08,530 --> 00:51:10,660
have to go oh

1210
00:51:09,070 --> 00:51:11,950
does it have a health property doesn't

1211
00:51:10,659 --> 00:51:13,329
have a burnable property okay well if it

1212
00:51:11,949 --> 00:51:14,980
adds both of those properties it doesn't

1213
00:51:13,329 --> 00:51:17,590
do any of that stuff it can just ask

1214
00:51:14,980 --> 00:51:18,940
directly by literally looking up into

1215
00:51:17,590 --> 00:51:25,510
the thing and just grabbing out what it

1216
00:51:18,940 --> 00:51:27,190
is right that's the idea and again this

1217
00:51:25,510 --> 00:51:28,810
mirror is basically what a sparse matrix

1218
00:51:27,190 --> 00:51:31,990
solver does as far as matrix solver says

1219
00:51:28,809 --> 00:51:36,579
well I've got this big array potentially

1220
00:51:31,989 --> 00:51:38,529
in in memory of what this matrix is and

1221
00:51:36,579 --> 00:51:41,380
I may actually store the whole matrix

1222
00:51:38,530 --> 00:51:45,660
right like I may say that I actually

1223
00:51:41,380 --> 00:51:48,910
have like memory reserve for let's say

1224
00:51:45,659 --> 00:51:52,000
64,000 entries this way and 64,000

1225
00:51:48,909 --> 00:51:54,969
entries this way right but I actually

1226
00:51:52,000 --> 00:51:56,860
only go poke in certain values and I

1227
00:51:54,969 --> 00:52:00,129
remember where those values actually

1228
00:51:56,860 --> 00:52:01,960
were and then later when I want to store

1229
00:52:00,130 --> 00:52:03,760
this matrix out again I just grab out

1230
00:52:01,960 --> 00:52:07,440
just the ones that I know that I put in

1231
00:52:03,760 --> 00:52:09,910
there right but because I've done that

1232
00:52:07,440 --> 00:52:13,389
anybody who wants to do something like

1233
00:52:09,909 --> 00:52:16,539
oh what's my symmetric element can still

1234
00:52:13,389 --> 00:52:19,119
just do a direct look up on the - you

1235
00:52:16,539 --> 00:52:20,980
know the M and n you know the tooth on J

1236
00:52:19,119 --> 00:52:22,719
indices of this matrix can still do

1237
00:52:20,980 --> 00:52:24,610
direct lookups and get exactly the value

1238
00:52:22,719 --> 00:52:26,139
right back out again right so everything

1239
00:52:24,610 --> 00:52:29,410
still full speed when you're looking at

1240
00:52:26,139 --> 00:52:31,119
the matrix itself but when you unpack

1241
00:52:29,409 --> 00:52:35,440
and pack it you're only looking at those

1242
00:52:31,119 --> 00:52:38,109
specific cherry-pick values right so

1243
00:52:35,440 --> 00:52:39,550
that's the idea and so that's what I

1244
00:52:38,110 --> 00:52:41,769
would like to play with I would like to

1245
00:52:39,550 --> 00:52:43,539
make a little thing we'll go take our

1246
00:52:41,769 --> 00:52:45,400
world chunks will actually make them

1247
00:52:43,539 --> 00:52:46,779
some storage will have a decompress step

1248
00:52:45,400 --> 00:52:48,579
and an entity structure and then will

1249
00:52:46,780 --> 00:52:49,960
have a compressed step and will have it

1250
00:52:48,579 --> 00:52:53,199
so that there's just a giant entity

1251
00:52:49,960 --> 00:52:56,409
thing that has every last thing we want

1252
00:52:53,199 --> 00:52:58,539
our enemies to have and that way there

1253
00:52:56,409 --> 00:53:01,089
are no limitations on what an entity can

1254
00:52:58,539 --> 00:53:03,550
be if you have a tree and you want to

1255
00:53:01,090 --> 00:53:05,350
start walking around no problem if

1256
00:53:03,550 --> 00:53:06,910
somebody casts the walking thing on it

1257
00:53:05,349 --> 00:53:08,230
it just becomes a walking tree because

1258
00:53:06,909 --> 00:53:10,480
anything that you could have done like

1259
00:53:08,230 --> 00:53:12,519
walking or hopping or shooting or

1260
00:53:10,480 --> 00:53:14,679
punching or jumping or anything else

1261
00:53:12,519 --> 00:53:16,809
they're all just properties of the same

1262
00:53:14,679 --> 00:53:18,579
entity and you know that they all you

1263
00:53:16,809 --> 00:53:22,259
know operate on the same strike so it's

1264
00:53:18,579 --> 00:53:24,819
always free to just go ahead and turn on

1265
00:53:22,260 --> 00:53:28,510
whatever the thing is that you want on

1266
00:53:24,820 --> 00:53:29,559
any entity ever anywhere right which

1267
00:53:28,510 --> 00:53:32,980
basically gives us the complete

1268
00:53:29,559 --> 00:53:35,259
flexibility to have the game design do

1269
00:53:32,980 --> 00:53:37,869
whatever it wants right and I think that

1270
00:53:35,260 --> 00:53:40,660
is really the goal of this particular

1271
00:53:37,869 --> 00:53:42,759
part of the of the game so that's what

1272
00:53:40,659 --> 00:53:44,079
I'm gonna try and I can't say ahead of

1273
00:53:42,760 --> 00:53:46,240
time whether it will work because I've

1274
00:53:44,079 --> 00:53:47,679
never tried it before I can't think of

1275
00:53:46,239 --> 00:53:48,039
any immediate reason why it might not

1276
00:53:47,679 --> 00:53:49,809
work

1277
00:53:48,039 --> 00:53:50,800
I mean why it wouldn't work but I can't

1278
00:53:49,809 --> 00:53:53,289
think of reasons why it might not work

1279
00:53:50,800 --> 00:53:55,360
for example the traffic for this

1280
00:53:53,289 --> 00:53:58,420
decompressed compress might be too great

1281
00:53:55,360 --> 00:54:00,309
right the memory footprint for storing

1282
00:53:58,420 --> 00:54:03,190
you know however many 500 of these might

1283
00:54:00,309 --> 00:54:05,139
be too big right maybe that's too much

1284
00:54:03,190 --> 00:54:06,639
I don't know that cache concerns are

1285
00:54:05,139 --> 00:54:08,019
really such a big deal they might be I'm

1286
00:54:06,639 --> 00:54:09,940
not sure but since we're only touching

1287
00:54:08,019 --> 00:54:11,889
it sparsely it's not like we're ever

1288
00:54:09,940 --> 00:54:13,269
actually touching the 64k unless we

1289
00:54:11,889 --> 00:54:15,849
actually need to use all of it there is

1290
00:54:13,269 --> 00:54:17,829
a some false sharing problems because

1291
00:54:15,849 --> 00:54:21,159
you know things are not packed tightly

1292
00:54:17,829 --> 00:54:23,469
so we do lose some cache throughput but

1293
00:54:21,159 --> 00:54:24,969
not as much as not nearly much as you

1294
00:54:23,469 --> 00:54:26,319
might think because again we're not

1295
00:54:24,969 --> 00:54:28,779
touching the whole city for K or

1296
00:54:26,320 --> 00:54:29,980
anything so it's hard to say so there

1297
00:54:28,780 --> 00:54:31,930
definitely are reasons why I think it

1298
00:54:29,980 --> 00:54:33,820
might not work but nothing that's an

1299
00:54:31,929 --> 00:54:37,289
obvious red flag where I'm like it's I

1300
00:54:33,820 --> 00:54:40,600
wouldn't try it and so we will try it

1301
00:54:37,289 --> 00:54:41,949
that's about it for today I'm glad I got

1302
00:54:40,599 --> 00:54:43,150
that all explained I wasn't necessary

1303
00:54:41,949 --> 00:54:45,099
planning on explaining that today but

1304
00:54:43,150 --> 00:54:47,289
now I did means we can start on tomorrow

1305
00:54:45,099 --> 00:54:50,460
which is nice I will see if I can go

1306
00:54:47,289 --> 00:54:50,460
ahead and start the Q&amp;A here

1307
00:55:36,300 --> 00:55:43,750
xD a FAL can you talk about the dynamic

1308
00:55:39,849 --> 00:55:54,940
dispatch yes I can certainly talk about

1309
00:55:43,750 --> 00:55:56,679
the dynamic dispatch so so what are we

1310
00:55:54,940 --> 00:55:58,750
what are we trying to trying to find the

1311
00:55:56,679 --> 00:56:00,309
place Rev run's okay so what are we

1312
00:55:58,750 --> 00:56:02,019
trying to do with dispatch okay so

1313
00:56:00,309 --> 00:56:04,779
hopefully data data is the part I

1314
00:56:02,019 --> 00:56:05,858
actually cared about and this the part

1315
00:56:04,780 --> 00:56:07,210
that's relevant to the suggestion so I

1316
00:56:05,858 --> 00:56:10,239
skipped dispatch but I'll talk about

1317
00:56:07,210 --> 00:56:17,260
dispatch briefly see what dispatch is is

1318
00:56:10,239 --> 00:56:19,779
saying okay I want a way to associate a

1319
00:56:17,260 --> 00:56:21,810
function with a memory location that is

1320
00:56:19,780 --> 00:56:24,160
essentially what dispatch is right

1321
00:56:21,809 --> 00:56:27,369
because normally what happens is the

1322
00:56:24,159 --> 00:56:29,829
other way around I call a function and I

1323
00:56:27,369 --> 00:56:31,960
pass it some data this is a case where I

1324
00:56:29,829 --> 00:56:34,299
have some data and I want it to tell me

1325
00:56:31,960 --> 00:56:36,070
the function right that's that's sort of

1326
00:56:34,300 --> 00:56:38,830
what we're talking about here

1327
00:56:36,070 --> 00:56:40,630
so the typical case right is you know

1328
00:56:38,829 --> 00:56:43,989
going back to our foods and bars if I

1329
00:56:40,630 --> 00:56:48,130
have a struct foo and I have a struct

1330
00:56:43,989 --> 00:56:50,229
bar then it's very simple for me

1331
00:56:48,130 --> 00:56:55,690
obviously to write some code and that

1332
00:56:50,230 --> 00:57:00,340
code looks like you know do foo and it

1333
00:56:55,690 --> 00:57:04,019
takes a foo and does something and then

1334
00:57:00,340 --> 00:57:04,019
I have a function that's called a do bar

1335
00:57:05,159 --> 00:57:12,879
and that takes to something right

1336
00:57:09,309 --> 00:57:15,429
probably make that it be so we call

1337
00:57:12,880 --> 00:57:17,050
these in code and anywhere at the point

1338
00:57:15,429 --> 00:57:18,730
where we're gonna call it it's a fixed

1339
00:57:17,050 --> 00:57:20,920
thing right it's like at the point where

1340
00:57:18,730 --> 00:57:22,269
we might call one of these we know which

1341
00:57:20,920 --> 00:57:24,010
one we're calling we're calling do foo

1342
00:57:22,269 --> 00:57:29,349
or do bar and we're passing it a foo or

1343
00:57:24,010 --> 00:57:32,020
a bar right but at some point we may

1344
00:57:29,349 --> 00:57:34,329
want to say okay instead of me telling

1345
00:57:32,019 --> 00:57:35,769
you at this location in the call write

1346
00:57:34,329 --> 00:57:40,289
it so I'm at some point in the program I

1347
00:57:35,769 --> 00:57:43,150
call my do foo at that point in the code

1348
00:57:40,289 --> 00:57:45,099
maybe I don't want to know which

1349
00:57:43,150 --> 00:57:47,230
function I'm actually calling I know I

1350
00:57:45,099 --> 00:57:49,869
want to call a claw family of functions

1351
00:57:47,230 --> 00:57:53,889
I know I want to call the do family

1352
00:57:49,869 --> 00:57:56,049
right I want to do something but what I

1353
00:57:53,889 --> 00:57:59,559
want to do is going to be based on the

1354
00:57:56,050 --> 00:58:01,510
the memory location I'm talking about so

1355
00:57:59,559 --> 00:58:03,460
if this memory location happens to exist

1356
00:58:01,510 --> 00:58:04,930
over here that I want to do one thing if

1357
00:58:03,460 --> 00:58:05,590
it's this other one over here I want to

1358
00:58:04,929 --> 00:58:08,440
do this other thing

1359
00:58:05,590 --> 00:58:11,289
etc and so forth right and so what I

1360
00:58:08,440 --> 00:58:13,119
will do right if I'm writing this myself

1361
00:58:11,289 --> 00:58:15,610
is I will just add a function pointer

1362
00:58:13,119 --> 00:58:17,589
okay and so what I might do and I can

1363
00:58:15,610 --> 00:58:20,140
even say that this I don't even need bar

1364
00:58:17,590 --> 00:58:21,550
for this part of this example if I can

1365
00:58:20,139 --> 00:58:23,259
just say okay in here there's some

1366
00:58:21,550 --> 00:58:25,630
function pointer and the function

1367
00:58:23,260 --> 00:58:27,910
pointer is whatever the do is for this

1368
00:58:25,630 --> 00:58:30,579
foo and so now I can just say oh all

1369
00:58:27,909 --> 00:58:33,339
right if I have a foo I can psych foo

1370
00:58:30,579 --> 00:58:37,299
arrow do and I can pass itself to it and

1371
00:58:33,340 --> 00:58:45,550
off I go right what this has now let me

1372
00:58:37,300 --> 00:58:47,830
do is this has let me associate a

1373
00:58:45,550 --> 00:58:49,810
function with a particular block of

1374
00:58:47,829 --> 00:58:53,590
memory so this this storage the actual

1375
00:58:49,809 --> 00:58:55,360
data now also has information about how

1376
00:58:53,590 --> 00:58:59,470
it might be processed under certain

1377
00:58:55,360 --> 00:59:01,690
circumstances right and you've seen us

1378
00:58:59,469 --> 00:59:03,399
do this in a couple different places in

1379
00:59:01,690 --> 00:59:06,179
hand-made here are actually well may or

1380
00:59:03,400 --> 00:59:10,900
not a couple but at least two maybe

1381
00:59:06,179 --> 00:59:12,369
that's a couple and so you know once in

1382
00:59:10,900 --> 00:59:14,110
a while you do want this it's not that

1383
00:59:12,369 --> 00:59:15,909
it's not as common in fear a new plan

1384
00:59:14,110 --> 00:59:19,050
that's all over the place right but it's

1385
00:59:15,909 --> 00:59:22,049
not that common really in real code

1386
00:59:19,050 --> 00:59:24,150
it's not super important but there are

1387
00:59:22,050 --> 00:59:27,300
times when it is necessary right or or

1388
00:59:24,150 --> 00:59:32,670
it is appropriate so that's what this is

1389
00:59:27,300 --> 00:59:34,620
let me do now obviously I may want to do

1390
00:59:32,670 --> 00:59:36,840
something where now I've got two

1391
00:59:34,619 --> 00:59:38,880
different types okay

1392
00:59:36,840 --> 00:59:40,829
they have different information in them

1393
00:59:38,880 --> 00:59:44,340
this one has an r32 right here's my

1394
00:59:40,829 --> 00:59:48,299
value this one has a be 32 and here's my

1395
00:59:44,340 --> 00:59:50,880
value and so I want to now not even know

1396
00:59:48,300 --> 00:59:54,480
which one of these two I'm talking about

1397
00:59:50,880 --> 00:59:56,340
right well now I can actually still use

1398
00:59:54,480 --> 00:59:57,659
this because even if the thing was a bar

1399
00:59:56,340 --> 00:59:59,579
and I thought it was a foo it doesn't

1400
00:59:57,659 --> 01:00:01,679
matter because it's the first element in

1401
00:59:59,579 --> 01:00:03,719
the structure I'll still call the do and

1402
01:00:01,679 --> 01:00:05,069
if the do happens to be a function here

1403
01:00:03,719 --> 01:00:06,029
that takes a bar where little call the

1404
01:00:05,070 --> 01:00:07,830
right function and don't think it's a

1405
01:00:06,030 --> 01:00:09,510
bar and do the right thing so I can

1406
01:00:07,829 --> 01:00:11,460
actually I don't really have to do very

1407
01:00:09,510 --> 01:00:14,120
much to make this work if I wanted to

1408
01:00:11,460 --> 01:00:18,000
but you know you get the idea

1409
01:00:14,119 --> 01:00:20,639
okay so basically at this point once I

1410
01:00:18,000 --> 01:00:23,699
settle on the standard of I'm gonna put

1411
01:00:20,639 --> 01:00:25,500
the function pointer at the top of the

1412
01:00:23,699 --> 01:00:27,059
thing then what I need to process it I

1413
01:00:25,500 --> 01:00:28,800
just call that function pointer now it's

1414
01:00:27,059 --> 01:00:31,049
free for me to create as many of these

1415
01:00:28,800 --> 01:00:33,300
as I want with all sorts of different

1416
01:00:31,050 --> 01:00:35,910
data in them and anybody who needs to

1417
01:00:33,300 --> 01:00:37,590
invoke do on them can do so trivially

1418
01:00:35,909 --> 01:00:39,539
because all they do is look at the first

1419
01:00:37,590 --> 01:00:41,220
thing in it and they invoke that on it

1420
01:00:39,539 --> 01:00:43,170
and off they go right and if they don't

1421
01:00:41,219 --> 01:00:44,969
have to ever care what type they were

1422
01:00:43,170 --> 01:00:45,210
actually handed they know how to call

1423
01:00:44,969 --> 01:00:51,059
that

1424
01:00:45,210 --> 01:00:54,809
that thing right okay so that's dynamic

1425
01:00:51,059 --> 01:00:56,789
dispatch in the basic sense now C++ for

1426
01:00:54,809 --> 01:00:58,980
reasons that nobody understands right

1427
01:00:56,789 --> 01:01:01,679
and I have no idea why I wish I could go

1428
01:00:58,980 --> 01:01:04,170
back in time and or maybe ask somebody

1429
01:01:01,679 --> 01:01:05,489
be like what were you thinking they

1430
01:01:04,170 --> 01:01:06,869
picked the worst possible way to

1431
01:01:05,489 --> 01:01:08,429
implement this that I think anyone

1432
01:01:06,869 --> 01:01:10,079
probably ever has I mean maybe you could

1433
01:01:08,429 --> 01:01:11,639
find a language that implemented it

1434
01:01:10,079 --> 01:01:15,000
worse than this I don't know but what

1435
01:01:11,639 --> 01:01:16,549
they decided as well okay this is a sort

1436
01:01:15,000 --> 01:01:19,170
of thing that programmers will do

1437
01:01:16,550 --> 01:01:20,519
programmers often will create function

1438
01:01:19,170 --> 01:01:23,550
pointers and they'll put function

1439
01:01:20,519 --> 01:01:25,230
pointers into two structures so that

1440
01:01:23,550 --> 01:01:26,730
when they are going to use that

1441
01:01:25,230 --> 01:01:29,460
structure they can call the function

1442
01:01:26,730 --> 01:01:31,530
pointer now remember there are many many

1443
01:01:29,460 --> 01:01:32,909
different things we could have done here

1444
01:01:31,530 --> 01:01:34,470
right

1445
01:01:32,909 --> 01:01:36,539
and I'd like to tell you what they all

1446
01:01:34,469 --> 01:01:38,909
are first of all just just so you can be

1447
01:01:36,539 --> 01:01:40,889
aware of exactly how bad C++ this

1448
01:01:38,909 --> 01:01:42,089
implementation of it is and this again

1449
01:01:40,889 --> 01:01:43,769
has nothing to do with object-oriented

1450
01:01:42,090 --> 01:01:48,829
programming this is literally a problem

1451
01:01:43,769 --> 01:01:51,300
with C++ specifically and that is

1452
01:01:48,829 --> 01:01:56,670
several things I could have one

1453
01:01:51,300 --> 01:02:05,970
structure right or I can have two

1454
01:01:56,670 --> 01:02:13,139
structures they can have one pointer or

1455
01:02:05,969 --> 01:02:16,769
they could have two right and maybe this

1456
01:02:13,139 --> 01:02:18,989
guy has them as well okay so we can have

1457
01:02:16,769 --> 01:02:20,909
multiple structures we can have multiple

1458
01:02:18,989 --> 01:02:22,679
functions in the structures that we

1459
01:02:20,909 --> 01:02:24,539
might call write multiple met you you

1460
01:02:22,679 --> 01:02:25,949
know these are like methods in C++ or

1461
01:02:24,539 --> 01:02:27,690
whatever or member functions I should

1462
01:02:25,949 --> 01:02:29,359
say right could have multiple of those

1463
01:02:27,690 --> 01:02:33,360
there's many things that we might do

1464
01:02:29,360 --> 01:02:35,160
what C++ decided was the only one you

1465
01:02:33,360 --> 01:02:37,500
were ever going to get to do because for

1466
01:02:35,159 --> 01:02:39,329
some reason they just couldn't conceive

1467
01:02:37,500 --> 01:02:41,250
that there were others or they didn't

1468
01:02:39,329 --> 01:02:43,409
know or they had never programmed a

1469
01:02:41,250 --> 01:02:44,969
computer before I don't know they

1470
01:02:43,409 --> 01:02:48,059
decided that you only got one of these

1471
01:02:44,969 --> 01:02:52,579
and what it was was you could have a

1472
01:02:48,059 --> 01:02:55,380
bunch of functions in a static table

1473
01:02:52,579 --> 01:02:57,480
right it's a table somewhere off in the

1474
01:02:55,380 --> 01:02:59,849
distance and the only thing you get is

1475
01:02:57,480 --> 01:03:07,769
at the top of a thing you get a pointer

1476
01:02:59,849 --> 01:03:09,809
to one of these tables that's it now in

1477
01:03:07,769 --> 01:03:12,239
doing that they gave up a tremendous

1478
01:03:09,809 --> 01:03:13,500
amount of functionality oh and by the

1479
01:03:12,239 --> 01:03:15,000
way you don't ever get to see this

1480
01:03:13,500 --> 01:03:18,929
pointer can't change it it's not there

1481
01:03:15,000 --> 01:03:20,159
as far as you know now in choosing to

1482
01:03:18,929 --> 01:03:23,099
implement it that way they basically

1483
01:03:20,159 --> 01:03:24,989
lost almost all of the power of dynamic

1484
01:03:23,099 --> 01:03:26,969
dispatch the actual dynamic dispatch

1485
01:03:24,989 --> 01:03:28,589
support you get in C++ is the weakest

1486
01:03:26,969 --> 01:03:31,109
possible dynamic dispatch you could ever

1487
01:03:28,590 --> 01:03:34,769
imagine right you cannot change anything

1488
01:03:31,110 --> 01:03:37,140
about it at runtime at all right so for

1489
01:03:34,769 --> 01:03:39,090
example if I wanted to when I have this

1490
01:03:37,139 --> 01:03:40,739
old way what if I implement it by hand

1491
01:03:39,090 --> 01:03:42,840
I can set due to whatever I want

1492
01:03:40,739 --> 01:03:46,259
whenever I want I want to change this

1493
01:03:42,840 --> 01:03:50,010
particular one I could change it right

1494
01:03:46,260 --> 01:03:52,500
make sense so any given object can

1495
01:03:50,010 --> 01:03:54,390
change what it's due function was at any

1496
01:03:52,500 --> 01:03:57,420
time dynamically that is a great feature

1497
01:03:54,389 --> 01:04:00,150
gone completely gone in C++ forget it

1498
01:03:57,420 --> 01:04:02,760
can't add that right I can furthermore

1499
01:04:00,150 --> 01:04:04,680
change things independently right so I

1500
01:04:02,760 --> 01:04:06,630
could say oh I want to change its other

1501
01:04:04,679 --> 01:04:07,769
pointer but not its due pointer so I'm

1502
01:04:06,630 --> 01:04:09,150
going to change only one of his member

1503
01:04:07,769 --> 01:04:11,369
functions rather than both of them for

1504
01:04:09,150 --> 01:04:12,630
example that's double gone because

1505
01:04:11,369 --> 01:04:14,869
everything's in a table in the C++

1506
01:04:12,630 --> 01:04:18,119
version so I can't do that either right

1507
01:04:14,869 --> 01:04:19,769
you can't touch the table pointer and

1508
01:04:18,119 --> 01:04:21,150
furthermore if I did want to implement

1509
01:04:19,769 --> 01:04:23,009
it this way so let's say I did a flip

1510
01:04:21,150 --> 01:04:26,309
teal pointer but at least I put the

1511
01:04:23,010 --> 01:04:27,990
table pointer in there then I could at

1512
01:04:26,309 --> 01:04:30,119
least switch the type of the object

1513
01:04:27,989 --> 01:04:30,899
between tables at runtime I can even do

1514
01:04:30,119 --> 01:04:32,639
that right

1515
01:04:30,900 --> 01:04:34,470
technically I can by going around the

1516
01:04:32,639 --> 01:04:37,679
C++ spec and not worrying about breaking

1517
01:04:34,469 --> 01:04:41,209
stuff because I could just go in and

1518
01:04:37,679 --> 01:04:43,679
rewrite the table pointer manually but

1519
01:04:41,210 --> 01:04:46,230
technically to the original spec of C++

1520
01:04:43,679 --> 01:04:48,119
when they designed it back in the day in

1521
01:04:46,230 --> 01:04:50,490
the 80s or whenever you can't do any of

1522
01:04:48,119 --> 01:04:52,319
those things so you lose all of the

1523
01:04:50,489 --> 01:04:54,719
power of dynamic dispatch completely

1524
01:04:52,320 --> 01:04:57,960
goes away in C++ you get the weakest

1525
01:04:54,719 --> 01:04:59,489
possible kind right and again what did

1526
01:04:57,960 --> 01:05:01,230
it see it seems like what they cared

1527
01:04:59,489 --> 01:05:02,549
about which is not probably what they

1528
01:05:01,230 --> 01:05:04,260
were cognitively thinking but it ended

1529
01:05:02,550 --> 01:05:06,210
up being that compression is really the

1530
01:05:04,260 --> 01:05:08,220
only thing they got this is the most

1531
01:05:06,210 --> 01:05:10,500
compressed way this could possibly work

1532
01:05:08,219 --> 01:05:12,449
really is having the table pointer point

1533
01:05:10,500 --> 01:05:14,639
to a static table because then any two

1534
01:05:12,449 --> 01:05:16,559
instances of an object don't need to

1535
01:05:14,639 --> 01:05:18,119
have a whole table of function pointers

1536
01:05:16,559 --> 01:05:20,369
they each just point to that table

1537
01:05:18,119 --> 01:05:22,440
however all the things you give up for

1538
01:05:20,369 --> 01:05:23,789
that are myriad right it's slower

1539
01:05:22,440 --> 01:05:24,990
because you got a double dereference

1540
01:05:23,789 --> 01:05:26,909
everything whatever you're gonna jump

1541
01:05:24,989 --> 01:05:29,879
it's less flexible because you can't set

1542
01:05:26,909 --> 01:05:31,440
it per object if you want to right and

1543
01:05:29,880 --> 01:05:32,910
furthermore they made the weird decision

1544
01:05:31,440 --> 01:05:34,590
of not letting you ever touch that table

1545
01:05:32,909 --> 01:05:36,389
pointer which is absolutely ridiculous

1546
01:05:34,590 --> 01:05:37,769
right now if you don't want to expose

1547
01:05:36,389 --> 01:05:39,000
the table pointer directly okay that's

1548
01:05:37,769 --> 01:05:41,489
one thing but at least give us some

1549
01:05:39,000 --> 01:05:43,199
built-in functions that can switch like

1550
01:05:41,489 --> 01:05:44,129
what's in the table or what the tail is

1551
01:05:43,199 --> 01:05:46,169
pointing to like that would be pretty

1552
01:05:44,130 --> 01:05:48,470
obviously right that you would do and

1553
01:05:46,170 --> 01:05:51,000
they didn't even do that right

1554
01:05:48,469 --> 01:05:54,149
so the C++ dynamic dispatch is a

1555
01:05:51,000 --> 01:05:55,530
complete complete complete waste really

1556
01:05:54,150 --> 01:05:57,210
really bad I don't know why anyone ever

1557
01:05:55,530 --> 01:05:59,490
uses it but it's for some reason they

1558
01:05:57,210 --> 01:06:01,500
still do so

1559
01:05:59,489 --> 01:06:02,849
if you actually want dynamic dispatch I

1560
01:06:01,500 --> 01:06:04,110
highly recommend doing it this way

1561
01:06:02,849 --> 01:06:05,460
meaning I would just make it yourself

1562
01:06:04,110 --> 01:06:06,630
because it's so much more powerful you

1563
01:06:05,460 --> 01:06:08,550
can do so many more things with it that

1564
01:06:06,630 --> 01:06:10,200
I don't know what that this simple

1565
01:06:08,550 --> 01:06:11,460
syntactic sugar of not having to

1566
01:06:10,199 --> 01:06:13,559
actually put the function pointer in

1567
01:06:11,460 --> 01:06:16,139
there doesn't seem to me to be enough of

1568
01:06:13,559 --> 01:06:18,210
a reason to give it up but you know I

1569
01:06:16,139 --> 01:06:22,829
don't know different people I guess have

1570
01:06:18,210 --> 01:06:25,289
different preferences but so the dynamic

1571
01:06:22,829 --> 01:06:26,730
dispatch that they are talking about is

1572
01:06:25,289 --> 01:06:28,139
literally just the kind that can be

1573
01:06:26,730 --> 01:06:30,510
derived from one of these hierarchies

1574
01:06:28,139 --> 01:06:32,639
and that is the like sort of baked at

1575
01:06:30,510 --> 01:06:35,040
that compile time but that is not really

1576
01:06:32,639 --> 01:06:36,809
very useful dynamic dispatch in my mind

1577
01:06:35,039 --> 01:06:40,019
dynamic dispatch is much better handled

1578
01:06:36,809 --> 01:06:42,480
by saying what is my program actually

1579
01:06:40,019 --> 01:06:45,269
need from this dispatch what matches

1580
01:06:42,480 --> 01:06:47,340
that most directly for example maybe I

1581
01:06:45,269 --> 01:06:48,509
have only one type of strap maybe I

1582
01:06:47,340 --> 01:06:50,010
don't even have multiple types of trucks

1583
01:06:48,510 --> 01:06:52,140
but I do have multiple types of

1584
01:06:50,010 --> 01:06:53,730
operations well then I want dynamic

1585
01:06:52,139 --> 01:06:54,960
dispatch just like a function pointer in

1586
01:06:53,730 --> 01:06:56,820
there right or a couple function pairs

1587
01:06:54,960 --> 01:06:58,679
in there maybe I do have lots of

1588
01:06:56,820 --> 01:07:01,500
different types and maybe they all have

1589
01:06:58,679 --> 01:07:03,089
the same kind of dispatches between them

1590
01:07:01,500 --> 01:07:04,530
so I'm going to use that like a table

1591
01:07:03,090 --> 01:07:05,880
based method but I'd like to be able to

1592
01:07:04,530 --> 01:07:07,320
switch them at runtime because sometimes

1593
01:07:05,880 --> 01:07:08,700
I want this object to have these sorts

1594
01:07:07,320 --> 01:07:09,809
of just practices sometimes I want to

1595
01:07:08,699 --> 01:07:11,039
have these other types of just answers

1596
01:07:09,809 --> 01:07:13,739
right then I'm going to use that table

1597
01:07:11,039 --> 01:07:15,630
pointer scheme right Ambala and only if

1598
01:07:13,739 --> 01:07:19,349
you're actually talking about a

1599
01:07:15,630 --> 01:07:21,539
completely immutable table based you

1600
01:07:19,349 --> 01:07:24,239
know system that operates on a hierarchy

1601
01:07:21,539 --> 01:07:25,349
would you ever use C++ is dispatch which

1602
01:07:24,239 --> 01:07:27,329
is never

1603
01:07:25,349 --> 01:07:32,880
I don't know when you use that you don't

1604
01:07:27,329 --> 01:07:35,579
as far as I know so yeah in our system

1605
01:07:32,880 --> 01:07:39,090
we are not going to use dynamic dispatch

1606
01:07:35,579 --> 01:07:40,380
probably at all and here's why the

1607
01:07:39,090 --> 01:07:42,090
reason that I don't probably want to use

1608
01:07:40,380 --> 01:07:44,820
much dynamic dispatch is because

1609
01:07:42,090 --> 01:07:49,440
entities in our system again I'm going

1610
01:07:44,820 --> 01:07:52,350
for that really rich bizarreness kind of

1611
01:07:49,440 --> 01:07:55,679
an entity system I don't ever want to

1612
01:07:52,349 --> 01:07:58,889
define what an entity is I don't want to

1613
01:07:55,679 --> 01:08:02,069
say this entity is the hero this entity

1614
01:07:58,889 --> 01:08:04,409
is this type of villain what I want to

1615
01:08:02,070 --> 01:08:06,450
do is say this entity has this set of

1616
01:08:04,409 --> 01:08:10,170
parameters strewn throughout the 64k

1617
01:08:06,449 --> 01:08:11,579
thing and when I render it I draw from

1618
01:08:10,170 --> 01:08:13,269
those parameters to come up with this

1619
01:08:11,579 --> 01:08:15,579
visual representation

1620
01:08:13,269 --> 01:08:18,699
but at no time do I actually want to

1621
01:08:15,579 --> 01:08:20,859
know what it is because if at any time I

1622
01:08:18,699 --> 01:08:23,500
lock it down and say this is this

1623
01:08:20,859 --> 01:08:26,770
subclass of this thing with this pointer

1624
01:08:23,500 --> 01:08:29,470
to this function suddenly I've lost the

1625
01:08:26,770 --> 01:08:32,680
ability to have that fluid weird like

1626
01:08:29,470 --> 01:08:34,180
mutability and I'm just I'm going for

1627
01:08:32,680 --> 01:08:36,369
mutability first in this one I want

1628
01:08:34,180 --> 01:08:37,569
everything to be miscible I want every

1629
01:08:36,369 --> 01:08:39,548
ending the game to be able to turn into

1630
01:08:37,569 --> 01:08:41,200
any other type of entity I want every

1631
01:08:39,548 --> 01:08:42,579
property we ever glommed on every other

1632
01:08:41,199 --> 01:08:45,010
property I just want to be the complete

1633
01:08:42,579 --> 01:08:47,019
most flexible thing possible and I'm

1634
01:08:45,010 --> 01:08:49,359
willing to give up other things I'm

1635
01:08:47,020 --> 01:08:51,370
willing to for the code to be harder to

1636
01:08:49,359 --> 01:08:53,200
write I'm willing for it to be difficult

1637
01:08:51,369 --> 01:08:55,689
to debug I'm willing for it to be slow

1638
01:08:53,199 --> 01:08:57,189
if it has to be I will optimize those

1639
01:08:55,689 --> 01:08:59,588
things and work those things if I can

1640
01:08:57,189 --> 01:09:01,568
get that sort of holy grail of

1641
01:08:59,588 --> 01:09:05,528
everything is super weird and dynamic

1642
01:09:01,569 --> 01:09:08,319
and unchangeable right so I want to try

1643
01:09:05,529 --> 01:09:10,299
and do the system that way and so you

1644
01:09:08,319 --> 01:09:11,770
know maybe there are some cases where

1645
01:09:10,298 --> 01:09:13,539
function pointers make some sense there

1646
01:09:11,770 --> 01:09:16,060
but I think more likely what we'll be

1647
01:09:13,539 --> 01:09:17,289
using is a lot of enums and then to

1648
01:09:16,060 --> 01:09:19,150
figure out what we're gonna do we'll

1649
01:09:17,289 --> 01:09:22,869
look at a couple different enums and say

1650
01:09:19,149 --> 01:09:24,639
oh you know what type of walking does

1651
01:09:22,869 --> 01:09:26,619
this entity do oh it's this and like

1652
01:09:24,640 --> 01:09:27,670
what type of this is do okay grab those

1653
01:09:26,619 --> 01:09:28,989
together and then say oh they're not

1654
01:09:27,670 --> 01:09:30,279
probably you know I should draw some

1655
01:09:28,989 --> 01:09:31,899
legs on here or maybe I should do this

1656
01:09:30,279 --> 01:09:33,910
right and so I want to kind of make it

1657
01:09:31,899 --> 01:09:35,798
so that it can look at multiple things

1658
01:09:33,909 --> 01:09:37,420
where as a function pointer you don't

1659
01:09:35,798 --> 01:09:40,149
usually test function parsers I mean as

1660
01:09:37,420 --> 01:09:42,069
you could but it's more like I want to

1661
01:09:40,149 --> 01:09:44,048
take multiple piece of information and

1662
01:09:42,069 --> 01:09:45,548
use that to synthesize who we call and

1663
01:09:44,048 --> 01:09:48,778
so that's going to be more logic based

1664
01:09:45,548 --> 01:09:48,778
and probably less function point based

1665
01:09:51,779 --> 01:09:56,350
popcorn do you use the struct entry

1666
01:09:54,010 --> 01:09:59,369
method in your current game my current

1667
01:09:56,350 --> 01:09:59,370
game does not have any entities

1668
01:10:09,039 --> 01:10:13,659
kind of scroll down to the cue Collins

1669
01:10:22,090 --> 01:10:27,769
SSS McGrath have you seen my pseudo

1670
01:10:25,670 --> 01:10:30,469
hacked discriminated Union inheritance

1671
01:10:27,769 --> 01:10:33,079
system that I use in my game on stream

1672
01:10:30,469 --> 01:10:34,849
it's pretty cool no I haven't but I like

1673
01:10:33,078 --> 01:10:37,549
discriminated unions as you can tell

1674
01:10:34,849 --> 01:10:38,479
from the fact that like 99% of the

1675
01:10:37,550 --> 01:10:42,920
things in handmade here are

1676
01:10:38,479 --> 01:10:45,229
discriminated unions so I'm probably in

1677
01:10:42,920 --> 01:10:49,690
favor of whatever it is you're doing but

1678
01:10:45,229 --> 01:10:51,679
I don't know what it is at the moment

1679
01:10:49,689 --> 01:10:53,328
but I would probably like it I guess is

1680
01:10:51,679 --> 01:10:55,340
what I'm saying what made you choose

1681
01:10:53,328 --> 01:10:57,439
this approach over an AO s style Plus

1682
01:10:55,340 --> 01:11:00,529
story indices of each separate component

1683
01:10:57,439 --> 01:11:02,899
in the main entity struct okay so

1684
01:11:00,529 --> 01:11:04,368
basically the reason that I didn't want

1685
01:11:02,899 --> 01:11:07,458
to do that is because I want all of the

1686
01:11:04,368 --> 01:11:10,130
code to have hardwired offsets like I

1687
01:11:07,458 --> 01:11:12,078
want it to just be straight C code fully

1688
01:11:10,130 --> 01:11:13,670
optimizable by the compiler to just go

1689
01:11:12,078 --> 01:11:16,149
in and grab what it needs and do its

1690
01:11:13,670 --> 01:11:19,479
stuff on a flat piece of memory always

1691
01:11:16,149 --> 01:11:19,478
if that makes sense

1692
01:11:26,729 --> 01:11:33,189
Juden basement I missed it what about

1693
01:11:29,319 --> 01:11:34,479
the matrix IJ I was confused there so

1694
01:11:33,189 --> 01:11:35,889
what I was saying there is that it's

1695
01:11:34,479 --> 01:11:37,599
essentially like if you think of how

1696
01:11:35,890 --> 01:11:39,130
matrix operations work a lot of times

1697
01:11:37,600 --> 01:11:40,990
matrix operations need to look at

1698
01:11:39,130 --> 01:11:43,329
particular elements like what's one

1699
01:11:40,989 --> 01:11:45,099
above me or what's my reflected element

1700
01:11:43,329 --> 01:11:48,100
in this matrix right and if you have

1701
01:11:45,100 --> 01:11:50,590
sparse storage for your matrix that just

1702
01:11:48,100 --> 01:11:52,539
says where those things are then either

1703
01:11:50,590 --> 01:11:55,779
you have to constantly do lookups in

1704
01:11:52,539 --> 01:11:57,220
there or you have to scan one or the

1705
01:11:55,779 --> 01:11:58,869
other and they're both very slow so

1706
01:11:57,220 --> 01:12:00,579
instead sometimes what you would do in

1707
01:11:58,869 --> 01:12:02,470
the old days and this is less true

1708
01:12:00,579 --> 01:12:04,329
potentially now but what you do in the

1709
01:12:02,470 --> 01:12:06,280
old days is you would just say oh I'll

1710
01:12:04,329 --> 01:12:08,409
just make a big block of memory and I'll

1711
01:12:06,279 --> 01:12:10,000
put things in there and I'll basically

1712
01:12:08,409 --> 01:12:11,139
like initialize it all to zero once and

1713
01:12:10,000 --> 01:12:13,000
then all the operations I do I'll just

1714
01:12:11,140 --> 01:12:14,230
put things in there and then remember to

1715
01:12:13,000 --> 01:12:16,180
take them back out again when I'm done

1716
01:12:14,229 --> 01:12:19,359
so that I can always do direct lookups

1717
01:12:16,180 --> 01:12:21,670
right it's kind of like a perfect hash

1718
01:12:19,359 --> 01:12:26,710
table for the matrix entries in that

1719
01:12:21,670 --> 01:12:28,329
sense parsnip how and where would you go

1720
01:12:26,710 --> 01:12:29,920
about checking if a property existed on

1721
01:12:28,329 --> 01:12:31,239
your mega struct whenever you want to do

1722
01:12:29,920 --> 01:12:33,159
your operations with the allbeing

1723
01:12:31,239 --> 01:12:35,380
they'll present undefined so there's

1724
01:12:33,159 --> 01:12:37,720
none of them are pointers it's actually

1725
01:12:35,380 --> 01:12:39,430
the data for the property so the whole

1726
01:12:37,720 --> 01:12:41,230
all the data is actually in there and

1727
01:12:39,430 --> 01:12:44,740
they're all just initialized to there

1728
01:12:41,229 --> 01:12:46,479
this thing isn't happening State so if

1729
01:12:44,739 --> 01:12:50,739
it's like how on fire am i it's zero

1730
01:12:46,479 --> 01:12:52,509
right and so then when you go to to ask

1731
01:12:50,739 --> 01:12:54,189
how much fire is there you always get

1732
01:12:52,510 --> 01:12:55,869
back the answer whether it's on fire or

1733
01:12:54,189 --> 01:12:59,129
not it's got a value in there that says

1734
01:12:55,869 --> 01:12:59,130
that that makes sense

1735
01:13:14,739 --> 01:13:18,769
tea Terrace what are you going to use to

1736
01:13:17,329 --> 01:13:19,250
track which strecht members have been

1737
01:13:18,770 --> 01:13:24,470
touched

1738
01:13:19,250 --> 01:13:28,729
/ setback - no to be honest I'm not sure

1739
01:13:24,470 --> 01:13:31,220
yet I need to do some testing probably

1740
01:13:28,729 --> 01:13:32,089
during development depending on the

1741
01:13:31,220 --> 01:13:35,510
speed of it

1742
01:13:32,090 --> 01:13:38,090
I may not meaning I may just always

1743
01:13:35,510 --> 01:13:40,909
actually scan so you just actually walk

1744
01:13:38,090 --> 01:13:43,010
the full 64k which is going to be slow

1745
01:13:40,909 --> 01:13:46,309
right or I mean I don't know it's gonna

1746
01:13:43,010 --> 01:13:48,110
be slow because who computers are so

1747
01:13:46,310 --> 01:13:51,920
fast these days it's going to be slower

1748
01:13:48,109 --> 01:13:54,500
than it would be and then when we sort

1749
01:13:51,920 --> 01:13:57,920
of get further down and we're worried

1750
01:13:54,500 --> 01:14:00,829
about potentially optimizing things then

1751
01:13:57,920 --> 01:14:02,930
I will think about based on what we have

1752
01:14:00,829 --> 01:14:05,350
how I want to go about making it so that

1753
01:14:02,930 --> 01:14:05,350
we track

1754
01:14:12,550 --> 01:14:17,130
Jesse Meyer what portions of this design

1755
01:14:14,800 --> 01:14:20,529
could you foresee causing pur issues

1756
01:14:17,130 --> 01:14:23,289
well like I said the fall sharing is

1757
01:14:20,529 --> 01:14:29,639
probably the single biggest concern and

1758
01:14:23,289 --> 01:14:32,979
what I mean by that is you know if if

1759
01:14:29,640 --> 01:14:34,990
well let's tart with this so basically

1760
01:14:32,979 --> 01:14:38,739
you can think of a struct as being

1761
01:14:34,989 --> 01:14:43,119
broken up into 64 byte chunks okay so

1762
01:14:38,739 --> 01:14:44,349
here is my struct entity and then we

1763
01:14:43,119 --> 01:14:45,609
start listing the members in here and

1764
01:14:44,350 --> 01:14:48,010
I'm just gonna make stuff up but let's

1765
01:14:45,609 --> 01:14:53,139
say I've got you know a v3 position

1766
01:14:48,010 --> 01:14:57,909
right and I've got an r32 alpha I don't

1767
01:14:53,140 --> 01:15:00,579
know why right and an r32 you know

1768
01:14:57,909 --> 01:15:03,130
movement T or whatever and as you start

1769
01:15:00,579 --> 01:15:05,319
to add these up right you start to get a

1770
01:15:03,130 --> 01:15:08,680
sense of how big they are right this is

1771
01:15:05,319 --> 01:15:10,359
four bytes this is three times four

1772
01:15:08,680 --> 01:15:12,760
bytes right so that's 16 bytes right

1773
01:15:10,359 --> 01:15:15,729
there and so then you know you could

1774
01:15:12,760 --> 01:15:17,380
imagine if this is 16 bytes here imagine

1775
01:15:15,729 --> 01:15:20,049
some other blocks here here's another 16

1776
01:15:17,380 --> 01:15:24,310
and maybe here's 32 bytes so here's a 64

1777
01:15:20,050 --> 01:15:26,409
byte chunk okay and then after that's

1778
01:15:24,310 --> 01:15:28,240
another 64 byte chunk maybe there's I

1779
01:15:26,409 --> 01:15:30,579
don't know why there's a there's a name

1780
01:15:28,239 --> 01:15:33,010
field here that's 16 bytes long I don't

1781
01:15:30,579 --> 01:15:34,359
know why we would have that but we do

1782
01:15:33,010 --> 01:15:36,130
all of a sudden and then we have like a

1783
01:15:34,359 --> 01:15:39,389
bitmap ID and that's more so we just

1784
01:15:36,130 --> 01:15:44,529
have imagine just lots of 64 byte chunks

1785
01:15:39,390 --> 01:15:47,710
okay that is how the cache to a first

1786
01:15:44,529 --> 01:15:48,550
approximation sees this entity right now

1787
01:15:47,710 --> 01:15:51,250
there's all sorts of things like

1788
01:15:48,550 --> 01:15:52,750
aliasing and all there there's a whole

1789
01:15:51,250 --> 01:15:55,180
host of issues that are like super

1790
01:15:52,750 --> 01:15:56,920
complicated crazy things but to a first

1791
01:15:55,180 --> 01:15:59,079
approximation if you want to know how

1792
01:15:56,920 --> 01:16:01,539
cache friendly this entity is that's

1793
01:15:59,079 --> 01:16:05,739
what you're thinking about inside every

1794
01:16:01,539 --> 01:16:08,380
block of 64 bytes if we are to touch one

1795
01:16:05,739 --> 01:16:11,319
of these during processing we have to

1796
01:16:08,380 --> 01:16:14,470
bring all 64 bytes into the cache right

1797
01:16:11,319 --> 01:16:17,109
so if I want just the T value and that's

1798
01:16:14,470 --> 01:16:18,400
all I use in this particular entity none

1799
01:16:17,109 --> 01:16:19,509
of these other things are valid now why

1800
01:16:18,399 --> 01:16:21,579
that would be I have no idea cuz I was

1801
01:16:19,510 --> 01:16:24,640
in peas gonna be Valhalla but pretend

1802
01:16:21,579 --> 01:16:26,170
that was true right all I wanted to

1803
01:16:24,640 --> 01:16:30,130
touch was this T

1804
01:16:26,170 --> 01:16:35,679
well that's four bites but I actually

1805
01:16:30,130 --> 01:16:38,529
had to touch sixty extra bites that I

1806
01:16:35,679 --> 01:16:40,449
didn't use so what that means is

1807
01:16:38,529 --> 01:16:42,009
depending on how our structures

1808
01:16:40,448 --> 01:16:43,509
organized and depending on how the

1809
01:16:42,010 --> 01:16:47,469
sparseness works out in depending

1810
01:16:43,510 --> 01:16:49,929
depending depending we could have a lot

1811
01:16:47,469 --> 01:16:52,779
of extra memory bandwidth getting used

1812
01:16:49,929 --> 01:16:57,880
that is not actually doing anything

1813
01:16:52,779 --> 01:17:00,880
right it's wasted and so it's a gamble

1814
01:16:57,880 --> 01:17:03,340
right you don't know maybe that's okay

1815
01:17:00,880 --> 01:17:05,140
because most of the time you are able to

1816
01:17:03,340 --> 01:17:06,400
pack things well that they happen to

1817
01:17:05,140 --> 01:17:08,079
work out so you don't waste too much

1818
01:17:06,399 --> 01:17:09,939
memory maybe it's horrific and you're

1819
01:17:08,079 --> 01:17:12,399
oftentimes getting into this sort of

1820
01:17:09,939 --> 01:17:16,119
nightmare scenario it's really hard to

1821
01:17:12,399 --> 01:17:17,289
say and so that's certainly one huge

1822
01:17:16,119 --> 01:17:19,000
reason why I don't think it's a

1823
01:17:17,289 --> 01:17:20,789
slam-dunk of an idea by any stretch of

1824
01:17:19,000 --> 01:17:24,279
the imagination because it's like well

1825
01:17:20,789 --> 01:17:27,340
there's a pretty clear reason why you

1826
01:17:24,279 --> 01:17:30,069
know this could be bad fortunately it's

1827
01:17:27,340 --> 01:17:32,560
the kind of could be bad thing that is

1828
01:17:30,069 --> 01:17:35,380
not super dangerous because entity

1829
01:17:32,560 --> 01:17:36,940
processing in this way you know how many

1830
01:17:35,380 --> 01:17:38,289
entities are there going to be well

1831
01:17:36,939 --> 01:17:40,869
there's not going to be a hundred

1832
01:17:38,289 --> 01:17:42,100
thousand entities on the screen and this

1833
01:17:40,869 --> 01:17:43,840
is processing for the things that we

1834
01:17:42,100 --> 01:17:46,900
actually see and immediately around it

1835
01:17:43,840 --> 01:17:48,279
right so we don't have to worry about a

1836
01:17:46,899 --> 01:17:50,198
processing a hundred thousand entities

1837
01:17:48,279 --> 01:17:52,179
at 60 frames a second right but we

1838
01:17:50,198 --> 01:17:55,629
probably have to worry about processing

1839
01:17:52,179 --> 01:17:59,409
like 300 entities at 60 frames a second

1840
01:17:55,630 --> 01:18:02,920
maybe right or at least 30 frames a

1841
01:17:59,409 --> 01:18:05,109
second so you know it's still it's it's

1842
01:18:02,920 --> 01:18:06,460
not so few you know there are certain

1843
01:18:05,109 --> 01:18:08,889
games that have so you know let's say it

1844
01:18:06,460 --> 01:18:11,319
was Street Fighter right well there's

1845
01:18:08,890 --> 01:18:13,239
like two you know maybe miles morning to

1846
01:18:11,319 --> 01:18:16,840
but you know how many eighties are there

1847
01:18:13,238 --> 01:18:18,488
really gonna be 10 20 not very many so

1848
01:18:16,840 --> 01:18:21,460
you wouldn't care it would not matter

1849
01:18:18,488 --> 01:18:23,049
but you know as that number gets up to a

1850
01:18:21,460 --> 01:18:24,609
couple hundred or even if it's a

1851
01:18:23,050 --> 01:18:26,170
thousand right you're starting to get a

1852
01:18:24,609 --> 01:18:29,920
little nervous because now it's like

1853
01:18:26,170 --> 01:18:32,020
well if I blow half two thirds of my

1854
01:18:29,920 --> 01:18:33,670
memory bandwidth they're pulling these

1855
01:18:32,020 --> 01:18:36,880
things in that's kind of uncomfortable

1856
01:18:33,670 --> 01:18:38,779
potentially right so I don't know so

1857
01:18:36,880 --> 01:18:41,659
we'll see

1858
01:18:38,779 --> 01:18:43,789
we'll see I don't think it's dangerous

1859
01:18:41,659 --> 01:18:45,829
enough that I don't want to try it but

1860
01:18:43,789 --> 01:18:48,319
it's definitely not safe enough that I'm

1861
01:18:45,829 --> 01:18:49,519
happened that I'm comfortable saying oh

1862
01:18:48,319 --> 01:18:51,139
it won't be any problem don't worry

1863
01:18:49,520 --> 01:18:53,510
about it like we won't have to worry at

1864
01:18:51,140 --> 01:18:56,200
all be great you know it's two kids

1865
01:18:53,510 --> 01:18:56,199
could still go wrong

1866
01:19:01,300 --> 01:19:07,789
Connor rents what are some alternatives

1867
01:19:03,560 --> 01:19:10,180
to an entity system well there is really

1868
01:19:07,789 --> 01:19:13,670
no alternative to an entity system if

1869
01:19:10,180 --> 01:19:17,030
the game has entities in a sense that no

1870
01:19:13,670 --> 01:19:19,699
matter how non system E it is you still

1871
01:19:17,029 --> 01:19:22,250
have one I mean you know if you went

1872
01:19:19,699 --> 01:19:24,679
back to maybe pac-man or something like

1873
01:19:22,250 --> 01:19:26,359
this then you could say well there's no

1874
01:19:24,680 --> 01:19:28,159
any system right there's just some

1875
01:19:26,359 --> 01:19:30,229
specific code where you know you've got

1876
01:19:28,159 --> 01:19:31,670
an array of like four ghosts and you are

1877
01:19:30,229 --> 01:19:32,869
gonna do a third thing to each one of

1878
01:19:31,670 --> 01:19:34,460
them and each ghost that certain thing

1879
01:19:32,869 --> 01:19:36,380
you can still call that an ende system

1880
01:19:34,460 --> 01:19:38,000
right and it has two types ghosts and

1881
01:19:36,380 --> 01:19:40,029
pac-man or whatever right or you know

1882
01:19:38,000 --> 01:19:44,329
those sorts of things so you know I mean

1883
01:19:40,029 --> 01:19:46,429
any action game like that has an entity

1884
01:19:44,329 --> 01:19:48,769
system because it is inherently about a

1885
01:19:46,430 --> 01:19:50,329
bunch of discrete things that you know

1886
01:19:48,770 --> 01:19:53,510
shoot at each other or touch each other

1887
01:19:50,329 --> 01:19:56,779
and do something and so pretty much the

1888
01:19:53,510 --> 01:19:59,060
basis of any traditional action game in

1889
01:19:56,779 --> 01:20:01,279
that sense is going to be an entity

1890
01:19:59,060 --> 01:20:04,250
system now if you're doing something

1891
01:20:01,279 --> 01:20:06,079
else right you know maybe you're doing

1892
01:20:04,250 --> 01:20:07,789
something like a walking simulator where

1893
01:20:06,079 --> 01:20:10,699
nothing happens right it's called

1894
01:20:07,789 --> 01:20:13,519
nothing happens the game which there are

1895
01:20:10,699 --> 01:20:15,559
a lot of on steam maybe you don't need

1896
01:20:13,520 --> 01:20:17,330
one because maybe the it's about

1897
01:20:15,560 --> 01:20:18,740
something else and so really there's

1898
01:20:17,329 --> 01:20:21,500
just a huge static world and you don't

1899
01:20:18,739 --> 01:20:23,420
ever have this notion of entities that's

1900
01:20:21,500 --> 01:20:27,229
not a thing right or maybe you're making

1901
01:20:23,420 --> 01:20:30,560
a game like we are 1935 at Mali rocket

1902
01:20:27,229 --> 01:20:32,839
it's you know it looks and plays kind of

1903
01:20:30,560 --> 01:20:34,480
like a movie and your interaction is

1904
01:20:32,840 --> 01:20:36,619
about interacting with a dialogue well

1905
01:20:34,479 --> 01:20:39,019
entities aren't a thing anymore right

1906
01:20:36,619 --> 01:20:40,849
it's not an there's no nobodies

1907
01:20:39,020 --> 01:20:42,170
we don't do collision detection to find

1908
01:20:40,850 --> 01:20:43,400
out if two entities interacted with each

1909
01:20:42,170 --> 01:20:45,319
other right like none of that is

1910
01:20:43,399 --> 01:20:48,049
happening it's about you know a very

1911
01:20:45,319 --> 01:20:51,159
different thing so you can see why that

1912
01:20:48,050 --> 01:20:51,159
would be presumably

1913
01:20:51,859 --> 01:21:01,349
well that would be presumably not

1914
01:20:56,220 --> 01:21:05,369
necessary in certain titles Allen

1915
01:21:01,350 --> 01:21:06,990
Webster are you already thinking of a

1916
01:21:05,369 --> 01:21:08,279
back-up plan for the entities and how

1917
01:21:06,989 --> 01:21:12,359
you would transition to that system if

1918
01:21:08,279 --> 01:21:18,659
you had to know because you know

1919
01:21:12,359 --> 01:21:20,969
typically speaking whatever we write if

1920
01:21:18,659 --> 01:21:23,789
there is a problem with it we will see

1921
01:21:20,970 --> 01:21:25,710
that problem occur and have a measure of

1922
01:21:23,789 --> 01:21:28,350
it like if it's the cash problem or if

1923
01:21:25,710 --> 01:21:30,810
it's something else and what the problem

1924
01:21:28,350 --> 01:21:33,510
is and where it's occurring will

1925
01:21:30,810 --> 01:21:35,460
presumably drive our solution in how we

1926
01:21:33,510 --> 01:21:42,210
will modify the system to avoid that

1927
01:21:35,460 --> 01:21:44,760
right so you know it's like I said it's

1928
01:21:42,210 --> 01:21:46,199
not we're not going for super high

1929
01:21:44,760 --> 01:21:47,670
throughput here this game is not about

1930
01:21:46,199 --> 01:21:50,460
processing as many and as easy as

1931
01:21:47,670 --> 01:21:52,440
possible so I'm not really that worried

1932
01:21:50,460 --> 01:21:55,319
that we wouldn't be able to solve it at

1933
01:21:52,439 --> 01:21:57,960
all with something in the ballpark of

1934
01:21:55,319 --> 01:21:59,489
this right but what it will exactly look

1935
01:21:57,960 --> 01:22:03,149
like by the end I don't know because I

1936
01:21:59,489 --> 01:22:07,939
just don't know exactly how some of

1937
01:22:03,149 --> 01:22:07,939
those trade-offs will play out so

1938
01:22:26,779 --> 01:22:32,210
alright looks like we're done um do I

1939
01:22:30,619 --> 01:22:36,739
play Street Fighter who is your favorite

1940
01:22:32,210 --> 01:22:38,480
character uh no I do not play play

1941
01:22:36,739 --> 01:22:40,819
Street Fighter I was always a Mortal

1942
01:22:38,479 --> 01:22:44,899
Kombat guy I really liked Mortal Kombat

1943
01:22:40,819 --> 01:22:46,729
1 I've never liked any of the subsequent

1944
01:22:44,899 --> 01:22:48,409
Mortal Kombat's although I only played

1945
01:22:46,729 --> 01:22:50,119
two and three or something I never

1946
01:22:48,409 --> 01:22:52,340
played any beyond that so I don't know

1947
01:22:50,119 --> 01:22:53,840
but I really really liked the original

1948
01:22:52,340 --> 01:22:55,880
Mortal Kombat I never really liked the

1949
01:22:53,840 --> 01:22:57,170
original Street Fighter or Street

1950
01:22:55,880 --> 01:22:58,239
Fighter 2 or any of the subsequent

1951
01:22:57,170 --> 01:23:00,500
follow-ons

1952
01:22:58,239 --> 01:23:01,099
you know what kind it's what it is

1953
01:23:00,500 --> 01:23:04,550
really is

1954
01:23:01,100 --> 01:23:06,970
I don't like animation pause I can't

1955
01:23:04,550 --> 01:23:12,230
handle it I can't handle animation pause

1956
01:23:06,970 --> 01:23:13,730
you know when like when like somebody

1957
01:23:12,229 --> 01:23:15,819
like uppercut somebody and it freezes

1958
01:23:13,729 --> 01:23:17,809
and then it continues

1959
01:23:15,819 --> 01:23:19,819
having that in a fighting game ruins

1960
01:23:17,810 --> 01:23:22,370
bunningham I can't play it so it was

1961
01:23:19,819 --> 01:23:23,869
always a bit of a rough thing for me and

1962
01:23:22,369 --> 01:23:25,250
I just didn't like the feel of Street

1963
01:23:23,869 --> 01:23:26,300
Fighter for whatever reason so I

1964
01:23:25,250 --> 01:23:27,739
couldn't get couldn't get into it which

1965
01:23:26,300 --> 01:23:29,570
is too bad because that was the more

1966
01:23:27,739 --> 01:23:33,219
popular one so we used to play at the

1967
01:23:29,569 --> 01:23:36,619
arcades I used to like playing you know

1968
01:23:33,220 --> 01:23:38,000
versus other people and I used to play

1969
01:23:36,619 --> 01:23:39,710
against other people in world comment

1970
01:23:38,000 --> 01:23:41,750
one all the time but there just weren't

1971
01:23:39,710 --> 01:23:44,750
enough people it was very easy in my

1972
01:23:41,750 --> 01:23:46,369
hometown and surrounding areas to be the

1973
01:23:44,750 --> 01:23:47,119
best person at Mortal Kombat 1 let me

1974
01:23:46,369 --> 01:23:48,439
tell you that right now

1975
01:23:47,119 --> 01:23:49,489
whereas it probably would not have been

1976
01:23:48,439 --> 01:23:51,649
as easy to be the best Street Fighter

1977
01:23:49,489 --> 01:23:54,739
I'm guessing because more people would

1978
01:23:51,649 --> 01:23:55,879
would have been playing that well the

1979
01:23:54,739 --> 01:23:57,319
enemy system include things such as

1980
01:23:55,880 --> 01:23:58,789
particle effects no part of the VEX are

1981
01:23:57,319 --> 01:24:00,769
a graphical effect that typically get

1982
01:23:58,789 --> 01:24:02,149
launched so the enemy system would spawn

1983
01:24:00,770 --> 01:24:03,860
particle effects but it's not going to

1984
01:24:02,149 --> 01:24:05,449
process them because they're very

1985
01:24:03,859 --> 01:24:07,130
specialized and designed for very high

1986
01:24:05,449 --> 01:24:09,769
throughput and they typically don't have

1987
01:24:07,130 --> 01:24:11,480
on they don't have mutable property

1988
01:24:09,770 --> 01:24:13,250
that's like okay if this is a thing that

1989
01:24:11,479 --> 01:24:15,649
like spawned some fire then the fire

1990
01:24:13,250 --> 01:24:19,180
just particle spawn up it doesn't like

1991
01:24:15,649 --> 01:24:21,889
those don't change to water in like of

1992
01:24:19,180 --> 01:24:23,329
their own accord somebody like reaches

1993
01:24:21,890 --> 01:24:25,990
in from somewhere else and makes that

1994
01:24:23,329 --> 01:24:25,989
change right

1995
01:24:32,409 --> 01:24:38,539
do you play bomberman these are not on

1996
01:24:35,449 --> 01:24:39,889
topic people you can't stand this sweet

1997
01:24:38,539 --> 01:24:41,479
fritter pause but you like the Myrtle

1998
01:24:39,890 --> 01:24:43,550
count Rose cape no I didn't like the

1999
01:24:41,479 --> 01:24:44,959
Mortal Kombat rotoscope either well

2000
01:24:43,550 --> 01:24:49,789
first of all snot rotoscope it's just

2001
01:24:44,960 --> 01:24:52,699
it's actually just video but I like the

2002
01:24:49,789 --> 01:24:55,250
fact that it doesn't pause right because

2003
01:24:52,699 --> 01:24:57,859
that affects the feel the look is a

2004
01:24:55,250 --> 01:24:59,449
separate from the feel right and I

2005
01:24:57,859 --> 01:25:01,159
didn't I don't like the look of either

2006
01:24:59,449 --> 01:25:04,670
game I think both games are not good

2007
01:25:01,159 --> 01:25:06,079
looking really but if I had to pick one

2008
01:25:04,670 --> 01:25:08,899
obviously streetfighters better looking

2009
01:25:06,079 --> 01:25:10,460
the Mortal Kombat I think certainly but

2010
01:25:08,899 --> 01:25:13,279
I don't really like the look of either

2011
01:25:10,460 --> 01:25:14,210
but I like the feel of Mortal Kombat

2012
01:25:13,279 --> 01:25:16,269
better because it doesn't have that

2013
01:25:14,210 --> 01:25:22,510
pause I could never get past that pause

2014
01:25:16,270 --> 01:25:22,510
drove me nuts so yeah

2015
01:25:26,109 --> 01:25:31,429
oh and as far as I'm just grabbing a

2016
01:25:30,078 --> 01:25:33,259
thing I know this wasn't a question but

2017
01:25:31,429 --> 01:25:34,998
someone was saying it does seem unlikely

2018
01:25:33,260 --> 01:25:38,208
that you get 300 undies meaning 60

2019
01:25:34,998 --> 01:25:43,608
frames a second simulation and you know

2020
01:25:38,208 --> 01:25:45,498
it's yes and no because again the whole

2021
01:25:43,609 --> 01:25:47,059
world in this game is kind of made out

2022
01:25:45,498 --> 01:25:48,708
of entities in some sense like each

2023
01:25:47,059 --> 01:25:53,659
ground element will be an entity so you

2024
01:25:48,708 --> 01:25:56,838
know if there's you know let's say that

2025
01:25:53,658 --> 01:25:59,208
we're doing a 17 by 9 tile well there's

2026
01:25:56,838 --> 01:26:01,128
gonna be something like you know if

2027
01:25:59,208 --> 01:26:02,779
there's two entities on every tile the

2028
01:26:01,128 --> 01:26:04,578
tile itself and then something standing

2029
01:26:02,779 --> 01:26:07,188
on it well that's three hundred and six

2030
01:26:04,578 --> 01:26:08,748
entities right there right and maybe

2031
01:26:07,189 --> 01:26:10,579
they've each got a bullet so you know I

2032
01:26:08,748 --> 01:26:12,319
could see 600 entities being a

2033
01:26:10,578 --> 01:26:13,668
reasonable entity load for this game and

2034
01:26:12,319 --> 01:26:15,708
I wouldn't want to necessarily say that

2035
01:26:13,668 --> 01:26:18,788
we shouldn't have that many that that's

2036
01:26:15,708 --> 01:26:21,319
too many so I would say like you know I

2037
01:26:18,788 --> 01:26:23,088
will probably want to stress test this

2038
01:26:21,319 --> 01:26:26,808
with a thousand IVs at 60 frames a

2039
01:26:23,088 --> 01:26:30,469
second so you know if we're talking

2040
01:26:26,809 --> 01:26:32,300
about oops if we're talking about 60,000

2041
01:26:30,469 --> 01:26:33,439
entities or something like that then

2042
01:26:32,300 --> 01:26:36,498
doing the back of the envelope like

2043
01:26:33,439 --> 01:26:38,838
three times a thousand times a thousand

2044
01:26:36,498 --> 01:26:41,599
times a thousand so if let's say it's a

2045
01:26:38,838 --> 01:26:45,788
three gigahertz machine or something and

2046
01:26:41,599 --> 01:26:52,269
I want 60 frames a second and I want to

2047
01:26:45,788 --> 01:26:54,768
have 600 or sorry a thousand of these

2048
01:26:52,269 --> 01:26:57,260
you know that's not very many cycles

2049
01:26:54,769 --> 01:27:01,010
right that's just not that many cycles

2050
01:26:57,260 --> 01:27:02,510
now thankfully I've got multiple cores

2051
01:27:01,010 --> 01:27:05,260
to play with potentially but still it's

2052
01:27:02,510 --> 01:27:07,579
just it's it's you know it's it's

2053
01:27:05,260 --> 01:27:10,609
something to be nervous about I guess

2054
01:27:07,578 --> 01:27:12,198
it's what I would say since this is GPU

2055
01:27:10,609 --> 01:27:13,639
accelerated you know we don't have a lot

2056
01:27:12,198 --> 01:27:17,029
of work to do graphics wise so that's

2057
01:27:13,639 --> 01:27:20,418
good but 50,000 cycles per entity is is

2058
01:27:17,029 --> 01:27:21,948
not a it's not a abundance right it's

2059
01:27:20,418 --> 01:27:25,550
not like so much that you'd never be

2060
01:27:21,948 --> 01:27:31,238
worried about anything going wrong in it

2061
01:27:25,550 --> 01:27:35,529
so you know it's it's you know yeah

2062
01:27:31,238 --> 01:27:35,529
we'll see well we'll see what happens

2063
01:27:37,289 --> 01:27:42,939
all right so my understanding is I don't

2064
01:27:41,079 --> 01:27:44,500
actually have to do anything here

2065
01:27:42,939 --> 01:27:47,139
because this actually just saves itself

2066
01:27:44,500 --> 01:27:54,430
which is kind of awesome so I'm gonna go

2067
01:27:47,140 --> 01:27:57,039
ahead and close these guys down and see

2068
01:27:54,430 --> 01:27:58,090
here thank you everyone for joining me

2069
01:27:57,039 --> 01:27:59,229
for another episode of hand made here

2070
01:27:58,090 --> 01:28:01,150
it's been a pleasure coding with you as

2071
01:27:59,229 --> 01:28:03,309
always if you would like to follow along

2072
01:28:01,149 --> 01:28:07,179
with the series at home you can always

2073
01:28:03,310 --> 01:28:08,500
pre-order it on handmade hero org using

2074
01:28:07,180 --> 01:28:09,730
this handy dandy button and it comes to

2075
01:28:08,500 --> 01:28:11,800
source code so you can play around with

2076
01:28:09,729 --> 01:28:12,759
it yourself we also have a forum site

2077
01:28:11,800 --> 01:28:14,500
you can go to if you want to ask

2078
01:28:12,760 --> 01:28:16,780
questions we have a patreon page you can

2079
01:28:14,500 --> 01:28:19,329
use if you want to support video series

2080
01:28:16,779 --> 01:28:21,488
and we have a schedule bot which will

2081
01:28:19,329 --> 01:28:22,569
announce the schedule so that if you're

2082
01:28:21,488 --> 01:28:24,549
trying to get the series live you know

2083
01:28:22,569 --> 01:28:26,019
what it is finally we have a episode

2084
01:28:24,550 --> 01:28:30,400
guide if you're trying to catch up with

2085
01:28:26,020 --> 01:28:32,860
videos in this series from the past that

2086
01:28:30,399 --> 01:28:38,409
is a great place to go and and check

2087
01:28:32,859 --> 01:28:40,179
those out that is about it that that is

2088
01:28:38,409 --> 01:28:43,649
that is it for today I will be back here

2089
01:28:40,180 --> 01:28:46,510
tomorrow 5:00 p.m. Pacific Daylight Time

2090
01:28:43,649 --> 01:28:49,089
and we'll start taking a look probably

2091
01:28:46,510 --> 01:28:51,039
at implementing the entity system

2092
01:28:49,090 --> 01:28:54,119
exactly the way that I just said it and

2093
01:28:51,039 --> 01:28:57,519
seeing how that starts to to shake out

2094
01:28:54,119 --> 01:28:58,840
that's it for me have fun programming

2095
01:28:57,520 --> 01:29:01,080
everyone and I'll see you guys on the

2096
01:28:58,840 --> 01:29:01,079
Internet

