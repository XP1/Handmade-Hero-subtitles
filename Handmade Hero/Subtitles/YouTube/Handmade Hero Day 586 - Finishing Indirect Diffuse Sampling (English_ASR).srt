1
00:00:01,669 --> 00:00:06,000
hello everyone and welcome to handmade

2
00:00:04,379 --> 00:00:08,129
hero show recode a complete game live on

3
00:00:06,000 --> 00:00:11,339
stream wanted to mention something to

4
00:00:08,130 --> 00:00:13,860
you before we get started today there

5
00:00:11,339 --> 00:00:18,868
has been and I don't actually know why

6
00:00:13,859 --> 00:00:20,789
exactly but there was a thread on it I

7
00:00:18,868 --> 00:00:24,140
actually linked to it here and my

8
00:00:20,789 --> 00:00:28,320
Twitter feed you can see here there's a

9
00:00:24,140 --> 00:00:30,750
post I made on March 13th there and you

10
00:00:28,320 --> 00:00:32,609
can see the thread over here and some

11
00:00:30,750 --> 00:00:35,808
folks were talking about the fact that

12
00:00:32,609 --> 00:00:39,509
they're having trouble meeting up with

13
00:00:35,808 --> 00:00:41,689
even virtually meaning you know kind of

14
00:00:39,509 --> 00:00:45,960
getting getting groups together of

15
00:00:41,689 --> 00:00:50,099
people in their local areas that do you

16
00:00:45,960 --> 00:00:52,920
know actual native programming and it

17
00:00:50,100 --> 00:00:54,750
led to the creation of a spreadsheet not

18
00:00:52,920 --> 00:00:57,420
sure who did that or why I think it may

19
00:00:54,750 --> 00:00:59,039
have been Seth I'm not sure but anyway

20
00:00:57,420 --> 00:01:00,420
point being it led to the creation of a

21
00:00:59,039 --> 00:01:02,129
spreadsheet I just wanted to call your

22
00:01:00,420 --> 00:01:04,920
attention to again the tweet has the

23
00:01:02,128 --> 00:01:08,188
link to the spreadsheet but also there's

24
00:01:04,920 --> 00:01:09,810
a tiny URL for it someone made that'll

25
00:01:08,188 --> 00:01:11,989
probably work for a little while it's

26
00:01:09,810 --> 00:01:18,090
just s rf3 tqu

27
00:01:11,989 --> 00:01:20,579
so tinyurl.com /sr f3t qu and if you go

28
00:01:18,090 --> 00:01:22,500
there there is a place if you just want

29
00:01:20,579 --> 00:01:24,179
to build a public remember this is

30
00:01:22,500 --> 00:01:26,368
available to everybody so if you don't

31
00:01:24,180 --> 00:01:27,990
want people contacting you regarding

32
00:01:26,368 --> 00:01:29,280
native programming stuff you probably

33
00:01:27,989 --> 00:01:30,989
wouldn't want to actually fill in your

34
00:01:29,280 --> 00:01:32,460
email address although you could put in

35
00:01:30,989 --> 00:01:34,319
your city just to be counted some people

36
00:01:32,459 --> 00:01:36,750
have done that my email address is

37
00:01:34,319 --> 00:01:39,750
already public unfortunately so I've

38
00:01:36,750 --> 00:01:41,250
kind of got that either way so I put

39
00:01:39,750 --> 00:01:43,280
mine in here but you know if you want to

40
00:01:41,250 --> 00:01:46,219
keep it as private don't put it in here

41
00:01:43,280 --> 00:01:48,930
and then it's just been doing tallying

42
00:01:46,219 --> 00:01:52,798
what is going on over here people keep

43
00:01:48,930 --> 00:01:55,740
messing up the this thing my my lord

44
00:01:52,799 --> 00:01:58,670
what are they doing like what what's

45
00:01:55,739 --> 00:02:01,739
going on folks why are people doing this

46
00:01:58,670 --> 00:02:04,618
stop messing with the spreadsheet it's

47
00:02:01,739 --> 00:02:07,530
not hard I do not understand what's

48
00:02:04,618 --> 00:02:10,530
going on with this alright anyway

49
00:02:07,530 --> 00:02:12,060
doesn't matter point being everyone

50
00:02:10,530 --> 00:02:13,469
always is messing with the spreadsheet I

51
00:02:12,060 --> 00:02:13,740
don't know why they're messing with the

52
00:02:13,469 --> 00:02:15,569
spread

53
00:02:13,740 --> 00:02:17,010
she probably because it's a public

54
00:02:15,569 --> 00:02:19,849
spreadsheet which is just a generally

55
00:02:17,009 --> 00:02:22,889
bad idea anyway

56
00:02:19,849 --> 00:02:25,169
it will then sum up the people in

57
00:02:22,889 --> 00:02:27,989
various areas which appears to someone

58
00:02:25,169 --> 00:02:30,569
has now broken but you know what are you

59
00:02:27,990 --> 00:02:31,980
gonna do this is why we can't have nice

60
00:02:30,569 --> 00:02:34,949
things people can't leave the

61
00:02:31,979 --> 00:02:38,449
spreadsheet alone and this is all messed

62
00:02:34,949 --> 00:02:43,229
up now they're supposed to be like that

63
00:02:38,449 --> 00:02:44,459
and it's supposed to ya have all of

64
00:02:43,229 --> 00:02:46,709
these things yeah there we go

65
00:02:44,460 --> 00:02:49,890
and then this was supposed to be up at

66
00:02:46,710 --> 00:02:54,000
the top why is it from 50 what are

67
00:02:49,889 --> 00:02:57,859
people doing alright I do not understand

68
00:02:54,000 --> 00:03:00,270
why people can't handle the spreadsheet

69
00:02:57,860 --> 00:03:04,170
like just don't touch the spreadsheet

70
00:03:00,270 --> 00:03:10,650
you don't need to touch that what is

71
00:03:04,169 --> 00:03:12,839
this part here h2 there we go and then

72
00:03:10,650 --> 00:03:14,370
you can see it will sum up on the side

73
00:03:12,840 --> 00:03:16,349
here up until someone breaks the

74
00:03:14,370 --> 00:03:19,980
spreadsheet again as people continue to

75
00:03:16,349 --> 00:03:21,359
break the spreadsheet with with the

76
00:03:19,979 --> 00:03:22,560
people on this so looks like the

77
00:03:21,360 --> 00:03:23,940
spreadsheet you know if you want to go

78
00:03:22,560 --> 00:03:27,240
add yourself to it go ahead it looks

79
00:03:23,939 --> 00:03:28,949
like people are intent on or through

80
00:03:27,240 --> 00:03:30,450
apparently not even vandalism just sheer

81
00:03:28,949 --> 00:03:31,949
incompetence constantly breaking a

82
00:03:30,449 --> 00:03:33,419
spreadsheet even though they literally

83
00:03:31,949 --> 00:03:35,849
only have to add their name to the

84
00:03:33,419 --> 00:03:37,709
bottom of it that's apparently too much

85
00:03:35,849 --> 00:03:41,430
to ask this is also why we have

86
00:03:37,710 --> 00:03:43,170
coronavirus basic stuff is very

87
00:03:41,430 --> 00:03:46,170
complicated for humans and that's where

88
00:03:43,169 --> 00:03:50,489
we're at on that good news let's go

89
00:03:46,169 --> 00:03:52,500
ahead and work on our lighting so we

90
00:03:50,490 --> 00:03:56,010
basically stopped in the middle of doing

91
00:03:52,500 --> 00:03:57,780
code hygiene effectively we had just

92
00:03:56,009 --> 00:03:58,889
kind of done a bunch of sprawling stuff

93
00:03:57,780 --> 00:04:01,409
for lighting and now we're trying to

94
00:03:58,889 --> 00:04:03,209
contract it back down also to get

95
00:04:01,409 --> 00:04:05,579
ourselves some nice features we want to

96
00:04:03,210 --> 00:04:07,050
be able to have everything work off of a

97
00:04:05,580 --> 00:04:09,540
single lighting representation and this

98
00:04:07,050 --> 00:04:11,520
will allow us to get diffused dynamic

99
00:04:09,539 --> 00:04:13,019
bounce which we were previously only

100
00:04:11,520 --> 00:04:13,830
able to do specular dynamic bounce and

101
00:04:13,020 --> 00:04:16,439
that's just because we didn't have

102
00:04:13,830 --> 00:04:19,290
access to the filtered version of our

103
00:04:16,439 --> 00:04:22,079
lighting and so I'm gonna go in to the

104
00:04:19,290 --> 00:04:24,270
lighting system here and I'm just going

105
00:04:22,079 --> 00:04:27,389
to take a quick second to fix the bug

106
00:04:24,269 --> 00:04:33,378
someone reported that was just a copy

107
00:04:27,389 --> 00:04:33,379
bug um I assume it was here somewhere

108
00:04:33,629 --> 00:04:39,718
this probably I'm guessing so my

109
00:04:37,499 --> 00:04:41,669
assumption is like these so this should

110
00:04:39,718 --> 00:04:43,228
have been X the entire time and this

111
00:04:41,668 --> 00:04:45,870
should have been Y the entire time I

112
00:04:43,228 --> 00:04:48,508
believe this was the bug that we're

113
00:04:45,870 --> 00:04:50,218
talking about here but I could be wrong

114
00:04:48,509 --> 00:04:53,098
about that so I'll double check it later

115
00:04:50,218 --> 00:04:54,930
it was reported on the github and it was

116
00:04:53,098 --> 00:04:56,339
just a change now we wouldn't see the

117
00:04:54,930 --> 00:04:59,879
effects of that change till we start

118
00:04:56,339 --> 00:05:01,918
testing for rectangular stuff so yeah I

119
00:04:59,879 --> 00:05:03,300
just want to fix that because we and we

120
00:05:01,918 --> 00:05:05,459
may never even switch to rectangles just

121
00:05:03,300 --> 00:05:07,650
we'd never even see it if we don't

122
00:05:05,459 --> 00:05:10,528
actually end up testing that as a thing

123
00:05:07,649 --> 00:05:12,120
we want to do so you just wanted to

124
00:05:10,528 --> 00:05:13,680
patch that up because we may never see

125
00:05:12,120 --> 00:05:15,569
it if we didn't actually go start

126
00:05:13,680 --> 00:05:19,288
testing for rectangular because we may

127
00:05:15,569 --> 00:05:21,300
never use rectangular anyway so where we

128
00:05:19,288 --> 00:05:22,889
left off was we had done a fair bit of

129
00:05:21,300 --> 00:05:24,870
work porting everything over so that

130
00:05:22,889 --> 00:05:27,900
everything could work out of the texture

131
00:05:24,870 --> 00:05:30,620
specifically and you can see that

132
00:05:27,899 --> 00:05:35,878
happening here if I actually go to the

133
00:05:30,620 --> 00:05:38,370
handmade hero app you can see it running

134
00:05:35,879 --> 00:05:41,189
here where you know we've got the

135
00:05:38,370 --> 00:05:43,079
lighting system working but it's using

136
00:05:41,189 --> 00:05:44,490
only specular for indirect bounce which

137
00:05:43,079 --> 00:05:49,468
is why we're not getting much indirect

138
00:05:44,490 --> 00:05:51,389
bounce lighting and you you can see the

139
00:05:49,468 --> 00:05:52,528
diffuse map over here so we do produce

140
00:05:51,389 --> 00:05:54,509
the diffuse map instead of down the

141
00:05:52,528 --> 00:05:57,209
grass card but we can't use it because

142
00:05:54,509 --> 00:05:59,490
again we've we've been using sort of an

143
00:05:57,209 --> 00:06:01,019
intermediate voxel representation for

144
00:05:59,490 --> 00:06:03,180
doing the lighting and so basically we

145
00:06:01,019 --> 00:06:04,649
need to do is now use the Atlas directly

146
00:06:03,180 --> 00:06:06,418
and so there's a couple of things we

147
00:06:04,649 --> 00:06:08,990
need to do for that but we're just gonna

148
00:06:06,418 --> 00:06:11,549
start in on that right away

149
00:06:08,990 --> 00:06:14,098
by forcing the compiler to tell us

150
00:06:11,550 --> 00:06:15,838
everywhere that that was happening so

151
00:06:14,098 --> 00:06:20,038
I'm just gonna go ahead to the lighting

152
00:06:15,838 --> 00:06:22,050
and I'm gonna go ahead and remove the

153
00:06:20,038 --> 00:06:24,269
ability to access the light voxel cells

154
00:06:22,050 --> 00:06:26,310
so this right here which is what we were

155
00:06:24,269 --> 00:06:30,180
doing for a lot of stuff that's just

156
00:06:26,310 --> 00:06:31,978
gonna go away like this and then we're

157
00:06:30,180 --> 00:06:34,139
just gonna take a look at everything

158
00:06:31,978 --> 00:06:35,939
that was previously operating on this

159
00:06:34,139 --> 00:06:37,949
voxel cells now this is a to pass

160
00:06:35,939 --> 00:06:41,250
process because anyone who was taking a

161
00:06:37,949 --> 00:06:44,580
voxel cell as a parameter still can

162
00:06:41,250 --> 00:06:46,680
so at the moment anyway we won't

163
00:06:44,579 --> 00:06:49,050
actually have to touch that piece of

164
00:06:46,680 --> 00:06:51,509
code but we will have to touch everyone

165
00:06:49,050 --> 00:06:52,770
who was trying to like look up a voxel

166
00:06:51,509 --> 00:06:56,909
cell because they're gonna get a

167
00:06:52,769 --> 00:06:59,069
different answer now right okay so what

168
00:06:56,910 --> 00:07:00,780
we want to do now is we want to change a

169
00:06:59,069 --> 00:07:03,930
couple of these things so for example

170
00:07:00,779 --> 00:07:08,039
lookup voxel clamped so like this sort

171
00:07:03,930 --> 00:07:11,400
of stuff does if you look at what's

172
00:07:08,040 --> 00:07:14,730
happening here this is actually talking

173
00:07:11,399 --> 00:07:16,589
about and you know this is an

174
00:07:14,730 --> 00:07:18,810
interesting question so and I don't know

175
00:07:16,589 --> 00:07:22,679
the answer to it I'm thinking we

176
00:07:18,810 --> 00:07:24,329
probably want to actually do this change

177
00:07:22,680 --> 00:07:27,600
which I hadn't really considered before

178
00:07:24,329 --> 00:07:30,449
but it almost seems like what it is what

179
00:07:27,600 --> 00:07:33,830
we would want to do so if you look at

180
00:07:30,449 --> 00:07:38,759
what's going on here where we have the

181
00:07:33,829 --> 00:07:40,168
voxel like the the diffuse atlas if we

182
00:07:38,759 --> 00:07:43,110
look at how we're working with it we

183
00:07:40,168 --> 00:07:46,079
were previously keeping around a larger

184
00:07:43,110 --> 00:07:48,569
section of it then we were using and we

185
00:07:46,079 --> 00:07:50,550
were copying in just the section that we

186
00:07:48,569 --> 00:07:53,009
were talking about so the like you know

187
00:07:50,550 --> 00:07:55,620
we were keeping around a big one and

188
00:07:53,009 --> 00:07:58,829
only updating like sections of it as we

189
00:07:55,620 --> 00:08:07,709
could see them and I don't know that may

190
00:07:58,829 --> 00:08:09,269
be a very good idea I'm not sure to be

191
00:08:07,709 --> 00:08:12,418
honest I'm not sure we really want to

192
00:08:09,269 --> 00:08:15,539
keep doing that I'm not gonna nerf it

193
00:08:12,418 --> 00:08:16,829
entirely per se but it I do think you

194
00:08:15,540 --> 00:08:18,840
know the more I think about it the less

195
00:08:16,829 --> 00:08:20,039
I'm sure why we would want it because if

196
00:08:18,839 --> 00:08:22,619
the idea is for the lighting to be

197
00:08:20,040 --> 00:08:23,669
fairly real-time you don't really want

198
00:08:22,620 --> 00:08:26,009
to be just be keeping a bunch of scale

199
00:08:23,668 --> 00:08:27,329
lighting around so I'm not sure we

200
00:08:26,009 --> 00:08:30,000
really want that to be happening either

201
00:08:27,329 --> 00:08:31,709
way so what I would like to do is

202
00:08:30,000 --> 00:08:34,440
probably just translate this over to

203
00:08:31,709 --> 00:08:37,049
just like looking up voxels in a more

204
00:08:34,440 --> 00:08:38,760
straightforward fashion right so what I

205
00:08:37,049 --> 00:08:41,129
think I'm gonna do is say alright look

206
00:08:38,759 --> 00:08:43,110
there's this light voxel cell nonsense

207
00:08:41,129 --> 00:08:46,049
and maybe we sort of keep what that is

208
00:08:43,110 --> 00:08:49,470
and we'll just say look there's a v3 for

209
00:08:46,049 --> 00:08:51,779
now and the v3 pointer is like the base

210
00:08:49,470 --> 00:08:53,590
pointer for it and then there's just

211
00:08:51,779 --> 00:08:56,740
like a stride value

212
00:08:53,590 --> 00:09:01,030
you add to that thing to get to like the

213
00:08:56,740 --> 00:09:04,960
next row and that's all you do

214
00:09:01,029 --> 00:09:06,939
so maybe the light voxel cell we go

215
00:09:04,960 --> 00:09:09,580
ahead and say look when we look up one

216
00:09:06,940 --> 00:09:11,110
of these you get back one of these light

217
00:09:09,580 --> 00:09:12,879
voxel cells that you can pass around

218
00:09:11,110 --> 00:09:14,740
which is just a thing that allows you to

219
00:09:12,879 --> 00:09:18,970
access the light voxel in some kind of

220
00:09:14,740 --> 00:09:23,950
way and we can move this information

221
00:09:18,970 --> 00:09:27,009
into the actual like like this we can

222
00:09:23,950 --> 00:09:29,070
actually put this into the light atlas

223
00:09:27,009 --> 00:09:31,419
code itself

224
00:09:29,070 --> 00:09:35,950
so effectively we'd have something like

225
00:09:31,419 --> 00:09:41,259
this and maybe we'll call this a light

226
00:09:35,950 --> 00:09:42,820
Atlas cell or an a la talla style and

227
00:09:41,259 --> 00:09:45,340
we'll kind of work on this a little bit

228
00:09:42,820 --> 00:09:48,070
more and you can see with light Atlas

229
00:09:45,340 --> 00:09:51,490
and float here this stuff is maybe gonna

230
00:09:48,070 --> 00:09:53,379
change a little bit and I don't really

231
00:09:51,490 --> 00:09:55,269
want to think about that yet so I'm not

232
00:09:53,379 --> 00:09:58,450
gonna worry about this part until a

233
00:09:55,269 --> 00:09:59,769
little bit later on so in here we're

234
00:09:58,450 --> 00:10:01,629
gonna say light that was tile we're

235
00:09:59,769 --> 00:10:04,659
gonna return that so here I'm gonna say

236
00:10:01,629 --> 00:10:06,490
light Atlas tile and this is gonna be

237
00:10:04,659 --> 00:10:08,319
the result the result stride is gonna be

238
00:10:06,490 --> 00:10:08,769
one thing and the base is gonna be

239
00:10:08,320 --> 00:10:11,860
another

240
00:10:08,769 --> 00:10:13,870
so the stride is always just gonna be

241
00:10:11,860 --> 00:10:18,820
the get stride of the Atlas it's the

242
00:10:13,870 --> 00:10:21,009
same stride of fer forever really and so

243
00:10:18,820 --> 00:10:25,690
we got two different kinds of stride

244
00:10:21,009 --> 00:10:28,649
we've got a u you know we've got stride

245
00:10:25,690 --> 00:10:30,760
for the voxel and stride for the tiles

246
00:10:28,649 --> 00:10:33,789
I'd like to make it clear this is the

247
00:10:30,759 --> 00:10:35,950
tile stride and maybe well I guess it's

248
00:10:33,789 --> 00:10:38,139
in the light Atlas now so it's the tile

249
00:10:35,950 --> 00:10:43,960
stride no matter what I'll just make a

250
00:10:38,139 --> 00:10:45,250
note for it though because you're really

251
00:10:43,960 --> 00:10:46,389
not supposed to be writing outside of

252
00:10:45,250 --> 00:10:52,539
the tile when you're looking at a

253
00:10:46,389 --> 00:10:54,699
particular tile anyway so here we just

254
00:10:52,539 --> 00:10:57,579
say look let's get one of these off we

255
00:10:54,700 --> 00:10:59,860
go the clamped voxel now can just it

256
00:10:57,580 --> 00:11:01,690
doesn't need the lighting solution it

257
00:10:59,860 --> 00:11:03,430
can just use the Atlas because it

258
00:11:01,690 --> 00:11:05,560
doesn't need access to these cells

259
00:11:03,429 --> 00:11:07,419
anymore so basically we just need

260
00:11:05,559 --> 00:11:09,759
something here right

261
00:11:07,419 --> 00:11:12,579
get where the first thing in this the

262
00:11:09,759 --> 00:11:14,259
tile is and then we just need the way to

263
00:11:12,580 --> 00:11:15,879
compute the stride from one row to the

264
00:11:14,259 --> 00:11:17,590
next and that's mostly what we're

265
00:11:15,879 --> 00:11:19,809
looking at in here we've already got the

266
00:11:17,590 --> 00:11:21,190
answer this is going to be the voxel dim

267
00:11:19,809 --> 00:11:23,829
right

268
00:11:21,190 --> 00:11:27,960
and so the voxel dim X is what we would

269
00:11:23,830 --> 00:11:27,960
be clamping at in each of these cases

270
00:11:29,100 --> 00:11:36,190
y&amp;z right and that's all we really need

271
00:11:33,279 --> 00:11:41,409
so after we do that clamp we can do the

272
00:11:36,190 --> 00:11:43,060
lookup and then we can keep going we're

273
00:11:41,409 --> 00:11:45,699
not gonna look at this here so I'm going

274
00:11:43,059 --> 00:11:47,559
to move this look up clamped the voxel

275
00:11:45,700 --> 00:11:49,390
clamped bit and it probably called

276
00:11:47,559 --> 00:11:54,039
lookup tile clamps right

277
00:11:49,389 --> 00:11:57,519
I don't move that in here and so we'll

278
00:11:54,039 --> 00:11:59,139
just call this get tile clamped and it

279
00:11:57,519 --> 00:12:01,000
does the clamp returns the correct

280
00:11:59,139 --> 00:12:03,970
pointer for you that's what we want it

281
00:12:01,000 --> 00:12:06,129
to do now we have light atlas offset

282
00:12:03,970 --> 00:12:08,680
here and that's more or less what we

283
00:12:06,129 --> 00:12:10,720
need right so we can in here say look

284
00:12:08,679 --> 00:12:13,299
this is going to be the XYZ of this

285
00:12:10,720 --> 00:12:15,460
Atlas offset that we're doing and it's

286
00:12:13,299 --> 00:12:17,500
gonna just be the zero zero value so all

287
00:12:15,460 --> 00:12:19,180
we really need here is whatever the

288
00:12:17,500 --> 00:12:21,850
stride value is from one row to the next

289
00:12:19,179 --> 00:12:24,219
so we just need some way of getting you

290
00:12:21,850 --> 00:12:31,330
know a stride value and we could just

291
00:12:24,220 --> 00:12:32,920
say get stride atlas and this might be

292
00:12:31,330 --> 00:12:36,129
fine but again it's gonna be a little

293
00:12:32,919 --> 00:12:37,389
ambiguous so I think I think I might

294
00:12:36,129 --> 00:12:39,549
want to make it explicit just say it's

295
00:12:37,389 --> 00:12:42,279
the tile row stride so it's from one row

296
00:12:39,549 --> 00:12:43,929
to the next of this tile so that we can

297
00:12:42,279 --> 00:12:46,149
look at it based like an image and

298
00:12:43,929 --> 00:12:48,609
that's the thing that people need to use

299
00:12:46,149 --> 00:12:51,159
to add to the base pointer to get to the

300
00:12:48,610 --> 00:12:53,560
next row and so that should be pretty

301
00:12:51,159 --> 00:12:54,870
clear for everyone to be able to use and

302
00:12:53,559 --> 00:13:05,129
we should be able to go from there so

303
00:12:54,870 --> 00:13:07,509
with that in mind with that information

304
00:13:05,129 --> 00:13:10,509
we should then be able to figure out

305
00:13:07,509 --> 00:13:12,129
what this value should actually be so if

306
00:13:10,509 --> 00:13:14,830
I want to produce a result here well

307
00:13:12,129 --> 00:13:18,460
what do I have to do to get from one row

308
00:13:14,830 --> 00:13:20,080
of this Atlas to the other and the

309
00:13:18,460 --> 00:13:21,180
answer is well we don't have to think

310
00:13:20,080 --> 00:13:24,060
about that because we already did

311
00:13:21,179 --> 00:13:26,609
once right this is the T Y value which

312
00:13:24,059 --> 00:13:32,489
is the tile y-coordinate and you can see

313
00:13:26,610 --> 00:13:34,230
here what we multiplied it by right so

314
00:13:32,490 --> 00:13:39,149
you can kind of see like it's voxel dim

315
00:13:34,230 --> 00:13:44,370
X voxel dim Y tile dim X and that's the

316
00:13:39,149 --> 00:13:46,409
complete stride right like so and with

317
00:13:44,370 --> 00:13:49,409
that information we could also simplify

318
00:13:46,409 --> 00:13:53,250
that particular piece of code here if we

319
00:13:49,409 --> 00:13:57,709
wanted to because that expression the

320
00:13:53,250 --> 00:14:01,950
dim X dim white tiled MX we could just

321
00:13:57,710 --> 00:14:03,930
like precompute in store for example so

322
00:14:01,950 --> 00:14:05,700
we could actually put this into because

323
00:14:03,929 --> 00:14:08,009
it never changes we could actually put

324
00:14:05,700 --> 00:14:08,850
this into the light atlas itself and if

325
00:14:08,009 --> 00:14:12,000
we look at that

326
00:14:08,850 --> 00:14:14,009
it's voxels MX voxel dim white tiled MX

327
00:14:12,000 --> 00:14:16,610
you can see that that expression that

328
00:14:14,009 --> 00:14:20,700
actually appears in more than one place

329
00:14:16,610 --> 00:14:23,580
so voxel DMX voxel dim white tiled MX is

330
00:14:20,700 --> 00:14:27,090
actually also this sub expression here

331
00:14:23,580 --> 00:14:29,910
so X Y X right is actually this sub

332
00:14:27,090 --> 00:14:33,509
expression here so we could say this is

333
00:14:29,909 --> 00:14:35,399
like the tile ro stride right and it

334
00:14:33,509 --> 00:14:40,850
replaces that and then the same thing

335
00:14:35,399 --> 00:14:46,500
would be true here so this X Y X value

336
00:14:40,850 --> 00:14:50,399
here is also the Atlas tile ro stride

337
00:14:46,500 --> 00:14:51,659
right and so and what we can do is we

338
00:14:50,399 --> 00:14:53,429
can make this something that doesn't

339
00:14:51,659 --> 00:14:55,649
even need to be computed so you can have

340
00:14:53,429 --> 00:14:59,519
a tile ro stride here that just gets

341
00:14:55,649 --> 00:15:06,569
computed once and then we can just stuff

342
00:14:59,519 --> 00:15:11,360
it in here so that way this actually

343
00:15:06,570 --> 00:15:14,060
doesn't have to actually should boobs

344
00:15:11,360 --> 00:15:17,310
there we go

345
00:15:14,059 --> 00:15:19,649
so this can actually be moved up into

346
00:15:17,309 --> 00:15:21,750
the initialization code so when we do

347
00:15:19,649 --> 00:15:23,610
make light Atlas those dependent

348
00:15:21,750 --> 00:15:26,519
variables get computed and we can just

349
00:15:23,610 --> 00:15:28,139
say oh well the result tile ro stride

350
00:15:26,519 --> 00:15:29,490
will just save it and then anyone who

351
00:15:28,139 --> 00:15:31,949
needs to get from one row to the other

352
00:15:29,490 --> 00:15:33,570
can just use it right again it's both

353
00:15:31,950 --> 00:15:35,460
simplifying our code

354
00:15:33,570 --> 00:15:39,240
and making it faster so it's bit it's

355
00:15:35,460 --> 00:15:40,200
both things right hmm I guess I

356
00:15:39,240 --> 00:15:44,909
shouldn't say it makes it faster we

357
00:15:40,200 --> 00:15:46,800
haven't tested it mm-hmm

358
00:15:44,909 --> 00:15:47,819
but it probably does because you know

359
00:15:46,799 --> 00:15:50,789
that you're gonna be pulling this stuff

360
00:15:47,820 --> 00:15:52,020
into the cache so you're probably it's

361
00:15:50,789 --> 00:15:56,009
probably pretty free for you to get that

362
00:15:52,019 --> 00:15:59,189
so rather than doing mm-hmm a set of

363
00:15:56,009 --> 00:16:04,470
multiplies every time you can just go

364
00:15:59,190 --> 00:16:07,440
ahead and look it up directly anyway so

365
00:16:04,470 --> 00:16:09,149
in here we now have a couple other

366
00:16:07,440 --> 00:16:11,040
values that we could look at to see

367
00:16:09,149 --> 00:16:13,110
whether we want to you know sort of

368
00:16:11,039 --> 00:16:15,719
memorize them as well so you can look at

369
00:16:13,110 --> 00:16:19,050
what the Z value is there what the Y

370
00:16:15,720 --> 00:16:23,610
value is there what the t Y is and what

371
00:16:19,049 --> 00:16:25,289
the t the X and T X are right and what

372
00:16:23,610 --> 00:16:27,000
you can see is there's really not

373
00:16:25,289 --> 00:16:30,750
anything else that's particularly

374
00:16:27,000 --> 00:16:34,019
compelling like there's just not that

375
00:16:30,750 --> 00:16:35,909
much so there doesn't seem to be a lot

376
00:16:34,019 --> 00:16:38,789
of other sub expressions that we might

377
00:16:35,909 --> 00:16:41,250
actually care about so I think that's

378
00:16:38,789 --> 00:16:45,449
probably it for our things we want to

379
00:16:41,250 --> 00:16:48,840
cache I'm pretty sure I don't know that

380
00:16:45,450 --> 00:16:50,490
for a fact but it seems likely anyway so

381
00:16:48,840 --> 00:16:52,050
let's go ahead and finish off this year

382
00:16:50,490 --> 00:16:54,149
so moving this in requires us to turn

383
00:16:52,049 --> 00:16:55,649
change us into results since this the

384
00:16:54,149 --> 00:16:58,289
Atlas has not been made yet so it's

385
00:16:55,649 --> 00:16:59,850
using the one that's making there and

386
00:16:58,289 --> 00:17:02,969
then here we're doing this light Atlas

387
00:16:59,850 --> 00:17:07,650
offset that light Atlas offset code is

388
00:17:02,970 --> 00:17:09,269
basically producing a u-32 that is not

389
00:17:07,650 --> 00:17:11,699
counting the size of anything in

390
00:17:09,269 --> 00:17:15,559
particular right so we would want to

391
00:17:11,699 --> 00:17:20,970
take a v3 like we'd want to actually do

392
00:17:15,559 --> 00:17:23,549
something that gets the the the texels

393
00:17:20,970 --> 00:17:25,769
right like this so you'd want to get the

394
00:17:23,549 --> 00:17:29,088
actual texels and we want to cast that

395
00:17:25,769 --> 00:17:29,088
to a v3 like this

396
00:17:32,970 --> 00:17:38,700
and then we would want to add to the

397
00:17:36,720 --> 00:17:42,980
texels here so this would give us our

398
00:17:38,700 --> 00:17:48,058
offset as we move you know forward there

399
00:17:42,980 --> 00:17:49,620
okay so at that point yeah you can see

400
00:17:48,058 --> 00:17:52,440
what we're doing here we've got this

401
00:17:49,619 --> 00:17:55,109
light voxel cell and what we could do as

402
00:17:52,440 --> 00:17:56,279
well is if we know that since this is

403
00:17:55,109 --> 00:17:59,219
now something that we don't have to

404
00:17:56,279 --> 00:18:02,970
compute we actually could just make this

405
00:17:59,220 --> 00:18:04,200
part be nothing but the pointer and

406
00:18:02,970 --> 00:18:06,150
that's somewhat compelling because now

407
00:18:04,200 --> 00:18:08,220
you might figure well it just helps the

408
00:18:06,150 --> 00:18:09,360
compiler out the compiler might be able

409
00:18:08,220 --> 00:18:11,519
to see that this is the same all the

410
00:18:09,359 --> 00:18:14,490
time or it might not be able to like who

411
00:18:11,519 --> 00:18:15,808
knows how that analysis goes so I might

412
00:18:14,490 --> 00:18:17,279
even just go one further and say all

413
00:18:15,808 --> 00:18:21,240
right forget it since now that's just

414
00:18:17,279 --> 00:18:22,740
something you look up we're good okay so

415
00:18:21,240 --> 00:18:25,019
now if we take a look what happens here

416
00:18:22,740 --> 00:18:28,140
these are all gonna be light atlas tiles

417
00:18:25,019 --> 00:18:29,279
right and so all of the cells that we're

418
00:18:28,140 --> 00:18:33,470
working with you should probably rename

419
00:18:29,279 --> 00:18:33,470
this tiles but well I guess I'm why not

420
00:18:34,788 --> 00:18:40,470
right and so here we grab out all of the

421
00:18:38,819 --> 00:18:42,450
tiles that we're looking at and that

422
00:18:40,470 --> 00:18:44,308
should work now because you know there's

423
00:18:42,450 --> 00:18:46,679
nothing particularly fancy about this so

424
00:18:44,308 --> 00:18:48,869
the only thing we need to do is pass

425
00:18:46,679 --> 00:18:53,360
whose we were looking up so in this case

426
00:18:48,869 --> 00:18:57,319
it's the diffuse atlas so that will get

427
00:18:53,359 --> 00:19:00,500
each of these base pointers right and

428
00:18:57,319 --> 00:19:02,730
what you can see here too is you know

429
00:19:00,500 --> 00:19:04,019
hopefully this gets computed into

430
00:19:02,730 --> 00:19:05,610
something reasonable I don't know we'll

431
00:19:04,019 --> 00:19:07,500
have to look and see if it does but

432
00:19:05,609 --> 00:19:11,129
hopefully this gets us all the pointers

433
00:19:07,500 --> 00:19:12,538
we need quickly and then after we get

434
00:19:11,130 --> 00:19:15,750
sort of where we're looking up in them

435
00:19:12,538 --> 00:19:20,158
we should be able to figure out how to

436
00:19:15,750 --> 00:19:25,048
blend them pretty easily so what does

437
00:19:20,159 --> 00:19:31,850
this mean that's a good to do it tells

438
00:19:25,048 --> 00:19:31,849
us we have an error her okay

439
00:19:45,079 --> 00:19:51,058
so that's not very helpful but alright

440
00:19:48,648 --> 00:19:55,739
I'm not sure what the sampling area is

441
00:19:51,058 --> 00:19:58,648
exactly in this particular case that's

442
00:19:55,740 --> 00:20:00,630
kind of a bit of a mystery I guess and

443
00:19:58,648 --> 00:20:02,099
we don't really know but we could

444
00:20:00,630 --> 00:20:02,730
probably go watch the video that's one

445
00:20:02,099 --> 00:20:04,949
of the interesting things about

446
00:20:02,730 --> 00:20:07,110
recording yourself programming is we

447
00:20:04,950 --> 00:20:09,259
could actually find out what the error

448
00:20:07,109 --> 00:20:11,490
was and that would probably be good

449
00:20:09,259 --> 00:20:13,370
anyway when we go ahead and do the

450
00:20:11,490 --> 00:20:16,950
results here we're just going to be

451
00:20:13,369 --> 00:20:19,319
looping between the various tiles that

452
00:20:16,950 --> 00:20:23,278
we looked up and we need to get a

453
00:20:19,319 --> 00:20:26,189
particular T YT X out of this right so

454
00:20:23,278 --> 00:20:28,288
when we do our lookup voxel clamped here

455
00:20:26,190 --> 00:20:31,259
what we really want to do is for each

456
00:20:28,288 --> 00:20:36,298
one of these we just want a particular T

457
00:20:31,259 --> 00:20:39,778
YT X right and so another thing we could

458
00:20:36,298 --> 00:20:42,359
consider here and maybe we should write

459
00:20:39,778 --> 00:20:45,119
is that since this it's free for me to

460
00:20:42,359 --> 00:20:48,119
move this up above here what we could do

461
00:20:45,119 --> 00:20:50,359
is pre compute an offset like whatever

462
00:20:48,119 --> 00:20:55,349
the offset is and just add the offset

463
00:20:50,359 --> 00:20:56,908
right so we could just do like yeah I

464
00:20:55,349 --> 00:21:02,128
mean we could actually just change this

465
00:20:56,909 --> 00:21:05,340
entirely and just pass the offset in

466
00:21:02,128 --> 00:21:06,778
here right and I don't know like you

467
00:21:05,339 --> 00:21:08,009
know I'm not sure exactly how we want to

468
00:21:06,778 --> 00:21:09,210
do this we'll have to take a look at how

469
00:21:08,009 --> 00:21:10,950
the code is I'll do it the simple way

470
00:21:09,210 --> 00:21:13,470
first but it may be too obtuse for the

471
00:21:10,950 --> 00:21:14,850
compiler I'm not sure but basically what

472
00:21:13,470 --> 00:21:17,220
we want to do here is when we do lookup

473
00:21:14,849 --> 00:21:20,490
voxel clamped we would want to say hey

474
00:21:17,220 --> 00:21:22,980
the txt Y value we want to bake those in

475
00:21:20,490 --> 00:21:25,700
there right so just like give me an

476
00:21:22,980 --> 00:21:28,649
actual txt Y out of this thing so

477
00:21:25,700 --> 00:21:30,569
instead of just looking up the voxel

478
00:21:28,648 --> 00:21:33,569
give me the individual Texel as well and

479
00:21:30,569 --> 00:21:35,849
when we do that function so the lookup

480
00:21:33,569 --> 00:21:38,158
the get tile clamped that way we can

481
00:21:35,849 --> 00:21:41,490
actually do something like this and when

482
00:21:38,159 --> 00:21:45,028
we specify the prototype for get clamped

483
00:21:41,490 --> 00:21:48,899
we can actually you know put the TYT X

484
00:21:45,028 --> 00:21:56,028
in there I'm gonna put a note

485
00:21:48,898 --> 00:21:56,028
only the voxel is clamped not the tile

486
00:21:59,749 --> 00:22:07,048
just for efficiency stand for for

487
00:22:04,349 --> 00:22:09,599
efficiency sake I am NOT gonna clamp the

488
00:22:07,048 --> 00:22:11,519
txt why I'm just gonna clamp the X Y and

489
00:22:09,599 --> 00:22:13,378
the Z because I'm pretty sure that I'm

490
00:22:11,519 --> 00:22:16,169
never gonna need to clamp the txt Y so I

491
00:22:13,378 --> 00:22:18,089
don't want to like slow down that path

492
00:22:16,169 --> 00:22:20,429
just for something that's never gonna

493
00:22:18,089 --> 00:22:22,439
happen but I don't want to leave that

494
00:22:20,429 --> 00:22:24,179
sitting there for somebody who thinks

495
00:22:22,440 --> 00:22:26,070
it's entirely clamped so I'm just making

496
00:22:24,179 --> 00:22:27,859
a quick note of it so if they have bugs

497
00:22:26,069 --> 00:22:31,138
with that they're like oh woops sorry

498
00:22:27,858 --> 00:22:33,778
just wanted to make sure that's clear so

499
00:22:31,138 --> 00:22:36,148
inside this we can now change this to

500
00:22:33,778 --> 00:22:38,579
get tile clamped and we can pass the TX

501
00:22:36,148 --> 00:22:40,798
dy that we wanted and then inside here

502
00:22:38,579 --> 00:22:43,710
we just need that so when we're doing

503
00:22:40,798 --> 00:22:44,819
our lerp here we actually now don't need

504
00:22:43,710 --> 00:22:47,788
any of this anymore

505
00:22:44,819 --> 00:22:49,950
these arrow functions are not arrows

506
00:22:47,788 --> 00:22:53,249
anymore they're just a direct access or

507
00:22:49,950 --> 00:22:54,808
so it just be like bass or I don't know

508
00:22:53,249 --> 00:22:58,528
what we want to call this

509
00:22:54,808 --> 00:23:00,960
but I guess Texel right something like

510
00:22:58,528 --> 00:23:05,339
this so in here we're just gonna call

511
00:23:00,960 --> 00:23:08,069
the Texel like this and we should be

512
00:23:05,339 --> 00:23:11,689
fine now there's some things we might

513
00:23:08,069 --> 00:23:14,308
want to do to this later and I'm

514
00:23:11,690 --> 00:23:16,350
probably not gonna bother mention them

515
00:23:14,308 --> 00:23:18,239
at the moment because we'll let those

516
00:23:16,349 --> 00:23:19,829
happen organically but they basically

517
00:23:18,239 --> 00:23:22,440
have to do with once we want to change

518
00:23:19,829 --> 00:23:25,038
this to doing some to working in ways

519
00:23:22,440 --> 00:23:27,298
that are not with float we may need to

520
00:23:25,038 --> 00:23:29,548
restructure us a little bit possibly

521
00:23:27,298 --> 00:23:34,769
make a custom thing here just so that it

522
00:23:29,548 --> 00:23:41,509
works with both float and non float but

523
00:23:34,769 --> 00:23:44,220
you know I don't know all right

524
00:23:41,509 --> 00:23:46,349
so if we then press forward here here's

525
00:23:44,220 --> 00:23:48,298
our textile access or we already have

526
00:23:46,349 --> 00:23:51,480
the ability to pass the txt Y here so

527
00:23:48,298 --> 00:23:53,908
that was like zero work for us and then

528
00:23:51,480 --> 00:23:55,919
in here where we're doing our lips these

529
00:23:53,909 --> 00:23:57,539
pointers I guess the only thing we need

530
00:23:55,919 --> 00:23:59,309
to do is is down ref them because

531
00:23:57,538 --> 00:24:01,048
they're supposed to be v 3s that we

532
00:23:59,308 --> 00:24:03,329
blend and they are they're just a porter

533
00:24:01,048 --> 00:24:05,099
2 V 3 so I believe all I'd have to do is

534
00:24:03,329 --> 00:24:08,129
something like this and now we've

535
00:24:05,099 --> 00:24:10,288
actually got we're actually passing v 3s

536
00:24:08,130 --> 00:24:13,440
by value here to the lerp function and

537
00:24:10,288 --> 00:24:17,460
that should be the end of it right I

538
00:24:13,440 --> 00:24:19,740
don't know about this part where this is

539
00:24:17,460 --> 00:24:20,490
taking this is basically doing a

540
00:24:19,740 --> 00:24:24,870
reflection

541
00:24:20,490 --> 00:24:25,769
so maybe the we have a sample is that we

542
00:24:24,869 --> 00:24:27,959
have that mirror here the fact that

543
00:24:25,769 --> 00:24:30,179
we're not doing the reflection I don't

544
00:24:27,960 --> 00:24:32,870
think we care about that because the

545
00:24:30,179 --> 00:24:32,870
reflection vector

546
00:24:38,450 --> 00:24:43,549
I don't think that matters I don't think

547
00:24:41,990 --> 00:24:49,730
we want to do a bounce

548
00:24:43,549 --> 00:24:51,169
well maybe we do so maybe what we were

549
00:24:49,730 --> 00:24:53,150
talking about the sampling error I'm

550
00:24:51,170 --> 00:24:54,740
just talking out loud here is the fact

551
00:24:53,150 --> 00:24:56,600
that we want to do a bounce off of this

552
00:24:54,740 --> 00:24:58,490
surface and so we want to use the

553
00:24:56,599 --> 00:25:01,009
incoming light that hits the surface and

554
00:24:58,490 --> 00:25:02,359
then we want to modulate by that so I'm

555
00:25:01,009 --> 00:25:05,450
thinking maybe that's what we actually

556
00:25:02,359 --> 00:25:14,559
want to do here so so maybe what we're

557
00:25:05,450 --> 00:25:29,690
actually talking about is this and this

558
00:25:14,559 --> 00:25:31,639
I'm gonna say that's what that is so

559
00:25:29,690 --> 00:25:33,200
we'll take a look at that in a second so

560
00:25:31,640 --> 00:25:34,670
I'm gonna I'm gonna hope that's what we

561
00:25:33,200 --> 00:25:35,840
were talking about because I don't have

562
00:25:34,670 --> 00:25:38,450
any idea what else we could have been

563
00:25:35,839 --> 00:25:40,730
talking about for example here's the you

564
00:25:38,450 --> 00:25:42,860
know here's that same exact code that's

565
00:25:40,730 --> 00:25:44,509
just doing the reflection in here so

566
00:25:42,859 --> 00:25:45,979
basically you know we want to be able to

567
00:25:44,509 --> 00:25:47,539
bounce off the surface and we also want

568
00:25:45,980 --> 00:25:49,880
to modulate by whatever the surface

569
00:25:47,539 --> 00:25:51,430
color is that we hit because the fuze

570
00:25:49,880 --> 00:25:55,520
reflections so it should get modulated

571
00:25:51,430 --> 00:25:57,320
right so we'll have to take a look at

572
00:25:55,519 --> 00:25:58,849
that hopefully by the end of the day

573
00:25:57,319 --> 00:26:01,039
we'll be at a position to do more of

574
00:25:58,849 --> 00:26:02,389
that work but at the moment we're just

575
00:26:01,039 --> 00:26:05,119
trying to get our pipeline working

576
00:26:02,390 --> 00:26:07,430
properly here okay so when we need to

577
00:26:05,119 --> 00:26:10,039
actually update a voxel what we need to

578
00:26:07,430 --> 00:26:11,930
do for updating the voxel is you can see

579
00:26:10,039 --> 00:26:13,579
here that we could we probably just want

580
00:26:11,930 --> 00:26:15,740
to pass like the base pointer in here

581
00:26:13,579 --> 00:26:19,189
right so this should probably just take

582
00:26:15,740 --> 00:26:22,099
a light Atlas tile and then what we do

583
00:26:19,190 --> 00:26:25,130
is we just use the pointer so this right

584
00:26:22,099 --> 00:26:29,299
here where we do the lerp with the with

585
00:26:25,130 --> 00:26:30,590
the T offset Y and the T offset X I'm

586
00:26:29,299 --> 00:26:33,980
guessing we don't really need to do that

587
00:26:30,589 --> 00:26:37,250
but maybe we do right so depending on

588
00:26:33,980 --> 00:26:39,730
how we want to do this we can assume

589
00:26:37,250 --> 00:26:44,640
that this is a base tile if we want to

590
00:26:39,730 --> 00:26:47,849
so we can do the offset here using a

591
00:26:44,640 --> 00:26:49,290
tea offset which is what we got past so

592
00:26:47,849 --> 00:26:51,359
I'm gonna assume that that's what we

593
00:26:49,289 --> 00:26:54,710
want and the way we would do that is we

594
00:26:51,359 --> 00:26:57,959
would just say all right the tile Texel

595
00:26:54,710 --> 00:27:02,579
we need to be able to get a new one like

596
00:26:57,960 --> 00:27:08,370
like this I don't know what I should say

597
00:27:02,579 --> 00:27:16,829
you're like that was tile maybe it

598
00:27:08,369 --> 00:27:24,899
should be this something like that I'm

599
00:27:16,829 --> 00:27:31,829
not sure let's let's just say it's this

600
00:27:24,900 --> 00:27:35,059
I like that better so here we would say

601
00:27:31,829 --> 00:27:39,109
light athelets Texel this is the tile

602
00:27:35,058 --> 00:27:50,279
then we would say light atlas Texel

603
00:27:39,109 --> 00:27:53,189
Texel equals like offset tile offset of

604
00:27:50,279 --> 00:27:57,178
let's say so for this tile we want to

605
00:27:53,190 --> 00:27:58,890
get to this offset right and then we

606
00:27:57,179 --> 00:28:06,169
would just say all right so the Texel

607
00:27:58,890 --> 00:28:08,970
value here is the lerp version of this

608
00:28:06,169 --> 00:28:11,280
and this is just me now making a little

609
00:28:08,970 --> 00:28:13,380
think and work with so if we want to do

610
00:28:11,279 --> 00:28:15,629
an offset from a particular ly tactless

611
00:28:13,380 --> 00:28:21,740
Texel I now want something that

612
00:28:15,630 --> 00:28:21,740
effectively does this it takes one texel

613
00:28:24,440 --> 00:28:37,590
or maybe I'd say like get or offset from

614
00:28:32,630 --> 00:28:39,780
tile Texel I don't know something like

615
00:28:37,589 --> 00:28:41,928
that I'm just not sure to call it but

616
00:28:39,779 --> 00:28:44,700
offset from Texel seems alright and

617
00:28:41,929 --> 00:28:47,400
offset from Texel would take the light

618
00:28:44,700 --> 00:28:49,500
Atlas Texel that's the base Texel and

619
00:28:47,400 --> 00:28:51,840
then it would take the T offset and the

620
00:28:49,500 --> 00:28:53,549
thing other thing we would need is we

621
00:28:51,839 --> 00:28:57,259
would need that stride value so we would

622
00:28:53,549 --> 00:28:59,690
need to know what this was right

623
00:28:57,259 --> 00:29:01,490
so again the fact that's not stored here

624
00:28:59,690 --> 00:29:03,950
is like the ideal thing would be with

625
00:29:01,490 --> 00:29:06,349
store here but I just don't want to

626
00:29:03,950 --> 00:29:08,660
introduce that overhead so I'm going to

627
00:29:06,349 --> 00:29:17,809
say that the Atlas comes in here so you

628
00:29:08,660 --> 00:29:21,740
do that right and so assuming we've got

629
00:29:17,809 --> 00:29:25,669
this now when we do the offset from

630
00:29:21,740 --> 00:29:27,920
Texel of course it went behind my head

631
00:29:25,670 --> 00:29:31,279
let me just scroll that up there so get

632
00:29:27,920 --> 00:29:33,110
tile clamped will produce whichever one

633
00:29:31,279 --> 00:29:34,690
we want but then if we have one of those

634
00:29:33,109 --> 00:29:36,889
and we want to get to a different one

635
00:29:34,690 --> 00:29:38,480
what we would like to be able to do is

636
00:29:36,890 --> 00:29:40,460
say alright there's a light axis Texel

637
00:29:38,480 --> 00:29:42,170
that's the result here it's going to

638
00:29:40,460 --> 00:29:44,630
equal the base Texel and then we're just

639
00:29:42,170 --> 00:29:48,500
going to take that Texel and we're gonna

640
00:29:44,630 --> 00:29:51,830
add to it the T offset X but also the

641
00:29:48,500 --> 00:29:56,779
Atlas tile Rho stride times the T offset

642
00:29:51,829 --> 00:29:58,609
Y right so that will move us to from any

643
00:29:56,779 --> 00:30:00,859
base Texel it'll move us that many

644
00:29:58,609 --> 00:30:02,509
texels in x and y which is what we would

645
00:30:00,859 --> 00:30:04,879
need to get from like the upper or the

646
00:30:02,509 --> 00:30:08,180
lower left corner I should say up to

647
00:30:04,880 --> 00:30:12,280
some arbitrary pick Texel that we want

648
00:30:08,180 --> 00:30:16,880
to talk about and that seems better

649
00:30:12,279 --> 00:30:22,579
alright so that said this is not Texel

650
00:30:16,880 --> 00:30:24,080
anymore sorry this valium yeah I could

651
00:30:22,579 --> 00:30:27,279
have also called it at I'm just not sure

652
00:30:24,079 --> 00:30:30,799
what it should be called so I apologize

653
00:30:27,279 --> 00:30:34,160
so alright now when we get to something

654
00:30:30,799 --> 00:30:41,029
like test cast for example in this case

655
00:30:34,160 --> 00:30:43,430
we should be able to see like what we

656
00:30:41,029 --> 00:30:45,170
might wanna pass here if we're working

657
00:30:43,430 --> 00:30:47,060
on a particular cell we should just be

658
00:30:45,170 --> 00:30:50,960
able to say look which cell are we

659
00:30:47,059 --> 00:30:53,149
looking at here so here's the you know

660
00:30:50,960 --> 00:30:55,220
maybe I'll call this tile and so then

661
00:30:53,150 --> 00:30:57,140
before when we were looking at cell now

662
00:30:55,220 --> 00:30:59,600
we would just say well here's the tile

663
00:30:57,140 --> 00:31:01,910
we're actually working on and we're

664
00:30:59,599 --> 00:31:03,709
doing this into the spec atlas so that's

665
00:31:01,910 --> 00:31:06,310
pretty much all we really need to say

666
00:31:03,710 --> 00:31:06,309
right

667
00:31:11,210 --> 00:31:16,789
this is not a point juror there we go

668
00:31:16,798 --> 00:31:21,779
and now when we're down to test fear the

669
00:31:18,990 --> 00:31:26,849
same thing should happen so when we have

670
00:31:21,779 --> 00:31:28,889
a light Atlas Texel here's the tile we

671
00:31:26,849 --> 00:31:31,139
can go down here to the exact same

672
00:31:28,890 --> 00:31:33,780
function basically where we're going to

673
00:31:31,140 --> 00:31:37,230
assign it and all we would do there is

674
00:31:33,779 --> 00:31:41,668
say give us the offset and the offset is

675
00:31:37,230 --> 00:31:44,160
this DX dy here right so we'd say for

676
00:31:41,669 --> 00:31:49,290
the speck Atlas and the tile that we're

677
00:31:44,160 --> 00:31:52,830
on we want a V to U of T Y T X that will

678
00:31:49,289 --> 00:31:56,720
give us a value that we can use so the

679
00:31:52,829 --> 00:32:00,089
point this this particular pointer there

680
00:31:56,720 --> 00:32:01,919
can now get assigned to right so then

681
00:32:00,089 --> 00:32:03,750
finally we get to full cast which is

682
00:32:01,919 --> 00:32:05,820
actually where the real work gets done

683
00:32:03,750 --> 00:32:12,480
and so now we have a light Atlas tile

684
00:32:05,819 --> 00:32:16,548
there that we're gonna work on and when

685
00:32:12,480 --> 00:32:19,829
we actually go to use it which is here

686
00:32:16,548 --> 00:32:21,808
we just have to pass what we're updating

687
00:32:19,829 --> 00:32:22,439
so it's the speck Atlas and the tile and

688
00:32:21,808 --> 00:32:24,690
that's it

689
00:32:22,440 --> 00:32:26,450
we already updated that that function so

690
00:32:24,690 --> 00:32:29,308
then we come down and finally we've got

691
00:32:26,450 --> 00:32:32,519
this compute light propagation work this

692
00:32:29,308 --> 00:32:35,250
is looking up the cell we want to now

693
00:32:32,519 --> 00:32:37,859
look up that cell in our actual light

694
00:32:35,250 --> 00:32:40,140
Atlas itself instead of in the voxel so

695
00:32:37,859 --> 00:32:44,490
the light Atlas Texel in this case is

696
00:32:40,140 --> 00:32:47,520
just gonna be the get tile clamped for

697
00:32:44,490 --> 00:32:50,579
whatever it is that we're doing excuse

698
00:32:47,519 --> 00:32:56,039
me hmm

699
00:32:50,579 --> 00:32:57,659
it she knows all right so the get tile

700
00:32:56,039 --> 00:33:00,329
clamped function here so this is the

701
00:32:57,660 --> 00:33:01,710
tile that we're on we're going to pass

702
00:33:00,329 --> 00:33:04,819
it's definitely allergy season here by

703
00:33:01,710 --> 00:33:07,970
the way I've been sneezing so much

704
00:33:04,819 --> 00:33:07,970
excuse me

705
00:33:09,650 --> 00:33:12,650
yeah

706
00:33:12,869 --> 00:33:15,869
hmm

707
00:33:16,079 --> 00:33:23,189
mate tonight that was that was a mistake

708
00:33:24,990 --> 00:33:33,788
um I think all the rest of this was

709
00:33:28,599 --> 00:33:36,250
right though yeah okay so anyway where

710
00:33:33,788 --> 00:33:38,679
do we go from here okay so when i get

711
00:33:36,250 --> 00:33:40,089
this tile here i want to get the tile

712
00:33:38,679 --> 00:33:43,538
out of the spec atlas because that's the

713
00:33:40,089 --> 00:33:46,538
one we're actually updating we don't

714
00:33:43,538 --> 00:33:48,099
need anything else I don't think we just

715
00:33:46,538 --> 00:33:49,298
use the X Y &amp; Z we don't need the hot

716
00:33:48,099 --> 00:33:53,199
corner offset because we're just using

717
00:33:49,298 --> 00:33:55,269
the standard size of things we're going

718
00:33:53,200 --> 00:33:57,778
to do the full cast here it needs to

719
00:33:55,269 --> 00:34:00,220
take the spec atlas as well as the sell

720
00:33:57,778 --> 00:34:04,589
oh well I guess no it doesn't what am I

721
00:34:00,220 --> 00:34:04,589
talking about it just needs to take tile

722
00:34:05,038 --> 00:34:12,699
like so and then in here where we're

723
00:34:10,628 --> 00:34:14,440
actually doing sort of the updates to it

724
00:34:12,699 --> 00:34:16,000
this is where things start to get kind

725
00:34:14,440 --> 00:34:17,440
of hairy because now we're gonna

726
00:34:16,000 --> 00:34:20,260
actually have to implement something

727
00:34:17,440 --> 00:34:22,000
real here so if you take a look at what

728
00:34:20,260 --> 00:34:23,260
happens here I don't know this was

729
00:34:22,000 --> 00:34:24,550
probably doing something a little bit

730
00:34:23,260 --> 00:34:26,500
different previously we don't actually

731
00:34:24,550 --> 00:34:29,200
need this at the moment so this can

732
00:34:26,500 --> 00:34:33,039
actually go away that probably happens

733
00:34:29,199 --> 00:34:35,250
in here so really what we need update is

734
00:34:33,039 --> 00:34:35,250
this

735
00:34:43,340 --> 00:34:52,289
okay when we're looping over these two

736
00:34:49,650 --> 00:34:55,500
things remember this is going to be kind

737
00:34:52,289 --> 00:34:57,779
of crunky because we actually have two

738
00:34:55,500 --> 00:34:59,730
different atlases now we have the

739
00:34:57,780 --> 00:35:01,620
specular Atlas which is the one that

740
00:34:59,730 --> 00:35:03,269
we're actually computing on and we have

741
00:35:01,619 --> 00:35:07,739
the diffuse Atlas which is produced by

742
00:35:03,269 --> 00:35:09,449
generating a blur right and this is the

743
00:35:07,739 --> 00:35:12,269
thing that blur is from the specular

744
00:35:09,449 --> 00:35:14,639
Atlas to the diffuse Atlas it's

745
00:35:12,269 --> 00:35:18,210
currently looping over the diffuse Atlas

746
00:35:14,639 --> 00:35:20,190
properly here as you can see and so what

747
00:35:18,210 --> 00:35:23,130
we actually need to do is when we're

748
00:35:20,190 --> 00:35:24,679
doing the light atlas when we're when

749
00:35:23,130 --> 00:35:28,410
we're looping over the tiles of the

750
00:35:24,679 --> 00:35:31,859
diffuse Atlas we can do this work right

751
00:35:28,409 --> 00:35:35,219
here exactly as we have been doing it so

752
00:35:31,860 --> 00:35:38,400
if for example in here we just said get

753
00:35:35,219 --> 00:35:47,399
us the that you know if we if we did

754
00:35:38,400 --> 00:35:48,720
this for the diffuse Atlas and we don't

755
00:35:47,400 --> 00:35:49,889
really need the XYZ here because

756
00:35:48,719 --> 00:35:53,719
remember we've already produced this

757
00:35:49,889 --> 00:35:56,609
tile so actually now I think about it

758
00:35:53,719 --> 00:35:58,349
well know the tile suspect guy so I take

759
00:35:56,610 --> 00:36:01,640
that back so really what we probably

760
00:35:58,349 --> 00:36:07,019
want to do here is say okay look get us

761
00:36:01,639 --> 00:36:12,420
the diffuse tile and maybe this will be

762
00:36:07,019 --> 00:36:14,880
called the speck tile like that so get

763
00:36:12,420 --> 00:36:18,240
us the diffuse tile for this XYZ that

764
00:36:14,880 --> 00:36:20,630
we're on and you know that'll just be

765
00:36:18,239 --> 00:36:24,179
the tile base that we're gonna work with

766
00:36:20,630 --> 00:36:30,450
so get that tile base and then we'll

767
00:36:24,179 --> 00:36:32,369
just do an offset from Texel to get the

768
00:36:30,449 --> 00:36:39,359
diffuse Texel for a particular one of

769
00:36:32,369 --> 00:36:44,460
these right and I might make a way of

770
00:36:39,360 --> 00:36:47,370
calling this directly here so what I

771
00:36:44,460 --> 00:36:49,590
might do is say all right this actually

772
00:36:47,369 --> 00:36:57,400
is just going to return

773
00:36:49,590 --> 00:37:03,789
offset from Texel atlas vase T offset XT

774
00:36:57,400 --> 00:37:09,599
offset Y so and then in the offset from

775
00:37:03,789 --> 00:37:09,599
Texel here I'm just gonna use T X T y

776
00:37:10,650 --> 00:37:17,440
and leave it like that so if we do an

777
00:37:14,110 --> 00:37:19,870
offset from Texel with 1t Y there and I

778
00:37:17,440 --> 00:37:22,960
pass here the diffuse tile that gives me

779
00:37:19,869 --> 00:37:26,170
the specific diffuse Texel from there if

780
00:37:22,960 --> 00:37:30,159
I want to I can access a particular

781
00:37:26,170 --> 00:37:33,599
diffuse Texel off of the pointer here so

782
00:37:30,159 --> 00:37:39,940
I can just say now diffuse texels value

783
00:37:33,599 --> 00:37:41,619
and get rid of all of this then when we

784
00:37:39,940 --> 00:37:43,240
come through here and we need to write

785
00:37:41,619 --> 00:37:44,829
to it this should all work the same way

786
00:37:43,239 --> 00:37:46,239
so I don't think any of that needs to

787
00:37:44,829 --> 00:37:49,119
change

788
00:37:46,239 --> 00:37:51,159
and so then oops I need to actually

789
00:37:49,119 --> 00:37:55,619
rename the speck tile where we grabbed

790
00:37:51,159 --> 00:37:55,619
that there we go

791
00:37:55,750 --> 00:38:10,329
so then we just need a way of accessing

792
00:38:06,880 --> 00:38:12,160
the specular Atlas properly so if you

793
00:38:10,329 --> 00:38:14,909
look at the way this is working this

794
00:38:12,159 --> 00:38:18,599
actually loops over the speck Atlas dim

795
00:38:14,909 --> 00:38:22,779
X&amp;Y properly here so maybe this is okay

796
00:38:18,599 --> 00:38:26,289
but where we actually get the tile out

797
00:38:22,780 --> 00:38:28,060
you can see this is nonsense now so we

798
00:38:26,289 --> 00:38:29,920
need to get the speck tile but

799
00:38:28,059 --> 00:38:32,049
fortunately we already have that so

800
00:38:29,920 --> 00:38:37,240
really all we need to do now is ask for

801
00:38:32,050 --> 00:38:39,039
the offset inside the so like here right

802
00:38:37,239 --> 00:38:40,629
we just need to ask for the offset now

803
00:38:39,039 --> 00:38:42,610
we could use this where we actually go

804
00:38:40,630 --> 00:38:43,900
by rows and Load incrementally and you

805
00:38:42,610 --> 00:38:45,160
know this that's gonna be stuff when we

806
00:38:43,900 --> 00:38:47,349
go to the action to the optimization

807
00:38:45,159 --> 00:38:49,389
pass we'll look at what the compiler is

808
00:38:47,349 --> 00:38:51,429
doing there and it may do that

809
00:38:49,389 --> 00:38:53,079
transformation for us but if it doesn't

810
00:38:51,429 --> 00:38:57,879
that's something we're gonna have to do

811
00:38:53,079 --> 00:38:59,920
so this wants the SX plus 1 sy plus 1

812
00:38:57,880 --> 00:39:03,490
right that's what it's looking for here

813
00:38:59,920 --> 00:39:07,000
and that's how it's producing this Val

814
00:39:03,489 --> 00:39:09,729
so the spec Texel should just be that

815
00:39:07,000 --> 00:39:13,000
and if we then say load the spec Texel

816
00:39:09,730 --> 00:39:15,190
value this spec Texel value here out of

817
00:39:13,000 --> 00:39:17,108
the specular and you know write it in

818
00:39:15,190 --> 00:39:20,409
that should be all we really need to do

819
00:39:17,108 --> 00:39:22,500
I think not entire don't quote me on

820
00:39:20,409 --> 00:39:22,500
that

821
00:39:22,630 --> 00:39:27,940
so that should give us what we need

822
00:39:24,579 --> 00:39:30,400
there we then have this copy the block

823
00:39:27,940 --> 00:39:32,619
copy voxel routine and I don't actually

824
00:39:30,400 --> 00:39:34,630
know that we need to do this anymore so

825
00:39:32,619 --> 00:39:37,119
we may just say like that's not gonna

826
00:39:34,630 --> 00:39:38,440
happen so yeah call it all you want but

827
00:39:37,119 --> 00:39:39,039
we're not actually gonna use this

828
00:39:38,440 --> 00:39:42,809
anymore

829
00:39:39,039 --> 00:39:42,809
actually let's just not call it at all

830
00:39:46,500 --> 00:39:53,760
and the problem that we're gonna have

831
00:39:49,088 --> 00:39:58,199
here again is that as we move around

832
00:39:53,760 --> 00:39:58,200
well no you know what I take that back

833
00:40:01,949 --> 00:40:07,480
so we probably do want to do this and we

834
00:40:05,409 --> 00:40:09,818
do we just want to copy the part that

835
00:40:07,480 --> 00:40:14,280
we're looking at at the moment so if we

836
00:40:09,818 --> 00:40:14,279
happen to have some overlap as it moves

837
00:40:19,469 --> 00:40:26,439
we are we are gonna want that so I think

838
00:40:23,829 --> 00:40:34,210
we want to do this we just need it to

839
00:40:26,440 --> 00:40:36,940
copy tiles instead right so the thing is

840
00:40:34,210 --> 00:40:39,309
the large this is not going to operate

841
00:40:36,940 --> 00:40:42,818
this at the moment is now going to be

842
00:40:39,309 --> 00:40:45,068
something that actually happens per

843
00:40:42,818 --> 00:40:48,039
Atlas right

844
00:40:45,068 --> 00:40:51,009
for copying and so we would want to do

845
00:40:48,039 --> 00:40:53,289
this on the atlases itself right so this

846
00:40:51,010 --> 00:40:56,680
would actually be a thing that's like

847
00:40:53,289 --> 00:41:02,318
block copy Atlas and it would take a

848
00:40:56,679 --> 00:41:04,269
light Atlas and it would take a debauch

849
00:41:02,318 --> 00:41:11,469
soul and it would basically do exactly

850
00:41:04,269 --> 00:41:16,139
the same thing right I'm gonna go ahead

851
00:41:11,469 --> 00:41:21,419
and if one in here so that we can use

852
00:41:16,139 --> 00:41:26,699
this version well no that's but that's

853
00:41:21,420 --> 00:41:31,200
wrong because that actually only works

854
00:41:26,699 --> 00:41:33,059
if you're not overlapping so I don't

855
00:41:31,199 --> 00:41:36,149
know that this actually helps us at all

856
00:41:33,059 --> 00:41:37,469
really I think we can get rid of that

857
00:41:36,150 --> 00:41:40,280
path because I don't think that would

858
00:41:37,469 --> 00:41:43,019
that would have an overwrite error right

859
00:41:40,280 --> 00:41:44,790
so unless you copied the Atlas it

860
00:41:43,019 --> 00:41:47,789
wouldn't work so just get rid of that

861
00:41:44,789 --> 00:41:50,039
it's not useful all right so this

862
00:41:47,789 --> 00:41:52,650
routine here basically all we need to do

863
00:41:50,039 --> 00:41:54,960
is change the light large voxel dim to

864
00:41:52,650 --> 00:42:00,059
use whatever the Atlas voxel dim is

865
00:41:54,960 --> 00:42:02,909
right so since this is why I think it

866
00:42:00,059 --> 00:42:08,039
means it should be why right so all of

867
00:42:02,909 --> 00:42:10,799
these should be Y values here we then

868
00:42:08,039 --> 00:42:13,289
have X values and the X values should

869
00:42:10,800 --> 00:42:29,310
should do the same I would say right so

870
00:42:13,289 --> 00:42:38,880
this is Atlas voxel dim X like so

871
00:42:29,309 --> 00:42:40,500
and this is Z and this would just copy

872
00:42:38,880 --> 00:42:43,860
the tiles around now the interesting

873
00:42:40,500 --> 00:42:45,420
thing about this is there's probably a

874
00:42:43,860 --> 00:42:48,150
lot of ways we can make this a lot

875
00:42:45,420 --> 00:42:51,300
faster now that it's laid out as an

876
00:42:48,150 --> 00:42:54,660
actual sheet we could probably do things

877
00:42:51,300 --> 00:43:15,600
that are fancier than this so like you

878
00:42:54,659 --> 00:43:17,009
know so there's probably ways we could

879
00:43:15,599 --> 00:43:19,559
do something like that that don't

880
00:43:17,010 --> 00:43:22,920
involve individual tile copies but at

881
00:43:19,559 --> 00:43:26,190
the moment that's not something we're

882
00:43:22,920 --> 00:43:28,050
going to explore so all we really need

883
00:43:26,190 --> 00:43:30,570
now is the thing that's like a copy tile

884
00:43:28,050 --> 00:43:34,140
function that copies from one atlas to a

885
00:43:30,570 --> 00:43:37,260
nut from the atlas into itself a zero

886
00:43:34,139 --> 00:43:39,569
tile function that zeros out a tile and

887
00:43:37,260 --> 00:43:42,090
so all we would really have to do here

888
00:43:39,570 --> 00:43:45,510
is say like look XYZ zero this tile

889
00:43:42,090 --> 00:43:49,019
practice is all the same so this is also

890
00:43:45,510 --> 00:43:51,990
an XYZ zero tile this is also an XYZ

891
00:43:49,019 --> 00:43:53,489
zero tile so all of those clears would

892
00:43:51,989 --> 00:43:57,029
work just fine and so all we would need

893
00:43:53,489 --> 00:43:59,639
here is the copy function and so it

894
00:43:57,030 --> 00:44:10,760
would be a from into so we're copying to

895
00:43:59,639 --> 00:44:10,759
this right from this like that

896
00:44:11,869 --> 00:44:23,500
and let me just put these in Xyz order

897
00:44:13,969 --> 00:44:35,289
here so we just basically do a copy from

898
00:44:23,500 --> 00:44:35,289
there to here or I should say source

899
00:44:36,639 --> 00:44:44,809
desk and there yeah so as long as we can

900
00:44:42,349 --> 00:44:46,639
implement a function that copies tiles

901
00:44:44,809 --> 00:44:49,340
and a function that zeros tiles neither

902
00:44:46,639 --> 00:44:54,469
of which should be too tricky that

903
00:44:49,340 --> 00:45:02,720
should give us what we need right so

904
00:44:54,469 --> 00:45:14,949
let's go ahead and do that here's our

905
00:45:02,719 --> 00:45:21,769
copy tile function and we need our

906
00:45:14,949 --> 00:45:22,909
source X I guess these are s 32 s see

907
00:45:21,769 --> 00:45:26,110
there you three 2's aren't they I mean

908
00:45:22,909 --> 00:45:26,109
they can't be outside

909
00:45:37,108 --> 00:45:42,369
right so what we need to do now is we

910
00:45:40,269 --> 00:45:52,349
need to do for example our get tile

911
00:45:42,369 --> 00:45:59,230
clamped source X source Y source Z and

912
00:45:52,349 --> 00:46:11,440
this will give us our source tile and

913
00:45:59,230 --> 00:46:13,000
then we get our desk tile right and from

914
00:46:11,440 --> 00:46:20,380
source tile the desktop now we just need

915
00:46:13,000 --> 00:46:22,239
to copy the entirety of the you know we

916
00:46:20,380 --> 00:46:24,068
we now just need to advance those

917
00:46:22,239 --> 00:46:28,088
basically in fact we could do this even

918
00:46:24,068 --> 00:46:30,818
by by having a function that does that

919
00:46:28,088 --> 00:46:32,730
for us so if we want to go row by row we

920
00:46:30,818 --> 00:46:39,909
should be able to just do this right and

921
00:46:32,730 --> 00:46:42,818
then here we can just say look for Texel

922
00:46:39,909 --> 00:46:47,639
equals you know whatever the Atlas tile

923
00:46:42,818 --> 00:46:47,639
dim X is copy it

924
00:46:57,130 --> 00:47:00,640
so that would copy one of these things

925
00:46:58,780 --> 00:47:02,950
just loop through it grab each

926
00:47:00,639 --> 00:47:04,690
individual Texel move it over for a row

927
00:47:02,949 --> 00:47:06,819
and then we just need something that

928
00:47:04,690 --> 00:47:12,700
does that for each row which looks like

929
00:47:06,820 --> 00:47:20,289
this right in fact let's call these what

930
00:47:12,699 --> 00:47:22,659
we've been calling them right and that

931
00:47:20,289 --> 00:47:25,239
should be our entire copy function all

932
00:47:22,659 --> 00:47:28,569
we need is an advanced row function to

933
00:47:25,239 --> 00:47:32,589
do you know basically take a light Atlas

934
00:47:28,570 --> 00:47:34,630
Texel which is an access er into our

935
00:47:32,590 --> 00:47:41,650
light atlas right and move it from one

936
00:47:34,630 --> 00:47:43,630
row to the next and that's super simple

937
00:47:41,650 --> 00:47:45,579
because whatever the value is of this

938
00:47:43,630 --> 00:47:49,150
thing all we're gonna do is move it by

939
00:47:45,579 --> 00:47:51,579
that row stride right that just moves it

940
00:47:49,150 --> 00:47:53,559
to the next row so really really

941
00:47:51,579 --> 00:47:58,480
straightforward not anything fancy going

942
00:47:53,559 --> 00:48:03,130
on there and that's it now if we want to

943
00:47:58,480 --> 00:48:06,969
the zero function would be literally the

944
00:48:03,130 --> 00:48:09,760
same code the only difference is we

945
00:48:06,969 --> 00:48:11,619
don't have a source so instead of ever

946
00:48:09,760 --> 00:48:14,410
working with the source we just say look

947
00:48:11,619 --> 00:48:20,019
this thing is whatever the zero value is

948
00:48:14,409 --> 00:48:21,429
right and that's it I think so I think

949
00:48:20,019 --> 00:48:24,150
that's pretty much all we need and now

950
00:48:21,429 --> 00:48:31,329
that function has been ported as well

951
00:48:24,150 --> 00:48:33,280
right okay now this again we need to

952
00:48:31,329 --> 00:48:37,360
make relative to the atlas so this is

953
00:48:33,280 --> 00:48:44,740
going to be the voxel dim x and this is

954
00:48:37,360 --> 00:48:51,670
going to be the voxel dim y this will be

955
00:48:44,739 --> 00:48:56,109
the X here there we go and I think we're

956
00:48:51,670 --> 00:48:57,940
all good so that looks good so then here

957
00:48:56,110 --> 00:48:59,680
we've got you know these functions the

958
00:48:57,940 --> 00:49:02,170
advanced row function that's probably

959
00:48:59,679 --> 00:49:07,079
generally useful to like I could easily

960
00:49:02,170 --> 00:49:09,519
use that elsewhere so like here

961
00:49:07,079 --> 00:49:12,179
then we've got our copy tile function

962
00:49:09,519 --> 00:49:15,429
that anyone can use if they want to

963
00:49:12,179 --> 00:49:18,480
right to move tiles around in the Atlas

964
00:49:15,429 --> 00:49:30,099
and then we have our zero tile function

965
00:49:18,480 --> 00:49:35,769
same thing right and actually let me do

966
00:49:30,099 --> 00:49:37,989
that like this so this just gives our

967
00:49:35,769 --> 00:49:39,730
Atlas some pretty nice features there

968
00:49:37,989 --> 00:49:42,729
and now you can kind of build whatever

969
00:49:39,730 --> 00:49:50,940
you need there looks like we forgot a

970
00:49:42,730 --> 00:49:50,940
semicolon so that all works good I think

971
00:49:54,000 --> 00:50:03,070
all right so when we do this we need to

972
00:49:58,420 --> 00:50:04,990
update both of our atlases so in begin

973
00:50:03,070 --> 00:50:07,390
lighting computation we're going to want

974
00:50:04,989 --> 00:50:09,809
to grab the render commands here out of

975
00:50:07,389 --> 00:50:11,829
the render group that we've been given

976
00:50:09,809 --> 00:50:16,269
actually I should go in here and do it

977
00:50:11,829 --> 00:50:20,849
so that will do this so the commands

978
00:50:16,269 --> 00:50:25,659
diffuse light Atlas and the commands

979
00:50:20,849 --> 00:50:32,829
spec light Atlas those should be updated

980
00:50:25,659 --> 00:50:34,960
like thusly and whoops specular and now

981
00:50:32,829 --> 00:50:39,480
we've updated both of those for movement

982
00:50:34,960 --> 00:50:42,990
in our code and that's good right okay

983
00:50:39,480 --> 00:50:42,990
so now

984
00:50:50,778 --> 00:50:57,750
I'm not sure what the natural next thing

985
00:50:53,849 --> 00:51:00,539
to do is I'm guessing just put a lot of

986
00:50:57,750 --> 00:51:03,179
assertions in here and try to catch bugs

987
00:51:00,539 --> 00:51:05,460
that we've introduced by moving to the

988
00:51:03,179 --> 00:51:07,230
system because there's a lot of indexing

989
00:51:05,460 --> 00:51:09,059
going on and that's usually when you

990
00:51:07,230 --> 00:51:11,670
have a lot of different pieces that all

991
00:51:09,059 --> 00:51:14,010
get like you know dese whistled in place

992
00:51:11,670 --> 00:51:18,119
in areas it's usually very easy to make

993
00:51:14,010 --> 00:51:19,349
small mistakes and so like putting a

994
00:51:18,119 --> 00:51:21,690
bunch of assertions in here and trying

995
00:51:19,349 --> 00:51:25,400
to catch bugs is probably the easiest

996
00:51:21,690 --> 00:51:28,318
thing to do at this point in the code so

997
00:51:25,400 --> 00:51:32,400
we'll go through crashbug first because

998
00:51:28,318 --> 00:51:35,369
obviously that's easy enough not sure

999
00:51:32,400 --> 00:51:41,639
what's going on here is that a let me

1000
00:51:35,369 --> 00:51:44,160
let me get going debug mode I'm assuming

1001
00:51:41,639 --> 00:51:45,838
that's actually not this line because

1002
00:51:44,159 --> 00:51:48,629
that probably wouldn't produce an error

1003
00:51:45,838 --> 00:51:51,298
right like you can see that tile dim is

1004
00:51:48,630 --> 00:51:52,858
totally fine here so it's probably

1005
00:51:51,298 --> 00:51:57,619
actually complaining about something

1006
00:51:52,858 --> 00:51:57,619
else not this

1007
00:52:12,010 --> 00:52:16,140
show me the actual hair please

1008
00:52:30,989 --> 00:52:40,449
hmm well that's not good

1009
00:52:36,759 --> 00:52:44,108
so that's complaining that actually we

1010
00:52:40,449 --> 00:52:47,199
only have a bug in the release version

1011
00:52:44,108 --> 00:52:50,528
of the program which makes very little

1012
00:52:47,199 --> 00:52:51,789
sense I mean that is the sort of thing

1013
00:52:50,528 --> 00:52:52,958
that can happen when you're doing a

1014
00:52:51,789 --> 00:52:56,499
bunch of memory work like this because

1015
00:52:52,958 --> 00:52:57,938
we're you know we're definitely tempting

1016
00:52:56,498 --> 00:52:59,468
fate there but that's kind of

1017
00:52:57,938 --> 00:53:02,048
interesting because that's not what you

1018
00:52:59,469 --> 00:53:03,608
would normally expect to see with this

1019
00:53:02,048 --> 00:53:04,958
particular type of thing so we may be

1020
00:53:03,608 --> 00:53:05,918
over writing something somewhere or

1021
00:53:04,958 --> 00:53:09,159
something like this

1022
00:53:05,918 --> 00:53:14,429
hard to say let's take a look at where

1023
00:53:09,159 --> 00:53:17,678
we are so on a fill light atlas border

1024
00:53:14,429 --> 00:53:21,668
here we come in let's see where we're

1025
00:53:17,679 --> 00:53:26,818
actually we're literally hitting it

1026
00:53:21,668 --> 00:53:30,038
right after the stack setup so this

1027
00:53:26,818 --> 00:53:32,048
looks like probably just a memory over I

1028
00:53:30,039 --> 00:53:34,989
kind of thing I'm guessing I'm gonna go

1029
00:53:32,048 --> 00:53:39,639
ahead and start putting some assertions

1030
00:53:34,989 --> 00:53:44,039
in here real quick just to see what

1031
00:53:39,639 --> 00:53:48,188
we've got going on so when we do like

1032
00:53:44,039 --> 00:53:49,869
any of these sorts of things the get

1033
00:53:48,188 --> 00:53:52,298
tile clamped function should be

1034
00:53:49,869 --> 00:54:00,818
preventing us from ever writing outside

1035
00:53:52,298 --> 00:54:03,748
the bounds of the voxel right and so I'm

1036
00:54:00,818 --> 00:54:13,119
not sure like we could do some pointer

1037
00:54:03,748 --> 00:54:15,068
checking there I'm not sure though gosh

1038
00:54:13,119 --> 00:54:17,108
I'm not I'm really not sure like because

1039
00:54:15,068 --> 00:54:19,509
because this is doing clamped it

1040
00:54:17,108 --> 00:54:21,278
shouldn't probably be doing clamped so

1041
00:54:19,509 --> 00:54:23,559
you know what we really shouldn't be

1042
00:54:21,278 --> 00:54:26,679
doing a clamp here what we should be

1043
00:54:23,559 --> 00:54:32,109
doing there is get tile unclamped really

1044
00:54:26,679 --> 00:54:36,068
right so it should probably be this you

1045
00:54:32,108 --> 00:54:42,719
know I'm saying and I might just make

1046
00:54:36,068 --> 00:54:42,719
one of those like this

1047
00:54:45,838 --> 00:54:59,828
like that so this would just give me a

1048
00:54:56,498 --> 00:55:03,968
way of accessing something without

1049
00:54:59,829 --> 00:55:07,769
clamping because in these cases this

1050
00:55:03,969 --> 00:55:12,219
thing should never actually be called on

1051
00:55:07,768 --> 00:55:14,889
anyone who's out anyone who's out of

1052
00:55:12,219 --> 00:55:16,479
bounds so I'm going to do that and I'm

1053
00:55:14,889 --> 00:55:27,818
also going to go ahead and assert here

1054
00:55:16,478 --> 00:55:36,189
that were in bounds right so just want

1055
00:55:27,818 --> 00:55:48,099
to go ahead and check these values for

1056
00:55:36,190 --> 00:55:52,929
validity so this just true let me go

1057
00:55:48,099 --> 00:55:56,759
ahead and push this up to the parameter

1058
00:55:52,929 --> 00:56:06,068
area and set defaults for txt Y to 0

1059
00:55:56,759 --> 00:56:07,389
like so all right this somebody took my

1060
00:56:06,068 --> 00:56:09,278
name's that's all just moving memory

1061
00:56:07,389 --> 00:56:11,288
around that is literally all the

1062
00:56:09,278 --> 00:56:13,478
computer does you're so right like

1063
00:56:11,289 --> 00:56:14,890
basically everything that you think

1064
00:56:13,478 --> 00:56:16,509
you're doing is really just moving

1065
00:56:14,889 --> 00:56:18,068
memory to one place or another and

1066
00:56:16,509 --> 00:56:20,909
changing it along the way right like

1067
00:56:18,068 --> 00:56:22,690
it's it's pretty much all it does

1068
00:56:20,909 --> 00:56:24,699
transforms is all a computer does

1069
00:56:22,690 --> 00:56:27,849
basically question is which the

1070
00:56:24,699 --> 00:56:30,219
transform um should be computed by

1071
00:56:27,849 --> 00:56:34,088
semicolon I agree let's go ahead and fix

1072
00:56:30,219 --> 00:56:36,630
that all right so I don't know how to

1073
00:56:34,088 --> 00:56:41,048
proceed on this other than to start

1074
00:56:36,630 --> 00:56:44,499
adding you know how should I put this

1075
00:56:41,048 --> 00:56:47,318
other than to start adding like stuff

1076
00:56:44,498 --> 00:56:50,348
that tries to catch the error earlier

1077
00:56:47,318 --> 00:56:52,630
right so basically like there's a couple

1078
00:56:50,349 --> 00:56:54,700
ways we could do this one way is to sort

1079
00:56:52,630 --> 00:56:57,590
of

1080
00:56:54,699 --> 00:57:00,589
try to find this specific bug but

1081
00:56:57,590 --> 00:57:03,858
because this is a very low-level finicky

1082
00:57:00,590 --> 00:57:06,440
moving data around with with offsets

1083
00:57:03,858 --> 00:57:09,440
kind of a thing what I'd rather do is

1084
00:57:06,440 --> 00:57:12,139
just put like incrementally build up the

1085
00:57:09,440 --> 00:57:14,780
safety net until the safety net itself

1086
00:57:12,139 --> 00:57:17,420
catches us that way hopefully it'll

1087
00:57:14,780 --> 00:57:19,970
catch other bugs too June and I'm saying

1088
00:57:17,420 --> 00:57:22,220
so rather than just try to find this one

1089
00:57:19,969 --> 00:57:25,730
bug I want to try and put in a bunch of

1090
00:57:22,219 --> 00:57:28,069
like assertions to find classes of bugs

1091
00:57:25,730 --> 00:57:30,889
so that anywhere that I'm actually doing

1092
00:57:28,070 --> 00:57:34,039
stuff I get an assertion if somebody

1093
00:57:30,889 --> 00:57:36,079
screwed up so for example in this block

1094
00:57:34,039 --> 00:57:38,090
copy Atlas routine

1095
00:57:36,079 --> 00:57:40,699
I know it's always calling in to get a

1096
00:57:38,090 --> 00:57:43,850
tile unclamped so I know that if it ever

1097
00:57:40,699 --> 00:57:46,358
passes anything wrong in terms of a

1098
00:57:43,849 --> 00:57:51,019
voxel offset it'll get here right

1099
00:57:46,358 --> 00:57:56,079
similarly I can in here say look T X T Y

1100
00:57:51,019 --> 00:58:00,349
I want to make sure that these values

1101
00:57:56,079 --> 00:58:02,000
are in bounds so that will make sure

1102
00:58:00,349 --> 00:58:04,699
that that always tells me if they are

1103
00:58:02,000 --> 00:58:06,710
and similarly the other thing I can do

1104
00:58:04,699 --> 00:58:09,559
is when we actually go to get the

1105
00:58:06,710 --> 00:58:12,970
pointer here anytime we have one of

1106
00:58:09,559 --> 00:58:18,769
these I can also do a like pointer in

1107
00:58:12,969 --> 00:58:21,199
bounds I can do an assertion on the

1108
00:58:18,769 --> 00:58:23,989
pointer is in bounds and just check it

1109
00:58:21,199 --> 00:58:25,849
right so I want to basically have a way

1110
00:58:23,989 --> 00:58:28,429
that every time I produce one of these

1111
00:58:25,849 --> 00:58:30,980
just even redundantly when I don't need

1112
00:58:28,429 --> 00:58:32,899
it there I guess I can always check the

1113
00:58:30,980 --> 00:58:35,240
resulting pointer to see whether the

1114
00:58:32,900 --> 00:58:37,579
pointer has gone inside or outside the

1115
00:58:35,239 --> 00:58:43,339
bounds of the Atlas so let me pass the

1116
00:58:37,579 --> 00:58:45,409
Atlas there too right and again this is

1117
00:58:43,340 --> 00:58:47,930
just defensive programming to catch my

1118
00:58:45,409 --> 00:58:49,670
own mistakes these will go away in

1119
00:58:47,929 --> 00:58:51,349
release mode but it's just there to as a

1120
00:58:49,670 --> 00:58:53,260
scaffold to try and catch yours I want

1121
00:58:51,349 --> 00:58:55,429
to try and catch the errors with this

1122
00:58:53,260 --> 00:58:57,560
rather than try to catch the error

1123
00:58:55,429 --> 00:58:59,480
manually because I won't be able to

1124
00:58:57,559 --> 00:59:02,179
catch all errors manually is my thinking

1125
00:58:59,480 --> 00:59:03,349
whereas this will catch some errors I

1126
00:59:02,179 --> 00:59:06,409
might not have seen because they just

1127
00:59:03,349 --> 00:59:08,440
happen to not like cause a problem or

1128
00:59:06,409 --> 00:59:08,440
something

1129
00:59:10,510 --> 00:59:19,700
oops um all right well that's the same

1130
00:59:15,829 --> 00:59:29,690
call so we don't need it there this is

1131
00:59:19,699 --> 00:59:30,799
good all right that's all good and so in

1132
00:59:29,690 --> 00:59:33,309
here what I'm going to do is just say

1133
00:59:30,800 --> 00:59:36,230
all right we know we have the texels

1134
00:59:33,309 --> 00:59:37,969
here right so what we should be able to

1135
00:59:36,230 --> 00:59:40,280
do is we should be able to make this

1136
00:59:37,969 --> 00:59:42,108
pointer inbounds which is just a way of

1137
00:59:40,280 --> 00:59:44,210
quickly checking to see whether the

1138
00:59:42,108 --> 00:59:47,929
thing you're about to use actually can

1139
00:59:44,210 --> 00:59:49,699
be used or not so when we do any of

1140
00:59:47,929 --> 00:59:52,699
these things we can just do an internal

1141
00:59:49,699 --> 00:59:56,750
be 32x pointer is inbounds we take the

1142
00:59:52,699 --> 01:00:00,889
light Atlas itself we take the light

1143
00:59:56,750 --> 01:00:08,420
Atlas Texel and we basically just say

1144
01:00:00,889 --> 01:00:12,858
the result of this check is going to be

1145
01:00:08,420 --> 01:00:19,240
the test cell value being required to be

1146
01:00:12,858 --> 01:00:19,239
higher than this base pointer right I

1147
01:00:22,059 --> 01:00:30,320
want to put that here so we're going to

1148
01:00:28,070 --> 01:00:32,480
cast that to a regular generic bite

1149
01:00:30,320 --> 01:00:37,240
pointer we're gonna check to make sure

1150
01:00:32,480 --> 01:00:40,338
that it's greater than the Atlas texels

1151
01:00:37,239 --> 01:00:42,649
so it's not off the beginning of our

1152
01:00:40,338 --> 01:00:44,570
buffer and then we're gonna check to see

1153
01:00:42,650 --> 01:00:46,070
I don't know why I've got an extra

1154
01:00:44,570 --> 01:00:49,309
parenthesis in there we're gonna check

1155
01:00:46,070 --> 01:00:55,190
to see if it's less than whatever the

1156
01:00:49,309 --> 01:00:56,719
end pointer would have been so rather

1157
01:00:55,190 --> 01:00:58,789
than do that here I'm gonna put that out

1158
01:00:56,719 --> 01:01:00,799
of Lion so we can inspect it so that's

1159
01:00:58,789 --> 01:01:03,588
just whatever the check pointer was or

1160
01:01:00,800 --> 01:01:05,390
you know that which is the the up sorry

1161
01:01:03,588 --> 01:01:07,969
not the check pointer that's whatever

1162
01:01:05,389 --> 01:01:11,539
the Atlas texels pointer is plus

1163
01:01:07,969 --> 01:01:15,049
whatever the total size of this thing is

1164
01:01:11,539 --> 01:01:17,239
so if we want to we can call our get

1165
01:01:15,050 --> 01:01:18,830
light Atlas Texel size because we know

1166
01:01:17,239 --> 01:01:20,919
that's what we use to allocate this

1167
01:01:18,829 --> 01:01:24,469
thing in the first place right

1168
01:01:20,920 --> 01:01:26,900
and so we can just call that and say

1169
01:01:24,469 --> 01:01:31,279
well whatever that is that's what we're

1170
01:01:26,900 --> 01:01:33,019
gonna check right I think that's all we

1171
01:01:31,280 --> 01:01:36,339
actually needed there what is the

1172
01:01:33,019 --> 01:01:36,338
problem here

1173
01:01:41,798 --> 01:01:46,159
all right so now we're just going to run

1174
01:01:44,989 --> 01:01:47,659
this and see if we catch we think of

1175
01:01:46,159 --> 01:01:50,808
those asserts I'm not certain that we

1176
01:01:47,659 --> 01:01:53,298
will because again it may not ever find

1177
01:01:50,809 --> 01:01:55,160
anything oh and it did so that's good so

1178
01:01:53,298 --> 01:01:58,400
you can see here the get tile unclamped

1179
01:01:55,159 --> 01:02:00,889
call so we can walk backwards to see

1180
01:01:58,400 --> 01:02:03,829
who's doing this you can see here we

1181
01:02:00,889 --> 01:02:06,078
have somebody working with the geta

1182
01:02:03,829 --> 01:02:24,710
clamped here it's calling the spec atlas

1183
01:02:06,079 --> 01:02:28,220
and the x y&amp;z here I so I I have a

1184
01:02:24,710 --> 01:02:30,470
feeling I know what's happening I want

1185
01:02:28,219 --> 01:02:32,659
to say that the work distribution call

1186
01:02:30,469 --> 01:02:34,759
has not been updated to take into

1187
01:02:32,659 --> 01:02:37,879
account the fact that we no longer have

1188
01:02:34,760 --> 01:02:40,278
a large voxel and so what I want to do

1189
01:02:37,880 --> 01:02:44,210
first before I even go look at that is I

1190
01:02:40,278 --> 01:02:44,900
want to get rid of that idea in the

1191
01:02:44,210 --> 01:02:47,838
first place

1192
01:02:44,900 --> 01:02:51,889
so there's now this light lookup voxel

1193
01:02:47,838 --> 01:02:55,548
dim right and there's also this other

1194
01:02:51,889 --> 01:02:58,219
like large voxel dim nonsense this bit

1195
01:02:55,548 --> 01:03:00,288
here so what we want to do there I think

1196
01:02:58,219 --> 01:03:03,048
is just get rid of this entirely right

1197
01:03:00,289 --> 01:03:08,028
that's going to be gone and we only have

1198
01:03:03,048 --> 01:03:09,679
our interior voxel now right so let's

1199
01:03:08,028 --> 01:03:13,400
take care of that code because that code

1200
01:03:09,679 --> 01:03:15,469
needs to be updated it's wrong so the

1201
01:03:13,400 --> 01:03:18,200
large dim goes away and now we've got

1202
01:03:15,469 --> 01:03:21,318
some work to do here we've got the light

1203
01:03:18,199 --> 01:03:22,969
large voxel dim and the large cell count

1204
01:03:21,318 --> 01:03:26,480
and all this stuff we got to fix all

1205
01:03:22,969 --> 01:03:28,598
this right so let's get rid of large

1206
01:03:26,480 --> 01:03:31,219
cell count because that's gone and

1207
01:03:28,599 --> 01:03:31,970
propagate it through when we do the

1208
01:03:31,219 --> 01:03:33,889
offset

1209
01:03:31,969 --> 01:03:36,069
there is no offset I because

1210
01:03:33,889 --> 01:03:41,869
the hot corner I now has to be based on

1211
01:03:36,070 --> 01:03:43,880
wherever the we've we've got a we've got

1212
01:03:41,869 --> 01:03:45,799
work to do we now want to take like

1213
01:03:43,880 --> 01:03:47,720
wherever the cameras looking and we want

1214
01:03:45,800 --> 01:03:53,600
to Center the voxel around the correct

1215
01:03:47,719 --> 01:03:56,689
area and we have to floor it so that it

1216
01:03:53,599 --> 01:04:00,469
aligns properly with like how the chunks

1217
01:03:56,690 --> 01:04:02,960
are lined up you know I'm saying so will

1218
01:04:00,469 --> 01:04:04,759
yeah so we've got work to do if we go in

1219
01:04:02,960 --> 01:04:07,159
here we can see we've got min corner

1220
01:04:04,760 --> 01:04:09,350
large and min corner hot min corner

1221
01:04:07,159 --> 01:04:13,009
large is now gone Vox Selden and in

1222
01:04:09,349 --> 01:04:15,259
voxel dim those are fine I think because

1223
01:04:13,010 --> 01:04:18,170
they're just a cell so that should be

1224
01:04:15,260 --> 01:04:21,020
totally fine the only thing we don't

1225
01:04:18,170 --> 01:04:22,579
have here well I guess that's it so

1226
01:04:21,019 --> 01:04:29,030
that's all we really need to get rid of

1227
01:04:22,579 --> 01:04:31,909
there all right so yeah if we want to do

1228
01:04:29,030 --> 01:04:33,620
get voxel Center P here and we're

1229
01:04:31,909 --> 01:04:35,539
looping over the voxel then instead of

1230
01:04:33,619 --> 01:04:39,500
min corner large this is just going to

1231
01:04:35,539 --> 01:04:46,570
be Vox min corner hot because that's the

1232
01:04:39,500 --> 01:04:46,570
only voxel we now have min corner hot

1233
01:04:47,679 --> 01:05:02,719
right and then is that all yeah so this

1234
01:04:54,050 --> 01:05:05,690
part now doesn't actually happen none of

1235
01:05:02,719 --> 01:05:06,949
this matters so that's all gone and so

1236
01:05:05,690 --> 01:05:09,470
now we just have to figure out how to

1237
01:05:06,949 --> 01:05:12,589
place our like hot Vox look it's the

1238
01:05:09,469 --> 01:05:15,889
only thing we actually have right and if

1239
01:05:12,590 --> 01:05:19,820
we take a look at the center moved stuff

1240
01:05:15,889 --> 01:05:21,559
right and all of this this is so what

1241
01:05:19,820 --> 01:05:23,870
you can see here is this is not really

1242
01:05:21,559 --> 01:05:27,440
what we want to base our voxel placement

1243
01:05:23,869 --> 01:05:29,440
on and in fact what we may want to do is

1244
01:05:27,440 --> 01:05:32,269
turn the lighting off for a second and

1245
01:05:29,440 --> 01:05:35,150
actually get this voxel sliding around

1246
01:05:32,269 --> 01:05:36,650
properly so that it you know encompasses

1247
01:05:35,150 --> 01:05:39,889
what we actually need it to encompass

1248
01:05:36,650 --> 01:05:42,440
would be another way to look at it if we

1249
01:05:39,889 --> 01:05:45,069
look at what the actual lighting size is

1250
01:05:42,440 --> 01:05:45,070
here

1251
01:05:46,619 --> 01:05:50,400
I have no idea what this is and I don't

1252
01:05:49,199 --> 01:05:56,730
think anyone uses it I mean it's

1253
01:05:50,400 --> 01:06:00,778
verified that's the case it is I might

1254
01:05:56,730 --> 01:06:02,519
also move this into the renderer just

1255
01:06:00,778 --> 01:06:05,190
for now there we go just to keep all

1256
01:06:02,518 --> 01:06:06,479
these in one place so you know if we

1257
01:06:05,190 --> 01:06:11,880
look at what's going on here we've got a

1258
01:06:06,480 --> 01:06:15,838
32 by 32 by 32 voxel that's what we're

1259
01:06:11,880 --> 01:06:17,430
using and I don't actually know if

1260
01:06:15,838 --> 01:06:21,528
that's going to be sufficient it may or

1261
01:06:17,429 --> 01:06:26,159
may not be we may have to go to 64 by 64

1262
01:06:21,528 --> 01:06:27,329
by 32 or 64 by 6 4 by 16 or something

1263
01:06:26,159 --> 01:06:29,278
like that which will now have the

1264
01:06:27,329 --> 01:06:31,380
flexibility to do but either way we need

1265
01:06:29,278 --> 01:06:34,559
to place this thing and we need to slide

1266
01:06:31,380 --> 01:06:39,119
the voxel around properly and one of the

1267
01:06:34,559 --> 01:06:40,859
things that we need to do for that is we

1268
01:06:39,119 --> 01:06:43,048
need to actually work with the act the

1269
01:06:40,858 --> 01:06:45,778
camera placement now and so what I'm

1270
01:06:43,048 --> 01:06:48,960
gonna do I think is I want to turn off

1271
01:06:45,778 --> 01:06:52,230
the lightning computations entirely so

1272
01:06:48,960 --> 01:06:54,179
that they're not actually occurring if

1273
01:06:52,230 --> 01:06:58,849
you look in here I don't know that we

1274
01:06:54,179 --> 01:06:58,848
actually do turn off the lighting ever

1275
01:07:00,318 --> 01:07:04,588
like this whole thing should kind of

1276
01:07:02,670 --> 01:07:09,568
have a if lighting enabled around it I

1277
01:07:04,588 --> 01:07:15,239
would think and doesn't really so like

1278
01:07:09,568 --> 01:07:18,659
this I think we kind of need to store

1279
01:07:15,239 --> 01:07:20,400
right so probably what I would say is on

1280
01:07:18,659 --> 01:07:22,498
here I would want something to select

1281
01:07:20,400 --> 01:07:28,230
lighting enabled would actually go in

1282
01:07:22,498 --> 01:07:32,038
you know into the lighting solution

1283
01:07:28,230 --> 01:07:33,989
itself so solution lighting enable it

1284
01:07:32,039 --> 01:07:35,730
equals letting enabled and then it would

1285
01:07:33,989 --> 01:07:41,608
check it and then when we do the end

1286
01:07:35,730 --> 01:07:43,469
call in here we would just do this take

1287
01:07:41,608 --> 01:07:45,659
the whole thing and wrap it so we

1288
01:07:43,469 --> 01:07:47,009
wouldn't actually you know do any of

1289
01:07:45,659 --> 01:07:48,598
this stuff

1290
01:07:47,009 --> 01:07:50,789
in in the case where the lighting was

1291
01:07:48,599 --> 01:07:53,009
disabled so then what I want to do is I

1292
01:07:50,789 --> 01:07:55,079
want to set an if 0 here and I want to

1293
01:07:53,009 --> 01:07:57,679
disable the lighting I don't want it to

1294
01:07:55,079 --> 01:07:57,680
do the lighting

1295
01:07:58,809 --> 01:08:05,250
and I want to work on the voxel

1296
01:08:00,610 --> 01:08:05,250
placement in a second so we'll do that

1297
01:08:05,670 --> 01:08:16,060
all right so get rid of this put that

1298
01:08:11,500 --> 01:08:19,270
here go ahead and now what I want to do

1299
01:08:16,060 --> 01:08:24,339
is I want to nerf the lighting actually

1300
01:08:19,270 --> 01:08:26,800
at this point so lighting enabled was

1301
01:08:24,338 --> 01:08:29,710
false and you'll see why I want to do

1302
01:08:26,800 --> 01:08:31,659
this in a second so let's go ahead and

1303
01:08:29,710 --> 01:08:33,310
run now and we should get hopefully no

1304
01:08:31,659 --> 01:08:34,630
lighting yeah

1305
01:08:33,310 --> 01:08:38,080
which makes it a little bit hard to see

1306
01:08:34,630 --> 01:08:52,390
that's okay because I think if I want to

1307
01:08:38,079 --> 01:08:54,460
I should excuse me where's the thought

1308
01:08:52,390 --> 01:08:55,450
we had a thing for lighting or something

1309
01:08:54,460 --> 01:08:59,350
that was like whether or not the

1310
01:08:55,449 --> 01:09:01,420
lighting was on I don't know yeah all

1311
01:08:59,350 --> 01:09:03,819
right so I shouldn't be able to do this

1312
01:09:01,420 --> 01:09:05,588
we got to work on our render switches

1313
01:09:03,819 --> 01:09:09,370
maybe that'll be another cleanup Pass

1314
01:09:05,588 --> 01:09:13,409
will do after this so if I turn the

1315
01:09:09,369 --> 01:09:23,260
lighting off why is this even being done

1316
01:09:13,409 --> 01:09:25,599
who is calling this what oh right that

1317
01:09:23,260 --> 01:09:27,338
does still get called okay well that's

1318
01:09:25,600 --> 01:09:29,770
good to know too so that means we have

1319
01:09:27,338 --> 01:09:31,180
an offset error in there as well so this

1320
01:09:29,770 --> 01:09:32,530
is great will be finding all sorts of

1321
01:09:31,180 --> 01:09:34,690
things here in fact let me do bug that

1322
01:09:32,529 --> 01:09:38,920
one now and then I'll go debug the voxel

1323
01:09:34,689 --> 01:09:41,199
placement later well you know what I

1324
01:09:38,920 --> 01:09:43,480
take that back because since we're not

1325
01:09:41,199 --> 01:09:46,838
placing the voxel correctly here maybe

1326
01:09:43,479 --> 01:09:47,229
that wouldn't ever matter no that's not

1327
01:09:46,838 --> 01:09:48,550
true

1328
01:09:47,229 --> 01:09:50,559
so let's debug that one real quick

1329
01:09:48,550 --> 01:09:54,100
because that seems like it's easy to

1330
01:09:50,560 --> 01:09:55,960
debug right so you can see here we're

1331
01:09:54,100 --> 01:10:01,090
calling it Tallinn clamped with the I

1332
01:09:55,960 --> 01:10:02,470
don't know what the XYZ is but you would

1333
01:10:01,090 --> 01:10:07,539
think that would have asserted a little

1334
01:10:02,470 --> 01:10:08,920
earlier if that's the actual XYZ let me

1335
01:10:07,539 --> 01:10:11,079
see if this works in debug mode those

1336
01:10:08,920 --> 01:10:12,250
might be bogus values because I'm like

1337
01:10:11,079 --> 01:10:13,779
that's totally wrong

1338
01:10:12,250 --> 01:10:16,770
why wouldn't it have asserted on the

1339
01:10:13,779 --> 01:10:16,769
bounced check

1340
01:10:26,229 --> 01:10:32,868
so there we go so the x y&amp;z those are

1341
01:10:31,310 --> 01:10:33,350
saying values so that was what I

1342
01:10:32,868 --> 01:10:38,149
expected

1343
01:10:33,350 --> 01:10:41,449
pointer is in bounds here you can see

1344
01:10:38,149 --> 01:10:45,829
seems to have an issue so let's figure

1345
01:10:41,448 --> 01:10:47,988
out you know is this busted so what's it

1346
01:10:45,829 --> 01:10:50,569
actually doing with the light Atlas

1347
01:10:47,988 --> 01:10:54,349
offset there with the XY and Z and so on

1348
01:10:50,569 --> 01:10:55,579
our txt Y is just 0 and 0 so there

1349
01:10:54,350 --> 01:10:59,090
should be no problem with that

1350
01:10:55,579 --> 01:11:01,760
and the result value here is just the

1351
01:10:59,090 --> 01:11:02,840
texels plus whatever that offset is so

1352
01:11:01,760 --> 01:11:04,880
you would think that this should

1353
01:11:02,840 --> 01:11:07,250
definitely be in bounds maybe this

1354
01:11:04,880 --> 01:11:09,469
functions broken I don't know but you

1355
01:11:07,250 --> 01:11:12,649
can see that whatever the light acts

1356
01:11:09,469 --> 01:11:16,158
whatever the get light Atlas Texel sighs

1357
01:11:12,649 --> 01:11:24,259
oh all right

1358
01:11:16,158 --> 01:11:32,719
that's a copypasta that should be get

1359
01:11:24,260 --> 01:11:34,639
light atlas sighs that was a very narrow

1360
01:11:32,719 --> 01:11:40,730
range that we could have accessed in one

1361
01:11:34,639 --> 01:11:42,319
texel let's try that again all right so

1362
01:11:40,729 --> 01:11:43,189
hopefully this will be fine now because

1363
01:11:42,319 --> 01:11:45,679
I was gonna say I didn't think that

1364
01:11:43,189 --> 01:11:47,710
routine would be bad so this is a busted

1365
01:11:45,679 --> 01:11:50,868
okay that's good so this is good to know

1366
01:11:47,710 --> 01:11:52,399
so let's verify that that's actually

1367
01:11:50,868 --> 01:11:55,299
reporting a real error first but that's

1368
01:11:52,399 --> 01:11:58,638
good so this zero tile is somehow

1369
01:11:55,300 --> 01:12:02,110
advancing too much so somehow this is

1370
01:11:58,639 --> 01:12:04,429
like outside of where it should be right

1371
01:12:02,109 --> 01:12:08,000
so let's see if that's actually true I

1372
01:12:04,429 --> 01:12:10,340
don't know let's just take a look so

1373
01:12:08,000 --> 01:12:16,760
let's see if it's plausibly outside at

1374
01:12:10,340 --> 01:12:19,190
all so it is on the last row so that's

1375
01:12:16,760 --> 01:12:22,130
consistent with this being a plausible

1376
01:12:19,189 --> 01:12:24,049
error right so if we look at what we're

1377
01:12:22,130 --> 01:12:26,239
doing here we're looping over a certain

1378
01:12:24,050 --> 01:12:27,920
number of X's certain number of Y's that

1379
01:12:26,238 --> 01:12:29,629
looks like it should be correct because

1380
01:12:27,920 --> 01:12:33,319
here's the Atlas tile dim right and

1381
01:12:29,630 --> 01:12:35,210
here's the Atlas tyldum X so in theory

1382
01:12:33,319 --> 01:12:37,729
this this seems like it should be

1383
01:12:35,210 --> 01:12:38,489
plausible but yet somehow this advance

1384
01:12:37,729 --> 01:12:40,049
row

1385
01:12:38,489 --> 01:12:45,420
well you know what it could be the last

1386
01:12:40,050 --> 01:13:00,300
one though so it should be like pointing

1387
01:12:45,420 --> 01:13:03,210
now to one past the last there so if T Y

1388
01:13:00,300 --> 01:13:04,920
is nine that means it's gonna exit the

1389
01:13:03,210 --> 01:13:06,359
loop yeah so the problem is with

1390
01:13:04,920 --> 01:13:07,949
checking an advance row

1391
01:13:06,359 --> 01:13:09,389
I'm really glad like this is good

1392
01:13:07,949 --> 01:13:11,550
because now we're seeing that it is

1393
01:13:09,390 --> 01:13:13,650
actually checking the correct ranges now

1394
01:13:11,550 --> 01:13:16,140
that pointer is an invalid pointer but

1395
01:13:13,649 --> 01:13:18,059
we're never gonna use it so I guess with

1396
01:13:16,140 --> 01:13:20,039
advance row it's kind of one of those

1397
01:13:18,060 --> 01:13:25,770
things where I can't actually check it

1398
01:13:20,039 --> 01:13:37,529
which is a bummer but I guess I'll do

1399
01:13:25,770 --> 01:13:41,670
the best I can and I can I can do those

1400
01:13:37,529 --> 01:13:43,829
checks before I operate on the value and

1401
01:13:41,670 --> 01:13:48,800
hopefully that'll give me most of the

1402
01:13:43,829 --> 01:13:55,590
protection but we'll see all right so

1403
01:13:48,800 --> 01:13:57,600
what's you're complaining about atlas oh

1404
01:13:55,590 --> 01:14:04,710
it's just Texel okay so I don't actually

1405
01:13:57,600 --> 01:14:05,970
need it I can just do this right so

1406
01:14:04,710 --> 01:14:15,739
hopefully we'll get something out of

1407
01:14:05,970 --> 01:14:15,740
this we'll find out there we go

1408
01:14:23,948 --> 01:14:29,288
there we go so now what I want to do is

1409
01:14:27,429 --> 01:14:30,578
I want to draw those voxels in here so

1410
01:14:29,288 --> 01:14:32,529
you can see that I'm not drawing the

1411
01:14:30,578 --> 01:14:34,899
voxels in here but if I go into this

1412
01:14:32,529 --> 01:14:36,998
piece of code here and enable it I will

1413
01:14:34,899 --> 01:14:38,018
start drawing the voxels the problem is

1414
01:14:36,998 --> 01:14:39,309
I don't actually know where they're

1415
01:14:38,019 --> 01:14:41,139
placed currently because you can see

1416
01:14:39,309 --> 01:14:44,590
that like the offset eye is like a thing

1417
01:14:41,139 --> 01:14:46,449
that produces you know a hot corner hot

1418
01:14:44,590 --> 01:14:48,880
corner information here we don't want a

1419
01:14:46,448 --> 01:14:50,439
hot corner eye anymore it's just the min

1420
01:14:48,880 --> 01:14:52,569
corner and the dimension is all we

1421
01:14:50,439 --> 01:14:55,178
actually need so that kind of goes away

1422
01:14:52,569 --> 01:14:56,768
but this part here still remains so we

1423
01:14:55,179 --> 01:14:58,658
have this up this is the dimensions and

1424
01:14:56,769 --> 01:15:00,729
that's correct this is the inverse

1425
01:14:58,658 --> 01:15:01,958
dimensions and that's all correct so

1426
01:15:00,729 --> 01:15:03,789
then what we really need to do is just

1427
01:15:01,958 --> 01:15:07,029
figure out where this stuff is this

1428
01:15:03,788 --> 01:15:09,639
places it the large corner doesn't need

1429
01:15:07,029 --> 01:15:11,319
to be computed and the large rec doesn't

1430
01:15:09,639 --> 01:15:16,109
need to be computed so then we're just

1431
01:15:11,319 --> 01:15:18,788
down to this now we need to figure out

1432
01:15:16,109 --> 01:15:21,848
some way oh so we found another error

1433
01:15:18,788 --> 01:15:25,599
here get tile unclamped the Y is in the

1434
01:15:21,849 --> 01:15:28,029
wrong place so what happened there who

1435
01:15:25,599 --> 01:15:29,708
is causing this problem let me take a

1436
01:15:28,029 --> 01:15:34,779
look

1437
01:15:29,708 --> 01:15:39,219
block copy begin so this is this D voxel

1438
01:15:34,779 --> 01:15:40,689
here and presumably no matter what you

1439
01:15:39,219 --> 01:15:43,239
pass through this it should work because

1440
01:15:40,689 --> 01:15:54,219
like it should do the clamping interior

1441
01:15:43,238 --> 01:15:56,728
to this so I feel like I feel like this

1442
01:15:54,219 --> 01:15:56,729
should work

1443
01:16:00,809 --> 01:16:05,139
so this this should be a legitimate bug

1444
01:16:03,819 --> 01:16:07,478
meaning there's an actual bug in the

1445
01:16:05,139 --> 01:16:09,399
routine so like this copy tile for

1446
01:16:07,479 --> 01:16:11,649
example should should hopefully this

1447
01:16:09,399 --> 01:16:12,869
should actually be wrong would be my

1448
01:16:11,649 --> 01:16:19,780
guess

1449
01:16:12,868 --> 01:16:25,808
so source X source y source Z you know

1450
01:16:19,779 --> 01:16:29,219
that's not a good source Z so it looks

1451
01:16:25,809 --> 01:16:39,510
like source Y went like below zero here

1452
01:16:29,219 --> 01:16:50,769
right in this routine somehow so this

1453
01:16:39,510 --> 01:16:54,630
was not correct and I'm not sure why so

1454
01:16:50,769 --> 01:16:59,489
let's take a look so we have initial Z

1455
01:16:54,630 --> 01:16:59,489
final Z and stop z

1456
01:17:05,569 --> 01:17:19,880
and looking at where we are the z-value

1457
01:17:09,198 --> 01:17:23,719
that we're passing in here the D voxel Z

1458
01:17:19,880 --> 01:17:25,179
is zero good didn't I look at the wrong

1459
01:17:23,719 --> 01:17:27,980
value wait a minute

1460
01:17:25,179 --> 01:17:31,908
it's Y that I'm looking at what am i

1461
01:17:27,979 --> 01:17:34,899
doing it's Y so what we want to do is

1462
01:17:31,908 --> 01:17:38,069
look at Y there and you know

1463
01:17:34,899 --> 01:17:38,069
[Music]

1464
01:17:46,659 --> 01:17:50,559
I don't see anything obviously wrong

1465
01:17:49,090 --> 01:17:56,039
there's someone look at the individual

1466
01:17:50,560 --> 01:18:01,030
values so taking a look at D voxel why

1467
01:17:56,039 --> 01:18:07,329
it's garbage which is fine though I

1468
01:18:01,029 --> 01:18:11,369
would think because it should clamp it

1469
01:18:07,329 --> 01:18:11,369
right like or do we not have that

1470
01:18:17,369 --> 01:18:20,849
I wonder why that doesn't work all right

1471
01:18:18,810 --> 01:18:28,760
let's take a look so that's our D voxel

1472
01:18:20,850 --> 01:18:28,760
Y so our D Y is negative our stop Y is

1473
01:18:36,079 --> 01:18:41,309
so I guess the problem here is that

1474
01:18:38,550 --> 01:18:43,500
since these values are actually signed

1475
01:18:41,310 --> 01:18:47,640
they wrap around which makes it look

1476
01:18:43,500 --> 01:18:50,329
like it works to the algorithm which is

1477
01:18:47,640 --> 01:18:50,329
pretty janky

1478
01:18:59,640 --> 01:19:06,400
see equals initial Z Z is not equal to

1479
01:19:02,380 --> 01:19:10,480
stop Z Y is initial Y Y not equal to

1480
01:19:06,399 --> 01:19:16,210
stop Y so that actually is fine Maya

1481
01:19:10,479 --> 01:19:17,979
plus equals dy over negative Y and so

1482
01:19:16,210 --> 01:19:19,329
the problem is this value will not stop

1483
01:19:17,979 --> 01:19:22,799
at a property at time I'll just keep

1484
01:19:19,329 --> 01:19:22,800
going right

1485
01:19:34,340 --> 01:19:40,289
so my assumption here is just that this

1486
01:19:37,260 --> 01:19:41,820
routine I guess doesn't contemplate the

1487
01:19:40,289 --> 01:19:44,300
concept that you wouldn't do any copying

1488
01:19:41,819 --> 01:19:44,299
at all

1489
01:19:55,889 --> 01:20:00,150
I mean it doesn't look like we ever

1490
01:19:57,899 --> 01:20:06,929
really handled that case somehow which I

1491
01:20:00,149 --> 01:20:14,969
guess why not I wonder what makes it so

1492
01:20:06,929 --> 01:20:17,399
that we I guess I'm not really sure what

1493
01:20:14,969 --> 01:20:22,590
we were doing before that made it so

1494
01:20:17,399 --> 01:20:26,638
that this wasn't a problem you know what

1495
01:20:22,590 --> 01:20:28,110
I mean I'm guessing that maybe this was

1496
01:20:26,639 --> 01:20:30,090
a bug that we just hadn't addressed

1497
01:20:28,109 --> 01:20:32,519
because it seems like this just wouldn't

1498
01:20:30,090 --> 01:20:35,730
work for this case where you have

1499
01:20:32,520 --> 01:20:40,770
something where the the devoxx 'el is

1500
01:20:35,729 --> 01:20:45,000
too large so we may just want to

1501
01:20:40,770 --> 01:20:50,699
presuppose that we don't do the block

1502
01:20:45,000 --> 01:20:53,189
copy if it's so egregious right but that

1503
01:20:50,698 --> 01:20:57,928
the idea was that should fall down to

1504
01:20:53,189 --> 01:21:01,379
this case right so what we really want

1505
01:20:57,929 --> 01:21:04,260
to have happened here is in a case where

1506
01:21:01,380 --> 01:21:06,569
we need to clear everything you know we

1507
01:21:04,260 --> 01:21:09,179
want to fall through to these cases so

1508
01:21:06,569 --> 01:21:11,340
the why and the stop why should be equal

1509
01:21:09,179 --> 01:21:14,539
to each other in this case and they're

1510
01:21:11,340 --> 01:21:14,539
not right

1511
01:21:18,498 --> 01:21:26,279
so like initial why and stop why should

1512
01:21:24,059 --> 01:21:29,788
be equal to each other in the case where

1513
01:21:26,279 --> 01:21:34,978
you cannot do any copies because the

1514
01:21:29,788 --> 01:21:40,648
Delta was too large and that's totally

1515
01:21:34,979 --> 01:21:41,939
not going to happen right so is it just

1516
01:21:40,649 --> 01:21:45,199
me or maybe the only thing we really

1517
01:21:41,939 --> 01:21:45,199
need to do is just clamp this

1518
01:21:53,279 --> 01:22:07,619
I mean is that right just clamp the stop

1519
01:21:59,159 --> 01:22:08,880
wine I think that might be it so

1520
01:22:07,619 --> 01:22:11,010
basically those things needed to be

1521
01:22:08,880 --> 01:22:19,800
clamped and just never were I want to

1522
01:22:11,010 --> 01:22:21,630
say so right here this should be clamped

1523
01:22:19,800 --> 01:22:25,949
because you should never be allowed to

1524
01:22:21,630 --> 01:22:33,869
sample outside of that why right I want

1525
01:22:25,949 --> 01:22:37,309
to say and I don't know if that's

1526
01:22:33,869 --> 01:22:37,309
exactly right but I think that's right

1527
01:22:41,510 --> 01:22:45,239
so it's basically and that's like the

1528
01:22:44,010 --> 01:22:47,100
initial Y right

1529
01:22:45,239 --> 01:22:49,279
so in fact we probably could do it this

1530
01:22:47,100 --> 01:22:49,280
way

1531
01:22:57,408 --> 01:23:06,198
and so here the vox of my - 1 - d voxel

1532
01:23:03,319 --> 01:23:07,849
y and we know that d voxel i is positive

1533
01:23:06,198 --> 01:23:13,399
so really this just needs to be clamped

1534
01:23:07,850 --> 01:23:16,100
to 0 right and i guess in this case the

1535
01:23:13,399 --> 01:23:20,149
same is true so maybe that was a little

1536
01:23:16,100 --> 01:23:26,780
premature we really only need one check

1537
01:23:20,149 --> 01:23:29,210
here right so in here we just need to

1538
01:23:26,779 --> 01:23:35,000
make sure this doesn't exceed initial Y

1539
01:23:29,210 --> 01:23:39,829
right so it's more like stop Y is right

1540
01:23:35,000 --> 01:23:41,869
we want to make sure that we are the the

1541
01:23:39,829 --> 01:23:46,969
the D voxel Y is negative so this is

1542
01:23:41,869 --> 01:23:49,519
going to be positive right so so this

1543
01:23:46,969 --> 01:23:53,899
value we really just want to set it to

1544
01:23:49,520 --> 01:24:00,409
the minimum of these two right I believe

1545
01:23:53,899 --> 01:24:08,210
and then here we want to set it to the

1546
01:24:00,408 --> 01:24:10,539
maximum of these two maybe I'll do it

1547
01:24:08,210 --> 01:24:10,539
this way

1548
01:24:14,829 --> 01:24:22,609
so I think that's more correct now cuz

1549
01:24:20,149 --> 01:24:24,229
you're basically saying look I know that

1550
01:24:22,609 --> 01:24:25,849
this could be arbitrarily large and it

1551
01:24:24,229 --> 01:24:28,039
might be so large that it spans the

1552
01:24:25,850 --> 01:24:29,900
entire buffer and at that point we want

1553
01:24:28,039 --> 01:24:31,489
the stop and the initial to be equal to

1554
01:24:29,899 --> 01:24:34,429
each other so that we don't enter the

1555
01:24:31,489 --> 01:24:36,529
loop right so we just needed a bounds

1556
01:24:34,430 --> 01:24:41,750
check there and I think that's what we

1557
01:24:36,529 --> 01:24:42,979
want to do for each of these guys so

1558
01:24:41,750 --> 01:24:46,640
that each of them is going to be like

1559
01:24:42,979 --> 01:24:52,479
okay we've gots you know this one is

1560
01:24:46,640 --> 01:24:52,480
minimum initial X and this one is

1561
01:24:52,630 --> 01:25:07,550
maximum initial X and then minimum

1562
01:25:00,289 --> 01:25:11,899
initial Z maximum initial Z and so those

1563
01:25:07,550 --> 01:25:13,730
values have to be checked there and I

1564
01:25:11,899 --> 01:25:16,939
think that's what we need let me hop

1565
01:25:13,729 --> 01:25:19,489
around a little bit and see if that

1566
01:25:16,939 --> 01:25:21,229
addresses that but I think I've

1567
01:25:19,489 --> 01:25:22,789
interpreted that loop correctly and and

1568
01:25:21,229 --> 01:25:25,519
that's what we would need there so when

1569
01:25:22,789 --> 01:25:28,069
you actually go into an area that's like

1570
01:25:25,520 --> 01:25:30,550
large enough you would get that problem

1571
01:25:28,069 --> 01:25:30,549
right

1572
01:25:44,500 --> 01:25:49,550
all right so I'm glad we got that out of

1573
01:25:48,170 --> 01:25:51,109
the way and again that's exactly the

1574
01:25:49,550 --> 01:25:53,000
kind of errors I was talking about I was

1575
01:25:51,109 --> 01:25:54,529
like I want to add enough checks that we

1576
01:25:53,000 --> 01:25:56,359
start to catch errors that I don't even

1577
01:25:54,529 --> 01:25:58,699
know are there right and that's exactly

1578
01:25:56,359 --> 01:26:01,699
what that just did so whenever you're

1579
01:25:58,699 --> 01:26:05,960
doing kind of this relatively finicky

1580
01:26:01,699 --> 01:26:08,599
stuff sometimes it behooves you to be

1581
01:26:05,960 --> 01:26:11,779
paranoid and to put in a bunch of bounds

1582
01:26:08,600 --> 01:26:13,310
checking because you're not gonna

1583
01:26:11,779 --> 01:26:17,149
necessarily see all the errors but they

1584
01:26:13,310 --> 01:26:18,980
might be there right ok so now if I want

1585
01:26:17,149 --> 01:26:20,929
to go back to what I was doing before

1586
01:26:18,979 --> 01:26:25,729
where I want to draw where the actual

1587
01:26:20,930 --> 01:26:29,539
voxel is so in end lighting OOP sorry in

1588
01:26:25,729 --> 01:26:31,729
begin lighting actually I want to take a

1589
01:26:29,539 --> 01:26:32,449
look at this outline so if I'm running

1590
01:26:31,729 --> 01:26:35,659
oops

1591
01:26:32,449 --> 01:26:40,340
I didn't mean to attach the process

1592
01:26:35,659 --> 01:26:43,279
there so if I'm running no I don't want

1593
01:26:40,340 --> 01:26:48,829
to be on the title screen if I'm running

1594
01:26:43,279 --> 01:26:52,369
the game and looking at sort of the

1595
01:26:48,829 --> 01:26:58,000
bounds here that's the wow that's the

1596
01:26:52,369 --> 01:27:02,149
lighting voxel all right that's a pretty

1597
01:26:58,000 --> 01:27:10,430
large span and not particularly tight to

1598
01:27:02,149 --> 01:27:12,859
the camera but ok all right so if that's

1599
01:27:10,430 --> 01:27:15,920
weld I mean that's fine for now I guess

1600
01:27:12,859 --> 01:27:18,679
so I guess I don't care so we can leave

1601
01:27:15,920 --> 01:27:22,789
that be so let's go ahead and re-enable

1602
01:27:18,680 --> 01:27:24,350
then and let's look for more bugs so

1603
01:27:22,789 --> 01:27:25,789
that's fine for now we want to do better

1604
01:27:24,350 --> 01:27:27,410
than that in the future but that's

1605
01:27:25,789 --> 01:27:31,430
beside the point realized we had already

1606
01:27:27,409 --> 01:27:32,899
had it centering that way ok so let me

1607
01:27:31,430 --> 01:27:34,070
just double check our lighting

1608
01:27:32,899 --> 01:27:36,319
distribution here I'm going to turn the

1609
01:27:34,069 --> 01:27:39,349
lighting back on here although we're not

1610
01:27:36,319 --> 01:27:41,269
going to render with it yet and I just

1611
01:27:39,350 --> 01:27:44,360
want to look at what's going on in the

1612
01:27:41,270 --> 01:27:47,690
work distribution where we're setting

1613
01:27:44,359 --> 01:27:49,399
the work index here for voxel X light

1614
01:27:47,689 --> 01:27:52,849
look up Fox at him so that's all correct

1615
01:27:49,399 --> 01:27:55,299
looks like so we'll go ahead and run and

1616
01:27:52,850 --> 01:27:55,300
see where we're at

1617
01:27:57,310 --> 01:28:02,450
and now we're looking for bugs again so

1618
01:28:00,260 --> 01:28:05,780
we're looking to get rid of the access

1619
01:28:02,449 --> 01:28:11,000
our bugs and we believe at least we have

1620
01:28:05,779 --> 01:28:14,179
some more of those all right so they're

1621
01:28:11,000 --> 01:28:17,649
not triggering in debug mode let's try

1622
01:28:14,180 --> 01:28:17,650
to get them triggering in release mode

1623
01:28:27,069 --> 01:28:40,009
so looks like we can trigger one in

1624
01:28:29,659 --> 01:28:45,859
release mode again so is this random or

1625
01:28:40,010 --> 01:28:49,250
specific it seems pretty reproducible so

1626
01:28:45,859 --> 01:28:52,099
that's good so we believe we have a bug

1627
01:28:49,250 --> 01:28:55,460
in here you know inside where we're

1628
01:28:52,100 --> 01:28:57,020
actually accessing and and this is not

1629
01:28:55,460 --> 01:28:59,270
any kind of a special move so this is

1630
01:28:57,020 --> 01:29:02,060
just us like accessing memory improperly

1631
01:28:59,270 --> 01:29:04,010
or something and so we want to take a

1632
01:29:02,060 --> 01:29:05,690
look at this routine and what I would

1633
01:29:04,010 --> 01:29:06,500
like to do is just get rid of it

1634
01:29:05,689 --> 01:29:09,049
temporarily

1635
01:29:06,500 --> 01:29:11,060
so let's verify that we actually think

1636
01:29:09,050 --> 01:29:13,250
we have a bug there in that code

1637
01:29:11,060 --> 01:29:16,880
specifically and see if everything runs

1638
01:29:13,250 --> 01:29:18,199
fine with with that code out and then

1639
01:29:16,880 --> 01:29:24,029
we'll start to look at putting that code

1640
01:29:18,199 --> 01:29:28,679
in right and and and we'll go from there

1641
01:29:24,029 --> 01:29:34,828
Oh computation work lighting where's the

1642
01:29:28,679 --> 01:29:36,389
where's that you know what the problem

1643
01:29:34,828 --> 01:29:37,948
is it's in one of those macros and I

1644
01:29:36,389 --> 01:29:40,020
don't have any way of searching for

1645
01:29:37,948 --> 01:29:43,678
those macros it's in one of those work

1646
01:29:40,020 --> 01:29:45,000
callbacks right someday I have to figure

1647
01:29:43,679 --> 01:29:47,489
out how I don't even know how you would

1648
01:29:45,000 --> 01:29:50,010
do that but if you I guess you just look

1649
01:29:47,488 --> 01:29:51,689
use internal as a cheat but this problem

1650
01:29:50,010 --> 01:29:54,989
is you can't tell what this is it's a

1651
01:29:51,689 --> 01:29:57,319
macro when the editor is like searching

1652
01:29:54,988 --> 01:29:59,609
for it long story but doesn't matter

1653
01:29:57,319 --> 01:30:00,479
anyway so in here we're we're actually

1654
01:29:59,609 --> 01:30:03,899
doing this

1655
01:30:00,479 --> 01:30:07,919
smackdown I'm gonna go ahead and just

1656
01:30:03,899 --> 01:30:10,439
get rid of it and let this run and see

1657
01:30:07,920 --> 01:30:15,599
if we still get crashes elsewhere and

1658
01:30:10,439 --> 01:30:19,288
then I'm gonna put it back in okay so

1659
01:30:15,599 --> 01:30:22,429
basically if we just have only the spec

1660
01:30:19,288 --> 01:30:28,529
map which you can see on the right side

1661
01:30:22,429 --> 01:30:30,270
we're not getting that crash right and

1662
01:30:28,529 --> 01:30:32,639
you can see the specular lighting over

1663
01:30:30,270 --> 01:30:35,460
on the side there right specular bounce

1664
01:30:32,639 --> 01:30:37,020
lighting and it actually looks fine I

1665
01:30:35,460 --> 01:30:40,649
mean I don't know if it's right or wrong

1666
01:30:37,020 --> 01:30:42,840
but if you know there's no obvious

1667
01:30:40,649 --> 01:30:46,368
errors it looks like what a bunch of

1668
01:30:42,840 --> 01:30:48,569
specular bounce would look like right so

1669
01:30:46,368 --> 01:30:51,238
you know it doesn't look obviously

1670
01:30:48,569 --> 01:30:53,389
stupid it might be but just doesn't you

1671
01:30:51,238 --> 01:30:58,709
can't obviously tell it's wrong

1672
01:30:53,389 --> 01:31:01,859
all right so in our diffuse blur this is

1673
01:30:58,710 --> 01:31:03,270
where looks like it's having trouble so

1674
01:31:01,859 --> 01:31:06,750
let's take a look at what this is

1675
01:31:03,270 --> 01:31:09,119
actually doing and see if we can make

1676
01:31:06,750 --> 01:31:12,059
some sense of it all so one thing I

1677
01:31:09,118 --> 01:31:14,578
would note is at this point one thing I

1678
01:31:12,059 --> 01:31:18,119
might also want to do is this light

1679
01:31:14,578 --> 01:31:21,840
Atlas offset might now now want to go

1680
01:31:18,118 --> 01:31:26,729
away so if I look at all the places that

1681
01:31:21,840 --> 01:31:30,929
were using it and you can see like this

1682
01:31:26,729 --> 01:31:32,939
is the complete list so one of them is

1683
01:31:30,929 --> 01:31:36,690
here and that's where it should go now I

1684
01:31:32,939 --> 01:31:37,708
think and then there's these and so I

1685
01:31:36,689 --> 01:31:40,848
don't

1686
01:31:37,708 --> 01:31:42,748
necessarily want these in here

1687
01:31:40,849 --> 01:31:46,110
fortunately I think that's the only

1688
01:31:42,748 --> 01:31:49,438
place that it is so I'm okay with that

1689
01:31:46,109 --> 01:31:50,908
for the immediate moment but you can

1690
01:31:49,439 --> 01:31:52,619
kind of see that like this should

1691
01:31:50,908 --> 01:31:56,009
probably go away and and work through

1692
01:31:52,618 --> 01:31:58,558
those tile accessors now just so we can

1693
01:31:56,010 --> 01:31:59,519
track them more carefully so I just

1694
01:31:58,559 --> 01:32:03,360
wanted to make sure that that was the

1695
01:31:59,519 --> 01:32:04,860
only place and it is that's okay so now

1696
01:32:03,359 --> 01:32:06,799
if we come back here and look at this we

1697
01:32:04,859 --> 01:32:10,529
got to figure out what we're doing here

1698
01:32:06,800 --> 01:32:12,449
we're accessing a diffuse tile here and

1699
01:32:10,529 --> 01:32:15,090
we go and get a diffuse textile out of

1700
01:32:12,448 --> 01:32:18,779
that tile using a particular access or

1701
01:32:15,090 --> 01:32:22,288
we then take a look at it as if it's a

1702
01:32:18,779 --> 01:32:27,208
three-wide so what we're doing here is

1703
01:32:22,288 --> 01:32:30,630
just just doing computing three of the

1704
01:32:27,208 --> 01:32:34,438
diffuse computing four of the diffuse

1705
01:32:30,630 --> 01:32:36,659
blends at once just to make the math

1706
01:32:34,439 --> 01:32:37,889
faster by taking advantage of a wide

1707
01:32:36,658 --> 01:32:41,670
factor that's all we're trying to do

1708
01:32:37,889 --> 01:32:44,909
here so this is figuring out how many of

1709
01:32:41,670 --> 01:32:46,319
those we have and so it's however like

1710
01:32:44,908 --> 01:32:51,748
this would be ten minus two divided by

1711
01:32:46,319 --> 01:32:53,188
four or two right sets of four we're

1712
01:32:51,748 --> 01:32:55,708
loading out of the diffuse weight map

1713
01:32:53,189 --> 01:32:57,949
which we have not worked on so this is

1714
01:32:55,708 --> 01:33:00,389
kind of a garbage thing at this point

1715
01:32:57,948 --> 01:33:03,448
but it should be wide enough to store

1716
01:33:00,389 --> 01:33:06,090
the information we actually need because

1717
01:33:03,448 --> 01:33:13,609
we made it like oversized so presumably

1718
01:33:06,090 --> 01:33:13,610
this will be fine make sure that's true

1719
01:33:14,448 --> 01:33:19,619
yep

1720
01:33:16,560 --> 01:33:21,960
and then inside here where we're looping

1721
01:33:19,619 --> 01:33:25,739
over the spec Atlas again we're just

1722
01:33:21,960 --> 01:33:28,590
looping over the sys X for that and for

1723
01:33:25,739 --> 01:33:31,050
each one of these were just accessing it

1724
01:33:28,590 --> 01:33:33,360
so inside the Select axis we get this

1725
01:33:31,050 --> 01:33:36,570
out and off we go

1726
01:33:33,359 --> 01:33:39,569
right so in theory that should be fine

1727
01:33:36,569 --> 01:33:41,429
because it's just using the standard

1728
01:33:39,569 --> 01:33:48,329
offsets and we're looping over literally

1729
01:33:41,430 --> 01:33:49,710
just the specular values there so yeah

1730
01:33:48,329 --> 01:33:53,130
unless we're loading out of the weights

1731
01:33:49,710 --> 01:33:54,390
wrong or something how big is the

1732
01:33:53,130 --> 01:33:56,670
diffuse from a 6-minute yeah so we

1733
01:33:54,390 --> 01:34:01,410
shouldn't be able do that either I mean

1734
01:33:56,670 --> 01:34:04,890
it looks fine to me I'm not I'm not

1735
01:34:01,409 --> 01:34:07,229
seeing anything stupid there right

1736
01:34:04,890 --> 01:34:24,840
we unsold the results and then we go to

1737
01:34:07,229 --> 01:34:26,250
store them and when we store them I mean

1738
01:34:24,840 --> 01:34:29,090
we're not doing anything interesting

1739
01:34:26,250 --> 01:34:29,090
there either

1740
01:34:32,329 --> 01:34:48,000
so to be honest I'm not really seeing

1741
01:34:35,310 --> 01:34:57,180
the bug ohyou nothing's jumping out at

1742
01:34:48,000 --> 01:34:59,880
me so here's the first thing I'll do I I

1743
01:34:57,180 --> 01:35:03,560
will just take a minute to see what

1744
01:34:59,880 --> 01:35:06,060
happens if we nerf some of these stores

1745
01:35:03,560 --> 01:35:09,270
now the problem with doing this is the

1746
01:35:06,060 --> 01:35:13,470
optimizer may remove the entire loop if

1747
01:35:09,270 --> 01:35:17,250
we don't store so that's a little bit of

1748
01:35:13,470 --> 01:35:20,400
an issue I will just check to see if it

1749
01:35:17,250 --> 01:35:23,220
did that or not by quickly going to the

1750
01:35:20,399 --> 01:35:25,879
disassembly and just looking at what

1751
01:35:23,220 --> 01:35:25,880
it's doing so

1752
01:35:28,359 --> 01:35:38,229
I mean it sure looks like it's doing the

1753
01:35:36,609 --> 01:35:43,899
transpose like it's got a bunch of chef

1754
01:35:38,229 --> 01:35:46,118
PS is in there right so I think it's

1755
01:35:43,899 --> 01:35:48,879
still generating the loop even though

1756
01:35:46,118 --> 01:35:52,679
it's not using the values from it yeah

1757
01:35:48,880 --> 01:35:54,779
it is so if we just run this loop

1758
01:35:52,680 --> 01:35:57,340
[Music]

1759
01:35:54,779 --> 01:36:05,408
although it's probably not loading this

1760
01:35:57,340 --> 01:36:08,440
well it is it's gonna transpose it so I

1761
01:36:05,408 --> 01:36:11,799
think it's just this part that's wrong

1762
01:36:08,439 --> 01:36:16,689
let's check I mean let's see what we can

1763
01:36:11,800 --> 01:36:19,150
see here if in here I was in the desc

1764
01:36:16,689 --> 01:36:22,658
see value where we are getting this

1765
01:36:19,149 --> 01:36:29,069
offset out of here if I was to do

1766
01:36:22,658 --> 01:36:32,408
something Oh duh that was pretty much it

1767
01:36:29,069 --> 01:36:34,439
that was just a bad address we were we

1768
01:36:32,408 --> 01:36:37,329
were actually targeting this particular

1769
01:36:34,439 --> 01:36:38,589
pointer rather than using the pointer to

1770
01:36:37,329 --> 01:36:52,000
point at something so I think that was

1771
01:36:38,590 --> 01:36:54,789
all that was alright so I mean seems

1772
01:36:52,000 --> 01:36:56,859
plausible what I'm looking at now this

1773
01:36:54,789 --> 01:37:01,269
should actually be using the diffuse

1774
01:36:56,859 --> 01:37:04,839
bounce lighting for propagation now so

1775
01:37:01,270 --> 01:37:07,449
that's good if we actually enable the

1776
01:37:04,840 --> 01:37:12,520
lighting in the Z bias program we can

1777
01:37:07,448 --> 01:37:13,899
look at what it looks like so I'll just

1778
01:37:12,520 --> 01:37:15,369
turn that on real quick I don't know why

1779
01:37:13,899 --> 01:37:17,888
I stopped the program I guess that would

1780
01:37:15,368 --> 01:37:21,089
a hot loaded just fine but we don't

1781
01:37:17,889 --> 01:37:26,319
really care I mean it's not a big deal

1782
01:37:21,090 --> 01:37:27,610
so if now we look at what we've got you

1783
01:37:26,319 --> 01:37:29,948
know you can see that the light

1784
01:37:27,609 --> 01:37:31,839
propagates a lot more which is what it's

1785
01:37:29,948 --> 01:37:34,769
supposed to do because now we're

1786
01:37:31,840 --> 01:37:38,110
actually looking at the diffuse lighting

1787
01:37:34,770 --> 01:37:39,489
correctly and so like outdoors right it

1788
01:37:38,109 --> 01:37:41,649
doesn't have anything to bounce off of

1789
01:37:39,488 --> 01:37:42,279
these treat like at the moment we don't

1790
01:37:41,649 --> 01:37:44,769
put in

1791
01:37:42,279 --> 01:37:47,590
ders for these trees we should but

1792
01:37:44,770 --> 01:37:51,190
that's a world Jen thing not a that's

1793
01:37:47,590 --> 01:37:54,670
nothing to do with the with the lighting

1794
01:37:51,189 --> 01:37:56,319
stuff right but hopefully you can see

1795
01:37:54,670 --> 01:37:58,750
now yes oh the bounce letting it fills

1796
01:37:56,319 --> 01:38:01,329
up the space a lot more with light right

1797
01:37:58,750 --> 01:38:02,529
which is what it's supposed to do and

1798
01:38:01,329 --> 01:38:04,840
maybe those lights are a little bit

1799
01:38:02,529 --> 01:38:07,779
bright like you know you can see that

1800
01:38:04,840 --> 01:38:09,610
they're getting fully bounced around but

1801
01:38:07,779 --> 01:38:12,219
a lot of that is just because we're not

1802
01:38:09,609 --> 01:38:13,420
taking into we're not taking any light

1803
01:38:12,220 --> 01:38:20,949
out on the bounce

1804
01:38:13,420 --> 01:38:24,340
so like when we go over to the the the

1805
01:38:20,949 --> 01:38:27,069
irradiance computation so here we're not

1806
01:38:24,340 --> 01:38:29,170
actually modulating this bounce

1807
01:38:27,069 --> 01:38:30,909
we're just saying here's the actual

1808
01:38:29,170 --> 01:38:34,270
color that the full color that was

1809
01:38:30,909 --> 01:38:36,519
sampled at this point so we probably

1810
01:38:34,270 --> 01:38:38,350
want to be doing here where we look at

1811
01:38:36,520 --> 01:38:41,050
this value as we've got the sample P

1812
01:38:38,350 --> 01:38:52,690
sample N and so when we do get voxel

1813
01:38:41,050 --> 01:38:55,119
irradiance at why are we not o compute

1814
01:38:52,689 --> 01:38:57,399
voxels so we're looking at compute voxel

1815
01:38:55,119 --> 01:39:00,369
irradiance at there what we don't have

1816
01:38:57,399 --> 01:39:05,589
the sample ref color here are we

1817
01:39:00,369 --> 01:39:08,140
actually using that oh we are we are

1818
01:39:05,590 --> 01:39:11,789
using a sample ref color so are those

1819
01:39:08,140 --> 01:39:11,789
sample ref colors set properly

1820
01:39:14,039 --> 01:39:17,579
would be my next question

1821
01:39:18,779 --> 01:39:26,229
as you can see there's just way too much

1822
01:39:20,979 --> 01:39:27,819
light coming in here like all the light

1823
01:39:26,229 --> 01:39:30,449
is bouncing around infinitely which is

1824
01:39:27,819 --> 01:39:30,449
not what we want

1825
01:39:40,880 --> 01:39:47,210
so let me just see what happens if we

1826
01:39:43,469 --> 01:39:47,210
have some bounce degradation

1827
01:39:58,630 --> 01:40:06,260
still looks like way too much

1828
01:40:00,590 --> 01:40:08,060
transmission so that seems like maybe

1829
01:40:06,260 --> 01:40:09,800
we've just got some bugginess there of

1830
01:40:08,060 --> 01:40:16,580
course we also aren't doing the bounce

1831
01:40:09,800 --> 01:40:19,960
which is sort of a separate issue but so

1832
01:40:16,579 --> 01:40:19,960
here's with lower transmission

1833
01:40:39,000 --> 01:40:49,899
that's interesting so is this where we

1834
01:40:42,699 --> 01:40:53,470
crash in there oh just in the debug data

1835
01:40:49,899 --> 01:40:55,149
nevermind so I'm not sure this is

1836
01:40:53,470 --> 01:40:56,560
probably a point where I should stop for

1837
01:40:55,149 --> 01:40:59,769
today because we're pretty much at the

1838
01:40:56,560 --> 01:41:01,420
end but alright so we're you know we're

1839
01:40:59,770 --> 01:41:04,300
getting closer we're not really there

1840
01:41:01,420 --> 01:41:05,710
yet but we're getting closer and now we

1841
01:41:04,300 --> 01:41:07,390
can bounce our light around much better

1842
01:41:05,710 --> 01:41:08,680
and we're not actually doing the bounce

1843
01:41:07,390 --> 01:41:12,720
like I mean the actual bounce

1844
01:41:08,680 --> 01:41:18,490
computation right in here should be

1845
01:41:12,720 --> 01:41:20,800
should do this so when we do when we hit

1846
01:41:18,489 --> 01:41:24,479
this surface we've got the normal we

1847
01:41:20,800 --> 01:41:27,550
want to bounce off and sample what the

1848
01:41:24,479 --> 01:41:29,049
incident lighting would be right and so

1849
01:41:27,550 --> 01:41:34,060
I guess the only thing I'm not sure

1850
01:41:29,050 --> 01:41:35,500
about is well no you know I think that's

1851
01:41:34,060 --> 01:41:37,600
not true because we're just sampling

1852
01:41:35,500 --> 01:41:39,579
diffused so as long as we do a sample

1853
01:41:37,600 --> 01:41:42,840
and here we should be good so actually

1854
01:41:39,579 --> 01:41:42,840
this is all none of this is necessary

1855
01:41:46,649 --> 01:41:49,359
yeah that's that's just that's that's

1856
01:41:48,729 --> 01:41:51,759
not true

1857
01:41:49,359 --> 01:41:53,439
so all we should that should be it if we

1858
01:41:51,760 --> 01:41:54,730
should be able to sample that in because

1859
01:41:53,439 --> 01:42:00,639
that's to some of the diffuse light in

1860
01:41:54,729 --> 01:42:02,619
that direction right so the the outgoing

1861
01:42:00,640 --> 01:42:09,280
should just be the sample end I think

1862
01:42:02,619 --> 01:42:11,800
and then we you know then we multiply it

1863
01:42:09,279 --> 01:42:12,880
so I don't know what sample Ref why it

1864
01:42:11,800 --> 01:42:15,100
seems like we're getting too much

1865
01:42:12,880 --> 01:42:17,650
buildup of light which is not what I

1866
01:42:15,100 --> 01:42:20,320
would have expected but that seems to be

1867
01:42:17,649 --> 01:42:21,519
what's happening and I don't know if

1868
01:42:20,319 --> 01:42:24,039
that's just because of the way the

1869
01:42:21,520 --> 01:42:26,440
diffuse sum is working out we've got

1870
01:42:24,039 --> 01:42:27,909
like a bug in there where you know it

1871
01:42:26,439 --> 01:42:30,039
should be knocked down by some constant

1872
01:42:27,909 --> 01:42:32,409
value where there's an integral and

1873
01:42:30,039 --> 01:42:34,210
we're missing the light constant term so

1874
01:42:32,409 --> 01:42:36,550
it could be that like these things here

1875
01:42:34,210 --> 01:42:38,260
are wrong you know what I mean it could

1876
01:42:36,550 --> 01:42:41,920
be that like you know this is supposed

1877
01:42:38,260 --> 01:42:44,560
to be that right or that and it could be

1878
01:42:41,920 --> 01:42:47,279
like that's what's actually causing our

1879
01:42:44,560 --> 01:42:50,280
problem and you know I have no idea

1880
01:42:47,279 --> 01:42:50,279
right

1881
01:42:54,828 --> 01:42:59,518
so it's really hard to say so I think

1882
01:42:57,389 --> 01:43:00,328
this about we have to go work on this

1883
01:42:59,519 --> 01:43:02,670
stuff

1884
01:43:00,328 --> 01:43:05,908
more so like for example if we've stuck

1885
01:43:02,670 --> 01:43:08,269
a fudge value in here just curious what

1886
01:43:05,908 --> 01:43:08,268
happens

1887
01:43:24,600 --> 01:43:28,739
where are we getting these bugs from

1888
01:43:34,368 --> 01:43:42,679
just our debug record stuff is our debug

1889
01:43:37,248 --> 01:43:44,389
record stuff needs work we tried to get

1890
01:43:42,679 --> 01:43:48,368
too fancy with it and it didn't pay off

1891
01:43:44,389 --> 01:43:48,368
it just creates headaches really

1892
01:44:03,159 --> 01:44:08,689
just empirically looking at what this

1893
01:44:05,569 --> 01:44:11,599
value would be just so we can see where

1894
01:44:08,689 --> 01:44:13,339
our actual bug like what our bug level

1895
01:44:11,600 --> 01:44:15,700
like where the bug actually is sort of

1896
01:44:13,340 --> 01:44:15,699
more or less

1897
01:44:33,880 --> 01:44:40,369
so I mean looking at it I would say like

1898
01:44:36,529 --> 01:44:42,139
that looks kind of more correct in terms

1899
01:44:40,369 --> 01:44:44,409
of like what you would want the answer

1900
01:44:42,140 --> 01:44:44,410
to be

1901
01:45:13,369 --> 01:45:19,519
so it's a little bit hard to say but

1902
01:45:17,810 --> 01:45:21,730
that seems more like roughly where it

1903
01:45:19,520 --> 01:45:21,730
should be

1904
01:46:02,619 --> 01:46:09,220
all right so I think unfortunately the

1905
01:46:06,880 --> 01:46:11,319
next thing we would have to do is go

1906
01:46:09,220 --> 01:46:13,329
through and actually tighten down the

1907
01:46:11,319 --> 01:46:14,259
lighting equations which is always a

1908
01:46:13,329 --> 01:46:16,659
little bit difficult for me because I

1909
01:46:14,260 --> 01:46:18,280
don't work with them very often like I'm

1910
01:46:16,659 --> 01:46:20,050
very comfortable with camera stuff and

1911
01:46:18,279 --> 01:46:22,569
lens stuff and I'm very uncomfortable

1912
01:46:20,050 --> 01:46:24,039
with lighting stuff which just because

1913
01:46:22,569 --> 01:46:28,409
it's just not something I work on very

1914
01:46:24,039 --> 01:46:31,750
often and so like figuring out exactly

1915
01:46:28,409 --> 01:46:36,550
what the values are and how to keep them

1916
01:46:31,750 --> 01:46:39,970
to unbiased so they stay you know within

1917
01:46:36,550 --> 01:46:42,010
a range that is mathematically

1918
01:46:39,970 --> 01:46:45,699
determined rather I mean because we can

1919
01:46:42,010 --> 01:46:47,770
go in and add fudge values like this to

1920
01:46:45,699 --> 01:46:50,800
make it work right but I don't really

1921
01:46:47,770 --> 01:46:52,930
want to I want to know what the actual

1922
01:46:50,800 --> 01:46:55,409
equations are and that they're roughly

1923
01:46:52,930 --> 01:46:59,200
correct and what's interesting is like

1924
01:46:55,409 --> 01:47:02,139
not sure where this value is coming from

1925
01:46:59,199 --> 01:47:04,269
but it's very close to one which means

1926
01:47:02,140 --> 01:47:06,700
the amount of fudging that we actually

1927
01:47:04,270 --> 01:47:10,060
need to do to keep the lighting stable

1928
01:47:06,699 --> 01:47:12,159
is quite low so I'm not sure if we just

1929
01:47:10,060 --> 01:47:15,400
have some stupid thing we're doing that

1930
01:47:12,159 --> 01:47:17,859
I'm just not thinking of that's actually

1931
01:47:15,399 --> 01:47:22,089
like the only problem or something but I

1932
01:47:17,859 --> 01:47:27,939
mean it's like shockingly low amount of

1933
01:47:22,090 --> 01:47:34,329
fudge to keep it stable so I don't know

1934
01:47:27,939 --> 01:47:37,000
I mean is it just like a rounding error

1935
01:47:34,329 --> 01:47:39,279
kind of thing I doubt that so I do want

1936
01:47:37,000 --> 01:47:40,960
to look at it more carefully where is

1937
01:47:39,279 --> 01:47:48,149
the actual explosion point nine point

1938
01:47:40,960 --> 01:47:48,149
five five point nine five or what

1939
01:47:52,630 --> 01:48:00,340
I mean right it's it's crazy that that's

1940
01:47:55,569 --> 01:48:07,439
the fudge value that's so close to one

1941
01:48:00,340 --> 01:48:07,440
that also makes me confused about like

1942
01:48:27,529 --> 01:48:33,460
because that still looks right to me

1943
01:48:30,189 --> 01:48:38,000
especially if we added some you know

1944
01:48:33,460 --> 01:48:40,579
exposure control in there so that the

1945
01:48:38,000 --> 01:48:43,060
brights weren't quite so bright you know

1946
01:48:40,579 --> 01:48:43,059
I'm Santi

1947
01:48:56,539 --> 01:49:01,859
real weird so basically as far as I can

1948
01:48:59,488 --> 01:49:04,229
tell as long as you take any energy out

1949
01:49:01,859 --> 01:49:08,009
of the system whatsoever like as long as

1950
01:49:04,229 --> 01:49:14,569
you don't use literally one the system

1951
01:49:08,010 --> 01:49:18,710
seems stable or am I wrong about that

1952
01:49:14,569 --> 01:49:23,009
but like at one it appears to be

1953
01:49:18,710 --> 01:49:25,380
unstable maybe it's not unstable maybe

1954
01:49:23,010 --> 01:49:29,060
that's a lie and it's totally stable at

1955
01:49:25,380 --> 01:49:35,460
one and I just need to exposure mapping

1956
01:49:29,060 --> 01:49:38,719
and that's the case I'm pretty happy but

1957
01:49:35,460 --> 01:49:38,719
let's leave it here and we'll see

1958
01:49:53,720 --> 01:49:58,970
alright let's go ahead and do Q&amp;A for

1959
01:49:56,609 --> 01:49:58,969
the moment

1960
01:50:29,988 --> 01:50:33,359
what's the cause of the flickering in

1961
01:50:32,039 --> 01:50:35,488
the lighting will you do some denoising

1962
01:50:33,359 --> 01:50:37,589
or cast my Raiders or to try to fix it

1963
01:50:35,488 --> 01:50:41,218
yet well it's just yeah it's just

1964
01:50:37,590 --> 01:50:43,889
sampling noise no and I probably

1965
01:50:41,219 --> 01:50:45,539
wouldn't I would leave it flickery I

1966
01:50:43,889 --> 01:50:49,250
like the flickery look eventually

1967
01:50:45,539 --> 01:50:52,469
probably make I probably just keep that

1968
01:50:49,250 --> 01:50:54,328
if you want to denoise it then yeah you

1969
01:50:52,469 --> 01:50:56,039
would have to basically do it pass it

1970
01:50:54,328 --> 01:50:59,960
this looks unstable this looks like it's

1971
01:50:56,039 --> 01:50:59,960
continuing to go right so it looks like

1972
01:51:00,649 --> 01:51:23,939
something is you know what's the

1973
01:51:20,158 --> 01:51:27,500
spelling of that that's the worst

1974
01:51:23,939 --> 01:51:27,500
feeling ever empirically

1975
01:51:36,829 --> 01:52:10,689
yeah that's what we're looking for so

1976
01:52:06,439 --> 01:52:10,689
that's some kind of a bug right

1977
01:52:17,319 --> 01:52:21,340
I think it might have flippity xpy in

1978
01:52:19,060 --> 01:52:29,619
tests fear I think we fixed that though

1979
01:52:21,340 --> 01:52:32,310
right because that was flip but wery

1980
01:52:29,618 --> 01:52:32,309
flipped it right

1981
01:52:32,819 --> 01:52:36,969
could it be useful to have it print of

1982
01:52:35,109 --> 01:52:38,589
value like the average textile color of

1983
01:52:36,969 --> 01:52:42,250
the diffuse Center specular maps on the

1984
01:52:38,590 --> 01:52:43,929
screen yeah I mean it could you could

1985
01:52:42,250 --> 01:52:51,340
sum them up and just see what the total

1986
01:52:43,929 --> 01:52:52,658
amount of light is right I'm not sure

1987
01:52:51,340 --> 01:52:56,020
how useful that is because you can kind

1988
01:52:52,658 --> 01:52:59,679
of see that it's happening I mean either

1989
01:52:56,020 --> 01:53:01,270
it explodes or it doesn't so at the

1990
01:52:59,679 --> 01:53:03,250
moment I wouldn't get very much

1991
01:53:01,270 --> 01:53:06,130
information out of that value but it's

1992
01:53:03,250 --> 01:53:07,840
not a bad value to print are using a

1993
01:53:06,130 --> 01:53:10,690
different level of assert for release

1994
01:53:07,840 --> 01:53:12,130
build no actually I'm not so if you want

1995
01:53:10,689 --> 01:53:15,549
the full speed build

1996
01:53:12,130 --> 01:53:19,659
you actually would need to go like turn

1997
01:53:15,550 --> 01:53:21,880
off like this stuff right which are

1998
01:53:19,658 --> 01:53:28,899
other things like insertions that slow

1999
01:53:21,880 --> 01:53:31,868
down the code and looks like timed

2000
01:53:28,899 --> 01:53:34,799
function it looks like we're not

2001
01:53:31,868 --> 01:53:34,799
properly undef

2002
01:53:45,460 --> 01:54:01,850
so I guess so handmade internal is

2003
01:53:59,109 --> 01:54:14,509
clamping out all of this which is a

2004
01:54:01,850 --> 01:54:18,079
mistake it looks like right so the

2005
01:54:14,510 --> 01:54:22,670
problem is like this stuff for handmade

2006
01:54:18,079 --> 01:54:25,489
slow if you undefined both of them it

2007
01:54:22,670 --> 01:54:33,130
looks like these are not included in

2008
01:54:25,489 --> 01:54:33,130
that right so that seems like an issue

2009
01:54:39,300 --> 01:54:48,480
I'm not sure what we would do about that

2010
01:54:41,729 --> 01:54:54,569
so I guess the best thing to do would be

2011
01:54:48,479 --> 01:55:00,209
to say well if this all has to be inside

2012
01:54:54,569 --> 01:55:02,279
internal anyway yeah I don't know what

2013
01:55:00,210 --> 01:55:04,850
to make of that it looks like we were

2014
01:55:02,279 --> 01:55:11,670
trying to make it so that that would be

2015
01:55:04,850 --> 01:55:14,610
a separate thing we could access and I'm

2016
01:55:11,670 --> 01:55:16,859
not sure what the easiest way to prevent

2017
01:55:14,609 --> 01:55:24,929
that problem would be I guess you would

2018
01:55:16,859 --> 01:55:27,329
do something like this so this is

2019
01:55:24,930 --> 01:55:30,630
running with none of the stuff enabled

2020
01:55:27,329 --> 01:55:32,970
right but as you can see like it's not

2021
01:55:30,630 --> 01:55:34,920
like that much faster so that's why I

2022
01:55:32,970 --> 01:55:36,570
don't generally do it because we don't

2023
01:55:34,920 --> 01:55:38,940
get like a huge speed boost from it or

2024
01:55:36,569 --> 01:55:42,359
anything so it's usually not an issue

2025
01:55:38,939 --> 01:55:43,859
like we don't put asserts in like places

2026
01:55:42,359 --> 01:55:47,819
where they're really hugely problematic

2027
01:55:43,859 --> 01:55:50,219
because usually it's pretty simple for

2028
01:55:47,819 --> 01:55:52,769
the compiler to output something where

2029
01:55:50,220 --> 01:55:54,300
the branch is predicted anyway so you

2030
01:55:52,770 --> 01:55:57,540
typically don't gain as much as you

2031
01:55:54,300 --> 01:56:00,420
might think right so we just haven't

2032
01:55:57,539 --> 01:56:04,329
bothered with that particular with that

2033
01:56:00,420 --> 01:56:07,420
particular thing so yeah

2034
01:56:04,329 --> 01:56:07,420
[Music]

2035
01:56:15,239 --> 01:56:18,960
anyway we don't really know the lighting

2036
01:56:17,010 --> 01:56:20,760
probably has tons of broken stuff in it

2037
01:56:18,960 --> 01:56:23,159
now we now need to go through that now

2038
01:56:20,760 --> 01:56:24,449
that we've got the pathway working

2039
01:56:23,159 --> 01:56:26,510
properly we now need to go through and

2040
01:56:24,449 --> 01:56:29,220
actually start to do transmission tests

2041
01:56:26,510 --> 01:56:31,949
and like see if we can actually get the

2042
01:56:29,220 --> 01:56:35,060
lighting correct because that's the next

2043
01:56:31,949 --> 01:56:37,079
step and then finally we would go to

2044
01:56:35,060 --> 01:56:39,260
optimization which is like the final

2045
01:56:37,079 --> 01:56:39,260
thing

2046
01:56:53,069 --> 01:56:59,409
yeah I would agree about DuckDuckGo I've

2047
01:56:57,640 --> 01:57:08,710
been trying it because Google is so bad

2048
01:56:59,409 --> 01:57:10,989
now with the search results I hate this

2049
01:57:08,710 --> 01:57:14,439
it's just so hard to read it's just

2050
01:57:10,989 --> 01:57:16,269
terrible and so I just don't like it

2051
01:57:14,439 --> 01:57:17,799
so I want another search engine

2052
01:57:16,270 --> 01:57:30,940
unfortunately duck tacos search is

2053
01:57:17,800 --> 01:57:34,239
crappy but um how slow are we I don't

2054
01:57:30,939 --> 01:57:35,769
know pretty slow at the moment but it's

2055
01:57:34,239 --> 01:57:36,969
mostly in the raycast if I remember

2056
01:57:35,770 --> 01:57:40,750
correctly so it actually doesn't have

2057
01:57:36,970 --> 01:57:43,060
that much to do with the sampling so you

2058
01:57:40,750 --> 01:57:48,010
can see here that full cast takes up

2059
01:57:43,060 --> 01:57:50,230
most of the frame time but there is a

2060
01:57:48,010 --> 01:57:53,159
part of it here that's the diffuse blur

2061
01:57:50,229 --> 01:57:55,569
so this is the diffuse blur here right

2062
01:57:53,159 --> 01:57:59,500
and this is the Ray casting and

2063
01:57:55,569 --> 01:58:03,750
irradiance sampling amusingly like I was

2064
01:57:59,500 --> 01:58:06,699
surprised to learn that the all of the

2065
01:58:03,750 --> 01:58:08,619
actual irradiance sampling does not

2066
01:58:06,699 --> 01:58:11,050
account for as much time as I would have

2067
01:58:08,619 --> 01:58:14,289
expected when we nerf that out so that

2068
01:58:11,050 --> 01:58:16,239
was weird but basically we're still

2069
01:58:14,289 --> 01:58:18,550
looking at a problem of like hey we can

2070
01:58:16,239 --> 01:58:23,170
this we can probably do something about

2071
01:58:18,550 --> 01:58:26,500
without too much effort so improving the

2072
01:58:23,170 --> 01:58:28,779
speed of the diffuse blur because we can

2073
01:58:26,500 --> 01:58:31,420
cut corners there there's stuff we could

2074
01:58:28,779 --> 01:58:34,329
do there I think that we're not doing

2075
01:58:31,420 --> 01:58:35,859
now so that's probably because we could

2076
01:58:34,329 --> 01:58:38,859
probably do something separable for that

2077
01:58:35,859 --> 01:58:40,509
I wouldn't be surprised if we could and

2078
01:58:38,859 --> 01:58:42,939
cut down that computation pretty

2079
01:58:40,510 --> 01:58:45,310
dramatically so I'm guessing that this

2080
01:58:42,939 --> 01:58:50,289
could be flattened without too much

2081
01:58:45,310 --> 01:58:52,150
trouble the full cast I'm sure we can

2082
01:58:50,289 --> 01:58:53,470
speed up but that's gonna be the more

2083
01:58:52,149 --> 01:58:54,639
complicated thing because then we got to

2084
01:58:53,470 --> 01:58:56,650
start looking at like okay how's the

2085
01:58:54,640 --> 01:58:57,920
spatial partitioning is it you know is

2086
01:58:56,649 --> 01:59:00,149
it working okay

2087
01:58:57,920 --> 01:59:05,670
like we got to be more serious about

2088
01:59:00,149 --> 01:59:10,859
that set of things and so that's gonna

2089
01:59:05,670 --> 01:59:12,180
take more work and I also think it's

2090
01:59:10,859 --> 01:59:14,909
probably getting called too many times

2091
01:59:12,180 --> 01:59:18,920
at the moment so if you look at what's

2092
01:59:14,909 --> 01:59:18,920
going on there you know if we look

2093
01:59:19,220 --> 01:59:26,760
across this distribution what you can

2094
01:59:22,560 --> 01:59:30,150
see is that if I switch to the thread

2095
01:59:26,760 --> 01:59:34,739
view we've got like six worker threads

2096
01:59:30,149 --> 01:59:38,039
working on this thing right and I don't

2097
01:59:34,739 --> 01:59:42,630
know if the main thread counts or not

2098
01:59:38,039 --> 01:59:44,579
but whether it does or it doesn't isn't

2099
01:59:42,630 --> 01:59:46,650
really relevant the point is we've got

2100
01:59:44,579 --> 01:59:52,590
all these threads that are working on

2101
01:59:46,649 --> 01:59:58,949
the that are working on the raycast and

2102
01:59:52,590 --> 02:00:01,470
and mixdown and so the thirty-two here

2103
01:59:58,949 --> 02:00:05,090
is because it's being distributed so

2104
02:00:01,470 --> 02:00:10,380
it's it's basically four cut four times

2105
02:00:05,090 --> 02:00:16,170
per thread each thread is sorry

2106
02:00:10,380 --> 02:00:21,210
that's wrong climb like five well four

2107
02:00:16,170 --> 02:00:23,579
to five per thread working here possibly

2108
02:00:21,210 --> 02:00:25,470
even six doesn't matter point being a

2109
02:00:23,579 --> 02:00:27,239
few times per thread it's gonna do this

2110
02:00:25,470 --> 02:00:28,860
crew and then that the full cast call

2111
02:00:27,239 --> 02:00:31,229
this is for each raycast

2112
02:00:28,859 --> 02:00:33,299
it's getting entered many many times

2113
02:00:31,229 --> 02:00:35,519
here I don't know if that's just too

2114
02:00:33,300 --> 02:00:37,739
much setup this is just a lot of calls

2115
02:00:35,520 --> 02:00:39,540
right I don't know if it's actually

2116
02:00:37,739 --> 02:00:42,389
doing a call if it is that's probably

2117
02:00:39,539 --> 02:00:44,519
bad as well and so these just need to be

2118
02:00:42,390 --> 02:00:46,289
done more efficiently right like we need

2119
02:00:44,520 --> 02:00:48,320
this whole thing to be more efficient

2120
02:00:46,289 --> 02:00:51,239
and at the moment it's not particularly

2121
02:00:48,319 --> 02:00:53,549
but basically what you can see is 90

2122
02:00:51,239 --> 02:00:57,329
plus percent of the time is just in that

2123
02:00:53,550 --> 02:01:00,199
lighting update so we know what the

2124
02:00:57,329 --> 02:01:00,199
problem is right

2125
02:01:04,939 --> 02:01:09,899
is the goal get 30 frames a second debug

2126
02:01:08,099 --> 02:01:17,788
no no the goal is to get 30 frames a

2127
02:01:09,899 --> 02:01:20,070
second in release mode are we faster

2128
02:01:17,788 --> 02:01:22,108
than the previous solution so it's

2129
02:01:20,069 --> 02:01:25,469
really not a question of faster we

2130
02:01:22,109 --> 02:01:28,039
didn't have a previous solution I mean

2131
02:01:25,469 --> 02:01:30,088
that's that's the bottom line right

2132
02:01:28,038 --> 02:01:32,188
because the previous way we were doing

2133
02:01:30,088 --> 02:01:35,908
it we had no way of lighting our sprites

2134
02:01:32,189 --> 02:01:37,409
at all we just didn't have it so this is

2135
02:01:35,908 --> 02:01:39,958
the first time we've really had a way of

2136
02:01:37,408 --> 02:01:43,768
lighting everything instead of just the

2137
02:01:39,958 --> 02:01:45,238
geometry around the world right and so

2138
02:01:43,769 --> 02:01:46,979
this allows us to light our sprites as

2139
02:01:45,238 --> 02:01:49,558
they move through the system which is

2140
02:01:46,979 --> 02:01:52,800
important you know it's one thing I

2141
02:01:49,559 --> 02:01:55,079
would like to know by the way is what

2142
02:01:52,800 --> 02:02:01,519
would happen now if we got rid of any

2143
02:01:55,078 --> 02:02:01,518
mention of the light lookup Fox will dim

2144
02:02:01,840 --> 02:02:05,600
[Music]

2145
02:02:06,078 --> 02:02:12,779
so if we went through here and stopped

2146
02:02:09,029 --> 02:02:14,208
doing this stuff I wonder to what extent

2147
02:02:12,779 --> 02:02:16,768
[Music]

2148
02:02:14,208 --> 02:02:22,368
this thing would work with with now

2149
02:02:16,769 --> 02:02:22,369
asymmetric voxels right so

2150
02:02:35,479 --> 02:02:38,259
hmm

2151
02:02:41,340 --> 02:02:46,150
so it's a little bit of work but it's

2152
02:02:44,079 --> 02:02:47,829
not much so we'll be able to use

2153
02:02:46,149 --> 02:02:49,809
asymmetric voxels - which would be

2154
02:02:47,829 --> 02:02:51,760
pretty handy right because one of the

2155
02:02:49,810 --> 02:02:54,370
things is like if we were to reduce the

2156
02:02:51,760 --> 02:02:56,710
number of voxels we have to deal with

2157
02:02:54,369 --> 02:02:59,349
that gives us a free speed win that

2158
02:02:56,710 --> 02:03:01,090
doesn't evolve any work right so for

2159
02:02:59,350 --> 02:03:04,000
example if we reduce the number of

2160
02:03:01,090 --> 02:03:05,860
voxels like here you can see that we

2161
02:03:04,000 --> 02:03:11,130
still get the lighting and it works just

2162
02:03:05,859 --> 02:03:14,949
fine but now it's much faster right and

2163
02:03:11,130 --> 02:03:15,940
so you know we can definitely do

2164
02:03:14,949 --> 02:03:20,619
something like that

2165
02:03:15,939 --> 02:03:22,000
but we just you know again we just need

2166
02:03:20,619 --> 02:03:25,449
to kind of know what we're doing here

2167
02:03:22,000 --> 02:03:27,609
right and so that's another free speed

2168
02:03:25,449 --> 02:03:29,199
win sort of thing we have and so if we

2169
02:03:27,609 --> 02:03:31,299
just reduce the number of voxels by

2170
02:03:29,199 --> 02:03:33,059
being placing them more accurately and

2171
02:03:31,300 --> 02:03:35,590
maybe reducing the number of Z slices

2172
02:03:33,060 --> 02:03:38,380
that gets us the 30 frames a second

2173
02:03:35,590 --> 02:03:39,940
without doing anything right and again

2174
02:03:38,380 --> 02:03:43,810
that's just because there's a lot less

2175
02:03:39,939 --> 02:03:45,879
of them so you know as we go forwards I

2176
02:03:43,810 --> 02:03:49,680
think we'll be able to do some things

2177
02:03:45,880 --> 02:03:49,680
but the question is just you know

2178
02:04:08,770 --> 02:04:12,410
can you still parameterize the voxel

2179
02:04:11,149 --> 02:04:14,449
size yes you can

2180
02:04:12,409 --> 02:04:17,869
I'm curious if decreasing the voxel size

2181
02:04:14,449 --> 02:04:19,939
will remove some cuban Apsara probably

2182
02:04:17,869 --> 02:04:22,880
other ways we can make there be less

2183
02:04:19,939 --> 02:04:27,829
cube miss for example by doing blending

2184
02:04:22,880 --> 02:04:33,680
that is more fuzzy and less by linear

2185
02:04:27,829 --> 02:04:35,659
for example might help that also just as

2186
02:04:33,680 --> 02:04:38,450
the lighting solution gets better

2187
02:04:35,659 --> 02:04:42,979
they'll be less of that probably fall

2188
02:04:38,449 --> 02:04:44,720
off as well so hard to say for what are

2189
02:04:42,979 --> 02:04:49,750
you still using voxels everything all

2190
02:04:44,720 --> 02:04:49,750
the lighting happens on voxels right now

2191
02:04:51,100 --> 02:04:54,710
and so also it does seem like we can

2192
02:04:53,479 --> 02:04:56,119
probably get rid of our light probes

2193
02:04:54,710 --> 02:04:57,529
which is good like I said I want to pull

2194
02:04:56,119 --> 02:04:59,960
that path out so we probably will get

2195
02:04:57,529 --> 02:05:02,109
rid of them because we don't need them

2196
02:04:59,960 --> 02:05:02,109
now

2197
02:05:27,350 --> 02:05:30,560
no good

2198
02:05:34,630 --> 02:05:42,859
looks like we are good off-topic do you

2199
02:05:41,149 --> 02:05:44,089
see rust replacing see syphilis in the

2200
02:05:42,859 --> 02:05:48,469
game industry in the next five to ten

2201
02:05:44,090 --> 02:05:52,640
years no I mean it doesn't really offer

2202
02:05:48,469 --> 02:05:56,680
anything interesting so it's it's a very

2203
02:05:52,640 --> 02:05:59,810
very very minor improvement over C C++

2204
02:05:56,680 --> 02:06:01,219
so I don't see why most most people

2205
02:05:59,810 --> 02:06:02,780
would have really no motivation to

2206
02:06:01,219 --> 02:06:05,270
switch they already have code bases

2207
02:06:02,779 --> 02:06:09,109
written in C C++ rust offers them almost

2208
02:06:05,270 --> 02:06:14,110
nothing so I wouldn't see that being

2209
02:06:09,109 --> 02:06:18,909
likely I can see something like ji

2210
02:06:14,109 --> 02:06:18,909
replacing C C++ because it offers a lot

2211
02:06:19,238 --> 02:06:24,979
but you know unlike rust like from what

2212
02:06:23,359 --> 02:06:28,009
I've seen rust is mostly about people

2213
02:06:24,979 --> 02:06:29,089
being loud and annoying and telling

2214
02:06:28,010 --> 02:06:31,460
people they should use it even though

2215
02:06:29,090 --> 02:06:33,650
there's really no reason to and

2216
02:06:31,460 --> 02:06:37,130
sometimes that's what makes languages

2217
02:06:33,649 --> 02:06:40,909
succeed so that's why C++ is here for

2218
02:06:37,130 --> 02:06:43,640
example it's also why Java is here and

2219
02:06:40,909 --> 02:06:46,609
so you know maybe just the belligerent

2220
02:06:43,640 --> 02:06:49,420
nature of rust developers will be

2221
02:06:46,609 --> 02:06:51,738
something that you know causes it to

2222
02:06:49,420 --> 02:06:53,210
gain more adoption but it's it's not a

2223
02:06:51,738 --> 02:06:55,429
particular Singh language to me it's

2224
02:06:53,210 --> 02:06:56,930
it's got very rudimentary improvements

2225
02:06:55,430 --> 02:07:01,369
over CV post less that I don't consider

2226
02:06:56,930 --> 02:07:04,219
them to be very important however I

2227
02:07:01,369 --> 02:07:10,640
could easily see a language that did

2228
02:07:04,219 --> 02:07:12,909
offer something and if there was such a

2229
02:07:10,640 --> 02:07:18,140
language available I could see that

2230
02:07:12,909 --> 02:07:21,399
being being really relevant right and I

2231
02:07:18,140 --> 02:07:23,570
don't know if that'll happen or not but

2232
02:07:21,399 --> 02:07:25,159
like the reason I mentioned ji because

2233
02:07:23,569 --> 02:07:28,279
it has real meta programming support and

2234
02:07:25,159 --> 02:07:29,988
I think that's a massive feature like I

2235
02:07:28,279 --> 02:07:32,960
really think people underestimate how

2236
02:07:29,988 --> 02:07:35,829
important meta programming is it's the

2237
02:07:32,960 --> 02:07:37,969
most important thing for a new language

2238
02:07:35,829 --> 02:07:39,710
rust is just a bunch of syntactic

2239
02:07:37,969 --> 02:07:41,210
nonsense that doesn't really do you any

2240
02:07:39,710 --> 02:07:44,239
good

2241
02:07:41,210 --> 02:07:48,050
ji has actual real ast meta programming

2242
02:07:44,238 --> 02:07:50,948
support like that's very good I

2243
02:07:48,050 --> 02:07:55,940
has correctly integrated compile-time

2244
02:07:50,948 --> 02:07:57,738
execution of everything and so it's the

2245
02:07:55,939 --> 02:07:58,939
right model right and moving something

2246
02:07:57,738 --> 02:08:00,799
like that would be a real improvement

2247
02:07:58,939 --> 02:08:01,158
you know I would seriously think about

2248
02:08:00,800 --> 02:08:04,130
it

2249
02:08:01,158 --> 02:08:05,388
and I don't know what other C C++ people

2250
02:08:04,130 --> 02:08:07,639
would think about it but that's a

2251
02:08:05,389 --> 02:08:09,770
compelling argument as to why I should

2252
02:08:07,639 --> 02:08:13,309
rewrite my codebase or at least port a

2253
02:08:09,770 --> 02:08:14,719
you know poured it over time whereas the

2254
02:08:13,309 --> 02:08:17,690
argument for rust is nowhere to be found

2255
02:08:14,719 --> 02:08:20,439
it's just a bunch of loud people saying

2256
02:08:17,689 --> 02:08:24,069
things that aren't actually particularly

2257
02:08:20,439 --> 02:08:32,198
applicable to what I do did today right

2258
02:08:24,069 --> 02:08:32,198
so so that's why I say it would help

2259
02:08:32,408 --> 02:08:36,679
yeah if people were less interested in

2260
02:08:35,090 --> 02:08:40,520
language nonsense and more interested in

2261
02:08:36,679 --> 02:08:44,929
what actually happens to your code right

2262
02:08:40,520 --> 02:08:48,460
and you know when I care what I care

2263
02:08:44,929 --> 02:08:54,980
about is like really good stuff that

2264
02:08:48,460 --> 02:08:56,480
will like memory safety I don't care

2265
02:08:54,979 --> 02:08:57,948
about like you saw what I do today for a

2266
02:08:56,479 --> 02:08:59,718
memory safety and it just works it takes

2267
02:08:57,948 --> 02:09:01,669
me like a couple hours of time for

2268
02:08:59,719 --> 02:09:04,698
memory safety and I'm just fine I never

2269
02:09:01,670 --> 02:09:06,349
have this praten issue for me right so

2270
02:09:04,698 --> 02:09:08,000
adding a bunch of crap to your language

2271
02:09:06,349 --> 02:09:09,828
for memory safety is just wasting my

2272
02:09:08,000 --> 02:09:11,630
time and adding complexity or language

2273
02:09:09,828 --> 02:09:14,359
for no reason I don't need it and I

2274
02:09:11,630 --> 02:09:16,880
don't care right

2275
02:09:14,359 --> 02:09:18,920
and in my opinion other kinds of bugs

2276
02:09:16,880 --> 02:09:20,539
are way more important their kinds that

2277
02:09:18,920 --> 02:09:22,190
you tend to see a lot more often and

2278
02:09:20,539 --> 02:09:24,559
that are way more difficult to diagnose

2279
02:09:22,189 --> 02:09:26,149
and find such as index Swizzle problems

2280
02:09:24,559 --> 02:09:29,360
and stuff like that rust does absolutely

2281
02:09:26,149 --> 02:09:31,848
nothing for you the heavy lifting work

2282
02:09:29,359 --> 02:09:33,920
that I have to do day to day usually has

2283
02:09:31,849 --> 02:09:35,150
nothing to do with memory safety it

2284
02:09:33,920 --> 02:09:38,059
doesn't have anything to do with memory

2285
02:09:35,149 --> 02:09:41,149
even it usually has a lot more to do

2286
02:09:38,059 --> 02:09:44,059
with things like how to notate things

2287
02:09:41,149 --> 02:09:45,618
concisely and as usual rust delivers you

2288
02:09:44,059 --> 02:09:48,409
literally nothing on that front they

2289
02:09:45,618 --> 02:09:49,639
decided what they think the syntactic

2290
02:09:48,408 --> 02:09:50,960
sugar bees should be for their language

2291
02:09:49,639 --> 02:09:53,750
and they just stuff it down your throat

2292
02:09:50,960 --> 02:09:56,210
exactly like C++ this interests me not

2293
02:09:53,750 --> 02:09:57,170
at all if I'm going to switch through

2294
02:09:56,210 --> 02:09:59,420
language it's going to be one that

2295
02:09:57,170 --> 02:10:01,489
allows me to create the correct

2296
02:09:59,420 --> 02:10:03,230
shorthand at all times for what

2297
02:10:01,488 --> 02:10:05,959
I am trying to do and that is what ji

2298
02:10:03,229 --> 02:10:08,658
does it gives me the ast I can actually

2299
02:10:05,960 --> 02:10:11,210
do correct metaprogramming fully

2300
02:10:08,658 --> 02:10:13,429
throughout my entire code base including

2301
02:10:11,210 --> 02:10:15,019
mixing asti's together using convenient

2302
02:10:13,429 --> 02:10:18,139
things that's what I want

2303
02:10:15,019 --> 02:10:19,880
rust doesn't offer any of this and I

2304
02:10:18,139 --> 02:10:22,429
have no idea why people are so excited

2305
02:10:19,880 --> 02:10:23,719
about it I guess they just I don't know

2306
02:10:22,429 --> 02:10:25,658
they're probably the same people are

2307
02:10:23,719 --> 02:10:27,859
excited about modern C++ it's just

2308
02:10:25,658 --> 02:10:29,328
people get it in their heads that the

2309
02:10:27,859 --> 02:10:31,399
language is the interesting thing it's

2310
02:10:29,328 --> 02:10:33,558
not the language of thing that enables

2311
02:10:31,399 --> 02:10:35,089
you to create the code and what you

2312
02:10:33,559 --> 02:10:36,949
should be focusing on is what kind of

2313
02:10:35,090 --> 02:10:39,019
new code does this let me create and in

2314
02:10:36,948 --> 02:10:40,998
rust the answer is none so I do not

2315
02:10:39,019 --> 02:10:43,130
understand why people keep telling me

2316
02:10:40,998 --> 02:10:45,590
about it I really just do not care about

2317
02:10:43,130 --> 02:10:49,269
rust even a little bit it seems like

2318
02:10:45,590 --> 02:10:49,269
it's targeted at people who are not me

2319
02:11:05,000 --> 02:11:10,170
rev ryx it actually is a language

2320
02:11:07,920 --> 02:11:12,300
problem Swiss Ling is 100% a language

2321
02:11:10,170 --> 02:11:14,250
solvable problem so one of the things I

2322
02:11:12,300 --> 02:11:16,050
designed a trad was a program called

2323
02:11:14,250 --> 02:11:18,779
mustache I've given a demo of it before

2324
02:11:16,050 --> 02:11:21,239
and what it is is an augmentation that

2325
02:11:18,779 --> 02:11:22,889
you have to manually put in C that

2326
02:11:21,239 --> 02:11:24,869
allows you to find all your specialty

2327
02:11:22,890 --> 02:11:28,619
problems trivially it like automatically

2328
02:11:24,869 --> 02:11:31,079
finds them basically if I had J I I

2329
02:11:28,619 --> 02:11:32,849
could just put that in my ast front end

2330
02:11:31,079 --> 02:11:34,409
and it would apply to automatically to

2331
02:11:32,850 --> 02:11:35,520
any part of the code that I wanted rust

2332
02:11:34,409 --> 02:11:37,979
can't do anything like that

2333
02:11:35,520 --> 02:11:39,690
they haven't even discussed that as far

2334
02:11:37,979 --> 02:11:40,709
as I can tell they don't even know that

2335
02:11:39,689 --> 02:11:42,559
these are the kinds of things you should

2336
02:11:40,710 --> 02:11:45,480
be doing in a programming language right

2337
02:11:42,560 --> 02:11:48,150
so they're just not they're not working

2338
02:11:45,479 --> 02:11:50,039
in the same headspace that I am like I'm

2339
02:11:48,149 --> 02:11:51,179
thinking about how do I solve the hard

2340
02:11:50,039 --> 02:11:53,159
programming problems that I hit every

2341
02:11:51,180 --> 02:11:54,510
day and they're thinking about how do I

2342
02:11:53,159 --> 02:11:55,979
protect someone from running off the end

2343
02:11:54,510 --> 02:12:03,390
of a buffer which is like the least

2344
02:11:55,979 --> 02:12:05,869
interesting thing to me are their

2345
02:12:03,390 --> 02:12:12,630
language features in C++ that you like

2346
02:12:05,869 --> 02:12:13,859
no are there other language features

2347
02:12:12,630 --> 02:12:17,699
than metaprogramming that you want in a

2348
02:12:13,859 --> 02:12:19,589
new language um not really like what I

2349
02:12:17,699 --> 02:12:21,569
would like is a as a programming

2350
02:12:19,590 --> 02:12:24,029
language where I can make my own things

2351
02:12:21,569 --> 02:12:27,119
in the meta programming so that it works

2352
02:12:24,029 --> 02:12:32,189
the way I want it to right that's mostly

2353
02:12:27,119 --> 02:12:35,069
what I want I just you know I'm not

2354
02:12:32,189 --> 02:12:36,509
interested in any of the other stuff j

2355
02:12:35,069 --> 02:12:38,729
ai if anything doesn't go far enough

2356
02:12:36,510 --> 02:12:40,619
with the meta programming like ideally

2357
02:12:38,729 --> 02:12:42,179
if you were to hand me language I would

2358
02:12:40,619 --> 02:12:44,460
want one where I can change my internal

2359
02:12:42,180 --> 02:12:46,020
a B eyes and stuff like that so like I'm

2360
02:12:44,460 --> 02:12:47,579
actually in control of function

2361
02:12:46,020 --> 02:12:53,100
preambles and all that sort of thing

2362
02:12:47,579 --> 02:12:55,050
internal to my code right yeah I mean

2363
02:12:53,100 --> 02:12:56,190
you know and I'm not I don't want to

2364
02:12:55,050 --> 02:12:57,900
bash too much on the rest I mean I do

2365
02:12:56,189 --> 02:12:59,219
because I really hate the way people

2366
02:12:57,899 --> 02:13:00,899
advocate it because they're doing

2367
02:12:59,220 --> 02:13:02,730
exactly the same thing that C++ people

2368
02:13:00,899 --> 02:13:03,899
did they're kind of trying to jam it

2369
02:13:02,729 --> 02:13:05,129
down people's throats by claiming

2370
02:13:03,899 --> 02:13:06,299
there's these benefits that aren't

2371
02:13:05,130 --> 02:13:09,420
actually there or aren't very

2372
02:13:06,300 --> 02:13:11,880
interesting right and I that really

2373
02:13:09,420 --> 02:13:13,409
annoys me but it's not like rust is

2374
02:13:11,880 --> 02:13:14,850
unique in this like that's like most

2375
02:13:13,409 --> 02:13:17,460
languages nowadays is a bunch of

2376
02:13:14,850 --> 02:13:18,450
evangelist and not like a whole lot of

2377
02:13:17,460 --> 02:13:22,159
sizzle and

2378
02:13:18,449 --> 02:13:22,159
not much actual meat right

2379
02:13:38,328 --> 02:13:42,389
so Rev Rex if you want me to comment on

2380
02:13:40,738 --> 02:13:44,158
a specific rest feature just point me at

2381
02:13:42,389 --> 02:13:47,539
the actual feature page and I can sort

2382
02:13:44,158 --> 02:13:47,539
of go through it if you want

2383
02:14:02,139 --> 02:14:06,819
yeah and neither EXO functional

2384
02:14:05,079 --> 02:14:08,559
languages like Haskell and also just

2385
02:14:06,819 --> 02:14:13,000
like completely generic languages like

2386
02:14:08,560 --> 02:14:16,989
Lisp they offer a lot of these function

2387
02:14:13,000 --> 02:14:19,000
these options the problem is the

2388
02:14:16,988 --> 02:14:21,759
language itself isn't set up to be

2389
02:14:19,000 --> 02:14:23,948
particularly good for programming right

2390
02:14:21,760 --> 02:14:25,389
like Lisp for example can do all these

2391
02:14:23,948 --> 02:14:27,729
things and and not only that could be

2392
02:14:25,389 --> 02:14:29,500
doing at run time right but it's not

2393
02:14:27,729 --> 02:14:31,419
really set up to get good output code

2394
02:14:29,500 --> 02:14:33,340
with concise input code right it doesn't

2395
02:14:31,420 --> 02:14:35,949
actually when you actually look at the

2396
02:14:33,340 --> 02:14:37,719
resulting list program a the output

2397
02:14:35,948 --> 02:14:38,888
tends to be actually quite poor because

2398
02:14:37,719 --> 02:14:41,829
you don't have control of the lower

2399
02:14:38,889 --> 02:14:44,319
level stuff at like you would want but

2400
02:14:41,829 --> 02:14:46,329
be the actual legibility of the

2401
02:14:44,319 --> 02:14:48,729
resulting code is really bad right

2402
02:14:46,329 --> 02:14:50,920
because it doesn't allow much constructs

2403
02:14:48,729 --> 02:14:53,049
for human readability and that's sort of

2404
02:14:50,920 --> 02:14:55,810
a crucial part so what you're kind of

2405
02:14:53,050 --> 02:14:57,130
looking for is a way to get your meta

2406
02:14:55,810 --> 02:14:58,900
programming language to allow you to

2407
02:14:57,130 --> 02:15:01,449
create constructs that are easy to read

2408
02:14:58,899 --> 02:15:06,009
that produce good high quality code on

2409
02:15:01,448 --> 02:15:07,629
the other side right but absolutely like

2410
02:15:06,010 --> 02:15:09,400
you can go back to Lisp which is

2411
02:15:07,630 --> 02:15:11,679
extremely early programming it had all

2412
02:15:09,399 --> 02:15:15,129
this stuff but things like C they don't

2413
02:15:11,679 --> 02:15:17,199
have this the power of Lisp at all and

2414
02:15:15,130 --> 02:15:18,789
you know you can see why because of the

2415
02:15:17,198 --> 02:15:20,229
trade-offs that were being made so what

2416
02:15:18,789 --> 02:15:24,488
you're really looking to do is to get

2417
02:15:20,229 --> 02:15:28,779
like the concise legibility of simple C

2418
02:15:24,488 --> 02:15:32,259
code right and the performance you can

2419
02:15:28,779 --> 02:15:34,300
get by hand tuning that code in a

2420
02:15:32,260 --> 02:15:36,070
language that has the kinds of features

2421
02:15:34,300 --> 02:15:39,610
that list does where you can manipulate

2422
02:15:36,069 --> 02:15:40,779
all the code very concretely in multiple

2423
02:15:39,609 --> 02:15:43,899
passes and all these sorts of things

2424
02:15:40,779 --> 02:15:45,399
right and this is a difficult language

2425
02:15:43,899 --> 02:15:46,509
to build that's why nobody builds it

2426
02:15:45,399 --> 02:15:49,269
they usually build some for things like

2427
02:15:46,510 --> 02:15:51,310
rust right because those are easier to

2428
02:15:49,270 --> 02:15:52,389
make it's much easier to make the rust

2429
02:15:51,310 --> 02:15:53,860
compiler than it would be to make a

2430
02:15:52,389 --> 02:15:58,409
compiler to do for the language that I'm

2431
02:15:53,859 --> 02:15:58,408
talking about so

2432
02:16:00,689 --> 02:16:06,559
did someone want to send them at the

2433
02:16:02,609 --> 02:16:06,559
rust macro page

2434
02:16:19,609 --> 02:16:25,759
someone wanted me to comment on the rest

2435
02:16:21,260 --> 02:16:27,820
mattress page but the person who asked

2436
02:16:25,760 --> 02:16:30,170
me to comment on them didn't actually

2437
02:16:27,819 --> 02:16:35,350
provide the link they wanted someone

2438
02:16:30,170 --> 02:16:38,989
else suggested maybe it was Doc rust

2439
02:16:35,350 --> 02:16:40,670
Lang dot org and the answer is if it's a

2440
02:16:38,989 --> 02:16:42,739
macro system then I don't want it

2441
02:16:40,670 --> 02:16:43,399
because I don't want macros but that's a

2442
02:16:42,739 --> 02:16:44,930
separate issue

2443
02:16:43,399 --> 02:16:47,779
I want a thing that allows me to modify

2444
02:16:44,930 --> 02:16:52,550
the ast which is not the same but anyway

2445
02:16:47,780 --> 02:16:54,380
so here's one is this the one we're

2446
02:16:52,550 --> 02:16:55,279
talking about or do you want to talk

2447
02:16:54,379 --> 02:16:58,659
about the other one

2448
02:16:55,280 --> 02:16:58,659
I don't know which one you want

2449
02:17:17,648 --> 02:17:20,769
I think it was ravaged originally ask

2450
02:17:19,478 --> 02:17:22,958
the question so I just waiting for them

2451
02:17:20,769 --> 02:17:27,189
to so are we talking about what's on

2452
02:17:22,959 --> 02:17:29,859
this page or because I'm not there was

2453
02:17:27,189 --> 02:17:32,578
it was not specific what was being asked

2454
02:17:29,859 --> 02:17:32,578
about right

2455
02:17:45,180 --> 02:17:51,149
oh if i looked at it all yes i mean i

2456
02:17:49,110 --> 02:17:53,489
don't program an arrest so I'm not

2457
02:17:51,149 --> 02:17:56,369
qualified to comment on like extreme

2458
02:17:53,489 --> 02:17:58,380
nitty-gritty but in order to be a proper

2459
02:17:56,370 --> 02:18:00,570
meta programming system what you need to

2460
02:17:58,380 --> 02:18:03,000
do is you need to have exactly what ji

2461
02:18:00,569 --> 02:18:05,940
has which is a message processing loop

2462
02:18:03,000 --> 02:18:08,610
or other kind of high-level iterator

2463
02:18:05,940 --> 02:18:11,430
that hop happens as a procedural piece

2464
02:18:08,610 --> 02:18:14,909
of code at compile time in your code

2465
02:18:11,430 --> 02:18:17,639
that can look across the entire code

2466
02:18:14,909 --> 02:18:21,690
bases AST and make modifications to any

2467
02:18:17,639 --> 02:18:23,670
of it as it wishes right and that is not

2468
02:18:21,690 --> 02:18:26,159
what rust has it doesn't have anything

2469
02:18:23,670 --> 02:18:28,889
like that right all it has is some

2470
02:18:26,159 --> 02:18:30,719
little like nonsense stuff where it can

2471
02:18:28,889 --> 02:18:33,989
like turn strings and ast Zoar that sort

2472
02:18:30,719 --> 02:18:40,559
of like spot stuff right and that's just

2473
02:18:33,989 --> 02:18:41,940
not useful right it's it's not it's it's

2474
02:18:40,559 --> 02:18:43,170
not the same it's not a real meta

2475
02:18:41,940 --> 02:18:50,069
programming environment it's a crap

2476
02:18:43,170 --> 02:18:51,659
programming environment right we're

2477
02:18:50,069 --> 02:18:54,180
gonna find mustache oh you can't its

2478
02:18:51,659 --> 02:19:01,979
proprietary I gave a demo of some of it

2479
02:18:54,180 --> 02:19:03,809
on streams you can find that but what do

2480
02:19:01,979 --> 02:19:05,250
you think of clang tooling to create

2481
02:19:03,809 --> 02:19:08,789
such a Estimate emulation tools as part

2482
02:19:05,250 --> 02:19:14,159
of the build pipeline I don't think it's

2483
02:19:08,790 --> 02:19:16,591
a good idea I mean it's not a spec it's

2484
02:19:14,159 --> 02:19:23,119
not a language I really wouldn't want to

2485
02:19:16,591 --> 02:19:23,120
lean on that right so

2486
02:19:24,888 --> 02:19:31,549
also compiling clangs nightmare anyway

2487
02:19:28,489 --> 02:19:35,239
all right I'm gonna go ahead and wrap

2488
02:19:31,549 --> 02:19:36,590
this up thank you everyone for joining

2489
02:19:35,239 --> 02:19:38,239
me for the nuff sort of a handmade hero

2490
02:19:36,590 --> 02:19:40,460
it has been a pleasure coding with you

2491
02:19:38,239 --> 02:19:42,079
as always if you would like to follow on

2492
02:19:40,459 --> 02:19:43,819
the series you can always pre-order the

2493
02:19:42,079 --> 02:19:45,829
game on here or kit comes the source

2494
02:19:43,819 --> 02:19:49,940
code which you can use to follow along

2495
02:19:45,829 --> 02:19:51,049
with at home I will be back here next

2496
02:19:49,940 --> 02:19:54,470
week although I don't think I posted the

2497
02:19:51,049 --> 02:19:59,599
schedule yet so the schedule will be on

2498
02:19:54,469 --> 02:20:01,849
here as soon as I post it until then

2499
02:19:59,600 --> 02:20:03,680
have fun programming everyone and I will

2500
02:20:01,850 --> 02:20:06,010
see you on the internet tickety's

2501
02:20:03,680 --> 02:20:06,010
everybody

