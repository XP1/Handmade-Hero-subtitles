1
00:00:00,060 --> 00:00:04,229
hello everyone and welcome to hand made

2
00:00:02,399 --> 00:00:05,970
here the show where we normally code a

3
00:00:04,230 --> 00:00:07,770
complete game live on stream but during

4
00:00:05,969 --> 00:00:11,039
the pre stream today I kind of got riled

5
00:00:07,769 --> 00:00:13,349
up as I sometimes do talking about how

6
00:00:11,039 --> 00:00:16,618
bad modern hardware and offering systems

7
00:00:13,349 --> 00:00:19,710
have gotten mm hmm and it reminded me

8
00:00:16,618 --> 00:00:22,618
that I did have a lecture on this topic

9
00:00:19,710 --> 00:00:25,760
that I never recorded and so I kind of

10
00:00:22,618 --> 00:00:29,309
wanted to just go ahead and record it

11
00:00:25,760 --> 00:00:30,900
now I do apologize because normally what

12
00:00:29,309 --> 00:00:33,539
you would do with a lecture and what I

13
00:00:30,899 --> 00:00:33,988
do do with a lecture is rehearse it

14
00:00:33,539 --> 00:00:36,030
first

15
00:00:33,988 --> 00:00:37,949
unlike handmade Hiro which is just

16
00:00:36,030 --> 00:00:41,730
seat-of-the-pants by design and by

17
00:00:37,950 --> 00:00:43,739
intent normally a lecture is much better

18
00:00:41,729 --> 00:00:45,269
if rehearsed and I did rehearse it when

19
00:00:43,738 --> 00:00:48,269
I gave it the first time but I think it

20
00:00:45,270 --> 00:00:49,859
was something like six years ago and so

21
00:00:48,270 --> 00:00:51,480
I suspect that this will be pretty rough

22
00:00:49,859 --> 00:00:54,649
but I wanted to get it out there just so

23
00:00:51,479 --> 00:00:56,729
I could have the material for reference

24
00:00:54,649 --> 00:00:59,640
anyway this lecture is called the 30

25
00:00:56,729 --> 00:01:03,569
million line problem and it is a lecture

26
00:00:59,640 --> 00:01:06,719
about the dangers of how we have let

27
00:01:03,570 --> 00:01:10,260
hardware and operating system design

28
00:01:06,719 --> 00:01:14,459
kind of run away and become untenable

29
00:01:10,260 --> 00:01:15,810
and without further ado let me just jump

30
00:01:14,459 --> 00:01:17,459
right into it it's not a particularly

31
00:01:15,810 --> 00:01:21,900
long lecture I think it's meant to take

32
00:01:17,459 --> 00:01:23,669
about 30 minutes all right so one thing

33
00:01:21,900 --> 00:01:25,950
that we can all appreciate and that I

34
00:01:23,670 --> 00:01:27,359
think is always the starting point for

35
00:01:25,950 --> 00:01:31,159
discussions like this is just an

36
00:01:27,359 --> 00:01:34,618
appreciation of the extreme difference

37
00:01:31,159 --> 00:01:37,350
between the kinds of hardware that I had

38
00:01:34,618 --> 00:01:39,390
when I was a child or whenever you were

39
00:01:37,349 --> 00:01:41,339
a child or the hardware you can first

40
00:01:39,390 --> 00:01:42,750
remember and the hardware you get to

41
00:01:41,340 --> 00:01:44,640
program today and the fact that says

42
00:01:42,750 --> 00:01:46,200
2015 on there I'm guessing that's when I

43
00:01:44,640 --> 00:01:48,689
first gave this lecture so three years

44
00:01:46,200 --> 00:01:51,570
ago I guess yeah this would be even

45
00:01:48,688 --> 00:01:55,228
higher today I and so when I look at

46
00:01:51,569 --> 00:01:56,758
these two things that 2015 there that's

47
00:01:55,228 --> 00:02:00,299
the machine that we were programming

48
00:01:56,759 --> 00:02:03,509
handmade hero on and that machine was

49
00:02:00,299 --> 00:02:05,579
actually a 2010 machine so the machine

50
00:02:03,509 --> 00:02:06,899
was actually five years old at the time

51
00:02:05,578 --> 00:02:09,478
that I'm talking about it and that's

52
00:02:06,899 --> 00:02:11,009
what I was programming on 2015 nowadays

53
00:02:09,479 --> 00:02:13,230
on hammer here we actually updated to a

54
00:02:11,008 --> 00:02:13,409
machine that's way way more powerful

55
00:02:13,229 --> 00:02:16,949
than

56
00:02:13,409 --> 00:02:20,310
this machine so it's worth pointing that

57
00:02:16,949 --> 00:02:22,769
out but if you look at these two in 1990

58
00:02:20,310 --> 00:02:24,509
my processor was 25 megahertz it was it

59
00:02:22,770 --> 00:02:29,730
was an Amiga computer as 25 megahertz

60
00:02:24,509 --> 00:02:32,699
and now in 2015 not only are the speeds

61
00:02:29,729 --> 00:02:35,699
you know a hundred times faster that 2.8

62
00:02:32,699 --> 00:02:38,129
get your Hertz right but they're also

63
00:02:35,699 --> 00:02:41,159
more of them so you don't just have one

64
00:02:38,129 --> 00:02:43,769
processor anymore for a CPU you've got

65
00:02:41,159 --> 00:02:46,469
four of them effectively in that

66
00:02:43,770 --> 00:02:48,840
particular machine and each one of

67
00:02:46,469 --> 00:02:50,789
them's actually also has four wide ALU

68
00:02:48,840 --> 00:02:52,379
units right it can actually issue for

69
00:02:50,789 --> 00:02:55,469
time now the Ale units are eight

70
00:02:52,379 --> 00:02:57,840
sometimes 16 wide and you have hyper

71
00:02:55,469 --> 00:03:00,539
threads as well and the core counts are

72
00:02:57,840 --> 00:03:03,479
going up above four it's just there's an

73
00:03:00,539 --> 00:03:05,519
orgy of hardware in there obviously the

74
00:03:03,479 --> 00:03:08,909
graphics was way simpler back then 320

75
00:03:05,520 --> 00:03:10,680
by 512 by 5 will now we're up to you

76
00:03:08,909 --> 00:03:12,810
know this at a minimum and that was like

77
00:03:10,680 --> 00:03:15,000
I said on a much crappier machine than

78
00:03:12,810 --> 00:03:18,900
the one now so 4k displays are common

79
00:03:15,000 --> 00:03:21,479
now as well the number six

80
00:03:18,900 --> 00:03:24,480
and the number eight are very close for

81
00:03:21,479 --> 00:03:27,030
memory only the power of a thousand has

82
00:03:24,479 --> 00:03:29,939
changed it's gone from megabytes to

83
00:03:27,030 --> 00:03:32,849
gigabytes right and not only do we have

84
00:03:29,939 --> 00:03:35,310
more memory by a factor of a thousand

85
00:03:32,849 --> 00:03:36,750
but we even have that memory on two

86
00:03:35,310 --> 00:03:38,069
different processors so you have that

87
00:03:36,750 --> 00:03:40,349
much memory on your main processor and

88
00:03:38,069 --> 00:03:44,069
on your graphics processor in 1990 it

89
00:03:40,349 --> 00:03:45,659
was shared between the two and of course

90
00:03:44,069 --> 00:03:49,650
hard drives are absurd I don't even want

91
00:03:45,659 --> 00:03:51,810
to go into those right so when you look

92
00:03:49,650 --> 00:03:54,900
at that picture really all you can say

93
00:03:51,810 --> 00:03:57,300
is at least from the the strictly

94
00:03:54,900 --> 00:04:00,120
density side of things hardware

95
00:03:57,300 --> 00:04:06,380
developers have delivered fantastic

96
00:04:00,120 --> 00:04:12,509
gains in the past 25 years now 28 years

97
00:04:06,379 --> 00:04:15,500
however the software that we use is way

98
00:04:12,509 --> 00:04:19,730
worse than it's ever been the experience

99
00:04:15,500 --> 00:04:22,048
using the computer in 2015 or today 2018

100
00:04:19,730 --> 00:04:23,610
compared to what it was like using it

101
00:04:22,048 --> 00:04:25,620
back when on the computer that's

102
00:04:23,610 --> 00:04:27,170
furniture before the computers using

103
00:04:25,620 --> 00:04:30,709
before was a very

104
00:04:27,170 --> 00:04:35,210
serene and pleasant experience the only

105
00:04:30,709 --> 00:04:37,399
time it really ever became frustrating

106
00:04:35,209 --> 00:04:38,930
was it didn't the CPU didn't even have

107
00:04:37,399 --> 00:04:40,339
memory protection so when you were

108
00:04:38,930 --> 00:04:42,680
programming an application you might

109
00:04:40,339 --> 00:04:44,000
introduce a bug that would overwrite

110
00:04:42,680 --> 00:04:46,579
some memory and cause your operating

111
00:04:44,000 --> 00:04:48,740
system to crash right and that was

112
00:04:46,579 --> 00:04:51,680
really unfortunate and nowadays we are

113
00:04:48,740 --> 00:04:53,540
fortunate to have CPUs that have virtual

114
00:04:51,680 --> 00:04:54,769
memory protection and they don't have to

115
00:04:53,540 --> 00:04:57,920
have this problem anymore so that's

116
00:04:54,769 --> 00:04:59,389
great so we fixed one problem pretty

117
00:04:57,920 --> 00:05:02,509
much the only problem that we used to

118
00:04:59,389 --> 00:05:05,689
have back then and in exchange for that

119
00:05:02,509 --> 00:05:08,659
one fix unfortunately are for whatever

120
00:05:05,689 --> 00:05:12,439
reasons our software has become almost

121
00:05:08,660 --> 00:05:15,439
unusable and it's unusable in many many

122
00:05:12,439 --> 00:05:18,170
many different ways these are just some

123
00:05:15,439 --> 00:05:21,379
screenshots of things I see every day

124
00:05:18,170 --> 00:05:24,140
basically these are not uncommon they're

125
00:05:21,379 --> 00:05:26,540
my common experience using computer I

126
00:05:24,139 --> 00:05:28,189
the twitter is over capacity fail whale

127
00:05:26,540 --> 00:05:30,170
I don't think shows up very much for me

128
00:05:28,189 --> 00:05:32,180
and the desktop anymore but amusingly I

129
00:05:30,170 --> 00:05:33,740
now for the first time have an Android

130
00:05:32,180 --> 00:05:38,139
phone I didn't have a smartphone for a

131
00:05:33,740 --> 00:05:41,540
long time I got a an Android smartphone

132
00:05:38,139 --> 00:05:43,849
recently and it cannot ever load Twitter

133
00:05:41,540 --> 00:05:46,280
from a URL if you go to twitter.com

134
00:05:43,850 --> 00:05:48,800
it just says Twitter is taking too long

135
00:05:46,279 --> 00:05:49,669
to load in a little message and no

136
00:05:48,800 --> 00:05:51,800
matter how many times your refresher

137
00:05:49,670 --> 00:05:55,370
it'll never load you have to like go

138
00:05:51,800 --> 00:05:56,780
back to the title bar Andry force it to

139
00:05:55,370 --> 00:05:59,870
reload the page and then sometimes it

140
00:05:56,779 --> 00:06:01,399
will work right so even that one that

141
00:05:59,870 --> 00:06:02,449
maybe sort of got fixed really didn't

142
00:06:01,399 --> 00:06:05,060
because now we just got the other ones

143
00:06:02,449 --> 00:06:07,490
so anyway when you use software today

144
00:06:05,060 --> 00:06:11,420
what you generally see is a huge array

145
00:06:07,490 --> 00:06:13,160
of viruses and software instability and

146
00:06:11,420 --> 00:06:14,990
updates that happen when you don't want

147
00:06:13,160 --> 00:06:17,000
them to and message boxes that pop up

148
00:06:14,990 --> 00:06:19,310
that you can't control and your

149
00:06:17,000 --> 00:06:20,569
operating system rebooting and losing

150
00:06:19,310 --> 00:06:23,930
work and doing all these are sort of

151
00:06:20,569 --> 00:06:26,540
things even the hardware now has failure

152
00:06:23,930 --> 00:06:29,750
design into it you try to plug in to

153
00:06:26,540 --> 00:06:32,150
things to play video from your computer

154
00:06:29,750 --> 00:06:34,060
to your television and it turns out you

155
00:06:32,149 --> 00:06:37,729
can't play it because some weird like

156
00:06:34,060 --> 00:06:40,069
HDCP thing has decided that even though

157
00:06:37,730 --> 00:06:40,639
you are using a legitimately purchased

158
00:06:40,069 --> 00:06:42,860
blu-ray

159
00:06:40,639 --> 00:06:47,300
legitimately purchased television it

160
00:06:42,860 --> 00:06:50,689
just doesn't work right I and this is

161
00:06:47,300 --> 00:06:52,968
really frustrating it causes such a

162
00:06:50,689 --> 00:06:55,039
loathesome experience with a personal

163
00:06:52,968 --> 00:06:56,658
computer that you just want to throw the

164
00:06:55,038 --> 00:06:58,038
thing out the window a lot of times if

165
00:06:56,658 --> 00:07:00,050
you do anything at all with your

166
00:06:58,038 --> 00:07:01,818
computer that isn't just checking

167
00:07:00,050 --> 00:07:06,079
Facebook once in a while and even that

168
00:07:01,819 --> 00:07:09,169
can become kind of frustrating hmm I and

169
00:07:06,079 --> 00:07:11,240
sometimes these things aren't just

170
00:07:09,168 --> 00:07:15,228
frustrating they're actually really

171
00:07:11,240 --> 00:07:17,689
detrimental right and there was some

172
00:07:15,228 --> 00:07:20,750
kind of absolutely ridiculous thing in

173
00:07:17,689 --> 00:07:22,729
the news back on the day or close to the

174
00:07:20,750 --> 00:07:24,468
day when I was doing this lecture

175
00:07:22,728 --> 00:07:27,408
originally you could go find new ones

176
00:07:24,468 --> 00:07:29,269
today they happen all the time but this

177
00:07:27,408 --> 00:07:32,360
was a kind of funny one headline that

178
00:07:29,269 --> 00:07:35,000
you read and it's like something was

179
00:07:32,360 --> 00:07:37,278
going on where you were needed a

180
00:07:35,000 --> 00:07:39,889
computer to actually work in order to do

181
00:07:37,278 --> 00:07:42,079
something for a real-world consequence

182
00:07:39,889 --> 00:07:43,759
and of course windows update or

183
00:07:42,079 --> 00:07:45,859
something decided it needed to update

184
00:07:43,759 --> 00:07:47,750
and they couldn't use the computer and

185
00:07:45,860 --> 00:07:49,908
then they ended up in a situation that

186
00:07:47,750 --> 00:07:52,250
actually cost them something significant

187
00:07:49,908 --> 00:07:54,680
and you read all these funny stories but

188
00:07:52,250 --> 00:07:56,959
there it's not funny right like that's

189
00:07:54,680 --> 00:08:00,250
just not that funny when you actually

190
00:07:56,959 --> 00:08:03,680
think about how bad computing has failed

191
00:08:00,250 --> 00:08:05,389
when ostensibly it's come so far the

192
00:08:03,680 --> 00:08:07,699
hardware that they were using for

193
00:08:05,389 --> 00:08:09,680
whatever this situation is was so much

194
00:08:07,699 --> 00:08:12,110
better than the one that I was talking

195
00:08:09,680 --> 00:08:17,449
about in 1990 yet this never would have

196
00:08:12,110 --> 00:08:19,520
happened in 1990 right and so one of the

197
00:08:17,449 --> 00:08:22,520
things that I think we need to step back

198
00:08:19,519 --> 00:08:24,620
and think about is why is software so

199
00:08:22,519 --> 00:08:28,218
much less reliable and so much more

200
00:08:24,620 --> 00:08:30,468
unpleasant to use today than it was it

201
00:08:28,218 --> 00:08:32,929
should be much more pleasant to use

202
00:08:30,468 --> 00:08:37,338
today the hardware is so much better and

203
00:08:32,929 --> 00:08:40,728
it is so much easier to get reasonable

204
00:08:37,339 --> 00:08:41,719
performance out of it that you would

205
00:08:40,729 --> 00:08:43,158
think that he's apt to assume but

206
00:08:41,719 --> 00:08:45,829
remember these are applications that are

207
00:08:43,158 --> 00:08:48,110
oftentimes very close to identical to

208
00:08:45,828 --> 00:08:51,799
the ones we were using a word processor

209
00:08:48,110 --> 00:08:54,379
on say an Amiga computer from 1990 and a

210
00:08:51,799 --> 00:08:56,089
word processor of today the performance

211
00:08:54,379 --> 00:09:00,590
it's aren't that different actually

212
00:08:56,090 --> 00:09:02,629
right and yet the one running on the

213
00:09:00,590 --> 00:09:06,050
thousands and thousands of times faster

214
00:09:02,629 --> 00:09:07,879
machine is somehow still as slow or

215
00:09:06,049 --> 00:09:09,769
slower when you're actually trying to

216
00:09:07,879 --> 00:09:13,429
type things into it and it's laying out

217
00:09:09,769 --> 00:09:15,319
the text you know and so we have to

218
00:09:13,429 --> 00:09:17,899
think about why if it should be so much

219
00:09:15,320 --> 00:09:20,090
easier to make software today why is it

220
00:09:17,899 --> 00:09:22,039
actually seem to often times not get any

221
00:09:20,090 --> 00:09:24,170
better although we do add features over

222
00:09:22,039 --> 00:09:26,269
time certainly the experience doesn't

223
00:09:24,169 --> 00:09:28,099
seem to get much better and also all of

224
00:09:26,269 --> 00:09:29,659
these other aspects of the experience

225
00:09:28,100 --> 00:09:31,820
that are horrible all of sudden start

226
00:09:29,659 --> 00:09:34,129
coming in why are there all these long

227
00:09:31,820 --> 00:09:36,500
load times and spinning progress bars

228
00:09:34,129 --> 00:09:37,730
that never seem to complete and crashes

229
00:09:36,500 --> 00:09:40,490
and all these other things why are all

230
00:09:37,730 --> 00:09:43,399
of these things seem to be more rampant

231
00:09:40,490 --> 00:09:47,330
rather than less when we should be

232
00:09:43,399 --> 00:09:49,639
having an easier time right with with

233
00:09:47,330 --> 00:09:52,129
making the software and more of our

234
00:09:49,639 --> 00:09:53,870
focus it should be easy to have more of

235
00:09:52,129 --> 00:09:55,220
our focus spent on reliability and all

236
00:09:53,870 --> 00:09:57,710
the sort of stuff because we're doing

237
00:09:55,220 --> 00:10:00,950
fundamentally hopefully less work to

238
00:09:57,710 --> 00:10:02,600
make a reasonably performant experience

239
00:10:00,950 --> 00:10:06,800
for the end-user that's what we would

240
00:10:02,600 --> 00:10:08,720
think well I would posit that the reason

241
00:10:06,799 --> 00:10:11,839
is actually very easy to understand I

242
00:10:08,720 --> 00:10:13,790
think the reason is simply that since

243
00:10:11,840 --> 00:10:17,000
things are no longer coded from scratch

244
00:10:13,789 --> 00:10:19,759
from start what we end up doing is we

245
00:10:17,000 --> 00:10:23,269
just pile code on top of code on top of

246
00:10:19,759 --> 00:10:25,970
code right and so any thing that might

247
00:10:23,269 --> 00:10:30,230
have been problematic or wrong about any

248
00:10:25,970 --> 00:10:32,600
underlying layer and that could interact

249
00:10:30,230 --> 00:10:34,789
with any other layer that we put on top

250
00:10:32,600 --> 00:10:37,610
of it they all just keep multiplying

251
00:10:34,789 --> 00:10:39,709
together to multiply out in almost an

252
00:10:37,610 --> 00:10:42,730
exponential fashion our failure rates

253
00:10:39,710 --> 00:10:44,840
and our performance problems right and

254
00:10:42,730 --> 00:10:49,180
what I've done here is I've constructed

255
00:10:44,840 --> 00:10:54,550
a graph of operating system just the

256
00:10:49,179 --> 00:10:58,459
operating system nothing else over time

257
00:10:54,549 --> 00:11:02,419
in what you can see here is that the

258
00:10:58,460 --> 00:11:06,379
operating system back in 1991 this is

259
00:11:02,419 --> 00:11:07,689
Linux I believe was so small that on

260
00:11:06,379 --> 00:11:09,759
this graph that

261
00:11:07,690 --> 00:11:12,070
the current size of Linux on the far

262
00:11:09,759 --> 00:11:15,069
right end and mind you this was 2015

263
00:11:12,070 --> 00:11:16,930
size of Linux actually so we haven't

264
00:11:15,070 --> 00:11:20,560
even got no 2018 it's still going up

265
00:11:16,929 --> 00:11:22,809
right the original size of the Linux

266
00:11:20,559 --> 00:11:24,639
operating system when it debuted was so

267
00:11:22,809 --> 00:11:29,219
small that it looks like it doesn't

268
00:11:24,639 --> 00:11:32,049
exist on this chart it's - well b0 right

269
00:11:29,220 --> 00:11:35,050
yet the size of the same operating

270
00:11:32,049 --> 00:11:36,399
system today which granted does a lot

271
00:11:35,049 --> 00:11:38,529
more things so I'm not saying it's

272
00:11:36,399 --> 00:11:40,059
equivalent I'm just saying what you

273
00:11:38,529 --> 00:11:42,699
actually need if you're just wondering

274
00:11:40,059 --> 00:11:46,409
on the link system the kernel has now

275
00:11:42,700 --> 00:11:49,420
gotten up to over 18 million lines and

276
00:11:46,409 --> 00:11:50,799
now again I want to say this is just

277
00:11:49,419 --> 00:11:54,610
absolute when I say just yapping system

278
00:11:50,799 --> 00:11:57,699
I don't even mean X Windows I don't mean

279
00:11:54,610 --> 00:12:01,659
the good news standard library I mean

280
00:11:57,700 --> 00:12:02,920
like just the kernel source tree which

281
00:12:01,659 --> 00:12:05,549
admittedly includes some like

282
00:12:02,919 --> 00:12:08,769
documentation and things like this but

283
00:12:05,549 --> 00:12:16,120
this is looking at the lines of code in

284
00:12:08,769 --> 00:12:18,429
just the kernel okay so now let's ask

285
00:12:16,120 --> 00:12:22,840
the question because that's pretty bad

286
00:12:18,429 --> 00:12:26,949
right let's ask the question on this

287
00:12:22,840 --> 00:12:32,230
machine how many lines of code would it

288
00:12:26,950 --> 00:12:35,590
take to read a text file right all I

289
00:12:32,230 --> 00:12:37,570
want to do is I want to read in a text

290
00:12:35,590 --> 00:12:42,310
file that's an operation that we might

291
00:12:37,570 --> 00:12:44,200
do today right and if you think about

292
00:12:42,309 --> 00:12:46,989
the way that a modern person reads a

293
00:12:44,200 --> 00:12:50,400
text file they're in a web browser and

294
00:12:46,990 --> 00:12:53,529
the web browser goes to a URL it

295
00:12:50,399 --> 00:12:56,139
downloads a text file and displays it

296
00:12:53,529 --> 00:12:59,279
onto the screen how many lines of code

297
00:12:56,139 --> 00:13:01,779
must be functioning properly and

298
00:12:59,279 --> 00:13:05,799
performant Lee in order for that

299
00:13:01,779 --> 00:13:10,360
experience to work reliably and well the

300
00:13:05,799 --> 00:13:17,139
answer is I don't know but it's not less

301
00:13:10,360 --> 00:13:19,839
than 56 million I'm not kidding this is

302
00:13:17,139 --> 00:13:21,189
basically what it looks like right I

303
00:13:19,839 --> 00:13:24,340
picked

304
00:13:21,190 --> 00:13:27,640
random possible way that a website might

305
00:13:24,340 --> 00:13:30,610
commonly work such as a lamp stack right

306
00:13:27,639 --> 00:13:32,350
running WordPress but you could

307
00:13:30,610 --> 00:13:34,210
substitute those out with anything else

308
00:13:32,350 --> 00:13:38,399
you wanted they are not particularly

309
00:13:34,210 --> 00:13:40,600
high contributors right

310
00:13:38,399 --> 00:13:42,699
so let's take a look at what I'm talking

311
00:13:40,600 --> 00:13:43,120
about here first of all you need a web

312
00:13:42,700 --> 00:13:45,070
browser

313
00:13:43,120 --> 00:13:48,340
I picked chrome but all of them are

314
00:13:45,070 --> 00:13:50,800
fairly large just to run that web

315
00:13:48,340 --> 00:13:52,509
browser is 16 million lines of code that

316
00:13:50,799 --> 00:13:54,129
have to be functioning properly in order

317
00:13:52,509 --> 00:13:57,039
for your browser to work well and not

318
00:13:54,129 --> 00:13:58,720
crash right underneath that you needed

319
00:13:57,039 --> 00:14:00,789
an operating system and that operating

320
00:13:58,720 --> 00:14:03,759
system I picked Linux that's at least 17

321
00:14:00,789 --> 00:14:05,709
million lines of code again right that

322
00:14:03,759 --> 00:14:07,149
had to be working properly now do all of

323
00:14:05,710 --> 00:14:09,490
those lines either work probably no

324
00:14:07,149 --> 00:14:11,769
right because obviously there are code

325
00:14:09,490 --> 00:14:15,460
paths that will not be lit up when you

326
00:14:11,769 --> 00:14:17,379
do this but since you don't know which

327
00:14:15,460 --> 00:14:20,050
ones those are if you were to ask a

328
00:14:17,379 --> 00:14:22,179
person to go verify that this would work

329
00:14:20,049 --> 00:14:24,309
okay that is what they be staring at

330
00:14:22,179 --> 00:14:26,079
they'll know which ones are going to be

331
00:14:24,309 --> 00:14:29,319
hit by this path right they have to

332
00:14:26,080 --> 00:14:31,509
start to understand 17 million lines of

333
00:14:29,320 --> 00:14:33,670
codes layout roughly before they would

334
00:14:31,509 --> 00:14:34,990
even know what section of focus our

335
00:14:33,669 --> 00:14:37,259
attention on if they want to improve the

336
00:14:34,990 --> 00:14:39,370
performance or stability thereof right

337
00:14:37,259 --> 00:14:41,259
so you need at least Chrome and Linux I

338
00:14:39,370 --> 00:14:42,879
didn't even count X Windows in here but

339
00:14:41,259 --> 00:14:45,340
you probably need at least some

340
00:14:42,879 --> 00:14:47,080
substrate the most minimal version of

341
00:14:45,340 --> 00:14:49,149
this probably includes more that's why

342
00:14:47,080 --> 00:14:53,860
it's a minimum bound that I've said

343
00:14:49,149 --> 00:14:55,870
right so then on top of that I said well

344
00:14:53,860 --> 00:14:58,210
there's probably something like open up

345
00:14:55,870 --> 00:15:00,070
wrt running right you need your router

346
00:14:58,210 --> 00:15:02,050
the thing that's actually taking the

347
00:15:00,070 --> 00:15:03,820
packets off of your ethernet card and

348
00:15:02,049 --> 00:15:06,789
getting them out to the internet right

349
00:15:03,820 --> 00:15:09,570
that's gonna be another 1.5 million

350
00:15:06,789 --> 00:15:11,289
lines of code or something like that

351
00:15:09,570 --> 00:15:13,120
somewhere in there there's probably a

352
00:15:11,289 --> 00:15:16,480
Cisco router probably be multiple of

353
00:15:13,120 --> 00:15:18,909
them who knows probably other routers I

354
00:15:16,480 --> 00:15:21,129
don't know the backbone structure but

355
00:15:18,909 --> 00:15:22,719
depending on the hops between you and

356
00:15:21,129 --> 00:15:27,850
the other side of where you're reading

357
00:15:22,720 --> 00:15:29,740
the text file that code is probably many

358
00:15:27,850 --> 00:15:31,210
many millions of lines of code so we're

359
00:15:29,740 --> 00:15:33,460
understanding this by a huge amount

360
00:15:31,210 --> 00:15:34,080
because all of the OS is of all of the

361
00:15:33,460 --> 00:15:36,139
routers

362
00:15:34,080 --> 00:15:38,790
their firmware not counted here

363
00:15:36,139 --> 00:15:41,120
similarly I didn't count the firmware of

364
00:15:38,789 --> 00:15:44,909
the machine that the Chrome and Linux

365
00:15:41,120 --> 00:15:48,269
setup was running on so then it gets to

366
00:15:44,909 --> 00:15:50,730
the other side okay and let's say the

367
00:15:48,269 --> 00:15:52,860
other side isn't running Linux let's say

368
00:15:50,730 --> 00:15:54,240
maybe it's running FreeBSD right because

369
00:15:52,860 --> 00:15:56,399
that's got a lower line count so the

370
00:15:54,240 --> 00:15:58,200
lowest line count it might be running on

371
00:15:56,399 --> 00:16:00,240
the other side would be something like

372
00:15:58,200 --> 00:16:02,250
13 million but that might be more like

373
00:16:00,240 --> 00:16:03,570
17 million if it's running Linux or it

374
00:16:02,250 --> 00:16:05,129
may be if let's say it's running

375
00:16:03,570 --> 00:16:07,980
something like Windows or some other

376
00:16:05,129 --> 00:16:09,149
custom thing and AWS on the other side

377
00:16:07,980 --> 00:16:11,490
might be on this side right

378
00:16:09,149 --> 00:16:14,309
who knows those are many many millions

379
00:16:11,490 --> 00:16:16,169
of lines more but so somewhere in the

380
00:16:14,309 --> 00:16:18,839
order of 10 to 20 millions of lines at

381
00:16:16,169 --> 00:16:20,219
least is coming into play there then

382
00:16:18,840 --> 00:16:21,870
you've got all of the lines of code

383
00:16:20,220 --> 00:16:24,210
necessary to run the thing that actually

384
00:16:21,870 --> 00:16:25,679
served you it to you and oftentimes

385
00:16:24,210 --> 00:16:28,139
that's something like a lamp stack

386
00:16:25,679 --> 00:16:30,839
Apache PHP WordPress my sequel for

387
00:16:28,139 --> 00:16:32,039
example that's not a very big package

388
00:16:30,840 --> 00:16:34,680
even compared to what we're talking

389
00:16:32,039 --> 00:16:37,259
about that's only seven or eight million

390
00:16:34,679 --> 00:16:38,879
lines of code more if you had something

391
00:16:37,259 --> 00:16:40,080
more substantial running on that side

392
00:16:38,879 --> 00:16:42,450
again like 80 I've got something like

393
00:16:40,080 --> 00:16:46,040
that'd be way more lines of code

394
00:16:42,450 --> 00:16:49,740
probably right so again very

395
00:16:46,039 --> 00:16:51,480
conservative very low estimate of the

396
00:16:49,740 --> 00:16:55,169
number of lines of code that you're

397
00:16:51,480 --> 00:16:58,080
talking about here is like 55 million 56

398
00:16:55,169 --> 00:17:06,079
million lines of code a very low

399
00:16:58,080 --> 00:17:10,559
estimate 56 million lines of code okay

400
00:17:06,079 --> 00:17:14,419
so what you can kind of see on here when

401
00:17:10,559 --> 00:17:17,549
I highlight what's going on I is that

402
00:17:14,420 --> 00:17:20,339
over 50 percent of this problem is

403
00:17:17,549 --> 00:17:24,240
coming from nothing other than the part

404
00:17:20,338 --> 00:17:26,338
you can't even get rid of right so even

405
00:17:24,240 --> 00:17:28,920
before you know we could spend all day

406
00:17:26,338 --> 00:17:31,319
complaining about Apache and PHP and

407
00:17:28,920 --> 00:17:33,860
WordPress and my sequel and we could

408
00:17:31,319 --> 00:17:36,689
spend all day having those fun

409
00:17:33,859 --> 00:17:38,399
medium.com arguments about how switching

410
00:17:36,690 --> 00:17:42,180
to no js' would have solved this problem

411
00:17:38,400 --> 00:17:44,280
or whatever forget it we don't need to

412
00:17:42,180 --> 00:17:47,660
have that argument we don't even need to

413
00:17:44,279 --> 00:17:49,369
go there because even if

414
00:17:47,660 --> 00:17:53,390
everything else including the browser

415
00:17:49,369 --> 00:17:56,029
went to zero we haven't even reduced the

416
00:17:53,390 --> 00:17:58,730
problem by half there's still an

417
00:17:56,029 --> 00:18:02,569
operating system on either side of this

418
00:17:58,730 --> 00:18:04,130
at least and several operating systems

419
00:18:02,569 --> 00:18:09,169
in the middle if we were to be honest

420
00:18:04,130 --> 00:18:13,100
right and they're not going anywhere I

421
00:18:09,170 --> 00:18:15,860
don't care what new web technology

422
00:18:13,099 --> 00:18:24,709
hotness you think you're using you're

423
00:18:15,859 --> 00:18:27,349
still stuck with this okay so let's

424
00:18:24,710 --> 00:18:31,789
think about this problem we are stuck

425
00:18:27,349 --> 00:18:34,490
with a giant bloated mass underneath

426
00:18:31,789 --> 00:18:36,289
absolutely everything we do and there's

427
00:18:34,490 --> 00:18:40,250
nothing any of us could do about it

428
00:18:36,289 --> 00:18:42,769
pretty much right I mean I'm not gonna

429
00:18:40,250 --> 00:18:45,349
sit down tomorrow and write 17 million

430
00:18:42,769 --> 00:18:47,359
lines of code right it is not gonna

431
00:18:45,349 --> 00:18:49,639
happen and that's being conservative

432
00:18:47,359 --> 00:18:53,029
right that's assuming all I wanted to do

433
00:18:49,640 --> 00:18:55,070
was was do what Linux did right Windows

434
00:18:53,029 --> 00:18:56,720
is probably way more it's got more

435
00:18:55,069 --> 00:18:59,689
driver coverage right and all sorts of

436
00:18:56,720 --> 00:19:02,980
things I don't even want to know I

437
00:18:59,690 --> 00:19:05,840
really just don't but it'd be a disaster

438
00:19:02,980 --> 00:19:07,819
so is that the way the world works right

439
00:19:05,839 --> 00:19:11,439
is that the way the world works and the

440
00:19:07,819 --> 00:19:15,439
answer is it didn't use to work that way

441
00:19:11,440 --> 00:19:17,539
now this is a picture although I maybe

442
00:19:15,440 --> 00:19:20,090
it doesn't look like it right now this

443
00:19:17,539 --> 00:19:22,180
is a picture of like a thousand

444
00:19:20,089 --> 00:19:27,459
operating systems I'm not even kidding

445
00:19:22,180 --> 00:19:31,130
because in those days in the 80s and 90s

446
00:19:27,460 --> 00:19:34,130
generally what happened is every time

447
00:19:31,130 --> 00:19:34,880
you bought a new program on a home

448
00:19:34,130 --> 00:19:37,520
computer

449
00:19:34,880 --> 00:19:40,340
it came with its own custom operating

450
00:19:37,519 --> 00:19:43,279
system whose job it was to run whatever

451
00:19:40,339 --> 00:19:45,199
the software was because things were so

452
00:19:43,279 --> 00:19:47,180
limited on those systems that all there

453
00:19:45,200 --> 00:19:48,920
was was the BIOS you couldn't afford to

454
00:19:47,180 --> 00:19:51,289
run another operating system at the

455
00:19:48,920 --> 00:19:53,900
operation at the same time as you ran a

456
00:19:51,289 --> 00:19:58,190
performance-oriented program when you

457
00:19:53,900 --> 00:20:00,140
loaded doom onto your PC there was no

458
00:19:58,190 --> 00:20:01,250
question that it was going to take over

459
00:20:00,140 --> 00:20:03,230
the entire system

460
00:20:01,250 --> 00:20:07,430
sources to run it right the original do

461
00:20:03,230 --> 00:20:09,440
not the new one and prior to that in the

462
00:20:07,430 --> 00:20:11,630
90s in the 1980s with things like the

463
00:20:09,440 --> 00:20:14,620
amiga computer for example every game

464
00:20:11,630 --> 00:20:16,700
was a boot disk it booted into its own

465
00:20:14,619 --> 00:20:20,419
customized version of an operating

466
00:20:16,700 --> 00:20:22,130
system that ran what it needed to run to

467
00:20:20,420 --> 00:20:25,789
make its game work well and be

468
00:20:22,130 --> 00:20:28,490
performant and reliable right that's

469
00:20:25,789 --> 00:20:31,599
just what happened so there is no

470
00:20:28,490 --> 00:20:35,930
question we have a clear and obvious

471
00:20:31,599 --> 00:20:39,409
existence proof the notion that an

472
00:20:35,930 --> 00:20:42,740
operating system is an unachievable goal

473
00:20:39,410 --> 00:20:44,810
a fool's errand for anyone to attempt to

474
00:20:42,740 --> 00:20:47,720
create we know that that is a

475
00:20:44,809 --> 00:20:50,679
consequence of our times and certain

476
00:20:47,720 --> 00:20:54,200
decisions by Hardware designers and

477
00:20:50,680 --> 00:20:55,460
ecosystem maintainer z' and not because

478
00:20:54,200 --> 00:20:59,529
there is anything intrinsically true

479
00:20:55,460 --> 00:21:02,559
about it we know that in the past

480
00:20:59,529 --> 00:21:07,700
hardware that was very capable and very

481
00:21:02,559 --> 00:21:10,089
interesting made it so easy to create an

482
00:21:07,700 --> 00:21:16,370
operating system that literally

483
00:21:10,089 --> 00:21:19,909
everybody did it not a few people not

484
00:21:16,369 --> 00:21:21,709
even most people but literally everybody

485
00:21:19,910 --> 00:21:24,200
like I don't even remember it's like

486
00:21:21,710 --> 00:21:25,960
three games I can remember that shift on

487
00:21:24,200 --> 00:21:28,430
the Amiga that ran off of workbench

488
00:21:25,960 --> 00:21:37,640
every other thing was a boot disk that's

489
00:21:28,430 --> 00:21:43,160
just what happened okay

490
00:21:37,640 --> 00:21:46,009
so now that we're in the modern era what

491
00:21:43,160 --> 00:21:51,019
does it look like right well it looks

492
00:21:46,009 --> 00:21:53,480
like this this is the best sort of you

493
00:21:51,019 --> 00:21:55,549
know assessment I could sort of make at

494
00:21:53,480 --> 00:21:57,620
the time and those two starred ones

495
00:21:55,549 --> 00:21:58,970
there I think are I was sort of saying

496
00:21:57,619 --> 00:22:01,819
they're going away I was right there

497
00:21:58,970 --> 00:22:03,920
kind of gone now but we look at the

498
00:22:01,819 --> 00:22:06,349
world of today there are effectively

499
00:22:03,920 --> 00:22:09,050
three operating systems that are

500
00:22:06,349 --> 00:22:12,079
consumer operating systems right so

501
00:22:09,049 --> 00:22:13,460
remember here so many consumer offices I

502
00:22:12,079 --> 00:22:15,009
don't even know how to enumerate them

503
00:22:13,460 --> 00:22:17,808
all I don't even know

504
00:22:15,009 --> 00:22:19,548
how many different ones there may have

505
00:22:17,808 --> 00:22:22,250
been like I imagine

506
00:22:19,548 --> 00:22:24,168
some companies reuse the same sort of

507
00:22:22,250 --> 00:22:26,028
base OS code that they linked into

508
00:22:24,169 --> 00:22:27,409
multiple games and others DNA I don't

509
00:22:26,028 --> 00:22:29,028
even know how to count how many there

510
00:22:27,409 --> 00:22:31,010
were here though because there were so

511
00:22:29,028 --> 00:22:34,099
many different possible ones I just

512
00:22:31,009 --> 00:22:36,069
can't even start right here I can put

513
00:22:34,099 --> 00:22:39,319
them on one page and there on the left

514
00:22:36,069 --> 00:22:42,200
the Windows NT kernel the Linux kernel

515
00:22:39,319 --> 00:22:44,450
and the FreeBSD kernel that's it right

516
00:22:42,200 --> 00:22:46,278
the Windows NT kernel run species that

517
00:22:44,450 --> 00:22:48,590
are consumer-facing the Linux kernel

518
00:22:46,278 --> 00:22:52,159
runs PCs that are like you know server

519
00:22:48,589 --> 00:22:55,009
based or hard core you know developer

520
00:22:52,159 --> 00:22:58,940
based and the FreeBSD kernel runs Apple

521
00:22:55,009 --> 00:23:00,710
machines and that's it right and then I

522
00:22:58,940 --> 00:23:02,360
think also the FreeBSD cone was the

523
00:23:00,710 --> 00:23:04,009
PlayStation 3 &amp; 4 I put that kinda on

524
00:23:02,359 --> 00:23:05,990
there but you know and that's it and

525
00:23:04,009 --> 00:23:08,119
it's not even like when we went to

526
00:23:05,990 --> 00:23:10,490
phones that we had a bunch of new a

527
00:23:08,119 --> 00:23:12,918
persons we did right we just reused

528
00:23:10,490 --> 00:23:16,298
these so the Linux kernel kind of got

529
00:23:12,919 --> 00:23:19,009
you know Darwin sorry that Darwin I've

530
00:23:16,298 --> 00:23:20,148
got I can't remember the name of is it

531
00:23:19,009 --> 00:23:22,009
just called Android still I don't know

532
00:23:20,148 --> 00:23:23,028
for making Android the Linux kernel got

533
00:23:22,009 --> 00:23:24,379
repurposed for that I don't remember

534
00:23:23,028 --> 00:23:26,750
what it's called the bottom the

535
00:23:24,380 --> 00:23:31,100
previously kernel got turned into Darwin

536
00:23:26,750 --> 00:23:37,990
for iOS right and for Matt Goss 10 and

537
00:23:31,099 --> 00:23:42,528
that that's just what gets used right so

538
00:23:37,990 --> 00:23:44,390
hopefully it's not there's no

539
00:23:42,528 --> 00:23:46,548
exaggeration in the stuff that I've just

540
00:23:44,390 --> 00:23:49,399
said it really was true that we went

541
00:23:46,548 --> 00:23:50,599
from an era of a that anyone could

542
00:23:49,398 --> 00:23:52,489
program their own operating system and

543
00:23:50,599 --> 00:23:56,750
anyone could use a system to its fullest

544
00:23:52,490 --> 00:23:59,720
extent and we transitioned from that in

545
00:23:56,750 --> 00:24:03,679
the in the 90s we transition from that

546
00:23:59,720 --> 00:24:05,659
to a world where none of that's true

547
00:24:03,679 --> 00:24:08,090
basically no one can make an operating

548
00:24:05,659 --> 00:24:10,820
system now it's a hobbyist project at

549
00:24:08,089 --> 00:24:13,158
best if you do so no one will use it you

550
00:24:10,819 --> 00:24:20,000
could not ship it as a piece of software

551
00:24:13,159 --> 00:24:23,330
it's out of the question right so up

552
00:24:20,000 --> 00:24:25,250
till say mid 90s consumer wrapping

553
00:24:23,329 --> 00:24:28,339
system something that everyone could

554
00:24:25,250 --> 00:24:30,548
right past the mid 90s

555
00:24:28,339 --> 00:24:32,869
super wrapping system there's three and

556
00:24:30,548 --> 00:24:35,210
maybe we'll never be anymore

557
00:24:32,869 --> 00:24:41,149
who knows right we don't know still

558
00:24:35,210 --> 00:24:44,600
waiting to find out okay so now we asked

559
00:24:41,150 --> 00:24:46,220
question well why right what changed

560
00:24:44,599 --> 00:24:48,889
why was this the case I mean there's got

561
00:24:46,220 --> 00:24:50,870
to be a reason it doesn't seem likely

562
00:24:48,890 --> 00:24:53,720
that we just went from a world where

563
00:24:50,869 --> 00:24:55,369
offering systems were on no-brainer to a

564
00:24:53,720 --> 00:24:57,528
world where operating systems are

565
00:24:55,369 --> 00:25:00,019
something that there's no chance you

566
00:24:57,528 --> 00:25:02,569
could ever possibly right and again it's

567
00:25:00,019 --> 00:25:04,220
just a hobbyist or entertainment or

568
00:25:02,569 --> 00:25:07,129
educational or maybe special purpose if

569
00:25:04,220 --> 00:25:08,720
you're doing embedded hardware procedure

570
00:25:07,130 --> 00:25:11,179
to write one and you certainly wouldn't

571
00:25:08,720 --> 00:25:15,500
do it to ship a game for example that's

572
00:25:11,179 --> 00:25:18,169
just absolutely ridiculous right well

573
00:25:15,500 --> 00:25:21,380
let me try to suggest some reasons how

574
00:25:18,169 --> 00:25:25,278
we ended up here in 1995 we introduced

575
00:25:21,380 --> 00:25:28,360
USB and the concept of plug in play now

576
00:25:25,278 --> 00:25:33,319
what this was is it was a wire protocol

577
00:25:28,359 --> 00:25:35,678
for serial interfaces and it was spec to

578
00:25:33,319 --> 00:25:37,970
sort of say well we don't really know

579
00:25:35,679 --> 00:25:40,399
what's gonna be plugged into this thing

580
00:25:37,970 --> 00:25:42,710
and so what we'll do is just we'll just

581
00:25:40,398 --> 00:25:46,038
assume that the person who makes the

582
00:25:42,710 --> 00:25:48,019
hardware will do something right

583
00:25:46,038 --> 00:25:49,908
we don't know what but we'll do

584
00:25:48,019 --> 00:25:51,528
something and they'll ship a piece of

585
00:25:49,909 --> 00:25:53,600
hardware the other software that sits on

586
00:25:51,528 --> 00:25:56,169
the other side and knows how to read the

587
00:25:53,599 --> 00:26:03,619
something and write to the something

588
00:25:56,169 --> 00:26:05,750
right and that was USB in 1996 we

589
00:26:03,619 --> 00:26:10,069
started the transition to mandatory hard

590
00:26:05,750 --> 00:26:13,429
rugged graphics right and again unlike

591
00:26:10,069 --> 00:26:15,288
earlier when I say mandatory Harbor

592
00:26:13,429 --> 00:26:17,600
Telegraph's I mean on the PC unlike

593
00:26:15,288 --> 00:26:19,640
earlier when the when there was hard

594
00:26:17,599 --> 00:26:22,398
work sorry to graphics but it was

595
00:26:19,640 --> 00:26:25,340
specific to the platform so for example

596
00:26:22,398 --> 00:26:29,538
the amiga computer the Atari ST the

597
00:26:25,339 --> 00:26:32,000
commerce 64 all of these had things in

598
00:26:29,538 --> 00:26:34,190
them that would do special purpose

599
00:26:32,000 --> 00:26:36,679
graphics operations you kind of needed

600
00:26:34,190 --> 00:26:39,830
them too because they were just too slow

601
00:26:36,679 --> 00:26:42,910
CPU wise to do anything if you didn't

602
00:26:39,829 --> 00:26:45,439
have something there to help

603
00:26:42,910 --> 00:26:48,380
unlike those platforms where it was

604
00:26:45,440 --> 00:26:51,470
specified what that hardware did and how

605
00:26:48,380 --> 00:26:54,140
you might program it we started

606
00:26:51,470 --> 00:26:55,450
introducing a new world where that was

607
00:26:54,140 --> 00:26:58,850
no longer true

608
00:26:55,450 --> 00:27:01,009
instead you now had mandatory hard work

609
00:26:58,849 --> 00:27:04,189
centered graphics that you did not know

610
00:27:01,009 --> 00:27:06,109
what it was you had a new idea could be

611
00:27:04,190 --> 00:27:08,480
anything right there's just gonna be a

612
00:27:06,109 --> 00:27:10,969
card in the computer with a graphics

613
00:27:08,480 --> 00:27:12,559
accelerator of completely opaque design

614
00:27:10,970 --> 00:27:14,900
and you're just gonna have to cross your

615
00:27:12,559 --> 00:27:17,419
fingers that there's some kind of an

616
00:27:14,900 --> 00:27:19,130
interface somewhere that will allow you

617
00:27:17,420 --> 00:27:20,960
to do something with it and that

618
00:27:19,130 --> 00:27:22,790
something will be largely dictated by

619
00:27:20,960 --> 00:27:25,789
what the interface happened to spec out

620
00:27:22,789 --> 00:27:28,659
and how right very similar to USB it's

621
00:27:25,789 --> 00:27:34,789
like the USB of graphics basically right

622
00:27:28,660 --> 00:27:37,759
and if we go back and look at this graph

623
00:27:34,789 --> 00:27:40,430
you can see that there's a lesson

624
00:27:37,759 --> 00:27:42,410
inflection point there right like the

625
00:27:40,430 --> 00:27:44,930
complexity of Linux is going up at a

626
00:27:42,410 --> 00:27:47,240
pretty reasonable rate until we hit the

627
00:27:44,930 --> 00:27:50,420
introduction of these things and all of

628
00:27:47,240 --> 00:27:52,700
a sudden were into no-man's land right

629
00:27:50,420 --> 00:27:55,310
we then just shoot straight up the curve

630
00:27:52,700 --> 00:27:58,640
and it's like an exponential curve from

631
00:27:55,309 --> 00:28:03,429
that point on spiraling off into God

632
00:27:58,640 --> 00:28:07,910
knows where right I can't prove that

633
00:28:03,430 --> 00:28:11,810
this is why there's certainly plenty of

634
00:28:07,910 --> 00:28:14,420
other other reasons it could be why but

635
00:28:11,809 --> 00:28:16,339
if we think of the simplicity of the

636
00:28:14,420 --> 00:28:17,930
platform and the chances that someone

637
00:28:16,339 --> 00:28:21,619
could produce an operating system for it

638
00:28:17,930 --> 00:28:24,830
as being sort of the wildfire that

639
00:28:21,619 --> 00:28:26,869
clears out the forest if you will so

640
00:28:24,829 --> 00:28:29,929
that new trees can grow and healthy

641
00:28:26,869 --> 00:28:33,049
trees can grow we got rid of that

642
00:28:29,930 --> 00:28:37,250
ability our forests no longer can have a

643
00:28:33,049 --> 00:28:46,509
wildfire and so now we just croft on top

644
00:28:37,250 --> 00:28:48,829
of cruft forever right so

645
00:28:46,509 --> 00:28:51,049
now I'd like to transition from talking

646
00:28:48,829 --> 00:28:55,250
about what I think the problem was and

647
00:28:51,049 --> 00:28:57,589
why I think the problem is a problem to

648
00:28:55,250 --> 00:29:00,650
asking the question is there something

649
00:28:57,589 --> 00:29:05,629
we could do about this today right is

650
00:29:00,650 --> 00:29:07,940
there a way we could go back to a eco

651
00:29:05,630 --> 00:29:11,180
system that no longer had these

652
00:29:07,940 --> 00:29:17,420
undesirable properties that I argue that

653
00:29:11,180 --> 00:29:20,558
we now have right a eco system where if

654
00:29:17,420 --> 00:29:24,950
you will if you wanted to ship a game

655
00:29:20,558 --> 00:29:29,389
that you booted to right like I stuck a

656
00:29:24,950 --> 00:29:32,569
USB stick in the computer and I booted

657
00:29:29,390 --> 00:29:34,690
into the game so nothing else was

658
00:29:32,569 --> 00:29:41,299
running let's say that I am the most

659
00:29:34,690 --> 00:29:43,519
hardcore eSports person and I want to

660
00:29:41,299 --> 00:29:47,619
make sure that there is literally

661
00:29:43,519 --> 00:29:51,139
nothing doing anything on my platform

662
00:29:47,619 --> 00:29:53,000
other than this game and it will have

663
00:29:51,140 --> 00:29:56,390
the full system resources with no

664
00:29:53,000 --> 00:30:01,160
interruptions and no variability I could

665
00:29:56,390 --> 00:30:05,360
actually do that I could expect epic

666
00:30:01,160 --> 00:30:07,790
megagames to ship me a thumb stick with

667
00:30:05,359 --> 00:30:15,019
fortnight on it that I stick into the

668
00:30:07,789 --> 00:30:17,119
front of my computer and boot okay do we

669
00:30:15,019 --> 00:30:21,109
have any chance of seeing that world

670
00:30:17,119 --> 00:30:23,209
again and I hopefully I've communicated

671
00:30:21,109 --> 00:30:26,599
some reasons why we might want to see

672
00:30:23,210 --> 00:30:28,130
that world again even if that's not the

673
00:30:26,599 --> 00:30:29,869
end goal even if what we'd rather have

674
00:30:28,130 --> 00:30:35,450
is just some better operating systems

675
00:30:29,869 --> 00:30:38,719
right the answer is I think there is and

676
00:30:35,450 --> 00:30:41,360
unfortunately it's not really up to

677
00:30:38,720 --> 00:30:43,819
software developers to get there we can

678
00:30:41,359 --> 00:30:47,479
help but unfortunately I think it's

679
00:30:43,819 --> 00:30:50,928
really up to hardware people to start

680
00:30:47,480 --> 00:30:55,720
taking this problem seriously and here's

681
00:30:50,929 --> 00:30:58,580
why so nowadays esos es which are called

682
00:30:55,720 --> 00:30:59,620
systems on a chip or SOC is the short

683
00:30:58,579 --> 00:31:04,240
version right

684
00:30:59,619 --> 00:31:06,649
esos es are becoming a very common very

685
00:31:04,240 --> 00:31:09,349
sort of valuable to the product line

686
00:31:06,650 --> 00:31:11,690
even skew for many hardware

687
00:31:09,349 --> 00:31:16,609
manufacturers the drive towards

688
00:31:11,690 --> 00:31:18,620
miniaturization cell phones tablet PCs

689
00:31:16,609 --> 00:31:20,839
the Internet of Things

690
00:31:18,619 --> 00:31:23,119
all of these trends where hardware

691
00:31:20,839 --> 00:31:27,139
manufacturers are trying to get their

692
00:31:23,119 --> 00:31:30,589
chips into computer devices that are not

693
00:31:27,140 --> 00:31:32,680
in the traditional form factor has meant

694
00:31:30,589 --> 00:31:35,470
that there's been a tremendous amount of

695
00:31:32,680 --> 00:31:39,049
emphasis placed on integrating

696
00:31:35,470 --> 00:31:42,890
components into single modules to

697
00:31:39,049 --> 00:31:45,799
eliminate waste you look inside a PC and

698
00:31:42,890 --> 00:31:48,950
you see the motherboard there's so much

699
00:31:45,799 --> 00:31:51,759
crust on this thing that you'd never be

700
00:31:48,950 --> 00:31:56,200
able to get it down into a phone right

701
00:31:51,759 --> 00:32:00,079
and so in order to legitimately tackle

702
00:31:56,200 --> 00:32:02,900
these problems of portable computing and

703
00:32:00,079 --> 00:32:07,699
small form-factor computing for very

704
00:32:02,900 --> 00:32:10,250
obvious reasons you need to have all of

705
00:32:07,700 --> 00:32:16,309
your stuff shrunk down and minimized and

706
00:32:10,250 --> 00:32:18,950
placed in into some coherent cruft free

707
00:32:16,309 --> 00:32:21,139
package right well spy not cropped free

708
00:32:18,950 --> 00:32:22,370
but a lot less corrupt right a lot of

709
00:32:21,140 --> 00:32:24,230
the interconnects and Inter

710
00:32:22,369 --> 00:32:26,839
communication needs to be simplified and

711
00:32:24,230 --> 00:32:31,370
dropped down in order to get to that

712
00:32:26,839 --> 00:32:34,309
point okay so this is a very common way

713
00:32:31,369 --> 00:32:36,109
of designing computers now and it's

714
00:32:34,309 --> 00:32:37,819
largely because of that that sort of

715
00:32:36,109 --> 00:32:39,079
drive transmutation again these are not

716
00:32:37,819 --> 00:32:42,769
special-purpose

717
00:32:39,079 --> 00:32:44,990
they are not embedded computing for some

718
00:32:42,769 --> 00:32:47,089
kind of microcontroller in something

719
00:32:44,990 --> 00:32:49,009
that controls the water pressure at a

720
00:32:47,089 --> 00:32:50,359
sewage treatment plant right which is

721
00:32:49,009 --> 00:32:52,009
where you might have thought about this

722
00:32:50,359 --> 00:32:53,269
kind of thing before it's not an

723
00:32:52,009 --> 00:32:55,549
embedded microcontroller in that sense

724
00:32:53,269 --> 00:32:57,440
it's literally a consumer part it's

725
00:32:55,549 --> 00:33:00,379
something that goes in your phone or

726
00:32:57,440 --> 00:33:03,309
your tablet right your set-top box your

727
00:33:00,380 --> 00:33:08,390
television your refrigerator pretty soon

728
00:33:03,309 --> 00:33:11,149
etc right because this is now the new

729
00:33:08,390 --> 00:33:13,130
standard for consumer devices well guess

730
00:33:11,150 --> 00:33:16,040
what it starts to

731
00:33:13,130 --> 00:33:19,730
look a lot more like a home computer

732
00:33:16,039 --> 00:33:22,690
from the 1980s all of the chips are

733
00:33:19,730 --> 00:33:25,250
designed together packaged together

734
00:33:22,690 --> 00:33:30,110
interconnected in a predictable way and

735
00:33:25,250 --> 00:33:32,240
there is no configurability there aren't

736
00:33:30,109 --> 00:33:35,569
two possible graphics cards that can be

737
00:33:32,240 --> 00:33:39,140
on this die there's one right there

738
00:33:35,569 --> 00:33:41,269
aren't two or three or four or ten

739
00:33:39,140 --> 00:33:45,259
different USB controllers that could be

740
00:33:41,269 --> 00:33:49,069
attached to this thing there's one right

741
00:33:45,259 --> 00:33:51,589
there aren't even multiple CPUs it's

742
00:33:49,069 --> 00:33:54,349
just all baked together it's all one

743
00:33:51,589 --> 00:33:57,279
system and that starts to look a lot

744
00:33:54,349 --> 00:34:05,329
more like a home computer from 1986

745
00:33:57,279 --> 00:34:08,389
right so my proposal is what if we were

746
00:34:05,329 --> 00:34:11,239
to extend the conceptual model that we

747
00:34:08,389 --> 00:34:14,389
have with something like the x86 or now

748
00:34:11,239 --> 00:34:17,779
x64 eisah I consider those things kind

749
00:34:14,389 --> 00:34:22,370
of the same thing right to cover an

750
00:34:17,780 --> 00:34:25,850
entire system on a chip all right now

751
00:34:22,369 --> 00:34:28,339
the reason I make this parallel instead

752
00:34:25,849 --> 00:34:31,219
of introducing a concept wholesale is

753
00:34:28,340 --> 00:34:35,179
that invariably whenever you suggest the

754
00:34:31,219 --> 00:34:38,539
notion that you might be able to make

755
00:34:35,179 --> 00:34:40,700
the design of the hardware interface for

756
00:34:38,539 --> 00:34:43,429
an entire architecture robust

757
00:34:40,699 --> 00:34:48,168
predictable consistent testable and

758
00:34:43,429 --> 00:34:51,950
known people act like you're saying you

759
00:34:48,168 --> 00:34:54,619
want to go to the moon on the back of a

760
00:34:51,949 --> 00:34:57,169
giant turtle right it's like you're

761
00:34:54,619 --> 00:34:59,119
seeing something that's so far from

762
00:34:57,170 --> 00:35:03,340
anything they could possibly imagine

763
00:34:59,119 --> 00:35:05,329
being true or desirable or possible as

764
00:35:03,340 --> 00:35:09,380
to make it ludicrous to even suggest

765
00:35:05,329 --> 00:35:11,569
such a thing right if you suggest making

766
00:35:09,380 --> 00:35:12,860
an ISA for those who don't know that

767
00:35:11,570 --> 00:35:17,050
it's an instruction set architecture is

768
00:35:12,860 --> 00:35:20,120
just a definition of how a set of memory

769
00:35:17,050 --> 00:35:22,220
layouts like how a series of pieces of

770
00:35:20,119 --> 00:35:23,449
data in memory are interpreted by a

771
00:35:22,219 --> 00:35:26,399
piece of hardware to produce a result

772
00:35:23,449 --> 00:35:30,538
right so a program an X

773
00:35:26,400 --> 00:35:32,700
the x86 program that is SPECT to the x86

774
00:35:30,539 --> 00:35:35,010
eisah you know if you hand it to an x86

775
00:35:32,699 --> 00:35:37,230
chip it will run and it will do the same

776
00:35:35,010 --> 00:35:42,630
thing on every x86 chip that's all we're

777
00:35:37,230 --> 00:35:45,269
talking about so if it is just that even

778
00:35:42,630 --> 00:35:49,650
to GPU vendors for just the graphics

779
00:35:45,269 --> 00:35:50,670
part it is again like you were traveling

780
00:35:49,650 --> 00:35:54,480
to the moon on the back of a giant

781
00:35:50,670 --> 00:35:59,309
turtle so the reason that I liken it

782
00:35:54,480 --> 00:36:01,528
here is because again I'm not talking

783
00:35:59,309 --> 00:36:03,778
about something that is unprecedented or

784
00:36:01,528 --> 00:36:07,650
weird I'm talking about something that

785
00:36:03,778 --> 00:36:12,809
not only was standard but that has been

786
00:36:07,650 --> 00:36:14,849
standard for decades and not only was

787
00:36:12,809 --> 00:36:17,130
standard for decades but proved to be

788
00:36:14,849 --> 00:36:19,380
the most valuable resource for the

789
00:36:17,130 --> 00:36:25,950
company that controlled it that they

790
00:36:19,380 --> 00:36:27,390
ever had so I think it's time to start

791
00:36:25,949 --> 00:36:29,788
revisiting this concept and stop

792
00:36:27,389 --> 00:36:31,108
thinking it's ridiculous not only is it

793
00:36:29,789 --> 00:36:34,140
not ridiculous

794
00:36:31,108 --> 00:36:38,808
it pays so many dividends and let me

795
00:36:34,139 --> 00:36:38,808
talk to you about how that's true right

796
00:36:39,289 --> 00:36:42,289
okay

797
00:36:45,170 --> 00:36:49,019
what we're living in right now is a

798
00:36:47,369 --> 00:36:50,609
world where the people who create the

799
00:36:49,019 --> 00:36:52,679
software and the people who create the

800
00:36:50,610 --> 00:36:55,440
hardware are separated by so many layers

801
00:36:52,679 --> 00:36:57,480
of additional legacy or modernized

802
00:36:55,440 --> 00:36:59,909
software depending on what part you're

803
00:36:57,480 --> 00:37:02,820
talking about that there is no way to

804
00:36:59,909 --> 00:37:05,549
test anything for performance or

805
00:37:02,820 --> 00:37:07,950
reliability period and I mean that

806
00:37:05,550 --> 00:37:09,630
literally there is no way to test a

807
00:37:07,949 --> 00:37:12,269
piece of software in the modern world

808
00:37:09,630 --> 00:37:14,490
the only way you can really hope to get

809
00:37:12,269 --> 00:37:16,050
it reliable is by sending it out in the

810
00:37:14,489 --> 00:37:17,849
world and fielding their rubber reports

811
00:37:16,050 --> 00:37:19,620
as they come back because there are so

812
00:37:17,849 --> 00:37:21,630
many configurations of things out there

813
00:37:19,619 --> 00:37:26,339
there are so many different substrates

814
00:37:21,630 --> 00:37:27,510
again 50 60 70 is probably low we're

815
00:37:26,340 --> 00:37:30,210
probably talking about hundreds of

816
00:37:27,510 --> 00:37:34,260
millions of lines of code in between the

817
00:37:30,210 --> 00:37:37,340
thing you wrote right and the thing that

818
00:37:34,260 --> 00:37:40,080
actually happens on the computer

819
00:37:37,340 --> 00:37:41,430
contracts this with just straight x86

820
00:37:40,079 --> 00:37:44,940
code that just need to compute a result

821
00:37:41,429 --> 00:37:46,469
it's 100% reliable pretty much if you

822
00:37:44,940 --> 00:37:47,700
just want to do a for loop that adds

823
00:37:46,469 --> 00:37:50,849
some numbers together or something like

824
00:37:47,699 --> 00:37:52,919
this in an x86 eisah it is almost

825
00:37:50,849 --> 00:37:54,329
impossible to have that screw up the

826
00:37:52,920 --> 00:37:55,530
times when it there has been mistakes

827
00:37:54,329 --> 00:37:57,779
have been few and far between there's

828
00:37:55,530 --> 00:37:59,760
like the Pentium divide bug or things

829
00:37:57,780 --> 00:38:02,910
like that are like the only times we

830
00:37:59,760 --> 00:38:04,620
have run into problems with that but in

831
00:38:02,909 --> 00:38:06,599
terms of all the rest of the stuff that

832
00:38:04,619 --> 00:38:10,170
surrounds that x86 eisah

833
00:38:06,599 --> 00:38:12,299
it's a nightmare completely untestable

834
00:38:10,170 --> 00:38:14,550
completely unreliable completely

835
00:38:12,300 --> 00:38:16,470
insecure completely unmaintainable it's

836
00:38:14,550 --> 00:38:19,410
all of that stuff I showed at the

837
00:38:16,469 --> 00:38:22,859
beginning beginning the the crashes the

838
00:38:19,409 --> 00:38:24,960
updating all of that stuff that world is

839
00:38:22,860 --> 00:38:27,660
unavoidable right now I maintain because

840
00:38:24,960 --> 00:38:29,940
there's so much stuff in between what

841
00:38:27,659 --> 00:38:32,179
could you possibly do shipping reliable

842
00:38:29,940 --> 00:38:38,670
software or performance software is very

843
00:38:32,179 --> 00:38:42,089
difficult or impossible okay but if we

844
00:38:38,670 --> 00:38:45,090
were to lock it down right if we were to

845
00:38:42,090 --> 00:38:46,760
say no we're going to settle on a

846
00:38:45,090 --> 00:38:49,710
specific eisah

847
00:38:46,760 --> 00:38:51,570
it gets revised every couple of years by

848
00:38:49,710 --> 00:38:53,820
making some additions to it just like

849
00:38:51,570 --> 00:38:55,590
the x86 x64 eisah

850
00:38:53,820 --> 00:38:57,550
it goes through revisions every so often

851
00:38:55,590 --> 00:39:00,640
but we all

852
00:38:57,550 --> 00:39:03,039
move to them in a wave as they become

853
00:39:00,639 --> 00:39:09,059
accepted by the mainstream harbour

854
00:39:03,039 --> 00:39:12,250
market the payoffs would be immense

855
00:39:09,059 --> 00:39:14,230
suddenly you could test that something

856
00:39:12,250 --> 00:39:15,280
that ran the same on your system would

857
00:39:14,230 --> 00:39:16,630
rant run the same an eye on someone

858
00:39:15,280 --> 00:39:17,530
else's system you wouldn't be guessing

859
00:39:16,630 --> 00:39:21,670
anymore

860
00:39:17,530 --> 00:39:24,340
right you would know because there

861
00:39:21,670 --> 00:39:26,110
wouldn't be tons and tons of variable

862
00:39:24,340 --> 00:39:28,390
state software in between in various

863
00:39:26,110 --> 00:39:30,460
states of update for various different

864
00:39:28,389 --> 00:39:34,960
types of things that interpret things

865
00:39:30,460 --> 00:39:37,210
differently right bugs would actually be

866
00:39:34,960 --> 00:39:39,010
real bugs in the hardware that would be

867
00:39:37,210 --> 00:39:41,320
embarrassing for the companies who ship

868
00:39:39,010 --> 00:39:45,160
them and they would have to introduce

869
00:39:41,320 --> 00:39:46,570
actual compliance like intel does to

870
00:39:45,159 --> 00:39:49,929
make sure that they ship things that

871
00:39:46,570 --> 00:39:52,660
actually worked and after that point any

872
00:39:49,929 --> 00:39:56,289
bug that actually occurs is a bug in

873
00:39:52,659 --> 00:39:57,969
your software that you shipped and it's

874
00:39:56,289 --> 00:40:00,099
something you could fix and something

875
00:39:57,969 --> 00:40:02,409
you could have tested the user is no

876
00:40:00,099 --> 00:40:04,539
longer running a random stack of 60

877
00:40:02,409 --> 00:40:06,579
million lines of code in addition to the

878
00:40:04,539 --> 00:40:07,840
hundred thousand you shipped they're

879
00:40:06,579 --> 00:40:10,659
just running the hundred thousand you

880
00:40:07,840 --> 00:40:17,260
shipped and if it worked on your machine

881
00:40:10,659 --> 00:40:21,699
it works on their machine okay we're

882
00:40:17,260 --> 00:40:24,460
already seeing indications of what even

883
00:40:21,699 --> 00:40:26,460
tiny steps in this direction would bring

884
00:40:24,460 --> 00:40:29,110
in terms of efficiency reliability

885
00:40:26,460 --> 00:40:33,280
security performance all these sorts of

886
00:40:29,110 --> 00:40:35,380
things right around the time that I was

887
00:40:33,280 --> 00:40:36,940
giving this lecture in 2015 people were

888
00:40:35,380 --> 00:40:39,700
talking about mantle what was mantle

889
00:40:36,940 --> 00:40:43,030
nothing special it's just a simple way

890
00:40:39,699 --> 00:40:44,500
of talking to AMD cards that's closer to

891
00:40:43,030 --> 00:40:49,930
what their driver actually was already

892
00:40:44,500 --> 00:40:51,849
doing right I and hey lo and behold when

893
00:40:49,929 --> 00:40:54,129
you got the AMD driver out of the way

894
00:40:51,849 --> 00:40:58,529
all of a sudden the exact same piece of

895
00:40:54,130 --> 00:41:01,450
hardware performed way way better right

896
00:40:58,530 --> 00:41:03,100
here are the performance increases that

897
00:41:01,449 --> 00:41:04,659
we're seeing just from getting rid of

898
00:41:03,099 --> 00:41:06,339
the Radian driver that's all that

899
00:41:04,659 --> 00:41:11,588
happened and not even all of it just

900
00:41:06,340 --> 00:41:14,710
part of it right so 50 percent

901
00:41:11,588 --> 00:41:17,469
more performance from getting rid of bad

902
00:41:14,710 --> 00:41:19,989
code that sat between you and the

903
00:41:17,469 --> 00:41:22,450
hardware that's all that happened you

904
00:41:19,989 --> 00:41:25,289
didn't buy a new graphics card you

905
00:41:22,449 --> 00:41:27,278
didn't rewrite your engine you just

906
00:41:25,289 --> 00:41:28,420
finally got a chance to program the

907
00:41:27,278 --> 00:41:31,088
thing closer to what it actually was

908
00:41:28,420 --> 00:41:33,608
right imagine if you took that to the

909
00:41:31,088 --> 00:41:34,778
next step and said look you don't even

910
00:41:33,608 --> 00:41:36,880
need any driver at all

911
00:41:34,778 --> 00:41:41,018
forget mantle here's just how you

912
00:41:36,880 --> 00:41:43,329
download code to a GPU and run it again

913
00:41:41,018 --> 00:41:46,058
more reliability you take code out of

914
00:41:43,329 --> 00:41:48,339
the pipe it becomes more symmetric

915
00:41:46,059 --> 00:41:50,109
between the user's machine and yours the

916
00:41:48,338 --> 00:41:52,179
efficiency goes up the reliability goes

917
00:41:50,108 --> 00:41:54,190
up and of course the security goes up

918
00:41:52,179 --> 00:41:57,328
because the less lines of code there are

919
00:41:54,190 --> 00:41:59,950
the less exploit parts there are right

920
00:41:57,329 --> 00:42:01,089
every one of those 100 million lines of

921
00:41:59,949 --> 00:42:03,909
code or who even knows how many there

922
00:42:01,088 --> 00:42:06,429
are now in between your app and your

923
00:42:03,909 --> 00:42:08,558
hardware is an exploit possibility every

924
00:42:06,429 --> 00:42:11,440
single one of those can have an

925
00:42:08,559 --> 00:42:12,999
exploitable bug in it every time you

926
00:42:11,440 --> 00:42:17,318
remove one you are removing a

927
00:42:12,998 --> 00:42:20,828
possibility for a virus or a hacker to

928
00:42:17,318 --> 00:42:24,940
do something untoward with your system

929
00:42:20,829 --> 00:42:27,339
right now that's on the left the mantle

930
00:42:24,940 --> 00:42:30,190
performance on the right is a great

931
00:42:27,338 --> 00:42:32,619
paper I recommend everyone read it it

932
00:42:30,190 --> 00:42:35,858
was actually came out when I was making

933
00:42:32,619 --> 00:42:39,099
this lecture and I was like yes this is

934
00:42:35,858 --> 00:42:41,588
what I've been thinking and basically

935
00:42:39,099 --> 00:42:43,690
what it was is saying hey what if we

936
00:42:41,588 --> 00:42:46,929
just made the operating system be a

937
00:42:43,690 --> 00:42:48,700
thing that all it does is broker access

938
00:42:46,929 --> 00:42:50,409
to the hardware but otherwise we let the

939
00:42:48,699 --> 00:42:52,058
hardware be almost directly programmable

940
00:42:50,409 --> 00:42:54,308
as much as we can and they could only

941
00:42:52,059 --> 00:42:55,180
really do this as sort of a simple test

942
00:42:54,309 --> 00:42:57,910
because they couldn't modify the

943
00:42:55,179 --> 00:43:00,368
hardware but what they found was when

944
00:42:57,909 --> 00:43:02,798
they made this modification and made

945
00:43:00,369 --> 00:43:04,239
sort of a prototype version of it based

946
00:43:02,798 --> 00:43:06,759
off of Linux where they stripped things

947
00:43:04,239 --> 00:43:10,838
out and made special pathways to test

948
00:43:06,759 --> 00:43:13,509
this they found that the performance

949
00:43:10,838 --> 00:43:17,048
they got over straight Linux was

950
00:43:13,509 --> 00:43:18,639
dramatic right the amount of network

951
00:43:17,048 --> 00:43:20,048
processing that's what they were testing

952
00:43:18,639 --> 00:43:22,298
like network packet processing stuff

953
00:43:20,048 --> 00:43:26,280
like that that they could achieve over

954
00:43:22,298 --> 00:43:31,119
the Linux kernel was nuts right

955
00:43:26,280 --> 00:43:33,460
just absolutely nuts and again nothing

956
00:43:31,119 --> 00:43:36,010
different happened the computer didn't

957
00:43:33,460 --> 00:43:39,599
change all they did was effectively

958
00:43:36,010 --> 00:43:45,220
delete bad code from the from the pipe

959
00:43:39,599 --> 00:43:49,869
they just got rid of it and so the the

960
00:43:45,219 --> 00:43:52,559
benefits to everyone of removing code

961
00:43:49,869 --> 00:43:55,390
from a system cannot be overstated

962
00:43:52,559 --> 00:43:58,150
everything gets better when the code

963
00:43:55,389 --> 00:44:04,088
gets smaller pretty much across the

964
00:43:58,150 --> 00:44:08,050
board so if we actually wanted to start

965
00:44:04,088 --> 00:44:11,259
pursuing this as a real path right going

966
00:44:08,050 --> 00:44:14,200
down this road and saying how do we

967
00:44:11,260 --> 00:44:18,070
maybe get to a future where hardware as

968
00:44:14,199 --> 00:44:21,009
a rule is designed under a set of

969
00:44:18,070 --> 00:44:24,039
guidelines that say here is the memory

970
00:44:21,010 --> 00:44:27,880
that you take in and here is the memory

971
00:44:24,039 --> 00:44:31,059
that you put out and that's your job you

972
00:44:27,880 --> 00:44:33,309
don't get a driver right you don't get

973
00:44:31,059 --> 00:44:35,349
one there's no such thing as a driver a

974
00:44:33,309 --> 00:44:37,299
hardware company ships Hardware you

975
00:44:35,349 --> 00:44:39,190
don't get to ship software if you want

976
00:44:37,300 --> 00:44:41,619
to ship software it's gonna have to be

977
00:44:39,190 --> 00:44:43,358
on the hardware itself and we're not

978
00:44:41,619 --> 00:44:48,220
gonna update it so it better be really

979
00:44:43,358 --> 00:44:49,358
good right and again people freaked out

980
00:44:48,219 --> 00:44:52,719
at that suggestion

981
00:44:49,358 --> 00:44:55,690
that's what Intel does every day right

982
00:44:52,719 --> 00:44:59,439
that is what happens with the x86 eisah

983
00:44:55,690 --> 00:45:02,889
right or the XS t4i so now is it harder

984
00:44:59,440 --> 00:45:05,099
yes but that should be the job that

985
00:45:02,889 --> 00:45:07,900
should be what a hardware company is is

986
00:45:05,099 --> 00:45:11,559
producing reliable hardware right and

987
00:45:07,900 --> 00:45:14,650
Plus once you demand that as a minimum

988
00:45:11,559 --> 00:45:18,009
bar everyone's on a on a level playing

989
00:45:14,650 --> 00:45:22,539
field right if everyone has to meet that

990
00:45:18,010 --> 00:45:24,160
bar then nobody has to worry about the

991
00:45:22,539 --> 00:45:25,570
fact that they can't cheat in their

992
00:45:24,159 --> 00:45:28,389
driver and do these other things because

993
00:45:25,570 --> 00:45:30,280
no one can cheat so you pretty much have

994
00:45:28,389 --> 00:45:32,108
to just do it whatever you're gonna do

995
00:45:30,280 --> 00:45:33,760
has to be done in the hardware right and

996
00:45:32,108 --> 00:45:35,199
you're all playing on a level playing

997
00:45:33,760 --> 00:45:39,440
field then because it has to be done in

998
00:45:35,199 --> 00:45:43,279
hardware okay so how do we

999
00:45:39,440 --> 00:45:45,500
get here what we essentially need are

1000
00:45:43,280 --> 00:45:47,630
these sort of six points that I've

1001
00:45:45,500 --> 00:45:49,519
listed here to get to direct coding

1002
00:45:47,630 --> 00:45:52,160
right we need to first get the

1003
00:45:49,519 --> 00:45:54,380
compatibility which is specking out

1004
00:45:52,159 --> 00:45:58,639
something like an ice ax that will be

1005
00:45:54,380 --> 00:46:01,608
maintained by hardware vendors we have

1006
00:45:58,639 --> 00:46:03,230
to have performance reasonable enough

1007
00:46:01,608 --> 00:46:05,750
that people could start using this for

1008
00:46:03,230 --> 00:46:08,929
real right and why do I say that

1009
00:46:05,750 --> 00:46:11,568
well you can get your hands on a fully

1010
00:46:08,929 --> 00:46:13,848
documented ISOs SOC today for example

1011
00:46:11,568 --> 00:46:16,219
the Raspberry Pi there's a few parts in

1012
00:46:13,849 --> 00:46:20,059
our document but even the Broadcom chip

1013
00:46:16,219 --> 00:46:22,068
is now fully documented the graphics

1014
00:46:20,059 --> 00:46:23,780
part rather there is a little bit of

1015
00:46:22,068 --> 00:46:26,690
startup code that's not documented but I

1016
00:46:23,780 --> 00:46:28,329
think that's the only thing so you can

1017
00:46:26,690 --> 00:46:31,159
go get your hands on a Raspberry Pi

1018
00:46:28,329 --> 00:46:33,200
today and have that compatibility

1019
00:46:31,159 --> 00:46:37,308
guarantee with other raspberry PI's

1020
00:46:33,199 --> 00:46:40,038
right but a Raspberry Pi is simply not a

1021
00:46:37,309 --> 00:46:42,500
good enough piece of hardware for anyone

1022
00:46:40,039 --> 00:46:45,380
to use it for anything real in a

1023
00:46:42,500 --> 00:46:47,989
consumer setting right you're not gonna

1024
00:46:45,380 --> 00:46:50,568
ship player unknowns battlegrounds on

1025
00:46:47,989 --> 00:46:51,949
the Raspberry Pi so in order to start

1026
00:46:50,568 --> 00:46:54,440
being something we could take seriously

1027
00:46:51,949 --> 00:46:57,409
as computing platform it has to be real

1028
00:46:54,440 --> 00:46:59,838
hardware it has to be a geforce 1080

1029
00:46:57,409 --> 00:47:02,989
that's made to some eisah

1030
00:46:59,838 --> 00:47:05,028
it can't be some old part that nobody

1031
00:47:02,989 --> 00:47:06,588
wants anymore that just we happen to

1032
00:47:05,028 --> 00:47:10,639
know a lot of program that's not enough

1033
00:47:06,588 --> 00:47:14,328
right third thing it needs to be simple

1034
00:47:10,639 --> 00:47:16,489
right you can't just take and say oh hey

1035
00:47:14,329 --> 00:47:19,068
good news what we did is we took the G

1036
00:47:16,489 --> 00:47:20,298
first 1080 we moved our entire gigantic

1037
00:47:19,068 --> 00:47:23,449
driver with all of its programming

1038
00:47:20,298 --> 00:47:26,358
substrate and we put it into a ROM on

1039
00:47:23,449 --> 00:47:28,368
the thing and now you just send like

1040
00:47:26,358 --> 00:47:30,469
Vulcan commands to it right it's like no

1041
00:47:28,369 --> 00:47:33,500
that's not what we're talking about here

1042
00:47:30,469 --> 00:47:35,298
we have to get back to saying look we

1043
00:47:33,500 --> 00:47:37,250
write some memory we read to some memory

1044
00:47:35,298 --> 00:47:40,190
that's how the interface works right

1045
00:47:37,250 --> 00:47:45,289
it's like it used to be there isn't some

1046
00:47:40,190 --> 00:47:47,568
kind of a weird like you know you need

1047
00:47:45,289 --> 00:47:49,369
10 million lines of code to access the

1048
00:47:47,568 --> 00:47:50,509
ice because that's how much there is or

1049
00:47:49,369 --> 00:47:52,519
something right it has to go back to

1050
00:47:50,510 --> 00:47:53,300
being a sense of the design obviously we

1051
00:47:52,519 --> 00:47:54,920
need documentation

1052
00:47:53,300 --> 00:47:56,720
and tutorials for it so people can learn

1053
00:47:54,920 --> 00:47:58,820
how to use it and use it well and then

1054
00:47:56,719 --> 00:48:00,529
finally we need some publicity to say

1055
00:47:58,820 --> 00:48:01,850
look this is something people should buy

1056
00:48:00,530 --> 00:48:03,470
some people should use so there's a lot

1057
00:48:01,849 --> 00:48:04,219
of stuff since it's hard don't get me

1058
00:48:03,469 --> 00:48:06,250
wrong

1059
00:48:04,219 --> 00:48:08,480
it's a very difficult path to go down

1060
00:48:06,250 --> 00:48:10,760
because it takes a lot of people to

1061
00:48:08,480 --> 00:48:12,530
believe it should be done I don't

1062
00:48:10,760 --> 00:48:15,050
actually think there's anything hard

1063
00:48:12,530 --> 00:48:17,480
about it in the difficult to do it's

1064
00:48:15,050 --> 00:48:23,990
more about commitment less about

1065
00:48:17,480 --> 00:48:27,079
difficulty but so I kind of split it up

1066
00:48:23,989 --> 00:48:28,399
here between you meaning hardware

1067
00:48:27,079 --> 00:48:31,309
vendors because that's who this talk was

1068
00:48:28,400 --> 00:48:35,960
originally designed for and us meaning

1069
00:48:31,309 --> 00:48:39,349
the people who program right and have to

1070
00:48:35,960 --> 00:48:42,470
you know would use it and so I think we

1071
00:48:39,349 --> 00:48:45,049
split up those six things they break

1072
00:48:42,469 --> 00:48:48,889
down very cleanly hardware designers

1073
00:48:45,050 --> 00:48:51,680
need to be like actually determine

1074
00:48:48,889 --> 00:48:53,509
themselves to agree on an SOC right and

1075
00:48:51,679 --> 00:48:55,219
that's to see architecture then they

1076
00:48:53,510 --> 00:48:56,840
have to start shipping something like

1077
00:48:55,219 --> 00:48:59,029
they're really good parts need to follow

1078
00:48:56,840 --> 00:49:01,550
that SOC and they need to commit to

1079
00:48:59,030 --> 00:49:04,130
simplifying the way that it's used to

1080
00:49:01,550 --> 00:49:05,840
just read write memory write rewrite

1081
00:49:04,130 --> 00:49:07,910
memory in mailboxes or whatever that

1082
00:49:05,840 --> 00:49:10,100
Arrakis paper that I pointed that I

1083
00:49:07,909 --> 00:49:13,759
referenced has a really good example of

1084
00:49:10,099 --> 00:49:15,289
how to do say a NIC that just uses ring

1085
00:49:13,760 --> 00:49:17,210
buffer only hardware interfaces and

1086
00:49:15,289 --> 00:49:18,650
mailboxes to achieve everything it needs

1087
00:49:17,210 --> 00:49:20,929
to achieve that's the kind of thing we

1088
00:49:18,650 --> 00:49:22,460
need right

1089
00:49:20,929 --> 00:49:24,500
and so hardware designs you to do that

1090
00:49:22,460 --> 00:49:27,590
obviously surfers on can help with that

1091
00:49:24,500 --> 00:49:29,449
but they can only help by saying whether

1092
00:49:27,590 --> 00:49:31,039
or not these interfaces are going to be

1093
00:49:29,449 --> 00:49:33,469
good enough and simple enough to

1094
00:49:31,039 --> 00:49:36,110
actually be programmable in a realistic

1095
00:49:33,469 --> 00:49:38,209
way but there's nothing else they can do

1096
00:49:36,110 --> 00:49:40,970
all the rest of it is up to getting some

1097
00:49:38,210 --> 00:49:42,559
at least one or two hardware developers

1098
00:49:40,969 --> 00:49:46,549
to actually buy in and try to do

1099
00:49:42,559 --> 00:49:48,259
something like this now for our part our

1100
00:49:46,550 --> 00:49:50,330
part we can do as soon as we have

1101
00:49:48,260 --> 00:49:51,920
anything even like that right we can

1102
00:49:50,329 --> 00:49:53,900
help with the ring buffer design like I

1103
00:49:51,920 --> 00:49:56,570
said we can help design something that

1104
00:49:53,900 --> 00:49:58,700
satisfies our need to be able to develop

1105
00:49:56,570 --> 00:50:00,980
things that are reliable and easy to

1106
00:49:58,699 --> 00:50:02,359
understand and so on but that also meet

1107
00:50:00,980 --> 00:50:03,469
the demands that the hardware has

1108
00:50:02,360 --> 00:50:06,260
because the harbor can only do certain

1109
00:50:03,469 --> 00:50:07,009
things obviously but beyond that we can

1110
00:50:06,260 --> 00:50:09,680
do everything else

1111
00:50:07,010 --> 00:50:12,860
make prototype OS is for it we can

1112
00:50:09,679 --> 00:50:15,859
document it we can ship libraries right

1113
00:50:12,860 --> 00:50:17,750
we can make all kinds of libraries that

1114
00:50:15,860 --> 00:50:19,519
programs could use to run on top of this

1115
00:50:17,750 --> 00:50:20,690
if they wanted to so that people who

1116
00:50:19,519 --> 00:50:22,639
don't want understand it don't have to

1117
00:50:20,690 --> 00:50:25,460
understand it it's always you know

1118
00:50:22,639 --> 00:50:27,529
strictly optional things that that look

1119
00:50:25,460 --> 00:50:29,240
like DirectX on top or OpenGL on top or

1120
00:50:27,530 --> 00:50:30,650
Vulcan on top so if you already know one

1121
00:50:29,239 --> 00:50:33,649
of those you can just program to that

1122
00:50:30,650 --> 00:50:36,639
still right so that there isn't a lot of

1123
00:50:33,650 --> 00:50:39,740
friction in terms of moving over to it

1124
00:50:36,639 --> 00:50:41,420
and then finally you know we need a lot

1125
00:50:39,739 --> 00:50:43,759
of people to be excited about this but I

1126
00:50:41,420 --> 00:50:45,320
think we can do that right I think the

1127
00:50:43,760 --> 00:50:46,640
response to handmade hero is kind of

1128
00:50:45,320 --> 00:50:47,750
demonstrated that there are a lot of

1129
00:50:46,639 --> 00:50:49,099
people are interested in this sort of

1130
00:50:47,750 --> 00:50:50,059
thing they just don't have anywhere to

1131
00:50:49,099 --> 00:50:52,579
go and they don't have any way to

1132
00:50:50,059 --> 00:50:55,039
contribute right they don't have any way

1133
00:50:52,579 --> 00:50:56,630
to help push us towards a future where

1134
00:50:55,039 --> 00:51:00,590
hardware is something we can actually

1135
00:50:56,630 --> 00:51:03,500
directly program nobody can really do

1136
00:51:00,590 --> 00:51:05,059
that on the software side of things but

1137
00:51:03,500 --> 00:51:08,179
if hardware developers gave us an

1138
00:51:05,059 --> 00:51:10,309
opportunity to do so we would I know I

1139
00:51:08,179 --> 00:51:12,319
would and I know lots of people who

1140
00:51:10,309 --> 00:51:14,029
watch this show would and I know lots of

1141
00:51:12,320 --> 00:51:15,730
people who don't watch this show would I

1142
00:51:14,030 --> 00:51:18,260
know there's a lot of people out there

1143
00:51:15,730 --> 00:51:21,800
who want to see something like this

1144
00:51:18,260 --> 00:51:24,050
happen and would be ecstatic to start

1145
00:51:21,800 --> 00:51:29,539
contributing to something that could get

1146
00:51:24,050 --> 00:51:34,700
us there and so what I think we would do

1147
00:51:29,539 --> 00:51:37,759
for first steps right used to try to get

1148
00:51:34,699 --> 00:51:41,299
back to the original Linux right to try

1149
00:51:37,760 --> 00:51:44,090
and say if we were gonna start Linux

1150
00:51:41,300 --> 00:51:47,539
today the original Linux I think was

1151
00:51:44,090 --> 00:51:49,760
20,000 lives of assembly code right if

1152
00:51:47,539 --> 00:51:51,469
we were gonna redo that today 20,000

1153
00:51:49,760 --> 00:51:55,700
lines of assembly code is something a

1154
00:51:51,469 --> 00:51:58,389
single individual can write okay it's

1155
00:51:55,699 --> 00:52:01,639
not that hard to do

1156
00:51:58,389 --> 00:52:07,489
how do we get to a piece of hardware

1157
00:52:01,639 --> 00:52:11,299
that has a well enough simple enough

1158
00:52:07,489 --> 00:52:15,069
spec interface that you can make the

1159
00:52:11,300 --> 00:52:18,080
equivalent of the original 1991 Linux in

1160
00:52:15,070 --> 00:52:21,850
20,000 lines of assembly language that's

1161
00:52:18,079 --> 00:52:21,849
just now on a modern part

1162
00:52:22,070 --> 00:52:30,450
how do we get there because I absolutely

1163
00:52:25,440 --> 00:52:31,619
do not believe that you can't do it we

1164
00:52:30,449 --> 00:52:34,019
just didn't want to

1165
00:52:31,619 --> 00:52:35,460
we just kept adding complexity to the

1166
00:52:34,019 --> 00:52:37,440
hardware interface and adding more and

1167
00:52:35,460 --> 00:52:40,559
more drivers because that was the path

1168
00:52:37,440 --> 00:52:43,559
of least resistance and it was what

1169
00:52:40,559 --> 00:52:46,049
allowed companies to go off on their own

1170
00:52:43,559 --> 00:52:47,789
and not have to talk to anyone to agree

1171
00:52:46,050 --> 00:52:50,760
on how something would be designed right

1172
00:52:47,789 --> 00:52:52,289
that's why we did it but I fundamentally

1173
00:52:50,760 --> 00:52:54,240
don't believe there's anything different

1174
00:52:52,289 --> 00:52:56,250
about today's Hardware fundamentally

1175
00:52:54,239 --> 00:52:57,479
that you couldn't make an operating

1176
00:52:56,250 --> 00:52:58,800
system in 20,000 lines again if the

1177
00:52:57,480 --> 00:53:00,059
hardware was designed more sense we

1178
00:52:58,800 --> 00:53:02,220
could have all the same features it has

1179
00:53:00,059 --> 00:53:06,619
today it just needs to be designed more

1180
00:53:02,219 --> 00:53:10,699
sensibly and I think we could do that I

1181
00:53:06,619 --> 00:53:14,250
think we just look to see how do we get

1182
00:53:10,699 --> 00:53:16,289
20,000 lines of Azzam to drive a

1183
00:53:14,250 --> 00:53:19,349
hypothetical piece of hardware that does

1184
00:53:16,289 --> 00:53:21,300
what today's hardware does right how do

1185
00:53:19,349 --> 00:53:22,650
we get that and that's something a

1186
00:53:21,300 --> 00:53:24,210
hardware company can start working on

1187
00:53:22,650 --> 00:53:27,210
that's something that Intel could start

1188
00:53:24,210 --> 00:53:31,320
doing tomorrow right they've got SOC s

1189
00:53:27,210 --> 00:53:33,480
that have graphics built in what does

1190
00:53:31,320 --> 00:53:35,250
the interface to that huge substrate

1191
00:53:33,480 --> 00:53:37,349
which I guarantee you takes way more

1192
00:53:35,250 --> 00:53:38,309
than 20,000 lines of Azzam to probably

1193
00:53:37,349 --> 00:53:43,589
get an operating system up and running

1194
00:53:38,309 --> 00:53:45,599
on one these things right why there are

1195
00:53:43,590 --> 00:53:49,559
researchers at Intel right now who could

1196
00:53:45,599 --> 00:53:52,019
answer that why what is wrong with the

1197
00:53:49,559 --> 00:53:55,259
design of the interfaces to these chips

1198
00:53:52,019 --> 00:53:57,119
that they require so much extra work how

1199
00:53:55,260 --> 00:54:00,150
do we get it down so it's the same as

1200
00:53:57,119 --> 00:54:05,549
Linux was what can we simplify because I

1201
00:54:00,150 --> 00:54:10,230
know that we can and then from that

1202
00:54:05,550 --> 00:54:13,050
answer we can move on to an initial

1203
00:54:10,230 --> 00:54:14,760
attempt at in ISE I say something that

1204
00:54:13,050 --> 00:54:16,260
simplifies the network interface I mean

1205
00:54:14,760 --> 00:54:17,610
it simplifies the SATA interface and it

1206
00:54:16,260 --> 00:54:18,960
simplifies USB interface and it

1207
00:54:17,610 --> 00:54:21,360
simplifies the video interface right

1208
00:54:18,960 --> 00:54:24,809
because fundamentally all of these

1209
00:54:21,360 --> 00:54:27,269
things are just the CPU writing to some

1210
00:54:24,809 --> 00:54:28,650
memory and kicking it off and then

1211
00:54:27,269 --> 00:54:30,960
looking for memory that comes back

1212
00:54:28,650 --> 00:54:33,420
that's fundamentally all that really is

1213
00:54:30,960 --> 00:54:33,900
happening here why can't we get it down

1214
00:54:33,420 --> 00:54:40,800
to that

1215
00:54:33,900 --> 00:54:43,440
what's stopping us right and then I

1216
00:54:40,800 --> 00:54:45,060
contend once we've got it to something

1217
00:54:43,440 --> 00:54:46,530
fairly straightforward like that where

1218
00:54:45,059 --> 00:54:48,179
you can just look at data definitions

1219
00:54:46,530 --> 00:54:49,830
and say you write this data in here and

1220
00:54:48,179 --> 00:54:53,429
kick it off this is what the chip does

1221
00:54:49,829 --> 00:54:56,190
right that is very tractable any

1222
00:54:53,429 --> 00:54:59,190
programmer understands how to get that

1223
00:54:56,190 --> 00:55:00,300
working right and it opens up a whole

1224
00:54:59,190 --> 00:55:02,309
new set of possibilities

1225
00:55:00,300 --> 00:55:04,590
should we keep simplifying from there

1226
00:55:02,309 --> 00:55:06,840
and keep making it so that we keep

1227
00:55:04,590 --> 00:55:08,910
getting more and more straightforward

1228
00:55:06,840 --> 00:55:10,829
and direct ways to talk to Hardware and

1229
00:55:08,909 --> 00:55:12,389
have them do things so that the data

1230
00:55:10,829 --> 00:55:13,769
that we're actually sending them makes

1231
00:55:12,389 --> 00:55:15,779
more and more sense in that and the

1232
00:55:13,769 --> 00:55:17,940
things they execute make more sense sure

1233
00:55:15,780 --> 00:55:20,250
right which would it be great if we

1234
00:55:17,940 --> 00:55:21,929
continued to improve the x64 ISO to make

1235
00:55:20,250 --> 00:55:24,510
it simpler and more whatever but right

1236
00:55:21,929 --> 00:55:26,210
it's always good to do that yes but just

1237
00:55:24,510 --> 00:55:29,370
getting to a place of possibility

1238
00:55:26,210 --> 00:55:31,170
doesn't require all that we just need to

1239
00:55:29,369 --> 00:55:33,839
get rid of the obvious Croft and I

1240
00:55:31,170 --> 00:55:36,150
guarantee you 90% of the problem the way

1241
00:55:33,840 --> 00:55:43,260
is obvious Croft not super hard

1242
00:55:36,150 --> 00:55:46,309
technical problems all right so now I'd

1243
00:55:43,260 --> 00:55:53,130
like to sort of introduce two possible

1244
00:55:46,309 --> 00:55:56,309
hypothetical situations right and I sort

1245
00:55:53,130 --> 00:55:58,950
of wanted to to posit these in a way

1246
00:55:56,309 --> 00:56:02,880
that would say motivate a company such

1247
00:55:58,949 --> 00:56:05,579
as Intel for example as to why even for

1248
00:56:02,880 --> 00:56:07,410
a commercial hardware vendor with a

1249
00:56:05,579 --> 00:56:11,190
vested interest in what they're

1250
00:56:07,409 --> 00:56:15,329
currently shipping why might they care

1251
00:56:11,190 --> 00:56:19,980
about this right uh so the first would

1252
00:56:15,329 --> 00:56:23,179
if set is negative what if Linus

1253
00:56:19,980 --> 00:56:29,460
Torvalds later right

1254
00:56:23,179 --> 00:56:31,529
sorry Linus Torvald right Linux would

1255
00:56:29,460 --> 00:56:34,170
never have happened there's no way he

1256
00:56:31,530 --> 00:56:35,610
was gonna write a massive thing like

1257
00:56:34,170 --> 00:56:37,380
there's no way he would have written a

1258
00:56:35,610 --> 00:56:39,420
system that could have handled like all

1259
00:56:37,380 --> 00:56:41,519
the USB stuff and all the graphic stuff

1260
00:56:39,420 --> 00:56:43,079
that we currently do today no one would

1261
00:56:41,519 --> 00:56:44,940
want to use this operating system that

1262
00:56:43,079 --> 00:56:46,469
he started with it wouldn't be useful to

1263
00:56:44,940 --> 00:56:47,849
anyone for any purpose right

1264
00:56:46,469 --> 00:56:48,899
so Linux never

1265
00:56:47,849 --> 00:56:52,829
would have been a thing that took off

1266
00:56:48,900 --> 00:56:56,818
and as a consequence we would literally

1267
00:56:52,829 --> 00:56:58,528
have a single PC operating system right

1268
00:56:56,818 --> 00:57:03,329
a single one

1269
00:56:58,528 --> 00:57:06,239
it just be Windows every last thing you

1270
00:57:03,329 --> 00:57:08,729
take for granted right now that was made

1271
00:57:06,239 --> 00:57:12,539
possible because of Linux would not have

1272
00:57:08,728 --> 00:57:18,179
happened all servers would be controlled

1273
00:57:12,539 --> 00:57:20,700
by Microsoft all of them right every

1274
00:57:18,179 --> 00:57:23,358
last thing every desktop computer

1275
00:57:20,699 --> 00:57:25,768
controlled by Microsoft you would

1276
00:57:23,358 --> 00:57:27,659
possibly still have had Apple but it's

1277
00:57:25,768 --> 00:57:33,419
unclear whether you actually would have

1278
00:57:27,659 --> 00:57:35,129
or not because at that time again there

1279
00:57:33,420 --> 00:57:37,318
was a bunch of other options available

1280
00:57:35,130 --> 00:57:42,809
thanks to Linux and the ecosystem that

1281
00:57:37,318 --> 00:57:45,119
had it had created so it's unclear what

1282
00:57:42,809 --> 00:57:45,539
Mac OS 10 would have done and I don't

1283
00:57:45,119 --> 00:57:47,309
know

1284
00:57:45,539 --> 00:57:48,869
so maybe would have still had an apple

1285
00:57:47,309 --> 00:57:51,239
niche but it certainly wouldn't been

1286
00:57:48,869 --> 00:57:53,249
server and so you would literally be

1287
00:57:51,239 --> 00:57:56,249
looking at a world where all pretty much

1288
00:57:53,248 --> 00:57:57,528
all PC but definitely all server was

1289
00:57:56,248 --> 00:57:59,669
controlled by Microsoft

1290
00:57:57,528 --> 00:58:01,849
most of what we take for granted on the

1291
00:57:59,670 --> 00:58:04,880
internet today would not have happened

1292
00:58:01,849 --> 00:58:07,048
the way that it happened and with one

1293
00:58:04,880 --> 00:58:09,809
for-profit company in control of all of

1294
00:58:07,048 --> 00:58:14,099
it you have to ask yourself what would

1295
00:58:09,809 --> 00:58:18,690
this world look like right number two is

1296
00:58:14,099 --> 00:58:23,460
what if there is going to be another

1297
00:58:18,690 --> 00:58:27,179
another Linus in the future but what if

1298
00:58:23,460 --> 00:58:29,579
instead of doing it on say an Intel

1299
00:58:27,179 --> 00:58:32,328
piece of hardware or an AMD piece of

1300
00:58:29,579 --> 00:58:36,479
hardware what if they do it on something

1301
00:58:32,329 --> 00:58:38,028
like arm right what if there is a

1302
00:58:36,478 --> 00:58:40,919
different platform that they pick

1303
00:58:38,028 --> 00:58:42,509
because that platform was simpler had a

1304
00:58:40,920 --> 00:58:46,950
more coherent eye so who knows what

1305
00:58:42,509 --> 00:58:50,838
happened right and the answer is that

1306
00:58:46,949 --> 00:58:54,239
entire lineage of computing that entire

1307
00:58:50,838 --> 00:58:58,498
direction of computing that could

1308
00:58:54,239 --> 00:59:01,650
develop from that you will make zero

1309
00:58:58,498 --> 00:59:03,838
money on and furthermore all of the uses

1310
00:59:01,650 --> 00:59:06,088
is that your computing chips could have

1311
00:59:03,838 --> 00:59:08,219
would have been doing that migrate to

1312
00:59:06,088 --> 00:59:11,759
this new platform you will not make

1313
00:59:08,219 --> 00:59:14,639
money on any of them right no x64

1314
00:59:11,760 --> 00:59:18,000
processor will be involved in any of

1315
00:59:14,639 --> 00:59:22,528
that lineage because that's not where it

1316
00:59:18,000 --> 00:59:24,778
started right so again the benefits of

1317
00:59:22,528 --> 00:59:27,449
being the hardware people who start to

1318
00:59:24,778 --> 00:59:31,440
move in this direction might be very

1319
00:59:27,449 --> 00:59:34,469
important and missing out on a trend

1320
00:59:31,440 --> 00:59:36,269
like that could be very serious the

1321
00:59:34,469 --> 00:59:38,278
reason that Intel sells all of their

1322
00:59:36,269 --> 00:59:39,900
server chips right now is because linus

1323
00:59:38,278 --> 00:59:42,900
torvalds started out programming on an

1324
00:59:39,900 --> 00:59:47,430
x64 well the next thirty x86 right

1325
00:59:42,900 --> 00:59:49,170
that's why so that whole lineage grew up

1326
00:59:47,429 --> 00:59:52,318
around that if it had grown up around

1327
00:59:49,170 --> 00:59:54,119
something else x86 would have been the

1328
00:59:52,318 --> 00:59:55,829
port platform it would have been like a

1329
00:59:54,119 --> 00:59:57,119
dec alpha or something like that who

1330
00:59:55,829 --> 00:59:58,559
knows if it ever would have taken off

1331
00:59:57,119 --> 01:00:00,690
maybe it wouldn't have got supported

1332
00:59:58,559 --> 01:00:02,579
maybe no one would have cared and then

1333
01:00:00,690 --> 01:00:05,068
all of the chips that Intel sells in

1334
01:00:02,579 --> 01:00:08,160
that market right now for example that

1335
01:00:05,068 --> 01:00:10,679
money just isn't there right high margin

1336
01:00:08,159 --> 01:00:12,298
very important chips nobody wants them

1337
01:00:10,679 --> 01:00:13,649
they'd rather have these arm chips

1338
01:00:12,298 --> 01:00:15,599
because that's everyone knows that's

1339
01:00:13,650 --> 01:00:16,230
what Linux runs best on is these arms or

1340
01:00:15,599 --> 01:00:20,609
something right

1341
01:00:16,230 --> 01:00:21,960
who knows so then let's get to the

1342
01:00:20,608 --> 01:00:24,838
positive I'm pathetic goals which are

1343
01:00:21,960 --> 01:00:27,690
like what if we do embrace more of this

1344
01:00:24,838 --> 01:00:30,778
SOC thing what what are the dividends

1345
01:00:27,690 --> 01:00:32,639
that could be paid there right so first

1346
01:00:30,778 --> 01:00:33,929
of all what if making actually for our

1347
01:00:32,639 --> 01:00:36,420
system was as easy as making an

1348
01:00:33,929 --> 01:00:39,750
application right and that's the world

1349
01:00:36,420 --> 01:00:41,608
of 1980s it's so easy to make an

1350
01:00:39,750 --> 01:00:48,420
operation that everyone who made a game

1351
01:00:41,608 --> 01:00:51,900
did it right if that were the case think

1352
01:00:48,420 --> 01:00:55,730
of how many options we would have for

1353
01:00:51,900 --> 01:00:58,710
defining the future of computing right

1354
01:00:55,730 --> 01:01:01,500
Microsoft's stranglehold on PCs would

1355
01:00:58,710 --> 01:01:04,740
evaporate immediately right because

1356
01:01:01,500 --> 01:01:07,650
there'd be so many alternatives that you

1357
01:01:04,739 --> 01:01:10,348
could never there be no way for a

1358
01:01:07,650 --> 01:01:12,990
operating system company to sit on their

1359
01:01:10,349 --> 01:01:15,450
laurels and ship such lackluster things

1360
01:01:12,989 --> 01:01:17,279
right

1361
01:01:15,449 --> 01:01:20,549
they would get out competed pretty much

1362
01:01:17,280 --> 01:01:23,550
instantaneously and that's great for

1363
01:01:20,550 --> 01:01:25,890
everybody more competition in the OS

1364
01:01:23,550 --> 01:01:29,700
face means that our OS doesn't have to

1365
01:01:25,889 --> 01:01:30,869
be so bad like it is right now right but

1366
01:01:29,699 --> 01:01:33,299
it's never gonna happen any other way

1367
01:01:30,869 --> 01:01:35,609
you're stuck with Linux and and Windows

1368
01:01:33,300 --> 01:01:38,430
right now that's not changing if the

1369
01:01:35,610 --> 01:01:40,019
hardware doesn't change first okay so

1370
01:01:38,429 --> 01:01:43,199
another what if what if running software

1371
01:01:40,019 --> 01:01:45,360
on x64 required no OS and they were just

1372
01:01:43,199 --> 01:01:48,929
tied to the exit of our hardware not to

1373
01:01:45,360 --> 01:01:49,829
an OS right I mean this is a real

1374
01:01:48,929 --> 01:01:53,069
possible future

1375
01:01:49,829 --> 01:01:54,569
what if they're the only OS on your

1376
01:01:53,070 --> 01:01:56,340
system at all was just basically a

1377
01:01:54,570 --> 01:01:59,039
hypervisor it was just a thing that

1378
01:01:56,340 --> 01:02:00,510
switched between full programs that just

1379
01:01:59,039 --> 01:02:04,710
ran directly on top of the hardware

1380
01:02:00,510 --> 01:02:06,690
right now all of a sudden x64 is king of

1381
01:02:04,710 --> 01:02:08,400
the hill right now Windows is king of

1382
01:02:06,690 --> 01:02:10,079
the hill doesn't really matter that

1383
01:02:08,400 --> 01:02:12,300
something's written for x64 anymore all

1384
01:02:10,079 --> 01:02:16,769
that much right it matters it's written

1385
01:02:12,300 --> 01:02:19,050
to the Windows api's or the browser's

1386
01:02:16,769 --> 01:02:21,739
api's right that's what matters

1387
01:02:19,050 --> 01:02:25,080
that's what determines what runs where

1388
01:02:21,739 --> 01:02:28,169
ok and it determines furthermore who has

1389
01:02:25,079 --> 01:02:30,090
the entrenched advantage x64 chip

1390
01:02:28,170 --> 01:02:32,519
vendors have entrenched an advantage of

1391
01:02:30,090 --> 01:02:34,130
running x64 code how much of that is

1392
01:02:32,519 --> 01:02:38,130
there out there not that much anymore

1393
01:02:34,130 --> 01:02:40,289
why because it's not the hard part of

1394
01:02:38,130 --> 01:02:41,550
the problem producing the CPU code is

1395
01:02:40,289 --> 01:02:43,139
not the hard part of RAM it's all the

1396
01:02:41,550 --> 01:02:44,850
drivers it's all the infrastructure

1397
01:02:43,139 --> 01:02:47,159
necessary to run the rest of the

1398
01:02:44,849 --> 01:02:49,679
hardware the mouse input the keyboard

1399
01:02:47,159 --> 01:02:52,739
input talking the printers all that

1400
01:02:49,679 --> 01:02:54,559
stuff right that's the thing that

1401
01:02:52,739 --> 01:02:57,059
actually determines who controls the

1402
01:02:54,559 --> 01:03:00,630
ecosystem is that substrate and

1403
01:02:57,059 --> 01:03:05,190
increasingly now that's like w3c right

1404
01:03:00,630 --> 01:03:09,090
and that makes x64 or whatever your

1405
01:03:05,190 --> 01:03:12,929
hardware part is irrelevant nobody cares

1406
01:03:09,090 --> 01:03:17,180
what you spec and nobody is enticed to

1407
01:03:12,929 --> 01:03:19,379
run on your platform because who cares

1408
01:03:17,179 --> 01:03:23,239
as long as someone ported the web

1409
01:03:19,380 --> 01:03:23,240
browser you're done right

1410
01:03:24,389 --> 01:03:30,268
so if a group of web group of hardware

1411
01:03:27,719 --> 01:03:32,248
developers did go in this direction it

1412
01:03:30,268 --> 01:03:34,558
could pay enormous dividends because

1413
01:03:32,248 --> 01:03:37,078
they would be the people who would be

1414
01:03:34,559 --> 01:03:38,640
able to sell the chips and people not

1415
01:03:37,079 --> 01:03:39,028
producing chips that comply with this

1416
01:03:38,639 --> 01:03:41,548
isuh

1417
01:03:39,028 --> 01:03:44,730
would be at a massive disadvantage there

1418
01:03:41,548 --> 01:03:46,980
are huge potential payoffs for going

1419
01:03:44,730 --> 01:03:49,230
this way early if it did take off

1420
01:03:46,980 --> 01:03:51,900
because now you're in a great position

1421
01:03:49,230 --> 01:03:53,269
to be the leaders in shipping stings

1422
01:03:51,900 --> 01:03:58,318
that comply to this isuh

1423
01:03:53,268 --> 01:04:00,419
right because as software gets written

1424
01:03:58,318 --> 01:04:03,748
closer to the isit you become the

1425
01:04:00,420 --> 01:04:05,548
platform not the w3c right or whoever

1426
01:04:03,748 --> 01:04:07,318
else it happens to be at the time so

1427
01:04:05,548 --> 01:04:10,139
it's actually very good for a hardware

1428
01:04:07,318 --> 01:04:13,949
people it's a very advantageous position

1429
01:04:10,139 --> 01:04:19,558
and furthermore it's something that

1430
01:04:13,949 --> 01:04:23,009
allows you to provide real games to your

1431
01:04:19,559 --> 01:04:26,999
customers right now if I was someone

1432
01:04:23,009 --> 01:04:28,920
working at Intel or AMD I'd be pulling

1433
01:04:26,998 --> 01:04:30,328
my hair out because I'm like the only

1434
01:04:28,920 --> 01:04:31,739
people I know how to get any performance

1435
01:04:30,329 --> 01:04:34,318
improvements to are like game developers

1436
01:04:31,739 --> 01:04:36,329
right there's nothing like this this web

1437
01:04:34,318 --> 01:04:38,670
browsers and that spec is such a

1438
01:04:36,329 --> 01:04:41,640
disaster there's nothing I can do right

1439
01:04:38,670 --> 01:04:44,849
I shipped someone this new core i9 chip

1440
01:04:41,639 --> 01:04:48,480
and this is just as bad as experience as

1441
01:04:44,849 --> 01:04:51,420
if they were running on the i3 right it

1442
01:04:48,480 --> 01:04:53,190
doesn't matter because there's so much

1443
01:04:51,420 --> 01:04:55,259
cruft in the way and it's so divorced

1444
01:04:53,190 --> 01:04:57,710
from the hardware that it just doesn't

1445
01:04:55,259 --> 01:05:00,420
matter I can't really help you you know

1446
01:04:57,710 --> 01:05:01,739
that I can't really provide those real

1447
01:05:00,420 --> 01:05:03,778
performance gains because it's unclear

1448
01:05:01,739 --> 01:05:07,259
what I would even target at this point

1449
01:05:03,778 --> 01:05:08,579
right whereas if things are directly

1450
01:05:07,259 --> 01:05:10,769
running on a nexus t4 you could have

1451
01:05:08,579 --> 01:05:12,630
this power to ship huge improvements

1452
01:05:10,768 --> 01:05:14,189
every time because the software is

1453
01:05:12,630 --> 01:05:16,528
literally just running on top of your

1454
01:05:14,190 --> 01:05:18,210
stuff and when you improve it everything

1455
01:05:16,528 --> 01:05:20,309
improves and the things that people can

1456
01:05:18,210 --> 01:05:21,389
ship that year are twice as good as the

1457
01:05:20,309 --> 01:05:23,910
things they could ship the previous year

1458
01:05:21,389 --> 01:05:25,248
for reals and that's not a world we've

1459
01:05:23,909 --> 01:05:27,960
been living in for a very long time

1460
01:05:25,248 --> 01:05:29,548
except on basically GPU code for games

1461
01:05:27,960 --> 01:05:33,449
it's really we're the only place we've

1462
01:05:29,548 --> 01:05:35,489
been seeing that right and finally as a

1463
01:05:33,449 --> 01:05:38,480
positive hypothetical for companies like

1464
01:05:35,489 --> 01:05:42,510
Intel or companies like Samsung

1465
01:05:38,480 --> 01:05:44,219
you've got great fab technology what if

1466
01:05:42,510 --> 01:05:46,650
that was what determined market

1467
01:05:44,219 --> 01:05:49,159
leadership right we all know we're going

1468
01:05:46,650 --> 01:05:52,170
to be using this isuh

1469
01:05:49,159 --> 01:05:55,049
so wouldn't you like it that the person

1470
01:05:52,170 --> 01:05:57,838
who builds the best hardware wins isn't

1471
01:05:55,050 --> 01:05:59,910
that the best right whereas right now

1472
01:05:57,838 --> 01:06:02,219
you're rapidly moving towards a world

1473
01:05:59,909 --> 01:06:05,489
where nobody cares for consumer

1474
01:06:02,219 --> 01:06:07,259
operating systems nobody cares I don't

1475
01:06:05,489 --> 01:06:08,848
know which ships in this computer don't

1476
01:06:07,260 --> 01:06:11,460
care right or whatever is what most

1477
01:06:08,849 --> 01:06:12,990
people would think they really just

1478
01:06:11,460 --> 01:06:14,608
can't even perceive the difference a lot

1479
01:06:12,989 --> 01:06:16,139
of times now you buy a new laptop it

1480
01:06:14,608 --> 01:06:19,650
feels exactly same as your old laptop

1481
01:06:16,139 --> 01:06:22,049
right that's no good for a hardware

1482
01:06:19,650 --> 01:06:24,180
company what are you gonna sell people

1483
01:06:22,050 --> 01:06:28,079
how are you gonna convince an upgrade

1484
01:06:24,179 --> 01:06:30,328
right these are real problems you need

1485
01:06:28,079 --> 01:06:33,210
to make ways for people to program and

1486
01:06:30,329 --> 01:06:34,619
use the hardware for real because simply

1487
01:06:33,210 --> 01:06:37,530
increasing the clock rate doesn't really

1488
01:06:34,619 --> 01:06:42,900
work anymore right we've passed that

1489
01:06:37,530 --> 01:06:45,150
that heat point and so you need to offer

1490
01:06:42,900 --> 01:06:46,950
your customers something we can help you

1491
01:06:45,150 --> 01:06:49,950
offer your cup you're off offer

1492
01:06:46,949 --> 01:06:51,929
customers those things if you actually

1493
01:06:49,949 --> 01:06:55,409
give us a way to program the hardware

1494
01:06:51,929 --> 01:06:58,909
for real and again just look at the

1495
01:06:55,409 --> 01:07:01,409
console market to see that that's true

1496
01:06:58,909 --> 01:07:03,480
game developers who work on console

1497
01:07:01,409 --> 01:07:05,818
hardware do amazing things with that

1498
01:07:03,480 --> 01:07:07,530
hardware that is so much better than

1499
01:07:05,818 --> 01:07:10,139
what they could do with the hardware

1500
01:07:07,530 --> 01:07:11,910
normally because they can exploit all

1501
01:07:10,139 --> 01:07:16,739
the stuff because they know effectively

1502
01:07:11,909 --> 01:07:21,449
the eisah right so that's the end of the

1503
01:07:16,739 --> 01:07:24,058
talk I hope that gave some perspective

1504
01:07:21,449 --> 01:07:26,548
on what I think the problems are why I

1505
01:07:24,059 --> 01:07:30,019
think their problems and what could be

1506
01:07:26,548 --> 01:07:35,489
done to fix those problems but in short

1507
01:07:30,019 --> 01:07:38,880
the TLDR of it right is just we know we

1508
01:07:35,489 --> 01:07:43,529
have a better opportunity because we had

1509
01:07:38,880 --> 01:07:45,869
it in 1980 right we had it in the 80s we

1510
01:07:43,530 --> 01:07:48,900
lost it in the 90s and now we're living

1511
01:07:45,869 --> 01:07:50,400
in a world without it I think we can get

1512
01:07:48,900 --> 01:07:51,269
back there and I think there are real

1513
01:07:50,400 --> 01:07:54,059
reasons we

1514
01:07:51,268 --> 01:07:55,408
want to for everyone's sake not just

1515
01:07:54,059 --> 01:07:58,439
people who love computing and who love

1516
01:07:55,409 --> 01:08:01,588
Hardware aren't in programming but just

1517
01:07:58,438 --> 01:08:02,969
the ability to unleash all of the people

1518
01:08:01,588 --> 01:08:05,548
who care about that kind of programming

1519
01:08:02,969 --> 01:08:09,688
to let them actually start doing real

1520
01:08:05,548 --> 01:08:11,728
work again those people will produce the

1521
01:08:09,688 --> 01:08:13,438
libraries and the and the system

1522
01:08:11,728 --> 01:08:16,078
services and the documentation and the

1523
01:08:13,438 --> 01:08:20,630
tutorials they'll produce the substrate

1524
01:08:16,078 --> 01:08:23,189
that will allow everyone on top to excel

1525
01:08:20,630 --> 01:08:25,319
so it doesn't even matter that it's only

1526
01:08:23,189 --> 01:08:26,669
10% of the programmers who can really do

1527
01:08:25,319 --> 01:08:28,829
something down there maybe because it's

1528
01:08:26,670 --> 01:08:30,420
really a type of program that only

1529
01:08:28,828 --> 01:08:33,238
certain people enjoy or certain people

1530
01:08:30,420 --> 01:08:35,578
are good at even that's okay because

1531
01:08:33,238 --> 01:08:38,578
those people just need to be given the

1532
01:08:35,578 --> 01:08:42,479
chance and we've already seen that they

1533
01:08:38,578 --> 01:08:44,488
will much like Linus did share what they

1534
01:08:42,479 --> 01:08:47,548
create with the world in beneficial ways

1535
01:08:44,488 --> 01:08:52,048
but right now they cannot do that they

1536
01:08:47,548 --> 01:08:55,679
cannot help you and I think you really

1537
01:08:52,048 --> 01:08:59,658
do want them to and I don't think it's

1538
01:08:55,679 --> 01:09:03,359
just altruistic I don't think it's just

1539
01:08:59,658 --> 01:09:05,939
sort of a fanciful thing I think it

1540
01:09:03,359 --> 01:09:07,529
could pay real dividends both in terms

1541
01:09:05,939 --> 01:09:08,969
of the quality of the computing

1542
01:09:07,529 --> 01:09:13,500
experience that we will have in the

1543
01:09:08,969 --> 01:09:15,719
future but also in terms of real actual

1544
01:09:13,500 --> 01:09:18,479
monetary benefits for commercial

1545
01:09:15,719 --> 01:09:21,599
companies if they were to go this route

1546
01:09:18,479 --> 01:09:23,908
if even a small consortium of major

1547
01:09:21,599 --> 01:09:26,578
hardware vendors decided to go this

1548
01:09:23,908 --> 01:09:28,948
route and start shipping a platform with

1549
01:09:26,578 --> 01:09:31,618
a stable eisah that people could

1550
01:09:28,948 --> 01:09:33,750
directly program to I think

1551
01:09:31,618 --> 01:09:36,598
wouldn't take more than five to ten

1552
01:09:33,750 --> 01:09:40,139
years for us to really start seeing real

1553
01:09:36,599 --> 01:09:42,569
dividends from that thing all the way

1554
01:09:40,139 --> 01:09:44,429
from that being the new obvious answer

1555
01:09:42,569 --> 01:09:46,289
to things like consoles and set-top

1556
01:09:44,429 --> 01:09:48,989
boxes so I can get major design wins

1557
01:09:46,288 --> 01:09:50,548
there but just to the fact that you

1558
01:09:48,988 --> 01:09:55,098
could it could assure in a real

1559
01:09:50,548 --> 01:09:55,099
revolution in in real home computing

1560
01:09:55,788 --> 01:10:01,130
that we can't even predict how many

1561
01:09:58,349 --> 01:10:03,538
positive outcomes there may be from it

1562
01:10:01,130 --> 01:10:04,480
positive outcomes like the one we had

1563
01:10:03,538 --> 01:10:08,199
when Y

1564
01:10:04,479 --> 01:10:10,988
made Linux that has I think by anyone's

1565
01:10:08,199 --> 01:10:12,729
estimation radically changed the face of

1566
01:10:10,988 --> 01:10:14,738
computing for the better because without

1567
01:10:12,729 --> 01:10:15,879
Linux I think we would have been living

1568
01:10:14,738 --> 01:10:17,649
in a much worse world

1569
01:10:15,880 --> 01:10:20,650
I don't think Linux can happen again

1570
01:10:17,649 --> 01:10:22,719
without hardware vendors changing the

1571
01:10:20,649 --> 01:10:24,729
way they do things and I think for all

1572
01:10:22,720 --> 01:10:29,770
of our benefits they should I want to

1573
01:10:24,729 --> 01:10:31,359
see Linux happen again and I think they

1574
01:10:29,770 --> 01:10:33,760
can make it happen so please consider it

1575
01:10:31,359 --> 01:10:36,069
and know that there's tons of us out

1576
01:10:33,760 --> 01:10:39,780
here who are ready to help you and jump

1577
01:10:36,069 --> 01:10:41,829
on that bandwagon if the time comes so

1578
01:10:39,779 --> 01:10:44,829
thanks very much for listening and I'm

1579
01:10:41,829 --> 01:10:47,069
happy to take questions now from the

1580
01:10:44,829 --> 01:10:47,069
stream

1581
01:11:07,409 --> 01:11:12,130
our rift asks is include OS going in the

1582
01:11:11,350 --> 01:11:13,870
right direction

1583
01:11:12,130 --> 01:11:15,640
it does not contain the OS only your

1584
01:11:13,869 --> 01:11:19,420
program except for a bootloader

1585
01:11:15,640 --> 01:11:20,980
I have not looked at it because I know

1586
01:11:19,420 --> 01:11:22,770
about that but from your description it

1587
01:11:20,979 --> 01:11:27,539
sounds exactly like the kind of thing

1588
01:11:22,770 --> 01:11:30,130
that I'm talking about right and

1589
01:11:27,539 --> 01:11:32,529
similarly like hypervisors are sort of

1590
01:11:30,130 --> 01:11:34,569
in this direction as well in the sense

1591
01:11:32,529 --> 01:11:35,649
that like although they can't because

1592
01:11:34,569 --> 01:11:37,960
the hardware underneath is too

1593
01:11:35,649 --> 01:11:40,750
complicated they can't really provide

1594
01:11:37,960 --> 01:11:42,579
the kind of thing that we really want

1595
01:11:40,750 --> 01:11:44,380
for a consumer experience where it has

1596
01:11:42,579 --> 01:11:46,029
the full capability of running a

1597
01:11:44,380 --> 01:11:48,670
graphics driver easily and all that sort

1598
01:11:46,029 --> 01:11:49,840
of stuff right they kind of only saw

1599
01:11:48,670 --> 01:11:51,760
like a little bit of the problem but

1600
01:11:49,840 --> 01:11:54,420
they are going in that correct direction

1601
01:11:51,760 --> 01:11:54,420
in a sense right

1602
01:12:01,199 --> 01:12:08,619
the tephra foe do you have any returns

1603
01:12:04,149 --> 01:12:09,969
since you made that talk so I only gave

1604
01:12:08,619 --> 01:12:11,909
the talk to a very small number of

1605
01:12:09,970 --> 01:12:15,610
people at Intel

1606
01:12:11,909 --> 01:12:17,710
it was well-received and I did end up

1607
01:12:15,609 --> 01:12:23,589
talking to a vice-president there about

1608
01:12:17,710 --> 01:12:28,840
it but at the end of the day what I sort

1609
01:12:23,590 --> 01:12:32,470
of gathered from it was that in order to

1610
01:12:28,840 --> 01:12:35,680
really ever get something done I had a

1611
01:12:32,470 --> 01:12:39,159
major hardware vendor you need to create

1612
01:12:35,680 --> 01:12:41,170
a really big public demand for something

1613
01:12:39,159 --> 01:12:42,970
which is why I was like let me just give

1614
01:12:41,170 --> 01:12:45,730
this thing publicly I mean to do it for

1615
01:12:42,970 --> 01:12:50,710
a while and the reason I said just

1616
01:12:45,729 --> 01:12:53,229
because they have so much riding on

1617
01:12:50,710 --> 01:12:57,279
their hardware and it cost so much to

1618
01:12:53,229 --> 01:12:59,609
produce that even if something sounds

1619
01:12:57,279 --> 01:13:03,909
like a good idea and they agree with it

1620
01:12:59,609 --> 01:13:09,549
it's unclear to them that they can

1621
01:13:03,909 --> 01:13:11,529
generate the kinds of internal momentum

1622
01:13:09,550 --> 01:13:15,279
necessary to get it to actually happen

1623
01:13:11,529 --> 01:13:17,380
and I don't fault them for that I think

1624
01:13:15,279 --> 01:13:18,158
being a hardware company is not like

1625
01:13:17,380 --> 01:13:21,519
being a software

1626
01:13:18,158 --> 01:13:23,828
company being a hardware company is very

1627
01:13:21,519 --> 01:13:27,010
you must be very risk-averse

1628
01:13:23,828 --> 01:13:29,859
because fabbing a chip designing and

1629
01:13:27,010 --> 01:13:32,380
Fabio chip is an incredibly expensive

1630
01:13:29,859 --> 01:13:34,448
process on the order that we cannot

1631
01:13:32,380 --> 01:13:37,949
really comprehend in software because we

1632
01:13:34,448 --> 01:13:42,219
don't deal with the day-to-day uh and so

1633
01:13:37,948 --> 01:13:45,129
they are right to be cautious and I

1634
01:13:42,219 --> 01:13:46,779
don't blame them but we need them to go

1635
01:13:45,130 --> 01:13:49,179
in this direction I believe and so the

1636
01:13:46,779 --> 01:13:51,099
question to me is how do we generate the

1637
01:13:49,179 --> 01:13:53,469
momentum inside their companies to make

1638
01:13:51,099 --> 01:13:56,078
it happen how do we help them generate

1639
01:13:53,469 --> 01:13:58,868
that momentum because it's not their

1640
01:13:56,078 --> 01:14:00,549
fault it's not like even if we all agree

1641
01:13:58,868 --> 01:14:04,478
this was right it's not their fault it's

1642
01:14:00,550 --> 01:14:06,418
not happening because they need market

1643
01:14:04,479 --> 01:14:09,939
pressure they need external pressure

1644
01:14:06,418 --> 01:14:11,498
external demand to become obvious to

1645
01:14:09,939 --> 01:14:13,749
lots of people that company before they

1646
01:14:11,498 --> 01:14:20,078
can really put those initiatives in

1647
01:14:13,748 --> 01:14:21,788
place and so the reason I say it's a

1648
01:14:20,078 --> 01:14:23,558
collaborative effort is in the software

1649
01:14:21,788 --> 01:14:25,268
community we need to figure out ways we

1650
01:14:23,559 --> 01:14:27,429
can start to really articulate why this

1651
01:14:25,269 --> 01:14:29,199
is important and show the demand needs

1652
01:14:27,429 --> 01:14:29,708
to be there and show what the road map

1653
01:14:29,198 --> 01:14:31,928
looks like

1654
01:14:29,708 --> 01:14:34,658
because hardware companies can't just do

1655
01:14:31,929 --> 01:14:36,788
this on a whim they can't just go oh

1656
01:14:34,658 --> 01:14:38,348
yeah that I saw that talk buy case

1657
01:14:36,788 --> 01:14:41,768
meritorious sound like a good idea let's

1658
01:14:38,349 --> 01:14:43,630
go simplify the interface and then put

1659
01:14:41,769 --> 01:14:47,050
out chip it's like that's not the

1660
01:14:43,630 --> 01:14:48,819
reality of hardware right so I do think

1661
01:14:47,050 --> 01:14:50,439
it was received well and I do think it

1662
01:14:48,819 --> 01:14:52,688
will be received well at hardware

1663
01:14:50,439 --> 01:14:54,489
companies I just think it's not that

1664
01:14:52,689 --> 01:14:56,349
simple the people at the hardware

1665
01:14:54,488 --> 01:14:58,839
companies to agree with it can't just

1666
01:14:56,349 --> 01:15:00,578
start doing it they need a lot of buy-in

1667
01:14:58,840 --> 01:15:01,659
and they need a lot of external obvious

1668
01:15:00,578 --> 01:15:03,788
buy and these are publicly traded

1669
01:15:01,658 --> 01:15:06,188
companies with a lot on the line with

1670
01:15:03,788 --> 01:15:09,819
incredibly expensive processes that they

1671
01:15:06,189 --> 01:15:13,300
can't just dedicate to you know sort of

1672
01:15:09,819 --> 01:15:14,668
a a pet project that people think is

1673
01:15:13,300 --> 01:15:17,439
good

1674
01:15:14,668 --> 01:15:20,979
have I seen read ops OS and it's it's

1675
01:15:17,439 --> 01:15:26,199
20k lakh MINIX um again I want to be

1676
01:15:20,979 --> 01:15:29,769
clear about the 20,000 line thing it's

1677
01:15:26,198 --> 01:15:32,049
not that hard to make a small x86

1678
01:15:29,769 --> 01:15:36,000
operating system or x64 operating

1679
01:15:32,050 --> 01:15:41,829
in twenty thousand lines of code right

1680
01:15:36,000 --> 01:15:47,050
it won't do anything right it won't run

1681
01:15:41,829 --> 01:15:54,359
a 3d game it won't support most printers

1682
01:15:47,050 --> 01:15:54,360
or keyboards or video webcams right

1683
01:15:54,420 --> 01:16:04,390
because all of that stuff is the cruft

1684
01:15:59,289 --> 01:16:06,340
and so making an X 64 operating system

1685
01:16:04,390 --> 01:16:07,390
that's just running X 64 code that

1686
01:16:06,340 --> 01:16:10,960
doesn't interface with any external

1687
01:16:07,390 --> 01:16:14,710
devices or that still uses the VGA

1688
01:16:10,960 --> 01:16:17,319
aperture to draw a console hasn't gotten

1689
01:16:14,710 --> 01:16:19,720
any harder since 1991 really XE before

1690
01:16:17,319 --> 01:16:23,590
is nominally a bit harder than x86 to

1691
01:16:19,720 --> 01:16:26,110
get started up I believe but it's not

1692
01:16:23,590 --> 01:16:27,579
really that much different su OS is

1693
01:16:26,109 --> 01:16:29,529
right now there are 20,000 lines of code

1694
01:16:27,579 --> 01:16:32,050
but that don't do that don't have

1695
01:16:29,529 --> 01:16:33,460
running 3d graphics at full speed

1696
01:16:32,050 --> 01:16:36,010
blah-blah-blah-blah-blah right like all

1697
01:16:33,460 --> 01:16:38,260
that stuff that's the hard part the hard

1698
01:16:36,010 --> 01:16:41,949
part is getting the consumer parts in

1699
01:16:38,260 --> 01:16:43,630
there and so that's what the thing is

1700
01:16:41,949 --> 01:16:47,679
that we need to focus on it's that part

1701
01:16:43,630 --> 01:16:49,539
right so I just want to be clear on that

1702
01:16:47,680 --> 01:16:52,690
because there are small OSS out there

1703
01:16:49,539 --> 01:16:57,060
that don't really support modern

1704
01:16:52,689 --> 01:16:57,059
consumer features and that's the problem

1705
01:16:59,760 --> 01:17:04,539
what can someone who isn't a hardware

1706
01:17:01,960 --> 01:17:07,779
vendor do towards this cause I think

1707
01:17:04,539 --> 01:17:13,090
again it's about us trying to create and

1708
01:17:07,779 --> 01:17:15,519
publicize this sort of understanding of

1709
01:17:13,090 --> 01:17:18,369
the problem understanding that a 30

1710
01:17:15,520 --> 01:17:21,840
million line at minimum barrier between

1711
01:17:18,369 --> 01:17:24,510
a developer and their user is not

1712
01:17:21,840 --> 01:17:26,680
tenable and that the reason our

1713
01:17:24,510 --> 01:17:33,010
computing experiences today are so bad

1714
01:17:26,680 --> 01:17:34,600
is because of it right I think sort of

1715
01:17:33,010 --> 01:17:36,699
pushing this narrative forwards and

1716
01:17:34,600 --> 01:17:38,920
understanding that this is a problem

1717
01:17:36,699 --> 01:17:41,409
that needs solving and we need hardware

1718
01:17:38,920 --> 01:17:43,180
developers to help us solve it I think

1719
01:17:41,409 --> 01:17:44,769
that's what we can do as the first step

1720
01:17:43,180 --> 01:17:45,730
and once we start getting people

1721
01:17:44,770 --> 01:17:47,410
thinking it's a

1722
01:17:45,729 --> 01:17:49,449
it needs to solve then we can move on to

1723
01:17:47,409 --> 01:17:51,460
thinking about how we solve it but right

1724
01:17:49,449 --> 01:17:53,590
now I think the problem is is also I

1725
01:17:51,460 --> 01:17:55,210
want some meta problem people need to

1726
01:17:53,590 --> 01:17:57,579
start understanding how bad this

1727
01:17:55,210 --> 01:17:59,710
situation is they can feel it because

1728
01:17:57,579 --> 01:18:04,359
when you use a PC today it's a nightmare

1729
01:17:59,710 --> 01:18:07,239
right but we need to start articulating

1730
01:18:04,359 --> 01:18:10,449
why and we need to articulating the path

1731
01:18:07,238 --> 01:18:16,238
forward and so that needs to start

1732
01:18:10,449 --> 01:18:18,069
happening what about security should

1733
01:18:16,238 --> 01:18:21,069
that be part of a new OS or built into

1734
01:18:18,069 --> 01:18:23,649
hardware somehow directly so I would

1735
01:18:21,069 --> 01:18:26,109
actually argue that security is

1736
01:18:23,649 --> 01:18:28,960
something that actually can be made much

1737
01:18:26,109 --> 01:18:32,229
more robust in the world that I'm

1738
01:18:28,960 --> 01:18:33,909
talking about and here's why let's

1739
01:18:32,229 --> 01:18:39,299
suppose we go to a system that's very

1740
01:18:33,909 --> 01:18:42,340
similar to the 1980 system right where

1741
01:18:39,300 --> 01:18:43,420
and this is a hyperbole I don't think

1742
01:18:42,340 --> 01:18:46,600
this is where we want to end up but I'm

1743
01:18:43,420 --> 01:18:48,720
just going to give you an example it

1744
01:18:46,600 --> 01:18:52,239
would have been incredibly different

1745
01:18:48,720 --> 01:18:56,170
difficult to write a virus that attacked

1746
01:18:52,238 --> 01:18:58,119
a game on the Amiga computer because

1747
01:18:56,170 --> 01:19:01,770
every new game was completely different

1748
01:18:58,119 --> 01:19:04,510
and ran in a very different way right so

1749
01:19:01,770 --> 01:19:06,970
the viruses that typically attacked that

1750
01:19:04,510 --> 01:19:09,280
computer actually at a much harder time

1751
01:19:06,970 --> 01:19:11,800
with anything that was doing a custom OS

1752
01:19:09,279 --> 01:19:14,259
the things that it tended to attack were

1753
01:19:11,800 --> 01:19:18,789
the standard OS the workbench one that

1754
01:19:14,260 --> 01:19:21,310
shipped with it right and so I think in

1755
01:19:18,789 --> 01:19:24,220
today's world I think there's a real

1756
01:19:21,310 --> 01:19:26,890
parallel to that let's suppose that you

1757
01:19:24,220 --> 01:19:30,699
had a separate way of writing to the

1758
01:19:26,890 --> 01:19:33,610
disk and a separate way of like a

1759
01:19:30,699 --> 01:19:36,809
completely compartmentalized wholly run

1760
01:19:33,609 --> 01:19:39,909
thing that the ISO just boots to right

1761
01:19:36,810 --> 01:19:42,489
that is the web browser you use to go on

1762
01:19:39,909 --> 01:19:44,619
and do your banking and when you want to

1763
01:19:42,488 --> 01:19:49,738
do something else you boot out of it

1764
01:19:44,619 --> 01:19:52,569
it's gone and nobody even knows what the

1765
01:19:49,738 --> 01:19:54,639
that that segment of the drive isn't

1766
01:19:52,569 --> 01:19:56,799
isn't even accessible to anyone else

1767
01:19:54,640 --> 01:19:58,300
because that segment of the drive was

1768
01:19:56,800 --> 01:19:59,139
written by that thing and it's the only

1769
01:19:58,300 --> 01:20:02,610
thing that even knows where

1770
01:19:59,139 --> 01:20:02,609
or what formats in or whatever right

1771
01:20:02,788 --> 01:20:08,768
that is actually a world where security

1772
01:20:06,609 --> 01:20:11,228
breaches are way harder than they used

1773
01:20:08,769 --> 01:20:14,409
to be because now you have to deal with

1774
01:20:11,229 --> 01:20:16,780
so much variability you're essentially

1775
01:20:14,408 --> 01:20:20,859
making the virus writers task way harder

1776
01:20:16,779 --> 01:20:22,599
right the more compartmentalised you

1777
01:20:20,859 --> 01:20:25,779
make a program and the less things it

1778
01:20:22,599 --> 01:20:28,149
uses and relies on that are known to be

1779
01:20:25,779 --> 01:20:31,328
standard the harder the virus authors

1780
01:20:28,149 --> 01:20:33,189
job is so actually I would say that all

1781
01:20:31,328 --> 01:20:36,969
of the security program problems we have

1782
01:20:33,189 --> 01:20:39,639
today in a new world like I'm talking

1783
01:20:36,969 --> 01:20:41,679
about we would already get way less even

1784
01:20:39,639 --> 01:20:44,559
before we started talking about what to

1785
01:20:41,679 --> 01:20:48,819
do in addition to them for security

1786
01:20:44,559 --> 01:20:52,748
purposes because not having everything

1787
01:20:48,819 --> 01:20:58,448
run on a giant essentially 60 million

1788
01:20:52,748 --> 01:21:01,478
line exploit target right removes a huge

1789
01:20:58,448 --> 01:21:03,848
number of the potential ways people

1790
01:21:01,479 --> 01:21:06,579
break into systems so that's a great

1791
01:21:03,849 --> 01:21:08,769
feature it's not all we want to do yes

1792
01:21:06,578 --> 01:21:11,918
for security we'd want to start thinking

1793
01:21:08,769 --> 01:21:12,668
about how do you push how do you make

1794
01:21:11,918 --> 01:21:17,139
that eisah

1795
01:21:12,668 --> 01:21:19,918
be as secure as possible by design but I

1796
01:21:17,139 --> 01:21:22,418
think even before you start doing that

1797
01:21:19,918 --> 01:21:24,898
you've gotten into a better place than

1798
01:21:22,418 --> 01:21:24,898
we are today

1799
01:21:40,729 --> 01:21:46,289
we'll just talking about on YouTube yes

1800
01:21:43,520 --> 01:21:53,220
include OS runs on C++ what about

1801
01:21:46,289 --> 01:21:55,560
programming languages issue I guess I'm

1802
01:21:53,220 --> 01:21:57,510
not sure what you mean about that stuff

1803
01:21:55,560 --> 01:21:59,460
I don't know much about I don't know

1804
01:21:57,510 --> 01:22:02,010
anything about include OS but what I was

1805
01:21:59,460 --> 01:22:03,239
going to say is I don't think

1806
01:22:02,010 --> 01:22:05,760
programming languages are an issue here

1807
01:22:03,239 --> 01:22:08,279
at all the benefit of an ice ax is it is

1808
01:22:05,760 --> 01:22:10,500
an ice ax it defines the memory format

1809
01:22:08,279 --> 01:22:14,099
for the things that the hardware can do

1810
01:22:10,500 --> 01:22:18,510
and so any language can now compile to

1811
01:22:14,100 --> 01:22:20,370
it is the same as X 64 X 64 it doesn't

1812
01:22:18,510 --> 01:22:22,170
matter what program lines you use do you

1813
01:22:20,369 --> 01:22:24,890
want to use c-sharp great you want to

1814
01:22:22,170 --> 01:22:26,460
use C++ great do you want to use ML

1815
01:22:24,890 --> 01:22:28,440
fantastic do you want to run in

1816
01:22:26,460 --> 01:22:30,989
JavaScript well you're an interpreter

1817
01:22:28,439 --> 01:22:33,889
but no problem that interpreter can run

1818
01:22:30,989 --> 01:22:39,269
on exit to four as well right

1819
01:22:33,890 --> 01:22:42,000
20 years go go nuts right and so I think

1820
01:22:39,270 --> 01:22:43,860
that an ice ax is great because it it

1821
01:22:42,000 --> 01:22:49,260
just says here's what I have to happen

1822
01:22:43,859 --> 01:22:50,759
data wise in memory and with this is

1823
01:22:49,260 --> 01:22:55,020
what the data have to look like in

1824
01:22:50,760 --> 01:22:58,230
memory for the CPU the SOC to do things

1825
01:22:55,020 --> 01:23:02,370
and I don't care how it got there right

1826
01:22:58,229 --> 01:23:04,859
you can do whatever you want you can get

1827
01:23:02,369 --> 01:23:07,500
that data you can produce that data from

1828
01:23:04,859 --> 01:23:09,420
any utility you want and so every

1829
01:23:07,500 --> 01:23:10,920
language can support it if it wants to

1830
01:23:09,420 --> 01:23:13,710
any language that wants to make a

1831
01:23:10,920 --> 01:23:15,659
back-end you know clan can just make a I

1832
01:23:13,710 --> 01:23:17,609
mean LLVM can make a back-end for it and

1833
01:23:15,659 --> 01:23:23,159
then anything that clan can take can do

1834
01:23:17,609 --> 01:23:25,380
it right I have I had a chance to

1835
01:23:23,159 --> 01:23:26,760
evaluate Agner Foggs I said I haven't

1836
01:23:25,380 --> 01:23:28,260
but I don't think that's the kind of ice

1837
01:23:26,760 --> 01:23:29,820
I'm talking about thats just an ice ax

1838
01:23:28,260 --> 01:23:32,489
for CPUs am I wrong

1839
01:23:29,819 --> 01:23:34,289
I don't think it's for the system if the

1840
01:23:32,489 --> 01:23:36,420
system that we need I don't think X 64

1841
01:23:34,289 --> 01:23:37,710
is fundamentally a problem are there

1842
01:23:36,420 --> 01:23:38,909
things you'd probably change about X's

1843
01:23:37,710 --> 01:23:41,399
before if you wanted to make it better

1844
01:23:38,909 --> 01:23:43,289
absolutely do I think that's the problem

1845
01:23:41,399 --> 01:23:44,399
no it's very stable we can use

1846
01:23:43,289 --> 01:23:46,710
I don't think it needs a lot of

1847
01:23:44,399 --> 01:23:48,000
modification it's not the big part of

1848
01:23:46,710 --> 01:23:49,380
the problem today the big part of the

1849
01:23:48,000 --> 01:23:51,869
problem today is all the stuff that's

1850
01:23:49,380 --> 01:23:53,880
not x16 the exes before eisah how the

1851
01:23:51,869 --> 01:23:57,229
USB controller is programmed how the

1852
01:23:53,880 --> 01:24:01,289
graphics controller is programs how the

1853
01:23:57,229 --> 01:24:03,750
you know something if there's anything

1854
01:24:01,289 --> 01:24:05,939
else in particular I don't think there

1855
01:24:03,750 --> 01:24:08,039
is I think if you had the USB and

1856
01:24:05,939 --> 01:24:12,349
graphics controller you'd be pretty much

1857
01:24:08,039 --> 01:24:12,350
a pretty far bit of the way there but

1858
01:24:19,149 --> 01:24:22,839
for smaller code you need reusability

1859
01:24:21,069 --> 01:24:24,369
and for reusability you need generic

1860
01:24:22,840 --> 01:24:26,110
programming programmers are not used to

1861
01:24:24,369 --> 01:24:28,750
writing generic code and companies don't

1862
01:24:26,109 --> 01:24:30,039
care about reusability as long as they

1863
01:24:28,750 --> 01:24:31,359
ship features do you think generic

1864
01:24:30,039 --> 01:24:34,750
parent should be taught in practice mark

1865
01:24:31,359 --> 01:24:38,139
I disagree with with that just even this

1866
01:24:34,750 --> 01:24:40,960
the premise generic code is usually

1867
01:24:38,140 --> 01:24:44,460
larger not smaller smaller code is

1868
01:24:40,960 --> 01:24:47,560
usually because it was specific right

1869
01:24:44,460 --> 01:24:50,710
and so I think the important thing to

1870
01:24:47,560 --> 01:24:52,270
understand is like hey in the DOS days

1871
01:24:50,710 --> 01:24:54,189
if you wanted to initialize the graphics

1872
01:24:52,270 --> 01:24:55,960
card you put two values into two

1873
01:24:54,189 --> 01:24:58,169
registers and you trigger the interrupts

1874
01:24:55,960 --> 01:25:01,270
that is setting up the graphics card

1875
01:24:58,170 --> 01:25:04,930
nowadays you need to make like a billion

1876
01:25:01,270 --> 01:25:09,300
OpenGL calls right or Vulcan calls or

1877
01:25:04,930 --> 01:25:12,490
whatever right that non sort of

1878
01:25:09,300 --> 01:25:16,029
conciseness of the programmability is

1879
01:25:12,489 --> 01:25:20,529
what leads to the problem and it's not

1880
01:25:16,029 --> 01:25:21,759
really about generic programming can you

1881
01:25:20,529 --> 01:25:23,199
give an example of how the interface

1882
01:25:21,760 --> 01:25:26,500
would be simpler for your common

1883
01:25:23,199 --> 01:25:30,720
programmer sure that das example I just

1884
01:25:26,500 --> 01:25:30,720
gave is is a very good example right

1885
01:25:31,770 --> 01:25:40,720
initializing something by doing two mobs

1886
01:25:35,680 --> 01:25:41,890
and an INT is so far removed from how

1887
01:25:40,720 --> 01:25:44,740
you have to initialize a graphics card

1888
01:25:41,890 --> 01:25:49,720
today in terms of programmer time and

1889
01:25:44,739 --> 01:25:51,909
energy that it's insane right and the

1890
01:25:49,720 --> 01:25:54,130
problem hasn't really gotten that much

1891
01:25:51,909 --> 01:25:56,619
harder I know people think it has but it

1892
01:25:54,130 --> 01:25:58,539
hasn't really especially as GPUs become

1893
01:25:56,619 --> 01:26:01,539
programmable a lot of what you do with

1894
01:25:58,539 --> 01:26:03,699
them is just uploading bytecode for them

1895
01:26:01,539 --> 01:26:07,479
to run right now byte codes the wrong

1896
01:26:03,699 --> 01:26:08,979
term compiled you know code for their

1897
01:26:07,479 --> 01:26:12,189
machine language right

1898
01:26:08,979 --> 01:26:14,079
and the control of them is not that

1899
01:26:12,189 --> 01:26:16,689
complicated and could be simplified

1900
01:26:14,079 --> 01:26:18,220
further if we got back to that that's

1901
01:26:16,689 --> 01:26:19,960
all you would do when you needed to

1902
01:26:18,220 --> 01:26:22,150
initialize a graphics card you wouldn't

1903
01:26:19,960 --> 01:26:23,199
need tons of libraries and drivers and

1904
01:26:22,149 --> 01:26:25,479
all these other things in your way

1905
01:26:23,199 --> 01:26:29,699
because fundamentally speaking it's just

1906
01:26:25,479 --> 01:26:29,699
not that hard of a problem

1907
01:26:33,908 --> 01:26:37,248
not much harder to set up six written

1908
01:26:36,139 --> 01:26:39,260
through it just one more step yeah I

1909
01:26:37,248 --> 01:26:41,568
mean like I said it's um it's very minor

1910
01:26:39,260 --> 01:26:44,030
right you just have to do a little bit

1911
01:26:41,569 --> 01:26:49,599
to get yourself in a 64-bit mode and yes

1912
01:26:44,029 --> 01:26:49,599
the talk will be watchable on YouTube

1913
01:26:52,418 --> 01:26:56,029
internal static voice oh do you propose

1914
01:26:54,498 --> 01:26:57,108
that we should make a chip that doesn't

1915
01:26:56,029 --> 01:26:59,599
spark as your feature or features that

1916
01:26:57,109 --> 01:27:02,869
consumer expects no what I'm suggesting

1917
01:26:59,599 --> 01:27:04,878
is we need to just take so for example

1918
01:27:02,868 --> 01:27:08,179
we already have chips that are almost

1919
01:27:04,878 --> 01:27:10,399
what we want right so for example a lot

1920
01:27:08,179 --> 01:27:12,918
of laptops that consumers actually use

1921
01:27:10,399 --> 01:27:15,609
today have their CPU and their GPUs

1922
01:27:12,918 --> 01:27:18,618
supplied by Intel on a single die right

1923
01:27:15,609 --> 01:27:20,479
the core i7 for example had the GPU

1924
01:27:18,618 --> 01:27:21,348
welded onto it and it's got an own

1925
01:27:20,479 --> 01:27:23,958
programming

1926
01:27:21,349 --> 01:27:26,179
eisah on it right the difference is that

1927
01:27:23,958 --> 01:27:27,679
ice ax is not stable from generation to

1928
01:27:26,179 --> 01:27:30,769
generation and it's not particularly

1929
01:27:27,679 --> 01:27:32,689
well designed but fundamentally speaking

1930
01:27:30,769 --> 01:27:35,899
that's already what we're talking about

1931
01:27:32,689 --> 01:27:38,389
a core i7 chip was almost what we need

1932
01:27:35,899 --> 01:27:42,050
hardware wise it just wasn't necessarily

1933
01:27:38,389 --> 01:27:43,699
designed at the interface level to be

1934
01:27:42,050 --> 01:27:46,359
something that's particularly usable but

1935
01:27:43,698 --> 01:27:46,358
it could have been

1936
01:27:52,399 --> 01:27:55,979
do you think that maybe the reason that

1937
01:27:54,510 --> 01:27:57,360
some of the suffer and driver has become

1938
01:27:55,979 --> 01:27:58,708
our bloated and some of the code pests

1939
01:27:57,359 --> 01:27:59,908
or larger is because the hardware is

1940
01:27:58,708 --> 01:28:02,099
more complicated than it used to be as

1941
01:27:59,908 --> 01:28:02,578
well no I actually don't think that's

1942
01:28:02,099 --> 01:28:04,619
true

1943
01:28:02,578 --> 01:28:06,418
I think the hardware is actually simpler

1944
01:28:04,618 --> 01:28:10,529
now than it used to be in a lot of ways

1945
01:28:06,418 --> 01:28:13,828
I don't think that you can look at

1946
01:28:10,529 --> 01:28:16,948
something like an Amiga computer and

1947
01:28:13,828 --> 01:28:19,109
think that it was particularly simple it

1948
01:28:16,948 --> 01:28:21,779
was still rather complicated and

1949
01:28:19,109 --> 01:28:24,089
programming it well was actually pretty

1950
01:28:21,779 --> 01:28:25,978
tricky at some level if you really did

1951
01:28:24,090 --> 01:28:28,078
want to get it was a fairly high point

1952
01:28:25,979 --> 01:28:31,139
in programming complexity I think

1953
01:28:28,078 --> 01:28:32,938
nowadays GPUs are actually very

1954
01:28:31,139 --> 01:28:36,059
programmable and a lot of what they do

1955
01:28:32,939 --> 01:28:39,539
just looks like executing machine code

1956
01:28:36,059 --> 01:28:43,498
like a CPU would do right it's not that

1957
01:28:39,538 --> 01:28:44,849
special purpose and that is why I think

1958
01:28:43,498 --> 01:28:47,398
we're getting I wouldn't have

1959
01:28:44,849 --> 01:28:49,529
recommended this path in the year 2000

1960
01:28:47,399 --> 01:28:51,360
because things were still so TWiki

1961
01:28:49,529 --> 01:28:53,639
special-purpose and changing so rapidly

1962
01:28:51,359 --> 01:28:55,339
that I don't think it would have made

1963
01:28:53,639 --> 01:28:58,529
any sense to settle on an ice ax

1964
01:28:55,340 --> 01:29:01,828
nowadays GPUs are becoming almost just

1965
01:28:58,529 --> 01:29:04,529
other CPUs right and I think if we just

1966
01:29:01,828 --> 01:29:07,768
started to look at it as a unified ice

1967
01:29:04,529 --> 01:29:09,328
ax it actually can be quite simple even

1968
01:29:07,769 --> 01:29:12,418
compared to old computers we used to

1969
01:29:09,328 --> 01:29:15,719
program directly and again that's only

1970
01:29:12,418 --> 01:29:17,099
because we have gotten to a place where

1971
01:29:15,719 --> 01:29:18,958
these things became general-purpose

1972
01:29:17,099 --> 01:29:20,788
because they had to in order to support

1973
01:29:18,958 --> 01:29:24,148
the kinds of workloads we wanted right

1974
01:29:20,788 --> 01:29:27,090
they are continuing ever as we go GPUs

1975
01:29:24,149 --> 01:29:28,679
have steadily gotten less and less like

1976
01:29:27,090 --> 01:29:30,569
it they used to be very much like an

1977
01:29:28,679 --> 01:29:33,149
Amiga chip all kinds of crazy

1978
01:29:30,569 --> 01:29:34,498
special-purpose stuff right and that's

1979
01:29:33,149 --> 01:29:38,280
all they could do no general purpose

1980
01:29:34,498 --> 01:29:41,099
right and as they go they've gotten much

1981
01:29:38,279 --> 01:29:42,569
simpler and when I say simpler I don't

1982
01:29:41,099 --> 01:29:44,969
mean in terms of their capabilities I

1983
01:29:42,569 --> 01:29:52,259
mean in terms of their difference from

1984
01:29:44,969 --> 01:29:55,319
an x64 right a modern GPU is now very

1985
01:29:52,260 --> 01:29:58,979
close to an x64 chip it used to be

1986
01:29:55,319 --> 01:30:00,538
nothing like one and standardizing on an

1987
01:29:58,979 --> 01:30:05,539
instruction set for one might have been

1988
01:30:00,538 --> 01:30:05,538
a really silly idea at that time right

1989
01:30:06,529 --> 01:30:11,789
so I think that it's it's really that's

1990
01:30:09,930 --> 01:30:12,810
not the explanation I think the reason

1991
01:30:11,789 --> 01:30:14,279
that software and drivers come are

1992
01:30:12,810 --> 01:30:17,280
bloated is because of the route we took

1993
01:30:14,279 --> 01:30:19,949
to get there and make no mistake it may

1994
01:30:17,279 --> 01:30:22,829
have been necessary to go that route it

1995
01:30:19,949 --> 01:30:25,590
may have been very good for us to have a

1996
01:30:22,829 --> 01:30:29,010
time in computing history when it was

1997
01:30:25,590 --> 01:30:31,050
crazy cruft in between mushy almost

1998
01:30:29,010 --> 01:30:33,060
barely working stuff that anyone could

1999
01:30:31,050 --> 01:30:35,159
swap in and out because that allowed the

2000
01:30:33,060 --> 01:30:37,950
hardware to experiment a lot and we

2001
01:30:35,159 --> 01:30:42,420
needed that until we started realizing

2002
01:30:37,949 --> 01:30:45,840
that GPUs are gonna be basically CPUs we

2003
01:30:42,420 --> 01:30:47,520
needed that right but now that we're

2004
01:30:45,840 --> 01:30:49,680
kind of starting to converge I think the

2005
01:30:47,520 --> 01:30:52,530
time has come to start looking towards

2006
01:30:49,680 --> 01:30:54,420
an ice ax again right so I don't think I

2007
01:30:52,529 --> 01:30:57,149
I'm not trying to make any arguments

2008
01:30:54,420 --> 01:30:59,010
that we did the wrong thing then maybe

2009
01:30:57,149 --> 01:31:08,489
it was the right thing for its time I

2010
01:30:59,010 --> 01:31:09,659
think it needs to come back around just

2011
01:31:08,489 --> 01:31:10,949
the world you're promoting me in the end

2012
01:31:09,659 --> 01:31:12,300
or at least a big decrease in

2013
01:31:10,949 --> 01:31:13,889
interoperability if so wouldn't that

2014
01:31:12,300 --> 01:31:15,960
make developing applications much harder

2015
01:31:13,890 --> 01:31:18,150
across multiple systems no it means the

2016
01:31:15,960 --> 01:31:19,319
opposite of that the reason I suggest

2017
01:31:18,149 --> 01:31:21,210
that means the opposite of that is for

2018
01:31:19,319 --> 01:31:24,960
example take the current situation today

2019
01:31:21,210 --> 01:31:28,020
where you want to ship a game on a PC

2020
01:31:24,960 --> 01:31:29,069
and on a Mac right now that is an

2021
01:31:28,020 --> 01:31:32,310
incredibly difficult proposition

2022
01:31:29,069 --> 01:31:35,489
actually most people who want to do it

2023
01:31:32,310 --> 01:31:37,770
do absolutely ridiculous stuff to make

2024
01:31:35,489 --> 01:31:40,590
that happen either they use a huge

2025
01:31:37,770 --> 01:31:43,140
abstraction library to separate them

2026
01:31:40,590 --> 01:31:45,199
from the problem and that abstraction

2027
01:31:43,140 --> 01:31:48,329
library has two totally different

2028
01:31:45,199 --> 01:31:53,309
compilation paths one for Apple and one

2029
01:31:48,329 --> 01:31:56,189
for PC or they do hilarious things like

2030
01:31:53,310 --> 01:31:58,560
use a DirectX emulation layer on their

2031
01:31:56,189 --> 01:32:02,039
apple part that silently transcodes it

2032
01:31:58,560 --> 01:32:04,500
to metal right so the interoperability

2033
01:32:02,039 --> 01:32:06,329
is actually awful today it's very very

2034
01:32:04,500 --> 01:32:10,010
bad you pretty much need two completely

2035
01:32:06,329 --> 01:32:10,010
different executables for Apple on PC

2036
01:32:10,100 --> 01:32:16,620
what I would point out it's the same

2037
01:32:13,100 --> 01:32:18,449
computer it's the exact same computer

2038
01:32:16,619 --> 01:32:21,179
you've got the same

2039
01:32:18,448 --> 01:32:24,178
force card and the same Intel chip in

2040
01:32:21,179 --> 01:32:26,340
the Apple computer as you have in the PC

2041
01:32:24,179 --> 01:32:29,038
yet you need a completely different

2042
01:32:26,340 --> 01:32:30,599
program on both to run if on the other

2043
01:32:29,038 --> 01:32:32,550
hand the ice ax was on the hardware

2044
01:32:30,599 --> 01:32:34,769
level you just took the same program

2045
01:32:32,550 --> 01:32:38,130
both OSS could just run the same program

2046
01:32:34,769 --> 01:32:39,929
you'd be done right interoperability

2047
01:32:38,130 --> 01:32:41,849
would be a little harder for things that

2048
01:32:39,929 --> 01:32:44,429
want to use a window manager so non full

2049
01:32:41,849 --> 01:32:47,309
screen but for games you just ship the

2050
01:32:44,429 --> 01:32:49,109
same package every game that shipped on

2051
01:32:47,309 --> 01:32:53,849
a PC would just run on a Mac you'd be

2052
01:32:49,109 --> 01:32:55,920
done right so actually it's the opposite

2053
01:32:53,849 --> 01:32:58,380
having a hardware eisah can only

2054
01:32:55,920 --> 01:33:00,090
increase the chances that you will be

2055
01:32:58,380 --> 01:33:02,248
able to interoperate not the other way

2056
01:33:00,090 --> 01:33:03,510
around cuz the world we live in today is

2057
01:33:02,248 --> 01:33:06,679
the one where you have no

2058
01:33:03,510 --> 01:33:08,998
interoperability and the only way to get

2059
01:33:06,679 --> 01:33:11,038
portability is to run on top of a huge

2060
01:33:08,998 --> 01:33:13,109
stack of libraries the world I'm talking

2061
01:33:11,038 --> 01:33:14,219
about you can still do that you can

2062
01:33:13,109 --> 01:33:15,420
still run on a huge stack of libraries

2063
01:33:14,219 --> 01:33:17,969
if you want to right because it's the

2064
01:33:15,420 --> 01:33:19,920
same you could but you also now have the

2065
01:33:17,969 --> 01:33:21,779
option of not doing that and it could

2066
01:33:19,920 --> 01:33:24,149
run in multiple places even when you

2067
01:33:21,779 --> 01:33:26,038
don't so it's if anything increases the

2068
01:33:24,149 --> 01:33:27,569
interoperability it can never decrease

2069
01:33:26,038 --> 01:33:29,279
it because you always have the

2070
01:33:27,569 --> 01:33:30,868
opportunity what you did before which is

2071
01:33:29,279 --> 01:33:32,458
just have a huge pile of libraries

2072
01:33:30,868 --> 01:33:33,899
underneath you so if you want that you

2073
01:33:32,458 --> 01:33:36,109
can still do it right nothing would stop

2074
01:33:33,899 --> 01:33:36,109
you

2075
01:33:41,250 --> 01:33:46,289
isn't that what Android and I believe

2076
01:33:43,198 --> 01:33:48,179
iOS do sorry I'm not sure what the thing

2077
01:33:46,289 --> 01:33:50,969
is that you're referring to probably

2078
01:33:48,180 --> 01:33:52,380
because it was asked a while back in a

2079
01:33:50,969 --> 01:33:53,850
world where every program runs its own

2080
01:33:52,380 --> 01:33:55,199
OS how do you handle running two

2081
01:33:53,850 --> 01:33:57,810
programs simultaneously or am i

2082
01:33:55,198 --> 01:34:01,198
misunderstanding so you may be

2083
01:33:57,810 --> 01:34:03,180
misunderstanding slightly again what I'm

2084
01:34:01,198 --> 01:34:04,469
suggesting is not that we need a world

2085
01:34:03,180 --> 01:34:06,270
where everyone writes their own OS

2086
01:34:04,469 --> 01:34:08,010
because you don't really need to do that

2087
01:34:06,270 --> 01:34:10,080
for any particular purpose and it's

2088
01:34:08,010 --> 01:34:13,530
totally fine to write something that

2089
01:34:10,079 --> 01:34:15,329
isn't running on its own OS right but

2090
01:34:13,529 --> 01:34:16,948
there's two inches that question one if

2091
01:34:15,329 --> 01:34:18,899
we do want a world where every program

2092
01:34:16,948 --> 01:34:20,819
runs on its own OS we can do that using

2093
01:34:18,899 --> 01:34:22,769
something like a hypervisor right that's

2094
01:34:20,819 --> 01:34:24,869
what a hypervisor is today

2095
01:34:22,770 --> 01:34:27,090
it's how datacenters work right it's how

2096
01:34:24,869 --> 01:34:29,369
things work where you have multiple os's

2097
01:34:27,090 --> 01:34:31,590
that need to maybe run on this shared

2098
01:34:29,369 --> 01:34:34,590
computing device that timeshares

2099
01:34:31,590 --> 01:34:37,050
depending on who is loaded on it at the

2100
01:34:34,590 --> 01:34:39,840
time so we have a solution to that

2101
01:34:37,050 --> 01:34:41,219
problem it's ring -1 in an intel chip or

2102
01:34:39,840 --> 01:34:42,600
whatever you want to call it we have a

2103
01:34:41,219 --> 01:34:44,460
switch in that problem so we can run two

2104
01:34:42,600 --> 01:34:45,989
programs simultaneously or more if we

2105
01:34:44,460 --> 01:34:48,149
want to and swap between them based on

2106
01:34:45,988 --> 01:34:50,549
which one we're trying to use but I'm

2107
01:34:48,149 --> 01:34:52,289
not even advocating that I don't think

2108
01:34:50,550 --> 01:34:54,270
we need a world where every programmer

2109
01:34:52,289 --> 01:34:56,729
writes or of an OS it's not necessary

2110
01:34:54,270 --> 01:35:00,110
what I am advocating is a world in which

2111
01:34:56,729 --> 01:35:02,968
anyone who wants to write an OS can

2112
01:35:00,109 --> 01:35:04,920
write because that's how we get

2113
01:35:02,969 --> 01:35:07,590
ourselves out of this world of very

2114
01:35:04,920 --> 01:35:09,630
restrictive poor-performing OS is that

2115
01:35:07,590 --> 01:35:13,140
have to be huge as well and are very

2116
01:35:09,630 --> 01:35:15,210
unreliable right so being put in a

2117
01:35:13,140 --> 01:35:17,969
position where we can innovate on OS as

2118
01:35:15,210 --> 01:35:20,550
easily and also where the OS itself is

2119
01:35:17,969 --> 01:35:22,050
not thought of as a big deal right it's

2120
01:35:20,550 --> 01:35:24,230
just oh what OS are you running out it

2121
01:35:22,050 --> 01:35:26,730
doesn't really matter that much right

2122
01:35:24,229 --> 01:35:29,099
because the services the OS provides are

2123
01:35:26,729 --> 01:35:31,079
very minimal at that point you're right

2124
01:35:29,100 --> 01:35:33,870
right now the services the OS provides

2125
01:35:31,079 --> 01:35:36,448
are imperative and maximal without the

2126
01:35:33,869 --> 01:35:38,430
OS is graphics drivers USB driver disk

2127
01:35:36,448 --> 01:35:40,529
driver Network driver without all that

2128
01:35:38,430 --> 01:35:43,829
stuff in place you can't even make a

2129
01:35:40,529 --> 01:35:45,269
barely functioning program right but in

2130
01:35:43,829 --> 01:35:47,069
the future when you didn't need any of

2131
01:35:45,270 --> 01:35:49,949
those things the OS isn't really that

2132
01:35:47,069 --> 01:35:51,840
relevant and you could run the same

2133
01:35:49,948 --> 01:35:53,639
program potentially on many different

2134
01:35:51,840 --> 01:35:55,139
OSS without a big without it being a big

2135
01:35:53,640 --> 01:35:58,469
deal for example

2136
01:35:55,139 --> 01:36:03,300
so if we were to move towards more of a

2137
01:35:58,469 --> 01:36:05,310
hired hardware specified world it just

2138
01:36:03,300 --> 01:36:07,560
opens up a lot of possibilities and you

2139
01:36:05,310 --> 01:36:10,800
don't have to use those possibilities

2140
01:36:07,560 --> 01:36:12,420
everywhere having them be available

2141
01:36:10,800 --> 01:36:20,159
though is critical and it's critical for

2142
01:36:12,420 --> 01:36:21,480
that competition and experimentation so

2143
01:36:20,158 --> 01:36:22,229
you're opposed there's new multitasking

2144
01:36:21,479 --> 01:36:23,849
because if you start separating

2145
01:36:22,229 --> 01:36:25,799
applications you will start to get all

2146
01:36:23,850 --> 01:36:29,000
the requirements of modern opera systems

2147
01:36:25,800 --> 01:36:30,779
over time um sue yes and no right

2148
01:36:29,000 --> 01:36:33,210
there's a couple of things that I would

2149
01:36:30,779 --> 01:36:35,639
point out about that one is that at the

2150
01:36:33,210 --> 01:36:38,310
moment people make very low use of

2151
01:36:35,639 --> 01:36:40,710
multitasking they make such low use of

2152
01:36:38,310 --> 01:36:44,190
multitasking that things like Android

2153
01:36:40,710 --> 01:36:45,989
and and iOS support it in a very light

2154
01:36:44,189 --> 01:36:47,759
and restrictive fashion right so if you

2155
01:36:45,988 --> 01:36:50,849
look at how people actually use their

2156
01:36:47,760 --> 01:36:53,190
systems multitasking is not as relevant

2157
01:36:50,850 --> 01:36:57,539
as you might think but let me put that

2158
01:36:53,189 --> 01:36:59,759
in some into some context here to the

2159
01:36:57,539 --> 01:37:02,000
extent that you want multitasking at

2160
01:36:59,760 --> 01:37:05,730
least for example the way I use it is

2161
01:37:02,000 --> 01:37:08,789
usually partitioned it's partitioned

2162
01:37:05,729 --> 01:37:12,238
into two things one there are background

2163
01:37:08,789 --> 01:37:13,469
tasks that I may want to run and then

2164
01:37:12,238 --> 01:37:17,459
there is the application I'm actually

2165
01:37:13,469 --> 01:37:21,480
using right and to a large extent that

2166
01:37:17,460 --> 01:37:26,189
is the that is all I really want my

2167
01:37:21,479 --> 01:37:27,509
hypervisor or OS to do right maybe I

2168
01:37:26,189 --> 01:37:29,069
want to download something in the

2169
01:37:27,510 --> 01:37:30,570
background but other than that I really

2170
01:37:29,069 --> 01:37:32,309
don't want my computer to be doing

2171
01:37:30,569 --> 01:37:35,939
anything other than what I'm actually

2172
01:37:32,310 --> 01:37:37,260
doing right now right so there are some

2173
01:37:35,939 --> 01:37:39,539
things we you may want to run in the

2174
01:37:37,260 --> 01:37:40,679
background and then most your computing

2175
01:37:39,539 --> 01:37:44,670
research you want to be noted to one

2176
01:37:40,679 --> 01:37:47,069
thing getting to a place where that is a

2177
01:37:44,670 --> 01:37:49,590
more sensible thing rather than the

2178
01:37:47,069 --> 01:37:51,929
current mode of multitasking where

2179
01:37:49,590 --> 01:37:53,819
there's just tons of crap running on my

2180
01:37:51,929 --> 01:37:55,679
aperture system at all times I would

2181
01:37:53,819 --> 01:37:57,029
actually say a more restrictive version

2182
01:37:55,679 --> 01:38:00,569
of multitasking would actually be a good

2183
01:37:57,029 --> 01:38:02,550
thing that said that's my opinion and I

2184
01:38:00,569 --> 01:38:06,059
don't think my opinion is the important

2185
01:38:02,550 --> 01:38:08,850
part here having different os's for

2186
01:38:06,060 --> 01:38:11,100
different purposes is what I want

2187
01:38:08,850 --> 01:38:13,440
I want an OS that works the way I just

2188
01:38:11,100 --> 01:38:16,110
said and I'd love you to have an OS that

2189
01:38:13,439 --> 01:38:18,479
works the way you want right getting

2190
01:38:16,109 --> 01:38:20,880
down to an ice ax where a program can be

2191
01:38:18,479 --> 01:38:24,049
written without thought to the OS it was

2192
01:38:20,880 --> 01:38:27,840
running on would be a huge win for that

2193
01:38:24,050 --> 01:38:29,760
right because furthermore you could have

2194
01:38:27,840 --> 01:38:31,260
a sort of standardized OS layer a

2195
01:38:29,760 --> 01:38:33,690
minimal one on top of that we could

2196
01:38:31,260 --> 01:38:37,199
innovate on whereas any OS that you know

2197
01:38:33,689 --> 01:38:38,819
something like POSIX right if you wanted

2198
01:38:37,199 --> 01:38:40,800
to make something that was like the new

2199
01:38:38,819 --> 01:38:42,299
POSIX here is a standard we architected

2200
01:38:40,800 --> 01:38:43,529
it well we really thought about it

2201
01:38:42,300 --> 01:38:44,880
here's the thing you can write

2202
01:38:43,529 --> 01:38:48,659
applications - that's the minimum

2203
01:38:44,880 --> 01:38:50,310
library necessary to talk to an OS right

2204
01:38:48,659 --> 01:38:51,420
and in everything that's hardware

2205
01:38:50,310 --> 01:38:53,280
related you can just do directly on the

2206
01:38:51,420 --> 01:38:55,619
hardware we broker it a little bit but

2207
01:38:53,279 --> 01:38:57,689
that's it right much like Arrakis that

2208
01:38:55,619 --> 01:39:00,599
paper I reference please read it it's

2209
01:38:57,689 --> 01:39:02,579
very good if we did a minimal thing like

2210
01:39:00,600 --> 01:39:04,050
that that we all agreed on then everyone

2211
01:39:02,579 --> 01:39:07,409
could write OS is that rain everyone's

2212
01:39:04,050 --> 01:39:08,310
software right because now there's no

2213
01:39:07,409 --> 01:39:11,130
chance of that

2214
01:39:08,310 --> 01:39:13,500
because there's so much disagreement

2215
01:39:11,130 --> 01:39:15,900
about how you would even drive the

2216
01:39:13,500 --> 01:39:17,760
hardware that there's no chance of it

2217
01:39:15,899 --> 01:39:19,619
but once you take all of that out of it

2218
01:39:17,760 --> 01:39:21,210
you realize the Syst the services an

2219
01:39:19,619 --> 01:39:23,069
operating system should be delivering to

2220
01:39:21,210 --> 01:39:24,750
you are so small that we could just

2221
01:39:23,069 --> 01:39:27,539
probably agree on them in something like

2222
01:39:24,750 --> 01:39:29,939
POSIX again how do I know this because

2223
01:39:27,539 --> 01:39:32,310
we used to do it back when hardware is

2224
01:39:29,939 --> 01:39:35,069
designed sensibly we had stuff like a

2225
01:39:32,310 --> 01:39:37,920
fairly small substrate of how you would

2226
01:39:35,069 --> 01:39:40,859
do things a vt100 terminal spec was all

2227
01:39:37,920 --> 01:39:43,739
you really need if it's right I don't

2228
01:39:40,859 --> 01:39:47,460
think we're fundamentally that far away

2229
01:39:43,739 --> 01:39:49,050
from that I think we let ourselves get

2230
01:39:47,460 --> 01:39:51,930
that far away because of the driver

2231
01:39:49,050 --> 01:39:53,699
nightmare but I think we can move away

2232
01:39:51,930 --> 01:39:55,650
from it and once you move away from it

2233
01:39:53,699 --> 01:39:57,149
you start to lose a lot of these

2234
01:39:55,649 --> 01:39:59,389
compatibility issues that you're talking

2235
01:39:57,149 --> 01:39:59,389
about

2236
01:40:13,680 --> 01:40:17,940
that's our look you so all we really

2237
01:40:15,899 --> 01:40:20,519
need is for us be to be in the ice ax

2238
01:40:17,939 --> 01:40:22,079
and CPUs with enough course to be GPU

2239
01:40:20,520 --> 01:40:24,540
for the GPU Deer Island we don't even

2240
01:40:22,079 --> 01:40:27,630
need that right you can have a CPU and

2241
01:40:24,539 --> 01:40:30,560
GPU just make the GPU be a standard

2242
01:40:27,630 --> 01:40:34,140
programmable spec that that stays

2243
01:40:30,560 --> 01:40:35,880
compatible as you move forward that's

2244
01:40:34,140 --> 01:40:38,820
all we need we don't need to replace

2245
01:40:35,880 --> 01:40:41,039
GPUs GPUs can still play their purpose

2246
01:40:38,819 --> 01:40:43,559
you can have a heterogeneous computing

2247
01:40:41,039 --> 01:40:45,420
environment again the Amiga was a

2248
01:40:43,560 --> 01:40:48,840
heterogeneous computing environment it

2249
01:40:45,420 --> 01:40:55,529
had a CPU and a GPU and an APU an audio

2250
01:40:48,840 --> 01:40:58,079
processing unit right and so it's not at

2251
01:40:55,529 --> 01:40:59,670
all about removing the GPU from the

2252
01:40:58,079 --> 01:41:00,029
equation or removing USB from the

2253
01:40:59,670 --> 01:41:02,970
creation

2254
01:41:00,029 --> 01:41:05,449
it's about standardizing on interfaces

2255
01:41:02,970 --> 01:41:08,220
to them that are hardware based and

2256
01:41:05,449 --> 01:41:13,229
saying we're going to accept the

2257
01:41:08,220 --> 01:41:18,210
limitation of that going forward right

2258
01:41:13,229 --> 01:41:21,449
and so the x64 and x86 ices are examples

2259
01:41:18,210 --> 01:41:24,480
of how that worked for us in PC

2260
01:41:21,449 --> 01:41:28,859
computing we never got one of those for

2261
01:41:24,479 --> 01:41:30,299
a GPU let's try to get one and while

2262
01:41:28,859 --> 01:41:31,920
we're at it let's get one for the USB

2263
01:41:30,300 --> 01:41:34,800
controller and the disk controller as

2264
01:41:31,920 --> 01:41:39,480
well because if we have those then you

2265
01:41:34,800 --> 01:41:41,430
can make an OS very easily every we

2266
01:41:39,479 --> 01:41:44,009
could do handmade OS and it would be you

2267
01:41:41,430 --> 01:41:46,650
know 30 episodes long or something right

2268
01:41:44,010 --> 01:41:47,220
if we did it now it would be god knows

2269
01:41:46,649 --> 01:41:50,789
how long

2270
01:41:47,220 --> 01:41:53,449
we'd go on forever right to try and get

2271
01:41:50,789 --> 01:41:53,449
all the stuff in there

2272
01:41:58,159 --> 01:42:02,399
do you feel there's a risk to locking

2273
01:42:00,539 --> 01:42:04,050
things into an ice ax that is

2274
01:42:02,399 --> 01:42:05,879
potentially still substantially evolving

2275
01:42:04,050 --> 01:42:07,260
the average lifespan of an ice ax is

2276
01:42:05,880 --> 01:42:08,970
should be substantially longer than an

2277
01:42:07,260 --> 01:42:10,199
API and I worry that the rate of

2278
01:42:08,970 --> 01:42:13,260
progress would necessarily change for

2279
01:42:10,199 --> 01:42:17,488
the worse um so that's a judgment call

2280
01:42:13,260 --> 01:42:18,600
and I think you're exactly right so I do

2281
01:42:17,488 --> 01:42:22,229
not disagree with that at all

2282
01:42:18,600 --> 01:42:25,079
I think it's a judgement call when you

2283
01:42:22,229 --> 01:42:29,219
want to move from an ice ax from an API

2284
01:42:25,079 --> 01:42:31,579
to an ice ax right I'm arguing the time

2285
01:42:29,220 --> 01:42:35,640
is now I'm arguing that we have crossed

2286
01:42:31,579 --> 01:42:38,069
the threshold of where the problem is no

2287
01:42:35,640 --> 01:42:39,410
longer the hardware innovation it's the

2288
01:42:38,069 --> 01:42:43,469
API

2289
01:42:39,409 --> 01:42:45,659
it's the cruft right my argument is not

2290
01:42:43,470 --> 01:42:47,730
that there aren't drawbacks to switching

2291
01:42:45,659 --> 01:42:51,238
to an ice ax my argument is that they

2292
01:42:47,729 --> 01:42:52,979
are now less drawbacks to that then

2293
01:42:51,238 --> 01:42:56,459
there are from continuing the path we're

2294
01:42:52,979 --> 01:42:58,709
going so it's it's a switch right for a

2295
01:42:56,460 --> 01:42:59,340
while it was probably clearly the right

2296
01:42:58,710 --> 01:43:01,710
decision

2297
01:42:59,340 --> 01:43:04,140
not to lock into an ice ax for the

2298
01:43:01,710 --> 01:43:06,779
entire system I think we have gotten to

2299
01:43:04,140 --> 01:43:09,329
the point where now that trade-off has

2300
01:43:06,779 --> 01:43:10,649
changed I think computing the computing

2301
01:43:09,329 --> 01:43:12,420
world would be better served going

2302
01:43:10,649 --> 01:43:15,059
forward and the future would be brighter

2303
01:43:12,420 --> 01:43:17,970
if now we said we know enough about

2304
01:43:15,060 --> 01:43:20,150
these problems now that we're willing to

2305
01:43:17,970 --> 01:43:23,010
take the hit and it is a hit of

2306
01:43:20,149 --> 01:43:25,429
switching to a reliable ice ax going

2307
01:43:23,010 --> 01:43:25,430
forwards

2308
01:43:31,949 --> 01:43:38,519
Oh sacré the amiga GPU was just a wire

2309
01:43:36,989 --> 01:43:39,179
that went across the screen what are you

2310
01:43:38,520 --> 01:43:45,390
talk

2311
01:43:39,180 --> 01:43:48,930
uh no the Amiga had to separately

2312
01:43:45,390 --> 01:43:50,369
programmable graphic specific units one

2313
01:43:48,930 --> 01:43:52,050
was the copper unit and maybe that's the

2314
01:43:50,369 --> 01:43:55,229
one you're referring to which is the

2315
01:43:52,050 --> 01:43:56,430
wire that goes across the screen but the

2316
01:43:55,229 --> 01:43:59,489
other was the blitter which is a

2317
01:43:56,430 --> 01:44:00,960
programmable memory movement device I

2318
01:43:59,489 --> 01:44:03,659
could also do raster ops on it and

2319
01:44:00,960 --> 01:44:04,980
Barrel shifting and they had to be

2320
01:44:03,659 --> 01:44:08,189
programmed separately it also had a

2321
01:44:04,979 --> 01:44:14,399
separate audio processing unit that you

2322
01:44:08,189 --> 01:44:17,099
program separately and yet just again

2323
01:44:14,399 --> 01:44:18,779
specialized memory also in the Amiga the

2324
01:44:17,100 --> 01:44:21,660
Amiga had two types of memory fast DRAM

2325
01:44:18,779 --> 01:44:23,039
and chip Ram I won't go into the

2326
01:44:21,659 --> 01:44:25,920
specifics of it but it was because of

2327
01:44:23,039 --> 01:44:28,619
the access patterns they were on-off

2328
01:44:25,920 --> 01:44:30,359
clock cycles so one was it was called

2329
01:44:28,619 --> 01:44:32,760
fast Ram because the CPU didn't have to

2330
01:44:30,359 --> 01:44:34,829
share the memory bus with the chips for

2331
01:44:32,760 --> 01:44:36,600
that memory so the Amiga also had

2332
01:44:34,829 --> 01:44:38,729
segmented memory there was memory that

2333
01:44:36,600 --> 01:44:41,220
could be accessed by GPU and remember

2334
01:44:38,729 --> 01:44:45,959
that couldn't be so again exactly the

2335
01:44:41,220 --> 01:44:47,909
same I you are you are drastically

2336
01:44:45,960 --> 01:44:55,800
oversimplifying your model of what the

2337
01:44:47,909 --> 01:45:03,630
amiga architecture was here's a rack as

2338
01:44:55,800 --> 01:45:08,720
part of the doon OS I'm not sure all

2339
01:45:03,630 --> 01:45:11,340
right I think we have come to the end I

2340
01:45:08,720 --> 01:45:15,930
think we have come to the end of the

2341
01:45:11,340 --> 01:45:17,430
lecture and just looking at the chat

2342
01:45:15,930 --> 01:45:20,060
real quickly I would summarize what some

2343
01:45:17,430 --> 01:45:20,060
of the people are saying

2344
01:45:20,720 --> 01:45:24,990
obviously yes switching to and I said

2345
01:45:22,739 --> 01:45:26,729
does not stop innovation you can still

2346
01:45:24,989 --> 01:45:29,279
innovate on the ice ax as you go forward

2347
01:45:26,729 --> 01:45:30,479
it just it does slow it down the reason

2348
01:45:29,279 --> 01:45:32,519
it slows it down is because people have

2349
01:45:30,479 --> 01:45:36,449
to agree and agreeing on things takes

2350
01:45:32,520 --> 01:45:37,890
time right right now Nvidia AMD these

2351
01:45:36,449 --> 01:45:40,189
companies can do whatever they want

2352
01:45:37,890 --> 01:45:44,070
under the hood to a certain extent right

2353
01:45:40,189 --> 01:45:45,779
and so forcing them to now comply with

2354
01:45:44,069 --> 01:45:47,670
some level

2355
01:45:45,779 --> 01:45:51,179
of specificity in terms of what their

2356
01:45:47,670 --> 01:45:53,310
hardware takes in it reduces some of

2357
01:45:51,180 --> 01:45:59,130
their ability to change things that's

2358
01:45:53,310 --> 01:46:02,610
all so yeah that's that's what I would

2359
01:45:59,130 --> 01:46:05,489
that's what I would say obviously the

2360
01:46:02,609 --> 01:46:08,789
ice ax yes it does not prevent you from

2361
01:46:05,489 --> 01:46:11,340
innovating the x86 x64 so had has been

2362
01:46:08,789 --> 01:46:16,529
revved many many many many many many

2363
01:46:11,340 --> 01:46:18,180
times right and and they've added I mean

2364
01:46:16,529 --> 01:46:20,219
they added Cindy to it right it wasn't

2365
01:46:18,180 --> 01:46:21,720
even a Cindy processor at first that at

2366
01:46:20,220 --> 01:46:23,850
Cindy they added multi-core they've

2367
01:46:21,720 --> 01:46:26,190
added lots of things to the x86 eisah

2368
01:46:23,850 --> 01:46:30,210
so yes innovation still occurs it's just

2369
01:46:26,189 --> 01:46:32,519
a little harder right and so you don't

2370
01:46:30,210 --> 01:46:34,140
want to switch to an ice ax until it's

2371
01:46:32,520 --> 01:46:36,120
clear that the benefits of switching to

2372
01:46:34,140 --> 01:46:38,280
it are better than the drawbacks and I'm

2373
01:46:36,119 --> 01:46:41,210
arguing that they now are whereas they

2374
01:46:38,279 --> 01:46:41,210
once probably weren't

2375
01:46:49,300 --> 01:46:55,460
got some other questions here the amiga

2376
01:46:53,300 --> 01:46:59,650
didn't involve since 1985 why do you

2377
01:46:55,460 --> 01:47:02,119
want to freeze PC into toy uh so that's

2378
01:46:59,649 --> 01:47:04,189
that's a totally incorrect argument I

2379
01:47:02,119 --> 01:47:05,689
apologize but it's laughably bad

2380
01:47:04,189 --> 01:47:07,429
the reason the amiga didn't involve

2381
01:47:05,689 --> 01:47:08,659
since 1986 was because Commodore

2382
01:47:07,430 --> 01:47:11,119
canceled it

2383
01:47:08,659 --> 01:47:12,680
they had another chipset architecture it

2384
01:47:11,119 --> 01:47:14,029
was a 256 color architecture actually

2385
01:47:12,680 --> 01:47:16,750
was much better than the one that they

2386
01:47:14,029 --> 01:47:19,219
had the one that they had was a 32

2387
01:47:16,750 --> 01:47:21,170
charitably 64 later with half-bright

2388
01:47:19,220 --> 01:47:22,579
mode architecture the 4000 eyes did

2389
01:47:21,170 --> 01:47:24,500
color thing is a different thing don't

2390
01:47:22,579 --> 01:47:26,000
worry about that but they had an 8-bit

2391
01:47:24,500 --> 01:47:29,630
per color architecture that was ready to

2392
01:47:26,000 --> 01:47:30,890
come out almost immediately after it and

2393
01:47:29,630 --> 01:47:32,300
commodore cancelled it because they just

2394
01:47:30,890 --> 01:47:33,680
didn't want to pay for that stuff they

2395
01:47:32,300 --> 01:47:36,739
weren't interested in that stuff so that

2396
01:47:33,680 --> 01:47:38,360
was really a corporate problem and and

2397
01:47:36,739 --> 01:47:39,920
had nothing to a nice uh the reason I

2398
01:47:38,359 --> 01:47:42,199
say it's a laughable argument is because

2399
01:47:39,920 --> 01:47:44,779
we've had a nice ax in the PC space it's

2400
01:47:42,199 --> 01:47:47,329
the x86 ice ax and it's gone through

2401
01:47:44,779 --> 01:47:50,599
many revisions and added so much stuff

2402
01:47:47,329 --> 01:47:53,180
that the design of a PC CPU today is

2403
01:47:50,600 --> 01:47:54,500
nothing like it was when that ice that

2404
01:47:53,180 --> 01:47:56,030
was introduced so switching to a nice

2405
01:47:54,500 --> 01:47:58,369
set absolutely doesn't freeze the design

2406
01:47:56,029 --> 01:48:00,170
in any way you still update it very

2407
01:47:58,369 --> 01:48:02,269
regularly the difference is just you

2408
01:48:00,170 --> 01:48:05,899
lose a little of the speed of your

2409
01:48:02,270 --> 01:48:13,280
innovation right you can't just go about

2410
01:48:05,899 --> 01:48:15,670
it willy-nilly anymore are you still in

2411
01:48:13,279 --> 01:48:18,079
contact with Intel about this no I'm not

2412
01:48:15,670 --> 01:48:19,369
that I know of anyway I mean I don't

2413
01:48:18,079 --> 01:48:20,930
know what they're doing about it but I

2414
01:48:19,369 --> 01:48:24,279
have not talked to them about it in a

2415
01:48:20,930 --> 01:48:24,280
while so

2416
01:48:35,920 --> 01:48:41,720
all right that's it so I'm gonna wrap it

2417
01:48:39,439 --> 01:48:44,000
up now thank you very much for for

2418
01:48:41,720 --> 01:48:46,940
joining me and I will post the lecture

2419
01:48:44,000 --> 01:48:49,279
on YouTube for those of you who are

2420
01:48:46,939 --> 01:48:52,279
interested I will be back tomorrow with

2421
01:48:49,279 --> 01:48:54,579
our regularly scheduled programming take

2422
01:48:52,279 --> 01:48:54,579
it easy everybody

