1
00:00:02,270 --> 00:00:06,150
hello everyone and welcome to hand made

2
00:00:04,919 --> 00:00:11,039
here oh sure we could a complete-game

3
00:00:06,150 --> 00:00:13,679
live on stream we have well I mean I

4
00:00:11,039 --> 00:00:16,288
guess it worked yesterday it's all I can

5
00:00:13,679 --> 00:00:20,278
say it was kind of surprisingly easy to

6
00:00:16,289 --> 00:00:21,868
do I was planning on having today be a

7
00:00:20,278 --> 00:00:26,689
continuation of yesterday where we were

8
00:00:21,868 --> 00:00:26,689
trying to reduce the grid size for our

9
00:00:27,949 --> 00:00:33,480
so our spatial grid not our our lighting

10
00:00:31,309 --> 00:00:35,160
but our actual spatial grid that

11
00:00:33,479 --> 00:00:36,479
represents where the lighting it that

12
00:00:35,159 --> 00:00:39,109
represents where the occluders are and

13
00:00:36,479 --> 00:00:43,859
is used for a faster rate intersection

14
00:00:39,109 --> 00:00:46,979
so we did that and we got a good speed

15
00:00:43,859 --> 00:00:49,320
win there in fact and at this point to

16
00:00:46,979 --> 00:00:53,519
be honest were we're getting pretty darn

17
00:00:49,320 --> 00:00:56,149
fast I think we're actually more or less

18
00:00:53,520 --> 00:00:58,050
capable if we turn everything else off I

19
00:00:56,149 --> 00:00:59,789
think we're actually more or less

20
00:00:58,049 --> 00:01:00,929
capable meaning if we turn off debug

21
00:00:59,789 --> 00:01:03,210
collation and stuff like this

22
00:01:00,929 --> 00:01:06,030
I think we just run at 60 frames a

23
00:01:03,210 --> 00:01:09,210
second now and honestly I think at this

24
00:01:06,030 --> 00:01:10,950
point our main the main thing that's

25
00:01:09,209 --> 00:01:14,149
probably keeping us running at 60 frames

26
00:01:10,950 --> 00:01:18,900
a second is going to be more like just

27
00:01:14,150 --> 00:01:20,820
transmitting these excuse me

28
00:01:18,900 --> 00:01:22,830
transmitting these values down to the

29
00:01:20,819 --> 00:01:24,389
graphics card is mostly the problem that

30
00:01:22,829 --> 00:01:26,728
we're probably having at this point

31
00:01:24,390 --> 00:01:28,859
because since we're doing it CPU side

32
00:01:26,728 --> 00:01:31,170
that transmitting is not being done

33
00:01:28,859 --> 00:01:33,060
particularly efficiently right now and

34
00:01:31,170 --> 00:01:34,680
we're actually sending these down as

35
00:01:33,060 --> 00:01:37,969
full floating-point values which is four

36
00:01:34,680 --> 00:01:40,500
times larger than we probably need so I

37
00:01:37,969 --> 00:01:46,500
mean at a bare minimum it's it's at

38
00:01:40,500 --> 00:01:49,289
least twice as large so so we definitely

39
00:01:46,500 --> 00:01:51,090
have a lot of work we could do we also

40
00:01:49,290 --> 00:01:54,450
have quality issues and you can kind of

41
00:01:51,090 --> 00:01:56,219
see like it's not even clear that our

42
00:01:54,450 --> 00:01:59,549
ray Kassar doesn't have some bugs in it

43
00:01:56,218 --> 00:02:01,468
with lane states and stuff like this but

44
00:01:59,549 --> 00:02:03,180
in terms of just visualizing the voxel

45
00:02:01,468 --> 00:02:05,819
but you can see us doing here it looks

46
00:02:03,180 --> 00:02:07,799
like the voxel is producing relatively

47
00:02:05,819 --> 00:02:10,530
correct results you can see a lot of

48
00:02:07,799 --> 00:02:11,760
things like the lighting consistently

49
00:02:10,530 --> 00:02:13,650
responding to where we think it should

50
00:02:11,759 --> 00:02:15,929
be and so I'm

51
00:02:13,650 --> 00:02:17,938
still fairly confident that from here

52
00:02:15,930 --> 00:02:19,709
were in a pretty good position I want to

53
00:02:17,938 --> 00:02:20,938
do a few more optimization things first

54
00:02:19,709 --> 00:02:23,700
but I think we're in pretty good shape

55
00:02:20,938 --> 00:02:25,769
right and so what we're gonna want to do

56
00:02:23,699 --> 00:02:27,539
is we're gonna want to do a couple

57
00:02:25,769 --> 00:02:29,219
things one we want to do a little bit

58
00:02:27,539 --> 00:02:31,259
more optimization over the actual

59
00:02:29,219 --> 00:02:32,280
lighting pipe because there's still some

60
00:02:31,259 --> 00:02:34,620
things in there that we're doing very

61
00:02:32,280 --> 00:02:36,209
inefficiently that we can fix so we want

62
00:02:34,620 --> 00:02:37,769
to do that and then we want to start

63
00:02:36,209 --> 00:02:41,280
working on quality and the main thing

64
00:02:37,769 --> 00:02:43,620
we're gonna do there for sampling is

65
00:02:41,280 --> 00:02:44,969
we're gonna smooth out these samples

66
00:02:43,620 --> 00:02:46,709
because you can see we get a lot of hard

67
00:02:44,969 --> 00:02:48,719
lines on here there's really no reason

68
00:02:46,709 --> 00:02:50,908
for that we can smooth those out and we

69
00:02:48,719 --> 00:02:53,250
should the lighting will just look a lot

70
00:02:50,908 --> 00:02:55,469
better when we do that because normal

71
00:02:53,250 --> 00:02:56,609
lighting doesn't have doesn't look like

72
00:02:55,469 --> 00:02:58,680
that right it doesn't have those

73
00:02:56,609 --> 00:03:00,269
rectilinear patterns so smoothing out

74
00:02:58,680 --> 00:03:01,319
those rectilinear patterns will just

75
00:03:00,269 --> 00:03:04,530
make our lighting look a lot more

76
00:03:01,318 --> 00:03:07,858
organic and the other thing that we want

77
00:03:04,530 --> 00:03:11,068
to do there is we want to see what we

78
00:03:07,859 --> 00:03:13,769
want to do about Flickr I actually at

79
00:03:11,068 --> 00:03:17,818
this point I honestly kind of liked the

80
00:03:13,769 --> 00:03:20,039
look of the lighting so I I don't really

81
00:03:17,818 --> 00:03:23,098
even know how much of that I want to do

82
00:03:20,039 --> 00:03:24,989
because I like the lighting to vary like

83
00:03:23,098 --> 00:03:28,649
that because I feel like having the

84
00:03:24,989 --> 00:03:32,819
lighting vary in that way to mean gives

85
00:03:28,650 --> 00:03:35,549
it a nice kind of like active appearance

86
00:03:32,818 --> 00:03:37,348
and I feel like if it was just static it

87
00:03:35,549 --> 00:03:40,560
just wouldn't be as exciting like having

88
00:03:37,348 --> 00:03:42,810
that light very I don't know I think I

89
00:03:40,560 --> 00:03:44,519
like that look better so I don't know if

90
00:03:42,810 --> 00:03:47,009
I actually want to do that or not

91
00:03:44,519 --> 00:03:49,019
I guess we'll see when we actually do

92
00:03:47,009 --> 00:03:51,899
the lighting quality pass what we think

93
00:03:49,019 --> 00:03:54,469
about it at that point and we'll kind of

94
00:03:51,900 --> 00:03:54,469
go from there

95
00:04:01,020 --> 00:04:05,580
so that's really all and so all I'm

96
00:04:04,080 --> 00:04:07,440
gonna do today I think is I'm going to

97
00:04:05,580 --> 00:04:09,630
go take a look at the other parts of the

98
00:04:07,439 --> 00:04:12,090
pipeline add that I don't really know

99
00:04:09,629 --> 00:04:17,939
how effective they are there's another

100
00:04:12,090 --> 00:04:19,980
thing that we can do so there is one

101
00:04:17,939 --> 00:04:23,310
thing we haven't really looked at yet

102
00:04:19,980 --> 00:04:25,140
and that is to what effect because this

103
00:04:23,310 --> 00:04:29,129
is a pretty this is pretty heavy sim

104
00:04:25,139 --> 00:04:31,819
decode actually that we're looking at

105
00:04:29,129 --> 00:04:36,209
here well that's interesting

106
00:04:31,819 --> 00:04:40,379
do you notice why am i why am i why am i

107
00:04:36,209 --> 00:04:44,699
a guy can't face forwards that's kind of

108
00:04:40,379 --> 00:04:45,990
weird when we go down to entity stuff

109
00:04:44,699 --> 00:04:48,180
we'll see but it looks like nobody can

110
00:04:45,990 --> 00:04:50,819
look we've got some kind of bug in them

111
00:04:48,180 --> 00:04:54,240
in the facing picking you notice that

112
00:04:50,819 --> 00:05:02,909
like you can't face downward anyway

113
00:04:54,240 --> 00:05:06,509
doesn't matter point being when we

114
00:05:02,910 --> 00:05:08,640
actually go and do the quality

115
00:05:06,509 --> 00:05:10,289
improvements to this code that's you

116
00:05:08,639 --> 00:05:12,449
know sort of one separate thing but for

117
00:05:10,290 --> 00:05:13,800
right now what I'd like to do is I'd

118
00:05:12,449 --> 00:05:16,199
like to focus on just the authorization

119
00:05:13,800 --> 00:05:18,300
parson what I don't know is because this

120
00:05:16,199 --> 00:05:20,459
is so simple

121
00:05:18,300 --> 00:05:24,780
like basically the entire lighting pipe

122
00:05:20,459 --> 00:05:28,709
line is now done wide everything's wide

123
00:05:24,779 --> 00:05:33,269
vector ops visual studios compiler sucks

124
00:05:28,709 --> 00:05:41,389
at vector ops like it's SuperDuper not

125
00:05:33,269 --> 00:05:44,549
fast at that and so I'm somewhat worried

126
00:05:41,389 --> 00:05:47,789
that we also may be losing speed simply

127
00:05:44,550 --> 00:05:50,220
because the compiler is not doing a very

128
00:05:47,790 --> 00:05:51,840
good job and so one thing if we really

129
00:05:50,220 --> 00:05:54,650
want to be complete about it is we

130
00:05:51,839 --> 00:05:58,379
should probably compiled through clang

131
00:05:54,649 --> 00:06:02,219
just to see what happens if we compile

132
00:05:58,379 --> 00:06:05,159
at least the lighting code with clang to

133
00:06:02,220 --> 00:06:08,160
give us a metric of what the difference

134
00:06:05,160 --> 00:06:11,070
between those two actually is because at

135
00:06:08,160 --> 00:06:13,200
this point we don't know and so we don't

136
00:06:11,069 --> 00:06:18,000
know how much of our code

137
00:06:13,199 --> 00:06:19,589
is slow for no reason and I think having

138
00:06:18,000 --> 00:06:28,439
two compilers in the mix would at least

139
00:06:19,589 --> 00:06:29,699
give us a little bit of a I just think

140
00:06:28,439 --> 00:06:34,350
that'd be something that we would like

141
00:06:29,699 --> 00:06:37,829
to do for purposes of just knowing how

142
00:06:34,350 --> 00:06:39,689
much it's costing us if anything that

143
00:06:37,829 --> 00:06:45,180
Microsoft's compiler is usually pretty

144
00:06:39,689 --> 00:06:46,709
bad at optimizing around vector ops in

145
00:06:45,180 --> 00:06:51,959
my experience it tends to do weird

146
00:06:46,709 --> 00:06:55,259
things on the loops it seems like if I

147
00:06:51,959 --> 00:06:58,709
had to guess about what's going on it

148
00:06:55,259 --> 00:07:01,649
seems like it massively over estimates

149
00:06:58,709 --> 00:07:09,389
the degree to which you want to avoid

150
00:07:01,649 --> 00:07:11,250
saving registers in a weird way so like

151
00:07:09,389 --> 00:07:14,550
just to give you some perspective on

152
00:07:11,250 --> 00:07:17,250
what goes on and in there so the way

153
00:07:14,550 --> 00:07:20,009
that the ABI is specified on Windows is

154
00:07:17,250 --> 00:07:25,759
basically there's you know some number

155
00:07:20,009 --> 00:07:25,759
of registers and those registers are

156
00:07:25,850 --> 00:07:32,250
both general-purpose and vector are

157
00:07:28,550 --> 00:07:35,990
specified as whether or not the caller

158
00:07:32,250 --> 00:07:41,490
so the person calling a function is

159
00:07:35,990 --> 00:07:43,530
expected to save those registers or

160
00:07:41,490 --> 00:07:45,629
whether the person being called is

161
00:07:43,529 --> 00:07:48,509
expected to save those registers and

162
00:07:45,629 --> 00:07:50,159
what I mean by that is when you know you

163
00:07:48,509 --> 00:07:52,019
got two functions they're both compiled

164
00:07:50,160 --> 00:07:54,750
they both use some set of registers and

165
00:07:52,019 --> 00:07:56,549
one of them calls the other well let's

166
00:07:54,750 --> 00:07:58,920
just say you're talking about the xmm

167
00:07:56,550 --> 00:08:03,569
registers for example there's XM m 0

168
00:07:58,920 --> 00:08:06,270
through XM m 7 when you call from one

169
00:08:03,569 --> 00:08:08,849
function to the other the function doing

170
00:08:06,269 --> 00:08:11,519
the function call already has probably

171
00:08:08,850 --> 00:08:13,560
some state in those xmm registers right

172
00:08:11,519 --> 00:08:17,490
because it's doing calculations itself

173
00:08:13,560 --> 00:08:20,879
and when it calls out to some function

174
00:08:17,490 --> 00:08:21,889
that is doing some sub part of this

175
00:08:20,879 --> 00:08:25,920
procedure

176
00:08:21,889 --> 00:08:29,069
it needs a way of knowing which of those

177
00:08:25,920 --> 00:08:31,770
mm registers might get destroyed by the

178
00:08:29,069 --> 00:08:34,679
person it's calling and so the way that

179
00:08:31,769 --> 00:08:36,990
the ABI is SPECT on Windows is that

180
00:08:34,679 --> 00:08:39,389
certain of those xmm registers are

181
00:08:36,990 --> 00:08:41,450
expected to be destroyed and certain of

182
00:08:39,389 --> 00:08:45,029
them are expected to be preserved right

183
00:08:41,450 --> 00:08:52,740
so any function that gets compiled by

184
00:08:45,029 --> 00:08:55,019
MSV c4 by Visual Studio is expected to

185
00:08:52,740 --> 00:08:58,169
preserve certain registers because it's

186
00:08:55,019 --> 00:08:59,939
conforming to the ABI and when it's

187
00:08:58,169 --> 00:09:02,549
conforming to that ABI what it's going

188
00:08:59,940 --> 00:09:05,460
to do is say oh X mmm these particular

189
00:09:02,549 --> 00:09:07,289
registers I know if I use those

190
00:09:05,460 --> 00:09:08,370
registers I'm gonna have to save them to

191
00:09:07,289 --> 00:09:09,599
the stack at the beginning of the

192
00:09:08,370 --> 00:09:11,580
function and then restore them from the

193
00:09:09,600 --> 00:09:13,409
stack at the end of the function because

194
00:09:11,580 --> 00:09:14,970
I've changed the values and I'm not

195
00:09:13,409 --> 00:09:16,199
allowed to change the values in there

196
00:09:14,970 --> 00:09:19,490
according to the API so after like

197
00:09:16,200 --> 00:09:21,450
saving restore from what I've seen

198
00:09:19,490 --> 00:09:25,769
Microsoft's compiler seems to make

199
00:09:21,450 --> 00:09:28,410
really weird decisions about that so it

200
00:09:25,769 --> 00:09:31,500
will do things like spill to the stack

201
00:09:28,409 --> 00:09:33,929
constantly inside a loop seemingly just

202
00:09:31,500 --> 00:09:36,059
to avoid using one of the xmm registers

203
00:09:33,929 --> 00:09:37,500
it's not allowed to destroy instead of

204
00:09:36,059 --> 00:09:38,969
just saving it once the beginning and

205
00:09:37,500 --> 00:09:41,820
restoring it once at the end it

206
00:09:38,970 --> 00:09:45,269
literally puts a stack spell like inside

207
00:09:41,820 --> 00:09:59,240
a loop which no one would ever do and I

208
00:09:45,269 --> 00:10:03,240
don't think so I don't know it's just

209
00:09:59,240 --> 00:10:05,399
it's just something I've seen so that's

210
00:10:03,240 --> 00:10:07,200
the kind of thing that we may want to

211
00:10:05,399 --> 00:10:08,519
try as well and the problem with that is

212
00:10:07,200 --> 00:10:10,650
just that getting something to compile

213
00:10:08,519 --> 00:10:13,970
under clang versus getting it to compile

214
00:10:10,649 --> 00:10:15,809
under CL might take a little while

215
00:10:13,970 --> 00:10:18,570
because you know they might have

216
00:10:15,809 --> 00:10:21,889
different warnings or one of the other

217
00:10:18,570 --> 00:10:27,120
problems this clang is really bad about

218
00:10:21,889 --> 00:10:29,610
undefined behavior so things like I it's

219
00:10:27,120 --> 00:10:31,679
no secret that I strongly strongly

220
00:10:29,610 --> 00:10:33,659
strongly strongly strongly disagree with

221
00:10:31,679 --> 00:10:35,789
the C++ Standards Committee about what

222
00:10:33,659 --> 00:10:39,259
undefined behavior should be here and is

223
00:10:35,789 --> 00:10:41,360
and clang really likes to take advantage

224
00:10:39,259 --> 00:10:43,519
of undefined behavior to basically

225
00:10:41,360 --> 00:10:48,279
optimize code in ways that's almost

226
00:10:43,519 --> 00:10:50,750
always wrong but they just do anyway

227
00:10:48,279 --> 00:10:52,189
they don't seem to care about the fact

228
00:10:50,750 --> 00:10:57,110
that this introduces bugs and tons of

229
00:10:52,190 --> 00:10:58,700
people's programs they just rather take

230
00:10:57,110 --> 00:11:00,230
advantage of undefined behavior that

231
00:10:58,700 --> 00:11:01,460
really should never have been undefined

232
00:11:00,230 --> 00:11:03,710
in the first place because it's very

233
00:11:01,460 --> 00:11:06,530
clear what it would do on an x86 x64

234
00:11:03,710 --> 00:11:09,500
processor so if the spec had any sanity

235
00:11:06,529 --> 00:11:12,110
at all it would just say this behavior

236
00:11:09,500 --> 00:11:15,200
varies per platform and does whatever

237
00:11:12,110 --> 00:11:17,060
the chip would do when you you know add

238
00:11:15,200 --> 00:11:20,900
two of these together in the overflow

239
00:11:17,059 --> 00:11:22,339
right so one of the big problems and

240
00:11:20,899 --> 00:11:23,870
I've said this many times I think is

241
00:11:22,340 --> 00:11:25,190
that undefined behavior should there

242
00:11:23,870 --> 00:11:28,340
should be no undefined behavior in the

243
00:11:25,190 --> 00:11:30,170
C++ spec right what should actually be

244
00:11:28,340 --> 00:11:33,259
in the C++ spec is just something that

245
00:11:30,169 --> 00:11:35,419
says here's a bunch of behaviors that

246
00:11:33,259 --> 00:11:39,319
were not specifying the exact output of

247
00:11:35,419 --> 00:11:42,969
but we are going to specify that it does

248
00:11:39,320 --> 00:11:46,610
do whatever the processor would do when

249
00:11:42,970 --> 00:11:49,580
implementing that instruction right so

250
00:11:46,610 --> 00:11:51,710
it's not undefined it's defined but you

251
00:11:49,580 --> 00:11:53,330
need to know your platform first that is

252
00:11:51,710 --> 00:11:55,580
what you would write in to aspect that

253
00:11:53,330 --> 00:11:57,680
was saying in my opinion because there's

254
00:11:55,580 --> 00:12:01,250
really no excuse for not having defined

255
00:11:57,679 --> 00:12:03,199
a behavior you should always define the

256
00:12:01,250 --> 00:12:04,759
behavior just define it in something

257
00:12:03,200 --> 00:12:09,110
that varies if you're worried about

258
00:12:04,759 --> 00:12:11,149
platform specificity because that way a

259
00:12:09,110 --> 00:12:14,000
programmer who's writing code to a

260
00:12:11,149 --> 00:12:15,740
particular platform knows exactly what

261
00:12:14,000 --> 00:12:18,559
the behavior will be and that's critical

262
00:12:15,740 --> 00:12:20,120
and they also furthermore know that if

263
00:12:18,559 --> 00:12:21,589
they do that particular thing and then

264
00:12:20,120 --> 00:12:23,240
they want to port to a platform whose

265
00:12:21,590 --> 00:12:25,490
CPU behaves differently that it will not

266
00:12:23,240 --> 00:12:26,840
work so they know now all the

267
00:12:25,490 --> 00:12:30,549
information they actually needed and

268
00:12:26,840 --> 00:12:30,550
that's very important right

269
00:12:34,100 --> 00:12:38,089
so there anyway so I think clang is

270
00:12:36,769 --> 00:12:39,560
terrible for taking advantage of those

271
00:12:38,089 --> 00:12:42,259
things I think the spec is terrible for

272
00:12:39,559 --> 00:12:44,268
having them and I wish they wouldn't do

273
00:12:42,259 --> 00:12:45,919
these things but they do and they create

274
00:12:44,269 --> 00:12:47,509
tons of bugs in people's programs for no

275
00:12:45,919 --> 00:12:49,909
reason because there was an easy way to

276
00:12:47,509 --> 00:12:51,470
not have people have bugs code has

277
00:12:49,909 --> 00:12:53,120
enough bugs as it is the concept that

278
00:12:51,470 --> 00:12:55,069
people would be actively doing things

279
00:12:53,120 --> 00:12:56,509
that would put more bugs into it is kind

280
00:12:55,068 --> 00:12:58,009
of absurd and ridiculous in this day and

281
00:12:56,509 --> 00:12:59,509
age especially when people write into

282
00:12:58,009 --> 00:13:01,940
our programming languages such as rust

283
00:12:59,509 --> 00:13:03,440
where the only point is to have people

284
00:13:01,940 --> 00:13:05,389
not have bugs they like literally adds

285
00:13:03,440 --> 00:13:07,579
nothing other than like additional bug

286
00:13:05,389 --> 00:13:08,899
proofing when that's the kind of thing

287
00:13:07,578 --> 00:13:10,250
going on in the world and then you write

288
00:13:08,899 --> 00:13:12,230
a compiler that intentionally inserts

289
00:13:10,250 --> 00:13:15,589
bugs in people's code just because you

290
00:13:12,230 --> 00:13:17,089
think you could is kind of nuts and

291
00:13:15,589 --> 00:13:21,079
ridiculous but you know that's where

292
00:13:17,089 --> 00:13:22,850
we're at so anyway so that's kind of

293
00:13:21,078 --> 00:13:24,919
annoying and one reason that it might

294
00:13:22,850 --> 00:13:27,709
not be the most fun thing to do to Port

295
00:13:24,919 --> 00:13:29,629
Klang but since people build with clang

296
00:13:27,708 --> 00:13:32,629
people build the handmade hero source

297
00:13:29,629 --> 00:13:35,539
code under clang all the time on other

298
00:13:32,629 --> 00:13:37,338
platforms I assumed that it wouldn't be

299
00:13:35,539 --> 00:13:40,039
that hard for us to do because we know

300
00:13:37,339 --> 00:13:41,660
that we don't have too much weirdness

301
00:13:40,039 --> 00:13:44,778
going on there or somebody probably

302
00:13:41,659 --> 00:13:48,198
would have reported that to us you know

303
00:13:44,778 --> 00:13:50,720
what I'm saying so anyway let's take a

304
00:13:48,198 --> 00:13:55,159
look now at what's going on with our

305
00:13:50,720 --> 00:13:57,860
code here I want to see what speed we

306
00:13:55,159 --> 00:14:00,919
get down to if we were to optimize the

307
00:13:57,860 --> 00:14:02,269
the actual blending code because that's

308
00:14:00,919 --> 00:14:04,458
something we haven't looked at yet and

309
00:14:02,269 --> 00:14:06,049
we spent a lot of time working on the

310
00:14:04,458 --> 00:14:08,989
Ray casting side of things and I just

311
00:14:06,049 --> 00:14:10,578
want to know to what extent now we could

312
00:14:08,990 --> 00:14:12,459
get some some speed winds from

313
00:14:10,578 --> 00:14:16,309
relatively straightforward optimizations

314
00:14:12,458 --> 00:14:19,369
in the actual light blending code so

315
00:14:16,309 --> 00:14:20,778
that's the part that that I want to take

316
00:14:19,370 --> 00:14:22,220
a look at now and so what you can see

317
00:14:20,778 --> 00:14:26,480
here is we've got like fill outlets

318
00:14:22,220 --> 00:14:29,028
border and then we've also got this this

319
00:14:26,480 --> 00:14:32,539
part of the routine here this this T Y

320
00:14:29,028 --> 00:14:35,600
loop here right and so what I'd like to

321
00:14:32,539 --> 00:14:38,059
do is just comment this out and the fill

322
00:14:35,600 --> 00:14:40,459
out light atlas border part here with

323
00:14:38,059 --> 00:14:42,588
the x and y i don't really know why

324
00:14:40,458 --> 00:14:45,649
that's outside of here I maybe there was

325
00:14:42,589 --> 00:14:47,260
a reason for it not sure it could be to

326
00:14:45,649 --> 00:14:48,970
avoid having something

327
00:14:47,259 --> 00:14:51,129
completely but msec doesn't usually do

328
00:14:48,970 --> 00:14:56,470
that so I just want to see what happens

329
00:14:51,129 --> 00:15:00,789
if I remove sort of the fix-up code so

330
00:14:56,470 --> 00:15:03,100
you can see here that actually it's not

331
00:15:00,789 --> 00:15:07,809
quite a quarter of the time but it's

332
00:15:03,100 --> 00:15:11,230
close so we can take an entire second

333
00:15:07,809 --> 00:15:13,689
off the time here if we could figure out

334
00:15:11,230 --> 00:15:19,180
a way to make this code work more

335
00:15:13,690 --> 00:15:26,170
efficiently and you know just looking at

336
00:15:19,179 --> 00:15:31,059
how it works it certainly seems like the

337
00:15:26,169 --> 00:15:32,649
sort of thing that would not really that

338
00:15:31,059 --> 00:15:36,069
would not really be a huge issue to do

339
00:15:32,649 --> 00:15:39,159
especially because so the way that we're

340
00:15:36,070 --> 00:15:42,790
doing this is we're producing cosine

341
00:15:39,159 --> 00:15:44,860
fall-off so I'll jump over to the black

342
00:15:42,789 --> 00:15:48,240
blackboard here and fortunately this is

343
00:15:44,860 --> 00:15:51,879
not really my strong suit I've never

344
00:15:48,240 --> 00:15:53,710
done separable filtering ever for some

345
00:15:51,879 --> 00:15:55,330
reason I don't know why how many of

346
00:15:53,710 --> 00:16:00,820
these did I want to launch too many

347
00:15:55,330 --> 00:16:02,770
apparently so I apologize that like I'm

348
00:16:00,820 --> 00:16:05,170
I'm kind of the wrong person to do this

349
00:16:02,769 --> 00:16:07,059
and it'll probably be a pretty clunky

350
00:16:05,169 --> 00:16:08,379
approach to it but I just want to kind

351
00:16:07,059 --> 00:16:12,969
of point out what's going on here and

352
00:16:08,379 --> 00:16:15,429
then maybe we can take a shot at it but

353
00:16:12,970 --> 00:16:17,170
I'll also point out why I think in our

354
00:16:15,429 --> 00:16:20,009
particular case it's also much easier

355
00:16:17,169 --> 00:16:24,819
than it might be in other cases as well

356
00:16:20,009 --> 00:16:26,980
okay so I've talked about this a little

357
00:16:24,820 --> 00:16:28,750
bit before but I just want to talk a

358
00:16:26,980 --> 00:16:32,830
little bit about what are called

359
00:16:28,750 --> 00:16:39,159
separable filters and why we care about

360
00:16:32,830 --> 00:16:42,610
them so separable filters is sort of

361
00:16:39,159 --> 00:16:46,449
just a shorthand used in digital signal

362
00:16:42,610 --> 00:16:47,950
processing to talk about what is

363
00:16:46,450 --> 00:16:49,870
effectively a process you're probably

364
00:16:47,950 --> 00:16:53,470
already familiar with even just from

365
00:16:49,870 --> 00:16:57,070
like high school math so one of the

366
00:16:53,470 --> 00:17:00,300
things that you've almost certainly done

367
00:16:57,070 --> 00:17:01,440
in you know math class at some point is

368
00:17:00,299 --> 00:17:04,318
you

369
00:17:01,440 --> 00:17:14,088
taken something that looks you know

370
00:17:04,318 --> 00:17:15,420
maybe like this 5x y plus 10x equals

371
00:17:14,088 --> 00:17:18,869
zero

372
00:17:15,420 --> 00:17:21,120
right so you've taken some kind of

373
00:17:18,869 --> 00:17:24,479
equation and like you've done something

374
00:17:21,119 --> 00:17:27,119
where you've like factored it right and

375
00:17:24,480 --> 00:17:31,670
you've pulled out a common term that

376
00:17:27,119 --> 00:17:34,229
exists so in this case like you know 5x

377
00:17:31,670 --> 00:17:37,560
appears in both of these terms because

378
00:17:34,230 --> 00:17:40,319
this I can write is 2 times 5 right so

379
00:17:37,559 --> 00:17:44,129
5x appears in both of those terms so I

380
00:17:40,319 --> 00:17:50,029
can if I want to write this as 5x and

381
00:17:44,130 --> 00:17:54,060
then say well it's gonna be Y excuse me

382
00:17:50,029 --> 00:17:56,069
y plus 2 right and so this is the same

383
00:17:54,059 --> 00:17:58,319
equation but I've written it in a way

384
00:17:56,069 --> 00:18:01,200
that separates the terms out differently

385
00:17:58,319 --> 00:18:06,059
right and then similarly you've probably

386
00:18:01,200 --> 00:18:08,940
also done things where you can break you

387
00:18:06,059 --> 00:18:11,279
know you can do the opposite right so

388
00:18:08,940 --> 00:18:12,690
you could say something like well if I

389
00:18:11,279 --> 00:18:19,049
want to break this into different pieces

390
00:18:12,690 --> 00:18:21,539
and I had this right and I just want

391
00:18:19,049 --> 00:18:23,279
this in in the form of two separate

392
00:18:21,539 --> 00:18:28,379
terms I can look at then I can multiply

393
00:18:23,279 --> 00:18:30,359
it out right and now these things are

394
00:18:28,380 --> 00:18:32,340
completely separate right they can be

395
00:18:30,359 --> 00:18:33,479
processed completely independently and

396
00:18:32,339 --> 00:18:34,799
then there's added together at the end

397
00:18:33,480 --> 00:18:40,140
and they have no dependencies between

398
00:18:34,799 --> 00:18:42,480
them right so separable filters are kind

399
00:18:40,140 --> 00:18:46,500
of a way of talking about factoring

400
00:18:42,480 --> 00:18:50,420
filters into into two parts from one

401
00:18:46,500 --> 00:18:50,420
combined part or more right

402
00:18:54,929 --> 00:19:00,909
so the classic example of something here

403
00:18:58,599 --> 00:19:02,949
is exactly actually what we are kind of

404
00:19:00,909 --> 00:19:05,320
doing in the code and it is to say that

405
00:19:02,950 --> 00:19:05,980
suppose you have something where you're

406
00:19:05,319 --> 00:19:10,359
talking about

407
00:19:05,980 --> 00:19:13,599
a 2d grid right and in your 2d grid

408
00:19:10,359 --> 00:19:23,769
you've got you know the fiber to number

409
00:19:13,599 --> 00:19:26,019
of these right so if I have some kind of

410
00:19:23,769 --> 00:19:28,629
a 2d grid like a pixel grid or anything

411
00:19:26,019 --> 00:19:33,788
else that I want to do some processing

412
00:19:28,630 --> 00:19:37,149
on then if I just want to do processing

413
00:19:33,788 --> 00:19:39,250
on the row so for example let's suppose

414
00:19:37,148 --> 00:19:40,750
we're doing something that we're already

415
00:19:39,250 --> 00:19:42,640
familiar with because this is a cosine

416
00:19:40,750 --> 00:19:44,380
filter where we're using let's start

417
00:19:42,640 --> 00:19:45,880
with something simple like a bilinear

418
00:19:44,380 --> 00:19:48,580
filter which we've done like tons and

419
00:19:45,880 --> 00:19:53,890
tons and tons of times right so let's

420
00:19:48,579 --> 00:19:56,349
start with a simple linear blend okay

421
00:19:53,890 --> 00:19:58,210
so let's suppose that we were going to

422
00:19:56,349 --> 00:20:00,519
linear blend this and we're gonna start

423
00:19:58,210 --> 00:20:03,909
by just saying okay the way we're gonna

424
00:20:00,519 --> 00:20:08,918
linear blini early blend this thing is I

425
00:20:03,909 --> 00:20:12,549
want to take four values right so I want

426
00:20:08,919 --> 00:20:14,710
to take these four values here and I

427
00:20:12,548 --> 00:20:16,148
want to average them together or

428
00:20:14,710 --> 00:20:17,558
something or maybe I want to do

429
00:20:16,148 --> 00:20:19,449
something a little more complicated than

430
00:20:17,558 --> 00:20:22,629
average maybe I want to do something

431
00:20:19,450 --> 00:20:24,788
kind of weighted so like in order to

432
00:20:22,630 --> 00:20:29,080
figure out what I'm going to write right

433
00:20:24,788 --> 00:20:32,379
here right maybe what I want to do is

434
00:20:29,079 --> 00:20:34,418
just take some weights and blend them

435
00:20:32,380 --> 00:20:40,539
together so maybe I want point two of

436
00:20:34,419 --> 00:20:43,870
this value I want point well that won't

437
00:20:40,538 --> 00:20:46,808
quite work point three point three and

438
00:20:43,869 --> 00:20:50,859
then point two right so I'm gonna take

439
00:20:46,808 --> 00:20:53,648
like ABC and D and I just want to take

440
00:20:50,859 --> 00:20:56,769
and the actual thing I'm going to to

441
00:20:53,648 --> 00:20:59,829
produce for this square is a blend of

442
00:20:56,769 --> 00:21:04,210
these so I'm gonna do point to a plus

443
00:20:59,829 --> 00:21:06,250
point 3 B plus point 3 C plus point 2 D

444
00:21:04,210 --> 00:21:08,399
right that's what I actually want to

445
00:21:06,250 --> 00:21:08,398
produce

446
00:21:10,919 --> 00:21:20,770
right so if we take a look at what we're

447
00:21:17,048 --> 00:21:22,240
doing at each individual square as I

448
00:21:20,769 --> 00:21:25,569
kind of marched through here

449
00:21:22,240 --> 00:21:27,579
I'm gonna apply this thing and if we

450
00:21:25,569 --> 00:21:29,980
assume that this continues going AEF

451
00:21:27,579 --> 00:21:32,649
right whatever then on the next square

452
00:21:29,980 --> 00:21:34,509
on B Prime I'm going to do some similar

453
00:21:32,650 --> 00:21:39,340
equations so it's gonna be point to B

454
00:21:34,509 --> 00:21:46,720
this time and then point three c plus

455
00:21:39,339 --> 00:21:50,558
plus point 3 D plus point 2 e right and

456
00:21:46,720 --> 00:21:53,230
so what you can see about the way that

457
00:21:50,558 --> 00:21:56,649
these are getting computed is that it's

458
00:21:53,230 --> 00:21:59,380
just repeating a what is what is

459
00:21:56,650 --> 00:22:01,179
effectively just a very simple you know

460
00:21:59,380 --> 00:22:02,710
it's a matrix multiply but the matrices

461
00:22:01,179 --> 00:22:04,150
are literally one dimension so it's not

462
00:22:02,710 --> 00:22:06,220
for interesting but it's basically a

463
00:22:04,150 --> 00:22:07,600
very simple matrix multiply we're

464
00:22:06,220 --> 00:22:15,009
basically saying look we've got some

465
00:22:07,599 --> 00:22:17,980
weights 0.2 0.3 0.3 0.2 in a literally

466
00:22:15,009 --> 00:22:19,808
like you know four by one matrix and

467
00:22:17,980 --> 00:22:23,440
then we're multiplying them by an input

468
00:22:19,808 --> 00:22:26,200
of ABCD right and we're getting an

469
00:22:23,440 --> 00:22:29,380
output here that is you know this answer

470
00:22:26,200 --> 00:22:31,990
and then we're just purely sliding this

471
00:22:29,380 --> 00:22:34,000
window right this ABCD we're just

472
00:22:31,990 --> 00:22:36,069
sliding it that way and we're writing

473
00:22:34,000 --> 00:22:39,569
out the answer into each individual slot

474
00:22:36,069 --> 00:22:39,569
as we go right

475
00:22:45,109 --> 00:22:49,528
so there's nothing particularly fancy

476
00:22:47,759 --> 00:22:51,778
here and as you know we've used linear

477
00:22:49,528 --> 00:22:54,240
blends so many times all we do is we

478
00:22:51,778 --> 00:22:58,470
just add together mult you know we

479
00:22:54,240 --> 00:23:00,509
multiply each of our inputs by a simple

480
00:22:58,470 --> 00:23:02,308
coefficient it's just a number

481
00:23:00,509 --> 00:23:03,778
users usually fractional because we

482
00:23:02,308 --> 00:23:06,658
usually want them to add to one so we

483
00:23:03,778 --> 00:23:12,269
don't add energy to the system but all

484
00:23:06,659 --> 00:23:13,799
we're really doing is we're just all

485
00:23:12,269 --> 00:23:15,630
we're really doing here is we're just

486
00:23:13,798 --> 00:23:17,579
using fractional values multiplied by

487
00:23:15,630 --> 00:23:19,350
our inputs to produce our output it's

488
00:23:17,579 --> 00:23:24,480
it's all it is very very straightforward

489
00:23:19,349 --> 00:23:27,509
right so if you imagine us doing this

490
00:23:24,480 --> 00:23:31,200
this is very efficient and it wouldn't

491
00:23:27,509 --> 00:23:35,490
really scare us very much even if we had

492
00:23:31,200 --> 00:23:38,460
to do like the entire row we probably

493
00:23:35,490 --> 00:23:39,960
wouldn't be that scared right like I

494
00:23:38,460 --> 00:23:41,519
mean we might start to get kind of

495
00:23:39,960 --> 00:23:45,889
scared if the row was really large or

496
00:23:41,519 --> 00:23:50,638
something but you know at least for any

497
00:23:45,888 --> 00:23:51,959
fairly small size of this thing we're

498
00:23:50,638 --> 00:23:55,918
not going to be too terribly worried

499
00:23:51,960 --> 00:24:00,870
about it right but if we now make the

500
00:23:55,919 --> 00:24:02,399
jump to 2d right because we're gonna 2d

501
00:24:00,869 --> 00:24:08,119
grid here and we but we were just using

502
00:24:02,398 --> 00:24:08,119
a one-dimensional filter excuse me

503
00:24:10,759 --> 00:24:15,109
so if we want to make the jump to 2d

504
00:24:17,898 --> 00:24:27,658
I've been sick for a long time anyway if

505
00:24:23,788 --> 00:24:30,990
we want to make the jump to 2d what we

506
00:24:27,659 --> 00:24:34,649
have to do here is we have to use a much

507
00:24:30,990 --> 00:24:36,630
larger input size right so instead of

508
00:24:34,648 --> 00:24:38,398
just four and it's not even gonna be

509
00:24:36,630 --> 00:24:40,440
four plus four right it's not going to

510
00:24:38,398 --> 00:24:43,168
be four plus four it's actually going to

511
00:24:40,440 --> 00:24:45,778
be four times four right because now we

512
00:24:43,169 --> 00:24:48,090
have to do for this way and for this way

513
00:24:45,778 --> 00:24:50,940
which includes this entire set of values

514
00:24:48,089 --> 00:24:55,669
so rather than doing four multiply

515
00:24:50,940 --> 00:25:02,809
additions we now have to do 16

516
00:24:55,670 --> 00:25:05,570
right so for any for any filter that we

517
00:25:02,809 --> 00:25:10,009
want to run over a bitmap over a 2d

518
00:25:05,569 --> 00:25:13,849
bitmap can image which our light maps

519
00:25:10,009 --> 00:25:19,190
are we have this really nasty problem

520
00:25:13,849 --> 00:25:22,699
that when you go from one D to 2d we we

521
00:25:19,190 --> 00:25:26,000
basically have this you know nasty

522
00:25:22,700 --> 00:25:32,900
problem of way too many F Mads going on

523
00:25:26,000 --> 00:25:37,549
and what we had for our 8x8 right we had

524
00:25:32,900 --> 00:25:45,009
for each of the 8 by 8 we did a full set

525
00:25:37,549 --> 00:25:51,829
of of 64 right so we do 64 times 64 ops

526
00:25:45,009 --> 00:25:53,720
right which is per bitmap per per light

527
00:25:51,829 --> 00:25:58,839
map and we have like a lot of light maps

528
00:25:53,720 --> 00:26:03,440
right so we're literally talking about

529
00:25:58,839 --> 00:26:06,679
4096 multiplies there right and it's

530
00:26:03,440 --> 00:26:14,150
just it's just a lot of math for the CPU

531
00:26:06,680 --> 00:26:18,769
to do so the question is what do we

532
00:26:14,150 --> 00:26:22,540
actually you know how can we perhaps

533
00:26:18,769 --> 00:26:25,730
modify what we're doing because again

534
00:26:22,539 --> 00:26:27,109
it's even in our case especially not

535
00:26:25,730 --> 00:26:29,390
just in the hypothetical ease but in our

536
00:26:27,109 --> 00:26:33,009
actual practical case we don't really

537
00:26:29,390 --> 00:26:36,230
care that we get exactly a cosine

538
00:26:33,009 --> 00:26:38,240
fall-off for our blend you know anything

539
00:26:36,230 --> 00:26:39,500
that's even remotely like a cosine

540
00:26:38,240 --> 00:26:43,370
fall-off would be fine

541
00:26:39,500 --> 00:26:45,890
with us right so we have a lot of

542
00:26:43,369 --> 00:26:48,559
latitude in constructing our filter we

543
00:26:45,890 --> 00:26:50,990
just need something that's fast and sort

544
00:26:48,559 --> 00:26:53,240
of like a cosine fell off because we all

545
00:26:50,990 --> 00:26:54,890
know light doesn't actually obey an

546
00:26:53,240 --> 00:26:57,019
exact cosine call it fall off curve

547
00:26:54,890 --> 00:26:59,150
anyway material properties create much

548
00:26:57,019 --> 00:27:01,609
different reflection characteristics

549
00:26:59,150 --> 00:27:03,830
than that so a cosine curve is just one

550
00:27:01,609 --> 00:27:05,479
of the things that is sort of like what

551
00:27:03,829 --> 00:27:07,309
light would do when bouncing off a

552
00:27:05,480 --> 00:27:08,279
fairly diffuse surface but it's not

553
00:27:07,309 --> 00:27:11,069
correct anyway

554
00:27:08,279 --> 00:27:13,259
so there's no particular reason we have

555
00:27:11,069 --> 00:27:23,490
to do that we can do something else if

556
00:27:13,259 --> 00:27:26,609
we want to so what I'd like to do is I'd

557
00:27:23,490 --> 00:27:28,799
like to take a look to see if what we

558
00:27:26,609 --> 00:27:31,439
can do is change the way we're computing

559
00:27:28,799 --> 00:27:33,299
the math to do what's roughly called a

560
00:27:31,440 --> 00:27:35,700
separable filter although I may be using

561
00:27:33,299 --> 00:27:37,680
that term a little loosely here but I

562
00:27:35,700 --> 00:27:40,230
would like to see if we can create a

563
00:27:37,680 --> 00:27:42,450
separable filter where the idea behind a

564
00:27:40,230 --> 00:27:46,200
separable filter is to just break the

565
00:27:42,450 --> 00:27:49,830
thing into two passes the first pass

566
00:27:46,200 --> 00:27:54,080
does just a 1d filter in this direction

567
00:27:49,829 --> 00:27:56,970
so it'll do like an X filter right and

568
00:27:54,079 --> 00:27:59,879
it writes out what are effectively

569
00:27:56,970 --> 00:28:01,470
intermediate values they're not actually

570
00:27:59,880 --> 00:28:04,040
values that will ever get used by

571
00:28:01,470 --> 00:28:06,660
anybody they're just temporary

572
00:28:04,039 --> 00:28:10,259
computations computed by the first pass

573
00:28:06,660 --> 00:28:13,800
of the filter then we run a second pass

574
00:28:10,259 --> 00:28:15,839
and the second pass goes in the other

575
00:28:13,799 --> 00:28:18,419
direction right it goes vertically and

576
00:28:15,839 --> 00:28:22,799
it picks up well I suppose since I wrote

577
00:28:18,420 --> 00:28:24,960
it this way I'd be that way right and so

578
00:28:22,799 --> 00:28:28,470
what it does is it will pick up all of

579
00:28:24,960 --> 00:28:30,750
those temporary values right and add the

580
00:28:28,470 --> 00:28:32,970
temporary values together in a way that

581
00:28:30,750 --> 00:28:36,960
produces our final results without

582
00:28:32,970 --> 00:28:43,980
actually having to ever do any 2d

583
00:28:36,960 --> 00:28:46,079
operations and the only real restriction

584
00:28:43,980 --> 00:28:48,509
here that we have on how we would do

585
00:28:46,079 --> 00:28:50,549
this is just the fact that both

586
00:28:48,509 --> 00:28:53,460
processes have to be one-dimensional so

587
00:28:50,549 --> 00:28:58,859
we're only looking in our row or our

588
00:28:53,460 --> 00:29:02,730
column right depending on which phase

589
00:28:58,859 --> 00:29:05,609
were in and that we only write out a

590
00:29:02,730 --> 00:29:09,809
single intermediate value that's really

591
00:29:05,609 --> 00:29:13,279
it and honestly those things aren't even

592
00:29:09,809 --> 00:29:13,279
am I out of tissues again

593
00:29:15,710 --> 00:29:19,548
hopefully is I need to get some tissues

594
00:30:05,288 --> 00:30:08,528
prompt salt

595
00:30:19,420 --> 00:30:29,330
okay so anyway we could if we wanted to

596
00:30:27,140 --> 00:30:30,830
broaden the definition even further than

597
00:30:29,329 --> 00:30:32,960
this I mean there's no reason that we

598
00:30:30,829 --> 00:30:34,579
only have to have one intermediate value

599
00:30:32,960 --> 00:30:36,829
if we needed more intermediate values we

600
00:30:34,579 --> 00:30:38,990
could have them and so on but obviously

601
00:30:36,829 --> 00:30:42,409
the most efficient thing is to write out

602
00:30:38,990 --> 00:30:44,720
the fewest values possible and so you

603
00:30:42,410 --> 00:30:50,240
know we would like if possible to make

604
00:30:44,720 --> 00:30:52,039
it so that we keep you know we keep the

605
00:30:50,240 --> 00:31:03,559
whole pipeline flowing as efficiently as

606
00:30:52,039 --> 00:31:07,149
we can so how can we take a cosine

607
00:31:03,559 --> 00:31:11,210
weighted fall-off curve and turn it into

608
00:31:07,150 --> 00:31:13,970
you know something we can use in a in a

609
00:31:11,210 --> 00:31:15,350
separable way like this well we can

610
00:31:13,970 --> 00:31:19,400
start by just looking at what we're

611
00:31:15,349 --> 00:31:24,139
actually computing so what you can see

612
00:31:19,400 --> 00:31:26,240
here is at each position we have an

613
00:31:24,140 --> 00:31:27,770
outgoing vector and an incoming vector

614
00:31:26,240 --> 00:31:32,839
and we're basically just taking those

615
00:31:27,769 --> 00:31:37,569
two things and we're producing a you

616
00:31:32,839 --> 00:31:41,809
know a dot product between the two and

617
00:31:37,569 --> 00:31:45,230
we're you know we're doing that for the

618
00:31:41,809 --> 00:31:48,379
entire matrix effectively so if you take

619
00:31:45,230 --> 00:31:50,930
a look at the way that would map out on

620
00:31:48,380 --> 00:31:53,960
here what we're effectively computing at

621
00:31:50,930 --> 00:31:57,410
the moment is we're basically saying for

622
00:31:53,960 --> 00:32:00,350
each one of these grid locations we have

623
00:31:57,410 --> 00:32:03,529
some vector that represents where it is

624
00:32:00,349 --> 00:32:07,839
on the octahedron now if you remember it

625
00:32:03,529 --> 00:32:07,839
looks like this roughly

626
00:32:12,569 --> 00:32:19,888
and when map to the sphere not the

627
00:32:17,548 --> 00:32:21,990
world's best sphere I admit that but

628
00:32:19,888 --> 00:32:32,538
when map to the sphere it looks

629
00:32:21,990 --> 00:32:38,128
something like you know this so this

630
00:32:32,538 --> 00:32:43,259
here call that a comes here and this

631
00:32:38,128 --> 00:32:45,418
becomes here C and D are here and here

632
00:32:43,259 --> 00:32:48,079
and then this is the exact same thing

633
00:32:45,419 --> 00:32:51,629
but on the backside of the sphere right

634
00:32:48,079 --> 00:32:55,249
so each one of these squares represents

635
00:32:51,628 --> 00:32:59,128
a particular specific directional vector

636
00:32:55,249 --> 00:33:00,659
these are presumably along the edge so

637
00:32:59,128 --> 00:33:04,189
these are ones that are like you know

638
00:33:00,659 --> 00:33:06,659
pointing this way these are along that

639
00:33:04,190 --> 00:33:07,919
edge but they're on actually edges so

640
00:33:06,659 --> 00:33:09,899
they don't the center doesn't point out

641
00:33:07,919 --> 00:33:13,820
there so you know we've effectively got

642
00:33:09,898 --> 00:33:17,878
something like this happening right and

643
00:33:13,819 --> 00:33:20,278
so each one of these slots in the

644
00:33:17,878 --> 00:33:29,388
octahedral map corresponds to one of

645
00:33:20,278 --> 00:33:34,499
these it corresponds to one of these

646
00:33:29,388 --> 00:33:39,019
values here yeah so what we would like

647
00:33:34,499 --> 00:33:39,019
to be able to do is say well okay

648
00:33:39,230 --> 00:33:46,349
assuming that we were going to you know

649
00:33:41,788 --> 00:33:48,480
compute what the the values are here to

650
00:33:46,349 --> 00:33:52,589
what degree do those things have any

651
00:33:48,480 --> 00:34:00,279
coherence in terms of their coefficients

652
00:33:52,589 --> 00:34:02,689
right from from slot slot right

653
00:34:00,279 --> 00:34:06,379
so there's a couple of things we would

654
00:34:02,690 --> 00:34:10,389
like to have be true so one of them is

655
00:34:06,380 --> 00:34:13,130
that you know the the value of something

656
00:34:10,389 --> 00:34:15,739
when when considering the value of the

657
00:34:13,130 --> 00:34:17,750
input cell versus the output cell if

658
00:34:15,739 --> 00:34:20,629
it's the same cell that's kind of our

659
00:34:17,750 --> 00:34:23,179
one value right because we want the

660
00:34:20,630 --> 00:34:25,849
value to come over Asma powerfully as

661
00:34:23,179 --> 00:34:27,760
possible in the exact direction because

662
00:34:25,849 --> 00:34:30,110
that would have no cosine fall-off and

663
00:34:27,760 --> 00:34:33,710
then when we're doing perfectly

664
00:34:30,110 --> 00:34:37,030
orthogonal which to be honest they don't

665
00:34:33,710 --> 00:34:40,639
know to what extent that ever actually

666
00:34:37,030 --> 00:34:42,169
exists anywhere on the map but there are

667
00:34:40,639 --> 00:34:44,750
places where that would be close so like

668
00:34:42,168 --> 00:34:49,129
you know these and these for example

669
00:34:44,750 --> 00:34:53,239
would be very close to zero actually no

670
00:34:49,130 --> 00:34:56,059
that's not true I take it back because

671
00:34:53,239 --> 00:34:57,799
of the cosine clamping at zero because

672
00:34:56,059 --> 00:35:01,369
we don't actually want negative values

673
00:34:57,800 --> 00:35:03,860
anywhere so orthogonal values after the

674
00:35:01,369 --> 00:35:06,920
orthogonal value it should drop to zero

675
00:35:03,860 --> 00:35:09,769
and what that should mean effectively is

676
00:35:06,920 --> 00:35:13,369
like you can only go half way down the

677
00:35:09,769 --> 00:35:15,409
grid right so if we're talking about

678
00:35:13,369 --> 00:35:19,279
this one by the time we got to this one

679
00:35:15,409 --> 00:35:22,359
it's you know it's gone ninety degrees

680
00:35:19,280 --> 00:35:25,040
past the sample point so all of these

681
00:35:22,360 --> 00:35:27,890
additional ones are presumably not there

682
00:35:25,039 --> 00:35:32,989
I don't know so let me think about this

683
00:35:27,889 --> 00:35:35,869
so it's probably something like three on

684
00:35:32,989 --> 00:35:37,939
here so it's probably something like

685
00:35:35,869 --> 00:35:41,559
this region would be zeroes but I'm not

686
00:35:37,940 --> 00:35:41,559
sure so

687
00:35:46,769 --> 00:35:50,798
so that's kind of what we're currently

688
00:35:49,059 --> 00:35:54,039
doing right what we're currently doing

689
00:35:50,798 --> 00:35:58,509
is we're doing those in our products and

690
00:35:54,039 --> 00:36:02,829
if we take a look at what direction from

691
00:35:58,510 --> 00:36:09,970
txt why does it's really this unit

692
00:36:02,829 --> 00:36:13,269
vector from octahedral so this so this

693
00:36:09,969 --> 00:36:15,399
unit vector from octahedral what this is

694
00:36:13,269 --> 00:36:18,068
doing is it's saying okay from a

695
00:36:15,400 --> 00:36:21,220
particular 2d point on the map what

696
00:36:18,068 --> 00:36:25,659
we're gonna do is we're going to make

697
00:36:21,219 --> 00:36:27,818
sure the signs are correct and we're

698
00:36:25,659 --> 00:36:30,788
gonna invert the polarity of some things

699
00:36:27,818 --> 00:36:33,159
occasionally just because we're trying

700
00:36:30,789 --> 00:36:37,028
to cover a sphere but basically all

701
00:36:33,159 --> 00:36:39,399
we're gonna do is we're taking the

702
00:36:37,028 --> 00:36:43,449
absolute values so the magnitude of the

703
00:36:39,400 --> 00:36:47,528
X and the y and we're using the Z value

704
00:36:43,449 --> 00:36:51,429
to effectively cover whatever the amount

705
00:36:47,528 --> 00:36:55,210
of the X&amp;Y was that we didn't fill and

706
00:36:51,429 --> 00:36:58,210
then we're gonna normalize that right so

707
00:36:55,210 --> 00:37:02,679
that's what our actual values end up

708
00:36:58,210 --> 00:37:06,480
being is just the normalized versions of

709
00:37:02,679 --> 00:37:11,139
that sort of of that ketchup if you will

710
00:37:06,480 --> 00:37:13,119
and you know the problem with this is

711
00:37:11,139 --> 00:37:15,730
anytime you have and normalize in there

712
00:37:13,119 --> 00:37:20,250
it's a very nonlinear thing right so

713
00:37:15,730 --> 00:37:20,250
what we've got there is we've got a

714
00:37:21,690 --> 00:37:26,528
we've got this sort of nasty nonlinear

715
00:37:24,449 --> 00:37:29,318
computation that's what's determining

716
00:37:26,528 --> 00:37:30,909
what our individual weights actually are

717
00:37:29,318 --> 00:37:32,920
which kind of makes it a little bit

718
00:37:30,909 --> 00:37:38,649
harder to figure out how we would

719
00:37:32,920 --> 00:37:40,450
necessarily separate them out but at

720
00:37:38,650 --> 00:37:43,240
least for me now is the time where I

721
00:37:40,449 --> 00:37:46,989
just say look I don't really need to be

722
00:37:43,239 --> 00:37:50,949
math star here although people who are

723
00:37:46,989 --> 00:37:53,649
math stars could probably just go ahead

724
00:37:50,949 --> 00:37:55,568
and analyze that analytically right and

725
00:37:53,650 --> 00:37:57,710
say well maybe I'll take a look at what

726
00:37:55,568 --> 00:37:59,150
all these equations work out to be and

727
00:37:57,710 --> 00:38:03,199
you know or maybe you bust out MATLAB

728
00:37:59,150 --> 00:38:05,570
I'm not sure but what I would like to do

729
00:38:03,199 --> 00:38:09,230
first is just dump whatever this wait

730
00:38:05,570 --> 00:38:11,390
map actually looks like right because

731
00:38:09,230 --> 00:38:15,019
that will give me a better understanding

732
00:38:11,389 --> 00:38:18,829
of what I'm actually looking at so that

733
00:38:15,019 --> 00:38:24,739
I can understand the the specific

734
00:38:18,829 --> 00:38:27,619
numerical values in question so what I'd

735
00:38:24,739 --> 00:38:30,199
like to do what you can see here is when

736
00:38:27,619 --> 00:38:35,030
we do build a few slight Maps we're out

737
00:38:30,199 --> 00:38:37,519
putting these light maps into a into a

738
00:38:35,030 --> 00:38:39,380
table that gets stored and so what I'm

739
00:38:37,519 --> 00:38:41,300
going to do is in h h light prof i'm

740
00:38:39,380 --> 00:38:42,890
just gonna dump the table because that

741
00:38:41,300 --> 00:38:44,180
way i can just look at what it looks

742
00:38:42,889 --> 00:38:46,159
like and then I'll have a better

743
00:38:44,179 --> 00:38:48,799
understanding of what the heck is going

744
00:38:46,159 --> 00:38:54,460
on right so what I can do here is say

745
00:38:48,800 --> 00:38:57,800
look after those hmm after those

746
00:38:54,460 --> 00:38:59,030
coefficients are computed which actually

747
00:38:57,800 --> 00:39:01,330
they're saved to disk so it's actually

748
00:38:59,030 --> 00:39:05,900
they're actually loaded not computed

749
00:39:01,329 --> 00:39:11,929
because this is the profiler I'm already

750
00:39:05,900 --> 00:39:15,470
out of t we're gonna have to have like

751
00:39:11,929 --> 00:39:18,039
regular tea breaks on stream hmm in fact

752
00:39:15,469 --> 00:39:18,039
I'm gonna do it now

753
00:40:05,838 --> 00:40:13,670
I realize I'm at risk of patent

754
00:40:09,559 --> 00:40:19,180
infringement on John Blow stream because

755
00:40:13,670 --> 00:40:23,059
he makes tea on stream and you know I'm

756
00:40:19,179 --> 00:40:28,699
I'm sort of like encroaching on that

757
00:40:23,059 --> 00:40:30,859
space but what can you do so after we've

758
00:40:28,699 --> 00:40:32,239
loaded these tables in which you know

759
00:40:30,858 --> 00:40:33,858
and we've got the letting solution here

760
00:40:32,239 --> 00:40:36,699
that lighting solution is going to have

761
00:40:33,858 --> 00:40:39,228
these tables they're just going to be

762
00:40:36,699 --> 00:40:41,899
listed here in this diffused weight map

763
00:40:39,228 --> 00:40:44,509
right and so if we take a look at what

764
00:40:41,900 --> 00:40:48,680
happens after we've loaded it we can

765
00:40:44,509 --> 00:40:50,630
just add into our code here something

766
00:40:48,679 --> 00:40:54,288
that prints out the diffuse weight map

767
00:40:50,630 --> 00:40:57,200
exactly now it's a sixteen by sixteen

768
00:40:54,289 --> 00:40:58,609
which we actually don't have so it's

769
00:40:57,199 --> 00:40:59,748
it's only going to do eight by eight so

770
00:40:58,608 --> 00:41:01,248
I think that was just something we did

771
00:40:59,748 --> 00:41:02,778
to like make sure there's enough space

772
00:41:01,248 --> 00:41:04,518
in case the tables are bigger or

773
00:41:02,778 --> 00:41:06,920
something so we need to print out eight

774
00:41:04,518 --> 00:41:11,139
by eight and then the diffuse weight map

775
00:41:06,920 --> 00:41:11,139
just has the weights right here they are

776
00:41:11,650 --> 00:41:16,729
so what I should be able to do is just

777
00:41:14,509 --> 00:41:18,228
take a look at how the build diffuse

778
00:41:16,728 --> 00:41:19,608
light Maps works and just verify to

779
00:41:18,228 --> 00:41:21,889
myself that was the case you could see

780
00:41:19,608 --> 00:41:23,960
it only loops over eight in either case

781
00:41:21,889 --> 00:41:31,298
so I should be able to just go ahead and

782
00:41:23,960 --> 00:41:31,298
use that so if we just use this

783
00:41:41,099 --> 00:41:46,950
I guess there's two different versions

784
00:41:44,219 --> 00:41:48,629
here there's the sy and the T Y and we

785
00:41:46,949 --> 00:41:53,608
do need to do them both because we're

786
00:41:48,630 --> 00:41:59,130
going to want to print out all the

787
00:41:53,608 --> 00:42:03,239
tables as well as all the elements of

788
00:41:59,130 --> 00:42:06,088
each table so we need 64 tables each

789
00:42:03,239 --> 00:42:11,009
with 64 entries if that makes sense

790
00:42:06,088 --> 00:42:13,139
that's what we're storing here so in

791
00:42:11,010 --> 00:42:15,240
each case here I'm just going to print

792
00:42:13,139 --> 00:42:19,980
out one floating point value I don't

793
00:42:15,239 --> 00:42:21,389
need like a huge amount of precision

794
00:42:19,980 --> 00:42:25,588
because I just need to know like roughly

795
00:42:21,389 --> 00:42:27,328
what it is anything that's within you

796
00:42:25,588 --> 00:42:28,889
know a rough two digit two significant

797
00:42:27,329 --> 00:42:32,670
figures is probably enough we'll say

798
00:42:28,889 --> 00:42:35,969
three just to be even more crazy about

799
00:42:32,670 --> 00:42:39,150
it but it's probably fine so if we look

800
00:42:35,969 --> 00:42:42,230
here at the actual values I'm going to

801
00:42:39,150 --> 00:42:42,230
say map

802
00:42:54,150 --> 00:42:59,710
looking into the map looking at a

803
00:42:56,739 --> 00:43:01,209
particular element like sy SX so for

804
00:42:59,710 --> 00:43:03,159
this particular map that we're trying to

805
00:43:01,210 --> 00:43:06,490
print out I'm going to ask for a

806
00:43:03,159 --> 00:43:07,839
particular element value and what you

807
00:43:06,489 --> 00:43:09,519
can see here is the way that it's

808
00:43:07,840 --> 00:43:12,130
indexing into this thing is it's just

809
00:43:09,519 --> 00:43:17,559
saying look I'm going through each of

810
00:43:12,130 --> 00:43:21,059
the the element values and I'm pulling a

811
00:43:17,559 --> 00:43:32,250
particular element out here now I guess

812
00:43:21,059 --> 00:43:32,250
and that I guess looking at it though I

813
00:43:35,369 --> 00:43:45,219
can't say I understand what's happening

814
00:43:39,880 --> 00:43:48,190
there because oh yes I can

815
00:43:45,219 --> 00:43:49,869
sorry-sorry has a little confused there

816
00:43:48,190 --> 00:43:51,789
what was going on so here's the actual

817
00:43:49,869 --> 00:43:52,929
lookup into the fuse wait Maps I was I

818
00:43:51,789 --> 00:43:53,769
was very confused because I was looking

819
00:43:52,929 --> 00:43:57,219
at this I'm like that's not enough

820
00:43:53,769 --> 00:44:00,730
accidents but it's fine so if we pull

821
00:43:57,219 --> 00:44:03,609
out for the SX X Y here if we pull out

822
00:44:00,730 --> 00:44:06,490
which map we're trying to print which

823
00:44:03,610 --> 00:44:09,789
this is what I'm going to do right here

824
00:44:06,489 --> 00:44:11,619
and I just access them effectively the

825
00:44:09,789 --> 00:44:15,610
same way that they have been being

826
00:44:11,619 --> 00:44:17,559
access to the entire time we're gonna

827
00:44:15,610 --> 00:44:19,510
pull out a particular diffuse map that

828
00:44:17,559 --> 00:44:22,269
we want to print out and then we're

829
00:44:19,510 --> 00:44:27,130
going to access the values of that map

830
00:44:22,269 --> 00:44:28,480
as we go right now this is doing it kind

831
00:44:27,130 --> 00:44:31,780
of a little bit backwards

832
00:44:28,480 --> 00:44:34,119
and I guess I don't I guess I don't know

833
00:44:31,780 --> 00:44:36,280
whether I care or not how this is being

834
00:44:34,119 --> 00:44:40,269
computed but to make it a little clearer

835
00:44:36,280 --> 00:44:42,760
I guess we want to call these the

836
00:44:40,269 --> 00:44:44,739
opposite thing because the way it's

837
00:44:42,760 --> 00:44:46,720
getting computed is the other way round

838
00:44:44,739 --> 00:44:47,889
from the way we probably would want to

839
00:44:46,719 --> 00:44:49,539
think about printing it out so we

840
00:44:47,889 --> 00:44:51,819
probably want to do it this way like the

841
00:44:49,539 --> 00:44:54,219
destination we're going to print out the

842
00:44:51,820 --> 00:44:58,570
map for a destination and then inside

843
00:44:54,219 --> 00:45:01,939
that map we're gonna look up the values

844
00:44:58,570 --> 00:45:05,460
based on the SS X Y right

845
00:45:01,940 --> 00:45:08,130
so what we want to do here is we would

846
00:45:05,460 --> 00:45:13,019
like to treat this as floats and then

847
00:45:08,130 --> 00:45:14,430
just look up the sx s ex version so what

848
00:45:13,019 --> 00:45:16,318
I'd like to do is just say look pretend

849
00:45:14,429 --> 00:45:19,019
this is a float and give me the nth

850
00:45:16,318 --> 00:45:20,550
float because we're not printing these

851
00:45:19,019 --> 00:45:24,088
out wide we're just pretty nice floats

852
00:45:20,550 --> 00:45:27,869
um every time we finish a row go ahead

853
00:45:24,088 --> 00:45:30,779
and return out of the row and then each

854
00:45:27,869 --> 00:45:34,710
time we finish a map maybe print two of

855
00:45:30,780 --> 00:45:38,730
these I would like a announcement for

856
00:45:34,710 --> 00:45:42,630
the map so that we can know who's in

857
00:45:38,730 --> 00:45:48,960
whose particular you know map we're

858
00:45:42,630 --> 00:45:54,869
looking at without having to I just

859
00:45:48,960 --> 00:45:56,550
don't want to have to guess like our

860
00:45:54,869 --> 00:45:59,818
count right so I just want a thing here

861
00:45:56,550 --> 00:46:04,818
that says hey tell me which one of these

862
00:45:59,818 --> 00:46:06,900
were actually looking at as we go right

863
00:46:04,818 --> 00:46:08,818
all right so I'm going to print these

864
00:46:06,900 --> 00:46:11,250
out I guess I'll just print them out to

865
00:46:08,818 --> 00:46:13,469
standard out temporarily because again

866
00:46:11,250 --> 00:46:16,588
we do this is like a this is just random

867
00:46:13,469 --> 00:46:18,239
test code we don't care about what it's

868
00:46:16,588 --> 00:46:19,889
doing it doesn't matter

869
00:46:18,239 --> 00:46:21,149
so we'll just print them as standard out

870
00:46:19,889 --> 00:46:22,679
and we'll pipe them to a file and then

871
00:46:21,150 --> 00:46:28,430
we'll look at the file and that will

872
00:46:22,679 --> 00:46:28,429
just be what we do and end off again

873
00:46:31,329 --> 00:46:38,619
okay so I think I messed something up

874
00:46:36,820 --> 00:46:40,420
here because you can see like a lot of

875
00:46:38,619 --> 00:46:43,500
these things are all zeros so I'm

876
00:46:40,420 --> 00:46:46,809
probably looking up into this map

877
00:46:43,500 --> 00:46:54,690
incorrectly so we'll take a look at this

878
00:46:46,809 --> 00:46:54,690
in a second here but just in terms of

879
00:47:05,460 --> 00:47:12,720
I'm not sure so you can see here we've

880
00:47:07,588 --> 00:47:20,219
got a TX minus 1/4 to look up into which

881
00:47:12,719 --> 00:47:22,078
weight map it is so I'm not sure how

882
00:47:20,219 --> 00:47:24,500
we're encoding this exactly but it's a

883
00:47:22,079 --> 00:47:24,500
bit weird

884
00:47:34,179 --> 00:47:39,009
I guess Pirozhki so I think I know why

885
00:47:37,420 --> 00:47:40,450
so I think probably the reason for that

886
00:47:39,010 --> 00:47:43,360
is because the way we're processing them

887
00:47:40,449 --> 00:47:44,980
wide at the end of things I guess the

888
00:47:43,360 --> 00:47:48,700
way we're doing it well let me actually

889
00:47:44,980 --> 00:47:51,539
just go in there and look in the

890
00:47:48,699 --> 00:47:54,339
meantime the tea is ready

891
00:47:51,539 --> 00:47:59,259
well it's not ready it needs to be

892
00:47:54,340 --> 00:48:01,180
steeped but so here's how these are

893
00:47:59,260 --> 00:48:07,780
actually getting loaded out so you can

894
00:48:01,179 --> 00:48:11,019
see here like it does it does allude and

895
00:48:07,780 --> 00:48:15,670
it's processing these like four at a

896
00:48:11,019 --> 00:48:19,449
time right so the reason that that this

897
00:48:15,670 --> 00:48:25,150
is only happening over two things is

898
00:48:19,449 --> 00:48:29,079
because we we compute each diffuse map

899
00:48:25,150 --> 00:48:32,829
is actually computing like you know four

900
00:48:29,079 --> 00:48:36,369
of these values at the same time so the

901
00:48:32,829 --> 00:48:38,319
actual way that this would look is if

902
00:48:36,369 --> 00:48:46,539
we're actually trying to extract the map

903
00:48:38,320 --> 00:48:49,450
out it's not quite that way and honestly

904
00:48:46,539 --> 00:48:51,279
rather than extract the map that way I'm

905
00:48:49,449 --> 00:48:53,829
actually wondering if maybe what I

906
00:48:51,280 --> 00:48:58,180
should do is actually just compute it

907
00:48:53,829 --> 00:48:59,679
directly because now I'm thinking about

908
00:48:58,179 --> 00:49:01,179
it we're gonna want to play with this so

909
00:48:59,679 --> 00:49:07,049
I don't know that there's any real

910
00:49:01,179 --> 00:49:11,879
reason not to just do this right and

911
00:49:07,050 --> 00:49:11,880
then stop doing the

912
00:49:16,409 --> 00:49:20,699
stop doing the opposite version there

913
00:49:22,559 --> 00:49:28,090
and let's just take a look so if we

914
00:49:24,940 --> 00:49:35,940
actually just did it this way and said

915
00:49:28,090 --> 00:49:47,380
okay we're gonna do 8x8 and then these

916
00:49:35,940 --> 00:49:49,480
we would do the same way so here's us

917
00:49:47,380 --> 00:49:52,090
producing these values and I believe

918
00:49:49,480 --> 00:49:54,429
since these things adjust they would

919
00:49:52,090 --> 00:49:55,960
have to be incremented by one to account

920
00:49:54,429 --> 00:49:58,989
for the apron because this takes into

921
00:49:55,960 --> 00:50:01,659
account the apron this produces the

922
00:49:58,989 --> 00:50:13,439
total W value for everything and then

923
00:50:01,659 --> 00:50:16,029
this would compute the weights right

924
00:50:13,440 --> 00:50:18,579
once it computes the weights we have the

925
00:50:16,030 --> 00:50:22,300
W value and now we don't actually need

926
00:50:18,579 --> 00:50:28,599
to do this we can just produce this like

927
00:50:22,300 --> 00:50:31,539
final value or a new entry might be the

928
00:50:28,599 --> 00:50:34,539
thing to call it and then we can just

929
00:50:31,539 --> 00:50:36,550
print it out right so then after we

930
00:50:34,539 --> 00:50:41,289
print out all of those now we can add

931
00:50:36,550 --> 00:50:44,289
back in our little returns here and then

932
00:50:41,289 --> 00:50:49,989
each time we go through this process of

933
00:50:44,289 --> 00:50:52,869
doing all of the T X to Y X to Y yep so

934
00:50:49,989 --> 00:50:54,729
that prints an entire matrix and so what

935
00:50:52,869 --> 00:51:02,880
we can do is just put the announcement

936
00:50:54,730 --> 00:51:06,490
here of like map % u % u equals and

937
00:51:02,880 --> 00:51:09,039
minus X so that is actually saying that

938
00:51:06,489 --> 00:51:11,409
computes it directly and that should

939
00:51:09,039 --> 00:51:13,179
give us what we need I don't know if we

940
00:51:11,409 --> 00:51:16,569
pull the diffuse Atlas out of here or

941
00:51:13,179 --> 00:51:20,219
not we do okay so I'm just going to move

942
00:51:16,570 --> 00:51:20,220
this down to where we do that

943
00:51:21,750 --> 00:51:31,440
and then I'm going to rob bubbly yep so

944
00:51:29,760 --> 00:51:35,250
I'm just gonna go ahead and just call it

945
00:51:31,440 --> 00:51:44,039
here right and that should give me what

946
00:51:35,250 --> 00:51:51,110
I need oops all right let's go get our

947
00:51:44,039 --> 00:51:51,110
tea steeping I think there's an extra

948
00:51:51,139 --> 00:52:00,900
bracket and now I should be able to see

949
00:51:58,800 --> 00:52:04,650
the actual values in question right so

950
00:52:00,900 --> 00:52:07,079
you can see them here and this gives us

951
00:52:04,650 --> 00:52:09,329
all of our maps and you can see that

952
00:52:07,079 --> 00:52:12,509
they actually look like cosign fell offs

953
00:52:09,329 --> 00:52:15,029
right rapped on to the octahedron right

954
00:52:12,510 --> 00:52:16,320
you can actually see where the values

955
00:52:15,030 --> 00:52:18,060
are and one thing that you might

956
00:52:16,320 --> 00:52:21,269
sometimes want to do I don't know you

957
00:52:18,059 --> 00:52:28,799
might not but sometimes I do stuff like

958
00:52:21,269 --> 00:52:30,869
this where to say okay look so we know

959
00:52:28,800 --> 00:52:34,200
this is like one two three four five

960
00:52:30,869 --> 00:52:38,219
entries right so what we can do is like

961
00:52:34,199 --> 00:52:42,500
one two three four five and this allows

962
00:52:38,219 --> 00:52:44,489
you to see a little bit easier sorry

963
00:52:42,500 --> 00:52:52,170
this allows you to see a little bit

964
00:52:44,489 --> 00:52:53,909
easier what's going on right so do you

965
00:52:52,170 --> 00:52:55,889
see how you can see the shape of the

966
00:52:53,909 --> 00:52:58,889
matrix just you can just see the shape

967
00:52:55,889 --> 00:53:02,069
of the matrix entries a little bit more

968
00:52:58,889 --> 00:53:04,500
cleanly right it's just an easier thing

969
00:53:02,070 --> 00:53:08,250
to see so you can kind of see how

970
00:53:04,500 --> 00:53:10,889
they're shaped as they as they as they

971
00:53:08,250 --> 00:53:13,699
move around on here right okay so I

972
00:53:10,889 --> 00:53:13,699
would hold on a second

973
00:54:39,750 --> 00:54:47,489
all right the tea is now steeping so

974
00:54:42,519 --> 00:54:51,039
we're all good so what we'd like to do

975
00:54:47,489 --> 00:54:53,798
at this point is say okay

976
00:54:51,039 --> 00:54:58,690
looking at these values right in terms

977
00:54:53,798 --> 00:55:02,230
of significant figures and so on my

978
00:54:58,690 --> 00:55:06,068
question is to what degree are we ever

979
00:55:02,230 --> 00:55:10,210
actually using the same values you know

980
00:55:06,068 --> 00:55:12,818
multiple times right because in order to

981
00:55:10,210 --> 00:55:18,159
figure out how we would make this

982
00:55:12,818 --> 00:55:20,798
routine do something sensible we're

983
00:55:18,159 --> 00:55:24,219
going to have to find terms that can be

984
00:55:20,798 --> 00:55:28,150
reused you know I'm saying so in other

985
00:55:24,219 --> 00:55:30,608
words we if we don't ever see terms in

986
00:55:28,150 --> 00:55:32,410
here that are similar to each other then

987
00:55:30,608 --> 00:55:34,989
there's not a lot we could really do to

988
00:55:32,409 --> 00:55:36,909
speed this up we need to see you know

989
00:55:34,989 --> 00:55:39,789
particular values being multiplied by

990
00:55:36,909 --> 00:55:41,548
the same thing or something in order to

991
00:55:39,789 --> 00:55:45,009
figure out how we would more efficiently

992
00:55:41,548 --> 00:55:50,469
compute it and one of the things that I

993
00:55:45,010 --> 00:55:52,030
think is really you know if you look at

994
00:55:50,469 --> 00:55:53,828
at why this is probably going to be

995
00:55:52,030 --> 00:55:56,079
harder for us than it would normally be

996
00:55:53,829 --> 00:55:57,579
and one of the reasons we may need to do

997
00:55:56,079 --> 00:56:00,970
something more approximate or who knows

998
00:55:57,579 --> 00:56:04,329
what is you can see that the shape of

999
00:56:00,969 --> 00:56:06,429
the filter for each individual output so

1000
00:56:04,329 --> 00:56:09,099
you know if you want to take it look at

1001
00:56:06,429 --> 00:56:12,009
what has to go into square 4 or 4 you

1002
00:56:09,099 --> 00:56:14,829
can kind of see like just how different

1003
00:56:12,010 --> 00:56:19,740
the pattern of inputs is compared to

1004
00:56:14,829 --> 00:56:22,809
something like map 5/6 or you know maybe

1005
00:56:19,739 --> 00:56:28,929
map 6-7 they're just totally different

1006
00:56:22,809 --> 00:56:31,390
right very very different shapes so you

1007
00:56:28,929 --> 00:56:34,868
know if we literally are just going to

1008
00:56:31,389 --> 00:56:37,000
use the dot product here to figure out

1009
00:56:34,869 --> 00:56:40,510
what we're gonna do it does seem like we

1010
00:56:37,000 --> 00:56:44,230
maybe have a bit of an uphill battle of

1011
00:56:40,510 --> 00:56:48,460
course what we don't really know is to

1012
00:56:44,230 --> 00:56:51,900
what extent we could use fairly similar

1013
00:56:48,460 --> 00:56:53,360
values so like we don't really know how

1014
00:56:51,900 --> 00:56:56,930
different

1015
00:56:53,360 --> 00:57:00,590
actually is in terms of like the point

1016
00:56:56,929 --> 00:57:04,669
7s here you know like how often does

1017
00:57:00,590 --> 00:57:08,930
point 7 show up there it's it's not

1018
00:57:04,670 --> 00:57:11,840
never right you can see that like it's

1019
00:57:08,929 --> 00:57:16,489
actually fairly frequently showing up in

1020
00:57:11,840 --> 00:57:18,160
that slot so you know you never know

1021
00:57:16,489 --> 00:57:20,750
right

1022
00:57:18,159 --> 00:57:23,809
even just using the cosine fall-off we

1023
00:57:20,750 --> 00:57:25,280
might be able to do some stuff here that

1024
00:57:23,809 --> 00:57:26,840
would get us out of that business and

1025
00:57:25,280 --> 00:57:30,500
again I don't know I'm just saying like

1026
00:57:26,840 --> 00:57:32,090
looking at how looking now this filters

1027
00:57:30,500 --> 00:57:33,590
distributed there's you know there it is

1028
00:57:32,090 --> 00:57:38,269
again

1029
00:57:33,590 --> 00:57:41,030
it's possible it's possible that there

1030
00:57:38,269 --> 00:57:43,449
is enough reuse in here that we could do

1031
00:57:41,030 --> 00:57:50,900
something interesting

1032
00:57:43,449 --> 00:57:52,460
you know we don't know so at this point

1033
00:57:50,900 --> 00:57:53,900
it's kind of tricky like I said this is

1034
00:57:52,460 --> 00:57:55,970
not my strong suit I don't really do

1035
00:57:53,900 --> 00:58:00,349
this kind of signal processing hardly

1036
00:57:55,969 --> 00:58:01,549
ever never really done it so it may be

1037
00:58:00,349 --> 00:58:03,139
that there's some obvious things that

1038
00:58:01,550 --> 00:58:06,670
you could do here that would be good but

1039
00:58:03,139 --> 00:58:12,289
you know just looking at it sort of

1040
00:58:06,670 --> 00:58:14,930
quickly it definitely seems a bit scary

1041
00:58:12,289 --> 00:58:17,150
to me because I don't see a trivial way

1042
00:58:14,929 --> 00:58:18,619
that you separate this into passes no

1043
00:58:17,150 --> 00:58:21,099
matter what they are I mean you know

1044
00:58:18,619 --> 00:58:24,170
that could be anything but I don't see

1045
00:58:21,099 --> 00:58:26,179
much opportunity for doing that with the

1046
00:58:24,170 --> 00:58:29,809
function as it stands just because I'm

1047
00:58:26,179 --> 00:58:32,210
not sure how we would account for how

1048
00:58:29,809 --> 00:58:39,500
irregular the shape is you know and I

1049
00:58:32,210 --> 00:58:44,329
mean it just seems really it just seems

1050
00:58:39,500 --> 00:58:45,769
really hard to conceive so there's two

1051
00:58:44,329 --> 00:58:48,259
ways I could think of approaching this

1052
00:58:45,769 --> 00:58:51,619
one way of approaching this would be to

1053
00:58:48,260 --> 00:58:54,080
try and get something that produces a

1054
00:58:51,619 --> 00:58:57,619
sort of somewhat similar pattern but

1055
00:58:54,079 --> 00:59:01,309
that's more regular another way is to

1056
00:58:57,619 --> 00:59:05,809
see how many times a particular type of

1057
00:59:01,309 --> 00:59:08,110
value gets used and where so in other

1058
00:59:05,809 --> 00:59:08,110
words

1059
00:59:08,679 --> 00:59:23,179
if we were to look at all of the terms

1060
00:59:14,239 --> 00:59:25,009
that are involved in if we were to look

1061
00:59:23,179 --> 00:59:30,980
at all the terms involved in this matrix

1062
00:59:25,010 --> 00:59:33,520
right how would we actually figure out

1063
00:59:30,980 --> 00:59:36,760
like like could I just write a thing

1064
00:59:33,519 --> 00:59:36,759
there's my tea

1065
01:00:18,389 --> 01:00:21,569
all right

1066
01:00:43,409 --> 01:00:55,899
all right so I don't really know where

1067
01:00:53,949 --> 01:00:57,669
to go from here there's a couple

1068
01:00:55,900 --> 01:00:59,200
directions we could go and I'm not sure

1069
01:00:57,670 --> 01:01:02,230
which one of them will pant you know

1070
01:00:59,199 --> 01:01:07,629
which of those will pan out when we're

1071
01:01:02,230 --> 01:01:15,880
generating this pattern of sort of

1072
01:01:07,630 --> 01:01:18,759
transmittance we we might want to do

1073
01:01:15,880 --> 01:01:20,798
something where we wrap our values and

1074
01:01:18,759 --> 01:01:24,900
get a larger matrix just to see what it

1075
01:01:20,798 --> 01:01:29,858
looks like you know you could imagine

1076
01:01:24,900 --> 01:01:34,809
doing something where we said let's

1077
01:01:29,858 --> 01:01:42,880
print out a 16 by 16 matrix for each of

1078
01:01:34,809 --> 01:01:47,319
these or something right and well we

1079
01:01:42,880 --> 01:01:49,599
only need to do it on the printout and

1080
01:01:47,318 --> 01:01:52,028
so here where we're producing these

1081
01:01:49,599 --> 01:01:57,298
values we could just say look just just

1082
01:01:52,028 --> 01:02:00,309
give us the matrix in its entirety

1083
01:01:57,298 --> 01:02:02,338
wrapped so that we can see the shape

1084
01:02:00,309 --> 01:02:05,069
better when it happens to wrap around

1085
01:02:02,338 --> 01:02:09,308
because it's a little bit hard to see

1086
01:02:05,068 --> 01:02:13,358
with the way it is now right so here's

1087
01:02:09,309 --> 01:02:17,130
like a better sort of view of what's

1088
01:02:13,358 --> 01:02:17,130
happening to the matrix I think

1089
01:02:26,900 --> 01:02:45,929
and you know there are some things you

1090
01:02:29,909 --> 01:02:49,009
can sort of say about it wow it's just

1091
01:02:45,929 --> 01:02:49,009
really Squinkie

1092
01:03:23,300 --> 01:03:31,019
so I guess what I would say is I'm a

1093
01:03:27,000 --> 01:03:33,599
little confused first of all I'm not

1094
01:03:31,019 --> 01:03:34,800
sure what I want to do next but one of

1095
01:03:33,599 --> 01:03:37,920
the things that you see that's pretty

1096
01:03:34,800 --> 01:03:40,440
unusual is it's weird that even out to

1097
01:03:37,920 --> 01:03:43,230
three significant figures you get like

1098
01:03:40,440 --> 01:03:48,090
these rows that are like exactly the

1099
01:03:43,230 --> 01:03:54,510
same so you know map seven seven and map

1100
01:03:48,090 --> 01:04:01,050
seven six are like identical in terms of

1101
01:03:54,510 --> 01:04:03,810
their contributions here and that's just

1102
01:04:01,050 --> 01:04:05,789
real weird and you see that pattern kind

1103
01:04:03,809 --> 01:04:07,619
of happening fairly frequently I guess

1104
01:04:05,789 --> 01:04:10,650
that's because of the structure of the

1105
01:04:07,619 --> 01:04:17,519
cosine because the cosine has like a

1106
01:04:10,650 --> 01:04:19,500
very you know steep fall off it has a

1107
01:04:17,519 --> 01:04:22,769
very like sharp inflection and then it

1108
01:04:19,500 --> 01:04:26,969
has a very sharp like a very smooth

1109
01:04:22,769 --> 01:04:29,670
crest right I guess it's possible that

1110
01:04:26,969 --> 01:04:33,209
that as you get to certain incidence

1111
01:04:29,670 --> 01:04:36,570
angles the variation in the output of

1112
01:04:33,210 --> 01:04:44,550
the cosine when it's you know near near

1113
01:04:36,570 --> 01:04:46,500
zero and near one are maybe very you

1114
01:04:44,550 --> 01:04:47,850
just don't see like perturbations and

1115
01:04:46,500 --> 01:04:50,280
the inputs just don't change the output

1116
01:04:47,849 --> 01:04:52,500
much at all so even though these are two

1117
01:04:50,280 --> 01:04:55,460
totally different products because

1118
01:04:52,500 --> 01:04:59,489
they're close enough you end up with two

1119
01:04:55,460 --> 01:05:07,820
three decimal places you get the same

1120
01:04:59,489 --> 01:05:10,349
value right so that's surprising to me

1121
01:05:07,820 --> 01:05:14,340
it's not what I would have expected to

1122
01:05:10,349 --> 01:05:18,960
see but it's what we do see so you know

1123
01:05:14,340 --> 01:05:22,200
that's where we're at so yeah so back to

1124
01:05:18,960 --> 01:05:26,010
our story so figuring out what we want

1125
01:05:22,199 --> 01:05:31,619
to produce here I guess what I'd like to

1126
01:05:26,010 --> 01:05:33,240
do is find out you know can we can we do

1127
01:05:31,619 --> 01:05:35,549
some kind of a search over this space

1128
01:05:33,239 --> 01:05:35,919
and see if there's redundancy in here

1129
01:05:35,550 --> 01:05:37,539
that

1130
01:05:35,920 --> 01:05:39,430
could just compute things maybe in a

1131
01:05:37,539 --> 01:05:41,440
different way sooner they could think of

1132
01:05:39,429 --> 01:05:43,089
to attack this that doesn't just involve

1133
01:05:41,440 --> 01:05:46,269
changing the function which is the other

1134
01:05:43,090 --> 01:05:48,490
thing that we could do and changing the

1135
01:05:46,269 --> 01:05:51,449
function again you know looking at how

1136
01:05:48,489 --> 01:05:54,009
different this looks I am mildly worried

1137
01:05:51,449 --> 01:05:59,429
that changing the function to some kind

1138
01:05:54,010 --> 01:06:08,980
of a basic blurring process might just

1139
01:05:59,429 --> 01:06:12,969
produce too much error I really don't

1140
01:06:08,980 --> 01:06:16,900
know it's possible that just a basic

1141
01:06:12,969 --> 01:06:19,389
blur of this thing would be fine and in

1142
01:06:16,900 --> 01:06:22,660
which case we're just spending way too

1143
01:06:19,389 --> 01:06:24,159
much time trying to do something more

1144
01:06:22,659 --> 01:06:27,989
interesting that we don't really need to

1145
01:06:24,159 --> 01:06:30,219
do right mm-hmm

1146
01:06:27,989 --> 01:06:37,959
so there's one other thing we could try

1147
01:06:30,219 --> 01:06:40,989
too which is threshold inconsiderate

1148
01:06:37,960 --> 01:06:42,369
amido care anyway and it might be

1149
01:06:40,989 --> 01:06:44,169
interesting to see what those values

1150
01:06:42,369 --> 01:06:45,880
look like so let's suppose we were gonna

1151
01:06:44,170 --> 01:06:47,889
say like look maybe one thing we'll do

1152
01:06:45,880 --> 01:06:54,039
is just try to do threshold here so

1153
01:06:47,889 --> 01:06:56,319
every place in here that W is greater

1154
01:06:54,039 --> 01:07:05,920
than 0.1 F we use it but everywhere else

1155
01:06:56,320 --> 01:07:07,330
we just don't and maybe we want to try a

1156
01:07:05,920 --> 01:07:09,519
couple of these values so maybe what I

1157
01:07:07,329 --> 01:07:14,739
do is I say thresholds here and I just

1158
01:07:09,519 --> 01:07:18,059
say that and oops and then I just say

1159
01:07:14,739 --> 01:07:18,059
okay that's something we can control

1160
01:07:19,829 --> 01:07:25,119
so if we were to just cut things off

1161
01:07:22,599 --> 01:07:28,000
what does that look like does that give

1162
01:07:25,119 --> 01:07:31,779
us anything particularly nicer you know

1163
01:07:28,000 --> 01:07:38,190
I don't know so here's the results of of

1164
01:07:31,780 --> 01:07:38,190
this what just happened Oh

1165
01:07:40,199 --> 01:07:48,118
oops um yeah sorry about that we're in

1166
01:07:45,449 --> 01:07:50,039
the wrong routine the perils of having

1167
01:07:48,119 --> 01:07:52,769
two parallel routines open at the same

1168
01:07:50,039 --> 01:07:54,920
time ladies and gentlemen

1169
01:07:52,769 --> 01:08:09,329
we did not actually want to modify that

1170
01:07:54,920 --> 01:08:10,710
um so yeah all right so we'll just do it

1171
01:08:09,329 --> 01:08:12,650
that way we'll say look if we're below

1172
01:08:10,710 --> 01:08:18,779
the threshold we just get zeroed out

1173
01:08:12,650 --> 01:08:21,088
what does that look like so here's the

1174
01:08:18,779 --> 01:08:26,219
look of the matrix did I screw it up

1175
01:08:21,088 --> 01:08:28,289
again what happened what are we doing if

1176
01:08:26,219 --> 01:08:31,649
W is less than threshold W equals 0 if

1177
01:08:28,289 --> 01:08:34,219
Debra's of student and tree W / W total

1178
01:08:31,649 --> 01:08:38,689
am I missing something

1179
01:08:34,219 --> 01:08:49,350
threshold equals 0.01 if it's less we

1180
01:08:38,689 --> 01:08:51,419
dump it hmm I guess I'm not sure what's

1181
01:08:49,350 --> 01:09:00,120
going on there because at least looking

1182
01:08:51,420 --> 01:09:04,649
at this we should have zeroed out W so W

1183
01:09:00,119 --> 01:09:07,338
/ W total here would be zero right what

1184
01:09:04,649 --> 01:09:07,338
am I missing folks

1185
01:09:12,658 --> 01:09:25,179
because like I mean if you're seeing

1186
01:09:15,899 --> 01:09:27,250
0.07 there that's obviously not that's

1187
01:09:25,179 --> 01:09:30,130
obviously not above the weight threshold

1188
01:09:27,250 --> 01:09:33,849
I mean at the risk of stating the

1189
01:09:30,130 --> 01:09:41,828
obvious so you would think that that

1190
01:09:33,849 --> 01:09:44,250
would take care of it right what just

1191
01:09:41,828 --> 01:09:44,250
happened

1192
01:09:51,408 --> 01:09:58,078
all right I don't know what to make of

1193
01:09:55,889 --> 01:10:03,059
it so I guess I'll go ahead and step

1194
01:09:58,078 --> 01:10:13,979
into that routine probably just some

1195
01:10:03,059 --> 01:10:18,929
kind of stupid typo I guess soaking up

1196
01:10:13,979 --> 01:10:19,379
remedy shhh lie prof and we'll take a

1197
01:10:18,929 --> 01:10:26,279
look

1198
01:10:19,380 --> 01:10:30,538
so NHH light prof i'm just gonna go

1199
01:10:26,279 --> 01:10:44,279
ahead here and run and i'm gonna take a

1200
01:10:30,538 --> 01:10:46,889
look at what w is oh whoops I guess I

1201
01:10:44,279 --> 01:10:48,899
just somehow wasn't thinking about the

1202
01:10:46,889 --> 01:10:51,569
fact that this will decrease the values

1203
01:10:48,899 --> 01:10:54,149
dramatically so the problem with this is

1204
01:10:51,569 --> 01:10:58,969
since we don't know what the total is we

1205
01:10:54,149 --> 01:10:58,969
don't know what we would clamp out here

1206
01:11:00,198 --> 01:11:15,598
so that's a little trickier right that's

1207
01:11:12,118 --> 01:11:17,519
a little trickier because since we can't

1208
01:11:15,599 --> 01:11:21,690
know ahead of time what that is I mean

1209
01:11:17,520 --> 01:11:25,889
we can very easily just go through and

1210
01:11:21,689 --> 01:11:28,348
make sure that that particular when we

1211
01:11:25,889 --> 01:11:29,909
can zero things out and then normalize

1212
01:11:28,349 --> 01:11:31,650
them back up to one so that's not that

1213
01:11:29,908 --> 01:11:33,299
bad but it does make it a little harder

1214
01:11:31,649 --> 01:11:42,259
to say like what that cutoff should be

1215
01:11:33,300 --> 01:11:42,260
right so yeah anyway

1216
01:11:46,500 --> 01:11:54,670
so if we look at the results here you

1217
01:11:50,618 --> 01:11:56,710
know cutting off at the cutting off of a

1218
01:11:54,670 --> 01:11:59,020
particular threshold you know it saves

1219
01:11:56,710 --> 01:12:06,908
some work so you can see here how you

1220
01:11:59,020 --> 01:12:12,010
would be able to skip about two to four

1221
01:12:06,908 --> 01:12:13,539
rows most of the time some of them

1222
01:12:12,010 --> 01:12:16,119
unfortunately are treated four columns

1223
01:12:13,539 --> 01:12:18,908
which doesn't help because when these

1224
01:12:16,118 --> 01:12:20,589
become columnar here right it's a lot

1225
01:12:18,908 --> 01:12:22,118
harder to skip a column that it is to

1226
01:12:20,590 --> 01:12:27,909
skip a row just because of the way that

1227
01:12:22,118 --> 01:12:38,289
we're processing is so you know it's not

1228
01:12:27,908 --> 01:12:41,488
nothing but it's not really it's not

1229
01:12:38,289 --> 01:12:41,488
really super compelling

1230
01:12:53,840 --> 01:13:07,920
yeah I don't know I don't know I'm not

1231
01:13:05,670 --> 01:13:10,199
thinking of the magical thing this this

1232
01:13:07,920 --> 01:13:13,109
is something that really wants to be

1233
01:13:10,198 --> 01:13:16,349
explored more deeply so normally I would

1234
01:13:13,109 --> 01:13:18,259
kind of break out the the notebooks and

1235
01:13:16,350 --> 01:13:20,310
and work on this problem for a while

1236
01:13:18,260 --> 01:13:22,079
it's pretty hard to do that kind of

1237
01:13:20,310 --> 01:13:23,960
stuff on stream because this is gonna be

1238
01:13:22,079 --> 01:13:34,829
something that's very solvable I think

1239
01:13:23,960 --> 01:13:36,090
but you know in this particular case I'm

1240
01:13:34,829 --> 01:13:39,659
not sure I can really do that

1241
01:13:36,090 --> 01:13:41,819
effectively on stream because it would

1242
01:13:39,659 --> 01:13:45,569
be like you know hours of me kind of

1243
01:13:41,819 --> 01:13:47,759
like noodling with the thing um so just

1244
01:13:45,569 --> 01:13:50,029
to try and figure out what we might be

1245
01:13:47,760 --> 01:13:54,030
able to do again more shortcutting there

1246
01:13:50,029 --> 01:13:56,159
so the other thing we could say is well

1247
01:13:54,029 --> 01:13:58,769
you know what if we just consider an

1248
01:13:56,159 --> 01:14:00,988
arrow or band and I mean that is sort of

1249
01:13:58,770 --> 01:14:03,000
what this is doing right

1250
01:14:00,988 --> 01:14:04,198
it's narrowing the contribution rate but

1251
01:14:03,000 --> 01:14:07,229
so what if we were to say like

1252
01:14:04,198 --> 01:14:10,589
everything like less than 10% is out so

1253
01:14:07,229 --> 01:14:11,879
a much stronger so instead of doing

1254
01:14:10,590 --> 01:14:13,650
things that are insignificant we're just

1255
01:14:11,880 --> 01:14:20,750
saying look we're restricting the

1256
01:14:13,649 --> 01:14:26,399
function actually quite a bit that's

1257
01:14:20,750 --> 01:14:28,469
post consideration so I guess it's got

1258
01:14:26,399 --> 01:14:32,179
to be a little bit different than that

1259
01:14:28,469 --> 01:14:32,180
but so let's try here

1260
01:14:38,119 --> 01:14:43,710
so it looks like the point on one is a

1261
01:14:41,609 --> 01:14:47,479
pretty aggressive cut off already just

1262
01:14:43,710 --> 01:14:47,480
looking at how decimated this gets

1263
01:14:53,510 --> 01:14:59,840
and I'll go ahead and stop doing the

1264
01:14:56,689 --> 01:15:05,869
additional so I can just look at the

1265
01:14:59,840 --> 01:15:07,610
actual matrices so realize before when I

1266
01:15:05,869 --> 01:15:10,279
said two to four rows it's really just

1267
01:15:07,609 --> 01:15:12,710
to write because the reason it looks

1268
01:15:10,279 --> 01:15:16,029
like for us because we had extra an

1269
01:15:12,710 --> 01:15:16,029
extra print out of the matrix in there

1270
01:15:17,439 --> 01:15:20,639
[Music]

1271
01:15:29,460 --> 01:15:32,460
hmm

1272
01:15:46,359 --> 01:15:51,498
so one thing I would be interested to

1273
01:15:48,649 --> 01:15:54,590
know - so I think I'll print this out as

1274
01:15:51,498 --> 01:15:57,288
well is rather than just looking at the

1275
01:15:54,590 --> 01:16:01,360
dot product for my own edification what

1276
01:15:57,288 --> 01:16:03,768
I might do is say show me what the

1277
01:16:01,359 --> 01:16:08,688
actual you know in a separate pass

1278
01:16:03,769 --> 01:16:10,429
appear that I do for actually you know

1279
01:16:08,689 --> 01:16:11,809
we'll do it last so it's so we don't

1280
01:16:10,429 --> 01:16:15,408
even have to scroll up to it let's just

1281
01:16:11,809 --> 01:16:17,840
put it last so what I'd like to do is

1282
01:16:15,408 --> 01:16:22,448
say for a particular one of these what

1283
01:16:17,840 --> 01:16:27,380
if we just printed out what direction

1284
01:16:22,448 --> 01:16:30,069
things are in so you know maybe

1285
01:16:27,380 --> 01:16:30,069
something like this

1286
01:16:37,658 --> 01:16:57,138
so one matrix each and well just say

1287
01:16:41,899 --> 01:17:00,110
like oops so what I'll do here is just

1288
01:16:57,139 --> 01:17:03,918
go through each of these and say look

1289
01:17:00,109 --> 01:17:06,529
we're gonna take the incoming direction

1290
01:17:03,918 --> 01:17:09,408
which gives us a v3 we're not going to

1291
01:17:06,529 --> 01:17:14,958
beat any weights or anything we're just

1292
01:17:09,408 --> 01:17:18,438
gonna say that the entry and I can still

1293
01:17:14,958 --> 01:17:23,328
do like if entry is positive or if entry

1294
01:17:18,439 --> 01:17:26,418
is not zero what I could do is say look

1295
01:17:23,328 --> 01:17:29,779
take the entry and just pick out

1296
01:17:26,418 --> 01:17:32,958
whatever element we're printing and

1297
01:17:29,779 --> 01:17:34,849
we're just going to print that right and

1298
01:17:32,958 --> 01:17:40,118
the reason I kind of wanted to see that

1299
01:17:34,849 --> 01:17:40,119
oh and you know what we're going to need

1300
01:17:43,469 --> 01:17:50,979
some spacing the negative is a problem

1301
01:17:47,559 --> 01:17:53,380
here because I don't remember what the

1302
01:17:50,979 --> 01:18:05,999
printf format is to leave space for it

1303
01:17:53,380 --> 01:18:05,998
is it plus or something that anyone know

1304
01:18:07,408 --> 01:18:21,969
know that yes so if we take a look at

1305
01:18:19,238 --> 01:18:26,819
what the elements are here this is just

1306
01:18:21,969 --> 01:18:26,819
sort of my way of trying to see like

1307
01:18:26,998 --> 01:18:33,689
what are the actual values like

1308
01:18:29,738 --> 01:18:33,689
components of the vector right

1309
01:18:36,659 --> 01:18:39,750
[Music]

1310
01:18:40,460 --> 01:18:47,069
so these are the X components of the

1311
01:18:45,510 --> 01:18:51,150
vector now and it looks like we need one

1312
01:18:47,069 --> 01:18:53,069
more to write this sorry it doesn't

1313
01:18:51,149 --> 01:18:54,809
really matter but because the way they

1314
01:18:53,069 --> 01:19:00,599
lined up it didn't matter but we'll do

1315
01:18:54,810 --> 01:19:07,410
it anyway right looks like I put this

1316
01:19:00,600 --> 01:19:13,079
inside the the for loop erroneously as

1317
01:19:07,409 --> 01:19:14,279
well no no okay it just prints out every

1318
01:19:13,079 --> 01:19:15,680
time through I was gonna say no I was

1319
01:19:14,279 --> 01:19:20,489
like I didn't think I did that I didn't

1320
01:19:15,680 --> 01:19:26,280
so looking at this this kind of lets to

1321
01:19:20,489 --> 01:19:36,449
see what these values are in terms of XY

1322
01:19:26,279 --> 01:19:38,779
and Z and that's actually pretty

1323
01:19:36,449 --> 01:19:38,779
interesting

1324
01:20:00,729 --> 01:20:05,119
so that's pretty interesting and the

1325
01:20:03,470 --> 01:20:06,920
reason that I find that to be

1326
01:20:05,119 --> 01:20:10,059
interesting is because if we look at the

1327
01:20:06,920 --> 01:20:16,940
separate pieces of the dot product right

1328
01:20:10,060 --> 01:20:20,930
there getting added together right so

1329
01:20:16,939 --> 01:20:23,809
we're doing like in here we're doing an

1330
01:20:20,930 --> 01:20:27,470
ad and this this part is a little

1331
01:20:23,810 --> 01:20:29,600
trickier because it's clamping the

1332
01:20:27,470 --> 01:20:30,260
values so that they can't drop below

1333
01:20:29,600 --> 01:20:33,800
zero

1334
01:20:30,260 --> 01:20:35,270
which is something that we're gonna have

1335
01:20:33,800 --> 01:20:45,110
to reckon with which might be a little

1336
01:20:35,270 --> 01:20:47,690
tricky right but looking at those values

1337
01:20:45,109 --> 01:20:51,019
it's like okay so they're very symmetric

1338
01:20:47,689 --> 01:21:00,949
in exactly the way that we would expect

1339
01:20:51,020 --> 01:21:04,220
for X&amp;Y right so it's really and Z is

1340
01:21:00,949 --> 01:21:08,869
both so Z is symmetric on both axes

1341
01:21:04,220 --> 01:21:10,550
Sophia if you look like actually

1342
01:21:08,869 --> 01:21:11,720
actually know all of these because

1343
01:21:10,550 --> 01:21:16,090
they're come from a sphere they're

1344
01:21:11,720 --> 01:21:22,930
actually all doubly symmetric right so

1345
01:21:16,090 --> 01:21:22,930
you can see what all the values are for

1346
01:21:23,710 --> 01:21:37,180
for one of these octahedral maps and

1347
01:21:32,590 --> 01:21:37,180
they're completely symmetric right

1348
01:21:59,399 --> 01:22:03,729
so again while I'm not really sure

1349
01:22:01,930 --> 01:22:05,469
exactly how to take advantage of it

1350
01:22:03,729 --> 01:22:06,069
there's a tremendous amount of structure

1351
01:22:05,469 --> 01:22:09,340
in here

1352
01:22:06,069 --> 01:22:11,859
and so when we're doing our

1353
01:22:09,340 --> 01:22:14,829
multiplication you know where we're

1354
01:22:11,859 --> 01:22:18,009
going to be multiplying the same values

1355
01:22:14,829 --> 01:22:20,680
often right because as we do

1356
01:22:18,010 --> 01:22:23,680
combinations of each of these there are

1357
01:22:20,680 --> 01:22:26,829
only so many different products that we

1358
01:22:23,680 --> 01:22:36,640
have to take into account here right so

1359
01:22:26,829 --> 01:22:39,939
for an equation for in in terms of

1360
01:22:36,640 --> 01:22:42,460
understanding the structure right we

1361
01:22:39,939 --> 01:22:49,960
have something that looks like you know

1362
01:22:42,460 --> 01:22:56,619
ax BX + a YB y plus C oops

1363
01:22:49,960 --> 01:23:00,189
a Z BZ and this although it's being

1364
01:22:56,619 --> 01:23:02,349
clamped so we kind of have to understand

1365
01:23:00,189 --> 01:23:07,329
that there's you know an operator

1366
01:23:02,350 --> 01:23:09,190
happening here of some kind if we ignore

1367
01:23:07,329 --> 01:23:11,019
that just temporarily because that's

1368
01:23:09,189 --> 01:23:12,488
gonna be an additional fly in the

1369
01:23:11,020 --> 01:23:15,250
ointment but if we just look at this

1370
01:23:12,488 --> 01:23:19,839
we're basically doing a series of these

1371
01:23:15,250 --> 01:23:22,750
you know times our color values so all

1372
01:23:19,840 --> 01:23:27,789
of our terms effectively look like this

1373
01:23:22,750 --> 01:23:30,909
and each of these is drawn from one of

1374
01:23:27,789 --> 01:23:34,979
these distributions so these are the

1375
01:23:30,909 --> 01:23:34,979
only possible values that we can have

1376
01:23:37,409 --> 01:23:40,409
right

1377
01:23:40,720 --> 01:23:46,460
so because these are completely

1378
01:23:43,130 --> 01:23:49,550
symmetric if you look at the actual

1379
01:23:46,460 --> 01:23:52,039
values that exist here one of the things

1380
01:23:49,550 --> 01:23:56,659
that you can see is that there's

1381
01:23:52,039 --> 01:24:01,340
actually so there's only 16 possible

1382
01:23:56,659 --> 01:24:04,639
values that you can get for Y and among

1383
01:24:01,340 --> 01:24:07,010
the 16 possible values not all of them

1384
01:24:04,640 --> 01:24:09,710
are even unique to this level of

1385
01:24:07,010 --> 01:24:14,300
precision you can see like negative 192

1386
01:24:09,710 --> 01:24:16,609
is repeated twice right doesn't look

1387
01:24:14,300 --> 01:24:21,020
like there's really much repeated miss

1388
01:24:16,609 --> 01:24:23,869
but there's 16 Y values that's all the Y

1389
01:24:21,020 --> 01:24:25,370
values there really are and there's just

1390
01:24:23,869 --> 01:24:31,099
positive and negative versions of them

1391
01:24:25,369 --> 01:24:33,349
right so you can pretty much only draw

1392
01:24:31,100 --> 01:24:35,180
from 16 values there's 32 values total

1393
01:24:33,350 --> 01:24:36,560
if you want to count the positive

1394
01:24:35,180 --> 01:24:38,900
versions of it but it's basically just

1395
01:24:36,560 --> 01:24:48,940
16 values and then the positive negative

1396
01:24:38,899 --> 01:24:48,939
version right if you look at Z so Z has

1397
01:24:49,359 --> 01:24:56,479
20 no oh I'm sorry you know what that's

1398
01:24:53,449 --> 01:24:58,519
not even 16 that's only 12 because

1399
01:24:56,479 --> 01:25:01,489
actually we didn't get out to here so

1400
01:24:58,520 --> 01:25:05,630
it's only 12 twenty four if you count

1401
01:25:01,489 --> 01:25:08,869
both there's sixteen here right but this

1402
01:25:05,630 --> 01:25:10,489
is actually diagonally symmetric so you

1403
01:25:08,869 --> 01:25:14,539
can see when we look at the number

1404
01:25:10,489 --> 01:25:19,039
pattern here the 318 one 64 right is

1405
01:25:14,539 --> 01:25:21,109
duplicated so the z pattern is like

1406
01:25:19,039 --> 01:25:23,029
really easy it doesn't even have

1407
01:25:21,109 --> 01:25:25,989
positive and negative versions of these

1408
01:25:23,029 --> 01:25:29,869
so the z pattern is like really basic

1409
01:25:25,989 --> 01:25:32,479
one two three four five six seven eight

1410
01:25:29,869 --> 01:25:39,289
nine ten so there's like ten values and

1411
01:25:32,479 --> 01:25:43,699
that's it so we're talking about ten

1412
01:25:39,289 --> 01:25:48,560
values here right that can possibly come

1413
01:25:43,699 --> 01:25:51,470
in we're talking about 12 or 24 that can

1414
01:25:48,560 --> 01:25:52,179
come in here hard to say how you want to

1415
01:25:51,470 --> 01:25:57,219
count that

1416
01:25:52,179 --> 01:26:05,469
I don't know and if you look at here

1417
01:25:57,219 --> 01:26:07,658
what you can see is the so trying to

1418
01:26:05,469 --> 01:26:09,760
kind of say this right so if you look at

1419
01:26:07,658 --> 01:26:11,710
what's going on here you can see that

1420
01:26:09,760 --> 01:26:13,510
the same thing is true about this that

1421
01:26:11,710 --> 01:26:16,230
was true about that so if you look at

1422
01:26:13,510 --> 01:26:23,100
what these values are it's exactly the

1423
01:26:16,229 --> 01:26:25,750
1224 thing again on the other side but

1424
01:26:23,100 --> 01:26:28,300
one of the weird things that you can

1425
01:26:25,750 --> 01:26:32,079
also see here is some of these values

1426
01:26:28,300 --> 01:26:40,210
are like the same value so like these

1427
01:26:32,079 --> 01:26:41,979
are the same as these right these or at

1428
01:26:40,210 --> 01:26:45,069
least this one is the same as this one

1429
01:26:41,979 --> 01:26:51,369
right to these levels or this one is the

1430
01:26:45,069 --> 01:26:55,738
same as as this one so like this appears

1431
01:26:51,369 --> 01:27:01,779
to be roughly the same set of values

1432
01:26:55,738 --> 01:27:04,959
right and so what we see is that the X

1433
01:27:01,779 --> 01:27:06,729
like although and this is what you would

1434
01:27:04,960 --> 01:27:09,520
expect because this is actually you know

1435
01:27:06,729 --> 01:27:11,799
it's a diamond pattern so the x and y

1436
01:27:09,520 --> 01:27:16,000
should be the same and they are so

1437
01:27:11,800 --> 01:27:21,390
actually these two both pull from the

1438
01:27:16,000 --> 01:27:21,390
same set of values right

1439
01:27:31,090 --> 01:27:37,970
so when you actually look at what our

1440
01:27:33,649 --> 01:27:39,859
inputs to our coefficients are while the

1441
01:27:37,970 --> 01:27:41,860
coefficients are kind of a bit wonky the

1442
01:27:39,859 --> 01:27:44,509
inputs are actually really regular

1443
01:27:41,859 --> 01:27:48,049
there's actually very few inputs there's

1444
01:27:44,510 --> 01:27:53,300
as little as twenty two separate values

1445
01:27:48,050 --> 01:27:55,130
going in here depending on how you want

1446
01:27:53,300 --> 01:27:57,380
to look at it so it's actually a

1447
01:27:55,130 --> 01:27:59,630
reduction that's pretty dramatic in

1448
01:27:57,380 --> 01:28:01,640
terms of what you would expect if these

1449
01:27:59,630 --> 01:28:04,579
were actually completely unique

1450
01:28:01,640 --> 01:28:07,310
functions because if you look you know

1451
01:28:04,579 --> 01:28:09,289
we've got three of those matrices so we

1452
01:28:07,310 --> 01:28:15,289
actually have one hundred and ninety two

1453
01:28:09,289 --> 01:28:18,019
values going in right but only twenty

1454
01:28:15,289 --> 01:28:20,329
two actual values that we see

1455
01:28:18,020 --> 01:28:22,910
differently and if we want to we could

1456
01:28:20,329 --> 01:28:25,729
call it thirty four values to give it

1457
01:28:22,909 --> 01:28:29,079
the maximum amount of expressivity if we

1458
01:28:25,729 --> 01:28:35,479
want to count the plus and minus

1459
01:28:29,079 --> 01:28:37,550
difference but right so there's a

1460
01:28:35,479 --> 01:28:42,399
tremendous amount of structure in that

1461
01:28:37,550 --> 01:28:42,400
input that we're seeing there

1462
01:28:51,609 --> 01:29:05,029
and so I don't actually know to what

1463
01:29:03,649 --> 01:29:09,439
extent we can take advantage of that but

1464
01:29:05,029 --> 01:29:11,029
it's worth noting that we're only

1465
01:29:09,439 --> 01:29:16,899
talking about the pairwise

1466
01:29:11,029 --> 01:29:20,210
multiplication between each of these

1467
01:29:16,899 --> 01:29:24,829
values and the values only get

1468
01:29:20,210 --> 01:29:26,929
multiplied interior to each other so in

1469
01:29:24,829 --> 01:29:29,229
terms of like what would happen with the

1470
01:29:26,929 --> 01:29:32,750
Z coefficient right

1471
01:29:29,229 --> 01:29:37,789
we know that the Z coefficient has 10

1472
01:29:32,750 --> 01:29:39,619
total values and if we so if we talk

1473
01:29:37,789 --> 01:29:43,939
about the total number of products there

1474
01:29:39,619 --> 01:29:49,039
are a hundred total products that can be

1475
01:29:43,939 --> 01:29:56,619
produced for this term right so even

1476
01:29:49,039 --> 01:30:00,649
though we technically have 4096

1477
01:29:56,619 --> 01:30:03,019
different products for producing there's

1478
01:30:00,649 --> 01:30:09,049
actually only a hundred versions of this

1479
01:30:03,020 --> 01:30:16,460
so it's 40 times less right in terms of

1480
01:30:09,050 --> 01:30:20,570
this term for this it's not so good

1481
01:30:16,460 --> 01:30:27,319
right for this it's 576 for these two

1482
01:30:20,569 --> 01:30:33,799
terms so it's like 576 576 and 100 in

1483
01:30:27,319 --> 01:30:38,750
terms of the possibilities so the actual

1484
01:30:33,800 --> 01:30:40,699
total number of possible terms we might

1485
01:30:38,750 --> 01:30:42,649
want need to compute here is you see as

1486
01:30:40,698 --> 01:30:44,839
drastically less than this but it's

1487
01:30:42,649 --> 01:30:47,389
unclear how we really take advantage of

1488
01:30:44,840 --> 01:30:52,279
that given that these numbers still are

1489
01:30:47,390 --> 01:30:54,980
quite large especially these so although

1490
01:30:52,279 --> 01:30:57,550
we could separate this math out in a way

1491
01:30:54,979 --> 01:30:59,379
that potentially allowed us to compute

1492
01:30:57,550 --> 01:31:04,270
fewer of these

1493
01:30:59,380 --> 01:31:08,520
I'm not sure to what extent we

1494
01:31:04,270 --> 01:31:08,520
necessarily care

1495
01:31:36,770 --> 01:31:39,770
so

1496
01:31:52,578 --> 01:32:02,210
so suppose I was to think about this

1497
01:31:57,948 --> 01:32:05,210
equation sort of the other way around

1498
01:32:02,210 --> 01:32:05,210
yeah

1499
01:32:05,250 --> 01:32:08,340
[Music]

1500
01:32:11,078 --> 01:32:20,558
I mean I'm just trying to think out loud

1501
01:32:16,689 --> 01:32:31,198
here so suppose you were to say well you

1502
01:32:20,559 --> 01:32:33,369
know we've got a matrix right I mean

1503
01:32:31,198 --> 01:32:35,348
just thinking about how you're gonna sum

1504
01:32:33,368 --> 01:32:38,759
these things together if we're thinking

1505
01:32:35,349 --> 01:32:40,750
about how this procedure actually works

1506
01:32:38,760 --> 01:32:44,170
effectively what you've got at the head

1507
01:32:40,750 --> 01:32:46,779
end is you're computing all the possible

1508
01:32:44,170 --> 01:32:48,578
ones of these right this is how we were

1509
01:32:46,779 --> 01:32:50,170
doing it originally now we're just

1510
01:32:48,578 --> 01:32:52,689
saying look take all the dot products

1511
01:32:50,170 --> 01:32:57,069
that you can using every combination of

1512
01:32:52,689 --> 01:33:01,238
a and B from our input vectors so you

1513
01:32:57,069 --> 01:33:05,289
know a and B are basically drawn from

1514
01:33:01,238 --> 01:33:09,939
these 64 vectors that we can have right

1515
01:33:05,289 --> 01:33:15,840
and so in terms of a transpose B that's

1516
01:33:09,939 --> 01:33:15,839
going to be 4096 inner products right

1517
01:33:16,889 --> 01:33:29,289
that we can generate and so out of this

1518
01:33:26,969 --> 01:33:34,020
4096 inner products that we can possibly

1519
01:33:29,289 --> 01:33:39,118
have which all of which we were taking

1520
01:33:34,020 --> 01:33:42,489
then our input right lines up with one

1521
01:33:39,118 --> 01:33:44,139
our input lines up with the B it's

1522
01:33:42,488 --> 01:33:46,899
basically saying look here's what the B

1523
01:33:44,139 --> 01:33:48,760
vectors would have been and so and our

1524
01:33:46,899 --> 01:33:51,250
output lines up with the a so we're

1525
01:33:48,760 --> 01:33:53,469
trying to basically say like if we had

1526
01:33:51,250 --> 01:33:57,069
an input coming on B and we want the

1527
01:33:53,469 --> 01:34:00,158
output going out of a you know how do we

1528
01:33:57,069 --> 01:34:04,960
produce each of those output values

1529
01:34:00,158 --> 01:34:10,629
right so there's 64 and they're taking

1530
01:34:04,960 --> 01:34:12,908
64 inputs so I'm trying to think if

1531
01:34:10,630 --> 01:34:16,210
there's another way to phrase that I

1532
01:34:12,908 --> 01:34:18,308
guess right so I'm trying to understand

1533
01:34:16,210 --> 01:34:23,109
if there's some other way that I could

1534
01:34:18,309 --> 01:34:24,820
produce that same result by perhaps

1535
01:34:23,109 --> 01:34:27,549
saying like

1536
01:34:24,819 --> 01:34:29,199
well rather than doing the combinatorics

1537
01:34:27,550 --> 01:34:30,970
is there some way I can just do each

1538
01:34:29,199 --> 01:34:39,250
half separately and then combine them

1539
01:34:30,970 --> 01:34:43,840
back together right so for example you

1540
01:34:39,250 --> 01:34:47,170
know could I do instead of 64 times 64

1541
01:34:43,840 --> 01:34:51,670
which is 4096 is there some way I can

1542
01:34:47,170 --> 01:34:54,460
just do 64 like plus 64 right June and

1543
01:34:51,670 --> 01:35:07,690
I'm saying like is there some way that I

1544
01:34:54,460 --> 01:35:11,500
could do a process on 1/2 where I pre

1545
01:35:07,689 --> 01:35:18,219
calculate a set of matrices that can be

1546
01:35:11,500 --> 01:35:24,189
then used by another output set right so

1547
01:35:18,220 --> 01:35:27,970
what I want to know there is if the if a

1548
01:35:24,189 --> 01:35:34,509
particular input cell right if I know

1549
01:35:27,970 --> 01:35:42,070
that that is a transpose B or ax BX + a

1550
01:35:34,510 --> 01:35:45,130
YB y plus AZ BZ if I know that cell

1551
01:35:42,069 --> 01:35:50,549
needs to be this and more broadly

1552
01:35:45,130 --> 01:35:54,069
speaking the entire matrix is just those

1553
01:35:50,550 --> 01:35:57,489
where the a value goes you know along

1554
01:35:54,069 --> 01:36:01,779
the the output side right and the input

1555
01:35:57,489 --> 01:36:07,000
value goes in here right um so if you

1556
01:36:01,779 --> 01:36:17,409
imagine this as instead of individual

1557
01:36:07,000 --> 01:36:18,609
cells rather just two matrices so just

1558
01:36:17,409 --> 01:36:24,970
trying to think this through in my head

1559
01:36:18,609 --> 01:36:28,559
so if we were to just try to generate

1560
01:36:24,970 --> 01:36:28,560
what each of these is going to be

1561
01:36:35,668 --> 01:36:43,019
imagine we just did it for one right so

1562
01:36:39,809 --> 01:36:45,479
take take this part out and imagine we

1563
01:36:43,019 --> 01:36:47,309
just did it for one and so what we're

1564
01:36:45,479 --> 01:36:51,439
trying to produce serious a transpose B

1565
01:36:47,309 --> 01:36:51,439
at a particular location right

1566
01:37:05,969 --> 01:37:20,198
if you imagined it looked like this and

1567
01:37:12,448 --> 01:37:22,029
I want to produce axbx here right then

1568
01:37:20,198 --> 01:37:23,799
it's sufficient to put all of my

1569
01:37:22,029 --> 01:37:25,599
different a because you know I I have to

1570
01:37:23,800 --> 01:37:32,050
give another index here but like so I

1571
01:37:25,600 --> 01:37:36,159
want to produce a IJ you know bij here

1572
01:37:32,050 --> 01:37:41,770
right and these are of course just

1573
01:37:36,158 --> 01:37:44,339
matrices full of those things so if I

1574
01:37:41,770 --> 01:37:44,340
wanted to produce

1575
01:37:44,488 --> 01:37:55,809
one of one of these results where I have

1576
01:37:50,800 --> 01:37:58,510
the color value in each case right so

1577
01:37:55,810 --> 01:38:00,789
this this is this then again would be

1578
01:37:58,510 --> 01:38:04,150
multiplied by whatever my color value

1579
01:38:00,789 --> 01:38:06,039
input is to produce the actual values I

1580
01:38:04,149 --> 01:38:09,009
mean it's this is actually just a scalar

1581
01:38:06,039 --> 01:38:11,590
so that wouldn't really matter but so

1582
01:38:09,010 --> 01:38:15,460
each one of these bitmaps basically

1583
01:38:11,590 --> 01:38:17,949
would just have the X vectors here and

1584
01:38:15,460 --> 01:38:20,649
then we're going to do that matrix

1585
01:38:17,948 --> 01:38:30,669
multiply to produce these these values

1586
01:38:20,649 --> 01:38:33,039
right the source of the exponentiation

1587
01:38:30,670 --> 01:38:35,380
in terms of how many of these products

1588
01:38:33,039 --> 01:38:39,908
we actually have to do is coming from

1589
01:38:35,380 --> 01:38:41,920
that matrix multiplied right so for each

1590
01:38:39,908 --> 01:38:50,079
of these locations because there's 8 by

1591
01:38:41,920 --> 01:38:53,319
8 for each of these locations i have to

1592
01:38:50,079 --> 01:38:56,880
do 1 2 3 4 5 so i have to do 8

1593
01:38:53,319 --> 01:39:02,408
multiplies to produce this value right

1594
01:38:56,880 --> 01:39:05,699
so for 64 slots i have to do 8

1595
01:39:02,408 --> 01:39:05,698
multiplies each

1596
01:39:07,260 --> 01:39:10,890
or 5:12

1597
01:39:41,779 --> 01:39:56,729
so yeah I don't know because that all

1598
01:39:54,119 --> 01:39:58,979
that gives you then to is it only really

1599
01:39:56,729 --> 01:40:12,659
gives you the contribution from that

1600
01:39:58,979 --> 01:40:14,698
particular cell hmm so I'm not seeing

1601
01:40:12,659 --> 01:40:15,869
anything yet I think this is going to be

1602
01:40:14,698 --> 01:40:17,219
something that's going to require a

1603
01:40:15,869 --> 01:40:19,948
little bit more thought which of course

1604
01:40:17,219 --> 01:40:21,390
we'll have all week to do in the sense

1605
01:40:19,948 --> 01:40:28,500
that you know it'll kind of be kicking

1606
01:40:21,390 --> 01:40:29,820
around at the background so I think I

1607
01:40:28,500 --> 01:40:32,819
might just end it there today because I

1608
01:40:29,819 --> 01:40:34,670
didn't have any good ideas we do have a

1609
01:40:32,819 --> 01:40:37,380
nice way of looking at the matrix now

1610
01:40:34,670 --> 01:40:40,260
and looking at all the different pieces

1611
01:40:37,380 --> 01:40:42,840
of it so let's just leave it there

1612
01:40:40,260 --> 01:40:45,600
ruminate it over the ruminate over the

1613
01:40:42,840 --> 01:40:46,770
week and then next weekend we'll try to

1614
01:40:45,600 --> 01:40:48,210
figure out what our approach is going to

1615
01:40:46,770 --> 01:40:49,469
be for looking at how to calculate this

1616
01:40:48,210 --> 01:40:53,310
more efficiently because thinking it's a

1617
01:40:49,469 --> 01:40:56,430
full second to do this and that's just

1618
01:40:53,310 --> 01:40:57,930
too much so go to a brief Q&amp;A now or if

1619
01:40:56,430 --> 01:41:00,659
anyone has any suggestions of what we

1620
01:40:57,930 --> 01:41:04,409
might want to think about we can and

1621
01:41:00,659 --> 01:41:06,479
then hopefully next week we can look at

1622
01:41:04,409 --> 01:41:09,210
some strategies because it looks pretty

1623
01:41:06,479 --> 01:41:10,589
tough this is this is it's not

1624
01:41:09,210 --> 01:41:11,909
insurmountable by any stretch of the

1625
01:41:10,590 --> 01:41:15,050
imagination but it does look like a

1626
01:41:11,909 --> 01:41:15,050
matrix we're gonna have to think about

1627
01:41:34,289 --> 01:41:40,539
couldn't at least the tetrahedron unit

1628
01:41:37,720 --> 01:41:47,020
vector function use a lookup table and

1629
01:41:40,539 --> 01:41:57,880
lerp sorry I'm I'm not sure what what

1630
01:41:47,020 --> 01:42:04,450
problem is that trying to solve what

1631
01:41:57,880 --> 01:42:06,579
would that be doing for us I guess is I

1632
01:42:04,449 --> 01:42:12,539
just I'm not sure what that not sure

1633
01:42:06,579 --> 01:42:12,539
what that would help with exactly

1634
01:42:37,760 --> 01:42:45,409
oh yes so that function never gets never

1635
01:42:41,329 --> 01:42:50,019
gets called it's strictly used in

1636
01:42:45,409 --> 01:42:53,000
building the look-up tables it's it's

1637
01:42:50,020 --> 01:42:55,430
it's used to generate look-up tables but

1638
01:42:53,000 --> 01:42:59,029
it doesn't get called the actual chain

1639
01:42:55,430 --> 01:43:01,730
so just to give you hoops just to give

1640
01:42:59,029 --> 01:43:06,079
you a little more of a insight into that

1641
01:43:01,729 --> 01:43:09,559
so here's the actual routine which what

1642
01:43:06,079 --> 01:43:12,859
we're looking at speeding up so it's

1643
01:43:09,560 --> 01:43:15,080
here and so what you can see is it just

1644
01:43:12,859 --> 01:43:19,279
loads weights out of this diffuse weight

1645
01:43:15,079 --> 01:43:25,309
table and it just does the ops directly

1646
01:43:19,279 --> 01:43:29,059
right and so it doesn't ever call that

1647
01:43:25,310 --> 01:43:33,739
at all this routines kind of sucks in

1648
01:43:29,060 --> 01:43:35,360
separate ways but it's not dependent on

1649
01:43:33,738 --> 01:43:39,589
that function because that function has

1650
01:43:35,359 --> 01:43:42,469
already been baked into this map so we

1651
01:43:39,590 --> 01:43:44,090
are never calling it the problem with

1652
01:43:42,470 --> 01:43:47,180
this that we're trying to look at right

1653
01:43:44,090 --> 01:43:48,739
now because we could try to improve I

1654
01:43:47,180 --> 01:43:54,200
should probably if this back-end by the

1655
01:43:48,738 --> 01:43:57,199
way this part could be implemented more

1656
01:43:54,199 --> 01:43:58,939
efficiently just as is although it's not

1657
01:43:57,199 --> 01:44:01,429
horrible as it is right now it could be

1658
01:43:58,939 --> 01:44:04,899
improved right

1659
01:44:01,430 --> 01:44:08,860
but what we really want to do is is

1660
01:44:04,899 --> 01:44:13,129
tackle how many of these there are right

1661
01:44:08,859 --> 01:44:15,829
so you can see here we've got 64 of

1662
01:44:13,130 --> 01:44:16,730
these right you can see this is looping

1663
01:44:15,829 --> 01:44:20,359
over eight things

1664
01:44:16,729 --> 01:44:23,629
this is looping over eight things and

1665
01:44:20,359 --> 01:44:26,329
then we've got two of these so it's just

1666
01:44:23,630 --> 01:44:28,579
it's a hundred and twenty eight of these

1667
01:44:26,329 --> 01:44:32,390
and that's just of this whole block

1668
01:44:28,579 --> 01:44:34,729
right it's not good so what I was hoping

1669
01:44:32,390 --> 01:44:36,860
for is a way of breaking one of these

1670
01:44:34,729 --> 01:44:39,889
out so maybe like if we could get rid of

1671
01:44:36,859 --> 01:44:43,639
this loop right by doing two passes

1672
01:44:39,890 --> 01:44:46,130
right so then we could get down to more

1673
01:44:43,640 --> 01:44:49,750
like 32 iterations of the loop instead

1674
01:44:46,130 --> 01:44:52,920
of 128 right

1675
01:44:49,750 --> 01:45:02,520
so that we're just trying to break that

1676
01:44:52,920 --> 01:45:02,520
squared iteration problem if we can

1677
01:45:21,989 --> 01:45:31,109
all right I guess no questions so we

1678
01:45:25,710 --> 01:45:32,220
will wrap it up thank you everyone for

1679
01:45:31,109 --> 01:45:33,839
joining me for the episode of handmade

1680
01:45:32,220 --> 01:45:35,310
hero it's been a pleasure coding with us

1681
01:45:33,840 --> 01:45:36,840
always if you would like to file in

1682
01:45:35,310 --> 01:45:39,210
series at home you can always peer to

1683
01:45:36,840 --> 01:45:40,560
the game on handmade hero org and it

1684
01:45:39,210 --> 01:45:42,180
comes with a source code so you can

1685
01:45:40,560 --> 01:45:44,460
follow along with it at home maybe you

1686
01:45:42,180 --> 01:45:46,230
want to try and figure out a separable

1687
01:45:44,460 --> 01:45:47,399
filter that's approximates the filter we

1688
01:45:46,229 --> 01:45:48,779
have we're not even a separate I'll just

1689
01:45:47,399 --> 01:45:50,759
figure out a good mathematical

1690
01:45:48,779 --> 01:45:52,009
optimization to the process we're doing

1691
01:45:50,760 --> 01:45:56,670
that breaks some of those iterations

1692
01:45:52,010 --> 01:45:58,170
right that's it for today hope see you

1693
01:45:56,670 --> 01:46:00,090
back here next week when I will be

1694
01:45:58,170 --> 01:46:01,710
trying the same thing myself hopefully

1695
01:46:00,090 --> 01:46:03,539
after a week of thinking about a little

1696
01:46:01,710 --> 01:46:05,399
bit more we'll have some idea of what we

1697
01:46:03,539 --> 01:46:06,840
should be doing till then have fun

1698
01:46:05,399 --> 01:46:07,259
program everyone and I'll see you on the

1699
01:46:06,840 --> 01:46:09,949
Internet

1700
01:46:07,260 --> 01:46:09,949
pinkies everybody

