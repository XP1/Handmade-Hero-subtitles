1
00:00:01,939 --> 00:00:05,580
hello everybody and welcome to hand made

2
00:00:04,200 --> 00:00:07,589
here oh sure we tried a complete game

3
00:00:05,580 --> 00:00:09,870
live on stream before I get started

4
00:00:07,589 --> 00:00:13,740
today I just wanted to mention that

5
00:00:09,869 --> 00:00:17,129
after today's normal programming stream

6
00:00:13,740 --> 00:00:19,439
we will be doing a special Sunday stream

7
00:00:17,129 --> 00:00:23,129
where we're gonna head over to Jonathan

8
00:00:19,439 --> 00:00:24,719
blows channel on Twitch and we'll

9
00:00:23,129 --> 00:00:26,719
probably do like a squad stream so you

10
00:00:24,719 --> 00:00:29,339
can easily switch back and forth between

11
00:00:26,719 --> 00:00:31,678
feeds or something I don't exactly know

12
00:00:29,339 --> 00:00:33,359
how we'll get that working optimally but

13
00:00:31,678 --> 00:00:36,509
we're gonna go talk to Jonathan Blow

14
00:00:33,359 --> 00:00:38,100
about whatever we whatever we end up

15
00:00:36,509 --> 00:00:39,719
talking about really it'll be it'll

16
00:00:38,100 --> 00:00:41,700
won't be a constrained conversation but

17
00:00:39,719 --> 00:00:44,850
we're gonna start talking about some

18
00:00:41,700 --> 00:00:46,410
parser stuff and really it's just an

19
00:00:44,850 --> 00:00:49,079
excuse to get together and talk about

20
00:00:46,409 --> 00:00:51,269
some programming things because well

21
00:00:49,079 --> 00:00:53,698
streaming gets a little bit boring after

22
00:00:51,270 --> 00:00:55,410
a while and it helps if you can talk to

23
00:00:53,698 --> 00:00:56,399
other programmers about stuff so I'm

24
00:00:55,409 --> 00:00:58,108
looking forward to it

25
00:00:56,399 --> 00:01:00,299
hopefully the video feed stuff will work

26
00:00:58,109 --> 00:01:03,059
well enough and won't be too much of an

27
00:01:00,299 --> 00:01:05,908
issue but will we make in the best of

28
00:01:03,058 --> 00:01:07,709
the kovat 19 situation and and trying to

29
00:01:05,909 --> 00:01:10,200
do a little Sunday programming stream

30
00:01:07,709 --> 00:01:13,109
where we can hang out and learn some

31
00:01:10,200 --> 00:01:15,240
cool stuff from John about you know

32
00:01:13,109 --> 00:01:16,829
basically like compiler implementation

33
00:01:15,239 --> 00:01:18,239
stuff at first and then if we if we end

34
00:01:16,829 --> 00:01:20,728
up on other topics we end up in other

35
00:01:18,239 --> 00:01:21,750
topics but that's the idea so I'm

36
00:01:20,728 --> 00:01:24,599
looking forward to it so stick around

37
00:01:21,750 --> 00:01:26,640
for that and you can you know either

38
00:01:24,599 --> 00:01:32,569
watch this channel or John's channel is

39
00:01:26,640 --> 00:01:34,159
twitch.tv slash naysayer 88 na y sa Y e

40
00:01:32,569 --> 00:01:37,048
r88

41
00:01:34,159 --> 00:01:39,840
so if you you know want to catch that

42
00:01:37,049 --> 00:01:42,630
stream you can come to either channel

43
00:01:39,840 --> 00:01:45,750
and we'll we'll figure it out so it's

44
00:01:42,629 --> 00:01:48,328
it's this dream right here so that's

45
00:01:45,750 --> 00:01:49,890
what's going on today and that's all

46
00:01:48,328 --> 00:01:51,750
that's the only public service

47
00:01:49,890 --> 00:01:54,090
announcement I had there so let's go

48
00:01:51,750 --> 00:01:57,590
ahead and get started programming on

49
00:01:54,090 --> 00:02:00,210
yesterday's stream I basically wanted to

50
00:01:57,590 --> 00:02:02,040
kind of clean up the way the full cast

51
00:02:00,209 --> 00:02:04,679
code was working and that went pretty

52
00:02:02,040 --> 00:02:07,560
well it's at a point now where we have

53
00:02:04,680 --> 00:02:09,509
our our input like sampling information

54
00:02:07,560 --> 00:02:12,599
is now well aligned to what we're

55
00:02:09,508 --> 00:02:14,669
actually trying to do and so we're

56
00:02:12,599 --> 00:02:16,710
correctly like sampling our octahedral

57
00:02:14,669 --> 00:02:19,679
Maps I think now with a good stochastic

58
00:02:16,710 --> 00:02:23,969
sampling the guarantees that we sample

59
00:02:19,680 --> 00:02:26,969
one octahedral pixel one ray out of each

60
00:02:23,969 --> 00:02:29,340
octahedral pixel every frame and that we

61
00:02:26,969 --> 00:02:31,699
jitter those pixels in a way that like

62
00:02:29,340 --> 00:02:35,370
uniformly covers the sphere over time

63
00:02:31,699 --> 00:02:38,489
pretty well and on any given frame so

64
00:02:35,370 --> 00:02:40,230
I'm pretty excited about that and I I

65
00:02:38,490 --> 00:02:41,370
think that worked pretty well and if you

66
00:02:40,229 --> 00:02:42,959
look at the way the lighting is working

67
00:02:41,370 --> 00:02:45,210
now I think it's going pretty good so

68
00:02:42,960 --> 00:02:47,490
really what I want to do is try to

69
00:02:45,210 --> 00:02:49,560
accelerate the Ray casting now just take

70
00:02:47,490 --> 00:02:51,600
a look at where we're slow maybe why

71
00:02:49,560 --> 00:02:54,420
we're slow what are our options for

72
00:02:51,599 --> 00:02:55,799
maybe speeding things up and then we

73
00:02:54,419 --> 00:02:57,869
have to move on to a lighting quality

74
00:02:55,800 --> 00:02:59,670
pass so basically like get the

75
00:02:57,870 --> 00:03:01,830
performance of the ray caster going well

76
00:02:59,669 --> 00:03:05,819
because that's gonna pretty much be

77
00:03:01,830 --> 00:03:06,960
unrelated to the quality well the more

78
00:03:05,819 --> 00:03:08,310
ways you can cast the better quality

79
00:03:06,960 --> 00:03:10,500
obviously so it's not completely

80
00:03:08,310 --> 00:03:13,199
unrelated to the quality but what I mean

81
00:03:10,500 --> 00:03:15,449
to say is our decisions about how to

82
00:03:13,199 --> 00:03:18,599
compute the lighting equations are not

83
00:03:15,449 --> 00:03:20,699
going to be particularly relevant to how

84
00:03:18,599 --> 00:03:22,379
we traced Ray's quickly we know that we

85
00:03:20,699 --> 00:03:24,569
need to trace our rays

86
00:03:22,379 --> 00:03:26,729
quickly and accurately in order to

87
00:03:24,569 --> 00:03:28,560
produce good lighting results but we

88
00:03:26,729 --> 00:03:30,599
don't really have those two systems are

89
00:03:28,560 --> 00:03:32,789
not tied together so we should be able

90
00:03:30,599 --> 00:03:37,159
to optimize our ray tracer without any

91
00:03:32,789 --> 00:03:40,049
fear of causing problems for optimum

92
00:03:37,159 --> 00:03:41,699
improving the lighting equation

93
00:03:40,050 --> 00:03:44,250
computations which is sort of a separate

94
00:03:41,699 --> 00:03:45,750
issue and our lighting is already

95
00:03:44,250 --> 00:03:47,430
looking pretty good the main thing I'm

96
00:03:45,750 --> 00:03:49,710
worried about is doing a little bit of

97
00:03:47,430 --> 00:03:51,930
smoothing so you don't see voxel edges

98
00:03:49,710 --> 00:03:54,599
as much which is thing one and then the

99
00:03:51,930 --> 00:03:57,030
other thing is well some tone mapping

100
00:03:54,599 --> 00:03:58,859
but also figuring out why we're getting

101
00:03:57,030 --> 00:04:01,050
some of the lighting feedback like for

102
00:03:58,860 --> 00:04:03,840
example down here you can kind of see

103
00:04:01,050 --> 00:04:07,350
that simple lights tend to really flood

104
00:04:03,840 --> 00:04:09,539
out the rooms down here and again like

105
00:04:07,349 --> 00:04:11,280
some of this is I think has to do with

106
00:04:09,539 --> 00:04:13,739
also how we're constructing the room so

107
00:04:11,280 --> 00:04:17,988
there's a lot of lighting quality things

108
00:04:13,740 --> 00:04:21,569
I want to look at as we go and you know

109
00:04:17,988 --> 00:04:23,789
like I said III I don't think that will

110
00:04:21,569 --> 00:04:25,769
be a huge problem for us to get going

111
00:04:23,790 --> 00:04:26,250
but it's a separate problem so I want to

112
00:04:25,769 --> 00:04:29,759
leave it

113
00:04:26,250 --> 00:04:31,410
now all right so if we take a look I

114
00:04:29,759 --> 00:04:34,349
guess I probably shouldn't close that if

115
00:04:31,410 --> 00:04:38,189
we take a look at the lighting debug

116
00:04:34,350 --> 00:04:40,740
information so here's sort of a heads-up

117
00:04:38,189 --> 00:04:43,889
display if you will of what's going on

118
00:04:40,740 --> 00:04:45,120
our raise / probe is now locked 64 which

119
00:04:43,889 --> 00:04:51,269
is exactly what I want and so we're

120
00:04:45,120 --> 00:04:52,800
casting out a 64 a 64 points fear if you

121
00:04:51,269 --> 00:04:54,779
will and that sphere like rotates

122
00:04:52,800 --> 00:04:57,689
through over time so that we get more

123
00:04:54,779 --> 00:04:59,519
coverage and that corresponds exactly

124
00:04:57,689 --> 00:05:01,529
the octahedral map so every pixel of the

125
00:04:59,519 --> 00:05:03,149
octahedral map gets one cast out of it

126
00:05:01,529 --> 00:05:05,489
and the reason I wanted to do it that

127
00:05:03,149 --> 00:05:07,469
way is just because I felt like that's

128
00:05:05,490 --> 00:05:09,150
the cleanest way to write it out it may

129
00:05:07,470 --> 00:05:11,070
not be the best coverage way to do

130
00:05:09,149 --> 00:05:13,319
things and we could consider changing

131
00:05:11,069 --> 00:05:14,730
how that done in the future but I kind

132
00:05:13,319 --> 00:05:17,009
of wanted to start with that streamline

133
00:05:14,730 --> 00:05:19,710
process so we could get any code gunk

134
00:05:17,009 --> 00:05:21,509
there out of the way you can then take a

135
00:05:19,709 --> 00:05:24,299
look at what we're doing here you can

136
00:05:21,509 --> 00:05:27,360
see that in general we visit about five

137
00:05:24,300 --> 00:05:28,230
leaves per cast what that means assuming

138
00:05:27,360 --> 00:05:29,669
that we're still collecting those

139
00:05:28,230 --> 00:05:30,900
statistics properly which we'll have to

140
00:05:29,668 --> 00:05:32,939
do a little bit of a verification to

141
00:05:30,899 --> 00:05:35,819
make sure we don't have any errant stuff

142
00:05:32,939 --> 00:05:37,889
we missed but what these statistics tell

143
00:05:35,819 --> 00:05:44,339
us is that we're generally testing about

144
00:05:37,889 --> 00:05:46,889
five cubes for every cast now that's a

145
00:05:44,339 --> 00:05:49,439
pretty reasonable number there I'm not

146
00:05:46,889 --> 00:05:51,930
too worried about that number and you

147
00:05:49,439 --> 00:05:54,209
can also see like how many partitions we

148
00:05:51,930 --> 00:05:56,310
visited per leaves cast but this number

149
00:05:54,209 --> 00:05:57,389
is a little more troubling this 24

150
00:05:56,310 --> 00:06:00,389
partitions for cast

151
00:05:57,389 --> 00:06:04,409
I believe that means we go down 24

152
00:06:00,389 --> 00:06:07,409
checks before we actually get to do an

153
00:06:04,410 --> 00:06:09,150
actual test right so we're spending a

154
00:06:07,410 --> 00:06:12,060
lot of time navigating our bounding

155
00:06:09,149 --> 00:06:15,870
hierarchy and you know that that might

156
00:06:12,060 --> 00:06:19,079
not be so good right and there's

157
00:06:15,870 --> 00:06:22,019
probably things we'll want to do to make

158
00:06:19,079 --> 00:06:24,930
that work better right it's hard to say

159
00:06:22,019 --> 00:06:28,228
but you know we we have some issues here

160
00:06:24,930 --> 00:06:29,819
so we kind of need to look at how we can

161
00:06:28,228 --> 00:06:32,939
get these numbers to look a little bit

162
00:06:29,819 --> 00:06:37,110
better because generally speaking I

163
00:06:32,939 --> 00:06:39,629
would assume and we can try to we can

164
00:06:37,110 --> 00:06:42,900
try to make you know a little bit

165
00:06:39,629 --> 00:06:44,730
we can try to prove this a little bit

166
00:06:42,899 --> 00:06:48,810
more to ourselves as we investigate the

167
00:06:44,730 --> 00:06:53,030
code but trying to initiate about a

168
00:06:48,810 --> 00:06:56,370
hundred thousand casts into the system a

169
00:06:53,029 --> 00:07:00,029
hundred thousand Kasper frame spread

170
00:06:56,370 --> 00:07:03,660
over like at least six processors is not

171
00:07:00,029 --> 00:07:05,699
that many castes right so if you take a

172
00:07:03,660 --> 00:07:08,340
look at what we're asking the computer

173
00:07:05,699 --> 00:07:09,899
to do here and we come in and we say all

174
00:07:08,339 --> 00:07:12,209
right we've got you know somewhere

175
00:07:09,899 --> 00:07:16,529
around a hundred thousand casts we're

176
00:07:12,209 --> 00:07:19,739
splitting that out across six processors

177
00:07:16,529 --> 00:07:24,119
so we're asking for you know 20 grand 15

178
00:07:19,740 --> 00:07:26,160
grand in terms of the number of casts

179
00:07:24,120 --> 00:07:28,829
and if we assume that the processor is

180
00:07:26,160 --> 00:07:31,770
is gonna be you know somewhere north of

181
00:07:28,829 --> 00:07:34,769
2 gigahertz always sometimes as high as

182
00:07:31,769 --> 00:07:39,000
3 gigahertz you know if we did want that

183
00:07:34,769 --> 00:07:40,859
to be at you know at a reasonable 60

184
00:07:39,000 --> 00:07:44,370
frames a second let's say and we're just

185
00:07:40,860 --> 00:07:49,259
looking at what that's going to imply so

186
00:07:44,370 --> 00:07:51,269
you know we're talking about a about 33

187
00:07:49,259 --> 00:07:55,829
million right you know somewhere in the

188
00:07:51,269 --> 00:07:58,319
30 million cycles range for how many

189
00:07:55,829 --> 00:08:02,069
each of those has so if we're talking

190
00:07:58,319 --> 00:08:05,659
about you know if we're basically

191
00:08:02,069 --> 00:08:09,899
talking about something where 2,000 ops

192
00:08:05,660 --> 00:08:16,260
per ray is what we would need at 60

193
00:08:09,899 --> 00:08:20,759
frames a second it's not the end of the

194
00:08:16,259 --> 00:08:24,480
world as you can see it's not as fluffy

195
00:08:20,759 --> 00:08:26,789
as you would want right again these

196
00:08:24,480 --> 00:08:28,170
numbers they multiply out in in ways

197
00:08:26,790 --> 00:08:29,700
that are kind of non-intuitive when you

198
00:08:28,170 --> 00:08:32,460
think about how fast a modern processor

199
00:08:29,699 --> 00:08:34,409
is it sounds really fast but once you

200
00:08:32,460 --> 00:08:36,120
talk about having to do something at 60

201
00:08:34,409 --> 00:08:37,139
frames a second suddenly it whittles

202
00:08:36,120 --> 00:08:38,519
down quite a bit

203
00:08:37,139 --> 00:08:39,899
right and we were talking about

204
00:08:38,519 --> 00:08:41,519
something like ray tracing where you

205
00:08:39,899 --> 00:08:44,699
have a lot of rays that you're trying to

206
00:08:41,519 --> 00:08:47,779
cast right and so you've got just a

207
00:08:44,700 --> 00:08:51,660
tremendous amount of work involved there

208
00:08:47,779 --> 00:08:52,860
you kind of have to to be very judicious

209
00:08:51,659 --> 00:08:54,539
about it

210
00:08:52,860 --> 00:08:56,250
so when you think about the fact that

211
00:08:54,539 --> 00:08:57,779
you know if I if I did that back of the

212
00:08:56,250 --> 00:08:59,669
envelope math right and we should

213
00:08:57,779 --> 00:09:01,199
probably do a more serious investigation

214
00:08:59,669 --> 00:09:02,459
of it where I actually double-check and

215
00:09:01,200 --> 00:09:07,490
make sure I've got it right a little bit

216
00:09:02,460 --> 00:09:10,920
later on but if we take a look in here

217
00:09:07,490 --> 00:09:15,090
as to how our full cast is actually

218
00:09:10,919 --> 00:09:18,120
working so you can see what the routine

219
00:09:15,090 --> 00:09:20,790
looks like you can sort of see that you

220
00:09:18,120 --> 00:09:22,169
know everything that we care about for

221
00:09:20,789 --> 00:09:24,870
the most part that's probably going to

222
00:09:22,169 --> 00:09:27,990
be slow happens inside this raycast

223
00:09:24,870 --> 00:09:30,840
call right so this think here if this

224
00:09:27,990 --> 00:09:34,310
routine here that does for wide raycast

225
00:09:30,840 --> 00:09:39,210
at a time that's gonna be the thing that

226
00:09:34,309 --> 00:09:44,909
really ends up being you know this is

227
00:09:39,210 --> 00:09:48,269
where all the times gonna be spent and

228
00:09:44,909 --> 00:09:49,949
so if we look at what's going on in this

229
00:09:48,269 --> 00:09:53,279
function you can kind of start to see

230
00:09:49,950 --> 00:09:56,210
why we're getting this problem if you

231
00:09:53,279 --> 00:09:59,039
look at what happens inside the

232
00:09:56,210 --> 00:10:01,400
raycasting you can kind of see that

233
00:09:59,039 --> 00:10:03,809
although we have a relatively

234
00:10:01,399 --> 00:10:06,779
straightforward piece of code I mean the

235
00:10:03,809 --> 00:10:10,679
number of ops here is actually pretty

236
00:10:06,779 --> 00:10:13,919
small the problem is we've got a fairly

237
00:10:10,679 --> 00:10:17,609
weighty set of things going on around it

238
00:10:13,919 --> 00:10:22,740
so this stack traversal here and these

239
00:10:17,610 --> 00:10:26,399
you know sort of the child ops situation

240
00:10:22,740 --> 00:10:30,090
going on here we're just you know we're

241
00:10:26,399 --> 00:10:31,439
getting a lot of box data right like

242
00:10:30,090 --> 00:10:36,570
we're basically pulling a lot of box

243
00:10:31,440 --> 00:10:38,250
data out here and we are suffering for

244
00:10:36,570 --> 00:10:40,770
the fact that you know when we're doing

245
00:10:38,250 --> 00:10:42,870
these when we're doing this we've got to

246
00:10:40,769 --> 00:10:45,659
push a lot of things onto the stack pop

247
00:10:42,870 --> 00:10:46,980
things off the stack and so on right so

248
00:10:45,659 --> 00:10:50,189
the fundamental way that this thing

249
00:10:46,980 --> 00:10:52,860
works and by the way this is probably

250
00:10:50,190 --> 00:10:57,780
bad sticking and if in here is not a

251
00:10:52,860 --> 00:11:01,519
good thing in fact it's a very bad thing

252
00:10:57,779 --> 00:11:04,589
so we probably want to do something

253
00:11:01,519 --> 00:11:06,389
different than this right like

254
00:11:04,590 --> 00:11:09,000
this is probably not code you really

255
00:11:06,389 --> 00:11:13,080
want to have you don't want any kind of

256
00:11:09,000 --> 00:11:14,879
ifs in that aren't essential inside your

257
00:11:13,080 --> 00:11:17,639
your main loop so I'm gonna I'm gonna go

258
00:11:14,879 --> 00:11:19,110
ahead and just nerf these real quick I

259
00:11:17,639 --> 00:11:20,759
don't think that would affect our

260
00:11:19,110 --> 00:11:22,350
runtime much but I just want to make

261
00:11:20,759 --> 00:11:26,730
sure that that we're getting those out

262
00:11:22,350 --> 00:11:29,399
of there so anyway all of that is what's

263
00:11:26,730 --> 00:11:32,539
happening in here and we're getting you

264
00:11:29,399 --> 00:11:35,338
know a total time here that's

265
00:11:32,539 --> 00:11:37,379
represented by this line so pretty much

266
00:11:35,339 --> 00:11:39,240
all the work we're doing that we care

267
00:11:37,379 --> 00:11:40,919
abouts in here and this work here for

268
00:11:39,240 --> 00:11:43,110
compute light propagation we already

269
00:11:40,919 --> 00:11:45,179
optimized a bit so it's already kind of

270
00:11:43,110 --> 00:11:46,980
down in the lower end of things but it

271
00:11:45,179 --> 00:11:49,319
could start to become significant as

272
00:11:46,980 --> 00:11:51,028
full cast becomes optimized so we really

273
00:11:49,320 --> 00:11:53,339
have to optimization targets and they're

274
00:11:51,028 --> 00:11:55,769
the two top things here everything else

275
00:11:53,339 --> 00:11:58,589
underneath is not really relevant to us

276
00:11:55,769 --> 00:12:02,069
and I also don't know to what extent

277
00:11:58,589 --> 00:12:03,930
we're doing a vsync here I think we're

278
00:12:02,070 --> 00:12:07,140
not let me see what happens if I turn

279
00:12:03,929 --> 00:12:10,739
that on I don't see really any

280
00:12:07,139 --> 00:12:13,620
difference so I don't know if we're

281
00:12:10,740 --> 00:12:15,480
actually getting I don't know to what

282
00:12:13,620 --> 00:12:17,370
extent we're V syncing and what extent

283
00:12:15,480 --> 00:12:19,620
we're not like I don't know if we're

284
00:12:17,370 --> 00:12:21,539
getting held up much by the processor

285
00:12:19,620 --> 00:12:27,419
here or not the fact that frame displays

286
00:12:21,539 --> 00:12:30,929
stays the same take a look here it's a

287
00:12:27,419 --> 00:12:34,049
little bit hard to say so so I don't

288
00:12:30,929 --> 00:12:35,699
really know exactly what's going on

289
00:12:34,049 --> 00:12:37,979
there I don't know what we're what we're

290
00:12:35,700 --> 00:12:39,030
seeing here so that's that's that's

291
00:12:37,980 --> 00:12:40,259
something we maybe have to look at a

292
00:12:39,029 --> 00:12:42,870
little bit later but either way it

293
00:12:40,259 --> 00:12:45,179
doesn't matter the point is in this case

294
00:12:42,870 --> 00:12:48,060
we're gonna try and be working on this

295
00:12:45,179 --> 00:12:50,159
top line number and I don't really know

296
00:12:48,059 --> 00:12:54,389
that there's much we can do about this

297
00:12:50,159 --> 00:13:00,419
value here so this six one four four for

298
00:12:54,389 --> 00:13:04,370
the full cast I mean there are some

299
00:13:00,419 --> 00:13:04,370
things we could do right

300
00:13:06,850 --> 00:13:14,709
if we wanted to we could do some kind of

301
00:13:10,839 --> 00:13:18,429
an inter leave where we only did every

302
00:13:14,708 --> 00:13:25,238
other one of our lights of our light

303
00:13:18,428 --> 00:13:27,249
foxholes I mean thinking it through that

304
00:13:25,239 --> 00:13:30,160
top line number which is how many times

305
00:13:27,249 --> 00:13:32,199
we call full cast we could use some kind

306
00:13:30,159 --> 00:13:34,719
of a stipple pattern where we basically

307
00:13:32,198 --> 00:13:36,998
say look we're gonna do like even and

308
00:13:34,720 --> 00:13:39,639
odds in like a checkerboard pattern or

309
00:13:36,999 --> 00:13:42,399
something and we just won't actually

310
00:13:39,639 --> 00:13:45,609
update anything that's outside the

311
00:13:42,399 --> 00:13:47,889
checkerboard pattern so and we flipped

312
00:13:45,609 --> 00:13:51,519
the checkerboard pattern on every frame

313
00:13:47,889 --> 00:13:54,009
right so we could do something like that

314
00:13:51,519 --> 00:13:56,709
and that would also improve the lighting

315
00:13:54,009 --> 00:13:59,199
speed by enough to get us to 60 frames a

316
00:13:56,708 --> 00:14:09,909
second potentially I just don't know

317
00:13:59,198 --> 00:14:13,118
what it would look like exactly but yeah

318
00:14:09,909 --> 00:14:15,908
I mean I'm kind of curious let's take a

319
00:14:13,119 --> 00:14:21,158
look at what that would entail so you

320
00:14:15,908 --> 00:14:22,479
know I don't think we have really

321
00:14:21,158 --> 00:14:24,220
anything like that in the code at the

322
00:14:22,479 --> 00:14:26,129
moment but if you imagine what what

323
00:14:24,220 --> 00:14:29,528
would you know what that would look like

324
00:14:26,129 --> 00:14:31,239
so let me let me get the test sphere and

325
00:14:29,528 --> 00:14:33,578
move that down I don't want that in the

326
00:14:31,239 --> 00:14:36,278
way there I'm gonna put that over here

327
00:14:33,578 --> 00:14:38,738
all right so if we take a look at what's

328
00:14:36,278 --> 00:14:42,278
happening in full cast you can see here

329
00:14:38,739 --> 00:14:44,918
that for each one of these full casts it

330
00:14:42,278 --> 00:14:46,928
calls it on a particular textured tile

331
00:14:44,918 --> 00:14:51,428
so it's like I need you to update this

332
00:14:46,928 --> 00:14:57,908
tile right now so that full cast

333
00:14:51,428 --> 00:14:59,708
function could just be could just be

334
00:14:57,908 --> 00:15:03,129
done like with a stipple pattern right

335
00:14:59,708 --> 00:15:07,058
so basically we could just say inside

336
00:15:03,129 --> 00:15:10,509
here the Z and Y that we're doing will

337
00:15:07,058 --> 00:15:14,980
just take and will compute whether or

338
00:15:10,509 --> 00:15:17,579
not we do this particular one based on a

339
00:15:14,980 --> 00:15:20,528
checkerboard pattern that alternates

340
00:15:17,578 --> 00:15:24,289
either frame right

341
00:15:20,528 --> 00:15:32,208
so if so for example if we did you know

342
00:15:24,289 --> 00:15:35,059
an X and one write a y and one and a Z

343
00:15:32,208 --> 00:15:40,489
and one write that basically tells us

344
00:15:35,059 --> 00:15:42,639
like which one's of these if you think

345
00:15:40,490 --> 00:15:48,200
about like the checkerboard pattern if

346
00:15:42,639 --> 00:15:51,379
the X is X and one says is it odd right

347
00:15:48,200 --> 00:15:54,259
and Y and one says is it odd so

348
00:15:51,379 --> 00:15:56,360
basically if we said that we wanted the

349
00:15:54,259 --> 00:15:59,450
well I guess I'll do y&amp;z because those

350
00:15:56,360 --> 00:16:04,730
are in here so if we basically check to

351
00:15:59,450 --> 00:16:07,129
see what the status was of Y and one and

352
00:16:04,730 --> 00:16:11,149
Z and one and said look we want them to

353
00:16:07,129 --> 00:16:13,610
be not equal right we want to have if if

354
00:16:11,149 --> 00:16:14,809
the X is odd we don't want the Z to be

355
00:16:13,610 --> 00:16:16,879
odd and vice versa

356
00:16:14,809 --> 00:16:18,799
presumably that would produce a

357
00:16:16,879 --> 00:16:20,240
checkerboard pattern that was you know

358
00:16:18,799 --> 00:16:21,679
uniform through the space and I'll leave

359
00:16:20,240 --> 00:16:23,060
the X out of it for now because that's

360
00:16:21,679 --> 00:16:25,458
something we want to compute the headend

361
00:16:23,059 --> 00:16:27,588
since we're doing a single X sheet here

362
00:16:25,458 --> 00:16:30,889
but I could do something like this where

363
00:16:27,589 --> 00:16:32,660
we basically said all right we're going

364
00:16:30,889 --> 00:16:34,519
to have a should compute in here and

365
00:16:32,659 --> 00:16:36,769
then we'll just do it if should compute

366
00:16:34,519 --> 00:16:40,909
and we would go ahead and put the

367
00:16:36,769 --> 00:16:43,429
checkerboard pattern in like so and we

368
00:16:40,909 --> 00:16:45,259
probably don't care much about the

369
00:16:43,429 --> 00:16:46,609
entropy sourcing at the moment although

370
00:16:45,259 --> 00:16:50,240
in the future we're gonna probably want

371
00:16:46,610 --> 00:16:52,490
to fix that to be different but anyway

372
00:16:50,240 --> 00:16:54,320
if we stick a checkerboard pattern in

373
00:16:52,490 --> 00:16:57,919
there right then what we should see when

374
00:16:54,320 --> 00:17:00,589
we run the game is we should see like a

375
00:16:57,919 --> 00:17:01,969
checkerboard pattern emerge in the code

376
00:17:00,589 --> 00:17:04,669
where we're only actually seeing

377
00:17:01,970 --> 00:17:08,150
lighting on the checkerboard although

378
00:17:04,669 --> 00:17:13,069
oddly enough I am not seeing that what's

379
00:17:08,150 --> 00:17:15,090
going on there why end one not equal to

380
00:17:13,068 --> 00:17:17,559
Z and

381
00:17:15,089 --> 00:17:21,220
shouldn't I only get checkerboards out

382
00:17:17,559 --> 00:17:23,889
of that let me go ahead and and draw

383
00:17:21,220 --> 00:17:26,829
just make sure I'm producing a

384
00:17:23,890 --> 00:17:29,530
checkerboard here let me go ahead into

385
00:17:26,829 --> 00:17:32,799
our OpenGL renderer and I'm just gonna

386
00:17:29,529 --> 00:17:36,879
go to the end frame code and I'm going

387
00:17:32,799 --> 00:17:41,649
to force it to draw the actual like you

388
00:17:36,880 --> 00:17:45,430
know light maps in here okay

389
00:17:41,650 --> 00:17:49,120
so I want to go ahead and see I guess

390
00:17:45,430 --> 00:17:51,299
one thing is they will get copied so I

391
00:17:49,119 --> 00:17:53,949
need to start by not copying I guess

392
00:17:51,299 --> 00:18:01,509
just to see if we actually produce the

393
00:17:53,950 --> 00:18:05,830
checkerboard pattern and I should

394
00:18:01,509 --> 00:18:09,789
probably also zoom out and turn off the

395
00:18:05,829 --> 00:18:16,059
smoothing so let's take a look at what

396
00:18:09,789 --> 00:18:20,139
that would be in the yeah hmm so in our

397
00:18:16,059 --> 00:18:31,569
visa man news man I'm not sure exactly

398
00:18:20,140 --> 00:18:34,270
what I want to look at here I guess I'll

399
00:18:31,569 --> 00:18:37,149
just widen it a little bit so I guess

400
00:18:34,269 --> 00:18:40,529
I'll just say alright the visa man here

401
00:18:37,150 --> 00:18:45,759
will just be I don't know

402
00:18:40,529 --> 00:18:47,920
0.25 right and we'll just take a look at

403
00:18:45,759 --> 00:18:52,089
what what the visa man is so there's the

404
00:18:47,920 --> 00:18:54,550
visa fan and if you look at at what's

405
00:18:52,089 --> 00:18:58,419
happening here you can see we're sort of

406
00:18:54,549 --> 00:19:02,200
getting a you know an obvious drop out

407
00:18:58,420 --> 00:19:07,590
of each of the Y of each of the zeros

408
00:19:02,200 --> 00:19:07,590
and but it doesn't necessarily look like

409
00:19:08,880 --> 00:19:13,960
it doesn't necessarily look like it's

410
00:19:11,200 --> 00:19:16,170
alternating the Y Rose did I do this

411
00:19:13,960 --> 00:19:16,170
wrong

412
00:19:22,329 --> 00:19:34,538
if the Z if the Y and one so if I mean

413
00:19:31,308 --> 00:19:34,538
it seems like that's correct right

414
00:19:38,529 --> 00:19:42,309
just checking the lower bit which would

415
00:19:40,569 --> 00:19:48,609
go on off on off on off on off right

416
00:19:42,309 --> 00:19:56,169
across the voxel I only want to compute

417
00:19:48,609 --> 00:20:00,129
it if they're equal yeah I don't really

418
00:19:56,170 --> 00:20:02,620
see what would be weird about that you

419
00:20:00,130 --> 00:20:05,380
know I'm saying that seems like that

420
00:20:02,619 --> 00:20:07,509
should be correct I guess the only thing

421
00:20:05,380 --> 00:20:09,070
though is X's aren't parodied so

422
00:20:07,509 --> 00:20:12,400
actually that may be fine because of the

423
00:20:09,069 --> 00:20:14,049
section we're looking at yeah okay so

424
00:20:12,400 --> 00:20:17,259
that might act that SS probably actually

425
00:20:14,049 --> 00:20:20,799
right I'm just probably not looking at

426
00:20:17,259 --> 00:20:23,799
it cuz X X X Y is the checkerboard

427
00:20:20,799 --> 00:20:26,230
you're gonna see Z is this way so I

428
00:20:23,799 --> 00:20:28,029
suppose yeah I suppose that's okay let's

429
00:20:26,230 --> 00:20:30,849
go ahead and introduce X then so that

430
00:20:28,029 --> 00:20:32,859
each sheet flips polarity so basically

431
00:20:30,849 --> 00:20:37,719
we need something here that's like you

432
00:20:32,859 --> 00:20:39,969
know looking X odd right where we go

433
00:20:37,720 --> 00:20:42,730
ahead and check that so what we'd want

434
00:20:39,970 --> 00:20:46,870
to do here is say like I guess if X odd

435
00:20:42,730 --> 00:20:54,640
isn't it's not equal to those so we can

436
00:20:46,869 --> 00:20:56,439
flip it each time you know this should

437
00:20:54,640 --> 00:20:58,480
be just something we can X or shouldn't

438
00:20:56,440 --> 00:21:01,090
it if they're both the same it would

439
00:20:58,480 --> 00:21:02,799
flip I feel like that would give me what

440
00:21:01,089 --> 00:21:09,279
I want

441
00:21:02,799 --> 00:21:18,029
this is complaining or was let me just

442
00:21:09,279 --> 00:21:18,029
see that seems checkerboard like to me

443
00:21:18,299 --> 00:21:22,269
there we go so now I'm getting a

444
00:21:20,740 --> 00:21:24,009
checkerboard I would just forgot that

445
00:21:22,269 --> 00:21:26,349
well X isn't involved so that's why you

446
00:21:24,009 --> 00:21:28,029
got a singular row there so if this is

447
00:21:26,349 --> 00:21:30,129
the checkerboard pattern you can see now

448
00:21:28,029 --> 00:21:31,599
that like the checker boards it updates

449
00:21:30,130 --> 00:21:35,290
the checkerboard doesn't update anything

450
00:21:31,599 --> 00:21:38,679
else which is what I wanted and so what

451
00:21:35,289 --> 00:21:41,139
we can do here is just like on either

452
00:21:38,680 --> 00:21:44,410
frame we can just do the checkerboard on

453
00:21:41,140 --> 00:21:48,400
the frame index as well so finally we

454
00:21:44,410 --> 00:21:50,110
would do like an X odd here with you

455
00:21:48,400 --> 00:21:50,620
know some kind of a thing that comes in

456
00:21:50,109 --> 00:21:52,569
from

457
00:21:50,619 --> 00:21:56,669
the actual work itself or from the

458
00:21:52,569 --> 00:22:00,609
solution right which is a frame odd

459
00:21:56,670 --> 00:22:03,570
value right and inside handmade lighting

460
00:22:00,609 --> 00:22:07,389
I just say okay there's like you know

461
00:22:03,569 --> 00:22:11,349
frame odd value here and the frame odd

462
00:22:07,390 --> 00:22:16,120
value just goes 0 or 1 0 or 1 0 1 right

463
00:22:11,349 --> 00:22:18,159
so every time we go into every time we

464
00:22:16,119 --> 00:22:21,250
finish pushing a lighting frame we just

465
00:22:18,160 --> 00:22:26,290
say like frame odd equals frame odd

466
00:22:21,250 --> 00:22:36,190
sorry solution frame odd and we just XOR

467
00:22:26,289 --> 00:22:39,579
that with with 1 right I guess I'll I'll

468
00:22:36,190 --> 00:22:41,679
write this is o X 1 front well now so

469
00:22:39,579 --> 00:22:43,779
basically what we're doing here is just

470
00:22:41,679 --> 00:22:55,179
saying look just flip that bit flip that

471
00:22:43,779 --> 00:22:56,349
bottom bit whatever it was I guess I

472
00:22:55,179 --> 00:22:57,820
shouldn't even have to do this right

473
00:22:56,349 --> 00:23:03,808
that'll just flip the bottom bit by

474
00:22:57,819 --> 00:23:03,808
itself all right

475
00:23:05,519 --> 00:23:12,039
so I'm just curious about this so you

476
00:23:09,279 --> 00:23:15,069
can see at that point we actually saved

477
00:23:12,039 --> 00:23:17,109
quite a bit of time right now it's down

478
00:23:15,069 --> 00:23:21,939
at at about 20 milliseconds per frame

479
00:23:17,109 --> 00:23:24,399
consistently between 19 and 20 which is

480
00:23:21,940 --> 00:23:28,809
almost enough to get us a clean 60 right

481
00:23:24,400 --> 00:23:30,940
and you know I don't know not

482
00:23:28,809 --> 00:23:37,960
immediately obvious that you would care

483
00:23:30,940 --> 00:23:40,360
that much about that so that seems like

484
00:23:37,960 --> 00:23:42,569
another good option for us because that

485
00:23:40,359 --> 00:23:45,549
way you know we're just computing less

486
00:23:42,569 --> 00:23:47,559
obviously the easiest way to optimize is

487
00:23:45,549 --> 00:23:50,859
just to not run code you know I mean

488
00:23:47,559 --> 00:23:54,129
because that's gonna there's really

489
00:23:50,859 --> 00:23:55,809
nothing you can do that is it

490
00:23:54,130 --> 00:23:57,570
there's no optimization you can do

491
00:23:55,809 --> 00:24:01,990
that's faster than not running something

492
00:23:57,569 --> 00:24:05,169
right so yeah so let me go ahead and

493
00:24:01,990 --> 00:24:06,490
turn off that debug draw there and then

494
00:24:05,170 --> 00:24:07,720
we can start to look at you know is

495
00:24:06,490 --> 00:24:10,140
there a way to speed up the actual

496
00:24:07,720 --> 00:24:11,829
raycasting at all because any

497
00:24:10,140 --> 00:24:15,310
improvement we could make to the

498
00:24:11,829 --> 00:24:18,250
raycasting code would be huge for us in

499
00:24:15,309 --> 00:24:21,309
terms of being able to improve the speed

500
00:24:18,250 --> 00:24:23,829
of the lighting so as it is you know it

501
00:24:21,309 --> 00:24:26,220
seems pretty reasonable right like it's

502
00:24:23,829 --> 00:24:30,730
it seems like it's working pretty well

503
00:24:26,220 --> 00:24:34,660
but you know like I said I I'd like to

504
00:24:30,730 --> 00:24:36,819
get it up to 60 or more if I can not

505
00:24:34,660 --> 00:24:45,210
that OBS can capture that it drops

506
00:24:36,819 --> 00:24:47,439
frames all over the place but alright oh

507
00:24:45,210 --> 00:24:52,200
and by the way chat know it doesn't make

508
00:24:47,440 --> 00:24:56,620
propagation any slower at all right

509
00:24:52,200 --> 00:24:58,569
because actually like the I mean I

510
00:24:56,619 --> 00:25:02,349
shouldn't say that it does make

511
00:24:58,569 --> 00:25:05,259
propagation slower in one sense but not

512
00:25:02,349 --> 00:25:09,279
in another because you see the updates

513
00:25:05,259 --> 00:25:13,420
for a given light transmission for

514
00:25:09,279 --> 00:25:17,250
however far away it is on the same frame

515
00:25:13,420 --> 00:25:21,960
so you can also if you want to

516
00:25:17,250 --> 00:25:25,880
blend in faster and in theory you might

517
00:25:21,960 --> 00:25:27,529
be okay there too so it does make the it

518
00:25:25,880 --> 00:25:30,360
how do I say it

519
00:25:27,529 --> 00:25:34,769
propagation is the same speed but

520
00:25:30,359 --> 00:25:38,729
blending is slower might be the way to

521
00:25:34,769 --> 00:25:40,379
say it in other words it doesn't reduce

522
00:25:38,730 --> 00:25:41,849
the amount of time it takes from light

523
00:25:40,380 --> 00:25:44,190
to get from one side of the screen to

524
00:25:41,849 --> 00:25:46,259
the other which is still instant what it

525
00:25:44,190 --> 00:25:49,259
does do is make the blending half as

526
00:25:46,259 --> 00:25:53,309
fast right so the amount of time it

527
00:25:49,259 --> 00:25:57,029
takes you to get up to a certain blend

528
00:25:53,309 --> 00:25:59,509
level is is less lessened I don't know

529
00:25:57,029 --> 00:25:59,509
if that makes sense

530
00:26:02,660 --> 00:26:07,200
all right anyway moving on let's see

531
00:26:05,670 --> 00:26:08,370
what we can do with our full cast so I'm

532
00:26:07,200 --> 00:26:12,569
gonna go ahead and take a look at this

533
00:26:08,369 --> 00:26:15,419
code and uh you know just just see what

534
00:26:12,569 --> 00:26:17,129
I can do inside the raycast function so

535
00:26:15,420 --> 00:26:19,140
when we look at what's happening here

536
00:26:17,130 --> 00:26:21,960
you can see sort of the way that we're

537
00:26:19,140 --> 00:26:26,730
going about things is we're doing sort

538
00:26:21,960 --> 00:26:30,180
of a traversal of our of our box this

539
00:26:26,730 --> 00:26:33,440
year and we're pushing on the first one

540
00:26:30,180 --> 00:26:37,200
right so we make a little box stack and

541
00:26:33,440 --> 00:26:40,620
we go ahead and push a box on the box

542
00:26:37,200 --> 00:26:50,940
stack we go ahead and look to see out of

543
00:26:40,619 --> 00:26:55,829
its children you know which ones we want

544
00:26:50,940 --> 00:27:04,380
to look at we loop through those and we

545
00:26:55,829 --> 00:27:06,000
continue now one of the things that one

546
00:27:04,380 --> 00:27:11,210
of the things that I'm immediately kind

547
00:27:06,000 --> 00:27:11,210
of concerned about here is I don't

548
00:27:27,140 --> 00:27:32,480
so I don't really know to be completely

549
00:27:30,049 --> 00:27:35,599
honest with you that this is a smart way

550
00:27:32,480 --> 00:27:38,630
to set this up and I guess I do feel

551
00:27:35,599 --> 00:27:43,279
like generally speaking people trace ray

552
00:27:38,630 --> 00:27:45,680
bundles at a time but to be honest I

553
00:27:43,279 --> 00:27:48,519
guess I'm wondering why they trace ray

554
00:27:45,680 --> 00:27:48,519
bundles at a time

555
00:28:16,159 --> 00:28:19,799
so this is kind of a little confusing

556
00:28:18,569 --> 00:28:21,990
and I suppose I should think this

557
00:28:19,798 --> 00:28:24,599
through a little bit more when I'm

558
00:28:21,990 --> 00:28:27,058
looking at this I'm thinking to myself I

559
00:28:24,599 --> 00:28:28,558
do believe that most of the time when

560
00:28:27,058 --> 00:28:31,230
people do rate racers like this they

561
00:28:28,558 --> 00:28:35,908
trace bundles of rays at a time which i

562
00:28:31,230 --> 00:28:37,829
think is usually the way it's done but I

563
00:28:35,909 --> 00:28:41,100
guess I don't know why they don't just

564
00:28:37,829 --> 00:28:45,230
trace one ray at a time and instead test

565
00:28:41,099 --> 00:28:45,230
against a bundle of boxes

566
00:28:58,250 --> 00:29:08,240
and I guess I just have no idea why I

567
00:29:11,179 --> 00:29:15,720
mean that's the kind of thing I should

568
00:29:13,049 --> 00:29:17,960
probably go read up on and take a look

569
00:29:15,720 --> 00:29:20,640
at what the latest research is on that

570
00:29:17,960 --> 00:29:24,960
but I guess I just don't know why we

571
00:29:20,640 --> 00:29:27,780
don't just always do a tree that's got

572
00:29:24,960 --> 00:29:30,808
four wide it's always four wide so we

573
00:29:27,779 --> 00:29:34,230
always build a hierarchy of four wide

574
00:29:30,808 --> 00:29:37,079
boxes and then store a four wide box

575
00:29:34,230 --> 00:29:42,329
that we intersect with do you know what

576
00:29:37,079 --> 00:29:50,308
I'm saying so I'm just I'm not sure why

577
00:29:42,329 --> 00:29:54,808
we didn't just do that and I even

578
00:29:50,308 --> 00:29:59,940
remember us thinking that we would do

579
00:29:54,808 --> 00:30:02,579
that so I don't think we did it out of

580
00:29:59,940 --> 00:30:07,640
hand but again I don't really know so I

581
00:30:02,579 --> 00:30:07,639
do feel like rather than have

582
00:30:17,420 --> 00:30:21,810
it seems like maybe that's just a

583
00:30:19,950 --> 00:30:23,940
mistake I feel like why don't you want

584
00:30:21,809 --> 00:30:28,679
to test against four boxes at the same

585
00:30:23,940 --> 00:30:31,170
time because that way when you load you

586
00:30:28,680 --> 00:30:33,090
always load four wide so the boxes would

587
00:30:31,170 --> 00:30:34,980
already be set up for you to do a four

588
00:30:33,089 --> 00:30:38,159
wide load on the boxes

589
00:30:34,980 --> 00:30:41,250
so you'd combine your X's your Y's your

590
00:30:38,160 --> 00:30:43,980
Z's four four boxes at a time and then

591
00:30:41,250 --> 00:30:46,619
what you do is you would cast against

592
00:30:43,980 --> 00:30:49,170
one Ray that way you would always

593
00:30:46,619 --> 00:30:51,750
traverse the exact right hierarchy for

594
00:30:49,170 --> 00:30:56,190
that Ray and that just seems like it

595
00:30:51,750 --> 00:30:58,049
would be way better I'm gonna go out on

596
00:30:56,190 --> 00:30:59,549
a limb here and say that maybe the

597
00:30:58,049 --> 00:31:01,109
reason people don't normally do that is

598
00:30:59,549 --> 00:31:03,930
because they are trying to go much wider

599
00:31:01,109 --> 00:31:05,879
than for meaning you probably wouldn't

600
00:31:03,930 --> 00:31:09,029
want a spatial hierarchy that was fanned

601
00:31:05,880 --> 00:31:12,750
out on 16s and like that's more what a

602
00:31:09,029 --> 00:31:14,849
GPU has to do so it could be that like

603
00:31:12,750 --> 00:31:18,000
four is a good number like two and four

604
00:31:14,849 --> 00:31:20,429
are reasonable numbers 16 and 32 and 64

605
00:31:18,000 --> 00:31:22,230
aren't so it may be that the reason that

606
00:31:20,430 --> 00:31:23,970
you normally don't do it that way is

607
00:31:22,230 --> 00:31:27,620
because you're normally targeting

608
00:31:23,970 --> 00:31:27,620
something that's much wider than four

609
00:31:39,509 --> 00:31:46,180
that's all I really have but that really

610
00:31:43,359 --> 00:31:49,389
tempts me to want to try rewriting this

611
00:31:46,180 --> 00:31:52,029
the other way round because I would like

612
00:31:49,390 --> 00:31:54,100
to see what the speed comparison is so

613
00:31:52,029 --> 00:31:55,960
what I might say is like I might say

614
00:31:54,099 --> 00:31:59,079
what if you know could we could be

615
00:31:55,960 --> 00:32:01,930
basically like imagine what would this

616
00:31:59,079 --> 00:32:02,919
routine look like if it was operating

617
00:32:01,930 --> 00:32:06,340
the other way around

618
00:32:02,920 --> 00:32:09,670
so like instead of the raycast taking

619
00:32:06,339 --> 00:32:16,359
the Ray origin and the rady this way it

620
00:32:09,670 --> 00:32:17,830
would take you know box wise raycast or

621
00:32:16,359 --> 00:32:20,889
something and whereas the other ones the

622
00:32:17,829 --> 00:32:24,029
Ray wise ray cast right so it would take

623
00:32:20,890 --> 00:32:26,830
a single ray origin in a single ray D

624
00:32:24,029 --> 00:32:30,519
and it would cast that against the Box

625
00:32:26,829 --> 00:32:35,679
hierarchy more you know by going along

626
00:32:30,519 --> 00:32:38,680
the same as the Box by loading the boxes

627
00:32:35,680 --> 00:32:41,920
instead and if you look at what that

628
00:32:38,680 --> 00:32:44,350
would do I'm gonna go ahead and and

629
00:32:41,920 --> 00:32:48,160
leave the debug code in here for now as

630
00:32:44,349 --> 00:32:51,209
well if you look at what that would do

631
00:32:48,160 --> 00:32:54,340
if we imagine that if we load up things

632
00:32:51,210 --> 00:32:55,840
instead when we look at lighting box we

633
00:32:54,339 --> 00:32:59,019
would have a thing that was like a

634
00:32:55,839 --> 00:33:01,359
lighting box for X basically right so

635
00:32:59,019 --> 00:33:05,349
you know every time we push something on

636
00:33:01,359 --> 00:33:07,449
the stack it's four boxes and when we

637
00:33:05,349 --> 00:33:10,899
check against it we would check against

638
00:33:07,450 --> 00:33:16,660
four boxes right so there wouldn't be a

639
00:33:10,900 --> 00:33:19,660
loop here the loop would not exist you

640
00:33:16,660 --> 00:33:23,769
would check against like a four x box

641
00:33:19,660 --> 00:33:25,269
and you just do it right and again the

642
00:33:23,769 --> 00:33:27,819
reason I like that is cuz it gets rid of

643
00:33:25,269 --> 00:33:28,450
that loop which I don't particularly

644
00:33:27,819 --> 00:33:33,429
care for

645
00:33:28,450 --> 00:33:35,559
so you'd pop a box for X out and then

646
00:33:33,430 --> 00:33:39,220
you would just go ahead and start

647
00:33:35,559 --> 00:33:41,919
working with that box so rather than

648
00:33:39,220 --> 00:33:46,000
doing a loft here which is what we're

649
00:33:41,920 --> 00:33:50,740
doing we would instead just grab these

650
00:33:46,000 --> 00:33:52,220
out as actual for X wide like these are

651
00:33:50,740 --> 00:33:58,589
already four

652
00:33:52,220 --> 00:34:11,099
right so we would yeah does the box P

653
00:33:58,589 --> 00:34:17,179
get used here anywhere we use the center

654
00:34:11,099 --> 00:34:17,179
probably what to do the radius yeah

655
00:34:42,159 --> 00:34:47,299
so I'll leave that like this for now but

656
00:34:44,809 --> 00:34:49,779
I think this is a little suspect these

657
00:34:47,300 --> 00:35:03,890
should probably just be loaded directly

658
00:34:49,780 --> 00:35:05,450
and computed out of hand so and so I

659
00:35:03,889 --> 00:35:07,460
think we probably want to fix that

660
00:35:05,449 --> 00:35:10,489
because I don't think this is set up

661
00:35:07,460 --> 00:35:17,300
quite properly also if we look at box

662
00:35:10,489 --> 00:35:24,409
radius right it's really yeah like this

663
00:35:17,300 --> 00:35:26,240
code is not doing what we would want so

664
00:35:24,409 --> 00:35:29,960
I think what you probably want to do is

665
00:35:26,239 --> 00:35:32,029
you just want to store like these values

666
00:35:29,960 --> 00:35:33,920
and use them after the fact probably I

667
00:35:32,030 --> 00:35:36,080
don't know we'll we'll take a look at

668
00:35:33,920 --> 00:35:37,490
that later but I just want to look at

669
00:35:36,079 --> 00:35:38,929
the effects of doing effectively the

670
00:35:37,489 --> 00:35:42,259
same calculation but I think there's

671
00:35:38,929 --> 00:35:46,250
work to be done there all right so

672
00:35:42,260 --> 00:35:48,230
assuming that we get this stuff like ice

673
00:35:46,250 --> 00:35:53,510
you know what I'm saying here is that we

674
00:35:48,230 --> 00:35:56,059
have a Rea origin and a rady and this is

675
00:35:53,510 --> 00:36:00,320
like gonna be lofted so these are the

676
00:35:56,059 --> 00:36:14,449
things that will actually become loft it

677
00:36:00,320 --> 00:36:16,360
up from singles single ones to packs so

678
00:36:14,449 --> 00:36:20,649
now those are four wide clones

679
00:36:16,360 --> 00:36:20,650
effectively of themselves right

680
00:36:29,800 --> 00:36:34,990
and so I think that makes more sense

681
00:36:32,170 --> 00:36:38,440
anyway and the tough part at that point

682
00:36:34,989 --> 00:36:40,329
is just going in will be at the end when

683
00:36:38,440 --> 00:36:43,150
you want to extract stuff out of here

684
00:36:40,329 --> 00:36:50,019
you only want to extract the one that is

685
00:36:43,150 --> 00:36:53,380
the best right so you - but to a certain

686
00:36:50,019 --> 00:36:57,730
extent that is kind of what you want

687
00:36:53,380 --> 00:36:59,860
right because we know because of the

688
00:36:57,730 --> 00:37:02,320
limitations of the SSE instruction set

689
00:36:59,860 --> 00:37:06,010
we know that we can't do voxel

690
00:37:02,320 --> 00:37:08,350
irradiance wide right because the

691
00:37:06,010 --> 00:37:10,150
lookups like fetching memory which is

692
00:37:08,349 --> 00:37:12,279
most of what's happening in there is

693
00:37:10,150 --> 00:37:14,650
something that can only happen in

694
00:37:12,280 --> 00:37:16,480
straight line code we can't do it wide

695
00:37:14,650 --> 00:37:18,880
because the SSE instruction set doesn't

696
00:37:16,480 --> 00:37:22,090
have scattered either in it if we were

697
00:37:18,880 --> 00:37:23,349
85 12 we could no there are no parts

698
00:37:22,090 --> 00:37:26,620
really of that unless you've got an

699
00:37:23,349 --> 00:37:29,170
ice-like laptop or something well that's

700
00:37:26,619 --> 00:37:35,980
not true maybe X 512 those is in some of

701
00:37:29,170 --> 00:37:37,900
the I 9s - but anyway so this might yeah

702
00:37:35,980 --> 00:37:40,119
I think this might be worth exploring so

703
00:37:37,900 --> 00:37:41,530
maybe this week today and next weekend

704
00:37:40,119 --> 00:37:44,679
we can just play around with this and

705
00:37:41,530 --> 00:37:46,930
see what's going on there so if we

706
00:37:44,679 --> 00:37:49,899
imagine we're actually doing this code

707
00:37:46,929 --> 00:37:52,750
the same exact way I don't think any of

708
00:37:49,900 --> 00:37:55,110
this changes right so all of this is

709
00:37:52,750 --> 00:38:00,190
exactly the same the only difference is

710
00:37:55,110 --> 00:38:02,079
we take a look to see when we try to

711
00:38:00,190 --> 00:38:04,420
figure out whether or not we hit

712
00:38:02,079 --> 00:38:11,170
something we just need to know whether

713
00:38:04,420 --> 00:38:15,280
or not we just need to know which one of

714
00:38:11,170 --> 00:38:19,200
our which sub box to like descend down

715
00:38:15,280 --> 00:38:21,700
right so we need to be able to push

716
00:38:19,199 --> 00:38:25,509
boxes on the stack depending on which

717
00:38:21,699 --> 00:38:28,089
one we hit like we need to push a

718
00:38:25,510 --> 00:38:29,830
different box four onto the stack

719
00:38:28,090 --> 00:38:33,309
depending on which one we hit and we

720
00:38:29,829 --> 00:38:37,630
would have to push like up to four boxes

721
00:38:33,309 --> 00:38:38,380
you know I'm saying so in order to do

722
00:38:37,630 --> 00:38:40,059
that I

723
00:38:38,380 --> 00:38:43,650
that part is a little bit tricky because

724
00:38:40,059 --> 00:38:47,170
if you when you need to actually descend

725
00:38:43,650 --> 00:38:52,539
that parts a little bit a little bit

726
00:38:47,170 --> 00:38:56,440
iffy right I don't know that we need a

727
00:38:52,539 --> 00:39:00,130
box child count here per se but what we

728
00:38:56,440 --> 00:39:02,200
do need is we need I guess we do need I

729
00:39:00,130 --> 00:39:05,470
mean child counts fine I suppose we just

730
00:39:02,199 --> 00:39:08,169
need some way of saying whether or not

731
00:39:05,469 --> 00:39:11,369
we push something on the stack or record

732
00:39:08,170 --> 00:39:11,369
the hit right

733
00:39:58,318 --> 00:40:03,099
so yeah I'm not sure exactly how to do

734
00:40:00,818 --> 00:40:05,230
that cleanly that's a little bit tricky

735
00:40:03,099 --> 00:40:08,380
what we sexually need to do is just an a

736
00:40:05,230 --> 00:40:11,139
mask extract and then we need to push on

737
00:40:08,380 --> 00:40:15,640
the parts of the mass like what for

738
00:40:11,139 --> 00:40:23,159
whichever one we need to like push on

739
00:40:15,639 --> 00:40:23,159
the correct values onto our stack right

740
00:40:26,278 --> 00:40:30,400
and it's just a little bit iffy because

741
00:40:28,719 --> 00:40:32,828
try I'm trying to figure out how you

742
00:40:30,400 --> 00:40:34,650
would do that without too many s that's

743
00:40:32,829 --> 00:40:39,249
the thing that really I feel like is

744
00:40:34,650 --> 00:40:41,528
difficult there because if you if you

745
00:40:39,248 --> 00:40:44,439
need to push on like you need something

746
00:40:41,528 --> 00:40:51,998
looks like this because you tested for

747
00:40:44,440 --> 00:41:03,099
box Oh although we could do something

748
00:40:51,998 --> 00:41:08,759
even more ridiculous than that hmm so

749
00:41:03,099 --> 00:41:12,700
there's another thing we could do and

750
00:41:08,759 --> 00:41:15,639
that is really weird and probably not a

751
00:41:12,699 --> 00:41:23,528
good idea we could do a thing that

752
00:41:15,639 --> 00:41:25,568
basically was there's only one dissent

753
00:41:23,528 --> 00:41:27,670
now that doesn't make sense but anyway

754
00:41:25,568 --> 00:41:28,929
point being if we have four boxes here

755
00:41:27,670 --> 00:41:31,358
we need to do something that looks like

756
00:41:28,929 --> 00:41:34,298
this where we pushed four boxes on and

757
00:41:31,358 --> 00:41:36,518
we need to push them on based on whether

758
00:41:34,298 --> 00:41:38,259
or not we hit them the reason that

759
00:41:36,518 --> 00:41:41,618
that's troubling is because I'm not sure

760
00:41:38,259 --> 00:41:44,380
exactly how you would do that in a way

761
00:41:41,619 --> 00:41:51,548
that doesn't become ugly pretty quickly

762
00:41:44,380 --> 00:41:53,650
right you can imagine doing like

763
00:41:51,548 --> 00:41:58,659
conditional moves for all of this I

764
00:41:53,650 --> 00:42:01,720
suppose so just like Seema Seema Seema

765
00:41:58,659 --> 00:42:05,048
Seema Seema Seema Seema and I suppose

766
00:42:01,719 --> 00:42:06,338
that's not that bad because it doesn't

767
00:42:05,048 --> 00:42:08,170
change what code is actually being

768
00:42:06,338 --> 00:42:10,088
executed I don't know that I would

769
00:42:08,170 --> 00:42:11,860
really have all that much luck in

770
00:42:10,088 --> 00:42:14,529
compiler to generate that

771
00:42:11,860 --> 00:42:18,610
but you know what I don't want is

772
00:42:14,530 --> 00:42:21,970
something that looks like this because

773
00:42:18,610 --> 00:42:26,050
that's just a horrible pipeline flushing

774
00:42:21,969 --> 00:42:27,429
nightmare at that point because you know

775
00:42:26,050 --> 00:42:33,510
there's no way it's gonna predict that

776
00:42:27,429 --> 00:42:37,559
stuff correctly at all so yeah that's

777
00:42:33,510 --> 00:42:37,560
that's pretty nasty

778
00:42:38,849 --> 00:42:49,089
that's pretty best pretty ugly anyway so

779
00:42:47,380 --> 00:42:50,260
if we take a look at what's happening in

780
00:42:49,090 --> 00:42:51,970
here

781
00:42:50,260 --> 00:42:53,590
and we look at what this branch does

782
00:42:51,969 --> 00:42:59,219
yeah this would have to be a kind of

783
00:42:53,590 --> 00:43:02,320
conditional move thing where you know I

784
00:42:59,219 --> 00:43:03,879
don't know what would would make the

785
00:43:02,320 --> 00:43:06,850
compiler do the right thing here but

786
00:43:03,880 --> 00:43:10,510
imagine something like this maybe so it

787
00:43:06,849 --> 00:43:17,009
would do something like look if the mask

788
00:43:10,510 --> 00:43:21,850
and foo then do the assignment right

789
00:43:17,010 --> 00:43:33,790
that kind of thing and same with the

790
00:43:21,849 --> 00:43:35,619
depth so you could do a thing like this

791
00:43:33,789 --> 00:43:39,969
where you just kind of walk through it

792
00:43:35,619 --> 00:43:41,589
and say like okay you know can see if

793
00:43:39,969 --> 00:43:43,869
you can get the compiler to do C moves

794
00:43:41,590 --> 00:43:47,980
for each of these things and then you

795
00:43:43,869 --> 00:43:49,989
have like a mask that's like okay form

796
00:43:47,980 --> 00:43:51,880
for the box that we're looking at we've

797
00:43:49,989 --> 00:43:56,709
got our sub box and we just do something

798
00:43:51,880 --> 00:44:01,390
like this right and so you have like if

799
00:43:56,710 --> 00:44:05,970
the mask and like you know whatever the

800
00:44:01,389 --> 00:44:05,969
the thing is that you're testing against

801
00:44:07,079 --> 00:44:12,389
when you extract the mask you would do

802
00:44:09,670 --> 00:44:12,389
something like this

803
00:44:13,650 --> 00:44:18,160
by the way that's probably not what the

804
00:44:16,000 --> 00:44:21,159
mask will actually extract - but you

805
00:44:18,159 --> 00:44:29,349
know separate issue it's probably more

806
00:44:21,159 --> 00:44:31,089
like well I'll be honest I'm not sure

807
00:44:29,349 --> 00:44:32,289
exactly what it would be but I when we

808
00:44:31,090 --> 00:44:35,050
extract the mask would probably bite

809
00:44:32,289 --> 00:44:42,429
wise so we'd probably be like you know

810
00:44:35,050 --> 00:44:44,680
bit 1 bit for bit 8 bit 12 kind of a

811
00:44:42,429 --> 00:44:46,480
thing you know I'm saying but we'll look

812
00:44:44,679 --> 00:44:48,699
at that in a second so anyway the point

813
00:44:46,480 --> 00:44:52,690
is yeah you know it would be something

814
00:44:48,699 --> 00:44:55,539
like this probably so that way it's just

815
00:44:52,690 --> 00:44:57,550
like a big serial dependency chain that

816
00:44:55,539 --> 00:44:59,199
can get thrown off to the process or and

817
00:44:57,550 --> 00:45:03,539
then the processor can just loop and

818
00:44:59,199 --> 00:45:03,539
start computing crap right

819
00:45:04,090 --> 00:45:12,700
and the downside there is that because

820
00:45:07,809 --> 00:45:18,519
of the way we wrote the this being depth

821
00:45:12,699 --> 00:45:22,949
first it means that it has to wait on

822
00:45:18,519 --> 00:45:26,679
this thing which is not great right

823
00:45:22,949 --> 00:45:29,189
because that dependency chains so

824
00:45:26,679 --> 00:45:29,190
terrible

825
00:45:33,269 --> 00:45:37,860
none of this feels good I'll be honest

826
00:45:35,559 --> 00:45:37,860
with you

827
00:45:59,480 --> 00:46:05,969
so now I'm trying to think okay is there

828
00:46:03,840 --> 00:46:08,220
some other thing that I'm missing here

829
00:46:05,969 --> 00:46:11,099
that's just like look there's a better

830
00:46:08,219 --> 00:46:12,869
way to traverse this thing because what

831
00:46:11,099 --> 00:46:15,029
I really I just want something where it

832
00:46:12,869 --> 00:46:17,519
can stay relatively streaming right

833
00:46:15,030 --> 00:46:19,019
where it relatively most the time it's

834
00:46:17,519 --> 00:46:20,969
just loading boxes and testing buttons

835
00:46:19,019 --> 00:46:24,389
boxes because the closer we can have it

836
00:46:20,969 --> 00:46:26,159
to just I load box I test box repeat the

837
00:46:24,389 --> 00:46:28,079
faster it's going to run and the more

838
00:46:26,159 --> 00:46:31,849
you have to sit around fussing with

839
00:46:28,079 --> 00:46:35,929
stuff like what am i testing and where

840
00:46:31,849 --> 00:46:35,929
it's just gonna go really slowly

841
00:46:47,719 --> 00:46:52,649
so here's another way to think about it

842
00:46:50,219 --> 00:46:55,139
I'd guess maybe another way to think

843
00:46:52,650 --> 00:46:57,690
about it is what if we instead turn this

844
00:46:55,139 --> 00:47:00,449
into more of just like in a codex style

845
00:46:57,690 --> 00:47:01,889
problem so what if we just said how

846
00:47:00,449 --> 00:47:06,058
about we write the thing that we can

847
00:47:01,889 --> 00:47:08,789
actually do and then we try to make a

848
00:47:06,059 --> 00:47:11,400
thing that encodes a hierarchy in a way

849
00:47:08,789 --> 00:47:12,960
that we can actually do it and we just

850
00:47:11,400 --> 00:47:14,789
live with those limitations like it

851
00:47:12,960 --> 00:47:19,190
sounds stupid what I'm saying it but

852
00:47:14,789 --> 00:47:30,170
it's like I mean that's something right

853
00:47:19,190 --> 00:47:34,500
and so just trying to think it through

854
00:47:30,170 --> 00:47:40,940
imagine I guess if we just said all

855
00:47:34,500 --> 00:47:40,940
right you are doing

856
00:48:01,210 --> 00:48:07,869
you're doing boxes you're producing a

857
00:48:04,389 --> 00:48:19,509
mask the mask then tells you what to

858
00:48:07,869 --> 00:48:30,490
load into what to load into the thing to

859
00:48:19,510 --> 00:48:34,028
do next and I guess maybe you can do

860
00:48:30,489 --> 00:48:36,389
that yeah I don't know so maybe this is

861
00:48:34,028 --> 00:48:38,048
this is part of the reason perhaps why

862
00:48:36,389 --> 00:48:39,460
doing it the other way is better

863
00:48:38,048 --> 00:48:41,889
although this the other way we did it

864
00:48:39,460 --> 00:48:43,150
does sort of still have the problem like

865
00:48:41,889 --> 00:48:45,848
if you look at what's actually happening

866
00:48:43,150 --> 00:48:49,269
in the other ray caster you still sort

867
00:48:45,849 --> 00:48:54,278
of have the problem where's my other red

868
00:48:49,269 --> 00:48:55,989
caster there it is you sort of still do

869
00:48:54,278 --> 00:48:57,818
have the problem of the depth push

870
00:48:55,989 --> 00:49:00,309
happens and then you immediately have to

871
00:48:57,818 --> 00:49:03,420
use it right

872
00:49:00,309 --> 00:49:03,420
[Music]

873
00:49:27,059 --> 00:49:32,639
I guess one thing that's worth noting is

874
00:49:30,570 --> 00:49:37,970
you don't actually need to push things

875
00:49:32,639 --> 00:49:37,969
onto the stack in the case where you are

876
00:49:45,949 --> 00:49:54,869
like if you actually put everything onto

877
00:49:48,360 --> 00:49:57,059
the stack instead you could change the

878
00:49:54,869 --> 00:49:58,859
way this loop worked a little bit so for

879
00:49:57,059 --> 00:50:00,929
example you could if you wanted to

880
00:49:58,860 --> 00:50:05,190
change it so the source index actually

881
00:50:00,929 --> 00:50:06,960
happens in here right then that doesn't

882
00:50:05,190 --> 00:50:12,019
seem like a very good idea because that

883
00:50:06,960 --> 00:50:15,019
just seems like probably a waste of time

884
00:50:12,019 --> 00:50:21,960
so I wouldn't really recommend it but

885
00:50:15,019 --> 00:50:23,610
yeah and we have you know we can change

886
00:50:21,960 --> 00:50:24,750
the hierarchy every want so I'm not

887
00:50:23,610 --> 00:50:26,039
trying to work with this heart

888
00:50:24,750 --> 00:50:28,710
particularly I'm just trying to think of

889
00:50:26,039 --> 00:50:30,900
how we would actually keep the hierarchy

890
00:50:28,710 --> 00:50:33,690
how we would write any hierarchy that

891
00:50:30,900 --> 00:50:35,519
allows us to stream boxes cleanly so

892
00:50:33,690 --> 00:50:38,400
that we could test against multiple

893
00:50:35,519 --> 00:50:41,820
boxes at once just because that seems a

894
00:50:38,400 --> 00:50:46,760
little bit better and maybe that's not

895
00:50:41,820 --> 00:50:46,760
true but it feels like it would be

896
00:50:59,550 --> 00:51:07,000
hmm so we do know that those four boxes

897
00:51:04,119 --> 00:51:07,660
can put things fairly continuously for

898
00:51:07,000 --> 00:51:26,260
themselves

899
00:51:07,659 --> 00:51:34,139
Oh actually I just got an idea I just

900
00:51:26,260 --> 00:51:37,410
got an idea so actually maybe not maybe

901
00:51:34,139 --> 00:51:39,230
what you actually want to do

902
00:51:37,409 --> 00:51:45,179
[Music]

903
00:51:39,230 --> 00:51:50,490
hmm I say so what if instead we had a

904
00:51:45,179 --> 00:51:54,269
lightbox stack and tree and in that we

905
00:51:50,489 --> 00:51:59,039
stored which box we were going to look

906
00:51:54,269 --> 00:52:06,710
at but also the mask that we got for

907
00:51:59,039 --> 00:52:06,710
that box and maybe I want that aligned

908
00:52:08,150 --> 00:52:16,289
so if you think about it then what you

909
00:52:13,650 --> 00:52:20,160
would do is say alright we got this box

910
00:52:16,289 --> 00:52:23,429
stock garbage here and what we're gonna

911
00:52:20,159 --> 00:52:26,039
do is we're going to say we get one of

912
00:52:23,429 --> 00:52:29,009
these boxes and we put it in here and

913
00:52:26,039 --> 00:52:32,099
then we also put in a mask and the mask

914
00:52:29,010 --> 00:52:42,120
is just whatever the heck the mask is

915
00:52:32,099 --> 00:52:49,049
right and then what we do is we always

916
00:52:42,119 --> 00:52:52,529
load four-wide out of the boxes but we

917
00:52:49,050 --> 00:52:55,140
only when we do our test we mask the

918
00:52:52,530 --> 00:52:57,600
test against the mask we put on so

919
00:52:55,139 --> 00:53:01,519
rather than ever having to do this crap

920
00:52:57,599 --> 00:53:01,519
it's still just this

921
00:53:11,289 --> 00:53:20,599
right so when we need to go down another

922
00:53:17,750 --> 00:53:23,869
level of the hierarchy we can just say

923
00:53:20,599 --> 00:53:28,599
like okay let's process this box and do

924
00:53:23,869 --> 00:53:28,599
this mask right

925
00:53:34,980 --> 00:53:42,949
yeah yeah yeah yeah so that seems good

926
00:53:44,179 --> 00:53:48,868
because then when you let out the mask

927
00:53:46,349 --> 00:53:50,609
you yeah you could just you could just

928
00:53:48,869 --> 00:53:54,059
say we're loading up the things out of

929
00:53:50,608 --> 00:53:56,338
this box and we can just mask the

930
00:53:54,059 --> 00:53:58,980
results of that thing against what we're

931
00:53:56,338 --> 00:54:01,650
looking at here now that's not quite

932
00:53:58,980 --> 00:54:03,659
correct correct because yeah like

933
00:54:01,650 --> 00:54:05,519
there's four of these rights you test

934
00:54:03,659 --> 00:54:09,598
against you're gonna load up four

935
00:54:05,519 --> 00:54:12,239
separate pieces but those four separate

936
00:54:09,599 --> 00:54:16,650
pieces can be the things that are sort

937
00:54:12,239 --> 00:54:18,989
of contiguous right so when you load up

938
00:54:16,650 --> 00:54:21,240
here you you would still do root box

939
00:54:18,989 --> 00:54:26,069
right and you would still do a loop over

940
00:54:21,239 --> 00:54:32,009
the four pieces you just and yeah and

941
00:54:26,070 --> 00:54:37,200
when you push each of those on yeah you

942
00:54:32,010 --> 00:54:41,430
then do do the test four times or you

943
00:54:37,199 --> 00:54:43,289
push for things not sure which of those

944
00:54:41,429 --> 00:54:46,710
you want but again the nice part about

945
00:54:43,289 --> 00:54:48,300
that is you just say yeah look the when

946
00:54:46,710 --> 00:54:50,639
we push this on we just pushed the mask

947
00:54:48,300 --> 00:54:53,240
on and then that way we know at a time

948
00:54:50,639 --> 00:54:53,239
which ones were doing

949
00:55:00,079 --> 00:55:15,920
I suppose that now I'm thinking about to

950
00:55:14,028 --> 00:55:17,298
like though it's like alright is that

951
00:55:15,920 --> 00:55:19,188
really any better I mean we could have

952
00:55:17,298 --> 00:55:21,048
done it just push all four onto that we

953
00:55:19,188 --> 00:55:23,028
could always push all four on to the

954
00:55:21,048 --> 00:55:31,009
stack and then just zero out the pointer

955
00:55:23,028 --> 00:55:34,568
and just check the pointer right so and

956
00:55:31,009 --> 00:55:34,568
I don't know maybe that's not so hot

957
00:55:35,438 --> 00:55:39,159
still not sure yeah

958
00:56:02,179 --> 00:56:06,589
so yeah um

959
00:56:23,958 --> 00:56:28,578
I'm just not thinking of anything clever

960
00:56:26,219 --> 00:56:28,579
here

961
00:56:30,469 --> 00:56:35,099
maybe it's the fools earned but yeah I

962
00:56:32,969 --> 00:56:37,200
mean I do kind of feel like I want to be

963
00:56:35,099 --> 00:56:42,630
able to do as many of these as possible

964
00:56:37,199 --> 00:56:46,228
right and just looking at it like yeah

965
00:56:42,630 --> 00:56:49,489
and like my dream world right it's you

966
00:56:46,228 --> 00:56:49,489
know it's gonna be something like this

967
00:56:50,539 --> 00:56:58,650
and we would just I want it to look as

968
00:56:57,329 --> 00:57:02,519
close as possible just doing all of

969
00:56:58,650 --> 00:57:08,969
these things just in a tight loop with

970
00:57:02,518 --> 00:57:10,679
no nothing else right so like the best

971
00:57:08,969 --> 00:57:13,639
possible case cuz it looks something

972
00:57:10,679 --> 00:57:13,639
like this right

973
00:57:22,739 --> 00:57:29,139
and you can just loop over this in

974
00:57:26,199 --> 00:57:31,629
process as fast as possible you know I

975
00:57:29,139 --> 00:57:34,750
mean so that's like what you would want

976
00:57:31,630 --> 00:57:38,608
to do and so the question is how do you

977
00:57:34,750 --> 00:57:42,039
get this part as efficient as possible

978
00:57:38,608 --> 00:57:46,769
the part where you just push on four

979
00:57:42,039 --> 00:57:46,769
boxes that you're doing

980
00:58:19,920 --> 00:58:24,150
hmm and so

981
00:58:31,730 --> 00:58:33,789
you

982
00:58:41,469 --> 00:58:53,559
yeah so looking at this right here I

983
00:58:57,309 --> 00:59:04,489
mean essentially there's a few ways we

984
00:59:00,230 --> 00:59:12,650
can go with this right we could try some

985
00:59:04,489 --> 00:59:17,809
pretty ridiculous stuff where we where

986
00:59:12,650 --> 00:59:20,240
we mask out ones that aren't in the set

987
00:59:17,809 --> 00:59:25,340
right we let these selects run so we

988
00:59:20,239 --> 00:59:32,989
could do like a child mask right that we

989
00:59:25,340 --> 00:59:34,519
load out of the box for and I mean I

990
00:59:32,989 --> 00:59:38,299
guess another way to look at it too

991
00:59:34,519 --> 00:59:42,320
would be since we know whether things

992
00:59:38,300 --> 00:59:47,269
are children or not do we really even

993
00:59:42,320 --> 00:59:47,450
need to write the loop that way all

994
00:59:47,269 --> 00:59:49,969
right

995
00:59:47,449 --> 00:59:51,618
I'm gonna delete this for now I I got to

996
00:59:49,969 --> 00:59:53,719
think about this I think I want to like

997
00:59:51,619 --> 00:59:55,700
just let it rot in the back of my brain

998
00:59:53,719 --> 00:59:58,909
for a little bit but just having looked

999
00:59:55,699 --> 01:00:03,079
at that that now begs the question here

1000
00:59:58,909 --> 01:00:06,469
so I feel like maybe we want this box to

1001
01:00:03,079 --> 01:00:11,380
tell us what it's children are right so

1002
01:00:06,469 --> 01:00:15,949
if you imagine doing an if here

1003
01:00:11,380 --> 01:00:18,410
basically where we would not have to do

1004
01:00:15,949 --> 01:00:21,079
the if on the inside of this thing I

1005
01:00:18,409 --> 01:00:26,569
feel like that might make a little bit

1006
01:00:21,079 --> 01:00:30,769
more sense as well so like when we pull

1007
01:00:26,570 --> 01:00:34,580
off the root box we would then loop over

1008
01:00:30,769 --> 01:00:36,320
the children of the root box in a

1009
01:00:34,579 --> 01:00:39,710
tighter loop if we know that they're

1010
01:00:36,320 --> 01:00:43,099
actual things we can hit if that makes

1011
01:00:39,710 --> 01:00:49,070
sense so you know if you imagine pulling

1012
01:00:43,099 --> 01:00:51,830
the if the child count if out to some

1013
01:00:49,070 --> 01:00:52,900
other things so let's suppose I did like

1014
01:00:51,829 --> 01:01:00,009
okay

1015
01:00:52,900 --> 01:01:03,249
root box you know is leaf container or

1016
01:01:00,009 --> 01:01:05,139
something so we just say sometimes we

1017
01:01:03,248 --> 01:01:07,358
know this you know we sorry as we know

1018
01:01:05,139 --> 01:01:10,509
this thing's a leaf sometimes we know

1019
01:01:07,358 --> 01:01:14,259
it's not right and then we just

1020
01:01:10,509 --> 01:01:17,909
specialize these two things so in one

1021
01:01:14,259 --> 01:01:24,429
case we say all right like give me the

1022
01:01:17,909 --> 01:01:26,498
you know give me the version of this

1023
01:01:24,429 --> 01:01:27,940
that operates one way and then give me

1024
01:01:26,498 --> 01:01:30,518
the version of this the operates the

1025
01:01:27,940 --> 01:01:34,269
other way so in the case where we know

1026
01:01:30,518 --> 01:01:37,899
that this thing is a leaf container then

1027
01:01:34,268 --> 01:01:41,379
we know that we're always testing leaves

1028
01:01:37,900 --> 01:01:45,818
when we're inside it and as we plow

1029
01:01:41,380 --> 01:01:50,980
through those we would say that we never

1030
01:01:45,818 --> 01:01:55,659
look at this case here right we just

1031
01:01:50,980 --> 01:01:57,818
want to know if we're in any closer case

1032
01:01:55,659 --> 01:02:02,608
and if we are then we're going to do

1033
01:01:57,818 --> 01:02:05,768
this thing otherwise we won't right and

1034
01:02:02,608 --> 01:02:09,639
we could get rid we could make this be

1035
01:02:05,768 --> 01:02:11,318
more streamlined with less ifs I don't

1036
01:02:09,639 --> 01:02:12,608
know that we actually want to do that

1037
01:02:11,318 --> 01:02:15,599
because there's a fair number of

1038
01:02:12,608 --> 01:02:18,159
computations actually happening in here

1039
01:02:15,599 --> 01:02:21,338
but it does mean that like this code

1040
01:02:18,159 --> 01:02:22,748
goes away right so you know we only need

1041
01:02:21,338 --> 01:02:28,058
any any closer

1042
01:02:22,748 --> 01:02:30,548
right and yeah and we could even just

1043
01:02:28,059 --> 01:02:33,430
say look if we if we stop doing this

1044
01:02:30,548 --> 01:02:35,650
stuff and we just look at what happens

1045
01:02:33,429 --> 01:02:37,719
with the if any true here we could also

1046
01:02:35,650 --> 01:02:41,430
say look maybe that's enough to just

1047
01:02:37,719 --> 01:02:41,429
just run the thing right

1048
01:02:52,789 --> 01:02:58,769
all right

1049
01:02:54,920 --> 01:03:00,360
so you know again just looking at this

1050
01:02:58,769 --> 01:03:02,190
like trying to get this down and we'd

1051
01:03:00,360 --> 01:03:03,690
say look this is what we're gonna do for

1052
01:03:02,190 --> 01:03:08,369
all of the boxes that we're actually

1053
01:03:03,690 --> 01:03:12,659
testing against and so that we don't

1054
01:03:08,369 --> 01:03:15,359
have to yeah so that we don't have to

1055
01:03:12,659 --> 01:03:19,710
like worry about it and we can do it in

1056
01:03:15,360 --> 01:03:22,170
a in a more condensed loop then the

1057
01:03:19,710 --> 01:03:24,449
other question is like all right when

1058
01:03:22,170 --> 01:03:30,200
we're on the other kind so now we're

1059
01:03:24,449 --> 01:03:30,199
doing partitions instead of leaves right

1060
01:03:30,800 --> 01:03:36,930
in that case we could also say look we

1061
01:03:35,070 --> 01:03:42,480
know how many there are because there's

1062
01:03:36,929 --> 01:03:43,619
always two or something like that I want

1063
01:03:42,480 --> 01:03:45,889
to say there's like only a certain

1064
01:03:43,619 --> 01:03:47,940
number of boxes and that's enough like

1065
01:03:45,889 --> 01:03:49,349
fixing that aspect of the hierarchy

1066
01:03:47,940 --> 01:03:52,409
might be another thing we should

1067
01:03:49,349 --> 01:03:54,659
probably do at some point but yeah so

1068
01:03:52,409 --> 01:03:56,549
you know taking a look at this loop here

1069
01:03:54,659 --> 01:04:00,179
we would leave this loop the same except

1070
01:03:56,550 --> 01:04:04,100
for now this part goes away right and

1071
01:04:00,179 --> 01:04:13,199
this goes away so it's mostly just that

1072
01:04:04,099 --> 01:04:21,239
and right and so now we just have two

1073
01:04:13,199 --> 01:04:25,439
sides of the thing and we can look at

1074
01:04:21,239 --> 01:04:27,959
them separately again I'm not sure it

1075
01:04:25,440 --> 01:04:29,700
makes sense to bother with this because

1076
01:04:27,960 --> 01:04:31,260
you've got another one down here so you

1077
01:04:29,699 --> 01:04:34,589
know maybe we do that and it just

1078
01:04:31,260 --> 01:04:36,960
simplifies that code as slightly we

1079
01:04:34,590 --> 01:04:39,269
could maybe turn this into a conditional

1080
01:04:36,960 --> 01:04:42,570
move or try to although I don't think

1081
01:04:39,269 --> 01:04:48,509
it's really gonna work but there would

1082
01:04:42,570 --> 01:04:51,200
be like a push or should push right and

1083
01:04:48,510 --> 01:04:52,980
then here we would just say all right

1084
01:04:51,199 --> 01:04:58,409
box

1085
01:04:52,980 --> 01:05:06,570
stack depth equals should push box stack

1086
01:04:58,409 --> 01:05:08,009
depth and will sign box back to it if we

1087
01:05:06,570 --> 01:05:10,289
want to actually we don't even really

1088
01:05:08,010 --> 01:05:13,830
need well block stack that way you can

1089
01:05:10,289 --> 01:05:21,150
see it's conditional move and then depth

1090
01:05:13,829 --> 01:05:22,199
equal should push depth plus one so

1091
01:05:21,150 --> 01:05:24,570
again we can start to turn these into

1092
01:05:22,199 --> 01:05:26,759
flatter things we don't really know that

1093
01:05:24,570 --> 01:05:29,160
we want to do that yet but I'm just this

1094
01:05:26,760 --> 01:05:30,930
is strictly for my benefit like I'm just

1095
01:05:29,159 --> 01:05:35,608
trying to read this and see what I think

1096
01:05:30,929 --> 01:05:37,949
of it right and so at that point all we

1097
01:05:35,608 --> 01:05:40,739
would really need to know is in that

1098
01:05:37,949 --> 01:05:46,980
lighting box nonsense we would need to

1099
01:05:40,739 --> 01:05:49,199
know if something was a leaf right so in

1100
01:05:46,980 --> 01:05:51,869
here where we've got like you know is

1101
01:05:49,199 --> 01:05:53,849
light or whatever we would just have I

1102
01:05:51,869 --> 01:05:55,740
guess it just be other flags right so in

1103
01:05:53,849 --> 01:06:01,549
addition to is light it would be like

1104
01:05:55,739 --> 01:06:01,549
you know is light you know is

1105
01:06:09,570 --> 01:06:16,800
yeah I guess it would just be is light

1106
01:06:12,000 --> 01:06:18,360
and is can his leaf container right and

1107
01:06:16,800 --> 01:06:20,460
then anyone who actually pushes one of

1108
01:06:18,360 --> 01:06:22,680
these things on you know instead of this

1109
01:06:20,460 --> 01:06:25,050
sort of thing they would actually be

1110
01:06:22,679 --> 01:06:29,969
just when they like pushing an occluder

1111
01:06:25,050 --> 01:06:32,360
or something like that right they would

1112
01:06:29,969 --> 01:06:34,980
just be you know setting that to zero

1113
01:06:32,360 --> 01:06:37,730
when you're pushing on a light you would

1114
01:06:34,980 --> 01:06:46,230
be setting leaf container to you know

1115
01:06:37,730 --> 01:06:53,340
equal like you know some flag that

1116
01:06:46,230 --> 01:06:56,070
equals that something like this and so

1117
01:06:53,340 --> 01:07:15,780
if we look at where the lending box is

1118
01:06:56,070 --> 01:07:17,970
defined there just be you know maybe

1119
01:07:15,780 --> 01:07:25,380
I'll do it like this doesn't really

1120
01:07:17,969 --> 01:07:26,879
matter but something like that so you

1121
01:07:25,380 --> 01:07:29,160
know we would set whether or not it's a

1122
01:07:26,880 --> 01:07:30,720
light based on that and then here we

1123
01:07:29,159 --> 01:07:35,299
would just say all right is light is

1124
01:07:30,719 --> 01:07:35,299
leaf container if it you know ends with

1125
01:07:35,360 --> 01:07:40,370
that way it doesn't add any more space

1126
01:07:45,960 --> 01:07:56,068
something like that this part here I'm

1127
01:07:54,329 --> 01:07:59,010
gonna go ahead and say we don't really

1128
01:07:56,068 --> 01:08:03,300
need this anymore anyway so I'm going to

1129
01:07:59,010 --> 01:08:10,940
take this out and not we're not really

1130
01:08:03,300 --> 01:08:10,940
gonna use that I don't think so

1131
01:08:12,079 --> 01:08:17,520
all right so let's go ahead and get this

1132
01:08:15,780 --> 01:08:18,989
working now because I'm curious to know

1133
01:08:17,520 --> 01:08:25,500
oh by the way also since we're not

1134
01:08:18,988 --> 01:08:28,500
casting here how fast is this so kind of

1135
01:08:25,500 --> 01:08:29,670
weirdly flickery there of timing it's a

1136
01:08:28,500 --> 01:08:31,939
little bit hard to tell what's going on

1137
01:08:29,670 --> 01:08:31,940
there

1138
01:08:32,060 --> 01:08:35,330
but alright

1139
01:08:40,859 --> 01:08:45,390
so anyway in terms of knowing what to

1140
01:08:43,380 --> 01:08:47,039
actually test there what we have to do

1141
01:08:45,390 --> 01:08:49,588
is we have to actually set that

1142
01:08:47,039 --> 01:08:53,699
container flag so when we're doing split

1143
01:08:49,588 --> 01:08:59,068
box in here whenever we create one of

1144
01:08:53,699 --> 01:09:00,869
these boxes that we need to split don't

1145
01:08:59,069 --> 01:09:01,980
really know what the if one is here for

1146
01:09:00,869 --> 01:09:03,539
it to be completely honest with you I

1147
01:09:01,979 --> 01:09:05,159
guess we were looking at some kind of

1148
01:09:03,539 --> 01:09:10,170
non split case or something like that

1149
01:09:05,159 --> 01:09:11,579
but I get rid of that now so if we

1150
01:09:10,170 --> 01:09:14,670
actually look at how we're splitting up

1151
01:09:11,579 --> 01:09:15,838
this hierarchy here which again is

1152
01:09:14,670 --> 01:09:17,220
another thing we can look at improving

1153
01:09:15,838 --> 01:09:22,170
because our hierarchy could probably be

1154
01:09:17,220 --> 01:09:24,630
a lot better but when we and you know

1155
01:09:22,170 --> 01:09:26,250
what this is also the case of something

1156
01:09:24,630 --> 01:09:28,588
we could do where if we just actually

1157
01:09:26,250 --> 01:09:30,689
since this KT tree like here we could

1158
01:09:28,588 --> 01:09:32,399
just start doing it as a KD tree so that

1159
01:09:30,689 --> 01:09:34,710
we didn't actually do a box test now

1160
01:09:32,399 --> 01:09:37,289
that we'd split the loops out right but

1161
01:09:34,710 --> 01:09:40,189
anyway so when we come through here and

1162
01:09:37,289 --> 01:09:43,159
we say we're gonna split this box and we

1163
01:09:40,189 --> 01:09:45,869
put the children into the box I guess

1164
01:09:43,159 --> 01:09:48,358
you can see like it's setting the child

1165
01:09:45,869 --> 01:09:51,659
count here I think all we would have to

1166
01:09:48,359 --> 01:09:55,470
do is remember whether or not we needed

1167
01:09:51,659 --> 01:10:02,039
to split any of the children right so I

1168
01:09:55,470 --> 01:10:08,730
think it's just saying look loop over

1169
01:10:02,039 --> 01:10:10,738
the split plains here if the count a and

1170
01:10:08,729 --> 01:10:13,829
count B are both you know it's if we

1171
01:10:10,738 --> 01:10:18,479
actually did a split then we start just

1172
01:10:13,829 --> 01:10:26,238
with the children right and so in that

1173
01:10:18,479 --> 01:10:26,238
case I guess we just need to know

1174
01:10:38,969 --> 01:10:45,550
so I guess I'm not sure so when that

1175
01:10:43,269 --> 01:10:47,559
into that builds the entire Harkey just

1176
01:10:45,550 --> 01:10:51,099
within that one loop right you can kind

1177
01:10:47,559 --> 01:10:53,170
of see it so I guess what happens is if

1178
01:10:51,099 --> 01:10:54,849
the source count is greater than four it

1179
01:10:53,170 --> 01:10:55,269
actually tries to do it if the source

1180
01:10:54,849 --> 01:10:59,380
count

1181
01:10:55,269 --> 01:11:05,110
isn't it just stuffs it in here right so

1182
01:10:59,380 --> 01:11:12,880
I guess all we need to do is find out if

1183
01:11:05,109 --> 01:11:14,859
we actually did split the boxes and if

1184
01:11:12,880 --> 01:11:16,538
we change the source count there right

1185
01:11:14,859 --> 01:11:18,788
so we just need to know if we did this

1186
01:11:16,538 --> 01:11:22,300
because if we did this then there's

1187
01:11:18,788 --> 01:11:25,840
other split boxes beneath us but if we

1188
01:11:22,300 --> 01:11:27,670
didn't then there aren't right so I

1189
01:11:25,840 --> 01:11:36,460
think that that's all we really need to

1190
01:11:27,670 --> 01:11:42,340
do so you know I guess we would just do

1191
01:11:36,460 --> 01:11:46,328
something like this so then here we just

1192
01:11:42,340 --> 01:11:58,139
do look if we actually split then we're

1193
01:11:46,328 --> 01:12:01,649
not a leaf container if we did we are

1194
01:11:58,139 --> 01:12:01,650
does that seem right

1195
01:12:05,199 --> 01:12:17,000
apparently not it's kind of an

1196
01:12:11,090 --> 01:12:25,819
interesting effect I'm not sure what's

1197
01:12:17,000 --> 01:12:27,229
actually happening there so it looks

1198
01:12:25,819 --> 01:12:29,000
like that's not quite correct although I

1199
01:12:27,229 --> 01:12:31,549
don't actually know it may actually be

1200
01:12:29,000 --> 01:12:35,779
correct and it's just the actual test

1201
01:12:31,550 --> 01:12:37,550
that's not correct but yeah so in here

1202
01:12:35,779 --> 01:12:39,679
where we add bucks references and we

1203
01:12:37,550 --> 01:12:42,110
stuff those in here right and we're

1204
01:12:39,680 --> 01:12:45,170
going ahead and doing is is lightest

1205
01:12:42,109 --> 01:12:47,689
leaf container and we order that in I

1206
01:12:45,170 --> 01:12:52,010
believe so if we come through here and

1207
01:12:47,689 --> 01:12:54,649
we've actually split then the boxes in

1208
01:12:52,010 --> 01:12:56,869
question are going to be tested against

1209
01:12:54,649 --> 01:12:58,250
for actual they're arguing this for

1210
01:12:56,869 --> 01:13:00,829
actual question because they they

1211
01:12:58,250 --> 01:13:02,779
themselves might have children I guess

1212
01:13:00,829 --> 01:13:08,380
you know maybe what we have to do though

1213
01:13:02,779 --> 01:13:08,380
is verify that the box did get split so

1214
01:13:10,569 --> 01:13:20,269
although no because because it's always

1215
01:13:16,369 --> 01:13:22,369
going to be a parent box right so that's

1216
01:13:20,270 --> 01:13:26,930
that's not true it's creating these

1217
01:13:22,369 --> 01:13:28,039
boxes here right I guess another way to

1218
01:13:26,930 --> 01:13:29,690
look at it is I guess we don't even

1219
01:13:28,039 --> 01:13:38,079
really have to do this we know that

1220
01:13:29,689 --> 01:13:40,669
anybody who had like I don't know I

1221
01:13:38,079 --> 01:13:42,739
think that's right so I don't know that

1222
01:13:40,670 --> 01:13:44,930
seems right to me does it not seem right

1223
01:13:42,739 --> 01:13:47,329
to you that feels right to me I'm not

1224
01:13:44,930 --> 01:13:49,490
sure why we're getting not sure why that

1225
01:13:47,329 --> 01:13:51,439
wouldn't it worked so I guess we'll have

1226
01:13:49,489 --> 01:13:52,729
to take a look at at the code more

1227
01:13:51,439 --> 01:13:58,689
carefully to figure out what I screwed

1228
01:13:52,729 --> 01:13:58,689
up but it seems like

1229
01:14:01,960 --> 01:14:04,020
you

1230
01:14:06,488 --> 01:14:10,359
it seems like that should be doing the

1231
01:14:08,649 --> 01:14:15,579
right thing what are the stats again on

1232
01:14:10,359 --> 01:14:18,189
that total cast initiated till the

1233
01:14:15,579 --> 01:14:30,010
partitions tested total leaves used to

1234
01:14:18,189 --> 01:14:33,159
the leaves tested wait what oh I've got

1235
01:14:30,010 --> 01:14:35,380
it backwards did I get it backwards no

1236
01:14:33,159 --> 01:14:37,180
no I didn't so for each one of these

1237
01:14:35,380 --> 01:14:38,409
were doing total ease tested for each

1238
01:14:37,180 --> 01:14:48,280
one of these we're doing total

1239
01:14:38,409 --> 01:14:56,170
partitions tested so yeah I mean

1240
01:14:48,279 --> 01:14:57,639
shouldn't that work I don't get it we

1241
01:14:56,170 --> 01:14:59,560
should have been seeing something come

1242
01:14:57,640 --> 01:15:05,800
through here right so you're telling me

1243
01:14:59,560 --> 01:15:09,610
that that the is leaf container and you

1244
01:15:05,800 --> 01:15:20,890
know is the container there is always

1245
01:15:09,609 --> 01:15:23,189
set so actually split is false if you

1246
01:15:20,890 --> 01:15:26,500
come through here actually split is true

1247
01:15:23,189 --> 01:15:34,449
so at that point this is true you would

1248
01:15:26,500 --> 01:15:39,449
not pour this in right so we should be

1249
01:15:34,449 --> 01:15:39,449
getting to this case how are we not

1250
01:15:49,180 --> 01:15:53,030
what am I missing there because I'm

1251
01:15:51,380 --> 01:15:55,520
obviously missing something since total

1252
01:15:53,029 --> 01:15:57,679
partitions tested is never getting hit

1253
01:15:55,520 --> 01:15:59,750
so let's go ahead and step in here I'm

1254
01:15:57,680 --> 01:16:05,470
gonna set this to debug mode because I I

1255
01:15:59,750 --> 01:16:05,470
don't have an idea of why that's failing

1256
01:16:09,369 --> 01:16:20,149
and that's in raycast so inside raycast

1257
01:16:16,520 --> 01:16:21,650
here I should probably also set us to

1258
01:16:20,149 --> 01:16:27,139
single thread I don't know if you can

1259
01:16:21,649 --> 01:16:28,729
freeze threads I think like single

1260
01:16:27,140 --> 01:16:30,170
thread stepping was something that that

1261
01:16:28,729 --> 01:16:31,489
was supposed to be added at some point

1262
01:16:30,170 --> 01:16:35,750
but I don't actually know how to do it

1263
01:16:31,489 --> 01:16:36,769
and it may or may not be in here so I'm

1264
01:16:35,750 --> 01:16:37,939
gonna go ahead and turn off all the

1265
01:16:36,770 --> 01:16:40,510
threading for a second so I don't have

1266
01:16:37,939 --> 01:16:40,509
to deal with it

1267
01:16:51,569 --> 01:16:58,689
so right here I'm just gonna say look go

1268
01:16:54,729 --> 01:16:59,979
ahead and do the work that way we only

1269
01:16:58,689 --> 01:17:03,309
have one thing to look at

1270
01:16:59,979 --> 01:17:05,649
so in the raycast what I just want to do

1271
01:17:03,310 --> 01:17:07,180
is see what am I not understanding about

1272
01:17:05,649 --> 01:17:08,920
what's happening here because we should

1273
01:17:07,180 --> 01:17:11,739
hit that case at least sometimes but we

1274
01:17:08,920 --> 01:17:13,210
don't so let me see like what does this

1275
01:17:11,738 --> 01:17:14,979
box look like what are these root box

1276
01:17:13,210 --> 01:17:19,149
look like are they just totally not

1277
01:17:14,979 --> 01:17:23,679
correct so this is just zero even at the

1278
01:17:19,149 --> 01:17:26,079
root weight but that's correct so we

1279
01:17:23,680 --> 01:17:34,060
should hit this and there's total

1280
01:17:26,079 --> 01:17:36,279
partitions tested what the hey so if

1281
01:17:34,060 --> 01:17:38,230
total partitions tested is getting

1282
01:17:36,279 --> 01:17:41,679
incremented how am I not seeing it are

1283
01:17:38,229 --> 01:17:47,019
we reporting those numbers wrong there

1284
01:17:41,680 --> 01:17:51,340
is total partitions tested did I miss

1285
01:17:47,020 --> 01:17:53,940
something is that does that not say what

1286
01:17:51,340 --> 01:17:53,940
I thought it said

1287
01:18:02,960 --> 01:18:15,890
yeah total partitions test at zero hmm

1288
01:18:10,399 --> 01:18:19,250
so if that's coming back is zero and yet

1289
01:18:15,890 --> 01:18:21,440
I just watched it get added there must

1290
01:18:19,250 --> 01:18:31,399
be some kind of a thing where it's not

1291
01:18:21,439 --> 01:18:37,009
actually tracking it properly although

1292
01:18:31,399 --> 01:18:40,759
in this case I suppose no I don't know

1293
01:18:37,010 --> 01:18:44,690
what because here it is right we loop

1294
01:18:40,760 --> 01:18:47,150
over this we put in a bunch of ads right

1295
01:18:44,689 --> 01:18:49,969
caste initiated partitions tested leaves

1296
01:18:47,149 --> 01:18:56,420
uses leaves used and I mean there there

1297
01:18:49,970 --> 01:19:01,060
it is printed out so like what the heck

1298
01:18:56,420 --> 01:19:01,060
is happening there

1299
01:19:05,229 --> 01:19:10,029
so let's do another step in the debating

1300
01:19:08,470 --> 01:19:14,530
to find out how we're getting the wrong

1301
01:19:10,029 --> 01:19:22,599
values because that doesn't really make

1302
01:19:14,529 --> 01:19:29,739
any sense does it so I'm curious about

1303
01:19:22,600 --> 01:19:33,730
this here's the call so I'm going to run

1304
01:19:29,739 --> 01:19:36,519
through to that call specifically right

1305
01:19:33,729 --> 01:19:39,279
and then what I want to do is I want to

1306
01:19:36,520 --> 01:19:46,210
look at work to see like there's total

1307
01:19:39,279 --> 01:19:48,819
partitions tested 41 880 right so then

1308
01:19:46,210 --> 01:19:51,069
we're gonna come through here and the

1309
01:19:48,819 --> 01:19:53,529
work count you know is whatever the work

1310
01:19:51,069 --> 01:19:54,639
count is we're then going to look at

1311
01:19:53,529 --> 01:19:57,849
each one in turn

1312
01:19:54,640 --> 01:20:11,560
there's televisions tested so we're

1313
01:19:57,850 --> 01:20:13,630
gonna add that to this there we go so we

1314
01:20:11,560 --> 01:20:20,590
just like overflowing this variable

1315
01:20:13,630 --> 01:20:22,989
somehow no so that's one one nine seven

1316
01:20:20,590 --> 01:20:26,760
104 is what we're supposed to be sending

1317
01:20:22,989 --> 01:20:26,760
out to the debug system

1318
01:20:35,219 --> 01:20:47,550
but now it is zero what so the first

1319
01:20:43,170 --> 01:20:54,090
time through it is correct the next time

1320
01:20:47,550 --> 01:20:55,890
through it's not okay is it not testing

1321
01:20:54,090 --> 01:21:00,739
the next time through so is the lighting

1322
01:20:55,890 --> 01:21:00,739
hierarchy wrong after a frame

1323
01:21:14,819 --> 01:21:25,369
okay so we must not be clearing those I

1324
01:21:22,369 --> 01:21:25,369
guess

1325
01:21:34,270 --> 01:21:38,420
so the two places I know that we can do

1326
01:21:36,800 --> 01:21:40,190
it is on the push occluder and push

1327
01:21:38,420 --> 01:21:43,699
light there's really two things that we

1328
01:21:40,189 --> 01:21:49,339
can push as far as I know when we

1329
01:21:43,698 --> 01:21:51,738
actually do our oh so maybe this just

1330
01:21:49,340 --> 01:21:53,779
doesn't clear anything I guess it's

1331
01:21:51,738 --> 01:21:55,459
possible that split box actually is

1332
01:21:53,779 --> 01:21:57,920
trying to be efficient and just never

1333
01:21:55,460 --> 01:22:00,289
sets that value so I guess what we would

1334
01:21:57,920 --> 01:22:03,920
actually need to do there is set this

1335
01:22:00,289 --> 01:22:14,210
explicitly so maybe it really needs to

1336
01:22:03,920 --> 01:22:16,969
do something more like this I guess okay

1337
01:22:14,210 --> 01:22:18,559
I mean I guess that's efficient we were

1338
01:22:16,969 --> 01:22:21,849
trying to be efficient here we didn't

1339
01:22:18,559 --> 01:22:23,960
clear you know we weren't in a sort of

1340
01:22:21,849 --> 01:22:25,760
defensive programming clear everything

1341
01:22:23,960 --> 01:22:30,469
mode because we didn't want to spend

1342
01:22:25,760 --> 01:22:32,449
that time so I guess that's fine all

1343
01:22:30,469 --> 01:22:37,609
right now let's see if this thing is

1344
01:22:32,448 --> 01:22:39,589
actually producing correct numbers that

1345
01:22:37,609 --> 01:22:41,738
was cool I mean it was bad but it was

1346
01:22:39,590 --> 01:22:41,739
cool

1347
01:22:48,729 --> 01:22:59,719
so that seems pretty good Wow

1348
01:22:52,809 --> 01:23:01,179
that's running at 50 milliseconds that's

1349
01:22:59,719 --> 01:23:03,889
single-threaded

1350
01:23:01,179 --> 01:23:07,359
how is that running so much faster all

1351
01:23:03,889 --> 01:23:10,458
of a sudden hold on a second

1352
01:23:07,359 --> 01:23:12,639
so what happens when I turn on threading

1353
01:23:10,458 --> 01:23:12,639
now

1354
01:23:24,560 --> 01:23:31,940
um so that seems pretty cool actually

1355
01:23:28,670 --> 01:23:35,810
right it actually seems like that makes

1356
01:23:31,939 --> 01:23:40,460
a substantial difference in the speed to

1357
01:23:35,810 --> 01:23:46,460
be completely honest right because that

1358
01:23:40,460 --> 01:23:50,689
also that's a bit weird that the frame

1359
01:23:46,460 --> 01:23:52,399
time doesn't go down by a factor of six

1360
01:23:50,689 --> 01:23:54,199
since these should be independent I

1361
01:23:52,399 --> 01:23:58,250
wonder if that means we got some memory

1362
01:23:54,199 --> 01:24:01,840
boundness happening here the heck is

1363
01:23:58,250 --> 01:24:01,840
this what's happening out here

1364
01:24:20,849 --> 01:24:26,260
hmm HM hmm all right so we're starting

1365
01:24:24,399 --> 01:24:28,029
to get somewhere here honestly looking

1366
01:24:26,260 --> 01:24:30,639
at that frame time it's starting to look

1367
01:24:28,029 --> 01:24:36,279
pretty small actually the lighting is

1368
01:24:30,639 --> 01:24:38,078
not really occupying as much time now

1369
01:24:36,279 --> 01:24:40,750
and I'm a little concerned as to why

1370
01:24:38,078 --> 01:24:46,750
it's showing up as high on the profile

1371
01:24:40,750 --> 01:24:49,359
I guess this sixty is because it's

1372
01:24:46,750 --> 01:24:52,328
looking at it across six threads so I

1373
01:24:49,359 --> 01:24:58,348
think that means the cast is now the

1374
01:24:52,328 --> 01:25:06,368
same cost as this and the frame display

1375
01:24:58,349 --> 01:25:08,500
right so I think that actually was

1376
01:25:06,368 --> 01:25:16,658
pretty cool

1377
01:25:08,500 --> 01:25:18,340
I guess it's hard to say but I mean yeah

1378
01:25:16,658 --> 01:25:19,808
like it looks like we're actually in the

1379
01:25:18,340 --> 01:25:25,900
point where we're gonna have to start

1380
01:25:19,809 --> 01:25:29,170
fixing the renderer which is fine but

1381
01:25:25,899 --> 01:25:33,638
look at that because at this point I

1382
01:25:29,170 --> 01:25:38,020
think that clocks is summed so I'm I

1383
01:25:33,639 --> 01:25:41,109
think in other words let me just just to

1384
01:25:38,020 --> 01:25:47,440
try and put this in perspective so full

1385
01:25:41,109 --> 01:25:49,509
cast is threaded so I think if we

1386
01:25:47,439 --> 01:25:51,698
actually stopped timing full cast and

1387
01:25:49,510 --> 01:25:54,699
just timed the lighting update outside

1388
01:25:51,698 --> 01:25:58,569
the threads that would be a fairer test

1389
01:25:54,698 --> 01:26:01,328
I don't know if that makes sense but if

1390
01:25:58,569 --> 01:26:09,689
we effectively said look I'm at time and

1391
01:26:01,328 --> 01:26:09,689
lighting which is is there and only that

1392
01:26:15,520 --> 01:26:21,400
now you can see a fairer estimate of

1393
01:26:18,760 --> 01:26:24,250
what's happening right so now we're like

1394
01:26:21,399 --> 01:26:29,789
evenly split CPU GPU waiting around

1395
01:26:24,250 --> 01:26:33,159
right so I think I would just miss like

1396
01:26:29,789 --> 01:26:36,510
miss counting that sort of how fast we

1397
01:26:33,159 --> 01:26:40,090
actually were we're actually quite fast

1398
01:26:36,510 --> 01:26:42,699
and I wonder what would happen if I

1399
01:26:40,090 --> 01:26:49,390
enable the checkerboard or just stop

1400
01:26:42,699 --> 01:26:50,859
doing the checkerboard now right I'm

1401
01:26:49,390 --> 01:26:53,280
wondering what that effect has on the

1402
01:26:50,859 --> 01:26:53,279
frame time

1403
01:27:02,229 --> 01:27:06,760
cuz yeah that's just like we're not even

1404
01:27:04,238 --> 01:27:12,399
number one on the board anymore half the

1405
01:27:06,760 --> 01:27:15,610
time so let's go ahead and take a look

1406
01:27:12,399 --> 01:27:19,259
and see if we turn off the

1407
01:27:15,609 --> 01:27:22,679
checkerboarding so just get rid of that

1408
01:27:19,260 --> 01:27:22,679
I'm curious

1409
01:27:33,050 --> 01:27:38,699
so without checkerboarding we do end up

1410
01:27:36,329 --> 01:27:43,739
a little bit worse right you can see now

1411
01:27:38,699 --> 01:27:45,389
we're where's consistently on top so

1412
01:27:43,739 --> 01:27:48,449
it's still not optimal right it's not

1413
01:27:45,390 --> 01:27:49,770
great but we're still hitting 30 just

1414
01:27:48,449 --> 01:27:55,590
fine

1415
01:27:49,770 --> 01:27:58,400
now without checkerboard right so that's

1416
01:27:55,590 --> 01:27:58,400
pretty cool actually

1417
01:28:07,168 --> 01:28:12,809
and I wonder what happens if we turn off

1418
01:28:09,840 --> 01:28:14,458
the diffuse copy I'm also curious about

1419
01:28:12,809 --> 01:28:16,199
that because that's very expensive I

1420
01:28:14,458 --> 01:28:19,288
want to see how expensive that actually

1421
01:28:16,198 --> 01:28:22,609
is at the moment so when we actually do

1422
01:28:19,288 --> 01:28:22,609
our diffuse lighting here

1423
01:28:39,158 --> 01:28:45,969
so we could actually also make a

1424
01:28:41,328 --> 01:28:48,828
substantial difference there right by

1425
01:28:45,969 --> 01:28:53,769
optimizing that code so by optimizing

1426
01:28:48,828 --> 01:28:59,618
that copy so that is now like

1427
01:28:53,769 --> 01:28:59,619
significantly bad I would say

1428
01:29:11,369 --> 01:29:15,119
all right so

1429
01:29:26,770 --> 01:29:38,570
so I guess I have a few more questions

1430
01:29:29,000 --> 01:29:40,550
as well so if I go now and I say all

1431
01:29:38,569 --> 01:29:42,380
right why don't you try building the

1432
01:29:40,550 --> 01:29:44,750
hierarchy a little bit differently so

1433
01:29:42,380 --> 01:29:47,390
like if I go to split box and I just say

1434
01:29:44,750 --> 01:29:49,930
look for how about instead of four we

1435
01:29:47,390 --> 01:29:49,930
say it's a

1436
01:29:58,260 --> 01:30:02,909
how about it's too

1437
01:30:06,889 --> 01:30:17,368
how about its four so it's interesting

1438
01:30:13,948 --> 01:30:20,759
like it's not even sensitive

1439
01:30:17,368 --> 01:30:24,479
particularly much to us how we're

1440
01:30:20,760 --> 01:30:26,010
building that hierarchy either so yeah I

1441
01:30:24,479 --> 01:30:30,269
think we're onto something here

1442
01:30:26,010 --> 01:30:33,570
I think basically like our raycast is

1443
01:30:30,270 --> 01:30:40,860
now pretty much substantially better

1444
01:30:33,569 --> 01:30:42,149
than it was interesting interesting

1445
01:30:40,859 --> 01:30:44,670
interesting

1446
01:30:42,149 --> 01:30:46,500
so I'm also wondering what happens if we

1447
01:30:44,670 --> 01:30:49,050
cast more Ray's like how much do these

1448
01:30:46,500 --> 01:30:52,889
rays actually cost now I'm actually

1449
01:30:49,050 --> 01:31:06,300
somewhat confused about that cost a

1450
01:30:52,889 --> 01:31:08,639
little bit and and I wonder if you know

1451
01:31:06,300 --> 01:31:10,770
if we changed the way we were doing this

1452
01:31:08,639 --> 01:31:12,118
now I wonder if we could even do

1453
01:31:10,770 --> 01:31:13,980
something a little bit different where

1454
01:31:12,118 --> 01:31:19,618
we said instead let's cast for Ray's out

1455
01:31:13,979 --> 01:31:21,269
of the same lock octagonal slot and do

1456
01:31:19,618 --> 01:31:26,729
four times higher lighter lighting

1457
01:31:21,270 --> 01:31:31,679
quality that way because it's looks like

1458
01:31:26,729 --> 01:31:39,359
actually that traversal is yeah like

1459
01:31:31,679 --> 01:31:41,130
fairly yeah mmm-hmm cuz the yeah I mean

1460
01:31:39,359 --> 01:31:43,439
it's really kind of wild at this point

1461
01:31:41,130 --> 01:31:45,029
looking at what we could dig in pretty

1462
01:31:43,439 --> 01:31:46,979
deep into this I think because it looks

1463
01:31:45,029 --> 01:31:50,279
like we're we're actually doing pretty

1464
01:31:46,979 --> 01:31:52,348
well and looking at the performance here

1465
01:31:50,279 --> 01:31:58,969
we're gonna need a more accurate way to

1466
01:31:52,349 --> 01:31:58,969
measure this I feel like

1467
01:32:09,090 --> 01:32:16,630
because it it seems like almost not that

1468
01:32:13,920 --> 01:32:21,789
it's it's really hard to look at the

1469
01:32:16,630 --> 01:32:23,289
difference I'm a just and you see like

1470
01:32:21,789 --> 01:32:26,890
what's happening here with these slots

1471
01:32:23,289 --> 01:32:30,390
to it's just we're just not having a

1472
01:32:26,890 --> 01:32:30,390
particularly stable timing here

1473
01:32:47,149 --> 01:32:50,809
I mean it's almost like it doesn't

1474
01:32:49,340 --> 01:32:54,050
really care what I'm doing it's it's

1475
01:32:50,809 --> 01:32:55,489
it's surprising how a little of

1476
01:32:54,050 --> 01:32:58,010
different some of these things make but

1477
01:32:55,488 --> 01:33:00,138
anyway so I'm not sure like that we're

1478
01:32:58,010 --> 01:33:02,510
doing the best job how were distributing

1479
01:33:00,139 --> 01:33:05,389
to raise the moment as a result of what

1480
01:33:02,510 --> 01:33:07,280
we're seeing so because it may be that

1481
01:33:05,389 --> 01:33:09,260
if we cast rays that are closer together

1482
01:33:07,279 --> 01:33:12,018
will get better traversal and end up

1483
01:33:09,260 --> 01:33:14,269
getting like lighting of similar at a

1484
01:33:12,019 --> 01:33:16,429
similar cost but that's actually much

1485
01:33:14,269 --> 01:33:18,739
better right

1486
01:33:16,429 --> 01:33:22,489
and furthermore like yeah if you take a

1487
01:33:18,738 --> 01:33:25,478
look at the blending and our there's a

1488
01:33:22,488 --> 01:33:29,658
bunch of other things we can sort of

1489
01:33:25,479 --> 01:33:33,340
tweak here right but if we look at

1490
01:33:29,658 --> 01:33:33,339
what's happening blend wise

1491
01:34:01,529 --> 01:34:05,859
what I'm trying to do now is figure out

1492
01:34:03,729 --> 01:34:08,349
what an estimate it would be for if we

1493
01:34:05,859 --> 01:34:10,659
wanted it to be quite stable what we

1494
01:34:08,350 --> 01:34:12,670
would have to do I don't know that I

1495
01:34:10,659 --> 01:34:14,079
really want it stable I kind of want it

1496
01:34:12,670 --> 01:34:16,810
to be flickery because I like that

1497
01:34:14,079 --> 01:34:21,460
effect but I could I suppose I can get

1498
01:34:16,810 --> 01:34:23,050
that by just flickering the lights so we

1499
01:34:21,460 --> 01:34:25,119
may want to do some better sampling

1500
01:34:23,050 --> 01:34:29,470
integration too because it may be that

1501
01:34:25,119 --> 01:34:31,720
like you know we can do a better job

1502
01:34:29,470 --> 01:34:38,890
using the samples we have than we're

1503
01:34:31,720 --> 01:34:45,730
doing right now but it looks like if we

1504
01:34:38,890 --> 01:34:48,520
were to do twice as many samples it

1505
01:34:45,729 --> 01:34:50,609
wouldn't look that much different but if

1506
01:34:48,520 --> 01:34:53,080
we were to do four times as many samples

1507
01:34:50,609 --> 01:34:55,719
it would look like this with the same

1508
01:34:53,079 --> 01:34:57,640
algorithm and this is considerably

1509
01:34:55,720 --> 01:34:59,650
smoother right and there wouldn't be any

1510
01:34:57,640 --> 01:35:03,670
lag because we'd be doing four times the

1511
01:34:59,649 --> 01:35:07,539
samples so I would be interested to know

1512
01:35:03,670 --> 01:35:11,980
if maybe that's a if that's a smart way

1513
01:35:07,539 --> 01:35:14,310
to go you see a little bit of on really

1514
01:35:11,979 --> 01:35:16,839
distant stuff you see a little bit of

1515
01:35:14,310 --> 01:35:20,140
flicker still but otherwise it would be

1516
01:35:16,840 --> 01:35:24,420
quite stable right and like I said I

1517
01:35:20,140 --> 01:35:27,789
think we may be able to change that by

1518
01:35:24,420 --> 01:35:29,590
perhaps looking at the total

1519
01:35:27,789 --> 01:35:32,850
contribution that something's making and

1520
01:35:29,590 --> 01:35:35,350
picking the T update blend based on that

1521
01:35:32,850 --> 01:35:38,389
you know what I mean

1522
01:35:35,350 --> 01:35:38,389
[Music]

1523
01:35:42,269 --> 01:35:49,570
just basically doing some importance

1524
01:35:44,498 --> 01:35:51,609
like some measure of like importance

1525
01:35:49,569 --> 01:35:57,368
sampling there to reintegrate those over

1526
01:35:51,609 --> 01:36:00,458
time yeah so gosh

1527
01:35:57,368 --> 01:36:03,219
yeah I'm not sure what to do next it

1528
01:36:00,458 --> 01:36:05,889
does look like 8 over 60 is plenty so if

1529
01:36:03,219 --> 01:36:11,889
we had four times the samples which we

1530
01:36:05,889 --> 01:36:15,668
could do we would basically get mostly

1531
01:36:11,889 --> 01:36:18,929
flicker free lighting at that point it

1532
01:36:15,668 --> 01:36:21,279
looks like and it would be pretty much

1533
01:36:18,929 --> 01:36:22,630
indistinguishable in terms of updates

1534
01:36:21,279 --> 01:36:24,849
because you can see like I don't really

1535
01:36:22,630 --> 01:36:26,439
see any lag at this speed and so if we

1536
01:36:24,849 --> 01:36:27,788
have the quality of the previous one

1537
01:36:26,439 --> 01:36:30,119
with the speed of this that's what we

1538
01:36:27,788 --> 01:36:39,609
would have if we were doing four raise

1539
01:36:30,118 --> 01:36:40,958
per octal instead of one in theory look

1540
01:36:39,609 --> 01:36:45,589
I'm not sure that's a perfect test but

1541
01:36:40,958 --> 01:36:48,720
it's something like that interesting

1542
01:36:45,590 --> 01:36:48,720
[Music]

1543
01:36:51,579 --> 01:36:55,359
and I guess I also don't know that our

1544
01:36:53,890 --> 01:36:56,770
entropy is working particularly well

1545
01:36:55,359 --> 01:36:58,750
here either but I guess that's sort of a

1546
01:36:56,770 --> 01:37:03,250
separate point but yet like so if you

1547
01:36:58,750 --> 01:37:05,949
imagine like if you imagine just doing

1548
01:37:03,250 --> 01:37:09,609
this for X so like imagine you just did

1549
01:37:05,949 --> 01:37:11,229
this four times right so and it would be

1550
01:37:09,609 --> 01:37:12,489
faster because we'd be doing it that

1551
01:37:11,229 --> 01:37:14,319
means the rays would be in a pretty

1552
01:37:12,489 --> 01:37:17,439
tight bundle but if so if you imagine

1553
01:37:14,319 --> 01:37:18,159
just doing like where we're calling the

1554
01:37:17,439 --> 01:37:24,339
raycast

1555
01:37:18,159 --> 01:37:27,309
so here right where we're grabbing out

1556
01:37:24,340 --> 01:37:29,199
the sampling sphere and we have the

1557
01:37:27,310 --> 01:37:34,950
entropy index I mean I guess I could

1558
01:37:29,199 --> 01:37:34,949
even just do this in the work load but

1559
01:37:38,159 --> 01:37:52,510
if we throw on an over sampling pass

1560
01:37:41,409 --> 01:37:56,199
here right like so and we effectively

1561
01:37:52,510 --> 01:37:59,020
say alright the entropy index you know

1562
01:37:56,199 --> 01:38:06,159
is gonna be like plus equals something

1563
01:37:59,020 --> 01:38:07,630
at the end of this so if we add a 4x

1564
01:38:06,159 --> 01:38:10,630
over sampling there we can sort of see

1565
01:38:07,630 --> 01:38:12,430
it wouldn't it won't it will be slow but

1566
01:38:10,630 --> 01:38:16,739
we did presumably see what we'd actually

1567
01:38:12,430 --> 01:38:16,740
get that looks like

1568
01:38:28,000 --> 01:38:32,289
so that doesn't actually look better

1569
01:38:29,710 --> 01:38:33,970
which is interesting that suggests maybe

1570
01:38:32,289 --> 01:38:36,390
our sampling is just bad and that's why

1571
01:38:33,970 --> 01:38:40,949
we're slow that's why we're flickery but

1572
01:38:36,390 --> 01:38:40,950
so let me just see what's going on here

1573
01:38:48,019 --> 01:38:54,039
I guess at that point I should probably

1574
01:38:50,779 --> 01:38:54,038
also do like

1575
01:39:06,238 --> 01:39:09,419
there we go

1576
01:39:10,769 --> 01:39:19,860
so yeah you know it would look something

1577
01:39:12,779 --> 01:39:22,170
like this I don't know how much faster

1578
01:39:19,859 --> 01:39:26,729
than this it would be though you can see

1579
01:39:22,170 --> 01:39:31,800
here the cost goes up sort of

1580
01:39:26,729 --> 01:39:34,109
prohibitively for that but yeah it could

1581
01:39:31,800 --> 01:39:45,570
be yeah do we have time to try this ten

1582
01:39:34,109 --> 01:39:47,460
minutes so the reason that I don't know

1583
01:39:45,569 --> 01:39:48,899
that I can test it in a short amount of

1584
01:39:47,460 --> 01:39:51,719
time but yeah it does you know that's

1585
01:39:48,899 --> 01:39:53,158
kind of interesting as is all the reason

1586
01:39:51,719 --> 01:39:55,800
I I don't know if I can test in a short

1587
01:39:53,158 --> 01:39:57,509
amount of time is just because if you

1588
01:39:55,800 --> 01:40:04,769
look at what's happening here where you

1589
01:39:57,510 --> 01:40:12,179
look at the spec Texel the way that the

1590
01:40:04,769 --> 01:40:23,998
raycast is working is the raycast writes

1591
01:40:12,179 --> 01:40:27,960
out you know it does four pixels at a

1592
01:40:23,998 --> 01:40:28,800
time and it wouldn't want to do that

1593
01:40:27,960 --> 01:40:31,519
anymore

1594
01:40:28,800 --> 01:40:33,748
so changing this is kind of expensive

1595
01:40:31,519 --> 01:40:36,019
because you really have to make a

1596
01:40:33,748 --> 01:40:38,460
decision about which one you are doing

1597
01:40:36,019 --> 01:40:42,019
and I suppose I could make an if here

1598
01:40:38,460 --> 01:40:45,840
that you know you know didn't do that

1599
01:40:42,019 --> 01:40:47,940
but yeah if you take a look at what's

1600
01:40:45,840 --> 01:40:51,559
going on here you I suppose you could do

1601
01:40:47,939 --> 01:40:55,198
it this way you'd say look here's an f0

1602
01:40:51,559 --> 01:40:57,779
and what we're gonna do is instead of

1603
01:40:55,198 --> 01:40:59,339
what was happening here instead of you

1604
01:40:57,779 --> 01:41:06,420
know writing these out we're actually

1605
01:40:59,340 --> 01:41:10,038
gonna write them out because we didn't

1606
01:41:06,420 --> 01:41:10,038
cast enough of these right

1607
01:41:16,300 --> 01:41:34,520
mmm yeah so we're just gonna sum this

1608
01:41:31,729 --> 01:41:41,269
part here we're just gonna sum up what

1609
01:41:34,520 --> 01:41:42,980
the answer actually is and so like I

1610
01:41:41,270 --> 01:41:44,599
said it's a little bit hairy to actually

1611
01:41:42,979 --> 01:41:48,259
do that and then when we do this we

1612
01:41:44,599 --> 01:41:50,510
would have to do like a load and then we

1613
01:41:48,260 --> 01:41:55,719
would when we would write it out we

1614
01:41:50,510 --> 01:42:03,050
would leave the the back value the same

1615
01:41:55,719 --> 01:42:06,649
so we wouldn't blend in that one I mean

1616
01:42:03,050 --> 01:42:07,849
that's what we would do I'm kind of

1617
01:42:06,649 --> 01:42:10,848
tempted to try it just to see what

1618
01:42:07,849 --> 01:42:12,110
happens it's too much for right now it's

1619
01:42:10,849 --> 01:42:14,900
too much for it we'll save that for next

1620
01:42:12,109 --> 01:42:16,819
time let's get let's do the QA now so

1621
01:42:14,899 --> 01:42:20,839
that we can be on time for switching

1622
01:42:16,819 --> 01:42:25,789
over to John stream I'm gonna leave it

1623
01:42:20,840 --> 01:42:28,000
like that I'll leave it like that for

1624
01:42:25,789 --> 01:42:28,000
now

1625
01:42:36,909 --> 01:42:40,090
all right

1626
01:43:03,578 --> 01:43:06,729
did you notice the instability and

1627
01:43:05,109 --> 01:43:08,828
timing was connected to the hovering

1628
01:43:06,729 --> 01:43:10,839
text and debugger okay no I didn't

1629
01:43:08,828 --> 01:43:14,380
notice that one of the problems that we

1630
01:43:10,840 --> 01:43:17,170
have and we probably will have to fix it

1631
01:43:14,380 --> 01:43:21,789
eventually is that our debug UI is too

1632
01:43:17,170 --> 01:43:24,340
expensive and you know for profiling

1633
01:43:21,789 --> 01:43:29,229
work so we probably need some way of

1634
01:43:24,340 --> 01:43:30,849
isolating that you know this is why

1635
01:43:29,229 --> 01:43:31,899
oftentimes it's better to use a separate

1636
01:43:30,849 --> 01:43:34,150
machine for profiling

1637
01:43:31,899 --> 01:43:36,789
it's why things like rads telemetry

1638
01:43:34,149 --> 01:43:39,250
program they're like a separate server

1639
01:43:36,789 --> 01:43:42,340
that you run and you just send packets

1640
01:43:39,250 --> 01:43:44,109
to it so you do have to pay the cost of

1641
01:43:42,340 --> 01:43:49,900
sending the packet but you don't pay the

1642
01:43:44,109 --> 01:43:51,729
cost of anything else and that's a good

1643
01:43:49,899 --> 01:43:53,078
way to do it because again when you're

1644
01:43:51,729 --> 01:43:56,888
trying to look for performance things

1645
01:43:53,078 --> 01:43:59,399
it's really too difficult sometimes to

1646
01:43:56,889 --> 01:44:03,539
make it go

1647
01:43:59,399 --> 01:44:03,539
integrated into the app like that

1648
01:44:20,420 --> 01:44:24,789
it's for coder miss editor

1649
01:44:29,399 --> 01:44:35,529
so the flickering in the lighting is

1650
01:44:31,750 --> 01:44:37,720
because it's undersampled so rather than

1651
01:44:35,529 --> 01:44:39,250
doing sort of a fake lighting where we

1652
01:44:37,720 --> 01:44:42,690
just slap a sphere around the character

1653
01:44:39,250 --> 01:44:45,489
like you would normally see in 2d games

1654
01:44:42,689 --> 01:44:48,819
we're actually doing full indirect light

1655
01:44:45,489 --> 01:44:50,050
transport like entirely right so it's

1656
01:44:48,819 --> 01:44:53,139
like a full ray tracer in there

1657
01:44:50,050 --> 01:44:54,670
computing the lighting and because ray

1658
01:44:53,140 --> 01:44:56,560
tracing is very expensive and currently

1659
01:44:54,670 --> 01:44:58,390
we just do it on the cpu we've

1660
01:44:56,560 --> 01:45:00,400
considered many of the GPU but if we

1661
01:44:58,390 --> 01:45:01,750
move it to the GPU then you basically

1662
01:45:00,399 --> 01:45:03,339
are only gonna be able to use it on like

1663
01:45:01,750 --> 01:45:06,010
an RT X card or something right

1664
01:45:03,340 --> 01:45:08,470
because we already use the GPU to do

1665
01:45:06,010 --> 01:45:11,199
compositing and stuff and we use a lot

1666
01:45:08,470 --> 01:45:16,420
of cycles if we want high res anti-alias

1667
01:45:11,199 --> 01:45:19,090
free and so on so because of that we

1668
01:45:16,420 --> 01:45:21,310
don't have very many samples to send out

1669
01:45:19,090 --> 01:45:24,279
and so the flicker comes from the fact

1670
01:45:21,310 --> 01:45:28,150
that the light from eat the samples that

1671
01:45:24,279 --> 01:45:31,329
you send out through each Texel of the

1672
01:45:28,149 --> 01:45:33,460
light map you only sometimes hit the

1673
01:45:31,329 --> 01:45:35,369
light sources and sometimes don't and so

1674
01:45:33,460 --> 01:45:39,449
you're trying to do an integration over

1675
01:45:35,369 --> 01:45:42,220
a whole like region there right and

1676
01:45:39,449 --> 01:45:44,439
doing it sarcastically like that adds

1677
01:45:42,220 --> 01:45:47,190
noise to your system so what you're

1678
01:45:44,439 --> 01:45:49,689
seeing is the noise of the sampling and

1679
01:45:47,189 --> 01:45:51,669
more specifically if you wanted to

1680
01:45:49,689 --> 01:45:53,319
imagine I could draw you a diagram that

1681
01:45:51,670 --> 01:45:56,619
that maybe helps understand a little

1682
01:45:53,319 --> 01:46:03,960
more intuitively what's happening there

1683
01:45:56,619 --> 01:46:03,960
so like if you look at here

1684
01:46:09,368 --> 01:46:19,049
so if you look at what it is seen if you

1685
01:46:13,359 --> 01:46:19,049
will from a particular Texel

1686
01:46:31,889 --> 01:46:36,760
so from a particular Texel you have to

1687
01:46:35,050 --> 01:46:39,369
imagine like you know okay we've got a

1688
01:46:36,760 --> 01:46:42,400
light map right and there's some data in

1689
01:46:39,368 --> 01:46:44,738
it or whatever right in fact let me go

1690
01:46:42,399 --> 01:46:47,408
ahead and grab a grid there so you know

1691
01:46:44,738 --> 01:46:48,669
we're computing a light map and we're

1692
01:46:47,408 --> 01:46:51,879
basically saying each one of these

1693
01:46:48,670 --> 01:46:53,828
texels is a light source and we're

1694
01:46:51,880 --> 01:46:55,900
saying that that mapped to a sphere

1695
01:46:53,828 --> 01:46:58,808
right and we're saying that like you

1696
01:46:55,899 --> 01:47:00,879
know so for example this quadrant of the

1697
01:46:58,809 --> 01:47:02,619
upper hemisphere of the sphere maps to

1698
01:47:00,880 --> 01:47:03,690
you know this part of the light map

1699
01:47:02,618 --> 01:47:08,529
right or whatever

1700
01:47:03,689 --> 01:47:10,748
so what we're effectively asking is what

1701
01:47:08,529 --> 01:47:12,670
is the total for one of these texels

1702
01:47:10,748 --> 01:47:15,340
like let's say this Texel right here and

1703
01:47:12,670 --> 01:47:19,179
maybe it maps to like right there right

1704
01:47:15,340 --> 01:47:21,610
we're effectively asking for that shaft

1705
01:47:19,179 --> 01:47:24,519
of light so for the shaft of light

1706
01:47:21,609 --> 01:47:27,308
that's going out of a particular Texel

1707
01:47:24,519 --> 01:47:29,320
right we're asking what is the total

1708
01:47:27,309 --> 01:47:32,440
amount of light that's coming in through

1709
01:47:29,319 --> 01:47:34,058
that shaft that's effectively a camera

1710
01:47:32,439 --> 01:47:36,638
rendering problem right you're

1711
01:47:34,059 --> 01:47:39,010
effectively asking what do you see when

1712
01:47:36,639 --> 01:47:42,010
you look out through that Texel as a

1713
01:47:39,010 --> 01:47:43,840
window so if you're shooting rays out

1714
01:47:42,010 --> 01:47:46,030
there to find out what you end up with

1715
01:47:43,840 --> 01:47:47,739
is something that if we now imagine here

1716
01:47:46,029 --> 01:47:49,359
is the Texel and we're looking outward

1717
01:47:47,738 --> 01:47:51,578
so we're looking out through this Texel

1718
01:47:49,359 --> 01:47:55,960
we're shooting rays and we're just

1719
01:47:51,578 --> 01:47:58,630
seeing what comes back right now when we

1720
01:47:55,960 --> 01:48:01,179
get an answer when we see what the light

1721
01:47:58,630 --> 01:48:02,979
is that comes back what we get is

1722
01:48:01,179 --> 01:48:06,609
something that's a crude approximation

1723
01:48:02,979 --> 01:48:09,729
of the light in that area so maybe

1724
01:48:06,609 --> 01:48:14,558
there's a light source here right let's

1725
01:48:09,729 --> 01:48:17,760
say and maybe there's a wall that's a

1726
01:48:14,559 --> 01:48:20,409
fairly bright reflector here right as

1727
01:48:17,760 --> 01:48:22,119
we're taking these samples we're

1728
01:48:20,408 --> 01:48:25,238
starting to get a better picture of

1729
01:48:22,118 --> 01:48:28,299
what's there and if it was static after

1730
01:48:25,238 --> 01:48:29,529
a while we just have a fairly complete

1731
01:48:28,300 --> 01:48:30,880
picture of what was there because we'd

1732
01:48:29,529 --> 01:48:32,618
have so many samples that we can

1733
01:48:30,880 --> 01:48:34,449
basically say we've reconstructed what

1734
01:48:32,618 --> 01:48:36,069
the incoming light is because we need

1735
01:48:34,448 --> 01:48:40,029
just the average right all we need is

1736
01:48:36,069 --> 01:48:41,618
the average but since these things are

1737
01:48:40,029 --> 01:48:43,630
moving over time like the lights like

1738
01:48:41,618 --> 01:48:45,429
moving this way whatever we can't just

1739
01:48:43,630 --> 01:48:47,979
take a long-running average

1740
01:48:45,429 --> 01:48:51,399
we have to fade out old samples over

1741
01:48:47,979 --> 01:48:54,489
time so that as things move we stop

1742
01:48:51,399 --> 01:48:56,288
counting them so as a result at anytime

1743
01:48:54,488 --> 01:48:59,649
we're really only looking at like you

1744
01:48:56,288 --> 01:49:02,139
know maybe 16 samples worth and we have

1745
01:48:59,649 --> 01:49:06,399
to reconstruct this exact picture from

1746
01:49:02,139 --> 01:49:09,429
just those 16 samples as we get more or

1747
01:49:06,399 --> 01:49:12,158
less samples that fall inside or outside

1748
01:49:09,429 --> 01:49:17,559
of a bright light source that's where

1749
01:49:12,158 --> 01:49:20,589
you see the flicker make sense so what

1750
01:49:17,559 --> 01:49:22,479
we can do going forwards like I said is

1751
01:49:20,590 --> 01:49:24,248
be a little bit smarter about how we're

1752
01:49:22,479 --> 01:49:26,949
integrating those samples don't always

1753
01:49:24,248 --> 01:49:29,198
use constant waiting use waiting based

1754
01:49:26,948 --> 01:49:31,149
on what we see and how much it

1755
01:49:29,198 --> 01:49:35,589
contributes to the particular Texel and

1756
01:49:31,149 --> 01:49:38,198
so on so we can probably do some kind of

1757
01:49:35,590 --> 01:49:40,029
importance based weighting of our

1758
01:49:38,198 --> 01:49:41,978
results that would be better than what

1759
01:49:40,029 --> 01:49:43,658
I'm doing now the reason I didn't throw

1760
01:49:41,979 --> 01:49:45,760
that in already is I'm not a sampling

1761
01:49:43,658 --> 01:49:48,460
Theory person so I don't really know

1762
01:49:45,760 --> 01:49:50,650
offhand what we would do so I need to

1763
01:49:48,460 --> 01:49:52,059
think about that and and like maybe I

1764
01:49:50,649 --> 01:49:53,259
may need to go read a little bit up

1765
01:49:52,059 --> 01:49:54,880
papers on it

1766
01:49:53,260 --> 01:49:57,119
to see what we should be doing there

1767
01:49:54,880 --> 01:49:57,118
right

1768
01:50:02,439 --> 01:50:12,669
as previously mentioned in chat both is

1769
01:50:04,659 --> 01:50:15,639
light and is the content of x1 Oh No how

1770
01:50:12,670 --> 01:50:23,340
did that not cause a bug for us I guess

1771
01:50:15,640 --> 01:50:25,510
you just wouldn't see it hmm oops oh

1772
01:50:23,340 --> 01:50:29,670
well you know what I guess the reason

1773
01:50:25,510 --> 01:50:32,110
that I guess now that I think about it

1774
01:50:29,670 --> 01:50:33,640
that can never happen anyway we

1775
01:50:32,109 --> 01:50:36,579
shouldn't have even bothered with this

1776
01:50:33,640 --> 01:50:55,470
this it should just be is light or is

1777
01:50:36,579 --> 01:50:55,470
leaf container yeah that was those dumb

1778
01:51:04,359 --> 01:51:08,328
talking about character movement will we

1779
01:51:06,529 --> 01:51:11,029
implement a transaction system something

1780
01:51:08,328 --> 01:51:12,349
like John's we already did so that's how

1781
01:51:11,029 --> 01:51:16,090
our character movement works

1782
01:51:12,349 --> 01:51:16,090
it's a transactional movement system

1783
01:51:17,859 --> 01:51:24,880
that's why in fact I was one one of the

1784
01:51:22,399 --> 01:51:28,279
people the person advocating to John

1785
01:51:24,880 --> 01:51:30,949
very often specifically that I was like

1786
01:51:28,279 --> 01:51:32,840
I love transactional systems you should

1787
01:51:30,948 --> 01:51:35,719
do one we've talked about it a bunch of

1788
01:51:32,840 --> 01:51:37,429
times and he was there's reasons to and

1789
01:51:35,719 --> 01:51:38,149
not to do them and he's been on the

1790
01:51:37,429 --> 01:51:39,889
fence about it

1791
01:51:38,149 --> 01:51:43,250
he eventually just committed to the

1792
01:51:39,889 --> 01:51:44,929
transactional system because I think he

1793
01:51:43,250 --> 01:51:47,689
just felt like there's no way to really

1794
01:51:44,929 --> 01:51:51,139
get a puzzle based game working properly

1795
01:51:47,689 --> 01:51:53,058
that way which is also my opinion for

1796
01:51:51,139 --> 01:51:54,440
ours ours is an action game so maybe

1797
01:51:53,059 --> 01:51:56,239
that's not true but I just feel like

1798
01:51:54,439 --> 01:51:58,069
transactional based systems don't have

1799
01:51:56,238 --> 01:51:59,779
the same kind of game play bugs that non

1800
01:51:58,069 --> 01:52:02,929
transactional systems do so I prefer

1801
01:51:59,779 --> 01:52:04,969
them so we've always been transactional

1802
01:52:02,929 --> 01:52:06,349
ever since the early days of when we

1803
01:52:04,969 --> 01:52:08,270
started doing the hopping mechanic

1804
01:52:06,349 --> 01:52:09,139
because once we had the hot mechanic I'm

1805
01:52:08,270 --> 01:52:10,520
like alright I want this to be

1806
01:52:09,139 --> 01:52:12,529
transactional because people are either

1807
01:52:10,520 --> 01:52:14,179
on a square or they're not and I'm never

1808
01:52:12,529 --> 01:52:18,250
gonna allow two people to be on the same

1809
01:52:14,179 --> 01:52:18,250
square so it's got to be transactional

1810
01:52:37,060 --> 01:52:49,340
let me see take another question or two

1811
01:52:46,789 --> 01:52:51,649
here I think I told John 2:30 but I

1812
01:52:49,340 --> 01:52:53,750
don't know he may be ready now

1813
01:52:51,649 --> 01:52:56,779
so in fact let me just check and see

1814
01:52:53,750 --> 01:53:06,710
what John status is if I can check to

1815
01:52:56,779 --> 01:53:09,380
see what John status is all right he

1816
01:53:06,710 --> 01:53:13,939
said 2:30 on Twitter so I guess I'll

1817
01:53:09,380 --> 01:53:16,670
just do two until 2:15 for the questions

1818
01:53:13,939 --> 01:53:22,099
and then at 2:15 I'll switch to trying

1819
01:53:16,670 --> 01:53:23,840
to get John to to hook up on video chat

1820
01:53:22,100 --> 01:53:25,340
just trying to because I'm sure we'll

1821
01:53:23,840 --> 01:53:27,800
need at least 15 minutes to make sure

1822
01:53:25,340 --> 01:53:30,829
that the like video chat works properly

1823
01:53:27,800 --> 01:53:33,699
and is streamable so and then we'll just

1824
01:53:30,829 --> 01:53:33,699
play us right at 2:30

1825
01:53:47,659 --> 01:53:52,099
is this already the best lit - but 3d

1826
01:53:50,239 --> 01:53:57,170
game in the whole history of camping I

1827
01:53:52,100 --> 01:53:59,329
don't know no I don't think so

1828
01:53:57,170 --> 01:54:06,500
we might be by the time we finished some

1829
01:53:59,329 --> 01:54:09,529
of our quality passes but no we're using

1830
01:54:06,500 --> 01:54:12,880
a diffusion heat model to average the

1831
01:54:09,529 --> 01:54:17,899
texture samples over space and time no

1832
01:54:12,880 --> 01:54:20,350
we don't diffuse over space at all the

1833
01:54:17,899 --> 01:54:23,929
reason we don't diffuse over space is

1834
01:54:20,350 --> 01:54:27,230
because lighting doesn't diffuse through

1835
01:54:23,930 --> 01:54:34,130
space I mean that's just just doesn't

1836
01:54:27,229 --> 01:54:36,049
right light is transmitted in lines

1837
01:54:34,130 --> 01:54:39,260
because photons travel in straight lines

1838
01:54:36,050 --> 01:54:42,619
that's just how it works so we don't do

1839
01:54:39,260 --> 01:54:47,409
that we do average texture samples over

1840
01:54:42,619 --> 01:54:47,409
time but the way that we do that is we

1841
01:54:48,189 --> 01:54:54,319
we bias towards more recent samples

1842
01:54:52,180 --> 01:55:00,579
because we want the lighting to be

1843
01:54:54,319 --> 01:55:00,579
responsive now like I saying before I

1844
01:55:01,359 --> 01:55:05,929
think we will want to change a few

1845
01:55:04,279 --> 01:55:08,539
things about how we're doing that

1846
01:55:05,930 --> 01:55:10,550
averaging so I don't think what we're

1847
01:55:08,539 --> 01:55:13,729
doing right now is particularly good I

1848
01:55:10,550 --> 01:55:17,690
don't know that a heat model is anything

1849
01:55:13,729 --> 01:55:20,839
we particularly want to use but we

1850
01:55:17,689 --> 01:55:24,019
probably will have some more importance

1851
01:55:20,840 --> 01:55:26,810
based integration happening to try and

1852
01:55:24,020 --> 01:55:30,080
make for better use of our samples and

1853
01:55:26,810 --> 01:55:32,360
also to try and and denoise so one of

1854
01:55:30,079 --> 01:55:38,779
the things that you know we probably can

1855
01:55:32,359 --> 01:55:42,079
do is try to figure out a little bit

1856
01:55:38,779 --> 01:55:47,859
more specifically what's happening in

1857
01:55:42,079 --> 01:55:50,809
terms of when we cast and potentially

1858
01:55:47,859 --> 01:55:58,149
save more information than a more saving

1859
01:55:50,810 --> 01:55:58,150
now here's a crude example

1860
01:55:59,350 --> 01:56:05,870
suppose we sample the specular lighting

1861
01:56:03,550 --> 01:56:07,489
and I don't think we can do this the

1862
01:56:05,869 --> 01:56:14,119
thing is too expensive but suppose we

1863
01:56:07,489 --> 01:56:17,779
sample the specular lighting at 60 for

1864
01:56:14,119 --> 01:56:24,800
us are 16 times the resolution of the

1865
01:56:17,779 --> 01:56:29,920
diffuse so rather than storing one texel

1866
01:56:24,800 --> 01:56:39,020
we store a grid of 4x4 texels for every

1867
01:56:29,920 --> 01:56:41,630
specular slot but we only store it then

1868
01:56:39,020 --> 01:56:44,630
what happens is every time we cast out

1869
01:56:41,630 --> 01:56:49,310
array we overwrite one of those slots

1870
01:56:44,630 --> 01:56:52,130
completely then to produce the diffuse

1871
01:56:49,310 --> 01:56:55,730
lighting we average that 4x4 down and

1872
01:56:52,130 --> 01:56:58,520
use that result now why is that useful

1873
01:56:55,729 --> 01:57:04,250
it's useful because that takes our

1874
01:56:58,520 --> 01:57:06,950
sampling jitter out of the solution

1875
01:57:04,250 --> 01:57:09,890
because rather than integrating over

1876
01:57:06,949 --> 01:57:15,079
space over multiple frames I should say

1877
01:57:09,890 --> 01:57:20,260
space over directions every frame we are

1878
01:57:15,079 --> 01:57:23,350
only integrating we're integrating over

1879
01:57:20,260 --> 01:57:28,489
all directions every frame every time

1880
01:57:23,350 --> 01:57:31,310
right so it doesn't have a lag to it so

1881
01:57:28,489 --> 01:57:33,889
that way if you hit the light source in

1882
01:57:31,310 --> 01:57:38,660
one direction you didn't hit it in

1883
01:57:33,890 --> 01:57:41,150
another direction then currently that

1884
01:57:38,659 --> 01:57:43,250
introduces flicker but in this system it

1885
01:57:41,149 --> 01:57:45,439
wouldn't because you wouldn't be

1886
01:57:43,250 --> 01:57:46,670
overwriting the bright sample you just

1887
01:57:45,439 --> 01:57:48,829
be overriding a direction that

1888
01:57:46,670 --> 01:57:50,960
previously had a dark sample anyway so

1889
01:57:48,829 --> 01:57:53,659
the average of those every frame would

1890
01:57:50,960 --> 01:57:56,720
still come out to the same thing so

1891
01:57:53,659 --> 01:57:58,309
that's why I say it's possible that we

1892
01:57:56,720 --> 01:58:00,289
can do something much smarter in terms

1893
01:57:58,310 --> 01:58:02,330
of how we're storing or integrating our

1894
01:58:00,289 --> 01:58:04,729
values that would make it so that we

1895
01:58:02,329 --> 01:58:09,140
would eliminate that flicker without

1896
01:58:04,729 --> 01:58:10,569
casting more rays I didn't explain that

1897
01:58:09,140 --> 01:58:16,020
well but

1898
01:58:10,569 --> 01:58:16,019
I do think there's ways we can do it

1899
01:58:16,649 --> 01:58:26,469
that don't that don't have the

1900
01:58:21,010 --> 01:58:28,900
directional variance because if you

1901
01:58:26,470 --> 01:58:30,970
remembered more about what directions

1902
01:58:28,899 --> 01:58:33,759
you'd looked you wouldn't have that

1903
01:58:30,970 --> 01:58:35,740
variance and so that suggests to me that

1904
01:58:33,760 --> 01:58:38,170
we can do a better job with the

1905
01:58:35,739 --> 01:58:39,609
information we have just and it could

1906
01:58:38,170 --> 01:58:41,230
because we know that if we stored that

1907
01:58:39,609 --> 01:58:43,960
extra information we could without

1908
01:58:41,229 --> 01:58:53,049
casting more raids same Ray's just more

1909
01:58:43,960 --> 01:58:54,670
storage right instead Oh key to use some

1910
01:58:53,050 --> 01:58:56,350
features from later versions of C++ I

1911
01:58:54,670 --> 01:59:00,970
may find useful for example lambdas or

1912
01:58:56,350 --> 01:59:03,460
templates I guess what I would say is

1913
01:59:00,970 --> 01:59:05,500
it's always okay to use anything you

1914
01:59:03,460 --> 01:59:06,939
want to use as long as you've done the

1915
01:59:05,500 --> 01:59:11,220
due diligence to determine that it's

1916
01:59:06,939 --> 01:59:15,669
actually saving you development time

1917
01:59:11,220 --> 01:59:20,289
that's that's really the key thing to

1918
01:59:15,670 --> 01:59:24,220
remember so I don't find C++ as features

1919
01:59:20,289 --> 01:59:25,750
save time in the long run they may make

1920
01:59:24,220 --> 01:59:28,329
you think you're saving time but when

1921
01:59:25,750 --> 01:59:31,029
you add up all the other costs bad error

1922
01:59:28,329 --> 01:59:33,390
messages longer compile times worst code

1923
01:59:31,029 --> 01:59:35,469
generation blah blah blah blah blah I

1924
01:59:33,390 --> 01:59:37,450
typically find that pretty much anything

1925
01:59:35,470 --> 01:59:42,010
you use from C++ ends up hurting you in

1926
01:59:37,449 --> 01:59:43,389
the long run not because it has to do

1927
01:59:42,010 --> 01:59:46,300
but just because they always do a bad

1928
01:59:43,390 --> 01:59:48,220
job right all of the things that C++

1929
01:59:46,300 --> 01:59:50,829
could have been done as good features

1930
01:59:48,220 --> 01:59:52,000
they just weren't so the reason I don't

1931
01:59:50,829 --> 01:59:55,390
use them is because I think they're

1932
01:59:52,000 --> 01:59:56,979
actually a bad trade-off that doesn't

1933
01:59:55,390 --> 01:59:57,520
mean that you have to think they're a

1934
01:59:56,979 --> 02:00:00,849
bad trade-off

1935
01:59:57,520 --> 02:00:02,590
you can go assess that yourself and so

1936
02:00:00,850 --> 02:00:06,250
the only thing that I urge people to do

1937
02:00:02,590 --> 02:00:08,230
is actually seriously assess it C++

1938
02:00:06,250 --> 02:00:10,300
programmers almost universally in my

1939
02:00:08,229 --> 02:00:13,239
experience do not actually assess it

1940
02:00:10,300 --> 02:00:16,289
they claim that something is better and

1941
02:00:13,239 --> 02:00:18,309
they don't actually verify that right

1942
02:00:16,289 --> 02:00:20,380
obviously the secret sauce committee

1943
02:00:18,310 --> 02:00:22,180
doesn't verify it but I mean people who

1944
02:00:20,380 --> 02:00:22,739
then use those features in their code

1945
02:00:22,180 --> 02:00:24,960
base

1946
02:00:22,738 --> 02:00:27,959
and when I say verify I mean you have to

1947
02:00:24,960 --> 02:00:31,559
verify it across everything all cost the

1948
02:00:27,960 --> 02:00:33,179
total cost of development not just that

1949
02:00:31,559 --> 02:00:35,719
you saved a few lines of code somewhere

1950
02:00:33,179 --> 02:00:40,340
by using this template or whatever right

1951
02:00:35,719 --> 02:00:43,980
um but if you've actually done that work

1952
02:00:40,340 --> 02:00:46,349
then you should not only feel free to

1953
02:00:43,979 --> 02:00:49,138
use the feature if you've found that it

1954
02:00:46,349 --> 02:00:51,090
actually can be verifiably better but

1955
02:00:49,139 --> 02:00:52,469
you shouldn't need to ask me about it at

1956
02:00:51,090 --> 02:00:55,889
that point obviously because you've done

1957
02:00:52,469 --> 02:00:57,179
the work you've proven that for the way

1958
02:00:55,889 --> 02:00:59,730
you're programming and then the code

1959
02:00:57,179 --> 02:01:01,109
base you're working in it is more

1960
02:00:59,729 --> 02:01:02,819
effective and that's what you need to

1961
02:01:01,109 --> 02:01:05,219
know it doesn't matter what I think and

1962
02:01:02,819 --> 02:01:06,840
it also doesn't matter what I think

1963
02:01:05,219 --> 02:01:08,389
about my code base because your code

1964
02:01:06,840 --> 02:01:11,550
base will differ and your development

1965
02:01:08,389 --> 02:01:14,550
processes will differ from mine and so

1966
02:01:11,550 --> 02:01:16,079
that's what you need to verify and as

1967
02:01:14,550 --> 02:01:17,099
long as you've done that verification I

1968
02:01:16,078 --> 02:01:19,788
would say feel comfortable using

1969
02:01:17,099 --> 02:01:22,260
anything you want feel comfortable using

1970
02:01:19,788 --> 02:01:25,590
JavaScript through end script and

1971
02:01:22,260 --> 02:01:28,590
through a rust translator that outputs

1972
02:01:25,590 --> 02:01:31,078
Java bytecode if you've verified it

1973
02:01:28,590 --> 02:01:33,630
actually saves you total development

1974
02:01:31,078 --> 02:01:35,698
time for the same end project if you've

1975
02:01:33,630 --> 02:01:37,800
actually done that work then you have

1976
02:01:35,698 --> 02:01:40,049
nothing to worry about the thing that

1977
02:01:37,800 --> 02:01:43,788
people have to worry about is making

1978
02:01:40,050 --> 02:01:45,779
these choices without any analysis right

1979
02:01:43,788 --> 02:01:50,158
that's the only thing to worry about

1980
02:01:45,779 --> 02:01:53,219
because computers are discrete and

1981
02:01:50,158 --> 02:01:55,828
analyzable you can tell whether or not

1982
02:01:53,219 --> 02:01:57,510
you're producing quality code and you

1983
02:01:55,828 --> 02:02:01,109
can tell how fast you're producing it

1984
02:01:57,510 --> 02:02:03,690
because you've got a calendar right so

1985
02:02:01,109 --> 02:02:05,848
you can measure these things at least to

1986
02:02:03,689 --> 02:02:06,748
a first approximation and if you have

1987
02:02:05,849 --> 02:02:08,659
measured them you should feel

1988
02:02:06,748 --> 02:02:10,618
comfortable if you haven't measured them

1989
02:02:08,658 --> 02:02:13,710
you shouldn't feel comfortable just

1990
02:02:10,618 --> 02:02:16,109
doing what I'm doing either right you

1991
02:02:13,710 --> 02:02:19,380
should learn those skills and when

1992
02:02:16,109 --> 02:02:20,518
you're a beginner it's okay to just say

1993
02:02:19,380 --> 02:02:22,559
well I'm just gonna program the way

1994
02:02:20,519 --> 02:02:23,309
Casey does because I know it can't be

1995
02:02:22,559 --> 02:02:25,380
that bad

1996
02:02:23,309 --> 02:02:29,460
since he's obviously able to do it right

1997
02:02:25,380 --> 02:02:32,368
that's fine but as you get better and

1998
02:02:29,460 --> 02:02:33,929
you become more of an expert then that's

1999
02:02:32,368 --> 02:02:35,399
not okay anymore it's not okay to just

2000
02:02:33,929 --> 02:02:36,719
say program make Casey does cuz he must

2001
02:02:35,399 --> 02:02:41,729
know because he doesn't

2002
02:02:36,719 --> 02:02:42,960
right he's not working in your system he

2003
02:02:41,729 --> 02:02:44,609
doesn't have the same brain as you

2004
02:02:42,960 --> 02:02:46,380
there's not the same teammates that you

2005
02:02:44,609 --> 02:02:48,569
do he doesn't have the same end goals

2006
02:02:46,380 --> 02:02:50,909
that you do necessarily so the

2007
02:02:48,569 --> 02:02:52,979
trade-offs that Casey makes and the

2008
02:02:50,909 --> 02:02:54,899
trade-offs that you make are not going

2009
02:02:52,979 --> 02:02:57,689
to be the same trade-offs necessarily

2010
02:02:54,899 --> 02:03:02,099
right so as you come more of an expert I

2011
02:02:57,689 --> 02:03:03,238
expect you to analyze those yourself and

2012
02:03:02,100 --> 02:03:06,870
if you happen to come the same

2013
02:03:03,238 --> 02:03:09,959
conclusions than I do totally fine but

2014
02:03:06,869 --> 02:03:13,079
you don't want to count on the fact that

2015
02:03:09,960 --> 02:03:16,800
I made exactly the right decisions for

2016
02:03:13,079 --> 02:03:19,500
your code and that goes for everyone

2017
02:03:16,800 --> 02:03:21,000
anyone who sits around telling you that

2018
02:03:19,500 --> 02:03:25,800
they have the right way for you to

2019
02:03:21,000 --> 02:03:27,750
program is wrong they may accidentally

2020
02:03:25,800 --> 02:03:30,150
be correct about the conclusion but they

2021
02:03:27,750 --> 02:03:34,130
are wrong about the claim that they knew

2022
02:03:30,149 --> 02:03:34,129
it was right because they can't

2023
02:03:51,529 --> 02:03:56,279
would you - link transactional inverses

2024
02:03:54,090 --> 02:03:57,960
what I'm sure so transactional movement

2025
02:03:56,279 --> 02:04:00,179
systems or transactional gameplay

2026
02:03:57,960 --> 02:04:01,890
systems in general something I've worked

2027
02:04:00,180 --> 02:04:04,409
with for a really long time and in fact

2028
02:04:01,890 --> 02:04:05,910
the witness' collision detector even was

2029
02:04:04,409 --> 02:04:07,769
this kind of system as well although

2030
02:04:05,909 --> 02:04:09,479
since it doesn't have multiple people

2031
02:04:07,770 --> 02:04:16,860
the transactional part doesn't have to

2032
02:04:09,479 --> 02:04:20,009
do much but the idea is broader than any

2033
02:04:16,859 --> 02:04:23,339
real specific implementation it's just

2034
02:04:20,010 --> 02:04:29,610
about saying look there's two ways that

2035
02:04:23,340 --> 02:04:33,930
we can express the core gameplay of any

2036
02:04:29,609 --> 02:04:36,929
given game one way is a chaotic system

2037
02:04:33,930 --> 02:04:39,810
that just has a bunch of floating-point

2038
02:04:36,930 --> 02:04:43,050
simulation code and whatever comes out

2039
02:04:39,810 --> 02:04:46,650
the end of that is the game okay

2040
02:04:43,050 --> 02:04:48,510
and this is a Unity game or an Unreal

2041
02:04:46,649 --> 02:04:51,689
Engine game like anything made in those

2042
02:04:48,510 --> 02:04:53,600
systems is this way it works by saying I

2043
02:04:51,689 --> 02:04:56,339
throw a bunch of entities into a system

2044
02:04:53,600 --> 02:04:57,930
there's some kind of a physics system

2045
02:04:56,340 --> 02:05:00,539
tying it together the things like move

2046
02:04:57,930 --> 02:05:03,480
around and they bump into each other or

2047
02:05:00,539 --> 02:05:05,880
whatever and then just whatever happens

2048
02:05:03,479 --> 02:05:07,199
when the collision gets resolved I have

2049
02:05:05,880 --> 02:05:11,190
like vent that fires and it does

2050
02:05:07,199 --> 02:05:14,099
something right and the game is created

2051
02:05:11,189 --> 02:05:16,619
organically from those things and the

2052
02:05:14,100 --> 02:05:18,720
the game designer piles enough rules on

2053
02:05:16,619 --> 02:05:22,349
top to make the game that they're making

2054
02:05:18,720 --> 02:05:25,890
right now the problem with these kind of

2055
02:05:22,350 --> 02:05:27,960
systems is bugs are everywhere people

2056
02:05:25,890 --> 02:05:30,390
are accidentally getting shot through

2057
02:05:27,960 --> 02:05:32,550
the world or you know people get clones

2058
02:05:30,390 --> 02:05:34,110
of treasures or they're able to like run

2059
02:05:32,550 --> 02:05:37,470
up the side of the wall or whatever and

2060
02:05:34,109 --> 02:05:39,899
that's because it was just a paintbrush

2061
02:05:37,470 --> 02:05:41,880
model of painting rules and events on

2062
02:05:39,899 --> 02:05:46,829
until it sort of looked like it was the

2063
02:05:41,880 --> 02:05:49,440
game right a transactional model is the

2064
02:05:46,829 --> 02:05:51,600
opposite of that that's saying we're

2065
02:05:49,439 --> 02:05:54,479
gonna approach this like a traditional

2066
02:05:51,600 --> 02:05:59,420
game like chess or something where the

2067
02:05:54,479 --> 02:06:02,039
rules are 100% explicitly written if

2068
02:05:59,420 --> 02:06:04,619
this is the situation this is the

2069
02:06:02,039 --> 02:06:05,159
outcome and all of the outcomes have

2070
02:06:04,619 --> 02:06:12,750
been

2071
02:06:05,159 --> 02:06:15,720
pree analyzed right now this has pluses

2072
02:06:12,750 --> 02:06:18,359
and minuses the pluses are the design is

2073
02:06:15,720 --> 02:06:20,090
explicit you know exactly what it is and

2074
02:06:18,359 --> 02:06:23,159
you know all of the possible outcomes

2075
02:06:20,090 --> 02:06:24,630
from that design right because you can

2076
02:06:23,159 --> 02:06:27,989
literally look at them like a chess tree

2077
02:06:24,630 --> 02:06:30,420
and maybe you can't quite look at the

2078
02:06:27,989 --> 02:06:32,550
entire analysis because you haven't you

2079
02:06:30,420 --> 02:06:34,289
can't afford enough AWS time to actually

2080
02:06:32,550 --> 02:06:38,430
search the entire tree or something

2081
02:06:34,289 --> 02:06:41,069
right but at least you know like on

2082
02:06:38,430 --> 02:06:42,900
chess you know the space of all like

2083
02:06:41,069 --> 02:06:49,439
roughly possible things that can happen

2084
02:06:42,899 --> 02:06:53,039
more or less right however the cost of

2085
02:06:49,439 --> 02:06:58,909
it is that that chaos isn't there right

2086
02:06:53,039 --> 02:07:02,760
you now have a much more pre-conceived

2087
02:06:58,909 --> 02:07:04,019
overtly designed system and the things

2088
02:07:02,760 --> 02:07:09,380
that will happen in it are more

2089
02:07:04,020 --> 02:07:12,180
deliberate so if you're trying to have

2090
02:07:09,380 --> 02:07:14,840
some ridiculous thing like that happens

2091
02:07:12,180 --> 02:07:17,190
in grand theft auto where it was

2092
02:07:14,840 --> 02:07:20,250
considered a bonus that somebody

2093
02:07:17,189 --> 02:07:23,579
accidentally like shoved dynamite into

2094
02:07:20,250 --> 02:07:26,430
the shark which it caused the tail to

2095
02:07:23,579 --> 02:07:28,710
explode off at a very high rate which

2096
02:07:26,430 --> 02:07:30,990
you know kind of caused this bug where a

2097
02:07:28,710 --> 02:07:32,670
ship flipped around 180 degrees which is

2098
02:07:30,989 --> 02:07:38,149
never supposed to be able to do but that

2099
02:07:32,670 --> 02:07:38,149
was great and everyone loved it right

2100
02:07:41,960 --> 02:07:50,039
that's a feature you know sandbox games

2101
02:07:46,170 --> 02:07:53,880
want lunacy they don't they're not

2102
02:07:50,039 --> 02:07:56,369
trying to make a deliberate controlled

2103
02:07:53,880 --> 02:08:01,980
experience they're trying to let things

2104
02:07:56,369 --> 02:08:04,739
get out of control right and so you know

2105
02:08:01,979 --> 02:08:08,209
you that that's that's what's happening

2106
02:08:04,739 --> 02:08:08,210
there so

2107
02:08:08,378 --> 02:08:12,038
I think I'm gonna go ahead and and stop

2108
02:08:10,418 --> 02:08:13,179
the recording now I'll keep the stream

2109
02:08:12,038 --> 02:08:14,408
running but I'm gonna have to quit now

2110
02:08:13,179 --> 02:08:16,719
and we're gonna try and switch over to

2111
02:08:14,408 --> 02:08:21,538
John and see if we can get a video

2112
02:08:16,719 --> 02:08:21,538
uplink working so

