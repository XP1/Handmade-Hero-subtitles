1
00:00:01,100 --> 00:00:05,068
hello everyone and welcome to handmade

2
00:00:03,178 --> 00:00:10,169
hero show recode a complete game live on

3
00:00:05,068 --> 00:00:12,030
stream we have well you know we we're

4
00:00:10,169 --> 00:00:15,419
doing so well at this point I'm gonna

5
00:00:12,029 --> 00:00:19,350
have to think about what the the most

6
00:00:15,419 --> 00:00:21,210
sensible path is forward because the

7
00:00:19,350 --> 00:00:25,320
actual lighting now is working like

8
00:00:21,210 --> 00:00:27,060
really well and you know at some point

9
00:00:25,320 --> 00:00:29,250
we should probably switch over to doing

10
00:00:27,059 --> 00:00:31,439
quality stuff because we have some

11
00:00:29,250 --> 00:00:33,929
flicker stuff we want to address and

12
00:00:31,439 --> 00:00:35,480
then we have some blending hard edge

13
00:00:33,929 --> 00:00:38,250
blending stuff we want to address so

14
00:00:35,479 --> 00:00:39,148
we're we're getting to the point we're

15
00:00:38,250 --> 00:00:40,770
gonna have to make some decisions about

16
00:00:39,149 --> 00:00:44,609
when we switch over to that at the

17
00:00:40,770 --> 00:00:46,109
moment though I think today I'd I want

18
00:00:44,609 --> 00:00:48,119
to keep doing some optimization maybe

19
00:00:46,109 --> 00:00:50,009
today and next weekend and then we'll

20
00:00:48,119 --> 00:00:53,218
maybe call it there on the optimization

21
00:00:50,009 --> 00:00:55,409
front unless there was some major thing

22
00:00:53,219 --> 00:00:59,899
that we kind of wanted to do that came

23
00:00:55,409 --> 00:01:04,140
up if you recall what we did yesterday

24
00:00:59,899 --> 00:01:08,250
we were at the point where we welded

25
00:01:04,140 --> 00:01:10,890
into the grid ray tracer we welded in

26
00:01:08,250 --> 00:01:13,590
the sampling code so now we just have

27
00:01:10,890 --> 00:01:17,009
this one large routine that's entirely

28
00:01:13,590 --> 00:01:19,859
stream together you can see here we've

29
00:01:17,009 --> 00:01:21,478
got the grid ray cast right and the grid

30
00:01:19,859 --> 00:01:23,790
ray cast just goes ahead and does

31
00:01:21,478 --> 00:01:26,849
everything so here's the part where it

32
00:01:23,790 --> 00:01:29,400
actually does the ray casting that kind

33
00:01:26,849 --> 00:01:31,438
of comes through here and then there's

34
00:01:29,400 --> 00:01:33,750
this Parshin here which actually does

35
00:01:31,438 --> 00:01:36,719
the voxel sampling right in line and so

36
00:01:33,750 --> 00:01:38,310
it does the Texel it first figures out

37
00:01:36,719 --> 00:01:39,840
what texels need to get loaded it loads

38
00:01:38,310 --> 00:01:41,609
them it figures out how they will be

39
00:01:39,840 --> 00:01:44,520
shadowed and shadows them and then it

40
00:01:41,609 --> 00:01:47,930
sums them up and it then falls right out

41
00:01:44,519 --> 00:01:51,239
into the part where it will actually do

42
00:01:47,930 --> 00:01:52,860
the blend so you look out here and

43
00:01:51,239 --> 00:01:56,099
you've got the part where it actually

44
00:01:52,859 --> 00:01:59,009
blends things out now I don't actually

45
00:01:56,099 --> 00:02:01,978
know so it looks like this is always a

46
00:01:59,009 --> 00:02:04,769
summation to yes you can see here the

47
00:02:01,978 --> 00:02:06,539
transfer people yes gets not summation I

48
00:02:04,769 --> 00:02:10,618
shouldn't say the transfer PPS gets

49
00:02:06,540 --> 00:02:12,420
bucketed up here and I guess that makes

50
00:02:10,618 --> 00:02:15,360
some sense it's a little bit weird to

51
00:02:12,419 --> 00:02:18,179
bucket it but because the way that this

52
00:02:15,360 --> 00:02:22,590
is working is you can see here we do a

53
00:02:18,180 --> 00:02:29,909
load F 32 for X on this stuff and we

54
00:02:22,590 --> 00:02:39,560
write it out with with three stores you

55
00:02:29,909 --> 00:02:39,560
know it's one of those things that's

56
00:02:42,739 --> 00:02:48,269
it's one of those things that it's I'm

57
00:02:45,209 --> 00:02:52,979
not 100% certain is the say myst way to

58
00:02:48,269 --> 00:02:55,500
do that right so if you take a look at

59
00:02:52,979 --> 00:02:57,869
what's actually going on here cuz now at

60
00:02:55,500 --> 00:02:59,459
this point like I said our our job for

61
00:02:57,870 --> 00:03:00,780
today I guess I mentioned this the end

62
00:02:59,459 --> 00:03:03,420
of last stream but I didn't really say

63
00:03:00,780 --> 00:03:05,098
it starting up here our job for today is

64
00:03:03,419 --> 00:03:06,509
to now just look at the combined routine

65
00:03:05,098 --> 00:03:08,459
and start to simplify it a little bit

66
00:03:06,509 --> 00:03:10,408
because now that everything is in one

67
00:03:08,459 --> 00:03:11,939
place we can start to like get rid of

68
00:03:10,408 --> 00:03:14,250
certain places where things get down

69
00:03:11,939 --> 00:03:18,180
shifted or Swizzle that don't really

70
00:03:14,250 --> 00:03:21,870
have to happen right so some of this

71
00:03:18,180 --> 00:03:26,250
code is just not necessary to do anymore

72
00:03:21,870 --> 00:03:29,099
right also the compute voxel irradiance

73
00:03:26,250 --> 00:03:31,530
at call is now actually not used so we

74
00:03:29,098 --> 00:03:35,068
can also just stick that in here with

75
00:03:31,530 --> 00:03:37,140
the the lighting for the AAB ray caster

76
00:03:35,068 --> 00:03:41,458
so this code right here where we have

77
00:03:37,139 --> 00:03:44,309
the a birria AABB ray caster

78
00:03:41,459 --> 00:03:46,469
all of that stuff is also now kind of

79
00:03:44,310 --> 00:03:52,049
just stuff that we don't really need to

80
00:03:46,469 --> 00:03:54,719
have and we can if we want to remove it

81
00:03:52,049 --> 00:03:56,219
right we wanted to leave it in until we

82
00:03:54,719 --> 00:03:58,889
were sure we were faster we're quite

83
00:03:56,219 --> 00:04:00,419
sure we're faster now so we could remove

84
00:03:58,889 --> 00:04:01,798
it I'm not going to actually take the

85
00:04:00,419 --> 00:04:03,089
step of doing that quite yet because we

86
00:04:01,799 --> 00:04:05,610
don't need to but eventually I'm going

87
00:04:03,090 --> 00:04:07,378
to because the actual way we call this

88
00:04:05,610 --> 00:04:10,950
routine can actually be improved as well

89
00:04:07,378 --> 00:04:13,229
I would suspect but anyway

90
00:04:10,949 --> 00:04:14,818
so if we take a look at how these rays

91
00:04:13,229 --> 00:04:16,829
are getting cast all I was trying to say

92
00:04:14,818 --> 00:04:18,358
is the way this thing is writing out is

93
00:04:16,829 --> 00:04:19,829
the first thing that I was just like oh

94
00:04:18,358 --> 00:04:22,709
wait you know we should probably take a

95
00:04:19,829 --> 00:04:27,540
look at this really carefully but what

96
00:04:22,709 --> 00:04:32,489
you see here is were writing out three

97
00:04:27,540 --> 00:04:36,720
of these which each one of them contains

98
00:04:32,490 --> 00:04:38,579
three plus one right so it's like I

99
00:04:36,720 --> 00:04:40,860
shouldn't say it three plus one each one

100
00:04:38,579 --> 00:04:44,250
of these contains four so we're actually

101
00:04:40,860 --> 00:04:46,280
doing three writes of four floats to do

102
00:04:44,250 --> 00:04:49,439
four rights of three floats right

103
00:04:46,279 --> 00:04:52,049
because we have four pixels that we're

104
00:04:49,439 --> 00:04:57,089
trying to write each one has an RG and a

105
00:04:52,050 --> 00:04:59,970
B I should say texels and we can't do a

106
00:04:57,089 --> 00:05:01,799
three-wide right because the rights that

107
00:04:59,970 --> 00:05:03,810
we're doing are going to be 16-bit bytes

108
00:05:01,800 --> 00:05:07,050
whether we like it or not so we're doing

109
00:05:03,810 --> 00:05:12,478
rights that way by basically loading in

110
00:05:07,050 --> 00:05:15,360
this is RGB R this is GB RG and this is

111
00:05:12,478 --> 00:05:18,300
B RGB right so we're loading in like

112
00:05:15,360 --> 00:05:21,270
sort of a odd kind of chunked version of

113
00:05:18,300 --> 00:05:23,280
these things and then we're loading in

114
00:05:21,269 --> 00:05:25,259
what we computed for the transfer PPS

115
00:05:23,279 --> 00:05:26,788
right so we're writing those like to the

116
00:05:25,259 --> 00:05:28,349
stack and then reading them back from

117
00:05:26,788 --> 00:05:36,569
the stack as is something different than

118
00:05:28,350 --> 00:05:37,979
what we wrote C I'm saying but it's not

119
00:05:36,569 --> 00:05:40,800
immediately clear to me that that's

120
00:05:37,978 --> 00:05:45,000
actually what you would want to do right

121
00:05:40,800 --> 00:05:48,288
so the reason I say that is because we

122
00:05:45,000 --> 00:05:51,538
could instead just maintain like four

123
00:05:48,288 --> 00:05:54,719
values and you know for all I know you

124
00:05:51,538 --> 00:05:56,849
could do four registers I don't really

125
00:05:54,720 --> 00:05:59,100
know what our register pressure is at

126
00:05:56,850 --> 00:06:04,169
the moment but I guess it depends on an

127
00:05:59,100 --> 00:06:06,270
AV X part for example you've got more so

128
00:06:04,168 --> 00:06:09,180
I don't actually know to what extent we

129
00:06:06,269 --> 00:06:13,199
might want to actually do something

130
00:06:09,180 --> 00:06:16,250
fancier here right because loading these

131
00:06:13,199 --> 00:06:18,659
back in is is possibly not necessary and

132
00:06:16,250 --> 00:06:21,509
you know loading them kind of oddly like

133
00:06:18,660 --> 00:06:24,300
that I don't know to be honest it

134
00:06:21,509 --> 00:06:26,649
probably doesn't matter too much

135
00:06:24,300 --> 00:06:27,610
but it's just one of those things it's

136
00:06:26,649 --> 00:06:30,878
like I don't know

137
00:06:27,610 --> 00:06:42,189
similarly this stuff here what we could

138
00:06:30,879 --> 00:06:44,620
do so another way to look at this is

139
00:06:42,189 --> 00:06:47,709
like what we could do is actually

140
00:06:44,620 --> 00:06:49,569
preload in the spec Texel values and

141
00:06:47,709 --> 00:06:54,279
actually some of them up here and store

142
00:06:49,569 --> 00:06:58,180
them out here we could do that probably

143
00:06:54,279 --> 00:07:01,049
a little differently as well so you know

144
00:06:58,180 --> 00:07:03,610
you look at how this is working in this

145
00:07:01,050 --> 00:07:06,098
so you can see what's going on here it's

146
00:07:03,610 --> 00:07:08,229
a it's a linear blend we're producing

147
00:07:06,098 --> 00:07:09,639
the inverse and the regular version of

148
00:07:08,228 --> 00:07:12,939
the blend that we're just doing it here

149
00:07:09,639 --> 00:07:17,800
right and what you can see is the

150
00:07:12,939 --> 00:07:19,658
initial values s0 s1 and s2 creating the

151
00:07:17,800 --> 00:07:24,400
inverse of that is something we can do

152
00:07:19,658 --> 00:07:26,439
like right off the bat right so just to

153
00:07:24,399 --> 00:07:35,109
illustrate the point like if you were to

154
00:07:26,439 --> 00:07:42,509
break this into two pieces right this is

155
00:07:35,110 --> 00:07:49,500
exactly the same equation computed in a

156
00:07:42,509 --> 00:07:52,810
split right and so if we wanted to this

157
00:07:49,500 --> 00:07:55,028
would be a totally fine way to compute

158
00:07:52,810 --> 00:07:58,478
this so if we wanted to we could load

159
00:07:55,028 --> 00:08:01,089
these at the outset right we could then

160
00:07:58,478 --> 00:08:04,329
go ahead and store just the in of

161
00:08:01,089 --> 00:08:07,299
blended version of them and then as we

162
00:08:04,329 --> 00:08:11,019
grabbed a transfer PPS we could sum it

163
00:08:07,300 --> 00:08:12,699
in right and the reason I'm just going

164
00:08:11,019 --> 00:08:15,459
through this is because I don't actually

165
00:08:12,699 --> 00:08:19,150
know how we would make that work cleanly

166
00:08:15,459 --> 00:08:22,448
because each round of this produces

167
00:08:19,149 --> 00:08:26,528
three values and we need four to finish

168
00:08:22,449 --> 00:08:29,319
off this part of the routine so each

169
00:08:26,528 --> 00:08:32,408
time through we would need to kind of

170
00:08:29,319 --> 00:08:36,000
reemerge the values and then up on them

171
00:08:32,408 --> 00:08:36,000
to make this work right

172
00:08:37,990 --> 00:08:46,220
so again I'm not really sure I'm not

173
00:08:44,089 --> 00:08:47,779
really sure how to take advantage of

174
00:08:46,220 --> 00:08:49,399
that but I just wanted to point it out

175
00:08:47,778 --> 00:08:52,990
because it's not clear to me that we're

176
00:08:49,399 --> 00:08:56,839
doing the best thing there that we could

177
00:08:52,990 --> 00:08:58,339
it's just a little iffy right because we

178
00:08:56,839 --> 00:08:59,930
are doing this thing where we're load

179
00:08:58,339 --> 00:09:01,839
we're doing these like tight load ups

180
00:08:59,929 --> 00:09:03,769
here and we have to do them together I

181
00:09:01,839 --> 00:09:06,079
imagine it's probably fine because this

182
00:09:03,769 --> 00:09:07,490
will any bottlenecks this will hit it'll

183
00:09:06,078 --> 00:09:09,948
just ride over them because it'll go out

184
00:09:07,490 --> 00:09:12,318
into it'll like ret out of this routine

185
00:09:09,948 --> 00:09:14,240
and those ups will just be sitting in

186
00:09:12,318 --> 00:09:16,189
the pipeline while we do other

187
00:09:14,240 --> 00:09:25,600
computations to get the next rig has

188
00:09:16,190 --> 00:09:31,699
started you know so I don't know right

189
00:09:25,600 --> 00:09:32,870
so once we kind of move forward from

190
00:09:31,698 --> 00:09:34,219
some of the other obvious stuff I I

191
00:09:32,870 --> 00:09:37,129
start I'll start to take a look at that

192
00:09:34,220 --> 00:09:38,778
I guess right but what I'd like to do

193
00:09:37,129 --> 00:09:40,068
now I guess is focused on some of the

194
00:09:38,778 --> 00:09:41,720
easier stuff cuz they don't see any

195
00:09:40,068 --> 00:09:42,979
particular way to fix that in short

196
00:09:41,720 --> 00:09:44,420
order so I'm just going to take a look

197
00:09:42,980 --> 00:09:47,569
at how we're doing some of these other

198
00:09:44,419 --> 00:09:51,379
things here and see if there's any kind

199
00:09:47,568 --> 00:09:53,179
of obvious things that we can fix so if

200
00:09:51,379 --> 00:09:54,470
we take a look at at this part of the

201
00:09:53,179 --> 00:09:56,750
code here I'm going to pull it up on the

202
00:09:54,470 --> 00:09:58,160
the left side so we can see and then

203
00:09:56,750 --> 00:10:00,559
we're gonna look on the right side here

204
00:09:58,159 --> 00:10:03,679
at how we're filling these out so you

205
00:10:00,559 --> 00:10:07,039
can see that when we actually do our

206
00:10:03,679 --> 00:10:10,278
operations here if we are if we early

207
00:10:07,039 --> 00:10:12,169
out here you can see a storing probe P

208
00:10:10,278 --> 00:10:16,698
single probe in single and occlusion D

209
00:10:12,169 --> 00:10:18,708
right and if we error or not error if we

210
00:10:16,698 --> 00:10:20,359
leave here you can see us doing

211
00:10:18,708 --> 00:10:25,188
conversions to get those things right

212
00:10:20,360 --> 00:10:27,110
and what I'm interested in here is I

213
00:10:25,188 --> 00:10:31,009
would like to know if we could just

214
00:10:27,110 --> 00:10:32,810
simplify this process and try to pass

215
00:10:31,009 --> 00:10:36,230
those things through more directly

216
00:10:32,809 --> 00:10:38,179
because what you can see down here is we

217
00:10:36,230 --> 00:10:40,519
actually know what we're gonna do with

218
00:10:38,179 --> 00:10:43,698
these things right you can see the

219
00:10:40,519 --> 00:10:47,209
absolute value taken of the probe and

220
00:10:43,698 --> 00:10:50,000
single right that happens here and the

221
00:10:47,208 --> 00:10:50,809
regular uses of it here so the x and y

222
00:10:50,000 --> 00:10:55,429
of it

223
00:10:50,809 --> 00:10:58,729
go there the Z of it goes here for a

224
00:10:55,429 --> 00:11:01,729
mask right and so you can kind of see

225
00:10:58,730 --> 00:11:04,820
all of how we're using each of these

226
00:11:01,730 --> 00:11:08,840
things the sample P as opposed to sample

227
00:11:04,820 --> 00:11:11,030
n right the sample P is down here and

228
00:11:08,840 --> 00:11:14,690
you can see that that's actually strided

229
00:11:11,029 --> 00:11:17,240
so it's x y and z as one register with

230
00:11:14,690 --> 00:11:18,350
whatever in the end we don't really care

231
00:11:17,240 --> 00:11:21,379
what goes there because we're gonna

232
00:11:18,350 --> 00:11:24,860
leave it out and then the occlusion and

233
00:11:21,379 --> 00:11:27,350
the occlusion end comes into play down

234
00:11:24,860 --> 00:11:30,649
here and you can see that these just get

235
00:11:27,350 --> 00:11:38,029
load ups but replicated they just get

236
00:11:30,649 --> 00:11:40,309
broadcast and so I'm just interested to

237
00:11:38,029 --> 00:11:43,669
see like what we can do to streamline

238
00:11:40,309 --> 00:11:46,159
this process a little bit more so let's

239
00:11:43,669 --> 00:11:48,079
start with the simplest one so if we're

240
00:11:46,159 --> 00:11:50,569
just gonna if we no we're just gonna

241
00:11:48,080 --> 00:11:52,700
load up this or load up is not the word

242
00:11:50,570 --> 00:11:55,790
at all if we're just going to broadcast

243
00:11:52,700 --> 00:11:59,270
this where does that come from and how

244
00:11:55,789 --> 00:12:03,019
would we use it right so let's start by

245
00:11:59,269 --> 00:12:05,419
saying let's let's remove this naming

246
00:12:03,019 --> 00:12:07,850
convention change so instead of going

247
00:12:05,419 --> 00:12:11,689
from occlusion and inclusion D let's

248
00:12:07,850 --> 00:12:13,519
just make it be occlusion D right so I'm

249
00:12:11,690 --> 00:12:15,470
gonna just compile without that and I'm

250
00:12:13,519 --> 00:12:19,159
just gonna go ahead here and replace

251
00:12:15,470 --> 00:12:20,540
that name just because we welded these

252
00:12:19,159 --> 00:12:22,250
two routines together and did the

253
00:12:20,539 --> 00:12:25,219
simplest possible thing but now at this

254
00:12:22,250 --> 00:12:28,100
point I'd like to start like making them

255
00:12:25,220 --> 00:12:30,399
actually come together so the first

256
00:12:28,100 --> 00:12:33,379
thing that you can see is here we have

257
00:12:30,399 --> 00:12:35,299
probe and probe sample and the single

258
00:12:33,379 --> 00:12:37,309
getting assigned to occlusion D so we

259
00:12:35,299 --> 00:12:39,799
can probably simplify this quite a bit

260
00:12:37,309 --> 00:12:42,919
because if we already know that we had

261
00:12:39,799 --> 00:12:47,599
to produce probe sample n single in a

262
00:12:42,919 --> 00:12:50,569
way that would get used here right then

263
00:12:47,600 --> 00:12:53,050
we can probably make this and this

264
00:12:50,570 --> 00:12:56,270
together pretty easily I would assume

265
00:12:53,049 --> 00:12:58,339
looking back here you can see occlusion

266
00:12:56,269 --> 00:13:00,730
D in the other case that we actually

267
00:12:58,340 --> 00:13:04,129
need to exit is just the negative of

268
00:13:00,730 --> 00:13:06,710
rady single one of the things

269
00:13:04,129 --> 00:13:10,100
that I don't actually understand about

270
00:13:06,710 --> 00:13:12,170
the way that we chose to do this is that

271
00:13:10,100 --> 00:13:14,629
since this is how we always error out

272
00:13:12,169 --> 00:13:17,569
this assignment probably shouldn't

273
00:13:14,629 --> 00:13:21,139
happen here it's just complicating this

274
00:13:17,570 --> 00:13:23,540
part of the routine so probably these

275
00:13:21,139 --> 00:13:25,939
two things because they are known should

276
00:13:23,539 --> 00:13:28,699
probably just go up in here because you

277
00:13:25,940 --> 00:13:32,360
can just front load the loop with that

278
00:13:28,700 --> 00:13:34,160
computation and that way you don't have

279
00:13:32,360 --> 00:13:36,159
to have a dependency on it when you move

280
00:13:34,159 --> 00:13:38,269
down into the lower part of the code I

281
00:13:36,159 --> 00:13:41,230
can't really think of a lot of reason

282
00:13:38,269 --> 00:13:41,230
why we wouldn't do that

283
00:13:42,340 --> 00:13:52,340
so you know I think mostly what we're

284
00:13:44,990 --> 00:13:54,919
looking at here is is more this yeah so

285
00:13:52,340 --> 00:13:56,480
you know we have got this part of the

286
00:13:54,919 --> 00:13:58,759
process to which is producing the normal

287
00:13:56,480 --> 00:14:01,279
and single so you know when we look at

288
00:13:58,759 --> 00:14:04,039
this we know it looks like anyway we're

289
00:14:01,279 --> 00:14:05,689
gonna have to produce this value in sort

290
00:14:04,039 --> 00:14:07,519
of two different ways right we need the

291
00:14:05,690 --> 00:14:11,000
broadcast able version and then we need

292
00:14:07,519 --> 00:14:20,360
the regular version this one is not the

293
00:14:11,000 --> 00:14:23,750
same it's the negative of it right so so

294
00:14:20,360 --> 00:14:26,240
I guess though in that case it's still

295
00:14:23,750 --> 00:14:30,889
more or less trivial to produce because

296
00:14:26,240 --> 00:14:33,080
it's just a negation right so again in

297
00:14:30,889 --> 00:14:36,379
both cases these two values are really

298
00:14:33,080 --> 00:14:38,629
closely related and so I suppose that's

299
00:14:36,379 --> 00:14:40,970
really not that big of a deal one way or

300
00:14:38,629 --> 00:14:42,950
the other so our job here is really just

301
00:14:40,970 --> 00:14:48,410
to figure out how to simplify this down

302
00:14:42,950 --> 00:14:52,610
and not have so much fussing it is a

303
00:14:48,409 --> 00:14:54,500
little bit bad that we have just you

304
00:14:52,610 --> 00:15:00,169
know two sort of ways that that's gonna

305
00:14:54,500 --> 00:15:02,720
work so let's take a let's take a look

306
00:15:00,169 --> 00:15:07,879
at the occlusion D again so that's those

307
00:15:02,720 --> 00:15:10,310
are broken apart so actually though now

308
00:15:07,879 --> 00:15:12,889
you know I guess actually looking at it

309
00:15:10,309 --> 00:15:15,448
they're always broken apart really so

310
00:15:12,889 --> 00:15:20,458
it's really just one

311
00:15:15,448 --> 00:15:28,649
we just want replicated our X and Z in

312
00:15:20,458 --> 00:15:30,418
there in both cases so and looking at it

313
00:15:28,649 --> 00:15:31,948
though I think we still want them packed

314
00:15:30,418 --> 00:15:34,470
because if you look at what will happen

315
00:15:31,948 --> 00:15:38,519
with impact we would want to do this

316
00:15:34,470 --> 00:15:41,459
absolute value in a more we'd want to do

317
00:15:38,519 --> 00:15:43,889
the absolute value wide on the are X's

318
00:15:41,458 --> 00:15:46,048
and Y's and then just broadcast to get

319
00:15:43,889 --> 00:15:49,048
the 1 norm probably would be my guess

320
00:15:46,048 --> 00:15:51,208
and then assuming that they were wide

321
00:15:49,048 --> 00:15:56,220
like that again we would just broadcast

322
00:15:51,208 --> 00:15:58,828
from that one value yeah so I think what

323
00:15:56,220 --> 00:16:01,439
we want to do here is let's just start

324
00:15:58,828 --> 00:16:04,378
by just taking occlusion D and I'm gonna

325
00:16:01,438 --> 00:16:07,349
just start with the simple act of making

326
00:16:04,379 --> 00:16:09,569
a clusion D here be equal to negative R

327
00:16:07,350 --> 00:16:13,470
ad single like this so that we don't

328
00:16:09,568 --> 00:16:16,858
actually have any initialization of it

329
00:16:13,470 --> 00:16:18,298
in here I think again I'm just it's just

330
00:16:16,859 --> 00:16:20,730
a little bit hard to know whether it's

331
00:16:18,298 --> 00:16:21,688
smarter to put it up here or not if you

332
00:16:20,730 --> 00:16:27,720
take a look at what's gonna have to

333
00:16:21,688 --> 00:16:31,488
happen with it the radial value which is

334
00:16:27,720 --> 00:16:43,160
going into the probe and thing here so

335
00:16:31,489 --> 00:16:48,809
the raid erection already gets used here

336
00:16:43,159 --> 00:16:50,850
right and it's just a little weird

337
00:16:48,808 --> 00:16:52,108
because it's replicated out right and

338
00:16:50,850 --> 00:16:55,379
the reason is replicated out is because

339
00:16:52,109 --> 00:16:58,199
it's gonna get used in this way so we're

340
00:16:55,379 --> 00:17:02,399
already taking up a bunch of slots with

341
00:16:58,198 --> 00:17:05,220
this and so it's really hard for me to

342
00:17:02,399 --> 00:17:08,189
say exactly how we want that to go if if

343
00:17:05,220 --> 00:17:11,370
this were actually packed so the radii

344
00:17:08,189 --> 00:17:14,429
actually along a line you can see here

345
00:17:11,369 --> 00:17:19,469
why we don't do that it's well actually

346
00:17:14,429 --> 00:17:22,110
can you well actually actually hold on

347
00:17:19,470 --> 00:17:24,600
let's see where this gets used so I'm

348
00:17:22,109 --> 00:17:26,698
gonna do a search for rady ear and see

349
00:17:24,599 --> 00:17:29,490
what's going on with that you can see

350
00:17:26,699 --> 00:17:40,350
the inverse getting taken there

351
00:17:29,490 --> 00:17:46,490
I wish this my head wasn't in the way so

352
00:17:40,349 --> 00:17:56,248
this is actually kind of interesting oh

353
00:17:46,490 --> 00:18:00,569
my oh my goodness alright so basically

354
00:17:56,249 --> 00:18:03,350
this code is kind of kind of garbage

355
00:18:00,569 --> 00:18:08,128
actually Wow

356
00:18:03,349 --> 00:18:10,230
so I so this is all terrible and there's

357
00:18:08,128 --> 00:18:12,658
a lot of stuff that we could do here so

358
00:18:10,230 --> 00:18:15,929
if you take a look at what's going on

359
00:18:12,659 --> 00:18:20,700
here's us computing sine values from Ray

360
00:18:15,929 --> 00:18:23,970
deep but as you can kind of see there's

361
00:18:20,700 --> 00:18:26,899
no reason like whatsoever that this

362
00:18:23,970 --> 00:18:31,470
would have to get done here

363
00:18:26,898 --> 00:18:35,189
these are constant for the Ray and you

364
00:18:31,470 --> 00:18:39,778
could have done this wide anyway so like

365
00:18:35,190 --> 00:18:43,558
this is kind of just dumb so we have a

366
00:18:39,778 --> 00:18:48,628
lot of work we can do here this is this

367
00:18:43,558 --> 00:18:51,058
is just kind of ripe for for fixing so

368
00:18:48,628 --> 00:18:52,980
if we imagined that our rady was packed

369
00:18:51,058 --> 00:19:00,148
which i think is what we actually want

370
00:18:52,980 --> 00:19:02,159
you could have done this right so this

371
00:19:00,148 --> 00:19:06,028
would do all three of these at the same

372
00:19:02,159 --> 00:19:09,299
time and then you would just use the one

373
00:19:06,028 --> 00:19:12,778
you actually cared about to produce the

374
00:19:09,298 --> 00:19:16,440
normal values and if you look at what

375
00:19:12,778 --> 00:19:22,490
these are doing it's doing it wide again

376
00:19:16,440 --> 00:19:28,799
so like this doesn't make any sense you

377
00:19:22,490 --> 00:19:30,870
know just just bear with me here

378
00:19:28,799 --> 00:19:33,389
so if you take a look at what's going on

379
00:19:30,869 --> 00:19:37,169
you can see like alright we have sine X

380
00:19:33,390 --> 00:19:38,940
Y Z this are being done like 1 2 3 but

381
00:19:37,170 --> 00:19:40,710
we could have done them just like this

382
00:19:38,940 --> 00:19:42,900
if ray D was packed we would have just

383
00:19:40,710 --> 00:19:44,850
gotten those and radius constant so we

384
00:19:42,900 --> 00:19:47,070
don't even need to do this we could do

385
00:19:44,849 --> 00:19:49,409
this once at the top of the function not

386
00:19:47,069 --> 00:19:53,839
only the constant is from a table so we

387
00:19:49,410 --> 00:19:53,840
could actually do this pre compute it

388
00:19:56,930 --> 00:20:06,269
right I mean duh so anyway if you take a

389
00:20:03,839 --> 00:20:10,859
look at at what we were doing there this

390
00:20:06,269 --> 00:20:12,869
is this is just just stupid so then if

391
00:20:10,859 --> 00:20:14,669
you look at what's going on here let's

392
00:20:12,869 --> 00:20:17,069
suppose that we were going to compute

393
00:20:14,670 --> 00:20:19,650
normal XY Z there and just leave it

394
00:20:17,069 --> 00:20:21,839
packed so if we were going to do that we

395
00:20:19,650 --> 00:20:24,630
would just have normal XY Z which is

396
00:20:21,839 --> 00:20:26,970
actually all of these sine X Y Z is

397
00:20:24,630 --> 00:20:30,720
already lamed it's right there so we

398
00:20:26,970 --> 00:20:35,970
just need to do an or with this so we'd

399
00:20:30,720 --> 00:20:41,640
have 1 x and x max 1 and Y mask and an

400
00:20:35,970 --> 00:20:47,339
and not with the Z mask right and so if

401
00:20:41,640 --> 00:20:53,780
we wanted to make this line up all we

402
00:20:47,339 --> 00:20:53,779
would have to do is not so

403
00:20:57,789 --> 00:21:04,899
how come I can't where is this and not

404
00:21:02,640 --> 00:21:15,130
where is that coming from how come

405
00:21:04,900 --> 00:21:21,120
that's not showing up here that's weird

406
00:21:15,130 --> 00:21:21,120
so why isn't that why isn't that jump

407
00:21:21,420 --> 00:21:25,300
weird so and not for some reason it's

408
00:21:23,950 --> 00:21:26,319
not sure that I don't know why doesn't

409
00:21:25,299 --> 00:21:27,940
matter don't really care

410
00:21:26,319 --> 00:21:35,919
oh is it because it doesn't handle

411
00:21:27,940 --> 00:21:38,580
comments interesting yeah it doesn't

412
00:21:35,920 --> 00:21:41,769
have a comments that's what it is

413
00:21:38,579 --> 00:21:43,449
interesting so if you take a look at

414
00:21:41,769 --> 00:21:45,279
here it's the bee that gets knotted so

415
00:21:43,450 --> 00:21:47,380
it's like the Z mast that actually wants

416
00:21:45,279 --> 00:21:49,029
to get knotted and so the and not that

417
00:21:47,380 --> 00:21:52,540
we're doing here if we just wanted to

418
00:21:49,029 --> 00:21:55,809
make this be completely like inline you

419
00:21:52,539 --> 00:22:01,180
would just do like oh you know not this

420
00:21:55,809 --> 00:22:03,369
thing right you know what I mean so if

421
00:22:01,180 --> 00:22:05,590
you did not that thing and put the end

422
00:22:03,369 --> 00:22:08,199
in here then all of a sudden this is all

423
00:22:05,589 --> 00:22:11,559
so wide you see what I'm saying so I'm

424
00:22:08,200 --> 00:22:13,509
just knocking these out one at a time I

425
00:22:11,559 --> 00:22:15,730
don't actually want to do that quite yet

426
00:22:13,509 --> 00:22:19,150
because I wanted to leave that code path

427
00:22:15,730 --> 00:22:22,120
intact so if we assume that we then just

428
00:22:19,150 --> 00:22:23,860
grabbed this part and put it in here for

429
00:22:22,119 --> 00:22:27,129
the moment we need to do this but

430
00:22:23,859 --> 00:22:32,349
otherwise we can then say sign X Y Z get

431
00:22:27,130 --> 00:22:37,600
sword with 1 and XYZ mask like so and

432
00:22:32,349 --> 00:22:40,179
off we go right so at that point we're

433
00:22:37,599 --> 00:22:42,099
just saying we just need to produce an X

434
00:22:40,180 --> 00:22:44,289
Y Z mask here and you can see the

435
00:22:42,099 --> 00:22:48,159
various pieces that we were actually

436
00:22:44,289 --> 00:22:54,899
trying to do it's a little bit hairy

437
00:22:48,160 --> 00:22:54,900
like it's you know it is what it is but

438
00:22:59,750 --> 00:23:05,549
presumably there's a way we can do this

439
00:23:02,160 --> 00:23:07,830
not too horribly wide and so you can see

440
00:23:05,549 --> 00:23:09,690
why I want to do this is because it

441
00:23:07,829 --> 00:23:11,429
collapses to just two instructions

442
00:23:09,690 --> 00:23:15,029
something that previously took six

443
00:23:11,430 --> 00:23:18,120
instructions at the cost of just adding

444
00:23:15,029 --> 00:23:19,859
one not into something else so the

445
00:23:18,119 --> 00:23:25,769
question now is how would you compute

446
00:23:19,859 --> 00:23:28,859
this efficiently and I'm not entirely

447
00:23:25,769 --> 00:23:33,450
sure so the point of the pea chef Bea's

448
00:23:28,859 --> 00:23:37,909
here is to produce the min X and the min

449
00:23:33,450 --> 00:23:42,500
Y in the correct location and

450
00:23:37,910 --> 00:23:46,759
unfortunately oh but you know what

451
00:23:42,500 --> 00:24:03,210
what does correct location mean in this

452
00:23:46,759 --> 00:24:06,029
case hold on one second oh yeah okay so

453
00:24:03,210 --> 00:24:07,650
this actually does a full replicate so

454
00:24:06,029 --> 00:24:11,910
that actually means that this will

455
00:24:07,650 --> 00:24:16,050
produce the correct location for this

456
00:24:11,910 --> 00:24:18,570
thing so actually we can just do like a

457
00:24:16,049 --> 00:24:22,859
select or something to merge these

458
00:24:18,569 --> 00:24:24,869
things together first if we wanted to I

459
00:24:22,859 --> 00:24:27,149
mean I don't know that we do because we

460
00:24:24,869 --> 00:24:38,869
need to do the inverse part here to make

461
00:24:27,150 --> 00:24:42,500
sure that we only get one of these and

462
00:24:38,869 --> 00:24:44,729
that's really going to be the hardest

463
00:24:42,500 --> 00:24:46,880
that's really going to be the hardest

464
00:24:44,730 --> 00:24:46,880
part

465
00:25:34,200 --> 00:25:40,180
so I'm going to take a quick look at

466
00:25:37,119 --> 00:25:42,189
exactly why we chose to do this way this

467
00:25:40,180 --> 00:25:43,840
was trying to make it as efficient as

468
00:25:42,190 --> 00:25:46,690
possible right because what you could

469
00:25:43,839 --> 00:25:49,869
see is when we are doing our actual

470
00:25:46,690 --> 00:25:52,600
collision loop so this is checking again

471
00:25:49,869 --> 00:25:55,689
since each individual box in a set of

472
00:25:52,599 --> 00:26:00,519
boxes and what you can see is when we

473
00:25:55,690 --> 00:26:02,440
actually do the the hit testing we store

474
00:26:00,519 --> 00:26:05,529
some of the stuff that we actually need

475
00:26:02,440 --> 00:26:09,100
like what the color and emission was for

476
00:26:05,529 --> 00:26:13,269
each of the lanes right and then we also

477
00:26:09,099 --> 00:26:15,219
store the min X and the min Y and the

478
00:26:13,269 --> 00:26:18,160
reason that we did that was just because

479
00:26:15,220 --> 00:26:22,809
we want to know which side we hit so we

480
00:26:18,160 --> 00:26:25,930
know which normal to pick right so these

481
00:26:22,809 --> 00:26:28,690
are really the only reason that we're

482
00:26:25,930 --> 00:26:30,549
storing these is just so we can try to

483
00:26:28,690 --> 00:26:33,580
figure out like what we actually hit

484
00:26:30,549 --> 00:26:36,369
whether we hit the minimum or the

485
00:26:33,579 --> 00:26:38,819
maximum and so when we come down here

486
00:26:36,369 --> 00:26:42,549
all we're really doing is saying look

487
00:26:38,819 --> 00:26:46,869
did we hit a minimum or a maximum right

488
00:26:42,549 --> 00:26:49,569
for this thing and so it's saying if we

489
00:26:46,869 --> 00:26:52,679
hit the and and you can see we use the X

490
00:26:49,569 --> 00:26:55,509
and the y right are the two that we keep

491
00:26:52,680 --> 00:26:58,750
so we're just saying look did you hit

492
00:26:55,509 --> 00:27:00,220
the minimum or maximum of the X right

493
00:26:58,750 --> 00:27:02,859
and did you hit the minimum or maximum

494
00:27:00,220 --> 00:27:04,390
of the Y that's what we're just trying

495
00:27:02,859 --> 00:27:07,599
to do and so what we're doing is we're

496
00:27:04,390 --> 00:27:12,850
just looking to see whether this thing

497
00:27:07,599 --> 00:27:15,189
is equivalent T ray or not and since we

498
00:27:12,849 --> 00:27:17,319
don't know which one of them which one

499
00:27:15,190 --> 00:27:20,620
of the lanes contains the actual value

500
00:27:17,319 --> 00:27:24,039
that we care about we're using the

501
00:27:20,619 --> 00:27:27,129
shuffler to move the thing we hit into

502
00:27:24,039 --> 00:27:28,299
the well and it basically replicates it

503
00:27:27,130 --> 00:27:33,690
everywhere so that we just end up with

504
00:27:28,299 --> 00:27:38,470
one value and off we go

505
00:27:33,690 --> 00:27:40,539
so if we hit whatever this the hit team

506
00:27:38,470 --> 00:27:41,920
in X thing the thing that we actually

507
00:27:40,539 --> 00:27:42,909
hit there it's not I shouldn't say

508
00:27:41,920 --> 00:27:44,350
whether we hit the minimum of the

509
00:27:42,910 --> 00:27:46,808
maximum it's just whether we hit the X

510
00:27:44,349 --> 00:27:50,378
or not right whether X was the thing

511
00:27:46,808 --> 00:27:51,730
that was the closest hit that that's the

512
00:27:50,378 --> 00:27:53,678
way I should say it's not the max is not

513
00:27:51,730 --> 00:27:55,929
relevant because we don't care which

514
00:27:53,679 --> 00:27:57,730
side of the box it's it's the min of the

515
00:27:55,929 --> 00:27:59,679
Ray that's coming in so it was the

516
00:27:57,730 --> 00:28:03,399
closest hit that's what that min refers

517
00:27:59,679 --> 00:28:07,059
to so it's actually just saying look did

518
00:28:03,398 --> 00:28:08,888
the X did the X stop us and then it says

519
00:28:07,058 --> 00:28:10,538
that the Y stopped us and then it says

520
00:28:08,888 --> 00:28:14,308
well if neither the X or the Y stopped

521
00:28:10,538 --> 00:28:14,308
us then the Z must have stopped us right

522
00:28:16,378 --> 00:28:30,209
so that's what we're doing there is just

523
00:28:19,319 --> 00:28:33,428
saving that value or those two values

524
00:28:30,210 --> 00:28:36,749
because it's cheap right we don't have

525
00:28:33,429 --> 00:28:36,749
to compute anything additional

526
00:28:43,000 --> 00:28:57,710
but it's just not obvious the fastest

527
00:28:46,069 --> 00:29:00,259
way to get from there to the normal and

528
00:28:57,710 --> 00:29:03,079
I'm just wondering if a mob mask plus a

529
00:29:00,259 --> 00:29:08,900
load would be faster right like I'm

530
00:29:03,079 --> 00:29:19,399
wondering if we could just do something

531
00:29:08,900 --> 00:29:25,930
more straightforward here so if we

532
00:29:19,400 --> 00:29:29,830
compute the ex mask and the Y mask and

533
00:29:25,930 --> 00:29:29,830
then did a mauve mask

534
00:29:31,990 --> 00:29:37,519
it just seems like we could just load

535
00:29:34,700 --> 00:29:44,000
that in I don't know and then you

536
00:29:37,519 --> 00:29:48,910
wouldn't have to do this you just you

537
00:29:44,000 --> 00:29:48,910
just you just or in the sign

538
00:30:15,720 --> 00:30:20,009
yeah so

539
00:30:29,420 --> 00:30:36,000
I'm just kind of tempted to go ahead and

540
00:30:32,519 --> 00:30:37,910
do it the other way so let's just take a

541
00:30:36,000 --> 00:30:43,289
quick look at what that would look like

542
00:30:37,910 --> 00:30:48,110
so suppose you just did a mauve mask on

543
00:30:43,289 --> 00:30:51,089
these right so although I guess we have

544
00:30:48,109 --> 00:30:53,729
I think we have an actual function for

545
00:30:51,089 --> 00:30:55,889
that don't mean like or whatever I don't

546
00:30:53,730 --> 00:30:59,099
really remember what it is but I thought

547
00:30:55,890 --> 00:31:05,040
we had like some really poorly named

548
00:30:59,099 --> 00:31:13,109
function yeah like this it looks like we

549
00:31:05,039 --> 00:31:14,879
don't so any true yeah so I don't know

550
00:31:13,109 --> 00:31:18,359
it doesn't it doesn't look like we

551
00:31:14,880 --> 00:31:22,410
really have a thing that moves the mask

552
00:31:18,359 --> 00:31:24,809
which we should like we probably should

553
00:31:22,410 --> 00:31:35,160
but anyway it doesn't matter so if we

554
00:31:24,809 --> 00:31:38,539
were to do a move mask on just like two

555
00:31:35,160 --> 00:31:49,050
of these so like let's do the XCOM first

556
00:31:38,539 --> 00:31:54,109
so we'd compare X's we'd compare Y's and

557
00:31:49,049 --> 00:31:58,919
then we could move masks these right and

558
00:31:54,109 --> 00:32:01,859
we know which bit we would actually want

559
00:31:58,920 --> 00:32:03,570
here because again I'm just trying to

560
00:32:01,859 --> 00:32:09,659
see like to what extent this would be

561
00:32:03,569 --> 00:32:13,740
simpler and we could actually also

562
00:32:09,660 --> 00:32:15,840
probably do these so they're both going

563
00:32:13,740 --> 00:32:18,500
to be in the same Lane so if we if we

564
00:32:15,839 --> 00:32:18,500
just take

565
00:32:22,829 --> 00:32:30,970
take these two here and now we have like

566
00:32:26,829 --> 00:32:34,178
a bit for the X and a bit for the Y and

567
00:32:30,970 --> 00:32:38,410
we know that they are in the shuffle

568
00:32:34,179 --> 00:32:41,620
index lane of this so the mauve mass PS

569
00:32:38,410 --> 00:32:43,990
we would just say look if you take that

570
00:32:41,619 --> 00:32:47,109
Mothe mask and you shuffle and you shift

571
00:32:43,990 --> 00:32:49,140
it down by shuffle index you're going to

572
00:32:47,109 --> 00:32:53,979
get the bit that you actually care about

573
00:32:49,140 --> 00:33:01,409
right in the low so if we did something

574
00:32:53,980 --> 00:33:01,409
like this where we just use these

575
00:33:02,490 --> 00:33:10,960
probably like so then this entire path

576
00:33:08,349 --> 00:33:26,619
could be done in scaler if we want it to

577
00:33:10,960 --> 00:33:28,808
right so trying to think of how this

578
00:33:26,619 --> 00:33:37,928
would want to work it'd probably be more

579
00:33:28,808 --> 00:33:39,548
like we want to shift it I'm really not

580
00:33:37,929 --> 00:33:42,490
sure exactly how we want this part to

581
00:33:39,548 --> 00:33:44,379
work right but it would be something

582
00:33:42,490 --> 00:33:55,929
like this so you'd start out and you'd

583
00:33:44,380 --> 00:33:57,880
say like you know extract which one of

584
00:33:55,929 --> 00:34:00,788
the X we're doing extract which one of

585
00:33:57,880 --> 00:34:04,299
the why we're doing put them together

586
00:34:00,788 --> 00:34:06,788
here like whether it was the X or

587
00:34:04,298 --> 00:34:09,309
whether it was the Y and then at that

588
00:34:06,788 --> 00:34:14,050
point you're gonna get an index into a

589
00:34:09,309 --> 00:34:16,358
table of four values and you can just

590
00:34:14,050 --> 00:34:20,220
get the normal right so then you would

591
00:34:16,358 --> 00:34:20,219
just say like okay

592
00:34:25,409 --> 00:34:32,409
get me the normal right so you wouldn't

593
00:34:30,099 --> 00:34:35,199
need to do any of this it'd just be two

594
00:34:32,409 --> 00:34:36,879
comps and then a bunch of scaler now I

595
00:34:35,199 --> 00:34:39,668
know that seems a little bit weird but

596
00:34:36,880 --> 00:34:42,490
because this isn't wide like we can only

597
00:34:39,668 --> 00:34:45,389
do one because we only produce one hit

598
00:34:42,489 --> 00:34:47,678
after doing all the collisions wide

599
00:34:45,389 --> 00:34:49,089
sticking this in scaler might actually

600
00:34:47,679 --> 00:34:51,490
be the right decision

601
00:34:49,090 --> 00:34:55,390
the reason I say that is because if you

602
00:34:51,489 --> 00:34:57,309
take a look at these instructions so you

603
00:34:55,389 --> 00:35:00,849
know let's just flip over here just to

604
00:34:57,309 --> 00:35:05,349
give you a little bit of a background

605
00:35:00,849 --> 00:35:08,019
here so suppose I go into sse and i say

606
00:35:05,349 --> 00:35:10,119
look if we did an and PS like what's

607
00:35:08,019 --> 00:35:12,250
gonna happen there and you can see how

608
00:35:10,119 --> 00:35:14,289
the poor tissue works ignore this line

609
00:35:12,250 --> 00:35:15,789
because this is a memory op so these are

610
00:35:14,289 --> 00:35:17,800
like you know the memory ports that are

611
00:35:15,789 --> 00:35:20,590
I'm sorry these are the memory ports

612
00:35:17,800 --> 00:35:24,550
here 2 &amp; 3 so we're really just looking

613
00:35:20,590 --> 00:35:29,590
at this right and you can see how it

614
00:35:24,550 --> 00:35:32,170
issues issues on port 0 1 &amp; 5 so if we

615
00:35:29,590 --> 00:35:35,050
were doing the and PS is and and you're

616
00:35:32,170 --> 00:35:39,760
gonna see that a lot so if we did a not

617
00:35:35,050 --> 00:35:44,440
PS I guess wouldn't be there but you can

618
00:35:39,760 --> 00:35:48,250
see here we got Pia 1 0 1 5 I don't

619
00:35:44,440 --> 00:35:50,079
remember what not and and not is or if

620
00:35:48,250 --> 00:35:54,489
there even is one I think there is but I

621
00:35:50,079 --> 00:36:02,409
just yeah and NPS there it is 0 1 5

622
00:35:54,489 --> 00:36:06,789
right comp EQ or comp PS is 0 &amp; 1 right

623
00:36:02,409 --> 00:36:09,730
so 0 1 and sometimes 5 are the ports on

624
00:36:06,789 --> 00:36:12,309
which stuff can happen if you then go

625
00:36:09,730 --> 00:36:14,170
look at like what you can do if you're

626
00:36:12,309 --> 00:36:17,769
just using a regular register what you

627
00:36:14,170 --> 00:36:18,849
can see is that port 6 shows up a lot so

628
00:36:17,769 --> 00:36:23,039
if you want to do something like

629
00:36:18,849 --> 00:36:26,019
register to register and or shift I

630
00:36:23,039 --> 00:36:28,170
don't remember what the shift mnemonics

631
00:36:26,019 --> 00:36:28,170
are

632
00:36:28,630 --> 00:36:36,619
do you have that it's like gonna be yeah

633
00:36:32,210 --> 00:36:38,000
left shift logical right so if you take

634
00:36:36,619 --> 00:36:40,699
a look at what you can do if you're

635
00:36:38,000 --> 00:36:45,139
doing register to register shifts or

636
00:36:40,699 --> 00:36:51,079
whatever the let me see what if we've

637
00:36:45,139 --> 00:36:52,969
got any what is the logical shift III

638
00:36:51,079 --> 00:36:55,250
never remember these mnemonics cuz I

639
00:36:52,969 --> 00:36:57,919
never did any Intel CPU programming back

640
00:36:55,250 --> 00:36:59,750
before Cindy at all it's like I never

641
00:36:57,920 --> 00:37:04,659
remember the monix for any of this stuff

642
00:36:59,750 --> 00:37:04,659
so let's see x64 shift

643
00:37:06,079 --> 00:37:16,639
assonance for instructions s al s AR s

644
00:37:14,010 --> 00:37:19,440
HL okay that's what we needed

645
00:37:16,639 --> 00:37:20,789
so we don't care about arithmetic shifts

646
00:37:19,440 --> 00:37:23,130
those are ones that replicate the sign

647
00:37:20,789 --> 00:37:27,779
bit so we really just care about s HL SH

648
00:37:23,130 --> 00:37:32,099
are probably in this case okay so here's

649
00:37:27,780 --> 00:37:35,790
that Shh l for immediate so there's a 31

650
00:37:32,099 --> 00:37:38,549
maybe again port six right so basically

651
00:37:35,789 --> 00:37:40,860
what I'm thinking is that we can

652
00:37:38,550 --> 00:37:43,830
basically just shove all this work on to

653
00:37:40,860 --> 00:37:46,230
port six while other people are

654
00:37:43,829 --> 00:37:49,289
finishing up crap from using all of

655
00:37:46,230 --> 00:37:51,869
ports here one in five right so we may

656
00:37:49,289 --> 00:37:54,449
just be able to get this for free so

657
00:37:51,869 --> 00:37:57,769
instead of like basically like massively

658
00:37:54,449 --> 00:37:59,879
overloading the other ports the two

659
00:37:57,769 --> 00:38:01,110
comps can be done will have to be done

660
00:37:59,880 --> 00:38:02,849
those purpose then everything else could

661
00:38:01,110 --> 00:38:05,849
be done on port six well nobody is

662
00:38:02,849 --> 00:38:07,380
actually using it the only thing I'm not

663
00:38:05,849 --> 00:38:12,269
sure about is the mob mask I don't

664
00:38:07,380 --> 00:38:14,190
really know how bad that is

665
00:38:12,269 --> 00:38:17,550
it's a it's a one you up port zero it's

666
00:38:14,190 --> 00:38:21,480
it's not horrible right so I don't know

667
00:38:17,550 --> 00:38:22,830
it's easy to savings is it not this is a

668
00:38:21,480 --> 00:38:29,460
shift by a register which is not

669
00:38:22,829 --> 00:38:32,309
fabulous so you know and one of the

670
00:38:29,460 --> 00:38:35,460
things that we could do here is actually

671
00:38:32,309 --> 00:38:37,650
just do the and on a register and then

672
00:38:35,460 --> 00:38:39,780
do one shift so rather than two variable

673
00:38:37,650 --> 00:38:44,090
shifts we could do this in the opposite

674
00:38:39,780 --> 00:38:55,019
order and that might make more sense

675
00:38:44,090 --> 00:38:56,039
hard to say if we look at these if I

676
00:38:55,019 --> 00:38:58,469
don't know what a register register

677
00:38:56,039 --> 00:39:01,590
shift looks like here so let's just take

678
00:38:58,469 --> 00:39:04,739
a look so it's a bit expensive but still

679
00:39:01,590 --> 00:39:07,309
on port six so I don't really care I

680
00:39:04,739 --> 00:39:07,309
don't think

681
00:39:16,269 --> 00:39:27,710
so let's see what we've got here um do I

682
00:39:25,610 --> 00:39:36,410
have any other cares of this year so

683
00:39:27,710 --> 00:39:39,159
let's see what do we have for what is

684
00:39:36,409 --> 00:39:39,159
the point of that

685
00:39:43,920 --> 00:39:52,349
so I guess there's a different profile

686
00:39:48,039 --> 00:39:54,969
for just a single bit shift somehow

687
00:39:52,349 --> 00:39:56,170
maybe on other maybe on different

688
00:39:54,969 --> 00:39:56,589
architectures doesn't look like it is

689
00:39:56,170 --> 00:40:00,900
here

690
00:39:56,590 --> 00:40:00,900
that is that's kind of interesting right

691
00:40:06,530 --> 00:40:13,890
so I mean I'm assuming that basically

692
00:40:09,239 --> 00:40:17,189
this is what we would end up with is one

693
00:40:13,889 --> 00:40:19,559
of these which it doesn't have bad

694
00:40:17,190 --> 00:40:21,659
latency it does take three UUP's

695
00:40:19,559 --> 00:40:24,480
but again it's not that bad because some

696
00:40:21,659 --> 00:40:28,289
port six oh I think I think this is

697
00:40:24,480 --> 00:40:30,630
probably fine right and then what we

698
00:40:28,289 --> 00:40:32,670
would do is you just have the normal

699
00:40:30,630 --> 00:40:34,230
table here you would just have the

700
00:40:32,670 --> 00:40:41,309
normals that you actually cared about

701
00:40:34,230 --> 00:40:44,119
right so the normal table you would just

702
00:40:41,309 --> 00:40:46,199
load load out of that so let's suppose

703
00:40:44,119 --> 00:40:49,529
like I don't know why we have the

704
00:40:46,199 --> 00:40:52,019
shuffle table defined here sort of

705
00:40:49,530 --> 00:40:52,530
defining it out side but you know

706
00:40:52,019 --> 00:40:55,380
whatever

707
00:40:52,530 --> 00:41:05,280
so the shuffle table there looks like

708
00:40:55,380 --> 00:41:09,150
this the normal table would look like

709
00:41:05,280 --> 00:41:13,200
this if both of these are zero that

710
00:41:09,150 --> 00:41:14,970
would mean it was Z so you know if we

711
00:41:13,199 --> 00:41:18,659
take a look at how these are going to be

712
00:41:14,969 --> 00:41:27,149
it's like you know X Y Z and nothing

713
00:41:18,659 --> 00:41:30,809
right so Z would be if it was a zero if

714
00:41:27,150 --> 00:41:33,380
it was zero zero was the lookup into the

715
00:41:30,809 --> 00:41:33,380
normal table

716
00:41:38,028 --> 00:41:48,768
if we just had the bottom bit set that

717
00:41:41,719 --> 00:41:54,889
would be X if we just had the second bit

718
00:41:48,768 --> 00:41:58,128
set that would be Y and then if both

719
00:41:54,889 --> 00:42:03,048
bits were set then it's really our

720
00:41:58,128 --> 00:42:05,958
choice and that just means that it kind

721
00:42:03,048 --> 00:42:07,608
of hit like a corner and we don't really

722
00:42:05,958 --> 00:42:09,739
know which corner it hit because we

723
00:42:07,608 --> 00:42:13,278
don't know what the Z value would have

724
00:42:09,739 --> 00:42:16,278
been so we don't know we shouldn't say

725
00:42:13,278 --> 00:42:18,048
corner it hit an edge it may have been

726
00:42:16,278 --> 00:42:19,728
at a corner if the Z value was set

727
00:42:18,048 --> 00:42:21,409
otherwise we don't know so we could

728
00:42:19,728 --> 00:42:23,778
choose to use like an edge but I'm not

729
00:42:21,409 --> 00:42:28,818
I'm just gonna bias towards X and say

730
00:42:23,778 --> 00:42:30,858
it's gonna be X in that case right so if

731
00:42:28,818 --> 00:42:33,978
we want to load out of the normal table

732
00:42:30,858 --> 00:42:36,348
we can do that as well and just say okay

733
00:42:33,978 --> 00:42:37,668
normal table and I'll just make this be

734
00:42:36,349 --> 00:42:43,629
kind of a thing that you don't ever

735
00:42:37,668 --> 00:42:46,548
actually use and just say alright that's

736
00:42:43,628 --> 00:42:48,588
that's the normal tables so now you can

737
00:42:46,548 --> 00:42:51,528
look up into the normal table and just

738
00:42:48,588 --> 00:42:55,599
load one of those and be done with it

739
00:42:51,528 --> 00:42:58,789
right so in here you just load it up and

740
00:42:55,599 --> 00:43:07,149
you'd call it a day I think and I think

741
00:42:58,789 --> 00:43:15,259
that's all we really need right yeah so

742
00:43:07,148 --> 00:43:16,368
yeah so it looks like inverse sign bit

743
00:43:15,259 --> 00:43:23,688
was never implemented

744
00:43:16,369 --> 00:43:25,039
just for F thirty twos I guess or oh no

745
00:43:23,688 --> 00:43:26,719
it's because we haven't actually made

746
00:43:25,039 --> 00:43:32,949
this packed yet that's the only reason

747
00:43:26,719 --> 00:43:35,628
yeah yeah nevermind right okay

748
00:43:32,949 --> 00:43:38,898
also I guess this technically wants to

749
00:43:35,628 --> 00:43:41,378
be an F 32x so I guess we we actually

750
00:43:38,898 --> 00:43:41,378
want that

751
00:43:43,210 --> 00:43:55,280
I'm also not sure that would not

752
00:43:46,750 --> 00:44:01,489
actually be a star there oh and this is

753
00:43:55,280 --> 00:44:02,570
wrong this needs to be initialized every

754
00:44:01,489 --> 00:44:04,250
time through the loop so I'm not sure

755
00:44:02,570 --> 00:44:08,150
but yeah that was a little bit premature

756
00:44:04,250 --> 00:44:09,590
but so when we were actually doing this

757
00:44:08,150 --> 00:44:11,450
this part still needs to be in there

758
00:44:09,590 --> 00:44:14,269
this part doesn't on that part can be up

759
00:44:11,449 --> 00:44:18,139
at the top just so it's clear but yeah

760
00:44:14,269 --> 00:44:19,880
this shuffler has to start being the

761
00:44:18,139 --> 00:44:24,199
right value because I believe it doesn't

762
00:44:19,880 --> 00:44:27,550
get set in the case where we well I

763
00:44:24,199 --> 00:44:27,549
don't know so where is this used

764
00:44:41,889 --> 00:44:44,889
so

765
00:45:02,460 --> 00:45:08,260
so I guess the idea is we just load this

766
00:45:05,500 --> 00:45:10,119
out of here and then we let it fall

767
00:45:08,260 --> 00:45:13,720
through to the bottom where we still use

768
00:45:10,119 --> 00:45:15,910
it which seems kind of strange so you

769
00:45:13,719 --> 00:45:17,259
can see us doing it unpacking it here

770
00:45:15,909 --> 00:45:20,710
for like the emission level and stuff

771
00:45:17,260 --> 00:45:28,289
right but it seems kind of weird that

772
00:45:20,710 --> 00:45:28,289
you wouldn't just do that inside so

773
00:45:28,469 --> 00:45:36,338
right like I don't quite get it so I

774
00:45:33,489 --> 00:45:37,899
feel like this is all so stupid I feel

775
00:45:36,338 --> 00:45:39,608
like there's a lot of stupid stuff going

776
00:45:37,900 --> 00:45:41,710
on here and again it's it's not because

777
00:45:39,608 --> 00:45:43,538
we were stupid really or anything it's

778
00:45:41,710 --> 00:45:45,220
just because we've gone through so many

779
00:45:43,539 --> 00:45:46,720
iterations of like refining this thing

780
00:45:45,219 --> 00:45:48,279
you starting to get to the point where a

781
00:45:46,719 --> 00:45:54,129
lot of it can just be kind of collapsed

782
00:45:48,280 --> 00:46:01,900
down so yet it's a little bit weird

783
00:45:54,130 --> 00:46:04,240
right but anyway okay so rady needs to

784
00:46:01,900 --> 00:46:07,230
be packed and then in here we have the

785
00:46:04,239 --> 00:46:09,578
normal XYZ stuff and so probe ends

786
00:46:07,230 --> 00:46:11,619
sample and single we have to decide how

787
00:46:09,579 --> 00:46:13,329
we're gonna actually feed that out but I

788
00:46:11,619 --> 00:46:15,068
think this is like way more efficient

789
00:46:13,329 --> 00:46:19,960
than this was because this was extremely

790
00:46:15,068 --> 00:46:24,239
expensive and this is not right so I

791
00:46:19,960 --> 00:46:27,970
think we basically just want this and I

792
00:46:24,239 --> 00:46:31,199
think that's by far the simplest way to

793
00:46:27,969 --> 00:46:37,269
get that normal out that we found so far

794
00:46:31,199 --> 00:46:39,669
so yeah sorry so I think we're getting

795
00:46:37,269 --> 00:46:41,829
somewhere on this now again we just have

796
00:46:39,670 --> 00:46:46,329
to decide how our exact we do this for

797
00:46:41,829 --> 00:46:48,609
this part of the things again for v3 we

798
00:46:46,329 --> 00:46:52,089
can just quickly test this to see if

799
00:46:48,608 --> 00:46:54,818
it's doing okay by first of all making

800
00:46:52,088 --> 00:46:59,619
our ad be packed like I said that we

801
00:46:54,818 --> 00:47:01,869
wanted it to be but furthermore we can

802
00:46:59,619 --> 00:47:04,210
also do this this part here by just

803
00:47:01,869 --> 00:47:06,250
doing extraction for testing let me just

804
00:47:04,210 --> 00:47:09,900
again double check I want to see if

805
00:47:06,250 --> 00:47:09,900
probes sample and single

806
00:47:24,090 --> 00:47:41,670
and yeah it looks pretty much like the

807
00:47:35,730 --> 00:47:43,679
r-value there is he's just taken like I

808
00:47:41,670 --> 00:47:47,190
said with with each of these these bits

809
00:47:43,679 --> 00:47:48,929
here so I don't know just for testing

810
00:47:47,190 --> 00:47:51,750
purposes it kind of feels like we

811
00:47:48,929 --> 00:47:55,409
probably need to keep doing things more

812
00:47:51,750 --> 00:47:57,739
or less the way we were doing them it's

813
00:47:55,409 --> 00:47:57,739
tough

814
00:47:58,940 --> 00:48:05,760
I'm gonna go ahead and and put this part

815
00:48:01,710 --> 00:48:07,260
as an if one for now and just

816
00:48:05,760 --> 00:48:20,760
double-check that this is working okay

817
00:48:07,260 --> 00:48:22,890
there we go yeah we kind of need some

818
00:48:20,760 --> 00:48:24,600
better ways to test this but we probably

819
00:48:22,889 --> 00:48:26,099
during the quality round we'll do some

820
00:48:24,599 --> 00:48:29,309
testing anyway so hopefully we'll suss

821
00:48:26,099 --> 00:48:32,789
out weird bugs in there when we get to

822
00:48:29,309 --> 00:48:35,849
that point but so what I want to do here

823
00:48:32,789 --> 00:48:38,579
is I before I flip on this path I would

824
00:48:35,849 --> 00:48:42,480
like to go ahead and get the other path

825
00:48:38,579 --> 00:48:46,049
working the back end working where it

826
00:48:42,480 --> 00:48:48,360
accepts things in the other format so if

827
00:48:46,050 --> 00:48:53,039
we were to look and say let's make probe

828
00:48:48,360 --> 00:48:54,840
and single come through wide then what

829
00:48:53,039 --> 00:48:57,690
we would do is we could still leave this

830
00:48:54,840 --> 00:48:59,940
part the same for you know this kind of

831
00:48:57,690 --> 00:49:03,480
crappy version of this path we would

832
00:48:59,940 --> 00:49:13,880
just move this in here and say okay it's

833
00:49:03,480 --> 00:49:15,659
going to be an f32 for X right I believe

834
00:49:13,880 --> 00:49:20,630
yeah

835
00:49:15,659 --> 00:49:25,170
um and so program ends sample single is

836
00:49:20,630 --> 00:49:29,880
gonna be an f32 4x and so then at that

837
00:49:25,170 --> 00:49:35,760
point the radial which is this we really

838
00:49:29,880 --> 00:49:38,309
just need to load this this rate up as

839
00:49:35,760 --> 00:49:40,650
an f32 4x in order to get this started

840
00:49:38,309 --> 00:49:42,240
right and again this can be done much

841
00:49:40,650 --> 00:49:44,880
more efficiently because we could do

842
00:49:42,239 --> 00:49:45,838
this as a single load but at this point

843
00:49:44,880 --> 00:49:48,809
we're looking at a part of the routine

844
00:49:45,838 --> 00:49:51,838
that's so uninteresting because it's

845
00:49:48,809 --> 00:49:52,829
it's not the you know it's it's not

846
00:49:51,838 --> 00:49:54,088
something that's running the loop and

847
00:49:52,829 --> 00:49:57,210
it's not a particular important part so

848
00:49:54,088 --> 00:49:59,730
we will probably want to sort of clean

849
00:49:57,210 --> 00:50:03,769
this part up later as well but at the

850
00:49:59,730 --> 00:50:07,380
moment we're not going to do that yeah

851
00:50:03,769 --> 00:50:10,139
so then for probe and sample single and

852
00:50:07,380 --> 00:50:12,720
we have rady single here so what we want

853
00:50:10,139 --> 00:50:14,969
to do now is say well that's the rady

854
00:50:12,719 --> 00:50:17,909
that's that's actually the the PAC

855
00:50:14,969 --> 00:50:20,969
tradie value that we would want to put

856
00:50:17,909 --> 00:50:23,009
in here and so if we take a look at

857
00:50:20,969 --> 00:50:25,798
probe sample and single here I'm not

858
00:50:23,010 --> 00:50:27,569
sure why because if this was already

859
00:50:25,798 --> 00:50:29,969
getting set there this wouldn't have to

860
00:50:27,568 --> 00:50:32,400
happen anyway because that because probe

861
00:50:29,969 --> 00:50:35,219
and single already was set to radial

862
00:50:32,400 --> 00:50:39,630
just to start with so this is not

863
00:50:35,219 --> 00:50:42,328
necessary right and occlusion D but in

864
00:50:39,630 --> 00:50:44,430
the same way could just have been done

865
00:50:42,329 --> 00:50:46,470
up here with a sub so it wouldn't really

866
00:50:44,429 --> 00:50:48,750
have to get touched so what we could

867
00:50:46,469 --> 00:50:51,179
have done here is say well okay like

868
00:50:48,750 --> 00:50:54,630
occlusion D the packed version would

869
00:50:51,179 --> 00:50:56,969
also do that right but again I'm not

870
00:50:54,630 --> 00:50:59,088
actually gonna look at that yet because

871
00:50:56,969 --> 00:51:02,250
I just want to do it one step at a time

872
00:50:59,088 --> 00:51:04,650
so here we're probe and sample single

873
00:51:02,250 --> 00:51:06,719
where we're setting the occlusion D this

874
00:51:04,650 --> 00:51:08,548
parts a little bit tricky because again

875
00:51:06,719 --> 00:51:11,818
now we're not actually computing that

876
00:51:08,548 --> 00:51:13,440
anymore but just in keeping with what I

877
00:51:11,818 --> 00:51:17,788
said about taking it one step at a time

878
00:51:13,440 --> 00:51:22,349
I'm just gonna go ahead and try as best

879
00:51:17,789 --> 00:51:25,230
I can to like keep this path working

880
00:51:22,349 --> 00:51:28,440
exactly the same so then in here where

881
00:51:25,230 --> 00:51:29,280
we use our as probe sample and single

882
00:51:28,440 --> 00:51:31,380
I'm just going

883
00:51:29,280 --> 00:51:36,090
go ahead now and start to actually try

884
00:51:31,380 --> 00:51:40,650
to use this properly so in here where we

885
00:51:36,090 --> 00:51:43,260
nullify out these two lanes to be

886
00:51:40,650 --> 00:51:45,210
completely honest with you I don't know

887
00:51:43,260 --> 00:51:48,270
that we care about that so if you look

888
00:51:45,210 --> 00:51:50,670
here and see the shuffle it will only

889
00:51:48,269 --> 00:51:54,509
take the two lanes anyway and iuv

890
00:51:50,670 --> 00:51:59,490
isn't used anywhere else is it well okay

891
00:51:54,510 --> 00:52:04,440
so it's used there right with that Z

892
00:51:59,489 --> 00:52:23,389
mask so the question is how much do we

893
00:52:04,440 --> 00:52:27,599
care about that so we do not use this

894
00:52:23,389 --> 00:52:30,449
anywhere else right so basically we can

895
00:52:27,599 --> 00:52:33,239
leave those lanes as garbage because as

896
00:52:30,449 --> 00:52:35,399
you can see right here we actually like

897
00:52:33,239 --> 00:52:37,739
get rid of them like those two zero

898
00:52:35,400 --> 00:52:40,590
zeros will nullify whatever was in the

899
00:52:37,739 --> 00:52:42,899
UV no matter what you selected out so

900
00:52:40,590 --> 00:52:45,930
this right here can actually now be

901
00:52:42,900 --> 00:52:48,840
replaced with just probin samples single

902
00:52:45,929 --> 00:52:51,329
because we actually just know that that

903
00:52:48,840 --> 00:52:54,559
is what it is I can change it to our for

904
00:52:51,329 --> 00:52:57,989
the time being and go like that right

905
00:52:54,559 --> 00:53:00,150
and we should be fine now if you look at

906
00:52:57,989 --> 00:53:04,559
what's going on here we need to test the

907
00:53:00,150 --> 00:53:06,809
Z value and do a select on that and we

908
00:53:04,559 --> 00:53:10,019
need that to have been replicated right

909
00:53:06,809 --> 00:53:12,449
we need to have the the replication here

910
00:53:10,019 --> 00:53:15,360
but that's pretty easy because we can

911
00:53:12,449 --> 00:53:19,169
just do like a broadcast for X on that

912
00:53:15,360 --> 00:53:21,090
thing and I don't actually know how that

913
00:53:19,170 --> 00:53:23,039
was written yeah with the index so we

914
00:53:21,090 --> 00:53:25,769
could if we want Z we can just say look

915
00:53:23,039 --> 00:53:28,320
broadcast out the Z and off you go

916
00:53:25,769 --> 00:53:31,980
right so at that point it's pretty

917
00:53:28,320 --> 00:53:35,670
straightforward to produce the one norm

918
00:53:31,980 --> 00:53:38,280
which we want to do the sum and the

919
00:53:35,670 --> 00:53:41,740
divide fat parts again it's a little bit

920
00:53:38,280 --> 00:53:46,450
harder unfortunately

921
00:53:41,739 --> 00:53:48,399
just because we we're trying to do a

922
00:53:46,449 --> 00:53:50,230
horizontal ad here and those are just

923
00:53:48,400 --> 00:53:51,880
slow they they don't end up really being

924
00:53:50,230 --> 00:53:55,630
any faster a lot of times than just

925
00:53:51,880 --> 00:53:59,559
doing it manually so it's kind of

926
00:53:55,630 --> 00:54:01,480
unfortunate but what we want to do here

927
00:53:59,559 --> 00:54:04,360
is just say okay let's let's go ahead

928
00:54:01,480 --> 00:54:07,269
and do this um so I'm gonna do an ABS R

929
00:54:04,360 --> 00:54:08,559
is absolute value of R because you can

930
00:54:07,269 --> 00:54:10,659
see that it's being done to all of these

931
00:54:08,559 --> 00:54:11,920
so we might as well just do it once and

932
00:54:10,659 --> 00:54:15,279
then all we have to do is just do a

933
00:54:11,920 --> 00:54:27,760
broadcast for X on our R to basically

934
00:54:15,280 --> 00:54:30,700
some it out right and in this case we

935
00:54:27,760 --> 00:54:32,020
want our abs are because we don't again

936
00:54:30,699 --> 00:54:37,210
want to do it we just want to do that

937
00:54:32,019 --> 00:54:38,920
that some right and when we get to here

938
00:54:37,210 --> 00:54:46,720
this one is this one is just the regular

939
00:54:38,920 --> 00:54:48,990
R so we can just use that right so I

940
00:54:46,719 --> 00:54:53,169
think that's everything that we needed

941
00:54:48,989 --> 00:54:57,879
and now probe n sample single in this

942
00:54:53,170 --> 00:55:00,039
case is just it's just the value it's

943
00:54:57,880 --> 00:55:03,130
just it's just flows directly through

944
00:55:00,039 --> 00:55:06,550
right and so our goal would then be to

945
00:55:03,130 --> 00:55:09,880
also change sample P to to be that next

946
00:55:06,550 --> 00:55:12,640
right and you know in theory that's now

947
00:55:09,880 --> 00:55:15,309
got the correct flow through for

948
00:55:12,639 --> 00:55:18,549
sampling right and again we would really

949
00:55:15,309 --> 00:55:21,039
like some better testing here it's it's

950
00:55:18,550 --> 00:55:26,800
very hard for me to know like to what

951
00:55:21,039 --> 00:55:28,300
extent this is actually correct so at

952
00:55:26,800 --> 00:55:33,190
some point we're probably gonna have to

953
00:55:28,300 --> 00:55:36,460
do some kind of like thing where we put

954
00:55:33,190 --> 00:55:37,570
like a unit test on top of the grid

955
00:55:36,460 --> 00:55:41,500
raycast

956
00:55:37,570 --> 00:55:43,269
just to like try to suss out problem

957
00:55:41,500 --> 00:55:44,530
like finicky problems that won't show up

958
00:55:43,269 --> 00:55:46,389
because if there's a really major

959
00:55:44,530 --> 00:55:48,340
problem we'll see it but if there's a

960
00:55:46,389 --> 00:55:50,379
subtle problem like oh that normal is

961
00:55:48,340 --> 00:55:52,000
pointing the wrong direction with

962
00:55:50,380 --> 00:55:54,220
something like lighting it's so hard to

963
00:55:52,000 --> 00:55:56,858
know if it's right just by look

964
00:55:54,219 --> 00:55:58,449
that like we're probably enough to

965
00:55:56,858 --> 00:56:00,880
construct some really specific test

966
00:55:58,449 --> 00:56:02,889
cases so we can see that's I don't

967
00:56:00,880 --> 00:56:07,840
really know any other way to it approach

968
00:56:02,889 --> 00:56:10,539
it there's really not a lot of ways to

969
00:56:07,840 --> 00:56:12,099
unit test the entire system but we could

970
00:56:10,539 --> 00:56:13,590
like try to isolate just the grid

971
00:56:12,099 --> 00:56:17,140
raycast

972
00:56:13,590 --> 00:56:18,849
and say like okay we know if we shot

973
00:56:17,139 --> 00:56:20,319
away from here it should hit this thing

974
00:56:18,849 --> 00:56:22,690
and it should point in this direction

975
00:56:20,320 --> 00:56:23,410
right and we could construct some of

976
00:56:22,690 --> 00:56:26,019
those cases

977
00:56:23,409 --> 00:56:27,969
- just like test out like okay can we

978
00:56:26,019 --> 00:56:30,009
get each of the normals the right way

979
00:56:27,969 --> 00:56:31,929
what happens if we get a corner like you

980
00:56:30,010 --> 00:56:34,090
know just try to do a couple of those

981
00:56:31,929 --> 00:56:38,019
things just for trying to suss out bugs

982
00:56:34,090 --> 00:56:39,309
in the routine and it's like pushing

983
00:56:38,019 --> 00:56:41,409
structure dart through it basically

984
00:56:39,309 --> 00:56:44,049
right I often talk about how useful that

985
00:56:41,409 --> 00:56:45,909
is so we would just be pushing structure

986
00:56:44,050 --> 00:56:49,900
dart effectively through the pipeline

987
00:56:45,909 --> 00:56:52,179
here to see what happens that's all all

988
00:56:49,900 --> 00:56:55,420
right so let's suppose that sample P was

989
00:56:52,179 --> 00:56:57,730
going to be a 32 for X as well like

990
00:56:55,420 --> 00:57:01,180
let's go see what that would do so if we

991
00:56:57,730 --> 00:57:04,030
look through here for the usages of

992
00:57:01,179 --> 00:57:06,669
sample P you can pretty much see that

993
00:57:04,030 --> 00:57:08,650
actually it's just this is all it is so

994
00:57:06,670 --> 00:57:12,220
so actually that part we don't even

995
00:57:08,650 --> 00:57:17,079
really need - all we would do in here is

996
00:57:12,219 --> 00:57:21,250
just say oh all right we just want this

997
00:57:17,079 --> 00:57:23,710
to happen now right so so that's pretty

998
00:57:21,250 --> 00:57:27,639
straightforward and now what we would do

999
00:57:23,710 --> 00:57:30,699
is look back at where sample P was

1000
00:57:27,639 --> 00:57:33,489
getting constructed and for I should

1001
00:57:30,699 --> 00:57:34,149
sorry I did that a little bit too

1002
00:57:33,489 --> 00:57:40,149
sleight of hand

1003
00:57:34,150 --> 00:57:42,608
I meant that so we need probe P single

1004
00:57:40,150 --> 00:57:44,950
now to be coming through as an f32 for X

1005
00:57:42,608 --> 00:57:49,029
as well and again this is just us trying

1006
00:57:44,949 --> 00:57:51,939
to simplify that part of the pipeline so

1007
00:57:49,030 --> 00:57:55,119
there's not so much shuffling around so

1008
00:57:51,940 --> 00:57:57,579
if we look at probe P single here how

1009
00:57:55,119 --> 00:57:59,588
that's getting initialized it's as ray

1010
00:57:57,579 --> 00:58:05,348
origin single and again so we can do a

1011
00:57:59,588 --> 00:58:06,949
pretty simple sort of fudging here for

1012
00:58:05,349 --> 00:58:09,710
the time being of this

1013
00:58:06,949 --> 00:58:12,139
so now that we just have the Ray origin

1014
00:58:09,710 --> 00:58:14,030
it just gets packed in there as the

1015
00:58:12,139 --> 00:58:16,150
probe piece single and that's all we

1016
00:58:14,030 --> 00:58:18,260
really need it to be at the moment right

1017
00:58:16,150 --> 00:58:20,180
and so let's take a look at where that

1018
00:58:18,260 --> 00:58:21,950
gets set so you can see here where we do

1019
00:58:20,179 --> 00:58:24,679
probe P single cos ray or it's a single

1020
00:58:21,949 --> 00:58:27,919
plus T Terminator II D single producing

1021
00:58:24,679 --> 00:58:30,259
this Ray origin here now you can see

1022
00:58:27,920 --> 00:58:32,358
that this is actually ray origin single

1023
00:58:30,260 --> 00:58:34,130
we're actually creating that same value

1024
00:58:32,358 --> 00:58:35,989
so probe P single and Ray are just ago

1025
00:58:34,130 --> 00:58:37,940
the same value at the start so we can

1026
00:58:35,989 --> 00:58:40,969
make that pretty simple T terminate is

1027
00:58:37,940 --> 00:58:42,858
just the T value which we could just be

1028
00:58:40,969 --> 00:58:45,739
making wide at this point it's really

1029
00:58:42,858 --> 00:58:49,578
easy for us to do that and so this could

1030
00:58:45,739 --> 00:58:51,739
be a wide value very very simply and so

1031
00:58:49,579 --> 00:58:54,170
r ad single is then the only thing that

1032
00:58:51,739 --> 00:58:58,009
we actually would need and you can see

1033
00:58:54,170 --> 00:58:59,960
that it's already something that we were

1034
00:58:58,010 --> 00:59:00,940
doing that way it's this value here

1035
00:58:59,960 --> 00:59:03,980
right

1036
00:59:00,940 --> 00:59:07,159
so I think all we really want to do is

1037
00:59:03,980 --> 00:59:09,829
now start by probably the first thing is

1038
00:59:07,159 --> 00:59:16,219
to look to see if ray D single is

1039
00:59:09,829 --> 00:59:18,369
actually used like anywhere other than

1040
00:59:16,219 --> 00:59:21,318
to do exactly the thing now and it's not

1041
00:59:18,369 --> 00:59:24,950
so if we look at what we're gonna do

1042
00:59:21,318 --> 00:59:27,199
here we're going to change and then I'll

1043
00:59:24,949 --> 00:59:29,808
just use sort of a new naming scheme for

1044
00:59:27,199 --> 00:59:32,088
this just to make it clear but it should

1045
00:59:29,809 --> 00:59:36,710
become obvious what we're doing so let's

1046
00:59:32,088 --> 00:59:44,358
just make a rady which is exactly this

1047
00:59:36,710 --> 00:59:47,030
value and so at the start the probe

1048
00:59:44,358 --> 00:59:50,480
sample n single is just going to be the

1049
00:59:47,030 --> 00:59:52,220
radii act value right and then here we

1050
00:59:50,480 --> 00:59:54,650
would just use the radio packed value

1051
00:59:52,219 --> 00:59:57,078
and this t terminate would be packed as

1052
00:59:54,650 --> 01:00:01,940
well the Ray origin single I'm just

1053
00:59:57,079 --> 01:00:08,240
going to call this ray origin packed and

1054
01:00:01,940 --> 01:00:10,789
it's literally this right and this probe

1055
01:00:08,239 --> 01:00:14,169
sample P single would just be ray origin

1056
01:00:10,789 --> 01:00:14,170
packed right

1057
01:00:14,599 --> 01:00:18,900
because we know we need to sort of

1058
01:00:17,010 --> 01:00:21,330
produce these values anyway so we can

1059
01:00:18,900 --> 01:00:22,800
just stuff them in here and they'll be

1060
01:00:21,329 --> 01:00:25,769
sitting on the stack when we need them

1061
01:00:22,800 --> 01:00:28,170
the probe sample P single here would now

1062
01:00:25,769 --> 01:00:30,690
just be the Ray origin packed Plus D

1063
01:00:28,170 --> 01:00:32,670
terminate comes array D packed and

1064
01:00:30,690 --> 01:00:34,559
that's all we would really actually need

1065
01:00:32,670 --> 01:00:36,599
now the problem here is that T

1066
01:00:34,559 --> 01:00:42,719
terminates not going to be correct so

1067
01:00:36,599 --> 01:00:48,150
this needs to be expanded out I don't

1068
01:00:42,719 --> 01:00:51,799
remember what this was called there it

1069
01:00:48,150 --> 01:00:56,090
is so T terminate would start at zero

1070
01:00:51,800 --> 01:00:58,920
and then when we advance it so like this

1071
01:00:56,090 --> 01:01:03,840
the only difference here is we just

1072
01:00:58,920 --> 01:01:09,210
loaded up right so we would just load it

1073
01:01:03,840 --> 01:01:11,400
up into a wider wider thing so again in

1074
01:01:09,210 --> 01:01:14,699
terms of keeping this without actually

1075
01:01:11,400 --> 01:01:25,170
doing any actual work here if we go

1076
01:01:14,699 --> 01:01:27,089
ahead and oops if we go ahead and

1077
01:01:25,170 --> 01:01:28,619
continue the trend of just putting this

1078
01:01:27,090 --> 01:01:30,090
into that format without actually trying

1079
01:01:28,619 --> 01:01:32,339
to make it actually do it efficiently

1080
01:01:30,090 --> 01:01:35,250
you can see that we can compile the code

1081
01:01:32,340 --> 01:01:37,680
as it is at the moment and hopefully we

1082
01:01:35,250 --> 01:01:39,900
didn't mess up too much right hopefully

1083
01:01:37,679 --> 01:01:43,399
everything's still okay there it looks

1084
01:01:39,900 --> 01:01:43,400
pretty reasonable at the moment anyway

1085
01:01:48,568 --> 01:01:56,349
all right and so once we sort of do a

1086
01:01:53,768 --> 01:01:58,929
clusion D here then we will have all of

1087
01:01:56,349 --> 01:02:01,869
them and so at that point we should be

1088
01:01:58,929 --> 01:02:05,139
in in good shape so let's just finish

1089
01:02:01,869 --> 01:02:07,630
that off so let's take a look at where

1090
01:02:05,139 --> 01:02:10,509
occlusion D is getting used you can see

1091
01:02:07,630 --> 01:02:13,119
here that it's it's just getting used by

1092
01:02:10,509 --> 01:02:16,298
doing a sort of a replication here so

1093
01:02:13,119 --> 01:02:21,690
let's just change that to say look let's

1094
01:02:16,298 --> 01:02:24,818
grab the XYZ out of this thing like so

1095
01:02:21,690 --> 01:02:28,900
and then occlusion D can go ahead and

1096
01:02:24,818 --> 01:02:32,288
also be NF 32x right so we can do this

1097
01:02:28,900 --> 01:02:34,989
and say let's zero here I don't know why

1098
01:02:32,289 --> 01:02:36,430
these are not also being done this way

1099
01:02:34,989 --> 01:02:38,079
they probably should be just for

1100
01:02:36,429 --> 01:02:39,518
completeness because it lets compiler

1101
01:02:38,079 --> 01:02:41,739
see that that's supposed to be zeroed

1102
01:02:39,518 --> 01:02:44,468
there instead of like do they remember

1103
01:02:41,739 --> 01:02:44,949
how the initialization syntax affects m1

1104
01:02:44,469 --> 01:02:46,659
tomates

1105
01:02:44,949 --> 01:02:48,159
you know I don't know maybe they do

1106
01:02:46,659 --> 01:02:50,739
maybe they don't don't want to have to

1107
01:02:48,159 --> 01:02:53,048
think about it so here I can just use

1108
01:02:50,739 --> 01:02:56,440
ray deep act so that's a pretty easy way

1109
01:02:53,048 --> 01:02:58,329
to set occlusion D in this case again

1110
01:02:56,440 --> 01:03:00,068
since we know that this will be what

1111
01:02:58,329 --> 01:03:03,009
happens on fallout what we probably

1112
01:03:00,068 --> 01:03:05,199
could do is just do this up at the top

1113
01:03:03,009 --> 01:03:08,259
so that could just be that it's just a

1114
01:03:05,199 --> 01:03:09,639
sub to replicate and that seems probably

1115
01:03:08,259 --> 01:03:13,420
fine

1116
01:03:09,639 --> 01:03:14,828
that'd be my assumption anyway if we

1117
01:03:13,420 --> 01:03:18,099
then look at what happens to occlusion D

1118
01:03:14,829 --> 01:03:19,809
here same thing as that we did last time

1119
01:03:18,099 --> 01:03:21,219
just going to change this to an F 3 to

1120
01:03:19,809 --> 01:03:23,880
4x and off we go

1121
01:03:21,219 --> 01:03:23,880
right

1122
01:03:27,769 --> 01:03:33,170
so again not really very interesting

1123
01:03:30,610 --> 01:03:36,680
just going through the motions of

1124
01:03:33,170 --> 01:03:39,260
untangling this code in the way that we

1125
01:03:36,679 --> 01:03:45,469
wanted to before and so that should all

1126
01:03:39,260 --> 01:03:50,200
be good seems like everything is working

1127
01:03:45,469 --> 01:03:50,199
very very well here

1128
01:04:00,239 --> 01:04:06,899
yeah so moving on now what I'd like to

1129
01:04:04,559 --> 01:04:09,539
do is is try to get some of these other

1130
01:04:06,900 --> 01:04:11,130
cases working more efficiently so if we

1131
01:04:09,539 --> 01:04:13,050
take a look at how much cruft is

1132
01:04:11,130 --> 01:04:15,390
happening in here we can hopefully now

1133
01:04:13,050 --> 01:04:17,130
do something much simpler so here we

1134
01:04:15,389 --> 01:04:20,368
need to produce three things we need

1135
01:04:17,130 --> 01:04:23,849
probe and single a probe sample P single

1136
01:04:20,369 --> 01:04:25,950
and occlusion D right the occlusion D in

1137
01:04:23,849 --> 01:04:29,070
this case is the same as the normal so

1138
01:04:25,949 --> 01:04:32,039
really this could also just be that

1139
01:04:29,070 --> 01:04:34,140
right so this is the same thing there so

1140
01:04:32,039 --> 01:04:40,250
you know in theory that's that's totally

1141
01:04:34,139 --> 01:04:42,629
fine and so in this case we know that

1142
01:04:40,250 --> 01:04:44,039
that that's always going to be the case

1143
01:04:42,630 --> 01:04:45,838
and we don't really have to think too

1144
01:04:44,039 --> 01:04:47,338
hard about it right so we could we could

1145
01:04:45,838 --> 01:04:49,829
just eliminate that out of these two now

1146
01:04:47,338 --> 01:04:52,500
so really in this particular case we're

1147
01:04:49,829 --> 01:04:59,699
just producing two things here these two

1148
01:04:52,500 --> 01:05:02,219
values that's all we're doing the probe

1149
01:04:59,699 --> 01:05:04,469
P symbol single here you can see when we

1150
01:05:02,219 --> 01:05:06,269
produce probe sample P it doesn't

1151
01:05:04,469 --> 01:05:08,459
actually get used for anything so you

1152
01:05:06,269 --> 01:05:11,849
can see that this is actually kind of a

1153
01:05:08,460 --> 01:05:13,409
dumb thing so we can again simplify this

1154
01:05:11,849 --> 01:05:14,609
and it actually speeds up this part of

1155
01:05:13,409 --> 01:05:18,838
the code too because this was doing a

1156
01:05:14,608 --> 01:05:21,239
bunch of unnecessary work since tier a

1157
01:05:18,838 --> 01:05:23,400
has now been replicated ray origin x ray

1158
01:05:21,239 --> 01:05:25,618
D those are already in stuffed formats

1159
01:05:23,400 --> 01:05:28,710
so we can actually just nuke this probe

1160
01:05:25,619 --> 01:05:31,380
sample P and when we actually do this

1161
01:05:28,710 --> 01:05:34,500
probe sample P single thing here we

1162
01:05:31,380 --> 01:05:40,019
can't just do ray origin pacts plus T

1163
01:05:34,500 --> 01:05:44,639
ray x ray deep act right and that goes

1164
01:05:40,019 --> 01:05:46,858
away so that's pretty nice and then for

1165
01:05:44,639 --> 01:05:58,799
probe n sample single although I suppose

1166
01:05:46,858 --> 01:06:00,329
I should do this or something and since

1167
01:05:58,800 --> 01:06:02,220
that that should really let's do this

1168
01:06:00,329 --> 01:06:03,690
that's just organize this a little since

1169
01:06:02,219 --> 01:06:05,989
this is all the normal and that's all

1170
01:06:03,690 --> 01:06:05,990
not

1171
01:06:06,559 --> 01:06:14,329
there we go so yeah so you can see here

1172
01:06:11,809 --> 01:06:15,829
right we can we can do all of this this

1173
01:06:14,329 --> 01:06:18,110
can all be done way more efficiently

1174
01:06:15,829 --> 01:06:23,000
that's this is like gonna be three times

1175
01:06:18,110 --> 01:06:26,450
faster than that presumably so that's

1176
01:06:23,000 --> 01:06:28,730
nice so then we're just down to this

1177
01:06:26,449 --> 01:06:30,619
when we produce the normal XYZ this way

1178
01:06:28,730 --> 01:06:32,990
which in theory we're saying works at

1179
01:06:30,619 --> 01:06:35,089
that point that is probe sample and

1180
01:06:32,989 --> 01:06:36,799
single because it's the normal XYZ

1181
01:06:35,090 --> 01:06:40,039
packed which is now what we actually

1182
01:06:36,800 --> 01:06:45,920
want and so in theory that's the whole

1183
01:06:40,039 --> 01:06:48,050
thing right in theory so now we have to

1184
01:06:45,920 --> 01:06:49,670
debug this actual part where we compute

1185
01:06:48,050 --> 01:06:51,170
the normal this is probably correct

1186
01:06:49,670 --> 01:06:53,269
because it's not a lot I could have

1187
01:06:51,170 --> 01:06:55,610
screwed up there but the normal parts

1188
01:06:53,269 --> 01:06:57,079
probably wrong and we're probably gonna

1189
01:06:55,610 --> 01:07:00,769
have to go through there and figure out

1190
01:06:57,079 --> 01:07:03,380
what to do with it right now the inverse

1191
01:07:00,769 --> 01:07:07,009
sign bit from part again this is

1192
01:07:03,380 --> 01:07:12,349
actually just known so we don't need to

1193
01:07:07,010 --> 01:07:14,510
do this but I guess there's no reason

1194
01:07:12,349 --> 01:07:16,009
not to do it here I don't know it might

1195
01:07:14,510 --> 01:07:19,670
be better to just let this happen

1196
01:07:16,010 --> 01:07:22,700
outside and I don't again I really just

1197
01:07:19,670 --> 01:07:24,409
don't know so if we took where we

1198
01:07:22,699 --> 01:07:30,379
produce radio packed if in here we just

1199
01:07:24,409 --> 01:07:31,879
said look give us the inverse sign we

1200
01:07:30,380 --> 01:07:34,519
could just do that and pull it's pulled

1201
01:07:31,880 --> 01:07:38,480
out so it's really just these these bits

1202
01:07:34,519 --> 01:07:47,989
here is is all we would actually need

1203
01:07:38,480 --> 01:07:50,329
right yeah so again we got to go to bug

1204
01:07:47,989 --> 01:07:52,789
that because it's probably wrong I mean

1205
01:07:50,329 --> 01:07:56,210
it looks right here so hard to say I

1206
01:07:52,789 --> 01:07:57,829
guess but you know again we kind of need

1207
01:07:56,210 --> 01:07:59,389
to put some test cases through so we

1208
01:07:57,829 --> 01:08:00,679
don't really know like maybe this norm

1209
01:07:59,389 --> 01:08:05,480
maybe these normals are right maybe

1210
01:08:00,679 --> 01:08:07,989
they're not but you know with lighting

1211
01:08:05,480 --> 01:08:07,990
it's always pretty difficult

1212
01:08:11,820 --> 01:08:15,750
I mean here's an example so let's just

1213
01:08:14,489 --> 01:08:22,529
see what the chances are that we're

1214
01:08:15,750 --> 01:08:24,210
wrong so let's say we just always pick

1215
01:08:22,529 --> 01:08:33,599
the wrong normal you know how different

1216
01:08:24,210 --> 01:08:36,600
would it look right I mean right like

1217
01:08:33,600 --> 01:08:39,350
it's like you can't even tell right

1218
01:08:36,600 --> 01:08:42,000
which which maybe suggest that you know

1219
01:08:39,350 --> 01:08:46,048
we're kind of wasting our time getting

1220
01:08:42,000 --> 01:08:48,630
some of this stuff correct but right I

1221
01:08:46,048 --> 01:08:50,939
mean that's it's kind of nuts like it

1222
01:08:48,630 --> 01:08:58,909
doesn't matter which normal I I'm

1223
01:08:50,939 --> 01:09:14,369
selecting so yeah a little bit weird but

1224
01:08:58,909 --> 01:09:17,729
we do want to test this and see you know

1225
01:09:14,369 --> 01:09:19,729
what's going on there you know is there

1226
01:09:17,729 --> 01:09:21,389
a bogus or not a bug right so so this is

1227
01:09:19,729 --> 01:09:24,889
not great

1228
01:09:21,390 --> 01:09:24,890
we're gonna have to to

1229
01:09:35,489 --> 01:09:39,880
that said let's since I think it's

1230
01:09:37,960 --> 01:09:42,579
roughly still the correct number of ops

1231
01:09:39,880 --> 01:09:45,250
there let's see how we're doing now on

1232
01:09:42,579 --> 01:09:47,649
the benchmark just so I can get a sense

1233
01:09:45,250 --> 01:09:49,869
of if I've done anything really stupid

1234
01:09:47,649 --> 01:09:53,079
which sometimes happens I don't want to

1235
01:09:49,869 --> 01:09:55,930
slow this routine down for obvious

1236
01:09:53,079 --> 01:09:58,149
reasons so let me just run HH late prof.

1237
01:09:55,930 --> 01:10:00,280
a few times here to see what kind of

1238
01:09:58,149 --> 01:10:02,289
noise were getting on the samples and

1239
01:10:00,279 --> 01:10:05,229
just just so I can kind of get a feel

1240
01:10:02,289 --> 01:10:08,470
for what the speed difference is if

1241
01:10:05,229 --> 01:10:12,279
there is one so yeah I don't know where

1242
01:10:08,470 --> 01:10:14,260
we were at before actually so actually

1243
01:10:12,279 --> 01:10:17,109
that's pretty good

1244
01:10:14,260 --> 01:10:23,289
we're still we're still getting faster

1245
01:10:17,109 --> 01:10:25,539
and faster with each revision so now if

1246
01:10:23,289 --> 01:10:29,050
we take a look at how this code is

1247
01:10:25,539 --> 01:10:31,720
working again like I just want to do a

1248
01:10:29,050 --> 01:10:38,550
quick spot check to see like where are

1249
01:10:31,720 --> 01:10:41,579
we where are we in terms of

1250
01:10:38,550 --> 01:10:41,579
[Music]

1251
01:10:52,649 --> 01:11:04,229
so hold on a second what the heck is Z

1252
01:10:57,309 --> 01:11:04,229
offset here and why is it never used

1253
01:11:05,729 --> 01:11:09,610
okay there it is like what's going on

1254
01:11:08,050 --> 01:11:12,429
okay

1255
01:11:09,609 --> 01:11:14,969
so now if we take a look I just want to

1256
01:11:12,429 --> 01:11:18,219
kind of run through this routine and

1257
01:11:14,969 --> 01:11:21,489
look and see if there's anywhere now

1258
01:11:18,219 --> 01:11:24,880
that we're still using something weird

1259
01:11:21,488 --> 01:11:27,839
like a downshift where we or a weird

1260
01:11:24,880 --> 01:11:30,788
unpacking or something like that right

1261
01:11:27,840 --> 01:11:33,849
so I just want to kind of get a sense

1262
01:11:30,788 --> 01:11:39,908
for what the heck you know what we're

1263
01:11:33,849 --> 01:11:43,809
doing and and then see if there's

1264
01:11:39,908 --> 01:11:46,618
anything yeah just just want to see if

1265
01:11:43,809 --> 01:11:46,619
there's anything weird

1266
01:11:56,238 --> 01:12:01,319
so yeah so I mean just just cleaning up

1267
01:11:59,579 --> 01:12:03,719
some little tiny things so this is

1268
01:12:01,319 --> 01:12:08,189
supposed to be one - so you know it

1269
01:12:03,719 --> 01:12:10,500
should be this because that's just one

1270
01:12:08,189 --> 01:12:12,359
sub instruction it shouldn't be loading

1271
01:12:10,500 --> 01:12:15,779
another value so that was that was

1272
01:12:12,359 --> 01:12:17,759
pretty dumb that doesn't need to be

1273
01:12:15,779 --> 01:12:22,590
pulled out either so like this doesn't

1274
01:12:17,760 --> 01:12:28,500
have to happen here at all this could

1275
01:12:22,590 --> 01:12:32,039
just be nope not that there we go

1276
01:12:28,500 --> 01:12:34,109
this could just be used directly here

1277
01:12:32,039 --> 01:12:38,279
because this is the only place that gets

1278
01:12:34,109 --> 01:12:40,559
loaded up right so that's a little bit

1279
01:12:38,279 --> 01:12:42,300
simpler as well I don't think we need

1280
01:12:40,560 --> 01:12:43,590
these anymore we can always add them

1281
01:12:42,300 --> 01:12:50,969
back in there not particularly

1282
01:12:43,590 --> 01:12:57,569
interesting so yeah so now looking at

1283
01:12:50,969 --> 01:12:59,719
what's happening here this looks pretty

1284
01:12:57,569 --> 01:12:59,719
bad

1285
01:12:59,760 --> 01:13:02,798
[Music]

1286
01:13:08,260 --> 01:13:16,730
yeah and these are like these are values

1287
01:13:14,238 --> 01:13:22,488
that probably should all have been pre

1288
01:13:16,729 --> 01:13:26,959
computed right so the stride XYZ and the

1289
01:13:22,488 --> 01:13:28,968
voxel dim part C should be just things

1290
01:13:26,960 --> 01:13:34,210
you can load up directly out of your

1291
01:13:28,969 --> 01:13:34,210
Atlas so I think that's pretty simple

1292
01:13:34,510 --> 01:13:41,748
and the other parts pretty simple so I

1293
01:13:38,269 --> 01:13:44,539
think I would want to go do both of

1294
01:13:41,748 --> 01:13:46,158
those actually and then there's some fat

1295
01:13:44,538 --> 01:13:47,509
we can trim out of here not that's

1296
01:13:46,158 --> 01:13:49,219
performance related but just now there's

1297
01:13:47,510 --> 01:13:51,380
some like old values when we could name

1298
01:13:49,219 --> 01:13:55,670
things better and such things like that

1299
01:13:51,380 --> 01:13:58,998
right so let's go ahead and do that

1300
01:13:55,670 --> 01:14:02,230
first of all let's take these things

1301
01:13:58,998 --> 01:14:08,118
here and put them into the Atlas so

1302
01:14:02,229 --> 01:14:11,689
let's go to the light atlas code and

1303
01:14:08,118 --> 01:14:14,679
where we actually do the in it's on it's

1304
01:14:11,689 --> 01:14:18,138
like make light atlas or whatever right

1305
01:14:14,679 --> 01:14:20,899
so in here let's just let's just put

1306
01:14:18,139 --> 01:14:25,219
these values in there so you know in

1307
01:14:20,899 --> 01:14:35,268
here there's gonna be like you know this

1308
01:14:25,219 --> 01:14:38,118
thing and so you know these these will

1309
01:14:35,269 --> 01:14:44,929
just be things that we store now in the

1310
01:14:38,118 --> 01:14:47,929
actual Atlas itself so that we know that

1311
01:14:44,929 --> 01:14:50,149
they're gonna be available at all times

1312
01:14:47,929 --> 01:14:52,010
we don't have to do this ridiculous load

1313
01:14:50,149 --> 01:14:55,038
impact like they'll just be in there and

1314
01:14:52,010 --> 01:14:59,059
correct so all of this stuff can just be

1315
01:14:55,038 --> 01:15:00,559
like alright whatever the well I guess

1316
01:14:59,059 --> 01:15:02,690
these are just already known so there's

1317
01:15:00,559 --> 01:15:05,150
the voxel dim and the tile dim there so

1318
01:15:02,689 --> 01:15:10,359
but well you know I'll just do it this

1319
01:15:05,149 --> 01:15:10,359
way anyway since they are dependent

1320
01:15:16,270 --> 01:15:30,230
what is the complaint oh yes it's 4x all

1321
01:15:26,329 --> 01:15:33,680
right so that way we just have those

1322
01:15:30,229 --> 01:15:35,239
there and what do we not have one we

1323
01:15:33,680 --> 01:15:41,289
have one it must have just been declared

1324
01:15:35,239 --> 01:15:46,219
inside yeah get out there there we go

1325
01:15:41,289 --> 01:15:48,710
so these two it looks like the light

1326
01:15:46,220 --> 01:15:55,159
atlas for some reason is not declared

1327
01:15:48,710 --> 01:15:58,909
after the sims ii is that be cut no so

1328
01:15:55,159 --> 01:16:01,210
I'm not sure why that's actually messed

1329
01:15:58,909 --> 01:16:01,210
up

1330
01:16:01,390 --> 01:16:05,750
probably because those sim D things

1331
01:16:03,770 --> 01:16:07,940
aren't defined in there so let me

1332
01:16:05,750 --> 01:16:11,449
actually just go to win mate handmade

1333
01:16:07,939 --> 01:16:15,139
open jail and maybe we'll just include

1334
01:16:11,449 --> 01:16:25,929
that right so oh well it's pretty

1335
01:16:15,140 --> 01:16:25,930
obvious is that better

1336
01:16:43,289 --> 01:16:49,090
this is just annoying see nonsense

1337
01:16:45,939 --> 01:16:53,339
there's really no point to it

1338
01:16:49,090 --> 01:16:55,690
so those are just in the wrong order

1339
01:16:53,340 --> 01:16:58,680
yeah none of that should ever have to

1340
01:16:55,689 --> 01:17:19,539
happen but it's just the way see is

1341
01:16:58,680 --> 01:17:22,329
finally in win32 handmade and alright so

1342
01:17:19,539 --> 01:17:25,359
in the renderer test stuff I'm not sure

1343
01:17:22,329 --> 01:17:26,739
to what extent I really care one way or

1344
01:17:25,359 --> 01:17:29,859
the other about whether or not we still

1345
01:17:26,739 --> 01:17:33,539
compiled that so I made just nerve that

1346
01:17:29,859 --> 01:17:37,869
for now because no one ended up using it

1347
01:17:33,539 --> 01:17:39,880
so I may just say that's not gonna get

1348
01:17:37,869 --> 01:17:45,659
maintained anymore unless someone has a

1349
01:17:39,880 --> 01:17:50,050
good reason to do it yeah alright so

1350
01:17:45,659 --> 01:17:52,149
moving on now that we have those stored

1351
01:17:50,050 --> 01:17:56,980
in the light at lists we should be able

1352
01:17:52,149 --> 01:17:59,049
to inside the the lighting code now

1353
01:17:56,979 --> 01:18:00,789
instead of having to construct those

1354
01:17:59,050 --> 01:18:04,860
values every time those should just be

1355
01:18:00,789 --> 01:18:09,579
things that we can load up out of this

1356
01:18:04,859 --> 01:18:15,849
out of the atlas directly which again is

1357
01:18:09,579 --> 01:18:17,350
just there to save us time right and one

1358
01:18:15,850 --> 01:18:18,700
of the things that could do so you know

1359
01:18:17,350 --> 01:18:19,930
what I probably should have done to be

1360
01:18:18,699 --> 01:18:23,079
completely honest though no I think

1361
01:18:19,930 --> 01:18:25,690
about it maybe this was dumb maybe we

1362
01:18:23,079 --> 01:18:30,670
just leave that enabled and and we don't

1363
01:18:25,689 --> 01:18:34,679
really need Cindy in here right because

1364
01:18:30,670 --> 01:18:34,680
the other thing I could do was just this

1365
01:18:37,239 --> 01:18:46,699
right those to you you know then you

1366
01:18:42,649 --> 01:18:51,309
could just say like F load F 3 to 4x and

1367
01:18:46,699 --> 01:19:10,189
say you know load it out of there and

1368
01:18:51,310 --> 01:19:14,000
and call it a day right that seems more

1369
01:19:10,189 --> 01:19:16,250
sane this I don't know what we want to

1370
01:19:14,000 --> 01:19:21,500
do with that this may also be something

1371
01:19:16,250 --> 01:19:23,840
we want to load up out of I'm not I'm

1372
01:19:21,500 --> 01:19:25,819
not a hundred percent sure what I want

1373
01:19:23,840 --> 01:19:31,670
to do about that so we'll like leave

1374
01:19:25,819 --> 01:19:34,069
that B for a second but once we put

1375
01:19:31,670 --> 01:19:35,630
those in this format then you know we

1376
01:19:34,069 --> 01:19:40,429
could just do it slightly differently so

1377
01:19:35,630 --> 01:19:44,739
here now we just would say okay these

1378
01:19:40,430 --> 01:19:44,740
are going to get set like this

1379
01:19:56,590 --> 01:20:16,750
and this voxel dim Forex will do the

1380
01:20:02,000 --> 01:20:19,729
same okay

1381
01:20:16,750 --> 01:20:23,229
so if we do it that way I think that's

1382
01:20:19,729 --> 01:20:25,579
just a lot more sane because then we can

1383
01:20:23,229 --> 01:20:26,750
avoid having to like actually make any

1384
01:20:25,579 --> 01:20:28,460
concessions in here because it's just

1385
01:20:26,750 --> 01:20:30,680
some floats we need to load so we don't

1386
01:20:28,460 --> 01:20:31,850
really care if I look at load through

1387
01:20:30,680 --> 01:20:33,230
the Forex you can see it's a none

1388
01:20:31,850 --> 01:20:34,910
aligned load anyway so those don't even

1389
01:20:33,229 --> 01:20:36,589
have to be aligned so we should just be

1390
01:20:34,909 --> 01:20:39,769
fine

1391
01:20:36,590 --> 01:20:42,230
now if we run I think we're okay and

1392
01:20:39,770 --> 01:20:45,340
yeah we should just we should just be

1393
01:20:42,229 --> 01:20:47,719
okay and reproduce the same results okay

1394
01:20:45,340 --> 01:20:49,430
so if we take a look at what happens

1395
01:20:47,720 --> 01:20:51,289
there now we're just doing less fussing

1396
01:20:49,430 --> 01:20:54,110
in that exit code which which should be

1397
01:20:51,289 --> 01:20:56,359
good and again it it doesn't have a huge

1398
01:20:54,109 --> 01:20:57,949
effect right either way but at least is

1399
01:20:56,359 --> 01:21:00,469
just getting that streamline so we know

1400
01:20:57,949 --> 01:21:04,519
we're not paying any weird penalties

1401
01:21:00,470 --> 01:21:07,970
there right and again we're starting to

1402
01:21:04,520 --> 01:21:10,550
get like we're getting like really into

1403
01:21:07,970 --> 01:21:14,740
a pretty good good place if you look at

1404
01:21:10,550 --> 01:21:14,739
at how expensive this is now

1405
01:21:21,069 --> 01:21:32,170
we're down in the in the really enviable

1406
01:21:29,470 --> 01:21:34,000
place of 4.5 seconds here we started at

1407
01:21:32,170 --> 01:21:39,640
seven point four seconds so that's like

1408
01:21:34,000 --> 01:21:43,590
a pretty crazy jump down right so now

1409
01:21:39,640 --> 01:21:49,420
we're literally two seconds of

1410
01:21:43,590 --> 01:21:53,590
raycasting time and and that's kind of

1411
01:21:49,420 --> 01:21:55,119
nuts right well not really I guess

1412
01:21:53,590 --> 01:21:56,770
because we have to retake we would have

1413
01:21:55,119 --> 01:21:58,750
to retake this because the computer

1414
01:21:56,770 --> 01:22:01,660
radians so we need to like redo this

1415
01:21:58,750 --> 01:22:04,659
computation so you know no we're not but

1416
01:22:01,659 --> 01:22:11,019
we're getting very low let's put it that

1417
01:22:04,659 --> 01:22:15,779
way I don't know what I want to do next

1418
01:22:11,020 --> 01:22:18,130
exactly but I believe the most important

1419
01:22:15,779 --> 01:22:20,619
speed improvement is still yet to come

1420
01:22:18,130 --> 01:22:22,449
in in the as far as the recasting part

1421
01:22:20,619 --> 01:22:23,559
of things and we can talk about that a

1422
01:22:22,449 --> 01:22:24,639
little bit I'm just trying to think if

1423
01:22:23,560 --> 01:22:26,289
there's anything else I want to do

1424
01:22:24,640 --> 01:22:30,570
before we kind of go off in that

1425
01:22:26,289 --> 01:22:33,729
direction we could just now remove the

1426
01:22:30,569 --> 01:22:36,819
ABB caster entirely because I don't know

1427
01:22:33,729 --> 01:22:41,169
that there's any point in running it or

1428
01:22:36,819 --> 01:22:43,239
even caring about it anymore so since we

1429
01:22:41,170 --> 01:22:44,980
do have it checked in and anyone can go

1430
01:22:43,239 --> 01:22:46,630
grab it if they want it I think maybe

1431
01:22:44,979 --> 01:22:48,849
now might be a good time to just start

1432
01:22:46,630 --> 01:22:50,529
pulling that out as well again this is

1433
01:22:48,850 --> 01:22:52,060
just cleanup work it's not really gonna

1434
01:22:50,529 --> 01:22:54,099
make things significantly faster or

1435
01:22:52,060 --> 01:22:55,780
anything like that but it's probably a

1436
01:22:54,100 --> 01:22:57,640
good time to start simplifying so let's

1437
01:22:55,779 --> 01:23:00,729
get rid of that because now I'm pretty

1438
01:22:57,640 --> 01:23:04,450
pretty confident in in what we ended up

1439
01:23:00,729 --> 01:23:12,929
doing let's go ahead and pull this whole

1440
01:23:04,449 --> 01:23:12,929
branch so let's get rid of that

1441
01:23:20,729 --> 01:23:26,079
and we're again we're only going to

1442
01:23:24,159 --> 01:23:29,939
really use the grid path so I'm going to

1443
01:23:26,079 --> 01:23:34,119
leave anything grid path related in here

1444
01:23:29,939 --> 01:23:46,509
and I'm just gonna remove the ABB caster

1445
01:23:34,119 --> 01:23:49,769
right so let's see here we've got the

1446
01:23:46,510 --> 01:24:12,300
build still on here somewhere

1447
01:23:49,770 --> 01:24:21,040
yep there we go and that probably is

1448
01:24:12,300 --> 01:24:24,070
most of it yeah okay and so I think that

1449
01:24:21,039 --> 01:24:28,029
gets rid of basically everything that we

1450
01:24:24,069 --> 01:24:32,500
need and in in this case here we don't

1451
01:24:28,029 --> 01:24:41,739
really care about this part anymore so

1452
01:24:32,500 --> 01:24:44,560
we can just you know we can't just get

1453
01:24:41,739 --> 01:24:48,069
rid of it so I think now that's all of

1454
01:24:44,560 --> 01:24:49,630
that sort of cruft that's gone and we

1455
01:24:48,069 --> 01:24:52,389
can start simply everything else more

1456
01:24:49,630 --> 01:24:55,090
now too right so now if we go through

1457
01:24:52,390 --> 01:24:58,030
the lighting code and also I guess the

1458
01:24:55,090 --> 01:25:05,619
ABB stuff like can just be ganked so for

1459
01:24:58,029 --> 01:25:06,759
example if there's anything I guess well

1460
01:25:05,619 --> 01:25:08,380
you know it I don't see anything

1461
01:25:06,760 --> 01:25:09,909
particularly a specific to that though

1462
01:25:08,380 --> 01:25:14,770
so I guess we were just using the

1463
01:25:09,909 --> 01:25:17,099
lighting box structures for the abbs so

1464
01:25:14,770 --> 01:25:17,100
is fine

1465
01:25:17,250 --> 01:25:23,460
I don't know in here if there's anything

1466
01:25:20,988 --> 01:25:26,718
the lighting boxes can just stay the way

1467
01:25:23,460 --> 01:25:28,939
they are this part I think is just not

1468
01:25:26,719 --> 01:25:32,760
relevant anymore

1469
01:25:28,939 --> 01:25:35,488
so I don't know if anything other than

1470
01:25:32,760 --> 01:25:39,659
is light is any more necessary because

1471
01:25:35,488 --> 01:25:43,169
we don't need any of this stuff right so

1472
01:25:39,659 --> 01:25:49,019
I'm kind of curious about the lighting

1473
01:25:43,170 --> 01:25:53,989
box pack thing and I'm trying to think

1474
01:25:49,020 --> 01:25:53,989
about what we want to do with that

1475
01:25:54,140 --> 01:26:02,960
because we do need the is light but we

1476
01:25:59,579 --> 01:26:02,960
could probably do that in other ways

1477
01:26:03,920 --> 01:26:10,560
really hard to say so if you look at how

1478
01:26:08,010 --> 01:26:13,199
many of these there are there's three

1479
01:26:10,560 --> 01:26:18,270
floats each for three values so there's

1480
01:26:13,199 --> 01:26:22,019
nine floats they're getting it down to

1481
01:26:18,270 --> 01:26:24,930
eight floats would be nice or I should

1482
01:26:22,020 --> 01:26:27,480
say eight values would be nice and that

1483
01:26:24,930 --> 01:26:31,170
would be pretty easy because if we just

1484
01:26:27,479 --> 01:26:34,799
packed the color value in some cleaner

1485
01:26:31,170 --> 01:26:37,800
way that would do it

1486
01:26:34,800 --> 01:26:41,670
so if for example we said all right this

1487
01:26:37,800 --> 01:26:44,369
is six values and then we had one value

1488
01:26:41,670 --> 01:26:47,640
for the ref color and one value for the

1489
01:26:44,369 --> 01:26:51,000
flags or you know 64 bits total that

1490
01:26:47,640 --> 01:26:53,640
would have the light plus you know some

1491
01:26:51,000 --> 01:26:56,310
kind of 10 bits per channel 12 bits per

1492
01:26:53,640 --> 01:26:58,880
channel pack right so I think in the

1493
01:26:56,310 --> 01:26:58,880
future this

1494
01:27:04,439 --> 01:27:17,909
I think in the future we can pack this

1495
01:27:14,850 --> 01:27:21,210
down and save some bus bandwidth there

1496
01:27:17,909 --> 01:27:24,000
right at the moment what I'm gonna do

1497
01:27:21,210 --> 01:27:25,469
instead is say look we don't really want

1498
01:27:24,000 --> 01:27:28,409
to mess with this at the immediate

1499
01:27:25,469 --> 01:27:30,180
moment so at the right now

1500
01:27:28,409 --> 01:27:32,309
I'm probably just gonna go ahead and say

1501
01:27:30,180 --> 01:27:36,570
you know what this is just gonna be is

1502
01:27:32,310 --> 01:27:38,190
light and that's it but I think in the

1503
01:27:36,569 --> 01:27:40,738
future instead of for values for this we

1504
01:27:38,189 --> 01:27:44,069
can get this down to two right it's

1505
01:27:40,738 --> 01:27:45,750
because we have way more in just in

1506
01:27:44,069 --> 01:27:50,429
terms of storing lighting values we have

1507
01:27:45,750 --> 01:27:57,180
way more than we need there right so

1508
01:27:50,430 --> 01:27:59,909
yeah so I can go ahead and simplify this

1509
01:27:57,180 --> 01:28:14,190
now that we kind of know what we're

1510
01:27:59,909 --> 01:28:17,869
doing so this doesn't need to be an end

1511
01:28:14,189 --> 01:28:23,988
anymore that's literally just gonna be a

1512
01:28:17,869 --> 01:28:23,988
check on whether or not it's a light

1513
01:28:26,689 --> 01:28:31,409
okay

1514
01:28:28,939 --> 01:28:32,849
so again just just trying to clean up

1515
01:28:31,409 --> 01:28:34,529
some of the cruft here because now that

1516
01:28:32,850 --> 01:28:36,420
with ABB is gone we don't need that

1517
01:28:34,529 --> 01:28:39,179
extra inline hierarchy packing that's

1518
01:28:36,420 --> 01:28:42,029
just a waste of everyone's time so now

1519
01:28:39,180 --> 01:28:44,520
let's go and take a look at the full

1520
01:28:42,029 --> 01:28:47,939
cast and see what is actually going on

1521
01:28:44,520 --> 01:28:50,670
in here so you can see when we call full

1522
01:28:47,939 --> 01:28:52,769
cast you can see that there's just a

1523
01:28:50,670 --> 01:28:56,699
bunch of ridiculous dancing around and

1524
01:28:52,770 --> 01:28:59,610
crap that's happening and what we want

1525
01:28:56,698 --> 01:29:05,149
to do is now that we know exactly who's

1526
01:28:59,609 --> 01:29:08,670
getting called here and why we want to

1527
01:29:05,149 --> 01:29:11,599
we want to have some way of figuring out

1528
01:29:08,670 --> 01:29:11,600
what should get passed

1529
01:29:13,948 --> 01:29:18,579
to grid raycast and make sure that

1530
01:29:16,840 --> 01:29:19,239
that's being done as efficiently as

1531
01:29:18,579 --> 01:29:22,868
possible

1532
01:29:19,238 --> 01:29:25,959
right because at the moment I doubt that

1533
01:29:22,868 --> 01:29:29,049
it is and this is not really necessarily

1534
01:29:25,960 --> 01:29:31,118
for speed because at this point we

1535
01:29:29,050 --> 01:29:34,300
probably got most of the speed out of

1536
01:29:31,118 --> 01:29:36,789
the streamlining that we can so this is

1537
01:29:34,300 --> 01:29:38,860
really more just for my sanity like I

1538
01:29:36,789 --> 01:29:42,789
don't really like how sprawling this

1539
01:29:38,859 --> 01:29:57,039
code became it was unavoidable for the

1540
01:29:42,789 --> 01:29:58,510
most part but now that we know what

1541
01:29:57,039 --> 01:30:01,539
we're doing so now that we've finished

1542
01:29:58,510 --> 01:30:05,610
our exploration it's just a good time to

1543
01:30:01,539 --> 01:30:08,170
kind of clean it up so let's start by

1544
01:30:05,609 --> 01:30:11,889
just going through and figuring out who

1545
01:30:08,170 --> 01:30:15,100
the heck is doing what and why so you

1546
01:30:11,889 --> 01:30:17,170
can see here that we've got a box test

1547
01:30:15,100 --> 01:30:19,810
to see whether we're inside any of the

1548
01:30:17,170 --> 01:30:23,170
boxes so we're just looking inside our

1549
01:30:19,810 --> 01:30:25,270
node and we're looking to see whether we

1550
01:30:23,170 --> 01:30:27,899
landed inside any of these boxes and if

1551
01:30:25,270 --> 01:30:31,060
we did land inside one of these boxes

1552
01:30:27,899 --> 01:30:35,460
then we don't bother initiating the cast

1553
01:30:31,060 --> 01:30:39,310
and so this is a pretty pretty cheap

1554
01:30:35,460 --> 01:30:40,868
pretest and since we know that this is

1555
01:30:39,310 --> 01:30:42,610
going to be in the cache too it's nice

1556
01:30:40,868 --> 01:30:44,710
because we're about to go do more

1557
01:30:42,609 --> 01:30:46,179
testing with it so it kind of pre warms

1558
01:30:44,710 --> 01:30:47,889
the cache anyway so I don't I don't

1559
01:30:46,179 --> 01:30:51,100
think it's necessarily a bad thing

1560
01:30:47,889 --> 01:30:52,600
because it probably helps us out in the

1561
01:30:51,100 --> 01:30:54,250
long run there as well something it's

1562
01:30:52,600 --> 01:30:57,719
too wasted we don't really know without

1563
01:30:54,250 --> 01:30:57,719
measuring it but doesn't seem that bad

1564
01:30:58,590 --> 01:31:05,980
so I'm gonna get rid of this because I'm

1565
01:31:03,010 --> 01:31:11,560
not sure that that's really true either

1566
01:31:05,979 --> 01:31:17,198
way so let's see doing this is inside

1567
01:31:11,560 --> 01:31:18,789
test that all seems fine in this case we

1568
01:31:17,198 --> 01:31:21,698
probably do want to lurk towards zero

1569
01:31:18,789 --> 01:31:24,130
here that's that's true so maybe we'll

1570
01:31:21,698 --> 01:31:25,399
little bit later looking at this leaf

1571
01:31:24,130 --> 01:31:28,980
index

1572
01:31:25,399 --> 01:31:32,879
here this part seems reasonable we're

1573
01:31:28,979 --> 01:31:45,299
just checking bounds and ending them

1574
01:31:32,880 --> 01:31:46,829
together that all looks totally fine the

1575
01:31:45,300 --> 01:31:52,079
only thing I would say is I don't

1576
01:31:46,829 --> 01:31:53,369
actually know if like I don't

1577
01:31:52,079 --> 01:31:56,519
necessarily know that you would do it

1578
01:31:53,369 --> 01:32:09,890
that way so so probably you would just

1579
01:31:56,520 --> 01:32:09,890
do something more like like this right

1580
01:32:16,670 --> 01:32:22,470
because there's really no reason to

1581
01:32:19,590 --> 01:32:24,900
transit this out into a general purpose

1582
01:32:22,470 --> 01:32:26,579
register which I don't know if maybe

1583
01:32:24,899 --> 01:32:29,759
there is a reason why you would do that

1584
01:32:26,579 --> 01:32:31,710
to make it go faster I don't think you

1585
01:32:29,760 --> 01:32:35,520
really have any scalar work here to do

1586
01:32:31,710 --> 01:32:37,260
you probably just waste the same amount

1587
01:32:35,520 --> 01:32:40,050
of time moving it out as you would save

1588
01:32:37,260 --> 01:32:49,880
by doing so so I feel like it's probably

1589
01:32:40,050 --> 01:32:49,880
saner to do this right but I don't know

1590
01:32:50,449 --> 01:32:56,550
so I'm not really sure but it feels like

1591
01:32:54,840 --> 01:32:59,220
that's probably this saner way to do

1592
01:32:56,550 --> 01:33:04,829
that that way everyone stays locked in

1593
01:32:59,220 --> 01:33:06,930
in the eye in the xmm registers inside

1594
01:33:04,829 --> 01:33:09,029
this loop and then the loop controls

1595
01:33:06,930 --> 01:33:10,470
done in the scaler and that seems like a

1596
01:33:09,029 --> 01:33:12,239
better way to make that go then

1597
01:33:10,470 --> 01:33:14,310
transiting out each time there's really

1598
01:33:12,239 --> 01:33:16,559
no reason to do that because you know

1599
01:33:14,310 --> 01:33:19,050
that all of the bits will just persist

1600
01:33:16,560 --> 01:33:21,390
through the or and so at the end all we

1601
01:33:19,050 --> 01:33:23,340
have to do is just see did any lane come

1602
01:33:21,390 --> 01:33:28,640
up saying it was inside and then we're

1603
01:33:23,340 --> 01:33:31,610
done right so so I think that's you know

1604
01:33:28,640 --> 01:33:34,760
just it's just pretty straightforward

1605
01:33:31,609 --> 01:33:38,420
so we know that we're going to want the

1606
01:33:34,760 --> 01:33:45,500
Rey origin here to be loaded up in this

1607
01:33:38,420 --> 01:33:49,550
way so we kind of know that we have that

1608
01:33:45,500 --> 01:33:51,470
when we start so let's take a look at

1609
01:33:49,550 --> 01:33:53,690
what we actually pass into grid raycast

1610
01:33:51,470 --> 01:33:57,800
here and see how straightforward it can

1611
01:33:53,689 --> 01:33:59,719
be in this case so if I go to grid

1612
01:33:57,800 --> 01:34:03,170
raycast here I just want to see like

1613
01:33:59,720 --> 01:34:10,789
what we're actually doing you can see us

1614
01:34:03,170 --> 01:34:14,560
passing ray origin single here and you

1615
01:34:10,789 --> 01:34:14,560
can see us passing the sample directions

1616
01:34:15,699 --> 01:34:21,649
so just looking at that it looks like

1617
01:34:17,899 --> 01:34:29,479
the raid D is never used am I wrong

1618
01:34:21,649 --> 01:34:33,979
about that so this is not a thing right

1619
01:34:29,479 --> 01:34:36,500
that's just not a thing at all ray

1620
01:34:33,979 --> 01:34:39,139
origins single is getting component out

1621
01:34:36,500 --> 01:34:40,640
of the Ray Arjun which is actually

1622
01:34:39,140 --> 01:34:42,020
something that comes as the part of the

1623
01:34:40,640 --> 01:34:44,420
light probe piece so we've kind of

1624
01:34:42,020 --> 01:34:46,580
already had that so if we wanted to pass

1625
01:34:44,420 --> 01:34:48,500
that as a v3 we could but the thing that

1626
01:34:46,579 --> 01:34:51,229
I would like to know is is that actually

1627
01:34:48,500 --> 01:34:53,600
necessary meaning is that a thing we

1628
01:34:51,229 --> 01:34:55,579
actually want to do or do we like do we

1629
01:34:53,600 --> 01:34:58,220
ever actually care about that or not

1630
01:34:55,579 --> 01:34:59,659
right and I don't actually know so it

1631
01:34:58,220 --> 01:35:01,699
may be that the better way to do that

1632
01:34:59,659 --> 01:35:06,349
would be to pass the Ray origin packed

1633
01:35:01,699 --> 01:35:08,470
part of things actually you know what I

1634
01:35:06,350 --> 01:35:08,470
mean

1635
01:35:14,779 --> 01:35:20,639
so it may make more sense to pass the

1636
01:35:17,819 --> 01:35:25,619
Ray origin pact here and then to the

1637
01:35:20,640 --> 01:35:30,860
extent that we actually want the spread

1638
01:35:25,619 --> 01:35:35,640
version of that you know we can always

1639
01:35:30,859 --> 01:35:37,799
replicate it out right so so I'm not

1640
01:35:35,640 --> 01:35:42,869
sure that we actually want to pass it as

1641
01:35:37,800 --> 01:35:46,860
Rayleigh single but it's hard to say

1642
01:35:42,869 --> 01:35:50,300
so since light probe P is already ray or

1643
01:35:46,859 --> 01:35:57,509
Jin there though we might as well just

1644
01:35:50,300 --> 01:35:58,789
just pass that for starters right

1645
01:35:57,510 --> 01:36:01,789
because we don't actually need that

1646
01:35:58,789 --> 01:36:01,789
anywhere

1647
01:36:17,159 --> 01:36:22,389
okay there we go

1648
01:36:19,289 --> 01:36:23,859
um and again yeah like I said just

1649
01:36:22,390 --> 01:36:28,270
trying to get the cruft out of here

1650
01:36:23,859 --> 01:36:32,309
slowly so now if we look at how this is

1651
01:36:28,270 --> 01:36:36,580
doing you know we we've run two of these

1652
01:36:32,310 --> 01:36:40,450
in a row and then stride by eight and I

1653
01:36:36,579 --> 01:36:43,229
do wonder if since now that's the way

1654
01:36:40,449 --> 01:36:45,670
that this is going I do wonder if

1655
01:36:43,229 --> 01:36:50,529
there's any reason why we don't just

1656
01:36:45,670 --> 01:36:53,199
make it do this in one loop so if you

1657
01:36:50,529 --> 01:36:55,239
look at how this is going and we move

1658
01:36:53,199 --> 01:36:57,670
forward by sampled their hair like this

1659
01:36:55,239 --> 01:37:05,250
is just a locked loop that goes forward

1660
01:36:57,670 --> 01:37:08,619
in Y and so it's not obvious to me

1661
01:37:05,250 --> 01:37:10,680
mm-hmm like if you look here you know

1662
01:37:08,619 --> 01:37:16,239
the question is could you weld these

1663
01:37:10,680 --> 01:37:17,950
loops together and hard to say right so

1664
01:37:16,239 --> 01:37:22,779
the way this is working is it's

1665
01:37:17,949 --> 01:37:25,269
producing hopefully you can see what

1666
01:37:22,779 --> 01:37:27,699
what's going on here each time through

1667
01:37:25,270 --> 01:37:31,800
this we're stepping down Y and we're

1668
01:37:27,699 --> 01:37:36,880
doing the Ray casting to write out our

1669
01:37:31,800 --> 01:37:40,270
grid values so we're doing a tile at a

1670
01:37:36,880 --> 01:37:43,630
time we're doing the Y's and for each Y

1671
01:37:40,270 --> 01:37:50,080
we're writing out three times four to do

1672
01:37:43,630 --> 01:37:53,880
the the writes here right and so really

1673
01:37:50,079 --> 01:37:58,359
we could expand that to doing six and

1674
01:37:53,880 --> 01:38:00,579
get do one call for that and we could

1675
01:37:58,359 --> 01:38:02,529
even roll this loop into there because

1676
01:38:00,579 --> 01:38:07,090
it really doesn't do anything other than

1677
01:38:02,529 --> 01:38:09,009
loop over these texels right so we could

1678
01:38:07,090 --> 01:38:13,230
just make this whole thing be one

1679
01:38:09,010 --> 01:38:13,230
function you know and I'm saying

1680
01:38:19,970 --> 01:38:23,369
we could just make this whole thing be

1681
01:38:21,960 --> 01:38:25,649
one function and simplify it that way

1682
01:38:23,369 --> 01:38:27,840
and it makes some sense to do that as

1683
01:38:25,649 --> 01:38:29,609
well because again like I said all of

1684
01:38:27,840 --> 01:38:31,170
this stuff is just obscuring to the

1685
01:38:29,609 --> 01:38:32,460
compiler what the heck is going on this

1686
01:38:31,170 --> 01:38:35,609
is really just doing a straight ahead

1687
01:38:32,460 --> 01:38:38,520
loop the reason it's not simpler than it

1688
01:38:35,609 --> 01:38:42,000
is is because you have to do this sort

1689
01:38:38,520 --> 01:38:52,020
of interior set of eight rays to do the

1690
01:38:42,000 --> 01:38:55,020
right out for one row and I just don't

1691
01:38:52,020 --> 01:38:57,920
know right so let's imagine that we did

1692
01:38:55,020 --> 01:39:01,200
this so suppose you were going to do

1693
01:38:57,920 --> 01:39:05,159
more of these at once so what would you

1694
01:39:01,199 --> 01:39:07,829
have to do well the transfer PPS value

1695
01:39:05,159 --> 01:39:09,779
is just indexed off the Ray and it's the

1696
01:39:07,829 --> 01:39:11,159
only thing that migrates out of the

1697
01:39:09,779 --> 01:39:14,069
routine in the first place

1698
01:39:11,159 --> 01:39:15,659
so in theory and you know let's just

1699
01:39:14,069 --> 01:39:16,529
let's just do this for a sake of

1700
01:39:15,659 --> 01:39:18,239
argument

1701
01:39:16,529 --> 01:39:21,449
I'm just curious and I'll take ten

1702
01:39:18,239 --> 01:39:22,769
seconds so you might as well look so if

1703
01:39:21,449 --> 01:39:25,470
we run HH lightproof

1704
01:39:22,770 --> 01:39:26,760
you know a little bit and just see what

1705
01:39:25,470 --> 01:39:29,159
kind of values we're getting out of this

1706
01:39:26,760 --> 01:39:31,230
thing it's four point five ish you know

1707
01:39:29,159 --> 01:39:32,489
I don't expect to get really any went

1708
01:39:31,229 --> 01:39:34,469
out of this but I just want to verify

1709
01:39:32,489 --> 01:39:38,099
you know four point five one four point

1710
01:39:34,470 --> 01:39:40,199
five two if we were to just widen this

1711
01:39:38,100 --> 01:39:42,150
so we just said look transfer PPS is

1712
01:39:40,199 --> 01:39:47,279
going to be eight now and we're doing

1713
01:39:42,149 --> 01:39:50,369
eight rays at a time as far as I know

1714
01:39:47,279 --> 01:39:52,619
that will just run straight through so

1715
01:39:50,369 --> 01:39:55,039
there's nothing fancy going on there and

1716
01:39:52,619 --> 01:39:58,319
so then you would just say well this

1717
01:39:55,039 --> 01:40:02,569
crap just gets extended so it just looks

1718
01:39:58,319 --> 01:40:02,569
like that right

1719
01:40:04,788 --> 01:40:11,688
and and literally that's that's just all

1720
01:40:08,118 --> 01:40:17,868
all we're doing you would do six at a

1721
01:40:11,689 --> 01:40:22,399
time and then you would write six and

1722
01:40:17,868 --> 01:40:23,958
that's it right so so it seems like I

1723
01:40:22,399 --> 01:40:25,699
don't know maybe it's good maybe it's

1724
01:40:23,958 --> 01:40:27,708
bad I'm not sure but it seems like

1725
01:40:25,698 --> 01:40:31,488
rather than having all this garbage

1726
01:40:27,708 --> 01:40:34,010
happen you might as well just do that

1727
01:40:31,488 --> 01:40:35,838
because I don't see what the difference

1728
01:40:34,010 --> 01:40:36,609
would be it just seems like a waste of

1729
01:40:35,838 --> 01:40:39,439
everyone's time

1730
01:40:36,609 --> 01:40:43,780
so because you're already doing the loop

1731
01:40:39,439 --> 01:40:43,780
that one seems like a no-brainer right

1732
01:40:45,878 --> 01:40:50,599
so I'm just curious if that changes the

1733
01:40:48,618 --> 01:40:52,338
performance profile at all I don't think

1734
01:40:50,599 --> 01:40:56,510
it will but you know I just want to see

1735
01:40:52,338 --> 01:41:02,958
if it does and we'll see and actually

1736
01:40:56,510 --> 01:41:06,429
that did quite a bit right well that was

1737
01:41:02,958 --> 01:41:06,429
strangely variable there though

1738
01:41:13,090 --> 01:41:21,250
what the heck why is that so variable

1739
01:41:19,090 --> 01:41:23,679
I wonder if did we do something weird

1740
01:41:21,250 --> 01:41:26,130
that's just kind of weird how variable

1741
01:41:23,679 --> 01:41:26,130
that is

1742
01:41:36,649 --> 01:41:41,489
so I mean a little bit hard to save

1743
01:41:39,779 --> 01:41:43,170
because that's a little bit all over the

1744
01:41:41,489 --> 01:41:45,179
map but it does seem like it actually

1745
01:41:43,170 --> 01:41:47,159
sped it up a bit that's getting into

1746
01:41:45,180 --> 01:41:52,650
making me nervous territory with that

1747
01:41:47,159 --> 01:41:54,050
variable that was those yeah but anyway

1748
01:41:52,649 --> 01:41:56,789
since it doesn't affect us negatively

1749
01:41:54,050 --> 01:42:00,000
certainly at least we could say I think

1750
01:41:56,789 --> 01:42:02,340
keeping that welded seems like it makes

1751
01:42:00,000 --> 01:42:04,260
some sense so the only question to me

1752
01:42:02,340 --> 01:42:06,869
now is should this whole thing just be

1753
01:42:04,260 --> 01:42:09,270
welded together because you could just

1754
01:42:06,869 --> 01:42:10,649
put the loop right here and if you look

1755
01:42:09,270 --> 01:42:12,570
at what happens here like we could just

1756
01:42:10,649 --> 01:42:15,869
make it easier on ourselves and just say

1757
01:42:12,569 --> 01:42:17,579
you know if there's any true here you

1758
01:42:15,869 --> 01:42:20,909
know we handle the open case in return

1759
01:42:17,579 --> 01:42:25,140
otherwise we do the rest of it right and

1760
01:42:20,909 --> 01:42:26,909
so we could just do all of this inside

1761
01:42:25,140 --> 01:42:31,369
the loop I know it's kind of ridiculous

1762
01:42:26,909 --> 01:42:34,019
but we definitely could do that right

1763
01:42:31,369 --> 01:42:38,159
and again this is just for smashing down

1764
01:42:34,020 --> 01:42:40,050
the code like smush smush smush until we

1765
01:42:38,159 --> 01:42:46,139
smush it the maximum amount of smoosh

1766
01:42:40,050 --> 01:42:47,640
that we possibly can so again hard to

1767
01:42:46,140 --> 01:42:49,880
say I'm not sure what we want to do

1768
01:42:47,640 --> 01:42:49,880
there

1769
01:43:00,600 --> 01:43:05,370
so yeah so part of the other problem

1770
01:43:02,430 --> 01:43:07,079
here is like the debug code 2 is going

1771
01:43:05,369 --> 01:43:11,989
to start to get in the way as we try to

1772
01:43:07,079 --> 01:43:14,699
make this sort of more straightforward

1773
01:43:11,989 --> 01:43:16,409
so this is actually gonna be a problem

1774
01:43:14,699 --> 01:43:17,880
and we could we could nerf it for now

1775
01:43:16,409 --> 01:43:21,119
but we're definitely gonna start to run

1776
01:43:17,880 --> 01:43:26,460
into problems where the debug code is an

1777
01:43:21,119 --> 01:43:29,609
issue and you know that's something

1778
01:43:26,460 --> 01:43:31,680
we're gonna have to figure out how we

1779
01:43:29,609 --> 01:43:33,659
want to get our debug stuff out of this

1780
01:43:31,680 --> 01:43:35,220
because we're gonna need to debug

1781
01:43:33,659 --> 01:43:36,630
problems when we start to stress test

1782
01:43:35,220 --> 01:43:39,690
things and we'll find bugs and we're

1783
01:43:36,630 --> 01:43:42,239
gonna have to draw them so that's going

1784
01:43:39,689 --> 01:43:44,250
to be that's going to be its own sort of

1785
01:43:42,239 --> 01:43:47,239
thing if we were to smoosh this in

1786
01:43:44,250 --> 01:43:50,430
directly so the sy loop were rolled in

1787
01:43:47,239 --> 01:43:54,079
then the part that's kind of tricky is

1788
01:43:50,430 --> 01:43:54,079
this part here

1789
01:44:05,420 --> 01:44:16,039
and since the sample Durr is the thing

1790
01:44:09,679 --> 01:44:19,100
that you would want there you can see

1791
01:44:16,039 --> 01:44:22,519
why I'm so interested in this so since

1792
01:44:19,100 --> 01:44:24,890
the sample dirt is since the sample Durr

1793
01:44:22,520 --> 01:44:31,850
is just going linearly it means there's

1794
01:44:24,890 --> 01:44:53,360
only one thing you would have to do each

1795
01:44:31,850 --> 01:44:55,190
time on the rail OOP even so I think I'm

1796
01:44:53,359 --> 01:44:57,529
going to leave this for later

1797
01:44:55,189 --> 01:45:00,589
that's a fine smush to make but here's

1798
01:44:57,529 --> 01:45:03,170
the thing so if we were able to write

1799
01:45:00,590 --> 01:45:06,710
these in line and it don't really know

1800
01:45:03,170 --> 01:45:09,380
if we can but if we were able to write

1801
01:45:06,710 --> 01:45:12,409
these in lines somehow so that as we

1802
01:45:09,380 --> 01:45:14,719
cast we just wrote we should be able to

1803
01:45:12,409 --> 01:45:16,189
actually just do one loop and at that

1804
01:45:14,719 --> 01:45:18,260
point I think it probably would be a win

1805
01:45:16,189 --> 01:45:21,829
because what we would do is we would

1806
01:45:18,260 --> 01:45:24,079
loop over this and we would use like a

1807
01:45:21,829 --> 01:45:26,140
mask or a mod or something to figure out

1808
01:45:24,079 --> 01:45:29,689
whether to advance the line pointer and

1809
01:45:26,140 --> 01:45:31,190
we could just write these out in a much

1810
01:45:29,689 --> 01:45:32,539
more straightforward fashion so I'm

1811
01:45:31,189 --> 01:45:36,319
going to go ahead and go to the Q&amp;A but

1812
01:45:32,539 --> 01:45:42,859
I'm gonna say like to do can we merge

1813
01:45:36,319 --> 01:45:46,488
this with the grid ray cast ray loop by

1814
01:45:42,859 --> 01:45:53,988
doing something clever with how we do

1815
01:45:46,488 --> 01:46:03,559
write outs so they don't have to be line

1816
01:45:53,988 --> 01:46:08,529
buffered I don't know so let's go to the

1817
01:46:03,560 --> 01:46:08,530
QA and we'll table that for next weekend

1818
01:47:06,279 --> 01:47:09,920
yesterday you change your Simbi extract

1819
01:47:08,420 --> 01:47:11,810
functions to use shuffles instead could

1820
01:47:09,920 --> 01:47:22,190
explain again why that is better yes

1821
01:47:11,810 --> 01:47:33,700
certainly that is if I have my

1822
01:47:22,189 --> 01:47:40,099
blackboard okay so if you think about

1823
01:47:33,699 --> 01:47:46,819
and let me do like extract British

1824
01:47:40,100 --> 01:47:52,880
shuffle so if you think about what's

1825
01:47:46,819 --> 01:47:59,059
happening in the actual process or so

1826
01:47:52,880 --> 01:48:03,199
you've got like a register file which is

1827
01:47:59,060 --> 01:48:05,750
not really a thing I mean the way to

1828
01:48:03,199 --> 01:48:07,489
think about it is just on the chip it's

1829
01:48:05,750 --> 01:48:10,220
got a bunch of storage for register

1830
01:48:07,489 --> 01:48:12,500
values they're whatever they are there's

1831
01:48:10,220 --> 01:48:15,470
just a huge bun huge crap ton of them

1832
01:48:12,500 --> 01:48:17,420
and you know when you talk about a

1833
01:48:15,470 --> 01:48:19,400
register and you look at assembly

1834
01:48:17,420 --> 01:48:23,000
language you talk about things like XM

1835
01:48:19,399 --> 01:48:26,329
m0 or you know r7 or something like this

1836
01:48:23,000 --> 01:48:28,819
and when you talk about these they're

1837
01:48:26,329 --> 01:48:30,949
just names that your code gives to

1838
01:48:28,819 --> 01:48:32,840
values they're basically just temporary

1839
01:48:30,949 --> 01:48:36,079
scratched locations they're a base like

1840
01:48:32,840 --> 01:48:38,449
scratch memory that you use and these

1841
01:48:36,079 --> 01:48:41,750
names just get assigned slots in the

1842
01:48:38,449 --> 01:48:44,109
register file so it like I've said it

1843
01:48:41,750 --> 01:48:46,670
before in here me near I'll say it again

1844
01:48:44,109 --> 01:48:48,259
saying that there's 16 registers or

1845
01:48:46,670 --> 01:48:50,659
something or general purpose registers

1846
01:48:48,260 --> 01:48:52,730
on an x64 60 years if you it doesn't

1847
01:48:50,659 --> 01:48:54,470
mean anything it's really just how many

1848
01:48:52,729 --> 01:48:56,809
register names there are it's how many

1849
01:48:54,470 --> 01:48:58,760
names you can use in your code but they

1850
01:48:56,810 --> 01:49:00,920
don't actually correspond to storage

1851
01:48:58,760 --> 01:49:04,730
locations there are many many many more

1852
01:49:00,920 --> 01:49:11,329
storage locations for register data then

1853
01:49:04,729 --> 01:49:14,369
there are register names ok

1854
01:49:11,329 --> 01:49:16,769
but anyway inside the register file

1855
01:49:14,369 --> 01:49:18,449
there's gonna be storage and there's

1856
01:49:16,770 --> 01:49:22,680
gonna be storage for different sized

1857
01:49:18,449 --> 01:49:24,510
things right or more importantly it's

1858
01:49:22,680 --> 01:49:28,920
gonna think it's storing things of

1859
01:49:24,510 --> 01:49:32,329
different sizes right so if we talk

1860
01:49:28,920 --> 01:49:35,819
about an X mm register that is a 16 byte

1861
01:49:32,329 --> 01:49:39,809
piece of storage if we talk about an AR

1862
01:49:35,819 --> 01:49:44,099
register that's a 8 byte piece of

1863
01:49:39,810 --> 01:49:45,720
storage right and the reason for this is

1864
01:49:44,100 --> 01:49:48,410
just that if you look at how the

1865
01:49:45,720 --> 01:49:50,159
registers work in x64

1866
01:49:48,409 --> 01:49:53,159
registers that are general-purpose

1867
01:49:50,159 --> 01:49:56,189
registers are 64 bits that's why it's a

1868
01:49:53,159 --> 01:49:57,510
64 bit processor but the vector

1869
01:49:56,189 --> 01:50:00,869
registers are all bigger than that so

1870
01:49:57,510 --> 01:50:06,780
xmm registers are 64 bytes ymm registers

1871
01:50:00,869 --> 01:50:07,979
are 32 bytes and zmm registers are 64

1872
01:50:06,779 --> 01:50:11,329
bytes okay

1873
01:50:07,979 --> 01:50:14,299
these happen to be a cache line size

1874
01:50:11,329 --> 01:50:17,399
these don't exist in basically anything

1875
01:50:14,300 --> 01:50:19,380
these exist in almost everything so on

1876
01:50:17,399 --> 01:50:21,539
the chip that we're running on right now

1877
01:50:19,380 --> 01:50:31,260
we have these registers we do not have

1878
01:50:21,539 --> 01:50:36,630
these registers okay so

1879
01:50:31,260 --> 01:50:39,600
when you want to talk about a vector

1880
01:50:36,630 --> 01:50:43,050
register you are talking about a 16 byte

1881
01:50:39,600 --> 01:50:45,360
value and often times such as the case

1882
01:50:43,050 --> 01:50:48,000
of what we're doing you are talking

1883
01:50:45,359 --> 01:50:51,059
about that as a packed set of multiple

1884
01:50:48,000 --> 01:50:58,770
values so the 16 bytes of an X mm

1885
01:50:51,060 --> 01:51:03,900
register is usually packed into four

1886
01:50:58,770 --> 01:51:05,880
floats so this may be 16 bytes wide but

1887
01:51:03,899 --> 01:51:07,589
we're never gonna really use it as 16

1888
01:51:05,880 --> 01:51:09,359
bytes instead what we're going to do is

1889
01:51:07,590 --> 01:51:11,550
pretend that it's got little like

1890
01:51:09,359 --> 01:51:13,319
dividers inside it and say well there's

1891
01:51:11,550 --> 01:51:14,550
gonna be one float here there's gonna be

1892
01:51:13,319 --> 01:51:15,599
another float here there's gonna be

1893
01:51:14,550 --> 01:51:18,810
another float here there's gonna be

1894
01:51:15,600 --> 01:51:21,780
another float here right and that's how

1895
01:51:18,810 --> 01:51:24,450
we get speed up that's how we get

1896
01:51:21,779 --> 01:51:27,989
performance improvements by doing sim

1897
01:51:24,449 --> 01:51:29,429
decode is by recognizing that by packing

1898
01:51:27,989 --> 01:51:31,260
multiple things together into one

1899
01:51:29,430 --> 01:51:33,360
register and then doing ops on all of

1900
01:51:31,260 --> 01:51:35,670
them at once we know that we can get

1901
01:51:33,359 --> 01:51:37,529
like a 4x speed up so instead of doing

1902
01:51:35,670 --> 01:51:44,569
one multiply we do four multiplies and

1903
01:51:37,529 --> 01:51:46,889
that's four times faster right but now

1904
01:51:44,569 --> 01:51:50,130
we have to think about what needs to

1905
01:51:46,890 --> 01:51:52,190
happen if for some reason we need to

1906
01:51:50,130 --> 01:51:57,119
talk about one of these values

1907
01:51:52,189 --> 01:51:59,549
specifically all right so let's suppose

1908
01:51:57,119 --> 01:52:02,309
I need to start talking about this f2

1909
01:51:59,550 --> 01:52:04,470
value I need to know something specific

1910
01:52:02,310 --> 01:52:07,110
about it now there's two ways that I

1911
01:52:04,470 --> 01:52:09,170
might need to do something specific with

1912
01:52:07,109 --> 01:52:12,359
it on the general purpose register side

1913
01:52:09,170 --> 01:52:16,440
one is to branch and the other is to

1914
01:52:12,359 --> 01:52:17,969
load right and you know I should say

1915
01:52:16,439 --> 01:52:18,989
load store because it doesn't matter

1916
01:52:17,970 --> 01:52:23,579
whether I'm reading or writing from

1917
01:52:18,989 --> 01:52:25,559
every write up until a V X 512 which

1918
01:52:23,579 --> 01:52:27,750
again we don't have this processor in

1919
01:52:25,560 --> 01:52:29,610
this machine doesn't even have it so

1920
01:52:27,750 --> 01:52:31,079
it's kind of a distant future thing that

1921
01:52:29,609 --> 01:52:32,489
you could you can't really rely on it

1922
01:52:31,079 --> 01:52:35,939
these days maybe someday you will but

1923
01:52:32,489 --> 01:52:39,559
right now you can't and avx2 I think

1924
01:52:35,939 --> 01:52:39,559
maybe has some of this but it's lousy

1925
01:52:39,920 --> 01:52:44,369
yeah a BX 2 has this so actually some

1926
01:52:42,750 --> 01:52:44,939
latex to chips would have some of this

1927
01:52:44,369 --> 01:52:47,159
this

1928
01:52:44,939 --> 01:52:50,488
might be plausible but we'll talk about

1929
01:52:47,159 --> 01:52:51,719
that second so there's two things you

1930
01:52:50,488 --> 01:52:54,149
might want to do branch and load and

1931
01:52:51,719 --> 01:52:56,550
store so branch is the biggest one if

1932
01:52:54,149 --> 01:52:57,929
you actually need your code to take a

1933
01:52:56,550 --> 01:52:59,760
totally different code path like call

1934
01:52:57,930 --> 01:53:03,600
some different function or or do

1935
01:52:59,760 --> 01:53:06,300
different sides of an if the branching

1936
01:53:03,600 --> 01:53:07,340
that you need to do you can only do off

1937
01:53:06,300 --> 01:53:09,810
general-purpose registers

1938
01:53:07,340 --> 01:53:13,079
general-purpose registers and the flags

1939
01:53:09,810 --> 01:53:14,580
there the the flags register is the only

1940
01:53:13,079 --> 01:53:18,210
way you can actually execute a jump

1941
01:53:14,579 --> 01:53:20,909
right so sometimes what we need to do is

1942
01:53:18,210 --> 01:53:22,739
we need to move stuff out of here into a

1943
01:53:20,909 --> 01:53:26,189
general purpose register and we need to

1944
01:53:22,738 --> 01:53:28,139
branch off it let's say or maybe we need

1945
01:53:26,189 --> 01:53:29,819
to load or store something off of an

1946
01:53:28,140 --> 01:53:31,410
address and you can only really address

1947
01:53:29,819 --> 01:53:33,569
off general-purpose registers up until

1948
01:53:31,409 --> 01:53:36,329
avx2 I think avx2 added stuff where you

1949
01:53:33,569 --> 01:53:38,039
could do loads that were wide scatter

1950
01:53:36,329 --> 01:53:39,029
gather but let's not talk about those

1951
01:53:38,039 --> 01:53:41,579
because those are a whole nother thing

1952
01:53:39,029 --> 01:53:43,259
and we can't rely on them yet in about

1953
01:53:41,579 --> 01:53:45,960
five years you probably would be able to

1954
01:53:43,260 --> 01:53:47,610
ship avx2 exclusive code and be fine but

1955
01:53:45,960 --> 01:53:49,170
right now you still have to always do a

1956
01:53:47,609 --> 01:53:52,889
path where you'd fall back so you'd

1957
01:53:49,170 --> 01:53:54,960
still need to know about this so if we

1958
01:53:52,890 --> 01:53:57,840
were going to do that we need to extract

1959
01:53:54,960 --> 01:53:59,310
a particular value and put it into a

1960
01:53:57,840 --> 01:54:01,680
different type of register so we're

1961
01:53:59,310 --> 01:54:03,660
trying to transit from here to here

1962
01:54:01,680 --> 01:54:05,610
right we're trying to say let's get

1963
01:54:03,659 --> 01:54:07,229
something out of one of these and put it

1964
01:54:05,609 --> 01:54:09,539
into one of these now remember they're

1965
01:54:07,229 --> 01:54:10,919
not actually registered Pacific

1966
01:54:09,539 --> 01:54:12,659
locations well they are as different

1967
01:54:10,920 --> 01:54:14,159
things in a register file but we still

1968
01:54:12,659 --> 01:54:16,800
need to do it we still need to move

1969
01:54:14,159 --> 01:54:18,899
something from from one place in a wide

1970
01:54:16,800 --> 01:54:20,969
sixteen byte thing and we need to tell

1971
01:54:18,899 --> 01:54:22,829
the the CPU we're trying to get one

1972
01:54:20,969 --> 01:54:25,529
thing out of it and put it into some

1973
01:54:22,829 --> 01:54:27,180
other type of register storage okay so

1974
01:54:25,529 --> 01:54:30,420
we're trying to change the name of it

1975
01:54:27,180 --> 01:54:32,130
and what it means so there's a couple

1976
01:54:30,420 --> 01:54:35,100
ways we can do it one you've seen me do

1977
01:54:32,130 --> 01:54:37,619
today it's move mask and what that does

1978
01:54:35,100 --> 01:54:39,810
is it takes slices of these things it'll

1979
01:54:37,619 --> 01:54:41,849
take like the high bit of each of these

1980
01:54:39,810 --> 01:54:45,600
and move them into a general purpose

1981
01:54:41,850 --> 01:54:48,539
register right that's great for this so

1982
01:54:45,600 --> 01:54:51,239
if we want to branch things it's great

1983
01:54:48,539 --> 01:54:52,469
we can move out the slot that the high

1984
01:54:51,238 --> 01:54:54,269
bit of those which would either be the

1985
01:54:52,469 --> 01:54:56,429
signs of the values which sometimes we

1986
01:54:54,270 --> 01:54:58,320
want to use or if we did comparison

1987
01:54:56,429 --> 01:54:58,849
operations all the bits in these would

1988
01:54:58,319 --> 01:55:00,558
have been set

1989
01:54:58,849 --> 01:55:02,569
same so it's just the same as getting

1990
01:55:00,559 --> 01:55:05,418
out what the comparison was for each

1991
01:55:02,569 --> 01:55:07,549
lane so move mask is a way of getting a

1992
01:55:05,418 --> 01:55:09,168
four bit value or more depending on

1993
01:55:07,550 --> 01:55:13,038
which move mask of use but in the case

1994
01:55:09,168 --> 01:55:16,248
of PS it's a four bit value that lets us

1995
01:55:13,038 --> 01:55:17,958
extract a very useful portion of an X mm

1996
01:55:16,248 --> 01:55:19,788
register into a general purpose register

1997
01:55:17,958 --> 01:55:22,819
so that's a great instruction another

1998
01:55:19,788 --> 01:55:25,188
one is an extract instruction and the

1999
01:55:22,819 --> 01:55:27,529
extract instruction takes one of these

2000
01:55:25,189 --> 01:55:31,280
slots whichever one we pick zero one or

2001
01:55:27,529 --> 01:55:34,429
two or three and move just the whole

2002
01:55:31,279 --> 01:55:35,719
contents of that one block into one of

2003
01:55:34,429 --> 01:55:37,760
these general-purpose registers right

2004
01:55:35,719 --> 01:55:38,748
and we could also move the 64 bit if we

2005
01:55:37,760 --> 01:55:40,789
wanted to - right

2006
01:55:38,748 --> 01:55:45,319
so is extract instructions to pull out

2007
01:55:40,788 --> 01:55:47,719
30 you know 32-bit 64-bit pieces

2008
01:55:45,319 --> 01:55:50,448
whichever piece you want and pull those

2009
01:55:47,719 --> 01:55:51,889
out into a general purpose register now

2010
01:55:50,448 --> 01:55:54,168
why would you want to do that again the

2011
01:55:51,889 --> 01:55:56,029
same reason maybe we want a branch or

2012
01:55:54,168 --> 01:55:57,529
load in store out of that specific value

2013
01:55:56,029 --> 01:56:01,840
so we want to start using it in a

2014
01:55:57,529 --> 01:56:03,648
general purpose register right and

2015
01:56:01,840 --> 01:56:05,208
there's other reasons we might do this

2016
01:56:03,649 --> 01:56:06,378
too like you saw me do today maybe we

2017
01:56:05,208 --> 01:56:09,108
want to move it out there so we can use

2018
01:56:06,378 --> 01:56:12,529
port 6 or some other scalar ports that

2019
01:56:09,109 --> 01:56:14,079
can't work on wide vectors right so some

2020
01:56:12,529 --> 01:56:16,458
reasons okay

2021
01:56:14,078 --> 01:56:18,738
but there's one more reason you might

2022
01:56:16,458 --> 01:56:21,889
want to extract in it's purely semantics

2023
01:56:18,738 --> 01:56:24,138
and this is what so if you understand

2024
01:56:21,889 --> 01:56:27,168
all of that now you can understand why I

2025
01:56:24,139 --> 01:56:29,979
didn't want to use these instructions

2026
01:56:27,168 --> 01:56:32,208
the other day and I changed to a shuffle

2027
01:56:29,979 --> 01:56:34,729
sometimes you're just talking about a

2028
01:56:32,208 --> 01:56:39,349
semantic extraction and what I mean by

2029
01:56:34,729 --> 01:56:41,059
that is look in the compiler this has

2030
01:56:39,349 --> 01:56:43,939
nothing to do with the CPU in the

2031
01:56:41,059 --> 01:56:51,019
compiler it thinks there's a difference

2032
01:56:43,939 --> 01:56:53,840
between this and this right but in the

2033
01:56:51,019 --> 01:56:55,179
CPU there is no difference between those

2034
01:56:53,840 --> 01:56:59,269
two things

2035
01:56:55,179 --> 01:57:01,609
while the CPU does have an old X 80 X 80

2036
01:56:59,269 --> 01:57:03,739
7 floating point stack for backwards

2037
01:57:01,609 --> 01:57:06,739
compatibility it never actually would

2038
01:57:03,738 --> 01:57:09,319
use it so you would never do

2039
01:57:06,738 --> 01:57:11,688
floating-point operations on the X 87

2040
01:57:09,319 --> 01:57:12,679
stack you're always actually doing

2041
01:57:11,689 --> 01:57:14,749
floating point

2042
01:57:12,679 --> 01:57:17,449
creations in annex mm register you're

2043
01:57:14,748 --> 01:57:20,929
just only bothering to use the low lane

2044
01:57:17,448 --> 01:57:23,328
right so if you do single float

2045
01:57:20,929 --> 01:57:28,969
operations it's really just loading up

2046
01:57:23,328 --> 01:57:31,969
an X mm register with 0 0 0 and then the

2047
01:57:28,969 --> 01:57:34,069
float that you wanted right so all

2048
01:57:31,969 --> 01:57:36,649
floating-point operations that happen in

2049
01:57:34,069 --> 01:57:38,840
X 64 are actually happening wide whether

2050
01:57:36,649 --> 01:57:41,359
you like it or not it's just telling the

2051
01:57:38,840 --> 01:57:43,130
CPU hey by the way I don't care about

2052
01:57:41,359 --> 01:57:44,808
these upper lanes so instead of actually

2053
01:57:43,130 --> 01:57:47,779
pushing power through them to get the

2054
01:57:44,809 --> 01:57:49,639
results just zero them instead so we can

2055
01:57:47,779 --> 01:57:52,130
save power so some ships can save power

2056
01:57:49,639 --> 01:57:54,409
by doing that right so we're actually

2057
01:57:52,130 --> 01:57:56,239
always using wide vectors even when we

2058
01:57:54,408 --> 01:57:57,708
just want to do one float we're using

2059
01:57:56,238 --> 01:57:59,718
wide vectors we're just telling the CPU

2060
01:57:57,708 --> 01:58:03,438
not to bother computing the upper lanes

2061
01:57:59,719 --> 01:58:04,760
right so what you don't want to do and

2062
01:58:03,439 --> 01:58:06,260
what I accidentally did in Martin's

2063
01:58:04,760 --> 01:58:08,239
pointed out and I was like oh duh thank

2064
01:58:06,260 --> 01:58:10,010
you Martin's as usual Martin's catches

2065
01:58:08,238 --> 01:58:11,478
everyone's mistakes mm-hmm

2066
01:58:10,010 --> 01:58:14,090
basically everyone just needs a Martin's

2067
01:58:11,479 --> 01:58:16,489
next to them that like some kind of

2068
01:58:14,090 --> 01:58:18,498
autobot Martins thing like that sits

2069
01:58:16,488 --> 01:58:19,908
there and catches your mistakes or when

2070
01:58:18,498 --> 01:58:21,738
you don't know like the right flags for

2071
01:58:19,908 --> 01:58:25,549
crap or which utility to use he also

2072
01:58:21,738 --> 01:58:27,708
always knows that anyway so what you

2073
01:58:25,550 --> 01:58:29,840
don't want to do is do an actual

2074
01:58:27,708 --> 01:58:31,368
extraction to a general purpose register

2075
01:58:29,840 --> 01:58:32,929
just to tell the compiler what you were

2076
01:58:31,368 --> 01:58:39,828
doing and so what I had written was

2077
01:58:32,929 --> 01:58:42,408
something like this right like hey turn

2078
01:58:39,828 --> 01:58:46,880
this thing into a float the result of

2079
01:58:42,408 --> 01:58:49,998
one of these extract calls right so what

2080
01:58:46,880 --> 01:58:51,708
was happening is I was saying extract

2081
01:58:49,998 --> 01:58:53,779
something out to a general purpose

2082
01:58:51,708 --> 01:58:56,118
register which would have taken one of

2083
01:58:53,779 --> 01:58:58,969
these right and moved it out here and

2084
01:58:56,118 --> 01:59:01,639
then I was saying turn that into a float

2085
01:58:58,969 --> 01:59:02,899
again right so it's just transiting it

2086
01:59:01,639 --> 01:59:05,449
through a general purpose register

2087
01:59:02,899 --> 01:59:07,728
there's no reason to do that so if all

2088
01:59:05,448 --> 01:59:09,948
you want to do is take a floating point

2089
01:59:07,729 --> 01:59:14,019
value that's somewhere in another lane

2090
01:59:09,948 --> 01:59:14,018
so what I had specifically was this case

2091
01:59:14,800 --> 01:59:21,260
for floats I want say this one right

2092
01:59:18,550 --> 01:59:23,329
what I was doing was using the general

2093
01:59:21,260 --> 01:59:26,239
purpose register extract which would

2094
01:59:23,328 --> 01:59:26,460
grab this right out of xmm zero let's

2095
01:59:26,238 --> 01:59:29,369
say

2096
01:59:26,460 --> 01:59:31,590
move it into some other thing r7 like I

2097
01:59:29,369 --> 01:59:33,599
said before right that's what his track

2098
01:59:31,590 --> 01:59:37,800
will do and then I immediately told the

2099
01:59:33,600 --> 01:59:39,900
CPU to move it back in right so what I

2100
01:59:37,800 --> 01:59:42,150
was doing was I was transiting through a

2101
01:59:39,899 --> 01:59:45,210
general purpose register just to get

2102
01:59:42,149 --> 01:59:47,099
this to move from here to here but

2103
01:59:45,210 --> 01:59:51,180
there's actually already a function

2104
01:59:47,100 --> 01:59:54,450
right chef PS just does that operation

2105
01:59:51,180 --> 01:59:57,210
so if you just do a chef PS to move this

2106
01:59:54,449 --> 01:59:59,369
thing down right that's an easier way to

2107
01:59:57,210 --> 02:00:01,439
tell the compiler what you were trying

2108
01:59:59,369 --> 02:00:04,050
to actually do than the extract call

2109
02:00:01,439 --> 02:00:06,000
which the compiler could look at that

2110
02:00:04,050 --> 02:00:07,289
and see oh he's just transiting through

2111
02:00:06,000 --> 02:00:08,789
a general purpose register why did he do

2112
02:00:07,289 --> 02:00:10,079
that I'm not gonna bother let's just

2113
02:00:08,789 --> 02:00:12,119
short-circuit that to a shuttle

2114
02:00:10,079 --> 02:00:14,550
it could be smart enough to do that but

2115
02:00:12,119 --> 02:00:15,479
why rely on the compiler when you could

2116
02:00:14,550 --> 02:00:18,930
just do the right thing

2117
02:00:15,479 --> 02:00:22,139
so chef PS is a better way of moving a

2118
02:00:18,930 --> 02:00:24,570
thing from one of the lanes to the low

2119
02:00:22,140 --> 02:00:25,890
lane which is where it has to be if you

2120
02:00:24,569 --> 02:00:27,899
want the compiler to start treating as a

2121
02:00:25,890 --> 02:00:32,180
float so this is all just manhandling

2122
02:00:27,899 --> 02:00:32,179
the compiler hopefully that makes sense

2123
02:00:40,250 --> 02:00:44,250
is there such a thing as smashing too

2124
02:00:42,659 --> 02:00:47,279
much and causing a power to bail before

2125
02:00:44,250 --> 02:00:48,989
during doing optimizations not unless

2126
02:00:47,279 --> 02:00:51,079
you're passing that flag that says don't

2127
02:00:48,989 --> 02:00:54,179
do optimizations on large functions I

2128
02:00:51,079 --> 02:00:57,329
think I don't know though the important

2129
02:00:54,180 --> 02:00:59,460
thing is don't guess time as long as you

2130
02:00:57,329 --> 02:01:02,340
have a time thing where we're timing

2131
02:00:59,460 --> 02:01:04,289
like we see there and also you can

2132
02:01:02,340 --> 02:01:07,079
always look at your code you'll know if

2133
02:01:04,289 --> 02:01:10,470
you got slower so the important thing to

2134
02:01:07,079 --> 02:01:12,239
do is just always time alright last

2135
02:01:10,470 --> 02:01:14,280
question will be gained any speed by

2136
02:01:12,239 --> 02:01:18,960
moving ahead 16 and doing 12 ops for

2137
02:01:14,279 --> 02:01:21,329
pass you know what bill let's talk about

2138
02:01:18,960 --> 02:01:23,460
that after tomorrow because I'm gonna

2139
02:01:21,329 --> 02:01:25,680
look at that stuff tomorrow and see what

2140
02:01:23,460 --> 02:01:29,399
I think like I said I want to figure out

2141
02:01:25,680 --> 02:01:30,570
how to I want to figure out how to

2142
02:01:29,399 --> 02:01:32,239
restructure those lose potentially

2143
02:01:30,569 --> 02:01:34,619
anyway so let's save that for tomorrow

2144
02:01:32,239 --> 02:01:36,329
but you can explain what you mean in

2145
02:01:34,619 --> 02:01:40,039
more detail to in tomorrow's Q&amp;A and see

2146
02:01:36,329 --> 02:01:40,039
if I didn't already answer it tomorrow

2147
02:01:40,819 --> 02:01:51,989
okay all right Thank You Rudy for

2148
02:01:50,909 --> 02:01:53,099
joining me for the episode of hand made

2149
02:01:51,989 --> 02:01:54,389
here it's been a pleasure coding with

2150
02:01:53,100 --> 02:01:55,620
you as always if you would like to

2151
02:01:54,390 --> 02:01:57,240
follow my series at home you can always

2152
02:01:55,619 --> 02:01:58,769
peer to the game on handmade hero org

2153
02:01:57,239 --> 02:02:01,829
and it comes to the source code so you

2154
02:01:58,770 --> 02:02:03,600
can see everything you for yourself and

2155
02:02:01,829 --> 02:02:05,399
play around with it yourself alright

2156
02:02:03,600 --> 02:02:07,650
that's it for today I'll be back here

2157
02:02:05,399 --> 02:02:08,729
next week to take a look at streamlining

2158
02:02:07,649 --> 02:02:10,439
those function a little bit more and

2159
02:02:08,729 --> 02:02:11,759
then we can move on to doing one more

2160
02:02:10,439 --> 02:02:13,710
optimization that I think will be like a

2161
02:02:11,760 --> 02:02:16,650
really big optimization for the actual

2162
02:02:13,710 --> 02:02:18,180
speed of raycasting and then we can fall

2163
02:02:16,649 --> 02:02:19,739
back to looking at just the diffuse blur

2164
02:02:18,180 --> 02:02:20,880
which is taking a lot of our time or the

2165
02:02:19,739 --> 02:02:23,550
build we don't actually know which ones

2166
02:02:20,880 --> 02:02:24,810
we'll see that's it for today hope see

2167
02:02:23,550 --> 02:02:26,610
you back here next week until then have

2168
02:02:24,810 --> 02:02:29,930
fun program everyone and I'll see on the

2169
02:02:26,609 --> 02:02:29,929
Internet piggies everybody

