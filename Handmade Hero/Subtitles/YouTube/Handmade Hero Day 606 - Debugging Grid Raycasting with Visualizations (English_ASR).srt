1
00:00:01,599 --> 00:00:05,278
hello everyone and welcome to handmade

2
00:00:03,198 --> 00:00:08,960
hero show we code complete game live

3
00:00:05,278 --> 00:00:11,120
on stream we i believe are just left

4
00:00:08,960 --> 00:00:13,200
with debugging today we actually did

5
00:00:11,119 --> 00:00:15,279
some nice reorganization last weekend

6
00:00:13,199 --> 00:00:17,118
and we cleaned up the lighting code so

7
00:00:15,279 --> 00:00:19,759
that it was easier you know because we

8
00:00:17,118 --> 00:00:21,679
it had been gone through so many um

9
00:00:19,760 --> 00:00:23,840
experiments with us because you know

10
00:00:21,679 --> 00:00:25,039
lighting as i've said many many many

11
00:00:23,839 --> 00:00:26,719
times on the series

12
00:00:25,039 --> 00:00:28,400
is probably one of the hardest things

13
00:00:26,719 --> 00:00:29,278
you're likely to encounter in real time

14
00:00:28,399 --> 00:00:31,839
rendering um

15
00:00:29,278 --> 00:00:33,280
it's the it's like the one thing that we

16
00:00:31,839 --> 00:00:36,558
can't really do

17
00:00:33,280 --> 00:00:39,520
um basically real time lighting

18
00:00:36,558 --> 00:00:41,119
is just always a hack there's no actual

19
00:00:39,520 --> 00:00:43,359
good solution to it

20
00:00:41,119 --> 00:00:45,038
uh obviously folks at nvidia and so on

21
00:00:43,359 --> 00:00:47,600
are trying pretty hard to

22
00:00:45,039 --> 00:00:49,679
get to a real solution because you know

23
00:00:47,600 --> 00:00:52,000
their job is to improve rendering that's

24
00:00:49,679 --> 00:00:53,679
what they make money on and so you know

25
00:00:52,000 --> 00:00:55,679
maybe someday we'll actually get

26
00:00:53,679 --> 00:00:57,600
graphics cards that are so incredibly

27
00:00:55,679 --> 00:00:58,159
powerful that you can actually do like

28
00:00:57,600 --> 00:01:00,879
fairly

29
00:00:58,159 --> 00:01:02,558
real lighting computations every frame

30
00:01:00,878 --> 00:01:03,759
and it will actually work

31
00:01:02,558 --> 00:01:05,438
um you know with some amount of

32
00:01:03,759 --> 00:01:07,359
denoising obviously but like you know

33
00:01:05,438 --> 00:01:09,359
it'll be casting so many rays to do

34
00:01:07,359 --> 00:01:11,680
actual real light transport that

35
00:01:09,359 --> 00:01:13,438
all of these hacks that we're looking at

36
00:01:11,680 --> 00:01:15,040
won't be necessary anymore but

37
00:01:13,438 --> 00:01:16,639
at least for the foreseeable future even

38
00:01:15,040 --> 00:01:18,159
the next five years that's not going to

39
00:01:16,640 --> 00:01:20,640
be the case

40
00:01:18,159 --> 00:01:22,560
we just have way too far to go for at

41
00:01:20,640 --> 00:01:24,320
least the indirect lighting part

42
00:01:22,560 --> 00:01:26,079
direct lighting is probably going to be

43
00:01:24,319 --> 00:01:29,599
solved because that's

44
00:01:26,079 --> 00:01:29,599
a much more bounded number of rays

45
00:01:30,400 --> 00:01:35,520
indirect lighting were pretty far

46
00:01:33,438 --> 00:01:37,039
and so most indirect lighting schemes

47
00:01:35,519 --> 00:01:38,000
that you see in games and certainly the

48
00:01:37,040 --> 00:01:39,759
one that we have here

49
00:01:38,000 --> 00:01:41,438
are just based around some hacks you can

50
00:01:39,759 --> 00:01:43,519
do to try and

51
00:01:41,438 --> 00:01:45,118
take the number of rays you can cast or

52
00:01:43,519 --> 00:01:46,239
the amount of lighting work you can

53
00:01:45,118 --> 00:01:48,399
actually do

54
00:01:46,239 --> 00:01:49,839
and turn it into something that actually

55
00:01:48,399 --> 00:01:51,920
produces a visually pleasing and

56
00:01:49,840 --> 00:01:54,000
plausible result even though we all know

57
00:01:51,920 --> 00:01:56,640
full well that it's not correct and

58
00:01:54,000 --> 00:01:58,399
isn't going to be even close to correct

59
00:01:56,640 --> 00:02:00,000
because we simply don't have

60
00:01:58,399 --> 00:02:02,320
enough computing power to make it

61
00:02:00,000 --> 00:02:05,200
correct in the 60th of a second that we

62
00:02:02,319 --> 00:02:05,199
have to do it

63
00:02:05,280 --> 00:02:09,520
so taking a look at where we've come at

64
00:02:08,159 --> 00:02:11,680
this point in the series

65
00:02:09,520 --> 00:02:14,080
for our lighting we've got sort of two

66
00:02:11,680 --> 00:02:16,000
methods and i believe

67
00:02:14,080 --> 00:02:17,920
we just can switch between them pretty

68
00:02:16,000 --> 00:02:19,199
trivially now if you take a look at the

69
00:02:17,919 --> 00:02:21,119
game running

70
00:02:19,199 --> 00:02:22,958
what you can see is that if we run the

71
00:02:21,120 --> 00:02:24,319
old system which we are trying to

72
00:02:22,959 --> 00:02:25,759
improve the performance of

73
00:02:24,318 --> 00:02:27,280
you can see that the lighting works

74
00:02:25,759 --> 00:02:28,159
relatively well it's a little bit

75
00:02:27,280 --> 00:02:30,719
flickery

76
00:02:28,159 --> 00:02:32,239
but for the most part it is generating

77
00:02:30,719 --> 00:02:34,479
we have some work we want to probably do

78
00:02:32,239 --> 00:02:35,200
on quality and also on interpolation to

79
00:02:34,479 --> 00:02:36,719
improve

80
00:02:35,199 --> 00:02:38,000
the shaping of the lighting and so on so

81
00:02:36,719 --> 00:02:38,560
there's things that we'll definitely do

82
00:02:38,000 --> 00:02:42,719
kind of

83
00:02:38,560 --> 00:02:44,080
downwind of the lighting computation

84
00:02:42,719 --> 00:02:45,759
but the thing that we want to do before

85
00:02:44,080 --> 00:02:47,120
we go any further on that is we just

86
00:02:45,759 --> 00:02:48,560
wanted to try and get the highest

87
00:02:47,120 --> 00:02:50,400
possible performance

88
00:02:48,560 --> 00:02:52,318
for this level of light transport and

89
00:02:50,400 --> 00:02:54,159
what we did there is we tried to improve

90
00:02:52,318 --> 00:02:56,399
the ray tracer and if we switch to the

91
00:02:54,159 --> 00:02:58,158
new one

92
00:02:56,400 --> 00:03:00,560
you will notice that we don't actually

93
00:02:58,158 --> 00:03:02,399
get any results that is because we have

94
00:03:00,560 --> 00:03:06,000
not debugged it yet

95
00:03:02,400 --> 00:03:08,400
and there are a lot of problems so

96
00:03:06,000 --> 00:03:10,878
what we want to do today is just take a

97
00:03:08,400 --> 00:03:13,200
look at that i believe this needs to be

98
00:03:10,878 --> 00:03:14,158
looks like we've removed these values i

99
00:03:13,199 --> 00:03:17,280
gotta

100
00:03:14,158 --> 00:03:20,239
nerf them out here we just want to kind

101
00:03:17,280 --> 00:03:20,239
of take a look and say

102
00:03:21,519 --> 00:03:25,039
what's wrong with the routine that we've

103
00:03:23,919 --> 00:03:28,639
written so far

104
00:03:25,039 --> 00:03:29,919
i can get rid of this what can we see

105
00:03:28,639 --> 00:03:31,919
that's buggy about it

106
00:03:29,919 --> 00:03:33,598
can we just do the basic amount of work

107
00:03:31,919 --> 00:03:35,119
to get it you know nominally working and

108
00:03:33,598 --> 00:03:36,318
go from there because you can see here

109
00:03:35,120 --> 00:03:39,439
if we run it

110
00:03:36,318 --> 00:03:40,719
um what we what we actually see

111
00:03:39,439 --> 00:03:42,239
happening and i know it's a little bit

112
00:03:40,719 --> 00:03:43,439
hard to figure out exactly what's going

113
00:03:42,239 --> 00:03:45,200
on there but

114
00:03:43,439 --> 00:03:46,639
what we see happening here is that

115
00:03:45,199 --> 00:03:49,280
everything get

116
00:03:46,639 --> 00:03:50,158
every ray that's cast just gets full

117
00:03:49,280 --> 00:03:53,120
moonlight

118
00:03:50,158 --> 00:03:53,438
so our raycaster is returning the result

119
00:03:53,120 --> 00:03:57,120
for

120
00:03:53,438 --> 00:03:59,519
every lighting location um

121
00:03:57,120 --> 00:04:00,878
it's just returning the result that it

122
00:03:59,519 --> 00:04:03,759
already

123
00:04:00,878 --> 00:04:04,239
left the the sampling volume and it's

124
00:04:03,759 --> 00:04:07,039
just

125
00:04:04,239 --> 00:04:09,039
it didn't hit anything right so so no

126
00:04:07,039 --> 00:04:09,598
rays are recorded as ever hitting

127
00:04:09,039 --> 00:04:12,400
anything

128
00:04:09,598 --> 00:04:14,079
ever so obviously we know that's not

129
00:04:12,400 --> 00:04:15,760
true because if this was working we

130
00:04:14,080 --> 00:04:17,600
would see a result sort of at least

131
00:04:15,759 --> 00:04:20,079
somewhat similar to the result that we

132
00:04:17,600 --> 00:04:22,720
had with the previous ray tracer

133
00:04:20,079 --> 00:04:23,600
and so we know that it's it's just buggy

134
00:04:22,720 --> 00:04:25,120
right it's like

135
00:04:23,600 --> 00:04:26,720
something's buggy about it but since we

136
00:04:25,120 --> 00:04:27,600
only just finished it we haven't had a

137
00:04:26,720 --> 00:04:29,680
chance to really

138
00:04:27,600 --> 00:04:31,199
carefully go through the whole thing we

139
00:04:29,680 --> 00:04:31,600
don't really know what's buggy because

140
00:04:31,199 --> 00:04:34,319
there's

141
00:04:31,600 --> 00:04:34,639
three separate pieces and any one of

142
00:04:34,319 --> 00:04:36,879
them

143
00:04:34,639 --> 00:04:39,040
or all of them could be buggy and we

144
00:04:36,879 --> 00:04:41,600
have to start pairing it down

145
00:04:39,040 --> 00:04:43,120
and getting each one working reliably so

146
00:04:41,600 --> 00:04:44,479
we probably want to go through them

147
00:04:43,120 --> 00:04:46,560
piece by piece

148
00:04:44,478 --> 00:04:48,159
doing more testing seeing if there's

149
00:04:46,560 --> 00:04:49,680
assertions we can put in seeing if

150
00:04:48,160 --> 00:04:51,919
there's any kind of like

151
00:04:49,680 --> 00:04:53,600
actual testing we can do to try and

152
00:04:51,918 --> 00:04:54,639
isolate each piece and get it working

153
00:04:53,600 --> 00:04:57,040
reliably

154
00:04:54,639 --> 00:04:58,160
and the three pieces are one there's the

155
00:04:57,040 --> 00:05:01,199
spatial partition

156
00:04:58,160 --> 00:05:02,880
which we use uh it's a grid it's sort of

157
00:05:01,199 --> 00:05:05,360
like the voxel but it's a little bit

158
00:05:02,879 --> 00:05:08,478
larger it's one voxel unit larger

159
00:05:05,360 --> 00:05:10,080
around the entire sides of it

160
00:05:08,478 --> 00:05:12,959
so we want to see if we can make that

161
00:05:10,079 --> 00:05:14,719
work uh reliably to partition

162
00:05:12,959 --> 00:05:16,399
the things we're casting against into

163
00:05:14,720 --> 00:05:17,199
that grid we don't know if that works

164
00:05:16,399 --> 00:05:19,359
currently

165
00:05:17,199 --> 00:05:21,038
it could just be wrong so you know one

166
00:05:19,360 --> 00:05:22,879
one very obvious way

167
00:05:21,038 --> 00:05:24,399
that we could be not hitting anything is

168
00:05:22,879 --> 00:05:26,319
if we don't correctly

169
00:05:24,399 --> 00:05:27,439
insert the boxes we're trying to

170
00:05:26,319 --> 00:05:29,279
collision detect

171
00:05:27,439 --> 00:05:31,038
into the grid we could have a thing

172
00:05:29,279 --> 00:05:32,159
where you know you never hit anything

173
00:05:31,038 --> 00:05:34,159
because the grid keeps telling you

174
00:05:32,160 --> 00:05:36,639
there's nothing you can hit

175
00:05:34,160 --> 00:05:38,080
so there's that the next thing we have

176
00:05:36,639 --> 00:05:39,918
is the walk table

177
00:05:38,079 --> 00:05:42,560
the walk table is the thing that tells

178
00:05:39,918 --> 00:05:44,478
you which grid squares you sample for

179
00:05:42,560 --> 00:05:46,079
any particular array

180
00:05:44,478 --> 00:05:47,839
that could be totally wrong it could be

181
00:05:46,079 --> 00:05:53,839
telling you to sample

182
00:05:47,839 --> 00:05:53,839
all erroneous grid squares

183
00:05:55,519 --> 00:05:59,359
and obviously that would cause you to

184
00:05:56,879 --> 00:06:00,639
not hit anything and then finally what

185
00:05:59,360 --> 00:06:03,439
we would have

186
00:06:00,639 --> 00:06:04,879
is the actual raycast routine itself we

187
00:06:03,439 --> 00:06:06,719
did some additional work on that

188
00:06:04,879 --> 00:06:08,399
although the core of it still does do

189
00:06:06,720 --> 00:06:11,840
testing the same way

190
00:06:08,399 --> 00:06:13,519
meaning it does actually test for rays

191
00:06:11,839 --> 00:06:16,560
using the same algorithm

192
00:06:13,519 --> 00:06:18,879
when we do a comparison between the aabb

193
00:06:16,560 --> 00:06:20,160
and the ray the actual structure does a

194
00:06:18,879 --> 00:06:21,519
different

195
00:06:20,160 --> 00:06:23,360
and the way it loads the data is

196
00:06:21,519 --> 00:06:25,839
different and the way it finalizes

197
00:06:23,360 --> 00:06:26,879
is different as well so all of those

198
00:06:25,839 --> 00:06:29,439
things could be wrong

199
00:06:26,879 --> 00:06:31,199
and there's actually part of that that

200
00:06:29,439 --> 00:06:33,279
spans two pieces

201
00:06:31,199 --> 00:06:34,400
when we build the spatial partition we

202
00:06:33,279 --> 00:06:38,079
also pack

203
00:06:34,399 --> 00:06:40,799
the aabbs we're testing against into

204
00:06:38,079 --> 00:06:43,120
individual like cmd units that are easy

205
00:06:40,800 --> 00:06:46,960
for our code to

206
00:06:43,120 --> 00:06:49,038
work with and so that part is also

207
00:06:46,959 --> 00:06:50,079
worth examining because if we packed

208
00:06:49,038 --> 00:06:51,759
them incorrectly

209
00:06:50,079 --> 00:06:53,519
then when we test against them they will

210
00:06:51,759 --> 00:06:56,160
not test correctly

211
00:06:53,519 --> 00:06:57,279
even if the testing code was correct so

212
00:06:56,160 --> 00:06:59,439
again

213
00:06:57,279 --> 00:07:01,359
three moving parts there and two of the

214
00:06:59,439 --> 00:07:02,800
parts actually have like a relationship

215
00:07:01,360 --> 00:07:05,280
with each other

216
00:07:02,800 --> 00:07:07,120
through that packing structure that we

217
00:07:05,279 --> 00:07:09,119
have to look at closely as well because

218
00:07:07,120 --> 00:07:12,720
that wasn't even though the a

219
00:07:09,120 --> 00:07:14,720
b testing hasn't really changed

220
00:07:12,720 --> 00:07:16,080
we're using the same algorithm the way

221
00:07:14,720 --> 00:07:19,280
we're doing the algorithm

222
00:07:16,079 --> 00:07:23,038
is different because the data input

223
00:07:19,279 --> 00:07:23,038
has been changed

224
00:07:23,120 --> 00:07:26,399
so we have our work cut out for us

225
00:07:24,560 --> 00:07:28,478
certainly so it's going to take a little

226
00:07:26,399 --> 00:07:32,318
while for us to actually make this

227
00:07:28,478 --> 00:07:33,758
go let's start by looking at the spatial

228
00:07:32,319 --> 00:07:36,400
partition

229
00:07:33,759 --> 00:07:39,280
and figuring out if there's any way that

230
00:07:36,399 --> 00:07:42,638
we could sort of

231
00:07:39,279 --> 00:07:44,559
test that right

232
00:07:42,639 --> 00:07:46,400
and i think there is a pretty simple way

233
00:07:44,560 --> 00:07:49,680
that we could do this

234
00:07:46,399 --> 00:07:51,598
since we know that we can draw debug

235
00:07:49,680 --> 00:07:53,680
boxes we've already done the work in

236
00:07:51,598 --> 00:07:57,038
fact we even inside the letting system

237
00:07:53,680 --> 00:07:59,120
have a very specific thing uh called

238
00:07:57,038 --> 00:08:01,038
push debug box

239
00:07:59,120 --> 00:08:02,399
it seems like we should be able to do

240
00:08:01,038 --> 00:08:06,240
something where

241
00:08:02,399 --> 00:08:11,598
we draw a particular

242
00:08:06,240 --> 00:08:14,160
spatial cell so we could for example

243
00:08:11,598 --> 00:08:14,878
take a particular voxel cell in the

244
00:08:14,160 --> 00:08:18,400
world

245
00:08:14,879 --> 00:08:22,400
and we could draw what that voxel cell

246
00:08:18,399 --> 00:08:24,959
thinks its aabb contents are

247
00:08:22,399 --> 00:08:27,758
and that would allow us to visually

248
00:08:24,959 --> 00:08:30,318
inspect it to see whether or not

249
00:08:27,759 --> 00:08:31,840
the contents of the space position

250
00:08:30,319 --> 00:08:33,278
appear to line up with what we think

251
00:08:31,839 --> 00:08:36,000
they should

252
00:08:33,278 --> 00:08:38,158
and again the reason that i typically

253
00:08:36,000 --> 00:08:41,679
take this sort of approach

254
00:08:38,158 --> 00:08:43,120
is that you know

255
00:08:41,679 --> 00:08:44,719
in fact we get asked a lot of time so

256
00:08:43,120 --> 00:08:45,839
i'll mention it again people always ask

257
00:08:44,720 --> 00:08:46,800
me like what do you think of unit

258
00:08:45,839 --> 00:08:48,640
testing

259
00:08:46,799 --> 00:08:49,919
what i think about unit testing as well

260
00:08:48,639 --> 00:08:52,000
unit testing is fine

261
00:08:49,919 --> 00:08:54,000
for very simple programs that don't do

262
00:08:52,000 --> 00:08:56,080
very much interesting

263
00:08:54,000 --> 00:08:57,919
for complex programs like a game you

264
00:08:56,080 --> 00:08:59,839
really can't unit test because

265
00:08:57,919 --> 00:09:01,120
the definition of what it means to be

266
00:08:59,839 --> 00:09:04,160
correct

267
00:09:01,120 --> 00:09:04,959
is very difficult to actually test if

268
00:09:04,159 --> 00:09:08,159
you have

269
00:09:04,958 --> 00:09:08,719
an input and what you want in your

270
00:09:08,159 --> 00:09:11,360
output

271
00:09:08,720 --> 00:09:13,278
is that you want a grid that contains

272
00:09:11,360 --> 00:09:14,720
clipped versions of the input for each

273
00:09:13,278 --> 00:09:17,838
grid square

274
00:09:14,720 --> 00:09:21,040
well the routine that you write

275
00:09:17,839 --> 00:09:23,760
in order to generate that is the same

276
00:09:21,039 --> 00:09:25,759
routine you would need to test it

277
00:09:23,759 --> 00:09:27,519
right there's no way to write a unit

278
00:09:25,759 --> 00:09:31,519
test that tests that

279
00:09:27,519 --> 00:09:34,320
without doing that right

280
00:09:31,519 --> 00:09:36,240
there's no other way to do it so if you

281
00:09:34,320 --> 00:09:38,240
write the routine

282
00:09:36,240 --> 00:09:40,000
and then someone says unit test to see

283
00:09:38,240 --> 00:09:42,000
if that's correct well there's no

284
00:09:40,000 --> 00:09:45,519
definition for the output

285
00:09:42,000 --> 00:09:48,799
other than run that same algorithm run

286
00:09:45,519 --> 00:09:50,000
that right now sometimes you can still

287
00:09:48,799 --> 00:09:52,399
do this if there's for

288
00:09:50,000 --> 00:09:53,278
example if your performance like for our

289
00:09:52,399 --> 00:09:55,039
raycaster

290
00:09:53,278 --> 00:09:57,200
that's something that we could unit test

291
00:09:55,039 --> 00:09:59,838
and maybe should in the future because

292
00:09:57,200 --> 00:10:01,120
it's easier to write a crappy slow

293
00:09:59,839 --> 00:10:02,720
raycaster

294
00:10:01,120 --> 00:10:05,360
than it is to write a really highly

295
00:10:02,720 --> 00:10:07,680
optimized cmd1

296
00:10:05,360 --> 00:10:08,560
so we could use a brute force raycaster

297
00:10:07,679 --> 00:10:11,759
to test

298
00:10:08,559 --> 00:10:13,119
the total result of the raycaster

299
00:10:11,759 --> 00:10:15,120
that's something we could totally do and

300
00:10:13,120 --> 00:10:16,879
probably should eventually but to

301
00:10:15,120 --> 00:10:18,078
actually test any individual piece of

302
00:10:16,879 --> 00:10:21,200
the algorithm is quite

303
00:10:18,078 --> 00:10:21,919
difficult because the only way to know

304
00:10:21,200 --> 00:10:23,920
what the result

305
00:10:21,919 --> 00:10:26,000
should have been is to have a properly

306
00:10:23,919 --> 00:10:28,159
working version of the routine

307
00:10:26,000 --> 00:10:29,200
and if we had a properly working version

308
00:10:28,159 --> 00:10:32,240
13 i'd just

309
00:10:29,200 --> 00:10:34,000
use it right now sometimes you can look

310
00:10:32,240 --> 00:10:35,680
at unit testing a little bit differently

311
00:10:34,000 --> 00:10:36,799
and say well

312
00:10:35,679 --> 00:10:38,239
we're not really going to think of it as

313
00:10:36,799 --> 00:10:38,958
a unit test but we're going to think of

314
00:10:38,240 --> 00:10:40,879
it as

315
00:10:38,958 --> 00:10:42,639
sort of two wrongs make it right we're

316
00:10:40,879 --> 00:10:43,679
going to write the routine once

317
00:10:42,639 --> 00:10:45,360
and we're going to write it a second

318
00:10:43,679 --> 00:10:46,399
time a completely different way and then

319
00:10:45,360 --> 00:10:48,000
we're going to keep working on them

320
00:10:46,399 --> 00:10:51,679
until their answers match

321
00:10:48,000 --> 00:10:52,639
right and that can be a valid strategy

322
00:10:51,679 --> 00:10:54,319
if you have something that's really

323
00:10:52,639 --> 00:10:55,838
difficult to test and you don't really

324
00:10:54,320 --> 00:10:57,920
have a way of testing

325
00:10:55,839 --> 00:10:59,360
the answer but you really need some way

326
00:10:57,919 --> 00:11:01,278
of finding the bugs in it and you don't

327
00:10:59,360 --> 00:11:03,440
really have any other options

328
00:11:01,278 --> 00:11:05,439
you can definitely try to go that route

329
00:11:03,440 --> 00:11:06,959
but with something like raycasting it's

330
00:11:05,440 --> 00:11:09,040
inherently very visual

331
00:11:06,958 --> 00:11:10,799
your eye immediately knows whether

332
00:11:09,039 --> 00:11:11,360
something is correct or not in a way

333
00:11:10,799 --> 00:11:14,240
that

334
00:11:11,360 --> 00:11:15,278
writing a test is very difficult to do

335
00:11:14,240 --> 00:11:18,240
if i can pick

336
00:11:15,278 --> 00:11:20,159
a node of the voxel see the outline of

337
00:11:18,240 --> 00:11:21,759
that node and then see the outline of

338
00:11:20,159 --> 00:11:23,600
the boxes that it included

339
00:11:21,759 --> 00:11:25,838
it will be immediately obvious to me

340
00:11:23,600 --> 00:11:28,079
what it is doing and more importantly

341
00:11:25,839 --> 00:11:29,839
and this is something that's important

342
00:11:28,078 --> 00:11:30,799
to understand that unit tests often

343
00:11:29,839 --> 00:11:32,640
can't tell you

344
00:11:30,799 --> 00:11:34,479
it will also tell me how it's wrong

345
00:11:32,639 --> 00:11:36,639
because when i can visually see

346
00:11:34,480 --> 00:11:38,000
what is getting included in that box and

347
00:11:36,639 --> 00:11:40,000
how it's getting clipped

348
00:11:38,000 --> 00:11:42,159
i immediately also know what's wrong

349
00:11:40,000 --> 00:11:45,278
with it if i don't see what i expect

350
00:11:42,159 --> 00:11:46,480
if boxes protrude too far outside of it

351
00:11:45,278 --> 00:11:48,879
then i know they're not being clipped

352
00:11:46,480 --> 00:11:49,839
properly if boxes that aren't inside it

353
00:11:48,879 --> 00:11:51,278
are included

354
00:11:49,839 --> 00:11:53,200
entirely then i know that the bounce

355
00:11:51,278 --> 00:11:54,958
checking is wrong right there's a lot of

356
00:11:53,200 --> 00:11:56,399
things i can intuit from seeing the

357
00:11:54,958 --> 00:11:58,479
visual version

358
00:11:56,399 --> 00:12:00,078
that a unit test simply doesn't tell me

359
00:11:58,480 --> 00:12:01,600
a unit test just tells me whether the

360
00:12:00,078 --> 00:12:03,199
results agreed or not

361
00:12:01,600 --> 00:12:05,600
but it doesn't necessarily have any way

362
00:12:03,200 --> 00:12:08,240
of telling me in a intuitive way

363
00:12:05,600 --> 00:12:08,800
how those results were incorrect and so

364
00:12:08,240 --> 00:12:10,560
again

365
00:12:08,799 --> 00:12:12,319
especially for something like a game

366
00:12:10,559 --> 00:12:14,319
where you do not actually have correct

367
00:12:12,320 --> 00:12:16,959
answers sitting around

368
00:12:14,320 --> 00:12:17,680
you don't have a corpus of testing a lot

369
00:12:16,958 --> 00:12:20,000
of times

370
00:12:17,679 --> 00:12:22,078
visual testing is much better than unit

371
00:12:20,000 --> 00:12:24,000
testing because visual testing

372
00:12:22,078 --> 00:12:25,679
both provides you a way to quickly see

373
00:12:24,000 --> 00:12:27,600
whether the results are correct without

374
00:12:25,679 --> 00:12:29,439
having to try and figure out another way

375
00:12:27,600 --> 00:12:31,120
of doing the algorithm that will somehow

376
00:12:29,440 --> 00:12:32,720
magically be more reliable but just

377
00:12:31,120 --> 00:12:35,200
slower i guess so that's why you're not

378
00:12:32,720 --> 00:12:36,800
using it as your actual algorithm

379
00:12:35,200 --> 00:12:38,320
but it also provides you an intuition

380
00:12:36,799 --> 00:12:40,319
that you don't have otherwise

381
00:12:38,320 --> 00:12:41,920
and finally it also gives you something

382
00:12:40,320 --> 00:12:42,800
else that you don't have with unit

383
00:12:41,919 --> 00:12:44,399
testing

384
00:12:42,799 --> 00:12:46,000
which is insight into the problem that

385
00:12:44,399 --> 00:12:48,320
you may not have had otherwise

386
00:12:46,000 --> 00:12:50,240
so once you start drawing things there

387
00:12:48,320 --> 00:12:51,200
are visualizations of the problem that

388
00:12:50,240 --> 00:12:53,120
you have

389
00:12:51,200 --> 00:12:54,560
you may actually gain insight into how

390
00:12:53,120 --> 00:12:56,480
to solve the problem better

391
00:12:54,559 --> 00:12:58,078
and a unit test can never really do that

392
00:12:56,480 --> 00:12:59,680
for you because all a unit test is going

393
00:12:58,078 --> 00:13:01,599
to do is tell you whether or not

394
00:12:59,679 --> 00:13:02,879
the code worked properly it's not really

395
00:13:01,600 --> 00:13:04,240
going to tell you anything that you

396
00:13:02,879 --> 00:13:05,519
didn't already know about the code

397
00:13:04,240 --> 00:13:06,720
because you're the one who had to write

398
00:13:05,519 --> 00:13:08,159
the unit test for it

399
00:13:06,720 --> 00:13:10,399
so obviously you knew what you were

400
00:13:08,159 --> 00:13:13,039
doing when you wrote that

401
00:13:10,399 --> 00:13:14,639
so having a visualizer that can draw the

402
00:13:13,039 --> 00:13:17,039
various aspects of the algorithm

403
00:13:14,639 --> 00:13:18,639
to help you find the bugs can also help

404
00:13:17,039 --> 00:13:20,480
you improve the algorithm and that's a

405
00:13:18,639 --> 00:13:22,159
really important thing to keep in mind

406
00:13:20,480 --> 00:13:23,360
so when choosing between doing something

407
00:13:22,159 --> 00:13:24,719
like unit testing and doing something

408
00:13:23,360 --> 00:13:26,320
like visualization

409
00:13:24,720 --> 00:13:28,639
i would argue that visualization is

410
00:13:26,320 --> 00:13:30,480
usually where your time is better spent

411
00:13:28,639 --> 00:13:32,560
especially in a game environment where a

412
00:13:30,480 --> 00:13:34,480
lot of things are very poorly defined

413
00:13:32,559 --> 00:13:35,679
and don't have really good right answers

414
00:13:34,480 --> 00:13:37,440
to them

415
00:13:35,679 --> 00:13:38,958
a lot of times if you have success with

416
00:13:37,440 --> 00:13:40,480
unit testing it's usually because your

417
00:13:38,958 --> 00:13:42,000
problem is very simple and has a very

418
00:13:40,480 --> 00:13:43,278
simple definition of what the answer

419
00:13:42,000 --> 00:13:44,958
should be

420
00:13:43,278 --> 00:13:46,320
and in those cases it may be totally

421
00:13:44,958 --> 00:13:48,239
fine to do so but

422
00:13:46,320 --> 00:13:49,839
a lot of times that's just realistically

423
00:13:48,240 --> 00:13:51,198
not what you're doing games are much

424
00:13:49,839 --> 00:13:53,040
more complicated than the things that

425
00:13:51,198 --> 00:13:54,799
people typically write unit tests for

426
00:13:53,039 --> 00:13:56,078
and have much more fuzzy definitions of

427
00:13:54,799 --> 00:13:58,319
what is correct

428
00:13:56,078 --> 00:14:03,838
so it's much harder for you to do things

429
00:13:58,320 --> 00:14:03,839
like unit testing on those

430
00:14:06,399 --> 00:14:12,879
um all right so

431
00:14:09,600 --> 00:14:14,879
let's go ahead and try to uh

432
00:14:12,879 --> 00:14:18,159
put in some visualization for what's

433
00:14:14,879 --> 00:14:19,838
happening with the grid raycaster here

434
00:14:18,159 --> 00:14:21,600
so i think what i'd like to do is kind

435
00:14:19,839 --> 00:14:26,480
of uh

436
00:14:21,600 --> 00:14:29,120
re re reinvoke if you will

437
00:14:26,480 --> 00:14:30,079
the debug idea that we had before where

438
00:14:29,120 --> 00:14:33,839
we would sort of say

439
00:14:30,078 --> 00:14:35,759
look we know that if we drew

440
00:14:33,839 --> 00:14:37,920
everything you know the raycasters

441
00:14:35,759 --> 00:14:38,559
raycasting tens or hundreds of thousands

442
00:14:37,919 --> 00:14:41,439
of rays

443
00:14:38,559 --> 00:14:42,559
every frame it's we can't draw all those

444
00:14:41,440 --> 00:14:44,240
it would just be a giant

445
00:14:42,559 --> 00:14:46,958
mess on the screen that wouldn't tell us

446
00:14:44,240 --> 00:14:48,240
anything but what we can do is just

447
00:14:46,958 --> 00:14:51,198
randomly pick

448
00:14:48,240 --> 00:14:53,120
one location in the world and say let's

449
00:14:51,198 --> 00:14:54,639
look at one of the rays or a couple of

450
00:14:53,120 --> 00:14:56,639
the arrays that are coming out of that

451
00:14:54,639 --> 00:14:58,720
one location

452
00:14:56,639 --> 00:15:00,720
and then we can sort of get an idea for

453
00:14:58,720 --> 00:15:01,199
what the raycaster is doing by looking

454
00:15:00,720 --> 00:15:05,360
at

455
00:15:01,198 --> 00:15:07,198
that specific ray or that specific grid

456
00:15:05,360 --> 00:15:08,800
so what i'd like to do is something here

457
00:15:07,198 --> 00:15:11,359
where we'll just say okay

458
00:15:08,799 --> 00:15:12,000
let's go ahead and say if you know or

459
00:15:11,360 --> 00:15:14,800
maybe we'll make

460
00:15:12,000 --> 00:15:16,799
a boolean value that's like debugging

461
00:15:14,799 --> 00:15:18,399
and we'll say if the initial grid index

462
00:15:16,799 --> 00:15:20,559
equals some value that we

463
00:15:18,399 --> 00:15:22,078
set so we can set this grid index to

464
00:15:20,559 --> 00:15:23,759
whatever we want right it can be

465
00:15:22,078 --> 00:15:26,000
anything

466
00:15:23,759 --> 00:15:27,838
we'll just set it to something and then

467
00:15:26,000 --> 00:15:29,679
we'll look at the rays that come out of

468
00:15:27,839 --> 00:15:30,880
this specific grid index and this

469
00:15:29,679 --> 00:15:33,599
specific grid index

470
00:15:30,879 --> 00:15:34,320
only and furthermore we can do some more

471
00:15:33,600 --> 00:15:36,480
specific

472
00:15:34,320 --> 00:15:37,519
testing here if we'd like to and limit

473
00:15:36,480 --> 00:15:39,278
the actual

474
00:15:37,519 --> 00:15:40,720
number of rays we look at but for the

475
00:15:39,278 --> 00:15:41,120
moment i'm just going to draw them all

476
00:15:40,720 --> 00:15:43,920
from

477
00:15:41,120 --> 00:15:44,959
one specific thing and then we'll start

478
00:15:43,919 --> 00:15:47,919
pairing that down

479
00:15:44,958 --> 00:15:47,919
as necessary

480
00:15:48,320 --> 00:15:51,440
so what i'm going to do first is i'm

481
00:15:49,919 --> 00:15:53,679
going to draw

482
00:15:51,440 --> 00:15:54,800
for our debugging purposes i'm going to

483
00:15:53,679 --> 00:15:58,879
draw the ray

484
00:15:54,799 --> 00:16:02,559
itself and i'm going to do

485
00:15:58,879 --> 00:16:06,240
also draw the voxel region that the ray

486
00:16:02,559 --> 00:16:08,078
exists inside so we cast this out of the

487
00:16:06,240 --> 00:16:10,399
center of a voxel for a specific

488
00:16:08,078 --> 00:16:12,159
reason we wanted to compute lighting

489
00:16:10,399 --> 00:16:13,759
that occurs within that voxel in the

490
00:16:12,159 --> 00:16:15,759
center seems like the best place to do

491
00:16:13,759 --> 00:16:18,800
that since we can only compute it out of

492
00:16:15,759 --> 00:16:20,879
so many places we're going to draw what

493
00:16:18,799 --> 00:16:21,758
that box is and then we're going to draw

494
00:16:20,879 --> 00:16:23,919
the ray

495
00:16:21,759 --> 00:16:26,959
and so what i'm going to start with here

496
00:16:23,919 --> 00:16:30,639
is i'm going to call

497
00:16:26,958 --> 00:16:32,319
the push be the push debug box call

498
00:16:30,639 --> 00:16:34,399
um and i'm probably going to get rid of

499
00:16:32,320 --> 00:16:35,920
this if here it's probably just there

500
00:16:34,399 --> 00:16:37,440
for some quick testing where we didn't

501
00:16:35,919 --> 00:16:38,879
want to draw too many boxes or something

502
00:16:37,440 --> 00:16:43,600
like that but

503
00:16:38,879 --> 00:16:45,759
we want it now and so what i need to do

504
00:16:43,600 --> 00:16:46,959
is i need to produce a few things i need

505
00:16:45,759 --> 00:16:50,079
first of all the color

506
00:16:46,958 --> 00:16:52,399
which i'm going to use i think cyan

507
00:16:50,078 --> 00:16:54,078
for this particular like the starting

508
00:16:52,399 --> 00:16:55,679
box area

509
00:16:54,078 --> 00:16:57,439
and then what i need to do is i need to

510
00:16:55,679 --> 00:16:59,758
produce a voxman uh

511
00:16:57,440 --> 00:17:02,320
i'm sorry a boxman and a box max for the

512
00:16:59,759 --> 00:17:02,320
voxel

513
00:17:02,639 --> 00:17:07,599
and in order to do that i'm going to

514
00:17:04,720 --> 00:17:09,679
need some way of asking the voxel

515
00:17:07,599 --> 00:17:11,918
what those bounds are and fortunately i

516
00:17:09,679 --> 00:17:14,079
actually have a way of doing that

517
00:17:11,919 --> 00:17:15,839
which is get cell bounds now it's a

518
00:17:14,078 --> 00:17:17,438
little bit difficult for me to produce

519
00:17:15,838 --> 00:17:19,678
that because we currently don't have a

520
00:17:17,439 --> 00:17:21,839
way to reverse engineer an index

521
00:17:19,679 --> 00:17:23,919
we have flat index from but we don't

522
00:17:21,838 --> 00:17:25,759
have um

523
00:17:23,919 --> 00:17:27,199
sort of the reverse of that so now would

524
00:17:25,759 --> 00:17:28,798
be a good time for me to write that i

525
00:17:27,199 --> 00:17:30,080
didn't write it before because i was

526
00:17:28,798 --> 00:17:30,480
like well i don't know if i really need

527
00:17:30,079 --> 00:17:32,079
it

528
00:17:30,480 --> 00:17:33,519
i do think we need it for debugging i

529
00:17:32,079 --> 00:17:35,359
don't know that we ever need it for any

530
00:17:33,519 --> 00:17:37,519
actual work but that's okay

531
00:17:35,359 --> 00:17:39,279
um you know building debug things into a

532
00:17:37,519 --> 00:17:40,160
game is important so i don't mind doing

533
00:17:39,279 --> 00:17:42,399
that

534
00:17:40,160 --> 00:17:44,160
at all so what i'd like to do here is

535
00:17:42,400 --> 00:17:45,280
i'd like to say you know okay if we're

536
00:17:44,160 --> 00:17:47,759
doing the debugging

537
00:17:45,279 --> 00:17:49,519
i would like to get the cell bounds here

538
00:17:47,759 --> 00:17:51,599
i also don't really understand

539
00:17:49,519 --> 00:17:53,359
why i need to pass a boxman into box max

540
00:17:51,599 --> 00:17:54,480
to this when i have a rectangle so i

541
00:17:53,359 --> 00:17:58,639
think i'm going to

542
00:17:54,480 --> 00:18:01,279
have a voxbox there that i can just pass

543
00:17:58,640 --> 00:18:03,280
and then i'll have there be a push debug

544
00:18:01,279 --> 00:18:04,798
a version of push debug box that unpacks

545
00:18:03,279 --> 00:18:05,759
that for me just makes my life a little

546
00:18:04,798 --> 00:18:08,079
easier

547
00:18:05,759 --> 00:18:09,839
which seems good so in here i know that

548
00:18:08,079 --> 00:18:11,439
i want the spatial grid that's the grid

549
00:18:09,839 --> 00:18:13,918
that we're actually looking at

550
00:18:11,440 --> 00:18:15,038
and in terms of the index again this is

551
00:18:13,919 --> 00:18:16,720
not quite correct

552
00:18:15,038 --> 00:18:18,960
so what i want to do here is i want to

553
00:18:16,720 --> 00:18:18,960
say

554
00:18:19,279 --> 00:18:23,279
triple index from or however we want to

555
00:18:21,200 --> 00:18:26,080
look at it

556
00:18:23,279 --> 00:18:27,119
maybe x y z index frame or dim index

557
00:18:26,079 --> 00:18:28,639
from maybe

558
00:18:27,119 --> 00:18:31,759
and then i'll pass the initial grid

559
00:18:28,640 --> 00:18:33,679
index so this way i can

560
00:18:31,759 --> 00:18:34,960
figure out where i am in the voxel like

561
00:18:33,679 --> 00:18:38,080
so

562
00:18:34,960 --> 00:18:38,880
and that will help me out right so i'm

563
00:18:38,079 --> 00:18:40,319
going to go

564
00:18:38,880 --> 00:18:42,960
now look at how i would write that

565
00:18:40,319 --> 00:18:45,038
function so we have flat index from

566
00:18:42,960 --> 00:18:46,319
and we know that that's how we produce

567
00:18:45,038 --> 00:18:50,480
the answer

568
00:18:46,319 --> 00:18:52,720
so if you look here we go okay

569
00:18:50,480 --> 00:18:54,079
we take the cell count x and we well you

570
00:18:52,720 --> 00:18:57,360
can see what we do right the x

571
00:18:54,079 --> 00:19:00,558
is the is the you know the step by one

572
00:18:57,359 --> 00:19:03,599
the y is step by one whole x row

573
00:19:00,558 --> 00:19:06,798
and the z steps by one entire x y sheet

574
00:19:03,599 --> 00:19:09,279
right so what i want to do here

575
00:19:06,798 --> 00:19:11,519
is i want to you know produce a version

576
00:19:09,279 --> 00:19:12,879
of of this that does the opposite thing

577
00:19:11,519 --> 00:19:13,679
so i'm going to call this dimension

578
00:19:12,880 --> 00:19:15,440
index from

579
00:19:13,679 --> 00:19:17,200
that gives us back the v so i'm just

580
00:19:15,440 --> 00:19:19,200
going to swap these two right there's

581
00:19:17,200 --> 00:19:22,080
the v3s

582
00:19:19,200 --> 00:19:22,080
and here's the flat

583
00:19:22,400 --> 00:19:25,679
so my goal here is to take the flat

584
00:19:24,079 --> 00:19:30,000
index and somehow

585
00:19:25,679 --> 00:19:32,320
produce the dimensional index from it

586
00:19:30,000 --> 00:19:33,119
well i know several things about this

587
00:19:32,319 --> 00:19:35,839
first of all

588
00:19:33,119 --> 00:19:36,399
i know what each of the sheet dimensions

589
00:19:35,839 --> 00:19:39,279
is

590
00:19:36,400 --> 00:19:39,759
right because i know that for example uh

591
00:19:39,279 --> 00:19:41,918
the z

592
00:19:39,759 --> 00:19:44,400
sheet size is just going to be the cell

593
00:19:41,919 --> 00:19:46,559
count x times the cell count y

594
00:19:44,400 --> 00:19:48,160
so i know how many there are on a z

595
00:19:46,558 --> 00:19:48,639
sheet and i know that the only way to

596
00:19:48,160 --> 00:19:51,840
get

597
00:19:48,640 --> 00:19:54,480
that far into you know to get one whole

598
00:19:51,839 --> 00:19:56,879
one of those forwards is to move in z

599
00:19:54,480 --> 00:19:58,960
because between moving in just x and y

600
00:19:56,880 --> 00:20:00,000
if z was zero i would never get out of

601
00:19:58,960 --> 00:20:06,319
that initial first

602
00:20:00,000 --> 00:20:08,319
z sheet so what i can do here is just

603
00:20:06,319 --> 00:20:10,960
divide

604
00:20:08,319 --> 00:20:11,678
uh and get the answer so if this is how

605
00:20:10,960 --> 00:20:15,440
much is in

606
00:20:11,679 --> 00:20:16,960
a z sheet and again i pull this out

607
00:20:15,440 --> 00:20:18,798
for convenience so i don't have to creep

608
00:20:16,960 --> 00:20:20,480
using the arrow

609
00:20:18,798 --> 00:20:22,319
so what i can do here is say all right

610
00:20:20,480 --> 00:20:24,319
whatever the input index is

611
00:20:22,319 --> 00:20:25,678
so when i look at this index if i divide

612
00:20:24,319 --> 00:20:28,798
it by the z sheet count

613
00:20:25,679 --> 00:20:31,200
that's going to be my z right

614
00:20:28,798 --> 00:20:32,839
because however many full z sheets i

615
00:20:31,200 --> 00:20:35,759
went forward that's my z

616
00:20:32,839 --> 00:20:39,759
answer now if i then want to take

617
00:20:35,759 --> 00:20:41,759
and decrease the index as we go

618
00:20:39,759 --> 00:20:43,839
i i don't really know that i want to

619
00:20:41,759 --> 00:20:45,519
modify it in place so i think i may

620
00:20:43,839 --> 00:20:46,959
create a new one here that's like index

621
00:20:45,519 --> 00:20:49,599
remaining

622
00:20:46,960 --> 00:20:50,480
right so what i can do here is say okay

623
00:20:49,599 --> 00:20:53,519
let's take the

624
00:20:50,480 --> 00:20:54,400
uh the index remaining here and we'll

625
00:20:53,519 --> 00:20:56,480
divide it by z

626
00:20:54,400 --> 00:20:57,600
sheet then i'll take the index remaining

627
00:20:56,480 --> 00:20:59,679
and i'll subtract

628
00:20:57,599 --> 00:21:01,119
whatever that value is that i got times

629
00:20:59,679 --> 00:21:02,320
the z sheet so that just gives me

630
00:21:01,119 --> 00:21:05,279
however much

631
00:21:02,319 --> 00:21:07,359
i have left now what i can do is say all

632
00:21:05,279 --> 00:21:10,720
right finally we know there's a result

633
00:21:07,359 --> 00:21:14,000
y right and the result y

634
00:21:10,720 --> 00:21:15,519
is going to be just however many y

635
00:21:14,000 --> 00:21:17,839
x rows you know we went forward that's

636
00:21:15,519 --> 00:21:18,558
the y value so i can again take index

637
00:21:17,839 --> 00:21:23,279
remaining

638
00:21:18,558 --> 00:21:24,720
and see like how much is a y row

639
00:21:23,279 --> 00:21:26,720
and a y row is just going to be cell

640
00:21:24,720 --> 00:21:28,159
count x by itself right

641
00:21:26,720 --> 00:21:31,679
and so then i can say index remaining

642
00:21:28,159 --> 00:21:34,400
minus equals that value

643
00:21:31,679 --> 00:21:36,640
and then finally i can say okay the

644
00:21:34,400 --> 00:21:39,038
remainder of that is just going to be my

645
00:21:36,640 --> 00:21:39,679
x because whatever i have left after

646
00:21:39,038 --> 00:21:42,319
removing

647
00:21:39,679 --> 00:21:43,519
the sheet motion and the row motion all

648
00:21:42,319 --> 00:21:46,879
i'm going to have left is just

649
00:21:43,519 --> 00:21:48,960
x right so now

650
00:21:46,880 --> 00:21:50,320
this is not particularly efficient way

651
00:21:48,960 --> 00:21:52,640
to do this um

652
00:21:50,319 --> 00:21:53,759
i could probably do a better job of it

653
00:21:52,640 --> 00:21:55,759
because i don't

654
00:21:53,759 --> 00:21:58,000
really need to probably do full divides

655
00:21:55,759 --> 00:22:00,079
on these i could be a lot more clever

656
00:21:58,000 --> 00:22:01,839
furthermore i could just demand things

657
00:22:00,079 --> 00:22:03,918
like that the grid was always powers of

658
00:22:01,839 --> 00:22:04,798
two in which case i just use masking and

659
00:22:03,919 --> 00:22:07,440
shifting

660
00:22:04,798 --> 00:22:08,639
to get the answer but again we don't

661
00:22:07,440 --> 00:22:11,360
suspect that we'll ever

662
00:22:08,640 --> 00:22:12,320
actually call this function in any real

663
00:22:11,359 --> 00:22:15,599
like

664
00:22:12,319 --> 00:22:19,200
sense it's just for debugging

665
00:22:15,599 --> 00:22:21,279
as far as i can think so anything that

666
00:22:19,200 --> 00:22:23,919
gives me the answer

667
00:22:21,279 --> 00:22:25,200
is good enough and in this case that

668
00:22:23,919 --> 00:22:27,038
should give me the answer

669
00:22:25,200 --> 00:22:29,840
so i'm going to call that and i'm going

670
00:22:27,038 --> 00:22:31,440
to push the debug box in this case

671
00:22:29,839 --> 00:22:34,399
and then i'm going to go ahead and say

672
00:22:31,440 --> 00:22:35,840
look let's make that debug box

673
00:22:34,400 --> 00:22:37,919
function a little easier to call by

674
00:22:35,839 --> 00:22:39,279
taking a rectangle

675
00:22:37,919 --> 00:22:41,840
and then we'll see how where we get with

676
00:22:39,279 --> 00:22:41,839
that

677
00:22:42,159 --> 00:22:46,159
okay so this just calls push debug box

678
00:22:44,960 --> 00:22:50,240
solution

679
00:22:46,159 --> 00:22:52,480
box dot min box dot max box color

680
00:22:50,240 --> 00:22:55,839
um and then this instead of taking a v3

681
00:22:52,480 --> 00:22:55,839
is just going to take a rectangle

682
00:22:55,919 --> 00:22:59,280
and so that's just like a semantic

683
00:22:58,240 --> 00:23:01,038
improvement for

684
00:22:59,279 --> 00:23:03,119
my own purposes right it doesn't really

685
00:23:01,038 --> 00:23:06,158
do anything else

686
00:23:03,119 --> 00:23:07,599
okay so now when we look at this uh

687
00:23:06,159 --> 00:23:09,520
what i want to try and do is make it so

688
00:23:07,599 --> 00:23:10,158
that i can you know pick out where the

689
00:23:09,519 --> 00:23:11,918
heck this

690
00:23:10,159 --> 00:23:13,120
debug box actually is and there's a

691
00:23:11,919 --> 00:23:14,559
couple things we're going to have to do

692
00:23:13,119 --> 00:23:16,399
with that like i don't see it right now

693
00:23:14,558 --> 00:23:18,000
right for example

694
00:23:16,400 --> 00:23:19,519
um so what i'm going to have to do first

695
00:23:18,000 --> 00:23:20,960
of all is we have to make sure our debug

696
00:23:19,519 --> 00:23:22,639
line drawing is still working

697
00:23:20,960 --> 00:23:24,798
because we made some changes to that and

698
00:23:22,640 --> 00:23:27,200
we don't even really know if if that's

699
00:23:24,798 --> 00:23:28,240
working properly i also don't actually

700
00:23:27,200 --> 00:23:31,360
know like

701
00:23:28,240 --> 00:23:32,558
what initial grid index 47 if i assume

702
00:23:31,359 --> 00:23:34,319
that's something

703
00:23:32,558 --> 00:23:36,399
we should be able to see anything that's

704
00:23:34,319 --> 00:23:37,599
not larger than the total grid or

705
00:23:36,400 --> 00:23:40,559
whatever right

706
00:23:37,599 --> 00:23:42,000
um oh actually no that we have to make

707
00:23:40,558 --> 00:23:43,200
sure we're at least not on the apron

708
00:23:42,000 --> 00:23:44,798
though because the apron never gets

709
00:23:43,200 --> 00:23:47,120
casted from so

710
00:23:44,798 --> 00:23:48,400
actually we do have to make sure it's

711
00:23:47,119 --> 00:23:50,000
something we could

712
00:23:48,400 --> 00:23:51,600
very well pick a number that never gets

713
00:23:50,000 --> 00:23:54,159
drawn so i'll just set a break point

714
00:23:51,599 --> 00:23:57,278
there to make sure we do actually draw i

715
00:23:54,159 --> 00:23:58,400
didn't think of that um but we also

716
00:23:57,278 --> 00:24:00,000
don't really know if we're still going

717
00:23:58,400 --> 00:24:01,360
to draw that because you know looking i

718
00:24:00,000 --> 00:24:02,240
don't see it it could be that i just

719
00:24:01,359 --> 00:24:04,399
don't see it

720
00:24:02,240 --> 00:24:05,278
but it's also possible that like you

721
00:24:04,400 --> 00:24:06,960
know we

722
00:24:05,278 --> 00:24:08,159
messed up the debug line drawing so we

723
00:24:06,960 --> 00:24:10,319
have to make our debug system work

724
00:24:08,159 --> 00:24:11,600
reliably here

725
00:24:10,319 --> 00:24:13,839
and we have to make sure that anyone's

726
00:24:11,599 --> 00:24:15,278
actually casting this um

727
00:24:13,839 --> 00:24:17,038
while we do that debugging work i'm

728
00:24:15,278 --> 00:24:18,798
going to switch to debug builds

729
00:24:17,038 --> 00:24:21,200
so i'm just going to set this to an od

730
00:24:18,798 --> 00:24:23,359
here and then we're going to

731
00:24:21,200 --> 00:24:25,278
step into there and make sure that it's

732
00:24:23,359 --> 00:24:28,319
you know working at all

733
00:24:25,278 --> 00:24:31,759
uh if i grab

734
00:24:28,319 --> 00:24:35,599
where's the lighting file

735
00:24:31,759 --> 00:24:38,558
hello remedy there we go

736
00:24:35,599 --> 00:24:40,240
so if i take a look at this code here i

737
00:24:38,558 --> 00:24:40,720
just want to know like do we ever get in

738
00:24:40,240 --> 00:24:42,960
here

739
00:24:40,720 --> 00:24:44,558
right because if we never actually get

740
00:24:42,960 --> 00:24:46,480
into this piece of the code

741
00:24:44,558 --> 00:24:47,839
then i know like whoops we must have

742
00:24:46,480 --> 00:24:49,839
picked something on the apron or

743
00:24:47,839 --> 00:24:51,439
something like this right

744
00:24:49,839 --> 00:24:53,119
um and so we're never actually stopping

745
00:24:51,440 --> 00:24:55,840
here so it looks like

746
00:24:53,119 --> 00:24:57,759
uh i gotta go find out like why are we

747
00:24:55,839 --> 00:24:58,798
never hitting this path like why is

748
00:24:57,759 --> 00:25:01,839
initial grid index

749
00:24:58,798 --> 00:25:01,839
always weird

750
00:25:03,119 --> 00:25:06,639
and obviously that could be a bug but

751
00:25:07,759 --> 00:25:11,359
so here's our grid indices here

752
00:25:11,440 --> 00:25:14,558
i guess now that i think about it like

753
00:25:12,880 --> 00:25:17,039
the initial sheet

754
00:25:14,558 --> 00:25:19,038
would be like what 24 by 16 or something

755
00:25:17,038 --> 00:25:21,759
so if we're not above 384

756
00:25:19,038 --> 00:25:23,359
you're not gonna hit here right it's

757
00:25:21,759 --> 00:25:24,798
weird that that's the first one that hit

758
00:25:23,359 --> 00:25:25,439
but that could just be a multi-threading

759
00:25:24,798 --> 00:25:28,798
thing

760
00:25:25,440 --> 00:25:30,558
anyway we know that 466 is

761
00:25:28,798 --> 00:25:32,240
is a valid thing because i just watched

762
00:25:30,558 --> 00:25:33,839
it come through there so let's start

763
00:25:32,240 --> 00:25:35,038
with that and now let's make sure that

764
00:25:33,839 --> 00:25:36,798
we're actually getting back

765
00:25:35,038 --> 00:25:39,759
something reasonable and trying to push

766
00:25:36,798 --> 00:25:43,359
a debug box on

767
00:25:39,759 --> 00:25:45,440
so here we go we should now hit the

768
00:25:43,359 --> 00:25:47,359
inside of this routine properly so if i

769
00:25:45,440 --> 00:25:49,278
remove this one here

770
00:25:47,359 --> 00:25:52,079
we should hopefully get to the inside of

771
00:25:49,278 --> 00:25:52,079
this at some point

772
00:25:52,720 --> 00:25:58,319
there we go and when we uh

773
00:25:56,240 --> 00:26:00,400
ask that thing for the cell bounds we

774
00:25:58,319 --> 00:26:03,759
should get a voxbox here

775
00:26:00,400 --> 00:26:07,278
and you can see that we actually do

776
00:26:03,759 --> 00:26:08,798
right so that's good now there is

777
00:26:07,278 --> 00:26:10,079
something that i don't know if we ever

778
00:26:08,798 --> 00:26:12,798
actually addressed

779
00:26:10,079 --> 00:26:14,158
so in this code when we call push debug

780
00:26:12,798 --> 00:26:17,200
line

781
00:26:14,159 --> 00:26:18,400
um yeah so you can kind of see here like

782
00:26:17,200 --> 00:26:21,840
there's some problems we're going to

783
00:26:18,400 --> 00:26:23,440
have if we actually want to run this

784
00:26:21,839 --> 00:26:25,439
because we are running it multi-threaded

785
00:26:23,440 --> 00:26:27,600
now i'm pretty sure that only

786
00:26:25,440 --> 00:26:29,278
yeah in fact i know for sure so only one

787
00:26:27,599 --> 00:26:32,639
thread can never process

788
00:26:29,278 --> 00:26:34,159
a particular voxel region so i think we

789
00:26:32,640 --> 00:26:34,559
don't have to worry about the fact that

790
00:26:34,159 --> 00:26:38,000
this

791
00:26:34,558 --> 00:26:39,759
is not thread safe you can see here that

792
00:26:38,000 --> 00:26:41,679
we're just incrementing this thing

793
00:26:39,759 --> 00:26:44,079
and we don't use a locked increment so

794
00:26:41,679 --> 00:26:45,519
two people could overwrite each other

795
00:26:44,079 --> 00:26:46,558
i think we're fine there because again

796
00:26:45,519 --> 00:26:48,158
we're not really calling this from

797
00:26:46,558 --> 00:26:50,839
multiple threads

798
00:26:48,159 --> 00:26:52,720
even though multiple threads are running

799
00:26:50,839 --> 00:26:54,639
um

800
00:26:52,720 --> 00:26:55,919
so i don't anticipate an issue there but

801
00:26:54,640 --> 00:26:57,038
i just wanted to point that out because

802
00:26:55,919 --> 00:26:59,120
if we were

803
00:26:57,038 --> 00:27:00,640
going to call it for multiple threads we

804
00:26:59,119 --> 00:27:02,479
would get some dropouts

805
00:27:00,640 --> 00:27:03,840
potentially as two threads hammered on

806
00:27:02,480 --> 00:27:06,079
that value and

807
00:27:03,839 --> 00:27:08,798
didn't sync up right we would want that

808
00:27:06,079 --> 00:27:12,240
to be a locked increment

809
00:27:08,798 --> 00:27:12,960
so if we go ahead and run this program

810
00:27:12,240 --> 00:27:14,319
now

811
00:27:12,960 --> 00:27:17,038
now we want to do is try to make sure we

812
00:27:14,319 --> 00:27:18,558
can actually see that okay so we do

813
00:27:17,038 --> 00:27:20,319
so here's an example of a place we're

814
00:27:18,558 --> 00:27:22,000
casting the rays from and again

815
00:27:20,319 --> 00:27:24,079
remember we've done absolutely no work

816
00:27:22,000 --> 00:27:26,480
yet to make sure that we only cast rays

817
00:27:24,079 --> 00:27:27,918
from voxel cells we actually care about

818
00:27:26,480 --> 00:27:29,679
at the moment we're actually casting

819
00:27:27,919 --> 00:27:31,679
rays from the entire voxel region and

820
00:27:29,679 --> 00:27:33,120
in the future we may decide to try and

821
00:27:31,679 --> 00:27:34,720
limit that but

822
00:27:33,119 --> 00:27:36,558
we might not and the reason that we

823
00:27:34,720 --> 00:27:38,960
might not is simply because

824
00:27:36,558 --> 00:27:39,918
uh we will have cases where we'll be

825
00:27:38,960 --> 00:27:41,038
pretty dense

826
00:27:39,919 --> 00:27:42,320
throughout that region with things

827
00:27:41,038 --> 00:27:43,759
stacked on top of each other and we

828
00:27:42,319 --> 00:27:46,079
don't want the game to like have

829
00:27:43,759 --> 00:27:48,158
too much of a variable frame rate so it

830
00:27:46,079 --> 00:27:50,558
i'm not certain that we'll ever

831
00:27:48,159 --> 00:27:52,159
make that change we may we may not but

832
00:27:50,558 --> 00:27:55,119
that's okay so now we know that we're

833
00:27:52,159 --> 00:27:56,880
able to draw our debug lines properly

834
00:27:55,119 --> 00:27:59,278
so now what i want to do is inter

835
00:27:56,880 --> 00:28:02,799
instrument uh the rest of this code

836
00:27:59,278 --> 00:28:06,558
with uh actual you know

837
00:28:02,798 --> 00:28:08,720
augmentation of the ray casting so

838
00:28:06,558 --> 00:28:10,398
what we're going to do here is first of

839
00:28:08,720 --> 00:28:12,399
all we want to draw

840
00:28:10,398 --> 00:28:14,719
in addition to this debug box i'd like

841
00:28:12,398 --> 00:28:16,079
to draw the actual array and what i'd

842
00:28:14,720 --> 00:28:18,880
like to do is sort of draw

843
00:28:16,079 --> 00:28:20,798
it uh in two parts i don't think i want

844
00:28:18,880 --> 00:28:21,600
to draw it here i'd rather draw it sort

845
00:28:20,798 --> 00:28:25,119
of maybe

846
00:28:21,599 --> 00:28:26,959
um down here more after the hit

847
00:28:25,119 --> 00:28:30,798
detection has occurred

848
00:28:26,960 --> 00:28:33,278
so maybe like more down in here

849
00:28:30,798 --> 00:28:35,839
and what i'd like to do is i'd like to

850
00:28:33,278 --> 00:28:39,278
draw two debug lines

851
00:28:35,839 --> 00:28:39,278
where i show the

852
00:28:39,440 --> 00:28:42,480
in one color i'll show where the ray

853
00:28:41,599 --> 00:28:44,798
starts

854
00:28:42,480 --> 00:28:46,000
to where the ray supposedly hit

855
00:28:44,798 --> 00:28:47,519
something and of course

856
00:28:46,000 --> 00:28:48,880
in this particular case we know it won't

857
00:28:47,519 --> 00:28:49,918
hit anything because that's the bug

858
00:28:48,880 --> 00:28:51,840
we're looking at but

859
00:28:49,919 --> 00:28:52,960
eventually as we go we'll probably one

860
00:28:51,839 --> 00:28:54,879
debug actual

861
00:28:52,960 --> 00:28:56,798
hits as we get closer to having the

862
00:28:54,880 --> 00:28:58,320
routine work properly

863
00:28:56,798 --> 00:29:00,480
so i want to draw one thing from where

864
00:28:58,319 --> 00:29:02,079
the ray starts to where the ray hits and

865
00:29:00,480 --> 00:29:05,440
then one from where the ray hits

866
00:29:02,079 --> 00:29:08,798
out kind of further just so we can see

867
00:29:05,440 --> 00:29:10,558
where the ray actually would go

868
00:29:08,798 --> 00:29:12,398
in case it hits really close and we

869
00:29:10,558 --> 00:29:14,960
can't quite see the ray

870
00:29:12,398 --> 00:29:17,038
like we get like spurious it's i want to

871
00:29:14,960 --> 00:29:19,038
see where it would have cast out to

872
00:29:17,038 --> 00:29:21,359
right so it's just showing us those two

873
00:29:19,038 --> 00:29:21,359
things

874
00:29:22,480 --> 00:29:26,480
all right so let's go ahead and push the

875
00:29:24,480 --> 00:29:28,640
debug line on here and you can kind of

876
00:29:26,480 --> 00:29:30,558
see

877
00:29:28,640 --> 00:29:32,559
that function just allows us to pass two

878
00:29:30,558 --> 00:29:34,558
points in right so we'd say what color

879
00:29:32,558 --> 00:29:37,839
we want and the from and the two

880
00:29:34,558 --> 00:29:41,119
so here's the you know

881
00:29:37,839 --> 00:29:42,000
the ray origin to the hit p right is one

882
00:29:41,119 --> 00:29:44,239
thing we want

883
00:29:42,000 --> 00:29:46,240
and then we want the hit p to like the

884
00:29:44,240 --> 00:29:46,880
far p right so that's what we actually

885
00:29:46,240 --> 00:29:48,798
need

886
00:29:46,880 --> 00:29:50,159
and the colors for that um let's say

887
00:29:48,798 --> 00:29:53,359
that the hit line is like

888
00:29:50,159 --> 00:29:53,360
yellow right

889
00:29:53,519 --> 00:30:00,558
uh and then maybe like we'll do a dim

890
00:29:57,919 --> 00:30:02,080
version of the yellow uh kind of going

891
00:30:00,558 --> 00:30:04,558
far from there or maybe

892
00:30:02,079 --> 00:30:06,839
it's like kind of more of a of a red

893
00:30:04,558 --> 00:30:08,079
line i don't know we'll see more of an

894
00:30:06,839 --> 00:30:09,519
orange

895
00:30:08,079 --> 00:30:12,240
so what we need to do is we need to

896
00:30:09,519 --> 00:30:14,158
compute these and obviously

897
00:30:12,240 --> 00:30:16,079
the grid ray caster is easier because

898
00:30:14,159 --> 00:30:17,278
it's it's casting one ray at a time

899
00:30:16,079 --> 00:30:18,879
which is really nice

900
00:30:17,278 --> 00:30:21,759
because that's the way we structured it

901
00:30:18,880 --> 00:30:24,240
it's one ray against multiple bounds

902
00:30:21,759 --> 00:30:25,038
the old way was multiple rays against

903
00:30:24,240 --> 00:30:26,558
one bound

904
00:30:25,038 --> 00:30:29,440
so this is easier for us to work with

905
00:30:26,558 --> 00:30:31,678
two which is kind of nice

906
00:30:29,440 --> 00:30:33,360
all right so it's ray origin single and

907
00:30:31,679 --> 00:30:35,679
then the hit p

908
00:30:33,359 --> 00:30:37,519
we need to know what the actual p-value

909
00:30:35,679 --> 00:30:40,720
was here

910
00:30:37,519 --> 00:30:43,278
and so i believe if we look

911
00:30:40,720 --> 00:30:45,200
when we terminate out of here you can

912
00:30:43,278 --> 00:30:49,278
see that we have a t-ray value

913
00:30:45,200 --> 00:30:53,038
and the well in fact

914
00:30:49,278 --> 00:30:55,839
when we actually call the probe and

915
00:30:53,038 --> 00:30:57,359
single probe p single that's actually

916
00:30:55,839 --> 00:31:01,038
produced the hit

917
00:30:57,359 --> 00:31:01,759
right um so i think we actually can just

918
00:31:01,038 --> 00:31:03,919
piggyback

919
00:31:01,759 --> 00:31:06,000
on top of that i guess we don't really

920
00:31:03,919 --> 00:31:09,120
have to compute it ourselves

921
00:31:06,000 --> 00:31:12,159
so it'd be probe p single

922
00:31:09,119 --> 00:31:12,158
is actually the

923
00:31:13,759 --> 00:31:18,960
is actually the value at least for now

924
00:31:17,440 --> 00:31:20,880
and then when we want to draw the rest

925
00:31:18,960 --> 00:31:23,038
of it we just draw from there to

926
00:31:20,880 --> 00:31:27,200
something like that's just far out

927
00:31:23,038 --> 00:31:30,558
so like far out man so you know 50 units

928
00:31:27,200 --> 00:31:35,120
or something out in the uh

929
00:31:30,558 --> 00:31:35,119
direction of the of the ray

930
00:31:36,720 --> 00:31:40,079
i don't actually know what the ray

931
00:31:39,119 --> 00:31:43,119
direction

932
00:31:40,079 --> 00:31:47,759
is here it's going to be

933
00:31:43,119 --> 00:31:50,239
so ray d single is the actual value

934
00:31:47,759 --> 00:31:51,519
so that's just me trying to draw the ray

935
00:31:50,240 --> 00:31:53,759
and so now what i should

936
00:31:51,519 --> 00:31:55,200
see is if i run this i should see the

937
00:31:53,759 --> 00:31:58,640
rays casting out

938
00:31:55,200 --> 00:32:00,880
but only from that particular one yeah

939
00:31:58,640 --> 00:32:02,559
so here you can kind of see those going

940
00:32:00,880 --> 00:32:02,960
now one really interesting thing you can

941
00:32:02,558 --> 00:32:05,839
see

942
00:32:02,960 --> 00:32:07,038
is we obviously screwed up right right

943
00:32:05,839 --> 00:32:09,278
off the bat

944
00:32:07,038 --> 00:32:10,960
and this is why i say it's so good to

945
00:32:09,278 --> 00:32:13,200
have visualizations

946
00:32:10,960 --> 00:32:14,640
you can see like right off the bat we're

947
00:32:13,200 --> 00:32:18,960
only casting

948
00:32:14,640 --> 00:32:21,200
rays in one sort of conical direction

949
00:32:18,960 --> 00:32:21,200
and

950
00:32:22,079 --> 00:32:25,439
that was definitely not part of the

951
00:32:24,558 --> 00:32:28,240
algorithm

952
00:32:25,440 --> 00:32:29,840
so we're not we're supposed to be seeing

953
00:32:28,240 --> 00:32:33,200
a full sphere here

954
00:32:29,839 --> 00:32:35,199
of things happening and we're

955
00:32:33,200 --> 00:32:36,798
not seeing that at all we're seeing some

956
00:32:35,200 --> 00:32:41,120
kind of a of a

957
00:32:36,798 --> 00:32:45,839
like you know restricted to only

958
00:32:41,119 --> 00:32:45,839
kind of hard to say it looks like

959
00:32:46,480 --> 00:32:50,000
looks like maybe we're getting kind of

960
00:32:48,398 --> 00:32:53,199
like only positive

961
00:32:50,000 --> 00:32:53,200
directions in

962
00:32:53,519 --> 00:32:58,960
one in in y but

963
00:32:56,880 --> 00:33:00,799
you know it's really hard to quite read

964
00:32:58,960 --> 00:33:04,000
what the bug is there but you can see

965
00:33:00,798 --> 00:33:05,759
like very clearly we've got a bug um

966
00:33:04,000 --> 00:33:07,278
where we're not actually getting

967
00:33:05,759 --> 00:33:10,720
spherical results here

968
00:33:07,278 --> 00:33:11,278
right and we should so before we go any

969
00:33:10,720 --> 00:33:13,519
further

970
00:33:11,278 --> 00:33:25,038
it's pretty easy for us to start looking

971
00:33:13,519 --> 00:33:29,278
at what that problem is

972
00:33:25,038 --> 00:33:30,240
okay um and remember we're drawing these

973
00:33:29,278 --> 00:33:31,839
rays

974
00:33:30,240 --> 00:33:33,839
no matter what so when we come in

975
00:33:31,839 --> 00:33:35,839
through here like we don't care

976
00:33:33,839 --> 00:33:37,918
whether this loop terminated with a hit

977
00:33:35,839 --> 00:33:39,918
or terminated on cost or terminated

978
00:33:37,919 --> 00:33:42,720
because it ran out of space

979
00:33:39,919 --> 00:33:44,000
in the grid we don't care we're always

980
00:33:42,720 --> 00:33:46,399
drawing it so

981
00:33:44,000 --> 00:33:47,278
in theory we should see the full sphere

982
00:33:46,398 --> 00:33:49,759
of casting

983
00:33:47,278 --> 00:33:52,240
because we draw all the rays that there

984
00:33:49,759 --> 00:33:55,519
are from this particular voxel

985
00:33:52,240 --> 00:33:57,278
and we're totally not seeing them right

986
00:33:55,519 --> 00:33:58,798
so we know there's something bogus going

987
00:33:57,278 --> 00:34:00,880
on

988
00:33:58,798 --> 00:34:02,319
so we have a couple of different things

989
00:34:00,880 --> 00:34:04,799
we could look at

990
00:34:02,319 --> 00:34:06,000
if i look at the sphere generator that's

991
00:34:04,798 --> 00:34:09,918
obviously the first thing that

992
00:34:06,000 --> 00:34:11,838
could be busted and if i go look at how

993
00:34:09,918 --> 00:34:13,440
it's actually outputting things i can

994
00:34:11,838 --> 00:34:16,559
just maybe start to look and see if

995
00:34:13,440 --> 00:34:17,918
there's any uh obvious errors here

996
00:34:16,559 --> 00:34:19,599
so you can see that the way this is

997
00:34:17,918 --> 00:34:21,838
working is we step through the

998
00:34:19,599 --> 00:34:23,679
octahedron

999
00:34:21,838 --> 00:34:25,358
and we look at the number of rays per

1000
00:34:23,679 --> 00:34:28,000
octahedron

1001
00:34:25,358 --> 00:34:28,398
that we want and we just output those in

1002
00:34:28,000 --> 00:34:30,159
order

1003
00:34:28,398 --> 00:34:32,480
right so we just kind of go through and

1004
00:34:30,159 --> 00:34:33,440
we output all of the octahedrons kind of

1005
00:34:32,480 --> 00:34:35,838
just packed

1006
00:34:33,440 --> 00:34:35,838
right

1007
00:34:40,719 --> 00:34:45,519
um and there's a couple of different

1008
00:34:43,440 --> 00:34:48,320
ways that we could be messing this up

1009
00:34:45,519 --> 00:34:49,199
one is that it could be that like none

1010
00:34:48,320 --> 00:34:52,399
of the rays

1011
00:34:49,199 --> 00:34:54,239
in this entire array are

1012
00:34:52,398 --> 00:34:56,159
actually pointing in the correct

1013
00:34:54,239 --> 00:34:58,559
directions right like there's just

1014
00:34:56,159 --> 00:35:00,400
they're all sort of pointing down in

1015
00:34:58,559 --> 00:35:01,519
that sort of one direction and so it

1016
00:35:00,400 --> 00:35:03,119
doesn't matter where

1017
00:35:01,519 --> 00:35:05,119
you're sampling in the array you're

1018
00:35:03,119 --> 00:35:07,119
always going to get something pointing

1019
00:35:05,119 --> 00:35:09,599
in that one sort of general conical

1020
00:35:07,119 --> 00:35:09,599
direction

1021
00:35:10,320 --> 00:35:13,359
that's possible but the other thing

1022
00:35:12,239 --> 00:35:14,719
that's possible

1023
00:35:13,358 --> 00:35:16,639
that we have to consider while we're

1024
00:35:14,719 --> 00:35:18,319
doing this is that maybe there are

1025
00:35:16,639 --> 00:35:19,920
correctly distributed arrays in this

1026
00:35:18,320 --> 00:35:22,800
array and

1027
00:35:19,920 --> 00:35:23,200
we're actually only sampling a few of

1028
00:35:22,800 --> 00:35:26,240
them

1029
00:35:23,199 --> 00:35:27,759
so we've got the range wrong right

1030
00:35:26,239 --> 00:35:29,358
so there's two ways we could have

1031
00:35:27,760 --> 00:35:31,280
screwed this up and so we want to kind

1032
00:35:29,358 --> 00:35:32,559
of look at both of them now since this

1033
00:35:31,280 --> 00:35:35,440
produces an inl

1034
00:35:32,559 --> 00:35:36,880
file i should be able to go in here and

1035
00:35:35,440 --> 00:35:40,159
look and say all right so

1036
00:35:36,880 --> 00:35:42,800
here's the total light sample direction

1037
00:35:40,159 --> 00:35:43,199
if i look through these i should see a

1038
00:35:42,800 --> 00:35:46,640
fair

1039
00:35:43,199 --> 00:35:49,358
distribution of signs

1040
00:35:46,639 --> 00:35:52,239
and specifically for why i should see

1041
00:35:49,358 --> 00:35:54,639
like a distribution of signs

1042
00:35:52,239 --> 00:35:56,799
it didn't look like i was getting that

1043
00:35:54,639 --> 00:35:59,039
and when i spin through here i do

1044
00:35:56,800 --> 00:35:59,920
you know i do see a good balance of

1045
00:35:59,039 --> 00:36:03,759
signs in here

1046
00:35:59,920 --> 00:36:05,680
like i can't tell from visual inspection

1047
00:36:03,760 --> 00:36:07,119
whether these are properly distributed

1048
00:36:05,679 --> 00:36:08,879
around the sphere

1049
00:36:07,119 --> 00:36:10,880
according to the octahedral map but what

1050
00:36:08,880 --> 00:36:14,079
i can tell you is that

1051
00:36:10,880 --> 00:36:15,119
there do exist some positive and

1052
00:36:14,079 --> 00:36:18,160
negative y's

1053
00:36:15,119 --> 00:36:20,160
right you can see them very clearly as i

1054
00:36:18,159 --> 00:36:23,440
kind of move through here

1055
00:36:20,159 --> 00:36:24,319
and so if i was seeing a biased

1056
00:36:23,440 --> 00:36:27,039
distribution

1057
00:36:24,320 --> 00:36:28,960
i wouldn't necessarily be able to say

1058
00:36:27,039 --> 00:36:32,320
that it was broken

1059
00:36:28,960 --> 00:36:33,199
um or correct just by in visual

1060
00:36:32,320 --> 00:36:35,838
inspection

1061
00:36:33,199 --> 00:36:36,719
but when i look at this i can see that

1062
00:36:35,838 --> 00:36:40,078
i'm literally

1063
00:36:36,719 --> 00:36:41,279
never casting anything out in this

1064
00:36:40,079 --> 00:36:44,640
direction

1065
00:36:41,280 --> 00:36:46,480
so i pretty much know that it's not just

1066
00:36:44,639 --> 00:36:46,879
the values in the array that that are

1067
00:36:46,480 --> 00:36:49,440
wrong

1068
00:36:46,880 --> 00:36:50,720
there's something else wrong and it

1069
00:36:49,440 --> 00:36:52,639
could still be that the array is

1070
00:36:50,719 --> 00:36:54,239
constructed improperly like perhaps

1071
00:36:52,639 --> 00:36:56,480
there's too many of a certain kind of

1072
00:36:54,239 --> 00:36:59,199
value and we're only sampling from one

1073
00:36:56,480 --> 00:37:00,800
part of it or something like this but we

1074
00:36:59,199 --> 00:37:02,559
at least know that the values in the

1075
00:37:00,800 --> 00:37:04,560
array do contain

1076
00:37:02,559 --> 00:37:08,000
other directions and we're just not

1077
00:37:04,559 --> 00:37:10,400
actually using those directions

1078
00:37:08,000 --> 00:37:12,159
let's take a look and see what we're

1079
00:37:10,400 --> 00:37:12,800
actually getting here for that and also

1080
00:37:12,159 --> 00:37:14,239
by the way

1081
00:37:12,800 --> 00:37:15,359
you know when i look at this there's

1082
00:37:14,239 --> 00:37:16,000
another thing that i wanted to kind of

1083
00:37:15,358 --> 00:37:18,799
point out

1084
00:37:16,000 --> 00:37:18,800
as we're going here

1085
00:37:19,119 --> 00:37:22,320
so one kind of bizarre thing if we look

1086
00:37:21,599 --> 00:37:25,119
at this

1087
00:37:22,320 --> 00:37:26,320
i'm not sure why we're getting like a

1088
00:37:25,119 --> 00:37:29,200
black

1089
00:37:26,320 --> 00:37:29,200
versus a yellow

1090
00:37:32,639 --> 00:37:40,078
that's just really kind of

1091
00:37:36,000 --> 00:37:42,880
nonsensical to me because i put in

1092
00:37:40,079 --> 00:37:43,440
you know a totally valid color value

1093
00:37:42,880 --> 00:37:47,599
here

1094
00:37:43,440 --> 00:37:51,838
but i'm not really getting one

1095
00:37:47,599 --> 00:37:51,838
so i'm not sure why that

1096
00:37:52,239 --> 00:37:57,279
oh i know why uh so

1097
00:37:55,519 --> 00:37:58,559
that may well just be because of

1098
00:37:57,280 --> 00:38:02,480
lighting

1099
00:37:58,559 --> 00:38:03,759
i suppose so if i look at where this is

1100
00:38:02,480 --> 00:38:05,679
yeah you know what that probably is what

1101
00:38:03,760 --> 00:38:08,640
it is so

1102
00:38:05,679 --> 00:38:09,598
this may just be because the lighting

1103
00:38:08,639 --> 00:38:12,960
itself

1104
00:38:09,599 --> 00:38:14,400
is right you can see i'm i'm crossing

1105
00:38:12,960 --> 00:38:17,679
out into the unlit

1106
00:38:14,400 --> 00:38:18,720
region right so that's why the lighting

1107
00:38:17,679 --> 00:38:21,039
changes there

1108
00:38:18,719 --> 00:38:22,559
that's what's actually happening right

1109
00:38:21,039 --> 00:38:23,838
um

1110
00:38:22,559 --> 00:38:26,239
which is kind of just yet another

1111
00:38:23,838 --> 00:38:28,400
indication that we probably need to go

1112
00:38:26,239 --> 00:38:30,159
and actually put lighting first on and

1113
00:38:28,400 --> 00:38:31,760
off into the renderer

1114
00:38:30,159 --> 00:38:46,159
because we don't have that ability right

1115
00:38:31,760 --> 00:38:49,280
now everything always gets lit

1116
00:38:46,159 --> 00:38:51,358
okay so what i'd like to do now is take

1117
00:38:49,280 --> 00:38:51,680
a closer look at why we're getting that

1118
00:38:51,358 --> 00:38:54,799
but

1119
00:38:51,679 --> 00:38:58,239
that particular bug um

1120
00:38:54,800 --> 00:39:00,160
and you know i guess it it's

1121
00:38:58,239 --> 00:39:03,118
it's an important bug for us to do first

1122
00:39:00,159 --> 00:39:04,719
as well because if we do want to use

1123
00:39:03,119 --> 00:39:06,240
if we were gonna look at why this thing

1124
00:39:04,719 --> 00:39:08,959
was never hitting anything well what

1125
00:39:06,239 --> 00:39:10,959
it actually isn't we need this thing to

1126
00:39:08,960 --> 00:39:12,480
cast a ray up in that direction before

1127
00:39:10,960 --> 00:39:13,599
we can figure out why it's not adding

1128
00:39:12,480 --> 00:39:17,838
anything right

1129
00:39:13,599 --> 00:39:21,200
um so so actually for this particular

1130
00:39:17,838 --> 00:39:23,279
grid cell we happen to pick at random

1131
00:39:21,199 --> 00:39:24,719
the reason it's not hitting anything is

1132
00:39:23,280 --> 00:39:26,480
because it actually isn't

1133
00:39:24,719 --> 00:39:28,799
like it's actually getting the correct

1134
00:39:26,480 --> 00:39:30,800
answer oddly enough

1135
00:39:28,800 --> 00:39:32,480
so let's try to figure out what's going

1136
00:39:30,800 --> 00:39:35,280
on if we

1137
00:39:32,480 --> 00:39:38,400
look at where these rays are coming from

1138
00:39:35,280 --> 00:39:40,800
inside the grid raycast routine

1139
00:39:38,400 --> 00:39:41,680
we're actually feeding them using this

1140
00:39:40,800 --> 00:39:45,280
sample dir

1141
00:39:41,679 --> 00:39:46,239
here right and the way this works is the

1142
00:39:45,280 --> 00:39:49,440
sample direction

1143
00:39:46,239 --> 00:39:50,559
comes out of this octahedral table

1144
00:39:49,440 --> 00:39:53,599
and then what we're doing is we're

1145
00:39:50,559 --> 00:39:53,599
looping over these

1146
00:39:54,838 --> 00:39:57,838
now

1147
00:39:58,400 --> 00:40:02,240
i mean if i look at what's going on

1148
00:40:00,079 --> 00:40:06,160
there i can sort of almost already see

1149
00:40:02,239 --> 00:40:07,919
that it seems a little bit broken um

1150
00:40:06,159 --> 00:40:11,358
because if you come through here

1151
00:40:07,920 --> 00:40:14,559
remember we're going to be casting

1152
00:40:11,358 --> 00:40:16,000
four rays at a time and so

1153
00:40:14,559 --> 00:40:19,119
we're going to be taking the sample

1154
00:40:16,000 --> 00:40:22,400
direction and indexing four of them

1155
00:40:19,119 --> 00:40:24,800
then this passes

1156
00:40:22,400 --> 00:40:25,680
just that same thing plus one which is

1157
00:40:24,800 --> 00:40:28,640
not going to cut it

1158
00:40:25,679 --> 00:40:29,358
right so for sampling four arrays in the

1159
00:40:28,639 --> 00:40:30,879
grid cast

1160
00:40:29,358 --> 00:40:32,559
that needs to be a plus four and this

1161
00:40:30,880 --> 00:40:35,119
would need to be a plus eight

1162
00:40:32,559 --> 00:40:37,358
right because that's the actual striding

1163
00:40:35,119 --> 00:40:38,800
that we're using there

1164
00:40:37,358 --> 00:40:40,719
now that might completely explain the

1165
00:40:38,800 --> 00:40:42,318
bug actually let's see

1166
00:40:40,719 --> 00:40:44,480
because that would be enough right there

1167
00:40:42,318 --> 00:40:46,800
to screw it up

1168
00:40:44,480 --> 00:40:47,760
okay so now if we look at it we're

1169
00:40:46,800 --> 00:40:50,720
seeing a much

1170
00:40:47,760 --> 00:40:51,680
more sensible uh ray casting

1171
00:40:50,719 --> 00:40:55,199
distribution

1172
00:40:51,679 --> 00:40:56,960
right um there's some issues here and i

1173
00:40:55,199 --> 00:40:57,759
think these are to do with our generator

1174
00:40:56,960 --> 00:41:00,079
table just

1175
00:40:57,760 --> 00:41:01,680
uh running out of picks and it's

1176
00:41:00,079 --> 00:41:03,119
probably producing the non-jittered

1177
00:41:01,679 --> 00:41:06,399
version there's actually to do

1178
00:41:03,119 --> 00:41:08,240
in there for it so you can see there's a

1179
00:41:06,400 --> 00:41:10,720
little bit of bias in a couple

1180
00:41:08,239 --> 00:41:11,838
of these rays that we probably would

1181
00:41:10,719 --> 00:41:15,279
want to get rid of

1182
00:41:11,838 --> 00:41:18,799
um but on the whole it it now

1183
00:41:15,280 --> 00:41:20,160
looks relatively good i mean that's not

1184
00:41:18,800 --> 00:41:23,119
a horrible distribution

1185
00:41:20,159 --> 00:41:24,399
of rays you know maybe there's some

1186
00:41:23,119 --> 00:41:26,480
things we would want to change about

1187
00:41:24,400 --> 00:41:29,680
that but on the whole

1188
00:41:26,480 --> 00:41:30,800
that's okay and so now we just need to

1189
00:41:29,679 --> 00:41:35,679
start wondering

1190
00:41:30,800 --> 00:41:37,920
why do these rays never hit anything

1191
00:41:35,679 --> 00:41:39,118
and in the region where we actually have

1192
00:41:37,920 --> 00:41:42,318
full lighting happening

1193
00:41:39,119 --> 00:41:44,240
you can actually kind of see uh that

1194
00:41:42,318 --> 00:41:45,759
we're pretty clearly not hitting

1195
00:41:44,239 --> 00:41:47,759
anything either because

1196
00:41:45,760 --> 00:41:50,560
these are still bright yellow going up

1197
00:41:47,760 --> 00:41:53,680
through here so even before we've added

1198
00:41:50,559 --> 00:41:54,880
any of the other debug rendering stuff

1199
00:41:53,679 --> 00:41:57,358
that we want to add

1200
00:41:54,880 --> 00:41:59,358
we can kind of see very quickly that

1201
00:41:57,358 --> 00:42:03,759
this isn't working

1202
00:41:59,358 --> 00:42:07,119
that should produce a pretty obvious

1203
00:42:03,760 --> 00:42:09,280
result so what i'd like to do now is

1204
00:42:07,119 --> 00:42:10,160
i'd like to just take a look and see if

1205
00:42:09,280 --> 00:42:14,319
there's an

1206
00:42:10,159 --> 00:42:17,519
easy way for me to sort of

1207
00:42:14,318 --> 00:42:18,960
limit the number of rays that we're

1208
00:42:17,519 --> 00:42:20,079
actually casting and what i'm going to

1209
00:42:18,960 --> 00:42:23,199
do here is

1210
00:42:20,079 --> 00:42:24,640
maybe just control say the direction a

1211
00:42:23,199 --> 00:42:27,118
little bit more

1212
00:42:24,639 --> 00:42:29,759
so what i'm going to do is say look if

1213
00:42:27,119 --> 00:42:33,039
we're debugging

1214
00:42:29,760 --> 00:42:34,560
i want to take uh the inner product of

1215
00:42:33,039 --> 00:42:36,400
the array direction

1216
00:42:34,559 --> 00:42:37,759
uh and i guess i kind of need to do this

1217
00:42:36,400 --> 00:42:38,880
a little bit further down now that i

1218
00:42:37,760 --> 00:42:42,880
think about it

1219
00:42:38,880 --> 00:42:42,880
so i probably want to do that in here

1220
00:42:43,280 --> 00:42:48,800
and i probably also want to

1221
00:42:55,599 --> 00:43:01,519
so i guess i'm going to call this ray

1222
00:42:58,960 --> 00:43:01,519
debugging

1223
00:43:02,318 --> 00:43:06,960
and what i'd like to do is i'd like to

1224
00:43:04,159 --> 00:43:09,118
make the drawing of the ray itself

1225
00:43:06,960 --> 00:43:11,358
be specific to this particular raid

1226
00:43:09,119 --> 00:43:13,358
direction basically

1227
00:43:11,358 --> 00:43:15,759
so when we get down here i'm going to

1228
00:43:13,358 --> 00:43:18,078
look at ray debugging as opposed to

1229
00:43:15,760 --> 00:43:19,599
the regular debugging flag and that way

1230
00:43:18,079 --> 00:43:21,039
i can limit the number of rays and the

1231
00:43:19,599 --> 00:43:22,240
way i'm going to do that is right now i

1232
00:43:21,039 --> 00:43:23,519
kind of want to look at rays that are

1233
00:43:22,239 --> 00:43:25,439
casting upward

1234
00:43:23,519 --> 00:43:29,519
so i'm going to say that like if i take

1235
00:43:25,440 --> 00:43:29,519
the inner product of the ray direction

1236
00:43:29,838 --> 00:43:33,920
and i guess i really don't even have to

1237
00:43:31,599 --> 00:43:37,039
quite do that maybe i'll just say look

1238
00:43:33,920 --> 00:43:38,639
let's look at the z and if the z is

1239
00:43:37,039 --> 00:43:40,480
greater than like 9

1240
00:43:38,639 --> 00:43:42,559
we know this is a fairly straight up

1241
00:43:40,480 --> 00:43:45,920
cast and we'll look at that

1242
00:43:42,559 --> 00:43:45,920
right um

1243
00:43:46,800 --> 00:43:49,760
let's do it like this

1244
00:43:49,920 --> 00:43:53,280
so this is just me limiting the rays i'm

1245
00:43:52,159 --> 00:43:55,358
looking at

1246
00:43:53,280 --> 00:43:58,319
a little bit more and so you can kind of

1247
00:43:55,358 --> 00:44:00,078
see now if i go look at this

1248
00:43:58,318 --> 00:44:01,920
i'm just kind of looking at the rays

1249
00:44:00,079 --> 00:44:05,519
that shoot upward

1250
00:44:01,920 --> 00:44:09,119
and so that just gives me a better

1251
00:44:05,519 --> 00:44:11,039
you know a more focused way of looking

1252
00:44:09,119 --> 00:44:14,240
at how these things are being cast

1253
00:44:11,039 --> 00:44:14,639
right and now what i'm going to need to

1254
00:44:14,239 --> 00:44:17,919
do

1255
00:44:14,639 --> 00:44:20,838
is add a little bit more debugging

1256
00:44:17,920 --> 00:44:22,480
in here so i can see what we're actually

1257
00:44:20,838 --> 00:44:25,358
doing

1258
00:44:22,480 --> 00:44:26,639
so for starters i'm going to expand on

1259
00:44:25,358 --> 00:44:28,960
this code here

1260
00:44:26,639 --> 00:44:31,519
where we're actually drawing boxes to

1261
00:44:28,960 --> 00:44:34,639
draw which boxes we visit

1262
00:44:31,519 --> 00:44:37,759
so when we look at

1263
00:44:34,639 --> 00:44:39,199
this when we get these nodes here

1264
00:44:37,760 --> 00:44:40,960
the lighting spatial grid node is

1265
00:44:39,199 --> 00:44:41,919
looking up off of this grid index so

1266
00:44:40,960 --> 00:44:44,240
what i'd like to do

1267
00:44:41,920 --> 00:44:45,838
is i'd like to just draw for every time

1268
00:44:44,239 --> 00:44:47,439
that we enter here

1269
00:44:45,838 --> 00:44:50,880
if we're doing ray debugging on this

1270
00:44:47,440 --> 00:44:54,880
particular array i'm going to grab

1271
00:44:50,880 --> 00:44:57,200
the voxbox for the grid index we're on

1272
00:44:54,880 --> 00:45:00,240
and i'm going to draw that as like you

1273
00:44:57,199 --> 00:45:00,239
know a candidate

1274
00:45:03,519 --> 00:45:07,838
and so what this is designed to do is

1275
00:45:05,760 --> 00:45:11,680
this is designed to tell me

1276
00:45:07,838 --> 00:45:15,039
are we walking the grid at all correctly

1277
00:45:11,679 --> 00:45:15,598
right and so one of the things that you

1278
00:45:15,039 --> 00:45:19,358
can see

1279
00:45:15,599 --> 00:45:21,039
here is right off the bat like

1280
00:45:19,358 --> 00:45:23,279
unless i just did something stupid in

1281
00:45:21,039 --> 00:45:27,358
that code i'm not

1282
00:45:23,280 --> 00:45:30,800
getting any actual drawing

1283
00:45:27,358 --> 00:45:32,318
so what i'd like to do is take a look at

1284
00:45:30,800 --> 00:45:34,560
this piece of code

1285
00:45:32,318 --> 00:45:35,519
and find out why i'm never getting in

1286
00:45:34,559 --> 00:45:37,358
here

1287
00:45:35,519 --> 00:45:39,358
because we know that ray debugging is

1288
00:45:37,358 --> 00:45:41,598
set to true sometimes because i see the

1289
00:45:39,358 --> 00:45:44,960
rays getting drawn

1290
00:45:41,599 --> 00:45:48,720
and so either this code

1291
00:45:44,960 --> 00:45:48,720
is somehow erroneous

1292
00:45:48,960 --> 00:45:52,079
or we're always terminating this loop

1293
00:45:51,039 --> 00:45:55,279
immediately

1294
00:45:52,079 --> 00:45:56,640
meaning we never like go past the

1295
00:45:55,280 --> 00:46:00,319
starting node

1296
00:45:56,639 --> 00:46:03,279
right um

1297
00:46:00,318 --> 00:46:04,719
so let's take a look at what happens i

1298
00:46:03,280 --> 00:46:08,319
could also do sort of

1299
00:46:04,719 --> 00:46:10,480
one other thing here uh which is i could

1300
00:46:08,318 --> 00:46:13,119
choose to draw the starting node

1301
00:46:10,480 --> 00:46:14,400
a little bit separately a little bit

1302
00:46:13,119 --> 00:46:16,480
differently

1303
00:46:14,400 --> 00:46:17,920
so let's say for example that i do an

1304
00:46:16,480 --> 00:46:21,519
add radius to

1305
00:46:17,920 --> 00:46:24,960
on this particular voxbox and i just say

1306
00:46:21,519 --> 00:46:28,480
you know what let's go ahead and

1307
00:46:24,960 --> 00:46:34,400
shrink it in a little bit by you know

1308
00:46:28,480 --> 00:46:34,400
some by you know a quarter unit

1309
00:46:34,559 --> 00:46:38,078
and that would allow me to see whether

1310
00:46:36,000 --> 00:46:40,159
we're even looking at the first one

1311
00:46:38,079 --> 00:46:42,640
just just visually i can see right away

1312
00:46:40,159 --> 00:46:44,559
like are we even looking at it

1313
00:46:42,639 --> 00:46:45,679
and so what you can see here is when

1314
00:46:44,559 --> 00:46:48,318
we're drawing this

1315
00:46:45,679 --> 00:46:50,399
you can see pretty clearly that i'm

1316
00:46:48,318 --> 00:46:53,920
getting both of those two things

1317
00:46:50,400 --> 00:46:57,920
so i'm drawing both the

1318
00:46:53,920 --> 00:47:00,240
um the starting box

1319
00:46:57,920 --> 00:47:01,760
and i'm drawing that box again in here

1320
00:47:00,239 --> 00:47:04,239
so we do

1321
00:47:01,760 --> 00:47:05,359
correctly come in to this piece of the

1322
00:47:04,239 --> 00:47:08,879
code

1323
00:47:05,358 --> 00:47:12,239
and what's obviously happening here is

1324
00:47:08,880 --> 00:47:13,280
somehow we're always terminating

1325
00:47:12,239 --> 00:47:16,719
immediately so

1326
00:47:13,280 --> 00:47:18,640
in the actual square we start from

1327
00:47:16,719 --> 00:47:20,239
we're terminating and we're terminating

1328
00:47:18,639 --> 00:47:24,239
with a no hit

1329
00:47:20,239 --> 00:47:27,598
so for some reason we we terminate

1330
00:47:24,239 --> 00:47:30,799
uh prematurely for sure and i'm not sure

1331
00:47:27,599 --> 00:47:30,800
what that is right like

1332
00:47:36,838 --> 00:47:39,838
um

1333
00:47:48,159 --> 00:47:51,440
so yeah i i don't really know i'm just

1334
00:47:50,079 --> 00:47:52,000
going to step in it because it's you

1335
00:47:51,440 --> 00:47:54,159
know it's pretty

1336
00:47:52,000 --> 00:47:55,440
easy now for me to do that so that's

1337
00:47:54,159 --> 00:47:57,838
what i'm going to do

1338
00:47:55,440 --> 00:47:59,358
but yeah i'm not sure why we're getting

1339
00:47:57,838 --> 00:48:00,400
that result but it should be pretty

1340
00:47:59,358 --> 00:48:03,519
obvious hopefully

1341
00:48:00,400 --> 00:48:06,720
if we just step in here

1342
00:48:03,519 --> 00:48:08,639
and uh and check

1343
00:48:06,719 --> 00:48:09,759
so let's go to the first time that this

1344
00:48:08,639 --> 00:48:11,440
happens

1345
00:48:09,760 --> 00:48:13,280
uh you know and one of the problems

1346
00:48:11,440 --> 00:48:15,200
we're gonna have i should probably

1347
00:48:13,280 --> 00:48:17,359
switch this up is this is running

1348
00:48:15,199 --> 00:48:18,078
multi-threaded it's gonna be a real pain

1349
00:48:17,358 --> 00:48:19,598
in the butt

1350
00:48:18,079 --> 00:48:21,440
um in fact you can see it being a pain

1351
00:48:19,599 --> 00:48:24,880
in the bet right there

1352
00:48:21,440 --> 00:48:28,318
so i may need to go uh to the

1353
00:48:24,880 --> 00:48:30,880
internal core uh here and turn off the

1354
00:48:28,318 --> 00:48:33,519
multi-threading

1355
00:48:30,880 --> 00:48:35,039
at the moment um so you can see this

1356
00:48:33,519 --> 00:48:38,159
lighting cue value here

1357
00:48:35,039 --> 00:48:39,119
if i don't pass a lighting queue to

1358
00:48:38,159 --> 00:48:42,159
internal core

1359
00:48:39,119 --> 00:48:44,880
it won't run multithreaded so

1360
00:48:42,159 --> 00:48:46,000
if i want to here right instead of

1361
00:48:44,880 --> 00:48:49,838
passing lighting queue

1362
00:48:46,000 --> 00:48:49,838
i can pass a zero

1363
00:48:50,880 --> 00:48:54,559
that would allow me to not deal with the

1364
00:48:53,358 --> 00:48:58,000
whole like

1365
00:48:54,559 --> 00:49:03,839
n billion threads are coming through

1366
00:48:58,000 --> 00:49:03,838
this path right

1367
00:49:08,159 --> 00:49:10,558
although

1368
00:49:11,599 --> 00:49:16,400
it is a little odd because no other

1369
00:49:14,639 --> 00:49:19,199
thread should have had raid debugging

1370
00:49:16,400 --> 00:49:19,200
set to true

1371
00:49:21,039 --> 00:49:32,159
so that's a bit weird to say the least

1372
00:49:30,480 --> 00:49:33,599
so that makes me a little nervous

1373
00:49:32,159 --> 00:49:34,159
because that shouldn't actually be the

1374
00:49:33,599 --> 00:49:37,200
case

1375
00:49:34,159 --> 00:49:38,000
um it still would have been a pain in

1376
00:49:37,199 --> 00:49:41,279
the ass to

1377
00:49:38,000 --> 00:49:41,838
sorry pain in the butt to debug but i

1378
00:49:41,280 --> 00:49:45,200
wouldn't

1379
00:49:41,838 --> 00:49:47,599
actually have suspected what i saw to be

1380
00:49:45,199 --> 00:49:50,000
true which was that

1381
00:49:47,599 --> 00:49:50,720
i wouldn't have expected to see a second

1382
00:49:50,000 --> 00:49:53,440
thread

1383
00:49:50,719 --> 00:49:54,719
hit the ray debug unless that's not what

1384
00:49:53,440 --> 00:49:56,838
actually happened

1385
00:49:54,719 --> 00:49:58,799
[Music]

1386
00:49:56,838 --> 00:50:02,078
um

1387
00:49:58,800 --> 00:50:03,200
so that's a little concerning and we may

1388
00:50:02,079 --> 00:50:03,599
want to keep that in the back of our

1389
00:50:03,199 --> 00:50:04,879
minds

1390
00:50:03,599 --> 00:50:06,160
something to investigate in a second but

1391
00:50:04,880 --> 00:50:07,519
i want to keep investigating i was going

1392
00:50:06,159 --> 00:50:10,558
to investigate first

1393
00:50:07,519 --> 00:50:12,000
just so i can see so when we step

1394
00:50:10,559 --> 00:50:14,880
through here we see that there are no

1395
00:50:12,000 --> 00:50:15,920
leaves and that's exactly what we would

1396
00:50:14,880 --> 00:50:20,000
expect because

1397
00:50:15,920 --> 00:50:20,000
there shouldn't be any leaves right

1398
00:50:20,880 --> 00:50:26,480
if there were leaves in this particular

1399
00:50:24,719 --> 00:50:27,919
box that would be odd because we just

1400
00:50:26,480 --> 00:50:29,039
looked at it and there was no geometry

1401
00:50:27,920 --> 00:50:30,720
in there so there shouldn't be anything

1402
00:50:29,039 --> 00:50:32,400
to test against

1403
00:50:30,719 --> 00:50:33,679
we also don't expect something hit to

1404
00:50:32,400 --> 00:50:35,039
happen because we didn't hit something

1405
00:50:33,679 --> 00:50:37,039
so that's good

1406
00:50:35,039 --> 00:50:41,838
and then it looks like the cost metric

1407
00:50:37,039 --> 00:50:41,838
has decked down to zero

1408
00:50:44,079 --> 00:50:52,000
oh all right that's just a typo

1409
00:50:48,400 --> 00:50:52,559
um so this should actually be if cost

1410
00:50:52,000 --> 00:50:56,159
metric

1411
00:50:52,559 --> 00:50:59,760
equals zero right or is less than zero

1412
00:50:56,159 --> 00:51:03,598
um that was just the wrong way around

1413
00:50:59,760 --> 00:51:05,920
right so that's just stupid

1414
00:51:03,599 --> 00:51:07,280
all right so that's one bug down not a

1415
00:51:05,920 --> 00:51:10,720
particularly interesting one

1416
00:51:07,280 --> 00:51:12,240
but at least it is one um and now we can

1417
00:51:10,719 --> 00:51:15,039
see i suppose

1418
00:51:12,239 --> 00:51:17,679
uh we should be able to see this thing

1419
00:51:15,039 --> 00:51:19,519
actually step through something for real

1420
00:51:17,679 --> 00:51:21,679
let me run through here so now we should

1421
00:51:19,519 --> 00:51:24,719
see it like yeah right

1422
00:51:21,679 --> 00:51:26,558
it should be moving forwards correctly

1423
00:51:24,719 --> 00:51:29,679
and it does okay

1424
00:51:26,559 --> 00:51:29,680
so let's switch back

1425
00:51:29,838 --> 00:51:35,838
um to at least optimized

1426
00:51:33,280 --> 00:51:38,800
and probably also unfortunately we gotta

1427
00:51:35,838 --> 00:51:41,440
switch back to um

1428
00:51:38,800 --> 00:51:41,440
to uh

1429
00:51:41,838 --> 00:51:47,920
the the fully threaded version just

1430
00:51:44,480 --> 00:51:47,920
because lighting is so darn slow

1431
00:51:48,079 --> 00:51:52,800
there we go and let's take a look at now

1432
00:51:51,519 --> 00:51:54,400
if we're actually drawing

1433
00:51:52,800 --> 00:51:56,160
a grid walk because that would allow us

1434
00:51:54,400 --> 00:51:57,358
to figure out if our grid walk is busted

1435
00:51:56,159 --> 00:52:04,879
so that's one of the things

1436
00:51:57,358 --> 00:52:07,440
oh gosh okay well

1437
00:52:04,880 --> 00:52:09,200
so i guess what i would say is yeah so

1438
00:52:07,440 --> 00:52:10,720
we can obviously see something wrong

1439
00:52:09,199 --> 00:52:12,799
with our grid walk

1440
00:52:10,719 --> 00:52:14,480
which is great because again like i said

1441
00:52:12,800 --> 00:52:15,280
visualization tells you what your bugs

1442
00:52:14,480 --> 00:52:16,719
are very quickly

1443
00:52:15,280 --> 00:52:19,599
it's another really great part of

1444
00:52:16,719 --> 00:52:21,519
debugging with visualization

1445
00:52:19,599 --> 00:52:22,720
so what we can see here is we know that

1446
00:52:21,519 --> 00:52:25,358
we should have been walking

1447
00:52:22,719 --> 00:52:26,480
upward but instead we're walking

1448
00:52:25,358 --> 00:52:28,639
downward

1449
00:52:26,480 --> 00:52:30,960
so what i suspect is we have some kind

1450
00:52:28,639 --> 00:52:34,239
of a sign bug

1451
00:52:30,960 --> 00:52:36,480
in our walk table generator um

1452
00:52:34,239 --> 00:52:37,679
and you know we haven't really looked at

1453
00:52:36,480 --> 00:52:39,760
this routine remember i said there's

1454
00:52:37,679 --> 00:52:42,879
multiple routines involved

1455
00:52:39,760 --> 00:52:46,880
uh and all of them or you know

1456
00:52:42,880 --> 00:52:49,519
at least two are probably buggy and

1457
00:52:46,880 --> 00:52:50,480
they are so what we should see here if

1458
00:52:49,519 --> 00:52:53,838
we take a look

1459
00:52:50,480 --> 00:52:57,119
um we should be able to figure out here

1460
00:52:53,838 --> 00:53:00,480
why we're getting the wrong stepping

1461
00:52:57,119 --> 00:53:02,880
so let's take a look so

1462
00:53:00,480 --> 00:53:04,719
here we are and you can see us walking

1463
00:53:02,880 --> 00:53:06,559
through each sample direction

1464
00:53:04,719 --> 00:53:08,480
and we pull out a particular sample

1465
00:53:06,559 --> 00:53:11,359
direction right

1466
00:53:08,480 --> 00:53:12,719
uh and we set and say well wherever we

1467
00:53:11,358 --> 00:53:14,558
are we're gonna start writing to that

1468
00:53:12,719 --> 00:53:16,558
particular part of the the walk table so

1469
00:53:14,559 --> 00:53:18,720
that seems reasonable

1470
00:53:16,559 --> 00:53:20,000
um i mean we should we're going to have

1471
00:53:18,719 --> 00:53:21,358
to double check that part too because it

1472
00:53:20,000 --> 00:53:22,880
could also be that we're picking the

1473
00:53:21,358 --> 00:53:24,000
wrong offset in the lock table for a

1474
00:53:22,880 --> 00:53:25,760
particular array so

1475
00:53:24,000 --> 00:53:29,119
that's also you know something we could

1476
00:53:25,760 --> 00:53:31,440
try to verify

1477
00:53:29,119 --> 00:53:32,559
so in here what we see is we've got this

1478
00:53:31,440 --> 00:53:34,880
step value

1479
00:53:32,559 --> 00:53:36,079
and we've got this dim step value which

1480
00:53:34,880 --> 00:53:38,079
is how much we would

1481
00:53:36,079 --> 00:53:39,599
step in any particular direction and

1482
00:53:38,079 --> 00:53:40,400
what you can see here is we go through

1483
00:53:39,599 --> 00:53:43,920
the dimensions

1484
00:53:40,400 --> 00:53:46,160
and we look to see whether the

1485
00:53:43,920 --> 00:53:47,680
ray is going in a particular direction

1486
00:53:46,159 --> 00:53:50,480
for that specific

1487
00:53:47,679 --> 00:53:51,838
dimension right and what we do here is

1488
00:53:50,480 --> 00:53:54,079
we say if the ray

1489
00:53:51,838 --> 00:53:56,000
is going in the positive direction then

1490
00:53:54,079 --> 00:53:59,200
we set the step value for

1491
00:53:56,000 --> 00:53:59,599
that dimension to equal to the step if

1492
00:53:59,199 --> 00:54:02,879
not

1493
00:53:59,599 --> 00:54:05,519
then what we do is we make the ray

1494
00:54:02,880 --> 00:54:06,960
be positive anyway so that way we don't

1495
00:54:05,519 --> 00:54:10,079
have to worry about

1496
00:54:06,960 --> 00:54:11,838
look you know different ones but then we

1497
00:54:10,079 --> 00:54:15,760
set the step to be negative

1498
00:54:11,838 --> 00:54:18,558
right um we then multiply

1499
00:54:15,760 --> 00:54:20,079
the step by whatever the voxel dimension

1500
00:54:18,559 --> 00:54:22,319
is in that particular

1501
00:54:20,079 --> 00:54:24,000
direction and the reason we do that is

1502
00:54:22,318 --> 00:54:26,639
because obviously it's a step by more

1503
00:54:24,000 --> 00:54:27,358
and more each time as it goes from x to

1504
00:54:26,639 --> 00:54:32,000
y to z

1505
00:54:27,358 --> 00:54:38,480
stepping to be honest that seems

1506
00:54:32,000 --> 00:54:40,159
fine um

1507
00:54:38,480 --> 00:54:41,760
i can't say i can immediately see what

1508
00:54:40,159 --> 00:54:45,039
would be wrong with that

1509
00:54:41,760 --> 00:54:47,599
um but let's keep going there

1510
00:54:45,039 --> 00:54:52,400
there might be a bug in there i'm just

1511
00:54:47,599 --> 00:54:55,200
not sure what it is

1512
00:54:52,400 --> 00:54:56,079
we start at the starting location and we

1513
00:54:55,199 --> 00:54:58,000
look to see

1514
00:54:56,079 --> 00:54:59,280
if we've gone how you know how far we've

1515
00:54:58,000 --> 00:55:01,119
actually gone

1516
00:54:59,280 --> 00:55:04,240
we don't want to go past what we know

1517
00:55:01,119 --> 00:55:06,000
the raycaster will never actually use

1518
00:55:04,239 --> 00:55:07,598
we start by figuring out what the best

1519
00:55:06,000 --> 00:55:09,199
stepping would be and which

1520
00:55:07,599 --> 00:55:11,838
which dimension that would be we go

1521
00:55:09,199 --> 00:55:16,159
through the dimensions and we say

1522
00:55:11,838 --> 00:55:18,480
if we were going to get um

1523
00:55:16,159 --> 00:55:19,279
so we take the the cell dimension so how

1524
00:55:18,480 --> 00:55:22,719
far

1525
00:55:19,280 --> 00:55:25,760
we have to go for a particular cell

1526
00:55:22,719 --> 00:55:28,959
and we subtract the

1527
00:55:25,760 --> 00:55:30,240
location that we're actually at so far

1528
00:55:28,960 --> 00:55:31,838
in the cell which i believe gets

1529
00:55:30,239 --> 00:55:33,439
initialized to the center of the cell

1530
00:55:31,838 --> 00:55:37,519
yeah

1531
00:55:33,440 --> 00:55:40,159
um we then divide by the ray direction

1532
00:55:37,519 --> 00:55:40,798
which is the stepping rate right and we

1533
00:55:40,159 --> 00:55:42,879
see

1534
00:55:40,798 --> 00:55:46,960
how far in t we'd have to go before we

1535
00:55:42,880 --> 00:55:50,480
were to cover that specific distance

1536
00:55:46,960 --> 00:55:53,920
um figure out which one

1537
00:55:50,480 --> 00:55:57,280
that is and

1538
00:55:53,920 --> 00:56:00,838
we set the delta to

1539
00:55:57,280 --> 00:56:02,798
that step right which we pre-computed

1540
00:56:00,838 --> 00:56:08,000
before

1541
00:56:02,798 --> 00:56:08,000
and we move the ray by that much

1542
00:56:11,119 --> 00:56:17,838
uh which is wrong

1543
00:56:14,838 --> 00:56:17,838
so

1544
00:56:18,639 --> 00:56:25,118
the problem with that is we

1545
00:56:21,679 --> 00:56:27,838
aren't removing that element

1546
00:56:25,119 --> 00:56:29,599
of the cell dimension from our position

1547
00:56:27,838 --> 00:56:31,679
so

1548
00:56:29,599 --> 00:56:33,440
i don't think this actually would cause

1549
00:56:31,679 --> 00:56:36,239
the bug

1550
00:56:33,440 --> 00:56:37,920
so we have another bug that is not

1551
00:56:36,239 --> 00:56:40,078
related to this

1552
00:56:37,920 --> 00:56:42,720
but because we're just solving this

1553
00:56:40,079 --> 00:56:45,920
locally

1554
00:56:42,719 --> 00:56:49,118
we need this at value

1555
00:56:45,920 --> 00:56:51,519
right to

1556
00:56:49,119 --> 00:56:52,400
we need that to constantly basically

1557
00:56:51,519 --> 00:56:56,159
modded

1558
00:56:52,400 --> 00:56:59,838
by whatever we're stepping right

1559
00:56:56,159 --> 00:56:59,838
so um

1560
00:57:00,318 --> 00:57:04,239
not sure how to say this right but

1561
00:57:01,679 --> 00:57:07,440
basically we need this

1562
00:57:04,239 --> 00:57:11,279
to take whatever the dimension

1563
00:57:07,440 --> 00:57:14,079
that we chose so like the best dim

1564
00:57:11,280 --> 00:57:14,559
and we need to subtract the cell dim so

1565
00:57:14,079 --> 00:57:18,160
that we

1566
00:57:14,559 --> 00:57:20,798
re-center ourselves right

1567
00:57:18,159 --> 00:57:21,679
with respect to that that way we're

1568
00:57:20,798 --> 00:57:25,039
constantly just

1569
00:57:21,679 --> 00:57:28,000
inside like one cell and we when we do

1570
00:57:25,039 --> 00:57:31,440
this comparison it will actually work

1571
00:57:28,000 --> 00:57:34,480
um i don't think that will help

1572
00:57:31,440 --> 00:57:36,720
here that's just a separate bug right

1573
00:57:34,480 --> 00:57:38,240
um but this is like a directional

1574
00:57:36,719 --> 00:57:39,598
problem so

1575
00:57:38,239 --> 00:57:41,279
the reason i didn't think that would

1576
00:57:39,599 --> 00:57:42,960
solve this bug and i was right

1577
00:57:41,280 --> 00:57:44,400
is because this is a problem with even

1578
00:57:42,960 --> 00:57:47,679
the very first step

1579
00:57:44,400 --> 00:57:50,400
which which this fix

1580
00:57:47,679 --> 00:57:52,798
only handles would only address bugs

1581
00:57:50,400 --> 00:57:54,798
that happen on subsequent steps

1582
00:57:52,798 --> 00:57:55,920
so the question is for a ray that's

1583
00:57:54,798 --> 00:58:00,318
clearly going

1584
00:57:55,920 --> 00:58:04,639
upward which would be what positive z

1585
00:58:00,318 --> 00:58:09,358
um why are we stepping

1586
00:58:04,639 --> 00:58:12,639
backwards right and

1587
00:58:09,358 --> 00:58:12,639
i really don't know

1588
00:58:12,960 --> 00:58:16,159
we're taking the ray direction from the

1589
00:58:15,119 --> 00:58:19,358
sample direction

1590
00:58:16,159 --> 00:58:19,358
for each one of these

1591
00:58:20,838 --> 00:58:25,920
and

1592
00:58:23,119 --> 00:58:27,280
we're writing the walk table offset as

1593
00:58:25,920 --> 00:58:30,400
whatever we're actually going to write

1594
00:58:27,280 --> 00:58:30,400
into correct yeah

1595
00:58:32,239 --> 00:58:36,479
so i'm not sure what's wrong there the

1596
00:58:35,440 --> 00:58:40,880
dim step

1597
00:58:36,480 --> 00:58:51,838
here is set to 1 and should only become

1598
00:58:40,880 --> 00:58:51,838
negative in this case

1599
00:58:59,199 --> 00:59:02,879
i mean it should only become negative if

1600
00:59:00,960 --> 00:59:07,358
if the ray

1601
00:59:02,880 --> 00:59:09,599
direction is negative but

1602
00:59:07,358 --> 00:59:11,279
you know we're we're sure that it's not

1603
00:59:09,599 --> 00:59:12,880
for this ray because we literally are

1604
00:59:11,280 --> 00:59:15,599
only looking at rays that have

1605
00:59:12,880 --> 00:59:18,240
a z greater than 0.9 so no way for it to

1606
00:59:15,599 --> 00:59:18,240
be negative

1607
00:59:18,318 --> 00:59:24,480
pretty obviously so how

1608
00:59:21,358 --> 00:59:27,838
is it that we're getting a negative step

1609
00:59:24,480 --> 00:59:33,760
is the dim step part of this somehow

1610
00:59:27,838 --> 00:59:36,798
wrong that's one thing

1611
00:59:33,760 --> 00:59:38,960
or am i overwriting or writing to the

1612
00:59:36,798 --> 00:59:40,798
wrong place in the table

1613
00:59:38,960 --> 00:59:42,159
right because if i'm looking up the

1614
00:59:40,798 --> 00:59:45,599
wrong place in the table

1615
00:59:42,159 --> 00:59:49,039
obviously that would also be an issue

1616
00:59:45,599 --> 00:59:51,680
so let's just see how we pass the table

1617
00:59:49,039 --> 00:59:52,159
around in this particular case so we can

1618
00:59:51,679 --> 00:59:57,118
see

1619
00:59:52,159 --> 00:59:57,118
if that feels right at all

1620
00:59:58,838 --> 01:00:01,838
um

1621
01:00:04,798 --> 01:00:12,400
so if i do a search for

1622
01:00:08,400 --> 01:00:15,838
the yeah just for the

1623
01:00:12,400 --> 01:00:15,838
walk table

1624
01:00:25,358 --> 01:00:31,279
so you can see here i'm taking the

1625
01:00:28,639 --> 01:00:32,318
walk table offset for my particular

1626
01:00:31,280 --> 01:00:34,240
sample direction

1627
01:00:32,318 --> 01:00:35,440
right which is the thing that i in

1628
01:00:34,239 --> 01:00:39,759
theory wrote

1629
01:00:35,440 --> 01:00:39,760
right here and

1630
01:00:41,760 --> 01:00:44,160
i mean

1631
01:00:49,679 --> 01:00:56,719
it sure seems okay um

1632
01:00:53,599 --> 01:00:59,760
so i guess i'm also

1633
01:00:56,719 --> 01:00:59,759
just gonna have to

1634
01:01:00,400 --> 01:01:05,039
maybe the best thing to do here is to go

1635
01:01:02,239 --> 01:01:07,199
look let's watch the walk table be built

1636
01:01:05,039 --> 01:01:09,440
for this particular array and we'll just

1637
01:01:07,199 --> 01:01:11,838
see what it gets

1638
01:01:09,440 --> 01:01:11,838
um

1639
01:01:15,760 --> 01:01:20,720
because yeah i don't know it looks fine

1640
01:01:18,318 --> 01:01:24,318
right i mean it looks it looks like

1641
01:01:20,719 --> 01:01:27,358
what i would think so let's

1642
01:01:24,318 --> 01:01:32,079
do this let's use

1643
01:01:27,358 --> 01:01:32,369
our um same method before for debugging

1644
01:01:32,079 --> 01:01:35,440
so

1645
01:01:32,369 --> 01:01:35,440
[Music]

1646
01:01:37,599 --> 01:01:44,079
so in here i'll just

1647
01:01:40,639 --> 01:01:47,838
nerf this out and

1648
01:01:44,079 --> 01:01:47,839
i'm going to go ahead and watch

1649
01:01:48,159 --> 01:01:53,838
the walk table get built

1650
01:01:58,639 --> 01:02:03,440
and what i'd like to do is be able to

1651
01:02:01,358 --> 01:02:05,759
you know just

1652
01:02:03,440 --> 01:02:06,880
see which you know for for one of these

1653
01:02:05,760 --> 01:02:10,400
guys who's

1654
01:02:06,880 --> 01:02:10,400
somebody who's um

1655
01:02:11,838 --> 01:02:15,119
one of the rays that we're actually

1656
01:02:12,960 --> 01:02:15,679
debugging and i don't know which one it

1657
01:02:15,119 --> 01:02:20,079
would be

1658
01:02:15,679 --> 01:02:21,440
right excuse me

1659
01:02:20,079 --> 01:02:23,119
uh so for one of these rays we're

1660
01:02:21,440 --> 01:02:25,519
debugging i just want to see

1661
01:02:23,119 --> 01:02:26,960
what the direction index actually is so

1662
01:02:25,519 --> 01:02:28,559
that when we pull out

1663
01:02:26,960 --> 01:02:30,159
you know when we pulled out this walk

1664
01:02:28,559 --> 01:02:33,359
table like what

1665
01:02:30,159 --> 01:02:36,078
what was the actual walk index so if we

1666
01:02:33,358 --> 01:02:39,119
look at sample directions ray index

1667
01:02:36,079 --> 01:02:41,920
what is the walk table offset okay

1668
01:02:39,119 --> 01:02:41,920
it's zero

1669
01:02:44,639 --> 01:02:51,279
so i mean that's

1670
01:02:48,480 --> 01:02:53,760
pretty obviously wrong like why is the

1671
01:02:51,280 --> 01:03:03,839
walk table index zero for everybody

1672
01:02:53,760 --> 01:03:03,839
so something's up here um

1673
01:03:04,318 --> 01:03:07,038
wait a second

1674
01:03:09,599 --> 01:03:13,440
yeah that's just that's just really

1675
01:03:10,880 --> 01:03:16,160
bizarre so let's let's take a look at

1676
01:03:13,440 --> 01:03:17,760
how that's getting initialized so

1677
01:03:16,159 --> 01:03:21,440
something's really busted here

1678
01:03:17,760 --> 01:03:22,799
uh and let me let me just remind myself

1679
01:03:21,440 --> 01:03:24,079
how that

1680
01:03:22,798 --> 01:03:27,599
is there an obvious bug in here

1681
01:03:24,079 --> 01:03:27,599
somewhere so here's dust index

1682
01:03:28,838 --> 01:03:31,838
nice

1683
01:03:32,400 --> 01:03:36,400
so yeah we were just never generating

1684
01:03:35,039 --> 01:03:38,880
any of the walk table

1685
01:03:36,400 --> 01:03:38,880
actually

1686
01:03:40,318 --> 01:03:47,759
let's see what it looks like now

1687
01:03:45,440 --> 01:03:48,639
um we're never gonna run here because

1688
01:03:47,760 --> 01:03:50,400
we're running

1689
01:03:48,639 --> 01:03:51,838
single threaded debug which is about the

1690
01:03:50,400 --> 01:03:54,880
slowest possible thing

1691
01:03:51,838 --> 01:03:58,960
one can imagine um so

1692
01:03:54,880 --> 01:04:02,000
i should probably

1693
01:03:58,960 --> 01:04:06,240
switch that up but

1694
01:04:02,000 --> 01:04:06,239
wow that was kind of crazy right

1695
01:04:10,838 --> 01:04:13,838
um

1696
01:04:17,280 --> 01:04:20,319
should probably make a switch for this

1697
01:04:19,920 --> 01:04:23,440
um

1698
01:04:20,318 --> 01:04:24,558
that quickly turns off debugging for

1699
01:04:23,440 --> 01:04:28,159
this purpose

1700
01:04:24,559 --> 01:04:28,160
it's just dumb like this is the kind of

1701
01:04:28,880 --> 01:04:34,079
you can kind of see why it's so annoying

1702
01:04:32,318 --> 01:04:36,159
to do engine programming

1703
01:04:34,079 --> 01:04:38,480
is because if you think about how many

1704
01:04:36,159 --> 01:04:40,480
tools people have built for like crappy

1705
01:04:38,480 --> 01:04:42,480
lame programming like javascript or

1706
01:04:40,480 --> 01:04:43,760
something

1707
01:04:42,480 --> 01:04:45,358
there's so many things they can do

1708
01:04:43,760 --> 01:04:46,000
because people actually built tools for

1709
01:04:45,358 --> 01:04:48,239
it

1710
01:04:46,000 --> 01:04:49,039
whereas really basic stuff you would

1711
01:04:48,239 --> 01:04:51,279
want to do

1712
01:04:49,039 --> 01:04:52,559
so for example one of the obvious things

1713
01:04:51,280 --> 01:04:54,720
you would want to do

1714
01:04:52,559 --> 01:04:55,680
is write your compiler so it's not

1715
01:04:54,719 --> 01:04:58,159
terrible

1716
01:04:55,679 --> 01:04:58,719
so that when you're debugging you can

1717
01:04:58,159 --> 01:05:01,920
swap

1718
01:04:58,719 --> 01:05:04,798
in the debug version of that routine

1719
01:05:01,920 --> 01:05:05,838
to step through instead of the optimized

1720
01:05:04,798 --> 01:05:08,079
one

1721
01:05:05,838 --> 01:05:10,000
this is actually very easy to do if you

1722
01:05:08,079 --> 01:05:10,480
actually cared and it would make it so

1723
01:05:10,000 --> 01:05:12,480
simple

1724
01:05:10,480 --> 01:05:14,240
to do this kind of debug work you would

1725
01:05:12,480 --> 01:05:16,159
just literally have a button in the

1726
01:05:14,239 --> 01:05:18,798
debugger that would be like

1727
01:05:16,159 --> 01:05:20,558
patch the ip address over to the other

1728
01:05:18,798 --> 01:05:23,679
routine now because i want to step

1729
01:05:20,559 --> 01:05:25,920
through it right but of course like

1730
01:05:23,679 --> 01:05:27,519
forget that like i'm talking about space

1731
01:05:25,920 --> 01:05:29,039
age technology you know

1732
01:05:27,519 --> 01:05:32,239
as far as clang and microsoft are

1733
01:05:29,039 --> 01:05:36,240
concerned um

1734
01:05:32,239 --> 01:05:39,038
anyway okay so now at least

1735
01:05:36,239 --> 01:05:40,798
we are properly getting some walk

1736
01:05:39,039 --> 01:05:41,200
stepping here but you can see that it's

1737
01:05:40,798 --> 01:05:44,318
still

1738
01:05:41,199 --> 01:05:48,399
wrong so it's always picking um

1739
01:05:44,318 --> 01:05:52,000
to step upward but upward is not correct

1740
01:05:48,400 --> 01:05:55,200
um so we've still got some

1741
01:05:52,000 --> 01:05:57,599
additional issues i don't know if that

1742
01:05:55,199 --> 01:05:59,279
is actually a bug in the stepping code

1743
01:05:57,599 --> 01:06:03,680
though so let's just take a look

1744
01:05:59,280 --> 01:06:06,319
at the grid raycast code um to see

1745
01:06:03,679 --> 01:06:06,318
you know like

1746
01:06:07,599 --> 01:06:10,960
how are we actually stepping

1747
01:06:12,400 --> 01:06:16,318
so you can see here like the walk table

1748
01:06:14,318 --> 01:06:16,880
is not getting incremented right so we

1749
01:06:16,318 --> 01:06:19,838
need

1750
01:06:16,880 --> 01:06:20,160
our walk table to actually update and so

1751
01:06:19,838 --> 01:06:23,038
this

1752
01:06:20,159 --> 01:06:24,318
might just be because after we use it we

1753
01:06:23,039 --> 01:06:32,400
need to do this

1754
01:06:24,318 --> 01:06:36,318
and we aren't all right

1755
01:06:32,400 --> 01:06:36,880
um okay so now that's actually looking

1756
01:06:36,318 --> 01:06:40,159
quite

1757
01:06:36,880 --> 01:06:43,358
nice right so now we can actually see

1758
01:06:40,159 --> 01:06:45,440
that we're getting you know a variety of

1759
01:06:43,358 --> 01:06:49,199
rays cast here

1760
01:06:45,440 --> 01:06:49,760
and there's some weird things happening

1761
01:06:49,199 --> 01:06:52,399
with

1762
01:06:49,760 --> 01:06:54,000
i don't know why that's occurring right

1763
01:06:52,400 --> 01:06:57,838
so that's a little bit strange

1764
01:06:54,000 --> 01:06:57,838
and probably merit some attention

1765
01:06:59,039 --> 01:07:03,520
could actually have to do with with uh

1766
01:07:01,599 --> 01:07:06,798
if that's part of the drawing of the

1767
01:07:03,519 --> 01:07:10,480
of the hit p value or things so that's

1768
01:07:06,798 --> 01:07:10,480
fairly disturbing right

1769
01:07:10,880 --> 01:07:17,519
um if we look though at the

1770
01:07:14,400 --> 01:07:18,798
actual way in which we're stepping

1771
01:07:17,519 --> 01:07:22,639
through

1772
01:07:18,798 --> 01:07:24,719
uh this particular part of the grid

1773
01:07:22,639 --> 01:07:26,838
it actually like at first blush and

1774
01:07:24,719 --> 01:07:28,159
we'll have to pause this later so we can

1775
01:07:26,838 --> 01:07:30,639
watch

1776
01:07:28,159 --> 01:07:31,598
these things more carefully but it

1777
01:07:30,639 --> 01:07:34,798
actually looks quite

1778
01:07:31,599 --> 01:07:36,400
nice it does appear that the rays

1779
01:07:34,798 --> 01:07:38,239
are aligned with the grid stepping

1780
01:07:36,400 --> 01:07:42,000
that's occurring

1781
01:07:38,239 --> 01:07:43,759
and i'm pretty happy with that

1782
01:07:42,000 --> 01:07:45,039
so i feel like we've at least debugged a

1783
01:07:43,760 --> 01:07:48,079
significant

1784
01:07:45,039 --> 01:07:50,799
set of the bugs in here that we had and

1785
01:07:48,079 --> 01:07:51,440
we're now kind of getting down to uh a

1786
01:07:50,798 --> 01:07:54,000
difference

1787
01:07:51,440 --> 01:07:55,440
you know a separate wave so i'm pretty

1788
01:07:54,000 --> 01:07:56,719
happy with that i think that's pretty

1789
01:07:55,440 --> 01:07:58,240
good

1790
01:07:56,719 --> 01:08:00,000
so what we need to do now that we can

1791
01:07:58,239 --> 01:08:02,000
sort of see that our rays are casting

1792
01:08:00,000 --> 01:08:04,239
relatively correctly and we're walking

1793
01:08:02,000 --> 01:08:06,719
the grid relatively correctly the

1794
01:08:04,239 --> 01:08:08,959
the sort of final thing i want to do to

1795
01:08:06,719 --> 01:08:11,759
let us start to debug the actual

1796
01:08:08,960 --> 01:08:13,280
literal raycast part of this is i need

1797
01:08:11,760 --> 01:08:24,319
to now kind of be able to

1798
01:08:13,280 --> 01:08:27,279
focus in on on only just one ray so if i

1799
01:08:24,319 --> 01:08:32,159
want to focus on literally just one ray

1800
01:08:27,279 --> 01:08:35,839
i'm going to need some way of

1801
01:08:32,158 --> 01:08:39,039
maybe passing in the debug value from

1802
01:08:35,838 --> 01:08:39,600
the outside because by the time i get in

1803
01:08:39,039 --> 01:08:42,238
here

1804
01:08:39,600 --> 01:08:42,798
i i know where i'm casting from but

1805
01:08:42,238 --> 01:08:46,718
that's

1806
01:08:42,798 --> 01:08:47,119
really all i know and so i need some way

1807
01:08:46,719 --> 01:08:51,838
of

1808
01:08:47,119 --> 01:08:52,318
of um yeah making this a little bit more

1809
01:08:51,838 --> 01:08:54,880
uh

1810
01:08:52,319 --> 01:08:56,000
i guess i could make this part a tighter

1811
01:08:54,880 --> 01:08:59,199
bound

1812
01:08:56,000 --> 01:09:07,838
and maybe it would be sufficient um

1813
01:08:59,198 --> 01:09:07,838
i'm not sure so maybe if i did this

1814
01:09:08,880 --> 01:09:12,400
you know we can just kind of pick some

1815
01:09:10,960 --> 01:09:15,838
arbitrary stuff here

1816
01:09:12,399 --> 01:09:17,599
um and grab one that way but

1817
01:09:15,838 --> 01:09:20,079
passing in from the outside might be

1818
01:09:17,600 --> 01:09:22,798
like the better way to go right

1819
01:09:20,079 --> 01:09:23,920
uh and so here you can kind of see it

1820
01:09:22,798 --> 01:09:26,319
you know doing the

1821
01:09:23,920 --> 01:09:27,759
the debug cast but again i think that's

1822
01:09:26,319 --> 01:09:31,359
kind of a

1823
01:09:27,759 --> 01:09:33,039
fool's errand uh at some at some level

1824
01:09:31,359 --> 01:09:35,600
so i think what i would probably rather

1825
01:09:33,039 --> 01:09:39,278
do is just do a forced debug call

1826
01:09:35,600 --> 01:09:41,679
at some point so rather than do this

1827
01:09:39,279 --> 01:09:43,199
uh i think what i would do is i'll leave

1828
01:09:41,679 --> 01:09:46,158
this in place

1829
01:09:43,198 --> 01:09:47,919
i'll turn off ray debugging as a thing

1830
01:09:46,158 --> 01:09:49,679
so this will just again use the

1831
01:09:47,920 --> 01:09:53,279
debugging call

1832
01:09:49,679 --> 01:09:57,840
um and what i'll do here is

1833
01:09:53,279 --> 01:09:57,840
i will uh kind of go

1834
01:09:57,920 --> 01:10:03,840
i think i'll kind of go with maybe

1835
01:10:01,600 --> 01:10:03,840
like

1836
01:10:08,800 --> 01:10:16,159
just do the first ray from the bundle

1837
01:10:13,039 --> 01:10:18,000
so you know in here we'll just say

1838
01:10:16,158 --> 01:10:21,839
debugging equals false

1839
01:10:18,000 --> 01:10:23,520
right and in addition to just doing the

1840
01:10:21,840 --> 01:10:26,000
first array from the bundle

1841
01:10:23,520 --> 01:10:28,880
rather than using this i'll pass in

1842
01:10:26,000 --> 01:10:32,238
debugging as

1843
01:10:28,880 --> 01:10:35,279
a thing then

1844
01:10:32,238 --> 01:10:39,519
i'll just pick one to do in the outside

1845
01:10:35,279 --> 01:10:42,840
as a separate part of the routine right

1846
01:10:39,520 --> 01:10:47,520
um so in here i'll just go ahead

1847
01:10:42,840 --> 01:10:47,520
and as part of the

1848
01:10:48,800 --> 01:10:58,400
let's say part of the

1849
01:10:51,920 --> 01:11:00,399
main raycast i guess

1850
01:10:58,399 --> 01:11:02,399
i guess i'll do it as part of full cast

1851
01:11:00,399 --> 01:11:05,359
so as part of full cast

1852
01:11:02,399 --> 01:11:06,799
i'll do the check there and in here so

1853
01:11:05,359 --> 01:11:07,599
you know you can see us kind of looping

1854
01:11:06,800 --> 01:11:09,679
over

1855
01:11:07,600 --> 01:11:10,960
um with the vox center p stuff here

1856
01:11:09,679 --> 01:11:13,440
right

1857
01:11:10,960 --> 01:11:14,960
um i think what i'll do is i'll do an

1858
01:11:13,439 --> 01:11:18,000
additional one here

1859
01:11:14,960 --> 01:11:20,960
so i'll just say all right you know

1860
01:11:18,000 --> 01:11:21,760
like we'll we'll let it erroneously

1861
01:11:20,960 --> 01:11:24,239
write

1862
01:11:21,760 --> 01:11:25,679
um so this is just like a debug system

1863
01:11:24,238 --> 01:11:27,198
thing here

1864
01:11:25,679 --> 01:11:29,039
i'll let it erroneously write into

1865
01:11:27,198 --> 01:11:32,319
something here so we'll say like

1866
01:11:29,039 --> 01:11:36,000
uh sure like whatever the

1867
01:11:32,319 --> 01:11:39,519
the tile that we're writing here is just

1868
01:11:36,000 --> 01:11:40,960
you know this random spectile

1869
01:11:39,520 --> 01:11:42,800
and then we'll pass the rest of this

1870
01:11:40,960 --> 01:11:45,600
stuff

1871
01:11:42,800 --> 01:11:46,239
by picking out a specific one of these

1872
01:11:45,600 --> 01:11:48,239
so

1873
01:11:46,238 --> 01:11:49,759
down here i'll say all right there's

1874
01:11:48,238 --> 01:11:53,279
going to be like a

1875
01:11:49,760 --> 01:11:56,400
debugger and it's going to be

1876
01:11:53,279 --> 01:11:58,079
like something out of the

1877
01:11:56,399 --> 01:12:00,079
out of the set here i don't know which

1878
01:11:58,079 --> 01:12:02,000
one we want to do we can pick anything

1879
01:12:00,079 --> 01:12:05,760
we want for this

1880
01:12:02,000 --> 01:12:07,279
uh and then we can pass the

1881
01:12:05,760 --> 01:12:09,199
you know all the stuff here so i can

1882
01:12:07,279 --> 01:12:13,920
pass the ray origin

1883
01:12:09,198 --> 01:12:13,919
i can pass the ray direction which

1884
01:12:16,238 --> 01:12:22,000
actually take it back i can actually

1885
01:12:19,600 --> 01:12:25,440
just do this

1886
01:12:22,000 --> 01:12:25,439
we go um

1887
01:12:25,920 --> 01:12:29,679
and all this stuff should be roughly the

1888
01:12:27,279 --> 01:12:31,599
same so i can pass the the array origin

1889
01:12:29,679 --> 01:12:32,800
single which we know will always be the

1890
01:12:31,600 --> 01:12:35,360
same spec outstanding

1891
01:12:32,800 --> 01:12:37,279
atlas are the same spec text the same so

1892
01:12:35,359 --> 01:12:40,479
now i just have the debug der

1893
01:12:37,279 --> 01:12:41,840
is what i'd pass here right and what i

1894
01:12:40,479 --> 01:12:45,119
can now do is just wrap

1895
01:12:41,840 --> 01:12:46,560
this in the if initial grid index equals

1896
01:12:45,119 --> 01:12:48,000
something right i don't remember what

1897
01:12:46,560 --> 01:12:48,880
the value was but we probably want to

1898
01:12:48,000 --> 01:12:51,119
pick one

1899
01:12:48,880 --> 01:12:54,079
that we actually want to test this will

1900
01:12:51,119 --> 01:12:57,359
do one raycast with debugging turned on

1901
01:12:54,079 --> 01:13:00,000
just one and it can do the same one

1902
01:12:57,359 --> 01:13:00,000
every time

1903
01:13:02,880 --> 01:13:07,920
so up here you can see that we use the

1904
01:13:06,079 --> 01:13:09,679
entropy index for the octahedron that's

1905
01:13:07,920 --> 01:13:13,119
what gives us the jitter

1906
01:13:09,679 --> 01:13:16,480
so here instead what i can do is

1907
01:13:13,119 --> 01:13:18,079
set this to something right um maybe i

1908
01:13:16,479 --> 01:13:21,279
use zero for it i don't know

1909
01:13:18,079 --> 01:13:23,600
we can pick which one um but you know

1910
01:13:21,279 --> 01:13:26,158
we'll we'll see as we go

1911
01:13:23,600 --> 01:13:27,360
so if i run this now uh what i want to

1912
01:13:26,158 --> 01:13:29,679
do is pick

1913
01:13:27,359 --> 01:13:30,479
one of these grids and pick something

1914
01:13:29,679 --> 01:13:33,119
that's act

1915
01:13:30,479 --> 01:13:34,238
i want to pick something that's actually

1916
01:13:33,119 --> 01:13:37,279
going to hit

1917
01:13:34,238 --> 01:13:39,039
right and so what i can do is try to

1918
01:13:37,279 --> 01:13:41,198
like find that just by trial and error

1919
01:13:39,039 --> 01:13:42,640
because we don't really care

1920
01:13:41,198 --> 01:13:45,039
but again we just need something that's

1921
01:13:42,640 --> 01:13:47,039
going to do like a proper hit here

1922
01:13:45,039 --> 01:13:48,079
so when we take this debugger i could

1923
01:13:47,039 --> 01:13:50,319
just say look let's

1924
01:13:48,079 --> 01:13:52,960
add something to the debug dirt debug

1925
01:13:50,319 --> 01:13:52,960
dur you know

1926
01:13:54,079 --> 01:13:59,039
plus i don't know 20 who knows right but

1927
01:13:57,760 --> 01:14:00,880
we can just

1928
01:13:59,039 --> 01:14:02,319
pick random numbers until we find

1929
01:14:00,880 --> 01:14:04,159
something that actually casts in a

1930
01:14:02,319 --> 01:14:07,599
direction

1931
01:14:04,158 --> 01:14:07,599
that we can use right

1932
01:14:07,679 --> 01:14:12,560
so there's that's almost good right

1933
01:14:10,960 --> 01:14:14,000
it's not quite right but it's almost

1934
01:14:12,560 --> 01:14:17,520
good so let's

1935
01:14:14,000 --> 01:14:17,520
maybe try a little more here

1936
01:14:24,719 --> 01:14:30,560
um so that got worse let's let's try

1937
01:14:27,840 --> 01:14:30,560
backing it up

1938
01:14:34,880 --> 01:14:43,840
yeah i really have no idea what the

1939
01:14:37,039 --> 01:14:43,840
correct thing is to cast on here

1940
01:14:50,238 --> 01:14:59,039
not sure why that didn't give me

1941
01:14:56,319 --> 01:14:59,039
something useful

1942
01:15:03,279 --> 01:15:11,840
i need to add this to like some kind of

1943
01:15:04,800 --> 01:15:11,840
hotkey probably right

1944
01:15:23,439 --> 01:15:27,198
maybe i should just move which grid

1945
01:15:25,198 --> 01:15:39,839
we're doing since everything i'm picking

1946
01:15:27,198 --> 01:15:39,839
seems to go downward

1947
01:15:41,840 --> 01:15:45,440
i think there should be what like if

1948
01:15:43,600 --> 01:15:48,640
there's an eight by eight

1949
01:15:45,439 --> 01:15:49,279
right there should be 64 of these light

1950
01:15:48,640 --> 01:15:52,800
samples

1951
01:15:49,279 --> 01:15:54,880
is that right

1952
01:15:52,800 --> 01:15:56,480
and yet literally like no matter what i

1953
01:15:54,880 --> 01:15:58,000
pick it seems like it doesn't go that

1954
01:15:56,479 --> 01:16:07,839
direction

1955
01:15:58,000 --> 01:16:07,840
how is this possible

1956
01:16:08,880 --> 01:16:11,760
this is really annoying

1957
01:16:16,479 --> 01:16:20,879
i don't even know why that would work

1958
01:16:19,359 --> 01:16:22,000
that way because if it's the octahedral

1959
01:16:20,880 --> 01:16:25,199
map it should be

1960
01:16:22,000 --> 01:16:27,279
walking along an octahedron right

1961
01:16:25,198 --> 01:16:28,799
i mean each one of those should be right

1962
01:16:27,279 --> 01:16:32,238
because if you remember inside

1963
01:16:28,800 --> 01:16:35,600
hh sphere right the

1964
01:16:32,238 --> 01:16:38,559
way this thing was lined up is

1965
01:16:35,600 --> 01:16:39,440
it generates a poisson distribution and

1966
01:16:38,560 --> 01:16:42,560
then

1967
01:16:39,439 --> 01:16:46,319
it comes through here and says well

1968
01:16:42,560 --> 01:16:49,760
as i'm picking these we

1969
01:16:46,319 --> 01:16:50,880
pick a specific txty each time and step

1970
01:16:49,760 --> 01:16:54,400
through right tx

1971
01:16:50,880 --> 01:16:59,760
right we go through those and we

1972
01:16:54,399 --> 01:16:59,759
we look to see you know as we select

1973
01:17:00,840 --> 01:17:08,239
them

1974
01:17:03,439 --> 01:17:08,238
it's the eight by eight right so

1975
01:17:08,479 --> 01:17:15,439
there should be 64 in each octahedron

1976
01:17:12,319 --> 01:17:18,319
right and

1977
01:17:15,439 --> 01:17:19,839
we should have them correspond to the

1978
01:17:18,319 --> 01:17:24,399
actual

1979
01:17:19,840 --> 01:17:28,000
like to the actual octahedron map

1980
01:17:24,399 --> 01:17:31,839
layout t x

1981
01:17:28,000 --> 01:17:31,840
and t y now

1982
01:17:33,279 --> 01:17:37,198
it should be such that like

1983
01:17:38,158 --> 01:17:41,920
four times eight plus four so it should

1984
01:17:40,399 --> 01:17:45,198
be like

1985
01:17:41,920 --> 01:17:47,600
probably something like 36

1986
01:17:45,198 --> 01:17:50,319
should it be sort of towards the center

1987
01:17:47,600 --> 01:17:50,320
right of the map

1988
01:17:50,479 --> 01:17:55,198
all right i guess thinking it through

1989
01:17:53,359 --> 01:17:58,639
paid off in this case

1990
01:17:55,198 --> 01:18:01,839
um yeah

1991
01:17:58,640 --> 01:18:01,840
uh so

1992
01:18:02,079 --> 01:18:05,519
let's try that again now one interesting

1993
01:18:04,238 --> 01:18:07,279
thing about that is like

1994
01:18:05,520 --> 01:18:09,280
i'm sending that down but it looks like

1995
01:18:07,279 --> 01:18:12,639
it's not correctly

1996
01:18:09,279 --> 01:18:14,238
getting the uh the walk index there

1997
01:18:12,640 --> 01:18:16,079
right did you notice how that was wrong

1998
01:18:14,238 --> 01:18:17,279
it looked like it's still going downward

1999
01:18:16,079 --> 01:18:19,198
so this will be interesting to see but

2000
01:18:17,279 --> 01:18:22,719
anyway

2001
01:18:19,198 --> 01:18:26,079
so looking at number 36 uh

2002
01:18:22,719 --> 01:18:30,079
and then telling it to to debug that

2003
01:18:26,079 --> 01:18:30,079
good raycast um

2004
01:18:32,399 --> 01:18:35,519
that gives us one that should hit and

2005
01:18:34,319 --> 01:18:38,238
that we can walk through but

2006
01:18:35,520 --> 01:18:39,199
why we that looked wrong again right

2007
01:18:38,238 --> 01:18:42,639
like that looks like an

2008
01:18:39,198 --> 01:18:44,158
incorrect um

2009
01:18:42,640 --> 01:18:46,079
walk value and that that may just be

2010
01:18:44,158 --> 01:18:47,359
because it didn't like generate

2011
01:18:46,079 --> 01:18:48,479
uh the table or something because we

2012
01:18:47,359 --> 01:18:49,359
haven't really looked at that yet okay

2013
01:18:48,479 --> 01:18:51,359
so it's fine

2014
01:18:49,359 --> 01:18:52,799
uh because doing the code reloading on i

2015
01:18:51,359 --> 01:18:54,000
don't know what happens with the tables

2016
01:18:52,800 --> 01:18:56,000
on there we haven't really looked at

2017
01:18:54,000 --> 01:18:57,600
that

2018
01:18:56,000 --> 01:18:59,119
so if you take a look here you can kind

2019
01:18:57,600 --> 01:19:03,039
of see

2020
01:18:59,119 --> 01:19:06,158
the the ray as it is

2021
01:19:03,039 --> 01:19:07,119
passing up through geometry now and so

2022
01:19:06,158 --> 01:19:10,559
what i'd like to do

2023
01:19:07,119 --> 01:19:12,800
next is just see what geometry it

2024
01:19:10,560 --> 01:19:15,840
actually is trying to collide against

2025
01:19:12,800 --> 01:19:20,320
so i'd like to see you know

2026
01:19:15,840 --> 01:19:22,719
uh for each one of these boxes

2027
01:19:20,319 --> 01:19:24,238
i'd like to see which ones have leaves

2028
01:19:22,719 --> 01:19:27,198
first of all

2029
01:19:24,238 --> 01:19:28,319
and then go from there now again i think

2030
01:19:27,198 --> 01:19:30,719
i'm going to have to do

2031
01:19:28,319 --> 01:19:33,039
i might have to make the remainder of

2032
01:19:30,719 --> 01:19:35,600
the stream rather than debugging

2033
01:19:33,039 --> 01:19:37,519
actually just be fixing our lighting

2034
01:19:35,600 --> 01:19:41,039
code in the pixel shader

2035
01:19:37,520 --> 01:19:45,440
because like this is not useful

2036
01:19:41,039 --> 01:19:45,439
you can kind of see here like well

2037
01:19:45,679 --> 01:19:49,440
those two things were sent with separate

2038
01:19:47,840 --> 01:19:52,319
colors

2039
01:19:49,439 --> 01:19:53,839
and they look the same and that's going

2040
01:19:52,319 --> 01:19:55,599
to be a problem because it means we

2041
01:19:53,840 --> 01:19:57,360
can't use color as part of our debug

2042
01:19:55,600 --> 01:20:00,239
information really

2043
01:19:57,359 --> 01:20:02,319
and we kind of need to be able to so

2044
01:20:00,238 --> 01:20:05,359
like

2045
01:20:02,319 --> 01:20:08,639
if i just look you know uh

2046
01:20:05,359 --> 01:20:08,639
at what i've got here

2047
01:20:16,840 --> 01:20:22,319
0.5.250

2048
01:20:18,639 --> 01:20:25,840
and 1 1 should look different

2049
01:20:22,319 --> 01:20:25,840
and similarly

2050
01:20:28,238 --> 01:20:30,399
a

2051
01:20:31,679 --> 01:20:35,520
oh wait no that's okay never mind let me

2052
01:20:34,880 --> 01:20:38,560
go ahead and

2053
01:20:35,520 --> 01:20:42,000
and see what happens if i

2054
01:20:38,560 --> 01:20:43,280
change this oh no i did and so 0.5.5

2055
01:20:42,000 --> 01:20:47,439
should look different than 1

2056
01:20:43,279 --> 01:20:50,559
1 but it doesn't right

2057
01:20:47,439 --> 01:20:52,158
so it's just kind of busted like

2058
01:20:50,560 --> 01:20:53,600
you know it's not it's not working

2059
01:20:52,158 --> 01:20:55,039
correctly

2060
01:20:53,600 --> 01:20:57,280
and so i think we're gonna have to

2061
01:20:55,039 --> 01:20:59,359
figure out something to do here

2062
01:20:57,279 --> 01:21:00,559
uh now you know we've been avoiding this

2063
01:20:59,359 --> 01:21:02,238
for quite some time

2064
01:21:00,560 --> 01:21:04,800
and i don't think we're gonna be able to

2065
01:21:02,238 --> 01:21:07,919
get away with it uh forever

2066
01:21:04,800 --> 01:21:10,480
so like you know that's just not

2067
01:21:07,920 --> 01:21:10,480
sufficient

2068
01:21:12,479 --> 01:21:16,079
so maybe that's what we have to do now

2069
01:21:14,079 --> 01:21:19,359
before we go any further because without

2070
01:21:16,079 --> 01:21:23,600
being able to push debug stuff on there

2071
01:21:19,359 --> 01:21:26,158
you know so i think we kind of need that

2072
01:21:23,600 --> 01:21:27,120
what i'd like to do is let's go ahead

2073
01:21:26,158 --> 01:21:30,719
and

2074
01:21:27,119 --> 01:21:34,479
go to the pixel shader side of things

2075
01:21:30,719 --> 01:21:37,198
so in the open gel like z bias program

2076
01:21:34,479 --> 01:21:37,198
which should be here

2077
01:21:39,920 --> 01:21:43,679
you can kind of see like all right as we

2078
01:21:41,760 --> 01:21:46,800
come through here

2079
01:21:43,679 --> 01:21:48,319
and we uh

2080
01:21:46,800 --> 01:21:50,880
and we do our lighting calculations

2081
01:21:48,319 --> 01:21:54,479
really all we need

2082
01:21:50,880 --> 01:21:55,279
um is just a constant that turns this on

2083
01:21:54,479 --> 01:21:59,039
and off

2084
01:21:55,279 --> 01:22:00,000
right since it's really only for debug

2085
01:21:59,039 --> 01:22:01,840
purposes we don't

2086
01:22:00,000 --> 01:22:03,520
really have to care too much about it in

2087
01:22:01,840 --> 01:22:05,920
terms of performance

2088
01:22:03,520 --> 01:22:07,840
probably but so when you see here when

2089
01:22:05,920 --> 01:22:09,920
we've got like if lighting disabled

2090
01:22:07,840 --> 01:22:11,119
else and you can see the surface reflect

2091
01:22:09,920 --> 01:22:12,719
times thing

2092
01:22:11,119 --> 01:22:15,599
so this world z this was the hack that

2093
01:22:12,719 --> 01:22:18,319
we had in there from before

2094
01:22:15,600 --> 01:22:20,000
and that was for this stuff right so

2095
01:22:18,319 --> 01:22:23,599
that we could overlay this stuff

2096
01:22:20,000 --> 01:22:25,039
on there right and that works well

2097
01:22:23,600 --> 01:22:26,560
enough but it's just it's just was just

2098
01:22:25,039 --> 01:22:27,198
a hack that someone suggested and i was

2099
01:22:26,560 --> 01:22:29,360
like okay

2100
01:22:27,198 --> 01:22:30,960
i'm fine with that but i think what we'd

2101
01:22:29,359 --> 01:22:31,920
rather do here is we'd rather have a

2102
01:22:30,960 --> 01:22:35,119
constant

2103
01:22:31,920 --> 01:22:36,560
um that lets us determine how much

2104
01:22:35,119 --> 01:22:39,198
lighting you actually apply

2105
01:22:36,560 --> 01:22:40,960
right so what i'd like to do is maybe

2106
01:22:39,198 --> 01:22:44,238
something that looks like this

2107
01:22:40,960 --> 01:22:48,399
so let's suppose we say

2108
01:22:44,238 --> 01:22:48,399
you know we have

2109
01:22:48,719 --> 01:22:52,000
surface reflect is the value we're going

2110
01:22:50,079 --> 01:22:55,760
to actually have here so we have the

2111
01:22:52,000 --> 01:22:58,158
like the lit reflect version

2112
01:22:55,760 --> 01:23:01,039
is going to be oops the sum i deleted

2113
01:22:58,158 --> 01:23:04,158
the sunlight by accident there

2114
01:23:01,039 --> 01:23:04,560
there we go so what i want to do here is

2115
01:23:04,158 --> 01:23:06,479
say

2116
01:23:04,560 --> 01:23:07,600
okay surface reflect is going to be

2117
01:23:06,479 --> 01:23:09,599
times equals l

2118
01:23:07,600 --> 01:23:11,120
but what i'd really rather do is just

2119
01:23:09,600 --> 01:23:12,719
have one multiply in there

2120
01:23:11,119 --> 01:23:15,439
or one lerp in there that lets me

2121
01:23:12,719 --> 01:23:15,439
control that

2122
01:23:18,719 --> 01:23:25,119
there's two really ways we can do this

2123
01:23:21,920 --> 01:23:25,679
it's really hard to say but based on the

2124
01:23:25,119 --> 01:23:27,198
way

2125
01:23:25,679 --> 01:23:28,880
graphics cards work now i'm going to say

2126
01:23:27,198 --> 01:23:29,439
we just want a constant that controls

2127
01:23:28,880 --> 01:23:32,319
that

2128
01:23:29,439 --> 01:23:33,678
so we probably want just like you know

2129
01:23:32,319 --> 01:23:36,238
lighting enabled

2130
01:23:33,679 --> 01:23:38,000
is an actual boolean that's probably the

2131
01:23:36,238 --> 01:23:41,839
fastest way to do it these days

2132
01:23:38,000 --> 01:23:44,880
because usually what will happen i think

2133
01:23:41,840 --> 01:23:48,880
is that modern graphics cards will

2134
01:23:44,880 --> 01:23:52,079
actually look at those constants and

2135
01:23:48,880 --> 01:23:54,159
use them as actual switching on and off

2136
01:23:52,079 --> 01:23:55,119
if it's entirely one way or entirely the

2137
01:23:54,158 --> 01:23:57,039
other way

2138
01:23:55,119 --> 01:23:58,719
i think they'll actually handle that

2139
01:23:57,039 --> 01:24:01,679
don't quote me on that i don't

2140
01:23:58,719 --> 01:24:02,480
really do much with this kind of stuff

2141
01:24:01,679 --> 01:24:05,679
day to day

2142
01:24:02,479 --> 01:24:07,678
so i'm the wrong one to ask but

2143
01:24:05,679 --> 01:24:10,239
i think if you want to say like okay

2144
01:24:07,679 --> 01:24:13,920
there's a uniform

2145
01:24:10,238 --> 01:24:17,439
oops there's a uniform

2146
01:24:13,920 --> 01:24:20,319
int that's like lighting enabled and

2147
01:24:17,439 --> 01:24:21,759
you pass that in and if you have that on

2148
01:24:20,319 --> 01:24:22,158
you get lighting and if you have that

2149
01:24:21,760 --> 01:24:24,960
off

2150
01:24:22,158 --> 01:24:26,238
you don't uh then we could do it that

2151
01:24:24,960 --> 01:24:29,520
way

2152
01:24:26,238 --> 01:24:30,959
well okay you know what though i take

2153
01:24:29,520 --> 01:24:32,960
that back as well because

2154
01:24:30,960 --> 01:24:34,158
the problem is we kind of wanted these

2155
01:24:32,960 --> 01:24:37,520
to be slip streamed

2156
01:24:34,158 --> 01:24:39,839
into our

2157
01:24:37,520 --> 01:24:39,840
uh

2158
01:24:41,198 --> 01:24:44,879
we kind of wanted these to be slip

2159
01:24:42,560 --> 01:24:47,920
streamed into our actual

2160
01:24:44,880 --> 01:24:51,199
render code so that probably

2161
01:24:47,920 --> 01:24:52,880
actually isn't the best idea

2162
01:24:51,198 --> 01:24:54,399
so i think probably what we would rather

2163
01:24:52,880 --> 01:24:56,560
do now that i think about it is we're

2164
01:24:54,399 --> 01:24:59,279
going to be sampling textures in here

2165
01:24:56,560 --> 01:25:00,159
so you can see in here right that like

2166
01:24:59,279 --> 01:25:02,479
we do a

2167
01:25:00,158 --> 01:25:03,439
texture sampling for the reflection

2168
01:25:02,479 --> 01:25:07,599
value so

2169
01:25:03,439 --> 01:25:10,839
like um that's the octahedral map

2170
01:25:07,600 --> 01:25:12,239
sampling which we don't really care

2171
01:25:10,840 --> 01:25:15,600
about

2172
01:25:12,238 --> 01:25:16,559
here we go so you can see us doing our

2173
01:25:15,600 --> 01:25:19,039
array uv

2174
01:25:16,560 --> 01:25:19,600
like you can see the frag texture index

2175
01:25:19,039 --> 01:25:23,119
thing

2176
01:25:19,600 --> 01:25:26,000
right maybe what we do is say if frag

2177
01:25:23,119 --> 01:25:28,238
texture index is zero

2178
01:25:26,000 --> 01:25:28,238
right

2179
01:25:32,079 --> 01:25:35,760
or we could say a frag index is greater

2180
01:25:34,479 --> 01:25:37,919
than or equal to zero and then we just

2181
01:25:35,760 --> 01:25:39,119
pass a frag texture index of negative

2182
01:25:37,920 --> 01:25:41,840
one for things that aren't lit or

2183
01:25:39,119 --> 01:25:41,840
something like this

2184
01:25:42,399 --> 01:25:47,599
that's one way we could do debug

2185
01:25:45,679 --> 01:25:50,079
now the problem with that is if we did

2186
01:25:47,600 --> 01:25:50,079
do that

2187
01:25:50,639 --> 01:25:56,639
it would cause a problem where

2188
01:25:53,679 --> 01:25:56,639
we wouldn't

2189
01:25:59,760 --> 01:26:03,039
it would cause a problem because we

2190
01:26:01,119 --> 01:26:05,119
wouldn't be able to do textured things

2191
01:26:03,039 --> 01:26:08,560
that way

2192
01:26:05,119 --> 01:26:12,000
so again hard to say let's take a look

2193
01:26:08,560 --> 01:26:12,000
at what that value actually is

2194
01:26:21,600 --> 01:26:26,320
so here's our textured vertex uh and you

2195
01:26:24,560 --> 01:26:29,440
can kind of see like

2196
01:26:26,319 --> 01:26:32,479
you know how this is working

2197
01:26:29,439 --> 01:26:34,839
for the texture index we can have a full

2198
01:26:32,479 --> 01:26:37,839
16 bit value

2199
01:26:34,840 --> 01:26:37,840
um

2200
01:26:40,960 --> 01:26:45,119
and it looks like actually we've got

2201
01:26:42,479 --> 01:26:48,238
extra space too so i suppose we could

2202
01:26:45,119 --> 01:26:51,599
just in our vertex have a code

2203
01:26:48,238 --> 01:26:54,718
for lighting or not

2204
01:26:51,600 --> 01:26:58,560
in fact emission would be fine

2205
01:26:54,719 --> 01:26:58,560
right um

2206
01:27:01,840 --> 01:27:05,119
all right so maybe what we do is we just

2207
01:27:03,840 --> 01:27:07,039
pass it in there

2208
01:27:05,119 --> 01:27:08,719
right so we know that we've got a

2209
01:27:07,039 --> 01:27:10,158
reserved value in there and we actually

2210
01:27:08,719 --> 01:27:10,560
know that there's an emission value too

2211
01:27:10,158 --> 01:27:11,920
i just

2212
01:27:10,560 --> 01:27:13,760
i don't know that we're actually using

2213
01:27:11,920 --> 01:27:14,800
it so we could just try to make that

2214
01:27:13,760 --> 01:27:17,119
work

2215
01:27:14,800 --> 01:27:18,239
so maybe we don't have lighting enabled

2216
01:27:17,119 --> 01:27:20,479
that's not a thing

2217
01:27:18,238 --> 01:27:20,479
right

2218
01:27:25,920 --> 01:27:34,480
um and you know maybe this um

2219
01:27:32,399 --> 01:27:38,238
maybe this lighting disabled value also

2220
01:27:34,479 --> 01:27:38,238
is is not really a thing either

2221
01:27:39,520 --> 01:27:44,639
because we can disable it now when we

2222
01:27:41,600 --> 01:27:44,639
pass things down

2223
01:27:45,920 --> 01:27:49,679
so what we really need is some way for

2224
01:27:47,760 --> 01:27:51,520
this thing to get

2225
01:27:49,679 --> 01:27:53,199
in addition to these other ends like

2226
01:27:51,520 --> 01:27:54,480
it's getting that vert texture index and

2227
01:27:53,198 --> 01:27:56,479
all that stuff right

2228
01:27:54,479 --> 01:27:59,119
what we kind of need here is a way for

2229
01:27:56,479 --> 01:28:03,279
this to get the emission value

2230
01:27:59,119 --> 01:28:03,279
you know what i mean um

2231
01:28:04,319 --> 01:28:07,439
and we just stream that in

2232
01:28:07,840 --> 01:28:11,039
and then the emission value would

2233
01:28:09,039 --> 01:28:14,479
control whether you lit

2234
01:28:11,039 --> 01:28:18,560
the vertices or not so basically like

2235
01:28:14,479 --> 01:28:18,559
the l value here

2236
01:28:21,359 --> 01:28:26,079
i guess we would just kind of do a lerp

2237
01:28:26,560 --> 01:28:31,199
i don't i don't really know um

2238
01:28:33,760 --> 01:28:37,760
like that part's a little bit harder to

2239
01:28:36,119 --> 01:28:41,359
conceptualize

2240
01:28:37,760 --> 01:28:43,840
because we're doing like a a sum here

2241
01:28:41,359 --> 01:28:43,839
and

2242
01:28:46,158 --> 01:28:51,439
so i guess we probably just want

2243
01:28:49,119 --> 01:28:57,840
something like

2244
01:28:51,439 --> 01:28:57,839
this we go

2245
01:29:02,800 --> 01:29:06,560
between the like lighting

2246
01:29:08,399 --> 01:29:11,519
that we would compute and the one one

2247
01:29:10,960 --> 01:29:14,639
one

2248
01:29:11,520 --> 01:29:14,639
by just doing a lerp

2249
01:29:15,279 --> 01:29:17,679
i guess

2250
01:29:19,198 --> 01:29:27,439
i mean it's not great um but

2251
01:29:24,079 --> 01:29:29,359
i feel like it's something for now and

2252
01:29:27,439 --> 01:29:30,719
when we're trying to optimize our pixel

2253
01:29:29,359 --> 01:29:33,198
shader later

2254
01:29:30,719 --> 01:29:36,239
maybe then's when we would test to see

2255
01:29:33,198 --> 01:29:39,279
you know what we think about that

2256
01:29:36,238 --> 01:29:42,559
so i want to in here then say

2257
01:29:39,279 --> 01:29:45,759
that the smooth value in

2258
01:29:42,560 --> 01:29:47,600
there is just going to be like an f32 of

2259
01:29:45,760 --> 01:29:53,360
like

2260
01:29:47,600 --> 01:29:57,360
the emission value um

2261
01:29:53,359 --> 01:29:57,359
and that anymore

2262
01:29:57,760 --> 01:30:00,960
did i have these lined up right so

2263
01:29:59,520 --> 01:30:04,639
simmering the depth peel

2264
01:30:00,960 --> 01:30:08,639
light intensity light floor the voxels

2265
01:30:04,639 --> 01:30:08,639
and the diffuse yeah all right fine

2266
01:30:18,840 --> 01:30:21,840
um

2267
01:30:23,520 --> 01:30:31,199
so i guess i'm okay with that

2268
01:30:27,920 --> 01:30:35,840
it does mean that when we use the

2269
01:30:31,198 --> 01:30:35,839
z bias program

2270
01:30:36,000 --> 01:30:39,439
we're going to actually have to set up

2271
01:30:37,920 --> 01:30:42,639
the

2272
01:30:39,439 --> 01:30:44,319
attribute arrays correctly so

2273
01:30:42,639 --> 01:30:45,920
like in here you can kind of see where

2274
01:30:44,319 --> 01:30:48,559
we've got the attribute arrays

2275
01:30:45,920 --> 01:30:50,319
when we do use program we do like the is

2276
01:30:48,560 --> 01:30:53,280
valid

2277
01:30:50,319 --> 01:30:54,238
garbage here so in there what we're

2278
01:30:53,279 --> 01:30:56,719
going to have to do is

2279
01:30:54,238 --> 01:30:58,879
after texture index we're going to have

2280
01:30:56,719 --> 01:31:01,679
to do a similar thing

2281
01:30:58,880 --> 01:31:03,920
we want to do basically the same thing

2282
01:31:01,679 --> 01:31:06,800
as the color array so in here we want to

2283
01:31:03,920 --> 01:31:10,399
say like look

2284
01:31:06,800 --> 01:31:17,840
if the emission array is valid

2285
01:31:10,399 --> 01:31:17,839
then we'll use it

2286
01:31:22,000 --> 01:31:27,039
and we basically want the same thing

2287
01:31:25,039 --> 01:31:29,760
that we were doing for our

2288
01:31:27,039 --> 01:31:30,800
color but we want to unpack it the

2289
01:31:29,760 --> 01:31:34,079
unsigned bytes

2290
01:31:30,800 --> 01:31:37,679
we want to um

2291
01:31:34,079 --> 01:31:37,920
unpack those right and we want them to

2292
01:31:37,679 --> 01:31:41,440
be

2293
01:31:37,920 --> 01:31:45,840
zero to one floats so

2294
01:31:41,439 --> 01:31:45,839
i don't actually know

2295
01:31:47,920 --> 01:31:51,119
i did i don't think we need to do

2296
01:31:49,600 --> 01:31:51,600
anything other than to just say that's

2297
01:31:51,119 --> 01:31:54,559
not an

2298
01:31:51,600 --> 01:31:56,719
i so i think if we just say it's an

2299
01:31:54,560 --> 01:32:00,639
unsigned byte then it will

2300
01:31:56,719 --> 01:32:02,480
unpack it to zero to one automatically

2301
01:32:00,639 --> 01:32:04,239
because that's what it will always do

2302
01:32:02,479 --> 01:32:06,000
with an unsigned byte

2303
01:32:04,238 --> 01:32:07,759
um so although it's really kind of

2304
01:32:06,000 --> 01:32:10,880
squinky and weird

2305
01:32:07,760 --> 01:32:12,719
and we didn't really say that

2306
01:32:10,880 --> 01:32:14,239
i think that's what it will do anyway

2307
01:32:12,719 --> 01:32:16,960
right um

2308
01:32:14,238 --> 01:32:19,279
and so here i can also do the exact same

2309
01:32:16,960 --> 01:32:19,279
thing

2310
01:32:20,000 --> 01:32:27,359
which is that i can just disable it when

2311
01:32:23,198 --> 01:32:30,799
we're done with it

2312
01:32:27,359 --> 01:32:31,920
and that should be it we now have to

2313
01:32:30,800 --> 01:32:34,480
actually

2314
01:32:31,920 --> 01:32:36,079
look up those values so like right now

2315
01:32:34,479 --> 01:32:37,119
like that we'll use them if they were

2316
01:32:36,079 --> 01:32:38,719
there but

2317
01:32:37,119 --> 01:32:40,880
at the moment we don't actually have any

2318
01:32:38,719 --> 01:32:43,920
way to actually do that

2319
01:32:40,880 --> 01:32:46,560
i like to actually put anything in there

2320
01:32:43,920 --> 01:32:47,760
so although we have sort of the vert

2321
01:32:46,560 --> 01:32:49,199
stuff here

2322
01:32:47,760 --> 01:32:52,239
i guess this is actually should have

2323
01:32:49,198 --> 01:32:52,238
been vert emission

2324
01:32:52,639 --> 01:32:56,319
somebody's gonna have to actually do

2325
01:32:54,719 --> 01:32:58,319
something with it right

2326
01:32:56,319 --> 01:32:59,679
so we'll do that in a second but this

2327
01:32:58,319 --> 01:33:01,198
should at least give us the ability to

2328
01:32:59,679 --> 01:33:04,560
use it if anyone actually

2329
01:33:01,198 --> 01:33:04,559
sets it and no one is

2330
01:33:05,600 --> 01:33:09,760
all right so if we run the code now in

2331
01:33:08,319 --> 01:33:12,479
theory it should

2332
01:33:09,760 --> 01:33:14,960
uh still work of course i've got some gl

2333
01:33:12,479 --> 01:33:16,879
error stuff happening here but

2334
01:33:14,960 --> 01:33:18,239
we just won't get any of that because no

2335
01:33:16,880 --> 01:33:19,279
one's actually doing anything with those

2336
01:33:18,238 --> 01:33:21,678
emission values but

2337
01:33:19,279 --> 01:33:25,279
you know so let's take care of the gl

2338
01:33:21,679 --> 01:33:25,279
error messages first but oops

2339
01:33:26,800 --> 01:33:30,079
message there we go

2340
01:33:31,279 --> 01:33:39,279
index out of range really

2341
01:33:35,359 --> 01:33:42,319
what do you mean i also don't know

2342
01:33:39,279 --> 01:33:42,960
like for when we do these prague values

2343
01:33:42,319 --> 01:33:44,960
let's

2344
01:33:42,960 --> 01:33:47,840
let's take a look at the where those are

2345
01:33:44,960 --> 01:33:49,840
coming from at the moment

2346
01:33:47,840 --> 01:33:51,279
so this may not get cleared would be

2347
01:33:49,840 --> 01:33:53,760
another thing so it may just be because

2348
01:33:51,279 --> 01:33:56,158
we're never actually doing this

2349
01:33:53,760 --> 01:33:56,159
we'll see

2350
01:34:01,279 --> 01:34:06,559
um so if i go to the z bias program i

2351
01:34:04,639 --> 01:34:09,520
should probably make this actually

2352
01:34:06,560 --> 01:34:09,920
be properly called vert emission there

2353
01:34:09,520 --> 01:34:11,360
um

2354
01:34:09,920 --> 01:34:13,679
because at the moment i actually wasn't

2355
01:34:11,359 --> 01:34:14,799
doing that so let's take a quick look

2356
01:34:13,679 --> 01:34:16,880
and just make this a little bit better

2357
01:34:14,800 --> 01:34:19,840
so you can see here where we're passing

2358
01:34:16,880 --> 01:34:19,840
emission here

2359
01:34:20,479 --> 01:34:24,079
i might want to call that frag emission

2360
01:34:22,319 --> 01:34:26,238
actually and so in here

2361
01:34:24,079 --> 01:34:27,679
where we actually do the vertex stuff i

2362
01:34:26,238 --> 01:34:32,158
kind of want to do like an int

2363
01:34:27,679 --> 01:34:36,239
f32 vert emission like so

2364
01:34:32,158 --> 01:34:36,238
and then i want to do a smooth out

2365
01:34:36,319 --> 01:34:43,359
f32 frag emission

2366
01:34:39,760 --> 01:34:46,079
and i think i just want

2367
01:34:43,359 --> 01:34:47,359
those to be direct assigned so in much

2368
01:34:46,079 --> 01:34:51,118
the same way we just

2369
01:34:47,359 --> 01:34:53,118
do the vert uv directly there

2370
01:34:51,118 --> 01:34:54,719
we would do the vert emission directly

2371
01:34:53,118 --> 01:34:56,559
so i'd say like frag emission equals

2372
01:34:54,719 --> 01:34:59,279
vert emission

2373
01:34:56,560 --> 01:35:00,080
so it's just a pass through because we

2374
01:34:59,279 --> 01:35:02,479
don't need to change

2375
01:35:00,079 --> 01:35:02,479
it right

2376
01:35:03,439 --> 01:35:07,359
all right so let's look at the compilers

2377
01:35:05,118 --> 01:35:07,359
there

2378
01:35:12,960 --> 01:35:17,039
so i guess i want to look at vertex

2379
01:35:14,880 --> 01:35:20,159
errors if i can here

2380
01:35:17,039 --> 01:35:23,600
and fragment errors

2381
01:35:20,158 --> 01:35:27,279
just to see um i think i can use remedy

2382
01:35:23,600 --> 01:35:30,800
here to make that easier yeah

2383
01:35:27,279 --> 01:35:32,960
remedy the rescue um

2384
01:35:30,800 --> 01:35:33,920
so it looks like emission i just forgot

2385
01:35:32,960 --> 01:35:36,719
to rename

2386
01:35:33,920 --> 01:35:38,319
so like down where we actually use it i

2387
01:35:36,719 --> 01:35:40,000
was still calling it emission instead of

2388
01:35:38,319 --> 01:35:43,840
frag emission

2389
01:35:40,000 --> 01:35:43,840
so let me not do that

2390
01:35:54,639 --> 01:36:01,199
all right so if we now run uh

2391
01:35:57,920 --> 01:36:01,199
let's see what we get here

2392
01:36:05,039 --> 01:36:09,039
why why am i not getting anything

2393
01:36:07,550 --> 01:36:12,639
[Music]

2394
01:36:09,039 --> 01:36:15,359
what is happening something bad is

2395
01:36:12,639 --> 01:36:19,118
happening but i don't know what

2396
01:36:15,359 --> 01:36:22,639
access violation inside the ogl

2397
01:36:19,118 --> 01:36:26,079
nvidia driver so

2398
01:36:22,639 --> 01:36:28,400
i've told it something bad i'm not sure

2399
01:36:26,079 --> 01:36:28,399
what

2400
01:36:28,800 --> 01:36:35,840
what have i done so my vert emission

2401
01:36:32,560 --> 01:36:37,280
is like not right at all but i don't

2402
01:36:35,840 --> 01:36:40,319
know why

2403
01:36:37,279 --> 01:36:42,880
so in here somewhere i said let's get

2404
01:36:40,319 --> 01:36:46,639
the offset of the emission value

2405
01:36:42,880 --> 01:36:53,840
of this unsigned byte i say oh

2406
01:36:46,639 --> 01:36:53,840
that would do it

2407
01:36:54,719 --> 01:36:57,118
all right

2408
01:37:03,359 --> 01:37:08,479
all right so now um at least in theory

2409
01:37:07,118 --> 01:37:10,639
we should get a value you can see that

2410
01:37:08,479 --> 01:37:12,079
since i removed that these would have to

2411
01:37:10,639 --> 01:37:13,440
be having their

2412
01:37:12,079 --> 01:37:15,760
emission values set and they're

2413
01:37:13,439 --> 01:37:18,559
currently not um

2414
01:37:15,760 --> 01:37:19,199
what i can do here is now take a look to

2415
01:37:18,560 --> 01:37:22,480
see if

2416
01:37:19,198 --> 01:37:23,519
that's working at all and so one way

2417
01:37:22,479 --> 01:37:27,599
that i could do that

2418
01:37:23,520 --> 01:37:30,400
is inside where we do like a push quad

2419
01:37:27,600 --> 01:37:31,520
so you can kind of see where we do our

2420
01:37:30,399 --> 01:37:33,519
um

2421
01:37:31,520 --> 01:37:34,880
our quad you know writing here where

2422
01:37:33,520 --> 01:37:38,560
we've got our vertices

2423
01:37:34,880 --> 01:37:38,560
here's us writing our vertices out here

2424
01:37:38,719 --> 01:37:42,480
we could write emission values based on

2425
01:37:40,479 --> 01:37:45,198
whether the lighting is on or off

2426
01:37:42,479 --> 01:37:46,479
right so inside here we know whether the

2427
01:37:45,198 --> 01:37:48,960
lighting's on and off because

2428
01:37:46,479 --> 01:37:50,799
inside the render group it tells us so

2429
01:37:48,960 --> 01:37:54,079
in the render group itself

2430
01:37:50,800 --> 01:37:57,199
we have this value so

2431
01:37:54,079 --> 01:37:57,920
we should be able to in here handle that

2432
01:37:57,198 --> 01:38:00,079
properly

2433
01:37:57,920 --> 01:38:02,719
now i don't actually know if we always

2434
01:38:00,079 --> 01:38:02,719
use this

2435
01:38:09,920 --> 01:38:16,239
so if we look at all the places where

2436
01:38:12,639 --> 01:38:19,600
we're doing that

2437
01:38:16,238 --> 01:38:21,678
you can see that there's

2438
01:38:19,600 --> 01:38:24,560
at least two places so in handmade

2439
01:38:21,679 --> 01:38:27,118
renderer there's some of this

2440
01:38:24,560 --> 01:38:27,760
and in render geometry so here's a right

2441
01:38:27,118 --> 01:38:30,079
quad

2442
01:38:27,760 --> 01:38:31,520
right so there's a couple of people who

2443
01:38:30,079 --> 01:38:33,840
actually do this

2444
01:38:31,520 --> 01:38:33,840
and

2445
01:38:42,158 --> 01:38:49,679
we kind of need some way of

2446
01:38:45,920 --> 01:38:49,679
making that be congruent so

2447
01:38:50,158 --> 01:38:53,839
if we take a look at where the geometry

2448
01:38:52,000 --> 01:38:56,158
output stuff happens

2449
01:38:53,840 --> 01:38:58,639
that would probably be a good place to

2450
01:38:56,158 --> 01:39:01,439
think about this more

2451
01:38:58,639 --> 01:39:04,000
i think probably most people want this

2452
01:39:01,439 --> 01:39:07,198
emission value set to zero

2453
01:39:04,000 --> 01:39:07,198
so i'm just going to do that

2454
01:39:09,118 --> 01:39:13,759
and then only in like the debug code

2455
01:39:11,359 --> 01:39:16,960
will we set it at the moment

2456
01:39:13,760 --> 01:39:18,639
to anything else so

2457
01:39:16,960 --> 01:39:20,719
that's one place we write them and the

2458
01:39:18,639 --> 01:39:23,118
other two places we write them really

2459
01:39:20,719 --> 01:39:25,439
so very very few places we actually look

2460
01:39:23,118 --> 01:39:25,439
at this

2461
01:39:25,679 --> 01:39:33,679
but one is here and one is here

2462
01:39:28,719 --> 01:39:33,679
so in output quads

2463
01:39:35,118 --> 01:39:38,479
doesn't ever write it's just sort of

2464
01:39:36,719 --> 01:39:39,679
keeping that in mind so it's really just

2465
01:39:38,479 --> 01:39:41,039
only here

2466
01:39:39,679 --> 01:39:43,039
so what we should be able to do here is

2467
01:39:41,039 --> 01:39:45,439
set this to an emission value so all of

2468
01:39:43,039 --> 01:39:45,439
these

2469
01:39:48,639 --> 01:39:55,840
should be settable to like some value

2470
01:39:52,840 --> 01:39:55,840
right

2471
01:40:06,840 --> 01:40:09,840
um

2472
01:40:09,920 --> 01:40:13,118
um and so now what we can do is just set

2473
01:40:11,920 --> 01:40:16,319
this value like

2474
01:40:13,118 --> 01:40:19,279
our emission value can be a look to see

2475
01:40:16,319 --> 01:40:19,920
is lighting enabled and if it is then it

2476
01:40:19,279 --> 01:40:22,238
can be

2477
01:40:19,920 --> 01:40:23,520
you know zero zero otherwise it can be

2478
01:40:22,238 --> 01:40:25,839
ff

2479
01:40:23,520 --> 01:40:27,280
um and that should in theory give us

2480
01:40:25,840 --> 01:40:30,880
something we want

2481
01:40:27,279 --> 01:40:33,359
um we'll find out so

2482
01:40:30,880 --> 01:40:33,359
wait what

2483
01:40:35,359 --> 01:40:39,359
oh we actually pass in an emission value

2484
01:40:37,439 --> 01:40:41,678
here

2485
01:40:39,359 --> 01:40:41,679
um

2486
01:40:43,439 --> 01:40:50,799
i'm not going to use that at the

2487
01:40:44,560 --> 01:40:52,719
immediate moment

2488
01:40:50,800 --> 01:40:54,159
but we may want to use that later

2489
01:40:52,719 --> 01:40:55,600
because we could actually pack that

2490
01:40:54,158 --> 01:40:58,000
value down

2491
01:40:55,600 --> 01:40:58,000
actually

2492
01:41:01,600 --> 01:41:06,960
all right um so now

2493
01:41:05,439 --> 01:41:09,118
actually we can see that this already

2494
01:41:06,960 --> 01:41:11,118
works which is kind of cool

2495
01:41:09,118 --> 01:41:12,719
so you can see that now our code that

2496
01:41:11,118 --> 01:41:14,319
previously had lighting turned off which

2497
01:41:12,719 --> 01:41:15,279
was like the debug overlays actually

2498
01:41:14,319 --> 01:41:18,719
works now

2499
01:41:15,279 --> 01:41:22,559
with no hack right and that's nice

2500
01:41:18,719 --> 01:41:24,960
um and so now

2501
01:41:22,560 --> 01:41:26,239
uh what we need to be able to do is set

2502
01:41:24,960 --> 01:41:28,880
it to be off for

2503
01:41:26,238 --> 01:41:30,839
certain things like for the debug stuff

2504
01:41:28,880 --> 01:41:33,840
there right

2505
01:41:30,840 --> 01:41:33,840
and

2506
01:41:35,118 --> 01:41:39,519
i guess the easiest way to do that would

2507
01:41:37,198 --> 01:41:43,279
be to literally just use the packing

2508
01:41:39,520 --> 01:41:44,639
so when we go to

2509
01:41:43,279 --> 01:41:45,679
i mean this yeah there's a couple

2510
01:41:44,639 --> 01:41:47,679
different ways we can do it i'm not

2511
01:41:45,679 --> 01:41:49,920
really sure which one we want to use

2512
01:41:47,679 --> 01:41:50,960
um because this is not really the part

2513
01:41:49,920 --> 01:41:52,399
of the code that i really want to be

2514
01:41:50,960 --> 01:41:54,560
working on right now so i'm not

2515
01:41:52,399 --> 01:41:58,319
motivated to like do

2516
01:41:54,560 --> 01:41:59,920
um like a super

2517
01:41:58,319 --> 01:42:03,359
fancy solution but if we take a look at

2518
01:41:59,920 --> 01:42:03,359
how push line segment works

2519
01:42:03,520 --> 01:42:07,199
you can see that it just falls through

2520
01:42:05,198 --> 01:42:09,839
uh to push quad here and

2521
01:42:07,198 --> 01:42:11,839
probably what i would assume is that in

2522
01:42:09,840 --> 01:42:13,039
this particular case the push quad that

2523
01:42:11,840 --> 01:42:14,560
it's calling

2524
01:42:13,039 --> 01:42:16,399
we probably just want to pass a full

2525
01:42:14,560 --> 01:42:18,080
emission value down right

2526
01:42:16,399 --> 01:42:20,479
so we just say that emission was one

2527
01:42:18,079 --> 01:42:28,800
there and then when we do an

2528
01:42:20,479 --> 01:42:31,759
the actual push quad

2529
01:42:28,800 --> 01:42:33,279
yeah which is here uh what we want to do

2530
01:42:31,760 --> 01:42:34,719
is pack the vert emission

2531
01:42:33,279 --> 01:42:38,399
so probably what we want to do is say

2532
01:42:34,719 --> 01:42:41,679
like look if group lighting enabled

2533
01:42:38,399 --> 01:42:44,479
um if that's not on

2534
01:42:41,679 --> 01:42:45,760
then the emission value is one always

2535
01:42:44,479 --> 01:42:48,399
because

2536
01:42:45,760 --> 01:42:49,840
it just it's automatically going to not

2537
01:42:48,399 --> 01:42:52,479
use the lighting

2538
01:42:49,840 --> 01:42:54,159
but otherwise we should actually pack

2539
01:42:52,479 --> 01:42:57,839
that value

2540
01:42:54,158 --> 01:43:00,079
down so we should have a like

2541
01:42:57,840 --> 01:43:00,079
um

2542
01:43:02,639 --> 01:43:05,840
we we sort of want like a clamp by

2543
01:43:04,639 --> 01:43:08,159
normal pact

2544
01:43:05,840 --> 01:43:09,760
but i don't know if what we've got so

2545
01:43:08,158 --> 01:43:10,000
it's like it's basically you know the

2546
01:43:09,760 --> 01:43:11,920
same

2547
01:43:10,000 --> 01:43:14,800
as a bgra pack but we're only doing it

2548
01:43:11,920 --> 01:43:17,359
for one value so like

2549
01:43:14,800 --> 01:43:18,159
we want the ability to pack one of the

2550
01:43:17,359 --> 01:43:20,960
one of these

2551
01:43:18,158 --> 01:43:20,960
you know just one

2552
01:43:22,079 --> 01:43:26,158
and i don't know what we've got for that

2553
01:43:24,560 --> 01:43:27,199
at the immediate moment right like i

2554
01:43:26,158 --> 01:43:30,638
don't actually know

2555
01:43:27,198 --> 01:43:33,198
what's going on with that but somewhere

2556
01:43:30,639 --> 01:43:36,960
in here what we want to do is say

2557
01:43:33,198 --> 01:43:40,158
okay like clamp zero to one

2558
01:43:36,960 --> 01:43:42,480
emission times 255

2559
01:43:40,158 --> 01:43:42,479
right

2560
01:43:50,840 --> 01:43:54,800
basically

2561
01:43:52,719 --> 01:43:56,158
so we're just packing to 255 just

2562
01:43:54,800 --> 01:43:57,760
because that's what the graphs card

2563
01:43:56,158 --> 01:43:59,439
can read more efficiently like there's

2564
01:43:57,760 --> 01:44:00,880
no sense storing a whole float because

2565
01:43:59,439 --> 01:44:02,799
the emission just doesn't need to be

2566
01:44:00,880 --> 01:44:05,920
that detailed

2567
01:44:02,800 --> 01:44:06,239
um and so now in theory like we should

2568
01:44:05,920 --> 01:44:09,118
and

2569
01:44:06,238 --> 01:44:10,879
and do which is great um we should be

2570
01:44:09,118 --> 01:44:11,519
able to see our debug colors properly

2571
01:44:10,880 --> 01:44:13,118
right

2572
01:44:11,520 --> 01:44:16,159
and so you can now see like it's kind of

2573
01:44:13,118 --> 01:44:18,880
nice and clean coming through here

2574
01:44:16,158 --> 01:44:20,000
uh all of the colors are as i asked them

2575
01:44:18,880 --> 01:44:21,760
to be

2576
01:44:20,000 --> 01:44:23,520
so now it should allow me to do

2577
01:44:21,760 --> 01:44:25,280
something um

2578
01:44:23,520 --> 01:44:27,199
with my existing code and we'll

2579
01:44:25,279 --> 01:44:28,479
basically be stopping here for today

2580
01:44:27,198 --> 01:44:30,799
i don't know how much time we have left

2581
01:44:28,479 --> 01:44:31,519
but probably very little at most 15

2582
01:44:30,800 --> 01:44:33,279
minutes but

2583
01:44:31,520 --> 01:44:36,239
possibly like as little as one minute i

2584
01:44:33,279 --> 01:44:36,238
don't actually remember

2585
01:44:41,920 --> 01:44:45,600
but anyway what i was trying to say was

2586
01:44:46,639 --> 01:44:49,920
now i should be able to do stuff like

2587
01:44:48,319 --> 01:44:52,639
change the lighting

2588
01:44:49,920 --> 01:44:54,239
how bright like one of those cubes is

2589
01:44:52,639 --> 01:44:56,079
based on whether it has leaves or not

2590
01:44:54,238 --> 01:44:58,638
and other things like this

2591
01:44:56,079 --> 01:44:59,439
so inside the grid raycast code uh what

2592
01:44:58,639 --> 01:45:03,118
i can do now

2593
01:44:59,439 --> 01:45:06,638
is take a look and say okay

2594
01:45:03,118 --> 01:45:08,158
when we actually do the leaf hit testing

2595
01:45:06,639 --> 01:45:09,679
so you can see us looking at the cell

2596
01:45:08,158 --> 01:45:12,079
bounds here right

2597
01:45:09,679 --> 01:45:13,359
i can look and say you know are these

2598
01:45:12,079 --> 01:45:17,679
two different

2599
01:45:13,359 --> 01:45:21,039
so i can do something like

2600
01:45:17,679 --> 01:45:24,000
uh you know v3 color

2601
01:45:21,039 --> 01:45:24,000
or box color

2602
01:45:24,158 --> 01:45:28,000
equals you know

2603
01:45:28,960 --> 01:45:31,840
these two things

2604
01:45:32,719 --> 01:45:37,198
being equal to each other and then

2605
01:45:35,520 --> 01:45:37,520
produce two different colors based on

2606
01:45:37,198 --> 01:45:41,198
that

2607
01:45:37,520 --> 01:45:44,800
right so then i can say

2608
01:45:41,198 --> 01:45:49,919
you know

2609
01:45:44,800 --> 01:45:49,920
i'm gonna make this thing be dim

2610
01:45:50,800 --> 01:45:55,679
uh cyan in the case where there isn't

2611
01:45:56,840 --> 01:46:04,159
and bright cyan

2612
01:46:00,238 --> 01:46:07,198
in the case where there is um

2613
01:46:04,158 --> 01:46:09,359
and then that way like when we

2614
01:46:07,198 --> 01:46:09,359
just

2615
01:46:10,319 --> 01:46:15,198
don't why i did that um and that way i

2616
01:46:13,760 --> 01:46:17,600
can just have a little bit

2617
01:46:15,198 --> 01:46:18,638
better understanding of as we're

2618
01:46:17,600 --> 01:46:20,480
traversing through

2619
01:46:18,639 --> 01:46:21,920
like did it ever test any leaves at all

2620
01:46:20,479 --> 01:46:23,439
and then eventually we'll draw the

2621
01:46:21,920 --> 01:46:24,960
actual leaves themselves but i just kind

2622
01:46:23,439 --> 01:46:27,919
of wanted to see

2623
01:46:24,960 --> 01:46:28,399
um and what you can sort of see there is

2624
01:46:27,920 --> 01:46:32,639
some

2625
01:46:28,399 --> 01:46:35,599
sort of semi-nonsensical uh results

2626
01:46:32,639 --> 01:46:38,079
so it looks to me and i could be very

2627
01:46:35,600 --> 01:46:40,800
wrong about that but it looks to me

2628
01:46:38,079 --> 01:46:42,079
like these are actually in and maybe

2629
01:46:40,800 --> 01:46:45,360
this was too subtle like

2630
01:46:42,079 --> 01:46:45,359
maybe this should have been like

2631
01:46:46,158 --> 01:46:50,000
this so we can really see what the

2632
01:46:48,399 --> 01:46:53,198
difference is right

2633
01:46:50,000 --> 01:46:55,198
um and that way there's like no

2634
01:46:53,198 --> 01:46:58,238
ambiguity whatsoever

2635
01:46:55,198 --> 01:47:00,238
whether we've uh hit one or not

2636
01:46:58,238 --> 01:47:02,959
and so when i run this now i should see

2637
01:47:00,238 --> 01:47:05,599
like which ones have leaves yeah

2638
01:47:02,960 --> 01:47:06,960
so you know this gives us i'm gonna go

2639
01:47:05,600 --> 01:47:09,440
ahead and wind down for today but this

2640
01:47:06,960 --> 01:47:10,960
gives us a great place to start tomorrow

2641
01:47:09,439 --> 01:47:12,158
we've got our ability to draw things

2642
01:47:10,960 --> 01:47:15,520
clearly we now

2643
01:47:12,158 --> 01:47:18,238
know like definitively that

2644
01:47:15,520 --> 01:47:20,719
some weird stuff's happening with the

2645
01:47:18,238 --> 01:47:22,718
spatial data structure because we're

2646
01:47:20,719 --> 01:47:24,158
these all supposedly have leaves which

2647
01:47:22,719 --> 01:47:25,920
they obviously don't

2648
01:47:24,158 --> 01:47:28,319
only this one should have a leaf the

2649
01:47:25,920 --> 01:47:31,359
rest of these should like at least

2650
01:47:28,319 --> 01:47:32,880
these two and that one like so these

2651
01:47:31,359 --> 01:47:34,479
three right here are the only ones that

2652
01:47:32,880 --> 01:47:36,880
could plausibly have

2653
01:47:34,479 --> 01:47:38,079
colliders in them these obviously don't

2654
01:47:36,880 --> 01:47:39,840
i mean we're looking at them there's

2655
01:47:38,079 --> 01:47:41,760
clearly no colliders there

2656
01:47:39,840 --> 01:47:43,760
so that's great too because that allows

2657
01:47:41,760 --> 01:47:47,520
us to sort of

2658
01:47:43,760 --> 01:47:48,560
uh give us a great place to start

2659
01:47:47,520 --> 01:47:52,159
debugging from our we already know we're

2660
01:47:48,560 --> 01:47:52,159
going to do so we'll go to a brief q a

2661
01:48:03,039 --> 01:48:09,679
i agree that the hair is getting

2662
01:48:06,079 --> 01:48:13,118
very cartoonish i'm uh

2663
01:48:09,679 --> 01:48:19,840
i'm kind of thinking uh

2664
01:48:13,118 --> 01:48:19,839
let me just uh see if i can find it here

2665
01:48:28,560 --> 01:48:34,800
i uh i thought there was

2666
01:48:31,679 --> 01:48:37,679
a um yeah so like

2667
01:48:34,800 --> 01:48:38,639
i feel like i could kind of start going

2668
01:48:37,679 --> 01:48:41,279
down this route

2669
01:48:38,639 --> 01:48:41,760
a little bit like like i feel like i

2670
01:48:41,279 --> 01:48:44,960
could

2671
01:48:41,760 --> 01:48:48,560
i could do some wilson cosplay pretty s

2672
01:48:44,960 --> 01:48:48,560
pretty cert uh soon here

2673
01:48:52,479 --> 01:48:56,638
okay somebody needs to capture that in

2674
01:48:54,319 --> 01:48:57,519
sobot comment and send it to abner

2675
01:48:56,639 --> 01:49:00,400
coimbre

2676
01:48:57,520 --> 01:49:01,920
because five plus hour majora's mask

2677
01:49:00,399 --> 01:49:04,638
sounds like something that he would be

2678
01:49:01,920 --> 01:49:04,639
very interested in

2679
01:49:07,920 --> 01:49:10,480
performance might have changed since you

2680
01:49:09,118 --> 01:49:11,679
removed the early out oh yeah definitely

2681
01:49:10,479 --> 01:49:13,519
i mean

2682
01:49:11,679 --> 01:49:15,440
we have no idea what the performance of

2683
01:49:13,520 --> 01:49:18,560
this routine is

2684
01:49:15,439 --> 01:49:21,839
at all right we have literally no idea

2685
01:49:18,560 --> 01:49:23,920
because we have to get it working

2686
01:49:21,840 --> 01:49:25,840
properly first

2687
01:49:23,920 --> 01:49:28,239
and then we can actually benchmark it we

2688
01:49:25,840 --> 01:49:30,880
have we have no idea what it's doing

2689
01:49:28,238 --> 01:49:32,638
so we'll get it working first then we'll

2690
01:49:30,880 --> 01:49:34,480
do another capture

2691
01:49:32,639 --> 01:49:35,920
and then we'll run the two different

2692
01:49:34,479 --> 01:49:39,359
routines

2693
01:49:35,920 --> 01:49:43,039
um together to see which one

2694
01:49:39,359 --> 01:49:45,279
performs better right and we can also

2695
01:49:43,039 --> 01:49:47,920
take some v-tune testing

2696
01:49:45,279 --> 01:49:51,519
to see whether there's obvious things we

2697
01:49:47,920 --> 01:49:51,520
can do to improve either of them

2698
01:49:55,279 --> 01:49:57,840
i love right

2699
01:50:36,158 --> 01:50:39,679
looks quiet so i guess we can just wrap

2700
01:50:37,679 --> 01:50:41,679
it up

2701
01:50:39,679 --> 01:50:42,800
all right thank you everybody for

2702
01:50:41,679 --> 01:50:43,920
joining me for another episode of

2703
01:50:42,800 --> 01:50:45,440
handmade hero it's been a pleasure

2704
01:50:43,920 --> 01:50:46,719
coming with you as always if you would

2705
01:50:45,439 --> 01:50:48,000
like to follow along with the series at

2706
01:50:46,719 --> 01:50:50,800
home you can always

2707
01:50:48,000 --> 01:50:52,000
go to handmadehero.org and pre-order the

2708
01:50:50,800 --> 01:50:54,639
game it comes with the source code

2709
01:50:52,000 --> 01:50:56,639
so you can follow along with it um i

2710
01:50:54,639 --> 01:50:59,118
will be back here tomorrow to

2711
01:50:56,639 --> 01:51:00,719
do the next phase of debugging um i

2712
01:50:59,118 --> 01:51:02,559
think today pretty much went exactly as

2713
01:51:00,719 --> 01:51:03,920
i hoped it would meaning

2714
01:51:02,560 --> 01:51:05,760
what i said at the beginning about how

2715
01:51:03,920 --> 01:51:06,000
visualization helps you zero in on bugs

2716
01:51:05,760 --> 01:51:08,400
very

2717
01:51:06,000 --> 01:51:10,000
quickly much faster than say unit

2718
01:51:08,399 --> 01:51:12,719
testing or things like that for

2719
01:51:10,000 --> 01:51:13,118
algorithms of this kind of complexity

2720
01:51:12,719 --> 01:51:17,599
and

2721
01:51:13,118 --> 01:51:19,598
geometric sort of you know orientation

2722
01:51:17,599 --> 01:51:20,960
and i think that's exactly what we saw

2723
01:51:19,599 --> 01:51:25,039
right we were able to

2724
01:51:20,960 --> 01:51:27,118
find at least three bugs very quickly

2725
01:51:25,039 --> 01:51:28,319
um by doing nothing other than just

2726
01:51:27,118 --> 01:51:30,639
drawing

2727
01:51:28,319 --> 01:51:32,238
and so for something like lighting where

2728
01:51:30,639 --> 01:51:34,639
it's such a visual problem anyway it

2729
01:51:32,238 --> 01:51:36,158
just works really really well

2730
01:51:34,639 --> 01:51:37,520
anyway now that you have the ability to

2731
01:51:36,158 --> 01:51:39,279
do that if you are following along with

2732
01:51:37,520 --> 01:51:39,920
source at home you should be able to go

2733
01:51:39,279 --> 01:51:41,759
find

2734
01:51:39,920 --> 01:51:43,199
some more of the bugs before i do

2735
01:51:41,760 --> 01:51:45,360
tomorrow uh

2736
01:51:43,198 --> 01:51:47,039
because i can't program until then and

2737
01:51:45,359 --> 01:51:48,238
you can so you should try that if you're

2738
01:51:47,039 --> 01:51:50,960
interested in an exercise

2739
01:51:48,238 --> 01:51:52,319
but i will be back here tomorrow um

2740
01:51:50,960 --> 01:51:54,079
hopefully i'll remember that the time is

2741
01:51:52,319 --> 01:51:56,238
11 not 12 tomorrow

2742
01:51:54,079 --> 01:51:57,519
uh to do the next round of debugging

2743
01:51:56,238 --> 01:51:59,919
hope to see you back here for that

2744
01:51:57,520 --> 01:52:01,280
until then have fun programming everyone

2745
01:51:59,920 --> 01:52:03,840
and i'll see you on the internet take it

2746
01:52:01,279 --> 01:52:03,840
easy everybody

