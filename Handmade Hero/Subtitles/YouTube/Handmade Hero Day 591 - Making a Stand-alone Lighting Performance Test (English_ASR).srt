1
00:00:00,949 --> 00:00:06,569
hello everyone and welcome to handmade

2
00:00:03,870 --> 00:00:11,160
Hero show recode a complete-game live on

3
00:00:06,569 --> 00:00:14,460
stream I am going to take a look at our

4
00:00:11,160 --> 00:00:17,940
Rick casting today we actually aren't

5
00:00:14,460 --> 00:00:19,769
running that poorly if you take a look

6
00:00:17,940 --> 00:00:21,300
at where we're starting it's actually

7
00:00:19,769 --> 00:00:23,070
not that bad

8
00:00:21,300 --> 00:00:24,929
I thought we were gonna be worse off

9
00:00:23,070 --> 00:00:29,160
than we were but when we actually made

10
00:00:24,929 --> 00:00:33,869
the bounds of our of our lighting

11
00:00:29,160 --> 00:00:36,149
solution a tighter fit if you will for

12
00:00:33,869 --> 00:00:43,140
what we were doing so if you look on

13
00:00:36,149 --> 00:00:45,000
here oh I forgot I haven't actually run

14
00:00:43,140 --> 00:00:48,989
Oh actually do I save this I probably

15
00:00:45,000 --> 00:00:51,420
save this let me open it I mention that

16
00:00:48,988 --> 00:00:53,788
we're trying a new version of remedy

17
00:00:51,420 --> 00:00:57,390
today that I have not tried yet let me

18
00:00:53,789 --> 00:01:02,820
go ahead and load that up here there we

19
00:00:57,390 --> 00:01:04,349
go yeah there we go so I was about to

20
00:01:02,820 --> 00:01:06,450
say some stuff about handmade hero but

21
00:01:04,349 --> 00:01:07,890
I'm actually going to pause and say what

22
00:01:06,450 --> 00:01:10,079
I really should be talking about first

23
00:01:07,890 --> 00:01:15,000
is the fact that we now have version 3

24
00:01:10,079 --> 00:01:17,219
of remedy which is the debugger and I

25
00:01:15,000 --> 00:01:18,868
don't know for those of you have

26
00:01:17,219 --> 00:01:20,849
followed the stream for a long time you

27
00:01:18,868 --> 00:01:24,719
know that we used to use Visual Studio

28
00:01:20,849 --> 00:01:27,390
for debugging that was because it's just

29
00:01:24,719 --> 00:01:29,310
a better human factors debugger than

30
00:01:27,390 --> 00:01:32,310
pretty much anything else you can use at

31
00:01:29,310 --> 00:01:35,100
the time on Windows it's not a good

32
00:01:32,310 --> 00:01:37,379
debugger but it's it's good at

33
00:01:35,099 --> 00:01:39,328
displaying information and it's good at

34
00:01:37,379 --> 00:01:41,399
quickly restarting your program and you

35
00:01:39,328 --> 00:01:44,179
know it basically had all of the like

36
00:01:41,400 --> 00:01:46,859
good user interface that you would need

37
00:01:44,180 --> 00:01:50,399
by comparison to other debuggers on the

38
00:01:46,859 --> 00:01:51,509
platform so that's why you know that

39
00:01:50,399 --> 00:01:54,450
that's what we were using when we

40
00:01:51,509 --> 00:01:57,299
started handmade hero now in that way

41
00:01:54,450 --> 00:01:59,219
that that Microsoft generally I mean

42
00:01:57,299 --> 00:02:02,070
pretty much exclusively for the past 20

43
00:01:59,218 --> 00:02:03,780
years only ships worse versions of their

44
00:02:02,069 --> 00:02:06,569
software each time so if you were using

45
00:02:03,780 --> 00:02:08,250
you know version 5 and you get version 6

46
00:02:06,569 --> 00:02:09,899
it's worse than version 5 and you get

47
00:02:08,250 --> 00:02:12,120
version 7 it's worse than version 6

48
00:02:09,899 --> 00:02:13,129
sometimes it gets dramatically worse you

49
00:02:12,120 --> 00:02:15,110
know like Windows

50
00:02:13,129 --> 00:02:17,539
7 to Windows 8 sometimes it's only

51
00:02:15,110 --> 00:02:19,700
slightly worse like each update of

52
00:02:17,539 --> 00:02:22,099
Windows 10 where it just gets you know a

53
00:02:19,699 --> 00:02:23,839
little bit worse each time until you

54
00:02:22,099 --> 00:02:25,460
know eventually it's gotten dramatically

55
00:02:23,840 --> 00:02:29,689
worse over the course of several updates

56
00:02:25,460 --> 00:02:31,879
etc so Visual Studio had been decaying

57
00:02:29,689 --> 00:02:33,650
for many years the last really good I

58
00:02:31,879 --> 00:02:36,109
mean I'm really good but the last like

59
00:02:33,650 --> 00:02:39,379
version you probably want to use was 5 6

60
00:02:36,110 --> 00:02:41,660
was ok and then everything after that so

61
00:02:39,379 --> 00:02:43,789
2005 2008 and so on have just been

62
00:02:41,659 --> 00:02:47,090
getting really bad and now it's it's

63
00:02:43,789 --> 00:02:49,579
really pretty bad it's very slow it has

64
00:02:47,090 --> 00:02:52,909
a lot of bugs in it it's it's bad it

65
00:02:49,580 --> 00:02:54,860
crashes a lot and so on uh so we had

66
00:02:52,909 --> 00:02:56,659
kind of been struggling with that and I

67
00:02:54,860 --> 00:03:00,170
had said multiple times on stream I'm

68
00:02:56,659 --> 00:03:02,539
like somebody needs to make a deburr to

69
00:03:00,169 --> 00:03:03,979
replace this thing it is garbage and not

70
00:03:02,539 --> 00:03:07,099
to mention the fact that installing it

71
00:03:03,979 --> 00:03:09,709
is a huge chore it takes it oftentimes

72
00:03:07,099 --> 00:03:12,289
you know are just fails you you know you

73
00:03:09,710 --> 00:03:14,180
you get inexplicable errors that don't

74
00:03:12,289 --> 00:03:16,250
work you have to create a Microsoft

75
00:03:14,180 --> 00:03:19,610
account to install it even if you paid

76
00:03:16,250 --> 00:03:21,439
for it it's a it's a disaster and it

77
00:03:19,610 --> 00:03:24,140
installs like sequel server on your

78
00:03:21,439 --> 00:03:25,579
machine it's it's it's unfathomably bad

79
00:03:24,139 --> 00:03:28,399
in terms of the installation process for

80
00:03:25,580 --> 00:03:29,960
a debugger right because you can only

81
00:03:28,400 --> 00:03:33,969
get it as part of the IDE and the ID has

82
00:03:29,960 --> 00:03:38,090
all kinds of crap you don't want so

83
00:03:33,969 --> 00:03:41,000
eventually actually somebody and it's

84
00:03:38,090 --> 00:03:43,550
it's X 13 pixels on the chat was like

85
00:03:41,000 --> 00:03:46,340
alright I'm gonna do something about

86
00:03:43,550 --> 00:03:48,200
this and they started writing a debugger

87
00:03:46,340 --> 00:03:50,270
and eventually they actually got it good

88
00:03:48,199 --> 00:03:51,889
enough a 1.0 and we started using on a

89
00:03:50,270 --> 00:03:54,920
stream and it you know was missing a

90
00:03:51,889 --> 00:03:57,109
bunch of features but it was just plain

91
00:03:54,919 --> 00:03:58,969
better to use than Visual Studio and

92
00:03:57,110 --> 00:04:02,420
it's it's remedy BG it's this debugger

93
00:03:58,969 --> 00:04:05,270
right here and we just started using it

94
00:04:02,419 --> 00:04:07,039
and it's like it's super fast it steps

95
00:04:05,270 --> 00:04:09,110
and updates the watch windows so much

96
00:04:07,039 --> 00:04:12,169
faster the visual studio it's got the

97
00:04:09,110 --> 00:04:14,090
same kind of clean easy-to-use systems

98
00:04:12,169 --> 00:04:15,649
that Visual Studio had that made it

99
00:04:14,090 --> 00:04:17,329
preferable where you can just quickly do

100
00:04:15,650 --> 00:04:18,858
what you want and you don't have to wade

101
00:04:17,329 --> 00:04:21,019
through tons of command line parameters

102
00:04:18,858 --> 00:04:22,789
and and hard to view windows like it

103
00:04:21,019 --> 00:04:26,209
actually shows you what you need to know

104
00:04:22,790 --> 00:04:27,110
when you need to know it but didn't have

105
00:04:26,209 --> 00:04:29,089
all the crappy bad

106
00:04:27,110 --> 00:04:30,408
individual studio it's one eggsy you can

107
00:04:29,089 --> 00:04:33,500
literally just copy the EXCI on your

108
00:04:30,408 --> 00:04:35,389
machine and it and it works loads

109
00:04:33,500 --> 00:04:39,129
instantly it runs instantly it's great

110
00:04:35,389 --> 00:04:41,418
and then steadily since that version 1.0

111
00:04:39,129 --> 00:04:42,110
it's just been getting better and better

112
00:04:41,418 --> 00:04:45,889
and better

113
00:04:42,110 --> 00:04:50,960
now in this version 3 which we've just

114
00:04:45,889 --> 00:04:54,519
upgraded to and X 13 pixels in the track

115
00:04:50,959 --> 00:04:57,408
and correct me if I'm wrong but I think

116
00:04:54,519 --> 00:04:59,959
he actually did something that I

117
00:04:57,408 --> 00:05:01,968
literally don't know if any debugger has

118
00:04:59,959 --> 00:05:03,859
ever done and it's kind of a

119
00:05:01,968 --> 00:05:06,259
breakthrough feature for people who use

120
00:05:03,860 --> 00:05:10,069
this so I'll describe what it is correct

121
00:05:06,259 --> 00:05:13,430
me if I'm wrong X 13 conditional

122
00:05:10,069 --> 00:05:15,139
breakpoints were added in this version

123
00:05:13,430 --> 00:05:16,879
of the bugger so a conditional

124
00:05:15,139 --> 00:05:22,639
breakpoint is like if you have a

125
00:05:16,879 --> 00:05:25,849
breakpoint and you want to change it so

126
00:05:22,639 --> 00:05:28,310
that it only happens like sometimes

127
00:05:25,848 --> 00:05:30,438
right so you want to say look I'm a type

128
00:05:28,310 --> 00:05:35,990
a piece of code in here you know like oh

129
00:05:30,439 --> 00:05:39,729
if X equals 5 or something right um if

130
00:05:35,990 --> 00:05:43,418
you want to do conditional breakpoints

131
00:05:39,728 --> 00:05:46,459
obviously that requires evaluating C

132
00:05:43,418 --> 00:05:48,649
expressions while your program is

133
00:05:46,459 --> 00:05:50,508
running because every time you go and

134
00:05:48,649 --> 00:05:52,788
hit that particular breakpoint

135
00:05:50,509 --> 00:05:56,300
traditionally what was done in say

136
00:05:52,788 --> 00:05:58,338
Visual Studio is it would actually use

137
00:05:56,300 --> 00:05:59,718
an actual breakpoint so it would you

138
00:05:58,338 --> 00:06:02,538
know use an int 3 or something to

139
00:05:59,718 --> 00:06:05,149
actually stop the code when it hit there

140
00:06:02,538 --> 00:06:07,068
it would then branch to Visual Studio

141
00:06:05,149 --> 00:06:09,378
which would actually go run its

142
00:06:07,069 --> 00:06:11,120
expression evaluator and then if the

143
00:06:09,379 --> 00:06:14,120
expression evaluated it true it would

144
00:06:11,120 --> 00:06:15,348
then actually break the program into the

145
00:06:14,120 --> 00:06:19,459
debugger meaning it would show you that

146
00:06:15,348 --> 00:06:21,528
break otherwise we just resume right so

147
00:06:19,459 --> 00:06:22,938
what that means is that anytime you ran

148
00:06:21,528 --> 00:06:25,310
with conditional breakpoints you've got

149
00:06:22,939 --> 00:06:27,289
a massive slowdown because every time it

150
00:06:25,310 --> 00:06:29,360
hit that break point it was going to

151
00:06:27,288 --> 00:06:31,639
have to do this whole process well I

152
00:06:29,360 --> 00:06:37,129
believe what X 13 pixels did and correct

153
00:06:31,639 --> 00:06:40,840
me if I'm wrong is actually it compiles

154
00:06:37,129 --> 00:06:44,360
the actual expression into your

155
00:06:40,839 --> 00:06:47,929
code like into your executable and jumps

156
00:06:44,360 --> 00:06:50,379
and patches that with a jump am i right

157
00:06:47,930 --> 00:06:50,379
about that

158
00:06:50,589 --> 00:06:53,889
let me check

159
00:06:58,598 --> 00:07:03,118
didn't know today so how is it so much

160
00:07:00,879 --> 00:07:03,119
faster

161
00:07:17,550 --> 00:07:22,720
okay I'd take it back so X 15 pixels

162
00:07:20,649 --> 00:07:25,629
tells me because it's 15 times faster

163
00:07:22,720 --> 00:07:27,790
than visual studio and so I assumed he

164
00:07:25,629 --> 00:07:29,649
was actually trying to do that but

165
00:07:27,790 --> 00:07:31,870
because he had talked about doing that

166
00:07:29,649 --> 00:07:35,829
before he's saying that it's actually

167
00:07:31,870 --> 00:07:49,120
just 15 times faster even doing it with

168
00:07:35,829 --> 00:07:50,859
the interrupts Wow okay so I take it

169
00:07:49,120 --> 00:07:51,970
back I guess he didn't have to do

170
00:07:50,860 --> 00:07:54,160
something no debugger had ever done

171
00:07:51,970 --> 00:07:56,140
before he just actually I guess wrote

172
00:07:54,160 --> 00:07:59,530
much better code than the visual studio

173
00:07:56,139 --> 00:08:00,939
team and is 15 times faster so all right

174
00:07:59,529 --> 00:08:02,229
I guess there's not much point in doing

175
00:08:00,939 --> 00:08:03,490
the compilation thing although maybe if

176
00:08:02,230 --> 00:08:09,430
you have enough threads there is I don't

177
00:08:03,490 --> 00:08:12,009
know anyway never mind so separate from

178
00:08:09,430 --> 00:08:14,199
all of that it's 15 times faster than

179
00:08:12,009 --> 00:08:16,149
visual studio which means that now you

180
00:08:14,199 --> 00:08:17,649
can actually use conditional breakpoints

181
00:08:16,149 --> 00:08:19,029
in places that probably you couldn't

182
00:08:17,649 --> 00:08:21,459
really use them before because

183
00:08:19,029 --> 00:08:23,729
previously you know if you were trying

184
00:08:21,459 --> 00:08:27,069
to set a conditional breakpoint on

185
00:08:23,730 --> 00:08:28,569
something that got hit often it was not

186
00:08:27,069 --> 00:08:30,430
really plausible to do that because

187
00:08:28,569 --> 00:08:32,230
Visual Studio would run so slowly that

188
00:08:30,430 --> 00:08:33,730
you would really want to try to avoid

189
00:08:32,230 --> 00:08:35,289
that if you could I mean if you had to

190
00:08:33,730 --> 00:08:37,149
you could and you just kind of let it

191
00:08:35,289 --> 00:08:40,389
sit for awhile but you wouldn't cuz 15

192
00:08:37,149 --> 00:08:41,740
times slower is a lot slower right if

193
00:08:40,389 --> 00:08:44,319
something would have run for a minute

194
00:08:41,740 --> 00:08:46,659
before it's running for 15 minutes now

195
00:08:44,320 --> 00:08:55,510
right and that's you know not great or

196
00:08:46,659 --> 00:08:57,399
whatever right so remedy now has really

197
00:08:55,509 --> 00:08:58,960
fast conditional breakpoints and I feel

198
00:08:57,399 --> 00:09:01,899
like that's kind of a game-changer for

199
00:08:58,960 --> 00:09:04,450
people who use breakpoints a lot with

200
00:09:01,899 --> 00:09:07,779
conditions on them I don't actually do

201
00:09:04,450 --> 00:09:09,820
that but for example John Blow talks

202
00:09:07,779 --> 00:09:12,069
about this he uses them all the time

203
00:09:09,820 --> 00:09:14,440
so for people whose workflow relies on

204
00:09:12,070 --> 00:09:16,540
conditional breakpoints remedy 3 is

205
00:09:14,440 --> 00:09:21,250
gonna be a huge deal for them like a

206
00:09:16,539 --> 00:09:22,839
huge huge deal for them for us I don't

207
00:09:21,250 --> 00:09:24,340
know that 3 is all that important to us

208
00:09:22,840 --> 00:09:25,780
because we don't actually need

209
00:09:24,340 --> 00:09:28,570
conditional breakups I don't tend to use

210
00:09:25,779 --> 00:09:30,350
them probably I should and maybe I will

211
00:09:28,570 --> 00:09:33,350
now that they're so fast

212
00:09:30,350 --> 00:09:37,778
but either way remedy for us like just

213
00:09:33,350 --> 00:09:40,278
the 2.0 branch was a huge win like we

214
00:09:37,778 --> 00:09:42,668
you know use it all the time on stream I

215
00:09:40,278 --> 00:09:46,009
use it as my pretty much only debugger

216
00:09:42,668 --> 00:09:50,119
at Mali rocket it's just it's been a

217
00:09:46,009 --> 00:09:52,909
huge huge huge win and so anyone who

218
00:09:50,119 --> 00:09:54,499
hasn't been looking at remedy because it

219
00:09:52,909 --> 00:09:57,078
didn't have like all the features that

220
00:09:54,499 --> 00:09:59,869
you needed I would really highly

221
00:09:57,078 --> 00:10:03,678
recommend checking out the 3.0 branch as

222
00:09:59,869 --> 00:10:05,809
it develops because there are a lot of

223
00:10:03,678 --> 00:10:07,909
features in remedy BG right now and it

224
00:10:05,808 --> 00:10:10,338
may have crossed that threshold for you

225
00:10:07,909 --> 00:10:13,548
where now it's got everything you need

226
00:10:10,339 --> 00:10:17,539
and man if it does switching to it over

227
00:10:13,548 --> 00:10:18,858
Visual Studio or Visual Studio code or

228
00:10:17,538 --> 00:10:20,028
any of the other like things that people

229
00:10:18,859 --> 00:10:24,019
have been using for debugging windows is

230
00:10:20,028 --> 00:10:26,119
a massive massive massive win just being

231
00:10:24,019 --> 00:10:27,979
able to do single step as fast as you

232
00:10:26,119 --> 00:10:29,660
want we didn't hold down the single step

233
00:10:27,979 --> 00:10:31,759
key and the watch window just updates

234
00:10:29,659 --> 00:10:33,198
accurately the entire time there's

235
00:10:31,759 --> 00:10:34,579
nothing else on Windows that does this

236
00:10:33,198 --> 00:10:35,988
right I mean you look at visuals to

237
00:10:34,578 --> 00:10:37,338
reveal sugarcoat it doesn't even update

238
00:10:35,989 --> 00:10:39,199
at all when you do that you have to let

239
00:10:37,339 --> 00:10:42,949
go and wait you know a second and then

240
00:10:39,198 --> 00:10:45,528
it pops in or whatever it's just way

241
00:10:42,948 --> 00:10:48,048
better so I would really really highly

242
00:10:45,528 --> 00:10:54,528
encourage everyone to check this out it

243
00:10:48,048 --> 00:11:00,288
is not expensive I think you can just

244
00:10:54,528 --> 00:11:04,428
literally type remedy B G dot h io into

245
00:11:00,288 --> 00:11:06,980
your web browser of choice and it is

246
00:11:04,428 --> 00:11:09,948
literally 30 bucks and it will be the

247
00:11:06,980 --> 00:11:11,298
best 30 bucks you've ever spent if you

248
00:11:09,948 --> 00:11:14,599
know Visual Studio or something is

249
00:11:11,298 --> 00:11:19,788
bringing you down it is just way way way

250
00:11:14,600 --> 00:11:22,519
way way way better so highly recommended

251
00:11:19,788 --> 00:11:24,288
I don't know if the 3.0 branch has

252
00:11:22,519 --> 00:11:27,109
settled down completely yet cuz it just

253
00:11:24,288 --> 00:11:29,178
came out so I don't know much about that

254
00:11:27,109 --> 00:11:30,859
but at the very least a two point eight

255
00:11:29,178 --> 00:11:33,139
branch which you could also be on if you

256
00:11:30,859 --> 00:11:38,480
want to has been very stable for me the

257
00:11:33,139 --> 00:11:40,220
latest version so you know 3.0 I don't

258
00:11:38,480 --> 00:11:41,688
know if it needs a little time to settle

259
00:11:40,220 --> 00:11:43,249
down or not we haven't used it it may

260
00:11:41,688 --> 00:11:43,909
already be completely stable but even if

261
00:11:43,249 --> 00:11:45,080
it's not the

262
00:11:43,909 --> 00:11:47,120
point eight branches completely stable

263
00:11:45,080 --> 00:11:49,700
for me that's what I use and 3.0 will be

264
00:11:47,120 --> 00:11:52,039
there soon enough so you know either way

265
00:11:49,700 --> 00:11:55,100
check it out both versions are up there

266
00:11:52,039 --> 00:11:56,809
will be play with a 3.0 branch and

267
00:11:55,100 --> 00:11:59,060
kicking the tires so you can check it

268
00:11:56,809 --> 00:12:01,099
out on stream obviously but I would

269
00:11:59,059 --> 00:12:07,969
really encourage people to get on there

270
00:12:01,100 --> 00:12:11,680
there's a github that has an issues list

271
00:12:07,970 --> 00:12:16,009
so if you find bugs get them up there

272
00:12:11,679 --> 00:12:19,489
that's the way it gets better by people

273
00:12:16,009 --> 00:12:22,279
reporting problems so you know check it

274
00:12:19,490 --> 00:12:25,250
out but I think it's something that

275
00:12:22,279 --> 00:12:27,639
should be on every programmers machine

276
00:12:25,250 --> 00:12:30,230
at this point if you program on Windows

277
00:12:27,639 --> 00:12:33,350
it just it saves you so much rage

278
00:12:30,230 --> 00:12:37,490
compared to using Visual Studio or

279
00:12:33,350 --> 00:12:40,759
Visual Studio code all right all of that

280
00:12:37,490 --> 00:12:44,539
preamble aside let's take a look at

281
00:12:40,759 --> 00:12:46,460
handmade hero basically the you know

282
00:12:44,539 --> 00:12:48,379
performance level of handmade here right

283
00:12:46,460 --> 00:12:50,960
now is actually pretty acceptable which

284
00:12:48,379 --> 00:12:55,250
was surprising to me because we're now

285
00:12:50,960 --> 00:12:57,259
doing fully raytrace lighting on the CPU

286
00:12:55,250 --> 00:12:59,629
which normally you wouldn't really

287
00:12:57,259 --> 00:13:01,370
expect to be running this quickly at the

288
00:12:59,629 --> 00:13:03,230
stage rat but I'm pretty happy about

289
00:13:01,370 --> 00:13:06,470
everything we did to it we did a really

290
00:13:03,230 --> 00:13:08,389
good job there's quality issues we're

291
00:13:06,470 --> 00:13:11,420
gonna want to address we haven't done a

292
00:13:08,389 --> 00:13:14,319
quality pass so a lot of things in here

293
00:13:11,419 --> 00:13:16,699
enterings including some feedback loops

294
00:13:14,320 --> 00:13:19,570
making the edges a little rounder of the

295
00:13:16,700 --> 00:13:21,830
voxel interpolation getting the

296
00:13:19,570 --> 00:13:24,860
occluders to be set correctly for

297
00:13:21,830 --> 00:13:27,620
bounces there's a lot of stuff like this

298
00:13:24,860 --> 00:13:29,930
that we have to do and that'll be a

299
00:13:27,620 --> 00:13:33,019
secondary pass maybe starting a weekend

300
00:13:29,929 --> 00:13:35,929
or two from now and that's just visual

301
00:13:33,019 --> 00:13:38,360
quality and a separate thing right now

302
00:13:35,929 --> 00:13:42,769
all I really want is I want to be able

303
00:13:38,360 --> 00:13:44,990
to do just due diligence pass over the

304
00:13:42,769 --> 00:13:46,840
performance right now and make sure that

305
00:13:44,990 --> 00:13:50,149
it's up to at least a reasonable level

306
00:13:46,840 --> 00:13:53,000
and so we're gonna take a look at that

307
00:13:50,149 --> 00:13:55,340
our current performance metric if we

308
00:13:53,000 --> 00:13:57,519
look at it we're running it around 30

309
00:13:55,340 --> 00:14:01,730
milliseconds

310
00:13:57,519 --> 00:14:03,439
if we take a look at our actual thread

311
00:14:01,730 --> 00:14:05,060
performance you can see that actually if

312
00:14:03,440 --> 00:14:08,660
we turned off debug we'd get some of

313
00:14:05,059 --> 00:14:12,019
that back in fact just you can see like

314
00:14:08,659 --> 00:14:15,709
even just the the act of printing out

315
00:14:12,019 --> 00:14:18,139
like lots of text for example the debug

316
00:14:15,710 --> 00:14:20,060
system slows things down quite a bit so

317
00:14:18,139 --> 00:14:22,730
if we actually take a look at what we're

318
00:14:20,059 --> 00:14:24,469
getting for our speed here you know it's

319
00:14:22,730 --> 00:14:26,240
more representative this number so we're

320
00:14:24,470 --> 00:14:32,060
edging in on 60 frames a second even

321
00:14:26,240 --> 00:14:37,340
with the the CPU side ray-traced

322
00:14:32,059 --> 00:14:39,679
lighting which is pretty great and yeah

323
00:14:37,340 --> 00:14:46,370
and you know something I'm pretty happy

324
00:14:39,679 --> 00:14:53,120
about I don't really understand why I'm

325
00:14:46,370 --> 00:14:56,840
not seeing are we did we look into

326
00:14:53,120 --> 00:14:59,029
something so there's a little bit of

327
00:14:56,840 --> 00:15:01,129
weirdness here oh you know why I know

328
00:14:59,029 --> 00:15:03,319
why I never mind we're actually not

329
00:15:01,129 --> 00:15:04,759
timing the separate thread parts anymore

330
00:15:03,320 --> 00:15:09,890
that's why we're not seeing any thread

331
00:15:04,759 --> 00:15:12,110
behavior out here that's actually why we

332
00:15:09,889 --> 00:15:15,110
probably can add something back in when

333
00:15:12,110 --> 00:15:17,509
I think we probably should for that real

334
00:15:15,110 --> 00:15:23,210
quick that wouldn't actually be a

335
00:15:17,509 --> 00:15:25,340
slowdown if we just time the actual if

336
00:15:23,210 --> 00:15:27,019
we time the actual thread dispatch

337
00:15:25,340 --> 00:15:34,040
themselves I think we would get that

338
00:15:27,019 --> 00:15:35,990
although well you know um I guess not

339
00:15:34,039 --> 00:15:39,079
necessarily now that I think about it

340
00:15:35,990 --> 00:15:42,799
that isn't actually the case

341
00:15:39,080 --> 00:15:44,540
so because we split up our slices the

342
00:15:42,799 --> 00:15:48,589
only way to really do it is to put a

343
00:15:44,539 --> 00:15:53,899
time in here and the reason that's a

344
00:15:48,590 --> 00:16:00,920
little bit iffy is because the is it not

345
00:15:53,899 --> 00:16:04,129
timed function oh it's just the reason

346
00:16:00,919 --> 00:16:07,479
that's a little bit iffy is just that if

347
00:16:04,129 --> 00:16:07,480
you take a look at

348
00:16:09,840 --> 00:16:16,930
how many work QD Q's we do there's

349
00:16:13,929 --> 00:16:19,569
there's maybe a little a few too many of

350
00:16:16,929 --> 00:16:22,419
those at the moment and so if you take a

351
00:16:19,570 --> 00:16:24,520
look at what happens when we do our

352
00:16:22,419 --> 00:16:26,189
timing there well okay no that's not

353
00:16:24,519 --> 00:16:29,649
that about 24 is not that bad nevermind

354
00:16:26,190 --> 00:16:31,780
so if we actually time what our threads

355
00:16:29,649 --> 00:16:35,379
are doing here you can see the work

356
00:16:31,779 --> 00:16:36,970
units for the actual ray tracer getting

357
00:16:35,379 --> 00:16:41,830
distributed out here and you can see

358
00:16:36,970 --> 00:16:49,540
those being done sort of as as separate

359
00:16:41,830 --> 00:16:51,639
pieces right and so you can kind of see

360
00:16:49,539 --> 00:16:53,469
we've got our extra threads here we got

361
00:16:51,639 --> 00:16:55,299
six of them that's because this is an

362
00:16:53,470 --> 00:16:58,029
eight virtual core machine so you can

363
00:16:55,299 --> 00:17:02,819
kind of see here if you look at the

364
00:16:58,029 --> 00:17:04,990
performance measurement for the the CPU

365
00:17:02,820 --> 00:17:08,890
you can see what it's doing here

366
00:17:04,990 --> 00:17:12,400
and we are intentionally not using 100%

367
00:17:08,890 --> 00:17:16,180
of the CPU we leave one core idle or I

368
00:17:12,400 --> 00:17:18,970
should say we you know we don't schedule

369
00:17:16,180 --> 00:17:20,560
one threads worth of stuff so if we

370
00:17:18,970 --> 00:17:22,150
detect there's eight cores right now

371
00:17:20,559 --> 00:17:25,240
you're gonna have one core which is the

372
00:17:22,150 --> 00:17:27,189
main core that's running the game loop

373
00:17:25,240 --> 00:17:29,349
and then it's got you know a certain

374
00:17:27,189 --> 00:17:32,740
number of worker cores and we won't

375
00:17:29,349 --> 00:17:35,589
generate seven worker cores will

376
00:17:32,740 --> 00:17:37,059
generate six so we leave one idle the

377
00:17:35,589 --> 00:17:38,829
reason for that is the operating system

378
00:17:37,059 --> 00:17:40,269
needs to do stuff and also we do loading

379
00:17:38,829 --> 00:17:41,949
in the background there's two loading

380
00:17:40,269 --> 00:17:43,450
threads that'll that happened here and

381
00:17:41,950 --> 00:17:45,670
they happen infrequently and just

382
00:17:43,450 --> 00:17:47,830
basically block on the OS that's to keep

383
00:17:45,670 --> 00:17:51,970
us from like over subscribing so we're

384
00:17:47,829 --> 00:17:55,119
trying to you know not absolutely you

385
00:17:51,970 --> 00:17:56,529
know tank the machine that said when you

386
00:17:55,119 --> 00:17:58,659
actually look at what's going on here

387
00:17:56,529 --> 00:18:02,680
you can see we're not stressing this out

388
00:17:58,660 --> 00:18:07,450
at all and I don't actually know why

389
00:18:02,680 --> 00:18:09,880
that's happening but my so my kind of

390
00:18:07,450 --> 00:18:11,680
suspicion there is I do wonder if we're

391
00:18:09,880 --> 00:18:13,660
getting you know if we're actually a

392
00:18:11,680 --> 00:18:17,620
little bit blocked just now by the fact

393
00:18:13,660 --> 00:18:18,880
that look we can't quite yet sixty so

394
00:18:17,619 --> 00:18:21,979
we're gonna end up running at thirty

395
00:18:18,880 --> 00:18:23,960
kind of a thing we tried to turn

396
00:18:21,980 --> 00:18:26,480
v-sync but you can see that there

397
00:18:23,960 --> 00:18:30,200
actually is a fair bit of stalling that

398
00:18:26,480 --> 00:18:32,058
seems to happen there we we wait for

399
00:18:30,200 --> 00:18:34,519
quite a few cycles in the frame display

400
00:18:32,058 --> 00:18:36,019
and we never really were able to fare

401
00:18:34,519 --> 00:18:38,210
exactly what was going on there

402
00:18:36,019 --> 00:18:40,970
I do suspect that part of that is just

403
00:18:38,210 --> 00:18:43,429
because we're running on a streaming

404
00:18:40,970 --> 00:18:48,950
machine and it's locked to stream out

405
00:18:43,429 --> 00:18:51,140
the the HDMI port while also rendering

406
00:18:48,950 --> 00:18:54,259
the screen so I don't know to what

407
00:18:51,140 --> 00:18:56,360
extent Windows is compositor is kind of

408
00:18:54,259 --> 00:18:59,480
the thing that's that's causing us

409
00:18:56,359 --> 00:19:01,159
issues there right so we're not gonna

410
00:18:59,480 --> 00:19:03,230
try to attack that part because it's

411
00:19:01,160 --> 00:19:06,080
sort of a separate issue from how fast

412
00:19:03,230 --> 00:19:08,000
our stuff goes our goal really is just

413
00:19:06,079 --> 00:19:12,289
to make sure that to the extent that we

414
00:19:08,000 --> 00:19:14,298
can we we reduce the amount of time

415
00:19:12,289 --> 00:19:16,308
spent and rate racing and the reason for

416
00:19:14,298 --> 00:19:18,289
that is even if we don't want to

417
00:19:16,308 --> 00:19:19,789
actually speed things up at all even if

418
00:19:18,289 --> 00:19:21,980
we're happy with the speed things are

419
00:19:19,789 --> 00:19:24,529
the faster we can make that ray tracer

420
00:19:21,980 --> 00:19:26,480
the more rays we can trace and you can

421
00:19:24,529 --> 00:19:28,609
see there's some flicker in our lighting

422
00:19:26,480 --> 00:19:30,980
right now that's like variance we can

423
00:19:28,609 --> 00:19:34,759
attack some of that with sampling with

424
00:19:30,980 --> 00:19:36,919
better with basically better handling of

425
00:19:34,759 --> 00:19:38,720
the samples we collect so there are ways

426
00:19:36,919 --> 00:19:42,470
in the quality pass we'll be able to

427
00:19:38,720 --> 00:19:44,900
direct to improve that but regardless

428
00:19:42,470 --> 00:19:46,100
the more ways we can cast the more

429
00:19:44,900 --> 00:19:48,410
accurate of solution we can construct

430
00:19:46,099 --> 00:19:52,759
anyway so we kind of want that

431
00:19:48,410 --> 00:19:54,710
performance either way so what we you

432
00:19:52,759 --> 00:19:58,369
know end up with is we end up with a

433
00:19:54,710 --> 00:20:02,329
situation where we know that our ray

434
00:19:58,369 --> 00:20:05,599
casting is is the main you know thing

435
00:20:02,329 --> 00:20:08,058
that we're is the main like speed bump

436
00:20:05,599 --> 00:20:11,269
that we have for how many Ray's we can

437
00:20:08,058 --> 00:20:14,418
cast like this is the thing that makes

438
00:20:11,269 --> 00:20:16,220
us have to worry about cranking up the

439
00:20:14,419 --> 00:20:19,700
number of Ray's to you know

440
00:20:16,220 --> 00:20:22,370
significantly more let's say than it was

441
00:20:19,700 --> 00:20:27,620
and so what we really need to be able to

442
00:20:22,369 --> 00:20:29,949
do is we need some way of of making sure

443
00:20:27,619 --> 00:20:33,489
that we're doing a reasonably good job

444
00:20:29,950 --> 00:20:41,769
performance wise inside this code

445
00:20:33,490 --> 00:20:45,069
right so inside the code where we're

446
00:20:41,769 --> 00:20:46,690
actually doing our ray casting we kind

447
00:20:45,069 --> 00:20:50,918
of want to know that we're doing a good

448
00:20:46,690 --> 00:20:54,399
job in here and we want some way of you

449
00:20:50,919 --> 00:20:57,220
know guaranteeing that that that were

450
00:20:54,398 --> 00:21:00,250
you know if efficient through this this

451
00:20:57,220 --> 00:21:03,159
part of the code now there's two parts

452
00:21:00,250 --> 00:21:06,898
to this and we don't really know very

453
00:21:03,159 --> 00:21:09,159
much about it quite yet right

454
00:21:06,898 --> 00:21:11,079
the reason I say there's two parts you

455
00:21:09,159 --> 00:21:13,690
can actually see I've gone ahead last

456
00:21:11,079 --> 00:21:18,490
time and split them into two if two

457
00:21:13,690 --> 00:21:22,019
branches of an if one is doing actual

458
00:21:18,490 --> 00:21:24,778
collision detection on the Ray and the

459
00:21:22,019 --> 00:21:28,329
pieces of geometry in the scene and

460
00:21:24,778 --> 00:21:33,220
that's one right here so this right here

461
00:21:28,329 --> 00:21:36,668
loops over actual blocks and it collides

462
00:21:33,220 --> 00:21:40,839
against those blocks right so this piece

463
00:21:36,669 --> 00:21:43,659
of code actually records kit tests and

464
00:21:40,839 --> 00:21:46,148
it just you know is designed to produce

465
00:21:43,659 --> 00:21:49,809
the Ray casting against rectilinear

466
00:21:46,148 --> 00:21:52,449
volumes that you would expect so this is

467
00:21:49,808 --> 00:21:54,038
very like straightforward this piece of

468
00:21:52,450 --> 00:21:56,950
code on the other hand is a little bit

469
00:21:54,038 --> 00:22:00,069
different this piece of code is instead

470
00:21:56,950 --> 00:22:02,440
just trying to call volumes using a

471
00:22:00,069 --> 00:22:04,329
hierarchy so this although it's

472
00:22:02,440 --> 00:22:05,679
basically the exact same code like you

473
00:22:04,329 --> 00:22:07,269
can see here that's going to do the

474
00:22:05,679 --> 00:22:09,909
exact same thing

475
00:22:07,269 --> 00:22:11,849
in either case for the first part which

476
00:22:09,909 --> 00:22:14,590
is just computing a box intersection

477
00:22:11,849 --> 00:22:16,658
it's actually going and trying to

478
00:22:14,589 --> 00:22:20,230
determine whether or not it should go

479
00:22:16,659 --> 00:22:23,528
down one side or another of a bounding

480
00:22:20,230 --> 00:22:25,870
hierarchy right and that's what this

481
00:22:23,528 --> 00:22:28,990
piece of code is doing now there's a

482
00:22:25,869 --> 00:22:31,298
reason that I separated this out we made

483
00:22:28,990 --> 00:22:32,769
this code generic originally just

484
00:22:31,298 --> 00:22:34,750
because that's what we were doing we

485
00:22:32,769 --> 00:22:37,389
made a hierarchy of boxes and we just

486
00:22:34,750 --> 00:22:39,130
said look eventually you get down to the

487
00:22:37,390 --> 00:22:40,899
bottom and we say there's you know

488
00:22:39,130 --> 00:22:44,860
certain number of boxes here or whatever

489
00:22:40,898 --> 00:22:46,750
right well if you look at what happens

490
00:22:44,859 --> 00:22:47,409
here the intersection to try and

491
00:22:46,750 --> 00:22:50,079
determine

492
00:22:47,410 --> 00:22:51,970
or not we hit a particular box and then

493
00:22:50,079 --> 00:22:54,429
selecting that box you know it's

494
00:22:51,970 --> 00:22:56,860
actually quite a lot of code now it

495
00:22:54,430 --> 00:22:59,590
doesn't look like that much code but

496
00:22:56,859 --> 00:23:02,069
each one of these v3 Forex operations is

497
00:22:59,589 --> 00:23:08,470
relatively expensive if you take a look

498
00:23:02,069 --> 00:23:10,509
in the sim design things I guess so yeah

499
00:23:08,470 --> 00:23:13,360
so if you take a look at how this is

500
00:23:10,509 --> 00:23:16,059
actually working if you go and check

501
00:23:13,359 --> 00:23:17,259
like you know just this one well you

502
00:23:16,059 --> 00:23:19,210
know what actually here's an easier way

503
00:23:17,259 --> 00:23:20,859
to do it let me just show you what the

504
00:23:19,210 --> 00:23:21,850
assembly language code looks like I mean

505
00:23:20,859 --> 00:23:24,429
because you can see it gets expanded

506
00:23:21,849 --> 00:23:27,579
from here let's say you have something

507
00:23:24,430 --> 00:23:30,370
like an operator - that you're seeing

508
00:23:27,579 --> 00:23:32,769
there that's just written in the code it

509
00:23:30,369 --> 00:23:34,359
just looks like a subtract if we

510
00:23:32,769 --> 00:23:39,519
actually look at how that's implemented

511
00:23:34,359 --> 00:23:44,049
so here's operator - on like 2f 32s it's

512
00:23:39,519 --> 00:23:47,200
gonna issue a subpoena the v3 version

513
00:23:44,049 --> 00:23:48,940
right it's gonna do that on several of

514
00:23:47,200 --> 00:23:52,000
these so it's gonna be three of those

515
00:23:48,940 --> 00:23:55,090
sub pieces so each one of these lines

516
00:23:52,000 --> 00:23:56,319
here is three instructions long right so

517
00:23:55,089 --> 00:23:59,730
that's gonna be three instructions

518
00:23:56,319 --> 00:24:01,869
that's gonna be three instructions right

519
00:23:59,730 --> 00:24:02,920
three instructions three instructions

520
00:24:01,869 --> 00:24:05,469
another three instructions three

521
00:24:02,920 --> 00:24:07,570
instructions right so the number of

522
00:24:05,470 --> 00:24:10,329
instructions here is actually pretty

523
00:24:07,569 --> 00:24:12,460
high right and it's not like we can't

524
00:24:10,329 --> 00:24:13,689
afford to do some instructions or

525
00:24:12,460 --> 00:24:16,210
anything obviously

526
00:24:13,690 --> 00:24:19,900
in lighting there's going to be several

527
00:24:16,210 --> 00:24:21,160
instructions how to actually get to what

528
00:24:19,900 --> 00:24:24,400
am i looking for your lighting there we

529
00:24:21,160 --> 00:24:27,820
go oh and I can do a control F now can't

530
00:24:24,400 --> 00:24:31,330
I so I can actually jump right here if I

531
00:24:27,819 --> 00:24:34,269
want to look at that alright um so

532
00:24:31,329 --> 00:24:36,129
inside this code right if we actually

533
00:24:34,269 --> 00:24:38,650
look at what has to happen if I go ahead

534
00:24:36,130 --> 00:24:40,210
and set a breakpoint here and we go

535
00:24:38,650 --> 00:24:41,650
ahead and and look at the the

536
00:24:40,210 --> 00:24:42,250
disassembly which is what I actually

537
00:24:41,650 --> 00:24:44,560
want

538
00:24:42,250 --> 00:24:47,740
let me looks like that one does not open

539
00:24:44,559 --> 00:24:50,379
there it is so if we take a look at the

540
00:24:47,740 --> 00:24:53,470
disassembly here what you can see is you

541
00:24:50,380 --> 00:24:56,290
know there's a lot of of code that's

542
00:24:53,470 --> 00:24:58,420
going on here there's chef PS is there

543
00:24:56,289 --> 00:25:00,700
you know there to sort of distribute

544
00:24:58,420 --> 00:25:01,130
things out like this sort of thing right

545
00:25:00,700 --> 00:25:04,910
here

546
00:25:01,130 --> 00:25:06,830
I lost this single value up to two

547
00:25:04,910 --> 00:25:08,570
replicated stuff so there's chef PS is

548
00:25:06,829 --> 00:25:10,909
for that then there's the sub pieces

549
00:25:08,569 --> 00:25:14,000
that are happening right chefs subs

550
00:25:10,910 --> 00:25:16,670
there's mobs that are moving in the data

551
00:25:14,000 --> 00:25:19,279
right I don't know why this is storing

552
00:25:16,670 --> 00:25:20,509
this out some stuff there doesn't make a

553
00:25:19,279 --> 00:25:23,839
whole lot of sense but doesn't matter

554
00:25:20,509 --> 00:25:26,450
point being you can see Mull max min

555
00:25:23,839 --> 00:25:30,980
chef right there's tons of code

556
00:25:26,450 --> 00:25:32,750
happening in here and to some extent we

557
00:25:30,980 --> 00:25:34,519
could start to minimize this because on

558
00:25:32,750 --> 00:25:37,009
certain things like for example the

559
00:25:34,519 --> 00:25:38,750
boxes we know we can control how those

560
00:25:37,009 --> 00:25:41,119
boxes are created so we could for

561
00:25:38,750 --> 00:25:42,799
example just pre store them with some of

562
00:25:41,119 --> 00:25:44,029
these things computed and that's

563
00:25:42,799 --> 00:25:46,039
definitely something we're gonna want to

564
00:25:44,029 --> 00:25:49,160
do right but the point is it's fairly

565
00:25:46,039 --> 00:25:52,519
expensive if we look down here right and

566
00:25:49,160 --> 00:25:55,340
we look at what's going on here you can

567
00:25:52,519 --> 00:25:58,099
see that we do this box intersection

568
00:25:55,339 --> 00:26:01,220
test but the only thing we're ever going

569
00:25:58,099 --> 00:26:02,899
to do when we intersect the box is we're

570
00:26:01,220 --> 00:26:04,640
just gonna determine whether we should

571
00:26:02,900 --> 00:26:09,130
go and look at the children of the box

572
00:26:04,640 --> 00:26:13,880
right that's it and so that's just not a

573
00:26:09,130 --> 00:26:17,060
particularly useful way to construct

574
00:26:13,880 --> 00:26:18,980
this tree instead what we could do is

575
00:26:17,059 --> 00:26:21,799
because we've basically constructed it

576
00:26:18,980 --> 00:26:23,569
for example like a KD tree this is way

577
00:26:21,799 --> 00:26:26,089
more expensive than it needs to be if

578
00:26:23,569 --> 00:26:28,250
you look at what we're doing in our

579
00:26:26,089 --> 00:26:30,349
split box right here's where we

580
00:26:28,250 --> 00:26:33,500
construct the bounding volume hierarchy

581
00:26:30,349 --> 00:26:38,269
we're basically doing a KD tree here but

582
00:26:33,500 --> 00:26:42,109
there's no reason for it to ever like it

583
00:26:38,269 --> 00:26:45,650
doesn't actually ever use that knowledge

584
00:26:42,109 --> 00:26:49,490
in here right it does a bounding box

585
00:26:45,650 --> 00:26:51,650
check even though the only thing is it's

586
00:26:49,490 --> 00:26:54,650
just a split plain right this is

587
00:26:51,650 --> 00:26:56,750
basically a BSP but instead of testing

588
00:26:54,650 --> 00:26:59,360
it like a BSP we're testing it like an

589
00:26:56,750 --> 00:27:06,349
ABB AABB hierarchy Agis we're just

590
00:26:59,359 --> 00:27:11,029
throwing cycles away so this piece of

591
00:27:06,349 --> 00:27:14,789
code it sucks right there's no this is

592
00:27:11,029 --> 00:27:20,129
not smart at all and we don't

593
00:27:14,789 --> 00:27:21,839
know that we can save time by improving

594
00:27:20,130 --> 00:27:24,150
it because we don't really know to what

595
00:27:21,839 --> 00:27:26,129
extent we are you know we don't know

596
00:27:24,150 --> 00:27:28,380
exactly what we're limited by we don't

597
00:27:26,130 --> 00:27:32,820
know if we're limited by cash concerns

598
00:27:28,380 --> 00:27:35,160
we don't know if we're limited by branch

599
00:27:32,819 --> 00:27:37,500
mispredictions we don't know if we're

600
00:27:35,160 --> 00:27:39,600
limited by math ops right

601
00:27:37,500 --> 00:27:42,690
we just fundamentally don't know and if

602
00:27:39,599 --> 00:27:45,629
we wanted to know for sure we should

603
00:27:42,690 --> 00:27:47,789
probably take some actual measurements

604
00:27:45,630 --> 00:27:50,310
right and that may be something that we

605
00:27:47,789 --> 00:27:52,259
want to do meaning we'd pull this code

606
00:27:50,309 --> 00:27:54,480
out we'd run it in a more controlled

607
00:27:52,259 --> 00:27:59,730
setting and we look at what's going to

608
00:27:54,480 --> 00:28:03,660
happen there but at least as far as we

609
00:27:59,730 --> 00:28:05,339
can tell here there's no reason to

610
00:28:03,660 --> 00:28:09,690
believe we wouldn't get a win on

611
00:28:05,339 --> 00:28:13,169
basically all of those fronts by just

612
00:28:09,690 --> 00:28:15,779
not using a abs for this if we're going

613
00:28:13,170 --> 00:28:17,430
to use a KD tree anyway which is how we

614
00:28:15,779 --> 00:28:19,170
did the splits here and generally

615
00:28:17,430 --> 00:28:23,130
speaking KD trees are what people use

616
00:28:19,170 --> 00:28:26,130
for ray tracing most of the time we

617
00:28:23,130 --> 00:28:28,740
could reduce all of this just by using a

618
00:28:26,130 --> 00:28:31,140
different type there right so if we

619
00:28:28,740 --> 00:28:36,900
actually look and plus you know let's

620
00:28:31,140 --> 00:28:39,420
take a look at get box right so get box

621
00:28:36,900 --> 00:28:42,150
for you know even this we don't need to

622
00:28:39,420 --> 00:28:44,880
call right this is just doing a straight

623
00:28:42,150 --> 00:28:46,710
ahead lookup so it you know what and

624
00:28:44,880 --> 00:28:49,830
this is even worse this is a double

625
00:28:46,710 --> 00:28:52,890
indirection right for no reason although

626
00:28:49,829 --> 00:28:55,199
that may make sense up here because

627
00:28:52,890 --> 00:28:59,130
we're trying to use the existing set of

628
00:28:55,200 --> 00:29:03,330
boxes that we got handed so that we

629
00:28:59,130 --> 00:29:04,650
don't copy them the initial time even

630
00:29:03,329 --> 00:29:07,619
that's a little questionable we should

631
00:29:04,650 --> 00:29:10,080
probably just flatten that down even if

632
00:29:07,619 --> 00:29:12,809
we weren't going to do that looking here

633
00:29:10,079 --> 00:29:15,809
there's no reason for this because we

634
00:29:12,809 --> 00:29:17,789
created these boxes that are the sub

635
00:29:15,809 --> 00:29:22,649
boxes in the set they should just be

636
00:29:17,789 --> 00:29:26,190
continuous in memory so before we get

637
00:29:22,650 --> 00:29:28,580
too far down the road of trying to

638
00:29:26,190 --> 00:29:30,288
actually collect information about this

639
00:29:28,579 --> 00:29:34,759
I feel like we probably would want to

640
00:29:30,288 --> 00:29:37,579
just fix all that right but it may also

641
00:29:34,759 --> 00:29:40,369
be instructive I don't know to sort of

642
00:29:37,579 --> 00:29:44,089
say look well maybe we should create the

643
00:29:40,369 --> 00:29:45,648
test harness for that first right so I

644
00:29:44,089 --> 00:29:48,439
don't know I'm gonna go ahead and say

645
00:29:45,648 --> 00:29:50,119
maybe I'll look at how much work it will

646
00:29:48,440 --> 00:29:53,028
be for me to isolate this piece of code

647
00:29:50,119 --> 00:29:55,069
out and then look at its performance

648
00:29:53,028 --> 00:29:56,950
separately I want to say that I

649
00:29:55,069 --> 00:30:04,849
installed vtune already on this machine

650
00:29:56,950 --> 00:30:07,399
let me see if that's the case looks like

651
00:30:04,849 --> 00:30:08,719
it right because I believe we were using

652
00:30:07,398 --> 00:30:10,308
this one time I did a meow hash stream

653
00:30:08,720 --> 00:30:12,319
and I remember a few folks who watch the

654
00:30:10,308 --> 00:30:16,099
stream regularly remember that but we

655
00:30:12,319 --> 00:30:19,730
were using to be honest I don't actually

656
00:30:16,099 --> 00:30:22,658
know that there's a way to do

657
00:30:19,730 --> 00:30:27,110
command-line performance analysis on

658
00:30:22,659 --> 00:30:29,929
windows on Linux there's a executable

659
00:30:27,109 --> 00:30:31,038
you can call called perf that allows you

660
00:30:29,929 --> 00:30:32,179
to actually get your performance

661
00:30:31,038 --> 00:30:33,769
counters without having to go through a

662
00:30:32,179 --> 00:30:37,700
ridiculous tool like vtune which I don't

663
00:30:33,769 --> 00:30:40,880
super love but on Windows the only way

664
00:30:37,700 --> 00:30:43,639
to get access to like the more sort of

665
00:30:40,880 --> 00:30:46,610
specific performance counters that

666
00:30:43,638 --> 00:30:49,398
you're going to get those only really

667
00:30:46,609 --> 00:30:53,019
come through vtune so if we wanted to

668
00:30:49,398 --> 00:30:55,308
take a profile of this particular

669
00:30:53,019 --> 00:30:57,919
application we really kind of need to

670
00:30:55,308 --> 00:31:02,089
know what's going on vtune why's there

671
00:30:57,919 --> 00:31:04,309
and so what we could do is is break this

672
00:31:02,089 --> 00:31:06,319
out into a piece of code that we can

673
00:31:04,308 --> 00:31:08,569
then look at and be a little bit more

674
00:31:06,319 --> 00:31:11,109
specific about and that might be worth

675
00:31:08,569 --> 00:31:14,000
it because then we can take some actual

676
00:31:11,109 --> 00:31:15,648
timing you know pieces of timing

677
00:31:14,000 --> 00:31:17,450
information that are more specific and

678
00:31:15,648 --> 00:31:20,629
get a little bit more information about

679
00:31:17,450 --> 00:31:22,460
what's going on right now in order to do

680
00:31:20,630 --> 00:31:25,100
that we kind of need some way of

681
00:31:22,460 --> 00:31:28,490
actually getting information out of our

682
00:31:25,099 --> 00:31:30,648
system we need a way to sort of do this

683
00:31:28,490 --> 00:31:32,808
procedure offline thankfully the

684
00:31:30,648 --> 00:31:36,379
lighting system really just works on

685
00:31:32,808 --> 00:31:38,269
sort of these these box inputs and so

686
00:31:36,380 --> 00:31:40,159
here's what I'm gonna say I'm gonna

687
00:31:38,269 --> 00:31:42,400
actually say let's just let it take a

688
00:31:40,159 --> 00:31:44,260
capture okay

689
00:31:42,400 --> 00:31:47,620
and we'll you know we'll just let it

690
00:31:44,259 --> 00:31:50,710
right to a file if we look at our

691
00:31:47,619 --> 00:31:53,589
handmade platform code I want to say we

692
00:31:50,710 --> 00:31:55,600
actually have the facilities already

693
00:31:53,589 --> 00:31:59,289
built for this so let's just capture

694
00:31:55,599 --> 00:32:00,849
some of the data use that you can write

695
00:31:59,289 --> 00:32:04,960
you can see we got platform write data

696
00:32:00,849 --> 00:32:07,839
to file here right so we should be able

697
00:32:04,960 --> 00:32:13,630
to actually just open a file blast some

698
00:32:07,839 --> 00:32:16,269
data out to it and then and and and use

699
00:32:13,630 --> 00:32:19,750
that an external test app so it's nice

700
00:32:16,269 --> 00:32:21,250
because again you know and yeah I don't

701
00:32:19,750 --> 00:32:23,109
want to go down the rat hole of why you

702
00:32:21,250 --> 00:32:25,299
should always program simply and why I'm

703
00:32:23,109 --> 00:32:26,559
I'm just oh wait I don't even bother

704
00:32:25,299 --> 00:32:28,000
arguing people about this anymore

705
00:32:26,559 --> 00:32:29,740
because I feel like the shark has been

706
00:32:28,000 --> 00:32:31,779
jumped so you know you get these modern

707
00:32:29,740 --> 00:32:35,099
C++ people and then they're just off in

708
00:32:31,779 --> 00:32:37,720
la-la land or whatever right but again

709
00:32:35,099 --> 00:32:40,089
when you just program sensibly and you

710
00:32:37,720 --> 00:32:42,549
just have like a basic array of some

711
00:32:40,089 --> 00:32:45,879
data stuff like this is just a non-issue

712
00:32:42,549 --> 00:32:47,769
right if I want to capture the input to

713
00:32:45,880 --> 00:32:50,050
one of my things I could just write out

714
00:32:47,769 --> 00:32:52,930
the array right it's not some giant

715
00:32:50,049 --> 00:32:54,549
rat's nest of ridiculous Aria I classes

716
00:32:52,930 --> 00:32:56,019
at all point to each other that have to

717
00:32:54,549 --> 00:32:57,819
be crawled and just like who the hell

718
00:32:56,019 --> 00:32:59,529
knows and then there's like you know all

719
00:32:57,819 --> 00:33:03,339
serialization and oh do I use a

720
00:32:59,529 --> 00:33:05,619
libraries right you know it's all just a

721
00:33:03,339 --> 00:33:08,409
waste of time right it's all just a

722
00:33:05,619 --> 00:33:10,269
waste of time because begin lennie

723
00:33:08,410 --> 00:33:15,310
computation we go through here we get

724
00:33:10,269 --> 00:33:16,779
this we get this input that's just like

725
00:33:15,309 --> 00:33:19,240
look this is what you're gonna do our

726
00:33:16,779 --> 00:33:21,250
split box call like when we call build

727
00:33:19,240 --> 00:33:23,890
spatial partition for lighting that just

728
00:33:21,250 --> 00:33:26,559
comes in in a very simple array right

729
00:33:23,890 --> 00:33:28,300
you can see this is all we do right we

730
00:33:26,559 --> 00:33:30,369
just loop over the boxes we got as an

731
00:33:28,299 --> 00:33:33,339
input and then we build it we can just

732
00:33:30,369 --> 00:33:36,399
write that out as one flat piece of data

733
00:33:33,339 --> 00:33:39,279
and be off to the races right so again

734
00:33:36,400 --> 00:33:41,590
really really simple and the reason for

735
00:33:39,279 --> 00:33:43,869
that is we just weren't dumb right all

736
00:33:41,589 --> 00:33:45,519
we did was just we didn't over

737
00:33:43,869 --> 00:33:48,849
complicate our lives the bunch of

738
00:33:45,519 --> 00:33:52,000
nonsense that doesn't have any practical

739
00:33:48,849 --> 00:33:53,259
benefit right so what I can do here is

740
00:33:52,000 --> 00:33:55,148
inside build spatial partition

741
00:33:53,259 --> 00:33:58,419
relighting if I want to I could go

742
00:33:55,148 --> 00:33:59,798
and use the platform IO stuff to just

743
00:33:58,419 --> 00:34:02,169
say why don't you just write out that

744
00:33:59,798 --> 00:34:04,719
flat array I'll load that flat array

745
00:34:02,169 --> 00:34:06,639
back into my program in just a

746
00:34:04,719 --> 00:34:09,068
standalone exterior program and then we

747
00:34:06,638 --> 00:34:11,230
can actually run the lighting on an

748
00:34:09,068 --> 00:34:13,480
actual scene so we're not making stuff

749
00:34:11,230 --> 00:34:16,028
up and taking timings on something that

750
00:34:13,480 --> 00:34:17,679
isn't really appropriate so if I want to

751
00:34:16,028 --> 00:34:19,599
do that what I should be able to do here

752
00:34:17,679 --> 00:34:21,250
is just go ahead and say look if I call

753
00:34:19,599 --> 00:34:23,679
the platform API so I'm doing it you

754
00:34:21,250 --> 00:34:25,929
know something like this I should be

755
00:34:23,679 --> 00:34:27,338
able to do like an open file and then I

756
00:34:25,929 --> 00:34:28,690
should be able to do like a write dated

757
00:34:27,338 --> 00:34:31,509
a file and then I should be able to

758
00:34:28,690 --> 00:34:35,528
close it right like this just closed e

759
00:34:31,510 --> 00:34:37,809
and then I can you know dump out this

760
00:34:35,528 --> 00:34:40,358
thing that I was using the solution box

761
00:34:37,809 --> 00:34:42,069
is here and then I can just do the same

762
00:34:40,358 --> 00:34:44,139
code that I was doing before and and in

763
00:34:42,068 --> 00:34:47,858
theory that will give me but like

764
00:34:44,139 --> 00:34:49,269
everything I need right so let's go

765
00:34:47,858 --> 00:34:53,168
ahead and try to do that if we look at

766
00:34:49,269 --> 00:34:55,318
the API for that open file right if I

767
00:34:53,168 --> 00:34:58,868
you know for trying to actually get a

768
00:34:55,318 --> 00:35:02,889
platform open file there I think I

769
00:34:58,869 --> 00:35:04,750
should be able to do that with this is

770
00:35:02,889 --> 00:35:06,429
this only for iteration I don't know if

771
00:35:04,750 --> 00:35:08,048
this Creek there is a way to create

772
00:35:06,429 --> 00:35:10,058
files I just don't remember exactly what

773
00:35:08,048 --> 00:35:11,588
it is I think it's this platform get

774
00:35:10,059 --> 00:35:14,859
filed by path so I think maybe that's

775
00:35:11,588 --> 00:35:18,250
actually what I want their platform get

776
00:35:14,858 --> 00:35:21,190
file by path and then what I have to do

777
00:35:18,250 --> 00:35:23,170
is I have to pass it like some

778
00:35:21,190 --> 00:35:24,490
information and I don't know if that's

779
00:35:23,170 --> 00:35:26,230
the right way to it's been so long since

780
00:35:24,489 --> 00:35:28,929
I've done any of this stuff and this is

781
00:35:26,230 --> 00:35:32,710
made for our asset system so I'm not

782
00:35:28,929 --> 00:35:36,338
what I'm sure that's the smartest way to

783
00:35:32,710 --> 00:35:38,889
do it but I think that it is so if I go

784
00:35:36,338 --> 00:35:40,298
ahead and do it this way one of the

785
00:35:38,889 --> 00:35:46,118
other things I need to use there a

786
00:35:40,298 --> 00:35:50,710
platform file group which is which is

787
00:35:46,119 --> 00:35:53,818
just this I don't remember

788
00:35:50,710 --> 00:35:53,818
I'm gonna go look at the win32 code

789
00:36:02,960 --> 00:36:08,400
so in here where we have like win32 get

790
00:36:06,510 --> 00:36:11,850
filed by path I think that's really what

791
00:36:08,400 --> 00:36:15,630
we want because I think it works pretty

792
00:36:11,849 --> 00:36:18,299
much yeah I think it works with whatever

793
00:36:15,630 --> 00:36:20,160
we want so we can pass we don't have to

794
00:36:18,300 --> 00:36:22,350
open a file that exists you could see

795
00:36:20,159 --> 00:36:25,859
here that like if we specify open file

796
00:36:22,349 --> 00:36:31,739
right it will create the new file for us

797
00:36:25,860 --> 00:36:33,690
right so that seems like what we want as

798
00:36:31,739 --> 00:36:35,399
far as I can tell when three do you open

799
00:36:33,690 --> 00:36:38,490
file we should be able to then just pass

800
00:36:35,400 --> 00:36:41,880
that file info that we got back and off

801
00:36:38,489 --> 00:36:45,899
we go so I think we're okay that's

802
00:36:41,880 --> 00:36:50,940
that's my argument you know that that's

803
00:36:45,900 --> 00:36:53,039
what I'm that's what I'm gonna claim so

804
00:36:50,940 --> 00:36:56,220
here if we look at what happens when we

805
00:36:53,039 --> 00:37:00,509
actually call that get file by path that

806
00:36:56,219 --> 00:37:01,889
gives us the like you know I don't know

807
00:37:00,510 --> 00:37:03,600
we call this the dump file or something

808
00:37:01,889 --> 00:37:05,759
and I know we're gonna call this this is

809
00:37:03,599 --> 00:37:08,579
where we're gonna dump our data to we

810
00:37:05,760 --> 00:37:10,860
should be able to open that file and

811
00:37:08,579 --> 00:37:12,210
oops I put think this get filed by

812
00:37:10,860 --> 00:37:16,500
pathum advice no that's fine all right

813
00:37:12,210 --> 00:37:20,820
so open file like I think all that open

814
00:37:16,500 --> 00:37:24,300
file needs is to no open file right

815
00:37:20,820 --> 00:37:25,950
looks like and then the file group

816
00:37:24,300 --> 00:37:27,900
that's the only thing we don't have so

817
00:37:25,949 --> 00:37:31,789
there's the file group I think they get

818
00:37:27,900 --> 00:37:31,789
passed to everything does it

819
00:37:31,949 --> 00:37:39,328
so here and then when we do write data

820
00:37:35,250 --> 00:37:44,429
to file we just pass the handle we got

821
00:37:39,329 --> 00:37:50,809
back right so it looks like that and the

822
00:37:44,429 --> 00:37:57,108
offset the size which left compute and

823
00:37:50,809 --> 00:37:59,760
the source which is just the boxes right

824
00:37:57,108 --> 00:38:02,909
and then I guess we close it I don't

825
00:37:59,760 --> 00:38:04,530
know that we need anything there so I

826
00:38:02,909 --> 00:38:05,789
think this is literally all we would

827
00:38:04,530 --> 00:38:11,640
have to do but it looks like we'd have

828
00:38:05,789 --> 00:38:16,079
to open a file group for that I like

829
00:38:11,639 --> 00:38:23,279
this and so if I just said like okay you

830
00:38:16,079 --> 00:38:27,660
know platform Open File group and then

831
00:38:23,280 --> 00:38:30,329
platform close file group I think that's

832
00:38:27,659 --> 00:38:31,769
everything and you know if we were gonna

833
00:38:30,329 --> 00:38:33,599
do this a lot that's that's too much

834
00:38:31,769 --> 00:38:36,690
work right like we shouldn't have to do

835
00:38:33,599 --> 00:38:38,400
that much so there probably should just

836
00:38:36,690 --> 00:38:42,059
be like a debug dump file kind of a

837
00:38:38,400 --> 00:38:49,200
thing like somewhere that we would have

838
00:38:42,059 --> 00:38:52,019
and we don't have that at the moment can

839
00:38:49,199 --> 00:38:54,929
see we don't you don't have any any of

840
00:38:52,019 --> 00:38:56,250
that as far as I can tell so you know

841
00:38:54,929 --> 00:38:59,940
this should probably we should probably

842
00:38:56,250 --> 00:39:01,079
wrap this up in like a dump thing like

843
00:38:59,940 --> 00:39:05,150
it should probably be something like

844
00:39:01,079 --> 00:39:07,559
this that we can use anywhere we want

845
00:39:05,150 --> 00:39:09,298
something like that so that way if you

846
00:39:07,559 --> 00:39:11,910
want to do just like debug dump data

847
00:39:09,298 --> 00:39:14,429
something like that you can basically

848
00:39:11,909 --> 00:39:18,358
just say you know give us I don't know

849
00:39:14,429 --> 00:39:20,759
like a name for the data that you

850
00:39:18,358 --> 00:39:23,400
actually want right like you know data

851
00:39:20,760 --> 00:39:25,650
name or whatever and then it will do

852
00:39:23,400 --> 00:39:28,740
this work for you you just give it like

853
00:39:25,650 --> 00:39:32,039
how big you know was that supposed to be

854
00:39:28,739 --> 00:39:35,088
and what was the data you actually

855
00:39:32,039 --> 00:39:39,369
wanted to dump and off it would go

856
00:39:35,088 --> 00:39:47,328
something like that no I mean

857
00:39:39,369 --> 00:39:49,010
so I think that's all we really need and

858
00:39:47,329 --> 00:39:51,200
we can also then use this in other

859
00:39:49,010 --> 00:39:54,410
places so it would take less time next

860
00:39:51,199 --> 00:39:56,719
time to do the dump because we you know

861
00:39:54,409 --> 00:39:59,389
would have a purpose-built API that

862
00:39:56,719 --> 00:40:01,689
opens and closes and stuff for us so

863
00:39:59,389 --> 00:40:04,190
what I'd like to do there as well is

864
00:40:01,690 --> 00:40:07,000
like I'd like to then say we've got a

865
00:40:04,190 --> 00:40:10,869
platform file type for dumps right

866
00:40:07,000 --> 00:40:13,880
because basically like that's the thing

867
00:40:10,869 --> 00:40:15,380
that's gonna you know we'd want to have

868
00:40:13,880 --> 00:40:17,059
like a directory where those go or

869
00:40:15,380 --> 00:40:19,010
something so exactly what this was

870
00:40:17,059 --> 00:40:21,858
previously used for we would we would

871
00:40:19,010 --> 00:40:24,770
want that to happen here as well so in

872
00:40:21,858 --> 00:40:26,869
here like I would say you know we've

873
00:40:24,769 --> 00:40:29,329
we've got our handmade hero directory

874
00:40:26,869 --> 00:40:32,150
and you know we've got a debug directory

875
00:40:29,329 --> 00:40:33,980
that stores this stuff so actually I

876
00:40:32,150 --> 00:40:36,349
would say that's probably where that

877
00:40:33,980 --> 00:40:41,539
should go right so inside the debug

878
00:40:36,349 --> 00:40:45,769
directory we should be able to open that

879
00:40:41,539 --> 00:40:48,858
up for dumping dump files there and

880
00:40:45,769 --> 00:40:51,818
again this will do I think like roughly

881
00:40:48,858 --> 00:40:56,059
what we won't want it to do right

882
00:40:51,818 --> 00:40:59,869
oops that should be dumped or something

883
00:40:56,059 --> 00:41:02,119
right so when we do get filed by path I

884
00:40:59,869 --> 00:41:04,608
don't know if it automatically adds the

885
00:41:02,119 --> 00:41:06,829
dump prefix in there it seems like it

886
00:41:04,608 --> 00:41:09,318
probably wouldn't I don't actually know

887
00:41:06,829 --> 00:41:10,640
though so again I'm just gonna use been

888
00:41:09,318 --> 00:41:14,050
so long since I've looked at any of that

889
00:41:10,639 --> 00:41:16,699
code I'm just gonna take a look to see

890
00:41:14,050 --> 00:41:20,240
whether the you know the get file by

891
00:41:16,699 --> 00:41:22,368
path stuff actually pens anything I

892
00:41:20,239 --> 00:41:24,169
don't think it does yeah so it doesn't

893
00:41:22,369 --> 00:41:29,838
so I think what I should be able to do

894
00:41:24,170 --> 00:41:32,329
is in here like you know maybe say file

895
00:41:29,838 --> 00:41:41,088
name again it's a little weird does this

896
00:41:32,329 --> 00:41:43,369
use I'm not sure how this figures out

897
00:41:41,088 --> 00:41:48,849
where stuff goes because it feels like

898
00:41:43,369 --> 00:41:48,849
this should actually create a path that

899
00:41:49,659 --> 00:41:55,368
it just feels a little bit buggy like

900
00:41:51,769 --> 00:42:02,030
like who puts this path together

901
00:41:55,369 --> 00:42:05,710
so that it's in the right place you know

902
00:42:02,030 --> 00:42:08,839
this this filename here like you know I

903
00:42:05,710 --> 00:42:10,880
feel like what I'd have to do I think

904
00:42:08,838 --> 00:42:17,230
what I'd have to do here is say

905
00:42:10,880 --> 00:42:17,230
something like debug slash lightbox dump

906
00:42:17,679 --> 00:42:26,690
and then I just say oh yeah the size of

907
00:42:22,400 --> 00:42:31,280
that is like you know size of solution

908
00:42:26,690 --> 00:42:34,900
boxes times however many of those were

909
00:42:31,280 --> 00:42:39,260
so you know this thing right here and

910
00:42:34,900 --> 00:42:41,720
that would do the whole dump but I feel

911
00:42:39,260 --> 00:42:42,890
like I shouldn't have to do that like it

912
00:42:41,719 --> 00:42:45,889
would be nice you just did that

913
00:42:42,889 --> 00:42:48,259
and then when you did an open file with

914
00:42:45,889 --> 00:42:50,088
the path in there it would say well

915
00:42:48,260 --> 00:42:55,960
whichever file group that was under it

916
00:42:50,088 --> 00:42:59,449
appends it right so I kind of think that

917
00:42:55,960 --> 00:43:02,829
shouldn't I be able to not use debug

918
00:42:59,449 --> 00:43:02,828
slash here like

919
00:43:10,650 --> 00:43:15,210
I don't know it's it's not a super well

920
00:43:13,108 --> 00:43:16,798
thought-out API the file stuff it's just

921
00:43:15,210 --> 00:43:18,990
for the asset processing so it's not

922
00:43:16,798 --> 00:43:20,818
something we really know is particularly

923
00:43:18,989 --> 00:43:22,858
great so I'm not super concerned about

924
00:43:20,818 --> 00:43:24,719
either way but I just wanted to drop a

925
00:43:22,858 --> 00:43:27,838
note there so I'm like yeah that seems a

926
00:43:24,719 --> 00:43:32,248
little bit Squinkie to me so you know

927
00:43:27,838 --> 00:43:35,880
maybe not anyway so I think we have a

928
00:43:32,248 --> 00:43:36,568
global platform handle for that in hand

929
00:43:35,880 --> 00:43:38,670
made out eh

930
00:43:36,568 --> 00:43:42,659
I want to say or something like that

931
00:43:38,670 --> 00:43:44,940
we've got one that we we actually just

932
00:43:42,659 --> 00:43:46,440
store it because that's accessible it's

933
00:43:44,940 --> 00:43:48,298
it's an API that's accessible to

934
00:43:46,440 --> 00:43:50,429
everybody you don't need a particular

935
00:43:48,298 --> 00:43:53,099
thing for it you can see that it's right

936
00:43:50,429 --> 00:43:55,679
here so I guess what I'd say is maybe

937
00:43:53,099 --> 00:43:57,660
let's just put that in here and make

938
00:43:55,679 --> 00:44:01,558
people call through it which which seems

939
00:43:57,659 --> 00:44:06,420
good to me actually as well so in here

940
00:44:01,559 --> 00:44:11,099
we would just say okay I guess I don't

941
00:44:06,420 --> 00:44:22,079
know I don't know if that's ex turned

942
00:44:11,099 --> 00:44:23,430
anywhere I guess it sort of is so I

943
00:44:22,079 --> 00:44:25,890
guess I can really put this anywhere

944
00:44:23,429 --> 00:44:27,748
right yeah I can so I can put this

945
00:44:25,889 --> 00:44:30,650
anywhere so I think maybe I'll just put

946
00:44:27,748 --> 00:44:30,649
this in here right

947
00:44:31,199 --> 00:44:36,169
and I'll just export that as like a

948
00:44:33,869 --> 00:44:40,440
function that people can call like this

949
00:44:36,170 --> 00:44:42,869
and you know we'll leave it at that so

950
00:44:40,440 --> 00:44:46,190
now anyone can dump data out to our

951
00:44:42,869 --> 00:44:48,989
dumps directory I don't know what that

952
00:44:46,190 --> 00:44:51,210
Open File group call was actually called

953
00:44:48,989 --> 00:44:53,940
let's look at it here

954
00:44:51,210 --> 00:45:00,690
I guess it's this get all files of type

955
00:44:53,940 --> 00:45:03,778
begin get all files of type end and we

956
00:45:00,690 --> 00:45:07,999
now know we've got a type of this which

957
00:45:03,778 --> 00:45:11,548
is the platform dump and there we go

958
00:45:07,998 --> 00:45:14,248
alright so get file by path wants

959
00:45:11,548 --> 00:45:18,630
another parameter not sure what that is

960
00:45:14,248 --> 00:45:20,399
so let me just look at the actual let me

961
00:45:18,630 --> 00:45:24,480
look at the actual call for that so

962
00:45:20,400 --> 00:45:27,450
that's get file by path it means

963
00:45:24,480 --> 00:45:32,070
file group oh and we need the path we

964
00:45:27,449 --> 00:45:38,939
didn't pass it and that's an address of

965
00:45:32,070 --> 00:45:41,580
I think that's it so I think that's what

966
00:45:38,940 --> 00:45:46,159
we wants and I think that should dump

967
00:45:41,579 --> 00:45:48,000
the data and if I run the program now

968
00:45:46,159 --> 00:45:49,679
well actually I guess I don't remember

969
00:45:48,000 --> 00:45:52,050
if I actually put in here an actual call

970
00:45:49,679 --> 00:45:54,719
I did if I run this now I think that

971
00:45:52,050 --> 00:46:03,810
should just constantly be dumping the

972
00:45:54,719 --> 00:46:05,519
data to it right and so yeah if we want

973
00:46:03,809 --> 00:46:07,679
raw dumps I think that's all we really

974
00:46:05,519 --> 00:46:11,909
needed to do and that gives us the

975
00:46:07,679 --> 00:46:14,699
complete set so what I need is just some

976
00:46:11,909 --> 00:46:17,969
way of actually triggering this I don't

977
00:46:14,699 --> 00:46:22,108
actually probably care much about it so

978
00:46:17,969 --> 00:46:25,639
maybe I'll just do that and then I'll

979
00:46:22,108 --> 00:46:30,659
just change that to a one if I want to

980
00:46:25,639 --> 00:46:32,519
make it go right so and you know the

981
00:46:30,659 --> 00:46:34,829
other way I could do that here is I

982
00:46:32,519 --> 00:46:44,789
could say something like okay you know

983
00:46:34,829 --> 00:46:48,690
maybe we've got a global you know light

984
00:46:44,789 --> 00:46:51,659
box dump trigger right and then we could

985
00:46:48,690 --> 00:46:55,050
do this and that way if we just set

986
00:46:51,659 --> 00:46:58,409
light box dump trigger to true it will

987
00:46:55,050 --> 00:47:00,619
dump the data so that would allow me to

988
00:46:58,409 --> 00:47:06,989
like walk to I don't need this anymore

989
00:47:00,619 --> 00:47:09,420
that would allow me to walk to where I

990
00:47:06,989 --> 00:47:11,549
want to be in the world so maybe I want

991
00:47:09,420 --> 00:47:13,710
to be in someplace that's like you know

992
00:47:11,550 --> 00:47:16,859
got lots of stuff in it or whatever I

993
00:47:13,710 --> 00:47:19,230
mean I don't really know what the best

994
00:47:16,858 --> 00:47:20,969
place to be is for it maybe I want to be

995
00:47:19,230 --> 00:47:25,170
like out where there's eat more like

996
00:47:20,969 --> 00:47:27,179
layers to the thing like out here you

997
00:47:25,170 --> 00:47:30,950
know where we start paging in more world

998
00:47:27,179 --> 00:47:34,589
stuff from like dungeons and stuff right

999
00:47:30,949 --> 00:47:36,500
like that's a lot of boxes right in the

1000
00:47:34,590 --> 00:47:38,990
system I would think

1001
00:47:36,500 --> 00:47:40,818
so you know if we wanted to we could say

1002
00:47:38,989 --> 00:47:47,118
alright let's go ahead and take a debug

1003
00:47:40,818 --> 00:47:48,679
dump in that location so whoo I guess

1004
00:47:47,119 --> 00:47:53,869
all I really have to do is look for that

1005
00:47:48,679 --> 00:47:57,618
variable and set a breakpoint so if I

1006
00:47:53,869 --> 00:48:01,210
set the breakpoint here and then I I

1007
00:47:57,619 --> 00:48:06,940
don't know can I set this variable to

1008
00:48:01,210 --> 00:48:17,599
something I don't know if I actually can

1009
00:48:06,940 --> 00:48:19,309
where is this thing I'm not sure they're

1010
00:48:17,599 --> 00:48:21,528
editing values in remedy I don't

1011
00:48:19,309 --> 00:48:24,079
actually know it's a good question

1012
00:48:21,528 --> 00:48:26,150
for that would be a good feature to add

1013
00:48:24,079 --> 00:48:28,278
to the list I've I don't think I've ever

1014
00:48:26,150 --> 00:48:34,990
actually tried it so I'm not sure at

1015
00:48:28,278 --> 00:48:34,989
this location memory

1016
00:48:45,179 --> 00:48:51,480
that was cool I'd like that send memory

1017
00:48:46,920 --> 00:48:55,889
to watch window am I allowed to change

1018
00:48:51,480 --> 00:49:01,019
this now I'm not alright so I have my

1019
00:48:55,889 --> 00:49:05,838
first feature request for uh for 43.0

1020
00:49:01,019 --> 00:49:08,608
branch can i edit that that's my request

1021
00:49:05,838 --> 00:49:11,099
alright so if I want to change this then

1022
00:49:08,608 --> 00:49:12,869
I guess I'll just do it this way

1023
00:49:11,099 --> 00:49:16,470
because I don't really need to do it the

1024
00:49:12,869 --> 00:49:23,490
way I was doing it I guess I will just

1025
00:49:16,469 --> 00:49:26,250
go to here and say true and then in

1026
00:49:23,489 --> 00:49:29,279
theory like I should watch this it

1027
00:49:26,250 --> 00:49:32,519
should stop on that line now and if I go

1028
00:49:29,280 --> 00:49:34,200
in here I should like open something I

1029
00:49:32,519 --> 00:49:36,509
mean I don't really need to walk through

1030
00:49:34,199 --> 00:49:38,039
this you know whatever it's gonna do

1031
00:49:36,510 --> 00:49:40,319
what its gonna do

1032
00:49:38,039 --> 00:49:43,259
and then in theory I should now have if

1033
00:49:40,318 --> 00:49:45,750
I kill the program I should now have a

1034
00:49:43,260 --> 00:49:48,690
dump of that if it actually worked right

1035
00:49:45,750 --> 00:49:51,298
so if I look at the debug data there's a

1036
00:49:48,690 --> 00:49:52,798
lightboxes dump hopefully it actually

1037
00:49:51,298 --> 00:49:54,780
has the data that I actually want in

1038
00:49:52,798 --> 00:49:58,079
there but that's like what we would need

1039
00:49:54,780 --> 00:49:59,790
to read in an external program so if I

1040
00:49:58,079 --> 00:50:04,230
want to what I should be able to do is

1041
00:49:59,789 --> 00:50:06,179
actually create sort of a standalone

1042
00:50:04,230 --> 00:50:11,190
thing that's going to load this and then

1043
00:50:06,179 --> 00:50:12,779
use the you know the lighting system

1044
00:50:11,190 --> 00:50:16,108
separately so you know if you if you

1045
00:50:12,780 --> 00:50:18,329
take a look at you know we've done this

1046
00:50:16,108 --> 00:50:21,630
several times before like ehh sphere for

1047
00:50:18,329 --> 00:50:24,390
example in the build up that we have

1048
00:50:21,630 --> 00:50:27,030
there's a sphere builder right that we

1049
00:50:24,389 --> 00:50:29,789
use for our lighting and if we look at

1050
00:50:27,030 --> 00:50:34,280
that it's right here we could just make

1051
00:50:29,789 --> 00:50:34,279
another one of these which is like

1052
00:50:34,940 --> 00:50:44,010
lighting profiler I don't know and all

1053
00:50:40,289 --> 00:50:47,849
that would do is we'd build HH like

1054
00:50:44,010 --> 00:50:51,660
light per for something right HH light

1055
00:50:47,849 --> 00:50:55,289
prof and that would allow us to create

1056
00:50:51,659 --> 00:50:56,940
some other executable that is there

1057
00:50:55,289 --> 00:50:58,079
solely for the purpose of profiling the

1058
00:50:56,940 --> 00:50:58,659
lighting system and it doesn't do

1059
00:50:58,079 --> 00:51:02,590
anything

1060
00:50:58,659 --> 00:51:07,259
else right so we do h/h light prof

1061
00:51:02,590 --> 00:51:11,050
that's cpp here we open that up we

1062
00:51:07,260 --> 00:51:14,560
basically you know copy this exact piece

1063
00:51:11,050 --> 00:51:16,450
of code that we had before and so that

1064
00:51:14,559 --> 00:51:18,489
we can you know build handmade here oh

1065
00:51:16,449 --> 00:51:21,519
we looking things with handmade hero

1066
00:51:18,489 --> 00:51:24,519
actual code rather than all of this

1067
00:51:21,519 --> 00:51:28,420
nonsense about the spheres all we would

1068
00:51:24,519 --> 00:51:31,150
actually do is stuff in here excuse me

1069
00:51:28,420 --> 00:51:33,700
I've got the UH something in my eye

1070
00:51:31,150 --> 00:51:42,670
we would just say all right when we run

1071
00:51:33,699 --> 00:51:46,269
this thing we'll grab an argument that

1072
00:51:42,670 --> 00:51:51,070
is the lightbox dump name or something

1073
00:51:46,269 --> 00:51:52,840
like that right we don't care about any

1074
00:51:51,070 --> 00:51:55,300
of this at all

1075
00:51:52,840 --> 00:51:58,329
we're gonna RB this thing like Arby's

1076
00:51:55,300 --> 00:52:01,600
you know like a roast beef we're gonna

1077
00:51:58,329 --> 00:52:08,049
open up the lightbox file will read the

1078
00:52:01,599 --> 00:52:25,440
entire file here if we can't we'll just

1079
00:52:08,050 --> 00:52:28,780
let people know and and that'll be that

1080
00:52:25,440 --> 00:52:32,440
right so this is all we really need to

1081
00:52:28,780 --> 00:52:36,519
do here and we'll just use this as our

1082
00:52:32,440 --> 00:52:38,230
way of debugging the program I don't

1083
00:52:36,519 --> 00:52:40,150
know if I can include the lighting here

1084
00:52:38,230 --> 00:52:42,490
so let me just go ahead and do a test

1085
00:52:40,150 --> 00:52:50,200
build first and see if we can make sure

1086
00:52:42,489 --> 00:52:55,149
that this works like so there we go OOP

1087
00:52:50,199 --> 00:52:57,359
I don't know if that's about is that a

1088
00:52:55,150 --> 00:52:57,360
bug

1089
00:52:59,429 --> 00:53:06,699
all right uh anyway so I want to be able

1090
00:53:03,460 --> 00:53:08,710
to do this like I want to have the

1091
00:53:06,699 --> 00:53:10,028
ability to call our lighting functions I

1092
00:53:08,710 --> 00:53:11,318
don't know if we can actually do that

1093
00:53:10,028 --> 00:53:16,119
you can see that there's some stuff

1094
00:53:11,318 --> 00:53:26,588
that's missing in this case so lighting

1095
00:53:16,119 --> 00:53:46,510
box is actually in it's in the renderer

1096
00:53:26,588 --> 00:53:52,558
code right and we also need H file so

1097
00:53:46,510 --> 00:53:52,559
world position think that's just in here

1098
00:53:53,940 --> 00:53:58,170
that's not how you spell that

1099
00:54:00,059 --> 00:54:19,809
yeah and debug dump date it can just be

1100
00:54:02,619 --> 00:54:22,838
stubbed and I think that's what we

1101
00:54:19,809 --> 00:54:25,028
really need there that's gonna have to

1102
00:54:22,838 --> 00:54:27,389
go up above the actual lighting code

1103
00:54:25,028 --> 00:54:30,190
because it needs to be able to find it

1104
00:54:27,389 --> 00:54:32,618
what else we got set light bounds enable

1105
00:54:30,190 --> 00:54:42,269
lighting dev mode lighting global anxa

1106
00:54:32,619 --> 00:54:45,910
probes so some of these push line

1107
00:54:42,269 --> 00:54:48,880
segments some of those are just in the

1108
00:54:45,909 --> 00:54:54,598
renderer code I don't think we want to

1109
00:54:48,880 --> 00:54:57,579
do that but we could dev mode lighting I

1110
00:54:54,599 --> 00:55:01,410
don't know what that actually is

1111
00:54:57,579 --> 00:55:01,410
I think it's in the editor

1112
00:55:05,329 --> 00:55:23,940
some we're not actually sure here's what

1113
00:55:12,210 --> 00:55:25,829
I'm gonna actually do alright so some of

1114
00:55:23,940 --> 00:55:31,440
these we actually have to bring in

1115
00:55:25,829 --> 00:55:33,930
probably I'm just guessing are in same

1116
00:55:31,440 --> 00:55:37,409
chunk for example he's a bit of an issue

1117
00:55:33,929 --> 00:55:40,558
um maybe I'll just grab that are in same

1118
00:55:37,409 --> 00:55:59,848
chunk because it's not important here so

1119
00:55:40,559 --> 00:56:02,089
I'll just say like and again this is

1120
00:55:59,849 --> 00:56:08,219
just me compiling a separate executable

1121
00:56:02,088 --> 00:56:10,469
sort of out in the you know out in the

1122
00:56:08,219 --> 00:56:12,960
wild here there's another way I could do

1123
00:56:10,469 --> 00:56:14,338
this and we'll see if I have to do too

1124
00:56:12,960 --> 00:56:21,778
many of these I'll do it the other way

1125
00:56:14,338 --> 00:56:23,578
but for now I'm just gonna do this and

1126
00:56:21,778 --> 00:56:29,190
basically stuff these out cuz I don't

1127
00:56:23,579 --> 00:56:33,869
care about them right all right so now

1128
00:56:29,190 --> 00:56:37,380
at least in theory I can go and if I

1129
00:56:33,869 --> 00:56:39,509
want to in the debug directory I should

1130
00:56:37,380 --> 00:56:50,940
be able to do something like HH light

1131
00:56:39,509 --> 00:56:53,420
perf light boxes dot dump like prof.

1132
00:56:50,940 --> 00:56:53,420
sorry

1133
00:56:55,108 --> 00:57:08,130
uh I Shh there we go I should be able to

1134
00:57:02,670 --> 00:57:10,579
do it that didn't that wasn't happy what

1135
00:57:08,130 --> 00:57:10,579
happened there

1136
00:57:13,338 --> 00:57:19,170
that's what happened there so I should

1137
00:57:16,980 --> 00:57:22,259
now be able to debug this program it's

1138
00:57:19,170 --> 00:57:26,130
like a separate program if I want to I

1139
00:57:22,259 --> 00:57:29,730
should be able to create a remedy debug

1140
00:57:26,130 --> 00:57:33,960
profile for it as well so hopefully I

1141
00:57:29,730 --> 00:57:35,400
can just you know go ahead and oh you

1142
00:57:33,960 --> 00:57:37,710
know what this is something we meant to

1143
00:57:35,400 --> 00:57:40,889
fix as well let's fix this because I

1144
00:57:37,710 --> 00:57:43,470
feel like I forgot to do that many times

1145
00:57:40,889 --> 00:57:46,618
here so in our mist directory we have

1146
00:57:43,469 --> 00:57:48,358
our remedy batch file this is like not

1147
00:57:46,619 --> 00:57:53,789
supposed to happen this way right the

1148
00:57:48,358 --> 00:57:59,098
start needs to get removed I think so

1149
00:57:53,789 --> 00:58:01,349
let me just see if that fixes that wait

1150
00:57:59,099 --> 00:58:08,609
but we still need hmm but we still need

1151
00:58:01,349 --> 00:58:15,829
to call that start call what am I doing

1152
00:58:08,608 --> 00:58:20,159
wrong here do you have to do that maybe

1153
00:58:15,829 --> 00:58:22,859
nope so I thought there was some way

1154
00:58:20,159 --> 00:58:26,219
maybe extra teen can tell us I thought

1155
00:58:22,858 --> 00:58:30,630
there was some way to like get remedy to

1156
00:58:26,219 --> 00:58:35,759
use the things that I just passed to it

1157
00:58:30,630 --> 00:58:43,259
as oh I like that as the as a startup

1158
00:58:35,759 --> 00:58:45,719
stuff here but I don't know if that's

1159
00:58:43,259 --> 00:58:47,338
true it doesn't really matter to me but

1160
00:58:45,719 --> 00:58:49,548
I figured I should probably fix it at

1161
00:58:47,338 --> 00:58:49,548
some point

1162
00:58:54,199 --> 00:59:02,848
might have to Appendix II but I thought

1163
00:58:56,518 --> 00:59:04,379
that worked okay so apparently no yeah

1164
00:59:02,849 --> 00:59:06,480
it does work so I guess you need to

1165
00:59:04,380 --> 00:59:08,039
actually say eggsy cuz it probably just

1166
00:59:06,480 --> 00:59:09,690
couldn't find it so nevermind I didn't

1167
00:59:08,039 --> 00:59:11,700
need it looks like I actually did fix my

1168
00:59:09,690 --> 00:59:13,249
batch file so that's good I thought my

1169
00:59:11,699 --> 00:59:17,759
batch file was broken but it's not

1170
00:59:13,248 --> 00:59:19,798
nevermind alright so yeah so I can now

1171
00:59:17,759 --> 00:59:21,568
create a debug profile for this and I'm

1172
00:59:19,798 --> 00:59:26,130
just gonna save that off so that we have

1173
00:59:21,568 --> 00:59:28,018
it HH light prof so that way we can

1174
00:59:26,130 --> 00:59:29,849
quickly like run the thing and debug it

1175
00:59:28,018 --> 00:59:31,439
in whatever right so here we are in here

1176
00:59:29,849 --> 00:59:35,430
and you know we did some stuff and

1177
00:59:31,440 --> 00:59:37,230
whatever no one cares anyway so now if I

1178
00:59:35,429 --> 00:59:40,440
want to do this I should be able to say

1179
00:59:37,230 --> 00:59:43,068
like look split box is a thing right and

1180
00:59:40,440 --> 00:59:45,778
I should be able to actually call

1181
00:59:43,068 --> 00:59:47,909
exactly what we're doing so I can build

1182
00:59:45,778 --> 00:59:50,039
a spatial partition and then I can test

1183
00:59:47,909 --> 00:59:53,159
the spatial partition and all that good

1184
00:59:50,039 --> 00:59:56,190
stuff right so I should be able to

1185
00:59:53,159 --> 01:00:00,239
basically run exactly what I am running

1186
00:59:56,190 --> 01:00:03,088
here almost verbatim right like I should

1187
01:00:00,239 --> 01:00:11,400
be able to say all right like let's go

1188
01:00:03,088 --> 01:00:17,818
ahead and and run the spatial part you

1189
01:00:11,400 --> 01:00:21,059
know let's build the spatial partition

1190
01:00:17,818 --> 01:00:23,998
for lighting using an actual lighting

1191
01:00:21,059 --> 01:00:26,970
solution right so I should be able to do

1192
01:00:23,998 --> 01:00:29,639
something like this where I say like

1193
01:00:26,969 --> 01:00:32,068
build a spatial partition for the

1194
01:00:29,639 --> 01:00:35,328
lighting and I'll have to obviously and

1195
01:00:32,068 --> 01:00:35,329
in fact I suppose I could do that here

1196
01:00:42,519 --> 01:00:46,909
so if I pass a lighting solution to this

1197
01:00:44,838 --> 01:00:48,380
I should be able to then call bills

1198
01:00:46,909 --> 01:00:50,179
based purchase relating to build the

1199
01:00:48,380 --> 01:00:53,088
spatial partition that we actually have

1200
01:00:50,179 --> 01:00:54,649
I should then be able to also like

1201
01:00:53,088 --> 01:00:56,358
effectively just do the work

1202
01:00:54,650 --> 01:01:00,289
distribution so I should be able to say

1203
01:00:56,358 --> 01:01:03,139
look if I create a bunch of these work

1204
01:01:00,289 --> 01:01:06,020
units I should then be able to actually

1205
01:01:03,139 --> 01:01:08,659
call the ray caster right if I wanted to

1206
01:01:06,019 --> 01:01:12,230
now I don't know that I actually want

1207
01:01:08,659 --> 01:01:14,598
that per se what I might want to do

1208
01:01:12,230 --> 01:01:16,429
instead is say all right at the moment

1209
01:01:14,599 --> 01:01:19,640
you know maybe we want to do that

1210
01:01:16,429 --> 01:01:22,608
eventually at the moment I may just

1211
01:01:19,639 --> 01:01:25,940
literally only want to test the ray

1212
01:01:22,608 --> 01:01:28,400
caster like in a loop right so I may

1213
01:01:25,940 --> 01:01:31,519
instead want to say look I just want to

1214
01:01:28,400 --> 01:01:34,068
call this thing right so I want to call

1215
01:01:31,519 --> 01:01:36,259
this thing here so maybe I'm just

1216
01:01:34,068 --> 01:01:41,058
actually going to create a lighting work

1217
01:01:36,260 --> 01:01:43,539
structure and then I'm going to call ray

1218
01:01:41,059 --> 01:01:52,839
cast on that lighting work structure

1219
01:01:43,539 --> 01:01:52,839
with you know all of this garbage right

1220
01:01:58,858 --> 01:02:04,119
so if I wanted to do a raycast this way

1221
01:02:01,358 --> 01:02:05,558
I could just test this manually and not

1222
01:02:04,119 --> 01:02:06,760
actually do the work decision and I

1223
01:02:05,559 --> 01:02:08,410
think I might want to do that because I

1224
01:02:06,760 --> 01:02:10,059
want to be a little bit more specific

1225
01:02:08,409 --> 01:02:11,949
about what I'm testing like right now I

1226
01:02:10,059 --> 01:02:15,819
don't want to look at like the diffuse

1227
01:02:11,949 --> 01:02:17,318
texture builds and stuff like that so if

1228
01:02:15,818 --> 01:02:18,909
I actually went through the whole work

1229
01:02:17,318 --> 01:02:21,909
distribution pass it would do a bunch of

1230
01:02:18,909 --> 01:02:23,980
other stuff and I want to kind of just

1231
01:02:21,909 --> 01:02:26,078
look at the raycasting so kind of my

1232
01:02:23,980 --> 01:02:28,059
goal here is to get a little sign

1233
01:02:26,079 --> 01:02:29,829
program working that only is gonna cast

1234
01:02:28,059 --> 01:02:32,260
Rays that's all it does and then we can

1235
01:02:29,829 --> 01:02:36,849
profile just that you know just that

1236
01:02:32,260 --> 01:02:38,440
particular thing you know so if I'm

1237
01:02:36,849 --> 01:02:42,338
gonna do that I need a couple things I

1238
01:02:38,440 --> 01:02:45,519
need the spec and diffuse atlases and I

1239
01:02:42,338 --> 01:02:47,108
need the spec Texel right so if you look

1240
01:02:45,519 --> 01:02:48,608
at what's gonna happen in here and we

1241
01:02:47,108 --> 01:02:50,578
take a look at what's going on

1242
01:02:48,608 --> 01:02:53,108
we can sort of go through the lighting

1243
01:02:50,579 --> 01:02:54,880
solution and see everywhere it's

1244
01:02:53,108 --> 01:02:56,469
actually used so you know there's like

1245
01:02:54,880 --> 01:02:58,358
the root box index that should it filled

1246
01:02:56,469 --> 01:03:01,509
out there's a tee Update blend we're

1247
01:02:58,358 --> 01:03:03,190
gonna need right so up here we should

1248
01:03:01,510 --> 01:03:05,829
start setting those things like the T

1249
01:03:03,190 --> 01:03:07,450
Update blend and we don't really care

1250
01:03:05,829 --> 01:03:10,809
what that is as long as it's not a weird

1251
01:03:07,449 --> 01:03:12,818
singular value we should be able to set

1252
01:03:10,809 --> 01:03:15,730
it to anything we want since it's a

1253
01:03:12,818 --> 01:03:17,349
constant in here that I think we can

1254
01:03:15,730 --> 01:03:20,530
just set it to the exact same thing it's

1255
01:03:17,349 --> 01:03:22,510
like 8 over 60 or something I don't

1256
01:03:20,530 --> 01:03:24,569
actually remember what it's set to but

1257
01:03:22,510 --> 01:03:28,900
we should be able to basically say look

1258
01:03:24,568 --> 01:03:30,548
it's it's just this so you know we'll do

1259
01:03:28,900 --> 01:03:33,099
the same thing might as well know no

1260
01:03:30,548 --> 01:03:34,420
reason not to so if we take a look at

1261
01:03:33,099 --> 01:03:35,650
what's actually in the letting solution

1262
01:03:34,420 --> 01:03:39,250
up here and we take a look at what all

1263
01:03:35,650 --> 01:03:41,289
these things are we're gonna want to

1264
01:03:39,250 --> 01:03:43,059
actually set like most of them to be the

1265
01:03:41,289 --> 01:03:44,529
correct proxies of things we actually

1266
01:03:43,059 --> 01:03:46,390
would need for anything that actually

1267
01:03:44,530 --> 01:03:48,548
matters so like the Vox will have to get

1268
01:03:46,389 --> 01:03:50,440
set up the rest of things probably not

1269
01:03:48,548 --> 01:03:52,568
so much the fuse weight map should

1270
01:03:50,440 --> 01:03:53,980
probably get set up well actually no

1271
01:03:52,568 --> 01:03:55,568
we're gonna look look at that so the

1272
01:03:53,980 --> 01:03:58,240
sampling spheres should probably get set

1273
01:03:55,568 --> 01:04:00,068
up that's about the only thing I guess

1274
01:03:58,239 --> 01:04:01,509
that we would need there so let's make

1275
01:04:00,068 --> 01:04:03,400
sure the sampling spheres are up there

1276
01:04:01,510 --> 01:04:05,049
and then we need to set like all of this

1277
01:04:03,400 --> 01:04:07,838
stuff up right and that's going to come

1278
01:04:05,048 --> 01:04:10,889
from the file that we actually saved so

1279
01:04:07,838 --> 01:04:13,828
this stuff should get set up in the file

1280
01:04:10,889 --> 01:04:18,268
like from the file like here so we're

1281
01:04:13,829 --> 01:04:20,369
gonna set the box count and and this is

1282
01:04:18,268 --> 01:04:21,629
where we'd actually get you know we're

1283
01:04:20,369 --> 01:04:24,778
gonna we're gonna need like a malloc

1284
01:04:21,630 --> 01:04:27,000
here right to get to malloc and an F

1285
01:04:24,778 --> 01:04:29,608
Reed to get from the file the stuff that

1286
01:04:27,000 --> 01:04:33,139
actually goes in in the actual boxes

1287
01:04:29,608 --> 01:04:38,369
right and so we're gonna need to load

1288
01:04:33,139 --> 01:04:41,098
that up and that's totally fine we also

1289
01:04:38,369 --> 01:04:46,410
need a couple other things here probably

1290
01:04:41,099 --> 01:04:50,010
I would guess do we really know I maybe

1291
01:04:46,409 --> 01:04:52,108
we don't really need much that may be

1292
01:04:50,010 --> 01:04:54,750
mostly it so I think the only thing we

1293
01:04:52,108 --> 01:04:57,058
really need beyond there like I said is

1294
01:04:54,750 --> 01:05:03,059
the the lighting spheres we need

1295
01:04:57,059 --> 01:05:04,528
obviously but we can we can just get

1296
01:05:03,059 --> 01:05:05,789
them from the include file so the

1297
01:05:04,528 --> 01:05:08,818
lighting is spheres and then just the

1298
01:05:05,789 --> 01:05:11,609
voxel information and I think that's

1299
01:05:08,818 --> 01:05:17,509
that's most of it so let's go ahead and

1300
01:05:11,608 --> 01:05:20,190
set that so there's the Chi update blend

1301
01:05:17,509 --> 01:05:22,679
here's the random series there's the

1302
01:05:20,190 --> 01:05:25,190
sampling spheres we don't need the work

1303
01:05:22,679 --> 01:05:29,159
distribution array it's not necessary

1304
01:05:25,190 --> 01:05:33,480
the voxel dim and the in of Excel dim we

1305
01:05:29,159 --> 01:05:37,558
we probably do want right and hopefully

1306
01:05:33,480 --> 01:05:41,099
we can work that out fundamental unit we

1307
01:05:37,559 --> 01:05:43,319
may not have them not sure right let me

1308
01:05:41,099 --> 01:05:48,230
go ahead and if this out for one quick

1309
01:05:43,318 --> 01:05:52,349
second actually and this as well so

1310
01:05:48,230 --> 01:05:55,619
fundamental unit is something that gets

1311
01:05:52,349 --> 01:05:58,759
passed in probably yeah so I don't know

1312
01:05:55,619 --> 01:06:04,318
that we care about the fundamental unit

1313
01:05:58,759 --> 01:06:07,920
mmm at all probably won't matter other

1314
01:06:04,318 --> 01:06:13,018
than to profile our voxel lookups so

1315
01:06:07,920 --> 01:06:15,450
when we call in it lighting I suppose we

1316
01:06:13,018 --> 01:06:17,939
should probably double check and and

1317
01:06:15,449 --> 01:06:21,149
okay so it's 1.4 is what we were setting

1318
01:06:17,940 --> 01:06:23,220
so you know sure it doesn't I don't

1319
01:06:21,150 --> 01:06:25,318
think that actually matters like at all

1320
01:06:23,219 --> 01:06:27,899
what we set that to for the most part

1321
01:06:25,318 --> 01:06:30,150
but you know just to make sure profiling

1322
01:06:27,900 --> 01:06:32,818
as close as possible will keep the same

1323
01:06:30,150 --> 01:06:34,139
constants but you know there I don't

1324
01:06:32,818 --> 01:06:36,710
know that that's gonna make a

1325
01:06:34,139 --> 01:06:41,098
particularly big difference either way

1326
01:06:36,710 --> 01:06:44,548
alright so I think that's mostly what we

1327
01:06:41,099 --> 01:06:47,338
need to make all this stuff work so now

1328
01:06:44,548 --> 01:06:51,869
we're really talking mostly about spec

1329
01:06:47,338 --> 01:06:53,818
atlas diffuse atlas i don't know where

1330
01:06:51,869 --> 01:06:55,798
those are going to be coming from here

1331
01:06:53,818 --> 01:06:59,429
and so we're probably just gonna have to

1332
01:06:55,798 --> 01:07:01,409
set up fake versions and we're gonna

1333
01:06:59,429 --> 01:07:05,009
probably need to actually allocate the

1334
01:07:01,409 --> 01:07:07,078
memory for those just to make sure that

1335
01:07:05,009 --> 01:07:10,980
because you know this code writes in to

1336
01:07:07,079 --> 01:07:13,950
that so we kind of need to have that

1337
01:07:10,980 --> 01:07:17,250
backing buffer there so you know this we

1338
01:07:13,949 --> 01:07:18,689
can nerf temporarily just to get it

1339
01:07:17,250 --> 01:07:21,539
compiling but then we're gonna want to

1340
01:07:18,690 --> 01:07:23,220
actually generate raise the spec atlas

1341
01:07:21,539 --> 01:07:31,140
and diffuse that lists those are gonna

1342
01:07:23,219 --> 01:07:33,588
have to get passed in here like so so we

1343
01:07:31,139 --> 01:07:33,588
need those

1344
01:07:40,380 --> 01:07:46,028
and we can just use weekend to knit

1345
01:07:43,150 --> 01:07:50,278
those by doing and make light out let's

1346
01:07:46,028 --> 01:07:52,869
call so that shouldn't be a huge deal

1347
01:07:50,278 --> 01:07:54,880
and then we can just do it a test or a

1348
01:07:52,869 --> 01:08:02,940
cast call and this should you know run

1349
01:07:54,880 --> 01:08:09,579
the right caster right so I think that's

1350
01:08:02,940 --> 01:08:11,469
the setup we're looking for oops and I

1351
01:08:09,579 --> 01:08:13,839
don't know that we need to actually go

1352
01:08:11,469 --> 01:08:15,338
so far as to pass an actual spec Texel

1353
01:08:13,838 --> 01:08:16,838
at least for the kind of testing that

1354
01:08:15,338 --> 01:08:18,609
we're doing right now doesn't seem

1355
01:08:16,838 --> 01:08:23,349
particularly necessary so we should be

1356
01:08:18,609 --> 01:08:25,599
able to do is a get Texel call on it

1357
01:08:23,349 --> 01:08:27,819
more directly so when this thing

1358
01:08:25,599 --> 01:08:30,159
actually like if we look at the way the

1359
01:08:27,819 --> 01:08:33,849
lighting code was doing that when it's

1360
01:08:30,158 --> 01:08:37,559
actually doing the distribution on those

1361
01:08:33,849 --> 01:08:41,859
texels in the work callback which is

1362
01:08:37,560 --> 01:08:44,500
right here when it gets a Texel it does

1363
01:08:41,859 --> 01:08:47,020
it like this right so we should be able

1364
01:08:44,500 --> 01:08:48,639
to actually just do that right we should

1365
01:08:47,020 --> 01:08:52,420
be able to say look just get it I don't

1366
01:08:48,639 --> 01:08:54,130
care which one we're not profiling the

1367
01:08:52,420 --> 01:08:58,449
rights to the Texel at this particular

1368
01:08:54,130 --> 01:09:01,599
time so just give me something and we'll

1369
01:08:58,448 --> 01:09:04,210
pass that down and that you know that's

1370
01:09:01,599 --> 01:09:05,230
what you'll use so hopefully that gets

1371
01:09:04,210 --> 01:09:11,319
us to the point

1372
01:09:05,229 --> 01:09:12,908
oops hopefully that gets us to the point

1373
01:09:11,319 --> 01:09:15,250
where we're really just focusing on

1374
01:09:12,908 --> 01:09:17,920
loading up this initial data when we

1375
01:09:15,250 --> 01:09:21,279
look at those light Atlas calls again I

1376
01:09:17,920 --> 01:09:27,520
can if I want to and I you know I might

1377
01:09:21,279 --> 01:09:30,599
as well just go ahead and take where we

1378
01:09:27,520 --> 01:09:33,599
were doing the light Atlas generator

1379
01:09:30,599 --> 01:09:33,599
which

1380
01:09:33,779 --> 01:09:49,239
probably this right what I can do is say

1381
01:09:37,448 --> 01:09:52,059
look let's just do this so here's the

1382
01:09:49,238 --> 01:09:55,059
thing that oh that was not what I wanted

1383
01:09:52,060 --> 01:09:56,020
at all why did I paste that in there all

1384
01:09:55,060 --> 01:09:59,560
right

1385
01:09:56,020 --> 01:10:01,330
I meant to paste it in here so let's

1386
01:09:59,560 --> 01:10:03,160
just do this we'll actually use the

1387
01:10:01,329 --> 01:10:06,430
constants we can tweak these if we want

1388
01:10:03,159 --> 01:10:07,630
to but again I don't think we care so we

1389
01:10:06,430 --> 01:10:12,219
should then be able to say all right

1390
01:10:07,630 --> 01:10:15,430
here's the diffuse Atlas here's the spec

1391
01:10:12,219 --> 01:10:17,409
atlas and now they're initialized with

1392
01:10:15,430 --> 01:10:24,550
the actual settings that they should in

1393
01:10:17,409 --> 01:10:26,859
theory have right and then we would want

1394
01:10:24,550 --> 01:10:28,029
to I think and you know give them some

1395
01:10:26,859 --> 01:10:30,219
backing memory because otherwise it'll

1396
01:10:28,029 --> 01:10:34,448
write into nowhere so we probably do

1397
01:10:30,219 --> 01:10:38,289
want to do a thing where we at least do

1398
01:10:34,448 --> 01:10:47,469
call this so we probably do want to set

1399
01:10:38,289 --> 01:10:53,529
that a few setlist texels to some malloc

1400
01:10:47,469 --> 01:10:55,960
thing right so what we want to do here

1401
01:10:53,529 --> 01:10:58,349
is get the entire set we might actually

1402
01:10:55,960 --> 01:11:01,359
need and I think you can just do that

1403
01:10:58,350 --> 01:11:07,930
with a call that's like the give me the

1404
01:11:01,359 --> 01:11:10,000
size I think it's this so all that's

1405
01:11:07,930 --> 01:11:11,199
doing is saying look just allocate

1406
01:11:10,000 --> 01:11:13,750
however much memory this thing says it

1407
01:11:11,198 --> 01:11:16,210
needs and give it to it so that creates

1408
01:11:13,750 --> 01:11:17,738
a fake environment that's similar to the

1409
01:11:16,210 --> 01:11:19,569
one that runs in the game without too

1410
01:11:17,738 --> 01:11:22,269
much trouble all we need now is those

1411
01:11:19,569 --> 01:11:24,880
actual boxes so what we want to do here

1412
01:11:22,270 --> 01:11:28,480
is you know get a file size so we'd want

1413
01:11:24,880 --> 01:11:33,969
to do something like this for some

1414
01:11:28,479 --> 01:11:36,159
reason C runtime library and never

1415
01:11:33,969 --> 01:11:41,020
thought the size of the file would be

1416
01:11:36,159 --> 01:11:42,639
something you'd want to know um so if we

1417
01:11:41,020 --> 01:11:46,530
go ahead and do an F seek on this and

1418
01:11:42,640 --> 01:11:46,530
just do like a seek set

1419
01:11:50,750 --> 01:11:57,050
what seeks that seek end into an F tell

1420
01:11:53,489 --> 01:11:59,539
on it that should give us the file size

1421
01:11:57,050 --> 01:12:18,510
and then we can malloc the file size

1422
01:11:59,539 --> 01:12:22,109
right and I freed it I don't know the

1423
01:12:18,510 --> 01:12:24,829
box count in any particular way but I

1424
01:12:22,109 --> 01:12:27,869
can get it pretty easily just by saying

1425
01:12:24,829 --> 01:12:37,350
whatever the file size is that's how

1426
01:12:27,869 --> 01:12:40,109
many boxes there were right and it looks

1427
01:12:37,350 --> 01:12:50,539
like this has to be 16-bit because we

1428
01:12:40,109 --> 01:12:57,839
don't allow bigger than that right and

1429
01:12:50,539 --> 01:12:59,670
that's it that's our test app I think

1430
01:12:57,840 --> 01:13:03,029
that will literally do the whole thing

1431
01:12:59,670 --> 01:13:07,619
right now I don't actually want the

1432
01:13:03,029 --> 01:13:10,979
global debug table so I think what I'll

1433
01:13:07,619 --> 01:13:13,619
do here is turn that off so in here I'll

1434
01:13:10,979 --> 01:13:24,539
probably do it like a pound to fine like

1435
01:13:13,619 --> 01:13:30,359
handmade like undef handmade internal so

1436
01:13:24,539 --> 01:13:34,319
the debug code is gone I'll also turn

1437
01:13:30,359 --> 01:13:36,000
off handmade slow so basically like the

1438
01:13:34,319 --> 01:13:41,279
certs are gone the internal code the

1439
01:13:36,000 --> 01:13:43,199
debug code is gone and off we go so I

1440
01:13:41,279 --> 01:13:46,170
think that should recreate our test

1441
01:13:43,199 --> 01:13:49,859
scenario I don't know why this is still

1442
01:13:46,170 --> 01:13:51,840
here shouldn't be and now I think we can

1443
01:13:49,859 --> 01:13:54,029
save this highlight prop up so now I

1444
01:13:51,840 --> 01:13:55,619
think if we just load remedy it should

1445
01:13:54,029 --> 01:13:58,378
just be in our drop-down list we can

1446
01:13:55,619 --> 01:14:01,319
select the light prof and run it

1447
01:13:58,378 --> 01:14:05,519
right so I think we're all good I think

1448
01:14:01,319 --> 01:14:09,658
that's all we substituted and we should

1449
01:14:05,519 --> 01:14:12,628
be in good shape this I don't know if

1450
01:14:09,658 --> 01:14:19,589
there's a size issue there so if we look

1451
01:14:12,628 --> 01:14:21,599
at at the lighting solution here I don't

1452
01:14:19,590 --> 01:14:28,788
know if that's too big I want to move it

1453
01:14:21,599 --> 01:14:30,029
out for the stack I think it probably is

1454
01:14:28,788 --> 01:14:33,328
yeah

1455
01:14:30,029 --> 01:14:35,878
so there you go we're running our test

1456
01:14:33,328 --> 01:14:38,398
program everyone's happy

1457
01:14:35,878 --> 01:14:41,189
that actually in theory does an actual

1458
01:14:38,399 --> 01:14:45,499
rate cast I think so if we come through

1459
01:14:41,189 --> 01:14:48,030
here I mean in theory I this is a

1460
01:14:45,498 --> 01:14:54,538
release build you know what let's

1461
01:14:48,029 --> 01:14:56,569
actually step through it let's just do

1462
01:14:54,538 --> 01:14:56,569
it

1463
01:15:03,949 --> 01:15:23,309
so that's gonna be in work directory and

1464
01:15:13,220 --> 01:15:26,930
debug right step in open the dump file

1465
01:15:23,310 --> 01:15:26,930
how many boxes are there oops

1466
01:15:27,350 --> 01:15:33,350
not the best spelling in the world zero

1467
01:15:34,939 --> 01:15:37,939
what

1468
01:15:45,488 --> 01:16:02,229
did I flip I did I had dollar for every

1469
01:15:56,319 --> 01:16:06,969
time I did that typed enums it'd be nice

1470
01:16:02,229 --> 01:16:09,488
alright anyway let's go ahead and try

1471
01:16:06,969 --> 01:16:17,819
that one more time I'm like it ain't two

1472
01:16:09,488 --> 01:16:21,218
boxes fellas much better much better so

1473
01:16:17,819 --> 01:16:22,808
in theory if we read in these boxes now

1474
01:16:21,219 --> 01:16:24,788
like I should be able to sort of like

1475
01:16:22,809 --> 01:16:27,219
look at them and see that there's

1476
01:16:24,788 --> 01:16:29,920
actually some data in there that maybe

1477
01:16:27,219 --> 01:16:33,309
it's theoretically plausible right so

1478
01:16:29,920 --> 01:16:37,510
like you know those are good floats

1479
01:16:33,309 --> 01:16:43,119
right so you know looks look saying it's

1480
01:16:37,510 --> 01:16:46,619
kind of what I wanted and if I looked at

1481
01:16:43,118 --> 01:16:49,359
more of them so I could do like solution

1482
01:16:46,618 --> 01:16:52,018
boxes I think I can just like say I want

1483
01:16:49,359 --> 01:16:55,058
more of them right and then you know

1484
01:16:52,019 --> 01:16:58,090
still looks good so so you know that

1485
01:16:55,059 --> 01:16:59,079
looks looks reasonable if the Box had is

1486
01:16:58,090 --> 01:17:01,510
three for three

1487
01:16:59,078 --> 01:17:03,759
then maybe I want to look at box three

1488
01:17:01,510 --> 01:17:05,050
for two which is the last box just to

1489
01:17:03,760 --> 01:17:07,150
make sure that it doesn't get weird at

1490
01:17:05,050 --> 01:17:12,730
the end it doesn't appear to so that

1491
01:17:07,149 --> 01:17:17,469
seems fine so off we go so all right

1492
01:17:12,729 --> 01:17:18,759
that all looks fine now we have the

1493
01:17:17,469 --> 01:17:20,198
problem I think this should crash

1494
01:17:18,760 --> 01:17:22,389
immediately though because it doesn't

1495
01:17:20,198 --> 01:17:27,788
have room to create boxes right

1496
01:17:22,389 --> 01:17:31,300
shouldn't it theory yeah so we need to

1497
01:17:27,788 --> 01:17:33,639
pad out that box array and I don't

1498
01:17:31,300 --> 01:17:36,248
actually remember much about how that

1499
01:17:33,639 --> 01:17:42,130
gets done so I'm just gonna do it in a

1500
01:17:36,248 --> 01:17:44,170
sort of you know arbitrary way look you

1501
01:17:42,130 --> 01:17:46,659
know don't use four times more boxes

1502
01:17:44,170 --> 01:17:48,368
then you get inputted all right which

1503
01:17:46,658 --> 01:17:50,558
should be impossible because since it's

1504
01:17:48,368 --> 01:17:52,509
doing a binary split tree basically in

1505
01:17:50,559 --> 01:17:55,150
theory you know you shouldn't have more

1506
01:17:52,510 --> 01:17:58,630
than log n boxes added to the box set

1507
01:17:55,149 --> 01:18:00,909
right something like that you

1508
01:17:58,630 --> 01:18:02,199
order login it doesn't matter point

1509
01:18:00,909 --> 01:18:06,750
being I just want to give it some

1510
01:18:02,199 --> 01:18:06,750
Headroom and then I think we can run it

1511
01:18:09,180 --> 01:18:24,900
um so that looks like it's having

1512
01:18:15,130 --> 01:18:29,170
trouble with a box which I don't know

1513
01:18:24,899 --> 01:18:33,199
why it would here's the solution these

1514
01:18:29,170 --> 01:18:35,369
are fine obviously

1515
01:18:33,199 --> 01:18:38,769
[Music]

1516
01:18:35,369 --> 01:18:42,039
so what's it having trouble with box the

1517
01:18:38,770 --> 01:18:51,850
box that got must be a non not real box

1518
01:18:42,039 --> 01:18:53,920
yeah so what's the box index so that

1519
01:18:51,850 --> 01:19:01,470
does seem strange because we just saw

1520
01:18:53,920 --> 01:19:04,480
the box index set to something oh yeah

1521
01:19:01,470 --> 01:19:06,810
we want to allocate this many but we

1522
01:19:04,479 --> 01:19:09,939
don't want to tell it there's that many

1523
01:19:06,810 --> 01:19:18,610
so what we actually want to do here is

1524
01:19:09,939 --> 01:19:21,039
just allocate more boxes right so just

1525
01:19:18,609 --> 01:19:23,739
give it some overhead right some extra

1526
01:19:21,039 --> 01:19:25,989
space at the end to use which we're

1527
01:19:23,739 --> 01:19:27,099
gonna undo that in a minute anyway but

1528
01:19:25,989 --> 01:19:30,579
you know off we go

1529
01:19:27,100 --> 01:19:32,170
so let's see what's going on here so one

1530
01:19:30,579 --> 01:19:34,119
more thing we got to do it looks like is

1531
01:19:32,170 --> 01:19:37,600
we've got to fill out that work order so

1532
01:19:34,119 --> 01:19:40,869
I forgot to do that let's fill out that

1533
01:19:37,600 --> 01:19:43,120
work order so in the work order I don't

1534
01:19:40,869 --> 01:19:44,559
know that we can fill it we can't fill

1535
01:19:43,119 --> 01:19:49,090
in the commands really so we'll fill out

1536
01:19:44,560 --> 01:19:51,820
the solution voxel X can I think all the

1537
01:19:49,090 --> 01:19:55,470
rest of stuff could still be zero so I

1538
01:19:51,819 --> 01:19:55,469
think that's fine oops

1539
01:20:07,000 --> 01:20:12,069
and now we're all good so now we're

1540
01:20:09,520 --> 01:20:14,440
running the test and we're running the

1541
01:20:12,069 --> 01:20:17,229
test pretty reasonably right so we

1542
01:20:14,439 --> 01:20:20,739
created a you know fake environment we

1543
01:20:17,229 --> 01:20:24,250
then actually you know start we do ray

1544
01:20:20,739 --> 01:20:27,369
casting and so now all we really need at

1545
01:20:24,250 --> 01:20:31,140
this point I think is to actually put in

1546
01:20:27,369 --> 01:20:34,359
the sampling sphere randomness so

1547
01:20:31,140 --> 01:20:36,130
instead of calling ray cast like these

1548
01:20:34,359 --> 01:20:40,029
are two garbage values right

1549
01:20:36,130 --> 01:20:41,500
like that's not not sensible right so

1550
01:20:40,029 --> 01:20:44,380
think what we need to do now is actually

1551
01:20:41,500 --> 01:20:49,569
make some way of calling this with some

1552
01:20:44,380 --> 01:20:51,640
real code so if we look in here at where

1553
01:20:49,569 --> 01:20:53,529
the lighting is actually doing that call

1554
01:20:51,640 --> 01:20:56,530
you can see us getting the sampling

1555
01:20:53,529 --> 01:21:00,550
sphere out of here let's go ahead and do

1556
01:20:56,529 --> 01:21:02,380
that right so this sampling sphere pull

1557
01:21:00,550 --> 01:21:04,480
and then the pull out of the sampling

1558
01:21:02,380 --> 01:21:06,909
sphere I'm gonna copy that into the

1559
01:21:04,479 --> 01:21:08,219
light perf it'll look something like

1560
01:21:06,909 --> 01:21:13,000
this

1561
01:21:08,220 --> 01:21:15,699
right and that's how we'll get the Ray

1562
01:21:13,000 --> 01:21:17,770
origin in the rady now the origin I

1563
01:21:15,699 --> 01:21:20,829
don't care what the origin is

1564
01:21:17,770 --> 01:21:23,200
particularly much it would be nice if we

1565
01:21:20,829 --> 01:21:24,460
were using an origin that's like similar

1566
01:21:23,199 --> 01:21:28,750
to something that would be used in the

1567
01:21:24,460 --> 01:21:31,029
game zero zero zero isn't ridiculous so

1568
01:21:28,750 --> 01:21:33,069
maybe that is just what we'll use but

1569
01:21:31,029 --> 01:21:35,739
Ray Direction needs to actually be set

1570
01:21:33,069 --> 01:21:37,869
so we'll say that Ray Origin still that

1571
01:21:35,739 --> 01:21:42,670
will then say all right let's make a

1572
01:21:37,869 --> 01:21:44,619
four I loop here around the Ray casting

1573
01:21:42,670 --> 01:21:46,060
where we're gonna do it like over and

1574
01:21:44,619 --> 01:21:49,869
over and over and over and over and over

1575
01:21:46,060 --> 01:21:51,220
right so we'll say like der sample index

1576
01:21:49,869 --> 01:21:53,890
equals zero

1577
01:21:51,220 --> 01:21:56,890
Duras antal index is less than you know

1578
01:21:53,890 --> 01:21:58,690
some really large number of of things

1579
01:21:56,890 --> 01:22:00,579
we're doing here so we're gonna rake a

1580
01:21:58,689 --> 01:22:02,460
stand ray cast and ray Kasten ray cast

1581
01:22:00,579 --> 01:22:05,470
and then we're gonna ray cast some more

1582
01:22:02,460 --> 01:22:08,699
we'll go ahead and say oops I said this

1583
01:22:05,470 --> 01:22:08,699
just be empty index sorry

1584
01:22:10,719 --> 01:22:13,719
we'll then figure out which sampling

1585
01:22:12,039 --> 01:22:16,539
sphere we're trying to actually sample

1586
01:22:13,719 --> 01:22:19,448
here as you can see and then we'll pull

1587
01:22:16,539 --> 01:22:25,359
out you know the Ray bundle index off of

1588
01:22:19,448 --> 01:22:26,529
off of that right now the Ray bundle

1589
01:22:25,359 --> 01:22:28,089
index I don't know where that actually

1590
01:22:26,529 --> 01:22:30,158
gets set it looks like so that's a

1591
01:22:28,090 --> 01:22:32,050
separate loop inside of here that loops

1592
01:22:30,158 --> 01:22:35,079
over the total number of Ray bundles

1593
01:22:32,050 --> 01:22:37,630
that there actually are and so we should

1594
01:22:35,079 --> 01:22:39,760
probably mimic that behavior right to a

1595
01:22:37,630 --> 01:22:42,819
certain extent so we should probably say

1596
01:22:39,760 --> 01:22:50,829
that we do it like this and the Ray

1597
01:22:42,819 --> 01:22:56,590
bundle like that like index thing will

1598
01:22:50,829 --> 01:22:57,670
just go over every single one because

1599
01:22:56,590 --> 01:23:00,789
that's sort of what would be happening

1600
01:22:57,670 --> 01:23:02,679
in the actual app so we then pull out

1601
01:23:00,789 --> 01:23:04,630
the sampling sphere for whatever a

1602
01:23:02,679 --> 01:23:06,010
directional sample we're looking at and

1603
01:23:04,630 --> 01:23:08,880
I guess we could do that here and then

1604
01:23:06,010 --> 01:23:17,829
we pull out the Ray bundles for each

1605
01:23:08,880 --> 01:23:21,010
particular bundle yeah that seems

1606
01:23:17,829 --> 01:23:23,649
reasonable and so now if I run it it

1607
01:23:21,010 --> 01:23:26,500
should sit there for a while do a bunch

1608
01:23:23,649 --> 01:23:28,269
of ray casts and exit and we're probably

1609
01:23:26,500 --> 01:23:30,039
gonna have to like lean on it really

1610
01:23:28,270 --> 01:23:32,980
hard to make sure that it just does a

1611
01:23:30,039 --> 01:23:34,899
crap ton of ray cast like rate castrate

1612
01:23:32,979 --> 01:23:36,099
castrate castrate castrate cast and the

1613
01:23:34,899 --> 01:23:37,960
reason for that if we want to analyze

1614
01:23:36,100 --> 01:23:39,760
the profile of this and we want to look

1615
01:23:37,960 --> 01:23:41,050
at how expensive it is to do these ray

1616
01:23:39,760 --> 01:23:43,440
casts we're gonna want to look at a

1617
01:23:41,050 --> 01:23:46,329
representative slice in the middle and

1618
01:23:43,439 --> 01:23:52,809
as you'll see it when I go to use vtune

1619
01:23:46,329 --> 01:23:55,988
the sort of bloated bilious vtune i'm

1620
01:23:52,810 --> 01:23:59,230
gonna need a way of not having it time

1621
01:23:55,988 --> 01:24:01,178
or a bunch of random crap and so a bunch

1622
01:23:59,229 --> 01:24:02,678
of that random crap is stuff like how

1623
01:24:01,179 --> 01:24:05,469
long did it take you to load the file

1624
01:24:02,679 --> 01:24:07,658
right like the dump file you know I

1625
01:24:05,469 --> 01:24:08,980
don't want it to count any of that stuff

1626
01:24:07,658 --> 01:24:10,359
because if you're getting a bunch of

1627
01:24:08,979 --> 01:24:12,009
cache misses and when you go into the

1628
01:24:10,359 --> 01:24:13,988
kernel load a file well that's not gonna

1629
01:24:12,010 --> 01:24:16,150
give me any information so what I want

1630
01:24:13,988 --> 01:24:17,769
to do is I want to make sure the program

1631
01:24:16,149 --> 01:24:20,170
that I run and there's different is you

1632
01:24:17,770 --> 01:24:23,230
can you can actually like include a DLL

1633
01:24:20,170 --> 01:24:24,940
and in in your building where

1634
01:24:23,229 --> 01:24:27,699
and include deals wrong you luteolin

1635
01:24:24,939 --> 01:24:29,379
tell use you know do a get proc address

1636
01:24:27,699 --> 01:24:31,869
to vtune to say here's where to start

1637
01:24:29,380 --> 01:24:33,430
pro flying here's have to stop but a

1638
01:24:31,869 --> 01:24:35,738
much easier way to do it that doesn't

1639
01:24:33,430 --> 01:24:38,440
involve any like you know poison the

1640
01:24:35,738 --> 01:24:41,289
code in that way is to just actually

1641
01:24:38,439 --> 01:24:43,750
make sure your application does a

1642
01:24:41,289 --> 01:24:46,229
crap-ton of the thing and then just tell

1643
01:24:43,750 --> 01:24:49,930
vtune to start profiling ten seconds in

1644
01:24:46,229 --> 01:24:52,029
or five seconds in right because at that

1645
01:24:49,930 --> 01:24:54,010
point you know that all of the cash

1646
01:24:52,029 --> 01:24:55,719
stuff and all of the kernel transitions

1647
01:24:54,010 --> 01:24:57,699
for a like loading filed on all that

1648
01:24:55,720 --> 01:24:59,590
crab already happened right that already

1649
01:24:57,699 --> 01:25:01,510
happened and you don't need to worry

1650
01:24:59,590 --> 01:25:03,909
about it it's not gonna get counted in

1651
01:25:01,510 --> 01:25:05,560
the profile and it's just gonna jump on

1652
01:25:03,909 --> 01:25:06,849
in and start profiling the part that's

1653
01:25:05,560 --> 01:25:09,400
the actual mead the algorithm that we

1654
01:25:06,850 --> 01:25:11,920
care about so that's what i want to

1655
01:25:09,399 --> 01:25:13,359
happen here and so you know this piece

1656
01:25:11,920 --> 01:25:16,270
of code would just would just do that

1657
01:25:13,359 --> 01:25:18,000
right so what i want to do is make sure

1658
01:25:16,270 --> 01:25:20,830
that i have enough of these let's say

1659
01:25:18,000 --> 01:25:23,050
that we're just gonna keep on doing this

1660
01:25:20,829 --> 01:25:26,229
until you know a heat death of the

1661
01:25:23,050 --> 01:25:27,820
universe and all that and so i run it

1662
01:25:26,229 --> 01:25:29,919
and you know it stays up for a good long

1663
01:25:27,819 --> 01:25:31,238
time ray casting and doing its thing you

1664
01:25:29,920 --> 01:25:33,039
know ray casting red cast and red

1665
01:25:31,238 --> 01:25:36,689
casting ray casting and then eventually

1666
01:25:33,039 --> 01:25:44,460
it will actually exit that's maybe too

1667
01:25:36,689 --> 01:25:44,460
much let's back off a little

1668
01:25:54,210 --> 01:25:57,920
still maybe longer than I need

1669
01:26:12,260 --> 01:26:15,860
seems pretty good although I might even

1670
01:26:14,090 --> 01:26:17,539
drop it down a little bit more so I

1671
01:26:15,859 --> 01:26:27,259
didn't really need to spam it much it

1672
01:26:17,539 --> 01:26:30,170
was pretty good alright so now we have a

1673
01:26:27,260 --> 01:26:32,600
single threaded standalone app if we so

1674
01:26:30,170 --> 01:26:36,140
if we literally just want to look at

1675
01:26:32,600 --> 01:26:38,420
sort of the fake theoretical behavior of

1676
01:26:36,140 --> 01:26:41,180
our routine we now can do that because

1677
01:26:38,420 --> 01:26:42,920
we have an isolated fake case that shows

1678
01:26:41,180 --> 01:26:44,900
us theoretically what's going on now

1679
01:26:42,920 --> 01:26:46,430
it's not an exact replica and we don't

1680
01:26:44,899 --> 01:26:47,929
actually want it to be because the exact

1681
01:26:46,430 --> 01:26:50,119
replica is the thing that runs in the

1682
01:26:47,930 --> 01:26:52,159
game what we're wanting to do now is

1683
01:26:50,119 --> 01:26:53,869
take away some of that variability and

1684
01:26:52,159 --> 01:26:55,279
just look at like theoretically if we're

1685
01:26:53,869 --> 01:26:57,140
just trying to push this crap through

1686
01:26:55,279 --> 01:26:58,819
the processor the way that we were on a

1687
01:26:57,140 --> 01:27:01,160
single thread so we don't have multiple

1688
01:26:58,819 --> 01:27:02,899
threads contending not to hyper threads

1689
01:27:01,159 --> 01:27:04,309
none of those things can you just tell

1690
01:27:02,899 --> 01:27:06,710
us sort of what's going on in our code

1691
01:27:04,310 --> 01:27:09,910
so we can start to tweak it and just see

1692
01:27:06,710 --> 01:27:12,619
what the what the result is behaviorally

1693
01:27:09,909 --> 01:27:16,010
that's what we're trying to do here and

1694
01:27:12,619 --> 01:27:18,109
you'll have to forgive me for my I am

1695
01:27:16,010 --> 01:27:20,690
not good at vtune I normally just use a

1696
01:27:18,109 --> 01:27:25,429
Linux machine and run perf which I find

1697
01:27:20,689 --> 01:27:26,869
much easier to use the the vtune kind of

1698
01:27:25,430 --> 01:27:29,450
weirds me out and it's got all this

1699
01:27:26,869 --> 01:27:31,069
weird like like trappings that just I

1700
01:27:29,449 --> 01:27:33,679
don't know it's I don't understand why

1701
01:27:31,069 --> 01:27:35,389
it has to be so complicated I just want

1702
01:27:33,680 --> 01:27:38,480
like Intel out there if you're listening

1703
01:27:35,390 --> 01:27:40,039
you're not but let's say you were I just

1704
01:27:38,479 --> 01:27:43,189
want something where I can just like do

1705
01:27:40,039 --> 01:27:46,250
this in my coat I don't want any of this

1706
01:27:43,189 --> 01:27:50,389
like I wish I could just I don't know it

1707
01:27:46,250 --> 01:27:52,340
doesn't matter point being inside vtune

1708
01:27:50,390 --> 01:27:54,200
this is what it looks like I they made

1709
01:27:52,340 --> 01:27:55,579
it free and thank you in television that

1710
01:27:54,199 --> 01:27:58,429
used to charge exorbitant amount of

1711
01:27:55,579 --> 01:28:02,239
money for vtune so nobody used it but

1712
01:27:58,430 --> 01:28:03,619
they eventually made it free for like if

1713
01:28:02,239 --> 01:28:04,969
you don't like there's some part of it

1714
01:28:03,619 --> 01:28:06,619
that you don't get I don't even know it

1715
01:28:04,970 --> 01:28:09,619
doesn't matter the point is it's free

1716
01:28:06,619 --> 01:28:10,909
now and you can just install it on your

1717
01:28:09,619 --> 01:28:13,519
machine you just make an account you can

1718
01:28:10,909 --> 01:28:16,789
install it and that's good and so if you

1719
01:28:13,520 --> 01:28:19,930
want to I can create like like I'm doing

1720
01:28:16,789 --> 01:28:23,359
here a new project I could create a

1721
01:28:19,930 --> 01:28:24,560
vtune project that I can store and I'll

1722
01:28:23,359 --> 01:28:25,729
do it in this work temp directory

1723
01:28:24,560 --> 01:28:27,110
because I don't know

1724
01:28:25,729 --> 01:28:28,729
if I don't really want to pollute all my

1725
01:28:27,109 --> 01:28:31,699
stuff but will basically say like

1726
01:28:28,729 --> 01:28:32,589
alright let's call this like ehh light

1727
01:28:31,699 --> 01:28:37,519
Propst

1728
01:28:32,590 --> 01:28:39,590
HH light prof create project and what I

1729
01:28:37,520 --> 01:28:42,560
should be able to do now is you know

1730
01:28:39,590 --> 01:28:44,960
just tell it I want you to take a look

1731
01:28:42,560 --> 01:28:46,400
at this application and start to tell me

1732
01:28:44,960 --> 01:28:48,319
stuff about it that are based on

1733
01:28:46,399 --> 01:28:51,710
profiling counters that are in the cpu

1734
01:28:48,319 --> 01:28:53,029
right so normally I just want to access

1735
01:28:51,710 --> 01:28:54,800
that stuff and you see me do that in

1736
01:28:53,029 --> 01:28:55,819
handy here before our entire ProFlowers

1737
01:28:54,800 --> 01:28:57,770
built on the fact that we could just

1738
01:28:55,819 --> 01:29:00,289
call our TTS C which is read time stamp

1739
01:28:57,770 --> 01:29:01,730
counter which basically says get me this

1740
01:29:00,289 --> 01:29:04,039
particular performance counter that's

1741
01:29:01,729 --> 01:29:06,769
inside the Intel CPU that just basically

1742
01:29:04,039 --> 01:29:10,100
tells me how many roughly clock ticks

1743
01:29:06,770 --> 01:29:14,750
went by at any particular time great

1744
01:29:10,100 --> 01:29:17,120
there's a whole other set of performance

1745
01:29:14,750 --> 01:29:20,569
profiling counters in there and when I

1746
01:29:17,119 --> 01:29:23,300
say there's a whole other set I mean

1747
01:29:20,569 --> 01:29:26,149
like you have no idea if you've never

1748
01:29:23,300 --> 01:29:27,710
done this kind of profiling before so

1749
01:29:26,149 --> 01:29:30,799
you've never looked at the perf counters

1750
01:29:27,710 --> 01:29:34,039
on a modern axis or a processor you are

1751
01:29:30,800 --> 01:29:38,779
in for a treet slash headache because oh

1752
01:29:34,039 --> 01:29:42,050
my god you have no idea how many things

1753
01:29:38,779 --> 01:29:44,238
you can profile in a modern X's for CPU

1754
01:29:42,050 --> 01:29:46,159
there are so many that I'm willing to

1755
01:29:44,238 --> 01:29:47,659
bet that there's almost nobody on planet

1756
01:29:46,159 --> 01:29:50,479
Earth who actually knows what they all

1757
01:29:47,659 --> 01:29:53,869
are it's gonna say that there's probably

1758
01:29:50,479 --> 01:29:55,849
very few people I've actually done

1759
01:29:53,869 --> 01:29:59,539
passes where I profile every perf

1760
01:29:55,850 --> 01:30:02,960
counter that I know of it's like in the

1761
01:29:59,539 --> 01:30:06,369
hundreds and I only know what some of

1762
01:30:02,960 --> 01:30:10,399
them actually measure like there are

1763
01:30:06,369 --> 01:30:11,029
probably I don't remember how many there

1764
01:30:10,399 --> 01:30:12,738
are

1765
01:30:11,029 --> 01:30:14,539
I actually did know exactly how many

1766
01:30:12,738 --> 01:30:19,099
there were that I that I could find

1767
01:30:14,539 --> 01:30:21,829
documentation for I want to say that out

1768
01:30:19,100 --> 01:30:23,570
of those there were probably 10 maybe 20

1769
01:30:21,829 --> 01:30:26,210
that I literally just have no idea what

1770
01:30:23,569 --> 01:30:27,920
they actually count I just don't know

1771
01:30:26,210 --> 01:30:30,289
a lot of them you can tell by reading

1772
01:30:27,920 --> 01:30:33,920
it's like oh this counts any time like

1773
01:30:30,289 --> 01:30:37,550
you know the CPU missed the l2 cache and

1774
01:30:33,920 --> 01:30:39,140
this happened or whatever right but some

1775
01:30:37,550 --> 01:30:42,980
of them I'd like read and

1776
01:30:39,140 --> 01:30:45,079
I don't even know what this counts there

1777
01:30:42,979 --> 01:30:48,379
are so many of them so anyway with that

1778
01:30:45,079 --> 01:30:51,109
out of the way we're just gonna be doing

1779
01:30:48,380 --> 01:30:53,869
some basic work with this we're not

1780
01:30:51,109 --> 01:30:55,670
going to try to do anything that fancy

1781
01:30:53,869 --> 01:30:58,609
at all so we're gonna go to HH light

1782
01:30:55,670 --> 01:31:03,649
prof here we're going to pass in that

1783
01:30:58,609 --> 01:31:05,779
light dump or sorry I just want exactly

1784
01:31:03,649 --> 01:31:07,789
this right I want to run exactly what

1785
01:31:05,779 --> 01:31:11,000
we're running so I want to run that and

1786
01:31:07,789 --> 01:31:12,890
I want the working directory to be the

1787
01:31:11,000 --> 01:31:17,000
same working directory so we know that

1788
01:31:12,890 --> 01:31:19,490
it will work right we don't need to set

1789
01:31:17,000 --> 01:31:21,890
anything else up in here because nothing

1790
01:31:19,489 --> 01:31:25,159
particular is happening the only thing

1791
01:31:21,890 --> 01:31:32,829
we need is this bit here that I was

1792
01:31:25,159 --> 01:31:36,550
saying we want to that's not it

1793
01:31:32,829 --> 01:31:36,550
where is it

1794
01:31:43,699 --> 01:31:48,649
here it is here it is okay sorry I'll

1795
01:31:46,310 --> 01:31:50,690
automatically resume collection after

1796
01:31:48,649 --> 01:31:52,789
sec and automatically stop collection

1797
01:31:50,689 --> 01:31:56,239
after sec that's what we want to

1798
01:31:52,789 --> 01:31:59,090
actually look at here so what I want to

1799
01:31:56,239 --> 01:32:03,649
be able to do is say all right I want

1800
01:31:59,090 --> 01:32:06,260
you to I want you to basically start the

1801
01:32:03,649 --> 01:32:08,599
app and for like two or three seconds

1802
01:32:06,260 --> 01:32:10,369
let's say maybe five seconds or

1803
01:32:08,600 --> 01:32:13,070
something like that right

1804
01:32:10,369 --> 01:32:16,309
don't take any profiling so I think

1805
01:32:13,069 --> 01:32:17,359
that's all I probably have to do I like

1806
01:32:16,310 --> 01:32:18,440
I said I haven't used this in a while

1807
01:32:17,359 --> 01:32:25,299
and it's hard for me to remember

1808
01:32:18,439 --> 01:32:25,299
sometimes exactly what I have to do I

1809
01:32:27,189 --> 01:32:33,049
think that should do it right so anyway

1810
01:32:30,949 --> 01:32:35,239
that's what we need here to have a way

1811
01:32:33,050 --> 01:32:37,460
to launch the application and then what

1812
01:32:35,239 --> 01:32:39,229
we want to do up here is you can see

1813
01:32:37,460 --> 01:32:40,520
like I want Hardware of a event based

1814
01:32:39,229 --> 01:32:45,439
sampling that's just saying it's gonna

1815
01:32:40,520 --> 01:32:48,940
take a look at what's going on in the in

1816
01:32:45,439 --> 01:32:53,119
the hardware to count the the counters

1817
01:32:48,939 --> 01:32:55,960
that I asked it for right and I don't

1818
01:32:53,119 --> 01:32:55,960
remember

1819
01:33:05,489 --> 01:33:09,779
analysis type ok wait the duration time

1820
01:33:08,159 --> 01:33:11,609
estimate option is deprecated use the

1821
01:33:09,779 --> 01:33:15,300
CPU sampling interval option on the

1822
01:33:11,609 --> 01:33:24,589
analysis type configuration pane okay so

1823
01:33:15,300 --> 01:33:24,590
you're telling me don't set this wait I

1824
01:33:26,000 --> 01:33:31,670
don't understand I can't not set this

1825
01:33:32,720 --> 01:33:41,550
okay I don't know what to make of that

1826
01:33:36,869 --> 01:33:42,779
but okay so in analysis type which I

1827
01:33:41,550 --> 01:33:45,750
think is in here yeah okay

1828
01:33:42,779 --> 01:33:46,800
so what we want to do here you know and

1829
01:33:45,750 --> 01:33:48,869
and there's a couple different things we

1830
01:33:46,800 --> 01:33:51,989
can do obviously we can start checking

1831
01:33:48,869 --> 01:33:54,090
the hotspots just to see what it thinks

1832
01:33:51,989 --> 01:33:56,219
are the performance bottlenecks which is

1833
01:33:54,090 --> 01:33:57,510
also good but microarchitecture

1834
01:33:56,220 --> 01:33:58,710
explanation is what I want apply do

1835
01:33:57,510 --> 01:34:00,300
eventually and that's just the thing

1836
01:33:58,710 --> 01:34:03,020
that lets me look at the actual code and

1837
01:34:00,300 --> 01:34:06,659
see what we think is going on there

1838
01:34:03,020 --> 01:34:08,910
let's just see what happens here I like

1839
01:34:06,659 --> 01:34:11,039
I said I'm really bad at using vtune so

1840
01:34:08,909 --> 01:34:14,329
we'll see I'm gonna go ahead and start

1841
01:34:11,039 --> 01:34:17,010
it let's see if it works it should

1842
01:34:14,329 --> 01:34:22,199
unpause the collection automatically it

1843
01:34:17,010 --> 01:34:25,920
does and there we go right so hopefully

1844
01:34:22,199 --> 01:34:30,750
now I will get some actual information

1845
01:34:25,920 --> 01:34:35,090
here what you can see in terms of what

1846
01:34:30,750 --> 01:34:45,420
it's telling me about what it saw the

1847
01:34:35,090 --> 01:34:46,529
the I don't think we've ever talked

1848
01:34:45,420 --> 01:34:50,840
about a lot of this stuff on Hanneman

1849
01:34:46,529 --> 01:34:50,840
here so I'm not sure where to start

1850
01:34:51,800 --> 01:34:56,550
there's a couple different things that

1851
01:34:54,510 --> 01:34:59,220
we now need to start looking at to start

1852
01:34:56,550 --> 01:35:05,100
to make this code run high-performance

1853
01:34:59,220 --> 01:35:08,340
right so there's two separate things one

1854
01:35:05,100 --> 01:35:11,940
thing is making sure that the code

1855
01:35:08,340 --> 01:35:16,020
itself is doing the smartest set of

1856
01:35:11,939 --> 01:35:19,198
operations that it can do right this

1857
01:35:16,020 --> 01:35:22,199
tool will not tell us anything about

1858
01:35:19,198 --> 01:35:23,488
that so the thing that I was talking

1859
01:35:22,198 --> 01:35:26,609
about before that we're gonna want to

1860
01:35:23,488 --> 01:35:29,368
look at possibly even first and so I

1861
01:35:26,609 --> 01:35:30,868
just wanted to get a run of it with the

1862
01:35:29,368 --> 01:35:31,920
existing codes why we're looking at this

1863
01:35:30,868 --> 01:35:36,420
I don't necessarily need this

1864
01:35:31,920 --> 01:35:37,889
information right away but so we have to

1865
01:35:36,420 --> 01:35:40,319
go think about whether we're actually

1866
01:35:37,889 --> 01:35:41,969
doing the ops we should be doing in the

1867
01:35:40,319 --> 01:35:43,738
first place and stuff like that

1868
01:35:41,969 --> 01:35:48,389
this tool can't tell us anything about

1869
01:35:43,738 --> 01:35:50,698
that right the second part is saying for

1870
01:35:48,389 --> 01:35:52,260
the ops that we're actually doing right

1871
01:35:50,698 --> 01:35:55,529
like when we actually decide we need to

1872
01:35:52,260 --> 01:35:57,780
do this stuff how close have we gotten

1873
01:35:55,529 --> 01:36:02,130
to actually utilizing the chip with

1874
01:35:57,779 --> 01:36:03,478
those ops right and sometimes we may be

1875
01:36:02,130 --> 01:36:05,248
in a situation where like there's really

1876
01:36:03,479 --> 01:36:06,869
not much we can do so we look at the

1877
01:36:05,248 --> 01:36:08,458
code and we're like well we have to do

1878
01:36:06,868 --> 01:36:09,958
this stuff there's no way we can really

1879
01:36:08,458 --> 01:36:11,698
utilize a chip very well with this stuff

1880
01:36:09,958 --> 01:36:15,118
so that we're just we're out of luck

1881
01:36:11,698 --> 01:36:19,138
right but other times we can look and go

1882
01:36:15,118 --> 01:36:22,198
oh ok I see using it too like this we

1883
01:36:19,139 --> 01:36:25,800
can say I see why we're underutilizing

1884
01:36:22,198 --> 01:36:32,308
the CPU and there's ways we can fix that

1885
01:36:25,800 --> 01:36:33,420
right so you know looking at this you

1886
01:36:32,309 --> 01:36:35,788
can maybe starters make some

1887
01:36:33,420 --> 01:36:37,229
translations it doesn't matter right now

1888
01:36:35,788 --> 01:36:40,408
because we're not even in a release mode

1889
01:36:37,229 --> 01:36:42,570
built right so this you know we don't

1890
01:36:40,408 --> 01:36:45,058
really care about right so let's start

1891
01:36:42,569 --> 01:36:50,099
by just saying all right let's run a

1892
01:36:45,059 --> 01:36:53,670
build I think I can just I think I can

1893
01:36:50,099 --> 01:37:00,179
just run a builds right let's just run a

1894
01:36:53,670 --> 01:37:01,498
build that's with optimizations on so

1895
01:37:00,179 --> 01:37:05,639
this should be some reasonable code in

1896
01:37:01,498 --> 01:37:06,899
theory let's see what the hospitai asks

1897
01:37:05,639 --> 01:37:10,019
this looks like just to make sure we're

1898
01:37:06,899 --> 01:37:11,670
actually getting that although actually

1899
01:37:10,019 --> 01:37:13,530
Oh

1900
01:37:11,670 --> 01:37:17,190
so the problem is that's now running so

1901
01:37:13,529 --> 01:37:21,268
fast we're gonna have to add more delay

1902
01:37:17,189 --> 01:37:24,859
to it so let me go ahead and and and

1903
01:37:21,269 --> 01:37:24,860
just up that

1904
01:37:30,158 --> 01:37:35,269
that's that's still not long enough all

1905
01:37:33,619 --> 01:37:37,309
right so my estimate before was actually

1906
01:37:35,270 --> 01:37:48,770
accurate it's just I forgot we were in a

1907
01:37:37,310 --> 01:37:50,570
debug build so that's better so now I'm

1908
01:37:48,770 --> 01:37:53,060
gonna go ahead and say alright let's go

1909
01:37:50,569 --> 01:37:56,359
ahead and rerun this I think I can just

1910
01:37:53,060 --> 01:37:58,539
do this again in the the porgy of

1911
01:37:56,359 --> 01:38:07,399
windows in here I did I don't even know

1912
01:37:58,539 --> 01:38:13,789
but anyway there's the yeah there's the

1913
01:38:07,399 --> 01:38:16,609
sort of information that we got this is

1914
01:38:13,789 --> 01:38:19,039
not a diagram we can use because this is

1915
01:38:16,609 --> 01:38:20,988
talking about multi-threading if we want

1916
01:38:19,039 --> 01:38:22,698
to go profile the work completion and we

1917
01:38:20,988 --> 01:38:24,229
start multiple threads or something then

1918
01:38:22,698 --> 01:38:25,698
we can start looking at this but this

1919
01:38:24,229 --> 01:38:28,849
doesn't really tell us anything because

1920
01:38:25,698 --> 01:38:29,928
this is just looking at core utilization

1921
01:38:28,850 --> 01:38:32,000
and we know we're only looking at the

1922
01:38:29,929 --> 01:38:33,859
single thread right now so this is

1923
01:38:32,000 --> 01:38:36,800
actually the number that we care about

1924
01:38:33,859 --> 01:38:40,189
right here right the micro architectural

1925
01:38:36,800 --> 01:38:42,409
usage and if we look at that we can kind

1926
01:38:40,189 --> 01:38:45,198
of see that the disk pretty it's

1927
01:38:42,408 --> 01:38:48,138
actually pretty high 80 percent of

1928
01:38:45,198 --> 01:38:52,969
pipeline slots filled is is not terrible

1929
01:38:48,139 --> 01:38:55,359
right so you know I it looks like the

1930
01:38:52,969 --> 01:39:00,469
code itself right at this point is not

1931
01:38:55,359 --> 01:39:03,289
super bad I forget how you get all this

1932
01:39:00,469 --> 01:39:05,679
stuff you actually want here so you know

1933
01:39:03,289 --> 01:39:09,519
if we look at what the code looks like

1934
01:39:05,679 --> 01:39:09,520
let me see if I can

1935
01:39:20,489 --> 01:39:36,859
I'm not sure I thought you could see no

1936
01:39:29,939 --> 01:39:36,859
I thought you could see more than that

1937
01:39:38,029 --> 01:39:51,960
maybe it's this no there we are

1938
01:39:46,100 --> 01:39:55,140
um yeah okay so you know if we take a

1939
01:39:51,960 --> 01:39:58,380
look at the code in terms of hotspot

1940
01:39:55,140 --> 01:40:02,910
analysis so this is kind of it's it's

1941
01:39:58,380 --> 01:40:04,739
not really very good necessarily so you

1942
01:40:02,909 --> 01:40:08,220
you don't want to put like too much

1943
01:40:04,739 --> 01:40:11,309
faith in it but if you take a look at

1944
01:40:08,220 --> 01:40:14,940
the raycast routine you know this on the

1945
01:40:11,310 --> 01:40:18,000
side the cpu time like list here on the

1946
01:40:14,939 --> 01:40:20,909
side is sort of maybe kind of a little

1947
01:40:18,000 --> 01:40:24,569
bit possibly sometimes trying to tell

1948
01:40:20,909 --> 01:40:27,869
you like where you are seeing like more

1949
01:40:24,569 --> 01:40:30,059
you know more or less time spent in the

1950
01:40:27,869 --> 01:40:31,949
system and you can see it's sort of

1951
01:40:30,060 --> 01:40:34,140
correlates like they look there's a lot

1952
01:40:31,949 --> 01:40:36,179
of total time was estimated was spent

1953
01:40:34,140 --> 01:40:40,829
you know through this you know branch

1954
01:40:36,180 --> 01:40:42,420
here which makes sense I I don't know if

1955
01:40:40,829 --> 01:40:44,069
this maybe compiled in a weird way cuz

1956
01:40:42,420 --> 01:40:45,480
the fact that this isn't shown it all

1957
01:40:44,069 --> 01:40:47,429
doesn't really make any sense

1958
01:40:45,479 --> 01:40:50,579
but I'm assuming it's because this got

1959
01:40:47,430 --> 01:40:52,530
collapsed down in some way or something

1960
01:40:50,579 --> 01:40:56,309
I don't really know what the cloud did

1961
01:40:52,529 --> 01:40:59,670
we have it looked but again you can kind

1962
01:40:56,310 --> 01:41:02,789
of see like yeah in this code is super

1963
01:40:59,670 --> 01:41:04,890
crappy which we kind of expect this is

1964
01:41:02,789 --> 01:41:07,409
you know makes very good sense when

1965
01:41:04,890 --> 01:41:10,200
array misses it's doing this kind of

1966
01:41:07,409 --> 01:41:12,329
assignment to a you know v3 it's not

1967
01:41:10,199 --> 01:41:15,179
particularly smart about it's doing it

1968
01:41:12,329 --> 01:41:16,739
scaler not in the ssee

1969
01:41:15,180 --> 01:41:19,010
and blah blah blah blah blah right so we

1970
01:41:16,739 --> 01:41:23,279
you know that makes sense to see that

1971
01:41:19,010 --> 01:41:24,989
and so on I don't know I tend to not put

1972
01:41:23,279 --> 01:41:28,309
a lot of faith in this because sampling

1973
01:41:24,989 --> 01:41:28,309
based profiles I don't really know

1974
01:41:29,189 --> 01:41:32,849
I don't know that I really trust them so

1975
01:41:31,050 --> 01:41:35,219
I tend to not use this view but I just

1976
01:41:32,850 --> 01:41:37,920
wanted to show it to you so what we

1977
01:41:35,219 --> 01:41:39,270
actually care about here and what we'll

1978
01:41:37,920 --> 01:41:40,560
probably be using it for we're at the

1979
01:41:39,270 --> 01:41:41,969
end of the stream for today but you know

1980
01:41:40,560 --> 01:41:46,380
tomorrow when we start actually working

1981
01:41:41,969 --> 01:41:48,210
on optimization what I actually want to

1982
01:41:46,380 --> 01:41:51,390
do is go to the micro architecture

1983
01:41:48,210 --> 01:41:52,948
analysis so in here what we can do is

1984
01:41:51,390 --> 01:41:54,510
say all right hotspots we don't really

1985
01:41:52,948 --> 01:41:56,309
care about that I don't trust you anyway

1986
01:41:54,510 --> 01:41:57,890
we know it's just that one routine or

1987
01:41:56,310 --> 01:42:01,920
optimizing it's not a big deal we're not

1988
01:41:57,890 --> 01:42:03,719
asking you to tell us you know find the

1989
01:42:01,920 --> 01:42:06,090
trees in the forest kind of a situation

1990
01:42:03,719 --> 01:42:07,800
or the needle in the haystack this is

1991
01:42:06,090 --> 01:42:09,539
more what we want to do you know memory

1992
01:42:07,800 --> 01:42:13,680
access or microarchitecture exploration

1993
01:42:09,539 --> 01:42:17,550
so in here if I say micro tech micro

1994
01:42:13,680 --> 01:42:19,079
architecture exploration this is where

1995
01:42:17,550 --> 01:42:22,380
those performance counters I was talking

1996
01:42:19,079 --> 01:42:24,988
about come into play this can tell us

1997
01:42:22,380 --> 01:42:26,760
stuff like how long were you waiting on

1998
01:42:24,988 --> 01:42:28,409
instruction decode how long were you

1999
01:42:26,760 --> 01:42:30,180
waiting for a cache to come back filled

2000
01:42:28,409 --> 01:42:32,369
you know how many times did you stall on

2001
01:42:30,180 --> 01:42:34,980
that how many times did you go to try an

2002
01:42:32,369 --> 01:42:36,448
issue a you know an ad and there was

2003
01:42:34,979 --> 01:42:38,429
nowhere to put the ad so you have to

2004
01:42:36,448 --> 01:42:41,849
just wait till a nail you finished you

2005
01:42:38,430 --> 01:42:43,860
know these sorts of things right and so

2006
01:42:41,850 --> 01:42:50,340
this is where we can get that

2007
01:42:43,859 --> 01:42:54,149
information from right and I don't

2008
01:42:50,340 --> 01:42:55,319
actually know so these are the actual so

2009
01:42:54,149 --> 01:42:57,539
this is why it's remember I said there's

2010
01:42:55,319 --> 01:43:00,119
a lot of them this is and this isn't

2011
01:42:57,539 --> 01:43:04,369
even all of them here's an example of

2012
01:43:00,119 --> 01:43:09,448
some of the of the things that can count

2013
01:43:04,369 --> 01:43:12,680
right like these are all on the chip it

2014
01:43:09,448 --> 01:43:15,988
can count these things it's insane right

2015
01:43:12,680 --> 01:43:22,320
um so anyway if we run a mark

2016
01:43:15,988 --> 01:43:26,609
microarchitecture exploration and you

2017
01:43:22,319 --> 01:43:29,509
know we go ahead and let this let this

2018
01:43:26,609 --> 01:43:29,509
do it do its thing

2019
01:43:34,168 --> 01:43:47,429
area now what we can see is if we look

2020
01:43:39,238 --> 01:43:49,828
at the the way that the trying to think

2021
01:43:47,429 --> 01:43:52,319
of how to explain this so now if we look

2022
01:43:49,828 --> 01:43:55,259
at the way that the CPU was actually

2023
01:43:52,319 --> 01:43:57,478
chewing through our instructions then at

2024
01:43:55,260 --> 01:44:00,059
least if this summary is to be believed

2025
01:43:57,479 --> 01:44:01,469
which like I said you you have to take

2026
01:44:00,059 --> 01:44:07,820
some of these things with a grain of

2027
01:44:01,469 --> 01:44:12,630
salt what you can see is look here in

2028
01:44:07,819 --> 01:44:16,529
the here in this breakdown

2029
01:44:12,630 --> 01:44:20,760
on the back end you know part of the the

2030
01:44:16,529 --> 01:44:24,268
CPU what you can see is how much use

2031
01:44:20,760 --> 01:44:28,409
were we getting out of our al use okay

2032
01:44:24,269 --> 01:44:33,840
and what you can see here is that one

2033
01:44:28,408 --> 01:44:35,248
the the ALUs are based off of ports the

2034
01:44:33,840 --> 01:44:36,119
way that the Intel architecture works

2035
01:44:35,248 --> 01:44:39,269
we've talked about some Hamming here

2036
01:44:36,118 --> 01:44:44,698
before there's port 0 port 1.2.3.4 port

2037
01:44:39,269 --> 01:44:46,979
5 6 &amp; 7 are not as much what we were

2038
01:44:44,698 --> 01:44:48,478
looking at here but there's a set of

2039
01:44:46,979 --> 01:44:49,409
ports right and you can see them listed

2040
01:44:48,479 --> 01:44:52,139
here

2041
01:44:49,408 --> 01:44:53,668
each of these ports corresponds to a

2042
01:44:52,139 --> 01:44:56,880
certain set of instructions it can

2043
01:44:53,668 --> 01:45:00,029
execute each instruction can be executed

2044
01:44:56,880 --> 01:45:02,248
on only specific ports to support that

2045
01:45:00,029 --> 01:45:04,168
instruction so when we're looking at the

2046
01:45:02,248 --> 01:45:06,599
performance of the CPU we have these

2047
01:45:04,168 --> 01:45:09,958
instructions they're going through the

2048
01:45:06,599 --> 01:45:11,369
front end right which is taking the

2049
01:45:09,958 --> 01:45:13,078
instructions that we give it decoding

2050
01:45:11,368 --> 01:45:14,668
them into specific things can be exiting

2051
01:45:13,078 --> 01:45:17,099
the port's handing them after the ports

2052
01:45:14,668 --> 01:45:19,380
and our goal to make sure that a piece

2053
01:45:17,099 --> 01:45:21,239
of code runs as fast as possible if

2054
01:45:19,380 --> 01:45:23,668
we're not going to change the sort of

2055
01:45:21,238 --> 01:45:26,819
actual algorithm that uses is to make

2056
01:45:23,668 --> 01:45:29,219
sure that we try to utilize as many

2057
01:45:26,819 --> 01:45:33,929
ports as possible as often as possible

2058
01:45:29,219 --> 01:45:41,760
right now a modern x64 chip can decode

2059
01:45:33,929 --> 01:45:43,949
four instructions per cycle that's it so

2060
01:45:41,760 --> 01:45:46,559
on any individual cycle there is

2061
01:45:43,948 --> 01:45:47,759
literally no way you're ever going to

2062
01:45:46,559 --> 01:45:50,400
execute more than

2063
01:45:47,760 --> 01:45:53,460
for micro tech micro architectural

2064
01:45:50,399 --> 01:45:55,579
actual true operations now some

2065
01:45:53,460 --> 01:45:58,079
operations aren't actually operations

2066
01:45:55,579 --> 01:46:00,689
something like a move from one register

2067
01:45:58,079 --> 01:46:02,220
to another isn't an actual operation so

2068
01:46:00,689 --> 01:46:04,199
we're talking about things like port

2069
01:46:02,220 --> 01:46:06,180
utilization there's some things that

2070
01:46:04,199 --> 01:46:08,039
happen up here in the front end that's

2071
01:46:06,180 --> 01:46:10,560
the thing that decodes the instructions

2072
01:46:08,039 --> 01:46:13,859
remaps things around that sort of stuff

2073
01:46:10,560 --> 01:46:16,260
right so we don't really care about that

2074
01:46:13,859 --> 01:46:20,309
what we care about is this at the moment

2075
01:46:16,260 --> 01:46:22,800
and that's adding things you know

2076
01:46:20,310 --> 01:46:25,080
multiplies that stuff that's what's

2077
01:46:22,800 --> 01:46:26,730
happening shifts all that stuff that's

2078
01:46:25,079 --> 01:46:31,380
what's happening on these ports we want

2079
01:46:26,729 --> 01:46:34,559
to see every cycle several of these

2080
01:46:31,380 --> 01:46:36,210
ports used right we wanna we wanna hope

2081
01:46:34,560 --> 01:46:39,240
that when we look at this thing

2082
01:46:36,210 --> 01:46:41,489
lots of ports are being used every cycle

2083
01:46:39,239 --> 01:46:44,519
because if no ports are being used on

2084
01:46:41,489 --> 01:46:46,979
lots of cycles right this number right

2085
01:46:44,520 --> 01:46:49,140
here that's terrible that happens when

2086
01:46:46,979 --> 01:46:50,129
you stall on memory or something else so

2087
01:46:49,140 --> 01:46:52,289
you're literally just sitting around

2088
01:46:50,130 --> 01:46:55,109
doing nothing if you only have like one

2089
01:46:52,289 --> 01:46:57,329
or two ports used oftentimes like just

2090
01:46:55,109 --> 01:47:00,089
one I'm sorry one thing if you have like

2091
01:46:57,329 --> 01:47:02,909
one port user to port used that means

2092
01:47:00,090 --> 01:47:05,699
well you're doing work but that work is

2093
01:47:02,909 --> 01:47:08,130
like serially dependent so we can't

2094
01:47:05,699 --> 01:47:10,170
issue like an ad here and an ad here and

2095
01:47:08,130 --> 01:47:11,730
have them going at the same time we have

2096
01:47:10,170 --> 01:47:13,829
to wait for like the result of that app

2097
01:47:11,729 --> 01:47:16,019
we're get to another one right when you

2098
01:47:13,829 --> 01:47:19,319
see three or more ports utilize you are

2099
01:47:16,020 --> 01:47:23,490
happy days right because that means that

2100
01:47:19,319 --> 01:47:27,119
you're actually doing a lot of actual

2101
01:47:23,489 --> 01:47:29,779
work right so that's great right when we

2102
01:47:27,119 --> 01:47:35,519
see that that we have like a high number

2103
01:47:29,779 --> 01:47:39,659
of our port utilization percentage

2104
01:47:35,520 --> 01:47:42,150
breakdowns ends up being in the the

2105
01:47:39,659 --> 01:47:43,529
three plus we're happy about that that's

2106
01:47:42,149 --> 01:47:47,609
what we want to see we don't want to see

2107
01:47:43,529 --> 01:47:51,679
a lot down in here right so if we take a

2108
01:47:47,609 --> 01:47:51,679
look in here and we see some

2109
01:48:02,729 --> 01:48:06,939
so if you take a look at hearing me say

2110
01:48:04,779 --> 01:48:09,489
like okay you know a hundred percent of

2111
01:48:06,939 --> 01:48:11,409
the time was spent retiring slots right

2112
01:48:09,489 --> 01:48:13,779
like what is that even trying to say

2113
01:48:11,409 --> 01:48:15,159
right and you can see like each of those

2114
01:48:13,779 --> 01:48:19,359
things like what I just said if you

2115
01:48:15,159 --> 01:48:20,979
hover over this it says something so

2116
01:48:19,359 --> 01:48:24,789
some of those like that may not really

2117
01:48:20,979 --> 01:48:26,349
tell you much you probably need an

2118
01:48:24,789 --> 01:48:29,350
explanation more like mine but some of

2119
01:48:26,350 --> 01:48:32,230
them like this is more explicable right

2120
01:48:29,350 --> 01:48:33,670
like pipeline slots fraction use my

2121
01:48:32,229 --> 01:48:35,559
useful work meaning the issue do you ops

2122
01:48:33,670 --> 01:48:36,670
that eventually got retired ideally all

2123
01:48:35,560 --> 01:48:38,020
pipelines slots would be a tribute to

2124
01:48:36,670 --> 01:48:39,029
the retiring category retiring without

2125
01:48:38,020 --> 01:48:42,550
set right whatever

2126
01:48:39,029 --> 01:48:44,469
so this particular metric here right is

2127
01:48:42,550 --> 01:48:47,949
just letting us know it's basically

2128
01:48:44,470 --> 01:48:51,670
another way of saying we didn't we

2129
01:48:47,949 --> 01:48:53,590
didn't have this problem right because

2130
01:48:51,670 --> 01:48:55,300
basically what happens is when you issue

2131
01:48:53,590 --> 01:48:57,550
all these instructions if you have lots

2132
01:48:55,300 --> 01:49:00,279
of branching that fails or if you have a

2133
01:48:57,550 --> 01:49:01,329
lot of situations where like it thought

2134
01:49:00,279 --> 01:49:03,279
it was gonna do one thing and it

2135
01:49:01,329 --> 01:49:04,809
actually ended up doing another you can

2136
01:49:03,279 --> 01:49:07,119
end up throwing away a lot of work and

2137
01:49:04,810 --> 01:49:10,150
so what you don't want to see is that

2138
01:49:07,119 --> 01:49:12,609
like you your actual retire rate was

2139
01:49:10,149 --> 01:49:14,889
very low right your actual number of

2140
01:49:12,609 --> 01:49:17,349
instructions that you actually then used

2141
01:49:14,890 --> 01:49:19,539
you don't want to see that going down so

2142
01:49:17,350 --> 01:49:20,590
I in this case I guess it's basically

2143
01:49:19,539 --> 01:49:22,569
just telling us like we didn't have a

2144
01:49:20,590 --> 01:49:23,980
lot of misprediction problems or things

2145
01:49:22,569 --> 01:49:27,789
where stuff got thrown away which which

2146
01:49:23,979 --> 01:49:29,169
is good right okay so when we look at

2147
01:49:27,789 --> 01:49:31,060
what's actually going on here the only

2148
01:49:29,170 --> 01:49:36,279
thing that I don't quite understand what

2149
01:49:31,060 --> 01:49:38,530
I'm looking at this is like that doesn't

2150
01:49:36,279 --> 01:49:41,349
add up to the right thing and this is

2151
01:49:38,529 --> 01:49:49,840
why I say I'm bad at vtune so when we

2152
01:49:41,350 --> 01:49:55,030
look at backhand bound right you know

2153
01:49:49,840 --> 01:49:57,909
like you would expect to see something

2154
01:49:55,029 --> 01:50:03,250
that told us we were bottlenecks

2155
01:49:57,909 --> 01:50:05,170
somewhere right so you know in this case

2156
01:50:03,250 --> 01:50:07,600
it's like you're looking at this and I'm

2157
01:50:05,170 --> 01:50:11,010
going well

2158
01:50:07,600 --> 01:50:14,530
you don't think I'm front-end bound and

2159
01:50:11,010 --> 01:50:18,560
you don't think I'm back in bound

2160
01:50:14,529 --> 01:50:22,519
so like what do you think is happening

2161
01:50:18,560 --> 01:50:24,230
and so I'm not sure I understand it

2162
01:50:22,520 --> 01:50:26,330
right and another way to say that is

2163
01:50:24,229 --> 01:50:32,000
like because I'm not you know I don't

2164
01:50:26,329 --> 01:50:34,250
normally use it vtune when I look at

2165
01:50:32,000 --> 01:50:37,520
this and I look at the port utilization

2166
01:50:34,250 --> 01:50:41,149
here right and I and ice and I look at

2167
01:50:37,520 --> 01:50:43,880
the breakdown of that number so it says

2168
01:50:41,149 --> 01:50:48,710
like the port utilization is like you

2169
01:50:43,880 --> 01:50:52,400
know something like 50% total right like

2170
01:50:48,710 --> 01:50:59,569
the dividers at 10.5 and you know 20 I

2171
01:50:52,399 --> 01:51:02,719
mean we just look at that number right

2172
01:50:59,569 --> 01:51:06,139
so I have twenty nine point eight plus

2173
01:51:02,719 --> 01:51:08,779
ten point five that's that's like you

2174
01:51:06,140 --> 01:51:10,850
know forty forty percent I don't

2175
01:51:08,779 --> 01:51:13,729
understand why I'm only seeing that and

2176
01:51:10,850 --> 01:51:17,150
it's not telling me where the rest of

2177
01:51:13,729 --> 01:51:19,250
it's going right and so you know we can

2178
01:51:17,149 --> 01:51:20,408
look up here cycles per instruction

2179
01:51:19,250 --> 01:51:24,170
retired

2180
01:51:20,408 --> 01:51:25,460
that's a weird metric I usually like to

2181
01:51:24,170 --> 01:51:29,060
think of it the other way around right

2182
01:51:25,460 --> 01:51:32,140
which is how many instructions per cycle

2183
01:51:29,060 --> 01:51:37,780
I did retire so if we invert that number

2184
01:51:32,140 --> 01:51:40,760
we get 3.2 that suggests to me that like

2185
01:51:37,779 --> 01:51:43,969
again this number is really the number

2186
01:51:40,760 --> 01:51:47,530
that should have been like shouldn't

2187
01:51:43,969 --> 01:51:50,719
that be like close to a hundred percent

2188
01:51:47,529 --> 01:51:55,809
right because what I don't understand is

2189
01:51:50,719 --> 01:52:01,039
like if this is our actual CPI rate what

2190
01:51:55,810 --> 01:52:02,929
where's the extra clocks going so I

2191
01:52:01,039 --> 01:52:04,939
don't know I've always had this problem

2192
01:52:02,929 --> 01:52:07,670
with until you I don't use it I mean I

2193
01:52:04,939 --> 01:52:08,809
should use it more because it's you know

2194
01:52:07,670 --> 01:52:12,679
that way I don't have to go over to

2195
01:52:08,810 --> 01:52:14,929
Linux machine to do the sampling but so

2196
01:52:12,679 --> 01:52:16,908
I often have this problem where it's

2197
01:52:14,929 --> 01:52:17,960
hard I don't understand how they're

2198
01:52:16,908 --> 01:52:19,609
choosing it rather there's like stuff

2199
01:52:17,960 --> 01:52:21,529
like this always confusing me actin

2200
01:52:19,609 --> 01:52:23,599
mainly read it myself then I see that

2201
01:52:21,529 --> 01:52:25,340
it's like oh it's close to 4 which is

2202
01:52:23,600 --> 01:52:26,140
the max we could possibly get yet these

2203
01:52:25,340 --> 01:52:28,569
numbers do

2204
01:52:26,140 --> 01:52:34,390
suggest the same thing right this should

2205
01:52:28,569 --> 01:52:37,119
be like 90 right so I get confused about

2206
01:52:34,390 --> 01:52:48,640
that right

2207
01:52:37,119 --> 01:52:50,590
I just don't know um so you know we'll

2208
01:52:48,640 --> 01:52:51,730
pushing this maybe before tomorrow I'll

2209
01:52:50,590 --> 01:52:52,960
take a look at some of the docks or

2210
01:52:51,729 --> 01:52:55,299
vtune and try to get a little bit better

2211
01:52:52,960 --> 01:52:57,609
at understanding this but that's what

2212
01:52:55,300 --> 01:53:01,239
we're looking at right now stimuli like

2213
01:52:57,609 --> 01:53:02,619
I said before and we can set which

2214
01:53:01,239 --> 01:53:04,929
things we want to look at there as well

2215
01:53:02,619 --> 01:53:08,460
I believe there's a way so if you go

2216
01:53:04,930 --> 01:53:12,520
into microarchitecture analysis I think

2217
01:53:08,460 --> 01:53:14,529
you can do something that allows you to

2218
01:53:12,520 --> 01:53:16,710
get access to this I just forget what it

2219
01:53:14,529 --> 01:53:16,710
is

2220
01:53:33,800 --> 01:53:41,099
so I really just can't remember how you

2221
01:53:38,698 --> 01:53:43,299
unlock that maybe you have to buy the

2222
01:53:41,099 --> 01:53:46,479
season pass

2223
01:53:43,300 --> 01:53:46,479
[Music]

2224
01:53:52,029 --> 01:53:58,929
so I don't remember how you get this

2225
01:53:54,310 --> 01:54:01,240
thing to turn on oh do I have to run it

2226
01:53:58,930 --> 01:54:02,560
in a special I don't know we'll look

2227
01:54:01,239 --> 01:54:04,599
this up before next time because I would

2228
01:54:02,560 --> 01:54:06,039
like to know because I've got to get I

2229
01:54:04,600 --> 01:54:07,420
basically have to get to the point where

2230
01:54:06,039 --> 01:54:09,550
I can do the same thing I do with Linux

2231
01:54:07,420 --> 01:54:12,220
perf on this if we want to actually look

2232
01:54:09,550 --> 01:54:14,320
at stuff so I'll look it up but either

2233
01:54:12,220 --> 01:54:16,470
way so the other thing you can run in

2234
01:54:14,319 --> 01:54:19,569
vtune right is the memory analysis thing

2235
01:54:16,470 --> 01:54:22,000
and the memory analysis thing is just it

2236
01:54:19,569 --> 01:54:23,679
collects different data on the run right

2237
01:54:22,000 --> 01:54:24,789
so instead of looking primarily at the

2238
01:54:23,680 --> 01:54:28,060
performance counters that are about

2239
01:54:24,789 --> 01:54:29,529
back-end usage and stuff like that here

2240
01:54:28,060 --> 01:54:32,470
we can get the information about things

2241
01:54:29,529 --> 01:54:35,380
like cache misses right so here you can

2242
01:54:32,470 --> 01:54:41,289
see like look here's when you were bound

2243
01:54:35,380 --> 01:54:42,970
on each of your particular types of on

2244
01:54:41,289 --> 01:54:45,819
each of the things that you've actually

2245
01:54:42,970 --> 01:54:48,039
got so in l1 cache l2 cache the DRAM

2246
01:54:45,819 --> 01:54:49,689
right so this is telling us how our

2247
01:54:48,039 --> 01:54:51,939
memory profile looks and as you can see

2248
01:54:49,689 --> 01:54:55,179
it's pretty squeaky clean right

2249
01:54:51,939 --> 01:55:01,839
according to this we basically never

2250
01:54:55,180 --> 01:55:03,970
miss the cache in theory right so you

2251
01:55:01,840 --> 01:55:05,980
know optimizing for the cache

2252
01:55:03,970 --> 01:55:10,829
wouldn't presumably help us much here if

2253
01:55:05,979 --> 01:55:12,789
this is to be believed so anyway that's

2254
01:55:10,829 --> 01:55:14,710
you can see why I did all that

2255
01:55:12,789 --> 01:55:16,029
that's the isolation process we now have

2256
01:55:14,710 --> 01:55:18,310
a clean way to measure the performance

2257
01:55:16,029 --> 01:55:19,960
of the program so tomorrow we could do

2258
01:55:18,310 --> 01:55:21,460
is we could start making some targeted

2259
01:55:19,960 --> 01:55:24,130
changes to it we could see how the

2260
01:55:21,460 --> 01:55:25,480
profile changes we can also put in a

2261
01:55:24,130 --> 01:55:27,340
little counter in here so we can just

2262
01:55:25,479 --> 01:55:30,819
run the program and see if we get faster

2263
01:55:27,340 --> 01:55:32,980
or slower so there's a little bit of

2264
01:55:30,819 --> 01:55:34,779
that we can do this just sets us up for

2265
01:55:32,979 --> 01:55:36,459
success okay so you could see why I did

2266
01:55:34,779 --> 01:55:38,829
that so we could just take targeted

2267
01:55:36,460 --> 01:55:40,560
evaluation and we can see by metrics

2268
01:55:38,829 --> 01:55:44,769
whether we're getting better or worse

2269
01:55:40,560 --> 01:55:45,490
let's go to a brief QA and I'm gonna

2270
01:55:44,770 --> 01:55:49,720
have some lunch

2271
01:55:45,489 --> 01:55:53,460
and I want to say I want to say that

2272
01:55:49,720 --> 01:55:57,340
there's some jomblo Sean Barrett action

2273
01:55:53,460 --> 01:56:02,470
going on later today if I'm not wrong

2274
01:55:57,340 --> 01:56:06,090
about that so we'll try and skip over to

2275
01:56:02,470 --> 01:56:06,090
that after this stream is is done

2276
01:56:22,849 --> 01:56:25,279
might be a good idea to explain the

2277
01:56:24,170 --> 01:56:26,719
difference between sampling and

2278
01:56:25,279 --> 01:56:28,099
instrumentation ProFlowers and how they

2279
01:56:26,719 --> 01:56:29,689
work on some basic level and why

2280
01:56:28,099 --> 01:56:31,819
sampling profile is not a great idea

2281
01:56:29,689 --> 01:56:33,649
despite most people believing and

2282
01:56:31,819 --> 01:56:39,229
telling you that it is very good yeah

2283
01:56:33,649 --> 01:56:41,929
sure I'm happy to do so so you heard me

2284
01:56:39,229 --> 01:56:43,939
say the hotspot analysis I showed you

2285
01:56:41,929 --> 01:56:45,949
that thing and I said like an early

2286
01:56:43,939 --> 01:56:47,750
trustees number like like I said some

2287
01:56:45,948 --> 01:56:51,319
stuff that was dismissive of the hotspot

2288
01:56:47,750 --> 01:56:52,788
analysis why did I say that well the

2289
01:56:51,319 --> 01:56:54,799
reason I was dismissive of the hotspot

2290
01:56:52,788 --> 01:56:55,908
analysis is the hotspot analysis does

2291
01:56:54,800 --> 01:56:59,809
something called sampling based

2292
01:56:55,908 --> 01:57:03,170
profiling and what that does is it says

2293
01:56:59,809 --> 01:57:06,050
look I'm just gonna randomly interrupt

2294
01:57:03,170 --> 01:57:08,359
this process periodically and I'm gonna

2295
01:57:06,050 --> 01:57:10,730
see where the instruction pointer is and

2296
01:57:08,359 --> 01:57:12,710
I'm gonna assume that that is where the

2297
01:57:10,729 --> 01:57:14,419
program is slow and the reason for that

2298
01:57:12,710 --> 01:57:16,489
is because typically you're sitting

2299
01:57:14,420 --> 01:57:18,408
inside your hot loops most of the time

2300
01:57:16,488 --> 01:57:20,868
so if we just go ahead and see where you

2301
01:57:18,408 --> 01:57:23,929
are most of the time periodically that

2302
01:57:20,868 --> 01:57:28,698
should tell us where you're slow this is

2303
01:57:23,929 --> 01:57:31,219
not a bad idea in principle and if it's

2304
01:57:28,698 --> 01:57:33,738
hardware-assisted meaning your hardware

2305
01:57:31,219 --> 01:57:36,439
has good capabilities for collecting IP

2306
01:57:33,738 --> 01:57:38,029
logs without actually affecting the

2307
01:57:36,439 --> 01:57:41,000
runtime of the program which actually

2308
01:57:38,029 --> 01:57:44,929
x64 is due for certain things for

2309
01:57:41,000 --> 01:57:48,260
branches for example it can be okay

2310
01:57:44,929 --> 01:57:49,940
I don't know that vtune actually does

2311
01:57:48,260 --> 01:57:51,380
any of that I think vtune literally just

2312
01:57:49,939 --> 01:57:53,598
interrupts your process periodically I

2313
01:57:51,380 --> 01:57:55,368
could be wrong about that so as a result

2314
01:57:53,599 --> 01:57:56,630
it's actually not a very good measure

2315
01:57:55,368 --> 01:57:58,759
for the performance of the program

2316
01:57:56,630 --> 01:58:00,679
because it's actually changing the way

2317
01:57:58,760 --> 01:58:03,050
the programmer runs quite a bit it's

2318
01:58:00,679 --> 01:58:04,730
just not a great way to look at it so

2319
01:58:03,050 --> 01:58:06,110
the way that we do profiling handmade

2320
01:58:04,729 --> 01:58:07,788
hero and the way that will do profiling

2321
01:58:06,109 --> 01:58:09,408
here for our actual speed is we just use

2322
01:58:07,788 --> 01:58:11,630
our DTSC around the block we're trying

2323
01:58:09,408 --> 01:58:13,460
to time right and you've seen me do that

2324
01:58:11,630 --> 01:58:18,170
multiple times that's how I like to find

2325
01:58:13,460 --> 01:58:21,198
hotspots now again like I said hardware

2326
01:58:18,170 --> 01:58:27,078
assisted sampling base profiling is not

2327
01:58:21,198 --> 01:58:29,538
necessarily a bad idea but I don't

2328
01:58:27,078 --> 01:58:32,000
really trust me tunes hot-swap profiler

2329
01:58:29,538 --> 01:58:33,349
so I don't use it and it's because I

2330
01:58:32,000 --> 01:58:36,969
just don't trust the sampling that does

2331
01:58:33,349 --> 01:58:36,969
so sorry if I didn't explain that

2332
01:58:38,829 --> 01:58:42,350
vtune organizes those metrics by

2333
01:58:40,819 --> 01:58:43,849
something called the top-down before its

2334
01:58:42,350 --> 01:58:45,170
analysis methodology there's a pre

2335
01:58:43,850 --> 01:58:48,489
detail paper that introduces this that

2336
01:58:45,170 --> 01:58:51,199
would likely help maybe I'll take a look

2337
01:58:48,488 --> 01:58:53,119
if you're tried using clang CL to drop

2338
01:58:51,198 --> 01:58:54,769
in placement drop in em SVC can paddle

2339
01:58:53,119 --> 01:58:57,109
compiler there's much better code gen

2340
01:58:54,770 --> 01:58:59,060
than MSB CCL it's compatible with link

2341
01:58:57,109 --> 01:59:00,649
tag C but even LOD link will give you

2342
01:58:59,060 --> 01:59:02,180
usual PDB so I tried it my retrace where

2343
01:59:00,649 --> 01:59:05,629
it ended up being 15 times faster than

2344
01:59:02,180 --> 01:59:07,010
with regular my c CL it sounds like your

2345
01:59:05,630 --> 01:59:13,250
ray tracer was a little bit busted but

2346
01:59:07,010 --> 01:59:16,039
ok um have a meow hash the distribution

2347
01:59:13,250 --> 01:59:25,988
of your meow hash compiles on both clang

2348
01:59:16,039 --> 01:59:31,609
CL and M SVC um I would caution you to

2349
01:59:25,988 --> 01:59:34,039
so the thing you said which is it has

2350
01:59:31,609 --> 01:59:38,119
much better code done Jen that MSV CL is

2351
01:59:34,039 --> 01:59:40,130
false so clang CL has better code gen

2352
01:59:38,119 --> 01:59:44,329
for some things and worse code gen for

2353
01:59:40,130 --> 01:59:47,239
other things so for example clang CL

2354
01:59:44,329 --> 01:59:49,250
compiles meow hash worse than ms v CL ms

2355
01:59:47,238 --> 01:59:52,209
v CL is better the MS v CL compiled code

2356
01:59:49,250 --> 01:59:55,279
is faster than clangs that's how it is

2357
01:59:52,210 --> 01:59:57,560
so I would caution you to say it like

2358
01:59:55,279 --> 01:59:59,988
clang CL is not better than ms v CL it's

2359
01:59:57,560 --> 02:00:01,130
different and if you really want to know

2360
01:59:59,988 --> 02:00:03,439
which one compiler code faster you have

2361
02:00:01,130 --> 02:00:05,119
to test it some cocoa bio much faster

2362
02:00:03,439 --> 02:00:06,919
thanks yell some will compile much

2363
02:00:05,119 --> 02:00:09,680
better in SPL one thing that I can tell

2364
02:00:06,920 --> 02:00:12,230
you is clang CL is a minefield of

2365
02:00:09,680 --> 02:00:13,610
undefined behavior nonsense one of the

2366
02:00:12,229 --> 02:00:15,109
reasons they do better coach at some

2367
02:00:13,609 --> 02:00:18,049
times is because they screw up your code

2368
02:00:15,109 --> 02:00:19,460
and introduce a bunch of bugs right so I

2369
02:00:18,050 --> 02:00:21,890
would also say be very careful of that

2370
02:00:19,460 --> 02:00:24,529
clang CL is very bad at being

2371
02:00:21,890 --> 02:00:27,050
trustworthy about producing good quality

2372
02:00:24,529 --> 02:00:28,609
code because anytime they can use a you

2373
02:00:27,050 --> 02:00:31,670
be trick they do which will introduce

2374
02:00:28,609 --> 02:00:32,839
like security bugs or regular bugs and

2375
02:00:31,670 --> 02:00:36,800
so on

2376
02:00:32,840 --> 02:00:40,960
and so I would just warn you about that

2377
02:00:36,800 --> 02:00:43,969
so clang CL yet not bad I have used it

2378
02:00:40,960 --> 02:00:45,020
it's a totally reasonable it's not

2379
02:00:43,969 --> 02:00:47,239
better than msel

2380
02:00:45,020 --> 02:00:49,340
it's different sometimes the compiles go

2381
02:00:47,238 --> 02:00:51,138
better some is compiles code worse

2382
02:00:49,340 --> 02:01:01,069
and you could pick the one that seems to

2383
02:00:51,139 --> 02:01:03,230
be better for your project games like

2384
02:01:01,069 --> 02:01:04,429
csgo go up to 300 frames per second are

2385
02:01:03,229 --> 02:01:05,868
they pretty good optimized seems like

2386
02:01:04,429 --> 02:01:07,789
getting him here because this would be

2387
02:01:05,868 --> 02:01:10,009
hard actually getting him here up this

2388
02:01:07,789 --> 02:01:14,359
would be trivial you just put the Ray

2389
02:01:10,010 --> 02:01:18,320
casting on the GPU or pre compute the

2390
02:01:14,359 --> 02:01:20,359
lighting so you know counter-strike go

2391
02:01:18,319 --> 02:01:22,729
doesn't have real-time lighting you know

2392
02:01:20,359 --> 02:01:25,130
it doesn't doesn't do that all the

2393
02:01:22,729 --> 02:01:26,959
indirect lighting is baked so they just

2394
02:01:25,130 --> 02:01:28,219
don't run that pass and hey if we didn't

2395
02:01:26,960 --> 02:01:29,800
if we just pre baked the letting him

2396
02:01:28,219 --> 02:01:32,329
handmade hero that would just go away

2397
02:01:29,800 --> 02:01:35,980
and currently that's where all of our

2398
02:01:32,329 --> 02:01:38,210
time goes basically if we wanted to

2399
02:01:35,979 --> 02:01:39,709
speed up the render side of things

2400
02:01:38,210 --> 02:01:41,929
there's many ways we can do that as well

2401
02:01:39,710 --> 02:01:44,029
so 300 check in to him here would

2402
02:01:41,929 --> 02:01:48,199
actually pretty easy if that makes sense

2403
02:01:44,029 --> 02:01:51,250
oh we left an extra you're right we did

2404
02:01:48,198 --> 02:01:51,250
thank you for that catch

2405
02:02:03,470 --> 02:02:07,170
what's to say Samuel hatch will be

2406
02:02:05,489 --> 02:02:09,149
reaching a new version soon uh probably

2407
02:02:07,170 --> 02:02:12,869
we will release an 0.6 sometime soon

2408
02:02:09,149 --> 02:02:14,699
yeah I just haven't had time to do so

2409
02:02:12,869 --> 02:02:20,819
Oh point five is still I think the best

2410
02:02:14,699 --> 02:02:22,529
hash that there is it's a very fast hash

2411
02:02:20,819 --> 02:02:24,119
that's much more secure than any of the

2412
02:02:22,529 --> 02:02:29,819
other non cryptographic hashes you can

2413
02:02:24,119 --> 02:02:32,250
use so I think 0.5 is already great but

2414
02:02:29,819 --> 02:02:34,049
0.6 you know we're just trying to

2415
02:02:32,250 --> 02:02:36,739
finalize a few things so that we can

2416
02:02:34,050 --> 02:02:36,739
call it standard

2417
02:02:50,470 --> 02:02:53,420
have you tried it buggin by the stream

2418
02:02:52,369 --> 02:02:55,159
there's so many frames to move the

2419
02:02:53,420 --> 02:02:59,899
character around it's just because I'm

2420
02:02:55,159 --> 02:03:02,359
recording it's just OBS being dumb you

2421
02:02:59,899 --> 02:03:05,989
know it's got a hard job to do it's got

2422
02:03:02,359 --> 02:03:07,399
a record video and stream video and it

2423
02:03:05,989 --> 02:03:09,439
it just can't handle recording and

2424
02:03:07,399 --> 02:03:14,989
streaming at this at the same time at

2425
02:03:09,439 --> 02:03:18,609
60fps because the stream I think goes

2426
02:03:14,989 --> 02:03:18,609
out at like 30 fps or something right

2427
02:03:43,429 --> 02:03:48,779
what should me I'll hash not be used for

2428
02:03:46,380 --> 02:03:51,239
um it's there's a very very clear

2429
02:03:48,779 --> 02:04:06,418
explanation if you want to know about

2430
02:03:51,238 --> 02:04:10,438
that so this page so meow hash is by

2431
02:04:06,418 --> 02:04:16,130
Jacob and myself and this is no hack

2432
02:04:10,439 --> 02:04:23,449
coder is Jacob this page explains

2433
02:04:16,130 --> 02:04:30,300
explicitly what hash levels are right

2434
02:04:23,448 --> 02:04:33,629
and basically like meow hash is a level

2435
02:04:30,300 --> 02:04:35,788
three hash level four and level five

2436
02:04:33,630 --> 02:04:37,469
hashes are like what you would typically

2437
02:04:35,788 --> 02:04:38,819
call cryptogram while level 5 hash

2438
02:04:37,469 --> 02:04:41,698
really is what you would typically call

2439
02:04:38,819 --> 02:04:43,288
a cryptographic hash so that's one where

2440
02:04:41,698 --> 02:04:46,348
you need it to be very strong against

2441
02:04:43,288 --> 02:04:50,038
adversaries who know the seed for

2442
02:04:46,349 --> 02:04:51,779
example level three is a reduced level

2443
02:04:50,038 --> 02:04:53,639
of security but it's not like most

2444
02:04:51,779 --> 02:04:56,819
hashes that are non cryptographic are

2445
02:04:53,639 --> 02:05:02,969
like this right they're not even this

2446
02:04:56,819 --> 02:05:07,469
most are like this they might not even

2447
02:05:02,969 --> 02:05:10,078
be level one sometimes but anyway so in

2448
02:05:07,469 --> 02:05:13,050
the case of a level three hash what it

2449
02:05:10,078 --> 02:05:16,349
basically tries to guarantee is that if

2450
02:05:13,050 --> 02:05:21,110
you use it an attacker who doesn't know

2451
02:05:16,349 --> 02:05:26,279
the seed can't generate a collision

2452
02:05:21,109 --> 02:05:27,719
right and you know it's based on

2453
02:05:26,279 --> 02:05:29,668
probabilities and stuff like that so you

2454
02:05:27,719 --> 02:05:31,139
know you have to figure out like okay

2455
02:05:29,668 --> 02:05:33,179
what was the bit depth and all that sort

2456
02:05:31,139 --> 02:05:34,590
of stuff but a level three hash is

2457
02:05:33,179 --> 02:05:36,449
basically a hash where if the attacker

2458
02:05:34,590 --> 02:05:38,449
doesn't know the seed they cannot

2459
02:05:36,448 --> 02:05:41,719
generate a collision

2460
02:05:38,448 --> 02:05:46,078
you can't that in my ass is one of those

2461
02:05:41,719 --> 02:05:50,939
you can't for example use that kind of a

2462
02:05:46,078 --> 02:05:54,448
hash for something like digital

2463
02:05:50,939 --> 02:05:56,220
signatures because in that case everyone

2464
02:05:54,448 --> 02:05:58,710
knows the seeds the seeds public

2465
02:05:56,220 --> 02:06:00,329
so in the case where the seed is public

2466
02:05:58,710 --> 02:06:01,500
you can't be using something like a

2467
02:06:00,329 --> 02:06:05,720
level three hash you'd have to use

2468
02:06:01,500 --> 02:06:05,720
something like a level five hash right

2469
02:06:05,960 --> 02:06:11,310
what you can use a level three hash for

2470
02:06:08,279 --> 02:06:13,710
is anything that might have an adversary

2471
02:06:11,310 --> 02:06:16,380
still but where the seed isn't known a

2472
02:06:13,710 --> 02:06:19,140
hash table at the front end of a server

2473
02:06:16,380 --> 02:06:20,579
for example there's been a lot of denial

2474
02:06:19,140 --> 02:06:23,280
of service attack kind of stuff that

2475
02:06:20,579 --> 02:06:25,590
happens because people used a crappy

2476
02:06:23,279 --> 02:06:28,079
hash and the hackers figured that out

2477
02:06:25,590 --> 02:06:30,090
and were able to craft all their packets

2478
02:06:28,079 --> 02:06:33,199
to hit the same line of the hash table

2479
02:06:30,090 --> 02:06:35,310
which takes down the server right

2480
02:06:33,199 --> 02:06:39,559
similarly you can use it for something

2481
02:06:35,310 --> 02:06:42,330
like meth message what are they called

2482
02:06:39,560 --> 02:06:44,070
max message authentication like it's for

2483
02:06:42,329 --> 02:06:45,510
like message authentication codes

2484
02:06:44,069 --> 02:06:48,509
between two people like stuff like that

2485
02:06:45,510 --> 02:06:50,760
can use it for that so there's a lot of

2486
02:06:48,510 --> 02:06:52,500
uses for meow hash cuz it's a lot better

2487
02:06:50,760 --> 02:06:55,530
than a normal non cryptographic hash and

2488
02:06:52,500 --> 02:06:57,899
it's the fastest hash so it's faster

2489
02:06:55,529 --> 02:07:01,769
than all the other non cryptographic

2490
02:06:57,899 --> 02:07:04,109
hashes and it's stronger than that but

2491
02:07:01,770 --> 02:07:07,200
it's not a cryptographic hash so you

2492
02:07:04,109 --> 02:07:09,059
can't use it like the kind we typically

2493
02:07:07,199 --> 02:07:11,340
call cryptographic hash you can't use it

2494
02:07:09,060 --> 02:07:14,750
in circumstances where you circulate the

2495
02:07:11,340 --> 02:07:14,750
key either the seed

2496
02:07:26,369 --> 02:07:29,590
are you sure the hash is secure people

2497
02:07:28,569 --> 02:07:31,479
have previously pointed out some issues

2498
02:07:29,590 --> 02:07:34,360
with meow hash Jenny collisions yes

2499
02:07:31,479 --> 02:07:39,269
we're quite sure it's secure so nobody's

2500
02:07:34,359 --> 02:07:39,269
ever found a collision in Maya hash 0.5

2501
02:07:40,289 --> 02:07:49,779
that wasn't standard birthday paradox so

2502
02:07:45,939 --> 02:07:50,829
basically the 128-bit the full 128 bits

2503
02:07:49,779 --> 02:07:53,769
meow hash

2504
02:07:50,829 --> 02:07:58,779
no one's ever found a collision ever in

2505
02:07:53,770 --> 02:08:01,750
0.5 and in if you just look at the

2506
02:07:58,779 --> 02:08:05,889
bottom 64 bits you would expect to be

2507
02:08:01,750 --> 02:08:08,590
able to find collisions if you tried if

2508
02:08:05,890 --> 02:08:12,190
you look at the bottom 64 bits and you

2509
02:08:08,590 --> 02:08:14,529
try more than 4 billion random attempts

2510
02:08:12,189 --> 02:08:16,000
then you should start to be able to find

2511
02:08:14,529 --> 02:08:19,059
collisions based on the birthday paradox

2512
02:08:16,000 --> 02:08:20,619
right it's very hard to do that because

2513
02:08:19,060 --> 02:08:25,450
you need a machine with a lot of memory

2514
02:08:20,619 --> 02:08:27,250
to do it but it was recently done and we

2515
02:08:25,449 --> 02:08:27,579
performed better than anyone else on the

2516
02:08:27,250 --> 02:08:29,500
test

2517
02:08:27,579 --> 02:08:31,739
amusingly so you can actually look at it

2518
02:08:29,500 --> 02:08:31,739
here

2519
02:08:43,908 --> 02:08:49,519
so here you go so our old version which

2520
02:08:46,670 --> 02:08:52,210
was not a level 3 hash you can see that

2521
02:08:49,520 --> 02:08:57,370
there were collisions when you run

2522
02:08:52,210 --> 02:09:00,350
randomly a hundred a hundred million

2523
02:08:57,369 --> 02:09:07,158
hashes and check if any of them collide

2524
02:09:00,350 --> 02:09:09,380
with each other right um for 40.5 we

2525
02:09:07,158 --> 02:09:12,049
were actually below the expected rate

2526
02:09:09,380 --> 02:09:14,960
and that's basically as low as anyone

2527
02:09:12,050 --> 02:09:18,920
got besides like I guess its ex ex age

2528
02:09:14,960 --> 02:09:20,630
64 but this is edit but we're basically

2529
02:09:18,920 --> 02:09:23,149
the same and that's a meaningless number

2530
02:09:20,630 --> 02:09:25,460
because it's really just random it

2531
02:09:23,149 --> 02:09:28,039
should only be it just has to be at like

2532
02:09:25,460 --> 02:09:30,649
the birthday paradox level so that's if

2533
02:09:28,039 --> 02:09:32,569
you only use the bottom 64 bits of meow

2534
02:09:30,649 --> 02:09:37,479
hash if you actually is the whole 64 bit

2535
02:09:32,569 --> 02:09:37,479
120 pets no one's ever found one right

2536
02:09:39,670 --> 02:09:44,960
so yeah so meow hash five is so far

2537
02:09:44,270 --> 02:09:46,310
rock-solid

2538
02:09:44,960 --> 02:09:48,800
no one's ever found a collision in it

2539
02:09:46,310 --> 02:09:51,320
and if you go looking for collisions in

2540
02:09:48,800 --> 02:09:52,699
the low bits by truncating them down to

2541
02:09:51,319 --> 02:09:54,170
a point where you know you should be

2542
02:09:52,698 --> 02:09:56,119
able to produce collisions in any hash

2543
02:09:54,170 --> 02:09:57,770
even a cryptographic hash we perform

2544
02:09:56,119 --> 02:09:59,630
exactly like a cryptographic hash in

2545
02:09:57,770 --> 02:10:03,770
that case we produce exactly the

2546
02:09:59,630 --> 02:10:05,929
expected number of collisions what do

2547
02:10:03,770 --> 02:10:09,250
you use me I ask for everything it's

2548
02:10:05,929 --> 02:10:09,250
like the only hash function I use now

2549
02:10:13,789 --> 02:10:17,850
would hand me here run a 3G bit system

2550
02:10:16,229 --> 02:10:22,259
or it needs some porting it probably

2551
02:10:17,850 --> 02:10:24,030
needs a little bit of porting right even

2552
02:10:22,260 --> 02:10:26,190
security well like I just said I don't

2553
02:10:24,029 --> 02:10:28,079
use meow hash for public message signing

2554
02:10:26,189 --> 02:10:30,119
but I don't write any code for public

2555
02:10:28,079 --> 02:10:32,010
message signing so the things that I

2556
02:10:30,119 --> 02:10:33,210
wouldn't use the the things where I

2557
02:10:32,010 --> 02:10:36,180
would need extremely strong

2558
02:10:33,210 --> 02:10:38,130
cryptographic hash where you can

2559
02:10:36,180 --> 02:10:43,590
circulate the seed I don't have that

2560
02:10:38,130 --> 02:10:47,100
case but yeah meow hash we believe it to

2561
02:10:43,590 --> 02:10:49,140
be secure for the specific case we

2562
02:10:47,100 --> 02:10:51,780
talked about which is if you are not

2563
02:10:49,140 --> 02:11:04,890
circulating the seed then we believe it

2564
02:10:51,779 --> 02:11:06,300
is a strong hash oh crap that we didn't

2565
02:11:04,890 --> 02:11:09,350
finish this I'm glad I'm glad people on

2566
02:11:06,300 --> 02:11:09,350
the chat are watching

2567
02:11:13,100 --> 02:11:16,280
thank you

2568
02:11:21,140 --> 02:11:26,550
miss Miao has cross-platform that's one

2569
02:11:24,090 --> 02:11:31,220
of the things we're putting it in 0.6 so

2570
02:11:26,550 --> 02:11:34,949
it is in the sense that forearm and x64

2571
02:11:31,220 --> 02:11:36,570
they both have acceleration for AES so

2572
02:11:34,949 --> 02:11:40,800
you get very good performance on those

2573
02:11:36,569 --> 02:11:42,029
platforms PowerPC I don't have so I

2574
02:11:40,800 --> 02:11:45,690
don't know anything about the

2575
02:11:42,029 --> 02:11:47,789
performance profile on a PowerPC I just

2576
02:11:45,689 --> 02:11:49,739
have no idea we're not targeting that

2577
02:11:47,789 --> 02:11:51,720
and we really don't care

2578
02:11:49,739 --> 02:11:53,639
we basically only care about consumer

2579
02:11:51,720 --> 02:11:55,860
hardware that's what it's for

2580
02:11:53,640 --> 02:11:56,340
so I don't care what it runs on a

2581
02:11:55,859 --> 02:11:58,439
PowerPC

2582
02:11:56,340 --> 02:12:01,739
but that said it might be fine I don't

2583
02:11:58,439 --> 02:12:03,210
know anything that has a AES support in

2584
02:12:01,739 --> 02:12:05,729
hardware which is a lot of hardware

2585
02:12:03,210 --> 02:12:08,130
these days can be accelerated on me on

2586
02:12:05,729 --> 02:12:12,829
hash quite a bit anything that doesn't

2587
02:12:08,130 --> 02:12:12,829
will be slower but how much slower

2588
02:12:12,920 --> 02:12:16,190
hard to say

2589
02:12:28,489 --> 02:12:31,639
any reason we're not using the

2590
02:12:30,289 --> 02:12:35,689
checkerboard rendering yeah just because

2591
02:12:31,640 --> 02:12:38,360
I think we're B I think we're fast

2592
02:12:35,689 --> 02:12:43,879
enough without it so I don't think we're

2593
02:12:38,359 --> 02:12:45,049
gonna need it are you talk about our

2594
02:12:43,880 --> 02:12:47,050
lighting we did the checkerboard

2595
02:12:45,050 --> 02:12:48,739
lighting thing and then we turned it off

2596
02:12:47,050 --> 02:12:49,369
is that what you're talking about you

2597
02:12:48,739 --> 02:12:50,630
talk about something else

2598
02:12:49,369 --> 02:12:54,739
you don't actually check our board like

2599
02:12:50,630 --> 02:12:56,560
rasterization or something you know I'm

2600
02:12:54,739 --> 02:12:59,569
overtime anyway I should I should go um

2601
02:12:56,560 --> 02:13:05,330
alright so I'm gonna I'm gonna wind down

2602
02:12:59,569 --> 02:13:14,019
the stream here right and I just I don't

2603
02:13:05,329 --> 02:13:14,019
know what's going on with the stream

2604
02:13:19,289 --> 02:13:22,380
[Music]

2605
02:13:34,640 --> 02:13:41,640
so this specifically says like 3 p.m.

2606
02:13:39,600 --> 02:13:48,120
Pacific time which is like 30 minutes

2607
02:13:41,640 --> 02:13:56,570
from now John and Shawn are supposed to

2608
02:13:48,119 --> 02:13:56,569
have a stream so it's not up yet but

2609
02:14:00,119 --> 02:14:11,220
[Music]

2610
02:14:02,180 --> 02:14:12,390
yeah rational coder you use meow hash

2611
02:14:11,220 --> 02:14:16,190
for normal hash tools in your everyday

2612
02:14:12,390 --> 02:14:16,190
code oh absolutely yeah yeah yeah

2613
02:14:38,338 --> 02:14:42,939
all right so I not hearing anything

2614
02:14:41,229 --> 02:14:44,889
about when this is going up so look

2615
02:14:42,939 --> 02:14:47,378
here's the thing I don't really know

2616
02:14:44,889 --> 02:14:48,179
exactly what's going on but in theory in

2617
02:14:47,378 --> 02:14:51,698
30 minutes

2618
02:14:48,179 --> 02:14:56,259
there should be a stream with John and

2619
02:14:51,698 --> 02:14:58,778
Shawn talking about compilers if you

2620
02:14:56,259 --> 02:15:01,689
like the one that John and I did then

2621
02:14:58,779 --> 02:15:06,429
this is more of that so you should check

2622
02:15:01,689 --> 02:15:07,719
it out I don't actually know how to make

2623
02:15:06,429 --> 02:15:10,748
it easier to get to it but you know

2624
02:15:07,719 --> 02:15:14,439
twitch TV slash naysayer 88 or go to

2625
02:15:10,748 --> 02:15:17,618
Twitter Jonathan Blow and and watch that

2626
02:15:14,439 --> 02:15:19,719
that's that's about all I got so please

2627
02:15:17,618 --> 02:15:21,938
check that out I'll try to raid the

2628
02:15:19,719 --> 02:15:24,069
channel after but you know I'll be

2629
02:15:21,939 --> 02:15:25,628
honest I don't think that's gonna work

2630
02:15:24,069 --> 02:15:27,669
because since they're not live people

2631
02:15:25,628 --> 02:15:28,809
probably won't stay there but so I was

2632
02:15:27,668 --> 02:15:33,328
kind of hoping that they were at least

2633
02:15:28,809 --> 02:15:36,399
running a like nominal stream so anyway

2634
02:15:33,328 --> 02:15:36,818
thanks for joining us for another thanks

2635
02:15:36,399 --> 02:15:38,649
for joining me

2636
02:15:36,819 --> 02:15:39,519
further episode of handmade hero it has

2637
02:15:38,649 --> 02:15:41,109
been a pleasure cooking for you as

2638
02:15:39,519 --> 02:15:42,429
always I'm glad we got a little test app

2639
02:15:41,109 --> 02:15:44,619
setup tomorrow we can start to tweak

2640
02:15:42,429 --> 02:15:45,849
that and actually take a look at the

2641
02:15:44,618 --> 02:15:47,948
performance characteristics of a red

2642
02:15:45,849 --> 02:15:51,189
caster and optimize those to where we

2643
02:15:47,948 --> 02:15:52,208
think we need to be that's it for today

2644
02:15:51,189 --> 02:15:54,279
until tomorrow

2645
02:15:52,208 --> 02:15:55,238
have fun programming everyone and I'll

2646
02:15:54,279 --> 02:15:57,609
see you on the Internet

2647
02:15:55,238 --> 02:15:59,228
check out that John blue Shawn Barrett

2648
02:15:57,609 --> 02:16:00,279
stream if you get a chance should be

2649
02:15:59,229 --> 02:16:03,099
happening at 3 p.m. Pacific Standard

2650
02:16:00,279 --> 02:16:05,559
Time again that's a half hour from now

2651
02:16:03,099 --> 02:16:09,159
the webinar so that should be twitch.tv

2652
02:16:05,559 --> 02:16:11,219
slash naysayer 88 alright take it easy

2653
02:16:09,158 --> 02:16:11,219
everybody

