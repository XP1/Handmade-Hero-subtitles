1
00:00:00,256 --> 00:00:01,024
Start recording

2
00:00:01,280 --> 00:00:02,560
Okay we are

3
00:00:03,072 --> 00:00:03,584
Going

4
00:00:04,352 --> 00:00:04,864
So

5
00:00:05,376 --> 00:00:08,192
I have one piece of news to announce

6
00:00:08,960 --> 00:00:11,520
Thanks to some people who sent me this

7
00:00:12,032 --> 00:00:13,056
Because I did not know

8
00:00:13,823 --> 00:00:15,871
It turns out that almost as if

9
00:00:16,640 --> 00:00:19,199
They wanted to support handmade here of directly

10
00:00:19,968 --> 00:00:21,760
Microsoft decided yesterday

11
00:00:22,015 --> 00:00:24,831
To announce that they were releasing the professional version

12
00:00:25,088 --> 00:00:26,112
Other IDE

13
00:00:26,367 --> 00:00:27,135
For free

14
00:00:27,391 --> 00:00:28,160
For small teams

15
00:00:28,416 --> 00:00:30,975
And if you are practicing at home by yourself you are

16
00:00:31,231 --> 00:00:32,768
Sort of the definition of a small team

17
00:00:33,280 --> 00:00:37,376
And what that means is you do not have to use the visual Studio Express

18
00:00:38,143 --> 00:00:39,423
You can actually use

19
00:00:39,679 --> 00:00:42,240
Something they call the Community Edition now I

20
00:00:42,496 --> 00:00:45,568
Try downloading it and it is installing in the background here

21
00:00:45,823 --> 00:00:48,896
But as far as I can tell it actually is just a regular

22
00:00:49,408 --> 00:00:50,432
Visual Studio

23
00:00:50,688 --> 00:00:53,760
2013 and that is pretty awesome

24
00:00:54,015 --> 00:00:59,135
Because that means that for the whole series proper starting Monday assuming that this works

25
00:01:00,671 --> 00:01:05,536
I will be able to use the exact same version of Visual Studio as people who want to follow it home which I think is awesome

26
00:01:06,048 --> 00:01:10,144
And you may wonder why I didn't just use Visual Studio Express and the reason for that is at least

27
00:01:10,400 --> 00:01:12,448
In previous versions of Visual Studio Express

28
00:01:12,703 --> 00:01:15,519
There was some things you couldn't do like view the registers

29
00:01:15,775 --> 00:01:19,103
Spy in the register window and stuff like that just a couple things that I wanted

30
00:01:19,359 --> 00:01:20,384
They were really going to help

31
00:01:20,640 --> 00:01:21,920
Me to explain a couple

32
00:01:22,432 --> 00:01:25,760
And so I'm really hoping that this pans out we'll see I'll play around with it a little bit

33
00:01:26,784 --> 00:01:29,856
Tonight and tomorrow and we'll see and hopefully this will work out and we can all be on the

34
00:01:30,111 --> 00:01:31,903
Same package so I'm pretty excited about that

35
00:01:32,159 --> 00:01:35,487
And I hope they got music and totally ignore what I said yesterday about

36
00:01:35,743 --> 00:01:41,888
Installing Visual Studio Express you can actually go on in and get this and if you want to get it it was really easy to find

37
00:01:42,144 --> 00:01:43,168
And actually they I guess it's

38
00:01:43,424 --> 00:01:45,728
Definition of a half but it's just Visual Studio

39
00:01:45,983 --> 00:01:46,495
. com

40
00:01:48,543 --> 00:01:50,335
And this is right here free developer

41
00:01:51,359 --> 00:01:57,504
So you can go on there and you can get that and you just download it and install it and it didn't even require the little

42
00:01:57,760 --> 00:02:01,600
Me creating an account thing that they required before and I don't know if it will after it's done

43
00:02:01,855 --> 00:02:04,159
It didn't it didn't require that for downloads

44
00:02:08,768 --> 00:02:12,608
Alright I have to learn John blows Mike discipline where he mutes whenever he drinks

45
00:02:12,864 --> 00:02:13,632
For now you're going to have

46
00:02:13,888 --> 00:02:14,400
Have to actually listen to

47
00:02:15,168 --> 00:02:16,704
I apologize for that I just don't have the

48
00:02:16,960 --> 00:02:17,472
The scales yet

49
00:02:17,984 --> 00:02:19,520
That comes with being a professional

50
00:02:20,032 --> 00:02:21,568
By Monday I will I will have it

51
00:02:22,848 --> 00:02:23,616
Alright let's pick up

52
00:02:23,872 --> 00:02:25,152
Where we left off

53
00:02:26,687 --> 00:02:28,479
So I'm open up visual studio again

54
00:02:28,991 --> 00:02:31,551
And I have my visual studio

55
00:02:31,807 --> 00:02:33,599
Set largely because of this project

56
00:02:33,855 --> 00:02:34,623
I switched it to this

57
00:02:34,879 --> 00:02:36,671
I have mine set in the options

58
00:02:37,439 --> 00:02:38,463
There's a thing called

59
00:02:38,719 --> 00:02:39,231
Startup

60
00:02:39,487 --> 00:02:40,512
And under environment

61
00:02:41,024 --> 00:02:46,656
And what it says here at startup you can pick what you want to have happen I said it to load last load and solution and remember the solution

62
00:02:46,912 --> 00:02:47,680
When is the thing over here

63
00:02:47,936 --> 00:02:49,728
The holes all the product that you want to build

64
00:02:50,240 --> 00:02:51,264
In a particular go

65
00:02:52,032 --> 00:02:55,360
So I said it to that so that when I open it up we'll be right back where we

66
00:02:55,616 --> 00:02:56,128
Left off

67
00:02:56,639 --> 00:02:58,175
Here you are this is the code that we

68
00:02:58,687 --> 00:02:59,711
Saw yesterday

69
00:02:59,967 --> 00:03:02,015
And if you remember from yesterday basically what we learned

70
00:03:02,271 --> 00:03:02,783
Was

71
00:03:04,063 --> 00:03:05,343
That these things are called functions

72
00:03:05,855 --> 00:03:07,903
They have returns which are things they provide back

73
00:03:08,159 --> 00:03:08,927
The people who call them

74
00:03:09,695 --> 00:03:10,207
The call

75
00:03:10,463 --> 00:03:12,256
They have parameters but you think they take

76
00:03:12,512 --> 00:03:13,536
That are passed in

77
00:03:13,792 --> 00:03:15,072
And then I have a body which

78
00:03:15,584 --> 00:03:18,400
It has stuff in it and we haven't really learned how to put anything in it

79
00:03:18,656 --> 00:03:20,448
Other than just how to call function

80
00:03:20,704 --> 00:03:21,216
That's it

81
00:03:21,472 --> 00:03:24,032
And we also learned some of the windows minutiae

82
00:03:24,288 --> 00:03:27,360
The fact that this is the entry point where Windows starts your program

83
00:03:28,127 --> 00:03:30,943
And this is basically something that

84
00:03:31,199 --> 00:03:32,735
Takes the contents of a file

85
00:03:32,991 --> 00:03:35,295
And dumps it into your file so that you can import things

86
00:03:35,807 --> 00:03:38,623
That other people have written or things that you've written yourself

87
00:03:38,879 --> 00:03:40,415
Anyway that you find more convenient

88
00:03:40,927 --> 00:03:42,463
So that's what we did last time but

89
00:03:42,975 --> 00:03:45,536
We still have a lot to cover here because we haven't really gotten into the meat

90
00:03:46,048 --> 00:03:51,424
Of how you write C code and we haven't gotten to them into the meat of how to really write Windows code

91
00:03:52,192 --> 00:03:52,704
So

92
00:03:52,960 --> 00:03:55,520
I guess I probably will save a lot of the windows

93
00:03:55,776 --> 00:03:57,568
Stuff for Monday but I want you to leave C

94
00:03:57,824 --> 00:03:59,104
Some of that some of the things that

95
00:04:00,383 --> 00:04:00,895
All right

96
00:04:01,151 --> 00:04:07,295
So in this particular program as we stand now we sort of left off where we were calling this Outlook debug string

97
00:04:07,551 --> 00:04:08,063
A function

98
00:04:08,575 --> 00:04:13,695
And when I ran the program which you can do by hitting F5 or you can go in here to the

99
00:04:13,951 --> 00:04:14,463
Today

100
00:04:14,719 --> 00:04:15,743
Build start debugging

101
00:04:17,024 --> 00:04:18,814
It printed something out to the debug

102
00:04:19,838 --> 00:04:24,190
And this was a Windows function that did that we have no idea how it works we did not implement it

103
00:04:24,447 --> 00:04:26,750
I distinctly told you that if you call it

104
00:04:27,007 --> 00:04:27,519
It will work

105
00:04:27,774 --> 00:04:32,126
But there's a little piece at the end of it that we didn't cover unless you stayed for the Q&amp;A

106
00:04:32,639 --> 00:04:33,151
Last time

107
00:04:33,406 --> 00:04:34,174
And that is

108
00:04:34,687 --> 00:04:35,966
That a

109
00:04:36,223 --> 00:04:36,735
Is

110
00:04:36,990 --> 00:04:38,782
It's her dependent to the name of the function

111
00:04:39,038 --> 00:04:40,062
How to debug spring mix

112
00:04:40,319 --> 00:04:41,598
What does the a mean

113
00:04:42,622 --> 00:04:46,974
Well the answer to this which I will I will kind of go into the Morty town that was it

114
00:04:47,487 --> 00:04:49,535
Back in the day Windows only worked

115
00:04:49,790 --> 00:04:51,582
With standard ASCII string

116
00:04:52,095 --> 00:04:58,239
And I'm going to show you what a standard ask me string actually isn't that some people were suggesting in the Q&amp;A yesterday

117
00:04:58,495 --> 00:04:59,519
The aiq Stance

118
00:04:59,774 --> 00:05:00,286
Nancy

119
00:05:00,543 --> 00:05:02,334
As far as the windows nomenclature iskcon

120
00:05:02,591 --> 00:05:03,870
Actually be correct

121
00:05:04,127 --> 00:05:06,175
Dancing in a sphere basically

122
00:05:06,430 --> 00:05:07,710
Two sides of the same coin

123
00:05:07,966 --> 00:05:10,270
After use is the earlier version I believe

124
00:05:10,783 --> 00:05:12,062
But you can see

125
00:05:12,574 --> 00:05:13,598
If I actually searched

126
00:05:13,855 --> 00:05:14,367
You know what

127
00:05:15,391 --> 00:05:16,158
We've been using Chrome

128
00:05:16,927 --> 00:05:18,463
Let's stick with one bro

129
00:05:20,511 --> 00:05:21,278
So if you search

130
00:05:21,535 --> 00:05:22,302
For asking

131
00:05:22,559 --> 00:05:24,095
And it's spelled ASCII

132
00:05:24,607 --> 00:05:26,399
If you search for that on the

133
00:05:26,911 --> 00:05:27,935
On the internet

134
00:05:28,190 --> 00:05:32,286
You will get something that looks like this and it's basically a description

135
00:05:32,543 --> 00:05:36,639
Of a way to encode the letters that you would normally use

136
00:05:36,894 --> 00:05:38,430
In a Roman alphabet

137
00:05:38,942 --> 00:05:39,710
In order to

138
00:05:39,966 --> 00:05:43,038
In a way that you can represent them with numbers

139
00:05:43,295 --> 00:05:44,319
And so here's a little

140
00:05:44,574 --> 00:05:46,110
You know primitive ASCII chart

141
00:05:46,367 --> 00:05:48,158
If someone has made and attach the Wikipedia page

142
00:05:48,927 --> 00:05:53,535
And basically what these things show you is they show you how numbers correspond

143
00:05:53,790 --> 00:05:54,302
Two letters

144
00:05:54,559 --> 00:05:55,838
It's a standard scheme

145
00:05:56,350 --> 00:06:02,495
It shows you how that works and that's not particularly easy to read ASCII table so I'm going to try and look for an easier one to read hear this

146
00:06:03,007 --> 00:06:03,519
Looks pretty good

147
00:06:04,286 --> 00:06:07,102
So here you go you can see here it says ASCII value

148
00:06:07,358 --> 00:06:08,894
And one of them and I don't know if I can

149
00:06:09,151 --> 00:06:10,175
Blow this up a little bit

150
00:06:11,199 --> 00:06:11,711
Can I make it

151
00:06:11,966 --> 00:06:12,478
Any bigger

152
00:06:12,990 --> 00:06:13,502
Wow

153
00:06:13,759 --> 00:06:15,807
That's a browser science4you right there

154
00:06:16,062 --> 00:06:17,342
Not even know what just happened

155
00:06:18,622 --> 00:06:19,134
Let's see

156
00:06:19,391 --> 00:06:20,670
There we go that's what really

157
00:06:21,694 --> 00:06:22,206
Okay

158
00:06:22,463 --> 00:06:24,511
So if you take a look at this table you can now see

159
00:06:26,047 --> 00:06:28,350
That it's got a number a bunch of numbers down the side

160
00:06:28,607 --> 00:06:30,143
0 1 2 3 4 5

161
00:06:30,399 --> 00:06:33,983
And as it goes there all corresponding to at these early numbers

162
00:06:34,238 --> 00:06:36,030
Some fairly esoteric stuff

163
00:06:36,286 --> 00:06:42,174
Like the backspace key you know things that that probably would be Escape key but as you get up

164
00:06:42,430 --> 00:06:47,038
Into the higher numbers you can see they start to translate the things that you would actually typed like a space

165
00:06:47,550 --> 00:06:48,574
Like parentheses

166
00:06:48,831 --> 00:06:49,598
The numbers

167
00:06:49,855 --> 00:06:50,622
There's

168
00:06:50,879 --> 00:06:52,927
The weather is here and then the lower case letters

169
00:06:53,182 --> 00:06:55,998
And basically all this is is it's a way of saying

170
00:06:56,511 --> 00:06:57,023
Well

171
00:06:57,535 --> 00:06:58,559
In a computer

172
00:06:58,814 --> 00:07:01,118
The only thing we can really deal with his numbers

173
00:07:01,375 --> 00:07:04,702
And you kind of see that as we go through the series everything is always numbers

174
00:07:04,959 --> 00:07:08,286
And you basically always have to boil everything down to members and so

175
00:07:08,543 --> 00:07:09,567
Early on

176
00:07:09,822 --> 00:07:15,454
They had to figure out a way to represent human-readable text because that's something if you just want to open all the time

177
00:07:15,711 --> 00:07:19,295
Better figure out how to represent that using numbers so they did the logical thing

178
00:07:19,807 --> 00:07:20,831
Which was to start

179
00:07:21,086 --> 00:07:26,974
Laying out what is almost a cipher if you will a way of translating numbers to letters

180
00:07:27,742 --> 00:07:28,254
Stop

181
00:07:29,278 --> 00:07:31,070
I'm going to do something in the divider now

182
00:07:31,326 --> 00:07:32,606
That lets you see

183
00:07:32,862 --> 00:07:34,399
How this actually works

184
00:07:34,911 --> 00:07:39,774
And it will uncover a lot of stuff that I'm going to teach you over the course of the neck

185
00:07:40,031 --> 00:07:42,334
Hour and so it's a pretty good introduction

186
00:07:42,591 --> 00:07:43,870
And when we are done with it all

187
00:07:44,639 --> 00:07:47,454
You will finally see why the a has to be there

188
00:07:47,711 --> 00:07:49,247
Because I will type back in

189
00:07:49,502 --> 00:07:52,062
To why there's an a instead of just making it look

190
00:07:52,574 --> 00:07:55,902
Like that which is what we tried to do original and if you remember just to as a refresher

191
00:07:56,158 --> 00:07:57,438
If we compile it like that

192
00:07:57,694 --> 00:07:59,230
We were getting an error

193
00:07:59,487 --> 00:08:00,766
The error was

194
00:08:01,023 --> 00:08:02,559
Cannot convert parameter 1

195
00:08:03,071 --> 00:08:05,887
From Cox care to LPCwstr

196
00:08:06,654 --> 00:08:08,190
We don't have any idea what that means

197
00:08:08,702 --> 00:08:09,726
So we will

198
00:08:11,262 --> 00:08:11,774
So

199
00:08:12,031 --> 00:08:13,567
I am going to do something

200
00:08:14,079 --> 00:08:14,591
The first thing

201
00:08:14,846 --> 00:08:16,126
In fact that we have done in the whole series

202
00:08:16,382 --> 00:08:17,150
It involves

203
00:08:17,406 --> 00:08:17,918
The debugger

204
00:08:18,430 --> 00:08:19,454
Actually butter

205
00:08:19,711 --> 00:08:21,247
We were running our code

206
00:08:21,502 --> 00:08:22,526
In the debugger

207
00:08:22,783 --> 00:08:24,062
And what that actually means is that in

208
00:08:24,319 --> 00:08:27,391
Instead of loading it as an excuse to build away windows are normally loaded

209
00:08:27,646 --> 00:08:30,206
We're actually sort of loading our code

210
00:08:30,463 --> 00:08:30,975
To run it

211
00:08:31,487 --> 00:08:33,534
Under start of the offices

212
00:08:34,047 --> 00:08:36,606
Of a tool that is designed to help us find

213
00:08:36,863 --> 00:08:37,375
Problems with

214
00:08:37,886 --> 00:08:42,238
And that is the bugger that's built into Visual Studio that is why I'm hitting start debugging

215
00:08:43,006 --> 00:08:43,774
To start to bugging

216
00:08:44,543 --> 00:08:45,311
Instead of

217
00:08:45,567 --> 00:08:46,078
Saying something

218
00:08:46,335 --> 00:08:46,846
Run

219
00:08:47,615 --> 00:08:53,759
And what this allows us to do is when we run things under the departure instead of RR code just running willy-nilly and doing

220
00:08:54,014 --> 00:08:55,807
Whatever it's going to do it allows us to

221
00:08:56,318 --> 00:08:57,342
Inspect

222
00:08:57,855 --> 00:08:58,623
How to program runs

223
00:08:58,879 --> 00:08:59,390
And watch

224
00:08:59,647 --> 00:09:00,158
How it works

225
00:09:00,414 --> 00:09:00,926
So that we can

226
00:09:01,182 --> 00:09:04,766
Figure out what it's doing wrong since you can imagine once you get into fairly complicated

227
00:09:05,023 --> 00:09:05,534
Scenarios

228
00:09:06,047 --> 00:09:07,326
It could be pretty difficult

229
00:09:07,582 --> 00:09:10,142
To figure out what's happening in a complex program

230
00:09:10,399 --> 00:09:13,471
And all you see when you try to run it is that it doesn't work

231
00:09:13,726 --> 00:09:14,750
Will you need more information

232
00:09:15,774 --> 00:09:16,798
So what I'm going to do

233
00:09:17,054 --> 00:09:18,590
Is that something called a break

234
00:09:19,615 --> 00:09:20,639
And what a breakpoint is

235
00:09:20,894 --> 00:09:23,966
Is it something that says I want you to run the program

236
00:09:24,479 --> 00:09:26,527
Until you hit this line of code

237
00:09:27,038 --> 00:09:29,598
And when you get this line of code I want you to stop

238
00:09:30,110 --> 00:09:32,158
And I want you to freeze the state of the program

239
00:09:32,414 --> 00:09:33,438
All of its memory

240
00:09:33,695 --> 00:09:37,535
All of the register the CPU say everything about the program

241
00:09:37,791 --> 00:09:39,839
I want to freeze so I can look at it

242
00:09:42,910 --> 00:09:43,678
Milk it

243
00:09:43,934 --> 00:09:44,702
Okay

244
00:09:45,982 --> 00:09:48,030
The way you do that is by hitting F9

245
00:09:48,287 --> 00:09:51,870
And it hits a breakpoint wherever the the carrot is the

246
00:09:52,894 --> 00:09:54,174
Things that you would type

247
00:09:54,687 --> 00:09:57,759
Or you can click kind of over here you can see I can

248
00:09:58,014 --> 00:09:58,526
Can I put this thing

249
00:09:59,038 --> 00:10:02,110
And I put the Little Red Orb next to a line that has a break

250
00:10:02,366 --> 00:10:03,646
That is one way

251
00:10:04,158 --> 00:10:08,254
I'm sending a break point and it's a way we'll use for now we'll learn some other ways to separate

252
00:10:09,023 --> 00:10:09,534
In the future

253
00:10:10,302 --> 00:10:13,375
If I now do at 5 to start the bugging you will note

254
00:10:14,399 --> 00:10:16,958
Okay you won't know anything until I put the AC back in because of course

255
00:10:18,495 --> 00:10:22,078
Once I remove a terror and we start running program you will note

256
00:10:22,335 --> 00:10:27,711
That there's a little yellow arrow and if you can see that I'm extremely little arrow that comes up

257
00:10:27,966 --> 00:10:34,110
Over the line that says basically this is where the program stopped so it's exactly what I want it to it went to the

258
00:10:34,366 --> 00:10:36,414
I set the breakpoint on and it stopped

259
00:10:37,438 --> 00:10:37,950
Now

260
00:10:38,206 --> 00:10:38,718
I'm going to

261
00:10:38,975 --> 00:10:40,510
Close these windows over here

262
00:10:40,767 --> 00:10:44,607
And the reason that I'm going to close them is because I don't know which of them will come up

263
00:10:44,863 --> 00:10:46,143
By default for you

264
00:10:46,399 --> 00:10:49,471
And so I want to show you how to get some of these windows back

265
00:10:49,726 --> 00:10:54,334
In case you were sitting there at home trying to follow along and going where are those windows

266
00:10:55,102 --> 00:10:57,918
So there's a couple ways to get Windows in Visual Studio

267
00:10:58,431 --> 00:10:59,711
You can go to view

268
00:10:59,966 --> 00:11:02,783
And you can see that there's a bunch of Windows that you could open for me

269
00:11:03,038 --> 00:11:03,550
Here

270
00:11:04,831 --> 00:11:08,671
I believe they no longer put the debug windows in there I think

271
00:11:09,438 --> 00:11:10,206
They put them in here yet

272
00:11:10,719 --> 00:11:11,487
So there's two places

273
00:11:11,999 --> 00:11:15,582
There's ones that are in here under View and then there's ones that are under debug under windows

274
00:11:16,350 --> 00:11:19,678
And the ones that were too concerned with Robert of bugging you're obviously the ones that are in debug

275
00:11:20,191 --> 00:11:22,495
And the one that I want in particular

276
00:11:22,750 --> 00:11:24,286
Is something called watch

277
00:11:25,054 --> 00:11:26,078
Now what watch is

278
00:11:26,335 --> 00:11:28,639
There's four of them because

279
00:11:29,407 --> 00:11:30,175
You know they

280
00:11:30,431 --> 00:11:33,247
Thought you needed multiple which you often do but didn't

281
00:11:33,503 --> 00:11:34,271
Give you

282
00:11:34,527 --> 00:11:36,319
Infinite of them I don't know why there's only

283
00:11:36,575 --> 00:11:38,110
Someone got

284
00:11:38,366 --> 00:11:42,974
The memo that they needed more watch windows and the only way they could forgot to do it was to make four of them

285
00:11:43,230 --> 00:11:44,254
So there are four of them

286
00:11:44,510 --> 00:11:45,790
We're just going to open one of them

287
00:11:46,047 --> 00:11:48,350
And now here is our watch window

288
00:11:48,606 --> 00:11:50,142
And what this watch window does

289
00:11:50,399 --> 00:11:52,191
Is it allows us to type in

290
00:11:52,447 --> 00:11:54,750
The name of something that we want to see

291
00:11:55,519 --> 00:11:56,030
In here

292
00:11:56,287 --> 00:11:56,798
And

293
00:11:57,054 --> 00:11:59,102
It will show us what the corresponding

294
00:11:59,359 --> 00:12:00,127
Value is

295
00:12:00,894 --> 00:12:02,174
So what I'm going to do

296
00:12:02,431 --> 00:12:04,223
If I'm just basically going to take this

297
00:12:04,479 --> 00:12:04,990
String

298
00:12:06,014 --> 00:12:06,526
For the moment

299
00:12:08,575 --> 00:12:10,623
I'm going to take this ring and paste it and imma see if it

300
00:12:12,414 --> 00:12:12,926
Nevermind

301
00:12:13,695 --> 00:12:17,278
So I'm going to have to hoist this out or something I didn't quite want to talk about yet

302
00:12:17,534 --> 00:12:19,070
But I will talk about it in one second

303
00:12:19,839 --> 00:12:20,350
Something I can

304
00:12:20,606 --> 00:12:21,375
Could do this without

305
00:12:24,702 --> 00:12:27,774
It's kind of a tricky thing to go in just the right order

306
00:12:29,311 --> 00:12:33,663
Alright so what I've done is I've captured the string out to a variable and I didn't want to talk about those yet

307
00:12:34,687 --> 00:12:35,198
Twitter

308
00:12:35,711 --> 00:12:41,855
What I'm going to do is I'm going to show you what the actual value of this string actually is

309
00:12:42,366 --> 00:12:46,206
When you look at it some of these things will be confusing to you because this is like several

310
00:12:46,719 --> 00:12:48,767
Steps in if you want understand everything that goes

311
00:12:49,534 --> 00:12:50,302
But

312
00:12:50,558 --> 00:12:54,142
What I wanted to show you was we can actually inspect the actual value

313
00:12:54,654 --> 00:12:55,423
Of this string

314
00:12:56,191 --> 00:12:58,495
Now even though we set our fonts big

315
00:12:58,750 --> 00:12:59,774
I feel like this font

316
00:13:00,030 --> 00:13:01,822
It's still too tiny and people were saying

317
00:13:02,078 --> 00:13:03,870
The fonts are too tiny to see so I'm going to break

318
00:13:04,639 --> 00:13:05,150
1 second

319
00:13:05,663 --> 00:13:07,966
And see if I can't make that a little bigger as well

320
00:13:08,479 --> 00:13:11,295
Because one of the things that the people are saying as they had trouble

321
00:13:11,807 --> 00:13:13,342
Same thing so watch windows

322
00:13:13,855 --> 00:13:15,134
Can I set that

323
00:13:15,390 --> 00:13:16,158
To the same font

324
00:13:16,671 --> 00:13:17,439
That we had

325
00:13:18,206 --> 00:13:18,975
Before

326
00:13:19,486 --> 00:13:21,278
Masters of alphabetical order

327
00:13:21,534 --> 00:13:23,582
Unleashed themselves Liberation mono

328
00:13:24,606 --> 00:13:25,375
11 point

329
00:13:30,239 --> 00:13:31,519
I have to restart the application

330
00:13:32,798 --> 00:13:33,310
Totally worked

331
00:13:33,567 --> 00:13:35,359
Okay hopefully that's a little bit easier to see

332
00:13:36,639 --> 00:13:38,687
So what I have done is I have asked

333
00:13:38,942 --> 00:13:39,966
The watch window

334
00:13:40,222 --> 00:13:42,270
In a way that will get a little more for my Ruth later

335
00:13:42,783 --> 00:13:43,551
To show me

336
00:13:43,807 --> 00:13:47,134
What this string looks like when you actually look at it numerical

337
00:13:47,903 --> 00:13:52,510
And you can see here what it's done is it gone through each individual character of the string

338
00:13:53,023 --> 00:13:55,326
And it has shown me the actual number

339
00:13:55,839 --> 00:13:56,863
But it actually is music

340
00:13:57,119 --> 00:13:59,935
Cat 410-410-5115

341
00:14:00,447 --> 00:14:04,798
And if we go back to the little table there that I had out

342
00:14:05,054 --> 00:14:08,894
And you know I cannot tell between these 84 is the number we've got here

343
00:14:09,150 --> 00:14:12,734
And you can see 84 corresponds to capital T and hey guess what

344
00:14:12,990 --> 00:14:14,526
That is exactly the first letter

345
00:14:14,783 --> 00:14:15,551
That we wanted

346
00:14:16,062 --> 00:14:17,855
So these things these strings

347
00:14:18,366 --> 00:14:19,902
When you define them and see

348
00:14:20,158 --> 00:14:22,718
What is actually doing the compiler will take

349
00:14:22,975 --> 00:14:23,999
What you have typed

350
00:14:24,254 --> 00:14:25,278
Inside the quotes

351
00:14:25,534 --> 00:14:30,399
It is actually going to go through and eat it if it'll character will be translated into the proper

352
00:14:30,654 --> 00:14:33,982
ASCII value that represents that particular

353
00:14:34,239 --> 00:14:34,750
Character

354
00:14:35,774 --> 00:14:36,286
Now

355
00:14:36,543 --> 00:14:42,431
That's all well and good but up until the end we get to to something right here that's a little wonky

356
00:14:42,687 --> 00:14:43,455
Backslash in

357
00:14:43,966 --> 00:14:46,783
Now why is there a backslash in and you'll note

358
00:14:47,038 --> 00:14:47,550
If I

359
00:14:47,807 --> 00:14:51,134
Fight in a leftist program run to completion when we look at this line

360
00:14:51,390 --> 00:14:53,182
There was no backslash in it

361
00:14:53,438 --> 00:14:57,534
So what's going on there why don't we see a backslash and everything else got print

362
00:14:58,302 --> 00:14:59,582
But not the backslash end

363
00:15:00,095 --> 00:15:00,606
Well

364
00:15:00,863 --> 00:15:04,447
The reason for that is because backslash and is actually a special code

365
00:15:04,958 --> 00:15:06,750
And if we go look at

366
00:15:07,006 --> 00:15:09,822
The string all the way down to where the backslash end

367
00:15:10,078 --> 00:15:10,590
Actually

368
00:15:10,846 --> 00:15:11,358
Curse

369
00:15:11,615 --> 00:15:12,383
So you can see here

370
00:15:12,639 --> 00:15:14,431
We got printed.

371
00:15:14,687 --> 00:15:16,479
Which is the end of it there but then there's a 10

372
00:15:16,990 --> 00:15:22,110
There's no backsplash in even in after the compilers done with it it doesn't have a backsplash in either

373
00:15:22,366 --> 00:15:25,438
So it's not just a print out that doesn't have it back session what happened

374
00:15:25,951 --> 00:15:27,999
What you can see now that I've I told you

375
00:15:28,254 --> 00:15:30,047
But these are a sneaky code

376
00:15:30,815 --> 00:15:34,143
What you should have been able to do if you want to jump the gun at home

377
00:15:34,654 --> 00:15:36,958
Is you can go look at the table and figure out what that is

378
00:15:37,215 --> 00:15:39,519
So let's go do that if we go here too

379
00:15:39,774 --> 00:15:40,543
10

380
00:15:40,798 --> 00:15:41,822
You will see

381
00:15:42,078 --> 00:15:42,590
That it is

382
00:15:44,894 --> 00:15:45,406
Right there

383
00:15:45,663 --> 00:15:46,942
Data link Escape

384
00:15:47,966 --> 00:15:48,478
Which

385
00:15:48,735 --> 00:15:49,759
Honestly is

386
00:15:50,270 --> 00:15:52,574
Not what I would have called it I would have called it

387
00:15:52,831 --> 00:15:53,342
Put carriage return

388
00:15:53,855 --> 00:15:54,623
15 but I guess there's

389
00:15:55,134 --> 00:15:56,670
Crl you know what

390
00:15:58,975 --> 00:16:00,767
I'm going to have to call weird on that

391
00:16:01,023 --> 00:16:01,791
Now that I think about it

392
00:16:02,302 --> 00:16:03,838
That is not what I would have expected

393
00:16:05,886 --> 00:16:07,678
This is a mystery ladies and gentlemen

394
00:16:08,191 --> 00:16:09,726
Why has it inserted that character

395
00:16:10,750 --> 00:16:12,286
I have absolutely no idea why I did that

396
00:16:12,543 --> 00:16:14,591
I would have I would have expected

397
00:16:14,846 --> 00:16:16,126
What I was expecting that

398
00:16:17,150 --> 00:16:18,942
I would have expected it to insert

399
00:16:19,711 --> 00:16:21,503
This character and this character actual

400
00:16:22,527 --> 00:16:23,551
But it did not do that

401
00:16:23,807 --> 00:16:24,575
Instead in

402
00:16:25,342 --> 00:16:25,854
Even for the best

403
00:16:26,366 --> 00:16:27,646
Even though it is a backslash

404
00:16:28,158 --> 00:16:29,182
I am I am

405
00:16:29,951 --> 00:16:32,510
What's the word I'm I'm thoroughly confused

406
00:16:33,023 --> 00:16:33,534
By what HS

407
00:16:34,302 --> 00:16:37,886
And I'll be honest with you I have absolutely no idea why it would do that that does not make sense

408
00:16:39,167 --> 00:16:41,215
I'm going to try I am actually going to

409
00:16:41,471 --> 00:16:42,750
Switch temporarily

410
00:16:43,006 --> 00:16:46,846
Into debugging mode for real so I can see what exactly is going on here

411
00:16:47,102 --> 00:16:49,150
Been a long time since I've ever actually looked

412
00:16:49,663 --> 00:16:50,174
At what happens

413
00:16:50,942 --> 00:16:51,711
When you do some of these

414
00:16:52,479 --> 00:16:53,247
So I'm going to

415
00:16:55,038 --> 00:16:55,550
Check out these cars

416
00:16:56,062 --> 00:16:57,598
So what these lawyer to do

417
00:16:58,110 --> 00:16:59,903
If you are not confused by them as I just

418
00:17:00,671 --> 00:17:02,206
Is when you insert a backslash

419
00:17:02,462 --> 00:17:03,742
In the middle of an actual string

420
00:17:03,999 --> 00:17:10,143
What does it takes the next character and uses it as a special code to Output characters that are not easy to type on a

421
00:17:10,398 --> 00:17:12,190
Keyboard that don't have a direct

422
00:17:12,702 --> 00:17:13,214
Assertive

423
00:17:13,471 --> 00:17:14,494
What's the word for it

424
00:17:19,615 --> 00:17:20,638
That is a problem right there

425
00:17:21,663 --> 00:17:22,174
So

426
00:17:23,199 --> 00:17:23,711
This

427
00:17:24,222 --> 00:17:25,246
Tripped me up something fierce

428
00:17:25,502 --> 00:17:27,294
I was looking at the Octo okay

429
00:17:28,318 --> 00:17:28,830
Q

430
00:17:29,086 --> 00:17:34,974
I thought I was going to have to start the very second stream of the series with like I have no idea how to program which would be very unfortunate

431
00:17:35,487 --> 00:17:39,839
Play Saturn's office table is I didn't bother looking at the order so we have decimal hexadecimal and octal

432
00:17:40,095 --> 00:17:42,654
What they've done is even coated the numbers in different bases

433
00:17:43,166 --> 00:17:44,958
So let's ignore these right here

434
00:17:45,214 --> 00:17:51,358
I guess I was just doing it instinctively correctly but then when I scroll over here I switch to reading the aqua calm because like like me

435
00:17:51,615 --> 00:17:55,711
We said before we lined up to correctly with 84 I didn't read 124

436
00:17:56,222 --> 00:17:56,990
Yeah I don't know

437
00:17:57,247 --> 00:17:59,038
Show me this table is trying to be helpful

438
00:17:59,295 --> 00:18:01,086
But including them in different encoding

439
00:18:01,343 --> 00:18:03,134
So this is decimal which is base 10

440
00:18:03,391 --> 00:18:06,207
The kind that we're normally used to reading it's all I really wanted to talk about

441
00:18:06,462 --> 00:18:12,095
We do want to talk about Paxil hexadecimal we probably won't talk about. Too much about what's a little later

442
00:18:12,351 --> 00:18:14,911
But since it came up because I got confused

443
00:18:15,166 --> 00:18:19,774
I will briefly say that it is a simple way of encoding numbers a little more concisely

444
00:18:20,030 --> 00:18:22,335
By making it through this base 16 instead of base 10

445
00:18:22,590 --> 00:18:25,662
A little bit more about what that means you can completely ignore it for now

446
00:18:25,919 --> 00:18:29,247
It was just a trip me up cuz I start looking off till which is base 8

447
00:18:29,502 --> 00:18:34,878
And you can see that it Go 0 1 2 3 4 5 6 7 instead of using 8 it goes right to 10

448
00:18:35,134 --> 00:18:36,926
Right face ate so you don't expect

449
00:18:37,951 --> 00:18:38,974
Alright let's ignore that

450
00:18:39,487 --> 00:18:41,791
Thankfully it did what I would have expected

451
00:18:42,047 --> 00:18:45,375
What I thought it was going to originally witches insert one line fee

452
00:18:45,631 --> 00:18:47,679
So if we look at the number here its 10

453
00:18:48,191 --> 00:18:49,982
And untan it is line fee

454
00:18:51,262 --> 00:18:52,030
Just what I would have expected

455
00:18:52,542 --> 00:18:55,358
Okay so let me continue to explain what I was going to explain

456
00:18:56,126 --> 00:18:58,174
That was that was a close one ladies and gentlemen

457
00:18:58,431 --> 00:19:00,735
I fight I know there's going to be a lot of debugging on this

458
00:19:00,990 --> 00:19:02,270
Honest honest program

459
00:19:02,527 --> 00:19:04,318
But I was hoping to not have it happen

460
00:19:04,575 --> 00:19:06,879
Just to insert Escape codes

461
00:19:08,671 --> 00:19:09,439
So anyway

462
00:19:09,694 --> 00:19:15,838
These Escape codes are basically there to put things in that we wouldn't be able to type directly and the reason that we can't type them directly is the

463
00:19:16,095 --> 00:19:18,143
Because what I was trying to do when I originally typed this

464
00:19:18,911 --> 00:19:19,679
Is in fact

465
00:19:19,934 --> 00:19:23,774
You know I can even give you a quick little demo here let's say I was going to Output to line

466
00:19:24,287 --> 00:19:25,310
So I wanted to Output

467
00:19:25,567 --> 00:19:27,615
This line this is going to be Line 1

468
00:19:30,174 --> 00:19:31,711
And this is where I feel I'm 0

469
00:19:32,479 --> 00:19:34,015
And I want to see these two lines

470
00:19:34,270 --> 00:19:36,062
It's right if I were to run that

471
00:19:37,598 --> 00:19:38,878
You can see well

472
00:19:39,391 --> 00:19:39,903
Try it again

473
00:19:41,439 --> 00:19:42,462
If I were to run that

474
00:19:42,974 --> 00:19:45,534
You do not actually see line breaks

475
00:19:45,790 --> 00:19:51,423
You just see the word line 0 and the word line one but then it stops and there's no line break in between them

476
00:19:51,934 --> 00:19:58,078
And the reason for that is because the debug output actually doesn't assume that the thing that you're out putting is supposed to be it

477
00:19:58,335 --> 00:20:02,174
You might want to put multiple things on the same line that come from different

478
00:20:02,431 --> 00:20:03,199
Cost of a function

479
00:20:03,711 --> 00:20:07,807
So what actually does here is it requires us to pass it

480
00:20:08,318 --> 00:20:10,110
Something that indicates that should be a new line

481
00:20:10,366 --> 00:20:11,646
When we actually won new line

482
00:20:11,903 --> 00:20:16,510
And so that is what the backslash and is it just been searched the character that would normally be inserted

483
00:20:17,022 --> 00:20:19,070
If you were hit return how you may ask

484
00:20:19,326 --> 00:20:19,838
Hit return

485
00:20:20,351 --> 00:20:22,911
Right why is put the return in there cuz I can type return

486
00:20:23,166 --> 00:20:26,494
Well if I try to build that you get an error which is newline in constant

487
00:20:26,750 --> 00:20:31,103
And the reason that you get that error is because he actually does not allow you to use

488
00:20:31,358 --> 00:20:33,150
A return character in a string

489
00:20:33,663 --> 00:20:39,807
String is all have to be on one line or if they're not one line they have to be escaped in it in a special way and you can't

490
00:20:40,063 --> 00:20:41,599
Never actually in bed the return character in them

491
00:20:45,182 --> 00:20:46,719
It's just not something that the syntax allows

492
00:20:47,487 --> 00:20:48,767
So what you actually have to do

493
00:20:49,278 --> 00:20:50,558
Is you actually have to use

494
00:20:51,070 --> 00:20:52,862
Decode for it and those are called Escape codes

495
00:20:53,631 --> 00:20:55,167
The backslash doesn't know you may ask

496
00:20:55,423 --> 00:20:59,262
How do you print out a backslash because I maybe wanted to do something like print out

497
00:20:59,519 --> 00:21:00,287
Something like this

498
00:21:00,542 --> 00:21:03,614
Which is like a line 0 / line one or something

499
00:21:04,126 --> 00:21:05,663
That's what I want to print out

500
00:21:07,199 --> 00:21:11,038
What you can see it's actually giving me a warning unrecognized character escape sequence

501
00:21:11,295 --> 00:21:16,672
Because what it does anytime it seems the backslash is the compiler tries to read the next character like I said

502
00:21:16,928 --> 00:21:20,256
To turn that into one of these at the characters from the table

503
00:21:20,511 --> 00:21:24,351
And since it cannot do that with L because that is not something that's easy to find

504
00:21:24,607 --> 00:21:28,192
She does not define backslash L2 actually map to any App Protector

505
00:21:28,448 --> 00:21:30,496
It gives us a warning and said I don't know what I'm supposed to do with

506
00:21:31,008 --> 00:21:32,544
So when we actually run that

507
00:21:32,799 --> 00:21:38,687
You'll notice that it just gets rid of it I mean get rid of the backslash entirely cuz it did not know what it should do with it

508
00:21:39,200 --> 00:21:40,736
So if I wanted to put an actual backslash

509
00:21:40,991 --> 00:21:41,759
You just put your backsplash

510
00:21:42,271 --> 00:21:44,576
So you could always actually get a backslash in there if you want to

511
00:21:44,832 --> 00:21:47,136
It's just you have to take two of them because it's going to look at the next one

512
00:21:47,392 --> 00:21:49,951
I got to do a scapegoat and so two of them is how you tell it no really

513
00:21:50,208 --> 00:21:50,720
I want it back

514
00:21:51,488 --> 00:21:52,000
All right

515
00:21:52,256 --> 00:21:53,536
Back to our story

516
00:21:54,816 --> 00:21:55,327
So

517
00:21:55,839 --> 00:21:57,375
Wendy went in here

518
00:21:57,632 --> 00:21:58,912
And I was looking at this

519
00:21:59,423 --> 00:22:00,447
Went down to the end of it

520
00:22:00,703 --> 00:22:06,336
And we looking there's a 10 at the end it freaked me out for a minute because I looked at the table expecting to find 9 feet I did not find it

521
00:22:06,847 --> 00:22:08,639
But it turns out I was looking at the wrong column so

522
00:22:08,895 --> 00:22:09,407
Happiness

523
00:22:10,432 --> 00:22:16,576
Basically that is just one of the characters that refers to a new line and remember I saying is I said so

524
00:22:16,832 --> 00:22:21,184
Insert one of these cuz I didn't quite remember which was which is not something that I ever deal with

525
00:22:21,440 --> 00:22:21,951
Daily basis

526
00:22:22,463 --> 00:22:24,511
But basically there's two characters

527
00:22:24,768 --> 00:22:26,559
Which sort of have to do with

528
00:22:27,071 --> 00:22:28,351
Advancing lines

529
00:22:28,607 --> 00:22:29,119
If you will

530
00:22:29,632 --> 00:22:30,655
There's 10

531
00:22:31,167 --> 00:22:32,447
Which is new line

532
00:22:32,960 --> 00:22:36,288
Which is a Line Feed and there's 12 which is formed

533
00:22:37,056 --> 00:22:39,872
And there's also 13 miscarriage

534
00:22:40,384 --> 00:22:41,152
Write this all of these

535
00:22:41,920 --> 00:22:44,736
Basically there's different conventions for how things are formatted

536
00:22:45,503 --> 00:22:46,015
And

537
00:22:46,271 --> 00:22:47,551
13 + 10

538
00:22:47,807 --> 00:22:50,624
Or actually used differently by different operating

539
00:22:51,135 --> 00:22:53,695
On Windows the convention is normally

540
00:22:53,951 --> 00:22:56,000
But you need a 10 and a 13

541
00:22:56,256 --> 00:22:59,072
To actually create a new line

542
00:22:59,584 --> 00:23:03,423
One of them goes to the next line and one of them goes back to the beginning of the line

543
00:23:03,935 --> 00:23:05,215
So basically 10

544
00:23:05,471 --> 00:23:10,336
Certificate printing out lines moves you down to the next line but leaves the cursor where it was if you will

545
00:23:10,847 --> 00:23:15,455
And then 13 actually goes back to the beginning of the line I believe that is the order that they would actually go in

546
00:23:15,711 --> 00:23:18,271
And so the way that you encode the other one

547
00:23:19,296 --> 00:23:20,832
Is actually backslash bar

548
00:23:23,392 --> 00:23:23,903
From this again

549
00:23:25,695 --> 00:23:26,719
Please run my program

550
00:23:28,768 --> 00:23:29,279
Hello

551
00:23:32,096 --> 00:23:32,607
Some reason

552
00:23:36,192 --> 00:23:37,728
Why have you locked me out of my program

553
00:23:39,263 --> 00:23:39,775
Well

554
00:23:40,031 --> 00:23:43,615
I suppose visual Studios going to crash really off and on us we might as well get used to it

555
00:23:45,920 --> 00:23:47,200
Little dialogue is act

556
00:23:47,968 --> 00:23:52,320
Don't know if I believe you that there is a modal-dialog active does anyone see a little dialogue

557
00:23:52,832 --> 00:23:53,344
I do not

558
00:23:54,880 --> 00:23:55,392
Yes

559
00:23:55,647 --> 00:23:56,159
So

560
00:23:56,672 --> 00:24:01,279
Basically since we're in a circumstance where we can't actually rescue

561
00:24:01,536 --> 00:24:04,607
Visual studio for a cell if it's time to push it another thing on the stock

562
00:24:04,864 --> 00:24:06,912
Which is what to do if Visual Studio

563
00:24:07,167 --> 00:24:08,191
Totally freezes or hangs on

564
00:24:08,703 --> 00:24:09,471
And let me be honest

565
00:24:09,728 --> 00:24:10,751
Bissell happened to all the time

566
00:24:11,519 --> 00:24:12,543
It is not exactly reliable

567
00:24:13,824 --> 00:24:17,152
I mentioned control shift Escape last time we got that task manager

568
00:24:17,407 --> 00:24:19,455
Ctrl shift Escape is your friend

569
00:24:19,711 --> 00:24:20,735
Control shift Escape

570
00:24:20,991 --> 00:24:23,551
Allows you to bring up this thing called prophecies

571
00:24:23,807 --> 00:24:25,087
In which you can find

572
00:24:25,344 --> 00:24:29,696
When you when you want to kill something you can find the name of the thing that's running

573
00:24:29,951 --> 00:24:31,488
And force it to shut down

574
00:24:31,743 --> 00:24:32,767
Which is exactly what we wanted

575
00:24:33,536 --> 00:24:37,888
So if I go in here and I look I believe they called Evans now yes

576
00:24:38,400 --> 00:24:41,984
Devon is the name of Visual Studio when it starts up

577
00:24:42,240 --> 00:24:43,776
Microsoft Visual Studio 2008

578
00:24:44,544 --> 00:24:48,640
If Deb and is misbehaving even right click on it and you can click end process tree

579
00:24:49,152 --> 00:24:49,920
And if you do that

580
00:24:50,432 --> 00:24:51,200
It will die

581
00:24:51,455 --> 00:24:52,479
Which is exactly what we needed

582
00:24:54,016 --> 00:24:54,528
So

583
00:24:54,784 --> 00:24:56,832
But you can just restart it and hopefully you didn't lose

584
00:24:57,087 --> 00:24:58,111
Much in the way of work

585
00:24:59,135 --> 00:25:02,463
I believe we should be able to open our project and things should be saved

586
00:25:02,720 --> 00:25:03,488
And they are so that's all good

587
00:25:03,743 --> 00:25:06,559
And now I can get back to lesson but that is a very good thing to remember

588
00:25:06,816 --> 00:25:07,839
You'll have to do it a lot

589
00:25:08,096 --> 00:25:08,864
Control shift Escape

590
00:25:09,119 --> 00:25:09,887
Brings it up

591
00:25:10,144 --> 00:25:13,728
And then you can find them in here and you just hit end process tree

592
00:25:13,983 --> 00:25:14,495
And you can restart it

593
00:25:14,751 --> 00:25:15,263
So that's good

594
00:25:15,519 --> 00:25:16,543
If anything pops up on you

595
00:25:17,056 --> 00:25:17,567
It's a good estate

596
00:25:17,824 --> 00:25:18,592
You don't have to beat them

597
00:25:19,872 --> 00:25:21,920
Escape code

598
00:25:22,688 --> 00:25:25,504
Just go to Waze embedding things in the strings that you couldn't normally

599
00:25:25,759 --> 00:25:28,831
Only type and only thing that I was trying to say here just completing us

600
00:25:29,087 --> 00:25:30,624
Is it both of these two things

601
00:25:31,647 --> 00:25:33,695
The backslash are in the backsplash

602
00:25:33,951 --> 00:25:34,975
Are both there

603
00:25:35,231 --> 00:25:38,559
To allow you to encode your 13 and 10

604
00:25:38,816 --> 00:25:41,375
Which are things that you need for new lines and the convention is

605
00:25:41,632 --> 00:25:43,168
The backs are black / n

606
00:25:43,423 --> 00:25:44,703
Which is 1310

607
00:25:45,215 --> 00:25:50,335
That is the convention on Windows for how you end the line of the debug output doesn't require it

608
00:25:50,592 --> 00:25:54,176
But for example if we were going to save these to a text file that you're going to open

609
00:25:54,432 --> 00:25:55,455
It would require these

610
00:25:55,711 --> 00:25:58,016
It's called crlf sometimes

611
00:25:58,271 --> 00:26:01,855
Taxes are backslash type in C is 1310 and ASCII code

612
00:26:02,112 --> 00:26:02,880
Etc etc

613
00:26:03,392 --> 00:26:05,951
But if you were on for example Unix

614
00:26:06,208 --> 00:26:06,720
Systems

615
00:26:06,976 --> 00:26:09,024
You don't put the backslash are

616
00:26:09,279 --> 00:26:12,096
The backslash are is actually not required on Unix systems

617
00:26:12,352 --> 00:26:14,656
They use just backslash into

618
00:26:14,912 --> 00:26:19,264
Actually do the whole go to the next line and return to the first character like you can almost imagine

619
00:26:19,519 --> 00:26:20,031
Like a typewriter

620
00:26:20,288 --> 00:26:22,079
So on Windows you did both of them

621
00:26:22,336 --> 00:26:26,943
That is one of the reasons if you've ever loaded a file in Notepad

622
00:26:27,455 --> 00:26:29,247
In windows that came from a Unix system

623
00:26:29,759 --> 00:26:31,807
All the lion feeds are gone and stuff like this

624
00:26:32,064 --> 00:26:35,648
That's because text files even though their format is pretty standard

625
00:26:35,903 --> 00:26:37,951
Text files actually do differ from platform

626
00:26:38,208 --> 00:26:38,720
Platform

627
00:26:41,791 --> 00:26:42,303
Okay

628
00:26:43,584 --> 00:26:48,448
So that's all minutiae but I wanted you to be a little comfortable with the fact that this is all numbers that really cuz it's going to lead into this artist

629
00:26:48,960 --> 00:26:49,471
Going to do

630
00:26:49,983 --> 00:26:51,263
I'm very happy to say

631
00:26:51,776 --> 00:26:52,799
We did not

632
00:26:53,056 --> 00:26:57,152
Hit a weird surprise with it with the backs at our backs I said that made me nervous for a minute

633
00:26:58,943 --> 00:26:59,967
So what I'm going to do now

634
00:27:00,223 --> 00:27:01,503
Is it going to move on to talking

635
00:27:01,759 --> 00:27:03,039
About this outfit ebooks

636
00:27:03,296 --> 00:27:08,160
And why that was actually a and then I'm going to leave this Miss careful when you're the thing we used to

637
00:27:08,415 --> 00:27:11,743
Inspect because that will ducktail nicely into exactly what I wanted to talk about after that

638
00:27:12,000 --> 00:27:13,279
Which was variables and

639
00:27:13,536 --> 00:27:14,048
And data

640
00:27:14,304 --> 00:27:15,072
Okay

641
00:27:16,352 --> 00:27:18,912
If we go back to our situation here

642
00:27:19,935 --> 00:27:20,959
When I

643
00:27:21,215 --> 00:27:22,239
Call this apathy boxer

644
00:27:23,008 --> 00:27:29,152
It is not actually going to send some pretty string to anybody right the string is just conceptual for our bed

645
00:27:29,663 --> 00:27:31,968
We saw what it was internally it's all of these numbers

646
00:27:32,480 --> 00:27:34,016
So what's getting passed in some sense

647
00:27:34,528 --> 00:27:35,807
To the thing that's being called

648
00:27:36,064 --> 00:27:36,576
I'm looking

649
00:27:36,832 --> 00:27:37,344
You know

650
00:27:37,855 --> 00:27:40,160
How and why things are passed

651
00:27:43,231 --> 00:27:48,864
But what is actually passed is a series of numbers and no series of numbers that we seen are all based

652
00:27:49,119 --> 00:27:50,143
ASCII table

653
00:27:50,655 --> 00:27:51,679
That table

654
00:27:51,935 --> 00:27:52,959
Is what tells

655
00:27:53,215 --> 00:27:54,239
The computer essentially

656
00:27:54,496 --> 00:27:55,776
All of the code that was written

657
00:27:56,544 --> 00:28:01,663
What's conforming to that table so when the when the code in Windows goes to actually do stuff

658
00:28:01,920 --> 00:28:04,991
With the things that were passed in it's going to translate each number

659
00:28:05,503 --> 00:28:07,295
Ask if it was from that ASCII table

660
00:28:07,807 --> 00:28:08,319
And

661
00:28:08,576 --> 00:28:09,599
What happened was

662
00:28:09,855 --> 00:28:12,160
Way back when everything in windows with a ski

663
00:28:12,415 --> 00:28:13,439
Back in the 16-bit days

664
00:28:14,208 --> 00:28:14,720
But then

665
00:28:15,488 --> 00:28:17,792
Eventually they found because Windows internet

666
00:28:18,048 --> 00:28:18,816
Product product

667
00:28:19,071 --> 00:28:20,863
And the international computing

668
00:28:21,119 --> 00:28:23,167
Need to start being able to represent things

669
00:28:23,680 --> 00:28:28,032
Like languages like say Chinese for example which maybe has more glyphs

670
00:28:28,288 --> 00:28:29,311
Then can fit

671
00:28:29,567 --> 00:28:30,847
In a standard and coding

672
00:28:31,104 --> 00:28:35,456
I bet you know that you would have like you know a simple encoding like asking you may have

673
00:28:35,711 --> 00:28:37,759
Tens of thousands of characters potentially that you need

674
00:28:38,016 --> 00:28:40,320
Coats they develop something called the Unicode

675
00:28:40,576 --> 00:28:42,112
Which is a different standard

676
00:28:42,367 --> 00:28:48,511
For how you encode characters and it supports a lot more things than just that simple ASCII table if you look at the Accutane

677
00:28:49,023 --> 00:28:52,095
That we were looking at here you can see it only goes up to 100

678
00:28:52,352 --> 00:28:52,864
47

679
00:28:53,119 --> 00:28:59,263
I think other people are saying that but the age you're actually first to answer which is another standard I guess you know first

680
00:28:59,519 --> 00:29:01,824
Dancing put a standard which is a c I believe + the dish

681
00:29:02,592 --> 00:29:04,640
I think perhaps hard in there I'm not actually sure

682
00:29:05,920 --> 00:29:07,200
Weather VA Center Assyrians

683
00:29:08,480 --> 00:29:10,271
Totally relevant for any of the things we talked about

684
00:29:10,784 --> 00:29:11,296
Point being

685
00:29:11,551 --> 00:29:16,927
They think Laguna code so they could start to address markets where people want to be able to save text

686
00:29:17,183 --> 00:29:19,488
In their native languages which makes a lot of sense

687
00:29:19,743 --> 00:29:21,023
But in order to do that

688
00:29:21,279 --> 00:29:22,559
You could no longer

689
00:29:22,816 --> 00:29:26,655
Have Windows working entirely in these asking Kota string so what they did

690
00:29:26,912 --> 00:29:27,423
Where's the X

691
00:29:27,680 --> 00:29:28,192
Spend it

692
00:29:28,448 --> 00:29:29,216
To using

693
00:29:29,983 --> 00:29:30,751
And encoding

694
00:29:31,008 --> 00:29:32,544
They can support a lot more characters

695
00:29:32,799 --> 00:29:33,823
Emily did that

696
00:29:34,079 --> 00:29:38,943
They changed all of the apis and windows to accept these new character strings they were called

697
00:29:39,200 --> 00:29:40,223
Wide characters

698
00:29:40,736 --> 00:29:42,784
Encoding was called utf-16

699
00:29:44,064 --> 00:29:45,344
We can actually search for that

700
00:29:47,903 --> 00:29:48,415
My sizing

701
00:29:49,695 --> 00:29:54,048
Definitely paid off her so you can take a look at this here if you want more information on it because Wikipedia page

702
00:29:54,304 --> 00:29:55,840
Utf-16 was the encoding

703
00:29:56,352 --> 00:30:02,496
That they decided to use her windows and at that time I don't even know if utf-8 existed in might have

704
00:30:02,751 --> 00:30:05,311
Don't quite remember exactly Plan 9 the operating system

705
00:30:05,567 --> 00:30:07,872
I believe those are the guys who invented utf-8

706
00:30:08,127 --> 00:30:12,223
And switch to it in there some reasons why it's a lot better than you utf-16 but

707
00:30:12,480 --> 00:30:15,296
At the time when does the side to go with utf-16 which meant

708
00:30:15,551 --> 00:30:17,343
That all of the characters were encoded

709
00:30:17,599 --> 00:30:18,111
Differently

710
00:30:18,624 --> 00:30:19,135
So

711
00:30:19,647 --> 00:30:20,415
If I was to

712
00:30:20,672 --> 00:30:24,000
Call the actual output debug string function

713
00:30:24,768 --> 00:30:25,279
That was

714
00:30:25,536 --> 00:30:27,072
For those why characters

715
00:30:27,584 --> 00:30:29,375
If I was to actually compiled it

716
00:30:29,632 --> 00:30:32,448
Trying to pass a string that's encoded in that format

717
00:30:32,960 --> 00:30:35,776
The C compiler since the compiler knows what type of string this is

718
00:30:36,031 --> 00:30:38,591
It actually tells us right off the bat

719
00:30:38,847 --> 00:30:39,615
But hey guess what

720
00:30:39,872 --> 00:30:42,943
You cannot actually pass this kind of string

721
00:30:43,200 --> 00:30:45,759
To this particular function because it's encoded in ASCII

722
00:30:46,016 --> 00:30:48,320
And I wanted something coated in those wide characters

723
00:30:49,087 --> 00:30:50,111
And that's all well and good

724
00:30:50,367 --> 00:30:50,879
But

725
00:30:51,135 --> 00:30:53,440
You can see there's a little bit more to the puzzle than just that it's

726
00:30:53,695 --> 00:30:54,719
It did just that simplex

727
00:30:55,488 --> 00:30:58,559
Which essential noticed that it doesn't actually complain about Office Depot string

728
00:30:59,071 --> 00:31:00,863
I called out 50 bucks

729
00:31:01,375 --> 00:31:04,447
Complaint about a w

730
00:31:04,960 --> 00:31:06,240
And that's a little confusing

731
00:31:06,496 --> 00:31:07,008
So

732
00:31:07,263 --> 00:31:08,031
What's going on there

733
00:31:08,544 --> 00:31:12,640
Well the answer is because when they actually made that transition and they went

734
00:31:12,895 --> 00:31:14,175
Doing the

735
00:31:14,432 --> 00:31:16,223
The asking Coatings to be doing the UTSA

736
00:31:16,480 --> 00:31:16,991
16 coatings

737
00:31:17,248 --> 00:31:19,039
They didn't want to break all the code

738
00:31:19,296 --> 00:31:20,319
It was already written

739
00:31:20,576 --> 00:31:22,112
To the old API

740
00:31:22,367 --> 00:31:23,647
They wanted you to be able to

741
00:31:23,903 --> 00:31:25,183
Call the same function

742
00:31:25,695 --> 00:31:28,255
And they want you to be able to just convert the strings

743
00:31:28,511 --> 00:31:29,279
And go from there

744
00:31:29,791 --> 00:31:30,559
So I don't

745
00:31:30,816 --> 00:31:34,400
Really know what the rationale is necessarily behind that

746
00:31:34,655 --> 00:31:40,288
I guess it's just so you would have an easier time putting your code I guess you know you just replace the string and you wouldn't have to replace all the calls

747
00:31:40,544 --> 00:31:42,592
With new calls but have different names

748
00:31:42,847 --> 00:31:45,152
I'm not sure but anyway what they decided to do

749
00:31:45,663 --> 00:31:48,991
What they decided to actually use what's called a macro

750
00:31:49,503 --> 00:31:51,807
In a macro is a way of basically

751
00:31:52,064 --> 00:31:52,832
Leasing strings

752
00:31:53,087 --> 00:31:57,951
NC no I'm actually going to show you that macro even though you don't quite have to understand it completely yet

753
00:31:58,976 --> 00:31:59,488
Maxi shirt

754
00:31:59,743 --> 00:32:00,255
To hear

755
00:32:00,768 --> 00:32:02,304
You can see this little block of code here

756
00:32:02,816 --> 00:32:04,096
What does block of code does

757
00:32:04,352 --> 00:32:05,120
Is it basically

758
00:32:05,375 --> 00:32:08,703
Says well if I'm compiling for unicode

759
00:32:08,960 --> 00:32:14,079
Then I'm going to make out with d-box during the word in all the code me out 50 bucks and W but if

760
00:32:14,336 --> 00:32:16,895
I am not in Unicode I'm going to make output debug string

761
00:32:17,407 --> 00:32:18,431
Convert to Output debug

762
00:32:18,943 --> 00:32:19,455
Hey

763
00:32:20,480 --> 00:32:23,296
Hey was the thing that I call directly

764
00:32:24,064 --> 00:32:25,087
So what's going on here

765
00:32:25,344 --> 00:32:26,880
Well what's going on is it

766
00:32:27,135 --> 00:32:29,695
When you actually create a project in Visual Studio

767
00:32:29,951 --> 00:32:31,231
It's actually set

768
00:32:31,488 --> 00:32:33,536
To which one of those things you wanted to use

769
00:32:33,791 --> 00:32:34,559
Unicode

770
00:32:34,816 --> 00:32:35,327
Or ask

771
00:32:35,839 --> 00:32:39,935
And that macro when windows that it gets inserted in here that macro

772
00:32:40,192 --> 00:32:42,240
Watch me do some stuff that changes

773
00:32:42,496 --> 00:32:47,615
Which output debug string we will call whether or places this without book deduction a or Apple

774
00:32:47,872 --> 00:32:49,408
Ww.w

775
00:32:49,663 --> 00:32:55,296
The default for a project when you create it is actually to use utf-16 to use the wide character

776
00:32:56,064 --> 00:33:01,696
So what did was when I did that thing remember yesterday I did that thing I said new project

777
00:33:01,951 --> 00:33:05,023
When it created that product for me it's set all the settings

778
00:33:05,536 --> 00:33:08,096
Which will go into a little bit but not nothing too much

779
00:33:08,352 --> 00:33:10,656
It said all the settings for our project

780
00:33:10,912 --> 00:33:12,448
To basically be unicode

781
00:33:13,215 --> 00:33:15,519
So we end up calling effectively this

782
00:33:15,776 --> 00:33:17,567
When we just type output Street Buxton.

783
00:33:17,824 --> 00:33:20,640
That's what it's actually doing when it goes to compile and of course that's

784
00:33:21,152 --> 00:33:22,432
Not going to accept the type of

785
00:33:22,688 --> 00:33:23,200
When we want

786
00:33:23,455 --> 00:33:27,807
So what I did yesterday when I kind of slightly said oh I can fix that but I'm not to talk about exactly why yet

787
00:33:28,576 --> 00:33:34,463
I just changed it to output device because I don't actually need to go change all the settings of my project to be unicode

788
00:33:34,976 --> 00:33:38,560
Because I know that all is going to do is do that aw switch

789
00:33:39,584 --> 00:33:43,168
So what I've done is I just done the aw switch manual in the code and now every

790
00:33:43,423 --> 00:33:44,960
Everything works right now I can

791
00:33:45,215 --> 00:33:46,239
I can call my function

792
00:33:47,008 --> 00:33:49,312
And I can have it print out what I wanted

793
00:33:50,592 --> 00:33:54,432
So hopefully that makes a little bit of sense to you I realize there's a lot of information there to absorb

794
00:33:54,688 --> 00:33:57,248
I will take a quick milk at but then we're going to die

795
00:33:57,759 --> 00:34:00,064
Right in two more stuff hopefully this is not too much

796
00:34:00,576 --> 00:34:01,344
Or too fast

797
00:34:04,672 --> 00:34:05,183
Okay

798
00:34:06,463 --> 00:34:06,975
So

799
00:34:07,231 --> 00:34:08,768
Let's talk about what happened to you

800
00:34:12,608 --> 00:34:14,655
Well obviously when you are programming

801
00:34:15,936 --> 00:34:21,056
I said some things I was like oh yeah you know we call the function and we did that in here was the function and

802
00:34:21,311 --> 00:34:26,688
Call Dad and then I typed a string in here and it kind of passed it but I only talk about how you pass things or

803
00:34:26,943 --> 00:34:32,320
Even like what these things were when we kind of went over what they meant I didn't really say what they actually were

804
00:34:33,088 --> 00:34:35,392
And so what I want to talk about now is variables

805
00:34:35,903 --> 00:34:36,672
I think

806
00:34:36,927 --> 00:34:38,208
John Lewis Joe King

807
00:34:38,463 --> 00:34:42,559
In Twitter the other day I think he asked her on the Twister even said what's a variable

808
00:34:42,815 --> 00:34:46,399
And I I was I was joking then like we're not going to get to that for a while and I was I was

809
00:34:47,168 --> 00:34:47,936
Telling the truth

810
00:34:48,192 --> 00:34:50,239
We didn't cover it yesterday but we're going to cover today

811
00:34:51,264 --> 00:34:53,056
So basically the way computers work

812
00:34:53,824 --> 00:34:54,336
Is

813
00:34:54,592 --> 00:34:59,711
You are essentially always having the CPU the central processing unit the thing that you buy from Intel most

814
00:34:59,967 --> 00:35:00,735
The time or sometimes

815
00:35:01,248 --> 00:35:02,271
Arm these days I'm

816
00:35:03,552 --> 00:35:04,832
I don't know exactly who's going to stop it

817
00:35:05,599 --> 00:35:08,672
Apple or somebody like this Fab Sauron who fabarm chips

818
00:35:09,184 --> 00:35:11,231
You know when your Android phone or iOS device

819
00:35:11,744 --> 00:35:14,048
That's Central Processing Unit the thing that actually does the work

820
00:35:14,304 --> 00:35:16,351
Inside the computer that thing

821
00:35:16,864 --> 00:35:18,400
Is basically just an engine

822
00:35:18,655 --> 00:35:19,679
Manipulating

823
00:35:19,936 --> 00:35:21,472
Numerical values that's what it does

824
00:35:21,728 --> 00:35:27,871
It sits around all day and operates on numerical values and it has a gigantic store called memory

825
00:35:28,128 --> 00:35:29,152
Any of these numeric values

826
00:35:30,175 --> 00:35:35,552
It pulls them inside to the processor operates on them things called registers that puts them back out to memory

827
00:35:35,807 --> 00:35:36,576
And that is all it does

828
00:35:36,831 --> 00:35:42,975
And we're going to talk a lot about that model and that way of thinking about things exactly what the CPU actually is doing or at least

829
00:35:43,231 --> 00:35:45,279
Mostly what the CPU is doing an exceptional level

830
00:35:45,791 --> 00:35:49,375
As a good way to think about most of what you're doing when you're programming but for the moment

831
00:35:49,887 --> 00:35:51,423
The only reason I want to point that out

832
00:35:51,679 --> 00:35:52,192
Is because

833
00:35:52,704 --> 00:35:55,776
If we want actually have the CPU do stuff for us

834
00:35:56,032 --> 00:35:58,592
We need to start thinking about those numerical values

835
00:35:58,847 --> 00:36:01,920
Cuz all we're going to be doing everything that we type in code is just

836
00:36:02,431 --> 00:36:07,039
Coming up with basically ways of telling different ways of telling the CPU to manipulate

837
00:36:07,295 --> 00:36:08,063
Those numbers

838
00:36:08,320 --> 00:36:11,135
In some way that we want to produce an outcome

839
00:36:12,416 --> 00:36:12,928
So

840
00:36:13,952 --> 00:36:14,720
NC

841
00:36:14,976 --> 00:36:18,304
What we can do is weekend at anytime ask for some

842
00:36:18,559 --> 00:36:19,072
Space

843
00:36:19,327 --> 00:36:22,911
For a new one of these number so I talked about it

844
00:36:23,168 --> 00:36:24,704
Which I said was basically number value

845
00:36:25,215 --> 00:36:29,567
I can basically aspirin and which is some number value I can give it a name

846
00:36:30,079 --> 00:36:31,103
So I'm going to call this

847
00:36:31,360 --> 00:36:31,872
Integer

848
00:36:32,639 --> 00:36:34,431
And then I can basically say

849
00:36:35,199 --> 00:36:35,711
Semicolon

850
00:36:36,224 --> 00:36:37,760
And that is a stand-alone

851
00:36:38,527 --> 00:36:41,343
Statement that will basically say give me space

852
00:36:41,599 --> 00:36:43,647
For a single numeric value

853
00:36:44,159 --> 00:36:49,791
And I convinced start doing things with it that look a lot like math right I can say integer equals 5

854
00:36:50,304 --> 00:36:51,327
And that will make

855
00:36:51,583 --> 00:36:54,655
This name you know that I reserve here I can that will make that people

856
00:36:54,911 --> 00:36:56,959
I can say integer

857
00:36:57,215 --> 00:36:57,728
Equals

858
00:36:57,983 --> 00:36:58,496
5 +

859
00:36:59,007 --> 00:37:01,311
5 and it will actually do the math year 5

860
00:37:02,079 --> 00:37:02,592
That sort of thing

861
00:37:03,103 --> 00:37:05,919
I can even do integer equals integer

862
00:37:06,431 --> 00:37:06,943
+ 5

863
00:37:07,199 --> 00:37:08,223
If I wanted to

864
00:37:08,480 --> 00:37:13,088
And I can so I can refer to it in here and the reason that I bring that one up before I go through and talk about

865
00:37:13,344 --> 00:37:14,112
Please no more detail

866
00:37:14,367 --> 00:37:16,415
Is because one of the interesting things that happened to me

867
00:37:16,672 --> 00:37:18,463
I learn to program before I learn to Bath

868
00:37:18,719 --> 00:37:21,791
I was 7 when I learn to program and I haven't really learned math yet

869
00:37:22,047 --> 00:37:25,887
And I shouldn't say math because I was I knew like addition and stuff like that

870
00:37:26,143 --> 00:37:27,423
But I hadn't learned

871
00:37:27,679 --> 00:37:28,447
Algebra

872
00:37:28,960 --> 00:37:31,007
We didn't have algebra until I was in like

873
00:37:31,519 --> 00:37:35,103
Sixth grade or fifth grade or something 5th grade maybe I don't even know

874
00:37:35,360 --> 00:37:36,640
But it was very very long

875
00:37:36,896 --> 00:37:40,992
It was years after I learn to program that anyone ever taught me algebra

876
00:37:41,760 --> 00:37:42,528
And so

877
00:37:42,784 --> 00:37:43,807
I grew up thinking

878
00:37:44,320 --> 00:37:46,112
The equals means assignment

879
00:37:46,623 --> 00:37:47,647
Because encoding

880
00:37:47,903 --> 00:37:48,672
What equals mean

881
00:37:48,927 --> 00:37:50,463
Is it mean at least in C

882
00:37:50,719 --> 00:37:54,047
Is equals means takes a value that's on the right hand side

883
00:37:54,815 --> 00:37:57,631
And make the thing on the left hand side become equal to that value

884
00:37:58,143 --> 00:37:58,911
No that's not

885
00:37:59,168 --> 00:38:00,704
What it means in math

886
00:38:03,775 --> 00:38:04,543
In math

887
00:38:04,800 --> 00:38:09,920
Equals music with balance it means that the two things on either side are equivalent to each other so you could never write

888
00:38:10,175 --> 00:38:10,943
The statement

889
00:38:11,199 --> 00:38:12,223
Is completely meaningless

890
00:38:12,992 --> 00:38:14,784
Integer equals integer + 5

891
00:38:15,039 --> 00:38:20,416
We all know that can't be true because if you were to actually do if you know algebra if anybody out there know some algebra

892
00:38:20,672 --> 00:38:23,744
You know that I can subtract integer from both sides and you would get that

893
00:38:24,255 --> 00:38:28,864
And I'm sure there's some people out there who know a lot more math than I do I am not certainly math expert

894
00:38:29,119 --> 00:38:31,167
You probably know some kind of

895
00:38:31,423 --> 00:38:34,751
Algebra somewhere someone invented where 0 does equal five

896
00:38:35,007 --> 00:38:39,103
Anderson special things you can do in the sides of our other stuff like that but that you learned

897
00:38:39,615 --> 00:38:40,896
Certainly in 5th grade

898
00:38:41,152 --> 00:38:43,711
You could not have 0 equal to 5 that is not going to fly

899
00:38:44,480 --> 00:38:49,088
But it's okay in programming because equals doesn't mean math equals what it means is assignment

900
00:38:49,344 --> 00:38:50,624
It's basically a copy

901
00:38:50,880 --> 00:38:52,160
It means copy this

902
00:38:52,416 --> 00:38:53,184
Over to this

903
00:38:53,440 --> 00:38:55,744
So it doesn't matter what's on this side

904
00:38:56,000 --> 00:39:00,096
You can refer to it just fine and hear what it will do is it will use the value

905
00:39:00,351 --> 00:39:03,935
From right before that line so basically integer here

906
00:39:04,192 --> 00:39:10,079
Will just mean whatever integer was back up here so in this case the last thing I did is I I made it equal to 7

907
00:39:10,592 --> 00:39:11,872
Right I sent you a 7

908
00:39:12,128 --> 00:39:13,920
So this line will effectively read

909
00:39:14,175 --> 00:39:15,967
83 + 7 + 5 or 12

910
00:39:16,480 --> 00:39:17,503
That's all that's going to do

911
00:39:17,760 --> 00:39:18,784
No harm done

912
00:39:19,039 --> 00:39:21,344
And so let me tell you it was really

913
00:39:21,599 --> 00:39:22,623
Really hard

914
00:39:23,135 --> 00:39:27,231
For me to learn algebra it took a long time for me to learn algebra because I had

915
00:39:27,744 --> 00:39:28,256
No idea

916
00:39:28,512 --> 00:39:29,024
See what they were

917
00:39:29,536 --> 00:39:30,304
Talking about

918
00:39:30,559 --> 00:39:31,072
All

919
00:39:31,327 --> 00:39:33,119
When they would write this stuff up there

920
00:39:33,376 --> 00:39:34,400
They would write things

921
00:39:34,655 --> 00:39:36,703
We're supposed to solve a right you know

922
00:39:36,960 --> 00:39:38,751
You did right stuff like you know too

923
00:39:39,007 --> 00:39:40,543
2 *

924
00:39:41,056 --> 00:39:44,639
A equals you know

925
00:39:45,152 --> 00:39:46,688
You know a + 6

926
00:39:47,199 --> 00:39:47,711
Or something like

927
00:39:48,224 --> 00:39:50,528
They write that on the board and I do like

928
00:39:50,784 --> 00:39:52,320
What is administered

929
00:39:52,576 --> 00:39:55,391
Doesn't make any sense at all that's not you can't you can't even

930
00:39:55,903 --> 00:40:00,000
You should put to tighten 2x doesn't go on the side where you talking about single

931
00:40:00,255 --> 00:40:01,279
Single expression

932
00:40:01,536 --> 00:40:02,559
It was it was a mess

933
00:40:02,815 --> 00:40:05,887
But anyway fortunately eventually learned that there were two different equals in

934
00:40:06,400 --> 00:40:08,192
I'm not going to save the day so I can do math now

935
00:40:08,704 --> 00:40:09,216
I couldn't do it

936
00:40:09,472 --> 00:40:09,984
Back then

937
00:40:11,775 --> 00:40:15,359
So basically here are some lines that I'm going to talk about now so that we can

938
00:40:17,152 --> 00:40:17,664
Get a little bit

939
00:40:17,920 --> 00:40:18,432
Further in our

940
00:40:18,688 --> 00:40:20,480
Discussion here I am going to use

941
00:40:20,735 --> 00:40:21,503
That

942
00:40:22,016 --> 00:40:23,552
That's a procedure that I said before

943
00:40:23,807 --> 00:40:25,088
Where I'm going to set a breakpoint

944
00:40:25,344 --> 00:40:27,135
So we can see what this code actually does

945
00:40:27,391 --> 00:40:30,975
So this first line here like I said this is basically telling see that I want

946
00:40:31,231 --> 00:40:31,744
Space

947
00:40:32,000 --> 00:40:33,023
2

948
00:40:33,280 --> 00:40:34,560
To basely represented number

949
00:40:35,072 --> 00:40:40,704
And I'm going to use this watch window again I'm going to start now to talk about the watch with it for real and teach you how to use it

950
00:40:40,960 --> 00:40:43,007
Kind of gloss over before cuz I didn't want to get into it

951
00:40:44,543 --> 00:40:45,056
Anyway

952
00:40:45,568 --> 00:40:49,664
So in the Watchmen know what I can do is I can type the name of any of these things

953
00:40:50,175 --> 00:40:52,480
That I have reserved space for that happened to be

954
00:40:52,735 --> 00:40:54,527
Around where where I'm looking

955
00:40:54,784 --> 00:40:55,552
So integer

956
00:40:55,807 --> 00:40:56,831
I can just type it in

957
00:40:57,088 --> 00:40:59,903
And it will go figure out what the value of integer is

958
00:41:00,159 --> 00:41:02,207
At the time when the program has stopped

959
00:41:03,231 --> 00:41:09,375
So you can see here you have a integer equals 5 on this line but I've stopped on the line and the Wade the bug

960
00:41:09,632 --> 00:41:14,240
Honeyworks is it will not actually execute the line you stop on until I ask it to it

961
00:41:14,496 --> 00:41:15,519
Reese's before

962
00:41:15,775 --> 00:41:20,127
The execution of the line so if the yellow arrow is on the line that means it has not actually

963
00:41:20,384 --> 00:41:21,152
Did that line yet

964
00:41:21,664 --> 00:41:24,224
So what you will see and this is very important

965
00:41:24,480 --> 00:41:26,527
I want you to pick very close attention to this

966
00:41:27,295 --> 00:41:28,319
What you will see

967
00:41:28,576 --> 00:41:31,648
Is that there is a value in here that appears until we're in

968
00:41:31,903 --> 00:41:32,416
The program

969
00:41:34,208 --> 00:41:35,231
You can toggle back and forth

970
00:41:35,487 --> 00:41:37,023
Petrini's there's a there's a little bit of a

971
00:41:38,304 --> 00:41:39,327
It's little bit of a cat

972
00:41:39,583 --> 00:41:40,096
Been here the time

973
00:41:40,351 --> 00:41:41,375
Talk about perhaps later

974
00:41:41,632 --> 00:41:42,912
Maybe maybe not

975
00:41:43,679 --> 00:41:46,751
Freeway you will know that there's a value in here that appears nowhere in the program

976
00:41:47,519 --> 00:41:53,150
And the reason that there's a value there their prisoner in the program is because if I simply asked for space for something

977
00:41:54,175 --> 00:41:57,503
Then if I have never actually put something specific into it

978
00:41:58,014 --> 00:42:00,062
Then the actual contents of it

979
00:42:00,318 --> 00:42:01,599
Can be whatever they are

980
00:42:01,855 --> 00:42:05,695
There is no requirement for the compiler to do anything with that value

981
00:42:06,206 --> 00:42:07,487
Other than reserved space

982
00:42:07,742 --> 00:42:09,790
So it could literally at this point the program

983
00:42:10,047 --> 00:42:10,815
Be anything

984
00:42:11,583 --> 00:42:14,911
No that's not entirely true based on the population settings that are set up

985
00:42:15,166 --> 00:42:17,214
For this particular program is true

986
00:42:17,471 --> 00:42:19,775
In an actual shipping executable that you would ship

987
00:42:20,286 --> 00:42:21,310
It's not quite sure yet

988
00:42:21,567 --> 00:42:23,614
But I'm going to save why that why that's the case

989
00:42:23,871 --> 00:42:24,383
For a little bit later

990
00:42:24,894 --> 00:42:29,246
So anyway suffice to say the compiler could do anything at once with that value as long as it reserved space for us

991
00:42:29,503 --> 00:42:30,783
That's the only thing it's required to do

992
00:42:31,295 --> 00:42:34,367
And so it can be any value and it is any value

993
00:42:35,135 --> 00:42:35,647
Now

994
00:42:35,902 --> 00:42:37,182
When I actually

995
00:42:37,438 --> 00:42:38,974
Go through these lines

996
00:42:39,742 --> 00:42:45,630
It will actually start to obey the things that we asked for and actually put the values that we told to put into that

997
00:42:45,887 --> 00:42:50,239
That space now what you will notice is it stopped here I don't want to have to keep

998
00:42:50,494 --> 00:42:51,518
Setting a breakpoint

999
00:42:51,775 --> 00:42:54,079
You know I could celebrate point there and then run to it

1000
00:42:54,335 --> 00:42:59,454
Right so I could take a hit at 5 to continue running the program till the next breakpoint which is what it will do

1001
00:42:59,710 --> 00:43:04,318
And you can see that it is a Sci-Fi to it just like we asked and the watch window turns that

1002
00:43:04,574 --> 00:43:05,855
Read for you so you can see the

1003
00:43:06,110 --> 00:43:06,878
Change this the last

1004
00:43:07,646 --> 00:43:08,927
You actually

1005
00:43:09,438 --> 00:43:10,719
Look at the program

1006
00:43:11,487 --> 00:43:11,999
But

1007
00:43:12,510 --> 00:43:15,326
Since what you want to do into bugging very often

1008
00:43:15,583 --> 00:43:20,959
It's just go through the lines of code sequentially and see what they're doing while watching stuff in the Watchmen

1009
00:43:22,239 --> 00:43:27,358
You know Kim can actually shortcut that process by using step into

1010
00:43:27,614 --> 00:43:28,382
And step over

1011
00:43:28,894 --> 00:43:29,918
Are in the debug

1012
00:43:30,686 --> 00:43:33,759
She can see down here to step into and step over this also step out

1013
00:43:34,014 --> 00:43:35,550
We'll talk about what all those are in a second

1014
00:43:35,806 --> 00:43:38,622
But the one that we need right now is actually it will actually cost

1015
00:43:38,878 --> 00:43:39,646
You could easily

1016
00:43:39,902 --> 00:43:42,206
I'd only want right now is step over which is at 10

1017
00:43:42,719 --> 00:43:45,023
And what that says it says anytime I hit at 10

1018
00:43:45,534 --> 00:43:48,094
Do whatever is on the current line just do that

1019
00:43:48,606 --> 00:43:49,375
Nicosia

1020
00:43:49,630 --> 00:43:50,143
Right

1021
00:43:50,398 --> 00:43:51,422
Where were 7 now

1022
00:43:51,679 --> 00:43:53,215
Just like we wanted 5 + 2 is 7

1023
00:43:53,726 --> 00:43:58,335
And we've moved to next line but it did not run any further so it did not do this integer + 7 bit

1024
00:43:58,590 --> 00:44:00,638
Which is what we wanted now if I could have 10 again

1025
00:44:01,663 --> 00:44:04,735
You can see that is taken integer which was 7 and added 7 to it

1026
00:44:04,990 --> 00:44:07,038
Which became 14 which is exactly what we expect

1027
00:44:07,550 --> 00:44:08,063
Everything is half

1028
00:44:08,574 --> 00:44:10,366
Secure is simple math executing

1029
00:44:10,878 --> 00:44:11,391
MC

1030
00:44:11,902 --> 00:44:12,670
Very lovely

1031
00:44:13,695 --> 00:44:15,742
And we have now learned how to inspect the

1032
00:44:15,998 --> 00:44:16,510
Values

1033
00:44:17,023 --> 00:44:18,815
That the compiler is actually

1034
00:44:19,070 --> 00:44:21,630
Music about that the code is actually using when it run

1035
00:44:24,190 --> 00:44:25,471
Now I know this may sound strange

1036
00:44:27,007 --> 00:44:27,775
But actually

1037
00:44:28,030 --> 00:44:28,798
You will find

1038
00:44:29,054 --> 00:44:33,150
But there's not going to be a whole lot more to the math that we do

1039
00:44:33,407 --> 00:44:34,431
Then what you see right here

1040
00:44:34,686 --> 00:44:36,478
One of the interesting things about sea

1041
00:44:36,990 --> 00:44:41,342
Is it's a very low-level language which means there aren't tons and tons and tons of differ

1042
00:44:41,599 --> 00:44:44,159
Types you have to learn into the things you have to learn there's actually only

1043
00:44:44,414 --> 00:44:45,438
Very few things are dropped

1044
00:44:45,951 --> 00:44:46,463
And in fact

1045
00:44:46,719 --> 00:44:49,278
By the end of BB sessions will have touched on Moses

1046
00:44:50,047 --> 00:44:50,559
So

1047
00:44:50,815 --> 00:44:52,351
This is actually just a pretty

1048
00:44:52,606 --> 00:44:56,190
Yo this is not actually toy code in any in any particular way

1049
00:44:56,447 --> 00:45:02,079
You will see me when I'm actually go to the game I will be doing exactly this I will be doing an integer all the time

1050
00:45:02,335 --> 00:45:04,639
I will be doing math like this all the time and I won't

1051
00:45:04,894 --> 00:45:06,686
Assign 5 to Something in the sign

1052
00:45:06,943 --> 00:45:09,247
7th right away cuz it doesn't make very much sense

1053
00:45:09,503 --> 00:45:10,015
But

1054
00:45:10,271 --> 00:45:13,343
Basically this exact process is how we will be doing meth

1055
00:45:13,599 --> 00:45:14,623
Very much like this

1056
00:45:14,878 --> 00:45:15,391
On integers

1057
00:45:17,182 --> 00:45:18,206
So what I want to do now

1058
00:45:18,463 --> 00:45:20,255
Is just throw a couple other things

1059
00:45:20,766 --> 00:45:21,790
Before we

1060
00:45:22,047 --> 00:45:22,559
Before we go

1061
00:45:23,070 --> 00:45:24,862
Any further which is to sort of say

1062
00:45:26,143 --> 00:45:28,190
Has a little more meaning than just a number

1063
00:45:28,958 --> 00:45:29,982
There are in fact

1064
00:45:30,239 --> 00:45:31,007
Several different ways

1065
00:45:31,262 --> 00:45:32,286
I can say number

1066
00:45:32,543 --> 00:45:33,055
NC

1067
00:45:33,311 --> 00:45:34,335
I can say

1068
00:45:35,358 --> 00:45:35,871
Care

1069
00:45:36,639 --> 00:45:37,407
Which is something that is

1070
00:45:39,710 --> 00:45:40,734
I can say short

1071
00:45:40,990 --> 00:45:42,014
Which is something that is medium

1072
00:45:43,806 --> 00:45:44,574
Which is something that is large

1073
00:45:45,086 --> 00:45:48,159
Now there's also other kinds when we get to 64-bit programming but

1074
00:45:48,414 --> 00:45:50,974
At the moment rolling pretty bit so right now this is a see what we're looking at

1075
00:45:51,487 --> 00:45:53,278
I can also add some things to

1076
00:45:54,815 --> 00:45:55,327
Which

1077
00:45:57,887 --> 00:45:58,399
I will do

1078
00:46:01,726 --> 00:46:02,494
So we have

1079
00:46:02,751 --> 00:46:04,287
No a larger set

1080
00:46:05,054 --> 00:46:06,078
I'm going to

1081
00:46:06,335 --> 00:46:08,126
You at the end of these

1082
00:46:08,382 --> 00:46:08,894
So I can talk about this

1083
00:46:09,663 --> 00:46:10,175
And maybe

1084
00:46:10,431 --> 00:46:10,943
Assateague

1085
00:46:13,246 --> 00:46:13,759
Okay

1086
00:46:14,271 --> 00:46:14,783
So

1087
00:46:15,039 --> 00:46:18,623
Fixing what I've done is I've defined a bunch of these kind of variables just like the number I do

1088
00:46:18,878 --> 00:46:20,926
Fine before but I used a bunch of different keywords

1089
00:46:21,182 --> 00:46:21,695
When I did it

1090
00:46:22,206 --> 00:46:23,742
And so what do these different keyboards mean

1091
00:46:24,766 --> 00:46:25,278
So

1092
00:46:25,534 --> 00:46:26,815
Hopefully most of your

1093
00:46:27,070 --> 00:46:29,118
Somewhat familiar with binary but maybe you're not

1094
00:46:29,630 --> 00:46:30,911
So I will simply say

1095
00:46:31,166 --> 00:46:33,214
If you're not for me to fire you may want to go

1096
00:46:33,471 --> 00:46:36,543
Learn a little bit about it separately cuz I'm not going to cover it in detail

1097
00:46:37,311 --> 00:46:38,591
Basically computers

1098
00:46:39,103 --> 00:46:40,894
Always work in terms of bits

1099
00:46:41,150 --> 00:46:41,663
In a bit

1100
00:46:41,918 --> 00:46:43,454
It's a zero or

1101
00:46:43,710 --> 00:46:47,294
A1 it is the simplest possible thing you can pretty much do

1102
00:46:47,550 --> 00:46:49,086
It has two states

1103
00:46:49,342 --> 00:46:49,855
Basically is

1104
00:46:50,110 --> 00:46:51,134
Honored is off

1105
00:46:51,902 --> 00:46:55,486
An Indian in the actual computer in the actual see if you at selfies typically

1106
00:46:55,742 --> 00:46:56,255
Correspond

1107
00:46:56,510 --> 00:46:57,023
Actual

1108
00:46:57,534 --> 00:46:59,070
Electricity levels or things like this

1109
00:46:59,583 --> 00:47:01,375
Is actually a high-yellow or things like that

1110
00:47:01,887 --> 00:47:04,959
The basic computers are always operating on bits 0 and 1

1111
00:47:05,471 --> 00:47:06,494
And so what you like

1112
00:47:06,751 --> 00:47:07,519
Wonder

1113
00:47:07,775 --> 00:47:10,079
Is it computers always use your own one

1114
00:47:10,590 --> 00:47:15,710
How do they ever actually represent values like 10 or 30 or 60

1115
00:47:16,735 --> 00:47:18,015
Let alone 4 billion

1116
00:47:19,806 --> 00:47:24,158
The answer is you just start screaming that's together it's the same way that we represent things

1117
00:47:24,414 --> 00:47:24,927
Decimal

1118
00:47:25,182 --> 00:47:29,278
Intestinal we have you know 0 1 2 3 4 5 6 7 8 9

1119
00:47:29,534 --> 00:47:33,886
Those are the actual numerals we have and when we want to represent something higher than 9

1120
00:47:34,143 --> 00:47:35,679
We don't invent a new symbol

1121
00:47:35,934 --> 00:47:37,726
What we actually do is we just

1122
00:47:37,983 --> 00:47:38,751
Put A1

1123
00:47:39,262 --> 00:47:45,406
Further over right so we say oh okay I had 9 I want to go to 10 I don't put some other value

1124
00:47:45,663 --> 00:47:47,710
You in here right I don't start saying it's V

1125
00:47:47,967 --> 00:47:54,110
What I do instead is I put a one further and I go back to zero and I start over two three four five six seven eight nine and then

1126
00:47:54,367 --> 00:47:55,135
And if I wrap that

1127
00:47:55,391 --> 00:47:55,903
I go

1128
00:47:56,159 --> 00:47:58,463
What exact same thing happens in binary

1129
00:47:58,719 --> 00:48:00,255
If I want to represent

1130
00:48:00,510 --> 00:48:02,047
Say the number you know

1131
00:48:02,302 --> 00:48:03,070
3 in binary

1132
00:48:03,583 --> 00:48:04,095
Well

1133
00:48:04,351 --> 00:48:06,655
Basically if I have zero in binary

1134
00:48:06,911 --> 00:48:09,983
Right that is still zero if I have one in binary

1135
00:48:10,239 --> 00:48:12,798
That is still one but now if I want to go to 2

1136
00:48:13,054 --> 00:48:17,406
I can't put in a two because there is no to so what I have to do is put a 1 in the next lot

1137
00:48:17,663 --> 00:48:19,199
And start over at zero again

1138
00:48:19,454 --> 00:48:20,735
Right so now I'm at 10

1139
00:48:21,246 --> 00:48:23,550
10 in binary is actually 2

1140
00:48:23,806 --> 00:48:26,110
So if I wants three will I screw the next number

1141
00:48:26,367 --> 00:48:26,879
Which is

1142
00:48:27,135 --> 00:48:27,647
11

1143
00:48:27,902 --> 00:48:34,046
And that keeps going so if I were to go up again just would Raptor 0 just to grab 08.21 brenau it 100

1144
00:48:34,302 --> 00:48:35,070
100 binary

1145
00:48:35,583 --> 00:48:36,863
Obviously is

1146
00:48:37,119 --> 00:48:39,679
Sounds like a super huge number

1147
00:48:40,447 --> 00:48:41,727
But it is actually just for

1148
00:48:42,751 --> 00:48:43,263
So

1149
00:48:43,518 --> 00:48:45,054
There you go you can count in binary

1150
00:48:45,311 --> 00:48:46,079
01

1151
00:48:46,590 --> 00:48:47,103
2

1152
00:48:47,358 --> 00:48:47,871
3

1153
00:48:48,382 --> 00:48:48,894
4

1154
00:48:49,150 --> 00:48:49,663
5

1155
00:48:50,175 --> 00:48:50,687
Sex

1156
00:48:50,943 --> 00:48:51,455
7

1157
00:48:51,967 --> 00:48:52,479
8

1158
00:48:52,735 --> 00:48:53,247
Sunray

1159
00:48:54,271 --> 00:48:56,063
So what you will quickly learn

1160
00:48:56,831 --> 00:48:57,343
You can start doing this

1161
00:48:58,367 --> 00:49:04,510
Out to more detail it is you need a lot of ones and zeros to represent the numbers you might want to represent

1162
00:49:04,766 --> 00:49:05,278
Back in the program

1163
00:49:05,791 --> 00:49:08,606
So nobody ever for the most part

1164
00:49:09,375 --> 00:49:13,471
Writing language is anymore where you have fundamental data types

1165
00:49:13,726 --> 00:49:16,286
Such as the ones were talking about like ants

1166
00:49:16,798 --> 00:49:20,382
Where they have fundamental types that you're going to start talking about better one bit

1167
00:49:20,894 --> 00:49:21,918
It's very very rare

1168
00:49:22,175 --> 00:49:25,247
Most of the time one but things are aggregated up into bigger things

1169
00:49:25,759 --> 00:49:28,318
The smallest thing that people typically talk about these days

1170
00:49:28,574 --> 00:49:29,342
8-bit

1171
00:49:29,599 --> 00:49:30,111
Together

1172
00:49:30,878 --> 00:49:32,159
And that is what care is

1173
00:49:32,414 --> 00:49:34,719
Chair is basically 8-bit

1174
00:49:34,974 --> 00:49:35,487
So this is

1175
00:49:37,023 --> 00:49:38,559
Now if you think about what 8 Bits me

1176
00:49:39,070 --> 00:49:39,583
Right

1177
00:49:39,838 --> 00:49:40,862
It basically means

1178
00:49:41,119 --> 00:49:42,655
That we have something that looks like this

1179
00:49:43,166 --> 00:49:44,958
1 2 3 4 5 6 7 8

1180
00:49:45,471 --> 00:49:45,983
Brett

1181
00:49:46,239 --> 00:49:47,007
That looks like that

1182
00:49:47,518 --> 00:49:49,822
So it'll take you awhile if you're going to turn up

1183
00:49:50,079 --> 00:49:52,894
To see what the maximum number we can actually represent is here

1184
00:49:53,150 --> 00:49:57,759
But there's a short way to do it relatively quick way to do it if you have a calculator handy

1185
00:49:58,271 --> 00:49:59,295
And the answer is

1186
00:49:59,550 --> 00:50:03,134
If you were going to do something in decimal for example if if if you

1187
00:50:03,391 --> 00:50:05,695
If I said you were going to have three decimal digits

1188
00:50:05,951 --> 00:50:10,302
That's right so you know one decimal digit would be 0 through 9 so I could represent 10 things that way they say

1189
00:50:11,070 --> 00:50:14,143
Hey if I was going 2-0 through 99 that's

1190
00:50:14,398 --> 00:50:15,422
100 things essentially

1191
00:50:15,934 --> 00:50:19,262
And if I have three decimal digits are 0 through 999 which is a thousandth

1192
00:50:20,030 --> 00:50:21,822
What is the rule there

1193
00:50:22,079 --> 00:50:22,847
That we can use

1194
00:50:23,103 --> 00:50:25,918
To quickly determine for some number of decimals

1195
00:50:26,175 --> 00:50:26,943
How many there are

1196
00:50:27,199 --> 00:50:28,990
Well it's always the bass

1197
00:50:29,246 --> 00:50:31,806
Which was 10 right base 10 is the decimal system

1198
00:50:32,318 --> 00:50:35,391
It's always that raised to the power of the number of digits

1199
00:50:35,646 --> 00:50:41,534
So for example if I said three digits right and I said there were thousand things that represent wealth at 10 to 3rd power 10 x 10

1200
00:50:41,791 --> 00:50:42,303
10 * 10

1201
00:50:43,070 --> 00:50:45,375
For you to see why that is it's because

1202
00:50:45,630 --> 00:50:47,422
Basically if I do zero you know

1203
00:50:47,679 --> 00:50:50,494
I do my 0 1 2 3 4 5 thing

1204
00:50:50,751 --> 00:50:54,847
And I got up to 9 there were 10 things I could enumerate by counting to 9

1205
00:50:55,358 --> 00:50:57,406
If I then add another numeral

1206
00:50:57,663 --> 00:50:59,199
Right if I add to numerals

1207
00:50:59,454 --> 00:51:00,478
I was such a thing I had

1208
00:51:00,735 --> 00:51:03,550
10 possibilities here and 10 possibilities here

1209
00:51:03,806 --> 00:51:06,878
And I can pick any combination of those right I can I can have

1210
00:51:07,135 --> 00:51:11,231
La3 here and a six-year whatever one here and I here

1211
00:51:11,487 --> 00:51:12,510
So they multiply

1212
00:51:12,766 --> 00:51:16,606
Adding another decimal digit * 10 all the things you could have done

1213
00:51:16,862 --> 00:51:17,630
When you start it

1214
00:51:18,655 --> 00:51:19,167
And so

1215
00:51:19,422 --> 00:51:20,958
Basically raising something to the power

1216
00:51:21,215 --> 00:51:25,567
Carrot is a symbol used for that when you were typing because when we can't actually put a superstar

1217
00:51:26,335 --> 00:51:27,615
You can't even put a little superscript

1218
00:51:27,871 --> 00:51:28,639
Three that's how we do

1219
00:51:29,407 --> 00:51:31,454
That is a sin tax usually for doing power in

1220
00:51:31,967 --> 00:51:32,479
When you're typing an ass

1221
00:51:34,782 --> 00:51:35,295
Not concede

1222
00:51:36,574 --> 00:51:38,366
So anyway when you actually do that

1223
00:51:38,623 --> 00:51:41,951
With with eight things you would get to

1224
00:51:42,206 --> 00:51:44,254
To the 8th power that tells you what the max

1225
00:51:44,510 --> 00:51:47,070
And all you can do is now I happen to know

1226
00:51:47,327 --> 00:51:51,935
What do the 8th power is I don't blame you if you don't but if you program in low-level code

1227
00:51:52,190 --> 00:51:53,982
After awhile you will very quickly

1228
00:51:54,239 --> 00:51:57,567
Start to learn what the powers of 2 are and you can start to recite them

1229
00:51:57,822 --> 00:52:03,966
1 2 4 8 16 32 64 128 256 512 1024

1230
00:52:04,222 --> 00:52:04,735
48

1231
00:52:04,990 --> 00:52:06,782
4096 8192

1232
00:52:07,039 --> 00:52:07,551
And

1233
00:52:07,806 --> 00:52:10,110
At some point you're just like you'll stop

1234
00:52:10,367 --> 00:52:10,879
But

1235
00:52:11,135 --> 00:52:16,511
For the most part you've learned a lot of them just because they come up so often so I know that to the IS 250

1236
00:52:17,278 --> 00:52:19,583
So basically with 8 Bits you can represent

1237
00:52:19,838 --> 00:52:20,862
256

1238
00:52:21,375 --> 00:52:22,655
Different values

1239
00:52:24,702 --> 00:52:25,983
Now I want to say

1240
00:52:26,239 --> 00:52:28,286
Very clearly but that does not necessarily mean

1241
00:52:28,798 --> 00:52:29,822
That those values are 0-2

1242
00:52:30,335 --> 00:52:30,847
55

1243
00:52:31,358 --> 00:52:31,871
Right

1244
00:52:32,126 --> 00:52:32,894
Is that what that means

1245
00:52:33,407 --> 00:52:34,943
The answer is no it doesn't necessarily mean that

1246
00:52:35,199 --> 00:52:38,014
And the reason is because of this guy down here now you'll notice

1247
00:52:38,271 --> 00:52:42,367
I had two different things that both use care one was care and one was Care on the sign

1248
00:52:42,623 --> 00:52:43,391
What do those mean

1249
00:52:43,902 --> 00:52:45,182
Well what those mean is

1250
00:52:45,695 --> 00:52:46,719
Whether or not

1251
00:52:47,487 --> 00:52:48,767
I would like to represent

1252
00:52:49,278 --> 00:52:51,838
Negative values by default if I say care

1253
00:52:52,351 --> 00:52:54,911
I am talking about potentially negative values

1254
00:52:55,422 --> 00:52:57,726
If I say Care on side I'm only talking

1255
00:52:57,983 --> 00:52:59,263
About unsigned value

1256
00:52:59,775 --> 00:53:01,311
Unsigned values

1257
00:53:01,567 --> 00:53:03,103
This would be 8-bit

1258
00:53:04,126 --> 00:53:04,639
Unsigned

1259
00:53:05,663 --> 00:53:06,686
Also 200

1260
00:53:06,943 --> 00:53:07,455
6 values

1261
00:53:07,710 --> 00:53:08,222
But

1262
00:53:08,478 --> 00:53:10,782
This actually is 0 to 2:55

1263
00:53:11,039 --> 00:53:12,063
That contains

1264
00:53:12,318 --> 00:53:15,391
That would let me represent all the numbers from 0 to 55

1265
00:53:15,646 --> 00:53:16,414
This guy right here

1266
00:53:17,695 --> 00:53:18,975
Tell me other hands this guy

1267
00:53:19,231 --> 00:53:19,999
Cannot represent those

1268
00:53:20,510 --> 00:53:24,862
What she actually does is he ghost from -128 to 127

1269
00:53:26,398 --> 00:53:27,166
Anything other than that

1270
00:53:27,679 --> 00:53:30,494
If I try to go up to 128 it would not work

1271
00:53:31,007 --> 00:53:31,775
No

1272
00:53:32,543 --> 00:53:33,567
Can't do

1273
00:53:35,358 --> 00:53:36,639
Literally never have

1274
00:53:36,894 --> 00:53:38,175
Point being

1275
00:53:39,199 --> 00:53:39,711
You know

1276
00:53:40,222 --> 00:53:41,759
You cannot actually

1277
00:53:44,574 --> 00:53:45,086
We're going to use

1278
00:53:45,599 --> 00:53:46,111
Mathematical

1279
00:53:47,902 --> 00:53:52,510
So this can represent -28

1280
00:53:52,766 --> 00:53:55,838
And basically they both represent 2 and 36 different values

1281
00:53:56,094 --> 00:53:59,934
But they just represent them slightly differently because one wants it to handle negative

1282
00:54:00,190 --> 00:54:01,471
And one wants to handle only

1283
00:54:01,726 --> 00:54:03,007
Positive so you get more range

1284
00:54:03,262 --> 00:54:03,775
On the positive

1285
00:54:04,030 --> 00:54:04,798
I'll talk a little bit more about

1286
00:54:05,054 --> 00:54:05,567
About that later

1287
00:54:06,079 --> 00:54:08,639
These guys are exactly the same thing just

1288
00:54:08,894 --> 00:54:09,663
Borbet

1289
00:54:10,431 --> 00:54:11,711
So if I were to go here

1290
00:54:11,967 --> 00:54:12,990
50 Cent

1291
00:54:13,246 --> 00:54:14,270
This is 16 bit

1292
00:54:15,295 --> 00:54:16,318
That's a

1293
00:54:16,574 --> 00:54:18,622
65536 different values

1294
00:54:20,670 --> 00:54:21,182
Again

1295
00:54:21,438 --> 00:54:22,462
The power of two to six

1296
00:54:23,487 --> 00:54:25,534
And this guy is 32 bit

1297
00:54:27,070 --> 00:54:28,094
Or 4 billion

1298
00:54:28,606 --> 00:54:29,630
That's not quite for a billion

1299
00:54:31,166 --> 00:54:32,190
There's some noise in there I don't remember

1300
00:54:32,447 --> 00:54:34,494
Exactly that's higher powers of 2 that I can

1301
00:54:34,751 --> 00:54:35,775
It's roughly around 4

1302
00:54:39,103 --> 00:54:39,871
So

1303
00:54:41,663 --> 00:54:42,686
These are just ways

1304
00:54:42,943 --> 00:54:43,967
Of me asking

1305
00:54:44,735 --> 00:54:46,015
To essentially

1306
00:54:46,527 --> 00:54:48,318
Reserve a certain amount

1307
00:54:48,574 --> 00:54:50,622
Subspace right I need enough bits

1308
00:54:50,878 --> 00:54:52,159
To hold a particular type of value

1309
00:54:52,670 --> 00:54:55,998
So if I want to be able to store relatively large values I can ask

1310
00:54:57,023 --> 00:55:00,606
If I care that they are signed or unsigned I can specify that

1311
00:55:01,119 --> 00:55:03,166
If I need negative values for sample I use this one

1312
00:55:03,422 --> 00:55:03,934
Funny negative values

1313
00:55:04,190 --> 00:55:06,750
16-bit side use this one if I wanted

1314
00:55:08,286 --> 00:55:09,054
Jenny 8-bit

1315
00:55:09,311 --> 00:55:11,615
But I actually want the full range

1316
00:55:11,871 --> 00:55:13,407
255 and don't care about

1317
00:55:13,663 --> 00:55:14,943
Negative numbers that I can use this one

1318
00:55:15,967 --> 00:55:16,479
And that

1319
00:55:16,735 --> 00:55:18,271
Is really all of these do

1320
00:55:18,527 --> 00:55:20,318
They're setting me up to start to do things

1321
00:55:20,831 --> 00:55:21,343
With those

1322
00:55:21,599 --> 00:55:23,135
Now the math that happens on these

1323
00:55:23,646 --> 00:55:24,159
Obviously

1324
00:55:24,414 --> 00:55:25,695
Is affected by which one

1325
00:55:26,719 --> 00:55:28,255
So let's say for example I'm going to

1326
00:55:29,023 --> 00:55:29,535
Define

1327
00:55:29,791 --> 00:55:30,303
Mother suck here

1328
00:55:30,815 --> 00:55:32,095
I'm going to find a test value

1329
00:55:33,630 --> 00:55:34,398
I'm going to say

1330
00:55:34,911 --> 00:55:36,191
Test equals

1331
00:55:36,447 --> 00:55:36,959
100

1332
00:55:37,471 --> 00:55:37,983
27

1333
00:55:39,007 --> 00:55:40,543
And then the next thing I'm going to do

1334
00:55:42,847 --> 00:55:44,127
I'm say testicles 200

1335
00:55:44,894 --> 00:55:46,175
And the next thing I want to do

1336
00:55:46,431 --> 00:55:46,943
PSA test

1337
00:55:47,454 --> 00:55:48,222
Protect plus one

1338
00:55:48,735 --> 00:55:50,015
I'm just going to add it to add one

1339
00:55:50,527 --> 00:55:51,039
To that value

1340
00:55:51,550 --> 00:55:52,063
All right

1341
00:55:52,318 --> 00:55:52,831
Let us

1342
00:55:53,086 --> 00:55:55,391
Run the program I have mentioned yet

1343
00:55:56,159 --> 00:55:59,742
If you are in the middle if you stopped here on a line like I said in the booger

1344
00:55:59,998 --> 00:56:03,326
You may wonder how do I recompile my program restart

1345
00:56:03,583 --> 00:56:07,679
Shift at 5 so F5 runs the program shift at five stops running the program

1346
00:56:08,190 --> 00:56:10,238
So you can get out of that new assuming visuals

1347
00:56:10,494 --> 00:56:11,262
Senior housing crash

1348
00:56:11,775 --> 00:56:12,287
You can get out of that

1349
00:56:12,543 --> 00:56:13,055
Pretty quickly

1350
00:56:13,311 --> 00:56:13,823
Anyway

1351
00:56:14,847 --> 00:56:16,127
So if you get off at 5

1352
00:56:16,639 --> 00:56:20,479
And go and stop on this line we can now ask to inspect test

1353
00:56:20,735 --> 00:56:24,575
It's not initialized anything like I said cuz we didn't send it to initial value or anything

1354
00:56:24,831 --> 00:56:26,367
We can step over that line

1355
00:56:26,623 --> 00:56:27,903
We get 255

1356
00:56:28,159 --> 00:56:31,231
We can now step over this line and you would expect potentially to see

1357
00:56:31,742 --> 00:56:32,255
56

1358
00:56:32,510 --> 00:56:33,278
Which

1359
00:56:33,534 --> 00:56:34,047
Is what

1360
00:56:34,302 --> 00:56:35,838
35 + 1 is an

1361
00:56:36,094 --> 00:56:36,606
Boom

1362
00:56:37,119 --> 00:56:37,887
Exactly what we get

1363
00:56:38,398 --> 00:56:39,166
Everything's good right

1364
00:56:39,679 --> 00:56:40,191
Well

1365
00:56:40,447 --> 00:56:41,215
What would happen

1366
00:56:41,726 --> 00:56:44,798
If I go back here and I change this to a care unsigned

1367
00:56:45,054 --> 00:56:46,335
Now we know that only contain

1368
00:56:46,590 --> 00:56:47,358
8-bit

1369
00:56:47,871 --> 00:56:49,151
So I have said it

1370
00:56:49,407 --> 00:56:50,943
To essentially the maximum value

1371
00:56:51,199 --> 00:56:51,967
Vatican hold

1372
00:56:52,478 --> 00:56:53,246
When I get here

1373
00:56:53,503 --> 00:56:55,550
Decided to 2:55 or what we were

1374
00:56:55,806 --> 00:56:56,318
Expecting

1375
00:56:57,086 --> 00:56:58,878
But then when I try to add one to it

1376
00:57:01,438 --> 00:57:01,951
Game over

1377
00:57:02,719 --> 00:57:03,742
Be right back to zero

1378
00:57:04,255 --> 00:57:07,070
And the reason for that is because the way that arithmetic

1379
00:57:07,327 --> 00:57:09,631
Is defined on the actual CPU most

1380
00:57:10,143 --> 00:57:13,215
X Factor that depends on exactly what's going on in the sea

1381
00:57:13,471 --> 00:57:16,543
CPU there's different types of adding or saturated adzan

1382
00:57:17,054 --> 00:57:18,078
Wrapping a dressing like this

1383
00:57:18,335 --> 00:57:20,639
But the way this actually defined

1384
00:57:20,894 --> 00:57:23,967
On the CPU that's in this machine and the way that is Define to work

1385
00:57:24,222 --> 00:57:24,990
NC

1386
00:57:25,759 --> 00:57:29,599
Is it when you add 1 to a to a number which is already at

1387
00:57:29,855 --> 00:57:30,623
Highest value

1388
00:57:30,878 --> 00:57:31,391
Instead of

1389
00:57:31,646 --> 00:57:34,462
Being at the highest value which would be called a saturated

1390
00:57:35,487 --> 00:57:37,023
It does not do that wraps

1391
00:57:37,278 --> 00:57:41,887
It goes back to zero so basically it's like 0 to 2:35 and then 0 again

1392
00:57:42,143 --> 00:57:48,286
75 and 0 keep going at it for him so I could add one all day and I would go right back up

1393
00:57:48,543 --> 00:57:49,567
Go around the roundabout

1394
00:57:50,335 --> 00:57:52,639
No this is sometimes called an overflow

1395
00:57:53,150 --> 00:57:54,431
About the term that you'll see used time

1396
00:57:55,199 --> 00:58:01,342
It overflow is a term for when you are at the maximum value and then you wrap that value you over

1397
00:58:01,599 --> 00:58:06,207
Overflow over and go to the lore value overflow gets used for a number different things so

1398
00:58:06,719 --> 00:58:08,510
I wouldn't get too hung up on the term because

1399
00:58:08,766 --> 00:58:10,047
There's a lot of things I could refer to

1400
00:58:10,302 --> 00:58:12,606
Tell me about call back and you'll see that said

1401
00:58:12,862 --> 00:58:14,910
It's that overflowed value

1402
00:58:16,190 --> 00:58:16,702
Okay

1403
00:58:17,215 --> 00:58:17,727
So

1404
00:58:19,007 --> 00:58:21,567
What I wanted to do with this is just give you a little bit of a base

1405
00:58:22,079 --> 00:58:23,359
For how these things work but

1406
00:58:23,614 --> 00:58:25,150
And anyhow you can do math on them

1407
00:58:25,407 --> 00:58:26,687
That's all well and good we now can

1408
00:58:26,943 --> 00:58:31,551
Inspect the program we can kind of see what's going on we can see that there are real sort of boundaries to

1409
00:58:31,806 --> 00:58:36,414
The things that we are talking about on here at they are stored as actual bits and when we use up more bit them

1410
00:58:36,670 --> 00:58:38,718
We have received the effects of that

1411
00:58:38,974 --> 00:58:39,487
And so on the sofa

1412
00:58:40,510 --> 00:58:44,862
No there's something big that that I need to talk about what just how negative numbers actually work

1413
00:58:45,375 --> 00:58:47,166
Which is a little complicated

1414
00:58:47,679 --> 00:58:53,311
You notice I use an assignment for the stuff that I didn't want to deal with negative values that cuz they approximation

1415
00:58:53,567 --> 00:58:55,103
I'm going to hold off on that a little bit

1416
00:58:55,358 --> 00:58:59,967
Instead I'm going to do a little peas for tomorrow because I said we're going to do some Assembly Language tonight

1417
00:59:00,478 --> 00:59:02,014
And I would like to do a little bit of that

1418
00:59:02,527 --> 00:59:04,831
So what I want to do before we go any further with 300C

1419
00:59:05,086 --> 00:59:05,599
Just

1420
00:59:05,855 --> 00:59:07,646
Using this just the simple math

1421
00:59:08,414 --> 00:59:11,742
What I want to do before we go any further cuz I want to introduce you

1422
00:59:11,998 --> 00:59:13,022
To understanding

1423
00:59:13,278 --> 00:59:17,375
What is actually happening in the code because we actually have some stuff now that we could understand

1424
00:59:17,887 --> 00:59:18,911
So I'm going to show you

1425
00:59:19,166 --> 00:59:20,702
What it does and how to understand what it

1426
00:59:21,215 --> 00:59:24,287
And by the way this is again a big reason why I'm glad

1427
00:59:24,543 --> 00:59:25,823
That. Microsoft has

1428
00:59:26,079 --> 00:59:28,126
Released this thing this Community Edition

1429
00:59:28,639 --> 00:59:30,175
Because I think there's some stuff in here

1430
00:59:30,431 --> 00:59:31,454
That will help people

1431
00:59:31,967 --> 00:59:32,990
That is not necessarily

1432
00:59:33,246 --> 00:59:33,759
Present in

1433
00:59:36,318 --> 00:59:36,831
Okay

1434
00:59:37,342 --> 00:59:42,462
So if I stop a program on a line like I did before it was using the same old breakpoint thing I had a v I ran there

1435
00:59:42,974 --> 00:59:44,510
If I right click on that line

1436
00:59:44,766 --> 00:59:48,350
That I was on there's actually thing you can do down here called go to disassembly

1437
00:59:49,119 --> 00:59:52,447
If I say go to disassemble you will see that everything freaks out for second

1438
00:59:52,958 --> 00:59:56,542
But if I look at it closely I can see that my coat is still there

1439
00:59:56,798 --> 00:59:59,614
Here is the code that I've typed in but they're just all this other stuff

1440
00:59:59,871 --> 01:00:01,407
All lying around

1441
01:00:01,918 --> 01:00:03,710
Crazy right there's all sorts of crap in here

1442
01:00:04,222 --> 01:00:05,759
But what this crap actually is

1443
01:00:06,271 --> 01:00:09,086
Is this is actually a textual representation

1444
01:00:09,599 --> 01:00:11,391
Actual machine code

1445
01:00:11,902 --> 01:00:13,694
It is actually being executed

1446
01:00:13,951 --> 01:00:15,231
Actual processor

1447
01:00:16,766 --> 01:00:17,790
And believe it or not

1448
01:00:18,559 --> 01:00:21,119
STDs that is maybe to look at this and read this

1449
01:00:21,375 --> 01:00:22,655
I actually do this often

1450
01:00:22,911 --> 01:00:23,679
Doodlebug problems

1451
01:00:24,190 --> 01:00:26,494
I believe it is essential to be able to at least

1452
01:00:26,751 --> 01:00:28,031
Rudimentary read it

1453
01:00:28,286 --> 01:00:28,798
And

1454
01:00:29,311 --> 01:00:30,335
If you're anything like me

1455
01:00:30,847 --> 01:00:32,639
I think you will start to feel

1456
01:00:32,894 --> 01:00:37,246
What is Big sense of connection to your code that you don't ever feel any other way

1457
01:00:37,503 --> 01:00:40,575
When you actually understand exactly what the processor

1458
01:00:40,831 --> 01:00:41,855
Actually doing

1459
01:00:42,110 --> 01:00:44,926
Instead of just the sort of vague abstract

1460
01:00:45,182 --> 01:00:47,487
Symantec things that higher-level languages

1461
01:00:47,998 --> 01:00:49,022
Encourage you to work it

1462
01:00:49,534 --> 01:00:55,678
Yes those abstractions can sometimes help you get work done faster but you lose a certain connection to what's actually going on in the code

1463
01:00:55,934 --> 01:00:58,239
It is very unsatisfied and sometimes

1464
01:00:58,494 --> 01:00:59,775
Actually hampers your progress

1465
01:01:00,286 --> 01:01:02,078
So I wanted to get

1466
01:01:02,335 --> 01:01:05,918
Down and dirty very quickly and some schedule a little Assembly Language teas and then

1467
01:01:06,175 --> 01:01:10,271
You know tomorrow when we start talking about actual C code in a little more detail besides just

1468
01:01:10,527 --> 01:01:12,063
I'm going to actually start

1469
01:01:12,318 --> 01:01:13,855
To show you some more of what all these other

1470
01:01:15,646 --> 01:01:16,159
So

1471
01:01:16,670 --> 01:01:17,438
Let's take a look

1472
01:01:17,695 --> 01:01:19,742
What I want you to do if you're following along

1473
01:01:20,766 --> 01:01:23,070
Cuz I want to go into the debug windows

1474
01:01:23,838 --> 01:01:27,934
And what you're going to do is you're going to find the one that says

1475
01:01:28,190 --> 01:01:28,702
Register

1476
01:01:29,471 --> 01:01:29,983
It's this one right here

1477
01:01:30,494 --> 01:01:31,518
Now this is

1478
01:01:31,775 --> 01:01:33,822
Awful awful awful window

1479
01:01:34,079 --> 01:01:35,103
It is

1480
01:01:35,358 --> 01:01:36,382
Absolutely terrible

1481
01:01:38,175 --> 01:01:39,967
You can tell they spent no time on it

1482
01:01:40,222 --> 01:01:43,550
But what are you going to do it's the only way to really get a clean registered

1483
01:01:43,806 --> 01:01:45,342
To display this this and other things you can do to her

1484
01:01:46,623 --> 01:01:49,182
When you right-click on that you want us to this not much in there

1485
01:01:49,438 --> 01:01:50,206
At the moment

1486
01:01:50,463 --> 01:01:55,327
When you right-click on that you can actually go and you can ask her all kinds of good stuff

1487
01:01:56,094 --> 01:01:57,375
Messi Flags America

1488
01:01:57,630 --> 01:01:58,654
The flags register Alexa

1489
01:01:58,911 --> 01:01:59,423
Let's do everything

1490
01:02:00,190 --> 01:02:01,982
Alright so you can see this

1491
01:02:02,494 --> 01:02:04,542
Crazy window if you enable everything

1492
01:02:05,054 --> 01:02:06,590
He's basically representation

1493
01:02:07,871 --> 01:02:09,151
What's called the registers

1494
01:02:09,407 --> 01:02:10,175
Of the CPU

1495
01:02:10,686 --> 01:02:14,270
And the way I CPU works is basically as you go through

1496
01:02:14,527 --> 01:02:15,039
The code

1497
01:02:15,550 --> 01:02:16,318
That it needs to ask

1498
01:02:17,086 --> 01:02:18,878
It is given very simple instructions

1499
01:02:19,391 --> 01:02:19,903
And those are

1500
01:02:20,159 --> 01:02:20,671
Instructions

1501
01:02:20,927 --> 01:02:22,463
Basically boiled down to

1502
01:02:22,719 --> 01:02:24,255
Going and getting some memory

1503
01:02:24,766 --> 01:02:29,375
Pulling it into a register which is the thing that it can work on its inside the CPU

1504
01:02:30,143 --> 01:02:32,702
They can actually operate on so it's taking a little piece of memory

1505
01:02:32,958 --> 01:02:33,982
Put in the thing called a register

1506
01:02:34,494 --> 01:02:38,335
If then has commands I can operate on those registers to change the values of them

1507
01:02:38,590 --> 01:02:41,663
And then it will have to manage that put those registers back out to me

1508
01:02:41,918 --> 01:02:48,062
You got this big old huge memory for gigabyte gig 16GB government using your machine however much your machine said when you bought it

1509
01:02:48,318 --> 01:02:50,110
How much you stuck in there if you build it yourself

1510
01:02:50,623 --> 01:02:52,159
All that memory

1511
01:02:52,414 --> 01:02:54,462
Beasley gets pulled into the the CPU

1512
01:02:54,719 --> 01:02:56,255
It gets moved into registers

1513
01:02:56,510 --> 01:02:59,326
Which are there not very many of them it's tiny there's

1514
01:02:59,838 --> 01:03:03,934
8 16 32 of them something like that there's a small number of registered depending on the CPU

1515
01:03:04,447 --> 01:03:06,239
Where can I see Starbucks can work on those

1516
01:03:06,494 --> 01:03:08,286
Does values and put them back out to memory

1517
01:03:08,543 --> 01:03:09,823
Everything that happens to computer

1518
01:03:10,079 --> 01:03:15,455
Basically Works in that very simple way to the few of the things I can do but for the most part almost everything it does

1519
01:03:15,710 --> 01:03:18,526
Is based around just it's it's almost like this just machine

1520
01:03:18,782 --> 01:03:20,318
That's just sucking in memory

1521
01:03:20,574 --> 01:03:21,598
Spitting memory back out

1522
01:03:21,855 --> 01:03:27,998
And in inside she's registered at our training through it to do operations on it does this obviously very fast and operates on tons of memory

1523
01:03:28,255 --> 01:03:29,791
It's all going to these registers

1524
01:03:30,047 --> 01:03:31,327
Android modify in there

1525
01:03:32,606 --> 01:03:33,119
Now

1526
01:03:33,375 --> 01:03:37,726
What I want you to look at is I want you to look at this line of

1527
01:03:37,983 --> 01:03:39,263
Assembly Language right here

1528
01:03:39,775 --> 01:03:42,079
Basically what this is doing

1529
01:03:42,590 --> 01:03:43,103
Is

1530
01:03:44,126 --> 01:03:46,174
It is going to do our

1531
01:03:46,431 --> 01:03:47,967
R test equals 255

1532
01:03:48,222 --> 01:03:49,503
Testicles Test Plus One

1533
01:03:50,271 --> 01:03:51,551
Right if these are two lines of code

1534
01:03:51,806 --> 01:03:52,318
Going to do this

1535
01:03:52,574 --> 01:03:54,110
Is it legal to 55 first

1536
01:03:54,623 --> 01:03:56,159
And then it's going to

1537
01:03:56,414 --> 01:03:57,438
To try to increment that

1538
01:03:58,463 --> 01:03:59,743
So what you can see is

1539
01:03:59,998 --> 01:04:01,534
There's a number here in the assembly

1540
01:04:01,791 --> 01:04:06,399
What that number is is that is busy where you are in the actual code so you have to remember

1541
01:04:06,655 --> 01:04:08,447
Last week I explain the fact

1542
01:04:08,702 --> 01:04:12,543
That you essentially when you compile a program and Link it you end up with this

1543
01:04:12,798 --> 01:04:16,894
With the sort of file that's all the Cove inspected Windows loads that code in

1544
01:04:17,150 --> 01:04:17,663
Right

1545
01:04:17,918 --> 01:04:18,431
And

1546
01:04:18,686 --> 01:04:19,967
When it actually has that

1547
01:04:20,222 --> 01:04:23,295
Code in memory it's going to eventually point the CPU to some of it

1548
01:04:23,550 --> 01:04:24,831
And it's going to start executing

1549
01:04:25,086 --> 01:04:25,599
Right there

1550
01:04:26,110 --> 01:04:31,742
When it starts extra in that code I mean that code is actually somewhere in memory exist

1551
01:04:32,255 --> 01:04:32,767
Somewhere

1552
01:04:33,023 --> 01:04:36,351
In memory and this is basically telling you where in the code

1553
01:04:36,606 --> 01:04:38,398
You actually are is an address

1554
01:04:38,655 --> 01:04:44,031
In memory of the coat and we will get into what memory and addresses are in all that sort of stuff but this is basically you can almost think of it

1555
01:04:44,286 --> 01:04:45,822
Add a line number it's not exactly that

1556
01:04:46,079 --> 01:04:49,151
It's almost like a line number that tells you where in the actual code you were

1557
01:04:49,407 --> 01:04:51,454
There are some things that there are some reasons why you might want

1558
01:04:52,735 --> 01:04:54,271
But mostly we're going to look at right here

1559
01:04:54,527 --> 01:04:55,039
Is this

1560
01:04:55,550 --> 01:04:56,831
Mov

1561
01:04:57,086 --> 01:04:58,110
Now what is it movie

1562
01:04:58,878 --> 01:05:02,206
The way that machine code is printed out so that it's easy to read

1563
01:05:02,719 --> 01:05:03,231
Is

1564
01:05:03,487 --> 01:05:08,095
When is actually being a simple CPU there is no movie in the CPU

1565
01:05:08,351 --> 01:05:10,655
Hopefully it's actually working on binary encoded

1566
01:05:11,166 --> 01:05:12,447
Things that tell it what is rocks

1567
01:05:12,702 --> 01:05:15,518
I do but for human readability the way

1568
01:05:15,775 --> 01:05:19,103
Things are printed out when we ask for a disassembly which is the actual code that are

1569
01:05:19,358 --> 01:05:19,871
Thing is executing

1570
01:05:20,639 --> 01:05:22,431
What it does is it will use

1571
01:05:22,686 --> 01:05:24,990
Again like much like the ASCII table

1572
01:05:25,246 --> 01:05:26,270
Uses a table

1573
01:05:26,527 --> 01:05:28,318
It has been called mnemonics

1574
01:05:28,574 --> 01:05:30,622
Which are basically these little short hands

1575
01:05:31,135 --> 01:05:37,278
The best way to look at whatever the actual machine code is whatever the actual instruction is it's going executed and turn it into a human readable

1576
01:05:37,534 --> 01:05:39,326
For Mama for stance removed

1577
01:05:39,583 --> 01:05:41,119
Is it mnemonic that says

1578
01:05:41,375 --> 01:05:42,398
I want to move

1579
01:05:42,655 --> 01:05:44,702
Memory from one place to another

1580
01:05:49,822 --> 01:05:51,614
Got taken out again say The Voice

1581
01:05:52,894 --> 01:05:53,407
Anyway

1582
01:05:53,663 --> 01:05:58,014
Basically what it is is Mom is a command that the processor can execute

1583
01:05:58,271 --> 01:05:58,783
Which takes

1584
01:05:59,039 --> 01:05:59,807
Some value

1585
01:06:00,318 --> 01:06:02,623
What you can see here 0 ffh

1586
01:06:02,878 --> 01:06:05,182
We'll talk about that second and music

1587
01:06:05,438 --> 01:06:06,462
To a location

1588
01:06:06,719 --> 01:06:08,510
0 FSH

1589
01:06:09,023 --> 01:06:10,815
I wasn't going to Super get into this

1590
01:06:12,606 --> 01:06:14,143
Vetpoint

1591
01:06:15,166 --> 01:06:17,214
Where where it's probably good to start talking about it

1592
01:06:17,726 --> 01:06:18,239
I will I will

1593
01:06:18,494 --> 01:06:19,262
Mentioned briefly

1594
01:06:19,775 --> 01:06:22,079
How do I get to that crazy athlete a while I use the same app

1595
01:06:22,335 --> 01:06:22,847
Acetate overlook

1596
01:06:25,407 --> 01:06:26,175
Not the one

1597
01:06:28,478 --> 01:06:29,502
This one here we go

1598
01:06:30,527 --> 01:06:34,367
So when I clicked on this one before you remember I got confused cuz everything's different kinds

1599
01:06:34,878 --> 01:06:35,646
Well

1600
01:06:36,927 --> 01:06:39,999
The other kind that was in here I said hexadecimal is this

1601
01:06:41,023 --> 01:06:45,119
You can see hexadecimal is actually a way of basically saying

1602
01:06:45,375 --> 01:06:45,887
Okay

1603
01:06:46,143 --> 01:06:47,934
I want to represent numbers

1604
01:06:48,190 --> 01:06:49,982
In a more compact notation

1605
01:06:50,494 --> 01:06:54,335
And you can look at them here they're lined up exactly with with the decimal so 0 1 2 3

1606
01:06:54,847 --> 01:06:56,127
9 when you get to 10

1607
01:06:56,382 --> 01:06:57,406
I said I'm going to 10

1608
01:06:57,663 --> 01:07:00,222
You actually just go ABCDEF

1609
01:07:00,478 --> 01:07:02,270
Which allows you to represent 6

1610
01:07:02,527 --> 01:07:03,295
Steam numbers

1611
01:07:03,550 --> 01:07:08,414
Before you actually get to 10 its base 16 like binary was base 2 and decimals base

1612
01:07:08,670 --> 01:07:14,558
10 this is actually base 16 what it means that you go 0 to fnu go 10 through 100

1613
01:07:15,070 --> 01:07:16,351
Right which is down here and so on

1614
01:07:17,119 --> 01:07:19,166
Now we'll talk a little bit more about that cuz

1615
01:07:19,422 --> 01:07:24,030
You should probably practice that a little bit I don't want to believe in the fact that pointing at you some more compact notation

1616
01:07:24,286 --> 01:07:24,798
Production

1617
01:07:25,567 --> 01:07:27,871
And so you might ask yourself well alright

1618
01:07:29,150 --> 01:07:30,174
Sub-Zero ffh

1619
01:07:30,431 --> 01:07:32,735
What is that I'm telling you it is a hexadecimal constant

1620
01:07:32,990 --> 01:07:33,759
Especially

1621
01:07:34,014 --> 01:07:36,062
Since you probably only just

1622
01:07:36,318 --> 01:07:37,342
Heard me briefly

1623
01:07:37,599 --> 01:07:41,695
Say out what would I suppose you would never know it is thanks but if you hover over it

1624
01:07:42,206 --> 01:07:44,766
Visual Studio actually translate the hexadecimal value

1625
01:07:45,023 --> 01:07:46,815
The age of course is not part of the value best

1626
01:07:47,070 --> 01:07:47,838
The thing that tells you it's

1627
01:07:48,094 --> 01:07:48,606
Hexadecimal

1628
01:07:50,398 --> 01:07:51,679
FF is actually the value

1629
01:07:52,190 --> 01:07:58,334
So if you look at that it will translate at 5:40 to 2:55 so for now you can actually cheat and just use that but we'll talk

1630
01:07:58,590 --> 01:08:02,686
A little more in the future episodes that you can be more comfortable and you can actually just read these things

1631
01:08:03,967 --> 01:08:04,735
To be honest

1632
01:08:05,246 --> 01:08:07,294
It's not that important to read hexadecimal super well

1633
01:08:07,550 --> 01:08:09,598
Because I am terrible at reading hexadecimal

1634
01:08:10,110 --> 01:08:12,670
And I'm still okay at programming so it's fine

1635
01:08:12,927 --> 01:08:14,463
But it's good to know.

1636
01:08:14,719 --> 01:08:15,231
What are bases

1637
01:08:15,487 --> 01:08:15,999
So anyway

1638
01:08:16,255 --> 01:08:20,606
You can look here and you can see 55:9 you can also do some stuff you can do some experiments

1639
01:08:20,863 --> 01:08:27,007
In this watch window if you right-click it's got to hexadecimal display option to Nestle's pretty common use for C programmers

1640
01:08:27,262 --> 01:08:30,335
That's when you can see here it'll give us a thing o x

1641
01:08:30,591 --> 01:08:32,639
Is the notation that c uses

1642
01:08:32,895 --> 01:08:35,967
0h is the thing that Assembly Language uses

1643
01:08:36,479 --> 01:08:40,063
0 axis wait use its OCC is actually the hexadecimal

1644
01:08:41,087 --> 01:08:42,879
Too much about that

1645
01:08:43,135 --> 01:08:43,903
I don't have much too much

1646
01:08:44,158 --> 01:08:45,438
Too many things into your brain at once

1647
01:08:45,694 --> 01:08:46,974
So we'll talk about that a little bit

1648
01:08:47,230 --> 01:08:47,742
A few tracks

1649
01:08:47,998 --> 01:08:48,510
Piping

1650
01:08:49,023 --> 01:08:54,911
This is the 255 know you'll noticed that's what we were going to sign so the 255 is actually just a concept that appears

1651
01:08:55,167 --> 01:08:55,935
Herein

1652
01:08:56,190 --> 01:08:59,519
The Assembly Language code and what's going to do is going to move this constant

1653
01:09:00,542 --> 01:09:02,335
It's going to move it into the location

1654
01:09:02,846 --> 01:09:03,614
Specified by Tess

1655
01:09:04,639 --> 01:09:08,990
We're going to ignore the bike torn apart for now because I don't want to talk about pointers to next episode but

1656
01:09:09,502 --> 01:09:12,318
You can see when we execute this light assembly again using the f x

1657
01:09:12,574 --> 01:09:13,086
Step over it

1658
01:09:13,599 --> 01:09:16,159
You can see that it move it should be 5 and just as we asked

1659
01:09:16,414 --> 01:09:18,462
Remove this value to hear

1660
01:09:19,743 --> 01:09:20,511
Pretty simple right

1661
01:09:21,279 --> 01:09:22,047
Know what that was

1662
01:09:22,302 --> 01:09:24,350
Is that was a memory to memory move

1663
01:09:24,863 --> 01:09:31,007
What that means is that it never actually went into the registers that I was talking about it just went ahead and moved the 255

1664
01:09:31,519 --> 01:09:34,335
Which was actually in the code itself right

1665
01:09:34,846 --> 01:09:40,990
It move that into this light pointer but it never actually occupied a register with it and what that means is that if I go and look at my

1666
01:09:41,247 --> 01:09:41,759
My registers here

1667
01:09:42,270 --> 01:09:44,063
This is actually the printout of the registers

1668
01:09:44,319 --> 01:09:50,207
You will notice that that value the FF does not appear anywhere here cuz it never actually got moved in there

1669
01:09:51,487 --> 01:09:52,255
In

1670
01:09:52,511 --> 01:09:53,023
The next statement

1671
01:09:53,279 --> 01:09:54,559
You will see move ZX

1672
01:09:54,814 --> 01:09:57,375
That is actually going to move it from that location

1673
01:09:57,631 --> 01:09:58,911
The test location that BFF

1674
01:09:59,422 --> 01:10:00,958
He was actually going to move that

1675
01:10:01,215 --> 01:10:05,310
Intuit actual register and the reason has moving treacherous cuz it wants to add one to it

1676
01:10:05,567 --> 01:10:07,614
In order to actually do math on things

1677
01:10:08,127 --> 01:10:10,431
The process generally has to move them into register

1678
01:10:10,686 --> 01:10:11,198
Torso

1679
01:10:11,454 --> 01:10:12,222
Step over that

1680
01:10:12,479 --> 01:10:13,503
And now you'll see

1681
01:10:13,759 --> 01:10:14,270
Tax

1682
01:10:14,527 --> 01:10:16,063
Which was the destination register

1683
01:10:16,319 --> 01:10:18,623
I'm going to try to explain why it's called the ax

1684
01:10:18,878 --> 01:10:23,487
That is a topic for much further down the road but being that the register call Dax

1685
01:10:23,743 --> 01:10:25,279
And now that register

1686
01:10:25,534 --> 01:10:27,327
Has that value that we tried to move into it

1687
01:10:28,863 --> 01:10:29,887
Now we're going to do

1688
01:10:30,654 --> 01:10:32,958
Is we are going to add

1689
01:10:33,215 --> 01:10:33,726
1

1690
01:10:33,983 --> 01:10:34,751
2X

1691
01:10:35,519 --> 01:10:36,543
Right we are going to actually

1692
01:10:36,798 --> 01:10:37,310
Say we want

1693
01:10:37,567 --> 01:10:38,078
Anchorman

1694
01:10:38,591 --> 01:10:39,103
By 1

1695
01:10:40,382 --> 01:10:41,662
There we go and you can see it

1696
01:10:41,918 --> 01:10:43,454
Rap just like I said it was going to

1697
01:10:43,711 --> 01:10:44,735
On the fs

1698
01:10:44,990 --> 01:10:48,063
Because basically that was at 2:55 it has to go to the next

1699
01:10:48,831 --> 01:10:49,599
The next binary

1700
01:10:50,622 --> 01:10:51,390
Is that make sense

1701
01:10:51,903 --> 01:10:54,207
And then it's going to move

1702
01:10:55,230 --> 01:10:55,742
The result

1703
01:10:56,255 --> 01:10:57,279
Back into test

1704
01:10:57,791 --> 01:10:59,070
So sure is interesting part

1705
01:10:59,327 --> 01:11:02,399
That I want to just heard of leave as a tease for next time

1706
01:11:02,654 --> 01:11:05,215
Because all of this is obviously very confusing to anyone who hasn't

1707
01:11:06,751 --> 01:11:08,287
You'll notice that the one

1708
01:11:08,542 --> 01:11:09,310
Is still here

1709
01:11:09,823 --> 01:11:12,383
So when I actually have the FF right

1710
01:11:12,639 --> 01:11:16,990
We ended up with a hundred hexadecimal now there's no way to switch this into binary mode

1711
01:11:17,247 --> 01:11:18,015
So unfortunately I

1712
01:11:19,038 --> 01:11:20,831
Show you that but that's 256

1713
01:11:21,342 --> 01:11:23,646
Right if I actually go in here and ask to see

1714
01:11:24,414 --> 01:11:24,926
What

1715
01:11:25,182 --> 01:11:25,951
Holidays in hexadecimal

1716
01:11:26,462 --> 01:11:27,230
You'll see this 250

1717
01:11:27,487 --> 01:11:28,511
So we went from

1718
01:11:28,766 --> 01:11:29,534
FF

1719
01:11:30,046 --> 01:11:30,814
Which is 255

1720
01:11:31,070 --> 01:11:32,606
To 100 which is 256

1721
01:11:33,375 --> 01:11:33,886
But

1722
01:11:34,399 --> 01:11:34,911
Remember

1723
01:11:35,167 --> 01:11:39,775
That's what's supposed to happen when it was defined as an integer which can display very large values

1724
01:11:40,798 --> 01:11:42,335
I still have it defined

1725
01:11:42,591 --> 01:11:43,103
As

1726
01:11:43,614 --> 01:11:48,222
You know as only 8-bit slide so how you know what's going on there

1727
01:11:48,990 --> 01:11:53,086
This picture actually record is 256 so this next line here

1728
01:11:53,342 --> 01:11:57,438
Which is going to take a register and move it back into test

1729
01:11:57,694 --> 01:12:01,278
Beltline beer should set testicle the 256 right into

1730
01:12:01,791 --> 01:12:03,583
2 Chainz beat the physics I don't know what's going on

1731
01:12:03,838 --> 01:12:04,350
What's going on

1732
01:12:04,606 --> 01:12:05,118
I've no idea

1733
01:12:05,375 --> 01:12:06,654
You'll see when we step over

1734
01:12:06,911 --> 01:12:07,935
Actually you will see

1735
01:12:08,190 --> 01:12:14,335
That in fact if I look at test afterwards it is zero like it was supposed to be it did in fact rap

1736
01:12:15,103 --> 01:12:16,382
And you can see that again

1737
01:12:17,662 --> 01:12:19,966
But back up for you here if I go to

1738
01:12:20,222 --> 01:12:21,502
Disassembly and leave chest open

1739
01:12:21,759 --> 01:12:22,783
You can see I move

1740
01:12:23,038 --> 01:12:26,110
Value 55 in there as we said it would we then

1741
01:12:26,367 --> 01:12:29,439
Do the ad in the register which does not actually change the value of 10

1742
01:12:29,694 --> 01:12:31,230
And then we move it on back

1743
01:12:31,743 --> 01:12:32,255
0

1744
01:12:33,534 --> 01:12:34,046
Well

1745
01:12:35,070 --> 01:12:36,350
What actually happened there

1746
01:12:36,606 --> 01:12:37,118
Is

1747
01:12:37,375 --> 01:12:39,167
The registers in x86

1748
01:12:39,422 --> 01:12:40,190
And exit

1749
01:12:40,447 --> 01:12:41,215
51st and Vincennes

1750
01:12:42,494 --> 01:12:45,055
Orvis this particular register is 32 bit

1751
01:12:45,310 --> 01:12:48,382
You can see that even in hexadecimal has a lot of characters there right

1752
01:12:48,639 --> 01:12:50,431
Register happens to be 32 bit

1753
01:12:50,686 --> 01:12:51,198
Why

1754
01:12:51,711 --> 01:12:53,247
So what happens when you rap

1755
01:12:53,502 --> 01:12:56,318
The lower eight bits of it like that

1756
01:12:56,831 --> 01:13:00,926
It still is able to store that value just fine to go all the way up to 4 billion no problem

1757
01:13:01,694 --> 01:13:02,206
But

1758
01:13:02,719 --> 01:13:05,534
You're also able in Assembly Language to reference

1759
01:13:05,791 --> 01:13:07,583
Smaller parts of this register

1760
01:13:07,838 --> 01:13:11,167
You can pull out just that bottom 8 Bits right there

1761
01:13:11,679 --> 01:13:13,983
Which happens to be 0-0 and that

1762
01:13:14,238 --> 01:13:16,542
It's exactly what Al is

1763
01:13:17,055 --> 01:13:19,615
Al is basically the reference to eat

1764
01:13:19,871 --> 01:13:21,150
Which says only pull out

1765
01:13:21,407 --> 01:13:22,431
The bottom two bit

1766
01:13:22,686 --> 01:13:24,734
And you can actually see that kind of in here

1767
01:13:24,990 --> 01:13:27,551
The a is the important part is register a

1768
01:13:27,806 --> 01:13:28,574
A

1769
01:13:28,831 --> 01:13:29,342
Be

1770
01:13:30,110 --> 01:13:30,622
See

1771
01:13:30,878 --> 01:13:31,390
D

1772
01:13:31,646 --> 01:13:34,462
Right you can kind of see that there's ABCD registers

1773
01:13:34,975 --> 01:13:38,047
But the way that you refer to them actually if you refer to eax

1774
01:13:38,302 --> 01:13:42,654
Vs Al for example the way you add to that to the Peace of today

1775
01:13:42,911 --> 01:13:48,030
Actually tells you what portion of them like how you want them to be treated for that dick instruction

1776
01:13:48,287 --> 01:13:52,382
So in this case the processor didn't actually have to do any extra work

1777
01:13:52,639 --> 01:13:55,967
To make sure that we got the the value that we were expecting to get

1778
01:13:56,222 --> 01:13:59,551
By only using a pissed because it could just do the math

1779
01:13:59,806 --> 01:14:05,182
And I think it was 32 bits and then just take the bottom two bits of it and who cares what the rest of this value was because

1780
01:14:05,439 --> 01:14:06,207
We're never going to see it

1781
01:14:07,230 --> 01:14:07,742
Okay

1782
01:14:08,511 --> 01:14:09,023
So

1783
01:14:09,279 --> 01:14:11,839
Fire expect you to understand much of what I just said

1784
01:14:12,350 --> 01:14:17,214
Because we are going to go into that into a lot more detail soon but I just wanted to give you a brief

1785
01:14:17,470 --> 01:14:19,006
Taste of what's going on there

1786
01:14:19,262 --> 01:14:25,407
So you can see the even though you probably don't understand a lot of things and I said memory and I said registers and I said these things

1787
01:14:25,662 --> 01:14:31,294
That are are we haven't really covered in much detail so you're going to be a little confused about what they are and they're going to be kind of new to you

1788
01:14:32,063 --> 01:14:37,694
Even though that is probably very confusing I hope you can still follow the very basic part which is that

1789
01:14:38,462 --> 01:14:39,487
In this language

1790
01:14:39,743 --> 01:14:40,511
We have written something

1791
01:14:41,023 --> 01:14:42,815
Assign 255 to value

1792
01:14:43,070 --> 01:14:43,838
Add it to 1

1793
01:14:44,095 --> 01:14:46,655
Isaac we add one to it and assign it back to its

1794
01:14:47,679 --> 01:14:50,494
That was very understandable hopefully to most people who are watching

1795
01:14:51,262 --> 01:14:54,591
But I hope this secretive instructions was also relatively

1796
01:14:54,846 --> 01:14:56,382
Easy understand cuz there's only 4 of them

1797
01:14:56,895 --> 01:15:02,783
All it did was move across into something to memory move memory to register register move it back out to the memory

1798
01:15:03,551 --> 01:15:05,087
So hopefully

1799
01:15:05,342 --> 01:15:11,487
You can see that there's really not that much going on in the CPU for code in C code in C translates into relatively

1800
01:15:11,743 --> 01:15:12,255
Small

1801
01:15:12,511 --> 01:15:14,047
Code on the CPU and

1802
01:15:14,302 --> 01:15:16,095
I will be able to explain to you

1803
01:15:16,350 --> 01:15:17,886
What is Assembly Language code does

1804
01:15:18,143 --> 01:15:19,167
In great detail

1805
01:15:19,422 --> 01:15:20,958
In the next episode and you will

1806
01:15:21,215 --> 01:15:22,751
I think fairly comfortable with it

1807
01:15:23,006 --> 01:15:24,542
And throughout the whole series

1808
01:15:24,798 --> 01:15:27,614
What's the actual series proper starts on Monday

1809
01:15:28,127 --> 01:15:29,663
We are constantly going to harp

1810
01:15:29,918 --> 01:15:30,430
On

1811
01:15:30,686 --> 01:15:31,711
You know sort of

1812
01:15:31,966 --> 01:15:36,318
We were cussing out here to a rule which is always know what is actually happening in the machine

1813
01:15:37,087 --> 01:15:39,391
And a lot of people think that's really hard to do

1814
01:15:39,646 --> 01:15:41,951
And they also think it's very slow to understand those things

1815
01:15:42,207 --> 01:15:46,559
It's pretty slow to program a low-level language all these things I've actually seen things to that effect

1816
01:15:46,814 --> 01:15:49,118
Of course on Reddit someone posted the

1817
01:15:49,375 --> 01:15:50,143
Handmade hero thing

1818
01:15:50,654 --> 01:15:53,470
There was some snide comments to that to that effect I guess

1819
01:15:54,494 --> 01:15:55,519
It's really not true

1820
01:15:55,774 --> 01:15:59,358
There's really not that much code that gets generated from coal when you write it

1821
01:15:59,614 --> 01:16:01,150
And that's almost a good thing

1822
01:16:01,407 --> 01:16:03,199
If you're wearing something that's fast and efficient

1823
01:16:03,454 --> 01:16:07,295
There shouldn't be that much code generated from what you do because you should be

1824
01:16:07,551 --> 01:16:10,111
Doing very directly the things that you're trying to accomplish

1825
01:16:10,367 --> 01:16:13,951
And you can layer things on top of each other so you don't have to write things multiple time

1826
01:16:14,207 --> 01:16:18,047
But each individual piece that you write is actually very easy to understand

1827
01:16:18,302 --> 01:16:19,838
It's very simple to understand

1828
01:16:20,095 --> 01:16:24,190
What happened to the CPU especially for programming and see because it is a low-level language

1829
01:16:24,447 --> 01:16:26,751
But even when you understand the C code

1830
01:16:27,262 --> 01:16:29,567
You can sort of translate that's even some higher-level languages

1831
01:16:30,078 --> 01:16:34,686
I don't really like for them in the style of language is because I don't like all the things that they put between me and the processor

1832
01:16:35,454 --> 01:16:38,527
Since I happen to know what the processor typically does when I do things

1833
01:16:40,063 --> 01:16:44,158
I'm not even Assembly Language expert so I don't you know

1834
01:16:44,414 --> 01:16:50,559
The guys at rad who a lot of people who I work with at Radford sample they are way more assembly than me you know they are

1835
01:16:50,814 --> 01:16:52,094
Are there total assembly

1836
01:16:52,350 --> 01:16:58,494
People who know it in and out I know it basically because I think it's good to know and I divide things that way and I like to understand

1837
01:16:58,751 --> 01:17:02,079
And the performance of code through it and I like to understand what the CPU doesn't that sort of stuff

1838
01:17:02,846 --> 01:17:06,942
So even with just a relatively basic understanding of assembly like what I have

1839
01:17:07,198 --> 01:17:09,759
It's actually very easy to understand what the CPU does

1840
01:17:10,015 --> 01:17:13,087
When you write C code and that allows you to always be very

1841
01:17:13,342 --> 01:17:14,367
Closely connected

1842
01:17:15,135 --> 01:17:17,439
With what what the process of doing so that you

1843
01:17:17,694 --> 01:17:18,462
You can write

1844
01:17:18,719 --> 01:17:24,095
Efficient good code and you can understand what I can do bucket easily it it's just really this nice connect

1845
01:17:24,350 --> 01:17:27,422
What you have when you always understand what's going on and I think part of being a good programmer

1846
01:17:28,190 --> 01:17:29,726
Really does involve knowing

1847
01:17:30,238 --> 01:17:31,006
What's going on

1848
01:17:31,262 --> 01:17:34,846
It's it's not about writing a few lines of PHP code

1849
01:17:35,103 --> 01:17:35,614
And then

1850
01:17:35,871 --> 01:17:38,431
You have absolutely no idea what's going to happen right like

1851
01:17:38,686 --> 01:17:42,527
It goes through tons of layers of code that you didn't write you have no idea what they're doing

1852
01:17:42,783 --> 01:17:47,646
You know maybe there's bugs that maybe there security holes oh I got it slow why is it so we have no idea

1853
01:17:47,903 --> 01:17:48,927
All of that stuff

1854
01:17:49,439 --> 01:17:51,231
I find it very limiting and frustrating

1855
01:17:51,487 --> 01:17:54,815
And so contrary to what people say about it being tedious

1856
01:17:55,070 --> 01:17:56,350
We're taking too long to program

1857
01:17:57,375 --> 01:17:59,935
I actually find that I am very fast when I program in C

1858
01:18:00,447 --> 01:18:06,591
And I don't really find that there's that much of a value and using those hello languages unless literally all you want to do

1859
01:18:06,846 --> 01:18:08,639
She was type a few libraries together

1860
01:18:08,895 --> 01:18:09,407
And have them do some

1861
01:18:09,662 --> 01:18:11,966
Which is what a lot of people doing some of those languages

1862
01:18:12,222 --> 01:18:14,783
And that's fine I don't think there's anything wrong with doing that

1863
01:18:15,038 --> 01:18:19,646
But when I'm actually getting down to business and I want to write some serious code that doesn't cool stuff

1864
01:18:20,158 --> 01:18:21,438
I don't want that stuff in my way

1865
01:18:25,023 --> 01:18:26,047
I want to know what's going on

1866
01:18:26,302 --> 01:18:26,814
Everywhere

1867
01:18:27,838 --> 01:18:28,350
So

1868
01:18:28,863 --> 01:18:31,679
Hopefully that is giving you a little bit Taste of assembly and end

1869
01:18:31,935 --> 01:18:38,079
Next session what we're going to do is we're going to really dive into that and see exactly what all those things mean I'll explain

1870
01:18:38,335 --> 01:18:39,614
Binary and hexadecimal

1871
01:18:39,871 --> 01:18:42,686
In a little more details to understand it I will also explain

1872
01:18:42,943 --> 01:18:44,990
Two's complement which is how you do negative numbers

1873
01:18:45,247 --> 01:18:47,551
And then we'll look at this assembly again and hopefully

1874
01:18:47,806 --> 01:18:49,342
It will be very clear to you that time

1875
01:18:49,599 --> 01:18:51,135
What's going on in from then on

1876
01:18:51,646 --> 01:18:57,791
I will always refer back to the assembly just briefly whenever I show you something new since you never have to be worried about it

1877
01:18:58,046 --> 01:19:00,606
Ever again you'll just be used to it you'll just be there

1878
01:19:00,863 --> 01:19:04,958
And you even if you never learn to write a single line of code and assembly that's totally fine

1879
01:19:05,215 --> 01:19:08,543
You will still always be in power to know exactly what the CPU is doing

1880
01:19:08,798 --> 01:19:10,591
Whenever it's actually code on your behalf

1881
01:19:11,103 --> 01:19:12,895
And with that I think I have

1882
01:19:13,407 --> 01:19:15,711
Probably pushed a little too much for one episode

1883
01:19:15,966 --> 01:19:19,295
So I am going to stop there I'm going to stop the recording

1884
01:19:19,551 --> 01:19:21,599
And then I will read the twits

1885
01:19:21,854 --> 01:19:22,878
Chat starting now

1886
01:19:23,135 --> 01:19:25,439
So if you have questions you would like me to cover

1887
01:19:25,694 --> 01:19:26,974
Please go ahead and put them there

1888
01:19:27,487 --> 01:19:29,023
And I will cover the

1889
01:19:29,791 --> 01:19:31,583
Thank you very much for joining me for this

1890
01:19:31,838 --> 01:19:36,447
And I look forward to seeing you tomorrow and in the Q&amp;A right after this if you are still

