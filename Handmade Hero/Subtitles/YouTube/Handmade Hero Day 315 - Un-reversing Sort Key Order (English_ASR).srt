1
00:00:00,000 --> 00:00:05,309
start recording hello everyone and

2
00:00:03,388 --> 00:00:10,939
welcome to handmade hero sure we code a

3
00:00:05,309 --> 00:00:13,949
complete game live on stream we are well

4
00:00:10,939 --> 00:00:15,570
we are just in the middle of doing some

5
00:00:13,949 --> 00:00:19,019
modifications to the way we're handling

6
00:00:15,570 --> 00:00:21,600
Z and the engine and we sort of stopped

7
00:00:19,019 --> 00:00:24,809
the stream last week at a point where I

8
00:00:21,600 --> 00:00:26,970
was like I would like to stop having to

9
00:00:24,809 --> 00:00:28,618
have all sprites on the screen be sorted

10
00:00:26,969 --> 00:00:31,549
through the same sort path i would like

11
00:00:28,618 --> 00:00:35,759
to basically have them split up into

12
00:00:31,550 --> 00:00:37,230
like you know tranches basically where

13
00:00:35,759 --> 00:00:41,039
we've got sort of layers that are

14
00:00:37,229 --> 00:00:42,959
handled separately and each layer is

15
00:00:41,039 --> 00:00:48,269
then sorted through the sorting system

16
00:00:42,960 --> 00:00:53,159
so in order to do that what we will have

17
00:00:48,270 --> 00:00:56,280
to do is I we kind of have to come up

18
00:00:53,159 --> 00:00:58,229
with some clever ways of making it so

19
00:00:56,280 --> 00:00:59,460
that the you know the code that's

20
00:00:58,229 --> 00:01:01,140
actually sending the stuff down the

21
00:00:59,460 --> 00:01:02,960
renderer doesn't have to do a ton of

22
00:01:01,140 --> 00:01:05,040
work to do this segregation right

23
00:01:02,960 --> 00:01:06,329
because what we don't want to do is we

24
00:01:05,040 --> 00:01:08,250
don't want to make it so that there's a

25
00:01:06,329 --> 00:01:09,510
ton of work that goes into having to

26
00:01:08,250 --> 00:01:12,868
figure out how to parcel these things

27
00:01:09,510 --> 00:01:14,070
out we want to make that as easy as

28
00:01:12,868 --> 00:01:16,650
possible so there's a number of ways

29
00:01:14,069 --> 00:01:18,508
that you know cross my mind as to how to

30
00:01:16,650 --> 00:01:20,009
do it we talked about one at the end of

31
00:01:18,509 --> 00:01:22,349
last week but probably what I want to do

32
00:01:20,009 --> 00:01:26,269
right now is just briefly talk about the

33
00:01:22,349 --> 00:01:31,889
situation and sort of discuss what we

34
00:01:26,269 --> 00:01:34,920
can do to make it work uh so essentially

35
00:01:31,890 --> 00:01:37,109
here is our problem and I'm going to

36
00:01:34,920 --> 00:01:40,099
move down to a new thing here today is

37
00:01:37,109 --> 00:01:40,099
day 3 15 0

38
00:01:44,370 --> 00:01:47,880
I don't know why but for some reason

39
00:01:46,319 --> 00:01:50,309
Milton always ends up thinking we have a

40
00:01:47,879 --> 00:01:54,299
mouse after a while I think it's got

41
00:01:50,310 --> 00:02:09,289
some kind of a bug they're not sure what

42
00:01:54,299 --> 00:02:18,960
it is exactly all right oops day 3 15 so

43
00:02:09,289 --> 00:02:20,639
layered sorting so we have a couple

44
00:02:18,960 --> 00:02:23,849
different ways that this could go but i

45
00:02:20,639 --> 00:02:26,039
just wanted to sort of explain a little

46
00:02:23,849 --> 00:02:27,960
bit about what i mean and why this is

47
00:02:26,039 --> 00:02:30,030
sort of something that there's a lot of

48
00:02:27,960 --> 00:02:34,469
ways we could do it and we probably only

49
00:02:30,030 --> 00:02:35,819
want to do it in one specific way once

50
00:02:34,469 --> 00:02:38,129
we figure out like what's going to be

51
00:02:35,819 --> 00:02:39,509
the most natural right but we don't it's

52
00:02:38,129 --> 00:02:43,379
hard to know necessarily a priori what's

53
00:02:39,509 --> 00:02:45,810
which is going to be the best so if we

54
00:02:43,379 --> 00:02:50,189
think about what's happening here we

55
00:02:45,810 --> 00:02:51,780
have a set of entities and we've got a

56
00:02:50,189 --> 00:02:55,349
lot of them i guess i should say

57
00:02:51,780 --> 00:02:57,360
entities we've got a lot of them and we

58
00:02:55,349 --> 00:02:59,489
don't necessarily know anything about

59
00:02:57,360 --> 00:03:00,840
them at the outset right we don't even

60
00:02:59,489 --> 00:03:02,610
necessarily know how much stuff they're

61
00:03:00,840 --> 00:03:04,610
going to draw all we have is giant array

62
00:03:02,610 --> 00:03:06,870
in each or entity maybe has some

63
00:03:04,610 --> 00:03:08,880
components to it you know an entity can

64
00:03:06,870 --> 00:03:11,159
have more than one sprite associates

65
00:03:08,879 --> 00:03:14,310
associated with it and what we want to

66
00:03:11,159 --> 00:03:18,509
do is we want to go from this over to

67
00:03:14,310 --> 00:03:20,699
the other sort of representation of it

68
00:03:18,509 --> 00:03:22,949
inside the render which is per layer

69
00:03:20,699 --> 00:03:25,949
right so we want like a layer layer

70
00:03:22,949 --> 00:03:30,000
layer and inside here we want the

71
00:03:25,949 --> 00:03:32,369
sprites that are part of the layer so

72
00:03:30,000 --> 00:03:35,310
the problem is first of all if this were

73
00:03:32,370 --> 00:03:37,680
completely heterogeneous in terms of

74
00:03:35,310 --> 00:03:39,689
where the layers go then this would kind

75
00:03:37,680 --> 00:03:41,670
of be a Swizzle engorda situation right

76
00:03:39,689 --> 00:03:43,800
we would end up having stuff that kind

77
00:03:41,669 --> 00:03:46,339
of goes like this sort of a thing right

78
00:03:43,800 --> 00:03:48,570
we you know who knows what's going on

79
00:03:46,340 --> 00:03:51,090
but we would sort of have all these sort

80
00:03:48,569 --> 00:03:52,889
of crosswise like okay every single

81
00:03:51,090 --> 00:03:54,359
entity is going to get mapped to us up a

82
00:03:52,889 --> 00:03:57,889
specific layer and there's no real

83
00:03:54,359 --> 00:03:57,890
coherence between them and whatever

84
00:03:58,120 --> 00:04:01,658
however if there is order to our

85
00:03:59,680 --> 00:04:03,069
entities then it's possible that that

86
00:04:01,658 --> 00:04:04,598
doesn't necessarily have to happen right

87
00:04:03,068 --> 00:04:05,949
it's possible that if there is order to

88
00:04:04,598 --> 00:04:12,399
the entities than what we could actually

89
00:04:05,949 --> 00:04:14,378
do is just sort of use the use the order

90
00:04:12,400 --> 00:04:17,259
of the md's in here to imply where they

91
00:04:14,378 --> 00:04:20,918
go and make things a little simpler

92
00:04:17,259 --> 00:04:23,529
right so those are two separate

93
00:04:20,918 --> 00:04:25,779
scenarios and let me tell you why we

94
00:04:23,529 --> 00:04:30,698
don't necessarily even know which one we

95
00:04:25,779 --> 00:04:31,959
have so if we didn't have any idea how

96
00:04:30,699 --> 00:04:34,060
the end of these were ordered in the

97
00:04:31,959 --> 00:04:35,168
list then we would have to say well it's

98
00:04:34,060 --> 00:04:38,860
definitely going to be this kind of

99
00:04:35,168 --> 00:04:40,810
swizzle sort of scenario but keep in

100
00:04:38,860 --> 00:04:43,060
mind how we got the entity list in the

101
00:04:40,810 --> 00:04:46,120
first place the way we got the entity

102
00:04:43,060 --> 00:04:48,189
list is we actually did a walk through

103
00:04:46,120 --> 00:04:50,350
our spatial data structure for storing

104
00:04:48,189 --> 00:04:54,639
the entities and we actually walked

105
00:04:50,350 --> 00:04:56,460
through a 3d sort of cubic I don't know

106
00:04:54,639 --> 00:05:00,819
what you want to call it almost like a

107
00:04:56,459 --> 00:05:08,288
voxels right it was basically like a

108
00:05:00,819 --> 00:05:12,719
gridded spatial partition in 3d and we

109
00:05:08,288 --> 00:05:16,120
had something that looked like this and

110
00:05:12,720 --> 00:05:17,979
during that call to begin sim if you

111
00:05:16,120 --> 00:05:19,360
remember we walk through this list and

112
00:05:17,978 --> 00:05:21,759
we grab all the images out of here then

113
00:05:19,360 --> 00:05:25,449
eyes out of here here here here whatever

114
00:05:21,759 --> 00:05:27,310
right so what this means is that when we

115
00:05:25,449 --> 00:05:30,909
built this entity list in the first

116
00:05:27,310 --> 00:05:33,339
place it was actually already sorted by

117
00:05:30,910 --> 00:05:35,680
layer when we grabbed it because we

118
00:05:33,339 --> 00:05:37,989
started with the bottom Z layer or even

119
00:05:35,680 --> 00:05:39,610
if we didn't we could decide to start

120
00:05:37,990 --> 00:05:42,329
with the bottom view layer then the next

121
00:05:39,610 --> 00:05:45,069
day layer then the next you layer right

122
00:05:42,329 --> 00:05:48,240
so we can actually assume that these are

123
00:05:45,069 --> 00:05:51,189
Z layer sorted in the first place right

124
00:05:48,240 --> 00:05:54,340
when we initially unpack them when they

125
00:05:51,189 --> 00:05:57,969
come out of begins sim we know they're

126
00:05:54,339 --> 00:05:59,948
already in order here's the problem we

127
00:05:57,970 --> 00:06:01,330
then go ahead and move them right

128
00:05:59,949 --> 00:06:03,639
because all the entities then get

129
00:06:01,329 --> 00:06:05,948
stimulated and ninety-nine point nine

130
00:06:03,639 --> 00:06:09,490
nine nine nine nine nine nine percent of

131
00:06:05,949 --> 00:06:11,949
the time they are all going to still be

132
00:06:09,490 --> 00:06:13,600
on the same Z layer that they started on

133
00:06:11,949 --> 00:06:16,120
because most of the time in a 2-d game

134
00:06:13,600 --> 00:06:18,040
like this people are moving around in a

135
00:06:16,120 --> 00:06:20,069
room or not moving around at all like

136
00:06:18,040 --> 00:06:22,930
all the trees are just stationary right

137
00:06:20,069 --> 00:06:25,120
so most of the time whatever your Z

138
00:06:22,930 --> 00:06:28,000
layer was coming out of begin sim so too

139
00:06:25,120 --> 00:06:32,050
will use e layer be going into NCM and

140
00:06:28,000 --> 00:06:34,629
so if we wanted to use the order that

141
00:06:32,050 --> 00:06:37,030
was implied by the entity list we would

142
00:06:34,629 --> 00:06:43,110
know that that order is generally the

143
00:06:37,029 --> 00:06:46,929
same throughout the entire sim process

144
00:06:43,110 --> 00:06:48,759
so we could just do something where we

145
00:06:46,930 --> 00:06:50,470
just go okay spin through the list until

146
00:06:48,759 --> 00:06:52,629
we get to the first person who's on an

147
00:06:50,470 --> 00:06:54,190
Uzi layer then we spend to the list for

148
00:06:52,629 --> 00:06:57,819
that sea layer and so on and just it

149
00:06:54,189 --> 00:07:00,189
segmented that way but the caveat there

150
00:06:57,819 --> 00:07:02,920
is like I just said you end up with a

151
00:07:00,189 --> 00:07:05,529
problem which is that people may have

152
00:07:02,920 --> 00:07:07,449
changed their Z layer so some people may

153
00:07:05,529 --> 00:07:09,309
have been simulating and they're just on

154
00:07:07,449 --> 00:07:11,979
the edge and they're about to transition

155
00:07:09,310 --> 00:07:13,600
from one z lair to another during the

156
00:07:11,980 --> 00:07:15,280
sim step they make that transition and

157
00:07:13,600 --> 00:07:18,610
now they're in a different Z layer than

158
00:07:15,279 --> 00:07:20,229
they used to be in and in that case we

159
00:07:18,610 --> 00:07:24,340
would now be putting them in the wrong

160
00:07:20,230 --> 00:07:26,350
layer for one frame on the next frame

161
00:07:24,339 --> 00:07:28,839
they'd be in the correct layer right

162
00:07:26,350 --> 00:07:31,090
because they're going to get packed back

163
00:07:28,839 --> 00:07:34,509
into the spatial partition and then at

164
00:07:31,089 --> 00:07:37,649
that point you know everything's fine so

165
00:07:34,509 --> 00:07:41,259
that's the situation that we're in and

166
00:07:37,649 --> 00:07:44,159
what that means is we can either do one

167
00:07:41,259 --> 00:07:48,339
of two things we have a decision to make

168
00:07:44,160 --> 00:07:50,410
either we can leave everyone in the Z

169
00:07:48,339 --> 00:07:52,329
layer that they were in when they got

170
00:07:50,410 --> 00:07:54,810
unpacked and begins sim and not have to

171
00:07:52,329 --> 00:07:58,870
do any work to sort people into layers

172
00:07:54,810 --> 00:08:02,290
but we would have one frame of lag in

173
00:07:58,870 --> 00:08:07,569
updating the apparent Z layer of each

174
00:08:02,290 --> 00:08:10,270
entity during transitions or we cannot

175
00:08:07,569 --> 00:08:13,029
do that and have some separate system

176
00:08:10,269 --> 00:08:19,419
that does the sorting post facto to

177
00:08:13,029 --> 00:08:20,968
resolve those Z layer problems that's

178
00:08:19,420 --> 00:08:24,209
the choices

179
00:08:20,968 --> 00:08:27,629
uh now we could do a slightly more

180
00:08:24,209 --> 00:08:30,449
hybridized scheme and what that would

181
00:08:27,629 --> 00:08:33,569
look like is suppose that we took the

182
00:08:30,449 --> 00:08:36,329
enemy list and we started sorting the

183
00:08:33,568 --> 00:08:39,240
entity list to produce an enemy list

184
00:08:36,328 --> 00:08:40,859
that was sorted by Z layer well instead

185
00:08:39,240 --> 00:08:43,680
of doing something crazy like a merge

186
00:08:40,860 --> 00:08:45,839
sort or something like this which would

187
00:08:43,679 --> 00:08:47,549
be a full-on you know just like we had

188
00:08:45,839 --> 00:08:49,860
over here a full-on sort that would take

189
00:08:47,549 --> 00:08:52,559
time and you know temporary space or who

190
00:08:49,860 --> 00:08:54,449
knows what we could leverage the fact

191
00:08:52,559 --> 00:08:56,599
that we know that very few entities will

192
00:08:54,448 --> 00:08:59,068
change their position in this list and

193
00:08:56,600 --> 00:09:01,290
actually just use like a bubble sort a

194
00:08:59,068 --> 00:09:03,448
very very simple bubble sort and it

195
00:09:01,289 --> 00:09:05,429
wouldn't even really be a bubble sort it

196
00:09:03,448 --> 00:09:07,198
would be more like a push down sort so

197
00:09:05,429 --> 00:09:09,899
basically what would happen is you know

198
00:09:07,198 --> 00:09:11,729
we would sweep through the list and any

199
00:09:09,899 --> 00:09:13,708
entities that were on the wrong Z layer

200
00:09:11,730 --> 00:09:16,379
we would pick them up into a side buffer

201
00:09:13,708 --> 00:09:19,138
or something right and then place them

202
00:09:16,379 --> 00:09:21,300
back down and swapping out people who

203
00:09:19,139 --> 00:09:22,818
were at the beginning of the new 0z

204
00:09:21,299 --> 00:09:25,169
layer list or something like this right

205
00:09:22,818 --> 00:09:29,399
so we could write a specialized sort

206
00:09:25,169 --> 00:09:33,149
that would sort of fix it up and what I

207
00:09:29,399 --> 00:09:34,409
think my assumption so I'm just again

208
00:09:33,149 --> 00:09:35,879
I'm talking all this out with you so

209
00:09:34,409 --> 00:09:39,208
that you can see what my thought process

210
00:09:35,879 --> 00:09:41,430
is and hopefully it makes some sense my

211
00:09:39,208 --> 00:09:43,919
assumption is the right decision here is

212
00:09:41,429 --> 00:09:46,138
to say well we don't even know if we

213
00:09:43,919 --> 00:09:49,318
care whether we have one frame of lag

214
00:09:46,139 --> 00:09:50,850
and Z layer updating and it seems like

215
00:09:49,318 --> 00:09:52,919
we could write a special-purpose sort

216
00:09:50,850 --> 00:09:55,139
that was very fast to fix up the enemy

217
00:09:52,919 --> 00:09:58,919
list in the case where we do know that

218
00:09:55,139 --> 00:10:01,259
that has happened and we care so maybe

219
00:09:58,919 --> 00:10:03,240
what I would suggest is let's start by

220
00:10:01,259 --> 00:10:05,669
just using the entity list as is and

221
00:10:03,240 --> 00:10:09,419
using the original Z layer of each

222
00:10:05,669 --> 00:10:12,299
entity and then if we find we are having

223
00:10:09,419 --> 00:10:14,009
visual bugs that result from this then

224
00:10:12,299 --> 00:10:17,818
we will go and write a sort that

225
00:10:14,009 --> 00:10:21,589
operates on that a list post facto to do

226
00:10:17,818 --> 00:10:21,588
the fix-up how's that sound

227
00:10:24,830 --> 00:10:30,600
alright so that's what I'm going to do

228
00:10:27,960 --> 00:10:32,970
no mystery to it right that's all there

229
00:10:30,600 --> 00:10:35,700
really is to say I'm going to go ahead

230
00:10:32,970 --> 00:10:36,870
and get started today is day 3 15 so

231
00:10:35,700 --> 00:10:39,600
again if you're trying to follow along

232
00:10:36,870 --> 00:10:41,549
at home you will want to unpack day 314

233
00:10:39,600 --> 00:10:42,870
source code into a directory that's the

234
00:10:41,549 --> 00:10:46,009
directory I'm sorry that's the source

235
00:10:42,870 --> 00:10:53,399
code version that I am starting on so

236
00:10:46,009 --> 00:10:55,559
yeah do that so yeah as I was saying at

237
00:10:53,399 --> 00:10:58,439
the end of last time stream if we do

238
00:10:55,559 --> 00:11:01,349
want to approach this the scheme this

239
00:10:58,440 --> 00:11:03,600
way which I think we do then we do need

240
00:11:01,350 --> 00:11:07,110
some additional information in the

241
00:11:03,600 --> 00:11:10,500
render system and we sort of Wow typing

242
00:11:07,110 --> 00:11:14,700
typing is hard we added it at the end of

243
00:11:10,500 --> 00:11:18,840
last last week stream I think at least

244
00:11:14,700 --> 00:11:20,370
that's my recollection and if if i

245
00:11:18,840 --> 00:11:22,769
remember correctly what we did is we set

246
00:11:20,370 --> 00:11:25,049
a little token in the stream that would

247
00:11:22,769 --> 00:11:27,539
basically let the this order know hey

248
00:11:25,049 --> 00:11:30,149
you've reached a barrier so sort these

249
00:11:27,539 --> 00:11:32,129
guys but but you don't have to sort

250
00:11:30,149 --> 00:11:34,709
anybody else right you don't have to

251
00:11:32,129 --> 00:11:37,080
sort them with anyone else so start all

252
00:11:34,710 --> 00:11:38,430
these guys and then next time sort the

253
00:11:37,080 --> 00:11:40,440
next batch the next time so our next

254
00:11:38,429 --> 00:11:43,439
election so we already now have a way of

255
00:11:40,440 --> 00:11:46,350
inserting those sprite barriers so what

256
00:11:43,440 --> 00:11:48,960
I think we can now do is when we have

257
00:11:46,350 --> 00:11:50,820
our game render what we should be able

258
00:11:48,960 --> 00:11:53,580
to do in the entity code that actually

259
00:11:50,820 --> 00:11:55,410
outputs this stuff is first of all I

260
00:11:53,580 --> 00:11:57,690
guess we need to go into sim region and

261
00:11:55,409 --> 00:11:59,159
just make sure that everyone actually is

262
00:11:57,690 --> 00:12:02,550
coming out in that order right because

263
00:11:59,159 --> 00:12:04,259
the loop where we loop through where is

264
00:12:02,549 --> 00:12:07,439
that at well let me just search for

265
00:12:04,259 --> 00:12:10,019
begins sim we want to make sure we're

266
00:12:07,440 --> 00:12:12,270
going by Z and if we look here it's

267
00:12:10,019 --> 00:12:13,559
turned out our loop is already exactly

268
00:12:12,269 --> 00:12:14,699
in the order that we want it just

269
00:12:13,559 --> 00:12:16,588
happens that way you know we don't have

270
00:12:14,700 --> 00:12:19,620
to reorganize it you can see that we're

271
00:12:16,589 --> 00:12:22,050
going by min chunk Z first and then

272
00:12:19,620 --> 00:12:23,549
we're going up in Z so that's perfect

273
00:12:22,049 --> 00:12:25,289
that means all of the minimums the

274
00:12:23,549 --> 00:12:27,269
entities will be grabbed first the next

275
00:12:25,289 --> 00:12:30,120
tier entities and externally is up and

276
00:12:27,269 --> 00:12:31,919
up and up so we should have then an

277
00:12:30,120 --> 00:12:34,350
entity list that's perfectly in order

278
00:12:31,919 --> 00:12:36,929
the exact way that we wanted it to be

279
00:12:34,350 --> 00:12:38,730
and so all we really need to do now

280
00:12:36,929 --> 00:12:41,189
is insert those barriers when we're

281
00:12:38,730 --> 00:12:42,990
actually doing the rendering so when we

282
00:12:41,190 --> 00:12:45,660
come through here and we actually are in

283
00:12:42,990 --> 00:12:48,299
the entity unpacked enemy list doing the

284
00:12:45,659 --> 00:12:51,179
rendering what we should be able to do

285
00:12:48,299 --> 00:12:52,620
is now say all right before you know I

286
00:12:51,179 --> 00:12:54,599
was sort of doing this map into chunks

287
00:12:52,620 --> 00:12:57,120
face thing finding out what the Z layer

288
00:12:54,600 --> 00:12:58,350
is of a particular entity I don't

289
00:12:57,120 --> 00:13:00,720
actually want to do that anymore what I

290
00:12:58,350 --> 00:13:03,300
want to do is just look back at the old

291
00:13:00,720 --> 00:13:06,480
world position of the entity right I

292
00:13:03,299 --> 00:13:09,439
want to look at the entity as if it had

293
00:13:06,480 --> 00:13:12,209
not been moved yet I one look at its old

294
00:13:09,440 --> 00:13:13,140
position just for purposes of figuring

295
00:13:12,208 --> 00:13:17,119
out the layer is because like I said

296
00:13:13,139 --> 00:13:20,278
we're using last frames position right

297
00:13:17,120 --> 00:13:22,709
so in doing so I want to look in here to

298
00:13:20,278 --> 00:13:24,028
see where it's actually placed I assume

299
00:13:22,708 --> 00:13:26,458
that that is stored in here somewhere

300
00:13:24,028 --> 00:13:29,100
but I don't actually know let's take a

301
00:13:26,458 --> 00:13:35,939
look we should have a world position

302
00:13:29,100 --> 00:13:38,639
somewhere shouldn't we okay I guess we

303
00:13:35,940 --> 00:13:40,200
don't actually store that i'm not sure

304
00:13:38,639 --> 00:13:43,379
why we don't persist it i guess maybe

305
00:13:40,200 --> 00:13:45,930
because we don't need to persist it i'm

306
00:13:43,379 --> 00:13:48,480
not really sure but I guess that's fine

307
00:13:45,929 --> 00:13:51,088
so either way I'm going to go ahead and

308
00:13:48,480 --> 00:13:52,980
put that in here I guess all we need to

309
00:13:51,089 --> 00:14:01,110
store really is the Z layer so I'll just

310
00:13:52,980 --> 00:14:03,959
store z layer like so and all we have to

311
00:14:01,110 --> 00:14:06,180
do now is when we do that unpack I can I

312
00:14:03,958 --> 00:14:08,309
can update that Zieler so inside the sim

313
00:14:06,179 --> 00:14:10,229
region when we unpack here it's really

314
00:14:08,309 --> 00:14:12,569
just that chunk Z that I want to know so

315
00:14:10,230 --> 00:14:14,490
when we unpack one of these guys doing

316
00:14:12,570 --> 00:14:15,900
this sort of pact when we do the desk

317
00:14:14,490 --> 00:14:17,850
when we do this sort of the clearing and

318
00:14:15,899 --> 00:14:20,189
that sort of stuff here I guess I'll

319
00:14:17,850 --> 00:14:22,200
just do it like this I'll just say that

320
00:14:20,190 --> 00:14:24,420
the the Z layer is going to be whatever

321
00:14:22,200 --> 00:14:26,400
the chunk see is here so now everyone's

322
00:14:24,419 --> 00:14:27,629
tagged with which one they are and then

323
00:14:26,399 --> 00:14:30,990
when we come through here we could just

324
00:14:27,629 --> 00:14:33,000
say well okay when we're going through

325
00:14:30,990 --> 00:14:35,430
these entities I just know that I need

326
00:14:33,000 --> 00:14:37,919
to insert that that token basically that

327
00:14:35,429 --> 00:14:42,629
thing that says hey you need to you need

328
00:14:37,919 --> 00:14:46,110
to break the group here I just need to

329
00:14:42,629 --> 00:14:50,370
do that periodically to let the system

330
00:14:46,110 --> 00:14:51,000
know what's going on all right so let's

331
00:14:50,370 --> 00:14:52,320
do that

332
00:14:51,000 --> 00:14:54,210
so first of all I'm going to need are

333
00:14:52,320 --> 00:14:56,250
running I'm basing it a piece of

334
00:14:54,210 --> 00:14:58,710
information that's a running knowledge

335
00:14:56,250 --> 00:15:00,960
of what the z-index that actually should

336
00:14:58,710 --> 00:15:02,519
be so what I'm going to do here is I'm

337
00:15:00,960 --> 00:15:04,320
going to say all right I've got a

338
00:15:02,519 --> 00:15:08,250
necessary to that's like the current Z

339
00:15:04,320 --> 00:15:09,720
layer and that current Z layer is going

340
00:15:08,250 --> 00:15:11,190
to be and I guess I'll say current

341
00:15:09,720 --> 00:15:12,840
absolute zoo layer just so we're clear

342
00:15:11,190 --> 00:15:15,570
on what that actually means i don't mean

343
00:15:12,840 --> 00:15:17,310
one of these things here so we have a

344
00:15:15,570 --> 00:15:19,230
current absolute sea layer and that

345
00:15:17,309 --> 00:15:22,079
current absolute sea layer is just going

346
00:15:19,230 --> 00:15:24,840
to be if we have any entities at all

347
00:15:22,080 --> 00:15:28,080
it's just going to be whatever the first

348
00:15:24,840 --> 00:15:31,370
one of those is right so assuming that

349
00:15:28,080 --> 00:15:33,450
there is an entity count of any kind

350
00:15:31,370 --> 00:15:34,440
because if there's not we could just say

351
00:15:33,450 --> 00:15:37,170
it's zero because we're not going to

352
00:15:34,440 --> 00:15:39,240
output anything anyway so if there isn't

353
00:15:37,169 --> 00:15:40,589
any kind of any kind then really all I

354
00:15:39,240 --> 00:15:42,240
want to do is just grab whatever the

355
00:15:40,590 --> 00:15:44,040
first one is and that's the Z layer that

356
00:15:42,240 --> 00:15:47,430
we're going to start on so you know

357
00:15:44,039 --> 00:15:49,379
whatever that is is what we'll start

358
00:15:47,429 --> 00:15:51,059
with then from then on or we're going to

359
00:15:49,379 --> 00:15:52,950
do is we're just going to update the Z

360
00:15:51,059 --> 00:15:55,109
layer every time we output one of these

361
00:15:52,950 --> 00:15:57,680
entities to make sure that we know

362
00:15:55,110 --> 00:16:01,740
whether we move to a new internet right

363
00:15:57,679 --> 00:16:03,689
so in here this disjunction now we could

364
00:16:01,740 --> 00:16:04,889
we can also pull will be able to get rid

365
00:16:03,690 --> 00:16:06,780
of that which is good like I said I

366
00:16:04,889 --> 00:16:08,669
always want to I want to kind of pair

367
00:16:06,779 --> 00:16:10,500
that down so we kind of just shove that

368
00:16:08,669 --> 00:16:12,299
into the system we should be able to

369
00:16:10,500 --> 00:16:13,860
sort of pair that down now let's go

370
00:16:12,299 --> 00:16:17,069
ahead though and finish what we're doing

371
00:16:13,860 --> 00:16:18,570
here before we embark on that so we have

372
00:16:17,070 --> 00:16:20,520
the current absolute Z layer what we

373
00:16:18,570 --> 00:16:23,970
want to say is if the current absolute Z

374
00:16:20,519 --> 00:16:26,159
layer is not gonna you know not going to

375
00:16:23,970 --> 00:16:28,950
match so if we were about to render

376
00:16:26,159 --> 00:16:30,959
somebody in a layer that isn't their

377
00:16:28,950 --> 00:16:33,330
lair first of all we could assert that

378
00:16:30,960 --> 00:16:35,280
we're always monotonically increasing so

379
00:16:33,330 --> 00:16:37,020
you can say like let's assert that we're

380
00:16:35,279 --> 00:16:38,669
going up in Z because we know that we

381
00:16:37,019 --> 00:16:41,039
need to sort of put them in slices that

382
00:16:38,669 --> 00:16:42,449
go higher and higher and higher so we'll

383
00:16:41,039 --> 00:16:44,579
start that that's true but assuming that

384
00:16:42,450 --> 00:16:47,570
that actually is true then what we want

385
00:16:44,580 --> 00:16:50,310
to do is say all right but let's then

386
00:16:47,570 --> 00:16:53,370
co-op this new zeal air as the Z layer

387
00:16:50,309 --> 00:16:59,359
that we're working on and we want to

388
00:16:53,370 --> 00:17:01,769
then insert a we then want to insert a

389
00:16:59,360 --> 00:17:03,870
what's so we're looking for a tote that

390
00:17:01,769 --> 00:17:04,029
that that's sort of barrier that's what

391
00:17:03,870 --> 00:17:05,500
I

392
00:17:04,029 --> 00:17:08,349
for everything we want to insert that

393
00:17:05,500 --> 00:17:09,880
sort barrier that lets it know so while

394
00:17:08,349 --> 00:17:12,219
I'm doing that let's go ahead and fix a

395
00:17:09,880 --> 00:17:13,840
few of these things here the entity Z

396
00:17:12,220 --> 00:17:15,670
layer we don't need to do this stuff

397
00:17:13,839 --> 00:17:19,000
anymore so in order to figure out the

398
00:17:15,670 --> 00:17:20,500
the sort of relatives e layer here we

399
00:17:19,000 --> 00:17:22,809
can just do that subtract where you take

400
00:17:20,500 --> 00:17:24,940
the Xeelee r minus chunk see because

401
00:17:22,809 --> 00:17:26,710
that's all we really wanted to know in

402
00:17:24,940 --> 00:17:29,140
the first place so we can make that

403
00:17:26,710 --> 00:17:33,180
happen that'll tell us the relative Z

404
00:17:29,140 --> 00:17:35,860
layer I also don't really know yeah

405
00:17:33,180 --> 00:17:38,890
we'll come back to that a little bit I

406
00:17:35,859 --> 00:17:39,969
suppose but anyway we then can can get

407
00:17:38,890 --> 00:17:43,030
rid of this particular piece of

408
00:17:39,970 --> 00:17:44,829
information here but either way you know

409
00:17:43,029 --> 00:17:46,960
I can preserve it for the time being if

410
00:17:44,829 --> 00:17:49,029
I wanted to buy going like this once we

411
00:17:46,960 --> 00:17:51,730
have that information and we have

412
00:17:49,029 --> 00:17:53,200
relative layer we know that only if the

413
00:17:51,730 --> 00:17:55,269
relative layer fits within our layers

414
00:17:53,200 --> 00:17:57,279
are we going to render anything so

415
00:17:55,269 --> 00:17:58,750
really if we want to I think we can

416
00:17:57,279 --> 00:18:01,450
dispense with a little bit of this

417
00:17:58,750 --> 00:18:03,309
situation here I can just move this

418
00:18:01,450 --> 00:18:05,230
inside because we know we're not going

419
00:18:03,309 --> 00:18:08,319
to care about this stuff if we're not

420
00:18:05,230 --> 00:18:10,240
going to render the guy right so we come

421
00:18:08,319 --> 00:18:11,559
in here I see it's different I want to

422
00:18:10,240 --> 00:18:13,120
do this absolute layer thing but then

423
00:18:11,559 --> 00:18:16,509
what I want to do is I want to insert a

424
00:18:13,119 --> 00:18:18,250
sort barrier right or maybe I should

425
00:18:16,509 --> 00:18:20,710
keep our name and kissin say push sort

426
00:18:18,250 --> 00:18:24,150
barrier to the render group I want to be

427
00:18:20,710 --> 00:18:26,140
able to say hey this is a sort barrier

428
00:18:24,150 --> 00:18:29,050
go ahead and put in one of those special

429
00:18:26,140 --> 00:18:32,140
markers that you need to put in to make

430
00:18:29,049 --> 00:18:34,829
that stuff work so back in the render

431
00:18:32,140 --> 00:18:38,770
group we need that to actually happen

432
00:18:34,829 --> 00:18:41,349
and so where I've got push render

433
00:18:38,769 --> 00:18:43,690
element I believe we'd also have another

434
00:18:41,349 --> 00:18:47,159
one here that's you know a push sort

435
00:18:43,690 --> 00:18:49,299
barrier that takes the render group and

436
00:18:47,160 --> 00:18:51,700
all that's going to do is it's just

437
00:18:49,299 --> 00:18:54,849
going to do exactly this operation here

438
00:18:51,700 --> 00:18:59,049
right and since that operation is

439
00:18:54,849 --> 00:19:01,179
relatively relatively simple I'm just

440
00:18:59,049 --> 00:19:03,519
going to copy it because we don't care

441
00:19:01,180 --> 00:19:06,250
about a lot of this stuff right so when

442
00:19:03,519 --> 00:19:07,960
I copy it if we do this we really don't

443
00:19:06,250 --> 00:19:10,750
need the entry to be anything other than

444
00:19:07,960 --> 00:19:13,539
that special marker right we don't need

445
00:19:10,750 --> 00:19:16,269
any of this stuff at all we could just

446
00:19:13,539 --> 00:19:17,829
say that the entry offset needs to be

447
00:19:16,269 --> 00:19:23,528
whatever the sort barrier

448
00:19:17,829 --> 00:19:26,019
ki actually was oops which is in here

449
00:19:23,528 --> 00:19:28,359
somewhere sprite barrier offset value

450
00:19:26,019 --> 00:19:32,140
right so if we push a sort barrier

451
00:19:28,359 --> 00:19:34,178
that's really all we have to do is is do

452
00:19:32,140 --> 00:19:36,278
this push but we have to make sure that

453
00:19:34,179 --> 00:19:39,159
we could that we could actually push it

454
00:19:36,278 --> 00:19:40,630
right we do need to actually be able to

455
00:19:39,159 --> 00:19:44,039
push it on there so we still need to

456
00:19:40,630 --> 00:19:47,470
check in here that we would not be

457
00:19:44,038 --> 00:19:54,460
advancing past the place where we could

458
00:19:47,470 --> 00:19:57,839
legally do it makes sense but that's it

459
00:19:54,460 --> 00:20:03,190
that's all we really need to do for that

460
00:19:57,839 --> 00:20:05,319
there we go alright so that's the basic

461
00:20:03,190 --> 00:20:11,230
idea now we actually I have to make this

462
00:20:05,319 --> 00:20:13,269
go and actually work right I know if we

463
00:20:11,230 --> 00:20:15,639
really got around to finishing this code

464
00:20:13,269 --> 00:20:17,349
so i actually want to go inspect that

465
00:20:15,638 --> 00:20:18,849
this is the code that actually has to do

466
00:20:17,349 --> 00:20:20,558
something with this i don't know that i

467
00:20:18,849 --> 00:20:22,329
actually did this particularly correctly

468
00:20:20,558 --> 00:20:23,440
so i want to actually take a second and

469
00:20:22,329 --> 00:20:25,839
make sure that we've actually got this

470
00:20:23,440 --> 00:20:27,278
code correct alright so inside build

471
00:20:25,839 --> 00:20:29,019
sprite graph now we're doing is saying

472
00:20:27,278 --> 00:20:30,278
let's take a starting value and what we

473
00:20:29,019 --> 00:20:31,899
do is we start at that starting value

474
00:20:30,278 --> 00:20:35,470
and then we go forward to the node count

475
00:20:31,898 --> 00:20:37,839
incrementing by one each time unless we

476
00:20:35,470 --> 00:20:39,940
get to the part where we encounter the

477
00:20:37,839 --> 00:20:41,888
sprite barrier offset value if we do

478
00:20:39,940 --> 00:20:43,960
encounter the sprite barrier offset

479
00:20:41,888 --> 00:20:46,449
value we're going to break now there's a

480
00:20:43,960 --> 00:20:49,028
problem with this which is that then we

481
00:20:46,450 --> 00:20:50,798
return that note index a I think we

482
00:20:49,028 --> 00:20:52,329
don't increment it after so really I

483
00:20:50,798 --> 00:20:53,500
think what we technically want to do

484
00:20:52,329 --> 00:20:54,970
here that that's actually not quite

485
00:20:53,500 --> 00:20:56,798
correct what we technically want to do

486
00:20:54,970 --> 00:20:58,509
here say ok when we hit the offset value

487
00:20:56,798 --> 00:21:00,759
we actually still want to do the

488
00:20:58,509 --> 00:21:03,940
increment we want to break like after

489
00:21:00,759 --> 00:21:06,129
the increment essentially so that's

490
00:21:03,940 --> 00:21:08,830
that's a little bit more correct there

491
00:21:06,130 --> 00:21:11,260
and similarly if we don't initialize the

492
00:21:08,829 --> 00:21:12,879
flags value which we know we wouldn't in

493
00:21:11,259 --> 00:21:14,079
the case of sort barrier we can't assert

494
00:21:12,880 --> 00:21:16,028
on that because it's going to be garbage

495
00:21:14,079 --> 00:21:18,970
right so that's a little bit more

496
00:21:16,028 --> 00:21:22,720
correct down here when we see when we do

497
00:21:18,970 --> 00:21:24,370
our sorting and so on you can see we

498
00:21:22,720 --> 00:21:25,600
start with the first index of zero and

499
00:21:24,369 --> 00:21:27,428
then we're just using that return val

500
00:21:25,599 --> 00:21:29,138
and we never increment it here and

501
00:21:27,429 --> 00:21:30,970
that's the crucial part so it has to be

502
00:21:29,138 --> 00:21:31,689
come back pointing to the next valid

503
00:21:30,970 --> 00:21:33,490
person

504
00:21:31,690 --> 00:21:35,919
so I can start again but I think

505
00:21:33,490 --> 00:21:37,028
otherwise the code is mostly right so

506
00:21:35,919 --> 00:21:41,139
let's go ahead and start the debugging

507
00:21:37,028 --> 00:21:42,700
process as we go alright so first off

508
00:21:41,138 --> 00:21:46,028
we're getting an assertion on the flags

509
00:21:42,700 --> 00:21:47,440
value not being cleared properly and so

510
00:21:46,028 --> 00:21:50,409
I'm not sure exactly why that's

511
00:21:47,440 --> 00:21:52,899
happening let's take a look at at what

512
00:21:50,409 --> 00:21:55,299
we get there and essentially that that

513
00:21:52,898 --> 00:22:03,819
means you know this this value that

514
00:21:55,298 --> 00:22:05,440
we're looking at right is not a is not a

515
00:22:03,819 --> 00:22:07,148
sprite barrier value right because you

516
00:22:05,440 --> 00:22:10,778
can see that it's offset is not set to

517
00:22:07,148 --> 00:22:14,079
like FFF FFF FFF so what I might want to

518
00:22:10,778 --> 00:22:17,200
do just briefly is I want to see what

519
00:22:14,079 --> 00:22:19,569
node index a is 233 I want to see what

520
00:22:17,200 --> 00:22:22,269
the input nodes actually are in this

521
00:22:19,569 --> 00:22:25,058
case and I want to see let's take a look

522
00:22:22,269 --> 00:22:26,138
here XS let's play yeah so that's

523
00:22:25,058 --> 00:22:27,128
actually it looks like it's just

524
00:22:26,138 --> 00:22:29,138
something that has been processed

525
00:22:27,128 --> 00:22:32,079
already so what I want to do here is say

526
00:22:29,138 --> 00:22:35,288
okay let's take a look at input nodes

527
00:22:32,079 --> 00:22:37,808
plus 2 32 right let's look at the

528
00:22:35,288 --> 00:22:40,778
previous one so you can see that the bug

529
00:22:37,808 --> 00:22:43,269
happened exactly where we might think it

530
00:22:40,778 --> 00:22:45,819
would happen right it happened right

531
00:22:43,269 --> 00:22:48,940
after we processed one of this one of

532
00:22:45,819 --> 00:22:51,158
the sort barriers so I clearly just well

533
00:22:48,940 --> 00:22:53,679
I don't clearly just have anything my

534
00:22:51,159 --> 00:22:54,970
mental assumption right that I'm making

535
00:22:53,679 --> 00:22:56,860
during this dividing processes like I

536
00:22:54,970 --> 00:22:58,808
expect to have a problem near the new

537
00:22:56,859 --> 00:23:00,398
code this looks like i'm having a

538
00:22:58,808 --> 00:23:02,019
problem you're the new code so let's

539
00:23:00,398 --> 00:23:05,528
take a look at what actually happens

540
00:23:02,019 --> 00:23:08,288
there okay when we hit that barrier

541
00:23:05,528 --> 00:23:10,179
offset we increment the node index to

542
00:23:08,288 --> 00:23:12,638
the next value and then we break out of

543
00:23:10,179 --> 00:23:14,798
here right so when we come back in and

544
00:23:12,638 --> 00:23:18,969
we start again we're going to be

545
00:23:14,798 --> 00:23:22,538
starting with one that's one after the

546
00:23:18,970 --> 00:23:25,659
one that we are on right so in theory

547
00:23:22,538 --> 00:23:27,579
it's a shouldn't have had any flag set

548
00:23:25,659 --> 00:23:29,799
because we shouldn't ever have touched

549
00:23:27,579 --> 00:23:31,058
it right and we shouldn't ever had done

550
00:23:29,798 --> 00:23:33,308
anything with it because we never would

551
00:23:31,058 --> 00:23:35,678
have checked anyone out past there

552
00:23:33,308 --> 00:23:37,960
that's the Assumption anyway clearly

553
00:23:35,679 --> 00:23:39,639
that assumption is wrong or there's a

554
00:23:37,960 --> 00:23:41,139
more straightforward bug in the code but

555
00:23:39,638 --> 00:23:42,939
that's you know that was sort of the

556
00:23:41,138 --> 00:23:44,579
thinking behind that particular piece of

557
00:23:42,940 --> 00:23:46,860
code right

558
00:23:44,579 --> 00:23:49,349
and so in here looking at the way this

559
00:23:46,859 --> 00:23:54,449
this works you know it looks like that

560
00:23:49,349 --> 00:23:56,879
should have been the case oh but you

561
00:23:54,450 --> 00:23:58,710
know what we have a separate bug here

562
00:23:56,880 --> 00:24:00,960
which is that this is not the correct

563
00:23:58,710 --> 00:24:03,538
neither of these two things are correct

564
00:24:00,960 --> 00:24:05,340
so walk sprite craft is kind of busted

565
00:24:03,538 --> 00:24:08,970
at the moment let's fix that first

566
00:24:05,339 --> 00:24:11,250
before we do any further debugging all

567
00:24:08,970 --> 00:24:13,350
right so what's happening here right is

568
00:24:11,250 --> 00:24:15,659
we sort of have a notion of whatever the

569
00:24:13,349 --> 00:24:17,969
first index is we then pass account here

570
00:24:15,659 --> 00:24:20,490
but really this is going to give us back

571
00:24:17,970 --> 00:24:22,259
you might say last index right it's

572
00:24:20,490 --> 00:24:29,460
giving us back whatever the index is

573
00:24:22,259 --> 00:24:31,169
that we would do after you know and now

574
00:24:29,460 --> 00:24:33,808
I think about it this is probably

575
00:24:31,169 --> 00:24:35,610
something where I'm going to want to not

576
00:24:33,808 --> 00:24:38,190
increment this because in the case when

577
00:24:35,609 --> 00:24:39,479
I actually hit the node count I want to

578
00:24:38,190 --> 00:24:42,470
know that and that'd be a little bit

579
00:24:39,480 --> 00:24:45,360
easier to do here all right so anyway

580
00:24:42,470 --> 00:24:46,889
what we do is we hit the last index we

581
00:24:45,359 --> 00:24:53,009
know that whatever that one is that

582
00:24:46,888 --> 00:24:56,898
we're on was the last is a no no wait

583
00:24:53,009 --> 00:25:00,058
I'm lyin I'm fine I overreacted I

584
00:24:56,898 --> 00:25:07,648
overreacted there it's okay so this is

585
00:25:00,058 --> 00:25:09,869
really one past the last index right so

586
00:25:07,648 --> 00:25:12,119
if I get one of these and I'm building

587
00:25:09,869 --> 00:25:15,089
this right graph here I know that I'm

588
00:25:12,119 --> 00:25:18,239
gonna have to compute a new count right

589
00:25:15,089 --> 00:25:20,009
I need my one pass last index minus my

590
00:25:18,240 --> 00:25:22,200
first index to be these are this is how

591
00:25:20,009 --> 00:25:25,230
many of the things I need to process

592
00:25:22,200 --> 00:25:29,330
right and so I need to pass a different

593
00:25:25,230 --> 00:25:32,038
count cure so I need like a sub count

594
00:25:29,329 --> 00:25:33,740
and I know where to start because I

595
00:25:32,038 --> 00:25:36,058
obviously know that the first index

596
00:25:33,740 --> 00:25:37,980
entries plus first index is the base of

597
00:25:36,058 --> 00:25:40,200
the array and I know the sub cam but

598
00:25:37,980 --> 00:25:41,909
there's a subtly here right and the

599
00:25:40,200 --> 00:25:44,190
subtlety is I get back this one pass

600
00:25:41,909 --> 00:25:46,019
last index it might be the actual one

601
00:25:44,190 --> 00:25:48,538
pass last index and this might be valid

602
00:25:46,019 --> 00:25:51,778
or it might not be because it might be

603
00:25:48,538 --> 00:25:53,460
that the count is now including the sort

604
00:25:51,778 --> 00:25:54,690
barrier and I don't want it to include

605
00:25:53,460 --> 00:25:56,190
the sort barriers they don't want to

606
00:25:54,690 --> 00:25:58,140
actually draw our process the sort

607
00:25:56,190 --> 00:25:59,730
barrier at all so

608
00:25:58,140 --> 00:26:02,610
but what I want to do here is say well

609
00:25:59,730 --> 00:26:05,220
if one passed last index is less than

610
00:26:02,609 --> 00:26:07,979
the count then the sub count should be

611
00:26:05,220 --> 00:26:11,539
subtracted right I should decrement by

612
00:26:07,980 --> 00:26:15,450
little and the first index should be

613
00:26:11,539 --> 00:26:20,759
should be advanced right but before I do

614
00:26:15,450 --> 00:26:22,410
that oh no it does I'm sorry that's it

615
00:26:20,759 --> 00:26:24,210
that's it anymore nevermind that was if

616
00:26:22,410 --> 00:26:25,440
I was doing it the other way the subject

617
00:26:24,210 --> 00:26:27,900
should be decremented to not include the

618
00:26:25,440 --> 00:26:30,930
sort barrier then at the end all I

619
00:26:27,900 --> 00:26:32,790
really have to do is say okay now I want

620
00:26:30,930 --> 00:26:36,120
to advance my first index to be wherever

621
00:26:32,789 --> 00:26:38,369
my one pass last index was and that

622
00:26:36,119 --> 00:26:40,619
should be ok so now at least we're not

623
00:26:38,369 --> 00:26:43,739
calling walks right graph with the

624
00:26:40,619 --> 00:26:46,139
totally wrong information and we should

625
00:26:43,740 --> 00:26:50,009
be able to get a little further than

626
00:26:46,140 --> 00:26:52,350
buggin process ok I really know what

627
00:26:50,009 --> 00:26:55,319
this is talking about here adage front

628
00:26:52,349 --> 00:26:57,000
equals at index yeah well we gotta we

629
00:26:55,319 --> 00:27:00,149
gotta step to this and actually see what

630
00:26:57,000 --> 00:27:03,660
we're doing here let's stop that and go

631
00:27:00,150 --> 00:27:05,519
to hear ok so we call build sprite graph

632
00:27:03,660 --> 00:27:06,660
the first time and we get back you know

633
00:27:05,519 --> 00:27:08,400
a first index we're going to have

634
00:27:06,660 --> 00:27:10,380
prosthetic 0 obviously we're going to

635
00:27:08,400 --> 00:27:13,650
have one pass last index I think of 233

636
00:27:10,380 --> 00:27:15,420
right and so since that's less than the

637
00:27:13,650 --> 00:27:17,519
count that means that our sub count is

638
00:27:15,420 --> 00:27:19,350
actually just going to be 232 right

639
00:27:17,519 --> 00:27:21,599
that's how many we're doing because we

640
00:27:19,349 --> 00:27:26,639
don't want to process that last value so

641
00:27:21,599 --> 00:27:32,490
we're going to process oh hi yet another

642
00:27:26,640 --> 00:27:37,320
bug I already saw so this count value

643
00:27:32,490 --> 00:27:38,940
right is also has to be adjusted here so

644
00:27:37,319 --> 00:27:42,269
all that stuff also has to be addressed

645
00:27:38,940 --> 00:27:45,420
at hopefully that makes sense anyway

646
00:27:42,269 --> 00:27:46,710
like I said we go through here and we're

647
00:27:45,420 --> 00:27:47,940
going to pass you know the standard

648
00:27:46,710 --> 00:27:48,960
count and entry is the first time

649
00:27:47,940 --> 00:27:50,700
through we're going to compute how many

650
00:27:48,960 --> 00:27:52,470
there are we're then going to pass sort

651
00:27:50,700 --> 00:27:54,660
of the offset it array and the sub count

652
00:27:52,470 --> 00:27:56,460
was 232 we're then going to update this

653
00:27:54,660 --> 00:27:58,110
index point to 33 and we're going to

654
00:27:56,460 --> 00:27:59,340
repeat the process right this time

655
00:27:58,109 --> 00:28:02,519
through we're going to actually change

656
00:27:59,339 --> 00:28:04,139
the count and the entries to here so

657
00:28:02,519 --> 00:28:07,019
we're going to start to 32 and go only

658
00:28:04,140 --> 00:28:08,820
201 forwards and we're having an offset

659
00:28:07,019 --> 00:28:11,250
input nodes right so we're going to go

660
00:28:08,819 --> 00:28:11,878
ahead and process all those guys oops

661
00:28:11,250 --> 00:28:13,229
hit me

662
00:28:11,878 --> 00:28:15,509
actually change the file i hope i didn't

663
00:28:13,229 --> 00:28:17,278
and then we're going to do exactly the

664
00:28:15,509 --> 00:28:22,649
same thing walk to a sprite craft again

665
00:28:17,278 --> 00:28:31,909
and so on so forth right okay uh so hmm

666
00:28:22,648 --> 00:28:31,908
it looks like here walk input nodes

667
00:28:34,470 --> 00:28:46,529
it looks like here we are still okay so

668
00:28:43,859 --> 00:28:48,779
yeah we got yeah this is one of those

669
00:28:46,529 --> 00:28:50,190
little nasty situations so we also still

670
00:28:48,779 --> 00:28:54,210
have one problem which is that all of

671
00:28:50,190 --> 00:28:57,870
our indices are based on the wrong

672
00:28:54,210 --> 00:28:58,980
things potentially I guess trying to

673
00:28:57,869 --> 00:29:01,500
think if there's any places where this

674
00:28:58,980 --> 00:29:04,980
actually comes into play but when we

675
00:29:01,500 --> 00:29:08,400
talk about note index a really I guess

676
00:29:04,980 --> 00:29:10,740
we don't we don't want to do it quite

677
00:29:08,400 --> 00:29:12,480
the way we were doing it because since

678
00:29:10,740 --> 00:29:14,579
all of our indices have to be based on

679
00:29:12,480 --> 00:29:17,220
the group we don't want this note index

680
00:29:14,579 --> 00:29:19,589
8 to be absolute right we want this note

681
00:29:17,220 --> 00:29:22,319
index a to be relative so I think we

682
00:29:19,589 --> 00:29:23,939
actually want to do it this way and then

683
00:29:22,319 --> 00:29:26,428
we want to just be able to return

684
00:29:23,940 --> 00:29:29,730
whatever that count actually is like

685
00:29:26,429 --> 00:29:30,870
however many we actually did so I'm

686
00:29:29,730 --> 00:29:32,400
going to take it back i'm going to say

687
00:29:30,869 --> 00:29:34,379
this is the way we would do it we

688
00:29:32,400 --> 00:29:36,419
wouldn't pass this in we would just say

689
00:29:34,380 --> 00:29:38,549
okay let's pretend you just handed me a

690
00:29:36,419 --> 00:29:41,038
group I'm going to do it like I did it

691
00:29:38,548 --> 00:29:51,869
and then return you the count of things

692
00:29:41,038 --> 00:29:53,369
I actually processed right then I can

693
00:29:51,869 --> 00:29:54,629
make this code a little bit cleaner here

694
00:29:53,369 --> 00:29:56,668
so it doesn't have to think quite in

695
00:29:54,630 --> 00:29:58,350
that same way and have sort of the weird

696
00:29:56,669 --> 00:30:01,590
thing it's everyone's indices are based

697
00:29:58,349 --> 00:30:04,408
off of a standard basis right I can then

698
00:30:01,589 --> 00:30:07,470
say sorts pipe bound like sub entries is

699
00:30:04,409 --> 00:30:12,000
going to be equal to entries plus first

700
00:30:07,470 --> 00:30:15,230
index and then I can say well alright

701
00:30:12,000 --> 00:30:17,119
then call it and get the sub count

702
00:30:15,230 --> 00:30:19,169
that's what I'm going to get here I

703
00:30:17,119 --> 00:30:21,479
don't have to pass this first index

704
00:30:19,169 --> 00:30:24,270
anymore I know that's just sort of what

705
00:30:21,480 --> 00:30:27,089
I'm keeping track of so I go ahead and I

706
00:30:24,269 --> 00:30:30,150
say entries plus first index I get the

707
00:30:27,089 --> 00:30:31,908
sub camp by saying okay what you know do

708
00:30:30,150 --> 00:30:34,350
the build sprite graft operation

709
00:30:31,909 --> 00:30:37,049
subtract from the total count wherever

710
00:30:34,349 --> 00:30:38,939
we were first index add to the entry so

711
00:30:37,048 --> 00:30:40,470
we're basically creating a new slice of

712
00:30:38,940 --> 00:30:42,659
that array or just pointing to a new

713
00:30:40,470 --> 00:30:44,819
slice of it and then what we want to do

714
00:30:42,659 --> 00:30:46,649
is say well the the sub count is just

715
00:30:44,819 --> 00:30:48,649
what we returned directly but we still

716
00:30:46,648 --> 00:30:51,149
want to say if that

717
00:30:48,650 --> 00:30:52,290
if that sub count I guess if the first

718
00:30:51,150 --> 00:30:53,910
disposed something out wouldn't have hit

719
00:30:52,289 --> 00:30:55,019
the end we might want to do the

720
00:30:53,910 --> 00:30:56,100
adjustment but I don't know if we

721
00:30:55,019 --> 00:30:57,930
actually need to do that let's take a

722
00:30:56,099 --> 00:30:59,609
look at how that's going to work so when

723
00:30:57,930 --> 00:31:01,710
we come through here i'm going to say

724
00:30:59,609 --> 00:31:04,649
we're going to break with with our node

725
00:31:01,710 --> 00:31:07,289
index a sort of pointing at the right

726
00:31:04,650 --> 00:31:09,570
place so really this this count will

727
00:31:07,289 --> 00:31:12,809
always be correct the only question is

728
00:31:09,569 --> 00:31:14,819
do we need to advance afterwards right

729
00:31:12,809 --> 00:31:16,829
and I think that that's pretty

730
00:31:14,819 --> 00:31:20,429
straightforward we just say the first

731
00:31:16,829 --> 00:31:22,139
index is is equal to it adds the sub

732
00:31:20,430 --> 00:31:23,700
count plus one so it's always going to

733
00:31:22,140 --> 00:31:27,660
move by however many we processed and

734
00:31:23,700 --> 00:31:29,009
then skip also skip the barrier if there

735
00:31:27,660 --> 00:31:31,800
is no barrier because this is the very

736
00:31:29,009 --> 00:31:34,109
end it's okay because it'll just be a

737
00:31:31,799 --> 00:31:35,369
little higher than cow be one over where

738
00:31:34,109 --> 00:31:38,459
it should have been but that'll still

739
00:31:35,369 --> 00:31:39,989
terminate the loop right so I think we

740
00:31:38,460 --> 00:31:43,680
can make this a little simpler here by

741
00:31:39,990 --> 00:31:47,430
just saying okay then we've got almost

742
00:31:43,680 --> 00:31:49,560
everything in a pretty condensed fashion

743
00:31:47,430 --> 00:31:51,240
and that is just a little less looks a

744
00:31:49,559 --> 00:31:54,509
little less error-prone a little more

745
00:31:51,240 --> 00:31:57,299
clean to me so okay so now let's try

746
00:31:54,509 --> 00:31:58,980
that and you'll see starts the debugging

747
00:31:57,299 --> 00:32:08,909
from there because I think that's a

748
00:31:58,980 --> 00:32:10,380
little bit better Jimmy all right so

749
00:32:08,910 --> 00:32:13,290
we've got a bogus clip wrecking deck

750
00:32:10,380 --> 00:32:22,020
here that just suggest that we probably

751
00:32:13,289 --> 00:32:24,329
have a bogus offset ya doing so what I'm

752
00:32:22,019 --> 00:32:29,779
assuming happens there and I think this

753
00:32:24,329 --> 00:32:38,309
is probably actually pretty self-evident

754
00:32:29,779 --> 00:32:40,649
so yeah so we have one more thing we

755
00:32:38,309 --> 00:32:44,069
kind of need to deal with which is that

756
00:32:40,650 --> 00:32:46,500
the push buffer element count if we take

757
00:32:44,069 --> 00:32:48,359
a look at what happens here when we push

758
00:32:46,500 --> 00:32:51,660
the sort barrier we need to increment

759
00:32:48,359 --> 00:32:54,799
the push buffer element count for words

760
00:32:51,660 --> 00:32:58,110
but at the end we won't actually have

761
00:32:54,799 --> 00:33:00,559
that many push buffer elements you know

762
00:32:58,109 --> 00:33:00,559
what I'm saying

763
00:33:05,349 --> 00:33:10,849
so I'm not sure exactly where we're

764
00:33:08,179 --> 00:33:13,580
getting that when we output our things

765
00:33:10,849 --> 00:33:16,579
we're trying to output I'm not sure who

766
00:33:13,579 --> 00:33:18,288
decides how many to draw but I assume

767
00:33:16,579 --> 00:33:20,960
that what we would need to do here is

768
00:33:18,288 --> 00:33:25,700
say well since we're only out putting

769
00:33:20,960 --> 00:33:32,509
things in the wok sprite craft since

770
00:33:25,700 --> 00:33:35,600
we're only outputting things sort of

771
00:33:32,509 --> 00:33:37,819
periodically there and the out index

772
00:33:35,599 --> 00:33:41,089
array needs to get advanced right

773
00:33:37,819 --> 00:33:42,889
because we've got sort of the when we

774
00:33:41,089 --> 00:33:46,009
call what Glock spycraft we're passing

775
00:33:42,890 --> 00:33:48,169
this array that's that's got this many

776
00:33:46,009 --> 00:33:49,970
elements in it but it's only going to

777
00:33:48,169 --> 00:33:53,059
end up with that many minus the number

778
00:33:49,970 --> 00:33:55,788
of times we did this loop right so

779
00:33:53,058 --> 00:33:58,849
essentially we need to modify this value

780
00:33:55,788 --> 00:34:01,490
for every time through the loop that we

781
00:33:58,849 --> 00:34:04,069
go extra we're going to have less of

782
00:34:01,490 --> 00:34:06,589
these so i think what i need to do

783
00:34:04,069 --> 00:34:08,239
instead is say something like okay you

784
00:34:06,589 --> 00:34:10,969
know reset this push buffer element

785
00:34:08,239 --> 00:34:12,979
count say okay that's going to equal to

786
00:34:10,969 --> 00:34:15,888
zero and then when we write things out

787
00:34:12,980 --> 00:34:18,469
here we're going to have to increment it

788
00:34:15,889 --> 00:34:22,099
like each time or something like that if

789
00:34:18,469 --> 00:34:23,358
that makes sense hopefully it does you

790
00:34:22,099 --> 00:34:25,099
can see when we come through here you

791
00:34:23,358 --> 00:34:27,168
know we've got sort of this idea of the

792
00:34:25,099 --> 00:34:29,059
out index right at the out index array

793
00:34:27,168 --> 00:34:30,049
and that now kind of needs to be

794
00:34:29,059 --> 00:34:35,090
something that's going to be a little

795
00:34:30,050 --> 00:34:36,679
bit more sort of proactive and in fact I

796
00:34:35,090 --> 00:34:38,450
might say let's just get rid of the walk

797
00:34:36,679 --> 00:34:41,210
sprite craft thing altogether let's

798
00:34:38,449 --> 00:34:43,368
actually put that may be in here and say

799
00:34:41,210 --> 00:34:45,858
all right in that case we know we've got

800
00:34:43,369 --> 00:34:47,929
sort of this input nodes basis we want

801
00:34:45,858 --> 00:34:50,289
the out index array to be something

802
00:34:47,929 --> 00:34:55,309
that's that's kind of more persistent

803
00:34:50,289 --> 00:34:57,769
like so and what we want to do here is

804
00:34:55,309 --> 00:34:59,210
say every time through this loop we're

805
00:34:57,769 --> 00:35:01,280
going to set the input nodes to the sub

806
00:34:59,210 --> 00:35:05,619
entries and then we're going to actually

807
00:35:01,280 --> 00:35:05,619
do this loop itself right in here

808
00:35:10,018 --> 00:35:23,889
oops yeah zooming so in here you know

809
00:35:22,268 --> 00:35:25,808
we're going to start we're going to say

810
00:35:23,889 --> 00:35:27,429
okay let's these are the input nodes

811
00:35:25,809 --> 00:35:29,410
that we have and now we're saying so

812
00:35:27,429 --> 00:35:31,629
that walk spread craft walk we got the

813
00:35:29,409 --> 00:35:33,518
input nodes damson a hit cycle we're

814
00:35:31,630 --> 00:35:34,510
going to restart the hit cycle part and

815
00:35:33,518 --> 00:35:35,739
we're gonna set the input nodes to the

816
00:35:34,510 --> 00:35:37,630
base array but we're going to leave the

817
00:35:35,739 --> 00:35:39,338
out index there because that's kind of

818
00:35:37,630 --> 00:35:41,410
streaming a streaming pointer that must

819
00:35:39,338 --> 00:35:43,538
keep incrementing as we put stuff out

820
00:35:41,409 --> 00:35:47,318
every time we put one of those things

821
00:35:43,539 --> 00:35:48,760
out we want to increment how many there

822
00:35:47,318 --> 00:35:50,409
are now we don't actually have to do

823
00:35:48,760 --> 00:35:52,329
that manually what we could do instead

824
00:35:50,409 --> 00:35:58,629
is just at the end say well okay

825
00:35:52,329 --> 00:36:00,880
wherever the walks out index is relative

826
00:35:58,630 --> 00:36:03,160
to the base pointer that's how many

827
00:36:00,880 --> 00:36:05,380
elements there were right so it's more

828
00:36:03,159 --> 00:36:08,338
like just saying oh hey this is how many

829
00:36:05,380 --> 00:36:11,798
there are you know and this is like

830
00:36:08,338 --> 00:36:15,159
change the total number of things to

831
00:36:11,798 --> 00:36:18,460
reflect how many there are without

832
00:36:15,159 --> 00:36:21,940
barriers it's like doctors that barriers

833
00:36:18,460 --> 00:36:25,358
you know Sam so yeah so in here when we

834
00:36:21,940 --> 00:36:26,559
do our walk through the indices now

835
00:36:25,358 --> 00:36:28,268
we're just going to say go through

836
00:36:26,559 --> 00:36:33,250
however many there are in the sub count

837
00:36:28,268 --> 00:36:39,758
and and output them that way all right

838
00:36:33,250 --> 00:36:41,139
that's not a hero that's a dot and can't

839
00:36:39,759 --> 00:36:42,639
convert from in 30 okay we know that

840
00:36:41,139 --> 00:36:45,098
there's never going to be that many

841
00:36:42,639 --> 00:36:46,179
sprites so I'm comfortable casting down

842
00:36:45,099 --> 00:36:49,119
we're not going to have four billion

843
00:36:46,179 --> 00:36:51,098
sprites haven't helped us I don't think

844
00:36:49,119 --> 00:36:52,930
our code is up to it at the moment so

845
00:36:51,099 --> 00:36:55,690
anyway here we go and now we're actually

846
00:36:52,929 --> 00:36:57,608
running so that's good but we don't

847
00:36:55,690 --> 00:36:59,858
really know what we're doing right we

848
00:36:57,608 --> 00:37:02,828
are running but we don't know for sure

849
00:36:59,858 --> 00:37:04,690
whether we're actually whether any of

850
00:37:02,829 --> 00:37:06,880
the sorting is actually happening right

851
00:37:04,690 --> 00:37:09,700
and you can see that it doesn't appear

852
00:37:06,880 --> 00:37:12,250
to really be doing stuff right per se

853
00:37:09,699 --> 00:37:14,710
because like that top layer is sorting

854
00:37:12,250 --> 00:37:16,389
below the layer that we're on which

855
00:37:14,710 --> 00:37:19,778
doesn't really make a whole lot of sense

856
00:37:16,389 --> 00:37:21,250
right so we're still a little bit wonky

857
00:37:19,778 --> 00:37:24,190
but

858
00:37:21,250 --> 00:37:31,590
uh we're at least getting there we're

859
00:37:24,190 --> 00:37:31,590
starting okay so let's start by saying

860
00:37:31,920 --> 00:37:38,829
what do we want to do here with think of

861
00:37:37,780 --> 00:37:41,170
where I wanted because there's there's

862
00:37:38,829 --> 00:37:43,509
two separate things that can be wrong

863
00:37:41,170 --> 00:37:45,250
here right wrong here right that's good

864
00:37:43,510 --> 00:37:47,650
there's two separate things that could

865
00:37:45,250 --> 00:37:50,739
be problematic one thing that could be

866
00:37:47,650 --> 00:37:52,289
problematic is the relative layer that

867
00:37:50,739 --> 00:37:55,209
we're actually going to be setting down

868
00:37:52,289 --> 00:37:57,130
or the sort like the sort barrier kind

869
00:37:55,210 --> 00:37:59,679
of stuff that we're doing could be wrong

870
00:37:57,130 --> 00:38:01,900
so we could be sending down wrong

871
00:37:59,679 --> 00:38:04,149
information that's one thing we could be

872
00:38:01,900 --> 00:38:07,210
doing the other thing that we could be

873
00:38:04,150 --> 00:38:11,440
doing is we could be making it so that

874
00:38:07,210 --> 00:38:13,840
our sort is somehow not dumping these

875
00:38:11,440 --> 00:38:25,840
things out correctly after we do them

876
00:38:13,840 --> 00:38:28,240
right so which one is it first what I

877
00:38:25,840 --> 00:38:32,500
want to do is I must step in a little

878
00:38:28,239 --> 00:38:33,399
bit to the entity list stuff and I want

879
00:38:32,500 --> 00:38:35,619
to take a look at what's actually

880
00:38:33,400 --> 00:38:38,289
happening when we call when we actually

881
00:38:35,619 --> 00:38:39,730
push these barriers on because I don't

882
00:38:38,289 --> 00:38:42,400
really have any insight that in a minute

883
00:38:39,730 --> 00:38:45,039
at the moment and I would like to get

884
00:38:42,400 --> 00:38:49,660
some so let's take a look at the end of

885
00:38:45,039 --> 00:38:51,599
the index that Ron number 202 so there's

886
00:38:49,659 --> 00:38:56,500
200 entities before we change layers

887
00:38:51,599 --> 00:38:58,750
which isn't quite commensurate with what

888
00:38:56,500 --> 00:39:00,219
we were seeing because we thought 233

889
00:38:58,750 --> 00:39:05,289
was where it started before it's a

890
00:39:00,219 --> 00:39:07,029
little weird but whatever hear me and

891
00:39:05,289 --> 00:39:14,019
then we've got the current absolute Z

892
00:39:07,030 --> 00:39:15,220
lair I want to look at that oops and I

893
00:39:14,019 --> 00:39:17,519
also want to look at the end of these

894
00:39:15,219 --> 00:39:17,519
dealer

895
00:39:18,838 --> 00:39:22,808
so we are going from 0 to 1 that's what

896
00:39:21,159 --> 00:39:24,759
I would have expected we're doing a push

897
00:39:22,809 --> 00:39:29,170
sort barrier on here so here's what I'm

898
00:39:24,760 --> 00:39:31,569
assuming is happening that could be

899
00:39:29,170 --> 00:39:33,250
wrong I'm assuming what's happening here

900
00:39:31,568 --> 00:39:35,469
is that because we're pushing from the

901
00:39:33,250 --> 00:39:37,869
top down we're just getting the reverse

902
00:39:35,469 --> 00:39:39,669
order so hopefully if I'm right about

903
00:39:37,869 --> 00:39:41,440
that we're actually doing everything

904
00:39:39,670 --> 00:39:44,559
correct we're just getting the reverse

905
00:39:41,440 --> 00:39:46,619
order of the sort right i'm not sure but

906
00:39:44,559 --> 00:39:49,030
i think that could be the explanation

907
00:39:46,619 --> 00:39:50,349
because then when we when we pull

908
00:39:49,030 --> 00:39:51,700
through these things in the correct

909
00:39:50,349 --> 00:39:53,338
order we're getting you know we're going

910
00:39:51,699 --> 00:39:55,629
to end up in a situation where there

911
00:39:53,338 --> 00:39:57,788
we're always going to sort in exactly

912
00:39:55,630 --> 00:39:59,710
backwards so let's see if we are sorting

913
00:39:57,789 --> 00:40:05,049
exactly backwards first which i think we

914
00:39:59,710 --> 00:40:08,108
actually are guess it's really no way to

915
00:40:05,048 --> 00:40:11,380
tell I can't curly up higher without

916
00:40:08,108 --> 00:40:13,029
seeing myself so I think that's probably

917
00:40:11,380 --> 00:40:14,650
what's happening I think we are sorting

918
00:40:13,030 --> 00:40:16,089
exactly backwards and that's not that

919
00:40:14,650 --> 00:40:17,260
hard to fix there's a couple of

920
00:40:16,088 --> 00:40:19,659
different ways we could take a look at

921
00:40:17,260 --> 00:40:21,099
that but one thing that might be the

922
00:40:19,659 --> 00:40:22,838
most interesting way to do that is just

923
00:40:21,099 --> 00:40:24,609
to change which one of these things goes

924
00:40:22,838 --> 00:40:27,009
in order because since we're only

925
00:40:24,608 --> 00:40:28,869
working with the sorting stuff now it

926
00:40:27,010 --> 00:40:30,549
seems like maybe the best way to do it

927
00:40:28,869 --> 00:40:32,559
is just to say well when we push sort

928
00:40:30,548 --> 00:40:34,239
stuff on there let's just make sure that

929
00:40:32,559 --> 00:40:36,849
our source stuff always goes in order

930
00:40:34,239 --> 00:40:39,729
and it's the the other stuff that goes

931
00:40:36,849 --> 00:40:41,829
out of order right and that wouldn't be

932
00:40:39,730 --> 00:40:44,559
that hard all we would really have to do

933
00:40:41,829 --> 00:40:47,289
there is say well okay reverse the sense

934
00:40:44,559 --> 00:40:49,869
of these guys so say okay you know we've

935
00:40:47,289 --> 00:40:51,940
got sort entries so the sword entry at

936
00:40:49,869 --> 00:40:54,579
plus the size of a sort bound is going

937
00:40:51,940 --> 00:40:56,318
to be less than wherever the push buffer

938
00:40:54,579 --> 00:41:01,028
is currently at right I could do

939
00:40:56,318 --> 00:41:02,650
something like that so then we would

940
00:41:01,028 --> 00:41:04,588
just have the push buffer at kind of go

941
00:41:02,650 --> 00:41:07,838
down the sort entry at would go up

942
00:41:04,588 --> 00:41:09,699
something like that all right and that

943
00:41:07,838 --> 00:41:11,679
seems pretty fair to me and because this

944
00:41:09,699 --> 00:41:13,239
is kind of fiddly maybe now is a good

945
00:41:11,679 --> 00:41:20,199
time to kind of make these things a

946
00:41:13,239 --> 00:41:23,250
little more rigorous anyway excuse me my

947
00:41:20,199 --> 00:41:23,250
throat's kind of given out today

948
00:41:26,949 --> 00:41:35,179
all right how much time do I have left

949
00:41:28,940 --> 00:41:40,309
I've got 17 minutes 18 minutes like that

950
00:41:35,179 --> 00:41:42,289
I think it's 18 minutes yeah anyway so

951
00:41:40,309 --> 00:41:45,440
what I want to do here is just say like

952
00:41:42,289 --> 00:41:47,059
okay we've got some understandings about

953
00:41:45,440 --> 00:41:50,450
where these things are and they're kind

954
00:41:47,059 --> 00:41:52,279
of baked into the render commands so you

955
00:41:50,449 --> 00:41:56,869
know inside the platform thing we've got

956
00:41:52,280 --> 00:41:58,490
this this notion kind of in here of how

957
00:41:56,869 --> 00:42:00,559
the stuff is is sort of a little bit

958
00:41:58,489 --> 00:42:02,689
finicky so we have the pushover size in

959
00:42:00,559 --> 00:42:04,639
the push buffer base and then we have

960
00:42:02,690 --> 00:42:06,230
the mask push buffer size and then you

961
00:42:04,639 --> 00:42:07,519
here we've got the sword entry at and

962
00:42:06,230 --> 00:42:09,500
the push buffer element count and all

963
00:42:07,519 --> 00:42:11,179
these sorts of things and I think we

964
00:42:09,500 --> 00:42:14,690
probably just want to consolidate these

965
00:42:11,179 --> 00:42:16,399
a little bit here into something maybe a

966
00:42:14,690 --> 00:42:18,950
little bit more sane right because it's

967
00:42:16,400 --> 00:42:21,500
a little bit it's a little bit twiki at

968
00:42:18,949 --> 00:42:24,469
the moment so what we really want to do

969
00:42:21,500 --> 00:42:27,530
is say okay we have a max push buffer

970
00:42:24,469 --> 00:42:29,869
size that's definitely true and then we

971
00:42:27,530 --> 00:42:34,670
have to sort of separate things we have

972
00:42:29,869 --> 00:42:36,949
like a you know sort entry count and we

973
00:42:34,670 --> 00:42:38,150
don't really need a sword entry at we

974
00:42:36,949 --> 00:42:39,469
can really just use the count and

975
00:42:38,150 --> 00:42:40,910
multiply it by the slides because

976
00:42:39,469 --> 00:42:42,709
they're fixed size so they just kind of

977
00:42:40,909 --> 00:42:46,329
go up so we could just say we have a

978
00:42:42,710 --> 00:42:48,860
sword entry count and it goes up right

979
00:42:46,329 --> 00:42:51,739
then we have just a push buffer at

980
00:42:48,860 --> 00:42:53,059
variable which is where which could

981
00:42:51,739 --> 00:42:55,069
start at the top and work its way down

982
00:42:53,059 --> 00:42:58,400
word as we go and we wouldn't have one

983
00:42:55,070 --> 00:43:00,650
of these right and then we can have

984
00:42:58,400 --> 00:43:03,440
another thing which is eventually I

985
00:43:00,650 --> 00:43:05,720
don't know how we did this before I

986
00:43:03,440 --> 00:43:07,130
guess it's in a render prep so inside

987
00:43:05,719 --> 00:43:09,589
render prep we could say we have soared

988
00:43:07,130 --> 00:43:11,180
industries and sorted index count that

989
00:43:09,590 --> 00:43:12,860
would get us out of the business of

990
00:43:11,179 --> 00:43:14,569
having the push buffer element count be

991
00:43:12,860 --> 00:43:16,849
something that's used in that gets

992
00:43:14,570 --> 00:43:18,980
modified and used twice so that would be

993
00:43:16,849 --> 00:43:21,170
good too and push buffer size is not

994
00:43:18,980 --> 00:43:24,760
really relevant anymore so we should be

995
00:43:21,170 --> 00:43:32,360
able to get away with just this I think

996
00:43:24,760 --> 00:43:34,080
well I guess push buffer base and this

997
00:43:32,360 --> 00:43:38,510
is like data at

998
00:43:34,079 --> 00:43:41,599
I think that's a little clearer

999
00:43:38,510 --> 00:43:45,240
conceptualization of what we've got here

1000
00:43:41,599 --> 00:43:48,929
so similarly in there now we know a

1001
00:43:45,239 --> 00:43:50,429
couple things now we know we can sort of

1002
00:43:48,929 --> 00:43:55,099
make a couple in lines here for example

1003
00:43:50,429 --> 00:43:59,789
we could say sorts bright bands you know

1004
00:43:55,099 --> 00:44:01,739
get first sort sprite found or something

1005
00:43:59,789 --> 00:44:04,710
like that we could have something like

1006
00:44:01,739 --> 00:44:09,509
this and when we pass that in Game

1007
00:44:04,710 --> 00:44:14,159
render commands and what we would do

1008
00:44:09,510 --> 00:44:26,730
there is just return whatever the push

1009
00:44:14,159 --> 00:44:29,509
buffer base is yeah so that would be get

1010
00:44:26,730 --> 00:44:32,789
the first sorts sorts of a pound and

1011
00:44:29,510 --> 00:44:35,850
similarly we could well I think that's

1012
00:44:32,789 --> 00:44:38,429
about it it's only real thing that we

1013
00:44:35,849 --> 00:44:40,079
probably need so then when we come up

1014
00:44:38,429 --> 00:44:43,049
here and we say we want to do a push

1015
00:44:40,079 --> 00:44:44,819
sort barrier what we can do there is say

1016
00:44:43,050 --> 00:44:47,880
well let's go ahead and assert that

1017
00:44:44,820 --> 00:44:49,860
we're not going to move past where we

1018
00:44:47,880 --> 00:44:56,490
should move past so we can sort of start

1019
00:44:49,860 --> 00:45:00,450
with this and I guess I could call this

1020
00:44:56,489 --> 00:45:02,159
get sprite boobs don't know what acts

1021
00:45:00,449 --> 00:45:04,789
don't hit there we could call this get

1022
00:45:02,159 --> 00:45:04,789
spray pounds

1023
00:45:16,219 --> 00:45:21,539
and so when I get the sprite bounds I

1024
00:45:19,949 --> 00:45:24,480
now have like a basis of an array that i

1025
00:45:21,539 --> 00:45:31,409
can use and i can say well if you know

1026
00:45:24,480 --> 00:45:34,800
the sprite pounds plus however many i

1027
00:45:31,409 --> 00:45:46,409
have to go so commands sort entry count

1028
00:45:34,800 --> 00:45:52,440
I if I take a look at that and it's less

1029
00:45:46,409 --> 00:45:54,809
i guess i should say plus one and it's

1030
00:45:52,440 --> 00:45:57,990
less than whatever the push buffer data

1031
00:45:54,809 --> 00:46:02,699
at pointer is then it's okay it's okay

1032
00:45:57,989 --> 00:46:04,199
for us to go right and so assuming that

1033
00:46:02,699 --> 00:46:08,399
it actually is i would just say like

1034
00:46:04,199 --> 00:46:14,358
commands sort entry count plus plus you

1035
00:46:08,400 --> 00:46:18,240
know sort sprite bound bound equals mmm

1036
00:46:14,358 --> 00:46:20,069
sprite pounds plus this so that's an ad

1037
00:46:18,239 --> 00:46:31,319
bound call basically in line sorts

1038
00:46:20,070 --> 00:46:33,660
profound push bound and honestly I could

1039
00:46:31,320 --> 00:46:35,340
probably do I could probably do this a

1040
00:46:33,659 --> 00:46:36,329
little bit cleverer I don't know you

1041
00:46:35,340 --> 00:46:41,700
know what I'm not going to do it that

1042
00:46:36,329 --> 00:46:43,170
way let's go do it in the line so I go

1043
00:46:41,699 --> 00:46:45,779
ahead and get one of the bounce out and

1044
00:46:43,170 --> 00:46:47,639
then I don't need to do that anymore and

1045
00:46:45,780 --> 00:46:49,200
I don't need to do that anymore and so

1046
00:46:47,639 --> 00:46:52,940
then I just say like okay there's the

1047
00:46:49,199 --> 00:46:52,939
bound and we're done

1048
00:46:55,409 --> 00:47:02,529
right same thing would happen over here

1049
00:46:59,730 --> 00:47:04,630
so we know what the sizes and now we

1050
00:47:02,530 --> 00:47:06,670
just have to say like okay let's get the

1051
00:47:04,630 --> 00:47:09,099
sprite bands out again since we know we

1052
00:47:06,670 --> 00:47:10,510
need those and now we just say okay if

1053
00:47:09,099 --> 00:47:12,039
the sprite bounds and you know what I'm

1054
00:47:10,510 --> 00:47:13,060
going to cast this to a you ate star as

1055
00:47:12,039 --> 00:47:14,230
well because I kind of wanna do a

1056
00:47:13,059 --> 00:47:15,670
pointer compare here and so is it's not

1057
00:47:14,230 --> 00:47:18,639
safe to do pointer comparison aren't you

1058
00:47:15,670 --> 00:47:21,670
ate spyler oftentimes will do stupid

1059
00:47:18,639 --> 00:47:25,239
stupid stupid things in the name of

1060
00:47:21,670 --> 00:47:28,030
optimization so I want to go ahead and

1061
00:47:25,239 --> 00:47:29,409
do the exact same thing here so I'm

1062
00:47:28,030 --> 00:47:31,240
going to do the exact same comparison

1063
00:47:29,409 --> 00:47:32,440
the only difference now is instead of

1064
00:47:31,239 --> 00:47:34,299
comparing the push buffer data at

1065
00:47:32,440 --> 00:47:35,500
regular i'm going to subtract that size

1066
00:47:34,300 --> 00:47:38,080
so i'm going to assume that i did both

1067
00:47:35,500 --> 00:47:40,300
pushes at once if I did do both pushes

1068
00:47:38,079 --> 00:47:43,029
at once then I'm going to go ahead and

1069
00:47:40,300 --> 00:47:45,250
do the actual operation here so I'm

1070
00:47:43,030 --> 00:47:47,040
going to do a minus equal of the size so

1071
00:47:45,250 --> 00:47:50,590
the push buffer data at moves backwards

1072
00:47:47,039 --> 00:47:52,989
and then the header is doesn't actually

1073
00:47:50,590 --> 00:47:56,079
need to do this part at all it's just

1074
00:47:52,989 --> 00:47:59,709
going to be at the push buffer data at

1075
00:47:56,079 --> 00:48:01,509
value we then do everything else that we

1076
00:47:59,710 --> 00:48:03,909
would normally do when we come down to

1077
00:48:01,510 --> 00:48:06,310
the sort sprite bounds that again is

1078
00:48:03,909 --> 00:48:09,579
just the same push we did up here it

1079
00:48:06,309 --> 00:48:11,500
looks like that and then off we go we

1080
00:48:09,579 --> 00:48:14,110
don't need to do any of these dupes we

1081
00:48:11,500 --> 00:48:17,079
don't need to do any of these and I

1082
00:48:14,110 --> 00:48:18,940
think we're done so at that point we do

1083
00:48:17,079 --> 00:48:20,889
have the aggregate bound stuff that we

1084
00:48:18,940 --> 00:48:24,159
have to clean up a little bit and the

1085
00:48:20,889 --> 00:48:25,809
aggregate bound stuff I guess we don't

1086
00:48:24,159 --> 00:48:28,329
need to do anything with here but just

1087
00:48:25,809 --> 00:48:29,799
to begin and end part of things have to

1088
00:48:28,329 --> 00:48:32,199
be done a little bit differently so when

1089
00:48:29,800 --> 00:48:33,970
we do a begin aggregate sort key and

1090
00:48:32,199 --> 00:48:37,449
we're doing this the first aggregate at

1091
00:48:33,969 --> 00:48:39,069
is going to be a little bit different

1092
00:48:37,449 --> 00:48:41,319
we're not going to do sort entry at

1093
00:48:39,070 --> 00:48:44,890
we're not going to any of this what we

1094
00:48:41,320 --> 00:48:49,300
have to do is get sprite bounds for the

1095
00:48:44,889 --> 00:48:54,940
commands and whatever the current count

1096
00:48:49,300 --> 00:48:56,590
is that's where we want to be right and

1097
00:48:54,940 --> 00:48:59,980
then when we go to the end aggregate

1098
00:48:56,590 --> 00:49:02,050
sort key we come through here and we're

1099
00:48:59,980 --> 00:49:05,559
like okay that's got the commands we

1100
00:49:02,050 --> 00:49:07,330
want to get the first entry and the way

1101
00:49:05,559 --> 00:49:07,900
that we would do that is exactly the

1102
00:49:07,329 --> 00:49:10,798
same way

1103
00:49:07,900 --> 00:49:12,970
I in fact I guess now I think about it

1104
00:49:10,798 --> 00:49:16,449
if these things are being pushed in

1105
00:49:12,969 --> 00:49:19,298
order how did we want to do this exactly

1106
00:49:16,449 --> 00:49:21,848
first aggregate at we wanted to start

1107
00:49:19,298 --> 00:49:33,159
with whoever our first aggregate was so

1108
00:49:21,849 --> 00:49:34,660
yeah so this is just going to be think

1109
00:49:33,159 --> 00:49:37,118
literally just that what is for what is

1110
00:49:34,659 --> 00:49:42,909
first aggregate at is that just a value

1111
00:49:37,119 --> 00:49:47,980
I guess so I guess it's really just this

1112
00:49:42,909 --> 00:49:49,298
I think that's what we actually want so

1113
00:49:47,980 --> 00:49:58,298
then we would say like okay we've got a

1114
00:49:49,298 --> 00:50:01,509
render group spray pounds right so our

1115
00:49:58,298 --> 00:50:04,599
first aggregate we start there we go

1116
00:50:01,510 --> 00:50:06,069
through however many we had and that's

1117
00:50:04,599 --> 00:50:08,170
getting incremented all the time I guess

1118
00:50:06,068 --> 00:50:10,210
I don't know that we really need to

1119
00:50:08,170 --> 00:50:11,230
count this anymore I'm not even sure why

1120
00:50:10,210 --> 00:50:13,119
we were counting it in the first place

1121
00:50:11,230 --> 00:50:14,440
to be completely honest with you it

1122
00:50:13,119 --> 00:50:16,240
doesn't make a whole lot of sense to me

1123
00:50:14,440 --> 00:50:23,679
why we would need to count that it seems

1124
00:50:16,239 --> 00:50:24,879
like a Greek account is unnecessary it

1125
00:50:23,679 --> 00:50:27,639
seems like all we really need to do

1126
00:50:24,880 --> 00:50:29,650
their say well okay when we're done we

1127
00:50:27,639 --> 00:50:31,420
knew what the aggregate count is the

1128
00:50:29,650 --> 00:50:36,039
aggregate count is just whatever the

1129
00:50:31,420 --> 00:50:43,000
count is now minus whatever the count

1130
00:50:36,039 --> 00:50:47,140
was then right so it seems like that's a

1131
00:50:43,000 --> 00:50:52,989
saner way to do that we then got some

1132
00:50:47,139 --> 00:50:56,710
stuffs to do alright so let's take a

1133
00:50:52,989 --> 00:50:58,209
look get sword entries is now I guess

1134
00:50:56,710 --> 00:51:00,789
that was actually the call that we had

1135
00:50:58,210 --> 00:51:03,909
before so we could actually call it gets

1136
00:51:00,789 --> 00:51:06,309
or ten trees if we wanted to in fact

1137
00:51:03,909 --> 00:51:11,259
maybe I should just do that so we call

1138
00:51:06,309 --> 00:51:15,150
this get sort entries like so I and

1139
00:51:11,260 --> 00:51:15,150
we'll just leave it at that hmm

1140
00:51:16,219 --> 00:51:34,919
cuz that's really what there anyway one

1141
00:51:23,639 --> 00:51:37,079
more should be it is alright so if the

1142
00:51:34,920 --> 00:51:40,200
you and 8th star spray pounds will the

1143
00:51:37,079 --> 00:51:42,809
laws this that's missing one of those i

1144
00:51:40,199 --> 00:51:47,009
don't know i had an extra one nobody

1145
00:51:42,809 --> 00:51:51,570
knows and let's see push buffer size so

1146
00:51:47,010 --> 00:51:53,760
the offset in this case is a little bit

1147
00:51:51,570 --> 00:51:59,309
of pointer arithmetic so we've got our

1148
00:51:53,760 --> 00:52:02,750
push buffer data at and it's really just

1149
00:51:59,309 --> 00:52:07,440
whatever the max fish buffer size is so

1150
00:52:02,750 --> 00:52:15,139
it would be the offset is the max fish

1151
00:52:07,440 --> 00:52:15,139
buffer size minus however far we've gone

1152
00:52:16,610 --> 00:52:29,849
so far and I could just track that value

1153
00:52:22,110 --> 00:52:31,230
directly I'm not sure really we're doing

1154
00:52:29,849 --> 00:52:32,309
some bunch of 64-bit arithmetic here

1155
00:52:31,230 --> 00:52:33,869
when we really could just be doing

1156
00:52:32,309 --> 00:52:36,900
32-bit earth that doesn't really matter

1157
00:52:33,869 --> 00:52:42,230
but it is worth noting anyway so let's

1158
00:52:36,900 --> 00:52:47,280
see a translation for first size u32 a

1159
00:52:42,230 --> 00:52:48,539
group aggregate count equals zero so in

1160
00:52:47,280 --> 00:52:55,170
this case all we really need to know is

1161
00:52:48,539 --> 00:53:01,309
is the first aggregate at first agar at

1162
00:52:55,170 --> 00:53:01,309
it does that equal the current sort

1163
00:53:05,518 --> 00:53:16,358
current sort count here minus one right

1164
00:53:13,018 --> 00:53:23,588
meaning is the one that we just are we

1165
00:53:16,358 --> 00:53:26,380
just added is that the first one and

1166
00:53:23,588 --> 00:53:30,940
let's get those commands up to the right

1167
00:53:26,380 --> 00:53:34,028
part there we go ok so for pushing a

1168
00:53:30,940 --> 00:53:38,920
clip wrecked on it looks like the

1169
00:53:34,028 --> 00:53:41,619
pushing the clip wrecked on is basically

1170
00:53:38,920 --> 00:53:42,729
the same operation as we have above I'm

1171
00:53:41,619 --> 00:53:44,289
going to think about whether I want to

1172
00:53:42,728 --> 00:53:49,478
abstract that at all let me see what

1173
00:53:44,289 --> 00:53:53,039
else we've got here sword entry count is

1174
00:53:49,478 --> 00:53:57,998
just now sword into account like so oh

1175
00:53:53,039 --> 00:54:06,359
except it's not so sword entry count is

1176
00:53:57,998 --> 00:54:06,358
actually prep sorted index cap

1177
00:54:08,969 --> 00:54:21,989
what did I call that yeah i did call it

1178
00:54:13,409 --> 00:54:23,759
sort of mix down i would like you to

1179
00:54:21,989 --> 00:54:25,919
please get out of my way i can't see

1180
00:54:23,760 --> 00:54:28,380
when handmade heroes little banners up

1181
00:54:25,920 --> 00:54:30,059
on there go away five minute warning i

1182
00:54:28,380 --> 00:54:33,829
know i only have five minutes left thank

1183
00:54:30,059 --> 00:54:36,539
you you have told me fade away please

1184
00:54:33,829 --> 00:54:39,960
say it away all right fine don't fade

1185
00:54:36,539 --> 00:54:42,358
away all right so what's the problem

1186
00:54:39,960 --> 00:54:44,960
here push by for element count when

1187
00:54:42,358 --> 00:54:47,730
we're doing the global show sort groups

1188
00:54:44,960 --> 00:54:50,880
that's going to loop through this okay

1189
00:54:47,730 --> 00:54:54,030
so that's really again probably just

1190
00:54:50,880 --> 00:54:57,420
going to be the prep group there because

1191
00:54:54,030 --> 00:54:58,740
that's we really we really want these I

1192
00:54:57,420 --> 00:55:04,440
think that was kind of a little bit

1193
00:54:58,739 --> 00:55:11,209
wrong before but it's prep did yeah it's

1194
00:55:04,440 --> 00:55:13,200
a it's prep sorted in just indices oh

1195
00:55:11,210 --> 00:55:17,929
well no because it's trying the sprite

1196
00:55:13,199 --> 00:55:17,929
bounds directly so it's sort entry count

1197
00:55:18,260 --> 00:55:25,970
and get sword entries and where we go

1198
00:55:23,608 --> 00:55:29,029
through here presumably we also want to

1199
00:55:25,969 --> 00:55:29,029
make sure

1200
00:55:35,769 --> 00:55:40,750
then it's not equal to the sprite

1201
00:55:38,130 --> 00:55:49,329
barrier offset value you don't want to

1202
00:55:40,750 --> 00:55:50,619
draw that all right let's see the push

1203
00:55:49,329 --> 00:55:57,250
beverlyn cow is not a member of game

1204
00:55:50,619 --> 00:56:03,579
render commands really and in this case

1205
00:55:57,250 --> 00:56:07,360
again it's going to be prep sorted index

1206
00:56:03,579 --> 00:56:19,059
count and I probably could just go ahead

1207
00:56:07,360 --> 00:56:23,980
and here alright for sword entries this

1208
00:56:19,059 --> 00:56:25,570
is just sort of entry count and now up

1209
00:56:23,980 --> 00:56:27,130
here where we do push by Elham account

1210
00:56:25,570 --> 00:56:30,789
what I really want to do is I really

1211
00:56:27,130 --> 00:56:32,860
want to write to prep so really what we

1212
00:56:30,789 --> 00:56:38,949
want to do here let me go ahead and see

1213
00:56:32,860 --> 00:56:45,780
where that prep is so here's prep for

1214
00:56:38,949 --> 00:56:48,789
render and I believe prep for render

1215
00:56:45,780 --> 00:56:51,490
yeah it goes ahead and does sort of the

1216
00:56:48,789 --> 00:56:54,099
sword entries bit here where it puts the

1217
00:56:51,489 --> 00:56:56,349
sort of indices in here but I think what

1218
00:56:54,099 --> 00:56:58,480
I would rather do is I'd rather just

1219
00:56:56,349 --> 00:57:00,069
pass that along and have it fill it out

1220
00:56:58,480 --> 00:57:03,369
itself because it really needs to fill

1221
00:57:00,070 --> 00:57:04,990
out both of those things right so what

1222
00:57:03,369 --> 00:57:10,949
actually has to happen and here is it

1223
00:57:04,989 --> 00:57:16,500
has to say like oh okay game render prep

1224
00:57:10,949 --> 00:57:21,819
prep in here we would say you know prep

1225
00:57:16,500 --> 00:57:27,119
sorted indices result prep sorted index

1226
00:57:21,820 --> 00:57:27,120
count equals whatever it equals

1227
00:57:30,429 --> 00:57:36,909
right just a little bit cleaner okay so

1228
00:57:34,969 --> 00:57:40,099
getting down to the last ones here a

1229
00:57:36,909 --> 00:57:42,109
render command struct we get what are we

1230
00:57:40,099 --> 00:57:48,920
doing initially they can enter inside

1231
00:57:42,110 --> 00:57:51,680
your list to you eight oh yeah i see so

1232
00:57:48,920 --> 00:57:52,970
render command struct we just have to

1233
00:57:51,679 --> 00:57:54,379
kind of clean this up a little bit we've

1234
00:57:52,969 --> 00:57:56,329
got the width the height the back push

1235
00:57:54,380 --> 00:57:58,940
buffer size sort entry count still

1236
00:57:56,329 --> 00:58:01,009
correct the push buffer base is also

1237
00:57:58,940 --> 00:58:02,920
correct but now before we get into the

1238
00:58:01,010 --> 00:58:05,660
things we then have to kind of say well

1239
00:58:02,920 --> 00:58:07,700
the pushed buffer plus the max push

1240
00:58:05,659 --> 00:58:10,460
buffer size is actually where we would

1241
00:58:07,699 --> 00:58:13,279
start pushing data so that's got to look

1242
00:58:10,460 --> 00:58:15,860
like that and then I think we're pretty

1243
00:58:13,280 --> 00:58:22,700
much good to go and it does look like

1244
00:58:15,860 --> 00:58:27,250
that's true all right all right so

1245
00:58:22,699 --> 00:58:34,129
pushing clip Rex on push buffer data at

1246
00:58:27,250 --> 00:58:40,369
minus the size in this case we just want

1247
00:58:34,130 --> 00:58:43,820
to know whether whether that is going to

1248
00:58:40,369 --> 00:58:51,980
violate our size so we have our sword

1249
00:58:43,820 --> 00:58:57,730
entries for this command set and we're

1250
00:58:51,980 --> 00:58:57,730
just going to add how many there

1251
00:59:06,119 --> 00:59:21,219
and I think that's about it so then we

1252
00:59:10,119 --> 00:59:23,199
would just say push by for data at we're

1253
00:59:21,219 --> 00:59:26,500
going to go down by however much we need

1254
00:59:23,199 --> 00:59:29,469
and then we're just going to use it like

1255
00:59:26,500 --> 00:59:30,699
so all right so that should probably

1256
00:59:29,469 --> 00:59:32,019
crash and burn because I didn't get a

1257
00:59:30,699 --> 00:59:34,119
chance to actually go back through it

1258
00:59:32,019 --> 00:59:36,489
and make sure that it all works right so

1259
00:59:34,119 --> 00:59:38,259
that's a bit of a problem I hate to

1260
00:59:36,489 --> 00:59:40,329
leave it in that state but it is almost

1261
00:59:38,260 --> 00:59:44,380
time for Q&amp;A I'm going to take a brief

1262
00:59:40,329 --> 00:59:54,969
look at it just to double check here but

1263
00:59:44,380 --> 00:59:56,619
yeah we will see anyway I oh dear that's

1264
00:59:54,969 --> 01:00:00,309
an interesting current clip rekt value

1265
00:59:56,619 --> 01:00:06,190
to say the very least where does that

1266
01:00:00,309 --> 01:00:08,820
fly a comfort by the way that should be

1267
01:00:06,190 --> 01:00:12,869
from platform dead hate shouldn't it oh

1268
01:00:08,820 --> 01:00:12,870
no it's probably from render group

1269
01:00:12,929 --> 01:00:23,469
there's current click right ok so let's

1270
01:00:19,809 --> 01:00:24,969
do one quick thing here I just want to

1271
01:00:23,469 --> 01:00:26,619
do a couple of things while they're

1272
01:00:24,969 --> 01:00:30,250
fresh on my mind and then I can leave it

1273
01:00:26,619 --> 01:00:32,679
and we can debug it tomorrow so yeah

1274
01:00:30,250 --> 01:00:35,079
when I'm doing this I kind of want this

1275
01:00:32,679 --> 01:00:36,609
stuff to be a little more systemic I

1276
01:00:35,079 --> 01:00:39,670
don't like how it's duplicated in all

1277
01:00:36,610 --> 01:00:43,180
these places right so what I would like

1278
01:00:39,670 --> 01:00:45,130
to do is something like a you know in

1279
01:00:43,179 --> 01:00:56,639
line you know maybe there's like a

1280
01:00:45,130 --> 01:00:59,140
struct push buffer result or something

1281
01:00:56,639 --> 01:01:04,449
and the push buffer result will have a

1282
01:00:59,139 --> 01:01:10,049
sprite bound sword entry and avoid star

1283
01:01:04,449 --> 01:01:10,049
for the data or a header I guess

1284
01:01:15,159 --> 01:01:19,309
yeah and I think what I'd like to do

1285
01:01:17,300 --> 01:01:21,560
there is make it so that that operation

1286
01:01:19,309 --> 01:01:25,940
is sort of some kind of coherent

1287
01:01:21,559 --> 01:01:31,219
operation where you like push buffer you

1288
01:01:25,940 --> 01:01:41,240
give it the render group and it does the

1289
01:01:31,219 --> 01:01:42,859
operation that you were going to do so

1290
01:01:41,239 --> 01:01:46,189
in this operation i would say okay

1291
01:01:42,860 --> 01:01:51,559
you're going to push the push buffer you

1292
01:01:46,190 --> 01:01:55,309
go ahead and start assuming you didn't

1293
01:01:51,559 --> 01:01:59,150
get it we figure out whatever the size

1294
01:01:55,309 --> 01:02:00,500
is so we say like oh the sword entry

1295
01:01:59,150 --> 01:02:05,539
count that you're trying to push and the

1296
01:02:00,500 --> 01:02:07,130
data size right so then we say okay if

1297
01:02:05,539 --> 01:02:09,559
we want to figure out where that is we

1298
01:02:07,130 --> 01:02:11,210
figure out where the sprite bands are we

1299
01:02:09,559 --> 01:02:13,389
say however many there are right now

1300
01:02:11,210 --> 01:02:16,730
plus however many you are trying to add

1301
01:02:13,389 --> 01:02:18,619
is how you know is where that point is

1302
01:02:16,730 --> 01:02:21,260
going to be the push buffer data at

1303
01:02:18,619 --> 01:02:24,230
minus whatever the sizes that you were

1304
01:02:21,260 --> 01:02:26,870
trying to push for data that's where

1305
01:02:24,230 --> 01:02:31,969
that's going to be and as long as they

1306
01:02:26,869 --> 01:02:34,940
didn't cross then we're okay we would

1307
01:02:31,969 --> 01:02:37,309
then update by the data size and that

1308
01:02:34,940 --> 01:02:44,570
header would be our result wherever that

1309
01:02:37,309 --> 01:02:47,779
is right like so and that's all we would

1310
01:02:44,570 --> 01:02:56,620
do then similarly to get the entry it

1311
01:02:47,780 --> 01:03:00,050
would just be that wherever we were and

1312
01:02:56,619 --> 01:03:03,139
then we would go ahead and increment the

1313
01:03:00,050 --> 01:03:08,840
sword entry count by however many sword

1314
01:03:03,139 --> 01:03:11,150
entries we were trying to have right so

1315
01:03:08,840 --> 01:03:12,920
that way we can just do this much more

1316
01:03:11,150 --> 01:03:15,200
cleanly and know that everyone's using

1317
01:03:12,920 --> 01:03:18,650
the same code we can just say that you

1318
01:03:15,199 --> 01:03:22,659
know there's a push the push equals push

1319
01:03:18,650 --> 01:03:22,660
buffer render group

1320
01:03:22,909 --> 01:03:28,889
what did you want I wanted one sort

1321
01:03:25,530 --> 01:03:35,820
group and no data so that's what I asked

1322
01:03:28,889 --> 01:03:52,079
for and then I just go ahead and if I

1323
01:03:35,820 --> 01:03:53,730
got it I set it up makes sense and so

1324
01:03:52,079 --> 01:03:55,769
then similarly here we would do exactly

1325
01:03:53,730 --> 01:03:59,670
the same thing also this I guess doesn't

1326
01:03:55,769 --> 01:04:00,960
even need to have that anymore so here

1327
01:03:59,670 --> 01:04:08,639
is actually the same thing I would say

1328
01:04:00,960 --> 01:04:10,889
oh ok I want to push I know I want to

1329
01:04:08,639 --> 01:04:15,449
push one sword entry and this amount of

1330
01:04:10,889 --> 01:04:17,789
size on I can get rid of these Thank of

1331
01:04:15,449 --> 01:04:22,799
them well I'm going to need at least one

1332
01:04:17,789 --> 01:04:29,630
of those mm-hmm but then assuming that I

1333
01:04:22,800 --> 01:04:31,920
got it i'll go ahead and say all right I

1334
01:04:29,630 --> 01:04:38,220
we know where the header is the header

1335
01:04:31,920 --> 01:04:40,050
comes from here everything else happens

1336
01:04:38,219 --> 01:04:43,759
exactly the same we know the sprite

1337
01:04:40,050 --> 01:04:43,760
bound is right Brown comes from here

1338
01:04:45,679 --> 01:04:52,519
everything else happens the same and

1339
01:04:48,690 --> 01:04:52,519
then I think we're done right

1340
01:05:01,119 --> 01:05:06,889
and then finally there's clear or

1341
01:05:04,969 --> 01:05:08,089
whatever was the push clear push clip

1342
01:05:06,889 --> 01:05:12,409
wreck that's what it was push clip

1343
01:05:08,090 --> 01:05:31,220
Brecht so for push clip rekt again I can

1344
01:05:12,409 --> 01:05:35,859
do exactly the same thing so this one's

1345
01:05:31,219 --> 01:05:40,069
the opposite it has actual size to push

1346
01:05:35,860 --> 01:05:42,260
but it doesn't it wants to push size but

1347
01:05:40,070 --> 01:05:44,330
no data I'm sorry it wants which data

1348
01:05:42,260 --> 01:05:48,200
but no sword entry because the clip

1349
01:05:44,329 --> 01:05:49,909
backs don't get sorted so all we have to

1350
01:05:48,199 --> 01:05:57,379
do is say okay assuming that you've got

1351
01:05:49,909 --> 01:06:01,969
a sword entry from the push whatever it

1352
01:05:57,380 --> 01:06:07,280
is are now sort entry sorry so you got

1353
01:06:01,969 --> 01:06:10,329
data from the push off you go and I

1354
01:06:07,280 --> 01:06:10,330
think I actually call that header

1355
01:06:22,659 --> 01:06:31,129
there we go all right all right so I'm

1356
01:06:29,570 --> 01:06:36,650
going to leave that and go to a brief

1357
01:06:31,130 --> 01:06:37,730
Q&amp;A I just wanted to make that oops but

1358
01:06:36,650 --> 01:06:39,200
then we're going to have to debug this

1359
01:06:37,730 --> 01:06:41,329
tomorrow because this is going to crash

1360
01:06:39,199 --> 01:06:43,039
because we didn't actually fix any bugs

1361
01:06:41,329 --> 01:06:48,409
I just want it to be a little bit

1362
01:06:43,039 --> 01:06:51,650
cleaner if that makes sense that's

1363
01:06:48,409 --> 01:06:59,409
interesting I actually got to know there

1364
01:06:51,650 --> 01:06:59,410
though maybe I'll take a look

1365
01:07:04,269 --> 01:07:23,610
ah mr. assignment so actually that is

1366
01:07:17,860 --> 01:07:23,610
supposed to be result not spurn entry

1367
01:07:26,429 --> 01:07:39,429
and I looks good all right so Africa and

1368
01:07:35,849 --> 01:07:41,139
political crisis in place we do and so

1369
01:07:39,429 --> 01:07:43,389
then we just have to do tomorrow is

1370
01:07:41,139 --> 01:07:45,519
figure out why we're getting ahead of

1371
01:07:43,389 --> 01:07:51,099
crash course you guys all get to debug

1372
01:07:45,519 --> 01:07:55,539
this on your own what are you going to

1373
01:07:51,099 --> 01:08:02,170
do so all right now it will actually do

1374
01:07:55,539 --> 01:08:04,960
the QA for reals sorry for the false

1375
01:08:02,170 --> 01:08:09,000
teasing QA now we can go to the actual

1376
01:08:04,960 --> 01:08:09,000
Q&amp;A and talk about it some more

1377
01:08:45,060 --> 01:09:10,039
no questions no questions meet George

1378
01:09:07,859 --> 01:09:10,039
Jetson

1379
01:09:19,439 --> 01:09:24,019
that clip breakout is so bizarre

1380
01:09:28,719 --> 01:09:33,548
I would have expected if it was some

1381
01:09:31,960 --> 01:09:40,078
memory trouncing there I would have

1382
01:09:33,548 --> 01:09:40,078
expected that to be a little different

1383
01:09:53,140 --> 01:10:22,400
no queues so it's just like bogus right

1384
01:10:10,069 --> 01:10:33,340
off the bat right off that bat someone

1385
01:10:22,399 --> 01:10:33,339
want to tell me why AHA that's why

1386
01:10:39,180 --> 01:10:42,440
that's why I right there

1387
01:10:43,939 --> 01:10:59,448
because this is initialized to a bogus

1388
01:10:46,399 --> 01:11:01,988
value so this clip Rick count so we have

1389
01:10:59,448 --> 01:11:08,719
the width the height the max push buffer

1390
01:11:01,988 --> 01:11:13,189
size the zero the push buffer and data

1391
01:11:08,719 --> 01:11:19,369
at we've got the clear the last manual

1392
01:11:13,189 --> 01:11:22,689
sort key and there we go so that was

1393
01:11:19,369 --> 01:11:22,689
that that was that problem

1394
01:11:33,579 --> 01:11:45,670
can we render it to clip let go and

1395
01:11:44,380 --> 01:11:46,810
these should all be initialized to zero

1396
01:11:45,670 --> 01:11:49,109
anyway I don't even know why those are

1397
01:11:46,810 --> 01:11:49,110
all there

1398
01:12:01,250 --> 01:12:05,760
you mentioned earlier that the compiler

1399
01:12:03,840 --> 01:12:07,819
would optimize the code making pointer

1400
01:12:05,760 --> 01:12:12,659
comparison unsafe when does that happen

1401
01:12:07,819 --> 01:12:14,789
thanks for the stream so i didn't spend

1402
01:12:12,659 --> 01:12:16,349
a lot of time looking at whether that

1403
01:12:14,789 --> 01:12:28,939
was actually a case where that would

1404
01:12:16,350 --> 01:12:28,940
happen uh but here's sort of the idea I

1405
01:12:28,970 --> 01:12:51,989
so let's say that we have a block of

1406
01:12:36,569 --> 01:12:53,488
memory and we help so i think i'm going

1407
01:12:51,988 --> 01:12:58,619
to tell you the case where it does mess

1408
01:12:53,488 --> 01:13:02,399
up thinking about the case that i

1409
01:12:58,619 --> 01:13:06,109
actually did I don't think it would ever

1410
01:13:02,399 --> 01:13:09,389
mess that up but I don't know I never

1411
01:13:06,109 --> 01:13:12,839
put would put one past the compilers so

1412
01:13:09,390 --> 01:13:14,700
there's a thing that's basically I don't

1413
01:13:12,840 --> 01:13:17,010
remember the term they use in the spec

1414
01:13:14,699 --> 01:13:25,229
but there's basically like a memory

1415
01:13:17,010 --> 01:13:27,090
region or allocation or something that

1416
01:13:25,229 --> 01:13:28,889
they talk about in the sea specification

1417
01:13:27,090 --> 01:13:32,310
which basically says that let's say I

1418
01:13:28,890 --> 01:13:34,320
have a pointer to a type okay so I've

1419
01:13:32,310 --> 01:13:39,720
got you know a type and maybe that type

1420
01:13:34,319 --> 01:13:48,929
is you know 12 bytes if I then have a

1421
01:13:39,720 --> 01:13:50,760
type star a and a type star B and I talk

1422
01:13:48,930 --> 01:13:56,159
about these two types of the compiler in

1423
01:13:50,760 --> 01:14:00,360
some arithmetic way so I say hey I would

1424
01:13:56,159 --> 01:14:03,139
like to compute a minus B because of the

1425
01:14:00,359 --> 01:14:08,849
spec and the people who wrote it who I

1426
01:14:03,140 --> 01:14:13,450
always pretty much disagree with the

1427
01:14:08,850 --> 01:14:16,450
default assumption for the compiler

1428
01:14:13,449 --> 01:14:19,689
is that these two things are aligned to

1429
01:14:16,449 --> 01:14:22,479
each other so that means that a and B

1430
01:14:19,689 --> 01:14:26,949
are an even multiple of 12 bytes away

1431
01:14:22,479 --> 01:14:29,919
from each other always right this one

1432
01:14:26,949 --> 01:14:31,599
can't be 13 bytes away from this one or

1433
01:14:29,920 --> 01:14:33,550
something like that even though that

1434
01:14:31,600 --> 01:14:36,010
would be totally valid that's not

1435
01:14:33,550 --> 01:14:37,720
allowed because what the spec says is

1436
01:14:36,010 --> 01:14:40,270
that any two pointers that you do a

1437
01:14:37,720 --> 01:14:44,230
rhythmic MIT arithmetic between are

1438
01:14:40,270 --> 01:14:46,900
assumed to come to come in a contiguous

1439
01:14:44,229 --> 01:14:50,500
array where they would could each be

1440
01:14:46,899 --> 01:14:53,170
numbered as a slot right so it's

1441
01:14:50,500 --> 01:14:55,239
basically like okay you know if a was

1442
01:14:53,170 --> 01:14:57,069
here and be was here then we assumed

1443
01:14:55,239 --> 01:14:58,630
this is 12 bytes this is 12 bytes this

1444
01:14:57,069 --> 01:15:03,549
is 12 bytes this is 12 bytes and 12

1445
01:14:58,630 --> 01:15:08,230
bytes right B cannot appear here it's

1446
01:15:03,550 --> 01:15:15,039
simply not allowed right so rather than

1447
01:15:08,229 --> 01:15:27,369
a minus B being you eight star a minus u

1448
01:15:15,039 --> 01:15:29,800
8 star B / sizeof star a this is what

1449
01:15:27,369 --> 01:15:31,149
you might expect right you might expect

1450
01:15:29,800 --> 01:15:33,100
to take the difference of the pointers

1451
01:15:31,149 --> 01:15:36,729
the action marek values and then divided

1452
01:15:33,100 --> 01:15:39,370
by however big the thing was that

1453
01:15:36,729 --> 01:15:42,279
they're pointing to that is not what

1454
01:15:39,369 --> 01:15:44,349
actually happens the compiler is free to

1455
01:15:42,279 --> 01:15:46,960
do all sorts of arithmetic nonsense that

1456
01:15:44,350 --> 01:15:48,280
it wants to wear it assumes what these

1457
01:15:46,960 --> 01:15:50,560
pointers actually point to and what

1458
01:15:48,279 --> 01:15:53,559
their base values are and so you have to

1459
01:15:50,560 --> 01:15:54,940
be careful so by force of habit and

1460
01:15:53,560 --> 01:16:00,310
having been burned by compiler

1461
01:15:54,939 --> 01:16:03,759
awesomeness like this in the past what I

1462
01:16:00,310 --> 01:16:06,160
generally do is when I have a buffer

1463
01:16:03,760 --> 01:16:09,130
like this where I'm sticking things into

1464
01:16:06,159 --> 01:16:11,590
the buffer you know even if they happen

1465
01:16:09,130 --> 01:16:13,600
to all be aligned properly I will often

1466
01:16:11,590 --> 01:16:15,579
convert to you eight stars before i do

1467
01:16:13,600 --> 01:16:18,610
any kind of pointer arithmetic with them

1468
01:16:15,579 --> 01:16:20,979
because I'm not confident the compiler

1469
01:16:18,609 --> 01:16:23,639
won't have some weird spec think can do

1470
01:16:20,979 --> 01:16:23,639
to mess me up

1471
01:16:32,250 --> 01:16:35,239
so make sense

1472
01:16:36,680 --> 01:16:40,130
hopefully that makes sense

1473
01:16:52,380 --> 01:16:55,380
alright

1474
01:16:59,719 --> 01:17:07,590
so I think we're done for today it is

1475
01:17:02,039 --> 01:17:10,560
630 so I will be back tomorrow to finish

1476
01:17:07,590 --> 01:17:13,409
that up for the time being we're going

1477
01:17:10,560 --> 01:17:15,150
to have to leave it in a crash restate I

1478
01:17:13,409 --> 01:17:18,329
don't think it'll be very hard to debug

1479
01:17:15,149 --> 01:17:20,849
this so anyone who wants to do that for

1480
01:17:18,329 --> 01:17:22,319
homework go right ahead but I probably

1481
01:17:20,850 --> 01:17:24,150
won't look at the forum still tomorrow

1482
01:17:22,319 --> 01:17:26,460
because I usually like to debug it

1483
01:17:24,149 --> 01:17:30,960
myself on stream and this is going to be

1484
01:17:26,460 --> 01:17:34,159
I think not a pic Lee hard one but if

1485
01:17:30,960 --> 01:17:37,679
you want a little extra homework to do

1486
01:17:34,159 --> 01:17:40,170
download the source code tonight and see

1487
01:17:37,679 --> 01:17:42,119
if you can find it because you should be

1488
01:17:40,170 --> 01:17:43,679
able to just step through and watch

1489
01:17:42,119 --> 01:17:46,649
what's happening with the pointers now

1490
01:17:43,679 --> 01:17:48,329
and validate that everything gets put

1491
01:17:46,649 --> 01:17:50,099
where it's supposed to be put and at

1492
01:17:48,329 --> 01:17:52,559
some point you should find something

1493
01:17:50,100 --> 01:17:56,780
that does not get foot where it needs to

1494
01:17:52,560 --> 01:18:02,179
get put so that's up to you alright

1495
01:17:56,779 --> 01:18:02,179
that's about it i am going to wrap it up

1496
01:18:02,689 --> 01:18:05,729
thank you everyone for joining me for

1497
01:18:04,500 --> 01:18:07,469
the episode of handmade hero it's been a

1498
01:18:05,729 --> 01:18:09,119
pleasure coding with us always if you

1499
01:18:07,469 --> 01:18:11,310
would like to follow along with the

1500
01:18:09,119 --> 01:18:13,349
series at home you can always pre-order

1501
01:18:11,310 --> 01:18:15,090
the game on handmade hero or get comes

1502
01:18:13,350 --> 01:18:17,760
with a source code so you can follow

1503
01:18:15,090 --> 01:18:21,690
along at home we also have a forum site

1504
01:18:17,760 --> 01:18:23,369
if you want to oh thank you drawing

1505
01:18:21,689 --> 01:18:24,689
tablet but also a form fight if you want

1506
01:18:23,369 --> 01:18:26,039
to ask questions you can go there and

1507
01:18:24,689 --> 01:18:27,569
post them we have a patreon page

1508
01:18:26,039 --> 01:18:28,920
transport the video series a schedule

1509
01:18:27,569 --> 01:18:30,719
bot that tells you when we're going to

1510
01:18:28,920 --> 01:18:33,840
be live in an episode guide if you want

1511
01:18:30,719 --> 01:18:35,010
to catch up on old episodes that is it

1512
01:18:33,840 --> 01:18:37,469
for today I will be back here tomorrow

1513
01:18:35,010 --> 01:18:39,270
at five p.m. pacific daylight time to

1514
01:18:37,469 --> 01:18:42,420
show wherever that bug is we will find

1515
01:18:39,270 --> 01:18:45,000
it and then we will finish our sort

1516
01:18:42,420 --> 01:18:46,920
that's about it I hope you have fun

1517
01:18:45,000 --> 01:18:50,238
coding till then and I will see you guys

1518
01:18:46,920 --> 01:18:50,239
on the unit tickety's everyone

