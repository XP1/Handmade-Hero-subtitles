1
00:00:00,030 --> 00:00:05,370
if anything we should be looking for

2
00:00:02,250 --> 00:00:06,778
technologies that allow us to reduce

3
00:00:05,370 --> 00:00:09,419
latency oh I'm not supposed to be

4
00:00:06,778 --> 00:00:11,280
talking I'm supposed to say hello

5
00:00:09,419 --> 00:00:13,230
everyone welcome to handmade Hiro sure

6
00:00:11,279 --> 00:00:18,118
he could a complete-game live on stream

7
00:00:13,230 --> 00:00:20,070
I so sorry I was in the middle of saying

8
00:00:18,118 --> 00:00:24,719
something about the fact that I don't

9
00:00:20,070 --> 00:00:27,599
like games streaming welcome to handmade

10
00:00:24,719 --> 00:00:30,358
Hiro today we're gonna be working on

11
00:00:27,599 --> 00:00:31,890
some lighting stuff if you haven't seen

12
00:00:30,359 --> 00:00:33,600
it already our comic kickstarter it's in

13
00:00:31,890 --> 00:00:35,160
our last week right now and it's

14
00:00:33,600 --> 00:00:36,660
exceeded that means if you're interested

15
00:00:35,159 --> 00:00:37,709
in checking out our comic you will be

16
00:00:36,659 --> 00:00:40,679
able to get one if you're back our

17
00:00:37,710 --> 00:00:42,210
Kickstarter it's the banners on our

18
00:00:40,679 --> 00:00:43,200
handmade hero Patriots should be really

19
00:00:42,210 --> 00:00:44,520
easy to find I think it's at the bottom

20
00:00:43,200 --> 00:00:45,539
of the twitch thing - I'm not sure

21
00:00:44,520 --> 00:00:47,450
though cuz I never really know how to

22
00:00:45,539 --> 00:00:51,270
get the twitch things set up properly

23
00:00:47,450 --> 00:00:53,670
today on handmade hero I sort of had a

24
00:00:51,270 --> 00:00:56,070
thing that I thought of this week as

25
00:00:53,670 --> 00:00:58,530
often is the case when you know we're

26
00:00:56,070 --> 00:01:00,539
spending a week waiting for the next

27
00:00:58,530 --> 00:01:01,558
handmade hero my brain is still kind of

28
00:01:00,539 --> 00:01:04,049
thinking about things in the background

29
00:01:01,558 --> 00:01:05,609
and one of the things that I realized so

30
00:01:04,049 --> 00:01:09,450
a couple things first of all we were

31
00:01:05,609 --> 00:01:10,799
looking at some code for you know if you

32
00:01:09,450 --> 00:01:11,880
take a look at what's going on handmade

33
00:01:10,799 --> 00:01:13,380
here right now there's a couple of

34
00:01:11,879 --> 00:01:14,519
things that we're wanting to do one is

35
00:01:13,379 --> 00:01:16,769
we just want to speed up the lighting

36
00:01:14,519 --> 00:01:18,149
calculation so that we hit 60 frames a

37
00:01:16,769 --> 00:01:19,679
second pretty reliably the other one is

38
00:01:18,150 --> 00:01:21,330
reduced some of the flicker I think I

39
00:01:19,680 --> 00:01:23,310
have a good idea of how to reduce the

40
00:01:21,329 --> 00:01:25,019
flicker I may want some procedural

41
00:01:23,310 --> 00:01:26,129
flicker in there anyway but I'd rather

42
00:01:25,019 --> 00:01:28,349
have it come from me

43
00:01:26,129 --> 00:01:30,179
adding the flicker then from the fact

44
00:01:28,349 --> 00:01:31,859
that we can't do very stable lighting

45
00:01:30,180 --> 00:01:36,329
because we don't have enough ray tracing

46
00:01:31,859 --> 00:01:38,640
power behind us but what I would like to

47
00:01:36,328 --> 00:01:39,959
do is talk a little bit about the

48
00:01:38,640 --> 00:01:41,099
spatial partition stuff because the

49
00:01:39,959 --> 00:01:42,298
thought of something and I wanted to

50
00:01:41,099 --> 00:01:44,069
measure some statistics today because

51
00:01:42,299 --> 00:01:45,750
they realized sorts of things that I'm

52
00:01:44,069 --> 00:01:48,359
probably doing dumb that we might be

53
00:01:45,750 --> 00:01:55,379
able to do better given the nature of

54
00:01:48,359 --> 00:01:59,368
the architecture of the game so if we

55
00:01:55,379 --> 00:02:04,228
look at our lighting code and we wrote

56
00:01:59,368 --> 00:02:05,549
this HH light prof system to profile

57
00:02:04,228 --> 00:02:07,109
what we're doing with the lighting and

58
00:02:05,549 --> 00:02:10,020
we actually have a way to use like our

59
00:02:07,109 --> 00:02:11,489
old KD tree model which actually isn't

60
00:02:10,020 --> 00:02:13,350
quite a KD tree it's actually like an

61
00:02:11,489 --> 00:02:17,879
a/b tree that just doesn't happen

62
00:02:13,349 --> 00:02:20,879
to use that feature much it's it's sort

63
00:02:17,879 --> 00:02:24,629
of like a binary a a b-tree is more what

64
00:02:20,879 --> 00:02:26,430
it is that happens to always use split

65
00:02:24,629 --> 00:02:28,620
planes that are aligned to axes which is

66
00:02:26,430 --> 00:02:30,510
not really a KT trade and one of the

67
00:02:28,620 --> 00:02:33,210
interesting things that we found when we

68
00:02:30,509 --> 00:02:34,649
put this in and it could just be bugs so

69
00:02:33,210 --> 00:02:37,110
you know we don't really know yet

70
00:02:34,650 --> 00:02:41,400
because we haven't done a lot of work to

71
00:02:37,110 --> 00:02:45,060
really determine what exactly is going

72
00:02:41,400 --> 00:02:46,800
on in our system to verify correctness

73
00:02:45,060 --> 00:02:50,789
what we can see is our old you know

74
00:02:46,800 --> 00:02:52,830
running the stress test on our old KT a

75
00:02:50,789 --> 00:02:55,560
bead KD tree however you want to say

76
00:02:52,830 --> 00:02:57,780
that a a KD tree is six point two seven

77
00:02:55,560 --> 00:02:59,699
seconds the stress test is if we switch

78
00:02:57,780 --> 00:03:03,569
to the newer KD tree model which has a

79
00:02:59,699 --> 00:03:06,959
much abbreviated walk pattern but when

80
00:03:03,569 --> 00:03:09,239
you run it it's way way slower and this

81
00:03:06,960 --> 00:03:12,150
is really interesting but there's a

82
00:03:09,240 --> 00:03:14,969
couple things that I think make that a

83
00:03:12,150 --> 00:03:21,450
rather obvious thing to have happen in

84
00:03:14,969 --> 00:03:24,030
some sense and we should probably go

85
00:03:21,449 --> 00:03:27,329
over them but I also realized one other

86
00:03:24,030 --> 00:03:29,909
thing that I had really been thinking

87
00:03:27,330 --> 00:03:32,730
about and probably need to think about

88
00:03:29,909 --> 00:03:34,829
which is that we may not want this kind

89
00:03:32,729 --> 00:03:37,049
of tree at all and it may just be over

90
00:03:34,830 --> 00:03:39,540
complicated for our needs KD trees are

91
00:03:37,050 --> 00:03:41,520
very popular in ray tracing they're very

92
00:03:39,539 --> 00:03:43,259
popular in ray tracing because I think

93
00:03:41,520 --> 00:03:45,930
they have the minimum amount of checking

94
00:03:43,259 --> 00:03:48,179
you need per note per level of the tree

95
00:03:45,930 --> 00:03:50,310
to descend down to the bottom of the

96
00:03:48,180 --> 00:03:52,860
tree and so at some level it's like well

97
00:03:50,310 --> 00:03:54,180
it makes sense to use a KD tree because

98
00:03:52,860 --> 00:03:57,930
we knew they're gonna be good for ray

99
00:03:54,180 --> 00:04:00,000
tracing probably but for our particular

100
00:03:57,930 --> 00:04:01,409
geometry I also don't know if they're

101
00:04:00,000 --> 00:04:07,938
the correct attack plan and I wanted to

102
00:04:01,409 --> 00:04:10,739
talk about that now

103
00:04:07,938 --> 00:04:12,959
what I would like to do is I would like

104
00:04:10,739 --> 00:04:14,400
to profile our own that you can see how

105
00:04:12,959 --> 00:04:16,589
long is it taking so I don't need to

106
00:04:14,400 --> 00:04:17,579
finish right my point is just the Katie

107
00:04:16,589 --> 00:04:19,078
tree thing we dropped in there was

108
00:04:17,579 --> 00:04:20,879
actually quite bad but that may be

109
00:04:19,079 --> 00:04:22,199
because it's buggy we need to do some

110
00:04:20,879 --> 00:04:24,779
debugging on it which we might want to

111
00:04:22,199 --> 00:04:27,750
do just to verify but what I did want to

112
00:04:24,779 --> 00:04:30,388
do is in the old KD tree case so this

113
00:04:27,750 --> 00:04:33,569
case here which runs in 6.7 seconds to

114
00:04:30,389 --> 00:04:34,800
write over the stress test case where we

115
00:04:33,569 --> 00:04:36,779
just run it over and over to see what it

116
00:04:34,800 --> 00:04:39,360
ends up getting we end up with that

117
00:04:36,779 --> 00:04:42,179
timing and we collected some statistics

118
00:04:39,360 --> 00:04:44,610
which is the total number of tests we

119
00:04:42,180 --> 00:04:46,769
perform I believe is what that is the

120
00:04:44,610 --> 00:04:48,479
partition tests which are tests that

121
00:04:46,769 --> 00:04:50,399
don't tell us a collision they just tell

122
00:04:48,478 --> 00:04:52,829
us like go down this part of tree or

123
00:04:50,399 --> 00:04:55,168
don't write and then we say how many

124
00:04:52,829 --> 00:04:57,538
leaf boxes we've tested so when we're

125
00:04:55,168 --> 00:05:02,310
running this we know that throughout

126
00:04:57,538 --> 00:05:05,279
this test we test and I believe this is

127
00:05:02,310 --> 00:05:09,839
what this is divided by the repetition

128
00:05:05,279 --> 00:05:11,129
count so this is actually not the total

129
00:05:09,839 --> 00:05:14,848
number of tests performed it's the

130
00:05:11,129 --> 00:05:19,769
amount in one run so this is what we do

131
00:05:14,848 --> 00:05:22,889
like on a frame in the game so we test

132
00:05:19,769 --> 00:05:27,000
for every leaf we test we test for point

133
00:05:22,889 --> 00:05:30,150
seven partitions right and in here we

134
00:05:27,000 --> 00:05:32,848
also know that we test a total of five

135
00:05:30,149 --> 00:05:35,009
hundred thousand roughly leaves and we

136
00:05:32,848 --> 00:05:38,728
test a total of two point three million

137
00:05:35,009 --> 00:05:42,689
partitions right and what I was curious

138
00:05:38,728 --> 00:05:44,519
about is I was curious about per Rea

139
00:05:42,689 --> 00:05:46,860
because we don't print out the number of

140
00:05:44,519 --> 00:05:49,649
Ray casts here I was curious to know

141
00:05:46,860 --> 00:05:57,090
what the average number of partitions

142
00:05:49,649 --> 00:06:02,459
per ray is does that make sense

143
00:05:57,089 --> 00:06:07,739
so if I go in to the to the code here

144
00:06:02,459 --> 00:06:11,159
and ice and I ask the and I ask it to

145
00:06:07,740 --> 00:06:13,470
count the number of rays I'm not sure if

146
00:06:11,160 --> 00:06:15,450
it may it may already we I think we were

147
00:06:13,470 --> 00:06:17,130
counting that already potentially so it

148
00:06:15,449 --> 00:06:19,800
may be that that's already here you can

149
00:06:17,129 --> 00:06:22,649
see like total cast initiated is there

150
00:06:19,800 --> 00:06:24,930
so I want to say that really all we need

151
00:06:22,649 --> 00:06:26,459
to do is actually use the data we're

152
00:06:24,930 --> 00:06:28,110
collecting there that previously I

153
00:06:26,459 --> 00:06:30,569
wasn't interested in but I am sort of

154
00:06:28,110 --> 00:06:32,129
interested in it now so when we come

155
00:06:30,569 --> 00:06:34,349
through here and we print these out I'm

156
00:06:32,129 --> 00:06:36,839
going to print out another line here

157
00:06:34,350 --> 00:06:41,729
which is just how many partitions per

158
00:06:36,839 --> 00:06:44,399
ray we actually were testing and then

159
00:06:41,728 --> 00:06:46,469
also I guess maybe Leafs per ray so that

160
00:06:44,399 --> 00:06:49,469
we can just find out like what art for

161
00:06:46,470 --> 00:06:51,389
every ray we cast like how many is that

162
00:06:49,470 --> 00:06:55,410
right like how many is that actually

163
00:06:51,389 --> 00:06:57,210
happening so in here we've got the total

164
00:06:55,410 --> 00:06:59,100
number of leaves tested and the total

165
00:06:57,209 --> 00:07:01,370
number of partitions tested and I should

166
00:06:59,100 --> 00:07:04,260
now be able to do like total ray count

167
00:07:01,370 --> 00:07:10,819
or total Ray's initiated or whatever

168
00:07:04,259 --> 00:07:10,819
right in here like so and

169
00:07:15,550 --> 00:07:19,259
looking at that

170
00:07:24,810 --> 00:07:29,530
hmm so what's interesting about that

171
00:07:27,519 --> 00:07:34,990
though I'm a little confused when I'm

172
00:07:29,529 --> 00:07:36,489
looking at this total partitions tested

173
00:07:34,990 --> 00:07:38,769
is actually a summation

174
00:07:36,490 --> 00:07:40,329
oh it's zeroed every time so that's good

175
00:07:38,769 --> 00:07:42,310
I was like I don't divide by the number

176
00:07:40,329 --> 00:07:44,079
of tests that's okay it's cleared every

177
00:07:42,310 --> 00:07:46,030
time so this is just the ones from the

178
00:07:44,079 --> 00:07:48,339
last test which is totally what we want

179
00:07:46,029 --> 00:07:50,109
like we just want one test worth because

180
00:07:48,339 --> 00:07:52,839
it's the same on every test cuz

181
00:07:50,110 --> 00:07:55,150
configurations identical I believe I

182
00:07:52,839 --> 00:07:57,339
mean maybe they're this I don't know if

183
00:07:55,149 --> 00:07:58,478
the series number is reset every time so

184
00:07:57,339 --> 00:08:01,959
it might not be quite identical every

185
00:07:58,478 --> 00:08:03,310
time but it's like close right so anyway

186
00:08:01,959 --> 00:08:05,589
if we take a look here and we look at

187
00:08:03,310 --> 00:08:07,360
like total leaves tested total printer

188
00:08:05,589 --> 00:08:09,728
tested and total rights initiative if I

189
00:08:07,360 --> 00:08:10,930
just count the total well here's the

190
00:08:09,728 --> 00:08:12,699
total cast initiatives right there

191
00:08:10,930 --> 00:08:16,120
actually so I actually have it total

192
00:08:12,699 --> 00:08:19,210
cast initiated and I just look at total

193
00:08:16,120 --> 00:08:20,949
cast initiated like so I should now be

194
00:08:19,209 --> 00:08:23,769
able to print out in addition to the

195
00:08:20,949 --> 00:08:25,629
existing data information about how many

196
00:08:23,769 --> 00:08:27,459
of these things were testing per Rey

197
00:08:25,629 --> 00:08:29,800
because that will give me some idea of

198
00:08:27,459 --> 00:08:31,959
like whether or not this is the correct

199
00:08:29,800 --> 00:08:33,459
model because I don't actually know what

200
00:08:31,959 --> 00:08:37,569
those numbers are I think we looked at

201
00:08:33,458 --> 00:08:48,489
them a long time ago but we're not but I

202
00:08:37,570 --> 00:08:51,400
don't remember right so this is this is

203
00:08:48,490 --> 00:08:53,320
good information for me so in our fast

204
00:08:51,399 --> 00:08:55,659
version that's actually doing a a/b

205
00:08:53,320 --> 00:08:57,700
testing right so it's actually testing a

206
00:08:55,659 --> 00:09:00,129
fully a/b it's not even doing a KD tree

207
00:08:57,700 --> 00:09:01,570
test so it's doing better than a KD tree

208
00:09:00,129 --> 00:09:04,929
test because it has full bounding

209
00:09:01,570 --> 00:09:07,089
information on these things for this

210
00:09:04,929 --> 00:09:09,129
kind of geometry which is a lot of

211
00:09:07,089 --> 00:09:10,529
little cubes like roughly I mean they're

212
00:09:09,129 --> 00:09:13,179
not actually cubes they're you know

213
00:09:10,528 --> 00:09:15,399
rectangular right rectangular prisms you

214
00:09:13,179 --> 00:09:19,629
might say but you know they're stretchy

215
00:09:15,399 --> 00:09:23,889
cubes we're testing five partitions per

216
00:09:19,629 --> 00:09:28,439
Ray and on average and we're testing 24

217
00:09:23,889 --> 00:09:32,610
leaves per Ray now here's the thing

218
00:09:28,440 --> 00:09:36,100
because our geometry is very grid like

219
00:09:32,610 --> 00:09:37,909
I'm wondering why we're not just using

220
00:09:36,100 --> 00:09:40,580
the lighting voxel as

221
00:09:37,909 --> 00:09:43,009
a voxel containment field like basically

222
00:09:40,580 --> 00:09:46,310
like a thing that says here's we're all

223
00:09:43,009 --> 00:09:50,929
like each voxel node just has a list of

224
00:09:46,309 --> 00:09:52,759
the boxes that are in it and the reason

225
00:09:50,929 --> 00:09:57,289
that I say that is because if we were to

226
00:09:52,759 --> 00:10:00,529
do that then we would in theory just be

227
00:09:57,289 --> 00:10:04,039
able to walk the voxel directly with a

228
00:10:00,529 --> 00:10:04,519
known pattern that had no branches at

229
00:10:04,039 --> 00:10:06,649
all

230
00:10:04,519 --> 00:10:08,419
like the only branch would be in the

231
00:10:06,649 --> 00:10:09,679
leaf branch that we already have like

232
00:10:08,419 --> 00:10:17,479
how many leaves were in this branch

233
00:10:09,679 --> 00:10:28,069
right so if you think about what's going

234
00:10:17,480 --> 00:10:34,129
on there I mean there's some things

235
00:10:28,070 --> 00:10:38,900
about that did that are very attractive

236
00:10:34,129 --> 00:10:43,759
to like if you have a known pattern for

237
00:10:38,899 --> 00:10:46,279
array we could test box wise instead of

238
00:10:43,759 --> 00:10:48,080
ray wise too so we wouldn't have to test

239
00:10:46,279 --> 00:10:51,579
Ray bundles anymore which means we

240
00:10:48,080 --> 00:10:55,310
wouldn't bifurcate ray paths either and

241
00:10:51,580 --> 00:10:59,420
so I'm just really curious if maybe the

242
00:10:55,309 --> 00:11:01,579
idea of using a tree is just inherently

243
00:10:59,419 --> 00:11:05,809
flawed and we shouldn't be doing it

244
00:11:01,580 --> 00:11:10,100
right because if we just used a voxel

245
00:11:05,809 --> 00:11:13,029
and walked the voxel we would already

246
00:11:10,100 --> 00:11:16,040
know exactly the pattern to walk and

247
00:11:13,029 --> 00:11:20,750
furthermore we would know the pattern

248
00:11:16,039 --> 00:11:24,019
for every voxel so like the branching

249
00:11:20,750 --> 00:11:27,980
would be very limited it would the only

250
00:11:24,019 --> 00:11:31,460
two branches you would have would be the

251
00:11:27,980 --> 00:11:35,690
loop that loops over the voxels to test

252
00:11:31,460 --> 00:11:39,170
and the loop that loops over the leaves

253
00:11:35,690 --> 00:11:44,910
so you'd have two loops and no

254
00:11:39,169 --> 00:11:50,129
conditionals at all right

255
00:11:44,909 --> 00:11:51,509
Oh leaves in-plane switch some one was

256
00:11:50,129 --> 00:11:57,779
mentioned the chat that I actually

257
00:11:51,509 --> 00:12:06,049
switched that thank you

258
00:11:57,779 --> 00:12:11,189
there we go um Wow so that's actually

259
00:12:06,049 --> 00:12:17,909
even more convincing for what I was just

260
00:12:11,190 --> 00:12:23,760
saying wowzer so twenty four partitions

261
00:12:17,909 --> 00:12:27,659
per a that's like way too many right so

262
00:12:23,759 --> 00:12:29,309
I think I may just say forget it I know

263
00:12:27,659 --> 00:12:31,439
we spent a lot of time looking at how to

264
00:12:29,309 --> 00:12:32,669
walk walk the tree but sometimes you

265
00:12:31,440 --> 00:12:34,020
spend a lot of time and then realize

266
00:12:32,669 --> 00:12:35,549
what you're doing is stupid I mean

267
00:12:34,019 --> 00:12:37,590
that's the nature of optimization work

268
00:12:35,549 --> 00:12:39,899
I'm not sure we even want to go down

269
00:12:37,590 --> 00:12:41,820
this route so let me explain what I'm

270
00:12:39,899 --> 00:12:43,590
talking about here this is what I was

271
00:12:41,820 --> 00:12:45,870
thinking about let me just explain it to

272
00:12:43,590 --> 00:12:47,160
you visually so that you understand so

273
00:12:45,870 --> 00:12:49,950
that you're in the same headspace that I

274
00:12:47,159 --> 00:12:57,000
am or at least you understand my head

275
00:12:49,950 --> 00:13:03,030
space so if we jump in here to day this

276
00:12:57,000 --> 00:13:05,360
is day five ninety eight so essentially

277
00:13:03,029 --> 00:13:10,949
what I'm talking about is grid

278
00:13:05,360 --> 00:13:12,810
raycasting right and what I was saying

279
00:13:10,950 --> 00:13:14,190
let's just do it in 2d cuz it's the same

280
00:13:12,809 --> 00:13:15,929
in 3d there's not gonna be any

281
00:13:14,190 --> 00:13:18,180
difference it's just a little more

282
00:13:15,929 --> 00:13:19,679
expensive because there's more cells but

283
00:13:18,179 --> 00:13:24,079
let's suppose that you were just doing

284
00:13:19,679 --> 00:13:24,079
this in 2d right so

285
00:13:27,100 --> 00:13:33,100
so currently what we're saying is look

286
00:13:29,730 --> 00:13:35,470
we got a voxel and we're gonna start

287
00:13:33,100 --> 00:13:37,750
somewhere in the voxel and we're gonna

288
00:13:35,470 --> 00:13:41,410
do a ray cast and we're gonna bundle for

289
00:13:37,750 --> 00:13:44,259
rays at a time right so we're doing four

290
00:13:41,409 --> 00:13:46,269
rays at a time and we hope that they

291
00:13:44,259 --> 00:13:47,919
kind of go out in a relatively similar

292
00:13:46,269 --> 00:13:53,319
direction and we know they sort of do

293
00:13:47,919 --> 00:13:58,000
because they're in line with the with

294
00:13:53,320 --> 00:14:01,300
the octahedral map so they're sort of

295
00:13:58,000 --> 00:14:03,250
close but not that close and if you look

296
00:14:01,299 --> 00:14:04,959
at how they actually progress out into

297
00:14:03,250 --> 00:14:06,429
the world what we were doing before is

298
00:14:04,960 --> 00:14:09,129
saying well all right so there's all

299
00:14:06,429 --> 00:14:11,079
these like cubes around right and we're

300
00:14:09,129 --> 00:14:12,309
trying to raycast against the cubes and

301
00:14:11,080 --> 00:14:14,560
so what we're gonna do is we're gonna

302
00:14:12,309 --> 00:14:16,959
split those up into like bounding

303
00:14:14,559 --> 00:14:19,389
syriza's right that split things apart

304
00:14:16,960 --> 00:14:21,519
and we're gonna test against these like

305
00:14:19,389 --> 00:14:23,559
bounding volumes that result in those

306
00:14:21,519 --> 00:14:25,269
and we're gonna like Traverse down into

307
00:14:23,559 --> 00:14:28,869
them to find which leaves we should

308
00:14:25,269 --> 00:14:31,449
actually test against right so with that

309
00:14:28,870 --> 00:14:34,929
ended up being is like we would have an

310
00:14:31,450 --> 00:14:38,110
a a BB and it would have to sub a a B

311
00:14:34,929 --> 00:14:40,029
B's underneath it like so right and that

312
00:14:38,110 --> 00:14:43,539
would have to sub a a B's underneath

313
00:14:40,029 --> 00:14:45,549
that and so on and then eventually we'd

314
00:14:43,539 --> 00:14:47,559
have some lists of leaves down at the

315
00:14:45,549 --> 00:14:49,029
bottom right and they're not really list

316
00:14:47,559 --> 00:14:50,679
they're actually just in an array so

317
00:14:49,029 --> 00:14:52,209
they're just the account and then we

318
00:14:50,679 --> 00:14:55,719
test against those and that's how we

319
00:14:52,210 --> 00:14:57,759
would produce our raycast right now the

320
00:14:55,720 --> 00:15:00,370
problem there is that every single one

321
00:14:57,759 --> 00:15:02,710
of these tests is fairly unpredictable

322
00:15:00,370 --> 00:15:04,450
and random we don't know whether we're

323
00:15:02,710 --> 00:15:07,420
going down the left side the right side

324
00:15:04,450 --> 00:15:09,640
or both so we can't really predict and

325
00:15:07,419 --> 00:15:11,349
preload this the process or is just kind

326
00:15:09,639 --> 00:15:13,059
of sitting there stuttering wondering

327
00:15:11,350 --> 00:15:14,430
which side is going to go down and it

328
00:15:13,059 --> 00:15:17,109
just has to deal with that right

329
00:15:14,429 --> 00:15:18,519
furthermore if we have one Rea that only

330
00:15:17,110 --> 00:15:19,419
would need to go down this side and the

331
00:15:18,519 --> 00:15:20,829
other array that would only need to go

332
00:15:19,419 --> 00:15:23,339
down this side that wouldn't actually

333
00:15:20,830 --> 00:15:23,340
work either

334
00:15:29,129 --> 00:15:33,759
so that's the problem

335
00:15:31,269 --> 00:15:35,948
that we currently have and I don't know

336
00:15:33,759 --> 00:15:37,389
to what extent I can do this but I was

337
00:15:35,948 --> 00:15:41,438
wondering what would happen if we just

338
00:15:37,389 --> 00:15:46,448
for example instead of doing that just

339
00:15:41,438 --> 00:15:51,698
cast one ray and used the loader like we

340
00:15:46,448 --> 00:15:53,498
actually took and loaded in serially all

341
00:15:51,698 --> 00:15:56,948
of the leaves that we need to be tested

342
00:15:53,499 --> 00:15:59,649
by using a grid walk so instead of the

343
00:15:56,948 --> 00:16:01,719
tree we just say no what we're going to

344
00:15:59,649 --> 00:16:04,360
do instead is say we know that we're

345
00:16:01,720 --> 00:16:06,040
going to be casting on nope we know that

346
00:16:04,360 --> 00:16:09,249
we're going to be casting on this thing

347
00:16:06,039 --> 00:16:10,838
and if we were to cast a single ray we

348
00:16:09,249 --> 00:16:14,528
know that that ray would have a

349
00:16:10,839 --> 00:16:16,569
predefined pattern in our grid or voxels

350
00:16:14,528 --> 00:16:18,370
the case may be so we know that for

351
00:16:16,568 --> 00:16:20,498
example you would test the one you're in

352
00:16:18,370 --> 00:16:22,509
the one below it the one next to that

353
00:16:20,499 --> 00:16:24,670
the one below it the one next to that

354
00:16:22,509 --> 00:16:28,539
the one below it the one below it the

355
00:16:24,669 --> 00:16:29,679
one next to that right this pattern is

356
00:16:28,539 --> 00:16:31,688
deterministic

357
00:16:29,679 --> 00:16:34,028
we are always casting from the center

358
00:16:31,688 --> 00:16:36,938
and we know all of the Rays because

359
00:16:34,028 --> 00:16:40,120
they're in our sphere like our sphere

360
00:16:36,938 --> 00:16:42,789
cast database right we have that and

361
00:16:40,120 --> 00:16:45,278
we're always pulling from a distribution

362
00:16:42,789 --> 00:16:48,399
that we already know so we already know

363
00:16:45,278 --> 00:16:52,120
the lock pattern right the walk pattern

364
00:16:48,399 --> 00:16:54,399
is known so we can just store a list of

365
00:16:52,120 --> 00:16:59,139
voxel indices relative to the current

366
00:16:54,399 --> 00:17:00,730
index and we know what they are right so

367
00:16:59,139 --> 00:17:05,649
that basically means that we can start

368
00:17:00,730 --> 00:17:08,318
by assembling a leaf list and then we

369
00:17:05,648 --> 00:17:13,239
can walk we can literally just load the

370
00:17:08,318 --> 00:17:16,480
leaf list right so we actually can do

371
00:17:13,240 --> 00:17:20,620
this in two loops one is a while loop

372
00:17:16,480 --> 00:17:24,429
over these right to gather all of the

373
00:17:20,619 --> 00:17:26,739
indices that we need and then another is

374
00:17:24,429 --> 00:17:29,620
a while loop over those indices to check

375
00:17:26,740 --> 00:17:32,589
them but that's it so there's no

376
00:17:29,619 --> 00:17:34,538
descending there's no nested loops we

377
00:17:32,589 --> 00:17:38,349
can literally just do it in two passes

378
00:17:34,538 --> 00:17:40,629
exactly and there's no branches and no

379
00:17:38,349 --> 00:17:41,609
ifs because there's nothing to test it's

380
00:17:40,630 --> 00:17:44,400
completely two-term

381
00:17:41,609 --> 00:17:45,809
the walk every time the only thing

382
00:17:44,400 --> 00:17:48,120
you're testing is when you got to the

383
00:17:45,809 --> 00:17:49,409
end so when I got to the end of this and

384
00:17:48,119 --> 00:17:52,009
when I got to the end of that those are

385
00:17:49,410 --> 00:17:55,470
that only two tests in the entire thing

386
00:17:52,009 --> 00:17:57,569
now I don't know whether it's cheaper to

387
00:17:55,470 --> 00:18:01,039
copy the whole thing or just copy the

388
00:17:57,569 --> 00:18:01,039
index but that's

389
00:18:13,019 --> 00:18:18,119
I really don't know that's a tough call

390
00:18:16,680 --> 00:18:19,920
and I really have no idea what the

391
00:18:18,119 --> 00:18:21,539
answer is we'll probably have to test

392
00:18:19,920 --> 00:18:23,490
both of those and see which one is

393
00:18:21,539 --> 00:18:25,500
faster because they have no idea whether

394
00:18:23,490 --> 00:18:29,670
it would be faster to have our grid

395
00:18:25,500 --> 00:18:33,539
squares store the occupants of the grid

396
00:18:29,670 --> 00:18:37,830
square and as indices or if it would be

397
00:18:33,539 --> 00:18:40,190
cheaper to store them as copies and then

398
00:18:37,829 --> 00:18:44,099
copy them in furthermore there's a

399
00:18:40,190 --> 00:18:46,200
deduplication in a sense in that you can

400
00:18:44,099 --> 00:18:48,659
also if you want to try to deduplicate

401
00:18:46,200 --> 00:18:50,580
leaves rather than test against them

402
00:18:48,660 --> 00:18:52,529
twice and what I mean by that is like

403
00:18:50,579 --> 00:18:54,269
suppose there's something here and you

404
00:18:52,529 --> 00:18:56,519
would have walked all three of these as

405
00:18:54,269 --> 00:18:58,799
you like break acid through it you will

406
00:18:56,519 --> 00:19:09,349
need to test that thing once and I'm not

407
00:18:58,799 --> 00:19:13,710
sure I'm not sure what you do about that

408
00:19:09,349 --> 00:19:17,490
because one ways to just test it three

409
00:19:13,710 --> 00:19:19,049
times there's no cost to doing so in

410
00:19:17,490 --> 00:19:21,539
terms of the complexity of the algorithm

411
00:19:19,049 --> 00:19:22,889
it's just you're wasting time testing at

412
00:19:21,539 --> 00:19:24,899
the second and third times because the

413
00:19:22,890 --> 00:19:26,160
hit can't be any closer than you would

414
00:19:24,900 --> 00:19:29,490
have already found when you test it the

415
00:19:26,160 --> 00:19:32,009
first time but if you wanted to

416
00:19:29,490 --> 00:19:37,289
deduplicate those you would need some

417
00:19:32,009 --> 00:19:40,170
scheme for deduplicating them that would

418
00:19:37,289 --> 00:19:41,819
involve a secondary like bit field and I

419
00:19:40,170 --> 00:19:45,930
don't know whether like that

420
00:19:41,819 --> 00:19:50,519
deduplication then adds an if you know

421
00:19:45,930 --> 00:19:52,830
I'm saying so it's unclear whether you

422
00:19:50,519 --> 00:19:54,990
want to do any of these things like

423
00:19:52,829 --> 00:19:57,960
maybe you do maybe you don't

424
00:19:54,990 --> 00:19:59,579
but I really don't know so those would

425
00:19:57,960 --> 00:20:02,460
be specifics to the algorithm that we'd

426
00:19:59,579 --> 00:20:04,980
have to test out but because that's so

427
00:20:02,460 --> 00:20:06,779
clean I feel like I at least want to do

428
00:20:04,980 --> 00:20:09,660
one thing before we spend any more time

429
00:20:06,779 --> 00:20:12,450
on tree walks which is you just say if I

430
00:20:09,660 --> 00:20:14,550
was to take the current geometry and

431
00:20:12,450 --> 00:20:16,860
dump it into a voxel what would the

432
00:20:14,549 --> 00:20:19,169
general occupancy of that voxel end up

433
00:20:16,859 --> 00:20:22,169
being so let's suppose we took the

434
00:20:19,170 --> 00:20:24,840
actual light lookup voxel and we said

435
00:20:22,170 --> 00:20:27,028
let's figure out anywhere that a

436
00:20:24,839 --> 00:20:30,990
a geometry element that we're testing an

437
00:20:27,028 --> 00:20:32,730
occluder right or a light source let's

438
00:20:30,990 --> 00:20:34,500
find out where any of those would have

439
00:20:32,730 --> 00:20:38,130
entered into the voxel and we'll just

440
00:20:34,500 --> 00:20:42,000
print out like the max occupancy of any

441
00:20:38,130 --> 00:20:44,278
voxel at that point right and then we

442
00:20:42,000 --> 00:20:47,278
can get some idea about whether this

443
00:20:44,278 --> 00:20:49,019
would be efficient or not and then I can

444
00:20:47,278 --> 00:20:50,700
maybe just maybe we'll just do it like

445
00:20:49,019 --> 00:20:52,470
maybe this is what we'll do because

446
00:20:50,700 --> 00:20:53,669
maybe this is a lot smarter and we can

447
00:20:52,470 --> 00:20:55,259
sketch out the routine and just see

448
00:20:53,669 --> 00:21:01,520
today if we think it would be

449
00:20:55,259 --> 00:21:01,519
it requires casting one ray at a time so

450
00:21:02,058 --> 00:21:09,990
that part may be bad right you don't

451
00:21:07,679 --> 00:21:12,419
have to but it would make things way

452
00:21:09,990 --> 00:21:17,308
slower if you didn't I would think

453
00:21:12,419 --> 00:21:19,950
because you'd rather not test a bunch of

454
00:21:17,308 --> 00:21:23,278
things you don't have to test I would

455
00:21:19,950 --> 00:21:24,390
think I mean I don't know so anyway just

456
00:21:23,278 --> 00:21:27,210
a thought

457
00:21:24,390 --> 00:21:29,038
and so if you were to do that then there

458
00:21:27,210 --> 00:21:31,048
are some nice side effects which is that

459
00:21:29,038 --> 00:21:32,548
you don't have to decouple raise to

460
00:21:31,048 --> 00:21:34,408
compute the hit afterwards because you

461
00:21:32,548 --> 00:21:36,329
only have one ray so you're actually

462
00:21:34,409 --> 00:21:40,409
computing on the faster side of things

463
00:21:36,329 --> 00:21:43,048
potentially and presumably that's a good

464
00:21:40,409 --> 00:21:45,809
thing like so presumably when you got

465
00:21:43,048 --> 00:21:48,179
into it's just one seemed off and not a

466
00:21:45,808 --> 00:21:50,339
bunch of selects at that point so it's

467
00:21:48,179 --> 00:21:53,240
possible that this routine gets faster

468
00:21:50,339 --> 00:21:56,459
in the lighting act code it's possible

469
00:21:53,240 --> 00:21:58,048
that in the raycast code like this stuff

470
00:21:56,460 --> 00:21:59,700
could get a lot faster because rather

471
00:21:58,048 --> 00:22:02,038
than doing all these selects you're just

472
00:21:59,700 --> 00:22:04,528
storing one variable which is who the

473
00:22:02,038 --> 00:22:08,460
best tier a hit was at who the best

474
00:22:04,528 --> 00:22:10,200
index was rather that you could then you

475
00:22:08,460 --> 00:22:14,278
know look up at the end or something so

476
00:22:10,200 --> 00:22:18,808
I feel like maybe it's got some promise

477
00:22:14,278 --> 00:22:20,700
I don't know hard to say and so when you

478
00:22:18,808 --> 00:22:23,970
do these you would do exactly the same

479
00:22:20,700 --> 00:22:27,120
thing that you do here except you would

480
00:22:23,970 --> 00:22:30,690
you would collapse on tier a so you

481
00:22:27,119 --> 00:22:33,839
would have to do a min on tier a each

482
00:22:30,690 --> 00:22:37,500
time at the end of this is what you

483
00:22:33,839 --> 00:22:38,599
would end up actually doing and so again

484
00:22:37,500 --> 00:22:41,359
like I don't know if

485
00:22:38,599 --> 00:22:42,918
maybe that's not as good because when

486
00:22:41,359 --> 00:22:50,000
you do the min on tear a you'd have to

487
00:22:42,919 --> 00:22:51,679
know which one you did I guess what I'm

488
00:22:50,000 --> 00:22:54,529
saying is there's a mob mask in here

489
00:22:51,679 --> 00:23:00,769
that wasn't in here before right and so

490
00:22:54,529 --> 00:23:03,109
that's a thing maybe is bad right and

491
00:23:00,769 --> 00:23:04,548
again these this code is so touchy that

492
00:23:03,109 --> 00:23:06,709
I'm not sure I can make a strong

493
00:23:04,548 --> 00:23:08,119
prediction about it either way so again

494
00:23:06,710 --> 00:23:11,690
I think it would just be something we'd

495
00:23:08,119 --> 00:23:13,759
have to test out so if we imagined like

496
00:23:11,690 --> 00:23:16,279
what this raycast routine would look

497
00:23:13,759 --> 00:23:18,288
like like if I was to do it the other

498
00:23:16,279 --> 00:23:20,210
way round right so imagine we took this

499
00:23:18,288 --> 00:23:23,658
thing and said look we're just gonna

500
00:23:20,210 --> 00:23:25,579
like change this up a little bit so

501
00:23:23,659 --> 00:23:26,840
instead of that raycast routine there

502
00:23:25,579 --> 00:23:29,240
it's gonna be like a different one

503
00:23:26,839 --> 00:23:32,839
doesn't use the stack it doesn't doesn't

504
00:23:29,240 --> 00:23:34,640
use that stuff right so in here we would

505
00:23:32,839 --> 00:23:37,490
just say okay there's going to be a

506
00:23:34,640 --> 00:23:41,390
thing that's like a grid raycast or

507
00:23:37,490 --> 00:23:44,329
something and it takes the the Ray

508
00:23:41,390 --> 00:23:46,490
origin and the rady unduplicated so

509
00:23:44,329 --> 00:23:50,538
you're just calling like one cast each

510
00:23:46,490 --> 00:23:52,548
time right and when we go through here

511
00:23:50,538 --> 00:23:54,950
and we get out the you know this

512
00:23:52,548 --> 00:23:58,418
information we would be doing the same

513
00:23:54,950 --> 00:24:02,090
thing here this total cast initiated is

514
00:23:58,419 --> 00:24:04,009
it looks like it's a little low so those

515
00:24:02,089 --> 00:24:05,928
numbers are a little false because we're

516
00:24:04,009 --> 00:24:08,839
actually casting for rays at a time so

517
00:24:05,929 --> 00:24:10,490
that should have been so these numbers

518
00:24:08,839 --> 00:24:11,480
are not as bad as they seemed they

519
00:24:10,490 --> 00:24:14,500
should be divided before so it's more

520
00:24:11,480 --> 00:24:19,298
like six partitions per array right and

521
00:24:14,500 --> 00:24:22,038
and like less than one leaf per Ray

522
00:24:19,298 --> 00:24:25,250
right I mean sort of because it's times

523
00:24:22,038 --> 00:24:26,419
four so so that's actually not that bad

524
00:24:25,250 --> 00:24:28,548
right it's not as bad as I thought it

525
00:24:26,419 --> 00:24:30,140
was gonna be so we'll see so maybe this

526
00:24:28,548 --> 00:24:31,279
isn't as maybe this won't be as good as

527
00:24:30,140 --> 00:24:33,530
I did them because if you look at that

528
00:24:31,279 --> 00:24:37,038
it's only doing it once per ray cast

529
00:24:33,529 --> 00:24:40,369
right which which is not as good so

530
00:24:37,038 --> 00:24:42,230
really you want in in terms of total

531
00:24:40,369 --> 00:24:44,569
Ray's like we would want that to be

532
00:24:42,230 --> 00:24:46,159
times four fact I could do that I'm not

533
00:24:44,569 --> 00:24:48,109
sure how we would want that because

534
00:24:46,159 --> 00:24:50,000
these are sort of different so maybe the

535
00:24:48,109 --> 00:24:52,439
right way to do it is to say look this

536
00:24:50,000 --> 00:24:57,359
is like four and

537
00:24:52,440 --> 00:24:59,250
as you know one you know and we could

538
00:24:57,359 --> 00:25:03,359
change that to be called total raise

539
00:24:59,250 --> 00:25:04,859
initiated as well total raised cast just

540
00:25:03,359 --> 00:25:06,169
to make it clear what was happening

541
00:25:04,859 --> 00:25:08,939
there

542
00:25:06,170 --> 00:25:11,100
so anyway inside something like this

543
00:25:08,940 --> 00:25:12,930
when we come through it I'm gonna get

544
00:25:11,099 --> 00:25:14,099
rid of the debugging for now because if

545
00:25:12,930 --> 00:25:16,560
this debugging would have to be

546
00:25:14,099 --> 00:25:19,319
different so we're gonna save that for a

547
00:25:16,559 --> 00:25:21,990
little bit later and I'm also going to

548
00:25:19,319 --> 00:25:23,639
get rid of the branch here because we're

549
00:25:21,990 --> 00:25:33,120
gonna write a completely new one so this

550
00:25:23,640 --> 00:25:34,380
can all go away like so and yeah so when

551
00:25:33,119 --> 00:25:37,799
we look at what would happen here there

552
00:25:34,380 --> 00:25:40,380
would be two phases of this so one would

553
00:25:37,799 --> 00:25:48,059
be a phase where we loop through all of

554
00:25:40,380 --> 00:25:49,620
the you know all of the stuff in the one

555
00:25:48,059 --> 00:25:51,990
is we loop through basically an array

556
00:25:49,619 --> 00:25:57,899
that tells us what to cast so we would

557
00:25:51,990 --> 00:26:03,269
do something like this this is like our

558
00:25:57,900 --> 00:26:06,030
walk index or something and we would

559
00:26:03,269 --> 00:26:10,049
have an array so in here there would be

560
00:26:06,029 --> 00:26:13,710
a thing that's like which which grid

561
00:26:10,049 --> 00:26:17,539
square to load if that makes sense so in

562
00:26:13,710 --> 00:26:20,610
here we would have a like you know a

563
00:26:17,539 --> 00:26:24,299
load index pointer you know I'm saying

564
00:26:20,609 --> 00:26:26,819
and it would be like our block table you

565
00:26:24,299 --> 00:26:28,529
know we would get that out in here we

566
00:26:26,819 --> 00:26:30,059
would basically say like and you know we

567
00:26:28,529 --> 00:26:31,920
could we could even write this a little

568
00:26:30,059 --> 00:26:33,058
bit more cleanly where we just say like

569
00:26:31,920 --> 00:26:37,620
do

570
00:26:33,058 --> 00:26:39,749
you know wild walk count you know and so

571
00:26:37,619 --> 00:26:43,439
on so each time through here we'd say

572
00:26:39,749 --> 00:26:46,558
like okay you know at the end do a sub

573
00:26:43,440 --> 00:26:48,298
and a step out in here we would load off

574
00:26:46,558 --> 00:26:50,548
of the load index so we do like a load

575
00:26:48,298 --> 00:26:54,480
index plus plus and this would be what

576
00:26:50,548 --> 00:26:56,249
we'd actually be loading here right so

577
00:26:54,480 --> 00:26:58,710
each time through here it would give us

578
00:26:56,249 --> 00:27:02,788
some index to load and so this is like

579
00:26:58,710 --> 00:27:04,860
the leaf index that we would get and we

580
00:27:02,788 --> 00:27:07,109
would just copy that leaf index into our

581
00:27:04,859 --> 00:27:08,998
testing stack now we can either copy the

582
00:27:07,109 --> 00:27:13,258
index or the actual data I'm gonna go

583
00:27:08,999 --> 00:27:15,868
with data for now because why not so

584
00:27:13,259 --> 00:27:18,569
when we load this in we would just like

585
00:27:15,868 --> 00:27:20,970
place it into the l1 cache in the right

586
00:27:18,569 --> 00:27:23,460
location right like roughly probably

587
00:27:20,970 --> 00:27:26,970
using the right buffers so we'd probably

588
00:27:23,460 --> 00:27:31,499
just like stamp it out in an xx xx YY YY

589
00:27:26,970 --> 00:27:34,319
ZZ ZZ pattern right so in here what we

590
00:27:31,499 --> 00:27:37,679
would want is something roughly like

591
00:27:34,319 --> 00:27:41,368
this where we say okay we are going to

592
00:27:37,679 --> 00:27:47,309
have like box information here so we're

593
00:27:41,368 --> 00:27:49,678
going to have like you know box mins box

594
00:27:47,308 --> 00:27:51,480
Max is right and I don't know what the

595
00:27:49,679 --> 00:27:54,179
size of these is gonna be exactly but

596
00:27:51,480 --> 00:27:58,710
you know something like this will clean

597
00:27:54,179 --> 00:28:01,200
this up as we go and then we would also

598
00:27:58,710 --> 00:28:02,399
need probably the ref colors I don't

599
00:28:01,200 --> 00:28:04,288
know I mean like I said we could also

600
00:28:02,398 --> 00:28:05,638
just have index e indexes that we're

601
00:28:04,288 --> 00:28:08,069
flattening out here so we could just do

602
00:28:05,638 --> 00:28:10,229
the index ray and then load for a time

603
00:28:08,069 --> 00:28:12,778
later but I don't know it's again hard

604
00:28:10,230 --> 00:28:19,889
to say um so then we've got like ref

605
00:28:12,778 --> 00:28:21,179
colors and emissions right so no it

606
00:28:19,888 --> 00:28:24,329
would be something like that I don't

607
00:28:21,179 --> 00:28:26,369
love this I feel like I feel like the

608
00:28:24,329 --> 00:28:28,528
way that we do emissions is not very

609
00:28:26,368 --> 00:28:30,209
clean feels like you shouldn't need to

610
00:28:28,528 --> 00:28:33,538
do what we're doing so if you look here

611
00:28:30,210 --> 00:28:36,090
you can see what happens

612
00:28:33,538 --> 00:28:38,429
it does this nonsense where it says like

613
00:28:36,089 --> 00:28:40,259
alright like take the probe sample

614
00:28:38,429 --> 00:28:42,559
normal in the mission Direction right

615
00:28:40,259 --> 00:28:44,778
and do some nonsense with it and then

616
00:28:42,558 --> 00:28:46,819
combine those two it feels like we

617
00:28:44,778 --> 00:28:55,579
should be able to send back something

618
00:28:46,819 --> 00:28:58,249
better than that but I don't know we

619
00:28:55,579 --> 00:29:00,259
should look at that later anyway we know

620
00:28:58,249 --> 00:29:04,399
we need to send these back and I think

621
00:29:00,259 --> 00:29:09,259
we need the normal two so it would be

622
00:29:04,398 --> 00:29:10,998
something like this right so these are

623
00:29:09,259 --> 00:29:15,139
the things that we would have to load

624
00:29:10,999 --> 00:29:18,139
and we would load you know them four at

625
00:29:15,138 --> 00:29:20,898
a time and that looks you know a bit

626
00:29:18,138 --> 00:29:22,308
large but again like in terms of how

627
00:29:20,898 --> 00:29:23,928
many realistically they're gonna be

628
00:29:22,308 --> 00:29:26,569
there's probably not going to be very

629
00:29:23,929 --> 00:29:28,639
many of these that we actually touch so

630
00:29:26,569 --> 00:29:32,118
assuming you touch like maybe 16 of them

631
00:29:28,638 --> 00:29:36,288
or something if you're talking about 16

632
00:29:32,118 --> 00:29:39,259
times 3 times 4 that's 192 so you know

633
00:29:36,288 --> 00:29:43,849
at some level keeping even eight of

634
00:29:39,259 --> 00:29:45,710
those is miniscule right so reading and

635
00:29:43,849 --> 00:29:48,168
writing these is basically just gonna be

636
00:29:45,710 --> 00:29:50,058
like one cycle anyway for the most part

637
00:29:48,169 --> 00:29:51,710
you know what I'm saying it's just not

638
00:29:50,058 --> 00:29:55,940
probably a huge deal

639
00:29:51,710 --> 00:29:59,808
so doing the gather here is not awful I

640
00:29:55,940 --> 00:30:00,519
don't think I don't think right famous

641
00:29:59,808 --> 00:30:06,048
last words

642
00:30:00,519 --> 00:30:07,609
um so yeah so when we look at at writing

643
00:30:06,048 --> 00:30:10,009
these out basically like I don't know

644
00:30:07,609 --> 00:30:13,278
what the most efficient transfer methods

645
00:30:10,009 --> 00:30:16,720
gonna be here but you know in terms of

646
00:30:13,278 --> 00:30:22,659
like getting these boxes it's solution

647
00:30:16,720 --> 00:30:26,649
right like box what is it called

648
00:30:22,659 --> 00:30:30,889
there's some name for this stuff boxes

649
00:30:26,648 --> 00:30:33,138
it's solution boxes leaf index is what

650
00:30:30,888 --> 00:30:36,168
we're loading here so we're loading in

651
00:30:33,138 --> 00:30:41,508
one of these lighting boxes and this is

652
00:30:36,169 --> 00:30:44,450
our leaf Sumi and what I want to do is I

653
00:30:41,509 --> 00:30:47,950
want to take the leaf data so everything

654
00:30:44,450 --> 00:30:50,450
that was in the lighting box itself I

655
00:30:47,950 --> 00:30:53,669
want to take the leaf data and I just

656
00:30:50,450 --> 00:30:57,960
want to like unpack this stuff into

657
00:30:53,669 --> 00:31:00,840
sim D format right and I want to pack it

658
00:30:57,960 --> 00:31:04,200
for this specific process or that comes

659
00:31:00,839 --> 00:31:08,099
after me so in this case what I want to

660
00:31:04,200 --> 00:31:11,639
do is say alright like if we take and we

661
00:31:08,099 --> 00:31:20,148
load out of the leaf the Box mend the

662
00:31:11,638 --> 00:31:24,058
box max the ref C and the pack dots is

663
00:31:20,148 --> 00:31:26,488
light value and leaf container can go

664
00:31:24,058 --> 00:31:28,950
that's not a thing anymore so we'll deal

665
00:31:26,489 --> 00:31:31,858
with that later but so we're gonna do

666
00:31:28,950 --> 00:31:33,869
something like that and so if we wanted

667
00:31:31,858 --> 00:31:37,108
to then start packing these what I want

668
00:31:33,868 --> 00:31:39,480
to do is say okay the Box min like each

669
00:31:37,108 --> 00:31:41,668
of these things is we're gonna be

670
00:31:39,480 --> 00:31:43,589
writing to sort of sequentially which

671
00:31:41,669 --> 00:31:46,080
means I may want to do this slightly

672
00:31:43,589 --> 00:31:48,329
differently I may want to say like walk

673
00:31:46,079 --> 00:31:50,608
index equals zero walk index lesson well

674
00:31:48,329 --> 00:31:52,408
count writing this routine well is gonna

675
00:31:50,608 --> 00:31:54,720
require some thinking about what the

676
00:31:52,409 --> 00:31:55,889
assembly looks like so again I'm not

677
00:31:54,720 --> 00:31:59,269
gonna think too hard about it now I just

678
00:31:55,888 --> 00:32:02,308
want something not totally terrible so

679
00:31:59,269 --> 00:32:04,440
we'll see but again like I want to do

680
00:32:02,308 --> 00:32:06,089
this correctly it just in terms of

681
00:32:04,440 --> 00:32:09,058
theoretically and then we'll think about

682
00:32:06,089 --> 00:32:12,738
how to like structure the walk ideally

683
00:32:09,058 --> 00:32:17,308
that's at some point late in the future

684
00:32:12,739 --> 00:32:19,919
okay so I want to do box min walk index

685
00:32:17,308 --> 00:32:21,778
and as the walk index goes up I'm just

686
00:32:19,919 --> 00:32:24,269
gonna be like addressing these like

687
00:32:21,778 --> 00:32:26,749
sequentially so actually like looking at

688
00:32:24,269 --> 00:32:29,128
it this way it's gonna be more like this

689
00:32:26,749 --> 00:32:29,970
right we're gonna be writing to these as

690
00:32:29,128 --> 00:32:31,439
f 32s

691
00:32:29,970 --> 00:32:33,808
so we're storing out to memory and then

692
00:32:31,440 --> 00:32:36,899
we're loading them up wide if that makes

693
00:32:33,808 --> 00:32:39,470
sense so I'm gonna look at this this box

694
00:32:36,898 --> 00:32:42,628
min as if it's f 30 twos I'm going to

695
00:32:39,470 --> 00:32:47,608
assign to them sequentially each

696
00:32:42,628 --> 00:32:50,128
individual like box min part right so

697
00:32:47,608 --> 00:32:52,769
what I want to do is I want to say let's

698
00:32:50,128 --> 00:32:54,748
look at this as if it's an F 30 as if

699
00:32:52,769 --> 00:32:56,159
it's a well I guess actually I don't

700
00:32:54,749 --> 00:32:59,100
even quite need to do that I can

701
00:32:56,159 --> 00:33:05,899
actually use the dot syntax here so I

702
00:32:59,099 --> 00:33:07,969
want to assign the I want to assign the

703
00:33:05,898 --> 00:33:11,069
every

704
00:33:07,970 --> 00:33:15,360
every four I want to move on to the next

705
00:33:11,069 --> 00:33:18,359
one and I want to address the like you

706
00:33:15,359 --> 00:33:21,479
know for modded element of it right so

707
00:33:18,359 --> 00:33:24,359
again all I'm doing is just on i'm

708
00:33:21,480 --> 00:33:26,819
Swizzle indies into a cindy you know

709
00:33:24,359 --> 00:33:30,029
friendly format that's all i'm doing

710
00:33:26,819 --> 00:33:32,509
here so you know i'm gonna take whatever

711
00:33:30,029 --> 00:33:38,119
the x component is and i'm going to

712
00:33:32,509 --> 00:33:40,440
stick it into one of these like so right

713
00:33:38,119 --> 00:33:46,229
and i want to do that for each of these

714
00:33:40,440 --> 00:33:50,970
so we could also do like maybe this is

715
00:33:46,230 --> 00:33:53,099
our you know primary index and our

716
00:33:50,970 --> 00:33:59,700
secondary index something like that or

717
00:33:53,099 --> 00:34:02,879
our lane index so primary index just

718
00:33:59,700 --> 00:34:05,880
walk index over for welcome next mod 4

719
00:34:02,880 --> 00:34:13,619
so i've got our primary index here and

720
00:34:05,880 --> 00:34:15,628
our walk index here like so and then i

721
00:34:13,619 --> 00:34:18,239
just want to assign each of these so i'm

722
00:34:15,628 --> 00:34:19,980
unspooling these into place right and

723
00:34:18,239 --> 00:34:22,829
we're probably gonna want to do these

724
00:34:19,980 --> 00:34:30,869
with actual cindy ops right so like I

725
00:34:22,829 --> 00:34:33,539
said the problem with that is we're

726
00:34:30,869 --> 00:34:35,909
gonna have to do like for wide loads so

727
00:34:33,539 --> 00:34:38,750
we have to like queue up for indices

728
00:34:35,909 --> 00:34:40,889
load for and go forwards which is harder

729
00:34:38,750 --> 00:34:43,079
so we're not going to start with that

730
00:34:40,889 --> 00:34:45,139
but we may have to get to that when we

731
00:34:43,079 --> 00:34:48,269
actually try to optimize this for real

732
00:34:45,139 --> 00:34:50,220
but we'll see so if we're talking about

733
00:34:48,269 --> 00:34:56,070
that then we'd need to like load these

734
00:34:50,219 --> 00:34:58,769
up so we've got box max here and this

735
00:34:56,070 --> 00:35:01,890
actually I guess isn't the case because

736
00:34:58,769 --> 00:35:04,259
that's determinable later so nevermind

737
00:35:01,889 --> 00:35:07,049
with that it's only ref color that we'd

738
00:35:04,260 --> 00:35:15,030
actually need to store it there and

739
00:35:07,050 --> 00:35:16,859
emission right so yeah and these could

740
00:35:15,030 --> 00:35:20,430
be stored much more compactly these

741
00:35:16,858 --> 00:35:24,150
could be stored as a single packed value

742
00:35:20,429 --> 00:35:26,899
so like the emission value like an RGB a

743
00:35:24,150 --> 00:35:26,900
select these

744
00:35:36,829 --> 00:35:42,900
like at some point this crap has to get

745
00:35:40,050 --> 00:35:44,940
worked through and we can do a lot

746
00:35:42,900 --> 00:35:46,460
better job compacting down the light

747
00:35:44,940 --> 00:35:49,619
information to some encoding that's not

748
00:35:46,460 --> 00:35:51,329
so unwieldy as this particular thing is

749
00:35:49,619 --> 00:35:53,460
but that's sort of a separate discussion

750
00:35:51,329 --> 00:35:55,319
we don't have to care about that at the

751
00:35:53,460 --> 00:35:59,309
moment also this isn't hit ref color

752
00:35:55,320 --> 00:36:04,200
it's just ref color intermission so

753
00:35:59,309 --> 00:36:08,730
here's our ref color like so that's

754
00:36:04,199 --> 00:36:10,649
called a ref see and then finally down

755
00:36:08,730 --> 00:36:18,570
here we would just have that like

756
00:36:10,650 --> 00:36:21,660
emission and the emission yeah is again

757
00:36:18,570 --> 00:36:23,610
is this this would be dot X dot e

758
00:36:21,659 --> 00:36:33,899
actually this is the wrong way around

759
00:36:23,610 --> 00:36:39,019
right it's that way oops accidentally

760
00:36:33,900 --> 00:36:39,019
give equals so this is more like that

761
00:36:42,380 --> 00:36:52,099
and that should give us what we need and

762
00:36:47,510 --> 00:36:54,810
for the emission that's just gonna be

763
00:36:52,099 --> 00:36:56,250
the standard because that's just an f32

764
00:36:54,809 --> 00:37:00,239
for X so that's just gonna be the

765
00:36:56,250 --> 00:37:03,630
standard where we just say look whatever

766
00:37:00,239 --> 00:37:05,819
this thing is we either provide a 1 or 0

767
00:37:03,630 --> 00:37:07,829
I think is how this was working at the

768
00:37:05,820 --> 00:37:10,200
moment so it's like if it's a light it's

769
00:37:07,829 --> 00:37:15,449
1 otherwise at 0 is all that we actually

770
00:37:10,199 --> 00:37:19,199
do so this loop would be all we actually

771
00:37:15,449 --> 00:37:21,509
need to do and this part here could be

772
00:37:19,199 --> 00:37:24,389
loaded up better like I say so this this

773
00:37:21,510 --> 00:37:26,040
doesn't need to be an if and at the

774
00:37:24,389 --> 00:37:27,539
moment it really probably won't even be

775
00:37:26,039 --> 00:37:30,869
an if it might actually just be done

776
00:37:27,539 --> 00:37:32,070
with the seam off or something but but

777
00:37:30,869 --> 00:37:33,509
this doesn't have to happen because in

778
00:37:32,070 --> 00:37:36,710
the future I think we can pack these

779
00:37:33,510 --> 00:37:40,710
better this should just be packed like a

780
00:37:36,710 --> 00:37:42,869
8-bit RGB emission value or something

781
00:37:40,710 --> 00:37:45,400
like that is what we should have

782
00:37:42,869 --> 00:37:48,038
something like this

783
00:37:45,400 --> 00:37:53,380
I mean that's my thinking anyway we'll

784
00:37:48,039 --> 00:37:56,230
see so once we unpack everything into

785
00:37:53,380 --> 00:37:59,260
these then all we would do is do our

786
00:37:56,230 --> 00:38:04,798
actual test by counting how many of

787
00:37:59,260 --> 00:38:07,299
those we had so when we do our loading

788
00:38:04,798 --> 00:38:12,400
well this is actually so this is not

789
00:38:07,298 --> 00:38:15,099
true so we would have a separate walk

790
00:38:12,400 --> 00:38:17,619
here right which is the while that that

791
00:38:15,099 --> 00:38:21,278
loops over like it's not this is not

792
00:38:17,619 --> 00:38:27,760
quite right so that's a lie this walk

793
00:38:21,278 --> 00:38:29,980
index would tell us the leaf indices

794
00:38:27,760 --> 00:38:34,450
come out of nodes so there are two

795
00:38:29,980 --> 00:38:36,670
layers here right for each of the things

796
00:38:34,449 --> 00:38:38,469
we do have an unpredictable brand like I

797
00:38:36,670 --> 00:38:40,690
said there's the one here which is just

798
00:38:38,469 --> 00:38:42,788
it's a known number that you loop

799
00:38:40,690 --> 00:38:44,260
through so that one's a fairly

800
00:38:42,789 --> 00:38:45,579
predictable branch it only misses the

801
00:38:44,260 --> 00:38:47,109
last time but this one is the

802
00:38:45,579 --> 00:38:48,818
unpredictable branch like I said there's

803
00:38:47,108 --> 00:38:50,440
two there's that one and then there's

804
00:38:48,818 --> 00:38:52,210
the one that's here which is we don't

805
00:38:50,440 --> 00:38:53,470
know how many of these are going to be

806
00:38:52,210 --> 00:39:02,980
although that's not really that never

807
00:38:53,469 --> 00:39:05,769
mind okay so in here this is what we

808
00:39:02,980 --> 00:39:06,909
actually need to do for wait a minute

809
00:39:05,769 --> 00:39:09,788
let me just make sure we got this right

810
00:39:06,909 --> 00:39:14,368
this is not necessary so that wouldn't

811
00:39:09,789 --> 00:39:17,559
be the case and so it's just this one

812
00:39:14,369 --> 00:39:24,548
here is the only thing we actually need

813
00:39:17,559 --> 00:39:33,069
to do so we would be doing this and that

814
00:39:24,548 --> 00:39:38,349
all goes away like so and then this part

815
00:39:33,068 --> 00:39:40,599
here is still the same I think well

816
00:39:38,349 --> 00:39:43,960
actually it doesn't have to be this part

817
00:39:40,599 --> 00:39:46,500
can now be done in scalar or done

818
00:39:43,960 --> 00:39:51,599
outside by assembling multiple hits

819
00:39:46,500 --> 00:39:54,929
right so yeah

820
00:39:51,599 --> 00:39:56,309
yeah and we could do we could keep we

821
00:39:54,929 --> 00:39:58,708
could preserve the structure of the

822
00:39:56,309 --> 00:40:02,609
routine if we want to by just looping

823
00:39:58,708 --> 00:40:04,588
over each array so we could do this but

824
00:40:02,608 --> 00:40:07,199
it seems better to just call it four

825
00:40:04,588 --> 00:40:10,078
times and get the results back and like

826
00:40:07,199 --> 00:40:17,489
I said since you want this to sort of be

827
00:40:10,079 --> 00:40:19,910
done as part of that ending code I'm not

828
00:40:17,489 --> 00:40:23,159
sure how we want to deal with that like

829
00:40:19,909 --> 00:40:25,949
this kind of has to now move into the

830
00:40:23,159 --> 00:40:28,889
external code you know I'm saying like

831
00:40:25,949 --> 00:40:30,630
this part here now has to move into the

832
00:40:28,889 --> 00:40:34,018
code that actually calls the ray caster

833
00:40:30,630 --> 00:40:37,650
or you can have it be two-stage but it's

834
00:40:34,018 --> 00:40:40,828
something like that right so you know as

835
00:40:37,650 --> 00:40:43,889
those come out you then you then load

836
00:40:40,829 --> 00:40:45,690
them up as four things so again I'm not

837
00:40:43,889 --> 00:40:49,978
sure what we want to do about that but

838
00:40:45,690 --> 00:40:53,429
like this part here right just becomes a

839
00:40:49,978 --> 00:40:55,858
little crunky ER because yeah you have

840
00:40:53,429 --> 00:40:57,058
to deal with that part so I'm not sure

841
00:40:55,858 --> 00:40:59,338
what we want to do about that I'm gonna

842
00:40:57,059 --> 00:41:03,329
leave that temporarily and just think

843
00:40:59,338 --> 00:41:04,828
about these for the moment so assuming

844
00:41:03,329 --> 00:41:08,160
again that we're only doing one this

845
00:41:04,829 --> 00:41:10,259
right here is like the leaf loop so this

846
00:41:08,159 --> 00:41:19,119
is just going to be like looping over

847
00:41:10,259 --> 00:41:22,500
the leaf indices of a particular node

848
00:41:19,119 --> 00:41:22,500
[Music]

849
00:41:29,940 --> 00:41:35,889
so it's like this we pull one out we

850
00:41:33,550 --> 00:41:38,830
pull out whatever the grid node is that

851
00:41:35,889 --> 00:41:43,409
we're talking about here and that grid

852
00:41:38,829 --> 00:41:43,409
node so this is our lighting grid node

853
00:41:47,340 --> 00:41:53,320
this is all it is is two things it's how

854
00:41:50,920 --> 00:41:56,170
many of these there are and an offset

855
00:41:53,320 --> 00:41:57,670
into the list right and again I don't

856
00:41:56,170 --> 00:42:00,610
know if they should be in directed or

857
00:41:57,670 --> 00:42:03,340
not maybe they should maybe they should

858
00:42:00,610 --> 00:42:04,960
I have absolutely no idea so let's

859
00:42:03,340 --> 00:42:07,500
assume that they are undirected for now

860
00:42:04,960 --> 00:42:19,449
like I said so this would be you know

861
00:42:07,500 --> 00:42:26,050
start index one pass last index and then

862
00:42:19,449 --> 00:42:28,689
be loop and this is telling us like what

863
00:42:26,050 --> 00:42:31,380
in that array those are going to be so

864
00:42:28,690 --> 00:42:36,780
then our leaf index is like solution

865
00:42:31,380 --> 00:42:40,150
spatial leaf indices and it's just this

866
00:42:36,780 --> 00:42:43,990
right so we grab one of those out we now

867
00:42:40,150 --> 00:42:48,309
have our leaf index we look it up and we

868
00:42:43,989 --> 00:42:50,229
copy out right and so again like I said

869
00:42:48,309 --> 00:42:53,559
the thing I don't know is should those

870
00:42:50,230 --> 00:42:54,969
just be flattened and I have absolutely

871
00:42:53,559 --> 00:42:57,900
no idea whether they should be flattened

872
00:42:54,969 --> 00:43:00,879
or not maybe maybe not

873
00:42:57,900 --> 00:43:03,280
totally don't know have no idea

874
00:43:00,880 --> 00:43:04,510
furthermore it may be that not only they

875
00:43:03,280 --> 00:43:07,570
should be flattened but they should

876
00:43:04,510 --> 00:43:12,400
actually also be likes whistled so that

877
00:43:07,570 --> 00:43:14,170
you load for a time and then you write

878
00:43:12,400 --> 00:43:15,940
but I mean then what would you do for

879
00:43:14,170 --> 00:43:18,789
nodes that don't have four things it

880
00:43:15,940 --> 00:43:21,400
wouldn't work like because you are

881
00:43:18,789 --> 00:43:22,960
wasting precast at that point so unless

882
00:43:21,400 --> 00:43:25,240
you had an average of four things for

883
00:43:22,960 --> 00:43:27,639
node that which I don't think you will I

884
00:43:25,239 --> 00:43:29,459
mean maybe but that doesn't seem like a

885
00:43:27,639 --> 00:43:32,049
good idea I don't know

886
00:43:29,460 --> 00:43:33,250
that's a little temperamental I'm not

887
00:43:32,050 --> 00:43:34,600
sure what we'd want to do there if you

888
00:43:33,250 --> 00:43:36,099
ended up having an average of four

889
00:43:34,599 --> 00:43:37,360
things four no typically like either

890
00:43:36,099 --> 00:43:39,610
zero four eight

891
00:43:37,360 --> 00:43:41,470
we're not uncommon like discritization

892
00:43:39,610 --> 00:43:43,000
x' then that might not be bad because

893
00:43:41,469 --> 00:43:45,189
then you could just like Swizzle them

894
00:43:43,000 --> 00:43:46,659
once the beginning and not have to

895
00:43:45,190 --> 00:43:50,590
Swizzle them here so I don't actually

896
00:43:46,659 --> 00:43:53,099
know about that part either I'll put

897
00:43:50,590 --> 00:43:53,100
that up here

898
00:44:24,949 --> 00:44:29,529
and one of the interesting things about

899
00:44:26,599 --> 00:44:32,000
that so now that I'm thinking about that

900
00:44:29,530 --> 00:44:34,760
maybe the answer is that's just what you

901
00:44:32,000 --> 00:44:37,519
do because if you load four boxes at a

902
00:44:34,760 --> 00:44:39,079
time from the walk and that's just what

903
00:44:37,519 --> 00:44:41,088
you do you don't need the second loop

904
00:44:39,079 --> 00:44:54,349
because there's no needs to save them

905
00:44:41,088 --> 00:44:58,119
now right to heck with it I'm just gonna

906
00:44:54,349 --> 00:45:01,010
say that's what we do so if we make that

907
00:44:58,119 --> 00:45:04,640
concession and say we're at four zero

908
00:45:01,010 --> 00:45:10,210
four or eight boundaries basically then

909
00:45:04,639 --> 00:45:13,639
this comes into the middle now right and

910
00:45:10,210 --> 00:45:16,400
this loop is just look we walk over some

911
00:45:13,639 --> 00:45:20,059
stuff we've priests whistled this crap

912
00:45:16,400 --> 00:45:23,210
already so basically this happens at

913
00:45:20,059 --> 00:45:25,909
tree construction time so we're still

914
00:45:23,210 --> 00:45:27,769
gonna do this right like that still

915
00:45:25,909 --> 00:45:29,328
happens but it happens at tree

916
00:45:27,769 --> 00:45:31,509
construction times so in like build

917
00:45:29,329 --> 00:45:34,369
spatial partition for lighting in here

918
00:45:31,510 --> 00:45:43,369
what we would actually do is do the grid

919
00:45:34,369 --> 00:45:45,710
build right we do the grid build here we

920
00:45:43,369 --> 00:45:48,980
cross our fingers and pray we don't blow

921
00:45:45,710 --> 00:45:50,780
out the cache doing that but assuming

922
00:45:48,980 --> 00:45:53,329
that it stays in l2 which should be 200

923
00:45:50,780 --> 00:46:02,450
physics K which it probably will most of

924
00:45:53,329 --> 00:46:07,400
the time maybe might not do that but we

925
00:46:02,449 --> 00:46:08,989
do walk the grid in order so we may get

926
00:46:07,400 --> 00:46:10,639
enough for you sunrays I don't know

927
00:46:08,989 --> 00:46:13,009
doesn't matter we're gonna do it anyway

928
00:46:10,639 --> 00:46:14,000
so in here we would say okay we go

929
00:46:13,010 --> 00:46:17,300
through the welcome to season leaf

930
00:46:14,000 --> 00:46:18,440
indices and we literally just load this

931
00:46:17,300 --> 00:46:20,930
crap out directly

932
00:46:18,440 --> 00:46:22,970
so in here when we say look we have a

933
00:46:20,929 --> 00:46:25,549
spatial grid node and that spatial grid

934
00:46:22,969 --> 00:46:27,559
node is what we loaded out of the walk

935
00:46:25,550 --> 00:46:29,660
table we're then going to load leaves

936
00:46:27,559 --> 00:46:34,130
directly out of that node from our

937
00:46:29,659 --> 00:46:39,299
spatial you know grid leaves so this is

938
00:46:34,130 --> 00:46:52,960
a direct walk rather than you know

939
00:46:39,300 --> 00:46:54,880
in other words this is this right so we

940
00:46:52,960 --> 00:46:57,070
basically say like look load this thing

941
00:46:54,880 --> 00:47:00,820
out of here and we're gonna like test

942
00:46:57,070 --> 00:47:03,940
that crap a bunch of times now so inside

943
00:47:00,820 --> 00:47:08,769
the leaf we load up the box min in the

944
00:47:03,940 --> 00:47:11,108
box max directly like so and then when

945
00:47:08,769 --> 00:47:13,809
we do this stuff and we're doing like

946
00:47:11,108 --> 00:47:17,440
the Hadamard products with the invar ad

947
00:47:13,809 --> 00:47:22,000
here this Inver ad is actually the thing

948
00:47:17,440 --> 00:47:26,679
that's duplicated not this right so in

949
00:47:22,000 --> 00:47:30,760
Brady is like load opt up right so this

950
00:47:26,679 --> 00:47:34,779
right is load up up from this rady here

951
00:47:30,760 --> 00:47:36,910
you know I'm saying and so I mean we

952
00:47:34,780 --> 00:47:39,010
could have it passed us a 4x but I don't

953
00:47:36,909 --> 00:47:40,480
think there's any point in doing that at

954
00:47:39,010 --> 00:47:42,190
the moment because it has to be loaded

955
00:47:40,480 --> 00:47:43,869
up either this we can take because we

956
00:47:42,190 --> 00:47:48,338
know it's that way but this is actually

957
00:47:43,869 --> 00:47:51,550
just a single one so this is like you

958
00:47:48,338 --> 00:48:00,820
know single ray D instead and then here

959
00:47:51,550 --> 00:48:02,980
we load it up we do a load up right so

960
00:48:00,820 --> 00:48:05,039
at that point yet in fraidy is the thing

961
00:48:02,980 --> 00:48:11,260
the next M so this all stays the same

962
00:48:05,039 --> 00:48:12,369
like all of this right this is all

963
00:48:11,260 --> 00:48:17,609
exactly the same

964
00:48:12,369 --> 00:48:17,608
I don't know what close enough does

965
00:48:17,730 --> 00:48:23,139
nothing so I'm not sure why that's there

966
00:48:20,829 --> 00:48:24,460
anymore that would have just been

967
00:48:23,139 --> 00:48:28,358
getting thrown out by the optimizer

968
00:48:24,460 --> 00:48:30,369
anyway as useless but so in here we

969
00:48:28,358 --> 00:48:32,009
would we would then what we need to do

970
00:48:30,369 --> 00:48:35,619
is figure out what we're actually

971
00:48:32,010 --> 00:48:40,869
storing here as far as like our team in

972
00:48:35,619 --> 00:48:42,760
T max stuff right and I think you can

973
00:48:40,869 --> 00:48:44,920
just do exactly the same thing and then

974
00:48:42,760 --> 00:48:49,080
at the end we're just gonna load out the

975
00:48:44,920 --> 00:48:49,079
one we actually care about I think

976
00:48:53,940 --> 00:49:06,099
right so in here we loop through and we

977
00:48:57,940 --> 00:49:07,900
just say none of this is necessary so

978
00:49:06,099 --> 00:49:11,588
we're literally just talking about the

979
00:49:07,900 --> 00:49:14,920
same crap as before so like we just go

980
00:49:11,588 --> 00:49:17,380
into this thing and say we're keeping

981
00:49:14,920 --> 00:49:22,690
exactly the same crap as we were keeping

982
00:49:17,380 --> 00:49:25,660
before oops oh it's already there so

983
00:49:22,690 --> 00:49:27,820
we're keeping this exact crap this exact

984
00:49:25,659 --> 00:49:36,629
crap is exactly what we're keeping all

985
00:49:27,820 --> 00:49:36,630
of this stuff right yeah and off we go

986
00:49:39,400 --> 00:49:45,309
yep so then when we come through here

987
00:49:42,818 --> 00:49:48,579
and we've done all of the selecting like

988
00:49:45,309 --> 00:49:53,380
we now at the end the difference is that

989
00:49:48,579 --> 00:49:55,990
we now have like a instead of having

990
00:49:53,380 --> 00:50:00,358
four different rays that all need to

991
00:49:55,989 --> 00:50:04,748
have an answer we now actually have like

992
00:50:00,358 --> 00:50:10,449
one ray whose answer is spread across

993
00:50:04,748 --> 00:50:15,129
multiple values now the good part about

994
00:50:10,449 --> 00:50:25,989
that is like the the good thing about

995
00:50:15,130 --> 00:50:31,329
that the good thing about that is we

996
00:50:25,989 --> 00:50:33,338
don't have n weigh loads in SSE so we we

997
00:50:31,329 --> 00:50:35,349
have to process these see really any way

998
00:50:33,338 --> 00:50:37,239
to look up their lighting values so

999
00:50:35,349 --> 00:50:39,548
that's actually a win the thing that's

1000
00:50:37,239 --> 00:50:42,758
not good about this is figuring out

1001
00:50:39,548 --> 00:50:46,748
which one of these to pick is actually

1002
00:50:42,759 --> 00:50:51,579
non-trivial because actually getting a

1003
00:50:46,748 --> 00:50:57,028
specific one out is hard and it gets

1004
00:50:51,579 --> 00:50:57,028
easier using later versions of the

1005
00:50:57,119 --> 00:51:06,278
instruction set but as for just sticking

1006
00:51:00,518 --> 00:51:08,949
with SSE one and two I'm not sure what

1007
00:51:06,278 --> 00:51:16,298
we have for extraction that doesn't

1008
00:51:08,949 --> 00:51:18,598
involve like I just don't know if we

1009
00:51:16,298 --> 00:51:18,599
have

1010
00:51:31,000 --> 00:51:43,230
I don't know if we have a lot of ways to

1011
00:51:33,730 --> 00:51:43,230
do that that's not gonna help us

1012
00:51:49,369 --> 00:51:53,819
yet suit I'm probably not explaining

1013
00:51:52,710 --> 00:51:55,230
this cuz I'm thinking it about in my

1014
00:51:53,820 --> 00:51:58,410
head and I'm not saying it which is not

1015
00:51:55,230 --> 00:52:01,260
helping anyone I'm just trying to figure

1016
00:51:58,409 --> 00:52:06,949
out how do I what would be the quickest

1017
00:52:01,260 --> 00:52:11,250
way for me to get the results to be what

1018
00:52:06,949 --> 00:52:14,009
to use a comparison to get what the

1019
00:52:11,250 --> 00:52:17,159
results actually are because once we

1020
00:52:14,010 --> 00:52:20,810
leave the for wide path we need to know

1021
00:52:17,159 --> 00:52:22,829
which of the four was the minimum right

1022
00:52:20,809 --> 00:52:26,130
that's the tough part

1023
00:52:22,829 --> 00:52:29,329
and so needing to figure out which for

1024
00:52:26,130 --> 00:52:32,010
which of the four was smallest is the

1025
00:52:29,329 --> 00:52:37,590
problem that we have and I'm not sure

1026
00:52:32,010 --> 00:52:39,840
how we get that to happen efficiently

1027
00:52:37,590 --> 00:52:43,920
it's not really something I've done in

1028
00:52:39,840 --> 00:52:45,420
ssee hardly at all and I don't know like

1029
00:52:43,920 --> 00:52:47,280
what if we went a little higher up what

1030
00:52:45,420 --> 00:52:52,980
if we let ourselves go up to like four

1031
00:52:47,280 --> 00:52:55,640
point something right is there some way

1032
00:52:52,980 --> 00:53:01,170
that we can extract something

1033
00:52:55,639 --> 00:53:09,569
numerically so those are all immediate

1034
00:53:01,170 --> 00:53:11,220
so no those are all oh that's not an

1035
00:53:09,570 --> 00:53:15,900
immediate but that's it that inserts

1036
00:53:11,219 --> 00:53:21,949
that value right so that doesn't help us

1037
00:53:15,900 --> 00:53:21,950
either here let's do this

1038
00:53:25,710 --> 00:53:29,920
and I'll look at three I mean if we have

1039
00:53:28,150 --> 00:53:36,230
to add three I guess I wouldn't cry

1040
00:53:29,920 --> 00:53:38,670
about it but so let's look at swizzles

1041
00:53:36,230 --> 00:53:44,409
[Music]

1042
00:53:38,670 --> 00:53:48,700
moves miscellaneous --is and general

1043
00:53:44,409 --> 00:53:49,960
support I guess I don't know I'm just

1044
00:53:48,699 --> 00:53:51,549
trying to figure out what I might be

1045
00:53:49,960 --> 00:53:53,380
able to do here to get something out

1046
00:53:51,550 --> 00:53:55,180
that wasn't based on an immediate and I

1047
00:53:53,380 --> 00:53:56,710
there may just not be away cuz if that's

1048
00:53:55,179 --> 00:53:57,969
if that's the case then it's like a

1049
00:53:56,710 --> 00:54:01,840
switch statement or something right

1050
00:53:57,969 --> 00:54:03,639
which is not not my favorite it's in the

1051
00:54:01,840 --> 00:54:05,800
faster part of the routine it only

1052
00:54:03,639 --> 00:54:07,569
happens once so it's not the end of the

1053
00:54:05,800 --> 00:54:09,789
world if that's what has to happen but

1054
00:54:07,570 --> 00:54:12,760
it's just it would be nice if we didn't

1055
00:54:09,789 --> 00:54:15,340
do that but I'm not sure if there's any

1056
00:54:12,760 --> 00:54:18,010
way to not do that right like I'm not

1057
00:54:15,340 --> 00:54:20,970
sure there's any way to tell it like hey

1058
00:54:18,010 --> 00:54:25,290
don't do that

1059
00:54:20,969 --> 00:54:25,289
shuffle it instead or something

1060
00:54:47,710 --> 00:54:53,809
yeah I don't know so I think what I

1061
00:54:52,099 --> 00:54:57,949
would have to do at that point is I'd

1062
00:54:53,809 --> 00:55:00,049
have to just do unless I'm missing

1063
00:54:57,949 --> 00:55:04,639
something I have to do something with

1064
00:55:00,050 --> 00:55:06,350
like a table or something right I mean

1065
00:55:04,639 --> 00:55:11,239
or I guess I can do a store in a load

1066
00:55:06,349 --> 00:55:15,949
using the mouth mask value so like if I

1067
00:55:11,239 --> 00:55:18,909
do the move mask you know if I do have

1068
00:55:15,949 --> 00:55:22,069
move mask PS I can get the high bit

1069
00:55:18,909 --> 00:55:25,639
which means that if I do a comparison I

1070
00:55:22,070 --> 00:55:28,460
should be okay so basically like you

1071
00:55:25,639 --> 00:55:38,889
know if I take the min what I want is

1072
00:55:28,460 --> 00:55:38,889
the min and do I not have a min

1073
00:55:39,849 --> 00:55:42,849
seriously

1074
00:55:46,769 --> 00:55:50,940
there's a min what are you talking about

1075
00:56:01,469 --> 00:56:06,209
I mean you can definitely take the

1076
00:56:03,929 --> 00:56:08,068
minimum of two things and it produces

1077
00:56:06,210 --> 00:56:11,639
the result on the other end why am i

1078
00:56:08,068 --> 00:56:12,949
open i had these checks still I'm like

1079
00:56:11,639 --> 00:56:18,960
what are you talking about

1080
00:56:12,949 --> 00:56:22,858
sorry so I can do a max and a min like I

1081
00:56:18,960 --> 00:56:26,068
can do these to figure out like which of

1082
00:56:22,858 --> 00:56:29,460
the T values is the one we're gonna use

1083
00:56:26,068 --> 00:56:31,559
right it's just kind of expensive and to

1084
00:56:29,460 --> 00:56:33,300
sketch out what I mean like why I'm

1085
00:56:31,559 --> 00:56:36,210
saying that it's kind of expensive to do

1086
00:56:33,300 --> 00:56:42,450
is I've got T ray and there's four

1087
00:56:36,210 --> 00:56:44,760
values in it so if I do like tear a I

1088
00:56:42,449 --> 00:56:46,710
would need to first Swizzle it right

1089
00:56:44,760 --> 00:56:49,680
like I need to do something where I

1090
00:56:46,710 --> 00:56:53,699
would say like look do a shuffle on tear

1091
00:56:49,679 --> 00:56:57,118
a where we produce like you know 0 1 0 1

1092
00:56:53,699 --> 00:57:01,500
&amp; 2 3 2 3 or something and take the

1093
00:56:57,119 --> 00:57:03,240
minimum and then because I need to take

1094
00:57:01,500 --> 00:57:05,789
the minimum I need to make sure all the

1095
00:57:03,239 --> 00:57:08,459
values have gotten their minimum taken

1096
00:57:05,789 --> 00:57:11,759
so I need to I need to get the minimum

1097
00:57:08,460 --> 00:57:14,068
of the four wide elements you know I'm

1098
00:57:11,760 --> 00:57:18,480
saying so in here I would say all right

1099
00:57:14,068 --> 00:57:25,099
you know shuffle T array to give me you

1100
00:57:18,480 --> 00:57:25,099
know the there's like you know 0 1 I

1101
00:57:25,818 --> 00:57:29,519
guess it doesn't really matter because

1102
00:57:27,960 --> 00:57:30,929
you're wasting a lot of ops here but I'm

1103
00:57:29,519 --> 00:57:32,969
not sure how you would do it unless you

1104
00:57:30,929 --> 00:57:36,649
just do bulks of these at a time which

1105
00:57:32,969 --> 00:57:36,649
maybe we need to do but we'll see so

1106
00:57:37,400 --> 00:57:42,960
imagine you do this where you just like

1107
00:57:39,389 --> 00:57:45,328
look I want 0 1 0 1 and I want 2 3 2 3

1108
00:57:42,960 --> 00:57:52,889
out of this or something right

1109
00:57:45,329 --> 00:57:55,380
and when I do these two what I then want

1110
00:57:52,889 --> 00:57:58,049
to do is take the minimum of those so

1111
00:57:55,380 --> 00:57:59,789
like this is the mins or this is the min

1112
00:57:58,050 --> 00:58:06,318
like 0 2 1 3

1113
00:57:59,789 --> 00:58:06,318
right so it's the min a piano

1114
00:58:09,179 --> 00:58:14,500
so I would need to do that first and

1115
00:58:11,679 --> 00:58:17,588
then once I have that minimum I need to

1116
00:58:14,500 --> 00:58:27,510
shuffle it one more time like you know

1117
00:58:17,588 --> 00:58:27,509
like this basically and that would be

1118
00:58:31,139 --> 00:58:40,029
this actually that because I want to

1119
00:58:38,559 --> 00:58:42,250
take this and I want to move the two

1120
00:58:40,030 --> 00:58:44,050
three down into the zero eighth position

1121
00:58:42,250 --> 00:58:48,460
so it's lined up with the other one

1122
00:58:44,050 --> 00:58:54,789
right and so then I would do the minty

1123
00:58:48,460 --> 00:59:00,190
right routine min is just mm or I guess

1124
00:58:54,789 --> 00:59:03,659
that shadows it but min P s min a B then

1125
00:59:00,190 --> 00:59:06,519
C D so then you have a team in value and

1126
00:59:03,659 --> 00:59:10,799
that team in value tells you what the

1127
00:59:06,519 --> 00:59:14,409
lowest one was and if you do a comp EQ

1128
00:59:10,800 --> 00:59:19,000
at that point you're gonna get out like

1129
00:59:14,409 --> 00:59:22,420
which of what you're closest which one

1130
00:59:19,000 --> 00:59:26,699
was the closest right so you would

1131
00:59:22,420 --> 00:59:36,159
basically do like teaming you know

1132
00:59:26,699 --> 00:59:39,879
teaming mask equals mm comp EQ the tear

1133
00:59:36,159 --> 00:59:43,059
a with the team in that would give you

1134
00:59:39,880 --> 00:59:45,220
zeros in all the lanes and ones in the

1135
00:59:43,059 --> 00:59:48,759
one lane that was the minimum now two

1136
00:59:45,219 --> 00:59:51,639
things could be the minimum so it's a

1137
00:59:48,760 --> 00:59:56,020
little bit tricky there but after you do

1138
00:59:51,639 --> 00:59:59,108
this copy Q you can say you know the

1139
00:59:56,019 --> 01:00:02,889
output mask that we get is going to be

1140
00:59:59,108 --> 01:00:05,469
the mm mauve mask of team in mask and at

1141
01:00:02,889 --> 01:00:07,529
that point we now finally have a thing

1142
01:00:05,469 --> 01:00:11,338
that tells us which lane to extract

1143
01:00:07,530 --> 01:00:11,339
right and

1144
01:00:13,150 --> 01:00:19,780
at that point we can if we want to load

1145
01:00:15,699 --> 01:00:24,129
it so we can f/32 load stuff now and

1146
01:00:19,780 --> 01:00:26,110
again it's it's not great but I think

1147
01:00:24,130 --> 01:00:29,019
that's how you would have to do it so in

1148
01:00:26,110 --> 01:00:33,340
order to produce the correct versions of

1149
01:00:29,019 --> 01:00:40,090
each of these things you would now have

1150
01:00:33,340 --> 01:00:43,650
to use the mask now to be fair I think

1151
01:00:40,090 --> 01:00:55,120
you can still do the rest of the

1152
01:00:43,650 --> 01:00:58,200
computations pretty easily so it's

1153
01:00:55,119 --> 01:01:02,920
really just that one extraction of like

1154
01:00:58,199 --> 01:01:06,719
well let's see so what were these doing

1155
01:01:02,920 --> 01:01:06,720
down here let's just take a quick look

1156
01:01:13,050 --> 01:01:25,390
so in terms of all this stuff where

1157
01:01:16,360 --> 01:01:28,019
you're computing it I feel like a lot of

1158
01:01:25,389 --> 01:01:28,019
that stuff

1159
01:01:30,900 --> 01:01:42,740
in scaler you probably don't have to do

1160
01:01:33,960 --> 01:01:42,740
it this way I'm guessing

1161
01:01:53,719 --> 01:02:00,629
that's a little bit hard to say em but

1162
01:01:59,219 --> 01:02:02,608
again if you look at this extraction

1163
01:02:00,630 --> 01:02:04,410
that was happening down here like that

1164
01:02:02,608 --> 01:02:08,308
doesn't have to happen anymore so like

1165
01:02:04,409 --> 01:02:10,789
this can just occur like directly you

1166
01:02:08,309 --> 01:02:10,790
know what I mean

1167
01:02:33,099 --> 01:02:36,829
so yeah so if we were to do this

1168
01:02:35,659 --> 01:02:39,949
directly just want to see what we

1169
01:02:36,829 --> 01:02:42,289
actually need so the t hit value here is

1170
01:02:39,949 --> 01:02:46,549
just whether or not this thing was equal

1171
01:02:42,289 --> 01:02:49,519
to f 32 max which at this point we don't

1172
01:02:46,550 --> 01:02:51,590
care about exactly here where we have to

1173
01:02:49,519 --> 01:02:53,509
do the get component that doesn't exist

1174
01:02:51,590 --> 01:02:55,670
because we already know that that's the

1175
01:02:53,510 --> 01:02:57,980
emission direction we already have that

1176
01:02:55,670 --> 01:03:05,269
information so that's not particularly

1177
01:02:57,980 --> 01:03:07,789
interesting either right this here is

1178
01:03:05,269 --> 01:03:10,309
literally just that one if so it's

1179
01:03:07,789 --> 01:03:12,409
literally just hey when we get the

1180
01:03:10,309 --> 01:03:13,610
actual T min value out of this thing

1181
01:03:12,409 --> 01:03:15,469
which is the part that's a little bit

1182
01:03:13,610 --> 01:03:20,990
tricky because we have to extract it

1183
01:03:15,469 --> 01:03:22,339
using thing but you know like all of

1184
01:03:20,989 --> 01:03:24,289
these extractions it looks like we were

1185
01:03:22,340 --> 01:03:25,880
already doing them right so in a sense

1186
01:03:24,289 --> 01:03:29,150
they're not more expensive they're the

1187
01:03:25,880 --> 01:03:31,340
same so in here we would do I guess the

1188
01:03:29,150 --> 01:03:36,940
same thing right we would just say look

1189
01:03:31,340 --> 01:03:36,940
if if this is not equal to T ray

1190
01:03:39,519 --> 01:03:51,079
whatever the tier 8 values ends up being

1191
01:03:41,929 --> 01:03:53,179
like the scalar T ray like so and then

1192
01:03:51,079 --> 01:03:55,400
in here where we do like the get

1193
01:03:53,179 --> 01:03:57,579
component and all that stuff we can just

1194
01:03:55,400 --> 01:04:02,809
do this thing we can just do these in

1195
01:03:57,579 --> 01:04:05,179
one wide because although it was nice to

1196
01:04:02,809 --> 01:04:07,070
do them too wide this is the expensive

1197
01:04:05,179 --> 01:04:09,799
part of the operation and it only works

1198
01:04:07,070 --> 01:04:11,930
with one wide so I'm not sure we were

1199
01:04:09,800 --> 01:04:13,670
really saving anything I mean you save a

1200
01:04:11,929 --> 01:04:15,079
little bit but most of it not really

1201
01:04:13,670 --> 01:04:16,220
because you got to do this and that's

1202
01:04:15,079 --> 01:04:19,460
the part that actually cost you

1203
01:04:16,219 --> 01:04:23,209
something so I think that's probably

1204
01:04:19,460 --> 01:04:26,929
okay I mean here's the hit P that you

1205
01:04:23,210 --> 01:04:30,740
have right so you've got the hit P here

1206
01:04:26,929 --> 01:04:32,419
and it's just going to be that value so

1207
01:04:30,739 --> 01:04:34,649
it's just the Ray origin

1208
01:04:32,420 --> 01:04:39,539
plus the T ray x TD

1209
01:04:34,650 --> 01:04:42,210
and that value the sample n is the hard

1210
01:04:39,539 --> 01:04:46,110
thing like it's this ridiculous nonsense

1211
01:04:42,210 --> 01:04:48,900
here and so I think that's a lot easier

1212
01:04:46,110 --> 01:04:50,940
to compute now because all you would

1213
01:04:48,900 --> 01:04:53,579
really need to do is see which of these

1214
01:04:50,940 --> 01:04:58,639
things is the higher value is it the X

1215
01:04:53,579 --> 01:05:02,759
the Y or the Z right I think that's all

1216
01:04:58,639 --> 01:05:05,159
this is saying so when you look at what

1217
01:05:02,760 --> 01:05:06,420
the normal is you would all you would

1218
01:05:05,159 --> 01:05:09,179
really need to do is look at which value

1219
01:05:06,420 --> 01:05:12,110
was highest and that's something we

1220
01:05:09,179 --> 01:05:15,359
could do probably a lot easier than this

1221
01:05:12,110 --> 01:05:17,280
would be my guess so I'm thinking what

1222
01:05:15,360 --> 01:05:20,250
we could probably do there is something

1223
01:05:17,280 --> 01:05:23,460
much much much more straightforward so

1224
01:05:20,250 --> 01:05:26,099
we could probably do something like if

1225
01:05:23,460 --> 01:05:29,010
we computed these values the same way

1226
01:05:26,099 --> 01:05:32,579
that we're doing it here so we do this

1227
01:05:29,010 --> 01:05:35,850
Center and the radius and we look at

1228
01:05:32,579 --> 01:05:39,299
what the Delta value is between the

1229
01:05:35,849 --> 01:05:42,809
center you know it's really the inverse

1230
01:05:39,300 --> 01:05:45,019
radius that we need there I guess or is

1231
01:05:42,809 --> 01:05:45,019
it

1232
01:05:56,909 --> 01:06:01,769
so I guess yeah all we really need to do

1233
01:05:59,519 --> 01:06:03,360
is is do this computation which I

1234
01:06:01,769 --> 01:06:07,469
suppose is not that hard right it's just

1235
01:06:03,360 --> 01:06:11,700
this so we would need to compute those

1236
01:06:07,469 --> 01:06:13,679
two values and then we would need to use

1237
01:06:11,699 --> 01:06:17,699
that radius to compute the inverse

1238
01:06:13,679 --> 01:06:20,279
radius so this this code would work

1239
01:06:17,699 --> 01:06:24,989
exactly the same way it just would

1240
01:06:20,280 --> 01:06:26,160
wouldn't have to use it wouldn't have to

1241
01:06:24,989 --> 01:06:27,750
worry about the fact that there are four

1242
01:06:26,159 --> 01:06:29,639
different values so when it comes time

1243
01:06:27,750 --> 01:06:31,800
to get down to here you actually

1244
01:06:29,639 --> 01:06:39,989
wouldn't probably do that you'd probably

1245
01:06:31,800 --> 01:06:44,750
do something like this hmm you'd

1246
01:06:39,989 --> 01:06:47,250
probably say like if the scale D is like

1247
01:06:44,750 --> 01:06:48,750
less than er so you've got I mean what

1248
01:06:47,250 --> 01:06:54,440
are all the comparisons here that we

1249
01:06:48,750 --> 01:06:54,440
were doing right like here they all are

1250
01:06:59,960 --> 01:07:05,250
so those are the comparisons you're

1251
01:07:02,039 --> 01:07:07,980
doing you're doing like X s and y XS and

1252
01:07:05,250 --> 01:07:10,110
zy less than X y less than Z Z less than

1253
01:07:07,980 --> 01:07:12,800
excellent you're right so what you'd

1254
01:07:10,110 --> 01:07:18,360
probably do is you just do like you know

1255
01:07:12,800 --> 01:07:22,250
normal bitmask right and you'd say just

1256
01:07:18,360 --> 01:07:22,250
put all these together like

1257
01:07:27,909 --> 01:07:33,429
so you'd do these comparisons where you

1258
01:07:31,119 --> 01:07:39,278
do each of the you do each of the

1259
01:07:33,429 --> 01:07:42,788
comparisons and then you just like grab

1260
01:07:39,278 --> 01:07:48,130
the bit mask out and load right so it'd

1261
01:07:42,789 --> 01:07:49,778
be and in fact since you've got you

1262
01:07:48,130 --> 01:07:51,759
could probably do that more efficiently

1263
01:07:49,778 --> 01:07:58,869
with a single mouth mask just by doing

1264
01:07:51,759 --> 01:08:02,380
like putting those in like some lanes so

1265
01:07:58,869 --> 01:08:05,710
you could do like x one of your vectors

1266
01:08:02,380 --> 01:08:09,338
could be like X x YY and the bottom

1267
01:08:05,710 --> 01:08:13,179
could be y zy X Z and then you'd only

1268
01:08:09,338 --> 01:08:17,220
have the Z ones but you wouldn't even

1269
01:08:13,179 --> 01:08:17,220
need them right probably

1270
01:08:42,199 --> 01:08:47,519
strictly out of curiosity are we just

1271
01:08:44,699 --> 01:08:53,149
are we totally missing an absolute value

1272
01:08:47,520 --> 01:08:53,150
here I think we are

1273
01:09:08,298 --> 01:09:12,269
so I think this code is missing an

1274
01:09:10,560 --> 01:09:13,739
absolute value right because we haven't

1275
01:09:12,270 --> 01:09:15,000
tested like another thing we have to do

1276
01:09:13,738 --> 01:09:16,738
when we do our lighting quality pass

1277
01:09:15,000 --> 01:09:18,920
right is we have to test all these

1278
01:09:16,738 --> 01:09:22,108
things and make sure that we're actually

1279
01:09:18,920 --> 01:09:23,819
we don't have bugs in the test case and

1280
01:09:22,109 --> 01:09:27,750
I feel like this is missing an absolute

1281
01:09:23,819 --> 01:09:31,920
value because all of these comparisons

1282
01:09:27,750 --> 01:09:33,798
are not quite right they're only going

1283
01:09:31,920 --> 01:09:42,029
to work if you're on the positive side

1284
01:09:33,798 --> 01:09:43,979
or the negative side of both right you

1285
01:09:42,029 --> 01:09:48,179
can't be comparing these things if you

1286
01:09:43,979 --> 01:09:49,618
don't have them absolute valued first so

1287
01:09:48,179 --> 01:09:55,770
I feel like you would have to end them

1288
01:09:49,618 --> 01:10:15,539
with that mask before so I'm gonna say

1289
01:09:55,770 --> 01:10:16,829
like I'm gonna say like we probably are

1290
01:10:15,539 --> 01:10:18,238
gonna end up vaporizing that case

1291
01:10:16,828 --> 01:10:20,849
because I think doing this in scaler is

1292
01:10:18,238 --> 01:10:24,178
probably the right way to go but I don't

1293
01:10:20,849 --> 01:10:26,010
know right so that's hard to say so

1294
01:10:24,179 --> 01:10:27,719
anyway in here we would do a normal bit

1295
01:10:26,010 --> 01:10:35,159
mask and I guess we just need to know

1296
01:10:27,719 --> 01:10:37,710
like look we need to know two things we

1297
01:10:35,158 --> 01:10:40,529
need to know the signs of these things

1298
01:10:37,710 --> 01:10:45,029
and that's one move so like the sign

1299
01:10:40,529 --> 01:10:52,399
mask would just be one you know move

1300
01:10:45,029 --> 01:11:01,679
mask of the like pact XYZ vector and

1301
01:10:52,399 --> 01:11:04,738
then the comparator mask the like or the

1302
01:11:01,679 --> 01:11:07,980
greater mask that's going to be like a

1303
01:11:04,738 --> 01:11:13,589
mauve mask of a comparison between like

1304
01:11:07,979 --> 01:11:17,819
pact XYZ and I need to know like the

1305
01:11:13,590 --> 01:11:21,659
comparison between like XY and Z and Y Z

1306
01:11:17,819 --> 01:11:23,908
and X probably but once you know those

1307
01:11:21,658 --> 01:11:26,549
comparisons I don't know that you need

1308
01:11:23,908 --> 01:11:29,359
to know whether like transitive property

1309
01:11:26,550 --> 01:11:31,979
wise I should be able to determine from

1310
01:11:29,359 --> 01:11:35,368
just three comparisons shouldn't I

1311
01:11:31,979 --> 01:11:38,070
I might need one more but like you know

1312
01:11:35,368 --> 01:11:41,399
you could imagine doing like this is we

1313
01:11:38,069 --> 01:11:43,978
pack one with like X Y Z X right or

1314
01:11:41,399 --> 01:11:47,929
something like that and we do like X Y Z

1315
01:11:43,979 --> 01:11:52,769
X and packed like Y Z X Y or something

1316
01:11:47,929 --> 01:11:54,929
right or Y Z X Z I don't know but you

1317
01:11:52,769 --> 01:11:57,300
can see that us getting the extras one

1318
01:11:54,929 --> 01:12:00,449
in there but point being once we get the

1319
01:11:57,300 --> 01:12:04,050
sign and the greater than in theory we

1320
01:12:00,448 --> 01:12:07,379
should then have a way to use a lookup

1321
01:12:04,050 --> 01:12:13,199
table to generate the correct normal and

1322
01:12:07,380 --> 01:12:15,510
and it in right I would think and so I

1323
01:12:13,198 --> 01:12:20,788
think all we have to do at that point is

1324
01:12:15,510 --> 01:12:23,429
do two loads right you just do like base

1325
01:12:20,788 --> 01:12:29,609
normal or you know you do the normal and

1326
01:12:23,429 --> 01:12:33,840
you do like normal table and the normal

1327
01:12:29,609 --> 01:12:35,429
table just has this mass in it so it

1328
01:12:33,840 --> 01:12:38,578
takes those compares and gets us the

1329
01:12:35,429 --> 01:12:46,319
normal and then the sign table right

1330
01:12:38,578 --> 01:12:53,569
oops just looks up the sign mask and

1331
01:12:46,319 --> 01:12:53,569
applies that right well they're actually

1332
01:12:53,779 --> 01:12:57,929
so

1333
01:12:54,789 --> 01:12:57,930
[Music]

1334
01:13:03,260 --> 01:13:07,909
I think it's always the same so we

1335
01:13:05,119 --> 01:13:11,359
actually don't need that we just need to

1336
01:13:07,909 --> 01:13:12,590
know I mean I guess we still would want

1337
01:13:11,359 --> 01:13:14,210
to load it this way so that we could

1338
01:13:12,590 --> 01:13:17,690
Hadamard park them and not have to like

1339
01:13:14,210 --> 01:13:34,939
build that up but we might not even need

1340
01:13:17,689 --> 01:13:36,589
to do that all right so we would do

1341
01:13:34,939 --> 01:13:43,969
something like this and that would get

1342
01:13:36,590 --> 01:13:46,579
us our hit normal again just a sketch of

1343
01:13:43,970 --> 01:13:48,050
a routine we would come through here and

1344
01:13:46,579 --> 01:13:50,239
we would see whether or not this thing

1345
01:13:48,050 --> 01:13:53,029
needs to do it's like moon color dance

1346
01:13:50,239 --> 01:13:57,319
nonsense here we would say all right

1347
01:13:53,029 --> 01:14:01,069
like we can compute this we know we

1348
01:13:57,319 --> 01:14:03,649
already have that the hit ref color is

1349
01:14:01,069 --> 01:14:07,059
again an extraction so I think this is

1350
01:14:03,649 --> 01:14:11,839
like a getcomponent

1351
01:14:07,060 --> 01:14:13,340
based on that this would also I guess be

1352
01:14:11,840 --> 01:14:15,590
just a getcomponent

1353
01:14:13,340 --> 01:14:27,350
exactly like we're doing here this is

1354
01:14:15,590 --> 01:14:31,640
the the team in index here the emission

1355
01:14:27,350 --> 01:14:34,600
value again the same thing and then the

1356
01:14:31,640 --> 01:14:37,760
rest of this just just does its thing

1357
01:14:34,600 --> 01:14:45,160
right so then you're left with the

1358
01:14:37,760 --> 01:14:45,159
transfer PPS that you actually wanted

1359
01:14:47,448 --> 01:14:51,839
um I guess I don't need to initialize

1360
01:14:49,590 --> 01:14:54,659
that because both paths do it and then

1361
01:14:51,840 --> 01:14:57,810
you have the actual raycast light value

1362
01:14:54,659 --> 01:14:59,819
you asked for right and you just have to

1363
01:14:57,810 --> 01:15:01,949
actually do something with it and that's

1364
01:14:59,819 --> 01:15:04,109
what you would return I guess that's the

1365
01:15:01,948 --> 01:15:06,569
only thing and you wouldn't pass these

1366
01:15:04,109 --> 01:15:08,359
down like that wouldn't happen none of

1367
01:15:06,569 --> 01:15:10,948
this would happen you would just do this

1368
01:15:08,359 --> 01:15:12,869
cuz you're now like not lined up for

1369
01:15:10,948 --> 01:15:14,519
anything so you might as well just give

1370
01:15:12,869 --> 01:15:19,769
back the value and let someone else deal

1371
01:15:14,520 --> 01:15:21,600
with it right so I don't know like I

1372
01:15:19,770 --> 01:15:27,000
don't know to what extent this is better

1373
01:15:21,600 --> 01:15:29,010
or worse but you can see why I'm

1374
01:15:27,000 --> 01:15:31,229
thinking that this is a better routine

1375
01:15:29,010 --> 01:15:35,550
because I mean if you just look even if

1376
01:15:31,229 --> 01:15:37,409
the simplicity of it it's just a lot

1377
01:15:35,550 --> 01:15:39,390
clearer how you optimize this thing

1378
01:15:37,409 --> 01:15:44,309
because now you're just doing this one

1379
01:15:39,390 --> 01:15:45,660
fast loop and that's it right and you

1380
01:15:44,310 --> 01:15:48,480
only just have to make sure that that

1381
01:15:45,659 --> 01:15:50,369
runs as fast as humanly possible you may

1382
01:15:48,479 --> 01:15:55,019
do a little bit too many computations in

1383
01:15:50,369 --> 01:15:59,010
there so that's not great but you don't

1384
01:15:55,020 --> 01:16:01,110
have any real like issues beyond that

1385
01:15:59,010 --> 01:16:02,369
the one down shift is scaler just

1386
01:16:01,109 --> 01:16:05,099
happens when you pull have to pull the

1387
01:16:02,369 --> 01:16:06,238
index here which is annoying and I'm not

1388
01:16:05,100 --> 01:16:08,550
sure if there's a more efficient way to

1389
01:16:06,238 --> 01:16:09,599
do that right but that be the entirety

1390
01:16:08,550 --> 01:16:12,560
of the raycast

1391
01:16:09,600 --> 01:16:12,560
at that point

1392
01:16:29,359 --> 01:16:39,809
so and I would say that based on that

1393
01:16:33,029 --> 01:16:43,529
that looks worth doing to me because

1394
01:16:39,810 --> 01:16:47,010
it's so much more clear how this routine

1395
01:16:43,529 --> 01:16:54,000
runs and there's so much less stuff

1396
01:16:47,010 --> 01:16:55,710
happening in it the only thing that I

1397
01:16:54,000 --> 01:17:01,380
don't like about it is that I'm not sure

1398
01:16:55,710 --> 01:17:02,680
how to quickly get that T ray out of

1399
01:17:01,380 --> 01:17:05,739
there

1400
01:17:02,680 --> 01:17:05,739
[Music]

1401
01:17:14,840 --> 01:17:19,199
so I'm not 100% sure on that part and

1402
01:17:17,970 --> 01:17:21,270
I'd have to think about that this may

1403
01:17:19,199 --> 01:17:26,579
not be the fastest way to do that either

1404
01:17:21,270 --> 01:17:28,520
basically like a horizontal compare you

1405
01:17:26,579 --> 01:17:32,189
don't want to do horizontal compares

1406
01:17:28,520 --> 01:17:39,530
right like they're not they're not

1407
01:17:32,189 --> 01:17:44,399
favorable in Tsim D is bad at this so

1408
01:17:39,529 --> 01:17:46,349
it's an issue right and again I'm not

1409
01:17:44,399 --> 01:17:50,189
really sure what I would do to try and

1410
01:17:46,350 --> 01:17:54,860
get rid of that there are some ways you

1411
01:17:50,189 --> 01:17:54,859
can I mean so

1412
01:18:03,979 --> 01:18:13,409
so if we allow sse3 we do have shuffle

1413
01:18:07,859 --> 01:18:18,029
epi8 right and shuffle epi8 is extremely

1414
01:18:13,409 --> 01:18:19,739
good at doing things quickly so but I'm

1415
01:18:18,029 --> 01:18:33,889
pretty sure you can't do it if you don't

1416
01:18:19,739 --> 01:18:35,309
allow SSE is that ssse3 what what is

1417
01:18:33,890 --> 01:18:40,260
ssse3

1418
01:18:35,310 --> 01:18:44,330
oh it's the supplement sorry

1419
01:18:40,260 --> 01:18:47,100
it's the supplemental streaming Cindy I

1420
01:18:44,329 --> 01:18:50,880
don't think I ever internalized the fact

1421
01:18:47,100 --> 01:18:57,660
that that was an SSS SSS

1422
01:18:50,880 --> 01:18:58,289
III as opposed to an sse3 but evidently

1423
01:18:57,659 --> 01:19:01,970
it is

1424
01:18:58,289 --> 01:19:01,970
there's pea chef be right there right

1425
01:19:03,409 --> 01:19:14,010
okay so yeah if we take a look at the

1426
01:19:08,250 --> 01:19:17,189
shuffles they're like I think that's the

1427
01:19:14,010 --> 01:19:21,230
only way we could really do something

1428
01:19:17,189 --> 01:19:27,210
fancier there I think so if you imagine

1429
01:19:21,229 --> 01:19:28,289
like using ssse3 which I wouldn't

1430
01:19:27,210 --> 01:19:30,149
necessary be averse to you because I

1431
01:19:28,289 --> 01:19:31,680
believe that pretty much like at this

1432
01:19:30,149 --> 01:19:35,399
point if we look at scheme hardware

1433
01:19:31,680 --> 01:19:37,860
survey for like getting what our sse

1434
01:19:35,399 --> 01:19:39,750
platform would be here it's always

1435
01:19:37,859 --> 01:19:41,460
moving upwards you know and we don't

1436
01:19:39,750 --> 01:19:46,859
plan on shipping anytime soon you look

1437
01:19:41,460 --> 01:19:49,230
at these and it's like okay so ssse3 and

1438
01:19:46,859 --> 01:19:51,329
even foreign two are like almost

1439
01:19:49,229 --> 01:19:54,359
complete coverage like no one is doing

1440
01:19:51,329 --> 01:19:55,800
that and furthermore you look down here

1441
01:19:54,359 --> 01:19:58,559
and you're like wow like we could even

1442
01:19:55,800 --> 01:20:00,449
go up to a VX if we really wanted to and

1443
01:19:58,560 --> 01:20:04,710
we probably wouldn't knock out very many

1444
01:20:00,449 --> 01:20:07,079
machines by doing that so avx2 kind of a

1445
01:20:04,710 --> 01:20:09,779
stretch at this point so going eight

1446
01:20:07,079 --> 01:20:11,939
wide not necessarily a thing or using

1447
01:20:09,779 --> 01:20:14,759
some of that as a c4a

1448
01:20:11,939 --> 01:20:15,899
looks like not-so-good but in terms of

1449
01:20:14,760 --> 01:20:21,360
this stuff we could totally do that

1450
01:20:15,899 --> 01:20:27,269
right so if we wanted to do a shuffle

1451
01:20:21,359 --> 01:20:29,158
using epi8 shuffle which is a pfb

1452
01:20:27,270 --> 01:20:31,290
instruction right yeah if you want to

1453
01:20:29,158 --> 01:20:33,569
use the PFP instruction then we probably

1454
01:20:31,289 --> 01:20:36,109
could actually do something here because

1455
01:20:33,569 --> 01:20:50,698
[Music]

1456
01:20:36,109 --> 01:20:52,920
what we would do is we would mask so we

1457
01:20:50,698 --> 01:20:56,759
want everyone to get the value that

1458
01:20:52,920 --> 01:21:00,029
comes or we want to put in a known

1459
01:20:56,760 --> 01:21:04,350
location that we can I am m8 out we just

1460
01:21:00,029 --> 01:21:11,369
want to get that value and so if we just

1461
01:21:04,350 --> 01:21:17,100
used the mask to produce a shuffle that

1462
01:21:11,369 --> 01:21:19,349
put the correct value there trying to

1463
01:21:17,100 --> 01:21:24,980
think of how you would do that it's

1464
01:21:19,350 --> 01:21:28,100
still kind of confusing oh well okay

1465
01:21:24,979 --> 01:21:28,099
[Music]

1466
01:21:32,939 --> 01:21:38,348
yeah I'm still not sure like exactly how

1467
01:21:35,920 --> 01:21:45,550
we would do that you would have to take

1468
01:21:38,349 --> 01:21:47,559
and do a mask that would tell you like

1469
01:21:45,550 --> 01:21:50,860
you'd have the ones in the correct lanes

1470
01:21:47,559 --> 01:21:53,288
but then you've they're in the wrong set

1471
01:21:50,859 --> 01:21:56,880
of lanes like you want it to be down in

1472
01:21:53,288 --> 01:21:56,880
the predictable side

1473
01:22:19,439 --> 01:22:32,348
so I guess what you would do is you just

1474
01:22:22,510 --> 01:22:39,010
do a load I mean is that really the

1475
01:22:32,349 --> 01:22:40,119
fastest way to do that so I mean I just

1476
01:22:39,010 --> 01:22:44,619
hear me out

1477
01:22:40,118 --> 01:22:46,750
so suppose I wanted to take this min PS

1478
01:22:44,618 --> 01:22:59,229
here right and like I've got what the

1479
01:22:46,750 --> 01:23:01,389
minimum value now actually is at that

1480
01:22:59,229 --> 01:23:03,399
point I want to shuffle everything into

1481
01:23:01,389 --> 01:23:05,529
position so I don't have to do weird

1482
01:23:03,399 --> 01:23:08,558
extractions so in other words what I

1483
01:23:05,529 --> 01:23:10,448
want to do is then say all right instead

1484
01:23:08,559 --> 01:23:12,369
of get component on any of these things

1485
01:23:10,448 --> 01:23:14,469
I want to be able to just get directly

1486
01:23:12,368 --> 01:23:17,529
the value by using an immediate so I

1487
01:23:14,469 --> 01:23:19,599
want to be able to do like this you know

1488
01:23:17,529 --> 01:23:23,559
what I mean where I just have an

1489
01:23:19,599 --> 01:23:25,719
immediate which is always zero right so

1490
01:23:23,559 --> 01:23:28,989
that's you know so I can basically say

1491
01:23:25,719 --> 01:23:30,969
like look hitbox max right I'm gonna

1492
01:23:28,988 --> 01:23:38,109
extract just the zero value out of it

1493
01:23:30,969 --> 01:23:39,969
you know what I mean so that all of

1494
01:23:38,109 --> 01:23:42,670
these are just direct and they don't do

1495
01:23:39,969 --> 01:23:43,960
anything weird right and furthermore I

1496
01:23:42,670 --> 01:23:45,250
actually don't even need to do that

1497
01:23:43,960 --> 01:23:46,719
because I can just leave them in here

1498
01:23:45,250 --> 01:23:49,000
cuz I'm gonna do computations and now I

1499
01:23:46,719 --> 01:23:50,078
know they're at the bottom right so I

1500
01:23:49,000 --> 01:23:52,090
don't really have to do those I could

1501
01:23:50,078 --> 01:23:54,250
just at the very end when I want to

1502
01:23:52,090 --> 01:23:56,199
actually get one of these out I can do

1503
01:23:54,250 --> 01:23:58,238
it so I can actually just do these

1504
01:23:56,198 --> 01:24:01,299
directly knowing that everything is just

1505
01:23:58,238 --> 01:24:02,678
piling up in the bottom Lane right so

1506
01:24:01,300 --> 01:24:04,570
what I was saying is in order to do that

1507
01:24:02,679 --> 01:24:05,889
I could imagine having a packed table

1508
01:24:04,569 --> 01:24:10,469
where I would basically do like okay

1509
01:24:05,889 --> 01:24:14,920
after you did this right you then have a

1510
01:24:10,469 --> 01:24:17,099
16-bit mask so you've got you've got 16

1511
01:24:14,920 --> 01:24:21,489
possible values you can just load up

1512
01:24:17,099 --> 01:24:24,038
like your shifter right your your your

1513
01:24:21,488 --> 01:24:26,769
shuffler you would say like shuffle

1514
01:24:24,038 --> 01:24:30,939
table like your min your min shuffle

1515
01:24:26,770 --> 01:24:31,840
table is whatever the the mask was so

1516
01:24:30,939 --> 01:24:35,769
this thing

1517
01:24:31,840 --> 01:24:43,360
right that you then just apply so you

1518
01:24:35,770 --> 01:24:48,630
just do an epi eight shuffle right on

1519
01:24:43,359 --> 01:24:53,979
each of your actual things so hitbox min

1520
01:24:48,630 --> 01:24:55,960
hitbox max like all of these just

1521
01:24:53,979 --> 01:24:59,229
shuffle themselves so that now you know

1522
01:24:55,960 --> 01:25:02,649
you just have the right thing in that

1523
01:24:59,229 --> 01:25:04,929
way you know what I'm saying to you um

1524
01:25:02,649 --> 01:25:06,579
you don't even really need to load it

1525
01:25:04,930 --> 01:25:09,730
this way because you know it's the same

1526
01:25:06,579 --> 01:25:16,869
value so you can even like this thing is

1527
01:25:09,729 --> 01:25:20,979
actually like a it's like a it's like a

1528
01:25:16,869 --> 01:25:23,680
one like a prop it's like a propagate

1529
01:25:20,979 --> 01:25:25,959
right which I don't know that we might

1530
01:25:23,680 --> 01:25:28,600
just want the load to be one to be one

1531
01:25:25,960 --> 01:25:30,489
go so you know we might not do that but

1532
01:25:28,600 --> 01:25:31,840
you know it could be a more compact

1533
01:25:30,489 --> 01:25:36,250
table if you wanted to because it's the

1534
01:25:31,840 --> 01:25:41,409
same in each case so when you grab the

1535
01:25:36,250 --> 01:25:42,970
shuffle table out like so I think then

1536
01:25:41,409 --> 01:25:45,729
you just have everything you wanted

1537
01:25:42,970 --> 01:25:49,090
right so your team in is now like mm

1538
01:25:45,729 --> 01:25:51,159
shuffle epi is well it would just look

1539
01:25:49,090 --> 01:25:53,020
like this and that would just give you

1540
01:25:51,159 --> 01:25:54,939
like everything that you actually wanted

1541
01:25:53,020 --> 01:25:56,620
there right and we don't need this mask

1542
01:25:54,939 --> 01:25:58,960
anymore because it would you're only

1543
01:25:56,619 --> 01:26:01,659
using it for that one extraction that

1544
01:25:58,960 --> 01:26:03,279
you then grab out similarly like this

1545
01:26:01,659 --> 01:26:10,720
min PS we don't really care about here

1546
01:26:03,279 --> 01:26:13,869
right so it's really that so we do this

1547
01:26:10,720 --> 01:26:18,340
crap in order to get the min value here

1548
01:26:13,869 --> 01:26:21,069
which we then comp and output and at

1549
01:26:18,340 --> 01:26:23,800
that point we just say okay now

1550
01:26:21,069 --> 01:26:25,869
everybody shuffles against that shuffle

1551
01:26:23,800 --> 01:26:29,680
that we loaded out with that mask right

1552
01:26:25,869 --> 01:26:32,619
and then all of our computations can

1553
01:26:29,680 --> 01:26:37,180
just happen in normal like wide space

1554
01:26:32,619 --> 01:26:38,890
and everyone's fine with that right so

1555
01:26:37,180 --> 01:26:43,909
this still is

1556
01:26:38,890 --> 01:26:46,430
just the standard wide version and we're

1557
01:26:43,909 --> 01:26:49,250
just not using like it so it's still

1558
01:26:46,430 --> 01:26:51,230
doing skits doing it scaler but we don't

1559
01:26:49,250 --> 01:26:53,600
need to actually move it to scaler first

1560
01:26:51,229 --> 01:27:03,229
for any particular reason you know I'm

1561
01:26:53,600 --> 01:27:10,310
saying so at that point when we actually

1562
01:27:03,229 --> 01:27:13,069
do when we actually want to use any of

1563
01:27:10,310 --> 01:27:15,680
this stuff we then have to move it out

1564
01:27:13,069 --> 01:27:17,449
to do this part and that would be the

1565
01:27:15,680 --> 01:27:27,440
first time when we actually move it out

1566
01:27:17,449 --> 01:27:29,779
and I think that might be where I'll

1567
01:27:27,439 --> 01:27:30,889
stop today because I think tomorrow's

1568
01:27:29,779 --> 01:27:32,329
when I would actually get into

1569
01:27:30,890 --> 01:27:33,890
implementing this right we don't have

1570
01:27:32,329 --> 01:27:38,239
much time left I guess we got 15 minutes

1571
01:27:33,890 --> 01:27:39,289
maybe um so yeah but like I'll just keep

1572
01:27:38,239 --> 01:27:41,649
cleaning this stuff and then I think

1573
01:27:39,289 --> 01:27:41,649
we'll stop

1574
01:27:46,750 --> 01:27:56,270
so all of these would always be zero

1575
01:27:51,609 --> 01:27:58,339
right so these would always be mMmmm

1576
01:27:56,270 --> 01:27:59,630
tracks and we really just have a nominal

1577
01:27:58,340 --> 01:28:01,099
HR issue here because I wanna be able to

1578
01:27:59,630 --> 01:28:02,900
extract this and we just don't have a

1579
01:28:01,099 --> 01:28:06,050
way of talking about those easy but I

1580
01:28:02,899 --> 01:28:07,879
think that's basically it so we would do

1581
01:28:06,050 --> 01:28:10,250
this that's not that bad we'd have a

1582
01:28:07,880 --> 01:28:12,319
shuffle table we'd we'd do it

1583
01:28:10,250 --> 01:28:13,729
we'd go I think we can use the table for

1584
01:28:12,319 --> 01:28:17,328
most of this stuff so this would all be

1585
01:28:13,729 --> 01:28:19,479
table driven basically and that'd be

1586
01:28:17,328 --> 01:28:19,479
that

1587
01:28:33,069 --> 01:28:37,579
so I think that's good I don't have a

1588
01:28:35,750 --> 01:28:41,600
problem with that and what we could do

1589
01:28:37,579 --> 01:28:45,109
here is say like look this is also gonna

1590
01:28:41,600 --> 01:28:48,530
be you know an LFO and then at the very

1591
01:28:45,109 --> 01:28:50,569
end we just have another Elif and what

1592
01:28:48,529 --> 01:28:54,079
we could do is just say look we're gonna

1593
01:28:50,569 --> 01:28:55,759
do the trance the transfer PPS bunch of

1594
01:28:54,079 --> 01:28:56,720
stuff here oh well you know I guess I

1595
01:28:55,760 --> 01:29:02,420
can't quite do that

1596
01:28:56,720 --> 01:29:04,550
because we don't like I want to actually

1597
01:29:02,420 --> 01:29:06,560
test the faster version of that but I

1598
01:29:04,550 --> 01:29:09,800
suppose we don't have to do that like if

1599
01:29:06,560 --> 01:29:11,539
we want to we can just return well no I

1600
01:29:09,800 --> 01:29:12,739
I really do want to test the faster

1601
01:29:11,539 --> 01:29:15,279
version of that so I guess we're not

1602
01:29:12,739 --> 01:29:18,710
gonna do an LF there I take that back I

1603
01:29:15,279 --> 01:29:20,840
guess what we're going to do is more

1604
01:29:18,710 --> 01:29:22,880
like this so in here

1605
01:29:20,840 --> 01:29:28,610
what we would do I guess is just heaven

1606
01:29:22,880 --> 01:29:34,819
if use or I don't know this would be

1607
01:29:28,609 --> 01:29:37,219
lighting use old Cady or use old use for

1608
01:29:34,819 --> 01:29:40,009
rays or something like that right and in

1609
01:29:37,220 --> 01:29:48,829
here then at the end of that I'm going

1610
01:29:40,010 --> 01:29:50,780
to put this and then we're just gonna

1611
01:29:48,829 --> 01:29:54,010
call it grid ray cast and we're gonna

1612
01:29:50,779 --> 01:30:01,659
call grid ray cast like four times right

1613
01:29:54,010 --> 01:30:01,659
so it's like

1614
01:30:02,760 --> 01:30:09,750
this and then we let everything happen

1615
01:30:07,279 --> 01:30:13,889
and then we let everything happen

1616
01:30:09,750 --> 01:30:17,789
normally right so this would just happen

1617
01:30:13,890 --> 01:30:19,710
by doing a get component to cast the

1618
01:30:17,789 --> 01:30:21,960
different sets of rays so this is the

1619
01:30:19,710 --> 01:30:26,819
Ray origin this is the radio we get a

1620
01:30:21,960 --> 01:30:28,619
zero out of it right like so which is a

1621
01:30:26,819 --> 01:30:30,509
little unnecessary and necessary slow

1622
01:30:28,619 --> 01:30:32,519
but it probably wouldn't make it look

1623
01:30:30,510 --> 01:30:35,130
too bad so we can still probably do it

1624
01:30:32,520 --> 01:30:36,660
that way just until we delete whichever

1625
01:30:35,130 --> 01:30:38,190
one of these paths we've determined is

1626
01:30:36,659 --> 01:30:42,210
not the right path to continue going

1627
01:30:38,189 --> 01:30:44,250
down so here I can just say look we're

1628
01:30:42,210 --> 01:30:45,689
gonna cast four times that'll produce

1629
01:30:44,250 --> 01:30:49,710
the transfer DPS and then we can still

1630
01:30:45,689 --> 01:30:52,259
finish up here right and then if we

1631
01:30:49,710 --> 01:30:54,210
decide to vaporize all these passes we

1632
01:30:52,260 --> 01:30:56,489
would then just go in here and like

1633
01:30:54,210 --> 01:30:58,710
clean up the flow so that we're doing

1634
01:30:56,488 --> 01:31:04,159
the most optimal flow from the top part

1635
01:30:58,710 --> 01:31:08,489
down to here right but I think that's it

1636
01:31:04,159 --> 01:31:09,779
and that's so much simpler than the rest

1637
01:31:08,488 --> 01:31:12,988
of the stuff that we're doing it's

1638
01:31:09,779 --> 01:31:16,469
suggest it I would say the only chance

1639
01:31:12,988 --> 01:31:17,669
that this is wrong is if going for wide

1640
01:31:16,470 --> 01:31:20,310
on these is a bad idea

1641
01:31:17,670 --> 01:31:24,119
but even if it was then doing the load

1642
01:31:20,310 --> 01:31:26,670
pack Swizzle thing ahead of it and

1643
01:31:24,119 --> 01:31:32,189
feeding it into this thing probably

1644
01:31:26,670 --> 01:31:34,680
would still work so I feel like I feel

1645
01:31:32,189 --> 01:31:36,889
like this is probably okay you know what

1646
01:31:34,680 --> 01:31:36,890
I mean

1647
01:31:53,609 --> 01:31:55,670
you

1648
01:31:57,050 --> 01:32:05,250
so that's that's what I'm thinking and

1649
01:32:00,560 --> 01:32:06,780
it's much simpler right so the simpler

1650
01:32:05,250 --> 01:32:09,420
routine is the easier it is to optimize

1651
01:32:06,779 --> 01:32:11,159
that's just generally the case right you

1652
01:32:09,420 --> 01:32:15,480
don't have to work as hard so that would

1653
01:32:11,159 --> 01:32:18,239
be a nice bonus that we would get

1654
01:32:15,479 --> 01:32:19,949
they're just a lot less moving parts you

1655
01:32:18,239 --> 01:32:21,659
build most of stuff ahead of time which

1656
01:32:19,949 --> 01:32:24,479
is what you want when you're optimizing

1657
01:32:21,659 --> 01:32:25,559
like the more stuff you can do that

1658
01:32:24,479 --> 01:32:29,699
doesn't have to happen on the fly the

1659
01:32:25,560 --> 01:32:33,990
better so I would say yeah that just

1660
01:32:29,699 --> 01:32:37,119
seems like what we want right

1661
01:32:33,989 --> 01:32:37,119
[Music]

1662
01:32:43,810 --> 01:32:48,310
like that that just seems good to me

1663
01:32:59,689 --> 01:33:03,629
so I think that's good I think

1664
01:33:01,560 --> 01:33:05,190
unfortunately it's gonna take us a long

1665
01:33:03,630 --> 01:33:07,109
time to test this because in order to

1666
01:33:05,189 --> 01:33:11,578
make this work we have to do a bunch of

1667
01:33:07,109 --> 01:33:14,880
extra stuff right we have to add the

1668
01:33:11,578 --> 01:33:19,880
walk tables we have to do the work of

1669
01:33:14,880 --> 01:33:24,060
distributing the cast like the actual

1670
01:33:19,880 --> 01:33:26,130
pieces and then we have to actually run

1671
01:33:24,060 --> 01:33:27,389
the routine right and debug it so it's

1672
01:33:26,130 --> 01:33:29,909
gonna be a long time to test

1673
01:33:27,389 --> 01:33:34,739
unfortunately that's a bummer but based

1674
01:33:29,908 --> 01:33:38,189
on the sketch I would say I'm relatively

1675
01:33:34,738 --> 01:33:40,138
happy with that right so I'm totally

1676
01:33:38,189 --> 01:33:42,269
willing to give this a shot and I think

1677
01:33:40,139 --> 01:33:44,219
it's when I was thinking about the KD

1678
01:33:42,270 --> 01:33:46,050
tree I'm like it's not even very good

1679
01:33:44,219 --> 01:33:47,908
for our fit because we know all our

1680
01:33:46,050 --> 01:33:51,029
stuff is access aligned bounding boxes

1681
01:33:47,908 --> 01:33:53,420
and it's like Katie trees are really for

1682
01:33:51,029 --> 01:33:56,279
narrowing in on arbitrary like

1683
01:33:53,420 --> 01:33:58,469
distributions of density and stuff like

1684
01:33:56,279 --> 01:34:00,238
this and we don't really have that like

1685
01:33:58,469 --> 01:34:03,179
we have fairly uniform distribution of

1686
01:34:00,238 --> 01:34:04,529
density and we know that everything is

1687
01:34:03,179 --> 01:34:07,020
sort of rectilinear because that's just

1688
01:34:04,529 --> 01:34:09,179
the way our game works so it's unclear

1689
01:34:07,020 --> 01:34:13,170
that we really want a Katie tree anyway

1690
01:34:09,179 --> 01:34:15,090
so I'm I'm more optimistic about this

1691
01:34:13,170 --> 01:34:17,779
than going in and working on the Katie

1692
01:34:15,090 --> 01:34:17,779
tree walk

1693
01:34:36,529 --> 01:34:42,868
so I think I'm gonna I'm gonna try it

1694
01:34:38,760 --> 01:34:44,309
Thanks what we're gonna try and then if

1695
01:34:42,868 --> 01:34:45,779
it doesn't perform well then we'll

1696
01:34:44,309 --> 01:34:49,650
regress back to the KT tree we're not

1697
01:34:45,779 --> 01:34:51,920
gonna delete it but I think that's what

1698
01:34:49,649 --> 01:34:51,920
we want

1699
01:35:01,198 --> 01:35:04,629
flighting is really simple until you

1700
01:35:03,100 --> 01:35:07,900
want to make it running real time yeah I

1701
01:35:04,630 --> 01:35:09,789
agree if you just don't care how long it

1702
01:35:07,899 --> 01:35:11,559
takes then ray-tracing pretty much gives

1703
01:35:09,789 --> 01:35:17,908
you the answer you want without a whole

1704
01:35:11,560 --> 01:35:17,909
lot of work but

1705
01:35:29,390 --> 01:35:33,619
I think we can probably go to QA because

1706
01:35:32,720 --> 01:35:35,570
they don't think there's anything left

1707
01:35:33,619 --> 01:35:38,029
to do we're just gonna implement this

1708
01:35:35,569 --> 01:35:39,889
routine I'm trying to think of how much

1709
01:35:38,029 --> 01:35:45,050
time I get 10 minutes left well you and

1710
01:35:39,890 --> 01:35:56,150
I could do I could vaporize this for now

1711
01:35:45,050 --> 01:36:03,440
and what we could do here is say look we

1712
01:35:56,149 --> 01:36:08,769
won't do grid cast here yet so that'll

1713
01:36:03,439 --> 01:36:11,809
stay out of the way turn a null value

1714
01:36:08,770 --> 01:36:14,750
and then what we'll do is we'll go do

1715
01:36:11,810 --> 01:36:18,830
the part where we actually need to fill

1716
01:36:14,750 --> 01:36:22,039
Jimmy we can sketch out the part where

1717
01:36:18,829 --> 01:36:28,010
we actually need to fill in the spatial

1718
01:36:22,039 --> 01:36:32,779
partition so in here where we need to

1719
01:36:28,010 --> 01:36:35,560
build the actual grid we can go through

1720
01:36:32,779 --> 01:36:35,559
this whole thing right

1721
01:36:41,479 --> 01:36:47,689
and so inside the grid build what do we

1722
01:36:45,890 --> 01:36:49,789
actually need to do well we're probably

1723
01:36:47,689 --> 01:36:51,649
gonna have to step through the boxes so

1724
01:36:49,789 --> 01:36:56,090
we're probably doing something like this

1725
01:36:51,649 --> 01:36:58,009
right and in here where we step through

1726
01:36:56,090 --> 01:37:00,470
each of the boxes what we need to do is

1727
01:36:58,010 --> 01:37:03,619
find all of the grid squares that that

1728
01:37:00,470 --> 01:37:05,119
box touches and put them in there now

1729
01:37:03,619 --> 01:37:07,729
the reason this is kind of a pain in the

1730
01:37:05,119 --> 01:37:09,680
butt is because we actually don't know

1731
01:37:07,729 --> 01:37:11,839
ahead of time how many boxes are in each

1732
01:37:09,680 --> 01:37:13,640
grid square and so we're gonna need like

1733
01:37:11,840 --> 01:37:15,650
an intermediate way of chaining these

1734
01:37:13,640 --> 01:37:17,300
things together and then unpacking the

1735
01:37:15,649 --> 01:37:19,969
chains into compact arrays for ray

1736
01:37:17,300 --> 01:37:21,770
casting because anything we do here we

1737
01:37:19,970 --> 01:37:23,539
can be a lot slower here because it only

1738
01:37:21,770 --> 01:37:25,640
happens once anything that happens on

1739
01:37:23,539 --> 01:37:27,619
the raycast has to happen like hundreds

1740
01:37:25,640 --> 01:37:29,450
of thousands of times and so we really

1741
01:37:27,619 --> 01:37:31,189
don't want to do it in there right we

1742
01:37:29,449 --> 01:37:33,769
want to do anything expensive on the

1743
01:37:31,189 --> 01:37:35,589
view here so it's okay but we do have to

1744
01:37:33,770 --> 01:37:38,600
do a little bit of work there right and

1745
01:37:35,590 --> 01:37:43,090
so here we would go through like the

1746
01:37:38,600 --> 01:37:43,090
node indices and we would unpack them

1747
01:37:44,649 --> 01:37:50,889
sequentially and when we actually figure

1748
01:37:48,829 --> 01:37:53,029
out where these things go node wise

1749
01:37:50,890 --> 01:37:55,489
again that's going to be something where

1750
01:37:53,029 --> 01:37:59,359
we determine the actual node we don't

1751
01:37:55,488 --> 01:38:11,289
need this all we would do here is say

1752
01:37:59,359 --> 01:38:11,289
look I guess these bv3 used probably so

1753
01:38:17,960 --> 01:38:30,300
it'd be something like this so we take

1754
01:38:27,060 --> 01:38:33,300
the men in the max of the boxes and we

1755
01:38:30,300 --> 01:38:36,420
now know you know we would have a v3u

1756
01:38:33,300 --> 01:38:38,520
for where those were in the voxel for

1757
01:38:36,420 --> 01:38:40,800
the min and the max we would step

1758
01:38:38,520 --> 01:38:46,230
through each one of these you know to

1759
01:38:40,800 --> 01:38:49,949
fill the voxel right just a standard

1760
01:38:46,229 --> 01:38:54,449
voxel fill right of a region and so we'd

1761
01:38:49,949 --> 01:38:56,189
say you know Z is mid note index Z Z is

1762
01:38:54,449 --> 01:39:01,590
less than or equal to mid note index

1763
01:38:56,189 --> 01:39:05,238
oops max node index Z and we do this for

1764
01:39:01,590 --> 01:39:11,750
each dimension so that would give us

1765
01:39:05,238 --> 01:39:11,750
everything oops

1766
01:39:12,020 --> 01:39:19,040
that would give us all of the locations

1767
01:39:15,270 --> 01:39:25,560
touched bite like that could possibly

1768
01:39:19,039 --> 01:39:27,539
hit this box we would then store it so

1769
01:39:25,560 --> 01:39:30,450
that we'd have to like chain for

1770
01:39:27,539 --> 01:39:32,729
whatever this location was right so if

1771
01:39:30,449 --> 01:39:34,769
we pass this new voxel location that's

1772
01:39:32,729 --> 01:39:39,359
somewhere in here we'd have to chain

1773
01:39:34,770 --> 01:39:45,989
this box on to whatever that was right

1774
01:39:39,359 --> 01:39:48,210
so the the solution we'd want to access

1775
01:39:45,988 --> 01:39:51,049
that node index we'd want to chain it on

1776
01:39:48,210 --> 01:39:53,880
here and then when we're done with that

1777
01:39:51,050 --> 01:39:58,020
we would loop over all of the nodes

1778
01:39:53,880 --> 01:39:59,819
right which would be however many was

1779
01:39:58,020 --> 01:40:01,830
the X times the Y times is e total and

1780
01:39:59,819 --> 01:40:05,340
for each one of those we would need to

1781
01:40:01,829 --> 01:40:07,350
sort of undo that chain right now we

1782
01:40:05,340 --> 01:40:09,630
know ahead of time how many of these we

1783
01:40:07,350 --> 01:40:11,460
actually need and we could pull it out a

1784
01:40:09,630 --> 01:40:15,930
temp memory potentially I mean I don't

1785
01:40:11,460 --> 01:40:18,390
know if we want to do that or not but we

1786
01:40:15,930 --> 01:40:20,840
know like the total leaf count at this

1787
01:40:18,390 --> 01:40:24,329
point and we can sum it because we know

1788
01:40:20,840 --> 01:40:26,970
here's how many there are

1789
01:40:24,329 --> 01:40:28,260
so when we go to the nodes then what

1790
01:40:26,970 --> 01:40:31,050
we're really doing is we're just saying

1791
01:40:28,260 --> 01:40:33,539
here's our you know leaf index currently

1792
01:40:31,050 --> 01:40:35,400
which is going to start at zero we go

1793
01:40:33,539 --> 01:40:37,680
through each of these nodes and we loop

1794
01:40:35,399 --> 01:40:41,449
over however many they have so we're

1795
01:40:37,680 --> 01:40:41,450
gonna need like a thing for the node

1796
01:40:43,729 --> 01:40:55,769
where we would get that out and that'd

1797
01:40:46,529 --> 01:40:57,509
be the same as this you know so we would

1798
01:40:55,770 --> 01:40:59,910
get one of these out we would do the

1799
01:40:57,510 --> 01:41:02,310
chaining here however we want to do that

1800
01:40:59,909 --> 01:41:04,949
and then in here we would say all right

1801
01:41:02,310 --> 01:41:07,020
for each of these we need to loop over

1802
01:41:04,949 --> 01:41:15,119
all of the lighting boxes that we

1803
01:41:07,020 --> 01:41:18,390
chained on to that and this could be a

1804
01:41:15,119 --> 01:41:20,220
linked list of some kind right it

1805
01:41:18,390 --> 01:41:22,560
wouldn't probably look like this because

1806
01:41:20,220 --> 01:41:24,659
we'd probably chain off a u16 since we

1807
01:41:22,560 --> 01:41:26,460
know that they are that way so we'd

1808
01:41:24,659 --> 01:41:30,569
probably do something more like look off

1809
01:41:26,460 --> 01:41:33,329
of these UN 16 after the off of the node

1810
01:41:30,569 --> 01:41:36,630
we grab a you 16 that's like the first

1811
01:41:33,329 --> 01:41:40,949
in chain and then we say like chain is

1812
01:41:36,630 --> 01:41:46,949
not equal to like chain and or something

1813
01:41:40,949 --> 01:41:50,189
you know this kind of thing and honestly

1814
01:41:46,949 --> 01:41:52,319
this probably has to be this way because

1815
01:41:50,189 --> 01:41:54,419
we're gonna go look this up right we

1816
01:41:52,319 --> 01:41:57,049
would then say all right which box is

1817
01:41:54,420 --> 01:41:57,050
this thing

1818
01:41:59,729 --> 01:42:05,500
and once we get that we can do like next

1819
01:42:03,819 --> 01:42:07,960
in chain as a thing that would we would

1820
01:42:05,500 --> 01:42:10,630
train off the boxes so for each of those

1821
01:42:07,960 --> 01:42:13,210
then this is where we actually do the

1822
01:42:10,630 --> 01:42:18,300
work so once we know that this thing is

1823
01:42:13,210 --> 01:42:18,300
going to be packed we would pack it here

1824
01:42:23,039 --> 01:42:30,069
um and so when we do the packing we're

1825
01:42:26,439 --> 01:42:32,289
doing packing into this thing and so we

1826
01:42:30,069 --> 01:42:35,920
would need a like a pointer basically

1827
01:42:32,289 --> 01:42:39,250
that tells us where we're packing how

1828
01:42:35,920 --> 01:42:41,819
we're packing right and we need this to

1829
01:42:39,250 --> 01:42:41,819
be

1830
01:42:52,659 --> 01:42:59,180
so actually we don't pollute the cash we

1831
01:42:57,140 --> 01:43:02,539
just waste instructions because this

1832
01:42:59,180 --> 01:43:14,930
doesn't have to be aligned so actually

1833
01:43:02,539 --> 01:43:17,090
we just pack this linearly right we can

1834
01:43:14,930 --> 01:43:20,170
just pack this linearly and all we have

1835
01:43:17,090 --> 01:43:22,850
to do is store how many you need to load

1836
01:43:20,170 --> 01:43:25,039
but we don't actually need it to line up

1837
01:43:22,850 --> 01:43:27,289
like we don't you can just load extra

1838
01:43:25,039 --> 01:43:29,899
boxes off the end of this thing and we

1839
01:43:27,289 --> 01:43:34,310
just have to make sure we Pat it so we

1840
01:43:29,899 --> 01:43:38,389
need to do like a wild leaf index mod

1841
01:43:34,310 --> 01:43:41,469
for at the end here and and write

1842
01:43:38,390 --> 01:43:45,050
garbage in there you know what I mean

1843
01:43:41,469 --> 01:43:52,550
but but other than that so these these

1844
01:43:45,050 --> 01:43:54,380
would just you know I'm not sure what

1845
01:43:52,550 --> 01:43:57,829
the best way is to produce something

1846
01:43:54,380 --> 01:43:59,840
that cannot hit it may be that this is

1847
01:43:57,829 --> 01:44:01,189
bad because if you pass directly through

1848
01:43:59,840 --> 01:44:04,489
the origin it would technically be

1849
01:44:01,189 --> 01:44:07,750
considered a hit you don't I mean so

1850
01:44:04,488 --> 01:44:11,509
that seems bad it's never gonna happen

1851
01:44:07,750 --> 01:44:14,210
like in any way that we would care about

1852
01:44:11,510 --> 01:44:16,909
but it does seem like maybe you would

1853
01:44:14,210 --> 01:44:20,090
want to avoid it so what you could do

1854
01:44:16,909 --> 01:44:23,090
here too is Pat it out with something

1855
01:44:20,090 --> 01:44:25,400
that you just can't really hit so like

1856
01:44:23,090 --> 01:44:28,670
you know something that's like off in

1857
01:44:25,399 --> 01:44:34,729
the stratosphere might be the right way

1858
01:44:28,670 --> 01:44:37,149
to do it right so it's like an inverted

1859
01:44:34,729 --> 01:44:39,738
box that's off in the stratosphere and

1860
01:44:37,149 --> 01:44:42,670
you know you'd never hit it or I guess

1861
01:44:39,738 --> 01:44:42,669
you could even do it this way

1862
01:44:45,238 --> 01:44:49,389
that might be the easier way to make

1863
01:44:47,619 --> 01:44:51,189
sure that you never hit that thing I'm

1864
01:44:49,390 --> 01:44:52,989
not sure like we should just put it to

1865
01:44:51,189 --> 01:44:58,809
do in here this like what's the best

1866
01:44:52,988 --> 01:45:09,448
can't hit me box for our actual box

1867
01:44:58,810 --> 01:45:13,090
collision test so if we do it that way

1868
01:45:09,448 --> 01:45:15,909
this would be everything that we need to

1869
01:45:13,090 --> 01:45:22,270
and and we just need now way to do the

1870
01:45:15,909 --> 01:45:24,189
chaining sensibly right but I think

1871
01:45:22,270 --> 01:45:25,660
that's it so I'll end it there but we

1872
01:45:24,189 --> 01:45:27,039
now have everything sketched out so now

1873
01:45:25,659 --> 01:45:29,500
we just got to actually do the

1874
01:45:27,039 --> 01:45:31,630
implementation there is one thing I

1875
01:45:29,500 --> 01:45:34,689
didn't do which was the walk stuff and

1876
01:45:31,630 --> 01:45:38,350
the walk stuff is literally just doing a

1877
01:45:34,689 --> 01:45:40,029
Rea walk like we can even do it just

1878
01:45:38,350 --> 01:45:42,310
offline we don't have to get fancy and

1879
01:45:40,029 --> 01:45:44,019
figure out what it would be for every

1880
01:45:42,310 --> 01:45:46,989
one of the Rays we store in our array

1881
01:45:44,020 --> 01:45:50,140
table we just store like which table

1882
01:45:46,988 --> 01:45:52,119
index it uses for its walk and a lot of

1883
01:45:50,140 --> 01:45:54,100
those would probably be the same I mean

1884
01:45:52,119 --> 01:45:55,840
maybe maybe they won't be but if there's

1885
01:45:54,100 --> 01:45:58,510
any duplicates we just remove them and

1886
01:45:55,840 --> 01:46:00,250
then that way we just load directly

1887
01:45:58,510 --> 01:46:06,850
another table what what we're walking

1888
01:46:00,250 --> 01:46:09,960
and that's it so I think that's good we

1889
01:46:06,850 --> 01:46:09,960
can go ahead and go to Q&amp;A now

1890
01:46:47,170 --> 01:46:52,239
could you use a couple of M's horizontal

1891
01:46:50,300 --> 01:46:54,770
subs to do your horizontal compare um

1892
01:46:52,239 --> 01:46:57,559
possibly yes

1893
01:46:54,770 --> 01:47:01,130
and in fact if we do decide that we can

1894
01:46:57,560 --> 01:47:03,950
use a sse4 we probably have a couple of

1895
01:47:01,130 --> 01:47:05,539
different things we could look at which

1896
01:47:03,949 --> 01:47:07,670
like I said lose using the steam

1897
01:47:05,539 --> 01:47:13,579
hardware survey it looks like sse4 is

1898
01:47:07,670 --> 01:47:16,699
probably pretty safe to use so we have a

1899
01:47:13,579 --> 01:47:19,130
couple things horizontal things that we

1900
01:47:16,699 --> 01:47:25,909
could use right so if you imagine that

1901
01:47:19,130 --> 01:47:35,869
is our actual target then we actually

1902
01:47:25,909 --> 01:47:40,359
have a bunch of stuff here I mean so so

1903
01:47:35,869 --> 01:47:54,948
if we want to just use SSE for point one

1904
01:47:40,359 --> 01:48:02,238
that is the entire instruction right

1905
01:47:54,948 --> 01:48:06,349
I mean that's the thing so I think like

1906
01:48:02,238 --> 01:48:10,968
we could just say look man let's just

1907
01:48:06,350 --> 01:48:12,980
use it and we can always have a slower

1908
01:48:10,969 --> 01:48:14,300
path later if we decide we really need

1909
01:48:12,979 --> 01:48:18,500
it but that I mean that's the

1910
01:48:14,300 --> 01:48:21,289
instruction it does the whole thing so

1911
01:48:18,500 --> 01:48:27,380
you know I can just say like literally

1912
01:48:21,289 --> 01:48:31,310
do min pause EP u16 and get what I need

1913
01:48:27,380 --> 01:48:33,020
right cuz if like SSE AVX avx-512

1914
01:48:31,310 --> 01:48:34,400
eventually you get far enough up there

1915
01:48:33,020 --> 01:48:35,900
they've got the actual correct

1916
01:48:34,399 --> 01:48:37,399
instructions that you wanted them to

1917
01:48:35,899 --> 01:48:38,929
have in the first place it's just a

1918
01:48:37,399 --> 01:48:42,529
matter of how far up you're willing to

1919
01:48:38,929 --> 01:49:03,969
go along there if that makes sense

1920
01:48:42,529 --> 01:49:07,609
so if we want to we can say you know so

1921
01:49:03,969 --> 01:49:09,590
I'm not sure which if I have to prep it

1922
01:49:07,609 --> 01:49:11,929
for this though by do it because it's

1923
01:49:09,590 --> 01:49:14,719
not a PS right so I don't know if

1924
01:49:11,929 --> 01:49:16,279
there's a min pause version of that it

1925
01:49:14,719 --> 01:49:18,739
looks like the only thing they've got is

1926
01:49:16,279 --> 01:49:22,689
the 16-bit one so I'd have to kind of

1927
01:49:18,738 --> 01:49:22,689
like put it into that format first

1928
01:49:32,429 --> 01:49:36,810
so I take it back that may not be quite

1929
01:49:34,890 --> 01:49:40,890
what I want cuz you want the min pause

1930
01:49:36,810 --> 01:49:43,590
PS right which apparently you can't get

1931
01:49:40,890 --> 01:49:47,600
because they only have that for just

1932
01:49:43,590 --> 01:49:55,789
that one instruction which is hilarious

1933
01:49:47,600 --> 01:50:01,590
but so maybe not we could make that work

1934
01:49:55,789 --> 01:50:04,439
we can pretty trivially turn our RT

1935
01:50:01,590 --> 01:50:06,989
values into 16-bit values that's not

1936
01:50:04,439 --> 01:50:09,389
that hard so we could just do that

1937
01:50:06,988 --> 01:50:13,139
instead we we'd take the team in the

1938
01:50:09,390 --> 01:50:14,969
team axe and and we'd bracket it so we'd

1939
01:50:13,140 --> 01:50:17,369
say look we know we don't carry any like

1940
01:50:14,969 --> 01:50:18,960
this thing is only so long so we'd say

1941
01:50:17,369 --> 01:50:21,238
map into that range

1942
01:50:18,960 --> 01:50:30,359
so first multi-verse converts a 16-bit

1943
01:50:21,238 --> 01:50:33,738
and do the min pause EP 16 right so we

1944
01:50:30,359 --> 01:50:33,738
just it would just be this

1945
01:50:45,560 --> 01:50:51,330
so we just say multiply this first by

1946
01:50:48,869 --> 01:50:53,880
what we know the maximum hit value is

1947
01:50:51,329 --> 01:50:56,970
and we would change this to be whatever

1948
01:50:53,880 --> 01:50:59,789
that maximum hit value was and then we

1949
01:50:56,970 --> 01:51:01,800
would do a min pause epu 16 that would

1950
01:50:59,789 --> 01:51:07,039
get us back our min test we would then

1951
01:51:01,800 --> 01:51:07,039
use that to shuffle everything right so

1952
01:51:07,880 --> 01:51:18,210
instead of this we would then have like

1953
01:51:12,710 --> 01:51:21,149
shuffler equals some shuffle of the min

1954
01:51:18,210 --> 01:51:23,880
test which would just move the correct

1955
01:51:21,149 --> 01:51:29,460
values around that we need it to use for

1956
01:51:23,880 --> 01:51:38,279
this yeah so we could do that too I'm

1957
01:51:29,460 --> 01:51:40,680
just not it's not sure like this part of

1958
01:51:38,279 --> 01:51:43,800
the code is not the part that runs the

1959
01:51:40,680 --> 01:51:45,260
most often so the the most often the

1960
01:51:43,800 --> 01:51:50,070
thing that runs the most often is this

1961
01:51:45,260 --> 01:51:53,640
right so this we need to make sure is

1962
01:51:50,069 --> 01:51:57,000
very very fast this cannot be slow this

1963
01:51:53,640 --> 01:52:00,720
part here is it two instructions is it

1964
01:51:57,000 --> 01:52:02,430
ten it will make a difference but it's

1965
01:52:00,720 --> 01:52:05,550
unclear how much of a difference so it's

1966
01:52:02,430 --> 01:52:07,289
unclear that you want to if if this part

1967
01:52:05,550 --> 01:52:09,000
of the routine could be made twice as

1968
01:52:07,289 --> 01:52:11,850
fast by switching to SSE for you

1969
01:52:09,000 --> 01:52:13,289
definitely do it if this part of the

1970
01:52:11,850 --> 01:52:14,760
routine can be made twice is passed by

1971
01:52:13,289 --> 01:52:18,539
switching the SEC for it's unclear that

1972
01:52:14,760 --> 01:52:22,880
you care yeah I'm saying you might just

1973
01:52:18,539 --> 01:52:22,880
want to stick with the simpler case

1974
01:52:29,380 --> 01:52:33,289
when it comes to game dev engine dev

1975
01:52:31,880 --> 01:52:42,260
what you believe is the hardest part to

1976
01:52:33,289 --> 01:52:49,609
implement lighting editors etc I would

1977
01:52:42,260 --> 01:52:51,670
say probably like infrastructure is the

1978
01:52:49,609 --> 01:52:56,359
hardest thing

1979
01:52:51,670 --> 01:53:00,289
so like the the the circle that you draw

1980
01:52:56,359 --> 01:53:04,699
that is what is the storage format for

1981
01:53:00,289 --> 01:53:09,189
both editing and runtime how does that

1982
01:53:04,699 --> 01:53:13,639
get processed edited saved shared

1983
01:53:09,189 --> 01:53:19,460
optimized that the infrastructure part

1984
01:53:13,640 --> 01:53:22,100
is by far the hardest because it has all

1985
01:53:19,460 --> 01:53:25,430
of the worst things it has to be edited

1986
01:53:22,100 --> 01:53:27,890
so it has to be flexible it has to be

1987
01:53:25,430 --> 01:53:29,480
looked at broadly because optimization

1988
01:53:27,890 --> 01:53:31,340
often pulls from multiple things to

1989
01:53:29,479 --> 01:53:33,709
produce the output assets you actually

1990
01:53:31,340 --> 01:53:35,720
need it needs to have fast turnaround

1991
01:53:33,710 --> 01:53:39,230
time so that artists can see their work

1992
01:53:35,720 --> 01:53:41,659
in the game it's massive because it

1993
01:53:39,229 --> 01:53:44,269
includes the sources it's way larger

1994
01:53:41,659 --> 01:53:46,399
than the game by many powers like a

1995
01:53:44,270 --> 01:53:48,500
hundred times larger than the game if

1996
01:53:46,399 --> 01:53:51,139
the game is twenty three gigabytes then

1997
01:53:48,500 --> 01:53:53,779
the source you know assets for that game

1998
01:53:51,140 --> 01:53:56,270
are probably like you know twenty three

1999
01:53:53,779 --> 01:53:59,500
terabytes or something right so it's

2000
01:53:56,270 --> 01:53:59,500
like thousand times bigger

2001
01:54:07,189 --> 01:54:14,150
how do you switch that fast me

2002
01:54:08,929 --> 01:54:21,139
navigating into code and typing am i

2003
01:54:14,149 --> 01:54:22,998
fast I mean this is me doing the arrow

2004
01:54:21,139 --> 01:54:29,168
keys and then I go into typing and start

2005
01:54:22,998 --> 01:54:33,130
typing I mean I don't know I don't know

2006
01:54:29,168 --> 01:54:33,130
it's not very far

2007
01:54:50,319 --> 01:54:55,679
uh-uh are we getting raided we're done

2008
01:54:56,039 --> 01:55:11,529
how can we get raided by John I was

2009
01:54:59,619 --> 01:55:12,399
gonna go raid John though what what are

2010
01:55:11,529 --> 01:55:16,439
you doing

2011
01:55:12,399 --> 01:55:16,439
when am I gonna have lunch

2012
01:55:23,140 --> 01:55:32,020
unacceptable unacceptable this is

2013
01:55:29,149 --> 01:55:32,019
completely unacceptable

2014
01:55:32,109 --> 01:55:41,329
alright well hold on one second let me

2015
01:55:35,479 --> 01:55:43,399
get a drink or something because yeah

2016
01:55:41,329 --> 01:55:47,300
you know what hold on one second

2017
01:55:43,399 --> 01:55:48,379
like let's let's end it here and but

2018
01:55:47,300 --> 01:55:50,900
I'll keep the stream going and I'll

2019
01:55:48,380 --> 01:55:54,550
think about it I'll be right back but

2020
01:55:50,899 --> 01:55:54,549
I'm gonna get at least a drink then

