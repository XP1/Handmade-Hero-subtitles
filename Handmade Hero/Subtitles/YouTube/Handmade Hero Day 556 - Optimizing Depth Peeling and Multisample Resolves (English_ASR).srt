1
00:00:01,250 --> 00:00:06,778
hello everyone and welcome to handmade

2
00:00:04,139 --> 00:00:08,308
Hero show recode a complete game live on

3
00:00:06,778 --> 00:00:10,379
stream before we get started today I

4
00:00:08,308 --> 00:00:13,500
wanted to mention that we have created

5
00:00:10,380 --> 00:00:16,289
two discord for Mali rocket which can be

6
00:00:13,500 --> 00:00:18,359
used for handmade hero and things

7
00:00:16,289 --> 00:00:20,460
related and so I just want to point out

8
00:00:18,359 --> 00:00:25,679
that's available now for your use it's

9
00:00:20,460 --> 00:00:27,719
open and you can join it the address if

10
00:00:25,679 --> 00:00:29,608
you want to type it in and will probably

11
00:00:27,719 --> 00:00:33,299
provide links to it there's actually on

12
00:00:29,609 --> 00:00:35,429
the twitch page itself there's an ask a

13
00:00:33,299 --> 00:00:36,570
question via discord button that would

14
00:00:35,429 --> 00:00:39,539
catch you there but it's really just

15
00:00:36,570 --> 00:00:42,270
that standard discord GG link if you

16
00:00:39,539 --> 00:00:46,320
just put in Mali rocket that will go

17
00:00:42,270 --> 00:00:48,450
directly to our section of discord

18
00:00:46,320 --> 00:00:51,808
there's already a lot of people on there

19
00:00:48,450 --> 00:00:53,489
so please go ahead and join we do unlike

20
00:00:51,808 --> 00:00:56,099
twitch chat or other places that are

21
00:00:53,488 --> 00:00:58,619
kind of a little more wild Westy this is

22
00:00:56,100 --> 00:01:00,960
actually monitored by us at fairly

23
00:00:58,619 --> 00:01:02,669
regular intervals and we do maintain

24
00:01:00,960 --> 00:01:05,219
some pretty strict rules on there so

25
00:01:02,670 --> 00:01:07,978
basically there's no politics allowed

26
00:01:05,219 --> 00:01:10,489
whatsoever and no outrage allowed

27
00:01:07,978 --> 00:01:14,579
whatsoever so it has to remain civil

28
00:01:10,489 --> 00:01:18,780
discourse and completely apolitical or I

29
00:01:14,579 --> 00:01:21,329
will happily ban people all the time so

30
00:01:18,780 --> 00:01:23,040
keep that in mind but anything that you

31
00:01:21,329 --> 00:01:24,868
would normally use the twitch chat for

32
00:01:23,040 --> 00:01:28,080
on handmade hero like asking me a

33
00:01:24,868 --> 00:01:30,810
question can be done there and there's

34
00:01:28,079 --> 00:01:33,868
even a special pound live channel you

35
00:01:30,810 --> 00:01:36,659
can go to that I'll keep up during the

36
00:01:33,868 --> 00:01:38,640
streams that I can read so that's a

37
00:01:36,659 --> 00:01:40,109
great place to just ask questions if

38
00:01:38,640 --> 00:01:42,599
you're tired of trying to use the twitch

39
00:01:40,109 --> 00:01:46,019
chat which I realize can be kind of

40
00:01:42,599 --> 00:01:48,750
annoying sometimes alright that's it for

41
00:01:46,019 --> 00:01:51,649
announcements let's actually talk about

42
00:01:48,750 --> 00:01:55,709
the show what are we going to do today

43
00:01:51,649 --> 00:01:58,530
so we kind of left off last time with

44
00:01:55,709 --> 00:02:01,589
getting our situations squared away for

45
00:01:58,530 --> 00:02:04,290
communicating with the 3d hardware a

46
00:02:01,590 --> 00:02:05,939
little more cleanly and we actually

47
00:02:04,290 --> 00:02:09,239
learned something really valuable now

48
00:02:05,938 --> 00:02:12,060
that we got both render dock at the end

49
00:02:09,239 --> 00:02:13,709
of the show actually and n site working

50
00:02:12,060 --> 00:02:15,900
and

51
00:02:13,709 --> 00:02:17,759
eh turns out that both of them are now

52
00:02:15,900 --> 00:02:20,760
working very well originally when we

53
00:02:17,759 --> 00:02:23,128
tried render dock multiple years ago I

54
00:02:20,759 --> 00:02:24,810
think like a long long time ago it

55
00:02:23,128 --> 00:02:26,518
wasn't able to actually work with the

56
00:02:24,810 --> 00:02:29,158
graphic setup that we have but it is

57
00:02:26,519 --> 00:02:32,280
able to work now and it's pretty good

58
00:02:29,158 --> 00:02:34,348
so actually we can use either one of

59
00:02:32,280 --> 00:02:35,968
those tools and maybe we'll try using

60
00:02:34,348 --> 00:02:38,548
render dock a little bit more now

61
00:02:35,968 --> 00:02:40,888
because render dock I believe works

62
00:02:38,549 --> 00:02:43,260
across multiple configuration so it

63
00:02:40,889 --> 00:02:44,579
might be a little bit more applicable to

64
00:02:43,259 --> 00:02:46,348
folks out there who are following along

65
00:02:44,579 --> 00:02:48,599
at home because you don't need to be

66
00:02:46,348 --> 00:02:50,548
using an nvidia card specifically it

67
00:02:48,598 --> 00:02:52,619
already use it I think insight this

68
00:02:50,549 --> 00:02:55,349
won't work on like an AMD card for

69
00:02:52,620 --> 00:02:57,900
example for obvious reasons and videos

70
00:02:55,348 --> 00:02:59,369
not exactly in the business of providing

71
00:02:57,900 --> 00:03:01,680
debugging tools for other people's

72
00:02:59,370 --> 00:03:03,569
hardware right but render dark dock is

73
00:03:01,680 --> 00:03:04,909
designed to be a sort of more

74
00:03:03,568 --> 00:03:07,649
general-purpose

75
00:03:04,908 --> 00:03:10,348
cross-platform debugging tool for

76
00:03:07,650 --> 00:03:11,789
graphics and so we might try to use that

77
00:03:10,348 --> 00:03:13,500
a little bit more if we assuming we

78
00:03:11,789 --> 00:03:16,318
don't hit any like snags with it

79
00:03:13,500 --> 00:03:17,579
obviously so anyway we found out

80
00:03:16,318 --> 00:03:21,060
something really interesting actually

81
00:03:17,579 --> 00:03:22,859
when using it which I'll recap now which

82
00:03:21,060 --> 00:03:25,319
is that actually the slowest part of our

83
00:03:22,859 --> 00:03:27,389
frame render time at the moment if we

84
00:03:25,318 --> 00:03:28,679
turn off some of the inefficient things

85
00:03:27,389 --> 00:03:31,590
like right now we don't have very

86
00:03:28,680 --> 00:03:34,379
efficient ways of sending down ground

87
00:03:31,590 --> 00:03:36,389
cover but if we assume that we were to

88
00:03:34,378 --> 00:03:38,789
speed that up using some fairly obvious

89
00:03:36,389 --> 00:03:41,280
ways we would do that one of the things

90
00:03:38,789 --> 00:03:44,039
that we see is that actually we do spend

91
00:03:41,280 --> 00:03:46,919
quite a lot of time in our multi sample

92
00:03:44,039 --> 00:03:50,340
results like a lot of time in our multi

93
00:03:46,919 --> 00:03:53,009
sample results so much time in fact that

94
00:03:50,340 --> 00:03:57,449
without ground cover it massively

95
00:03:53,008 --> 00:03:59,548
dominates the runtime of our game doing

96
00:03:57,449 --> 00:04:01,680
those multi sample results now will that

97
00:03:59,549 --> 00:04:04,349
change as we turn the ground cover back

98
00:04:01,680 --> 00:04:06,259
on add particle systems you know

99
00:04:04,348 --> 00:04:08,250
generally stress the renderer more

100
00:04:06,258 --> 00:04:10,500
absolutely because the multi sample

101
00:04:08,250 --> 00:04:12,750
resolved cost the same amount no matter

102
00:04:10,500 --> 00:04:15,900
how much we draw to the screen and so it

103
00:04:12,750 --> 00:04:18,689
does stand to reason and obviously makes

104
00:04:15,900 --> 00:04:21,209
perfect sense that as we scale up the

105
00:04:18,689 --> 00:04:22,769
graphics for the game the amount of time

106
00:04:21,209 --> 00:04:24,839
that we spend in our multi sample

107
00:04:22,769 --> 00:04:26,120
resolved will go down proportionately

108
00:04:24,839 --> 00:04:28,728
because the

109
00:04:26,120 --> 00:04:30,680
the time for the rendering is going to

110
00:04:28,728 --> 00:04:32,689
increase whereas the multi sample result

111
00:04:30,680 --> 00:04:37,490
time will be the same as it is right now

112
00:04:32,689 --> 00:04:39,740
however that said what we do also know

113
00:04:37,490 --> 00:04:42,710
is that that time is not insignificant

114
00:04:39,740 --> 00:04:45,110
and so it may be something that we want

115
00:04:42,709 --> 00:04:47,239
to think through because there probably

116
00:04:45,110 --> 00:04:49,220
are ways that we can restructure how

117
00:04:47,240 --> 00:04:52,220
we're doing our rendering such that we

118
00:04:49,220 --> 00:04:54,889
don't really need that kind of detail on

119
00:04:52,220 --> 00:04:56,630
the multi sample resolve and the reason

120
00:04:54,889 --> 00:04:58,939
that I say that is because the only

121
00:04:56,629 --> 00:05:02,569
thing we actually use multi sample

122
00:04:58,939 --> 00:05:06,740
resolve for is cleaning up the edges of

123
00:05:02,569 --> 00:05:09,500
our like geometric primitives so when we

124
00:05:06,740 --> 00:05:12,038
put sprites on the screen for example we

125
00:05:09,500 --> 00:05:14,360
don't actually care even a little bit

126
00:05:12,038 --> 00:05:18,319
when we put sprites on the screen we we

127
00:05:14,360 --> 00:05:20,660
don't have any need to know what's

128
00:05:18,319 --> 00:05:23,300
happening in the multi sample buffer

129
00:05:20,660 --> 00:05:26,030
right those could be done completely

130
00:05:23,300 --> 00:05:27,800
separately if we didn't have geometric

131
00:05:26,029 --> 00:05:29,809
primitives that have actual hard lines

132
00:05:27,800 --> 00:05:33,288
in them we would not have to actually

133
00:05:29,810 --> 00:05:36,680
use multi sampling at all so our sprites

134
00:05:33,288 --> 00:05:38,449
don't rely on the multi sample buffer to

135
00:05:36,680 --> 00:05:40,550
get high quality we've gotten high

136
00:05:38,449 --> 00:05:43,399
quality just by being careful about how

137
00:05:40,550 --> 00:05:45,410
we draw our sprites so it's worth noting

138
00:05:43,399 --> 00:05:47,689
that the multi sample buffer is just

139
00:05:45,410 --> 00:05:50,630
there because we're trying to smooth out

140
00:05:47,689 --> 00:05:52,969
those lines that are on the edges of our

141
00:05:50,629 --> 00:05:56,719
geometric primitives now those geometric

142
00:05:52,970 --> 00:05:59,030
primitives are essential to the game

143
00:05:56,720 --> 00:06:00,979
certainly but we may be able to figure

144
00:05:59,029 --> 00:06:03,829
out a way to draw them such that we

145
00:06:00,978 --> 00:06:05,719
don't require multi sampling to be on

146
00:06:03,829 --> 00:06:07,819
for the rest of the cycle right

147
00:06:05,720 --> 00:06:10,520
for example the depth peeling that we

148
00:06:07,819 --> 00:06:13,459
use to make sure that we can do or order

149
00:06:10,519 --> 00:06:16,098
independent transparency we could just

150
00:06:13,459 --> 00:06:18,348
say that we don't want to do that for

151
00:06:16,098 --> 00:06:20,449
all of our geometric primitives because

152
00:06:18,348 --> 00:06:23,449
they won't need it since they're solid

153
00:06:20,449 --> 00:06:27,830
and don't have transparency right and so

154
00:06:23,449 --> 00:06:31,669
if we you know a priori just said that

155
00:06:27,829 --> 00:06:34,250
pass that involves the the geometric

156
00:06:31,668 --> 00:06:36,319
primitives themselves that pass is the

157
00:06:34,250 --> 00:06:39,288
only one that actually has to go through

158
00:06:36,319 --> 00:06:39,740
the multi sample buffer well that's a

159
00:06:39,288 --> 00:06:42,620
pretty

160
00:06:39,740 --> 00:06:44,900
telling argument just in terms of how we

161
00:06:42,620 --> 00:06:47,509
might go about speeding up this process

162
00:06:44,899 --> 00:06:49,159
so let me show you what I okay that's

163
00:06:47,509 --> 00:06:52,610
not what I meant to do let me show you

164
00:06:49,160 --> 00:06:54,830
what I mean by this and that may be what

165
00:06:52,610 --> 00:06:58,490
we do today is just get that one last

166
00:06:54,829 --> 00:06:59,870
little thing done before we put the

167
00:06:58,490 --> 00:07:01,879
lighting in because the lighting is

168
00:06:59,870 --> 00:07:03,530
gonna add a bunch of stress to the

169
00:07:01,879 --> 00:07:06,889
system and I'd like to have the system

170
00:07:03,529 --> 00:07:08,989
working well without that so this and

171
00:07:06,889 --> 00:07:11,569
maybe the other thing we could do on

172
00:07:08,990 --> 00:07:13,819
Sunday again in preparation for adding

173
00:07:11,569 --> 00:07:16,400
the lighting stress on is we could clean

174
00:07:13,819 --> 00:07:18,500
up our ground cover submission process

175
00:07:16,399 --> 00:07:20,418
so again we could maybe take some of the

176
00:07:18,500 --> 00:07:22,069
load off there so there's things we can

177
00:07:20,418 --> 00:07:23,598
do to try to improve the way our

178
00:07:22,069 --> 00:07:25,340
rendering is working right now and I

179
00:07:23,598 --> 00:07:27,288
just like to get those out of the way

180
00:07:25,339 --> 00:07:28,939
and then when we start to add the stress

181
00:07:27,288 --> 00:07:32,149
of lighting at least then we're only

182
00:07:28,939 --> 00:07:34,279
fighting that one thing at a time so

183
00:07:32,149 --> 00:07:35,269
this is render doc and what I'm gonna do

184
00:07:34,279 --> 00:07:37,489
here it's going to go to launch

185
00:07:35,269 --> 00:07:38,779
application I'm gonna do load well

186
00:07:37,490 --> 00:07:40,250
actually go say it's already in here my

187
00:07:38,779 --> 00:07:43,698
last settings gonna do load last

188
00:07:40,250 --> 00:07:45,288
settings here and you can see I didn't

189
00:07:43,699 --> 00:07:46,218
have the working directory set properly

190
00:07:45,288 --> 00:07:49,370
that's why the reason we were getting

191
00:07:46,218 --> 00:07:50,718
crashes in it before I'm gonna go ahead

192
00:07:49,370 --> 00:07:53,899
and make sure I set this working

193
00:07:50,718 --> 00:07:55,399
directly directory correctly and that's

194
00:07:53,899 --> 00:07:57,799
what we need to be set to now so I'm

195
00:07:55,399 --> 00:08:00,739
gonna save those settings into this

196
00:07:57,800 --> 00:08:03,348
render doc handmade render doc cap thing

197
00:08:00,740 --> 00:08:05,418
here I think that's how it's supposed to

198
00:08:03,348 --> 00:08:06,800
go let's just say that it is I don't

199
00:08:05,418 --> 00:08:09,408
really know

200
00:08:06,800 --> 00:08:11,780
there we go and let me do load last

201
00:08:09,408 --> 00:08:13,728
settings and see nope okay so clearly

202
00:08:11,779 --> 00:08:16,549
that's not how that works I'm not sure

203
00:08:13,728 --> 00:08:22,598
how that actually works then okay there

204
00:08:16,550 --> 00:08:25,038
it is no maybe I have to just do this

205
00:08:22,598 --> 00:08:31,728
close it I don't know how to get it to

206
00:08:25,038 --> 00:08:36,559
remember that no idea maybe those are

207
00:08:31,728 --> 00:08:39,319
stored in some other file or something

208
00:08:36,559 --> 00:08:41,269
but I don't know fur for the time being

209
00:08:39,320 --> 00:08:44,209
I'll do it this way cuz that's what

210
00:08:41,269 --> 00:08:46,909
seems to work so anyway if we run the

211
00:08:44,208 --> 00:08:49,129
game from here you can see me doing it

212
00:08:46,909 --> 00:08:51,110
here is the game running and you can see

213
00:08:49,129 --> 00:08:53,269
the ground cover is turned off as I said

214
00:08:51,110 --> 00:08:55,190
as I hop around

215
00:08:53,269 --> 00:08:57,049
you can see the game running as normal

216
00:08:55,190 --> 00:08:58,700
with some debug points in there for

217
00:08:57,049 --> 00:09:03,169
where the lighting probes are at the

218
00:08:58,700 --> 00:09:05,660
moment if I hit the f12 key it will do a

219
00:09:03,169 --> 00:09:07,429
frame capture I can then look at that

220
00:09:05,659 --> 00:09:08,990
frame capture if I close the application

221
00:09:07,429 --> 00:09:11,719
because I don't really need it running

222
00:09:08,990 --> 00:09:15,950
anymore we can just pop back here and

223
00:09:11,720 --> 00:09:18,889
what you can see is this is the capture

224
00:09:15,950 --> 00:09:21,320
of one single frame you can see it

225
00:09:18,889 --> 00:09:23,240
drawing the color passes here and it's

226
00:09:21,320 --> 00:09:25,640
it's actually a little bit easier in my

227
00:09:23,240 --> 00:09:27,350
opinion to use then insight for that

228
00:09:25,639 --> 00:09:29,059
purpose because here's you know you can

229
00:09:27,350 --> 00:09:30,860
kind of see me just quickly going

230
00:09:29,059 --> 00:09:32,419
through and seeing what got rendered in

231
00:09:30,860 --> 00:09:33,980
those different passes it's just it's a

232
00:09:32,419 --> 00:09:37,250
little zippier I don't know it feels a

233
00:09:33,980 --> 00:09:39,050
little bit easier to use personally just

234
00:09:37,250 --> 00:09:42,950
you know just personal preference

235
00:09:39,049 --> 00:09:46,069
probably there but anyway what you can

236
00:09:42,950 --> 00:09:49,190
kind of see about this in in general is

237
00:09:46,070 --> 00:09:52,790
that if I want to I can go to this clock

238
00:09:49,190 --> 00:09:57,410
right and you can see the clock timings

239
00:09:52,789 --> 00:10:01,339
that are really not correct I don't

240
00:09:57,409 --> 00:10:03,980
really know to what extent these can be

241
00:10:01,340 --> 00:10:05,899
relied on but there are some kind of

242
00:10:03,980 --> 00:10:07,940
approximation to how much time is being

243
00:10:05,899 --> 00:10:10,549
spent and they do agree with the insight

244
00:10:07,940 --> 00:10:12,800
ones at least in terms of ref proportion

245
00:10:10,549 --> 00:10:15,199
what you can see here is something like

246
00:10:12,799 --> 00:10:18,949
this where I get the color pass which is

247
00:10:15,200 --> 00:10:21,259
a clear plus draw elements and then

248
00:10:18,950 --> 00:10:23,450
another draw elements right you can see

249
00:10:21,259 --> 00:10:27,529
that that entire thing which drew all of

250
00:10:23,450 --> 00:10:31,460
this that whole thing took only on the

251
00:10:27,529 --> 00:10:34,699
order of 331 microseconds but here you

252
00:10:31,460 --> 00:10:37,550
can see that this single resolve that's

253
00:10:34,700 --> 00:10:41,830
just one fullscreen quad running the

254
00:10:37,549 --> 00:10:44,990
multi sample resolved shader that took

255
00:10:41,830 --> 00:10:48,650
three milliseconds so it basically took

256
00:10:44,990 --> 00:10:52,549
ten times as long to resolve the multi

257
00:10:48,649 --> 00:10:55,459
sample buffer as it did to draw the

258
00:10:52,549 --> 00:10:58,819
buffer in the first place so that shader

259
00:10:55,460 --> 00:11:00,620
code that we're executing there and more

260
00:10:58,820 --> 00:11:04,220
importantly probably than the shader

261
00:11:00,620 --> 00:11:05,450
code although who's to say but more

262
00:11:04,220 --> 00:11:06,950
important than the shader code the

263
00:11:05,450 --> 00:11:09,470
bandwidth of pool

264
00:11:06,950 --> 00:11:13,399
the entire multi sample buffer in the

265
00:11:09,470 --> 00:11:16,220
whole thing may be really cost us a lot

266
00:11:13,399 --> 00:11:17,089
and the reason that I say that maybe is

267
00:11:16,220 --> 00:11:18,528
because I don't really know what the

268
00:11:17,089 --> 00:11:21,110
gratis cars doing but just to give you

269
00:11:18,528 --> 00:11:23,028
some perspective the reason a multi

270
00:11:21,110 --> 00:11:24,980
sample buffer is a multi sample buffer

271
00:11:23,028 --> 00:11:27,578
is because the graphic card itself is

272
00:11:24,980 --> 00:11:30,500
allowed to optimize how it chooses to

273
00:11:27,578 --> 00:11:33,649
allocate those samples so for example if

274
00:11:30,500 --> 00:11:35,360
it wanted to it could keep just a

275
00:11:33,649 --> 00:11:38,149
regular color buffer for the multi

276
00:11:35,360 --> 00:11:39,769
sample buffer along with a flag that

277
00:11:38,149 --> 00:11:42,320
says whether it means to actually have

278
00:11:39,769 --> 00:11:45,409
any multi samples right and then have a

279
00:11:42,320 --> 00:11:48,620
backing buffer for the other 15 multi

280
00:11:45,409 --> 00:11:50,149
samples if a particular pixel needs them

281
00:11:48,620 --> 00:11:52,549
right it could just implement it that

282
00:11:50,149 --> 00:11:54,198
way there's no rules about how the

283
00:11:52,549 --> 00:11:57,169
graphics card treats a multi sample

284
00:11:54,198 --> 00:11:58,879
buffer so what that means is for 90

285
00:11:57,169 --> 00:12:01,338
percent of the pixels on the screen like

286
00:11:58,879 --> 00:12:04,939
you can see here most of them would not

287
00:12:01,339 --> 00:12:07,550
need to ever touch the deep part of the

288
00:12:04,940 --> 00:12:10,130
multi sample buffer it's just one color

289
00:12:07,549 --> 00:12:13,669
written by one triangle that covers the

290
00:12:10,129 --> 00:12:16,610
entire pixel right and so the only

291
00:12:13,669 --> 00:12:18,289
pixels that actually need to talk to the

292
00:12:16,610 --> 00:12:20,690
multi sample part of the multi sample

293
00:12:18,289 --> 00:12:24,620
buffer are the ones that actually lie

294
00:12:20,690 --> 00:12:26,660
along the line of a geometric primitive

295
00:12:24,620 --> 00:12:29,778
such as right here and that is

296
00:12:26,659 --> 00:12:32,360
drastically fewer pixels drastically

297
00:12:29,778 --> 00:12:35,328
fewer pixels then the entire multi

298
00:12:32,360 --> 00:12:37,579
sample buffer well unfortunately as far

299
00:12:35,328 --> 00:12:40,309
as I know and I even asked us on Twitter

300
00:12:37,578 --> 00:12:44,179
to see if anyone out there who's a GPU

301
00:12:40,309 --> 00:12:47,268
expert maybe had heard of something or

302
00:12:44,179 --> 00:12:51,019
knew anything about it I even asked them

303
00:12:47,269 --> 00:12:53,778
is there any way inside a standard kind

304
00:12:51,019 --> 00:12:56,328
of shader to ask the graphics card on a

305
00:12:53,778 --> 00:12:59,929
particular pixel while doing it resolved

306
00:12:56,328 --> 00:13:02,778
is this thing completely covered by one

307
00:12:59,929 --> 00:13:05,568
color or not and if we could do that

308
00:13:02,778 --> 00:13:07,850
then we would be able to put in a warp

309
00:13:05,568 --> 00:13:09,289
branch kind of inside our shader that

310
00:13:07,850 --> 00:13:11,600
would probably optimize it quite a bit

311
00:13:09,289 --> 00:13:15,078
that just said if there's only one color

312
00:13:11,600 --> 00:13:18,139
don't read the other 15 multi samples

313
00:13:15,078 --> 00:13:20,269
right because all of that extra

314
00:13:18,139 --> 00:13:20,539
bandwidth of reading all of those extra

315
00:13:20,269 --> 00:13:22,759
sand

316
00:13:20,539 --> 00:13:24,349
apples if in fact the graphic card has

317
00:13:22,759 --> 00:13:26,299
optimized them which this number

318
00:13:24,350 --> 00:13:30,350
suggests to me that they have the fact

319
00:13:26,299 --> 00:13:32,479
that it's so much lower because remember

320
00:13:30,350 --> 00:13:35,090
it had to touch all the pixels right it

321
00:13:32,480 --> 00:13:37,279
had to read it had to read and write the

322
00:13:35,090 --> 00:13:39,889
entire multi sample buffer just like

323
00:13:37,279 --> 00:13:40,970
this has to read the entire multi sample

324
00:13:39,889 --> 00:13:43,730
buffer right

325
00:13:40,970 --> 00:13:45,230
this had to do all of that but the fact

326
00:13:43,730 --> 00:13:46,820
that this was able to do it so much

327
00:13:45,230 --> 00:13:48,440
faster than ours unless it's just

328
00:13:46,820 --> 00:13:50,930
because our shader is super crappy or

329
00:13:48,440 --> 00:13:52,100
something which it could be but the fact

330
00:13:50,929 --> 00:13:53,569
that it could do it that much faster

331
00:13:52,100 --> 00:13:55,639
suggests to me that it was probably

332
00:13:53,570 --> 00:13:58,400
hitting a fast path where most of the

333
00:13:55,639 --> 00:14:00,620
time it didn't actually incur the memory

334
00:13:58,399 --> 00:14:02,539
bandwidth cost right that's what that

335
00:14:00,620 --> 00:14:03,919
suggests to me now again I don't know if

336
00:14:02,539 --> 00:14:06,079
I'm right because I don't have any way

337
00:14:03,919 --> 00:14:08,750
of really intergrating the graphics card

338
00:14:06,080 --> 00:14:11,930
in in any way that could tell me but

339
00:14:08,750 --> 00:14:17,539
that that seems to me to be a likely

340
00:14:11,929 --> 00:14:21,439
candidate right so so what that tells me

341
00:14:17,539 --> 00:14:23,750
is that if we could write the best

342
00:14:21,440 --> 00:14:27,920
possible case for us would be if we

343
00:14:23,750 --> 00:14:30,230
could do something where the the the

344
00:14:27,919 --> 00:14:33,649
multi sample resolved that we're doing

345
00:14:30,230 --> 00:14:36,860
like here could be done in such a way as

346
00:14:33,649 --> 00:14:39,169
to not require the depth peeling so that

347
00:14:36,860 --> 00:14:41,810
we don't have to do it four times right

348
00:14:39,169 --> 00:14:44,959
that would be the best possible case for

349
00:14:41,809 --> 00:14:48,829
us now the problem with that is that

350
00:14:44,960 --> 00:14:52,910
right now we sort of do use the depth

351
00:14:48,830 --> 00:14:55,370
peel to handle something that involves

352
00:14:52,909 --> 00:14:57,409
the geometric primitive that something

353
00:14:55,370 --> 00:14:59,419
is when we have to Flora stacked on top

354
00:14:57,409 --> 00:15:01,909
of each other and we alpha the top floor

355
00:14:59,419 --> 00:15:03,949
out we are currently not guaranteeing

356
00:15:01,909 --> 00:15:06,649
that we draw that in any particular

357
00:15:03,950 --> 00:15:08,360
order we just draw it in any old order

358
00:15:06,649 --> 00:15:09,919
that happens to come in and we don't

359
00:15:08,360 --> 00:15:12,560
ensure that floors that are higher up

360
00:15:09,919 --> 00:15:14,839
for example get drawn before floors that

361
00:15:12,559 --> 00:15:18,279
are lower down and so we do currently

362
00:15:14,840 --> 00:15:20,930
have unfortunately a restriction that

363
00:15:18,279 --> 00:15:24,259
doesn't really let us do anything

364
00:15:20,929 --> 00:15:26,479
intelligent there right so now the

365
00:15:24,259 --> 00:15:28,460
question is is there something else that

366
00:15:26,480 --> 00:15:30,740
we could do like is there something we

367
00:15:28,460 --> 00:15:33,139
could do that would allow us to do this

368
00:15:30,740 --> 00:15:34,190
result or to get that like anti-aliasing

369
00:15:33,139 --> 00:15:35,750
that we're trying to get there

370
00:15:34,190 --> 00:15:39,610
is there some way we could get that

371
00:15:35,750 --> 00:15:43,129
anti-aliasing in a way that allows us to

372
00:15:39,610 --> 00:15:46,459
drop the number of these resolves down

373
00:15:43,129 --> 00:15:48,350
to just one so we only pay you know this

374
00:15:46,458 --> 00:15:51,289
like two millisecond cost here or

375
00:15:48,350 --> 00:15:53,540
something but don't have to pay the two

376
00:15:51,289 --> 00:15:56,539
to three millisecond cost three more

377
00:15:53,539 --> 00:16:03,849
times up here in these other resolves

378
00:15:56,539 --> 00:16:11,980
for no reason that's the question and

379
00:16:03,850 --> 00:16:11,980
the answer is probably yes

380
00:16:12,970 --> 00:16:21,579
but I'm not sure I necessarily know why

381
00:16:19,299 --> 00:16:24,979
so I have to kind of think it through

382
00:16:21,578 --> 00:16:27,318
let's pop over the white board or black

383
00:16:24,980 --> 00:16:30,139
board as the case may be and see what we

384
00:16:27,318 --> 00:16:32,568
can figure out also while I'm at it

385
00:16:30,139 --> 00:16:34,850
does anyone know if Milton ever got

386
00:16:32,568 --> 00:16:38,259
fixed to fix the bug that they

387
00:16:34,850 --> 00:16:40,610
introduced with the fact that the

388
00:16:38,259 --> 00:16:47,269
smoothing looks really bad now does

389
00:16:40,610 --> 00:16:49,519
anyone know I'm not sure like if if that

390
00:16:47,269 --> 00:16:52,250
ever got you know cuz we we got this

391
00:16:49,519 --> 00:16:54,049
nice like grid feature in there that

392
00:16:52,250 --> 00:16:57,948
someone added but in order to get the

393
00:16:54,049 --> 00:17:03,109
grid feature we had to upgrade to a new

394
00:16:57,948 --> 00:17:05,240
version and that version seems to have a

395
00:17:03,110 --> 00:17:08,088
weird luck bug where the the smoothing

396
00:17:05,240 --> 00:17:10,900
is all messed up it's very like rough

397
00:17:08,088 --> 00:17:13,730
now and has a lot of weird like small

398
00:17:10,900 --> 00:17:15,890
errors and stuff like that I'm not sure

399
00:17:13,730 --> 00:17:17,390
so it would be interesting to know if

400
00:17:15,890 --> 00:17:19,309
anyone ever figured out what was going

401
00:17:17,390 --> 00:17:22,370
on there I would certainly like to know

402
00:17:19,308 --> 00:17:24,019
and put perhaps upgrade to a new version

403
00:17:22,369 --> 00:17:25,698
if anyone knows the answer that question

404
00:17:24,019 --> 00:17:28,879
so let me know in the discord or

405
00:17:25,699 --> 00:17:30,200
something if that's the case because it

406
00:17:28,880 --> 00:17:34,130
would be nice to get that sorted out at

407
00:17:30,200 --> 00:17:36,319
some point in the near future okay so

408
00:17:34,130 --> 00:17:41,059
here's the problem that we currently

409
00:17:36,319 --> 00:17:46,058
have we have our sprites and our sprites

410
00:17:41,058 --> 00:17:48,079
are like a okay right these don't need

411
00:17:46,058 --> 00:17:52,700
multisample

412
00:17:48,079 --> 00:17:56,918
at all but these do so they don't need

413
00:17:52,700 --> 00:17:56,919
another sample they do need depth feel

414
00:17:59,470 --> 00:18:17,089
then we have our geometry and these do

415
00:18:07,398 --> 00:18:26,058
need multi sample and sort of need depth

416
00:18:17,089 --> 00:18:28,158
peel and so what do I mean by that right

417
00:18:26,058 --> 00:18:30,558
what do I mean by sort of need epi oh

418
00:18:28,159 --> 00:18:33,220
well like I said sometimes we may want

419
00:18:30,558 --> 00:18:37,038
to use the ability to alpha blend floors

420
00:18:33,220 --> 00:18:39,048
in and out and so they kind of do sort

421
00:18:37,038 --> 00:18:44,808
of need depth feel to a certain extent

422
00:18:39,048 --> 00:18:47,960
but what does that really mean do we

423
00:18:44,808 --> 00:18:49,700
really need depth feel necessarily like

424
00:18:47,960 --> 00:18:53,149
is that actually something that we

425
00:18:49,700 --> 00:18:55,788
really need to have or is it not so

426
00:18:53,148 --> 00:18:57,829
necessary right because remember the

427
00:18:55,788 --> 00:18:59,658
reason that we needed the depth peeling

428
00:18:57,829 --> 00:19:01,368
on our sprites is because we want to be

429
00:18:59,659 --> 00:19:03,230
able to draw all of our sprites with no

430
00:19:01,368 --> 00:19:05,238
sorting and just have the z-buffer

431
00:19:03,230 --> 00:19:07,489
figure it out and in order to do that

432
00:19:05,239 --> 00:19:09,409
and have the Alpha values still

433
00:19:07,489 --> 00:19:13,129
composite properly on top of each other

434
00:19:09,409 --> 00:19:14,539
for partial alpha values we need to know

435
00:19:13,128 --> 00:19:17,108
what order they come in and that feels

436
00:19:14,538 --> 00:19:21,378
really the only way to do that right

437
00:19:17,108 --> 00:19:25,759
well my question here is well hmm for

438
00:19:21,378 --> 00:19:27,829
alpha blending do we really need to like

439
00:19:25,759 --> 00:19:30,230
fur when we're doing one floor on top of

440
00:19:27,829 --> 00:19:32,538
each other that's not really as hard of

441
00:19:30,230 --> 00:19:34,220
a problem as just a crazy crap ton of

442
00:19:32,538 --> 00:19:35,658
sprites just thrown together and

443
00:19:34,220 --> 00:19:36,200
expecting the graphs it's hard to sort

444
00:19:35,659 --> 00:19:38,600
them out

445
00:19:36,200 --> 00:19:41,179
we're def feeling was maybe a little bit

446
00:19:38,599 --> 00:19:43,608
more warranted if we're just talking

447
00:19:41,179 --> 00:19:46,788
about alpha blending out at a certain

448
00:19:43,608 --> 00:19:50,689
range that's you know like a fogging

449
00:19:46,788 --> 00:19:52,638
distance to us that seems like something

450
00:19:50,690 --> 00:19:55,460
that we might be able to handle it a

451
00:19:52,638 --> 00:19:57,378
different sort of way and let me sort of

452
00:19:55,460 --> 00:20:00,108
say something else about that while

453
00:19:57,378 --> 00:20:01,329
we're at it if I was to run the game

454
00:20:00,108 --> 00:20:04,839
here again

455
00:20:01,329 --> 00:20:06,460
let me go up into well actually let me

456
00:20:04,839 --> 00:20:10,628
just run it as I normally would in

457
00:20:06,460 --> 00:20:16,778
remedy so let's launch the debugger here

458
00:20:10,628 --> 00:20:20,168
let me go to loading there we go so if I

459
00:20:16,778 --> 00:20:24,368
was to run it here what you would notice

460
00:20:20,169 --> 00:20:27,399
is that as I do start to use that

461
00:20:24,368 --> 00:20:28,839
feature of alpha blending out a floor

462
00:20:27,398 --> 00:20:31,388
that's on top of the floor that we're

463
00:20:28,839 --> 00:20:36,398
currently on what you'll see is I go

464
00:20:31,388 --> 00:20:39,788
down these stairs is that as I get lower

465
00:20:36,398 --> 00:20:42,538
down into and you know the camera starts

466
00:20:39,788 --> 00:20:45,398
to move down is that the alpha blending

467
00:20:42,538 --> 00:20:48,778
when I blend these out does some

468
00:20:45,398 --> 00:20:51,339
somewhat undesirable things actually

469
00:20:48,778 --> 00:20:54,579
what do you hope you can see there is

470
00:20:51,339 --> 00:21:00,428
like when I blend out that floor I

471
00:20:54,579 --> 00:21:02,980
actually sort of cut away the floor and

472
00:21:00,429 --> 00:21:06,669
I can see like the inside of the cubes

473
00:21:02,980 --> 00:21:09,489
right now we may decide that that's fine

474
00:21:06,669 --> 00:21:11,139
like maybe that effect is just kind of

475
00:21:09,489 --> 00:21:13,989
nice and we don't you know like maybe

476
00:21:11,138 --> 00:21:16,089
it's just a nice smooth effect right um

477
00:21:13,989 --> 00:21:20,350
so there is something to be said for

478
00:21:16,089 --> 00:21:23,368
that but at the same time there is a

479
00:21:20,349 --> 00:21:28,089
separate issue there which is like well

480
00:21:23,368 --> 00:21:31,509
if I really wanted this to work more

481
00:21:28,089 --> 00:21:34,358
artistically we probably wouldn't alpha

482
00:21:31,509 --> 00:21:37,389
blend out the floor that way what we

483
00:21:34,358 --> 00:21:40,960
would do instead is we would alpha blend

484
00:21:37,388 --> 00:21:43,658
out like this rendered image in a sense

485
00:21:40,960 --> 00:21:46,600
and we wouldn't allow you to see like

486
00:21:43,659 --> 00:21:50,470
the backs of cubes or something in there

487
00:21:46,599 --> 00:21:52,329
right and no matter what we do if we

488
00:21:50,470 --> 00:21:54,278
just use the alpha the way we're using

489
00:21:52,329 --> 00:21:56,710
it now you're definitely going to see

490
00:21:54,278 --> 00:21:58,298
those because even if we turned on some

491
00:21:56,710 --> 00:22:03,069
kind of a back face call that would

492
00:21:58,298 --> 00:22:05,470
remove these interior facing polygons

493
00:22:03,069 --> 00:22:07,778
here which we certainly could do we

494
00:22:05,470 --> 00:22:10,600
would still end up in a situation where

495
00:22:07,778 --> 00:22:13,509
these cubes here we would see their

496
00:22:10,599 --> 00:22:14,538
sides which we were not previously able

497
00:22:13,509 --> 00:22:18,999
to see

498
00:22:14,538 --> 00:22:23,239
and so there is a certain amount of like

499
00:22:18,999 --> 00:22:26,719
me looking at that going oh I don't know

500
00:22:23,239 --> 00:22:29,899
about this right and so when I think

501
00:22:26,719 --> 00:22:31,399
about that what that strikes me is you

502
00:22:29,898 --> 00:22:34,728
know if I was gonna like play around

503
00:22:31,398 --> 00:22:37,428
with this a little bit that strikes me

504
00:22:34,729 --> 00:22:41,359
as something where I may want to say

505
00:22:37,429 --> 00:22:44,298
well for multi samples we can do better

506
00:22:41,358 --> 00:22:45,828
than that to multi sample resolves I'm

507
00:22:44,298 --> 00:22:47,808
sorry four-month ISTEP results we can

508
00:22:45,828 --> 00:22:50,719
definitely better than that to multi

509
00:22:47,808 --> 00:22:52,878
sample resolves I don't know to multi

510
00:22:50,719 --> 00:22:54,619
sample resolves might be necessary and

511
00:22:52,878 --> 00:22:56,808
the reason I say it might be necessary

512
00:22:54,618 --> 00:23:02,538
is because what I might want to do is

513
00:22:56,808 --> 00:23:05,209
just do two depth peels of the geometry

514
00:23:02,538 --> 00:23:07,338
one for things that are past the Alpha

515
00:23:05,209 --> 00:23:11,778
plane and ones that are thick for things

516
00:23:07,338 --> 00:23:14,598
that are before it and then blend those

517
00:23:11,778 --> 00:23:20,239
out in a cleaner way that doesn't

518
00:23:14,598 --> 00:23:23,958
involve that kind of sort of seeing B

519
00:23:20,239 --> 00:23:26,269
you know seeing the seeing how the

520
00:23:23,959 --> 00:23:27,919
sausage is made might be a bad bad way

521
00:23:26,269 --> 00:23:31,009
to say it but you know what I mean right

522
00:23:27,919 --> 00:23:33,528
like seeing an element of geometry that

523
00:23:31,009 --> 00:23:35,568
really has nothing to do with the

524
00:23:33,528 --> 00:23:37,729
artistic intent of the game it was just

525
00:23:35,568 --> 00:23:40,489
something that happened because these

526
00:23:37,729 --> 00:23:42,229
things happen to be drawn as cubes and

527
00:23:40,489 --> 00:23:44,209
we happen to be setting their alpha

528
00:23:42,229 --> 00:23:46,369
value down but but no one really wanted

529
00:23:44,209 --> 00:23:48,649
it to look like a hollow box there we

530
00:23:46,368 --> 00:23:51,558
just kind of wanted the floor itself to

531
00:23:48,648 --> 00:23:54,558
sort of fade out and you know and then

532
00:23:51,558 --> 00:23:55,940
instead we got this right so the

533
00:23:54,558 --> 00:23:57,440
question is like you know can we do

534
00:23:55,940 --> 00:23:59,318
something with that is there some way

535
00:23:57,440 --> 00:24:03,528
that we can maybe play around with that

536
00:23:59,318 --> 00:24:07,308
and so what I would say is if we just

537
00:24:03,528 --> 00:24:09,378
assume here that we take the sprites and

538
00:24:07,308 --> 00:24:14,328
we were to say let's do these in a

539
00:24:09,378 --> 00:24:16,519
separate pass right so there's a

540
00:24:14,328 --> 00:24:20,989
separate pass that deals with sprites

541
00:24:16,519 --> 00:24:23,479
and that pass is going to be somehow you

542
00:24:20,989 --> 00:24:26,389
know removed from a pass that involves

543
00:24:23,479 --> 00:24:27,870
geometry and perhaps the geometry for

544
00:24:26,388 --> 00:24:29,279
example is just rendered

545
00:24:27,869 --> 00:24:31,769
to a temporary buffer that gets

546
00:24:29,279 --> 00:24:33,779
composited in with the sprites during

547
00:24:31,769 --> 00:24:35,519
that depth field process as if it was

548
00:24:33,779 --> 00:24:37,259
just another sprite a sprite that

549
00:24:35,519 --> 00:24:40,650
happens to be the full screen or

550
00:24:37,259 --> 00:24:42,359
something right and so if you imagine

551
00:24:40,650 --> 00:24:45,570
doing it that way what you could imagine

552
00:24:42,359 --> 00:24:47,639
doing is just taking the geometry run

553
00:24:45,569 --> 00:24:49,529
dirt rendering out the geometry in the

554
00:24:47,640 --> 00:24:51,450
multi sample buffer resolving the multi

555
00:24:49,529 --> 00:24:53,639
sample buffer to a full screen quad and

556
00:24:51,450 --> 00:24:56,789
then when we actually do our sprite

557
00:24:53,640 --> 00:24:59,400
resolves we just mix it in as one full

558
00:24:56,789 --> 00:25:01,619
screen quad pass that means that the

559
00:24:59,400 --> 00:25:03,480
depth peels themselves never need to go

560
00:25:01,619 --> 00:25:05,759
through a multi sample resolve they can

561
00:25:03,480 --> 00:25:08,308
just be used as is with multi sampling

562
00:25:05,759 --> 00:25:10,500
turned off and then the geometry part

563
00:25:08,308 --> 00:25:12,269
which does need the multi sampling well

564
00:25:10,500 --> 00:25:14,940
will turn it on for just the part that

565
00:25:12,269 --> 00:25:16,889
computes the geometry pass which is then

566
00:25:14,940 --> 00:25:19,130
composited in as if it was a full-screen

567
00:25:16,890 --> 00:25:22,440
sprite with its own depth buffer right

568
00:25:19,130 --> 00:25:24,450
so that's a relatively easy way that we

569
00:25:22,440 --> 00:25:26,700
could do that process and I think that

570
00:25:24,450 --> 00:25:29,308
would work just fine the only thing that

571
00:25:26,700 --> 00:25:32,100
it doesn't do again is handle alpha

572
00:25:29,308 --> 00:25:35,039
blending out that those floors that were

573
00:25:32,099 --> 00:25:37,589
too close to us and so that's the part

574
00:25:35,039 --> 00:25:39,960
where I say we may have to do a 2x of

575
00:25:37,589 --> 00:25:42,149
the multi sample result the reason I say

576
00:25:39,960 --> 00:25:43,940
we might need to do a 2x is because when

577
00:25:42,150 --> 00:25:47,220
we're actually doing the rendering and

578
00:25:43,940 --> 00:25:49,860
we do that multi sample rendering it

579
00:25:47,220 --> 00:25:52,110
seems like something where I don't know

580
00:25:49,859 --> 00:25:54,449
even if we're doing 16x multi sampling

581
00:25:52,109 --> 00:25:56,279
if we do do a screen door transparency

582
00:25:54,450 --> 00:25:59,220
kind of thing for the blend outs on

583
00:25:56,279 --> 00:26:01,079
those things I think maybe that wouldn't

584
00:25:59,220 --> 00:26:05,670
quite be smooth enough I mean I don't

585
00:26:01,079 --> 00:26:07,109
know right so maybe it would be fine and

586
00:26:05,670 --> 00:26:11,039
then you could just get away with one

587
00:26:07,109 --> 00:26:13,829
but I just don't know and so to get the

588
00:26:11,039 --> 00:26:18,058
full you know 8-bit at least

589
00:26:13,829 --> 00:26:20,339
interpolation of that fade what we would

590
00:26:18,058 --> 00:26:23,220
have to do I think unless I'm missing

591
00:26:20,339 --> 00:26:24,899
something when I what I'm thinking about

592
00:26:23,220 --> 00:26:27,690
it in my head here I may be missing some

593
00:26:24,900 --> 00:26:29,009
other way of massaging the problem but

594
00:26:27,690 --> 00:26:31,320
what I'm thinking about is we need to

595
00:26:29,009 --> 00:26:33,900
introduce a plane that's like here's the

596
00:26:31,319 --> 00:26:35,700
Alpha cutting plane right everything

597
00:26:33,900 --> 00:26:37,170
behind it gets generated in one pass

598
00:26:35,700 --> 00:26:39,360
through the multi sample buffer which we

599
00:26:37,170 --> 00:26:40,890
then resolve and then everything in

600
00:26:39,359 --> 00:26:41,759
front of it gets generated into a

601
00:26:40,890 --> 00:26:44,940
separate

602
00:26:41,759 --> 00:26:46,890
buffer and then resolved right and then

603
00:26:44,940 --> 00:26:59,670
those two get out put on top of each

604
00:26:46,890 --> 00:27:03,630
other based on depth right and I can't

605
00:26:59,670 --> 00:27:15,180
really say that I know what else I would

606
00:27:03,630 --> 00:27:17,940
do and yet so if we wanted to do it in

607
00:27:15,180 --> 00:27:22,340
just one multisample pass then what we

608
00:27:17,940 --> 00:27:22,340
would presumably do is we would just

609
00:27:31,619 --> 00:27:36,489
yeah I mean I'm sorry but I can't I

610
00:27:35,079 --> 00:27:38,049
can't really think of any way to do it

611
00:27:36,490 --> 00:27:40,839
in one multi I'm pass other than just

612
00:27:38,049 --> 00:27:42,490
using screen door transparency for

613
00:27:40,839 --> 00:27:44,409
things on top and the reason that that

614
00:27:42,490 --> 00:27:45,880
doesn't really thrill me either

615
00:27:44,410 --> 00:27:48,100
is because if you think about what

616
00:27:45,880 --> 00:27:49,690
that's gonna do doing three screen door

617
00:27:48,099 --> 00:27:51,099
transparency and especially when you've

618
00:27:49,690 --> 00:27:53,710
got like a whole floor that's getting

619
00:27:51,099 --> 00:27:56,019
blended in on top like that that means

620
00:27:53,710 --> 00:27:58,360
for that whole screen basically like the

621
00:27:56,019 --> 00:28:00,220
whole screen because most of its gonna

622
00:27:58,359 --> 00:28:03,250
be filled with that upper floor that's

623
00:28:00,220 --> 00:28:05,829
in your face that whole thing is gonna

624
00:28:03,250 --> 00:28:07,329
have to touch a large amount of the both

625
00:28:05,829 --> 00:28:08,889
our sample buffer because the screen

626
00:28:07,329 --> 00:28:10,240
dark transparency algorithm that would

627
00:28:08,890 --> 00:28:12,370
be used there would be to say look

628
00:28:10,240 --> 00:28:15,519
what's the Alpha supposed to be let me

629
00:28:12,369 --> 00:28:19,979
cover that many of the 16 samples with

630
00:28:15,519 --> 00:28:22,690
my coverage information and that would

631
00:28:19,980 --> 00:28:24,940
again put it on the slow path for multi

632
00:28:22,690 --> 00:28:27,880
sample meaning as we go into right a

633
00:28:24,940 --> 00:28:32,980
pixel it's gonna have to write to all 14

634
00:28:27,880 --> 00:28:37,390
50 15 multi samples sometimes even 16 if

635
00:28:32,980 --> 00:28:41,259
it's a big fair right uh so that doesn't

636
00:28:37,390 --> 00:28:44,530
seem good either and so just I don't

637
00:28:41,259 --> 00:28:47,079
know I'm not thinking of a way to be

638
00:28:44,529 --> 00:28:50,649
able to blend those floors in and out

639
00:28:47,079 --> 00:28:52,509
with without to multi sample resolves

640
00:28:50,650 --> 00:28:55,140
want to resolve the underlying floor

641
00:28:52,509 --> 00:28:59,170
geometry and want to resolve the

642
00:28:55,140 --> 00:29:06,400
geometry and he look huge in the upper

643
00:28:59,170 --> 00:29:07,720
area right I can't really think of

644
00:29:06,400 --> 00:29:09,550
anything else we can do there

645
00:29:07,720 --> 00:29:12,279
so that's currently that's the best I

646
00:29:09,549 --> 00:29:21,159
think I can do I don't really think

647
00:29:12,279 --> 00:29:24,660
there's much else I don't really think

648
00:29:21,160 --> 00:29:24,660
there's much else in the way options

649
00:29:27,638 --> 00:29:32,358
so I'm gonna go ahead and assume and

650
00:29:30,048 --> 00:29:35,749
this assumption may be very incorrect

651
00:29:32,358 --> 00:29:37,578
but I'm gonna go ahead and assume that

652
00:29:35,749 --> 00:29:39,858
we need to use at least two multi sample

653
00:29:37,578 --> 00:29:41,239
resolves to get high-quality results

654
00:29:39,858 --> 00:29:43,249
there and support all the features we

655
00:29:41,239 --> 00:29:45,139
want to support it may be wrong about

656
00:29:43,249 --> 00:29:47,479
that and if I am then maybe we can

657
00:29:45,138 --> 00:29:49,638
figure out if someone has suggestions

658
00:29:47,479 --> 00:29:50,899
about how we would get that number down

659
00:29:49,638 --> 00:29:53,508
from two to one

660
00:29:50,898 --> 00:29:56,688
but either way going from four to two

661
00:29:53,509 --> 00:29:59,269
still basically is a is a species of

662
00:29:56,689 --> 00:30:01,189
speed doubling right for multi sample

663
00:29:59,269 --> 00:30:03,019
resolves costs twice as much as to multi

664
00:30:01,189 --> 00:30:06,919
sample resolve so it's still even just

665
00:30:03,019 --> 00:30:13,459
doing this one refinement would

666
00:30:06,919 --> 00:30:15,349
potentially save a lot of would

667
00:30:13,459 --> 00:30:18,739
potentially save us a lot of issues

668
00:30:15,348 --> 00:30:21,378
right so I think we probably want to do

669
00:30:18,739 --> 00:30:24,558
that and the only thing that's a little

670
00:30:21,378 --> 00:30:27,378
bit tricky about it is it does mean that

671
00:30:24,558 --> 00:30:30,348
we have a little bit harder work to do

672
00:30:27,378 --> 00:30:33,528
in terms of how our geometry gets

673
00:30:30,348 --> 00:30:35,208
segregated in two sets so if you look at

674
00:30:33,528 --> 00:30:36,858
what's happening right now we have a

675
00:30:35,209 --> 00:30:38,689
geometry buffer and we fill that

676
00:30:36,858 --> 00:30:41,208
geometry buffer up with geometry and

677
00:30:38,689 --> 00:30:44,209
then we render it and the nice thing

678
00:30:41,209 --> 00:30:45,769
about that is that at least so far we

679
00:30:44,209 --> 00:30:48,949
haven't really had to think about much

680
00:30:45,769 --> 00:30:51,679
in terms of what's going in there other

681
00:30:48,949 --> 00:30:54,259
than the fact that the game is bracketed

682
00:30:51,679 --> 00:30:56,229
by two markers that say everything

683
00:30:54,259 --> 00:30:58,429
inside here goes through four def peels

684
00:30:56,229 --> 00:31:00,169
whereas the part that comes after it

685
00:30:58,429 --> 00:31:01,639
basically I think says look you don't

686
00:31:00,169 --> 00:31:03,559
have to because it's like a debug HUD

687
00:31:01,638 --> 00:31:05,208
overlay or something so there's a little

688
00:31:03,558 --> 00:31:07,189
bit of optimization inserted with

689
00:31:05,209 --> 00:31:09,499
respect to that but in terms of the

690
00:31:07,189 --> 00:31:13,038
actual game like the stuff that gets

691
00:31:09,499 --> 00:31:16,548
outputted for the game image there's

692
00:31:13,038 --> 00:31:18,828
nothing in there in terms of like logic

693
00:31:16,548 --> 00:31:21,588
right it's just a render buffer that

694
00:31:18,828 --> 00:31:23,959
just has a bunch of quads in it some of

695
00:31:21,588 --> 00:31:26,118
those quads represent sprites as some of

696
00:31:23,959 --> 00:31:27,919
those quads represent geometry but we

697
00:31:26,118 --> 00:31:29,838
don't actually do any work to keep those

698
00:31:27,919 --> 00:31:31,999
two things separate and so the render

699
00:31:29,838 --> 00:31:34,398
itself doesn't really know which ones

700
00:31:31,999 --> 00:31:36,949
are which and more importantly they're

701
00:31:34,398 --> 00:31:39,949
not batched up in any way that would be

702
00:31:36,949 --> 00:31:41,360
conducive necessarily

703
00:31:39,950 --> 00:31:45,110
to making sure that we can render them

704
00:31:41,359 --> 00:31:47,028
quickly because for example if geometry

705
00:31:45,109 --> 00:31:48,918
and sprites want to be rendered

706
00:31:47,028 --> 00:31:51,048
separately we would like all of the

707
00:31:48,919 --> 00:31:52,669
geometry to be in one batch and all of

708
00:31:51,048 --> 00:31:55,759
the sprites to be in another batch or

709
00:31:52,669 --> 00:31:57,710
something there abouts and currently the

710
00:31:55,759 --> 00:32:00,079
way that we record our render

711
00:31:57,710 --> 00:32:02,389
information is we put geometry and

712
00:32:00,079 --> 00:32:05,210
sprites into the same buffer so we don't

713
00:32:02,388 --> 00:32:07,369
actually know at any given time which

714
00:32:05,210 --> 00:32:11,179
one of the two we were using and even if

715
00:32:07,369 --> 00:32:13,398
we marked them so we said these ones are

716
00:32:11,179 --> 00:32:15,679
geometry these ones are sprites they

717
00:32:13,398 --> 00:32:17,778
would still be interleaved in a way that

718
00:32:15,679 --> 00:32:19,730
is very inconvenient for us to do it in

719
00:32:17,778 --> 00:32:21,259
a single batch because a batch wants to

720
00:32:19,730 --> 00:32:23,569
take a contiguous range of things

721
00:32:21,259 --> 00:32:26,240
whereas we may have cases where we're

722
00:32:23,569 --> 00:32:27,888
just doing like a cube and then a spray

723
00:32:26,240 --> 00:32:29,419
and then acute cubes and then two

724
00:32:27,888 --> 00:32:31,908
sprites and three sprites and then a

725
00:32:29,419 --> 00:32:34,250
cube right and each one of those things

726
00:32:31,909 --> 00:32:36,470
if we were actually doing some kind of a

727
00:32:34,250 --> 00:32:39,169
split render to different render targets

728
00:32:36,470 --> 00:32:40,700
would incur a render target switch and

729
00:32:39,169 --> 00:32:41,380
we would just slow things down to a

730
00:32:40,700 --> 00:32:43,730
crawl

731
00:32:41,380 --> 00:32:45,830
so we definitely don't want to do that

732
00:32:43,730 --> 00:32:47,929
which means that the one thing we would

733
00:32:45,829 --> 00:32:50,808
have to do to improve this process if we

734
00:32:47,929 --> 00:32:53,809
did want to stop depth peeling our

735
00:32:50,808 --> 00:32:55,579
geometry and go slightly different

736
00:32:53,808 --> 00:32:57,918
direction with it is we would have to

737
00:32:55,579 --> 00:33:00,230
start segregating sprites and geometry

738
00:32:57,919 --> 00:33:03,049
into two separate buffers so that when

739
00:33:00,230 --> 00:33:05,240
you actually push a sprite onto the

740
00:33:03,048 --> 00:33:08,538
render buffer it goes into one channel

741
00:33:05,240 --> 00:33:10,490
and when you push a cube on those quads

742
00:33:08,538 --> 00:33:12,888
go into a different channel and that way

743
00:33:10,490 --> 00:33:15,769
they stack up into separate buffers and

744
00:33:12,888 --> 00:33:17,959
remain contiguous the entire time which

745
00:33:15,769 --> 00:33:19,339
isn't particularly hard to do but it

746
00:33:17,960 --> 00:33:22,190
does introduce a little bit more

747
00:33:19,339 --> 00:33:24,379
overhead in terms of us during setup

748
00:33:22,190 --> 00:33:26,808
having to create multiple buffers that

749
00:33:24,380 --> 00:33:32,090
we fill with differing information

750
00:33:26,808 --> 00:33:34,398
basically right so uh I'm not really

751
00:33:32,089 --> 00:33:38,839
sure again you know just thinking that

752
00:33:34,398 --> 00:33:40,849
through it seems like the right thing to

753
00:33:38,839 --> 00:33:42,888
do to make that change

754
00:33:40,849 --> 00:33:45,709
but the reason I'm talking it through

755
00:33:42,888 --> 00:33:49,158
extensively and a little bit hesitant is

756
00:33:45,710 --> 00:33:52,579
it does sort of start to degenerate the

757
00:33:49,159 --> 00:33:53,660
renderer a little bit right right now

758
00:33:52,579 --> 00:33:55,819
there's not

759
00:33:53,660 --> 00:34:00,350
much stuff in a renderer that's super

760
00:33:55,819 --> 00:34:03,109
specific to and made hero right really

761
00:34:00,349 --> 00:34:05,059
any things could sort of be dumped in

762
00:34:03,109 --> 00:34:08,059
there that's a game built out of quads

763
00:34:05,059 --> 00:34:10,639
you know and there's not a lot of stuff

764
00:34:08,059 --> 00:34:13,909
you have to worry about in that regard

765
00:34:10,639 --> 00:34:19,009
but this would definitely make a

766
00:34:13,909 --> 00:34:21,559
difference it would basically say we do

767
00:34:19,010 --> 00:34:23,060
need you to think about what things you

768
00:34:21,559 --> 00:34:25,130
have that have alpha in which things

769
00:34:23,059 --> 00:34:28,130
don't and we do need those things to be

770
00:34:25,130 --> 00:34:31,340
segregated at the head end right so when

771
00:34:28,130 --> 00:34:33,440
they get fed to the renderer they have

772
00:34:31,340 --> 00:34:36,140
to go into separate buffers at output

773
00:34:33,440 --> 00:34:41,720
time and you've got to keep that under

774
00:34:36,139 --> 00:34:44,269
control right so that's the only thing

775
00:34:41,719 --> 00:34:47,379
that gives me some pause apologize for

776
00:34:44,269 --> 00:34:47,380
the autumn cut tired today

777
00:34:47,559 --> 00:34:53,779
it's normally I do this in the morning

778
00:34:50,000 --> 00:34:56,360
return it at night so that's really the

779
00:34:53,780 --> 00:34:58,490
thing that that gives me some pause not

780
00:34:56,360 --> 00:35:00,769
the good kind of pause like a cat has

781
00:34:58,489 --> 00:35:02,299
but the bad kind of pause like when

782
00:35:00,769 --> 00:35:04,940
you're not sure if it's the right

783
00:35:02,300 --> 00:35:06,860
decision but it does give me some pause

784
00:35:04,940 --> 00:35:08,659
since I'm like well alright you know

785
00:35:06,860 --> 00:35:10,099
maybe the right answer there is to just

786
00:35:08,659 --> 00:35:12,349
not go that extra mile

787
00:35:10,099 --> 00:35:13,429
leave it going the way that we're going

788
00:35:12,349 --> 00:35:16,789
now because it's a little bit more

789
00:35:13,429 --> 00:35:18,469
general and look you just turn off multi

790
00:35:16,789 --> 00:35:20,809
sampling if you're on a lower end Kravis

791
00:35:18,469 --> 00:35:22,189
card and you get some crispy edges on

792
00:35:20,809 --> 00:35:29,449
our geometry and you know that's just

793
00:35:22,190 --> 00:35:31,820
how life is for you right so that's

794
00:35:29,449 --> 00:35:34,669
certainly possible let's think about

795
00:35:31,820 --> 00:35:36,410
what else week so so let me again let me

796
00:35:34,670 --> 00:35:39,920
just brainstorm a little bit and think

797
00:35:36,409 --> 00:35:42,409
to myself what if we wanted to turn off

798
00:35:39,920 --> 00:35:45,440
multi sampling entirely like is there

799
00:35:42,409 --> 00:35:47,899
anything I could do that would allow me

800
00:35:45,440 --> 00:35:50,840
to just not have this problem at all you

801
00:35:47,900 --> 00:35:53,240
know what I mean my guess is is the

802
00:35:50,840 --> 00:35:59,079
answer there is no of course but you

803
00:35:53,239 --> 00:35:59,079
know what's what's what's the options

804
00:35:59,108 --> 00:36:11,048
right and so there are some things that

805
00:36:04,869 --> 00:36:12,838
you know maybe we you know maybe we do

806
00:36:11,048 --> 00:36:15,369
have going for us I'm trying to think

807
00:36:12,838 --> 00:36:18,099
but like for example one of the things

808
00:36:15,369 --> 00:36:20,739
we know is that we could produce a multi

809
00:36:18,099 --> 00:36:26,489
sample buffer entirely separately if we

810
00:36:20,739 --> 00:36:29,259
wanted to right we could render a pass

811
00:36:26,489 --> 00:36:31,630
that just produces a multi sample buffer

812
00:36:29,259 --> 00:36:33,969
it doesn't do anything else it's

813
00:36:31,630 --> 00:36:35,318
basically just a multi sample depth

814
00:36:33,969 --> 00:36:36,880
buffer or something I mean I don't know

815
00:36:35,318 --> 00:36:39,909
exactly but just you know some kind of

816
00:36:36,880 --> 00:36:43,650
multi sample buffer and so we could

817
00:36:39,909 --> 00:36:47,048
produce the edge information as a

818
00:36:43,650 --> 00:36:50,219
separate piece of information right I

819
00:36:47,048 --> 00:36:55,929
mean we could do that if we wanted to

820
00:36:50,219 --> 00:36:58,380
and so you know that would work right

821
00:36:55,929 --> 00:37:01,028
like if you look at what's going on here

822
00:36:58,380 --> 00:37:04,358
and you want to look at like where we're

823
00:37:01,028 --> 00:37:06,458
getting you know this sort of effect so

824
00:37:04,358 --> 00:37:08,949
if you look in here you can see how nice

825
00:37:06,458 --> 00:37:10,690
and smooth that edge is that's what the

826
00:37:08,949 --> 00:37:14,048
multi sampling is giving us right there

827
00:37:10,690 --> 00:37:16,298
that particular edge right so like edges

828
00:37:14,048 --> 00:37:18,038
like in there it's not has nothing to do

829
00:37:16,298 --> 00:37:19,329
with because that's inside the texture

830
00:37:18,039 --> 00:37:21,880
so it's by linear filtering that's

831
00:37:19,329 --> 00:37:23,349
keeping all of that working properly and

832
00:37:21,880 --> 00:37:25,269
mipmapping and so on that's what's

833
00:37:23,349 --> 00:37:27,489
keeping the results high-quality all

834
00:37:25,268 --> 00:37:29,798
inside there but anytime you see the

835
00:37:27,489 --> 00:37:32,469
edge of a primitive that's the multi

836
00:37:29,798 --> 00:37:36,248
sampling in action there where it's

837
00:37:32,469 --> 00:37:40,269
basically getting those nice smooth edge

838
00:37:36,248 --> 00:37:42,159
effects right where those things meet

839
00:37:40,268 --> 00:37:45,608
because it's allowing it to record who's

840
00:37:42,159 --> 00:37:50,409
getting covered in which cases right and

841
00:37:45,608 --> 00:37:57,548
so that's really the thing that we're

842
00:37:50,409 --> 00:37:59,618
trying to recover and the problem is you

843
00:37:57,548 --> 00:38:01,869
know I could produce that edge

844
00:37:59,619 --> 00:38:03,670
information in a separate pass that

845
00:38:01,869 --> 00:38:05,588
would only really need one pass and

846
00:38:03,670 --> 00:38:08,380
wouldn't have have to be depth filled at

847
00:38:05,588 --> 00:38:10,440
all I could produce the information of

848
00:38:08,380 --> 00:38:12,548
where the edges actually are

849
00:38:10,440 --> 00:38:12,940
unfortunately I don't think there's

850
00:38:12,548 --> 00:38:16,980
anything

851
00:38:12,940 --> 00:38:16,980
I can do with that information

852
00:38:29,920 --> 00:38:33,030
[Music]

853
00:38:46,380 --> 00:38:56,380
so yeah I mean just thinking it through

854
00:38:54,519 --> 00:38:58,239
I just don't see what I would be able to

855
00:38:56,380 --> 00:39:00,430
do even if I read from a buffer that

856
00:38:58,239 --> 00:39:02,729
gave me that information the problem is

857
00:39:00,429 --> 00:39:06,929
if you think about how this thing is

858
00:39:02,730 --> 00:39:09,400
rasterized I don't really know I mean I

859
00:39:06,929 --> 00:39:10,659
don't know to what extent I could turn

860
00:39:09,400 --> 00:39:12,639
on something like conservative

861
00:39:10,659 --> 00:39:14,949
rasterization and just to give you some

862
00:39:12,639 --> 00:39:16,719
perspective on what that is if you look

863
00:39:14,949 --> 00:39:17,619
at one of these lines that you know is

864
00:39:16,719 --> 00:39:20,799
drawn like this

865
00:39:17,619 --> 00:39:22,659
what multi sampling requires is that you

866
00:39:20,800 --> 00:39:25,390
effectively have conservative

867
00:39:22,659 --> 00:39:27,609
rasterization or rasterization that

868
00:39:25,389 --> 00:39:30,609
considers pixels that are mostly outside

869
00:39:27,610 --> 00:39:33,700
the primitive but still slightly inside

870
00:39:30,610 --> 00:39:36,190
so you can kind of see in here this

871
00:39:33,699 --> 00:39:38,259
pixel right here is mostly inside the

872
00:39:36,190 --> 00:39:41,170
primitive and of course it gets assigned

873
00:39:38,260 --> 00:39:44,380
a correspondingly high alpha value as a

874
00:39:41,170 --> 00:39:46,869
result so you can see you know this part

875
00:39:44,380 --> 00:39:50,980
here that's being drawn on top of the

876
00:39:46,869 --> 00:39:53,230
floor it's blending in mostly this and

877
00:39:50,980 --> 00:39:55,449
only a little bit of the floor right and

878
00:39:53,230 --> 00:39:58,960
so if you look at what's actually

879
00:39:55,449 --> 00:40:00,639
happening this is mostly inside most of

880
00:39:58,960 --> 00:40:03,309
the pixel is covered by the primitive

881
00:40:00,639 --> 00:40:05,769
and as we get further up less and less

882
00:40:03,309 --> 00:40:08,019
of the pixels getting covered what that

883
00:40:05,769 --> 00:40:09,880
means is that if you looked at a pixel

884
00:40:08,019 --> 00:40:11,559
that was like this one where you can see

885
00:40:09,880 --> 00:40:13,869
that almost none of it is probably

886
00:40:11,559 --> 00:40:17,289
covered so it's just at the very edge

887
00:40:13,869 --> 00:40:19,690
right so only maybe just a little corner

888
00:40:17,289 --> 00:40:22,179
of this pixel was actually covered by

889
00:40:19,690 --> 00:40:24,130
this primitive over here if you think

890
00:40:22,179 --> 00:40:26,230
about what's going on there it when you

891
00:40:24,130 --> 00:40:29,289
actually switch away from multisample

892
00:40:26,230 --> 00:40:32,440
rendering you're never gonna call the

893
00:40:29,289 --> 00:40:34,449
pixel shader on this actual Texel I

894
00:40:32,440 --> 00:40:38,860
don't I on this actual pixel because

895
00:40:34,449 --> 00:40:43,269
it's not having its Center covered by

896
00:40:38,860 --> 00:40:45,039
the primitive and so to the extent that

897
00:40:43,269 --> 00:40:46,000
I could turn on conservative

898
00:40:45,039 --> 00:40:50,259
rasterization

899
00:40:46,000 --> 00:40:52,659
right meaning if I could tell the

900
00:40:50,260 --> 00:40:53,200
graphics card which I never tried to do

901
00:40:52,659 --> 00:40:55,389
before

902
00:40:53,199 --> 00:40:59,230
but if I could tell the graphics card

903
00:40:55,389 --> 00:41:01,690
look any time you would have covered one

904
00:40:59,230 --> 00:41:03,760
of the sixteen multi samples in a multi

905
00:41:01,690 --> 00:41:06,880
sample pattern I need you to actually

906
00:41:03,760 --> 00:41:12,750
invoke my pixel shader even though there

907
00:41:06,880 --> 00:41:12,750
is no multi sample target bound right

908
00:41:13,050 --> 00:41:20,440
if you imagined doing that then in

909
00:41:17,949 --> 00:41:25,750
theory what you could do is you could

910
00:41:20,440 --> 00:41:28,869
say well if I store if I run a multi

911
00:41:25,750 --> 00:41:32,079
sample then I look at the resolve of the

912
00:41:28,869 --> 00:41:35,530
multi sample and I store out which

913
00:41:32,079 --> 00:41:37,990
primitive was the one that was the high

914
00:41:35,530 --> 00:41:41,010
coverage and which primitive was the low

915
00:41:37,989 --> 00:41:43,959
coverage and what their blend ratio was

916
00:41:41,010 --> 00:41:48,220
then what I could do is something where

917
00:41:43,960 --> 00:41:49,990
I just take the color and I say whatever

918
00:41:48,219 --> 00:41:53,139
I would have written to this pixel if

919
00:41:49,989 --> 00:41:56,108
I'm the high primitive I write it in as

920
00:41:53,139 --> 00:41:58,989
the term that matches that amount of

921
00:41:56,108 --> 00:42:02,170
blending into the pixel and then if I'm

922
00:41:58,989 --> 00:42:06,338
the low one I do the the inverse of that

923
00:42:02,170 --> 00:42:09,280
right and that recovers this blend for

924
00:42:06,338 --> 00:42:12,009
me without actually ever having the

925
00:42:09,280 --> 00:42:14,800
multi sample there at all anymore

926
00:42:12,010 --> 00:42:17,319
right so what that would allow me to do

927
00:42:14,800 --> 00:42:19,780
is render one pass into the multi sample

928
00:42:17,318 --> 00:42:22,300
buffer resolve the multi sample buffer

929
00:42:19,780 --> 00:42:25,269
into what is basically an edge smoothing

930
00:42:22,300 --> 00:42:27,970
buffer and then when I render do the

931
00:42:25,269 --> 00:42:32,159
blend without actually having to have

932
00:42:27,969 --> 00:42:32,159
multi sampling on at all right

933
00:42:39,139 --> 00:42:43,239
I mean

934
00:42:51,530 --> 00:42:55,950
it sounds like something that probably

935
00:42:54,030 --> 00:42:58,260
wouldn't work and the reason is cuz I

936
00:42:55,949 --> 00:42:59,759
don't know how widely support there is a

937
00:42:58,260 --> 00:43:01,710
thing called conservative rasterization

938
00:42:59,760 --> 00:43:07,200
that probably would do what we need to

939
00:43:01,710 --> 00:43:11,550
do there but I don't know how well

940
00:43:07,199 --> 00:43:16,169
supported that is like I could do a

941
00:43:11,550 --> 00:43:18,180
brief search for it but I'm not super

942
00:43:16,170 --> 00:43:21,269
confident that we would want to be using

943
00:43:18,179 --> 00:43:24,389
something like that as a core aspect of

944
00:43:21,269 --> 00:43:27,929
how we do our anti aliasing right like

945
00:43:24,389 --> 00:43:34,549
that just sounds like maybe not such a

946
00:43:27,929 --> 00:43:34,549
good idea for a number of reasons right

947
00:43:35,929 --> 00:43:41,029
so I don't know I'm pretty apprehensive

948
00:43:38,519 --> 00:43:41,030
about that

949
00:43:48,349 --> 00:43:54,920
and now that I think about it another

950
00:43:51,380 --> 00:43:57,110
way of looking at this problem is that

951
00:43:54,920 --> 00:43:59,450
if we turned on I think I mentioned this

952
00:43:57,110 --> 00:44:02,440
too back when we originally did it if we

953
00:43:59,449 --> 00:44:06,980
turned on conservative rasterization

954
00:44:02,440 --> 00:44:10,220
because we're currently like we are as

955
00:44:06,980 --> 00:44:13,490
we speak we are we are already doing a

956
00:44:10,219 --> 00:44:16,279
depth feel the depth peel would handle

957
00:44:13,489 --> 00:44:18,709
the multi sampling for us so because

958
00:44:16,280 --> 00:44:20,060
it's already gonna blend things on top

959
00:44:18,710 --> 00:44:23,090
of each other according to their

960
00:44:20,059 --> 00:44:25,130
coverage alpha values all you have to do

961
00:44:23,090 --> 00:44:30,050
is just write the coverage value into

962
00:44:25,130 --> 00:44:32,539
that pixel so I want to almost say that

963
00:44:30,050 --> 00:44:34,640
all the crap that I just said actually

964
00:44:32,539 --> 00:44:36,650
isn't necessary at all all we really

965
00:44:34,639 --> 00:44:39,319
would need the thing to do is to do the

966
00:44:36,650 --> 00:44:42,110
conservative rasterization and then give

967
00:44:39,320 --> 00:44:46,430
us back that value like we just need to

968
00:44:42,110 --> 00:44:47,840
know how many how much of this Technic

969
00:44:46,429 --> 00:44:51,199
cyl was covered just give me a number

970
00:44:47,840 --> 00:44:57,260
between 0 and 285 right we just need a

971
00:44:51,199 --> 00:44:59,269
coverage to alpha so let's see if we can

972
00:44:57,260 --> 00:45:01,400
do that right because if we could do

973
00:44:59,269 --> 00:45:02,989
that multi sampler resolve is gone we

974
00:45:01,400 --> 00:45:05,320
just don't need it and we'd still get

975
00:45:02,989 --> 00:45:10,699
perfect anti-aliasing if we could

976
00:45:05,320 --> 00:45:12,260
actually get it to do that I'm gonna

977
00:45:10,699 --> 00:45:14,239
give it one more shot and I feel like I

978
00:45:12,260 --> 00:45:17,870
already look for this so I'm a little

979
00:45:14,239 --> 00:45:21,579
bit apprehensive about it but I'm gonna

980
00:45:17,869 --> 00:45:21,579
give it a I'm gonna give it a shot

981
00:45:41,699 --> 00:45:47,879
um oh great because apparently patented

982
00:45:45,210 --> 00:45:51,000
always good to know probably not what

983
00:45:47,880 --> 00:45:56,090
we're doing but you know I love those

984
00:45:51,000 --> 00:45:58,980
pads so again this is it kind of nice

985
00:45:56,090 --> 00:46:01,950
separately even if this is not something

986
00:45:58,980 --> 00:46:04,980
that we can actually end up using but if

987
00:46:01,949 --> 00:46:08,609
you kind of look in here this is exactly

988
00:46:04,980 --> 00:46:10,740
what I was just trying to say so this is

989
00:46:08,610 --> 00:46:14,070
an example of a primitive and you know

990
00:46:10,739 --> 00:46:19,349
you can see how this pixel is almost

991
00:46:14,070 --> 00:46:20,660
entirely outside right of the try of the

992
00:46:19,349 --> 00:46:23,279
primitive that's being rasterized

993
00:46:20,659 --> 00:46:25,289
nonetheless because conservative

994
00:46:23,280 --> 00:46:27,750
rasterization has been turned on it

995
00:46:25,289 --> 00:46:30,000
still gets covered right and that's what

996
00:46:27,750 --> 00:46:33,900
conservative rasterization means it

997
00:46:30,000 --> 00:46:36,059
means let's include more pixels than we

998
00:46:33,900 --> 00:46:38,990
actually would would need to you know so

999
00:46:36,059 --> 00:46:43,170
we're not being like aggressive right

1000
00:46:38,989 --> 00:46:45,689
and so you know that is precisely what I

1001
00:46:43,170 --> 00:46:53,990
want to turn on and so you know at least

1002
00:46:45,690 --> 00:46:53,990
we know somebody oops did I there we go

1003
00:46:54,710 --> 00:47:01,789
at least we know somebody would allow us

1004
00:46:57,150 --> 00:47:01,789
to do this right I it looks like

1005
00:47:05,670 --> 00:47:16,200
maybe these are some hold links all

1006
00:47:07,710 --> 00:47:16,949
right so this is how it would be done in

1007
00:47:16,199 --> 00:47:20,179
d3d

1008
00:47:16,949 --> 00:47:22,949
we could look in open Jill so here it is

1009
00:47:20,179 --> 00:47:26,038
so there is this conservative raster

1010
00:47:22,949 --> 00:47:29,909
call right and this conservative raster

1011
00:47:26,039 --> 00:47:32,579
call would would probably be all we

1012
00:47:29,909 --> 00:47:37,279
would really need to do to get started

1013
00:47:32,579 --> 00:47:40,629
right so let's see here

1014
00:47:37,280 --> 00:47:40,629
[Music]

1015
00:47:49,340 --> 00:47:54,450
so I'm not sure exactly we'd have to

1016
00:47:52,469 --> 00:47:56,129
look at how to set these up properly

1017
00:47:54,449 --> 00:47:57,569
because there's a little bit more to it

1018
00:47:56,130 --> 00:47:59,430
than that I'd have to read exactly what

1019
00:47:57,570 --> 00:48:01,230
those crazier but you know point being

1020
00:47:59,429 --> 00:48:06,809
it's it's all kind of what I respect to

1021
00:48:01,230 --> 00:48:10,590
see in here yes so we would just enable

1022
00:48:06,809 --> 00:48:15,809
this we would set some bias information

1023
00:48:10,590 --> 00:48:19,860
as necessary and then the only question

1024
00:48:15,809 --> 00:48:21,690
is inside the shader do we how do we

1025
00:48:19,860 --> 00:48:24,200
know how much coverage we would actually

1026
00:48:21,690 --> 00:48:24,200
have

1027
00:48:46,039 --> 00:48:59,019
um yeah so I don't see I don't see any

1028
00:48:56,539 --> 00:49:06,289
information you can actually use to know

1029
00:48:59,019 --> 00:49:08,300
how much you you've covered like what

1030
00:49:06,289 --> 00:49:12,559
the actual coverage is there so that's a

1031
00:49:08,300 --> 00:49:14,980
little bit a little bit rough and I

1032
00:49:12,559 --> 00:49:14,980
don't know

1033
00:49:33,190 --> 00:49:37,720
so you can see here it's talking a

1034
00:49:35,619 --> 00:49:39,430
little bit about I'm gonna read this and

1035
00:49:37,719 --> 00:49:41,558
see exactly what it's talking about here

1036
00:49:39,429 --> 00:49:43,088
but it says open ela runs a fragment

1037
00:49:41,559 --> 00:49:44,798
shader once for each pixel covered by a

1038
00:49:43,088 --> 00:49:45,940
primitive being rasterized when using

1039
00:49:44,798 --> 00:49:48,400
maltose sampling the outputs the

1040
00:49:45,940 --> 00:49:52,358
fabricator broadcast you know right what

1041
00:49:48,400 --> 00:49:54,579
we expect and we can also run the

1042
00:49:52,358 --> 00:49:57,940
fragment shader once for color sample if

1043
00:49:54,579 --> 00:50:00,599
we want to actually do it and then it

1044
00:49:57,940 --> 00:50:02,679
looks like you can also do some sort of

1045
00:50:00,599 --> 00:50:09,460
nonsense here where you control that a

1046
00:50:02,679 --> 00:50:11,169
little bit more I don't we don't really

1047
00:50:09,460 --> 00:50:21,099
care much about this I just want to know

1048
00:50:11,170 --> 00:50:22,510
if there's something if there's

1049
00:50:21,099 --> 00:50:24,869
something that gets passed to the shader

1050
00:50:22,510 --> 00:50:24,869
right

1051
00:50:35,289 --> 00:50:39,300
so you can see here

1052
00:50:48,460 --> 00:50:52,369
they are talking a lot about stuff that

1053
00:50:51,019 --> 00:50:53,480
interacts with the shader but I still

1054
00:50:52,369 --> 00:50:59,019
don't see anywhere where it actually

1055
00:50:53,480 --> 00:50:59,019
gets passed right you know I'm saying

1056
00:51:07,050 --> 00:51:10,430
so what about this

1057
00:51:25,280 --> 00:51:39,630
again still not seeing anything about

1058
00:51:29,730 --> 00:51:43,369
the shader per se right all I really

1059
00:51:39,630 --> 00:51:43,369
want to know is what the coverage is

1060
00:51:58,659 --> 00:52:05,108
this is actually saying that we would

1061
00:52:00,849 --> 00:52:09,849
call which we don't actually want right

1062
00:52:05,108 --> 00:52:11,858
and we don't want alpha-2 coverage we

1063
00:52:09,849 --> 00:52:16,028
want the opposite we want coverage to

1064
00:52:11,858 --> 00:52:17,889
alpha right we want to take however much

1065
00:52:16,028 --> 00:52:21,239
of the pixel is covered and we want to

1066
00:52:17,889 --> 00:52:21,239
get that as a value

1067
00:52:37,059 --> 00:52:41,049
but again just not seeing it

1068
00:52:49,440 --> 00:52:59,880
hey look it's the witness so I'm not

1069
00:52:54,699 --> 00:52:59,879
sure I am not sure what to make of that

1070
00:53:21,750 --> 00:53:25,489
let's see what this has to say

1071
00:53:34,369 --> 00:53:44,730
so these are some built-in uniforms

1072
00:53:40,349 --> 00:53:49,259
childen um samples is sort of saying how

1073
00:53:44,730 --> 00:53:51,719
many samples were covered there what is

1074
00:53:49,260 --> 00:53:53,700
this step modifies the fragment alpha

1075
00:53:51,719 --> 00:53:56,879
and coverage values based on the values

1076
00:53:53,699 --> 00:54:00,139
of sample alpha 2 coverage sample 51

1077
00:53:56,880 --> 00:54:08,579
sample coverage sample coverage value

1078
00:54:00,139 --> 00:54:13,949
sample coverage invert again I just want

1079
00:54:08,579 --> 00:54:16,170
I just want you to tell me how many

1080
00:54:13,949 --> 00:54:18,329
would be covered if we were multi

1081
00:54:16,170 --> 00:54:23,300
sampling I don't want to actually have

1082
00:54:18,329 --> 00:54:23,299
to turn on multi sampling right

1083
00:54:43,809 --> 00:54:49,670
and again I don't really see much like

1084
00:54:46,250 --> 00:54:52,429
GL sample mask again would just be you

1085
00:54:49,670 --> 00:54:59,180
know I assume only set if we were

1086
00:54:52,429 --> 00:55:01,569
actually in if we were actually in a

1087
00:54:59,179 --> 00:55:06,169
multi sample buffer and I'm assuming

1088
00:55:01,570 --> 00:55:09,230
that in something like you know the

1089
00:55:06,170 --> 00:55:11,329
conservative rasterization they're not

1090
00:55:09,230 --> 00:55:14,320
going to set those pieces of information

1091
00:55:11,329 --> 00:55:14,319
but

1092
00:55:30,539 --> 00:55:42,279
well this is kind of a bummer right like

1093
00:55:33,460 --> 00:55:45,599
I really only just want just this and I

1094
00:55:42,280 --> 00:55:53,530
just want to know how much was covered

1095
00:55:45,599 --> 00:55:55,449
and I mean I could you know if I was if

1096
00:55:53,530 --> 00:55:59,050
I was really gonna get ridiculous about

1097
00:55:55,449 --> 00:56:01,689
it I could just pass down the edge

1098
00:55:59,050 --> 00:56:03,519
functions myself and try to compute the

1099
00:56:01,690 --> 00:56:06,820
coverage directly by intersecting them

1100
00:56:03,519 --> 00:56:09,809
with the pixel area but I don't really

1101
00:56:06,820 --> 00:56:11,080
need to do that or want to do that

1102
00:56:09,809 --> 00:56:13,779
anymore

1103
00:56:11,079 --> 00:56:16,150
like I I really just need to run the

1104
00:56:13,780 --> 00:56:20,590
multi sample code and get that value

1105
00:56:16,150 --> 00:56:24,910
back right I mean maybe it is better to

1106
00:56:20,590 --> 00:56:27,220
do it analytically in which case yeah

1107
00:56:24,909 --> 00:56:32,980
what I don't have to do is send those

1108
00:56:27,219 --> 00:56:35,230
four edge functions down for every quad

1109
00:56:32,980 --> 00:56:38,199
or whatever right you just send down the

1110
00:56:35,230 --> 00:56:40,690
four edge functions you would intersect

1111
00:56:38,199 --> 00:56:45,480
those edge functions and see how much of

1112
00:56:40,690 --> 00:56:45,480
the pixel itself was actually covered

1113
00:56:56,480 --> 00:57:03,539
and I mean technically it's really only

1114
00:57:01,650 --> 00:57:06,510
two edge functions because for any

1115
00:57:03,539 --> 00:57:07,920
triangle that's in actual geometry the

1116
00:57:06,510 --> 00:57:14,119
only two edge functions you need are the

1117
00:57:07,920 --> 00:57:19,039
two that don't share an edge with the

1118
00:57:14,119 --> 00:57:19,039
with the other triangle of the quad

1119
00:57:23,630 --> 00:57:31,380
they're not making this one easy on me

1120
00:57:26,099 --> 00:57:39,119
are they they are not making this one

1121
00:57:31,380 --> 00:57:42,809
easy on me at all but in some sense I

1122
00:57:39,119 --> 00:57:45,869
could at least turn on conservative

1123
00:57:42,809 --> 00:57:49,608
raster and then in theory I could

1124
00:57:45,869 --> 00:57:49,608
compute the value myself

1125
00:57:59,480 --> 00:58:02,769
but it's a real bummer

1126
00:58:13,070 --> 00:58:19,920
let's see what we've got

1127
00:58:16,590 --> 00:58:22,340
in terms of of coverage for that anyway

1128
00:58:19,920 --> 00:58:26,630
like is this even an avenue worth

1129
00:58:22,340 --> 00:58:35,480
pursuing or not let me see here

1130
00:58:26,630 --> 00:58:35,480
extension search serve it is raster

1131
00:58:35,719 --> 00:58:48,059
hello that seems like less okay there we

1132
00:58:42,690 --> 00:58:50,929
go so if we take a look at what's going

1133
00:58:48,059 --> 00:58:54,420
on here you can see there's not a lot of

1134
00:58:50,929 --> 00:58:56,098
goodness here right like the number of

1135
00:58:54,420 --> 00:59:00,139
people who could actually benefit from

1136
00:58:56,099 --> 00:59:05,250
using GL &amp; GL and be conservative raster

1137
00:59:00,139 --> 00:59:11,400
not great right so it does seem like

1138
00:59:05,250 --> 00:59:12,900
we're still kind of Sol on that which

1139
00:59:11,400 --> 00:59:20,300
leads me to ask sort of a related

1140
00:59:12,900 --> 00:59:23,960
question which is is there any way to

1141
00:59:20,300 --> 00:59:28,349
run the hardware in multi sample mode

1142
00:59:23,960 --> 00:59:32,420
without actually having a multi sample

1143
00:59:28,349 --> 00:59:32,420
buffer right

1144
00:59:41,460 --> 00:59:49,440
I mean fundamentally speaking that's all

1145
00:59:46,650 --> 00:59:52,440
I actually really need I don't need

1146
00:59:49,440 --> 00:59:55,740
conservative rasterization I'm fine with

1147
00:59:52,440 --> 00:59:59,300
only 16 grayscale levels that's probably

1148
00:59:55,739 --> 01:00:05,699
good enough so if you were just to run

1149
00:59:59,300 --> 01:00:07,650
the multi sample routine but instead of

1150
01:00:05,699 --> 01:00:10,319
actually ever writing to the multi

1151
01:00:07,650 --> 01:00:12,539
sample buffer you just told me how many

1152
01:00:10,320 --> 01:00:15,030
samples were covered which you do

1153
01:00:12,539 --> 01:00:19,409
actually I believe that is in the

1154
01:00:15,030 --> 01:00:23,609
fragment shader is there any way to

1155
01:00:19,409 --> 01:00:26,789
enable that and say please render

1156
01:00:23,608 --> 01:00:29,579
everything as if it was 16x multi sample

1157
01:00:26,789 --> 01:00:36,029
but just don't actually waste the memory

1158
01:00:29,579 --> 01:00:38,509
because I don't care right is it

1159
01:00:36,030 --> 01:00:38,510
possible

1160
01:01:07,619 --> 01:01:16,619
like for example if we were to turn on

1161
01:01:11,338 --> 01:01:19,578
GL multi sampling but we didn't attach a

1162
01:01:16,619 --> 01:01:27,499
buffer that actually had multi sampling

1163
01:01:19,579 --> 01:01:27,499
would we get those III really don't know

1164
01:01:48,219 --> 01:01:52,239
we don't care about any of this by the

1165
01:01:50,119 --> 01:01:52,240
way

1166
01:01:56,920 --> 01:02:00,548
let's take a look at this multi sample

1167
01:01:58,449 --> 01:02:02,048
coverage the our pampas M extension

1168
01:02:00,548 --> 01:02:03,579
provides a mechanism for anti-aliasing

1169
01:02:02,048 --> 01:02:05,380
primitives the method allows this

1170
01:02:03,579 --> 01:02:08,019
mechanism allows an application request

1171
01:02:05,380 --> 01:02:09,849
additional buffer an application can

1172
01:02:08,018 --> 01:02:15,179
request the number of samples for

1173
01:02:09,849 --> 01:02:17,559
fragment rendering bla this told us yeah

1174
01:02:15,179 --> 01:02:19,088
coverage sample anti-aliasing is an

1175
01:02:17,559 --> 01:02:21,309
extension to multi sample and to the

1176
01:02:19,088 --> 01:02:23,288
other thing the technique separates

1177
01:02:21,309 --> 01:02:26,700
samples into two examples color samples

1178
01:02:23,289 --> 01:02:28,359
or samples with color depth and stencil

1179
01:02:26,699 --> 01:02:29,858
information whether messing up over

1180
01:02:28,358 --> 01:02:31,598
coverage samples includes with color

1181
01:02:29,858 --> 01:02:33,598
samples and additional samples that only

1182
01:02:31,599 --> 01:02:36,640
provide pixel coverage information

1183
01:02:33,599 --> 01:02:38,410
this extension follows the example of

1184
01:02:36,639 --> 01:02:41,440
the env framework for multi sample

1185
01:02:38,409 --> 01:02:42,879
covered extension which adds csa support

1186
01:02:41,440 --> 01:02:45,278
for frame buffer objects the base

1187
01:02:42,880 --> 01:02:46,749
description of model example rendering

1188
01:02:45,278 --> 01:02:48,730
is written in terms of coverage samples

1189
01:02:46,748 --> 01:02:51,969
and color samples the window system

1190
01:02:48,730 --> 01:02:54,099
ocean of samples is layered on top so

1191
01:02:51,969 --> 01:02:56,998
this is interesting and I have never

1192
01:02:54,099 --> 01:02:56,999
read this before

1193
01:03:29,340 --> 01:03:34,340
yeah this doesn't quite look like it

1194
01:03:32,070 --> 01:03:34,340
either

1195
01:03:40,889 --> 01:03:45,389
[Music]

1196
01:03:59,610 --> 01:04:05,470
we it's so close to being something we

1197
01:04:02,920 --> 01:04:09,400
can use and yet it keeps just slightly

1198
01:04:05,469 --> 01:04:12,399
evading us why can't we get that

1199
01:04:09,400 --> 01:04:15,280
information because it doesn't matter to

1200
01:04:12,400 --> 01:04:18,700
that part of the pipeline right like

1201
01:04:15,280 --> 01:04:21,010
there's absolutely no difference like

1202
01:04:18,699 --> 01:04:24,819
the part that invokes our fragment

1203
01:04:21,010 --> 01:04:30,370
shader absolutely does not need to know

1204
01:04:24,820 --> 01:04:33,910
that there is a backing store for the

1205
01:04:30,369 --> 01:04:37,900
samples right all it's doing is taking

1206
01:04:33,909 --> 01:04:40,420
and segment positions sixteen of them

1207
01:04:37,900 --> 01:04:42,490
actually and running the edge tests on

1208
01:04:40,420 --> 01:04:48,610
all sixteen and seeing which ones passed

1209
01:04:42,489 --> 01:04:50,829
that's all it's doing right and so we

1210
01:04:48,610 --> 01:04:56,320
just need that information which it

1211
01:04:50,829 --> 01:04:58,750
could have just done and if we can't get

1212
01:04:56,320 --> 01:05:01,059
access to that information we could do

1213
01:04:58,750 --> 01:05:04,530
it ourselves but man that's a lot more

1214
01:05:01,059 --> 01:05:07,599
work because now we have to pass that

1215
01:05:04,530 --> 01:05:10,330
transformed version of the edge

1216
01:05:07,599 --> 01:05:12,699
functions down into the rasterizing

1217
01:05:10,329 --> 01:05:14,529
stage so the fragment shader that has to

1218
01:05:12,699 --> 01:05:16,179
do that we have to do that in fact a

1219
01:05:14,530 --> 01:05:20,320
turret shader ourselves for those

1220
01:05:16,179 --> 01:05:21,789
sixteen samples it just seems like they

1221
01:05:20,320 --> 01:05:24,250
should be able to give that information

1222
01:05:21,789 --> 01:05:26,920
to us because they were gonna give it to

1223
01:05:24,250 --> 01:05:29,639
us if we would just attach that buffer

1224
01:05:26,920 --> 01:05:29,639
right

1225
01:05:34,079 --> 01:05:44,340
I mean the other thing that comes to

1226
01:05:41,460 --> 01:05:48,690
mind that just sounds absolutely bananas

1227
01:05:44,340 --> 01:05:50,940
is can you attach a multi sample and a

1228
01:05:48,690 --> 01:05:57,900
non multi sample render target at the

1229
01:05:50,940 --> 01:05:59,550
same time right because that would be

1230
01:05:57,900 --> 01:06:02,430
another way around this we would attach

1231
01:05:59,550 --> 01:06:07,800
a multi sample buffer literally for no

1232
01:06:02,429 --> 01:06:11,129
reason other than to force the shader to

1233
01:06:07,800 --> 01:06:13,800
tell us what the information was and

1234
01:06:11,130 --> 01:06:16,769
then we wouldn't bother to right hum to

1235
01:06:13,800 --> 01:06:18,480
the to the multi sample buffer right

1236
01:06:16,769 --> 01:06:22,309
that's another thing we could try

1237
01:06:18,480 --> 01:06:22,309
again it sounds absolutely ridiculous

1238
01:06:22,940 --> 01:06:26,750
very frustrated right now

1239
01:06:51,750 --> 01:06:56,800
so is there any way we're not looking is

1240
01:06:54,730 --> 01:07:00,300
there somewhere this could be that

1241
01:06:56,800 --> 01:07:06,400
actually is in there and we're just not

1242
01:07:00,300 --> 01:07:08,019
thinking it through right let's do one

1243
01:07:06,400 --> 01:07:10,559
more thing well you know what we could

1244
01:07:08,019 --> 01:07:12,579
also even do it here too

1245
01:07:10,559 --> 01:07:16,179
but well you know what I'm gonna do it

1246
01:07:12,579 --> 01:07:23,860
in here so if we go and we try to get

1247
01:07:16,179 --> 01:07:27,279
like a header file right like the gxh or

1248
01:07:23,860 --> 01:07:29,170
something like that right you know this

1249
01:07:27,280 --> 01:07:31,510
is a giant header file that in theory

1250
01:07:29,170 --> 01:07:35,500
just has like every possible extension

1251
01:07:31,510 --> 01:07:41,890
that you could possibly want in here as

1252
01:07:35,500 --> 01:07:43,360
of like 2018 right hopefully and so if I

1253
01:07:41,889 --> 01:07:46,150
was gonna search through here let me

1254
01:07:43,360 --> 01:07:51,880
just see if there's anything that sounds

1255
01:07:46,150 --> 01:07:56,829
like it might be relevant in terms of

1256
01:07:51,880 --> 01:07:58,690
things we might be able to enable we

1257
01:07:56,829 --> 01:08:02,679
know what that one was didn't really

1258
01:07:58,690 --> 01:08:05,159
help us those are the same versions just

1259
01:08:02,679 --> 01:08:05,159
ARB

1260
01:08:24,640 --> 01:08:29,780
again not really we there's it's gives

1261
01:08:28,130 --> 01:08:32,569
us a lot of opportunities for the other

1262
01:08:29,779 --> 01:08:34,340
direction so if for example we are in a

1263
01:08:32,569 --> 01:08:36,590
multi sampling mode and we want to take

1264
01:08:34,340 --> 01:08:41,930
our alpha value and translate the Alpha

1265
01:08:36,590 --> 01:08:55,930
value into a coverage against the sample

1266
01:08:41,930 --> 01:09:00,760
mask that's available but wait a second

1267
01:08:55,930 --> 01:09:05,320
that's sort of what we want right

1268
01:09:00,760 --> 01:09:05,320
fragment coverage to color

1269
01:09:11,640 --> 01:09:16,640
get that up in the in the hot seat there

1270
01:09:16,729 --> 01:09:20,149
let's keep on going

1271
01:09:24,868 --> 01:09:31,920
I'm not sure what a coverage modulation

1272
01:09:27,948 --> 01:09:33,689
table would be but this looks like some

1273
01:09:31,920 --> 01:09:39,719
way of monkeying with the samples

1274
01:09:33,689 --> 01:09:42,178
themselves I don't see much here that

1275
01:09:39,719 --> 01:09:44,250
looks like we probably care about it

1276
01:09:42,179 --> 01:09:46,730
though we could read about that just for

1277
01:09:44,250 --> 01:09:46,729
good measure

1278
01:09:53,270 --> 01:10:05,520
I'm interested in this since I can't

1279
01:09:56,429 --> 01:10:07,050
tell exactly what that's saying I am a

1280
01:10:05,520 --> 01:10:08,400
little bit interested to know what that

1281
01:10:07,050 --> 01:10:09,989
is so I want to get that one up there

1282
01:10:08,399 --> 01:10:12,210
too there might be something in there

1283
01:10:09,988 --> 01:10:16,698
that we actually care about I'm not 100%

1284
01:10:12,210 --> 01:10:16,698
sure so I'm gonna check it out

1285
01:10:27,000 --> 01:10:30,689
mm probably not

1286
01:10:45,439 --> 01:10:50,250
so this just looks like the standard

1287
01:10:48,239 --> 01:10:52,079
stuff we use I don't see anything in

1288
01:10:50,250 --> 01:10:53,819
here that's specific to this this is

1289
01:10:52,079 --> 01:11:00,449
just for when we create textures that

1290
01:10:53,819 --> 01:11:03,719
are multi sample textures so none of

1291
01:11:00,449 --> 01:11:15,349
that looks interesting so I will say

1292
01:11:03,720 --> 01:11:15,350
this this looks interesting

1293
01:11:19,130 --> 01:11:23,489
is it this one no it sorry it's this one

1294
01:11:21,750 --> 01:11:25,380
this one looks interesting I mean both

1295
01:11:23,489 --> 01:11:26,819
of them I want to read but this one

1296
01:11:25,380 --> 01:11:35,130
looks interesting I

1297
01:11:26,819 --> 01:11:36,359
it basically says like whatever the well

1298
01:11:35,130 --> 01:11:38,010
that isn't like that useful though

1299
01:11:36,359 --> 01:11:39,929
because the the kind of way they did it

1300
01:11:38,010 --> 01:11:42,030
looks a little bit different so it looks

1301
01:11:39,930 --> 01:11:46,340
like the fragment coverage won't come in

1302
01:11:42,029 --> 01:11:46,340
as part of the shader necessarily there

1303
01:11:52,909 --> 01:11:56,680
five Mikoto has enabled or disabled with

1304
01:11:55,250 --> 01:11:59,869
the generic attainable yep

1305
01:11:56,680 --> 01:12:02,300
what disabled skipped when abled the

1306
01:11:59,869 --> 01:12:04,789
coverage treated as an integer bit field

1307
01:12:02,300 --> 01:12:07,070
is substituted for the red component of

1308
01:12:04,789 --> 01:12:09,409
one of the fragment color values the

1309
01:12:07,069 --> 01:12:13,269
fragment color value updated with the

1310
01:12:09,409 --> 01:12:13,269
coverage mask is specified using this

1311
01:12:16,569 --> 01:12:25,130
that works right like it's kind of a

1312
01:12:22,069 --> 01:12:28,579
wonky thing but if we turned on

1313
01:12:25,130 --> 01:12:30,859
conservative rasterization and this that

1314
01:12:28,579 --> 01:12:32,479
would work that would do it and then we

1315
01:12:30,859 --> 01:12:35,799
wouldn't have to worry about multi

1316
01:12:32,479 --> 01:12:35,799
sampling at all anymore

1317
01:12:35,859 --> 01:12:38,859
right

1318
01:12:52,840 --> 01:12:58,409
but I'm just assuming this this looks

1319
01:12:54,729 --> 01:13:06,879
like some pre shader stuff right like

1320
01:12:58,409 --> 01:13:10,229
well no it's 2015 all right so I don't

1321
01:13:06,880 --> 01:13:13,359
know maybe I mean now let's take a look

1322
01:13:10,229 --> 01:13:15,599
at at whether that exists anywhere

1323
01:13:13,359 --> 01:13:15,599
really

1324
01:13:35,140 --> 01:13:39,740
so it kind of looks like basically these

1325
01:13:37,880 --> 01:13:45,909
Nvidia extensions just never got picked

1326
01:13:39,739 --> 01:13:45,909
up that's unfortunate

1327
01:13:58,159 --> 01:14:05,630
yeah I mean I'll double-check but just

1328
01:14:03,649 --> 01:14:07,789
looking grim here folks I'm is just

1329
01:14:05,630 --> 01:14:09,050
gonna be a sad episode I don't really

1330
01:14:07,789 --> 01:14:12,800
think there's much we can really do

1331
01:14:09,050 --> 01:14:15,350
about that it's really sad too because

1332
01:14:12,800 --> 01:14:17,060
basically like we don't need anything

1333
01:14:15,350 --> 01:14:20,630
other than just a little bit of

1334
01:14:17,060 --> 01:14:22,850
information would be sufficient but we

1335
01:14:20,630 --> 01:14:25,430
just don't get to have it unfortunately

1336
01:14:22,850 --> 01:14:27,170
and I'm not sure what to do about it

1337
01:14:25,430 --> 01:14:32,539
that it's not it doesn't like seem to be

1338
01:14:27,170 --> 01:14:34,819
much we could really do let's take a

1339
01:14:32,539 --> 01:14:37,300
look at this extension here post depth

1340
01:14:34,819 --> 01:14:37,299
coverage

1341
01:14:42,908 --> 01:14:49,269
I mean I guess another thing I I don't

1342
01:14:46,479 --> 01:14:51,759
really know is does GL sample masking

1343
01:14:49,270 --> 01:15:00,449
just maybe just work even if you don't

1344
01:14:51,760 --> 01:15:10,989
have multi sampling let's take a look

1345
01:15:00,448 --> 01:15:14,109
maybe there's some way to nudge it so it

1346
01:15:10,988 --> 01:15:16,178
says yeah unfortunately the the docs

1347
01:15:14,109 --> 01:15:18,309
just straight up right off the bats of

1348
01:15:16,179 --> 01:15:21,310
GL sample masking is a fragment language

1349
01:15:18,310 --> 01:15:22,480
that indicates this set of samples

1350
01:15:21,310 --> 01:15:24,039
covered by the primitive generated

1351
01:15:22,479 --> 01:15:26,229
fragment during multi sample

1352
01:15:24,039 --> 01:15:28,630
rasterization which suggests to me that

1353
01:15:26,229 --> 01:15:31,119
if we're not doing multi sample or

1354
01:15:28,630 --> 01:15:33,699
asteroids asian well we probably just

1355
01:15:31,119 --> 01:15:34,929
don't get a value as a sample bit said

1356
01:15:33,698 --> 01:15:37,839
if and only if the samples considered

1357
01:15:34,929 --> 01:15:40,869
covered for this fragment the array has

1358
01:15:37,840 --> 01:15:42,360
seal s over 32 elements where s is the

1359
01:15:40,869 --> 01:15:46,559
maximum number of color samples

1360
01:15:42,359 --> 01:15:46,559
supported by the implementation

1361
01:16:00,670 --> 01:16:03,670
yeah

1362
01:16:27,248 --> 01:16:31,469
so I I don't know man

1363
01:16:36,380 --> 01:16:41,960
this by the way is what we're doing

1364
01:16:39,340 --> 01:16:50,289
someone else on stackoverflow already

1365
01:16:41,960 --> 01:16:53,329
had to do it apparently right so

1366
01:16:50,289 --> 01:16:54,859
unfortunately again like this is

1367
01:16:53,329 --> 01:16:57,710
assuming that they're actually want to

1368
01:16:54,859 --> 01:17:02,509
use MSA which the entire point here is

1369
01:16:57,710 --> 01:17:08,930
we don't write we don't actually want to

1370
01:17:02,510 --> 01:17:10,610
do this because we don't need it

1371
01:17:08,930 --> 01:17:12,650
once you have order independent

1372
01:17:10,609 --> 01:17:16,069
transparency you don't need MSA

1373
01:17:12,649 --> 01:17:18,019
you just need the thing to do a

1374
01:17:16,069 --> 01:17:20,569
conservative rasterization pass this is

1375
01:17:18,020 --> 01:17:22,220
really disheartening to me because this

1376
01:17:20,569 --> 01:17:25,549
is clearly the right way to do it and I

1377
01:17:22,220 --> 01:17:29,000
think the GPU could just do it but

1378
01:17:25,550 --> 01:17:32,390
unfortunately it won't and that's always

1379
01:17:29,000 --> 01:17:33,529
what's so frustrating about GPUs you

1380
01:17:32,390 --> 01:17:34,880
know I don't even think the chip

1381
01:17:33,529 --> 01:17:38,050
probably would have a trouble doing what

1382
01:17:34,880 --> 01:17:40,460
I'm saying it's just you can't get at it

1383
01:17:38,050 --> 01:17:51,140
and so as a result that doesn't actually

1384
01:17:40,460 --> 01:17:54,409
help you right well that was a colossal

1385
01:17:51,140 --> 01:18:02,350
waste of all of our times so I guess I'm

1386
01:17:54,409 --> 01:18:07,369
gonna go ahead and say that I'm gonna

1387
01:18:02,350 --> 01:18:13,460
have to make a friend at Nvidia and be

1388
01:18:07,369 --> 01:18:16,309
like hey man why can't we have this is

1389
01:18:13,460 --> 01:18:20,020
there a reason we don't have this why

1390
01:18:16,310 --> 01:18:23,030
can't we have a handmade hero extension

1391
01:18:20,020 --> 01:18:25,730
that's just like when you turn on

1392
01:18:23,029 --> 01:18:28,670
conservative rasterization you can say

1393
01:18:25,729 --> 01:18:31,429
to set the sample mask to like whatever

1394
01:18:28,670 --> 01:18:34,430
the number of samples you want like look

1395
01:18:31,430 --> 01:18:36,170
just pretend there are 16 samples I

1396
01:18:34,430 --> 01:18:37,850
don't care that there aren't just

1397
01:18:36,170 --> 01:18:40,840
pretend there are you know like what

1398
01:18:37,850 --> 01:18:40,840
what's it to you man

1399
01:18:44,409 --> 01:18:53,139
that seems like the most sane thing to

1400
01:18:47,510 --> 01:18:56,000
do because I don't know what else to do

1401
01:18:53,140 --> 01:18:58,520
but really there's no reason for our

1402
01:18:56,000 --> 01:19:00,920
code to be doing stuff as crazy as it's

1403
01:18:58,520 --> 01:19:04,160
doing it really just does not need that

1404
01:19:00,920 --> 01:19:05,960
even a little bit I should

1405
01:19:04,159 --> 01:19:08,619
well the render buffers for ad they're

1406
01:19:05,960 --> 01:19:08,619
not gonna help us

1407
01:19:09,109 --> 01:19:13,099
so really we should spend the rest of

1408
01:19:10,789 --> 01:19:16,760
this handmade hero like rendering us

1409
01:19:13,100 --> 01:19:20,539
frowny face because I'm pretty sure that

1410
01:19:16,760 --> 01:19:23,989
we're just totally hung out to dry by

1411
01:19:20,539 --> 01:19:26,899
our GPU friends here I don't see any way

1412
01:19:23,989 --> 01:19:30,079
to do the obvious thing that would be

1413
01:19:26,899 --> 01:19:33,529
fast here and unless I'm just not

1414
01:19:30,079 --> 01:19:36,979
thinking of how to trick the graphics

1415
01:19:33,529 --> 01:19:40,429
card into doing what we needed to do it

1416
01:19:36,979 --> 01:19:42,949
just there's no way around this we're

1417
01:19:40,430 --> 01:19:44,510
forced to spend a tremendous amount of

1418
01:19:42,949 --> 01:19:48,380
memory and bam for absolutely no reason

1419
01:19:44,510 --> 01:19:51,970
just to smooth out these lines when our

1420
01:19:48,380 --> 01:19:51,970
def PA would have just worked

1421
01:20:11,609 --> 01:20:15,460
all right

1422
01:20:13,029 --> 01:20:19,630
so is there anything else is there

1423
01:20:15,460 --> 01:20:26,319
anything I'm not thinking of I don't

1424
01:20:19,630 --> 01:20:29,409
think so um so yeah I guess that's all

1425
01:20:26,319 --> 01:20:32,099
pretty sad so let's do one more thing

1426
01:20:29,408 --> 01:20:36,939
while we're here

1427
01:20:32,099 --> 01:20:40,210
wallowing in sadness um one of the thing

1428
01:20:36,939 --> 01:20:42,189
I did want to do that's you know and I

1429
01:20:40,210 --> 01:20:43,630
guess I you know I shouldn't maybe be so

1430
01:20:42,189 --> 01:20:45,779
disheartened because you know now I

1431
01:20:43,630 --> 01:20:50,079
think about it you know maybe there is

1432
01:20:45,779 --> 01:20:52,840
one kind of less good case there which

1433
01:20:50,079 --> 01:20:59,189
is that the triangles that form like the

1434
01:20:52,840 --> 01:21:01,810
quad in question they're like you know

1435
01:20:59,189 --> 01:21:04,658
where the two triangles touch if you

1436
01:21:01,810 --> 01:21:06,070
don't use a multi sample buffer then how

1437
01:21:04,658 --> 01:21:10,000
would you know that those two triangles

1438
01:21:06,069 --> 01:21:15,819
are actually like coplanar and shouldn't

1439
01:21:10,000 --> 01:21:18,698
have like a seam so you know like I can

1440
01:21:15,819 --> 01:21:22,630
sort of see why you might care about

1441
01:21:18,698 --> 01:21:24,368
that part of it at the same time it does

1442
01:21:22,630 --> 01:21:26,289
kind of seem to me like that's really

1443
01:21:24,368 --> 01:21:27,819
not that big of a deal for us to fix

1444
01:21:26,289 --> 01:21:32,139
because we know that they're always

1445
01:21:27,819 --> 01:21:34,658
coplanar at that point so like hey man

1446
01:21:32,139 --> 01:21:36,670
for optimization purposes I still think

1447
01:21:34,658 --> 01:21:42,009
we could have done a much better job

1448
01:21:36,670 --> 01:21:44,469
there but anyway since I'm sad and I

1449
01:21:42,010 --> 01:21:47,949
don't care anymore I do want to do one

1450
01:21:44,469 --> 01:21:50,139
more thing which would be to say that

1451
01:21:47,948 --> 01:21:52,299
when you look at how our death peel is

1452
01:21:50,139 --> 01:21:54,039
working currently one thing that's not

1453
01:21:52,300 --> 01:21:55,659
particularly good is if you look at the

1454
01:21:54,039 --> 01:21:57,460
difference between these color passes

1455
01:21:55,658 --> 01:21:59,198
what you can see is that we are doing

1456
01:21:57,460 --> 01:22:01,210
one thing that's fairly smart right

1457
01:21:59,198 --> 01:22:06,399
which is that we're doing our color

1458
01:22:01,210 --> 01:22:09,368
passes in the order in which they would

1459
01:22:06,399 --> 01:22:12,009
be seen by the viewer so color pass

1460
01:22:09,368 --> 01:22:14,829
number one is the things that are

1461
01:22:12,010 --> 01:22:16,810
closest to us color paths number two are

1462
01:22:14,829 --> 01:22:19,118
the things that are behind those things

1463
01:22:16,810 --> 01:22:21,639
Clark Pass number three is the things

1464
01:22:19,118 --> 01:22:26,139
behind those things and color pass for

1465
01:22:21,639 --> 01:22:30,368
and so on right and so the only thing

1466
01:22:26,139 --> 01:22:35,079
that I think we might want to change

1467
01:22:30,368 --> 01:22:37,029
about this is if you think about what's

1468
01:22:35,079 --> 01:22:39,429
going to happen as we add lighting in

1469
01:22:37,029 --> 01:22:41,229
here when you look at this and you think

1470
01:22:39,429 --> 01:22:43,359
about how many lighting calculations are

1471
01:22:41,229 --> 01:22:45,279
going to occur well they're going to

1472
01:22:43,359 --> 01:22:46,988
occur for every pixel in the entire

1473
01:22:45,279 --> 01:22:49,149
buffer which may be fine

1474
01:22:46,988 --> 01:22:51,250
maybe we subsample it who knows but

1475
01:22:49,149 --> 01:22:52,839
point being something happens here and

1476
01:22:51,250 --> 01:22:56,109
those lighting calculations are

1477
01:22:52,840 --> 01:22:58,480
expensive if we then go to this next one

1478
01:22:56,109 --> 01:23:01,210
here then what we would find is that

1479
01:22:58,479 --> 01:23:03,819
actually a bunch of these things can't

1480
01:23:01,210 --> 01:23:06,210
be seen so if you look here right like a

1481
01:23:03,819 --> 01:23:08,859
lot of the stuff that we depth peel away

1482
01:23:06,210 --> 01:23:11,020
can't actually be seen and when we buy

1483
01:23:08,859 --> 01:23:13,389
the time we get to here we just most of

1484
01:23:11,020 --> 01:23:15,580
it can't be seen right there are things

1485
01:23:13,389 --> 01:23:18,039
that are just like too far behind other

1486
01:23:15,579 --> 01:23:21,760
objects and finally get the things that

1487
01:23:18,039 --> 01:23:23,800
probably aren't seen at all so the thing

1488
01:23:21,760 --> 01:23:25,510
that's that's not good about that is

1489
01:23:23,800 --> 01:23:27,520
that once we start to increase the

1490
01:23:25,510 --> 01:23:29,469
pressure on the pixel shading by

1491
01:23:27,520 --> 01:23:31,780
including all these complicated lighting

1492
01:23:29,469 --> 01:23:35,289
calculations we're going to start to

1493
01:23:31,779 --> 01:23:37,000
tank our frame rate by 4x because what's

1494
01:23:35,289 --> 01:23:38,590
happening is we draw the entire screen

1495
01:23:37,000 --> 01:23:40,179
and spend a ton of time lighting it and

1496
01:23:38,590 --> 01:23:41,560
then we draw the entire screen again

1497
01:23:40,179 --> 01:23:44,199
it's been a ton of time lighting that

1498
01:23:41,560 --> 01:23:47,260
right and that means that we're gonna

1499
01:23:44,198 --> 01:23:49,479
spend four times as much as much GPU

1500
01:23:47,260 --> 01:23:51,670
resources lighting our scene than we

1501
01:23:49,479 --> 01:23:53,709
actually needed to because we only

1502
01:23:51,670 --> 01:23:55,779
probably needed to light the things that

1503
01:23:53,710 --> 01:23:57,819
are closest to you and maybe one thing

1504
01:23:55,779 --> 01:23:59,948
behind that but oftentimes not even that

1505
01:23:57,819 --> 01:24:01,809
for many pixels in the scene because

1506
01:23:59,948 --> 01:24:06,488
most of the pixels of scene are a pig

1507
01:24:01,810 --> 01:24:09,369
right so one thing we might want to do

1508
01:24:06,488 --> 01:24:12,189
is augment our actual color past shader

1509
01:24:09,368 --> 01:24:14,738
such that when you actually go to draw

1510
01:24:12,189 --> 01:24:16,719
something you only draw something if the

1511
01:24:14,738 --> 01:24:20,019
previous pass didn't have something

1512
01:24:16,719 --> 01:24:23,158
opaque in that slot in other words the

1513
01:24:20,020 --> 01:24:27,070
alpha value that's actually in the slot

1514
01:24:23,158 --> 01:24:29,049
when you actually get there if the alpha

1515
01:24:27,069 --> 01:24:31,090
value that's in the slot that you would

1516
01:24:29,050 --> 01:24:32,989
need so you know I draw the first pass

1517
01:24:31,090 --> 01:24:34,909
and I've got a particular pixel

1518
01:24:32,988 --> 01:24:37,879
I know what the both the depth value and

1519
01:24:34,909 --> 01:24:40,639
the alpha value are for that pixel when

1520
01:24:37,880 --> 01:24:43,640
I go to render the thing behind it if

1521
01:24:40,640 --> 01:24:46,640
the alpha value was opaque I don't want

1522
01:24:43,640 --> 01:24:49,789
to render this thing at all right

1523
01:24:46,640 --> 01:24:54,469
that's just fundamentally not what we

1524
01:24:49,789 --> 01:24:57,229
want now in order to do that literally

1525
01:24:54,469 --> 01:25:00,859
as I just said it we would have to read

1526
01:24:57,229 --> 01:25:03,409
from the color buffer as well as the

1527
01:25:00,859 --> 01:25:06,229
depth buffer because the thing I just

1528
01:25:03,409 --> 01:25:08,899
said was we need to see if the alpha

1529
01:25:06,229 --> 01:25:11,299
value is opaque but at the moment we're

1530
01:25:08,899 --> 01:25:13,759
only reading from the depth buffer so

1531
01:25:11,300 --> 01:25:16,310
one thing we could do is start reading

1532
01:25:13,760 --> 01:25:19,070
from two buffers at the same time when

1533
01:25:16,310 --> 01:25:21,380
we do that render pass we read from the

1534
01:25:19,069 --> 01:25:23,809
depth buffer and the Alpha buffer and we

1535
01:25:21,380 --> 01:25:27,319
see if both of them are what we need

1536
01:25:23,810 --> 01:25:29,150
them to be but with a little observation

1537
01:25:27,319 --> 01:25:31,189
I think we could easily figure out a way

1538
01:25:29,149 --> 01:25:33,559
of not having to do that but getting the

1539
01:25:31,189 --> 01:25:36,199
effects as if we did and what I think we

1540
01:25:33,560 --> 01:25:39,080
could do is say look we know that what a

1541
01:25:36,199 --> 01:25:40,969
depth field does is on a depth peel

1542
01:25:39,079 --> 01:25:43,279
reads from the depth buffer from the

1543
01:25:40,969 --> 01:25:45,739
previous pass and it says I'm only gonna

1544
01:25:43,279 --> 01:25:47,569
render things that are further away from

1545
01:25:45,738 --> 01:25:49,459
the viewer than what's in the depth

1546
01:25:47,569 --> 01:25:52,069
buffer for the previous pass there by

1547
01:25:49,460 --> 01:25:53,630
peeling away the scene one layer at a

1548
01:25:52,069 --> 01:25:58,460
time that's why it's called death

1549
01:25:53,630 --> 01:26:00,590
peeling that's what it does so what that

1550
01:25:58,460 --> 01:26:03,710
means is that for any particular

1551
01:26:00,590 --> 01:26:06,829
location on the screen I can prevent

1552
01:26:03,710 --> 01:26:09,980
anyone from drawing on any pass to that

1553
01:26:06,829 --> 01:26:12,710
location by simply putting a value in

1554
01:26:09,979 --> 01:26:14,899
the depth buffer that is further away

1555
01:26:12,710 --> 01:26:16,909
from the camera than anything else could

1556
01:26:14,899 --> 01:26:19,488
possibly be which is basically the

1557
01:26:16,909 --> 01:26:20,988
highest possible depth value or lowest

1558
01:26:19,488 --> 01:26:22,189
possible depth value depending on when

1559
01:26:20,988 --> 01:26:24,139
you whether you want to think about

1560
01:26:22,189 --> 01:26:25,669
things is getting higher as they go

1561
01:26:24,140 --> 01:26:27,530
further away or lowers they get further

1562
01:26:25,670 --> 01:26:28,969
away right but either whatever way you

1563
01:26:27,529 --> 01:26:29,988
think of it whatever the one that

1564
01:26:28,969 --> 01:26:32,630
represents things for this from the

1565
01:26:29,988 --> 01:26:34,819
camera stick that value in nothing will

1566
01:26:32,630 --> 01:26:37,180
ever compare favorably to that and so

1567
01:26:34,819 --> 01:26:40,009
nothing will get drawn from then on

1568
01:26:37,180 --> 01:26:43,730
right and that's an if statement we can

1569
01:26:40,010 --> 01:26:46,520
do around the entire shader nothing at

1570
01:26:43,729 --> 01:26:48,829
all needs to execute if that

1571
01:26:46,520 --> 01:26:51,950
doesn't pass and so what we could do is

1572
01:26:48,829 --> 01:26:54,649
save all of that potentially expensive

1573
01:26:51,949 --> 01:26:56,989
lending calculations only for regions of

1574
01:26:54,649 --> 01:26:58,519
the screen that actually have a 4 by 4

1575
01:26:56,989 --> 01:26:59,989
block that are actually going through

1576
01:26:58,520 --> 01:27:02,990
that because remember the if statement

1577
01:26:59,989 --> 01:27:05,420
doesn't save us any time if we don't

1578
01:27:02,989 --> 01:27:07,369
actually get all of the pixels in a

1579
01:27:05,420 --> 01:27:10,220
little chunk to go through that same

1580
01:27:07,369 --> 01:27:16,340
route of the if because much like we did

1581
01:27:10,220 --> 01:27:19,369
in our actually no we didn't did we used

1582
01:27:16,340 --> 01:27:21,680
RGB I think so nevermind but point being

1583
01:27:19,369 --> 01:27:25,640
they work on sets of say 16 pixels at a

1584
01:27:21,680 --> 01:27:28,820
time sometimes more and so if all 16

1585
01:27:25,640 --> 01:27:30,770
pixels don't go through the same path on

1586
01:27:28,819 --> 01:27:34,429
it if you don't really save any time but

1587
01:27:30,770 --> 01:27:34,970
for our case because oftentimes they

1588
01:27:34,430 --> 01:27:36,680
will

1589
01:27:34,970 --> 01:27:38,780
I think we'd save against the whole

1590
01:27:36,680 --> 01:27:40,490
amount of time now unfortunately like I

1591
01:27:38,779 --> 01:27:42,079
said we're saving time in this place

1592
01:27:40,489 --> 01:27:44,090
here that we don't really care about as

1593
01:27:42,079 --> 01:27:45,380
much but I think it's worth doing that

1594
01:27:44,090 --> 01:27:48,500
anyway because even though these numbers

1595
01:27:45,380 --> 01:27:51,319
aren't high they're about to get high as

1596
01:27:48,500 --> 01:27:53,539
we as we start to increase the amount of

1597
01:27:51,319 --> 01:27:55,460
work the shader has to do to do that

1598
01:27:53,539 --> 01:27:56,890
lighting so if we wanted to do that

1599
01:27:55,460 --> 01:27:59,779
again I think it's a pretty easy

1600
01:27:56,890 --> 01:28:01,789
modification now we're in GPU land so

1601
01:27:59,779 --> 01:28:03,769
there are no real easy modifications

1602
01:28:01,789 --> 01:28:06,470
it's always more complicated than it

1603
01:28:03,770 --> 01:28:08,960
needs to be but it's at least one of the

1604
01:28:06,470 --> 01:28:11,480
simpler of the hard modifications that

1605
01:28:08,960 --> 01:28:15,739
you might want to make so if I pop over

1606
01:28:11,479 --> 01:28:18,049
to our OpenGL obsess the wrong one open

1607
01:28:15,739 --> 01:28:20,149
jail code here what I'm gonna want to do

1608
01:28:18,050 --> 01:28:26,329
is I want to go ahead and look at our Z

1609
01:28:20,149 --> 01:28:30,829
bias program and that's not the one I

1610
01:28:26,329 --> 01:28:32,500
want alright so here in the Z bias

1611
01:28:30,829 --> 01:28:35,930
program where I'm doing this compilation

1612
01:28:32,500 --> 01:28:37,699
what you can see here is when I go

1613
01:28:35,930 --> 01:28:40,520
through this particular section of the

1614
01:28:37,699 --> 01:28:42,380
code the fragment shader which is the

1615
01:28:40,520 --> 01:28:43,760
bottom one here which has the letting

1616
01:28:42,380 --> 01:28:46,390
disabled at the moment because we

1617
01:28:43,760 --> 01:28:49,489
haven't put in the full new lighting

1618
01:28:46,390 --> 01:28:53,270
what we're going to do is when we enter

1619
01:28:49,489 --> 01:28:56,149
the main program if it was a depth peel

1620
01:28:53,270 --> 01:28:59,630
you can see us doing a discard right

1621
01:28:56,149 --> 01:29:00,229
away and that discard operation will

1622
01:28:59,630 --> 01:29:02,090
prevent

1623
01:29:00,229 --> 01:29:04,009
anything else from occurring for the

1624
01:29:02,090 --> 01:29:07,159
remainder of the shader what that means

1625
01:29:04,010 --> 01:29:09,199
is that I can pretty simply just add to

1626
01:29:07,159 --> 01:29:11,779
this structure here anything that I

1627
01:29:09,199 --> 01:29:14,119
might need to do as long as I end up in

1628
01:29:11,779 --> 01:29:17,529
this discard path I won't pay any more

1629
01:29:14,119 --> 01:29:20,119
cost if if all of the pixels in a warp

1630
01:29:17,529 --> 01:29:23,750
happen to go through that that same path

1631
01:29:20,119 --> 01:29:26,359
right so you can see here we've got a GL

1632
01:29:23,750 --> 01:29:27,920
frag cord Z and a clip depth the clip

1633
01:29:26,359 --> 01:29:30,349
depth is the value that we're reading

1634
01:29:27,920 --> 01:29:32,539
out of the depth sampler which is the

1635
01:29:30,350 --> 01:29:35,750
previous frame that's why the first

1636
01:29:32,539 --> 01:29:38,539
frame the previous the previous peel on

1637
01:29:35,750 --> 01:29:41,630
this frame what that means is that if we

1638
01:29:38,539 --> 01:29:44,269
set this clip value to something so here

1639
01:29:41,630 --> 01:29:46,819
we got this GL frag cord Z right and

1640
01:29:44,270 --> 01:29:50,000
we're checking to see if it's less than

1641
01:29:46,819 --> 01:29:52,519
the clip depth right if it's less than

1642
01:29:50,000 --> 01:29:54,229
the clip def it will Dakar discard what

1643
01:29:52,520 --> 01:29:57,230
that means is that if we just set the

1644
01:29:54,229 --> 01:30:00,349
clipped up clip depth to basically like

1645
01:29:57,229 --> 01:30:03,309
the far clip plane right as far away as

1646
01:30:00,350 --> 01:30:09,500
a capacity B we will discard everything

1647
01:30:03,310 --> 01:30:11,570
right so all we really need to do is in

1648
01:30:09,500 --> 01:30:13,399
here where we're going to write to the

1649
01:30:11,569 --> 01:30:15,349
depth buffer and don't ask me what that

1650
01:30:13,399 --> 01:30:18,199
else discard is there I guess it's

1651
01:30:15,350 --> 01:30:19,700
probably for the Alpha huh yeah

1652
01:30:18,199 --> 01:30:21,319
you can see here we've got an alpha

1653
01:30:19,699 --> 01:30:24,859
threshold where we just throw things

1654
01:30:21,319 --> 01:30:26,599
away if they're too low so the alpha

1655
01:30:24,859 --> 01:30:28,880
threshold that we come up with we then

1656
01:30:26,600 --> 01:30:31,730
would discard here we basically just

1657
01:30:28,880 --> 01:30:33,619
need a similar one of these that will

1658
01:30:31,729 --> 01:30:36,109
replace the depth value with something

1659
01:30:33,619 --> 01:30:40,340
high in the case where the alpha value

1660
01:30:36,109 --> 01:30:41,839
is really like very very solid right so

1661
01:30:40,340 --> 01:30:45,619
we here we would just need something

1662
01:30:41,840 --> 01:30:48,890
like look if blend unit color a equals

1663
01:30:45,619 --> 01:30:52,029
one right so it's basically the highest

1664
01:30:48,890 --> 01:30:57,730
possible one there is no transparency

1665
01:30:52,029 --> 01:31:00,920
whatsoever if we want to just specify a

1666
01:30:57,729 --> 01:31:03,259
fully opaque pixel at this point then

1667
01:31:00,920 --> 01:31:05,210
all we would have to do is basically say

1668
01:31:03,260 --> 01:31:06,980
like whatever we write to the depth

1669
01:31:05,210 --> 01:31:08,600
buffer here which I believe is a

1670
01:31:06,979 --> 01:31:11,179
constant we can just set it I'm not a

1671
01:31:08,600 --> 01:31:12,530
constant a pre named variable I believe

1672
01:31:11,180 --> 01:31:14,550
we can set in open jail

1673
01:31:12,529 --> 01:31:16,829
whatever we want to write to the depth

1674
01:31:14,550 --> 01:31:18,930
buffer here we just need to make sure

1675
01:31:16,829 --> 01:31:21,989
that it's very very high right so

1676
01:31:18,930 --> 01:31:24,510
something that that would exceed pretty

1677
01:31:21,989 --> 01:31:28,380
much all of our anything that you would

1678
01:31:24,510 --> 01:31:30,360
ever want to write to write so for

1679
01:31:28,380 --> 01:31:32,579
example if we look at our fogging here

1680
01:31:30,359 --> 01:31:34,319
right we got our fog distance our clip

1681
01:31:32,579 --> 01:31:37,279
distance all this stuff we actually

1682
01:31:34,319 --> 01:31:40,289
already have a bunch of information here

1683
01:31:37,279 --> 01:31:43,079
like our fog and distance that says

1684
01:31:40,289 --> 01:31:45,720
where the fog cuts out for example right

1685
01:31:43,079 --> 01:31:48,090
so we kind of already know what this

1686
01:31:45,720 --> 01:31:49,710
stuff is and in theory we may also I

1687
01:31:48,090 --> 01:31:52,470
don't know if we get access to the far

1688
01:31:49,710 --> 01:31:55,170
clip plane but we can actually just pass

1689
01:31:52,470 --> 01:31:57,990
down an f32 here if we want to however

1690
01:31:55,170 --> 01:32:00,359
in this case I may say we just won't

1691
01:31:57,989 --> 01:32:02,579
bother like maybe we just set this to

1692
01:32:00,359 --> 01:32:05,489
some very high value and call it a day

1693
01:32:02,579 --> 01:32:07,109
now when we do a right death buffer here

1694
01:32:05,489 --> 01:32:09,210
that's some nonsense I mean up we

1695
01:32:07,109 --> 01:32:12,679
actually need to go look up what the

1696
01:32:09,210 --> 01:32:17,159
GLSL output name is for the depth buffer

1697
01:32:12,680 --> 01:32:20,220
so forth and in fact actually though we

1698
01:32:17,159 --> 01:32:23,609
already know that actually right it's in

1699
01:32:20,220 --> 01:32:25,829
here isn't it don't we output to the

1700
01:32:23,609 --> 01:32:27,920
depth buffer maybe now no we don't we

1701
01:32:25,829 --> 01:32:30,840
only because we don't need to keep it

1702
01:32:27,920 --> 01:32:32,609
well no in the multi sample resolve we

1703
01:32:30,840 --> 01:32:34,020
would though right so in theory we

1704
01:32:32,609 --> 01:32:35,699
should have already had to have looked

1705
01:32:34,020 --> 01:32:38,970
up what the heck you call it in the

1706
01:32:35,699 --> 01:32:43,199
OpenGL Naumann clay Chur so when we do

1707
01:32:38,970 --> 01:32:52,289
the resolve and here it should do it

1708
01:32:43,199 --> 01:32:54,319
right so that right that's it right

1709
01:32:52,289 --> 01:32:54,319
there

1710
01:32:56,430 --> 01:33:00,190
yeah

1711
01:32:57,699 --> 01:33:02,319
so if we then go back to our compile Z

1712
01:33:00,189 --> 01:33:06,159
bias program in here if I basically just

1713
01:33:02,319 --> 01:33:10,779
say alright when we are going to come to

1714
01:33:06,159 --> 01:33:14,289
me when we are going to write an opaque

1715
01:33:10,779 --> 01:33:20,259
pixel we also then tell the wheel I

1716
01:33:14,289 --> 01:33:23,319
basically and say look pixel shader men

1717
01:33:20,260 --> 01:33:26,260
this is like this super far away value

1718
01:33:23,319 --> 01:33:29,109
that we're going to put in here right we

1719
01:33:26,260 --> 01:33:31,030
could do that um the problem with this

1720
01:33:29,109 --> 01:33:32,979
approach and why we'll have to do

1721
01:33:31,029 --> 01:33:36,579
something once that clever more clever

1722
01:33:32,979 --> 01:33:38,799
here right is that if I were to do it

1723
01:33:36,579 --> 01:33:40,119
here the problem we would have is our

1724
01:33:38,800 --> 01:33:42,190
depth sorting wouldn't work anymore

1725
01:33:40,119 --> 01:33:45,250
because we're relying on that GL frog

1726
01:33:42,189 --> 01:33:48,609
depth to be written properly in order to

1727
01:33:45,250 --> 01:33:52,449
make our depth sort work for this peel

1728
01:33:48,609 --> 01:33:55,389
itself so I can't really do exactly that

1729
01:33:52,449 --> 01:33:57,369
but luckily for me since we're already

1730
01:33:55,390 --> 01:33:59,260
going through a multi sample resolve and

1731
01:33:57,369 --> 01:34:01,149
of course we have to go through a multi

1732
01:33:59,260 --> 01:34:03,070
sample resolve because as it turns out

1733
01:34:01,149 --> 01:34:04,989
there doesn't seem to be any way to turn

1734
01:34:03,069 --> 01:34:06,250
that off and still get smooth edges even

1735
01:34:04,989 --> 01:34:07,809
though I feel like we should have been

1736
01:34:06,250 --> 01:34:12,659
able to do that and that was very sad

1737
01:34:07,810 --> 01:34:16,270
earlier inside the multi sample result

1738
01:34:12,659 --> 01:34:19,420
we are done computing the fragment

1739
01:34:16,270 --> 01:34:21,670
depths right this is the final fragment

1740
01:34:19,420 --> 01:34:23,680
depth that we're actually going to use

1741
01:34:21,670 --> 01:34:26,409
and the final blend unit color we're

1742
01:34:23,680 --> 01:34:28,390
actually going to use for that depth

1743
01:34:26,409 --> 01:34:31,119
peel which means that after we do

1744
01:34:28,390 --> 01:34:33,760
whatever the heck actual stuff were is

1745
01:34:31,119 --> 01:34:36,159
we're going to do right and we go down

1746
01:34:33,760 --> 01:34:41,560
to the end of the shader I can't at that

1747
01:34:36,159 --> 01:34:43,449
time doing here right so if that blend

1748
01:34:41,560 --> 01:34:48,340
unit color the value that we're actually

1749
01:34:43,449 --> 01:34:51,279
writing out there is going to be a fully

1750
01:34:48,340 --> 01:34:54,340
opaque then I can just set the GL frag

1751
01:34:51,279 --> 01:35:00,849
depth to be something incredibly large

1752
01:34:54,340 --> 01:35:02,409
and that's the end of the game right so

1753
01:35:00,850 --> 01:35:05,829
I think that should be all we really

1754
01:35:02,409 --> 01:35:08,289
have to do the only thing I'm not 100%

1755
01:35:05,829 --> 01:35:12,130
sure about there is she

1756
01:35:08,289 --> 01:35:13,930
frog depth is you know probably ranges

1757
01:35:12,130 --> 01:35:16,600
from negative one to one would have been

1758
01:35:13,930 --> 01:35:18,850
my guess so I'm thinking that really the

1759
01:35:16,600 --> 01:35:21,970
maximum value wouldn't have to be in

1760
01:35:18,850 --> 01:35:25,180
world space it would probably only have

1761
01:35:21,970 --> 01:35:28,090
to be in fragments in you know clip

1762
01:35:25,180 --> 01:35:29,770
space so I'm thinking that probably 1.0

1763
01:35:28,090 --> 01:35:31,750
is a high enough value because that

1764
01:35:29,770 --> 01:35:35,620
would be the maximum that you would ever

1765
01:35:31,750 --> 01:35:37,600
hit right but I don't actually know

1766
01:35:35,619 --> 01:35:39,220
right like I don't remember how we set

1767
01:35:37,600 --> 01:35:41,530
this up that's one of the problems of

1768
01:35:39,220 --> 01:35:44,590
handmade hero being such little chunks

1769
01:35:41,529 --> 01:35:46,929
over so long is my brain doesn't really

1770
01:35:44,590 --> 01:35:49,329
keep track of what we did you know six

1771
01:35:46,930 --> 01:35:52,030
months ago or something right and it has

1772
01:35:49,329 --> 01:35:55,630
to page it back in which is annoying but

1773
01:35:52,029 --> 01:35:57,819
point being it's some value who knows

1774
01:35:55,630 --> 01:36:00,310
that we set it up it's a floating point

1775
01:35:57,819 --> 01:36:02,529
depth buffer I assume the values would

1776
01:36:00,310 --> 01:36:06,280
be between negative one and one that may

1777
01:36:02,529 --> 01:36:10,659
be erroneous assumption I don't know I'm

1778
01:36:06,279 --> 01:36:13,960
not a GPU guy it's not my job anyway um

1779
01:36:10,659 --> 01:36:16,180
so I'm gonna see what happens in that

1780
01:36:13,960 --> 01:36:19,079
circumstance right can I basically blot

1781
01:36:16,180 --> 01:36:21,700
out those pieces and stop having to

1782
01:36:19,079 --> 01:36:23,229
spend time on things that really

1783
01:36:21,699 --> 01:36:25,569
probably shouldn't have had time spent

1784
01:36:23,229 --> 01:36:27,489
on them right so if I go ahead and

1785
01:36:25,569 --> 01:36:29,769
launch I'm not gonna save the capture

1786
01:36:27,489 --> 01:36:31,119
for any particular purpose if I go ahead

1787
01:36:29,770 --> 01:36:32,890
and launch here

1788
01:36:31,119 --> 01:36:35,559
you know the game stills rendering okay

1789
01:36:32,890 --> 01:36:37,900
so we can't have broken anything to

1790
01:36:35,560 --> 01:36:40,000
catastrophic aliy and we could say also

1791
01:36:37,899 --> 01:36:41,199
see whether or not the depth sorting is

1792
01:36:40,000 --> 01:36:42,699
working you know I mean it probably is

1793
01:36:41,199 --> 01:36:44,439
cuz everything appears to be deb sorted

1794
01:36:42,699 --> 01:36:45,760
properly so we again I don't think we

1795
01:36:44,439 --> 01:36:48,119
could probably have broken anything too

1796
01:36:45,760 --> 01:36:50,829
badly and the Alpha is working there too

1797
01:36:48,119 --> 01:36:52,960
so let's suppose we hopped up on here

1798
01:36:50,829 --> 01:36:55,059
and then took one of those captures and

1799
01:36:52,960 --> 01:36:56,319
just see did I actually change anything

1800
01:36:55,060 --> 01:36:59,700
right because I don't know if I actually

1801
01:36:56,319 --> 01:37:02,949
did and then we look it on here so

1802
01:36:59,699 --> 01:37:04,720
there's that full screen and here's what

1803
01:37:02,949 --> 01:37:07,779
happens on the first color pass exactly

1804
01:37:04,720 --> 01:37:09,190
as I suggested previously when we were

1805
01:37:07,779 --> 01:37:10,840
talking about how so much stuff gets

1806
01:37:09,189 --> 01:37:14,069
covered you can see the basically like

1807
01:37:10,840 --> 01:37:18,190
the entire thing is almost completely

1808
01:37:14,069 --> 01:37:19,479
opaque like there really isn't a lot of

1809
01:37:18,189 --> 01:37:20,829
deaf people and going on here there's

1810
01:37:19,479 --> 01:37:21,138
some little stuff probably happening in

1811
01:37:20,829 --> 01:37:23,269
there

1812
01:37:21,139 --> 01:37:24,800
that's really basically it so in this

1813
01:37:23,270 --> 01:37:27,230
next pass yeah

1814
01:37:24,800 --> 01:37:29,300
so this worked perfectly exactly as I

1815
01:37:27,229 --> 01:37:31,638
hoped right so this next pass you can

1816
01:37:29,300 --> 01:37:33,170
see there's almost nothing rendered and

1817
01:37:31,639 --> 01:37:35,118
that's exactly what I wanted

1818
01:37:33,170 --> 01:37:36,618
we're only rendering pieces of the

1819
01:37:35,118 --> 01:37:38,389
screen that actually needed to be

1820
01:37:36,618 --> 01:37:43,009
rendered which is pieces that were like

1821
01:37:38,389 --> 01:37:45,949
behind some partially transparent piece

1822
01:37:43,010 --> 01:37:48,650
right and then in the final one you can

1823
01:37:45,948 --> 01:37:50,779
see us getting even more interested

1824
01:37:48,649 --> 01:37:52,908
minutiae of things that were alpha on

1825
01:37:50,779 --> 01:37:54,139
top of alpha and then finally in the

1826
01:37:52,908 --> 01:37:56,118
last one there should be almost nothing

1827
01:37:54,139 --> 01:37:57,949
right it would have to be like where

1828
01:37:56,118 --> 01:38:02,059
multiple edges of multiple things

1829
01:37:57,948 --> 01:38:03,799
intersected and so that again has the

1830
01:38:02,060 --> 01:38:08,210
potential of it's not going to be much

1831
01:38:03,800 --> 01:38:11,119
of a difference now but if you look at

1832
01:38:08,210 --> 01:38:13,489
these numbers in the future since I can

1833
01:38:11,118 --> 01:38:16,698
easily turn that piece of code on and

1834
01:38:13,488 --> 01:38:21,908
off I think as these numbers start to

1835
01:38:16,698 --> 01:38:21,908
grow larger I think we will start to see

1836
01:38:22,179 --> 01:38:29,239
we'll start to see those become relevant

1837
01:38:26,090 --> 01:38:36,980
right now there's another thing we could

1838
01:38:29,238 --> 01:38:38,569
do potentially as I'm saying and I'm not

1839
01:38:36,979 --> 01:38:39,769
sure if we could actually do it but you

1840
01:38:38,569 --> 01:38:41,329
know point being death that's what

1841
01:38:39,770 --> 01:38:42,409
exactly what I wanted to have happen and

1842
01:38:41,329 --> 01:38:44,719
hopefully you understand what I did

1843
01:38:42,408 --> 01:38:49,599
there right it's it's pretty

1844
01:38:44,719 --> 01:38:52,609
straightforward use of the shader result

1845
01:38:49,600 --> 01:38:55,340
so another thing we could consider doing

1846
01:38:52,609 --> 01:38:58,429
there is if you look at how the resolve

1847
01:38:55,340 --> 01:39:06,139
itself works when we're resolving what

1848
01:38:58,429 --> 01:39:09,560
we're doing is we're reading we're

1849
01:39:06,139 --> 01:39:11,868
basically blending values together right

1850
01:39:09,560 --> 01:39:15,110
we're saying we're gonna take in these

1851
01:39:11,868 --> 01:39:16,969
values of these samples and we're going

1852
01:39:15,109 --> 01:39:19,399
to blend them together and then we're

1853
01:39:16,969 --> 01:39:25,960
going to output the results that's the

1854
01:39:19,399 --> 01:39:28,969
notion of a resolve right and the slow

1855
01:39:25,960 --> 01:39:34,760
part of this is the fact that we have

1856
01:39:28,969 --> 01:39:38,300
this if true here right so this if true

1857
01:39:34,760 --> 01:39:40,520
this is basically the thing that is

1858
01:39:38,300 --> 01:39:42,770
saying do I actually need to resolve

1859
01:39:40,520 --> 01:39:46,010
this pixel that's the thing I wish I

1860
01:39:42,770 --> 01:39:48,890
could not have to do right if I set that

1861
01:39:46,010 --> 01:39:52,400
to false so we just don't do multi

1862
01:39:48,890 --> 01:39:56,210
sampling anymore then what happens when

1863
01:39:52,399 --> 01:39:59,559
I launch this application no I don't

1864
01:39:56,210 --> 01:40:04,730
want to save this capture and you know I

1865
01:39:59,560 --> 01:40:07,430
do the the nonsense here get a look at

1866
01:40:04,729 --> 01:40:08,329
what the timings quote-unquote are even

1867
01:40:07,430 --> 01:40:10,970
though I don't really think they're that

1868
01:40:08,329 --> 01:40:13,550
accurate what you can see it's just

1869
01:40:10,970 --> 01:40:16,130
representative wise these draw are eight

1870
01:40:13,550 --> 01:40:17,869
calls that don't you know everything is

1871
01:40:16,130 --> 01:40:20,630
the same we're still attaching a multi

1872
01:40:17,869 --> 01:40:22,909
sample buffer we're still using a multi

1873
01:40:20,630 --> 01:40:26,930
sample rendering we're doing everything

1874
01:40:22,909 --> 01:40:30,229
exactly the way that you would expect so

1875
01:40:26,930 --> 01:40:32,480
nothing has changed all we're doing is

1876
01:40:30,229 --> 01:40:34,849
that when we go to resolve it we just

1877
01:40:32,479 --> 01:40:37,969
don't read from it right we just take

1878
01:40:34,850 --> 01:40:42,860
the first color sample and the other 15

1879
01:40:37,970 --> 01:40:45,619
never touched right just that is if

1880
01:40:42,859 --> 01:40:47,449
these timings are at all accurate which

1881
01:40:45,619 --> 01:40:50,960
we don't know if there are but let's say

1882
01:40:47,449 --> 01:40:56,319
that they were at least proportional we

1883
01:40:50,960 --> 01:40:59,869
saved like 10x right it's not 16x

1884
01:40:56,319 --> 01:41:03,019
exactly but it's close right it's

1885
01:40:59,869 --> 01:41:06,670
getting up there so you can see just how

1886
01:41:03,020 --> 01:41:10,160
expensive that resolve was and that

1887
01:41:06,670 --> 01:41:13,850
prompts the question is there some way

1888
01:41:10,159 --> 01:41:15,859
that we could simulate that if statement

1889
01:41:13,850 --> 01:41:17,840
and even though we're not getting any

1890
01:41:15,859 --> 01:41:20,029
help from the GPU here as much as we

1891
01:41:17,840 --> 01:41:23,680
would like is there something I could do

1892
01:41:20,029 --> 01:41:27,469
that would solve this problem for us and

1893
01:41:23,680 --> 01:41:30,829
what you just saw was a good example of

1894
01:41:27,470 --> 01:41:37,310
perhaps how that problem might be solved

1895
01:41:30,829 --> 01:41:42,140
right there's two things we could do

1896
01:41:37,310 --> 01:41:45,289
that would fix this right thing number

1897
01:41:42,140 --> 01:41:47,510
one would be what if we just read from

1898
01:41:45,289 --> 01:41:48,500
the previous depth feel when we do this

1899
01:41:47,510 --> 01:41:53,150
resolve

1900
01:41:48,500 --> 01:41:55,100
and if in that slot the the depth value

1901
01:41:53,149 --> 01:41:57,559
suggests that we've already made this

1902
01:41:55,100 --> 01:42:00,320
opaque or we read the alpha value let's

1903
01:41:57,560 --> 01:42:04,340
say so we basically know the alpha value

1904
01:42:00,319 --> 01:42:06,319
we're not going to use this value then

1905
01:42:04,340 --> 01:42:10,430
we just don't resolve it just leave it

1906
01:42:06,319 --> 01:42:13,759
blank right I mean we don't even need

1907
01:42:10,430 --> 01:42:15,380
this the else Clause goes away right we

1908
01:42:13,760 --> 01:42:17,119
literally just just leave it garbage

1909
01:42:15,380 --> 01:42:23,150
because no one's ever gonna look at it

1910
01:42:17,119 --> 01:42:25,460
right so that's one thing and then the

1911
01:42:23,149 --> 01:42:27,409
second thing we could do and this is if

1912
01:42:25,460 --> 01:42:33,230
we were feeling like a real saucy

1913
01:42:27,409 --> 01:42:35,359
so-and-so is we could try to construct a

1914
01:42:33,229 --> 01:42:39,919
buffer that would have that information

1915
01:42:35,359 --> 01:42:42,789
in it separately right and the way we we

1916
01:42:39,920 --> 01:42:46,880
do that is what I was suggesting before

1917
01:42:42,789 --> 01:42:49,819
we would basically do one render of an

1918
01:42:46,880 --> 01:42:52,130
actual multi sample target resolve it

1919
01:42:49,819 --> 01:42:54,649
and then the only thing that we leave in

1920
01:42:52,130 --> 01:43:04,760
the color channel is like a 1 or a 0

1921
01:42:54,649 --> 01:43:05,689
that is should I blend this right as I'm

1922
01:43:04,760 --> 01:43:06,949
saying that I don't think that actually

1923
01:43:05,689 --> 01:43:09,859
works because you need to do it for

1924
01:43:06,949 --> 01:43:17,449
every peel so I take that back that's

1925
01:43:09,859 --> 01:43:19,819
not really true yeah so I don't really

1926
01:43:17,449 --> 01:43:22,760
think that that's that's accurate I lied

1927
01:43:19,819 --> 01:43:28,750
there so the first one I think is true

1928
01:43:22,760 --> 01:43:33,079
right and the second one is false right

1929
01:43:28,750 --> 01:43:38,329
but I do think that yet if we wanted to

1930
01:43:33,079 --> 01:43:42,529
right we could say fetch the color or

1931
01:43:38,329 --> 01:43:45,460
fetch the depth our choice but basically

1932
01:43:42,529 --> 01:43:49,729
it would just look like this Texel fetch

1933
01:43:45,460 --> 01:43:54,800
from basically like a mask sampler same

1934
01:43:49,729 --> 01:43:57,559
set up is everything else and instead of

1935
01:43:54,800 --> 01:44:00,829
sampling it multi sampled which we're

1936
01:43:57,560 --> 01:44:01,770
doing with the other one we would we

1937
01:44:00,829 --> 01:44:05,729
would not

1938
01:44:01,770 --> 01:44:08,489
we would look at the Alpha Channel and

1939
01:44:05,729 --> 01:44:13,229
we would basically say if the mask value

1940
01:44:08,488 --> 01:44:15,750
that you see here is less than one right

1941
01:44:13,229 --> 01:44:18,379
then we know that we will actually be

1942
01:44:15,750 --> 01:44:22,050
blending so go ahead and compute

1943
01:44:18,380 --> 01:44:26,940
whatever that value is right and then

1944
01:44:22,050 --> 01:44:29,100
when you're done right that I was normal

1945
01:44:26,939 --> 01:44:35,009
otherwise just don't do anything right

1946
01:44:29,100 --> 01:44:37,079
like this doesn't have to happen so

1947
01:44:35,010 --> 01:44:39,750
that's one thing we can do right and

1948
01:44:37,079 --> 01:44:45,569
that would probably help us here

1949
01:44:39,750 --> 01:44:51,479
I want to say there's another thing we

1950
01:44:45,569 --> 01:44:53,549
can do here and we probably should which

1951
01:44:51,479 --> 01:44:57,389
is that while we're doing that we should

1952
01:44:53,550 --> 01:45:11,600
just build the output buffer right at

1953
01:44:57,390 --> 01:45:14,489
the moment we have this nonsense right

1954
01:45:11,600 --> 01:45:17,000
so at the moment we've got this nonsense

1955
01:45:14,488 --> 01:45:21,059
happening here where we do a final

1956
01:45:17,000 --> 01:45:24,750
fullscreen quad we take for depth I'm

1957
01:45:21,060 --> 01:45:26,969
sorry for color samples and we blend

1958
01:45:24,750 --> 01:45:30,569
them together using their alpha values

1959
01:45:26,969 --> 01:45:33,899
using this equation right so we take the

1960
01:45:30,569 --> 01:45:36,149
final one we then blend in the one on

1961
01:45:33,899 --> 01:45:40,469
top of it the one on top of that and

1962
01:45:36,149 --> 01:45:44,579
then the one on top of that right but

1963
01:45:40,469 --> 01:45:49,199
actually there's no reason why we would

1964
01:45:44,579 --> 01:45:53,069
need to do that I don't think we could

1965
01:45:49,199 --> 01:45:55,829
just treat it as an accumulator probably

1966
01:45:53,069 --> 01:45:57,630
I'll have to work out the math to see

1967
01:45:55,829 --> 01:46:04,279
whether the coverage makes sense there

1968
01:45:57,630 --> 01:46:04,279
or not but honestly like

1969
01:46:06,899 --> 01:46:16,539
you know right it seems like saving up

1970
01:46:13,329 --> 01:46:19,199
for copies of the screen and then

1971
01:46:16,539 --> 01:46:22,659
combining them with that equation I mean

1972
01:46:19,199 --> 01:46:26,349
can't we just do it incrementally and

1973
01:46:22,659 --> 01:46:30,550
only keep one buffer around it kind of

1974
01:46:26,350 --> 01:46:33,220
seems like it right and so I do feel

1975
01:46:30,550 --> 01:46:35,020
like maybe this is a little bit long in

1976
01:46:33,220 --> 01:46:36,940
the tooth and we should probably get rid

1977
01:46:35,020 --> 01:46:39,550
of that as well so we'll think about

1978
01:46:36,939 --> 01:46:43,419
that maybe that'll be Sunday what I want

1979
01:46:39,550 --> 01:46:47,770
to do now is again probably do that

1980
01:46:43,420 --> 01:46:52,300
hookup that I just said so basically if

1981
01:46:47,770 --> 01:46:56,470
I was to jump back to that Z by shooter

1982
01:46:52,300 --> 01:47:00,789
here and we take a look at this so when

1983
01:46:56,470 --> 01:47:01,930
we go through here and I'm sorry not not

1984
01:47:00,789 --> 01:47:03,399
that I meant the resolved

1985
01:47:01,930 --> 01:47:09,940
I meant the resolved where's that

1986
01:47:03,399 --> 01:47:13,299
resolved so if we go to compile resolve

1987
01:47:09,939 --> 01:47:16,089
multisample so really I think you know

1988
01:47:13,300 --> 01:47:18,820
this does make a lot of sense let's

1989
01:47:16,090 --> 01:47:20,619
fetch that mask and let's only resolve

1990
01:47:18,819 --> 01:47:24,069
these samples if we actually have to

1991
01:47:20,619 --> 01:47:25,840
it's not as good as what I would have

1992
01:47:24,069 --> 01:47:28,000
wanted which is some way of knowing

1993
01:47:25,840 --> 01:47:30,310
whether we need to do this even on the

1994
01:47:28,000 --> 01:47:32,770
first step feel but at least this might

1995
01:47:30,310 --> 01:47:35,490
speed up the second third and fourth

1996
01:47:32,770 --> 01:47:37,780
theft feels and that's not nothing

1997
01:47:35,489 --> 01:47:39,760
taking something that takes four times

1998
01:47:37,779 --> 01:47:43,329
the time to taking just one times the

1999
01:47:39,760 --> 01:47:44,770
time hey man that's a huge improvement

2000
01:47:43,329 --> 01:47:46,829
even though it's not the perfect

2001
01:47:44,770 --> 01:47:48,610
improvement that I would have hoped for

2002
01:47:46,829 --> 01:47:52,269
it's not bad

2003
01:47:48,609 --> 01:47:56,710
right so if I said here there was

2004
01:47:52,270 --> 01:48:02,290
another sampler 2d for the mask sampler

2005
01:47:56,710 --> 01:48:05,890
there and we went to compile peel blah

2006
01:48:02,289 --> 01:48:10,029
blah blah right when we look at open

2007
01:48:05,890 --> 01:48:12,250
Jill create program and Link samplers oh

2008
01:48:10,029 --> 01:48:15,219
nope sorry result - am I on the wrong

2009
01:48:12,250 --> 01:48:17,260
road again too many samplers yeah if you

2010
01:48:15,220 --> 01:48:19,090
do open gellick samplers on this one you

2011
01:48:17,260 --> 01:48:19,780
could see here we're even it's this is

2012
01:48:19,090 --> 01:48:21,970
old

2013
01:48:19,779 --> 01:48:23,559
we were even asking for some other ones

2014
01:48:21,970 --> 01:48:26,140
here that we didn't actually even need

2015
01:48:23,560 --> 01:48:29,050
so that's kind of a waste of time there

2016
01:48:26,140 --> 01:48:31,480
but anyway point being we already had it

2017
01:48:29,050 --> 01:48:33,880
set up to be doing more texture samples

2018
01:48:31,479 --> 01:48:37,149
anyway and now we actually will so now

2019
01:48:33,880 --> 01:48:38,529
we'll get the mask sampler out there now

2020
01:48:37,149 --> 01:48:41,170
when we run this we won't put anything

2021
01:48:38,529 --> 01:48:43,869
in that channel and so actually I think

2022
01:48:41,170 --> 01:48:46,000
it won't do anything at first because

2023
01:48:43,869 --> 01:48:49,569
there won't be anything enabled in that

2024
01:48:46,000 --> 01:48:51,310
texture channel so at first I want to

2025
01:48:49,569 --> 01:48:53,289
say and maybe everything will just come

2026
01:48:51,310 --> 01:48:54,730
crashing down now but I want to say that

2027
01:48:53,289 --> 01:48:57,729
at first if I just run it without

2028
01:48:54,729 --> 01:49:00,549
actually doing the any work that we

2029
01:48:57,729 --> 01:49:02,379
should actually see just what we know so

2030
01:49:00,550 --> 01:49:03,909
there is an error there so it doesn't

2031
01:49:02,380 --> 01:49:06,670
like the fact that we're not binding

2032
01:49:03,909 --> 01:49:09,550
that mask that mask sampler I guess or

2033
01:49:06,670 --> 01:49:11,560
there's a error in this code which may

2034
01:49:09,550 --> 01:49:13,000
also be the case so let's go ahead and

2035
01:49:11,560 --> 01:49:16,120
run it under remedy so we can actually

2036
01:49:13,000 --> 01:49:18,670
see what there is and I can read it and

2037
01:49:16,119 --> 01:49:21,010
fix the code so if I go in here and look

2038
01:49:18,670 --> 01:49:22,930
at what the they are there's vertex

2039
01:49:21,010 --> 01:49:24,940
errors it's probably a fragment error

2040
01:49:22,930 --> 01:49:29,770
right because we weren't editing the

2041
01:49:24,939 --> 01:49:32,049
vertex shader so it's unlikely right but

2042
01:49:29,770 --> 01:49:34,510
let's see what it says of course they

2043
01:49:32,050 --> 01:49:36,699
don't think remedy has a way to do this

2044
01:49:34,510 --> 01:49:41,140
but it's on line 83 unable to find

2045
01:49:36,699 --> 01:49:46,319
compatible what unable to find

2046
01:49:41,140 --> 01:49:50,650
compatible overloaded function ah yes

2047
01:49:46,319 --> 01:49:53,380
sorry this is the fact that it's textile

2048
01:49:50,649 --> 01:49:55,479
fetch but that's not what we would

2049
01:49:53,380 --> 01:49:59,380
actually use because textile fetch I

2050
01:49:55,479 --> 01:50:01,449
think is only for sample index so I

2051
01:49:59,380 --> 01:50:02,800
don't think we want that although we may

2052
01:50:01,449 --> 01:50:05,920
still want it with just a textile fetch

2053
01:50:02,800 --> 01:50:10,270
of zero so let me see which one we

2054
01:50:05,920 --> 01:50:12,460
actually want to use because yeah okay

2055
01:50:10,270 --> 01:50:16,060
so now we do we just want to pass the

2056
01:50:12,460 --> 01:50:19,359
zero right so we do want this we want a

2057
01:50:16,060 --> 01:50:21,760
sample at zero which is you know the

2058
01:50:19,359 --> 01:50:24,819
only one that that texture pass because

2059
01:50:21,760 --> 01:50:28,300
it's not a multi sample touch so let's

2060
01:50:24,819 --> 01:50:30,279
try running it again there we go so now

2061
01:50:28,300 --> 01:50:32,230
I'm not sure again whether or not we

2062
01:50:30,279 --> 01:50:33,559
broke anything with that because during

2063
01:50:32,229 --> 01:50:35,959
that resolve now we're

2064
01:50:33,560 --> 01:50:37,850
looking at that mass value and it's not

2065
01:50:35,960 --> 01:50:40,789
guaranteed to actually be anything valid

2066
01:50:37,850 --> 01:50:48,050
right so let's look in here and see what

2067
01:50:40,789 --> 01:50:51,519
we're getting in terms of yeah it's it's

2068
01:50:48,050 --> 01:50:53,570
looking a little busted right I think

2069
01:50:51,520 --> 01:50:56,780
like I don't know why I'm getting some

2070
01:50:53,569 --> 01:50:58,429
I'm getting some garbage in there so I

2071
01:50:56,779 --> 01:51:02,599
think it's I think it's a little busted

2072
01:50:58,430 --> 01:51:05,270
right which is what I would expect and

2073
01:51:02,600 --> 01:51:08,300
let me just verify that that's true if I

2074
01:51:05,270 --> 01:51:10,490
were to comment this out right so I

2075
01:51:08,300 --> 01:51:13,310
would say that this is just fifth one

2076
01:51:10,489 --> 01:51:15,739
right and so we're not doing that mask

2077
01:51:13,310 --> 01:51:18,740
test we still do the fragment fetch but

2078
01:51:15,739 --> 01:51:21,109
we don't actually use it right let me

2079
01:51:18,739 --> 01:51:29,800
just verify that that actually produces

2080
01:51:21,109 --> 01:51:29,799
oh well okay just a cast sorry if true

2081
01:51:30,819 --> 01:51:36,859
so if I run this again just making sure

2082
01:51:33,680 --> 01:51:39,560
again I I want to make sure that those

2083
01:51:36,859 --> 01:51:49,029
artifacts are gone so that I wasn't are

2084
01:51:39,560 --> 01:51:49,030
you serious what is the problem

2085
01:51:49,060 --> 01:52:02,390
syntax error unexpected dollar sign end

2086
01:51:57,020 --> 01:52:11,630
at token yeah what the heck what are you

2087
01:52:02,390 --> 01:52:13,460
talking about can't just do if true did

2088
01:52:11,630 --> 01:52:16,119
I accidentally insert some kind of

2089
01:52:13,460 --> 01:52:16,119
garbage in there

2090
01:52:24,819 --> 01:52:32,738
not sure what that's actually

2091
01:52:26,788 --> 01:52:35,529
complaining about I mean correct me if

2092
01:52:32,738 --> 01:52:38,319
I'm wrong but all I did was change that

2093
01:52:35,529 --> 01:52:47,698
part right so if I compile this you're

2094
01:52:38,319 --> 01:52:50,768
saying it's fine maybe it's not true

2095
01:52:47,698 --> 01:52:53,859
some other thing I thought it was true I

2096
01:52:50,769 --> 01:52:59,559
thought it was just TR Yui was what it

2097
01:52:53,859 --> 01:53:02,319
wanted for those things not sure I see

2098
01:52:59,559 --> 01:53:08,230
what the problem is there so that works

2099
01:53:02,319 --> 01:53:10,889
fine but for some reason that like

2100
01:53:08,229 --> 01:53:10,888
doesn't work

2101
01:53:14,020 --> 01:53:22,630
I don't know anyway I want to go see if

2102
01:53:20,829 --> 01:53:23,710
this artefacts are still there I'm just

2103
01:53:22,630 --> 01:53:26,260
going to go ahead and here and just

2104
01:53:23,710 --> 01:53:28,899
verify that they're not and you could

2105
01:53:26,260 --> 01:53:31,119
pretty much see that they're not so I am

2106
01:53:28,899 --> 01:53:32,979
correct in thinking that that all seems

2107
01:53:31,119 --> 01:53:36,729
to work just fine and so now what we

2108
01:53:32,979 --> 01:53:40,089
need to do is actually hook this up this

2109
01:53:36,729 --> 01:53:42,729
mass sampler here and feed the color

2110
01:53:40,090 --> 01:53:44,440
buffer in for example right and so if we

2111
01:53:42,729 --> 01:53:46,629
wanted to feed the color buffer in what

2112
01:53:44,439 --> 01:53:48,939
we need to be able to do here is do this

2113
01:53:46,630 --> 01:53:51,130
only when we are actually depth feeling

2114
01:53:48,939 --> 01:53:53,349
is the only thing and so that makes it a

2115
01:53:51,130 --> 01:53:56,560
little bit trickier than normal because

2116
01:53:53,350 --> 01:53:59,920
we wouldn't necessarily have a color

2117
01:53:56,560 --> 01:54:02,920
buffer to feed this thing but we might

2118
01:53:59,920 --> 01:54:05,319
be able to trick that out right because

2119
01:54:02,920 --> 01:54:06,520
we'll we'll see when we get there when

2120
01:54:05,319 --> 01:54:08,920
we're actually setting up our depth

2121
01:54:06,520 --> 01:54:12,670
samples I'm sorry we're actually setting

2122
01:54:08,920 --> 01:54:15,069
up our peels whether or not that that

2123
01:54:12,670 --> 01:54:19,090
actually happens so let's take a look

2124
01:54:15,069 --> 01:54:22,299
inside here where we've got begin peels

2125
01:54:19,090 --> 01:54:25,210
right so you can see it's setting up the

2126
01:54:22,300 --> 01:54:27,750
color buffer there normally we clear it

2127
01:54:25,210 --> 01:54:31,750
to zero zero zero so we could actually

2128
01:54:27,750 --> 01:54:35,140
also clear the resolve target and feed

2129
01:54:31,750 --> 01:54:41,079
that in probably let's see so when we do

2130
01:54:35,140 --> 01:54:44,469
a resolve multi sample here right so

2131
01:54:41,079 --> 01:54:47,229
this is the the one right and so when we

2132
01:54:44,469 --> 01:54:48,699
bind the textures here we bind the the

2133
01:54:47,229 --> 01:54:55,959
thing we're gonna be sampling for for

2134
01:54:48,699 --> 01:54:58,149
the color tubing I'm sorry for it for

2135
01:54:55,960 --> 01:54:59,829
the depth and then we do the color here

2136
01:54:58,149 --> 01:55:03,599
and we only I don't know why we have

2137
01:54:59,829 --> 01:55:05,350
multiple color channels at the moment

2138
01:55:03,600 --> 01:55:08,969
actually because there should only be

2139
01:55:05,350 --> 01:55:08,969
one probably right but

2140
01:55:19,340 --> 01:55:24,210
yeah so we only have the surface reflect

2141
01:55:22,020 --> 01:55:26,159
so this stuff with things for thing for

2142
01:55:24,210 --> 01:55:27,539
when we were doing fancier stuff and

2143
01:55:26,158 --> 01:55:29,839
we're not really doing that anymore so

2144
01:55:27,539 --> 01:55:34,948
we don't really have to worry about that

2145
01:55:29,840 --> 01:55:37,260
but basically what happens is we're

2146
01:55:34,948 --> 01:55:39,118
gonna bind the DEF handle then we're

2147
01:55:37,260 --> 01:55:43,099
gonna bind the color handle and when you

2148
01:55:39,118 --> 01:55:51,839
look back at the code there where is my

2149
01:55:43,099 --> 01:55:54,119
there we go we look back at the code

2150
01:55:51,840 --> 01:55:57,569
here we want the color the depth and the

2151
01:55:54,118 --> 01:55:59,670
mask and honestly the fact that these

2152
01:55:57,569 --> 01:56:01,979
coming in the opposite order that

2153
01:55:59,670 --> 01:56:04,469
doesn't make a lot of sense to me I feel

2154
01:56:01,979 --> 01:56:08,339
like the way these are bound is like

2155
01:56:04,469 --> 01:56:11,460
depth and then color and so the fact

2156
01:56:08,340 --> 01:56:14,840
that they're opposite each other I don't

2157
01:56:11,460 --> 01:56:14,840
understand how that works right

2158
01:56:21,510 --> 01:56:39,449
I guess they must be specified in the

2159
01:56:25,649 --> 01:56:45,139
opposite order in the compile depth so

2160
01:56:39,449 --> 01:56:47,639
that's 0-1 and yeah they are all right

2161
01:56:45,140 --> 01:56:49,650
so we should probably be a little more

2162
01:56:47,640 --> 01:56:52,590
consistent there so depth first then

2163
01:56:49,649 --> 01:56:57,029
color then mask same here

2164
01:56:52,590 --> 01:56:59,310
depth color mask okay so in here if we

2165
01:56:57,029 --> 01:57:10,139
wanted to bind these right we would just

2166
01:56:59,310 --> 01:57:12,900
do this and in that texture slot there

2167
01:57:10,140 --> 01:57:15,539
we would want to put whatever came from

2168
01:57:12,899 --> 01:57:18,629
the previous depth feel so the previous

2169
01:57:15,539 --> 01:57:20,939
depth feels color result like resolved

2170
01:57:18,630 --> 01:57:25,409
color is what we would put in here and

2171
01:57:20,939 --> 01:57:26,879
since we don't actually know that in the

2172
01:57:25,409 --> 01:57:29,670
case of the first step feel because

2173
01:57:26,880 --> 01:57:31,380
there isn't anything there we would want

2174
01:57:29,670 --> 01:57:32,940
to be able to stuff that value with

2175
01:57:31,380 --> 01:57:35,069
something that wouldn't get looked up or

2176
01:57:32,939 --> 01:57:37,738
use a different shader depending on the

2177
01:57:35,069 --> 01:57:40,920
circumstances and you know depending on

2178
01:57:37,738 --> 01:57:43,289
how we want to do it but if we take a

2179
01:57:40,920 --> 01:57:46,890
look at how this would work we would end

2180
01:57:43,289 --> 01:57:51,210
up in a circumstance where when we are

2181
01:57:46,890 --> 01:57:57,420
doing this resolved here we would want

2182
01:57:51,210 --> 01:58:01,760
to bind the previous peel so let's take

2183
01:57:57,420 --> 01:58:01,760
a look at resolve multi-sample

2184
01:58:04,699 --> 01:58:11,729
so in here where we're going to be doing

2185
01:58:09,029 --> 01:58:17,039
the peels you can see us saying we're

2186
01:58:11,729 --> 01:58:20,369
going to go from this thing to whichever

2187
01:58:17,039 --> 01:58:23,970
one were on right and what we want to do

2188
01:58:20,369 --> 01:58:26,609
is say well in addition to that we've

2189
01:58:23,970 --> 01:58:29,550
also got the mask and that's going to be

2190
01:58:26,609 --> 01:58:32,819
this right but obviously we don't always

2191
01:58:29,550 --> 01:58:35,369
have that so what we want to do is

2192
01:58:32,819 --> 01:58:40,559
probably say well the mask

2193
01:58:35,369 --> 01:58:43,859
buffer is going to have to be probably

2194
01:58:40,560 --> 01:58:46,020
the to buffer itself and will probably

2195
01:58:43,859 --> 01:58:50,069
have to clear it in the case where we

2196
01:58:46,020 --> 01:58:52,920
can't do this right so we want to do

2197
01:58:50,069 --> 01:58:57,349
here is say look if we're on peel index

2198
01:58:52,920 --> 01:59:03,569
zero so we're actually like just peeling

2199
01:58:57,350 --> 01:59:05,340
the you know we're doing the first

2200
01:59:03,569 --> 01:59:07,679
render pass that isn't really a depth

2201
01:59:05,340 --> 01:59:09,150
peel in the first place then there's a

2202
01:59:07,680 --> 01:59:15,030
couple of different things we could do

2203
01:59:09,149 --> 01:59:19,529
certainly but the simplest possible one

2204
01:59:15,029 --> 01:59:21,750
I would suspect is to just say look in

2205
01:59:19,529 --> 01:59:26,449
that case the mask is whatever we're

2206
01:59:21,750 --> 01:59:28,680
going to and we'll clear it right so

2207
01:59:26,449 --> 01:59:32,639
that's what I would suspect we probably

2208
01:59:28,680 --> 01:59:35,430
would want to do right in the case where

2209
01:59:32,640 --> 01:59:38,940
we're not on the first depth peel then

2210
01:59:35,430 --> 01:59:41,730
the mask actually is a valid resolved

2211
01:59:38,939 --> 01:59:47,519
buffer and it's this one right it's the

2212
01:59:41,729 --> 01:59:50,639
one that came prior now the issue here

2213
01:59:47,520 --> 01:59:51,900
again and you know honestly maybe you

2214
01:59:50,640 --> 01:59:53,369
I'm thinking about it maybe we don't

2215
01:59:51,899 --> 01:59:56,279
even want to do that maybe there's just

2216
01:59:53,369 --> 01:59:59,550
a stuffing value that we throw in here

2217
01:59:56,279 --> 02:00:01,859
right and the stuffing value it's it's

2218
01:59:59,550 --> 02:00:07,980
just always zero so what we could do

2219
02:00:01,859 --> 02:00:12,029
instead is say yeah okay so in our

2220
02:00:07,979 --> 02:00:15,479
OpenGL right where we've got whatever

2221
02:00:12,029 --> 02:00:18,149
the heck happening here we know we're

2222
02:00:15,479 --> 02:00:19,829
gonna have stuff like a standard texture

2223
02:00:18,149 --> 02:00:22,139
that's just all-white that we like stuff

2224
02:00:19,829 --> 02:00:24,210
in there sometimes and maybe we also

2225
02:00:22,140 --> 02:00:27,539
want a texture we stuff in there that's

2226
02:00:24,210 --> 02:00:31,890
like always all black right so we can

2227
02:00:27,539 --> 02:00:34,380
basically just like pick when we don't

2228
02:00:31,890 --> 02:00:36,900
really actually want supply a legitimate

2229
02:00:34,380 --> 02:00:38,670
texture to something we can just have a

2230
02:00:36,899 --> 02:00:43,979
solid color texture sitting around and

2231
02:00:38,670 --> 02:00:45,630
we we hand that instead right and so

2232
02:00:43,979 --> 02:00:48,199
what that would look like is we just say

2233
02:00:45,630 --> 02:00:48,199
okay

2234
02:00:51,250 --> 02:01:03,619
there's a single pixel that's just all

2235
02:00:53,689 --> 02:01:05,929
black right and maybe like maybe that so

2236
02:01:03,619 --> 02:01:08,689
it's not it's not actually that it's

2237
02:01:05,930 --> 02:01:11,990
black with a 1 in the Alpha Channel it's

2238
02:01:08,689 --> 02:01:14,359
actually all 0 so it's really no color

2239
02:01:11,989 --> 02:01:17,929
at all right it's like completely not

2240
02:01:14,359 --> 02:01:20,389
there it's invisible right and we just

2241
02:01:17,930 --> 02:01:23,030
set that mask up and then feed that in

2242
02:01:20,390 --> 02:01:26,480
and run the resolved multi sample as

2243
02:01:23,029 --> 02:01:29,029
normal right I think that's all we would

2244
02:01:26,479 --> 02:01:33,289
really need to do and so it's not too

2245
02:01:29,029 --> 02:01:35,389
bad if we look I don't know whether

2246
02:01:33,289 --> 02:01:39,590
we've actually got this in our bindings

2247
02:01:35,390 --> 02:01:43,270
currently to create some textures like

2248
02:01:39,590 --> 02:01:50,380
that but it's not too hard for us to do

2249
02:01:43,270 --> 02:01:50,380
either way and so if I look I'm not sure

2250
02:01:54,789 --> 02:02:04,310
so here's an init function right and you

2251
02:02:00,050 --> 02:02:08,380
can see that here doing this creating

2252
02:02:04,310 --> 02:02:10,580
this sort of white value to pass down

2253
02:02:08,380 --> 02:02:12,260
just don't know if anyone actually ever

2254
02:02:10,579 --> 02:02:16,279
uses it but it's basically what we want

2255
02:02:12,260 --> 02:02:17,750
to do for the all zeroes value right so

2256
02:02:16,279 --> 02:02:21,349
what we would want to do there is like

2257
02:02:17,750 --> 02:02:24,560
yeah again to prepare that texture I

2258
02:02:21,350 --> 02:02:31,880
don't really see much we can do there

2259
02:02:24,560 --> 02:02:34,789
but so let's just do this right or seven

2260
02:02:31,880 --> 02:02:37,390
all zeroes value we say look give me one

2261
02:02:34,789 --> 02:02:37,390
of these things

2262
02:02:40,899 --> 02:02:52,969
wouldn't I call it again so we have one

2263
02:02:51,560 --> 02:02:56,539
of these things we generate one of these

2264
02:02:52,969 --> 02:02:59,840
single pixel all zeroes texture right we

2265
02:02:56,539 --> 02:03:12,260
then do a text image 2d and we just say

2266
02:02:59,840 --> 02:03:15,590
like look this thing is just going to be

2267
02:03:12,260 --> 02:03:20,630
this all zeroes right and so it's gonna

2268
02:03:15,590 --> 02:03:23,150
be a 1x1 I don't really remember the

2269
02:03:20,630 --> 02:03:25,010
parameters of Geo text in which 2d you

2270
02:03:23,149 --> 02:03:32,988
know sue me

2271
02:03:25,010 --> 02:03:35,840
oh it's right there nope nope no so we

2272
02:03:32,988 --> 02:03:44,448
pretty much don't ever call that do we

2273
02:03:35,840 --> 02:03:51,440
look all right so if I just go ahead and

2274
02:03:44,448 --> 02:03:54,469
oops if I just go ahead and submit this

2275
02:03:51,439 --> 02:03:57,859
one down right so we know it's a gel

2276
02:03:54,469 --> 02:03:59,529
texture 2d I don't know what the format

2277
02:03:57,859 --> 02:04:04,339
is so we'll have to go look that up but

2278
02:03:59,529 --> 02:04:06,590
the width and the height are 1 it's you

2279
02:04:04,340 --> 02:04:08,449
know the same as everything else we go

2280
02:04:06,590 --> 02:04:11,539
down but it doesn't really matter so we

2281
02:04:08,448 --> 02:04:15,309
could just use this and leave it at that

2282
02:04:11,539 --> 02:04:18,139
and then we just pass it all zeroes

2283
02:04:15,310 --> 02:04:20,929
right and so then all we really need to

2284
02:04:18,139 --> 02:04:22,219
do is just fill this out and so I can

2285
02:04:20,929 --> 02:04:23,569
actually look at what we were filling

2286
02:04:22,219 --> 02:04:26,420
that out as well so I don't actually

2287
02:04:23,569 --> 02:04:37,929
have to look at the GL documentation so

2288
02:04:26,420 --> 02:04:41,029
that format value here is what passed in

2289
02:04:37,929 --> 02:04:42,609
just kind of coming to dare it is so I'm

2290
02:04:41,029 --> 02:04:45,920
going to do a frame buffer text image

2291
02:04:42,609 --> 02:04:45,920
[Music]

2292
02:04:47,550 --> 02:04:54,250
just glr gb8 probably right

2293
02:04:51,000 --> 02:04:56,710
so that would create that special

2294
02:04:54,250 --> 02:04:59,619
texture for us so it would do a gem

2295
02:04:56,710 --> 02:05:01,270
textures to get one and I'll need to

2296
02:04:59,619 --> 02:05:06,279
actually put that in here so there's

2297
02:05:01,270 --> 02:05:08,230
just a you know we went for that so we

2298
02:05:06,279 --> 02:05:12,429
generate the textures and we'd have a

2299
02:05:08,229 --> 02:05:15,869
happy times for that oh and this buying

2300
02:05:12,430 --> 02:05:22,600
texture here just needs to actually have

2301
02:05:15,869 --> 02:05:34,659
masks it's not a frame buffer per se

2302
02:05:22,600 --> 02:05:36,880
though right or is it yes so we actually

2303
02:05:34,659 --> 02:05:39,430
want to pass the specific color a handle

2304
02:05:36,880 --> 02:05:45,489
so what I actually want here is I want

2305
02:05:39,430 --> 02:05:47,920
this so I really just want to bind that

2306
02:05:45,489 --> 02:05:50,019
mask texture directly and then when we

2307
02:05:47,920 --> 02:05:53,770
call resolve multisample I'm either

2308
02:05:50,020 --> 02:05:56,700
gonna pass it the color handle of the

2309
02:05:53,770 --> 02:06:00,150
frame buffer that we actually used or

2310
02:05:56,699 --> 02:06:00,149
you know I'll

2311
02:06:03,960 --> 02:06:09,250
yeah and that these are the multi sample

2312
02:06:06,850 --> 02:06:11,170
buffers right - so this we actually

2313
02:06:09,250 --> 02:06:13,119
don't even want that I just want the

2314
02:06:11,170 --> 02:06:17,440
depth field buffers right so I actually

2315
02:06:13,119 --> 02:06:20,500
want I just want the DEF peel resolve

2316
02:06:17,439 --> 02:06:22,509
buffer and in that case like I guess

2317
02:06:20,500 --> 02:06:25,390
they just don't have those filled in but

2318
02:06:22,510 --> 02:06:31,079
either way so in here where we get the

2319
02:06:25,390 --> 02:06:34,860
mask it's not bad right

2320
02:06:31,079 --> 02:06:34,859
it's actually this

2321
02:06:40,500 --> 02:06:48,939
right something like this and so then

2322
02:06:45,039 --> 02:06:51,279
we're saying look just stuff it normally

2323
02:06:48,939 --> 02:06:54,279
and I got actually past that stuff it

2324
02:06:51,279 --> 02:06:57,219
normally with just you know whatever the

2325
02:06:54,279 --> 02:06:59,649
previous color channel was and then in

2326
02:06:57,219 --> 02:07:01,090
circumstances where we don't have a

2327
02:06:59,649 --> 02:07:02,948
previous channel because it's the first

2328
02:07:01,090 --> 02:07:07,569
step feel fill it in with all zeros

2329
02:07:02,948 --> 02:07:10,988
right so we can see if that does

2330
02:07:07,569 --> 02:07:13,630
anything good it might not but we'll see

2331
02:07:10,988 --> 02:07:19,019
in a second let's see first if we're

2332
02:07:13,630 --> 02:07:19,020
getting any actual artifacts here

2333
02:07:28,248 --> 02:07:36,880
can't quite tell I'm not convinced yet I

2334
02:07:33,550 --> 02:07:36,880
didn't break it

2335
02:07:49,060 --> 02:07:53,310
I think it's still broken I feel like

2336
02:07:51,789 --> 02:07:55,329
that's not quite right

2337
02:07:53,310 --> 02:07:57,850
yeah I'm definitely seeing a few

2338
02:07:55,329 --> 02:08:00,220
artifacts in there so I think it was a

2339
02:07:57,850 --> 02:08:05,860
valiant effort but we're still a little

2340
02:08:00,220 --> 02:08:09,220
bit off right just a little bit but

2341
02:08:05,859 --> 02:08:11,170
we're close anyway if we actually take a

2342
02:08:09,220 --> 02:08:13,570
look at what happens now we're we're

2343
02:08:11,170 --> 02:08:15,100
passing a mass value and we use the mass

2344
02:08:13,569 --> 02:08:17,769
value determine whether or not we should

2345
02:08:15,100 --> 02:08:21,070
blend set that mass value in such a way

2346
02:08:17,770 --> 02:08:22,540
that we at least hope that the Alpha

2347
02:08:21,069 --> 02:08:25,210
Cham tells us what we actually need to

2348
02:08:22,539 --> 02:08:28,810
know and in fact if we look here we can

2349
02:08:25,210 --> 02:08:29,590
also see let me just verify in resolve

2350
02:08:28,810 --> 02:08:31,630
multi-sample

2351
02:08:29,590 --> 02:08:43,239
let me just verify yeah we're we're

2352
02:08:31,630 --> 02:08:45,550
using from color handle this is the this

2353
02:08:43,239 --> 02:08:50,979
when we do an open gel begins screen

2354
02:08:45,550 --> 02:08:52,750
fill it's gonna use that frame buffer

2355
02:08:50,979 --> 02:08:54,849
and that frame buffer would only have

2356
02:08:52,750 --> 02:08:58,060
just the color buffer if I'm not

2357
02:08:54,850 --> 02:08:59,380
mistaken so I think that's fine so let's

2358
02:08:58,060 --> 02:09:01,300
take a quick look at that and render

2359
02:08:59,380 --> 02:09:04,180
dock and then we'll call it a day but I

2360
02:09:01,300 --> 02:09:05,320
think we do have a bug in there so I'm

2361
02:09:04,180 --> 02:09:07,869
gonna have to be a little bit more

2362
02:09:05,319 --> 02:09:15,389
careful and look through that with more

2363
02:09:07,869 --> 02:09:15,390
oh sorry render dock

2364
02:09:18,250 --> 02:09:28,340
all right so now looking through here I

2365
02:09:26,600 --> 02:09:34,090
just want to verify that it does what I

2366
02:09:28,340 --> 02:09:41,239
think it should do and let's see so yeah

2367
02:09:34,090 --> 02:09:46,340
not really so these are kind of semi

2368
02:09:41,239 --> 02:09:48,609
nonsensical results that I'm looking at

2369
02:09:46,340 --> 02:09:48,610
here

2370
02:09:55,739 --> 02:10:00,109
all right so when we first do this it

2371
02:09:57,779 --> 02:10:02,969
looks like the mask is never succeeding

2372
02:10:00,109 --> 02:10:09,689
did I like screw up that change I don't

2373
02:10:02,970 --> 02:10:13,380
know we can look and see if I screwed it

2374
02:10:09,689 --> 02:10:16,169
up if mask is less than one from the

2375
02:10:13,380 --> 02:10:18,690
thing that you put well so I mean

2376
02:10:16,170 --> 02:10:21,300
correct me if I'm wrong but if I had

2377
02:10:18,689 --> 02:10:24,109
actually succeeded in stuffing it with

2378
02:10:21,300 --> 02:10:30,270
all zeros then this mask value should

2379
02:10:24,109 --> 02:10:33,210
always be less than one right it should

2380
02:10:30,270 --> 02:10:36,200
always be zero because no matter where

2381
02:10:33,210 --> 02:10:45,180
you sample it or what channel you pull

2382
02:10:36,199 --> 02:10:53,389
hero is going to get zero right so that

2383
02:10:45,180 --> 02:10:53,390
seems a little odd to me

2384
02:11:00,340 --> 02:11:05,650
but let's keep going so if I were to

2385
02:11:03,310 --> 02:11:07,510
look at this particular pass we know

2386
02:11:05,649 --> 02:11:09,729
this is probably correct because we

2387
02:11:07,510 --> 02:11:11,890
haven't touched the color pass we look

2388
02:11:09,729 --> 02:11:15,579
at the drawer rays pass I just want to

2389
02:11:11,890 --> 02:11:18,640
know what went in here right so what am

2390
02:11:15,579 --> 02:11:22,090
I actually getting when that was kind of

2391
02:11:18,640 --> 02:11:24,970
a nice little mesh view there anyway

2392
02:11:22,090 --> 02:11:26,739
what am I actually getting when I look

2393
02:11:24,970 --> 02:11:29,230
at the fragment shader what's coming in

2394
02:11:26,739 --> 02:11:38,590
here right and so if I look at the depth

2395
02:11:29,229 --> 02:11:41,139
sampler I can't actually tell that's

2396
02:11:38,590 --> 02:11:45,119
what I expect to see here I'm not sure

2397
02:11:41,140 --> 02:11:47,500
why I don't see a depth buffer properly

2398
02:11:45,119 --> 02:11:49,180
but maybe I've got these things bound

2399
02:11:47,500 --> 02:11:55,840
backwards that would make a lot of sense

2400
02:11:49,180 --> 02:11:58,659
right let's look at the mask I'm not

2401
02:11:55,840 --> 02:12:00,699
sure how to use render dock really I

2402
02:11:58,659 --> 02:12:04,689
don't know how to look at these things

2403
02:12:00,699 --> 02:12:06,010
so texture 51 like I should shouldn't

2404
02:12:04,689 --> 02:12:08,589
there be something that says like how

2405
02:12:06,010 --> 02:12:17,020
big it is I guess that one by one is the

2406
02:12:08,590 --> 02:12:25,750
thing zero by zero zero by zero doesn't

2407
02:12:17,020 --> 02:12:27,820
seem right so that seems a bit bad okay

2408
02:12:25,750 --> 02:12:31,420
let's take a look at the color sampler

2409
02:12:27,819 --> 02:12:35,229
if I'm doing this right that's what we

2410
02:12:31,420 --> 02:12:41,289
would expect to see there and then

2411
02:12:35,229 --> 02:12:45,309
finally the depth sampler oh you know

2412
02:12:41,289 --> 02:12:48,948
what I'm thinking the wrong button that

2413
02:12:45,310 --> 02:12:51,840
there it is okay

2414
02:12:48,948 --> 02:12:54,178
those all occur to the only thing that

2415
02:12:51,840 --> 02:12:57,110
looks busted to me is it I don't

2416
02:12:54,179 --> 02:12:59,578
understand what I'm looking at there I

2417
02:12:57,109 --> 02:13:01,828
may have submitted this texture wrong so

2418
02:12:59,578 --> 02:13:03,958
let's take a look I made that it's easy

2419
02:13:01,828 --> 02:13:08,389
to do that let me just it's probably

2420
02:13:03,958 --> 02:13:12,118
some typos nonsense so oh yeah

2421
02:13:08,389 --> 02:13:14,929
fantastic so that may be the only

2422
02:13:12,118 --> 02:13:14,929
problem there oops

2423
02:13:18,109 --> 02:13:23,788
alright so let's see if that's any

2424
02:13:21,569 --> 02:13:25,018
better because what I was doing is I

2425
02:13:23,788 --> 02:13:28,349
wasn't actually initializing that

2426
02:13:25,019 --> 02:13:30,199
texture actually set the wrong value

2427
02:13:28,349 --> 02:13:32,760
there so let's try that one more time

2428
02:13:30,198 --> 02:13:39,328
see if this changes the perceived

2429
02:13:32,760 --> 02:13:41,429
results here at all all right so if I go

2430
02:13:39,328 --> 02:13:43,558
up here like I was doing before and kind

2431
02:13:41,429 --> 02:13:47,578
of look at one of those edges to see

2432
02:13:43,559 --> 02:13:49,229
what I can see and again it doesn't look

2433
02:13:47,578 --> 02:13:53,340
right right I'm getting like leakage

2434
02:13:49,229 --> 02:13:55,918
there I think so I still think we're not

2435
02:13:53,340 --> 02:13:59,429
not getting it right maybe we're a

2436
02:13:55,918 --> 02:14:00,868
little closer but not right oh you know

2437
02:13:59,429 --> 02:14:04,189
what I do want debug that though because

2438
02:14:00,868 --> 02:14:09,389
that was very handy so let's take a

2439
02:14:04,189 --> 02:14:12,269
screenshot there f12 and then close it

2440
02:14:09,389 --> 02:14:17,279
so looking through here let's take a

2441
02:14:12,269 --> 02:14:21,958
look at this pass again right and so

2442
02:14:17,279 --> 02:14:23,878
here's the first drawing Clark pass

2443
02:14:21,958 --> 02:14:25,948
here's the draw arrays illness this time

2444
02:14:23,878 --> 02:14:29,729
it's not all black so it looks like it

2445
02:14:25,948 --> 02:14:32,398
did properly pass right to me so that's

2446
02:14:29,729 --> 02:14:35,399
good right you can see that resolved and

2447
02:14:32,399 --> 02:14:37,709
you can see furthermore that it looks

2448
02:14:35,399 --> 02:14:42,449
like it did anti aliased properly right

2449
02:14:37,708 --> 02:14:44,248
so the first pass now looks good it was

2450
02:14:42,448 --> 02:14:44,878
busted before it looks like it's less

2451
02:14:44,248 --> 02:14:49,139
busted

2452
02:14:44,878 --> 02:14:53,698
now the second pass as you might expect

2453
02:14:49,139 --> 02:14:55,828
is rendering kind of where we would I

2454
02:14:53,698 --> 02:14:58,978
guess expect it to because that's where

2455
02:14:55,828 --> 02:15:00,889
two primitives are meeting and fighting

2456
02:14:58,979 --> 02:15:04,070
for supremacy potentially right

2457
02:15:00,889 --> 02:15:07,100
I don't want to know why that's purple

2458
02:15:04,069 --> 02:15:09,590
but maybe it's a lighting probe and then

2459
02:15:07,100 --> 02:15:21,350
when we draw a race here we're actually

2460
02:15:09,590 --> 02:15:22,819
resolving it that seems like it could be

2461
02:15:21,350 --> 02:15:25,869
fine I mean I don't know that there's

2462
02:15:22,819 --> 02:15:25,868
anything particularly wrong with that

2463
02:15:28,779 --> 02:15:39,019
what I would say is it looks like the

2464
02:15:30,800 --> 02:15:43,369
depth is ah yes we do need to save the

2465
02:15:39,020 --> 02:15:46,429
depth buffer yes because it needs to go

2466
02:15:43,368 --> 02:15:49,399
in to the resolve for the depth peel so

2467
02:15:46,429 --> 02:15:51,639
we do need to write one piece of

2468
02:15:49,399 --> 02:15:57,019
information in there which is to say

2469
02:15:51,639 --> 02:16:00,050
that we because we're not rendering the

2470
02:15:57,020 --> 02:16:03,260
same depth buffer every time we do need

2471
02:16:00,050 --> 02:16:07,219
to when this doesn't work we do need to

2472
02:16:03,260 --> 02:16:11,199
at least write out the depth that does

2473
02:16:07,219 --> 02:16:14,149
have to happen so when we do this else

2474
02:16:11,198 --> 02:16:17,029
we do want to do that I don't know that

2475
02:16:14,149 --> 02:16:19,069
we really need to output a color because

2476
02:16:17,029 --> 02:16:22,368
if we're not going to use this color we

2477
02:16:19,069 --> 02:16:24,049
probably don't need it intended ly we

2478
02:16:22,368 --> 02:16:25,789
don't eat a frag depth either

2479
02:16:24,050 --> 02:16:27,949
so these fetches probably aren't

2480
02:16:25,789 --> 02:16:33,888
necessary so I want to say we can

2481
02:16:27,948 --> 02:16:37,849
probably do this right and then just set

2482
02:16:33,888 --> 02:16:43,728
the GL frag depth to be like stop right

2483
02:16:37,849 --> 02:16:45,469
don't depth peel anymore I think that

2484
02:16:43,728 --> 02:16:48,170
might be a little more correct let's

2485
02:16:45,468 --> 02:16:51,829
find out so if I now go to the launch

2486
02:16:48,170 --> 02:16:58,659
and get this going here no I don't want

2487
02:16:51,829 --> 02:17:05,989
to say the capture uh oh that's probably

2488
02:16:58,659 --> 02:17:08,590
just us crashing and not having a set

2489
02:17:05,989 --> 02:17:08,590
this correct

2490
02:17:11,459 --> 02:17:20,039
we probably don't write to blend unit

2491
02:17:13,860 --> 02:17:22,770
color alright so we need to write some

2492
02:17:20,040 --> 02:17:25,650
of the blend unit here probably I would

2493
02:17:22,770 --> 02:17:28,110
guess just to avoid any issues so we

2494
02:17:25,649 --> 02:17:30,569
probably need to write some black

2495
02:17:28,110 --> 02:17:34,140
channel out we could change it to like a

2496
02:17:30,569 --> 02:17:36,899
purple as well so we can see it but you

2497
02:17:34,139 --> 02:17:37,979
know either-or so we do need to write

2498
02:17:36,899 --> 02:17:40,049
something of the blend unit color

2499
02:17:37,979 --> 02:17:41,549
probably I'm guessing or the compile

2500
02:17:40,049 --> 02:17:45,319
will fail we can go look and see if

2501
02:17:41,549 --> 02:17:45,319
that's actually it maybe that wasn't it

2502
02:17:46,309 --> 02:17:53,479
there we go let's take a look

2503
02:17:53,840 --> 02:18:00,210
syntax error unexpected and at token it

2504
02:17:58,200 --> 02:18:02,940
keeps giving me that what is it talking

2505
02:18:00,209 --> 02:18:05,429
about I have no idea what it's actually

2506
02:18:02,940 --> 02:18:10,260
complaining about they're like none at

2507
02:18:05,430 --> 02:18:12,840
all it seems like very unhappy but I'm

2508
02:18:10,260 --> 02:18:15,210
not sure about what so let's suppose we

2509
02:18:12,840 --> 02:18:19,430
just did this see if that makes it any

2510
02:18:15,209 --> 02:18:19,429
more happy and actually now

2511
02:18:32,549 --> 02:18:36,479
I really don't know if that's part of

2512
02:18:34,920 --> 02:18:38,370
the problem of this like embedding this

2513
02:18:36,479 --> 02:18:39,989
thing in the code if it's getting

2514
02:18:38,370 --> 02:18:42,660
confused or something but I don't see

2515
02:18:39,989 --> 02:18:50,639
what it's objecting to because the code

2516
02:18:42,659 --> 02:18:56,399
looks fine right like I don't see I mean

2517
02:18:50,639 --> 02:19:00,079
we didn't do really anything maybe we

2518
02:18:56,399 --> 02:19:00,079
get rid of a couple of these cases here

2519
02:19:00,950 --> 02:19:05,190
but I want to keep that Multi stamping

2520
02:19:03,510 --> 02:19:09,290
debug in there you know I'd like that to

2521
02:19:05,190 --> 02:19:09,290
remain in there

2522
02:19:16,819 --> 02:19:28,529
yeah I really just don't see what the

2523
02:19:19,819 --> 02:19:37,110
what the crime is right so basically

2524
02:19:28,530 --> 02:19:41,780
what you're telling me is previously we

2525
02:19:37,110 --> 02:19:41,780
had this and that was fine

2526
02:19:46,639 --> 02:19:50,359
right like everyone loves that no one

2527
02:19:49,159 --> 02:19:52,851
has any problem with that that's

2528
02:19:50,360 --> 02:20:05,630
fantastic the shader compiles like yes

2529
02:19:52,851 --> 02:20:07,310
really good how's that and that's fine

2530
02:20:05,629 --> 02:20:09,409
everyone loves that everyone thinks

2531
02:20:07,310 --> 02:20:11,239
that's really good that should also have

2532
02:20:09,409 --> 02:20:13,341
fixed the bug by the way so meaning I

2533
02:20:11,239 --> 02:20:16,550
would expected that too but actually

2534
02:20:13,341 --> 02:20:23,899
doesn't look like it did weird that's

2535
02:20:16,550 --> 02:20:26,300
all this disheartening Jimmy but then

2536
02:20:23,899 --> 02:20:28,670
apparently like if you commented those

2537
02:20:26,300 --> 02:20:30,199
out that would be like horrible like you

2538
02:20:28,670 --> 02:20:40,569
can't definitely can't do that or

2539
02:20:30,200 --> 02:20:40,570
something nope still okay

2540
02:20:56,049 --> 02:21:02,819
I have no idea what this is doing I have

2541
02:20:59,408 --> 02:21:02,818
no idea why I didn't like this

2542
02:21:17,000 --> 02:21:23,299
all right well I don't know and I don't

2543
02:21:21,379 --> 02:21:26,179
want to know I'm just gonna set the frag

2544
02:21:23,299 --> 02:21:29,209
depth to one and since that seems to be

2545
02:21:26,180 --> 02:21:30,648
okay who knows maybe we'll have to do

2546
02:21:29,209 --> 02:21:34,969
something a little fancier there with

2547
02:21:30,648 --> 02:21:36,260
how work oops with Howard submitting

2548
02:21:34,969 --> 02:21:41,469
shaders so that we can put them in

2549
02:21:36,260 --> 02:21:43,700
separate files I don't know but anyway I

2550
02:21:41,469 --> 02:21:45,228
would have thought that writing the

2551
02:21:43,700 --> 02:21:46,729
fragment depth there would have solved

2552
02:21:45,228 --> 02:21:48,228
the problem but it didn't solve the

2553
02:21:46,728 --> 02:21:51,459
problem and so that suggests to me that

2554
02:21:48,228 --> 02:21:56,449
I'm not quite sure still what is wrong

2555
02:21:51,459 --> 02:21:59,409
I've got it I've got it wrong I've got

2556
02:21:56,450 --> 02:22:02,390
it wrong in my head not just in the app

2557
02:21:59,409 --> 02:22:03,950
so if I take a look at this right again

2558
02:22:02,389 --> 02:22:07,539
that looks like a pretty good resolve

2559
02:22:03,950 --> 02:22:07,540
they're kind of what I would expect

2560
02:22:08,170 --> 02:22:14,898
there's the initial pass these are multi

2561
02:22:11,629 --> 02:22:17,269
samples here if I then do this resolve I

2562
02:22:14,898 --> 02:22:20,389
expect it to get smooth right and it

2563
02:22:17,270 --> 02:22:23,238
does now if I do this I expect to see

2564
02:22:20,389 --> 02:22:27,920
places only where primitives overlap I'm

2565
02:22:23,238 --> 02:22:29,959
not 100% sure that that's okay but I

2566
02:22:27,920 --> 02:22:32,988
think it probably is because those

2567
02:22:29,959 --> 02:22:36,108
primitives do occupy potentially the

2568
02:22:32,988 --> 02:22:41,359
same location right and so then when

2569
02:22:36,109 --> 02:22:47,329
that resolves we get that then we do the

2570
02:22:41,359 --> 02:22:52,909
next pass yeah I don't know why we're

2571
02:22:47,329 --> 02:22:55,398
really getting those cracks let's take a

2572
02:22:52,909 --> 02:23:00,738
look at that when I if I don't use the

2573
02:22:55,398 --> 02:23:02,858
mask input right but by the way also

2574
02:23:00,738 --> 02:23:06,738
when we look at this here if I actually

2575
02:23:02,859 --> 02:23:09,649
try to analyze how what the speed is

2576
02:23:06,738 --> 02:23:12,409
like I'm not sure if these are actually

2577
02:23:09,648 --> 02:23:14,619
representative actually looking at that

2578
02:23:12,409 --> 02:23:24,039
it looks kind of semi nonsensical

2579
02:23:14,620 --> 02:23:28,270
actually but anyway if you believe this

2580
02:23:24,040 --> 02:23:30,229
wildly now different set of numbers

2581
02:23:28,270 --> 02:23:33,260
possibly because we moved the camera

2582
02:23:30,228 --> 02:23:37,489
you can see that the original resolve is

2583
02:23:33,260 --> 02:23:40,360
expensive these are considerably less oh

2584
02:23:37,489 --> 02:23:40,360
right

2585
02:23:59,149 --> 02:24:13,010
and if that one is very expensive and I

2586
02:24:02,569 --> 02:24:15,979
have no idea why like that doesn't make

2587
02:24:13,010 --> 02:24:17,239
a lot of sense either does it so I I

2588
02:24:15,979 --> 02:24:19,219
don't know we're still a little bit

2589
02:24:17,239 --> 02:24:22,610
busted here we're kind of over time so I

2590
02:24:19,219 --> 02:24:24,739
should probably wrap it up but point

2591
02:24:22,610 --> 02:24:26,780
being I do think we should probably go

2592
02:24:24,739 --> 02:24:28,639
ahead and and push forward on that and

2593
02:24:26,780 --> 02:24:30,351
make sure we get that working because I

2594
02:24:28,639 --> 02:24:33,319
do think it would be fairly substantial

2595
02:24:30,351 --> 02:24:39,370
savings again if you just change this to

2596
02:24:33,319 --> 02:24:41,389
always being true so basically this

2597
02:24:39,370 --> 02:24:42,650
which of course it probably just

2598
02:24:41,389 --> 02:24:43,789
complained that for some reason now

2599
02:24:42,649 --> 02:24:46,940
we've written a completely ridiculous

2600
02:24:43,790 --> 02:24:52,070
shader that doesn't work but if we just

2601
02:24:46,940 --> 02:24:55,510
set that to always being true when we

2602
02:24:52,069 --> 02:24:55,510
run the application no thank you

2603
02:24:55,629 --> 02:25:03,079
that is so frustrating is that a problem

2604
02:24:59,690 --> 02:25:08,780
with for coder or a problem with I don't

2605
02:25:03,079 --> 02:25:11,829
know what that's problem with like it

2606
02:25:08,780 --> 02:25:11,829
really just doesn't make any sense

2607
02:25:32,040 --> 02:25:40,600
how about that we have not had this

2608
02:25:39,219 --> 02:25:45,099
problem before I wonder if it's because

2609
02:25:40,600 --> 02:25:51,940
of virtual white space actually in for

2610
02:25:45,100 --> 02:25:54,149
coder I'm not sure but we can take a

2611
02:25:51,940 --> 02:25:54,149
look

2612
02:25:59,899 --> 02:26:02,930
yeah I mean that's just garbage I mean

2613
02:26:01,940 --> 02:26:04,310
that's just total garbage

2614
02:26:02,930 --> 02:26:06,710
so I don't really know what to make of

2615
02:26:04,310 --> 02:26:09,049
that it could because of virtual

2616
02:26:06,709 --> 02:26:12,049
whitespace I'm not really sure it's

2617
02:26:09,049 --> 02:26:13,129
super annoying and really stupid and the

2618
02:26:12,049 --> 02:26:15,139
kind of thing that I hate about

2619
02:26:13,129 --> 02:26:16,819
developing software ever because it's

2620
02:26:15,139 --> 02:26:17,959
like it should not be something that I

2621
02:26:16,819 --> 02:26:21,379
ever have to think about what I'm

2622
02:26:17,959 --> 02:26:25,060
actually working and yet it's like 50%

2623
02:26:21,379 --> 02:26:30,829
of what I have to think about so I just

2624
02:26:25,060 --> 02:26:33,619
want to switch this off for a second and

2625
02:26:30,829 --> 02:26:35,209
leave it that way because I'd rather

2626
02:26:33,620 --> 02:26:37,360
come back to tomorrow knowing that it

2627
02:26:35,209 --> 02:26:40,459
wasn't broken in some other way right

2628
02:26:37,360 --> 02:26:45,260
that seems to be a hugely impossible

2629
02:26:40,459 --> 02:26:49,069
thing to ask of see and/or for coder I

2630
02:26:45,260 --> 02:26:54,500
don't know or perhaps just OpenGL so I'm

2631
02:26:49,069 --> 02:26:56,930
not sure why I can't you know it could

2632
02:26:54,500 --> 02:27:00,110
be that if I changed these let's just

2633
02:26:56,930 --> 02:27:04,639
hypothesize here if I changed all of

2634
02:27:00,110 --> 02:27:11,150
these comments to only be comments that

2635
02:27:04,639 --> 02:27:12,889
were C style then maybe it since it

2636
02:27:11,149 --> 02:27:16,129
doesn't matter where the line breaks are

2637
02:27:12,889 --> 02:27:17,479
at that point maybe that works because

2638
02:27:16,129 --> 02:27:20,179
it could be that what it was doing was

2639
02:27:17,479 --> 02:27:21,949
interpreting those comments as going

2640
02:27:20,180 --> 02:27:22,690
longer than they should have gone you

2641
02:27:21,950 --> 02:27:26,870
know what I mean

2642
02:27:22,690 --> 02:27:29,829
so I'm wondering if I just do this does

2643
02:27:26,870 --> 02:27:29,829
that solve the problem

2644
02:27:41,940 --> 02:27:47,489
nope so yeah I mean I have no idea what

2645
02:27:45,569 --> 02:27:49,529
it doesn't like doesn't really make any

2646
02:27:47,489 --> 02:27:51,030
sense to me it could be again pound

2647
02:27:49,530 --> 02:27:55,351
defiance probably wouldn't work either

2648
02:27:51,030 --> 02:27:56,970
in that case or pound ifs as well so if

2649
02:27:55,351 --> 02:27:59,400
it was getting confused about where the

2650
02:27:56,969 --> 02:28:01,529
line breaks are for some reason that

2651
02:27:59,399 --> 02:28:03,810
could be what I could do is look at what

2652
02:28:01,530 --> 02:28:06,360
the code is actually on disk that's

2653
02:28:03,810 --> 02:28:09,000
probably a good idea so if I come in to

2654
02:28:06,360 --> 02:28:10,950
remedy let's see what remedy thinks that

2655
02:28:09,000 --> 02:28:12,930
parse is like because it's not using the

2656
02:28:10,950 --> 02:28:26,240
virtual whitespace thing so if I

2657
02:28:12,930 --> 02:28:31,040
actually went into that code shouldn't I

2658
02:28:26,239 --> 02:28:31,039
know if I spelled it spelled it wrong

2659
02:28:37,139 --> 02:28:51,368
why did I get them I couldn't actually

2660
02:28:41,918 --> 02:28:54,039
get in there oh it probably just didn't

2661
02:28:51,369 --> 02:28:56,220
lined it no worries I'll just look at it

2662
02:28:54,039 --> 02:28:56,220
this way

2663
02:29:06,370 --> 02:29:11,079
so here's compiled resolve mother

2664
02:29:08,799 --> 02:29:14,849
example as it was written to disk here

2665
02:29:11,079 --> 02:29:14,850
is the fragment code right

2666
02:29:22,290 --> 02:29:30,750
you know it looks normal to me firm

2667
02:29:26,129 --> 02:29:30,750
pretty much all intents and purposes I

2668
02:29:32,430 --> 02:29:39,790
it doesn't look like for coders doing

2669
02:29:35,020 --> 02:29:41,500
anything weird there to me the error

2670
02:29:39,790 --> 02:29:43,240
output by the shader compiler is

2671
02:29:41,500 --> 02:29:55,360
horrible like it doesn't tell you at all

2672
02:29:43,239 --> 02:29:59,670
what's going on so I'm not sure I'm

2673
02:29:55,360 --> 02:30:11,560
grumpy but I'm not sure so I don't know

2674
02:29:59,670 --> 02:30:13,569
I also did that it didn't work I don't

2675
02:30:11,559 --> 02:30:15,639
know what's going on there I really

2676
02:30:13,569 --> 02:30:16,719
don't that's extremely frustrating and

2677
02:30:15,639 --> 02:30:20,680
it makes development that's almost

2678
02:30:16,719 --> 02:30:22,139
impossible so I'm gonna have to I guess

2679
02:30:20,680 --> 02:30:25,059
that's what we're actually doing Sunday

2680
02:30:22,139 --> 02:30:27,279
since there's no chance I can possibly

2681
02:30:25,059 --> 02:30:31,930
keep going with it just randomly failing

2682
02:30:27,280 --> 02:30:36,700
like that for no reason but I guess

2683
02:30:31,930 --> 02:30:40,780
that's where we're at so if I go through

2684
02:30:36,700 --> 02:30:43,240
here and when we do the Texel fetch I

2685
02:30:40,780 --> 02:30:48,700
just need some way of nerfing just this

2686
02:30:43,239 --> 02:30:50,648
one line right and so what I was trying

2687
02:30:48,700 --> 02:30:53,439
to do before you say well I would like

2688
02:30:50,648 --> 02:30:55,299
to set mask and maybe I just do it

2689
02:30:53,439 --> 02:30:57,760
without a carriage return I don't know I

2690
02:30:55,299 --> 02:31:03,039
would like to set mask to zero if

2691
02:30:57,760 --> 02:31:07,319
possible you know just to make sure that

2692
02:31:03,040 --> 02:31:07,320
it still works if I do that

2693
02:31:09,640 --> 02:31:13,911
all right and so then if I look in here

2694
02:31:12,171 --> 02:31:16,461
I'm just curious can does there still

2695
02:31:13,911 --> 02:31:21,081
have a bug so the bug is still there

2696
02:31:16,460 --> 02:31:24,530
even with that not happening so maybe

2697
02:31:21,081 --> 02:31:26,661
it's a little overblown maybe this

2698
02:31:24,531 --> 02:31:28,730
happens always so if I was to remove

2699
02:31:26,661 --> 02:31:31,630
that code entirely like we're just not

2700
02:31:28,729 --> 02:31:31,630
doing that anymore

2701
02:31:33,490 --> 02:31:40,570
so it only does the full the full

2702
02:31:39,140 --> 02:31:44,899
resolve and there's no checking

2703
02:31:40,570 --> 02:31:46,790
whatsoever right we just have that bug

2704
02:31:44,899 --> 02:31:50,990
like we've had that bug for the entire

2705
02:31:46,790 --> 02:31:52,670
time apparently and it just doesn't

2706
02:31:50,990 --> 02:31:54,681
really matter because you have to like

2707
02:31:52,671 --> 02:32:04,451
get up so close to see it or something

2708
02:31:54,681 --> 02:32:04,451
it does appear right like it's there

2709
02:32:08,989 --> 02:32:14,129
so I don't know unless we just

2710
02:32:11,700 --> 02:32:17,659
introduced that in some other way it

2711
02:32:14,129 --> 02:32:25,859
does look like actually this just worked

2712
02:32:17,659 --> 02:32:26,879
so I guess I can't leave that in because

2713
02:32:25,860 --> 02:32:28,560
it looks like that I didn't actually

2714
02:32:26,879 --> 02:32:32,359
introduce a bug now I still would want

2715
02:32:28,559 --> 02:32:39,529
to be a little more careful about that

2716
02:32:32,360 --> 02:32:39,530
but it does look like on the whole I

2717
02:32:42,229 --> 02:32:45,989
don't know I'm seeing artifacts that I

2718
02:32:44,549 --> 02:32:48,149
didn't see before though so I'm not

2719
02:32:45,989 --> 02:32:57,569
willing to believe that yet I still feel

2720
02:32:48,149 --> 02:33:02,850
like we've got issues here is it back

2721
02:32:57,569 --> 02:33:05,360
where it's just doing the the composite

2722
02:33:02,850 --> 02:33:05,360
at all times

2723
02:33:30,049 --> 02:33:35,288
and you know I don't see anything

2724
02:33:47,290 --> 02:34:00,000
everything looks nice and smooth so I'll

2725
02:33:53,829 --> 02:34:00,000
see any artifacts there put this back in

2726
02:34:20,110 --> 02:34:23,550
you know it does you know what artifacts

2727
02:34:21,940 --> 02:34:26,280
I actually am seeing it's just actually

2728
02:34:23,549 --> 02:34:28,509
anisotropic filtering on the MIT Maps

2729
02:34:26,280 --> 02:34:30,760
that's what I was actually seeing which

2730
02:34:28,510 --> 02:34:33,670
is new relatively speaking cuz we only

2731
02:34:30,760 --> 02:34:38,290
added MIT Maps recently probably to fix

2732
02:34:33,670 --> 02:34:46,870
this all right so maybe they weren't

2733
02:34:38,290 --> 02:34:52,750
Jenny all right so if we do actually now

2734
02:34:46,870 --> 02:34:56,590
finally run the game one more time to

2735
02:34:52,750 --> 02:35:00,521
the capture close it and look at the

2736
02:34:56,590 --> 02:35:03,430
timings now we can see we've done a

2737
02:35:00,521 --> 02:35:06,250
pretty good job it's not fabulous for

2738
02:35:03,430 --> 02:35:14,260
these two it looks like so maybe there's

2739
02:35:06,250 --> 02:35:16,780
some ah yes so we almost finished but

2740
02:35:14,260 --> 02:35:20,040
not quite we really were able to make

2741
02:35:16,780 --> 02:35:24,010
this be almost free right which is great

2742
02:35:20,040 --> 02:35:26,920
so but the other ones are not free so

2743
02:35:24,010 --> 02:35:29,680
this one in this one why because they're

2744
02:35:26,920 --> 02:35:33,340
not reading from the correct place

2745
02:35:29,680 --> 02:35:35,409
really this textile fetch is gonna it's

2746
02:35:33,340 --> 02:35:38,649
gonna be whatever this alpha value comes

2747
02:35:35,409 --> 02:35:42,549
back as right but we're not writing out

2748
02:35:38,649 --> 02:35:45,369
a alpha value that would indicate two

2749
02:35:42,549 --> 02:35:47,649
for the next step peel when we block it

2750
02:35:45,370 --> 02:35:51,430
we're not plugging up the value for that

2751
02:35:47,649 --> 02:35:53,379
depth peel right so what we actually

2752
02:35:51,430 --> 02:35:56,229
want to do is when we know we're

2753
02:35:53,379 --> 02:35:59,709
completely occluded we want to set our

2754
02:35:56,229 --> 02:36:02,649
blend unit color as well we want to set

2755
02:35:59,709 --> 02:36:06,009
that to have an alpha value of one right

2756
02:36:02,649 --> 02:36:08,289
so we want that is what I think we

2757
02:36:06,010 --> 02:36:09,579
actually want to do right now of course

2758
02:36:08,290 --> 02:36:11,680
I won't be able to do that because

2759
02:36:09,579 --> 02:36:17,139
heaven forfend I'm able to compile a

2760
02:36:11,680 --> 02:36:20,530
shader in 2019 but that's what we

2761
02:36:17,139 --> 02:36:23,170
actually needed right and so I think

2762
02:36:20,530 --> 02:36:26,829
that now if we actually take a look at

2763
02:36:23,170 --> 02:36:30,719
that it through via render dark doc as a

2764
02:36:26,829 --> 02:36:33,280
performance profile now I think we'd see

2765
02:36:30,719 --> 02:36:37,949
a pretty good

2766
02:36:33,280 --> 02:36:37,950
a pretty good improvement there right

2767
02:36:44,170 --> 02:36:48,939
so now if we take a look at the actual

2768
02:36:46,540 --> 02:36:52,210
times like now you can see these things

2769
02:36:48,939 --> 02:36:54,939
are minimal right this first resolve is

2770
02:36:52,209 --> 02:36:57,818
hugely expensive but all the rest of

2771
02:36:54,939 --> 02:36:59,680
these are almost free right and we

2772
02:36:57,818 --> 02:37:03,148
haven't really given anything up I don't

2773
02:36:59,680 --> 02:37:08,889
think I think we maintained all of our

2774
02:37:03,148 --> 02:37:11,829
all of our quality basically and man

2775
02:37:08,889 --> 02:37:12,789
just look at how much freer that is

2776
02:37:11,829 --> 02:37:17,620
right

2777
02:37:12,790 --> 02:37:23,620
like our render time went down by a

2778
02:37:17,620 --> 02:37:25,720
factor of almost four right so that's

2779
02:37:23,620 --> 02:37:27,550
really really good

2780
02:37:25,719 --> 02:37:30,309
and and I'm pretty excited about that

2781
02:37:27,549 --> 02:37:33,908
and I think we are still at exactly as

2782
02:37:30,309 --> 02:37:37,619
high quality as we were but now we just

2783
02:37:33,908 --> 02:37:41,738
take drastically less CPU time to do it

2784
02:37:37,620 --> 02:37:44,199
no I'm saying and let's just double

2785
02:37:41,738 --> 02:37:47,469
check double the test or double check

2786
02:37:44,199 --> 02:37:52,050
rather little check yeah let's just

2787
02:37:47,469 --> 02:37:56,369
verify that everything's still kicking

2788
02:37:52,049 --> 02:37:56,369
seems to be just fine

2789
02:37:58,661 --> 02:38:04,210
so that's good so not bad for you know

2790
02:38:01,450 --> 02:38:06,040
like we didn't quite get what I wanted

2791
02:38:04,210 --> 02:38:09,760
which is to not have to use multipling

2792
02:38:06,040 --> 02:38:12,250
at all but hey our multi sampling is now

2793
02:38:09,761 --> 02:38:14,711
really really cheap which is about the

2794
02:38:12,251 --> 02:38:16,751
next best thing right and I don't see

2795
02:38:14,710 --> 02:38:18,850
any artifacts in here other than maybe

2796
02:38:16,751 --> 02:38:20,921
some MIT mapping problems probably needs

2797
02:38:18,851 --> 02:38:24,730
them up and isotropic on those really

2798
02:38:20,921 --> 02:38:27,240
steep walls but other than that I think

2799
02:38:24,729 --> 02:38:27,240
we're good to go

2800
02:38:34,351 --> 02:38:44,310
oh my exceeding the size of the buffer I

2801
02:38:40,170 --> 02:39:01,979
could be let's find out

2802
02:38:44,310 --> 02:39:07,050
I should have actually said we're going

2803
02:39:01,979 --> 02:39:08,670
Q&amp;A but it'll also get fried good so if

2804
02:39:07,050 --> 02:39:11,420
this is like four thousand something

2805
02:39:08,670 --> 02:39:11,420
then maybe

2806
02:39:23,199 --> 02:39:30,299
um yeah that's going to optimize

2807
02:39:26,109 --> 02:39:30,299
doubtless let's just do it this way

2808
02:39:51,399 --> 02:39:58,569
that's close enough I mean it could be

2809
02:39:54,229 --> 02:40:02,389
right I would be willing to bet that

2810
02:39:58,569 --> 02:40:04,610
it's a good guess unfortunately I don't

2811
02:40:02,389 --> 02:40:05,869
quite remember exactly how much is in

2812
02:40:04,610 --> 02:40:15,159
there but yeah maybe with that comment

2813
02:40:05,870 --> 02:40:18,350
in there right so like yeah again I

2814
02:40:15,159 --> 02:40:22,479
really wish the it's nuts that I have to

2815
02:40:18,350 --> 02:40:25,340
do any of this it's ridiculous it's just

2816
02:40:22,479 --> 02:40:27,560
for some unknown reason and I don't know

2817
02:40:25,340 --> 02:40:29,659
what the reason is we can't seem to get

2818
02:40:27,560 --> 02:40:31,279
past the fact that we have all these

2819
02:40:29,659 --> 02:40:34,760
different compilers like all I really

2820
02:40:31,280 --> 02:40:36,980
want is to just have this in my code

2821
02:40:34,760 --> 02:40:39,590
right but instead I've got all this

2822
02:40:36,979 --> 02:40:40,699
janky it's like super janky how these

2823
02:40:39,590 --> 02:40:44,600
things are going through I'm not

2824
02:40:40,700 --> 02:40:46,400
surprised we hit that and there's really

2825
02:40:44,600 --> 02:40:48,680
not much I'm gonna probably do about

2826
02:40:46,399 --> 02:40:52,670
that either because it would you know

2827
02:40:48,680 --> 02:40:54,380
again it's just a pain and I also can't

2828
02:40:52,670 --> 02:40:56,360
even read these things right cuz they're

2829
02:40:54,379 --> 02:40:58,909
like not formatted properly because

2830
02:40:56,360 --> 02:41:04,000
they're formatted as a third string it's

2831
02:40:58,909 --> 02:41:07,579
just it sucks right but I don't know

2832
02:41:04,000 --> 02:41:10,280
sort of actually having a more developed

2833
02:41:07,579 --> 02:41:12,170
environment I don't know that there's

2834
02:41:10,280 --> 02:41:16,940
really much more I can do right because

2835
02:41:12,170 --> 02:41:18,560
it's like I don't the next step which is

2836
02:41:16,940 --> 02:41:20,090
the correct step is to be able to just

2837
02:41:18,560 --> 02:41:22,639
write the shaders directly into your

2838
02:41:20,090 --> 02:41:24,620
program as code and then when the

2839
02:41:22,639 --> 02:41:26,750
compiler pass goes over it extracts

2840
02:41:24,620 --> 02:41:28,160
those out using all of the correct pound

2841
02:41:26,750 --> 02:41:30,560
defines from your standard build and

2842
02:41:28,159 --> 02:41:34,521
everything and they just go into the

2843
02:41:30,560 --> 02:41:38,959
shader instead of going into your actual

2844
02:41:34,521 --> 02:41:41,420
executable right but that's something I

2845
02:41:38,959 --> 02:41:43,520
can build like you know when I'm doing a

2846
02:41:41,420 --> 02:41:45,260
full code base but on handmade hero I

2847
02:41:43,521 --> 02:41:50,780
just have to use the crappy tools I have

2848
02:41:45,260 --> 02:41:53,540
right and so is this a good way to do it

2849
02:41:50,780 --> 02:41:57,320
no do I want to build out the correct

2850
02:41:53,540 --> 02:42:00,371
solution no cuz we just don't have that

2851
02:41:57,319 --> 02:42:03,729
kind of time you know I'm saying

2852
02:42:00,370 --> 02:42:06,370
so unfortunately I think we probably

2853
02:42:03,729 --> 02:42:07,450
just keep stumbling along on it but

2854
02:42:06,370 --> 02:42:09,310
thanks for that cash because I was like

2855
02:42:07,450 --> 02:42:11,200
what the heck what's going on there

2856
02:42:09,310 --> 02:42:16,140
guess 4,096 isn't as big as I thought it

2857
02:42:11,200 --> 02:42:16,140
was that's crazy that that's a 4k shader

2858
02:42:16,380 --> 02:42:19,649
but it is

2859
02:42:30,750 --> 02:42:36,100
makes you appreciate why shipping

2860
02:42:32,978 --> 02:42:39,429
shaders as a as source it's not great

2861
02:42:36,100 --> 02:42:48,908
either right because that's actually 4k

2862
02:42:39,430 --> 02:42:51,720
and it hardly does anything all right so

2863
02:42:48,908 --> 02:42:55,199
we have zero questions it looks like

2864
02:42:51,719 --> 02:42:55,198
that makes it easy

2865
02:43:33,600 --> 02:43:39,899
couldn't you just not um no I mean that

2866
02:43:37,139 --> 02:43:43,829
would be nice right but the problem is

2867
02:43:39,899 --> 02:43:46,949
that we actually stick crap in there so

2868
02:43:43,829 --> 02:43:53,760
like we actually dump in the max multi

2869
02:43:46,950 --> 02:43:57,600
sample count and so unfortunately we

2870
02:43:53,760 --> 02:44:02,159
have to specify a size at a time again

2871
02:43:57,600 --> 02:44:04,110
this is stuff that is just because of

2872
02:44:02,159 --> 02:44:11,159
the limitations of the crappy language

2873
02:44:04,110 --> 02:44:12,480
that we use but you know why can't you

2874
02:44:11,159 --> 02:44:14,190
just run the pre-press around the

2875
02:44:12,479 --> 02:44:16,549
shaders though well I can't like so

2876
02:44:14,190 --> 02:44:20,340
there's a couple things I could do right

2877
02:44:16,549 --> 02:44:22,859
but again there's really no way to do

2878
02:44:20,340 --> 02:44:28,280
this kind of operation so what you want

2879
02:44:22,860 --> 02:44:28,280
is you want this sort of stuff to be

2880
02:44:30,290 --> 02:44:35,490
what you want to be able to do is you

2881
02:44:33,271 --> 02:44:37,590
want to be able to do something like let

2882
02:44:35,489 --> 02:44:40,409
me go through all of the max multi

2883
02:44:37,590 --> 02:44:42,780
sample counts I might use let me compile

2884
02:44:40,409 --> 02:44:45,360
all of the this shader multiple times

2885
02:44:42,780 --> 02:44:48,659
into multiple buckets and then pick the

2886
02:44:45,360 --> 02:44:50,190
right one based on that that would be

2887
02:44:48,659 --> 02:44:52,289
very easy to do in a meta programming

2888
02:44:50,190 --> 02:44:55,920
environment right like it'd just be

2889
02:44:52,290 --> 02:44:58,800
trivial really but the way that modern

2890
02:44:55,920 --> 02:45:01,860
like C++ and stuff works they don't have

2891
02:44:58,799 --> 02:45:03,569
any of these abilities in them so as a

2892
02:45:01,860 --> 02:45:06,840
result what we're doing is we have to

2893
02:45:03,569 --> 02:45:09,209
basically do a printf or you know choose

2894
02:45:06,840 --> 02:45:12,120
any other string operation to produce

2895
02:45:09,209 --> 02:45:15,089
the fragment code and insert dynamically

2896
02:45:12,120 --> 02:45:16,079
at runtime which one of these settings

2897
02:45:15,090 --> 02:45:21,329
happens to be true

2898
02:45:16,079 --> 02:45:23,309
right so as a result we have to pick how

2899
02:45:21,329 --> 02:45:26,069
big the things gonna be even though we

2900
02:45:23,309 --> 02:45:29,279
really don't need that because

2901
02:45:26,069 --> 02:45:30,779
technically what we could do you know

2902
02:45:29,280 --> 02:45:32,880
technically this is just going to a

2903
02:45:30,780 --> 02:45:35,430
shader compiler right which firstly we

2904
02:45:32,879 --> 02:45:36,629
don't have access to but even if you

2905
02:45:35,430 --> 02:45:38,280
were like going to use an intermediate

2906
02:45:36,629 --> 02:45:39,869
representation or something right then

2907
02:45:38,280 --> 02:45:43,021
there would be no need for any of this

2908
02:45:39,870 --> 02:45:46,079
because you could already pre the

2909
02:45:43,021 --> 02:45:47,460
compiler could already have taking all

2910
02:45:46,079 --> 02:45:49,409
of that and converted it to the toe

2911
02:45:47,459 --> 02:45:52,139
and then all we were doing is replacing

2912
02:45:49,409 --> 02:45:55,049
a constant in there with the constants

2913
02:45:52,139 --> 02:45:56,579
we wanted right but none of that is on

2914
02:45:55,049 --> 02:45:58,409
the table because like development

2915
02:45:56,579 --> 02:46:00,569
systems are so far from being anywhere

2916
02:45:58,409 --> 02:46:02,190
near being able to do that that we just

2917
02:46:00,569 --> 02:46:04,409
have to kind of like clunk this stuff

2918
02:46:02,190 --> 02:46:06,060
together and it's not good and if you

2919
02:46:04,409 --> 02:46:07,889
really wanted to solve the problem well

2920
02:46:06,060 --> 02:46:10,199
you wouldn't do what I'm doing here

2921
02:46:07,889 --> 02:46:12,299
right but you always have to make a

2922
02:46:10,200 --> 02:46:14,311
trade-off like am I going to spend a

2923
02:46:12,299 --> 02:46:16,350
bunch you know several weeks making this

2924
02:46:14,310 --> 02:46:18,329
system that does all of these fancy

2925
02:46:16,351 --> 02:46:20,010
things or am I just gonna get by with

2926
02:46:18,329 --> 02:46:21,930
having to deal with the occasional bug

2927
02:46:20,010 --> 02:46:23,069
because like this buffers gets truncated

2928
02:46:21,930 --> 02:46:26,159
or something right

2929
02:46:23,069 --> 02:46:27,420
now that I know what that error is I'll

2930
02:46:26,159 --> 02:46:29,579
just know to increase the buffer size

2931
02:46:27,420 --> 02:46:30,899
but I was just could not tell it was

2932
02:46:29,579 --> 02:46:33,389
very confusing what it was trying to

2933
02:46:30,899 --> 02:46:35,869
tell me all right so there's a little

2934
02:46:33,389 --> 02:46:35,869
too cryptic

2935
02:46:41,079 --> 02:46:47,469
let me try to see if there's any other

2936
02:46:43,520 --> 02:46:47,470
questions alright so that's it

2937
02:46:53,390 --> 02:46:56,390
do you have any concept of life

2938
02:46:54,950 --> 02:46:57,801
stringbuilder that you could use with

2939
02:46:56,390 --> 02:46:59,270
your format string function to have it

2940
02:46:57,800 --> 02:47:01,341
pass you back a string allocated from

2941
02:46:59,271 --> 02:47:02,210
temp memory is a small thing but you

2942
02:47:01,341 --> 02:47:02,780
wouldn't need to think to worry about

2943
02:47:02,209 --> 02:47:05,119
that anymore

2944
02:47:02,780 --> 02:47:08,511
um I do have that when I'm actually

2945
02:47:05,120 --> 02:47:13,091
programming like in my code base we

2946
02:47:08,511 --> 02:47:13,091
don't have that on hand made here oh we

2947
02:47:13,899 --> 02:47:22,399
we probably could make one without too

2948
02:47:17,329 --> 02:47:29,000
much time because we do have a streaming

2949
02:47:22,399 --> 02:47:31,091
buffer like we do have this right so we

2950
02:47:29,000 --> 02:47:36,440
could probably do that

2951
02:47:31,091 --> 02:47:37,940
maybe but again it's just probably not

2952
02:47:36,440 --> 02:47:41,329
worth the time to make it right because

2953
02:47:37,940 --> 02:47:42,771
we don't really do this anywhere this

2954
02:47:41,329 --> 02:47:46,931
would be the only place that would get

2955
02:47:42,771 --> 02:47:46,931
used so

2956
02:48:03,738 --> 02:48:11,648
let's see someone was suggesting dual

2957
02:48:08,568 --> 02:48:11,648
depth peeling

2958
02:48:19,950 --> 02:48:26,479
they have not enabled multi sampling

2959
02:48:22,290 --> 02:48:26,479
however I think it's possible to work uh

2960
02:48:26,510 --> 02:48:31,079
so but but what we were working with was

2961
02:48:29,879 --> 02:48:43,500
specifically well they're sampling I'm

2962
02:48:31,079 --> 02:48:45,920
not sure I could look at it though it's

2963
02:48:43,500 --> 02:48:45,920
this it

2964
02:48:49,590 --> 02:49:04,500
SDK 10 of Virgil screenshots samples yes

2965
02:48:55,978 --> 02:49:04,500
we can just take a look let's see

2966
02:49:25,510 --> 02:49:35,569
yeah so that does sound at least

2967
02:49:28,851 --> 02:49:39,050
interesting just kind of reduce the

2968
02:49:35,569 --> 02:49:40,579
number of depth field passes I'm not

2969
02:49:39,049 --> 02:49:42,729
sure I'd see what they actually do here

2970
02:49:40,579 --> 02:49:42,729
though

2971
02:50:00,959 --> 02:50:06,489
so here's the money part we solve this

2972
02:50:03,909 --> 02:50:17,140
issue by working on a sliding window of

2973
02:50:06,489 --> 02:50:19,351
two consecutive layers I'm not sure what

2974
02:50:17,140 --> 02:50:19,350
that means

2975
02:50:33,851 --> 02:50:39,489
we essentially turn off the hardware

2976
02:50:36,729 --> 02:50:42,489
depth buffer and use blending to perform

2977
02:50:39,489 --> 02:50:45,640
the read-modify-write part of our custom

2978
02:50:42,489 --> 02:50:53,170
depth test the peeled fragments from the

2979
02:50:45,640 --> 02:50:59,409
front layers need to get mMmmm I'm less

2980
02:50:53,170 --> 02:51:02,500
enthusiastic about that though because

2981
02:50:59,409 --> 02:51:07,149
that may get off certain fast paths that

2982
02:51:02,500 --> 02:51:09,629
are about depth testing is the only

2983
02:51:07,149 --> 02:51:09,629
thing

2984
02:51:15,728 --> 02:51:19,168
I mean maybe it's fine

2985
02:51:41,310 --> 02:51:46,079
so yeah I'm not sure about this I would

2986
02:51:44,399 --> 02:51:47,399
have to digest it a little bit more and

2987
02:51:46,079 --> 02:51:53,940
think about whether there's anything

2988
02:51:47,399 --> 02:51:56,720
from here that I particularly wanted but

2989
02:51:53,940 --> 02:51:56,721
I'm not sure

2990
02:52:05,239 --> 02:52:17,510
I'm not sure I get what they're saying

2991
02:52:11,719 --> 02:52:19,849
but I I'm a little nervous about the the

2992
02:52:17,510 --> 02:52:27,469
fact that it's not using hardware depth

2993
02:52:19,850 --> 02:52:28,940
testing I would want to hear from

2994
02:52:27,469 --> 02:52:30,500
somebody who actually did the

2995
02:52:28,940 --> 02:52:34,159
performance profiling on a modern

2996
02:52:30,500 --> 02:52:37,489
hardware card that that was okay before

2997
02:52:34,159 --> 02:52:44,260
I actually spent the time to implement

2998
02:52:37,489 --> 02:52:44,260
that you know I'm saying

2999
02:52:59,920 --> 02:53:05,109
so I don't know I don't know how I feel

3000
02:53:02,719 --> 02:53:05,108
about that

3001
02:53:19,299 --> 02:53:23,019
have you considered using render talk

3002
02:53:21,430 --> 02:53:26,010
directly to recompile the shaders at

3003
02:53:23,020 --> 02:53:33,310
runtime during rapid development um I

3004
02:53:26,010 --> 02:53:34,960
haven't really but I probably should we

3005
02:53:33,309 --> 02:53:39,368
can actually recompile the shaders I

3006
02:53:34,959 --> 02:53:45,339
think ourselves on the fly like in other

3007
02:53:39,369 --> 02:53:47,800
words the act of recompiling them in the

3008
02:53:45,340 --> 02:53:52,000
game is pretty easy I think we can just

3009
02:53:47,799 --> 02:53:54,969
do that like if I go in here and want to

3010
02:53:52,000 --> 02:54:00,639
change the color of something like you

3011
02:53:54,969 --> 02:54:02,408
know I think we just can and then when

3012
02:54:00,639 --> 02:54:06,189
you recompile the game I think it

3013
02:54:02,408 --> 02:54:09,189
reloads maybe it doesn't oh you know

3014
02:54:06,189 --> 02:54:11,020
what it might not because we don't

3015
02:54:09,189 --> 02:54:13,210
reload the graphics driver anymore you

3016
02:54:11,020 --> 02:54:15,369
used to do that but I guess we don't

3017
02:54:13,209 --> 02:54:18,179
anymore so that might be helpful we

3018
02:54:15,369 --> 02:54:20,229
could also just re-enable that meaning

3019
02:54:18,180 --> 02:54:23,020
re-enable the ability to reload the

3020
02:54:20,228 --> 02:54:24,639
graphics driver at whenever it changes

3021
02:54:23,020 --> 02:54:25,840
we just don't do that in the platform

3022
02:54:24,639 --> 02:54:27,398
layer right now so I don't know which of

3023
02:54:25,840 --> 02:54:29,109
those two things I'd rather do we

3024
02:54:27,398 --> 02:54:31,840
haven't spent that much time working on

3025
02:54:29,109 --> 02:54:33,729
these at the moment so it's not that bad

3026
02:54:31,840 --> 02:54:37,898
but when we do the lighting that may be

3027
02:54:33,728 --> 02:54:42,549
helpful so it's hard to say yeah I mean

3028
02:54:37,898 --> 02:54:43,719
I can't see some episodes ago you said

3029
02:54:42,549 --> 02:54:45,578
you didn't understand why John credit

3030
02:54:43,719 --> 02:54:49,778
your unbraid since you didn't do any

3031
02:54:45,578 --> 02:54:51,728
work on it uh well no that that wasn't

3032
02:54:49,779 --> 02:54:53,738
what I said or at least hopefully that

3033
02:54:51,728 --> 02:54:56,648
wasn't what I said I mean go check the

3034
02:54:53,738 --> 02:55:01,658
video what I said was I'm not sure why I

3035
02:54:56,648 --> 02:55:04,420
was credited so prominently in fact I

3036
02:55:01,658 --> 02:55:06,368
specifically think I said it would have

3037
02:55:04,420 --> 02:55:08,170
made more sense if I was just listed as

3038
02:55:06,369 --> 02:55:12,119
like additional programming or something

3039
02:55:08,170 --> 02:55:14,379
but instead I got listed like as a

3040
02:55:12,119 --> 02:55:16,770
special section like right at the

3041
02:55:14,379 --> 02:55:21,809
beginning of the credits that was like

3042
02:55:16,770 --> 02:55:24,460
rewind evangelist very prominently and

3043
02:55:21,809 --> 02:55:29,049
while it's certainly nice of John to

3044
02:55:24,459 --> 02:55:31,538
give me credit for something it really

3045
02:55:29,049 --> 02:55:32,709
probably wasn't super earned is all

3046
02:55:31,539 --> 02:55:38,800
because

3047
02:55:32,709 --> 02:55:42,879
I was I didn't come up with any of the

3048
02:55:38,799 --> 02:55:44,709
sign for braids oh I I was he who said

3049
02:55:42,879 --> 02:55:47,469
that because of a baling list post I've

3050
02:55:44,709 --> 02:55:48,939
made that was just talking about how the

3051
02:55:47,469 --> 02:55:50,379
players time is valuable on the so if

3052
02:55:48,940 --> 02:55:52,569
you're going to make them do something a

3053
02:55:50,379 --> 02:55:55,209
second time you should make it be

3054
02:55:52,569 --> 02:55:57,190
worthwhile and games that aren't gonna

3055
02:55:55,209 --> 02:55:59,019
do that you just have rewind so I can

3056
02:55:57,190 --> 02:56:01,329
just like correct my mistake and move on

3057
02:55:59,020 --> 02:56:07,120
right because that just seemed natural

3058
02:56:01,329 --> 02:56:09,579
to me so he gave me credit in the game

3059
02:56:07,120 --> 02:56:10,990
because of that mail but the mail was

3060
02:56:09,579 --> 02:56:14,260
just complaining about something else

3061
02:56:10,989 --> 02:56:18,520
right so it was really the entire idea

3062
02:56:14,260 --> 02:56:22,719
was John's idea not mine it's sort of

3063
02:56:18,520 --> 02:56:25,930
like if you gave someone credit for a

3064
02:56:22,719 --> 02:56:27,519
game you wrote because like you thought

3065
02:56:25,930 --> 02:56:29,229
of the game idea after reading like a

3066
02:56:27,520 --> 02:56:30,970
short story or something even though

3067
02:56:29,228 --> 02:56:33,728
that short story does not appear in the

3068
02:56:30,969 --> 02:56:37,569
game you know and so it's kind of just

3069
02:56:33,728 --> 02:56:41,409
like giving me credit as being a source

3070
02:56:37,569 --> 02:56:44,079
of inspiration for something which again

3071
02:56:41,409 --> 02:56:48,728
is very generous it's just probably not

3072
02:56:44,079 --> 02:56:52,870
deserved it's like if you actually were

3073
02:56:48,728 --> 02:56:56,019
there and saw the connection it was very

3074
02:56:52,870 --> 02:56:58,060
tenuous and the entire like goodness

3075
02:56:56,020 --> 02:57:01,569
that came out of it was because of John

3076
02:56:58,059 --> 02:57:03,579
having a whole suite of ideas that

3077
02:57:01,569 --> 02:57:06,789
really weren't contained in that mail

3078
02:57:03,579 --> 02:57:08,860
and honestly we're very tangentially

3079
02:57:06,790 --> 02:57:09,300
related to that mail you know what I

3080
02:57:08,860 --> 02:57:13,510
mean

3081
02:57:09,299 --> 02:57:15,129
so again love to have the credit and

3082
02:57:13,510 --> 02:57:17,800
it's super nice of someone to go out of

3083
02:57:15,129 --> 02:57:18,909
their way to credit you especially you

3084
02:57:17,799 --> 02:57:23,199
know circumstance like that where you

3085
02:57:18,909 --> 02:57:25,360
really don't deserve it you know but

3086
02:57:23,200 --> 02:57:26,800
that's why when someone was asking me I

3087
02:57:25,360 --> 02:57:28,390
think they asked me why I was credit is

3088
02:57:26,799 --> 02:57:31,989
rewind evangelist I was just trying to

3089
02:57:28,389 --> 02:57:34,478
be honest by saying like if to be frank

3090
02:57:31,989 --> 02:57:38,770
like really honestly the only thing that

3091
02:57:34,478 --> 02:57:44,409
I contributed to braid was the like code

3092
02:57:38,770 --> 02:57:46,690
for rounded rectangle

3093
02:57:44,409 --> 02:57:49,780
collision detection because and it was

3094
02:57:46,690 --> 02:57:51,819
because John was like I have to be

3095
02:57:49,780 --> 02:57:53,471
sitting at the same table as him with

3096
02:57:51,819 --> 02:57:55,181
laptops out one time and he was just

3097
02:57:53,470 --> 02:57:57,970
like this is stupid thing that's in here

3098
02:57:55,181 --> 02:57:59,500
it's not smooth I'm gonna replace it

3099
02:57:57,970 --> 02:58:02,529
with something good and I was like oh

3100
02:57:59,500 --> 02:58:05,319
I've got this like one fly like this you

3101
02:58:02,530 --> 02:58:07,681
know literally one file that's a rounded

3102
02:58:05,319 --> 02:58:09,640
rectangle overlap tester you know

3103
02:58:07,681 --> 02:58:14,471
that'll give you the rounded rectangles

3104
02:58:09,640 --> 02:58:16,390
you want go for it right that that was

3105
02:58:14,470 --> 02:58:18,930
the sum total of like my contribution to

3106
02:58:16,390 --> 02:58:22,840
braid you know that and playing the game

3107
02:58:18,931 --> 02:58:24,880
in beta but I don't even really know if

3108
02:58:22,840 --> 02:58:26,470
I ever I don't remember what feedback I

3109
02:58:24,879 --> 02:58:28,149
had on the game but I don't I don't

3110
02:58:26,470 --> 02:58:31,750
actually think I really had any valuable

3111
02:58:28,149 --> 02:58:34,899
feedback either so so it was like it was

3112
02:58:31,750 --> 02:58:37,239
the the the the level of billing I got

3113
02:58:34,899 --> 02:58:43,720
in braids versus the level of

3114
02:58:37,239 --> 02:58:47,771
contribution in braids are not related I

3115
02:58:43,720 --> 02:58:55,289
got much higher billing than then then

3116
02:58:47,771 --> 02:58:55,290
my contribution by far

3117
02:59:07,299 --> 02:59:13,810
how would you implant in debug systems

3118
02:59:09,619 --> 02:59:21,939
the way of changing also v3 v4 values

3119
02:59:13,809 --> 02:59:21,939
don't we as we we have that don't we

3120
02:59:24,309 --> 02:59:29,988
though don't we have a thing that adds

3121
02:59:27,529 --> 02:59:33,310
beat like we have that in like the they

3122
02:59:29,988 --> 02:59:33,309
like placement editor right

3123
02:59:56,328 --> 02:59:59,568
I just watched the video about sub-pixel

3124
02:59:58,100 --> 03:00:01,010
sampling for peace our diocese thanks

3125
02:59:59,568 --> 03:00:02,658
for explaining it was really good I have

3126
03:00:01,010 --> 03:00:04,578
two related questions though when you

3127
03:00:02,658 --> 03:00:06,500
viewed the spritesheet you noticed this

3128
03:00:04,578 --> 03:00:08,090
not alpha premultiplied and kind of

3129
03:00:06,500 --> 03:00:11,180
mentioned that it might be a problem I

3130
03:00:08,090 --> 03:00:13,549
was wondering why the reason why is

3131
03:00:11,180 --> 03:00:15,590
because premultiplied alpha is the only

3132
03:00:13,549 --> 03:00:19,340
way to make sprites sample properly

3133
03:00:15,590 --> 03:00:22,309
using bilinear filtering using hardware

3134
03:00:19,340 --> 03:00:24,590
bilinear filtering or maybe I should say

3135
03:00:22,309 --> 03:00:28,670
the default way that hardware does

3136
03:00:24,590 --> 03:00:31,549
bilinear filtering so if you have non

3137
03:00:28,670 --> 03:00:32,238
premultiplied alpha then your bilinear

3138
03:00:31,549 --> 03:00:35,358
filtering

3139
03:00:32,238 --> 03:00:37,719
will be wrong unless you actually pre

3140
03:00:35,359 --> 03:00:42,229
multiply first and then bilinear filter

3141
03:00:37,719 --> 03:00:48,469
right and so all I was saying is that

3142
03:00:42,228 --> 03:00:53,328
using bilinear fetch won't work at the

3143
03:00:48,469 --> 03:00:55,879
places where the alpha is not 1 or 0 and

3144
03:00:53,328 --> 03:00:57,559
so they kind of set us up for failure

3145
03:00:55,879 --> 03:00:59,358
even if we had been able to place a

3146
03:00:57,559 --> 03:01:02,180
shader we would got some black fringing

3147
03:00:59,359 --> 03:01:06,939
around the edges of things when we tried

3148
03:01:02,180 --> 03:01:09,229
to use bilinear to to filter that's all

3149
03:01:06,939 --> 03:01:12,648
as for number 2 which is you mentioned

3150
03:01:09,228 --> 03:01:14,688
that they don't use maps and you're

3151
03:01:12,648 --> 03:01:17,000
saying how should we produce nips for

3152
03:01:14,689 --> 03:01:21,889
pixel art assets box filtering would not

3153
03:01:17,000 --> 03:01:25,430
works it's made for bilinear so I guess

3154
03:01:21,889 --> 03:01:27,618
what I would say there is just that when

3155
03:01:25,430 --> 03:01:31,488
you're making something when you're

3156
03:01:27,619 --> 03:01:35,619
minifying something like that so you're

3157
03:01:31,488 --> 03:01:38,359
taking something that was previously

3158
03:01:35,619 --> 03:01:40,369
what you know that would be when you

3159
03:01:38,359 --> 03:01:43,460
shrunk it all the way down so that your

3160
03:01:40,369 --> 03:01:48,100
pixel art is one pixel per per screen

3161
03:01:43,459 --> 03:01:48,099
pixel one texel per screen pixel right

3162
03:01:49,658 --> 03:01:58,908
so when you do that what ends up

3163
03:01:52,369 --> 03:02:00,560
happening is you by the time you've

3164
03:01:58,908 --> 03:02:03,350
gotten down there when you want to

3165
03:02:00,559 --> 03:02:06,618
shrink it smaller bilinear is probably

3166
03:02:03,350 --> 03:02:08,600
fine because the pixel art is too small

3167
03:02:06,619 --> 03:02:09,771
at that part point to look like pixel

3168
03:02:08,600 --> 03:02:12,409
art anyway

3169
03:02:09,771 --> 03:02:16,431
probably should just by linear filter so

3170
03:02:12,409 --> 03:02:17,590
Minah fication filter is fine I think it

3171
03:02:16,431 --> 03:02:20,300
should be just fine

3172
03:02:17,590 --> 03:02:22,760
magnification filter is the only time

3173
03:02:20,299 --> 03:02:26,060
when you can't just turn on by linear

3174
03:02:22,760 --> 03:02:30,010
and forget right so the MIT map should

3175
03:02:26,060 --> 03:02:32,270
just be fine I think

3176
03:02:30,010 --> 03:02:34,431
and I guess I haven't thought about too

3177
03:02:32,271 --> 03:02:35,870
hard but you may need to put an if in

3178
03:02:34,431 --> 03:02:38,450
the shader that just says look if I

3179
03:02:35,870 --> 03:02:40,010
minifying don't just dudes regular by

3180
03:02:38,450 --> 03:02:45,829
philipp bilinear and forget about it

3181
03:02:40,010 --> 03:02:47,690
right Ciara as he says you're right but

3182
03:02:45,829 --> 03:02:50,750
I think you need to point something yeah

3183
03:02:47,690 --> 03:02:53,810
so for point sampling then you don't

3184
03:02:50,750 --> 03:02:56,351
have to worry about it right so the

3185
03:02:53,810 --> 03:03:02,270
reason that they don't also have

3186
03:02:56,351 --> 03:03:05,420
premultiplied alpha the reason why they

3187
03:03:02,271 --> 03:03:07,010
don't also have black fringing on their

3188
03:03:05,420 --> 03:03:09,140
sprites magician to all the other visual

3189
03:03:07,010 --> 03:03:14,360
bugs they have is because since they're

3190
03:03:09,140 --> 03:03:17,390
not properly filtering using any kind of

3191
03:03:14,360 --> 03:03:19,221
blending they don't have to worry about

3192
03:03:17,390 --> 03:03:21,289
the fact that they're not premultiplied

3193
03:03:19,220 --> 03:03:23,449
alpha but once you actually do the

3194
03:03:21,290 --> 03:03:25,370
correct blending for pixel art you are

3195
03:03:23,450 --> 03:03:26,811
using the bilinear Hardware you're not

3196
03:03:25,370 --> 03:03:28,490
just using it the same way you would be

3197
03:03:26,810 --> 03:03:31,010
if you didn't adjust your UV coordinates

3198
03:03:28,489 --> 03:03:33,319
but you are using it right and at that

3199
03:03:31,010 --> 03:03:35,120
point you have to then again make sure

3200
03:03:33,319 --> 03:03:37,399
using premultiplied alpha because if you

3201
03:03:35,120 --> 03:03:39,530
don't then bilinear filtering doesn't

3202
03:03:37,399 --> 03:03:41,510
work right I mean it works but it

3203
03:03:39,530 --> 03:03:48,500
produces subtly wrong results the alphas

3204
03:03:41,510 --> 03:03:49,909
not correct right serious this is thank

3205
03:03:48,500 --> 03:03:52,760
you rich for the skinned mesh video I

3206
03:03:49,909 --> 03:03:55,789
still have to watch it what you haven't

3207
03:03:52,760 --> 03:03:58,550
watched it yet I specifically made that

3208
03:03:55,790 --> 03:04:01,610
video for you you have to go watch it go

3209
03:03:58,549 --> 03:04:04,270
watch it alright that's it for questions

3210
03:04:01,610 --> 03:04:04,271
it's time for bed

3211
03:04:08,829 --> 03:04:16,601
what's the problem here you'll

3212
03:04:14,620 --> 03:04:19,021
accidentally insert something I don't

3213
03:04:16,601 --> 03:04:19,021
think I did

3214
03:04:25,850 --> 03:04:29,720
all right thank you everyone for joining

3215
03:04:27,770 --> 03:04:31,850
me for the episode a handmade hero so a

3216
03:04:29,719 --> 03:04:34,068
pleasure coding with you as always if

3217
03:04:31,850 --> 03:04:35,809
you would like to follow along with the

3218
03:04:34,068 --> 03:04:37,219
source code at home you can always peer

3219
03:04:35,809 --> 03:04:39,260
out of the game on handmade hero dorg

3220
03:04:37,219 --> 03:04:40,549
and it comes to the source code right

3221
03:04:39,260 --> 03:04:43,090
away so you could play around with it

3222
03:04:40,549 --> 03:04:45,500
even while it's still in development

3223
03:04:43,090 --> 03:04:47,600
again as I mentioned at the beginning we

3224
03:04:45,500 --> 03:04:49,279
now have a discord as well I'm probably

3225
03:04:47,600 --> 03:04:51,738
gonna put some links on here so you can

3226
03:04:49,279 --> 03:04:53,149
click and go directly to it but while

3227
03:04:51,738 --> 03:04:54,228
we're still working out the kinks if you

3228
03:04:53,148 --> 03:04:56,809
do want to check it out

3229
03:04:54,228 --> 03:04:59,269
it's just discord GG slash Molly Rocket

3230
03:04:56,809 --> 03:05:01,398
and that'll go straight to our discord

3231
03:04:59,270 --> 03:05:03,350
if you're on discord check it out

3232
03:05:01,398 --> 03:05:04,608
there's plenty of fun discussion that

3233
03:05:03,350 --> 03:05:06,100
seems to be going on there it's it's

3234
03:05:04,609 --> 03:05:11,600
been pretty good so far

3235
03:05:06,100 --> 03:05:13,309
so give that a little look-see if you if

3236
03:05:11,600 --> 03:05:15,350
you're interested in chatting about the

3237
03:05:13,309 --> 03:05:16,908
series or game development related

3238
03:05:15,350 --> 03:05:19,550
things or just interested in checking

3239
03:05:16,908 --> 03:05:21,939
out some of our other projects that

3240
03:05:19,549 --> 03:05:24,469
we've got in the pipeline at market

3241
03:05:21,939 --> 03:05:28,130
that's it for today I'll be back here on

3242
03:05:24,469 --> 03:05:29,658
Sunday for I guess at that point we've

3243
03:05:28,129 --> 03:05:32,539
pretty much done everything we needed to

3244
03:05:29,658 --> 03:05:33,978
do so I think at that point maybe we

3245
03:05:32,540 --> 03:05:36,920
don't really need to do anything other

3246
03:05:33,978 --> 03:05:38,799
than finish up the training on like

3247
03:05:36,920 --> 03:05:41,148
ground cover and getting that flowing

3248
03:05:38,799 --> 03:05:44,209
faster through the pipeline and then

3249
03:05:41,148 --> 03:05:47,689
we've got a pretty good performance

3250
03:05:44,209 --> 03:05:49,429
oriented profile on our GPU at least for

3251
03:05:47,689 --> 03:05:52,850
this stage of development I think

3252
03:05:49,430 --> 03:05:54,199
certainly so I think then we're good to

3253
03:05:52,850 --> 03:05:55,068
dump lighting in there and see how much

3254
03:05:54,199 --> 03:05:57,710
worse it gets

3255
03:05:55,068 --> 03:05:59,299
alright that's about it for today I'll

3256
03:05:57,709 --> 03:06:00,709
see you back around Sunday until then

3257
03:05:59,299 --> 03:06:04,329
have fun programming and I'll see

3258
03:06:00,709 --> 03:06:04,329
everyone on the Internet tabes everybody

