1
00:00:00,030 --> 00:00:07,770
start recording hello everyone and

2
00:00:03,060 --> 00:00:09,449
welcome to handmade hero this is the

3
00:00:07,769 --> 00:00:14,460
show where we code a complete game live

4
00:00:09,449 --> 00:00:16,100
on stream and we unfortunately we

5
00:00:14,460 --> 00:00:18,150
finished what we were doing yesterday

6
00:00:16,100 --> 00:00:21,118
which is always it's good to finish

7
00:00:18,149 --> 00:00:22,948
things but it means that we don't really

8
00:00:21,118 --> 00:00:25,528
know what we're doing today right we do

9
00:00:22,949 --> 00:00:29,760
not know what is the most appropriate

10
00:00:25,528 --> 00:00:33,030
thing for us to come back and do so I

11
00:00:29,760 --> 00:00:35,370
don't know what's gonna happen here and

12
00:00:33,030 --> 00:00:38,549
so I'm gonna have to see I'm gonna have

13
00:00:35,369 --> 00:00:40,378
to look at the list and see what we feel

14
00:00:38,549 --> 00:00:42,899
like doing because we have plenty of

15
00:00:40,378 --> 00:00:44,968
options there's plenty of things to do

16
00:00:42,899 --> 00:00:46,530
it's not like we're done by any stretch

17
00:00:44,969 --> 00:00:48,689
of the imagination

18
00:00:46,530 --> 00:00:54,660
but there is a question of what do we

19
00:00:48,689 --> 00:00:57,750
actually want to do here so we we did

20
00:00:54,659 --> 00:01:02,308
some of these things we got rid of the

21
00:00:57,750 --> 00:01:03,689
even scanline notation and we got put in

22
00:01:02,308 --> 00:01:07,228
the sorting which for some reason was

23
00:01:03,689 --> 00:01:09,599
not actually in here it looks like and

24
00:01:07,228 --> 00:01:10,379
so the question is how we want to

25
00:01:09,599 --> 00:01:12,000
proceed

26
00:01:10,379 --> 00:01:14,250
this is our list of kind of everything

27
00:01:12,000 --> 00:01:15,659
we could do right like this is the list

28
00:01:14,250 --> 00:01:17,790
of like everything that could be done in

29
00:01:15,659 --> 00:01:19,979
the game I mean it's not it's not

30
00:01:17,790 --> 00:01:22,500
complete I'm sure but it just was us

31
00:01:19,978 --> 00:01:23,759
listing stuff as we thought of it like

32
00:01:22,500 --> 00:01:26,549
hey we wanted to do this and we need to

33
00:01:23,759 --> 00:01:28,560
do that and so we have a bunch of

34
00:01:26,549 --> 00:01:29,790
different things we could do one thing

35
00:01:28,560 --> 00:01:31,290
we can do is we can go back and finish

36
00:01:29,790 --> 00:01:34,290
our debug code because I'd like to get

37
00:01:31,290 --> 00:01:35,850
that finished at some point we've got

38
00:01:34,290 --> 00:01:38,490
some small things here like debugging

39
00:01:35,849 --> 00:01:41,280
some audio stuff flushes thread that

40
00:01:38,489 --> 00:01:45,890
sort of stuff and I really don't know

41
00:01:41,280 --> 00:01:48,930
what I want to do so I think you know I

42
00:01:45,890 --> 00:01:50,728
I do wonder if it may be time for us to

43
00:01:48,930 --> 00:01:54,329
try to get things into sort of a more

44
00:01:50,728 --> 00:01:58,319
shippable state just in terms of like

45
00:01:54,328 --> 00:02:00,089
being able to clean up because there's

46
00:01:58,319 --> 00:02:02,548
not that much left to do before we're

47
00:02:00,090 --> 00:02:05,250
gonna be basically game like before

48
00:02:02,549 --> 00:02:07,259
we're just making game stuff right most

49
00:02:05,250 --> 00:02:09,300
of all these things are just game you

50
00:02:07,259 --> 00:02:10,439
know right in the actual game and we're

51
00:02:09,300 --> 00:02:11,910
gonna be wanting to play around with the

52
00:02:10,439 --> 00:02:13,859
actual game all through all through

53
00:02:11,909 --> 00:02:17,579
everything that's basically on the other

54
00:02:13,860 --> 00:02:21,060
out of this right and so one thing that

55
00:02:17,580 --> 00:02:23,280
I do wonder is maybe if now is a time to

56
00:02:21,060 --> 00:02:26,189
just bite the bullet go into the win32

57
00:02:23,280 --> 00:02:28,800
platform layer add OpenGL support so

58
00:02:26,189 --> 00:02:31,079
that we can finally go through some

59
00:02:28,800 --> 00:02:34,230
compositing layer that Windows will

60
00:02:31,080 --> 00:02:35,700
actually get us a vsync on so that we

61
00:02:34,229 --> 00:02:38,789
know that we're running at 60 frames a

62
00:02:35,699 --> 00:02:42,209
second or 30 frames a second our choice

63
00:02:38,789 --> 00:02:43,679
and won't have to worry about timing and

64
00:02:42,209 --> 00:02:45,719
accuracy and stuff like that we can

65
00:02:43,680 --> 00:02:47,040
actually get a locked framerate because

66
00:02:45,719 --> 00:02:50,430
I don't really want to be in a position

67
00:02:47,039 --> 00:02:52,349
where I'm gonna be like making things in

68
00:02:50,430 --> 00:02:54,989
the game and testing them out and having

69
00:02:52,349 --> 00:02:56,669
to deal with a non locked framerate now

70
00:02:54,989 --> 00:02:59,250
that also probably means at some point

71
00:02:56,669 --> 00:03:02,339
here I should stop streaming off of this

72
00:02:59,250 --> 00:03:03,419
computer and start streaming off of a

73
00:03:02,340 --> 00:03:05,310
different computer which because I do

74
00:03:03,419 --> 00:03:09,569
have an HDMI capture card because we

75
00:03:05,310 --> 00:03:11,340
bought one to use with handmade con and

76
00:03:09,569 --> 00:03:12,780
so at that point that would be a nice

77
00:03:11,340 --> 00:03:14,370
thing to do too because then we could

78
00:03:12,780 --> 00:03:17,669
actually be testing on a system that

79
00:03:14,370 --> 00:03:19,920
didn't have OBS jumping in and stealing

80
00:03:17,669 --> 00:03:22,289
stuff so I don't know I feel like maybe

81
00:03:19,919 --> 00:03:23,729
win32 platform layer cleanup and having

82
00:03:22,289 --> 00:03:25,379
kind of a thing there that we could say

83
00:03:23,729 --> 00:03:27,840
we could send this to somebody and it

84
00:03:25,379 --> 00:03:29,819
would reasonably play the game so like

85
00:03:27,840 --> 00:03:32,879
clean up the audio code a little clean

86
00:03:29,819 --> 00:03:36,239
up the video code so it's at least going

87
00:03:32,879 --> 00:03:41,099
through OpenGL for just at least the

88
00:03:36,239 --> 00:03:42,599
final compositing if not the the whole

89
00:03:41,099 --> 00:03:43,949
renderer like we don't have to actually

90
00:03:42,599 --> 00:03:45,449
make the whole renderer go that way if

91
00:03:43,949 --> 00:03:47,399
we don't want to do that right now but

92
00:03:45,449 --> 00:03:49,738
at least getting it so that we have a

93
00:03:47,400 --> 00:03:51,239
vsync that maybe seems like a good idea

94
00:03:49,739 --> 00:03:56,370
to me

95
00:03:51,239 --> 00:03:58,769
I don't know uh so I may just I just I

96
00:03:56,370 --> 00:04:00,930
may just do that I mean I may say that

97
00:03:58,769 --> 00:04:03,599
that's what we want to do that just

98
00:04:00,930 --> 00:04:08,010
seems like an idea to me so anyway if we

99
00:04:03,599 --> 00:04:10,109
want to do that here we are back in our

100
00:04:08,009 --> 00:04:11,879
win32 and we wrote kind of some of the

101
00:04:10,110 --> 00:04:13,380
stuff that we might want here I like the

102
00:04:11,879 --> 00:04:14,879
threading is still on there of course we

103
00:04:13,379 --> 00:04:16,709
actually did that I guess we don't ever

104
00:04:14,879 --> 00:04:20,430
update our to-do lists we just do stuff

105
00:04:16,709 --> 00:04:22,800
off them and you know there we go

106
00:04:20,430 --> 00:04:24,780
and so this one right here which is

107
00:04:22,800 --> 00:04:27,470
hardware acceleration I'm basically

108
00:04:24,779 --> 00:04:30,049
saying like you know let's go ahead

109
00:04:27,470 --> 00:04:32,120
and move these guys up here and and

110
00:04:30,050 --> 00:04:33,920
start take a look at those I'm trying to

111
00:04:32,120 --> 00:04:37,459
see if there's anything else here that's

112
00:04:33,920 --> 00:04:39,530
relevant I don't know if asset loading

113
00:04:37,459 --> 00:04:40,969
path I think we might consider that done

114
00:04:39,529 --> 00:04:42,169
too because we're not really gonna do

115
00:04:40,970 --> 00:04:47,150
anything more with that than what we

116
00:04:42,170 --> 00:04:51,410
already did probably I feel like so yeah

117
00:04:47,149 --> 00:04:55,299
maybe that's right anyway so yeah I'm

118
00:04:51,410 --> 00:04:58,939
saying maybe we do some of this here I

119
00:04:55,300 --> 00:05:02,060
just thought so let me give you a little

120
00:04:58,939 --> 00:05:03,829
bit of a background over sir just so you

121
00:05:02,060 --> 00:05:06,709
can kind of understand what I would be

122
00:05:03,829 --> 00:05:10,639
about to do since I think that's what

123
00:05:06,709 --> 00:05:14,359
I'm leaning towards doing so see if you

124
00:05:10,639 --> 00:05:17,539
can cast your mind back if you will to

125
00:05:14,360 --> 00:05:20,560
the olden days when we were just 250

126
00:05:17,540 --> 00:05:22,760
hours of programming back in the past

127
00:05:20,560 --> 00:05:25,370
when we sat down to get ourselves

128
00:05:22,759 --> 00:05:26,569
something we could work with on win32 so

129
00:05:25,370 --> 00:05:28,579
that we could write all the stuff we did

130
00:05:26,569 --> 00:05:29,930
like the renderer is an audio system the

131
00:05:28,579 --> 00:05:32,109
asset loading and all that stuff that

132
00:05:29,930 --> 00:05:35,810
we've written in between then and now

133
00:05:32,110 --> 00:05:37,610
and you'll remember we get called in

134
00:05:35,810 --> 00:05:41,418
this function called win main this is

135
00:05:37,610 --> 00:05:45,050
where our program starts up and if you

136
00:05:41,418 --> 00:05:46,909
remember what we do at some point after

137
00:05:45,050 --> 00:05:48,639
we kind of get ourselves set up here and

138
00:05:46,910 --> 00:05:52,729
we did a thing with fading in and out

139
00:05:48,639 --> 00:05:55,969
but we create a window in that window is

140
00:05:52,728 --> 00:05:57,560
what we use to draw right so you know

141
00:05:55,970 --> 00:05:59,540
we've kind of got this weird fade thing

142
00:05:57,560 --> 00:06:02,209
happening now mm-hmm

143
00:05:59,540 --> 00:06:04,400
I believe this was mid blows fault he

144
00:06:02,209 --> 00:06:06,019
was like I want I want to fade in and

145
00:06:04,399 --> 00:06:07,279
out from the Windows desktop I don't

146
00:06:06,019 --> 00:06:09,049
know why you wanted to we just wanted to

147
00:06:07,279 --> 00:06:12,469
so we've got this thing where you like

148
00:06:09,050 --> 00:06:15,050
fade in and out like that and and I

149
00:06:12,470 --> 00:06:17,270
think you can even escape out yeah so it

150
00:06:15,050 --> 00:06:23,990
fades in and out it does both directions

151
00:06:17,269 --> 00:06:25,789
right so that's you know that's sort of

152
00:06:23,990 --> 00:06:28,129
a little extra sauce on top that we did

153
00:06:25,790 --> 00:06:30,319
but in general the only important part

154
00:06:28,129 --> 00:06:31,490
is so we have I guess the reason I

155
00:06:30,319 --> 00:06:32,839
mention that because we have a window

156
00:06:31,490 --> 00:06:34,280
that basically does the the in-and-out

157
00:06:32,839 --> 00:06:35,839
fade for us that's a separate window

158
00:06:34,279 --> 00:06:38,478
that we use to just black out the screen

159
00:06:35,839 --> 00:06:39,859
but the actual window we care about is

160
00:06:38,478 --> 00:06:41,329
this window right here we create this

161
00:06:39,860 --> 00:06:44,000
window

162
00:06:41,329 --> 00:06:45,408
and we then make it fullscreen right so

163
00:06:44,000 --> 00:06:47,598
we make it the size of the whole screen

164
00:06:45,408 --> 00:06:49,189
it's not set to visible so it's

165
00:06:47,598 --> 00:06:51,019
invisible it takes it all scream that's

166
00:06:49,189 --> 00:06:55,370
not visible later we switch it to

167
00:06:51,019 --> 00:06:56,810
visible and then we start doing blitz to

168
00:06:55,370 --> 00:07:00,408
it and that's how we display our game

169
00:06:56,810 --> 00:07:03,769
okay so what we need to do if we want to

170
00:07:00,408 --> 00:07:06,978
use OpenGL or direct3d for that matter

171
00:07:03,769 --> 00:07:09,288
but either way we have additional work

172
00:07:06,978 --> 00:07:15,228
that we need to do now we need to be

173
00:07:09,288 --> 00:07:17,269
able to set up our window in a way that

174
00:07:15,228 --> 00:07:21,589
tells windows we're going to be using

175
00:07:17,269 --> 00:07:23,750
the 3d hardware right and the first part

176
00:07:21,589 --> 00:07:27,168
of this is actually pretty simple and

177
00:07:23,750 --> 00:07:29,120
that's just linking to remember we did

178
00:07:27,168 --> 00:07:31,788
this thing here we listed here are the

179
00:07:29,120 --> 00:07:33,199
windows services that we call right so

180
00:07:31,788 --> 00:07:34,848
remember what these these guys were

181
00:07:33,199 --> 00:07:36,439
these are not the kinds of libraries

182
00:07:34,848 --> 00:07:37,668
that you normally think of where that

183
00:07:36,439 --> 00:07:39,319
the functions are actually in the

184
00:07:37,668 --> 00:07:41,628
libraries these are called import

185
00:07:39,319 --> 00:07:43,639
libraries and what they do is they allow

186
00:07:41,629 --> 00:07:45,319
us to call through to the Windows

187
00:07:43,639 --> 00:07:48,110
operating system services that we need

188
00:07:45,319 --> 00:07:49,879
so user 32 dot Lib has the stuff like

189
00:07:48,110 --> 00:07:51,580
create window so we need to a separate

190
00:07:49,879 --> 00:07:54,649
system for a window that's in there

191
00:07:51,579 --> 00:07:56,448
GDI 32 has like the graphics things like

192
00:07:54,649 --> 00:07:59,810
get device caps and that sort of stuff

193
00:07:56,449 --> 00:08:01,788
would be in there for example and we mmm

194
00:07:59,810 --> 00:08:03,288
had what we needed that for one specific

195
00:08:01,788 --> 00:08:07,209
thing which was setting the clock that

196
00:08:03,288 --> 00:08:10,848
the timer resolution the for the for the

197
00:08:07,209 --> 00:08:12,138
for the window scheduler right so so far

198
00:08:10,848 --> 00:08:15,889
that's all we've needed to use and

199
00:08:12,139 --> 00:08:17,960
you'll notice nothing in there or I

200
00:08:15,889 --> 00:08:20,028
should say nothing in those three import

201
00:08:17,959 --> 00:08:21,799
libraries connects us with the part of

202
00:08:20,028 --> 00:08:24,560
the operating system that talks to 3d

203
00:08:21,800 --> 00:08:26,120
graphics hardware now we're on top of

204
00:08:24,560 --> 00:08:27,889
Windows so there's no way we can hand

205
00:08:26,120 --> 00:08:30,918
code this we can't talk to the graphics

206
00:08:27,889 --> 00:08:32,629
ourself Windows is the guy who's got the

207
00:08:30,918 --> 00:08:34,158
access to the hardware we have to go

208
00:08:32,629 --> 00:08:35,990
through it and so what we need to do is

209
00:08:34,158 --> 00:08:37,698
add one import library that's going to

210
00:08:35,990 --> 00:08:39,019
give it that to us now we could add

211
00:08:37,698 --> 00:08:41,740
DirectX we could add OpenGL I'm gonna

212
00:08:39,019 --> 00:08:44,269
add OpenGL because it's the more

213
00:08:41,740 --> 00:08:48,500
cross-platform version of the two so

214
00:08:44,269 --> 00:08:50,269
what we learn here on how to start it up

215
00:08:48,500 --> 00:08:53,179
in Windows is not gonna help you

216
00:08:50,269 --> 00:08:55,129
anywhere else but what if we actually do

217
00:08:53,179 --> 00:08:55,299
our rendering through it everything that

218
00:08:55,129 --> 00:08:57,039
we

219
00:08:55,299 --> 00:08:59,679
do their will apply on every platform

220
00:08:57,039 --> 00:09:01,088
that OpenGL works you know like so you

221
00:08:59,679 --> 00:09:02,769
can apply this on Mac and I'm Linux

222
00:09:01,089 --> 00:09:04,570
which i think is a lot better for an

223
00:09:02,769 --> 00:09:06,009
instructional series that seems like a

224
00:09:04,570 --> 00:09:07,420
much smarter way to go because it's

225
00:09:06,009 --> 00:09:11,259
something you could use no matter what

226
00:09:07,419 --> 00:09:12,969
platform you're on not just this one so

227
00:09:11,259 --> 00:09:15,159
the as you might have guessed from the

228
00:09:12,970 --> 00:09:18,339
sort of naming convention here other

229
00:09:15,159 --> 00:09:19,899
than win mmm live OpenGL 32 dot lib is

230
00:09:18,339 --> 00:09:22,870
actually the name of the library that

231
00:09:19,899 --> 00:09:24,578
you need if you want to link it to call

232
00:09:22,870 --> 00:09:26,500
the 3d graphics hardware through OpenGL

233
00:09:24,578 --> 00:09:28,929
if we compile with this we'll see that

234
00:09:26,500 --> 00:09:33,309
we just get linked nothing happens right

235
00:09:28,929 --> 00:09:34,778
nothing actually occurs of note yet

236
00:09:33,309 --> 00:09:36,489
because we haven't actually done

237
00:09:34,778 --> 00:09:37,870
anything and so if I run the game you

238
00:09:36,490 --> 00:09:39,690
know everything's still the same the

239
00:09:37,870 --> 00:09:42,009
only difference like I saying before

240
00:09:39,690 --> 00:09:44,920
literally the only difference there is

241
00:09:42,009 --> 00:09:47,289
now we have the ability to call the

242
00:09:44,919 --> 00:09:49,449
operating system functions that OpenGL

243
00:09:47,289 --> 00:09:50,949
has and similarly like we had to do this

244
00:09:49,450 --> 00:09:53,470
to bring in these things like direct

245
00:09:50,950 --> 00:09:57,129
sound the next input and so on we have

246
00:09:53,470 --> 00:09:59,170
to include an OpenGL header and in this

247
00:09:57,129 --> 00:10:02,889
case I believe it's gah

248
00:09:59,169 --> 00:10:04,929
and there you go so what that does is

249
00:10:02,889 --> 00:10:07,870
that brings in all the opengl functions

250
00:10:04,929 --> 00:10:10,269
that we might need so now we can talk to

251
00:10:07,870 --> 00:10:13,149
opengl just like we had to include

252
00:10:10,269 --> 00:10:15,129
things like windows h2 call the other

253
00:10:13,149 --> 00:10:18,759
platform AP is an x input that age to

254
00:10:15,129 --> 00:10:20,259
call the X input api's now there's

255
00:10:18,759 --> 00:10:22,828
obviously more than one way we could

256
00:10:20,259 --> 00:10:26,169
call it if you remember 4x input and

257
00:10:22,828 --> 00:10:28,569
direct sound the way that we actually

258
00:10:26,169 --> 00:10:30,099
called those at least I believe direct

259
00:10:28,570 --> 00:10:32,260
sound is that true for direct sound yeah

260
00:10:30,100 --> 00:10:34,750
4x input in direct sound you'll notice

261
00:10:32,259 --> 00:10:37,778
we did late binding here so what we did

262
00:10:34,750 --> 00:10:40,149
is instead of linking to those import

263
00:10:37,778 --> 00:10:43,299
libraries directly we manually called

264
00:10:40,149 --> 00:10:45,820
get proc address right and there's a

265
00:10:43,299 --> 00:10:50,189
very good reason for that with X input

266
00:10:45,820 --> 00:10:54,490
for example it may not be on the machine

267
00:10:50,190 --> 00:10:58,990
so if we were to cold link to X input as

268
00:10:54,490 --> 00:11:01,419
a library like a dot Lib when our

269
00:10:58,990 --> 00:11:03,909
executable loads if X input was not

270
00:11:01,419 --> 00:11:06,360
installed in that machine we would fail

271
00:11:03,909 --> 00:11:08,649
to load and we don't want to do that

272
00:11:06,360 --> 00:11:10,269
OpenGL on the other hand has the

273
00:11:08,649 --> 00:11:14,350
nice property of having shipped with

274
00:11:10,269 --> 00:11:16,328
Windows since the beginning like Windows

275
00:11:14,350 --> 00:11:20,019
NT three five one

276
00:11:16,328 --> 00:11:22,359
the oldest branch back you can go for

277
00:11:20,019 --> 00:11:23,558
this strain of Windows remember we're on

278
00:11:22,360 --> 00:11:25,990
the empty branch we're not on the

279
00:11:23,558 --> 00:11:28,149
windows 95 windows 3-1 we're not on that

280
00:11:25,990 --> 00:11:30,759
branch around the windows 1.0 branch

281
00:11:28,149 --> 00:11:32,470
that died with Windows ME that was the

282
00:11:30,759 --> 00:11:35,050
last version of that type of Windows

283
00:11:32,470 --> 00:11:38,410
that shipped so all the way back to the

284
00:11:35,049 --> 00:11:42,519
very first version windows 3 5 one had

285
00:11:38,409 --> 00:11:45,879
OpenGL support in it so it's totally

286
00:11:42,519 --> 00:11:50,230
safe to link with OpenGL and use the

287
00:11:45,879 --> 00:11:52,509
basic OpenGL functions now you can't

288
00:11:50,230 --> 00:11:54,639
guarantee that all of the opengl

289
00:11:52,509 --> 00:11:56,889
functions in the most modern OpenGL will

290
00:11:54,639 --> 00:11:58,509
be there because that depends on how new

291
00:11:56,889 --> 00:12:01,149
the graphics card and how new the

292
00:11:58,509 --> 00:12:03,339
drivers are so it doesn't mean you can

293
00:12:01,149 --> 00:12:05,740
just call any old thing in OpenGL that

294
00:12:03,339 --> 00:12:07,720
you want because there are lots of

295
00:12:05,740 --> 00:12:11,619
extensions to open jill's over the years

296
00:12:07,720 --> 00:12:15,939
there's OpenGL 1.0 2.0 3.0 4.0 sr 4.3

297
00:12:11,619 --> 00:12:16,809
whatever right so when I say that it's

298
00:12:15,938 --> 00:12:20,259
been there through the beginning I mean

299
00:12:16,808 --> 00:12:22,360
the basic OpenGL 1 point to support

300
00:12:20,259 --> 00:12:23,558
probably or might have been one point

301
00:12:22,360 --> 00:12:25,688
one support I don't remember the first

302
00:12:23,558 --> 00:12:29,860
version was might even be just one point

303
00:12:25,688 --> 00:12:31,419
now I don't know but the basic stuff is

304
00:12:29,860 --> 00:12:34,149
all in there so the stuff that we need

305
00:12:31,419 --> 00:12:36,969
to do to set up OpenGL in its in its

306
00:12:34,149 --> 00:12:38,470
limited form for example just to do like

307
00:12:36,970 --> 00:12:42,189
a blitt to the screen which is all we

308
00:12:38,470 --> 00:12:44,829
will probably do it first that stuff we

309
00:12:42,188 --> 00:12:46,688
can always just call other things and

310
00:12:44,828 --> 00:12:48,719
you'll see this if we decide to move the

311
00:12:46,688 --> 00:12:51,998
renderer over a sooner rather than later

312
00:12:48,720 --> 00:12:53,889
other things require a more sensitive

313
00:12:51,999 --> 00:12:55,600
approach if we want to call the more

314
00:12:53,889 --> 00:12:59,558
advanced features OpenGL we have to take

315
00:12:55,600 --> 00:13:02,048
a more approach that is a lot more like

316
00:12:59,558 --> 00:13:05,428
the dynamic loading approach that we

317
00:13:02,048 --> 00:13:09,399
took with these other ones here so

318
00:13:05,428 --> 00:13:11,379
alright so there's our GLH and now what

319
00:13:09,399 --> 00:13:16,568
we need to do is we need to get us into

320
00:13:11,379 --> 00:13:20,649
a position where we can actually use the

321
00:13:16,568 --> 00:13:22,449
opengl stuff on our window so if you

322
00:13:20,649 --> 00:13:24,669
remember how we did direct sound

323
00:13:22,450 --> 00:13:27,430
right I don't know if you recall how we

324
00:13:24,669 --> 00:13:28,479
did that when we do direct sound like

325
00:13:27,429 --> 00:13:30,729
there's this sort of initialization

326
00:13:28,480 --> 00:13:31,990
process right we had to load the library

327
00:13:30,730 --> 00:13:33,820
I'm saying we don't need to do that for

328
00:13:31,990 --> 00:13:35,620
OpenGL it's okay to hard bind to it

329
00:13:33,820 --> 00:13:37,240
because like user 32 and that sort of

330
00:13:35,620 --> 00:13:40,000
stuff it's something that will always be

331
00:13:37,240 --> 00:13:41,079
there so when our executables loaded and

332
00:13:40,000 --> 00:13:43,059
it looks for the Opera in system

333
00:13:41,078 --> 00:13:44,559
services they will always be there it's

334
00:13:43,059 --> 00:13:47,739
just a question of which version but

335
00:13:44,559 --> 00:13:49,328
they'll always be there and then we had

336
00:13:47,740 --> 00:13:52,060
to do this stuff like direct sound

337
00:13:49,328 --> 00:13:53,799
create a sec rapido level this exact

338
00:13:52,059 --> 00:13:54,698
thing if you're you remember how we did

339
00:13:53,799 --> 00:13:57,309
that where we had to kind of go through

340
00:13:54,698 --> 00:14:01,870
these steps and that's exactly what we

341
00:13:57,309 --> 00:14:06,009
have to do to initialize OpenGL now the

342
00:14:01,870 --> 00:14:07,539
process is so janky that I am probably

343
00:14:06,009 --> 00:14:10,059
not going to remember how to do it

344
00:14:07,539 --> 00:14:12,419
correctly now you've seen me program

345
00:14:10,059 --> 00:14:16,448
windows on the stream a lot and I am

346
00:14:12,419 --> 00:14:19,509
remarkably successful in this series at

347
00:14:16,448 --> 00:14:22,750
not having messed up too many things in

348
00:14:19,509 --> 00:14:24,578
the Windows layer right which is odd

349
00:14:22,750 --> 00:14:26,019
like normally you have to go digging

350
00:14:24,578 --> 00:14:28,328
through lots of people's tutorial code

351
00:14:26,019 --> 00:14:28,959
and I haven't had to do that yet I think

352
00:14:28,328 --> 00:14:32,919
that's just because we're importing

353
00:14:28,958 --> 00:14:36,129
waited so long I will be shocked shocked

354
00:14:32,919 --> 00:14:38,939
I tell you if I can get through the full

355
00:14:36,129 --> 00:14:40,899
initialization of open jail even vanilla

356
00:14:38,940 --> 00:14:43,540
without having to resort to looking at

357
00:14:40,899 --> 00:14:45,759
some sample code I'll be shocked but who

358
00:14:43,539 --> 00:14:47,169
knows and it's not because there's that

359
00:14:45,759 --> 00:14:50,439
many steps it's just because the steps

360
00:14:47,169 --> 00:14:52,990
are bizarre alright so we're gonna

361
00:14:50,440 --> 00:14:55,779
follow exactly that thing that we had

362
00:14:52,990 --> 00:14:59,019
before just just exactly like this where

363
00:14:55,778 --> 00:15:01,059
we have essentially a win32 init opengl

364
00:14:59,019 --> 00:15:02,379
right I'm just gonna make a function

365
00:15:01,059 --> 00:15:03,250
here and I'm just I'm not gonna think

366
00:15:02,379 --> 00:15:04,899
too hard about it like this I'm just

367
00:15:03,250 --> 00:15:06,009
gonna put them in here cuz we've got a

368
00:15:04,899 --> 00:15:08,169
lot of stuff in this file I don't want

369
00:15:06,009 --> 00:15:10,299
it to mush it into anything and get lost

370
00:15:08,169 --> 00:15:12,969
in it so I'm just gonna just start by

371
00:15:10,299 --> 00:15:17,078
saying all right we've got a window and

372
00:15:12,970 --> 00:15:19,860
I need this window to to have an open

373
00:15:17,078 --> 00:15:22,870
jail thing attached to it alright so

374
00:15:19,860 --> 00:15:25,839
let's talk a little bit about the OpenGL

375
00:15:22,870 --> 00:15:27,068
model so before I start that and have to

376
00:15:25,839 --> 00:15:30,089
deal with the pain and suffering of

377
00:15:27,068 --> 00:15:34,039
trying to remember exactly how it goes

378
00:15:30,089 --> 00:15:39,860
let's just talk about OpenGL

379
00:15:34,039 --> 00:15:44,389
on Windows okay so OpenGL is a graphics

380
00:15:39,860 --> 00:15:49,070
API it was defined as a attempt to make

381
00:15:44,389 --> 00:15:50,949
a public spectacle I receive I believe

382
00:15:49,070 --> 00:15:52,940
is the case of it or is it i Rick's GL

383
00:15:50,950 --> 00:15:56,530
basically there was just a thing called

384
00:15:52,940 --> 00:15:59,380
essentially GL was all it was called

385
00:15:56,529 --> 00:16:01,669
from a company called Silicon Graphics

386
00:15:59,379 --> 00:16:03,980
now if you don't know what Silicon

387
00:16:01,669 --> 00:16:06,409
Graphics was you could be forgiven they

388
00:16:03,980 --> 00:16:10,759
don't really exist anymore but what they

389
00:16:06,409 --> 00:16:13,100
were was way back before anyone really

390
00:16:10,759 --> 00:16:16,340
was ever talking about even the concept

391
00:16:13,100 --> 00:16:18,379
that a personal computer a home computer

392
00:16:16,340 --> 00:16:20,360
would have 3d graphics acceleration

393
00:16:18,379 --> 00:16:23,779
because that's just a fanciful dream

394
00:16:20,360 --> 00:16:26,300
back in the 80s let's say right Silicon

395
00:16:23,779 --> 00:16:28,669
Graphics was a company that specialized

396
00:16:26,299 --> 00:16:30,109
in building hardware accelerated 3d

397
00:16:28,669 --> 00:16:31,789
graphics so what they did is they

398
00:16:30,110 --> 00:16:34,279
produced workstations high-end

399
00:16:31,789 --> 00:16:36,319
workstations very very expensive that

400
00:16:34,279 --> 00:16:37,850
had 3d acceleration Hardware in them and

401
00:16:36,320 --> 00:16:41,480
this Hardware could do remarkable

402
00:16:37,850 --> 00:16:43,190
amazing never-before stuff that you

403
00:16:41,480 --> 00:16:46,659
could ever have dreamt on a PC like

404
00:16:43,190 --> 00:16:49,940
filling a triangle with a solid color

405
00:16:46,659 --> 00:16:51,649
and yet if you set yourself back that

406
00:16:49,940 --> 00:16:53,210
far you know there were about people

407
00:16:51,649 --> 00:16:55,759
Evans &amp; Sutherland these people making

408
00:16:53,210 --> 00:16:58,820
hardware that did stuff like filling

409
00:16:55,759 --> 00:17:00,409
solid triangles at a fast rate remember

410
00:16:58,820 --> 00:17:02,900
these are the old days that was

411
00:17:00,409 --> 00:17:04,039
remarkable and difficult and then as

412
00:17:02,899 --> 00:17:05,779
time progressed they did more more

413
00:17:04,039 --> 00:17:08,809
stupid texture mapping hardware and

414
00:17:05,779 --> 00:17:11,119
that's our stuff and really all of what

415
00:17:08,809 --> 00:17:15,588
we now think of as stuff that you plug

416
00:17:11,119 --> 00:17:17,328
into the GPU you know the extension slot

417
00:17:15,588 --> 00:17:21,529
that basically is only used for GPU now

418
00:17:17,328 --> 00:17:25,669
right the PCI Express whatever all of

419
00:17:21,529 --> 00:17:28,549
that stuff Nvidia and went back when we

420
00:17:25,670 --> 00:17:31,340
have 3d effects and all that stuff most

421
00:17:28,549 --> 00:17:34,819
of it came out of this most of it is is

422
00:17:31,339 --> 00:17:38,179
because of these guys in fact Nvidia and

423
00:17:34,819 --> 00:17:40,009
3d effects the old 3d effects one of the

424
00:17:38,180 --> 00:17:43,250
first you know the one of the first

425
00:17:40,009 --> 00:17:44,539
add-on cards for PC the first was

426
00:17:43,250 --> 00:17:47,359
actually by selling graphics that I know

427
00:17:44,539 --> 00:17:47,899
about but what was my 3d effects and

428
00:17:47,359 --> 00:17:51,199
NVIDIA

429
00:17:47,900 --> 00:17:53,180
all X SGI guys write Silicon Graphics

430
00:17:51,200 --> 00:17:55,940
was SGI Silicon Graphics Incorporated I

431
00:17:53,180 --> 00:17:58,460
think is what it was but and so they

432
00:17:55,940 --> 00:18:00,440
really basically what they did is people

433
00:17:58,460 --> 00:18:02,509
at these that this company you know they

434
00:18:00,440 --> 00:18:05,150
saw that the future was probably going

435
00:18:02,509 --> 00:18:06,920
to be 3d on the PC because it was

436
00:18:05,150 --> 00:18:08,300
getting cheap enough now to do and they

437
00:18:06,920 --> 00:18:10,490
left looking graphics and they started

438
00:18:08,299 --> 00:18:12,980
making add-on cards and hey this company

439
00:18:10,490 --> 00:18:14,839
eventually went away because the add-on

440
00:18:12,980 --> 00:18:16,880
cards for PC became so powerful there

441
00:18:14,839 --> 00:18:19,279
was never now there was no need to ever

442
00:18:16,880 --> 00:18:20,480
buy us dedicated workstation because

443
00:18:19,279 --> 00:18:25,609
these things were just as good and

444
00:18:20,480 --> 00:18:27,589
eventually better right so anyway what

445
00:18:25,609 --> 00:18:30,589
OpenGL was was it was their graphics API

446
00:18:27,589 --> 00:18:32,179
they had a graphics API that you used to

447
00:18:30,589 --> 00:18:34,819
talk to the silicon graphics hardware at

448
00:18:32,180 --> 00:18:37,250
the workstations it was called GL I

449
00:18:34,819 --> 00:18:39,740
believe I can't quite remember

450
00:18:37,250 --> 00:18:41,150
and I think iris GL was just a name that

451
00:18:39,740 --> 00:18:43,130
you would oftentimes used to it because

452
00:18:41,150 --> 00:18:44,600
they the iris was the name of one of

453
00:18:43,130 --> 00:18:46,190
their product lines I believe right

454
00:18:44,599 --> 00:18:48,349
there were different names there's the

455
00:18:46,190 --> 00:18:51,259
onyx the iris there were different names

456
00:18:48,349 --> 00:18:53,059
of the workstations and so what happened

457
00:18:51,259 --> 00:18:54,740
was Silicon Graphics eventually and I

458
00:18:53,059 --> 00:18:56,210
don't really know why don't I I'm not

459
00:18:54,740 --> 00:18:57,620
really familiar with the politics of

460
00:18:56,210 --> 00:18:59,569
this company I don't know very much

461
00:18:57,619 --> 00:19:01,369
about what happened in those days you'd

462
00:18:59,569 --> 00:19:03,500
have to ask someone who worked there but

463
00:19:01,369 --> 00:19:05,719
they wanted to make a more open standard

464
00:19:03,500 --> 00:19:08,359
so that people would program to this

465
00:19:05,720 --> 00:19:09,350
graphics language and then you know that

466
00:19:08,359 --> 00:19:10,849
would be good for them because that

467
00:19:09,349 --> 00:19:12,319
meant that any programs that were

468
00:19:10,849 --> 00:19:13,549
written to that if you compiled them and

469
00:19:12,319 --> 00:19:14,929
ran the last lemongrass bean they'd run

470
00:19:13,549 --> 00:19:16,159
really fast right because they have

471
00:19:14,930 --> 00:19:18,769
hardware acceleration for all the stuff

472
00:19:16,160 --> 00:19:20,870
that's in this geo and so what GL was

473
00:19:18,769 --> 00:19:22,910
was a way of talking essentially to

474
00:19:20,869 --> 00:19:24,139
graphics hardware back then and really

475
00:19:22,910 --> 00:19:26,000
all it was meant to do was draw like

476
00:19:24,140 --> 00:19:27,470
lines and felt solid triangles and

477
00:19:26,000 --> 00:19:29,839
eventually some texture mapping that was

478
00:19:27,470 --> 00:19:33,259
it there was absolutely no concept of

479
00:19:29,839 --> 00:19:36,439
shaders or compute or any of that stuff

480
00:19:33,259 --> 00:19:37,910
that's all new stuff that was never in

481
00:19:36,440 --> 00:19:45,110
the original the original was just very

482
00:19:37,910 --> 00:19:49,730
very basic stuff okay so what happened

483
00:19:45,109 --> 00:19:52,479
with OpenGL is it bifurcated into two

484
00:19:49,730 --> 00:19:57,410
sort of halves and for obvious reasons

485
00:19:52,480 --> 00:19:59,480
when this becomes OpenGL and they create

486
00:19:57,410 --> 00:20:00,650
a committee for maintaining the standard

487
00:19:59,480 --> 00:20:03,480
and they make it a stain

488
00:20:00,650 --> 00:20:07,610
obviously now Silicon Graphics machines

489
00:20:03,480 --> 00:20:09,900
are not the only machines running GL

490
00:20:07,609 --> 00:20:13,109
what that means is there needs to be

491
00:20:09,900 --> 00:20:21,860
sort of two halves to OpenGL few will

492
00:20:13,109 --> 00:20:26,009
write the platform-specific part and the

493
00:20:21,859 --> 00:20:28,079
platform-independent part right and when

494
00:20:26,009 --> 00:20:29,849
you refer to OpenGL really this is the

495
00:20:28,079 --> 00:20:32,099
part you're talking about and that's

496
00:20:29,849 --> 00:20:37,230
things like if you've ever seen stuff

497
00:20:32,099 --> 00:20:44,909
like a call to GL vertex 3f or something

498
00:20:37,230 --> 00:20:47,009
like this or GL clear right

499
00:20:44,910 --> 00:20:48,540
the platform-independent part is the

500
00:20:47,009 --> 00:20:50,430
part that's all the calls that you're

501
00:20:48,539 --> 00:20:52,139
used to seeing when you if you've ever

502
00:20:50,430 --> 00:20:53,490
read anything about OpenGL if you

503
00:20:52,140 --> 00:20:54,690
haven't that's okay you don't need to

504
00:20:53,490 --> 00:20:55,890
know it I'm gonna be telling you

505
00:20:54,690 --> 00:20:59,340
anything that you need to know about it

506
00:20:55,890 --> 00:21:00,450
but if you've seen it before that's what

507
00:20:59,339 --> 00:21:02,669
the platform different independent

508
00:21:00,450 --> 00:21:05,580
artists the platform specific part is

509
00:21:02,670 --> 00:21:07,800
how you get opengl like up and running

510
00:21:05,579 --> 00:21:09,779
on your platform and the reason this

511
00:21:07,799 --> 00:21:11,069
can't be automated is because who knows

512
00:21:09,779 --> 00:21:12,930
what you're trying to do with it how

513
00:21:11,069 --> 00:21:14,879
many windows do you have in your app

514
00:21:12,930 --> 00:21:16,620
that need OpenGL support are you trying

515
00:21:14,880 --> 00:21:18,720
to blit to one of them or the other one

516
00:21:16,619 --> 00:21:20,759
of them does this platform even have the

517
00:21:18,720 --> 00:21:22,620
concept of a window who knows right so

518
00:21:20,759 --> 00:21:24,359
that's very specific to the platform so

519
00:21:22,619 --> 00:21:29,250
what they decide to do here is just not

520
00:21:24,359 --> 00:21:30,839
specify it right so when you say OpenGL

521
00:21:29,250 --> 00:21:32,730
you're really never talking about this

522
00:21:30,839 --> 00:21:34,759
because they never bothered to spec any

523
00:21:32,730 --> 00:21:38,430
of it it's just left up to the

524
00:21:34,759 --> 00:21:41,609
implementation on any given platform to

525
00:21:38,430 --> 00:21:44,400
decide how you want to handle that right

526
00:21:41,609 --> 00:21:46,289
and the OpenGL committee does have sort

527
00:21:44,400 --> 00:21:48,090
of a way of issuing standards for

528
00:21:46,289 --> 00:21:50,490
different platforms for the platform

529
00:21:48,089 --> 00:21:53,009
specific part if you want and that does

530
00:21:50,490 --> 00:21:55,019
sort of happen in a separate way but for

531
00:21:53,009 --> 00:21:57,450
the most part the OpenGL part is this

532
00:21:55,019 --> 00:22:00,569
part and this part is really up to the

533
00:21:57,450 --> 00:22:03,870
platform people how they end up specking

534
00:22:00,569 --> 00:22:08,639
it out how it tends to go right all

535
00:22:03,869 --> 00:22:09,929
right so this the non OpenGL part if you

536
00:22:08,640 --> 00:22:11,850
will is the part we actually care about

537
00:22:09,930 --> 00:22:13,660
today and the way that that works on

538
00:22:11,849 --> 00:22:16,750
Windows is they have a set of API

539
00:22:13,660 --> 00:22:19,180
that are prefixed with wgl for Windows

540
00:22:16,750 --> 00:22:23,849
GL and there's a bunch of functions like

541
00:22:19,180 --> 00:22:33,820
w GL swap buffers I think is one of them

542
00:22:23,849 --> 00:22:42,549
is it GL swap buffers RW yeah it's w GL

543
00:22:33,819 --> 00:22:44,200
swap buffers right hello so no it's not

544
00:22:42,549 --> 00:22:45,609
they did not prefixes that's why I was I

545
00:22:44,200 --> 00:22:47,019
was trying to remember and I was gonna I

546
00:22:45,609 --> 00:22:49,449
was gonna say it looks wrong to me it's

547
00:22:47,019 --> 00:22:50,259
like I don't think it's there and and I

548
00:22:49,450 --> 00:22:52,960
guess it's not there

549
00:22:50,259 --> 00:22:54,970
so swap buffers isn't thought that way I

550
00:22:52,960 --> 00:22:58,299
take it back

551
00:22:54,970 --> 00:23:03,279
so it's more like a better example would

552
00:22:58,299 --> 00:23:06,009
be wiggle make current that one I am

553
00:23:03,279 --> 00:23:08,490
sure of they did prefix I'm pretty sure

554
00:23:06,009 --> 00:23:12,930
almost all the time it's actually

555
00:23:08,490 --> 00:23:16,210
prefixed but swap buffers is just

556
00:23:12,930 --> 00:23:19,600
anomalistic so there you go that's an

557
00:23:16,210 --> 00:23:22,150
example of one right okay so that's the

558
00:23:19,599 --> 00:23:24,009
part that we care about here all right

559
00:23:22,150 --> 00:23:26,500
so you remember it we'll hope you

560
00:23:24,009 --> 00:23:28,869
remember from our windows programming

561
00:23:26,500 --> 00:23:33,369
there's a thing called a DC right a

562
00:23:28,869 --> 00:23:35,409
device context and a device context is

563
00:23:33,369 --> 00:23:38,859
just like a handle basically or I

564
00:23:35,410 --> 00:23:42,730
shouldn't say handle it's a notion in

565
00:23:38,859 --> 00:23:45,719
Windows of the state of the graphics at

566
00:23:42,730 --> 00:23:48,730
that time so it's storage stuff like oh

567
00:23:45,720 --> 00:23:50,589
you know what's the coordinate transform

568
00:23:48,730 --> 00:23:54,519
of the stuff I'm drawing now what's the

569
00:23:50,589 --> 00:23:56,769
active pen color you know mode stuff

570
00:23:54,519 --> 00:24:00,220
like that right and so we have things

571
00:23:56,769 --> 00:24:02,859
called HD C's which are handles to a DC

572
00:24:00,220 --> 00:24:04,509
to one of these and we would always pass

573
00:24:02,859 --> 00:24:05,619
those around right remember we'd say

574
00:24:04,509 --> 00:24:07,599
like oh we got address something we

575
00:24:05,619 --> 00:24:09,669
gotta get a handle to the DC that we're

576
00:24:07,599 --> 00:24:10,929
gonna draw into then we use it and then

577
00:24:09,670 --> 00:24:12,120
we release the handle right we had a

578
00:24:10,930 --> 00:24:15,730
bunch of stuff like that

579
00:24:12,119 --> 00:24:19,829
well OpenGL has a very equivalent

580
00:24:15,730 --> 00:24:26,019
compact concept it's called it OpenGL

581
00:24:19,829 --> 00:24:26,809
it's an OpenGL RC I believe Open GL RC

582
00:24:26,019 --> 00:24:29,859
let me let me

583
00:24:26,809 --> 00:24:32,960
yeah it's I can't remember what that

584
00:24:29,859 --> 00:24:34,429
stands for is it a rendering colors yet

585
00:24:32,960 --> 00:24:35,870
okay so there it is rendering context

586
00:24:34,430 --> 00:24:38,600
I'm just like I remembered it was our se

587
00:24:35,869 --> 00:24:41,329
but remember there's OpenGL RC and

588
00:24:38,599 --> 00:24:45,039
basically what happens is this OpenGL RC

589
00:24:41,329 --> 00:24:47,779
sort of sits on top of this not

590
00:24:45,039 --> 00:24:49,730
implementation wise inside windows

591
00:24:47,779 --> 00:24:51,349
because who knows right I've never been

592
00:24:49,730 --> 00:24:53,839
privy to that code but I mean

593
00:24:51,349 --> 00:24:57,379
conceptually to the user so what has to

594
00:24:53,839 --> 00:25:00,019
happen is once you have a device context

595
00:24:57,380 --> 00:25:02,060
you need to piggyback an OpenGL

596
00:25:00,019 --> 00:25:04,039
rendering context on top of that and

597
00:25:02,059 --> 00:25:06,500
once you have an OpenGL rendering

598
00:25:04,039 --> 00:25:10,519
context then you can issue your OpenGL

599
00:25:06,500 --> 00:25:14,900
calls now there's a caveat there's a

600
00:25:10,519 --> 00:25:19,160
caveat in Windows and I can just sort of

601
00:25:14,900 --> 00:25:22,550
show you this example here let's take

602
00:25:19,160 --> 00:25:26,509
Phil rect right it's how we might clear

603
00:25:22,549 --> 00:25:29,029
a rectangle in in Windows GDI right

604
00:25:26,509 --> 00:25:31,099
you'll notice Phil rec takes as a first

605
00:25:29,029 --> 00:25:35,629
parameter a handle to the device context

606
00:25:31,099 --> 00:25:37,759
that you are trying to clear right you

607
00:25:35,630 --> 00:25:39,620
can see that it's right there so what I

608
00:25:37,759 --> 00:25:42,730
want to clear something in Windows I say

609
00:25:39,619 --> 00:25:46,039
okay Phil rect

610
00:25:42,730 --> 00:25:49,220
with a particular HTC write whatever you

611
00:25:46,039 --> 00:25:50,930
know my DC or something right and

612
00:25:49,220 --> 00:25:53,420
whatever I want to do and then it knows

613
00:25:50,930 --> 00:25:55,370
whatever this is targeting that's what

614
00:25:53,420 --> 00:25:56,840
gets filled so that's on some window

615
00:25:55,369 --> 00:25:59,209
somewhere and so it knows if there's two

616
00:25:56,839 --> 00:26:01,879
windows on the screen and they both

617
00:25:59,210 --> 00:26:04,490
belong to me and I say Phil rekt my DC

618
00:26:01,880 --> 00:26:05,990
it knows that whichever one my DC points

619
00:26:04,490 --> 00:26:09,019
to that's the window where the filling

620
00:26:05,990 --> 00:26:10,670
takes place right but what you will

621
00:26:09,019 --> 00:26:12,859
notice very quickly when you look at

622
00:26:10,670 --> 00:26:14,779
OpenGL if we were to look at say for

623
00:26:12,859 --> 00:26:17,929
example GL clear which is the thing that

624
00:26:14,779 --> 00:26:19,430
clears a buffer in OpenGL again don't

625
00:26:17,930 --> 00:26:22,250
need to know this it will get to it all

626
00:26:19,430 --> 00:26:24,500
later when it becomes relevant you will

627
00:26:22,250 --> 00:26:27,650
notice that it takes no such thing the

628
00:26:24,500 --> 00:26:30,380
only thing that you pass to GL clear is

629
00:26:27,650 --> 00:26:32,330
a bit field that says what you want

630
00:26:30,380 --> 00:26:33,500
cleared the color buffer the depth

631
00:26:32,329 --> 00:26:37,220
buffer the accumulation buffer the

632
00:26:33,500 --> 00:26:39,680
stencil buffer so if you have two

633
00:26:37,220 --> 00:26:41,360
windows or two buffers how do you know

634
00:26:39,680 --> 00:26:44,630
what to clear

635
00:26:41,359 --> 00:26:50,899
and the answer is that the whole state

636
00:26:44,630 --> 00:26:54,559
of the GL is actually implicit to your

637
00:26:50,900 --> 00:26:56,720
thread so you remember we had threads

638
00:26:54,558 --> 00:26:58,759
right in Windows there are the things

639
00:26:56,720 --> 00:27:00,288
that we lack securing all at the same

640
00:26:58,759 --> 00:27:01,460
time right if we have multiple cores

641
00:27:00,288 --> 00:27:02,990
each one can be operating different

642
00:27:01,460 --> 00:27:04,640
thread so like for example we had our

643
00:27:02,990 --> 00:27:06,048
background rendering or our background

644
00:27:04,640 --> 00:27:07,370
loading those are on different threads

645
00:27:06,048 --> 00:27:10,250
right and then we have the main thread

646
00:27:07,369 --> 00:27:12,739
which is doing most of the work so a

647
00:27:10,250 --> 00:27:15,679
thread is a single unit of execution

648
00:27:12,740 --> 00:27:17,599
right that's happening on some core

649
00:27:15,679 --> 00:27:20,080
somewhere or it's suspended who knows

650
00:27:17,599 --> 00:27:25,788
but it's you know it's a state right

651
00:27:20,079 --> 00:27:31,089
each thread has implicit to it in OpenGL

652
00:27:25,788 --> 00:27:35,740
RC so anytime a thread issues in OpenGL

653
00:27:31,089 --> 00:27:39,408
call it must have previously established

654
00:27:35,740 --> 00:27:41,960
which OpenGL RC it is talking about and

655
00:27:39,409 --> 00:27:42,770
in fact I already mentioned the call

656
00:27:41,960 --> 00:27:45,140
that does that

657
00:27:42,769 --> 00:27:47,720
wiggle make current basically what

658
00:27:45,140 --> 00:27:52,970
wiggle make current does is it sets what

659
00:27:47,720 --> 00:27:56,028
the OpenGL RC is for your thread so what

660
00:27:52,970 --> 00:27:57,620
we need to do in order to get our opengl

661
00:27:56,028 --> 00:27:59,720
up and running even just in a

662
00:27:57,619 --> 00:28:01,189
rudimentary sense or our first goal will

663
00:27:59,720 --> 00:28:03,140
be to just like clear the screen with

664
00:28:01,190 --> 00:28:05,690
opengl right that'll that's all we're

665
00:28:03,140 --> 00:28:09,590
gonna try to do will clear the screen to

666
00:28:05,690 --> 00:28:11,570
some hideous pink so we don't worked so

667
00:28:09,589 --> 00:28:13,548
in order to do that with opengl what we

668
00:28:11,569 --> 00:28:16,178
need to be able to do is we need to be

669
00:28:13,548 --> 00:28:19,849
able to create one of these OpenGL

670
00:28:16,179 --> 00:28:21,649
rendering contexts and then after we do

671
00:28:19,849 --> 00:28:24,168
that we need to be able to establish

672
00:28:21,648 --> 00:28:25,489
that it is the one for the thread

673
00:28:24,169 --> 00:28:29,059
whichever thread in the system we want

674
00:28:25,490 --> 00:28:30,769
it's the one for that thread that will

675
00:28:29,058 --> 00:28:32,898
display it to the screen so whoever's

676
00:28:30,769 --> 00:28:37,069
doing the OpenGL calls that thread has

677
00:28:32,898 --> 00:28:39,048
to establish it as its context so

678
00:28:37,069 --> 00:28:40,369
hopefully that makes some sense again

679
00:28:39,048 --> 00:28:42,139
not too complicated it's basically

680
00:28:40,369 --> 00:28:44,928
setting a bacterial system we have

681
00:28:42,140 --> 00:28:46,159
Windows as DC idea and now we're

682
00:28:44,929 --> 00:28:51,710
essentially putting something on top of

683
00:28:46,159 --> 00:28:53,650
that which is this OpenGL RC okay so

684
00:28:51,710 --> 00:28:56,049
yeah

685
00:28:53,650 --> 00:28:59,350
we start out as you might expect with

686
00:28:56,049 --> 00:29:01,089
wiggle create context is a call that

687
00:28:59,349 --> 00:29:02,740
will allow us to make one of these

688
00:29:01,089 --> 00:29:05,559
OpenGL rendering context and you can

689
00:29:02,740 --> 00:29:07,329
kind of see there so HD LRC is Windows

690
00:29:05,559 --> 00:29:12,700
term for an OpenGL rendering context

691
00:29:07,329 --> 00:29:15,069
handle right handle to a GL RC and so

692
00:29:12,700 --> 00:29:20,289
that's exactly what we need

693
00:29:15,069 --> 00:29:23,829
so this is our opengl RC we need to do a

694
00:29:20,289 --> 00:29:25,299
rittle create context and then you can

695
00:29:23,829 --> 00:29:28,149
see right here that we have to pass it

696
00:29:25,299 --> 00:29:30,149
that HDC that weeks that were that you

697
00:29:28,150 --> 00:29:33,730
know it's it's sitting on top of right

698
00:29:30,150 --> 00:29:38,710
so we need to do a get DC from the

699
00:29:33,730 --> 00:29:41,049
window potentially that we're calling to

700
00:29:38,710 --> 00:29:42,400
we need to get that TC and I believe I

701
00:29:41,049 --> 00:29:43,990
can release the DC I don't think we ever

702
00:29:42,400 --> 00:29:45,670
need to hold on to it we just need it

703
00:29:43,990 --> 00:29:47,380
temporarily so it can be associated with

704
00:29:45,670 --> 00:29:48,940
the window I believe that's true

705
00:29:47,380 --> 00:29:51,460
we'll find out in a second look I said

706
00:29:48,940 --> 00:29:53,140
hard to remember all these things but so

707
00:29:51,460 --> 00:29:56,410
we get that EC we create a context off

708
00:29:53,140 --> 00:29:59,140
of that DC and then we would need to

709
00:29:56,410 --> 00:30:01,390
make it so that this thread actually has

710
00:29:59,140 --> 00:30:05,590
that context sort of active right so we

711
00:30:01,390 --> 00:30:08,620
do a wiggle make current and again that

712
00:30:05,589 --> 00:30:10,029
wiggle make current is just to associate

713
00:30:08,619 --> 00:30:11,889
it with the thread because just the act

714
00:30:10,029 --> 00:30:13,450
of creating it it doesn't know whether

715
00:30:11,890 --> 00:30:14,830
you actually want to use that one or if

716
00:30:13,450 --> 00:30:16,569
you just try to create one to have it

717
00:30:14,829 --> 00:30:19,269
and maybe you're creating multiple or

718
00:30:16,569 --> 00:30:25,720
something right so that takes the DC and

719
00:30:19,269 --> 00:30:28,329
the RC ok so this obviously has a

720
00:30:25,720 --> 00:30:30,490
boolean that it returns so we expect

721
00:30:28,329 --> 00:30:32,230
this to be true if it's not we might

722
00:30:30,490 --> 00:30:34,329
want to go ahead and do a diagnostic

723
00:30:32,230 --> 00:30:36,400
here but it's probably never going to

724
00:30:34,329 --> 00:30:42,369
fail but we could the very least right

725
00:30:36,400 --> 00:30:45,640
now say like invalid code path right so

726
00:30:42,369 --> 00:30:50,759
I'm gonna compile that and at this point

727
00:30:45,640 --> 00:30:55,270
this would be you know success in theory

728
00:30:50,759 --> 00:30:57,579
now there's a there's a caveat here

729
00:30:55,269 --> 00:31:00,339
right because that looks way too simple

730
00:30:57,579 --> 00:31:01,659
right it's like Oh Casey you said this

731
00:31:00,339 --> 00:31:05,559
tunic op kadia there's no way you were

732
00:31:01,660 --> 00:31:07,410
ever gonna get it right and yet there

733
00:31:05,559 --> 00:31:09,259
it's that's so trivial what could be

734
00:31:07,410 --> 00:31:11,670
easier than what you've just typed in

735
00:31:09,259 --> 00:31:15,930
well I'm gonna go ahead and go a little

736
00:31:11,670 --> 00:31:18,509
further maybe just so we can maybe test

737
00:31:15,930 --> 00:31:19,650
this guy or whatever and show you that

738
00:31:18,509 --> 00:31:20,940
this doesn't work because there's a

739
00:31:19,650 --> 00:31:23,160
bunch of stuff we actually have to do to

740
00:31:20,940 --> 00:31:25,320
make this work so I wish it were that

741
00:31:23,160 --> 00:31:27,269
easy it's not that easy this call

742
00:31:25,319 --> 00:31:29,250
basically won't actually do what we want

743
00:31:27,269 --> 00:31:31,079
it to do and we'll get into why that is

744
00:31:29,250 --> 00:31:34,109
a little bit later so let me just finish

745
00:31:31,079 --> 00:31:35,639
up this quickly and then you'll see but

746
00:31:34,109 --> 00:31:37,740
if you're if you're thinking in your

747
00:31:35,640 --> 00:31:43,400
head right now what was he talking about

748
00:31:37,740 --> 00:31:46,349
trust me it it gets worse it sounds

749
00:31:43,400 --> 00:31:48,030
alright so if we call win thirty

750
00:31:46,349 --> 00:31:50,069
thirty-two in it open jail then we will

751
00:31:48,029 --> 00:31:52,470
have an open GL context now what we need

752
00:31:50,069 --> 00:31:53,730
to do here is we need to actually do

753
00:31:52,470 --> 00:31:56,190
something where we'd actually be able to

754
00:31:53,730 --> 00:31:59,130
see it working and so what I'm going to

755
00:31:56,190 --> 00:32:01,559
do is I'm going to take where we do all

756
00:31:59,130 --> 00:32:03,540
the rest of our stuff like our swap

757
00:32:01,559 --> 00:32:06,649
buffers sort of our stuff where we like

758
00:32:03,539 --> 00:32:09,930
present so I believe we have our stretch

759
00:32:06,650 --> 00:32:11,460
we have like a stretch di bits win32

760
00:32:09,930 --> 00:32:14,370
display buffering window this thing

761
00:32:11,460 --> 00:32:16,650
right this win32 display buffering

762
00:32:14,369 --> 00:32:18,209
window right now is taking that off

763
00:32:16,650 --> 00:32:19,980
screen buffer the cat draw and it's

764
00:32:18,210 --> 00:32:21,480
going ahead and it's putting it out to

765
00:32:19,980 --> 00:32:26,009
the screen I'm gonna go ahead and

766
00:32:21,480 --> 00:32:27,990
disable all of that right now and so

767
00:32:26,009 --> 00:32:29,730
what happens if I run this is we should

768
00:32:27,990 --> 00:32:31,470
get you know our game should disappear

769
00:32:29,730 --> 00:32:33,390
so we should have our fade and there's

770
00:32:31,470 --> 00:32:39,029
just garbage or whatever blackness who

771
00:32:33,390 --> 00:32:43,320
knows what is there right so then I'm

772
00:32:39,029 --> 00:32:46,049
going to insert some OpenGL in here now

773
00:32:43,319 --> 00:32:48,929
this is very simple the basis of the

774
00:32:46,049 --> 00:32:51,839
really easy part about this I'm just

775
00:32:48,930 --> 00:32:53,160
going to set some things and again you

776
00:32:51,839 --> 00:32:54,869
don't have to pay too much attention to

777
00:32:53,160 --> 00:32:56,070
these but I'll kind of go through it

778
00:32:54,869 --> 00:32:57,899
each of their art and we'll cover them

779
00:32:56,069 --> 00:33:02,819
in more detail later when we actually do

780
00:32:57,900 --> 00:33:04,830
a render path with OpenGL but I'm just

781
00:33:02,819 --> 00:33:07,409
going to sort of show you the three

782
00:33:04,829 --> 00:33:10,619
steps we need to show something on the

783
00:33:07,410 --> 00:33:13,410
screen so first of all we have GL clear

784
00:33:10,619 --> 00:33:15,869
color and what GL clear color does is it

785
00:33:13,410 --> 00:33:18,000
establishes what color will be used for

786
00:33:15,869 --> 00:33:19,799
clearing the screen and basically we

787
00:33:18,000 --> 00:33:21,119
just pass it it's it's exactly like

788
00:33:19,799 --> 00:33:23,549
you've seen before all the

789
00:33:21,119 --> 00:33:25,379
the stuff we've done it just passes a

790
00:33:23,549 --> 00:33:27,808
floating point value for red green blue

791
00:33:25,380 --> 00:33:29,250
and alpha that's the destination alpha

792
00:33:27,808 --> 00:33:32,819
Channel so in the in the frame buffer

793
00:33:29,250 --> 00:33:34,740
remember we had in our frame buffer we

794
00:33:32,819 --> 00:33:37,049
had a 32-bit frame buffer with 8 bits

795
00:33:34,740 --> 00:33:38,339
for alpha red green blue right and we

796
00:33:37,049 --> 00:33:39,659
often times talked about them and

797
00:33:38,339 --> 00:33:41,609
operate them on floats but then we

798
00:33:39,660 --> 00:33:43,500
converted them down to eight but the

799
00:33:41,609 --> 00:33:45,689
exact same thing is true for OpenGL in

800
00:33:43,500 --> 00:33:47,700
the clear color we can set what colors

801
00:33:45,690 --> 00:33:49,200
we want in a floating point sense so we

802
00:33:47,700 --> 00:33:53,009
can say oh I want to set it to like

803
00:33:49,200 --> 00:33:54,240
purple right or something like that

804
00:33:53,009 --> 00:33:56,279
right

805
00:33:54,240 --> 00:33:58,650
Mississippi alpha zero so I'll set it to

806
00:33:56,279 --> 00:34:02,490
like a bright ugly a nice ugly bright

807
00:33:58,650 --> 00:34:03,840
purple or something and what that'll do

808
00:34:02,490 --> 00:34:05,519
is it says that's the color we're going

809
00:34:03,839 --> 00:34:08,668
to be clearing with and then when I go

810
00:34:05,519 --> 00:34:11,759
to clear it will automatically one of

811
00:34:08,668 --> 00:34:13,589
the things about OpenGL is it's a little

812
00:34:11,760 --> 00:34:15,000
bit higher level it's not that low level

813
00:34:13,590 --> 00:34:17,669
of a graphics API I mean it is a little

814
00:34:15,000 --> 00:34:19,260
level but it's not that low level it's

815
00:34:17,668 --> 00:34:21,299
not like mantle or something where it's

816
00:34:19,260 --> 00:34:25,139
you know trying to target a sort of a

817
00:34:21,300 --> 00:34:27,000
specific graphics card format right so

818
00:34:25,139 --> 00:34:29,070
OpenGL does some things for you so for

819
00:34:27,000 --> 00:34:31,980
example when we do GL clear it doesn't

820
00:34:29,070 --> 00:34:33,960
matter what format the back buffer

821
00:34:31,980 --> 00:34:36,240
actually is that you're clearing it'll

822
00:34:33,960 --> 00:34:37,800
automatically convert the color down to

823
00:34:36,239 --> 00:34:40,888
whatever that is and then fill it with

824
00:34:37,800 --> 00:34:42,600
that right so GL does do some stuff for

825
00:34:40,889 --> 00:34:46,230
you if that makes sense

826
00:34:42,599 --> 00:34:48,299
and that's some of the things it does so

827
00:34:46,230 --> 00:34:50,309
that's that's that and then we have the

828
00:34:48,300 --> 00:34:51,899
GL clear call we just say what we want

829
00:34:50,309 --> 00:34:54,690
to clear now I would like to clear

830
00:34:51,898 --> 00:34:58,259
everything oops that's not what I wanted

831
00:34:54,690 --> 00:35:00,389
to click but the only thing we actually

832
00:34:58,260 --> 00:35:01,500
care about at the moment is the color

833
00:35:00,389 --> 00:35:02,819
buffer because we're not really using

834
00:35:01,500 --> 00:35:04,860
any other buffers we're not using any of

835
00:35:02,820 --> 00:35:07,769
these other buffers so I can just say

836
00:35:04,860 --> 00:35:11,280
hey it's the GL color buffer bit

837
00:35:07,769 --> 00:35:13,170
that just means clear the color buffer

838
00:35:11,280 --> 00:35:14,610
if you have other buffers we haven't

839
00:35:13,170 --> 00:35:17,070
talked about any of these are so you

840
00:35:14,610 --> 00:35:18,960
don't care and neither do I at this

841
00:35:17,070 --> 00:35:21,210
point but these are other buffers like

842
00:35:18,960 --> 00:35:23,010
this the depth buffer is a Z buffer what

843
00:35:21,210 --> 00:35:24,929
we call Z buffer right the accumulation

844
00:35:23,010 --> 00:35:27,360
buffer is an old opengl thing that you

845
00:35:24,929 --> 00:35:28,919
don't even use anymore and the stencil

846
00:35:27,360 --> 00:35:31,050
buffer is a thing for a very specific

847
00:35:28,920 --> 00:35:32,519
raster ops there's tons of reasons why I

848
00:35:31,050 --> 00:35:34,019
exist and we won't even go into him I

849
00:35:32,519 --> 00:35:35,309
don't even know if we'll ever even

850
00:35:34,019 --> 00:35:36,920
talk about them hammer here but point

851
00:35:35,309 --> 00:35:39,239
being color buffer is the actual

852
00:35:36,920 --> 00:35:42,000
displayed colors that we want to show on

853
00:35:39,239 --> 00:35:43,529
the screen and so here's some OpenGL

854
00:35:42,000 --> 00:35:46,320
that makes that happen

855
00:35:43,530 --> 00:35:48,060
okay so we have GL clear color that sets

856
00:35:46,320 --> 00:35:52,019
the clear color we have GL clear which

857
00:35:48,059 --> 00:35:55,170
says the the buffer bit that does much

858
00:35:52,019 --> 00:35:58,230
like we do drawing to a off-screen

859
00:35:55,170 --> 00:36:00,809
buffer so it's going to do those

860
00:35:58,230 --> 00:36:03,240
operations potentially on some memory

861
00:36:00,809 --> 00:36:06,150
that we can't actually see and the way

862
00:36:03,239 --> 00:36:09,089
that you bring that into the to actually

863
00:36:06,150 --> 00:36:12,389
display that to the window is you call

864
00:36:09,090 --> 00:36:14,130
swap buffers which says hey go ahead and

865
00:36:12,389 --> 00:36:16,469
display whatever it was you were

866
00:36:14,130 --> 00:36:19,019
displaying but in order to that I

867
00:36:16,469 --> 00:36:21,750
believe we have to give it a the the DC

868
00:36:19,019 --> 00:36:23,880
that we're trying to swap with I think

869
00:36:21,750 --> 00:36:28,670
yeah that's it

870
00:36:23,880 --> 00:36:32,880
and so then we just say ok display that

871
00:36:28,670 --> 00:36:36,690
now again there's a little more business

872
00:36:32,880 --> 00:36:40,230
we probably want to do here just to make

873
00:36:36,690 --> 00:36:42,990
sure things are just a little more a

874
00:36:40,230 --> 00:36:46,079
little more correct and that is there's

875
00:36:42,989 --> 00:36:47,429
also a notion in OpenGL of what region

876
00:36:46,079 --> 00:36:50,670
of the screen that you're drawing to

877
00:36:47,429 --> 00:36:52,949
write and that is done with this

878
00:36:50,670 --> 00:36:54,960
function called GL viewport and what GL

879
00:36:52,949 --> 00:36:56,399
viewport does is it just defines the

880
00:36:54,960 --> 00:36:59,400
boundaries of what you're trying to

881
00:36:56,400 --> 00:37:01,019
render right and so really we just want

882
00:36:59,400 --> 00:37:04,200
to clear the whole screen so we would

883
00:37:01,019 --> 00:37:06,059
just say hey you know what guys we're

884
00:37:04,199 --> 00:37:11,069
just gonna go from zero zero to width

885
00:37:06,059 --> 00:37:13,829
height and that's it but that right

886
00:37:11,070 --> 00:37:16,110
there is roughly the correct GL for pick

887
00:37:13,829 --> 00:37:18,150
a region of the screen to render set

888
00:37:16,110 --> 00:37:19,800
what color I want to clear it to clear

889
00:37:18,150 --> 00:37:24,329
it and we'll call that done for now

890
00:37:19,800 --> 00:37:25,470
display it on the screen okay now give

891
00:37:24,329 --> 00:37:26,759
me I'm going into too much detail but

892
00:37:25,469 --> 00:37:27,659
exactly what happens with those but

893
00:37:26,760 --> 00:37:29,790
that's the basic idea

894
00:37:27,659 --> 00:37:31,319
alright so now every time we go to

895
00:37:29,789 --> 00:37:32,789
display something instead of doing the

896
00:37:31,320 --> 00:37:34,860
stuff we're routing before it'll do that

897
00:37:32,789 --> 00:37:38,009
however unless I'm very much mistaken

898
00:37:34,860 --> 00:37:39,930
this will not show us a pink screen so

899
00:37:38,010 --> 00:37:44,040
you can see that we have no such pink

900
00:37:39,929 --> 00:37:45,179
screen to speak up why is that well this

901
00:37:44,039 --> 00:37:47,099
is where it starts getting into the

902
00:37:45,179 --> 00:37:50,159
stuff for hours like yeah it's not

903
00:37:47,099 --> 00:37:51,778
as easy as you might like first of all

904
00:37:50,159 --> 00:37:53,219
well I guess that's not fair we should

905
00:37:51,778 --> 00:37:56,400
have we have to at least call the

906
00:37:53,219 --> 00:37:58,439
function so let me call the function and

907
00:37:56,400 --> 00:38:01,889
then we'll still won't draw a pink and

908
00:37:58,440 --> 00:38:03,869
and then I can say what I just said so

909
00:38:01,889 --> 00:38:06,798
let's go down to where we want to put

910
00:38:03,869 --> 00:38:10,259
this once we create the window obviously

911
00:38:06,798 --> 00:38:14,778
then we'd be ready to to initialize up a

912
00:38:10,259 --> 00:38:18,539
jail on it so let's go ahead and do that

913
00:38:14,778 --> 00:38:20,068
okay perfect even better so we don't

914
00:38:18,539 --> 00:38:20,849
even get past the initialization presume

915
00:38:20,068 --> 00:38:23,909
lis that's because we couldn't create

916
00:38:20,849 --> 00:38:25,440
the RCD yes so that's great that that

917
00:38:23,909 --> 00:38:27,028
illustrates it even better than not

918
00:38:25,440 --> 00:38:27,568
seeing pink you can just see that it

919
00:38:27,028 --> 00:38:30,748
didn't work

920
00:38:27,568 --> 00:38:32,308
so why didn't it work wouldn't it be

921
00:38:30,748 --> 00:38:34,348
great if it worked yes but why didn't

922
00:38:32,309 --> 00:38:37,859
work well the reason it didn't work is

923
00:38:34,349 --> 00:38:42,479
because for reasons which nowadays I

924
00:38:37,858 --> 00:38:45,528
would say are very legacy back in the

925
00:38:42,478 --> 00:38:48,748
old days there was a lot more

926
00:38:45,528 --> 00:38:51,630
optimization around things regarding

927
00:38:48,748 --> 00:38:53,308
graphics in terms of like the format of

928
00:38:51,630 --> 00:38:55,349
what was on screen and what was stored

929
00:38:53,309 --> 00:38:57,028
because memory was very expensive you

930
00:38:55,349 --> 00:38:59,460
didn't have infinity of it like you did

931
00:38:57,028 --> 00:39:01,440
now memory bandwidth was very expensive

932
00:38:59,460 --> 00:39:04,499
you couldn't just go around having

933
00:39:01,440 --> 00:39:06,960
everything be 32-bit color all the time

934
00:39:04,498 --> 00:39:08,879
and all this stuff and so in the old

935
00:39:06,960 --> 00:39:11,278
days you used to have stuff like Windows

936
00:39:08,880 --> 00:39:14,219
could run in a palletized graphics mode

937
00:39:11,278 --> 00:39:16,079
for example right like Windows could run

938
00:39:14,219 --> 00:39:19,229
in an 8-bit color mode where there was a

939
00:39:16,079 --> 00:39:23,130
color table and each pixel was only

940
00:39:19,228 --> 00:39:25,169
eight bits of data and it could go and

941
00:39:23,130 --> 00:39:27,660
like look in a color table to see what

942
00:39:25,170 --> 00:39:29,579
color that 8 bits referred to right so

943
00:39:27,659 --> 00:39:33,598
it's a palette 'add you know like a pet

944
00:39:29,579 --> 00:39:36,390
like a color palette I mean heck it used

945
00:39:33,599 --> 00:39:38,880
to run in a 16 color mode right and so

946
00:39:36,389 --> 00:39:41,129
when you were actually hooking these up

947
00:39:38,880 --> 00:39:44,489
in the old days it was important to tell

948
00:39:41,130 --> 00:39:49,140
windows before you actually tried to do

949
00:39:44,489 --> 00:39:51,778
OpenGL rendering to a window what kind

950
00:39:49,139 --> 00:39:53,848
of display you were actually trying to

951
00:39:51,778 --> 00:39:56,400
accomplish what kind of pixels you were

952
00:39:53,849 --> 00:39:58,318
actually thinking you were gonna a store

953
00:39:56,400 --> 00:40:00,829
in the back buffer for OpenGL and B

954
00:39:58,318 --> 00:40:03,048
display in the actual like

955
00:40:00,829 --> 00:40:05,390
the actual window itself and so what you

956
00:40:03,048 --> 00:40:07,248
have to do is a thing called set pixel

957
00:40:05,389 --> 00:40:08,509
format now if I remember correctly we

958
00:40:07,248 --> 00:40:10,189
started about 15 minutes late so I've

959
00:40:08,509 --> 00:40:10,809
got about 20 minutes we might be able to

960
00:40:10,190 --> 00:40:17,028
get this done

961
00:40:10,809 --> 00:40:21,920
we might not so I think it's called set

962
00:40:17,028 --> 00:40:26,420
DC pixel for ya there it is

963
00:40:21,920 --> 00:40:33,048
so what you have to do here is you have

964
00:40:26,420 --> 00:40:36,200
to go through a ridiculous dance to

965
00:40:33,048 --> 00:40:39,079
figure out what quote-unquote pixel

966
00:40:36,199 --> 00:40:41,808
format you are going to set your DC to

967
00:40:39,079 --> 00:40:44,269
for OpenGL to use it for rendering and

968
00:40:41,809 --> 00:40:48,319
you can see by this descriptor that it

969
00:40:44,268 --> 00:40:50,838
is not a fun thing to do basically what

970
00:40:48,318 --> 00:40:52,940
you're trying to do is set up all of the

971
00:40:50,838 --> 00:40:54,920
possible information you might need now

972
00:40:52,940 --> 00:40:56,958
do if you remember from when we did

973
00:40:54,920 --> 00:40:58,940
bitmaps remember like green shift red

974
00:40:56,958 --> 00:41:01,159
shift that sort of stuff

975
00:40:58,940 --> 00:41:03,108
where we were talking about where like

976
00:41:01,159 --> 00:41:05,058
what the mask was for where the bits

977
00:41:03,108 --> 00:41:07,759
were and what the shift was well this is

978
00:41:05,059 --> 00:41:10,099
that times 10 right now you've got the

979
00:41:07,759 --> 00:41:12,289
RGB x' and you got the accumulation

980
00:41:10,099 --> 00:41:14,180
buffer and the depth and stencil buffers

981
00:41:12,289 --> 00:41:15,920
these other buffers that I said we don't

982
00:41:14,179 --> 00:41:19,389
even really care about right now all of

983
00:41:15,920 --> 00:41:21,680
that stuff has to be specified right but

984
00:41:19,389 --> 00:41:23,170
yes it would be straightforward if all

985
00:41:21,679 --> 00:41:25,098
we had to do is fill one of these out

986
00:41:23,170 --> 00:41:26,420
because then we just fill out whatever

987
00:41:25,099 --> 00:41:27,528
we wanted we'd say here's where we want

988
00:41:26,420 --> 00:41:31,729
the red here's to run three here so the

989
00:41:27,528 --> 00:41:34,909
blue go nuts but that's not what this is

990
00:41:31,728 --> 00:41:38,568
what this is is actually a way of

991
00:41:34,909 --> 00:41:45,318
selecting from the format's that OpenGL

992
00:41:38,568 --> 00:41:47,920
and and GDI currently support okay so

993
00:41:45,318 --> 00:41:51,139
you have to imagine this more as like a

994
00:41:47,920 --> 00:41:54,440
negotiation process where we have

995
00:41:51,139 --> 00:42:01,969
something we want which is a 32-bit RGB

996
00:41:54,440 --> 00:42:04,880
a buffer right an OpenGL the graphics

997
00:42:01,969 --> 00:42:08,958
library and the card that it's that's

998
00:42:04,880 --> 00:42:10,940
it's running on can only support certain

999
00:42:08,958 --> 00:42:12,318
ways of dealing with pixels because it's

1000
00:42:10,940 --> 00:42:13,530
hardware it's graphics hardware it's not

1001
00:42:12,318 --> 00:42:16,529
completely arbitrary

1002
00:42:13,530 --> 00:42:19,260
right mm-hmm so it's actually a

1003
00:42:16,530 --> 00:42:22,230
negotiation so we actually don't make

1004
00:42:19,260 --> 00:42:26,460
one of these what we do instead is we

1005
00:42:22,230 --> 00:42:28,050
try to find one of these right and in

1006
00:42:26,460 --> 00:42:31,409
order to find one of these we need to

1007
00:42:28,050 --> 00:42:34,320
use these other functions here right and

1008
00:42:31,409 --> 00:42:41,549
so what these are choose and describe

1009
00:42:34,320 --> 00:42:44,070
right is describe pixel format will if

1010
00:42:41,550 --> 00:42:47,220
we go through all of the pixel formats

1011
00:42:44,070 --> 00:42:50,190
right describe pixel format allows us to

1012
00:42:47,219 --> 00:42:53,129
pass an index and say what is pixel

1013
00:42:50,190 --> 00:42:55,320
format 0mr operating system and it will

1014
00:42:53,130 --> 00:42:57,990
come back and say oh here is the pixel

1015
00:42:55,320 --> 00:43:03,600
format descriptor for that thing right

1016
00:42:57,989 --> 00:43:05,789
this giant mess of nightmare okay and

1017
00:43:03,599 --> 00:43:09,210
furthermore then we'd go okay what's

1018
00:43:05,789 --> 00:43:13,469
pixel format 1 what's - what's 3 right

1019
00:43:09,210 --> 00:43:15,150
and we ask until I believe I don't even

1020
00:43:13,469 --> 00:43:17,909
know if we can get how many there are I

1021
00:43:15,150 --> 00:43:22,440
think we just keep asking until there's

1022
00:43:17,909 --> 00:43:26,219
no more left right until it says I can't

1023
00:43:22,440 --> 00:43:28,650
give you one is that true yeah I'm

1024
00:43:26,219 --> 00:43:30,599
pretty sure that's true so basically we

1025
00:43:28,650 --> 00:43:32,940
just keep asking until it tells us that

1026
00:43:30,599 --> 00:43:36,329
we couldn't get one so we just ask ask

1027
00:43:32,940 --> 00:43:37,769
ask ask ask ask ask and we would get all

1028
00:43:36,329 --> 00:43:40,920
the pixel formats that are there and

1029
00:43:37,769 --> 00:43:44,219
we'd see whether there was one that that

1030
00:43:40,920 --> 00:43:46,800
fit what we what we wanted right that's

1031
00:43:44,219 --> 00:43:49,799
one way we could do it the other way we

1032
00:43:46,800 --> 00:43:54,680
can do it is to ask the operating system

1033
00:43:49,800 --> 00:43:57,870
to try to find the pixel format it has

1034
00:43:54,679 --> 00:44:01,889
that most closely matches something we

1035
00:43:57,869 --> 00:44:03,750
pass in right and that's the one that

1036
00:44:01,889 --> 00:44:06,329
I'm gonna choose because I seem to

1037
00:44:03,750 --> 00:44:10,590
recall that that works fairly reliably

1038
00:44:06,329 --> 00:44:15,150
right and so what we do is we fill out

1039
00:44:10,590 --> 00:44:17,579
some small part of this we ask it to

1040
00:44:15,150 --> 00:44:21,119
pick the closest thing it can find and

1041
00:44:17,579 --> 00:44:24,090
then we hope it comes back with a with a

1042
00:44:21,119 --> 00:44:26,279
yes that it found one

1043
00:44:24,090 --> 00:44:27,930
all right you can see why I say that

1044
00:44:26,280 --> 00:44:30,420
this is easy to forget how to do it

1045
00:44:27,929 --> 00:44:32,579
right so here is one of these things

1046
00:44:30,420 --> 00:44:34,200
these pixel format descriptors what we

1047
00:44:32,579 --> 00:44:38,279
need to do is we need to first set our

1048
00:44:34,199 --> 00:44:42,000
DC to that so here it is a pixel format

1049
00:44:38,280 --> 00:44:45,180
descriptor right and we're just going to

1050
00:44:42,000 --> 00:44:47,639
have this is our pixel format this is

1051
00:44:45,179 --> 00:44:50,309
our desired pixel format let's say we

1052
00:44:47,639 --> 00:44:52,319
initialize it to 0 we now have to set up

1053
00:44:50,309 --> 00:44:55,829
the ones that it says that we need

1054
00:44:52,320 --> 00:44:58,230
so here's choose pixel format and here's

1055
00:44:55,829 --> 00:44:59,880
what how we have to set it up the N size

1056
00:44:58,230 --> 00:45:01,710
is obviously the size of the data

1057
00:44:59,880 --> 00:45:03,240
structure this is that stupid thing that

1058
00:45:01,710 --> 00:45:04,500
Windows does that's absolutely useless

1059
00:45:03,239 --> 00:45:07,409
that has literally never helped them a

1060
00:45:04,500 --> 00:45:11,340
single time which is that you have to

1061
00:45:07,409 --> 00:45:12,839
say how big the struct is so that you

1062
00:45:11,340 --> 00:45:15,600
know in case it gets like extended later

1063
00:45:12,840 --> 00:45:18,960
or something like that right then we

1064
00:45:15,599 --> 00:45:20,849
have an inversion which this is the the

1065
00:45:18,960 --> 00:45:23,070
version number because in case that

1066
00:45:20,849 --> 00:45:24,839
wasn't enough and of course there's only

1067
00:45:23,070 --> 00:45:31,200
ever been one version and it's that one

1068
00:45:24,840 --> 00:45:34,559
right there we go we then have the flags

1069
00:45:31,199 --> 00:45:37,889
and for the flags these we do need to

1070
00:45:34,559 --> 00:45:41,579
set appropriately because we need to ask

1071
00:45:37,889 --> 00:45:43,949
it to support OpenGL rendering and here

1072
00:45:41,579 --> 00:45:45,659
is that flag right there as you can see

1073
00:45:43,949 --> 00:45:47,789
like I said this was built into windows

1074
00:45:45,659 --> 00:45:49,889
open jail with despite the fact that

1075
00:45:47,789 --> 00:45:51,480
direct3d is there like thing that they

1076
00:45:49,889 --> 00:45:53,489
push on every one OpenGL was the

1077
00:45:51,480 --> 00:45:55,860
original graphics API built into Windows

1078
00:45:53,489 --> 00:46:00,000
3d graphics API direct3d was a much

1079
00:45:55,860 --> 00:46:01,820
later edition so we need that right we

1080
00:46:00,000 --> 00:46:04,559
need to be able to do OpenGL rendering

1081
00:46:01,820 --> 00:46:06,300
and we also need to be able to draw to a

1082
00:46:04,559 --> 00:46:07,980
window because we are not just

1083
00:46:06,300 --> 00:46:09,150
compositing some back buffer that we're

1084
00:46:07,980 --> 00:46:12,449
gonna read like this you can imagine

1085
00:46:09,150 --> 00:46:13,920
starting up OpenGL or an HDC that was

1086
00:46:12,449 --> 00:46:15,539
just for like rendering into a bitmap

1087
00:46:13,920 --> 00:46:16,980
that you were gonna like save to a file

1088
00:46:15,539 --> 00:46:20,250
or something and you never display it to

1089
00:46:16,980 --> 00:46:23,039
a window right but we actually need that

1090
00:46:20,250 --> 00:46:25,469
to happen right and furthermore we want

1091
00:46:23,039 --> 00:46:28,559
double buffering we want our window to

1092
00:46:25,469 --> 00:46:31,399
be able to draw to a back buffer and

1093
00:46:28,559 --> 00:46:34,250
then present to the front buffer right

1094
00:46:31,400 --> 00:46:35,460
so I believe we also want that specified

1095
00:46:34,250 --> 00:46:37,739
okay

1096
00:46:35,460 --> 00:46:41,490
so that's what we need our if it smart

1097
00:46:37,739 --> 00:46:45,118
to be see color bits is zero greater we

1098
00:46:41,489 --> 00:46:46,679
want to have 32-bit color right that's

1099
00:46:45,119 --> 00:46:52,068
what we're trying to display here so we

1100
00:46:46,679 --> 00:46:54,210
want 32 color bits and then I think

1101
00:46:52,068 --> 00:46:58,558
let's see not use not news to your

1102
00:46:54,210 --> 00:46:59,369
Creator so then we have alpha bits oh so

1103
00:46:58,559 --> 00:47:01,559
I guess not

1104
00:46:59,369 --> 00:47:03,780
color bits is probably not inclusive of

1105
00:47:01,559 --> 00:47:07,250
alphabets so this is probably just 24

1106
00:47:03,780 --> 00:47:09,390
and then we want our alpha bits to be 8

1107
00:47:07,250 --> 00:47:10,588
we don't care about any of the rest of

1108
00:47:09,389 --> 00:47:12,269
these we don't need an accumulation

1109
00:47:10,588 --> 00:47:15,389
buffer a depth of or sample buffer or an

1110
00:47:12,269 --> 00:47:17,608
auxilary buffer at all we don't need any

1111
00:47:15,389 --> 00:47:19,318
of the layer values this is for doing

1112
00:47:17,608 --> 00:47:20,730
stuff like overlays which they supported

1113
00:47:19,318 --> 00:47:21,838
in the old days back when hardware was

1114
00:47:20,730 --> 00:47:24,269
slower and they needed to do like

1115
00:47:21,838 --> 00:47:26,219
overlays it at Hardware time it's like

1116
00:47:24,269 --> 00:47:29,068
this that that's not a relevant at all

1117
00:47:26,219 --> 00:47:31,049
so we're just saying that we're just the

1118
00:47:29,068 --> 00:47:33,179
main plain that the main graphics that's

1119
00:47:31,050 --> 00:47:35,730
being displayed that's completely

1120
00:47:33,179 --> 00:47:37,500
meaningless value at this point and that

1121
00:47:35,730 --> 00:47:39,179
I think is what we need according to

1122
00:47:37,500 --> 00:47:41,730
that piece of documentation anyway is

1123
00:47:39,179 --> 00:47:45,629
what it wants us to do right so we do

1124
00:47:41,730 --> 00:47:48,269
our choose pixel format like so and

1125
00:47:45,630 --> 00:47:50,160
choose pixel format takes the HDC and

1126
00:47:48,269 --> 00:47:52,440
the pixel format descriptor that we're

1127
00:47:50,159 --> 00:47:54,348
trying to match and it returns us an

1128
00:47:52,440 --> 00:47:57,690
integer that's which pixel format right

1129
00:47:54,349 --> 00:47:59,460
so this is the like suggested pixel

1130
00:47:57,690 --> 00:48:01,369
format index that it's going to give us

1131
00:47:59,460 --> 00:48:04,949
back that's what it thinks we should use

1132
00:48:01,369 --> 00:48:07,619
and so again we guess I should put this

1133
00:48:04,949 --> 00:48:09,058
up here because we need our DC so it's

1134
00:48:07,619 --> 00:48:11,818
the window DC and we gotta pass the

1135
00:48:09,059 --> 00:48:14,490
address LexA format that in theory picks

1136
00:48:11,818 --> 00:48:17,400
one for us and then we have to set it up

1137
00:48:14,489 --> 00:48:20,009
so we have to then say all right set

1138
00:48:17,400 --> 00:48:25,108
pixel format on the DC the one that we

1139
00:48:20,010 --> 00:48:27,839
got back right we need to set so we say

1140
00:48:25,108 --> 00:48:30,150
okay here's the window DC I would like

1141
00:48:27,838 --> 00:48:32,670
you to take the one that you told me you

1142
00:48:30,150 --> 00:48:35,068
were gonna that you wanted to use I need

1143
00:48:32,670 --> 00:48:37,500
you to use that one but unfortunately as

1144
00:48:35,068 --> 00:48:39,588
you can see we also have to point it the

1145
00:48:37,500 --> 00:48:42,088
pixel to the pixel format specification

1146
00:48:39,588 --> 00:48:43,469
now here's the problem we don't know

1147
00:48:42,088 --> 00:48:46,230
what the pixel format specification is

1148
00:48:43,469 --> 00:48:47,489
right we don't know it told us back in

1149
00:48:46,230 --> 00:48:48,929
session 1 it might have nothing to do

1150
00:48:47,489 --> 00:48:50,579
with when we pass in we have no idea

1151
00:48:48,929 --> 00:48:52,049
we just hope it had 24 and eight in it

1152
00:48:50,579 --> 00:48:54,179
right but we never gave it we don't even

1153
00:48:52,050 --> 00:48:55,680
have a fully formed one of these we just

1154
00:48:54,179 --> 00:48:58,109
have the half filled out one that it

1155
00:48:55,679 --> 00:48:59,909
told us to pass it for this so what we

1156
00:48:58,110 --> 00:49:01,380
need to do in addition is to make

1157
00:48:59,909 --> 00:49:03,869
another pixel format descriptor here

1158
00:49:01,380 --> 00:49:07,760
that's like the suggested pixel format

1159
00:49:03,869 --> 00:49:11,880
and that is one that we will get from

1160
00:49:07,760 --> 00:49:13,590
Windows itself and say hey that thing

1161
00:49:11,880 --> 00:49:15,210
you just told me was the right one to

1162
00:49:13,590 --> 00:49:16,200
use could you actually go ahead and

1163
00:49:15,210 --> 00:49:18,090
describe it for me

1164
00:49:16,199 --> 00:49:20,579
right and that's what describe pixel

1165
00:49:18,090 --> 00:49:24,630
format does so we pass in the DC that

1166
00:49:20,579 --> 00:49:26,579
we're talking about we take the integer

1167
00:49:24,630 --> 00:49:28,050
that's the that represents which picks

1168
00:49:26,579 --> 00:49:29,549
for - cuz again these just indexed in

1169
00:49:28,050 --> 00:49:33,120
the operating system for this particular

1170
00:49:29,550 --> 00:49:36,690
instantiation of OpenGL and and and I'm

1171
00:49:33,119 --> 00:49:37,980
that gel of GDI so we just need to go

1172
00:49:36,690 --> 00:49:40,440
ahead and say okay that one that you

1173
00:49:37,980 --> 00:49:42,329
told us whichever one that is that's the

1174
00:49:40,440 --> 00:49:46,110
one I want to hear about we've got n

1175
00:49:42,329 --> 00:49:47,639
bytes and that says how big the the

1176
00:49:46,110 --> 00:49:53,340
thing that we're pointing at here is

1177
00:49:47,639 --> 00:49:55,559
right and it won't write past that and

1178
00:49:53,340 --> 00:49:57,539
so then we just say like okay obviously

1179
00:49:55,559 --> 00:50:03,869
it's it's whatever the size of that opes

1180
00:49:57,539 --> 00:50:05,099
it's whatever the size of this was is

1181
00:50:03,869 --> 00:50:06,150
how much you're allowed to write in

1182
00:50:05,099 --> 00:50:08,969
there and there you go

1183
00:50:06,150 --> 00:50:11,849
so we asked if the pics the pixel format

1184
00:50:08,969 --> 00:50:13,769
that matches this for the most part we

1185
00:50:11,849 --> 00:50:16,199
asked it to describe the one that depict

1186
00:50:13,769 --> 00:50:19,289
we then just turn around and hand that

1187
00:50:16,199 --> 00:50:21,629
directly back to it and say hey want to

1188
00:50:19,289 --> 00:50:24,389
go ahead and do that all right

1189
00:50:21,630 --> 00:50:27,750
so that actually sets us up to be able

1190
00:50:24,389 --> 00:50:28,349
to open to do OpenGL rendering if that

1191
00:50:27,750 --> 00:50:32,699
makes sense

1192
00:50:28,349 --> 00:50:34,319
oops got my ampersand and like I said I

1193
00:50:32,699 --> 00:50:35,730
probably just I'm not remembering all

1194
00:50:34,320 --> 00:50:38,309
the things that I have to do so that may

1195
00:50:35,730 --> 00:50:41,159
not be enough but hey that's some magic

1196
00:50:38,309 --> 00:50:42,210
stuff you had to know by being a Windows

1197
00:50:41,159 --> 00:50:45,809
programmer how would you know that

1198
00:50:42,210 --> 00:50:48,570
because you just know the magic of

1199
00:50:45,809 --> 00:50:49,829
Windows so here we go let's go ahead

1200
00:50:48,570 --> 00:50:50,910
step through this so you can kind of see

1201
00:50:49,829 --> 00:50:52,380
because I know that was just a bunch of

1202
00:50:50,909 --> 00:50:54,539
randomness that I had to tell you just

1203
00:50:52,380 --> 00:50:56,430
then and there's really not a lot of

1204
00:50:54,539 --> 00:50:57,659
rhyme or reason for it so here's our

1205
00:50:56,429 --> 00:50:58,889
desired pixel form I can see that we

1206
00:50:57,659 --> 00:51:01,349
didn't set anything up in fact we want

1207
00:50:58,889 --> 00:51:03,098
24-bit color plus an 8-bit alpha Channel

1208
00:51:01,349 --> 00:51:04,958
right there

1209
00:51:03,099 --> 00:51:06,809
and we have the version and the flag set

1210
00:51:04,958 --> 00:51:09,458
and then the size of the structure is 40

1211
00:51:06,809 --> 00:51:12,069
we then go ahead and say hey why don't

1212
00:51:09,458 --> 00:51:14,588
you pick one for us and that's going to

1213
00:51:12,068 --> 00:51:17,288
give us back the suggested pixel format

1214
00:51:14,588 --> 00:51:18,788
at the moment it's just gonna say index

1215
00:51:17,289 --> 00:51:23,979
2 but as soon as we call describe pixel

1216
00:51:18,789 --> 00:51:26,589
format it should fill out this struct

1217
00:51:23,978 --> 00:51:29,108
with whatever that paper format was so

1218
00:51:26,588 --> 00:51:30,278
there it is so the one we got has a

1219
00:51:29,108 --> 00:51:31,420
bunch of random Flags don't know what

1220
00:51:30,278 --> 00:51:33,159
they are we could try to test for them

1221
00:51:31,420 --> 00:51:36,909
if you want to don't really care the

1222
00:51:33,159 --> 00:51:40,838
color bits is 32 so that suggests to me

1223
00:51:36,909 --> 00:51:43,629
that maybe the alpha-bits is actually is

1224
00:51:40,838 --> 00:51:45,400
included in here so I'm gonna go ahead

1225
00:51:43,630 --> 00:51:48,969
and say that we actually should pass a

1226
00:51:45,400 --> 00:51:50,199
32 to that then and is it documented

1227
00:51:48,969 --> 00:51:53,889
maybe it's docked let's just

1228
00:51:50,199 --> 00:51:55,449
double-check does this say number

1229
00:51:53,889 --> 00:51:57,969
Culbertson use prefer to be the close of

1230
00:51:55,449 --> 00:52:03,068
the color buffer excluding the Alpha bit

1231
00:51:57,969 --> 00:52:12,249
planes so do they just straight up not

1232
00:52:03,068 --> 00:52:17,679
follow their own documentation it kind

1233
00:52:12,248 --> 00:52:20,368
of looks like that doesn't it it says

1234
00:52:17,679 --> 00:52:20,368
excluding

1235
00:52:22,900 --> 00:52:33,300
I don't know what to make of that it

1236
00:52:29,739 --> 00:52:38,429
says right in it that it's excluding

1237
00:52:33,300 --> 00:52:44,950
well anyway I'm gonna go ahead and say

1238
00:52:38,429 --> 00:52:56,139
to do okay see hey Raymond Chen what's

1239
00:52:44,949 --> 00:53:00,819
the deal here is see color bits actually

1240
00:52:56,139 --> 00:53:09,009
supposed to exclude the alphabets like

1241
00:53:00,820 --> 00:53:11,559
the docs like MSDN says or not because

1242
00:53:09,010 --> 00:53:13,810
it's pretty clearly not doing that when

1243
00:53:11,559 --> 00:53:15,789
we come back in here so I don't know but

1244
00:53:13,809 --> 00:53:18,579
anyway you can see that what happened

1245
00:53:15,789 --> 00:53:20,380
when we actually did this is that we got

1246
00:53:18,579 --> 00:53:20,889
back a 32-bit color thing which is what

1247
00:53:20,380 --> 00:53:24,490
we wanted

1248
00:53:20,889 --> 00:53:27,009
it's got our G B and a like we wanted

1249
00:53:24,489 --> 00:53:28,719
but you'll notice that it also decided

1250
00:53:27,010 --> 00:53:30,760
to just give us some free buffers it

1251
00:53:28,719 --> 00:53:32,889
gave us a 24-bit depth buffer and an

1252
00:53:30,760 --> 00:53:33,250
8-bit stencil buffer it just gave them

1253
00:53:32,889 --> 00:53:35,349
to us

1254
00:53:33,250 --> 00:53:37,329
and that's presumably because this

1255
00:53:35,349 --> 00:53:39,699
Hardware only knows how to do that I

1256
00:53:37,329 --> 00:53:41,769
guess I don't know who knows why that's

1257
00:53:39,699 --> 00:53:43,629
what it shows so that's what we got so

1258
00:53:41,769 --> 00:53:46,389
we got extra buffers we don't care we

1259
00:53:43,630 --> 00:53:48,700
won't use them but we have them ok so

1260
00:53:46,389 --> 00:53:53,529
then we say set pixel format oops

1261
00:53:48,699 --> 00:53:55,539
no we don't because I've actually added

1262
00:53:53,530 --> 00:53:58,120
some code there alright so then we'd say

1263
00:53:55,539 --> 00:54:00,309
say pixel set pixel format which which

1264
00:53:58,119 --> 00:54:02,559
sets our window up to use it and then we

1265
00:54:00,309 --> 00:54:04,449
say we will make current and hey it

1266
00:54:02,559 --> 00:54:11,139
actually works now so that we actually

1267
00:54:04,449 --> 00:54:12,489
have an OpenGL context right and hey so

1268
00:54:11,139 --> 00:54:14,289
I guess when I said that I was never

1269
00:54:12,489 --> 00:54:16,629
gonna get it right I guess I actually

1270
00:54:14,289 --> 00:54:18,340
did get it right that was pure luck

1271
00:54:16,630 --> 00:54:21,760
it's been a long time since I've written

1272
00:54:18,340 --> 00:54:24,030
any OpenGL startup code but I guess we

1273
00:54:21,760 --> 00:54:27,310
lucked out today so anyway that's OpenGL

1274
00:54:24,030 --> 00:54:32,070
startup in a nutshell that is basically

1275
00:54:27,309 --> 00:54:34,449
all you really need to know about it but

1276
00:54:32,070 --> 00:54:37,630
there is one

1277
00:54:34,449 --> 00:54:39,009
potential problem here that I guess I'm

1278
00:54:37,630 --> 00:54:41,500
not sure if it's a problem or not

1279
00:54:39,010 --> 00:54:50,010
we could kind of see if it is or if it

1280
00:54:41,500 --> 00:54:54,190
isn't I guess I don't know I'm guessing

1281
00:54:50,010 --> 00:54:59,470
that the fade in yet so the fade in does

1282
00:54:54,190 --> 00:55:03,940
not work anymore and that's not that

1283
00:54:59,469 --> 00:55:06,159
surprising to me because OpenGL I think

1284
00:55:03,940 --> 00:55:10,240
kind of just isn't gonna listen to the

1285
00:55:06,159 --> 00:55:11,588
on top window stuff necessarily as much

1286
00:55:10,239 --> 00:55:15,879
would be my guess

1287
00:55:11,588 --> 00:55:18,308
let me see yeah so all the like overlay

1288
00:55:15,880 --> 00:55:23,890
window stuff just stops working as soon

1289
00:55:18,309 --> 00:55:25,690
as OpenGL is in the mix right so yeah

1290
00:55:23,889 --> 00:55:28,529
that fade in fade out stuff we will

1291
00:55:25,690 --> 00:55:31,329
probably have to put the fade in if

1292
00:55:28,530 --> 00:55:33,548
midlow is still adamant about having the

1293
00:55:31,329 --> 00:55:36,730
fade in part that's gonna have to be in

1294
00:55:33,548 --> 00:55:39,309
the game proper which is not a big deal

1295
00:55:36,730 --> 00:55:40,838
but just so you know that's that's what

1296
00:55:39,309 --> 00:55:44,140
that's that's how that's gonna have to

1297
00:55:40,838 --> 00:55:45,670
roll but that's it that's how you start

1298
00:55:44,139 --> 00:55:47,348
up OpenGL and so once you've got that

1299
00:55:45,670 --> 00:55:50,318
you can now actually do just any OpenGL

1300
00:55:47,349 --> 00:55:55,630
you want there is one caveat which is if

1301
00:55:50,318 --> 00:55:58,119
you want to access opengl 3.0 or 4.0 you

1302
00:55:55,630 --> 00:56:00,730
have to do an extended context creation

1303
00:55:58,119 --> 00:56:03,130
call so after you do create context you

1304
00:56:00,730 --> 00:56:07,329
then have to do a wiggle create context

1305
00:56:03,130 --> 00:56:09,160
a trib call which maybe we'll do a

1306
00:56:07,329 --> 00:56:10,568
little later on if we decide we want to

1307
00:56:09,159 --> 00:56:14,318
do OpenGL rendering but that's the

1308
00:56:10,568 --> 00:56:16,659
basics of getting it working and once

1309
00:56:14,318 --> 00:56:19,449
you do that you can make any OpenGL

1310
00:56:16,659 --> 00:56:22,230
calls that you want so let's go ahead

1311
00:56:19,449 --> 00:56:22,230
and go to the Q&amp;A

1312
00:56:29,710 --> 00:56:33,849
funny the pink didn't show up on the

1313
00:56:31,389 --> 00:56:34,900
stream OBS problem yeah I guess it can't

1314
00:56:33,849 --> 00:56:36,849
capture up in jail

1315
00:56:34,900 --> 00:56:41,260
Connor rents we all just saw a black

1316
00:56:36,849 --> 00:56:43,509
screen out of pink screen uh so I guess

1317
00:56:41,260 --> 00:56:45,610
what I'll do is I'll switch over to

1318
00:56:43,510 --> 00:56:50,170
using the capture card it's probably

1319
00:56:45,610 --> 00:56:52,380
what I'll do and and we'll just go from

1320
00:56:50,170 --> 00:56:52,380
there

1321
00:57:03,338 --> 00:57:08,318
Cubert Caleb according to this you

1322
00:57:06,400 --> 00:57:11,680
should use 32 for the color bit yeah I

1323
00:57:08,318 --> 00:57:14,199
mean so as far as I can it looked pretty

1324
00:57:11,679 --> 00:57:16,629
clear to me that the docks are just

1325
00:57:14,199 --> 00:57:18,519
wrong because we looked at what came

1326
00:57:16,630 --> 00:57:22,210
back and it came back we passed 24 it

1327
00:57:18,519 --> 00:57:24,338
came back 32 so there ain't no such

1328
00:57:22,210 --> 00:57:27,068
thing and it was it was 32 with 8 bits

1329
00:57:24,338 --> 00:57:32,259
of alpha and and there no graphics card

1330
00:57:27,068 --> 00:57:34,808
is gonna prefer 32 bits of color plus 8

1331
00:57:32,260 --> 00:57:36,339
bits of alpha for a 30 for a 40 bit

1332
00:57:34,809 --> 00:57:37,960
color buffer that's not a thing I mean

1333
00:57:36,338 --> 00:57:39,009
it's not that you couldn't do it but

1334
00:57:37,960 --> 00:57:43,300
it's not gonna be the thing that's going

1335
00:57:39,010 --> 00:57:46,380
to default to right so I'm pretty sure

1336
00:57:43,300 --> 00:57:46,380
that those docks are just wrong

1337
00:57:47,730 --> 00:57:50,880
pretty sure

1338
00:57:57,750 --> 00:58:02,980
gary johansson curious at the CPU or the

1339
00:58:01,480 --> 00:58:06,010
GPU actually communicates the

1340
00:58:02,980 --> 00:58:11,619
information to the screen I feel you

1341
00:58:06,010 --> 00:58:14,170
mentioned this I forgot so I'm not sure

1342
00:58:11,619 --> 00:58:18,430
to mean by information to the screen

1343
00:58:14,170 --> 00:58:21,730
I don't exactly what that means in your

1344
00:58:18,429 --> 00:58:24,219
mind but what I will say is that what's

1345
00:58:21,730 --> 00:58:27,579
happening at the moment is that what's

1346
00:58:24,219 --> 00:58:31,779
the CPU is packaging up a buffer

1347
00:58:27,579 --> 00:58:34,420
essentially of commands and those

1348
00:58:31,780 --> 00:58:37,560
commands are then transferred to the GPU

1349
00:58:34,420 --> 00:58:41,320
over the PCI bus where it executes them

1350
00:58:37,559 --> 00:58:42,549
within a reasonable amount of slop

1351
00:58:41,320 --> 00:58:46,720
that's what's going on

1352
00:58:42,550 --> 00:58:48,670
so the clearing does not happen on the

1353
00:58:46,719 --> 00:58:51,399
CPU the clear to pink actually happens

1354
00:58:48,670 --> 00:58:53,320
on the GPU but telling it the CPU like

1355
00:58:51,400 --> 00:58:55,960
packages up the commands to tell it to

1356
00:58:53,320 --> 00:59:02,109
clear to pink and then the GPU executes

1357
00:58:55,960 --> 00:59:04,389
that right is roughly what's happening 1

1358
00:59:02,108 --> 00:59:08,289
2 1 3 I see what are your thoughts about

1359
00:59:04,389 --> 00:59:09,670
Vulcan not a fan but can't talk about it

1360
00:59:08,289 --> 00:59:12,130
specifically because it's not out yet I

1361
00:59:09,670 --> 00:59:16,659
don't think I have to wait till I can

1362
00:59:12,130 --> 00:59:17,800
actually talk about it SSS McGrath if

1363
00:59:16,659 --> 00:59:19,899
you're ever in the mood to do a

1364
00:59:17,800 --> 00:59:21,220
straight-up unrelated tutorial stream IO

1365
00:59:19,900 --> 00:59:23,740
completion ports would be great because

1366
00:59:21,219 --> 00:59:25,358
I ain't reading about that star star

1367
00:59:23,739 --> 00:59:29,618
star presumably that was a four-letter

1368
00:59:25,358 --> 00:59:31,299
word that was removed yeah I mean I got

1369
00:59:29,619 --> 00:59:33,358
so much stuff to stream that I don't

1370
00:59:31,300 --> 00:59:35,589
know that that's gonna happen but

1371
00:59:33,358 --> 00:59:38,739
they're a good API you should read about

1372
00:59:35,588 --> 00:59:41,858
them it's the one API in Windows that's

1373
00:59:38,739 --> 00:59:47,049
actually good what do you think of

1374
00:59:41,858 --> 00:59:51,670
NVIDIA GeForce just what do you think of

1375
00:59:47,050 --> 00:59:54,420
NVIDIA GeForce does not clear memory no

1376
00:59:51,670 --> 00:59:54,420
idea what that means

1377
00:59:54,550 --> 00:59:59,560
Elvin came in late do we have our own GL

1378
00:59:57,130 --> 01:00:02,430
function pointers loaded now no not yet

1379
00:59:59,559 --> 01:00:05,108
because we are only using at the moment

1380
01:00:02,429 --> 01:00:06,460
OpenGL one point X basically because all

1381
01:00:05,108 --> 01:00:08,319
we had to do all we have to do is start

1382
01:00:06,460 --> 01:00:09,579
rendering OpenGL is just use the ones

1383
01:00:08,320 --> 01:00:15,970
that's actually built directly in

1384
01:00:09,579 --> 01:00:19,539
windows for always but but at some point

1385
01:00:15,969 --> 01:00:21,699
if we do just putting our bitmap on the

1386
01:00:19,539 --> 01:00:25,750
screen will not require any function

1387
01:00:21,699 --> 01:00:27,639
pointers for up in jail but if we want

1388
01:00:25,750 --> 01:00:31,269
to take advantage of like open jail 4.0

1389
01:00:27,639 --> 01:00:34,739
stuff or something we would need or 3.0

1390
01:00:31,269 --> 01:00:34,739
stuff we would need function pointers

1391
01:00:38,699 --> 01:00:43,239
insofar as Tricolore other than pink OBS

1392
01:00:41,710 --> 01:00:45,760
might treat that as transparent I think

1393
01:00:43,239 --> 01:00:47,409
it's not gonna capture I think I could

1394
01:00:45,760 --> 01:00:49,480
set it to capture I'd have to set it to

1395
01:00:47,409 --> 01:00:50,799
OpenGL capture or something but I'm not

1396
01:00:49,480 --> 01:00:51,719
gonna put through a capture card so we

1397
01:00:50,800 --> 01:00:53,860
don't have to care anymore

1398
01:00:51,719 --> 01:00:55,299
that'll also get us out of the business

1399
01:00:53,860 --> 01:00:57,640
of having this nonsense where there's

1400
01:00:55,300 --> 01:01:00,330
always an 11% load on the CPU like all

1401
01:00:57,639 --> 01:01:00,329
the time or whatever

1402
01:01:09,449 --> 01:01:18,129
/ AC do you know why they deprecated GL

1403
01:01:14,619 --> 01:01:20,500
underscore alpha what are what are you

1404
01:01:18,130 --> 01:01:22,358
referring to what what GL alpha are you

1405
01:01:20,500 --> 01:01:29,500
referring to what API are you talking

1406
01:01:22,358 --> 01:01:31,179
about no VIN you don't need to describe

1407
01:01:29,500 --> 01:01:32,858
pixel format call since when you use

1408
01:01:31,179 --> 01:01:35,199
choose pixel format it modifies your

1409
01:01:32,858 --> 01:01:40,170
desired pixel format with the correct

1410
01:01:35,199 --> 01:01:43,268
stuff oh just is that true all right I

1411
01:01:40,170 --> 01:01:45,818
did not remember that at all so you're

1412
01:01:43,268 --> 01:01:49,298
saying that when I do this it will just

1413
01:01:45,818 --> 01:01:51,659
open wait why did it not wanna why was

1414
01:01:49,298 --> 01:01:53,739
it not saying my breakpoint there we go

1415
01:01:51,659 --> 01:01:58,298
so you're saying when I do this it will

1416
01:01:53,739 --> 01:02:01,989
overwrite this for me nope that is not

1417
01:01:58,298 --> 01:02:06,670
what it does you can you can see that

1418
01:02:01,989 --> 01:02:10,318
that is not true right because there

1419
01:02:06,670 --> 01:02:10,318
there it is and it ain't overwritten

1420
01:02:16,590 --> 01:02:20,650
Cubert Caleb's since we have a depth

1421
01:02:18,880 --> 01:02:25,150
buffer does the Z sort really matter

1422
01:02:20,650 --> 01:02:27,970
anymore yes absolutely for two reasons

1423
01:02:25,150 --> 01:02:29,380
one for transparency you have to sort if

1424
01:02:27,969 --> 01:02:33,000
you want transparent things to work

1425
01:02:29,380 --> 01:02:35,800
properly and two because it'll be faster

1426
01:02:33,000 --> 01:02:39,880
because we can draw front to back and

1427
01:02:35,800 --> 01:02:41,590
use like an early Z or things like that

1428
01:02:39,880 --> 01:02:44,800
we can actually get speed improvement

1429
01:02:41,590 --> 01:02:46,030
from that if we want so there's there's

1430
01:02:44,800 --> 01:02:48,190
two reasons why you might want to sort

1431
01:02:46,030 --> 01:02:50,800
even if you use the Z buffer we probably

1432
01:02:48,190 --> 01:02:52,780
won't ever use the Z buffer also you

1433
01:02:50,800 --> 01:02:54,280
save a bunch of bandwidth if you don't

1434
01:02:52,780 --> 01:02:56,010
use the Z buffer then it doesn't have to

1435
01:02:54,280 --> 01:02:59,980
read or write from the Z buffer which is

1436
01:02:56,010 --> 01:03:02,530
it's a good savings to but you know we

1437
01:02:59,980 --> 01:03:04,659
we may turn the Z buffer on to get the

1438
01:03:02,530 --> 01:03:07,420
early occlusions they were for DZ buffer

1439
01:03:04,659 --> 01:03:14,139
which we would still sort for blah blah

1440
01:03:07,420 --> 01:03:16,180
blah no even my bad looks like the

1441
01:03:14,139 --> 01:03:17,618
OpenGL Doc's are lying to me again yeah

1442
01:03:16,179 --> 01:03:20,440
well they do appear to be pretty

1443
01:03:17,619 --> 01:03:24,130
inaccurate we just found that out more

1444
01:03:20,440 --> 01:03:25,539
than once I guess icarus going to be

1445
01:03:24,130 --> 01:03:27,430
doing multiple GL versions or just the

1446
01:03:25,539 --> 01:03:29,980
minimum for general win XP machines what

1447
01:03:27,429 --> 01:03:34,919
versions are most of them on even on

1448
01:03:29,980 --> 01:03:42,608
anyway um I don't really know uh not my

1449
01:03:34,920 --> 01:03:44,139
feeling on that is that like my feeling

1450
01:03:42,608 --> 01:03:45,730
on that is that we should probably only

1451
01:03:44,139 --> 01:03:47,289
do like what we should just pick a

1452
01:03:45,730 --> 01:03:49,150
reasonable version of OpenGL and use it

1453
01:03:47,289 --> 01:03:52,358
because we're a 2-d game we don't need a

1454
01:03:49,150 --> 01:03:54,760
lot of extended stuff I mean we could

1455
01:03:52,358 --> 01:03:56,230
even just get by with OpenGL 2.0 I think

1456
01:03:54,760 --> 01:03:58,030
probably in a lot of cases

1457
01:03:56,230 --> 01:04:00,480
so we'll see we'll try to keep it as

1458
01:03:58,030 --> 01:04:00,480
minimal as possible

1459
01:04:03,190 --> 01:04:10,179
because I just don't think we need very

1460
01:04:05,019 --> 01:04:11,769
much snow Vinh 92 would there be any

1461
01:04:10,179 --> 01:04:13,539
benefit of using the new vs. OpenGL for

1462
01:04:11,769 --> 01:04:15,400
a game like handmade hero yeah I mean

1463
01:04:13,539 --> 01:04:17,858
we're gonna have to we will probably

1464
01:04:15,400 --> 01:04:19,690
want some shape shaders right so we

1465
01:04:17,858 --> 01:04:22,029
probably want at a at a minimum some

1466
01:04:19,690 --> 01:04:24,309
shaders probably I mean we could get by

1467
01:04:22,030 --> 01:04:27,119
without them but you know we may want

1468
01:04:24,309 --> 01:04:27,119
some effects in there

1469
01:04:31,489 --> 01:04:37,250
mad equ a is there a difference when

1470
01:04:34,489 --> 01:04:39,679
calling a function like GL clear on the

1471
01:04:37,250 --> 01:04:41,358
OpenGL 32 lib versus the one on the

1472
01:04:39,679 --> 01:04:47,528
graphics driver DLL they're the same

1473
01:04:41,358 --> 01:04:49,699
thing they're exactly the same thing so

1474
01:04:47,528 --> 01:04:53,210
trying to underscore this

1475
01:04:49,699 --> 01:04:57,139
so when you see dot lib it can mean one

1476
01:04:53,210 --> 01:05:00,318
of two things okay it can either be an

1477
01:04:57,139 --> 01:05:03,558
import library or it can actually be a

1478
01:05:00,318 --> 01:05:06,018
code library right so when you think

1479
01:05:03,559 --> 01:05:09,230
about like oh I'm I'm linking the Z Lib

1480
01:05:06,018 --> 01:05:10,759
or something right well that's a code

1481
01:05:09,230 --> 01:05:12,380
library that's like a bunch of code that

1482
01:05:10,760 --> 01:05:14,390
somebody wrote that's like Z you know

1483
01:05:12,380 --> 01:05:19,010
it's like compression code and I'm gonna

1484
01:05:14,389 --> 01:05:22,699
link it into my game right OpenGL 32 dot

1485
01:05:19,010 --> 01:05:24,650
Lib is not that kind of a Lib OpenGL 32

1486
01:05:22,699 --> 01:05:28,399
dot Lib is an import library it's like

1487
01:05:24,650 --> 01:05:31,130
user 32 or something like that so what's

1488
01:05:28,400 --> 01:05:35,059
in there are just bind points to the

1489
01:05:31,130 --> 01:05:36,829
operating system so when you link to

1490
01:05:35,059 --> 01:05:39,319
OpenGL 32 at lib what you're actually

1491
01:05:36,829 --> 01:05:44,180
calling through to is just the is just

1492
01:05:39,318 --> 01:05:46,009
the OpenGL I CD that's loaded at that

1493
01:05:44,179 --> 01:05:48,798
time that's what it's gonna link you to

1494
01:05:46,009 --> 01:05:50,929
now sometimes there's an operating step

1495
01:05:48,798 --> 01:05:53,599
in operation step in between but that's

1496
01:05:50,929 --> 01:05:55,399
necessary like it's it's Windows needs

1497
01:05:53,599 --> 01:05:57,140
to intercept the call and do something

1498
01:05:55,400 --> 01:06:00,440
first before it dispatches to the driver

1499
01:05:57,139 --> 01:06:03,348
right but that's all this is so all

1500
01:06:00,440 --> 01:06:06,139
OpenGL 32 Lib does is it gives you the

1501
01:06:03,349 --> 01:06:08,930
bind points that call into the operating

1502
01:06:06,139 --> 01:06:13,639
system services you need to either jump

1503
01:06:08,929 --> 01:06:15,710
directly to the the driver if it wants

1504
01:06:13,639 --> 01:06:17,328
to do that or if it wants to go through

1505
01:06:15,710 --> 01:06:19,220
Windows first first to Windows then to

1506
01:06:17,329 --> 01:06:21,500
the driver because Windows needs to like

1507
01:06:19,219 --> 01:06:22,848
do some checking or ring transition or

1508
01:06:21,500 --> 01:06:25,358
who knows what it wants to do whatever

1509
01:06:22,849 --> 01:06:25,359
wants to do

1510
01:06:36,119 --> 01:06:41,050
quit scuttle since we are using OpenGL

1511
01:06:38,530 --> 01:06:42,760
will you be modifying our 2.5 genius or

1512
01:06:41,050 --> 01:06:45,130
keeping code as is the code will be the

1513
01:06:42,760 --> 01:06:50,050
same it's just we'll have a hardware

1514
01:06:45,130 --> 01:06:53,140
path at some point as well question 4

1515
01:06:50,050 --> 01:06:55,630
choose pixel format were we not supposed

1516
01:06:53,139 --> 01:06:59,019
to specify eye pixel type and set it to

1517
01:06:55,630 --> 01:07:00,519
PFD type RGB a that could be we could

1518
01:06:59,019 --> 01:07:06,159
have missed that one let's let's double

1519
01:07:00,519 --> 01:07:08,110
check yours choose pixel format oh yeah

1520
01:07:06,159 --> 01:07:10,659
no you're totally right we probably just

1521
01:07:08,110 --> 01:07:14,590
lucked out there because that may be

1522
01:07:10,659 --> 01:07:16,509
that might actually just be 0 or it

1523
01:07:14,590 --> 01:07:23,980
might be that it just defaults to that

1524
01:07:16,510 --> 01:07:25,900
if you don't let's see yep we just

1525
01:07:23,980 --> 01:07:28,780
lucked out it happens to be 0

1526
01:07:25,900 --> 01:07:30,280
hmm well we could just keep relying on

1527
01:07:28,780 --> 01:07:31,540
that but it seems like a little cleaner

1528
01:07:30,280 --> 01:07:38,440
to just put it in there so let's just

1529
01:07:31,539 --> 01:07:40,719
put it in there thanks for catching that

1530
01:07:38,440 --> 01:07:42,730
like I said it's actually I guess

1531
01:07:40,719 --> 01:07:44,679
technically correct just not to do that

1532
01:07:42,730 --> 01:07:46,539
because 0 is the one we want so this

1533
01:07:44,679 --> 01:07:49,149
clear will always get us the thing but

1534
01:07:46,539 --> 01:07:52,150
it's just it's a little nicer just to

1535
01:07:49,150 --> 01:07:55,108
show that we actually were obeying it

1536
01:07:52,150 --> 01:07:55,108
the spec properly

1537
01:08:14,880 --> 01:08:18,940
Angus holder so by linking against open

1538
01:08:17,470 --> 01:08:22,680
jail to reach out Lib we don't need to

1539
01:08:18,939 --> 01:08:26,529
use get proc address at all with OpenGL

1540
01:08:22,680 --> 01:08:29,560
no unfortunately that is not true and

1541
01:08:26,529 --> 01:08:35,048
the reason like I sort of alluded to at

1542
01:08:29,560 --> 01:08:37,650
the beginning is that the version of

1543
01:08:35,048 --> 01:08:41,319
OpenGL that was built into Windows

1544
01:08:37,649 --> 01:08:44,409
directly in the old days was too old and

1545
01:08:41,319 --> 01:08:48,430
so if we were only gonna use OpenGL one

1546
01:08:44,409 --> 01:08:50,349
point X then yes we would never have to

1547
01:08:48,430 --> 01:08:52,150
call get proc address because just like

1548
01:08:50,350 --> 01:08:55,798
user 32 just like we didn't have to call

1549
01:08:52,149 --> 01:08:58,539
get proc address for create window right

1550
01:08:55,798 --> 01:09:00,579
and I mean I'll just we covered all this

1551
01:08:58,539 --> 01:09:04,298
before ball just say it one more time so

1552
01:09:00,579 --> 01:09:07,088
in your code right when you when you are

1553
01:09:04,298 --> 01:09:10,119
talking about hmm

1554
01:09:07,088 --> 01:09:11,318
what's gonna happen in the code you've

1555
01:09:10,119 --> 01:09:13,298
got two different types of things that

1556
01:09:11,319 --> 01:09:17,220
might happen there's like I'm gonna call

1557
01:09:13,298 --> 01:09:24,519
you know my well I'm gonna call my

1558
01:09:17,220 --> 01:09:31,000
function right or that I'm gonna call

1559
01:09:24,520 --> 01:09:33,310
you know create window okay this one is

1560
01:09:31,000 --> 01:09:36,069
in the operating system this one is I

1561
01:09:33,310 --> 01:09:38,440
defined it in myself when I link my

1562
01:09:36,069 --> 01:09:41,140
program it produced executable this goes

1563
01:09:38,439 --> 01:09:43,899
away this that this is gone right

1564
01:09:41,140 --> 01:09:46,210
there's never even remembrance unless I

1565
01:09:43,899 --> 01:09:47,710
save like debug information there's

1566
01:09:46,210 --> 01:09:49,750
never even a remembrance that there was

1567
01:09:47,710 --> 01:09:51,760
something called my function all that

1568
01:09:49,750 --> 01:09:55,000
happens is it directly puts into the

1569
01:09:51,760 --> 01:09:57,579
compiled executable a call to the

1570
01:09:55,000 --> 01:09:59,319
relative address that this function was

1571
01:09:57,579 --> 01:10:01,180
compiled act like we're in the code it

1572
01:09:59,319 --> 01:10:06,159
was so my function goes away and it

1573
01:10:01,180 --> 01:10:08,440
becomes call something right but that is

1574
01:10:06,159 --> 01:10:10,180
not what happens with create window what

1575
01:10:08,439 --> 01:10:11,619
happens with great window and there's

1576
01:10:10,180 --> 01:10:13,240
two different ways that this can

1577
01:10:11,619 --> 01:10:16,269
actually work depending on how you set

1578
01:10:13,239 --> 01:10:17,439
up the linker made money even be bored

1579
01:10:16,270 --> 01:10:19,330
in two ways but there's at least two

1580
01:10:17,439 --> 01:10:22,569
ways what happens the create window is

1581
01:10:19,329 --> 01:10:26,199
slightly different yes it does change

1582
01:10:22,569 --> 01:10:28,599
into a call with a address here

1583
01:10:26,199 --> 01:10:31,689
but that call to an address actually

1584
01:10:28,600 --> 01:10:37,090
goes to a location with nothing in it

1585
01:10:31,689 --> 01:10:40,029
it's like empty and this location is

1586
01:10:37,090 --> 01:10:43,930
stored in a table it's it's stored in

1587
01:10:40,029 --> 01:10:44,889
like a relocation table or I guess we

1588
01:10:43,930 --> 01:10:46,270
call it let's let's call a dynamic

1589
01:10:44,890 --> 01:10:51,280
linked table that's probably the best

1590
01:10:46,270 --> 01:10:53,440
word for it there's a dynamic linked

1591
01:10:51,279 --> 01:10:56,859
table and this is part of your

1592
01:10:53,439 --> 01:11:00,339
executable right that says at this

1593
01:10:56,859 --> 01:11:04,599
location I was trying to call create

1594
01:11:00,340 --> 01:11:07,510
window and everywhere you call create

1595
01:11:04,600 --> 01:11:13,090
window right it all gets replaced with

1596
01:11:07,510 --> 01:11:15,460
calls to that one location and then what

1597
01:11:13,090 --> 01:11:18,640
happens is that an amp level goes and

1598
01:11:15,460 --> 01:11:21,760
romps over that location with the actual

1599
01:11:18,640 --> 01:11:24,610
address of where the operating systems

1600
01:11:21,760 --> 01:11:28,150
create window call is mapped in your

1601
01:11:24,609 --> 01:11:31,539
process space which it does when you

1602
01:11:28,149 --> 01:11:34,929
load so when you load it grabs all this

1603
01:11:31,539 --> 01:11:36,760
stuff right not this because this it

1604
01:11:34,930 --> 01:11:38,740
doesn't care about anymore it loads that

1605
01:11:36,760 --> 01:11:40,239
you know it obviously loads this the

1606
01:11:38,739 --> 01:11:42,010
executable it knows where the dynamic

1607
01:11:40,239 --> 01:11:43,840
link table is and it loads it but it

1608
01:11:42,010 --> 01:11:46,510
doesn't care about that so much it loads

1609
01:11:43,840 --> 01:11:49,090
this stuff right into memory so here's

1610
01:11:46,510 --> 01:11:51,039
my whole executable here is like that

1611
01:11:49,090 --> 01:11:52,810
place that here's here's this location

1612
01:11:51,039 --> 01:11:54,880
and executable it loads us into memory

1613
01:11:52,810 --> 01:11:56,230
it has a dynamic link table but it

1614
01:11:54,880 --> 01:11:58,480
doesn't have to store it it just has to

1615
01:11:56,229 --> 01:12:00,729
apply it once so it knows about this but

1616
01:11:58,479 --> 01:12:02,589
it hasn't cared about it yet it then

1617
01:12:00,729 --> 01:12:04,779
goes ahead and maps other things up in

1618
01:12:02,590 --> 01:12:06,670
here right it maps like create window

1619
01:12:04,779 --> 01:12:09,429
the actual code for create window gets

1620
01:12:06,670 --> 01:12:10,899
mapped into your process space it then

1621
01:12:09,430 --> 01:12:13,240
reads through your dynamic link table

1622
01:12:10,899 --> 01:12:15,460
and goes ok where were these oh right

1623
01:12:13,239 --> 01:12:17,769
here was a call to create window update

1624
01:12:15,460 --> 01:12:20,439
that call to call into here so it romps

1625
01:12:17,770 --> 01:12:24,010
over the code that the nothing but like

1626
01:12:20,439 --> 01:12:26,710
no ops that were there before and it

1627
01:12:24,010 --> 01:12:29,130
puts them out to create window that's

1628
01:12:26,710 --> 01:12:29,130
how that works

1629
01:12:29,429 --> 01:12:32,760
and I don't know the specifics I haven't

1630
01:12:31,319 --> 01:12:34,948
looked at it in a long time it might be

1631
01:12:32,760 --> 01:12:36,659
that they're smart and they store like

1632
01:12:34,948 --> 01:12:39,119
the dynamic link tables actually sort of

1633
01:12:36,658 --> 01:12:40,559
built into this so that it stores it I

1634
01:12:39,119 --> 01:12:45,689
know you can do a thing called delay

1635
01:12:40,560 --> 01:12:48,210
load which will also put the code into

1636
01:12:45,689 --> 01:12:49,799
here that actually loads the library

1637
01:12:48,210 --> 01:12:51,510
that it needs so that you don't load

1638
01:12:49,800 --> 01:12:53,190
libraries that you haven't called yet

1639
01:12:51,510 --> 01:12:56,730
there's a whole bunch of stuff like that

1640
01:12:53,189 --> 01:12:58,948
too so this is a you know this is an

1641
01:12:56,729 --> 01:13:00,599
approximation of what happens it's not

1642
01:12:58,948 --> 01:13:02,488
exactly what happens and I'd have to go

1643
01:13:00,600 --> 01:13:03,810
reread the specifics to remember for

1644
01:13:02,488 --> 01:13:06,479
this particular operating system for

1645
01:13:03,810 --> 01:13:07,050
Windows how that works but that's what

1646
01:13:06,479 --> 01:13:12,149
happens

1647
01:13:07,050 --> 01:13:15,960
so get proc address is just us doing

1648
01:13:12,149 --> 01:13:18,149
that manually and the reason that we do

1649
01:13:15,960 --> 01:13:19,319
this manually well there's some other

1650
01:13:18,149 --> 01:13:20,819
reasons we might do it manually but the

1651
01:13:19,319 --> 01:13:23,609
main reason we've done on Hamid here is

1652
01:13:20,819 --> 01:13:25,799
because we don't know that that this

1653
01:13:23,609 --> 01:13:27,869
thing might exist so for create window

1654
01:13:25,800 --> 01:13:28,920
we can always let the dynamic link table

1655
01:13:27,869 --> 01:13:30,840
handle it because create winners always

1656
01:13:28,920 --> 01:13:31,800
there you can't possibly run on a

1657
01:13:30,840 --> 01:13:34,319
Windows machine doesn't have great

1658
01:13:31,800 --> 01:13:35,550
window you could very easily run on a

1659
01:13:34,319 --> 01:13:38,819
Windows machine that doesn't have X

1660
01:13:35,550 --> 01:13:40,469
input so I choose to call get proc

1661
01:13:38,819 --> 01:13:42,269
address for X input because if it's not

1662
01:13:40,469 --> 01:13:43,679
there I don't want to fail it's just

1663
01:13:42,270 --> 01:13:46,020
gamepad support you can play with the

1664
01:13:43,679 --> 01:13:47,730
keyboard so I don't want my app to not

1665
01:13:46,020 --> 01:13:49,440
run just because X input isn't there I

1666
01:13:47,729 --> 01:13:51,539
know that's the trend nowadays is to

1667
01:13:49,439 --> 01:13:52,979
just ship a giant redistributable and

1668
01:13:51,539 --> 01:13:56,279
the game doesn't run on half machines

1669
01:13:52,979 --> 01:13:58,259
and who cares and run em SVC readest and

1670
01:13:56,279 --> 01:13:59,340
on stuff I don't want use that to do

1671
01:13:58,260 --> 01:14:02,400
that I want you to be able just run the

1672
01:13:59,340 --> 01:14:03,960
extrude 1 it works and so what I try to

1673
01:14:02,399 --> 01:14:05,429
do is anything that I think might not be

1674
01:14:03,960 --> 01:14:07,890
there that's when we call get proc

1675
01:14:05,429 --> 01:14:09,449
address now for OpenGL if we only wanted

1676
01:14:07,890 --> 01:14:10,949
to use one point X we wouldn't have to

1677
01:14:09,448 --> 01:14:15,079
use get proc address because everything

1678
01:14:10,948 --> 01:14:17,879
is just in there but if we want to call

1679
01:14:15,079 --> 01:14:21,059
the functions that were added after open

1680
01:14:17,880 --> 01:14:22,560
jail so to point OpenGL 2.0 and up which

1681
01:14:21,060 --> 01:14:24,780
is most of the stuff that's in OpenGL

1682
01:14:22,560 --> 01:14:26,550
nowadays we do have to call get proc

1683
01:14:24,779 --> 01:14:28,769
address HS you don't call get proc

1684
01:14:26,550 --> 01:14:33,260
address you called the OpenGL equivalent

1685
01:14:28,770 --> 01:14:38,070
which is wiggle get proc address and

1686
01:14:33,260 --> 01:14:40,770
that is the mechanism by which you you

1687
01:14:38,069 --> 01:14:41,609
query extensions to the windows binding

1688
01:14:40,770 --> 01:14:43,410
part

1689
01:14:41,609 --> 01:14:46,170
and then I believe there's also GL get

1690
01:14:43,409 --> 01:14:49,199
proc address which is how you query

1691
01:14:46,170 --> 01:14:53,510
platform nonspecific extensions and

1692
01:14:49,199 --> 01:14:53,510
these two we probably will have to use

1693
01:14:56,180 --> 01:15:00,000
one two one three

1694
01:14:57,899 --> 01:15:01,109
l AC since you are complaining about

1695
01:15:00,000 --> 01:15:03,239
Windows pretty often why don't use

1696
01:15:01,109 --> 01:15:05,399
another operating system I don't know

1697
01:15:03,239 --> 01:15:14,989
how many times gonna have to do this I

1698
01:15:05,399 --> 01:15:21,809
guess it never gets old let's see here

1699
01:15:14,989 --> 01:15:27,149
hmm the reason is that if you are a game

1700
01:15:21,810 --> 01:15:32,150
programmer you have to use Windows 95

1701
01:15:27,149 --> 01:15:34,170
percent of all the games are on Windows

1702
01:15:32,149 --> 01:15:35,059
and there's really nothing you're gonna

1703
01:15:34,170 --> 01:15:38,460
be able do about it

1704
01:15:35,060 --> 01:15:41,760
so until these numbers get up to like 70

1705
01:15:38,460 --> 01:15:50,340
or something combined you're gonna be on

1706
01:15:41,760 --> 01:15:52,079
Windows mr. slick 10:15 do you think the

1707
01:15:50,340 --> 01:15:55,170
OS export you will need a wrapper

1708
01:15:52,079 --> 01:15:57,720
written in objective-c to get use OpenGL

1709
01:15:55,170 --> 01:16:00,500
and make a window yeah I I don't think

1710
01:15:57,720 --> 01:16:03,300
it even has anything to do with OpenGL I

1711
01:16:00,500 --> 01:16:05,010
think nowadays if you want to properly

1712
01:16:03,300 --> 01:16:08,430
behaved app I think you have to write

1713
01:16:05,010 --> 01:16:10,590
the the startup in Objective C I think

1714
01:16:08,430 --> 01:16:11,970
but I don't do a lot of Mac programming

1715
01:16:10,590 --> 01:16:14,779
so it's been a long time since I've I

1716
01:16:11,970 --> 01:16:14,780
programmed on a Mac

1717
01:16:20,158 --> 01:16:24,069
Guerry Johansson this is probably done

1718
01:16:22,599 --> 01:16:26,020
but what about offloading much of the

1719
01:16:24,069 --> 01:16:28,929
computing we are doing onto the GPU

1720
01:16:26,020 --> 01:16:34,329
using OpenCL then not use OpenGL and

1721
01:16:28,929 --> 01:16:35,529
keep things mostly as is I'm not sure

1722
01:16:34,328 --> 01:16:37,769
exactly what you're proposing are you

1723
01:16:35,529 --> 01:16:41,889
saying running our software renderer

1724
01:16:37,770 --> 01:16:43,570
through OpenCL the reason is because

1725
01:16:41,889 --> 01:16:47,500
that really just won't work

1726
01:16:43,569 --> 01:16:50,948
you can't Oh GPUs run general-purpose

1727
01:16:47,500 --> 01:16:52,479
code much much slower than CPUs do so

1728
01:16:50,948 --> 01:16:53,529
you have to you can't just like give

1729
01:16:52,479 --> 01:16:55,328
something to open steal expects to go

1730
01:16:53,529 --> 01:16:57,939
any faster you have to have organized

1731
01:16:55,328 --> 01:16:59,948
the code so that it takes it basically

1732
01:16:57,939 --> 01:17:02,460
takes warping seriously it's got to be

1733
01:16:59,948 --> 01:17:05,888
based on doing 32 wide operations and

1734
01:17:02,460 --> 01:17:07,868
very and severely parallelizable and

1735
01:17:05,889 --> 01:17:09,099
stuff we could do that I mean we could

1736
01:17:07,868 --> 01:17:10,328
do the work because we've already got

1737
01:17:09,099 --> 01:17:11,889
our things broken up into a tiled

1738
01:17:10,328 --> 01:17:15,719
rendering kind of a thing so we could do

1739
01:17:11,889 --> 01:17:17,828
some of that but that's not a good idea

1740
01:17:15,719 --> 01:17:18,309
because we just be making a bunch of

1741
01:17:17,828 --> 01:17:20,908
work for ourselves

1742
01:17:18,309 --> 01:17:23,320
that same amount of work we could just

1743
01:17:20,908 --> 01:17:26,589
call up and jail to do the rendering as

1744
01:17:23,319 --> 01:17:28,149
a separate pipe which is what you know

1745
01:17:26,590 --> 01:17:31,889
makes more sense for us certainly to

1746
01:17:28,149 --> 01:17:31,888
actually use OpenGL rendering services

1747
01:17:36,238 --> 01:17:39,519
cubic y over the break I wrote a program

1748
01:17:38,319 --> 01:17:40,630
that generates opengl function point

1749
01:17:39,520 --> 01:17:42,250
decorations an initialization by

1750
01:17:40,630 --> 01:17:43,569
scanning CPP H files to determine what

1751
01:17:42,250 --> 01:17:45,309
needs to be added do you plan on doing

1752
01:17:43,569 --> 01:17:46,929
something similar for HMH or you keep it

1753
01:17:45,309 --> 01:17:49,510
simple we'll be keeping it simple on a

1754
01:17:46,929 --> 01:17:54,399
handmade Hiro certainly but that is the

1755
01:17:49,510 --> 01:17:56,469
sort of thing that I do normally yes how

1756
01:17:54,399 --> 01:17:59,049
bad is an if statement is shader depends

1757
01:17:56,469 --> 01:18:01,170
on whether all pixels take the branch or

1758
01:17:59,050 --> 01:18:01,170
not

1759
01:18:04,010 --> 01:18:13,619
and obviously on the graphics card

1760
01:18:05,939 --> 01:18:14,669
that's that's gross that's a good story

1761
01:18:13,619 --> 01:18:17,279
to eat have you ever programmed for a

1762
01:18:14,670 --> 01:18:19,109
console yes but they were older consoles

1763
01:18:17,279 --> 01:18:23,759
well I guess I plug him for the

1764
01:18:19,109 --> 01:18:25,649
PlayStation 4 for a week this past this

1765
01:18:23,760 --> 01:18:28,860
past November

1766
01:18:25,649 --> 01:18:30,349
but like the time that I was doing more

1767
01:18:28,859 --> 01:18:37,409
crops boring was like the Xbox

1768
01:18:30,350 --> 01:18:39,590
Playstation 2 days and the Gamecube as

1769
01:18:37,409 --> 01:18:39,590
well

1770
01:18:42,449 --> 01:18:47,579
Linux has Windows Vista beat I think

1771
01:18:45,220 --> 01:18:52,449
you're right

1772
01:18:47,579 --> 01:18:57,809
so fifth point 15% Windows Vista 64 32

1773
01:18:52,449 --> 01:19:00,609
so 0.4 or 5% is Windows Vista nope

1774
01:18:57,810 --> 01:19:01,150
Linux can't quite do it you can't quite

1775
01:19:00,609 --> 01:19:06,099
do it

1776
01:19:01,149 --> 01:19:07,899
no single skew of Windows of Linux I

1777
01:19:06,100 --> 01:19:09,880
guess can quite beat it

1778
01:19:07,899 --> 01:19:15,369
wait but what's going on that doesn't

1779
01:19:09,880 --> 01:19:16,510
add up to the same number I don't know

1780
01:19:15,369 --> 01:19:19,689
what I'm I don't even know what this is

1781
01:19:16,510 --> 01:19:22,090
saying I guess there's a bunch that

1782
01:19:19,689 --> 01:19:24,489
aren't in here but yeah if you count all

1783
01:19:22,090 --> 01:19:34,529
links is it does beat out Vista so

1784
01:19:24,489 --> 01:19:34,529
that's good you are correct let's see

1785
01:19:41,399 --> 01:19:44,479
let's see

1786
01:19:49,500 --> 01:20:02,350
alright well that's about it for

1787
01:19:55,109 --> 01:20:06,729
handmade hero for this evening so I'm

1788
01:20:02,350 --> 01:20:08,620
gonna go ahead and wind it down alright

1789
01:20:06,729 --> 01:20:10,119
everyone thank you for joining me for

1790
01:20:08,619 --> 01:20:12,670
another episode of handmade hariya

1791
01:20:10,119 --> 01:20:15,399
there's been a pleasure coding with you

1792
01:20:12,670 --> 01:20:18,460
as always now we've got open jail

1793
01:20:15,399 --> 01:20:20,139
running who knows what will happen next

1794
01:20:18,460 --> 01:20:23,289
that was smoother I think that I

1795
01:20:20,140 --> 01:20:26,020
probably expected it but sometimes you

1796
01:20:23,289 --> 01:20:28,750
get lucky if you would like to follow

1797
01:20:26,020 --> 01:20:30,400
along with our OpenGL exploits you can

1798
01:20:28,750 --> 01:20:32,198
always pure to the game on handmade hero

1799
01:20:30,399 --> 01:20:34,750
org and it comes to the source code so

1800
01:20:32,198 --> 01:20:36,219
you can follow along we also have a

1801
01:20:34,750 --> 01:20:38,829
forum site you can go to ask questions

1802
01:20:36,219 --> 01:20:41,619
we have a patreon page where you can go

1803
01:20:38,829 --> 01:20:43,840
to support the video series and a tweet

1804
01:20:41,619 --> 01:20:45,158
bot where you can find out when we're

1805
01:20:43,840 --> 01:20:46,840
gonna be live and the next time we're

1806
01:20:45,158 --> 01:20:49,689
gonna be live it's 5:00 p.m. Pacific

1807
01:20:46,840 --> 01:20:52,840
Standard Time tomorrow when we are gonna

1808
01:20:49,689 --> 01:20:54,908
go ahead and I guess display our frames

1809
01:20:52,840 --> 01:20:57,969
through up in jail and then we can have

1810
01:20:54,908 --> 01:20:59,889
vsync which I wanted before we do that

1811
01:20:57,969 --> 01:21:00,969
I'm gonna have to remember so that you

1812
01:20:59,890 --> 01:21:02,260
don't take the roof road I'm gonna have

1813
01:21:00,969 --> 01:21:04,510
to remember to start going through a

1814
01:21:02,260 --> 01:21:06,789
video capture card so I got to find out

1815
01:21:04,510 --> 01:21:08,860
where the video capture card even is so

1816
01:21:06,789 --> 01:21:11,019
I'm gonna go do that I hope the rest of

1817
01:21:08,859 --> 01:21:14,769
you have a pleasant evening I'll see you

1818
01:21:11,020 --> 01:21:15,820
back here tomorrow till then have fun

1819
01:21:14,770 --> 01:21:18,960
programming I'll see you guys on the

1820
01:21:15,819 --> 01:21:18,960
Internet techies everyone

