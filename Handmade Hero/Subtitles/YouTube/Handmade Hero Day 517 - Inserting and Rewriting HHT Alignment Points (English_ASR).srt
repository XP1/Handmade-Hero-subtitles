1
00:00:01,790 --> 00:00:06,059
hello everyone and welcome to handmade

2
00:00:03,870 --> 00:00:08,879
Hero show recode a complete game live on

3
00:00:06,059 --> 00:00:12,239
stream i think we basically finished

4
00:00:08,880 --> 00:00:16,379
everything last time and we actually

5
00:00:12,240 --> 00:00:18,448
correctly had our program translating an

6
00:00:16,379 --> 00:00:21,060
input text file into an output text file

7
00:00:18,449 --> 00:00:25,019
while doing the import such that we can

8
00:00:21,059 --> 00:00:29,428
now add things as we wish which I do

9
00:00:25,018 --> 00:00:31,259
wish I would like to add edits from the

10
00:00:29,428 --> 00:00:34,939
in-game editor which allows us to edit

11
00:00:31,260 --> 00:00:37,770
alignment points I'd like to have that

12
00:00:34,939 --> 00:00:41,429
come out in the text file when it gets

13
00:00:37,770 --> 00:00:44,190
translated and so that's really all I

14
00:00:41,429 --> 00:00:46,469
want to do today I want to get that

15
00:00:44,189 --> 00:00:48,558
working and then we can move on to

16
00:00:46,469 --> 00:00:51,960
something else I was thinking of maybe

17
00:00:48,558 --> 00:00:58,078
we could augment the text file to have

18
00:00:51,960 --> 00:01:00,620
thoughts and fonts and and sounds

19
00:00:58,079 --> 00:01:04,588
because those are the two things that we

20
00:01:00,619 --> 00:01:11,219
don't have a text-based import format

21
00:01:04,588 --> 00:01:18,049
for at the moment seems like a good idea

22
00:01:11,219 --> 00:01:24,269
I don't know anyway let's take a look so

23
00:01:18,049 --> 00:01:27,810
if I remember correctly we are the

24
00:01:24,269 --> 00:01:31,349
champions because if you look in here

25
00:01:27,810 --> 00:01:33,540
now base came about HHA an inch our

26
00:01:31,349 --> 00:01:35,250
cutscene that HHA are fully rebuildable

27
00:01:33,540 --> 00:01:39,390
files that you can now rebuild from

28
00:01:35,250 --> 00:01:42,299
nothing but this magical sources

29
00:01:39,390 --> 00:01:45,390
directory and which is filled with PM

30
00:01:42,299 --> 00:01:47,070
g's and tags files which say how

31
00:01:45,390 --> 00:01:49,680
everything should get packed and that's

32
00:01:47,069 --> 00:01:51,059
it that's pretty cool because it means

33
00:01:49,680 --> 00:01:54,810
we could do a full game rebuild at any

34
00:01:51,060 --> 00:01:56,759
time we want and it will still have

35
00:01:54,810 --> 00:01:58,170
everything in it correctly including all

36
00:01:56,759 --> 00:02:01,349
of our markup like tags and stuff like

37
00:01:58,170 --> 00:02:03,478
that and alignment points so that's

38
00:02:01,349 --> 00:02:05,938
pretty cool and it turns out that this

39
00:02:03,478 --> 00:02:09,330
just kind of worked if you go back into

40
00:02:05,938 --> 00:02:09,929
the game and run it it runs exactly like

41
00:02:09,330 --> 00:02:11,550
it used to

42
00:02:09,929 --> 00:02:14,020
now of course it's running in debug mode

43
00:02:11,550 --> 00:02:16,090
so it's a little bit slow

44
00:02:14,020 --> 00:02:17,830
which is less good and also you can kind

45
00:02:16,090 --> 00:02:19,300
of see that well the head isn't there

46
00:02:17,830 --> 00:02:20,650
right now why isn't the head there well

47
00:02:19,300 --> 00:02:22,570
the head isn't there because we don't

48
00:02:20,650 --> 00:02:25,680
have any alignment points to find so

49
00:02:22,569 --> 00:02:25,680
heads can't snap to bodies

50
00:02:27,780 --> 00:02:33,039
cuz there ain't nowhere to snap to and

51
00:02:31,090 --> 00:02:35,110
we have an in-game editor so if I want

52
00:02:33,039 --> 00:02:37,870
to open up the in-game editor I can

53
00:02:35,110 --> 00:02:41,110
click on something like this body here

54
00:02:37,870 --> 00:02:42,610
and I can actually switch to something

55
00:02:41,110 --> 00:02:43,990
where I can edit it right and we're in

56
00:02:42,610 --> 00:02:45,580
debug mode right now so the frame rates

57
00:02:43,990 --> 00:02:46,659
terrible but you know it doesn't really

58
00:02:45,580 --> 00:02:49,750
matter I'm just kind of showing you what

59
00:02:46,659 --> 00:02:53,919
I'm talking about so I can do stuff like

60
00:02:49,750 --> 00:02:55,810
define the point where the head should

61
00:02:53,919 --> 00:02:58,030
snap on like there and then hey the head

62
00:02:55,810 --> 00:02:59,650
suddenly does snap on right and I can

63
00:02:58,030 --> 00:03:01,060
even position that point exactly how I

64
00:02:59,650 --> 00:03:02,469
want to and I can switch over the head

65
00:03:01,060 --> 00:03:03,729
and all that stuff and I can set the

66
00:03:02,469 --> 00:03:04,959
alignment so it's not sunk into the

67
00:03:03,729 --> 00:03:07,060
floor I could do all those things the

68
00:03:04,959 --> 00:03:08,530
in-game editor but again what we were

69
00:03:07,060 --> 00:03:10,000
trying to figure out is well okay we

70
00:03:08,530 --> 00:03:11,289
need those things to persist in a way

71
00:03:10,000 --> 00:03:14,409
that when we rebuild the files they

72
00:03:11,289 --> 00:03:16,569
don't get lost so what we did is exactly

73
00:03:14,409 --> 00:03:19,930
what I just said we now have a way of

74
00:03:16,569 --> 00:03:21,400
making all that happen and we can run a

75
00:03:19,930 --> 00:03:24,610
full import and preserve the text file

76
00:03:21,400 --> 00:03:26,349
and so what we really need to do now is

77
00:03:24,610 --> 00:03:29,290
in that import where we're actually

78
00:03:26,349 --> 00:03:30,549
doing that whole situation I believe

79
00:03:29,289 --> 00:03:32,169
actually and I think I think it was

80
00:03:30,549 --> 00:03:35,799
called sync we changed it synchronize

81
00:03:32,169 --> 00:03:38,409
asset file changes right what we had is

82
00:03:35,799 --> 00:03:41,799
in here we would go through each of

83
00:03:38,409 --> 00:03:44,620
those hht files

84
00:03:41,799 --> 00:03:46,180
we'd reprocess all of them see if we

85
00:03:44,620 --> 00:03:48,849
needed to load any changes or anything

86
00:03:46,180 --> 00:03:52,420
like that like from pngs or whatever and

87
00:03:48,849 --> 00:03:55,000
then we can insert stuff as necessary

88
00:03:52,419 --> 00:03:56,469
into there right so you can kind of see

89
00:03:55,000 --> 00:03:59,049
that happening let me part put it over

90
00:03:56,469 --> 00:04:00,370
here so my head's not in the way so you

91
00:03:59,049 --> 00:04:03,159
could kind of see that happening here

92
00:04:00,370 --> 00:04:04,719
where we go through and where we're

93
00:04:03,159 --> 00:04:07,750
doing like parse top of a block for

94
00:04:04,719 --> 00:04:10,000
example you can see this copy all input

95
00:04:07,750 --> 00:04:13,269
up to and including was what we were

96
00:04:10,000 --> 00:04:15,060
using to sort of move things from the

97
00:04:13,269 --> 00:04:17,590
source file to the destination file

98
00:04:15,060 --> 00:04:19,509
while we were parsing that text file and

99
00:04:17,589 --> 00:04:21,459
that allows us to insert things back

100
00:04:19,509 --> 00:04:23,019
into the text file while preserving the

101
00:04:21,459 --> 00:04:25,840
author of the text files original

102
00:04:23,019 --> 00:04:26,689
formatting and comments which is pretty

103
00:04:25,839 --> 00:04:29,479
cool so

104
00:04:26,689 --> 00:04:31,040
not destroying anything like we would if

105
00:04:29,480 --> 00:04:33,710
we just rewrote the file entirely

106
00:04:31,040 --> 00:04:35,960
ourselves right it's kind of cool we

107
00:04:33,709 --> 00:04:38,060
don't change the order of things we

108
00:04:35,959 --> 00:04:39,649
don't change the formatting we don't get

109
00:04:38,060 --> 00:04:42,589
rid of the comments we just copy it

110
00:04:39,649 --> 00:04:44,239
directly so if we look at what we

111
00:04:42,589 --> 00:04:48,319
actually need to do here you can see

112
00:04:44,240 --> 00:04:50,300
here is an alignment token parse and you

113
00:04:48,319 --> 00:04:53,060
can see what that does is that allows us

114
00:04:50,300 --> 00:04:55,370
to read in all of this information about

115
00:04:53,060 --> 00:04:56,720
alignment points now alignment points

116
00:04:55,370 --> 00:04:59,509
are the things that we're trying to edit

117
00:04:56,720 --> 00:05:01,130
we have the reader for them what we

118
00:04:59,509 --> 00:05:04,370
don't have right now is something that

119
00:05:01,129 --> 00:05:06,709
actually writes them back out again so

120
00:05:04,370 --> 00:05:10,670
what we would like to do is if we've

121
00:05:06,709 --> 00:05:14,979
added one we'd like to go in and rewrite

122
00:05:10,670 --> 00:05:14,980
it so that's what we need to do now

123
00:05:19,899 --> 00:05:29,949
after I finished my oatmeal cookie um so

124
00:05:31,629 --> 00:05:40,519
here in is align points right you can

125
00:05:37,550 --> 00:05:43,069
see us gather it here and what you'll

126
00:05:40,519 --> 00:05:47,479
notice is that at the moment it's not

127
00:05:43,069 --> 00:05:49,069
even used right so literally we read all

128
00:05:47,480 --> 00:05:51,020
these aligned points and we wouldn't

129
00:05:49,069 --> 00:05:55,579
have even used them if they were there

130
00:05:51,019 --> 00:05:58,759
and we don't write out ones that were in

131
00:05:55,579 --> 00:06:04,089
our current alignment set and just that

132
00:05:58,759 --> 00:06:04,089
we don't you know that we didn't see

133
00:06:06,310 --> 00:06:11,589
okay

134
00:06:08,490 --> 00:06:15,009
so the question is what do we do about

135
00:06:11,589 --> 00:06:18,310
this well I think the first thing we

136
00:06:15,009 --> 00:06:22,439
probably want to do is say if we've got

137
00:06:18,310 --> 00:06:25,418
this whole alignment point thing right

138
00:06:22,439 --> 00:06:28,960
what we should probably do is let's

139
00:06:25,418 --> 00:06:32,288
extract all of the alignment points we

140
00:06:28,959 --> 00:06:37,839
currently have and put them into this

141
00:06:32,288 --> 00:06:40,120
HHA align point set right because if we

142
00:06:37,839 --> 00:06:43,810
have the whole set of alignment points

143
00:06:40,120 --> 00:06:47,110
that we currently think are there then

144
00:06:43,810 --> 00:06:50,439
we could go through and as we read in

145
00:06:47,110 --> 00:06:53,288
new ones look to see whether they're the

146
00:06:50,439 --> 00:06:55,419
same or different as the ones that

147
00:06:53,288 --> 00:06:57,848
appear in the file if they're different

148
00:06:55,418 --> 00:07:02,049
we will strike the one in the file and

149
00:06:57,848 --> 00:07:04,389
put the new one in or strike the old one

150
00:07:02,050 --> 00:07:06,249
and read the new one out depending on

151
00:07:04,389 --> 00:07:09,400
whether we're doing an import or an

152
00:07:06,249 --> 00:07:11,499
export right so we can have a flag that

153
00:07:09,399 --> 00:07:12,968
tells us what are we trying to do here

154
00:07:11,499 --> 00:07:15,719
we're trying to like overwrite the

155
00:07:12,968 --> 00:07:18,519
existing file or are we trying to

156
00:07:15,718 --> 00:07:22,209
overwrite what we've got in memory using

157
00:07:18,519 --> 00:07:24,310
what's in the existing file right so we

158
00:07:22,209 --> 00:07:26,138
have two things you can do there and we

159
00:07:24,310 --> 00:07:28,240
want to implement those and then the

160
00:07:26,139 --> 00:07:31,120
other thing we want to do is as we see

161
00:07:28,240 --> 00:07:33,668
each individual one when we make that

162
00:07:31,120 --> 00:07:34,990
decision about like okay we've seen the

163
00:07:33,668 --> 00:07:37,299
line point in the file either we

164
00:07:34,990 --> 00:07:39,490
replaced it with our own version or we

165
00:07:37,300 --> 00:07:42,550
read it in and used it in place of the

166
00:07:39,490 --> 00:07:45,038
one we used to have when we do that

167
00:07:42,550 --> 00:07:48,038
operation we also want to just record

168
00:07:45,038 --> 00:07:51,639
briefly have we process this alignment

169
00:07:48,038 --> 00:07:54,728
point yet that way when we go through at

170
00:07:51,639 --> 00:07:58,060
the end and look and say all right we're

171
00:07:54,728 --> 00:08:00,908
gonna go look to see for each alignment

172
00:07:58,060 --> 00:08:03,848
point did we ever see this alignment

173
00:08:00,908 --> 00:08:06,699
point in the file if we're writing out

174
00:08:03,848 --> 00:08:10,748
our alignment points then what we want

175
00:08:06,699 --> 00:08:12,460
to do is take any of those that didn't

176
00:08:10,749 --> 00:08:15,490
exist in the file and add them into the

177
00:08:12,459 --> 00:08:17,948
file if we're reading in alignment

178
00:08:15,490 --> 00:08:19,269
points what we want to do is take any of

179
00:08:17,949 --> 00:08:21,639
them aren't existing in the file and

180
00:08:19,269 --> 00:08:25,149
clear them so that they're not in our

181
00:08:21,639 --> 00:08:27,069
h aj s anymore right so we have this

182
00:08:25,149 --> 00:08:29,258
like two-way thing right we just want to

183
00:08:27,069 --> 00:08:32,019
synchronize these and we're gonna be

184
00:08:29,259 --> 00:08:34,149
told by the calling code which way to

185
00:08:32,019 --> 00:08:36,158
synchronize are we writing out to the

186
00:08:34,149 --> 00:08:39,190
file or is the file coming in to us and

187
00:08:36,158 --> 00:08:45,578
one of those two things will be true so

188
00:08:39,190 --> 00:08:48,399
we'll know how to merge the data merge

189
00:08:45,578 --> 00:08:51,159
is probably the wrong term update the

190
00:08:48,399 --> 00:08:54,039
data is probably the correct way to say

191
00:08:51,159 --> 00:08:57,189
it because obviously we have a situation

192
00:08:54,039 --> 00:08:59,919
where one or the other is going to be

193
00:08:57,190 --> 00:09:00,820
primal and we just need to know which

194
00:08:59,919 --> 00:09:03,370
one it is

195
00:09:00,820 --> 00:09:05,079
now this is the only thing that operates

196
00:09:03,370 --> 00:09:09,250
this way because at the moment we don't

197
00:09:05,078 --> 00:09:11,588
actually have any edits for anything

198
00:09:09,250 --> 00:09:14,049
else and we don't really need edits for

199
00:09:11,589 --> 00:09:16,209
anything else in the future I could see

200
00:09:14,049 --> 00:09:19,539
us maybe wanting to allow tags to be

201
00:09:16,208 --> 00:09:23,229
edited in the game so that you can tag

202
00:09:19,539 --> 00:09:26,319
things more directly that way maybe

203
00:09:23,230 --> 00:09:28,360
right it's just unclear that that's

204
00:09:26,320 --> 00:09:30,760
really all that useful to a certain

205
00:09:28,360 --> 00:09:32,560
extent because since we can just open up

206
00:09:30,759 --> 00:09:35,889
the text file and edit it in there I'm

207
00:09:32,559 --> 00:09:39,099
not sure what benefit it really has to

208
00:09:35,889 --> 00:09:40,360
putting it into an editor seems like

209
00:09:39,100 --> 00:09:42,040
kind of just a waste of time

210
00:09:40,360 --> 00:09:43,899
alignment points I don't think are a

211
00:09:42,039 --> 00:09:46,240
waste of time because they're a visual

212
00:09:43,899 --> 00:09:47,708
thing and so you want that instant

213
00:09:46,240 --> 00:09:50,169
feedback so you can just dial in the

214
00:09:47,708 --> 00:09:53,049
exact point you were trying to set so I

215
00:09:50,169 --> 00:09:56,289
feel like alignment points make obvious

216
00:09:53,049 --> 00:09:58,389
sense whereas I feel like anything else

217
00:09:56,289 --> 00:10:02,578
that you're adding editing for is really

218
00:09:58,389 --> 00:10:05,198
just gratuitous so why bother right

219
00:10:02,578 --> 00:10:08,078
that's my thinking on it at the moment

220
00:10:05,198 --> 00:10:10,599
it may change we'll see but that's

221
00:10:08,078 --> 00:10:13,149
really so all we're gonna be focusing on

222
00:10:10,600 --> 00:10:16,000
is that so if you take a look in here

223
00:10:13,149 --> 00:10:19,509
how this alignment point gets read I

224
00:10:16,000 --> 00:10:22,990
want to change this align point written

225
00:10:19,509 --> 00:10:25,269
part because that's maybe well I mean I

226
00:10:22,990 --> 00:10:25,990
don't know if it's really talked about

227
00:10:25,269 --> 00:10:28,419
the name

228
00:10:25,990 --> 00:10:31,480
I want this boolean I just don't know

229
00:10:28,419 --> 00:10:34,990
what I want to call it because written

230
00:10:31,480 --> 00:10:36,580
is a little bit of a different

231
00:10:34,990 --> 00:10:38,409
is probably not right I think what I'm

232
00:10:36,580 --> 00:10:40,720
trying to say is a line point processed

233
00:10:38,409 --> 00:10:42,159
right like is this have we gone through

234
00:10:40,720 --> 00:10:44,980
and done something with this alignment

235
00:10:42,159 --> 00:10:47,679
point yet whether that's reading or

236
00:10:44,980 --> 00:10:50,379
writing so that I think is just a better

237
00:10:47,679 --> 00:10:53,109
name for it but let's go back in here

238
00:10:50,379 --> 00:10:55,120
now so when we process one of these

239
00:10:53,110 --> 00:10:57,278
aligned points what we're gonna do is

240
00:10:55,120 --> 00:10:59,679
say all right here's all of the data

241
00:10:57,278 --> 00:11:01,299
that comes in for that align point you

242
00:10:59,679 --> 00:11:03,309
could see me grabbing it all there's the

243
00:11:01,299 --> 00:11:06,458
grid X&amp;Y there's the index there's a

244
00:11:03,309 --> 00:11:11,289
percentage size and type these sorts of

245
00:11:06,458 --> 00:11:13,119
things so when that read occurs what you

246
00:11:11,289 --> 00:11:14,799
can see here is we're going to issue an

247
00:11:13,120 --> 00:11:16,649
error if you tried to say an alignment

248
00:11:14,799 --> 00:11:19,479
point that we don't currently have

249
00:11:16,649 --> 00:11:21,789
otherwise we're going to process it and

250
00:11:19,480 --> 00:11:23,649
also if you don't if you you know have

251
00:11:21,789 --> 00:11:25,360
the two parents specified incorrectly or

252
00:11:23,649 --> 00:11:29,230
something will issue an error there as

253
00:11:25,360 --> 00:11:32,800
well assuming that we got to the end

254
00:11:29,230 --> 00:11:35,289
okay then we're gonna be actually

255
00:11:32,799 --> 00:11:37,870
writing out this alignment point into

256
00:11:35,289 --> 00:11:40,778
the array you can see me doing that here

257
00:11:37,870 --> 00:11:42,759
I get it at the grid you know grid X

258
00:11:40,778 --> 00:11:46,509
grid Y and then which point it was like

259
00:11:42,759 --> 00:11:48,490
this and you can see me setting the

260
00:11:46,509 --> 00:11:50,500
things there for it so we've got the P

261
00:11:48,490 --> 00:11:53,860
percent getting set the size the type

262
00:11:50,500 --> 00:11:56,379
right and so what I want to do here is

263
00:11:53,860 --> 00:11:59,259
also in addition to that I want to say

264
00:11:56,379 --> 00:12:02,409
that I processed this one so in here I

265
00:11:59,259 --> 00:12:04,509
want to say a line point processed and I

266
00:12:02,409 --> 00:12:07,449
want to say that this one was processed

267
00:12:04,509 --> 00:12:09,730
right it's a true so that it was

268
00:12:07,450 --> 00:12:11,500
processed now there's a couple of

269
00:12:09,730 --> 00:12:13,360
different ways that we could do this and

270
00:12:11,500 --> 00:12:16,958
I'm not sure how exactly we want to do

271
00:12:13,360 --> 00:12:18,459
this because there's a inverse way we

272
00:12:16,958 --> 00:12:22,989
could state it that might be a little

273
00:12:18,458 --> 00:12:24,819
bit more sensible and I'm kind of

274
00:12:22,990 --> 00:12:29,200
leaning towards it I think I might want

275
00:12:24,820 --> 00:12:32,920
something more like this so anytime we

276
00:12:29,200 --> 00:12:35,740
see a line point we say a line point

277
00:12:32,919 --> 00:12:39,338
unprocessed equals false rather than a

278
00:12:35,740 --> 00:12:42,360
line point process equals true and so we

279
00:12:39,339 --> 00:12:46,600
here we set unprocessed equal to false

280
00:12:42,360 --> 00:12:48,579
for everybody and then in here we would

281
00:12:46,600 --> 00:12:50,709
have right we're gonna have a four

282
00:12:48,578 --> 00:12:55,748
Loup that reads these alignment points

283
00:12:50,708 --> 00:12:57,729
in from their current setting so for

284
00:12:55,749 --> 00:13:10,089
example you know we'd have something

285
00:12:57,730 --> 00:13:13,749
like this so we've got an iteration

286
00:13:10,089 --> 00:13:17,459
through the grid and we're going to set

287
00:13:13,749 --> 00:13:22,808
a line point unprocessed equal to true

288
00:13:17,458 --> 00:13:34,118
for anybody who's actually got one of

289
00:13:22,808 --> 00:13:36,219
these alignment points currently so so

290
00:13:34,119 --> 00:13:40,689
we need something that looks like this

291
00:13:36,220 --> 00:13:42,459
right and there's going to be an if here

292
00:13:40,688 --> 00:13:46,118
that checks to see whether the thing

293
00:13:42,458 --> 00:13:50,528
exists currently in the bitmap itself

294
00:13:46,119 --> 00:13:52,839
right so this needs to do a lookup grab

295
00:13:50,528 --> 00:13:57,058
the information that we actually have

296
00:13:52,839 --> 00:14:00,850
about this particular this particular

297
00:13:57,058 --> 00:14:03,399
sausage gentleman right here right and

298
00:14:00,850 --> 00:14:07,869
what we'd like to do is then from that

299
00:14:03,399 --> 00:14:11,769
we would like to say whether or not it's

300
00:14:07,869 --> 00:14:15,399
got one this way we start out knowing

301
00:14:11,769 --> 00:14:18,369
what they all were this allows me in

302
00:14:15,399 --> 00:14:22,509
here to say okay when we go through I

303
00:14:18,369 --> 00:14:29,168
can set a line point unprocessed such

304
00:14:22,509 --> 00:14:32,949
that we can mark all the ones that we

305
00:14:29,168 --> 00:14:35,249
saw inside the text file and then at the

306
00:14:32,948 --> 00:14:39,118
end we can go back through these and see

307
00:14:35,249 --> 00:14:41,829
which ones we didn't process right so

308
00:14:39,119 --> 00:14:43,569
we've got one loop over them there and

309
00:14:41,828 --> 00:14:47,078
then we've got another loop over them

310
00:14:43,568 --> 00:14:50,588
here where after we're all done with

311
00:14:47,078 --> 00:14:52,539
everything we can put it all in there so

312
00:14:50,589 --> 00:14:55,360
you can see us having it we've got it

313
00:14:52,539 --> 00:14:57,548
right here where we do the where we see

314
00:14:55,360 --> 00:15:02,259
the closed brace before we copy

315
00:14:57,548 --> 00:15:04,209
everything out we can insert

316
00:15:02,259 --> 00:15:07,419
any ones that we didn't already see

317
00:15:04,210 --> 00:15:22,900
right so it's gonna look something you

318
00:15:07,419 --> 00:15:25,029
know like this if one of these things

319
00:15:22,899 --> 00:15:28,659
was unprocessed you know and should have

320
00:15:25,029 --> 00:15:30,850
been right then we can decide what

321
00:15:28,659 --> 00:15:34,240
exactly it is we're going to do with it

322
00:15:30,850 --> 00:15:39,759
if we were writing out this file then

323
00:15:34,240 --> 00:15:42,789
what we would do is we would replace the

324
00:15:39,759 --> 00:15:46,330
weed weed insert all of these ones that

325
00:15:42,789 --> 00:15:53,289
we're missing whereas if we were doing

326
00:15:46,330 --> 00:15:55,300
the opposite we would clear them and so

327
00:15:53,289 --> 00:15:58,329
that's really all I'm talking about

328
00:15:55,299 --> 00:16:00,459
right so we we set it up we say look

329
00:15:58,330 --> 00:16:03,670
let's remember all of the things that we

330
00:16:00,460 --> 00:16:06,430
actually saw weed that we already have

331
00:16:03,669 --> 00:16:08,769
let's track them as we see them in the

332
00:16:06,429 --> 00:16:12,819
text file and then the ends we will go

333
00:16:08,769 --> 00:16:16,029
ahead and rewrite the ones that we

334
00:16:12,820 --> 00:16:18,940
should change and or clear in the hht

335
00:16:16,029 --> 00:16:20,709
out in the HHA the ones that we didn't

336
00:16:18,940 --> 00:16:30,700
see depending on whether we're importing

337
00:16:20,710 --> 00:16:33,759
or exporting right hopefully that makes

338
00:16:30,700 --> 00:16:35,440
some sense so it's a little bit

339
00:16:33,759 --> 00:16:37,389
complicated to do that obviously we've

340
00:16:35,440 --> 00:16:39,250
it's just a bunch of bookkeeping if you

341
00:16:37,389 --> 00:16:41,740
look at what's going on here you can see

342
00:16:39,250 --> 00:16:43,779
that inside match we do a get or create

343
00:16:41,740 --> 00:16:47,320
asset source file and so this match

344
00:16:43,779 --> 00:16:50,319
right here that is really the thing that

345
00:16:47,320 --> 00:16:52,210
that asset source file there is really

346
00:16:50,320 --> 00:16:54,670
the thing that we're looking for so if

347
00:16:52,210 --> 00:16:56,950
we go to asset source file you can see

348
00:16:54,669 --> 00:17:00,159
and here we assert that we've actually

349
00:16:56,950 --> 00:17:02,320
got one and so in the case where it's is

350
00:17:00,159 --> 00:17:05,109
default we wouldn't but otherwise we

351
00:17:02,320 --> 00:17:07,180
always try to get one

352
00:17:05,109 --> 00:17:10,029
so basically we're only going to need to

353
00:17:07,180 --> 00:17:11,680
do this processing if we actually have

354
00:17:10,029 --> 00:17:12,849
somewhere to store it if we don't have

355
00:17:11,680 --> 00:17:13,960
anywhere to store it them this is all

356
00:17:12,849 --> 00:17:15,669
academic and we're going to be

357
00:17:13,960 --> 00:17:18,279
outputting errors anyway so you know

358
00:17:15,670 --> 00:17:20,019
to worry about it so inside here we're

359
00:17:18,279 --> 00:17:22,029
gonna say look did we get one of these

360
00:17:20,019 --> 00:17:23,859
files and if we did get one of these

361
00:17:22,029 --> 00:17:25,869
files then what we want to do is take a

362
00:17:23,859 --> 00:17:28,919
look at the asset indices involved and

363
00:17:25,869 --> 00:17:31,719
that will give us the asset in question

364
00:17:28,920 --> 00:17:33,640
so if we go ahead and look here we can

365
00:17:31,720 --> 00:17:36,130
say all right we know what the asset

366
00:17:33,640 --> 00:17:44,710
index is for any particular grid

367
00:17:36,130 --> 00:17:48,880
location right oh no wait a minute this

368
00:17:44,710 --> 00:17:55,890
says it's YX is that how we have been

369
00:17:48,880 --> 00:17:55,890
doing it oh yeah it is okay whew

370
00:17:56,039 --> 00:18:01,629
sorry my bad I got nervous there I

371
00:17:59,559 --> 00:18:03,220
thought that like I had commented it one

372
00:18:01,630 --> 00:18:06,370
way and did it the other way everywhere

373
00:18:03,220 --> 00:18:09,759
but no it's only just now that I was not

374
00:18:06,369 --> 00:18:11,769
obeying the convention um so we can go

375
00:18:09,759 --> 00:18:14,769
ahead and grab out any given one of

376
00:18:11,769 --> 00:18:17,799
these asset indices so here's that asset

377
00:18:14,769 --> 00:18:20,049
index we can check to make sure that the

378
00:18:17,799 --> 00:18:21,609
asset index exists if the asset in that

379
00:18:20,049 --> 00:18:22,930
doesn't exist then we don't have to do

380
00:18:21,609 --> 00:18:24,699
anything because there's nothing to load

381
00:18:22,930 --> 00:18:27,220
so just a cleared a completely empty

382
00:18:24,700 --> 00:18:28,900
version is actually what it should be

383
00:18:27,220 --> 00:18:32,049
and we're not going to mark it as

384
00:18:28,900 --> 00:18:33,790
something that's been used so in here

385
00:18:32,049 --> 00:18:35,710
after I look at the asset index if we

386
00:18:33,789 --> 00:18:39,519
actually have one then I want to do a

387
00:18:35,710 --> 00:18:41,470
actual access of that asset so I need to

388
00:18:39,519 --> 00:18:43,680
do like a get asset call and I need to

389
00:18:41,470 --> 00:18:46,180
say give me this particular asset please

390
00:18:43,680 --> 00:18:48,430
when I get back that asset I could

391
00:18:46,180 --> 00:18:51,190
double check again that it's there

392
00:18:48,430 --> 00:18:52,870
although really this is a I probably

393
00:18:51,190 --> 00:18:55,600
shouldn't check this is an assertion

394
00:18:52,869 --> 00:18:57,879
really if for some reason that value was

395
00:18:55,599 --> 00:18:59,019
wrong that's not like the kind of error

396
00:18:57,880 --> 00:19:01,390
that we're talking about where it's like

397
00:18:59,019 --> 00:19:03,039
user error that's an actual just hard

398
00:19:01,390 --> 00:19:05,290
error in the system because that means

399
00:19:03,039 --> 00:19:07,659
that our import like our actual like

400
00:19:05,289 --> 00:19:10,119
asset loading code is broken and needs

401
00:19:07,660 --> 00:19:11,650
to be fixed that's not an actual soft

402
00:19:10,119 --> 00:19:14,139
failure that like somebody typed a

403
00:19:11,650 --> 00:19:15,759
character wrong in the agh team we just

404
00:19:14,140 --> 00:19:18,310
want to report it it's not that kind of

405
00:19:15,759 --> 00:19:19,839
an error I don't think so that should be

406
00:19:18,309 --> 00:19:21,519
a hard fail someone needs to do some

407
00:19:19,839 --> 00:19:24,099
debugging if that ever occurred because

408
00:19:21,519 --> 00:19:27,369
if this asset index is is an actual

409
00:19:24,099 --> 00:19:29,349
number like you know not zero then it

410
00:19:27,369 --> 00:19:31,659
should absolutely

411
00:19:29,349 --> 00:19:33,939
exist in the asset array it's not legal

412
00:19:31,660 --> 00:19:36,730
inside our system to have an asset index

413
00:19:33,940 --> 00:19:41,590
that points to nothing off in the in the

414
00:19:36,730 --> 00:19:44,099
distance right so anyway once we get

415
00:19:41,589 --> 00:19:47,139
that asset back now we should be able to

416
00:19:44,099 --> 00:19:49,149
verify that it is in fact a bitmap right

417
00:19:47,140 --> 00:19:51,850
so we should be able to do a further

418
00:19:49,150 --> 00:19:53,650
assertion that basically says in

419
00:19:51,849 --> 00:19:56,379
addition if you know if there was

420
00:19:53,650 --> 00:19:58,870
something here it should also be a

421
00:19:56,380 --> 00:20:04,809
bitmap because the grid only stores

422
00:19:58,869 --> 00:20:09,099
bitmaps so the asset type here should be

423
00:20:04,808 --> 00:20:10,329
an asset bitmap that type bitmap and if

424
00:20:09,099 --> 00:20:12,730
it's not again

425
00:20:10,329 --> 00:20:15,069
that's just buggy and we need to fix it

426
00:20:12,730 --> 00:20:18,130
because the grid is you don't import

427
00:20:15,069 --> 00:20:24,730
anything else into the grid right that

428
00:20:18,130 --> 00:20:29,799
makes sense now we may rule that relax

429
00:20:24,730 --> 00:20:31,779
that restriction when we go to do sounds

430
00:20:29,798 --> 00:20:37,210
we're gonna have to see how we want to

431
00:20:31,779 --> 00:20:46,329
address that kind of an asset change so

432
00:20:37,210 --> 00:20:48,370
we may need to like you know we may need

433
00:20:46,329 --> 00:20:52,000
to sort of adjust the way we're doing

434
00:20:48,369 --> 00:20:54,579
things here as we move towards different

435
00:20:52,000 --> 00:20:57,220
types of assets that are being imported

436
00:20:54,579 --> 00:21:00,339
or exported right so we do have some

437
00:20:57,220 --> 00:21:02,500
things that need changing there and

438
00:21:00,339 --> 00:21:03,908
we'll will kind of as we grow the asset

439
00:21:02,500 --> 00:21:06,700
system a little bit we'll have to work

440
00:21:03,909 --> 00:21:08,470
that out but anyway assuming that right

441
00:21:06,700 --> 00:21:11,019
now we just say look we're only doing

442
00:21:08,470 --> 00:21:12,669
bitmaps and so the ass has to exist it

443
00:21:11,019 --> 00:21:15,700
has to be a bitmap and we just want to

444
00:21:12,669 --> 00:21:19,620
air out otherwise once we have that done

445
00:21:15,700 --> 00:21:22,808
then inside here we do know where the

446
00:21:19,619 --> 00:21:26,979
data for all this stuff goes it's in

447
00:21:22,808 --> 00:21:29,619
here right and so in here we can just

448
00:21:26,980 --> 00:21:33,069
look to see does a particular alignment

449
00:21:29,619 --> 00:21:35,439
point exist or not and in there we can

450
00:21:33,069 --> 00:21:39,359
basically use the file formats calls I

451
00:21:35,440 --> 00:21:43,150
believe there's one in there somewhere

452
00:21:39,359 --> 00:21:44,349
here it's it's just the type

453
00:21:43,150 --> 00:21:46,890
so I guess we should just look at the

454
00:21:44,349 --> 00:21:51,549
type so in here if we look at the type

455
00:21:46,890 --> 00:21:54,009
the bitmap align points have these so I

456
00:21:51,549 --> 00:21:58,389
can basically say alright if the align

457
00:21:54,009 --> 00:22:01,480
point in question whichever one we're

458
00:21:58,390 --> 00:22:03,640
looking at here if it's type is none

459
00:22:01,480 --> 00:22:05,470
then it's not going to be used so if

460
00:22:03,640 --> 00:22:08,440
it's not equal to none than it is used

461
00:22:05,470 --> 00:22:11,410
right so when loading these in it's just

462
00:22:08,440 --> 00:22:13,570
that this is the so this is the entire

463
00:22:11,410 --> 00:22:16,269
code here this will go through every

464
00:22:13,569 --> 00:22:18,039
grid square it'll say if there was an

465
00:22:16,269 --> 00:22:21,069
asset that we know about that exists

466
00:22:18,039 --> 00:22:22,920
inside this grid square in terms of an

467
00:22:21,069 --> 00:22:25,509
import we will remember that that's

468
00:22:22,920 --> 00:22:29,529
happening and these are the align points

469
00:22:25,509 --> 00:22:32,200
that it had right so we'll set unprocess

470
00:22:29,529 --> 00:22:34,660
equal to true and then we just need to

471
00:22:32,200 --> 00:22:37,990
actually copy out the align points as

472
00:22:34,660 --> 00:22:40,210
well now we could do this a little bit

473
00:22:37,990 --> 00:22:41,920
more straightforward I suppose we want

474
00:22:40,210 --> 00:22:43,750
to by just using a copy since we're

475
00:22:41,920 --> 00:22:45,370
already looping through it I don't

476
00:22:43,750 --> 00:22:47,410
really see the need we might as well

477
00:22:45,369 --> 00:22:50,919
just actually do it manually because why

478
00:22:47,410 --> 00:22:57,370
not so in here we can say look copy out

479
00:22:50,920 --> 00:23:01,450
in addition that whole that whole bit

480
00:22:57,369 --> 00:23:03,519
map align point so that it's stored in

481
00:23:01,450 --> 00:23:07,240
here and we can now fuss with it right

482
00:23:03,519 --> 00:23:09,639
so that extracts all of the bitmap

483
00:23:07,240 --> 00:23:13,150
alignment points into a temporary

484
00:23:09,640 --> 00:23:15,490
holding place and the question that I

485
00:23:13,150 --> 00:23:18,429
guess I would ask now is is that really

486
00:23:15,490 --> 00:23:20,620
what we want to do is there any reason

487
00:23:18,429 --> 00:23:23,110
to do that because we don't really need

488
00:23:20,619 --> 00:23:26,699
to avoid touching this if we're writing

489
00:23:23,109 --> 00:23:32,199
these out then we want to update the HHA

490
00:23:26,700 --> 00:23:35,620
anyway so I guess the question is do we

491
00:23:32,200 --> 00:23:37,720
need to do this copy or not what I'm

492
00:23:35,619 --> 00:23:39,879
gonna say is let's do the copy because

493
00:23:37,720 --> 00:23:41,710
the other the other option right would

494
00:23:39,880 --> 00:23:44,470
be align points could just be a pointer

495
00:23:41,710 --> 00:23:46,808
like into the HHA right so we could just

496
00:23:44,470 --> 00:23:48,700
point into the hhas version of the

497
00:23:46,808 --> 00:23:51,160
alignment points and say that's the

498
00:23:48,700 --> 00:23:53,650
thing that we're going to be operating

499
00:23:51,160 --> 00:23:56,570
on and we don't really need to store it

500
00:23:53,650 --> 00:23:58,720
as a separate copy there you know the

501
00:23:56,569 --> 00:24:02,509
main reason not to do that is just

502
00:23:58,720 --> 00:24:04,759
because this is a user editable file

503
00:24:02,509 --> 00:24:05,960
right so I mean user is the wrong term

504
00:24:04,759 --> 00:24:08,028
because you know we really mean

505
00:24:05,960 --> 00:24:09,679
developer edited file but you know and

506
00:24:08,028 --> 00:24:11,538
wide number of people might edit these

507
00:24:09,679 --> 00:24:13,130
files especially you know kind of a

508
00:24:11,538 --> 00:24:15,829
point of handmade heroes learning to

509
00:24:13,130 --> 00:24:18,620
program someone buys the game and they

510
00:24:15,829 --> 00:24:21,009
start messing with the hht file we want

511
00:24:18,619 --> 00:24:23,449
to be able to produce relatively

512
00:24:21,009 --> 00:24:25,278
straightforward error messages and we

513
00:24:23,450 --> 00:24:28,278
don't necessarily want to you know break

514
00:24:25,278 --> 00:24:30,679
the in-game data if you did like a

515
00:24:28,278 --> 00:24:34,009
partial import so one thing we might

516
00:24:30,679 --> 00:24:36,559
want to do here is just if the parse of

517
00:24:34,009 --> 00:24:38,120
this block did not succeed in its

518
00:24:36,558 --> 00:24:40,069
entirety meaning if there are any if

519
00:24:38,119 --> 00:24:43,189
there were any parsing errors we may

520
00:24:40,069 --> 00:24:47,689
just not want to write anything back

521
00:24:43,190 --> 00:24:49,970
right and so if that's the case we

522
00:24:47,690 --> 00:24:52,669
probably don't want to directly modify

523
00:24:49,970 --> 00:24:55,759
the alignment points in memory we want

524
00:24:52,669 --> 00:24:58,730
to avoid doing that for any block that

525
00:24:55,759 --> 00:25:01,278
didn't successfully parse so I'm

526
00:24:58,730 --> 00:25:03,500
guessing that the best thing to do is to

527
00:25:01,278 --> 00:25:05,628
do the copy here even though we could

528
00:25:03,500 --> 00:25:09,069
have just made this a pointer and gotten

529
00:25:05,628 --> 00:25:12,528
rid of this extra part of the array

530
00:25:09,069 --> 00:25:14,569
again I'm kind of just like six and one

531
00:25:12,528 --> 00:25:16,730
half dozen the other on it but I do

532
00:25:14,569 --> 00:25:22,460
think that that maybe makes a little bit

533
00:25:16,730 --> 00:25:25,308
more sense doing it this way so inside

534
00:25:22,460 --> 00:25:27,470
here again we do have the ability to do

535
00:25:25,308 --> 00:25:30,128
exactly what we did here which is you

536
00:25:27,470 --> 00:25:32,298
know get the asset and and write it out

537
00:25:30,128 --> 00:25:34,158
we're gonna have to think for a minute

538
00:25:32,298 --> 00:25:37,398
though because if you look at what goes

539
00:25:34,159 --> 00:25:39,620
on here before the asset has actually

540
00:25:37,398 --> 00:25:43,908
been imported there's really no way that

541
00:25:39,619 --> 00:25:51,739
we can do this clear alignment points in

542
00:25:43,909 --> 00:25:55,490
the h/h a bit so this is really the this

543
00:25:51,740 --> 00:25:58,909
is really that we're just trying to like

544
00:25:55,490 --> 00:26:01,190
output the alignment points or or clear

545
00:25:58,909 --> 00:26:03,200
them in our temporary array we're not

546
00:26:01,190 --> 00:26:04,669
actually going to access the asset and

547
00:26:03,200 --> 00:26:06,860
the reason is because yes it hasn't been

548
00:26:04,669 --> 00:26:09,110
created yet right so we're just

549
00:26:06,859 --> 00:26:09,879
modifying our temporary array and later

550
00:26:09,109 --> 00:26:11,139
on

551
00:26:09,880 --> 00:26:13,990
we'll figure out what we want to do

552
00:26:11,140 --> 00:26:16,360
about that so if we were trying to write

553
00:26:13,990 --> 00:26:18,759
an h HT out then what we would want to

554
00:26:16,359 --> 00:26:20,409
do is write this out like the string

555
00:26:18,759 --> 00:26:23,410
right we want to like put out the

556
00:26:20,410 --> 00:26:25,420
strings here so in order to do that

557
00:26:23,410 --> 00:26:27,100
that's not really that hard one thing I

558
00:26:25,420 --> 00:26:32,259
do want to do though however before we

559
00:26:27,099 --> 00:26:34,359
go any further is again want to just

560
00:26:32,259 --> 00:26:35,950
double check that we didn't have any

561
00:26:34,359 --> 00:26:37,269
errors in fact I guess I don't have to

562
00:26:35,950 --> 00:26:39,970
do that because we would have broken out

563
00:26:37,269 --> 00:26:43,750
of the loop if we had in there so this

564
00:26:39,970 --> 00:26:45,069
is fine and we can do it so when we come

565
00:26:43,750 --> 00:26:46,690
through here what I want to do is say

566
00:26:45,069 --> 00:26:49,750
all right if we were writing this out

567
00:26:46,690 --> 00:26:51,549
here's where we have to sort of print

568
00:26:49,750 --> 00:26:53,410
this out so this is like our print out

569
00:26:51,549 --> 00:26:55,779
part here is the part we have to clear

570
00:26:53,410 --> 00:26:58,509
it clearing it's pretty easy it's just

571
00:26:55,779 --> 00:27:00,430
gonna be like you know this we've got a

572
00:26:58,509 --> 00:27:03,789
null alignment point we want to romp

573
00:27:00,430 --> 00:27:08,620
over one that already exists so aligned

574
00:27:03,789 --> 00:27:11,769
points grid y grid X point index should

575
00:27:08,619 --> 00:27:14,829
now equal null aligned and we should be

576
00:27:11,769 --> 00:27:18,009
done so at this point all aligned point

577
00:27:14,829 --> 00:27:21,490
unprocessed any one that was set there

578
00:27:18,009 --> 00:27:24,400
we have nullified and so now they won't

579
00:27:21,490 --> 00:27:26,259
actually come through in the HHA when we

580
00:27:24,400 --> 00:27:29,380
update the edge at a later on for each

581
00:27:26,259 --> 00:27:32,500
individual asset so we'll look at that

582
00:27:29,380 --> 00:27:34,780
in a second the more important part here

583
00:27:32,500 --> 00:27:37,019
for our purposes at the immediate moment

584
00:27:34,779 --> 00:27:40,960
is we need to have the alignment point

585
00:27:37,019 --> 00:27:44,430
output to the hht properly that's gonna

586
00:27:40,960 --> 00:27:47,309
require us mimicking the pattern that we

587
00:27:44,430 --> 00:27:51,580
talked about where is that for parsing

588
00:27:47,309 --> 00:27:55,259
so this thing right here right so this

589
00:27:51,579 --> 00:27:58,809
pattern has to be essentially duplicated

590
00:27:55,259 --> 00:28:01,119
and in the reverse so instead of parsing

591
00:27:58,809 --> 00:28:04,089
it what we want to do is now we want to

592
00:28:01,119 --> 00:28:06,399
write it you know what I'm saying so we

593
00:28:04,089 --> 00:28:08,319
want that whole thing to come out

594
00:28:06,400 --> 00:28:13,269
properly I believe this has to be like

595
00:28:08,319 --> 00:28:16,179
that yeah and so in here we need to

596
00:28:13,269 --> 00:28:21,190
start sort of changing this to actually

597
00:28:16,180 --> 00:28:23,220
write these out so when we you know we

598
00:28:21,190 --> 00:28:26,308
need like a thing that like outputs to

599
00:28:23,220 --> 00:28:28,950
stream now fortunately we've already got

600
00:28:26,308 --> 00:28:32,279
out F which I believe is exactly what we

601
00:28:28,950 --> 00:28:35,429
want so we should be able to say look

602
00:28:32,279 --> 00:28:45,058
let's do all of our out FS here so we

603
00:28:35,429 --> 00:28:47,130
can write this stuff out right okay so

604
00:28:45,058 --> 00:28:48,928
what we'd like to do first is say well

605
00:28:47,130 --> 00:28:52,500
these align points or things that we're

606
00:28:48,929 --> 00:28:55,500
just updating in the file so we'd like

607
00:28:52,500 --> 00:28:57,900
to do a copy all input up to an

608
00:28:55,500 --> 00:28:59,970
including of this closed brace only

609
00:28:57,900 --> 00:29:03,059
problem is we don't really want the

610
00:28:59,970 --> 00:29:07,529
including so we want up to but not

611
00:29:03,058 --> 00:29:09,509
including as a separate thing this token

612
00:29:07,529 --> 00:29:12,720
so basically the same call that reason

613
00:29:09,509 --> 00:29:14,210
to copy things in we want that that to

614
00:29:12,720 --> 00:29:18,150
have to be able to work

615
00:29:14,210 --> 00:29:21,000
oops without including the token that

616
00:29:18,150 --> 00:29:25,080
we're talking about and that way we can

617
00:29:21,000 --> 00:29:29,880
actually do this insertion here and then

618
00:29:25,079 --> 00:29:31,379
copy all the rest of the stuff right so

619
00:29:29,880 --> 00:29:32,880
we don't want to include that close

620
00:29:31,380 --> 00:29:34,830
brace we want to include everything up

621
00:29:32,880 --> 00:29:36,929
to the close brace then we want to do

622
00:29:34,829 --> 00:29:43,139
our grid copy then we can copy

623
00:29:36,929 --> 00:29:45,269
whatever's after it right so we're

624
00:29:43,140 --> 00:29:47,009
basically just squeaking in the middle

625
00:29:45,269 --> 00:29:50,400
there and it should be pretty easy for

626
00:29:47,009 --> 00:29:52,470
us to do that because if we just look at

627
00:29:50,400 --> 00:29:54,659
this function it's you know it's really

628
00:29:52,470 --> 00:29:57,630
straightforward it's the same exact

629
00:29:54,659 --> 00:30:04,559
thing except instead of doing this we

630
00:29:57,630 --> 00:30:07,440
just do that right so we don't really

631
00:30:04,558 --> 00:30:10,038
have to do anything all we have to do is

632
00:30:07,440 --> 00:30:13,620
just take the exact same function and

633
00:30:10,038 --> 00:30:15,750
slightly modify how we were actually

634
00:30:13,619 --> 00:30:18,959
doing it right everything else is

635
00:30:15,750 --> 00:30:23,759
exactly the same and we could if we

636
00:30:18,960 --> 00:30:25,679
wanted to make these be you know sort of

637
00:30:23,759 --> 00:30:31,048
I don't know how you want to put it we

638
00:30:25,679 --> 00:30:33,570
could unify them let's say by just

639
00:30:31,048 --> 00:30:34,619
adding an extra here because you can see

640
00:30:33,569 --> 00:30:35,730
the only difference between these two

641
00:30:34,619 --> 00:30:38,549
routines is that what

642
00:30:35,730 --> 00:30:40,140
imagine the token texts count and so

643
00:30:38,549 --> 00:30:42,180
what I could do is I could do it like

644
00:30:40,140 --> 00:30:43,920
this where we just say you know what

645
00:30:42,180 --> 00:30:46,680
these two routines are exactly the same

646
00:30:43,920 --> 00:30:52,830
the only difference between them is that

647
00:30:46,680 --> 00:30:54,570
this one passes this which is the number

648
00:30:52,829 --> 00:30:57,689
of extra characters to write in that

649
00:30:54,569 --> 00:31:01,009
case makes sense so that way these are

650
00:30:57,690 --> 00:31:03,269
both identical they there's no

651
00:31:01,009 --> 00:31:04,829
duplicated you know cut and pasted code

652
00:31:03,269 --> 00:31:07,139
that you know might get out of sync or

653
00:31:04,829 --> 00:31:09,210
something there all right so all we need

654
00:31:07,140 --> 00:31:10,860
to do is just say look it's gonna do the

655
00:31:09,210 --> 00:31:13,230
exact same thing each time the only

656
00:31:10,859 --> 00:31:15,929
difference is one of them takes the

657
00:31:13,230 --> 00:31:18,000
actual token size and uses that the

658
00:31:15,930 --> 00:31:19,799
other one doesn't so it just stops the

659
00:31:18,000 --> 00:31:20,599
beginning of the token and then we're

660
00:31:19,799 --> 00:31:22,740
done

661
00:31:20,599 --> 00:31:25,559
so that makes those two nice and

662
00:31:22,740 --> 00:31:27,269
versatile so we can do whatever we want

663
00:31:25,559 --> 00:31:28,829
with the two of them but they still

664
00:31:27,269 --> 00:31:31,019
share the exact same code so we don't

665
00:31:28,829 --> 00:31:32,399
have to worry about you know changes in

666
00:31:31,019 --> 00:31:35,400
the future accidentally breaking one of

667
00:31:32,400 --> 00:31:38,550
them and not the other or whatever so

668
00:31:35,400 --> 00:31:40,470
inside here we now have to finish how

669
00:31:38,549 --> 00:31:43,349
we're gonna actually output this point

670
00:31:40,470 --> 00:31:46,799
and if you look at how it's working here

671
00:31:43,349 --> 00:31:50,730
we need also you can see it reading here

672
00:31:46,799 --> 00:31:55,919
the Open bracket closed bracket so on so

673
00:31:50,730 --> 00:32:04,430
we need to write out a line this right

674
00:31:55,920 --> 00:32:04,430
here we need to write that out oops

675
00:32:05,849 --> 00:32:14,689
and then we need to write out open

676
00:32:08,940 --> 00:32:19,110
brackets a closed bracket and a integer

677
00:32:14,690 --> 00:32:22,170
write another one and another one right

678
00:32:19,109 --> 00:32:28,979
the XY and index we need to write out

679
00:32:22,170 --> 00:32:30,840
there and you know I do blender if we

680
00:32:28,980 --> 00:32:32,460
should write and write these in the same

681
00:32:30,839 --> 00:32:37,439
way that we're reading and writing them

682
00:32:32,460 --> 00:32:40,829
internally I kind of feel like it should

683
00:32:37,440 --> 00:32:42,809
look like that probably so I kind of

684
00:32:40,829 --> 00:32:45,119
think maybe this should because just to

685
00:32:42,809 --> 00:32:46,799
be consistent it'd be weird if our file

686
00:32:45,119 --> 00:32:49,259
format is different than the way the

687
00:32:46,799 --> 00:32:50,609
code works internally there's no reason

688
00:32:49,259 --> 00:32:52,079
we can't do it that way but it just

689
00:32:50,609 --> 00:32:54,899
seems like you want to keep everything

690
00:32:52,079 --> 00:32:56,849
working the same way just to make it

691
00:32:54,900 --> 00:32:59,670
less common overhead once you learn one

692
00:32:56,849 --> 00:33:03,539
way you have to learn another that would

693
00:32:59,670 --> 00:33:06,240
be my suggestion but so then what we've

694
00:33:03,539 --> 00:33:07,950
got is open bracket number closed

695
00:33:06,240 --> 00:33:10,440
bracket open bracket number closed

696
00:33:07,950 --> 00:33:14,039
bracket open bracket member oh nope

697
00:33:10,440 --> 00:33:17,700
that's wrong it's a comma well that

698
00:33:14,039 --> 00:33:19,589
makes it uh yeah I don't know about that

699
00:33:17,700 --> 00:33:21,690
I feel like it should again I feel like

700
00:33:19,589 --> 00:33:23,129
it should look the same you know what

701
00:33:21,690 --> 00:33:27,809
I'm saying

702
00:33:23,130 --> 00:33:32,580
I don't know oh no it's tough because if

703
00:33:27,809 --> 00:33:33,480
we do that it's XY you wouldn't do all

704
00:33:32,579 --> 00:33:35,339
right all right

705
00:33:33,480 --> 00:33:36,779
I capitulate I could pitch you late it

706
00:33:35,339 --> 00:33:38,519
should be different if it's a comma

707
00:33:36,779 --> 00:33:40,649
won't be the same either way all right

708
00:33:38,519 --> 00:33:41,940
it's fine I'm fine don't worry about it

709
00:33:40,650 --> 00:33:44,730
I'm not gonna get grumpy

710
00:33:41,940 --> 00:33:46,620
I'm already grumpy all right so we've

711
00:33:44,730 --> 00:33:49,799
got the x and y and then we've got the

712
00:33:46,619 --> 00:33:52,289
point index fine I'm a little unhappy

713
00:33:49,799 --> 00:33:56,159
about it both fine and then we've got an

714
00:33:52,289 --> 00:33:58,409
open brace close brace after an equal

715
00:33:56,160 --> 00:34:00,509
sign here right so it's that and we've

716
00:33:58,410 --> 00:34:02,250
got some commas so we've got the P

717
00:34:00,509 --> 00:34:06,299
percent the size that sort of stuff

718
00:34:02,250 --> 00:34:11,010
right so we're doing p % 1 p % 2 and the

719
00:34:06,299 --> 00:34:13,259
size and then the type right and that

720
00:34:11,010 --> 00:34:15,150
type is probably gonna be a length

721
00:34:13,260 --> 00:34:18,240
string but I think we added our own

722
00:34:15,150 --> 00:34:23,369
specifier for those so we've got

723
00:34:18,239 --> 00:34:27,809
largess so you us there everyone's happy

724
00:34:23,369 --> 00:34:31,169
then we have a question about whether or

725
00:34:27,809 --> 00:34:33,480
not we would use to parents or not right

726
00:34:31,168 --> 00:34:36,539
and then that's the end of it

727
00:34:33,480 --> 00:34:39,030
so it will look like this but then

728
00:34:36,539 --> 00:34:42,000
there's also a question here you know

729
00:34:39,030 --> 00:34:44,369
maybe we include to parent maybe we

730
00:34:42,000 --> 00:34:48,690
don't and so we'll have to have that

731
00:34:44,369 --> 00:34:50,820
part specified cleanly as well okay so

732
00:34:48,690 --> 00:34:54,148
what do we need here well we needed the

733
00:34:50,820 --> 00:34:57,359
grid X which we have we have the grid Y

734
00:34:54,148 --> 00:35:00,299
also have got the point index that's

735
00:34:57,358 --> 00:35:03,539
good and now we need all of the actual

736
00:35:00,300 --> 00:35:09,420
alignment point data that would be like

737
00:35:03,539 --> 00:35:12,389
the point p % 0 so these are the things

738
00:35:09,420 --> 00:35:18,960
that come out of there so we'd have the

739
00:35:12,389 --> 00:35:21,509
P percent one size and then we would

740
00:35:18,960 --> 00:35:25,050
have the type which we want to turn into

741
00:35:21,510 --> 00:35:30,210
a string right and then we would also

742
00:35:25,050 --> 00:35:34,950
have an is it a parent thing so we do

743
00:35:30,210 --> 00:35:37,500
this which is a jeté align to parent and

744
00:35:34,949 --> 00:35:40,319
if it was to parent that we want to

745
00:35:37,500 --> 00:35:41,550
append something and if it wasn't then

746
00:35:40,320 --> 00:35:43,769
we don't and so I'm just gonna use this

747
00:35:41,550 --> 00:35:46,859
little trick I often do this where I'll

748
00:35:43,769 --> 00:35:48,659
just I'll use the format specifier to

749
00:35:46,858 --> 00:35:50,549
stick a string on the end and then I

750
00:35:48,659 --> 00:35:51,868
just won't stick any string on the end

751
00:35:50,550 --> 00:35:56,039
in the case where the thing isn't true

752
00:35:51,869 --> 00:36:00,990
right so we can do this and append that

753
00:35:56,039 --> 00:36:04,108
to parent flag as necessary but we won't

754
00:36:00,989 --> 00:36:06,209
append anything in the case where it's

755
00:36:04,108 --> 00:36:08,519
not so really the only thing we have to

756
00:36:06,210 --> 00:36:11,940
do here is turn this thing into a string

757
00:36:08,519 --> 00:36:14,159
when we do that you can see getting a

758
00:36:11,940 --> 00:36:16,889
line point name from type you can see

759
00:36:14,159 --> 00:36:19,579
that happening here so we want to go

760
00:36:16,889 --> 00:36:23,429
ahead and get that like so I'm not

761
00:36:19,579 --> 00:36:26,190
really thrilled about the way this

762
00:36:23,429 --> 00:36:31,710
particular function works here because

763
00:36:26,190 --> 00:36:33,780
the align point is a little bit hairy

764
00:36:31,710 --> 00:36:36,720
explain you what I don't like about it's

765
00:36:33,780 --> 00:36:38,940
a little bit nuanced but one of the

766
00:36:36,719 --> 00:36:41,189
problems that we're gonna have is when

767
00:36:38,940 --> 00:36:42,599
you're looking at alignment point yeah

768
00:36:41,190 --> 00:36:43,309
oh well you know what maybe I already

769
00:36:42,599 --> 00:36:45,599
did it though

770
00:36:43,309 --> 00:36:47,820
yes I did okay nevermind so I'm fine

771
00:36:45,599 --> 00:36:50,670
with it I'm a little bit ahead of myself

772
00:36:47,820 --> 00:36:52,890
so this get type here is exactly what I

773
00:36:50,670 --> 00:36:57,690
wanted because I was trying to say is I

774
00:36:52,889 --> 00:37:00,509
don't like the idea of not knowing how

775
00:36:57,690 --> 00:37:02,338
much stuff I have to and off in order to

776
00:37:00,510 --> 00:37:05,160
figure out what the type is but it's

777
00:37:02,338 --> 00:37:08,190
okay I did actually add an access or for

778
00:37:05,159 --> 00:37:12,210
that and in fact I even add an INXS or

779
00:37:08,190 --> 00:37:15,659
for this so those kind of finicky rules

780
00:37:12,210 --> 00:37:16,230
there that are maybe something's we want

781
00:37:15,659 --> 00:37:19,170
to change feature

782
00:37:16,230 --> 00:37:21,329
I did add actual ways of accessing them

783
00:37:19,170 --> 00:37:23,490
more properly and so that's great and

784
00:37:21,329 --> 00:37:25,259
that makes it easy to write this code

785
00:37:23,489 --> 00:37:26,819
with some confidence that it won't break

786
00:37:25,260 --> 00:37:28,140
if we change how these things are

787
00:37:26,820 --> 00:37:32,580
encoded in the future which is what I

788
00:37:28,139 --> 00:37:34,319
was concerned about so anyway inside

789
00:37:32,579 --> 00:37:36,838
here we've got a line point name from

790
00:37:34,320 --> 00:37:39,180
type with a get type that's exactly what

791
00:37:36,838 --> 00:37:41,099
I wanted and that we got the is to

792
00:37:39,179 --> 00:37:43,559
parent there so all I really need now is

793
00:37:41,099 --> 00:37:46,680
the actual line at point itself so

794
00:37:43,559 --> 00:37:48,989
here's the HHA a line point that's just

795
00:37:46,679 --> 00:37:56,909
going to come out of a line points grid

796
00:37:48,989 --> 00:38:01,769
whoops grid y grid X point index and now

797
00:37:56,909 --> 00:38:03,929
we can do that export process right all

798
00:38:01,769 --> 00:38:05,699
of this is just what I was using for

799
00:38:03,929 --> 00:38:09,480
reference we don't actually need it for

800
00:38:05,699 --> 00:38:12,358
anything so out it comes and then again

801
00:38:09,480 --> 00:38:15,650
if we were actually trying to import

802
00:38:12,358 --> 00:38:18,690
from the file we don't want to do this

803
00:38:15,650 --> 00:38:21,539
this writing out instead what we want to

804
00:38:18,690 --> 00:38:22,349
do is in here we want to clear right so

805
00:38:21,539 --> 00:38:25,710
that's what we did

806
00:38:22,349 --> 00:38:27,559
now if I come down to the align code now

807
00:38:25,710 --> 00:38:33,088
we've got a little bit more work to do

808
00:38:27,559 --> 00:38:35,039
what you can see here is Azra to me as

809
00:38:33,088 --> 00:38:38,309
we're reading these things in I probably

810
00:38:35,039 --> 00:38:41,670
want to do this as well so what I want

811
00:38:38,309 --> 00:38:44,190
to do here is say look if this thing if

812
00:38:41,670 --> 00:38:45,490
we're trying to read these out of the

813
00:38:44,190 --> 00:38:48,159
file

814
00:38:45,489 --> 00:38:50,319
then I want to actually do the copy and

815
00:38:48,159 --> 00:38:52,329
if we're not trying to read these out of

816
00:38:50,320 --> 00:38:56,080
the file that I don't want to do the

817
00:38:52,329 --> 00:38:59,980
copy right and so that's pretty specific

818
00:38:56,079 --> 00:39:01,900
so in here when we see this token and

819
00:38:59,980 --> 00:39:03,159
we've got a line again I'm going to want

820
00:39:01,900 --> 00:39:05,110
to do the same thing that's doing before

821
00:39:03,159 --> 00:39:08,259
I want to do a copy up to but not

822
00:39:05,110 --> 00:39:11,740
including for the token that we're on in

823
00:39:08,260 --> 00:39:12,850
this case right and what that's gonna do

824
00:39:11,739 --> 00:39:14,409
is that's going to say look everything

825
00:39:12,849 --> 00:39:15,940
up to here I want to make sure it's in

826
00:39:14,409 --> 00:39:19,230
the output file if we're trying to

827
00:39:15,940 --> 00:39:22,389
output a file and then what I want to do

828
00:39:19,230 --> 00:39:23,440
is I want to take all this data that's

829
00:39:22,389 --> 00:39:28,329
in there right

830
00:39:23,440 --> 00:39:32,889
and I want to see if if we're actually

831
00:39:28,329 --> 00:39:35,559
trying to produce a new hht from the

832
00:39:32,889 --> 00:39:38,319
from you know for saving out in hhd

833
00:39:35,559 --> 00:39:40,509
files opposed to loading one in then

834
00:39:38,320 --> 00:39:42,910
what I want to do is I want to copy the

835
00:39:40,510 --> 00:39:44,920
data in its entirety like whatever was

836
00:39:42,909 --> 00:39:46,719
here I want to copy but if we're not

837
00:39:44,920 --> 00:39:49,869
trying to do that so if what we're

838
00:39:46,719 --> 00:39:58,119
trying to do is just load in and romp

839
00:39:49,869 --> 00:40:01,329
over it actually I guess that's not

840
00:39:58,119 --> 00:40:03,880
quite true what I just said so what we

841
00:40:01,329 --> 00:40:09,849
really want to do here I guess is say

842
00:40:03,880 --> 00:40:12,430
look we want to copy everything up to

843
00:40:09,849 --> 00:40:15,339
the alignment point I want to read in

844
00:40:12,429 --> 00:40:18,219
the alignment point and then I want to

845
00:40:15,340 --> 00:40:20,559
see whether or not the alignment point

846
00:40:18,219 --> 00:40:24,250
matches the alignment point I already

847
00:40:20,559 --> 00:40:27,489
have so I want to do like a memory is

848
00:40:24,250 --> 00:40:31,449
equal call and I want to say alright

849
00:40:27,489 --> 00:40:34,869
I've got the point in question right

850
00:40:31,449 --> 00:40:37,919
which is you know gonna be something

851
00:40:34,869 --> 00:40:37,920
like this and I should probably

852
00:40:44,539 --> 00:40:50,119
I guess I'm only gonna do it parsing

853
00:40:46,599 --> 00:40:53,809
succeeded so it's probably only gonna be

854
00:40:50,119 --> 00:40:57,170
in here right so what I want to do is

855
00:40:53,809 --> 00:40:59,000
say look I want to do some sort of

856
00:40:57,170 --> 00:41:00,800
comparison here where I say whatever I

857
00:40:59,000 --> 00:41:03,469
parsed in I want to see whether these

858
00:41:00,800 --> 00:41:05,089
two things are the same or different and

859
00:41:03,469 --> 00:41:08,389
if they're different I need to overwrite

860
00:41:05,088 --> 00:41:09,769
them if we're actually doing our save

861
00:41:08,389 --> 00:41:13,639
right meaning if we're actually

862
00:41:09,769 --> 00:41:16,670
transferring with data so what I want to

863
00:41:13,639 --> 00:41:19,578
do is say well you know what let's do a

864
00:41:16,670 --> 00:41:23,599
test here and see what's up

865
00:41:19,579 --> 00:41:25,490
let me first check we'll create one of

866
00:41:23,599 --> 00:41:26,990
these things we'll do this a little bit

867
00:41:25,489 --> 00:41:31,789
differently than what's being here so

868
00:41:26,989 --> 00:41:37,279
we'll do this will create an alignment

869
00:41:31,789 --> 00:41:43,190
point temporary structure we'll set it

870
00:41:37,280 --> 00:41:46,940
all up right and we'll say okay set the

871
00:41:43,190 --> 00:41:48,889
P percent the size and the type get all

872
00:41:46,940 --> 00:41:53,150
those things in there then what we'll do

873
00:41:48,889 --> 00:41:55,909
is we'll say hey does it differ from the

874
00:41:53,150 --> 00:42:02,900
one we already have so here's the one we

875
00:41:55,909 --> 00:42:06,048
already had and this will tell us that

876
00:42:02,900 --> 00:42:07,519
right so it's like we've got the one we

877
00:42:06,048 --> 00:42:10,219
parsed and we've got the one that

878
00:42:07,519 --> 00:42:13,519
existed are they the same or are they

879
00:42:10,219 --> 00:42:21,289
different and the other thing that we

880
00:42:13,519 --> 00:42:22,309
might want to say is well well now that

881
00:42:21,289 --> 00:42:24,199
I think about it I don't really know

882
00:42:22,309 --> 00:42:26,380
that we do need to do what I'm about to

883
00:42:24,199 --> 00:42:26,379
say

884
00:42:32,900 --> 00:42:37,650
let me keep writing this and then we'll

885
00:42:34,889 --> 00:42:39,118
see what happens so we're gonna check

886
00:42:37,650 --> 00:42:41,220
this the memory is equal and if the

887
00:42:39,119 --> 00:42:46,590
memory is equal then we can just copy

888
00:42:41,219 --> 00:42:50,730
the entire thing so we can essentially

889
00:42:46,590 --> 00:43:01,800
copy everything up to wherever we are in

890
00:42:50,730 --> 00:43:06,650
the tokenizer like so so all that stuff

891
00:43:01,800 --> 00:43:10,680
will get copied although it's actually

892
00:43:06,650 --> 00:43:12,210
that uh so we can copy everything that

893
00:43:10,679 --> 00:43:13,889
we've seen because we know that this is

894
00:43:12,210 --> 00:43:16,889
just a duplicate and we don't have to do

895
00:43:13,889 --> 00:43:20,159
anything else on the other hand if it's

896
00:43:16,889 --> 00:43:27,239
actually different than we need to do

897
00:43:20,159 --> 00:43:30,509
something more specific here and that's

898
00:43:27,239 --> 00:43:34,319
gonna require copying back and it's

899
00:43:30,510 --> 00:43:36,690
gonna require ignoring everything in

900
00:43:34,320 --> 00:43:40,859
this whole range because we don't want

901
00:43:36,690 --> 00:43:42,108
to copy this alignment point at all

902
00:43:40,858 --> 00:43:45,599
right

903
00:43:42,108 --> 00:43:47,849
and so looking at it here when we do

904
00:43:45,599 --> 00:43:49,849
this require token of a semicolon this

905
00:43:47,849 --> 00:43:52,679
is actually gonna cause us some problems

906
00:43:49,849 --> 00:43:54,400
because if the alignment point was

907
00:43:52,679 --> 00:43:56,059
different here

908
00:43:54,400 --> 00:43:58,530
[Music]

909
00:43:56,059 --> 00:44:00,690
you know we may not even want to write

910
00:43:58,530 --> 00:44:03,240
it out right it may have been deleted or

911
00:44:00,690 --> 00:44:05,460
something and so this causes a little

912
00:44:03,239 --> 00:44:09,989
bit of an issue for us because this

913
00:44:05,460 --> 00:44:12,840
require took in semicolon we need to

914
00:44:09,989 --> 00:44:15,259
have consumed it and potentially gotten

915
00:44:12,840 --> 00:44:15,260
rid of it

916
00:44:28,789 --> 00:44:33,039
and so I'm not sure how we want to

917
00:44:30,619 --> 00:44:33,039
address that

918
00:44:51,978 --> 00:45:02,248
hmm

919
00:44:53,728 --> 00:45:05,759
I say let's think this through very

920
00:45:02,248 --> 00:45:07,588
briefly there are only I'm trying to

921
00:45:05,759 --> 00:45:10,679
think if there's other cases but I think

922
00:45:07,588 --> 00:45:14,429
there's only two cases there's the case

923
00:45:10,679 --> 00:45:16,649
where we load things in from the hht in

924
00:45:14,429 --> 00:45:18,239
a case where we write things out which

925
00:45:16,650 --> 00:45:20,239
is not as complicated as I originally

926
00:45:18,239 --> 00:45:25,108
thought it was

927
00:45:20,239 --> 00:45:29,219
but anyway so if we are loading things

928
00:45:25,108 --> 00:45:31,259
in from the hht then we never write

929
00:45:29,219 --> 00:45:33,210
anything anyway so it doesn't matter

930
00:45:31,259 --> 00:45:35,929
what we put in there that's all

931
00:45:33,210 --> 00:45:43,289
irrelevant all we need to know is that

932
00:45:35,929 --> 00:45:46,078
anything that we read in to me anything

933
00:45:43,289 --> 00:45:48,450
that we read in is the answer right and

934
00:45:46,079 --> 00:45:52,650
so one way to think about it would be

935
00:45:48,449 --> 00:46:00,179
look this whole thing where we do any of

936
00:45:52,650 --> 00:46:05,608
this right we only really need to do

937
00:46:00,179 --> 00:46:11,460
this in the case where we have where

938
00:46:05,608 --> 00:46:13,078
we're writing right so if we're writing

939
00:46:11,460 --> 00:46:15,690
then we're gonna do that if we're not

940
00:46:13,079 --> 00:46:17,969
then we're not and so when we come

941
00:46:15,690 --> 00:46:23,119
through here we really don't need to do

942
00:46:17,969 --> 00:46:23,119
any of this if we're not writing so

943
00:46:29,119 --> 00:46:33,588
if we've got an agency out file then we

944
00:46:31,429 --> 00:46:35,389
have to do this work otherwise we don't

945
00:46:33,588 --> 00:46:37,519
we don't have to clear it because

946
00:46:35,389 --> 00:46:38,838
nothing would be in there we wouldn't

947
00:46:37,519 --> 00:46:40,608
have said it to anything because we're

948
00:46:38,838 --> 00:46:43,279
not using what's in the HHA we're

949
00:46:40,608 --> 00:46:44,659
reading it right so those two things can

950
00:46:43,280 --> 00:46:47,000
be simplified a little bit because now

951
00:46:44,659 --> 00:46:48,949
we know that look there's we don't

952
00:46:47,000 --> 00:46:51,679
actually have to do any work in either

953
00:46:48,949 --> 00:46:55,809
of these two cases these are just for

954
00:46:51,679 --> 00:46:58,338
when we're rewriting the hht right

955
00:46:55,809 --> 00:47:00,230
so the only case we care about here is

956
00:46:58,338 --> 00:47:02,029
when we're rewriting the hht that's the

957
00:47:00,230 --> 00:47:03,530
only time that we actually need to do

958
00:47:02,030 --> 00:47:07,160
anything because otherwise we just read

959
00:47:03,530 --> 00:47:08,540
everything in all ways right so you

960
00:47:07,159 --> 00:47:23,989
could think about this is just saying

961
00:47:08,539 --> 00:47:26,269
well actually this looks a little more

962
00:47:23,989 --> 00:47:28,939
like this we can always set the

963
00:47:26,269 --> 00:47:32,900
alignment points like when we read them

964
00:47:28,940 --> 00:47:35,539
in and we're just not going to use those

965
00:47:32,900 --> 00:47:38,750
in the case where we're writing things

966
00:47:35,539 --> 00:47:40,670
back out right like whatever we parsed

967
00:47:38,750 --> 00:47:43,838
in we're not going to use in fact you

968
00:47:40,670 --> 00:47:43,838
could actually think of it this way

969
00:47:44,019 --> 00:47:52,639
right we write things out or read them

970
00:47:49,940 --> 00:47:55,220
in exclusively so if we were writing it

971
00:47:52,639 --> 00:47:56,809
out we don't the only reason we care

972
00:47:55,219 --> 00:47:59,118
about what we parse from the file at all

973
00:47:56,809 --> 00:48:01,190
is to know whether we can preserve this

974
00:47:59,119 --> 00:48:03,320
line of text or not that's the only

975
00:48:01,190 --> 00:48:06,980
reason we're doing it right

976
00:48:03,320 --> 00:48:11,559
and then the in the opposite case we

977
00:48:06,980 --> 00:48:11,559
would just say yeah the align point

978
00:48:27,838 --> 00:48:31,079
sorry excuse me

979
00:48:32,760 --> 00:48:37,450
so I don't really know in this case if

980
00:48:35,920 --> 00:48:38,980
we're gonna write it out yeah this is

981
00:48:37,449 --> 00:48:41,159
the part we have to do if we're not go

982
00:48:38,980 --> 00:48:42,670
write it out then we can copy it in and

983
00:48:41,159 --> 00:48:44,710
off we go

984
00:48:42,670 --> 00:48:46,659
so the tough part is just the fact that

985
00:48:44,710 --> 00:48:48,730
we really want to consume the semicolon

986
00:48:46,659 --> 00:48:50,289
and so I think I'm just gonna cheese it

987
00:48:48,730 --> 00:48:52,059
because since we only want it in one

988
00:48:50,289 --> 00:48:54,009
place I don't really know that I want to

989
00:48:52,059 --> 00:48:56,650
spend a lot of time working around that

990
00:48:54,010 --> 00:48:59,320
everywhere for no reason so I don't know

991
00:48:56,650 --> 00:49:02,769
if this is a good idea or not but

992
00:48:59,320 --> 00:49:04,838
consume semicolon is just gonna equal

993
00:49:02,769 --> 00:49:15,489
false and so all the time it's gonna do

994
00:49:04,838 --> 00:49:18,279
this right and then in here I'll just

995
00:49:15,489 --> 00:49:21,939
say hey you know we're gonna consume the

996
00:49:18,280 --> 00:49:27,490
semicolon in this case right that's just

997
00:49:21,940 --> 00:49:29,108
this this thing does that right so when

998
00:49:27,489 --> 00:49:31,118
we come through here and we get to the

999
00:49:29,108 --> 00:49:45,699
end then we're gonna consume the

1000
00:49:31,119 --> 00:49:48,460
semicolon so here we go so we're gonna

1001
00:49:45,699 --> 00:49:51,608
require that semicolon assuming that we

1002
00:49:48,460 --> 00:49:54,039
get it and everything's fine then we'll

1003
00:49:51,608 --> 00:49:58,329
go through and actually do the copying

1004
00:49:54,039 --> 00:50:03,070
right so I you know at each stage will

1005
00:49:58,329 --> 00:50:05,739
think that through and so here once we

1006
00:50:03,070 --> 00:50:16,869
get here if the memory is equal then we

1007
00:50:05,739 --> 00:50:20,909
can do this and if it's not we don't do

1008
00:50:16,869 --> 00:50:20,910
anything actually that's not true

1009
00:50:30,440 --> 00:50:40,619
we need to mark the fact that we don't

1010
00:50:33,449 --> 00:50:42,629
do it right now this doesn't actually I

1011
00:50:40,619 --> 00:50:44,309
wonder if we can actually get away with

1012
00:50:42,630 --> 00:50:45,450
not having that and that would also make

1013
00:50:44,309 --> 00:50:46,858
it so we don't even really need that

1014
00:50:45,449 --> 00:50:50,939
call although I'm gonna leave it in case

1015
00:50:46,858 --> 00:50:53,039
we want it later but since we've always

1016
00:50:50,940 --> 00:50:55,440
copied up with a semicolon anyway in any

1017
00:50:53,039 --> 00:50:58,380
previous context I think we can actually

1018
00:50:55,440 --> 00:50:59,940
get rid of that and so this is all we

1019
00:50:58,380 --> 00:51:01,920
actually need to do although since

1020
00:50:59,940 --> 00:51:04,230
that's not true there might be comments

1021
00:51:01,920 --> 00:51:08,568
in between them so let's say we keep it

1022
00:51:04,230 --> 00:51:17,838
there then if we come up here we can

1023
00:51:08,568 --> 00:51:20,759
make another call that ignores things

1024
00:51:17,838 --> 00:51:23,519
and what this would do is say yeah if

1025
00:51:20,760 --> 00:51:28,890
there's an HST out then what we're gonna

1026
00:51:23,519 --> 00:51:48,869
do is just hard set this like so and get

1027
00:51:28,889 --> 00:51:54,230
rid of that and whoops and that that all

1028
00:51:48,869 --> 00:51:54,230
seems pretty good to me oops

1029
00:51:54,889 --> 00:52:02,129
so I think we're okay and I think that

1030
00:51:59,579 --> 00:52:05,060
would actually do it the only thing left

1031
00:52:02,130 --> 00:52:10,800
to do is right now we don't actually use

1032
00:52:05,059 --> 00:52:12,869
any of the stuff that we parse in so I

1033
00:52:10,800 --> 00:52:17,068
think that's the only thing left when we

1034
00:52:12,869 --> 00:52:20,190
do this call update asset metadata that

1035
00:52:17,068 --> 00:52:20,969
is probably the place where this would

1036
00:52:20,190 --> 00:52:24,630
occur

1037
00:52:20,969 --> 00:52:28,980
so inside update asset metadata we would

1038
00:52:24,630 --> 00:52:33,329
want to as necessary take whatever the

1039
00:52:28,980 --> 00:52:37,588
stuff is that we are that we read in and

1040
00:52:33,329 --> 00:52:42,329
romp it over the the information that's

1041
00:52:37,588 --> 00:52:44,940
in the HHA right so for reading things

1042
00:52:42,329 --> 00:52:51,960
in or writing things out we would do it

1043
00:52:44,940 --> 00:52:53,789
if we're writing things out so

1044
00:52:51,960 --> 00:52:56,760
interestingly enough like if we're in an

1045
00:52:53,789 --> 00:52:58,710
in a writing out mode then we just romp

1046
00:52:56,760 --> 00:53:00,900
over it if we're in a reading in mode

1047
00:52:58,710 --> 00:53:02,429
then we I'm sorry if we're in a writing

1048
00:53:00,900 --> 00:53:06,710
out mode we don't touch it if we're in a

1049
00:53:02,429 --> 00:53:06,710
reading in mode we do right

1050
00:53:16,539 --> 00:53:33,400
so I think we should probably do this as

1051
00:53:26,980 --> 00:53:38,559
a pointer meaning in here when we grit

1052
00:53:33,400 --> 00:53:42,880
get the asset index for each asset we're

1053
00:53:38,559 --> 00:53:48,369
gonna want to go ahead and set the the

1054
00:53:42,880 --> 00:53:54,309
information on that asset so we want to

1055
00:53:48,369 --> 00:53:58,119
do something like hey we want to take

1056
00:53:54,309 --> 00:54:01,900
this asset if there's a new alignment

1057
00:53:58,119 --> 00:54:14,829
point array then we would copy it in you

1058
00:54:01,900 --> 00:54:18,039
know like if something like this guy

1059
00:54:14,829 --> 00:54:19,960
right so if there is one of these we

1060
00:54:18,039 --> 00:54:23,650
would want to copy it in although you

1061
00:54:19,960 --> 00:54:26,730
know I feel like we'd rather just do

1062
00:54:23,650 --> 00:54:26,730
that outside

1063
00:54:36,849 --> 00:54:46,730
hard to say um if you look at what's

1064
00:54:44,719 --> 00:54:49,279
going on here right so we come through

1065
00:54:46,730 --> 00:54:51,050
and we say alright we're parsing we look

1066
00:54:49,280 --> 00:54:52,760
and see if we've got a match assuming

1067
00:54:51,050 --> 00:54:56,030
that we do we go through and update the

1068
00:54:52,760 --> 00:54:57,080
metadata and so it would be like right

1069
00:54:56,030 --> 00:54:59,330
here that we would do it

1070
00:54:57,079 --> 00:55:00,739
since update asset metadata is already

1071
00:54:59,329 --> 00:55:07,190
looping through the grid it seemed

1072
00:55:00,739 --> 00:55:17,089
reasonable to do that's here but like I

1073
00:55:07,190 --> 00:55:22,010
said I'm not really sure passing this

1074
00:55:17,090 --> 00:55:25,250
would be somewhat of a pain but maybe

1075
00:55:22,010 --> 00:55:27,580
not that bad and so we could make one of

1076
00:55:25,250 --> 00:55:30,590
these where we just say alright look

1077
00:55:27,579 --> 00:55:31,460
pass in one of these and we're gonna

1078
00:55:30,590 --> 00:55:35,780
overwrite it

1079
00:55:31,460 --> 00:55:39,650
if do you pass this one right so it's

1080
00:55:35,780 --> 00:55:41,300
like yeah I don't know and then how

1081
00:55:39,650 --> 00:55:43,190
would you know whether yeah I just I

1082
00:55:41,300 --> 00:55:45,470
just don't like it I just don't like it

1083
00:55:43,190 --> 00:55:49,250
so I think what I'm gonna do there is

1084
00:55:45,469 --> 00:55:50,629
I'm just gonna say look let's let's put

1085
00:55:49,250 --> 00:55:56,389
put another one of these on the outside

1086
00:55:50,630 --> 00:55:58,190
and we'll just do it that way alright so

1087
00:55:56,389 --> 00:56:01,699
if we go to update the asset metadata

1088
00:55:58,190 --> 00:56:04,760
then I will copy this data back in so

1089
00:56:01,699 --> 00:56:09,439
I'll say alright you know here's assets

1090
00:56:04,760 --> 00:56:12,320
in question and each one of these will

1091
00:56:09,440 --> 00:56:19,000
get copied back so in here we'll say

1092
00:56:12,320 --> 00:56:25,700
that the align points for the bitmap get

1093
00:56:19,000 --> 00:56:28,460
romped over this only happens in the

1094
00:56:25,699 --> 00:56:34,579
case where we're not writing out the

1095
00:56:28,460 --> 00:56:36,800
file and I think that's all we want

1096
00:56:34,579 --> 00:56:39,199
right so in the case where we're not

1097
00:56:36,800 --> 00:56:40,700
writing out the file then we would do

1098
00:56:39,199 --> 00:56:44,509
this in the case where we are writing

1099
00:56:40,699 --> 00:56:50,989
out the file then we

1100
00:56:44,510 --> 00:56:52,760
wouldn't now it's a little bit hairy

1101
00:56:50,989 --> 00:56:55,789
the reason that it's a little bit hairy

1102
00:56:52,760 --> 00:57:02,960
is just because if we're writing out the

1103
00:56:55,789 --> 00:57:05,449
file and you know you hadn't seen this

1104
00:57:02,960 --> 00:57:06,920
block didn't exist anywhere like in

1105
00:57:05,449 --> 00:57:09,789
other words this wasn't something that

1106
00:57:06,920 --> 00:57:11,960
was ever an asset that had existed prior

1107
00:57:09,789 --> 00:57:14,269
you know I don't know that you want to

1108
00:57:11,960 --> 00:57:17,750
erase aligned points that were in there

1109
00:57:14,269 --> 00:57:20,750
when you do the save so we do have a

1110
00:57:17,750 --> 00:57:24,769
little bit of a of a what is save and

1111
00:57:20,750 --> 00:57:26,539
what does load mean problem because on

1112
00:57:24,769 --> 00:57:28,130
the one hand we could say that if you

1113
00:57:26,539 --> 00:57:29,090
hit save it just over writes everything

1114
00:57:28,130 --> 00:57:30,920
right

1115
00:57:29,090 --> 00:57:34,579
meaning if if there's a block that

1116
00:57:30,920 --> 00:57:39,139
doesn't have a mash it like eliminates

1117
00:57:34,579 --> 00:57:40,849
it right and I don't know you know like

1118
00:57:39,139 --> 00:57:42,920
that that's kind of going down a whole

1119
00:57:40,849 --> 00:57:45,769
nother route that would be like saying

1120
00:57:42,920 --> 00:57:47,690
in this parse top of a block in here

1121
00:57:45,769 --> 00:57:53,690
where we do get or create asset source

1122
00:57:47,690 --> 00:57:57,460
file we wouldn't actually do a create we

1123
00:57:53,690 --> 00:58:00,590
just if we were writing it out

1124
00:57:57,460 --> 00:58:03,800
exclusively we would just check and say

1125
00:58:00,590 --> 00:58:06,620
does this exist if it doesn't exist blow

1126
00:58:03,800 --> 00:58:14,120
it away right like meaning we'd skip it

1127
00:58:06,619 --> 00:58:16,099
I don't know I'm just gonna leave this

1128
00:58:14,119 --> 00:58:18,710
for now because that sort of gets into a

1129
00:58:16,099 --> 00:58:21,230
whole nother level of what do we want

1130
00:58:18,710 --> 00:58:23,630
the editors stuff to do I don't really

1131
00:58:21,230 --> 00:58:25,369
care about I just only edit alignment

1132
00:58:23,630 --> 00:58:29,119
points so for names gonna say let's

1133
00:58:25,369 --> 00:58:32,150
ignore this and we and we really won't

1134
00:58:29,119 --> 00:58:34,039
talk about that but you can see why

1135
00:58:32,150 --> 00:58:35,869
there's like a bunch of things you could

1136
00:58:34,039 --> 00:58:39,559
start to think about and want to

1137
00:58:35,869 --> 00:58:41,960
potentially do as you kind of move

1138
00:58:39,559 --> 00:58:45,349
through that that space of what's

1139
00:58:41,960 --> 00:58:48,909
possible if that makes sense all right

1140
00:58:45,349 --> 00:58:53,119
so let's take a look at our errors now

1141
00:58:48,909 --> 00:58:54,409
this is what context assets that's why

1142
00:58:53,119 --> 00:59:08,210
that's wrong

1143
00:58:54,409 --> 00:59:15,109
it's nuts in there I'm not sure what the

1144
00:59:08,210 --> 00:59:17,570
types are of these I'm not talking about

1145
00:59:15,110 --> 00:59:28,809
basic category HHA asset that's what's

1146
00:59:17,570 --> 00:59:28,809
going and then asset is this HH a bitmap

1147
00:59:30,010 --> 00:59:38,450
yeah all right for out F we need to

1148
00:59:35,539 --> 00:59:43,610
actually pass the stream but after we do

1149
00:59:38,449 --> 00:59:52,099
that we should be fine memory is equal

1150
00:59:43,610 --> 00:59:54,940
needs the size obviously this needs the

1151
00:59:52,099 --> 00:59:54,940
context

1152
01:00:04,250 --> 01:00:23,358
this is same thing same thing and there

1153
01:00:25,760 --> 01:00:32,369
alright so a lot of stuff going on there

1154
01:00:30,150 --> 01:00:36,660
but I think that's basically what we

1155
01:00:32,369 --> 01:00:42,440
want and so we can look now and see to

1156
01:00:36,659 --> 01:00:42,440
what extent we're in the ballpark right

1157
01:00:46,608 --> 01:00:58,469
again just looking through it now that

1158
01:00:51,119 --> 01:01:00,240
we've done all this I do think it's

1159
01:00:58,469 --> 01:01:02,339
somewhat costly to do it the way we

1160
01:01:00,239 --> 01:01:04,489
decided to do it it's kind of cool

1161
01:01:02,340 --> 01:01:07,230
I'm glad I've done it once meaning

1162
01:01:04,489 --> 01:01:10,169
preserving the actual way that the human

1163
01:01:07,230 --> 01:01:12,179
wrote the hht rather than romping over

1164
01:01:10,170 --> 01:01:14,490
it with whatever the computer would have

1165
01:01:12,179 --> 01:01:17,519
generated for that particular in memory

1166
01:01:14,489 --> 01:01:20,069
asset I'm glad I've done it once it's

1167
01:01:17,519 --> 01:01:21,358
kind of interesting there are some costs

1168
01:01:20,070 --> 01:01:25,109
to it I feel like it's more fragile

1169
01:01:21,358 --> 01:01:26,639
because you know III don't think because

1170
01:01:25,108 --> 01:01:29,309
text files allow you to put things in

1171
01:01:26,639 --> 01:01:32,759
any order it's hard to make something

1172
01:01:29,309 --> 01:01:33,838
that does a clean diff style thing where

1173
01:01:32,760 --> 01:01:35,400
you just look at two things to memory

1174
01:01:33,838 --> 01:01:37,500
are they different if so write the whole

1175
01:01:35,400 --> 01:01:39,300
thing out right that doesn't really work

1176
01:01:37,500 --> 01:01:42,929
anymore cuz you got to do it like line

1177
01:01:39,300 --> 01:01:47,130
by line like did this line differ and if

1178
01:01:42,929 --> 01:01:50,848
so like save it or whatever right now I

1179
01:01:47,130 --> 01:01:53,880
could imagine a way of doing this better

1180
01:01:50,849 --> 01:01:55,920
and that would be that for every line

1181
01:01:53,880 --> 01:01:58,050
what you would do is you'd essentially

1182
01:01:55,920 --> 01:02:02,369
create a structure that was like here is

1183
01:01:58,050 --> 01:02:06,720
the version of this thing that just

1184
01:02:02,369 --> 01:02:10,108
stores a string for every field instead

1185
01:02:06,719 --> 01:02:12,989
of the actual field right and then when

1186
01:02:10,108 --> 01:02:13,590
you do your data diff anything that's

1187
01:02:12,989 --> 01:02:16,319
differ

1188
01:02:13,590 --> 01:02:19,350
you update the string and then you

1189
01:02:16,320 --> 01:02:21,300
rewrite the strings the actual strings

1190
01:02:19,349 --> 01:02:25,289
so that you've you like loaded all in a

1191
01:02:21,300 --> 01:02:27,090
strings you diff the data and every date

1192
01:02:25,289 --> 01:02:28,860
of the changes you change the string

1193
01:02:27,090 --> 01:02:31,880
corresponds the data then you write it

1194
01:02:28,860 --> 01:02:37,170
all out would probably be like the wor

1195
01:02:31,880 --> 01:02:38,760
systemic way to eventually do it um but

1196
01:02:37,170 --> 01:02:40,920
I think you kind of get into a systemic

1197
01:02:38,760 --> 01:02:42,630
situation there where you're like unless

1198
01:02:40,920 --> 01:02:44,220
you're doing like a whole system this

1199
01:02:42,630 --> 01:02:46,650
way with tons of different types of

1200
01:02:44,219 --> 01:02:48,719
fields and everything it's probably not

1201
01:02:46,650 --> 01:02:50,639
worth the time to really build that out

1202
01:02:48,719 --> 01:02:53,549
but you could see a generic version of

1203
01:02:50,639 --> 01:02:54,750
this that you could do and it would be

1204
01:02:53,550 --> 01:02:58,470
interesting like I think that would be

1205
01:02:54,750 --> 01:03:00,599
an interesting thing to make so you know

1206
01:02:58,469 --> 01:03:01,980
I like I said I hadn't ever really

1207
01:03:00,599 --> 01:03:04,710
looked at that before but it's

1208
01:03:01,980 --> 01:03:07,170
interesting so I'm gonna go ahead and

1209
01:03:04,710 --> 01:03:10,740
say look let's start playing around with

1210
01:03:07,170 --> 01:03:16,680
this inside our tags files where we've

1211
01:03:10,739 --> 01:03:18,389
got like base game hht what I want to do

1212
01:03:16,679 --> 01:03:29,969
now is I'm going to create a backup of

1213
01:03:18,389 --> 01:03:31,859
it and the other thing that I need to do

1214
01:03:29,969 --> 01:03:34,049
now is actually have a way that we can

1215
01:03:31,860 --> 01:03:35,970
see what our output is because if I

1216
01:03:34,050 --> 01:03:38,460
remember correctly we never actually

1217
01:03:35,969 --> 01:03:41,039
implemented that function so in the wind

1218
01:03:38,460 --> 01:03:44,190
through to file layer we've got this

1219
01:03:41,039 --> 01:03:49,230
sort of replace file contents and it

1220
01:03:44,190 --> 01:03:51,690
just doesn't do anything right and so we

1221
01:03:49,230 --> 01:03:54,360
need some way of doing this atomic

1222
01:03:51,690 --> 01:03:55,829
replace a way of actually writing

1223
01:03:54,360 --> 01:03:58,070
something out and then replacing the one

1224
01:03:55,829 --> 01:03:58,069
we have

1225
01:04:01,159 --> 01:04:10,818
so I need to open a file write the data

1226
01:04:05,329 --> 01:04:15,048
to the file close the file verify that

1227
01:04:10,818 --> 01:04:17,358
that was fine and then swap the two

1228
01:04:15,048 --> 01:04:23,659
files so that the new one and the old

1229
01:04:17,358 --> 01:04:27,650
one have like traded places you know I'm

1230
01:04:23,659 --> 01:04:33,528
saying so that's kind of what I want to

1231
01:04:27,650 --> 01:04:38,230
do here and the problem with this is

1232
01:04:33,528 --> 01:04:38,230
that a lot of times you can't really

1233
01:04:38,528 --> 01:04:44,889
like I don't know that Windows ever

1234
01:04:41,768 --> 01:04:47,449
created what you actually want for this

1235
01:04:44,889 --> 01:04:49,009
so what you want to do like the way you

1236
01:04:47,449 --> 01:04:51,919
would normally do this in an operating

1237
01:04:49,009 --> 01:04:55,519
system is you have the idea of an

1238
01:04:51,920 --> 01:04:58,940
unnamed file right which UNIX has like I

1239
01:04:55,518 --> 01:05:01,508
nodes do not I I nodes don't have to

1240
01:04:58,940 --> 01:05:06,889
have a mount point they can just exist

1241
01:05:01,509 --> 01:05:08,719
right so if you're working on a file

1242
01:05:06,889 --> 01:05:12,018
system that has the concept of an

1243
01:05:08,719 --> 01:05:15,558
unnamed file then what you do is on the

1244
01:05:12,018 --> 01:05:20,919
drive that you are trying to place this

1245
01:05:15,559 --> 01:05:23,798
thing you say give me an unnamed file

1246
01:05:20,920 --> 01:05:28,190
here's all the data write it all out

1247
01:05:23,798 --> 01:05:33,759
finish did that work if all of it worked

1248
01:05:28,190 --> 01:05:38,028
then swap it with this other files name

1249
01:05:33,759 --> 01:05:39,798
or if it didn't work just forget that I

1250
01:05:38,028 --> 01:05:46,639
know it ever existed don't link it in

1251
01:05:39,798 --> 01:05:50,170
and reclaim this free space right that's

1252
01:05:46,639 --> 01:05:52,518
how atomic replace is supposed to work

1253
01:05:50,170 --> 01:05:55,909
unfortunately Windows as far as I know

1254
01:05:52,518 --> 01:05:59,750
doesn't have a way to do it and there

1255
01:05:55,909 --> 01:06:03,139
are some issues related to how it does

1256
01:05:59,750 --> 01:06:05,739
work on Windows I'll try to sketch it

1257
01:06:03,139 --> 01:06:05,739
out for you now

1258
01:06:09,000 --> 01:06:14,400
we'll kind of jump in here and I'll show

1259
01:06:12,099 --> 01:06:19,000
you what I mean

1260
01:06:14,400 --> 01:06:21,010
so what we want to do now is we want to

1261
01:06:19,000 --> 01:06:25,989
take advantage of the crappy version of

1262
01:06:21,010 --> 01:06:27,460
this the crappy version of this is since

1263
01:06:25,989 --> 01:06:27,799
you have to have all the files have a

1264
01:06:27,460 --> 01:06:28,929
name

1265
01:06:27,800 --> 01:06:31,660
[Music]

1266
01:06:28,929 --> 01:06:36,309
give me a temporary file name that I can

1267
01:06:31,659 --> 01:06:38,159
use so that at least I know I'm not over

1268
01:06:36,309 --> 01:06:41,469
writing a file it already exists and

1269
01:06:38,159 --> 01:06:45,098
then when I'm done I'll rename it you

1270
01:06:41,469 --> 01:06:48,309
know in again no real reason for this

1271
01:06:45,099 --> 01:06:53,588
file probably almost ever to like exist

1272
01:06:48,309 --> 01:06:56,049
at all there are some times when you

1273
01:06:53,588 --> 01:06:57,820
actually want this which is give me a

1274
01:06:56,050 --> 01:06:59,200
name that doesn't exist somewhere but

1275
01:06:57,820 --> 01:07:02,710
most of the time you don't actually want

1276
01:06:59,199 --> 01:07:08,858
that you want to do something different

1277
01:07:02,710 --> 01:07:11,320
than that right but oh well so this is

1278
01:07:08,858 --> 01:07:13,900
what we would like to do now is be able

1279
01:07:11,320 --> 01:07:18,760
to do the atomic replace here and the

1280
01:07:13,900 --> 01:07:21,670
atomic replace there's a couple

1281
01:07:18,760 --> 01:07:23,650
different ways we can do this right but

1282
01:07:21,670 --> 01:07:25,570
the very the very first thing we want to

1283
01:07:23,650 --> 01:07:28,660
do is just call this so that we can have

1284
01:07:25,570 --> 01:07:33,250
a temporary file name that suits the

1285
01:07:28,659 --> 01:07:34,179
purpose that we care about right so what

1286
01:07:33,250 --> 01:07:36,420
I'm going to do is I'm going to call

1287
01:07:34,179 --> 01:07:36,419
this

1288
01:07:43,349 --> 01:07:48,110
and what you can see here is there's

1289
01:07:44,909 --> 01:07:53,129
some really dumb stuff involved right

1290
01:07:48,110 --> 01:07:55,740
but anyway this you unique thing here

1291
01:07:53,130 --> 01:07:59,250
makes like no sense for what you think

1292
01:07:55,739 --> 01:08:01,439
about what the API is doing if you

1293
01:07:59,250 --> 01:08:03,000
unique is zero get tip file name creates

1294
01:08:01,440 --> 01:08:04,470
an empty file and closes it if you

1295
01:08:03,000 --> 01:08:06,300
unique is not zero you must create the

1296
01:08:04,469 --> 01:08:08,309
file yourself right

1297
01:08:06,300 --> 01:08:11,430
which doesn't make a whole lot of sense

1298
01:08:08,309 --> 01:08:13,920
but anyway we want it to do that we want

1299
01:08:11,429 --> 01:08:16,229
to have it create found close it so it's

1300
01:08:13,920 --> 01:08:18,239
zero and again just to underscore how

1301
01:08:16,229 --> 01:08:20,608
bad this API is what you really want is

1302
01:08:18,239 --> 01:08:22,889
you just want give me the file so you

1303
01:08:20,609 --> 01:08:25,980
want it to actually return you a handle

1304
01:08:22,890 --> 01:08:27,780
right but again I don't know if they

1305
01:08:25,979 --> 01:08:29,549
ever added that they may have added it

1306
01:08:27,779 --> 01:08:33,420
finally at some point but I don't think

1307
01:08:29,550 --> 01:08:36,150
they did I'll scan briefly to see if

1308
01:08:33,420 --> 01:08:43,588
they did you didn't there didn't used to

1309
01:08:36,149 --> 01:08:45,569
be one yeah I don't see it so anyway

1310
01:08:43,588 --> 01:08:46,949
we're gonna pass a zero for that but you

1311
01:08:45,569 --> 01:08:49,559
know again that's sort of a separate

1312
01:08:46,949 --> 01:08:51,630
thing the path name is the directory

1313
01:08:49,560 --> 01:08:53,190
that we want so we need a way of getting

1314
01:08:51,630 --> 01:08:56,819
the directory out of this so we're going

1315
01:08:53,189 --> 01:08:59,029
to have to do that part right so we need

1316
01:08:56,819 --> 01:09:03,920
the dur name and then the prefix string

1317
01:08:59,029 --> 01:09:06,960
is the part that we are going to use for

1318
01:09:03,920 --> 01:09:09,838
sort of making it clear that it was ours

1319
01:09:06,960 --> 01:09:13,260
so we'll just use like handmade here oh

1320
01:09:09,838 --> 01:09:16,739
and this is going to be like some kind

1321
01:09:13,260 --> 01:09:19,890
of a file for like a temporary file temp

1322
01:09:16,739 --> 01:09:23,579
would be good but we already have the

1323
01:09:19,890 --> 01:09:27,230
age of T as a tag file so we need some

1324
01:09:23,579 --> 01:09:30,059
way of marking this as a temporary file

1325
01:09:27,229 --> 01:09:32,338
so I'm just gonna say like it's HH

1326
01:09:30,060 --> 01:09:33,930
underscore for now like it's just a

1327
01:09:32,338 --> 01:09:37,199
handmade 0 file and there's nothing else

1328
01:09:33,930 --> 01:09:41,010
on there so anyway we need that prefixed

1329
01:09:37,199 --> 01:09:44,849
string this has got to be a wide string

1330
01:09:41,010 --> 01:09:46,619
because it's gonna be calling this the

1331
01:09:44,850 --> 01:09:48,088
the W version it's what I'd actually

1332
01:09:46,619 --> 01:09:50,358
want fact I probably should have clicked

1333
01:09:48,088 --> 01:09:50,359
on the Wi-Fi

1334
01:09:54,369 --> 01:10:01,099
like so so these are both gonna be wide

1335
01:09:58,100 --> 01:10:02,420
strings the unique file number thing is

1336
01:10:01,100 --> 01:10:04,940
just going to be zero because we want it

1337
01:10:02,420 --> 01:10:06,908
to figure that out itself and then the

1338
01:10:04,939 --> 01:10:09,589
temp file name is actually their return

1339
01:10:06,908 --> 01:10:14,448
they asked for it to be max path

1340
01:10:09,590 --> 01:10:16,719
characters which again is just dumb

1341
01:10:14,448 --> 01:10:19,099
because that's not the largest it can be

1342
01:10:16,719 --> 01:10:22,399
and you know what can you do you know

1343
01:10:19,100 --> 01:10:24,889
that Windows does what it does so you

1344
01:10:22,399 --> 01:10:26,839
know it should really be based on more

1345
01:10:24,889 --> 01:10:28,520
information than that because you know

1346
01:10:26,840 --> 01:10:30,770
what the path name and prefix string are

1347
01:10:28,520 --> 01:10:30,980
so we actually know how long that would

1348
01:10:30,770 --> 01:10:33,380
be

1349
01:10:30,979 --> 01:10:35,119
so what Windows should probably do is

1350
01:10:33,380 --> 01:10:37,460
tell you how much it needs to generate

1351
01:10:35,119 --> 01:10:40,069
the max path or something there I don't

1352
01:10:37,460 --> 01:10:41,658
know better still would be it just

1353
01:10:40,069 --> 01:10:44,840
allocates it gives it back to you and

1354
01:10:41,658 --> 01:10:49,039
you free it but take some one half dozen

1355
01:10:44,840 --> 01:10:52,579
together anyway so VAW clarity here

1356
01:10:49,039 --> 01:10:53,840
which is going to be our filename and

1357
01:10:52,579 --> 01:10:57,559
they asked for math class plus a

1358
01:10:53,840 --> 01:11:00,730
millimeter which is that so we'll give

1359
01:10:57,560 --> 01:11:04,909
them that and then we just need to know

1360
01:11:00,729 --> 01:11:06,379
when we actually call this here we just

1361
01:11:04,908 --> 01:11:08,000
need to know what the directory name is

1362
01:11:06,380 --> 01:11:10,609
and the directory name is what's going

1363
01:11:08,000 --> 01:11:12,948
to come out of the information that we

1364
01:11:10,609 --> 01:11:17,299
were given so we'll do that and we'll

1365
01:11:12,948 --> 01:11:18,919
use the UN that's returned which is just

1366
01:11:17,300 --> 01:11:20,960
to tell us what's going on here where's

1367
01:11:18,920 --> 01:11:22,310
the return route there it is there's

1368
01:11:20,960 --> 01:11:23,989
unique numerical file if the unique

1369
01:11:22,310 --> 01:11:25,070
thread is nonzero the return faster so

1370
01:11:23,988 --> 01:11:31,000
have the same number of function fails

1371
01:11:25,069 --> 01:11:34,369
it's zero so we'll just say okay let's

1372
01:11:31,000 --> 01:11:36,710
if on that assuming this returned

1373
01:11:34,369 --> 01:11:38,840
something then we're in good shape we

1374
01:11:36,710 --> 01:11:42,340
should have the file name now and so

1375
01:11:38,840 --> 01:11:45,949
then what I can do is call create file W

1376
01:11:42,340 --> 01:11:49,239
then I can call write file and then I

1377
01:11:45,948 --> 01:11:52,129
can click call closed handle right and

1378
01:11:49,238 --> 01:11:54,468
we can write out this file and if all of

1379
01:11:52,130 --> 01:12:01,130
that succeeds and nothing goes horribly

1380
01:11:54,469 --> 01:12:04,929
wrong then after that's done I should be

1381
01:12:01,130 --> 01:12:04,929
able to swap the files

1382
01:12:06,609 --> 01:12:12,648
right so in order to swap the files

1383
01:12:11,269 --> 01:12:15,168
we're gonna need to be able to rename

1384
01:12:12,649 --> 01:12:16,909
things in order to rename things we need

1385
01:12:15,168 --> 01:12:21,288
to call move file it's not called rename

1386
01:12:16,908 --> 01:12:26,719
in Windows I don't you know just don't

1387
01:12:21,288 --> 01:12:28,938
ask me why it just it's called move so

1388
01:12:26,719 --> 01:12:31,429
the move file function I don't know if

1389
01:12:28,939 --> 01:12:33,260
we need the extended version of the move

1390
01:12:31,429 --> 01:12:46,729
file function we might let's look at the

1391
01:12:33,260 --> 01:12:49,039
flags so we do need replace existing but

1392
01:12:46,729 --> 01:12:51,800
that's about it so that's all we would

1393
01:12:49,038 --> 01:12:53,809
do there so we're just gonna say like a

1394
01:12:51,800 --> 01:12:56,719
move file at that point this is an if

1395
01:12:53,809 --> 01:12:58,519
meaning if everything succeeds then we

1396
01:12:56,719 --> 01:13:00,380
want to do a move file with replace

1397
01:12:58,519 --> 01:13:06,530
existing and again this is pretty easy

1398
01:13:00,380 --> 01:13:15,979
it's just the existing file name and the

1399
01:13:06,529 --> 01:13:19,248
new file name right I probably shouldn't

1400
01:13:15,979 --> 01:13:20,719
name it this way right so we've got a

1401
01:13:19,248 --> 01:13:22,938
file name that we're gonna overwrite

1402
01:13:20,719 --> 01:13:25,939
with temporary file name so let's

1403
01:13:22,939 --> 01:13:28,489
actually make those explicit we generate

1404
01:13:25,939 --> 01:13:41,149
the temporary file name we try to create

1405
01:13:28,488 --> 01:13:45,589
that file if we do it's going to look

1406
01:13:41,149 --> 01:13:48,110
like this so we try to do the create we

1407
01:13:45,590 --> 01:13:49,729
then try to do the right and the right

1408
01:13:48,109 --> 01:13:57,848
is going to determine whether we can do

1409
01:13:49,729 --> 01:14:00,530
this so we've essentially got like that

1410
01:13:57,849 --> 01:14:02,510
so that's roughly what we're trying to

1411
01:14:00,529 --> 01:14:03,948
do here and since atomic replace file

1412
01:14:02,510 --> 01:14:06,708
contents is something that can easily

1413
01:14:03,948 --> 01:14:09,498
fail like anything that touches the

1414
01:14:06,708 --> 01:14:11,118
drive like that is something that could

1415
01:14:09,498 --> 01:14:12,978
just fail the write could fail the

1416
01:14:11,118 --> 01:14:15,368
creation could fail the getting the temp

1417
01:14:12,979 --> 01:14:18,050
file could fail you know we have no idea

1418
01:14:15,368 --> 01:14:19,698
so when we do atomic

1419
01:14:18,050 --> 01:14:22,070
place file contents like that it really

1420
01:14:19,698 --> 01:14:24,678
should return here some kind of a

1421
01:14:22,069 --> 01:14:27,948
boolean value that lets it know whether

1422
01:14:24,679 --> 01:14:29,989
the right succeeded or not because

1423
01:14:27,948 --> 01:14:33,078
there's no other it's not like the other

1424
01:14:29,988 --> 01:14:34,939
one where we have existing handles so it

1425
01:14:33,078 --> 01:14:36,738
can just set the flag on the handle like

1426
01:14:34,939 --> 01:14:38,719
if you remember the way we did that

1427
01:14:36,738 --> 01:14:41,988
before it was just saying look there's

1428
01:14:38,719 --> 01:14:43,489
an error flag on the handle we don't

1429
01:14:41,988 --> 01:14:45,198
have the ability do that because there

1430
01:14:43,488 --> 01:14:48,738
is no handle you're just doing one

1431
01:14:45,198 --> 01:14:51,769
atomic replace and then you're done and

1432
01:14:48,738 --> 01:14:53,689
so you know if we do it that way then

1433
01:14:51,770 --> 01:14:56,179
what we've got is that b32 there that

1434
01:14:53,689 --> 01:14:59,348
should come back that's the status of

1435
01:14:56,179 --> 01:15:03,050
this thing right so it's like okay

1436
01:14:59,349 --> 01:15:05,270
there's a result here the result is

1437
01:15:03,050 --> 01:15:07,039
gonna get set depending on whether move

1438
01:15:05,270 --> 01:15:09,619
file succeeds or fails which I believe

1439
01:15:07,039 --> 01:15:13,729
is a return value of just a bool right

1440
01:15:09,618 --> 01:15:21,738
either it works or it doesn't and so

1441
01:15:13,729 --> 01:15:23,629
it's true with it's usually yeah so in

1442
01:15:21,738 --> 01:15:25,848
the case where we actually get move file

1443
01:15:23,630 --> 01:15:27,319
to work then we want to return true that

1444
01:15:25,849 --> 01:15:29,779
we were able to replace a confidence

1445
01:15:27,319 --> 01:15:33,590
it's the if anything else fails we'll

1446
01:15:29,779 --> 01:15:36,500
never get there and they were fine so

1447
01:15:33,590 --> 01:15:46,880
what we need to do here is say actually

1448
01:15:36,500 --> 01:15:48,828
I'm going to do this right so we're

1449
01:15:46,880 --> 01:15:50,679
gonna try to create the file assuming it

1450
01:15:48,828 --> 01:15:53,179
worked we're gonna try to write the file

1451
01:15:50,679 --> 01:15:54,349
and then we're gonna close it no matter

1452
01:15:53,179 --> 01:15:57,230
what so you don't want to leave the file

1453
01:15:54,349 --> 01:15:59,750
handle sitting around and then we want

1454
01:15:57,229 --> 01:16:01,908
to check did it actually successfully

1455
01:15:59,750 --> 01:16:04,130
write if it did successfully write all

1456
01:16:01,908 --> 01:16:06,259
the data according to Windows then we

1457
01:16:04,130 --> 01:16:12,349
will do the move and be done with it

1458
01:16:06,260 --> 01:16:16,070
right all right so let's take a look if

1459
01:16:12,349 --> 01:16:19,069
we want to see how to create this

1460
01:16:16,069 --> 01:16:21,469
particular file so let's do the right

1461
01:16:19,069 --> 01:16:23,058
file first since that's easier so the

1462
01:16:21,469 --> 01:16:26,000
right file function is pretty basic

1463
01:16:23,059 --> 01:16:30,929
it just needs the file it needs the

1464
01:16:26,000 --> 01:16:36,288
buffer which is this

1465
01:16:30,929 --> 01:16:40,979
it needs the size and unfortunately well

1466
01:16:36,288 --> 01:16:44,728
this is a little bit nasty it doesn't

1467
01:16:40,979 --> 01:16:46,019
actually have the ability to do 64-bit

1468
01:16:44,729 --> 01:16:47,760
writes so we'll practice hurt that we

1469
01:16:46,019 --> 01:16:49,590
already assert that in other places and

1470
01:16:47,760 --> 01:16:52,469
we will never be doing a 64-bit right

1471
01:16:49,590 --> 01:16:58,639
but it's just kind of a dumb aspect of

1472
01:16:52,469 --> 01:17:00,748
it right so yeah so let's take a look at

1473
01:16:58,639 --> 01:17:02,190
that one a point of the variable it

1474
01:17:00,748 --> 01:17:03,748
receives number bytes written when you

1475
01:17:02,189 --> 01:17:05,488
sing synchronous H file parameter right

1476
01:17:03,748 --> 01:17:06,840
fell sets this value zero before doing

1477
01:17:05,488 --> 01:17:14,728
any work or error checking

1478
01:17:06,840 --> 01:17:17,328
you know overlap doesn't do 64-bit

1479
01:17:14,729 --> 01:17:17,329
writes does it

1480
01:17:23,738 --> 01:17:34,069
well um so anyway we can't do an actual

1481
01:17:28,939 --> 01:17:35,689
64-bit right here and in this case we're

1482
01:17:34,069 --> 01:17:36,979
gonna have to ask for the bytes written

1483
01:17:35,689 --> 01:17:40,729
because it looks like they demand that

1484
01:17:36,979 --> 01:17:42,019
which is not great but oh well oops and

1485
01:17:40,729 --> 01:17:47,209
out nope don't ask me why this is

1486
01:17:42,020 --> 01:17:54,710
happening so we need to actually pass

1487
01:17:47,210 --> 01:17:56,750
that and what we could do is we could

1488
01:17:54,710 --> 01:17:58,760
make this a little bit Squinkie err we

1489
01:17:56,750 --> 01:18:00,319
could say all right well you know here's

1490
01:17:58,760 --> 01:18:01,760
the bytes written and maybe we double

1491
01:18:00,319 --> 01:18:03,649
check this just in case windows can

1492
01:18:01,760 --> 01:18:05,989
return true in this case and actually

1493
01:18:03,649 --> 01:18:07,698
return true that it wrote some bytes but

1494
01:18:05,988 --> 01:18:09,649
not all the bytes for example so what we

1495
01:18:07,698 --> 01:18:13,399
could do is say all right let's do this

1496
01:18:09,649 --> 01:18:15,589
and then we'll say well right ok we'll

1497
01:18:13,399 --> 01:18:18,279
assume is false and then we'll set right

1498
01:18:15,590 --> 01:18:22,489
ok equal two bytes written equal size

1499
01:18:18,279 --> 01:18:24,619
right what's kind of fun about that is

1500
01:18:22,488 --> 01:18:26,809
if we do it this way that actually means

1501
01:18:24,619 --> 01:18:28,609
that now we if you pass in an actual

1502
01:18:26,810 --> 01:18:31,340
64-bit number this function would fail

1503
01:18:28,609 --> 01:18:39,109
seems good because then at least the

1504
01:18:31,340 --> 01:18:46,219
person knows it didn't succeed right and

1505
01:18:39,109 --> 01:18:47,929
we could also put this in here right and

1506
01:18:46,219 --> 01:18:50,750
so that way this you know if this was

1507
01:18:47,930 --> 01:18:53,510
actually something larger than 32 bits

1508
01:18:50,750 --> 01:18:55,430
and the bytes written comes back as

1509
01:18:53,510 --> 01:18:56,840
however much it comes back it would go

1510
01:18:55,430 --> 01:18:58,730
like hey you didn't write the whole file

1511
01:18:56,840 --> 01:19:01,190
so don't you know don't do the time

1512
01:18:58,729 --> 01:19:03,709
replace good prevents data loss seems

1513
01:19:01,189 --> 01:19:05,899
reasonable so that's all good and we're

1514
01:19:03,710 --> 01:19:09,698
just down to create file W which again

1515
01:19:05,899 --> 01:19:14,389
is also easy I will go ahead and coops

1516
01:19:09,698 --> 01:19:16,698
grab that out and here it is so now

1517
01:19:14,390 --> 01:19:18,289
we've got the file name we know that

1518
01:19:16,698 --> 01:19:22,369
windows gave us the file name so that's

1519
01:19:18,289 --> 01:19:24,619
easy the divide the desired access is

1520
01:19:22,369 --> 01:19:27,590
just going to be generic right there is

1521
01:19:24,619 --> 01:19:29,750
no reading of this file so we don't need

1522
01:19:27,590 --> 01:19:33,590
that access not that it would be a

1523
01:19:29,750 --> 01:19:35,238
problem if we did but we don't we don't

1524
01:19:33,590 --> 01:19:36,828
want any sharing at all

1525
01:19:35,238 --> 01:19:40,098
there's nobody else should be accessed

1526
01:19:36,828 --> 01:19:43,128
this file for any reason in any way so

1527
01:19:40,099 --> 01:19:44,840
none of that stuff needs to be set the

1528
01:19:43,128 --> 01:19:47,118
security attributes in this case is

1529
01:19:44,840 --> 01:19:48,918
going to still be 0 we don't have any

1530
01:19:47,118 --> 01:19:52,969
circular t descriptor or anything like

1531
01:19:48,918 --> 01:19:55,788
that that we want to inherit we want to

1532
01:19:52,969 --> 01:19:59,510
create this file always and we want it

1533
01:19:55,788 --> 01:20:02,300
to be new right so what we'd want to do

1534
01:19:59,510 --> 01:20:03,769
is clear it and this what this does if

1535
01:20:02,300 --> 01:20:08,719
the photo phase is writable the function

1536
01:20:03,769 --> 01:20:13,039
over writes the file right and so we do

1537
01:20:08,719 --> 01:20:16,819
want that to occur so we want create

1538
01:20:13,038 --> 01:20:19,578
always technically I think open existing

1539
01:20:16,819 --> 01:20:21,738
would probably work because this

1540
01:20:19,578 --> 01:20:25,759
function is supposed to create the file

1541
01:20:21,738 --> 01:20:30,828
for us so I think open existing would

1542
01:20:25,760 --> 01:20:34,519
work here but you know oh well so anyway

1543
01:20:30,828 --> 01:20:37,188
we've got all of that set we then have

1544
01:20:34,519 --> 01:20:39,889
created Flags and attributes in template

1545
01:20:37,189 --> 01:20:41,510
file there isn't a template file so

1546
01:20:39,889 --> 01:20:44,389
we're just down to flags and attributes

1547
01:20:41,510 --> 01:20:45,469
and the flags and attributes I don't

1548
01:20:44,389 --> 01:20:51,368
know that there's anything in particular

1549
01:20:45,469 --> 01:20:51,368
that we need to set probably just normal

1550
01:20:53,288 --> 01:20:59,179
file I treat temporary might be

1551
01:20:56,328 --> 01:21:03,889
something we would set but I don't know

1552
01:20:59,179 --> 01:21:06,378
that we really care I don't think we

1553
01:21:03,889 --> 01:21:10,668
care so I'm just gonna set file

1554
01:21:06,378 --> 01:21:14,479
attribute normal for now and leave it at

1555
01:21:10,668 --> 01:21:17,569
that so we create the file write the

1556
01:21:14,479 --> 01:21:22,760
file and then we're done so really our

1557
01:21:17,569 --> 01:21:26,929
only sort of difficulty here is we need

1558
01:21:22,760 --> 01:21:29,539
to create some temporary buffer to store

1559
01:21:26,929 --> 01:21:33,168
the will not temporary buffer we need

1560
01:21:29,538 --> 01:21:36,708
that like parse the file name to extract

1561
01:21:33,168 --> 01:21:40,908
where the path part of the file would

1562
01:21:36,708 --> 01:21:43,248
actually occur so we're gonna have to

1563
01:21:40,908 --> 01:21:46,259
actually do that part and I believe

1564
01:21:43,248 --> 01:21:50,250
we've got a file name thing in

1565
01:21:46,260 --> 01:22:20,309
where we look for like fine last slash

1566
01:21:50,250 --> 01:22:24,599
or something thought we did maybe not so

1567
01:22:20,309 --> 01:22:28,739
I thought we've done this before and in

1568
01:22:24,599 --> 01:22:34,440
fact you can see it here but I guess

1569
01:22:28,738 --> 01:22:38,939
it's just called removed path well

1570
01:22:34,439 --> 01:22:41,428
that's fine so if we go back and look in

1571
01:22:38,939 --> 01:22:47,129
platform adage here

1572
01:22:41,429 --> 01:22:52,469
here's the platform file info for

1573
01:22:47,130 --> 01:22:54,300
replacing the contents I guess that I

1574
01:22:52,469 --> 01:22:57,359
think about it that means we have the

1575
01:22:54,300 --> 01:22:59,760
actual Unicode version of the filename

1576
01:22:57,359 --> 01:23:04,158
which is good so we should probably

1577
01:22:59,760 --> 01:23:09,750
preserve that which means that yeah like

1578
01:23:04,158 --> 01:23:12,569
you know in here where we do win32 Open

1579
01:23:09,750 --> 01:23:25,198
File this part here here is the existing

1580
01:23:12,569 --> 01:23:31,259
file that we're replacing so this is the

1581
01:23:25,198 --> 01:23:34,379
existing file name and so what we want

1582
01:23:31,260 --> 01:23:37,429
to do is process that to find the end of

1583
01:23:34,380 --> 01:23:37,429
the path and

1584
01:23:39,649 --> 01:23:46,138
so we need to scan that for the last

1585
01:23:43,309 --> 01:23:50,699
place where a slash would be and then

1586
01:23:46,139 --> 01:23:55,590
mean that becomes our directory name so

1587
01:23:50,698 --> 01:23:57,969
that seems fine but just looking at it

1588
01:23:55,590 --> 01:24:01,029
here

1589
01:23:57,970 --> 01:24:01,029
[Music]

1590
01:24:02,689 --> 01:24:10,159
let's think about this bring me back to

1591
01:24:06,418 --> 01:24:13,338
my temp file where's my temp that's move

1592
01:24:10,158 --> 01:24:13,338
there it is

1593
01:24:13,399 --> 01:24:18,709
so what do they actually want so

1594
01:24:21,229 --> 01:24:25,409
interestingly they don't even say

1595
01:24:23,878 --> 01:24:31,528
whether it should include the trailing

1596
01:24:25,408 --> 01:24:33,179
slash or not so that's interesting but

1597
01:24:31,529 --> 01:24:35,010
since this should have the entire path

1598
01:24:33,179 --> 01:24:37,498
in it already I should just be able to

1599
01:24:35,010 --> 01:24:40,679
scan for the last occurrence of a slash

1600
01:24:37,498 --> 01:24:50,158
and if there isn't one then then it's

1601
01:24:40,679 --> 01:24:52,649
just nothing right so should be able to

1602
01:24:50,158 --> 01:24:56,148
do this I shouldn't be able to walk this

1603
01:24:52,649 --> 01:24:56,149
entire structure

1604
01:25:04,579 --> 01:25:09,109
and since this is utf-16 it means we're

1605
01:25:06,800 --> 01:25:12,440
looking directly at the characters

1606
01:25:09,109 --> 01:25:22,279
themselves to see whether or not we have

1607
01:25:12,439 --> 01:25:28,039
a slash so what I would do here is say

1608
01:25:22,279 --> 01:25:30,590
okay if star scan equals this kind of

1609
01:25:28,039 --> 01:25:33,829
slash or that kind of slash will support

1610
01:25:30,590 --> 01:25:36,289
both no matter which kind of slash we

1611
01:25:33,829 --> 01:25:40,039
see we will assume that then that is the

1612
01:25:36,289 --> 01:25:43,519
last slash so we'll find the wherever

1613
01:25:40,039 --> 01:25:47,149
the last one is and then we will just

1614
01:25:43,520 --> 01:25:51,140
temporarily update this thing to use

1615
01:25:47,149 --> 01:25:55,339
that for the get temp file name which is

1616
01:25:51,140 --> 01:25:58,460
kind of Squinkie but we can do it right

1617
01:25:55,340 --> 01:26:07,850
so what we would do here is say hey

1618
01:25:58,460 --> 01:26:12,310
existing file name or rather the place

1619
01:26:07,850 --> 01:26:16,400
where the slash is we're gonna overwrite

1620
01:26:12,310 --> 01:26:17,810
with null and then and again this is why

1621
01:26:16,399 --> 01:26:20,269
I hate null terminators you're

1622
01:26:17,810 --> 01:26:22,970
constantly modifying strings for no

1623
01:26:20,270 --> 01:26:26,720
reason we could have just passed as the

1624
01:26:22,970 --> 01:26:29,110
length right if if windows took length

1625
01:26:26,720 --> 01:26:32,600
strings length strings are always better

1626
01:26:29,109 --> 01:26:38,769
there's like almost nowhere that you

1627
01:26:32,600 --> 01:26:38,770
don't want a length string but anyway

1628
01:26:41,739 --> 01:26:45,170
all right so we just can quickly do that

1629
01:26:44,149 --> 01:26:47,329
and that way we don't have to do any

1630
01:26:45,170 --> 01:26:49,789
copying or anything like that it's just

1631
01:26:47,329 --> 01:26:53,180
existing file name that gets us the temp

1632
01:26:49,789 --> 01:26:56,920
file name and that would just work right

1633
01:26:53,180 --> 01:26:59,750
so we can scan it find it swap it and go

1634
01:26:56,920 --> 01:27:01,100
but again it's just like really stupid

1635
01:26:59,750 --> 01:27:02,600
because if you use length strings you

1636
01:27:01,100 --> 01:27:04,130
never have to touch the strings to like

1637
01:27:02,600 --> 01:27:06,860
extract a pieces of them you just pass

1638
01:27:04,130 --> 01:27:08,810
the pieces it's much more efficient if

1639
01:27:06,859 --> 01:27:11,089
you use null Terminator 's either you

1640
01:27:08,810 --> 01:27:13,010
can't do it at all because poking in a

1641
01:27:11,090 --> 01:27:14,420
null would would be bad in that

1642
01:27:13,010 --> 01:27:16,789
particular case for some reason right

1643
01:27:14,420 --> 01:27:19,399
because multiple people need to use it

1644
01:27:16,789 --> 01:27:21,550
time or you're constantly doing like

1645
01:27:19,399 --> 01:27:24,559
poking and all UNPO kunal coconut right

1646
01:27:21,550 --> 01:27:25,670
and the only alternative is copying the

1647
01:27:24,560 --> 01:27:27,470
string everywhere so you're constantly

1648
01:27:25,670 --> 01:27:28,880
copying string is copying string is

1649
01:27:27,470 --> 01:27:31,400
copying string it's copying strings and

1650
01:27:28,880 --> 01:27:34,480
you never need to write you're just

1651
01:27:31,399 --> 01:27:38,929
you're really just proliferating a

1652
01:27:34,479 --> 01:27:40,579
tremendous amount of copying and or null

1653
01:27:38,930 --> 01:27:42,230
poking but usually more copying cuz a

1654
01:27:40,579 --> 01:27:44,269
lot of times you can't poke a null in

1655
01:27:42,229 --> 01:27:47,809
that's only like this is one of the few

1656
01:27:44,270 --> 01:27:49,430
times when that actually works and so

1657
01:27:47,810 --> 01:27:53,390
length strings just help it avoids all

1658
01:27:49,430 --> 01:27:58,960
of that right so you know it's it's it's

1659
01:27:53,390 --> 01:28:01,460
tricky to to see sometimes why mills are

1660
01:27:58,960 --> 01:28:08,840
bad way to do strings but they usually

1661
01:28:01,460 --> 01:28:13,340
are almost always okay so let's see

1662
01:28:08,840 --> 01:28:15,680
cannot convert argument 1 to LPC stir

1663
01:28:13,340 --> 01:28:20,360
that's because I put an A in there and I

1664
01:28:15,680 --> 01:28:25,970
meant a W so that's unsurprising that

1665
01:28:20,359 --> 01:28:30,829
that didn't work looks like that was all

1666
01:28:25,970 --> 01:28:34,780
we need now three arguments okay oh

1667
01:28:30,829 --> 01:28:38,840
right it's a move file XW that takes the

1668
01:28:34,779 --> 01:28:42,859
existing argument all right so now we

1669
01:28:38,840 --> 01:28:44,600
can try it and we can see what's up and

1670
01:28:42,859 --> 01:28:46,880
again now we just got to do a bunch of

1671
01:28:44,600 --> 01:28:48,110
testing find out what we screwed up I'm

1672
01:28:46,880 --> 01:28:51,710
gonna go ahead and put a breakpoint

1673
01:28:48,109 --> 01:28:53,569
there so that I can watch what's going

1674
01:28:51,710 --> 01:28:56,930
on oh it looks like we're still updating

1675
01:28:53,569 --> 01:28:59,750
it start up interesting so it looks like

1676
01:28:56,930 --> 01:29:02,590
we're getting a issue here what's this

1677
01:28:59,750 --> 01:29:02,590
what's

1678
01:29:11,579 --> 01:29:21,699
how are we getting the how are we

1679
01:29:18,369 --> 01:29:29,619
getting an error here so this is saying

1680
01:29:21,699 --> 01:29:42,179
we got an asset index back which we did

1681
01:29:29,619 --> 01:29:54,300
but that asset is not valid it's a type

1682
01:29:42,180 --> 01:29:54,300
1 asset which in our case is a bitmap oh

1683
01:30:00,090 --> 01:30:03,090
whoops

1684
01:30:03,810 --> 01:30:09,340
yeah maybe we shouldn't have two fields

1685
01:30:06,399 --> 01:30:11,259
name type so the asset has a type which

1686
01:30:09,340 --> 01:30:15,610
we're kind of using temporarily right

1687
01:30:11,260 --> 01:30:20,230
now as a patch for our tag system forgot

1688
01:30:15,609 --> 01:30:22,389
about that eventually that will probably

1689
01:30:20,229 --> 01:30:24,669
go away but it was in there as sort of a

1690
01:30:22,390 --> 01:30:27,300
stopgap measure and I completely forgot

1691
01:30:24,670 --> 01:30:30,640
that we had done that so that's not

1692
01:30:27,300 --> 01:30:32,170
that's not constructive that type field

1693
01:30:30,640 --> 01:30:35,829
has nothing to do with the one that we

1694
01:30:32,170 --> 01:30:40,180
were actually talking about so yeah that

1695
01:30:35,829 --> 01:30:45,819
was dumb so the assert here that we're

1696
01:30:40,180 --> 01:30:47,740
actually looking for oops report in this

1697
01:30:45,819 --> 01:30:49,059
case it's the HH a type that we're

1698
01:30:47,739 --> 01:30:51,699
talking about and that's really the only

1699
01:30:49,060 --> 01:30:54,160
type that the asset should have had at

1700
01:30:51,699 --> 01:30:55,989
all in the first place but again because

1701
01:30:54,159 --> 01:30:58,210
we're patching around the fact that we

1702
01:30:55,989 --> 01:31:01,719
haven't really finished up how we want

1703
01:30:58,210 --> 01:31:04,300
to do our tag searches I mean it's fine

1704
01:31:01,720 --> 01:31:07,289
it works but it's kind of crappy we are

1705
01:31:04,300 --> 01:31:12,100
just kind of using that tag that primary

1706
01:31:07,289 --> 01:31:14,140
category tag is something that we use in

1707
01:31:12,100 --> 01:31:17,770
a different way so yeah it's just kind

1708
01:31:14,140 --> 01:31:20,650
of it's just um but that's the way it is

1709
01:31:17,770 --> 01:31:23,250
for now we have to obey it so it looks

1710
01:31:20,649 --> 01:31:23,250
like this

1711
01:31:25,738 --> 01:31:32,558
alright let's try it again so the import

1712
01:31:29,229 --> 01:31:34,418
ran there and that looks like we've

1713
01:31:32,559 --> 01:31:36,878
still got some problems there because

1714
01:31:34,418 --> 01:31:40,599
we're not seeing this that wouldn't have

1715
01:31:36,878 --> 01:31:42,698
written the hht so it this is just a

1716
01:31:40,599 --> 01:31:45,159
straight-up import but it does look like

1717
01:31:42,698 --> 01:31:48,488
we're getting some align point weirdness

1718
01:31:45,158 --> 01:31:56,168
there potentially I'm not quite sure but

1719
01:31:48,488 --> 01:31:57,009
the fact that I don't see that fact I

1720
01:31:56,168 --> 01:32:01,898
don't see that there

1721
01:31:57,010 --> 01:32:06,849
makes me think that's the case now to be

1722
01:32:01,899 --> 01:32:21,369
honest that's actually correct

1723
01:32:06,849 --> 01:32:24,628
I guess because yeah the default is to

1724
01:32:21,368 --> 01:32:26,589
not have any points so actually that's

1725
01:32:24,628 --> 01:32:30,069
correct

1726
01:32:26,590 --> 01:32:37,479
where do we add that default alignment

1727
01:32:30,069 --> 01:32:38,918
point and why did we add it or when cuz

1728
01:32:37,479 --> 01:32:41,050
yeah now that I think about it that was

1729
01:32:38,918 --> 01:32:50,828
just something that I guess we were

1730
01:32:41,050 --> 01:32:51,939
adding during imports as an I don't I

1731
01:32:50,828 --> 01:32:54,728
don't even remember where we were adding

1732
01:32:51,939 --> 01:32:57,149
that do you folks remember we were

1733
01:32:54,729 --> 01:32:57,149
adding that

1734
01:33:01,019 --> 01:33:04,168
here it is

1735
01:33:08,619 --> 01:33:14,569
so you can see here we used to set this

1736
01:33:12,020 --> 01:33:24,140
default alignment point and we set this

1737
01:33:14,569 --> 01:33:30,219
default alignment point any time we went

1738
01:33:24,140 --> 01:33:33,619
to write an image out to the HHA and

1739
01:33:30,220 --> 01:33:36,310
that's totally wrong now look we don't

1740
01:33:33,619 --> 01:33:40,579
want that at all

1741
01:33:36,310 --> 01:33:42,500
I'm gonna look for any other yeah so

1742
01:33:40,579 --> 01:33:47,180
interesting enough I think what we

1743
01:33:42,500 --> 01:33:53,119
probably want to do I guess is when we

1744
01:33:47,180 --> 01:34:00,560
are loading in if we are doing an h HT

1745
01:33:53,119 --> 01:34:04,609
out meaning we're writing the thing then

1746
01:34:00,560 --> 01:34:07,510
if there isn't an asset we just want to

1747
01:34:04,609 --> 01:34:08,750
set a default alignment point probably

1748
01:34:07,510 --> 01:34:13,510
right

1749
01:34:08,750 --> 01:34:16,039
so because everyone needs a default

1750
01:34:13,510 --> 01:34:17,539
probably I mean we don't have to we

1751
01:34:16,039 --> 01:34:20,869
could force you to create one but that

1752
01:34:17,539 --> 01:34:22,850
seems kind of stupid so what I would

1753
01:34:20,869 --> 01:34:28,420
assume we would want to do here is say

1754
01:34:22,850 --> 01:34:28,420
all right when we are processing these

1755
01:34:32,560 --> 01:34:47,810
if we're loading them in like this then

1756
01:34:44,359 --> 01:34:51,319
if we have an asset without any

1757
01:34:47,810 --> 01:34:55,940
alignment points we insert the default

1758
01:34:51,319 --> 01:34:59,269
one there's a snafu here which is that

1759
01:34:55,939 --> 01:35:02,089
that means there is no way to delete the

1760
01:34:59,270 --> 01:35:05,740
alignment points entirely like if you

1761
01:35:02,090 --> 01:35:05,739
want someone who just doesn't have any

1762
01:35:05,829 --> 01:35:13,180
but I don't think that should really be

1763
01:35:08,119 --> 01:35:13,180
legal to be completely honest

1764
01:35:15,930 --> 01:35:21,100
so yeah I guess what I'd say here is if

1765
01:35:19,119 --> 01:35:23,710
we go through this entire thing and said

1766
01:35:21,100 --> 01:35:26,950
there's there were none right like there

1767
01:35:23,710 --> 01:35:55,210
just aren't any then we would maybe call

1768
01:35:26,949 --> 01:35:58,479
this right it's kind of crude hard to

1769
01:35:55,210 --> 01:36:01,090
say but I think maybe that's what we

1770
01:35:58,479 --> 01:36:04,959
want so we'll just do here like no

1771
01:36:01,090 --> 01:36:06,400
alignment points equals true and if

1772
01:36:04,960 --> 01:36:10,449
anywhere in here

1773
01:36:06,399 --> 01:36:14,379
there was one then we would say that's

1774
01:36:10,449 --> 01:36:16,659
fine so we'd say if there's anything in

1775
01:36:14,380 --> 01:36:18,010
any type field ever so that this thing

1776
01:36:16,659 --> 01:36:23,649
could be considered an alignment point

1777
01:36:18,010 --> 01:36:27,420
then it's fine right and when we do that

1778
01:36:23,649 --> 01:36:27,420
spin through it's just this

1779
01:36:39,439 --> 01:36:45,659
all right so let's see if that's a sane

1780
01:36:43,350 --> 01:36:47,670
way to do it and I don't know if it is

1781
01:36:45,659 --> 01:36:49,380
but you can see that that restores the

1782
01:36:47,670 --> 01:36:52,710
behavior properly so that now like

1783
01:36:49,380 --> 01:36:55,670
things have that default alignment point

1784
01:36:52,710 --> 01:36:58,710
so I'm gonna go ahead and just do a

1785
01:36:55,670 --> 01:37:03,859
basic right out now you know that I've

1786
01:36:58,710 --> 01:37:08,730
saved like I said I saved a backup here

1787
01:37:03,859 --> 01:37:12,569
of that file and what I want to do now

1788
01:37:08,729 --> 01:37:14,189
is I want to say let's just try

1789
01:37:12,569 --> 01:37:17,369
rewriting it without actually doing

1790
01:37:14,189 --> 01:37:20,069
anything at all so I'm going to do

1791
01:37:17,369 --> 01:37:23,550
import and save here and we're gonna

1792
01:37:20,069 --> 01:37:25,559
take a look at what happens so we're

1793
01:37:23,550 --> 01:37:28,710
gonna call atomic replace file contents

1794
01:37:25,560 --> 01:37:30,710
and if I step in I want to watch this

1795
01:37:28,710 --> 01:37:33,230
win32 code to see if it works at all

1796
01:37:30,710 --> 01:37:37,470
let's see what the existing file name is

1797
01:37:33,229 --> 01:37:40,309
it's tags intro cutscene that's correct

1798
01:37:37,470 --> 01:37:45,420
because the tags intro cutscene file

1799
01:37:40,310 --> 01:37:48,150
Jimmy the tags intro cutscene file

1800
01:37:45,420 --> 01:37:51,449
actually does have no alignment points

1801
01:37:48,149 --> 01:37:54,960
in it so those will get inserted now if

1802
01:37:51,449 --> 01:37:56,399
that makes sense which maybe we do or

1803
01:37:54,960 --> 01:38:04,319
don't want since we're gonna replace

1804
01:37:56,399 --> 01:38:11,219
this file I'll copy that one too just so

1805
01:38:04,319 --> 01:38:13,529
we've got it and I'm not sure how I feel

1806
01:38:11,220 --> 01:38:20,159
about that because if things only need

1807
01:38:13,529 --> 01:38:27,119
the default one do they really need to

1808
01:38:20,159 --> 01:38:30,689
get saved you know I'm not crazy about

1809
01:38:27,119 --> 01:38:39,420
that so here's a question can we do this

1810
01:38:30,689 --> 01:38:42,960
in some way where this default would

1811
01:38:39,420 --> 01:38:45,739
just happen automatically so that it's

1812
01:38:42,960 --> 01:38:45,739
what's assumed

1813
01:38:52,869 --> 01:39:01,789
like here's a question for you suppose I

1814
01:38:56,539 --> 01:39:07,369
was to get rid of this can we just call

1815
01:39:01,789 --> 01:39:09,380
this on the initial setup so we here we

1816
01:39:07,369 --> 01:39:12,649
would say look if we're writing the file

1817
01:39:09,380 --> 01:39:15,350
out then you know we're writing the file

1818
01:39:12,649 --> 01:39:17,629
out if we're reading the file in then

1819
01:39:15,350 --> 01:39:22,670
we're reading the file in we know we

1820
01:39:17,630 --> 01:39:30,590
have those two separate paths maybe in

1821
01:39:22,670 --> 01:39:33,699
either case if there's an asset we set

1822
01:39:30,590 --> 01:39:33,699
the default

1823
01:39:56,810 --> 01:40:05,730
I'm just trying to think about how you

1824
01:39:59,399 --> 01:40:09,139
would do this so that so that you don't

1825
01:40:05,729 --> 01:40:18,509
actually need to specify a default as

1826
01:40:09,140 --> 01:40:27,810
existing here's here's one thing I would

1827
01:40:18,510 --> 01:40:31,440
say I wonder if maybe that's something

1828
01:40:27,810 --> 01:40:38,010
that's just better done in the query you

1829
01:40:31,439 --> 01:40:41,339
know what I mean like when we actually

1830
01:40:38,010 --> 01:40:49,190
go to get one of those points should we

1831
01:40:41,340 --> 01:40:49,190
just fill it in there so when you do the

1832
01:40:49,550 --> 01:40:57,300
when you do when you look for a JJ

1833
01:40:53,039 --> 01:41:00,929
chokes the line default should that be

1834
01:40:57,300 --> 01:41:03,289
something that you just do separately so

1835
01:41:00,929 --> 01:41:03,289
like

1836
01:41:14,878 --> 01:41:19,458
like where do these actually get used

1837
01:41:34,880 --> 01:41:45,319
so I'm guessing it's find a line and so

1838
01:41:38,420 --> 01:41:49,279
for find a line maybe it's like look if

1839
01:41:45,319 --> 01:42:03,769
the result type is zero so we just

1840
01:41:49,279 --> 01:42:09,309
didn't find anything maybe we say if the

1841
01:42:03,770 --> 01:42:15,110
result type is zero then we'll set the

1842
01:42:09,310 --> 01:42:18,440
results equal to this so if we're

1843
01:42:15,109 --> 01:42:28,609
looking for a complete type of H AJ

1844
01:42:18,439 --> 01:42:31,449
align default right and the result type

1845
01:42:28,609 --> 01:42:31,449
is zero

1846
01:42:39,420 --> 01:42:49,359
can we do it does that help because that

1847
01:42:47,619 --> 01:42:53,559
would get us out of the business of ever

1848
01:42:49,359 --> 01:43:02,439
inserting defaults at all right that did

1849
01:42:53,560 --> 01:43:04,690
not work at all wouldn't this have to be

1850
01:43:02,439 --> 01:43:12,699
two-parent though as well like how was

1851
01:43:04,689 --> 01:43:16,750
this working before I'm not sure about

1852
01:43:12,699 --> 01:43:17,710
that because it feels like this yeah

1853
01:43:16,750 --> 01:43:22,119
what I've had it been a little bit

1854
01:43:17,710 --> 01:43:24,220
different but so if we call the other

1855
01:43:22,119 --> 01:43:30,939
thing I guess is for first align let's

1856
01:43:24,220 --> 01:43:34,619
see where that's called maybe it's that

1857
01:43:30,939 --> 01:43:34,619
function that we actually need to modify

1858
01:43:35,970 --> 01:43:44,470
yeah okay so so we probably shouldn't

1859
01:43:42,880 --> 01:43:51,239
really be calling that anymore but that

1860
01:43:44,470 --> 01:43:51,240
actually looks like what we need

1861
01:43:55,420 --> 01:44:04,130
so for this what we probably want to do

1862
01:43:58,310 --> 01:44:08,150
is say when you call get first align we

1863
01:44:04,130 --> 01:44:08,829
would say look the v2 result is gonna be

1864
01:44:08,149 --> 01:44:14,629
this

1865
01:44:08,829 --> 01:44:21,649
if the bitmap info align points zero dot

1866
01:44:14,630 --> 01:44:38,150
type is valid then we get it but I don't

1867
01:44:21,649 --> 01:44:40,009
love this and so I don't know how I feel

1868
01:44:38,149 --> 01:44:42,469
about that going forward but for now I

1869
01:44:40,010 --> 01:44:44,900
think that's more what we need so then

1870
01:44:42,470 --> 01:44:46,369
they'll be a default alignment or should

1871
01:44:44,899 --> 01:44:49,960
be a default alignment well it didn't

1872
01:44:46,369 --> 01:44:56,420
look like that worked that would create

1873
01:44:49,960 --> 01:45:00,439
you know a P percent here where we we

1874
01:44:56,420 --> 01:45:02,930
only get the Boop's we only get the P

1875
01:45:00,439 --> 01:45:04,489
percent in the case where there actually

1876
01:45:02,930 --> 01:45:07,789
is a valid when otherwise we'll assume

1877
01:45:04,489 --> 01:45:09,559
the the point five point five forget

1878
01:45:07,789 --> 01:45:13,569
first align and that would be the same

1879
01:45:09,560 --> 01:45:13,570
as having inserted the default I think

1880
01:45:14,739 --> 01:45:19,639
so I'm not sure why that wouldn't work

1881
01:45:17,390 --> 01:45:20,810
although again I thought find a line

1882
01:45:19,640 --> 01:45:23,690
would have been what we were calling

1883
01:45:20,810 --> 01:45:26,090
there inside the entity system so I'm

1884
01:45:23,689 --> 01:45:28,960
not sure what's up with that because

1885
01:45:26,090 --> 01:45:28,960
that should have been

1886
01:45:44,810 --> 01:46:01,219
so here's what we could do could also

1887
01:45:54,289 --> 01:46:02,988
say that we just get oh so I was right

1888
01:46:01,219 --> 01:46:03,649
it is the two parent that's why it

1889
01:46:02,988 --> 01:46:05,809
didn't work

1890
01:46:03,649 --> 01:46:07,369
this was getting set to two parent

1891
01:46:05,810 --> 01:46:12,710
because that's what two parent is right

1892
01:46:07,369 --> 01:46:14,479
there okay so yeah when we do find a

1893
01:46:12,710 --> 01:46:16,250
line we could assume that like you know

1894
01:46:14,479 --> 01:46:17,539
we set this and you know what I'm gonna

1895
01:46:16,250 --> 01:46:20,649
I'm gonna return it to the way I was

1896
01:46:17,539 --> 01:46:20,649
doing it before I think that's correct

1897
01:46:20,890 --> 01:46:30,440
so if what you were trying to do was

1898
01:46:24,319 --> 01:46:34,750
look for this then we will give you a

1899
01:46:30,439 --> 01:46:34,750
default but only then

1900
01:46:42,159 --> 01:46:52,899
better yeah alright let's see if that

1901
01:46:49,189 --> 01:46:55,339
helps me there we go

1902
01:46:52,899 --> 01:47:01,429
and so now those files should be the

1903
01:46:55,340 --> 01:47:04,789
same and so if I do important save good

1904
01:47:01,430 --> 01:47:06,619
I don't hit my I don't get my rewrite

1905
01:47:04,789 --> 01:47:09,109
case so everything is preserved exactly

1906
01:47:06,619 --> 01:47:10,760
so then if I come in here and say let's

1907
01:47:09,109 --> 01:47:14,539
go ahead and change one of those Lyman

1908
01:47:10,760 --> 01:47:18,050
points can I get it to rewrite it which

1909
01:47:14,539 --> 01:47:20,659
is a little hard in the slow version of

1910
01:47:18,050 --> 01:47:29,500
this thing let's see oh I got to pick

1911
01:47:20,659 --> 01:47:29,500
somebody first so let's pick this

1912
01:47:31,658 --> 01:47:40,799
and I'm going to add an alignment point

1913
01:47:51,238 --> 01:47:57,649
so we got the two-parent one here I

1914
01:47:59,180 --> 01:48:14,250
guess it should technically be like that

1915
01:48:02,369 --> 01:48:26,180
ish we've got the base of neck should be

1916
01:48:14,250 --> 01:48:26,180
about there and then I'll do import safe

1917
01:48:26,988 --> 01:48:31,889
so we'll have to debug this more

1918
01:48:29,189 --> 01:48:33,829
tomorrow but now we can at least take a

1919
01:48:31,890 --> 01:48:36,960
look I think to see whether this

1920
01:48:33,829 --> 01:48:39,449
function works properly I'm hoping that

1921
01:48:36,960 --> 01:48:41,250
now we're not rewriting the other file

1922
01:48:39,449 --> 01:48:43,738
yet we're writing base game that's the

1923
01:48:41,250 --> 01:48:46,619
part that I just fixed so that should be

1924
01:48:43,738 --> 01:48:48,988
good and then we can see okay did we

1925
01:48:46,619 --> 01:48:52,319
find the last slash okay looks like we

1926
01:48:48,988 --> 01:48:55,859
did let's see what our existing file

1927
01:48:52,319 --> 01:48:58,289
name is just tags that's correct let's

1928
01:48:55,859 --> 01:49:00,659
see if we got a temp file name looks

1929
01:48:58,289 --> 01:49:02,819
like we did so what is that temp file

1930
01:49:00,659 --> 01:49:07,229
name it's tag slash last hh7

1931
01:49:02,819 --> 01:49:09,619
eight-to-four dot temp okay so assuming

1932
01:49:07,229 --> 01:49:12,949
that was okay we'll go through here

1933
01:49:09,619 --> 01:49:16,649
we'll do our write to that file

1934
01:49:12,949 --> 01:49:19,319
it looks like the write worked close the

1935
01:49:16,649 --> 01:49:22,859
handle and if the write work then we

1936
01:49:19,319 --> 01:49:24,689
will go ahead and do the move right so

1937
01:49:22,859 --> 01:49:27,269
now we should have replaced the file

1938
01:49:24,689 --> 01:49:31,799
with the new file and off we go

1939
01:49:27,270 --> 01:49:33,570
right so that all looked look great the

1940
01:49:31,800 --> 01:49:35,730
only thing we might want to do here is

1941
01:49:33,569 --> 01:49:37,679
since it is something that contemplates

1942
01:49:35,729 --> 01:49:41,218
a failure case and you can see here

1943
01:49:37,680 --> 01:49:44,700
where we've rewritten this file it's

1944
01:49:41,219 --> 01:49:45,930
different now since we're contemplating

1945
01:49:44,699 --> 01:49:48,689
a failure case here the other thing we

1946
01:49:45,930 --> 01:49:52,230
might want to do in that function is

1947
01:49:48,689 --> 01:49:55,049
that you know if if we didn't you know

1948
01:49:52,229 --> 01:49:57,509
if we couldn't get the replacement that

1949
01:49:55,050 --> 01:50:01,199
we wanted there is a point where this

1950
01:49:57,510 --> 01:50:04,680
can fail like somewhere right here right

1951
01:50:01,199 --> 01:50:07,679
where the temp file has been

1952
01:50:04,680 --> 01:50:12,480
created but we don't want it to be there

1953
01:50:07,680 --> 01:50:15,600
right so this will remove it but if we

1954
01:50:12,479 --> 01:50:18,659
couldn't remove it right so if we if the

1955
01:50:15,600 --> 01:50:22,680
reason if the move didn't end up going

1956
01:50:18,659 --> 01:50:30,359
as planned we want to do a deletion

1957
01:50:22,680 --> 01:50:32,760
right we'd like to delete that temp file

1958
01:50:30,359 --> 01:50:35,309
so that it's not hanging around on the

1959
01:50:32,760 --> 01:50:41,550
drive for no reason

1960
01:50:35,310 --> 01:50:42,960
and so that's that removal call it

1961
01:50:41,550 --> 01:50:46,650
should be there for cleaning up so

1962
01:50:42,960 --> 01:50:49,619
delete file W right so we we probably

1963
01:50:46,649 --> 01:50:51,179
want to keep that in there let's go

1964
01:50:49,619 --> 01:50:57,470
ahead and open up meld which I think

1965
01:50:51,180 --> 01:51:00,090
we've got right and let's just see

1966
01:50:57,470 --> 01:51:04,220
what's going on with the files that we

1967
01:51:00,090 --> 01:51:07,680
rewrote so here's handmade and oops

1968
01:51:04,220 --> 01:51:11,990
here's the tags files so let's take a

1969
01:51:07,680 --> 01:51:15,600
look at the original and then the

1970
01:51:11,989 --> 01:51:19,559
updated version and see what actually

1971
01:51:15,600 --> 01:51:21,870
got rewritten so looks like in here

1972
01:51:19,560 --> 01:51:23,880
right you can see that we wrote out

1973
01:51:21,869 --> 01:51:25,590
those two files and oh hey look

1974
01:51:23,880 --> 01:51:27,989
everything else the same so it actually

1975
01:51:25,590 --> 01:51:28,500
worked perfect right it's exactly what

1976
01:51:27,989 --> 01:51:32,519
we wanted

1977
01:51:28,500 --> 01:51:36,149
there's the alignment info in there just

1978
01:51:32,520 --> 01:51:39,840
just so and my only question is is the

1979
01:51:36,149 --> 01:51:44,089
zero zero correct because I don't really

1980
01:51:39,840 --> 01:51:47,810
know I don't remember what the actual

1981
01:51:44,090 --> 01:51:50,400
grids look like in that particular file

1982
01:51:47,810 --> 01:51:52,950
but everything else is fine we didn't

1983
01:51:50,399 --> 01:51:56,729
put our tabbing in here and we don't

1984
01:51:52,949 --> 01:52:00,659
have a backslash n so I think we want to

1985
01:51:56,729 --> 01:52:05,549
add that back in there but other than

1986
01:52:00,659 --> 01:52:08,430
that looks fine so let's see if now when

1987
01:52:05,550 --> 01:52:10,440
we run if everything works okay or if

1988
01:52:08,430 --> 01:52:14,070
it's busted

1989
01:52:10,439 --> 01:52:16,469
and and we'll go from there because

1990
01:52:14,069 --> 01:52:18,269
remember now it's still we on load at

1991
01:52:16,470 --> 01:52:19,829
the moment we have it hard-coded to

1992
01:52:18,270 --> 01:52:21,080
call the import function which is not

1993
01:52:19,829 --> 01:52:25,829
probably something you would do normally

1994
01:52:21,079 --> 01:52:29,909
but that's still happening so if I grab

1995
01:52:25,829 --> 01:52:32,180
one of these right here let's just see

1996
01:52:29,909 --> 01:52:32,180
what we've got

1997
01:52:33,800 --> 01:52:40,619
yeah looks like it it reloaded it just

1998
01:52:36,810 --> 01:52:42,510
fine right so I think we're in good

1999
01:52:40,619 --> 01:52:47,729
shape so I'm gonna go ahead and update

2000
01:52:42,510 --> 01:52:50,280
that part to be able to insert those

2001
01:52:47,729 --> 01:52:52,500
back sessions but other than that I

2002
01:52:50,279 --> 01:52:54,719
think we're in good shape so now that

2003
01:52:52,500 --> 01:52:57,300
we've got that sort of through line

2004
01:52:54,720 --> 01:53:00,240
going there yeah I think we're happy

2005
01:52:57,300 --> 01:53:03,630
happy campers so in here I'm just gonna

2006
01:53:00,239 --> 01:53:05,099
put four spaces not the cleanest way to

2007
01:53:03,630 --> 01:53:06,750
do this we could have a much more

2008
01:53:05,100 --> 01:53:08,970
complicated system if we want to but for

2009
01:53:06,750 --> 01:53:11,880
now that's fine for me in the back

2010
01:53:08,970 --> 01:53:16,350
session so it preserves some manner of

2011
01:53:11,880 --> 01:53:18,630
formatting there alright and the reason

2012
01:53:16,350 --> 01:53:20,310
I say it's not perfect is because if you

2013
01:53:18,630 --> 01:53:22,319
were really trying to obey the file you

2014
01:53:20,310 --> 01:53:24,270
have something that looks to see what

2015
01:53:22,319 --> 01:53:26,460
the indent level is according to the

2016
01:53:24,270 --> 01:53:29,910
user at any particular point and does

2017
01:53:26,460 --> 01:53:32,250
that right so you know we're not getting

2018
01:53:29,909 --> 01:53:34,639
into that level of craziness here but

2019
01:53:32,250 --> 01:53:38,100
you could imagine that being the case

2020
01:53:34,640 --> 01:53:40,460
um all right let's go to the Q&amp;A now and

2021
01:53:38,100 --> 01:53:43,620
we'll finish this up tomorrow

2022
01:53:40,460 --> 01:53:46,800
just like looking for bugs and stuff and

2023
01:53:43,619 --> 01:53:49,800
anything else that we feel like doing

2024
01:53:46,800 --> 01:53:54,770
and then next weekend we can start on

2025
01:53:49,800 --> 01:53:54,770
there's other elements right

2026
01:55:00,920 --> 01:55:06,789
no the worlds are generated procedurally

2027
01:55:47,569 --> 01:55:51,319
do you think it is better to design for

2028
01:55:49,609 --> 01:55:59,299
the top 10% of programmers or the

2029
01:55:51,319 --> 01:56:01,699
majority in language or API design um so

2030
01:55:59,300 --> 01:56:05,090
I guess what I would say about that is

2031
01:56:01,699 --> 01:56:06,859
it depends what you're trying to do so I

2032
01:56:05,090 --> 01:56:08,869
don't think it's a better or worse kind

2033
01:56:06,859 --> 01:56:10,399
of question it's a what is the purpose

2034
01:56:08,869 --> 01:56:19,640
of this thing you're making kind of a

2035
01:56:10,399 --> 01:56:21,529
question right and so if your goal is to

2036
01:56:19,640 --> 01:56:24,530
make you know like let's say you're

2037
01:56:21,529 --> 01:56:29,389
making something like a scripting

2038
01:56:24,529 --> 01:56:32,210
language for you know an operating

2039
01:56:29,390 --> 01:56:34,369
system or something then it probably

2040
01:56:32,210 --> 01:56:37,579
doesn't make sense to design for the top

2041
01:56:34,369 --> 01:56:39,710
10% of programmers because it's kind of

2042
01:56:37,579 --> 01:56:42,529
just a utility layer that's used by

2043
01:56:39,710 --> 01:56:44,480
everybody and a lot of the people using

2044
01:56:42,529 --> 01:56:46,609
it aren't really even programmers in

2045
01:56:44,479 --> 01:56:50,689
quotes anyway there sis admin's or

2046
01:56:46,609 --> 01:56:56,239
something and so you know your your

2047
01:56:50,689 --> 01:56:59,029
design is should be tailored to who is

2048
01:56:56,239 --> 01:57:00,109
going to be using this thing if on the

2049
01:56:59,029 --> 01:57:05,269
other hand you're trying to make a

2050
01:57:00,109 --> 01:57:06,739
language for writing like large end-user

2051
01:57:05,270 --> 01:57:08,390
software then I think it should

2052
01:57:06,739 --> 01:57:09,949
absolutely be tailored to the top 10

2053
01:57:08,390 --> 01:57:11,480
percent of programmers because we've

2054
01:57:09,949 --> 01:57:13,970
seen what happens when you don't and

2055
01:57:11,479 --> 01:57:16,789
it's horrible I mean that's like the web

2056
01:57:13,970 --> 01:57:17,690
or something and it's like it's like

2057
01:57:16,789 --> 01:57:19,159
unusable

2058
01:57:17,689 --> 01:57:21,559
it's not like I'm usually bad and it's

2059
01:57:19,159 --> 01:57:24,609
just horrid it's it's like using a

2060
01:57:21,560 --> 01:57:27,289
computer from 1960 I mean it's absurd

2061
01:57:24,609 --> 01:57:29,299
the only reason you know that it's not a

2062
01:57:27,289 --> 01:57:31,130
computer from 1960 is because instead of

2063
01:57:29,300 --> 01:57:34,159
printing things as text you get like a

2064
01:57:31,130 --> 01:57:36,380
pretty graphical display but everything

2065
01:57:34,159 --> 01:57:39,199
else is exactly 1960 it takes several

2066
01:57:36,380 --> 01:57:43,670
seconds to process every request it

2067
01:57:39,199 --> 01:57:45,739
fails a lot of the time it asks the user

2068
01:57:43,670 --> 01:57:48,670
to intervene on things that are

2069
01:57:45,739 --> 01:57:52,519
incredibly technical clear your cookies

2070
01:57:48,670 --> 01:57:55,039
refresh the page what like what are you

2071
01:57:52,520 --> 01:57:57,080
talking about right I mean this is

2072
01:57:55,039 --> 01:58:00,899
absurd that a user would not even know

2073
01:57:57,079 --> 01:58:03,420
what a fricking cookie was you know

2074
01:58:00,899 --> 01:58:05,369
and so we've definitely seen what

2075
01:58:03,420 --> 01:58:06,989
happens when you expect real software to

2076
01:58:05,369 --> 01:58:08,670
be written by non programmers and that's

2077
01:58:06,989 --> 01:58:24,719
what you use every day online and it's

2078
01:58:08,670 --> 01:58:25,859
terrible right in an old stream you

2079
01:58:24,720 --> 01:58:27,420
mentioned that you like having all

2080
01:58:25,859 --> 01:58:28,859
allocators like push let's go through

2081
01:58:27,420 --> 01:58:30,690
macros instead of direct function calls

2082
01:58:28,859 --> 01:58:34,009
what's your reasoning behind this two

2083
01:58:30,689 --> 01:58:39,899
reasons one is so that they can cast

2084
01:58:34,010 --> 01:58:41,909
based on the size properly so for things

2085
01:58:39,899 --> 01:58:45,000
that are not doing just a blind sized

2086
01:58:41,909 --> 01:58:46,619
push that helps but for things like push

2087
01:58:45,000 --> 01:58:47,760
slides which don't need to do that

2088
01:58:46,619 --> 01:58:49,289
the reason I like them to go through

2089
01:58:47,760 --> 01:58:52,170
macros is so that they can provide file

2090
01:58:49,289 --> 01:58:55,920
online information during debugging so

2091
01:58:52,170 --> 01:58:58,020
if I want to know who's taking memory if

2092
01:58:55,920 --> 01:59:00,060
all I do is have a regular push size

2093
01:58:58,020 --> 01:59:02,130
call that Doug isn't a macro I have no

2094
01:59:00,060 --> 01:59:03,900
idea who's calling that but if it's a

2095
01:59:02,130 --> 01:59:06,539
macro I can insert the file and line

2096
01:59:03,899 --> 01:59:10,920
number in there and that way if I track

2097
01:59:06,539 --> 01:59:12,659
who allocated what I'll know so it's

2098
01:59:10,920 --> 01:59:16,079
really to enable that kind of debugging

2099
01:59:12,659 --> 01:59:18,359
and then of course in non debug builds

2100
01:59:16,079 --> 01:59:26,550
you just turn that off right so doesn't

2101
01:59:18,359 --> 01:59:28,109
cost you anything since there are a lot

2102
01:59:26,550 --> 01:59:29,850
of questions do you think I could

2103
01:59:28,109 --> 01:59:36,599
interest you in a pair of zircon

2104
01:59:29,850 --> 01:59:38,460
encrusted tweezers I mean what I will

2105
01:59:36,600 --> 01:59:40,610
say is that obviously zircon encrusted

2106
01:59:38,460 --> 01:59:45,140
tweezers are the best kind of tweezers

2107
01:59:40,609 --> 01:59:50,460
you know they're high-quality

2108
01:59:45,140 --> 01:59:52,260
I don't know if I'm quite ready to

2109
01:59:50,460 --> 01:59:57,439
retire to Montana yet

2110
01:59:52,260 --> 02:00:02,630
but when I do I will absolutely get a

2111
01:59:57,439 --> 02:00:02,629
pair of my own zircon encrusted tweezers

2112
02:00:30,340 --> 02:00:36,640
would you move to clang and implement

2113
02:00:32,380 --> 02:00:38,949
custom build tooling probably not with

2114
02:00:36,640 --> 02:00:40,840
clang cuz clang is really unwieldy and

2115
02:00:38,949 --> 02:00:43,119
gross if you ever try to open up the

2116
02:00:40,840 --> 02:00:46,569
like internals you're like oh my god

2117
02:00:43,119 --> 02:00:48,849
you know what exploded in here so I

2118
02:00:46,569 --> 02:00:52,299
probably wouldn't do any custom tooling

2119
02:00:48,850 --> 02:00:57,220
with clang if I was gonna do custom

2120
02:00:52,300 --> 02:01:01,659
tooling I would you know I would write

2121
02:00:57,220 --> 02:01:03,570
my own program of some kind claims a

2122
02:01:01,659 --> 02:01:06,369
nightmare

2123
02:01:03,569 --> 02:01:07,420
may I ask a larger off-topic question or

2124
02:01:06,369 --> 02:01:09,789
should I say tomorrow's pretty soon well

2125
02:01:07,420 --> 02:01:12,180
you might as well ask it and then we

2126
02:01:09,789 --> 02:01:12,180
could see

2127
02:01:32,770 --> 02:01:38,360
is there anything like operating system

2128
02:01:35,420 --> 02:01:40,219
garbage collection my professor talked

2129
02:01:38,359 --> 02:01:41,899
about not needing to free calls to

2130
02:01:40,219 --> 02:01:43,039
malloc due to something like that I

2131
02:01:41,899 --> 02:01:45,639
would imagine yes no idea what he's

2132
02:01:43,039 --> 02:01:53,840
talking about but I'm not sure either

2133
02:01:45,640 --> 02:01:55,219
well I guess what I would say is it

2134
02:01:53,840 --> 02:01:57,980
depends what your professor was talking

2135
02:01:55,219 --> 02:02:04,550
about but yeah there there are that does

2136
02:01:57,979 --> 02:02:08,119
exist it's a little misleading to call

2137
02:02:04,550 --> 02:02:10,430
it garbage collection per se but it is

2138
02:02:08,119 --> 02:02:14,149
sort of a thing kind of like garbage

2139
02:02:10,430 --> 02:02:19,119
collection traditional garbage

2140
02:02:14,149 --> 02:02:23,929
collection means that periodically a

2141
02:02:19,119 --> 02:02:27,800
supervisor of some kind interrupts your

2142
02:02:23,930 --> 02:02:30,980
program looks to see what memory is

2143
02:02:27,800 --> 02:02:33,909
reachable and unreachable from things

2144
02:02:30,979 --> 02:02:38,479
that are currently known to the program

2145
02:02:33,909 --> 02:02:41,349
and then returns those things that are

2146
02:02:38,479 --> 02:02:48,139
unreachable to the free pool of memory

2147
02:02:41,350 --> 02:02:52,699
right that's traditional garbage

2148
02:02:48,140 --> 02:02:54,730
collection that in a literal sense does

2149
02:02:52,698 --> 02:02:59,599
not exist typically in operating systems

2150
02:02:54,729 --> 02:03:02,569
however a light form of that does any

2151
02:02:59,600 --> 02:03:05,810
modern operating system now has to

2152
02:03:02,569 --> 02:03:09,170
understand what resources are used by

2153
02:03:05,810 --> 02:03:12,199
each process in the operating system so

2154
02:03:09,170 --> 02:03:19,940
that if that process tries to do

2155
02:03:12,198 --> 02:03:23,509
something illegal crashes runs out of

2156
02:03:19,939 --> 02:03:27,409
control it can be contained and stopped

2157
02:03:23,510 --> 02:03:30,469
right so a limited form of garbage

2158
02:03:27,409 --> 02:03:33,139
collection which is to say it's probably

2159
02:03:30,469 --> 02:03:36,260
better you better think of it less as

2160
02:03:33,140 --> 02:03:38,960
garbage or more as an arena you can

2161
02:03:36,260 --> 02:03:41,119
think of your processes resources as all

2162
02:03:38,960 --> 02:03:44,539
being in an arena marked for your

2163
02:03:41,119 --> 02:03:46,698
process and when your process terminates

2164
02:03:44,539 --> 02:03:52,309
it will all be freed

2165
02:03:46,698 --> 02:03:56,509
right file handles memory allocation IO

2166
02:03:52,309 --> 02:04:00,619
ports whatever right all of that stuff

2167
02:03:56,510 --> 02:04:03,260
is pinned into your process when you

2168
02:04:00,618 --> 02:04:05,630
open it or allocate it and when your

2169
02:04:03,260 --> 02:04:11,030
process closes it all gets closed and

2170
02:04:05,630 --> 02:04:13,248
freed so when you call malloc if you

2171
02:04:11,029 --> 02:04:15,109
want to reuse that memory again yourself

2172
02:04:13,248 --> 02:04:17,359
during the course of your own run of the

2173
02:04:15,109 --> 02:04:21,469
program in the same process you need to

2174
02:04:17,359 --> 02:04:23,598
call free if you don't ever need to do

2175
02:04:21,469 --> 02:04:26,448
that if you just use the memory and then

2176
02:04:23,599 --> 02:04:27,979
exit you don't need to call free because

2177
02:04:26,448 --> 02:04:30,738
the operating system will clean up that

2178
02:04:27,979 --> 02:04:32,329
memory by default if that's what your

2179
02:04:30,738 --> 02:04:35,118
president was talking about they are

2180
02:04:32,328 --> 02:04:37,969
correct and that's true in any modern

2181
02:04:35,118 --> 02:04:40,339
operating system in antiquated operating

2182
02:04:37,969 --> 02:04:42,078
systems where computers were less

2183
02:04:40,340 --> 02:04:50,380
powerful and things like that couldn't

2184
02:04:42,078 --> 02:04:50,380
really happen then this was not true so

2185
02:04:57,630 --> 02:05:04,869
so let's go ahead and take the last one

2186
02:05:01,479 --> 02:05:07,919
from Gary Johansen I talked to one of

2187
02:05:04,869 --> 02:05:07,920
the hammy debug teams

2188
02:05:08,340 --> 02:05:13,930
what's a handmade debug teams I don't

2189
02:05:12,310 --> 02:05:16,270
know and they made it sound like it

2190
02:05:13,930 --> 02:05:18,039
would be doable to expose all debug

2191
02:05:16,270 --> 02:05:19,990
symbols on an API level this seems like

2192
02:05:18,039 --> 02:05:23,260
a very powerful thing since people could

2193
02:05:19,989 --> 02:05:25,149
build custom logins on top of the

2194
02:05:23,260 --> 02:05:26,470
debugger itself this seems very powerful

2195
02:05:25,149 --> 02:05:28,509
I'm very leverageable is there anything

2196
02:05:26,470 --> 02:05:30,100
wrong with that is there some reason you

2197
02:05:28,510 --> 02:05:35,860
know a visual studio does not expose the

2198
02:05:30,100 --> 02:05:39,340
information to an API mm-hmm no actually

2199
02:05:35,859 --> 02:05:42,639
the opposite is true Visual Studio does

2200
02:05:39,340 --> 02:05:44,529
expose debug information as an API or

2201
02:05:42,640 --> 02:05:50,140
more appropriately

2202
02:05:44,529 --> 02:05:54,029
windows tool help does Visual Studio is

2203
02:05:50,140 --> 02:06:00,660
actually built on top of tool help and

2204
02:05:54,029 --> 02:06:00,659
there are PDB accessing things in there

2205
02:06:26,289 --> 02:06:30,850
so where's the actual so I guess to help

2206
02:06:29,050 --> 02:06:43,570
doesn't have it to help only has the

2207
02:06:30,850 --> 02:06:46,510
process inspection so maybe I'm wrong

2208
02:06:43,569 --> 02:06:49,049
about this I thought there was a way to

2209
02:06:46,510 --> 02:06:49,050
do that

2210
02:07:00,380 --> 02:07:10,510
I thought there was one of these but

2211
02:07:02,300 --> 02:07:10,510
maybe there isn't yeah here it is

2212
02:07:13,270 --> 02:07:21,140
so they do ship these they exist tool

2213
02:07:19,369 --> 02:07:22,699
help is the one for inspecting processes

2214
02:07:21,140 --> 02:07:24,110
and threads I for some reason thought

2215
02:07:22,699 --> 02:07:34,519
that the pdb stuff is in there but it's

2216
02:07:24,109 --> 02:07:42,909
not so it's all here right you can

2217
02:07:34,520 --> 02:07:42,910
access it so what's a debug help

2218
02:07:47,960 --> 02:07:52,470
yeah here you go

2219
02:07:50,039 --> 02:07:57,000
yeah debuck help sorry I got the yeah to

2220
02:07:52,470 --> 02:07:59,400
help was one yeah okay so you know it

2221
02:07:57,000 --> 02:08:01,609
does it does exist that's that's the

2222
02:07:59,399 --> 02:08:01,609
thing

2223
02:08:15,958 --> 02:08:18,529
yeah

2224
02:08:20,029 --> 02:08:35,749
alright that looks like about it so I'm

2225
02:08:23,029 --> 02:08:37,579
gonna go ahead and close it down okay

2226
02:08:35,748 --> 02:08:38,868
thank you very for joining us an episode

2227
02:08:37,578 --> 02:08:40,969
of hand made here it's a pleasure coding

2228
02:08:38,868 --> 02:08:44,658
with you as always that was a big push

2229
02:08:40,969 --> 02:08:47,239
we did several weekends of making like a

2230
02:08:44,658 --> 02:08:49,728
clean text in out thing that could allow

2231
02:08:47,238 --> 02:08:51,948
us to edit it both directions and it was

2232
02:08:49,729 --> 02:08:53,929
pretty cool it seems like we got it

2233
02:08:51,948 --> 02:08:55,608
working now which means we can mark up

2234
02:08:53,929 --> 02:08:58,578
our files all we want inside the in-game

2235
02:08:55,609 --> 02:09:00,379
editor which I probably will do tomorrow

2236
02:08:58,578 --> 02:09:02,268
and then we can test it out make sure

2237
02:09:00,378 --> 02:09:03,738
that we can edit everything cleanly and

2238
02:09:02,269 --> 02:09:05,899
then it doesn't like corrupt everything

2239
02:09:03,738 --> 02:09:09,348
and to generate and get horrible or

2240
02:09:05,899 --> 02:09:10,759
anything so we'll do that tomorrow

2241
02:09:09,349 --> 02:09:14,449
and that's also good because that means

2242
02:09:10,759 --> 02:09:17,029
all of our assets will now be usable and

2243
02:09:14,448 --> 02:09:20,268
we can play around with them a lot more

2244
02:09:17,029 --> 02:09:21,559
flexibly than we used to and it also

2245
02:09:20,269 --> 02:09:23,509
puts us in a good position to start

2246
02:09:21,559 --> 02:09:25,069
thinking about how we want to do the tag

2247
02:09:23,509 --> 02:09:27,948
querying and updating and stuff like

2248
02:09:25,069 --> 02:09:30,039
that to which we'd like to do and since

2249
02:09:27,948 --> 02:09:32,328
we have some things that we haven't

2250
02:09:30,038 --> 02:09:34,128
figured out how we're gonna really label

2251
02:09:32,328 --> 02:09:38,509
and use yet like the ground cover and

2252
02:09:34,128 --> 02:09:41,149
stuff like that that may be a way that

2253
02:09:38,509 --> 02:09:42,708
we can figure out those parts for our

2254
02:09:41,149 --> 02:09:44,569
system now that we have an easy way to

2255
02:09:42,708 --> 02:09:45,588
edit and mark things up we can try

2256
02:09:44,569 --> 02:09:48,199
marking it up a couple different ways

2257
02:09:45,588 --> 02:09:49,969
and query it in the file in the game and

2258
02:09:48,198 --> 02:09:52,068
see does this work or is it cumbersome

2259
02:09:49,969 --> 02:09:53,208
you know and so on so that's what we'll

2260
02:09:52,069 --> 02:09:55,219
do tomorrow

2261
02:09:53,208 --> 02:09:56,809
and we still would like to add sounds

2262
02:09:55,219 --> 02:10:00,109
and stuff so that'll be a little bit

2263
02:09:56,809 --> 02:10:01,219
further down the line but for the moment

2264
02:10:00,109 --> 02:10:03,199
let's just play with the bitmap stuff

2265
02:10:01,219 --> 02:10:04,908
make sure it's really working make sure

2266
02:10:03,198 --> 02:10:06,558
we're happy with everything and then we

2267
02:10:04,908 --> 02:10:09,378
can move on hope you see you back here

2268
02:10:06,559 --> 02:10:11,119
for that tomorrow till then if you want

2269
02:10:09,378 --> 02:10:12,769
to follow along with with the series at

2270
02:10:11,118 --> 02:10:15,828
home you can always fear to the game on

2271
02:10:12,769 --> 02:10:16,969
handmade hero dot org if you're free out

2272
02:10:15,828 --> 02:10:18,679
of the game comes with a source code so

2273
02:10:16,969 --> 02:10:23,658
you can play around with it and do your

2274
02:10:18,679 --> 02:10:24,828
own experiments we also have some other

2275
02:10:23,658 --> 02:10:26,208
stuff at my rocket if you might want to

2276
02:10:24,828 --> 02:10:28,728
check it out you can always click on a

2277
02:10:26,208 --> 02:10:30,708
handmade hero head and we've got stuff

2278
02:10:28,729 --> 02:10:32,869
here we just released meow the infinite

2279
02:10:30,708 --> 02:10:33,889
which is our new comic if you like web

2280
02:10:32,868 --> 02:10:36,429
comics might watch I can

2281
02:10:33,889 --> 02:10:38,118
out just click on me on the infinite and

2282
02:10:36,429 --> 02:10:40,668
and off you go

2283
02:10:38,118 --> 02:10:41,929
there's also my blog and you know the

2284
02:10:40,668 --> 02:10:44,059
bottle rocket homepage everything's up

2285
02:10:41,929 --> 02:10:45,229
there so yeah don't be afraid to click

2286
02:10:44,059 --> 02:10:47,110
on little handmade here I had there's

2287
02:10:45,229 --> 02:10:50,809
good stuff in there that you can explore

2288
02:10:47,109 --> 02:10:52,038
until tomorrow that's it for today have

2289
02:10:50,809 --> 02:10:52,639
fun programming and I'll see everyone on

2290
02:10:52,038 --> 02:10:55,389
the Internet

2291
02:10:52,639 --> 02:10:55,389
take it easy everybody

