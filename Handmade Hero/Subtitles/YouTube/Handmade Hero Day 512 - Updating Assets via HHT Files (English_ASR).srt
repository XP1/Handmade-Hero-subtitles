1
00:00:01,070 --> 00:00:06,359
hello everyone and welcome to handmade

2
00:00:03,689 --> 00:00:10,050
Hero show recode a complete-game live on

3
00:00:06,359 --> 00:00:12,388
stream we are going to go use our

4
00:00:10,050 --> 00:00:17,460
parsing our tag parsing that we've

5
00:00:12,388 --> 00:00:19,559
implemented to try to rebuild our entire

6
00:00:17,460 --> 00:00:20,429
HHA set with the exception of fonts

7
00:00:19,559 --> 00:00:22,169
because we're gonna take a look at those

8
00:00:20,429 --> 00:00:24,329
as a sort of separate thing we're gonna

9
00:00:22,170 --> 00:00:26,670
rebuild everything but the font HHA set

10
00:00:24,329 --> 00:00:28,439
strictly from the tag files that's what

11
00:00:26,670 --> 00:00:30,029
we'd like to get accomplished today

12
00:00:28,439 --> 00:00:32,730
maybe that's a little bit ambitious for

13
00:00:30,028 --> 00:00:35,250
today but at least we want to get most

14
00:00:32,729 --> 00:00:37,849
of that accomplished today and so that

15
00:00:35,250 --> 00:00:40,409
next weekend we can kind of look at

16
00:00:37,850 --> 00:00:43,020
wrapping that up and having kind of a

17
00:00:40,409 --> 00:00:45,599
nice art asset pipeline that we are

18
00:00:43,020 --> 00:00:47,520
happy with and think will be sufficient

19
00:00:45,600 --> 00:00:49,170
for not only shipping the game but

20
00:00:47,520 --> 00:00:50,460
allowing people who are modifying the

21
00:00:49,170 --> 00:00:52,739
game or adding their own things to the

22
00:00:50,460 --> 00:00:54,600
game to have a reasonable time doing so

23
00:00:52,738 --> 00:00:57,538
right so you know making it so that we

24
00:00:54,600 --> 00:00:59,280
don't really have a lot of concerns

25
00:00:57,539 --> 00:01:04,409
about how that would work

26
00:00:59,280 --> 00:01:08,400
so we have we've had one request today

27
00:01:04,409 --> 00:01:09,930
and oops you know what I am not even my

28
00:01:08,400 --> 00:01:15,710
keyboard switcher was not even switched

29
00:01:09,930 --> 00:01:18,960
on to the correct the correct that sir

30
00:01:15,709 --> 00:01:20,280
okay sorry about that my keyboard

31
00:01:18,959 --> 00:01:21,779
switcher was still switched to the other

32
00:01:20,280 --> 00:01:24,030
machine so that's about to start typing

33
00:01:21,780 --> 00:01:25,430
into the machine that actually runs the

34
00:01:24,030 --> 00:01:27,478
stream which would not have been good

35
00:01:25,430 --> 00:01:29,820
who knows what that would have done all

36
00:01:27,478 --> 00:01:30,868
kinds of crazy stuff perhaps with as I

37
00:01:29,819 --> 00:01:33,508
was like trying to figure out why the

38
00:01:30,868 --> 00:01:36,090
keyboard isn't working as I was trying

39
00:01:33,509 --> 00:01:38,400
to say today is Dave 512 which of course

40
00:01:36,090 --> 00:01:41,850
as you know is a power of two we will

41
00:01:38,400 --> 00:01:43,859
possibly never have another power of two

42
00:01:41,849 --> 00:01:47,640
on hand made here oh I don't know it's

43
00:01:43,859 --> 00:01:50,368
possible that we'll go to date 1024 but

44
00:01:47,640 --> 00:01:54,228
it's also possible perhaps even likely

45
00:01:50,368 --> 00:01:57,090
that we'll stop somewhere on you know

46
00:01:54,228 --> 00:02:01,769
day 800 or something will be the last

47
00:01:57,090 --> 00:02:04,799
stream when we sign off I've said we're

48
00:02:01,769 --> 00:02:06,629
doing at least 600 so we never getting

49
00:02:04,799 --> 00:02:09,360
past there but I never say anything

50
00:02:06,629 --> 00:02:13,269
about doing over a thousand so we may

51
00:02:09,360 --> 00:02:18,250
stop before day 1024 and so in

52
00:02:13,270 --> 00:02:21,969
honor of the 512 stream we had a request

53
00:02:18,250 --> 00:02:25,060
on the pre stream that I use my

54
00:02:21,969 --> 00:02:28,000
announcer voice for at least part of the

55
00:02:25,060 --> 00:02:29,650
episode I don't really use the announcer

56
00:02:28,000 --> 00:02:31,330
voice much anymore because I I'm more

57
00:02:29,650 --> 00:02:33,310
comfortable just doing regular talking

58
00:02:31,330 --> 00:02:34,870
on Twitch you know when I first started

59
00:02:33,310 --> 00:02:38,560
doing the series I I did an announcer

60
00:02:34,870 --> 00:02:41,770
voice for folks and I guess some people

61
00:02:38,560 --> 00:02:42,610
miss it which is totally fair and I

62
00:02:41,770 --> 00:02:45,909
think that's a totally reasonable

63
00:02:42,610 --> 00:02:49,360
request so without further ado I will

64
00:02:45,909 --> 00:02:52,060
start doing announcer style for this day

65
00:02:49,360 --> 00:02:54,370
512 I can't remember who asked for it

66
00:02:52,060 --> 00:02:57,670
who asked for it I've read the sequel

67
00:02:54,370 --> 00:03:00,159
ask for it I've read the sequel this one

68
00:02:57,669 --> 00:03:05,019
is for you I wish I had some almond milk

69
00:03:00,159 --> 00:03:07,000
sorry I don't I don't have any okay

70
00:03:05,020 --> 00:03:10,000
ladies and gentlemen we are here at

71
00:03:07,000 --> 00:03:12,520
handmade hero as was the case with the

72
00:03:10,000 --> 00:03:14,439
very first time that we did programming

73
00:03:12,520 --> 00:03:17,320
on handmade hero I am doing my announcer

74
00:03:14,439 --> 00:03:19,300
voice by request for day 512 really

75
00:03:17,319 --> 00:03:20,739
excited today because today we are going

76
00:03:19,300 --> 00:03:22,510
to be looking at the parsing code and

77
00:03:20,740 --> 00:03:24,969
seeing if we can actually get it to

78
00:03:22,509 --> 00:03:26,349
generate some hhas now it's not a given

79
00:03:24,969 --> 00:03:28,210
there's a lot of things that can go

80
00:03:26,349 --> 00:03:29,409
wrong here we've tested the parser so

81
00:03:28,210 --> 00:03:31,450
that we know the parser works pretty

82
00:03:29,409 --> 00:03:33,129
darn well but here's the thing it's

83
00:03:31,449 --> 00:03:35,259
reading into sort of the asset system

84
00:03:33,129 --> 00:03:36,879
which as we know just deals with packed

85
00:03:35,259 --> 00:03:38,829
assets any time you're trying to go

86
00:03:36,879 --> 00:03:40,269
directly into a runtime format like that

87
00:03:38,830 --> 00:03:41,680
it's a little bit dicey it's one of the

88
00:03:40,270 --> 00:03:43,120
reasons that people often don't try to

89
00:03:41,680 --> 00:03:44,409
pull off something like this they

90
00:03:43,120 --> 00:03:46,150
typically use more intermediate object

91
00:03:44,409 --> 00:03:47,229
formats and stuff like that or they kind

92
00:03:46,150 --> 00:03:49,120
of move things through the pipeline a

93
00:03:47,229 --> 00:03:50,319
little bit more slowly than this but

94
00:03:49,120 --> 00:03:52,210
that's okay this is handmade here oh

95
00:03:50,319 --> 00:03:54,819
we're good for it we can go ahead and

96
00:03:52,210 --> 00:03:56,920
try so I am not concerned about it I

97
00:03:54,819 --> 00:03:59,049
just think you might expect it to take a

98
00:03:56,919 --> 00:04:00,219
little bit longer as we kind of work our

99
00:03:59,050 --> 00:04:01,810
way through it now I'm gonna pop open

100
00:04:00,219 --> 00:04:03,370
the hand mate here a project here so all

101
00:04:01,810 --> 00:04:05,710
the files are loaded we're gonna first

102
00:04:03,370 --> 00:04:07,210
jump into that asset system as I said we

103
00:04:05,710 --> 00:04:08,590
did a lot of the work already so we're

104
00:04:07,210 --> 00:04:11,020
kind of in good shape here everything's

105
00:04:08,590 --> 00:04:12,459
you know in a reasonable setup so you

106
00:04:11,020 --> 00:04:14,260
know we've left ourselves a good chance

107
00:04:12,459 --> 00:04:15,879
of success remember we've got this parse

108
00:04:14,259 --> 00:04:18,159
hht here and what we're doing right now

109
00:04:15,879 --> 00:04:18,639
is we're calling that with a couple

110
00:04:18,160 --> 00:04:20,200
different things

111
00:04:18,639 --> 00:04:21,759
first of all we'll give me the a game

112
00:04:20,199 --> 00:04:23,709
asset structure and I remember this

113
00:04:21,759 --> 00:04:25,930
thing allows us to get at absolutely

114
00:04:23,709 --> 00:04:26,919
everything that's stored in the asset

115
00:04:25,930 --> 00:04:29,230
system at any give

116
00:04:26,920 --> 00:04:31,569
time as far as a game know so it's low

117
00:04:29,230 --> 00:04:33,280
to the hhas it knows about all the

118
00:04:31,569 --> 00:04:35,290
source files that we've actually used so

119
00:04:33,279 --> 00:04:38,529
far because it's actually created sort

120
00:04:35,290 --> 00:04:40,000
of a backing like a backing network if

121
00:04:38,529 --> 00:04:42,959
you will but tell us where absolutely

122
00:04:40,000 --> 00:04:45,550
everything is so that's the key for us

123
00:04:42,959 --> 00:04:48,009
differentiating anything that comes in

124
00:04:45,550 --> 00:04:49,900
anew it's a key for us to be able to

125
00:04:48,009 --> 00:04:51,670
look up and say do we already know about

126
00:04:49,899 --> 00:04:54,279
this thing do we have this things stored

127
00:04:51,670 --> 00:04:55,840
already in an HHA if so we can just

128
00:04:54,279 --> 00:04:57,639
update it if not then we're gonna have

129
00:04:55,839 --> 00:04:59,139
to add a new thing for it and so on so

130
00:04:57,639 --> 00:05:00,430
that's where all the tags go that's

131
00:04:59,139 --> 00:05:02,589
where all the the sort of higher level

132
00:05:00,430 --> 00:05:04,060
information goes after we kind of get it

133
00:05:02,589 --> 00:05:05,859
into the system we've also got this

134
00:05:04,060 --> 00:05:07,750
import source info import source info

135
00:05:05,860 --> 00:05:10,420
very important structure tells us about

136
00:05:07,750 --> 00:05:12,759
where it's coming from now write that

137
00:05:10,420 --> 00:05:14,830
import starts info tells us things now

138
00:05:12,759 --> 00:05:16,539
what you could kind of see here is that

139
00:05:14,829 --> 00:05:17,919
the flow is a little bit broken wise a

140
00:05:16,540 --> 00:05:19,120
little bit programmer I remember where

141
00:05:17,920 --> 00:05:21,939
you do this before is we're iterating

142
00:05:19,120 --> 00:05:23,769
over PNG files first okay we were saying

143
00:05:21,939 --> 00:05:26,290
look operating system tell me where all

144
00:05:23,769 --> 00:05:29,649
the PMT's are looking each PMG in series

145
00:05:26,290 --> 00:05:31,870
okay take that say what's the source if

146
00:05:29,649 --> 00:05:34,209
over that PNG right what's the name of

147
00:05:31,870 --> 00:05:35,439
it what's the last right modification

148
00:05:34,209 --> 00:05:37,839
time okay that's the formation we had

149
00:05:35,439 --> 00:05:41,410
for a PNG we were looking for it we then

150
00:05:37,839 --> 00:05:42,939
know that PNG maps to a game asset okay

151
00:05:41,410 --> 00:05:45,250
one of those game assets we've already

152
00:05:42,939 --> 00:05:46,899
processed it maps to it or it doesn't if

153
00:05:45,250 --> 00:05:48,279
we haven't seen it yet but if we have

154
00:05:46,899 --> 00:05:50,379
see before it maps to one of those

155
00:05:48,279 --> 00:05:52,119
things so that source info represents a

156
00:05:50,379 --> 00:05:53,110
particular PNG backing file now what's

157
00:05:52,120 --> 00:05:55,329
the problem here can you see it

158
00:05:53,110 --> 00:05:56,560
hopefully you can before we were doing

159
00:05:55,329 --> 00:05:58,120
with the import changed assets we're

160
00:05:56,560 --> 00:06:00,730
looting of the PNG we have the source

161
00:05:58,120 --> 00:06:02,350
info coming into the stage where we're

162
00:06:00,730 --> 00:06:04,330
looking at things for the first time

163
00:06:02,350 --> 00:06:06,760
that's where that source info is coming

164
00:06:04,329 --> 00:06:08,829
from we're not gonna have that here at

165
00:06:06,759 --> 00:06:10,599
parse hht this time so it's a little

166
00:06:08,829 --> 00:06:12,729
premature for us to flow that down the

167
00:06:10,600 --> 00:06:13,810
pipeline like this import source infos

168
00:06:12,730 --> 00:06:16,300
actually gonna happen

169
00:06:13,810 --> 00:06:18,699
in the next stage right why because the

170
00:06:16,300 --> 00:06:20,560
h80 is just one big text file and it's

171
00:06:18,699 --> 00:06:25,000
got a number of blocks each of which

172
00:06:20,560 --> 00:06:27,550
refer to one of those specific PNG files

173
00:06:25,000 --> 00:06:29,050
so every single block we parse we're

174
00:06:27,550 --> 00:06:30,340
going to be generating a new source info

175
00:06:29,050 --> 00:06:32,650
don't believe me well let's take a look

176
00:06:30,339 --> 00:06:35,169
if I go over here to import source info

177
00:06:32,649 --> 00:06:37,870
like so what you can see is it's got a

178
00:06:35,170 --> 00:06:39,730
name a description and an author the

179
00:06:37,870 --> 00:06:40,220
name is the thing that's going to name

180
00:06:39,730 --> 00:06:42,170
this but

181
00:06:40,220 --> 00:06:43,820
Euler asset the description is the thing

182
00:06:42,170 --> 00:06:45,710
that tells us about the asset we want

183
00:06:43,819 --> 00:06:48,529
and the author is a thing that said who

184
00:06:45,709 --> 00:06:51,289
made it now we don't know that stuff

185
00:06:48,529 --> 00:06:52,879
till we parse the block right so that's

186
00:06:51,290 --> 00:06:54,980
where this big change is coming from so

187
00:06:52,879 --> 00:06:56,480
again we did this I'm not upset that we

188
00:06:54,980 --> 00:06:58,160
did this is totally fine we were just

189
00:06:56,480 --> 00:06:59,930
trying to piece together the process

190
00:06:58,160 --> 00:07:01,850
from before we were we were locking the

191
00:06:59,930 --> 00:07:03,319
two things in together to make sure that

192
00:07:01,850 --> 00:07:04,730
they float all right so we weren't

193
00:07:03,319 --> 00:07:06,170
thinking about that time and we were

194
00:07:04,730 --> 00:07:07,900
supposed to be thinking about the time

195
00:07:06,170 --> 00:07:10,430
but now that we're gonna get it working

196
00:07:07,899 --> 00:07:11,839
correctly we need to start thinking

197
00:07:10,430 --> 00:07:13,189
about how that flow goes so the first

198
00:07:11,839 --> 00:07:14,629
I'm going to do is remove that import

199
00:07:13,189 --> 00:07:16,370
source info we're gonna move it over

200
00:07:14,629 --> 00:07:17,870
here to parse top level block because

201
00:07:16,370 --> 00:07:19,189
that's where it's going to go okay so we

202
00:07:17,870 --> 00:07:21,199
know that that's gonna come in here

203
00:07:19,189 --> 00:07:23,870
somewhere all right so we don't actually

204
00:07:21,199 --> 00:07:26,569
want this hht context to actually have

205
00:07:23,870 --> 00:07:28,220
this in it anymore because that hht

206
00:07:26,569 --> 00:07:30,199
context is really the thing that flows

207
00:07:28,220 --> 00:07:32,060
from top level block the top level block

208
00:07:30,199 --> 00:07:34,159
and so that's kind of coming in here now

209
00:07:32,060 --> 00:07:34,550
what you can also see is hey look at

210
00:07:34,160 --> 00:07:37,189
this

211
00:07:34,550 --> 00:07:39,500
it's basically destruct so really we

212
00:07:37,189 --> 00:07:41,509
already had this concept from before we

213
00:07:39,500 --> 00:07:43,339
just remade it it was just kind of a

214
00:07:41,509 --> 00:07:45,110
slight mistake that we made there where

215
00:07:43,339 --> 00:07:46,429
we're thinking like ah whoops right so

216
00:07:45,110 --> 00:07:48,199
we don't really want that we don't

217
00:07:46,430 --> 00:07:50,139
really want that at all so this import

218
00:07:48,199 --> 00:07:53,689
source info it's actually something that

219
00:07:50,139 --> 00:07:55,819
we can generate almost entirely to pass

220
00:07:53,689 --> 00:07:57,649
down we don't really have to track it at

221
00:07:55,819 --> 00:08:01,310
all so when we actually come in here to

222
00:07:57,649 --> 00:08:02,659
parse pieces right infinitive parse

223
00:08:01,310 --> 00:08:04,550
pieces we were actually gonna have to

224
00:08:02,660 --> 00:08:06,110
pass that source info we would just

225
00:08:04,550 --> 00:08:07,579
generate it right here because we have

226
00:08:06,110 --> 00:08:09,229
the actual information now there's

227
00:08:07,579 --> 00:08:10,459
something to remind yourself up here you

228
00:08:09,228 --> 00:08:12,349
can notice we had that there was that

229
00:08:10,459 --> 00:08:14,089
name field there why was there a name

230
00:08:12,350 --> 00:08:15,770
field there well turns out you can name

231
00:08:14,089 --> 00:08:16,849
each individual one of these assets I

232
00:08:15,769 --> 00:08:18,409
don't know that we really want to do

233
00:08:16,850 --> 00:08:19,790
that but we have the ability to do it

234
00:08:18,410 --> 00:08:22,010
why do we have the ability to do it well

235
00:08:19,790 --> 00:08:23,240
if we look at the source file format

236
00:08:22,009 --> 00:08:25,279
right so here's the file format for

237
00:08:23,240 --> 00:08:26,720
handmade here what we decide to do is

238
00:08:25,279 --> 00:08:28,429
have these annotations the annotation

239
00:08:26,720 --> 00:08:29,930
can be stripped we probably won't strip

240
00:08:28,430 --> 00:08:31,819
them but we designed it to be stripped

241
00:08:29,930 --> 00:08:33,320
as sort of a nod towards professional

242
00:08:31,819 --> 00:08:34,700
programming where we're saying like look

243
00:08:33,320 --> 00:08:36,229
you'd probably want to strip these if

244
00:08:34,700 --> 00:08:38,060
you're actually shipping this as an

245
00:08:36,229 --> 00:08:39,320
unmodeled game this game will be shipped

246
00:08:38,059 --> 00:08:40,639
in a way that allows people to mod it

247
00:08:39,320 --> 00:08:41,629
obviously because hey the old point of

248
00:08:40,639 --> 00:08:43,429
handmade hero is that you learn to

249
00:08:41,629 --> 00:08:44,659
program so we're probably not gonna

250
00:08:43,429 --> 00:08:46,009
strip these annotations but we want to

251
00:08:44,659 --> 00:08:47,569
be able to say you could strip them if

252
00:08:46,009 --> 00:08:49,309
you wanted to so you want to run the

253
00:08:47,570 --> 00:08:50,690
game without any of the cruft

254
00:08:49,309 --> 00:08:51,949
that's sitting there that's giving you

255
00:08:50,690 --> 00:08:52,970
this markup you could strip these

256
00:08:51,950 --> 00:08:54,230
annotations but if you look at what's in

257
00:08:52,970 --> 00:08:55,700
the annotations themselves

258
00:08:54,230 --> 00:08:57,830
you can see we've got the source file

259
00:08:55,700 --> 00:09:00,410
date source file checksum the base name

260
00:08:57,830 --> 00:09:02,660
offset the asset name asset description

261
00:09:00,409 --> 00:09:04,100
author the Airstream right sorry it's

262
00:09:02,659 --> 00:09:07,219
the base name AUSA I assume a base name

263
00:09:04,100 --> 00:09:10,100
right all assets in there asset name

264
00:09:07,220 --> 00:09:11,960
that's the one right that we don't fill

265
00:09:10,100 --> 00:09:14,420
out currently nobody fills that out we

266
00:09:11,960 --> 00:09:16,639
don't have a name for the asset right so

267
00:09:14,419 --> 00:09:19,099
what we want to do here is say well wait

268
00:09:16,639 --> 00:09:20,330
now we could if we wanted to we might as

269
00:09:19,100 --> 00:09:22,639
well support the features that we

270
00:09:20,330 --> 00:09:24,680
actually created so if we go into that

271
00:09:22,639 --> 00:09:25,819
hht which I guess I haven't loaded yet

272
00:09:24,679 --> 00:09:26,989
so I don't know why I thought I could

273
00:09:25,820 --> 00:09:29,090
bring it up but here we go

274
00:09:26,990 --> 00:09:31,700
it's right here right if we went into

275
00:09:29,090 --> 00:09:33,200
this hht what I could do is say oh all

276
00:09:31,700 --> 00:09:35,509
right so if I wanted to name one of

277
00:09:33,200 --> 00:09:37,879
these things I could I couldn't cure say

278
00:09:35,509 --> 00:09:40,580
that I've got a name for this you know

279
00:09:37,879 --> 00:09:42,320
this this block whatever it is block for

280
00:09:40,580 --> 00:09:43,910
us though one I could just call this

281
00:09:42,320 --> 00:09:45,800
like you know forest terrain or

282
00:09:43,909 --> 00:09:47,360
something if I wanted to now again I

283
00:09:45,799 --> 00:09:49,549
don't actually know that we care about

284
00:09:47,360 --> 00:09:50,899
this we don't know but we've got the

285
00:09:49,549 --> 00:09:52,549
ability to do it so we buy diesel

286
00:09:50,899 --> 00:09:53,959
support in the parser and you see what

287
00:09:52,549 --> 00:09:55,490
happens because basically free for us to

288
00:09:53,960 --> 00:09:57,230
do so if you look at what's happening

289
00:09:55,490 --> 00:09:58,490
here the author of the description these

290
00:09:57,230 --> 00:10:00,259
things are just meaningless feels that

291
00:09:58,490 --> 00:10:02,090
we parsed they take almost no effort to

292
00:10:00,259 --> 00:10:03,379
do we can simplify even further than

293
00:10:02,090 --> 00:10:05,480
we've simplified it here if you want to

294
00:10:03,379 --> 00:10:07,100
by just having a closet of a set of name

295
00:10:05,480 --> 00:10:08,509
fields based on an enum we don't even

296
00:10:07,100 --> 00:10:10,550
need to do that right now it's not

297
00:10:08,509 --> 00:10:12,470
necessary so I'm not gonna bother doing

298
00:10:10,549 --> 00:10:14,899
that but if you look I can just sort of

299
00:10:12,470 --> 00:10:17,360
do it here as a way of saying look let's

300
00:10:14,899 --> 00:10:18,949
just get the name into our fields as we

301
00:10:17,360 --> 00:10:20,480
were doing everything else and then we

302
00:10:18,950 --> 00:10:22,910
now support that right so now we've

303
00:10:20,480 --> 00:10:25,940
magically got that working so now the

304
00:10:22,909 --> 00:10:27,829
agency the the hht feels that we've got

305
00:10:25,940 --> 00:10:28,970
there we could support them all we can

306
00:10:27,830 --> 00:10:31,400
support all the things that were

307
00:10:28,970 --> 00:10:34,490
actually in that part of the the file

308
00:10:31,399 --> 00:10:36,620
format exactly as they were so that's

309
00:10:34,490 --> 00:10:38,120
great that's all done and now we know

310
00:10:36,620 --> 00:10:39,649
what that source info is that we've

311
00:10:38,120 --> 00:10:41,179
looked at it we can generate that at any

312
00:10:39,649 --> 00:10:43,100
time so if someone actually wants that

313
00:10:41,179 --> 00:10:44,959
source info we're good to go

314
00:10:43,100 --> 00:10:46,670
where would we use that source info well

315
00:10:44,960 --> 00:10:47,840
now let's start to peel that apart right

316
00:10:46,669 --> 00:10:49,789
because let's let's look at where that

317
00:10:47,840 --> 00:10:51,620
was actually going on drop down in here

318
00:10:49,789 --> 00:10:53,329
and report our assets here's where parse

319
00:10:51,620 --> 00:10:54,710
pieces was getting called right right

320
00:10:53,330 --> 00:10:56,000
here you could see how a parse piece was

321
00:10:54,710 --> 00:10:57,889
getting called we're still be calling

322
00:10:56,000 --> 00:10:59,480
parse pieces remember we did the work to

323
00:10:57,889 --> 00:11:00,620
generate that tag stuff we still got a

324
00:10:59,480 --> 00:11:02,090
little more work to do because we have

325
00:11:00,620 --> 00:11:04,159
two packs with those tags into an append

326
00:11:02,090 --> 00:11:06,649
array we want to have a way of appending

327
00:11:04,159 --> 00:11:08,000
those tags that we read inside the text

328
00:11:06,649 --> 00:11:10,069
file right these tags

329
00:11:08,000 --> 00:11:11,870
here right we need to append those to

330
00:11:10,070 --> 00:11:14,330
everything in addition to the ones that

331
00:11:11,870 --> 00:11:16,610
we automatically fill in on the grid for

332
00:11:14,330 --> 00:11:19,129
the user as part of that knowledge of

333
00:11:16,610 --> 00:11:21,470
what is a block what is a character we

334
00:11:19,129 --> 00:11:24,919
know certain tags apply to every single

335
00:11:21,470 --> 00:11:27,200
grid right each individual grid cell in

336
00:11:24,919 --> 00:11:28,819
one of those files has an acidic set of

337
00:11:27,200 --> 00:11:30,430
tags that always go with it but then

338
00:11:28,820 --> 00:11:33,440
there's the additional tags that come

339
00:11:30,429 --> 00:11:35,870
from the actual agency markup file those

340
00:11:33,440 --> 00:11:37,640
have to get combined right so what we

341
00:11:35,870 --> 00:11:39,769
want to do is parse that tag array into

342
00:11:37,639 --> 00:11:41,509
a tag block then the other tags that are

343
00:11:39,769 --> 00:11:43,009
coming from you automatically me

344
00:11:41,509 --> 00:11:44,210
understood ones from the cell layout

345
00:11:43,009 --> 00:11:45,980
those are sort of getting merged

346
00:11:44,210 --> 00:11:46,850
together each time I do it and we can

347
00:11:45,980 --> 00:11:48,139
probably clean up the way that's

348
00:11:46,850 --> 00:11:49,220
happening right now you know it's a

349
00:11:48,139 --> 00:11:50,480
little bit janky the way that's doing

350
00:11:49,220 --> 00:11:52,279
that we're just trying to keep the code

351
00:11:50,480 --> 00:11:54,590
that we have we could try to tease that

352
00:11:52,279 --> 00:11:55,850
out a little bit more there's a bunch of

353
00:11:54,590 --> 00:11:58,399
things that we could do if we really

354
00:11:55,850 --> 00:11:59,830
wanted to that we would be able to sort

355
00:11:58,399 --> 00:12:04,429
of like make that a little bit more of a

356
00:11:59,830 --> 00:12:05,870
a programmable or richer system we could

357
00:12:04,429 --> 00:12:07,729
consider that a little later on right

358
00:12:05,870 --> 00:12:09,919
now I don't want to put too many things

359
00:12:07,730 --> 00:12:11,960
in the mix at once I just want to do it

360
00:12:09,919 --> 00:12:13,610
as close as positive regional way that

361
00:12:11,960 --> 00:12:16,190
we're going to do it right so that's

362
00:12:13,610 --> 00:12:19,039
fine anyway when we go back here to the

363
00:12:16,190 --> 00:12:20,510
parts pieces set the parts pieces set is

364
00:12:19,039 --> 00:12:22,129
going to give us back the import type so

365
00:12:20,509 --> 00:12:24,559
the import so it's getting acted on here

366
00:12:22,129 --> 00:12:27,019
if you look at how that import type is

367
00:12:24,559 --> 00:12:30,259
being acted on what you can see is that

368
00:12:27,019 --> 00:12:32,990
in there the source info is actually

369
00:12:30,259 --> 00:12:34,189
getting pushed down because multi-talent

370
00:12:32,990 --> 00:12:37,850
import signal time prayer and plate

371
00:12:34,190 --> 00:12:40,160
import all generate actual assets in the

372
00:12:37,850 --> 00:12:42,860
backing asset store in the HHA right

373
00:12:40,159 --> 00:12:44,990
when it generates those hht assets

374
00:12:42,860 --> 00:12:47,450
that's what it needs those strings so

375
00:12:44,990 --> 00:12:49,669
that's the time that we need to provide

376
00:12:47,450 --> 00:12:51,230
this info structure and so if you look

377
00:12:49,669 --> 00:12:53,599
at how that was happening up here right

378
00:12:51,230 --> 00:12:56,539
we can just mirror this process almost

379
00:12:53,600 --> 00:12:58,759
exactly the way that we were going to do

380
00:12:56,539 --> 00:13:00,529
it before so let's go ahead and do that

381
00:12:58,759 --> 00:13:02,509
let's just pull this code out because

382
00:13:00,529 --> 00:13:04,730
it's exactly the code that we need let's

383
00:13:02,509 --> 00:13:06,980
just pull this code out and work with it

384
00:13:04,730 --> 00:13:10,129
so I'm gonna grab it here I'm gonna pull

385
00:13:06,980 --> 00:13:12,289
it up to do this parse top level block

386
00:13:10,129 --> 00:13:14,689
we've got when we come through here

387
00:13:12,289 --> 00:13:17,088
after we're done parsing assuming that

388
00:13:14,690 --> 00:13:19,580
we had a valid parse right because I can

389
00:13:17,089 --> 00:13:21,740
if I want to I can couch this I can say

390
00:13:19,580 --> 00:13:23,600
look as I went through here I did

391
00:13:21,740 --> 00:13:24,919
bunch of parsing I can always do a

392
00:13:23,600 --> 00:13:26,389
really simple check mirror we designed

393
00:13:24,919 --> 00:13:28,309
that parser pretty nice that was the

394
00:13:26,389 --> 00:13:29,689
primary parts of tokenizer we designed

395
00:13:28,309 --> 00:13:31,579
that token as your nightly show that it

396
00:13:29,690 --> 00:13:33,470
just remembers if it's ever had an error

397
00:13:31,580 --> 00:13:36,080
so when we're doing parsing we can just

398
00:13:33,470 --> 00:13:37,610
say look if there was ever an error we

399
00:13:36,080 --> 00:13:40,070
don't want to do this so we just wrap it

400
00:13:37,610 --> 00:13:42,139
in an if parsing block and off we go

401
00:13:40,070 --> 00:13:43,940
right so that's really a pretty simple

402
00:13:42,139 --> 00:13:45,019
way to make sure that we don't get into

403
00:13:43,940 --> 00:13:46,580
here I'm gonna move it over here so it's

404
00:13:45,019 --> 00:13:49,129
outside away in my head right I'm that's

405
00:13:46,580 --> 00:13:50,800
a pretty simple way to make sure that

406
00:13:49,129 --> 00:13:53,659
we're not gonna have any problems

407
00:13:50,799 --> 00:13:55,699
processing our data when we actually got

408
00:13:53,659 --> 00:13:57,620
some kind of a bogus block in the file

409
00:13:55,700 --> 00:13:59,780
right so we're just only keep it -

410
00:13:57,620 --> 00:14:01,370
syntactically correct blocks that's the

411
00:13:59,779 --> 00:14:02,449
only kind that we're gonna process we

412
00:14:01,370 --> 00:14:03,860
won't look at anything else

413
00:14:02,450 --> 00:14:05,210
we'll stop the processing there and say

414
00:14:03,860 --> 00:14:08,600
look you got a problem your HTTP I'll

415
00:14:05,210 --> 00:14:10,730
fix it and then we'll talk right so

416
00:14:08,600 --> 00:14:13,070
parse pieces really wants to go down

417
00:14:10,730 --> 00:14:15,170
here and this is why I was saying before

418
00:14:13,070 --> 00:14:16,970
this found equals true or found equals

419
00:14:15,169 --> 00:14:18,559
false or is that we kind of want to

420
00:14:16,970 --> 00:14:20,450
change a little bit about the way that's

421
00:14:18,559 --> 00:14:22,579
working I think that import type is

422
00:14:20,450 --> 00:14:23,750
really the you know sort of something

423
00:14:22,580 --> 00:14:25,310
that wants to happen a little later on

424
00:14:23,750 --> 00:14:28,009
and so on so we really want to do I

425
00:14:25,309 --> 00:14:30,649
think is we want to say when we set up

426
00:14:28,009 --> 00:14:32,120
the default situation here that's more

427
00:14:30,649 --> 00:14:34,039
what we're looking for so when we come

428
00:14:32,120 --> 00:14:36,440
through here we want to pull out this

429
00:14:34,039 --> 00:14:38,629
part where we grab and you can sort of

430
00:14:36,440 --> 00:14:40,700
see there's one part week we we have an

431
00:14:38,629 --> 00:14:43,009
issue this require token part we do the

432
00:14:40,700 --> 00:14:46,580
token string we still need that part

433
00:14:43,009 --> 00:14:48,110
here to occur only in the case where

434
00:14:46,580 --> 00:14:50,000
it's not the default right so we still

435
00:14:48,110 --> 00:14:52,009
want to be able to do it this way we say

436
00:14:50,000 --> 00:14:53,870
look is it the default blah blah blah

437
00:14:52,009 --> 00:14:55,519
doesn't have a name if it does have a

438
00:14:53,870 --> 00:14:56,750
name or if it rather there's nothing

439
00:14:55,519 --> 00:14:58,669
well block it does have a names to make

440
00:14:56,750 --> 00:14:59,960
sure we get that and get that file name

441
00:14:58,669 --> 00:15:00,769
out of there but either way we just need

442
00:14:59,960 --> 00:15:03,230
to know which one it is

443
00:15:00,769 --> 00:15:05,480
and so the found part of things is gonna

444
00:15:03,230 --> 00:15:07,490
change I'm gonna change us to is default

445
00:15:05,480 --> 00:15:09,230
and I'm gonna say that the is default is

446
00:15:07,490 --> 00:15:11,360
true I'm sorry as false I'm gonna say

447
00:15:09,230 --> 00:15:13,279
that is default gets set to true on the

448
00:15:11,360 --> 00:15:15,080
case for the token equals the default

449
00:15:13,279 --> 00:15:17,149
otherwise what I'm gonna do down here is

450
00:15:15,080 --> 00:15:19,639
say alright we'll get the filename and

451
00:15:17,149 --> 00:15:20,509
we'll leave is default to false right so

452
00:15:19,639 --> 00:15:23,379
hopefully that makes sense

453
00:15:20,509 --> 00:15:23,379
for everybody

454
00:15:25,269 --> 00:15:32,629
okay so now as we go what we want to do

455
00:15:29,360 --> 00:15:35,329
down here is say look if pretty much

456
00:15:32,629 --> 00:15:37,339
period we want a partial thing but if

457
00:15:35,328 --> 00:15:39,799
it's the default block we don't want to

458
00:15:37,339 --> 00:15:41,269
process any art assets right like we

459
00:15:39,799 --> 00:15:47,208
don't want to do anything with art

460
00:15:41,269 --> 00:15:48,560
assets if we don't yeah if we if we are

461
00:15:47,208 --> 00:15:50,299
saying that we're just gonna set the

462
00:15:48,559 --> 00:15:52,278
default settings for any given block we

463
00:15:50,299 --> 00:15:55,000
don't want to like read PNG or like

464
00:15:52,278 --> 00:15:57,139
create the tag the matrix for the tag

465
00:15:55,000 --> 00:15:58,490
grid and all that sort of stuff right we

466
00:15:57,139 --> 00:15:59,839
don't want to do that ever if we're

467
00:15:58,490 --> 00:16:01,459
actually just parts of people up block

468
00:15:59,839 --> 00:16:03,620
we just want to get the defaults in and

469
00:16:01,458 --> 00:16:05,149
be done with it so we want to make sure

470
00:16:03,620 --> 00:16:06,919
that we do that check later so I'm gonna

471
00:16:05,149 --> 00:16:08,299
go ahead and grab this part here we're

472
00:16:06,919 --> 00:16:09,828
gonna move it down and then we're

473
00:16:08,299 --> 00:16:11,778
getting rid of that found right this

474
00:16:09,828 --> 00:16:13,729
found thing is not we want we want an if

475
00:16:11,778 --> 00:16:15,649
default and we want that to happen down

476
00:16:13,730 --> 00:16:18,740
here so what we want to do is say all

477
00:16:15,649 --> 00:16:21,110
right in the case that we have a default

478
00:16:18,740 --> 00:16:25,549
then we're gonna set that if up down

479
00:16:21,110 --> 00:16:28,430
here to deal with that right so if it is

480
00:16:25,549 --> 00:16:30,679
not the default then off we go so all of

481
00:16:28,429 --> 00:16:32,088
this stuff here right this all just

482
00:16:30,679 --> 00:16:34,789
works fine now

483
00:16:32,089 --> 00:16:36,230
what I could do and this now gives us

484
00:16:34,789 --> 00:16:39,198
the opportunity to make this maybe even

485
00:16:36,230 --> 00:16:41,360
a little more clean than it was before i

486
00:16:39,198 --> 00:16:43,219
we've got those fields right we've got

487
00:16:41,360 --> 00:16:45,680
these fields here these HTT fields what

488
00:16:43,220 --> 00:16:49,819
I could do is say look let's take those

489
00:16:45,679 --> 00:16:52,609
fields and let's let's think about a

490
00:16:49,818 --> 00:16:55,669
little bit how we want those to work if

491
00:16:52,610 --> 00:16:57,740
I just said from now on we've got hht

492
00:16:55,669 --> 00:17:00,769
fields and that's gonna start out with

493
00:16:57,740 --> 00:17:02,808
nothing in it right we just have to wait

494
00:17:00,769 --> 00:17:05,240
we've got no no fields in there we look

495
00:17:02,808 --> 00:17:06,828
and see if it's the default we you know

496
00:17:05,240 --> 00:17:09,048
we're gonna do this and if it wasn't we

497
00:17:06,828 --> 00:17:11,149
gonna do this what if we just said now

498
00:17:09,048 --> 00:17:13,509
let's not do that let's just say is

499
00:17:11,150 --> 00:17:17,089
default is directly defined by this

500
00:17:13,509 --> 00:17:19,459
right so meaning we just set is default

501
00:17:17,088 --> 00:17:21,889
right away and then the only thing that

502
00:17:19,459 --> 00:17:24,980
we actually need to do here is we just

503
00:17:21,890 --> 00:17:28,580
need to say well if it's not the default

504
00:17:24,980 --> 00:17:30,589
then we need to read in that file name

505
00:17:28,579 --> 00:17:33,379
but otherwise we don't have to right

506
00:17:30,589 --> 00:17:35,709
then this whole thing can just operate

507
00:17:33,380 --> 00:17:38,390
on the fields array that we've got right

508
00:17:35,710 --> 00:17:39,110
so I can replace all of those that were

509
00:17:38,390 --> 00:17:40,880
previously using

510
00:17:39,109 --> 00:17:43,009
in Texas the dot syntax we're just

511
00:17:40,880 --> 00:17:45,020
putting it into our local the one on the

512
00:17:43,009 --> 00:17:48,379
stack right and then what I could do is

513
00:17:45,019 --> 00:17:50,029
say at the end once we've parsed all of

514
00:17:48,380 --> 00:17:53,059
the stuff like everything that there is

515
00:17:50,029 --> 00:17:55,399
right at the end if it's the default

516
00:17:53,058 --> 00:17:58,940
then we'll write the default otherwise

517
00:17:55,400 --> 00:18:00,710
we'll merge in the default right and

518
00:17:58,940 --> 00:18:02,390
similarly up here we could do that part

519
00:18:00,710 --> 00:18:04,308
as well if we want to I don't really

520
00:18:02,390 --> 00:18:05,870
know you know in other words we could do

521
00:18:04,308 --> 00:18:06,980
it this way where we're saying look if

522
00:18:05,869 --> 00:18:09,109
it's the default well actually I guess

523
00:18:06,980 --> 00:18:12,289
it's it's just this part to be honest

524
00:18:09,109 --> 00:18:14,359
right we would just say look if it's the

525
00:18:12,289 --> 00:18:16,460
default then we don't have to do

526
00:18:14,359 --> 00:18:19,609
anything if it is other than the default

527
00:18:16,460 --> 00:18:21,860
then we write our fields from the the

528
00:18:19,609 --> 00:18:24,649
ones that are in the in the context

529
00:18:21,859 --> 00:18:27,769
right so that's like if it's a default

530
00:18:24,650 --> 00:18:29,660
we go just by reading a new set of

531
00:18:27,769 --> 00:18:31,160
defaults and presumably we don't want to

532
00:18:29,660 --> 00:18:32,630
keep the defaults from before because

533
00:18:31,160 --> 00:18:33,980
maybe you were trying to remove some

534
00:18:32,630 --> 00:18:35,660
defaults or something I'm not sure we

535
00:18:33,980 --> 00:18:38,150
could choose to merge default I'm not

536
00:18:35,660 --> 00:18:39,558
sure which one we want to do it would

537
00:18:38,150 --> 00:18:41,690
the only difference would be we would

538
00:18:39,558 --> 00:18:43,700
put this line up here and I just don't

539
00:18:41,690 --> 00:18:45,679
know which of those we want to do I

540
00:18:43,700 --> 00:18:47,410
suppose you can always clear defaults by

541
00:18:45,679 --> 00:18:51,440
just putting in a quote unquote

542
00:18:47,410 --> 00:18:52,970
so maybe you want to just have them you

543
00:18:51,440 --> 00:18:55,160
know let's just let's just say that we

544
00:18:52,970 --> 00:18:56,900
always cascade defaults so so that would

545
00:18:55,160 --> 00:18:58,429
just look like this right so the fields

546
00:18:56,900 --> 00:19:00,019
always gets initialized to the defaults

547
00:18:58,429 --> 00:19:01,660
and then even if you're reading defaults

548
00:19:00,019 --> 00:19:03,859
then all we do is just like overwrite

549
00:19:01,660 --> 00:19:05,660
ones that you change what we keep any

550
00:19:03,859 --> 00:19:07,129
ones that you didn't talk about so that

551
00:19:05,660 --> 00:19:08,779
just parses straight through and then at

552
00:19:07,130 --> 00:19:11,270
the end we say look if it's the default

553
00:19:08,779 --> 00:19:12,918
we'll write back the default right so

554
00:19:11,269 --> 00:19:14,179
we'll say the default fields come from

555
00:19:12,919 --> 00:19:16,429
whichever fields we just process

556
00:19:14,179 --> 00:19:18,350
otherwise we just process this as a

557
00:19:16,429 --> 00:19:19,610
normal art asset right so now you can

558
00:19:18,349 --> 00:19:21,230
see that got a little cleaner this is

559
00:19:19,609 --> 00:19:23,298
now straight line code you don't have to

560
00:19:21,230 --> 00:19:25,308
read anything around it or in that stuff

561
00:19:23,298 --> 00:19:27,500
literally the only thing we do is say

562
00:19:25,308 --> 00:19:29,058
well if it's a default it doesn't have a

563
00:19:27,500 --> 00:19:31,069
name because we just don't put one there

564
00:19:29,058 --> 00:19:32,539
so we don't require you to have that

565
00:19:31,069 --> 00:19:34,159
name string that we would otherwise

566
00:19:32,539 --> 00:19:36,678
require to have that's the only

567
00:19:34,160 --> 00:19:38,000
difference right between them so all

568
00:19:36,679 --> 00:19:40,580
this stuff flows properly now I think

569
00:19:38,000 --> 00:19:42,650
looks nice to me we've got the default

570
00:19:40,579 --> 00:19:44,720
handling or not as appropriate in here

571
00:19:42,650 --> 00:19:46,160
we can also say that we won't set the

572
00:19:44,720 --> 00:19:47,720
default if we could we can if this

573
00:19:46,160 --> 00:19:49,580
entire thing if you want to so it looks

574
00:19:47,720 --> 00:19:50,990
a little bit more like that and that way

575
00:19:49,579 --> 00:19:52,579
we just say look don't enter this block

576
00:19:50,990 --> 00:19:54,528
unless things went

577
00:19:52,579 --> 00:19:58,308
properly now the other thing we can do

578
00:19:54,528 --> 00:20:00,140
here is go and do this part a little bit

579
00:19:58,308 --> 00:20:00,398
differently as well so we'll do it like

580
00:20:00,140 --> 00:20:02,659
that

581
00:20:00,398 --> 00:20:04,939
so now we could do is make our parse

582
00:20:02,659 --> 00:20:06,380
pieces call actually get all the data

583
00:20:04,940 --> 00:20:08,120
that it actually needed because we've

584
00:20:06,380 --> 00:20:10,580
already parsed everything I mean only

585
00:20:08,119 --> 00:20:12,558
big if the only big if is this guy right

586
00:20:10,579 --> 00:20:14,480
here we haven't done him yet but that's

587
00:20:12,558 --> 00:20:16,009
okay because actually is gonna be pretty

588
00:20:14,480 --> 00:20:17,630
simple we're just gonna use the tag

589
00:20:16,009 --> 00:20:18,950
builder we already have and then parse

590
00:20:17,630 --> 00:20:21,080
the array that comes back from it or I

591
00:20:18,950 --> 00:20:23,240
should say pass the array that comes

592
00:20:21,079 --> 00:20:24,918
back to it over to parse pieces as the

593
00:20:23,240 --> 00:20:26,870
append tag type it's gonna be easy

594
00:20:24,919 --> 00:20:29,149
you'll see trust me on this one's gonna

595
00:20:26,869 --> 00:20:31,278
be easy alright so anyway we come down

596
00:20:29,148 --> 00:20:33,018
through here but this import tag array

597
00:20:31,278 --> 00:20:34,278
that we do for a pen that's the thing

598
00:20:33,019 --> 00:20:35,990
that we know we're gonna have to deal

599
00:20:34,278 --> 00:20:37,190
with that in a little bit right so that

600
00:20:35,990 --> 00:20:44,058
append tagger is gonna have to be up

601
00:20:37,190 --> 00:20:46,788
here and it's gonna have to get filled

602
00:20:44,058 --> 00:20:48,648
out by this part sag list so I mean I

603
00:20:46,788 --> 00:20:49,970
might as well just do that and say hey

604
00:20:48,648 --> 00:20:51,469
give us back the tag right I guess I

605
00:20:49,970 --> 00:20:54,829
could do another way and say look return

606
00:20:51,470 --> 00:20:56,210
that to us there we go um so and maybe

607
00:20:54,829 --> 00:20:57,740
I'll call that append tags just to make

608
00:20:56,210 --> 00:20:58,730
it a little bit clearer what that is

609
00:20:57,740 --> 00:21:00,349
okay someone's reading through the code

610
00:20:58,730 --> 00:21:02,690
just the word depends like what's going

611
00:21:00,349 --> 00:21:04,759
on there so we got a pin tags we're

612
00:21:02,690 --> 00:21:07,100
gonna grab those tags out those the

613
00:21:04,759 --> 00:21:09,019
Pentax are gonna get added on here right

614
00:21:07,099 --> 00:21:10,849
and then we've got those imported tags

615
00:21:09,019 --> 00:21:12,620
right here so this little thing where we

616
00:21:10,849 --> 00:21:14,689
do parse pieces that should actually

617
00:21:12,619 --> 00:21:16,158
work because I think we poured it all

618
00:21:14,690 --> 00:21:17,570
yesterday it should be pretty good

619
00:21:16,159 --> 00:21:19,039
actually so I think we're actually

620
00:21:17,569 --> 00:21:20,269
fairly good to go there then what's

621
00:21:19,038 --> 00:21:22,700
gonna happen is when we're done with

622
00:21:20,269 --> 00:21:25,339
that what we're gonna do is we're gonna

623
00:21:22,700 --> 00:21:26,450
get back whatever the import type is you

624
00:21:25,339 --> 00:21:28,220
can see how we're doing this here this

625
00:21:26,450 --> 00:21:29,480
was old news we don't really need that

626
00:21:28,220 --> 00:21:31,339
anymore because we got this right up

627
00:21:29,480 --> 00:21:33,200
here here's the code that allows us to

628
00:21:31,339 --> 00:21:34,730
actually do the import and then here is

629
00:21:33,200 --> 00:21:35,690
the part where we air out on the case

630
00:21:34,730 --> 00:21:38,269
where we don't actually know what the

631
00:21:35,690 --> 00:21:39,919
block type is so we just need that block

632
00:21:38,269 --> 00:21:41,690
token to get passed in here I remember

633
00:21:39,919 --> 00:21:44,389
the block token was passed in to us

634
00:21:41,690 --> 00:21:47,269
right and so we you know kind of know

635
00:21:44,388 --> 00:21:49,250
there what's going on all right so once

636
00:21:47,269 --> 00:21:51,138
we have all of that working and we do

637
00:21:49,250 --> 00:21:53,869
that parse pieces and all that stuff and

638
00:21:51,138 --> 00:21:55,519
everything's fine dandy this is the only

639
00:21:53,869 --> 00:21:57,229
part that we now have to parse remember

640
00:21:55,519 --> 00:21:58,730
we've got some some busy work to do here

641
00:21:57,230 --> 00:21:59,899
we need to know like sort of stuff about

642
00:21:58,730 --> 00:22:01,399
where we're gonna put the memory and all

643
00:21:59,898 --> 00:22:02,658
that sort stuff we have all that worked

644
00:22:01,398 --> 00:22:03,829
out it's not really a big deal but we

645
00:22:02,659 --> 00:22:06,230
need to kind of merge these things

646
00:22:03,829 --> 00:22:07,730
together and so if you look here

647
00:22:06,230 --> 00:22:09,259
we've got the error stream you can see

648
00:22:07,730 --> 00:22:11,779
where we've got the the error buffer

649
00:22:09,259 --> 00:22:13,460
going here and what we wanted to do in

650
00:22:11,779 --> 00:22:17,329
each of these cases is we want the error

651
00:22:13,460 --> 00:22:19,490
stream to go with the file in question

652
00:22:17,329 --> 00:22:21,470
so any time we get errors we want to

653
00:22:19,490 --> 00:22:24,200
vector them towards the file in question

654
00:22:21,470 --> 00:22:26,960
now in order to do that we want to start

655
00:22:24,200 --> 00:22:29,419
making it so that we're looking at which

656
00:22:26,960 --> 00:22:31,400
file is talked about by the block so if

657
00:22:29,419 --> 00:22:35,179
the block says block o1 bla bla bla bla

658
00:22:31,400 --> 00:22:37,940
or whatever dot PNG we want to put all

659
00:22:35,179 --> 00:22:40,009
the errors so that they are on that PNG

660
00:22:37,940 --> 00:22:42,558
so anyways looking at that page here as

661
00:22:40,009 --> 00:22:44,720
in wants to ask about was in on this PNG

662
00:22:42,558 --> 00:22:46,129
work okay it'll be like no it didn't if

663
00:22:44,720 --> 00:22:48,380
there was an error in there so we've got

664
00:22:46,130 --> 00:22:51,799
those recorded with the actual art asset

665
00:22:48,380 --> 00:22:54,440
as well as whatever the actual import

666
00:22:51,798 --> 00:22:56,990
process is so we kind of want that to be

667
00:22:54,440 --> 00:22:58,880
a little bit clearer so let's see how we

668
00:22:56,990 --> 00:23:00,829
start to make this stuff all flow

669
00:22:58,880 --> 00:23:02,570
together first of all this needs the

670
00:23:00,829 --> 00:23:04,909
temporary nough that's totally fine

671
00:23:02,569 --> 00:23:06,798
because we can add that in here so you

672
00:23:04,910 --> 00:23:08,779
know we've got the temporary note put in

673
00:23:06,798 --> 00:23:10,308
the context no problem so anyone who

674
00:23:08,779 --> 00:23:11,839
wanted to use a temporary nough here i

675
00:23:10,308 --> 00:23:13,369
can just do that although it you know

676
00:23:11,839 --> 00:23:14,928
what now i look at it it looks like it

677
00:23:13,369 --> 00:23:16,339
only wants it local it doesn't really

678
00:23:14,929 --> 00:23:17,509
even need it for anything else so to be

679
00:23:16,339 --> 00:23:19,459
honest with you i guess we don't even

680
00:23:17,509 --> 00:23:21,048
need that it can just do it here so

681
00:23:19,460 --> 00:23:22,880
that's all fine so that just looks like

682
00:23:21,048 --> 00:23:25,308
it's totally fine it'll it'll handle

683
00:23:22,880 --> 00:23:26,720
itself no issues so really i guess what

684
00:23:25,308 --> 00:23:28,069
we need is here we need that the file

685
00:23:26,720 --> 00:23:29,990
group that we're opening the file with

686
00:23:28,069 --> 00:23:31,159
and then we've got some some more

687
00:23:29,990 --> 00:23:32,390
information here that we've got to fill

688
00:23:31,160 --> 00:23:34,340
in like that file infrastructure

689
00:23:32,390 --> 00:23:36,290
remember we added support to the

690
00:23:34,339 --> 00:23:38,779
platform layer yesterday to be able to

691
00:23:36,289 --> 00:23:40,940
give us file infos by name so you should

692
00:23:38,779 --> 00:23:42,410
be able to use that here to construct a

693
00:23:40,940 --> 00:23:43,519
name that we can then get a filing for

694
00:23:42,410 --> 00:23:45,019
from so that's going to be the main

695
00:23:43,519 --> 00:23:46,369
thing other than that this all looks

696
00:23:45,019 --> 00:23:47,569
like it flows you can see it getting the

697
00:23:46,369 --> 00:23:49,099
file buffer size here it's going to read

698
00:23:47,569 --> 00:23:51,769
the data in that's going to close it

699
00:23:49,099 --> 00:23:53,659
it's gonna look at the matching and see

700
00:23:51,769 --> 00:23:55,789
whether or not the thing changed since

701
00:23:53,660 --> 00:23:57,169
the last time it read it and if it did

702
00:23:55,789 --> 00:23:58,579
or didn't it's going to have to do some

703
00:23:57,169 --> 00:24:00,320
time frames now there's an interesting

704
00:23:58,579 --> 00:24:03,079
thing about this that we're going to

705
00:24:00,319 --> 00:24:05,450
have to consider that's a little bit

706
00:24:03,079 --> 00:24:07,960
Swing key here right and this parts

707
00:24:05,450 --> 00:24:07,960
going to be hard

708
00:24:11,919 --> 00:24:23,259
we don't know whether or not the user

709
00:24:17,470 --> 00:24:27,679
has changed the data in the hht that

710
00:24:23,259 --> 00:24:29,419
corresponds to this file right we're

711
00:24:27,679 --> 00:24:30,679
looking at the PMG we can see whether or

712
00:24:29,419 --> 00:24:32,840
not you've touched a PNG because the

713
00:24:30,679 --> 00:24:34,519
date on the PNG will tell us whether or

714
00:24:32,839 --> 00:24:36,079
not it's the same as the one that we

715
00:24:34,519 --> 00:24:37,668
read in last time if the two dates are

716
00:24:36,079 --> 00:24:39,558
different then we have reason to believe

717
00:24:37,669 --> 00:24:41,720
that they've changed right so that's

718
00:24:39,558 --> 00:24:43,160
pretty simple we don't have to do a lot

719
00:24:41,720 --> 00:24:44,779
of work there to know whether we should

720
00:24:43,160 --> 00:24:46,940
be processed a file really clean and

721
00:24:44,779 --> 00:24:48,109
simple not a lot of problems there now

722
00:24:46,940 --> 00:24:49,220
there are really you know you could say

723
00:24:48,109 --> 00:24:51,139
well the date isn't completely

724
00:24:49,220 --> 00:24:53,089
dispositive you know maybe the dates say

725
00:24:51,140 --> 00:24:54,650
the same or who knows what right we'd

726
00:24:53,089 --> 00:24:56,058
only care about crazy education like

727
00:24:54,650 --> 00:24:58,220
this because the person could always

728
00:24:56,058 --> 00:24:59,808
retouch the file if they for some reason

729
00:24:58,220 --> 00:25:01,490
it's not reinforcing for them if some

730
00:24:59,808 --> 00:25:04,490
weird education occurs so don't really

731
00:25:01,490 --> 00:25:05,720
care too much about that but we know

732
00:25:04,490 --> 00:25:07,548
that the file date will give us that

733
00:25:05,720 --> 00:25:09,200
information pretty much anytime that

734
00:25:07,548 --> 00:25:10,548
there's any bit of substantive change -

735
00:25:09,200 --> 00:25:11,659
the thing is I'm gonna repaint anything

736
00:25:10,548 --> 00:25:13,158
in it receives it it's gonna have a

737
00:25:11,659 --> 00:25:15,409
different file date on it on that

738
00:25:13,159 --> 00:25:17,539
machine so it will force re-importation

739
00:25:15,409 --> 00:25:20,090
and so that works totally fine what

740
00:25:17,538 --> 00:25:22,308
doesn't work totally fine is the fact

741
00:25:20,089 --> 00:25:25,099
that when are we looking here and we see

742
00:25:22,308 --> 00:25:27,259
that the hht file has these tags or the

743
00:25:25,099 --> 00:25:29,629
name or the description or anything else

744
00:25:27,259 --> 00:25:31,908
in there we don't know whether that has

745
00:25:29,630 --> 00:25:33,679
changed so that information that's in

746
00:25:31,909 --> 00:25:36,169
the hht file that says what should

747
00:25:33,679 --> 00:25:38,090
happen Zack could have changed and the

748
00:25:36,169 --> 00:25:40,429
only way we can really know whether that

749
00:25:38,089 --> 00:25:43,759
has changed or not is to actually do

750
00:25:40,429 --> 00:25:46,490
some kind of a diff on the data right

751
00:25:43,759 --> 00:25:47,629
we're going to have to have some kind of

752
00:25:46,490 --> 00:25:51,650
of checksumming

753
00:25:47,630 --> 00:25:54,200
that says is this actual data different

754
00:25:51,650 --> 00:25:55,460
because if the data is different then

755
00:25:54,200 --> 00:25:56,659
we're going to have to do something

756
00:25:55,460 --> 00:25:58,940
about it

757
00:25:56,659 --> 00:26:00,409
and the data's not different then we

758
00:25:58,940 --> 00:26:02,570
only have to do something about it if

759
00:26:00,409 --> 00:26:04,039
the underlying files date has changed or

760
00:26:02,569 --> 00:26:06,109
the checksum we also do check something

761
00:26:04,038 --> 00:26:08,529
in here as sort of a backup to the file

762
00:26:06,109 --> 00:26:08,529
date right

763
00:26:12,109 --> 00:26:18,689
that's trickier so if we go over to the

764
00:26:15,569 --> 00:26:20,129
shared side of things we actually have a

765
00:26:18,690 --> 00:26:22,799
murmur hash that was thrown in here

766
00:26:20,130 --> 00:26:24,240
right this thing right here and we have

767
00:26:22,799 --> 00:26:26,279
the ability to do sort of this mirror

768
00:26:24,240 --> 00:26:28,470
hash update and so if we want to murmur

769
00:26:26,279 --> 00:26:30,539
hash something you can see we call this

770
00:26:28,470 --> 00:26:33,960
checksum of and we give it a buffer

771
00:26:30,539 --> 00:26:35,579
right and we can also just feed it one

772
00:26:33,960 --> 00:26:38,130
thing at a time right you can see here

773
00:26:35,579 --> 00:26:40,859
we can just call murmur hash update as

774
00:26:38,130 --> 00:26:42,900
many times as we want to and then call

775
00:26:40,859 --> 00:26:45,359
murmur hash finalize and be done with it

776
00:26:42,900 --> 00:26:47,700
right so if we wanted to we could

777
00:26:45,359 --> 00:26:50,009
actually in here have a thing that check

778
00:26:47,700 --> 00:26:53,940
sums the actual data that we're going to

779
00:26:50,009 --> 00:26:56,250
store prior to doing anything else right

780
00:26:53,940 --> 00:27:00,120
and so what we could do is say let's

781
00:26:56,250 --> 00:27:01,829
start check something that in addition

782
00:27:00,119 --> 00:27:04,259
to the rest of the stuff that we check

783
00:27:01,829 --> 00:27:06,029
something so that we can know whether or

784
00:27:04,259 --> 00:27:07,680
not this thing changed right so we can

785
00:27:06,029 --> 00:27:10,889
know whether or not the PNG changed or

786
00:27:07,680 --> 00:27:13,170
not now if you look at what happens in

787
00:27:10,890 --> 00:27:14,250
here we can start getting now into the

788
00:27:13,170 --> 00:27:17,910
part that's going to be a little bit

789
00:27:14,250 --> 00:27:20,009
sort of a squeakier right this part is

790
00:27:17,910 --> 00:27:22,170
the part that's going to be tough okay

791
00:27:20,009 --> 00:27:24,539
so if you look at what happens here we

792
00:27:22,170 --> 00:27:27,000
generate the string hash we get the the

793
00:27:24,539 --> 00:27:28,500
backing file and then we see whether the

794
00:27:27,000 --> 00:27:30,150
dates have changed if the dates have

795
00:27:28,500 --> 00:27:32,910
changed then we start processing the

796
00:27:30,150 --> 00:27:36,030
thing we need to duplicate this logic

797
00:27:32,910 --> 00:27:37,529
certainly so that we can do the same

798
00:27:36,029 --> 00:27:39,509
sort of backing store testing that we've

799
00:27:37,529 --> 00:27:41,670
done before the problem is like I said

800
00:27:39,509 --> 00:27:43,319
we don't know whether the ATAC changed

801
00:27:41,670 --> 00:27:46,170
and I don't know where we're gonna store

802
00:27:43,319 --> 00:27:49,220
that information I guess we have to put

803
00:27:46,170 --> 00:27:53,430
some checksumming into the annotations

804
00:27:49,220 --> 00:27:55,230
for the HHA file I'm not sure what else

805
00:27:53,430 --> 00:27:56,400
we could do I think we're gonna have to

806
00:27:55,230 --> 00:27:57,480
do that because you don't really have

807
00:27:56,400 --> 00:28:00,000
any other way now we left ourselves

808
00:27:57,480 --> 00:28:01,769
space to throw it in there seems like

809
00:28:00,000 --> 00:28:03,450
we're probably gonna have to if you take

810
00:28:01,769 --> 00:28:06,569
a look at what we've actually got here

811
00:28:03,450 --> 00:28:08,250
in terms of check something I'm not sure

812
00:28:06,569 --> 00:28:09,990
where we were putting that information

813
00:28:08,250 --> 00:28:11,970
it looks like source file checksum is

814
00:28:09,990 --> 00:28:13,589
what we store there right so you can

815
00:28:11,970 --> 00:28:16,289
kind of see that we're keeping that

816
00:28:13,589 --> 00:28:20,250
information and so the source file

817
00:28:16,289 --> 00:28:23,819
checksum probably has to be augmented to

818
00:28:20,250 --> 00:28:27,029
be like hht block checksum and

819
00:28:23,819 --> 00:28:29,069
that block of data that actually tells

820
00:28:27,029 --> 00:28:31,619
us what you know that actually describes

821
00:28:29,069 --> 00:28:33,659
the file that's gonna have to be

822
00:28:31,619 --> 00:28:35,579
checksum I don't see any other way

823
00:28:33,660 --> 00:28:37,050
around it do you I don't

824
00:28:35,579 --> 00:28:38,609
so I'm gonna go ahead and add it in

825
00:28:37,049 --> 00:28:40,289
there so I think in our H of T

826
00:28:38,609 --> 00:28:44,809
annotation we're going to have to have a

827
00:28:40,289 --> 00:28:47,730
thing called like hht block checksum

828
00:28:44,809 --> 00:28:49,980
like so and that will use one of our u

829
00:28:47,730 --> 00:28:52,230
64 so we didn't have in there what we're

830
00:28:49,980 --> 00:28:53,910
gonna have to do is build that H woops I

831
00:28:52,230 --> 00:28:55,289
spelled it wrong we're gonna have to

832
00:28:53,910 --> 00:28:56,880
build that checksum in there and

833
00:28:55,289 --> 00:29:00,990
furthermore in here where we got the

834
00:28:56,880 --> 00:29:03,870
loaded HHA annotation we don't actually

835
00:29:00,990 --> 00:29:04,980
I don't really know where that's

836
00:29:03,869 --> 00:29:06,509
actually gonna use I'm gonna take a

837
00:29:04,980 --> 00:29:08,970
quick look actually to see where that's

838
00:29:06,509 --> 00:29:10,950
gonna use cuz I don't know so if I do a

839
00:29:08,970 --> 00:29:12,480
quick check for where that's actually

840
00:29:10,950 --> 00:29:15,210
getting used it's only getting used in

841
00:29:12,480 --> 00:29:16,740
the hej edit at the moment it looks like

842
00:29:15,210 --> 00:29:18,360
so basically what's happening in there

843
00:29:16,740 --> 00:29:20,039
is when you load those in they go in

844
00:29:18,359 --> 00:29:21,809
here and there I guess they're probably

845
00:29:20,039 --> 00:29:24,809
being used for like transferring things

846
00:29:21,809 --> 00:29:26,609
back and forth that is important so

847
00:29:24,809 --> 00:29:30,659
let's go ahead and put that in here so

848
00:29:26,609 --> 00:29:32,159
this is the hht block checksum I'm just

849
00:29:30,660 --> 00:29:33,810
gonna call it that and what I'm gonna do

850
00:29:32,160 --> 00:29:35,910
is let me go in there and look at any

851
00:29:33,809 --> 00:29:38,509
place that we were previously using

852
00:29:35,910 --> 00:29:42,060
those annotations I want to make sure

853
00:29:38,509 --> 00:29:43,980
that we we cop capture both of those and

854
00:29:42,059 --> 00:29:45,869
so here I'm gonna go over here some of

855
00:29:43,980 --> 00:29:47,519
my head's not in the way if we look at

856
00:29:45,869 --> 00:29:50,129
those check sums that we've got here you

857
00:29:47,519 --> 00:29:54,029
can see them getting printed out here

858
00:29:50,130 --> 00:29:56,220
all I want to do is just augment this so

859
00:29:54,029 --> 00:29:58,710
that we have the hht block checksum in

860
00:29:56,220 --> 00:30:00,690
both cases right and that allows us to

861
00:29:58,710 --> 00:30:02,940
copy these around and do all the stuff

862
00:30:00,690 --> 00:30:04,890
that we were doing before with our HHA

863
00:30:02,940 --> 00:30:06,450
files without having to really worry

864
00:30:04,890 --> 00:30:09,030
about it right so we know that now the

865
00:30:06,450 --> 00:30:11,519
hht block checksum will get kind of

866
00:30:09,029 --> 00:30:13,859
convected around in that way so that

867
00:30:11,519 --> 00:30:16,710
seems fine to me again I don't see any

868
00:30:13,859 --> 00:30:18,209
other way to do it if I saw a simpler

869
00:30:16,710 --> 00:30:20,400
way to make sure we were keeping up to

870
00:30:18,210 --> 00:30:22,140
date I would but I just don't know any

871
00:30:20,400 --> 00:30:24,870
other way to do it I can't think of

872
00:30:22,140 --> 00:30:27,330
anything that would help there so when

873
00:30:24,869 --> 00:30:30,119
we're printing this out like again this

874
00:30:27,329 --> 00:30:33,359
this sort of from situation I will I

875
00:30:30,119 --> 00:30:35,969
will also add the hht printout in here

876
00:30:33,359 --> 00:30:37,479
so that we have an H at each checksum so

877
00:30:35,970 --> 00:30:40,720
here I'm going to put that in as a

878
00:30:37,480 --> 00:30:43,150
key and and I'm gonna put hht block

879
00:30:40,720 --> 00:30:45,789
checks them and we'll just call that

880
00:30:43,150 --> 00:30:47,798
done for now and then we just actually

881
00:30:45,789 --> 00:30:50,319
have to use it so I'm gonna go ahead and

882
00:30:47,798 --> 00:30:51,910
build right and get that going and then

883
00:30:50,319 --> 00:30:52,720
I'm gonna go jump back to what we were

884
00:30:51,910 --> 00:30:55,779
doing before

885
00:30:52,720 --> 00:30:57,160
okay so a Pentax we haven't done yet and

886
00:30:55,779 --> 00:30:59,470
all this sort of stuff we're gonna have

887
00:30:57,160 --> 00:31:01,058
to start making all this stuff work

888
00:30:59,470 --> 00:31:05,319
clean and make sure that everything's

889
00:31:01,058 --> 00:31:07,240
fine okay so two sets of things there's

890
00:31:05,319 --> 00:31:08,889
that source file checksum I don't even

891
00:31:07,240 --> 00:31:10,990
know for really using that right now I

892
00:31:08,890 --> 00:31:13,570
don't think we actually do an out if the

893
00:31:10,990 --> 00:31:15,910
check sums match I think we leave it

894
00:31:13,569 --> 00:31:18,069
sort of the way it is but what we want

895
00:31:15,910 --> 00:31:19,150
to do here is kind of move and move

896
00:31:18,069 --> 00:31:25,599
forward a little bit on that now there's

897
00:31:19,150 --> 00:31:26,470
there's a couple things there's a little

898
00:31:25,599 --> 00:31:27,609
bit of an issue there that I want to

899
00:31:26,470 --> 00:31:30,220
talk about real for it's just that the

900
00:31:27,609 --> 00:31:31,509
tiny a little bit so if you go back to

901
00:31:30,220 --> 00:31:34,210
what's happening with the check sums and

902
00:31:31,509 --> 00:31:35,829
the file dates file dates are great for

903
00:31:34,210 --> 00:31:37,150
letting the system know whether or not

904
00:31:35,829 --> 00:31:40,119
it should process the particular file or

905
00:31:37,150 --> 00:31:41,620
look at that file for changes right now

906
00:31:40,119 --> 00:31:43,808
there is a thing that we probably did

907
00:31:41,619 --> 00:31:46,000
and I don't know maybe we did it wrong

908
00:31:43,808 --> 00:31:47,769
I'll kind of explain you what the

909
00:31:46,000 --> 00:31:48,910
problem is and then you can sort of

910
00:31:47,769 --> 00:31:51,220
think about whether we did it wrong or

911
00:31:48,910 --> 00:31:53,169
we did it right it's hard to say so

912
00:31:51,220 --> 00:31:54,960
inside the HTT annotation you can see

913
00:31:53,169 --> 00:31:57,400
that we store the source file date right

914
00:31:54,960 --> 00:32:00,370
that source file date is actually stored

915
00:31:57,400 --> 00:32:04,600
in the HHA file itself and it says hey

916
00:32:00,369 --> 00:32:07,509
this is my the the date of the PNG or

917
00:32:04,599 --> 00:32:09,369
whatever that that you know that this

918
00:32:07,509 --> 00:32:13,089
this thing came from right that's that

919
00:32:09,369 --> 00:32:16,599
that's the date now there's an issue so

920
00:32:13,089 --> 00:32:18,579
if I go here oops I want to show you

921
00:32:16,599 --> 00:32:21,279
what I'm talking about just just give

922
00:32:18,579 --> 00:32:23,558
you a full illustration so let's suppose

923
00:32:21,279 --> 00:32:27,609
that I mistake to hand me a hero

924
00:32:23,558 --> 00:32:29,440
site okay if I inspect this bitmap here

925
00:32:27,609 --> 00:32:32,079
or whatever right I'm gonna get an

926
00:32:29,440 --> 00:32:35,080
actual PNG you know here's the PNG it's

927
00:32:32,079 --> 00:32:37,990
stored on the web somewhere right now

928
00:32:35,079 --> 00:32:39,519
that PNG wasn't made today that PNG was

929
00:32:37,990 --> 00:32:42,669
made a long time ago when I made this

930
00:32:39,519 --> 00:32:45,519
website right but if I were to save this

931
00:32:42,669 --> 00:32:47,320
image so you know let's say I let's say

932
00:32:45,519 --> 00:32:49,389
I go here and that you can grab this out

933
00:32:47,319 --> 00:32:51,308
right there's the path to the actual

934
00:32:49,390 --> 00:32:52,809
image so I stick that on here

935
00:32:51,308 --> 00:32:54,849
I say well you know what let's take a

936
00:32:52,808 --> 00:32:58,298
look at the image there it is right I

937
00:32:54,849 --> 00:33:00,908
hit save image as and I'll just save it

938
00:32:58,298 --> 00:33:03,128
to the desktop as exactly what the name

939
00:33:00,909 --> 00:33:05,409
of the thing is and I'm gonna open it

940
00:33:03,128 --> 00:33:07,719
here it is so now this is local on my

941
00:33:05,409 --> 00:33:11,289
machine same image exactly the same

942
00:33:07,720 --> 00:33:12,730
right the problem is if I then go to the

943
00:33:11,288 --> 00:33:15,819
desktop here and I look at the

944
00:33:12,730 --> 00:33:18,700
properties of this image what you can

945
00:33:15,819 --> 00:33:24,849
see is that the date right

946
00:33:18,700 --> 00:33:27,999
the last modification time is today why

947
00:33:24,849 --> 00:33:31,658
do I bring this up the problem is when

948
00:33:27,999 --> 00:33:34,210
people download these things from the

949
00:33:31,659 --> 00:33:36,909
internet the PNG s for hand made here or

950
00:33:34,210 --> 00:33:41,019
anything else it's gonna have the date

951
00:33:36,909 --> 00:33:43,389
they downloaded it so all of those dates

952
00:33:41,019 --> 00:33:47,490
are not gonna match the first time they

953
00:33:43,388 --> 00:33:50,288
download that gives us the following

954
00:33:47,490 --> 00:33:51,579
problem and I don't know if it's a

955
00:33:50,288 --> 00:33:52,089
problem but I'm just trying to give you

956
00:33:51,579 --> 00:33:54,519
what it is

957
00:33:52,089 --> 00:33:55,778
I haven't HHH file the agency file I got

958
00:33:54,519 --> 00:33:57,730
what my distribution a hand made here

959
00:33:55,778 --> 00:33:59,980
inside the HHA files the checksum and

960
00:33:57,730 --> 00:34:02,860
the date of the source file that was

961
00:33:59,980 --> 00:34:04,868
used to create it so far so good problem

962
00:34:02,859 --> 00:34:06,579
is if I download all the sets of pngs

963
00:34:04,868 --> 00:34:08,440
and I say hey do you need to rebuild

964
00:34:06,579 --> 00:34:10,659
anything it's gonna go look and say all

965
00:34:08,440 --> 00:34:12,338
of these dates mich match now we've got

966
00:34:10,659 --> 00:34:13,690
to check some so it's not a huge deal

967
00:34:12,338 --> 00:34:15,818
it's gonna look at the checksum and say

968
00:34:13,690 --> 00:34:17,769
oh you know what the check sums actually

969
00:34:15,818 --> 00:34:19,659
matched so it turns out the date was

970
00:34:17,769 --> 00:34:20,918
just it's just the day in the file got

971
00:34:19,659 --> 00:34:23,200
changed but didn't actually update I

972
00:34:20,918 --> 00:34:25,239
don't have to update this HHA great news

973
00:34:23,199 --> 00:34:26,769
problem is where's it gonna put that

974
00:34:25,239 --> 00:34:28,898
information so it doesn't have to check

975
00:34:26,769 --> 00:34:31,030
it next time it's gotta set that source

976
00:34:28,898 --> 00:34:33,190
file date so that the source file date

977
00:34:31,030 --> 00:34:35,379
now matches the one that got written on

978
00:34:33,190 --> 00:34:37,720
the drive that means that the HH a file

979
00:34:35,378 --> 00:34:43,029
has to get edited even though note and

980
00:34:37,719 --> 00:34:44,980
its occurred you with me so far so in

981
00:34:43,030 --> 00:34:48,159
some sense what we really want to do

982
00:34:44,980 --> 00:34:50,588
here is we want the source file date to

983
00:34:48,159 --> 00:34:53,409
be stored out-of-band from the HHA

984
00:34:50,588 --> 00:34:56,409
because really all it is is the machine

985
00:34:53,409 --> 00:34:59,920
specific optimization file that says on

986
00:34:56,409 --> 00:35:03,039
this machine have I or haven't I had to

987
00:34:59,920 --> 00:35:05,769
update this file yet and what was the

988
00:35:03,039 --> 00:35:08,409
date when I did ok

989
00:35:05,769 --> 00:35:10,880
so I think we made kind of mistake there

990
00:35:08,409 --> 00:35:13,009
because file dates are not preserved

991
00:35:10,880 --> 00:35:15,380
across copies now the art preservers are

992
00:35:13,010 --> 00:35:18,140
some copies right when you actually copy

993
00:35:15,380 --> 00:35:20,599
on the machine the machine sometimes

994
00:35:18,139 --> 00:35:22,639
that actually does preserve it so it's

995
00:35:20,599 --> 00:35:24,800
not entirely true to say that it's never

996
00:35:22,639 --> 00:35:26,750
preserved but it's most of the time not

997
00:35:24,800 --> 00:35:28,280
preserved and most importantly it's not

998
00:35:26,750 --> 00:35:29,750
preserved to the one case we actually

999
00:35:28,280 --> 00:35:31,220
care about which is this somebody

1000
00:35:29,750 --> 00:35:33,530
downloaded these Pink's from the

1001
00:35:31,219 --> 00:35:35,088
internet they may very well not be think

1002
00:35:33,530 --> 00:35:37,130
I don't remember what happens if you

1003
00:35:35,088 --> 00:35:38,838
take a zip file and you zip up a bunch

1004
00:35:37,130 --> 00:35:40,280
of PNG and unzip it I don't know whether

1005
00:35:38,838 --> 00:35:42,199
they get the dates from when they were

1006
00:35:40,280 --> 00:35:43,940
zipped in or whether they get the dates

1007
00:35:42,199 --> 00:35:45,289
or when they were zipped out I'm not

1008
00:35:43,940 --> 00:35:46,820
sure I remember which one it is but

1009
00:35:45,289 --> 00:35:48,380
point being there are plenty of cases as

1010
00:35:46,820 --> 00:35:50,390
I just demonstrated to you where you

1011
00:35:48,380 --> 00:35:51,800
could go get PNG at the exact same PNG

1012
00:35:50,389 --> 00:35:53,389
so we used to believe it's a file but

1013
00:35:51,800 --> 00:35:54,470
they would all have different dates the

1014
00:35:53,389 --> 00:35:55,940
only thing that remain the same is the

1015
00:35:54,469 --> 00:35:57,709
checksum so that's something that we

1016
00:35:55,940 --> 00:35:59,869
really want to be aware of and we kind

1017
00:35:57,710 --> 00:36:02,420
of need to figure out some way of having

1018
00:35:59,869 --> 00:36:05,030
that be remembered in a way that doesn't

1019
00:36:02,420 --> 00:36:07,039
require updating a chat a file so we

1020
00:36:05,030 --> 00:36:09,320
kind of need a local cache file but it's

1021
00:36:07,039 --> 00:36:11,570
written there when it's actually doing

1022
00:36:09,320 --> 00:36:13,130
that kind of mashup I don't know any

1023
00:36:11,570 --> 00:36:14,599
other way to do that other than creating

1024
00:36:13,130 --> 00:36:16,608
sort of like a separate file that starts

1025
00:36:14,599 --> 00:36:17,900
on like a backing store right and that

1026
00:36:16,608 --> 00:36:19,789
backing store will give us that

1027
00:36:17,900 --> 00:36:21,740
information that's all I could think of

1028
00:36:19,789 --> 00:36:23,570
I don't have any better ideas than that

1029
00:36:21,739 --> 00:36:25,069
just a local cache file that writes that

1030
00:36:23,570 --> 00:36:26,210
information out now since we already

1031
00:36:25,070 --> 00:36:27,830
have the concept that we're gonna have

1032
00:36:26,210 --> 00:36:29,750
to have saved games like that it seems

1033
00:36:27,829 --> 00:36:30,739
fine to have that as a separate file in

1034
00:36:29,750 --> 00:36:32,210
there so there's kind of like a save

1035
00:36:30,739 --> 00:36:33,559
package and that state Packers used to

1036
00:36:32,210 --> 00:36:37,250
have like oh here's all the things in it

1037
00:36:33,559 --> 00:36:39,079
that we're actually using right to run

1038
00:36:37,250 --> 00:36:41,239
on this machine specifically this

1039
00:36:39,079 --> 00:36:42,380
machine and we can have those packaged

1040
00:36:41,239 --> 00:36:44,959
in there what those tourists all dates

1041
00:36:42,380 --> 00:36:47,990
are that seems like an okay trade-off I

1042
00:36:44,960 --> 00:36:52,670
guess maybe I don't know possibly but we

1043
00:36:47,989 --> 00:36:54,229
you know I'm not sure I'm not sure again

1044
00:36:52,670 --> 00:36:56,420
if that's maybe a bridge too far are we

1045
00:36:54,230 --> 00:37:01,519
being too professional almost at this

1046
00:36:56,420 --> 00:37:04,280
point you know is that something that

1047
00:37:01,519 --> 00:37:05,480
should get serviced or is it now so

1048
00:37:04,280 --> 00:37:07,519
that's the part that I want to raise

1049
00:37:05,480 --> 00:37:08,780
your awareness up so for now we're going

1050
00:37:07,519 --> 00:37:11,179
to use that but I'm gonna put a big ole

1051
00:37:08,780 --> 00:37:14,810
to do in here and say to do

1052
00:37:11,179 --> 00:37:18,559
should we start storing source file date

1053
00:37:14,809 --> 00:37:19,519
out of bands so that we don't have to

1054
00:37:18,559 --> 00:37:26,210
update

1055
00:37:19,519 --> 00:37:29,420
hhas when dates change but checksum

1056
00:37:26,210 --> 00:37:31,460
stone right so that's just some way of

1057
00:37:29,420 --> 00:37:33,349
saying hey look we're probably gonna

1058
00:37:31,460 --> 00:37:34,940
have to address this and maybe remove

1059
00:37:33,349 --> 00:37:36,858
this and this will be a dead field as

1060
00:37:34,940 --> 00:37:38,389
everything we can't still fill it out we

1061
00:37:36,858 --> 00:37:42,019
can't still fill it out and say this is

1062
00:37:38,389 --> 00:37:44,210
when the HHA when you received it when

1063
00:37:42,019 --> 00:37:47,030
you received the packaged version and so

1064
00:37:44,210 --> 00:37:50,599
anytime we actually update the actual

1065
00:37:47,030 --> 00:37:53,000
data in here we will set it so you kind

1066
00:37:50,599 --> 00:37:54,699
of know what the date was that's not a

1067
00:37:53,000 --> 00:38:02,300
bad idea

1068
00:37:54,699 --> 00:38:03,829
like should say it that way right but we

1069
00:38:02,300 --> 00:38:06,080
need that other one so that we don't

1070
00:38:03,829 --> 00:38:07,608
keep rechecking the files I'm just gonna

1071
00:38:06,079 --> 00:38:08,960
mark that I think we should probably do

1072
00:38:07,608 --> 00:38:10,519
it I'm not gonna do it right now but

1073
00:38:08,960 --> 00:38:12,019
that's something to be aware of all

1074
00:38:10,519 --> 00:38:14,840
right let's move the rest of this stuff

1075
00:38:12,019 --> 00:38:16,219
over let's grab all this stuff out and

1076
00:38:14,840 --> 00:38:17,600
we've got the sort of file group part

1077
00:38:16,219 --> 00:38:19,250
here this is actually gonna awesome

1078
00:38:17,599 --> 00:38:20,779
about but it's gonna probably be

1079
00:38:19,250 --> 00:38:23,570
something that happens around the parse

1080
00:38:20,780 --> 00:38:25,430
hht itself which is sort of the file

1081
00:38:23,570 --> 00:38:27,559
group backing store stuff so I'm gonna

1082
00:38:25,429 --> 00:38:29,319
go ahead and grab that here I'm gonna go

1083
00:38:27,559 --> 00:38:32,690
ahead and grab the one down here as well

1084
00:38:29,320 --> 00:38:34,700
and again these are just sort of another

1085
00:38:32,690 --> 00:38:38,630
thing that we're gonna have to work with

1086
00:38:34,699 --> 00:38:39,608
there all right okay actually you know

1087
00:38:38,630 --> 00:38:41,720
what I lied

1088
00:38:39,608 --> 00:38:42,619
that's not true I think those are

1089
00:38:41,719 --> 00:38:44,299
actually have stay exactly where they

1090
00:38:42,619 --> 00:38:46,760
are because we're gonna do that for ehh

1091
00:38:44,300 --> 00:38:48,560
T's okay so what we're going to do here

1092
00:38:46,760 --> 00:38:50,780
is gonna say alright for each of these h

1093
00:38:48,559 --> 00:38:52,759
h TS we're gonna want to iterate over

1094
00:38:50,780 --> 00:38:55,490
all ehh TS in it we're gonna wanna load

1095
00:38:52,760 --> 00:38:57,710
each of them right so here's us doing

1096
00:38:55,489 --> 00:38:59,659
that and in here we don't actually care

1097
00:38:57,710 --> 00:39:01,730
about this anymore what we're gonna do

1098
00:38:59,659 --> 00:39:03,589
what was that to do do a sweep around

1099
00:39:01,730 --> 00:39:05,630
all supposed to be unseen then mark each

1100
00:39:03,590 --> 00:39:07,608
one we see so we can check that we don't

1101
00:39:05,630 --> 00:39:11,030
have to do any more because actually the

1102
00:39:07,608 --> 00:39:12,858
hht lets us know although well inside

1103
00:39:11,030 --> 00:39:15,710
the hmj we don't really do that

1104
00:39:12,858 --> 00:39:16,969
so we maybe I'll leave that to do I

1105
00:39:15,710 --> 00:39:18,349
don't know that we ever actually want to

1106
00:39:16,969 --> 00:39:19,789
do that because we just delete the HHA

1107
00:39:18,349 --> 00:39:20,960
every build it from scratches you want

1108
00:39:19,789 --> 00:39:26,529
to get rid of anything that was in there

1109
00:39:20,960 --> 00:39:26,530
so maybe not but anyway so here we go

1110
00:39:26,858 --> 00:39:31,670
this is gonna let us loop over each of

1111
00:39:29,179 --> 00:39:32,960
those HS key files that are currently

1112
00:39:31,670 --> 00:39:35,420
being stored to drive

1113
00:39:32,960 --> 00:39:38,720
so we get that data out we'll process

1114
00:39:35,420 --> 00:39:41,000
each one of them this part right here we

1115
00:39:38,719 --> 00:39:43,250
still probably want to do we're using

1116
00:39:41,000 --> 00:39:45,710
the asset source match here as sort of a

1117
00:39:43,250 --> 00:39:46,940
separate thing that means that this sort

1118
00:39:45,710 --> 00:39:48,440
of thing where we do the string hashing

1119
00:39:46,940 --> 00:39:50,539
is going to be something that we

1120
00:39:48,440 --> 00:39:51,950
actually do multiple times and so we

1121
00:39:50,539 --> 00:39:55,130
kind of want that string hash to be

1122
00:39:51,949 --> 00:39:58,189
something that we can call more easily

1123
00:39:55,130 --> 00:39:59,809
so this particular thing yeah like I

1124
00:39:58,190 --> 00:40:01,220
don't also why do we write it this way

1125
00:39:59,809 --> 00:40:03,500
do we is there a reason we didn't write

1126
00:40:01,219 --> 00:40:07,039
that and is there also a reason that we

1127
00:40:03,500 --> 00:40:11,210
didn't put the skit like what what

1128
00:40:07,039 --> 00:40:17,929
happened here is there a reason that

1129
00:40:11,210 --> 00:40:19,400
didn't look like that no no we got a

1130
00:40:17,929 --> 00:40:21,440
pretty torture thing there all right I

1131
00:40:19,400 --> 00:40:23,690
don't know what was going on there

1132
00:40:21,440 --> 00:40:25,010
so we're actually doing that we got the

1133
00:40:23,690 --> 00:40:26,659
scan here it looks like we would

1134
00:40:25,010 --> 00:40:28,010
probably my guess is we were doing

1135
00:40:26,659 --> 00:40:30,500
something with the file name inside

1136
00:40:28,010 --> 00:40:32,540
there in addition to to what it was

1137
00:40:30,500 --> 00:40:34,608
before so you know maybe this was was

1138
00:40:32,539 --> 00:40:37,009
previously I think maybe a little bit

1139
00:40:34,608 --> 00:40:38,449
more elaborate and so then it kind of

1140
00:40:37,010 --> 00:40:40,160
kept some else what we should probably

1141
00:40:38,449 --> 00:40:42,558
do is just use the hash of I think we

1142
00:40:40,159 --> 00:40:44,420
have a hash of that that actually takes

1143
00:40:42,559 --> 00:40:46,849
a string as it is right there's string

1144
00:40:44,420 --> 00:40:49,309
hash of right there so we really don't

1145
00:40:46,849 --> 00:40:50,930
need to do any of this we got the hash

1146
00:40:49,309 --> 00:40:52,970
tag so we should actually be able to

1147
00:40:50,929 --> 00:40:54,618
just do that right I would think and

1148
00:40:52,969 --> 00:40:56,419
just say give us what the hash of the

1149
00:40:54,619 --> 00:40:59,180
base name is all of this can just go

1150
00:40:56,420 --> 00:41:01,880
away right I mean I I think we were just

1151
00:40:59,179 --> 00:41:03,169
maybe being a little bit overly Squinkie

1152
00:41:01,880 --> 00:41:06,530
there I mean we didn't really need to do

1153
00:41:03,170 --> 00:41:08,750
that so I don't know and the anchor part

1154
00:41:06,530 --> 00:41:10,609
yeah again this so I think that's all

1155
00:41:08,750 --> 00:41:11,989
residual right I think that was all

1156
00:41:10,608 --> 00:41:13,279
there because we were parsing the file

1157
00:41:11,989 --> 00:41:16,578
names before on we were doing other

1158
00:41:13,280 --> 00:41:18,200
stuff I that's done now so that was like

1159
00:41:16,579 --> 00:41:19,910
old vestigial remains we remove stuff we

1160
00:41:18,199 --> 00:41:21,019
didn't really realize me that all that

1161
00:41:19,909 --> 00:41:22,879
something go away now we don't need the

1162
00:41:21,019 --> 00:41:25,489
anchor part or any that stuff we can

1163
00:41:22,880 --> 00:41:26,838
just hash the base name directly and be

1164
00:41:25,489 --> 00:41:28,759
done with it we don't even really need

1165
00:41:26,838 --> 00:41:30,380
to store the hash value because that

1166
00:41:28,760 --> 00:41:31,760
actually happens here so what we can do

1167
00:41:30,380 --> 00:41:33,019
it you know I mean I'll keep it there

1168
00:41:31,760 --> 00:41:33,650
but we could just actually even inline

1169
00:41:33,019 --> 00:41:35,568
it right here

1170
00:41:33,650 --> 00:41:37,190
so all that would be fine so there we go

1171
00:41:35,568 --> 00:41:39,679
get a create a source file name we got

1172
00:41:37,190 --> 00:41:41,780
the hash file there value there this

1173
00:41:39,679 --> 00:41:43,909
file this could now generate that hash

1174
00:41:41,780 --> 00:41:45,859
value if we want to probably should

1175
00:41:43,909 --> 00:41:46,569
because there's really no reason for it

1176
00:41:45,858 --> 00:41:48,279
not to

1177
00:41:46,570 --> 00:41:49,780
let's just jump back up there to get or

1178
00:41:48,280 --> 00:41:52,150
create asset source file name

1179
00:41:49,780 --> 00:41:55,390
I started get your create asset source

1180
00:41:52,150 --> 00:41:58,139
file looking at that we've got father

1181
00:41:55,389 --> 00:42:01,299
checksum ba ba ba ba ba

1182
00:41:58,139 --> 00:42:02,829
there's the unmodern hash value so yeah

1183
00:42:01,300 --> 00:42:04,539
like we don't really need to do that

1184
00:42:02,829 --> 00:42:06,369
anymore the unmounted hash value who's

1185
00:42:04,539 --> 00:42:08,110
actually calling this I mean and does

1186
00:42:06,369 --> 00:42:09,609
anyone actually care because what we

1187
00:42:08,110 --> 00:42:12,550
could just do is pass just the base name

1188
00:42:09,610 --> 00:42:17,140
from now on excuse me

1189
00:42:12,550 --> 00:42:19,450
and you can see you can see that we just

1190
00:42:17,139 --> 00:42:20,739
I don't think we need that I don't think

1191
00:42:19,449 --> 00:42:23,079
we need that on there because you can

1192
00:42:20,739 --> 00:42:25,119
see it's it's already got the one that

1193
00:42:23,079 --> 00:42:26,739
just takes a base yeah so so really I

1194
00:42:25,119 --> 00:42:28,359
don't even know why we have that

1195
00:42:26,739 --> 00:42:29,919
separate call that was just kind of dumb

1196
00:42:28,360 --> 00:42:31,660
it's not really even necessary way I

1197
00:42:29,920 --> 00:42:33,070
could break that out into two now so

1198
00:42:31,659 --> 00:42:34,359
let's just forget this whole thing just

1199
00:42:33,070 --> 00:42:35,830
pretend it never happened we're just

1200
00:42:34,360 --> 00:42:38,079
gonna say that it was you know forget it

1201
00:42:35,829 --> 00:42:39,759
and then down in here we do a get or

1202
00:42:38,079 --> 00:42:41,909
create asset source file what I'm gonna

1203
00:42:39,760 --> 00:42:44,620
do there is I'm gonna go ahead and grab

1204
00:42:41,909 --> 00:42:46,719
this version of the call and call that

1205
00:42:44,619 --> 00:42:49,029
instead so that we just passed the base

1206
00:42:46,719 --> 00:42:51,730
name down there we've got the file date

1207
00:42:49,030 --> 00:42:53,350
and the file checksum that actually get

1208
00:42:51,730 --> 00:42:55,090
passed there I don't know which version

1209
00:42:53,349 --> 00:42:56,949
of this we were calling before or why

1210
00:42:55,090 --> 00:42:59,260
those weren't getting passed I guess

1211
00:42:56,949 --> 00:43:01,719
because in here we we were just calling

1212
00:42:59,260 --> 00:43:03,580
this one and so the file date stuff you

1213
00:43:01,719 --> 00:43:07,959
can see it doing some modifications

1214
00:43:03,579 --> 00:43:09,159
there on those yeah now I think about I

1215
00:43:07,960 --> 00:43:11,980
guess I can't really do that because

1216
00:43:09,159 --> 00:43:13,899
that is is is one that automatically

1217
00:43:11,980 --> 00:43:15,070
always updates to checksum and the file

1218
00:43:13,900 --> 00:43:16,450
date we don't have the checks time to

1219
00:43:15,070 --> 00:43:18,280
pass it yet because we haven't actually

1220
00:43:16,449 --> 00:43:20,019
done that so I do have to pass the

1221
00:43:18,280 --> 00:43:22,300
unmounted hash value here but I think

1222
00:43:20,019 --> 00:43:23,860
again not really necessary because what

1223
00:43:22,300 --> 00:43:25,420
I can do is just change the way this is

1224
00:43:23,860 --> 00:43:27,309
working to say look just passing that

1225
00:43:25,420 --> 00:43:28,930
base name so we can keep doing an exact

1226
00:43:27,309 --> 00:43:30,039
like this family no one has to know

1227
00:43:28,929 --> 00:43:31,690
about the fact that it's getting hashed

1228
00:43:30,039 --> 00:43:33,309
one way or the other in here we'll just

1229
00:43:31,690 --> 00:43:35,170
go ahead and delete this and then we do

1230
00:43:33,309 --> 00:43:37,210
isn't create an amount of hash value

1231
00:43:35,170 --> 00:43:39,340
ourselves we just say right in here

1232
00:43:37,210 --> 00:43:41,019
grab that base name hash right at the

1233
00:43:39,340 --> 00:43:43,450
time right so that just cleans all of

1234
00:43:41,019 --> 00:43:44,619
that up and now we're done with that so

1235
00:43:43,449 --> 00:43:46,539
I think that's the way we want to do

1236
00:43:44,619 --> 00:43:47,769
that going forwards and that way we can

1237
00:43:46,539 --> 00:43:49,179
get our create the assets relative here

1238
00:43:47,769 --> 00:43:51,460
but you look at the match dates this is

1239
00:43:49,179 --> 00:43:52,719
the hht remember it's not a PNG it's not

1240
00:43:51,460 --> 00:43:54,220
any source file that's actually a

1241
00:43:52,719 --> 00:43:56,349
creating or and I said it's just the

1242
00:43:54,219 --> 00:43:57,519
thing that creates the tag set right

1243
00:43:56,349 --> 00:43:59,500
it's the thing that like does all the

1244
00:43:57,519 --> 00:44:00,369
markup for them so we grab that if we

1245
00:43:59,500 --> 00:44:01,960
get a match then

1246
00:44:00,369 --> 00:44:04,269
we want to parse this thing we're gonna

1247
00:44:01,960 --> 00:44:05,679
call the hht parser right here we're

1248
00:44:04,268 --> 00:44:07,088
gonna call it with all the info that we

1249
00:44:05,679 --> 00:44:09,038
have so I'm gonna go ahead and set this

1250
00:44:07,088 --> 00:44:11,048
up this is no longer to do we actually

1251
00:44:09,039 --> 00:44:12,789
now have ability to mark that up thanks

1252
00:44:11,048 --> 00:44:15,608
the h of t file so thankfully that is

1253
00:44:12,789 --> 00:44:17,710
all just fine no issues there we've got

1254
00:44:15,608 --> 00:44:19,509
the tokenizer we need to set up the game

1255
00:44:17,710 --> 00:44:20,588
assets are already set up for us we

1256
00:44:19,509 --> 00:44:22,990
don't have to worry about those at all

1257
00:44:20,588 --> 00:44:24,518
we've got this import situation going on

1258
00:44:22,989 --> 00:44:25,778
here again I'm gonna just copy this code

1259
00:44:24,518 --> 00:44:27,068
up here in case me to look at it for

1260
00:44:25,778 --> 00:44:28,150
some other reason I don't think we're

1261
00:44:27,068 --> 00:44:30,009
going to because we're already calling

1262
00:44:28,150 --> 00:44:31,838
part pieces if you look at it okay we've

1263
00:44:30,009 --> 00:44:33,219
already got that and this part right

1264
00:44:31,838 --> 00:44:34,778
here I don't know if love to look at so

1265
00:44:33,219 --> 00:44:36,308
I'm just gonna comment it out there till

1266
00:44:34,778 --> 00:44:38,289
we go up and look on that code we'll

1267
00:44:36,309 --> 00:44:39,999
take a look but for right now we don't

1268
00:44:38,289 --> 00:44:41,680
care so here we're coming here looking

1269
00:44:39,998 --> 00:44:43,538
all the HT files parse each one in turn

1270
00:44:41,679 --> 00:44:45,639
only thing we haven't done create that

1271
00:44:43,539 --> 00:44:47,049
tokenizer source info not necessary it

1272
00:44:45,639 --> 00:44:48,909
doesn't get parsed it gets created a

1273
00:44:47,048 --> 00:44:50,199
little bit earlier a little bit later

1274
00:44:48,909 --> 00:44:51,460
down the line so we don't need to worry

1275
00:44:50,199 --> 00:44:53,199
about that but we do need to worry about

1276
00:44:51,460 --> 00:44:54,548
is the fact that here we do want to be

1277
00:44:53,199 --> 00:44:55,899
passing that file group because remember

1278
00:44:54,548 --> 00:44:57,788
the file group is what keeps all those

1279
00:44:55,900 --> 00:45:00,068
infos made all those infos and those

1280
00:44:57,789 --> 00:45:01,329
weird UTF strings and all that crap so

1281
00:45:00,068 --> 00:45:04,179
we're going to kind of need that as

1282
00:45:01,329 --> 00:45:06,190
we're doing our file pulling later on so

1283
00:45:04,179 --> 00:45:07,719
we are gonna want to pass that down into

1284
00:45:06,190 --> 00:45:09,278
the tokenizer so that's thing that's

1285
00:45:07,719 --> 00:45:10,409
gonna get passed down through it's

1286
00:45:09,278 --> 00:45:12,730
probably also gonna be out into the

1287
00:45:10,409 --> 00:45:14,170
context here so right here where we

1288
00:45:12,730 --> 00:45:15,548
passed that file group down it's

1289
00:45:14,170 --> 00:45:17,680
probably gonna get added in here so it's

1290
00:45:15,548 --> 00:45:18,818
gonna go ahead and do that just ahead of

1291
00:45:17,679 --> 00:45:21,489
time because I know I'm gonna need it

1292
00:45:18,818 --> 00:45:22,989
the hhp context itself again hasn't been

1293
00:45:21,489 --> 00:45:24,489
pulled out yet it's right in here I'm

1294
00:45:22,989 --> 00:45:25,989
gonna go ahead and pull it out so we can

1295
00:45:24,489 --> 00:45:27,548
see it a little bit easier put it in the

1296
00:45:25,989 --> 00:45:29,949
H file just so it's clear what's going

1297
00:45:27,548 --> 00:45:31,538
on so I'm gonna put it out here and that

1298
00:45:29,949 --> 00:45:33,368
means in here we got that file goop up

1299
00:45:31,539 --> 00:45:36,309
sorry it's platform file group right

1300
00:45:33,369 --> 00:45:37,778
platform file group like so and that's

1301
00:45:36,309 --> 00:45:38,769
gonna get added on there right again

1302
00:45:37,778 --> 00:45:40,509
we're gonna use that a little bit later

1303
00:45:38,768 --> 00:45:42,848
you'll see because we need to get that

1304
00:45:40,509 --> 00:45:44,199
file info back so we have that whole set

1305
00:45:42,849 --> 00:45:45,130
of stuff it's got to happen and we'll

1306
00:45:44,199 --> 00:45:47,889
deal with that in a second

1307
00:45:45,130 --> 00:45:49,390
so anyhow import eske's now looking

1308
00:45:47,889 --> 00:45:51,098
pretty good import changed assets rather

1309
00:45:49,389 --> 00:45:52,298
he's looking pretty good we're looking

1310
00:45:51,099 --> 00:45:53,528
overreaching and difficult file shows

1311
00:45:52,298 --> 00:45:55,150
getting the assets for us file for each

1312
00:45:53,528 --> 00:45:59,289
of them based off of that name that's

1313
00:45:55,150 --> 00:46:00,910
coming back from the file info iteration

1314
00:45:59,289 --> 00:46:02,528
and any time we see one that doesn't

1315
00:46:00,909 --> 00:46:03,759
match this file date wise we go ahead

1316
00:46:02,528 --> 00:46:05,199
and parse it right we go ahead and pull

1317
00:46:03,759 --> 00:46:09,190
things in there now

1318
00:46:05,199 --> 00:46:13,139
we have a problem here and I guess what

1319
00:46:09,190 --> 00:46:13,139
I would say is excuse me

1320
00:46:14,969 --> 00:46:19,750
we need this to run in two different

1321
00:46:18,789 --> 00:46:22,630
ways

1322
00:46:19,750 --> 00:46:26,260
and I'm not sure exactly which way we

1323
00:46:22,630 --> 00:46:28,450
want it to run I'm gonna start by doing

1324
00:46:26,260 --> 00:46:30,310
it one way and then we might change to

1325
00:46:28,449 --> 00:46:31,899
do it the other way if we did it this

1326
00:46:30,309 --> 00:46:33,880
way what would happen is you'd have to

1327
00:46:31,900 --> 00:46:36,760
touch an hht file in order to gain time

1328
00:46:33,880 --> 00:46:37,840
to reload why because the hht files are

1329
00:46:36,760 --> 00:46:39,340
the only things that are getting

1330
00:46:37,840 --> 00:46:41,079
iterated over at the top level right

1331
00:46:39,340 --> 00:46:42,280
there are the things that tell us what

1332
00:46:41,079 --> 00:46:45,279
all the other stuff we should look for

1333
00:46:42,280 --> 00:46:48,250
is so if you were to update a PNG and

1334
00:46:45,280 --> 00:46:50,230
save it we would not know that we need

1335
00:46:48,250 --> 00:46:52,179
to reload because the AJC hasn't changed

1336
00:46:50,230 --> 00:46:55,599
so we never even look at the PNG right

1337
00:46:52,179 --> 00:46:58,750
so what I'm going to do first is I'm

1338
00:46:55,599 --> 00:47:02,529
going to say let's always when we do

1339
00:46:58,750 --> 00:47:05,469
import changes parts the hht s and then

1340
00:47:02,530 --> 00:47:08,560
is a second step we will look at this

1341
00:47:05,469 --> 00:47:10,869
part for each of our file matches ok so

1342
00:47:08,559 --> 00:47:13,389
that information would go down in here

1343
00:47:10,869 --> 00:47:16,480
and so every time we do that parse piece

1344
00:47:13,389 --> 00:47:16,869
is called in fact we would do it right

1345
00:47:16,480 --> 00:47:18,460
here

1346
00:47:16,869 --> 00:47:23,650
every time we're gonna do that parsing

1347
00:47:18,460 --> 00:47:25,449
call will do this right and so we're

1348
00:47:23,650 --> 00:47:26,619
doing that shucking every time we're

1349
00:47:25,449 --> 00:47:28,989
gonna do the file that checking every

1350
00:47:26,619 --> 00:47:32,079
time on every PNG we're gonna do the

1351
00:47:28,989 --> 00:47:35,709
full parse each time now the question is

1352
00:47:32,079 --> 00:47:37,989
do we need to early out the hht testing

1353
00:47:35,710 --> 00:47:39,760
if we do need to do early out the agency

1354
00:47:37,989 --> 00:47:42,250
testing then we will have to put in

1355
00:47:39,760 --> 00:47:43,690
something here which does that date

1356
00:47:42,250 --> 00:47:45,760
checking differently so that we never

1357
00:47:43,690 --> 00:47:48,039
load the files I'm just gonna guess that

1358
00:47:45,760 --> 00:47:49,780
hht files are never gonna be big enough

1359
00:47:48,039 --> 00:47:52,840
that we ever have to do it and so I'm

1360
00:47:49,780 --> 00:47:57,070
just to put a note here that says at the

1361
00:47:52,840 --> 00:48:02,400
moment we can afford to parse the H HTS

1362
00:47:57,070 --> 00:48:08,769
every time so we don't try to do a

1363
00:48:02,400 --> 00:48:10,210
separated file date checking right so

1364
00:48:08,769 --> 00:48:13,599
we're just not gonna do that right now

1365
00:48:10,210 --> 00:48:16,389
it's gonna be fine okay and so we do

1366
00:48:13,599 --> 00:48:18,400
need to do the sweep of the unseen asset

1367
00:48:16,389 --> 00:48:19,509
stuff here that's still it to do that we

1368
00:48:18,400 --> 00:48:21,789
might want to concern ourselves with

1369
00:48:19,510 --> 00:48:22,990
that bottom part won't necessarily be so

1370
00:48:21,789 --> 00:48:24,730
we're gonna come through here every time

1371
00:48:22,989 --> 00:48:26,529
we'll pre parse the whole ATT so every

1372
00:48:24,730 --> 00:48:27,639
time you say reload will reap arch the

1373
00:48:26,530 --> 00:48:29,890
hht files

1374
00:48:27,639 --> 00:48:31,929
and then what we need to do in here is

1375
00:48:29,889 --> 00:48:34,059
just say look anytime we get a

1376
00:48:31,929 --> 00:48:36,129
particular file that the hht references

1377
00:48:34,059 --> 00:48:38,199
that's when we're now gonna have to do

1378
00:48:36,130 --> 00:48:39,880
this part right so the question is where

1379
00:48:38,199 --> 00:48:43,239
does bass name come from well bass name

1380
00:48:39,880 --> 00:48:46,210
comes almost almost not quite almost it

1381
00:48:43,239 --> 00:48:48,129
almost comes from whatever the string is

1382
00:48:46,210 --> 00:48:51,820
that we pulled out a file name so this

1383
00:48:48,130 --> 00:48:54,400
right here tells us the text sort of

1384
00:48:51,820 --> 00:48:57,400
right now why do I say sort of because

1385
00:48:54,400 --> 00:49:00,400
it hasn't actually had the rest of its

1386
00:48:57,400 --> 00:49:04,059
path appended okay so what we need to do

1387
00:49:00,400 --> 00:49:06,039
is we need to rebuild here a bigger file

1388
00:49:04,059 --> 00:49:08,079
name right a file name that's more

1389
00:49:06,039 --> 00:49:09,070
explicit what do I mean by that well

1390
00:49:08,079 --> 00:49:10,779
let's take a look at our directory

1391
00:49:09,070 --> 00:49:12,610
structure if I jump into ma here I look

1392
00:49:10,780 --> 00:49:14,170
at our directory structure cusine here

1393
00:49:12,610 --> 00:49:16,120
we've got a whole bunch of things going

1394
00:49:14,170 --> 00:49:17,980
on we know the inside our sources

1395
00:49:16,119 --> 00:49:19,809
directory we've got sources and then we

1396
00:49:17,980 --> 00:49:21,940
got like bass game intro cutscene right

1397
00:49:19,809 --> 00:49:23,820
inside bass game and got the art music

1398
00:49:21,940 --> 00:49:27,220
directory blah blah blah blah blah right

1399
00:49:23,820 --> 00:49:29,350
we need this stuff to be appended we

1400
00:49:27,219 --> 00:49:31,809
don't have any of that in there the base

1401
00:49:29,349 --> 00:49:33,730
name is just like block dot PNG or

1402
00:49:31,809 --> 00:49:35,529
something right it doesn't know where it

1403
00:49:33,730 --> 00:49:37,389
comes from so we have to build a file

1404
00:49:35,530 --> 00:49:39,310
name that actually will reach into the

1405
00:49:37,389 --> 00:49:40,839
correct location we know that handmade

1406
00:49:39,309 --> 00:49:42,610
hero gets run in the hand made directory

1407
00:49:40,840 --> 00:49:44,140
that's a requirement that's how it knows

1408
00:49:42,610 --> 00:49:46,059
where all of its files are gonna come

1409
00:49:44,139 --> 00:49:48,819
from but it needs to be able to search

1410
00:49:46,059 --> 00:49:50,949
down that source tree all the way as far

1411
00:49:48,820 --> 00:49:52,900
as it needs to go right that's pretty

1412
00:49:50,949 --> 00:49:55,839
important so what we need to do is we

1413
00:49:52,900 --> 00:49:58,150
need to have our HHA file stuff so that

1414
00:49:55,840 --> 00:50:00,880
that all works and all the stuff gets

1415
00:49:58,150 --> 00:50:03,430
found correctly so I want the HHA here

1416
00:50:00,880 --> 00:50:05,140
to be maybe specified that way I'm gonna

1417
00:50:03,429 --> 00:50:06,190
say to the intro cutscene and that one

1418
00:50:05,139 --> 00:50:07,449
should specify that way

1419
00:50:06,190 --> 00:50:08,829
you can see it's not actually getting

1420
00:50:07,449 --> 00:50:12,309
one in there I'm gonna go ahead and cure

1421
00:50:08,829 --> 00:50:13,150
and put put that in here oh oh oh oh

1422
00:50:12,309 --> 00:50:15,279
look at this

1423
00:50:13,150 --> 00:50:17,889
look at this though look at this we're

1424
00:50:15,280 --> 00:50:23,890
using it we're using it already look at

1425
00:50:17,889 --> 00:50:26,679
this check it out we can actually label

1426
00:50:23,889 --> 00:50:29,739
the office properly really easily pretty

1427
00:50:26,679 --> 00:50:31,389
nice huh yeah you didn't think it was

1428
00:50:29,739 --> 00:50:33,789
cool it's cool right

1429
00:50:31,389 --> 00:50:38,739
because Anna made this and young-shin

1430
00:50:33,789 --> 00:50:40,420
made these right I rest my case anyway

1431
00:50:38,739 --> 00:50:41,348
getting back to the actual code when we

1432
00:50:40,420 --> 00:50:42,608
actually lose in there right

1433
00:50:41,349 --> 00:50:44,318
got an HSA that tells us where these

1434
00:50:42,608 --> 00:50:45,880
things are supposed to go and so what we

1435
00:50:44,318 --> 00:50:47,170
want to do is say look we can build it

1436
00:50:45,880 --> 00:50:48,789
the path based on that we just needed

1437
00:50:47,170 --> 00:50:50,019
append a bunch of things together in

1438
00:50:48,789 --> 00:50:52,028
order to actually figure out what the

1439
00:50:50,018 --> 00:50:53,078
actual path is so you know if we wanted

1440
00:50:52,028 --> 00:50:54,518
to be kind of cheesy about it

1441
00:50:53,079 --> 00:50:55,720
temporarily we could just say look I

1442
00:50:54,518 --> 00:50:56,828
don't know how big this family is gonna

1443
00:50:55,719 --> 00:50:57,189
be but it's probably not gonna be that

1444
00:50:56,829 --> 00:50:59,650
big

1445
00:50:57,190 --> 00:51:01,539
and again cheesing out for a second what

1446
00:50:59,650 --> 00:51:03,880
I need to do is just do an actual format

1447
00:51:01,539 --> 00:51:06,670
string to put it in here I guess that's

1448
00:51:03,880 --> 00:51:08,108
a front string like that yeah where I

1449
00:51:06,670 --> 00:51:09,548
could pass in okay we're gonna we're

1450
00:51:08,108 --> 00:51:11,348
gonna put this thing in here it's gonna

1451
00:51:09,548 --> 00:51:13,210
be about that big or whatever right or

1452
00:51:11,349 --> 00:51:14,499
can't be bigger than that and we're

1453
00:51:13,210 --> 00:51:17,769
going to put in a thing that says look

1454
00:51:14,498 --> 00:51:20,558
we know we've got a string that tells us

1455
00:51:17,768 --> 00:51:23,498
this goes a certain you know it goes

1456
00:51:20,559 --> 00:51:25,630
into a certain base directory right so

1457
00:51:23,498 --> 00:51:29,379
it's gonna be source slash the HHA name

1458
00:51:25,630 --> 00:51:31,960
slash arts slash the thing right and

1459
00:51:29,380 --> 00:51:34,660
even this part here is something that we

1460
00:51:31,960 --> 00:51:36,220
might actually want to have be different

1461
00:51:34,659 --> 00:51:38,409
because it might be art it might be

1462
00:51:36,219 --> 00:51:39,759
music whatever so we've got a sub dirt

1463
00:51:38,409 --> 00:51:41,018
here we know it's always are at the

1464
00:51:39,759 --> 00:51:42,880
moment cuz we're always pulling in p.m.

1465
00:51:41,018 --> 00:51:44,679
G's but we're gonna change that to music

1466
00:51:42,880 --> 00:51:46,269
or sound based on other things that we

1467
00:51:44,679 --> 00:51:48,460
might you know based on what the block

1468
00:51:46,268 --> 00:51:50,169
type actually might imply in this

1469
00:51:48,460 --> 00:51:51,999
particular case so we sort of have

1470
00:51:50,170 --> 00:51:53,889
another thing we might want to do there

1471
00:51:51,998 --> 00:51:55,389
right and we'll work on that cut a

1472
00:51:53,889 --> 00:51:57,190
little bit later and then down here we

1473
00:51:55,389 --> 00:51:58,838
also have another one that's gonna say

1474
00:51:57,190 --> 00:52:01,778
look that's there's the actual file name

1475
00:51:58,838 --> 00:52:04,268
that that was given to us right and so

1476
00:52:01,778 --> 00:52:06,460
if we want to build up a whole path that

1477
00:52:04,268 --> 00:52:08,828
tells us the entire thing we need all of

1478
00:52:06,460 --> 00:52:11,409
those pieces so first we need the HHA

1479
00:52:08,829 --> 00:52:13,900
file so that's gonna be in that fields

1480
00:52:11,409 --> 00:52:15,129
right so we've got that fields HHA and

1481
00:52:13,900 --> 00:52:18,369
so that's gonna have two things gonna

1482
00:52:15,130 --> 00:52:20,890
have the size and and the data right and

1483
00:52:18,369 --> 00:52:23,528
I think if I'm not mistaken that's a

1484
00:52:20,889 --> 00:52:25,929
size key always and this is a care star

1485
00:52:23,528 --> 00:52:27,568
always for these that's just what those

1486
00:52:25,929 --> 00:52:30,098
have to be to parse them in there I

1487
00:52:27,568 --> 00:52:33,159
think we may have added something

1488
00:52:30,099 --> 00:52:35,650
smarter I think we added this I'm just

1489
00:52:33,159 --> 00:52:37,659
gonna say that we did that because we're

1490
00:52:35,650 --> 00:52:39,249
awesome I don't know if we did it cuz

1491
00:52:37,659 --> 00:52:41,048
we're awesome maybe we did it for a

1492
00:52:39,248 --> 00:52:43,389
different reason but let's just say that

1493
00:52:41,048 --> 00:52:45,038
we did and then we'll let the compiler

1494
00:52:43,389 --> 00:52:46,868
tell us we didn't or rather the code

1495
00:52:45,039 --> 00:52:48,339
tells we didn't later on when we crash

1496
00:52:46,869 --> 00:52:50,469
alright since the operating system is a

1497
00:52:48,338 --> 00:52:51,909
person's ring it tells me crash so when

1498
00:52:50,469 --> 00:52:54,309
we load this stuff out we're gonna have

1499
00:52:51,909 --> 00:52:55,029
that fields HHA root that's gonna give

1500
00:52:54,309 --> 00:52:57,340
us where

1501
00:52:55,030 --> 00:52:59,530
eh-eh-eh was we used that as a

1502
00:52:57,340 --> 00:53:01,410
determiner here we got that art part in

1503
00:52:59,530 --> 00:53:03,430
here and then we got that file name

1504
00:53:01,409 --> 00:53:06,819
that's what we're actually gonna load

1505
00:53:03,429 --> 00:53:09,639
that's the complete file directory right

1506
00:53:06,820 --> 00:53:11,230
the the complete der name the complete

1507
00:53:09,639 --> 00:53:13,299
path the only thing we don't really know

1508
00:53:11,230 --> 00:53:15,099
is how big that path is that's why I

1509
00:53:13,300 --> 00:53:16,720
seem choosing out here I don't know if

1510
00:53:15,099 --> 00:53:18,159
this is big enough if we have a little

1511
00:53:16,719 --> 00:53:19,959
bit more of a robust system we just do

1512
00:53:18,159 --> 00:53:21,969
some concatenations that look at what

1513
00:53:19,960 --> 00:53:23,139
the size has to be and go from there

1514
00:53:21,969 --> 00:53:25,809
we certainly could do something of that

1515
00:53:23,139 --> 00:53:27,309
we just didn't this time because again

1516
00:53:25,809 --> 00:53:28,360
we haven't built up as enough of a

1517
00:53:27,309 --> 00:53:31,239
standard library to really make that

1518
00:53:28,360 --> 00:53:32,890
sort of thing work sweetly but ignore

1519
00:53:31,239 --> 00:53:34,329
all that for now that's not really the

1520
00:53:32,889 --> 00:53:36,420
thing we're focusing on what we want to

1521
00:53:34,329 --> 00:53:39,369
do now is have that path part in there

1522
00:53:36,420 --> 00:53:40,780
and I think that's all we really need so

1523
00:53:39,369 --> 00:53:42,400
then we'll do our get our create asset

1524
00:53:40,780 --> 00:53:44,680
source file will do all the merchants

1525
00:53:42,400 --> 00:53:46,570
that way what we want to do now is say

1526
00:53:44,679 --> 00:53:48,489
look when we look at these file dates

1527
00:53:46,570 --> 00:53:50,740
we're gonna need to know what the actual

1528
00:53:48,489 --> 00:53:52,689
file info was here's that part remember

1529
00:53:50,739 --> 00:53:53,949
we did this work here's our big chance

1530
00:53:52,690 --> 00:53:55,900
this is our big moment in the spotlight

1531
00:53:53,949 --> 00:53:58,169
this is where we get to actually call

1532
00:53:55,900 --> 00:54:00,880
the function we used before right

1533
00:53:58,170 --> 00:54:02,500
that platform call like we're doing in

1534
00:54:00,880 --> 00:54:04,480
here right where we do get all file

1535
00:54:02,500 --> 00:54:07,389
types begin that sort of stuff we've got

1536
00:54:04,480 --> 00:54:09,369
to get file info by path and exactly

1537
00:54:07,389 --> 00:54:11,500
what we need right it's almost like I

1538
00:54:09,369 --> 00:54:14,289
knew it was almost I got Superboy get

1539
00:54:11,500 --> 00:54:15,730
file info bypass is already in here

1540
00:54:14,289 --> 00:54:19,059
because we already import it let's say

1541
00:54:15,730 --> 00:54:22,329
get file info by card get file by path

1542
00:54:19,059 --> 00:54:24,400
right that's exactly what we need to

1543
00:54:22,329 --> 00:54:26,049
generate one of these file info which is

1544
00:54:24,400 --> 00:54:28,180
what we need to do our loading and other

1545
00:54:26,050 --> 00:54:30,400
checking right so here's our file info

1546
00:54:28,179 --> 00:54:32,379
I'm gonna say get my path we know we

1547
00:54:30,400 --> 00:54:33,820
have the file group in here hallelujah

1548
00:54:32,380 --> 00:54:36,190
we just have it exactly where we need it

1549
00:54:33,820 --> 00:54:38,050
there I just have to pass that Pat that

1550
00:54:36,190 --> 00:54:40,000
that path we've generated which we've

1551
00:54:38,050 --> 00:54:42,070
got here and then we're good to go

1552
00:54:40,000 --> 00:54:43,150
right everything's good so here we go

1553
00:54:42,070 --> 00:54:44,470
let's see if there's anything else that

1554
00:54:43,150 --> 00:54:46,150
we needed I don't think there was it's

1555
00:54:44,469 --> 00:54:48,250
just that that's all there is so off we

1556
00:54:46,150 --> 00:54:50,530
go right everything's great we get back

1557
00:54:48,250 --> 00:54:53,590
to file info now if there was no file

1558
00:54:50,530 --> 00:54:54,970
right then we could issue an error so

1559
00:54:53,590 --> 00:54:56,260
we'd probably want to check here because

1560
00:54:54,969 --> 00:54:58,029
I think it's legal for that thing to

1561
00:54:56,260 --> 00:54:59,590
return zero and say look I don't know

1562
00:54:58,030 --> 00:55:02,200
what you're talking about I ain't never

1563
00:54:59,590 --> 00:55:03,970
heard of no file by that name and so you

1564
00:55:02,199 --> 00:55:05,859
can't have it that's totally valid

1565
00:55:03,969 --> 00:55:08,919
because there might not be a file we may

1566
00:55:05,860 --> 00:55:12,250
have just had some kind of an error

1567
00:55:08,920 --> 00:55:14,500
like a when we actually went to to type

1568
00:55:12,250 --> 00:55:16,210
in that that HST file we made a typo

1569
00:55:14,500 --> 00:55:17,920
right we may already have a typo in

1570
00:55:16,210 --> 00:55:19,740
there right where it can't find the file

1571
00:55:17,920 --> 00:55:23,610
so we need to say like file not found

1572
00:55:19,739 --> 00:55:29,129
right we don't know where that file is

1573
00:55:23,610 --> 00:55:32,349
and I could also say looked in here

1574
00:55:29,130 --> 00:55:35,050
right because we know the full path we

1575
00:55:32,349 --> 00:55:36,429
looked for makes sense so I think that's

1576
00:55:35,050 --> 00:55:38,140
pretty good that gives me basically what

1577
00:55:36,429 --> 00:55:39,609
I want there I'm gonna go ahead and try

1578
00:55:38,139 --> 00:55:41,079
and compiling this and then we'll start

1579
00:55:39,610 --> 00:55:42,760
to look for ears and maybe it's getting

1580
00:55:41,079 --> 00:55:43,840
time for us to start to try and run this

1581
00:55:42,760 --> 00:55:47,980
and actually make sense of everything

1582
00:55:43,840 --> 00:55:49,450
right okay so coming back here we didn't

1583
00:55:47,980 --> 00:55:51,099
really do the append tags thing let's

1584
00:55:49,449 --> 00:55:52,659
actually do it because we might as well

1585
00:55:51,099 --> 00:55:54,460
get everything working at once it's not

1586
00:55:52,659 --> 00:55:56,440
that hard we've got sort of an import

1587
00:55:54,460 --> 00:55:58,840
tag array here that we want to actually

1588
00:55:56,440 --> 00:56:00,700
specify again this should be pretty

1589
00:55:58,840 --> 00:56:02,650
simple because we already did the work

1590
00:56:00,699 --> 00:56:04,809
of building tag lists we have this

1591
00:56:02,650 --> 00:56:06,760
notion of a tag builder thing we've got

1592
00:56:04,809 --> 00:56:08,980
all that working so we can just go ahead

1593
00:56:06,760 --> 00:56:11,050
and say look have this thing do the tag

1594
00:56:08,980 --> 00:56:13,179
build like it's doing right you can see

1595
00:56:11,050 --> 00:56:15,400
it here and the only problem that we're

1596
00:56:13,179 --> 00:56:17,649
gonna run into is in here you can see

1597
00:56:15,400 --> 00:56:19,420
it's got this sort of category of stuff

1598
00:56:17,650 --> 00:56:20,980
that we don't need doesn't matter

1599
00:56:19,420 --> 00:56:22,869
because we don't use it for anything

1600
00:56:20,980 --> 00:56:25,840
right it doesn't get used at all

1601
00:56:22,869 --> 00:56:27,909
anywhere in here nobody cares right as

1602
00:56:25,840 --> 00:56:29,829
far as I can tell anyway so import grid

1603
00:56:27,909 --> 00:56:31,719
tag part yeah it's a little bit more

1604
00:56:29,829 --> 00:56:33,909
than what we need that's okay we can

1605
00:56:31,719 --> 00:56:34,839
build it it doesn't harm us right it

1606
00:56:33,909 --> 00:56:36,399
doesn't hurt us at all

1607
00:56:34,840 --> 00:56:37,750
so let's go ahead and do that we'll say

1608
00:56:36,400 --> 00:56:40,019
here it's our builder we're gonna do

1609
00:56:37,750 --> 00:56:42,039
begin tags all we need is that assets

1610
00:56:40,019 --> 00:56:43,329
array that's all we actually need there

1611
00:56:42,039 --> 00:56:45,400
so we're gonna go ahead and pass that in

1612
00:56:43,329 --> 00:56:47,259
here's the assets like so we'll begin

1613
00:56:45,400 --> 00:56:48,970
those tags during that building every

1614
00:56:47,260 --> 00:56:51,490
time you see one of these here we go

1615
00:56:48,969 --> 00:56:53,230
this is us doing that so let's go ahead

1616
00:56:51,489 --> 00:56:56,289
and say we've got the tag we don't need

1617
00:56:53,230 --> 00:56:57,909
this tech tote type token name count

1618
00:56:56,289 --> 00:57:00,610
bah-bah-bah we don't need that right

1619
00:56:57,909 --> 00:57:02,559
that was old news and here all we need

1620
00:57:00,610 --> 00:57:05,079
to do is say look give us the tag ID

1621
00:57:02,559 --> 00:57:06,670
from this particular name we know what

1622
00:57:05,079 --> 00:57:08,590
it is because in here we've actually

1623
00:57:06,670 --> 00:57:09,760
done it right this token is the

1624
00:57:08,590 --> 00:57:12,070
identifier that gives us that

1625
00:57:09,760 --> 00:57:14,560
information so that's all we really need

1626
00:57:12,070 --> 00:57:16,809
to get back that tag ID assuming we got

1627
00:57:14,559 --> 00:57:18,820
back a tag ID then we can do our add if

1628
00:57:16,809 --> 00:57:21,130
we didn't then we need to actually go

1629
00:57:18,820 --> 00:57:22,640
ahead and oh hey by the way we did that

1630
00:57:21,130 --> 00:57:24,349
string format specifier didn't we right

1631
00:57:22,639 --> 00:57:26,058
that's the capital S pretty sure it's in

1632
00:57:24,349 --> 00:57:27,410
there don't actually know let's double

1633
00:57:26,059 --> 00:57:29,298
check to make sure I'm not making things

1634
00:57:27,409 --> 00:57:30,980
up so we look at for about string list

1635
00:57:29,298 --> 00:57:32,989
here it is let's see if we put in a

1636
00:57:30,980 --> 00:57:34,338
capital S because we're really because

1637
00:57:32,989 --> 00:57:35,268
we're baller let's see if we did that

1638
00:57:34,338 --> 00:57:38,358
there it is

1639
00:57:35,268 --> 00:57:41,000
bang right capital S right there how

1640
00:57:38,358 --> 00:57:42,500
awesome are we very very very awesome so

1641
00:57:41,000 --> 00:57:44,028
now we can see unrecognized tag name

1642
00:57:42,500 --> 00:57:45,108
surprise surprise we actually don't even

1643
00:57:44,028 --> 00:57:46,699
need the strings for us that's right

1644
00:57:45,108 --> 00:57:48,108
though because we take a token now we

1645
00:57:46,699 --> 00:57:49,788
print out our heirs and that's something

1646
00:57:48,108 --> 00:57:50,869
we can work on a little bit later but

1647
00:57:49,789 --> 00:57:52,400
that means that all that stuff would

1648
00:57:50,869 --> 00:57:54,108
have got handled for us so we can say in

1649
00:57:52,400 --> 00:57:55,130
here look we don't know that tag name we

1650
00:57:54,108 --> 00:57:57,288
have no idea what tag name you're

1651
00:57:55,130 --> 00:57:58,640
talking about so please don't ask me to

1652
00:57:57,289 --> 00:58:00,680
add that's a tag because I have no idea

1653
00:57:58,639 --> 00:58:02,598
how that would work we also now need to

1654
00:58:00,679 --> 00:58:04,368
do the f32 part of things let me do this

1655
00:58:02,599 --> 00:58:05,720
open print here you can see us parsing

1656
00:58:04,369 --> 00:58:08,119
the number so we need to do is say look

1657
00:58:05,719 --> 00:58:10,068
by default the tag value is going to be

1658
00:58:08,119 --> 00:58:12,140
1.0 if you don't specify a parenthetical

1659
00:58:10,068 --> 00:58:13,880
in your tag name you're gonna get a one

1660
00:58:12,139 --> 00:58:15,500
point let's create a boolean tag this is

1661
00:58:13,880 --> 00:58:18,170
that thing it's not zero it's one off

1662
00:58:15,500 --> 00:58:20,150
you go in here we need to say is well if

1663
00:58:18,170 --> 00:58:21,858
you did have an open paren then when we

1664
00:58:20,150 --> 00:58:23,269
get that value back that's where we're

1665
00:58:21,858 --> 00:58:25,400
gonna set that so in here we're gonna

1666
00:58:23,268 --> 00:58:27,828
say okay the tag value is going to be

1667
00:58:25,400 --> 00:58:30,048
the value as an f32

1668
00:58:27,829 --> 00:58:31,400
so that we can set it later on bingo

1669
00:58:30,048 --> 00:58:33,619
we've got it right here either it'll be

1670
00:58:31,400 --> 00:58:35,389
one or the parenthetical done deal so

1671
00:58:33,619 --> 00:58:37,160
now we can specify tags an explicit

1672
00:58:35,389 --> 00:58:38,960
values reason per have it form or is it

1673
00:58:37,159 --> 00:58:40,759
boolean by just Festiva tag alone right

1674
00:58:38,960 --> 00:58:41,929
either one will work it makes it really

1675
00:58:40,759 --> 00:58:43,818
nice and convenient Rusted build those

1676
00:58:41,929 --> 00:58:45,679
havs so just again if you don't remember

1677
00:58:43,818 --> 00:58:46,909
what I'm talking about and here we've

1678
00:58:45,679 --> 00:58:49,159
got this sort of stuff where we say okay

1679
00:58:46,909 --> 00:58:51,409
tags is florets grass whatever those are

1680
00:58:49,159 --> 00:58:52,818
boolean tags they just get set to one if

1681
00:58:51,409 --> 00:58:54,558
they're there they're set to nothing if

1682
00:58:52,818 --> 00:58:56,088
they're not we also have the concept

1683
00:58:54,559 --> 00:58:58,278
that we might want to set a value for it

1684
00:58:56,088 --> 00:58:59,929
looking here shot index one layer

1685
00:58:58,278 --> 00:59:02,088
indexed for those are the same tag

1686
00:58:59,929 --> 00:59:03,858
specifications same exact thing it's

1687
00:59:02,088 --> 00:59:05,328
just now it's got a parenthetical to set

1688
00:59:03,858 --> 00:59:07,250
with the values act OB cuz we need to be

1689
00:59:05,329 --> 00:59:09,798
all set one two three and so forth right

1690
00:59:07,250 --> 00:59:11,568
okay all good let's move on back here to

1691
00:59:09,798 --> 00:59:12,980
tag value you can see us adding it here

1692
00:59:11,568 --> 00:59:15,108
we got the errors here semicolon blah

1693
00:59:12,980 --> 00:59:17,358
blah blah that parsing is just gonna

1694
00:59:15,108 --> 00:59:19,009
work we already made that stuff happen

1695
00:59:17,358 --> 00:59:20,659
properly so I think we're all good there

1696
00:59:19,009 --> 00:59:22,159
I don't know we ever did that we didn't

1697
00:59:20,659 --> 00:59:23,838
ever check the parenthetical parsing

1698
00:59:22,159 --> 00:59:25,578
surprise to do that part but otherwise

1699
00:59:23,838 --> 00:59:27,380
we're good we get to the end of this we

1700
00:59:25,579 --> 00:59:28,548
can call em tags that's the thing that's

1701
00:59:27,380 --> 00:59:30,680
going to let us get back the information

1702
00:59:28,548 --> 00:59:33,139
that we actually needed and so we can

1703
00:59:30,679 --> 00:59:34,940
create our import tag away result when

1704
00:59:33,139 --> 00:59:36,449
we call em tags we're gonna pass it that

1705
00:59:34,940 --> 00:59:37,650
builder and if you remember if ID

1706
00:59:36,449 --> 00:59:39,480
jump back here to the end tax function

1707
00:59:37,650 --> 00:59:40,200
oh man I love this jump thing that we've

1708
00:59:39,480 --> 00:59:41,820
added um

1709
00:59:40,199 --> 00:59:43,529
winter back to the untaxed function

1710
00:59:41,820 --> 00:59:45,210
that's gonna give us about import grid

1711
00:59:43,530 --> 00:59:46,740
tag import grid taggers what we need

1712
00:59:45,210 --> 00:59:48,539
when I do this thing here builder I

1713
00:59:46,739 --> 00:59:50,759
gotta pass the tokenizer which we have

1714
00:59:48,539 --> 00:59:51,358
asset basic category which I don't care

1715
00:59:50,760 --> 00:59:53,160
about it all

1716
00:59:51,358 --> 00:59:54,809
so that asset basic category just gonna

1717
00:59:53,159 --> 00:59:56,309
be elect asset none or something right I

1718
00:59:54,809 --> 00:59:57,328
don't know what it's gonna be but it's

1719
00:59:56,309 --> 00:59:58,920
just gonna be meaningless because we

1720
00:59:57,329 --> 01:00:01,320
don't use it and then we've got this a

1721
00:59:58,920 --> 01:00:02,579
Pentax there are no append tags so we'd

1722
01:00:01,320 --> 01:00:04,109
actually just pass the result there

1723
01:00:02,579 --> 01:00:05,789
because we don't need to append anything

1724
01:00:04,108 --> 01:00:07,259
to it so this whole thing could just be

1725
01:00:05,789 --> 01:00:08,639
skipped and will be skipped because it's

1726
01:00:07,260 --> 01:00:10,410
zero and zero so nothing will happen

1727
01:00:08,639 --> 01:00:11,730
there so when we come out of here you

1728
01:00:10,409 --> 01:00:14,328
can see that the result we actually

1729
01:00:11,730 --> 01:00:17,190
receive from this import grid tag right

1730
01:00:14,329 --> 01:00:19,470
this thing right here import grid tagged

1731
01:00:17,190 --> 01:00:21,329
temp that's going to come back we don't

1732
01:00:19,469 --> 01:00:23,578
actually need that data but we do need

1733
01:00:21,329 --> 01:00:25,289
to grab what was in it really quickly we

1734
01:00:23,579 --> 01:00:27,119
don't need the struct I should say but

1735
01:00:25,289 --> 01:00:29,519
we do need this part so the first tag in

1736
01:00:27,119 --> 01:00:31,410
text in the one passed last tag index

1737
01:00:29,519 --> 01:00:33,690
that's what we're looking for so we grab

1738
01:00:31,409 --> 01:00:35,039
those two out that gives us the parts we

1739
01:00:33,690 --> 01:00:36,119
needed to fill out the structure the way

1740
01:00:35,039 --> 01:00:38,070
we needed to fill it out

1741
01:00:36,119 --> 01:00:40,920
for our return values so there it is

1742
01:00:38,070 --> 01:00:42,329
done right now our tag parser parses

1743
01:00:40,920 --> 01:00:44,039
tags puts them in the format that we

1744
01:00:42,329 --> 01:00:45,839
need it before and hands them off a

1745
01:00:44,039 --> 01:00:48,269
thing that can always be copied by

1746
01:00:45,838 --> 01:00:51,929
anybody else if I actually go here and

1747
01:00:48,269 --> 01:00:53,369
look I just need to do some anding here

1748
01:00:51,929 --> 01:00:54,809
and I got a past the tokenize don't know

1749
01:00:53,369 --> 01:00:56,670
why we're passing errors there that was

1750
01:00:54,809 --> 01:00:58,889
just because we modified that used to be

1751
01:00:56,670 --> 01:01:01,019
an out F so let's fix that right so now

1752
01:00:58,889 --> 01:01:02,730
we've got all that straightened out what

1753
01:01:01,019 --> 01:01:04,739
I new need to do now is take a look at

1754
01:01:02,730 --> 01:01:05,909
anything here that okay that's a that's

1755
01:01:04,739 --> 01:01:07,169
an ampersand I'll take a look at

1756
01:01:05,909 --> 01:01:09,328
anything here that I didn't actually

1757
01:01:07,170 --> 01:01:11,670
quite clean up so parse tags list has

1758
01:01:09,329 --> 01:01:13,380
got to have those assets right remember

1759
01:01:11,670 --> 01:01:15,329
when we had that in here we got to pass

1760
01:01:13,380 --> 01:01:16,680
the token eyes and the assets so let's

1761
01:01:15,329 --> 01:01:17,910
just add the assets in there that's how

1762
01:01:16,679 --> 01:01:21,868
it's gonna that's where it's gonna put

1763
01:01:17,909 --> 01:01:23,279
that tag array for sure so in here we

1764
01:01:21,869 --> 01:01:26,309
can look and say okay we've got a pen

1765
01:01:23,280 --> 01:01:28,410
tags Asus undeclared that's because

1766
01:01:26,309 --> 01:01:29,639
that's comes off the context right we

1767
01:01:28,409 --> 01:01:31,710
don't actually have it as a local

1768
01:01:29,639 --> 01:01:33,389
variable so there we go chat almost

1769
01:01:31,710 --> 01:01:35,490
certainly do it's supposed to be car I

1770
01:01:33,389 --> 01:01:37,230
don't know how it got to be chat so

1771
01:01:35,489 --> 01:01:39,299
that's a good question so let's take a

1772
01:01:37,230 --> 01:01:40,920
look at this year size of up that's my

1773
01:01:39,300 --> 01:01:43,109
habit in my internal code base I always

1774
01:01:40,920 --> 01:01:44,490
use capitalized sizeof I never did that

1775
01:01:43,108 --> 01:01:46,380
for handmade hero for reasons I don't

1776
01:01:44,489 --> 01:01:47,039
actually know what they are let's see

1777
01:01:46,380 --> 01:01:49,660
here

1778
01:01:47,039 --> 01:01:51,338
get file by path so

1779
01:01:49,659 --> 01:01:54,098
I don't know that we ever actually added

1780
01:01:51,338 --> 01:01:55,150
it to the call table we probably didn't

1781
01:01:54,099 --> 01:01:57,910
let's go ahead and take a look if that

1782
01:01:55,150 --> 01:01:59,380
was true so in here we have like open

1783
01:01:57,909 --> 01:02:01,088
file and that sort of stuff

1784
01:01:59,380 --> 01:02:03,519
where we got the platform file callbacks

1785
01:02:01,088 --> 01:02:08,500
right so we have in here a thing that's

1786
01:02:03,519 --> 01:02:11,019
like you know what was it open file

1787
01:02:08,500 --> 01:02:14,199
right there's a callback for open file

1788
01:02:11,019 --> 01:02:16,329
right right here we never actually added

1789
01:02:14,199 --> 01:02:18,219
the calling here to get file of a

1790
01:02:16,329 --> 01:02:21,160
specific type so the platform

1791
01:02:18,219 --> 01:02:23,588
I'm sorry perfect name get a file from

1792
01:02:21,159 --> 01:02:25,629
path that has to be him here so like get

1793
01:02:23,588 --> 01:02:27,639
filed by path has to be an actual call

1794
01:02:25,630 --> 01:02:29,559
that's in here and when we actually put

1795
01:02:27,639 --> 01:02:31,659
in the wintery to side of things we also

1796
01:02:29,559 --> 01:02:34,269
have to actually fill it out so when we

1797
01:02:31,659 --> 01:02:36,098
say open file in here equals win32 open

1798
01:02:34,269 --> 01:02:37,838
file we needed the same thing for the

1799
01:02:36,099 --> 01:02:40,329
platform API we need to say that that

1800
01:02:37,838 --> 01:02:42,009
get filed by path actually has to be in

1801
01:02:40,329 --> 01:02:44,798
here as well so when three to get file

1802
01:02:42,010 --> 01:02:46,059
by path has to be in there right so once

1803
01:02:44,798 --> 01:02:46,719
those files are in there we're good to

1804
01:02:46,059 --> 01:02:48,220
go

1805
01:02:46,719 --> 01:02:49,719
let's take a look at any other errors we

1806
01:02:48,219 --> 01:02:51,848
have in here again that's gonna be the

1807
01:02:49,719 --> 01:02:54,219
context assets that we need to put in

1808
01:02:51,849 --> 01:02:56,109
there I'm not sure file group here is

1809
01:02:54,219 --> 01:02:59,679
gonna have to come from the context as

1810
01:02:56,108 --> 01:03:01,690
well but that's fine what else we got a

1811
01:02:59,679 --> 01:03:02,618
platform handle a context file group

1812
01:03:01,690 --> 01:03:05,139
that's good

1813
01:03:02,619 --> 01:03:07,750
press button for again context that's

1814
01:03:05,139 --> 01:03:11,318
this is all context here context context

1815
01:03:07,750 --> 01:03:13,829
context right and what I'd probably like

1816
01:03:11,318 --> 01:03:16,808
to do here I'm just looking at it I

1817
01:03:13,829 --> 01:03:18,309
don't know about that info struct that

1818
01:03:16,809 --> 01:03:20,528
info structs getting used in a bunch of

1819
01:03:18,309 --> 01:03:22,089
places we could just fill it out maybe

1820
01:03:20,528 --> 01:03:27,400
I'll do that now but I'm gonna add it to

1821
01:03:22,088 --> 01:03:32,739
do I you know should this just be the

1822
01:03:27,400 --> 01:03:36,180
hht fields right so meaning do we really

1823
01:03:32,739 --> 01:03:39,548
need this what was it what was it called

1824
01:03:36,179 --> 01:03:43,269
I don't even remember what it was called

1825
01:03:39,548 --> 01:03:45,608
it was something like a source import

1826
01:03:43,269 --> 01:03:47,650
source of import source info right so

1827
01:03:45,608 --> 01:03:50,440
import source info is just the same

1828
01:03:47,650 --> 01:03:52,660
thing and so I kind of don't think it

1829
01:03:50,440 --> 01:03:55,568
should really be there it's just a thing

1830
01:03:52,659 --> 01:03:57,909
that says hey like give me the specific

1831
01:03:55,568 --> 01:03:59,769
subset of the fields but there's no harm

1832
01:03:57,909 --> 01:04:01,420
in just passing the rest of the fields

1833
01:03:59,769 --> 01:04:03,489
there's no reason we need to hide that

1834
01:04:01,420 --> 01:04:04,990
data from the code it's not like it can

1835
01:04:03,489 --> 01:04:06,909
anything horrible with it or something

1836
01:04:04,989 --> 01:04:08,259
like that so I don't really know what

1837
01:04:06,909 --> 01:04:09,489
the point of that would be right it just

1838
01:04:08,260 --> 01:04:11,380
doesn't make any sense

1839
01:04:09,489 --> 01:04:14,259
so that all looks pretty good now

1840
01:04:11,380 --> 01:04:16,329
there's one thing that's kind of janky

1841
01:04:14,260 --> 01:04:18,310
here and I'll tell you what it is in a

1842
01:04:16,329 --> 01:04:20,259
second and then that's the last thing we

1843
01:04:18,309 --> 01:04:22,150
probably have to address before we are

1844
01:04:20,260 --> 01:04:24,250
really just into debugging I don't know

1845
01:04:22,150 --> 01:04:26,320
much time I got left I think I've got to

1846
01:04:24,250 --> 01:04:28,599
about one o'clock so I think I have a

1847
01:04:26,320 --> 01:04:30,760
half hour left actually which means we

1848
01:04:28,599 --> 01:04:32,319
can do some debugging today to get this

1849
01:04:30,760 --> 01:04:33,960
code into sort of semi working order

1850
01:04:32,320 --> 01:04:37,180
probably not fully working order so

1851
01:04:33,960 --> 01:04:38,769
sourcing folk here that was a mistake I

1852
01:04:37,179 --> 01:04:40,359
didn't actually mean that I'm not sure I

1853
01:04:38,769 --> 01:04:41,800
think that was just a brain fart

1854
01:04:40,360 --> 01:04:44,289
remember I'm talking my announcer voice

1855
01:04:41,800 --> 01:04:45,760
takes an incredible amount of energy to

1856
01:04:44,289 --> 01:04:48,159
program and do the announcer voice at

1857
01:04:45,760 --> 01:04:50,290
the same time because you know if we're

1858
01:04:48,159 --> 01:04:51,429
honest about it it constantly talking is

1859
01:04:50,289 --> 01:04:52,809
using an entire part of the brain that

1860
01:04:51,429 --> 01:04:54,250
normally I'm using for Burgamy so makes

1861
01:04:52,809 --> 01:04:55,750
it a lot harder to program what I'm

1862
01:04:54,250 --> 01:04:57,099
actually doing that voice I meant a type

1863
01:04:55,750 --> 01:04:58,179
of alter a type sourced in for a product

1864
01:04:57,099 --> 01:04:59,829
as I was talking about sourcing for at

1865
01:04:58,179 --> 01:05:01,839
the time and that's just how the brain

1866
01:04:59,829 --> 01:05:04,599
works anyway moving along we've got all

1867
01:05:01,840 --> 01:05:08,640
that stuff now we have to grab these out

1868
01:05:04,599 --> 01:05:10,989
of the fields oops that's not correct I

1869
01:05:08,639 --> 01:05:13,059
totally and again even does the

1870
01:05:10,989 --> 01:05:14,559
explanation it was a brain fart so let's

1871
01:05:13,059 --> 01:05:15,969
get rid of that all right so now moving

1872
01:05:14,559 --> 01:05:17,679
out of tokenizer we have 2x2 self that

1873
01:05:15,969 --> 01:05:19,389
tokenizer if you remember correctly we

1874
01:05:17,679 --> 01:05:21,009
you know wrote this tokenizer code here

1875
01:05:19,389 --> 01:05:22,029
there isn't actually a thing for

1876
01:05:21,010 --> 01:05:23,890
starting tokenizing

1877
01:05:22,030 --> 01:05:25,750
other than this one tokenized call it

1878
01:05:23,889 --> 01:05:27,339
takes a string as input that's okay we

1879
01:05:25,750 --> 01:05:29,349
actually have what is the krims that was

1880
01:05:27,340 --> 01:05:31,450
string when we open an actual file we've

1881
01:05:29,349 --> 01:05:33,880
got to do that read so what we need here

1882
01:05:31,449 --> 01:05:35,618
is we need to parse we need to pass like

1883
01:05:33,880 --> 01:05:38,760
a buffer this thing so when we do this

1884
01:05:35,619 --> 01:05:40,809
you know tokenize here when we do this I

1885
01:05:38,760 --> 01:05:43,150
can say tokenizer just organize

1886
01:05:40,809 --> 01:05:45,099
something right this has to be file

1887
01:05:43,150 --> 01:05:46,750
contents basically right and then I can

1888
01:05:45,099 --> 01:05:48,849
pass the address of that and it can

1889
01:05:46,750 --> 01:05:50,440
parse the file so question is how to

1890
01:05:48,849 --> 01:05:52,029
actually read that file later well you

1891
01:05:50,440 --> 01:05:54,039
know we already did that right we

1892
01:05:52,030 --> 01:05:55,869
already know what that is right in here

1893
01:05:54,039 --> 01:05:58,659
we've got this make read stream thing

1894
01:05:55,869 --> 01:06:01,150
where we can read a content stream and

1895
01:05:58,659 --> 01:06:03,819
then parse PNG like takes that content

1896
01:06:01,150 --> 01:06:05,170
stream right so when I do that make you

1897
01:06:03,820 --> 01:06:07,539
that file buffer all that sort of stuff

1898
01:06:05,170 --> 01:06:09,460
that file buffer that we pass the

1899
01:06:07,539 --> 01:06:10,599
restream that's all I really need so how

1900
01:06:09,460 --> 01:06:12,340
do I get that where you can see it

1901
01:06:10,599 --> 01:06:14,199
happening right here right when we do

1902
01:06:12,340 --> 01:06:16,240
the open file we did the close file we

1903
01:06:14,199 --> 01:06:17,299
do the read that's all we really need

1904
01:06:16,239 --> 01:06:19,099
so in here when I

1905
01:06:17,300 --> 01:06:22,160
do that I'm gonna skip the foul bait

1906
01:06:19,099 --> 01:06:23,929
part we can still do all of this get the

1907
01:06:22,159 --> 01:06:26,750
file handle right I've got the file

1908
01:06:23,929 --> 01:06:28,339
group it's right here so I can just say

1909
01:06:26,750 --> 01:06:30,469
there's the file group we've got the

1910
01:06:28,340 --> 01:06:32,870
file info I can say I want to read it I

1911
01:06:30,469 --> 01:06:34,489
can create a buffer here that I can pass

1912
01:06:32,869 --> 01:06:36,109
as file contents I'll just go up file

1913
01:06:34,489 --> 01:06:38,149
buffer reply as well right

1914
01:06:36,110 --> 01:06:40,280
we know what the file size is we can

1915
01:06:38,150 --> 01:06:42,680
grab a part of data that's big enough

1916
01:06:40,280 --> 01:06:44,240
for it we can read that data in and then

1917
01:06:42,679 --> 01:06:45,409
we can close it right so the only

1918
01:06:44,239 --> 01:06:47,329
question is where do we get that data

1919
01:06:45,409 --> 01:06:49,279
from again we can use a temporary and if

1920
01:06:47,329 --> 01:06:53,029
we want to here or not it's really

1921
01:06:49,280 --> 01:06:55,519
entirely up to us since we've got this

1922
01:06:53,030 --> 01:06:58,040
temporary nough here I'm kind of leaning

1923
01:06:55,519 --> 01:06:59,360
towards maybe just using one arena that

1924
01:06:58,039 --> 01:07:01,250
kind of expands and contracts for

1925
01:06:59,360 --> 01:07:03,820
everything seems like it would be the

1926
01:07:01,250 --> 01:07:06,650
right idea why bother having two of them

1927
01:07:03,820 --> 01:07:09,350
that just seems easy to me so I think I

1928
01:07:06,650 --> 01:07:10,420
might just do it like this where we just

1929
01:07:09,349 --> 01:07:13,400
say okay yeah

1930
01:07:10,420 --> 01:07:16,039
inside here when we go to do import our

1931
01:07:13,400 --> 01:07:18,349
assets will create the temporary no like

1932
01:07:16,039 --> 01:07:20,389
so and that will just store all the

1933
01:07:18,349 --> 01:07:23,929
stuff that we're working on as we go

1934
01:07:20,389 --> 01:07:25,849
when we pass into the parse hht I will

1935
01:07:23,929 --> 01:07:27,500
pass the temporary nough in there so

1936
01:07:25,849 --> 01:07:30,319
that's how it knows where it's gonna get

1937
01:07:27,500 --> 01:07:32,119
us memory from right very very simple

1938
01:07:30,320 --> 01:07:34,039
and so all the temporariness stuff will

1939
01:07:32,119 --> 01:07:35,779
just work since I want to minimize the

1940
01:07:34,039 --> 01:07:37,550
amount of memory and give him time just

1941
01:07:35,780 --> 01:07:39,800
cuz I'm a nice guy I wouldn't have to

1942
01:07:37,550 --> 01:07:41,720
because I could just let it stack up and

1943
01:07:39,800 --> 01:07:43,190
then clear it all at the end but why not

1944
01:07:41,719 --> 01:07:46,099
what I'm going to do is do a beginning

1945
01:07:43,190 --> 01:07:47,809
temporary memory right so on that

1946
01:07:46,099 --> 01:07:51,769
temporary nough that we've got I'll just

1947
01:07:47,809 --> 01:07:55,610
do a temporary memory so that in here

1948
01:07:51,769 --> 01:07:57,259
when we do that temp marker something

1949
01:07:55,610 --> 01:07:59,510
like that I can do an end temporary

1950
01:07:57,260 --> 01:08:02,480
memory on the temp marker right and

1951
01:07:59,510 --> 01:08:04,220
that'll just allow us to sort of keep

1952
01:08:02,480 --> 01:08:05,900
everything in one arena so we know all

1953
01:08:04,219 --> 01:08:07,429
of the you know everything is just gonna

1954
01:08:05,900 --> 01:08:09,829
get cleaned up by that arena we don't

1955
01:08:07,429 --> 01:08:12,139
have to care about it at all right it's

1956
01:08:09,829 --> 01:08:13,670
like free garbage collection you don't

1957
01:08:12,139 --> 01:08:14,809
have to pay for it and it does what you

1958
01:08:13,670 --> 01:08:18,699
would have done if you had a garbage

1959
01:08:14,809 --> 01:08:21,289
collector so it's pretty nice so in here

1960
01:08:18,699 --> 01:08:22,818
excuse me

1961
01:08:21,289 --> 01:08:24,649
we just have to clean up the places

1962
01:08:22,819 --> 01:08:26,298
where we were addressing that temporary

1963
01:08:24,649 --> 01:08:27,679
net so every time in here we were

1964
01:08:26,298 --> 01:08:29,210
passing that temporary nough around all

1965
01:08:27,680 --> 01:08:30,400
we have to do is just say look the

1966
01:08:29,210 --> 01:08:33,399
temporary noops is

1967
01:08:30,399 --> 01:08:37,088
is already a pointer so off you go

1968
01:08:33,399 --> 01:08:38,920
and I think that's that's was bad there

1969
01:08:37,088 --> 01:08:40,448
we go all we have to do is we compile

1970
01:08:38,920 --> 01:08:43,239
and we should be down to our last few

1971
01:08:40,448 --> 01:08:46,629
things parse top level block I don't

1972
01:08:43,238 --> 01:08:48,039
know what that takes as a as a as a

1973
01:08:46,630 --> 01:08:50,350
function skull such as cleanup our

1974
01:08:48,039 --> 01:08:52,179
function calls parsed of a block

1975
01:08:50,350 --> 01:08:55,480
okay so parse the top-level block does

1976
01:08:52,179 --> 01:08:57,819
take a memory arena right I skipped one

1977
01:08:55,479 --> 01:08:59,889
person in the chain here I could I

1978
01:08:57,819 --> 01:09:01,330
suppose then put it in the context maybe

1979
01:08:59,890 --> 01:09:03,250
I should do that this is what I was

1980
01:09:01,329 --> 01:09:04,899
gonna do originally and I stopped I

1981
01:09:03,250 --> 01:09:06,609
think I'm gonna actually do that so it

1982
01:09:04,899 --> 01:09:08,048
doesn't actually need to pass it down in

1983
01:09:06,609 --> 01:09:09,460
case other people want to use that

1984
01:09:08,048 --> 01:09:11,109
temporary nough it can just be hanging

1985
01:09:09,460 --> 01:09:12,969
out in there all the time that seems

1986
01:09:11,109 --> 01:09:14,679
like a better idea to me so in here I'm

1987
01:09:12,969 --> 01:09:16,480
just gonna say the temporary nough is

1988
01:09:14,679 --> 01:09:19,000
gonna come from the context like so and

1989
01:09:16,479 --> 01:09:20,948
everyone can use it and we're good to go

1990
01:09:19,000 --> 01:09:22,988
that means out here on the on the

1991
01:09:20,948 --> 01:09:24,669
context I'm gonna always pass that

1992
01:09:22,988 --> 01:09:27,809
around so the temporary knows in here

1993
01:09:24,670 --> 01:09:30,670
done deal I think that's everything

1994
01:09:27,810 --> 01:09:34,140
pretty much nothing left to do this

1995
01:09:30,670 --> 01:09:34,140
parse hht

1996
01:09:34,670 --> 01:09:41,489
doesn't mean anything but an ampersand

1997
01:09:37,279 --> 01:09:44,400
amber now okay let's talk about the last

1998
01:09:41,488 --> 01:09:48,058
thing we didn't do where are all of

1999
01:09:44,399 --> 01:09:49,710
these files going to get written once

2000
01:09:48,059 --> 01:09:50,219
I'm reading every single PMC I've got a

2001
01:09:49,710 --> 01:09:52,019
problem

2002
01:09:50,219 --> 01:09:53,759
I'm gonna put them somewhere we're going

2003
01:09:52,019 --> 01:09:55,469
to put them well our old method of

2004
01:09:53,759 --> 01:09:57,929
putting them somewhere just assumed that

2005
01:09:55,469 --> 01:10:00,300
it always goes into the same HHA file

2006
01:09:57,929 --> 01:10:02,190
but that's not true it doesn't go into

2007
01:10:00,300 --> 01:10:04,349
the seamy at a save file anymore it's

2008
01:10:02,189 --> 01:10:06,268
got to go into a specific HHA file and

2009
01:10:04,349 --> 01:10:07,860
the agency files got to go into is

2010
01:10:06,269 --> 01:10:09,809
whichever one is paired with this

2011
01:10:07,859 --> 01:10:11,880
particular part of the block right

2012
01:10:09,809 --> 01:10:15,750
because any time I'm in here let's say I

2013
01:10:11,880 --> 01:10:18,380
go to one of those hht files anytime I

2014
01:10:15,750 --> 01:10:20,819
go into here I say oh here's the HHA

2015
01:10:18,380 --> 01:10:22,980
that's where it's supposed to go it

2016
01:10:20,819 --> 01:10:25,889
doesn't go into local 8h a it goes into

2017
01:10:22,979 --> 01:10:27,779
intro cutscene date it a right so in

2018
01:10:25,889 --> 01:10:30,328
order to rebuild that file I have to be

2019
01:10:27,779 --> 01:10:32,219
able to know this is the HH day that I'm

2020
01:10:30,328 --> 01:10:34,259
supposed to be targeting put all the

2021
01:10:32,219 --> 01:10:36,719
data in there right that's gotta happen

2022
01:10:34,260 --> 01:10:39,389
and so I have to have some way of

2023
01:10:36,719 --> 01:10:41,130
breaking out of this notion that where

2024
01:10:39,389 --> 01:10:43,710
I'm putting these things has something

2025
01:10:41,130 --> 01:10:47,368
to do with this local HHA file that's

2026
01:10:43,710 --> 01:10:49,828
gone right so this local HH a bit here

2027
01:10:47,368 --> 01:10:51,779
this part that's gone and the allow

2028
01:10:49,828 --> 01:10:53,549
editing that stuff we just need

2029
01:10:51,779 --> 01:10:57,018
everything to allow editing at this

2030
01:10:53,550 --> 01:10:59,849
point I think right so we need to

2031
01:10:57,019 --> 01:11:01,710
reassess how we're doing that we need to

2032
01:10:59,849 --> 01:11:04,409
look at this a little bit differently

2033
01:11:01,710 --> 01:11:07,590
and this assets default append HHA index

2034
01:11:04,408 --> 01:11:09,420
not a thing anymore right not a thing so

2035
01:11:07,590 --> 01:11:11,130
let's go ahead and look at where that's

2036
01:11:09,420 --> 01:11:14,578
happening I'm gonna go ahead and search

2037
01:11:11,130 --> 01:11:17,069
for allow editing what's going on where

2038
01:11:14,578 --> 01:11:20,189
are we using that better yet nuke it

2039
01:11:17,069 --> 01:11:22,429
it's gone who's using it tell me now mr.

2040
01:11:20,189 --> 01:11:25,138
compiler tell me what I need to change

2041
01:11:22,429 --> 01:11:26,368
so here you can see we were doing an

2042
01:11:25,139 --> 01:11:28,050
assertion on to make sure we're gonna

2043
01:11:26,368 --> 01:11:29,670
edit it forget that you can edit

2044
01:11:28,050 --> 01:11:32,340
everything now that's just how that goes

2045
01:11:29,670 --> 01:11:35,130
the hht is tell you inside allow editing

2046
01:11:32,340 --> 01:11:37,019
here we're setting that that codes gonna

2047
01:11:35,130 --> 01:11:38,849
get nuked no big deal you know what

2048
01:11:37,019 --> 01:11:39,199
goodbye you're out of here right done

2049
01:11:38,849 --> 01:11:42,809
deal

2050
01:11:39,198 --> 01:11:45,029
let's keep looking who else in if allow

2051
01:11:42,809 --> 01:11:46,349
editing this is very inefficient and we

2052
01:11:45,029 --> 01:11:47,819
could modify the photo cube separate

2053
01:11:46,349 --> 01:11:48,090
array of file names blah blah blah so

2054
01:11:47,819 --> 01:11:50,579
here

2055
01:11:48,090 --> 01:11:54,270
we are doing our sort of look up stuff

2056
01:11:50,579 --> 01:11:57,029
so you know what again this is code that

2057
01:11:54,270 --> 01:11:59,070
could just be run on everybody so you

2058
01:11:57,029 --> 01:12:01,829
know maybe we just want to do this on if

2059
01:11:59,069 --> 01:12:03,448
internal um but that's it because I

2060
01:12:01,829 --> 01:12:06,359
think that's the only thing right so

2061
01:12:03,448 --> 01:12:07,859
this is just a if handmade internal you

2062
01:12:06,359 --> 01:12:10,109
know off you go so if you've done your

2063
01:12:07,859 --> 01:12:11,939
compile in a way that's suggesting

2064
01:12:10,109 --> 01:12:14,219
you're gonna actually be doing edits to

2065
01:12:11,939 --> 01:12:15,569
the code that's the only thing that

2066
01:12:14,219 --> 01:12:18,000
would determine whether you call this I

2067
01:12:15,569 --> 01:12:20,399
think right that's it um so I think

2068
01:12:18,000 --> 01:12:23,429
that's what we want to do if I come down

2069
01:12:20,399 --> 01:12:26,069
to the import code I'll put that around

2070
01:12:23,429 --> 01:12:27,960
it as well so if handmade internal but

2071
01:12:26,069 --> 01:12:29,509
that's the only thing otherwise you're

2072
01:12:27,960 --> 01:12:34,079
good to go

2073
01:12:29,510 --> 01:12:35,820
make sense oops okay so now every HHA is

2074
01:12:34,079 --> 01:12:38,158
available for editing and so now we just

2075
01:12:35,819 --> 01:12:40,500
need to actually figure out for any

2076
01:12:38,158 --> 01:12:42,118
given asset which ones are gonna go into

2077
01:12:40,500 --> 01:12:43,859
because it can go into anything and it's

2078
01:12:42,118 --> 01:12:45,359
just based on which one you said it was

2079
01:12:43,859 --> 01:12:47,339
supposed to go into that's we're gonna

2080
01:12:45,359 --> 01:12:49,618
pack it so let's go ahead and take a

2081
01:12:47,340 --> 01:12:52,170
look inside

2082
01:12:49,618 --> 01:12:55,049
the asset code where we have that going

2083
01:12:52,170 --> 01:12:57,510
so in here we can go ahead and take a

2084
01:12:55,050 --> 01:12:58,889
look at default append HHA index that's

2085
01:12:57,510 --> 01:12:59,099
gonna get out of here right there it

2086
01:12:58,889 --> 01:13:00,989
goes

2087
01:12:59,099 --> 01:13:03,090
so now we just need to see who's

2088
01:13:00,988 --> 01:13:04,289
actually using that and remember it's

2089
01:13:03,090 --> 01:13:05,940
probably gonna be pretty simple yeah you

2090
01:13:04,289 --> 01:13:07,948
can see it right here so when we do

2091
01:13:05,939 --> 01:13:11,189
write image to HH a file you can see

2092
01:13:07,948 --> 01:13:12,988
that our situation as it as it exists is

2093
01:13:11,189 --> 01:13:14,549
it needs to know which file index it's

2094
01:13:12,988 --> 01:13:18,019
appending to right that's the thing that

2095
01:13:14,550 --> 01:13:21,090
we actually need so when we and in fact

2096
01:13:18,020 --> 01:13:22,619
when we actually do that at this point

2097
01:13:21,090 --> 01:13:26,010
in the code we could actually create a

2098
01:13:22,618 --> 01:13:28,198
new HHA if that HHA didn't exist before

2099
01:13:26,010 --> 01:13:30,230
right we could actually create it so

2100
01:13:28,198 --> 01:13:33,419
what we want to do here is have our

2101
01:13:30,229 --> 01:13:35,428
source info in effect tell us that

2102
01:13:33,420 --> 01:13:38,069
information let's go ahead and add that

2103
01:13:35,429 --> 01:13:39,960
in so in here here's our import source

2104
01:13:38,069 --> 01:13:41,609
info what I'm gonna do is say when we

2105
01:13:39,960 --> 01:13:45,389
create that import source info we also

2106
01:13:41,609 --> 01:13:48,109
need which file index the hfj is going

2107
01:13:45,389 --> 01:13:51,060
to be so we're going to call this like

2108
01:13:48,109 --> 01:13:52,710
append HHA index right we're gonna keep

2109
01:13:51,060 --> 01:13:54,300
this code path the way it was we're

2110
01:13:52,710 --> 01:13:56,639
doing a little bit higher up so that

2111
01:13:54,300 --> 01:13:59,250
asset file index equals zero asset file

2112
01:13:56,639 --> 01:14:01,730
index equals default append right now

2113
01:13:59,250 --> 01:14:05,789
what I'd like to do here is

2114
01:14:01,729 --> 01:14:08,099
maybe we don't even do the if we just

2115
01:14:05,789 --> 01:14:10,350
say we always append to the place that

2116
01:14:08,100 --> 01:14:12,360
we said we would append because the user

2117
01:14:10,350 --> 01:14:16,710
may want to change the target for this

2118
01:14:12,359 --> 01:14:18,359
particular PA PNG and that's fine

2119
01:14:16,710 --> 01:14:21,090
right so what we're going to do here is

2120
01:14:18,359 --> 01:14:24,569
say look that asset is gonna get that

2121
01:14:21,090 --> 01:14:28,079
from the append HHA index always okay

2122
01:14:24,569 --> 01:14:32,069
now we'll compile fine we just won't run

2123
01:14:28,079 --> 01:14:32,760
fine or well no we won't because I used

2124
01:14:32,069 --> 01:14:34,500
the wrong thing

2125
01:14:32,760 --> 01:14:39,440
I meant info right I meant that source

2126
01:14:34,500 --> 01:14:42,779
info this thing right here now I do me

2127
01:14:39,439 --> 01:14:44,579
now I will run compile fine but I won't

2128
01:14:42,779 --> 01:14:46,019
run fine why would I run fine I won't

2129
01:14:44,579 --> 01:14:47,340
run fine because what's gonna happen

2130
01:14:46,020 --> 01:14:48,750
here is that's when we can they set to

2131
01:14:47,340 --> 01:14:50,279
zero we've never initialized it to

2132
01:14:48,750 --> 01:14:52,140
anything so it's just gonna be garbage

2133
01:14:50,279 --> 01:14:53,698
and we're gonna not actually append the

2134
01:14:52,140 --> 01:14:55,170
file we want to so we have to do is go

2135
01:14:53,698 --> 01:14:57,119
back to where we built that source info

2136
01:14:55,170 --> 01:14:58,949
right and when we pass it down we've got

2137
01:14:57,119 --> 01:15:01,260
to actually do the work of finding out

2138
01:14:58,948 --> 01:15:02,759
what HHA this thing actually goes in

2139
01:15:01,260 --> 01:15:05,190
right we've got to do some kind of a

2140
01:15:02,760 --> 01:15:07,530
search to figure that out and so what I

2141
01:15:05,189 --> 01:15:09,479
can do is I can again promote that up to

2142
01:15:07,529 --> 01:15:11,369
the HHA fields because there's no sense

2143
01:15:09,479 --> 01:15:13,589
in me creating it every time so what I

2144
01:15:11,369 --> 01:15:15,929
can do is I mean maybe there is I don't

2145
01:15:13,590 --> 01:15:17,730
know it's it's maybe it's just like it

2146
01:15:15,929 --> 01:15:19,640
is six of one half dozen other hard to

2147
01:15:17,729 --> 01:15:22,619
say it doesn't really matter point being

2148
01:15:19,640 --> 01:15:24,179
at some point and we can do it like here

2149
01:15:22,619 --> 01:15:26,069
for now and we can decide if we want to

2150
01:15:24,179 --> 01:15:28,560
promote it up later when we actually

2151
01:15:26,069 --> 01:15:30,359
create that type right here what we need

2152
01:15:28,560 --> 01:15:32,940
to do is say all right the append HHA

2153
01:15:30,359 --> 01:15:35,099
index has to equal something so what are

2154
01:15:32,939 --> 01:15:38,698
you to do is take this

2155
01:15:35,100 --> 01:15:42,120
HHA feels request here and i need to get

2156
01:15:38,698 --> 01:15:46,469
the HHA from that name right now you use

2157
01:15:42,119 --> 01:15:48,750
that name to go find the HHA and if i

2158
01:15:46,469 --> 01:15:51,630
don't already have it i need to make it

2159
01:15:48,750 --> 01:15:53,698
okay that's important because so far we

2160
01:15:51,630 --> 01:15:56,579
haven't done that particular operation

2161
01:15:53,698 --> 01:15:58,529
other than in the HHA edit so we also

2162
01:15:56,579 --> 01:16:01,649
need the ability to sort of create an

2163
01:15:58,529 --> 01:16:03,659
HHA from whole cloth where none existed

2164
01:16:01,649 --> 01:16:06,000
prior okay and so that's another thing

2165
01:16:03,659 --> 01:16:08,630
that we're gonna have to do it's okay

2166
01:16:06,000 --> 01:16:08,630
let's get started

2167
01:16:11,060 --> 01:16:17,460
how much time do I have

2168
01:16:12,930 --> 01:16:25,469
Oh retino I like I said before I got 30

2169
01:16:17,460 --> 01:16:30,020
minutes right I got 30 minutes yeah I'm

2170
01:16:25,469 --> 01:16:34,289
drinking a very strange concoctions day

2171
01:16:30,020 --> 01:16:37,230
this is what I've been drinking lately

2172
01:16:34,289 --> 01:16:39,738
for reasons unknown to man and just who

2173
01:16:37,229 --> 01:16:49,349
knows why do I do common milk don't know

2174
01:16:39,738 --> 01:16:54,269
this is 25% Newman's own lemonade 75%

2175
01:16:49,350 --> 01:17:03,000
water solution so it's like a 1 2 3

2176
01:16:54,270 --> 01:17:11,130
ratio filled with 1/8 of a cup of chia

2177
01:17:03,000 --> 01:17:13,460
seeds per gallon and out them hydrate

2178
01:17:11,130 --> 01:17:13,460
overnight

2179
01:17:23,310 --> 01:17:29,380
that's one record back to our story

2180
01:17:27,159 --> 01:17:30,760
all right append h h index needs to get

2181
01:17:29,380 --> 01:17:32,529
this from somewhere okay we need to be

2182
01:17:30,760 --> 01:17:33,850
able to look up this HH a and if the HIV

2183
01:17:32,529 --> 01:17:35,050
doesn't exist already in the asset

2184
01:17:33,850 --> 01:17:36,130
system we need to actually create one so

2185
01:17:35,050 --> 01:17:37,480
we're gonna create a file from whole

2186
01:17:36,130 --> 01:17:38,920
cloth it's not something we really done

2187
01:17:37,479 --> 01:17:40,899
before so again this is something that

2188
01:17:38,920 --> 01:17:43,020
we need to maybe add a little bit of a

2189
01:17:40,899 --> 01:17:46,210
support to the to the file system before

2190
01:17:43,020 --> 01:17:47,860
so we can actually say hey when we pass

2191
01:17:46,210 --> 01:17:49,930
to you and i don't know if we've done

2192
01:17:47,859 --> 01:17:51,670
this from that but inside wintered new

2193
01:17:49,930 --> 01:17:53,170
handmade like if we do open file or

2194
01:17:51,670 --> 01:17:55,090
something like that we're going to have

2195
01:17:53,170 --> 01:17:58,060
to actually tell you stuff like you can

2196
01:17:55,090 --> 01:17:59,560
you know do and open always right so you

2197
01:17:58,060 --> 01:18:02,050
can see in here if we pass open file

2198
01:17:59,560 --> 01:18:04,030
right we'll do that but i don't really

2199
01:18:02,050 --> 01:18:05,680
necessarily know how we would even get

2200
01:18:04,029 --> 01:18:07,479
to this win32 open file because we don't

2201
01:18:05,680 --> 01:18:10,119
have a file name yet so when we do get

2202
01:18:07,479 --> 01:18:12,459
filed by path we may have to augment get

2203
01:18:10,119 --> 01:18:14,738
file by path to support the case where

2204
01:18:12,460 --> 01:18:16,510
we actually don't have a file so in the

2205
01:18:14,738 --> 01:18:19,899
case where this actually returns nothing

2206
01:18:16,510 --> 01:18:23,440
we couldn't find the file we still need

2207
01:18:19,899 --> 01:18:26,019
to return a result right in that case

2208
01:18:23,439 --> 01:18:27,219
with just null or whatever right so

2209
01:18:26,020 --> 01:18:28,810
we're gonna have to have some way of

2210
01:18:27,219 --> 01:18:30,460
having that happen so there might be a

2211
01:18:28,810 --> 01:18:33,670
little bit of an update here there might

2212
01:18:30,460 --> 01:18:34,989
be a little tiny bit of a thing that's

2213
01:18:33,670 --> 01:18:36,609
actually gonna happen there that it

2214
01:18:34,988 --> 01:18:38,289
wasn't happening before so we kind of

2215
01:18:36,609 --> 01:18:40,929
got to work with that and see how we

2216
01:18:38,289 --> 01:18:42,880
want to do things here right so we've

2217
01:18:40,930 --> 01:18:44,140
got some work to do there and and and we

2218
01:18:42,880 --> 01:18:46,239
also have some things we might want to

2219
01:18:44,140 --> 01:18:48,670
change for example this stuff here we

2220
01:18:46,238 --> 01:18:50,979
may want to change this as well the wild

2221
01:18:48,670 --> 01:18:52,359
carding stuff may want to be changed a

2222
01:18:50,979 --> 01:18:53,948
little bit we've got a lot of things

2223
01:18:52,359 --> 01:18:57,939
we've got to kind of look at but you

2224
01:18:53,948 --> 01:19:00,210
know as we go also this can go away as

2225
01:18:57,939 --> 01:19:03,909
we're sort of going through it we can do

2226
01:19:00,210 --> 01:19:05,469
you know updates as necessary so let's

2227
01:19:03,909 --> 01:19:07,389
first get this to write the files that

2228
01:19:05,469 --> 01:19:09,039
actually do exist and then we'll try to

2229
01:19:07,390 --> 01:19:10,090
make it right to files that don't exist

2230
01:19:09,039 --> 01:19:11,890
because that one's gonna be a little

2231
01:19:10,090 --> 01:19:14,920
harder so you don't have the s back and

2232
01:19:11,890 --> 01:19:17,469
yet in place for that I don't think so

2233
01:19:14,920 --> 01:19:20,230
here we go inside the asset system if

2234
01:19:17,469 --> 01:19:23,829
you remember correctly each individual

2235
01:19:20,229 --> 01:19:24,279
source file I'm sorry each individual

2236
01:19:23,829 --> 01:19:28,359
source

2237
01:19:24,279 --> 01:19:30,550
HHA that we load remembers the fact that

2238
01:19:28,359 --> 01:19:32,920
it was loaded you can see it here in

2239
01:19:30,550 --> 01:19:35,860
asset file what it doesn't actually

2240
01:19:32,920 --> 01:19:36,489
remember is the name of that file and so

2241
01:19:35,859 --> 01:19:37,868
one of the things

2242
01:19:36,488 --> 01:19:39,848
you can see here as we got this platform

2243
01:19:37,868 --> 01:19:41,738
file handle I don't actually know that

2244
01:19:39,849 --> 01:19:43,119
the platform file handle tells you

2245
01:19:41,738 --> 01:19:45,038
anything about the name in fact I'm

2246
01:19:43,118 --> 01:19:46,748
pretty sure that it doesn't tell you

2247
01:19:45,038 --> 01:19:48,279
anything about the name so you don't

2248
01:19:46,748 --> 01:19:51,399
actually have any idea what you're

2249
01:19:48,279 --> 01:19:53,380
looking at right and so what we would

2250
01:19:51,399 --> 01:19:56,339
need at least here is something that we

2251
01:19:53,380 --> 01:19:58,538
can use to match say the HHA name

2252
01:19:56,340 --> 01:20:00,730
against this asset file that we've got

2253
01:19:58,538 --> 01:20:07,899
loaded so we can search for them by name

2254
01:20:00,729 --> 01:20:10,078
as necessary I really would love to know

2255
01:20:07,899 --> 01:20:14,498
what all this beeping is about I'm

2256
01:20:10,078 --> 01:20:14,768
hearing it but I can't see it I don't

2257
01:20:14,498 --> 01:20:16,090
know

2258
01:20:14,769 --> 01:20:19,860
hopefully they're not beating at me I

2259
01:20:16,090 --> 01:20:19,860
don't see how they could because I'm up

2260
01:20:20,760 --> 01:20:27,219
are you hearing this I have no idea

2261
01:20:25,210 --> 01:20:30,788
who's beeping why are you beeping who

2262
01:20:27,219 --> 01:20:33,219
are you beeping at oh well you know

2263
01:20:30,788 --> 01:20:36,189
there's like a giant truck or something

2264
01:20:33,219 --> 01:20:42,670
that's in the alley I'm guessing that

2265
01:20:36,189 --> 01:20:45,848
maybe that maybe nobody kicked I I think

2266
01:20:42,670 --> 01:20:49,809
a giant truck may have blocked the the

2267
01:20:45,849 --> 01:20:52,569
entrance to the building and someone is

2268
01:20:49,809 --> 01:20:55,029
like Rage Horning right now they're just

2269
01:20:52,569 --> 01:20:57,518
like slamming on the horn hoping it will

2270
01:20:55,029 --> 01:21:02,349
move is that what's happening oh yeah

2271
01:20:57,519 --> 01:21:05,619
yeah and then they just moved yeah they

2272
01:21:02,349 --> 01:21:10,239
moved far enough forwards all right nice

2273
01:21:05,618 --> 01:21:14,339
work folks ah yes living in cities it's

2274
01:21:10,238 --> 01:21:18,189
always so good all right anyway I'm

2275
01:21:14,340 --> 01:21:19,538
moving on so we need some way of

2276
01:21:18,189 --> 01:21:21,368
actually looking these things up by name

2277
01:21:19,538 --> 01:21:25,599
so we at least need to store in here

2278
01:21:21,368 --> 01:21:27,219
something like a hash value for the file

2279
01:21:25,599 --> 01:21:28,989
name so we can see whether or not this

2280
01:21:27,219 --> 01:21:31,420
is it so let's let that least do that

2281
01:21:28,988 --> 01:21:33,248
right let's say here this is like the

2282
01:21:31,420 --> 01:21:35,050
hash of name or something or hash of

2283
01:21:33,248 --> 01:21:37,118
file name let's put that in there so

2284
01:21:35,050 --> 01:21:39,670
that when we load these things up we can

2285
01:21:37,118 --> 01:21:41,408
actually use that file name to hash it

2286
01:21:39,670 --> 01:21:43,809
right so we can see what the actual file

2287
01:21:41,408 --> 01:21:48,069
name is and that's pretty easy to do so

2288
01:21:43,809 --> 01:21:49,690
in here we can say when we do our when

2289
01:21:48,069 --> 01:21:51,159
we actually go through here and Lodi

2290
01:21:49,689 --> 01:21:53,829
these in right you can see us doing it

2291
01:21:51,159 --> 01:21:55,448
here we go through our files we can load

2292
01:21:53,829 --> 01:21:56,829
you know we load each of these in we

2293
01:21:55,448 --> 01:22:00,309
could check that checksum or something

2294
01:21:56,829 --> 01:22:03,539
and use that right so in order to do

2295
01:22:00,310 --> 01:22:06,430
that it's a little bit Squinkie to me

2296
01:22:03,539 --> 01:22:08,050
when we load each of these hhas what you

2297
01:22:06,430 --> 01:22:10,150
can see that happening curious we don't

2298
01:22:08,050 --> 01:22:11,890
ever really strip the name down we just

2299
01:22:10,149 --> 01:22:14,769
used the name that came back

2300
01:22:11,890 --> 01:22:16,060
or rather we you know at this point

2301
01:22:14,770 --> 01:22:17,949
don't really even look at the name that

2302
01:22:16,060 --> 01:22:19,420
came back but we have no idea all we

2303
01:22:17,948 --> 01:22:21,609
know is that we got back some kind of

2304
01:22:19,420 --> 01:22:23,619
base name so what we can do is hash that

2305
01:22:21,609 --> 01:22:26,559
base name I guess and then what we'll do

2306
01:22:23,619 --> 01:22:29,829
is use the name that we create out of

2307
01:22:26,560 --> 01:22:32,140
the HHA side of things to go from there

2308
01:22:29,829 --> 01:22:34,000
so in here what I can do is say look

2309
01:22:32,140 --> 01:22:35,980
this file it's got the asset base type

2310
01:22:34,000 --> 01:22:39,609
is that stuff while I'm at it let's do

2311
01:22:35,979 --> 01:22:41,759
hash of filename and so hash a file name

2312
01:22:39,609 --> 01:22:45,939
will just say the file info base name

2313
01:22:41,760 --> 01:22:52,230
here let's go ahead and take the hash of

2314
01:22:45,939 --> 01:22:56,529
that right to me but I may want to do it

2315
01:22:52,229 --> 01:22:59,259
maybe I want to do this right we've got

2316
01:22:56,529 --> 01:23:02,109
the space name maybe what I want to do

2317
01:22:59,260 --> 01:23:04,810
is create a string here that's going to

2318
01:23:02,109 --> 01:23:11,259
be instead of base name it's gonna be

2319
01:23:04,810 --> 01:23:12,880
like the stem or something right without

2320
01:23:11,260 --> 01:23:14,530
the extension because I don't really

2321
01:23:12,880 --> 01:23:16,239
necessarily want the HHA extension in

2322
01:23:14,529 --> 01:23:17,769
there because we we just refer to things

2323
01:23:16,238 --> 01:23:20,109
that way sort of a little bit more

2324
01:23:17,770 --> 01:23:23,469
generically perhaps so maybe I want to

2325
01:23:20,109 --> 01:23:24,969
be able to get just the stem and if I

2326
01:23:23,469 --> 01:23:27,219
want to do that then what I do is I say

2327
01:23:24,969 --> 01:23:29,350
hash of filename is actually going to be

2328
01:23:27,219 --> 01:23:31,899
stem or you know in this case I can say

2329
01:23:29,350 --> 01:23:33,670
hash of stem right so we know that it's

2330
01:23:31,899 --> 01:23:39,960
you know specifically not including that

2331
01:23:33,670 --> 01:23:39,960
part so I can just call a hash hash of

2332
01:23:43,738 --> 01:23:49,118
okay string hash up there it is so if I

2333
01:23:46,840 --> 01:23:51,340
just do string hash of stem then we can

2334
01:23:49,118 --> 01:23:53,049
get that out and then you hear what I do

2335
01:23:51,340 --> 01:23:56,710
the stem I just need to find out where

2336
01:23:53,050 --> 01:23:58,239
the extension is right uh and so like I

2337
01:23:56,710 --> 01:24:02,349
don't know if we've got anything like

2338
01:23:58,238 --> 01:24:04,768
that like fine fine first or you know

2339
01:24:02,349 --> 01:24:07,150
fine for slash or anything like that

2340
01:24:04,769 --> 01:24:12,130
extension do we have any of this stuff

2341
01:24:07,149 --> 01:24:15,248
remove extension here hey look there we

2342
01:24:12,130 --> 01:24:17,859
go so remove extension we'll get rid of

2343
01:24:15,248 --> 01:24:20,109
the period for us so this is exactly

2344
01:24:17,859 --> 01:24:21,759
what I wanted right um so you can remove

2345
01:24:20,109 --> 01:24:23,139
the path and the remove the extension if

2346
01:24:21,760 --> 01:24:24,219
you want to which is actually what

2347
01:24:23,139 --> 01:24:28,210
exactly what I wanted

2348
01:24:24,219 --> 01:24:30,939
Wow thank you past me for giving future

2349
01:24:28,210 --> 01:24:32,380
me a library use so what I want to do

2350
01:24:30,939 --> 01:24:34,328
here is I want to remove the path and

2351
01:24:32,380 --> 01:24:36,010
read the extension from this base name

2352
01:24:34,328 --> 01:24:38,649
that I'm getting I think the base name

2353
01:24:36,010 --> 01:24:40,840
is just a care star and so what I want

2354
01:24:38,649 --> 01:24:46,658
to do I need a way of wrapping that

2355
01:24:40,840 --> 01:24:51,219
together tuning where is this in does

2356
01:24:46,658 --> 01:24:54,518
this do we have this in is this in the

2357
01:24:51,219 --> 01:24:59,109
h2o so I want this code and shared I

2358
01:24:54,519 --> 01:25:01,329
want this give to KC immediately so I

2359
01:24:59,109 --> 01:25:03,670
need a way to wrap Z I've got that so

2360
01:25:01,328 --> 01:25:06,788
basically this ridiculous line of code

2361
01:25:03,670 --> 01:25:08,260
here gives me what I want right that

2362
01:25:06,788 --> 01:25:10,029
removes everything from it and now I

2363
01:25:08,260 --> 01:25:12,400
just have the stem and then I can cut

2364
01:25:10,029 --> 01:25:14,498
the hash of it and now I know for any

2365
01:25:12,399 --> 01:25:15,939
given file that we floated I can look at

2366
01:25:14,498 --> 01:25:19,748
the hashes to see if the names match

2367
01:25:15,939 --> 01:25:21,428
right I want to so here where I remove

2368
01:25:19,748 --> 01:25:24,519
the extension cannot be read one from

2369
01:25:21,429 --> 01:25:26,230
string to string star that's totally

2370
01:25:24,519 --> 01:25:30,400
fine I guess I should have done this

2371
01:25:26,229 --> 01:25:34,319
right string stem equals rap Z and then

2372
01:25:30,399 --> 01:25:34,319
I can just say hey

2373
01:25:36,349 --> 01:25:39,949
there we go that's why you probably want

2374
01:25:38,208 --> 01:25:41,809
to return those rather than take the

2375
01:25:39,948 --> 01:25:42,918
address up that's why this is not the

2376
01:25:41,809 --> 01:25:45,798
best form because you can't do

2377
01:25:42,918 --> 01:25:47,809
functional composite you can't compose

2378
01:25:45,798 --> 01:25:50,599
them right and so it's really better

2379
01:25:47,809 --> 01:25:54,199
typically to do returns you know this

2380
01:25:50,599 --> 01:25:56,208
this should really return the the thing

2381
01:25:54,198 --> 01:25:59,328
and then you can compose them exactly

2382
01:25:56,208 --> 01:26:01,548
the way that I did it before and so you

2383
01:25:59,328 --> 01:26:03,158
know since I moved those two shared I'm

2384
01:26:01,548 --> 01:26:05,269
just going to go ahead and do that right

2385
01:26:03,158 --> 01:26:07,698
I'm just gonna do it exactly the way

2386
01:26:05,269 --> 01:26:09,739
that I wanted to because why not so what

2387
01:26:07,698 --> 01:26:11,898
do I do here say look let's return these

2388
01:26:09,738 --> 01:26:13,728
so here we're gonna do it like this and

2389
01:26:11,899 --> 01:26:15,739
that you know it's still pretty easy to

2390
01:26:13,729 --> 01:26:18,798
do so here's just filename in it and

2391
01:26:15,738 --> 01:26:20,598
then here's file name right and then you

2392
01:26:18,798 --> 01:26:25,578
can just run the exact same code exactly

2393
01:26:20,599 --> 01:26:28,969
the way you did it before right easy

2394
01:26:25,578 --> 01:26:31,969
peasy lemon squeezy and so all I need to

2395
01:26:28,969 --> 01:26:34,038
do is change these to that and you know

2396
01:26:31,969 --> 01:26:36,198
off you go and then the same thing

2397
01:26:34,038 --> 01:26:37,608
happens with this removed path one so we

2398
01:26:36,198 --> 01:26:41,088
here you know you pass in the filename

2399
01:26:37,609 --> 01:26:43,519
and I just create a temporary and I

2400
01:26:41,088 --> 01:26:47,448
return that temporary and I replace all

2401
01:26:43,519 --> 01:26:50,689
these so they're different they work on

2402
01:26:47,448 --> 01:26:52,308
a local really really easy but you can

2403
01:26:50,689 --> 01:26:53,659
see why it makes sense there because

2404
01:26:52,309 --> 01:26:54,859
it's just it's nice to be able to

2405
01:26:53,658 --> 01:26:56,719
functionally compose these things

2406
01:26:54,859 --> 01:26:58,189
without having to like line them all up

2407
01:26:56,719 --> 01:26:59,569
you can just put them on the same line

2408
01:26:58,189 --> 01:27:01,969
and then get the thing you actually

2409
01:26:59,569 --> 01:27:03,409
wanted I mean here you can even go even

2410
01:27:01,969 --> 01:27:05,389
more ridiculous if you just want to be

2411
01:27:03,408 --> 01:27:06,918
some kind of you know crazy superhero

2412
01:27:05,389 --> 01:27:09,168
you can just say look give me the whole

2413
01:27:06,918 --> 01:27:10,698
thing I'm not even gonna ever create a

2414
01:27:09,168 --> 01:27:13,338
temporary I just want the hash so

2415
01:27:10,698 --> 01:27:15,738
there's this giant hash right I mean why

2416
01:27:13,338 --> 01:27:17,238
not you know pretty easy so let's just

2417
01:27:15,738 --> 01:27:18,978
fix the place in here where that was

2418
01:27:17,238 --> 01:27:21,188
happening so we can cure this default

2419
01:27:18,979 --> 01:27:24,289
annotation all I have to do is again

2420
01:27:21,189 --> 01:27:25,969
just pass this in like this so the

2421
01:27:24,288 --> 01:27:27,318
default annotation source file and you

2422
01:27:25,969 --> 01:27:29,328
know what here you can see it it's being

2423
01:27:27,319 --> 01:27:32,030
used exactly the same way so I can

2424
01:27:29,328 --> 01:27:34,219
literally just do this and then get rid

2425
01:27:32,029 --> 01:27:36,618
of this code entirely right so again

2426
01:27:34,219 --> 01:27:39,319
nice and clean no reason not to do that

2427
01:27:36,618 --> 01:27:42,378
so I think you just do going on from

2428
01:27:39,319 --> 01:27:45,260
there let me switch it here so you can

2429
01:27:42,378 --> 01:27:47,208
see this appendage index I have the HHA

2430
01:27:45,260 --> 01:27:50,539
stem what I need to do is I need to get

2431
01:27:47,208 --> 01:27:52,609
the stem I need to go

2432
01:27:50,539 --> 01:27:54,350
I need to add something that searches

2433
01:27:52,609 --> 01:27:56,299
through all the files we have open and

2434
01:27:54,350 --> 01:27:58,520
finds the one that has this particular

2435
01:27:56,300 --> 01:28:00,050
stem so I'm innocent get a function for

2436
01:27:58,520 --> 01:28:01,520
that because we probably want to do that

2437
01:28:00,050 --> 01:28:02,750
in multiple places potentially I don't

2438
01:28:01,520 --> 01:28:05,000
know to be necessarily will but we might

2439
01:28:02,750 --> 01:28:08,510
want to so I'm gonna do like a get or

2440
01:28:05,000 --> 01:28:10,279
create HHA kind of call here and I'm

2441
01:28:08,510 --> 01:28:12,829
gonna pass the game assets and I'm gonna

2442
01:28:10,279 --> 01:28:15,619
pass that HHA stem right and again

2443
01:28:12,829 --> 01:28:18,350
that's just the stem and maybe I'll say

2444
01:28:15,619 --> 01:28:20,479
like a buy stem right and so in here

2445
01:28:18,350 --> 01:28:22,400
I'll say the get or create HHA buy stem

2446
01:28:20,479 --> 01:28:25,309
maybe we'll have the getter create take

2447
01:28:22,399 --> 01:28:27,259
a true which means hey look if you can't

2448
01:28:25,310 --> 01:28:30,020
find it create it because we do actually

2449
01:28:27,260 --> 01:28:31,699
need you to always make one of these and

2450
01:28:30,020 --> 01:28:34,340
then I'll put that in here so I can say

2451
01:28:31,699 --> 01:28:35,869
okay here's a way to do that right so

2452
01:28:34,340 --> 01:28:37,250
here's the stem that's the second

2453
01:28:35,869 --> 01:28:39,409
parameter that's actually telling us

2454
01:28:37,250 --> 01:28:41,869
okay look this is what we actually want

2455
01:28:39,409 --> 01:28:43,430
thing to be called so you got to find

2456
01:28:41,869 --> 01:28:44,720
something matches that stem and then

2457
01:28:43,430 --> 01:28:46,159
we're gonna have in here you know

2458
01:28:44,720 --> 01:28:48,170
whether or not you should create create

2459
01:28:46,159 --> 01:28:49,729
if not found right something that says

2460
01:28:48,170 --> 01:28:52,730
if you don't find this I need you to

2461
01:28:49,729 --> 01:28:55,519
make one we're not going to support that

2462
01:28:52,729 --> 01:28:57,739
just yet but we will you know support a

2463
01:28:55,520 --> 01:28:59,570
little bit later on okay so in here we

2464
01:28:57,739 --> 01:29:01,460
say here's the assets here's the stem

2465
01:28:59,569 --> 01:29:02,809
what I want to do is loop over all the

2466
01:29:01,460 --> 01:29:04,119
files that are in the asset system so

2467
01:29:02,810 --> 01:29:06,230
let's go take a look at where those are

2468
01:29:04,119 --> 01:29:08,090
inside the asset system we just have a

2469
01:29:06,229 --> 01:29:10,549
flat array I think probably maybe I'm

2470
01:29:08,090 --> 01:29:11,239
not really sure I don't remember exactly

2471
01:29:10,550 --> 01:29:12,980
how that worked

2472
01:29:11,239 --> 01:29:14,599
yeah you can see it here it's file count

2473
01:29:12,979 --> 01:29:15,679
and files so all I need to do is start

2474
01:29:14,600 --> 01:29:16,940
out for the loop I'm gonna go ahead and

2475
01:29:15,680 --> 01:29:18,619
say which is the file index so here's

2476
01:29:16,939 --> 01:29:19,909
the HSA in next I'm going from one to

2477
01:29:18,619 --> 01:29:21,529
the next to the next

2478
01:29:19,909 --> 01:29:25,699
I'm gonna look for each through each of

2479
01:29:21,529 --> 01:29:26,929
them to see if I can find that file if I

2480
01:29:25,699 --> 01:29:29,869
remember correctly zero doesn't actually

2481
01:29:26,930 --> 01:29:31,280
exist so I think I can skip zero but I

2482
01:29:29,869 --> 01:29:32,659
shouldn't need to because that stem

2483
01:29:31,279 --> 01:29:34,759
should work one way or the other right

2484
01:29:32,659 --> 01:29:35,869
we should be able get that hash that

2485
01:29:34,760 --> 01:29:37,130
hash time to work one way or the other

2486
01:29:35,869 --> 01:29:39,019
so the first thing I want to do is

2487
01:29:37,130 --> 01:29:40,369
actually create that hash so here's the

2488
01:29:39,020 --> 01:29:42,350
stem hash itself I'm gonna go ahead and

2489
01:29:40,369 --> 01:29:44,599
call that string hash right here's that

2490
01:29:42,350 --> 01:29:47,150
thing string hash for your string F

2491
01:29:44,600 --> 01:29:48,380
rather I'm gonna get that out each time

2492
01:29:47,149 --> 01:29:50,659
I go through one of these I'm gonna pull

2493
01:29:48,380 --> 01:29:52,359
out that asset file so here's the file

2494
01:29:50,659 --> 01:29:55,729
that I'm checking I'm gonna look and see

2495
01:29:52,359 --> 01:29:57,739
from the array of files which I'm going

2496
01:29:55,729 --> 01:29:59,419
through the HHA index here so from that

2497
01:29:57,739 --> 01:30:02,210
array of files and we'll look at this

2498
01:29:59,420 --> 01:30:03,409
HHA index and remember this thing is

2499
01:30:02,210 --> 01:30:06,319
going to return me

2500
01:30:03,409 --> 01:30:08,180
one of those indices right so it has to

2501
01:30:06,319 --> 01:30:09,739
have a result here and that result can

2502
01:30:08,180 --> 01:30:11,180
be zero so I getting it yeah if that

2503
01:30:09,739 --> 01:30:13,340
result can be zero again but it means

2504
01:30:11,180 --> 01:30:15,380
that the HSV index right of zero should

2505
01:30:13,340 --> 01:30:16,940
be nothing if I look in here I want to

2506
01:30:15,380 --> 01:30:18,920
make sure that that's actually true that

2507
01:30:16,939 --> 01:30:20,929
I did leave one space for a file that's

2508
01:30:18,920 --> 01:30:22,369
like of the null file right let me just

2509
01:30:20,930 --> 01:30:25,579
double check that that's actually the

2510
01:30:22,369 --> 01:30:28,069
case so when we get files of type back

2511
01:30:25,579 --> 01:30:30,409
in the original situation here where we

2512
01:30:28,069 --> 01:30:32,739
look at that get file handle stuff now

2513
01:30:30,409 --> 01:30:36,019
not the little bit map get files by type

2514
01:30:32,739 --> 01:30:38,630
where is that no no no no no no it's in

2515
01:30:36,020 --> 01:30:40,490
the startup code I can't remember what

2516
01:30:38,630 --> 01:30:43,460
any of it's called the moment so I don't

2517
01:30:40,489 --> 01:30:44,510
actually remember there it is right so

2518
01:30:43,460 --> 01:30:45,949
this is cuz I'm talking about right here

2519
01:30:44,510 --> 01:30:47,780
you can see file and x equals one I'm

2520
01:30:45,949 --> 01:30:49,039
enforcing a zero file beginning that

2521
01:30:47,779 --> 01:30:51,619
means in here I only need to check that

2522
01:30:49,039 --> 01:30:53,659
first one so as we go you know we're

2523
01:30:51,619 --> 01:30:55,010
fine when I look through here if I find

2524
01:30:53,659 --> 01:30:56,989
one I'm gonna set the result each of the

2525
01:30:55,010 --> 01:30:58,670
HHA index and break so all I need to do

2526
01:30:56,989 --> 01:31:00,109
is say look look if the file stem hash

2527
01:30:58,670 --> 01:31:02,060
equals the stem hash that I'm looking

2528
01:31:00,109 --> 01:31:03,829
for then we'll consider the match right

2529
01:31:02,060 --> 01:31:06,110
now I could check the string if I want

2530
01:31:03,829 --> 01:31:09,079
to I don't really care to do that at the

2531
01:31:06,109 --> 01:31:14,949
moment but maybe I'll put to do here you

2532
01:31:09,079 --> 01:31:17,630
know check that stem matches exactly

2533
01:31:14,949 --> 01:31:18,829
right should I do it should I do it

2534
01:31:17,630 --> 01:31:20,420
should I do it should I not do it you

2535
01:31:18,829 --> 01:31:21,800
know what when we think about it look

2536
01:31:20,420 --> 01:31:23,630
here's where we're opening those things

2537
01:31:21,800 --> 01:31:25,279
in the first place right so here's me

2538
01:31:23,630 --> 01:31:27,380
opening those I say file this is one

2539
01:31:25,279 --> 01:31:30,079
here I come through here I'm doing a

2540
01:31:27,380 --> 01:31:34,130
bunch of pushes on here anyway let's see

2541
01:31:30,079 --> 01:31:36,859
if I love a lot I account file blah blah

2542
01:31:34,130 --> 01:31:38,840
blah get all files of type and and then

2543
01:31:36,859 --> 01:31:42,289
I come through here and I read the data

2544
01:31:38,840 --> 01:31:44,989
for the file handle which is open for

2545
01:31:42,289 --> 01:31:46,640
that file I you can see right on here

2546
01:31:44,989 --> 01:31:49,670
I've gotten arena for pushing the file

2547
01:31:46,640 --> 01:31:52,789
count on so you know what let's just

2548
01:31:49,670 --> 01:31:54,440
store it let's just store it I mean so

2549
01:31:52,789 --> 01:31:57,829
we use a little bit extra in release

2550
01:31:54,439 --> 01:32:00,319
mode when we shouldn't I can always if

2551
01:31:57,829 --> 01:32:03,079
around it if I want to I could do like

2552
01:32:00,319 --> 01:32:06,769
an if handmade internal right if I want

2553
01:32:03,079 --> 01:32:08,119
to so sure sure I'm just gonna do it so

2554
01:32:06,770 --> 01:32:10,010
in here where we actually do the hash of

2555
01:32:08,119 --> 01:32:12,229
stem I'm gonna do what the stem actually

2556
01:32:10,010 --> 01:32:14,840
is so here's the the part where I create

2557
01:32:12,229 --> 01:32:17,239
the stem in and of itself so if you take

2558
01:32:14,840 --> 01:32:19,069
a look at this code right here I am

2559
01:32:17,239 --> 01:32:20,809
to put in a temporary here's my stem

2560
01:32:19,069 --> 01:32:22,819
what I want to do is just like push

2561
01:32:20,810 --> 01:32:26,780
string right I want to do a push string

2562
01:32:22,819 --> 01:32:29,840
here so put on the arena this this thing

2563
01:32:26,779 --> 01:32:32,239
right and give me back a copy of that

2564
01:32:29,840 --> 01:32:34,010
thing and then I've got it right so when

2565
01:32:32,239 --> 01:32:36,109
I put that string on I'm good to go I

2566
01:32:34,010 --> 01:32:39,800
have a copy now so we can hear I can say

2567
01:32:36,109 --> 01:32:42,049
if the stem hash is equal then compare

2568
01:32:39,800 --> 01:32:43,489
the strings themselves and see another

2569
01:32:42,050 --> 01:32:45,199
thing you can say is maybe we don't even

2570
01:32:43,489 --> 01:32:46,609
bother looking at the stem hash at all I

2571
01:32:45,199 --> 01:32:48,500
don't know it's a little bit faster

2572
01:32:46,609 --> 01:32:50,899
probably not the names aren't that long

2573
01:32:48,500 --> 01:32:53,090
so who knows maybe that we don't

2574
01:32:50,899 --> 01:33:00,559
actually need that stem hash at all yeah

2575
01:32:53,090 --> 01:33:02,119
mmm yeah probably not so yeah yeah okay

2576
01:33:00,560 --> 01:33:03,140
just get rid of it there's no sense in

2577
01:33:02,119 --> 01:33:04,760
having the stem if we're going to store

2578
01:33:03,140 --> 01:33:05,960
that the hash rather so if we're going

2579
01:33:04,760 --> 01:33:07,880
to store that we don't really need it so

2580
01:33:05,960 --> 01:33:11,060
let's just say here's the file name or

2581
01:33:07,880 --> 01:33:12,829
the file stem we're just going to store

2582
01:33:11,060 --> 01:33:14,360
that so we don't have anymore we

2583
01:33:12,829 --> 01:33:16,640
just stored the actual stem so here we

2584
01:33:14,359 --> 01:33:18,619
just say look if strings are equal and

2585
01:33:16,640 --> 01:33:20,180
we have the file stem hash I'm sorry the

2586
01:33:18,619 --> 01:33:21,979
file stem and the stem that you passed

2587
01:33:20,180 --> 01:33:23,390
us if those two things are equal then

2588
01:33:21,979 --> 01:33:25,069
it's the file that we're looking for and

2589
01:33:23,390 --> 01:33:27,530
we're done right so that's all we need

2590
01:33:25,069 --> 01:33:29,509
to do we won't have to put that to do in

2591
01:33:27,529 --> 01:33:31,250
there anymore cuz we're done and that's

2592
01:33:29,510 --> 01:33:33,110
exactly what we wanted so when we push

2593
01:33:31,250 --> 01:33:35,119
that on there we've now got it we don't

2594
01:33:33,109 --> 01:33:37,130
need that stem hash at all at any time

2595
01:33:35,119 --> 01:33:39,039
really any more and so now all we have

2596
01:33:37,130 --> 01:33:41,569
to do is fight the fact that I think

2597
01:33:39,039 --> 01:33:43,579
nope yeah and that's not necessary that

2598
01:33:41,569 --> 01:33:45,889
I'm I don't think the push actually

2599
01:33:43,579 --> 01:33:49,039
works there I'm not sure about that what

2600
01:33:45,890 --> 01:33:53,090
just happened there I thought we had a

2601
01:33:49,039 --> 01:33:53,479
push string what I didn't where did I

2602
01:33:53,090 --> 01:33:55,010
put that

2603
01:33:53,479 --> 01:34:00,679
come on second I put it in the wrong

2604
01:33:55,010 --> 01:34:05,150
place apparently what's just what just

2605
01:34:00,680 --> 01:34:05,510
happened did you not see me okay I'm an

2606
01:34:05,149 --> 01:34:07,099
idiot

2607
01:34:05,510 --> 01:34:09,320
I obviously deleted the wrong thing or

2608
01:34:07,100 --> 01:34:11,600
something cuz I'm just um I'm just that

2609
01:34:09,319 --> 01:34:13,309
dumb I guess I guess I don't know

2610
01:34:11,600 --> 01:34:14,660
speaking the announcer voice is hard

2611
01:34:13,310 --> 01:34:15,770
like I said it just requires a way too

2612
01:34:14,659 --> 01:34:17,210
much talking you probably shouldn't be

2613
01:34:15,770 --> 01:34:18,800
talking that much but anyway this was

2614
01:34:17,210 --> 01:34:20,420
supposed to be a push string and it was

2615
01:34:18,800 --> 01:34:22,010
supposed to be stem and I guess I

2616
01:34:20,420 --> 01:34:23,270
deleted the wrong one but it supposed to

2617
01:34:22,010 --> 01:34:24,650
look like that right that was what was

2618
01:34:23,270 --> 01:34:26,150
supposed to happen and apparently I

2619
01:34:24,649 --> 01:34:27,529
deleted the wrong one I have no idea why

2620
01:34:26,149 --> 01:34:29,089
I did that because I spent the time to

2621
01:34:27,529 --> 01:34:30,389
write it you'd think I'd have some

2622
01:34:29,090 --> 01:34:32,569
appreciation for it but

2623
01:34:30,389 --> 01:34:35,550
anyway when it comes back I believe

2624
01:34:32,569 --> 01:34:36,840
again that push string call I don't

2625
01:34:35,550 --> 01:34:39,179
really ever wrote one that pushes an

2626
01:34:36,840 --> 01:34:40,828
actual-size string on we take a looking

2627
01:34:39,179 --> 01:34:42,779
to see what we did there so you see we

2628
01:34:40,828 --> 01:34:44,578
got a push string Z and a push string

2629
01:34:42,779 --> 01:34:46,050
right it's really this push string here

2630
01:34:44,578 --> 01:34:48,299
that we're talking about what I want to

2631
01:34:46,050 --> 01:34:49,889
do is put on there a thing that says

2632
01:34:48,300 --> 01:34:51,538
okay you know what you can also take a

2633
01:34:49,889 --> 01:34:53,309
regular string source because why not

2634
01:34:51,538 --> 01:34:54,898
and then when we do that on here you can

2635
01:34:53,309 --> 01:34:56,189
see we don't need to call the string

2636
01:34:54,899 --> 01:34:58,619
length it also in the source it's

2637
01:34:56,189 --> 01:35:00,719
actually got the count on there right

2638
01:34:58,618 --> 01:35:02,158
it's got the size of that buffer and so

2639
01:35:00,719 --> 01:35:05,149
then that pretty much gives us exactly

2640
01:35:02,158 --> 01:35:08,188
what we need so let me just go ahead and

2641
01:35:05,149 --> 01:35:10,439
and finish that up that looks good so in

2642
01:35:08,189 --> 01:35:12,030
here where we do assets file count I

2643
01:35:10,439 --> 01:35:14,399
don't know why that got set to game

2644
01:35:12,029 --> 01:35:17,069
state just a completion bug there it's

2645
01:35:14,399 --> 01:35:18,959
actually game assets so off we go and so

2646
01:35:17,069 --> 01:35:21,118
that's good there and then here where we

2647
01:35:18,958 --> 01:35:22,648
do a getter create h2 by stem that

2648
01:35:21,118 --> 01:35:24,630
assets is coming from the context so we

2649
01:35:22,649 --> 01:35:26,459
need to put that on there right and so

2650
01:35:24,630 --> 01:35:27,809
that's the thing that we needed pretty

2651
01:35:26,458 --> 01:35:29,158
much all of its written now except for

2652
01:35:27,809 --> 01:35:29,998
the part that we need to create one of

2653
01:35:29,158 --> 01:35:32,158
these hhas

2654
01:35:29,998 --> 01:35:33,448
if we don't have one right now I'm not

2655
01:35:32,158 --> 01:35:36,299
going to do that so what I'm going to do

2656
01:35:33,448 --> 01:35:38,308
here is say if result equals zero then

2657
01:35:36,300 --> 01:35:39,989
we would need to do it if we're doing

2658
01:35:38,309 --> 01:35:41,939
create if not found

2659
01:35:39,988 --> 01:35:44,549
so if create if not found is set and

2660
01:35:41,939 --> 01:35:46,439
result equals zero is set or rather

2661
01:35:44,550 --> 01:35:48,570
result is not set meaning it is equal to

2662
01:35:46,439 --> 01:35:52,399
zero then what I need to do is create

2663
01:35:48,569 --> 01:35:53,549
the actual HHA so create you know a

2664
01:35:52,399 --> 01:35:59,249
blank

2665
01:35:53,550 --> 01:36:00,809
HHA here okay I don't actually know that

2666
01:35:59,248 --> 01:36:02,368
we want to do that we could make it so

2667
01:36:00,809 --> 01:36:05,418
that for you what you actually are

2668
01:36:02,368 --> 01:36:07,498
supposed to do is call HHA edit yourself

2669
01:36:05,418 --> 01:36:10,439
to create a blank

2670
01:36:07,498 --> 01:36:12,418
HHA to write into we could do that I

2671
01:36:10,439 --> 01:36:19,559
just don't know whether we want to do

2672
01:36:12,418 --> 01:36:21,809
that or not like it's hard to say it's

2673
01:36:19,559 --> 01:36:24,570
hard to say I don't know I really don't

2674
01:36:21,809 --> 01:36:26,550
because what we could say instead here's

2675
01:36:24,569 --> 01:36:29,130
what we could say we could just call

2676
01:36:26,550 --> 01:36:30,719
this gate get HHA by stab remove that

2677
01:36:29,130 --> 01:36:32,849
and say they've got to be there let's

2678
01:36:30,719 --> 01:36:36,059
start up right you're required to create

2679
01:36:32,849 --> 01:36:38,038
the missing ones with HHA edit right and

2680
01:36:36,059 --> 01:36:39,659
if we were going to do that

2681
01:36:38,038 --> 01:36:41,368
then yeah you would have because to

2682
01:36:39,658 --> 01:36:42,958
avoid creating them in case of typos

2683
01:36:41,368 --> 01:36:44,250
like that I don't know if we want to do

2684
01:36:42,958 --> 01:36:48,000
that it's hard to say

2685
01:36:44,250 --> 01:36:51,630
leave it like this for now and and say

2686
01:36:48,000 --> 01:36:53,640
that we would do that if we try to do it

2687
01:36:51,630 --> 01:36:55,829
and can't we still want to have the

2688
01:36:53,640 --> 01:36:57,750
support for the failure there in a sense

2689
01:36:55,829 --> 01:37:00,930
right though so what we probably want to

2690
01:36:57,750 --> 01:37:03,149
do too is when we actually do this info

2691
01:37:00,930 --> 01:37:07,260
get here what we want to do is say if

2692
01:37:03,149 --> 01:37:09,000
you know info dot append HHA index do

2693
01:37:07,260 --> 01:37:11,880
the actual append with the with the

2694
01:37:09,000 --> 01:37:14,760
switch right but then if we can't we

2695
01:37:11,880 --> 01:37:17,970
want to issue an error we want to issue

2696
01:37:14,760 --> 01:37:22,949
an error based on the HHA which

2697
01:37:17,970 --> 01:37:28,710
basically says look couldn't open HHA

2698
01:37:22,949 --> 01:37:30,779
this for writing because like somehow we

2699
01:37:28,710 --> 01:37:32,069
couldn't get to it right for whatever

2700
01:37:30,779 --> 01:37:34,409
reason we don't know if the reason is

2701
01:37:32,069 --> 01:37:37,409
and then we're done so I think that's it

2702
01:37:34,409 --> 01:37:40,590
so the fields HSA is put in here so I

2703
01:37:37,409 --> 01:37:43,019
think that's everything we need and you

2704
01:37:40,590 --> 01:37:44,279
know now in theory the game can actually

2705
01:37:43,020 --> 01:37:47,580
update the hhas

2706
01:37:44,279 --> 01:37:49,529
in theory right and I don't know if it

2707
01:37:47,579 --> 01:37:50,850
will work like I said probably we got

2708
01:37:49,529 --> 01:37:52,710
tons of bugs in there that we'll have to

2709
01:37:50,850 --> 01:37:54,630
debug but the games just still run just

2710
01:37:52,710 --> 01:37:57,149
fine as it is right we should be able to

2711
01:37:54,630 --> 01:37:58,829
run the game OOP that's HHA in it I

2712
01:37:57,149 --> 01:37:59,879
don't actually need HHA to run there's

2713
01:37:58,829 --> 01:38:02,309
no reason for that

2714
01:37:59,880 --> 01:38:03,960
that's good pop over here to win 32

2715
01:38:02,310 --> 01:38:05,880
handmade so the game should still run

2716
01:38:03,960 --> 01:38:07,050
just fine and you know it does so we

2717
01:38:05,880 --> 01:38:08,550
don't have any issues with what's

2718
01:38:07,050 --> 01:38:10,560
loading the a change that we had

2719
01:38:08,550 --> 01:38:12,750
originally what we don't have right now

2720
01:38:10,560 --> 01:38:14,850
is probably any of the editor stuff

2721
01:38:12,750 --> 01:38:17,909
right so if we actually switch into the

2722
01:38:14,850 --> 01:38:18,930
editor mode which we will want to do

2723
01:38:17,909 --> 01:38:20,250
later I don't know if that will actually

2724
01:38:18,930 --> 01:38:21,900
work but we did all the code we needed

2725
01:38:20,250 --> 01:38:24,239
to do so we'll save the debugging for

2726
01:38:21,899 --> 01:38:25,859
next weekend when we can do that and

2727
01:38:24,239 --> 01:38:27,449
then also address things like fonts and

2728
01:38:25,859 --> 01:38:29,189
sounds or stuff we can get him to

2729
01:38:27,449 --> 01:38:31,590
finishing up that code but we did

2730
01:38:29,189 --> 01:38:33,119
everything we need to do yay for us just

2731
01:38:31,590 --> 01:38:34,980
another wire let me go ahead and go to a

2732
01:38:33,119 --> 01:38:37,289
real quick Q&amp;A here anyone who happens

2733
01:38:34,979 --> 01:38:40,639
to have any because I got to go soon

2734
01:38:37,289 --> 01:38:47,720
after this so let's just go ahead and do

2735
01:38:40,640 --> 01:38:47,720
Q&amp;A any questions

2736
01:39:13,408 --> 01:39:16,779
I'm presence Eagle says I actually

2737
01:39:15,340 --> 01:39:18,369
thought you were just gonna vary your

2738
01:39:16,779 --> 01:39:20,710
pitch a lot more in terms of inflection

2739
01:39:18,369 --> 01:39:22,630
not go fast everyone else dream wasn't

2740
01:39:20,710 --> 01:39:25,090
off how faster going to be kept for 10

2741
01:39:22,630 --> 01:39:27,489
Cyril no I don't think so it's in fact

2742
01:39:25,090 --> 01:39:38,020
probably less that I have to do so much

2743
01:39:27,488 --> 01:39:39,939
mental processing to talk what sort of

2744
01:39:38,020 --> 01:39:40,780
pre-release checks actions do you do how

2745
01:39:39,939 --> 01:39:42,250
do you make your programs

2746
01:39:40,779 --> 01:39:44,019
industrial-strength for example do you

2747
01:39:42,250 --> 01:39:46,029
turn all of your ass into fatal errors

2748
01:39:44,020 --> 01:39:49,600
or certain to fail errors do you add

2749
01:39:46,029 --> 01:39:50,979
verbose logging crashed reporters etc so

2750
01:39:49,600 --> 01:39:53,289
a couple of things about that

2751
01:39:50,979 --> 01:39:58,029
first of all never turn asserts into

2752
01:39:53,289 --> 01:39:59,590
fatal errors because the worst so the

2753
01:39:58,029 --> 01:40:02,800
worst that could have happened with the

2754
01:39:59,590 --> 01:40:05,110
assert was that it would crash if you

2755
01:40:02,800 --> 01:40:06,670
ignored the assert so all you're doing

2756
01:40:05,109 --> 01:40:08,579
by turning assert into a fatal error is

2757
01:40:06,670 --> 01:40:11,020
guaranteeing that you will crash right

2758
01:40:08,579 --> 01:40:12,519
which is not a very good idea so that

2759
01:40:11,020 --> 01:40:14,949
doesn't seem like a good idea in assert

2760
01:40:12,520 --> 01:40:17,739
is it as a check that you do want on

2761
01:40:14,948 --> 01:40:19,419
there but don't make your code crash

2762
01:40:17,738 --> 01:40:20,529
because maybe the code that came after

2763
01:40:19,420 --> 01:40:22,480
the assert could have handled it

2764
01:40:20,529 --> 01:40:25,050
properly so don't assume it's gonna

2765
01:40:22,479 --> 01:40:34,959
crash not a good idea but on the more

2766
01:40:25,050 --> 01:40:37,989
general on the more general concept of

2767
01:40:34,960 --> 01:40:41,408
how do you harden code there's a couple

2768
01:40:37,988 --> 01:40:43,718
things that you need to do right the

2769
01:40:41,408 --> 01:40:46,649
first thing you need to do is you need

2770
01:40:43,719 --> 01:40:50,890
to actually think very carefully about

2771
01:40:46,649 --> 01:40:57,639
what the critical failure consequences

2772
01:40:50,890 --> 01:41:01,960
are for your app in a game this means

2773
01:40:57,640 --> 01:41:05,679
losing the player state right if a game

2774
01:41:01,960 --> 01:41:09,039
crashes that's bad but if a game crashes

2775
01:41:05,679 --> 01:41:12,039
and the user can't keep continue from

2776
01:41:09,039 --> 01:41:14,829
where they left off it's I mean horrible

2777
01:41:12,039 --> 01:41:16,960
right like I'm if players played like 20

2778
01:41:14,829 --> 01:41:20,948
hours of your game and they crash and

2779
01:41:16,960 --> 01:41:24,369
they're saved games gone right I mean

2780
01:41:20,948 --> 01:41:27,099
that's just horrible similarly if it's

2781
01:41:24,369 --> 01:41:28,689
like a Productivity app or

2782
01:41:27,100 --> 01:41:31,570
app or something like that if that

2783
01:41:28,689 --> 01:41:35,500
crashes that's bad if it crashes and

2784
01:41:31,569 --> 01:41:37,420
loses the work that's horrible right so

2785
01:41:35,500 --> 01:41:41,890
the first step to hardening any app is

2786
01:41:37,420 --> 01:41:44,949
identifying what cannot fail and then

2787
01:41:41,890 --> 01:41:46,930
focus your attention on that first right

2788
01:41:44,949 --> 01:41:48,729
so the first thing you want to do in any

2789
01:41:46,930 --> 01:41:52,180
of these apps is put in crash protection

2790
01:41:48,729 --> 01:41:54,639
and when crashes occur make sure you

2791
01:41:52,180 --> 01:41:57,490
protect your savegame files

2792
01:41:54,640 --> 01:41:59,860
the data from any art that you've

2793
01:41:57,489 --> 01:42:02,289
created or that sort of make sure those

2794
01:41:59,859 --> 01:42:04,630
can get emergency written to a temp file

2795
01:42:02,289 --> 01:42:06,939
that you can check as crash prevention

2796
01:42:04,630 --> 01:42:10,989
that's the most important thing for

2797
01:42:06,939 --> 01:42:12,489
hardening the next step is to try and

2798
01:42:10,989 --> 01:42:13,989
eliminate crashes that are probably

2799
01:42:12,489 --> 01:42:16,059
going to happen right eliminate those

2800
01:42:13,989 --> 01:42:18,849
together in games usually that means

2801
01:42:16,060 --> 01:42:20,440
randomize testing there is no way to

2802
01:42:18,850 --> 01:42:23,620
write unit tests for games it's not

2803
01:42:20,439 --> 01:42:25,149
possible because games are all about

2804
01:42:23,619 --> 01:42:27,159
user input and you have no idea what

2805
01:42:25,149 --> 01:42:29,710
that inputs going to be so what you want

2806
01:42:27,159 --> 01:42:32,769
to try and do is push as much possible

2807
01:42:29,710 --> 01:42:36,520
user input through it to find the places

2808
01:42:32,770 --> 01:42:38,080
that are going to crash right if you can

2809
01:42:36,520 --> 01:42:41,550
isolate parts of the code that you can

2810
01:42:38,079 --> 01:42:44,140
test with some kind of unit testing or

2811
01:42:41,550 --> 01:42:48,159
testing in a reasonable amount of time

2812
01:42:44,140 --> 01:42:49,990
do it that certainly helps but a lot of

2813
01:42:48,159 --> 01:42:51,369
things there are no ways to write unit

2814
01:42:49,989 --> 01:42:53,289
tests for in any reasonable amount of

2815
01:42:51,369 --> 01:42:54,819
time the amount of time you would spend

2816
01:42:53,289 --> 01:42:56,619
unit testing it you would probably are

2817
01:42:54,819 --> 01:42:57,939
just wasting your time because it would

2818
01:42:56,619 --> 01:42:59,140
have been better spent on a randomized

2819
01:42:57,939 --> 01:43:00,250
tester because that's actually gonna

2820
01:42:59,140 --> 01:43:03,130
find things that players are actually

2821
01:43:00,250 --> 01:43:04,739
gonna hit so randomized testing is a

2822
01:43:03,130 --> 01:43:06,850
very good way to harden the code

2823
01:43:04,739 --> 01:43:08,829
basically write something that sits on

2824
01:43:06,850 --> 01:43:11,530
your game and plays it literally 24

2825
01:43:08,829 --> 01:43:13,840
hours a day all day every day run it on

2826
01:43:11,529 --> 01:43:17,619
as many machines as you have and wait

2827
01:43:13,840 --> 01:43:18,610
for it to crash right when it crashes

2828
01:43:17,619 --> 01:43:21,670
look where it crashed in the debugger

2829
01:43:18,609 --> 01:43:23,289
this is very very useful and it's

2830
01:43:21,670 --> 01:43:24,699
especially useful because it's

2831
01:43:23,289 --> 01:43:26,500
relentless it will never stop testing

2832
01:43:24,699 --> 01:43:29,199
your game and that is exactly what you

2833
01:43:26,500 --> 01:43:32,020
need to find those questions those those

2834
01:43:29,199 --> 01:43:33,130
crashes right midlist is I think I spent

2835
01:43:32,020 --> 01:43:37,770
a tape on that final print string

2836
01:43:33,130 --> 01:43:37,770
percent s not percent lowercase s

2837
01:43:43,600 --> 01:43:49,430
which one

2838
01:43:46,300 --> 01:43:53,300
genre this one that's that's a lowercase

2839
01:43:49,430 --> 01:44:05,090
s right that should be a lowercase s

2840
01:43:53,300 --> 01:44:06,770
right all right last question how do you

2841
01:44:05,090 --> 01:44:09,350
keep your mind fresh at your age you

2842
01:44:06,770 --> 01:44:15,140
talk really fast

2843
01:44:09,350 --> 01:44:20,930
don't third from the bottom third from

2844
01:44:15,140 --> 01:44:23,289
the bottom of what all right let me just

2845
01:44:20,930 --> 01:44:23,289
search

2846
01:44:28,988 --> 01:44:39,399
that shouldn't be there at all so that

2847
01:44:31,520 --> 01:44:39,400
was good one that looks right

2848
01:44:43,198 --> 01:44:54,969
although filename is a token right yeah

2849
01:44:48,029 --> 01:44:58,920
so that should actually be that that's

2850
01:44:54,969 --> 01:44:58,920
fine and that's fine

2851
01:45:08,460 --> 01:45:11,460
right

2852
01:45:16,909 --> 01:45:20,148
[Music]

2853
01:45:22,010 --> 01:45:29,969
yeah percent s capital means a length

2854
01:45:25,710 --> 01:45:31,590
based string how do you keep your mind

2855
01:45:29,969 --> 01:45:33,539
fresh period you talk about fast so let

2856
01:45:31,590 --> 01:45:39,960
me just try answer that real quickly and

2857
01:45:33,539 --> 01:45:44,640
that'd be the last question so I guess

2858
01:45:39,960 --> 01:45:46,619
what I would say is I don't know if

2859
01:45:44,640 --> 01:45:48,960
there's any particular thing that I do

2860
01:45:46,619 --> 01:45:51,029
that's just the way my brain tends to

2861
01:45:48,960 --> 01:45:53,310
work and it likes to be working all the

2862
01:45:51,029 --> 01:46:00,090
time so it's not particularly hard to

2863
01:45:53,310 --> 01:46:05,550
keep it fresh I don't know I couldn't

2864
01:46:00,090 --> 01:46:07,079
tell you I like to think about things so

2865
01:46:05,550 --> 01:46:12,650
I think that creates natural practice

2866
01:46:07,079 --> 01:46:12,649
for your brain I don't know

2867
01:46:13,069 --> 01:46:16,979
someone said exercise that helps you

2868
01:46:15,029 --> 01:46:20,698
breathe a lot I do exercise regularly

2869
01:46:16,979 --> 01:46:28,379
I exercise five or six times a week

2870
01:46:20,698 --> 01:46:32,939
rock climbing and running I don't know

2871
01:46:28,380 --> 01:46:34,770
what else yeah that's about it alright

2872
01:46:32,939 --> 01:46:36,359
thanks for joining me for an episode of

2873
01:46:34,770 --> 01:46:38,310
handmade Europe it's been a pleasure

2874
01:46:36,359 --> 01:46:43,229
coding with you as always let me go

2875
01:46:38,310 --> 01:46:44,340
ahead and close this out here thank you

2876
01:46:43,229 --> 01:46:47,099
for joining me for this special episode

2877
01:46:44,340 --> 01:46:48,750
512 if you want to follow along with the

2878
01:46:47,100 --> 01:46:50,550
series you can always pier to the game

2879
01:46:48,750 --> 01:46:52,710
on handmade hero or it comes the source

2880
01:46:50,550 --> 01:46:54,630
code so you can follow along at home I

2881
01:46:52,710 --> 01:46:57,600
will be back next week when we will do

2882
01:46:54,630 --> 01:46:59,400
bug our asset-building from h h TS which

2883
01:46:57,600 --> 01:47:00,929
will be kind of a fun thing to get

2884
01:46:59,399 --> 01:47:02,969
working because then we can just ship

2885
01:47:00,929 --> 01:47:05,579
the game as a completely buildable set

2886
01:47:02,969 --> 01:47:07,079
after that's gone done and we can kind

2887
01:47:05,579 --> 01:47:08,279
of call the asset system baked at that

2888
01:47:07,079 --> 01:47:09,300
point which I'll be pretty happy with

2889
01:47:08,279 --> 01:47:10,500
because there's a lot of things we had

2890
01:47:09,300 --> 01:47:11,610
to figure out there to make it all work

2891
01:47:10,500 --> 01:47:13,289
right

2892
01:47:11,609 --> 01:47:16,170
you know it's stuff streaming it does

2893
01:47:13,289 --> 01:47:18,810
you know streaming sound playback and

2894
01:47:16,170 --> 01:47:20,369
streaming asset playback and it does

2895
01:47:18,810 --> 01:47:22,770
on-the-fly updating and all that stuff

2896
01:47:20,369 --> 01:47:24,779
it's pretty darn good for something that

2897
01:47:22,770 --> 01:47:27,000
we only make an hour at a time or two

2898
01:47:24,779 --> 01:47:28,738
hours of time so up see you back here

2899
01:47:27,000 --> 01:47:30,119
for that until then have fun party

2900
01:47:28,738 --> 01:47:32,959
everyone I'll see you on the Internet

2901
01:47:30,119 --> 01:47:32,960
take it easy everybody

