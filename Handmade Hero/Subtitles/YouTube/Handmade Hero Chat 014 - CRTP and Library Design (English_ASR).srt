1
00:00:04,819 --> 00:00:09,750
like it's that right yes

2
00:00:07,169 --> 00:00:11,339
good hello everyone and welcome to

3
00:00:09,750 --> 00:00:15,780
handmade Hiro the show where we code a

4
00:00:11,339 --> 00:00:17,550
complete game live on stream although we

5
00:00:15,779 --> 00:00:20,429
sometimes do not code a complete game

6
00:00:17,550 --> 00:00:24,710
live on stream and as those of you who

7
00:00:20,429 --> 00:00:27,570
were with me yesterday no regrettably we

8
00:00:24,710 --> 00:00:30,719
may have gotten a little carried away

9
00:00:27,570 --> 00:00:32,219
with doing our lighting when I initially

10
00:00:30,719 --> 00:00:35,488
started the series I was just going to

11
00:00:32,219 --> 00:00:37,739
do basic basic 2d rendering but in that

12
00:00:35,488 --> 00:00:39,209
way that it just ends up sometimes when

13
00:00:37,738 --> 00:00:41,878
you're programming you end up going too

14
00:00:39,210 --> 00:00:45,270
far things we ended up doing 3d

15
00:00:41,878 --> 00:00:48,359
rendering because why not and we ended

16
00:00:45,270 --> 00:00:50,480
up deciding to do lighting as well which

17
00:00:48,359 --> 00:00:54,090
of course is very complicated and

18
00:00:50,479 --> 00:00:56,218
intricate so as a result you end up

19
00:00:54,090 --> 00:00:59,100
using a lot of GPU stuff now yesterday

20
00:00:56,219 --> 00:01:01,350
was the first time we hit this point but

21
00:00:59,100 --> 00:01:03,030
we actually are able to get into a place

22
00:01:01,350 --> 00:01:06,810
now where our shaders can crash the

23
00:01:03,030 --> 00:01:09,060
graphics driver which is not a bad thing

24
00:01:06,810 --> 00:01:11,790
necessarily because during development

25
00:01:09,060 --> 00:01:14,250
it's not uncommon to crash a graphics

26
00:01:11,790 --> 00:01:17,630
driver that's just something that can

27
00:01:14,250 --> 00:01:20,250
happen so no real big deal there but

28
00:01:17,629 --> 00:01:23,368
what that basically means is if we want

29
00:01:20,250 --> 00:01:25,170
to continue doing lighting work and

30
00:01:23,368 --> 00:01:27,959
debugging we are probably going to have

31
00:01:25,170 --> 00:01:30,359
to finally bite the bullet and upgrade

32
00:01:27,959 --> 00:01:33,868
the handmade hero streaming setup to

33
00:01:30,359 --> 00:01:37,739
have a new machine and to stream from a

34
00:01:33,868 --> 00:01:40,409
secondary machine so that when we crash

35
00:01:37,739 --> 00:01:44,459
it's no big deal we just reboot or

36
00:01:40,409 --> 00:01:46,649
recover from the crash either or and the

37
00:01:44,459 --> 00:01:50,188
stream can stay live and you can still

38
00:01:46,649 --> 00:01:52,978
see what I'm doing and hear me so I'm

39
00:01:50,188 --> 00:01:54,658
going to go ahead and do that the

40
00:01:52,978 --> 00:01:56,789
problem with that is it's going to take

41
00:01:54,659 --> 00:02:01,170
a little while I'm going to take at

42
00:01:56,790 --> 00:02:02,670
least you know weekend or two to order

43
00:02:01,170 --> 00:02:04,590
some new parts and put together

44
00:02:02,670 --> 00:02:07,200
something that's going to be able to do

45
00:02:04,590 --> 00:02:09,179
that for us so I won't be able to stream

46
00:02:07,200 --> 00:02:11,159
again until like two weekends from now

47
00:02:09,179 --> 00:02:13,530
let's say now this is actually pretty

48
00:02:11,159 --> 00:02:18,409
handy because I am going on three

49
00:02:13,530 --> 00:02:18,409
vacation going actually to visit Jeff

50
00:02:19,340 --> 00:02:25,680
coming up here and so I wasn't going to

51
00:02:22,080 --> 00:02:29,160
be able to stream this weekend anyway so

52
00:02:25,680 --> 00:02:30,569
given that that's the fact now is

53
00:02:29,159 --> 00:02:32,900
probably a good time to do this anyway

54
00:02:30,568 --> 00:02:35,129
since we won't actually miss a stream

55
00:02:32,900 --> 00:02:38,939
weekend that we wouldn't have missed

56
00:02:35,129 --> 00:02:42,180
anyway so if I do that now we can get a

57
00:02:38,939 --> 00:02:44,729
new streaming setup set up by the time I

58
00:02:42,180 --> 00:02:48,269
would have been back to stream two

59
00:02:44,729 --> 00:02:50,280
weekends from now and so that's probably

60
00:02:48,269 --> 00:02:52,980
the right call so I'll just go ahead and

61
00:02:50,280 --> 00:02:57,239
get that I can get it all ordered and

62
00:02:52,979 --> 00:03:00,568
then when I get back from visiting Jeff

63
00:02:57,239 --> 00:03:02,489
this weekend I can put things together

64
00:03:00,568 --> 00:03:05,939
and and hopefully get it working by the

65
00:03:02,489 --> 00:03:07,620
time we need it to work on stream so I'm

66
00:03:05,939 --> 00:03:10,620
going to go ahead and get that process

67
00:03:07,620 --> 00:03:12,659
started it'll just take a little bit of

68
00:03:10,620 --> 00:03:14,849
research for me to figure out exactly

69
00:03:12,659 --> 00:03:16,469
what the best way is to set up an

70
00:03:14,849 --> 00:03:20,180
external streaming machine but given the

71
00:03:16,469 --> 00:03:24,750
fact that so many people stream nowadays

72
00:03:20,180 --> 00:03:26,489
you know I I can't imagine that there

73
00:03:24,750 --> 00:03:28,409
isn't some pretty well documented stuff

74
00:03:26,489 --> 00:03:31,759
out there about what kinds of setups are

75
00:03:28,409 --> 00:03:37,229
the best to use for something like this

76
00:03:31,759 --> 00:03:39,840
okay I so that's really it what I I

77
00:03:37,229 --> 00:03:41,459
don't want to do any development today

78
00:03:39,840 --> 00:03:44,099
because I don't want to risk another

79
00:03:41,459 --> 00:03:45,840
crash that'll take the stream down and

80
00:03:44,099 --> 00:03:48,269
we almost certainly will hit one as we

81
00:03:45,840 --> 00:03:51,209
try to debug this also since we're doing

82
00:03:48,269 --> 00:03:53,189
some fairly had heavy graphics defective

83
00:03:51,209 --> 00:03:55,170
stuff anyway having a new machine that

84
00:03:53,189 --> 00:03:56,939
we could run a graphics abeggar on which

85
00:03:55,169 --> 00:03:59,879
is one thing I will make sure that I get

86
00:03:56,939 --> 00:04:04,819
is some kind of machine that can run you

87
00:03:59,879 --> 00:04:07,259
know a like n sight or render dock

88
00:04:04,819 --> 00:04:09,209
that'll also help us debug the lighting

89
00:04:07,259 --> 00:04:10,289
and I can show people how that normally

90
00:04:09,209 --> 00:04:12,959
works if they've never seen it before

91
00:04:10,289 --> 00:04:14,219
it's not very complicated so I'm not

92
00:04:12,959 --> 00:04:17,939
sure that's that valuable but at least

93
00:04:14,219 --> 00:04:22,769
we won't have to debug blind like we

94
00:04:17,939 --> 00:04:26,189
have been doing so that's what we will

95
00:04:22,769 --> 00:04:27,299
do in the meantime today since since I

96
00:04:26,189 --> 00:04:28,560
already said there was going to

97
00:04:27,300 --> 00:04:31,978
be a stream I figured I might as well

98
00:04:28,560 --> 00:04:34,379
show up and do some streaming if anyone

99
00:04:31,978 --> 00:04:36,628
wants to we can do something else

100
00:04:34,379 --> 00:04:39,000
something that does not require working

101
00:04:36,629 --> 00:04:40,889
on the game right now in the state where

102
00:04:39,000 --> 00:04:44,279
it is where it's likely to potentially

103
00:04:40,889 --> 00:04:46,918
crash the screen out until we debug all

104
00:04:44,279 --> 00:04:48,269
of our lighting code for all we know we

105
00:04:46,918 --> 00:04:50,158
don't even have a bug in the lighting

106
00:04:48,269 --> 00:04:51,658
code that's causing a crash it could

107
00:04:50,158 --> 00:04:53,639
just be that what we wrote happens to

108
00:04:51,658 --> 00:04:55,469
crash mt driver like i have no idea

109
00:04:53,639 --> 00:04:57,030
because we haven't looked at it since it

110
00:04:55,470 --> 00:04:58,319
crashed right we just left it where it

111
00:04:57,029 --> 00:05:03,869
was so we haven't even looked at what

112
00:04:58,319 --> 00:05:08,718
the cause of the crash was yet so I yeah

113
00:05:03,870 --> 00:05:12,870
it's really entirely up to to you folks

114
00:05:08,718 --> 00:05:19,468
and and we can just take questions for a

115
00:05:12,870 --> 00:05:26,069
little while and just do a chat if folks

116
00:05:19,468 --> 00:05:30,918
want to stick around for that or we can

117
00:05:26,069 --> 00:05:34,158
just end the stream we can do whatever

118
00:05:30,918 --> 00:05:39,778
but I like I said I don't want to run

119
00:05:34,158 --> 00:05:43,528
the game anymore because I really don't

120
00:05:39,778 --> 00:05:47,009
want to I really don't want to have to

121
00:05:43,528 --> 00:05:49,680
try to prevent a crash or the graphics

122
00:05:47,009 --> 00:05:51,449
driver if I knew that graphics drivers

123
00:05:49,680 --> 00:05:54,750
never crashed when you gave them correct

124
00:05:51,449 --> 00:05:57,478
code I wouldn't worry about it I'd say

125
00:05:54,750 --> 00:06:01,560
let's just be really meticulous but what

126
00:05:57,478 --> 00:06:06,079
I actually know from from my real

127
00:06:01,560 --> 00:06:06,079
experience in the real world is that

128
00:06:06,560 --> 00:06:14,069
it's just not the case that that you can

129
00:06:11,569 --> 00:06:16,468
analyze code to know it's going to crash

130
00:06:14,069 --> 00:06:20,939
a graphics driver graphics drivers can

131
00:06:16,468 --> 00:06:23,098
be crashed with with perfectly correct

132
00:06:20,939 --> 00:06:24,658
stuff so you really have no idea when

133
00:06:23,098 --> 00:06:27,110
you run something whether it's in crash

134
00:06:24,658 --> 00:06:27,110
zone or not

135
00:06:37,918 --> 00:06:43,589
see Belva says how do you write a

136
00:06:41,249 --> 00:06:52,949
program that is graphics driver crash

137
00:06:43,589 --> 00:06:56,188
aware well it really depends on what

138
00:06:52,949 --> 00:07:01,680
kinds of graphics driver crashes you're

139
00:06:56,189 --> 00:07:03,599
trying to prevent so there's two kinds

140
00:07:01,680 --> 00:07:05,579
of graphics driver crashes that you

141
00:07:03,598 --> 00:07:07,680
might be trying to prevent

142
00:07:05,579 --> 00:07:09,508
I shouldn't say prevent because you're

143
00:07:07,680 --> 00:07:12,840
not preventing it what I mean to say is

144
00:07:09,509 --> 00:07:17,278
two ways in which the graphics driver

145
00:07:12,839 --> 00:07:21,560
could crash your program and you want to

146
00:07:17,278 --> 00:07:24,418
prevent it crashing your program right

147
00:07:21,560 --> 00:07:27,449
so one way the graphics driver can crash

148
00:07:24,418 --> 00:07:31,438
and cause your program is is more

149
00:07:27,449 --> 00:07:34,199
difficult one that's if the graphics

150
00:07:31,439 --> 00:07:36,718
driver is just crashing asynchronously

151
00:07:34,199 --> 00:07:41,189
of your program in a thread that it

152
00:07:36,718 --> 00:07:44,968
spawned for your program right so let's

153
00:07:41,189 --> 00:07:47,819
say that you write a program that you

154
00:07:44,968 --> 00:07:49,709
know creates a you know OpenGL surface

155
00:07:47,819 --> 00:07:55,229
or whatever and starts rendering to the

156
00:07:49,709 --> 00:07:57,989
surface and I you know as a result when

157
00:07:55,228 --> 00:08:00,120
you run the program you can see that

158
00:07:57,990 --> 00:08:01,228
there are lots of graphics driver

159
00:08:00,120 --> 00:08:04,110
threads that are getting started

160
00:08:01,228 --> 00:08:09,449
potentially that you didn't ask to have

161
00:08:04,110 --> 00:08:17,240
started but that did start do we have we

162
00:08:09,449 --> 00:08:17,240
have process Explorer I'm here

163
00:08:22,829 --> 00:08:28,849
let me let me just grab we just grab

164
00:08:26,639 --> 00:08:28,849
that

165
00:08:35,590 --> 00:08:44,889
I'm going to grab this this is one of

166
00:08:41,980 --> 00:08:53,830
those mark russinovich utilities that

167
00:08:44,889 --> 00:09:00,250
are pretty handy to have around so here

168
00:08:53,830 --> 00:09:02,410
we go uh so you know if I'm you know in

169
00:09:00,250 --> 00:09:04,360
this case it was OBS that got taken down

170
00:09:02,409 --> 00:09:08,019
because that's what you know takes down

171
00:09:04,360 --> 00:09:12,669
the stream so what I'm wondering is you

172
00:09:08,019 --> 00:09:16,539
know hey what's what is OBS look like in

173
00:09:12,669 --> 00:09:21,819
terms of threads that are run so here's

174
00:09:16,539 --> 00:09:24,250
the yeah that's that's okay so here's

175
00:09:21,820 --> 00:09:26,290
the thread list right and for those of

176
00:09:24,250 --> 00:09:28,649
you they're unfamiliar with process

177
00:09:26,289 --> 00:09:31,360
Explorer again it's just a really handy

178
00:09:28,649 --> 00:09:36,399
application that uses internal windows

179
00:09:31,360 --> 00:09:39,490
systems API while internals run word it

180
00:09:36,399 --> 00:09:41,529
uses kernel API is basically to iterate

181
00:09:39,490 --> 00:09:43,899
over the information about running

182
00:09:41,529 --> 00:09:45,879
processes at any given time so that you

183
00:09:43,899 --> 00:09:48,429
can get insight into how they're running

184
00:09:45,879 --> 00:09:51,549
now if you take a look at how many

185
00:09:48,429 --> 00:09:55,149
threads are launched right now on behalf

186
00:09:51,549 --> 00:10:00,969
of OBS what I hope you can see here is

187
00:09:55,149 --> 00:10:03,819
that the start address for these threads

188
00:10:00,970 --> 00:10:08,649
meaning where their entry point was is

189
00:10:03,820 --> 00:10:11,650
largely not entirely inside OBS a lot of

190
00:10:08,649 --> 00:10:15,939
us in that microsoft visual studio CRT

191
00:10:11,649 --> 00:10:17,289
right I mean look at how many DLL entry

192
00:10:15,940 --> 00:10:19,150
points have been called here there's

193
00:10:17,289 --> 00:10:23,289
each one of these is a separate thread

194
00:10:19,149 --> 00:10:25,269
the CRT that the CRT started I assume

195
00:10:23,289 --> 00:10:28,569
this is because they're using the MSB

196
00:10:25,269 --> 00:10:29,799
CRT and every time they create a thread

197
00:10:28,570 --> 00:10:35,670
right you're going to get this I don't

198
00:10:29,799 --> 00:10:40,659
use the Microsoft Visual Studio these

199
00:10:35,669 --> 00:10:42,969
visual see CRT at work myself so I don't

200
00:10:40,659 --> 00:10:44,259
really pay much attention to these sorts

201
00:10:42,970 --> 00:10:49,340
of things but you can see what happens

202
00:10:44,259 --> 00:10:50,779
when you do and when it's a DOL

203
00:10:49,340 --> 00:10:52,639
however the more important part for

204
00:10:50,779 --> 00:10:54,439
sorry good down that right on in or I

205
00:10:52,639 --> 00:10:56,179
mentioned that just kind of interesting

206
00:10:54,440 --> 00:10:57,650
to see how many of them popped up the

207
00:10:56,179 --> 00:11:00,559
part that we actually care about is down

208
00:10:57,649 --> 00:11:03,230
tier right so you can see that ATI has

209
00:11:00,559 --> 00:11:04,969
created a large number of threads this

210
00:11:03,230 --> 00:11:07,159
is you know all of these threads for

211
00:11:04,970 --> 00:11:09,200
example at a minimum were created as

212
00:11:07,159 --> 00:11:15,019
part of the ATI driver and are in the

213
00:11:09,200 --> 00:11:20,060
ATI drivers sitting around right those

214
00:11:15,019 --> 00:11:23,179
threads could crash and they don't need

215
00:11:20,059 --> 00:11:25,189
any help from you to do it right so the

216
00:11:23,179 --> 00:11:28,579
first way that the ATI driver could take

217
00:11:25,190 --> 00:11:33,050
down your process is you may not even be

218
00:11:28,580 --> 00:11:34,700
calling the ATI driver at all you may

219
00:11:33,049 --> 00:11:37,699
not even it may not even be doing work

220
00:11:34,700 --> 00:11:38,660
on your behalf and if somehow the

221
00:11:37,700 --> 00:11:42,620
bugginess

222
00:11:38,659 --> 00:11:44,659
in the other like when the other app in

223
00:11:42,620 --> 00:11:46,759
this case like handmade hero runs a

224
00:11:44,659 --> 00:11:49,519
shader that causes the graphics card to

225
00:11:46,759 --> 00:11:52,789
crash if that cascading crash causes

226
00:11:49,519 --> 00:11:55,189
threads in your other aperture trying to

227
00:11:52,789 --> 00:11:58,819
make safe if they crash then you will

228
00:11:55,190 --> 00:12:00,590
literally get a whatever the kind of

229
00:11:58,820 --> 00:12:04,820
crash it is like an out of bounds memory

230
00:12:00,590 --> 00:12:11,269
access or who knows what that fault will

231
00:12:04,820 --> 00:12:12,980
happen completely unprovoked by you so

232
00:12:11,269 --> 00:12:14,840
that's the hardest kind of crash to

233
00:12:12,980 --> 00:12:19,310
recover from on behalf of the graphics

234
00:12:14,840 --> 00:12:21,950
driver that's thing one thing too is the

235
00:12:19,309 --> 00:12:25,399
much easier kind of crash from the

236
00:12:21,950 --> 00:12:28,400
graphics driver to prevent and that kind

237
00:12:25,399 --> 00:12:33,169
of crash is just things that will happen

238
00:12:28,399 --> 00:12:36,709
on the graphics driver that you don't

239
00:12:33,169 --> 00:12:39,589
expect to happen but they do happen when

240
00:12:36,710 --> 00:12:43,120
the graphics card gets reset so that

241
00:12:39,590 --> 00:12:43,120
stuff like

242
00:12:49,019 --> 00:12:54,909
let's say that you're going to do some

243
00:12:51,639 --> 00:13:00,189
things where the graphic card gives you

244
00:12:54,909 --> 00:13:02,439
back a pointer right so let's say you go

245
00:13:00,190 --> 00:13:05,320
and you're in DirectX or something like

246
00:13:02,440 --> 00:13:07,980
this and you lock a texture surface or

247
00:13:05,320 --> 00:13:10,810
you're in OpenGL and you lock a buffer

248
00:13:07,980 --> 00:13:12,250
you say let me give me a pointer I'm

249
00:13:10,809 --> 00:13:14,708
going to write to the memory of this

250
00:13:12,250 --> 00:13:19,649
buffer and you write to the memory of

251
00:13:14,708 --> 00:13:19,649
the buffer and then you unlock it now

252
00:13:21,000 --> 00:13:26,049
99.999999 9 as I said before percent of

253
00:13:23,980 --> 00:13:27,940
the time that's just going to succeed

254
00:13:26,049 --> 00:13:29,379
you're always going to get the buffer

255
00:13:27,940 --> 00:13:32,350
lock you're going to write to it you're

256
00:13:29,379 --> 00:13:33,939
going to unlock so if you don't think

257
00:13:32,350 --> 00:13:37,060
about it particularly hard and you just

258
00:13:33,940 --> 00:13:39,100
leave that code in there you're never

259
00:13:37,059 --> 00:13:41,949
really going to crash you can ship that

260
00:13:39,100 --> 00:13:44,860
and it'll probably work most of the time

261
00:13:41,950 --> 00:13:50,589
however if the graphics driver gets

262
00:13:44,860 --> 00:13:53,110
stalled or gets hung or gets reset as in

263
00:13:50,589 --> 00:13:55,870
the case like it did on yesterday's

264
00:13:53,110 --> 00:13:57,519
stream all of a sudden a bunch of calls

265
00:13:55,870 --> 00:14:01,870
to the graphics driver will start to

266
00:13:57,519 --> 00:14:04,509
fail they'll fail specifically because

267
00:14:01,870 --> 00:14:06,370
the surface all of the stuff that you

268
00:14:04,509 --> 00:14:08,740
previously allocated like your context

269
00:14:06,370 --> 00:14:11,470
OpenGL context your textures all that

270
00:14:08,740 --> 00:14:14,528
stuff are gone now right they just got

271
00:14:11,470 --> 00:14:16,750
nuked and so all of the calls that

272
00:14:14,528 --> 00:14:20,860
you're going to make will fail all of

273
00:14:16,750 --> 00:14:23,589
them the graphics driver will no longer

274
00:14:20,860 --> 00:14:25,389
be able to respond to them and so even

275
00:14:23,589 --> 00:14:27,160
if the graphics driver itself hasn't

276
00:14:25,389 --> 00:14:29,740
really had any problems that isn't

277
00:14:27,159 --> 00:14:32,379
crashing it may cascade into a failure

278
00:14:29,740 --> 00:14:34,360
of your app where your app crashes

279
00:14:32,379 --> 00:14:38,939
because it's seeing behavior it almost

280
00:14:34,360 --> 00:14:42,039
never sees so if you want to make an app

281
00:14:38,940 --> 00:14:44,709
graphics card crash proof those are the

282
00:14:42,039 --> 00:14:46,028
two things you need to guard against so

283
00:14:44,708 --> 00:14:48,369
one of them is fairly straightforward

284
00:14:46,028 --> 00:14:51,578
although somewhat time consuming that is

285
00:14:48,370 --> 00:14:53,110
making sure that nowhere in your app do

286
00:14:51,578 --> 00:14:56,078
you request something from the graphics

287
00:14:53,110 --> 00:14:58,899
driver and assume that you will get it

288
00:14:56,078 --> 00:15:00,759
back you always have to check and see

289
00:14:58,899 --> 00:15:03,129
whether or not the graphics car

290
00:15:00,759 --> 00:15:04,870
it has gone down so are you starting to

291
00:15:03,129 --> 00:15:06,939
get failures and if you are starting to

292
00:15:04,870 --> 00:15:10,090
get failures make sure you check to see

293
00:15:06,940 --> 00:15:12,280
if your context is still valid and if

294
00:15:10,090 --> 00:15:15,220
you know if it's not shut everything

295
00:15:12,279 --> 00:15:17,289
down and restart right this is the kind

296
00:15:15,220 --> 00:15:18,970
of engineering most apps just don't do

297
00:15:17,289 --> 00:15:20,620
it's the kind of engineering that

298
00:15:18,970 --> 00:15:22,509
unfortunately like basically all

299
00:15:20,620 --> 00:15:23,919
libraries don't do so you know as far as

300
00:15:22,509 --> 00:15:25,960
I know like STL those sort of things

301
00:15:23,919 --> 00:15:29,349
don't do this kind of engineering so

302
00:15:25,960 --> 00:15:36,759
there's really no likelihood that an app

303
00:15:29,350 --> 00:15:39,580
has any of that in it so that is not a

304
00:15:36,759 --> 00:15:41,559
hard problem to solve but it is a

305
00:15:39,580 --> 00:15:43,150
time-consuming problem to solve and does

306
00:15:41,559 --> 00:15:46,469
cuf engineering resources so most people

307
00:15:43,149 --> 00:15:48,819
don't do it the first one which is the

308
00:15:46,470 --> 00:15:51,670
faulting inside the graphics driver

309
00:15:48,820 --> 00:15:53,770
itself that is much harder in order to

310
00:15:51,669 --> 00:15:55,569
catch that you have to install a fault

311
00:15:53,769 --> 00:15:58,000
handler so you're going to have to put

312
00:15:55,570 --> 00:16:02,710
in like a Windows vector exception

313
00:15:58,000 --> 00:16:07,620
handler for example something that will

314
00:16:02,710 --> 00:16:10,840
catch false in the application and then

315
00:16:07,620 --> 00:16:12,789
respond to those salts in some way so

316
00:16:10,840 --> 00:16:14,379
for example if you catch a Fault in the

317
00:16:12,789 --> 00:16:17,500
graphics driver you're going to want to

318
00:16:14,379 --> 00:16:20,379
do stuff like shut down everything and

319
00:16:17,500 --> 00:16:23,259
you know force flick try to force close

320
00:16:20,379 --> 00:16:26,289
it try to force onload the graph driver

321
00:16:23,259 --> 00:16:30,819
who knows and then try to reload it

322
00:16:26,289 --> 00:16:32,139
right now the good news is for something

323
00:16:30,820 --> 00:16:34,780
like OBS it's just supposed to be

324
00:16:32,139 --> 00:16:37,330
recording in that particular case you

325
00:16:34,779 --> 00:16:39,579
have a couple easy outs when that fault

326
00:16:37,330 --> 00:16:41,230
handler hits all you really have to do

327
00:16:39,580 --> 00:16:42,930
in the fault handler kiss is just make

328
00:16:41,230 --> 00:16:47,170
sure you flush the stream properly

329
00:16:42,929 --> 00:16:48,909
that's the real shame about OBS is that

330
00:16:47,169 --> 00:16:50,529
they put in no protection for flushing

331
00:16:48,909 --> 00:16:52,689
the stream because that's really all

332
00:16:50,529 --> 00:16:55,389
they would need to do right all they

333
00:16:52,690 --> 00:16:57,700
would need to do is protect em stream

334
00:16:55,389 --> 00:16:59,529
flush on crash and most of these would

335
00:16:57,700 --> 00:17:00,820
be fixed now I would argue they should

336
00:16:59,529 --> 00:17:03,850
just flush the stream periodically

337
00:17:00,820 --> 00:17:07,059
anyway I don't really know why they

338
00:17:03,850 --> 00:17:14,078
don't it doesn't make a lot of sense to

339
00:17:07,059 --> 00:17:16,088
me but they don't so either or

340
00:17:14,078 --> 00:17:18,338
assuming you want to be grass proof

341
00:17:16,088 --> 00:17:20,828
ignoring OBS if you can just shut down

342
00:17:18,338 --> 00:17:22,028
gracefully that's really all you need to

343
00:17:20,828 --> 00:17:24,220
do because you can shut down gracefully

344
00:17:22,028 --> 00:17:26,798
and then relaunch your own application

345
00:17:24,220 --> 00:17:29,278
right so for example you can write a

346
00:17:26,798 --> 00:17:32,259
launcher executable that just loads

347
00:17:29,278 --> 00:17:34,589
another executable let's say or create

348
00:17:32,259 --> 00:17:36,999
the process and launches that executable

349
00:17:34,589 --> 00:17:40,720
when that excreta bill goes down it just

350
00:17:36,999 --> 00:17:42,429
restarts that executable right so then

351
00:17:40,720 --> 00:17:44,110
only have to do is the executable that's

352
00:17:42,429 --> 00:17:45,840
that's the real suitable the one that's

353
00:17:44,109 --> 00:17:48,819
gets started by the sort of the launcher

354
00:17:45,839 --> 00:17:51,699
that secondary executable all it has to

355
00:17:48,819 --> 00:17:53,589
do is trap the fault make sure that it

356
00:17:51,700 --> 00:17:54,669
hasn't corrupted any files right so if

357
00:17:53,589 --> 00:17:59,829
there's something that needed to be

358
00:17:54,669 --> 00:18:03,159
flushed flush it I say game file the you

359
00:17:59,829 --> 00:18:06,158
know the movie stream then go ahead and

360
00:18:03,159 --> 00:18:09,759
shut down like just exit process and let

361
00:18:06,159 --> 00:18:11,590
your launcher restart you right so

362
00:18:09,759 --> 00:18:14,169
that's one way you can also make it so

363
00:18:11,589 --> 00:18:15,428
that forget it like pretend to assume

364
00:18:14,169 --> 00:18:16,869
the gravity Stryver is never coming back

365
00:18:15,429 --> 00:18:19,950
again and if you won't be able to load

366
00:18:16,868 --> 00:18:23,918
it reload it from that executable anyway

367
00:18:19,950 --> 00:18:28,889
just double insulate yourself right so

368
00:18:23,919 --> 00:18:28,889
that's another way that you can do that

369
00:18:40,690 --> 00:18:45,640
how many episodes are remaining estimate

370
00:18:43,240 --> 00:18:48,640
I don't really have an estimate for how

371
00:18:45,640 --> 00:18:50,380
many episodes are remaining because we

372
00:18:48,640 --> 00:18:53,290
tend to decide to do things fairly

373
00:18:50,380 --> 00:18:54,640
randomly like if you know I think it

374
00:18:53,289 --> 00:18:56,649
might be interesting to do some lighting

375
00:18:54,640 --> 00:18:58,990
we do the lighting but that's like not

376
00:18:56,650 --> 00:19:00,190
some it was ever like on a schedule so I

377
00:18:58,990 --> 00:19:02,380
don't really know how many episodes

378
00:19:00,190 --> 00:19:06,580
there are it's just until we feel like

379
00:19:02,380 --> 00:19:13,420
we're roughly done I've said probably

380
00:19:06,579 --> 00:19:15,549
600 as a minimum I just thought that

381
00:19:13,420 --> 00:19:21,779
sounded like a fairly recent amount of

382
00:19:15,549 --> 00:19:21,779
time but you know I don't know

383
00:19:39,200 --> 00:19:44,569
sargent room visas do you use C++

384
00:19:42,528 --> 00:19:50,148
features like templates do you use

385
00:19:44,569 --> 00:19:56,869
polymorphism in your own projects so I

386
00:19:50,148 --> 00:20:00,648
don't use templates in in my own project

387
00:19:56,869 --> 00:20:02,268
no the reason that I don't use templates

388
00:20:00,648 --> 00:20:07,689
is because in my experience they have a

389
00:20:02,269 --> 00:20:11,750
lot of negative aspects to them and

390
00:20:07,690 --> 00:20:14,600
they're not very good at at meta

391
00:20:11,750 --> 00:20:18,528
programming so I tend to try and just

392
00:20:14,599 --> 00:20:23,089
write code that generates code rather

393
00:20:18,528 --> 00:20:26,269
than using C++ as templates I find that

394
00:20:23,089 --> 00:20:29,990
that keeps compile time down it keeps

395
00:20:26,269 --> 00:20:33,288
readability up and it gives you much

396
00:20:29,990 --> 00:20:36,278
more power than the template does

397
00:20:33,288 --> 00:20:39,200
because templates are very very weak

398
00:20:36,278 --> 00:20:43,730
they're extremely weak in terms of being

399
00:20:39,200 --> 00:20:49,419
able to actually do meta programming do

400
00:20:43,730 --> 00:20:52,700
I use polymorphism yes all the time but

401
00:20:49,419 --> 00:20:55,669
we we use polymorphism on handmade hero

402
00:20:52,700 --> 00:21:01,519
as well right I just tend to code it

403
00:20:55,669 --> 00:21:03,799
myself I don't I don't use classes and

404
00:21:01,519 --> 00:21:07,669
virtual function tables for that I tend

405
00:21:03,798 --> 00:21:09,829
to just use type fields so you know you

406
00:21:07,669 --> 00:21:12,110
can pass around something called a node

407
00:21:09,829 --> 00:21:13,699
to a bunch of functions and the nodes

408
00:21:12,109 --> 00:21:16,009
have left and right pointers or

409
00:21:13,700 --> 00:21:18,620
something because it's a three or and I

410
00:21:16,009 --> 00:21:20,538
can AB SEC tracks abstract syntax tree

411
00:21:18,619 --> 00:21:22,879
but then there's also you know like a

412
00:21:20,538 --> 00:21:26,000
Union inside it that has a bunch of

413
00:21:22,880 --> 00:21:27,260
different states of things and a type

414
00:21:26,000 --> 00:21:32,048
field that tells you which one it is

415
00:21:27,259 --> 00:21:34,480
that's polymorphism right you know

416
00:21:32,048 --> 00:21:37,339
polymorphism just a general term for

417
00:21:34,480 --> 00:21:39,169
saying that you can take an object of

418
00:21:37,339 --> 00:21:41,359
one type and pass it off as an object of

419
00:21:39,169 --> 00:21:43,730
another type right well if you have a

420
00:21:41,359 --> 00:21:46,398
struct and that struct can be used by

421
00:21:43,730 --> 00:21:48,860
multiple routines regardless of which

422
00:21:46,398 --> 00:21:50,388
type of thing it actually is and there's

423
00:21:48,859 --> 00:21:52,819
different data layouts depending on

424
00:21:50,388 --> 00:21:59,000
which one it is that's you know polymer

425
00:21:52,819 --> 00:22:00,740
prism and you know in same with switch

426
00:21:59,000 --> 00:22:02,388
statements right switch statements that

427
00:22:00,740 --> 00:22:03,919
look at something and do a different

428
00:22:02,388 --> 00:22:05,808
thing based on it that's just another

429
00:22:03,919 --> 00:22:10,669
way of implementing a virtual function

430
00:22:05,808 --> 00:22:13,099
right and so I don't tend to use C++ as

431
00:22:10,669 --> 00:22:15,019
features for either meta programming or

432
00:22:13,099 --> 00:22:18,079
polymorphism because I just don't think

433
00:22:15,019 --> 00:22:21,259
they were very well designed but I don't

434
00:22:18,079 --> 00:22:22,099
mind those concepts I think the concepts

435
00:22:21,259 --> 00:22:24,500
are just fine

436
00:22:22,099 --> 00:22:27,888
C++ just didn't do a very good job

437
00:22:24,500 --> 00:22:32,500
making them making utilities for you to

438
00:22:27,888 --> 00:22:32,500
use to do them right

439
00:22:47,039 --> 00:23:01,279
be PAF fest what do you think about the

440
00:22:51,829 --> 00:23:01,279
about the sea RTP to do polymorphism and

441
00:23:01,609 --> 00:23:14,490
he linked to curiously recurring

442
00:23:10,410 --> 00:23:18,140
template pattern uh so I've never heard

443
00:23:14,490 --> 00:23:21,690
that term before but maybe I will

444
00:23:18,140 --> 00:23:26,850
recognize the actual wait the actual

445
00:23:21,690 --> 00:23:29,190
thing it's interesting that I haven't

446
00:23:26,849 --> 00:23:31,619
heard of it maybe I have heard of it and

447
00:23:29,190 --> 00:23:34,320
I forgot because it says here that the

448
00:23:31,619 --> 00:23:38,519
name see RTP was independently coined by

449
00:23:34,319 --> 00:23:40,319
Jim Kaplan in 1995 who had observed it

450
00:23:38,519 --> 00:23:42,509
in some of the earliest evil assembly

451
00:23:40,319 --> 00:23:44,309
code as well as in code examples of

452
00:23:42,509 --> 00:23:48,240
Timothy bud created the interesting I

453
00:23:44,309 --> 00:23:50,519
say it's interesting is because like I

454
00:23:48,240 --> 00:23:56,990
remember reading Jim Copland's book that

455
00:23:50,519 --> 00:23:56,990
I think it's called the LSD book by by

456
00:23:57,890 --> 00:24:07,620
got Myers I want to say I think and I

457
00:24:05,130 --> 00:24:10,200
used to read the C++ report and Jim if I

458
00:24:07,619 --> 00:24:12,529
if I'm thinking of the right guy Jim

459
00:24:10,200 --> 00:24:15,440
Kaplan used to write in that as well

460
00:24:12,529 --> 00:24:18,389
anyway let's take a look at what this

461
00:24:15,440 --> 00:24:24,769
says here the curiously recurring

462
00:24:18,390 --> 00:24:28,259
template pattern I it's got a template

463
00:24:24,769 --> 00:24:39,259
class T that that just in base can be

464
00:24:28,259 --> 00:24:39,259
used sympathizer derived wait what

465
00:24:39,799 --> 00:24:46,789
oh I see yeah yeah all right I see what

466
00:24:45,049 --> 00:24:50,509
we're talking about here I should

467
00:24:46,789 --> 00:24:57,170
probably put this up on the screen so

468
00:24:50,509 --> 00:25:04,789
that folks can can see what we're

469
00:24:57,170 --> 00:25:06,620
talking about here let me open I guess

470
00:25:04,789 --> 00:25:13,240
like a dummy let me just open like a

471
00:25:06,619 --> 00:25:13,239
dummy file we have a temp directory yeah

472
00:25:17,799 --> 00:25:23,419
all right I so here's I'm just going to

473
00:25:21,529 --> 00:25:26,799
type in the example from the Wikipedia

474
00:25:23,420 --> 00:25:29,180
page you can see what I'm talking about

475
00:25:26,799 --> 00:25:37,839
or rather I should say what I'm

476
00:25:29,180 --> 00:25:37,840
discussing because this is basically

477
00:25:43,029 --> 00:25:49,279
what the questioner was asking about so

478
00:25:46,640 --> 00:25:51,860
we don't use this syntax very much on

479
00:25:49,279 --> 00:25:53,389
handmade hero or at all I guess because

480
00:25:51,859 --> 00:25:55,519
we don't use templates on handmade hero

481
00:25:53,390 --> 00:25:58,430
so let me briefly just explain how these

482
00:25:55,519 --> 00:26:06,710
work for anyone who isn't already

483
00:25:58,430 --> 00:26:09,049
familiar with them so for whatever

484
00:26:06,710 --> 00:26:14,150
reason in I do not pretend to know the

485
00:26:09,049 --> 00:26:17,899
reason it's probably in the DNA but I

486
00:26:14,150 --> 00:26:19,550
don't really know the DNA is a book the

487
00:26:17,900 --> 00:26:21,650
design and evolution of C++ which is

488
00:26:19,549 --> 00:26:23,509
like a history document that explains

489
00:26:21,650 --> 00:26:28,880
like the reasoning behind some of the

490
00:26:23,509 --> 00:26:30,259
choices in C++ which it's fascinating to

491
00:26:28,880 --> 00:26:32,470
think that there were reasons behind the

492
00:26:30,259 --> 00:26:39,650
design of C++ but apparently they were

493
00:26:32,470 --> 00:26:42,829
so it if you put aside the why and just

494
00:26:39,650 --> 00:26:45,820
deal with what actually happened what

495
00:26:42,829 --> 00:26:49,250
goes on here is that there's a template

496
00:26:45,819 --> 00:26:52,879
syntax you can use in C++ that allows

497
00:26:49,250 --> 00:26:53,809
you to specify inside these greater than

498
00:26:52,880 --> 00:26:58,310
or less than

499
00:26:53,809 --> 00:27:01,519
right inside here you can specify some

500
00:26:58,309 --> 00:27:04,460
things that you do not yet know about

501
00:27:01,519 --> 00:27:08,660
the code that someone can then later

502
00:27:04,460 --> 00:27:10,940
specify so for example you know in this

503
00:27:08,660 --> 00:27:13,269
class doesn't need to be here so we can

504
00:27:10,940 --> 00:27:15,350
ignore that class instructor synonymous

505
00:27:13,269 --> 00:27:17,450
the only difference is whether things

506
00:27:15,349 --> 00:27:18,859
default to private or public so you can

507
00:27:17,450 --> 00:27:20,240
ignore that part of it especially for

508
00:27:18,859 --> 00:27:21,199
this discussion we don't care at all so

509
00:27:20,240 --> 00:27:23,390
just pretend these are structures

510
00:27:21,200 --> 00:27:26,539
instead there's no difference for the

511
00:27:23,390 --> 00:27:30,350
purposes of the example that we're going

512
00:27:26,539 --> 00:27:32,869
to be talking about so you've seen the

513
00:27:30,349 --> 00:27:34,490
the struct part before so here we say

514
00:27:32,869 --> 00:27:37,729
struct base we're defining something

515
00:27:34,490 --> 00:27:38,960
called base you know if it was formatted

516
00:27:37,730 --> 00:27:40,220
like mine it would probably look like

517
00:27:38,960 --> 00:27:41,809
this because you know I use lowercase

518
00:27:40,220 --> 00:27:45,950
four types but again doesn't really

519
00:27:41,809 --> 00:27:48,379
matter it's just that's just convention

520
00:27:45,950 --> 00:27:50,690
so in the example they've got a thing

521
00:27:48,380 --> 00:27:52,880
here where they're declaring a structure

522
00:27:50,690 --> 00:27:54,860
called base and they're using the syntax

523
00:27:52,880 --> 00:27:57,230
this template syntax the template syntax

524
00:27:54,859 --> 00:27:59,599
basically says there's something I don't

525
00:27:57,230 --> 00:28:05,690
know it's going to be lets say a struct

526
00:27:59,599 --> 00:28:09,199
t right that means T is the name of some

527
00:28:05,690 --> 00:28:12,070
type that is not yet known so inside the

528
00:28:09,200 --> 00:28:14,690
struct let's say I wanted to have a

529
00:28:12,069 --> 00:28:18,049
member right look I just wanted

530
00:28:14,690 --> 00:28:25,250
something in the struct that was of that

531
00:28:18,049 --> 00:28:27,379
type right so here we have a template

532
00:28:25,250 --> 00:28:29,359
we're going to say base and we're going

533
00:28:27,380 --> 00:28:32,810
to say that we've got this this type we

534
00:28:29,359 --> 00:28:34,879
don't know ignoring this part for right

535
00:28:32,809 --> 00:28:37,659
now let's now say that we wanted to

536
00:28:34,880 --> 00:28:42,830
actually use this so we've got you know

537
00:28:37,660 --> 00:28:45,529
some function in our in our program it

538
00:28:42,829 --> 00:28:47,929
looks like this and inside here we want

539
00:28:45,529 --> 00:28:52,450
to use one of these things and we want

540
00:28:47,930 --> 00:28:55,600
it's the thing to be an integer right

541
00:28:52,450 --> 00:29:03,470
well then what we can say is base

542
00:28:55,599 --> 00:29:07,759
integer right my base now I can do my

543
00:29:03,470 --> 00:29:15,680
base dot the thing equals five

544
00:29:07,759 --> 00:29:18,440
my bass got the thing or into is my bass

545
00:29:15,680 --> 00:29:20,029
up bang right and my bass thought the

546
00:29:18,440 --> 00:29:21,830
thing is an integer everywhere because

547
00:29:20,029 --> 00:29:24,680
that's what we asked for

548
00:29:21,829 --> 00:29:26,449
right now this doesn't give you the

549
00:29:24,680 --> 00:29:27,140
ability to actually do anything useful

550
00:29:26,450 --> 00:29:31,549
with this

551
00:29:27,140 --> 00:29:35,720
unfortunately in terms of type movement

552
00:29:31,549 --> 00:29:40,159
the reason being that these bass classes

553
00:29:35,720 --> 00:29:44,870
are all distinct right so this struct

554
00:29:40,160 --> 00:29:48,259
bass int if I declare a struct float and

555
00:29:44,869 --> 00:29:50,000
I've got two of these these are not the

556
00:29:48,259 --> 00:29:53,450
same type they're completely different

557
00:29:50,000 --> 00:29:57,200
types they're exactly analogous as if

558
00:29:53,450 --> 00:29:59,000
you had done this and when I say exactly

559
00:29:57,200 --> 00:30:00,590
analogous I mean literally there is no

560
00:29:59,000 --> 00:30:03,319
difference between having done these two

561
00:30:00,589 --> 00:30:07,399
things okay

562
00:30:03,319 --> 00:30:09,559
so you get no bonus polymorphism out of

563
00:30:07,400 --> 00:30:11,180
this you get no extra utility out of

564
00:30:09,559 --> 00:30:13,159
this it doesn't really help you much

565
00:30:11,180 --> 00:30:16,670
other than to save the typing of typing

566
00:30:13,160 --> 00:30:18,830
this twice right so really all that part

567
00:30:16,670 --> 00:30:20,539
of it is really doing and you can do

568
00:30:18,829 --> 00:30:21,889
there's more to templates than just this

569
00:30:20,539 --> 00:30:23,960
so I'm not trying to suggest that the

570
00:30:21,890 --> 00:30:24,910
only thing to do with them but that part

571
00:30:23,960 --> 00:30:27,819
of it

572
00:30:24,910 --> 00:30:31,370
they're just specifying a type there

573
00:30:27,819 --> 00:30:35,000
it's really just designed to do the most

574
00:30:31,369 --> 00:30:36,919
basic kind of generic programming where

575
00:30:35,000 --> 00:30:38,900
it like for example on handmade hero

576
00:30:36,920 --> 00:30:41,150
you've seen me and I've mentioned

577
00:30:38,900 --> 00:30:43,280
templates when I do this you see me do

578
00:30:41,150 --> 00:30:48,890
something like this and then something

579
00:30:43,279 --> 00:30:51,049
like this right well if equivalently you

580
00:30:48,890 --> 00:30:53,860
wanted to write those together you could

581
00:30:51,049 --> 00:30:53,859
do something like this

582
00:30:59,960 --> 00:31:05,909
and now you've got a v2 that can just be

583
00:31:03,599 --> 00:31:07,769
specified with whatever you want so when

584
00:31:05,909 --> 00:31:20,309
you're going to go and use it you know

585
00:31:07,769 --> 00:31:22,019
you can do something like this right and

586
00:31:20,308 --> 00:31:30,750
furthermore you can just sit around

587
00:31:22,019 --> 00:31:32,609
generating types all day right I and so

588
00:31:30,750 --> 00:31:34,829
you can see why this has at least some

589
00:31:32,609 --> 00:31:37,408
utility there because if you don't want

590
00:31:34,829 --> 00:31:39,629
to have to cut and paste the code you

591
00:31:37,409 --> 00:31:40,980
can you know just use this to

592
00:31:39,630 --> 00:31:42,929
instantiate it

593
00:31:40,980 --> 00:31:44,548
the problem with templates as with

594
00:31:42,929 --> 00:31:46,919
everything else when people plus is the

595
00:31:44,548 --> 00:31:48,418
instance you want to do anything more

596
00:31:46,919 --> 00:31:51,659
complicated with the thing that you just

597
00:31:48,419 --> 00:31:53,370
made it entirely falls apart so you know

598
00:31:51,659 --> 00:31:57,260
if you want to start doing things like

599
00:31:53,369 --> 00:31:59,879
saying well okay you know I wanted to

600
00:31:57,259 --> 00:32:02,700
make it so that I've got something that

601
00:31:59,880 --> 00:32:04,710
does you know a combination of this type

602
00:32:02,700 --> 00:32:06,269
of template version in this type of

603
00:32:04,710 --> 00:32:08,579
template version inside this routine

604
00:32:06,269 --> 00:32:10,138
when I want to you know do some kind of

605
00:32:08,579 --> 00:32:12,089
processing on them and I need to detect

606
00:32:10,138 --> 00:32:14,009
which ones which it's like all of a

607
00:32:12,089 --> 00:32:15,509
sudden all of my stuff has to start

608
00:32:14,009 --> 00:32:17,519
being templatized I'm like fifty

609
00:32:15,509 --> 00:32:18,720
different things and getting specialized

610
00:32:17,519 --> 00:32:21,470
in all the sort of stuff and it just

611
00:32:18,720 --> 00:32:24,048
creates this incredible rat's nest of

612
00:32:21,470 --> 00:32:26,839
code that gets generated at compile time

613
00:32:24,048 --> 00:32:29,700
that leads to super long compile times

614
00:32:26,839 --> 00:32:31,319
and just really bad kind of readability

615
00:32:29,700 --> 00:32:34,380
because you can never it'll never show

616
00:32:31,319 --> 00:32:38,158
you the code is actually generated it's

617
00:32:34,380 --> 00:32:42,149
just it's just bad news it's better now

618
00:32:38,159 --> 00:32:43,950
that it was I have a stronger aversion

619
00:32:42,148 --> 00:32:47,689
to templates than somebody who started

620
00:32:43,950 --> 00:32:50,399
with them today with my same brain would

621
00:32:47,690 --> 00:32:53,880
the reason for that is at least nowadays

622
00:32:50,398 --> 00:32:56,388
at least say clang I assume Visual

623
00:32:53,880 --> 00:32:59,130
Studio as well but at least clang

624
00:32:56,388 --> 00:33:00,449
compile them properly one of the

625
00:32:59,130 --> 00:33:02,580
interesting things about templates when

626
00:33:00,450 --> 00:33:04,440
I learned to program templates back in

627
00:33:02,579 --> 00:33:08,009
the early days was that the compilers

628
00:33:04,440 --> 00:33:11,490
did not compile them properly not only

629
00:33:08,009 --> 00:33:12,629
that but the error messages that they

630
00:33:11,490 --> 00:33:15,269
gave

631
00:33:12,630 --> 00:33:17,370
literally would stop working meaning

632
00:33:15,269 --> 00:33:20,039
when it tries to print out an error it

633
00:33:17,369 --> 00:33:21,750
would often reach the limit of the size

634
00:33:20,039 --> 00:33:22,950
of an error it could print and just

635
00:33:21,750 --> 00:33:24,329
truncate the error message so you

636
00:33:22,950 --> 00:33:26,759
couldn't actually see the error message

637
00:33:24,329 --> 00:33:30,389
I'm not making this up

638
00:33:26,759 --> 00:33:31,799
debuggers often couldn't inspect them so

639
00:33:30,390 --> 00:33:33,930
you'd end up with templates that were

640
00:33:31,799 --> 00:33:37,759
like uninspected i'll you just couldn't

641
00:33:33,930 --> 00:33:41,610
see what was inside them in the debugger

642
00:33:37,759 --> 00:33:43,980
I just a lot of really bad stuff and so

643
00:33:41,609 --> 00:33:46,259
nowadays I still don't think templates

644
00:33:43,980 --> 00:33:47,970
are good they don't lead to cleanly

645
00:33:46,259 --> 00:33:49,650
written code for doing the kinds of

646
00:33:47,970 --> 00:33:51,690
things that you want to do with them

647
00:33:49,650 --> 00:33:53,610
but they're a lot better than they were

648
00:33:51,690 --> 00:33:56,009
which is why I say that if somebody

649
00:33:53,609 --> 00:33:57,809
wants to do something like this I'm not

650
00:33:56,009 --> 00:34:00,119
going to get too angry about it because

651
00:33:57,809 --> 00:34:02,369
it's relatively straightforward it does

652
00:34:00,119 --> 00:34:08,638
work you can inspect it in the debugger

653
00:34:02,369 --> 00:34:14,339
now back in 1996 or so when I would have

654
00:34:08,639 --> 00:34:17,190
been first using templates 95 96 I would

655
00:34:14,340 --> 00:34:18,419
at this point say you know if I went

656
00:34:17,190 --> 00:34:21,000
back to that day I'd be like do not

657
00:34:18,418 --> 00:34:24,210
touch templates for a decade like until

658
00:34:21,000 --> 00:34:26,460
2005 don't even think about using these

659
00:34:24,210 --> 00:34:27,960
and then maybe sometime around there you

660
00:34:26,460 --> 00:34:30,179
could start to think about using them

661
00:34:27,960 --> 00:34:32,099
right but they were just awful at that

662
00:34:30,179 --> 00:34:33,360
time not that people didn't still use

663
00:34:32,099 --> 00:34:36,690
them but they were just it was a very

664
00:34:33,360 --> 00:34:39,329
bad idea all right so anyway that's what

665
00:34:36,690 --> 00:34:42,809
templates are enough to understand this

666
00:34:39,329 --> 00:34:46,500
example so what the person wrote in to

667
00:34:42,809 --> 00:34:50,579
ask about was that if I declare a

668
00:34:46,500 --> 00:34:52,949
template like so what do you think about

669
00:34:50,579 --> 00:34:57,420
the pattern of having a derived class

670
00:34:52,949 --> 00:34:59,699
that inherits from a base class that is

671
00:34:57,420 --> 00:35:02,630
templatized on the derived class itself

672
00:34:59,699 --> 00:35:02,629
right

673
00:35:08,130 --> 00:35:11,130
now

674
00:35:11,519 --> 00:35:18,920
you may be asking and rightfully so what

675
00:35:15,599 --> 00:35:21,989
is this public based arising here

676
00:35:18,920 --> 00:35:24,480
because again for those of you who

677
00:35:21,989 --> 00:35:26,250
aren't C++ people you may not really

678
00:35:24,480 --> 00:35:28,519
know because we don't do that on we

679
00:35:26,250 --> 00:35:34,139
don't really ever use those people's

680
00:35:28,519 --> 00:35:39,650
hand Mahiro well if you have a structure

681
00:35:34,139 --> 00:35:44,269
class and you want to essentially extend

682
00:35:39,650 --> 00:35:45,780
that class so I mean that struct

683
00:35:44,269 --> 00:35:47,550
classrooms are structs are

684
00:35:45,780 --> 00:35:49,650
interchangeable so I I just use the two

685
00:35:47,550 --> 00:35:54,420
terms interchangeably so I apologize for

686
00:35:49,650 --> 00:35:56,639
that so if you have a struct like say

687
00:35:54,420 --> 00:35:58,019
this this base here and I could make it

688
00:35:56,639 --> 00:36:00,210
a little simpler by taking the template

689
00:35:58,019 --> 00:36:02,639
out of it let's say I just have a class

690
00:36:00,210 --> 00:36:07,340
a and it has an infinite and then I have

691
00:36:02,639 --> 00:36:10,739
a class B and it has a y in it like so

692
00:36:07,340 --> 00:36:12,840
right so normally let's say that I

693
00:36:10,739 --> 00:36:14,519
wanted to extend this class and I wanted

694
00:36:12,840 --> 00:36:16,140
to put some extra information in it now

695
00:36:14,519 --> 00:36:17,429
you know if this is a bad example let me

696
00:36:16,139 --> 00:36:19,199
do something you can actually relate to

697
00:36:17,429 --> 00:36:21,059
so it's a little clearer let's say I've

698
00:36:19,199 --> 00:36:22,169
got entity because that's a more common

699
00:36:21,059 --> 00:36:24,059
thing that people might use for

700
00:36:22,170 --> 00:36:27,180
sub-classing right

701
00:36:24,059 --> 00:36:29,309
and inside the entity I have got some

702
00:36:27,179 --> 00:36:31,829
you know generic information like I've

703
00:36:29,309 --> 00:36:34,349
got like the position of the entity and

704
00:36:31,829 --> 00:36:36,690
maybe I have something like its radius

705
00:36:34,349 --> 00:36:38,880
or whatever but then depending on what

706
00:36:36,690 --> 00:36:41,099
type of entity I have I want additional

707
00:36:38,880 --> 00:36:42,420
information about the editing now we've

708
00:36:41,099 --> 00:36:43,889
seen different ways of doing this like

709
00:36:42,420 --> 00:36:46,108
I'm hand made hero will often do

710
00:36:43,889 --> 00:36:47,190
something like we'll make a union and

711
00:36:46,108 --> 00:36:51,659
then we'll do something like saying

712
00:36:47,190 --> 00:36:54,570
entity ghost and the ghost has you know

713
00:36:51,659 --> 00:36:55,829
a spookiness value and then what we'll

714
00:36:54,570 --> 00:36:58,170
do on handmade heroes we'll say all

715
00:36:55,829 --> 00:37:04,049
right here's entity ghost

716
00:36:58,170 --> 00:37:06,650
here's enum MC type and we'll have like

717
00:37:04,050 --> 00:37:06,650
entity ghost

718
00:37:09,099 --> 00:37:12,588
right that's the standard way we might

719
00:37:11,449 --> 00:37:15,739
write something like that on handmade

720
00:37:12,588 --> 00:37:18,199
hero the way a object-oriented program

721
00:37:15,739 --> 00:37:26,569
our rights this most of the time who

722
00:37:18,199 --> 00:37:28,460
likes inheritance is they use this

723
00:37:26,570 --> 00:37:35,330
syntax which is the syntax for

724
00:37:28,460 --> 00:37:39,250
inheritance in C++ what it is is it's a

725
00:37:35,329 --> 00:37:42,049
colon after the type name that says

726
00:37:39,250 --> 00:37:44,539
anything that I list after that colon is

727
00:37:42,050 --> 00:37:48,830
going to be something that I include at

728
00:37:44,539 --> 00:38:05,659
the top of myself basically so if I say

729
00:37:48,829 --> 00:38:08,088
oops okay so if I say this then what

730
00:38:05,659 --> 00:38:12,858
this public entity part here means is

731
00:38:08,088 --> 00:38:18,070
just that I've got this struct stuck on

732
00:38:12,858 --> 00:38:18,069
top of me so this basically becomes this

733
00:38:21,519 --> 00:38:29,420
right it grafts whatever you put here

734
00:38:27,289 --> 00:38:31,369
onto the top and that's all it does

735
00:38:29,420 --> 00:38:38,740
right it doesn't really do anything else

736
00:38:31,369 --> 00:38:42,260
at this point so why do you want this

737
00:38:38,739 --> 00:38:44,029
well as you can see this is sort of a

738
00:38:42,260 --> 00:38:45,680
way of doing the same sort of thing

739
00:38:44,030 --> 00:38:48,080
we're doing here building composite

740
00:38:45,679 --> 00:38:50,419
types that have all the information in

741
00:38:48,079 --> 00:38:53,329
them and furthermore C++ once you've

742
00:38:50,420 --> 00:38:55,130
specified this will do you a nice favor

743
00:38:53,329 --> 00:38:59,210
which is it will make it so that you

744
00:38:55,130 --> 00:39:00,710
don't have to cast if you want to go

745
00:38:59,210 --> 00:39:03,230
from one of the more specialized classes

746
00:39:00,710 --> 00:39:06,889
to one of the less specialized classes

747
00:39:03,230 --> 00:39:10,250
or in our case trucks right so for

748
00:39:06,889 --> 00:39:15,348
example if I'm sitting around and I have

749
00:39:10,250 --> 00:39:17,900
an entity ghost like so right and I have

750
00:39:15,349 --> 00:39:21,670
something that expects an entity so

751
00:39:17,900 --> 00:39:21,670
let's say I have a function

752
00:39:26,748 --> 00:39:33,538
and in here we're going to do something

753
00:39:29,150 --> 00:39:35,519
to that entity then when I am going to

754
00:39:33,539 --> 00:39:41,910
be somewhere else with one of these

755
00:39:35,518 --> 00:39:45,748
entity goes like so normally in you know

756
00:39:41,909 --> 00:39:49,078
if this were just without this syntax to

757
00:39:45,748 --> 00:39:52,409
public entity part normally I wouldn't

758
00:39:49,079 --> 00:39:54,239
be able to do this right because this is

759
00:39:52,409 --> 00:39:58,078
an entity ghost and this function

760
00:39:54,239 --> 00:40:01,679
requires an entity so when I call foo

761
00:39:58,079 --> 00:40:02,970
I'm going to be calling ghost here I'm

762
00:40:01,679 --> 00:40:04,588
going to be passing an empty ghost

763
00:40:02,969 --> 00:40:07,469
pointer it shouldn't work it's give me

764
00:40:04,588 --> 00:40:09,778
an error but because I said that this

765
00:40:07,469 --> 00:40:14,748
entity ghost always includes entity at

766
00:40:09,778 --> 00:40:17,940
the top of it it's essentially as if I

767
00:40:14,748 --> 00:40:20,278
had one of these at the top and whenever

768
00:40:17,940 --> 00:40:22,769
you want to call something that would

769
00:40:20,278 --> 00:40:25,139
have used it it's just cast it for you

770
00:40:22,768 --> 00:40:26,729
implicitly because remember any pointer

771
00:40:25,139 --> 00:40:28,889
to an entity ghost is basically a

772
00:40:26,730 --> 00:40:30,989
pointer to an entity as well because the

773
00:40:28,889 --> 00:40:32,818
members at the top are the same so

774
00:40:30,989 --> 00:40:34,170
anything that would have been code that

775
00:40:32,818 --> 00:40:36,568
would have been generated in here to

776
00:40:34,170 --> 00:40:37,920
work with P and radius whether I'm

777
00:40:36,568 --> 00:40:39,538
pointing to an entity or an envied ghost

778
00:40:37,920 --> 00:40:46,200
wouldn't matter because they're in the

779
00:40:39,539 --> 00:40:50,819
exact same places right okay so that's

780
00:40:46,199 --> 00:40:52,679
how inheritance works right so now let's

781
00:40:50,818 --> 00:40:54,900
get back to the actual question at hand

782
00:40:52,679 --> 00:40:56,248
now that we've explained the things in

783
00:40:54,900 --> 00:40:58,789
here that we don't normally see on

784
00:40:56,248 --> 00:40:58,788
handmade hero

785
00:40:59,818 --> 00:41:05,818
so in here where we have struck entity

786
00:41:01,789 --> 00:41:08,069
we've got the P and the radius to entity

787
00:41:05,818 --> 00:41:11,190
type the ghost whatever that sort of

788
00:41:08,068 --> 00:41:13,349
stuff right this is the handmaid here

789
00:41:11,190 --> 00:41:15,358
way of doing something we're going to

790
00:41:13,349 --> 00:41:18,269
say let's pretend we're not going to do

791
00:41:15,358 --> 00:41:20,568
it that way instead we want to do it you

792
00:41:18,268 --> 00:41:21,988
know some other way like this

793
00:41:20,568 --> 00:41:25,619
inheritance way

794
00:41:21,989 --> 00:41:28,079
well once we start doing things in the

795
00:41:25,619 --> 00:41:31,890
inheritance way what you can see

796
00:41:28,079 --> 00:41:33,690
happening is that all the stuff we take

797
00:41:31,889 --> 00:41:35,379
for granted on handmade hero suddenly

798
00:41:33,690 --> 00:41:39,700
starts to go away a little bit

799
00:41:35,380 --> 00:41:43,059
right because the base class that you're

800
00:41:39,699 --> 00:41:47,460
inheriting from doesn't know and can't

801
00:41:43,059 --> 00:41:52,059
know what the derived class actually was

802
00:41:47,460 --> 00:41:53,500
so for example inside when we're dealing

803
00:41:52,059 --> 00:41:56,739
with something of this base class here

804
00:41:53,500 --> 00:42:00,929
let's say we have a struct derived based

805
00:41:56,739 --> 00:42:05,439
derived here this this fellow right

806
00:42:00,929 --> 00:42:09,699
let's say in here we have an int X right

807
00:42:05,440 --> 00:42:12,789
and if inside the base class there's a

808
00:42:09,699 --> 00:42:15,279
function that wanted to be able to know

809
00:42:12,789 --> 00:42:16,989
whether it was actually one of these or

810
00:42:15,280 --> 00:42:18,460
not right because remember you know I

811
00:42:16,989 --> 00:42:19,929
should probably leave this in here

812
00:42:18,460 --> 00:42:24,250
because I'm going to probably refer to

813
00:42:19,929 --> 00:42:26,829
it right let me leave this because I can

814
00:42:24,250 --> 00:42:28,690
show you more clearly in here let's say

815
00:42:26,829 --> 00:42:30,880
that we actually built this out a little

816
00:42:28,690 --> 00:42:33,700
bit more and what we wanted to do was

817
00:42:30,880 --> 00:42:36,700
like inside foo we had a bunch of stuff

818
00:42:33,699 --> 00:42:39,129
we wanted to do here that was like oh

819
00:42:36,699 --> 00:42:42,399
yeah you know the entity P is going to

820
00:42:39,130 --> 00:42:47,340
be offset by something and then the

821
00:42:42,400 --> 00:42:49,900
entity radius is going to be you know

822
00:42:47,340 --> 00:42:54,430
offset by one point oh I don't know

823
00:42:49,900 --> 00:42:56,740
write something like this that all works

824
00:42:54,429 --> 00:42:59,409
just fine a C++ right with this

825
00:42:56,739 --> 00:43:01,509
inheritance model the problem now comes

826
00:42:59,409 --> 00:43:06,250
if I wanted to do something like all ah

827
00:43:01,510 --> 00:43:08,350
you know what I really wanted if there

828
00:43:06,250 --> 00:43:11,860
was a if it hat if it did have a

829
00:43:08,349 --> 00:43:14,650
spookiness to it right if it was a ghost

830
00:43:11,860 --> 00:43:16,390
then i want to do something differently

831
00:43:14,650 --> 00:43:21,869
so you know i really wanted to do

832
00:43:16,389 --> 00:43:25,599
something like if i am a ghost right

833
00:43:21,869 --> 00:43:27,099
then you know then get you know shrink

834
00:43:25,599 --> 00:43:28,750
me to zero or something you know i don't

835
00:43:27,099 --> 00:43:31,059
know right like imagine you just have

836
00:43:28,750 --> 00:43:36,760
something special you want to do in that

837
00:43:31,059 --> 00:43:38,710
case so c++ doesn't really handle these

838
00:43:36,760 --> 00:43:40,060
sorts of things with any kind of great

839
00:43:38,710 --> 00:43:44,909
one of the really big problems with

840
00:43:40,059 --> 00:43:47,349
their inheritance model are TTI isn't

841
00:43:44,909 --> 00:43:49,210
something you can actually persist

842
00:43:47,349 --> 00:43:51,639
across builds of your program so you

843
00:43:49,210 --> 00:43:53,159
can't really use what's called runtime

844
00:43:51,639 --> 00:43:55,929
type information which is a way of

845
00:43:53,159 --> 00:43:57,819
figuring out an identifier based on the

846
00:43:55,929 --> 00:43:59,019
type it doesn't really work so it's

847
00:43:57,820 --> 00:44:00,760
pretty much out of the question so you

848
00:43:59,019 --> 00:44:04,329
can't use that to ask whether you're a

849
00:44:00,760 --> 00:44:06,460
ghost there is no way to generate an

850
00:44:04,329 --> 00:44:08,019
enum you know C++ was saying there'd be

851
00:44:06,460 --> 00:44:09,429
a way to just generate an enum in a

852
00:44:08,019 --> 00:44:13,360
predictable fashion that was stable

853
00:44:09,429 --> 00:44:15,219
across runs that you could use and just

854
00:44:13,360 --> 00:44:16,780
have that be a type field that you could

855
00:44:15,219 --> 00:44:19,119
access in size entity if you wanted it

856
00:44:16,780 --> 00:44:20,350
of course you can't get that so that's

857
00:44:19,119 --> 00:44:22,179
out of the question that's of course why

858
00:44:20,349 --> 00:44:25,119
I always run it this way because this

859
00:44:22,179 --> 00:44:28,089
basically handles all cases you can't do

860
00:44:25,119 --> 00:44:29,889
that in C++ so they start you start to

861
00:44:28,090 --> 00:44:31,840
have to use these other like really

862
00:44:29,889 --> 00:44:33,759
roundabout ways like saying well okay

863
00:44:31,840 --> 00:44:35,019
even though all I wanted to do was check

864
00:44:33,760 --> 00:44:36,730
if I'm a ghost here which should have

865
00:44:35,019 --> 00:44:37,780
been a relatively simple thing to do I'm

866
00:44:36,730 --> 00:44:39,579
going to have to start introducing

867
00:44:37,780 --> 00:44:40,870
something to help me here

868
00:44:39,579 --> 00:44:43,119
one thing they could do is virtual

869
00:44:40,869 --> 00:44:48,039
function calls which are basically based

870
00:44:43,119 --> 00:44:49,539
off of whatever the derived type was I

871
00:44:48,039 --> 00:44:53,409
can have a virtual function call which

872
00:44:49,539 --> 00:44:55,029
says like a my ghost write which I could

873
00:44:53,409 --> 00:44:56,559
call and it could return a boolean the

874
00:44:55,030 --> 00:44:59,200
tells you of the room goes I could

875
00:44:56,559 --> 00:45:02,049
inflate the Billy's cut the base class

876
00:44:59,199 --> 00:45:03,609
to actually have an mi a ghost but

877
00:45:02,050 --> 00:45:05,950
that's basically like adding an enum so

878
00:45:03,610 --> 00:45:07,840
at that point you've lost the benefit of

879
00:45:05,949 --> 00:45:09,549
the inheritance or the virtual functions

880
00:45:07,840 --> 00:45:11,650
are really the only way to do it I won't

881
00:45:09,550 --> 00:45:13,150
go into detail quite about how works 100

882
00:45:11,650 --> 00:45:16,180
skills no matter if this example but

883
00:45:13,150 --> 00:45:17,769
that's the way you could do them the the

884
00:45:16,179 --> 00:45:19,599
audit oriented programmer sort of

885
00:45:17,769 --> 00:45:21,070
fallacious reasoning usually leads them

886
00:45:19,599 --> 00:45:23,469
to do something like well you should

887
00:45:21,070 --> 00:45:25,510
break this down into a virtual part that

888
00:45:23,469 --> 00:45:27,459
will be different for the ghost so baby

889
00:45:25,510 --> 00:45:31,240
it should be something like you know get

890
00:45:27,460 --> 00:45:32,949
to radius that you call on the entity

891
00:45:31,239 --> 00:45:34,750
that allows it to do this or whatever

892
00:45:32,949 --> 00:45:35,679
also this would probably a member

893
00:45:34,750 --> 00:45:37,030
function in an object-oriented

894
00:45:35,679 --> 00:45:38,710
programmers world but that's beside the

895
00:45:37,030 --> 00:45:40,960
point but you just going to do this

896
00:45:38,710 --> 00:45:44,530
really nasty world of nastiness

897
00:45:40,960 --> 00:45:47,650
right so another weird way you can

898
00:45:44,530 --> 00:45:50,040
accomplish the same thing though is by

899
00:45:47,650 --> 00:45:55,260
looking at this pattern that they've

900
00:45:50,039 --> 00:45:57,940
that the original questioner asked about

901
00:45:55,260 --> 00:46:01,420
one thing you could do is say when I

902
00:45:57,940 --> 00:46:03,039
derive from a type instead of using it

903
00:46:01,420 --> 00:46:06,639
as a polymorphism

904
00:46:03,039 --> 00:46:10,150
as something for polymorphism in in the

905
00:46:06,639 --> 00:46:15,309
top-down way right in the way where I'm

906
00:46:10,150 --> 00:46:17,740
like inheriting from an entity base

907
00:46:15,309 --> 00:46:22,090
class that has the basic things in it

908
00:46:17,739 --> 00:46:24,549
and instead I'm you know going to and

909
00:46:22,090 --> 00:46:26,650
and I'm stacking that on like at the

910
00:46:24,550 --> 00:46:31,030
front of my structure that I could

911
00:46:26,650 --> 00:46:33,039
interchangeably use myself as what I

912
00:46:31,030 --> 00:46:35,380
actually what type of actually I'm and

913
00:46:33,039 --> 00:46:38,440
that type you could instead in effect

914
00:46:35,380 --> 00:46:42,010
effectively flip things around right you

915
00:46:38,440 --> 00:46:43,659
could say well alright this type is

916
00:46:42,010 --> 00:46:45,790
actually the type that's going to be

917
00:46:43,659 --> 00:46:47,500
more primal and instead what I'm going

918
00:46:45,789 --> 00:46:49,539
to do is I'm just going to make whatever

919
00:46:47,500 --> 00:46:51,820
this utility class here is that I've

920
00:46:49,539 --> 00:46:55,179
written I'm going to make that template

921
00:46:51,820 --> 00:47:03,730
eyes on me so it can do stuff based on

922
00:46:55,179 --> 00:47:05,139
what I want it to do right now you can

923
00:47:03,730 --> 00:47:06,820
do a lot of different stuff is that

924
00:47:05,139 --> 00:47:08,859
right like you can imagine that this

925
00:47:06,820 --> 00:47:11,650
base class now can have stuff that

926
00:47:08,860 --> 00:47:13,990
operates on things of this derived type

927
00:47:11,650 --> 00:47:16,900
so for example if this thing does have

928
00:47:13,989 --> 00:47:18,959
an int X into y in it and now we have a

929
00:47:16,900 --> 00:47:24,900
thing that's like inside the space class

930
00:47:18,960 --> 00:47:26,949
well first of all again member functions

931
00:47:24,900 --> 00:47:28,660
are something we haven't really talked

932
00:47:26,949 --> 00:47:30,659
about either member functions or things

933
00:47:28,659 --> 00:47:36,219
that are part of a class that operate on

934
00:47:30,659 --> 00:47:38,829
on the things in the class but AE so I'm

935
00:47:36,219 --> 00:47:42,099
trying to think of like what the

936
00:47:38,829 --> 00:47:44,670
cleanest way to choose something like

937
00:47:42,099 --> 00:47:44,670
this is

938
00:47:50,650 --> 00:47:55,519
it's been so long since I've programmed

939
00:47:52,849 --> 00:47:58,309
any things like this that I'm sure I can

940
00:47:55,519 --> 00:48:01,449
think of a reasonably interesting use

941
00:47:58,309 --> 00:48:06,500
case for this it's just that I

942
00:48:01,449 --> 00:48:08,179
my brain has long since passed by these

943
00:48:06,500 --> 00:48:09,409
sorts of things so it's a little bit

944
00:48:08,179 --> 00:48:10,489
hard for me immediately think of

945
00:48:09,409 --> 00:48:17,809
something that's going to resonate and

946
00:48:10,489 --> 00:48:27,939
be like oh yeah that that makes sense so

947
00:48:17,809 --> 00:48:27,940
let's say that we have

948
00:48:37,659 --> 00:48:43,389
that's going to be good I don't suppose

949
00:48:40,039 --> 00:48:45,469
the Wikipedia article has an actual good

950
00:48:43,389 --> 00:48:48,889
example of something that I would want

951
00:48:45,469 --> 00:48:50,118
to do does it typically the base class

952
00:48:48,889 --> 00:48:51,829
template will take advantage of the fact

953
00:48:50,119 --> 00:48:52,849
that member function bodies are not

954
00:48:51,829 --> 00:48:54,380
instantiate until long after

955
00:48:52,849 --> 00:48:55,490
declarations and we use members of the

956
00:48:54,380 --> 00:48:58,160
derived class within that so member

957
00:48:55,489 --> 00:49:03,829
functions which is what I just said via

958
00:48:58,159 --> 00:49:05,409
the use of the caste but they don't

959
00:49:03,829 --> 00:49:09,460
really

960
00:49:05,409 --> 00:49:12,079
yeah they don't really do anything

961
00:49:09,460 --> 00:49:14,269
particularly interesting here here we go

962
00:49:12,079 --> 00:49:15,829
object counters so maybe this is useful

963
00:49:14,269 --> 00:49:17,570
let's see the main purpose of an object

964
00:49:15,829 --> 00:49:18,799
enter is retrieving statistics of object

965
00:49:17,570 --> 00:49:22,780
creation instruction for a given class

966
00:49:18,800 --> 00:49:32,450
which could be easily solved using CRT P

967
00:49:22,780 --> 00:49:36,190
they basically go on to yet to basically

968
00:49:32,449 --> 00:49:39,139
just you know use this as a way of doing

969
00:49:36,190 --> 00:49:42,980
injection I let me skip that because

970
00:49:39,139 --> 00:49:45,170
since polymorphic chaining is given this

971
00:49:42,980 --> 00:49:46,579
example here maybe we can just skip

972
00:49:45,170 --> 00:49:50,750
directly to that which I think is what

973
00:49:46,579 --> 00:49:53,029
the original question was about I and

974
00:49:50,750 --> 00:49:54,320
you know we'll see if we can we can

975
00:49:53,030 --> 00:49:55,760
recently get this you know maybe I

976
00:49:54,320 --> 00:50:01,130
should bring this up on the screen I can

977
00:49:55,760 --> 00:50:03,400
just walk through the example here to

978
00:50:01,130 --> 00:50:03,400
pee

979
00:50:06,360 --> 00:50:14,820
here you go so I think this and perhaps

980
00:50:12,090 --> 00:50:19,289
it's related one polymorphic copy

981
00:50:14,820 --> 00:50:22,789
construction is mostly what's the

982
00:50:19,289 --> 00:50:25,409
original question or was asking about

983
00:50:22,789 --> 00:50:27,150
but I don't really know obviously

984
00:50:25,409 --> 00:50:29,339
because they just said polymorphism in

985
00:50:27,150 --> 00:50:33,119
general so maybe they didn't have either

986
00:50:29,340 --> 00:50:38,579
of these two uses in in mind I'm not

987
00:50:33,119 --> 00:50:40,469
sure this is the more concise one so we

988
00:50:38,579 --> 00:50:41,969
could look at this one first

989
00:50:40,469 --> 00:50:43,409
but basically what they say here right

990
00:50:41,969 --> 00:50:45,089
we're using polymorphism one sentence

991
00:50:43,409 --> 00:50:46,529
needs to create object copies of objects

992
00:50:45,090 --> 00:50:48,120
by the base class pointer commonly use

993
00:50:46,530 --> 00:50:49,950
idiom for this is adding a virtual

994
00:50:48,119 --> 00:50:51,809
cloned function defined every class

995
00:50:49,949 --> 00:50:53,369
Sergi we can use to avoid having to

996
00:50:51,809 --> 00:50:55,349
duplicate that function or other similar

997
00:50:53,369 --> 00:50:57,630
functions in every derived class right

998
00:50:55,349 --> 00:50:58,980
so you can see they've set up exactly

999
00:50:57,630 --> 00:51:01,920
the same thing as we were talking about

1000
00:50:58,980 --> 00:51:06,539
here is the base class I'm sorry this

1001
00:51:01,920 --> 00:51:11,610
here is the generic class this is

1002
00:51:06,539 --> 00:51:13,650
actually not the specific one it's just

1003
00:51:11,610 --> 00:51:15,030
sort of a thing that creates the virtual

1004
00:51:13,650 --> 00:51:16,800
functions which again I said I guess

1005
00:51:15,030 --> 00:51:19,170
we'll have to talk about basically what

1006
00:51:16,800 --> 00:51:23,100
a virtual function is is it's a function

1007
00:51:19,170 --> 00:51:27,269
that is dispatched automatically based

1008
00:51:23,099 --> 00:51:30,150
on which actual type of object you have

1009
00:51:27,269 --> 00:51:31,829
so for example in handmade hero we

1010
00:51:30,150 --> 00:51:33,869
typically implement this behavior with a

1011
00:51:31,829 --> 00:51:36,960
switch statement we will have an enum

1012
00:51:33,869 --> 00:51:39,509
stored in the structure that says you

1013
00:51:36,960 --> 00:51:40,889
know I'm this particular type and so

1014
00:51:39,510 --> 00:51:42,270
when someone wants to do something

1015
00:51:40,889 --> 00:51:45,269
specific based on that type there's a

1016
00:51:42,269 --> 00:51:47,280
switch with the type and then you do a

1017
00:51:45,269 --> 00:51:51,840
different case per object type like

1018
00:51:47,280 --> 00:51:53,130
whatever the thing is in C++ the methods

1019
00:51:51,840 --> 00:51:55,079
they built-in for that with virtual

1020
00:51:53,130 --> 00:51:57,059
functions what they do is they add a

1021
00:51:55,079 --> 00:52:00,239
hidden pointer you can't see it it's not

1022
00:51:57,059 --> 00:52:04,380
ever shown but it's there so it adds a

1023
00:52:00,239 --> 00:52:06,449
hidden pointer to the top of each struct

1024
00:52:04,380 --> 00:52:07,289
ant well it does nothing at the top of

1025
00:52:06,449 --> 00:52:09,419
the structure just has to be in a

1026
00:52:07,289 --> 00:52:12,539
predictable location but point being

1027
00:52:09,420 --> 00:52:15,090
probably at the top so there's a hidden

1028
00:52:12,539 --> 00:52:17,579
pointer which points to a table of

1029
00:52:15,090 --> 00:52:19,588
function pointers that can be used to

1030
00:52:17,579 --> 00:52:21,509
call the different songs

1031
00:52:19,588 --> 00:52:23,639
depending on the type and it will just

1032
00:52:21,509 --> 00:52:25,170
dispatch through them so for example

1033
00:52:23,639 --> 00:52:28,228
when you see here we've got template

1034
00:52:25,170 --> 00:52:32,430
type name derived class shape CR teeth P

1035
00:52:28,228 --> 00:52:35,098
public shape right it creates a virtual

1036
00:52:32,429 --> 00:52:37,739
function here that overrides that's the

1037
00:52:35,099 --> 00:52:40,920
term term that's normally used for

1038
00:52:37,739 --> 00:52:43,559
creating one of these the one that's in

1039
00:52:40,920 --> 00:52:45,838
this base class so when someone has a

1040
00:52:43,559 --> 00:52:47,519
shape they don't necessarily know which

1041
00:52:45,838 --> 00:52:50,159
kind it is so they don't know it's a

1042
00:52:47,518 --> 00:52:53,568
shape CRT P template or any of the other

1043
00:52:50,159 --> 00:52:56,998
things what they will basically do is

1044
00:52:53,568 --> 00:52:59,009
when you hit this clone you try to call

1045
00:52:56,998 --> 00:53:01,679
clone it will look up into the pointers

1046
00:52:59,009 --> 00:53:03,358
pointer table because it's actually one

1047
00:53:01,679 --> 00:53:06,149
of these that pointer will be pointing

1048
00:53:03,358 --> 00:53:08,130
to the pointer table for this particular

1049
00:53:06,150 --> 00:53:09,358
type which will have a pointer to this

1050
00:53:08,130 --> 00:53:11,818
function and it will call this function

1051
00:53:09,358 --> 00:53:14,308
if you had a shape CRT P as the type you

1052
00:53:11,818 --> 00:53:15,210
were working with right now there's

1053
00:53:14,309 --> 00:53:17,910
going to be a different one of those

1054
00:53:15,210 --> 00:53:21,239
function tables for every one of these

1055
00:53:17,909 --> 00:53:24,478
different parametrize types but we'll

1056
00:53:21,239 --> 00:53:26,159
get that second okay so all this space

1057
00:53:24,478 --> 00:53:29,098
class does is set up the fact that there

1058
00:53:26,159 --> 00:53:30,778
is going to be a clone after that we

1059
00:53:29,099 --> 00:53:32,670
then have this template type the

1060
00:53:30,778 --> 00:53:34,978
template type takes whatever the most

1061
00:53:32,670 --> 00:53:36,809
derived class is going to be so for

1062
00:53:34,978 --> 00:53:39,449
example square or circle they're

1063
00:53:36,809 --> 00:53:43,319
defining these other types in the future

1064
00:53:39,449 --> 00:53:45,268
right I don't know why they thought they

1065
00:53:43,318 --> 00:53:47,608
should introduce a macro here because

1066
00:53:45,268 --> 00:53:48,988
since this isn't about macros it would

1067
00:53:47,608 --> 00:53:51,719
have been probably much clearer to not

1068
00:53:48,989 --> 00:53:53,670
do that but what can you do so anyway

1069
00:53:51,719 --> 00:53:56,880
this GOTV class it was clone 4 derived

1070
00:53:53,670 --> 00:53:59,460
as they say you can see how it's doing

1071
00:53:56,880 --> 00:54:01,739
this clone right it's saying oh okay

1072
00:53:59,460 --> 00:54:03,929
what I want to clone something what I

1073
00:54:01,739 --> 00:54:10,739
want you to do is create a new derived

1074
00:54:03,929 --> 00:54:13,318
class and pass to it whatever the I want

1075
00:54:10,739 --> 00:54:15,509
you to use it's it's effectively copy

1076
00:54:13,318 --> 00:54:17,699
constructor I want you to basically take

1077
00:54:15,509 --> 00:54:19,048
there's so many things in here that we

1078
00:54:17,699 --> 00:54:21,149
don't cover in him and it's really hard

1079
00:54:19,048 --> 00:54:22,170
for me to do explanations because every

1080
00:54:21,150 --> 00:54:24,710
time I want to refer to something I'd

1081
00:54:22,170 --> 00:54:24,710
have to explain it

1082
00:54:26,010 --> 00:54:30,600
every time you call the phone function

1083
00:54:28,800 --> 00:54:32,850
you're basically just going to call the

1084
00:54:30,599 --> 00:54:35,190
copy constructor of whatever the derived

1085
00:54:32,849 --> 00:54:37,710
class was so it's basically just a way

1086
00:54:35,190 --> 00:54:39,809
of saying oh okay since I don't want to

1087
00:54:37,710 --> 00:54:42,090
have to type this every time in every

1088
00:54:39,809 --> 00:54:44,820
derived class from Shape I'm going to

1089
00:54:42,090 --> 00:54:47,130
make this ridiculous template that will

1090
00:54:44,820 --> 00:54:50,160
then inject that function using the

1091
00:54:47,130 --> 00:54:52,800
actual derived class itself into every

1092
00:54:50,159 --> 00:54:57,719
of my derived classes so that they all

1093
00:54:52,800 --> 00:55:03,780
can do this right now the hilarious

1094
00:54:57,719 --> 00:55:05,099
thing about this I mean you know you

1095
00:55:03,780 --> 00:55:13,410
could probably predict what I'm going to

1096
00:55:05,099 --> 00:55:18,710
say just look at this right it's so

1097
00:55:13,409 --> 00:55:22,019
convoluted like what you wanted to do is

1098
00:55:18,710 --> 00:55:24,449
nothing like what this looks like all

1099
00:55:22,019 --> 00:55:27,989
you wanted to do was write a function

1100
00:55:24,449 --> 00:55:30,689
that said hey I'm going to write a

1101
00:55:27,989 --> 00:55:33,899
function called clone whenever you

1102
00:55:30,690 --> 00:55:36,630
derive a class from shape I would like

1103
00:55:33,900 --> 00:55:41,460
you to call the copy constructor on that

1104
00:55:36,630 --> 00:55:43,470
derived class inside clone right and

1105
00:55:41,460 --> 00:55:45,210
I'll just try to hammer this point home

1106
00:55:43,469 --> 00:55:48,750
because this is an extremely simple

1107
00:55:45,210 --> 00:55:51,480
example and yet it's still so laughable

1108
00:55:48,750 --> 00:55:55,739
about how bad B plus plus is at doing

1109
00:55:51,480 --> 00:55:58,469
this right so here's what I wanted to

1110
00:55:55,739 --> 00:56:00,689
have happen right here's what I here's

1111
00:55:58,469 --> 00:56:02,368
what I wanted to have happen in fact

1112
00:56:00,690 --> 00:56:05,880
maybe this is what we'll talk about

1113
00:56:02,369 --> 00:56:08,220
today because it's worth noting it's

1114
00:56:05,880 --> 00:56:12,210
worth examining specifics about why I

1115
00:56:08,219 --> 00:56:14,909
rag on C++ so often and literally any

1116
00:56:12,210 --> 00:56:17,000
example of how to do something in C++

1117
00:56:14,909 --> 00:56:21,690
using template classes whatever

1118
00:56:17,000 --> 00:56:23,849
literally any example shows you why it

1119
00:56:21,690 --> 00:56:26,190
is such a poor language you can

1120
00:56:23,849 --> 00:56:28,739
literally take any example that someone

1121
00:56:26,190 --> 00:56:34,200
gives and it usually takes only a few

1122
00:56:28,739 --> 00:56:36,089
seconds to see how bad they did at

1123
00:56:34,199 --> 00:56:39,199
creating the thing that you would have

1124
00:56:36,090 --> 00:56:45,420
wanted in that scenario right

1125
00:56:39,199 --> 00:56:47,489
so here we go let's think about what's

1126
00:56:45,420 --> 00:56:49,980
actually happening in the code right now

1127
00:56:47,489 --> 00:56:54,779
all right what we actually wanted to

1128
00:56:49,980 --> 00:56:59,490
have happen let's write that first so

1129
00:56:54,780 --> 00:57:00,839
here's what I've got and I'm going to

1130
00:56:59,489 --> 00:57:02,578
call it a struct because again I'll try

1131
00:57:00,838 --> 00:57:05,219
to keep it as friendly to people who are

1132
00:57:02,579 --> 00:57:06,810
used to the series as possible right so

1133
00:57:05,219 --> 00:57:08,639
here's what it would look like in KC

1134
00:57:06,809 --> 00:57:12,358
land right it would just look like

1135
00:57:08,639 --> 00:57:15,150
struct shape like so and all we wanted

1136
00:57:12,358 --> 00:57:18,150
to do in our program is we wanted to

1137
00:57:15,150 --> 00:57:20,579
have something that would do that

1138
00:57:18,150 --> 00:57:22,858
whatever that cloned function is right

1139
00:57:20,579 --> 00:57:27,359
so all we wanted to do was say all right

1140
00:57:22,858 --> 00:57:29,670
we need a function called clone it's

1141
00:57:27,358 --> 00:57:32,940
supposed to take a shape it's supposed

1142
00:57:29,670 --> 00:57:36,659
to clone that shape right so this is the

1143
00:57:32,940 --> 00:57:39,720
function that we wanted to write now if

1144
00:57:36,659 --> 00:57:44,098
there weren't any pointers in here in

1145
00:57:39,719 --> 00:57:46,919
particular right then the amusing part

1146
00:57:44,099 --> 00:57:48,780
about this is that actually it would be

1147
00:57:46,920 --> 00:57:50,700
incredibly easy the way we do it on

1148
00:57:48,780 --> 00:57:53,790
handmade hero even if it's a derived

1149
00:57:50,699 --> 00:57:55,889
class right so on handmade hero again

1150
00:57:53,789 --> 00:58:05,269
the way that we do this is we would say

1151
00:57:55,889 --> 00:58:05,269
shape square shape circle I don't know

1152
00:58:11,420 --> 00:58:17,670
seems fair we have a shape it's got a

1153
00:58:14,730 --> 00:58:19,949
position we've got a radius in the

1154
00:58:17,670 --> 00:58:23,639
circle 1 we've got a command of x and y

1155
00:58:19,949 --> 00:58:28,469
a wealth of square actually so let's

1156
00:58:23,639 --> 00:58:31,608
call it a rectangle because otherwise

1157
00:58:28,469 --> 00:58:33,838
you just probably still call it a radius

1158
00:58:31,608 --> 00:58:37,108
so at least the data members will all be

1159
00:58:33,838 --> 00:58:38,730
different right so anyway we've got a

1160
00:58:37,108 --> 00:58:40,289
shape rectangular shape circle in the

1161
00:58:38,730 --> 00:58:43,949
hand made hero way we would do something

1162
00:58:40,289 --> 00:58:45,239
like save type type right and then we'd

1163
00:58:43,949 --> 00:58:49,819
have a union that would be a like shape

1164
00:58:45,239 --> 00:58:53,069
rectangle shape circle

1165
00:58:49,820 --> 00:58:54,600
okay so the hand made here away if you

1166
00:58:53,070 --> 00:58:56,670
wanted to write a clone function well

1167
00:58:54,599 --> 00:58:58,710
all you would do is however you would do

1168
00:58:56,670 --> 00:59:04,860
the Alec you know you'd do a push struct

1169
00:58:58,710 --> 00:59:09,949
or something like this of shape and then

1170
00:59:04,860 --> 00:59:09,950
you would just do result equals shape

1171
00:59:10,309 --> 00:59:15,840
right that's the that's it okay

1172
00:59:13,320 --> 00:59:23,220
so the implementation in hand made 0

1173
00:59:15,840 --> 00:59:26,760
style code is three lines long pretty

1174
00:59:23,219 --> 00:59:28,109
straightforward right now let's suppose

1175
00:59:26,760 --> 00:59:32,520
there was something in here that was a

1176
00:59:28,110 --> 00:59:34,440
little more complicated for whatever

1177
00:59:32,519 --> 00:59:36,360
reason our circles have a data block the

1178
00:59:34,440 --> 00:59:39,059
data block pointer is going to have to

1179
00:59:36,360 --> 00:59:55,680
get duplicated in some way whatever so

1180
00:59:39,059 --> 00:59:57,449
then what we have is this right so

1181
00:59:55,679 --> 00:59:59,279
inside here we've got whatever needs to

1182
00:59:57,449 --> 01:00:01,469
happen to data block in order to clone

1183
00:59:59,280 --> 01:00:04,050
it because it has some kind of special

1184
01:00:01,469 --> 01:00:07,529
operation all right again extremely

1185
01:00:04,050 --> 01:00:11,550
straightforward look at that code for a

1186
01:00:07,530 --> 01:00:14,940
second and just consider how easy it was

1187
01:00:11,550 --> 01:00:21,539
to write this code also consider how

1188
01:00:14,940 --> 01:00:26,119
easy it is to read right now let's try

1189
01:00:21,539 --> 01:00:26,119
to start writing this in C++ instead

1190
01:00:37,630 --> 01:00:44,599
all right so first attempt at C++ to

1191
01:00:41,960 --> 01:00:47,030
write this we are not going to use this

1192
01:00:44,599 --> 01:00:49,909
pattern yet right we're going to save

1193
01:00:47,030 --> 01:00:53,720
this pattern for a minute go you know

1194
01:00:49,909 --> 01:00:55,489
get to that in a second okay so first

1195
01:00:53,719 --> 01:00:57,349
attempt to do this at C++ it's just

1196
01:00:55,489 --> 01:00:58,669
three it's a straightforward way okay

1197
01:00:57,349 --> 01:01:03,289
so first of all we have to change the

1198
01:00:58,670 --> 01:01:07,220
order of these two things and then what

1199
01:01:03,289 --> 01:01:13,099
we have to do is go okay we got it bring

1200
01:01:07,219 --> 01:01:15,439
in the shape here right so now we at

1201
01:01:13,099 --> 01:01:18,289
least have these types but now we want

1202
01:01:15,440 --> 01:01:21,650
to write a clone function so we want

1203
01:01:18,289 --> 01:01:27,409
something that does this right how do we

1204
01:01:21,650 --> 01:01:34,579
do it right what are we going to do so

1205
01:01:27,409 --> 01:01:37,279
mm couple options we have a first option

1206
01:01:34,579 --> 01:01:39,380
is we can try to write it effectively

1207
01:01:37,280 --> 01:01:41,120
this way but just much more laborious ly

1208
01:01:39,380 --> 01:01:42,980
right because we have no idea what the

1209
01:01:41,119 --> 01:01:45,500
maximum size of one of these this is

1210
01:01:42,980 --> 01:01:48,050
right so for example one thing that you

1211
01:01:45,500 --> 01:01:49,369
would have done in C++ if you wanted to

1212
01:01:48,050 --> 01:01:51,620
make things simpler for the programmer

1213
01:01:49,369 --> 01:01:53,569
if you would have had a trivial way of

1214
01:01:51,619 --> 01:01:57,079
saying all derived classes have to be

1215
01:01:53,570 --> 01:01:59,660
the same size right that's the way this

1216
01:01:57,079 --> 01:02:01,279
works so if you wanted to make things

1217
01:01:59,659 --> 01:02:03,139
easy for the programmer so that they

1218
01:02:01,280 --> 01:02:06,530
could still write this code that I wrote

1219
01:02:03,139 --> 01:02:10,609
before right because and again let me

1220
01:02:06,530 --> 01:02:18,740
just hammer this point home it's crucial

1221
01:02:10,610 --> 01:02:21,230
to understand that if your language

1222
01:02:18,739 --> 01:02:24,769
features meant to empower the programmer

1223
01:02:21,230 --> 01:02:26,990
to do something new cannot even let the

1224
01:02:24,769 --> 01:02:28,429
programmer write code that is as simple

1225
01:02:26,989 --> 01:02:30,669
as the code they would have written

1226
01:02:28,429 --> 01:02:34,029
before they have that feature you

1227
01:02:30,670 --> 01:02:36,980
obviously didn't make the feature right

1228
01:02:34,030 --> 01:02:40,430
because that that can't be correct in

1229
01:02:36,980 --> 01:02:42,409
other words making leaving a giant hole

1230
01:02:40,429 --> 01:02:44,210
in the implementation space when you

1231
01:02:42,409 --> 01:02:45,920
create a new feature that's supposed to

1232
01:02:44,210 --> 01:02:49,670
be better than the way you were doing it

1233
01:02:45,920 --> 01:02:51,829
before not even having its code be as

1234
01:02:49,670 --> 01:02:56,570
simple as the code you had before should

1235
01:02:51,829 --> 01:02:58,670
be a gigantic huge raging blinking

1236
01:02:56,570 --> 01:03:02,809
symbol on the screen that goes start

1237
01:02:58,670 --> 01:03:04,849
over you did it wrong right but I can't

1238
01:03:02,809 --> 01:03:07,338
write this code why can't I write this

1239
01:03:04,849 --> 01:03:09,230
code I have no idea how much memory I

1240
01:03:07,338 --> 01:03:13,759
would need to store one of these things

1241
01:03:09,230 --> 01:03:16,789
right so if I didn't care about wasting

1242
01:03:13,760 --> 01:03:19,820
a little extra memory which you almost

1243
01:03:16,789 --> 01:03:21,440
never do and you don't even know that

1244
01:03:19,820 --> 01:03:22,730
you actually are because most they might

1245
01:03:21,440 --> 01:03:24,588
all be roughly the same in fact in this

1246
01:03:22,730 --> 01:03:27,130
case they are exactly the same size so

1247
01:03:24,588 --> 01:03:31,909
there's literally no reason to even care

1248
01:03:27,130 --> 01:03:35,510
you can't do this you can't actually do

1249
01:03:31,909 --> 01:03:37,579
this because you have no idea how big it

1250
01:03:35,510 --> 01:03:39,050
would need to be in this case I know

1251
01:03:37,579 --> 01:03:40,819
exactly how big it needs to be because

1252
01:03:39,050 --> 01:03:43,070
the shape struck is the one that

1253
01:03:40,820 --> 01:03:44,690
encloses all the other structs in this

1254
01:03:43,070 --> 01:03:47,150
case I literally can't get that

1255
01:03:44,690 --> 01:03:50,420
information there is literally no way

1256
01:03:47,150 --> 01:03:53,809
that C++ will ever tell me how much

1257
01:03:50,420 --> 01:03:56,389
space I need to store the derived

1258
01:03:53,809 --> 01:04:00,920
classes it could be any it could be

1259
01:03:56,389 --> 01:04:02,949
anything so I can't write this so so

1260
01:04:00,920 --> 01:04:06,320
then what's the next thing I might do

1261
01:04:02,949 --> 01:04:09,019
well I could try to use runtime type

1262
01:04:06,320 --> 01:04:10,700
information right I don't even remember

1263
01:04:09,019 --> 01:04:13,070
the syntax or runtime type information

1264
01:04:10,699 --> 01:04:14,598
but effectively what it does is it would

1265
01:04:13,070 --> 01:04:16,789
let me write a switch statement if I

1266
01:04:14,599 --> 01:04:20,750
wanted to write a switch statement which

1267
01:04:16,789 --> 01:04:23,259
is like the RTP I of shape I think you

1268
01:04:20,750 --> 01:04:23,260
can do this

1269
01:05:02,400 --> 01:05:20,470
which I was making this up I'm not all

1270
01:05:18,699 --> 01:05:26,379
right so I don't remember the syntax of

1271
01:05:20,469 --> 01:05:33,069
RGGI but it doesn't really matter what

1272
01:05:26,380 --> 01:05:34,660
the syntax actually is I think you can

1273
01:05:33,070 --> 01:05:36,940
do this I could be wrong and you might

1274
01:05:34,659 --> 01:05:38,319
not even be able to do this let's see

1275
01:05:36,940 --> 01:05:40,179
the type ID keyword is used to determine

1276
01:05:38,320 --> 01:05:42,250
the class of an object at runtime it

1277
01:05:40,179 --> 01:05:45,389
returns a reference standard I type info

1278
01:05:42,250 --> 01:05:45,389
which is that yeah okay so you can

1279
01:05:49,440 --> 01:05:57,670
although I don't actually see them doing

1280
01:05:53,829 --> 01:06:00,519
it here I mean here's another way you

1281
01:05:57,670 --> 01:06:03,220
could do it right so you might not be

1282
01:06:00,519 --> 01:06:08,139
able to do a switch I think you can do a

1283
01:06:03,219 --> 01:06:12,029
switch though you just have now you know

1284
01:06:08,139 --> 01:06:12,029
you probably couldn't even do a switch

1285
01:06:21,119 --> 01:06:25,799
let's see it's been so long since I'd

1286
01:06:23,909 --> 01:06:28,190
like I mean literally it's been like two

1287
01:06:25,800 --> 01:06:28,190
decades

1288
01:06:38,619 --> 01:06:44,139
so I guess don't quote me on whether you

1289
01:06:41,480 --> 01:06:48,860
can do it has a switch

1290
01:06:44,139 --> 01:06:59,690
let's just hope you could so you just do

1291
01:06:48,860 --> 01:07:12,950
type by D I mean I guess you could do it

1292
01:06:59,690 --> 01:07:14,539
this way right so the reason I say I

1293
01:07:12,949 --> 01:07:15,799
don't know whether you can do is the

1294
01:07:14,539 --> 01:07:20,059
switches I don't know if that's

1295
01:07:15,800 --> 01:07:21,680
technically considered a constant that

1296
01:07:20,059 --> 01:07:25,219
could be switched on like a constant

1297
01:07:21,679 --> 01:07:35,239
integer because it suggests that it's a

1298
01:07:25,219 --> 01:07:38,389
reference to a type here you go oh but

1299
01:07:35,239 --> 01:07:43,879
that c-plus eleven only so they didn't

1300
01:07:38,389 --> 01:07:46,250
have this background turning it but you

1301
01:07:43,880 --> 01:07:48,230
know okay so now if you've got a C++ 11

1302
01:07:46,250 --> 01:07:51,590
compatible compiler there we go hash

1303
01:07:48,230 --> 01:07:54,980
code that's what we need so in here in

1304
01:07:51,590 --> 01:08:00,680
theory you could do this right

1305
01:07:54,980 --> 01:08:01,039
maybe I don't know don't quote me on

1306
01:08:00,679 --> 01:08:04,009
that

1307
01:08:01,039 --> 01:08:11,599
but like you could maybe make something

1308
01:08:04,010 --> 01:08:13,040
that looks like this maybe right so

1309
01:08:11,599 --> 01:08:15,110
again what you wanted to write was this

1310
01:08:13,039 --> 01:08:16,460
in fact you didn't and you didn't even

1311
01:08:15,110 --> 01:08:18,588
need to write that yet

1312
01:08:16,460 --> 01:08:21,439
we haven't gotten there yet but instead

1313
01:08:18,588 --> 01:08:25,640
you have to write what I just wrote over

1314
01:08:21,439 --> 01:08:27,108
there right now furthermore in order to

1315
01:08:25,640 --> 01:08:29,029
get this to work you have to have at

1316
01:08:27,109 --> 01:08:30,620
least one virtual function because we

1317
01:08:29,029 --> 01:08:32,390
don't have a virtual function it won't

1318
01:08:30,619 --> 01:08:34,608
create the V table without the V table

1319
01:08:32,390 --> 01:08:36,710
there is no identifier in the struct

1320
01:08:34,609 --> 01:08:38,720
so you'd need to put one of these in

1321
01:08:36,710 --> 01:08:39,949
there regardless it could do nothing you

1322
01:08:38,720 --> 01:08:45,740
wouldn't they would wouldn't actually

1323
01:08:39,949 --> 01:08:48,679
have to exist right but you would have

1324
01:08:45,739 --> 01:08:50,568
to have one so here's the first attempt

1325
01:08:48,680 --> 01:08:52,099
at a clone call that's just trying to

1326
01:08:50,569 --> 01:08:54,710
clone this thing and it's like

1327
01:08:52,099 --> 01:08:56,569
well okay now every time I make one of

1328
01:08:54,710 --> 01:08:57,798
these I have to create a new one in the

1329
01:08:56,569 --> 01:09:00,889
new one in the new one and a new one in

1330
01:08:57,798 --> 01:09:02,060
the new one right and it's like oh my

1331
01:09:00,889 --> 01:09:03,650
lord

1332
01:09:02,060 --> 01:09:05,270
because remember none of these are doing

1333
01:09:03,649 --> 01:09:07,338
anything yet so the only one I even

1334
01:09:05,270 --> 01:09:09,710
needed the only one I actually want is

1335
01:09:07,338 --> 01:09:11,960
circle eventually once we have data

1336
01:09:09,710 --> 01:09:13,939
block right so this piece of code comes

1337
01:09:11,960 --> 01:09:16,759
down in here so that's the only one I

1338
01:09:13,939 --> 01:09:19,068
actually wanted but I have to write one

1339
01:09:16,759 --> 01:09:20,988
for every single one because I don't

1340
01:09:19,069 --> 01:09:22,369
know how big they have to be and I can't

1341
01:09:20,988 --> 01:09:29,689
get that information any other way so

1342
01:09:22,368 --> 01:09:32,778
off I go right so yeah great so it's

1343
01:09:29,689 --> 01:09:34,519
like I can't do that this is really ugly

1344
01:09:32,779 --> 01:09:36,020
so now what I'm going to do well another

1345
01:09:34,520 --> 01:09:39,290
thing that I could do is just make a

1346
01:09:36,020 --> 01:09:41,750
virtual function call for clone right so

1347
01:09:39,289 --> 01:09:44,210
maybe I say well okay I've got this

1348
01:09:41,750 --> 01:09:47,270
clone function it's going to be a

1349
01:09:44,210 --> 01:09:48,920
virtual function call and what it's

1350
01:09:47,270 --> 01:09:51,349
going to do is return the correct type

1351
01:09:48,920 --> 01:09:53,149
now in order to do that I need there to

1352
01:09:51,349 --> 01:09:54,469
be one of these in every single one of

1353
01:09:53,149 --> 01:09:59,689
these that's going to do the actual

1354
01:09:54,469 --> 01:10:00,770
cloning right so this goes away and now

1355
01:09:59,689 --> 01:10:02,658
I've got a way to clone that's going to

1356
01:10:00,770 --> 01:10:04,760
be in here but again I'm massively

1357
01:10:02,658 --> 01:10:07,848
remember this is all I should have had

1358
01:10:04,760 --> 01:10:10,849
to write but now I'm writing all of this

1359
01:10:07,849 --> 01:10:13,520
stuff so virtual shapes are clone what I

1360
01:10:10,849 --> 01:10:15,650
have to do here is you know create one

1361
01:10:13,520 --> 01:10:17,000
of these so you know if I was going to

1362
01:10:15,649 --> 01:10:21,379
do a push struct here I could but you

1363
01:10:17,000 --> 01:10:22,969
know C++ is allocator syntax is new so

1364
01:10:21,380 --> 01:10:25,810
you know the way you would see it in C++

1365
01:10:22,969 --> 01:10:25,810
is something like this

1366
01:10:32,579 --> 01:10:36,729
this pointer is just a pointer inside a

1367
01:10:35,260 --> 01:10:38,260
member function like this that points to

1368
01:10:36,729 --> 01:10:41,949
beyond we're talking about so this is

1369
01:10:38,260 --> 01:10:50,619
like passing in the shape right and this

1370
01:10:41,949 --> 01:10:53,260
just has to be in everything again

1371
01:10:50,619 --> 01:10:56,050
massive amounts of duplication I'm

1372
01:10:53,260 --> 01:10:57,640
typing a ton for no reason I'm typing

1373
01:10:56,050 --> 01:10:59,289
the same thing at least three times I

1374
01:10:57,640 --> 01:11:00,700
have to type if there were 12 of these I

1375
01:10:59,289 --> 01:11:02,350
have to type at 12 times instead of just

1376
01:11:00,699 --> 01:11:04,809
typing at once like I did before

1377
01:11:02,350 --> 01:11:07,530
again just strictly worse all the time

1378
01:11:04,810 --> 01:11:07,530
right

1379
01:11:08,229 --> 01:11:14,889
so that's why we start to get to this

1380
01:11:12,220 --> 01:11:16,840
ridiculousness here because this is an

1381
01:11:14,890 --> 01:11:18,789
example of how you might try to solve

1382
01:11:16,840 --> 01:11:20,739
this problem in C++ if you wanted

1383
01:11:18,789 --> 01:11:23,619
something that even slightly approaches

1384
01:11:20,739 --> 01:11:27,449
the cleanliness and simplicity of the

1385
01:11:23,619 --> 01:11:31,059
straightforward way to do it in C right

1386
01:11:27,449 --> 01:11:32,829
which is to say okay I know that I've

1387
01:11:31,060 --> 01:11:35,320
got a shape and I know this going to

1388
01:11:32,829 --> 01:11:36,909
have a virtual base clasp on it right

1389
01:11:35,319 --> 01:11:41,170
I'm sorry it no it's going to have a

1390
01:11:36,909 --> 01:11:43,809
virtual clone call on it like so now

1391
01:11:41,170 --> 01:11:46,300
they use this syntax here equals zero

1392
01:11:43,810 --> 01:11:48,039
what that means is I never want to clone

1393
01:11:46,300 --> 01:11:51,159
an actual shape that prevents you from

1394
01:11:48,039 --> 01:11:54,060
ever calling clone on something that was

1395
01:11:51,159 --> 01:11:56,079
just this shape just a shape struct

1396
01:11:54,060 --> 01:11:58,210
meaning it never had a derived class

1397
01:11:56,079 --> 01:12:00,279
begin with that's a way of preventing

1398
01:11:58,210 --> 01:12:01,869
you from ever using shape without a more

1399
01:12:00,279 --> 01:12:03,279
derived class so if you never want

1400
01:12:01,869 --> 01:12:04,539
anyone to really use one of these you

1401
01:12:03,279 --> 01:12:06,579
can put an equal zero on it like that

1402
01:12:04,539 --> 01:12:08,140
and if it has any of these equals zero

1403
01:12:06,579 --> 01:12:10,630
that means you can't actually derive

1404
01:12:08,140 --> 01:12:13,570
make one of these and when you derive a

1405
01:12:10,630 --> 01:12:15,640
class you have to supply one right

1406
01:12:13,569 --> 01:12:17,889
that's just basically a syntax that says

1407
01:12:15,640 --> 01:12:20,140
hey I'm going to be using derived

1408
01:12:17,890 --> 01:12:21,490
classes make sure that I'm always using

1409
01:12:20,140 --> 01:12:24,570
a derived class and make sure that it

1410
01:12:21,489 --> 01:12:25,779
always has one of these functions in it

1411
01:12:24,569 --> 01:12:27,729
all right

1412
01:12:25,779 --> 01:12:29,380
so this part alone doesn't really help

1413
01:12:27,729 --> 01:12:31,659
us because we still have to have it in

1414
01:12:29,380 --> 01:12:33,579
both of these but now what you can see

1415
01:12:31,659 --> 01:12:36,909
is if we wanted to take this code out

1416
01:12:33,579 --> 01:12:40,510
and actually share it what we can do is

1417
01:12:36,909 --> 01:12:42,939
use this bit right here so what I can

1418
01:12:40,510 --> 01:12:44,390
say is all right let's suppose that I

1419
01:12:42,939 --> 01:12:46,429
don't know what the derived class

1420
01:12:44,390 --> 01:12:49,850
so I'm just going to yeah call it

1421
01:12:46,430 --> 01:12:51,950
derived here like in the example then

1422
01:12:49,850 --> 01:12:58,220
what I'm going to do is I'm going to

1423
01:12:51,949 --> 01:13:06,199
create this sort of shape cloner which

1424
01:12:58,220 --> 01:13:08,260
is going to be sort of reverse so

1425
01:13:06,199 --> 01:13:11,359
amazing yeah

1426
01:13:08,260 --> 01:13:12,980
it puzzles the mind that this is that

1427
01:13:11,359 --> 01:13:15,949
this is the way that the people thought

1428
01:13:12,979 --> 01:13:17,809
to program but anyway I so anyway I'm

1429
01:13:15,949 --> 01:13:19,819
going to create the simple class derived

1430
01:13:17,810 --> 01:13:22,190
here and I'm going to create a shape

1431
01:13:19,819 --> 01:13:24,019
cloner I don't know why I put derived in

1432
01:13:22,189 --> 01:13:27,289
there which is basically a base class

1433
01:13:24,020 --> 01:13:30,170
that sits underneath this original base

1434
01:13:27,289 --> 01:13:32,779
class and just says ok I'm here just to

1435
01:13:30,170 --> 01:13:36,859
clone things that's all I do I have a

1436
01:13:32,779 --> 01:13:39,050
clone function on me I know that I'm

1437
01:13:36,859 --> 01:13:42,559
templatized on the type I should be

1438
01:13:39,050 --> 01:13:48,760
cloning so I can do that and I can do

1439
01:13:42,560 --> 01:13:48,760
the copy as well by doing the cast here

1440
01:13:49,060 --> 01:13:58,760
right like so so now when I make one of

1441
01:13:56,600 --> 01:14:01,640
these instead of inheriting from shape

1442
01:13:58,760 --> 01:14:06,699
instead I can inherit from shape cloner

1443
01:14:01,640 --> 01:14:06,700
and pass it myself

1444
01:14:08,770 --> 01:14:15,800
that forces this to generate the clone

1445
01:14:12,920 --> 01:14:17,390
function that's what I want it would

1446
01:14:15,800 --> 01:14:19,190
have had to type here what you saw me

1447
01:14:17,390 --> 01:14:26,650
type manually before as the virtual

1448
01:14:19,189 --> 01:14:34,059
function right so let me go back to the

1449
01:14:26,649 --> 01:14:37,138
originally asked question I which is

1450
01:14:34,060 --> 01:14:37,139
[Music]

1451
01:14:49,039 --> 01:14:56,649
where is it which is what do you think

1452
01:14:51,710 --> 01:14:59,390
about the CR T P to do polymorphism and

1453
01:14:56,649 --> 01:15:01,609
let me look at what you said okay I

1454
01:14:59,390 --> 01:15:04,610
didn't want to use virtual functions so

1455
01:15:01,609 --> 01:15:06,559
I found this I was super happy so this

1456
01:15:04,609 --> 01:15:09,920
is not specifically the case that you

1457
01:15:06,560 --> 01:15:13,600
were talking about then it sounds like

1458
01:15:09,920 --> 01:15:13,600
the case that you were talking about is

1459
01:15:14,020 --> 01:15:24,430
more for good no there it is

1460
01:15:31,060 --> 01:15:35,900
is more for this one unfortunately this

1461
01:15:34,250 --> 01:15:37,550
is a little bit bigger so well hopefully

1462
01:15:35,899 --> 01:15:40,039
you already can kind of see what I think

1463
01:15:37,550 --> 01:15:43,550
about this but let's take a look at this

1464
01:15:40,039 --> 01:15:46,300
this example as well then just I make

1465
01:15:43,550 --> 01:15:48,650
sure I know the actual use case here

1466
01:15:46,300 --> 01:15:54,980
alright so here we've got a class

1467
01:15:48,649 --> 01:15:56,779
printer the printer is has some member

1468
01:15:54,979 --> 01:15:58,399
functions those member functions are

1469
01:15:56,779 --> 01:16:00,829
templatized on the type that's going to

1470
01:15:58,399 --> 01:16:02,599
get printed right so you can see here

1471
01:16:00,829 --> 01:16:05,179
they're declaring a template the print

1472
01:16:02,600 --> 01:16:07,100
function takes the template thing and it

1473
01:16:05,179 --> 01:16:10,340
just does an i/o stream out of that

1474
01:16:07,100 --> 01:16:12,650
thing right for those of you who don't

1475
01:16:10,340 --> 01:16:15,020
know io stream this is going to be a

1476
01:16:12,649 --> 01:16:16,609
little bit confusing but let's see let's

1477
01:16:15,020 --> 01:16:18,050
see whether we actually decided to bet

1478
01:16:16,609 --> 01:16:18,589
or not it might be that that's not

1479
01:16:18,050 --> 01:16:20,750
relevant

1480
01:16:18,590 --> 01:16:23,650
so let me could say prints can be easily

1481
01:16:20,750 --> 01:16:26,659
changed printer my stream println

1482
01:16:23,649 --> 01:16:29,509
println yep so that's make sense right

1483
01:16:26,659 --> 01:16:31,639
you're just calling prints on prints

1484
01:16:29,510 --> 01:16:38,449
right you're calling this and since it

1485
01:16:31,640 --> 01:16:40,219
generally mmm oh yeah it's okay as

1486
01:16:38,448 --> 01:16:41,988
weather since it returns itself I'd say

1487
01:16:40,219 --> 01:16:44,390
it there it is so since it returns

1488
01:16:41,988 --> 01:16:46,849
itself each time you can keep calling

1489
01:16:44,390 --> 01:16:48,469
number functions on it right so that

1490
01:16:46,850 --> 01:16:51,530
says if we define the following derived

1491
01:16:48,469 --> 01:16:53,630
class which there it is this is the C

1492
01:16:51,529 --> 01:16:55,849
out printer there's the printer base

1493
01:16:53,630 --> 01:16:58,699
class so a C out printer can have all

1494
01:16:55,850 --> 01:17:01,310
this stuff called on it and we want to

1495
01:16:58,698 --> 01:17:03,738
have this set console color call that

1496
01:17:01,310 --> 01:17:05,570
sets the console color it's fine it says

1497
01:17:03,738 --> 01:17:08,569
we lose the concrete class as soon as we

1498
01:17:05,569 --> 01:17:10,759
invoke a function of the base and you

1499
01:17:08,569 --> 01:17:13,969
can see that happening here where you're

1500
01:17:10,760 --> 01:17:16,820
like hey I did a print but the print is

1501
01:17:13,969 --> 01:17:18,319
going to return printer which is bad so

1502
01:17:16,819 --> 01:17:24,049
I want to be able to do set console

1503
01:17:18,319 --> 01:17:26,299
color on that right and so off we you

1504
01:17:24,050 --> 01:17:28,400
know continue going here and we say well

1505
01:17:26,300 --> 01:17:29,360
okay what we could do you can kind of

1506
01:17:28,399 --> 01:17:31,460
see where we're going to go with this

1507
01:17:29,359 --> 01:17:33,738
right is if we just template eyes the

1508
01:17:31,460 --> 01:17:35,750
concrete printer printer class on

1509
01:17:33,738 --> 01:17:37,849
whatever the concrete class was what

1510
01:17:35,750 --> 01:17:44,409
everyone actually had then we can just

1511
01:17:37,850 --> 01:17:44,410
make it return that class right

1512
01:17:45,369 --> 01:17:51,800
so we just make it return that class

1513
01:17:48,409 --> 01:17:53,930
then when we are using this and we call

1514
01:17:51,800 --> 01:17:56,180
any of these print functions they will

1515
01:17:53,930 --> 01:17:58,190
actually return one of these see out the

1516
01:17:56,180 --> 01:18:01,659
correct pointer types you have printer

1517
01:17:58,189 --> 01:18:08,329
pointer type and off you go

1518
01:18:01,659 --> 01:18:11,059
right so the question is what do I think

1519
01:18:08,329 --> 01:18:13,760
of that and I mean the answer hopefully

1520
01:18:11,060 --> 01:18:21,260
should be obvious why would you ever do

1521
01:18:13,760 --> 01:18:25,070
such a thing when the simpler solution

1522
01:18:21,260 --> 01:18:26,900
is usually available right I mean the

1523
01:18:25,069 --> 01:18:29,630
question usually becomes what's the

1524
01:18:26,899 --> 01:18:32,509
specific instance you're looking to try

1525
01:18:29,630 --> 01:18:35,930
and solve because it's hard to give an

1526
01:18:32,510 --> 01:18:38,900
example like I could show you how to do

1527
01:18:35,930 --> 01:18:42,380
this particular example without making

1528
01:18:38,899 --> 01:18:46,189
it so convoluted but it's really kind of

1529
01:18:42,380 --> 01:18:48,650
hard to imagine this really being a

1530
01:18:46,189 --> 01:18:51,199
problem because chances are the better

1531
01:18:48,649 --> 01:18:53,649
solution if all you wanted to do was

1532
01:18:51,199 --> 01:18:56,689
have a console color is just make this

1533
01:18:53,649 --> 01:18:59,719
struct support setting a console color

1534
01:18:56,689 --> 01:19:03,009
right so you're probably not really

1535
01:18:59,720 --> 01:19:05,630
talking about something that mundane

1536
01:19:03,010 --> 01:19:08,060
especially because this thing probably

1537
01:19:05,630 --> 01:19:10,010
in a real world scenario needs to know

1538
01:19:08,060 --> 01:19:12,140
the console color for various operations

1539
01:19:10,010 --> 01:19:14,900
that's going to be doing anyway so this

1540
01:19:12,140 --> 01:19:17,690
is kind of - toy of an example to really

1541
01:19:14,899 --> 01:19:20,210
talk about probably and I'd have to know

1542
01:19:17,689 --> 01:19:21,439
what the actual real world example is if

1543
01:19:20,210 --> 01:19:23,180
someone was trying to solve before I

1544
01:19:21,439 --> 01:19:27,289
could say how I would prefer that it

1545
01:19:23,180 --> 01:19:28,610
would be solved but no I don't think

1546
01:19:27,289 --> 01:19:30,380
that's very good I don't think that's

1547
01:19:28,609 --> 01:19:34,119
very good for a lot of reasons number

1548
01:19:30,380 --> 01:19:37,069
one if you look at what's happening here

1549
01:19:34,119 --> 01:19:39,710
you're effectively duplicating a ton of

1550
01:19:37,069 --> 01:19:41,509
code for no actual purpose like the only

1551
01:19:39,710 --> 01:19:44,199
thing you were trying to do here right

1552
01:19:41,510 --> 01:19:47,449
is make it so that this syntax worked

1553
01:19:44,199 --> 01:19:49,099
and if you just stopped using this

1554
01:19:47,449 --> 01:19:51,829
syntax you wouldn't have had the problem

1555
01:19:49,100 --> 01:19:57,090
right all you would have had to have

1556
01:19:51,829 --> 01:19:59,340
done was you know call these as separate

1557
01:19:57,090 --> 01:20:05,610
lines with a semicolon and you wouldn't

1558
01:19:59,340 --> 01:20:07,860
have had the problem right so you know

1559
01:20:05,609 --> 01:20:11,549
even like this example it's just not

1560
01:20:07,859 --> 01:20:18,539
very good and I would have to know like

1561
01:20:11,550 --> 01:20:20,340
what a more realistic one is let's see

1562
01:20:18,539 --> 01:20:22,710
so the original questioner gave a

1563
01:20:20,340 --> 01:20:25,560
perhaps an example we can actually look

1564
01:20:22,710 --> 01:20:28,469
at my use case is I write a library and

1565
01:20:25,560 --> 01:20:29,639
I want users of the library to provide

1566
01:20:28,469 --> 01:20:32,880
their own strux

1567
01:20:29,639 --> 01:20:36,349
for me to do my library business on so I

1568
01:20:32,880 --> 01:20:42,029
need polymorphism one way or another

1569
01:20:36,349 --> 01:20:45,360
and since it's a simulation I want to

1570
01:20:42,029 --> 01:20:48,109
remove all of the runtime cost I can

1571
01:20:45,359 --> 01:20:48,109
incur

1572
01:21:03,439 --> 01:21:08,639
so be PAF I guess I'm not sure I

1573
01:21:06,600 --> 01:21:11,850
understand if you have a library that's

1574
01:21:08,640 --> 01:21:14,160
doing stuff on strux why can't they just

1575
01:21:11,850 --> 01:21:17,130
take pointers to those trucks and if the

1576
01:21:14,159 --> 01:21:23,789
user wants they can embed those trucks

1577
01:21:17,130 --> 01:21:25,619
in other things where does the

1578
01:21:23,789 --> 01:21:27,630
polymorphism come in are you trying is

1579
01:21:25,619 --> 01:21:29,010
it because you have to call them back at

1580
01:21:27,630 --> 01:21:35,880
like a well you said you didn't want

1581
01:21:29,010 --> 01:21:40,110
virtual functions so so what what is the

1582
01:21:35,880 --> 01:21:41,609
actual reason you can't just define the

1583
01:21:40,109 --> 01:21:43,589
structure that you operate on and then

1584
01:21:41,609 --> 01:21:45,929
they just embed those trucks in whatever

1585
01:21:43,590 --> 01:21:52,529
it is that they're using like what is

1586
01:21:45,930 --> 01:21:55,369
the what is the actual what's the

1587
01:21:52,529 --> 01:22:02,069
problem we're actually trying to solve

1588
01:21:55,369 --> 01:22:04,590
you have to call them back so yeah I

1589
01:22:02,069 --> 01:22:06,479
guess I would ask how is that call back

1590
01:22:04,590 --> 01:22:09,199
like what is an example of a way you

1591
01:22:06,479 --> 01:22:09,199
call them back

1592
01:22:16,800 --> 01:22:23,529
they define a game and I define in the

1593
01:22:20,349 --> 01:22:25,810
library a genetic programming framework

1594
01:22:23,529 --> 01:22:27,460
to post our generic programming flight

1595
01:22:25,810 --> 01:22:31,179
framework I assume that supposed to read

1596
01:22:27,460 --> 01:22:35,078
to find players that play well oh no

1597
01:22:31,179 --> 01:22:36,940
genetic Munich programming in in a

1598
01:22:35,078 --> 01:22:39,389
library a genetic programming framework

1599
01:22:36,939 --> 01:22:42,519
to find players that play well at them

1600
01:22:39,389 --> 01:22:47,739
well ok but so why does that require

1601
01:22:42,520 --> 01:22:50,170
calling anybody back though right like

1602
01:22:47,738 --> 01:22:53,549
could you just restructure the program

1603
01:22:50,170 --> 01:22:53,550
so that you don't call them back

1604
01:23:00,260 --> 01:23:07,519
um so I mean for example right like to

1605
01:23:05,658 --> 01:23:10,038
just to give a very simple example which

1606
01:23:07,519 --> 01:23:11,539
I totally recognize it's probably not

1607
01:23:10,038 --> 01:23:14,328
going to address the full complexity of

1608
01:23:11,538 --> 01:23:17,750
what you're asking but it you know to

1609
01:23:14,328 --> 01:23:19,908
take it on faith that I do tend to

1610
01:23:17,750 --> 01:23:21,408
address probably things that are

1611
01:23:19,908 --> 01:23:23,210
similarly complex and you usually find

1612
01:23:21,408 --> 01:23:28,609
that there's ways to architect them to

1613
01:23:23,210 --> 01:23:30,529
remove that particular problem but PPF

1614
01:23:28,609 --> 01:23:33,380
in particular I create trees as

1615
01:23:30,529 --> 01:23:35,569
expressions that contain okay so now we

1616
01:23:33,380 --> 01:23:37,190
have an exact example in particular I

1617
01:23:35,569 --> 01:23:39,408
create trees as expressions that contain

1618
01:23:37,189 --> 01:23:42,738
terminals that are defined by the game

1619
01:23:39,408 --> 01:23:46,339
which operate on the game state and then

1620
01:23:42,738 --> 01:23:50,089
evaluate those games that contain if

1621
01:23:46,340 --> 01:23:52,730
less equals etc as well as the game

1622
01:23:50,090 --> 01:23:55,069
terminals and then make players out of

1623
01:23:52,729 --> 01:24:00,859
random trees and determinance between

1624
01:23:55,069 --> 01:24:04,639
each other okay so so these players are

1625
01:24:00,859 --> 01:24:10,069
like making moods I assume right like so

1626
01:24:04,639 --> 01:24:16,670
your is the thing that you're trying to

1627
01:24:10,069 --> 01:24:19,279
store in the tree moves like ways of

1628
01:24:16,670 --> 01:24:21,489
making a move or is it the state of the

1629
01:24:19,279 --> 01:24:21,488
game

1630
01:24:29,859 --> 01:24:33,670
does that make sense meaning it sounds

1631
01:24:32,380 --> 01:24:37,739
like you're saying I've got something

1632
01:24:33,670 --> 01:24:37,739
like this you know

1633
01:25:07,560 --> 01:25:17,370
yeah okay so you've got something like

1634
01:25:14,720 --> 01:25:19,140
this it sounds like right where you've

1635
01:25:17,369 --> 01:25:20,939
got I've got some kind of a game

1636
01:25:19,140 --> 01:25:24,390
operator here and I'm building up like a

1637
01:25:20,939 --> 01:25:27,149
tree of these operations and I've got a

1638
01:25:24,390 --> 01:25:28,850
bunch of operation pipes that I'm you

1639
01:25:27,149 --> 01:25:32,309
know working with or something like this

1640
01:25:28,850 --> 01:25:34,110
and then what I want to do is I want to

1641
01:25:32,310 --> 01:25:37,110
be able to allow the user to define

1642
01:25:34,109 --> 01:25:40,319
their own game ops whatever those are

1643
01:25:37,109 --> 01:25:46,649
going to be and then I want to be able

1644
01:25:40,319 --> 01:25:48,539
to to do stuff on them right so the

1645
01:25:46,649 --> 01:25:51,199
first thing I would ask is can you just

1646
01:25:48,539 --> 01:25:51,199
do it like this

1647
01:26:11,109 --> 01:26:15,759
so can you just do it where you have a

1648
01:26:13,810 --> 01:26:17,289
thing called a game up the game up has

1649
01:26:15,760 --> 01:26:19,300
your left and right pointers you have a

1650
01:26:17,289 --> 01:26:23,470
type field in it right the type field

1651
01:26:19,300 --> 01:26:28,270
says what type of OP it is and off you

1652
01:26:23,470 --> 01:26:31,630
go right you your library starts it's

1653
01:26:28,270 --> 01:26:39,370
IDs at you know whatever we are here at

1654
01:26:31,630 --> 01:26:41,829
you know some very high number would

1655
01:26:39,369 --> 01:26:45,729
that be this would be 6 5 5 3 6 so

1656
01:26:41,829 --> 01:26:47,769
that's going to be 16 times that so 16

1657
01:26:45,729 --> 01:26:50,769
times 6 5 2 6 whatever it is it starts

1658
01:26:47,770 --> 01:26:52,150
somewhere here right and I'd say what

1659
01:26:50,770 --> 01:26:54,040
type of thing it is and then we can

1660
01:26:52,149 --> 01:26:57,399
allocate extra stuff off the back if we

1661
01:26:54,039 --> 01:26:59,649
want to down here right and off you go

1662
01:26:57,399 --> 01:27:01,899
everything in the library just looks at

1663
01:26:59,649 --> 01:27:03,279
the operation types here if it's not one

1664
01:27:01,899 --> 01:27:05,079
of these operation types you know that

1665
01:27:03,279 --> 01:27:14,130
it's a game op and you just call the

1666
01:27:05,079 --> 01:27:14,130
game back right

1667
01:27:26,229 --> 01:27:32,599
makes sense so now inside the game this

1668
01:27:29,960 --> 01:27:36,529
is this is the user of the library right

1669
01:27:32,599 --> 01:27:44,960
bees inside the game they just do like

1670
01:27:36,529 --> 01:27:49,960
game op types op type my thing op type

1671
01:27:44,960 --> 01:27:49,960
thing to write

1672
01:28:06,439 --> 01:28:17,329
right so you know again like separating

1673
01:28:12,699 --> 01:28:19,039
two concerns here so one concern is do I

1674
01:28:17,329 --> 01:28:21,859
want to write code that works well and

1675
01:28:19,039 --> 01:28:22,729
easy to use and easy to debug and so on

1676
01:28:21,859 --> 01:28:26,809
right

1677
01:28:22,729 --> 01:28:29,209
oh wait

1678
01:28:26,810 --> 01:28:31,490
BPF how would you pass the information

1679
01:28:29,210 --> 01:28:33,470
you need to create random operations to

1680
01:28:31,489 --> 01:28:36,139
the library from the user in this

1681
01:28:33,470 --> 01:28:38,740
framework well presumably if the

1682
01:28:36,140 --> 01:28:41,960
operations are specialized meaning the

1683
01:28:38,739 --> 01:28:45,679
library doesn't even know what they

1684
01:28:41,960 --> 01:29:00,680
should be then you know you'd presumably

1685
01:28:45,680 --> 01:29:04,190
just have like and you know you've

1686
01:29:00,680 --> 01:29:05,780
probably got library handle here or

1687
01:29:04,189 --> 01:29:07,669
something right where you're just

1688
01:29:05,779 --> 01:29:10,009
passing it but you know regret that's

1689
01:29:07,670 --> 01:29:11,539
neither here nor there so you know

1690
01:29:10,010 --> 01:29:13,280
you've got a thing it's like if you want

1691
01:29:11,539 --> 01:29:16,609
to call be able to call them back to

1692
01:29:13,279 --> 01:29:17,809
create a random operation then there

1693
01:29:16,609 --> 01:29:24,469
just is one of those and they do

1694
01:29:17,810 --> 01:29:25,880
something like this well you know I

1695
01:29:24,470 --> 01:29:28,030
would probably even provide a macro like

1696
01:29:25,880 --> 01:29:37,130
we do in handmade hero so it'd be like

1697
01:29:28,029 --> 01:29:49,579
your library name create up my op struct

1698
01:29:37,130 --> 01:29:52,250
I might even make it easier for them by

1699
01:29:49,579 --> 01:29:54,140
doing it that way and so what they would

1700
01:29:52,250 --> 01:29:58,399
do is they just say my obstruct here

1701
01:29:54,140 --> 01:30:01,789
right and you know they can do this any

1702
01:29:58,399 --> 01:30:04,159
way they want to you can if you want to

1703
01:30:01,789 --> 01:30:07,090
again you could use this syntax if you

1704
01:30:04,159 --> 01:30:09,439
like it to put the game up in there I

1705
01:30:07,090 --> 01:30:14,989
don't generally do that so I would

1706
01:30:09,439 --> 01:30:17,089
probably do that right but the other

1707
01:30:14,989 --> 01:30:19,579
thing you can do is if you want you can

1708
01:30:17,090 --> 01:30:20,300
leave out this part if they don't need

1709
01:30:19,579 --> 01:30:22,908
to access

1710
01:30:20,300 --> 01:30:26,960
it so instead what you can do is here

1711
01:30:22,908 --> 01:30:28,460
say all right let's say this was going

1712
01:30:26,960 --> 01:30:30,679
to be one of these I could just create

1713
01:30:28,460 --> 01:30:33,289
one of these it would set this would be

1714
01:30:30,679 --> 01:30:35,149
a macro that creates a game op with one

1715
01:30:33,289 --> 01:30:38,448
of these on the end of it and so only

1716
01:30:35,149 --> 01:30:39,799
the new stuff goes here and if this part

1717
01:30:38,448 --> 01:30:41,899
is meant to be opaque to them like

1718
01:30:39,800 --> 01:30:43,849
they're not supposed to touch it then

1719
01:30:41,899 --> 01:30:46,638
you just return them a pointer to just

1720
01:30:43,849 --> 01:30:48,590
the base part right you just return them

1721
01:30:46,639 --> 01:30:51,380
only a pointer to the part that comes

1722
01:30:48,590 --> 01:30:53,619
after this but you've allocated and off

1723
01:30:51,380 --> 01:30:53,618
you go

1724
01:31:09,760 --> 01:31:12,940
so yeah

1725
01:31:14,269 --> 01:31:22,099
there's a lot of ways so basically what

1726
01:31:17,510 --> 01:31:23,719
I would say is library design can be

1727
01:31:22,099 --> 01:31:26,389
tricky and it can be tricky for a couple

1728
01:31:23,719 --> 01:31:28,189
of reasons number one is it is tricky to

1729
01:31:26,389 --> 01:31:30,260
always think through what is the actual

1730
01:31:28,189 --> 01:31:33,948
easiest way to use this library what

1731
01:31:30,260 --> 01:31:41,059
reduces the number of things that you

1732
01:31:33,948 --> 01:31:42,678
know that actually makes it the right

1733
01:31:41,059 --> 01:31:44,059
decisions for making this code easy to

1734
01:31:42,679 --> 01:31:45,859
use right like I would even argue

1735
01:31:44,059 --> 01:31:46,940
probably at this point that I would have

1736
01:31:45,859 --> 01:31:49,038
probably tried to get rid of some of

1737
01:31:46,939 --> 01:31:50,658
these callbacks maybe this game process

1738
01:31:49,038 --> 01:31:52,248
call back is unavoidable but this create

1739
01:31:50,658 --> 01:31:57,138
random op call back is probably very

1740
01:31:52,248 --> 01:31:58,189
avoidable would be my my thought because

1741
01:31:57,139 --> 01:32:00,288
you probably could create them in

1742
01:31:58,189 --> 01:32:02,178
batches and do a loop which I would

1743
01:32:00,288 --> 01:32:04,460
think would probably be a better better

1744
01:32:02,179 --> 01:32:05,929
idea but that's that side point I try to

1745
01:32:04,460 --> 01:32:12,230
eliminate callbacks where possible I

1746
01:32:05,929 --> 01:32:14,710
guess is what I would say but ignoring

1747
01:32:12,229 --> 01:32:16,459
that part of it for for a moment

1748
01:32:14,710 --> 01:32:17,899
creating libraries are pretty difficult

1749
01:32:16,460 --> 01:32:19,189
because a it's very difficult to think

1750
01:32:17,899 --> 01:32:21,768
through all the architectural

1751
01:32:19,189 --> 01:32:24,348
possibilities and what actually is the

1752
01:32:21,769 --> 01:32:26,829
easiest to use and and requires the

1753
01:32:24,349 --> 01:32:28,819
least number of special-purpose things

1754
01:32:26,828 --> 01:32:30,529
you know one of the nice things about

1755
01:32:28,819 --> 01:32:32,779
stuff like codes like this - that people

1756
01:32:30,529 --> 01:32:34,399
often forget is that not only is it

1757
01:32:32,779 --> 01:32:35,929
simpler than having weird derived

1758
01:32:34,399 --> 01:32:37,129
classes and people trying to trace

1759
01:32:35,929 --> 01:32:38,300
through these virtual function calls

1760
01:32:37,130 --> 01:32:41,059
going through a library and all this

1761
01:32:38,300 --> 01:32:42,769
other stuff but it also works on

1762
01:32:41,059 --> 01:32:45,110
everything right it's like if somebody

1763
01:32:42,769 --> 01:32:47,269
wants to run this from Python they don't

1764
01:32:45,109 --> 01:32:50,058
suddenly have to you know have some

1765
01:32:47,269 --> 01:32:52,130
binding that does nutso stuff to make a

1766
01:32:50,059 --> 01:32:53,869
derived class jump through virtual

1767
01:32:52,130 --> 01:32:56,449
function called clone whatever work

1768
01:32:53,868 --> 01:32:57,920
right because if you just have a thing

1769
01:32:56,448 --> 01:32:59,689
that takes a pointer and receives a

1770
01:32:57,920 --> 01:33:04,940
pointer like everything can kind of just

1771
01:32:59,689 --> 01:33:06,288
do that it's not very difficult right so

1772
01:33:04,939 --> 01:33:10,248
it makes a lot easier to bind to other

1773
01:33:06,288 --> 01:33:12,828
languages but but anyway ignoring all of

1774
01:33:10,248 --> 01:33:14,719
that you do have a secondary problem

1775
01:33:12,828 --> 01:33:16,158
with creating a library that is a real

1776
01:33:14,719 --> 01:33:19,279
problem because you are creating a

1777
01:33:16,158 --> 01:33:22,368
library and that problem is that other

1778
01:33:19,279 --> 01:33:26,389
people have weird notions about what is

1779
01:33:22,368 --> 01:33:27,679
it is not effective right so it would be

1780
01:33:26,389 --> 01:33:29,869
great if

1781
01:33:27,680 --> 01:33:31,610
you work these things out and you know

1782
01:33:29,869 --> 01:33:33,199
maybe you don't like what I put here and

1783
01:33:31,609 --> 01:33:34,489
that's totally fine right I'm not saying

1784
01:33:33,199 --> 01:33:35,929
you have to do it this way I was just

1785
01:33:34,489 --> 01:33:37,189
trying to give you some other ideas and

1786
01:33:35,930 --> 01:33:38,570
I don't even know if that's where I

1787
01:33:37,189 --> 01:33:40,159
would land on it right I'd have to go

1788
01:33:38,569 --> 01:33:40,639
see your old library think about it for

1789
01:33:40,159 --> 01:33:42,590
a while

1790
01:33:40,640 --> 01:33:44,000
decide what it is that I really thought

1791
01:33:42,590 --> 01:33:49,369
was the right way to do it blah blah

1792
01:33:44,000 --> 01:33:50,989
blah right but it would be great if

1793
01:33:49,369 --> 01:33:52,699
after you did that if you did a good job

1794
01:33:50,989 --> 01:33:55,059
you put it out there and what people

1795
01:33:52,699 --> 01:33:57,829
were really going to evaluate it on was

1796
01:33:55,060 --> 01:34:00,230
how effective it really was to just

1797
01:33:57,829 --> 01:34:02,269
program that how few errors did they

1798
01:34:00,229 --> 01:34:05,029
have how quickly were they able to do it

1799
01:34:02,270 --> 01:34:06,170
how easy was it for them to read how

1800
01:34:05,029 --> 01:34:07,729
easy was it for them to use another

1801
01:34:06,170 --> 01:34:10,369
languages blah blah blah

1802
01:34:07,729 --> 01:34:12,289
right the problem is they're oftentimes

1803
01:34:10,369 --> 01:34:13,489
not going to do that so oftentimes

1804
01:34:12,289 --> 01:34:14,989
they're going to do is they're going to

1805
01:34:13,489 --> 01:34:17,989
come at it and they've got just this

1806
01:34:14,989 --> 01:34:20,149
weird attitude of like well if I don't

1807
01:34:17,989 --> 01:34:22,789
see lots of templates and base classes

1808
01:34:20,149 --> 01:34:25,009
and things or I see someone cast

1809
01:34:22,789 --> 01:34:28,189
something like if there's a cast

1810
01:34:25,010 --> 01:34:34,579
I just decodes awful it's terrible right

1811
01:34:28,189 --> 01:34:36,589
like this libraries sucks in reality

1812
01:34:34,579 --> 01:34:38,630
that's just poor programming but that's

1813
01:34:36,590 --> 01:34:39,289
just poor analysis they're not doing a

1814
01:34:38,630 --> 01:34:40,909
very good job

1815
01:34:39,289 --> 01:34:43,670
realistically assessing whether this

1816
01:34:40,909 --> 01:34:44,689
library is good or not and unfortunately

1817
01:34:43,670 --> 01:34:46,369
especially if you have a commercial

1818
01:34:44,689 --> 01:34:48,259
library there's not much you can really

1819
01:34:46,369 --> 01:34:52,099
do about that you're going at the cater

1820
01:34:48,260 --> 01:34:55,329
to certain Prix held ideas that people

1821
01:34:52,100 --> 01:34:55,329
have that may be erroneous

1822
01:34:55,779 --> 01:35:03,380
you know I it's it's just it's not

1823
01:35:00,979 --> 01:35:07,609
what's the what's the weird word they

1824
01:35:03,380 --> 01:35:09,289
use in politics a faith based versus

1825
01:35:07,609 --> 01:35:10,670
reality based or whatever you know

1826
01:35:09,289 --> 01:35:12,979
they've got these terms that they like

1827
01:35:10,670 --> 01:35:15,409
to throw around it's it's very much like

1828
01:35:12,979 --> 01:35:18,589
programming is a faith-based discipline

1829
01:35:15,409 --> 01:35:20,389
these days right people don't have any

1830
01:35:18,590 --> 01:35:22,340
objective metrics that they ever try to

1831
01:35:20,390 --> 01:35:25,010
employ they don't even really test

1832
01:35:22,340 --> 01:35:28,670
things to see which ones are more

1833
01:35:25,010 --> 01:35:31,400
effective they just have like a belief

1834
01:35:28,670 --> 01:35:33,109
in some things that they think either

1835
01:35:31,399 --> 01:35:34,639
someone told them we're good or they

1836
01:35:33,109 --> 01:35:37,250
somehow came to the conclusion were good

1837
01:35:34,640 --> 01:35:40,820
and they're not really willing to

1838
01:35:37,250 --> 01:35:41,578
evaluate them based on how effective it

1839
01:35:40,819 --> 01:35:49,469
actually was for

1840
01:35:41,578 --> 01:35:51,029
to use right and and so I don't pretend

1841
01:35:49,469 --> 01:35:58,349
that these are necessarily the right

1842
01:35:51,029 --> 01:36:00,588
answers even if they are the best so

1843
01:35:58,349 --> 01:36:00,588
yeah

1844
01:36:12,368 --> 01:36:16,878
BiPAP said the thing I liked about the

1845
01:36:14,599 --> 01:36:18,800
CRSP approach that it makes somewhat

1846
01:36:16,878 --> 01:36:20,748
clear what the interface is you have to

1847
01:36:18,800 --> 01:36:23,389
implement these methods and have this

1848
01:36:20,748 --> 01:36:27,590
data and I can do the generic tournament

1849
01:36:23,389 --> 01:36:28,788
job that is your base class that you can

1850
01:36:27,590 --> 01:36:30,409
comment and you can have multiple

1851
01:36:28,788 --> 01:36:34,368
customization points with multiple

1852
01:36:30,408 --> 01:36:36,438
template parameters uh yeah I mean like

1853
01:36:34,368 --> 01:36:41,719
I said I don't know does does it is it

1854
01:36:36,439 --> 01:36:45,349
really worth it though it just doesn't

1855
01:36:41,719 --> 01:36:47,359
seem very good because again like what

1856
01:36:45,349 --> 01:36:49,219
if you wanted to serialize this tree

1857
01:36:47,359 --> 01:36:53,709
like what if you want to save this to

1858
01:36:49,219 --> 01:36:59,179
disk how are you going to do it right

1859
01:36:53,708 --> 01:37:00,738
how are you going to do that I mean

1860
01:36:59,179 --> 01:37:06,649
you're going to need an enum in there at

1861
01:37:00,738 --> 01:37:09,468
some point I would argue and you know it

1862
01:37:06,649 --> 01:37:11,780
sounds like you already have one once

1863
01:37:09,469 --> 01:37:13,668
you have an enum you kind of don't need

1864
01:37:11,779 --> 01:37:15,349
virtual functions anymore right it you

1865
01:37:13,668 --> 01:37:16,550
can just write a switch statement and

1866
01:37:15,349 --> 01:37:21,529
almost always the switch statement is

1867
01:37:16,550 --> 01:37:24,409
going to be cleaner and the same is true

1868
01:37:21,529 --> 01:37:25,668
for the allocation you kind of want that

1869
01:37:24,408 --> 01:37:26,918
to be in your library because again if

1870
01:37:25,668 --> 01:37:29,569
you want to serialize you need to know

1871
01:37:26,918 --> 01:37:31,010
how big it is and you probably want to

1872
01:37:29,569 --> 01:37:32,509
be able to know that ahead of time even

1873
01:37:31,010 --> 01:37:33,979
if you have a callback that allows them

1874
01:37:32,510 --> 01:37:44,599
to finalize it in some way I don't know

1875
01:37:33,979 --> 01:37:46,668
it it's tough to say but I would just

1876
01:37:44,599 --> 01:37:48,609
say unless you it just doesn't seem like

1877
01:37:46,668 --> 01:37:53,059
the kind of situation that really calls

1878
01:37:48,609 --> 01:37:56,030
for inheritance at all in the c++ sense

1879
01:37:53,059 --> 01:37:59,029
because you can do it with you know data

1880
01:37:56,029 --> 01:38:02,529
style inheritance that's just going to

1881
01:37:59,029 --> 01:38:02,529
be more flexible most the time I think

1882
01:38:16,840 --> 01:38:21,520
and bps the other thing about it is it's

1883
01:38:19,960 --> 01:38:27,369
not even so much that you extend the

1884
01:38:21,520 --> 01:38:30,220
enum because really they are sort of

1885
01:38:27,369 --> 01:38:31,989
defining the enum right you make sure

1886
01:38:30,220 --> 01:38:33,880
your things aren't even in the way so

1887
01:38:31,989 --> 01:38:37,119
when they do it they don't even have to

1888
01:38:33,880 --> 01:38:38,890
know that you've got high order stuff up

1889
01:38:37,119 --> 01:38:40,779
there I mean you want to document that

1890
01:38:38,890 --> 01:38:48,280
in case they accidentally hit it somehow

1891
01:38:40,779 --> 01:38:50,199
but but basically they can just define

1892
01:38:48,279 --> 01:38:51,489
one of the things I try to encourage you

1893
01:38:50,199 --> 01:38:54,010
to do is when they're making libraries

1894
01:38:51,489 --> 01:38:56,979
switch the enum order around so that

1895
01:38:54,010 --> 01:38:59,590
you're using the high values and they're

1896
01:38:56,979 --> 01:39:02,979
using the letter values right so like

1897
01:38:59,590 --> 01:39:06,670
all your stuff has this bit set for

1898
01:39:02,979 --> 01:39:08,049
example now and theirs doesn't so you

1899
01:39:06,670 --> 01:39:09,579
can also tell the difference between one

1900
01:39:08,050 --> 01:39:17,800
of their types and yours by testing the

1901
01:39:09,579 --> 01:39:20,289
bit and that's really important because

1902
01:39:17,800 --> 01:39:22,630
again it takes out a step of

1903
01:39:20,289 --> 01:39:24,789
understanding they no longer have to

1904
01:39:22,630 --> 01:39:26,890
think about the fact that you also have

1905
01:39:24,789 --> 01:39:28,899
enums in there they can just act like

1906
01:39:26,890 --> 01:39:30,579
they're the only one who had the enums

1907
01:39:28,899 --> 01:39:34,409
as if they wrote the code themselves it

1908
01:39:30,579 --> 01:39:34,409
feels very comfortable for them right

1909
01:39:45,920 --> 01:39:50,460
BPF here's the thing if I want to

1910
01:39:48,899 --> 01:39:53,519
generate trees for different choices

1911
01:39:50,460 --> 01:39:56,250
that need different languages I use

1912
01:39:53,520 --> 01:39:58,920
multiple template parameters in your

1913
01:39:56,250 --> 01:40:09,180
framework I'd have to put the enums at

1914
01:39:58,920 --> 01:40:11,600
precise points I guess I guess I just

1915
01:40:09,180 --> 01:40:22,140
don't know what it means to say that

1916
01:40:11,600 --> 01:40:23,880
need different languages what does what

1917
01:40:22,140 --> 01:40:27,140
does this mean I'm sorry I just don't

1918
01:40:23,880 --> 01:40:27,140
think I understand the goal

1919
01:40:31,079 --> 01:40:36,779
by different choices I mean you could

1920
01:40:33,630 --> 01:40:38,640
have two choices for a game turn and you

1921
01:40:36,779 --> 01:40:41,039
might want to have trees that use

1922
01:40:38,640 --> 01:40:44,390
terminals that look at different aspects

1923
01:40:41,039 --> 01:40:44,390
of the game

1924
01:41:05,170 --> 01:41:11,149
BPF for example imagine a game where you

1925
01:41:07,970 --> 01:41:13,520
have the choice to play or pass and if

1926
01:41:11,149 --> 01:41:15,879
you decide to play you then have to make

1927
01:41:13,520 --> 01:41:15,880
a move

1928
01:41:16,569 --> 01:41:23,179
well but aren't you just talking about

1929
01:41:18,800 --> 01:41:25,279
game state-dependent operations like I

1930
01:41:23,180 --> 01:41:49,190
mean isn't that just something here that

1931
01:41:25,279 --> 01:41:52,210
would say this like are we not just

1932
01:41:49,189 --> 01:41:52,210
talking about that

1933
01:41:59,010 --> 01:42:04,590
or I mean another way to say it would be

1934
01:42:01,829 --> 01:42:07,340
if you just want the player to be able

1935
01:42:04,590 --> 01:42:09,750
to generate different random things

1936
01:42:07,340 --> 01:42:12,300
depending on what the state of the game

1937
01:42:09,750 --> 01:42:14,579
is then isn't that just something they

1938
01:42:12,300 --> 01:42:16,829
can do inside the random app callback if

1939
01:42:14,579 --> 01:42:19,399
you give them that information like why

1940
01:42:16,829 --> 01:42:22,289
do they have to have different enum

1941
01:42:19,399 --> 01:42:25,349
categories because who cares that's up

1942
01:42:22,289 --> 01:42:26,789
to them right like they are the ones who

1943
01:42:25,350 --> 01:42:28,350
know what their game state is and how

1944
01:42:26,789 --> 01:42:29,579
many permutations that might have and

1945
01:42:28,350 --> 01:42:32,600
which moves make sense from any

1946
01:42:29,579 --> 01:42:32,600
particular point right

1947
01:42:46,579 --> 01:42:55,170
well BPF why doesn't the player generate

1948
01:42:49,948 --> 01:42:57,839
the random number I mean shouldn't they

1949
01:42:55,170 --> 01:42:59,279
be the ones who wouldn't they be the

1950
01:42:57,840 --> 01:43:01,739
ones who would know from looking at the

1951
01:42:59,279 --> 01:43:04,159
game state which enums are even valid at

1952
01:43:01,738 --> 01:43:04,159
that time

1953
01:43:17,010 --> 01:43:20,600
I mean am I missing something there

1954
01:43:29,640 --> 01:43:34,610
I agree it means it's kind of difficult

1955
01:43:32,100 --> 01:43:38,340
for me to really know like what you know

1956
01:43:34,609 --> 01:43:40,139
asking design questions about stuff like

1957
01:43:38,340 --> 01:43:42,440
this is kind of hard because I not

1958
01:43:40,140 --> 01:43:47,340
familiar with the actual library right

1959
01:43:42,439 --> 01:43:53,399
so I'm trying to sort of guess what's

1960
01:43:47,340 --> 01:43:59,869
going on but I don't really know I guess

1961
01:43:53,399 --> 01:43:59,869
let me just make the general point so

1962
01:44:01,970 --> 01:44:09,480
typically speaking it's important to

1963
01:44:06,840 --> 01:44:14,390
pick the things your library does and

1964
01:44:09,479 --> 01:44:17,339
doesn't do based on whether or not

1965
01:44:14,390 --> 01:44:20,700
you're getting you're creating more work

1966
01:44:17,340 --> 01:44:23,819
for them to have you do it right so for

1967
01:44:20,699 --> 01:44:27,470
example let's I'm not saying this is

1968
01:44:23,819 --> 01:44:30,269
actually your case so this may not be

1969
01:44:27,470 --> 01:44:32,730
anything like what you're facing at the

1970
01:44:30,270 --> 01:44:37,350
moment let's hypothetically consider

1971
01:44:32,729 --> 01:44:41,189
just temporarily the case that I'm about

1972
01:44:37,350 --> 01:44:45,450
to describe so let's suppose that I do

1973
01:44:41,189 --> 01:44:46,829
have a thing where I've got a move tree

1974
01:44:45,449 --> 01:44:51,479
that I'm trying to create I'm kind of to

1975
01:44:46,829 --> 01:44:54,090
create moves or something not genetic

1976
01:44:51,479 --> 01:44:57,299
algorithms but just moves and at any

1977
01:44:54,090 --> 01:44:59,640
given time only some of these moves are

1978
01:44:57,300 --> 01:45:04,289
valid so I only want to create moves

1979
01:44:59,640 --> 01:45:05,510
that are valid in that context right so

1980
01:45:04,289 --> 01:45:07,890
there's two ways we can go about

1981
01:45:05,510 --> 01:45:10,860
attacking that problem for the library

1982
01:45:07,890 --> 01:45:13,140
for two broad categories one category

1983
01:45:10,859 --> 01:45:15,539
says let me try to communicate to the

1984
01:45:13,140 --> 01:45:19,670
library everything it needs to know in

1985
01:45:15,539 --> 01:45:23,519
order to correctly guess which moves are

1986
01:45:19,670 --> 01:45:26,819
possible at a particular point another

1987
01:45:23,520 --> 01:45:28,920
one is to say let's not do that let's

1988
01:45:26,819 --> 01:45:30,689
instead just give the game enough

1989
01:45:28,920 --> 01:45:32,930
information for it to make that decision

1990
01:45:30,689 --> 01:45:35,929
and let it make the decision itself

1991
01:45:32,930 --> 01:45:35,930
right

1992
01:45:37,590 --> 01:45:42,119
most of the time the second option is

1993
01:45:40,500 --> 01:45:44,158
actually going to be better because the

1994
01:45:42,118 --> 01:45:47,698
amount of work the person has to do to

1995
01:45:44,158 --> 01:45:51,269
sort of describe their game rules to the

1996
01:45:47,698 --> 01:45:53,969
library is probably way way more work

1997
01:45:51,270 --> 01:45:55,949
than just allowing them to inspect their

1998
01:45:53,969 --> 01:45:57,270
own game state structure and generate

1999
01:45:55,948 --> 01:46:00,479
what the moves are possible at that

2000
01:45:57,270 --> 01:46:02,429
point for you so flipping around the way

2001
01:46:00,479 --> 01:46:04,828
you look at doing it there is often

2002
01:46:02,429 --> 01:46:06,719
times the right way to go

2003
01:46:04,828 --> 01:46:08,308
you can even provide them utility

2004
01:46:06,719 --> 01:46:11,368
functions that make it so that they can

2005
01:46:08,309 --> 01:46:13,889
build their random stuff out of your

2006
01:46:11,368 --> 01:46:15,269
random picking utility functions so that

2007
01:46:13,889 --> 01:46:16,859
you can provide you can even make it

2008
01:46:15,270 --> 01:46:19,349
easier for them to write that second

2009
01:46:16,859 --> 01:46:21,808
case but focusing on making it easier to

2010
01:46:19,349 --> 01:46:23,099
write the second case is often a better

2011
01:46:21,809 --> 01:46:27,029
choice than trying to write the first

2012
01:46:23,099 --> 01:46:27,900
case right so I don't know how close to

2013
01:46:27,029 --> 01:46:29,099
that map's to anything that you're

2014
01:46:27,899 --> 01:46:30,899
actually trying to do but I'm just

2015
01:46:29,099 --> 01:46:32,099
trying to say it's good to be when

2016
01:46:30,899 --> 01:46:36,299
you're writing library it's good to be

2017
01:46:32,099 --> 01:46:37,980
in that mindset of am I actually just

2018
01:46:36,300 --> 01:46:40,219
having to use or do something here that

2019
01:46:37,979 --> 01:46:42,868
they shouldn't even have to be doing

2020
01:46:40,219 --> 01:46:45,239
because it'd be way easier for them to

2021
01:46:42,868 --> 01:46:48,960
just do some other equivalent operation

2022
01:46:45,238 --> 01:46:51,359
that works more cleanly and could I then

2023
01:46:48,960 --> 01:46:54,480
provide library functions that make that

2024
01:46:51,359 --> 01:46:56,848
even easier to do because chances are I

2025
01:46:54,479 --> 01:46:59,308
probably can like with random picking us

2026
01:46:56,849 --> 01:47:01,319
up like that could I provide a lot of

2027
01:46:59,309 --> 01:47:04,770
good functions that are like pick one

2028
01:47:01,319 --> 01:47:06,840
out of N or pick dependency this to this

2029
01:47:04,770 --> 01:47:09,989
and step right like can I just drive it

2030
01:47:06,840 --> 01:47:12,150
functionally up there and a lot of times

2031
01:47:09,988 --> 01:47:14,578
where you see that mistake it made is in

2032
01:47:12,149 --> 01:47:16,710
data versus procedure a lot of times

2033
01:47:14,578 --> 01:47:18,538
what people will do in an API is they'll

2034
01:47:16,710 --> 01:47:20,730
make the mistake of thinking that's the

2035
01:47:18,538 --> 01:47:24,359
easiest way to make something complex is

2036
01:47:20,729 --> 01:47:26,788
by having the user create a bunch of

2037
01:47:24,359 --> 01:47:28,979
interconnected data objects and then

2038
01:47:26,788 --> 01:47:30,840
have all these callbacks on those data

2039
01:47:28,979 --> 01:47:32,939
objects right kind of like sort of the

2040
01:47:30,840 --> 01:47:35,159
things you were describing here but

2041
01:47:32,939 --> 01:47:37,979
oftentimes the easier way is to flip

2042
01:47:35,158 --> 01:47:40,828
that process upside down and say let the

2043
01:47:37,979 --> 01:47:42,988
user stay in charge let them create the

2044
01:47:40,828 --> 01:47:44,880
tree whatever the tree is using

2045
01:47:42,988 --> 01:47:47,038
functions that I use to make it simpler

2046
01:47:44,880 --> 01:47:49,650
that way they can drive the entire

2047
01:47:47,038 --> 01:47:51,829
process from the outside the classic

2048
01:47:49,649 --> 01:47:56,869
example of this

2049
01:47:51,829 --> 01:48:07,100
by the way I can describe it to you is

2050
01:47:56,869 --> 01:48:07,099
let's call it node graph disaster zone

2051
01:48:08,930 --> 01:48:13,470
so the classic things you see happen in

2052
01:48:11,670 --> 01:48:16,579
API is all the time is there like and

2053
01:48:13,470 --> 01:48:20,900
and I'm talking about stuff like

2054
01:48:16,579 --> 01:48:25,140
anything that's like a V processing

2055
01:48:20,899 --> 01:48:28,319
based falls into this trap all the time

2056
01:48:25,140 --> 01:48:30,660
no idea why it's like catnip for AV

2057
01:48:28,319 --> 01:48:32,789
processing people and they're like ah

2058
01:48:30,659 --> 01:48:36,659
all right so here's what we're going to

2059
01:48:32,789 --> 01:48:39,659
do we're making an audio API right now

2060
01:48:36,659 --> 01:48:40,199
an Audio API is like the simplest API in

2061
01:48:39,659 --> 01:48:42,840
the world

2062
01:48:40,199 --> 01:48:47,779
there are no api's that are simpler than

2063
01:48:42,840 --> 01:48:50,190
audio like console IO maybe maybe but

2064
01:48:47,779 --> 01:48:52,469
console i/o and audio are basically the

2065
01:48:50,189 --> 01:48:55,500
same problem because console I on audio

2066
01:48:52,470 --> 01:48:59,789
are both about one-dimensional input

2067
01:48:55,500 --> 01:49:02,880
output streams that that process out of

2068
01:48:59,789 --> 01:49:05,250
fixed cell size so it's it's almost

2069
01:49:02,880 --> 01:49:07,409
impossible in an easier ap adinath so

2070
01:49:05,250 --> 01:49:08,489
these you know audio api is there should

2071
01:49:07,409 --> 01:49:09,899
have been one of them it should have

2072
01:49:08,489 --> 01:49:11,510
been perfectly clean and we should all

2073
01:49:09,899 --> 01:49:14,639
have but used it for the past 30 years

2074
01:49:11,510 --> 01:49:17,280
instead we get into this node graph

2075
01:49:14,640 --> 01:49:18,770
disaster zone where it's like all right

2076
01:49:17,279 --> 01:49:22,460
all right here's we're going to do

2077
01:49:18,770 --> 01:49:26,760
people are going to create these like

2078
01:49:22,460 --> 01:49:29,730
interconnected webs of data nodes with

2079
01:49:26,760 --> 01:49:33,119
procedure calls like maybe on them and

2080
01:49:29,729 --> 01:49:35,879
it's going to create this like filter

2081
01:49:33,119 --> 01:49:38,640
graph thing that'll have like alright

2082
01:49:35,880 --> 01:49:41,460
there's an input source filter node and

2083
01:49:38,640 --> 01:49:44,340
it goes into like the reverb filter node

2084
01:49:41,460 --> 01:49:46,920
that goes into the chorus node and then

2085
01:49:44,340 --> 01:49:48,510
like the multiplexer node and then

2086
01:49:46,920 --> 01:49:54,690
that's going to like looper and you're

2087
01:49:48,510 --> 01:49:56,880
just like okay you look at the simple

2088
01:49:54,689 --> 01:49:59,609
tutorial for one of these things right

2089
01:49:56,880 --> 01:50:04,889
and the correct API tutorial would be

2090
01:49:59,609 --> 01:50:08,219
something like play food

2091
01:50:04,889 --> 01:50:12,800
right this is the one I would write you

2092
01:50:08,219 --> 01:50:16,079
know and they've got this 15 page

2093
01:50:12,800 --> 01:50:20,900
example program simple example program

2094
01:50:16,079 --> 01:50:23,279
that's like create wave source you know

2095
01:50:20,899 --> 01:50:29,069
you know a equals create routes of a

2096
01:50:23,279 --> 01:50:33,029
arrows source equals file source you

2097
01:50:29,069 --> 01:50:34,889
know a source and you know maybe this

2098
01:50:33,029 --> 01:50:38,819
maybe this takes that food out wave

2099
01:50:34,889 --> 01:50:43,770
right and then they're like okay B

2100
01:50:38,819 --> 01:50:49,469
equals create speaker you know guest or

2101
01:50:43,770 --> 01:50:51,300
something and be like you know probably

2102
01:50:49,469 --> 01:50:55,198
more there's a see here which is create

2103
01:50:51,300 --> 01:50:58,560
you know resampler or something and it's

2104
01:50:55,198 --> 01:51:03,419
like a out you know or like for like set

2105
01:50:58,560 --> 01:51:08,400
out of a to be you know the resampler

2106
01:51:03,420 --> 01:51:10,230
and set the out of C to be the speaker

2107
01:51:08,399 --> 01:51:12,089
and like and you're just like and then

2108
01:51:10,229 --> 01:51:16,349
all at the end then it's like there's

2109
01:51:12,090 --> 01:51:19,279
something like go you know if it maybe

2110
01:51:16,350 --> 01:51:27,210
plays your wav file like 15 years later

2111
01:51:19,279 --> 01:51:32,189
right and it's just there's a fetishism

2112
01:51:27,210 --> 01:51:34,618
that somehow arises about creating what

2113
01:51:32,189 --> 01:51:38,339
you believe to be data structures that

2114
01:51:34,618 --> 01:51:40,349
are themselves programs and you never

2115
01:51:38,340 --> 01:51:42,929
realize that just writing the program

2116
01:51:40,350 --> 01:51:45,210
would have been better right if the

2117
01:51:42,929 --> 01:51:50,069
person could have just written you know

2118
01:51:45,210 --> 01:51:51,840
load lab reverb waves

2119
01:51:50,069 --> 01:51:56,750
whatever it is you know well it's not

2120
01:51:51,840 --> 01:52:03,469
web it's like a equals reverb a chorus a

2121
01:51:56,750 --> 01:52:07,469
B equals multiplex a you know out a

2122
01:52:03,469 --> 01:52:09,359
right this is trivial for someone to

2123
01:52:07,469 --> 01:52:10,618
understand and they don't have to move

2124
01:52:09,359 --> 01:52:12,599
thinking about the structure that was

2125
01:52:10,618 --> 01:52:15,960
created because it works in the order

2126
01:52:12,600 --> 01:52:18,390
that it's shown and it's 100% stateless

2127
01:52:15,960 --> 01:52:22,260
right so I never have to

2128
01:52:18,390 --> 01:52:25,140
worried about stuff like Oh God like

2129
01:52:22,260 --> 01:52:28,050
wait a minute what if I wanted to change

2130
01:52:25,140 --> 01:52:30,600
this later like how do i I don't even

2131
01:52:28,050 --> 01:52:32,039
know I don't remember I gotta save all

2132
01:52:30,600 --> 01:52:39,150
these object pointers on all over the

2133
01:52:32,039 --> 01:52:41,369
place right so it's just don't just the

2134
01:52:39,149 --> 01:52:43,379
general concept here is like don't turn

2135
01:52:41,369 --> 01:52:48,090
something that's just a set of function

2136
01:52:43,380 --> 01:52:50,159
calls that could be a procedure that the

2137
01:52:48,090 --> 01:52:51,779
user can make their own tree if they

2138
01:52:50,159 --> 01:52:54,029
wanted to store this tree they could

2139
01:52:51,779 --> 01:52:56,009
just make this tree themselves and then

2140
01:52:54,029 --> 01:52:57,539
it's their structs with their own types

2141
01:52:56,010 --> 01:52:59,250
that can throw all the extra data they

2142
01:52:57,539 --> 01:53:01,189
want they can rearrange them however

2143
01:52:59,250 --> 01:53:06,600
they want they can do whatever they want

2144
01:53:01,189 --> 01:53:09,269
don't enforce the tree on the user let

2145
01:53:06,600 --> 01:53:10,620
the user enforce the tree on you and you

2146
01:53:09,270 --> 01:53:15,440
just provide them the tools to build it

2147
01:53:10,619 --> 01:53:15,439
can often be much more powerful right

2148
01:53:28,368 --> 01:53:33,319
so yeah all right so I'm going to wind

2149
01:53:30,500 --> 01:53:40,789
it down we've done about two hours here

2150
01:53:33,319 --> 01:53:46,630
I think I'm going to close this all

2151
01:53:40,789 --> 01:53:46,630
right whoo

2152
01:53:50,020 --> 01:53:54,980
all right thank you everyone for joining

2153
01:53:52,220 --> 01:53:57,020
me for a handmade chat I apologize we

2154
01:53:54,979 --> 01:53:58,609
couldn't do any programming today but

2155
01:53:57,020 --> 01:54:01,490
like I said based on the crash yesterday

2156
01:53:58,609 --> 01:54:04,969
I think we're going to take the time to

2157
01:54:01,489 --> 01:54:06,380
reset up the streaming setup or rebuild

2158
01:54:04,970 --> 01:54:07,820
the streaming setup so that we have

2159
01:54:06,380 --> 01:54:09,260
something where we've got a machine

2160
01:54:07,819 --> 01:54:10,429
that's not doing the streaming that's

2161
01:54:09,260 --> 01:54:12,710
the one we're doing the programming on

2162
01:54:10,430 --> 01:54:15,140
so it can crash and go down and do all

2163
01:54:12,710 --> 01:54:16,909
sorts of things and I will try to make

2164
01:54:15,140 --> 01:54:20,180
sure that's a machine that can run a

2165
01:54:16,909 --> 01:54:21,529
graphical to a GPU debugger on it which

2166
01:54:20,180 --> 01:54:24,770
i think is pretty important and would

2167
01:54:21,529 --> 01:54:26,840
allow us to simplify our lives when

2168
01:54:24,770 --> 01:54:28,880
we're doing our lighting development so

2169
01:54:26,840 --> 01:54:30,739
we'll make that happen it'll also be a

2170
01:54:28,880 --> 01:54:32,840
modern graphics card so we can use

2171
01:54:30,739 --> 01:54:36,229
opengl 4.5 if we want to or anything

2172
01:54:32,840 --> 01:54:37,640
else that's so we decide to do although

2173
01:54:36,229 --> 01:54:39,019
I don't think we should have to it seems

2174
01:54:37,640 --> 01:54:41,960
like we're relatively stable at three

2175
01:54:39,020 --> 01:54:45,290
three I don't know baby we won't be but

2176
01:54:41,960 --> 01:54:47,449
anyway so we'll take care of that and I

2177
01:54:45,289 --> 01:54:49,310
will see you folks back here once that

2178
01:54:47,449 --> 01:54:51,920
is we built like I said early in the

2179
01:54:49,310 --> 01:54:54,230
stream I will be away this coming

2180
01:54:51,920 --> 01:54:56,989
weekend so I won't be doing a stream

2181
01:54:54,229 --> 01:54:59,899
anyway which gives us the perfect amount

2182
01:54:56,989 --> 01:55:01,399
of extra time to try and get machine

2183
01:54:59,899 --> 01:55:04,189
parts delivered for the new streaming

2184
01:55:01,399 --> 01:55:05,599
setup so we'll do that and about two

2185
01:55:04,189 --> 01:55:07,189
weeks from now hopefully unless

2186
01:55:05,600 --> 01:55:09,200
everything goes disastrously wrong I

2187
01:55:07,189 --> 01:55:11,809
will be back on stream with a new setup

2188
01:55:09,199 --> 01:55:14,779
that we can use to keep working on the

2189
01:55:11,810 --> 01:55:18,190
lighting we were trying to finish up

2190
01:55:14,779 --> 01:55:21,409
before so thanks for joining me today

2191
01:55:18,189 --> 01:55:22,789
I'll see everyone back then in the

2192
01:55:21,409 --> 01:55:24,949
meantime if you do want to play route

2193
01:55:22,789 --> 01:55:26,180
the code again handmade hero or you can

2194
01:55:24,949 --> 01:55:27,199
always peer to the game it comes with

2195
01:55:26,180 --> 01:55:29,300
the source code if you want to play

2196
01:55:27,199 --> 01:55:31,340
around with it if you do want to stay

2197
01:55:29,300 --> 01:55:32,630
up-to-date with other folks who are

2198
01:55:31,340 --> 01:55:36,050
working on the product and ask questions

2199
01:55:32,630 --> 01:55:37,369
we have a forum site for that patreon

2200
01:55:36,050 --> 01:55:38,690
page transport the video series the

2201
01:55:37,369 --> 01:55:40,039
schedule bot the tweets will schedule at

2202
01:55:38,689 --> 01:55:41,029
you so you'll know if we are in fact

2203
01:55:40,039 --> 01:55:43,909
going to be back two weeks from now the

2204
01:55:41,029 --> 01:55:45,319
schedule bot will say so and an episode

2205
01:55:43,909 --> 01:55:48,349
guide if you need to catch up on old

2206
01:55:45,319 --> 01:55:50,090
episode series that's it for this week

2207
01:55:48,350 --> 01:55:50,450
see everyone back here in about two

2208
01:55:50,090 --> 01:55:52,310
weeks

2209
01:55:50,449 --> 01:55:55,750
have fun programming the meantime and

2210
01:55:52,310 --> 01:55:55,750
I'll see you on the Internet

