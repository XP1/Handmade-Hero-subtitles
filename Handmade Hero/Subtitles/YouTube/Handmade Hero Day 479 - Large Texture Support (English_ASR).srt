1
00:00:00,000 --> 00:00:04,950
hello everyone and welcome back to

2
00:00:01,530 --> 00:00:06,509
handmade hero it has been well I suppose

3
00:00:04,950 --> 00:00:07,919
it hasn't really been any time for

4
00:00:06,509 --> 00:00:09,540
people who are watching this video on

5
00:00:07,918 --> 00:00:12,359
demand because they'll just see these in

6
00:00:09,539 --> 00:00:15,928
order but if you watched the series live

7
00:00:12,359 --> 00:00:18,809
then you know that we've been on break

8
00:00:15,929 --> 00:00:21,210
for a couple weeks and we're back now

9
00:00:18,809 --> 00:00:23,549
right before we went on break what we

10
00:00:21,210 --> 00:00:27,060
did is we actually isolated and

11
00:00:23,550 --> 00:00:28,589
optimized our renderer so it's actually

12
00:00:27,059 --> 00:00:30,719
a standalone component now you can use

13
00:00:28,589 --> 00:00:35,159
to make really anything you want that's

14
00:00:30,719 --> 00:00:39,269
a sprite renderer and we also went

15
00:00:35,159 --> 00:00:41,609
through the work of making it use sprite

16
00:00:39,270 --> 00:00:43,770
a rate well texture arrays to represent

17
00:00:41,609 --> 00:00:46,439
sprites which we did because it's a

18
00:00:43,770 --> 00:00:49,739
fairly widely supported feature that

19
00:00:46,439 --> 00:00:52,679
allows you to get a off of the single

20
00:00:49,738 --> 00:00:55,349
draw call per sprite kind of an issue

21
00:00:52,679 --> 00:00:57,210
that we had before when we just

22
00:00:55,350 --> 00:00:59,520
literally translated the renderer from a

23
00:00:57,210 --> 00:01:01,829
Safa renderer to a hardware render one

24
00:00:59,520 --> 00:01:03,719
of the problems you get is that you end

25
00:01:01,829 --> 00:01:05,549
up changing textures every drop call

26
00:01:03,719 --> 00:01:07,349
because every sprite is its own texture

27
00:01:05,549 --> 00:01:09,930
and that's just not really something

28
00:01:07,349 --> 00:01:11,879
that all video cards can support now

29
00:01:09,930 --> 00:01:14,729
like I said before there actually are

30
00:01:11,879 --> 00:01:18,000
plenty of cards that can changing

31
00:01:14,728 --> 00:01:20,219
textures per draw per quod issues

32
00:01:18,000 --> 00:01:22,909
actually pretty easy on higher-end cards

33
00:01:20,219 --> 00:01:25,289
the problem is that doesn't scale to all

34
00:01:22,909 --> 00:01:26,939
sorts of stuff so there's like intel

35
00:01:25,290 --> 00:01:29,159
chips that don't support it that are

36
00:01:26,938 --> 00:01:32,728
pretty common in the wild there's

37
00:01:29,159 --> 00:01:38,490
probably phone style hardware out there

38
00:01:32,728 --> 00:01:41,129
that you'd have trouble with so texture

39
00:01:38,489 --> 00:01:42,750
arrays is one way to kind of almost get

40
00:01:41,129 --> 00:01:44,759
the same benefits as being able to

41
00:01:42,750 --> 00:01:47,609
quickly change the texture pointer every

42
00:01:44,759 --> 00:01:53,009
primitive without actually using that

43
00:01:47,609 --> 00:01:55,019
feature which is not ubiquitous so just

44
00:01:53,009 --> 00:01:56,578
to refresh everyone's memory we ended up

45
00:01:55,019 --> 00:01:58,769
with some pretty nice results here and

46
00:01:56,578 --> 00:02:01,109
we've got like one more thing I think to

47
00:01:58,769 --> 00:02:03,899
do in the renderer before we're done but

48
00:02:01,109 --> 00:02:04,780
if we take again see I was working on

49
00:02:03,899 --> 00:02:06,820
the meow

50
00:02:04,780 --> 00:02:09,669
this is the only machine I have with a

51
00:02:06,819 --> 00:02:12,818
VX on it so I had to do some now hash or

52
00:02:09,669 --> 00:02:14,919
a cons particular machine yeah

53
00:02:12,818 --> 00:02:16,599
if for those of you don't know I posted

54
00:02:14,919 --> 00:02:18,030
meow hash on Friday as well which is

55
00:02:16,599 --> 00:02:21,370
pretty fun

56
00:02:18,030 --> 00:02:22,930
now hash is our the hash we now use at

57
00:02:21,370 --> 00:02:25,509
Molly rocket that I developed well

58
00:02:22,930 --> 00:02:29,020
handmade here it was off actually I just

59
00:02:25,509 --> 00:02:30,789
developed at this past week because I

60
00:02:29,020 --> 00:02:32,230
was looking for something to fix our

61
00:02:30,789 --> 00:02:34,329
slow hashing

62
00:02:32,229 --> 00:02:36,159
it's the fastest hash I think that there

63
00:02:34,330 --> 00:02:38,860
is right now I don't know that there's a

64
00:02:36,159 --> 00:02:43,180
faster hash out there that actually can

65
00:02:38,860 --> 00:02:46,239
pass all of a like all of the current

66
00:02:43,180 --> 00:02:48,040
hash tests like a SM hasher and

67
00:02:46,239 --> 00:02:50,349
practical collision tests like large

68
00:02:48,039 --> 00:02:52,209
datasets and verifying they don't

69
00:02:50,349 --> 00:02:54,849
collide it's pretty cool so check it out

70
00:02:52,209 --> 00:02:57,189
the source code is is licensed

71
00:02:54,849 --> 00:03:00,039
permissively and it's upon there's

72
00:02:57,189 --> 00:03:01,599
github for it here the entire thing is

73
00:03:00,039 --> 00:03:04,030
justin now hashed out h so if you're

74
00:03:01,599 --> 00:03:06,519
interested in fast hashing it's not

75
00:03:04,030 --> 00:03:09,189
cryptographic it's designed for data

76
00:03:06,519 --> 00:03:12,099
comparison so it's not the kind of thing

77
00:03:09,189 --> 00:03:13,799
you use for security it's the kind of

78
00:03:12,099 --> 00:03:16,930
thing used for like data deduplication

79
00:03:13,799 --> 00:03:18,430
but it's designed to hash huge blocks of

80
00:03:16,930 --> 00:03:20,739
data extremely quickly and it actually

81
00:03:18,430 --> 00:03:24,209
hashes it's one of the only hashes I'm

82
00:03:20,739 --> 00:03:28,150
aware of that hash is well higher than

83
00:03:24,209 --> 00:03:30,579
memory speed so if the data is in cache

84
00:03:28,150 --> 00:03:33,219
it actually hashes significantly faster

85
00:03:30,579 --> 00:03:35,109
than the speed of main memory whereas

86
00:03:33,219 --> 00:03:37,509
main memory is usually like an upper

87
00:03:35,109 --> 00:03:39,129
bound for most hashes they'll if things

88
00:03:37,509 --> 00:03:41,469
are in cache they don't hatch any faster

89
00:03:39,129 --> 00:03:44,709
meowww hash actually hashes even faster

90
00:03:41,469 --> 00:03:47,859
in cache than it does normally and it

91
00:03:44,709 --> 00:03:50,709
beats all the hashes that I've seen even

92
00:03:47,859 --> 00:03:52,989
at memory speeds because a lot of hashes

93
00:03:50,709 --> 00:03:59,879
can't quite hit memory speed but meow

94
00:03:52,989 --> 00:04:02,680
hash does it fully saturates anyway so

95
00:03:59,879 --> 00:04:05,469
what I was going to say is when we we

96
00:04:02,680 --> 00:04:09,430
left off we were we may look a little

97
00:04:05,469 --> 00:04:15,370
render or test here and this thing is

98
00:04:09,430 --> 00:04:17,798
just a oh all right well that's not a

99
00:04:15,370 --> 00:04:25,060
very good sign do we leave

100
00:04:17,798 --> 00:04:26,769
bug what's going on here did we I

101
00:04:25,060 --> 00:04:28,449
thought we left everything in a

102
00:04:26,769 --> 00:04:29,529
reasonable state did we did we totally

103
00:04:28,449 --> 00:04:32,158
cheese out or something

104
00:04:29,529 --> 00:04:32,158
what am I forgetting

105
00:04:40,668 --> 00:04:47,718
well I guess we've got some work to do

106
00:04:43,149 --> 00:04:53,179
apparently we made a change that we

107
00:04:47,718 --> 00:04:58,759
didn't run before we left last week is

108
00:04:53,180 --> 00:05:01,069
that true hmm well let's take a look all

109
00:04:58,759 --> 00:05:03,650
right never mind forget the recap we've

110
00:05:01,069 --> 00:05:05,210
got work to do folks that's weird we

111
00:05:03,649 --> 00:05:16,218
don't usually do that or at least I

112
00:05:05,209 --> 00:05:18,938
don't think we do let's compile and now

113
00:05:16,218 --> 00:05:28,310
it looks like we crash in this route oh

114
00:05:18,939 --> 00:05:28,930
hey someone wanna tell me what's going

115
00:05:28,310 --> 00:05:32,389
on here

116
00:05:28,930 --> 00:05:33,978
you know Visual Studio was updated in

117
00:05:32,389 --> 00:05:37,310
between the time we left and came back

118
00:05:33,978 --> 00:05:40,430
is this some kind of what's what's going

119
00:05:37,310 --> 00:05:41,899
on here someone tell me this is this is

120
00:05:40,430 --> 00:05:45,439
someone tell me there's an explanation

121
00:05:41,899 --> 00:05:51,038
for what just happened mm-hmm very

122
00:05:45,439 --> 00:05:51,039
grumpy right now very grumpy right now

123
00:05:52,269 --> 00:06:02,408
why were we crashing in OpenGL managed

124
00:05:55,879 --> 00:06:02,408
textures people what what's going on I

125
00:06:03,759 --> 00:06:08,810
mean I'm assuming the only way you could

126
00:06:06,168 --> 00:06:14,568
really have a crash here is if this

127
00:06:08,810 --> 00:06:16,939
OpenGL managed textures I mean all it's

128
00:06:14,569 --> 00:06:22,729
doing here is just passing two things in

129
00:06:16,939 --> 00:06:24,800
I'm not sure what really could have been

130
00:06:22,728 --> 00:06:29,870
the problem there

131
00:06:24,800 --> 00:06:35,899
I mean OpenGL managed textures is just a

132
00:06:29,870 --> 00:06:38,658
function right maybe it got well no I

133
00:06:35,899 --> 00:06:41,199
just looked at it didn't get in mind did

134
00:06:38,658 --> 00:06:41,199
it get in line

135
00:07:09,418 --> 00:07:18,038
yeah it looks like maybe it did all

136
00:07:13,060 --> 00:07:19,660
right hold on one second I mean it's

137
00:07:18,038 --> 00:07:22,120
really weird that we would crash like

138
00:07:19,660 --> 00:07:24,130
that and if you recompile it doesn't

139
00:07:22,120 --> 00:07:26,740
crash does not make a lot of sense I

140
00:07:24,129 --> 00:07:28,600
probably should have run that executable

141
00:07:26,740 --> 00:07:29,769
outside the debugger to see if it was

142
00:07:28,600 --> 00:07:45,129
the debugger that was doing something

143
00:07:29,769 --> 00:07:47,918
nasty there so this is the entirety of

144
00:07:45,129 --> 00:07:50,800
what OpenGL managed textures does right

145
00:07:47,918 --> 00:07:52,959
it just does a DQ OpenGL allocate and

146
00:07:50,800 --> 00:08:02,560
then in Q free that's the entirety of

147
00:07:52,959 --> 00:08:08,799
that process right so if we actually set

148
00:08:02,560 --> 00:08:11,160
a breakpoint in this line here and run

149
00:08:08,800 --> 00:08:11,160
to it

150
00:08:25,110 --> 00:08:28,930
yeah I'm not sure what's going on there

151
00:08:27,370 --> 00:08:30,610
cuz in theory that should just be

152
00:08:28,930 --> 00:08:33,418
calling up with genetics but it looks

153
00:08:30,610 --> 00:08:39,240
like it actually went ahead and

154
00:08:33,418 --> 00:08:44,519
rearranged this probably because of just

155
00:08:39,240 --> 00:08:46,840
being compiled with optimizations right

156
00:08:44,519 --> 00:08:48,669
so I'm guessing that if I compiled

157
00:08:46,840 --> 00:08:52,990
without optimizations on so it won't

158
00:08:48,669 --> 00:09:07,089
inline that code when I actually go here

159
00:08:52,990 --> 00:09:10,750
I'll actually jump into it yeah so so

160
00:09:07,090 --> 00:09:14,740
I'm not sure I'm not sure what we could

161
00:09:10,750 --> 00:09:14,950
have done wrong there that's gonna bug

162
00:09:14,740 --> 00:09:18,310
me

163
00:09:14,950 --> 00:09:20,379
I shouldn't destroy the executable I

164
00:09:18,309 --> 00:09:23,619
guess because we probably can't produce

165
00:09:20,379 --> 00:09:34,480
that particular executable again would

166
00:09:23,620 --> 00:09:37,509
be my guess well and this isn't

167
00:09:34,480 --> 00:09:44,200
multi-threaded at this point right I

168
00:09:37,509 --> 00:09:45,939
mean I don't think the initialization

169
00:09:44,200 --> 00:09:47,680
the initialization code just processes

170
00:09:45,940 --> 00:09:49,540
messages and doesn't ever call the

171
00:09:47,679 --> 00:09:54,809
render so it's really there are not two

172
00:09:49,539 --> 00:09:54,809
actually active threads as far as I know

173
00:09:59,490 --> 00:10:09,310
well all right I guess we'll have to

174
00:10:04,990 --> 00:10:11,889
postpone that till we see that crash

175
00:10:09,309 --> 00:10:13,659
happen again or assume that the debugger

176
00:10:11,889 --> 00:10:16,600
was doing something weird there I really

177
00:10:13,659 --> 00:10:20,579
don't know what that is and it was

178
00:10:16,600 --> 00:10:20,580
reliable it happened in both programs

179
00:10:21,179 --> 00:10:27,479
it happened in both handmade Hiro and in

180
00:10:24,549 --> 00:10:27,479
the standalone renderer

181
00:10:30,179 --> 00:10:33,838
you know I'm saying to you

182
00:10:45,320 --> 00:10:54,019
hmm well all right we're just gonna have

183
00:10:51,259 --> 00:10:55,370
to leave that for now anyway what I was

184
00:10:54,019 --> 00:10:57,078
going to say before we got really

185
00:10:55,370 --> 00:10:59,509
interrupted by that crash which I guess

186
00:10:57,078 --> 00:11:01,250
we don't really know why that would be

187
00:10:59,509 --> 00:11:04,850
happening because a fresh compile does

188
00:11:01,250 --> 00:11:09,649
not produce the bug and presumably these

189
00:11:04,850 --> 00:11:11,209
were the same build before all I was

190
00:11:09,649 --> 00:11:13,309
going to say is we got some pretty good

191
00:11:11,208 --> 00:11:17,838
results here there's only really one

192
00:11:13,309 --> 00:11:19,969
thing that's a little ugly about it but

193
00:11:17,839 --> 00:11:22,790
I think that's something we can leave

194
00:11:19,970 --> 00:11:25,009
for a little later on if you look at the

195
00:11:22,789 --> 00:11:26,899
render tests in handmade hero they both

196
00:11:25,009 --> 00:11:28,370
now get very good throughput so you can

197
00:11:26,899 --> 00:11:29,990
have lots and lots and lots of sprites

198
00:11:28,370 --> 00:11:32,750
well very good is not probably the right

199
00:11:29,990 --> 00:11:35,269
term adequate throughput for our needs

200
00:11:32,750 --> 00:11:37,578
rather than being held back so now we

201
00:11:35,269 --> 00:11:38,929
can just spam tons of grass out if we

202
00:11:37,578 --> 00:11:40,278
want to or do you know who knows what

203
00:11:38,929 --> 00:11:41,838
we're gonna want to do but here you can

204
00:11:40,278 --> 00:11:44,149
just see a test of just throwing a bunch

205
00:11:41,839 --> 00:11:45,350
of grass sprites and there's like

206
00:11:44,149 --> 00:11:48,110
hundreds and hundreds and hundreds them

207
00:11:45,350 --> 00:11:50,149
all over the place and it's fine that's

208
00:11:48,110 --> 00:11:52,129
what we want to make sure we can achieve

209
00:11:50,149 --> 00:11:54,049
right we don't want to be in situations

210
00:11:52,129 --> 00:11:55,429
where we have to worry about we put too

211
00:11:54,049 --> 00:11:59,659
many grass sprites out there or

212
00:11:55,429 --> 00:12:02,059
something so that was good results I'm

213
00:11:59,659 --> 00:12:04,219
glad we got that now handmade here us

214
00:12:02,059 --> 00:12:06,259
have to think about it so hard there are

215
00:12:04,220 --> 00:12:08,990
a few things left we probably want to do

216
00:12:06,259 --> 00:12:11,028
on the renderer that don't have much to

217
00:12:08,990 --> 00:12:12,620
do with the pulling it out part that

218
00:12:11,028 --> 00:12:14,720
part's pretty much done I don't think we

219
00:12:12,620 --> 00:12:18,948
have to really do anything else we got

220
00:12:14,720 --> 00:12:20,810
what we wanted out of that but now what

221
00:12:18,948 --> 00:12:23,750
we would like to do moving back over to

222
00:12:20,809 --> 00:12:26,659
handmade hero there are a couple of

223
00:12:23,750 --> 00:12:28,789
things that would be nice to do that we

224
00:12:26,659 --> 00:12:30,500
just haven't done in the renderer yet

225
00:12:28,789 --> 00:12:33,740
because we only just finished the that

226
00:12:30,500 --> 00:12:36,100
sort of using texture as part of it and

227
00:12:33,740 --> 00:12:38,539
that is first of all we no longer

228
00:12:36,100 --> 00:12:41,379
support large textures because

229
00:12:38,539 --> 00:12:45,708
everything has to fit inside the texture

230
00:12:41,379 --> 00:12:50,409
array so for example if we switch back

231
00:12:45,708 --> 00:12:54,018
to the cutscene which I've done here

232
00:12:50,409 --> 00:12:57,769
what will happen is that all of those

233
00:12:54,019 --> 00:12:59,089
textures we were going to use will all

234
00:12:57,769 --> 00:13:00,980
be trying to draw

235
00:12:59,089 --> 00:13:04,459
extras that are much too large or who

236
00:13:00,980 --> 00:13:06,589
knows what happened right and so yeah we

237
00:13:04,458 --> 00:13:09,409
can look here and see when we go to

238
00:13:06,589 --> 00:13:12,139
allocate the texture the problem that

239
00:13:09,409 --> 00:13:14,749
we're going to have is that the texture

240
00:13:12,139 --> 00:13:17,419
itself will not actually fit inside the

241
00:13:14,749 --> 00:13:20,629
texture array so what's going to happen

242
00:13:17,419 --> 00:13:21,948
here and I probably should compile in

243
00:13:20,629 --> 00:13:23,539
debug mode so we can step through this a

244
00:13:21,948 --> 00:13:26,808
little bit more cleanly but what's going

245
00:13:23,539 --> 00:13:30,528
to happen here is when we get down into

246
00:13:26,808 --> 00:13:33,948
the code that would put the texture into

247
00:13:30,528 --> 00:13:37,009
a texture array it can't because the

248
00:13:33,948 --> 00:13:39,919
texture is too large so what ends up

249
00:13:37,009 --> 00:13:42,350
happening is right here it's going to

250
00:13:39,919 --> 00:13:47,659
come into this routine it's going to ask

251
00:13:42,350 --> 00:13:50,360
for well it's gonna ask for you know oh

252
00:13:47,659 --> 00:13:52,698
I'll put it in texture index 45 like

253
00:13:50,360 --> 00:13:54,889
that's the slot in the texture array but

254
00:13:52,698 --> 00:13:57,109
the width and height are these big

255
00:13:54,889 --> 00:13:58,610
cutscene plates and so what's gonna

256
00:13:57,110 --> 00:14:02,329
happen is open gels gonna be like I

257
00:13:58,610 --> 00:14:05,028
can't put that into here because it's

258
00:14:02,328 --> 00:14:10,958
only 512 by 512 I can't put something

259
00:14:05,028 --> 00:14:10,958
that's 2345 by 1152 right

260
00:14:16,789 --> 00:14:25,769
so what we need is we need to have some

261
00:14:22,559 --> 00:14:27,929
way well okay there's a couple different

262
00:14:25,769 --> 00:14:30,509
ways you could approach this problem if

263
00:14:27,929 --> 00:14:33,929
our goal was to primarily be about

264
00:14:30,509 --> 00:14:36,509
drawing large textures so let's say that

265
00:14:33,929 --> 00:14:38,938
a cutscene was not the only time we were

266
00:14:36,509 --> 00:14:40,560
gonna do that and we had lots and lots

267
00:14:38,938 --> 00:14:43,068
and lots of things in the game they're

268
00:14:40,559 --> 00:14:47,099
all about drawing arbitrarily big stuff

269
00:14:43,068 --> 00:14:48,240
right if that were the case we'd

270
00:14:47,100 --> 00:14:50,759
probably want to do something where we

271
00:14:48,240 --> 00:14:54,600
break large images up into tiles and

272
00:14:50,759 --> 00:14:57,028
then reassemble the tiles right because

273
00:14:54,600 --> 00:14:59,159
we wouldn't want to break our nice clean

274
00:14:57,028 --> 00:15:02,519
render path that doesn't have to switch

275
00:14:59,159 --> 00:15:04,078
textures for that purpose right we would

276
00:15:02,519 --> 00:15:05,879
want to be able to just keep drawing the

277
00:15:04,078 --> 00:15:11,399
tiles everywhere and that would be much

278
00:15:05,879 --> 00:15:13,139
more powerful but we already know that

279
00:15:11,399 --> 00:15:16,409
the only times you really care about

280
00:15:13,139 --> 00:15:20,159
this there's like five or six textures

281
00:15:16,409 --> 00:15:22,500
total in five or six plates total being

282
00:15:20,159 --> 00:15:24,059
drawn on the screen so really we'd be

283
00:15:22,500 --> 00:15:25,649
creating an entire system to deal with

284
00:15:24,059 --> 00:15:27,088
something that really only happens once

285
00:15:25,649 --> 00:15:28,350
in a while and certainly isn't a

286
00:15:27,089 --> 00:15:31,139
performance bottleneck because there's

287
00:15:28,350 --> 00:15:33,659
only like six things on the screen so

288
00:15:31,139 --> 00:15:35,970
changing texture six times in the render

289
00:15:33,659 --> 00:15:39,269
is is free right it's not something we

290
00:15:35,970 --> 00:15:43,110
care about so what we should probably do

291
00:15:39,269 --> 00:15:46,438
here instead is just have a path that

292
00:15:43,110 --> 00:15:50,039
when we see large textures we handle

293
00:15:46,438 --> 00:15:52,588
them specially and let the card do its

294
00:15:50,039 --> 00:15:55,318
standard change over each time with

295
00:15:52,589 --> 00:15:57,990
those large texture calls right because

296
00:15:55,318 --> 00:16:01,860
we don't even have to detect it really

297
00:15:57,990 --> 00:16:04,259
we know when that's happening right we

298
00:16:01,860 --> 00:16:06,750
know that our cutscenes are the things

299
00:16:04,259 --> 00:16:08,550
that use them in our game does it so we

300
00:16:06,750 --> 00:16:10,139
don't even have to detect it we could

301
00:16:08,549 --> 00:16:13,919
because of the texture width and height

302
00:16:10,139 --> 00:16:15,870
are packed into the texture handle the

303
00:16:13,919 --> 00:16:17,370
way we did it so it's a nice convenient

304
00:16:15,870 --> 00:16:21,149
way for anyone who wants you to switch

305
00:16:17,370 --> 00:16:23,068
either way right but we don't even

306
00:16:21,149 --> 00:16:25,740
really have to do that if we wanted to

307
00:16:23,068 --> 00:16:28,169
we could just make a special call called

308
00:16:25,740 --> 00:16:30,269
cutscene plate that's a separate kind of

309
00:16:28,169 --> 00:16:33,559
render state

310
00:16:30,269 --> 00:16:36,029
and that could switch textures every

311
00:16:33,559 --> 00:16:39,479
primitive the way that we used to do it

312
00:16:36,029 --> 00:16:41,549
so we can just by forget the path and I

313
00:16:39,480 --> 00:16:45,060
think that's a much smarter option here

314
00:16:41,549 --> 00:16:48,329
because that's gonna let the card do the

315
00:16:45,059 --> 00:16:50,279
work for us in a more efficient way than

316
00:16:48,330 --> 00:16:52,770
if we were do it ourselves and so we

317
00:16:50,279 --> 00:16:54,839
just be slowing things down by going the

318
00:16:52,769 --> 00:17:00,539
other route I think and actually being

319
00:16:54,840 --> 00:17:06,420
counterproductive that's my assumption

320
00:17:00,539 --> 00:17:08,789
anyway so I think that's thing one we

321
00:17:06,420 --> 00:17:11,880
want to do there's one other thing we

322
00:17:08,789 --> 00:17:17,459
want to do and you can't really see it

323
00:17:11,880 --> 00:17:19,140
much here but if you look at what we're

324
00:17:17,459 --> 00:17:24,360
doing behind the scenes

325
00:17:19,140 --> 00:17:26,430
we are not mipmapping our sprites and we

326
00:17:24,359 --> 00:17:30,599
probably will want to MIT map our

327
00:17:26,430 --> 00:17:36,150
sprites what this means is that as the

328
00:17:30,599 --> 00:17:38,069
sprites scale up and down right the

329
00:17:36,150 --> 00:17:40,410
graphics card can only do by linear

330
00:17:38,069 --> 00:17:41,849
filtering I mean that's not true we

331
00:17:40,410 --> 00:17:43,560
could have it do much better filtering

332
00:17:41,849 --> 00:17:45,990
if you want to but in terms of the

333
00:17:43,559 --> 00:17:47,399
fastest possible drawing bilinear

334
00:17:45,990 --> 00:17:49,200
filtering is the thing that's on the

335
00:17:47,400 --> 00:17:50,940
fast path it can do that basically for

336
00:17:49,200 --> 00:17:53,549
free for us like bilinear filtering is

337
00:17:50,940 --> 00:17:57,740
more or less free bilinear filtering

338
00:17:53,549 --> 00:18:01,740
gets you a scale factor of two okay so

339
00:17:57,740 --> 00:18:05,279
if our sprites are 512 by 512 at maximum

340
00:18:01,740 --> 00:18:09,390
and when they render we could shrink

341
00:18:05,279 --> 00:18:12,869
them down to two by two to six anywhere

342
00:18:09,390 --> 00:18:14,250
between 512 by 512 and 26 by 26 the

343
00:18:12,869 --> 00:18:16,379
bilinear filtering because remember it

344
00:18:14,250 --> 00:18:18,420
blends between two pixels that's the

345
00:18:16,380 --> 00:18:21,120
having factor that would get down to

346
00:18:18,420 --> 00:18:23,130
every pixel represents two pixels in the

347
00:18:21,119 --> 00:18:26,729
original every pixel drawn is two pixels

348
00:18:23,130 --> 00:18:29,130
right there are 512 by 512 pixels 256 by

349
00:18:26,730 --> 00:18:32,400
256 as the size we're rendering so every

350
00:18:29,130 --> 00:18:33,630
single pixel we render corresponds to

351
00:18:32,400 --> 00:18:36,390
two texels

352
00:18:33,630 --> 00:18:38,010
or four texels right in x and y but in

353
00:18:36,390 --> 00:18:38,520
terms of what we're blending between

354
00:18:38,009 --> 00:18:42,690
right

355
00:18:38,519 --> 00:18:45,470
so for texels - left - - left - right -

356
00:18:42,690 --> 00:18:45,470
top to bottom

357
00:18:46,099 --> 00:18:53,969
so at that scale we would produce clean

358
00:18:50,519 --> 00:18:58,230
usable results what happens when we

359
00:18:53,970 --> 00:19:01,380
shrink below 256 by 36 is now every

360
00:18:58,230 --> 00:19:04,589
pixel we draw represents three or more

361
00:19:01,380 --> 00:19:07,350
texels worth of area in the original

362
00:19:04,589 --> 00:19:10,500
image because we will only filter by

363
00:19:07,349 --> 00:19:13,490
linearly we are missing some of the data

364
00:19:10,500 --> 00:19:16,259
and that's why you get that sparkly like

365
00:19:13,490 --> 00:19:19,829
weirdness going on when you shrink

366
00:19:16,259 --> 00:19:21,450
things down below that size now it's

367
00:19:19,829 --> 00:19:23,909
hard to see

368
00:19:21,450 --> 00:19:27,930
unfortunately because our renderer is

369
00:19:23,910 --> 00:19:32,820
actually pretty good and oh I should

370
00:19:27,930 --> 00:19:36,299
probably turn the rotation back on here

371
00:19:32,819 --> 00:19:37,889
our renderer is pretty darn good and so

372
00:19:36,299 --> 00:19:40,349
what ends up happening is that because

373
00:19:37,890 --> 00:19:43,650
we've done a lot of work to carefully

374
00:19:40,349 --> 00:19:47,490
use things like multi sampling and

375
00:19:43,650 --> 00:19:49,170
because you know we're very conscience

376
00:19:47,490 --> 00:19:52,049
it's about depth peeling and all this

377
00:19:49,170 --> 00:19:54,660
stuff what ends up happening is it's

378
00:19:52,049 --> 00:19:57,000
really hard to see that this is

379
00:19:54,660 --> 00:20:01,070
happening because we've got other things

380
00:19:57,000 --> 00:20:04,980
helping to eliminate those sort of

381
00:20:01,069 --> 00:20:07,589
jagged pieces but they're still there

382
00:20:04,980 --> 00:20:12,390
and if we turn off the multi sampling we

383
00:20:07,589 --> 00:20:14,069
would see it for sure and so we get into

384
00:20:12,390 --> 00:20:16,680
a situation where yet if we shrink

385
00:20:14,069 --> 00:20:19,019
things down enough they probably will

386
00:20:16,680 --> 00:20:23,370
start to show some objectionable

387
00:20:19,019 --> 00:20:25,710
artifacting and so because doing MIT

388
00:20:23,369 --> 00:20:28,109
maps is relatively free we probably

389
00:20:25,710 --> 00:20:30,120
should just do even at least a crappy

390
00:20:28,109 --> 00:20:32,639
version something that just does

391
00:20:30,119 --> 00:20:38,329
bilinear filtering when we submit the

392
00:20:32,640 --> 00:20:38,330
texture so that we can have reasonable

393
00:20:38,990 --> 00:20:48,450
quality for down scaling right and yeah

394
00:20:44,549 --> 00:20:51,960
again I don't it's it's hard to motivate

395
00:20:48,450 --> 00:20:55,110
because thanks to the fact that we have

396
00:20:51,960 --> 00:20:56,829
multi sampling turned on we may just

397
00:20:55,109 --> 00:20:59,678
never see it I mean

398
00:20:56,829 --> 00:21:04,028
I can motivate a different way which is

399
00:20:59,679 --> 00:21:06,909
that if you down sample then they'll be

400
00:21:04,028 --> 00:21:08,859
less texture footprint used when you in

401
00:21:06,909 --> 00:21:13,210
the texture cache when you actually go

402
00:21:08,859 --> 00:21:15,398
to draw those things and that could be a

403
00:21:13,210 --> 00:21:18,669
speed win for us I don't know it's hard

404
00:21:15,398 --> 00:21:21,459
to say so yeah sixth one that doesn't

405
00:21:18,669 --> 00:21:22,990
the other the much more pressing thing

406
00:21:21,460 --> 00:21:24,909
in case you can't tell is the cutscene

407
00:21:22,990 --> 00:21:26,759
issue because that one actually prevents

408
00:21:24,909 --> 00:21:29,470
our cutscene from rendering at all

409
00:21:26,759 --> 00:21:31,269
whereas this is a quality issue and as

410
00:21:29,470 --> 00:21:33,009
you saw it's a pretty hard quality issue

411
00:21:31,269 --> 00:21:34,960
to motivate because once you turn on

412
00:21:33,009 --> 00:21:37,210
because you have bilinear sampling you

413
00:21:34,960 --> 00:21:39,669
can shrink down by half and then because

414
00:21:37,210 --> 00:21:42,419
you have multi sampling you get an

415
00:21:39,669 --> 00:21:46,028
additional factor below that probably

416
00:21:42,419 --> 00:21:52,659
right because the multi sampling will

417
00:21:46,028 --> 00:21:54,638
clean a lot of that up to be honest with

418
00:21:52,659 --> 00:21:56,679
you i don't think it should be really

419
00:21:54,638 --> 00:21:58,178
cleaning it up that much so as i'm

420
00:21:56,679 --> 00:22:00,130
saying that i'm not sure why that's

421
00:21:58,179 --> 00:22:01,330
happening it's just the edges probably

422
00:22:00,130 --> 00:22:04,350
really that it would clean up but that's

423
00:22:01,329 --> 00:22:08,230
probably what you would mostly see i

424
00:22:04,349 --> 00:22:09,250
don't know i actually would have thought

425
00:22:08,230 --> 00:22:12,339
we would have seen it a little bit more

426
00:22:09,250 --> 00:22:13,990
so who knows hard to say i mean another

427
00:22:12,339 --> 00:22:15,548
thing that could be happening is maybe

428
00:22:13,990 --> 00:22:20,519
the car is just generating it maps for

429
00:22:15,548 --> 00:22:24,210
us because they can do that actually

430
00:22:20,519 --> 00:22:24,210
like for example

431
00:22:29,200 --> 00:22:36,700
let me see here sometimes there's things

432
00:22:32,990 --> 00:22:36,700
you can turn on that will just do that

433
00:22:37,240 --> 00:22:47,450
yeah like that for Schmitt Maps I'm not

434
00:22:45,829 --> 00:22:53,359
seeing it on here so maybe that doesn't

435
00:22:47,450 --> 00:22:55,279
happen anymore in the old days it did so

436
00:22:53,359 --> 00:22:56,929
I don't know we can do some tests to see

437
00:22:55,279 --> 00:22:58,970
so maybe we don't even really care about

438
00:22:56,930 --> 00:23:01,549
min maps which is kind of crazy that

439
00:22:58,970 --> 00:23:03,920
it's that high quality sampling and

440
00:23:01,549 --> 00:23:05,599
maybe the I mean the other thing I guess

441
00:23:03,920 --> 00:23:08,000
is maybe we're just not drawing things

442
00:23:05,599 --> 00:23:10,759
large enough so maybe a lot of them

443
00:23:08,000 --> 00:23:12,470
aren't being shrank past past double and

444
00:23:10,759 --> 00:23:18,980
if you don't shrink past double then

445
00:23:12,470 --> 00:23:22,789
you're okay right so yeah I don't know

446
00:23:18,980 --> 00:23:24,380
we'll go from there okay so let's start

447
00:23:22,789 --> 00:23:25,700
with the thing that actually we know

448
00:23:24,380 --> 00:23:27,230
makes a difference and then we can

449
00:23:25,700 --> 00:23:30,140
debate the other part of it a little bit

450
00:23:27,230 --> 00:23:32,690
later so if we go into handmade renderer

451
00:23:30,140 --> 00:23:35,660
OpenGL and we look at where we're

452
00:23:32,690 --> 00:23:39,170
actually submitting all of our draw

453
00:23:35,660 --> 00:23:42,759
calls right so we look at the the part

454
00:23:39,170 --> 00:23:42,759
here where we're actually doing like

455
00:23:43,990 --> 00:23:48,680
this

456
00:23:45,259 --> 00:23:50,269
render entry textured quads you can see

457
00:23:48,680 --> 00:23:52,580
the way this works is you know it sets

458
00:23:50,269 --> 00:23:55,009
the scissor rect up it looks whether or

459
00:23:52,579 --> 00:23:56,000
not means you death peeling and then

460
00:23:55,009 --> 00:23:59,779
once it's ready to go

461
00:23:56,000 --> 00:24:01,579
it just says all right go ahead and draw

462
00:23:59,779 --> 00:24:03,470
all the elements this is how we used to

463
00:24:01,579 --> 00:24:06,919
do it right and now we're gonna be like

464
00:24:03,470 --> 00:24:09,980
nad do it this way because we want to be

465
00:24:06,920 --> 00:24:11,960
able to just have everything drawn

466
00:24:09,980 --> 00:24:13,370
without the without the texture handles

467
00:24:11,960 --> 00:24:17,750
right because we're just going to use

468
00:24:13,369 --> 00:24:21,289
the indices that are baked in there so

469
00:24:17,750 --> 00:24:23,930
all I'm saying is that look because it's

470
00:24:21,289 --> 00:24:29,509
probably free for us to do so why don't

471
00:24:23,930 --> 00:24:32,600
we just make it so that we can still do

472
00:24:29,509 --> 00:24:35,960
this this texture switching each time

473
00:24:32,599 --> 00:24:40,639
and there's a pretty easy way we could

474
00:24:35,960 --> 00:24:41,269
probably do that right if we wanted to

475
00:24:40,640 --> 00:24:44,060
be max

476
00:24:41,269 --> 00:24:47,059
we piggy we could actually just use this

477
00:24:44,059 --> 00:24:51,619
and have the texture array be specified

478
00:24:47,059 --> 00:24:53,210
each time right so that way the texture

479
00:24:51,619 --> 00:24:56,029
that we're using to draw from would just

480
00:24:53,210 --> 00:24:58,970
be specified and then we could just

481
00:24:56,029 --> 00:25:02,059
issue multiples of these and and go from

482
00:24:58,970 --> 00:25:06,110
there now the reason that that's a

483
00:25:02,059 --> 00:25:07,429
little bit risky is because there's so

484
00:25:06,109 --> 00:25:10,219
much stuff here that you don't really

485
00:25:07,430 --> 00:25:11,600
need to do right like ideally we would

486
00:25:10,220 --> 00:25:13,250
want it set up the same way we had it

487
00:25:11,599 --> 00:25:16,039
before where we change textures each

488
00:25:13,250 --> 00:25:18,799
time so I'm a little reticent to do that

489
00:25:16,039 --> 00:25:22,190
and I think what might be better is if

490
00:25:18,799 --> 00:25:24,740
we just look at the renderer itself the

491
00:25:22,190 --> 00:25:26,750
way that it specifies this stuff you can

492
00:25:24,740 --> 00:25:29,210
see that the like the textured claws

493
00:25:26,750 --> 00:25:31,460
that we send down we're sending down

494
00:25:29,210 --> 00:25:35,450
this set up that we're setting down this

495
00:25:31,460 --> 00:25:38,269
information what we could do is just say

496
00:25:35,450 --> 00:25:40,730
look why don't we still specify a

497
00:25:38,269 --> 00:25:45,230
texture array like let's just still send

498
00:25:40,730 --> 00:25:49,549
down an array of textures and we'll just

499
00:25:45,230 --> 00:25:52,039
set that pointer to either zero in the

500
00:25:49,549 --> 00:25:53,960
case that we currently have where we

501
00:25:52,039 --> 00:25:58,579
just want to use the texture array and

502
00:25:53,960 --> 00:26:01,400
draw a batch or we set it to non zero

503
00:25:58,579 --> 00:26:03,769
and point to one texture per primitive

504
00:26:01,400 --> 00:26:08,930
and then draw the primitives the way we

505
00:26:03,769 --> 00:26:11,389
used to be drawing them that seems

506
00:26:08,930 --> 00:26:13,580
compelling to me because that allows us

507
00:26:11,390 --> 00:26:15,770
to then have all of the set up be

508
00:26:13,579 --> 00:26:18,679
amortized so the cut scene can still

509
00:26:15,769 --> 00:26:21,710
draw everything in one batch it just has

510
00:26:18,680 --> 00:26:24,820
to issue multiple draw calls but it can

511
00:26:21,710 --> 00:26:27,559
amortize a set-up cost and then the

512
00:26:24,819 --> 00:26:29,779
sprite path can do it is it's doing now

513
00:26:27,559 --> 00:26:32,299
where not only is it amortized a setup

514
00:26:29,779 --> 00:26:34,670
but it actually does a single dispatch

515
00:26:32,299 --> 00:26:38,329
for the entire batch without having to

516
00:26:34,670 --> 00:26:41,330
do multiple dispatches right so that

517
00:26:38,329 --> 00:26:44,990
seems pretty good to me

518
00:26:41,329 --> 00:26:50,750
I think that's the way I would like to

519
00:26:44,990 --> 00:26:53,359
go with it so yeah so what I'm gonna do

520
00:26:50,750 --> 00:26:54,579
here is say alright let's say that

521
00:26:53,359 --> 00:26:58,538
there's something here like

522
00:26:54,579 --> 00:27:01,808
texture pointer we've got the concept of

523
00:26:58,538 --> 00:27:03,579
a renderer texture pointer and if I

524
00:27:01,808 --> 00:27:05,168
remember correctly that's sort of

525
00:27:03,579 --> 00:27:09,490
something that we have in here right

526
00:27:05,169 --> 00:27:12,820
this renderer texture and so we can just

527
00:27:09,490 --> 00:27:14,679
use this stuff that's here again and say

528
00:27:12,819 --> 00:27:17,619
look there's renderer textures that are

529
00:27:14,679 --> 00:27:19,179
special we'll deal with that somehow but

530
00:27:17,619 --> 00:27:23,459
basically all you really need to know is

531
00:27:19,179 --> 00:27:26,679
look there can be a renderer texture

532
00:27:23,460 --> 00:27:29,769
specified in here which is texture array

533
00:27:26,679 --> 00:27:35,110
and this let's just be look texture

534
00:27:29,769 --> 00:27:39,159
array is zero if and I just let me call

535
00:27:35,109 --> 00:27:46,359
it textures textures is zero if using

536
00:27:39,159 --> 00:27:50,620
the default texture array single batch

537
00:27:46,359 --> 00:28:02,859
render textures points to one texture

538
00:27:50,619 --> 00:28:06,158
per quad if not right

539
00:28:02,859 --> 00:28:09,490
and so then we could do here is say well

540
00:28:06,159 --> 00:28:12,490
let's go ahead and do an if and see

541
00:28:09,490 --> 00:28:16,808
which one we actually have so when we

542
00:28:12,490 --> 00:28:18,940
come in here and we get the and we get

543
00:28:16,808 --> 00:28:21,158
the entry out that will have this

544
00:28:18,940 --> 00:28:25,149
pointer and we can just switch on it so

545
00:28:21,159 --> 00:28:29,080
we can say look if this looks like it's

546
00:28:25,148 --> 00:28:32,109
felt textures properly if we have one of

547
00:28:29,079 --> 00:28:36,460
these pointers then we need to do the

548
00:28:32,109 --> 00:28:39,939
old-school dispatch right and if not

549
00:28:36,460 --> 00:28:42,329
then we can do the faster nice dispatch

550
00:28:39,940 --> 00:28:42,330
right

551
00:28:54,680 --> 00:29:08,789
so something like this so all we need to

552
00:29:06,720 --> 00:29:11,279
do now is figure out a good way to

553
00:29:08,789 --> 00:29:13,769
communicate those textures through and

554
00:29:11,279 --> 00:29:17,490
special case them so when someone asks

555
00:29:13,769 --> 00:29:20,069
for a texture that's going to be large

556
00:29:17,490 --> 00:29:22,109
they get back a special handle that's

557
00:29:20,069 --> 00:29:25,230
you know in some little pool that we

558
00:29:22,109 --> 00:29:27,629
reuse and those are for large textures

559
00:29:25,230 --> 00:29:31,230
only in the cutscenes and then we've

560
00:29:27,630 --> 00:29:33,090
gone a separate case where we handle the

561
00:29:31,230 --> 00:29:35,819
texture of a fast path and we just

562
00:29:33,089 --> 00:29:38,519
switch between those as necessary so I

563
00:29:35,819 --> 00:29:40,169
think that's a good way to go now we

564
00:29:38,519 --> 00:29:42,839
need to make sure we can draw the same

565
00:29:40,170 --> 00:29:45,450
way with both of these so you can kind

566
00:29:42,839 --> 00:29:48,209
of see here like we want to do the same

567
00:29:45,450 --> 00:29:51,779
sort of stuff here since we're looking

568
00:29:48,210 --> 00:29:53,490
at indices we need to make sure that all

569
00:29:51,779 --> 00:29:55,109
this it looks like we did it looks like

570
00:29:53,490 --> 00:29:56,400
we updated this routine actually to use

571
00:29:55,109 --> 00:29:59,219
indices so it seems like everything's

572
00:29:56,400 --> 00:30:03,150
actually set so really the only thing we

573
00:29:59,220 --> 00:30:04,500
have to do is just look here at what's

574
00:30:03,150 --> 00:30:07,370
going on maybe I'll call it the same

575
00:30:04,500 --> 00:30:11,460
thing that we were sort of client before

576
00:30:07,369 --> 00:30:14,549
like that and that way we can just say

577
00:30:11,460 --> 00:30:17,940
all right whichever one we're going to

578
00:30:14,549 --> 00:30:20,879
do we'll grab it out of here and then

579
00:30:17,940 --> 00:30:24,090
we'll bind it and go now when we grab

580
00:30:20,880 --> 00:30:27,330
this rendered texture out there's going

581
00:30:24,089 --> 00:30:30,149
to be an index in it and that index in

582
00:30:27,329 --> 00:30:33,509
this case we could just we can just pack

583
00:30:30,150 --> 00:30:37,530
the actual texture handle from OpenGL

584
00:30:33,509 --> 00:30:40,890
into that index that should just work I

585
00:30:37,529 --> 00:30:44,789
think I can't think of a reason why it

586
00:30:40,890 --> 00:30:45,210
wouldn't and so I think we can just go

587
00:30:44,789 --> 00:30:48,000
with that

588
00:30:45,210 --> 00:30:51,150
I think that will be sufficient so

589
00:30:48,000 --> 00:30:53,430
really you can see very simple here it's

590
00:30:51,150 --> 00:30:55,650
really easy for us to handle this to Bay

591
00:30:53,430 --> 00:30:57,180
dispatch so I think this is again just

592
00:30:55,650 --> 00:30:59,460
getting good feeling about that decision

593
00:30:57,180 --> 00:31:00,840
it seems like a really simple way to

594
00:30:59,460 --> 00:31:02,850
handle this one special case

595
00:31:00,839 --> 00:31:05,519
again it's not the bulk of our rendering

596
00:31:02,849 --> 00:31:07,319
we don't want to contort our render path

597
00:31:05,519 --> 00:31:09,119
a bunch to deal with it so you want to

598
00:31:07,319 --> 00:31:11,759
kind of have the easiest possible way to

599
00:31:09,119 --> 00:31:13,949
just shunt those special large texture

600
00:31:11,759 --> 00:31:16,230
calls off to the side and try not to

601
00:31:13,950 --> 00:31:18,569
make them ruin any of the sort of

602
00:31:16,230 --> 00:31:20,130
mainstream high-throughput rendering

603
00:31:18,569 --> 00:31:21,689
that we need for the in-game stuff

604
00:31:20,130 --> 00:31:23,400
because it's just for the cutscenes and

605
00:31:21,690 --> 00:31:36,450
they're very simple they're just a few

606
00:31:23,400 --> 00:31:40,230
layers alright alright so what we need

607
00:31:36,450 --> 00:31:45,720
to do now is actually figure out how to

608
00:31:40,230 --> 00:31:50,069
get this array set up and ready in the

609
00:31:45,720 --> 00:31:52,829
case where we need it right so there's

610
00:31:50,069 --> 00:31:54,869
two parts to that one is detecting these

611
00:31:52,829 --> 00:32:00,678
textures that need special treatment and

612
00:31:54,869 --> 00:32:03,709
doing something with them and two is

613
00:32:00,679 --> 00:32:07,320
actually having space to put this array

614
00:32:03,710 --> 00:32:11,149
so that we actually can use it right we

615
00:32:07,319 --> 00:32:14,639
need some way of dealing with it there

616
00:32:11,148 --> 00:32:16,889
so there's a couple ways we can do this

617
00:32:14,640 --> 00:32:20,250
I'm not sure exactly how we want to do

618
00:32:16,890 --> 00:32:23,190
it I'll kind of just start feeling my

619
00:32:20,250 --> 00:32:25,339
way through it and we'll let it shake

620
00:32:23,190 --> 00:32:27,570
out to wherever it's going to shake out

621
00:32:25,339 --> 00:32:29,278
since we know this is always going to be

622
00:32:27,569 --> 00:32:34,980
a small number of textures we're talking

623
00:32:29,278 --> 00:32:40,109
about like eight 16 textures tops I mean

624
00:32:34,980 --> 00:32:42,349
I think let's let's actually get a bead

625
00:32:40,109 --> 00:32:42,349
on that

626
00:32:44,659 --> 00:32:50,690
I mean it looks like if these are all of

627
00:32:48,079 --> 00:32:54,528
our cutscenes that we sort of threw in

628
00:32:50,690 --> 00:33:00,200
there right one two three four five six

629
00:32:54,528 --> 00:33:02,479
seven eight is the highest so we're

630
00:33:00,200 --> 00:33:05,090
talking about 8 texture handles total

631
00:33:02,479 --> 00:33:07,340
right so what we could very easily do is

632
00:33:05,089 --> 00:33:10,668
allocate a small pool let's say 16

633
00:33:07,339 --> 00:33:11,868
texture handles or something and we

634
00:33:10,669 --> 00:33:13,580
could just go through them in like a

635
00:33:11,868 --> 00:33:15,098
wrap almost a round robin fashion or

636
00:33:13,579 --> 00:33:18,710
something equally crappy

637
00:33:15,098 --> 00:33:21,558
would probably get us by possibly even

638
00:33:18,710 --> 00:33:23,479
just to ship like it may never get more

639
00:33:21,558 --> 00:33:26,058
complicated than that because again like

640
00:33:23,479 --> 00:33:28,009
we only care about this in this specific

641
00:33:26,058 --> 00:33:29,118
case so maybe we'll care about it more

642
00:33:28,009 --> 00:33:31,999
later and wouldn't have to do a better

643
00:33:29,118 --> 00:33:32,658
scheme if it turns out that we do

644
00:33:31,999 --> 00:33:36,108
something else

645
00:33:32,659 --> 00:33:37,940
at some point where we need to think

646
00:33:36,108 --> 00:33:41,058
harder about it but as far as I know

647
00:33:37,940 --> 00:33:42,859
like the cutscene is it and it is what

648
00:33:41,058 --> 00:33:44,538
it is like we're done with it basically

649
00:33:42,858 --> 00:33:46,489
like you know we'll be playing some

650
00:33:44,538 --> 00:33:49,038
audio over it but other than that there

651
00:33:46,489 --> 00:33:50,298
it's not like we did a fake version of

652
00:33:49,038 --> 00:33:51,829
the cutscene and then really the real

653
00:33:50,298 --> 00:33:53,538
version later it's like it is the real

654
00:33:51,829 --> 00:33:57,589
version already so I think it's just

655
00:33:53,538 --> 00:34:00,138
done and really would only be tweaked so

656
00:33:57,589 --> 00:34:02,949
I think we could safely say that a 16

657
00:34:00,138 --> 00:34:06,579
texture round robin scheme or something

658
00:34:02,950 --> 00:34:10,099
where we just overwrite textures in that

659
00:34:06,579 --> 00:34:12,078
order or something would probably be

660
00:34:10,099 --> 00:34:15,169
sufficient and so it's just the asset

661
00:34:12,079 --> 00:34:26,740
system that really has to be aware of

662
00:34:15,168 --> 00:34:26,739
that so that sounds right to me yeah

663
00:34:34,039 --> 00:34:40,739
so I think we may also want to well all

664
00:34:38,548 --> 00:34:42,628
right let me just do it and I'll show

665
00:34:40,739 --> 00:34:44,539
you I was gonna say something about how

666
00:34:42,628 --> 00:34:47,788
we may want to actually use an index

667
00:34:44,539 --> 00:34:52,528
into a array inside the renderer for

668
00:34:47,789 --> 00:34:54,119
other reasons so actually let me well

669
00:34:52,528 --> 00:34:54,898
since I went ahead and blurted out

670
00:34:54,119 --> 00:34:57,838
anyway

671
00:34:54,898 --> 00:35:01,278
so this is probably not quite right it's

672
00:34:57,838 --> 00:35:01,278
probably gonna be something more like

673
00:35:04,849 --> 00:35:12,150
that right so we're probably gonna do

674
00:35:10,380 --> 00:35:14,489
something more like hey I need the

675
00:35:12,150 --> 00:35:21,420
special texture handle for this special

676
00:35:14,489 --> 00:35:23,338
texture and you know that's it'll use

677
00:35:21,420 --> 00:35:27,239
the index in a way that makes sense

678
00:35:23,338 --> 00:35:29,670
there or something right so we'll we'll

679
00:35:27,239 --> 00:35:31,528
deal with that a little bit later but

680
00:35:29,670 --> 00:35:35,519
that's that's probably actually what we

681
00:35:31,528 --> 00:35:38,940
will do so let's go ahead and and push a

682
00:35:35,518 --> 00:35:41,669
little bit further down that path so if

683
00:35:38,940 --> 00:35:43,950
we wanted to make this render texture

684
00:35:41,670 --> 00:35:46,108
stuff a little bit cleaner here so let's

685
00:35:43,949 --> 00:35:49,379
take a look inside the renderer where we

686
00:35:46,108 --> 00:35:51,288
actually push on the quads and figure

687
00:35:49,380 --> 00:35:55,650
out how we would deal with this so

688
00:35:51,289 --> 00:35:58,799
inside push quad you can see here that

689
00:35:55,650 --> 00:36:01,769
we sort of do a kick you know a current

690
00:35:58,798 --> 00:36:05,329
quads thing here and what we want to do

691
00:36:01,768 --> 00:36:09,028
is take a look at that and figure out

692
00:36:05,329 --> 00:36:11,880
whether we need to specify special quad

693
00:36:09,028 --> 00:36:13,440
textures or not for something and so I

694
00:36:11,880 --> 00:36:15,858
think what we want to do is make that

695
00:36:13,440 --> 00:36:18,568
again be something that we do probably

696
00:36:15,858 --> 00:36:21,598
especially it's a little bit hard to say

697
00:36:18,568 --> 00:36:24,838
but probably especially so when you

698
00:36:21,599 --> 00:36:26,190
actually do like a push cube or

699
00:36:24,838 --> 00:36:28,230
something like that you can see here

700
00:36:26,190 --> 00:36:30,420
that we do we you know we do a get

701
00:36:28,230 --> 00:36:34,889
current quad and when we do something

702
00:36:30,420 --> 00:36:36,778
like a push sprite or a push rect you

703
00:36:34,889 --> 00:36:39,309
know we do that get current quads and

704
00:36:36,778 --> 00:36:42,550
and it makes sure we get one

705
00:36:39,309 --> 00:36:55,480
that's Fitz you know a particular size

706
00:36:42,550 --> 00:36:57,970
right and so I think all we really have

707
00:36:55,480 --> 00:37:00,699
to do is make sure that the get current

708
00:36:57,969 --> 00:37:04,179
quads call is smart enough to go hey if

709
00:37:00,699 --> 00:37:06,519
you're switching from rendering

710
00:37:04,179 --> 00:37:07,960
something that's using the fast path the

711
00:37:06,519 --> 00:37:12,159
sounds doing the slow path I need to

712
00:37:07,960 --> 00:37:13,869
create another batch because it already

713
00:37:12,159 --> 00:37:15,909
sort of does that right when it looks at

714
00:37:13,869 --> 00:37:16,960
max quads per batch and it just goes

715
00:37:15,909 --> 00:37:20,699
like I all right

716
00:37:16,960 --> 00:37:24,309
you know you've exceeded them so stop

717
00:37:20,699 --> 00:37:26,949
and so that I think is what we would

718
00:37:24,309 --> 00:37:30,070
really need to do in here where we do

719
00:37:26,949 --> 00:37:32,409
get current quads what we could do is

720
00:37:30,070 --> 00:37:36,940
say look you've got to pass the texture

721
00:37:32,409 --> 00:37:39,730
handle down to us so we can check to

722
00:37:36,940 --> 00:37:45,700
make sure that it's not gonna conflict

723
00:37:39,730 --> 00:37:48,369
or something as we start to worry about

724
00:37:45,699 --> 00:37:50,348
how expensive it is to do these current

725
00:37:48,369 --> 00:37:53,530
quad calls we may need to do more than

726
00:37:50,349 --> 00:37:55,869
that but you know let's just assume

727
00:37:53,530 --> 00:37:58,690
we're gonna do that here so we'll say

728
00:37:55,869 --> 00:38:00,220
that you pass a renderer texture here so

729
00:37:58,690 --> 00:38:02,829
you say a quad count and the texture

730
00:38:00,219 --> 00:38:08,069
that you're planning to use and then we

731
00:38:02,829 --> 00:38:12,309
can do is say well okay if there were

732
00:38:08,070 --> 00:38:18,880
current quads and the grip current quads

733
00:38:12,309 --> 00:38:24,219
has quad textures I guess I should say

734
00:38:18,880 --> 00:38:28,358
and it doesn't match like we sort of

735
00:38:24,219 --> 00:38:30,608
need a thing which says that the quad

736
00:38:28,358 --> 00:38:32,259
textures is either on or off based on

737
00:38:30,608 --> 00:38:36,940
whether we want it to be on or offering

738
00:38:32,260 --> 00:38:39,060
as well right so we might just I guess

739
00:38:36,940 --> 00:38:45,250
be a little more explicit about that say

740
00:38:39,059 --> 00:38:49,599
current quad current textures and we

741
00:38:45,250 --> 00:38:52,960
could just say current quads quad

742
00:38:49,599 --> 00:38:55,480
textures so you know if that's not

743
00:38:52,960 --> 00:39:00,608
to zero then the current currently we

744
00:38:55,480 --> 00:39:04,240
have textures and we need textures for

745
00:39:00,608 --> 00:39:10,170
this one we could say like this textures

746
00:39:04,239 --> 00:39:13,419
is something like needs quad textures

747
00:39:10,170 --> 00:39:15,820
right we could ask if this one needs it

748
00:39:13,420 --> 00:39:19,059
and then we could say if current

749
00:39:15,820 --> 00:39:25,269
textures is not equal to this textures

750
00:39:19,059 --> 00:39:26,440
then we also have to flush right so

751
00:39:25,269 --> 00:39:29,170
basically that's just a way of us saying

752
00:39:26,440 --> 00:39:31,838
look we've got a batch we always Jam

753
00:39:29,170 --> 00:39:35,170
things into the current batch as far as

754
00:39:31,838 --> 00:39:37,000
we can go but anytime we hit a blocking

755
00:39:35,170 --> 00:39:39,970
condition that's like we can't do any

756
00:39:37,000 --> 00:39:42,280
more on this batch then we flush and

757
00:39:39,969 --> 00:39:46,779
make a new batch so we're just adding a

758
00:39:42,280 --> 00:39:50,290
new check here to make sure that if we

759
00:39:46,780 --> 00:39:54,130
need to switch between texture arrays

760
00:39:50,289 --> 00:39:57,690
and large textures or vice-versa that we

761
00:39:54,130 --> 00:40:00,700
flush that batch and go from there now

762
00:39:57,690 --> 00:40:02,108
this is actually out here because it

763
00:40:00,699 --> 00:40:04,239
doesn't depend on whether there's

764
00:40:02,108 --> 00:40:06,670
current quads or not and we do need to

765
00:40:04,239 --> 00:40:09,539
know this because we're then going to

766
00:40:06,670 --> 00:40:14,680
have to create one of those arrays here

767
00:40:09,539 --> 00:40:16,000
if we need it right so ups so we're

768
00:40:14,679 --> 00:40:18,759
going to have to go all right the

769
00:40:16,000 --> 00:40:21,880
current quads needs to get a quad

770
00:40:18,760 --> 00:40:24,150
textures here for whatever the quad

771
00:40:21,880 --> 00:40:29,530
count is that you're actually going to

772
00:40:24,150 --> 00:40:33,190
output right and so that becomes again a

773
00:40:29,530 --> 00:40:35,080
little bit more persnickety now what I'd

774
00:40:33,190 --> 00:40:37,659
like to do because I like the way we

775
00:40:35,079 --> 00:40:45,779
were setting up before I think I might

776
00:40:37,659 --> 00:40:45,779
want to do it kind of think here

777
00:40:47,210 --> 00:40:53,119
I mean I think I might want to do it

778
00:40:51,500 --> 00:41:00,940
kind of the same way we were doing it

779
00:40:53,119 --> 00:41:04,068
before where we just used the vertex

780
00:41:00,940 --> 00:41:09,650
buffer an index buffer that are that are

781
00:41:04,068 --> 00:41:13,068
kind of inside the the render group

782
00:41:09,650 --> 00:41:20,059
there right so like I'm sorry the render

783
00:41:13,068 --> 00:41:21,710
commands where's it out there it is so

784
00:41:20,059 --> 00:41:23,420
you know this game render command struct

785
00:41:21,710 --> 00:41:26,510
has all that stuff in it like the push

786
00:41:23,420 --> 00:41:28,280
buffer and so on and so it feels like

787
00:41:26,510 --> 00:41:30,319
that's probably a natural place to put

788
00:41:28,280 --> 00:41:31,130
it where we just have an array there for

789
00:41:30,318 --> 00:41:34,250
that purpose

790
00:41:31,130 --> 00:41:39,318
you know what I mean so we would have in

791
00:41:34,250 --> 00:41:49,190
here sort of a texture array that's like

792
00:41:39,318 --> 00:41:50,900
you know max texture count and inside

793
00:41:49,190 --> 00:41:59,389
the render or texture stuff we just have

794
00:41:50,900 --> 00:42:00,440
I don't like using the word texture

795
00:41:59,389 --> 00:42:01,489
right even though that's what it is

796
00:42:00,440 --> 00:42:03,048
because it makes it sound like the

797
00:42:01,489 --> 00:42:08,659
texture array that's inside the renderer

798
00:42:03,048 --> 00:42:12,880
which it's not so this would allow us to

799
00:42:08,659 --> 00:42:12,879
sort of append those on

800
00:42:24,679 --> 00:42:29,829
and I think that's how I want to do it

801
00:42:33,550 --> 00:42:38,570
so if we just make one more right here

802
00:42:36,920 --> 00:42:39,980
that's the same as we used to have so

803
00:42:38,570 --> 00:42:41,480
really we're just restoring the old

804
00:42:39,980 --> 00:42:42,650
feature we're not even really

805
00:42:41,480 --> 00:42:44,360
implementing something new I'm kind of

806
00:42:42,650 --> 00:42:47,570
saying look let's it's a little bit

807
00:42:44,360 --> 00:42:49,880
different but it's mostly the same we

808
00:42:47,570 --> 00:42:52,010
just have a back band array it's got

809
00:42:49,880 --> 00:42:55,099
some information in it for textures it's

810
00:42:52,010 --> 00:42:57,260
small you know this is maybe 64 to t6

811
00:42:55,099 --> 00:42:58,130
something really tiny because we know

812
00:42:57,260 --> 00:43:01,370
we're only gonna have like eight nine

813
00:42:58,130 --> 00:43:02,780
ten of them so you know we're just it's

814
00:43:01,369 --> 00:43:07,190
not gonna be a large number of these

815
00:43:02,780 --> 00:43:08,690
things and so I think that's really all

816
00:43:07,190 --> 00:43:10,909
we will be talking about here so we just

817
00:43:08,690 --> 00:43:13,460
say all right you know the quad textures

818
00:43:10,909 --> 00:43:19,129
is really just gonna be a pointer into

819
00:43:13,460 --> 00:43:21,380
that into that array so we would say all

820
00:43:19,130 --> 00:43:27,619
right the quad textures is whatever the

821
00:43:21,380 --> 00:43:29,990
commands quads textures is oops plus

822
00:43:27,619 --> 00:43:35,349
whatever the offset was at that point so

823
00:43:29,989 --> 00:43:40,459
it'd be like commands quad texture count

824
00:43:35,349 --> 00:43:42,139
right it's just gonna point in there and

825
00:43:40,460 --> 00:43:44,090
then people can stack those up in there

826
00:43:42,139 --> 00:43:46,099
and similarly in here we would have to

827
00:43:44,090 --> 00:43:52,280
double check like that the quad texture

828
00:43:46,099 --> 00:43:54,650
count plus the quad count here is not

829
00:43:52,280 --> 00:43:59,780
going to exceed the max cloud texture

830
00:43:54,650 --> 00:44:01,670
cap because if it does then you can't

831
00:43:59,780 --> 00:44:03,980
render right you've you've run out of

832
00:44:01,670 --> 00:44:07,909
steam so you've got to double check that

833
00:44:03,980 --> 00:44:09,170
you know when we look at the quads we're

834
00:44:07,909 --> 00:44:13,129
actually going to return they better

835
00:44:09,170 --> 00:44:16,240
actually be valid for the number that

836
00:44:13,130 --> 00:44:24,170
people are saying they're going to draw

837
00:44:16,239 --> 00:44:26,929
so this also is predicated on the fact

838
00:44:24,170 --> 00:44:30,409
that you're going to actually use it so

839
00:44:26,929 --> 00:44:33,799
in here right we know that this is going

840
00:44:30,409 --> 00:44:36,579
to be if this textures I mean well

841
00:44:33,800 --> 00:44:36,580
actually do this way

842
00:44:41,358 --> 00:44:52,049
right it's a little ugly so maybe I'll

843
00:44:44,250 --> 00:44:56,519
leave it like this so if you need

844
00:44:52,050 --> 00:45:03,869
textures then you will get them if you

845
00:44:56,519 --> 00:45:06,509
don't need textures you won't so by

846
00:45:03,869 --> 00:45:08,280
default it's zero and then if you

847
00:45:06,510 --> 00:45:09,950
actually want the textures then we'll

848
00:45:08,280 --> 00:45:15,089
give you that will give you the textures

849
00:45:09,949 --> 00:45:19,019
and similarly here either

850
00:45:15,088 --> 00:45:25,980
you don't need textures right so if this

851
00:45:19,019 --> 00:45:30,449
is 0 ox I used to say if this is true

852
00:45:25,980 --> 00:45:33,599
and you would exceed then it's bad but

853
00:45:30,449 --> 00:45:35,460
if this was false then it's ok right so

854
00:45:33,599 --> 00:45:37,440
we won't shrink because if you're not

855
00:45:35,460 --> 00:45:42,480
using textures we don't care if you

856
00:45:37,440 --> 00:45:44,159
would exceed right so then we just need

857
00:45:42,480 --> 00:45:46,079
to answer this question which is does a

858
00:45:44,159 --> 00:45:48,210
particular texture need quad textures

859
00:45:46,079 --> 00:45:51,480
and we can make a call that does that

860
00:45:48,210 --> 00:45:54,329
check pretty easily so we'll deal with

861
00:45:51,480 --> 00:45:56,940
that in a second in the meantime here we

862
00:45:54,329 --> 00:46:00,030
could just say and same with get special

863
00:45:56,940 --> 00:46:01,950
texture for a right so now let's take a

864
00:46:00,030 --> 00:46:05,220
look at what else stopping here so in

865
00:46:01,949 --> 00:46:12,989
this case we need to be able to I

866
00:46:05,219 --> 00:46:15,230
certainly have a null texture do we yes

867
00:46:12,989 --> 00:46:15,229
we do

868
00:46:26,619 --> 00:46:35,000
um so I don't actually know if we know

869
00:46:32,630 --> 00:46:38,599
well I don't actually need that there we

870
00:46:35,000 --> 00:46:40,130
actually pass the texture there so I

871
00:46:38,599 --> 00:46:42,289
don't remember if there's places that we

872
00:46:40,130 --> 00:46:43,818
pass and millet extra we probably do and

873
00:46:42,289 --> 00:46:45,470
so we may need to deal with that a

874
00:46:43,818 --> 00:46:47,538
second but we'll across the picture come

875
00:46:45,469 --> 00:46:50,328
to it so here you go is an example right

876
00:46:47,539 --> 00:46:53,710
there's no texture here so we need like

877
00:46:50,329 --> 00:47:03,109
in the military for these circumstances

878
00:46:53,710 --> 00:47:04,760
which seems fine in most cases we should

879
00:47:03,108 --> 00:47:07,130
probably have one is just the wrecked

880
00:47:04,760 --> 00:47:15,920
like the sort of debug drawing tools

881
00:47:07,130 --> 00:47:18,619
that don't use that oh well you know

882
00:47:15,920 --> 00:47:21,200
what they use group white texture anyway

883
00:47:18,619 --> 00:47:24,548
so in theory we could just pass that

884
00:47:21,199 --> 00:47:24,548
because that is correct

885
00:47:31,739 --> 00:47:37,809
so actually that seems fine but everyone

886
00:47:35,829 --> 00:47:39,608
else will have a texture and so most of

887
00:47:37,809 --> 00:47:42,250
the time anything that we actually care

888
00:47:39,608 --> 00:47:44,909
about will act we'll be using an actual

889
00:47:42,250 --> 00:47:44,909
texture here

890
00:47:56,778 --> 00:48:09,000
get current quads does not - yes that's

891
00:48:00,568 --> 00:48:19,440
true where is the texture handle bitmap

892
00:48:09,000 --> 00:48:20,518
texture handle and get kind of quads for

893
00:48:19,440 --> 00:48:34,460
the white texture

894
00:48:20,518 --> 00:48:34,459
oops just be here so I think almost good

895
00:48:38,500 --> 00:48:46,809
all right so I think that's all good we

896
00:48:44,170 --> 00:48:51,670
just now need to have an understanding

897
00:48:46,809 --> 00:49:00,279
of when those get created right when

898
00:48:51,670 --> 00:49:02,920
they're larger so needs quad texture is

899
00:49:00,280 --> 00:49:05,200
probably not the best name for it so I

900
00:49:02,920 --> 00:49:08,470
think we probably want to have something

901
00:49:05,199 --> 00:49:13,089
more like special texture handle like is

902
00:49:08,469 --> 00:49:15,519
special texture right is probably more

903
00:49:13,090 --> 00:49:17,079
what we're talking about here and inside

904
00:49:15,519 --> 00:49:19,420
the renderer this is something that

905
00:49:17,079 --> 00:49:24,190
we're gonna want to be able to answer

906
00:49:19,420 --> 00:49:26,250
really easily right so if you ask if a

907
00:49:24,190 --> 00:49:29,170
renderer texture is a special texture

908
00:49:26,250 --> 00:49:31,119
it's gonna be something like you know if

909
00:49:29,170 --> 00:49:35,050
the width and height are different than

910
00:49:31,119 --> 00:49:37,869
the dimensions of the texture right so

911
00:49:35,050 --> 00:49:42,430
this right here is really what we're

912
00:49:37,869 --> 00:49:45,460
talking about so we we probably want to

913
00:49:42,429 --> 00:49:47,858
have this be past the render group just

914
00:49:45,460 --> 00:49:49,690
in case in the future it becomes a

915
00:49:47,858 --> 00:49:52,989
parameter that we don't necessarily know

916
00:49:49,690 --> 00:49:55,599
at compile time so right now we won't

917
00:49:52,989 --> 00:49:57,689
actually use this but we would

918
00:49:55,599 --> 00:50:02,260
potentially use it in the future right

919
00:49:57,690 --> 00:50:05,440
so the results here is just gonna be if

920
00:50:02,260 --> 00:50:09,310
the textures width is greater than the

921
00:50:05,440 --> 00:50:14,789
array dim or the textures height is

922
00:50:09,309 --> 00:50:17,289
greater than the array dim then that's

923
00:50:14,789 --> 00:50:20,858
all we need to know it's gonna be

924
00:50:17,289 --> 00:50:22,838
special at that point right and so we

925
00:50:20,858 --> 00:50:25,029
could do other ways of deterring it but

926
00:50:22,838 --> 00:50:30,429
right now that's dispositive so we can

927
00:50:25,030 --> 00:50:32,560
probably just say done we could do other

928
00:50:30,429 --> 00:50:36,699
fancy things there so for example we

929
00:50:32,559 --> 00:50:39,789
could have a break in our indices we

930
00:50:36,699 --> 00:50:42,639
could say that indices like above the

931
00:50:39,789 --> 00:50:45,400
high bit set are special and below the

932
00:50:42,639 --> 00:50:47,049
bit aren't or something but I'm just not

933
00:50:45,400 --> 00:50:48,670
gonna bother with that I'm just gonna

934
00:50:47,050 --> 00:50:51,359
say look it's based on the width and

935
00:50:48,670 --> 00:50:51,358
height for now

936
00:50:51,518 --> 00:50:56,308
and we could change that right we could

937
00:50:53,318 --> 00:51:04,929
we could change the the indexing scheme

938
00:50:56,309 --> 00:51:07,599
in the future well ok you know what no

939
00:51:04,929 --> 00:51:09,278
now that I say it I'm gonna take that

940
00:51:07,599 --> 00:51:12,490
back and the reason I'm going to take

941
00:51:09,278 --> 00:51:15,009
that fact is because if we do it with

942
00:51:12,489 --> 00:51:17,498
the index we wouldn't get we would

943
00:51:15,009 --> 00:51:21,190
guarantee ibly never have to pass a

944
00:51:17,498 --> 00:51:28,929
group here or look anything up so if we

945
00:51:21,190 --> 00:51:32,528
did something more like this that would

946
00:51:28,929 --> 00:51:34,538
allow us to say oh there's a special

947
00:51:32,528 --> 00:51:36,608
textured bit here that you know

948
00:51:34,539 --> 00:51:39,329
determines whether or not the texture is

949
00:51:36,608 --> 00:51:42,308
a special texture we never need to know

950
00:51:39,329 --> 00:51:45,009
anything about where it came from or

951
00:51:42,309 --> 00:51:46,660
compare it to anything we can just do a

952
00:51:45,009 --> 00:51:53,949
quick bit check and off we go

953
00:51:46,659 --> 00:51:57,068
that does seem kind of compelling for a

954
00:51:53,949 --> 00:52:00,489
lot of reasons right so if we look here

955
00:51:57,068 --> 00:52:02,558
we've got two u16s and a u-32 so like

956
00:52:00,489 --> 00:52:13,349
yeah we could just say hey there's a

957
00:52:02,559 --> 00:52:19,680
special texture bit and it's you know

958
00:52:13,349 --> 00:52:19,680
that or something right

959
00:52:20,409 --> 00:52:25,088
and that would allow us to really

960
00:52:22,420 --> 00:52:28,990
quickly determine it and go from there

961
00:52:25,088 --> 00:52:32,679
so yeah I mean I guess the only thing we

962
00:52:28,989 --> 00:52:34,929
really need to do at that point is when

963
00:52:32,679 --> 00:52:36,338
we do get special text or handle for we

964
00:52:34,929 --> 00:52:40,179
now need some way of resolving those

965
00:52:36,338 --> 00:52:41,889
textures and and when we go to submit

966
00:52:40,179 --> 00:52:44,409
textures we need a special way of saying

967
00:52:41,889 --> 00:52:48,608
that those textures were ones that we're

968
00:52:44,409 --> 00:52:54,038
gonna go down the special pipe so that

969
00:52:48,608 --> 00:52:58,449
seems good to me and there's a couple

970
00:52:54,039 --> 00:53:03,269
different ways we could do this but

971
00:52:58,449 --> 00:53:03,268
we'll talk about that a little bit later

972
00:53:04,528 --> 00:53:12,608
all right

973
00:53:05,920 --> 00:53:14,740
but I'm reasonably happy with that so

974
00:53:12,608 --> 00:53:21,848
okay so if we take get special texture

975
00:53:14,739 --> 00:53:30,818
handy for and we throw that in here just

976
00:53:21,849 --> 00:53:40,539
real quick so this is not really

977
00:53:30,818 --> 00:53:46,000
implemented yet when we actually send a

978
00:53:40,539 --> 00:53:47,619
render or texture damn it should be able

979
00:53:46,000 --> 00:53:50,009
to return us that handle we're gonna

980
00:53:47,619 --> 00:53:52,298
need to pass it probably the OpenGL

981
00:53:50,009 --> 00:53:54,150
context stuff because it's probably

982
00:53:52,298 --> 00:53:56,469
going to look into an array of some kind

983
00:53:54,150 --> 00:53:57,430
but other than that should be pretty

984
00:53:56,469 --> 00:54:02,230
straightforward

985
00:53:57,429 --> 00:54:04,960
let me do this here so we can see it as

986
00:54:02,230 --> 00:54:07,719
well if and when we step into this code

987
00:54:04,960 --> 00:54:17,400
to debug it so we'll do it a little bit

988
00:54:07,719 --> 00:54:20,399
more like this see good that all seems

989
00:54:17,400 --> 00:54:20,400
reasonable

990
00:54:28,338 --> 00:54:39,119
so I think that should be pretty much it

991
00:54:33,260 --> 00:54:40,980
for the binds for the user side in terms

992
00:54:39,119 --> 00:54:42,470
of like outputting these textures and

993
00:54:40,980 --> 00:54:44,579
hopefully if I have to screw anything up

994
00:54:42,469 --> 00:54:47,368
everything just works when you're not

995
00:54:44,579 --> 00:54:51,559
using textures of that size so basically

996
00:54:47,369 --> 00:54:54,059
you know the render test suite the game

997
00:54:51,559 --> 00:54:56,880
as it currently exists should be fine

998
00:54:54,059 --> 00:54:58,170
and so they're just still running

999
00:54:56,880 --> 00:54:59,640
through the same path and that other

1000
00:54:58,170 --> 00:55:02,548
path is just sitting in there not being

1001
00:54:59,639 --> 00:55:04,739
used when we switch to the cutscene now

1002
00:55:02,548 --> 00:55:07,440
of course we'll still get the exact same

1003
00:55:04,739 --> 00:55:10,288
error that we got before because we now

1004
00:55:07,440 --> 00:55:13,318
have to actually take the step to create

1005
00:55:10,289 --> 00:55:16,950
our large textures as special textures

1006
00:55:13,318 --> 00:55:19,019
which we have not done so now we just

1007
00:55:16,949 --> 00:55:22,578
need to do the last part of this which

1008
00:55:19,019 --> 00:55:24,929
is to make the asset system aware of

1009
00:55:22,579 --> 00:55:27,750
situations where it's loading a texture

1010
00:55:24,929 --> 00:55:32,419
above the texture or a size that it

1011
00:55:27,750 --> 00:55:36,358
specifies so inside the asset system

1012
00:55:32,420 --> 00:55:38,278
that's really where this stuff now gets

1013
00:55:36,358 --> 00:55:41,519
a little complicated is we just have to

1014
00:55:38,278 --> 00:55:44,849
have when we load the assets we have to

1015
00:55:41,519 --> 00:55:47,940
have the texture understand when it's

1016
00:55:44,849 --> 00:55:51,390
special and when it's not right and so

1017
00:55:47,940 --> 00:55:52,858
when we do all of this stuff it can just

1018
00:55:51,389 --> 00:55:54,618
pass through because the texture handle

1019
00:55:52,858 --> 00:55:58,259
itself says whether or not it's special

1020
00:55:54,619 --> 00:56:02,250
so it's really the point where we refer

1021
00:55:58,260 --> 00:56:05,970
to the texture that it makes it that it

1022
00:56:02,250 --> 00:56:08,699
becomes relevant right so right here

1023
00:56:05,969 --> 00:56:11,909
when we do our refer to texture and we

1024
00:56:08,699 --> 00:56:15,558
use next free texture handle that part

1025
00:56:11,909 --> 00:56:15,558
right here this right here

1026
00:56:20,989 --> 00:56:26,939
here's the part that's gonna need to

1027
00:56:24,079 --> 00:56:31,380
understand that it has to use a separate

1028
00:56:26,940 --> 00:56:33,990
texture pool for large textures and so

1029
00:56:31,380 --> 00:56:36,300
what I want to do is expand the renderer

1030
00:56:33,989 --> 00:56:39,059
out or expand the asset system

1031
00:56:36,300 --> 00:56:40,590
understanding a little bit and don't

1032
00:56:39,059 --> 00:56:41,909
forget one of the things that's

1033
00:56:40,590 --> 00:56:43,670
interesting about the way we're doing

1034
00:56:41,909 --> 00:56:47,069
the asset system here is we can now

1035
00:56:43,670 --> 00:56:49,079
massively simplify most of what's

1036
00:56:47,070 --> 00:56:53,220
happening in the asset system because

1037
00:56:49,079 --> 00:56:56,279
almost all of our textures in it now are

1038
00:56:53,219 --> 00:56:58,219
fixed size for the most part in terms of

1039
00:56:56,280 --> 00:57:01,590
how we're actually handling them and

1040
00:56:58,219 --> 00:57:04,709
they're being backed by storage in the

1041
00:57:01,590 --> 00:57:07,559
renderer so we really don't need to have

1042
00:57:04,710 --> 00:57:10,559
most of the code that's me asset system

1043
00:57:07,559 --> 00:57:14,039
anymore it can just back be backed by

1044
00:57:10,559 --> 00:57:17,610
texture handles and be done so this to

1045
00:57:14,039 --> 00:57:20,460
do is very much correct and that's sort

1046
00:57:17,610 --> 00:57:25,590
of a separate issue but what we need to

1047
00:57:20,460 --> 00:57:34,170
do here is have some way of saying all

1048
00:57:25,590 --> 00:57:36,930
right there's going to be two ways that

1049
00:57:34,170 --> 00:57:39,450
this is going to happen really this call

1050
00:57:36,929 --> 00:57:41,369
can be the same but what we want to do

1051
00:57:39,449 --> 00:57:43,769
here is say that there's a free texture

1052
00:57:41,369 --> 00:57:46,009
Anil I don't know why that's a u16

1053
00:57:43,769 --> 00:57:49,530
because I thought that it was actually

1054
00:57:46,010 --> 00:57:53,730
u32 I think that may be old news at this

1055
00:57:49,530 --> 00:57:56,970
point because there's no reason it has

1056
00:57:53,730 --> 00:57:58,829
to be you 16 now you could never use 32

1057
00:57:56,969 --> 00:58:00,779
bits because there's no way the graphics

1058
00:57:58,829 --> 00:58:03,809
card has enough memory to have a texture

1059
00:58:00,780 --> 00:58:05,460
array that's 32 bits worth of indices so

1060
00:58:03,809 --> 00:58:06,960
you can kind of forget that in this day

1061
00:58:05,460 --> 00:58:09,150
and age maybe someday in the distant

1062
00:58:06,960 --> 00:58:12,030
future that will be possible but

1063
00:58:09,150 --> 00:58:14,460
certainly not right now so if we look at

1064
00:58:12,030 --> 00:58:15,480
an actual renderer texture here I'm

1065
00:58:14,460 --> 00:58:23,550
pretty sure yeah

1066
00:58:15,480 --> 00:58:25,619
so right at least right now we're not

1067
00:58:23,550 --> 00:58:27,570
doing that now in the future maybe we

1068
00:58:25,619 --> 00:58:29,250
want to use the 16-bit index and use the

1069
00:58:27,570 --> 00:58:31,610
other 16 bits for something more useful

1070
00:58:29,250 --> 00:58:33,239
because we're also not going to have

1071
00:58:31,610 --> 00:58:34,800
65,000 textures load

1072
00:58:33,239 --> 00:58:36,899
any more than we were gonna have four

1073
00:58:34,800 --> 00:58:39,119
billion textures loaded both of those

1074
00:58:36,900 --> 00:58:42,930
are ridiculous for our current hardware

1075
00:58:39,119 --> 00:58:44,700
specs so that's not an issue but at the

1076
00:58:42,929 --> 00:58:47,909
moment in history two bits so there's no

1077
00:58:44,699 --> 00:58:51,029
reason to be casting we should save the

1078
00:58:47,909 --> 00:58:56,690
casting for when we actually need to do

1079
00:58:51,030 --> 00:58:56,690
that so let's do this here

1080
00:58:57,119 --> 00:59:02,970
we'll start by saying that in the case

1081
00:59:00,539 --> 00:59:08,130
where the texture is not special we will

1082
00:59:02,969 --> 00:59:12,839
do this and in the case where the

1083
00:59:08,130 --> 00:59:15,480
texture is special we will do the will

1084
00:59:12,840 --> 00:59:20,039
get it from a round-robin scheme so in

1085
00:59:15,480 --> 00:59:24,289
here we would just say next special

1086
00:59:20,039 --> 00:59:29,570
texture handle and we will want to mod

1087
00:59:24,289 --> 00:59:33,539
that value by the texture

1088
00:59:29,570 --> 00:59:35,610
we'll want it to wrap right so what

1089
00:59:33,539 --> 00:59:37,800
we'll do when we assign this is we'll

1090
00:59:35,610 --> 00:59:41,130
say well you know use the next special

1091
00:59:37,800 --> 00:59:45,180
texturing handle plus plus and we want

1092
00:59:41,130 --> 00:59:47,990
to say if the next special texture that

1093
00:59:45,179 --> 00:59:51,179
you would have used is outside the range

1094
00:59:47,989 --> 00:59:53,719
then we would reset it back to zero

1095
00:59:51,179 --> 00:59:53,719
right

1096
01:00:04,329 --> 01:00:10,940
sueing here we'd say something like max

1097
01:00:07,789 --> 01:00:13,009
special texture handle count or

1098
01:00:10,940 --> 01:00:15,858
something like this or just special

1099
01:00:13,010 --> 01:00:18,530
texture handle count and so we just

1100
01:00:15,858 --> 01:00:27,980
assign and wrap and so it will reuse the

1101
01:00:18,530 --> 01:00:30,410
textures as it goes in that way okay now

1102
01:00:27,980 --> 01:00:32,210
again this is not really correct yet

1103
01:00:30,409 --> 01:00:33,949
because we still haven't dealt with sort

1104
01:00:32,210 --> 01:00:36,349
of how the asset system as a whole is

1105
01:00:33,949 --> 01:00:40,039
thinking about these and that's because

1106
01:00:36,349 --> 01:00:42,619
the asset system still stores these

1107
01:00:40,039 --> 01:00:45,199
textures itself which we don't really

1108
01:00:42,619 --> 01:00:47,990
want it to do and so we're gonna

1109
01:00:45,199 --> 01:00:49,608
probably fuss with that a little bit in

1110
01:00:47,989 --> 01:00:51,798
the not-too-distant future but that's a

1111
01:00:49,608 --> 01:00:54,318
separate issue so we've got the texture

1112
01:00:51,798 --> 01:00:56,420
handle here and the texturing handle is

1113
01:00:54,318 --> 01:01:00,650
going to be a sign in one of two ways

1114
01:00:56,420 --> 01:01:02,450
now and what we're gonna do is now is

1115
01:01:00,650 --> 01:01:07,548
the finally the time that we might want

1116
01:01:02,449 --> 01:01:09,669
to do a dimensions require special

1117
01:01:07,548 --> 01:01:13,940
texture handle or something like this

1118
01:01:09,670 --> 01:01:16,010
right and so what we can do here is say

1119
01:01:13,940 --> 01:01:20,358
look let's pass the width and height in

1120
01:01:16,010 --> 01:01:26,119
and we'll ask does this texture need

1121
01:01:20,358 --> 01:01:27,409
special handling according to the system

1122
01:01:26,119 --> 01:01:29,809
and you know now I think about it this

1123
01:01:27,409 --> 01:01:32,690
is probably a termination fest made by

1124
01:01:29,809 --> 01:01:35,480
the asset system and so the asset system

1125
01:01:32,690 --> 01:01:37,429
itself can say when it starts up it'll

1126
01:01:35,480 --> 01:01:42,260
maybe create the texture array with a

1127
01:01:37,429 --> 01:01:43,730
specific size and that's how it will do

1128
01:01:42,260 --> 01:01:45,740
it so in the future we could make that

1129
01:01:43,730 --> 01:01:48,349
more flexible where we create different

1130
01:01:45,739 --> 01:01:50,298
sizes of texture array based on for

1131
01:01:48,349 --> 01:01:53,420
example what resolution we're running at

1132
01:01:50,298 --> 01:01:55,159
so we probably want that feature to be

1133
01:01:53,420 --> 01:01:57,318
something that's internal to the asset

1134
01:01:55,159 --> 01:01:59,088
system itself not something that the

1135
01:01:57,318 --> 01:02:03,019
renderer cares about and really doesn't

1136
01:01:59,088 --> 01:02:05,509
care what size you make the texture

1137
01:02:03,019 --> 01:02:07,579
array as long as it fits in memory so

1138
01:02:05,510 --> 01:02:10,609
it's probably something better done sort

1139
01:02:07,579 --> 01:02:12,330
of out here so if we pass the width and

1140
01:02:10,608 --> 01:02:17,730
height in this

1141
01:02:12,329 --> 01:02:19,170
here like so

1142
01:02:17,730 --> 01:02:20,969
then what we can do is we can compare

1143
01:02:19,170 --> 01:02:24,450
those exactly like we were going to do

1144
01:02:20,969 --> 01:02:29,149
before now what we will say here is in

1145
01:02:24,449 --> 01:02:31,949
the future probably make this dynamic

1146
01:02:29,150 --> 01:02:33,750
but for right now we don't have to and

1147
01:02:31,949 --> 01:02:35,099
so all we really do here is exactly the

1148
01:02:33,750 --> 01:02:36,449
thing I was gonna write before in the

1149
01:02:35,099 --> 01:02:39,150
other part of half that I decided now

1150
01:02:36,449 --> 01:02:41,669
let's make it to the handle nose and so

1151
01:02:39,150 --> 01:02:44,369
all we're gonna do here say look if the

1152
01:02:41,670 --> 01:02:46,409
width is greater than whatever the

1153
01:02:44,369 --> 01:02:48,630
texture Tim is that we've sort of

1154
01:02:46,409 --> 01:02:50,069
hard-coded now I guess why I say let's

1155
01:02:48,630 --> 01:02:51,660
make it dynamic maybe in the future

1156
01:02:50,070 --> 01:02:53,430
because there's really not a lot of

1157
01:02:51,659 --> 01:02:55,230
reason for it to be hard-coded it'd be

1158
01:02:53,429 --> 01:02:57,089
pretty easy modification for us to make

1159
01:02:55,230 --> 01:03:01,289
it so that you pass it when you start

1160
01:02:57,090 --> 01:03:02,460
the renderer up you know so anyway we'll

1161
01:03:01,289 --> 01:03:04,369
just say look there's a width and height

1162
01:03:02,460 --> 01:03:07,559
here and the texture array dimensions

1163
01:03:04,369 --> 01:03:09,750
we're gonna test against them if you

1164
01:03:07,559 --> 01:03:11,849
exceed them in either case then you will

1165
01:03:09,750 --> 01:03:13,400
need special texture handling so you go

1166
01:03:11,849 --> 01:03:20,009
through the special texture path

1167
01:03:13,400 --> 01:03:25,800
otherwise you don't right so I think

1168
01:03:20,010 --> 01:03:28,830
that's really all there is to it and off

1169
01:03:25,800 --> 01:03:31,170
you go so here where we do refer to

1170
01:03:28,829 --> 01:03:34,799
texture we're going to go ahead and put

1171
01:03:31,170 --> 01:03:37,079
the texture handle in here and what we

1172
01:03:34,800 --> 01:03:40,410
need to do now is the texture handle

1173
01:03:37,079 --> 01:03:45,090
itself needs to get the special bit Ord

1174
01:03:40,409 --> 01:03:47,429
in there so that everybody knows that

1175
01:03:45,090 --> 01:03:48,930
it's a special texture and not one of

1176
01:03:47,429 --> 01:03:52,319
the ones that goes through the random

1177
01:03:48,929 --> 01:03:55,529
the regular packing path so in here when

1178
01:03:52,320 --> 01:03:57,539
we know that it was a special texture we

1179
01:03:55,530 --> 01:03:59,710
could do something like this texture

1180
01:03:57,539 --> 01:04:05,150
handle

1181
01:03:59,710 --> 01:04:12,800
we'll make special texture like that or

1182
01:04:05,150 --> 01:04:14,510
something something like that and then

1183
01:04:12,800 --> 01:04:21,950
inside the renderer it's got a way of

1184
01:04:14,510 --> 01:04:28,670
tagging that out so you say okay pass me

1185
01:04:21,949 --> 01:04:32,599
in the index and I'll pass you back the

1186
01:04:28,670 --> 01:04:35,809
thing that says that it's special while

1187
01:04:32,599 --> 01:04:41,710
we're at it we will assert that the

1188
01:04:35,809 --> 01:04:41,710
index doesn't already have that bit set

1189
01:04:42,369 --> 01:04:47,449
because obviously if someone actually

1190
01:04:44,900 --> 01:04:49,639
was trying to use those bits somehow

1191
01:04:47,449 --> 01:04:51,889
that's bad because that's reserved for

1192
01:04:49,639 --> 01:04:54,739
our use we need to make sure that it's

1193
01:04:51,889 --> 01:05:02,539
not there and so we're going to keep

1194
01:04:54,739 --> 01:05:08,299
that like masked off right so we need

1195
01:05:02,539 --> 01:05:12,980
the asset system itself to have this

1196
01:05:08,300 --> 01:05:14,750
special texture concept now in it so in

1197
01:05:12,980 --> 01:05:16,699
addition to next free texture handle

1198
01:05:14,750 --> 01:05:18,739
this is going to have next special

1199
01:05:16,699 --> 01:05:23,480
texture handle and it's also going to

1200
01:05:18,739 --> 01:05:26,299
have special texture handle count and

1201
01:05:23,480 --> 01:05:27,769
these are going to be things that are at

1202
01:05:26,300 --> 01:05:29,930
the start you know when we initialize

1203
01:05:27,769 --> 01:05:32,509
that we have to just know right they

1204
01:05:29,929 --> 01:05:34,819
have to be created in the renderer and

1205
01:05:32,510 --> 01:05:37,550
we have to just know exactly how it's

1206
01:05:34,820 --> 01:05:41,530
going to work so when we go to allocate

1207
01:05:37,550 --> 01:05:45,640
the game assets we need to set up the

1208
01:05:41,530 --> 01:05:49,370
special texture handle count and

1209
01:05:45,639 --> 01:05:51,289
presumably our renderer texture cue for

1210
01:05:49,369 --> 01:05:52,460
example could have that on it

1211
01:05:51,289 --> 01:05:55,369
since that's something that it knows

1212
01:05:52,460 --> 01:05:57,170
about and it'll just say look this is

1213
01:05:55,369 --> 01:06:01,449
how many special textures you're gonna

1214
01:05:57,170 --> 01:06:01,450
get so deal with it right

1215
01:06:04,559 --> 01:06:11,130
I'm not sure if that's the best way I

1216
01:06:08,688 --> 01:06:13,259
mean really handmade here itself

1217
01:06:11,130 --> 01:06:15,150
probably wants to to specify that at

1218
01:06:13,259 --> 01:06:19,079
startup how many special textures it

1219
01:06:15,150 --> 01:06:22,199
wants and this information kind of has

1220
01:06:19,079 --> 01:06:24,900
to get get trickled down here so I feel

1221
01:06:22,199 --> 01:06:28,229
like to a certain extent it's like this

1222
01:06:24,900 --> 01:06:31,048
is largely sort of a communication thing

1223
01:06:28,228 --> 01:06:33,778
that has to happen if we take a look at

1224
01:06:31,048 --> 01:06:35,429
the texture op queue here since that's

1225
01:06:33,778 --> 01:06:46,498
the thing that people would be looking

1226
01:06:35,429 --> 01:06:49,198
at and would have a handle tube in here

1227
01:06:46,498 --> 01:06:51,598
I think it might make some sense to put

1228
01:06:49,199 --> 01:06:54,389
the information about how the textures

1229
01:06:51,599 --> 01:06:58,469
are set up because then everyone knows

1230
01:06:54,389 --> 01:07:01,108
what that is so I might say look let's

1231
01:06:58,469 --> 01:07:04,229
say that in addition to the texture

1232
01:07:01,108 --> 01:07:08,969
queue operation in here you can also get

1233
01:07:04,228 --> 01:07:11,218
a thing that says your texture handled

1234
01:07:08,969 --> 01:07:14,489
count like your normal texture handle

1235
01:07:11,219 --> 01:07:17,130
count and your special texture handle

1236
01:07:14,489 --> 01:07:20,568
count and so in here you just know what

1237
01:07:17,130 --> 01:07:22,769
those two are you know I'm saying

1238
01:07:20,568 --> 01:07:24,509
furthermore since the texture op q is

1239
01:07:22,768 --> 01:07:26,248
there I guess that means I could just

1240
01:07:24,509 --> 01:07:28,139
get rid of that and I could just say

1241
01:07:26,248 --> 01:07:31,588
alright let's make that be something

1242
01:07:28,139 --> 01:07:36,118
that happens in here so when we actually

1243
01:07:31,588 --> 01:07:38,938
do the the load bitmap function we could

1244
01:07:36,119 --> 01:07:44,729
do that now one of the things that I'm

1245
01:07:38,938 --> 01:07:47,728
not sure about is because this I believe

1246
01:07:44,728 --> 01:07:50,899
that this is always load bitmap is

1247
01:07:47,728 --> 01:07:50,899
always called synchronously

1248
01:07:54,559 --> 01:07:59,630
it's not inside a task so I think it's

1249
01:07:57,619 --> 01:08:01,880
safe to just use regular increments here

1250
01:07:59,630 --> 01:08:03,619
meaning these things are not hit by

1251
01:08:01,880 --> 01:08:05,000
multiple threads at once we don't have

1252
01:08:03,619 --> 01:08:07,400
to be careful about whether or not

1253
01:08:05,000 --> 01:08:10,070
they're like actually gonna get out of

1254
01:08:07,400 --> 01:08:12,650
sync incremented and gets some kind of

1255
01:08:10,070 --> 01:08:13,910
bad over-allocation situation happening

1256
01:08:12,650 --> 01:08:16,009
cuz I'm pretty sure that basically the

1257
01:08:13,909 --> 01:08:18,979
only thing that happens on the deferred

1258
01:08:16,009 --> 01:08:22,039
thread is just the load decompress you

1259
01:08:18,979 --> 01:08:24,500
know or the load prepare stuff right

1260
01:08:22,039 --> 01:08:30,409
it's all that happens so I think that

1261
01:08:24,500 --> 01:08:32,329
probably is irrelevant alright so what

1262
01:08:30,409 --> 01:08:35,170
I'm gonna do here is just say okay this

1263
01:08:32,329 --> 01:08:38,329
is actually going to be texture op cube

1264
01:08:35,170 --> 01:08:40,850
special texture handle camp and so

1265
01:08:38,329 --> 01:08:43,729
that's just fine

1266
01:08:40,850 --> 01:08:46,310
and off it goes so really all we need to

1267
01:08:43,729 --> 01:08:48,858
do now to make this work I think

1268
01:08:46,310 --> 01:08:53,990
everybody is treating it reasonably also

1269
01:08:48,859 --> 01:08:55,609
I can put this assertion here like

1270
01:08:53,989 --> 01:08:57,639
assert that the next free texture

1271
01:08:55,609 --> 01:09:03,829
handled the one that we're about to use

1272
01:08:57,640 --> 01:09:09,380
is less than the assets texture normal

1273
01:09:03,829 --> 01:09:12,019
texture handle count and so we can also

1274
01:09:09,380 --> 01:09:19,970
now check to see when we overrun if that

1275
01:09:12,020 --> 01:09:21,620
makes sense so now all we need to do to

1276
01:09:19,970 --> 01:09:24,680
actually bring the scheme together and

1277
01:09:21,619 --> 01:09:27,528
start debugging it and testing it is we

1278
01:09:24,680 --> 01:09:29,838
need to have a way of when we start up

1279
01:09:27,529 --> 01:09:31,819
OpenGL allocating some of those special

1280
01:09:29,838 --> 01:09:34,939
texture handles so that there actually

1281
01:09:31,819 --> 01:09:36,560
is some thing there to use we're

1282
01:09:34,939 --> 01:09:38,479
handling them all up and down the

1283
01:09:36,560 --> 01:09:41,120
pipeline now but that doesn't really

1284
01:09:38,479 --> 01:09:44,179
make any difference if nobody ever

1285
01:09:41,119 --> 01:09:45,559
allocates any of these to begin with you

1286
01:09:44,180 --> 01:09:47,838
can't very well render with the texture

1287
01:09:45,560 --> 01:09:49,460
you've never allocated now where do we

1288
01:09:47,838 --> 01:09:52,630
do that well we kind of know because

1289
01:09:49,460 --> 01:09:55,520
remember we ran this before and crashed

1290
01:09:52,630 --> 01:09:59,480
well we didn't crash we hit an open GL

1291
01:09:55,520 --> 01:10:01,250
error that said hey you're trying to put

1292
01:09:59,479 --> 01:10:04,189
a texture in a texture array that

1293
01:10:01,250 --> 01:10:06,250
doesn't fit and so insight allocate

1294
01:10:04,189 --> 01:10:08,210
texture here where we're putting this in

1295
01:10:06,250 --> 01:10:10,609
what we can do now

1296
01:10:08,210 --> 01:10:17,000
is actually control this very cleanly

1297
01:10:10,609 --> 01:10:23,420
right so we can take back this core code

1298
01:10:17,000 --> 01:10:26,539
here where we specify the GL text image

1299
01:10:23,420 --> 01:10:29,090
and we can say look this is now going to

1300
01:10:26,539 --> 01:10:31,760
be predicated on whether or not you're

1301
01:10:29,090 --> 01:10:35,360
using a special texture handle or a

1302
01:10:31,760 --> 01:10:40,310
regular texture handle so the same thing

1303
01:10:35,359 --> 01:10:42,019
would happen here like so and we could

1304
01:10:40,310 --> 01:10:43,550
maybe get these off of the op queue as

1305
01:10:42,020 --> 01:10:45,290
well depending on whether or not we have

1306
01:10:43,550 --> 01:10:46,610
that here we can look at that to sort of

1307
01:10:45,289 --> 01:10:49,519
collapse those down into something a

1308
01:10:46,609 --> 01:10:53,299
little bit more usable there but again

1309
01:10:49,520 --> 01:10:55,040
here the way that we would do that is we

1310
01:10:53,300 --> 01:10:56,659
would just now instead of trying to

1311
01:10:55,039 --> 01:10:58,488
generate a texture handle at this point

1312
01:10:56,659 --> 01:11:00,619
we'd actually just reuse the texture

1313
01:10:58,488 --> 01:11:02,269
Nano and and over bind it so we'd

1314
01:11:00,619 --> 01:11:05,659
replace the image that was in there with

1315
01:11:02,270 --> 01:11:09,410
the new image that we were getting and

1316
01:11:05,659 --> 01:11:12,949
so I think that's pretty much it this

1317
01:11:09,409 --> 01:11:17,689
stuff here can actually happen I don't

1318
01:11:12,949 --> 01:11:19,279
know why I feel like buying texture 0

1319
01:11:17,689 --> 01:11:22,009
should probably just happen out here to

1320
01:11:19,279 --> 01:11:24,859
clear out that just in case I'm gonna

1321
01:11:22,010 --> 01:11:26,210
leave it like that for now um so really

1322
01:11:24,859 --> 01:11:28,460
what we want to do is accent thing we're

1323
01:11:26,210 --> 01:11:31,640
doing here so we want to move this gen

1324
01:11:28,460 --> 01:11:32,960
textures out right into something we're

1325
01:11:31,640 --> 01:11:36,380
gonna deal with a little bit later and

1326
01:11:32,960 --> 01:11:38,090
similarly these text parameters the text

1327
01:11:36,380 --> 01:11:39,980
image is separate from the text

1328
01:11:38,090 --> 01:11:42,170
parameter it's in OpenGL so especially

1329
01:11:39,979 --> 01:11:44,059
the recess on the image shouldn't clear

1330
01:11:42,170 --> 01:11:45,350
these out so we probably don't need to

1331
01:11:44,060 --> 01:11:46,520
specify them again either we can

1332
01:11:45,350 --> 01:11:48,920
probably specify them once when we

1333
01:11:46,520 --> 01:11:50,840
create those textures and then just run

1334
01:11:48,920 --> 01:11:53,750
with it so really I think all we need to

1335
01:11:50,840 --> 01:11:58,100
do is this path here so what we can do

1336
01:11:53,750 --> 01:12:02,029
is say test the texture for a special

1337
01:11:58,100 --> 01:12:03,950
miss right so in here we can just say

1338
01:12:02,029 --> 01:12:06,949
alright is it a special texture that

1339
01:12:03,949 --> 01:12:09,380
you're trying to bind if it is then what

1340
01:12:06,949 --> 01:12:11,949
we need to do is create the index from

1341
01:12:09,380 --> 01:12:11,949
it so

1342
01:12:21,828 --> 01:12:26,038
here where we were just getting the

1343
01:12:23,939 --> 01:12:30,479
index out raw what we can do now is say

1344
01:12:26,038 --> 01:12:39,118
that we're gonna take and mask off that

1345
01:12:30,479 --> 01:12:45,689
texture special bit I feel like that

1346
01:12:39,118 --> 01:12:49,618
should just be an X or probably huh you

1347
01:12:45,689 --> 01:12:54,779
know my brain is just not one of those

1348
01:12:49,618 --> 01:12:59,460
brains that does algebra well like just

1349
01:12:54,779 --> 01:13:02,309
period so like really basic stuff that

1350
01:12:59,460 --> 01:13:03,828
you would think I would have known

1351
01:13:02,309 --> 01:13:05,909
because I've done it so many times I

1352
01:13:03,828 --> 01:13:09,658
still often times have to think about

1353
01:13:05,908 --> 01:13:12,629
for some reason things like geometric

1354
01:13:09,658 --> 01:13:14,308
things I don't so a lot of times I'll

1355
01:13:12,630 --> 01:13:15,719
just be like oh yeah well it's just like

1356
01:13:14,309 --> 01:13:17,070
the cross-product daunted with this and

1357
01:13:15,719 --> 01:13:18,538
like my brain just like works out the

1358
01:13:17,069 --> 01:13:20,488
entire geometric construction I can just

1359
01:13:18,538 --> 01:13:22,768
say the whole thing because the practice

1360
01:13:20,488 --> 01:13:25,948
has built up the ability to jump several

1361
01:13:22,769 --> 01:13:27,300
steps forward even with fairly complex

1362
01:13:25,948 --> 01:13:28,399
geometric things like quaternions

1363
01:13:27,300 --> 01:13:30,779
sometimes I can do that

1364
01:13:28,399 --> 01:13:33,658
algebraic things it's like the opposite

1365
01:13:30,779 --> 01:13:36,719
the simplest stupidest thing like is an

1366
01:13:33,658 --> 01:13:37,768
X or the same as an and not he is

1367
01:13:36,719 --> 01:13:39,480
something that someone who's been

1368
01:13:37,769 --> 01:13:43,469
programming for 30 years would probably

1369
01:13:39,479 --> 01:13:46,259
just know but I don't I have to actually

1370
01:13:43,469 --> 01:13:51,328
sit there every time and go like okay so

1371
01:13:46,260 --> 01:13:54,239
an X or right lifts to it an X or if

1372
01:13:51,328 --> 01:13:56,729
it's zero zero it equals one right cause

1373
01:13:54,238 --> 01:13:58,348
excluse its exclusive I'm sorry if zero

1374
01:13:56,729 --> 01:14:01,859
zero equals zero so it's exclusively or

1375
01:13:58,349 --> 01:14:04,260
right if it's 0 and 1 its 1 if it's 1

1376
01:14:01,859 --> 01:14:04,710
and 0 its 1 and if it's 1 in 1 its 0

1377
01:14:04,260 --> 01:14:06,860
right

1378
01:14:04,710 --> 01:14:11,219
because it has to be exclusively Ord

1379
01:14:06,859 --> 01:14:13,859
with the thing meaning you can't have

1380
01:14:11,219 --> 01:14:17,670
the same value in any one Lane right

1381
01:14:13,859 --> 01:14:23,670
whereas an end that not an end with a

1382
01:14:17,670 --> 01:14:25,889
knotted second parameter well an end

1383
01:14:23,670 --> 01:14:29,250
with anything that's 0 is going to be 0

1384
01:14:25,889 --> 01:14:32,069
right so and and

1385
01:14:29,250 --> 01:14:34,770
in this case yes so that's this one's

1386
01:14:32,069 --> 01:14:36,809
different right so and not in this case

1387
01:14:34,770 --> 01:14:39,060
like if I'm not that that will become a

1388
01:14:36,810 --> 01:14:42,870
zero so this would still be zero right

1389
01:14:39,060 --> 01:14:45,780
if I X or the I'm sorry if I am not the

1390
01:14:42,869 --> 01:14:48,750
one in the zero that will actually give

1391
01:14:45,779 --> 01:15:02,000
me a one and if I and not this one I

1392
01:14:48,750 --> 01:15:02,000
would get a zero as well right

1393
01:15:13,969 --> 01:15:22,670
again when I say I'm bad at this I'm not

1394
01:15:16,069 --> 01:15:24,319
kidding so correct truth table so no

1395
01:15:22,670 --> 01:15:24,710
they're not they're not saying they're

1396
01:15:24,319 --> 01:15:27,948
right

1397
01:15:24,710 --> 01:15:30,948
you get one difference in them which is

1398
01:15:27,948 --> 01:15:33,198
that the so in this case we're doing

1399
01:15:30,948 --> 01:15:37,389
like this was the original value and

1400
01:15:33,198 --> 01:15:42,349
what we're trying to do is clear out

1401
01:15:37,390 --> 01:15:44,420
where it's a 1 so if the 1 is set here I

1402
01:15:42,350 --> 01:15:46,640
want to clear it which is what's

1403
01:15:44,420 --> 01:15:49,159
happening whereas if I don't have it set

1404
01:15:46,640 --> 01:15:53,329
I don't clear it and so you can see the

1405
01:15:49,159 --> 01:15:55,849
case where it's wrong is that if I was

1406
01:15:53,329 --> 01:15:59,359
trying to clear this I will accidentally

1407
01:15:55,850 --> 01:16:04,449
set it so it's almost what I want right

1408
01:15:59,359 --> 01:16:06,409
but not quite so that comports with my

1409
01:16:04,448 --> 01:16:08,479
recollection which was sort of that no

1410
01:16:06,409 --> 01:16:10,099
you can't do that because I always write

1411
01:16:08,479 --> 01:16:12,589
it like this and I don't write it like

1412
01:16:10,100 --> 01:16:16,100
this but I just wanted to underscore

1413
01:16:12,590 --> 01:16:17,869
that because sometimes you know one of

1414
01:16:16,100 --> 01:16:20,989
the things I say a lot on handmade hero

1415
01:16:17,869 --> 01:16:23,779
is that I like to show the actual act of

1416
01:16:20,988 --> 01:16:25,968
programming 2d mythologize a lot of the

1417
01:16:23,779 --> 01:16:28,670
stuff about how good people actually are

1418
01:16:25,969 --> 01:16:31,760
or aren't because most programmers I

1419
01:16:28,670 --> 01:16:35,449
know or probably all are bad at some

1420
01:16:31,760 --> 01:16:38,030
things and make mistakes and struggle

1421
01:16:35,448 --> 01:16:40,250
with stuff all the time even the very

1422
01:16:38,029 --> 01:16:42,380
best people and I think it's usually

1423
01:16:40,250 --> 01:16:44,000
good to show that that's true because I

1424
01:16:42,380 --> 01:16:46,550
feel like some people may get

1425
01:16:44,000 --> 01:16:48,279
unrealistic expectations about how good

1426
01:16:46,550 --> 01:16:51,800
people are and they're almost always

1427
01:16:48,279 --> 01:16:54,948
inflating the their opinion of how good

1428
01:16:51,800 --> 01:16:57,770
another person actually is yes there are

1429
01:16:54,948 --> 01:17:00,710
great programmers there's no question

1430
01:16:57,770 --> 01:17:04,489
about that but even great programmers

1431
01:17:00,710 --> 01:17:06,260
struggle all the time and I get to see

1432
01:17:04,488 --> 01:17:07,759
that because I've gotten to work with

1433
01:17:06,260 --> 01:17:10,520
great programmers I think that's one of

1434
01:17:07,760 --> 01:17:13,430
the nicest things about handmade hero

1435
01:17:10,520 --> 01:17:15,290
style streaming is that now there's so

1436
01:17:13,430 --> 01:17:18,140
many people like you can go watch John

1437
01:17:15,289 --> 01:17:21,170
Blow stream who you know I mean like if

1438
01:17:18,140 --> 01:17:22,760
anyone deserves credit it's him in the

1439
01:17:21,170 --> 01:17:25,819
game industry I mean of people who have

1440
01:17:22,760 --> 01:17:28,130
done game programming he's like the top

1441
01:17:25,819 --> 01:17:29,658
right

1442
01:17:28,130 --> 01:17:31,670
you can just watch them make a mistake

1443
01:17:29,658 --> 01:17:34,429
and I feel like that's really good

1444
01:17:31,670 --> 01:17:36,500
because every time you can watch someone

1445
01:17:34,429 --> 01:17:39,380
make a mistake you're like oh okay it's

1446
01:17:36,500 --> 01:17:42,439
okay like I'm not like bad at this or

1447
01:17:39,380 --> 01:17:44,090
something this is just how it goes and

1448
01:17:42,439 --> 01:17:46,099
so I feel like the more of that we get

1449
01:17:44,090 --> 01:17:49,150
there it's like yeah you know like I've

1450
01:17:46,100 --> 01:17:51,139
been programming forever and I still

1451
01:17:49,149 --> 01:17:52,879
there's just parts of my brain they're

1452
01:17:51,139 --> 01:17:59,560
just like yep it's never gonna learn

1453
01:17:52,880 --> 01:18:01,550
that you know who knows why just isn't

1454
01:17:59,560 --> 01:18:03,199
it's gonna have to draw out a truth

1455
01:18:01,550 --> 01:18:04,610
table sometimes for stuff that you

1456
01:18:03,198 --> 01:18:07,759
should just know like you should just be

1457
01:18:04,609 --> 01:18:09,250
able to just do it and so when people

1458
01:18:07,760 --> 01:18:12,650
are just starting out and they're like

1459
01:18:09,250 --> 01:18:18,050
wow this stuff is hard it's like yeah it

1460
01:18:12,649 --> 01:18:21,170
it does get easier but it always is a

1461
01:18:18,050 --> 01:18:24,079
little hard right like even with a lot

1462
01:18:21,170 --> 01:18:27,050
of experience or even if you're a very

1463
01:18:24,079 --> 01:18:29,050
successful program or anything else

1464
01:18:27,050 --> 01:18:33,409
[Music]

1465
01:18:29,050 --> 01:18:36,590
there's always some things because it's

1466
01:18:33,408 --> 01:18:39,079
such a complicated discipline you're

1467
01:18:36,590 --> 01:18:40,940
never going to be perfect like it's just

1468
01:18:39,079 --> 01:18:43,189
not gonna happen no matter who you are I

1469
01:18:40,939 --> 01:18:45,109
don't think maybe I'm wrong about that

1470
01:18:43,189 --> 01:18:49,189
but I've never seen anybody who can

1471
01:18:45,109 --> 01:18:51,039
write so anyway long digression but it's

1472
01:18:49,189 --> 01:18:54,229
I just think that's great about

1473
01:18:51,039 --> 01:18:55,340
streaming programming because that's one

1474
01:18:54,229 --> 01:18:59,959
of the things I don't think people see

1475
01:18:55,340 --> 01:19:02,150
enough you know when you post finished

1476
01:18:59,960 --> 01:19:03,380
code on a blog or something it's just

1477
01:19:02,149 --> 01:19:04,789
you feel like it just came out of

1478
01:19:03,380 --> 01:19:07,069
nowhere and that person must be awesome

1479
01:19:04,789 --> 01:19:08,840
but no they probably made all kinds of

1480
01:19:07,069 --> 01:19:11,119
screw-ups on the way to that but you

1481
01:19:08,840 --> 01:19:13,520
just didn't see and so the streaming

1482
01:19:11,119 --> 01:19:15,679
formats so much nicer because you can

1483
01:19:13,520 --> 01:19:18,139
see the mistakes and I feel like that's

1484
01:19:15,679 --> 01:19:23,510
just really important for beginners to

1485
01:19:18,139 --> 01:19:30,380
see so they know that's not them that's

1486
01:19:23,510 --> 01:19:32,750
just programming right so anyway okay so

1487
01:19:30,380 --> 01:19:35,329
what I want to do here is I want to be

1488
01:19:32,750 --> 01:19:39,020
able to get the texture out of thing so

1489
01:19:35,329 --> 01:19:40,889
I'm going to make a texture index I'm

1490
01:19:39,020 --> 01:19:43,380
just gonna get the

1491
01:19:40,889 --> 01:19:45,179
index out of it right out of the

1492
01:19:43,380 --> 01:19:47,340
textures that we're talking about and so

1493
01:19:45,179 --> 01:19:48,989
then instead of using text or dot index

1494
01:19:47,340 --> 01:19:53,429
I'm just gonna use texture index

1495
01:19:48,988 --> 01:19:55,169
directly and that way I can know that

1496
01:19:53,429 --> 01:19:57,059
it's been masked off and it doesn't have

1497
01:19:55,170 --> 01:19:58,078
the flag on there anymore because I

1498
01:19:57,059 --> 01:20:00,420
don't really want that in there anymore

1499
01:19:58,078 --> 01:20:04,319
so now the question is well where do I

1500
01:20:00,420 --> 01:20:07,139
get the handle from right and the answer

1501
01:20:04,319 --> 01:20:10,289
is I get the handle from the get special

1502
01:20:07,139 --> 01:20:12,179
right the where is that guy the get

1503
01:20:10,289 --> 01:20:14,158
special texture handle for this guy

1504
01:20:12,179 --> 01:20:18,480
right here is where that would come from

1505
01:20:14,158 --> 01:20:21,689
right and it's actually this this code

1506
01:20:18,479 --> 01:20:25,888
right here I is what that means to start

1507
01:20:21,689 --> 01:20:27,658
with now in this case this kind of

1508
01:20:25,889 --> 01:20:28,650
becomes redundant I don't like the

1509
01:20:27,658 --> 01:20:30,899
construction that I've kind of chosen

1510
01:20:28,649 --> 01:20:32,908
there because I'm gonna end up having a

1511
01:20:30,899 --> 01:20:35,399
double call this in a kind of stupid way

1512
01:20:32,908 --> 01:20:37,979
you see what I mean in a second but when

1513
01:20:35,399 --> 01:20:40,049
I call a texture image from here that

1514
01:20:37,979 --> 01:20:44,158
strips off the index here now I need to

1515
01:20:40,050 --> 01:20:47,219
look that up I want to assert then it's

1516
01:20:44,158 --> 01:20:49,558
less than a special texture handle count

1517
01:20:47,219 --> 01:20:52,349
right which will gonna look at a little

1518
01:20:49,559 --> 01:21:02,369
bit later and then I want to just grab

1519
01:20:52,349 --> 01:21:04,828
it like so and so all I'm doing here is

1520
01:21:02,368 --> 01:21:06,448
saying all right peel it off look up

1521
01:21:04,828 --> 01:21:08,969
into an array this is the array that I

1522
01:21:06,448 --> 01:21:09,799
will allocate later and we'll go from

1523
01:21:08,969 --> 01:21:12,779
there

1524
01:21:09,800 --> 01:21:14,369
all right so let's keep going with that

1525
01:21:12,779 --> 01:21:15,899
so the reason I was saying I didn't

1526
01:21:14,368 --> 01:21:18,929
really love this is because the texture

1527
01:21:15,899 --> 01:21:22,500
index from thing here doesn't really

1528
01:21:18,929 --> 01:21:27,569
need to happen in that case so oh well I

1529
01:21:22,500 --> 01:21:30,529
guess maybe I'll do it like this and

1530
01:21:27,569 --> 01:21:30,529
like this

1531
01:21:35,979 --> 01:21:42,979
okay that's not so bad

1532
01:21:39,470 --> 01:21:44,750
seems reasonable so here we can

1533
01:21:42,979 --> 01:21:46,369
bifurcate the paths we checks you with a

1534
01:21:44,750 --> 01:21:48,380
special texture if it is a special

1535
01:21:46,369 --> 01:21:49,760
texture we will handle it by letting the

1536
01:21:48,380 --> 01:21:52,489
graphics card do whatever crazy

1537
01:21:49,760 --> 01:21:54,530
ideations wants to handle an unusually

1538
01:21:52,489 --> 01:21:55,939
sized texture that's not even power to

1539
01:21:54,529 --> 01:21:58,369
and it's a disaster and everyone's

1540
01:21:55,939 --> 01:21:59,689
unhappy but then most of the time it

1541
01:21:58,369 --> 01:22:01,279
will not be special texture so we could

1542
01:21:59,689 --> 01:22:02,629
pack it nicely into a texture array and

1543
01:22:01,279 --> 01:22:06,319
the grabs car will be pleased

1544
01:22:02,630 --> 01:22:07,819
I don't won't get mad at us right so

1545
01:22:06,319 --> 01:22:10,219
we'll do that and then what we need to

1546
01:22:07,819 --> 01:22:11,719
do is when we are actually allocating

1547
01:22:10,220 --> 01:22:14,720
our texture array in the first place

1548
01:22:11,720 --> 01:22:16,690
which is down here so when we do this GL

1549
01:22:14,720 --> 01:22:20,659
gem texture is for our texture array

1550
01:22:16,689 --> 01:22:23,750
that we need to actually create the

1551
01:22:20,659 --> 01:22:29,720
special textures as well so what we want

1552
01:22:23,750 --> 01:22:31,939
to do in this case is right here we want

1553
01:22:29,720 --> 01:22:35,030
to do the same sort of path right we

1554
01:22:31,939 --> 01:22:36,609
want to do a deal gem textures we want

1555
01:22:35,029 --> 01:22:40,210
to say say that we're going to generate

1556
01:22:36,609 --> 01:22:41,960
opengl special textual special texture

1557
01:22:40,210 --> 01:22:44,960
handles there we go

1558
01:22:41,960 --> 01:22:46,279
and we want to do the special texture

1559
01:22:44,960 --> 01:22:52,880
handle count which is going to be

1560
01:22:46,279 --> 01:22:54,259
parameterize Abul right there is so ever

1561
01:22:52,880 --> 01:22:56,960
many of these we wanted we're going to

1562
01:22:54,260 --> 01:22:58,730
generate an array of them to use and

1563
01:22:56,960 --> 01:23:00,470
then what we're going to do is for each

1564
01:22:58,729 --> 01:23:02,689
one of those we're going to set the

1565
01:23:00,470 --> 01:23:05,210
texture parameters parameters on it

1566
01:23:02,689 --> 01:23:06,710
upfront so that we don't have to set

1567
01:23:05,210 --> 01:23:08,090
them later because otherwise we'd just

1568
01:23:06,710 --> 01:23:09,800
be sitting around setting them all the

1569
01:23:08,090 --> 01:23:11,360
time

1570
01:23:09,800 --> 01:23:18,800
so what we're going to do here is bind

1571
01:23:11,359 --> 01:23:22,389
that texture up right here and inside

1572
01:23:18,800 --> 01:23:22,390
here we'll just say all right

1573
01:23:28,069 --> 01:23:44,670
loop through all of them and for each

1574
01:23:34,349 --> 01:23:48,199
one get those parameters initialized for

1575
01:23:44,670 --> 01:23:51,090
us right and that just saves us from

1576
01:23:48,198 --> 01:23:54,269
spewing unnecessary traffic down the bus

1577
01:23:51,090 --> 01:23:56,489
I mean it doesn't matter because the

1578
01:23:54,270 --> 01:23:59,219
number of textures that we're talking

1579
01:23:56,488 --> 01:24:00,479
about is so small here as you recall the

1580
01:23:59,219 --> 01:24:02,399
whole point of it is we're only gonna

1581
01:24:00,479 --> 01:24:04,289
have a few of them we certainly could

1582
01:24:02,399 --> 01:24:06,509
send them down on allocate it's not a

1583
01:24:04,289 --> 01:24:08,519
big deal but why do something

1584
01:24:06,510 --> 01:24:11,429
unnecessary when it's unnecessary and

1585
01:24:08,520 --> 01:24:13,650
it's trivial to do the right way right

1586
01:24:11,429 --> 01:24:15,029
it you know if it was some big deal I'd

1587
01:24:13,649 --> 01:24:17,158
be like yeah it's probably not worth it

1588
01:24:15,029 --> 01:24:21,988
but in this case it's so simple to do it

1589
01:24:17,158 --> 01:24:23,488
this way that it's you know what can I

1590
01:24:21,988 --> 01:24:26,488
say

1591
01:24:23,488 --> 01:24:29,759
so let's go ahead and get that stuff set

1592
01:24:26,488 --> 01:24:36,419
up so I gotta actually access the index

1593
01:24:29,760 --> 01:24:39,810
there properly so this doesn't need to

1594
01:24:36,420 --> 01:24:41,368
happen anymore because that's gonna be

1595
01:24:39,810 --> 01:24:44,760
handled and get special texture handle

1596
01:24:41,368 --> 01:24:50,039
for that needs to be moved up so that it

1597
01:24:44,760 --> 01:24:54,440
can be seen here but otherwise that's

1598
01:24:50,039 --> 01:24:58,679
easy enough and then we need to actually

1599
01:24:54,439 --> 01:25:05,269
be aware of those special texture handle

1600
01:24:58,679 --> 01:25:07,380
situations so in here we've got or I

1601
01:25:05,270 --> 01:25:11,429
think we should have there it is our

1602
01:25:07,380 --> 01:25:14,900
texture array and we've got a texture

1603
01:25:11,429 --> 01:25:16,800
handled count that we're recording I

1604
01:25:14,899 --> 01:25:25,129
think we're talking about this right

1605
01:25:16,800 --> 01:25:28,139
here right and that max texture count is

1606
01:25:25,130 --> 01:25:30,900
now needs to be augmented with also a

1607
01:25:28,139 --> 01:25:34,560
one for special textures you know what I

1608
01:25:30,899 --> 01:25:36,029
mean so in addition to the GL you meant

1609
01:25:34,560 --> 01:25:38,640
texture array here

1610
01:25:36,029 --> 01:25:41,819
we need sort of one for special textures

1611
01:25:38,640 --> 01:25:43,560
and so for right now again I don't know

1612
01:25:41,819 --> 01:25:45,539
that I necessarily care too much well

1613
01:25:43,560 --> 01:25:58,920
and trying to think of how we want to do

1614
01:25:45,539 --> 01:26:02,130
it so you know we we we do have startup

1615
01:25:58,920 --> 01:26:07,470
code that sets the texture handle count

1616
01:26:02,130 --> 01:26:26,819
I believe right I mean you can pass that

1617
01:26:07,470 --> 01:26:32,720
in I think so you write because there's

1618
01:26:26,819 --> 01:26:32,719
a max there's a max texture count here

1619
01:26:39,130 --> 01:26:48,739
so it seems like we should probably let

1620
01:26:46,010 --> 01:26:50,480
you say the maximum number of quads you

1621
01:26:48,738 --> 01:26:52,488
want to handle the maximum number of

1622
01:26:50,479 --> 01:26:57,229
textures and the maximum number of

1623
01:26:52,488 --> 01:27:18,619
special textures I can't think of a

1624
01:26:57,229 --> 01:27:20,539
reason not to do this so yeah so that's

1625
01:27:18,619 --> 01:27:24,710
gonna say let's say that you get to pass

1626
01:27:20,539 --> 01:27:27,679
that max special texture count so when

1627
01:27:24,710 --> 01:27:29,719
you create one of these you can say max

1628
01:27:27,679 --> 01:27:32,630
special texture count equals max special

1629
01:27:29,719 --> 01:27:34,969
texture count right and that'll get

1630
01:27:32,630 --> 01:27:39,020
allocated up for you

1631
01:27:34,969 --> 01:27:47,948
I guess one question I have is in terms

1632
01:27:39,020 --> 01:27:50,989
of the texture op q do we yeah I mean

1633
01:27:47,948 --> 01:27:52,189
seems reasonable so let's just go with

1634
01:27:50,988 --> 01:27:55,849
that and we'll see if I had any

1635
01:27:52,189 --> 01:28:00,669
nastiness is so that seems reasonable we

1636
01:27:55,850 --> 01:28:06,409
can also say max quad texture count max

1637
01:28:00,670 --> 01:28:09,109
quad count the frame and the mascot

1638
01:28:06,408 --> 01:28:13,869
proper frame here it's just literally

1639
01:28:09,109 --> 01:28:13,869
that this will also let us

1640
01:28:20,368 --> 01:28:38,078
allocate the array that we need to for

1641
01:28:23,139 --> 01:28:44,729
storing the open gel arrays here oh we

1642
01:28:38,078 --> 01:28:44,728
still do it this is actually still here

1643
01:28:51,458 --> 01:29:00,269
right so that didn't appareil we never

1644
01:28:57,130 --> 01:29:04,719
stopped allocating it it's still there

1645
01:29:00,269 --> 01:29:18,570
so we can just use that right we just

1646
01:29:04,719 --> 01:29:23,198
don't need as many yeah that's too many

1647
01:29:18,569 --> 01:29:33,069
we don't actually need that many so I

1648
01:29:23,198 --> 01:30:03,248
might I'm not totally sure I feel about

1649
01:29:33,069 --> 01:30:06,518
that I'm gonna can note about that so

1650
01:30:03,248 --> 01:30:10,510
I'll just leave it this way for now

1651
01:30:06,519 --> 01:30:13,360
and we'll deal with that a little bit

1652
01:30:10,510 --> 01:30:16,360
later so the other thing that I do need

1653
01:30:13,359 --> 01:30:18,819
to do here though is since we don't know

1654
01:30:16,359 --> 01:30:23,469
how many of those they've asked for we

1655
01:30:18,819 --> 01:30:31,389
do still need to be because we are going

1656
01:30:23,469 --> 01:30:35,880
to have a max special texture right we

1657
01:30:31,389 --> 01:30:35,880
need to have an array here for those

1658
01:30:38,689 --> 01:30:43,519
I also these are not actually these

1659
01:30:41,988 --> 01:30:45,379
actually don't change when the say so

1660
01:30:43,520 --> 01:30:47,540
these really shouldn't be in the dynamic

1661
01:30:45,380 --> 01:30:51,699
resources section because these don't

1662
01:30:47,539 --> 01:30:51,698
change they're actually the same right

1663
01:30:54,369 --> 01:31:02,420
this is kind of not true the push buffer

1664
01:31:00,500 --> 01:31:03,890
memory and the vertex are a bitmap array

1665
01:31:02,420 --> 01:31:07,060
index array all that stuff gets

1666
01:31:03,890 --> 01:31:07,060
allocated actually one time

1667
01:31:17,479 --> 01:31:23,119
so I think that's a little bit more

1668
01:31:19,130 --> 01:31:25,730
accurate right so what we need to do

1669
01:31:23,119 --> 01:31:32,539
here is specify one of these texture

1670
01:31:25,729 --> 01:31:34,399
arrays for the special textures and we

1671
01:31:32,539 --> 01:31:40,909
also need to have some way of saying how

1672
01:31:34,399 --> 01:31:43,369
many there are so once we have those

1673
01:31:40,909 --> 01:31:45,079
then in here we can also do sort of the

1674
01:31:43,369 --> 01:31:48,760
exact same thing we did here which is

1675
01:31:45,079 --> 01:31:55,579
say alright special texture handles

1676
01:31:48,760 --> 01:32:02,449
equals do you in Star Max special

1677
01:31:55,579 --> 01:32:06,470
texture count times size of and that way

1678
01:32:02,449 --> 01:32:09,970
you can have as many as you want and we

1679
01:32:06,470 --> 01:32:12,579
will allocate those specifically for you

1680
01:32:09,970 --> 01:32:15,500
and they don't have to be a fixed number

1681
01:32:12,579 --> 01:32:19,579
so when that comes in that'll just kind

1682
01:32:15,500 --> 01:32:21,609
of work right and we should be good to

1683
01:32:19,579 --> 01:32:21,609
go

1684
01:32:40,329 --> 01:32:59,390
that this is one line up and okay so

1685
01:32:57,260 --> 01:33:00,739
let's see here

1686
01:32:59,390 --> 01:33:08,840
special Dijkstra handle count this is

1687
01:33:00,738 --> 01:33:12,709
actually Mac's special texture count but

1688
01:33:08,840 --> 01:33:18,770
I think that's otherwise good that is

1689
01:33:12,710 --> 01:33:21,020
not that that's just a pointer and so

1690
01:33:18,770 --> 01:33:23,989
now we're allocating those the render

1691
01:33:21,020 --> 01:33:26,989
commands themselves though when we do

1692
01:33:23,988 --> 01:33:30,948
begin frame is going to need to have the

1693
01:33:26,988 --> 01:33:33,229
new settings properly accounted for so

1694
01:33:30,948 --> 01:33:39,678
we do need to do a couple of things here

1695
01:33:33,229 --> 01:33:48,049
we need to set this stuff up so the max

1696
01:33:39,679 --> 01:33:55,699
quad texture count the quad texture

1697
01:33:48,050 --> 01:34:01,640
count and the quad textures have to be

1698
01:33:55,698 --> 01:34:04,279
set properly so the max quad texture

1699
01:34:01,640 --> 01:34:10,219
count is really just the same as the

1700
01:34:04,279 --> 01:34:16,159
number of actual quads you can stuff

1701
01:34:10,219 --> 01:34:19,159
down I don't know if we saved that

1702
01:34:16,159 --> 01:34:22,389
anywhere I hope we did it didn't so

1703
01:34:19,159 --> 01:34:22,389
we'll have to just save that

1704
01:34:27,600 --> 01:34:34,030
what I could do is say max quad texture

1705
01:34:30,369 --> 01:34:36,519
count is actually a thing and we're

1706
01:34:34,029 --> 01:34:39,489
gonna use it and then I'll just set that

1707
01:34:36,520 --> 01:34:50,590
when we actually set the rest of our

1708
01:34:39,489 --> 01:35:06,099
stuff kind of the way that I was going

1709
01:34:50,590 --> 01:35:07,510
to do it there so like that so that kind

1710
01:35:06,100 --> 01:35:11,050
of sets up the aperture and gets

1711
01:35:07,510 --> 01:35:13,480
everything ready to go and so now really

1712
01:35:11,050 --> 01:35:17,590
what we need to do is make sure we can

1713
01:35:13,479 --> 01:35:21,159
actually get that from somewhere we do

1714
01:35:17,590 --> 01:35:23,039
have sort of a renderer definition here

1715
01:35:21,159 --> 01:35:25,149
[Music]

1716
01:35:23,039 --> 01:35:30,130
don't remember where this is actually

1717
01:35:25,149 --> 01:35:34,239
specified we've got some kind of a

1718
01:35:30,130 --> 01:35:35,710
platform layer specification for it but

1719
01:35:34,239 --> 01:35:40,769
let me go ahead and look here so

1720
01:35:35,710 --> 01:35:40,770
renderer where do we specify this stuff

1721
01:35:41,369 --> 01:35:49,800
so it's so it is just in here I guess or

1722
01:35:46,750 --> 01:35:49,800
seen it stuff not in here

1723
01:36:11,158 --> 01:36:15,098
alright so it's in Windsor two-handed

1724
01:36:13,538 --> 01:36:16,958
okay so it is just it's just this

1725
01:36:15,099 --> 01:36:18,939
specification here yeah so we can just

1726
01:36:16,958 --> 01:36:21,068
say max special texture count as

1727
01:36:18,939 --> 01:36:32,619
additional parameter that you have to

1728
01:36:21,069 --> 01:36:35,559
provide and then everybody who was

1729
01:36:32,618 --> 01:36:41,318
previously calling something there

1730
01:36:35,559 --> 01:36:43,179
so this doesn't use one so it wouldn't

1731
01:36:41,319 --> 01:36:55,149
care whereas handmade here oh it does

1732
01:36:43,179 --> 01:36:59,878
use one so it needs to say hey we're

1733
01:36:55,149 --> 01:36:59,878
going to use up to 16 of these

1734
01:37:11,569 --> 01:37:25,439
in terms of the texture up cube I really

1735
01:37:22,649 --> 01:37:29,009
want the texture up queue to have that

1736
01:37:25,439 --> 01:37:32,639
information in it but it seems like that

1737
01:37:29,010 --> 01:37:34,739
maybe not that likely right because it's

1738
01:37:32,640 --> 01:37:39,500
separate it's just a cue that's separate

1739
01:37:34,739 --> 01:37:39,500
from the renderer and so it's like

1740
01:37:40,760 --> 01:37:49,470
someone would just have to let copy it

1741
01:37:45,449 --> 01:38:01,229
in there and I just don't know if that

1742
01:37:49,470 --> 01:38:04,520
makes much sense you know i'm santi so I

1743
01:38:01,229 --> 01:38:04,519
kind of feel like

1744
01:38:10,229 --> 01:38:13,889
I kind of feel like these should just be

1745
01:38:12,659 --> 01:38:15,689
separate from it so I think I'm gonna

1746
01:38:13,890 --> 01:38:19,800
have to not do it that way because it

1747
01:38:15,689 --> 01:38:24,000
just doesn't just feels like I'm shoving

1748
01:38:19,800 --> 01:38:30,810
sort of stuff through where it shouldn't

1749
01:38:24,000 --> 01:38:34,079
really go so I do feel like maybe you

1750
01:38:30,810 --> 01:38:38,520
know maybe that stuff has to be put into

1751
01:38:34,079 --> 01:38:40,949
a better location so if the game assets

1752
01:38:38,520 --> 01:38:54,780
we're gonna have that stored separately

1753
01:38:40,949 --> 01:38:56,760
right then I just need to pass those

1754
01:38:54,779 --> 01:38:59,309
down and I think the way I could do that

1755
01:38:56,760 --> 01:39:01,619
is right now it could just be a pound of

1756
01:38:59,310 --> 01:39:03,060
fine because handmade Hiro is gonna use

1757
01:39:01,619 --> 01:39:06,359
however many it's going to use and it

1758
01:39:03,060 --> 01:39:08,190
really won't change so I think that can

1759
01:39:06,359 --> 01:39:10,469
just be a pound to find that's sort of

1760
01:39:08,189 --> 01:39:14,488
used at initialization time in both

1761
01:39:10,470 --> 01:39:19,619
places and that would be fine so I think

1762
01:39:14,488 --> 01:39:25,079
that's probably fine and wouldn't really

1763
01:39:19,619 --> 01:39:30,300
cause a problem so inside here where we

1764
01:39:25,079 --> 01:39:35,180
actually do the initialization I feel

1765
01:39:30,300 --> 01:39:35,180
like that's okay so you know

1766
01:39:43,059 --> 01:39:47,590
yeah I mean I think that's what I would

1767
01:39:45,670 --> 01:39:50,679
go with for now don't really see much

1768
01:39:47,590 --> 01:39:56,050
point in doing it a different way so

1769
01:39:50,679 --> 01:40:10,929
here you just say look the normal

1770
01:39:56,050 --> 01:40:15,250
texture NACA handmade we could just set

1771
01:40:10,929 --> 01:40:17,440
those those that way maybe in the future

1772
01:40:15,250 --> 01:40:19,689
we make them be more dynamic than that

1773
01:40:17,439 --> 01:40:22,388
but the important part to me is that the

1774
01:40:19,689 --> 01:40:26,259
renderer can be started up in either way

1775
01:40:22,389 --> 01:40:28,359
I just need to make sure those are the

1776
01:40:26,260 --> 01:40:30,010
same across each one's because then in

1777
01:40:28,359 --> 01:40:33,609
the future we could do it a different

1778
01:40:30,010 --> 01:40:37,510
way if we want to and make that into a

1779
01:40:33,609 --> 01:40:44,288
more parameterised thing right so that's

1780
01:40:37,510 --> 01:40:46,179
probably fine so inside handmade H I'll

1781
01:40:44,288 --> 01:40:48,689
just make some pound of fines for this

1782
01:40:46,179 --> 01:40:48,690
at the moment

1783
01:40:58,050 --> 01:41:01,840
see what I include inside when teaching

1784
01:41:00,699 --> 01:41:09,099
handmade because that's where it's gonna

1785
01:41:01,840 --> 01:41:11,610
have to get used right so much went

1786
01:41:09,100 --> 01:41:11,610
through to code

1787
01:41:30,630 --> 01:41:57,319
so yeah I mean I'm not really sure

1788
01:41:33,149 --> 01:41:59,429
exactly where they should live it's

1789
01:41:57,319 --> 01:42:02,309
something that we're probably gonna want

1790
01:41:59,430 --> 01:42:03,750
to fix I just don't have a clear idea of

1791
01:42:02,310 --> 01:42:06,570
how that would get past you at the

1792
01:42:03,750 --> 01:42:12,449
moment it could be something that comes

1793
01:42:06,569 --> 01:42:15,329
in and in the game input or something

1794
01:42:12,449 --> 01:42:19,590
like this or in the game sort of the way

1795
01:42:15,329 --> 01:42:21,619
the game gets started up I'm just not

1796
01:42:19,590 --> 01:42:21,619
sure

1797
01:42:38,078 --> 01:42:47,479
so I think this will probably be changed

1798
01:42:40,609 --> 01:42:55,098
eventually but that's roughly what it

1799
01:42:47,479 --> 01:42:56,779
would be currently so alright there's a

1800
01:42:55,099 --> 01:42:59,659
quite a bit of stuff that has to happen

1801
01:42:56,779 --> 01:43:01,219
there and so we kind of got a look

1802
01:42:59,658 --> 01:43:04,759
through this a little bit more carefully

1803
01:43:01,219 --> 01:43:08,689
here but that's basically what's going

1804
01:43:04,760 --> 01:43:15,469
on what did we what happened here

1805
01:43:08,689 --> 01:43:17,808
I should hole a second sorry I just want

1806
01:43:15,469 --> 01:43:20,260
to switch to debug mode so we can have

1807
01:43:17,809 --> 01:43:20,260
an easier time

1808
01:43:27,689 --> 01:43:45,529
so let's just take a look here what's

1809
01:43:30,779 --> 01:43:45,529
our max special texture cap 16

1810
01:43:45,988 --> 01:43:56,939
what's our special handles like oh so

1811
01:43:54,448 --> 01:44:00,598
did that not get allocated I thought I

1812
01:43:56,939 --> 01:44:02,698
did I probably just made a slight

1813
01:44:00,599 --> 01:44:10,650
mistake there and didn't even though I

1814
01:44:02,698 --> 01:44:11,428
thought I did ah this is in the wrong

1815
01:44:10,649 --> 01:44:14,538
place

1816
01:44:11,429 --> 01:44:19,230
that is the problem there so these

1817
01:44:14,538 --> 01:44:21,840
probably should happen before the open

1818
01:44:19,229 --> 01:44:24,479
jail in it right I should probably do

1819
01:44:21,840 --> 01:44:30,199
them here so we can have everything

1820
01:44:24,479 --> 01:44:30,198
allocated up that might get used

1821
01:44:43,260 --> 01:44:48,449
so there that now can operate properly

1822
01:44:48,750 --> 01:44:54,010
so it looks like you know nominally

1823
01:44:52,090 --> 01:44:57,429
working right like it didn't crash and

1824
01:44:54,010 --> 01:44:59,050
it's showing textures but we don't

1825
01:44:57,429 --> 01:45:00,550
really know to what extent it's actually

1826
01:44:59,050 --> 01:45:04,449
working right we haven't like looked at

1827
01:45:00,550 --> 01:45:05,829
any of that stuff so we probably want to

1828
01:45:04,448 --> 01:45:09,569
do now is start like stepping through

1829
01:45:05,829 --> 01:45:11,889
some of that code and make sure that we

1830
01:45:09,569 --> 01:45:18,488
like we're kind of out of time for days

1831
01:45:11,889 --> 01:45:21,000
so maybe I'll do it tomorrow but it

1832
01:45:18,488 --> 01:45:23,319
looks like it's not correctly picking

1833
01:45:21,000 --> 01:45:24,939
special texture here because you can see

1834
01:45:23,319 --> 01:45:30,448
that index does not have the high bit

1835
01:45:24,939 --> 01:45:30,448
set so yeah

1836
01:45:33,868 --> 01:45:39,250
looks like that's our primary problem

1837
01:45:36,579 --> 01:45:40,359
here let me just quickly fix that since

1838
01:45:39,250 --> 01:45:41,829
we know it's a problem and then we'll

1839
01:45:40,359 --> 01:45:44,198
wrap it up for today and we'll do the

1840
01:45:41,829 --> 01:45:45,609
debugging work tomorrow since everything

1841
01:45:44,198 --> 01:45:47,829
still runs just not the cutscenes which

1842
01:45:45,609 --> 01:45:50,039
is the same way we started the day so

1843
01:45:47,829 --> 01:45:54,238
it's not like we're breaking anything

1844
01:45:50,039 --> 01:46:01,210
we just haven't finished fixing it so

1845
01:45:54,238 --> 01:46:02,379
yeah special textures dimensions of cry

1846
01:46:01,210 --> 01:46:05,829
switch textures takes the width and the

1847
01:46:02,380 --> 01:46:13,329
height looks to see whether or not it

1848
01:46:05,829 --> 01:46:17,948
needs to use a dynamic one generates a

1849
01:46:13,329 --> 01:46:20,219
special texture handle here based on

1850
01:46:17,948 --> 01:46:20,219
that

1851
01:46:34,010 --> 01:46:38,940
so I don't see anything obviously wrong

1852
01:46:36,810 --> 01:46:43,140
there let's take a look in the debugger

1853
01:46:38,939 --> 01:46:45,149
real quick just to see what's going on

1854
01:46:43,140 --> 01:46:51,450
with that so let's go into load bitmap

1855
01:46:45,149 --> 01:46:55,049
here and just take a look at what

1856
01:46:51,449 --> 01:46:59,130
happens when it goes through this code

1857
01:46:55,050 --> 01:47:01,380
path so you know we're looking in here

1858
01:46:59,130 --> 01:47:04,050
and we've got a width of 144 or height

1859
01:47:01,380 --> 01:47:06,260
of yeah I mean you see what's going on

1860
01:47:04,050 --> 01:47:06,260
there

1861
01:47:06,329 --> 01:47:12,479
and so you know all of these for the

1862
01:47:10,170 --> 01:47:20,789
initial set of textures are all going to

1863
01:47:12,479 --> 01:47:25,399
be you know they're gonna be small this

1864
01:47:20,789 --> 01:47:29,340
is fonts and junk probably right so that

1865
01:47:25,399 --> 01:47:32,639
does its thing and then when we go to

1866
01:47:29,340 --> 01:47:36,630
the cutscenes we need to take a look and

1867
01:47:32,640 --> 01:47:39,600
see what's happening on the large ones

1868
01:47:36,630 --> 01:47:42,210
is something not tagging those textures

1869
01:47:39,600 --> 01:47:44,579
properly or what so here's our bitmap

1870
01:47:42,210 --> 01:47:52,079
the width and height are obviously too

1871
01:47:44,579 --> 01:47:55,819
large up well that's initial screw-up

1872
01:47:52,079 --> 01:47:58,380
that should be an or right not an and

1873
01:47:55,819 --> 01:48:03,439
you know what Allen Webster was talking

1874
01:47:58,380 --> 01:48:10,020
about this very bug maybe not this one

1875
01:48:03,439 --> 01:48:11,399
but a closely related book in this case

1876
01:48:10,020 --> 01:48:13,800
though it doesn't matter because they

1877
01:48:11,399 --> 01:48:18,989
are both larger than 512 so the result

1878
01:48:13,800 --> 01:48:24,900
is true so it comes in here I it says

1879
01:48:18,989 --> 01:48:29,460
look let's get a special texture for a

1880
01:48:24,899 --> 01:48:31,559
texture handle 0 it says all right let's

1881
01:48:29,460 --> 01:48:35,130
compute a result by Oregon the texture

1882
01:48:31,560 --> 01:48:38,400
bit there it is out pops the texture

1883
01:48:35,130 --> 01:48:41,930
handle it's that right so then we're

1884
01:48:38,399 --> 01:48:41,929
going to do refer to texture

1885
01:48:49,550 --> 01:48:54,779
and it sure seems right so I wonder if

1886
01:48:52,949 --> 01:48:57,139
it's just the and let's see where what

1887
01:48:54,779 --> 01:49:01,769
is the dimension we actually crash on

1888
01:48:57,140 --> 01:49:03,680
because maybe it is just the end yes

1889
01:49:01,770 --> 01:49:07,800
it's just because the height was lower

1890
01:49:03,680 --> 01:49:11,360
so it was just because of this and

1891
01:49:07,800 --> 01:49:11,360
should have been or there right

1892
01:49:21,448 --> 01:49:33,789
yeah so it did look like the other parts

1893
01:49:28,569 --> 01:49:38,170
we're working okay no I don't know that

1894
01:49:33,789 --> 01:49:46,179
they actually are but you know what is

1895
01:49:38,170 --> 01:49:59,520
this why are we still you 16 in that so

1896
01:49:46,179 --> 01:50:02,739
that's not right that oh wait a minute

1897
01:49:59,520 --> 01:50:06,159
that is probably because we pack it into

1898
01:50:02,738 --> 01:50:14,158
16 bits instead of 32 for setting it

1899
01:50:06,158 --> 01:50:14,158
down so that's actually fine

1900
01:50:34,229 --> 01:50:40,589
this assert doesn't actually catch the

1901
01:50:37,590 --> 01:50:44,909
bug any particular bug so it's actually

1902
01:50:40,590 --> 01:51:04,170
fine what we want to do here is sort of

1903
01:50:44,909 --> 01:51:15,479
say like this so once you peel off the

1904
01:51:04,170 --> 01:51:17,369
special handle like right because if you

1905
01:51:15,479 --> 01:51:19,679
do want to pack it into 16 you totally

1906
01:51:17,369 --> 01:51:21,090
can it's just you have to have peeled

1907
01:51:19,680 --> 01:51:22,860
off a special handle otherwise you'll

1908
01:51:21,090 --> 01:51:26,159
think that it doesn't match anymore

1909
01:51:22,859 --> 01:51:37,139
because hey a 16-bit number can't equal

1910
01:51:26,159 --> 01:51:39,500
the 32-bit number right so that is not

1911
01:51:37,140 --> 01:51:39,500
good

1912
01:51:46,889 --> 01:51:53,260
so index array offset is boat so I said

1913
01:51:51,760 --> 01:51:54,579
we were gonna bug this tomorrow I guess

1914
01:51:53,260 --> 01:51:56,050
I lied I'm just debugging it now

1915
01:51:54,578 --> 01:51:58,420
probably because these have all been

1916
01:51:56,050 --> 01:51:59,110
really obvious bugs so you just tend to

1917
01:51:58,420 --> 01:52:01,149
want to fix them

1918
01:51:59,109 --> 01:52:03,359
we've probably changed the meaning of

1919
01:52:01,149 --> 01:52:03,359
this

1920
01:52:16,539 --> 01:52:31,060
although I can't say that it looks like

1921
01:52:20,750 --> 01:52:31,060
we did hmm so

1922
01:52:34,279 --> 01:52:38,739
the entry just looks straight-up bogus

1923
01:52:44,850 --> 01:52:55,880
whereas nothing else does well that kind

1924
01:52:51,750 --> 01:52:55,880
of does that's not a special texture

1925
01:53:00,059 --> 01:53:05,900
so we does kind of look bogus actually

1926
01:53:11,779 --> 01:53:21,210
this on the other hand looks fine so

1927
01:53:19,229 --> 01:53:29,428
it's not total garbage

1928
01:53:21,210 --> 01:53:35,750
but it's kind of garbage II let's take a

1929
01:53:29,429 --> 01:53:45,210
look here what is going on real quick I

1930
01:53:35,750 --> 01:53:47,639
would just like to see so we set this up

1931
01:53:45,210 --> 01:53:49,618
to be the quad texture count and zero

1932
01:53:47,639 --> 01:53:53,489
and Max Tucker's all that stuff makes

1933
01:53:49,618 --> 01:53:58,788
sense indexed array and all that it's

1934
01:53:53,488 --> 01:54:04,288
good stuff looks good get current quads

1935
01:53:58,788 --> 01:54:07,050
looks at the batching here if you can't

1936
01:54:04,288 --> 01:54:11,929
fit the number of quads it'll reset if

1937
01:54:07,050 --> 01:54:11,929
it needs a special texture it will reset

1938
01:54:15,439 --> 01:54:20,058
and if it has to allocate Oh

1939
01:54:25,930 --> 01:54:42,079
why is it not setting the index array

1940
01:54:31,699 --> 01:54:49,519
offset there so this may have just been

1941
01:54:42,079 --> 01:55:01,609
in a bug we had before that didn't rear

1942
01:54:49,520 --> 01:55:08,469
its head till now because it looks like

1943
01:55:01,609 --> 01:55:08,469
we never use index array offset actually

1944
01:55:09,670 --> 01:55:17,289
and it was probably just getting set to

1945
01:55:12,710 --> 01:55:17,289
zero by happenstance I'm guessing I

1946
01:55:20,800 --> 01:55:26,510
don't know if that's exactly correct but

1947
01:55:23,960 --> 01:55:27,590
it certainly seems like we should be

1948
01:55:26,510 --> 01:55:29,420
doing that ie

1949
01:55:27,590 --> 01:55:38,569
and if you look at how we're using it

1950
01:55:29,420 --> 01:55:44,449
here right we are doing that now this

1951
01:55:38,569 --> 01:55:47,210
needs to be changed slightly so we do

1952
01:55:44,449 --> 01:55:49,519
need to we do need to have that routine

1953
01:55:47,210 --> 01:55:52,000
work a little bit because now the those

1954
01:55:49,520 --> 01:55:56,300
arrays don't line up one-to-one right

1955
01:55:52,000 --> 01:56:02,060
and so we do kind of need to say well

1956
01:55:56,300 --> 01:56:04,159
alright let's just do the index arrayed

1957
01:56:02,060 --> 01:56:07,910
directly over the quad count and we'll

1958
01:56:04,159 --> 01:56:14,380
take the index array offset and add it

1959
01:56:07,909 --> 01:56:14,380
in right so right here we'll do that

1960
01:56:15,579 --> 01:56:24,039
because this needs to be able to do the

1961
01:56:21,050 --> 01:56:24,039
diff by 6 there

1962
01:56:30,649 --> 01:56:34,789
furthermore it's unclear that we really

1963
01:56:32,989 --> 01:56:54,380
want to do that I mean why not do this

1964
01:56:34,789 --> 01:56:59,500
right so let's loop over the quad count

1965
01:56:54,380 --> 01:57:13,760
the index is just going to be the offset

1966
01:56:59,500 --> 01:57:15,350
of the clawed index times six right so

1967
01:57:13,760 --> 01:57:17,510
we just say look start where we're going

1968
01:57:15,350 --> 01:57:20,030
to start and for every quad we go six

1969
01:57:17,510 --> 01:57:23,000
forward then that way this is just a

1970
01:57:20,029 --> 01:57:26,059
direct index into quad texture is no

1971
01:57:23,000 --> 01:57:30,770
divide and then the draw elements call

1972
01:57:26,060 --> 01:57:34,610
just works using the same stuff we were

1973
01:57:30,770 --> 01:57:39,470
using before right so we just say yeah

1974
01:57:34,609 --> 01:57:45,289
like that seemed saner to me it was a

1975
01:57:39,470 --> 01:57:47,420
little bit contorted before so that must

1976
01:57:45,289 --> 01:57:51,739
have just been a bug we just overlooked

1977
01:57:47,420 --> 01:57:55,550
it when we finished last time a month

1978
01:57:51,739 --> 01:57:57,109
ago on our last stream before a break we

1979
01:57:55,550 --> 01:57:58,610
probably just overlooked that because we

1980
01:57:57,109 --> 01:58:01,009
were only ever doing one dispatch

1981
01:57:58,609 --> 01:58:04,479
because the entire game was being drawn

1982
01:58:01,010 --> 01:58:06,590
with a single dispatch right and so now

1983
01:58:04,479 --> 01:58:08,929
that we're drawing multiple dispatches

1984
01:58:06,590 --> 01:58:10,880
we need to do that now unfortunately we

1985
01:58:08,930 --> 01:58:15,200
aren't seeing anything which is not

1986
01:58:10,880 --> 01:58:17,900
great but we're not crashing so now we

1987
01:58:15,199 --> 01:58:21,079
know we are actually at least using the

1988
01:58:17,899 --> 01:58:26,089
textures a little bit more correctly my

1989
01:58:21,079 --> 01:58:29,859
assumption is that probably we just have

1990
01:58:26,090 --> 01:58:32,000
a slight few issues with how where's

1991
01:58:29,859 --> 01:58:34,579
maybe submitting the textures or

1992
01:58:32,000 --> 01:58:37,159
something pretty basic it probably won't

1993
01:58:34,579 --> 01:58:39,550
be too hard to finish this off and get

1994
01:58:37,159 --> 01:58:43,779
to a point where this is working

1995
01:58:39,550 --> 01:58:47,989
but now I probably should save it for

1996
01:58:43,779 --> 01:58:50,239
another day because I suspect this will

1997
01:58:47,989 --> 01:58:51,590
now be somewhere we got to kind of look

1998
01:58:50,239 --> 01:58:53,510
at the open jail a little bit more

1999
01:58:51,590 --> 01:58:58,039
carefully which as you know is always a

2000
01:58:53,510 --> 01:59:03,829
little bit of a adventure so probably

2001
01:58:58,039 --> 01:59:06,939
don't want to do too much more let me

2002
01:59:03,829 --> 01:59:06,939
just take a quick look

2003
01:59:28,180 --> 01:59:37,380
where we set these up where is my there

2004
01:59:35,199 --> 01:59:37,380
it is

2005
01:59:45,789 --> 01:59:56,470
yeah so I mean it seems reasonable so

2006
01:59:54,909 --> 01:59:58,119
yeah I don't see anything obviously

2007
01:59:56,470 --> 02:00:01,240
wrong so I'm suspecting we'll have to do

2008
01:59:58,119 --> 02:00:11,039
a little bit more hardcore checking on

2009
02:00:01,239 --> 02:00:11,039
that just to make sure

2010
02:00:22,210 --> 02:00:26,439
I must set a breakpoint in here real

2011
02:00:25,029 --> 02:00:31,719
quick just to take a look at what it

2012
02:00:26,439 --> 02:00:34,089
looks like and again that path never

2013
02:00:31,720 --> 02:00:36,510
gets hit it's just it's only in the

2014
02:00:34,090 --> 02:00:36,510
cutscenes

2015
02:00:43,439 --> 02:00:50,888
all right so we take a look here at the

2016
02:00:47,439 --> 02:00:54,598
index that we're drawing it's zero take

2017
02:00:50,889 --> 02:00:58,109
a look at the texture it's zero that's

2018
02:00:54,599 --> 02:01:07,139
width and height of zero I'm not sure

2019
02:00:58,109 --> 02:01:10,658
doesn't quite sound correct here oh hey

2020
02:01:07,139 --> 02:01:14,559
one thing we might want to do is when

2021
02:01:10,658 --> 02:01:20,920
you actually push a quad on there you

2022
02:01:14,559 --> 02:01:22,270
might want to push one onto the you

2023
02:01:20,920 --> 02:01:24,670
might want to actually record the

2024
02:01:22,270 --> 02:01:40,750
texture that you're using which we did

2025
02:01:24,670 --> 02:01:45,489
not do oops I so yeah what we could do

2026
02:01:40,750 --> 02:02:03,760
here is say look we get the current

2027
02:01:45,488 --> 02:02:06,058
quads we can say if it's special push it

2028
02:02:03,760 --> 02:02:06,059
on there

2029
02:02:07,029 --> 02:02:33,309
I think we can just do this I think I do

2030
02:02:32,050 --> 02:02:35,829
not want anyone to quote me on that

2031
02:02:33,309 --> 02:02:38,469
because it's sort of a vague feeling I

2032
02:02:35,828 --> 02:02:41,558
have that I can do that it's sort of a

2033
02:02:38,469 --> 02:02:45,300
premonition rather than a actually

2034
02:02:41,559 --> 02:02:45,300
scientifically thought through thing

2035
02:02:50,550 --> 02:02:54,179
that looks a lot better

2036
02:02:58,288 --> 02:03:09,059
well it looked a lot better in the code

2037
02:03:03,750 --> 02:03:11,170
it doesn't look any better in the game I

2038
02:03:09,059 --> 02:03:15,610
said I was gonna stop programming and I

2039
02:03:11,170 --> 02:03:18,569
didn't did I I lied I completely it was

2040
02:03:15,609 --> 02:03:18,569
like a bald-faced lie

2041
02:03:25,399 --> 02:03:30,779
so I really will stop now I just I

2042
02:03:28,560 --> 02:03:33,450
sometimes it's a little obsessive you

2043
02:03:30,779 --> 02:03:37,529
know what I'm saying so this is binding

2044
02:03:33,449 --> 02:03:42,319
texture drawing elements once I short

2045
02:03:37,529 --> 02:03:45,179
off the index index of zero and we did

2046
02:03:42,319 --> 02:03:47,309
bind those right so they should be

2047
02:03:45,180 --> 02:03:48,810
correct all right so I'll I'll leave it

2048
02:03:47,310 --> 02:03:50,520
there I'll leave it there let's go to a

2049
02:03:48,810 --> 02:03:52,110
brief Q&amp;A and I will leave it there we

2050
02:03:50,520 --> 02:03:55,410
will come back to it I keep saying I was

2051
02:03:52,109 --> 02:03:57,809
gonna stop I didn't stop we will come

2052
02:03:55,409 --> 02:04:01,680
back to it tomorrow and we'll debug why

2053
02:03:57,810 --> 02:04:03,360
we're not getting think we've done

2054
02:04:01,680 --> 02:04:05,750
everything else but we did make a lot of

2055
02:04:03,359 --> 02:04:05,750
changes

2056
02:04:16,020 --> 02:04:26,070
commands should be entry online where it

2057
02:04:18,810 --> 02:04:28,469
breaks commands with left / right you

2058
02:04:26,069 --> 02:04:30,750
are I still don't think that helps us

2059
02:04:28,469 --> 02:04:33,510
because it's it's probably the first one

2060
02:04:30,750 --> 02:04:37,609
but so I think we're still probably

2061
02:04:33,510 --> 02:04:37,610
broken but that step you're you're right

2062
02:04:55,599 --> 02:05:03,130
yeah we shall sit me still I think

2063
02:04:58,510 --> 02:05:04,719
should have seen one bitmap if so I

2064
02:05:03,130 --> 02:05:09,670
think we probably still have another bug

2065
02:05:04,719 --> 02:05:10,929
unfortunately I wish that were the only

2066
02:05:09,670 --> 02:05:20,319
one but I don't I don't think it's

2067
02:05:10,929 --> 02:05:22,270
enough good caps though yeah because we

2068
02:05:20,319 --> 02:05:23,380
would have seen one bitmap is what would

2069
02:05:22,270 --> 02:05:27,420
have happened in that case we would have

2070
02:05:23,380 --> 02:05:27,420
always drawn with bitmap zero right

2071
02:05:32,039 --> 02:05:38,649
probably would have seen more actually

2072
02:05:34,029 --> 02:05:49,149
now I think about it yeah just not quite

2073
02:05:38,649 --> 02:05:51,988
not quite it was it was a bug row just

2074
02:05:49,149 --> 02:05:51,988
not the only bug

2075
02:06:14,899 --> 02:06:20,549
all right are we so if we have no

2076
02:06:17,909 --> 02:06:27,710
questions then we're done we will be

2077
02:06:20,550 --> 02:06:27,710
back tomorrow for more fun and James

2078
02:06:36,399 --> 02:06:45,139
how do you know activate some variants

2079
02:06:38,899 --> 02:06:48,469
for your GLSL um so we aren't really

2080
02:06:45,140 --> 02:06:53,570
doing much in the way of parametrized

2081
02:06:48,470 --> 02:06:55,789
shading so we don't really have much in

2082
02:06:53,569 --> 02:06:58,670
the way of what you're talking about

2083
02:06:55,789 --> 02:07:00,739
really all we do is we just have a

2084
02:06:58,670 --> 02:07:02,840
couple shaders I think we have like four

2085
02:07:00,739 --> 02:07:07,279
or five of them that we actually use and

2086
02:07:02,840 --> 02:07:10,279
we just set up the parameters manually

2087
02:07:07,279 --> 02:07:12,229
in the code right so we don't we don't

2088
02:07:10,279 --> 02:07:14,239
really have like if you had like a

2089
02:07:12,229 --> 02:07:15,889
hundred shaders or whatever you wouldn't

2090
02:07:14,239 --> 02:07:18,619
be able to do what we're doing I don't

2091
02:07:15,890 --> 02:07:21,289
think because we're doing something much

2092
02:07:18,619 --> 02:07:24,710
more simplistic so you can see here like

2093
02:07:21,289 --> 02:07:26,569
we just grabbed these out and then we

2094
02:07:24,710 --> 02:07:30,380
later just set them when we go to

2095
02:07:26,569 --> 02:07:35,889
actually do that dispatch uh and that's

2096
02:07:30,380 --> 02:07:40,279
because we're fundamentally not a GLSL

2097
02:07:35,890 --> 02:07:42,170
party like we we only use GLSL to

2098
02:07:40,279 --> 02:07:43,729
replicate the things we would want to do

2099
02:07:42,170 --> 02:07:48,109
in our software renderer it's pretty

2100
02:07:43,729 --> 02:07:49,789
basic stuff right like so if you were

2101
02:07:48,109 --> 02:07:51,170
like really shade or heavy and had tons

2102
02:07:49,789 --> 02:07:55,279
of stuff happening in shaders you would

2103
02:07:51,170 --> 02:07:56,180
need more than what we're doing and yeah

2104
02:07:55,279 --> 02:07:58,489
and it's ugly

2105
02:07:56,180 --> 02:08:03,440
believe me it's ugly it's one of the

2106
02:07:58,489 --> 02:08:05,779
things that C does worst is that kind of

2107
02:08:03,439 --> 02:08:07,939
thing C and C++ one of the great

2108
02:08:05,779 --> 02:08:11,210
failings of C and C++ you can see it

2109
02:08:07,939 --> 02:08:13,909
right in there where it's like oh we

2110
02:08:11,210 --> 02:08:16,730
have this other thing that wants to be

2111
02:08:13,909 --> 02:08:17,239
able to take some text that also uses

2112
02:08:16,729 --> 02:08:20,329
Struck's

2113
02:08:17,239 --> 02:08:21,739
and we should be able to just like use

2114
02:08:20,329 --> 02:08:23,359
the meta programming features of a

2115
02:08:21,739 --> 02:08:25,789
language to make it so we define the

2116
02:08:23,359 --> 02:08:28,250
struck once and then just call it and it

2117
02:08:25,789 --> 02:08:30,409
all just works but instead it's this

2118
02:08:28,250 --> 02:08:32,329
whole ridiculousness of like having to

2119
02:08:30,409 --> 02:08:33,829
do like some tricks with includes if you

2120
02:08:32,329 --> 02:08:34,819
want to do that or you have to define it

2121
02:08:33,829 --> 02:08:37,960
in two places

2122
02:08:34,819 --> 02:08:42,559
or you make a preprocessor it's like

2123
02:08:37,960 --> 02:08:44,359
again a real language for games which we

2124
02:08:42,560 --> 02:08:46,190
will get someday will not have any of

2125
02:08:44,359 --> 02:08:48,380
these problems when we leave C++ behind

2126
02:08:46,189 --> 02:08:48,989
maybe we're on ji j I can already do

2127
02:08:48,380 --> 02:08:51,480
this

2128
02:08:48,989 --> 02:08:52,920
if it wanted to right because it's

2129
02:08:51,479 --> 02:08:56,189
gotten at a protein can it can

2130
02:08:52,920 --> 02:08:58,710
introspect it could generate the shaders

2131
02:08:56,189 --> 02:09:00,210
as part of the compile step J I can

2132
02:08:58,710 --> 02:09:01,890
already do all of this stuff if you

2133
02:09:00,210 --> 02:09:05,010
wanted it to right and that's just the

2134
02:09:01,890 --> 02:09:06,900
beginnings of John's language I you know

2135
02:09:05,010 --> 02:09:07,980
it's not even publicly out yet and it

2136
02:09:06,899 --> 02:09:10,170
can already do this stuff so you can

2137
02:09:07,979 --> 02:09:11,009
already see like if somebody who knows

2138
02:09:10,170 --> 02:09:12,930
what they're doing

2139
02:09:11,010 --> 02:09:16,739
goes and makes a language for what we

2140
02:09:12,930 --> 02:09:20,640
want to do it it's not that difficult to

2141
02:09:16,739 --> 02:09:22,949
see where it goes to but the C C++

2142
02:09:20,640 --> 02:09:24,060
people they don't think about like what

2143
02:09:22,949 --> 02:09:25,349
you actually do when you're programming

2144
02:09:24,060 --> 02:09:26,760
like they don't think about how to make

2145
02:09:25,350 --> 02:09:30,360
programming work better they think about

2146
02:09:26,760 --> 02:09:31,980
weird esoteric things that they like to

2147
02:09:30,359 --> 02:09:35,099
argue about that have no bearing on

2148
02:09:31,979 --> 02:09:37,319
programming efficiency right so you end

2149
02:09:35,100 --> 02:09:38,789
up with a language that has aspect

2150
02:09:37,319 --> 02:09:40,679
eighty miles long and can't even do

2151
02:09:38,789 --> 02:09:43,949
basic stuff that J I could do like the

2152
02:09:40,680 --> 02:09:47,280
first day it was you know a language

2153
02:09:43,949 --> 02:09:48,750
right and that's just it's where your

2154
02:09:47,279 --> 02:09:49,670
priorities are it's what you focus on

2155
02:09:48,750 --> 02:10:01,020
right

2156
02:09:49,670 --> 02:10:04,859
so did insu bot just say domo arigato

2157
02:10:01,020 --> 02:10:07,050
mr. compiler because if so that is the

2158
02:10:04,859 --> 02:10:13,559
new high-water mark for artificial

2159
02:10:07,050 --> 02:10:17,159
intelligence what are the stats on your

2160
02:10:13,560 --> 02:10:20,039
glasses the stats are that they were

2161
02:10:17,159 --> 02:10:22,710
like the only pair of expensive glasses

2162
02:10:20,039 --> 02:10:24,239
I ever bought and it was my first pair

2163
02:10:22,710 --> 02:10:26,069
of glasses and I've never gotten a new

2164
02:10:24,239 --> 02:10:28,079
pair of glasses I tried to buy like a

2165
02:10:26,069 --> 02:10:31,049
cheap pair one time and they were so

2166
02:10:28,079 --> 02:10:34,340
much worse that I just I've always kept

2167
02:10:31,050 --> 02:10:39,510
using these it's just like some kind of

2168
02:10:34,340 --> 02:10:42,630
titanium frame or something just little

2169
02:10:39,510 --> 02:10:45,060
wire that just connects and they're

2170
02:10:42,630 --> 02:10:48,060
great they also have like because

2171
02:10:45,060 --> 02:10:49,680
they're bendy like that they never like

2172
02:10:48,060 --> 02:10:50,850
you can go rock climbing with them and

2173
02:10:49,680 --> 02:10:52,829
they will not fall off because they're

2174
02:10:50,850 --> 02:10:57,420
like looped almost like a sport glasses

2175
02:10:52,829 --> 02:10:59,269
are looped so you know I mean maybe

2176
02:10:57,420 --> 02:11:01,260
there's certain things you could do like

2177
02:10:59,270 --> 02:11:02,520
boxing or something where they would

2178
02:11:01,260 --> 02:11:04,770
come off although you but

2179
02:11:02,520 --> 02:11:06,090
we're than boxing but you know even

2180
02:11:04,770 --> 02:11:13,170
stuff where you're hanging upside down

2181
02:11:06,090 --> 02:11:21,239
they never come off which is great all

2182
02:11:13,170 --> 02:11:22,619
right I'm gonna wrap it up thank you

2183
02:11:21,239 --> 02:11:23,639
everyone for joining me for those sort

2184
02:11:22,619 --> 02:11:25,619
of handmade here it's what a pleasure

2185
02:11:23,640 --> 02:11:26,970
coating with you as always if you want

2186
02:11:25,619 --> 02:11:30,569
to follow along the series at home you

2187
02:11:26,970 --> 02:11:32,070
can always go to handmade hero org and

2188
02:11:30,569 --> 02:11:33,630
pier to the game because it comes to the

2189
02:11:32,069 --> 02:11:36,029
source code so that you can follow along

2190
02:11:33,630 --> 02:11:38,430
with what we do here every day and play

2191
02:11:36,029 --> 02:11:39,599
around the source yourself we also have

2192
02:11:38,430 --> 02:11:41,190
some other stuff there's a watch page

2193
02:11:39,600 --> 02:11:44,160
you can go to watch old versions of the

2194
02:11:41,189 --> 02:11:45,750
series like old episodes and stuff it's

2195
02:11:44,159 --> 02:11:48,389
got a great search page too so you can

2196
02:11:45,750 --> 02:11:50,220
find stuff we also have an FAQ if you're

2197
02:11:48,390 --> 02:11:51,570
just have basic questions and we also

2198
02:11:50,220 --> 02:11:52,800
have the handmade fun refused to fund

2199
02:11:51,569 --> 02:11:54,840
community projects so if you're

2200
02:11:52,800 --> 02:11:57,900
interested in supporting things like our

2201
02:11:54,840 --> 02:11:59,460
episode guide or handmade Network that's

2202
02:11:57,899 --> 02:12:02,219
a good way to funnel money to those

2203
02:11:59,460 --> 02:12:03,510
projects that's it for today I'll be

2204
02:12:02,220 --> 02:12:05,550
back tomorrow when we'll finish to

2205
02:12:03,510 --> 02:12:07,800
bugging that until then have fun

2206
02:12:05,550 --> 02:12:10,789
programming and I'll see everyone on the

2207
02:12:07,800 --> 02:12:10,789
Internet take it easy everybody

