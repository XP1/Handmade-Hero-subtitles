1
00:00:03,379 --> 00:00:07,950
hello everyone and welcome handmade here

2
00:00:05,969 --> 00:00:11,428
oh sure we could a complete game live on

3
00:00:07,950 --> 00:00:15,179
stream today we have a rather unsavory

4
00:00:11,429 --> 00:00:18,149
task that is well it's not going to be

5
00:00:15,179 --> 00:00:20,698
pretty I'm sure I don't want to mislead

6
00:00:18,149 --> 00:00:23,278
anyone it's definitely one of those days

7
00:00:20,699 --> 00:00:26,368
where either we get incredibly

8
00:00:23,278 --> 00:00:28,710
incredibly lucky and everything works

9
00:00:26,368 --> 00:00:31,410
smoothly the first time and it's great

10
00:00:28,710 --> 00:00:35,189
and it's happy or it's a much more

11
00:00:31,410 --> 00:00:37,049
likely scenario we are stuck sitting

12
00:00:35,189 --> 00:00:38,759
around wondering why we're not getting

13
00:00:37,049 --> 00:00:42,539
the GPU to do the thing that we asked it

14
00:00:38,759 --> 00:00:45,030
to do only to find out many much much

15
00:00:42,539 --> 00:00:47,009
later that we specified some little

16
00:00:45,030 --> 00:00:49,859
thing wrong or the GPU driver has a bug

17
00:00:47,009 --> 00:00:53,070
or other fun things like that

18
00:00:49,859 --> 00:00:55,738
so that's not going to be pretty but we

19
00:00:53,070 --> 00:00:58,710
hope that the results of getting it all

20
00:00:55,738 --> 00:01:02,009
working will be pretty which is to say

21
00:00:58,710 --> 00:01:04,198
that we are trying to add a little bit

22
00:01:02,009 --> 00:01:07,140
of per pixel interpolation to our

23
00:01:04,198 --> 00:01:09,959
lighting today and that could be pretty

24
00:01:07,140 --> 00:01:13,109
great once it once it actually is

25
00:01:09,959 --> 00:01:16,530
functional all right so let's take a

26
00:01:13,109 --> 00:01:21,329
look at what's going on in that code

27
00:01:16,530 --> 00:01:23,400
first however we are going to as we sort

28
00:01:21,329 --> 00:01:25,259
of update it we're going to make one

29
00:01:23,400 --> 00:01:27,829
little change here to help folks who are

30
00:01:25,259 --> 00:01:33,450
trying to compile on other machines

31
00:01:27,828 --> 00:01:36,419
basically there is a we've talked about

32
00:01:33,450 --> 00:01:39,109
this multiple times but shaders

33
00:01:36,420 --> 00:01:43,349
unfortunately compile differently on

34
00:01:39,109 --> 00:01:46,078
different GPU drivers the reason for

35
00:01:43,349 --> 00:01:48,469
this is because shader compilers are

36
00:01:46,078 --> 00:01:51,989
kind of haphazard in a lot of cases

37
00:01:48,469 --> 00:01:54,239
depending on the vendor and there's a

38
00:01:51,989 --> 00:01:57,718
bunch of things that a shader compiler

39
00:01:54,239 --> 00:02:00,618
may not catch you know just errors

40
00:01:57,718 --> 00:02:03,239
standard errors that you might

41
00:02:00,618 --> 00:02:05,009
accidentally put in a shader that you

42
00:02:03,239 --> 00:02:06,569
know if it were C++ or something the

43
00:02:05,009 --> 00:02:07,799
compiler would definitely catch and tell

44
00:02:06,569 --> 00:02:10,859
you no matter which compiler you are

45
00:02:07,799 --> 00:02:13,200
using but on shader compilers they're

46
00:02:10,860 --> 00:02:16,560
not really that strong

47
00:02:13,199 --> 00:02:18,299
they're oftentimes too permissive or

48
00:02:16,560 --> 00:02:20,909
just have bugs in them or anything else

49
00:02:18,300 --> 00:02:23,760
so the fact that these shaders compile

50
00:02:20,909 --> 00:02:26,520
and run on this particular AMD card does

51
00:02:23,759 --> 00:02:28,439
not actually mean that there are no bugs

52
00:02:26,520 --> 00:02:29,819
in the shader code it just means that

53
00:02:28,439 --> 00:02:32,639
there's no bug that this particular

54
00:02:29,818 --> 00:02:36,958
shader compiler happens to care about or

55
00:02:32,639 --> 00:02:40,079
notice so people who are compiling on

56
00:02:36,959 --> 00:02:41,849
more compliant shader compilers such as

57
00:02:40,080 --> 00:02:44,370
the NVIDIA compiler as you can see from

58
00:02:41,849 --> 00:02:46,409
this note here is talking about the gtx

59
00:02:44,370 --> 00:02:48,930
1070 which is the graphics card from

60
00:02:46,409 --> 00:02:51,599
nvidia or I should say graphics chip

61
00:02:48,930 --> 00:02:52,830
from Nvidia not a graphics car to grab a

62
00:02:51,599 --> 00:02:54,689
card of course there's many different

63
00:02:52,830 --> 00:03:04,319
graphics cards that have a gtx 1070 in

64
00:02:54,689 --> 00:03:05,969
them when running under nvidia shader

65
00:03:04,318 --> 00:03:11,129
compiler what you can see here is that

66
00:03:05,969 --> 00:03:14,909
you get a syntax error and that syntax

67
00:03:11,129 --> 00:03:17,400
error is due to the fact that we

68
00:03:14,909 --> 00:03:21,419
incorrectly specified the version on

69
00:03:17,400 --> 00:03:25,170
that shader we were specifying I believe

70
00:03:21,419 --> 00:03:27,569
150 whereas now we use shader model 330

71
00:03:25,169 --> 00:03:29,089
now not all of our traders actually need

72
00:03:27,569 --> 00:03:33,769
version 330

73
00:03:29,090 --> 00:03:36,509
if we're going to use version 334

74
00:03:33,769 --> 00:03:39,329
anything we might as well use it for

75
00:03:36,509 --> 00:03:41,608
everything because as far as I know

76
00:03:39,329 --> 00:03:43,829
there's no bonus having some of your

77
00:03:41,609 --> 00:03:45,959
shaders to use a lower shader model the

78
00:03:43,829 --> 00:03:47,579
only bonus is if all of your shaders use

79
00:03:45,959 --> 00:03:51,599
the lower shading model because then you

80
00:03:47,579 --> 00:03:55,019
can work on other machines lower end

81
00:03:51,599 --> 00:03:58,079
machines right so that's my assumption

82
00:03:55,019 --> 00:03:59,549
anyway I don't see any reason why we

83
00:03:58,079 --> 00:04:01,230
shouldn't go ahead and do that so I'm

84
00:03:59,549 --> 00:04:03,030
going to do that just to make it easier

85
00:04:01,229 --> 00:04:04,979
for folks who are compiling on NVIDIA

86
00:04:03,030 --> 00:04:08,818
card who want to follow along with the

87
00:04:04,979 --> 00:04:11,669
series so again this is not a problem

88
00:04:08,818 --> 00:04:13,048
we're having but it is a problem that

89
00:04:11,669 --> 00:04:15,509
other people on different machine

90
00:04:13,049 --> 00:04:18,000
configurations are having and so we were

91
00:04:15,509 --> 00:04:20,819
going to try and fix that so here's the

92
00:04:18,000 --> 00:04:24,470
situation with the current rendering and

93
00:04:20,819 --> 00:04:26,949
we can kind of see that if we run our

94
00:04:24,470 --> 00:04:30,310
lighting solution we produce our

95
00:04:26,949 --> 00:04:32,050
our voxel lighting solution which is

96
00:04:30,310 --> 00:04:33,579
what we want to now integrate into the

97
00:04:32,050 --> 00:04:37,870
rendering so we'll get some lighting in

98
00:04:33,579 --> 00:04:39,519
there and that's that's really what

99
00:04:37,870 --> 00:04:41,230
we're going to be working on today let's

100
00:04:39,519 --> 00:04:45,279
go ahead and and change those shader

101
00:04:41,230 --> 00:04:47,460
models to 3:30 and see if that we can

102
00:04:45,279 --> 00:04:49,750
still make all of this work properly

103
00:04:47,459 --> 00:04:53,289
how do we I guess we're always showing

104
00:04:49,750 --> 00:04:54,250
the voxel regardless okay so I'm going

105
00:04:53,290 --> 00:04:56,080
to go ahead and do that

106
00:04:54,250 --> 00:05:01,509
and just verify that everything still

107
00:04:56,079 --> 00:05:04,149
runs so here's that version directive

108
00:05:01,509 --> 00:05:08,110
you can see that we have version

109
00:05:04,149 --> 00:05:13,269
directives here that are 130 150 130 150

110
00:05:08,110 --> 00:05:16,810
and so on and I guess so the things I'm

111
00:05:13,269 --> 00:05:19,149
not 100% certain about is whether shape

112
00:05:16,810 --> 00:05:21,780
changing to version 150 would have fixed

113
00:05:19,149 --> 00:05:24,729
everything or if you actually need 330

114
00:05:21,779 --> 00:05:29,759
but I don't think there's a difference

115
00:05:24,730 --> 00:05:32,650
between those two things I think that

116
00:05:29,759 --> 00:05:35,319
now I'm thinking about it I think like

117
00:05:32,649 --> 00:05:38,709
330 and 150 or sort of synonymous

118
00:05:35,319 --> 00:05:41,469
version numbers because if I remember

119
00:05:38,709 --> 00:05:44,049
correctly like one shade of 150 was the

120
00:05:41,470 --> 00:05:48,220
one that came out with OpenGL 3.3 or

121
00:05:44,050 --> 00:05:52,210
GLSL 3.3 rather so aren't they sort of

122
00:05:48,220 --> 00:05:53,410
the same I don't know but either way in

123
00:05:52,209 --> 00:05:56,370
fact you know let's see if we can get

124
00:05:53,410 --> 00:05:56,370
some documentation on that

125
00:06:03,829 --> 00:06:12,649
I know so I guess I guess it looks like

126
00:06:07,339 --> 00:06:14,479
1.5 was actually 3.2 so I guess 3.3 is

127
00:06:12,649 --> 00:06:18,379
actually the one we're using which is

128
00:06:14,480 --> 00:06:20,720
one step above that now I don't know

129
00:06:18,379 --> 00:06:25,009
exactly what we're using that requires

130
00:06:20,720 --> 00:06:25,790
3.3 but again should be okay so I'll

131
00:06:25,009 --> 00:06:33,050
just go ahead

132
00:06:25,790 --> 00:06:37,700
oops and make that change for now again

133
00:06:33,050 --> 00:06:40,000
what we can do later if we want to is we

134
00:06:37,699 --> 00:06:44,029
can go ahead and start thinking about

135
00:06:40,000 --> 00:06:47,329
after the you know rendering is

136
00:06:44,029 --> 00:06:49,699
completely done and when you get closer

137
00:06:47,329 --> 00:06:52,159
to shipping the game if what you want to

138
00:06:49,699 --> 00:06:54,949
do is take a spin back through and see

139
00:06:52,160 --> 00:06:58,130
if there's a way to reduce the version

140
00:06:54,949 --> 00:07:01,550
number down right you can always do that

141
00:06:58,129 --> 00:07:03,290
so during development we you know don't

142
00:07:01,550 --> 00:07:06,170
really have to worry too much about what

143
00:07:03,290 --> 00:07:08,270
this number is because it just means

144
00:07:06,170 --> 00:07:10,939
that you know certain people wouldn't be

145
00:07:08,269 --> 00:07:14,569
able to develop maybe on older hardware

146
00:07:10,939 --> 00:07:16,089
but development is not really where you

147
00:07:14,569 --> 00:07:19,009
want to spend your time trying to be

148
00:07:16,089 --> 00:07:21,439
maximally compatible that's just not a

149
00:07:19,009 --> 00:07:23,329
particularly good use of time so you

150
00:07:21,439 --> 00:07:25,790
typically want to do that only when you

151
00:07:23,329 --> 00:07:29,779
get more towards the end of things and

152
00:07:25,790 --> 00:07:32,629
so on all right

153
00:07:29,779 --> 00:07:38,109
so as far as I can tell all of the stuff

154
00:07:32,629 --> 00:07:38,110
that was working before is working again

155
00:08:09,689 --> 00:08:15,129
so that's realtively straight forward

156
00:08:12,158 --> 00:08:19,149
I'm going to go ahead and kick that back

157
00:08:15,129 --> 00:08:21,369
to Kim and friends and they can see

158
00:08:19,149 --> 00:08:23,019
whether or not that helps them compile

159
00:08:21,369 --> 00:08:25,539
on those other cards obviously I don't

160
00:08:23,019 --> 00:08:28,329
have one of those cards in this machine

161
00:08:25,538 --> 00:08:59,129
so I can't really test it but I will go

162
00:08:28,329 --> 00:08:59,129
ahead and and ping it back all right

163
00:09:01,948 --> 00:09:11,849
looks good why did it hey why did it

164
00:09:07,360 --> 00:09:14,699
change my Y to change my dash to a I

165
00:09:11,850 --> 00:09:24,370
don't want that

166
00:09:14,698 --> 00:09:28,870
no turn off turn bad bad mark down no no

167
00:09:24,370 --> 00:09:31,019
mm can I do anything to make it not do

168
00:09:28,870 --> 00:09:31,019
that

169
00:09:35,799 --> 00:09:51,399
github why why do you think I want that

170
00:09:40,958 --> 00:09:54,479
I don't want that is there it escape

171
00:09:51,399 --> 00:09:54,480
character for markdown

172
00:10:10,970 --> 00:10:14,829
hmm well

173
00:10:16,470 --> 00:10:20,990
mark can escape character

174
00:10:28,710 --> 00:10:33,960
how do I escape a back tic within a code

175
00:10:31,350 --> 00:10:37,610
block I feel like this would be the kind

176
00:10:33,960 --> 00:10:37,610
of thing stock exchange would be good at

177
00:10:45,129 --> 00:10:49,090
no no that's not what I want

178
00:10:55,159 --> 00:10:58,149
oh wow

179
00:11:05,250 --> 00:11:17,629
so you have to use html's ampersand

180
00:11:09,120 --> 00:11:20,778
notation now that's only for this I

181
00:11:17,629 --> 00:11:20,778
don't know

182
00:11:27,519 --> 00:11:34,539
how do I insert a dash in markdown

183
00:11:51,850 --> 00:11:58,909
seriously man I just don't even know

184
00:11:55,750 --> 00:12:00,528
let's try some things randomly if I

185
00:11:58,909 --> 00:12:03,588
backslash it I'm assuming that wouldn't

186
00:12:00,528 --> 00:12:05,990
do anything oh wow that was lucky

187
00:12:03,589 --> 00:12:12,589
all right so apparently a backslash

188
00:12:05,990 --> 00:12:14,409
escapes the character who knew well

189
00:12:12,589 --> 00:12:17,089
there you go

190
00:12:14,409 --> 00:12:22,039
all right problem solved

191
00:12:17,089 --> 00:12:24,950
surprisingly enough that should be that

192
00:12:22,039 --> 00:12:26,629
I don't know that there's anything else

193
00:12:24,950 --> 00:12:29,259
that we've got to do here let's take a

194
00:12:26,629 --> 00:12:33,039
look at that shader layout issue one

195
00:12:29,259 --> 00:12:33,039
well let's look at this one too

196
00:12:40,299 --> 00:12:45,428
that's probably not really something we

197
00:12:42,499 --> 00:12:45,428
should be looking at the moment

198
00:12:52,830 --> 00:12:59,490
so the platform layer should be updated

199
00:12:55,259 --> 00:13:02,370
to request a 3.3 context that we also

200
00:12:59,490 --> 00:13:06,089
haven't done so let's just do both of

201
00:13:02,370 --> 00:13:08,659
these bugs right now I don't see any

202
00:13:06,089 --> 00:13:08,660
reason not to

203
00:13:22,220 --> 00:13:27,420
so we're just going to have to pass when

204
00:13:24,840 --> 00:13:30,330
we do open jail at ribs right now it's

205
00:13:27,419 --> 00:13:33,629
three zero we're just going to have to

206
00:13:30,330 --> 00:13:34,470
ask for a three three and then that

207
00:13:33,629 --> 00:13:48,379
would be it

208
00:13:34,470 --> 00:13:48,379
I think and I think that's everything

209
00:14:14,990 --> 00:14:18,549
all right good deal

210
00:14:20,450 --> 00:14:23,960
so I think that's everything that people

211
00:14:22,100 --> 00:14:27,019
were having trouble with I'm not 100%

212
00:14:23,960 --> 00:14:29,690
certain but we'll find out I don't know

213
00:14:27,019 --> 00:14:32,899
why this is still a bug because somebody

214
00:14:29,690 --> 00:14:36,320
said some stuff that doesn't probably

215
00:14:32,899 --> 00:14:38,509
make any sense but they never really

216
00:14:36,320 --> 00:14:45,170
followed up on it even though Martin's

217
00:14:38,509 --> 00:14:47,919
tried to ask them so I don't really know

218
00:14:45,169 --> 00:14:47,919
what the deal is here

219
00:15:32,429 --> 00:15:39,029
all right anything else we should do on

220
00:15:35,710 --> 00:15:39,030
here I don't think so

221
00:15:39,240 --> 00:15:51,879
these are all just bugs we can fix with

222
00:15:42,279 --> 00:15:52,779
me know what this is about at all so

223
00:15:51,879 --> 00:15:54,039
we're probably not gonna use that one

224
00:15:52,779 --> 00:15:55,600
anymore so probably close that one out

225
00:15:54,039 --> 00:15:57,849
later but we'll leave it in there for

226
00:15:55,600 --> 00:16:00,100
now all right so I think that's

227
00:15:57,850 --> 00:16:01,899
everything we needed to do in order to

228
00:16:00,100 --> 00:16:03,129
help maintain the code base for other

229
00:16:01,899 --> 00:16:05,379
people who may be doing other things

230
00:16:03,129 --> 00:16:06,820
with it I know a lot of people like Kim

231
00:16:05,379 --> 00:16:10,000
for example who are commenting on those

232
00:16:06,820 --> 00:16:12,040
port to other platforms as well so

233
00:16:10,000 --> 00:16:14,860
there's a bunch of stuff that just they

234
00:16:12,039 --> 00:16:20,709
may need or that can help them out and

235
00:16:14,860 --> 00:16:23,409
we just it's good to basically have some

236
00:16:20,710 --> 00:16:24,879
ways that they can continue whatever it

237
00:16:23,409 --> 00:16:26,860
is they're doing without having to worry

238
00:16:24,879 --> 00:16:29,980
too much so I think we're back to where

239
00:16:26,860 --> 00:16:33,279
we were before and now we can focus on

240
00:16:29,980 --> 00:16:36,879
the task at hand which is if you take a

241
00:16:33,279 --> 00:16:39,759
look at what we did last weekend

242
00:16:36,879 --> 00:16:41,919
well last Sunday specifically we

243
00:16:39,759 --> 00:16:44,679
produced this handy-dandy Vox alized

244
00:16:41,919 --> 00:16:48,639
version of the lighting solution that

245
00:16:44,679 --> 00:16:51,729
basically tells the the I shouldn't say

246
00:16:48,639 --> 00:16:54,539
tells the tell anyone anything but which

247
00:16:51,730 --> 00:16:57,490
encodes the number of sample points and

248
00:16:54,539 --> 00:17:00,399
those sample points have specific

249
00:16:57,490 --> 00:17:03,009
lighting information recorded along with

250
00:17:00,399 --> 00:17:10,500
them now when these lighting points are

251
00:17:03,009 --> 00:17:13,329
recorded they are provided as voxels now

252
00:17:10,500 --> 00:17:17,769
which could be looked up in say a 3d

253
00:17:13,329 --> 00:17:21,399
texture or anything else now it's not

254
00:17:17,769 --> 00:17:24,700
quite the same as saying that they are

255
00:17:21,400 --> 00:17:27,310
literally voxels like I should be

256
00:17:24,700 --> 00:17:30,279
clearer about that it's actually a voxel

257
00:17:27,309 --> 00:17:33,490
lookup scheme is a is a more accurate

258
00:17:30,279 --> 00:17:37,509
way to say it because effectively what

259
00:17:33,490 --> 00:17:39,430
you're seeing here is not a voxel eyes

260
00:17:37,509 --> 00:17:42,129
version of the lighting but rather a

261
00:17:39,430 --> 00:17:44,289
series of lighting sample points which

262
00:17:42,130 --> 00:17:45,010
do not have to lie on in any particular

263
00:17:44,289 --> 00:17:47,440
location

264
00:17:45,009 --> 00:17:50,559
and then they are simply Bend into a

265
00:17:47,440 --> 00:17:54,690
voxel based on which voxel they fell

266
00:17:50,559 --> 00:17:57,700
into right so that's that's the only

267
00:17:54,690 --> 00:17:59,470
real part that's voxel II about it but

268
00:17:57,700 --> 00:18:01,059
we need that part about it so that the

269
00:17:59,470 --> 00:18:04,059
graphics card can effectively look up

270
00:18:01,059 --> 00:18:06,669
where the points are where those sample

271
00:18:04,059 --> 00:18:10,839
points are so what we want to do now is

272
00:18:06,670 --> 00:18:11,890
we want to try and figure out and when

273
00:18:10,839 --> 00:18:13,769
if they try and figure out I don't

274
00:18:11,890 --> 00:18:17,290
really mean that it's necessarily

275
00:18:13,769 --> 00:18:20,289
logistically hard I mean just it's you

276
00:18:17,289 --> 00:18:22,829
know GPU gyrations we want to figure out

277
00:18:20,289 --> 00:18:27,629
how to get these pieces of information

278
00:18:22,829 --> 00:18:33,059
down on to the card so that they can be

279
00:18:27,630 --> 00:18:33,060
processed right so that they can be

280
00:18:36,539 --> 00:18:42,339
quickly looked up and used to

281
00:18:40,150 --> 00:18:44,380
interpolate the lighting solution so

282
00:18:42,339 --> 00:18:46,569
what we want to do is take this render

283
00:18:44,380 --> 00:18:49,060
here which you can see is rendering

284
00:18:46,569 --> 00:18:52,059
without any lighting at the moment and

285
00:18:49,059 --> 00:18:54,429
we want to and has these big you know

286
00:18:52,059 --> 00:18:58,809
colored blocks on the white ground

287
00:18:54,430 --> 00:19:01,509
temporarily for just you know for

288
00:18:58,809 --> 00:19:04,000
lighting testing purposes and we want to

289
00:19:01,509 --> 00:19:06,519
take that and we want to have each of

290
00:19:04,000 --> 00:19:09,490
these you know triangles being rendered

291
00:19:06,519 --> 00:19:12,309
here we want them to use that lighting

292
00:19:09,490 --> 00:19:14,069
solution to interpolate between the

293
00:19:12,309 --> 00:19:16,419
lighting samples that are nearby to

294
00:19:14,069 --> 00:19:18,609
whatever the services that's being

295
00:19:16,420 --> 00:19:21,970
shaded so that's really all we're trying

296
00:19:18,609 --> 00:19:24,909
to do here in order to do that we've got

297
00:19:21,970 --> 00:19:26,920
to get that data down on the card so

298
00:19:24,910 --> 00:19:29,019
what we're seeing here is not data

299
00:19:26,920 --> 00:19:31,120
that's on the card at all this is data

300
00:19:29,019 --> 00:19:33,940
that's just on the CPU and what we're

301
00:19:31,119 --> 00:19:37,029
doing is we're just sending down tons

302
00:19:33,940 --> 00:19:38,529
and tons of little cubes and drop

303
00:19:37,029 --> 00:19:40,029
letting those cubes show us where the

304
00:19:38,529 --> 00:19:44,529
lighting samples are right that's that's

305
00:19:40,029 --> 00:19:48,629
the only what's going on here so not not

306
00:19:44,529 --> 00:19:51,730
particularly great to say the least so

307
00:19:48,630 --> 00:19:53,470
what we want to do now is start that

308
00:19:51,730 --> 00:19:55,269
process and again this is just going to

309
00:19:53,470 --> 00:19:57,579
be a really onerous process of trying to

310
00:19:55,269 --> 00:19:59,359
deal with the GPU there's nothing

311
00:19:57,579 --> 00:20:01,308
particularly interesting

312
00:19:59,359 --> 00:20:04,279
about it there's no particularly tricky

313
00:20:01,308 --> 00:20:06,048
aspect of it at the moment because we're

314
00:20:04,279 --> 00:20:09,769
not even trying to create that lighting

315
00:20:06,048 --> 00:20:13,099
on the GPU we're just trying to do that

316
00:20:09,769 --> 00:20:15,740
lighting eye on the CPU and send it to

317
00:20:13,099 --> 00:20:18,829
the GPU which remember is quite a bit

318
00:20:15,740 --> 00:20:20,390
easier because we don't have to worry

319
00:20:18,829 --> 00:20:23,720
about how we're going to create it

320
00:20:20,390 --> 00:20:28,670
exactly in GPU land all right so let's

321
00:20:23,720 --> 00:20:31,339
take a look at what's happening in the

322
00:20:28,670 --> 00:20:34,179
render group you can see in world mode

323
00:20:31,339 --> 00:20:36,740
here we've got the lighting textures

324
00:20:34,179 --> 00:20:38,809
structure that we computed and you can

325
00:20:36,740 --> 00:20:41,808
see that we're creating very specific

326
00:20:38,808 --> 00:20:46,490
stuff here we've got two textures that

327
00:20:41,808 --> 00:20:48,918
are 4096 long they are a lot linear like

328
00:20:46,490 --> 00:20:52,250
there's just a one-dimensional texture

329
00:20:48,919 --> 00:20:55,759
there's nothing else to it there and we

330
00:20:52,250 --> 00:20:58,609
also have a lookup texture which is a

331
00:20:55,759 --> 00:21:02,298
three dimensional texture that texture

332
00:20:58,609 --> 00:21:05,750
to six by six by 32 these are 4096 by

333
00:21:02,298 --> 00:21:07,490
one effectively or by one by one you

334
00:21:05,750 --> 00:21:10,460
know that they have no other dimension

335
00:21:07,490 --> 00:21:12,859
to them and so if we want to specify

336
00:21:10,460 --> 00:21:14,840
these we have to be able to specify

337
00:21:12,859 --> 00:21:17,240
these additional textures to the card

338
00:21:14,839 --> 00:21:19,849
now in order to specify these textures

339
00:21:17,240 --> 00:21:21,890
to the card we we kind of have to

340
00:21:19,849 --> 00:21:24,439
introduce what's effectively a temporary

341
00:21:21,890 --> 00:21:26,600
solution because remember we probably

342
00:21:24,440 --> 00:21:28,850
will never actually want to do this in

343
00:21:26,599 --> 00:21:30,349
the shipping version of the game and the

344
00:21:28,849 --> 00:21:31,789
reason for that is that we probably

345
00:21:30,349 --> 00:21:34,009
don't want to compute the lighting on

346
00:21:31,789 --> 00:21:41,000
the CPU now I don't know that's 100%

347
00:21:34,009 --> 00:21:42,500
true we leave we don't really know

348
00:21:41,000 --> 00:21:44,419
that's the case I mean one of the things

349
00:21:42,500 --> 00:21:46,419
we could do is try to write a really

350
00:21:44,419 --> 00:21:48,919
fast version on the CPU that did

351
00:21:46,419 --> 00:21:50,780
lighting computations and then actually

352
00:21:48,919 --> 00:21:53,929
send it down that is something we could

353
00:21:50,779 --> 00:21:56,599
consider doing I you know it's not the

354
00:21:53,929 --> 00:22:00,080
weirdest idea in the world but it is a

355
00:21:56,599 --> 00:22:02,298
pretty weird idea and not the least of

356
00:22:00,079 --> 00:22:04,668
the weirdnesses of that idea is just the

357
00:22:02,298 --> 00:22:07,099
fact that even if we make sure that the

358
00:22:04,669 --> 00:22:09,530
CPU code is highly optimized and does

359
00:22:07,099 --> 00:22:12,829
run well in a sixtieth of a second on

360
00:22:09,529 --> 00:22:15,859
the CPU side we still have the problem

361
00:22:12,829 --> 00:22:17,538
that the data that has to get

362
00:22:15,859 --> 00:22:20,678
transferred to the card keeps going up

363
00:22:17,538 --> 00:22:23,960
so now we have to transfer an 8 megabyte

364
00:22:20,679 --> 00:22:25,640
texture to the card every time and while

365
00:22:23,960 --> 00:22:27,740
that may not really be the end of the

366
00:22:25,640 --> 00:22:31,340
world it's definitely the case that the

367
00:22:27,740 --> 00:22:33,230
more bandwidth per frame transfer

368
00:22:31,339 --> 00:22:33,798
bandwidth per frame you introduce into

369
00:22:33,230 --> 00:22:42,548
the game

370
00:22:33,798 --> 00:22:44,929
usually the worst so if we could just

371
00:22:42,548 --> 00:22:47,089
send down the lighting information which

372
00:22:44,929 --> 00:22:48,798
would be much much smaller and then have

373
00:22:47,089 --> 00:22:51,259
the card compute everything it needs on

374
00:22:48,798 --> 00:22:55,220
its own that's probably going to be more

375
00:22:51,259 --> 00:22:58,220
not only faster if we can make it work

376
00:22:55,220 --> 00:23:01,909
reasonably but it also it will reduce

377
00:22:58,220 --> 00:23:04,850
the total bandwidth from CPU to GPU in a

378
00:23:01,909 --> 00:23:09,019
nice way because so far we haven't had

379
00:23:04,849 --> 00:23:11,388
much GPU CPU to GPU bandwidth

380
00:23:09,019 --> 00:23:13,190
utilization so it would be nice to just

381
00:23:11,388 --> 00:23:14,869
keep that generally low because it means

382
00:23:13,190 --> 00:23:17,090
then we don't really have to think about

383
00:23:14,869 --> 00:23:20,058
that aspect much like we're not going to

384
00:23:17,089 --> 00:23:21,470
be sitting around one wondering like

385
00:23:20,058 --> 00:23:23,918
what we're going to do to make sure the

386
00:23:21,470 --> 00:23:28,399
card always kind of takes that stream in

387
00:23:23,919 --> 00:23:30,320
nice limits ficient ly so alright here's

388
00:23:28,398 --> 00:23:33,408
our lighting texture what I'm going to

389
00:23:30,319 --> 00:23:35,509
do is basically just put in I think what

390
00:23:33,409 --> 00:23:41,028
it would amounts to a special purpose

391
00:23:35,509 --> 00:23:42,200
way to accept this data and I'm not

392
00:23:41,028 --> 00:23:45,190
going to think too hard about it

393
00:23:42,200 --> 00:23:48,110
specifically because as I said before

394
00:23:45,190 --> 00:23:50,179
it's not really something that we're

395
00:23:48,109 --> 00:23:52,398
going to use right it's not something

396
00:23:50,179 --> 00:23:53,929
that's going to have to ship at the game

397
00:23:52,398 --> 00:23:55,908
it's not something I'm anticipating

398
00:23:53,929 --> 00:23:58,490
shipping with the game so I'm more or

399
00:23:55,909 --> 00:24:00,289
less should be able here to just put in

400
00:23:58,490 --> 00:24:03,819
essentially a special-purpose routine

401
00:24:00,288 --> 00:24:03,819
that does nothing but transfer this data

402
00:24:04,028 --> 00:24:16,839
so I'm going to go ahead and call

403
00:24:06,069 --> 00:24:16,839
lighting or lighting transfer

404
00:24:17,759 --> 00:24:24,899
so if we go down to the sea here if we

405
00:24:22,058 --> 00:24:27,428
go down to the lighting transform

406
00:24:24,898 --> 00:24:29,349
structure that we're going to need well

407
00:24:27,429 --> 00:24:30,179
actually it should be right here

408
00:24:29,349 --> 00:24:36,459
shouldn't it

409
00:24:30,179 --> 00:24:40,059
render entry any transform then all we

410
00:24:36,460 --> 00:24:44,558
really need to do here is have a way of

411
00:24:40,058 --> 00:24:46,990
sending these down and I guess what we

412
00:24:44,558 --> 00:24:51,878
know here is we know the layouts of

413
00:24:46,990 --> 00:25:01,808
these things and they can just mostly be

414
00:24:51,878 --> 00:25:04,329
implicit right we know that we're only

415
00:25:01,808 --> 00:25:06,730
ever going to get this as a submission

416
00:25:04,329 --> 00:25:08,199
of this stuff right here since we're

417
00:25:06,730 --> 00:25:10,569
only going to get it as a submission of

418
00:25:08,200 --> 00:25:14,528
these things we should be able to just

419
00:25:10,569 --> 00:25:24,689
take this as is without any fuss so

420
00:25:14,528 --> 00:25:27,099
where the where the push entry itself

421
00:25:24,690 --> 00:25:29,499
gets pushed I will just have to have a

422
00:25:27,099 --> 00:25:31,418
way of pushing one of these on and since

423
00:25:29,499 --> 00:25:33,759
we don't use a union right now although

424
00:25:31,419 --> 00:25:36,460
we could very easily now move to using a

425
00:25:33,759 --> 00:25:39,399
union because we don't have as much

426
00:25:36,460 --> 00:25:43,590
traffic going down I'm going to go ahead

427
00:25:39,398 --> 00:25:49,138
and add this in so where we do a push

428
00:25:43,589 --> 00:25:52,028
render entry or sorry render element

429
00:25:49,138 --> 00:25:54,128
don't ask me why we called it element

430
00:25:52,028 --> 00:25:56,648
here in entry they're probably just the

431
00:25:54,128 --> 00:25:57,939
hazards of writing everything on stream

432
00:25:56,648 --> 00:26:02,138
where it's harder to pay attention to

433
00:25:57,940 --> 00:26:03,999
details such as that I this push render

434
00:26:02,138 --> 00:26:06,758
element calls here will give us what we

435
00:26:03,999 --> 00:26:08,798
need in order to push the lighting on so

436
00:26:06,759 --> 00:26:10,058
if we want to go ahead and put one of

437
00:26:08,798 --> 00:26:13,210
those in there here's all the lighting

438
00:26:10,058 --> 00:26:14,980
code right what we can do is just come

439
00:26:13,210 --> 00:26:17,649
up here and say alright let's let's go

440
00:26:14,980 --> 00:26:22,690
ahead and have an inline call for push

441
00:26:17,648 --> 00:26:25,748
lighting and if we go ahead and push a

442
00:26:22,690 --> 00:26:29,379
render element of this form what you can

443
00:26:25,749 --> 00:26:30,009
see here is we probably want to use the

444
00:26:29,378 --> 00:26:31,419
standard

445
00:26:30,009 --> 00:26:34,299
format for it which is just group in

446
00:26:31,420 --> 00:26:37,810
type because we don't need to do

447
00:26:34,299 --> 00:26:39,549
anything special like this one here so

448
00:26:37,809 --> 00:26:41,649
I'm going to go ahead and do a push

449
00:26:39,549 --> 00:26:43,299
render element for render entry lighting

450
00:26:41,650 --> 00:26:45,850
transforms that render enter letting

451
00:26:43,299 --> 00:26:51,220
transform will come back I believe as

452
00:26:45,849 --> 00:26:54,099
something we can which is called that

453
00:26:51,220 --> 00:26:56,470
best I guess so we can write too so

454
00:26:54,099 --> 00:26:59,409
assuming that this person who calls us

455
00:26:56,470 --> 00:27:01,720
whoever they are is going to pass us one

456
00:26:59,410 --> 00:27:03,190
of the textures I guess I'll call that

457
00:27:01,720 --> 00:27:05,170
source since we're copying from one to

458
00:27:03,190 --> 00:27:08,799
the other I think all we really need to

459
00:27:05,170 --> 00:27:11,370
do is just sort of copy the the various

460
00:27:08,799 --> 00:27:14,079
elements of this in there and we're done

461
00:27:11,369 --> 00:27:15,399
and that should be about it now the only

462
00:27:14,079 --> 00:27:17,379
requirement is that that stays around

463
00:27:15,400 --> 00:27:19,090
I'm not going to copy the actual data in

464
00:27:17,380 --> 00:27:20,350
because again this is not something that

465
00:27:19,089 --> 00:27:23,109
we need to think about really in that

466
00:27:20,349 --> 00:27:29,019
way so all I'm going to do is say that

467
00:27:23,109 --> 00:27:32,819
the destinations confirm it you know the

468
00:27:29,019 --> 00:27:39,099
information from the destination here is

469
00:27:32,819 --> 00:27:41,429
going to get copied directly so at that

470
00:27:39,099 --> 00:27:41,429
point

471
00:27:43,329 --> 00:27:47,108
[Music]

472
00:27:56,849 --> 00:28:06,428
that's pretty good tell us the slow

473
00:27:59,950 --> 00:28:11,048
morning undeclared identifier render

474
00:28:06,429 --> 00:28:14,919
entry lighting transfer I agree with

475
00:28:11,048 --> 00:28:24,359
that but shouldn't this have expanded

476
00:28:14,919 --> 00:28:24,360
that type out oh dude in both places so

477
00:28:34,500 --> 00:28:40,990
I just decided to use that everywhere so

478
00:28:37,329 --> 00:28:44,879
it would have been fine alright so I

479
00:28:40,990 --> 00:28:44,880
think that's about it

480
00:28:48,759 --> 00:28:52,569
and now I guess first since this is

481
00:28:50,829 --> 00:28:57,609
lighting Texel here we could also just

482
00:28:52,569 --> 00:29:00,970
call this an f32 because we really don't

483
00:28:57,609 --> 00:29:02,969
care about this format information just

484
00:29:00,970 --> 00:29:06,640
yet

485
00:29:02,970 --> 00:29:11,230
alright so now what should happen in

486
00:29:06,640 --> 00:29:14,259
theory is if we were to do one of these

487
00:29:11,230 --> 00:29:18,190
calls so after we compute the lighting

488
00:29:14,259 --> 00:29:19,539
and we want to send it down if we take a

489
00:29:18,190 --> 00:29:23,529
look at what's going to happen here when

490
00:29:19,539 --> 00:29:25,329
we call this output lighting call what's

491
00:29:23,529 --> 00:29:27,250
going to happen is we want to make sure

492
00:29:25,329 --> 00:29:29,769
that the lighting gets sent down to the

493
00:29:27,250 --> 00:29:34,200
card using this push lighting call and

494
00:29:29,769 --> 00:29:34,200
what you can see here is that when we do

495
00:29:34,619 --> 00:29:39,729
output texture debug back to thing that

496
00:29:37,298 --> 00:29:41,079
creates all the push cubes so right now

497
00:29:39,730 --> 00:29:44,079
we don't really want to do that because

498
00:29:41,079 --> 00:29:46,119
we already know that that's you know the

499
00:29:44,079 --> 00:29:48,269
correct thing so instead what we want to

500
00:29:46,119 --> 00:29:52,178
do is push the lighting down like so

501
00:29:48,269 --> 00:29:54,639
where we push down the group and the

502
00:29:52,179 --> 00:29:55,870
textures or rather we push the textures

503
00:29:54,640 --> 00:29:58,570
down to the group might be the better

504
00:29:55,869 --> 00:30:03,359
way to say that and that will push one

505
00:29:58,569 --> 00:30:03,359
of these onto our you know our render

506
00:30:03,569 --> 00:30:06,519
stack

507
00:30:05,380 --> 00:30:08,860
now what should happen when we do that

508
00:30:06,519 --> 00:30:12,369
now is we should get an assertion in the

509
00:30:08,859 --> 00:30:15,069
OpenGL code that it's received a you

510
00:30:12,369 --> 00:30:17,529
know a token it doesn't recognize right

511
00:30:15,069 --> 00:30:20,679
and you can see that happening here so

512
00:30:17,529 --> 00:30:23,339
here's the loop of interpreting the

513
00:30:20,680 --> 00:30:26,140
various things that come down the render

514
00:30:23,339 --> 00:30:28,649
you know sort of the render command set

515
00:30:26,140 --> 00:30:31,900
and you can see that you know it's it's

516
00:30:28,650 --> 00:30:35,170
missing a case for that one that we just

517
00:30:31,900 --> 00:30:37,390
added so if we want to now we can go in

518
00:30:35,170 --> 00:30:41,110
and actually add something to handle

519
00:30:37,390 --> 00:30:44,850
that case and again this part of it's

520
00:30:41,109 --> 00:30:44,849
probably fairly simple

521
00:30:45,509 --> 00:30:51,369
famous last words I suppose but we

522
00:30:49,150 --> 00:30:53,820
basically just need a case that's

523
00:30:51,369 --> 00:30:58,529
identical to the rest of these just

524
00:30:53,819 --> 00:31:02,339
taking a different lighting transfer

525
00:30:58,529 --> 00:31:04,809
taking a different final port there and

526
00:31:02,339 --> 00:31:07,359
what we want to do now is we want to

527
00:31:04,809 --> 00:31:10,720
actually take a look at what's in there

528
00:31:07,359 --> 00:31:12,399
and send it down so you can see again

529
00:31:10,720 --> 00:31:13,120
I'm just doing exactly the same thing we

530
00:31:12,400 --> 00:31:17,830
were doing before

531
00:31:13,119 --> 00:31:25,389
I'm peeling off the part here that we

532
00:31:17,829 --> 00:31:31,720
wanted and then I'm casting to the type

533
00:31:25,390 --> 00:31:34,600
that I needed to get right

534
00:31:31,720 --> 00:31:36,519
so this point we have the entry and what

535
00:31:34,599 --> 00:31:40,000
we need to do is we need to submit four

536
00:31:36,519 --> 00:31:42,909
pieces of texture data from that you

537
00:31:40,000 --> 00:31:48,538
know from that structure so we need to

538
00:31:42,909 --> 00:31:48,539
submit each of these down as a texture

539
00:31:49,769 --> 00:31:55,440
and so what we expect us to look at here

540
00:31:52,509 --> 00:31:59,079
that look like here it's like a GL

541
00:31:55,440 --> 00:32:03,340
texture update call right so we need a

542
00:31:59,079 --> 00:32:05,528
GL text image kind of thing and we could

543
00:32:03,339 --> 00:32:08,048
use GL text image or we could use your

544
00:32:05,528 --> 00:32:11,369
took sub image I'm going to use text sub

545
00:32:08,048 --> 00:32:13,058
image at the moment just because

546
00:32:11,369 --> 00:32:16,628
actually you know what I should be on

547
00:32:13,058 --> 00:32:19,178
Docstoc GL though for doing this because

548
00:32:16,628 --> 00:32:21,428
I just want to make sure at the moment

549
00:32:19,179 --> 00:32:24,309
the graphics card knows we're not trying

550
00:32:21,429 --> 00:32:27,179
to allocate a texture we're just trying

551
00:32:24,308 --> 00:32:30,369
to specify a new image for that texture

552
00:32:27,179 --> 00:32:34,028
so if we take a look at what we've got

553
00:32:30,369 --> 00:32:37,000
here we're in GL three obviously here's

554
00:32:34,028 --> 00:32:39,788
that GL text sub image call and I just

555
00:32:37,000 --> 00:32:47,950
want to fill this this data out with

556
00:32:39,788 --> 00:32:59,980
what I've been given so there's going to

557
00:32:47,950 --> 00:33:03,850
be I guess two different flavors here's

558
00:32:59,980 --> 00:33:05,409
the one for the 1d textures and we've

559
00:33:03,849 --> 00:33:10,000
got the DL

560
00:33:05,409 --> 00:33:11,950
texture 1d coming in here and we want to

561
00:33:10,000 --> 00:33:13,990
specify a couple different things first

562
00:33:11,950 --> 00:33:18,069
of all there is no myth map at the

563
00:33:13,990 --> 00:33:20,649
moment for the to 1d textures probably

564
00:33:18,069 --> 00:33:23,439
won't be so the MIT map level is always

565
00:33:20,648 --> 00:33:25,028
going to be zero the log level the X

566
00:33:23,440 --> 00:33:26,950
offset is going to be zero because we're

567
00:33:25,028 --> 00:33:29,288
specifying the whole texture the width

568
00:33:26,950 --> 00:33:31,629
is going to be 4096 because we've sort

569
00:33:29,288 --> 00:33:33,250
of hard-coded at the moment although in

570
00:33:31,628 --> 00:33:35,048
the future we could sort of expand that

571
00:33:33,250 --> 00:33:39,849
maybe will allow you to specify it who

572
00:33:35,048 --> 00:33:41,918
knows there's a GL enum format here the

573
00:33:39,849 --> 00:33:45,009
format in this case is what we're

574
00:33:41,919 --> 00:33:48,180
submitting it as we do have

575
00:33:45,009 --> 00:33:51,879
for the P next anyway we do have four

576
00:33:48,180 --> 00:33:54,250
different values so it's a GL rgba

577
00:33:51,880 --> 00:33:57,100
texture it's actually got all four

578
00:33:54,250 --> 00:34:00,430
components we've got a type that type is

579
00:33:57,099 --> 00:34:03,909
floating-point at the moment so it's

580
00:34:00,430 --> 00:34:05,950
going to be I guess it doesn't what

581
00:34:03,910 --> 00:34:08,139
there it is and like doesn't quite have

582
00:34:05,950 --> 00:34:10,599
it in there but does and then the data

583
00:34:08,139 --> 00:34:14,620
pointer so the again this is just a

584
00:34:10,599 --> 00:34:26,949
simple way of sending down this

585
00:34:14,619 --> 00:34:28,869
information to the card like so and then

586
00:34:26,949 --> 00:34:32,529
we've got one more kind of ado here

587
00:34:28,869 --> 00:34:35,559
which is the GL texture 3d call and

588
00:34:32,530 --> 00:34:37,840
that's for a 3d one and you can see us

589
00:34:35,559 --> 00:34:40,449
doing a little more complicated dance

590
00:34:37,840 --> 00:34:43,510
here with tight depth format and type

591
00:34:40,449 --> 00:34:45,369
are the same the level and target the

592
00:34:43,510 --> 00:34:47,380
same data point same but these are now

593
00:34:45,369 --> 00:34:49,359
three-dimensional so this is basically

594
00:34:47,380 --> 00:34:50,889
specifying a sub volume inside the

595
00:34:49,360 --> 00:34:52,240
texture we don't really want to specify

596
00:34:50,889 --> 00:34:54,849
so I know my sense of the whole thanks

597
00:34:52,239 --> 00:34:57,250
for just using 0 0 0 and the full width

598
00:34:54,849 --> 00:34:58,690
height and depth so let's go ahead and

599
00:34:57,250 --> 00:35:01,690
do that the other thing we could do here

600
00:34:58,690 --> 00:35:03,820
I guess since there's not really a point

601
00:35:01,690 --> 00:35:06,099
in not doing it at the moment in case

602
00:35:03,820 --> 00:35:08,470
you want to play with resolutions in an

603
00:35:06,099 --> 00:35:16,409
easier way what I could do here as well

604
00:35:08,469 --> 00:35:16,409
is just say like data width right

605
00:35:20,349 --> 00:35:25,119
something like that and then when we

606
00:35:23,409 --> 00:35:51,969
come in here we could just specify this

607
00:35:25,119 --> 00:35:53,710
as light data with now.i so we don't

608
00:35:51,969 --> 00:35:55,329
really care right now about anything

609
00:35:53,710 --> 00:35:56,530
regarding this because like I said I

610
00:35:55,329 --> 00:36:00,009
don't even think this is something we'll

611
00:35:56,530 --> 00:36:01,660
probably use particularly much you know

612
00:36:00,010 --> 00:36:02,800
I don't know that code of this nature

613
00:36:01,659 --> 00:36:03,940
will be shipping because I don't know

614
00:36:02,800 --> 00:36:06,310
that we'll be doing any lighting on the

615
00:36:03,940 --> 00:36:08,860
CPU it may all be based on the GPU by

616
00:36:06,309 --> 00:36:15,809
that point but the point here is simply

617
00:36:08,860 --> 00:36:19,480
that if you take a look at these GL

618
00:36:15,809 --> 00:36:21,789
calls here we are specifying with that

619
00:36:19,480 --> 00:36:23,019
width is the full width of the potential

620
00:36:21,789 --> 00:36:26,769
set of data that we specified the

621
00:36:23,019 --> 00:36:29,170
textures but we didn't probably use all

622
00:36:26,769 --> 00:36:30,880
of that so what we could do instead is

623
00:36:29,170 --> 00:36:32,710
just remember what the highest number we

624
00:36:30,880 --> 00:36:34,599
used was and only transferred that much

625
00:36:32,710 --> 00:36:37,570
down because we know that's how much

626
00:36:34,599 --> 00:36:38,799
data we're actually going to use again I

627
00:36:37,570 --> 00:36:40,510
don't really care about that even

628
00:36:38,800 --> 00:36:43,930
remotely at the moment it's not the

629
00:36:40,510 --> 00:36:46,240
least of which because even if we were

630
00:36:43,929 --> 00:36:48,730
going to ship this code this is the

631
00:36:46,239 --> 00:36:50,289
small part of the problem this 3d

632
00:36:48,730 --> 00:36:53,710
texture over here is much larger than

633
00:36:50,289 --> 00:36:56,019
either of these two are and so slightly

634
00:36:53,710 --> 00:36:58,360
reducing the bandwidth on the 1d image

635
00:36:56,019 --> 00:37:04,650
transfers is probably not going to make

636
00:36:58,360 --> 00:37:07,720
a difference just based on the

637
00:37:04,650 --> 00:37:10,900
disproportionate size of those things so

638
00:37:07,719 --> 00:37:13,480
if I go ahead now and do the Geo textile

639
00:37:10,900 --> 00:37:17,380
image 3d call I'm going to specify the

640
00:37:13,480 --> 00:37:18,909
GL texture 3d because that's what we're

641
00:37:17,380 --> 00:37:19,990
actually going to be using and then I'm

642
00:37:18,909 --> 00:37:21,789
going to specify the rest of the things

643
00:37:19,989 --> 00:37:25,269
exactly as you expect there's the level

644
00:37:21,789 --> 00:37:28,690
and there's the base and now I just need

645
00:37:25,269 --> 00:37:30,769
to specify the various slices here

646
00:37:28,690 --> 00:37:35,210
there's the width

647
00:37:30,769 --> 00:37:37,909
there's the height and there is oops the

648
00:37:35,210 --> 00:37:42,559
depth of the texture and then we just

649
00:37:37,909 --> 00:37:44,690
need the format and the type so the

650
00:37:42,559 --> 00:37:47,750
format in this case this is just a

651
00:37:44,690 --> 00:37:50,450
single u16 so the format is actually

652
00:37:47,750 --> 00:37:51,889
just going to be a single value so it's

653
00:37:50,449 --> 00:37:54,109
just it's just going to be like the red

654
00:37:51,889 --> 00:37:56,750
channel of the texture there's there's

655
00:37:54,110 --> 00:37:59,660
no other information in it and we've got

656
00:37:56,750 --> 00:38:03,199
an unsigned short which is an offset

657
00:37:59,659 --> 00:38:04,969
into the lighting information and so

658
00:38:03,199 --> 00:38:11,359
that's pretty much all the information

659
00:38:04,969 --> 00:38:13,429
we've got here right that alone is

660
00:38:11,360 --> 00:38:15,380
pretty much enough to transfer all of

661
00:38:13,429 --> 00:38:17,179
the lighting data down to the card the

662
00:38:15,380 --> 00:38:19,789
problem now is we actually need

663
00:38:17,179 --> 00:38:21,469
someplace to actually put it and what

664
00:38:19,789 --> 00:38:24,920
you can see here is although we're

665
00:38:21,469 --> 00:38:26,659
calling GL texture 1 B 1 B 3d we have

666
00:38:24,920 --> 00:38:29,059
not found any textures so we're not

667
00:38:26,659 --> 00:38:30,679
really targeting any textures here so

668
00:38:29,059 --> 00:38:33,739
what we want to do here is something

669
00:38:30,679 --> 00:38:35,179
like a bind texture to put a texture

670
00:38:33,739 --> 00:38:37,608
into the slot that we're about to

671
00:38:35,179 --> 00:38:38,899
specify and that's where we get to the

672
00:38:37,608 --> 00:38:41,900
part where we actually need to allocate

673
00:38:38,900 --> 00:38:44,210
the textures right we need to have some

674
00:38:41,900 --> 00:38:47,450
textures that we've allocated that can

675
00:38:44,210 --> 00:38:49,849
be used here so when we do a deal binds

676
00:38:47,449 --> 00:38:51,589
texture we're going to need a place to

677
00:38:49,849 --> 00:38:53,960
get these since these are going to

678
00:38:51,590 --> 00:38:56,809
pretty much just be global textures that

679
00:38:53,960 --> 00:38:58,970
just kind of sit around we can also just

680
00:38:56,809 --> 00:39:02,210
assume that there are things that we got

681
00:38:58,969 --> 00:39:05,569
in here right so what we can do instead

682
00:39:02,210 --> 00:39:09,500
for example is just say alright let's go

683
00:39:05,570 --> 00:39:10,490
ahead and make a Glu entir for the

684
00:39:09,500 --> 00:39:19,250
different textures that we're going to

685
00:39:10,489 --> 00:39:22,189
have lighting P next letting see letting

686
00:39:19,250 --> 00:39:25,608
look up and so these will just sit here

687
00:39:22,190 --> 00:39:26,990
for the moment until we have you know

688
00:39:25,608 --> 00:39:31,579
some better idea of how we want to

689
00:39:26,989 --> 00:39:34,209
handle them and then we can just use

690
00:39:31,579 --> 00:39:34,210
those here

691
00:39:36,340 --> 00:39:41,090
so this lighting PNX letting see light

692
00:39:39,260 --> 00:39:43,460
and look up those are going to come off

693
00:39:41,090 --> 00:39:47,059
of the global open jail because they are

694
00:39:43,460 --> 00:40:01,970
detection sit around and that's really

695
00:39:47,059 --> 00:40:04,039
all we need so what we want to do here

696
00:40:01,969 --> 00:40:06,980
oh and I guess the other thing we need

697
00:40:04,039 --> 00:40:11,929
to do is make sure that these constants

698
00:40:06,980 --> 00:40:14,780
are actually specified in a place that

699
00:40:11,929 --> 00:40:21,399
can be accessible so we want to go ahead

700
00:40:14,780 --> 00:40:24,650
- in fact we probably if we were being

701
00:40:21,400 --> 00:40:27,500
reasonable here we would probably want

702
00:40:24,650 --> 00:40:29,059
to say that this stuff now kind of just

703
00:40:27,500 --> 00:40:31,309
lives in the platform layer since it is

704
00:40:29,059 --> 00:40:37,389
actually a render something that it has

705
00:40:31,309 --> 00:40:37,389
to work with the renderer

706
00:40:43,329 --> 00:40:50,559
all right so the only problem that we

707
00:40:46,809 --> 00:40:52,869
have encountered here and that's

708
00:40:50,559 --> 00:40:56,349
security the only problem that we've

709
00:40:52,869 --> 00:40:59,099
encountered so far is the 3d textures

710
00:40:56,349 --> 00:41:01,809
obviously we're introduced to OpenGL

711
00:40:59,099 --> 00:41:06,869
subsequent to the initial version of

712
00:41:01,809 --> 00:41:06,869
OpenGL and Windows which is very early

713
00:41:08,519 --> 00:41:14,679
Microsoft decided to stop updating it

714
00:41:12,719 --> 00:41:19,029
because they wanted people to use

715
00:41:14,679 --> 00:41:20,859
DirectX not surprisingly so we have to

716
00:41:19,030 --> 00:41:24,940
go ahead and do another cut and paste to

717
00:41:20,860 --> 00:41:27,970
get ourselves this GL text sub image 3d

718
00:41:24,940 --> 00:41:37,929
call so I'm going to go ahead and grab

719
00:41:27,969 --> 00:41:38,439
that again nothing fancy here just the

720
00:41:37,929 --> 00:41:48,789
same

721
00:41:38,440 --> 00:41:51,789
oops thing we've done multiple times so

722
00:41:48,789 --> 00:41:53,829
here is text sub image and here is text

723
00:41:51,789 --> 00:41:55,779
image I'm going to want both of those

724
00:41:53,829 --> 00:41:57,579
the reason I'm going to want both of

725
00:41:55,780 --> 00:42:02,560
those is I'm going to need GL text image

726
00:41:57,579 --> 00:42:05,400
3d to allocate the texture so I need to

727
00:42:02,559 --> 00:42:08,549
have both of those available to me so

728
00:42:05,400 --> 00:42:08,550
here we are

729
00:42:26,989 --> 00:42:47,729
those the two calls that we actually

730
00:42:29,070 --> 00:43:01,320
need again we have to sly loading code

731
00:42:47,730 --> 00:43:02,849
as well buffers yeah and now we should

732
00:43:01,320 --> 00:43:13,340
be loading bids we should be able to

733
00:43:02,849 --> 00:43:13,339
call them I think I do that wrong I did

734
00:43:16,010 --> 00:43:21,180
okay so now we can call those just fine

735
00:43:19,559 --> 00:43:25,049
the only thing we don't have is the

736
00:43:21,179 --> 00:43:26,279
identifiers for GL texture 3d so let me

737
00:43:25,050 --> 00:43:27,690
just well in fact it's right there I

738
00:43:26,280 --> 00:43:28,710
have I was going to search for it but I

739
00:43:27,690 --> 00:43:37,340
didn't have to because it was sitting

740
00:43:28,710 --> 00:43:40,500
right there and now we should be good so

741
00:43:37,340 --> 00:43:42,510
what will happen now is if we actually

742
00:43:40,500 --> 00:43:45,000
ran this we would get an error because

743
00:43:42,510 --> 00:43:46,920
well presumably get an error because we

744
00:43:45,000 --> 00:43:49,710
don't actually have a texture allocated

745
00:43:46,920 --> 00:43:52,230
so we should get an error that says that

746
00:43:49,710 --> 00:43:53,429
that texture handle is invalid or

747
00:43:52,230 --> 00:43:57,289
something to that effect

748
00:43:53,429 --> 00:43:57,289
let me see what we actually got Oh

749
00:44:05,548 --> 00:44:14,619
we're in release mode so it can't

750
00:44:07,838 --> 00:44:16,239
identify that variable I'm assuming it

751
00:44:14,619 --> 00:44:18,068
hasn't gives any additional information

752
00:44:16,239 --> 00:44:18,548
but I'm assuming that is exactly what I

753
00:44:18,068 --> 00:44:21,099
said

754
00:44:18,548 --> 00:44:26,980
since its omits texture beverage 1d call

755
00:44:21,099 --> 00:44:29,588
presumably the error is that the well I

756
00:44:26,980 --> 00:44:32,170
guess I don't know but presumably the

757
00:44:29,588 --> 00:44:33,599
error is that we have an allocated the

758
00:44:32,170 --> 00:44:35,739
texture data so I'm hoping anyway

759
00:44:33,599 --> 00:44:37,630
because that was the one that I was

760
00:44:35,739 --> 00:44:40,028
expecting if it's not that then I

761
00:44:37,630 --> 00:44:40,630
suppose were we're in a little bit of a

762
00:44:40,028 --> 00:44:45,480
bind

763
00:44:40,630 --> 00:44:50,670
but moving along under that assumption

764
00:44:45,480 --> 00:44:53,528
let's go ahead and find out what we can

765
00:44:50,670 --> 00:44:58,720
do for the allocation there I'm going to

766
00:44:53,528 --> 00:45:01,119
hop in to OpenGL code where we allocate

767
00:44:58,719 --> 00:45:03,998
our frame buffers and such and just try

768
00:45:01,119 --> 00:45:12,700
allocating those textures now every time

769
00:45:03,998 --> 00:45:16,259
the settings change happens all right so

770
00:45:12,699 --> 00:45:16,259
I'm just going to call delete textures

771
00:45:18,088 --> 00:45:27,219
on OpenGL here three times and again

772
00:45:23,409 --> 00:45:33,929
I'll just free these textures lighting T

773
00:45:27,219 --> 00:45:33,929
next playing C and lighting lookup

774
00:45:41,409 --> 00:45:45,608
and then I will just allocate them

775
00:45:59,400 --> 00:46:02,479
[Music]

776
00:46:06,969 --> 00:46:14,449
so I think that should do it in terms of

777
00:46:11,900 --> 00:46:17,450
generating texture handles and then we

778
00:46:14,449 --> 00:46:23,028
just have to specify the size of each of

779
00:46:17,449 --> 00:46:27,469
these so a text image one D and a text

780
00:46:23,028 --> 00:46:31,960
image 3 D we should now be able to

781
00:46:27,469 --> 00:46:34,068
specify these so let's go ahead and

782
00:46:31,960 --> 00:46:38,269
actually call that

783
00:46:34,068 --> 00:46:40,518
so here's text image 1 D again the

784
00:46:38,268 --> 00:46:42,588
target in this case and I guess I can

785
00:46:40,518 --> 00:46:46,189
just kind of make these happen alongside

786
00:46:42,588 --> 00:47:18,170
their respective folks here you'll find

787
00:46:46,190 --> 00:47:24,588
texture texture in 1d alright I so so

788
00:47:18,170 --> 00:47:27,019
what I just did there so now we've bound

789
00:47:24,588 --> 00:47:29,028
the textures we specify the texture so

790
00:47:27,018 --> 00:47:32,328
it's the fill in the parameters to these

791
00:47:29,028 --> 00:47:38,318
text image calls we should be good to go

792
00:47:32,329 --> 00:47:38,318
I can also unbind the textures

793
00:47:42,719 --> 00:47:50,199
at the end just in case to clear

794
00:47:46,960 --> 00:47:54,720
everything out so now we just need calls

795
00:47:50,199 --> 00:47:59,288
that will actually put something in here

796
00:47:54,719 --> 00:48:03,308
and the way we're probably going to do

797
00:47:59,289 --> 00:48:04,839
this is just by specifying the size of

798
00:48:03,309 --> 00:48:07,298
the texture without actually specifying

799
00:48:04,838 --> 00:48:11,380
made contents and the contents will be

800
00:48:07,298 --> 00:48:14,528
filled in later so this parameter will

801
00:48:11,380 --> 00:48:18,099
just leave as zero which I believe we're

802
00:48:14,528 --> 00:48:19,960
allowed to do to just set the size yet

803
00:48:18,099 --> 00:48:22,088
you can see here that if data is a null

804
00:48:19,960 --> 00:48:24,400
pointer texture memory allocated to kana

805
00:48:22,088 --> 00:48:27,250
texture of with with commend onload sub

806
00:48:24,400 --> 00:48:29,318
textures after that which is all we

807
00:48:27,250 --> 00:48:32,769
really want to do so here we've got

808
00:48:29,318 --> 00:48:36,519
target we know the target is always 1d

809
00:48:32,769 --> 00:48:39,250
we got level to zero we need an internal

810
00:48:36,519 --> 00:48:41,528
format the internal format has to be

811
00:48:39,250 --> 00:48:46,440
floating point for the P next texture I

812
00:48:41,528 --> 00:48:46,440
believe I right about that

813
00:48:47,190 --> 00:48:52,778
yeah and as you can see it's a mixed

814
00:48:50,949 --> 00:48:59,019
texture there it's got floating point

815
00:48:52,778 --> 00:49:01,289
values and it's got u-32 and we could

816
00:48:59,019 --> 00:49:05,288
choose to specify those two things

817
00:49:01,289 --> 00:49:07,119
separately and in fact you know looking

818
00:49:05,289 --> 00:49:11,490
at it it may have been smarter to make

819
00:49:07,119 --> 00:49:15,660
to you thirty twos in the C texture and

820
00:49:11,489 --> 00:49:20,379
then just VIII's for the P next texture

821
00:49:15,659 --> 00:49:27,399
but it's hard to say so I'm thinking you

822
00:49:20,380 --> 00:49:32,260
know it's you know what that reminds me

823
00:49:27,400 --> 00:49:35,858
we didn't the before I finished finished

824
00:49:32,260 --> 00:49:40,470
saying that thought for the lighting see

825
00:49:35,858 --> 00:49:40,469
here this is not float

826
00:49:43,659 --> 00:49:55,329
right so what we want to do here is

827
00:49:52,269 --> 00:49:57,340
presumably just stick with with with

828
00:49:55,329 --> 00:50:00,389
floating-point storage and have it so

829
00:49:57,340 --> 00:50:04,690
that it will just correctly set it to

830
00:50:00,389 --> 00:50:07,509
what it needs to set it to initiator

831
00:50:04,690 --> 00:50:11,530
will just convert between the two so

832
00:50:07,510 --> 00:50:15,570
let's go ahead and finish filling those

833
00:50:11,530 --> 00:50:19,210
in so yeah I would say for Jill decks

834
00:50:15,570 --> 00:50:20,800
for the internal format I would say we

835
00:50:19,210 --> 00:50:27,070
probably want to do here it's a that's

836
00:50:20,800 --> 00:50:29,590
going to be GL float right well I guess

837
00:50:27,070 --> 00:50:32,220
we have to specify RGB float so let's

838
00:50:29,590 --> 00:50:32,220
see here

839
00:50:37,110 --> 00:50:42,210
it's gonna be RGB looks like they don't

840
00:50:39,179 --> 00:50:45,359
by default to find that one but it's

841
00:50:42,210 --> 00:50:54,090
okay because we actually do have it so

842
00:50:45,360 --> 00:50:59,780
it's GL RGB 32f RGB a 32 F the width is

843
00:50:54,090 --> 00:51:03,210
going to be that lighting data width or

844
00:50:59,780 --> 00:51:04,740
the border value obviously zero we don't

845
00:51:03,210 --> 00:51:08,250
have any texture border stuff happening

846
00:51:04,739 --> 00:51:12,299
here the formatted sectional data is RGB

847
00:51:08,250 --> 00:51:15,889
a the type of the pixel data is GL float

848
00:51:12,300 --> 00:51:18,390
and then we've got at that zero in there

849
00:51:15,889 --> 00:51:23,309
so same thing happens here only this

850
00:51:18,389 --> 00:51:25,379
time we pretty much yeah we we pretty

851
00:51:23,309 --> 00:51:28,469
much don't need to store anything fancy

852
00:51:25,380 --> 00:51:31,970
this time we're just using on standard

853
00:51:28,469 --> 00:51:31,969
color it's just a standard color texture

854
00:51:33,559 --> 00:51:39,920
and then in buying texture that's right

855
00:51:37,170 --> 00:51:43,200
in the text image 3d we've got the same

856
00:51:39,920 --> 00:51:49,470
process but this time we're going to

857
00:51:43,199 --> 00:51:57,899
have to do the full width height depth

858
00:51:49,469 --> 00:52:00,569
call that's 2d there's 3d I so there's

859
00:51:57,900 --> 00:52:02,369
the again same set of parameters we've

860
00:52:00,570 --> 00:52:04,890
got the target specified already we got

861
00:52:02,369 --> 00:52:07,650
the level now the internal format is

862
00:52:04,889 --> 00:52:10,469
just the red Channel we've got a width

863
00:52:07,650 --> 00:52:19,940
height and the depth that we know it's

864
00:52:10,469 --> 00:52:24,349
the lighting lookup values like so

865
00:52:19,940 --> 00:52:24,349
there's no border we've got a format

866
00:52:28,780 --> 00:52:35,780
think the internal format here is still

867
00:52:31,489 --> 00:52:37,029
just read am I wrong about that maybe

868
00:52:35,780 --> 00:52:40,810
not

869
00:52:37,030 --> 00:52:40,810
how about r8

870
00:52:45,679 --> 00:52:48,519
there it is

871
00:52:55,019 --> 00:53:03,969
so I think now all those are specified

872
00:52:57,400 --> 00:53:05,590
properly all right so we've got that the

873
00:53:03,969 --> 00:53:08,919
border now now we just need to specify

874
00:53:05,590 --> 00:53:10,480
the format and the type again in here

875
00:53:08,920 --> 00:53:13,000
this is a single channel so this should

876
00:53:10,480 --> 00:53:15,070
just be GL read and the type in this

877
00:53:13,000 --> 00:53:18,489
case is just going to be the unsigned

878
00:53:15,070 --> 00:53:20,260
short now those are kind of academic

879
00:53:18,489 --> 00:53:23,679
because we're not actually passing any

880
00:53:20,260 --> 00:53:25,510
data but we probably want to make them

881
00:53:23,679 --> 00:53:28,199
reasonable

882
00:53:25,510 --> 00:53:30,430
it looks like Ari is not defined

883
00:53:28,199 --> 00:53:35,639
probably because we've never sent down a

884
00:53:30,429 --> 00:53:37,659
single sort of mono mono texture before

885
00:53:35,639 --> 00:53:39,099
so I'm just going to go ahead and grab

886
00:53:37,659 --> 00:53:40,719
that in there and add it to our

887
00:53:39,099 --> 00:53:42,929
collection of extended texture formats

888
00:53:40,719 --> 00:53:42,929
here

889
00:53:53,969 --> 00:54:02,309
uh well actually this is an R 16 though

890
00:53:59,699 --> 00:54:18,858
isn't it because I did say it's unsigned

891
00:54:02,309 --> 00:54:18,858
short I'll grab the re as well alright

892
00:54:21,509 --> 00:54:26,429
uh so now we want to do is just clean

893
00:54:24,809 --> 00:54:33,269
that up let's see we want it to not be

894
00:54:26,429 --> 00:54:34,469
r8 we need that to actually be our 16 so

895
00:54:33,268 --> 00:54:37,198
now we want to see if we're getting this

896
00:54:34,469 --> 00:54:42,778
transferred properly and let's go ahead

897
00:54:37,199 --> 00:54:47,639
and see if that's actually true all

898
00:54:42,778 --> 00:54:50,938
right so now we're able to maybe in

899
00:54:47,639 --> 00:54:52,439
theory transfer the texture damn we we

900
00:54:50,938 --> 00:54:54,868
don't get any errors we don't know that

901
00:54:52,438 --> 00:54:58,739
that means that it's working properly we

902
00:54:54,869 --> 00:55:01,729
just know that you know there isn't

903
00:54:58,739 --> 00:55:05,728
obvious an error so bad that it gets

904
00:55:01,728 --> 00:55:08,158
complained about so let's take a look

905
00:55:05,728 --> 00:55:11,608
here and see now as far as output

906
00:55:08,159 --> 00:55:13,528
lighting is concerned I'm going to go

907
00:55:11,608 --> 00:55:16,159
ahead and say let's do something really

908
00:55:13,528 --> 00:55:19,469
weird here I'm going to go ahead and say

909
00:55:16,159 --> 00:55:25,699
let's do the push lighting at the end

910
00:55:19,469 --> 00:55:25,699
when we do output lighting textures here

911
00:55:26,929 --> 00:55:36,119
let me just make sure this is - I think

912
00:55:30,268 --> 00:55:40,528
it's doing yeah I'm just going to do

913
00:55:36,119 --> 00:55:43,858
that here well I guess I guess we can't

914
00:55:40,528 --> 00:55:48,449
quite do that here I just want to send

915
00:55:43,858 --> 00:55:50,818
this solution to the card so that when

916
00:55:48,449 --> 00:55:52,500
it when it finishes doing output

917
00:55:50,818 --> 00:55:55,590
lighting textures

918
00:55:52,500 --> 00:55:55,590
[Music]

919
00:55:58,469 --> 00:56:01,759
it will actually send it

920
00:56:23,298 --> 00:56:26,809
so when you hit it you know you do the

921
00:56:25,159 --> 00:56:29,118
lighting test you send the lighting

922
00:56:26,809 --> 00:56:30,829
textures down then they will be on the

923
00:56:29,119 --> 00:56:33,499
card and they'll just you know they'll

924
00:56:30,829 --> 00:56:35,599
just pay on the card and so then we can

925
00:56:33,498 --> 00:56:37,068
render from those textures that way we

926
00:56:35,599 --> 00:56:38,690
don't have to update them every frame

927
00:56:37,068 --> 00:56:40,400
just in case it turns out that that

928
00:56:38,690 --> 00:56:43,159
texture update is really slow at some

929
00:56:40,400 --> 00:56:45,440
point while we're testing we don't have

930
00:56:43,159 --> 00:56:47,629
to worry so now you know in theory we

931
00:56:45,440 --> 00:56:49,759
hit f1 we can see the solution then we

932
00:56:47,630 --> 00:56:57,769
can flip back those lighting textures

933
00:56:49,759 --> 00:57:00,170
should now still be on the card so we

934
00:56:57,768 --> 00:57:03,198
should be able to be using them now in

935
00:57:00,170 --> 00:57:07,130
the middle of the render right that's

936
00:57:03,199 --> 00:57:09,019
that should be that should be working so

937
00:57:07,130 --> 00:57:10,519
now the question is just well alright if

938
00:57:09,018 --> 00:57:12,889
we want to actually use those in the

939
00:57:10,518 --> 00:57:16,218
renderer how would we do that we've got

940
00:57:12,889 --> 00:57:18,618
these extra textures there so if we take

941
00:57:16,219 --> 00:57:21,469
a look in the OpenGL code at how the

942
00:57:18,619 --> 00:57:24,440
shaders are working at the moment really

943
00:57:21,469 --> 00:57:25,729
we're just talking about changing it so

944
00:57:24,440 --> 00:57:29,690
that we have some way of sampling

945
00:57:25,728 --> 00:57:37,088
lighting inside the render the basic

946
00:57:29,690 --> 00:57:37,088
render right so here's the DPS program

947
00:57:38,949 --> 00:57:42,249
you know I

948
00:57:45,838 --> 00:57:54,279
see I attempted to add in compile Z bias

949
00:57:50,588 --> 00:57:56,619
program look at this the fact that we

950
00:57:54,280 --> 00:57:58,180
have version 333 supply every time I'm

951
00:57:56,619 --> 00:58:01,180
tempted to just put that in the shared

952
00:57:58,179 --> 00:58:04,569
code I won't do it yet but it's

953
00:58:01,179 --> 00:58:06,719
something to think about anyway I so if

954
00:58:04,570 --> 00:58:10,900
you take a look at what's going on here

955
00:58:06,719 --> 00:58:14,469
in our compiled Z bias program what I

956
00:58:10,900 --> 00:58:17,079
want to do is I want to have a way of

957
00:58:14,469 --> 00:58:21,309
specifying lighting in here so you can

958
00:58:17,079 --> 00:58:23,410
see that this is you know in fact all of

959
00:58:21,309 --> 00:58:25,210
this stuff is kind of old so this stuff

960
00:58:23,409 --> 00:58:38,230
is we don't need any of this stuff that

961
00:58:25,210 --> 00:58:39,789
we were using before so for example yeah

962
00:58:38,230 --> 00:58:40,960
just looking at the blend unit color

963
00:58:39,789 --> 00:58:42,759
that we're outputting we don't really

964
00:58:40,960 --> 00:58:45,900
need any of that anymore so all of this

965
00:58:42,760 --> 00:58:49,690
stuff is it's more or less unnecessary

966
00:58:45,900 --> 00:58:53,639
and we should probably get rid of it in

967
00:58:49,690 --> 00:58:53,639
fact we can just get rid of it

968
00:59:02,530 --> 00:59:08,230
there's really nothing we need that for

969
00:59:05,230 --> 00:59:08,230
right

970
00:59:24,130 --> 00:59:29,769
so all we need to do now is we need to

971
00:59:26,170 --> 00:59:32,559
actually be providing these textures so

972
00:59:29,769 --> 00:59:36,159
that they can be looked up into as part

973
00:59:32,559 --> 00:59:39,009
of this this portion of the program and

974
00:59:36,159 --> 00:59:41,309
we also need to make sure of a couple

975
00:59:39,010 --> 00:59:44,560
things well we may not need to because

976
00:59:41,309 --> 00:59:46,420
we may use texture calls that that make

977
00:59:44,559 --> 00:59:49,920
it so that it won't happen automatically

978
00:59:46,420 --> 00:59:54,639
but basically what we need is some way

979
00:59:49,920 --> 00:59:55,900
of sampling from the voxels look up

980
00:59:54,639 --> 00:59:59,049
texture and getting the light

981
00:59:55,900 --> 01:00:01,180
information out that we need now in

982
00:59:59,050 --> 01:00:02,500
order to do the first step of that we're

983
01:00:01,179 --> 01:00:05,409
just going to do the same things that we

984
01:00:02,500 --> 01:00:07,599
have been doing which is to specify some

985
01:00:05,409 --> 01:00:10,750
samplers in here so what we want to do

986
01:00:07,599 --> 01:00:24,099
there is just say like okay we've got a

987
01:00:10,750 --> 01:00:29,739
sampler one be two of those in one

988
01:00:24,099 --> 01:00:40,500
sampler 3d so that we can do a Teaneck

989
01:00:29,739 --> 01:00:45,669
sampler B sampler and look up sampler

990
01:00:40,500 --> 01:00:55,300
and in order to figure out the locations

991
01:00:45,670 --> 01:00:58,420
that we should be sampling from we have

992
01:00:55,300 --> 01:01:02,769
fundamentally the same problem that we

993
01:00:58,420 --> 01:01:06,608
had in the actual CPU side code to

994
01:01:02,769 --> 01:01:07,300
figure out where we're going to look so

995
01:01:06,608 --> 01:01:14,159
we're going to need additional

996
01:01:07,300 --> 01:01:16,240
information here that helps us with that

997
01:01:14,159 --> 01:01:20,049
so first we're going to need the minimum

998
01:01:16,239 --> 01:01:22,750
corner of our voxel lookup that's going

999
01:01:20,050 --> 01:01:24,190
to tell us how the you know that's going

1000
01:01:22,750 --> 01:01:25,989
to give us basically the basis so we

1001
01:01:24,190 --> 01:01:29,380
could subtract away that minimum corner

1002
01:01:25,989 --> 01:01:31,629
and get a position relative to the

1003
01:01:29,380 --> 01:01:33,280
corner of the voxel but then the other

1004
01:01:31,630 --> 01:01:35,470
thing we want to be able to do is have

1005
01:01:33,280 --> 01:01:36,849
some way of converting once we have that

1006
01:01:35,469 --> 01:01:38,858
relative position

1007
01:01:36,849 --> 01:01:40,568
have some way of converting so that we

1008
01:01:38,858 --> 01:01:45,639
can figure out where in the box we are

1009
01:01:40,568 --> 01:01:47,978
in terms of individual units right so we

1010
01:01:45,639 --> 01:01:55,058
also need in this to the mid corner we

1011
01:01:47,978 --> 01:01:57,308
need that M cell dim and so then when we

1012
01:01:55,059 --> 01:02:00,759
come through here and we have the actual

1013
01:01:57,309 --> 01:02:03,720
position value that we're looking at I

1014
01:02:00,759 --> 01:02:06,460
don't know what light P is here exactly

1015
01:02:03,719 --> 01:02:09,939
but world P is the only thing that we

1016
01:02:06,460 --> 01:02:12,099
actually care about as far as this is

1017
01:02:09,940 --> 01:02:14,170
concerned so that when we come here to

1018
01:02:12,099 --> 01:02:17,009
compute the lighting what we're sexually

1019
01:02:14,170 --> 01:02:20,979
it's actually going to do is say like

1020
01:02:17,009 --> 01:02:22,719
you know Vox P equals world P minus min

1021
01:02:20,978 --> 01:02:27,248
corner and I guess you could save Oxman

1022
01:02:22,719 --> 01:02:29,919
corner and then we can also say like

1023
01:02:27,248 --> 01:02:35,578
voxel index effectively assuming the

1024
01:02:29,920 --> 01:02:45,818
voxel P times the in cell dimension

1025
01:02:35,579 --> 01:02:48,849
right and I guess really we're never

1026
01:02:45,818 --> 01:02:54,460
going to use that otherwise so might as

1027
01:02:48,849 --> 01:02:57,930
well just put it like that so yeah so

1028
01:02:54,460 --> 01:02:57,929
once we have that piece of information

1029
01:03:06,989 --> 01:03:13,289
we now have sort of the indexing values

1030
01:03:09,510 --> 01:03:15,030
for the voxel in question and we can

1031
01:03:13,289 --> 01:03:20,070
look up into the 3d texture at that

1032
01:03:15,030 --> 01:03:24,840
point to find the the correct element

1033
01:03:20,070 --> 01:03:36,349
right so what we want to do is we want

1034
01:03:24,840 --> 01:03:36,349
to find a 3d texture sampling call oops

1035
01:03:58,630 --> 01:04:04,028
so here you can see probably the code

1036
01:04:01,179 --> 01:04:08,379
that we would want to use remember this

1037
01:04:04,028 --> 01:04:11,849
a 3d texture is not really a texture

1038
01:04:08,380 --> 01:04:14,289
it's more of a lookup table right

1039
01:04:11,849 --> 01:04:16,088
meaning that the elements in it don't

1040
01:04:14,289 --> 01:04:18,549
represent anything that we can really

1041
01:04:16,088 --> 01:04:20,528
draw they're just indexes and those

1042
01:04:18,548 --> 01:04:22,900
indexes are telling us where to look in

1043
01:04:20,528 --> 01:04:25,179
another texture to get the information

1044
01:04:22,900 --> 01:04:26,889
we were looking for what that means is

1045
01:04:25,179 --> 01:04:29,169
we definitely don't want to invoke any

1046
01:04:26,889 --> 01:04:31,509
bilinear sampling and we don't really

1047
01:04:29,170 --> 01:04:33,999
want to use any kind of fractional

1048
01:04:31,509 --> 01:04:37,088
lookup into the texture we just want to

1049
01:04:33,998 --> 01:04:39,459
look in a specific single location and

1050
01:04:37,088 --> 01:04:41,528
get out the information that is

1051
01:04:39,460 --> 01:04:44,619
contained in the texture at that point

1052
01:04:41,528 --> 01:04:48,039
and so if we look at what we probably

1053
01:04:44,619 --> 01:04:51,220
want to get here when we do one of these

1054
01:04:48,039 --> 01:04:54,089
textile fetches what we want to do is we

1055
01:04:51,219 --> 01:04:57,998
want to take that textile fetch and

1056
01:04:54,088 --> 01:05:00,190
provide integer coordinates to it so we

1057
01:04:57,998 --> 01:05:05,078
will get back exactly the value with no

1058
01:05:00,190 --> 01:05:08,979
blending right and in order to do that

1059
01:05:05,079 --> 01:05:10,599
we need to convert me to truncate to an

1060
01:05:08,978 --> 01:05:13,598
eye vac now I don't know if we can

1061
01:05:10,599 --> 01:05:16,210
actually specify exactly what to do here

1062
01:05:13,599 --> 01:05:25,269
in terms of rounding versus truncating

1063
01:05:16,210 --> 01:05:33,460
but I assume that we could so so floor

1064
01:05:25,268 --> 01:05:37,199
is actually fine for our purposes in

1065
01:05:33,460 --> 01:05:37,199
this case right

1066
01:05:37,480 --> 01:05:45,099
so we can just do something like this

1067
01:05:42,000 --> 01:05:49,289
and I guess since we have an I've x3

1068
01:05:45,099 --> 01:05:49,289
here that we're going to want to use

1069
01:05:54,389 --> 01:06:05,409
something like that I after flooring it

1070
01:05:58,480 --> 01:06:07,329
we also want to convert it right so at

1071
01:06:05,409 --> 01:06:09,279
that point we will have a knive x3

1072
01:06:07,329 --> 01:06:11,380
that's the integer coordinates in the

1073
01:06:09,280 --> 01:06:20,980
voxel where we are and in theory at that

1074
01:06:11,380 --> 01:06:23,320
point we can fetch from the voxel so

1075
01:06:20,980 --> 01:06:25,088
again here is my 3d sampler I'm just

1076
01:06:23,320 --> 01:06:28,809
going to say I would like to fetch from

1077
01:06:25,088 --> 01:06:33,820
that sampler I would like to fetch from

1078
01:06:28,809 --> 01:06:36,190
this location and we don't really have

1079
01:06:33,820 --> 01:06:42,640
to specify a lot because we only have

1080
01:06:36,190 --> 01:06:46,358
one level of the texture so that's the

1081
01:06:42,639 --> 01:06:49,868
basic idea as one problem that we have

1082
01:06:46,358 --> 01:06:51,429
here and I'm not really sure to be

1083
01:06:49,869 --> 01:06:55,960
completely honest with you I'm not

1084
01:06:51,429 --> 01:06:59,919
really sure how shader model 3/3 will

1085
01:06:55,960 --> 01:07:02,740
allow us to get around it since we have

1086
01:06:59,920 --> 01:07:05,769
a texture we don't actually want it to

1087
01:07:02,739 --> 01:07:08,289
sample the texture in floating-point we

1088
01:07:05,769 --> 01:07:12,159
just want to sample the texture in

1089
01:07:08,289 --> 01:07:13,809
integer now thankfully for us the

1090
01:07:12,159 --> 01:07:17,649
integers that we're representing here

1091
01:07:13,809 --> 01:07:19,900
are only 16 bits wide so actually when

1092
01:07:17,650 --> 01:07:21,730
this red channel comes back and it has a

1093
01:07:19,900 --> 01:07:23,588
floating-point value in it we can't

1094
01:07:21,730 --> 01:07:28,059
actually just convert it to integer for

1095
01:07:23,588 --> 01:07:31,358
free right we can just convert it to an

1096
01:07:28,059 --> 01:07:35,049
int and then we have the index into the

1097
01:07:31,358 --> 01:07:39,480
other texture and off we go so for

1098
01:07:35,050 --> 01:07:43,089
example we can just say you know int

1099
01:07:39,480 --> 01:07:45,429
light index and then from there we can

1100
01:07:43,088 --> 01:07:50,289
text will fetch all the rest of our

1101
01:07:45,429 --> 01:07:50,949
information right and what we can do is

1102
01:07:50,289 --> 01:07:54,519
since we

1103
01:07:50,949 --> 01:08:00,489
that light I was not a valid value we

1104
01:07:54,519 --> 01:08:07,570
can say that while light I is zero

1105
01:08:00,489 --> 01:08:11,078
effectively we can now gather all of our

1106
01:08:07,570 --> 01:08:15,460
P next values and all our other values

1107
01:08:11,079 --> 01:08:18,130
for that matter so now we're just going

1108
01:08:15,460 --> 01:08:20,380
to do a textile fetch on each of the

1109
01:08:18,130 --> 01:08:51,039
other two textbook textures that we have

1110
01:08:20,380 --> 01:08:52,480
like P next and lighting C and all I'm

1111
01:08:51,039 --> 01:09:01,479
doing here is just trying to extract

1112
01:08:52,479 --> 01:09:05,139
that data so you can see what I'm doing

1113
01:09:01,479 --> 01:09:08,289
here is I'm fetching out of our texture

1114
01:09:05,140 --> 01:09:10,719
out of our lighting lookup I'm trying to

1115
01:09:08,289 --> 01:09:12,369
fetch what the first light index is that

1116
01:09:10,719 --> 01:09:17,079
we're going to want to use I'm going to

1117
01:09:12,369 --> 01:09:19,358
loop over that index and say as long as

1118
01:09:17,079 --> 01:09:24,640
it's still not 0 I'm going to keep going

1119
01:09:19,359 --> 01:09:27,250
I'm going to fetch at that point the I

1120
01:09:24,640 --> 01:09:29,430
guess I should do it like this the two

1121
01:09:27,250 --> 01:09:33,699
values from the textures that we've got

1122
01:09:29,430 --> 01:09:35,619
so that's the P next texture and the

1123
01:09:33,699 --> 01:09:37,000
lighting C texture I haven't passing

1124
01:09:35,619 --> 01:09:38,829
them yet although we kind of do know

1125
01:09:37,000 --> 01:09:44,949
exactly what we're passing for just

1126
01:09:38,829 --> 01:09:47,920
passing light I and LOD level 0 in both

1127
01:09:44,949 --> 01:09:51,399
cases so we're going to Texel fetch

1128
01:09:47,920 --> 01:09:52,810
those and we're going to end up with two

1129
01:09:51,399 --> 01:09:54,399
different values one is the light color

1130
01:09:52,810 --> 01:10:00,390
that one we could just use as is it

1131
01:09:54,399 --> 01:10:03,879
should just be the correct RGB value so

1132
01:10:00,390 --> 01:10:04,489
and lighten P next is going to have to

1133
01:10:03,880 --> 01:10:06,500
be extra

1134
01:10:04,488 --> 01:10:08,569
so first we're going to take the RGB to

1135
01:10:06,500 --> 01:10:11,420
get that light position and then we're

1136
01:10:08,569 --> 01:10:15,979
going to take the light eye which is

1137
01:10:11,420 --> 01:10:17,569
just going to be the the next one to

1138
01:10:15,979 --> 01:10:20,569
loop on and if it's zero we'll break out

1139
01:10:17,569 --> 01:10:22,309
of the loop so that's how we would fetch

1140
01:10:20,569 --> 01:10:23,238
our lighting that's really all there is

1141
01:10:22,310 --> 01:10:24,560
to it

1142
01:10:23,238 --> 01:10:26,389
you can see that it could be kind of

1143
01:10:24,560 --> 01:10:29,719
expensive if this while loop has to do

1144
01:10:26,390 --> 01:10:32,840
many times at the moment we don't really

1145
01:10:29,719 --> 01:10:35,119
have any particular need to worry about

1146
01:10:32,840 --> 01:10:37,930
that because we don't have a whole lot

1147
01:10:35,119 --> 01:10:40,069
of lighting samples done necessarily but

1148
01:10:37,930 --> 01:10:43,850
not to keep an eye on that as we go

1149
01:10:40,069 --> 01:10:48,399
forward so again taking a look at these

1150
01:10:43,850 --> 01:10:48,400
what we want to do here is say okay

1151
01:10:49,390 --> 01:10:56,180
choosing what we want to do here is say

1152
01:10:54,890 --> 01:10:59,180
alright we've got this lighting

1153
01:10:56,180 --> 01:11:08,900
information that we've we've processed

1154
01:10:59,180 --> 01:11:10,550
what we want to do is take the take the

1155
01:11:08,899 --> 01:11:11,988
light colors I suppose that come in we

1156
01:11:10,550 --> 01:11:14,329
just want something that will allow us

1157
01:11:11,988 --> 01:11:16,639
to process a little bit we can just take

1158
01:11:14,329 --> 01:11:18,439
the light colors that come in and just

1159
01:11:16,640 --> 01:11:22,280
modulate them at the moment or something

1160
01:11:18,439 --> 01:11:26,179
like this right sum them together who

1161
01:11:22,279 --> 01:11:27,559
knows it doesn't really matter i we just

1162
01:11:26,180 --> 01:11:31,070
need something to show if this is

1163
01:11:27,560 --> 01:11:34,850
working at all and so you know I'll just

1164
01:11:31,069 --> 01:11:38,769
go ahead and and maybe average them

1165
01:11:34,850 --> 01:11:38,770
together or something like this

1166
01:11:48,800 --> 01:11:59,279
so here we'll just do average light what

1167
01:11:52,439 --> 01:12:18,539
sequels like P and I guess we don't know

1168
01:11:59,279 --> 01:12:18,779
what the light count is so yeah there we

1169
01:12:18,539 --> 01:12:22,738
go

1170
01:12:18,779 --> 01:12:25,619
and once we have that average light we

1171
01:12:22,738 --> 01:12:30,329
can do surface reflect times average

1172
01:12:25,619 --> 01:12:34,829
light and off we go so there's a big old

1173
01:12:30,329 --> 01:12:37,800
nasty shader and dude theory if we got

1174
01:12:34,829 --> 01:12:42,630
that compiling which might take a bit

1175
01:12:37,800 --> 01:12:51,110
because your uniform parse error see

1176
01:12:42,630 --> 01:12:51,109
what's going on there sent it :

1177
01:13:02,439 --> 01:13:18,699
let's see can we let's get some more

1178
01:13:13,520 --> 01:13:27,920
data here all right vertex errors

1179
01:13:18,699 --> 01:13:31,399
fragment errors program airs vertex

1180
01:13:27,920 --> 01:13:35,270
shader with fine fragment shader was not

1181
01:13:31,399 --> 01:13:38,869
a lighting lookup did I not call them

1182
01:13:35,270 --> 01:13:43,130
that oh yeah these are totally different

1183
01:13:38,869 --> 01:13:44,630
names than what I said it's not good P

1184
01:13:43,130 --> 01:13:48,699
next fanfare seed sampler look up

1185
01:13:44,630 --> 01:13:48,699
sampler let's try to get those correct

1186
01:13:59,869 --> 01:14:06,608
that was not good either

1187
01:14:03,090 --> 01:14:06,609
[Music]

1188
01:14:28,578 --> 01:14:34,009
boolean expression expected that's a

1189
01:14:32,899 --> 01:14:37,820
fair statement

1190
01:14:34,010 --> 01:14:41,809
so not equal to zero should help you out

1191
01:14:37,819 --> 01:14:44,438
there in understanding what I meant

1192
01:14:41,809 --> 01:14:47,179
see what else you get

1193
01:14:44,439 --> 01:14:49,309
cannot convert from four component

1194
01:14:47,179 --> 01:14:52,639
vector afloat to three component vector

1195
01:14:49,309 --> 01:14:55,149
afloat I would never dream of asking you

1196
01:14:52,639 --> 01:14:57,769
to do such a thing

1197
01:14:55,149 --> 01:15:00,249
where is that happening

1198
01:14:57,769 --> 01:15:00,248
ah

1199
01:15:22,340 --> 01:15:29,520
well who knows why I don't understand

1200
01:15:26,310 --> 01:15:39,200
why sometimes the AMD driver gives you

1201
01:15:29,520 --> 01:15:42,950
the error message in here did that not

1202
01:15:39,199 --> 01:15:42,949
see what's going on there

1203
01:15:50,630 --> 01:15:56,810
so geo draw arrays has generated an

1204
01:15:54,470 --> 01:15:59,360
error probably because use program begin

1205
01:15:56,810 --> 01:16:07,550
didn't work properly or well I don't

1206
01:15:59,359 --> 01:16:09,710
really know why so anyway we currently

1207
01:16:07,550 --> 01:16:10,880
are a guest compiling this properly

1208
01:16:09,710 --> 01:16:13,579
we're not getting an error on

1209
01:16:10,880 --> 01:16:14,810
compilation anymore but of course we're

1210
01:16:13,579 --> 01:16:17,840
not actually setting any of this

1211
01:16:14,810 --> 01:16:22,400
information so we're not setting any of

1212
01:16:17,840 --> 01:16:24,199
these samplers or this the min corner or

1213
01:16:22,399 --> 01:16:27,529
the inverse seldom we're not setting any

1214
01:16:24,199 --> 01:16:32,539
of that information so we probably need

1215
01:16:27,529 --> 01:16:34,159
to however that I don't feel like that

1216
01:16:32,539 --> 01:16:36,019
would have caused the error injeel

1217
01:16:34,159 --> 01:16:39,139
drawer a so a little worried about that

1218
01:16:36,020 --> 01:16:50,390
because I can't say I know exactly why

1219
01:16:39,140 --> 01:16:54,650
that's causing that to happen yeah not

1220
01:16:50,390 --> 01:16:57,289
great but again these calls here are

1221
01:16:54,649 --> 01:16:58,489
just going to have to be bound one way

1222
01:16:57,289 --> 01:17:01,340
or the other so we might as well do the

1223
01:16:58,489 --> 01:17:05,179
work to do that first and then we'll try

1224
01:17:01,340 --> 01:17:08,860
to figure out why OpenGL is unhappy as

1225
01:17:05,180 --> 01:17:13,750
it often is and we'll go from there so

1226
01:17:08,859 --> 01:17:13,750
first of all we've got to get these

1227
01:17:18,670 --> 01:17:27,880
these two min corner and M seldom those

1228
01:17:23,659 --> 01:17:27,880
have got to get added in here

1229
01:17:48,640 --> 01:17:55,789
all right and then when we do open jail

1230
01:17:53,090 --> 01:17:57,920
a create program here and want to link

1231
01:17:55,789 --> 01:18:01,130
to samplers in addition to texture

1232
01:17:57,920 --> 01:18:04,220
sampler and depth sampler we also want

1233
01:18:01,130 --> 01:18:06,440
these other samplers in here right so

1234
01:18:04,220 --> 01:18:10,340
we're going to want and I'll just move

1235
01:18:06,439 --> 01:18:14,409
this down we're going to want P next

1236
01:18:10,340 --> 01:18:14,409
sampler see sampler and look up sampler

1237
01:18:34,198 --> 01:18:39,178
and so the other thing we were going to

1238
01:18:37,139 --> 01:18:42,269
need to do is have a place to actually

1239
01:18:39,179 --> 01:18:43,319
get that Vox Minh corner and Vox and

1240
01:18:42,269 --> 01:18:45,899
sell them so those are going to have to

1241
01:18:43,319 --> 01:18:47,458
get sent down along with the other

1242
01:18:45,899 --> 01:18:49,289
lighting information that's not really a

1243
01:18:47,458 --> 01:18:52,229
big deal but we're going to have to do

1244
01:18:49,288 --> 01:18:56,569
it and so in here we just need a place

1245
01:18:52,229 --> 01:18:59,458
where that can actually be specified so

1246
01:18:56,569 --> 01:19:09,569
inside the device program I'll just add

1247
01:18:59,458 --> 01:19:12,358
those in here and now we should be able

1248
01:19:09,569 --> 01:19:18,179
to specify those so when we do use

1249
01:19:12,359 --> 01:19:21,079
program here is our use program begin we

1250
01:19:18,179 --> 01:19:38,939
want the Z bias program which is this

1251
01:19:21,078 --> 01:19:47,458
and we can stop screen corner and sell

1252
01:19:38,939 --> 01:19:50,510
them and those now are things that are

1253
01:19:47,458 --> 01:19:50,510
going to have to come in

1254
01:19:58,399 --> 01:20:01,969
along with the lighting

1255
01:20:17,239 --> 01:20:23,729
so I'm just going to assume that we get

1256
01:20:19,409 --> 01:20:27,059
these because they're easy enough to

1257
01:20:23,729 --> 01:20:28,319
pass through and then in the platform

1258
01:20:27,060 --> 01:20:31,230
layer when we're going to go ahead and

1259
01:20:28,319 --> 01:20:33,199
pass them through I'm going to go ahead

1260
01:20:31,229 --> 01:20:47,639
and say like all right lighting textures

1261
01:20:33,199 --> 01:20:49,679
blocks and corner and I think that's

1262
01:20:47,640 --> 01:20:53,550
really all we need I can now just

1263
01:20:49,680 --> 01:20:58,789
specify when we do the render group when

1264
01:20:53,550 --> 01:21:04,230
we specify these the the push lighting I

1265
01:20:58,789 --> 01:21:15,269
can just pass them along so we know in

1266
01:21:04,229 --> 01:21:19,529
seldom and we know min corner and so the

1267
01:21:15,270 --> 01:21:24,600
render group here when we have that push

1268
01:21:19,529 --> 01:21:29,630
call we would just have them in here so

1269
01:21:24,600 --> 01:21:29,630
box mid corner seldom

1270
01:21:55,819 --> 01:22:01,849
have the wrong structure there there we

1271
01:21:59,760 --> 01:22:01,850
go

1272
01:22:05,119 --> 01:22:15,649
so I think I think that's about it

1273
01:22:12,260 --> 01:22:15,649
[Music]

1274
01:22:22,810 --> 01:22:38,210
now in theory once we run this probably

1275
01:22:29,800 --> 01:22:39,619
yeah so probably nothing good will

1276
01:22:38,210 --> 01:22:41,869
happen when we run this is probably

1277
01:22:39,619 --> 01:22:43,699
going to be a disaster we should at

1278
01:22:41,869 --> 01:22:47,329
least bind some textures to those

1279
01:22:43,699 --> 01:22:49,760
texture handles I would have thought we

1280
01:22:47,329 --> 01:22:55,609
would have just gotten black oh and we

1281
01:22:49,760 --> 01:22:57,170
did all right so if we actually bind

1282
01:22:55,609 --> 01:22:59,299
those textures now I'm not anticipating

1283
01:22:57,170 --> 01:23:00,980
good results probably will still just

1284
01:22:59,300 --> 01:23:02,230
end up with black and then we're going

1285
01:23:00,979 --> 01:23:05,479
to have to go through a really long

1286
01:23:02,229 --> 01:23:07,849
arduous process of debugging to find out

1287
01:23:05,479 --> 01:23:09,169
what has gone wrong because there's just

1288
01:23:07,850 --> 01:23:12,650
too many moving parts and of course you

1289
01:23:09,170 --> 01:23:14,480
have no visibility isms and of course we

1290
01:23:12,649 --> 01:23:16,009
have no visibility at all into what the

1291
01:23:14,479 --> 01:23:18,109
grabs car is doing like literally none

1292
01:23:16,010 --> 01:23:27,020
we can't even run a debugger on it on

1293
01:23:18,109 --> 01:23:28,670
this platform so where we have our use

1294
01:23:27,020 --> 01:23:33,230
program begin here you can kind of see

1295
01:23:28,670 --> 01:23:37,399
us binding the textures here where we

1296
01:23:33,229 --> 01:23:41,059
bind texture 0 and texture 1 those

1297
01:23:37,399 --> 01:23:45,229
textures are in order of what we called

1298
01:23:41,060 --> 01:23:54,650
them in the in the link textures call

1299
01:23:45,229 --> 01:23:55,819
oops sorry link samplers so you can kind

1300
01:23:54,649 --> 01:23:58,909
of see here we've got the texture sample

1301
01:23:55,819 --> 01:24:01,340
of the death sampler set up so what we

1302
01:23:58,909 --> 01:24:03,800
need to do here is the the PX sampler

1303
01:24:01,340 --> 01:24:07,550
the two sample look up sampler have to

1304
01:24:03,800 --> 01:24:10,670
be sort of specified in there now the

1305
01:24:07,550 --> 01:24:16,670
kind of crazy thing here is that I don't

1306
01:24:10,670 --> 01:24:20,720
know if the depth sampler slot I assume

1307
01:24:16,670 --> 01:24:24,140
that that will correctly just fold for

1308
01:24:20,720 --> 01:24:27,500
not using it because we don't use it in

1309
01:24:24,140 --> 01:24:29,360
the peel version but anyway when we do

1310
01:24:27,500 --> 01:24:32,829
use program begin to right here so what

1311
01:24:29,359 --> 01:24:32,829
I need to do is I need to set

1312
01:24:34,479 --> 01:24:41,328
these other textures so texture zero and

1313
01:24:38,000 --> 01:24:43,658
one are spoken for texture two three and

1314
01:24:41,328 --> 01:24:45,979
four are the ones that we're using now

1315
01:24:43,658 --> 01:24:49,569
and we're just talking about basically

1316
01:24:45,979 --> 01:24:58,609
binding new stuff to get to these right

1317
01:24:49,569 --> 01:25:12,518
so we've got opengl lighting look up in

1318
01:24:58,609 --> 01:25:15,348
jail play see opengl blowing @e next and

1319
01:25:12,519 --> 01:25:20,869
now in theory we bound our textures

1320
01:25:15,349 --> 01:25:21,860
right in theory now the only thing we

1321
01:25:20,868 --> 01:25:24,859
know is that we're not getting any

1322
01:25:21,859 --> 01:25:27,018
obvious errors from the GL that's it

1323
01:25:24,859 --> 01:25:29,658
that's the only thing we know right so

1324
01:25:27,019 --> 01:25:30,230
we have no idea what else is going on

1325
01:25:29,658 --> 01:25:34,729
here

1326
01:25:30,229 --> 01:25:38,629
none whatsoever uh so let's try to

1327
01:25:34,729 --> 01:25:41,359
figure out what else is going on here

1328
01:25:38,630 --> 01:25:44,059
and see if we can't maybe get some

1329
01:25:41,359 --> 01:25:50,268
progress I'm guessing we won't have time

1330
01:25:44,059 --> 01:25:53,719
to actually what we won't have time to

1331
01:25:50,269 --> 01:25:55,460
actually get everything working today

1332
01:25:53,719 --> 01:25:58,460
that'll probably have to be a job for

1333
01:25:55,460 --> 01:26:02,300
tomorrow but we can at least try to get

1334
01:25:58,460 --> 01:26:05,960
started on that so inside the OpenGL

1335
01:26:02,300 --> 01:26:07,219
shader let's start by trying to see if

1336
01:26:05,960 --> 01:26:10,840
there's anything we could draw that

1337
01:26:07,219 --> 01:26:10,840
would be simpler right

1338
01:26:16,000 --> 01:26:20,340
so the first thing I'm going to do is

1339
01:26:17,560 --> 01:26:23,050
say well maybe we can just do something

1340
01:26:20,340 --> 01:26:25,539
where we pick the brightest light color

1341
01:26:23,050 --> 01:26:27,610
and pick that just in case there's some

1342
01:26:25,539 --> 01:26:32,529
other problem with our lighting well I

1343
01:26:27,609 --> 01:26:40,239
don't know like what if we just picked

1344
01:26:32,529 --> 01:26:45,369
the first light sample something like

1345
01:26:40,239 --> 01:26:46,840
this so we just said okay we're going to

1346
01:26:45,369 --> 01:26:50,829
textile such

1347
01:26:46,840 --> 01:26:57,699
there's our our lookup we get an index

1348
01:26:50,829 --> 01:27:05,140
out of it we're going to just kind of

1349
01:26:57,699 --> 01:27:08,679
get rid of this notion here and we'll

1350
01:27:05,140 --> 01:27:10,810
just say that surface reflect is going

1351
01:27:08,680 --> 01:27:14,579
to equal I'm just going to overwrite the

1352
01:27:10,810 --> 01:27:18,730
surface reflect color with the light P

1353
01:27:14,579 --> 01:27:23,850
and what I'm sorry with the light C here

1354
01:27:18,729 --> 01:27:26,739
and I'm going to set light C to zero and

1355
01:27:23,850 --> 01:27:30,039
in here I'm going to set light C to be

1356
01:27:26,739 --> 01:27:31,689
equal to whatever the the light see that

1357
01:27:30,039 --> 01:27:33,989
it gets is we already have one of those

1358
01:27:31,689 --> 01:27:33,989
sorry

1359
01:27:47,399 --> 01:27:52,408
so that's all I'm going to do for

1360
01:27:50,998 --> 01:27:54,420
starters just again to simplify that a

1361
01:27:52,408 --> 01:27:58,248
little bit I'm going to keep some client

1362
01:27:54,420 --> 01:27:58,248
down oops

1363
01:28:09,029 --> 01:28:14,409
all right and now what I'm going to do

1364
01:28:12,100 --> 01:28:16,050
is I'm just going to try to make sure

1365
01:28:14,409 --> 01:28:19,479
that we're actually still drawing

1366
01:28:16,050 --> 01:28:22,180
reasonably I'm just going to set here as

1367
01:28:19,479 --> 01:28:24,309
an extended to the test make sure that

1368
01:28:22,180 --> 01:28:29,530
we're actually drawing I'm going to set

1369
01:28:24,310 --> 01:28:34,480
use light C equal to just pure red okay

1370
01:28:29,529 --> 01:28:35,920
so we're not actually seeing that which

1371
01:28:34,479 --> 01:28:43,419
means that we're never getting in here

1372
01:28:35,920 --> 01:28:51,760
right if I did go ahead let's set it to

1373
01:28:43,420 --> 01:29:02,409
green inside the loop and red outside

1374
01:28:51,760 --> 01:29:05,440
the loop okay so all we have to do now

1375
01:29:02,409 --> 01:29:07,090
is see why we're never getting an index

1376
01:29:05,439 --> 01:29:09,759
value that's not zero now there's

1377
01:29:07,090 --> 01:29:18,119
multiple reasons why we might always get

1378
01:29:09,760 --> 01:29:21,070
an index value of zero right for example

1379
01:29:18,119 --> 01:29:23,859
we might be getting an index value of 0

1380
01:29:21,069 --> 01:29:25,630
because our texture doesn't have any

1381
01:29:23,859 --> 01:29:28,420
valid data in it right we might be

1382
01:29:25,630 --> 01:29:30,130
submitting the data incorrectly so that

1383
01:29:28,420 --> 01:29:33,149
all of the data inside our lookup

1384
01:29:30,130 --> 01:29:37,180
sampler is actually all zeros right

1385
01:29:33,149 --> 01:29:38,559
that's one way another way is if there's

1386
01:29:37,180 --> 01:29:40,989
something wrong with this expression

1387
01:29:38,560 --> 01:29:45,039
such that trying to convert it to an

1388
01:29:40,988 --> 01:29:46,329
integer is not going to work right we're

1389
01:29:45,039 --> 01:29:48,430
supposed to be getting a floating-point

1390
01:29:46,329 --> 01:29:49,750
value out of here so in theory we should

1391
01:29:48,430 --> 01:29:52,030
be able to agree to an integer and have

1392
01:29:49,750 --> 01:29:53,590
it just be the index but maybe there's

1393
01:29:52,029 --> 01:29:56,710
something wrong with that that's thing

1394
01:29:53,590 --> 01:30:00,730
number two thing number three is we've

1395
01:29:56,710 --> 01:30:04,060
got the voxel position wrong so the look

1396
01:30:00,729 --> 01:30:07,299
up into the voxel position is going to

1397
01:30:04,060 --> 01:30:08,950
have to work properly here in order to

1398
01:30:07,300 --> 01:30:10,980
get some value that will actually have

1399
01:30:08,949 --> 01:30:13,750
something that's not black to begin with

1400
01:30:10,979 --> 01:30:17,099
because if we're always looking into a

1401
01:30:13,750 --> 01:30:20,289
point in the voxel that had no indices

1402
01:30:17,100 --> 01:30:22,480
no life inserted at that part in the

1403
01:30:20,289 --> 01:30:25,779
voxel

1404
01:30:22,479 --> 01:30:28,750
we if we never have any industries to

1405
01:30:25,779 --> 01:30:31,689
work with then we would be correctly

1406
01:30:28,750 --> 01:30:34,000
getting an index of zero out of here in

1407
01:30:31,689 --> 01:30:35,919
that case right meaning if the bin that

1408
01:30:34,000 --> 01:30:39,010
we end up looking in had no light

1409
01:30:35,920 --> 01:30:41,560
samples in it then we would also get a

1410
01:30:39,010 --> 01:30:44,350
zero out correctly here so it would be

1411
01:30:41,560 --> 01:30:49,390
the lookup position that was wrong not

1412
01:30:44,350 --> 01:30:51,460
the lookup process so I think that's

1413
01:30:49,390 --> 01:30:53,230
really mostly what I'm going to try and

1414
01:30:51,460 --> 01:31:03,640
focus on is figuring out which of those

1415
01:30:53,229 --> 01:31:06,699
is happening which is to say I want to

1416
01:31:03,640 --> 01:31:11,860
figure out whether our 3d texture lookup

1417
01:31:06,699 --> 01:31:13,630
works at all and then whether or not

1418
01:31:11,859 --> 01:31:17,109
it's going to convert properly if it

1419
01:31:13,630 --> 01:31:19,180
does so one way we could do this is we

1420
01:31:17,109 --> 01:31:28,089
could try just drawing this directly

1421
01:31:19,180 --> 01:31:30,730
I can't second think of a really much of

1422
01:31:28,090 --> 01:31:32,170
a way to do that this would be one place

1423
01:31:30,729 --> 01:31:35,169
where like I said it would be very nice

1424
01:31:32,170 --> 01:31:36,550
to be able to sort of debug the graphics

1425
01:31:35,170 --> 01:31:40,480
card because what we really want to do

1426
01:31:36,550 --> 01:31:42,909
is see a version of that look up sampler

1427
01:31:40,479 --> 01:31:46,779
texture using a third-party tool so we

1428
01:31:42,909 --> 01:31:49,649
could sort of corroborate whether or not

1429
01:31:46,779 --> 01:31:51,969
have been submitted properly and

1430
01:31:49,649 --> 01:31:53,289
unfortunately we can't do that so that

1431
01:31:51,970 --> 01:31:56,710
would have been the easiest way to do it

1432
01:31:53,289 --> 01:32:01,840
so barring that what we need to do now

1433
01:31:56,710 --> 01:32:04,989
is figure out some way to sort of grab

1434
01:32:01,840 --> 01:32:08,230
some information out of that maybe at a

1435
01:32:04,989 --> 01:32:10,420
known good location so maybe what we can

1436
01:32:08,229 --> 01:32:13,389
do is try to take this part out of the

1437
01:32:10,420 --> 01:32:16,149
process now the way that I can do that

1438
01:32:13,390 --> 01:32:18,880
is I can try to find a voxel cell that

1439
01:32:16,149 --> 01:32:21,579
we know has something in it and that's

1440
01:32:18,880 --> 01:32:23,500
not that hard to do because actually

1441
01:32:21,579 --> 01:32:25,329
since we control the lighting code on

1442
01:32:23,500 --> 01:32:28,180
the CPU side of things even though we

1443
01:32:25,329 --> 01:32:31,300
can't do bug the GPU side we can debug

1444
01:32:28,180 --> 01:32:34,150
the CPU side what that means is I should

1445
01:32:31,300 --> 01:32:37,980
be able to if I switch us back to debug

1446
01:32:34,149 --> 01:32:37,979
mode in the bill

1447
01:32:41,229 --> 01:32:51,039
like so if I go to the render lighting

1448
01:32:43,960 --> 01:32:53,020
code here oops go if I go to the render

1449
01:32:51,039 --> 01:32:55,390
group lighting code when it's actually

1450
01:32:53,020 --> 01:32:58,270
outputting these textures you can see

1451
01:32:55,390 --> 01:33:01,660
here it's doing the voxel truncation

1452
01:32:58,270 --> 01:33:04,420
thing and looking up and then packing

1453
01:33:01,659 --> 01:33:06,880
all the values in there what I could do

1454
01:33:04,420 --> 01:33:10,420
here is just take a look at what some of

1455
01:33:06,880 --> 01:33:12,940
these are and when I know where some of

1456
01:33:10,420 --> 01:33:17,409
them are going I can just force-feed

1457
01:33:12,939 --> 01:33:19,089
that cell address to the renderer so

1458
01:33:17,409 --> 01:33:22,239
that we know we're looking up in a place

1459
01:33:19,090 --> 01:33:25,800
that definitely has something in it so

1460
01:33:22,239 --> 01:33:25,800
that we can take that part out

1461
01:33:35,399 --> 01:33:45,329
oh you know what I forgot to ever run

1462
01:33:38,760 --> 01:33:46,920
this though ah um okay my bad I just

1463
01:33:45,329 --> 01:33:50,989
kind of forgot something

1464
01:33:46,920 --> 01:33:53,399
fairly obvious there yeah okay all right

1465
01:33:50,989 --> 01:33:55,949
that was my mistake and I admit that

1466
01:33:53,399 --> 01:33:59,219
that's um operator error

1467
01:33:55,949 --> 01:34:02,069
I had not been running the lighting so

1468
01:33:59,220 --> 01:34:04,949
there correctly wasn't anything in the

1469
01:34:02,069 --> 01:34:08,219
voxel at that point let's try that again

1470
01:34:04,949 --> 01:34:11,239
okay so now there actually is something

1471
01:34:08,220 --> 01:34:16,020
in the voxel so at least now I can

1472
01:34:11,239 --> 01:34:17,909
correctly say that we're not getting the

1473
01:34:16,020 --> 01:34:20,820
lookup to work properly so all right

1474
01:34:17,909 --> 01:34:26,849
that was my bad sorry about that a

1475
01:34:20,819 --> 01:34:29,219
little bit of a false alarm there all

1476
01:34:26,850 --> 01:34:32,400
right uh so the problem that we're going

1477
01:34:29,220 --> 01:34:34,470
to have here and I don't really know

1478
01:34:32,399 --> 01:34:36,359
much attention I think about how to do

1479
01:34:34,470 --> 01:34:39,409
this I should probably make some way of

1480
01:34:36,359 --> 01:34:44,939
outputting this piece of information a

1481
01:34:39,409 --> 01:34:46,260
little more cleanly because basically

1482
01:34:44,939 --> 01:34:49,229
what's the problem is here's the

1483
01:34:46,260 --> 01:34:55,650
optimizer has destroyed our way of being

1484
01:34:49,229 --> 01:34:57,979
able to actually see what these values

1485
01:34:55,649 --> 01:34:57,979
are

1486
01:35:01,390 --> 01:35:05,470
let's see your ECX

1487
01:35:15,010 --> 01:35:19,619
so EDX ESI

1488
01:35:26,908 --> 01:35:29,899
okay

1489
01:35:36,538 --> 01:35:47,750
so X mmm 0 XM m 1 and XM m to have our x

1490
01:35:44,630 --> 01:35:57,809
y&amp;z in them

1491
01:35:47,750 --> 01:36:03,630
let's get those sectors at please I so

1492
01:35:57,809 --> 01:36:07,699
we're looking at at this this and this

1493
01:36:03,630 --> 01:36:07,699
looks like can that be right

1494
01:36:21,408 --> 01:36:23,438
Oh

1495
01:36:42,399 --> 01:36:56,829
yeah I can't say I quite expected that

1496
01:36:49,770 --> 01:36:59,310
hold on one brief second just one brief

1497
01:36:56,829 --> 01:36:59,309
second

1498
01:37:07,868 --> 01:37:14,908
I need it too I want to view this as an

1499
01:37:10,899 --> 01:37:14,909
f32 I don't know if I can do that

1500
01:37:26,180 --> 01:37:34,159
I guess there is one thing I could do to

1501
01:37:30,140 --> 01:37:37,090
make this a little bit more expedient so

1502
01:37:34,159 --> 01:37:44,599
in here what I could do is force it to

1503
01:37:37,090 --> 01:37:46,810
place these somewhere that I can view

1504
01:37:44,600 --> 01:37:46,810
them

1505
01:38:04,529 --> 01:38:09,579
so here I've created some global

1506
01:38:06,640 --> 01:38:12,039
variables what I should be able to do

1507
01:38:09,579 --> 01:38:19,960
now is just assign to those level

1508
01:38:12,039 --> 01:38:21,579
variables I've made them volatile and

1509
01:38:19,960 --> 01:38:23,710
the reason I did that is to try and

1510
01:38:21,579 --> 01:38:25,750
convince the compiler that it can't get

1511
01:38:23,710 --> 01:38:27,850
rid of the write because if it thinks

1512
01:38:25,750 --> 01:38:30,430
that there might be another CPU that's

1513
01:38:27,850 --> 01:38:32,680
reading them at that time it can't no

1514
01:38:30,430 --> 01:38:34,329
the optimizer can't go oh well I'm just

1515
01:38:32,680 --> 01:38:37,780
writing over this value I won't bother

1516
01:38:34,329 --> 01:38:43,569
doing it till the end so I'm basically

1517
01:38:37,779 --> 01:38:46,199
just trying to keep that from from

1518
01:38:43,569 --> 01:38:46,199
happening there

1519
01:39:00,800 --> 01:39:04,159
debug color

1520
01:39:13,479 --> 01:39:22,979
so I guess we don't have a volatile

1521
01:39:15,520 --> 01:39:26,820
version here for this what I could do is

1522
01:39:22,979 --> 01:39:33,039
something like this though

1523
01:39:26,819 --> 01:39:42,969
which is if front emits let's say the

1524
01:39:33,039 --> 01:39:45,180
red channel it's greater than five all

1525
01:39:42,970 --> 01:39:45,180
right

1526
01:39:48,710 --> 01:39:53,869
so running the lighting here and waiting

1527
01:39:51,079 --> 01:39:58,069
for there to be a fairly bright light

1528
01:39:53,869 --> 01:40:00,050
sample to look at here what I'm going to

1529
01:39:58,069 --> 01:40:11,000
do is just take a look at what the debug

1530
01:40:00,050 --> 01:40:12,890
XY and Z values are 126 113 27 and so

1531
01:40:11,000 --> 01:40:15,380
what I can do now is just say well if

1532
01:40:12,890 --> 01:40:17,900
that's what the lighting value is going

1533
01:40:15,380 --> 01:40:21,619
to be then what I could do is in the

1534
01:40:17,899 --> 01:40:24,769
OpenGL code when we're you know doing

1535
01:40:21,619 --> 01:40:27,769
whatever we're doing here I can just go

1536
01:40:24,770 --> 01:40:46,430
ahead and enforce that lookup value

1537
01:40:27,770 --> 01:40:49,780
right so let's see see what happens if

1538
01:40:46,430 --> 01:40:49,780
we force it to that

1539
01:41:01,929 --> 01:41:09,529
so it looks like we're just not getting

1540
01:41:05,929 --> 01:41:14,449
any valid values out of that texture at

1541
01:41:09,529 --> 01:41:16,878
all right because in this particular

1542
01:41:14,448 --> 01:41:19,248
case now we have forced it to look up

1543
01:41:16,878 --> 01:41:21,708
into location where there definitely

1544
01:41:19,248 --> 01:41:24,318
should have been something but we're not

1545
01:41:21,708 --> 01:41:27,769
seeing anything so it's unlikely that

1546
01:41:24,319 --> 01:41:29,179
this part then is the problem although I

1547
01:41:27,769 --> 01:41:31,039
guess I don't really have a way of

1548
01:41:29,179 --> 01:41:33,649
independently verifying that we've got

1549
01:41:31,038 --> 01:41:40,099
those numbers right but that does seem

1550
01:41:33,649 --> 01:41:42,579
like a pretty useful simplification

1551
01:41:40,099 --> 01:41:44,958
there to just know all right we're not

1552
01:41:42,578 --> 01:41:49,849
we're not getting something out of there

1553
01:41:44,958 --> 01:41:53,148
okay we're not getting anything out of

1554
01:41:49,849 --> 01:41:56,179
there that we expect or at least it

1555
01:41:53,149 --> 01:41:57,979
doesn't look like it so let's go ahead

1556
01:41:56,179 --> 01:41:59,418
you know what else I wanted to just

1557
01:41:57,979 --> 01:42:01,909
check real quickly this is not related

1558
01:41:59,418 --> 01:42:05,288
but the world p-values how are those

1559
01:42:01,908 --> 01:42:05,288
getting specified here

1560
01:42:21,988 --> 01:42:26,399
all right so that's actually good too

1561
01:42:24,269 --> 01:42:28,739
because that's the raw coordinates which

1562
01:42:26,399 --> 01:42:32,158
is what we want as well all right so I

1563
01:42:28,738 --> 01:42:34,859
think we can now proceed under the

1564
01:42:32,158 --> 01:42:36,719
assumption at least temporarily that our

1565
01:42:34,859 --> 01:42:40,259
texture is not getting set up and

1566
01:42:36,719 --> 01:42:42,059
sampled properly for the lookup so I'm

1567
01:42:40,260 --> 01:42:44,369
going to go ahead and switch over to

1568
01:42:42,059 --> 01:42:58,650
here and take a look at that code path

1569
01:42:44,368 --> 01:43:09,538
one more time so here's that letting

1570
01:42:58,649 --> 01:43:11,578
look up okay so the r16 it's telling it

1571
01:43:09,538 --> 01:43:13,408
going to be submitted as a Jian side

1572
01:43:11,578 --> 01:43:14,488
short which I assume is irrelevant

1573
01:43:13,408 --> 01:43:16,920
anyway because it's not getting

1574
01:43:14,488 --> 01:43:19,439
submitted at this particular point but

1575
01:43:16,920 --> 01:43:20,730
here's the R 16 which is just saying

1576
01:43:19,439 --> 01:43:24,118
that there's going to be a 16-bit

1577
01:43:20,729 --> 01:43:26,549
integer value stored there

1578
01:43:24,118 --> 01:43:31,078
so again presumably we should be able to

1579
01:43:26,550 --> 01:43:33,360
access that here's the question if that

1580
01:43:31,078 --> 01:43:38,988
is stored that will probably be

1581
01:43:33,359 --> 01:43:43,348
converted to a 0 to 1 range is the thing

1582
01:43:38,988 --> 01:43:45,169
because it's not stored as a float we

1583
01:43:43,349 --> 01:43:56,340
could force it to be sort of the float

1584
01:43:45,170 --> 01:43:58,859
right like we could certify this and

1585
01:43:56,340 --> 01:44:00,599
force the float storage format but if

1586
01:43:58,859 --> 01:44:04,319
we're specifying it is that it's going

1587
01:44:00,599 --> 01:44:07,230
to assume that it's normalized which we

1588
01:44:04,319 --> 01:44:09,359
don't actually want it to do right we

1589
01:44:07,229 --> 01:44:12,538
don't want it to normalize so that's

1590
01:44:09,359 --> 01:44:14,759
that's definitely a problem we can work

1591
01:44:12,538 --> 01:44:18,748
around the normalization certainly if we

1592
01:44:14,760 --> 01:44:24,150
needed to by multiplying by 6 by 5 3 6

1593
01:44:18,748 --> 01:44:29,969
after we load the value out or 6 5 5 3 5

1594
01:44:24,149 --> 01:44:31,799
depending on how they encoded it so we

1595
01:44:29,969 --> 01:44:33,989
could try to get the light index out

1596
01:44:31,800 --> 01:44:35,909
that way but that's not really what I

1597
01:44:33,988 --> 01:44:39,979
want what I wanted to do is I

1598
01:44:35,909 --> 01:44:44,180
wanted to not mess with the value right

1599
01:44:39,979 --> 01:44:44,179
so ideally

1600
01:44:57,359 --> 01:45:02,849
ideally what we probably want here is

1601
01:45:04,350 --> 01:45:12,190
like eight for example 8ui right I

1602
01:45:09,489 --> 01:45:15,359
something that's going to leave it on

1603
01:45:12,189 --> 01:45:15,359
[Music]

1604
01:45:31,929 --> 01:45:37,750
so you slam for 2d I don't know if we

1605
01:45:35,380 --> 01:45:41,050
have access to that do we or don't we

1606
01:45:37,750 --> 01:45:43,750
because that's what we would like yes

1607
01:45:41,050 --> 01:45:46,659
good we do so we can use an unsigned

1608
01:45:43,750 --> 01:45:48,369
integer sampler type here which would be

1609
01:45:46,658 --> 01:45:50,679
great because then we would just get

1610
01:45:48,369 --> 01:45:53,500
back the integer directly and we

1611
01:45:50,679 --> 01:45:54,940
wouldn't have to cast so it looks like

1612
01:45:53,500 --> 01:45:57,670
we do have x2 that I'm going to go ahead

1613
01:45:54,939 --> 01:46:00,158
and use that so what I want to do here

1614
01:45:57,670 --> 01:46:02,170
is I want to go ahead and get and look

1615
01:46:00,158 --> 01:46:06,579
up sampler I want to get that used

1616
01:46:02,170 --> 01:46:08,199
sampler 3d in there and when we sampler

1617
01:46:06,579 --> 01:46:10,149
for that I'll get a you've X back which

1618
01:46:08,198 --> 01:46:13,689
is perfect because that's exactly what I

1619
01:46:10,149 --> 01:46:19,809
want so that way I can just say oh thank

1620
01:46:13,689 --> 01:46:21,309
you for the light information and and

1621
01:46:19,810 --> 01:46:25,659
off we go

1622
01:46:21,310 --> 01:46:27,280
so then I would use our 16 UI which is

1623
01:46:25,658 --> 01:46:28,869
to say it's an unsigned integer I don't

1624
01:46:27,279 --> 01:46:30,009
really care if it's unsigned to

1625
01:46:28,869 --> 01:46:32,948
completely honest with you that's not

1626
01:46:30,010 --> 01:46:35,409
super important I just need it to not be

1627
01:46:32,948 --> 01:46:42,658
floating-point that's the only real

1628
01:46:35,408 --> 01:46:42,658
requirement so if we go ahead and

1629
01:46:43,890 --> 01:46:57,869
where's my core ARB there it is if I

1630
01:46:48,908 --> 01:46:57,869
just grab should just grab all these

1631
01:47:21,090 --> 01:47:23,150
you

1632
01:47:26,198 --> 01:47:31,908
all right so now in theory if we get

1633
01:47:30,139 --> 01:47:33,949
this compiling properly we should be

1634
01:47:31,908 --> 01:47:36,668
able to get an integer value out which

1635
01:47:33,948 --> 01:47:36,668
is what I want

1636
01:47:48,130 --> 01:47:51,420
unsigned int

1637
01:48:06,880 --> 01:48:14,260
I don't know if the shader forces me to

1638
01:48:10,300 --> 01:48:22,960
do unsigned it in that fashion let's

1639
01:48:14,260 --> 01:48:25,500
find out and put the cast from int to

1640
01:48:22,960 --> 01:48:25,500
you end

1641
01:48:49,939 --> 01:48:55,859
try that one more time still doesn't

1642
01:48:54,239 --> 01:49:00,319
like that no my trailer come for Texas

1643
01:48:55,859 --> 01:49:08,549
fetch cannot convert from consulate to I

1644
01:49:00,319 --> 01:49:17,189
repeat vector afloat not sure where it's

1645
01:49:08,550 --> 01:49:20,720
complaining that exactly because I

1646
01:49:17,189 --> 01:49:20,719
didn't touch any of the other parts

1647
01:49:28,539 --> 01:49:34,569
so text will fetch dot are here

1648
01:50:05,859 --> 01:50:10,009
unfortunately I don't really see

1649
01:50:08,270 --> 01:50:11,900
anything else that I would probably need

1650
01:50:10,010 --> 01:50:15,110
to do there in order to get that back

1651
01:50:11,899 --> 01:50:17,269
I'm textile fetching I feel like that

1652
01:50:15,109 --> 01:50:21,469
should come back properly I guess I can

1653
01:50:17,270 --> 01:50:25,670
use this shorthand which is nice so if I

1654
01:50:21,469 --> 01:50:29,809
do you in too late I I would think that

1655
01:50:25,670 --> 01:50:33,109
that would work I don't understand why

1656
01:50:29,809 --> 01:50:35,809
it wouldn't I can then loop through that

1657
01:50:33,109 --> 01:50:38,389
when I do a textile fetch here this is

1658
01:50:35,809 --> 01:50:41,770
passing an unsigned integer maybe that's

1659
01:50:38,389 --> 01:50:47,599
bad maybe it only can accept an integer

1660
01:50:41,770 --> 01:50:51,020
in which case this maybe should be just

1661
01:50:47,599 --> 01:50:55,610
casted here from an unsigned integer to

1662
01:50:51,020 --> 01:50:57,889
an integer and then we can go from there

1663
01:50:55,609 --> 01:51:00,439
I don't know we could try that and see

1664
01:50:57,889 --> 01:51:01,609
if it's a little happier about what's

1665
01:51:00,439 --> 01:51:03,109
going on because again we don't really

1666
01:51:01,609 --> 01:51:04,759
care whether we have integers or

1667
01:51:03,109 --> 01:51:07,808
unsigned integers in this case we're not

1668
01:51:04,760 --> 01:51:07,809
using the full range

1669
01:51:18,038 --> 01:51:31,759
hmm so we're getting an invalid call on

1670
01:51:26,689 --> 01:51:38,589
this one does this card not support our

1671
01:51:31,760 --> 01:51:38,590
16 UI perhaps

1672
01:51:53,010 --> 01:52:02,940
I think that's the only thing that

1673
01:51:54,809 --> 01:52:04,860
changed but I'm not sure so it's just

1674
01:52:02,939 --> 01:52:06,238
specifying red and unsigned short which

1675
01:52:04,859 --> 01:52:08,248
shouldn't be a problem so presumably

1676
01:52:06,238 --> 01:52:13,768
this is the only thing that could be

1677
01:52:08,248 --> 01:52:16,880
potentially bad there right and see what

1678
01:52:13,769 --> 01:52:16,880
happens if I set it to eye

1679
01:52:28,698 --> 01:52:36,268
hmm so it definitely doesn't like that

1680
01:52:33,300 --> 01:52:41,610
it doesn't really want to create in our

1681
01:52:36,269 --> 01:52:44,969
16 UI I suppose that's not really a

1682
01:52:41,609 --> 01:52:47,098
problem for us we don't really care that

1683
01:52:44,969 --> 01:52:54,779
it's one of those we could just encode

1684
01:52:47,099 --> 01:52:56,909
it and use the 0 to 1 range AIDS it's

1685
01:52:54,779 --> 01:53:02,509
really not a big deal one way or the

1686
01:52:56,908 --> 01:53:05,038
other so I guess you know let me try

1687
01:53:02,510 --> 01:53:07,248
leaving it the way that it was since

1688
01:53:05,038 --> 01:53:12,029
that was something that it was ok with

1689
01:53:07,248 --> 01:53:15,868
and then I'll I'll forego the fancy

1690
01:53:12,029 --> 01:53:19,078
footwork in here and just say all right

1691
01:53:15,868 --> 01:53:21,899
when you get one of these back you're

1692
01:53:19,078 --> 01:53:24,179
going to get integer but you're going to

1693
01:53:21,899 --> 01:53:25,138
get a number between 0 and 1 you're

1694
01:53:24,179 --> 01:53:26,969
going to have to convert that to

1695
01:53:25,139 --> 01:53:30,418
something you can actually use to look

1696
01:53:26,969 --> 01:53:35,130
up and so we need a way to convert back

1697
01:53:30,418 --> 01:53:38,519
now if it was 1.0 exactly then we want

1698
01:53:35,130 --> 01:53:41,519
to be like 65535 right would be the

1699
01:53:38,519 --> 01:53:45,599
value that we would be and presumably

1700
01:53:41,519 --> 01:53:48,208
we're going to have a bias in here so we

1701
01:53:45,599 --> 01:53:56,189
would probably also want to just roll

1702
01:53:48,208 --> 01:53:58,679
that in I'll have to look up exactly

1703
01:53:56,189 --> 01:54:00,389
what their what their transform is so we

1704
01:53:58,679 --> 01:54:02,630
can undo it exactly and not have like

1705
01:54:00,389 --> 01:54:05,069
off-by-one errors or something like that

1706
01:54:02,630 --> 01:54:11,239
but that's basically what we would need

1707
01:54:05,069 --> 01:54:11,238
to do to convert it back right

1708
01:54:45,319 --> 01:54:47,979
well

1709
01:54:50,220 --> 01:54:58,380
that is not reassuring you know maybe

1710
01:54:55,569 --> 01:54:58,380
that's as good

