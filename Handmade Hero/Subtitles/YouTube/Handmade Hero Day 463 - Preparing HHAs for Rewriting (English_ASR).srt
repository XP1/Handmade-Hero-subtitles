1
00:00:00,030 --> 00:00:03,418
hello everyone welcome to handmade Hiro

2
00:00:01,829 --> 00:00:06,239
sure we code complete-game live on

3
00:00:03,419 --> 00:00:08,820
stream last weekend we put in some stuff

4
00:00:06,240 --> 00:00:11,789
to check to see if any art asset files

5
00:00:08,820 --> 00:00:15,138
have changed and if they had changed to

6
00:00:11,789 --> 00:00:18,570
go through them and load them into our

7
00:00:15,138 --> 00:00:22,198
game using the PNG reader and pull out

8
00:00:18,570 --> 00:00:25,260
the basically parts of the asset based

9
00:00:22,199 --> 00:00:28,710
on the grid system that we had set up we

10
00:00:25,260 --> 00:00:30,929
stopped there and we don't really know

11
00:00:28,710 --> 00:00:32,669
exactly what we're gonna do for tags

12
00:00:30,928 --> 00:00:34,379
because now that we have like

13
00:00:32,668 --> 00:00:38,669
specifically laid out art assets the way

14
00:00:34,380 --> 00:00:40,320
the artist wants them we may want to

15
00:00:38,670 --> 00:00:43,530
sort of update how we're doing our tag

16
00:00:40,320 --> 00:00:45,329
system to better align with that right

17
00:00:43,530 --> 00:00:47,789
too we may want to tweak that in fact

18
00:00:45,329 --> 00:00:48,840
I'm almost certain we do but doing that

19
00:00:47,789 --> 00:00:51,808
it's gonna require us to think it

20
00:00:48,840 --> 00:00:53,280
through a little bit better and so you

21
00:00:51,808 --> 00:00:55,229
know we're kind of on a little bit of a

22
00:00:53,280 --> 00:00:56,609
journey in that sense where we're gonna

23
00:00:55,229 --> 00:00:58,049
have to kind of figure out what we want

24
00:00:56,609 --> 00:01:00,750
to do there because I'm not really sure

25
00:00:58,049 --> 00:01:01,769
and we'll kind of see as we go it's our

26
00:01:00,750 --> 00:01:04,019
first time really looking at these

27
00:01:01,770 --> 00:01:06,150
assets so that's kind of what we're

28
00:01:04,019 --> 00:01:08,250
gonna be starting down today essentially

29
00:01:06,150 --> 00:01:10,950
what we have to do is actually put these

30
00:01:08,250 --> 00:01:13,890
art assets now to use and putting these

31
00:01:10,950 --> 00:01:15,868
art assets to use means being able to

32
00:01:13,890 --> 00:01:18,689
start tagging them and other things like

33
00:01:15,868 --> 00:01:20,129
this and so that's why it's kind of

34
00:01:18,688 --> 00:01:23,938
gonna force the issue like we can't

35
00:01:20,129 --> 00:01:26,188
really even do a simple version of what

36
00:01:23,938 --> 00:01:27,809
we want to do here because in order to

37
00:01:26,188 --> 00:01:30,719
put the art assets into the game at all

38
00:01:27,810 --> 00:01:32,609
just after we load the bitmaps the thing

39
00:01:30,719 --> 00:01:35,368
that will allow them to be used is to

40
00:01:32,609 --> 00:01:36,780
tag them with something so probably what

41
00:01:35,368 --> 00:01:39,299
we're gonna have to do first is just

42
00:01:36,780 --> 00:01:41,400
make something that since synthetically

43
00:01:39,299 --> 00:01:42,810
uses our existing tag system to tag

44
00:01:41,400 --> 00:01:45,180
these assets with something that can be

45
00:01:42,810 --> 00:01:46,740
looked up and then from there hopefully

46
00:01:45,180 --> 00:01:49,649
we will have gained the insight

47
00:01:46,739 --> 00:01:51,989
necessary to make a simplified system

48
00:01:49,649 --> 00:01:54,570
that just accommodates exactly the kind

49
00:01:51,989 --> 00:01:56,218
of assets we have and can probably speed

50
00:01:54,569 --> 00:01:57,718
up the way we're doing tags right now

51
00:01:56,218 --> 00:01:59,390
we're doing tags pretty sloppy right now

52
00:01:57,718 --> 00:02:01,468
because we just have an anything-goes

53
00:01:59,390 --> 00:02:03,810
arbitrary sort of vector matching system

54
00:02:01,468 --> 00:02:06,419
and it looks like the assets we get

55
00:02:03,810 --> 00:02:08,189
don't really need something like that so

56
00:02:06,420 --> 00:02:10,409
we can take this opportunity to actually

57
00:02:08,189 --> 00:02:12,750
take a step back from the tax system we

58
00:02:10,409 --> 00:02:13,710
had and just probably remove some of the

59
00:02:12,750 --> 00:02:14,969
stuff from it what

60
00:02:13,710 --> 00:02:18,240
you'll make it faster it's simpler

61
00:02:14,969 --> 00:02:20,219
easier to use all good things so

62
00:02:18,240 --> 00:02:21,300
hopefully that's clear if it's not clear

63
00:02:20,219 --> 00:02:23,789
we'll just stick with what we got till

64
00:02:21,300 --> 00:02:25,140
it doesn't become clear because we don't

65
00:02:23,789 --> 00:02:26,549
want to make any changes to our system

66
00:02:25,139 --> 00:02:28,379
if we don't really know what we're doing

67
00:02:26,550 --> 00:02:30,719
right that's no good so we want to

68
00:02:28,379 --> 00:02:32,939
actually get a clear signal first a

69
00:02:30,719 --> 00:02:34,650
clear idea that we actually have

70
00:02:32,939 --> 00:02:36,449
something specific that would make an

71
00:02:34,650 --> 00:02:39,450
improvement until I actually get that

72
00:02:36,449 --> 00:02:40,739
sense I'm not going to touch it but

73
00:02:39,449 --> 00:02:43,049
that's certainly what I'm looking

74
00:02:40,740 --> 00:02:44,550
towards and I'm hoping that's where we

75
00:02:43,050 --> 00:02:46,830
would get after we play around with it

76
00:02:44,550 --> 00:02:48,480
for a little while and and sort of

77
00:02:46,830 --> 00:02:51,060
understand our art assets a little bit

78
00:02:48,479 --> 00:02:52,829
better so what we could see here is

79
00:02:51,060 --> 00:02:55,229
where we left off is this check for art

80
00:02:52,830 --> 00:02:57,450
changes concept this is basically

81
00:02:55,229 --> 00:02:58,310
something we can wire up in one of two

82
00:02:57,449 --> 00:03:00,269
ways

83
00:02:58,310 --> 00:03:02,250
right now what I'm going to do is I'm

84
00:03:00,270 --> 00:03:04,439
just going to wire it up to a key so we

85
00:03:02,250 --> 00:03:06,449
push it in an update to the art in the

86
00:03:04,439 --> 00:03:09,389
future we could use directory change

87
00:03:06,449 --> 00:03:12,869
notification or just a timer to check

88
00:03:09,389 --> 00:03:15,000
periodically things like that so we have

89
00:03:12,870 --> 00:03:17,310
a lot of options for how we can actually

90
00:03:15,000 --> 00:03:19,050
trigger the check for art changes but

91
00:03:17,310 --> 00:03:20,460
that's sort of a separate issue we don't

92
00:03:19,050 --> 00:03:23,160
care about that it's not very relevant

93
00:03:20,460 --> 00:03:24,719
they're all totally fine solutions some

94
00:03:23,159 --> 00:03:26,129
have like maybe a little bit better than

95
00:03:24,719 --> 00:03:27,840
others but any of them will work fine

96
00:03:26,129 --> 00:03:29,960
the important thing that we have to get

97
00:03:27,840 --> 00:03:32,219
to is just what happens once it triggers

98
00:03:29,960 --> 00:03:34,500
because just let's say hitting a key

99
00:03:32,219 --> 00:03:36,120
right now will do it and then we have to

100
00:03:34,500 --> 00:03:38,069
worry about okay so when you actually

101
00:03:36,120 --> 00:03:40,289
know that there that the user or the

102
00:03:38,069 --> 00:03:42,299
file system has indicated that it's time

103
00:03:40,289 --> 00:03:45,179
to look and see what changed what do we

104
00:03:42,300 --> 00:03:47,640
actually do so just to recap what we did

105
00:03:45,180 --> 00:03:49,140
there was we said all right when we do

106
00:03:47,639 --> 00:03:50,669
check for our changes we're gonna ask

107
00:03:49,139 --> 00:03:53,909
the platform layer to give us all the

108
00:03:50,669 --> 00:03:55,530
PNG s that reside in the art asset input

109
00:03:53,909 --> 00:03:57,270
directory we're just going to loop

110
00:03:55,530 --> 00:04:04,409
through those and we're going to ask you

111
00:03:57,270 --> 00:04:06,900
to to basically take the take the file

112
00:04:04,409 --> 00:04:08,370
name hash it so we can look up and see

113
00:04:06,900 --> 00:04:10,680
if we've got an existing version of it

114
00:04:08,370 --> 00:04:12,719
and also split it into some pieces and

115
00:04:10,680 --> 00:04:14,370
this is relevant we did this sort of

116
00:04:12,719 --> 00:04:15,650
proactively because again we know we're

117
00:04:14,370 --> 00:04:18,509
gonna have to do something with that

118
00:04:15,650 --> 00:04:20,040
those pieces are separated by

119
00:04:18,509 --> 00:04:21,569
underscores and that's what we're gonna

120
00:04:20,040 --> 00:04:23,819
have to use now because remember the PNG

121
00:04:21,569 --> 00:04:26,159
the artists don't have any idea how to

122
00:04:23,819 --> 00:04:27,449
mark those up right you know in

123
00:04:26,160 --> 00:04:28,980
Photoshop you can go in and

124
00:04:27,449 --> 00:04:30,990
texts and stuff that will come out in

125
00:04:28,980 --> 00:04:33,030
the PNG and things like that we could

126
00:04:30,990 --> 00:04:35,189
have our artist do stuff like that it's

127
00:04:33,029 --> 00:04:37,889
just it's not something that artists

128
00:04:35,189 --> 00:04:38,850
generally do and it's putting an extra

129
00:04:37,889 --> 00:04:40,589
onus on them

130
00:04:38,850 --> 00:04:42,870
to deal with that and so I'd rather just

131
00:04:40,589 --> 00:04:44,579
not so instead what we'd like to do is

132
00:04:42,870 --> 00:04:45,780
reduce the file name artists understand

133
00:04:44,579 --> 00:04:48,120
file names they work with them every day

134
00:04:45,779 --> 00:04:49,679
so if you can tell them okay the file

135
00:04:48,120 --> 00:04:52,199
names should look like this that's much

136
00:04:49,680 --> 00:04:54,810
easier for them to verify and work with

137
00:04:52,199 --> 00:04:56,159
then use some obscure text an annotation

138
00:04:54,810 --> 00:04:59,129
tool in Photoshop that you've never used

139
00:04:56,160 --> 00:05:00,570
before right so you want to try and keep

140
00:04:59,129 --> 00:05:02,219
things simple in that sense and so we've

141
00:05:00,569 --> 00:05:03,389
tried to do that but what that means is

142
00:05:02,220 --> 00:05:05,400
we have two parts the final name

143
00:05:03,389 --> 00:05:08,699
specifically not the cause of the file

144
00:05:05,399 --> 00:05:10,769
to tell us what this actually is so we

145
00:05:08,699 --> 00:05:11,879
get an a bitmap that's great it's got

146
00:05:10,769 --> 00:05:13,769
the information it's got the stuff that

147
00:05:11,879 --> 00:05:16,980
the artist drew but what it doesn't tell

148
00:05:13,769 --> 00:05:18,509
us is what that stuff pertains to right

149
00:05:16,980 --> 00:05:19,770
we just get a bunch of images okay

150
00:05:18,509 --> 00:05:21,959
here's a character or something right

151
00:05:19,769 --> 00:05:24,089
how do we know if it's the hero or one

152
00:05:21,959 --> 00:05:26,279
of the other orphans from the orphanage

153
00:05:24,089 --> 00:05:27,509
or is it a monster like a snake or

154
00:05:26,279 --> 00:05:30,179
something that's supposed to attack you

155
00:05:27,509 --> 00:05:31,860
you know all of those things all we get

156
00:05:30,180 --> 00:05:33,930
is a sprite sheet that's that's all we

157
00:05:31,860 --> 00:05:35,400
have so the file name is the thing

158
00:05:33,930 --> 00:05:37,410
that's gonna allow us to do that and so

159
00:05:35,399 --> 00:05:40,620
what we have to do is we have to work

160
00:05:37,410 --> 00:05:44,070
from a file name four words to get the

161
00:05:40,620 --> 00:05:45,959
tags that should be there for each

162
00:05:44,069 --> 00:05:46,920
individual asset so that's what's gonna

163
00:05:45,959 --> 00:05:49,379
start to come into play today and

164
00:05:46,920 --> 00:05:51,060
tomorrow so that's very important right

165
00:05:49,379 --> 00:05:52,680
now it's just thrown away so right now

166
00:05:51,060 --> 00:05:54,750
we just we parse it but we don't use it

167
00:05:52,680 --> 00:05:58,019
so we're going to be putting that in to

168
00:05:54,750 --> 00:06:01,019
use that parsed file name separated by

169
00:05:58,019 --> 00:06:02,069
the underscores there but right now

170
00:06:01,019 --> 00:06:03,289
we're not doing that so that's the

171
00:06:02,069 --> 00:06:06,480
that's something we're going to be doing

172
00:06:03,290 --> 00:06:09,450
so then what we did is we look to see if

173
00:06:06,480 --> 00:06:12,330
we have the file in question already

174
00:06:09,449 --> 00:06:14,310
processed if we do then we know that

175
00:06:12,329 --> 00:06:16,769
we've sort of mashed an existing asset

176
00:06:14,310 --> 00:06:22,410
and have to update it if we haven't then

177
00:06:16,769 --> 00:06:24,990
what we do is we create a new sort of

178
00:06:22,410 --> 00:06:26,720
storage thing that says okay here is a

179
00:06:24,990 --> 00:06:31,350
new artist that we've not seen before

180
00:06:26,720 --> 00:06:32,850
right so that's how that goes so while

181
00:06:31,350 --> 00:06:35,129
we're doing this there's one thing we

182
00:06:32,850 --> 00:06:38,930
didn't handle here and I'm not sure

183
00:06:35,129 --> 00:06:40,889
exactly how we would want to handle it

184
00:06:38,930 --> 00:06:47,668
it's kind of a

185
00:06:40,889 --> 00:06:50,519
question to answer what will happen if

186
00:06:47,668 --> 00:06:55,198
we don't make any changes to how this is

187
00:06:50,519 --> 00:06:58,438
working right now is if you delete it in

188
00:06:55,199 --> 00:07:00,990
our asset file the assets would still

189
00:06:58,439 --> 00:07:07,468
remain in the PAC file until you rebuilt

190
00:07:00,990 --> 00:07:10,530
it fresh right so let's say that you

191
00:07:07,468 --> 00:07:16,860
created ten sprite sheets for ten

192
00:07:10,529 --> 00:07:19,138
monsters monsters one through ten if you

193
00:07:16,860 --> 00:07:21,689
then deleted monster seven sprite sheet

194
00:07:19,139 --> 00:07:24,718
it wouldn't matter you could still use

195
00:07:21,689 --> 00:07:26,669
Monster seven all day long in the game

196
00:07:24,718 --> 00:07:30,509
because it would still be in the PAC

197
00:07:26,668 --> 00:07:32,639
file because it had been imported and it

198
00:07:30,509 --> 00:07:36,330
would just be there would be no

199
00:07:32,639 --> 00:07:43,079
indication that was gone there are

200
00:07:36,329 --> 00:07:44,788
reasons to and not to do that but even

201
00:07:43,079 --> 00:07:47,908
if we say that we want to continue doing

202
00:07:44,788 --> 00:07:49,588
that well we will probably want to do

203
00:07:47,908 --> 00:07:50,759
and I'll put it to do in here cuz I

204
00:07:49,588 --> 00:07:54,149
don't think we put one in here for it

205
00:07:50,759 --> 00:07:56,968
yet what we will probably want to do is

206
00:07:54,149 --> 00:07:59,519
at least warn the artist and or

207
00:07:56,968 --> 00:08:03,120
programmer that that has occurred so if

208
00:07:59,519 --> 00:08:06,478
they delete Monster seven we should

209
00:08:03,120 --> 00:08:07,949
probably warn them hey Monster seven is

210
00:08:06,478 --> 00:08:10,620
still available in the PAC files you

211
00:08:07,949 --> 00:08:12,750
deleted Monster seven you should just be

212
00:08:10,620 --> 00:08:14,399
aware of that fact like we should

213
00:08:12,750 --> 00:08:16,800
probably hoping it says like if and if

214
00:08:14,399 --> 00:08:20,338
maybe if someone in the game uses that

215
00:08:16,800 --> 00:08:21,718
sprite maybe it should be marked as such

216
00:08:20,338 --> 00:08:25,439
like maybe we should put a purple

217
00:08:21,718 --> 00:08:28,348
outline around it or something like that

218
00:08:25,439 --> 00:08:30,240
because probably you never want the game

219
00:08:28,348 --> 00:08:32,819
to get into a state that you've deleted

220
00:08:30,240 --> 00:08:35,549
the source pings but you're still using

221
00:08:32,820 --> 00:08:39,750
them effectively because that's like

222
00:08:35,549 --> 00:08:41,879
almost an error state like it's even

223
00:08:39,750 --> 00:08:43,469
though the game can still go if you you

224
00:08:41,879 --> 00:08:46,110
probably always want to be in a position

225
00:08:43,469 --> 00:08:47,490
to rebuild your assets from scratch you

226
00:08:46,110 --> 00:08:50,039
don't want to be in a situation where

227
00:08:47,490 --> 00:08:52,879
the PAC file on a particular machine is

228
00:08:50,039 --> 00:08:54,569
holding the only copy of the art assets

229
00:08:52,879 --> 00:08:59,340
right like that

230
00:08:54,570 --> 00:09:03,270
not really where we want to be so I do

231
00:08:59,340 --> 00:09:06,240
think we probably want to do that you

232
00:09:03,269 --> 00:09:13,919
know something in here where we can say

233
00:09:06,240 --> 00:09:19,049
like do a sweep mark to set all assets

234
00:09:13,919 --> 00:09:22,659
to unseen then mark each one we see so

235
00:09:19,049 --> 00:09:24,169
we can detect when files have been

236
00:09:22,659 --> 00:09:26,759
[Music]

237
00:09:24,169 --> 00:09:32,370
deleted because if you think about

238
00:09:26,759 --> 00:09:34,620
what's going on one of the props so this

239
00:09:32,370 --> 00:09:36,919
is sort of a meta comment that I'll make

240
00:09:34,620 --> 00:09:39,690
it's true about file systems in general

241
00:09:36,919 --> 00:09:41,490
so one of the core mistakes that was

242
00:09:39,690 --> 00:09:44,760
made in the design of most modern file

243
00:09:41,490 --> 00:09:46,590
systems is that deleted files are no

244
00:09:44,759 --> 00:09:49,289
longer present so this is a really

245
00:09:46,590 --> 00:09:51,600
crucial in my opinion mistake and it's

246
00:09:49,289 --> 00:09:52,709
not how file system should work so in my

247
00:09:51,600 --> 00:09:54,750
opinion the way a file system should

248
00:09:52,710 --> 00:09:57,720
work is deleted files should still show

249
00:09:54,750 --> 00:10:00,330
up as deleted that's just I mean that's

250
00:09:57,720 --> 00:10:02,250
just how they should work so for example

251
00:10:00,330 --> 00:10:04,889
if you have a directory and you have a

252
00:10:02,250 --> 00:10:08,580
dot txt B Tech C dot txt and D dot txt

253
00:10:04,889 --> 00:10:10,620
right if you delete C dot txt what you

254
00:10:08,580 --> 00:10:13,650
should see if you do directory of that

255
00:10:10,620 --> 00:10:16,710
is you should see C dot txt parentheses

256
00:10:13,649 --> 00:10:18,600
delete it now that may sound like a

257
00:10:16,710 --> 00:10:20,790
weird thing why is he saying that why is

258
00:10:18,600 --> 00:10:22,710
he saying it's an obvious mistake that

259
00:10:20,789 --> 00:10:25,279
file systems do this rather than just a

260
00:10:22,710 --> 00:10:29,040
preference thing the reason is because

261
00:10:25,279 --> 00:10:32,459
deletion is an act it is a thing that

262
00:10:29,039 --> 00:10:34,620
the user actually did and by removing

263
00:10:32,460 --> 00:10:37,440
any trace of the fact that they've done

264
00:10:34,620 --> 00:10:40,649
it it becomes impossible for you to

265
00:10:37,440 --> 00:10:42,480
properly synchronize directories you can

266
00:10:40,649 --> 00:10:46,679
no longer tell the difference between a

267
00:10:42,480 --> 00:10:49,769
directory that had ABCD and then had C

268
00:10:46,679 --> 00:10:51,689
removed then one that just had a B and D

269
00:10:49,769 --> 00:10:54,059
and never had a C in the first place

270
00:10:51,690 --> 00:10:56,180
what this means is that backup utilities

271
00:10:54,059 --> 00:10:59,329
file synchronization utilities

272
00:10:56,179 --> 00:11:03,269
networking utilities all of these things

273
00:10:59,330 --> 00:11:05,070
now have to keep backing stores to

274
00:11:03,269 --> 00:11:08,159
determine whether or not you deleted

275
00:11:05,070 --> 00:11:10,139
files and when it comes to

276
00:11:08,159 --> 00:11:12,328
a situation where you have deleted files

277
00:11:10,139 --> 00:11:14,639
it only really knows since its last

278
00:11:12,328 --> 00:11:15,929
snapshot it doesn't really even know if

279
00:11:14,639 --> 00:11:17,250
maybe there was a file there and then

280
00:11:15,929 --> 00:11:19,439
you deleted that file which is the

281
00:11:17,250 --> 00:11:21,659
information it can't get if it didn't

282
00:11:19,440 --> 00:11:26,490
take a snapshot in between the creation

283
00:11:21,659 --> 00:11:28,549
and the deletion right so a lot of

284
00:11:26,490 --> 00:11:31,259
modifier says to make this mistake

285
00:11:28,549 --> 00:11:32,969
there's attempts to add it back in so I

286
00:11:31,259 --> 00:11:33,688
think like windows volume Shadow Copy

287
00:11:32,970 --> 00:11:38,899
Service

288
00:11:33,688 --> 00:11:41,068
I think understands this now so I don't

289
00:11:38,899 --> 00:11:44,309
quote me on this but I believe that

290
00:11:41,068 --> 00:11:46,469
modern file systems now have a little

291
00:11:44,309 --> 00:11:49,649
more of this getting added back in but

292
00:11:46,470 --> 00:11:51,629
it was kind of like a huge dark period

293
00:11:49,649 --> 00:11:53,309
where we didn't have it and so now it

294
00:11:51,629 --> 00:11:56,430
still doesn't really exist in the file

295
00:11:53,309 --> 00:12:00,299
API is and even accessing that becomes

296
00:11:56,429 --> 00:12:02,849
difficult bla bla bla what we are seeing

297
00:12:00,299 --> 00:12:06,208
here is just a tip of an iceberg of a

298
00:12:02,850 --> 00:12:07,740
mistake in a design of the general way

299
00:12:06,208 --> 00:12:11,758
we consider file systems to work and

300
00:12:07,740 --> 00:12:13,860
here it is rather than getting the

301
00:12:11,759 --> 00:12:15,480
obvious thing we want which is a listing

302
00:12:13,860 --> 00:12:17,490
of all of the file names that have

303
00:12:15,480 --> 00:12:18,829
existed in this directory and which one

304
00:12:17,490 --> 00:12:21,329
still exists

305
00:12:18,828 --> 00:12:23,278
instead we're getting something quite a

306
00:12:21,328 --> 00:12:26,219
bit worse than that which is just a list

307
00:12:23,278 --> 00:12:27,360
of the files that exist currently you

308
00:12:26,220 --> 00:12:28,709
can take this one step further and

309
00:12:27,360 --> 00:12:30,269
understand the fact that really you

310
00:12:28,708 --> 00:12:32,429
should have a change grid with every

311
00:12:30,269 --> 00:12:34,350
file name so every file name rather than

312
00:12:32,429 --> 00:12:36,120
saying what the last right time is not

313
00:12:34,350 --> 00:12:38,459
particularly relevant what you need is

314
00:12:36,120 --> 00:12:39,839
the last change index and every time

315
00:12:38,458 --> 00:12:42,088
that the file is updated you can create

316
00:12:39,839 --> 00:12:44,730
the changes right again that would allow

317
00:12:42,089 --> 00:12:47,910
us to see whether these files were the

318
00:12:44,730 --> 00:12:50,250
same or different and if we miss changes

319
00:12:47,909 --> 00:12:51,750
in between right so at least this would

320
00:12:50,250 --> 00:12:54,149
say oh the last time you looked it was

321
00:12:51,750 --> 00:12:56,278
changed number 32 now it's changed 4000

322
00:12:54,149 --> 00:12:58,230
someone made 8 different changes that we

323
00:12:56,278 --> 00:13:00,058
didn't get to see right again

324
00:12:58,230 --> 00:13:03,300
information so a lot of this information

325
00:13:00,058 --> 00:13:05,549
gets lost and modern file systems just

326
00:13:03,299 --> 00:13:08,159
do a bad job with it they are starting

327
00:13:05,549 --> 00:13:10,859
to add these things back in you know

328
00:13:08,159 --> 00:13:12,509
like the old VMs file system actually

329
00:13:10,860 --> 00:13:14,009
understood versions when you change the

330
00:13:12,509 --> 00:13:15,919
file you could see the old versions of

331
00:13:14,009 --> 00:13:19,500
the file automatically stuff like this

332
00:13:15,919 --> 00:13:21,659
so there were people understood better

333
00:13:19,500 --> 00:13:22,409
in the old days what file systems might

334
00:13:21,659 --> 00:13:24,209
be

335
00:13:22,409 --> 00:13:25,889
we got rid of a lot of that in personal

336
00:13:24,210 --> 00:13:28,769
computing and maybe you'll get better

337
00:13:25,889 --> 00:13:31,259
back in but this is just one very small

338
00:13:28,769 --> 00:13:33,299
very simple example of how that

339
00:13:31,259 --> 00:13:35,069
manifests itself in making it harder to

340
00:13:33,299 --> 00:13:37,049
make tools that work with files again

341
00:13:35,070 --> 00:13:38,610
very very basic there's a lot more we

342
00:13:37,049 --> 00:13:41,069
could say about it but hopefully that

343
00:13:38,610 --> 00:13:44,159
gives you some perspective on why the

344
00:13:41,070 --> 00:13:48,900
basic file operations that were exposed

345
00:13:44,159 --> 00:13:51,329
with say fat32 and things like that are

346
00:13:48,899 --> 00:13:52,829
just are just not very good right there

347
00:13:51,330 --> 00:13:55,200
they're not the course that you would

348
00:13:52,830 --> 00:13:56,400
want and a lot of people don't know any

349
00:13:55,200 --> 00:13:58,050
better so they think that that's just

350
00:13:56,399 --> 00:14:00,659
what a file system is but it shouldn't

351
00:13:58,049 --> 00:14:02,039
be it should be more than that and you

352
00:14:00,659 --> 00:14:05,039
know hopefully someday we'll kind of

353
00:14:02,039 --> 00:14:07,949
klar way back to there because this is

354
00:14:05,039 --> 00:14:10,279
not news I'm not saying things that are

355
00:14:07,950 --> 00:14:12,750
revolutionary I'm saying things that are

356
00:14:10,279 --> 00:14:14,009
if anything retroactive they're saying

357
00:14:12,750 --> 00:14:17,039
hey can we get back some of the

358
00:14:14,009 --> 00:14:18,990
technology we had in the 1970s and which

359
00:14:17,039 --> 00:14:22,139
went away in the personal computing era

360
00:14:18,990 --> 00:14:25,080
and which now you know is kind of hope

361
00:14:22,139 --> 00:14:27,929
going to hopefully come back hopefully I

362
00:14:25,080 --> 00:14:33,090
say that with a big hopefully because

363
00:14:27,929 --> 00:14:33,779
who knows alright so anyway so we want

364
00:14:33,090 --> 00:14:35,580
to do something like that eventually

365
00:14:33,779 --> 00:14:37,049
probably right now that's the least of

366
00:14:35,580 --> 00:14:38,250
our concerns the tags are gonna be the

367
00:14:37,049 --> 00:14:39,719
bigger problem so we don't really have

368
00:14:38,250 --> 00:14:42,000
to care about that too much that's sort

369
00:14:39,720 --> 00:14:44,250
of a minutiae point a nice to have if

370
00:14:42,000 --> 00:14:46,649
you will so what we're really looking at

371
00:14:44,250 --> 00:14:48,480
here is the the core stuff here once we

372
00:14:46,649 --> 00:14:50,370
get one of these things in and we see

373
00:14:48,480 --> 00:14:52,830
that we it's out of date and remember

374
00:14:50,370 --> 00:14:54,600
this will work correctly when we've

375
00:14:52,830 --> 00:14:56,250
never seen the thing before because the

376
00:14:54,600 --> 00:14:58,440
file date will just get initialized to

377
00:14:56,250 --> 00:15:00,870
zero so that's that will never be a

378
00:14:58,440 --> 00:15:02,430
valid file date that comes through so we

379
00:15:00,870 --> 00:15:05,039
will automatically trigger this case

380
00:15:02,429 --> 00:15:07,019
either if the file has actually had a

381
00:15:05,039 --> 00:15:09,599
write update done to it so the file date

382
00:15:07,019 --> 00:15:11,250
has changed from the old file date or we

383
00:15:09,600 --> 00:15:13,350
will trigger if the file date was zero

384
00:15:11,250 --> 00:15:14,879
here right because then this will never

385
00:15:13,350 --> 00:15:18,240
be able to be matched so it'll it'll

386
00:15:14,879 --> 00:15:19,830
definitely enter this once we get in

387
00:15:18,240 --> 00:15:21,990
there we're gonna make a temporary arena

388
00:15:19,830 --> 00:15:24,210
and do a bunch of processing and then

389
00:15:21,990 --> 00:15:25,830
throw that away so what you can see here

390
00:15:24,210 --> 00:15:27,780
is us going ahead and reading all of the

391
00:15:25,830 --> 00:15:29,100
information out of the file just sucking

392
00:15:27,779 --> 00:15:31,860
the whole thing into memory because we

393
00:15:29,100 --> 00:15:32,790
know all our pngs are not so big that I

394
00:15:31,860 --> 00:15:35,909
can't fit in the memory of the machine

395
00:15:32,789 --> 00:15:40,049
certainly so then we run the update

396
00:15:35,909 --> 00:15:41,429
asset manager from P&amp;G and you can see

397
00:15:40,049 --> 00:15:44,309
that right here and that is the part

398
00:15:41,429 --> 00:15:46,289
that we really have to work on we call

399
00:15:44,309 --> 00:15:47,429
out to process child import the reason

400
00:15:46,289 --> 00:15:49,679
for that is we're probably going to want

401
00:15:47,429 --> 00:15:52,649
to expand this very shortly to work on

402
00:15:49,679 --> 00:15:54,449
non tiled imports for title screen stuff

403
00:15:52,649 --> 00:15:56,549
like that we already actually do have

404
00:15:54,450 --> 00:15:58,680
something we can test with that oops

405
00:15:56,549 --> 00:16:00,089
that's wrong directory in our art import

406
00:15:58,679 --> 00:16:01,500
directory we've got this little title

407
00:16:00,090 --> 00:16:03,030
screen here that we can pop up so this

408
00:16:01,500 --> 00:16:04,379
example of just we could put like you

409
00:16:03,029 --> 00:16:07,529
know on the press start page or whatever

410
00:16:04,379 --> 00:16:09,360
that is not tiled so we would like to

411
00:16:07,529 --> 00:16:11,309
have a way of indicating that we're

412
00:16:09,360 --> 00:16:14,070
gonna import a non tiled image that will

413
00:16:11,309 --> 00:16:16,229
not go through this right but here's the

414
00:16:14,070 --> 00:16:18,000
main course of action process tile

415
00:16:16,230 --> 00:16:20,159
import as you can see we go through

416
00:16:18,000 --> 00:16:21,720
process tile import what we do is we

417
00:16:20,159 --> 00:16:24,029
break the file up into those tiles

418
00:16:21,720 --> 00:16:26,730
remember again the tiles is how we've

419
00:16:24,029 --> 00:16:28,679
organized things into sprite sheets what

420
00:16:26,730 --> 00:16:30,420
we want to do is check each tile to see

421
00:16:28,679 --> 00:16:32,250
if there's anything in it because a lot

422
00:16:30,419 --> 00:16:34,259
of them will be blank and what you can

423
00:16:32,250 --> 00:16:36,570
see here is when we when we do the

424
00:16:34,259 --> 00:16:37,860
min/max here for any given tile that's

425
00:16:36,570 --> 00:16:39,750
actually gonna tell us sort of the

426
00:16:37,860 --> 00:16:41,490
bounds of that tile and when we know the

427
00:16:39,750 --> 00:16:42,840
bounds of the tile we can then know

428
00:16:41,490 --> 00:16:44,580
whether there's anything in it because

429
00:16:42,840 --> 00:16:47,280
if we never expand the bounds at all

430
00:16:44,580 --> 00:16:50,520
then we know that there's just nothing

431
00:16:47,279 --> 00:16:53,370
in that tile so coming through here you

432
00:16:50,519 --> 00:16:54,809
can see us doing those those operations

433
00:16:53,370 --> 00:16:56,370
right figuring out whether there's

434
00:16:54,809 --> 00:17:00,959
anything in here once we know that there

435
00:16:56,370 --> 00:17:03,409
is we take a look at it and we say have

436
00:17:00,960 --> 00:17:06,480
we already processed this tile before

437
00:17:03,409 --> 00:17:08,549
like a previous version of the PNG if so

438
00:17:06,480 --> 00:17:11,220
that's our asset index if not we need to

439
00:17:08,549 --> 00:17:13,500
get a new asset index once we come

440
00:17:11,220 --> 00:17:15,299
through and have an asset index we will

441
00:17:13,500 --> 00:17:17,430
then say all right let's reserve some

442
00:17:15,299 --> 00:17:20,579
space to store the new data for this

443
00:17:17,430 --> 00:17:22,830
thing we won't do that if the existing

444
00:17:20,579 --> 00:17:25,369
space for the thing would fit it right

445
00:17:22,829 --> 00:17:27,599
which it which it will in some cases so

446
00:17:25,369 --> 00:17:29,219
let's say we imported PNG and

447
00:17:27,599 --> 00:17:33,539
immediately after we import the same PNG

448
00:17:29,220 --> 00:17:34,950
again that space we use to store it the

449
00:17:33,539 --> 00:17:38,369
first time we can just use the same

450
00:17:34,950 --> 00:17:42,509
space again right then we come through

451
00:17:38,369 --> 00:17:45,419
here and say okay we we now can store it

452
00:17:42,509 --> 00:17:48,029
we just need to update the data and the

453
00:17:45,420 --> 00:17:49,519
asset record to reflect the new size the

454
00:17:48,029 --> 00:17:52,910
new information that

455
00:17:49,519 --> 00:17:54,200
put there and so really again getting

456
00:17:52,910 --> 00:17:56,390
back to what I said the very beginning a

457
00:17:54,200 --> 00:17:57,890
stream the real part that's missing here

458
00:17:56,390 --> 00:17:58,940
because we got some stub functions but

459
00:17:57,890 --> 00:18:01,130
they're gonna be pretty easy to

460
00:17:58,940 --> 00:18:05,090
implement these are not difficult stub

461
00:18:01,130 --> 00:18:08,150
functions to write so the real work

462
00:18:05,089 --> 00:18:09,769
today or probably tomorrow if we flush

463
00:18:08,150 --> 00:18:11,269
this out and test it we probably will

464
00:18:09,769 --> 00:18:12,410
leave this to start on this tomorrow

465
00:18:11,269 --> 00:18:14,599
will be that this will be the hard work

466
00:18:12,410 --> 00:18:16,970
the hard work is gonna be figure out

467
00:18:14,599 --> 00:18:18,949
what to do about the tags because again

468
00:18:16,970 --> 00:18:21,589
the tags are kind of a separate issue

469
00:18:18,950 --> 00:18:23,480
and we really don't know a lot about how

470
00:18:21,589 --> 00:18:24,319
we're gonna do it but what we do know is

471
00:18:23,480 --> 00:18:25,519
that we're probably going to do

472
00:18:24,319 --> 00:18:27,859
something different from what we were

473
00:18:25,519 --> 00:18:30,619
doing before before what we were doing

474
00:18:27,859 --> 00:18:33,559
is sort of storing into the file these

475
00:18:30,619 --> 00:18:38,119
tag sets but really what we've what we

476
00:18:33,559 --> 00:18:40,220
see when we look is that there's sort of

477
00:18:38,119 --> 00:18:41,539
almost two sets two types of tags now

478
00:18:40,220 --> 00:18:44,089
and this sort of starts to get at what I

479
00:18:41,539 --> 00:18:54,889
was saying about how I think we'll gain

480
00:18:44,089 --> 00:18:56,000
some insight here yeah I think we'll be

481
00:18:54,890 --> 00:18:58,930
able to gain some insight into what's

482
00:18:56,000 --> 00:19:03,349
going on what I think we're gonna find

483
00:18:58,930 --> 00:19:06,130
is that really when we look at these

484
00:19:03,349 --> 00:19:09,169
sprite sheets what we'll see is that a

485
00:19:06,130 --> 00:19:11,770
given sprite sheet type like a character

486
00:19:09,170 --> 00:19:15,140
sprite sheet just has the same tags I

487
00:19:11,769 --> 00:19:17,150
mean they all mean the same thing so

488
00:19:15,140 --> 00:19:20,660
rather than having tags for searching

489
00:19:17,150 --> 00:19:22,070
bitmaps probably the bitmaps can just be

490
00:19:20,660 --> 00:19:23,630
in a direct lookup scheme that

491
00:19:22,069 --> 00:19:27,619
corresponds to whether it's a character

492
00:19:23,630 --> 00:19:29,750
an item or a block or something right so

493
00:19:27,619 --> 00:19:33,379
that can just be a hard look up that

494
00:19:29,750 --> 00:19:35,769
doesn't have any tag matching then what

495
00:19:33,380 --> 00:19:38,840
will happen I think a butt like sort of

496
00:19:35,769 --> 00:19:41,359
in the upper in the part right before

497
00:19:38,839 --> 00:19:44,179
that the tag matching will probably be

498
00:19:41,359 --> 00:19:45,019
on what you're matching right so you

499
00:19:44,180 --> 00:19:47,660
know we've got all these different

500
00:19:45,019 --> 00:19:49,160
orphans you know what I mean they could

501
00:19:47,660 --> 00:19:50,720
each be tagged with different tags like

502
00:19:49,160 --> 00:19:52,840
oh this is an orphan that has these

503
00:19:50,720 --> 00:19:54,890
skills or as though it's something that

504
00:19:52,839 --> 00:19:56,480
picking a particular orphan or a

505
00:19:54,890 --> 00:20:01,340
particular monster or particular glove

506
00:19:56,480 --> 00:20:02,599
or a particular hat right those those

507
00:20:01,339 --> 00:20:04,788
choices

508
00:20:02,599 --> 00:20:07,939
are probably the ones that are going to

509
00:20:04,788 --> 00:20:10,700
be more based on tags right and we may

510
00:20:07,940 --> 00:20:12,140
or may not depending on how we go want

511
00:20:10,700 --> 00:20:13,610
them to be fuzzy like they currently are

512
00:20:12,140 --> 00:20:15,919
or maybe they'll just be hard tags I

513
00:20:13,609 --> 00:20:19,129
don't know so we'll see but what it

514
00:20:15,919 --> 00:20:24,320
looks like at least to me is inside a

515
00:20:19,130 --> 00:20:27,919
particular set where you're saying this

516
00:20:24,319 --> 00:20:30,288
is a sprite sheet of type blah they're

517
00:20:27,919 --> 00:20:32,809
all the same each character sprite sheet

518
00:20:30,288 --> 00:20:34,009
has the same meaning here's the left

519
00:20:32,808 --> 00:20:36,619
word use the right word is the

520
00:20:34,009 --> 00:20:39,558
attacker's or whatever right and so that

521
00:20:36,619 --> 00:20:41,389
doesn't it doesn't need arbitrary

522
00:20:39,558 --> 00:20:43,609
tagging and arbitrary tag search anymore

523
00:20:41,390 --> 00:20:45,650
so waste of time and storage and effort

524
00:20:43,609 --> 00:20:47,058
to do that so I feel like that's the

525
00:20:45,650 --> 00:20:50,240
first place we're really gonna be able

526
00:20:47,058 --> 00:20:52,519
to simplify there here's a cat by the

527
00:20:50,240 --> 00:20:56,569
way I would like to get the cat in the

528
00:20:52,519 --> 00:20:56,869
game soon all right so that's where

529
00:20:56,569 --> 00:20:59,149
we're at

530
00:20:56,869 --> 00:21:00,529
let's go ahead and start by implementing

531
00:20:59,150 --> 00:21:03,200
the stub functions we've left for

532
00:21:00,529 --> 00:21:05,210
ourselves so what you can see here is

533
00:21:03,200 --> 00:21:07,880
we're gonna need extra room to store new

534
00:21:05,210 --> 00:21:10,730
assets when we find assets that we don't

535
00:21:07,880 --> 00:21:12,620
actually have storage for yet and so

536
00:21:10,730 --> 00:21:17,480
what I'd like to do there is I'd like to

537
00:21:12,619 --> 00:21:22,069
be able to take and go ahead and show

538
00:21:17,480 --> 00:21:24,019
you what I mean here on this one so what

539
00:21:22,069 --> 00:21:26,839
I want to do is take this array that has

540
00:21:24,019 --> 00:21:28,940
our assets in it and I would like to

541
00:21:26,839 --> 00:21:30,379
make that array expandable and so the

542
00:21:28,940 --> 00:21:32,990
way that I'm gonna make expandable is

543
00:21:30,380 --> 00:21:37,220
just say look there's a maximum ass

544
00:21:32,990 --> 00:21:40,099
asset count right and when we load the

545
00:21:37,220 --> 00:21:42,529
game in a release setting perhaps the

546
00:21:40,099 --> 00:21:45,980
maximum asset count is the same as the

547
00:21:42,529 --> 00:21:47,629
asset count but when you load it in a

548
00:21:45,980 --> 00:21:49,730
debug setting what we'll do is we'll

549
00:21:47,630 --> 00:21:51,799
make the maximum asset count much larger

550
00:21:49,730 --> 00:21:53,720
than the actual asset count which allows

551
00:21:51,798 --> 00:21:55,879
you to grow the asset tree for free

552
00:21:53,720 --> 00:22:00,019
because you won't have to do like a

553
00:21:55,880 --> 00:22:01,460
recopy or anything like that now one

554
00:22:00,019 --> 00:22:04,038
thing I don't know is do me snap a

555
00:22:01,460 --> 00:22:06,319
pointer to this anywhere taking a look

556
00:22:04,038 --> 00:22:11,599
here it appears that we don't really do

557
00:22:06,319 --> 00:22:13,069
that in any real way so what that means

558
00:22:11,599 --> 00:22:15,379
is we should be able to grow this array

559
00:22:13,069 --> 00:22:18,019
as well as long as we always refer to

560
00:22:15,380 --> 00:22:23,380
assets by an integer and never by a

561
00:22:18,019 --> 00:22:26,658
pointer outside of particular situations

562
00:22:23,380 --> 00:22:29,150
we should be ok and so what I'm a

563
00:22:26,659 --> 00:22:31,370
suspecting we could do here is if we

564
00:22:29,150 --> 00:22:34,759
make some kind of a system that would

565
00:22:31,369 --> 00:22:36,259
grow this array in at times when we know

566
00:22:34,759 --> 00:22:38,058
that we've locked everything down and

567
00:22:36,259 --> 00:22:40,158
all the asset processing has stopped or

568
00:22:38,058 --> 00:22:42,589
something like that that would allow us

569
00:22:40,159 --> 00:22:48,230
to do this now that's harder than it

570
00:22:42,589 --> 00:22:51,709
seems because when you have

571
00:22:48,230 --> 00:22:54,319
multi-threaded asset loading you have to

572
00:22:51,710 --> 00:22:56,659
have now some way of locking that down

573
00:22:54,319 --> 00:22:59,029
and preventing like making sure that all

574
00:22:56,659 --> 00:23:00,559
the asset loading has completed expand

575
00:22:59,029 --> 00:23:03,769
the array and then allow the asset

576
00:23:00,558 --> 00:23:06,529
loading to continue right so we need to

577
00:23:03,769 --> 00:23:07,639
have some kind of a semaphore there in

578
00:23:06,529 --> 00:23:11,509
order for that to occur

579
00:23:07,640 --> 00:23:15,169
however I believe could be wrong about

580
00:23:11,509 --> 00:23:18,339
this but I believe we sort of already

581
00:23:15,169 --> 00:23:18,340
have that

582
00:23:21,359 --> 00:23:28,500
I believe we sort of went a little bit

583
00:23:24,720 --> 00:23:39,980
down that road already and if you take a

584
00:23:28,500 --> 00:23:39,980
look at this

585
00:23:43,380 --> 00:23:49,530
what you can see here is that there's

586
00:23:45,839 --> 00:23:55,319
actually a lock around accessing the

587
00:23:49,529 --> 00:23:57,869
assets here and so we already have sort

588
00:23:55,319 --> 00:24:00,599
of a notion that assets can't be

589
00:23:57,869 --> 00:24:05,459
referred to inside or outside of certain

590
00:24:00,599 --> 00:24:07,769
times and so we kind of went a little

591
00:24:05,460 --> 00:24:09,298
bit down this road already so we

592
00:24:07,769 --> 00:24:10,859
probably won't have to completely

593
00:24:09,298 --> 00:24:12,929
rethink the way we're doing things

594
00:24:10,859 --> 00:24:16,829
probably slight modifications would work

595
00:24:12,929 --> 00:24:18,990
but again for the immediate future we

596
00:24:16,829 --> 00:24:22,019
actually don't have to do anything quite

597
00:24:18,990 --> 00:24:24,269
so complicated what we can do instead is

598
00:24:22,019 --> 00:24:29,879
we can just and this would even work

599
00:24:24,269 --> 00:24:32,119
period like we would just do this we

600
00:24:29,880 --> 00:24:34,650
could accept a solution period right

601
00:24:32,119 --> 00:24:36,629
it's not necessary for us to go further

602
00:24:34,650 --> 00:24:38,400
than this so we might not but I'm saying

603
00:24:36,630 --> 00:24:41,010
you could if you wanted to by using some

604
00:24:38,400 --> 00:24:43,080
locking there but what we can do here

605
00:24:41,009 --> 00:24:45,319
when we allocate the game assets is when

606
00:24:43,079 --> 00:24:47,699
we actually produce that asset array

607
00:24:45,319 --> 00:24:50,609
what you can see here is we do a push s

608
00:24:47,700 --> 00:24:52,650
that's here and we do it for asset count

609
00:24:50,609 --> 00:24:56,490
what I'd rather do is say all right

610
00:24:52,650 --> 00:25:00,030
assets max asset count right is going to

611
00:24:56,490 --> 00:25:04,349
be equal to however many assets we think

612
00:25:00,029 --> 00:25:14,450
we want and then what I can do is say

613
00:25:04,349 --> 00:25:14,449
well if we're in developer C here

614
00:25:16,009 --> 00:25:20,970
we go if we're in sort of a developer

615
00:25:19,019 --> 00:25:23,069
build so we've got sort of this hammy

616
00:25:20,970 --> 00:25:24,720
internal handmade slow him with right if

617
00:25:23,069 --> 00:25:27,628
this is an internal build so it's

618
00:25:24,720 --> 00:25:30,360
supposed to allow people to refresh

619
00:25:27,628 --> 00:25:32,788
their assets right

620
00:25:30,359 --> 00:25:34,469
if handmade internal is set then what we

621
00:25:32,788 --> 00:25:35,460
can do is say well okay this is going to

622
00:25:34,470 --> 00:25:38,970
be something that's running on a

623
00:25:35,460 --> 00:25:40,409
developer machine or an enthusiast or

624
00:25:38,970 --> 00:25:42,569
whatever right they're running the

625
00:25:40,409 --> 00:25:44,399
internal build so when we do max asset

626
00:25:42,569 --> 00:25:46,138
count we're going to give ourselves a

627
00:25:44,398 --> 00:25:49,069
Headroom where we're basically saying

628
00:25:46,138 --> 00:25:51,329
okay just allocate a ton of space

629
00:25:49,069 --> 00:25:53,668
additional space or something right I

630
00:25:51,329 --> 00:25:58,769
mean you could go nuts like just a crap

631
00:25:53,669 --> 00:26:00,119
ton of space that'll never hit right you

632
00:25:58,769 --> 00:26:02,429
can update art assets all day long

633
00:26:00,118 --> 00:26:03,628
that'll never hit so what we can do

634
00:26:02,429 --> 00:26:05,669
there just give us ourselves enough

635
00:26:03,628 --> 00:26:07,408
Headroom that our arraign never actually

636
00:26:05,669 --> 00:26:08,788
has to get relocated and then we never

637
00:26:07,409 --> 00:26:10,980
have to really worry about that and

638
00:26:08,788 --> 00:26:13,200
again if it did all that you'd have to

639
00:26:10,980 --> 00:26:17,038
do is close the game and restart it

640
00:26:13,200 --> 00:26:19,249
right because then it would again load

641
00:26:17,038 --> 00:26:23,778
in hover assets you have plus another

642
00:26:19,249 --> 00:26:26,788
65k worth of asset Headroom so again

643
00:26:23,778 --> 00:26:28,740
it's worth noting that sometimes the

644
00:26:26,788 --> 00:26:30,658
simple solution might be better here

645
00:26:28,740 --> 00:26:32,609
because rather than introducing all

646
00:26:30,659 --> 00:26:34,409
kinds of locking schemes and relocating

647
00:26:32,609 --> 00:26:36,388
this array just give yourself enough

648
00:26:34,409 --> 00:26:38,909
space to work with and you're done

649
00:26:36,388 --> 00:26:43,168
right this isn't an end user operation

650
00:26:38,909 --> 00:26:45,419
so it's probably fine all right so if we

651
00:26:43,169 --> 00:26:47,580
do that allocation now we've added a lot

652
00:26:45,419 --> 00:26:49,879
of extra space at the head room for

653
00:26:47,579 --> 00:26:52,949
internal builds what that means is now

654
00:26:49,878 --> 00:26:58,618
if I go oops that's not at all what I

655
00:26:52,950 --> 00:27:01,048
wanted at all I wanted that if we go

656
00:26:58,618 --> 00:27:05,819
here to reserve asset all that's going

657
00:27:01,048 --> 00:27:09,019
to do is it's going to say look we

658
00:27:05,819 --> 00:27:09,019
better have room for this

659
00:27:14,710 --> 00:27:25,340
and we could eventually actually provide

660
00:27:22,788 --> 00:27:27,679
a real error here in fact you know what

661
00:27:25,339 --> 00:27:31,250
I'm gonna go that extra mile why not

662
00:27:27,679 --> 00:27:40,070
let's change reserve asset to something

663
00:27:31,250 --> 00:27:42,319
that says will return true or false

664
00:27:40,069 --> 00:27:47,589
right and I guess maybe I'll just call

665
00:27:42,319 --> 00:27:47,589
this asset index and keep this as result

666
00:27:49,659 --> 00:27:58,120
and what I'll say is okay if the asset

667
00:27:53,390 --> 00:27:58,120
count is is such that I can provide this

668
00:27:59,950 --> 00:28:14,569
then I will provide it otherwise I will

669
00:28:05,630 --> 00:28:22,480
not so what you can see here you know

670
00:28:14,569 --> 00:28:22,480
what I suppose now that I think about it

671
00:28:22,929 --> 00:28:27,169
we actually have a zero here so we

672
00:28:25,640 --> 00:28:29,740
actually don't need to do that I could

673
00:28:27,169 --> 00:28:29,740
do it this way

674
00:28:31,240 --> 00:28:35,269
so that would reserve a new asset and

675
00:28:33,859 --> 00:28:38,089
then what I can do is go down here to

676
00:28:35,269 --> 00:28:39,668
reserve asset where we call it you can

677
00:28:38,089 --> 00:28:43,220
see this is the only place we call it

678
00:28:39,669 --> 00:28:46,970
what I can do here is actually process

679
00:28:43,220 --> 00:28:53,329
the air like handle the error here and

680
00:28:46,970 --> 00:28:58,490
so what I can do is say if we got an

681
00:28:53,329 --> 00:29:01,369
asset index do this otherwise don't so

682
00:28:58,490 --> 00:29:04,759
then we've actually said oh okay like we

683
00:29:01,369 --> 00:29:07,849
we will handle that error and I can put

684
00:29:04,759 --> 00:29:09,710
in here an actual out to the error

685
00:29:07,849 --> 00:29:12,019
processing because you can see here

686
00:29:09,710 --> 00:29:14,150
we've already got error reporting so I

687
00:29:12,019 --> 00:29:16,808
might as well make use of it right I'll

688
00:29:14,150 --> 00:29:16,809
say okay

689
00:29:28,460 --> 00:29:36,179
right so this way if we did set this to

690
00:29:34,470 --> 00:29:37,528
a relatively low number for some reason

691
00:29:36,179 --> 00:29:39,210
which I don't think we should but let's

692
00:29:37,528 --> 00:29:40,528
say we did we would actually still at

693
00:29:39,210 --> 00:29:42,298
least get an error message here and the

694
00:29:40,528 --> 00:29:43,548
person could know that something had

695
00:29:42,298 --> 00:29:46,048
gone wrong and then try again

696
00:29:43,548 --> 00:29:48,359
furthermore we can do here when we do

697
00:29:46,048 --> 00:29:50,940
update asset package from ping another

698
00:29:48,359 --> 00:29:55,259
thing that we can do is since we know

699
00:29:50,940 --> 00:29:57,480
when we have errors we could say that if

700
00:29:55,259 --> 00:30:03,028
there are errors will try the file again

701
00:29:57,480 --> 00:30:05,460
right so for example in here where we

702
00:30:03,028 --> 00:30:07,679
set the file date what we could do is

703
00:30:05,460 --> 00:30:10,889
say well instead of doing that before

704
00:30:07,679 --> 00:30:13,380
maybe we do it after and we only do it

705
00:30:10,888 --> 00:30:22,288
if there were no errors so basically if

706
00:30:13,380 --> 00:30:24,960
the file in question if the file in

707
00:30:22,288 --> 00:30:31,519
question doesn't have any errors on it

708
00:30:24,960 --> 00:30:31,519
when we when we iterate over it then

709
00:30:31,548 --> 00:30:35,849
then we consider it updated if it does

710
00:30:34,230 --> 00:30:40,099
have errors we consider it non updated

711
00:30:35,849 --> 00:30:40,099
so the next time it'll try again right

712
00:30:42,259 --> 00:30:48,169
there's reasons to and not do to do that

713
00:30:49,190 --> 00:31:00,149
let me update that slightly since there

714
00:30:57,538 --> 00:31:04,919
are in since these errors are internal

715
00:31:00,148 --> 00:31:11,099
errors we may just want to detect those

716
00:31:04,919 --> 00:31:16,559
specifically so what we would want to do

717
00:31:11,099 --> 00:31:19,069
here is say that the match that we got

718
00:31:16,558 --> 00:31:19,069
right

719
00:31:20,569 --> 00:31:24,200
you'd probably want to do something like

720
00:31:22,920 --> 00:31:28,620
that

721
00:31:24,200 --> 00:31:29,789
I'm guessing it's hard to say if we had

722
00:31:28,619 --> 00:31:33,899
a lot of these I'm trying to think do we

723
00:31:29,789 --> 00:31:37,470
have any others of these that's really

724
00:31:33,900 --> 00:31:40,830
the only one all right I'm not gonna do

725
00:31:37,470 --> 00:31:42,450
it I'm not gonna do it if we had a lot

726
00:31:40,829 --> 00:31:49,519
of ways we could internal error I might

727
00:31:42,450 --> 00:31:49,519
but we really don't so it's fine

728
00:31:49,559 --> 00:32:04,769
another thing we should do is probably

729
00:31:50,670 --> 00:32:06,480
clear this yeah I'm saying we don't

730
00:32:04,769 --> 00:32:09,660
really have any way to clear a stream

731
00:32:06,480 --> 00:32:15,569
right now and so if we want to reset it

732
00:32:09,660 --> 00:32:23,160
I guess I'll maybe call this reset so

733
00:32:15,569 --> 00:32:25,429
before we process anything we would say

734
00:32:23,160 --> 00:32:25,430
all right

735
00:32:26,059 --> 00:32:39,649
reset reset the error stream here that

736
00:32:37,049 --> 00:32:39,649
seemed reasonable

737
00:32:46,289 --> 00:32:49,548
trying to think of that like that

738
00:33:06,450 --> 00:33:13,269
take it back I don't so I think what I

739
00:33:11,650 --> 00:33:17,500
would rather do is just have a way to

740
00:33:13,269 --> 00:33:20,740
put stuff in there right so what I think

741
00:33:17,500 --> 00:33:22,779
I'd rather do is actually just have the

742
00:33:20,740 --> 00:33:29,890
status be in there so when it goes to

743
00:33:22,779 --> 00:33:31,839
read this thing I think I'd rather just

744
00:33:29,890 --> 00:33:33,400
put in a like a marker and maybe we

745
00:33:31,839 --> 00:33:34,689
would have some way in the future of

746
00:33:33,400 --> 00:33:50,680
being a little bit more specific about

747
00:33:34,690 --> 00:33:52,980
the fact that this was a break you know

748
00:33:50,680 --> 00:33:59,620
something like that so I don't know

749
00:33:52,980 --> 00:34:02,620
exactly how that should go I'm like kind

750
00:33:59,619 --> 00:34:04,299
of vast letting on it but like basically

751
00:34:02,619 --> 00:34:06,309
like we want something that breaks it up

752
00:34:04,299 --> 00:34:09,250
so we could see older errors I'm just

753
00:34:06,309 --> 00:34:11,500
gonna keep them cuz why not so really

754
00:34:09,250 --> 00:34:13,840
when we import I'll just I just want a

755
00:34:11,500 --> 00:34:19,989
thing that shows me where the last you

756
00:34:13,840 --> 00:34:24,400
know the most recent import began so I

757
00:34:19,989 --> 00:34:29,349
know what I know when we you know sort

758
00:34:24,400 --> 00:34:30,789
of had previous ones and I won't think

759
00:34:29,349 --> 00:34:34,960
that those errors are part of the

760
00:34:30,789 --> 00:34:36,579
current import so I don't know something

761
00:34:34,960 --> 00:34:37,900
like that I haven't really decided how I

762
00:34:36,579 --> 00:34:40,000
want to do that I feel also haven't

763
00:34:37,900 --> 00:34:41,889
decided whether I wanted to / this this

764
00:34:40,000 --> 00:34:43,360
memory this Airstream I don't still

765
00:34:41,889 --> 00:34:46,389
don't know whether I maybe want it just

766
00:34:43,360 --> 00:34:51,070
one error stream that's for the whole

767
00:34:46,389 --> 00:34:53,259
system so all of that's a little bit up

768
00:34:51,070 --> 00:34:58,750
in the air right now but that's the

769
00:34:53,260 --> 00:35:01,830
current situation all right so what's

770
00:34:58,750 --> 00:35:01,829
the problem

771
00:35:04,719 --> 00:35:29,108
ah so okay anyway moving on this like I

772
00:35:27,789 --> 00:35:33,369
said is a pretty simple function to

773
00:35:29,108 --> 00:35:35,230
implement so it has been these are

774
00:35:33,369 --> 00:35:37,539
slightly more complicated the reserved

775
00:35:35,230 --> 00:35:39,130
data part I'm gonna skip that one

776
00:35:37,539 --> 00:35:40,809
because that's the one that's a that's a

777
00:35:39,130 --> 00:35:41,800
little bit Squinkie we'll look at that

778
00:35:40,809 --> 00:35:44,139
in a second

779
00:35:41,800 --> 00:35:47,140
but for right asset data and right asset

780
00:35:44,139 --> 00:35:51,730
these are not probably very complicated

781
00:35:47,139 --> 00:35:55,118
by comparison the the main problem that

782
00:35:51,730 --> 00:35:57,820
we're going to find is that we have to

783
00:35:55,119 --> 00:35:59,320
worry about the headers and where those

784
00:35:57,820 --> 00:36:01,330
headers are so again we may have to

785
00:35:59,320 --> 00:36:02,859
reorganize our files a little bit or

786
00:36:01,329 --> 00:36:07,690
allow sort of a slightly different file

787
00:36:02,858 --> 00:36:09,338
format or something like this okay so as

788
00:36:07,690 --> 00:36:11,108
far as writing asset data is concerned

789
00:36:09,338 --> 00:36:14,079
this is pretty straightforward because

790
00:36:11,108 --> 00:36:17,079
we already know where we're gonna write

791
00:36:14,079 --> 00:36:19,539
the data so the complexity is gonna come

792
00:36:17,079 --> 00:36:22,119
in here where we have to actually figure

793
00:36:19,539 --> 00:36:25,420
out where the data for this asset should

794
00:36:22,119 --> 00:36:27,309
go so write an asset data itself is

795
00:36:25,420 --> 00:36:29,500
really just going to be as simple as

796
00:36:27,309 --> 00:36:37,929
using the file handle that we already

797
00:36:29,500 --> 00:36:40,659
have in you know stored in our there we

798
00:36:37,929 --> 00:36:43,000
go that we already have stored in our

799
00:36:40,659 --> 00:36:45,429
asset file structure so this platform

800
00:36:43,000 --> 00:36:50,559
file handle here all we really need to

801
00:36:45,429 --> 00:36:53,500
do is take that asset file platform

802
00:36:50,559 --> 00:36:56,170
handle there and when we do are our

803
00:36:53,500 --> 00:36:58,619
right it's not called write files it's

804
00:36:56,170 --> 00:36:58,619
called

805
00:37:03,960 --> 00:37:16,230
there it goes

806
00:37:05,500 --> 00:37:16,230
oh we don't have one we do now

807
00:37:17,670 --> 00:37:22,059
so really all we're gonna do here is

808
00:37:19,750 --> 00:37:26,679
just call whatever the right function is

809
00:37:22,059 --> 00:37:29,349
and that function is gonna be an exact

810
00:37:26,679 --> 00:37:31,259
mirror of the read function so it's just

811
00:37:29,349 --> 00:37:34,108
gonna take where you wanted to put it

812
00:37:31,260 --> 00:37:36,550
how big it was and what it was and

813
00:37:34,108 --> 00:37:40,119
literally that's like all we're gonna do

814
00:37:36,550 --> 00:37:41,730
right we we don't have anything else we

815
00:37:40,119 --> 00:37:46,990
need to do there that's it's that simple

816
00:37:41,730 --> 00:37:49,539
and the same is more or less true for

817
00:37:46,989 --> 00:37:52,479
right asset but like I said because the

818
00:37:49,539 --> 00:37:54,869
assets have to get expanded this is

819
00:37:52,480 --> 00:37:58,480
going to be a little bit trickier for

820
00:37:54,869 --> 00:38:04,059
what we're doing the reason so a little

821
00:37:58,480 --> 00:38:05,440
bit trickier is because the like if you

822
00:38:04,059 --> 00:38:10,329
take a look at how we've got these

823
00:38:05,440 --> 00:38:13,869
things stored in file formats so you can

824
00:38:10,329 --> 00:38:17,019
see here the way that we've got our

825
00:38:13,869 --> 00:38:19,269
stuff stored is that we have an offset

826
00:38:17,019 --> 00:38:22,509
to an assets array and we've got an

827
00:38:19,269 --> 00:38:25,030
asset type and tags these two things

828
00:38:22,510 --> 00:38:27,240
here you can see what those actually are

829
00:38:25,030 --> 00:38:29,740
so the asset type count

830
00:38:27,239 --> 00:38:35,618
let's go scroll through these things

831
00:38:29,739 --> 00:38:39,789
here here it is so you can see sort of

832
00:38:35,619 --> 00:38:42,990
the way these things work and to a

833
00:38:39,789 --> 00:38:42,989
certain extent

834
00:38:43,260 --> 00:38:49,960
again I think reorganizing these files

835
00:38:47,590 --> 00:38:52,840
is going to make a lot of sense for us

836
00:38:49,960 --> 00:38:54,670
right because we can do a lot better

837
00:38:52,840 --> 00:38:58,059
than what we did here now that we know

838
00:38:54,670 --> 00:39:03,220
what we're sort of storing but the HHA

839
00:38:58,059 --> 00:39:05,889
asset type itself this part here is what

840
00:39:03,219 --> 00:39:07,509
will cause us the problems so assets we

841
00:39:05,889 --> 00:39:11,500
can already just locate at the end of

842
00:39:07,510 --> 00:39:14,840
the file and grow so we can put more

843
00:39:11,500 --> 00:39:19,010
assets on there and that's no big deal

844
00:39:14,840 --> 00:39:21,980
but the asset types we will have a

845
00:39:19,010 --> 00:39:23,660
problem organizing the assets inside

846
00:39:21,980 --> 00:39:26,090
that asks irate if they have to be

847
00:39:23,659 --> 00:39:27,649
contiguous all of the assets of a

848
00:39:26,090 --> 00:39:29,990
particular type have to be written out

849
00:39:27,650 --> 00:39:40,490
contiguously for the asset type thing to

850
00:39:29,989 --> 00:39:44,599
work right so there's a lot of different

851
00:39:40,489 --> 00:39:48,019
ways we could attack this problem and

852
00:39:44,599 --> 00:39:51,319
I'm not sure exactly which way we want

853
00:39:48,019 --> 00:39:54,829
to do it and so we'll kind of go through

854
00:39:51,320 --> 00:39:57,080
it slowly but regardless of what we

855
00:39:54,829 --> 00:39:59,449
choose what we're going to have to be

856
00:39:57,079 --> 00:40:04,549
able to determine is when we want to

857
00:39:59,449 --> 00:40:06,859
update the information about an asset in

858
00:40:04,550 --> 00:40:11,000
a file we're going to have to figure out

859
00:40:06,860 --> 00:40:14,900
which file that asset is in right and so

860
00:40:11,000 --> 00:40:17,179
what we did conveniently is inside the

861
00:40:14,900 --> 00:40:22,730
asset system itself when we're actually

862
00:40:17,179 --> 00:40:25,190
talking about a particular asset where

863
00:40:22,730 --> 00:40:27,740
is it here right when we're actually

864
00:40:25,190 --> 00:40:30,800
talking about asset we remembered what

865
00:40:27,739 --> 00:40:34,279
filed that asset was in right we know

866
00:40:30,800 --> 00:40:35,960
that piece of information and

867
00:40:34,280 --> 00:40:38,360
furthermore we're going to store the

868
00:40:35,960 --> 00:40:41,990
asset index in the file as a separate

869
00:40:38,360 --> 00:40:45,820
piece of information which again is sort

870
00:40:41,989 --> 00:40:48,229
of it's because we have this need to

871
00:40:45,820 --> 00:40:50,590
relocate where in the file it actually

872
00:40:48,230 --> 00:40:53,599
was right now we're actually not

873
00:40:50,590 --> 00:40:56,539
tracking that we should probably put

874
00:40:53,599 --> 00:40:59,650
that in before we forget I guess so you

875
00:40:56,539 --> 00:40:59,650
can see it happening here

876
00:41:04,199 --> 00:41:10,118
so if we wanted to keep this piece of

877
00:41:06,608 --> 00:41:12,190
information we definitely could what's

878
00:41:10,119 --> 00:41:14,019
going to happen here is the file index

879
00:41:12,190 --> 00:41:16,989
that we're dealing with here

880
00:41:14,018 --> 00:41:21,008
right is coming in because we're looping

881
00:41:16,989 --> 00:41:23,789
over the files individually when we are

882
00:41:21,009 --> 00:41:30,369
looking at which asset index this is

883
00:41:23,789 --> 00:41:33,940
globally speaking it's going to be it's

884
00:41:30,369 --> 00:41:37,479
going to be this asset count here - the

885
00:41:33,940 --> 00:41:41,229
base asset count a basic - the base

886
00:41:37,478 --> 00:41:44,139
access index for this file so you can

887
00:41:41,228 --> 00:41:48,278
see here where you know we're loading a

888
00:41:44,139 --> 00:41:50,739
particular file when we start here we

889
00:41:48,278 --> 00:41:53,559
sort of need to understand what asset

890
00:41:50,739 --> 00:41:57,608
we're on separate from the global asset

891
00:41:53,559 --> 00:41:59,680
index right and yeah I mean I don't know

892
00:41:57,608 --> 00:42:01,179
how we want to store that exactly the

893
00:41:59,679 --> 00:42:11,048
easiest way is probably just to go like

894
00:42:01,179 --> 00:42:13,259
this right so then in here we can just

895
00:42:11,048 --> 00:42:13,259
say

896
00:42:21,929 --> 00:42:34,690
like that so we can pretty easily keep

897
00:42:31,509 --> 00:42:38,829
track of which asset index this was in a

898
00:42:34,690 --> 00:42:40,749
particular file but again that's not

899
00:42:38,829 --> 00:42:42,369
really probably how we want to store

900
00:42:40,748 --> 00:42:45,159
these now that they're being updated so

901
00:42:42,369 --> 00:42:47,528
I'm guessing that this table will

902
00:42:45,159 --> 00:42:48,818
actually will change the way that we're

903
00:42:47,528 --> 00:42:50,199
storing it right

904
00:42:48,818 --> 00:42:56,949
we won't store it the way that it's

905
00:42:50,199 --> 00:42:58,389
being stored at the moment okay sue yep

906
00:42:56,949 --> 00:43:02,078
we've got a lot of different ways we can

907
00:42:58,389 --> 00:43:03,940
do this so here's another proposal right

908
00:43:02,079 --> 00:43:05,528
asset data again I think and reserve

909
00:43:03,940 --> 00:43:07,298
data are pretty straightforward because

910
00:43:05,528 --> 00:43:08,858
I think they can just tack on to the end

911
00:43:07,298 --> 00:43:12,728
of any particular file it doesn't really

912
00:43:08,858 --> 00:43:13,748
matter so I'm not too worried about this

913
00:43:12,728 --> 00:43:15,399
function we'll talk about that a second

914
00:43:13,748 --> 00:43:16,689
so it's really just this function that's

915
00:43:15,400 --> 00:43:18,430
the problem and the reason that's that

916
00:43:16,690 --> 00:43:25,858
this function is the problem is because

917
00:43:18,429 --> 00:43:28,478
we have this situation where again the

918
00:43:25,858 --> 00:43:31,150
the weight the ways in which we might

919
00:43:28,478 --> 00:43:33,068
want to store that permanent storage for

920
00:43:31,150 --> 00:43:36,068
looking at Bassets and stuff it just

921
00:43:33,068 --> 00:43:38,190
isn't conducive to insertion it would

922
00:43:36,068 --> 00:43:40,179
require us to rewrite a bunch of stuff

923
00:43:38,190 --> 00:43:43,960
there are two ways we can go about

924
00:43:40,179 --> 00:43:46,838
solving this problem and I'm probably

925
00:43:43,960 --> 00:43:50,369
going to choose the following one

926
00:43:46,838 --> 00:43:52,808
because I think it's just easier

927
00:43:50,369 --> 00:43:55,059
we know that asset importing doesn't

928
00:43:52,809 --> 00:43:57,940
happen very frequently right meaning it

929
00:43:55,059 --> 00:43:59,880
happens every time an artist changes a

930
00:43:57,940 --> 00:44:04,630
bitmap file but that's it

931
00:43:59,880 --> 00:44:06,670
so what we could elect to do is change

932
00:44:04,630 --> 00:44:09,640
the way that we're currently thinking

933
00:44:06,670 --> 00:44:16,119
about our asset files so take a look at

934
00:44:09,639 --> 00:44:21,159
what we do right now if we look we've

935
00:44:16,119 --> 00:44:21,579
got three HHA files right and those get

936
00:44:21,159 --> 00:44:23,379
loaded

937
00:44:21,579 --> 00:44:25,568
oh and test fonts I think gets loaded

938
00:44:23,380 --> 00:44:28,690
too right okay so we've actually got

939
00:44:25,568 --> 00:44:32,380
like three we got five different HHA

940
00:44:28,690 --> 00:44:32,829
files get loaded right each of those

941
00:44:32,380 --> 00:44:37,180
files

942
00:44:32,829 --> 00:44:39,910
contains bitmap and sound data and also

943
00:44:37,179 --> 00:44:41,409
then contains the structure information

944
00:44:39,909 --> 00:44:45,940
necessary to reference those bitmaps

945
00:44:41,409 --> 00:44:51,969
sound data right what we could do is

946
00:44:45,940 --> 00:44:55,509
change the meaning or change the way

947
00:44:51,969 --> 00:44:58,298
that those hhas work such that we have

948
00:44:55,509 --> 00:45:02,559
the ability to reference data in other

949
00:44:58,298 --> 00:45:04,478
files from a given file what that would

950
00:45:02,559 --> 00:45:10,380
allow us to do is just rewrite the

951
00:45:04,478 --> 00:45:10,379
complete asset header every time right

952
00:45:20,030 --> 00:45:27,070
I again I'm not sure that that's the

953
00:45:24,590 --> 00:45:27,070
best option

954
00:45:33,250 --> 00:45:38,650
let us definitely an option another way

955
00:45:35,858 --> 00:45:40,358
we could do it is just to make it so

956
00:45:38,650 --> 00:45:43,900
that we rewrite the header every time

957
00:45:40,358 --> 00:45:46,329
for the current four like we take one

958
00:45:43,900 --> 00:45:50,500
file and we say okay here's the file

959
00:45:46,329 --> 00:45:52,630
that you're editing and whatever file

960
00:45:50,500 --> 00:45:53,858
you're editing that's the one that gets

961
00:45:52,630 --> 00:45:58,329
rewritten but it gets its header

962
00:45:53,858 --> 00:46:01,929
rewritten every time in which case this

963
00:45:58,329 --> 00:46:16,358
would not actually be the function the

964
00:46:01,929 --> 00:46:23,129
function would be like that that seems

965
00:46:16,358 --> 00:46:23,130
pretty reasonable I would say

966
00:46:55,219 --> 00:46:59,338
sooo my guess here's what I'll say I

967
00:46:57,659 --> 00:47:03,509
think that I think I like that the best

968
00:46:59,338 --> 00:47:04,619
so here's what I'm gonna propose I would

969
00:47:03,510 --> 00:47:07,520
approach we don't actually modify

970
00:47:04,619 --> 00:47:12,059
anything we just leave exactly it is

971
00:47:07,519 --> 00:47:13,259
what we do is well like I said I still

972
00:47:12,059 --> 00:47:14,730
might want to modify the way the tags

973
00:47:13,260 --> 00:47:17,880
work so that but that's separate

974
00:47:14,730 --> 00:47:20,130
discussion doesn't involve this what I'm

975
00:47:17,880 --> 00:47:23,250
gonna do is I'm just gonna rewrite the

976
00:47:20,130 --> 00:47:26,039
entire header so every time we rewrite a

977
00:47:23,250 --> 00:47:31,338
file we just rewrite the header of the

978
00:47:26,039 --> 00:47:31,338
file and and off we go

979
00:47:31,849 --> 00:47:38,390
the thing that I don't super love is I

980
00:47:39,710 --> 00:47:44,099
feel like maybe there's one thing that

981
00:47:42,809 --> 00:47:45,569
we should change because doesn't make a

982
00:47:44,099 --> 00:47:48,359
lot of sense and we don't really need it

983
00:47:45,568 --> 00:47:50,909
to be this way since we load the whole

984
00:47:48,358 --> 00:47:52,529
asset array every time it seems like it

985
00:47:50,909 --> 00:47:55,289
would make more sense rather than having

986
00:47:52,530 --> 00:47:57,660
the asset types range stuff in here to

987
00:47:55,289 --> 00:48:03,329
just have it so that every asset itself

988
00:47:57,659 --> 00:48:05,399
stores which type it is just seems

989
00:48:03,329 --> 00:48:07,740
smarter because we we loop through them

990
00:48:05,400 --> 00:48:10,470
when we do the merge it made sense when

991
00:48:07,739 --> 00:48:12,568
we didn't do a merge now we do emerge it

992
00:48:10,469 --> 00:48:14,338
just seems like that smarter right

993
00:48:12,568 --> 00:48:19,619
because if you're gonna do a merge

994
00:48:14,338 --> 00:48:23,119
anyway you might as well just store that

995
00:48:19,619 --> 00:48:23,119
information directly right

996
00:48:53,929 --> 00:49:00,690
yeah so I think that's the one change

997
00:48:56,940 --> 00:49:02,280
that I would propose now there's a

998
00:49:00,690 --> 00:49:11,400
couple of different ways we could do

999
00:49:02,280 --> 00:49:13,109
that we can actually do that without

1000
00:49:11,400 --> 00:49:14,730
changing this file format really if we

1001
00:49:13,108 --> 00:49:16,559
wanted to by just making the asset types

1002
00:49:14,730 --> 00:49:22,139
array have as many entries in it as the

1003
00:49:16,559 --> 00:49:25,460
assets itself let me take a look at how

1004
00:49:22,139 --> 00:49:25,460
our merge works at the moment

1005
00:49:41,920 --> 00:49:48,159
yeah I mean that just seems a lot saner

1006
00:49:44,710 --> 00:49:50,369
to me I think that makes a lot more

1007
00:49:48,159 --> 00:49:50,369
sense

1008
00:49:56,110 --> 00:50:01,579
so I'm gonna propose that we make that

1009
00:49:58,699 --> 00:50:03,439
change let me do a little let me just do

1010
00:50:01,579 --> 00:50:06,380
a little bit of fancy footwork here and

1011
00:50:03,440 --> 00:50:09,829
then we'll go do that so I think we can

1012
00:50:06,380 --> 00:50:12,260
do that without much effort actually all

1013
00:50:09,829 --> 00:50:14,449
right so let me go ahead and and change

1014
00:50:12,260 --> 00:50:15,830
the the platform right datafile part

1015
00:50:14,449 --> 00:50:18,469
here because we didn't have one of those

1016
00:50:15,829 --> 00:50:26,750
so here's read data from file here's

1017
00:50:18,469 --> 00:50:31,789
right did if to file and again it's like

1018
00:50:26,750 --> 00:50:33,500
exactly the same write read and write is

1019
00:50:31,789 --> 00:50:34,940
basically identical sometimes you

1020
00:50:33,500 --> 00:50:37,610
implement these by just having a flag

1021
00:50:34,940 --> 00:50:38,990
which says which one you're doing in

1022
00:50:37,610 --> 00:50:42,530
this case we'll just have another call

1023
00:50:38,989 --> 00:50:45,379
back into the platform layer but that's

1024
00:50:42,530 --> 00:50:49,640
the idea in the win32 side again it's

1025
00:50:45,380 --> 00:50:55,130
gonna be frightening simple so read data

1026
00:50:49,639 --> 00:51:03,049
from file if you take a look at that

1027
00:50:55,130 --> 00:51:10,970
function it looks like we support 64-bit

1028
00:51:03,050 --> 00:51:12,890
reads so yeah so here's a 64 oops a bit

1029
00:51:10,969 --> 00:51:15,230
right data I guess as well we could do

1030
00:51:12,889 --> 00:51:17,119
the same thing and again what you can

1031
00:51:15,230 --> 00:51:18,679
see here is it's really just we would if

1032
00:51:17,119 --> 00:51:20,980
we just call write file instead of read

1033
00:51:18,679 --> 00:51:27,469
file it should be basically the same

1034
00:51:20,980 --> 00:51:29,780
right it should be basically the same so

1035
00:51:27,469 --> 00:51:33,949
this is just by its written now instead

1036
00:51:29,780 --> 00:51:36,080
of bytes read and instead of us dest we

1037
00:51:33,949 --> 00:51:42,829
have a source but other than that it'll

1038
00:51:36,079 --> 00:51:48,579
be exactly the same that's really all

1039
00:51:42,829 --> 00:51:48,579
there is to it there we go

1040
00:51:50,690 --> 00:51:58,159
why that's called source should be

1041
00:51:54,000 --> 00:51:58,159
called handle okay

1042
00:51:58,219 --> 00:52:10,558
platform right data to file correct oops

1043
00:52:05,519 --> 00:52:15,298
no wait there we go

1044
00:52:10,559 --> 00:52:18,440
and in the win32 layer this should be

1045
00:52:15,298 --> 00:52:18,440
handle here

1046
00:52:31,269 --> 00:52:34,579
[Music]

1047
00:52:40,659 --> 00:52:45,940
that looks better okay

1048
00:52:50,110 --> 00:52:59,000
not sure why

1049
00:52:52,760 --> 00:53:01,100
oh because this is right data that

1050
00:52:59,000 --> 00:53:03,139
should do it so now we have a platform

1051
00:53:01,099 --> 00:53:07,610
right it's exactly the same as the read

1052
00:53:03,139 --> 00:53:17,829
so no real big difference there we let's

1053
00:53:07,610 --> 00:53:17,829
see cannot convert that from file handle

1054
00:53:17,860 --> 00:53:23,780
so I guess we just need the address of

1055
00:53:20,000 --> 00:53:25,969
it better than that we're fine yeah so

1056
00:53:23,780 --> 00:53:27,800
writing asset data is pretty

1057
00:53:25,969 --> 00:53:29,480
straightforward now reserving asset data

1058
00:53:27,800 --> 00:53:30,769
will also be pretty straightforward and

1059
00:53:29,480 --> 00:53:32,179
rewriting the header should be pretty

1060
00:53:30,769 --> 00:53:35,119
straightforward too so a lot of this

1061
00:53:32,179 --> 00:53:37,609
stuff is now going to be a lot simpler

1062
00:53:35,119 --> 00:53:40,909
but right asset is now no longer what

1063
00:53:37,610 --> 00:53:43,610
would happen in fact we now no longer

1064
00:53:40,909 --> 00:53:44,659
have to do that at the end of each thing

1065
00:53:43,610 --> 00:53:47,780
instead of what we're going to do is

1066
00:53:44,659 --> 00:53:49,789
after the entire thing happened it's

1067
00:53:47,780 --> 00:53:51,350
it's right here right so after

1068
00:53:49,789 --> 00:53:54,380
everything happens then what we're gonna

1069
00:53:51,349 --> 00:53:58,339
want to do is only right here actually

1070
00:53:54,380 --> 00:54:03,650
do the the right of the file so right in

1071
00:53:58,340 --> 00:54:09,530
here we need a you know right HHA header

1072
00:54:03,650 --> 00:54:12,079
or rewrite right so we're gonna have to

1073
00:54:09,530 --> 00:54:13,760
work on that in a second but that's

1074
00:54:12,079 --> 00:54:16,009
basically all I think we would need to

1075
00:54:13,760 --> 00:54:18,940
do assuming that we make a little bit of

1076
00:54:16,010 --> 00:54:22,700
a change to how we're conceptualizing

1077
00:54:18,940 --> 00:54:25,940
and this goes away now how we're

1078
00:54:22,699 --> 00:54:28,829
conceptualizing that asset import so

1079
00:54:25,940 --> 00:54:30,550
what I want to do from the moment

1080
00:54:28,829 --> 00:54:33,500
[Music]

1081
00:54:30,550 --> 00:54:35,840
well I'll comment this out I want to run

1082
00:54:33,500 --> 00:54:37,309
the game and make sure it's fine and

1083
00:54:35,840 --> 00:54:39,289
then what I want to do is make a slight

1084
00:54:37,309 --> 00:54:41,000
change to how we're storing those pieces

1085
00:54:39,289 --> 00:54:42,529
of information and I'll do it in a way

1086
00:54:41,000 --> 00:54:44,260
that still reads the old files because

1087
00:54:42,530 --> 00:54:48,230
it's I don't think it's very hard for

1088
00:54:44,260 --> 00:54:52,190
that's good I was working on some old

1089
00:54:48,230 --> 00:54:55,429
witness walk map stuff I don't think we

1090
00:54:52,190 --> 00:55:00,099
want to run that or maybe we do that's

1091
00:54:55,429 --> 00:55:02,480
probably something we could run I guess

1092
00:55:00,099 --> 00:55:03,049
spoiler warning I'm going to be giving a

1093
00:55:02,480 --> 00:55:07,309
talk on

1094
00:55:03,050 --> 00:55:14,090
the witnesses walk manifold stuff that I

1095
00:55:07,309 --> 00:55:16,429
did and so I wanted to also make some

1096
00:55:14,090 --> 00:55:19,070
changes that I never got a chance to

1097
00:55:16,429 --> 00:55:22,519
make during the actual development so I

1098
00:55:19,070 --> 00:55:24,740
I was playing around with it again

1099
00:55:22,519 --> 00:55:29,690
so anyway what I want to do is make sure

1100
00:55:24,739 --> 00:55:33,709
I can reload the I want to make sure I

1101
00:55:29,690 --> 00:55:36,860
can reload the game and have all the HHA

1102
00:55:33,710 --> 00:55:42,470
still work and so what I want to do here

1103
00:55:36,860 --> 00:55:43,970
is look at that file format oops what I

1104
00:55:42,469 --> 00:55:46,759
want to do here is look at the file

1105
00:55:43,969 --> 00:55:48,769
format and see how I can send it to do

1106
00:55:46,760 --> 00:55:51,110
the thing that I wanted it to do so

1107
00:55:48,769 --> 00:55:54,079
right now the problem that I have with

1108
00:55:51,110 --> 00:56:00,019
the file format right is that this stuff

1109
00:55:54,079 --> 00:56:05,210
is it's it's very confusing right to see

1110
00:56:00,019 --> 00:56:10,340
how the asset types and the assets are

1111
00:56:05,210 --> 00:56:13,429
lined up right you have to read the

1112
00:56:10,340 --> 00:56:18,260
asset array then read the asset types

1113
00:56:13,429 --> 00:56:21,739
array and use the contiguous regions of

1114
00:56:18,260 --> 00:56:23,810
assets to to get their types what I

1115
00:56:21,739 --> 00:56:26,329
would rather be able to do is just have

1116
00:56:23,809 --> 00:56:29,960
every asset have its type included in it

1117
00:56:26,329 --> 00:56:32,809
right now that is not necessarily

1118
00:56:29,960 --> 00:56:36,860
directly possible without changing the

1119
00:56:32,809 --> 00:56:40,219
file format a little bit because the

1120
00:56:36,860 --> 00:56:41,960
assets currently don't store a type in

1121
00:56:40,219 --> 00:56:46,549
that way so if you take a look at what

1122
00:56:41,960 --> 00:56:49,909
an HHH s HH a asset has in it it doesn't

1123
00:56:46,550 --> 00:56:51,289
have a type so it may seem like there

1124
00:56:49,909 --> 00:56:53,179
isn't room to put that in there and we'd

1125
00:56:51,289 --> 00:56:57,170
have to expand the data set for the file

1126
00:56:53,179 --> 00:56:58,339
format right but I would argue what we

1127
00:56:57,170 --> 00:56:59,990
don't really have to do that because

1128
00:56:58,340 --> 00:57:02,990
what we can do instead is have this

1129
00:56:59,989 --> 00:57:05,569
asset types array here we can just

1130
00:57:02,989 --> 00:57:08,839
change the meaning of the asset types

1131
00:57:05,570 --> 00:57:11,809
array to actually have the same number

1132
00:57:08,840 --> 00:57:16,730
as assets and tell us what the type of

1133
00:57:11,809 --> 00:57:20,779
each asset is right

1134
00:57:16,730 --> 00:57:23,539
that just works so what we can do

1135
00:57:20,780 --> 00:57:27,920
although it's a little bit piggy is we

1136
00:57:23,539 --> 00:57:30,579
can actually just output this array in a

1137
00:57:27,920 --> 00:57:30,579
different way

1138
00:57:33,039 --> 00:57:41,659
in fact I guess we can just I mean

1139
00:57:40,369 --> 00:57:43,670
correct me if I'm wrong but we can

1140
00:57:41,659 --> 00:57:45,529
literally just output one of these for

1141
00:57:43,670 --> 00:57:47,570
every asset that just has first asset

1142
00:57:45,530 --> 00:57:49,880
index the asset index one past last that

1143
00:57:47,570 --> 00:57:56,480
index the first s is plus one with the

1144
00:57:49,880 --> 00:57:59,269
type so we can then optimize an HHA

1145
00:57:56,480 --> 00:58:02,329
header for loading by sorting all the

1146
00:57:59,269 --> 00:58:07,219
assets by their type ID but we don't

1147
00:58:02,329 --> 00:58:10,869
have to so now that I think about it we

1148
00:58:07,219 --> 00:58:10,869
actually don't have to do anything I

1149
00:58:14,050 --> 00:58:23,660
think that just works so let's take a

1150
00:58:17,269 --> 00:58:27,409
look in memory here I think this is

1151
00:58:23,659 --> 00:58:33,799
actually just gonna just work in memory

1152
00:58:27,409 --> 00:58:35,779
we don't do that anymore do we we do so

1153
00:58:33,800 --> 00:58:37,310
we do here right so really the only

1154
00:58:35,780 --> 00:58:40,220
thing is gonna have to happen it changes

1155
00:58:37,309 --> 00:58:41,570
this part here because this part won't

1156
00:58:40,219 --> 00:58:43,879
quite work anymore because the assets

1157
00:58:41,570 --> 00:58:45,140
won't be compact in that way so let's

1158
00:58:43,880 --> 00:58:46,579
just take a look at that part I think

1159
00:58:45,139 --> 00:58:49,219
that's really all we're gonna have to

1160
00:58:46,579 --> 00:58:50,929
modify so when you when we do get get

1161
00:58:49,219 --> 00:58:55,639
best match asset from you can see what

1162
00:58:50,929 --> 00:59:01,099
it does is it's gonna look through the

1163
00:58:55,639 --> 00:59:03,230
asset types here I mean we could just

1164
00:59:01,099 --> 00:59:05,929
make that a chain right we could just

1165
00:59:03,230 --> 00:59:10,059
make that in a linked list or something

1166
00:59:05,929 --> 00:59:10,059
and we'd be done you know

1167
00:59:14,289 --> 00:59:19,279
and and that's exactly the part that

1168
00:59:17,630 --> 00:59:21,800
we're gonna want to upgrade with the

1169
00:59:19,280 --> 00:59:33,590
tags with the matching anyway

1170
00:59:21,800 --> 00:59:34,789
so it's like I feel like this part is

1171
00:59:33,590 --> 00:59:36,380
something that I don't really care about

1172
00:59:34,789 --> 00:59:42,309
right now it's gonna modify it anyway

1173
00:59:36,380 --> 00:59:42,309
but let's just say for sake of argument

1174
00:59:42,789 --> 00:59:47,320
that I changed it to something like this

1175
00:59:47,559 --> 00:59:55,159
just to maintain the current way that

1176
00:59:49,820 --> 00:59:58,070
things are working now in here what I

1177
00:59:55,159 --> 01:00:01,969
would do is say oh yeah you don't do

1178
00:59:58,070 --> 01:00:04,070
that right instead what you do is you

1179
01:00:01,969 --> 01:00:10,250
just kind of like loop over these things

1180
01:00:04,070 --> 01:00:15,830
and I was acid index work here yeah so

1181
01:00:10,250 --> 01:00:17,510
so all I really need to do is is chain

1182
01:00:15,829 --> 01:00:20,569
these assets together and of course I

1183
01:00:17,510 --> 01:00:24,830
would need to know as well for each

1184
01:00:20,570 --> 01:00:29,870
individual asset I need to know yeah

1185
01:00:24,829 --> 01:00:32,569
kind of like how what its asset index

1186
01:00:29,869 --> 01:00:34,489
was globally so you know this gets a

1187
01:00:32,570 --> 01:00:39,400
little piggy er here if I actually want

1188
01:00:34,489 --> 01:00:39,399
to keep that piece of information

1189
01:00:48,750 --> 01:00:52,250
so I think

1190
01:01:02,630 --> 01:01:13,099
I think what I may do is just do that

1191
01:01:07,960 --> 01:01:15,710
when we do asset types here I will say

1192
01:01:13,099 --> 01:01:20,710
okay the asset index is just assets

1193
01:01:15,710 --> 01:01:25,088
first asset of whatever oops

1194
01:01:20,710 --> 01:01:25,088
whatever the type is that you asked for

1195
01:01:29,139 --> 01:01:41,980
I could actually do this as well you

1196
01:01:38,289 --> 01:01:41,980
know what that's what I'll do

1197
01:01:45,909 --> 01:01:51,288
makes it even easier so for right now

1198
01:01:49,429 --> 01:01:54,768
what I'll say is all right so we've got

1199
01:01:51,289 --> 01:01:56,839
an asset index that asset index is going

1200
01:01:54,768 --> 01:02:00,288
to be the first asset for that type ID

1201
01:01:56,838 --> 01:02:03,078
right and it comes back and then when I

1202
01:02:00,289 --> 01:02:05,119
as I move through there and and this is

1203
01:02:03,079 --> 01:02:06,798
gonna have to be written sort of

1204
01:02:05,119 --> 01:02:11,470
slightly differently right it's going to

1205
01:02:06,798 --> 01:02:11,469
have to be written I guess like this

1206
01:02:23,849 --> 01:02:27,360
so what I'll do is I'll just say all

1207
01:02:25,980 --> 01:02:30,449
right we're gonna we'll chain through

1208
01:02:27,360 --> 01:02:33,500
these and look for assets of this

1209
01:02:30,449 --> 01:02:35,639
particular type as we walk through them

1210
01:02:33,500 --> 01:02:37,199
we'll do the standard tag match we're

1211
01:02:35,639 --> 01:02:39,389
doing before work and this whole routine

1212
01:02:37,199 --> 01:02:40,439
will probably just change but I just

1213
01:02:39,389 --> 01:02:43,650
want to maintain the current behavior

1214
01:02:40,440 --> 01:02:44,789
for now so we'll go through those and we

1215
01:02:43,650 --> 01:02:46,170
can look through them as a list so they

1216
01:02:44,789 --> 01:02:47,909
don't have to be contiguous anymore

1217
01:02:46,170 --> 01:02:49,500
inside the asset array which allows us

1218
01:02:47,909 --> 01:02:54,599
to update assets in a non contiguous

1219
01:02:49,500 --> 01:02:57,510
fashion and I think that's probably

1220
01:02:54,599 --> 01:03:06,869
sufficient so then instead of having to

1221
01:02:57,510 --> 01:03:09,150
build these arrays which you know what

1222
01:03:06,869 --> 01:03:14,880
are we talking about here what did I I

1223
01:03:09,150 --> 01:03:21,539
didn't yeah there we go change that to

1224
01:03:14,880 --> 01:03:32,309
that now what I'm going to do is say

1225
01:03:21,539 --> 01:03:34,349
okay let's yeah so this one's a little

1226
01:03:32,309 --> 01:03:36,269
bit harder because this this one for

1227
01:03:34,349 --> 01:03:39,239
doing random assets it still has to do a

1228
01:03:36,269 --> 01:03:48,380
walk through again not really the end of

1229
01:03:39,239 --> 01:03:48,379
the world do we use this

1230
01:03:58,179 --> 01:04:10,929
I'm just curious we do not

1231
01:04:12,059 --> 01:04:17,529
I'm a nerf that for now this one's

1232
01:04:15,699 --> 01:04:19,059
pretty straightforward because this one

1233
01:04:17,530 --> 01:04:33,790
is already it's already set up to do

1234
01:04:19,059 --> 01:04:42,820
that so this will just give us the

1235
01:04:33,789 --> 01:04:45,820
answer we want directly and so all we

1236
01:04:42,820 --> 01:04:47,670
really need to do now is this right so

1237
01:04:45,820 --> 01:04:54,039
we need to chain these things together

1238
01:04:47,670 --> 01:04:57,039
in some way so what we want to do is

1239
01:04:54,039 --> 01:05:08,380
when we get one of these asset types out

1240
01:04:57,039 --> 01:05:13,929
here what I want to do is just use this

1241
01:05:08,380 --> 01:05:17,130
as a chain so let me go ahead and look

1242
01:05:13,929 --> 01:05:17,129
at how this is currently happening

1243
01:05:17,190 --> 01:05:23,380
so basically we're loading all these

1244
01:05:19,900 --> 01:05:25,900
right and we yeah so every time we as we

1245
01:05:23,380 --> 01:05:28,180
load these in really all we're doing

1246
01:05:25,900 --> 01:05:30,880
here is as we load in all the assets we

1247
01:05:28,179 --> 01:05:33,819
just were putting them contiguous we no

1248
01:05:30,880 --> 01:05:39,940
longer have to do that so actually this

1249
01:05:33,820 --> 01:05:43,690
is not necessary to do this way anymore

1250
01:05:39,940 --> 01:05:48,010
really if we don't want to we can just

1251
01:05:43,690 --> 01:05:50,530
do that up here actually and so they're

1252
01:05:48,010 --> 01:05:53,290
really the only thing that we yeah like

1253
01:05:50,530 --> 01:05:58,120
this this actually storing them that way

1254
01:05:53,289 --> 01:05:59,739
would simplify this as well so like here

1255
01:05:58,119 --> 01:06:01,529
where we do where we loop through the

1256
01:05:59,739 --> 01:06:04,618
files

1257
01:06:01,530 --> 01:06:04,619
[Music]

1258
01:06:07,389 --> 01:06:14,059
we we could just do it right inside

1259
01:06:10,159 --> 01:06:18,889
inside that right we we don't need to do

1260
01:06:14,059 --> 01:06:21,440
this part again so we could really

1261
01:06:18,889 --> 01:06:25,929
simplify this loader as well I think

1262
01:06:21,440 --> 01:06:28,760
quite a bit if we wanted to a lot of

1263
01:06:25,929 --> 01:06:32,179
things we could improve here anyway so

1264
01:06:28,760 --> 01:06:34,280
going over the files this way which is

1265
01:06:32,179 --> 01:06:35,809
again dumb the only reason this is

1266
01:06:34,280 --> 01:06:39,260
structured this way is because we want

1267
01:06:35,809 --> 01:06:41,420
those we were trying to keep ranges

1268
01:06:39,260 --> 01:06:43,630
contiguous that's the only point to this

1269
01:06:41,420 --> 01:06:46,130
at all

1270
01:06:43,630 --> 01:06:49,760
otherwise you can flip these two right

1271
01:06:46,130 --> 01:06:52,460
and go by file in fact I'm just I'm just

1272
01:06:49,760 --> 01:06:57,890
gonna start let's go start so start

1273
01:06:52,460 --> 01:07:04,990
doing it so if we go through each file

1274
01:06:57,889 --> 01:07:04,989
here and then ignore this bit entirely

1275
01:07:10,349 --> 01:07:19,630
like so if we loop over the files and

1276
01:07:16,480 --> 01:07:22,510
then for each file we loop over the

1277
01:07:19,630 --> 01:07:26,170
source asset types and just get rid of

1278
01:07:22,510 --> 01:07:28,390
this interior match right this was an N

1279
01:07:26,170 --> 01:07:31,240
squared loop essentially that was doing

1280
01:07:28,389 --> 01:07:34,389
into an interior match just forget that

1281
01:07:31,239 --> 01:07:37,569
and instead now we can actually make

1282
01:07:34,389 --> 01:07:39,969
this routine more efficient because you

1283
01:07:37,570 --> 01:07:42,220
know because we're not creating packed

1284
01:07:39,969 --> 01:07:44,230
arrays which were more efficient to look

1285
01:07:42,219 --> 01:07:46,689
up in so you know it's it's a trade-off

1286
01:07:44,230 --> 01:07:49,480
but once you make that other trade-off

1287
01:07:46,690 --> 01:07:53,380
it's now free in here to just go through

1288
01:07:49,480 --> 01:07:56,079
the source asset types and now just

1289
01:07:53,380 --> 01:07:57,970
thread them directly so when we come

1290
01:07:56,079 --> 01:07:59,650
through here we don't need to track a

1291
01:07:57,969 --> 01:08:01,989
lot of the old stuff that we were

1292
01:07:59,650 --> 01:08:07,030
tracking before it's simply not

1293
01:08:01,989 --> 01:08:09,239
necessary anymore for that yeah I mean

1294
01:08:07,030 --> 01:08:11,410
off you go

1295
01:08:09,239 --> 01:08:15,759
so when we come through here we read out

1296
01:08:11,409 --> 01:08:20,409
the source index stuff here we go ahead

1297
01:08:15,760 --> 01:08:24,610
and produce the asset cap type we load

1298
01:08:20,409 --> 01:08:29,529
the array of assets we then loop through

1299
01:08:24,609 --> 01:08:32,380
each individual assets and we put the

1300
01:08:29,529 --> 01:08:35,529
tags in and so all we would have to do

1301
01:08:32,380 --> 01:08:38,260
here is when we produce the global asset

1302
01:08:35,529 --> 01:08:40,329
index we just need to thread it now so

1303
01:08:38,260 --> 01:08:43,449
if you look at the first asset of type

1304
01:08:40,329 --> 01:08:47,409
bit all we have to do is say ok the

1305
01:08:43,449 --> 01:08:52,479
asset it's next of type is going to be

1306
01:08:47,409 --> 01:08:56,079
whatever the first asset of type was for

1307
01:08:52,479 --> 01:09:02,699
that asset type which is whatever we

1308
01:08:56,079 --> 01:09:05,890
whatever it said it was up here right so

1309
01:09:02,699 --> 01:09:12,429
whatever it said that's what we grab and

1310
01:09:05,890 --> 01:09:14,770
then we set that one equal to us so

1311
01:09:12,430 --> 01:09:16,990
standard singly linked list right so now

1312
01:09:14,770 --> 01:09:19,450
we just have list an asset list that

1313
01:09:16,989 --> 01:09:21,599
allows us to sort of say ok that's you

1314
01:09:19,449 --> 01:09:21,599
know

1315
01:09:24,380 --> 01:09:31,469
that's the asset GI probably because

1316
01:09:29,399 --> 01:09:33,509
it's boiling hot and allergy season here

1317
01:09:31,469 --> 01:09:35,639
it's very although I shouldn't say

1318
01:09:33,509 --> 01:09:37,380
boiling hot because it's it's actually

1319
01:09:35,639 --> 01:09:39,960
not compared to other parts of the

1320
01:09:37,380 --> 01:09:41,969
country CL is actually apparently fairly

1321
01:09:39,960 --> 01:09:45,689
cool by comparison at least that's what

1322
01:09:41,969 --> 01:09:47,038
I'm told so now when we load those

1323
01:09:45,689 --> 01:09:48,419
things we have a different method of

1324
01:09:47,038 --> 01:09:50,038
storing them but what that means is now

1325
01:09:48,420 --> 01:09:50,908
they can be interleaved in any way we

1326
01:09:50,038 --> 01:09:52,318
want and they don't have to be

1327
01:09:50,908 --> 01:09:53,578
contiguous in the file and you're gonna

1328
01:09:52,319 --> 01:09:55,019
have different ones in the file if you

1329
01:09:53,578 --> 01:09:55,558
want to you and bla bla bla bla bla

1330
01:09:55,019 --> 01:09:57,090
right

1331
01:09:55,559 --> 01:10:00,059
the only thing that we do have to do is

1332
01:09:57,090 --> 01:10:04,590
make sure that our first are this thing

1333
01:10:00,059 --> 01:10:06,840
has to be zeroed right so the question

1334
01:10:04,590 --> 01:10:09,659
is is it zeroed and really that just

1335
01:10:06,840 --> 01:10:12,538
boils down to when we push bootstrap

1336
01:10:09,658 --> 01:10:16,078
this guy is it getting cleared or not

1337
01:10:12,538 --> 01:10:18,059
and I think it is right you can see in

1338
01:10:16,078 --> 01:10:19,558
the source file hash here we never clear

1339
01:10:18,059 --> 01:10:22,529
the source file hash so we're just

1340
01:10:19,559 --> 01:10:24,119
counting on that to be zeroed anyway so

1341
01:10:22,529 --> 01:10:27,149
the question is did I mess anything up

1342
01:10:24,118 --> 01:10:29,279
there probably the answer is yes and we

1343
01:10:27,149 --> 01:10:35,069
can see all right shockingly the answer

1344
01:10:29,279 --> 01:10:37,948
was no you know what are the odds still

1345
01:10:35,069 --> 01:10:39,960
everything works just fine um so anyway

1346
01:10:37,948 --> 01:10:42,238
that's all good everyone's fine with

1347
01:10:39,960 --> 01:10:45,389
that and everything's happy and bouncing

1348
01:10:42,238 --> 01:10:47,939
around and Joyland so once that's the

1349
01:10:45,389 --> 01:10:52,288
case now we have the ability to rewrite

1350
01:10:47,939 --> 01:10:54,569
our HHA file anytime we want and we can

1351
01:10:52,288 --> 01:10:56,639
interleave the asset types any way we

1352
01:10:54,569 --> 01:10:58,469
want as well it's not efficient anymore

1353
01:10:56,639 --> 01:11:01,319
it would be better if we just included

1354
01:10:58,469 --> 01:11:02,788
them in each individual asset so that's

1355
01:11:01,319 --> 01:11:03,929
a little unfortunate and it's something

1356
01:11:02,788 --> 01:11:06,569
we probably should fix in the file

1357
01:11:03,929 --> 01:11:08,460
format eventually I'll make a note of it

1358
01:11:06,569 --> 01:11:10,799
but we don't really have to fix it right

1359
01:11:08,460 --> 01:11:12,179
now so we can maybe look towards an

1360
01:11:10,800 --> 01:11:14,550
optimization pass some time in the

1361
01:11:12,179 --> 01:11:17,899
future to play with that and there's not

1362
01:11:14,550 --> 01:11:17,900
a lot of reason to fix it at this time

1363
01:11:56,720 --> 01:12:01,530
sooo getting rid of the asset type sorry

1364
01:11:59,699 --> 01:12:03,300
eventually and just storing that data

1365
01:12:01,529 --> 01:12:05,939
directly in the assets would definitely

1366
01:12:03,300 --> 01:12:09,119
be an improvement so we also have

1367
01:12:05,939 --> 01:12:10,710
another kind of a little bit confusing

1368
01:12:09,119 --> 01:12:13,979
situation here but it's not really that

1369
01:12:10,710 --> 01:12:16,170
bad the thing that we have that's a

1370
01:12:13,979 --> 01:12:18,509
little bit annoying is we don't really

1371
01:12:16,170 --> 01:12:20,100
have a way of saying what's primal for a

1372
01:12:18,510 --> 01:12:22,710
particular asset we just have matching

1373
01:12:20,100 --> 01:12:25,020
tags eventually we probably have to have

1374
01:12:22,710 --> 01:12:28,710
a thing which goes and zeros out some of

1375
01:12:25,020 --> 01:12:31,200
the asset stuff in other hhj files as we

1376
01:12:28,710 --> 01:12:34,640
replace them I don't know how much we

1377
01:12:31,199 --> 01:12:39,479
care about that exactly but you know

1378
01:12:34,640 --> 01:12:42,390
it's worth noting so anyway that's the

1379
01:12:39,479 --> 01:12:43,649
only change I think we have to make so

1380
01:12:42,390 --> 01:12:44,940
now what we need to do is we need to

1381
01:12:43,649 --> 01:12:47,849
make a way to actually store this stuff

1382
01:12:44,939 --> 01:12:49,949
out and so what I want to do here is

1383
01:12:47,850 --> 01:12:54,690
again I'm gonna I'm gonna sort of change

1384
01:12:49,949 --> 01:12:56,760
a little bit how this is working for the

1385
01:12:54,689 --> 01:12:59,789
asset index and file file and next stuff

1386
01:12:56,760 --> 01:13:03,329
here right so for a file index I'm just

1387
01:12:59,789 --> 01:13:07,170
gonna now say that that we're gonna

1388
01:13:03,329 --> 01:13:09,239
require for a given asset file we're

1389
01:13:07,170 --> 01:13:15,899
gonna require that it's it's marked as

1390
01:13:09,239 --> 01:13:17,369
editable I think that's just I think

1391
01:13:15,899 --> 01:13:19,699
that's probably the right thing to do

1392
01:13:17,369 --> 01:13:19,699
like

1393
01:13:22,840 --> 01:13:28,250
I'm torn I don't really know like which

1394
01:13:26,119 --> 01:13:31,220
one we should do but I feel like we want

1395
01:13:28,250 --> 01:13:33,260
to kind of say that there's one asset

1396
01:13:31,220 --> 01:13:35,600
file that's editable and the rest aren't

1397
01:13:33,260 --> 01:13:37,760
so like you're editing a particular file

1398
01:13:35,600 --> 01:13:40,010
and like it won't go like changing the

1399
01:13:37,760 --> 01:13:42,500
contents of other hhas it'll only append

1400
01:13:40,010 --> 01:13:47,960
to that one that you said you were

1401
01:13:42,500 --> 01:13:56,779
editing that to me kind of sounds like

1402
01:13:47,960 --> 01:13:58,850
the right thing to do I don't have a lot

1403
01:13:56,779 --> 01:14:01,219
of explanation that I just it feels a

1404
01:13:58,850 --> 01:14:02,420
little weird if the the reason that I'm

1405
01:14:01,220 --> 01:14:07,730
just not sure what else to do about that

1406
01:14:02,420 --> 01:14:12,829
is because when someone goes to create

1407
01:14:07,729 --> 01:14:15,649
or do an import right there's no way for

1408
01:14:12,829 --> 01:14:17,510
the game to know which HHA file you want

1409
01:14:15,649 --> 01:14:20,000
to put that in right there it's just a

1410
01:14:17,510 --> 01:14:22,310
PNG that it's importing the game doesn't

1411
01:14:20,000 --> 01:14:24,710
know where you might want that so it's

1412
01:14:22,310 --> 01:14:27,289
gonna have to pick something if we don't

1413
01:14:24,710 --> 01:14:29,300
make there just be a rule that when you

1414
01:14:27,289 --> 01:14:32,449
start up you basically say here's an

1415
01:14:29,300 --> 01:14:34,279
editable HHA file that you then specify

1416
01:14:32,449 --> 01:14:36,079
like hey anything I import during this

1417
01:14:34,279 --> 01:14:38,710
process put it in this HHA file or

1418
01:14:36,079 --> 01:14:42,109
whatever if we don't have that concept

1419
01:14:38,710 --> 01:14:44,840
then we're sort of in a situation where

1420
01:14:42,109 --> 01:14:47,000
we can't where it's just always

1421
01:14:44,840 --> 01:14:49,279
ambiguous like it's it's never gonna

1422
01:14:47,000 --> 01:14:51,649
know what HHA file you were actually

1423
01:14:49,279 --> 01:14:53,059
trying to edit and it doesn't have any

1424
01:14:51,649 --> 01:14:55,339
way to know what to put in it cuz like

1425
01:14:53,060 --> 01:14:57,050
if you have five HS any files in on the

1426
01:14:55,340 --> 01:14:58,640
drive it could put it in any of them

1427
01:14:57,050 --> 01:15:00,920
write it there's no right or wrong

1428
01:14:58,640 --> 01:15:03,320
answer to what HHA file to put a new

1429
01:15:00,920 --> 01:15:08,680
import in that it's never seen before

1430
01:15:03,319 --> 01:15:13,429
right so I think we probably want to say

1431
01:15:08,680 --> 01:15:22,460
that there is some kind of a pointer

1432
01:15:13,430 --> 01:15:24,909
here that's like hey you know or an

1433
01:15:22,460 --> 01:15:24,909
index

1434
01:15:25,840 --> 01:15:33,550
like that and so when you reserved space

1435
01:15:30,819 --> 01:15:41,109
you're reserving space in that specific

1436
01:15:33,550 --> 01:15:43,720
file and if that's not set to something

1437
01:15:41,109 --> 01:15:48,969
valid then it just doesn't allow you to

1438
01:15:43,720 --> 01:16:01,119
edit it's just an error right I think

1439
01:15:48,970 --> 01:16:02,890
that's what I want to do I don't know I

1440
01:16:01,119 --> 01:16:06,130
think that's the right I think that's

1441
01:16:02,890 --> 01:16:07,450
the right solution so that's what I'm

1442
01:16:06,130 --> 01:16:11,739
gonna say I'm gonna say there's an

1443
01:16:07,449 --> 01:16:18,880
editing HHA concept here if if we go

1444
01:16:11,739 --> 01:16:22,269
into the actual game layer here you can

1445
01:16:18,880 --> 01:16:27,489
see we set the file count like so right

1446
01:16:22,270 --> 01:16:30,700
I one of the things that we typically

1447
01:16:27,489 --> 01:16:33,279
have done is you know we set the file

1448
01:16:30,699 --> 01:16:36,039
indexes such that file index zero is is

1449
01:16:33,279 --> 01:16:37,750
a null file right that's what we didn't

1450
01:16:36,039 --> 01:16:40,000
do that here but that's like we did that

1451
01:16:37,750 --> 01:16:46,989
for assets for example you notice the

1452
01:16:40,000 --> 01:16:48,489
asset count precedes to one so I kind of

1453
01:16:46,989 --> 01:16:51,460
feel like maybe we do that with the

1454
01:16:48,489 --> 01:16:53,789
files as well just leave a null file in

1455
01:16:51,460 --> 01:16:57,609
there that way you can say stuff about

1456
01:16:53,789 --> 01:16:59,859
the file index being set to nothing for

1457
01:16:57,609 --> 01:17:03,279
example I feel like that's a good idea

1458
01:16:59,859 --> 01:17:06,670
so you know if I did that something like

1459
01:17:03,279 --> 01:17:09,519
this I feel like that's probably a good

1460
01:17:06,670 --> 01:17:12,279
idea and later when we loop through

1461
01:17:09,520 --> 01:17:16,540
these things I could just say look you

1462
01:17:12,279 --> 01:17:25,989
start with file index one it's also true

1463
01:17:16,539 --> 01:17:27,489
that now we can merge this stuff so you

1464
01:17:25,989 --> 01:17:31,289
know there's really no reason that we

1465
01:17:27,489 --> 01:17:31,289
can't just do the tag read here

1466
01:17:37,969 --> 01:17:44,118
right and that doesn't have to happen

1467
01:17:41,788 --> 01:17:44,118
anymore

1468
01:17:48,979 --> 01:17:58,109
seems reasonable okay so moving on so

1469
01:17:55,710 --> 01:18:00,029
this editing HHA index right that's

1470
01:17:58,109 --> 01:18:03,268
going to be set to 0 by default and that

1471
01:18:00,029 --> 01:18:10,130
means that there is no HHA available for

1472
01:18:03,269 --> 01:18:10,130
editing so if I were to run here oops

1473
01:18:24,948 --> 01:18:31,488
this shouldn't be that it should be this

1474
01:18:36,109 --> 01:18:46,170
yeah and so I think that's right now

1475
01:18:40,800 --> 01:18:48,239
just off there's the yeah the file

1476
01:18:46,170 --> 01:18:51,050
counter is only for us not for the

1477
01:18:48,238 --> 01:18:51,049
platform where anymore

1478
01:18:59,140 --> 01:19:04,180
all right so what I want to do now is

1479
01:19:02,260 --> 01:19:06,280
just say all right we have the concept

1480
01:19:04,180 --> 01:19:11,980
that there's a HHA that we're using for

1481
01:19:06,279 --> 01:19:15,309
editing and that's you know a special

1482
01:19:11,979 --> 01:19:17,589
case and what I want to do is make it so

1483
01:19:15,310 --> 01:19:19,750
that now this routine is always where it

1484
01:19:17,590 --> 01:19:21,400
like that's always where that goes so

1485
01:19:19,750 --> 01:19:29,439
for example when we do check for our

1486
01:19:21,399 --> 01:19:31,449
changes if if we're going to go through

1487
01:19:29,439 --> 01:19:33,539
this process here then what I want to do

1488
01:19:31,449 --> 01:19:36,970
is make sure that we don't actually ever

1489
01:19:33,539 --> 01:19:38,170
entertain that notion if we're not in a

1490
01:19:36,970 --> 01:19:41,350
mode where we can actually edit

1491
01:19:38,170 --> 01:19:45,399
something right so what I want to do

1492
01:19:41,350 --> 01:19:49,180
here is say yeah don't even start this

1493
01:19:45,399 --> 01:19:59,009
process if you can't possibly finish it

1494
01:19:49,180 --> 01:20:02,860
right so I call that again editing HHA

1495
01:19:59,010 --> 01:20:05,159
so like if there isn't an HHA that were

1496
01:20:02,859 --> 01:20:11,619
actually actively editing at this time

1497
01:20:05,159 --> 01:20:14,369
then that's like just that's just a

1498
01:20:11,619 --> 01:20:18,519
straight-up error right that's like not

1499
01:20:14,369 --> 01:20:20,140
something that we want to allow we could

1500
01:20:18,520 --> 01:20:21,130
print out a message here eventually I

1501
01:20:20,140 --> 01:20:23,560
don't know how we're gonna do that

1502
01:20:21,130 --> 01:20:26,079
exactly but something like that so there

1503
01:20:23,560 --> 01:20:27,610
has to be one of these once we know

1504
01:20:26,079 --> 01:20:30,250
there's one of those we go through it

1505
01:20:27,609 --> 01:20:32,170
then at the end we'll rewrite it so here

1506
01:20:30,250 --> 01:20:35,710
now what we would say is if we made

1507
01:20:32,170 --> 01:20:39,279
changes rewrite HHA directory or

1508
01:20:35,710 --> 01:20:42,819
whatever right and rewriting the HSV

1509
01:20:39,279 --> 01:20:52,599
directory we know the one in question is

1510
01:20:42,819 --> 01:20:56,219
the HHA index and off we go I could I

1511
01:20:52,600 --> 01:20:56,220
guess also do it this way

1512
01:20:59,380 --> 01:21:20,529
oops like so where that HHA will now get

1513
01:21:08,369 --> 01:21:22,329
rewritten seems reasonable yeah so

1514
01:21:20,529 --> 01:21:23,889
that's the function that we're gonna

1515
01:21:22,329 --> 01:21:26,199
have to write and it's relatively

1516
01:21:23,890 --> 01:21:28,090
complex so that that one will be a

1517
01:21:26,199 --> 01:21:29,829
little bit of work right but we already

1518
01:21:28,090 --> 01:21:32,319
did one of them inside the simple asset

1519
01:21:29,829 --> 01:21:34,479
processor so we can probably just import

1520
01:21:32,319 --> 01:21:39,989
the code from that and it shouldn't be

1521
01:21:34,479 --> 01:21:39,989
too big of a stretch right hopefully

1522
01:21:40,079 --> 01:21:52,689
this so we have to be able to rewrite

1523
01:21:50,739 --> 01:21:56,279
that directory so the two functions that

1524
01:21:52,689 --> 01:21:56,279
we're now missing are these two

1525
01:21:59,579 --> 01:22:02,949
unfortunately for us they're not

1526
01:22:01,029 --> 01:22:07,989
particularly complicated when we do a

1527
01:22:02,949 --> 01:22:10,809
reserve asset now and we we get sort of

1528
01:22:07,989 --> 01:22:12,729
a new asset out of the file we want to

1529
01:22:10,810 --> 01:22:17,230
clear that asset if it's not already

1530
01:22:12,729 --> 01:22:20,229
cleared and set it to stuff right which

1531
01:22:17,229 --> 01:22:22,569
we're gonna do up here we need to set

1532
01:22:20,229 --> 01:22:26,379
the file equal to whatever the editing

1533
01:22:22,569 --> 01:22:30,579
file is right so when we come through

1534
01:22:26,380 --> 01:22:34,359
here and we say you know here's the

1535
01:22:30,579 --> 01:22:36,850
asset in question we need to set which

1536
01:22:34,359 --> 01:22:39,719
file that is when we reserve the file so

1537
01:22:36,850 --> 01:22:43,120
you know in here we say like okay

1538
01:22:39,720 --> 01:22:44,949
whatever the file index is we probably

1539
01:22:43,119 --> 01:22:46,569
just want to remap it like we want to

1540
01:22:44,949 --> 01:22:50,229
move it to a different file at that

1541
01:22:46,569 --> 01:22:53,229
point the file that's being edited if

1542
01:22:50,229 --> 01:22:59,889
we're changing this asset and I'm not

1543
01:22:53,229 --> 01:23:02,199
sure yeah again like I said I'm not sure

1544
01:22:59,890 --> 01:23:04,300
if we want to allow editing of assets in

1545
01:23:02,199 --> 01:23:07,229
in a different file than the one that we

1546
01:23:04,300 --> 01:23:10,690
have open for editing

1547
01:23:07,229 --> 01:23:10,689
[Music]

1548
01:23:18,470 --> 01:23:23,510
I mean probably we don't write like

1549
01:23:21,500 --> 01:23:26,600
probably we want to do a thing here

1550
01:23:23,510 --> 01:23:28,220
where we would say look if this asset

1551
01:23:26,600 --> 01:23:29,600
isn't in the file that you said you

1552
01:23:28,220 --> 01:23:34,869
wanted to edit then we're not gonna let

1553
01:23:29,600 --> 01:23:34,870
you edit it right

1554
01:23:43,689 --> 01:23:48,250
so as I push down a little further I

1555
01:23:45,430 --> 01:23:50,920
don't like that I'll be honest so maybe

1556
01:23:48,250 --> 01:23:53,109
maybe what I said before just isn't the

1557
01:23:50,920 --> 01:23:55,710
right thing maybe we want you to have as

1558
01:23:53,109 --> 01:23:59,079
many files for editing as you want so

1559
01:23:55,710 --> 01:24:04,149
maybe this is really not editing HHA

1560
01:23:59,079 --> 01:24:06,670
index it's really just like you have to

1561
01:24:04,149 --> 01:24:08,649
say which file new stuff goes into but

1562
01:24:06,670 --> 01:24:24,520
if you want to you can still edit old

1563
01:24:08,649 --> 01:24:27,069
files like that so it's like alright if

1564
01:24:24,520 --> 01:24:28,720
we know where this asset goes we'll put

1565
01:24:27,069 --> 01:24:31,239
it in that file if we don't know where

1566
01:24:28,720 --> 01:24:35,680
it goes it goes in this default ahoj

1567
01:24:31,239 --> 01:24:37,539
right or something it sounds a little

1568
01:24:35,680 --> 01:24:39,100
janky to me but like I said I don't know

1569
01:24:37,539 --> 01:24:40,840
what to do about it because maybe you

1570
01:24:39,100 --> 01:24:41,950
have I mean like just thinking it

1571
01:24:40,840 --> 01:24:45,789
through to its logical conclusion

1572
01:24:41,949 --> 01:24:48,399
supposin and artist is working on

1573
01:24:45,789 --> 01:24:51,939
updating some files there's like two

1574
01:24:48,399 --> 01:24:53,979
hhas one for like something and one for

1575
01:24:51,939 --> 01:24:55,689
an expansion and they just want to edit

1576
01:24:53,979 --> 01:24:58,169
the art for both at the same time I mean

1577
01:24:55,689 --> 01:25:01,750
there's no reason they can't

1578
01:24:58,170 --> 01:25:05,109
so like why force them this close and

1579
01:25:01,750 --> 01:25:06,399
restart the game just to switch which

1580
01:25:05,109 --> 01:25:13,199
one they're editing like why not let

1581
01:25:06,399 --> 01:25:22,199
them edit both at the same time right so

1582
01:25:13,199 --> 01:25:22,199
I don't know seems plausible

1583
01:25:22,989 --> 01:25:29,500
so in here where we do the reserve asset

1584
01:25:26,819 --> 01:25:31,719
when we assign a new asset then what

1585
01:25:29,500 --> 01:25:36,039
we'd say is like okay that asset goes in

1586
01:25:31,720 --> 01:25:40,750
the default appending file right so it

1587
01:25:36,039 --> 01:25:42,310
just says also this is no law no longer

1588
01:25:40,750 --> 01:25:53,779
a thing I guess

1589
01:25:42,310 --> 01:25:57,650
so we can just say if asset

1590
01:25:53,779 --> 01:26:12,509
acet I'm sorry file index equals zero

1591
01:25:57,649 --> 01:26:17,670
asset file and x equals assets default

1592
01:26:12,510 --> 01:26:20,070
append hh-hey index and then off we go

1593
01:26:17,670 --> 01:26:24,960
so then we have the asset files here

1594
01:26:20,069 --> 01:26:30,899
which will now grab one of those files

1595
01:26:24,960 --> 01:26:35,460
out here we could assert that this is

1596
01:26:30,899 --> 01:26:38,420
nonzero we may have to reserve data in

1597
01:26:35,460 --> 01:26:41,670
this particular asset file for the asset

1598
01:26:38,420 --> 01:26:44,520
to save if we need to that's all fine so

1599
01:26:41,670 --> 01:26:47,369
I think that's all pretty reasonable so

1600
01:26:44,520 --> 01:26:50,130
then what we need to do in the side of

1601
01:26:47,369 --> 01:26:52,829
the asset file here is we also need some

1602
01:26:50,130 --> 01:26:55,829
way of remembering what the high-water

1603
01:26:52,829 --> 01:27:00,149
mark was of this particular file that

1604
01:26:55,829 --> 01:27:05,130
we're editing so we would need here like

1605
01:27:00,149 --> 01:27:06,509
a u 64 that's like file size right but

1606
01:27:05,130 --> 01:27:10,039
once we have that then we're pretty much

1607
01:27:06,510 --> 01:27:12,270
done with that part of the process and

1608
01:27:10,039 --> 01:27:15,899
the way that we're gonna do this is

1609
01:27:12,270 --> 01:27:22,230
gonna be pretty interesting so so bear

1610
01:27:15,899 --> 01:27:26,639
with me here this is sort of a compact

1611
01:27:22,229 --> 01:27:28,229
file I don't to call a trick just

1612
01:27:26,640 --> 01:27:29,070
something that we can use to make our

1613
01:27:28,229 --> 01:27:31,669
lives easier

1614
01:27:29,069 --> 01:27:31,670
let's say

1615
01:27:38,050 --> 01:27:41,050
oops

1616
01:27:56,170 --> 01:28:01,550
so what do we have right now what's the

1617
01:27:59,359 --> 01:28:05,769
problem that we have right now well

1618
01:28:01,550 --> 01:28:08,060
we've got an array of asset information

1619
01:28:05,770 --> 01:28:10,969
and you know it kind of looks like this

1620
01:28:08,060 --> 01:28:13,280
right it's got like yours asset 0 &amp; 1 &amp;

1621
01:28:10,969 --> 01:28:14,779
2 &amp; 3 well we don't actually talk about

1622
01:28:13,279 --> 01:28:16,279
them that way we talk about with other

1623
01:28:14,779 --> 01:28:17,179
numbers but you get the idea there's

1624
01:28:16,279 --> 01:28:21,529
assets in here

1625
01:28:17,179 --> 01:28:23,329
right then we also have another thing

1626
01:28:21,529 --> 01:28:25,579
which is just like arbitrarily sized

1627
01:28:23,329 --> 01:28:27,889
data that's like bitmaps for these

1628
01:28:25,579 --> 01:28:29,809
assets or whatever right or sound data

1629
01:28:27,889 --> 01:28:32,060
or whatever it is and these assets

1630
01:28:29,810 --> 01:28:37,760
storing them an offset that says like

1631
01:28:32,060 --> 01:28:40,219
where that stuff is oops but we have a

1632
01:28:37,760 --> 01:28:43,070
problem these two things appear

1633
01:28:40,219 --> 01:28:46,639
sequentially in a file right so let's

1634
01:28:43,069 --> 01:28:49,750
say we stack them together then what

1635
01:28:46,639 --> 01:28:52,699
happens is only one of them can grow

1636
01:28:49,750 --> 01:28:58,010
right let's say we put the assets first

1637
01:28:52,698 --> 01:28:59,359
and the bitmaps second well that's all

1638
01:28:58,010 --> 01:29:00,800
fine and dandy because now when we get a

1639
01:28:59,359 --> 01:29:03,829
new bitmap in we can just stick it on

1640
01:29:00,800 --> 01:29:05,630
the end and that works great and if it

1641
01:29:03,829 --> 01:29:08,569
happens to refer to an existing asset

1642
01:29:05,630 --> 01:29:11,980
that's just fine because we can just use

1643
01:29:08,569 --> 01:29:14,719
the offset in here to point to it right

1644
01:29:11,979 --> 01:29:16,729
but the problem is what happens if we

1645
01:29:14,719 --> 01:29:18,710
need to add a new asset record it's

1646
01:29:16,729 --> 01:29:24,439
gonna overwrite some of our bitmap data

1647
01:29:18,710 --> 01:29:31,039
and that's no good right same token if

1648
01:29:24,439 --> 01:29:34,939
we put the bitmaps first and then we've

1649
01:29:31,039 --> 01:29:36,618
got the assets array afterwards well now

1650
01:29:34,939 --> 01:29:39,019
we have the opposite problem it's free

1651
01:29:36,618 --> 01:29:41,569
to add assets on and as long as they

1652
01:29:39,020 --> 01:29:44,030
refer to existing bitmap data we're fine

1653
01:29:41,569 --> 01:29:45,920
but as soon as we need to add new bitmap

1654
01:29:44,029 --> 01:29:51,170
data we would overwrite some of our

1655
01:29:45,920 --> 01:29:55,639
asset data so what do we do right are we

1656
01:29:51,170 --> 01:29:57,500
just are we screwed the answer is to

1657
01:29:55,639 --> 01:30:01,010
understand the relative size between

1658
01:29:57,500 --> 01:30:05,988
these two things right this is huge this

1659
01:30:01,010 --> 01:30:09,119
is tiny how many assets might we have in

1660
01:30:05,988 --> 01:30:11,799
this game 5,000

1661
01:30:09,118 --> 01:30:13,658
10,000 how many is Ana realistically

1662
01:30:11,800 --> 01:30:17,139
going to be able to draw it's not going

1663
01:30:13,658 --> 01:30:20,558
to be a hundred thousand she would her

1664
01:30:17,139 --> 01:30:23,980
arm would fall off right so if you think

1665
01:30:20,559 --> 01:30:27,119
about the size of these things let's

1666
01:30:23,979 --> 01:30:29,828
just do a simple back of the envelope

1667
01:30:27,118 --> 01:30:32,618
computation let's say she draws ten

1668
01:30:29,828 --> 01:30:36,880
thousand assets and let's say that each

1669
01:30:32,618 --> 01:30:40,078
asset is actually like you know 256

1670
01:30:36,880 --> 01:30:43,599
bytes or something like this right

1671
01:30:40,078 --> 01:30:46,868
that's two and a half megabytes of data

1672
01:30:43,599 --> 01:30:48,578
a modern harddrive writes two and a half

1673
01:30:46,868 --> 01:30:50,889
megabytes of data before you can even

1674
01:30:48,578 --> 01:30:55,090
say the words two and a half megabytes

1675
01:30:50,889 --> 01:31:02,739
of data bitmaps on the other hand are

1676
01:30:55,090 --> 01:31:06,248
1024 by 1024 by four for one of them one

1677
01:31:02,738 --> 01:31:09,549
of them that's four megabytes large if

1678
01:31:06,248 --> 01:31:12,279
we don't compress them we might but the

1679
01:31:09,550 --> 01:31:14,170
starting that's the worst case right if

1680
01:31:12,279 --> 01:31:18,368
you got no compression on them that's

1681
01:31:14,170 --> 01:31:21,670
what you'd get so even just getting you

1682
01:31:18,368 --> 01:31:23,729
then they'll never be 286 bytes no

1683
01:31:21,670 --> 01:31:25,960
matter how well we can press them right

1684
01:31:23,729 --> 01:31:28,598
best-case scenario we get like eight to

1685
01:31:25,960 --> 01:31:30,609
one sixteen to one or something on them

1686
01:31:28,599 --> 01:31:32,349
let's say they're all super cartoony and

1687
01:31:30,609 --> 01:31:36,518
hardly any shading we get sixty to one

1688
01:31:32,349 --> 01:31:38,650
right even sixty to one compression it's

1689
01:31:36,519 --> 01:31:40,599
nowhere near the size of one of these

1690
01:31:38,649 --> 01:31:43,328
even if each one of these was a full K

1691
01:31:40,599 --> 01:31:48,038
long it's still nowhere near it right

1692
01:31:43,328 --> 01:31:54,969
it's a full 64 K just for one compressed

1693
01:31:48,038 --> 01:31:58,238
bitmap if we were very lucky right so

1694
01:31:54,969 --> 01:32:01,359
what that means is we can't assume that

1695
01:31:58,238 --> 01:32:04,359
this is massive this is tiny if it's

1696
01:32:01,359 --> 01:32:09,578
tiny what does that mean it's free to

1697
01:32:04,359 --> 01:32:11,859
rewrite it right it's free ready to

1698
01:32:09,578 --> 01:32:14,828
point five megabytes used to be a big

1699
01:32:11,859 --> 01:32:16,988
deal it's nothing now an artist machine

1700
01:32:14,828 --> 01:32:19,738
can rewrite 2.5 megabytes before

1701
01:32:16,988 --> 01:32:22,719
Photoshop can even select the lasso tool

1702
01:32:19,738 --> 01:32:24,909
not counting if you accidentally heaven

1703
01:32:22,720 --> 01:32:28,030
offend accidentally hit the open in

1704
01:32:24,909 --> 01:32:30,309
bridge button at which point you could

1705
01:32:28,029 --> 01:32:33,279
rewrite all of the world's knowledge

1706
01:32:30,310 --> 01:32:35,230
many times over to optical media and you

1707
01:32:33,279 --> 01:32:35,949
would be done before Photoshop could

1708
01:32:35,229 --> 01:32:41,019
even open

1709
01:32:35,949 --> 01:32:43,750
if dialog box right so writing that two

1710
01:32:41,020 --> 01:32:46,780
point five megabytes ten megabytes

1711
01:32:43,750 --> 01:32:49,869
however much it is is basically free so

1712
01:32:46,779 --> 01:32:52,239
what do we do we treat that as a sort of

1713
01:32:49,869 --> 01:32:54,279
a rewritable section that we just move

1714
01:32:52,239 --> 01:32:57,309
to the bottom of the file every time so

1715
01:32:54,279 --> 01:32:59,559
every time we import right what we

1716
01:32:57,310 --> 01:33:01,380
actually do is we've got a file that

1717
01:32:59,560 --> 01:33:09,670
looks like this assets at the end

1718
01:33:01,380 --> 01:33:12,789
bitmaps at the beginning right we

1719
01:33:09,670 --> 01:33:16,810
overwrite the asset array with new

1720
01:33:12,789 --> 01:33:21,600
bitmap data it's gone now then we

1721
01:33:16,810 --> 01:33:21,600
rewrite the asset array on to the end

1722
01:33:24,119 --> 01:33:32,079
easy peasy right so what that means is

1723
01:33:29,020 --> 01:33:35,230
that actually what we do here and I know

1724
01:33:32,079 --> 01:33:36,819
it's a little weird is we don't really

1725
01:33:35,229 --> 01:33:38,349
store the file side so I need to talk

1726
01:33:36,819 --> 01:33:41,109
about now cuz I need to start explaining

1727
01:33:38,350 --> 01:33:44,650
what this actually is right we need to

1728
01:33:41,109 --> 01:33:49,839
call this the high watermark basically

1729
01:33:44,649 --> 01:33:53,829
right and what that is is it's saying

1730
01:33:49,840 --> 01:33:57,190
look there is other stuff in this file

1731
01:33:53,829 --> 01:34:01,059
like the asset array but we already read

1732
01:33:57,189 --> 01:34:02,439
it into memory like we've got it so now

1733
01:34:01,060 --> 01:34:04,900
what we're gonna do is if we need to add

1734
01:34:02,439 --> 01:34:06,759
to this file we're gonna obliterate that

1735
01:34:04,899 --> 01:34:09,549
part of the file we're gonna overwrite

1736
01:34:06,760 --> 01:34:12,489
it with bitmap data and then we're gonna

1737
01:34:09,550 --> 01:34:14,199
slap onto the end a new version of the

1738
01:34:12,489 --> 01:34:18,729
stuff we just obliterated because hey by

1739
01:34:14,199 --> 01:34:22,300
the way it's different now anyway make

1740
01:34:18,729 --> 01:34:25,119
sense so this is a pretty simple way to

1741
01:34:22,300 --> 01:34:28,600
split up your files and not really have

1742
01:34:25,119 --> 01:34:29,529
to worry about that fact another way you

1743
01:34:28,600 --> 01:34:33,280
could do it is split them into two

1744
01:34:29,529 --> 01:34:35,050
different files but we don't really have

1745
01:34:33,279 --> 01:34:36,849
the need to do that right this keeps

1746
01:34:35,050 --> 01:34:39,340
them more concise

1747
01:34:36,850 --> 01:34:43,990
and it's pretty much free to do like I

1748
01:34:39,340 --> 01:34:46,420
said the size of those additional pieces

1749
01:34:43,989 --> 01:34:49,809
of array information are just so small

1750
01:34:46,420 --> 01:34:51,760
that it really doesn't matter so so all

1751
01:34:49,810 --> 01:34:54,400
we have to do here is go ahead there's a

1752
01:34:51,760 --> 01:34:57,760
header in the file it's got an offset to

1753
01:34:54,399 --> 01:34:59,979
the assets and the asset types we will

1754
01:34:57,760 --> 01:35:03,150
just relocate those to the end of the

1755
01:34:59,979 --> 01:35:11,229
file every time and rewrite the header

1756
01:35:03,149 --> 01:35:13,869
and we're done right so once we

1757
01:35:11,229 --> 01:35:15,449
understand that fact what we have to do

1758
01:35:13,869 --> 01:35:18,720
is do a little bit of work to determine

1759
01:35:15,449 --> 01:35:22,989
where that high-water mark actually is

1760
01:35:18,720 --> 01:35:26,230
and so for the moment we will sort of

1761
01:35:22,989 --> 01:35:29,289
have a little bit of jenkin assign the

1762
01:35:26,229 --> 01:35:30,549
file system to do this because we didn't

1763
01:35:29,289 --> 01:35:34,300
think we were ever going to actually

1764
01:35:30,550 --> 01:35:37,420
allow rewritable files so the as a

1765
01:35:34,300 --> 01:35:39,670
result we don't have a high watermark

1766
01:35:37,420 --> 01:35:41,680
stored in the file which is what we

1767
01:35:39,670 --> 01:35:44,739
would have wanted so we would have

1768
01:35:41,680 --> 01:35:46,270
wanted to write that in here so

1769
01:35:44,739 --> 01:35:48,579
determining the high watermark is

1770
01:35:46,270 --> 01:35:51,460
actually a little bit of a dance that we

1771
01:35:48,579 --> 01:35:53,680
would have to do to determine whether or

1772
01:35:51,460 --> 01:35:56,710
not the asset array actually appears at

1773
01:35:53,680 --> 01:35:58,659
the end or not if it does we can use it

1774
01:35:56,710 --> 01:36:00,699
if it doesn't we can't it's no big deal

1775
01:35:58,659 --> 01:36:05,949
either way but that's the that's the

1776
01:36:00,699 --> 01:36:11,949
current setup right so that's what we'll

1777
01:36:05,949 --> 01:36:13,869
do and we'll go from there I so yeah

1778
01:36:11,949 --> 01:36:16,599
it's like I said pretty straightforward

1779
01:36:13,869 --> 01:36:19,359
but that's just the understanding that

1780
01:36:16,600 --> 01:36:21,760
you have to have going into it all right

1781
01:36:19,359 --> 01:36:25,479
so to start with we can make this easy

1782
01:36:21,760 --> 01:36:27,730
and we can just like lose space in our

1783
01:36:25,479 --> 01:36:31,179
asset files that we don't really we

1784
01:36:27,729 --> 01:36:32,739
shouldn't really lose but we can by just

1785
01:36:31,180 --> 01:36:34,810
always setting the high-water mark to

1786
01:36:32,739 --> 01:36:37,050
the actual file size but then what we

1787
01:36:34,810 --> 01:36:39,580
can do is we can do better than that

1788
01:36:37,050 --> 01:36:42,789
later on by setting the Hutt's by

1789
01:36:39,579 --> 01:36:47,199
setting the high-water mark to actually

1790
01:36:42,789 --> 01:36:48,640
be our our file size - any arrays that

1791
01:36:47,199 --> 01:36:49,908
we did that we're going to rewrite that

1792
01:36:48,640 --> 01:36:55,849
we detect a beat

1793
01:36:49,908 --> 01:36:57,379
at the end so coming through here what

1794
01:36:55,849 --> 01:37:01,519
we want to do is when we load in these

1795
01:36:57,380 --> 01:37:03,859
files so right about here where we start

1796
01:37:01,519 --> 01:37:06,260
to load in these files what we want to

1797
01:37:03,859 --> 01:37:07,880
do is let's remember like you can see we

1798
01:37:06,260 --> 01:37:09,349
open the file here right and we read

1799
01:37:07,880 --> 01:37:14,090
some data out of it that's the header

1800
01:37:09,349 --> 01:37:16,099
right what we want to do here is store

1801
01:37:14,090 --> 01:37:18,469
the header so that we always know what

1802
01:37:16,099 --> 01:37:20,869
the header header is thankfully we did

1803
01:37:18,469 --> 01:37:23,239
exactly that right can we get that

1804
01:37:20,868 --> 01:37:26,418
information then what we want to do is

1805
01:37:23,238 --> 01:37:31,279
store what the what the platform tells

1806
01:37:26,418 --> 01:37:32,929
us the size of that file is so we want

1807
01:37:31,279 --> 01:37:42,188
to be able to set the high-water mark

1808
01:37:32,929 --> 01:37:45,139
here like so and the file info structure

1809
01:37:42,189 --> 01:37:47,840
can tell us that so remember in the file

1810
01:37:45,139 --> 01:37:49,609
and stress info structure here we've got

1811
01:37:47,840 --> 01:37:51,918
this file size that tells us how big

1812
01:37:49,609 --> 01:37:53,208
that thing is so we can just set the

1813
01:37:51,918 --> 01:37:55,309
high-water mark to that and know we can

1814
01:37:53,208 --> 01:37:59,688
always write past it but we can do a

1815
01:37:55,309 --> 01:38:05,958
little bit better we can say if at end

1816
01:37:59,689 --> 01:38:08,179
of file something like this if a

1817
01:38:05,958 --> 01:38:16,519
particular array is at the end of the

1818
01:38:08,179 --> 01:38:18,739
file then we can just back up here right

1819
01:38:16,519 --> 01:38:22,668
here so we've got three arrays tags

1820
01:38:18,738 --> 01:38:30,589
asset types and assets right and we can

1821
01:38:22,668 --> 01:38:32,448
rewrite them all if we want to so what

1822
01:38:30,590 --> 01:38:36,969
we want to do is say all right if the

1823
01:38:32,448 --> 01:38:36,969
file header tags array

1824
01:38:44,310 --> 01:38:48,630
which by the way is this long right if

1825
01:38:46,500 --> 01:38:51,329
that's at the end of the file then we

1826
01:38:48,630 --> 01:38:53,850
want to back up by that amount and so

1827
01:38:51,329 --> 01:39:00,899
I'm in make sort of a thing here that's

1828
01:38:53,850 --> 01:39:03,420
like back up watermark or you know

1829
01:39:00,899 --> 01:39:08,000
retract watermark something like that

1830
01:39:03,420 --> 01:39:11,039
and say look take this this is the file

1831
01:39:08,000 --> 01:39:11,939
the high watermark is at the end of the

1832
01:39:11,039 --> 01:39:15,840
file by default

1833
01:39:11,939 --> 01:39:34,019
for each array in the file just look to

1834
01:39:15,840 --> 01:39:40,170
see if it's actually at the end right if

1835
01:39:34,020 --> 01:39:41,120
it is at the end back it up this may

1836
01:39:40,170 --> 01:39:45,480
look weird

1837
01:39:41,119 --> 01:39:53,010
but I'm gonna loop on that and what I'm

1838
01:39:45,479 --> 01:39:58,949
gonna do is say look why did that not

1839
01:39:53,010 --> 01:40:01,680
line up do I have like one too many of

1840
01:39:58,949 --> 01:40:04,670
those or something there we go I must

1841
01:40:01,680 --> 01:40:04,670
have had one too many of those

1842
01:40:10,090 --> 01:40:20,199
I'm gonna say alright if we have done

1843
01:40:16,619 --> 01:40:21,939
any of those I actually want the inverse

1844
01:40:20,199 --> 01:40:26,170
of it so I really want to say if none of

1845
01:40:21,939 --> 01:40:27,849
these retracted then we're done right

1846
01:40:26,170 --> 01:40:32,460
another wait I guess I could just say

1847
01:40:27,850 --> 01:40:34,620
it's like wile any of these is true

1848
01:40:32,460 --> 01:40:40,779
that's probably a better way to put it

1849
01:40:34,619 --> 01:40:43,239
do nothing right so basically what this

1850
01:40:40,779 --> 01:40:45,009
will say is look see if any of the three

1851
01:40:43,239 --> 01:40:45,939
of those at the end of the file if any

1852
01:40:45,010 --> 01:40:48,520
of three of those at the end the file

1853
01:40:45,939 --> 01:40:55,239
back the high-water mark up then do it

1854
01:40:48,520 --> 01:40:58,120
again right that way we don't have to

1855
01:40:55,239 --> 01:41:00,429
care which order the author of this HHA

1856
01:40:58,119 --> 01:41:06,119
put those in we can back up the

1857
01:41:00,430 --> 01:41:09,369
watermark by checking them basically

1858
01:41:06,119 --> 01:41:16,180
nine times right check each three three

1859
01:41:09,369 --> 01:41:18,059
times to see if we back up right yeah

1860
01:41:16,180 --> 01:41:21,730
that's that's it

1861
01:41:18,060 --> 01:41:24,130
so all I have to do is just write

1862
01:41:21,729 --> 01:41:35,459
something that does that check so the

1863
01:41:24,130 --> 01:41:41,170
internal retracted watermark function

1864
01:41:35,460 --> 01:41:47,439
there's a count there's an offset and

1865
01:41:41,170 --> 01:41:51,489
they're the size like so and all we're

1866
01:41:47,439 --> 01:42:00,369
going to do is say all right if the

1867
01:41:51,489 --> 01:42:04,329
offset equals the watermark - the count

1868
01:42:00,369 --> 01:42:06,069
times the size right and by the way I

1869
01:42:04,329 --> 01:42:10,019
guess we can allow this to be full

1870
01:42:06,069 --> 01:42:12,759
64-bit math if we want to right so if

1871
01:42:10,020 --> 01:42:16,540
the offset that you're telling me that

1872
01:42:12,760 --> 01:42:18,730
this array had was actually where it

1873
01:42:16,539 --> 01:42:20,710
would be if we started at the end of the

1874
01:42:18,729 --> 01:42:23,079
file backed up by the size of the array

1875
01:42:20,710 --> 01:42:24,010
then that means this is at the end of

1876
01:42:23,079 --> 01:42:25,539
the file so

1877
01:42:24,010 --> 01:42:28,600
then we can do is say all right the

1878
01:42:25,539 --> 01:42:30,519
high-water mark is now back that amount

1879
01:42:28,600 --> 01:42:32,710
right or rather I guess we get to say

1880
01:42:30,520 --> 01:42:34,120
equals the offset so now where that

1881
01:42:32,710 --> 01:42:35,500
array starts it's actually our new

1882
01:42:34,119 --> 01:42:39,399
high-water mark because we don't

1883
01:42:35,500 --> 01:42:40,569
carefully obliterate it right and then

1884
01:42:39,399 --> 01:42:43,569
all we have to do is just remember

1885
01:42:40,569 --> 01:42:48,059
whether or not we did that and tell the

1886
01:42:43,569 --> 01:42:51,130
outside code right

1887
01:42:48,060 --> 01:42:53,020
so that'll now find the high-water mark

1888
01:42:51,130 --> 01:42:57,690
even if the file was written without an

1889
01:42:53,020 --> 01:42:57,690
understanding of that this better be

1890
01:43:17,609 --> 01:43:26,799
yeah so now we have to do now that we

1891
01:43:25,329 --> 01:43:28,539
actually know the high-water mark is

1892
01:43:26,800 --> 01:43:30,869
actually implement these two functions

1893
01:43:28,539 --> 01:43:33,430
in terms of that information right

1894
01:43:30,869 --> 01:43:36,340
we know the high-water mark in any file

1895
01:43:33,430 --> 01:43:38,260
so now in order to reserve data in the

1896
01:43:36,340 --> 01:43:43,510
file oh there's one of the thing we have

1897
01:43:38,260 --> 01:43:56,770
to do actually uh yeah pretend I didn't

1898
01:43:43,510 --> 01:43:57,940
say that I'll do it now so what we

1899
01:43:56,770 --> 01:44:00,460
actually need to do here is we need to

1900
01:43:57,939 --> 01:44:02,710
go through all the files that are in the

1901
01:44:00,460 --> 01:44:04,390
asset system actually so we you know we

1902
01:44:02,710 --> 01:44:17,170
really want to actually do this kind of

1903
01:44:04,390 --> 01:44:23,800
a loop here right we want to go through

1904
01:44:17,170 --> 01:44:26,250
each one of these and say look if if the

1905
01:44:23,800 --> 01:44:31,900
file is modified rewrite the directory

1906
01:44:26,250 --> 01:44:40,020
right so this made changes thing

1907
01:44:31,899 --> 01:44:40,019
actually does not need to be here

1908
01:44:43,020 --> 01:44:53,430
it really actually wants to be up here

1909
01:44:46,680 --> 01:44:56,590
so when we reserved data on an asset or

1910
01:44:53,430 --> 01:44:58,570
change the data that we wrote out to an

1911
01:44:56,590 --> 01:45:02,350
asset when we do any of those operations

1912
01:44:58,569 --> 01:45:08,679
we now want the file so this stuff here

1913
01:45:02,350 --> 01:45:13,600
right we want this stuff to be noting

1914
01:45:08,680 --> 01:45:17,980
that fact so asset file made changes or

1915
01:45:13,600 --> 01:45:19,780
modified is going to be true if either

1916
01:45:17,979 --> 01:45:21,489
of these two things happen right and

1917
01:45:19,779 --> 01:45:22,840
then here we can set it to false in fact

1918
01:45:21,489 --> 01:45:27,689
this is where we should set it to false

1919
01:45:22,840 --> 01:45:27,690
shouldn't be set to false here right

1920
01:45:35,520 --> 01:45:38,550
like that

1921
01:45:49,349 --> 01:45:59,560
yeah uh so that's more like it

1922
01:45:56,510 --> 01:45:59,560
[Music]

1923
01:46:00,179 --> 01:46:03,599
almost I've time

1924
01:46:11,439 --> 01:46:23,259
that's a little more like it I don't

1925
01:46:15,908 --> 01:46:29,259
know why I call that asset file there's

1926
01:46:23,260 --> 01:46:32,860
really no reason for that okay so now

1927
01:46:29,260 --> 01:46:34,840
when we do reserve data we can actually

1928
01:46:32,859 --> 01:46:36,279
do this much more we can actually

1929
01:46:34,840 --> 01:46:38,288
implement all this stuff pretty

1930
01:46:36,279 --> 01:46:39,819
straightforward now right down to the

1931
01:46:38,288 --> 01:46:40,988
right modification agents say this this

1932
01:46:39,819 --> 01:46:42,729
will take a little more work because we

1933
01:46:40,988 --> 01:46:44,678
have to actually rewrite those arrays

1934
01:46:42,729 --> 01:46:46,689
but for the most part it's like I said

1935
01:46:44,679 --> 01:46:48,489
pretty straightforward so this function

1936
01:46:46,689 --> 01:46:50,288
now becomes trivial all we're gonna do

1937
01:46:48,488 --> 01:46:52,328
is say look whatever the high-water mark

1938
01:46:50,288 --> 01:46:56,529
is we just need to that much more data

1939
01:46:52,328 --> 01:46:57,908
right so the result is just whatever the

1940
01:46:56,529 --> 01:47:03,429
high-water mark is that's where we're

1941
01:46:57,908 --> 01:47:04,929
gonna write to you know and then we just

1942
01:47:03,429 --> 01:47:06,219
advanced the high-water mark by that

1943
01:47:04,929 --> 01:47:08,170
amount right really really

1944
01:47:06,219 --> 01:47:10,510
straightforward then we want to do right

1945
01:47:08,170 --> 01:47:14,590
modifications to HHA all we have to do

1946
01:47:10,510 --> 01:47:18,010
is rewrite the header right and then

1947
01:47:14,590 --> 01:47:21,460
rewrite those arrays whichever ones we

1948
01:47:18,010 --> 01:47:26,980
want like the tiger a tiger a acid type

1949
01:47:21,460 --> 01:47:32,189
array and the and the assets array

1950
01:47:26,979 --> 01:47:32,189
itself so that's really it

1951
01:47:37,079 --> 01:47:49,840
yeah I mean I think that that's all

1952
01:47:46,989 --> 01:47:51,039
there really is to it you know the the

1953
01:47:49,840 --> 01:47:52,690
write this function is going to be a

1954
01:47:51,039 --> 01:47:54,399
little annoying to write it's but it's

1955
01:47:52,689 --> 01:47:58,960
it's still just busy work there's not

1956
01:47:54,399 --> 01:48:07,299
much to it you know you can imagine it's

1957
01:47:58,960 --> 01:48:08,920
just gonna take it's really just gonna

1958
01:48:07,300 --> 01:48:12,940
be a thing that sums these up and then

1959
01:48:08,920 --> 01:48:14,470
writes them out that's that's it

1960
01:48:12,939 --> 01:48:17,529
I mean there's not going to be anything

1961
01:48:14,470 --> 01:48:22,300
magical to it that's if we rewrite the

1962
01:48:17,529 --> 01:48:24,039
tag array which I don't really that's

1963
01:48:22,300 --> 01:48:25,690
the part that's gonna be changed and not

1964
01:48:24,039 --> 01:48:30,970
really sure how that's gonna look but

1965
01:48:25,689 --> 01:48:33,489
you know it's pretty straightforward

1966
01:48:30,970 --> 01:48:35,590
either way so we'll sum up those and

1967
01:48:33,489 --> 01:48:38,550
then we just need to take the h @j

1968
01:48:35,590 --> 01:48:38,550
header right

1969
01:48:47,430 --> 01:48:51,810
and I guess weakened really just

1970
01:48:50,010 --> 01:48:54,329
modified in place the magic value the

1971
01:48:51,810 --> 01:48:56,120
version the tag count I said the magic

1972
01:48:54,329 --> 01:49:00,469
value in the version should be the same

1973
01:48:56,119 --> 01:49:04,529
the tag count will become the tag count

1974
01:49:00,469 --> 01:49:06,060
the asset type count will become the

1975
01:49:04,529 --> 01:49:08,519
asset count because that's the way we're

1976
01:49:06,060 --> 01:49:14,130
going to write those out now the asset

1977
01:49:08,520 --> 01:49:25,140
count will also be the asset count these

1978
01:49:14,130 --> 01:49:29,329
offsets will be fairly straightforward

1979
01:49:25,140 --> 01:49:29,329
they're just like the high-water mark

1980
01:49:29,569 --> 01:49:37,250
with offsets applied right so this is

1981
01:49:37,340 --> 01:49:41,480
and this is

1982
01:49:55,640 --> 01:50:02,160
so really really simple right and we

1983
01:49:59,579 --> 01:50:06,869
know what those sizes are we know that

1984
01:50:02,159 --> 01:50:10,409
like the tag array size is just the tag

1985
01:50:06,869 --> 01:50:14,489
count times the size of an HHI tag

1986
01:50:10,409 --> 01:50:18,539
struct and we know that the asset types

1987
01:50:14,489 --> 01:50:23,189
array size is just the asset count times

1988
01:50:18,539 --> 01:50:26,460
the size of HHA asset type and we know

1989
01:50:23,189 --> 01:50:28,319
also what the assets array size is

1990
01:50:26,460 --> 01:50:30,300
because that's just the asset count

1991
01:50:28,319 --> 01:50:36,779
times the size of the assets we don't

1992
01:50:30,300 --> 01:50:40,369
use that yet but you know we will so

1993
01:50:36,779 --> 01:50:44,550
once we have that information we can

1994
01:50:40,369 --> 01:50:47,340
just allocate space for those and then

1995
01:50:44,550 --> 01:50:49,079
flat write them which are probably more

1996
01:50:47,340 --> 01:50:51,150
efficient than issuing lots of little

1997
01:50:49,079 --> 01:50:54,649
platform reads so what I might say is

1998
01:50:51,149 --> 01:50:57,359
like pass us the temporary nough and

1999
01:50:54,649 --> 01:50:59,719
let's go ahead and push arrays on there

2000
01:50:57,359 --> 01:51:13,559
for each of these so then we would have

2001
01:50:59,720 --> 01:51:20,520
you know a tags assets write each of

2002
01:51:13,560 --> 01:51:22,200
these and again it's fairly

2003
01:51:20,520 --> 01:51:24,570
straightforward so we've got the tag

2004
01:51:22,199 --> 01:51:29,729
count worth of those we've got the asset

2005
01:51:24,569 --> 01:51:34,799
count worth of these two right eye and

2006
01:51:29,729 --> 01:51:36,779
those just go into the temporary now we

2007
01:51:34,800 --> 01:51:38,820
then loop so this two loops are the

2008
01:51:36,779 --> 01:51:40,739
assets one to count everything and then

2009
01:51:38,819 --> 01:51:43,409
another one here to actually fill them

2010
01:51:40,739 --> 01:51:48,260
out and then we just write everything

2011
01:51:43,409 --> 01:51:48,260
back to the file right that's

2012
01:51:50,590 --> 01:51:56,380
very very simple we know what we need to

2013
01:51:53,229 --> 01:52:06,279
write so we just say look here's the

2014
01:51:56,380 --> 01:52:08,250
handle we need the offset the size and E

2015
01:52:06,279 --> 01:52:11,769
and the information we have all of that

2016
01:52:08,250 --> 01:52:15,250
so we just say the offset is whichever

2017
01:52:11,770 --> 01:52:19,630
array this is so well we want the header

2018
01:52:15,250 --> 01:52:29,640
as well right so we'd say write the

2019
01:52:19,630 --> 01:52:32,909
header out then write those arrays and

2020
01:52:29,640 --> 01:52:32,910
that'd be it

2021
01:52:43,590 --> 01:52:55,210
Tiger a size asset type size type arrays

2022
01:52:49,659 --> 01:52:59,470
size and asset race size and each of

2023
01:52:55,210 --> 01:53:07,000
these is just the temporary buffer we

2024
01:52:59,470 --> 01:53:11,170
use to create it right so that's really

2025
01:53:07,000 --> 01:53:12,609
all we need to do there so really all we

2026
01:53:11,170 --> 01:53:15,609
need to do is implement these two

2027
01:53:12,609 --> 01:53:18,399
functions that gather which ones are

2028
01:53:15,609 --> 01:53:21,579
relevant to this file because the assets

2029
01:53:18,399 --> 01:53:23,859
are kind of scattered we don't have them

2030
01:53:21,579 --> 01:53:26,800
stored per file in any particular layer

2031
01:53:23,859 --> 01:53:30,519
there like a global list

2032
01:53:26,800 --> 01:53:37,449
well global array so we need to actually

2033
01:53:30,520 --> 01:53:39,220
have some method here of Lupi through

2034
01:53:37,449 --> 01:53:40,779
them right and what we're gonna do is

2035
01:53:39,220 --> 01:53:43,000
we're just gonna look at each individual

2036
01:53:40,779 --> 01:53:44,920
asset and see which file index it is if

2037
01:53:43,000 --> 01:53:48,460
it's the file index that we're writing

2038
01:53:44,920 --> 01:53:59,670
then off we go and I guess that behooves

2039
01:53:48,460 --> 01:53:59,670
us to can write it like this

2040
01:54:01,619 --> 01:54:05,920
because that way we can check that

2041
01:54:03,489 --> 01:54:09,460
without having to do a subtraction to

2042
01:54:05,920 --> 01:54:11,079
figure out which file index it is so

2043
01:54:09,460 --> 01:54:15,539
again pretty straightforward here it's

2044
01:54:11,079 --> 01:54:15,539
just like how many assets are there

2045
01:54:27,020 --> 01:54:34,140
so those that would give us a loop over

2046
01:54:31,380 --> 01:54:38,690
all of the assets and then what we can

2047
01:54:34,140 --> 01:54:38,690
do tomorrow is just do that gather right

2048
01:54:47,630 --> 01:55:13,909
that's supposed to be an S these are

2049
01:54:56,189 --> 01:55:21,238
supposed to be dots so are these so

2050
01:55:13,909 --> 01:55:28,670
syntax errors everywhere what is the

2051
01:55:21,238 --> 01:55:28,669
problem oh yeah there is that

2052
01:55:43,279 --> 01:55:48,710
well that's not actually that's gonna go

2053
01:55:49,430 --> 01:55:55,810
anyway um yeah

2054
01:55:52,729 --> 01:55:55,809
[Music]

2055
01:56:04,760 --> 01:56:26,869
asset type array size asset types and

2056
01:56:20,090 --> 01:56:28,640
this is a sets three don't ask me why I

2057
01:56:26,869 --> 01:56:35,229
named it that probably should change

2058
01:56:28,640 --> 01:56:35,230
that all right

2059
01:56:48,128 --> 01:56:56,328
and this can probably just go like that

2060
01:56:53,378 --> 01:56:56,868
and off we go so I think that's

2061
01:56:56,328 --> 01:57:00,768
everything

2062
01:56:56,868 --> 01:57:05,018
and that sets us up tomorrow to actually

2063
01:57:00,769 --> 01:57:15,889
finish and start working on the tags

2064
01:57:05,019 --> 01:57:17,088
problem so that won't be fun because we

2065
01:57:15,889 --> 01:57:19,668
don't really know what we want to do

2066
01:57:17,088 --> 01:57:29,658
there exactly but I'll go ahead and Q&amp;A

2067
01:57:19,668 --> 01:57:31,748
now here we are we've been making an

2068
01:57:29,658 --> 01:57:32,929
editor for the engine know that it is

2069
01:57:31,748 --> 01:57:35,328
generated

2070
01:57:32,929 --> 01:57:38,588
it's a procedurally generated game so

2071
01:57:35,328 --> 01:57:38,588
there isn't an editor in that sense

2072
01:57:40,929 --> 01:57:48,550
today I mean to put word mark know I

2073
01:57:43,609 --> 01:57:48,550
didn't is that what I typed

2074
01:58:01,939 --> 01:58:05,698
Thanks

2075
01:58:03,149 --> 01:58:08,250
I did I did not although some people do

2076
01:58:05,698 --> 01:58:12,049
pronounce it warder like I want to get a

2077
01:58:08,250 --> 01:58:12,050
drink of water would err

2078
01:58:20,079 --> 01:58:23,449
my name is I may have missed this but

2079
01:58:22,340 --> 01:58:24,829
where are you handling the growth of an

2080
01:58:23,449 --> 01:58:26,300
existing asset presumably you'd still

2081
01:58:24,829 --> 01:58:28,159
need to mem copy a huge portion of the

2082
01:58:26,300 --> 01:58:30,500
bitmaps to insert new data or move from

2083
01:58:28,159 --> 01:58:33,319
the middle no you don't really need to

2084
01:58:30,500 --> 01:58:37,300
because again one of the things to

2085
01:58:33,319 --> 01:58:40,159
remember is that you don't actually care

2086
01:58:37,300 --> 01:58:42,170
during development whether you have

2087
01:58:40,159 --> 01:58:45,260
extra bitmaps sitting around in the file

2088
01:58:42,170 --> 01:58:47,899
right so let's suppose that a previous

2089
01:58:45,260 --> 01:58:49,579
time the bitmap was 64 by 64 or

2090
01:58:47,899 --> 01:58:52,279
something right and the new ones like

2091
01:58:49,579 --> 01:58:54,019
1024 by 1024 or something right just

2092
01:58:52,279 --> 01:58:55,670
rewrite the new one to the end of the

2093
01:58:54,020 --> 01:58:57,680
array if it's bigger just write a new

2094
01:58:55,670 --> 01:59:01,220
one and leave the old one lying around

2095
01:58:57,680 --> 01:59:02,750
right when you then at the end at the

2096
01:59:01,220 --> 01:59:05,270
very end when you go to ship the game

2097
01:59:02,750 --> 01:59:07,970
you can build a pristine one that only

2098
01:59:05,270 --> 01:59:09,620
has the exact ones you need in there but

2099
01:59:07,970 --> 01:59:11,210
you don't have to keep other development

2100
01:59:09,619 --> 01:59:13,010
there's no reason why during development

2101
01:59:11,210 --> 01:59:14,239
you can't just have old old bitmaps

2102
01:59:13,010 --> 01:59:21,880
lying around the file that just aren't

2103
01:59:14,239 --> 01:59:21,880
referenced right

2104
02:00:03,969 --> 02:00:08,288
cynic khalipa I probably missed this but

2105
02:00:06,158 --> 02:00:11,859
why do you want to continuously pack the

2106
02:00:08,288 --> 02:00:14,649
bitmaps and the header so basically what

2107
02:00:11,859 --> 02:00:23,259
we want to do is we want to have control

2108
02:00:14,649 --> 02:00:25,170
over our distribution file format and so

2109
02:00:23,260 --> 02:00:28,300
this gets into a bit of a philosophical

2110
02:00:25,170 --> 02:00:30,550
situation that probably isn't that bad

2111
02:00:28,300 --> 02:00:33,099
on something like handmade hero but it

2112
02:00:30,550 --> 02:00:40,869
gets bad as you get bigger

2113
02:00:33,099 --> 02:00:48,340
I don't like load times load times are

2114
02:00:40,868 --> 02:00:52,779
really bad and they're actually just

2115
02:00:48,340 --> 02:00:55,869
still really bad even today and so I

2116
02:00:52,779 --> 02:00:58,840
don't want to iterate over all of like

2117
02:00:55,868 --> 02:01:00,299
the PNG source files every time you

2118
02:00:58,840 --> 02:01:04,659
start up the game

2119
02:01:00,300 --> 02:01:06,969
like that's just inefficient and I want

2120
02:01:04,658 --> 02:01:09,038
the game to start up immediately and the

2121
02:01:06,969 --> 02:01:11,698
only way to really do that is to have at

2122
02:01:09,038 --> 02:01:14,469
least the metadata sitting around

2123
02:01:11,698 --> 02:01:16,868
telling you where all the information is

2124
02:01:14,469 --> 02:01:21,639
that you might need to grab you know

2125
02:01:16,868 --> 02:01:25,929
having an ability to directly grab it so

2126
02:01:21,639 --> 02:01:29,429
in order to do that you need to unpack

2127
02:01:25,929 --> 02:01:32,498
sprite sheets into individual tiles and

2128
02:01:29,429 --> 02:01:37,480
build a metadata set that can access

2129
02:01:32,498 --> 02:01:39,908
those tiles quickly so that is the part

2130
02:01:37,479 --> 02:01:41,919
that I want to always be true about the

2131
02:01:39,908 --> 02:01:43,679
game whenever it's running not just a

2132
02:01:41,920 --> 02:01:47,739
shipping version but at all times I

2133
02:01:43,679 --> 02:01:49,420
don't really care if they're packed like

2134
02:01:47,738 --> 02:01:52,029
if you wanted to do a separate kind of

2135
02:01:49,420 --> 02:01:54,519
system that just views files everywhere

2136
02:01:52,029 --> 02:01:55,988
but it actually still built that

2137
02:01:54,519 --> 02:01:57,940
information correctly so that it was

2138
02:01:55,988 --> 02:02:01,388
fast and has no load time that's

2139
02:01:57,939 --> 02:02:03,069
actually fine I don't mind right I just

2140
02:02:01,389 --> 02:02:04,359
figured why not pack them into a single

2141
02:02:03,069 --> 02:02:05,738
file it's just easier and then I don't

2142
02:02:04,359 --> 02:02:10,139
have a billion file sing around on my

2143
02:02:05,738 --> 02:02:10,138
drive you know

2144
02:02:21,149 --> 02:02:27,389
his asset file actually a file yes it is

2145
02:02:25,350 --> 02:02:32,720
it is not something we just store in

2146
02:02:27,390 --> 02:02:32,720
memory so basically an asset file is

2147
02:02:33,489 --> 02:02:42,859
well okay it rep it is remembering the

2148
02:02:40,130 --> 02:02:44,239
fact that there is a file it itself is

2149
02:02:42,859 --> 02:02:45,559
not stored in the file if that's what

2150
02:02:44,239 --> 02:02:48,130
you mean I'm not sure which mean but

2151
02:02:45,560 --> 02:02:50,690
like for example when you load the game

2152
02:02:48,130 --> 02:02:53,630
what happens is handmade hero loads all

2153
02:02:50,689 --> 02:02:56,000
of the HHA files that it finds so

2154
02:02:53,630 --> 02:02:58,489
currently it loads these five for each

2155
02:02:56,000 --> 02:03:01,310
one of these it will create an asset

2156
02:02:58,489 --> 02:03:03,529
file so it remembers the oh and it has

2157
02:03:01,310 --> 02:03:05,660
an open handle to it so whenever you

2158
02:03:03,529 --> 02:03:09,609
need a resource it can just fire off the

2159
02:03:05,659 --> 02:03:09,609
load immediately and grab it from there

2160
02:03:16,229 --> 02:03:19,719
thanks separate question again from much

2161
02:03:18,430 --> 02:03:22,510
earlier stuff I may have missed what is

2162
02:03:19,720 --> 02:03:24,730
the likelihood of a hash collision with

2163
02:03:22,510 --> 02:03:27,909
the asset source names and how do you

2164
02:03:24,729 --> 02:03:30,369
handle that well we don't use hash

2165
02:03:27,909 --> 02:03:35,909
disambiguation the hash is just a way to

2166
02:03:30,369 --> 02:03:38,890
speed up the lookup so it's not an issue

2167
02:03:35,909 --> 02:03:43,599
would be the way to say it we do a full

2168
02:03:38,890 --> 02:03:52,930
string compare right I mean is this what

2169
02:03:43,600 --> 02:04:01,870
you're talking about so hash collisions

2170
02:03:52,930 --> 02:04:02,800
are not really relevant to us so we

2171
02:04:01,869 --> 02:04:03,909
wouldn't keeping different files for

2172
02:04:02,800 --> 02:04:05,409
different assets and keeping another

2173
02:04:03,909 --> 02:04:10,779
file just for the index be better for

2174
02:04:05,409 --> 02:04:16,569
source control so it depends what you

2175
02:04:10,779 --> 02:04:20,079
check in to source control I guess is be

2176
02:04:16,569 --> 02:04:21,909
the way to say it for our purposes we

2177
02:04:20,079 --> 02:04:23,100
can't check in any access to source

2178
02:04:21,909 --> 02:04:25,569
control so it doesn't matter

2179
02:04:23,100 --> 02:04:28,180
github can't handle the size of the

2180
02:04:25,569 --> 02:04:29,979
files that we would put in there they

2181
02:04:28,180 --> 02:04:33,039
don't let you have you know ten

2182
02:04:29,979 --> 02:04:35,769
gigabytes of assets on the bait on the

2183
02:04:33,039 --> 02:04:38,439
kind of repositories we have I don't

2184
02:04:35,770 --> 02:04:42,060
know if they let you do that period

2185
02:04:38,439 --> 02:04:44,769
actually they might I don't know

2186
02:04:42,060 --> 02:04:46,539
if you were designing this for source

2187
02:04:44,770 --> 02:04:47,950
code control because you actually do

2188
02:04:46,539 --> 02:04:51,789
have source code control of your own

2189
02:04:47,949 --> 02:04:53,289
that would actually work then it depends

2190
02:04:51,789 --> 02:04:57,519
whether you check in these dependent

2191
02:04:53,289 --> 02:04:58,960
files or not right the way that I would

2192
02:04:57,520 --> 02:05:00,850
probably do it is I had check in the

2193
02:04:58,960 --> 02:05:06,239
source files and I'd let machines build

2194
02:05:00,850 --> 02:05:08,489
their own on the first run probably and

2195
02:05:06,238 --> 02:05:10,659
the reason for that is because

2196
02:05:08,488 --> 02:05:12,189
individual people need ability to modify

2197
02:05:10,659 --> 02:05:17,229
the files and I don't really want them

2198
02:05:12,189 --> 02:05:20,259
to check those in necessarily because

2199
02:05:17,229 --> 02:05:21,519
they tend to be you you have to do a

2200
02:05:20,260 --> 02:05:23,140
bunch of work to make sure that works

2201
02:05:21,520 --> 02:05:24,850
correctly you need to have those be

2202
02:05:23,140 --> 02:05:26,469
tagged properly so that people don't

2203
02:05:24,850 --> 02:05:28,780
check in things have been processed with

2204
02:05:26,469 --> 02:05:29,619
debug versions of a processor and you

2205
02:05:28,779 --> 02:05:31,269
got to make sure the name

2206
02:05:29,619 --> 02:05:32,739
reflect what version of the code

2207
02:05:31,270 --> 02:05:36,310
generated it and all these other things

2208
02:05:32,739 --> 02:05:38,260
so there's a lot more complexity that

2209
02:05:36,310 --> 02:05:42,910
goes into an asset pipeline if you want

2210
02:05:38,260 --> 02:05:45,630
to do the full deal but we're not really

2211
02:05:42,909 --> 02:05:45,630
going to be doing that

2212
02:06:01,789 --> 02:06:05,609
what makes I OC piece it's a great API

2213
02:06:04,289 --> 02:06:07,019
how does it work better than on the rape

2214
02:06:05,609 --> 02:06:11,239
you guys it works for the inner piece

2215
02:06:07,020 --> 02:06:13,860
because it allows you to put all of your

2216
02:06:11,239 --> 02:06:15,750
so it allows you to unify all of your

2217
02:06:13,859 --> 02:06:18,299
read and writing requests through a

2218
02:06:15,750 --> 02:06:23,909
single message queue that multiple

2219
02:06:18,300 --> 02:06:26,820
threads can wait on right and it allows

2220
02:06:23,909 --> 02:06:31,550
it uses your pointers like basically it

2221
02:06:26,819 --> 02:06:31,549
allows you to use C or C++ style

2222
02:06:32,029 --> 02:06:36,149
extension like if you know like let's

2223
02:06:34,140 --> 02:06:40,079
say you got a C++ class or something

2224
02:06:36,149 --> 02:06:44,129
well okay maybe not a C++ class to C++

2225
02:06:40,079 --> 02:06:46,619
is dumb but let's say you have C and

2226
02:06:44,130 --> 02:06:48,779
you're doing extension with C it allows

2227
02:06:46,619 --> 02:06:53,819
you to use your own structures as the

2228
02:06:48,779 --> 02:06:57,119
i/o structures as well and if C++ wasn't

2229
02:06:53,819 --> 02:07:00,000
you know made by monkeys it would have

2230
02:06:57,119 --> 02:07:05,309
worked there too it it only doesn't work

2231
02:07:00,000 --> 02:07:06,960
on C++ because C++ is dumb but it's just

2232
02:07:05,310 --> 02:07:09,960
structured very well for allowing you to

2233
02:07:06,960 --> 02:07:12,689
use it where it falls down is actually

2234
02:07:09,960 --> 02:07:15,600
not anything wrong with iOS CPI OCP I

2235
02:07:12,689 --> 02:07:17,609
think is pretty great Oh almost across

2236
02:07:15,600 --> 02:07:21,300
the board it's an API where it falls

2237
02:07:17,609 --> 02:07:23,189
down is that Windows itself doesn't

2238
02:07:21,300 --> 02:07:25,800
actually allow you to use iocp for

2239
02:07:23,189 --> 02:07:28,710
everything so at that point it sort of

2240
02:07:25,800 --> 02:07:32,039
becomes not that useful for anything

2241
02:07:28,710 --> 02:07:34,560
other than just like servers because you

2242
02:07:32,039 --> 02:07:42,380
can't use iocp for things like your

2243
02:07:34,560 --> 02:07:48,990
Windows message queue or you know

2244
02:07:42,380 --> 02:07:51,000
wave-wave out completion or trying to

2245
02:07:48,989 --> 02:07:56,609
think of some other things grep the

2246
02:07:51,000 --> 02:07:58,020
graphics fences right and so what you

2247
02:07:56,609 --> 02:07:59,789
would want to do is have all of those

2248
02:07:58,020 --> 02:08:01,860
things go through iocp so that basically

2249
02:07:59,789 --> 02:08:04,350
you just have a worker thread one per

2250
02:08:01,859 --> 02:08:06,059
core if they all block on the i/o CP and

2251
02:08:04,350 --> 02:08:07,200
as soon as there's something to do it

2252
02:08:06,060 --> 02:08:09,810
comes in on the iocp

2253
02:08:07,199 --> 02:08:13,679
right it'd be perfect and you can do

2254
02:08:09,810 --> 02:08:15,690
that as long as all you're doing is i/o

2255
02:08:13,680 --> 02:08:18,659
but as soon as you add things other than

2256
02:08:15,689 --> 02:08:20,489
IO which games do it all falls apart and

2257
02:08:18,659 --> 02:08:23,279
so the problem with iocp

2258
02:08:20,489 --> 02:08:26,039
is that it doesn't it's not embraced as

2259
02:08:23,279 --> 02:08:27,569
the operating system api and so it's

2260
02:08:26,039 --> 02:08:29,579
really only useful for servers as a

2261
02:08:27,569 --> 02:08:31,229
result which still makes it relevant to

2262
02:08:29,579 --> 02:08:33,689
games because like your game server can

2263
02:08:31,229 --> 02:08:36,859
still do this but it makes it much less

2264
02:08:33,689 --> 02:08:40,529
useful for game proper like a game

2265
02:08:36,859 --> 02:08:42,029
client because most of the things that

2266
02:08:40,529 --> 02:08:44,599
you actually care about can't go through

2267
02:08:42,029 --> 02:08:44,599
il CP

2268
02:08:57,979 --> 02:09:01,529
ureteral I was thinking on the direction

2269
02:09:00,060 --> 02:09:04,490
of always having a running build on

2270
02:09:01,529 --> 02:09:06,840
source control yeah if you're gonna

2271
02:09:04,489 --> 02:09:08,369
always have a running build on source

2272
02:09:06,840 --> 02:09:10,920
control that doesn't have to process

2273
02:09:08,369 --> 02:09:13,500
assets first because that we still would

2274
02:09:10,920 --> 02:09:15,869
right you'd hit run and it would have to

2275
02:09:13,500 --> 02:09:17,729
process the PM G's right the first time

2276
02:09:15,869 --> 02:09:19,199
you ran it so it still would be a

2277
02:09:17,729 --> 02:09:21,209
running built in source control it just

2278
02:09:19,199 --> 02:09:24,269
wouldn't run immediately like it would

2279
02:09:21,210 --> 02:09:25,380
if you'd run it before but if you

2280
02:09:24,270 --> 02:09:29,700
actually wanted to check out and run

2281
02:09:25,380 --> 02:09:31,230
immediately you have a lot of work to do

2282
02:09:29,699 --> 02:09:33,329
to really make a good system that works

2283
02:09:31,229 --> 02:09:34,709
that way I would almost argue you can't

2284
02:09:33,329 --> 02:09:36,059
really make a system that works that way

2285
02:09:34,710 --> 02:09:38,520
unless you write your own source code

2286
02:09:36,060 --> 02:09:39,570
control current source code control just

2287
02:09:38,520 --> 02:09:46,830
really isn't up to the task

2288
02:09:39,569 --> 02:09:48,989
in my opinion when where am i doing the

2289
02:09:46,829 --> 02:09:52,250
witness development presentation that is

2290
02:09:48,989 --> 02:09:52,250
not announced yet

2291
02:09:59,970 --> 02:10:03,880
I've read the sequel quick follow-up is

2292
02:10:02,289 --> 02:10:06,369
that just a matter of using the one

2293
02:10:03,880 --> 02:10:11,880
massachu for more than i/o or when you

2294
02:10:06,369 --> 02:10:11,880
need to use multiple message queues so

2295
02:10:18,600 --> 02:10:26,950
the way to think about it is this the

2296
02:10:24,939 --> 02:10:33,609
ideal system allows you to have one

2297
02:10:26,949 --> 02:10:37,420
thread per core waiting on a cue and the

2298
02:10:33,609 --> 02:10:40,569
cue tells that core what the next thing

2299
02:10:37,420 --> 02:10:44,829
is to do right because then you never

2300
02:10:40,569 --> 02:10:46,299
have unpredictability in thread

2301
02:10:44,829 --> 02:10:53,769
switching because there are no threads

2302
02:10:46,300 --> 02:10:55,659
to switch iocp does that properly when

2303
02:10:53,770 --> 02:10:58,780
you are only doing i/o because you can

2304
02:10:55,659 --> 02:11:01,359
create an i/o CP and then you can point

2305
02:10:58,779 --> 02:11:04,809
all of your i/o towards that iocp and

2306
02:11:01,359 --> 02:11:07,019
you're done as soon as you have anything

2307
02:11:04,810 --> 02:11:10,530
else you would want to do at all

2308
02:11:07,020 --> 02:11:14,890
anything else it doesn't work anymore

2309
02:11:10,529 --> 02:11:21,579
because even if you create other

2310
02:11:14,890 --> 02:11:24,760
separate message queues right you can't

2311
02:11:21,579 --> 02:11:28,300
wait on an i/o CP and another message to

2312
02:11:24,760 --> 02:11:30,970
you at the same time so you can't even

2313
02:11:28,300 --> 02:11:34,840
wait on to i/o cps at the same time you

2314
02:11:30,970 --> 02:11:38,590
can only wait on one right so again it

2315
02:11:34,840 --> 02:11:41,230
as soon as you come out of that system

2316
02:11:38,590 --> 02:11:43,239
and need to look at a wider system it

2317
02:11:41,229 --> 02:11:45,759
just all falls apart largely I think

2318
02:11:43,239 --> 02:11:48,569
because Windows does not embrace iocp

2319
02:11:45,760 --> 02:11:48,570
as its method

2320
02:11:54,719 --> 02:12:01,328
and so it makes iocp very fragile and

2321
02:11:58,809 --> 02:12:05,860
not very useful for other things because

2322
02:12:01,328 --> 02:12:09,728
you can't there is no way to work around

2323
02:12:05,859 --> 02:12:12,248
it either right like you can't there's

2324
02:12:09,729 --> 02:12:15,880
nothing you can do you you can't use io

2325
02:12:12,248 --> 02:12:17,708
CPS with a worker thread model if those

2326
02:12:15,880 --> 02:12:19,328
worker threads have to do anything else

2327
02:12:17,708 --> 02:12:21,099
because they'll never know that there's

2328
02:12:19,328 --> 02:12:25,029
something else to do they can only wait

2329
02:12:21,099 --> 02:12:28,199
on the iocp or some other semaphore so

2330
02:12:25,029 --> 02:12:31,118
for example and this is nuts

2331
02:12:28,198 --> 02:12:40,058
wait for multiple objects doesn't work

2332
02:12:31,118 --> 02:12:43,238
with IOC fees right so again the design

2333
02:12:40,059 --> 02:12:45,400
of the INA cps was good but they're

2334
02:12:43,238 --> 02:12:47,049
useless is severely limited because none

2335
02:12:45,399 --> 02:12:49,268
of the other windows api is work with

2336
02:12:47,050 --> 02:12:50,619
them and so once you end up in a

2337
02:12:49,269 --> 02:12:52,689
situation where you've got this thing

2338
02:12:50,618 --> 02:12:54,339
that can't work with anything else it

2339
02:12:52,689 --> 02:12:55,090
becomes impossible to actually use io

2340
02:12:54,340 --> 02:12:58,989
CPS

2341
02:12:55,090 --> 02:13:01,929
for multimedia applications because the

2342
02:12:58,988 --> 02:13:06,069
only thing you can use iocp for in a

2343
02:13:01,929 --> 02:13:12,899
worker thread model system is IO

2344
02:13:06,069 --> 02:13:21,308
it's literally IO CPS or not right so

2345
02:13:12,899 --> 02:13:22,658
that's the problem I desperately wished

2346
02:13:21,309 --> 02:13:23,949
that the architecture of Windows had

2347
02:13:22,658 --> 02:13:25,958
been everything goes through an IO CP

2348
02:13:23,948 --> 02:13:29,259
you want a Windows fence it triggers an

2349
02:13:25,958 --> 02:13:31,179
IO CP right you want to know when the

2350
02:13:29,260 --> 02:13:31,958
sounds done playing or a buffers under

2351
02:13:31,179 --> 02:13:33,550
flowing and sound

2352
02:13:31,958 --> 02:13:36,908
it's an IO CP when a buffer completes

2353
02:13:33,550 --> 02:13:39,639
right that would have been an amazing

2354
02:13:36,908 --> 02:13:43,138
world where you know all the birds were

2355
02:13:39,639 --> 02:13:43,139
singing and and the Sun was shining

2356
02:13:43,288 --> 02:13:47,800
Windows is nowhere close to that because

2357
02:13:45,609 --> 02:13:50,589
because of course we all know why

2358
02:13:47,800 --> 02:13:53,279
because they were too busy popping up an

2359
02:13:50,590 --> 02:13:55,989
ad for their stupid Authenticator app

2360
02:13:53,279 --> 02:13:57,788
like they had resources for that they

2361
02:13:55,988 --> 02:13:59,978
didn't have resources to make a clean

2362
02:13:57,788 --> 02:14:01,779
interface for their actual message model

2363
02:13:59,979 --> 02:14:04,320
in their APIs ISM that's not on the

2364
02:14:01,779 --> 02:14:06,340
table like that's never happening right

2365
02:14:04,319 --> 02:14:08,259
but what is happening

2366
02:14:06,340 --> 02:14:10,510
is Cortana integrated into my desktop

2367
02:14:08,260 --> 02:14:13,210
listening to what I say and doing stupid

2368
02:14:10,510 --> 02:14:15,400
stuff I didn't want it to advertisements

2369
02:14:13,210 --> 02:14:18,429
on my home screen and whatever that

2370
02:14:15,399 --> 02:14:22,509
stupid toast was that popped up and told

2371
02:14:18,429 --> 02:14:25,359
me to try Microsoft Authenticator they

2372
02:14:22,510 --> 02:14:29,949
found time for that but time to actually

2373
02:14:25,359 --> 02:14:31,329
make their architecture work sorry guess

2374
02:14:29,948 --> 02:14:33,969
we couldn't find a meeting room for that

2375
02:14:31,329 --> 02:14:35,380
we were too busy having like an argument

2376
02:14:33,969 --> 02:14:36,819
about whether Clippy should come back

2377
02:14:35,380 --> 02:14:38,109
and dance around on top of the Start

2378
02:14:36,819 --> 02:14:47,789
menu before you could click on anything

2379
02:14:38,109 --> 02:14:47,789
that said

2380
02:15:28,079 --> 02:15:30,800
all right

2381
02:15:32,810 --> 02:15:39,560
we closed down thank you everyone for

2382
02:15:38,359 --> 02:15:41,029
joining me for the episode of handmade

2383
02:15:39,560 --> 02:15:42,710
heroes I'm a pleasure coding with you as

2384
02:15:41,029 --> 02:15:45,529
always I think we're almost done with

2385
02:15:42,710 --> 02:15:50,420
our journey for adding like kind of a

2386
02:15:45,529 --> 02:15:54,590
new artist friendlier asset updating

2387
02:15:50,420 --> 02:15:56,630
system to handmade hero we did the PNG

2388
02:15:54,590 --> 02:15:58,489
reader we've done incremental update of

2389
02:15:56,630 --> 02:16:00,520
the asset files so now really all we

2390
02:15:58,489 --> 02:16:03,170
have to do is tackle the tags problem

2391
02:16:00,520 --> 02:16:04,490
and I think we're good to go

2392
02:16:03,170 --> 02:16:05,899
so we'll start taking a look at that

2393
02:16:04,489 --> 02:16:06,859
tomorrow hope to see you back here for

2394
02:16:05,899 --> 02:16:10,219
that

2395
02:16:06,859 --> 02:16:11,420
and then we just have debugging right we

2396
02:16:10,220 --> 02:16:14,780
just got a debugger thing and make sure

2397
02:16:11,420 --> 02:16:15,920
it actually works well because I'm sure

2398
02:16:14,779 --> 02:16:18,619
we've got some mistakes in there

2399
02:16:15,920 --> 02:16:20,029
somewhere there always are but that was

2400
02:16:18,619 --> 02:16:21,199
pretty painless actually didn't take

2401
02:16:20,029 --> 02:16:23,779
that long to do from start to finish

2402
02:16:21,199 --> 02:16:26,119
honestly even including the PNG reader

2403
02:16:23,779 --> 02:16:28,189
which I thought was gonna be worse than

2404
02:16:26,119 --> 02:16:31,359
it was so not too bad I'm actually

2405
02:16:28,189 --> 02:16:34,369
pretty happy with that not a huge deal

2406
02:16:31,359 --> 02:16:36,409
alright that's about it if you want to

2407
02:16:34,370 --> 02:16:37,760
follow along with handmade hero on your

2408
02:16:36,409 --> 02:16:40,280
own you can always pre-order it on

2409
02:16:37,760 --> 02:16:43,190
handmade here org it comes with a source

2410
02:16:40,280 --> 02:16:45,349
code so you can play around with it

2411
02:16:43,190 --> 02:16:47,569
yourself you could try your hand doing

2412
02:16:45,349 --> 02:16:49,969
the tag system if you are interested in

2413
02:16:47,569 --> 02:16:53,449
and see if you can do that before I get

2414
02:16:49,968 --> 02:16:55,250
to it we also have a updated website

2415
02:16:53,450 --> 02:16:57,559
thing that you can use now if you want

2416
02:16:55,250 --> 02:16:59,090
to we have a watch page you can use to

2417
02:16:57,558 --> 02:17:00,558
watch the stream and it also has the

2418
02:16:59,090 --> 02:17:03,590
episode archive on it and a bunch of

2419
02:17:00,558 --> 02:17:05,840
buttons you can use to to jump to things

2420
02:17:03,590 --> 02:17:08,510
like the mailing list we have the

2421
02:17:05,840 --> 02:17:10,940
handmade fund also has been updated now

2422
02:17:08,510 --> 02:17:13,040
and it's got a little explanation video

2423
02:17:10,940 --> 02:17:15,440
about what it is for funding community

2424
02:17:13,040 --> 02:17:17,000
projects that other folks besides me are

2425
02:17:15,440 --> 02:17:18,860
doing definitely check that out to get a

2426
02:17:17,000 --> 02:17:20,299
chance and of course there's always you

2427
02:17:18,860 --> 02:17:21,739
can click on the handmade hero head to

2428
02:17:20,299 --> 02:17:22,909
get to any other referrer Molly Rocket

2429
02:17:21,739 --> 02:17:24,440
websites if you're interested and

2430
02:17:22,909 --> 02:17:27,079
reading my tech blog or anything like

2431
02:17:24,440 --> 02:17:30,409
that I've seen what we're up to that's

2432
02:17:27,079 --> 02:17:33,079
an easy way to to sort of get there from

2433
02:17:30,409 --> 02:17:34,218
the handmade hero site as well that's it

2434
02:17:33,079 --> 02:17:36,379
for today I'll see everyone back here

2435
02:17:34,218 --> 02:17:37,789
tomorrow for the tag stuff until then

2436
02:17:36,379 --> 02:17:40,119
have fun programming I'll see you on the

2437
02:17:37,790 --> 02:17:40,120
Internet

