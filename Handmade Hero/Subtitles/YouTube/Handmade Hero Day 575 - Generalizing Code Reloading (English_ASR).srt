1
00:00:02,029 --> 00:00:06,568
hello everyone and welcome to hand made

2
00:00:04,740 --> 00:00:10,129
here oh sure we could cleat game live on

3
00:00:06,569 --> 00:00:12,809
stream we are at the immediate moment

4
00:00:10,130 --> 00:00:14,040
about start doing some handmade hero

5
00:00:12,808 --> 00:00:17,429
programming but I just wanted to mention

6
00:00:14,039 --> 00:00:20,399
for people who watched yesterday's

7
00:00:17,429 --> 00:00:23,129
attempt to build tensorflow we left it

8
00:00:20,399 --> 00:00:24,479
running so it could just run because we

9
00:00:23,129 --> 00:00:26,189
know that tensorflow takes hours to

10
00:00:24,480 --> 00:00:30,210
build and it did but it eventually

11
00:00:26,189 --> 00:00:33,359
finished and if you run it again now

12
00:00:30,210 --> 00:00:36,058
which is I just did I it does complete

13
00:00:33,359 --> 00:00:39,479
so I mean I don't know that we really

14
00:00:36,058 --> 00:00:44,250
built tensorflow perfectly but it sort

15
00:00:39,479 --> 00:00:46,439
of works so now if we build it we tried

16
00:00:44,250 --> 00:00:48,269
doing a rebuild it took 48 seconds to

17
00:00:46,439 --> 00:00:50,399
not do anything but tell us it was built

18
00:00:48,270 --> 00:00:52,920
and now if you do it hot

19
00:00:50,399 --> 00:00:55,079
it only takes 4 seconds to not build

20
00:00:52,920 --> 00:00:57,859
anything which by the way is the time it

21
00:00:55,079 --> 00:01:02,759
takes to completely build a fade hero

22
00:00:57,859 --> 00:01:05,700
from start to finish but hey it works so

23
00:01:02,759 --> 00:01:08,609
now we have a tensorflow build and so at

24
00:01:05,700 --> 00:01:11,280
some point I think we might play around

25
00:01:08,609 --> 00:01:12,478
with that I think a fun thing to do

26
00:01:11,280 --> 00:01:14,099
would be to go take one of their

27
00:01:12,478 --> 00:01:16,739
Colonels and show how if you just

28
00:01:14,099 --> 00:01:19,640
rewrite it in C it's probably like 20

29
00:01:16,739 --> 00:01:22,978
lines of code and compiles in you know

30
00:01:19,640 --> 00:01:24,780
instantaneously because it was so

31
00:01:22,978 --> 00:01:26,640
hilarious how bad the tensorflow build

32
00:01:24,780 --> 00:01:28,950
was I mean and you know I've never seen

33
00:01:26,640 --> 00:01:31,379
it build that bad before in my life

34
00:01:28,950 --> 00:01:33,030
I mean sure there are builds that are

35
00:01:31,379 --> 00:01:35,789
worse than that somewhere but it's it's

36
00:01:33,030 --> 00:01:37,560
amazing to me that that you know it's

37
00:01:35,790 --> 00:01:39,270
amazing to me that that trillion dollar

38
00:01:37,560 --> 00:01:41,879
companies I mean it just goes to show

39
00:01:39,269 --> 00:01:44,819
you that what we do with programming is

40
00:01:41,879 --> 00:01:47,280
I would say it's largely just mostly

41
00:01:44,819 --> 00:01:48,719
about honor I guess to program well

42
00:01:47,280 --> 00:01:49,859
because it's pretty clear that you can

43
00:01:48,719 --> 00:01:51,328
have no idea what you're doing and still

44
00:01:49,859 --> 00:01:54,780
have actually into our company right and

45
00:01:51,328 --> 00:01:56,218
tensorflow is the proof of that there

46
00:01:54,780 --> 00:01:58,590
just isn't competition out there right

47
00:01:56,218 --> 00:01:59,789
so mostly your success as a company is

48
00:01:58,590 --> 00:02:01,320
about things that have nothing to do

49
00:01:59,790 --> 00:02:02,609
with programming because if it was about

50
00:02:01,319 --> 00:02:06,898
programming there's no way this would

51
00:02:02,609 --> 00:02:10,038
ever fly all right so let's go ahead and

52
00:02:06,899 --> 00:02:11,780
get started on regular handmade hero

53
00:02:10,038 --> 00:02:14,509
[Music]

54
00:02:11,780 --> 00:02:15,770
where we left off before is we were sort

55
00:02:14,509 --> 00:02:21,229
of at the point where we're like look if

56
00:02:15,770 --> 00:02:23,330
we want to do some some reasonable you

57
00:02:21,229 --> 00:02:24,469
know lighting we're trying to play

58
00:02:23,330 --> 00:02:26,600
around that and seeing what we could do

59
00:02:24,469 --> 00:02:28,490
to get it to work and it's just that's a

60
00:02:26,599 --> 00:02:29,810
very big investment right and we played

61
00:02:28,490 --> 00:02:33,080
around with some things we weren't

62
00:02:29,810 --> 00:02:35,870
really able to do anything particularly

63
00:02:33,080 --> 00:02:37,730
simple that would allow us to get

64
00:02:35,870 --> 00:02:39,349
reasonable lighting going on so we have

65
00:02:37,729 --> 00:02:40,219
a fairly complex set of things in there

66
00:02:39,349 --> 00:02:42,680
now

67
00:02:40,219 --> 00:02:45,050
but they're not really quite what they

68
00:02:42,680 --> 00:02:47,959
need to be you can see that our

69
00:02:45,050 --> 00:02:51,980
interpolation works pretty well and if

70
00:02:47,959 --> 00:02:54,530
we just have you know a basic single

71
00:02:51,979 --> 00:02:56,899
light source and stuff surprisingly we

72
00:02:54,530 --> 00:02:59,030
get really good results out of that but

73
00:02:56,900 --> 00:03:01,069
you know that we don't have a really

74
00:02:59,030 --> 00:03:02,689
solid plan for how we extend past that

75
00:03:01,069 --> 00:03:05,419
and there's just a lot of work that has

76
00:03:02,689 --> 00:03:07,579
to be done in order to get there so I

77
00:03:05,419 --> 00:03:09,439
don't know exactly how we want to go

78
00:03:07,580 --> 00:03:12,620
forwards with this we have really two

79
00:03:09,439 --> 00:03:14,870
things that we could do because we do

80
00:03:12,620 --> 00:03:17,420
have at least now a sense of how the

81
00:03:14,870 --> 00:03:20,090
lighting actually is working and if you

82
00:03:17,419 --> 00:03:23,479
look at how it works right now where I'm

83
00:03:20,090 --> 00:03:26,599
hopping around with this little sort of

84
00:03:23,479 --> 00:03:29,060
circular light source in the system now

85
00:03:26,599 --> 00:03:30,769
we could just kind of tune that out and

86
00:03:29,060 --> 00:03:33,019
say that's what we're gonna work with

87
00:03:30,769 --> 00:03:34,969
for lighting for now is a few little

88
00:03:33,019 --> 00:03:38,390
circular light sources and then come

89
00:03:34,969 --> 00:03:40,310
back to lighting kind of at the end of

90
00:03:38,389 --> 00:03:42,889
things and try to tweak that and get

91
00:03:40,310 --> 00:03:45,319
that more proper when we're we're a

92
00:03:42,889 --> 00:03:48,559
little bit further down right by the way

93
00:03:45,319 --> 00:03:50,060
is this is this work so it's worth

94
00:03:48,560 --> 00:03:51,739
noting that I don't think we get sound

95
00:03:50,060 --> 00:03:53,269
from this machine at the moment which I

96
00:03:51,739 --> 00:03:55,009
suppose is into problem but I should

97
00:03:53,269 --> 00:03:57,260
make sure that works the streaming

98
00:03:55,009 --> 00:03:59,780
machine because at some point when we're

99
00:03:57,259 --> 00:04:02,750
doing work on that sort of stuff we

100
00:03:59,780 --> 00:04:04,219
should probably should probably make

101
00:04:02,750 --> 00:04:06,049
sure we can place sounds from this

102
00:04:04,219 --> 00:04:07,489
machine onto the stream because right

103
00:04:06,049 --> 00:04:09,409
now like that's playing a little sound

104
00:04:07,489 --> 00:04:11,090
effect but it's not coming out on the

105
00:04:09,409 --> 00:04:14,810
audio for the stream so that's a little

106
00:04:11,090 --> 00:04:16,910
bit a little bit busted so I guess what

107
00:04:14,810 --> 00:04:17,569
I would say is I think maybe what I'll

108
00:04:16,910 --> 00:04:20,750
do

109
00:04:17,569 --> 00:04:23,180
and again I'm not 100% sure what I want

110
00:04:20,750 --> 00:04:25,040
to do here but I think maybe what I'll

111
00:04:23,180 --> 00:04:26,959
do is just

112
00:04:25,040 --> 00:04:29,840
spend a few weeks going over the

113
00:04:26,959 --> 00:04:33,169
lighting with a fine-tooth comb putting

114
00:04:29,839 --> 00:04:36,139
in what I think should roughly be you

115
00:04:33,170 --> 00:04:38,449
know the lighting for a reasonable

116
00:04:36,139 --> 00:04:41,240
working solution just because I would

117
00:04:38,449 --> 00:04:42,979
like to do that and then we'll just take

118
00:04:41,240 --> 00:04:44,569
whatever is at the end of that and we'll

119
00:04:42,980 --> 00:04:46,580
say that's gonna be our lighting for all

120
00:04:44,569 --> 00:04:48,019
the development process and we're not

121
00:04:46,579 --> 00:04:50,990
going to go any further with it right

122
00:04:48,019 --> 00:04:53,930
and then when we're done with that I

123
00:04:50,990 --> 00:04:56,090
will just we'll move on and we'll finish

124
00:04:53,930 --> 00:04:58,340
the game that way and if we want to you

125
00:04:56,089 --> 00:05:00,289
at the end we can come back and you know

126
00:04:58,339 --> 00:05:02,179
rathole on lighting for as long as we

127
00:05:00,290 --> 00:05:04,069
want if we want to keep improving the

128
00:05:02,180 --> 00:05:05,810
quality of it because again lighting is

129
00:05:04,069 --> 00:05:07,279
just a really is one of the most

130
00:05:05,810 --> 00:05:09,769
complicated things you can possibly do

131
00:05:07,279 --> 00:05:13,909
in graphics is any kind of realistic

132
00:05:09,769 --> 00:05:16,069
lighting or even just propagation any

133
00:05:13,910 --> 00:05:19,640
kind of secondary bounce lighting and so

134
00:05:16,069 --> 00:05:21,409
I would like to you know limit the

135
00:05:19,639 --> 00:05:23,120
amount of time we spend on that and

136
00:05:21,410 --> 00:05:25,160
there's other stuff that we have to work

137
00:05:23,120 --> 00:05:26,449
on anyway we want to finish some of the

138
00:05:25,160 --> 00:05:28,670
entities stuff and we want to finish

139
00:05:26,449 --> 00:05:30,500
like we want to make sure we're grabbing

140
00:05:28,670 --> 00:05:31,879
regions appropriately like right now

141
00:05:30,500 --> 00:05:34,129
we're sort of not you can see the look

142
00:05:31,879 --> 00:05:35,870
that's not getting the stuff that's down

143
00:05:34,129 --> 00:05:37,339
there we should be picking that up and

144
00:05:35,870 --> 00:05:39,050
it's not being picked up until we move a

145
00:05:37,339 --> 00:05:40,549
little bit forward right so there's some

146
00:05:39,050 --> 00:05:43,100
things like with bounding where the

147
00:05:40,550 --> 00:05:45,500
lights are calculated and which things

148
00:05:43,100 --> 00:05:49,310
are pulled into the active set that we

149
00:05:45,500 --> 00:05:50,660
do want to like get a little bit more

150
00:05:49,310 --> 00:05:51,980
tightened up for development as well

151
00:05:50,660 --> 00:05:53,570
because we'd like this to be you know

152
00:05:51,980 --> 00:05:56,180
it's pretty close to just being fully

153
00:05:53,569 --> 00:05:58,069
presentable as a game right in terms of

154
00:05:56,180 --> 00:06:00,350
like the presentation quality's up there

155
00:05:58,069 --> 00:06:01,849
and if we just finished up some of these

156
00:06:00,350 --> 00:06:04,220
things and we have a fully presentable

157
00:06:01,850 --> 00:06:07,250
game that we wouldn't really have to

158
00:06:04,220 --> 00:06:10,450
worry about the presentation quality up

159
00:06:07,250 --> 00:06:13,790
until we basically are finished right

160
00:06:10,449 --> 00:06:15,459
all right so like looking over the

161
00:06:13,790 --> 00:06:18,129
lighting we had a couple different

162
00:06:15,459 --> 00:06:21,349
aspects of it that needed to really get

163
00:06:18,129 --> 00:06:23,360
addressed so one of the main things that

164
00:06:21,350 --> 00:06:25,370
we're not doing right now that we kind

165
00:06:23,360 --> 00:06:27,949
of need to do is we don't have really

166
00:06:25,370 --> 00:06:30,139
any concept of what the lighting values

167
00:06:27,949 --> 00:06:31,519
actually are so that was an issue that

168
00:06:30,139 --> 00:06:33,949
we're gonna have to address and then we

169
00:06:31,519 --> 00:06:35,060
also have the problem of we don't so

170
00:06:33,949 --> 00:06:36,979
when we're actually doing the lighting

171
00:06:35,060 --> 00:06:39,740
computations we don't really have a

172
00:06:36,980 --> 00:06:42,920
what's going on there either because

173
00:06:39,740 --> 00:06:45,170
when we're actually sampling the

174
00:06:42,920 --> 00:06:49,610
lighting points we don't actually have

175
00:06:45,170 --> 00:06:53,000
anything we don't actually have any way

176
00:06:49,610 --> 00:06:55,400
of getting that to work properly at the

177
00:06:53,000 --> 00:06:57,259
moment it's it's buggy and weird so we

178
00:06:55,399 --> 00:06:59,120
have to kind of like get the raycasting

179
00:06:57,259 --> 00:07:01,490
stuff working properly as well what we

180
00:06:59,120 --> 00:07:04,009
did verify at least to a first

181
00:07:01,490 --> 00:07:06,710
approximation is that our rate caster is

182
00:07:04,009 --> 00:07:09,649
working properly at least we did some

183
00:07:06,709 --> 00:07:11,689
rudimentary debugging of that so that it

184
00:07:09,649 --> 00:07:13,549
looks at least appears that our rate

185
00:07:11,689 --> 00:07:15,110
cast properly can tell when there's

186
00:07:13,550 --> 00:07:17,230
interference and when there's not and so

187
00:07:15,110 --> 00:07:20,569
on right so that seemed to be working

188
00:07:17,230 --> 00:07:25,160
and so I think we can more or less

189
00:07:20,569 --> 00:07:27,409
assume that that is correct right and so

190
00:07:25,160 --> 00:07:31,490
you know we think this parts working

191
00:07:27,410 --> 00:07:34,160
okay and we think that the the red cast

192
00:07:31,490 --> 00:07:38,090
is working okay but we don't the light

193
00:07:34,160 --> 00:07:39,470
summation is not really and the light

194
00:07:38,089 --> 00:07:40,729
persistence from frame to frame like

195
00:07:39,470 --> 00:07:43,400
that sort of stuff isn't really working

196
00:07:40,730 --> 00:07:45,410
and so we need to kind of get those into

197
00:07:43,399 --> 00:07:47,179
a rudimentary state of working so that

198
00:07:45,410 --> 00:07:54,290
we can at least know that that system is

199
00:07:47,180 --> 00:07:57,459
is okay and go from there right okay so

200
00:07:54,290 --> 00:08:00,170
what we need to do now is switch over to

201
00:07:57,459 --> 00:08:02,000
the other well so I guess there's two

202
00:08:00,170 --> 00:08:03,890
things we can do now one thing is we

203
00:08:02,000 --> 00:08:04,310
could leave it the way it is at the

204
00:08:03,889 --> 00:08:07,310
moment

205
00:08:04,310 --> 00:08:09,319
so right now you know we are doing a

206
00:08:07,310 --> 00:08:11,959
single light that you can kind of see

207
00:08:09,319 --> 00:08:13,819
here is moving around the player what we

208
00:08:11,959 --> 00:08:17,560
could do and maybe what we should do is

209
00:08:13,819 --> 00:08:23,480
we could figure out how we want this to

210
00:08:17,560 --> 00:08:27,170
work in terms of what the lighting

211
00:08:23,480 --> 00:08:30,200
values actually refer to so right now we

212
00:08:27,170 --> 00:08:32,180
just have arbitrary floats in there that

213
00:08:30,199 --> 00:08:35,059
are just saying like okay at some point

214
00:08:32,179 --> 00:08:38,389
we're gonna map zero to one to a

215
00:08:35,059 --> 00:08:41,000
lighting value but we never really had

216
00:08:38,389 --> 00:08:43,159
any idea of what that means right so we

217
00:08:41,000 --> 00:08:45,919
don't actually have any correspondence

218
00:08:43,159 --> 00:08:48,289
to the real world of what the lighting

219
00:08:45,919 --> 00:08:50,360
values actually are and furthermore we

220
00:08:48,289 --> 00:08:50,709
don't have any exposure function so like

221
00:08:50,360 --> 00:08:53,019
at the

222
00:08:50,710 --> 00:08:56,350
and we don't actually try to map these

223
00:08:53,019 --> 00:08:58,569
light values to into any kind of a space

224
00:08:56,350 --> 00:09:01,810
that makes sense right we don't have the

225
00:08:58,570 --> 00:09:03,820
idea that there's values that go into

226
00:09:01,809 --> 00:09:07,299
lighting that eventually get resolved in

227
00:09:03,820 --> 00:09:08,830
some way right so one of the things that

228
00:09:07,299 --> 00:09:11,109
we probably want to do is get that

229
00:09:08,830 --> 00:09:13,150
working properly so that we can at least

230
00:09:11,110 --> 00:09:14,980
visualize these things well and the

231
00:09:13,149 --> 00:09:17,980
other thing that I'd like to do there is

232
00:09:14,980 --> 00:09:20,470
have a way of visualizing them in some

233
00:09:17,980 --> 00:09:22,300
way that we can use that that doesn't

234
00:09:20,470 --> 00:09:27,370
that allows us to see the lighting

235
00:09:22,299 --> 00:09:29,109
without any that allows us to see the

236
00:09:27,370 --> 00:09:32,940
lighting without any weirdness like so

237
00:09:29,110 --> 00:09:36,399
that we can actually like see maybe like

238
00:09:32,940 --> 00:09:39,640
blue is no light green is like in the

239
00:09:36,399 --> 00:09:41,649
sweet spot of like relatively what we

240
00:09:39,639 --> 00:09:46,899
would expect letting to be and then you

241
00:09:41,649 --> 00:09:48,129
know red is like the breasts bright as

242
00:09:46,899 --> 00:09:49,990
the Sun or some you know what I mean

243
00:09:48,129 --> 00:09:52,269
like something that would allow us to

244
00:09:49,990 --> 00:09:53,399
really have a better handle on what's

245
00:09:52,269 --> 00:09:58,059
going on there

246
00:09:53,399 --> 00:10:01,179
all right so let's go ahead and try to

247
00:09:58,059 --> 00:10:02,649
go further down all of these lines in

248
00:10:01,179 --> 00:10:03,939
order to get us warmed up I'm gonna say

249
00:10:02,649 --> 00:10:06,009
let's do something we've been made do

250
00:10:03,940 --> 00:10:07,780
for a very long time which is let's just

251
00:10:06,009 --> 00:10:10,149
make the render or hot reloadable so

252
00:10:07,779 --> 00:10:11,919
that we can anytime we want change

253
00:10:10,149 --> 00:10:15,340
anything in the renderer and it'll just

254
00:10:11,919 --> 00:10:19,269
automatically rerun so if we go into

255
00:10:15,340 --> 00:10:23,139
win32 hand-made dot cpp what you can see

256
00:10:19,269 --> 00:10:24,699
here is that when we're doing stuff we

257
00:10:23,139 --> 00:10:26,679
actually have the ability to load

258
00:10:24,700 --> 00:10:30,580
multiple dll's here and we know that

259
00:10:26,679 --> 00:10:34,389
because we load a dll for the game and a

260
00:10:30,580 --> 00:10:37,480
dll for the renderer right so if we take

261
00:10:34,389 --> 00:10:40,990
a look at the DLLs for the game for

262
00:10:37,480 --> 00:10:43,389
example you can see this stuff happening

263
00:10:40,990 --> 00:10:47,139
here so you can see looking for a

264
00:10:43,389 --> 00:10:49,240
handmade dll there right and it does

265
00:10:47,139 --> 00:10:51,340
this sort of like looking for a lock

266
00:10:49,240 --> 00:10:54,100
file and and figuring out what it should

267
00:10:51,340 --> 00:10:56,290
do with that to determine when it should

268
00:10:54,100 --> 00:10:58,960
reload the game but then there's also

269
00:10:56,289 --> 00:11:01,539
like a renderer and that renderer I

270
00:10:58,960 --> 00:11:03,490
don't actually remember exactly how we

271
00:11:01,539 --> 00:11:04,120
link that in but I think maybe it's just

272
00:11:03,490 --> 00:11:07,990
hardly

273
00:11:04,120 --> 00:11:10,929
in at the moment I guess I could be

274
00:11:07,990 --> 00:11:13,389
wrong about that yeah so as you can see

275
00:11:10,929 --> 00:11:15,758
here like we we kind of hard link in a

276
00:11:13,389 --> 00:11:20,049
render earth there right so so these are

277
00:11:15,759 --> 00:11:22,959
all like bringing that like the renderer

278
00:11:20,049 --> 00:11:26,799
code in here and I don't know if we ever

279
00:11:22,958 --> 00:11:28,539
actually load it as a DLL we might let's

280
00:11:26,799 --> 00:11:31,870
let's take a look I don't remember if we

281
00:11:28,539 --> 00:11:35,698
actually did that part or not let's see

282
00:11:31,870 --> 00:11:40,149
did you do P sound

283
00:11:35,698 --> 00:11:42,938
no it doesn't look like it it doesn't

284
00:11:40,149 --> 00:11:44,470
look like it so if you go over here to

285
00:11:42,938 --> 00:11:47,379
the build directory and we look at what

286
00:11:44,470 --> 00:11:49,389
we've got you can see us building the

287
00:11:47,379 --> 00:11:50,680
the handmade open gelled yellow oh you

288
00:11:49,389 --> 00:11:55,269
know what yes we do we just load it

289
00:11:50,679 --> 00:11:57,519
somewhere else forgot about that so I

290
00:11:55,269 --> 00:12:01,568
believe what happens is this right here

291
00:11:57,519 --> 00:12:04,990
right so this stuff right here right so

292
00:12:01,568 --> 00:12:06,969
here's the the call that we actually

293
00:12:04,990 --> 00:12:09,909
make into the renderer to get it started

294
00:12:06,970 --> 00:12:15,639
right so I believe what happens is the

295
00:12:09,909 --> 00:12:18,188
renderer loading there is just do this

296
00:12:15,639 --> 00:12:20,589
the renderer loading there is just

297
00:12:18,188 --> 00:12:22,240
calling get proc address to initialize

298
00:12:20,589 --> 00:12:25,029
the renderer so it's like actually right

299
00:12:22,240 --> 00:12:27,579
here it's this that actually does it and

300
00:12:25,028 --> 00:12:30,458
you can see that it says like okay I'm

301
00:12:27,578 --> 00:12:33,818
gonna load the DLL through here and then

302
00:12:30,458 --> 00:12:36,308
I'm going to initialize it right so I

303
00:12:33,818 --> 00:12:40,349
think all we really want to do here is

304
00:12:36,308 --> 00:12:43,870
say ok let's move this stuff off into

305
00:12:40,350 --> 00:12:46,899
let's like make a common system for

306
00:12:43,870 --> 00:12:49,149
having our dll's be reloaded so that

307
00:12:46,899 --> 00:12:51,610
this one can also get reloaded any time

308
00:12:49,149 --> 00:12:55,899
that it changes so if we look at like

309
00:12:51,610 --> 00:12:57,579
handmade if the win32 handmade code what

310
00:12:55,899 --> 00:13:00,220
we could do is pull out the code that

311
00:12:57,578 --> 00:13:02,739
actually does that reloading so that we

312
00:13:00,220 --> 00:13:04,540
can use it for other things and if you

313
00:13:02,740 --> 00:13:06,009
look at what's going on here you can see

314
00:13:04,539 --> 00:13:08,678
we have this win through to game code

315
00:13:06,009 --> 00:13:11,199
thing and it's got the game code DLL the

316
00:13:08,678 --> 00:13:13,298
file time of the DLL so we know when it

317
00:13:11,198 --> 00:13:15,370
changed it has the functions that are

318
00:13:13,298 --> 00:13:17,529
used by that so that it can be called

319
00:13:15,370 --> 00:13:19,000
into and then it has an is valid

320
00:13:17,529 --> 00:13:21,389
right which basically says like did we

321
00:13:19,000 --> 00:13:24,549
actually were we actually able to load

322
00:13:21,389 --> 00:13:26,649
one of these things and what you can

323
00:13:24,549 --> 00:13:29,679
sorta see here is like this is actually

324
00:13:26,649 --> 00:13:33,069
pretty generic like the only difference

325
00:13:29,679 --> 00:13:35,739
between this and this is which of these

326
00:13:33,070 --> 00:13:39,340
functions are there like which things

327
00:13:35,740 --> 00:13:41,950
you actually call into so in you know if

328
00:13:39,340 --> 00:13:44,710
we wanted to we could sort of pull this

329
00:13:41,950 --> 00:13:46,870
out into something that you know made

330
00:13:44,710 --> 00:13:48,519
maybe a little bit more sense we could

331
00:13:46,870 --> 00:13:50,679
pull this out and these would all say

332
00:13:48,519 --> 00:13:54,250
the same and only these callbacks here

333
00:13:50,679 --> 00:13:56,339
would change right so if we wanted to

334
00:13:54,250 --> 00:14:01,059
you could imagine we had something like

335
00:13:56,340 --> 00:14:07,600
win32 loaded code or something or win32

336
00:14:01,059 --> 00:14:12,219
you know i don't know what we want to

337
00:14:07,600 --> 00:14:14,990
call it win32 something win32 code stuff

338
00:14:12,220 --> 00:14:18,080
win32

339
00:14:14,990 --> 00:14:18,080
[Music]

340
00:14:19,779 --> 00:14:25,490
mm I don't know I'm gonna call it when

341
00:14:23,809 --> 00:14:29,509
three or two loaded code so we're gonna

342
00:14:25,490 --> 00:14:32,590
call it and at you know immediately we

343
00:14:29,509 --> 00:14:38,659
could say well we know that that this

344
00:14:32,590 --> 00:14:41,240
right would be there we go we know that

345
00:14:38,659 --> 00:14:43,759
this would be everything that we need to

346
00:14:41,240 --> 00:14:46,490
do the hot reloading part of this and

347
00:14:43,759 --> 00:14:49,759
this is the only part that really

348
00:14:46,490 --> 00:14:52,610
changes right and what we could do is we

349
00:14:49,759 --> 00:14:55,250
could make even this part do roughly

350
00:14:52,610 --> 00:14:57,230
what we want it to do because we could

351
00:14:55,250 --> 00:14:58,850
consider these particular things here

352
00:14:57,230 --> 00:15:02,240
where we have like these these callback

353
00:14:58,850 --> 00:15:04,730
pieces we could sort of try to make

354
00:15:02,240 --> 00:15:09,529
those be a little bit more generic right

355
00:15:04,730 --> 00:15:12,170
so for example you can you can imagine

356
00:15:09,529 --> 00:15:24,709
if we just did something I don't know

357
00:15:12,169 --> 00:15:26,179
like say this we could just say look

358
00:15:24,710 --> 00:15:27,860
this thing's gonna load some functions

359
00:15:26,179 --> 00:15:29,449
and it has some pointers here and then

360
00:15:27,860 --> 00:15:32,090
we're just gonna say which ones they are

361
00:15:29,450 --> 00:15:34,220
for anyone who actually loads it so we

362
00:15:32,090 --> 00:15:38,180
could do something like that right where

363
00:15:34,220 --> 00:15:40,820
we would use it in this way and then you

364
00:15:38,179 --> 00:15:43,099
would just point whatever this table is

365
00:15:40,820 --> 00:15:46,910
here you would point it at this and use

366
00:15:43,100 --> 00:15:48,620
it in your own way right and the other

367
00:15:46,909 --> 00:15:51,409
way we could do this is just make this

368
00:15:48,620 --> 00:15:53,360
thing be utility and that utility just

369
00:15:51,409 --> 00:15:57,769
sits at the top of anyone who wants to

370
00:15:53,360 --> 00:15:59,450
actually do this right and so you know

371
00:15:57,769 --> 00:16:01,460
maybe this is a better way to go about

372
00:15:59,450 --> 00:16:03,530
it I don't know but here's just I'll

373
00:16:01,460 --> 00:16:05,269
sketch it out so let's suppose we have

374
00:16:03,529 --> 00:16:10,220
this as win through two loaded code here

375
00:16:05,269 --> 00:16:13,669
and we just say look this is the loaded

376
00:16:10,220 --> 00:16:15,980
part of this and then the other part

377
00:16:13,669 --> 00:16:17,779
lives down here and so then later if we

378
00:16:15,980 --> 00:16:22,850
want to we can make another one of these

379
00:16:17,779 --> 00:16:24,769
which is like win32 renderer code and we

380
00:16:22,850 --> 00:16:28,790
just say look there's a loaded on top of

381
00:16:24,769 --> 00:16:30,259
that and this part here right

382
00:16:28,789 --> 00:16:36,289
gets the

383
00:16:30,259 --> 00:16:41,659
the load call right you know I'm saying

384
00:16:36,289 --> 00:16:44,899
and so I guess what what this would look

385
00:16:41,659 --> 00:16:47,569
like is this part that's at the top you

386
00:16:44,899 --> 00:16:49,490
know you're responsible for calling an

387
00:16:47,570 --> 00:16:52,850
update function on it anytime you want

388
00:16:49,490 --> 00:16:55,070
it to check and then you load what you

389
00:16:52,850 --> 00:16:56,480
want to load out of it any time you get

390
00:16:55,070 --> 00:17:01,010
to a point where anything you know and

391
00:16:56,480 --> 00:17:02,420
you think you would need to write so

392
00:17:01,009 --> 00:17:04,640
that would be relatively straightforward

393
00:17:02,419 --> 00:17:07,940
to do and you know you could imagine

394
00:17:04,640 --> 00:17:09,410
doing it even kind of more ridiculous

395
00:17:07,940 --> 00:17:11,000
than that and there's a couple of

396
00:17:09,410 --> 00:17:14,390
different things we could do here that

397
00:17:11,000 --> 00:17:16,309
would kind of be interesting to so if

398
00:17:14,390 --> 00:17:19,280
you think about this part of the code

399
00:17:16,309 --> 00:17:22,759
right one of the things that we did that

400
00:17:19,279 --> 00:17:26,209
maybe wasn't the smartest thing is we

401
00:17:22,759 --> 00:17:28,970
could also just say what if there's only

402
00:17:26,209 --> 00:17:31,580
like one thing that actually that you do

403
00:17:28,970 --> 00:17:37,940
here which is sort of a like initialize

404
00:17:31,579 --> 00:17:40,460
I could imagine doing this so that

405
00:17:37,940 --> 00:17:50,870
there's really just one thing so there's

406
00:17:40,460 --> 00:17:52,970
just like something like this in fact

407
00:17:50,869 --> 00:17:58,059
that seems like probably the right thing

408
00:17:52,970 --> 00:18:04,850
to do I'm gonna go ahead and say this so

409
00:17:58,059 --> 00:18:07,399
bear with me for a second so let's

410
00:18:04,849 --> 00:18:13,419
suppose we had a thing that's basically

411
00:18:07,400 --> 00:18:13,420
like a win32 loaded code entry point and

412
00:18:14,500 --> 00:18:19,400
yeah yeah yeah yeah I think this might

413
00:18:17,539 --> 00:18:20,690
be the right thing to do so bear with me

414
00:18:19,400 --> 00:18:25,310
here and I'm just gonna sketch out what

415
00:18:20,690 --> 00:18:26,690
I think this might look like so let's

416
00:18:25,309 --> 00:18:30,200
suppose we just made a thing that's like

417
00:18:26,690 --> 00:18:32,570
a loaded code entry point right and what

418
00:18:30,200 --> 00:18:36,710
this thing is going to do is it's going

419
00:18:32,569 --> 00:18:40,369
to have some kind of a be 32x return

420
00:18:36,710 --> 00:18:42,319
right and that's going to say whether or

421
00:18:40,369 --> 00:18:44,719
not it was able to

422
00:18:42,319 --> 00:18:48,619
consider itself valid so that's where

423
00:18:44,720 --> 00:18:51,019
that will go and when you do this thing

424
00:18:48,619 --> 00:18:55,699
what you get past what you pass in is

425
00:18:51,019 --> 00:19:00,259
some kind of a like you know code table

426
00:18:55,700 --> 00:19:03,250
right or a function table and it's gonna

427
00:19:00,259 --> 00:19:06,798
fill that out for you and it gets past

428
00:19:03,250 --> 00:19:08,808
the module to load from so whatever the

429
00:19:06,798 --> 00:19:15,379
you know the out external code did it's

430
00:19:08,808 --> 00:19:17,058
gonna get that passed in right and you

431
00:19:15,380 --> 00:19:19,940
know we may never even need to actually

432
00:19:17,058 --> 00:19:23,359
store this this may actually just be

433
00:19:19,940 --> 00:19:25,759
done in line but anyway point being this

434
00:19:23,359 --> 00:19:31,839
is what it would look like and then we

435
00:19:25,759 --> 00:19:35,419
would have win32 loaded code entry point

436
00:19:31,839 --> 00:19:41,808
so what we would basically do is say all

437
00:19:35,419 --> 00:19:43,610
right you're gonna call one of these and

438
00:19:41,808 --> 00:19:47,418
so really what there is is there's a

439
00:19:43,609 --> 00:19:49,668
win32 so this win32 game code thing here

440
00:19:47,419 --> 00:19:53,120
for example right it's really just going

441
00:19:49,669 --> 00:19:56,540
to have a function table in it and so it

442
00:19:53,119 --> 00:19:57,699
could be win32 you know function table

443
00:19:56,539 --> 00:20:01,539
or whatever

444
00:19:57,700 --> 00:20:01,539
32 game function table

445
00:20:09,130 --> 00:20:15,350
right and then the same thing would kind

446
00:20:13,339 --> 00:20:18,079
of be true here right so you would end

447
00:20:15,349 --> 00:20:24,769
up with a function table that you know

448
00:20:18,079 --> 00:20:27,829
in 32 render function table right that

449
00:20:24,769 --> 00:20:30,049
seems better to me because then these

450
00:20:27,829 --> 00:20:31,609
all look exactly the same for all

451
00:20:30,049 --> 00:20:33,289
intents and purposes and so we could

452
00:20:31,609 --> 00:20:34,969
probably just get rid of them and we can

453
00:20:33,289 --> 00:20:38,059
just have the loaded code thing be the

454
00:20:34,970 --> 00:20:39,769
only thing that we actually need right

455
00:20:38,059 --> 00:20:41,750
and so I think I'm gonna try sketching

456
00:20:39,769 --> 00:20:44,509
out how that works and doing it this way

457
00:20:41,750 --> 00:20:46,819
I think that would be better right and

458
00:20:44,509 --> 00:20:49,339
it also gives us the opportunity to

459
00:20:46,819 --> 00:20:51,079
perhaps make all of our code be hot

460
00:20:49,339 --> 00:20:52,669
reloadable even the platform code

461
00:20:51,079 --> 00:20:54,769
because at that point we could sort of

462
00:20:52,670 --> 00:20:56,480
extend it forward so I'm gonna play

463
00:20:54,769 --> 00:20:57,980
around with this a little bit and I'm

464
00:20:56,480 --> 00:21:00,500
gonna see what happens if we go down

465
00:20:57,980 --> 00:21:02,539
this route so the first thing I'm going

466
00:21:00,500 --> 00:21:05,059
to do is say what if I get rid of this

467
00:21:02,539 --> 00:21:06,619
so I have a function table and a loaded

468
00:21:05,059 --> 00:21:12,200
code thing and I know these two things

469
00:21:06,619 --> 00:21:13,789
work together right and what is just

470
00:21:12,200 --> 00:21:16,610
working through the compile errors I'm

471
00:21:13,789 --> 00:21:20,420
gonna sort of massage the code that it's

472
00:21:16,609 --> 00:21:24,109
in there currently to see how I want

473
00:21:20,420 --> 00:21:27,140
this to work out right and so if you

474
00:21:24,109 --> 00:21:30,079
look at this win32 load game code stuff

475
00:21:27,140 --> 00:21:32,870
right where it's going to load in the

476
00:21:30,079 --> 00:21:35,859
the dll here what I'm basically saying

477
00:21:32,869 --> 00:21:41,889
is all right I want that function table

478
00:21:35,859 --> 00:21:41,889
to to get initialized and well you know

479
00:21:45,309 --> 00:21:54,569
you know I'm thinking this can even be

480
00:21:47,660 --> 00:21:56,740
automated one step further than that

481
00:21:54,569 --> 00:22:00,799
[Music]

482
00:21:56,740 --> 00:22:04,309
yeah okay so let me go even one step

483
00:22:00,799 --> 00:22:06,680
further than that so we probably don't

484
00:22:04,309 --> 00:22:08,569
even need to do this manually right so

485
00:22:06,680 --> 00:22:11,660
what you can probably do here if you

486
00:22:08,569 --> 00:22:17,990
want to is this can actually also

487
00:22:11,660 --> 00:22:19,880
probably just be a table and since these

488
00:22:17,990 --> 00:22:22,170
are just function pointers that go in

489
00:22:19,880 --> 00:22:37,650
order we can probably just literally say

490
00:22:22,170 --> 00:22:39,480
like all right there's gonna be we can

491
00:22:37,650 --> 00:22:41,040
probably just pass this with it and it

492
00:22:39,480 --> 00:22:43,049
would automatically update the function

493
00:22:41,039 --> 00:22:44,970
table for us because everything's just

494
00:22:43,049 --> 00:22:48,359
gonna be a series of get prog-rock

495
00:22:44,970 --> 00:22:52,440
address calls right so we can actually

496
00:22:48,359 --> 00:22:54,949
just do that honestly that probably just

497
00:22:52,440 --> 00:22:58,279
works right all right

498
00:22:54,950 --> 00:23:00,539
so let me just go ahead and do that

499
00:22:58,279 --> 00:23:02,549
again here's where metaprogramming would

500
00:23:00,539 --> 00:23:06,319
be nice because you wouldn't have to

501
00:23:02,549 --> 00:23:08,220
type this twice but you know C++ they

502
00:23:06,319 --> 00:23:10,289
don't know what they're doing over there

503
00:23:08,220 --> 00:23:13,769
all right so here we go

504
00:23:10,289 --> 00:23:16,319
in this win32 load game code here where

505
00:23:13,769 --> 00:23:19,139
it returns a game code all I'm going to

506
00:23:16,319 --> 00:23:22,349
really change that to be is something

507
00:23:19,140 --> 00:23:24,900
where we have where we pass it the

508
00:23:22,349 --> 00:23:30,359
loaded code thing that we want to use so

509
00:23:24,900 --> 00:23:32,940
like here we would say all right here's

510
00:23:30,359 --> 00:23:36,149
your loaded and then this function table

511
00:23:32,940 --> 00:23:40,019
here is just going to be like you pass

512
00:23:36,150 --> 00:23:41,940
it what you wanted to do with with these

513
00:23:40,019 --> 00:23:45,089
three things and we can bundle those

514
00:23:41,940 --> 00:23:48,960
together like win32 function table

515
00:23:45,089 --> 00:23:51,329
definition or something like that and we

516
00:23:48,960 --> 00:23:52,950
just say like here's the functions that

517
00:23:51,329 --> 00:23:57,949
we're gonna write here's the function

518
00:23:52,950 --> 00:24:01,740
count and here's the function names

519
00:23:57,950 --> 00:24:03,420
write something like this so you would

520
00:24:01,740 --> 00:24:05,490
say all right here's the loaded code

521
00:24:03,420 --> 00:24:07,200
that we're working with and you know I

522
00:24:05,490 --> 00:24:10,890
guess I could even expand it a little

523
00:24:07,200 --> 00:24:15,049
bit further and say well or we could

524
00:24:10,890 --> 00:24:15,050
even put this in there right

525
00:24:18,179 --> 00:24:25,179
right so I guess in that sense we could

526
00:24:22,690 --> 00:24:26,860
just say okay you know what let's make

527
00:24:25,179 --> 00:24:29,220
the loaded code structure just do that

528
00:24:26,859 --> 00:24:29,219
for us

529
00:24:31,920 --> 00:24:37,509
even better so you can pass one of these

530
00:24:35,319 --> 00:24:40,178
right here's the loaded code thing we're

531
00:24:37,509 --> 00:24:40,690
going to use and it's not going to do

532
00:24:40,179 --> 00:24:44,080
that anymore

533
00:24:40,690 --> 00:24:46,390
and we're gonna do this so then we say

534
00:24:44,079 --> 00:24:48,909
alright win32 load game code let's go

535
00:24:46,390 --> 00:24:51,550
ahead and load this up and the way we're

536
00:24:48,910 --> 00:24:55,840
gonna do that is that all of this stuff

537
00:24:51,549 --> 00:24:58,058
that normally happens here right is

538
00:24:55,839 --> 00:25:01,149
actually going to just fill it out into

539
00:24:58,058 --> 00:25:03,428
this loaded function so in here we do

540
00:25:01,150 --> 00:25:06,220
get file attributes and we have the lock

541
00:25:03,429 --> 00:25:08,230
file name get the standard all that

542
00:25:06,220 --> 00:25:13,779
stuff will be the same but now we're

543
00:25:08,230 --> 00:25:17,250
gonna do it in here right I'm also gonna

544
00:25:13,779 --> 00:25:21,308
have this not include any reference to

545
00:25:17,250 --> 00:25:22,929
game code exactly right so you can see

546
00:25:21,308 --> 00:25:24,730
here these are the actual names of this

547
00:25:22,929 --> 00:25:27,840
I guess so I guess we actually want to

548
00:25:24,730 --> 00:25:27,839
do these

549
00:25:39,808 --> 00:25:47,109
okay like so and so here we're just

550
00:25:45,609 --> 00:25:48,788
gonna say alright we want to load these

551
00:25:47,109 --> 00:25:51,969
things we're gonna load them off of the

552
00:25:48,788 --> 00:25:53,529
dll like so right and you can see this

553
00:25:51,970 --> 00:25:57,788
starting to collapse down so now we'll

554
00:25:53,529 --> 00:26:00,220
have those names over here we're sort of

555
00:25:57,788 --> 00:26:02,230
saying that the is valid is actually

556
00:26:00,220 --> 00:26:05,710
gonna be something that either all of

557
00:26:02,230 --> 00:26:07,150
them work or they don't so you know this

558
00:26:05,710 --> 00:26:09,190
shouldn't say either the callbacks and

559
00:26:07,150 --> 00:26:13,600
we'll just say like the callbacks can be

560
00:26:09,190 --> 00:26:19,750
zero you must check before calling or

561
00:26:13,599 --> 00:26:26,019
check thee is valid boolean in your two

562
00:26:19,750 --> 00:26:28,419
little code okay so now we're okay I

563
00:26:26,019 --> 00:26:31,839
don't know what that's about

564
00:26:28,419 --> 00:26:33,580
exactly but I guess we're just doing

565
00:26:31,839 --> 00:26:36,209
some kind of checking there anyway so

566
00:26:33,579 --> 00:26:39,849
here's some a bunch of nonsense and

567
00:26:36,210 --> 00:26:42,419
we're doing some reloading here I guess

568
00:26:39,849 --> 00:26:45,548
that's about whether or not we want to

569
00:26:42,419 --> 00:26:48,159
we don't want to pile up too many files

570
00:26:45,548 --> 00:26:50,589
I guess or something anyway so we're

571
00:26:48,159 --> 00:26:52,419
gonna load the DLL in and then instead

572
00:26:50,589 --> 00:26:53,918
of doing each of these manually what

573
00:26:52,419 --> 00:26:58,750
we're gonna do is we're gonna loop over

574
00:26:53,919 --> 00:27:03,820
the the function index right because now

575
00:26:58,750 --> 00:27:05,558
we know we've got this isn't actually

576
00:27:03,819 --> 00:27:12,129
called result I suppose it's called

577
00:27:05,558 --> 00:27:13,569
loaded also this temp DLL number

578
00:27:12,130 --> 00:27:15,340
shouldn't really be in the state should

579
00:27:13,569 --> 00:27:21,129
it it should be in the loaded I would

580
00:27:15,339 --> 00:27:28,649
think so I'm also gonna do this I think

581
00:27:21,130 --> 00:27:28,650
that makes more sense yeah

582
00:27:29,028 --> 00:27:38,929
and that's just looking for a bunch of

583
00:27:35,388 --> 00:27:40,428
different versions of the same name

584
00:27:38,929 --> 00:27:43,579
because we don't know which random

585
00:27:40,429 --> 00:27:45,859
version it output right if I remember

586
00:27:43,578 --> 00:27:47,658
correctly it was because win 30 is

587
00:27:45,858 --> 00:27:53,358
because Visual Studio is terrible and

588
00:27:47,659 --> 00:27:54,739
locks the PDB so you can't actually we

589
00:27:53,358 --> 00:27:58,878
had to make it so that it output

590
00:27:54,739 --> 00:27:59,959
different ones I think oh well and also

591
00:27:58,878 --> 00:28:01,519
there's another reason for it it's

592
00:27:59,959 --> 00:28:04,578
because we wanted to keep the old DLL

593
00:28:01,519 --> 00:28:06,019
loaded yeah so basically I guess it's

594
00:28:04,578 --> 00:28:07,608
not Visual Studio it's actually just

595
00:28:06,019 --> 00:28:08,929
Windows cousin Linux you would just have

596
00:28:07,608 --> 00:28:18,168
an inode for that so it wouldn't matter

597
00:28:08,929 --> 00:28:20,089
right yeah okay so anyway we'll probably

598
00:28:18,169 --> 00:28:22,149
want this because this temp T a little

599
00:28:20,088 --> 00:28:26,058
number thing is gonna have to be

600
00:28:22,148 --> 00:28:28,428
something that we manage more carefully

601
00:28:26,058 --> 00:28:31,689
and we'll probably do that per DLL so

602
00:28:28,429 --> 00:28:35,179
put that in there then we'll have loaded

603
00:28:31,689 --> 00:28:38,538
like so and the temp to ulil name is

604
00:28:35,179 --> 00:28:40,489
there which is what we want and then we

605
00:28:38,538 --> 00:28:43,368
go through however many of these there

606
00:28:40,489 --> 00:28:49,939
are so however many functions that are

607
00:28:43,368 --> 00:28:54,918
going to be and each one of them gets

608
00:28:49,939 --> 00:28:57,169
loaded so we're gonna look this is this

609
00:28:54,919 --> 00:29:00,319
right here actually is a pointer to a

610
00:28:57,169 --> 00:29:03,109
pointer so for each of these we're gonna

611
00:29:00,318 --> 00:29:06,108
say alright whatever the length one of

612
00:29:03,108 --> 00:29:08,478
these things is right we're gonna do the

613
00:29:06,108 --> 00:29:12,318
get proc address on it and we're gonna

614
00:29:08,479 --> 00:29:15,019
pass the name of the function we're

615
00:29:12,318 --> 00:29:18,348
trying to load and that's gonna load it

616
00:29:15,019 --> 00:29:21,138
right and for each one of those we'll

617
00:29:18,348 --> 00:29:23,778
also know we'll just say like alright

618
00:29:21,138 --> 00:29:27,648
the is valid flag is going to start off

619
00:29:23,778 --> 00:29:29,169
equaling true but if any of these don't

620
00:29:27,648 --> 00:29:35,258
work

621
00:29:29,169 --> 00:29:35,259
oops right

622
00:29:36,069 --> 00:29:42,439
go if any of these don't work so if we

623
00:29:40,279 --> 00:29:44,869
do a get proc address on one of these

624
00:29:42,440 --> 00:29:49,610
and it doesn't work so it'd basically be

625
00:29:44,869 --> 00:29:51,649
this right then we know that the oops

626
00:29:49,609 --> 00:29:57,709
and that's not result as I guess it's

627
00:29:51,650 --> 00:29:58,640
this then we know that it's actually not

628
00:29:57,710 --> 00:30:00,680
valid anymore

629
00:29:58,640 --> 00:30:04,610
and the game should just be like at now

630
00:30:00,680 --> 00:30:07,640
not gonna work right so I think that's

631
00:30:04,609 --> 00:30:09,829
all we really need to do and what we

632
00:30:07,640 --> 00:30:12,620
wanted to do here I guess is clear this

633
00:30:09,829 --> 00:30:14,349
so I guess what we want to do is have

634
00:30:12,619 --> 00:30:17,179
another one of these loops over here

635
00:30:14,349 --> 00:30:18,230
which basically says and and I guess we

636
00:30:17,180 --> 00:30:21,170
don't really need to do a loop because

637
00:30:18,230 --> 00:30:24,410
we have a zero rake all right so we can

638
00:30:21,170 --> 00:30:27,380
actually do is just say look if if it

639
00:30:24,410 --> 00:30:28,730
wasn't valid so like if this was not you

640
00:30:27,380 --> 00:30:32,180
know if that wasn't in the works that

641
00:30:28,730 --> 00:30:35,839
wasn't in the mix then we can just say

642
00:30:32,180 --> 00:30:36,710
clear out this this table so if we if we

643
00:30:35,839 --> 00:30:38,629
failed

644
00:30:36,710 --> 00:30:40,700
if either we couldn't load the thing or

645
00:30:38,630 --> 00:30:44,480
whatever then just set them to zero so

646
00:30:40,700 --> 00:30:46,039
the game kind of stops at that point and

647
00:30:44,480 --> 00:30:49,490
there's an error and maybe we want to

648
00:30:46,039 --> 00:30:49,909
display an error here I don't know hard

649
00:30:49,490 --> 00:30:52,370
to say

650
00:30:49,910 --> 00:30:54,920
anyway so that would do all of our

651
00:30:52,369 --> 00:30:57,709
loading for us right and this will load

652
00:30:54,920 --> 00:30:59,810
anything now so we can prep these for

653
00:30:57,710 --> 00:31:02,120
arbitrary sets of code and it will just

654
00:30:59,809 --> 00:31:04,279
produce what we want right and we don't

655
00:31:02,119 --> 00:31:06,049
have to do anything else so the only

656
00:31:04,279 --> 00:31:08,000
thing we had to load there or change

657
00:31:06,049 --> 00:31:09,919
there I guess is in the state we got

658
00:31:08,000 --> 00:31:12,740
this temp DLL number thing and that's

659
00:31:09,920 --> 00:31:15,500
now because we might load many dll's and

660
00:31:12,740 --> 00:31:22,370
maybe multiple of those dll's actually

661
00:31:15,500 --> 00:31:23,630
would need to know things like which one

662
00:31:22,369 --> 00:31:25,519
of them they were loading just like the

663
00:31:23,630 --> 00:31:31,100
other one did so we probably need that

664
00:31:25,519 --> 00:31:34,690
to be you know per DLL so we're gonna

665
00:31:31,099 --> 00:31:34,689
have to leave it like that and boobs

666
00:31:39,970 --> 00:31:43,180
and so that will load everything for us

667
00:31:41,950 --> 00:31:47,289
and now we just have to change the other

668
00:31:43,180 --> 00:31:48,820
code to use this more effectively so now

669
00:31:47,289 --> 00:31:51,039
if we look down here and we've got

670
00:31:48,819 --> 00:31:53,619
unload game code which is the complement

671
00:31:51,039 --> 00:32:00,339
of this right really all we need to do

672
00:31:53,619 --> 00:32:03,669
there is say hey actually we want to

673
00:32:00,339 --> 00:32:05,709
make this work with anything so what we

674
00:32:03,670 --> 00:32:09,279
would do is just say if you pass us

675
00:32:05,710 --> 00:32:10,720
whatever the loaded thing is here we're

676
00:32:09,279 --> 00:32:14,859
going to go ahead and tell you that it's

677
00:32:10,720 --> 00:32:16,059
unloaded so we're gonna do this we're

678
00:32:14,859 --> 00:32:17,829
not gonna free it because we don't do

679
00:32:16,059 --> 00:32:20,319
that anymore we just let those things

680
00:32:17,829 --> 00:32:22,149
pile up we're gonna say that it's not

681
00:32:20,319 --> 00:32:31,740
valid anymore and then we're gonna do

682
00:32:22,150 --> 00:32:34,630
this right and we could if we wanted to

683
00:32:31,740 --> 00:32:40,450
and I don't know that we do but we could

684
00:32:34,630 --> 00:32:45,390
say that like hey if we have a load and

685
00:32:40,450 --> 00:32:58,029
unload maybe what we'll do is just say

686
00:32:45,390 --> 00:33:00,460
this here item right it's a thought okay

687
00:32:58,029 --> 00:33:03,160
so now here's the people who actually

688
00:33:00,460 --> 00:33:05,559
use this stuff and if we take a look

689
00:33:03,160 --> 00:33:07,810
here we've got this win32 loaded code

690
00:33:05,559 --> 00:33:10,359
that we might want to do for like the

691
00:33:07,809 --> 00:33:12,480
game code for example and what we'd want

692
00:33:10,359 --> 00:33:16,329
to do now is just say win32 load code

693
00:33:12,480 --> 00:33:18,670
right and we'd pass exactly the same

694
00:33:16,329 --> 00:33:22,960
things that we were passing before all

695
00:33:18,670 --> 00:33:26,140
of this garbage right and now we just

696
00:33:22,960 --> 00:33:28,240
need to pass like this thing to have it

697
00:33:26,140 --> 00:33:30,340
initialize and we need to have specified

698
00:33:28,240 --> 00:33:33,549
this to be something that actually has

699
00:33:30,339 --> 00:33:37,779
some state right so we want to actually

700
00:33:33,549 --> 00:33:39,819
say okay the function count is going to

701
00:33:37,779 --> 00:33:42,910
be equal to however like this is our

702
00:33:39,819 --> 00:33:44,529
functions right so the function count is

703
00:33:42,910 --> 00:33:47,220
going to be equal to however many

704
00:33:44,529 --> 00:33:49,778
functions we actually have in our table

705
00:33:47,220 --> 00:33:57,569
we know we want an actual

706
00:33:49,778 --> 00:34:00,819
game code thing that's like this right

707
00:33:57,569 --> 00:34:02,168
this has the functions in it so we're

708
00:34:00,819 --> 00:34:05,618
just gonna say alright point the

709
00:34:02,169 --> 00:34:07,349
functions at this game structure right

710
00:34:05,618 --> 00:34:11,199
cuz that's what that's gonna be

711
00:34:07,348 --> 00:34:21,578
so fill that thing out for us and then

712
00:34:11,199 --> 00:34:24,460
you know get the names going in there

713
00:34:21,579 --> 00:34:28,028
now when we load the code it should just

714
00:34:24,460 --> 00:34:29,710
run right we shouldn't have any problem

715
00:34:28,028 --> 00:34:34,199
with that right it should just be able

716
00:34:29,710 --> 00:34:39,250
to load it using that information and

717
00:34:34,199 --> 00:34:41,138
then yeah so in here where we do the

718
00:34:39,250 --> 00:34:45,429
compare file time to see whether the

719
00:34:41,139 --> 00:34:50,950
executable needs to be reloaded also not

720
00:34:45,429 --> 00:34:58,568
sure what this is about or why it's

721
00:34:50,949 --> 00:35:01,389
turned off oh I guess this will restart

722
00:34:58,568 --> 00:35:05,230
the entire thing but we don't do that

723
00:35:01,389 --> 00:35:08,098
anymore you can see us doing a win32

724
00:35:05,230 --> 00:35:11,068
load here here's an unload and a load

725
00:35:08,099 --> 00:35:17,289
and so we would want to do those again

726
00:35:11,068 --> 00:35:19,179
right and so a couple things about that

727
00:35:17,289 --> 00:35:20,859
if you now start to look at what's going

728
00:35:19,179 --> 00:35:23,399
on you can see that those are passed

729
00:35:20,858 --> 00:35:26,469
frequently and they don't change right

730
00:35:23,400 --> 00:35:28,930
so what we probably want to do here is

731
00:35:26,469 --> 00:35:31,778
actually weld those in so let's go just

732
00:35:28,929 --> 00:35:34,899
do that really quickly too so here at

733
00:35:31,778 --> 00:35:36,608
win32 load code the other thing that I'm

734
00:35:34,900 --> 00:35:38,500
not sure about is what is that state

735
00:35:36,608 --> 00:35:40,269
variable actually used for because we

736
00:35:38,500 --> 00:35:43,210
don't use the state variable anywhere

737
00:35:40,269 --> 00:35:45,778
here so I don't actually know what with

738
00:35:43,210 --> 00:35:50,429
to to build XZ path name what is that

739
00:35:45,778 --> 00:35:50,429
what does it actually use the state for

740
00:35:55,679 --> 00:36:00,338
so like all of this stuff should

741
00:35:58,358 --> 00:36:02,848
probably be just in the loaded code

742
00:36:00,338 --> 00:36:05,259
thing right so I think this is actually

743
00:36:02,849 --> 00:36:07,660
not what we want anymore

744
00:36:05,260 --> 00:36:11,140
right I think like we want to just weld

745
00:36:07,659 --> 00:36:14,078
this together because yeah all of this

746
00:36:11,139 --> 00:36:22,000
stuff all of this stuff is kind of a

747
00:36:14,079 --> 00:36:25,089
little bit wrong yeah so I think that

748
00:36:22,000 --> 00:36:28,088
stuff can just be put into the loaded

749
00:36:25,088 --> 00:36:30,818
code thing so I think that's what we

750
00:36:28,088 --> 00:36:37,019
actually want so let's also do that so

751
00:36:30,818 --> 00:36:41,739
if I say that this is actually this and

752
00:36:37,019 --> 00:36:45,219
in here we say we're gonna do that right

753
00:36:41,739 --> 00:36:47,078
so there's our function now and then

754
00:36:45,219 --> 00:36:50,969
instead of passing the state here we're

755
00:36:47,079 --> 00:36:54,460
gonna pass win32 loaded code like so

756
00:36:50,969 --> 00:36:57,848
exci file name state XE file name one

757
00:36:54,460 --> 00:37:03,460
all this garbage right I think let me

758
00:36:57,849 --> 00:37:10,769
just double check you look at what

759
00:37:03,460 --> 00:37:10,769
that's actually holding there it is

760
00:37:13,318 --> 00:37:17,130
well okay so you know what

761
00:37:15,730 --> 00:37:22,389
the only thing I would say is actually

762
00:37:17,130 --> 00:37:24,338
the no okay that's just the path so we

763
00:37:22,389 --> 00:37:26,529
don't actually that will be the same for

764
00:37:24,338 --> 00:37:29,230
everything so never mind we can leave it

765
00:37:26,530 --> 00:37:31,750
like this this won't change per loaded

766
00:37:29,230 --> 00:37:35,619
that's just the path that's just the

767
00:37:31,750 --> 00:37:37,510
path so we're good

768
00:37:35,619 --> 00:37:40,180
alright so it's really only these things

769
00:37:37,510 --> 00:37:41,800
that we would need to actually weld in

770
00:37:40,179 --> 00:37:55,419
there because it's just redundant right

771
00:37:41,800 --> 00:38:00,250
so what we'd rather do is this that

772
00:37:55,420 --> 00:38:03,329
right so um that when we do a load we

773
00:38:00,250 --> 00:38:06,940
don't have to pass anything new right so

774
00:38:03,329 --> 00:38:09,160
hmm excuse me

775
00:38:06,940 --> 00:38:11,650
so in the loaded code thing we can just

776
00:38:09,159 --> 00:38:14,078
say alright in here we just have two

777
00:38:11,650 --> 00:38:18,309
pointers one is the full path and one is

778
00:38:14,079 --> 00:38:20,710
the lock full path and then when we do a

779
00:38:18,309 --> 00:38:23,949
load code on here we don't have to pass

780
00:38:20,710 --> 00:38:25,780
these anymore right because we know that

781
00:38:23,949 --> 00:38:28,868
they actually are just pointing to

782
00:38:25,780 --> 00:38:31,000
something inside the struct itself so we

783
00:38:28,869 --> 00:38:34,950
can say all right this is the full path

784
00:38:31,000 --> 00:38:34,949
and this is the

785
00:38:41,730 --> 00:39:07,889
right okay keep going this right here

786
00:39:04,440 --> 00:39:10,740
just needs to look at the game code this

787
00:39:07,889 --> 00:39:13,980
here needs to look at the DLLs right

788
00:39:10,739 --> 00:39:18,779
time but you can see that this now this

789
00:39:13,980 --> 00:39:20,969
whole procedure here needs this part now

790
00:39:18,780 --> 00:39:24,150
needs to be something you can just call

791
00:39:20,969 --> 00:39:28,230
to make your stuff do what it needs to

792
00:39:24,150 --> 00:39:31,619
do so we want this to be kind of

793
00:39:28,230 --> 00:39:34,949
encapsulated into a little unit that we

794
00:39:31,619 --> 00:39:38,609
can just use if you look at how we have

795
00:39:34,949 --> 00:39:40,469
to sort of stride this out we want it in

796
00:39:38,610 --> 00:39:42,240
two pieces because some people need to

797
00:39:40,469 --> 00:39:48,239
call it in two stages

798
00:39:42,239 --> 00:39:50,579
so like we want to grab this and this

799
00:39:48,239 --> 00:39:55,589
and kind of have them be separate pieces

800
00:39:50,579 --> 00:39:59,119
right so what we want to do is do a

801
00:39:55,590 --> 00:39:59,120
thing like

802
00:40:00,219 --> 00:40:25,059
let's say this something like that let's

803
00:40:13,239 --> 00:40:26,588
say so I did that so you know something

804
00:40:25,059 --> 00:40:28,838
where we say look let's check for a

805
00:40:26,588 --> 00:40:31,328
change and a return this and that's just

806
00:40:28,838 --> 00:40:33,789
this right here so this part where we're

807
00:40:31,329 --> 00:40:41,380
like let's check for a code change check

808
00:40:33,789 --> 00:40:44,289
for code change is just this code right

809
00:40:41,380 --> 00:40:48,730
and it's gonna take one of these win32

810
00:40:44,289 --> 00:40:52,269
loaded code things and it needs to know

811
00:40:48,730 --> 00:40:57,219
the full path to the DLL so this part

812
00:40:52,269 --> 00:40:59,230
right here right it needs to figure out

813
00:40:57,219 --> 00:41:02,588
what the last right time is for that

814
00:40:59,230 --> 00:41:06,818
thing and that it needs to compare those

815
00:41:02,588 --> 00:41:10,838
two right so whatever the new DLL all

816
00:41:06,818 --> 00:41:12,608
right time is and the old one right and

817
00:41:10,838 --> 00:41:14,858
the only thing that I'm not super clear

818
00:41:12,608 --> 00:41:16,568
on here is I guess so are we basically

819
00:41:14,858 --> 00:41:20,710
saying that thing just updates in place

820
00:41:16,568 --> 00:41:25,960
I don't really know also this should

821
00:41:20,710 --> 00:41:27,460
probably be that right so anyway this is

822
00:41:25,960 --> 00:41:29,079
what we're gonna do here and that'll

823
00:41:27,460 --> 00:41:36,369
encapsulate this part into something we

824
00:41:29,079 --> 00:41:41,410
can reuse for everybody so that and then

825
00:41:36,369 --> 00:41:44,500
like we need something here where we can

826
00:41:41,409 --> 00:41:48,309
take this part which is the unload and

827
00:41:44,500 --> 00:41:55,179
the tree try set of things so this needs

828
00:41:48,309 --> 00:41:58,059
to be like this needs to be updated in

829
00:41:55,179 --> 00:42:02,789
here so I don't know what we're gonna

830
00:41:58,059 --> 00:42:02,789
call this but like reload

831
00:42:04,670 --> 00:42:18,389
like so and that'll do this reload it'll

832
00:42:15,539 --> 00:42:20,549
do the try thing it'll say like as long

833
00:42:18,389 --> 00:42:22,558
as this thing is not valid we're gonna

834
00:42:20,548 --> 00:42:25,199
try again we're gonna try a bunch of

835
00:42:22,559 --> 00:42:30,359
times to get it to load and see if we

836
00:42:25,199 --> 00:42:32,608
can right

837
00:42:30,358 --> 00:42:35,759
and then we're gonna you know we're

838
00:42:32,608 --> 00:42:42,498
gonna sleep on that so if we grab these

839
00:42:35,759 --> 00:42:46,588
out now and we make this thing the oops

840
00:42:42,498 --> 00:42:49,889
and we make this thing be the loading

841
00:42:46,588 --> 00:42:53,159
off the came code I guess this also has

842
00:42:49,889 --> 00:42:58,078
to do that then if I just drop these

843
00:42:53,159 --> 00:43:01,739
down back where we were doing went

844
00:42:58,079 --> 00:43:09,650
through to low code we should be good to

845
00:43:01,739 --> 00:43:09,650
go like that right

846
00:43:11,369 --> 00:43:20,150
I think seems plausible anyway so let's

847
00:43:18,090 --> 00:43:23,010
go ahead and try to make that work this

848
00:43:20,150 --> 00:43:25,650
right here the only thing I'm a little

849
00:43:23,010 --> 00:43:28,050
confused about is this should take the

850
00:43:25,650 --> 00:43:37,309
deal of less right time now that's fine

851
00:43:28,050 --> 00:43:41,190
it should just work all right fix that

852
00:43:37,309 --> 00:43:43,949
the state here when it does went through

853
00:43:41,190 --> 00:43:44,400
the codes that's gonna need this for

854
00:43:43,949 --> 00:43:53,399
sure

855
00:43:44,400 --> 00:43:55,619
so just pass that down all right so this

856
00:43:53,400 --> 00:43:59,309
is win32 check for code change this has

857
00:43:55,619 --> 00:44:05,089
been through to reload code and now I

858
00:43:59,309 --> 00:44:05,090
think is that it is that everything I

859
00:44:07,369 --> 00:44:17,400
just accidentally deleted we got one

860
00:44:13,289 --> 00:44:23,309
more thing full so this needs to be past

861
00:44:17,400 --> 00:44:26,130
the state there is that is it address of

862
00:44:23,309 --> 00:44:28,139
state what is that I don't know what

863
00:44:26,130 --> 00:44:32,670
that is whereas went through to load

864
00:44:28,139 --> 00:44:34,019
code where'd it go yes just state all

865
00:44:32,670 --> 00:44:35,670
right so let's just finish up the

866
00:44:34,019 --> 00:44:38,159
compile errors and then let's see if it

867
00:44:35,670 --> 00:44:42,000
works at all and from there if it does

868
00:44:38,159 --> 00:44:45,629
work we can from there if it does work

869
00:44:42,000 --> 00:44:47,489
we can then move to the next step which

870
00:44:45,630 --> 00:44:51,059
is putting more things through that path

871
00:44:47,489 --> 00:44:54,299
which is what we want to ideally put

872
00:44:51,059 --> 00:44:59,130
everything through that path I guess all

873
00:44:54,300 --> 00:45:00,210
right so here's the win32 load code what

874
00:44:59,130 --> 00:45:02,640
is it saying assignment within

875
00:45:00,210 --> 00:45:07,909
conditional expression okay yeah I I

876
00:45:02,639 --> 00:45:07,909
know I did that on purpose but all right

877
00:45:09,170 --> 00:45:13,369
thank you mister compiler

878
00:45:17,798 --> 00:45:22,538
so I guess we'll do this if 'function

879
00:45:24,460 --> 00:45:32,500
then assign it else we're screwed right

880
00:45:40,389 --> 00:45:57,618
reload code has to return a value no it

881
00:45:46,548 --> 00:46:01,788
doesn't like false incorrect but I think

882
00:45:57,619 --> 00:46:04,670
we're good now alright so all I really

883
00:46:01,789 --> 00:46:17,059
want to do now is just start putting

884
00:46:04,670 --> 00:46:20,059
more things in that system and I mean

885
00:46:17,059 --> 00:46:24,859
hey we at least know it worked once so

886
00:46:20,059 --> 00:46:26,809
if I want it to to verify that this

887
00:46:24,858 --> 00:46:30,619
works in handmade here I need to do

888
00:46:26,809 --> 00:46:32,660
something right so what I would need to

889
00:46:30,619 --> 00:46:35,990
do here is figure out something that can

890
00:46:32,659 --> 00:46:38,449
make a change to that would immediately

891
00:46:35,989 --> 00:46:40,429
update itself I assume in the world mode

892
00:46:38,449 --> 00:46:43,699
for example one thing I could do is

893
00:46:40,429 --> 00:46:46,489
change the debug light so because that

894
00:46:43,699 --> 00:46:49,129
would be obvious so if we go in here and

895
00:46:46,489 --> 00:46:50,778
you can see like we've got this maybe

896
00:46:49,130 --> 00:46:54,680
what I'll do is I'll make the debug

897
00:46:50,778 --> 00:46:57,400
light much higher up and verify that it

898
00:46:54,679 --> 00:47:01,068
actually changes what the lighting is

899
00:46:57,400 --> 00:47:05,509
yep and then I'll go down here and

900
00:47:01,068 --> 00:47:10,548
change it back so now it'll move it down

901
00:47:05,509 --> 00:47:12,108
again and all right so we know that that

902
00:47:10,548 --> 00:47:13,699
code reloading is working because I just

903
00:47:12,108 --> 00:47:14,298
changed code on the fly and it worked

904
00:47:13,699 --> 00:47:16,730
just fine

905
00:47:14,298 --> 00:47:19,730
and so now the thing is like alright can

906
00:47:16,730 --> 00:47:23,329
we get that to happen in the renderer as

907
00:47:19,730 --> 00:47:26,240
well right and also if we wanted to now

908
00:47:23,329 --> 00:47:27,260
we could we could make it push more

909
00:47:26,239 --> 00:47:28,639
things in there so

910
00:47:27,260 --> 00:47:30,620
you know one thing we might want to do

911
00:47:28,639 --> 00:47:35,059
is make it so that actually there's just

912
00:47:30,619 --> 00:47:38,000
a win32 we can make it so there's just a

913
00:47:35,059 --> 00:47:39,409
win32 thing in general that reloads

914
00:47:38,000 --> 00:47:41,869
itself

915
00:47:39,409 --> 00:47:44,750
so that all of the platform code is also

916
00:47:41,869 --> 00:47:49,039
hot reloadable I mean I don't know that

917
00:47:44,750 --> 00:47:53,150
we care because we probably like most of

918
00:47:49,039 --> 00:47:54,650
the stuff doesn't run every frame so I'm

919
00:47:53,150 --> 00:47:55,700
not sure that there's much used to it

920
00:47:54,650 --> 00:47:57,559
because most of the stuff is like

921
00:47:55,699 --> 00:47:58,730
startup stuff and that you can't hot

922
00:47:57,559 --> 00:48:02,119
reload because it's already happened

923
00:47:58,730 --> 00:48:04,250
right so that may not make a sense but

924
00:48:02,119 --> 00:48:06,769
at least the renderer we definitely want

925
00:48:04,250 --> 00:48:09,199
to do that for so I'm gonna go ahead and

926
00:48:06,769 --> 00:48:13,400
take a look at what that would entail so

927
00:48:09,199 --> 00:48:16,460
in here if we said you know that this

928
00:48:13,400 --> 00:48:19,340
part looks to the win32 in it default

929
00:48:16,460 --> 00:48:33,490
renderer right so that's coming from the

930
00:48:19,340 --> 00:48:39,289
renderer DLL and if I want to I nope no

931
00:48:33,489 --> 00:48:44,809
bad so if I want to I should be able to

932
00:48:39,289 --> 00:48:57,469
go to the renderer code here and redo

933
00:48:44,809 --> 00:49:01,389
how this is happening right so you can

934
00:48:57,469 --> 00:49:01,389
see this

935
00:49:06,039 --> 00:49:15,099
I mean really this is just the case of

936
00:49:11,280 --> 00:49:16,720
just not calling this code right I mean

937
00:49:15,099 --> 00:49:22,420
we can leave this code in here if we

938
00:49:16,719 --> 00:49:25,149
want to but I mean I mean really I think

939
00:49:22,420 --> 00:49:26,920
that's most is so you know there's a

940
00:49:25,150 --> 00:49:31,360
global called

941
00:49:26,920 --> 00:49:42,970
you know went through to render function

942
00:49:31,360 --> 00:49:44,200
names and it's just that right and it

943
00:49:42,969 --> 00:49:51,029
knows that it's only got one of these

944
00:49:44,199 --> 00:49:55,449
things so you know that would just work

945
00:49:51,030 --> 00:49:59,790
so in the case where we want to do our

946
00:49:55,449 --> 00:50:02,079
own system now for this which we do I

947
00:49:59,789 --> 00:50:05,019
should be able to do exactly the same

948
00:50:02,079 --> 00:50:09,670
thing that I did with the other one so

949
00:50:05,019 --> 00:50:11,110
this nonsense here right so I should be

950
00:50:09,670 --> 00:50:13,570
able to say alright if we want the

951
00:50:11,110 --> 00:50:16,030
renderer to do this as well then back

952
00:50:13,570 --> 00:50:19,510
where it actually loads that up and we

953
00:50:16,030 --> 00:50:24,450
kind of need to say what that file name

954
00:50:19,510 --> 00:50:27,910
would be here as well so I guess we

955
00:50:24,449 --> 00:50:30,189
again I don't know the reason that this

956
00:50:27,909 --> 00:50:31,989
code exists here at all is just so that

957
00:50:30,190 --> 00:50:35,230
people can not have to write that

958
00:50:31,989 --> 00:50:37,089
themselves out in their own thing and I

959
00:50:35,230 --> 00:50:41,199
don't know that I really want to keep

960
00:50:37,090 --> 00:50:46,000
doing that so what I might say is maybe

961
00:50:41,199 --> 00:50:49,389
this goes away right maybe this goes

962
00:50:46,000 --> 00:50:54,820
away and what we do here is say that

963
00:50:49,389 --> 00:50:59,619
this this stuff here actually moves into

964
00:50:54,820 --> 00:51:03,760
the renderer test right so the renderer

965
00:50:59,619 --> 00:51:06,250
test itself is going to need to do this

966
00:51:03,760 --> 00:51:09,410
part of the code like in here where it

967
00:51:06,250 --> 00:51:18,489
loads the thing which

968
00:51:09,409 --> 00:51:22,759
is who knows where right here I guess

969
00:51:18,489 --> 00:51:26,659
yeah so in here where it lives the thing

970
00:51:22,760 --> 00:51:29,780
we would just say yes so you have to do

971
00:51:26,659 --> 00:51:31,789
that yourself now so if you want this

972
00:51:29,780 --> 00:51:36,019
stuff that's on you

973
00:51:31,789 --> 00:51:38,440
right and so that code just goes in here

974
00:51:36,019 --> 00:51:43,719
I don't know why this would be separate

975
00:51:38,440 --> 00:51:43,720
like I don't know why so let me just

976
00:51:45,760 --> 00:51:52,180
yeah

977
00:51:47,059 --> 00:51:52,179
so that doesn't matter at all

978
00:52:04,210 --> 00:52:12,400
so this part right here can just be

979
00:52:07,309 --> 00:52:12,400
welded together it just looks like that

980
00:52:12,550 --> 00:52:35,269
and that right this goes away and our

981
00:52:33,800 --> 00:52:36,920
renderer test should still work just

982
00:52:35,269 --> 00:52:40,690
fine now cuz it's just calling the same

983
00:52:36,920 --> 00:52:45,108
code it was calling yep

984
00:52:40,690 --> 00:52:48,170
so this code should be fine and now we

985
00:52:45,108 --> 00:52:52,549
just need in our other side of things we

986
00:52:48,170 --> 00:52:56,500
can just use this to create our own you

987
00:52:52,550 --> 00:53:00,800
know function table here right

988
00:52:56,500 --> 00:53:03,380
so inside win32 handmade it's we're

989
00:53:00,800 --> 00:53:06,260
gonna do our own version so that we can

990
00:53:03,380 --> 00:53:08,300
hot load it instead of using the

991
00:53:06,260 --> 00:53:14,680
currently existing thing so we're gonna

992
00:53:08,300 --> 00:53:18,530
have a win32 renderer function table and

993
00:53:14,679 --> 00:53:30,259
in fact we could even put that in here

994
00:53:18,530 --> 00:53:42,050
and do this right okay so now we can

995
00:53:30,260 --> 00:53:45,400
just yeah so now we can just call the

996
00:53:42,050 --> 00:53:48,830
exact same calls are calling before and

997
00:53:45,400 --> 00:53:51,050
and just point them at the renderer and

998
00:53:48,829 --> 00:53:52,309
that should be the end of it now they'll

999
00:53:51,050 --> 00:53:54,440
be a little more work involved because

1000
00:53:52,309 --> 00:53:55,759
the renderer is not hot loadable at the

1001
00:53:54,440 --> 00:53:57,950
moment because i don't think it knows

1002
00:53:55,760 --> 00:53:59,420
like we have to put into thing that

1003
00:53:57,949 --> 00:54:03,379
knows that when you're going to reload

1004
00:53:59,420 --> 00:54:05,599
it you have to call the function in it

1005
00:54:03,380 --> 00:54:07,070
that's like shut down the GL stuff and

1006
00:54:05,599 --> 00:54:08,570
then restart it later right because it

1007
00:54:07,070 --> 00:54:11,690
has to recompile all its shaders and all

1008
00:54:08,570 --> 00:54:13,420
that garbage right so we're gonna have

1009
00:54:11,690 --> 00:54:17,329
to have a thing that tells it to like

1010
00:54:13,420 --> 00:54:21,530
redo stuff but other than that

1011
00:54:17,329 --> 00:54:22,639
we should be okay so so we will have a

1012
00:54:21,530 --> 00:54:23,840
little bit more work to do but that's

1013
00:54:22,639 --> 00:54:25,279
okay we've got some time left in the

1014
00:54:23,840 --> 00:54:30,559
stream so it should be pretty reasonable

1015
00:54:25,280 --> 00:54:32,000
right I'll forego don't by the way yeah

1016
00:54:30,559 --> 00:54:33,769
I know we can turn off the assign within

1017
00:54:32,000 --> 00:54:36,440
conditional expression but we don't want

1018
00:54:33,769 --> 00:54:40,880
to right we already turn off lots of

1019
00:54:36,440 --> 00:54:44,030
them but that one I think is not a

1020
00:54:40,880 --> 00:54:45,740
particularly good idea right so here's

1021
00:54:44,030 --> 00:54:47,510
the the warnings we thought were a good

1022
00:54:45,739 --> 00:54:52,669
idea to turn off and that one we wanted

1023
00:54:47,510 --> 00:54:55,520
to keep it okay so moving along let's go

1024
00:54:52,670 --> 00:54:57,260
ahead and actually call this in win32

1025
00:54:55,519 --> 00:55:01,849
hand-made here

1026
00:54:57,260 --> 00:55:04,880
and so that dll again maybe we want that

1027
00:55:01,849 --> 00:55:08,929
name to be standardized I'm not sure we

1028
00:55:04,880 --> 00:55:11,780
do so I may not do that what I may do is

1029
00:55:08,929 --> 00:55:15,589
say all right we've got a compilation

1030
00:55:11,780 --> 00:55:18,710
thing here we probably need to do the

1031
00:55:15,590 --> 00:55:24,880
same stuff as like we probably need to

1032
00:55:18,710 --> 00:55:24,880
do literally this and so we have like

1033
00:55:25,510 --> 00:55:40,120
oops we probably want to do the handmade

1034
00:55:32,570 --> 00:55:42,680
renderer test needs to have that and

1035
00:55:40,119 --> 00:55:45,829
what we probably want to do here is say

1036
00:55:42,679 --> 00:55:49,449
all right this is the like OpenGL lock

1037
00:55:45,829 --> 00:55:49,449
or whatever and

1038
00:55:59,980 --> 00:56:18,829
and I think that's what we're looking at

1039
00:56:03,349 --> 00:56:20,539
here now the bummer here is that means

1040
00:56:18,829 --> 00:56:21,798
that our build up bat probably gets a

1041
00:56:20,539 --> 00:56:25,278
little more complicated because again we

1042
00:56:21,798 --> 00:56:28,278
got a workaround Windows right and so if

1043
00:56:25,278 --> 00:56:32,778
you look at how we build the game you

1044
00:56:28,278 --> 00:56:34,909
can see here it's like hey it's gonna do

1045
00:56:32,778 --> 00:56:40,998
all this nonsense right like waiting for

1046
00:56:34,909 --> 00:56:45,889
this lock and once the lock is done it's

1047
00:56:40,998 --> 00:56:47,480
gonna delete it right and maybe you know

1048
00:56:45,889 --> 00:56:52,150
since these things get built together

1049
00:56:47,480 --> 00:56:52,150
baby what we could do here is actually

1050
00:56:52,719 --> 00:56:58,038
reorganize this a little bit and say

1051
00:56:55,190 --> 00:57:01,700
alright if the testbed went down here

1052
00:56:58,039 --> 00:57:04,670
and the renderer is here let's move that

1053
00:57:01,699 --> 00:57:09,139
inside the lock and then we only have to

1054
00:57:04,670 --> 00:57:12,559
have one lock right so if I said like

1055
00:57:09,139 --> 00:57:18,889
okay here are the renderers so it here

1056
00:57:12,559 --> 00:57:21,950
we do like waiting for PDP lock or we

1057
00:57:18,889 --> 00:57:27,998
echo to the lock right and then we

1058
00:57:21,949 --> 00:57:27,998
rebuild the renderers and the game right

1059
00:57:28,028 --> 00:57:38,588
something like that I guess makes sense

1060
00:57:34,099 --> 00:57:42,440
so we do compile here of the renderer

1061
00:57:38,588 --> 00:57:43,909
using the same technique and in here we

1062
00:57:42,440 --> 00:57:46,429
look and you can see like we've got

1063
00:57:43,909 --> 00:57:52,088
handmade and then that found random

1064
00:57:46,429 --> 00:57:57,368
thing there right and the pound random

1065
00:57:52,088 --> 00:57:57,369
on the PDB

1066
00:58:06,380 --> 00:58:09,380
hmm

1067
00:58:20,358 --> 00:58:31,799
so wait a minute when we do this compile

1068
00:58:28,179 --> 00:58:31,799
[Music]

1069
00:58:36,608 --> 00:58:45,949
I'm a little confused because that

1070
00:58:40,820 --> 00:58:47,539
random number don't remember I got to

1071
00:58:45,949 --> 00:58:49,279
watch my own video to remember what we

1072
00:58:47,539 --> 00:58:53,090
actually what kind of nonsense we did

1073
00:58:49,280 --> 00:58:58,070
here we're only specifying a random one

1074
00:58:53,090 --> 00:59:00,470
for the PDB but not for the DOL so I

1075
00:58:58,070 --> 00:59:07,700
guess that's because we move the DOL

1076
00:59:00,469 --> 00:59:10,189
ourselves yeah

1077
00:59:07,699 --> 00:59:14,089
so that's because we move the DLL

1078
00:59:10,190 --> 00:59:16,039
ourselves okay so I guess what that

1079
00:59:14,090 --> 00:59:19,640
means is that as long as the renderer

1080
00:59:16,039 --> 00:59:21,739
just has an arbitrary nonsense PDB we

1081
00:59:19,639 --> 00:59:23,900
actually don't have to rename it which

1082
00:59:21,739 --> 00:59:26,449
is kind of nice and if we put it inside

1083
00:59:23,900 --> 00:59:30,920
this lock then we don't need to locks

1084
00:59:26,449 --> 00:59:34,730
either right so basically all we have to

1085
00:59:30,920 --> 00:59:38,300
do here I think is just put this right

1086
00:59:34,730 --> 00:59:45,409
there right and say that all right so

1087
00:59:38,300 --> 00:59:46,430
win32 handmade open jail random PDB and

1088
00:59:45,409 --> 00:59:50,139
that should be fine

1089
00:59:46,429 --> 00:59:53,480
all of this should just work I think

1090
00:59:50,139 --> 00:59:58,608
that way the lock filename doesn't

1091
00:59:53,480 --> 01:00:01,159
actually need to be different so instead

1092
00:59:58,608 --> 01:00:03,469
of this we don't that can just be

1093
01:00:01,159 --> 01:00:07,598
instead of game code lock we can just

1094
01:00:03,469 --> 01:00:07,598
have this be like called lock full path

1095
01:00:07,719 --> 01:00:16,939
or code lock right and it can just get

1096
01:00:14,119 --> 01:00:18,890
used for everything now we can't choose

1097
01:00:16,940 --> 01:00:24,170
to have more locks later if we need to

1098
01:00:18,889 --> 01:00:26,000
buy multiple t plexi mat right but for

1099
01:00:24,170 --> 01:00:28,159
now we don't actually have to do that we

1100
01:00:26,000 --> 01:00:31,670
can just use one lock and everybody can

1101
01:00:28,159 --> 01:00:35,618
share the same lock right so that seems

1102
01:00:31,670 --> 01:00:35,619
good so let's make that happen

1103
01:00:38,338 --> 01:00:46,048
and let's make this happen right so

1104
01:00:43,139 --> 01:00:49,139
first we're going to start by loading

1105
01:00:46,048 --> 01:00:50,759
the renderer in a different way so the

1106
01:00:49,139 --> 01:00:58,618
way we're going to do that is just say

1107
01:00:50,760 --> 01:01:01,619
ok instead of this code here when we do

1108
01:00:58,619 --> 01:01:11,670
a win32 load code we're gonna have this

1109
01:01:01,619 --> 01:01:15,568
called renderer code here right and this

1110
01:01:11,670 --> 01:01:18,210
is going to be like render a code full

1111
01:01:15,568 --> 01:01:22,798
path and this right here is going to be

1112
01:01:18,210 --> 01:01:28,588
like win32 renderer function table names

1113
01:01:22,798 --> 01:01:33,619
and the actual functions themselves I

1114
01:01:28,588 --> 01:01:33,619
guess like we've only got one right oops

1115
01:01:41,568 --> 01:01:48,150
and so then when we actually load this

1116
01:01:44,369 --> 01:01:50,760
that's supposed to be that we should be

1117
01:01:48,150 --> 01:01:52,528
able to just do like hey we loaded this

1118
01:01:50,760 --> 01:01:58,710
renderer code and so now we can actually

1119
01:01:52,528 --> 01:02:07,699
just call like renderer load renderer

1120
01:01:58,710 --> 01:02:07,699
and I think that's it

1121
01:02:19,610 --> 01:02:29,220
so we've got a few compile errors here

1122
01:02:27,539 --> 01:02:32,900
oh and that's winter so this is renderer

1123
01:02:29,219 --> 01:02:32,899
like functions or something

1124
01:02:42,130 --> 01:02:54,318
looks like we also need to pass the

1125
01:02:44,059 --> 01:02:57,970
window DC they're handmade code win32

1126
01:02:54,318 --> 01:02:57,969
render attest no such file or directory

1127
01:03:09,420 --> 01:03:15,869
right can't do a pop tea on that yeah

1128
01:03:13,179 --> 01:03:15,868
there we go

1129
01:03:17,670 --> 01:03:24,369
all right so win32 load renderer needing

1130
01:03:21,818 --> 01:03:27,699
the DC is the only weird thing there and

1131
01:03:24,369 --> 01:03:30,489
you can see what was happening with that

1132
01:03:27,699 --> 01:03:34,509
here we do init default renderer gonna

1133
01:03:30,489 --> 01:03:37,179
pass the window we just called gut we

1134
01:03:34,509 --> 01:03:47,829
just called get DC on it so I guess it's

1135
01:03:37,179 --> 01:04:03,929
just that great um oops

1136
01:03:47,829 --> 01:04:08,999
oh no accidentally deleted RC time okay

1137
01:04:03,929 --> 01:04:12,399
alright so I think that's all good and

1138
01:04:08,998 --> 01:04:15,278
it works so now the question is can we

1139
01:04:12,400 --> 01:04:17,528
get it to reload right

1140
01:04:15,278 --> 01:04:20,768
and so we're gonna have to change the

1141
01:04:17,528 --> 01:04:22,690
structure a little bit of it because in

1142
01:04:20,768 --> 01:04:25,929
terms of what we actually call in the

1143
01:04:22,690 --> 01:04:27,759
renderer you can see that we've got so

1144
01:04:25,929 --> 01:04:32,379
if I jump to that platform render or

1145
01:04:27,759 --> 01:04:34,900
structure you can see that there's like

1146
01:04:32,380 --> 01:04:38,200
functions in here that you call and we

1147
01:04:34,900 --> 01:04:42,219
don't really want those to work this way

1148
01:04:38,199 --> 01:04:46,478
anymore right because what we're gonna

1149
01:04:42,219 --> 01:04:48,429
do is when we call load we then want to

1150
01:04:46,478 --> 01:04:51,518
be able to call like begin frame and end

1151
01:04:48,429 --> 01:04:55,710
frame every frame and when we reload we

1152
01:04:51,518 --> 01:04:57,848
don't want to call load again right so

1153
01:04:55,710 --> 01:05:00,039
when we're just changing things that

1154
01:04:57,849 --> 01:05:05,380
happen for frame we don't want that to

1155
01:05:00,039 --> 01:05:07,210
actually change things right so we need

1156
01:05:05,380 --> 01:05:09,450
to kind of work out how this is going to

1157
01:05:07,210 --> 01:05:12,969
happen without there being any weird

1158
01:05:09,449 --> 01:05:14,798
problems like that

1159
01:05:12,969 --> 01:05:20,500
so because we can't we can't

1160
01:05:14,798 --> 01:05:29,079
reinitialize all of opengl I mean

1161
01:05:20,500 --> 01:05:32,199
I mean I guess we could the so I mean

1162
01:05:29,079 --> 01:05:36,340
the problem right is that we have a

1163
01:05:32,199 --> 01:05:38,949
bunch of texture state and so I guess

1164
01:05:36,340 --> 01:05:40,690
there's two ways we could do this one is

1165
01:05:38,949 --> 01:05:42,819
we could just make it so that the render

1166
01:05:40,690 --> 01:05:45,190
just gets strobed and it goes off it

1167
01:05:42,820 --> 01:05:47,980
goes the other way I guess we could do

1168
01:05:45,190 --> 01:05:50,340
it is just have a call into the asset

1169
01:05:47,980 --> 01:05:54,099
system that's like clear everything

1170
01:05:50,340 --> 01:05:55,840
right and then we do just reload the

1171
01:05:54,099 --> 01:05:57,700
entire renderer so like we shut down

1172
01:05:55,840 --> 01:06:02,880
open jail and reload open jail

1173
01:05:57,699 --> 01:06:05,529
completely I mean the upside to that is

1174
01:06:02,880 --> 01:06:07,329
you know that it's complete but I don't

1175
01:06:05,530 --> 01:06:09,580
think I want to do that and the reason

1176
01:06:07,329 --> 01:06:13,000
is because if you think about what we'd

1177
01:06:09,579 --> 01:06:15,690
actually be using this for so if you

1178
01:06:13,000 --> 01:06:19,510
think about what we'd actually be using

1179
01:06:15,690 --> 01:06:22,900
the reloading for for it's gonna be like

1180
01:06:19,510 --> 01:06:25,480
changing shaders and stuff right and so

1181
01:06:22,900 --> 01:06:27,519
we don't want to pay the cost of

1182
01:06:25,480 --> 01:06:29,829
resubmitting all of our textures and all

1183
01:06:27,519 --> 01:06:33,280
that stuff just to change something in a

1184
01:06:29,829 --> 01:06:38,289
shader so we probably want to make that

1185
01:06:33,280 --> 01:06:40,660
roundtrip as fast as possible so my

1186
01:06:38,289 --> 01:06:43,900
guess is we don't really want to do that

1187
01:06:40,659 --> 01:06:45,969
so what we probably want to do is say

1188
01:06:43,900 --> 01:06:49,420
that like renderer begin frame and end

1189
01:06:45,969 --> 01:06:52,629
frame which are the functions we

1190
01:06:49,420 --> 01:06:54,940
actually call here we probably just want

1191
01:06:52,630 --> 01:07:05,829
to migrate those out so the platform

1192
01:06:54,940 --> 01:07:10,349
renderer would these right would

1193
01:07:05,829 --> 01:07:13,358
actually move out to here like that and

1194
01:07:10,349 --> 01:07:18,820
then these would actually be things you

1195
01:07:13,358 --> 01:07:21,489
actually get proc address so they they

1196
01:07:18,820 --> 01:07:25,710
exist external right so begin frame and

1197
01:07:21,489 --> 01:07:25,709
end frame actually get exported

1198
01:07:28,219 --> 01:07:33,719
so this stuff here right actually gets

1199
01:07:33,119 --> 01:07:45,630
exported

1200
01:07:33,719 --> 01:07:49,129
and so I assume congeal loader in it or

1201
01:07:45,630 --> 01:07:52,970
I don't know yeah

1202
01:07:49,130 --> 01:07:55,710
so in here like where it's doing all its

1203
01:07:52,969 --> 01:08:07,109
whatever the heck it's doing right so

1204
01:07:55,710 --> 01:08:09,449
like in here for these win32 up until

1205
01:08:07,110 --> 01:08:12,390
begin frame and win32 opengl and frame

1206
01:08:09,449 --> 01:08:15,960
so these callbacks like that are

1207
01:08:12,389 --> 01:08:18,389
happening in here would actually just be

1208
01:08:15,960 --> 01:08:32,270
called begin frame and end frame and you

1209
01:08:18,390 --> 01:08:32,270
would look them up directly right

1210
01:08:38,189 --> 01:08:45,818
so I think that's what we would do and

1211
01:08:40,479 --> 01:08:50,649
this would go away we would say in here

1212
01:08:45,819 --> 01:08:57,310
that there's like begin frame and end

1213
01:08:50,649 --> 01:09:00,369
frame and you know maybe these are since

1214
01:08:57,310 --> 01:09:10,029
they're the win32 versions maybe they

1215
01:09:00,369 --> 01:09:14,500
look like this that I guess is what we

1216
01:09:10,029 --> 01:09:17,139
would go with so then if that's actually

1217
01:09:14,500 --> 01:09:20,319
happening then we do need one of the

1218
01:09:17,139 --> 01:09:21,880
thing which is inside the build up bat

1219
01:09:20,319 --> 01:09:24,310
when we say we're gonna build this

1220
01:09:21,880 --> 01:09:29,409
renderer we need to say that we're

1221
01:09:24,310 --> 01:09:33,548
exporting these right so we can just say

1222
01:09:29,408 --> 01:09:43,019
that we've got like you know win32 begin

1223
01:09:33,548 --> 01:09:43,019
frame and win32 and frame and off we go

1224
01:09:44,460 --> 01:09:50,230
all right so that's all well and good

1225
01:09:47,380 --> 01:09:54,159
and happy and dancey and everyone's you

1226
01:09:50,229 --> 01:09:56,948
know doing their thing but what we need

1227
01:09:54,158 --> 01:09:59,170
to do now is make it so that the

1228
01:09:56,948 --> 01:10:02,229
external code that's actually using

1229
01:09:59,170 --> 01:10:05,529
these knows to call them not in the

1230
01:10:02,229 --> 01:10:09,250
render itself so it can't use that it's

1231
01:10:05,529 --> 01:10:11,019
got to use renderer functions right so

1232
01:10:09,250 --> 01:10:13,630
let's make sure that happens

1233
01:10:11,020 --> 01:10:15,670
but other than that I think now it

1234
01:10:13,630 --> 01:10:18,550
should work by having all of those

1235
01:10:15,670 --> 01:10:20,429
things loaded so in here we're like

1236
01:10:18,550 --> 01:10:23,969
actually it's renderer functions

1237
01:10:20,429 --> 01:10:28,569
actually its renderer functions

1238
01:10:23,969 --> 01:10:32,020
actually it's Frankenstein's monster and

1239
01:10:28,569 --> 01:10:35,399
so on so in this code which is just the

1240
01:10:32,020 --> 01:10:38,650
render test code again this part here

1241
01:10:35,399 --> 01:10:42,250
wants to now do a little bit more stuff

1242
01:10:38,649 --> 01:10:44,979
right and maybe this just gets welded in

1243
01:10:42,250 --> 01:10:48,939
and we just have these pieces of code

1244
01:10:44,979 --> 01:10:50,408
like right in here so with the win32 in

1245
01:10:48,939 --> 01:10:51,819
it default renderer thing that's

1246
01:10:50,408 --> 01:10:58,929
happening

1247
01:10:51,819 --> 01:10:58,929
we would want to just go like this and

1248
01:11:33,640 --> 01:11:58,400
right so we just want this to to load

1249
01:11:46,850 --> 01:12:05,240
these up and hopefully that works right

1250
01:11:58,399 --> 01:12:13,420
now this goes away I think because

1251
01:12:05,239 --> 01:12:13,420
that's going to happen here

1252
01:12:18,429 --> 01:12:29,078
and I just want to make sure this

1253
01:12:20,118 --> 01:12:35,168
compiles okay mmm

1254
01:12:29,078 --> 01:12:35,168
limits is gotta be passed by address now

1255
01:12:36,010 --> 01:12:40,239
and this is just going to be like

1256
01:12:50,260 --> 01:13:00,710
okay so I also probably want to make

1257
01:12:55,069 --> 01:13:02,719
sure this actually works at all so let's

1258
01:13:00,710 --> 01:13:04,789
see and I think that's fine it's just

1259
01:13:02,720 --> 01:13:06,260
right it's we don't have any lighting

1260
01:13:04,789 --> 01:13:08,329
here but you can see that it's still

1261
01:13:06,260 --> 01:13:09,829
there we should probably add some

1262
01:13:08,329 --> 01:13:12,640
lighting to our render or test or at

1263
01:13:09,829 --> 01:13:15,640
least turn it off but so that seems fine

1264
01:13:12,640 --> 01:13:15,640
right

1265
01:13:16,840 --> 01:13:24,029
all good and then what we want to do is

1266
01:13:20,840 --> 01:13:24,029
[Music]

1267
01:13:24,069 --> 01:13:30,829
get this one working with reload because

1268
01:13:28,340 --> 01:13:32,630
now everything is calling through for

1269
01:13:30,829 --> 01:13:35,000
separate functions so you can load and

1270
01:13:32,630 --> 01:13:36,890
then also do begin in frame so that

1271
01:13:35,000 --> 01:13:40,130
means we could reload and it would in

1272
01:13:36,890 --> 01:13:44,060
fact switch which begin and end frame

1273
01:13:40,130 --> 01:13:47,000
calls were being used so if we were to

1274
01:13:44,060 --> 01:13:51,380
do that we would want to do that

1275
01:13:47,000 --> 01:13:52,970
I presume kind of after the end of a

1276
01:13:51,380 --> 01:13:56,930
frame or before at the beginning of a

1277
01:13:52,970 --> 01:13:59,110
frame one or the other so I'm assuming

1278
01:13:56,930 --> 01:14:04,780
what we want to do here is say all right

1279
01:13:59,109 --> 01:14:04,779
let's also see hmm where does that

1280
01:14:10,949 --> 01:14:18,760
where are we actually updating that down

1281
01:14:13,119 --> 01:14:20,829
here here it is so like here after we do

1282
01:14:18,760 --> 01:14:23,199
this stuff I'm assuming we would just

1283
01:14:20,829 --> 01:14:25,210
after we reload the executable

1284
01:14:23,199 --> 01:14:33,309
we'd also reload the renderer if we

1285
01:14:25,210 --> 01:14:35,529
wanted to like maybe right there so

1286
01:14:33,310 --> 01:14:39,430
right after we end the frame we'd do

1287
01:14:35,529 --> 01:14:43,059
something right so maybe we'd say like

1288
01:14:39,430 --> 01:14:45,970
if win32 check for code change then

1289
01:14:43,060 --> 01:15:01,690
win32 reload code you know what I'm

1290
01:14:45,970 --> 01:15:11,680
saying just that and I don't really know

1291
01:15:01,689 --> 01:15:18,399
I don't really know what I want to do

1292
01:15:11,680 --> 01:15:21,880
after that the settings get like munched

1293
01:15:18,399 --> 01:15:25,719
I just need there to be like a strobe

1294
01:15:21,880 --> 01:15:29,010
that says hey it got reloaded so you're

1295
01:15:25,720 --> 01:15:32,350
gonna have to reinitialize yourself and

1296
01:15:29,010 --> 01:15:36,310
there's like a settings there's this

1297
01:15:32,350 --> 01:15:40,410
thing right and it's gonna do a diff on

1298
01:15:36,310 --> 01:15:44,590
these so we just need like a force

1299
01:15:40,409 --> 01:15:47,229
reload kind of thing and I suspect that

1300
01:15:44,590 --> 01:15:50,650
probably we could just clear the game

1301
01:15:47,229 --> 01:15:56,829
render settings like this one and then

1302
01:15:50,649 --> 01:15:59,170
it would just all look new so maybe

1303
01:15:56,829 --> 01:16:04,600
that's the easiest thing to do

1304
01:15:59,170 --> 01:16:07,569
I don't know but that's that's the next

1305
01:16:04,600 --> 01:16:10,810
part so let's just see if this works at

1306
01:16:07,569 --> 01:16:16,479
all right now and and then we'll kind of

1307
01:16:10,810 --> 01:16:18,700
try to massage things into place so if I

1308
01:16:16,479 --> 01:16:20,668
just change something that I know will

1309
01:16:18,699 --> 01:16:23,658
will create

1310
01:16:20,668 --> 01:16:27,059
issue or whatever right so like if we

1311
01:16:23,658 --> 01:16:30,238
run this thing now and you know the game

1312
01:16:27,059 --> 01:16:32,969
is doing its thing and I go into the

1313
01:16:30,238 --> 01:16:35,879
renderer here and I say oops that's not

1314
01:16:32,969 --> 01:16:39,300
the renderer I go into the renderer and

1315
01:16:35,880 --> 01:16:41,399
I just say actually I guess I want this

1316
01:16:39,300 --> 01:16:44,550
I want the open jail not you know

1317
01:16:41,399 --> 01:16:48,769
agnostic code and I say like oh yeah

1318
01:16:44,550 --> 01:16:53,538
like you know what let's just let's just

1319
01:16:48,769 --> 01:16:53,539
change like the clear color or something

1320
01:16:53,868 --> 01:17:00,359
so that like when we do a GL clear here

1321
01:16:58,498 --> 01:17:13,438
like we're gonna clear to some other

1322
01:17:00,359 --> 01:17:29,118
thing right and this is going to be a

1323
01:17:13,439 --> 01:17:34,679
disaster right in theory I think so I

1324
01:17:29,118 --> 01:17:36,268
guess I'm not sure I can't see this cuz

1325
01:17:34,679 --> 01:17:41,368
my heads behind it so I guess I'm gonna

1326
01:17:36,269 --> 01:17:45,418
have to do this which is not what I

1327
01:17:41,368 --> 01:17:49,188
would prefer oh you know what I could

1328
01:17:45,418 --> 01:17:49,189
put it here that'll work

1329
01:17:51,849 --> 01:18:01,810
my head's in the way so where did we

1330
01:17:55,599 --> 01:18:04,510
crash we crashed at address zero Oh

1331
01:18:01,810 --> 01:18:06,940
so actually I didn't need to do that so

1332
01:18:04,510 --> 01:18:09,099
that just means we hit a call into

1333
01:18:06,939 --> 01:18:12,339
something that didn't actually exist

1334
01:18:09,099 --> 01:18:24,300
I guess meaning the reload didn't work

1335
01:18:12,340 --> 01:18:24,300
right I guess I should check these here

1336
01:18:29,488 --> 01:18:36,879
to prevent that but that does mean that

1337
01:18:35,500 --> 01:18:39,039
something broke because it should have

1338
01:18:36,880 --> 01:18:41,050
gotten addresses for those things so so

1339
01:18:39,039 --> 01:18:42,880
we did screw something up with the

1340
01:18:41,050 --> 01:18:45,010
reload that doesn't screw up when you're

1341
01:18:42,880 --> 01:18:51,639
actually just loading it like normally

1342
01:18:45,010 --> 01:18:54,699
right so let's go ahead and make that

1343
01:18:51,639 --> 01:18:57,130
happen so here you know we we sort of

1344
01:18:54,698 --> 01:18:58,719
have an issue we're like you know if if

1345
01:18:57,130 --> 01:19:02,069
we can't load the renderer we would need

1346
01:18:58,719 --> 01:19:02,069
a fatal error right so

1347
01:19:13,510 --> 01:19:17,539
so let me go ahead and issue like a

1348
01:19:15,710 --> 01:19:19,550
fatal error because if we can't load the

1349
01:19:17,539 --> 01:19:22,489
renderer then we can't even display an

1350
01:19:19,550 --> 01:19:24,500
error message right so we would have to

1351
01:19:22,489 --> 01:19:26,630
rely on the operating system to put up

1352
01:19:24,500 --> 01:19:28,340
like a dialog box on our behalf because

1353
01:19:26,630 --> 01:19:32,329
that's the only thing we could possibly

1354
01:19:28,340 --> 01:19:36,380
do right so I don't know where the error

1355
01:19:32,329 --> 01:19:39,409
message thing is here but that's not the

1356
01:19:36,380 --> 01:19:59,190
one I'm thinking of talking about the

1357
01:19:39,409 --> 01:20:02,239
platform err win32 error message so yeah

1358
01:19:59,189 --> 01:20:02,239
[Music]

1359
01:20:04,390 --> 01:20:14,900
I'm just gonna say I'm unable to load a

1360
01:20:06,619 --> 01:20:23,599
renderer here and that's actually winter

1361
01:20:14,899 --> 01:20:33,289
code and then inside the begin frame

1362
01:20:23,600 --> 01:20:35,860
thing for rendering we'd also have to do

1363
01:20:33,289 --> 01:20:35,859
the same thing

1364
01:20:38,329 --> 01:20:42,829
I mean I guess part of the problem here

1365
01:20:40,939 --> 01:20:49,149
though is frame probably gets used

1366
01:20:42,829 --> 01:20:53,029
elsewhere look where is frame used yeah

1367
01:20:49,149 --> 01:20:55,579
so I mean one of the problems is like I

1368
01:20:53,029 --> 01:21:00,439
guess I'm not sure to what extent we can

1369
01:20:55,579 --> 01:21:01,010
really run without a renderer you know

1370
01:21:00,439 --> 01:21:07,719
what I mean

1371
01:21:01,010 --> 01:21:13,750
like more or less this part here

1372
01:21:07,720 --> 01:21:13,750
probably just has to say like okay

1373
01:21:32,500 --> 01:21:35,909
I assume all this stuff

1374
01:21:45,229 --> 01:21:49,738
so like you know the global pause things

1375
01:21:48,029 --> 01:21:51,569
a little weird cuz like you know I guess

1376
01:21:49,738 --> 01:21:54,809
I don't actually know so limit well

1377
01:21:51,569 --> 01:22:07,590
let's do it this way let's actually just

1378
01:21:54,810 --> 01:22:10,130
look for where that thing is used so

1379
01:22:07,590 --> 01:22:10,130
it's in here

1380
01:22:30,328 --> 01:22:49,228
and it's in here and I guess I don't

1381
01:22:36,658 --> 01:22:51,658
know if freemen can frame and deal with

1382
01:22:49,229 --> 01:22:53,550
the fact like maybe frame end has to

1383
01:22:51,658 --> 01:23:01,348
deal with that fact that it doesn't

1384
01:22:53,550 --> 01:23:14,458
actually get one of of the render

1385
01:23:01,349 --> 01:23:17,099
commands right yeah so I guess what I

1386
01:23:14,458 --> 01:23:20,358
would say is like probably we just need

1387
01:23:17,099 --> 01:23:20,359
to do this

1388
01:23:29,349 --> 01:23:34,289
I mean I really don't know if that's

1389
01:23:31,689 --> 01:23:34,289
sufficient

1390
01:23:44,590 --> 01:23:49,069
it's really not great I mean this should

1391
01:23:47,060 --> 01:23:52,940
probably be rewritten a little bit to

1392
01:23:49,069 --> 01:23:57,649
support like not doing these things

1393
01:23:52,939 --> 01:23:59,859
right so you know debug start and debug

1394
01:23:57,649 --> 01:23:59,859
and

1395
01:24:20,449 --> 01:24:33,059
so I guess I can do this so I guess we

1396
01:24:29,850 --> 01:24:34,800
can do it like that so this part here is

1397
01:24:33,060 --> 01:24:38,000
the only part that this really depends

1398
01:24:34,800 --> 01:24:41,250
on and it's a little bit iffy right so

1399
01:24:38,000 --> 01:24:44,579
you know we can't initialize the debug

1400
01:24:41,250 --> 01:24:47,430
state memory if we don't know like what

1401
01:24:44,579 --> 01:24:50,130
the the actual size is there which is

1402
01:24:47,430 --> 01:24:52,590
kind of busted so if you look at the

1403
01:24:50,130 --> 01:24:54,569
render dim the relationship of rendered

1404
01:24:52,590 --> 01:24:58,199
in here it's it's it's because it needs

1405
01:24:54,569 --> 01:25:05,609
to place these things and that's just

1406
01:24:58,199 --> 01:25:08,760
kind of stupid like the that's just we

1407
01:25:05,609 --> 01:25:10,710
shouldn't have done that and I also

1408
01:25:08,760 --> 01:25:13,680
don't know that we even really need to

1409
01:25:10,710 --> 01:25:17,699
do it anymore you know what I mean

1410
01:25:13,680 --> 01:25:22,380
so I don't know like I feel like that's

1411
01:25:17,699 --> 01:25:23,609
just stuff that should be removed a lot

1412
01:25:22,380 --> 01:25:25,350
of this stuff should get cleaned up at

1413
01:25:23,609 --> 01:25:27,139
some point but you know it's debug code

1414
01:25:25,350 --> 01:25:29,430
so we don't spend a lot of time on it

1415
01:25:27,140 --> 01:25:31,500
after it's sort of in there and working

1416
01:25:29,430 --> 01:25:37,409
it's like hard to usually make excuses

1417
01:25:31,500 --> 01:25:39,090
to go make it not be bad but in terms of

1418
01:25:37,409 --> 01:25:42,349
these right so yeah it's like rendered

1419
01:25:39,090 --> 01:25:44,460
in width and we're going half of that

1420
01:25:42,350 --> 01:25:48,090
backwards so that's two like the left

1421
01:25:44,460 --> 01:25:51,510
corner right or whatever and so these I

1422
01:25:48,090 --> 01:25:54,409
don't know like in terms of placing them

1423
01:25:51,510 --> 01:25:57,270
I feel like they just want to get placed

1424
01:25:54,409 --> 01:26:01,109
repeatedly right so you know who knows

1425
01:25:57,270 --> 01:26:03,510
what this gets set to here but basically

1426
01:26:01,109 --> 01:26:05,819
like if we got rid of this these would

1427
01:26:03,510 --> 01:26:11,970
be the only things that actually like

1428
01:26:05,819 --> 01:26:16,039
didn't work right and so I think what we

1429
01:26:11,970 --> 01:26:16,039
want to do is just do like

1430
01:26:28,750 --> 01:26:33,560
just stop doing any of that

1431
01:26:31,449 --> 01:26:35,689
look I don't I don't think any of this

1432
01:26:33,560 --> 01:26:37,100
is good or necessary I don't even know

1433
01:26:35,689 --> 01:26:39,379
if we're using this anymore but I think

1434
01:26:37,100 --> 01:26:42,350
we do want like this to go away right so

1435
01:26:39,380 --> 01:26:45,260
we shouldn't have that and that way in

1436
01:26:42,350 --> 01:26:49,789
here we can just say look we'll do the

1437
01:26:45,260 --> 01:26:53,210
debug start and end only if we actually

1438
01:26:49,789 --> 01:26:55,279
have the ability to draw stuff and that

1439
01:26:53,210 --> 01:26:57,230
way we can always continue to the debug

1440
01:26:55,279 --> 01:27:00,409
collation even when we don't have a

1441
01:26:57,229 --> 01:27:04,899
renderer right just for hardening

1442
01:27:00,409 --> 01:27:09,279
purposes and so now like we just have to

1443
01:27:04,899 --> 01:27:09,279
what's the what's the problem here

1444
01:27:15,439 --> 01:27:19,589
should probably compile and debug mode

1445
01:27:17,699 --> 01:27:23,789
so I can see what's going on so now we

1446
01:27:19,590 --> 01:27:27,390
just have to like actually suss this out

1447
01:27:23,789 --> 01:27:34,100
a little bit more but yeah so we

1448
01:27:27,390 --> 01:27:36,570
definitely only want the is valid part

1449
01:27:34,100 --> 01:27:38,340
of the renderer code here we definitely

1450
01:27:36,569 --> 01:27:44,090
only want to call these things in those

1451
01:27:38,340 --> 01:27:44,090
circumstances and that needs to be there

1452
01:27:44,449 --> 01:27:48,840
but then we have to go figure out why we

1453
01:27:46,680 --> 01:27:51,659
why it was becoming invalid in the first

1454
01:27:48,840 --> 01:27:52,800
place because it shouldn't have and so

1455
01:27:51,659 --> 01:28:01,470
we need to go figure out what's going on

1456
01:27:52,800 --> 01:28:04,350
there okay so in theory I mean I would

1457
01:28:01,470 --> 01:28:07,619
think if we just like recompile now it

1458
01:28:04,350 --> 01:28:10,860
should break right because just the act

1459
01:28:07,619 --> 01:28:13,949
of updating the renderer breaks and you

1460
01:28:10,859 --> 01:28:16,889
can see yeah we definitely did and

1461
01:28:13,949 --> 01:28:21,229
unfortunately like I can't get a call

1462
01:28:16,890 --> 01:28:23,970
stack back here so I can't actually see

1463
01:28:21,229 --> 01:28:27,529
where I actually am so where I'm

1464
01:28:23,970 --> 01:28:31,050
actually jumping into zero I don't know

1465
01:28:27,529 --> 01:28:34,199
because since the IP was set to zero I'm

1466
01:28:31,050 --> 01:28:38,579
not actually sure I might be able to

1467
01:28:34,199 --> 01:28:40,859
still look at it somehow and try to find

1468
01:28:38,579 --> 01:28:43,680
out where it is but what I might do is

1469
01:28:40,859 --> 01:28:46,349
just step in to the code at that point

1470
01:28:43,680 --> 01:28:48,840
and see where we actually go wrong so

1471
01:28:46,350 --> 01:28:52,950
what I might do is say all right let's

1472
01:28:48,840 --> 01:28:55,310
go to the code that actually does the

1473
01:28:52,949 --> 01:28:55,309
reload

1474
01:29:03,789 --> 01:29:09,500
because we're assuming that this is the

1475
01:29:05,960 --> 01:29:15,189
problem and let's just see if it is

1476
01:29:09,500 --> 01:29:18,739
right so here's me recompiling and like

1477
01:29:15,189 --> 01:29:19,250
we should get a breakpoint here at some

1478
01:29:18,739 --> 01:29:26,389
point

1479
01:29:19,250 --> 01:29:35,210
Oh hmm not sure why it didn't let me set

1480
01:29:26,390 --> 01:29:39,100
a breakpoint there all right so we may

1481
01:29:35,210 --> 01:29:43,899
have to compile in debug mode I guess

1482
01:29:39,100 --> 01:29:43,900
this doesn't know I guess where that is

1483
01:29:51,220 --> 01:29:56,949
all right so here's compiling a debug

1484
01:30:04,149 --> 01:30:09,549
and so in debug mode hopefully we can

1485
01:30:08,170 --> 01:30:11,560
get a breakpoint on that particular

1486
01:30:09,550 --> 01:30:15,670
thing so I'm gonna go ahead and rebuild

1487
01:30:11,560 --> 01:30:17,860
and so we've stopped here at win32

1488
01:30:15,670 --> 01:30:20,500
reload code which is where I expected it

1489
01:30:17,859 --> 01:30:24,130
to stop and I'm just going to step into

1490
01:30:20,500 --> 01:30:29,199
it here so you can see the load code

1491
01:30:24,130 --> 01:30:32,500
attempt and it thinks it succeeded right

1492
01:30:29,199 --> 01:30:37,000
so so it thinks that it actually did

1493
01:30:32,500 --> 01:30:37,569
load the code so let's see what it that

1494
01:30:37,000 --> 01:30:39,970
was bad

1495
01:30:37,569 --> 01:30:41,789
I didn't mean to do that well I can

1496
01:30:39,970 --> 01:30:47,940
still look at what I wanted to look at

1497
01:30:41,789 --> 01:30:51,220
so if we look at renderer code here then

1498
01:30:47,939 --> 01:30:56,189
the function table that's actually here

1499
01:30:51,220 --> 01:30:59,170
I suppose I should check it this way

1500
01:30:56,189 --> 01:31:03,699
does actually have code for each of

1501
01:30:59,170 --> 01:31:06,670
these but so I guess the problem happens

1502
01:31:03,699 --> 01:31:09,340
further down the line so let's see where

1503
01:31:06,670 --> 01:31:14,770
the problem actually happens if I step

1504
01:31:09,340 --> 01:31:21,279
through the code here for example does

1505
01:31:14,770 --> 01:31:24,480
it happen in begin frame now just keep

1506
01:31:21,279 --> 01:31:27,369
running down does it happen

1507
01:31:24,479 --> 01:31:29,469
in end frame maybe then I mean the next

1508
01:31:27,369 --> 01:31:35,349
time we call the renderer isn't for

1509
01:31:29,470 --> 01:31:36,940
awhile right so presumably none of this

1510
01:31:35,350 --> 01:31:42,520
fails because it doesn't involve the

1511
01:31:36,939 --> 01:31:45,549
renderer how about this nope

1512
01:31:42,520 --> 01:31:50,410
so then we get down to the end frame

1513
01:31:45,550 --> 01:31:52,300
call right and so it's in there so it's

1514
01:31:50,409 --> 01:31:57,479
actually it's actually in the opengl end

1515
01:31:52,300 --> 01:31:57,480
frame call stop that

1516
01:32:00,460 --> 01:32:06,980
so why would that be and I can just step

1517
01:32:05,420 --> 01:32:09,500
through that now and find out I guess

1518
01:32:06,979 --> 01:32:11,839
but the question is why would we be

1519
01:32:09,500 --> 01:32:17,329
jumping to zero in here like what are we

1520
01:32:11,840 --> 01:32:22,069
jumping to is there something that we

1521
01:32:17,329 --> 01:32:26,689
pass here that we jump to fit like are

1522
01:32:22,069 --> 01:32:42,229
we calling any actual programs inside

1523
01:32:26,689 --> 01:32:45,919
here cuz it doesn't are we where would

1524
01:32:42,229 --> 01:32:49,369
we be doing that I'm gonna have to just

1525
01:32:45,920 --> 01:32:51,170
step in there because I don't I don't

1526
01:32:49,369 --> 01:32:54,949
know where we would be jumping to a

1527
01:32:51,170 --> 01:32:58,550
function pointer in here unless it's

1528
01:32:54,949 --> 01:33:04,029
just the Open GL function table itself

1529
01:32:58,550 --> 01:33:06,230
but what that should just remain like we

1530
01:33:04,029 --> 01:33:07,609
like that should just be mapped into our

1531
01:33:06,229 --> 01:33:10,279
address space and should not have

1532
01:33:07,609 --> 01:33:18,979
changed right I mean it's that wrong I

1533
01:33:10,279 --> 01:33:22,159
don't know so I guess we'll find out I'm

1534
01:33:18,979 --> 01:33:27,739
gonna go ahead and run again I will

1535
01:33:22,159 --> 01:33:35,269
force it to reload so here's me

1536
01:33:27,739 --> 01:33:37,849
reloading and oh and I guess I got rid

1537
01:33:35,270 --> 01:33:40,510
of the breakpoint that was on the other

1538
01:33:37,850 --> 01:33:40,510
function there

1539
01:33:43,500 --> 01:33:48,869
uh wait a minute

1540
01:33:47,340 --> 01:33:57,869
that breakpoint is still there how come

1541
01:33:48,869 --> 01:33:59,279
I didn't hit so why isn't it letting me

1542
01:33:57,869 --> 01:34:00,689
set that breakpoint I don't understand

1543
01:33:59,279 --> 01:34:02,250
why it's being so finicky about this

1544
01:34:00,689 --> 01:34:03,960
breakpoint like why can't I just set

1545
01:34:02,250 --> 01:34:15,229
this breakpoint it doesn't like that

1546
01:34:03,960 --> 01:34:17,819
breakpoint again hmm can I set it here

1547
01:34:15,229 --> 01:34:19,139
so it just can't set a breakpoint now

1548
01:34:17,819 --> 01:34:22,500
it's like I don't know man

1549
01:34:19,140 --> 01:34:27,960
I wonder why remedy cannot set a

1550
01:34:22,500 --> 01:34:30,569
breakpoint is this something to do with

1551
01:34:27,960 --> 01:34:34,319
the currently loaded state of it or is

1552
01:34:30,569 --> 01:34:36,389
it just that the build itself makes it

1553
01:34:34,319 --> 01:34:39,679
difficult for it to know how to set a

1554
01:34:36,390 --> 01:34:39,680
breakpoint there or something

1555
01:34:50,090 --> 01:34:54,390
so it just can't figure out how to set a

1556
01:34:52,890 --> 01:34:57,329
breakpoint there and we don't really

1557
01:34:54,390 --> 01:34:59,550
know why but it really doesn't like it

1558
01:34:57,329 --> 01:35:01,738
so it's like this file it's just like

1559
01:34:59,550 --> 01:35:07,289
look I don't know where breakpoints go

1560
01:35:01,738 --> 01:35:11,669
anymore apparently I need to update my

1561
01:35:07,289 --> 01:35:14,300
remedy to the new version so I wonder if

1562
01:35:11,670 --> 01:35:18,989
I'm actually just hitting a bug and

1563
01:35:14,300 --> 01:35:22,590
that's just a bug that's occurring I'm

1564
01:35:18,988 --> 01:35:30,419
not sure that's that's one I couldn't

1565
01:35:22,590 --> 01:35:32,760
tell you yeah so I don't know something

1566
01:35:30,420 --> 01:35:35,579
about the PDB and the eggsy being not a

1567
01:35:32,760 --> 01:35:40,949
sink there I guess well it's good enough

1568
01:35:35,579 --> 01:35:44,100
for now let's go ahead and keep going so

1569
01:35:40,949 --> 01:35:47,399
now that we break here I'm gonna go drop

1570
01:35:44,100 --> 01:35:50,450
over to the OpenGL side of things and

1571
01:35:47,399 --> 01:35:52,949
I'm gonna look at the part where we

1572
01:35:50,449 --> 01:35:55,409
actually go to the end frame just so I

1573
01:35:52,949 --> 01:35:58,099
can see like who is jumping to zero like

1574
01:35:55,409 --> 01:36:00,510
I don't know exactly who that would be

1575
01:35:58,100 --> 01:36:08,250
and so I'm gonna try to just like run

1576
01:36:00,510 --> 01:36:12,710
over to that hmm so no it doesn't it did

1577
01:36:08,250 --> 01:36:17,840
not get there somehow

1578
01:36:12,710 --> 01:36:17,840
apparently let's try this one more time

1579
01:36:18,210 --> 01:36:27,180
hopefully we still have the breakpoint

1580
01:36:21,529 --> 01:36:29,189
no all right so I think like we're not

1581
01:36:27,180 --> 01:36:31,170
super able to actually set these

1582
01:36:29,189 --> 01:36:35,149
breakpoints here because for whatever

1583
01:36:31,170 --> 01:36:38,279
reason when we actually do the rebuild

1584
01:36:35,149 --> 01:36:40,229
it looks like this rebuild throws remedy

1585
01:36:38,279 --> 01:36:42,420
for a loop like the fact that we have

1586
01:36:40,229 --> 01:36:45,809
the other dll that we're loading also

1587
01:36:42,420 --> 01:36:48,659
has the random in it unless there's a

1588
01:36:45,810 --> 01:36:51,989
bug in the way that I'm doing this like

1589
01:36:48,659 --> 01:36:55,260
unless this this build step is is

1590
01:36:51,988 --> 01:36:57,649
somehow busted which I don't know it

1591
01:36:55,260 --> 01:36:57,650
could be

1592
01:37:07,658 --> 01:37:11,369
IIIi don't really know

1593
01:37:23,979 --> 01:37:30,888
hmm so yeah we don't know who is doing

1594
01:37:27,319 --> 01:37:32,689
that and we don't have any way of

1595
01:37:30,889 --> 01:37:33,920
actually stepping into it I guess we

1596
01:37:32,689 --> 01:37:41,210
could just use a different to pucker

1597
01:37:33,920 --> 01:37:44,000
temporarily is thing one I could also

1598
01:37:41,210 --> 01:37:49,579
try to instrument it so you know what I

1599
01:37:44,000 --> 01:37:52,729
could do is I could just say well okay

1600
01:37:49,579 --> 01:37:59,389
so well and you know what I could do

1601
01:37:52,729 --> 01:38:03,049
this so we believe that that works a

1602
01:37:59,389 --> 01:38:07,730
fresh recompile without remedy running

1603
01:38:03,050 --> 01:38:09,469
at the time and then we could run to

1604
01:38:07,729 --> 01:38:11,000
that point and then just step which we

1605
01:38:09,469 --> 01:38:16,368
do know works and I'll just step up

1606
01:38:11,000 --> 01:38:20,750
until the actual breakage point right so

1607
01:38:16,368 --> 01:38:22,848
there's the reload right and now I'm

1608
01:38:20,750 --> 01:38:25,579
assuming that like I can't really can i

1609
01:38:22,849 --> 01:38:28,810
oh so I can sort of run to a new break

1610
01:38:25,579 --> 01:38:33,139
point so does this actually work

1611
01:38:28,810 --> 01:38:35,480
yes so here we go into and win through

1612
01:38:33,139 --> 01:38:39,079
to end frame here and that's going to

1613
01:38:35,479 --> 01:38:41,029
call open gel and frame which I guess we

1614
01:38:39,079 --> 01:38:44,289
don't know maybe that doesn't work I

1615
01:38:41,029 --> 01:38:44,289
mean where is that let's see

1616
01:38:52,590 --> 01:38:59,800
that's not a very good total texture

1617
01:38:55,000 --> 01:39:06,579
memory number now is it and that's

1618
01:38:59,800 --> 01:39:21,579
completely invalid so this is not off to

1619
01:39:06,579 --> 01:39:24,340
a good start if we're honest about it so

1620
01:39:21,579 --> 01:39:26,529
I guess one thing we would say is we got

1621
01:39:24,340 --> 01:39:27,880
some bugs we can fix right now even

1622
01:39:26,529 --> 01:39:29,710
without looking for the rest of this

1623
01:39:27,880 --> 01:39:32,230
since I'm in here now I'm going to do a

1624
01:39:29,710 --> 01:39:40,720
little bit more of the looking there but

1625
01:39:32,229 --> 01:39:46,419
that's just total garbage so yeah we can

1626
01:39:40,720 --> 01:39:48,490
take a look at that a little later all

1627
01:39:46,420 --> 01:39:50,529
right so let's take a look at where

1628
01:39:48,489 --> 01:39:53,079
we're gonna call here so you can see

1629
01:39:50,529 --> 01:39:55,509
that the call is jumping to a specific

1630
01:39:53,079 --> 01:40:02,769
address so that's not going to jump zero

1631
01:39:55,510 --> 01:40:06,340
on us but we do call some pointers

1632
01:40:02,770 --> 01:40:10,240
immediately after that right so I guess

1633
01:40:06,340 --> 01:40:12,810
we'll see what happens here so let's see

1634
01:40:10,239 --> 01:40:12,809
where this goes

1635
01:40:18,300 --> 01:40:29,039
say where the heck are we so in that

1636
01:40:25,979 --> 01:40:31,019
first call they're out to wherever this

1637
01:40:29,039 --> 01:40:32,550
is calling out to which this is unable

1638
01:40:31,020 --> 01:40:38,640
to actually tell us where that is in the

1639
01:40:32,550 --> 01:40:45,779
source code that's actually where we

1640
01:40:38,640 --> 01:40:48,480
fault out so let's take a closer look at

1641
01:40:45,779 --> 01:40:51,319
that and that we have to do fresh builds

1642
01:40:48,479 --> 01:40:51,319
here apparently right

1643
01:41:02,590 --> 01:41:12,010
let's render here I'm gonna pay

1644
01:41:10,390 --> 01:41:13,420
attention to a couple new things here

1645
01:41:12,010 --> 01:41:14,350
now just because I know there's some

1646
01:41:13,420 --> 01:41:18,429
errors in there

1647
01:41:14,350 --> 01:41:21,190
so one of the things I would like to see

1648
01:41:18,429 --> 01:41:25,060
is this is the renderer here is this

1649
01:41:21,189 --> 01:41:30,159
okay so what's going on with this how is

1650
01:41:25,060 --> 01:41:34,170
the platform pointers zero I guess that

1651
01:41:30,159 --> 01:41:37,689
must just be because it doesn't actually

1652
01:41:34,170 --> 01:41:39,039
ever need to set that I also don't know

1653
01:41:37,689 --> 01:41:41,319
what's up with total texture memory

1654
01:41:39,039 --> 01:41:54,369
being zero do we not track that anymore

1655
01:41:41,319 --> 01:41:58,869
cuz I thought we were and no I guess

1656
01:41:54,369 --> 01:42:01,289
we're not so why are we not checking

1657
01:41:58,869 --> 01:42:01,289
that anymore

1658
01:42:17,210 --> 01:42:21,500
I guess we don't track it anymore

1659
01:42:19,489 --> 01:42:23,389
because since we use texture arrays we

1660
01:42:21,500 --> 01:42:26,539
never count whether or not we use them

1661
01:42:23,390 --> 01:42:39,829
or something all right I should put it

1662
01:42:26,539 --> 01:42:43,069
to do in there all right so I guess that

1663
01:42:39,829 --> 01:42:44,659
platform stuff is as expected and in

1664
01:42:43,069 --> 01:42:46,639
fact we have a comment right here that

1665
01:42:44,659 --> 01:42:48,229
says like we don't use it so it's

1666
01:42:46,640 --> 01:42:50,450
literally there just for like other

1667
01:42:48,229 --> 01:42:52,759
people who want to write renderers to

1668
01:42:50,449 --> 01:42:54,619
stick stuff in there which probably

1669
01:42:52,760 --> 01:42:56,360
makes sense because like if you're gonna

1670
01:42:54,619 --> 01:42:57,800
use like direct3d or something or

1671
01:42:56,359 --> 01:42:59,420
whatever you probably want to stick a

1672
01:42:57,800 --> 01:43:02,630
handle in there that's like here's the

1673
01:42:59,420 --> 01:43:06,500
direct3d handle or whatever right so it

1674
01:43:02,630 --> 01:43:08,480
makes sense all right so when we reload

1675
01:43:06,500 --> 01:43:22,489
this code some something weird is

1676
01:43:08,479 --> 01:43:25,239
happening and we're not sure what that

1677
01:43:22,489 --> 01:43:25,239
is the what

1678
01:43:28,510 --> 01:43:32,640
that is the what right there what is

1679
01:43:31,779 --> 01:43:36,789
that about

1680
01:43:32,640 --> 01:43:39,240
that is just nonsense that's probably

1681
01:43:36,789 --> 01:43:43,960
why we were messing up remedy as well

1682
01:43:39,239 --> 01:43:46,029
all right so let's fix that because we

1683
01:43:43,960 --> 01:43:47,739
basically copied code in there or I

1684
01:43:46,029 --> 01:43:49,509
shouldn't say we copied it we moved code

1685
01:43:47,739 --> 01:43:52,710
in there and then didn't make it

1686
01:43:49,510 --> 01:43:56,680
actually generic right so this is

1687
01:43:52,710 --> 01:44:05,670
getting the original DLL name right but

1688
01:43:56,680 --> 01:44:07,840
that name is not it's only that name

1689
01:44:05,670 --> 01:44:10,449
means we're gonna copy this file

1690
01:44:07,840 --> 01:44:13,840
potentially on top of an existing DLL

1691
01:44:10,449 --> 01:44:17,409
that we need to change right so this

1692
01:44:13,840 --> 01:44:22,119
needs to be a unique name and it can't

1693
01:44:17,409 --> 01:44:25,210
just be arbitrary right and you know I

1694
01:44:22,119 --> 01:44:28,599
don't know how exactly we want to deal

1695
01:44:25,210 --> 01:44:30,579
with that but if you look at the fact

1696
01:44:28,600 --> 01:44:33,190
like we're putting the temporary DLL

1697
01:44:30,579 --> 01:44:36,279
name into here right we just need some

1698
01:44:33,189 --> 01:44:40,629
way of this thing having a different

1699
01:44:36,279 --> 01:44:45,399
name depending on which one of the files

1700
01:44:40,630 --> 01:44:46,659
is actually loading right and we could

1701
01:44:45,399 --> 01:44:48,670
just pass in morning for that but

1702
01:44:46,659 --> 01:44:52,449
probably the easiest thing to do would

1703
01:44:48,670 --> 01:44:57,480
be to say like when we do the win32

1704
01:44:52,449 --> 01:44:57,479
build XE path file name so

1705
01:45:07,600 --> 01:45:13,039
so in here if we pass one of these

1706
01:45:10,310 --> 01:45:17,240
unique numbers to it it's gonna do one

1707
01:45:13,039 --> 01:45:19,100
of these things right and probably what

1708
01:45:17,239 --> 01:45:23,569
we want to do there is just have some

1709
01:45:19,100 --> 01:45:29,410
way that that can also handle like sort

1710
01:45:23,569 --> 01:45:29,409
of some additional uni King right so

1711
01:45:47,458 --> 01:45:57,599
I guess what I would say is maybe we

1712
01:45:50,760 --> 01:45:59,280
have a thing in here that's like yeah

1713
01:45:57,599 --> 01:46:00,420
you know what I'm just gonna do it so

1714
01:45:59,279 --> 01:46:02,819
I'm just gonna have this thing actually

1715
01:46:00,420 --> 01:46:07,949
be stated in there so if I go to the

1716
01:46:02,819 --> 01:46:28,009
win32 loaded code thing I'm just gonna

1717
01:46:07,948 --> 01:46:30,868
say like hey let's have a like that

1718
01:46:28,010 --> 01:46:36,179
right and so we're just going to

1719
01:46:30,868 --> 01:46:38,399
actually specify this so when we now go

1720
01:46:36,179 --> 01:46:41,189
to set the DLL full path and stuff like

1721
01:46:38,399 --> 01:46:46,498
that like this I'm just gonna actually

1722
01:46:41,189 --> 01:46:54,119
put it and because I was like well you

1723
01:46:46,498 --> 01:46:55,319
know what I wanted to be named right so

1724
01:46:54,118 --> 01:46:57,929
we'll say that there's the render

1725
01:46:55,319 --> 01:47:01,969
attempt dll and then down in the code

1726
01:46:57,929 --> 01:47:01,969
version of the game code version rather

1727
01:47:05,658 --> 01:47:10,469
we'll set that one so that we can see

1728
01:47:07,979 --> 01:47:12,840
what they actually are hopefully this

1729
01:47:10,469 --> 01:47:14,578
will also fix our remedy problem because

1730
01:47:12,840 --> 01:47:16,708
now remedy because we were like swapping

1731
01:47:14,578 --> 01:47:19,018
out the files underneath remedy with

1732
01:47:16,708 --> 01:47:20,849
wrong files so I think it was correct to

1733
01:47:19,019 --> 01:47:23,729
complain cuz it's probably like I don't

1734
01:47:20,849 --> 01:47:26,400
know what's going on here man you know

1735
01:47:23,729 --> 01:47:28,079
you're you're pulling a fast one and and

1736
01:47:26,399 --> 01:47:30,868
I don't want to deal with it which is

1737
01:47:28,078 --> 01:47:32,908
totally fair all right so let's try that

1738
01:47:30,868 --> 01:47:35,670
one more time

1739
01:47:32,908 --> 01:47:38,208
so here's okay this is a debug build so

1740
01:47:35,670 --> 01:47:38,208
let's slow

1741
01:47:43,590 --> 01:47:48,020
and now I'm gonna go ahead and rebuild

1742
01:47:50,930 --> 01:47:58,010
no dice hmm that's unfortunate

1743
01:47:58,699 --> 01:48:02,789
so my what did I do

1744
01:48:00,840 --> 01:48:14,069
I thought I fixed I thought I fixed the

1745
01:48:02,789 --> 01:48:18,619
problem I totally didn't all right so

1746
01:48:14,069 --> 01:48:18,619
let's check it a little more carefully

1747
01:48:23,300 --> 01:48:27,529
doo doo doo doo doo

1748
01:48:31,100 --> 01:48:36,829
all right

1749
01:48:33,170 --> 01:48:41,239
rebuilding should break right here

1750
01:48:36,829 --> 01:48:48,149
here's the reload so this will just

1751
01:48:41,239 --> 01:48:50,219
clear that out here's the load that all

1752
01:48:48,149 --> 01:48:53,929
makes sense let's take a look at what

1753
01:48:50,220 --> 01:48:53,930
this actually builds here

1754
01:49:01,899 --> 01:49:20,750
sorry so that's not actually good it I

1755
01:49:18,289 --> 01:49:22,369
mean it's not horrible but we actually

1756
01:49:20,750 --> 01:49:25,430
needed that to put a number in there

1757
01:49:22,369 --> 01:49:27,380
because we would rather it actually make

1758
01:49:25,430 --> 01:49:31,670
the unique number I mean it doesn't have

1759
01:49:27,380 --> 01:49:34,100
to that's still fine but it's not the

1760
01:49:31,670 --> 01:49:38,869
best right so we should probably

1761
01:49:34,100 --> 01:49:39,670
initialize those to non zero but it's

1762
01:49:38,869 --> 01:49:42,229
fine

1763
01:49:39,670 --> 01:49:44,420
so if we look at this it's like saying

1764
01:49:42,229 --> 01:49:49,819
look we're gonna copy this dll to this

1765
01:49:44,420 --> 01:49:51,649
DLL right and off it goes and then we're

1766
01:49:49,819 --> 01:49:55,179
gonna up that number so the next time we

1767
01:49:51,649 --> 01:49:55,179
reload it's gonna be different right

1768
01:49:59,199 --> 01:50:10,029
so it wasn't able to copy that it was

1769
01:50:04,670 --> 01:50:13,149
able to copy that for whatever reason oh

1770
01:50:10,029 --> 01:50:17,630
because it's already loading this one I

1771
01:50:13,149 --> 01:50:22,670
guess that's why so really this thing

1772
01:50:17,630 --> 01:50:26,569
should increment either way right that

1773
01:50:22,670 --> 01:50:28,880
is actually forcing it to do one failed

1774
01:50:26,569 --> 01:50:31,250
copy file for no reason so I may fix

1775
01:50:28,880 --> 01:50:33,279
that just while we're in here cuz I

1776
01:50:31,250 --> 01:50:35,840
would never remember to do it again

1777
01:50:33,279 --> 01:50:38,300
because it's kind of an arbitrary

1778
01:50:35,840 --> 01:50:43,550
failure so basically what we would say

1779
01:50:38,300 --> 01:50:49,579
is look every time we do this we're

1780
01:50:43,550 --> 01:50:53,900
gonna Inc the DLL number right and we

1781
01:50:49,579 --> 01:50:55,550
probably just want it to wrap so what we

1782
01:50:53,899 --> 01:50:59,569
probably want to do here is say look

1783
01:50:55,550 --> 01:51:02,090
when we get to the end of this we would

1784
01:50:59,569 --> 01:51:03,979
just wrap around to 0 and this part

1785
01:51:02,090 --> 01:51:05,600
should probably not do it that way right

1786
01:51:03,979 --> 01:51:09,859
so what should probably do is like say

1787
01:51:05,600 --> 01:51:11,430
look if temp T a little number equals

1788
01:51:09,859 --> 01:51:15,619
1024

1789
01:51:11,430 --> 01:51:15,619
loaded tempt you all right zero right

1790
01:51:15,770 --> 01:51:23,160
and in fact we could actually just say

1791
01:51:18,449 --> 01:51:27,090
like do it that way right so up here

1792
01:51:23,159 --> 01:51:32,510
then we would say actually attempt index

1793
01:51:27,090 --> 01:51:35,130
equals zero attempt index is lesson yeah

1794
01:51:32,510 --> 01:51:37,350
we're gonna try this that many times and

1795
01:51:35,130 --> 01:51:40,829
then in here we're just gonna like roll

1796
01:51:37,350 --> 01:51:46,410
this number over as many times as we

1797
01:51:40,829 --> 01:52:00,059
want to right all right so that now

1798
01:51:46,409 --> 01:52:02,430
should be a little bit more sensible now

1799
01:52:00,060 --> 01:52:05,150
let's take a look at what fails we're

1800
01:52:02,430 --> 01:52:10,130
gonna do went through to reload code now

1801
01:52:05,149 --> 01:52:10,129
there's the unload here's the reload

1802
01:52:10,279 --> 01:52:19,409
we're gonna try to copy it to here that

1803
01:52:15,000 --> 01:52:23,270
should succeed and it does now we're

1804
01:52:19,409 --> 01:52:23,269
gonna try to load it right

1805
01:52:29,500 --> 01:52:41,510
now it's loaded and now yeah we still

1806
01:52:38,569 --> 01:52:45,500
don't really know why that was having

1807
01:52:41,510 --> 01:52:47,570
such a hard time and I and I don't know

1808
01:52:45,500 --> 01:52:49,930
why I would like to see whether I was

1809
01:52:47,569 --> 01:52:55,539
causing that remedy buglet can we now

1810
01:52:49,930 --> 01:52:55,539
step to this okay and all that stuff

1811
01:53:00,789 --> 01:53:15,699
yeah we can so here we are an open Jill

1812
01:53:08,720 --> 01:53:15,699
end frame and so inside geo bind buffer

1813
01:53:17,289 --> 01:53:26,840
we actually get

1814
01:53:19,310 --> 01:53:29,270
oh and wow it's so it's it's actually at

1815
01:53:26,840 --> 01:53:33,010
the shield behind buffer call okay all

1816
01:53:29,270 --> 01:53:33,010
right let's say I believe that

1817
01:53:39,929 --> 01:53:47,640
did this fix our remedy issue by the way

1818
01:53:42,529 --> 01:53:49,259
no hmm all right so did I still screw

1819
01:53:47,640 --> 01:53:51,780
something up would be I guess the other

1820
01:53:49,260 --> 01:53:53,460
question I have like because I'm that

1821
01:53:51,779 --> 01:53:56,460
remedy issues weirding me out it could

1822
01:53:53,460 --> 01:53:59,369
just be remedy passive bug but it could

1823
01:53:56,460 --> 01:54:02,880
be that I'm like screwing up the PD B's

1824
01:53:59,369 --> 01:54:04,619
and the code and stuff right so I'm a

1825
01:54:02,880 --> 01:54:08,270
little nervous about that because I

1826
01:54:04,619 --> 01:54:08,269
don't actually know and let me look

1827
01:54:18,310 --> 01:54:29,600
so here's like some of those temp deals

1828
01:54:21,460 --> 01:54:31,369
right that you can see and maybe if I

1829
01:54:29,600 --> 01:54:33,230
delete those and we'll just watch which

1830
01:54:31,369 --> 01:54:36,409
ones are created because I'd also like

1831
01:54:33,229 --> 01:54:40,729
to just know you know what's happened

1832
01:54:36,409 --> 01:54:45,769
there right so if I wanted to here right

1833
01:54:40,729 --> 01:54:54,639
and just run the game I'm just curious

1834
01:54:45,770 --> 01:54:57,560
like what it produces here so it

1835
01:54:54,640 --> 01:55:01,460
probably presumably did these right I

1836
01:54:57,560 --> 01:55:03,710
mean there they are right and then when

1837
01:55:01,460 --> 01:55:05,480
I do the we and they are different like

1838
01:55:03,710 --> 01:55:08,029
you know it didn't like copy one over

1839
01:55:05,479 --> 01:55:18,589
the other or anything like that and then

1840
01:55:08,029 --> 01:55:22,699
when I rebuild which I'll do now I'm

1841
01:55:18,590 --> 01:55:24,680
gonna do a derp and yet produce these

1842
01:55:22,699 --> 01:55:30,529
two and again they seem like they're

1843
01:55:24,680 --> 01:55:34,130
properly sized if I look at the source

1844
01:55:30,529 --> 01:55:37,759
field you mean if I look at the source

1845
01:55:34,130 --> 01:55:45,859
dll's they do seem to be reasonable

1846
01:55:37,760 --> 01:55:47,510
right so I guess I'm not clear so

1847
01:55:45,859 --> 01:55:52,339
there's two things here that I want to

1848
01:55:47,510 --> 01:55:54,710
know and I don't really know you know

1849
01:55:52,340 --> 01:56:00,699
what I should do though should get a new

1850
01:55:54,710 --> 01:56:00,699
dota hero forget where that is

1851
01:56:16,020 --> 01:56:25,200
I don't know which one I want to go with

1852
01:56:21,199 --> 01:56:32,789
sand assassins not bad an over Lancer is

1853
01:56:25,199 --> 01:56:35,059
probably pretty good pretty good ones

1854
01:56:32,789 --> 01:56:35,060
here

1855
01:56:41,609 --> 01:56:51,299
all right anyway so assuming that that

1856
01:56:48,210 --> 01:56:53,130
copies working properly so I have two

1857
01:56:51,300 --> 01:56:54,989
things that are bugging me the first one

1858
01:56:53,130 --> 01:56:59,520
is I don't know why remedies getting

1859
01:56:54,989 --> 01:57:04,130
confused about the games breakpoints and

1860
01:56:59,520 --> 01:57:07,500
it's especially weird because the win32

1861
01:57:04,130 --> 01:57:12,680
dll that that is getting rebuilt though

1862
01:57:07,500 --> 01:57:12,680
it's that didn't get overwritten right

1863
01:57:13,340 --> 01:57:18,360
so I don't know what it's weirded out

1864
01:57:16,529 --> 01:57:21,059
about there like that should have just

1865
01:57:18,359 --> 01:57:26,429
still been working right there's nothing

1866
01:57:21,060 --> 01:57:28,289
I don't see I don't see why cause like

1867
01:57:26,430 --> 01:57:30,119
at the very least I should be able to

1868
01:57:28,289 --> 01:57:32,369
set break points here in the win32 code

1869
01:57:30,119 --> 01:57:34,890
because that's not even one of the

1870
01:57:32,369 --> 01:57:36,689
things that's getting replaced so that's

1871
01:57:34,890 --> 01:57:39,240
really weird and I think that must be a

1872
01:57:36,689 --> 01:57:41,939
bug in remedy I don't know if George is

1873
01:57:39,239 --> 01:57:45,050
still on if he thinks it would or

1874
01:57:41,939 --> 01:57:47,189
wouldn't be he would know better than I

1875
01:57:45,050 --> 01:57:48,779
but I don't know why that's happening

1876
01:57:47,189 --> 01:57:50,460
but then the second thing is like why

1877
01:57:48,779 --> 01:57:53,909
are we jumping to an unknown function

1878
01:57:50,460 --> 01:57:56,550
there and that question is a little bit

1879
01:57:53,909 --> 01:58:00,479
weird and I wonder to what extent like

1880
01:57:56,550 --> 01:58:03,029
is it because we can't reload something

1881
01:58:00,479 --> 01:58:09,679
that calls opengl because doing that

1882
01:58:03,029 --> 01:58:13,769
reloading mm-hmm changes some kind of a

1883
01:58:09,680 --> 01:58:17,070
state that I mean I don't even really

1884
01:58:13,770 --> 01:58:19,920
know why that would be the case but

1885
01:58:17,069 --> 01:58:23,329
let's at least try to verify what's

1886
01:58:19,920 --> 01:58:23,329
going on there so if I run

1887
01:58:28,479 --> 01:58:37,039
and now I rebuild right

1888
01:58:34,100 --> 01:58:39,050
I can still set a breakpoint now which

1889
01:58:37,039 --> 01:58:43,909
is weird I don't know what determines

1890
01:58:39,050 --> 01:58:47,869
that part of it it's kind of strange but

1891
01:58:43,909 --> 01:58:52,460
if I now jump to the end frame call and

1892
01:58:47,869 --> 01:58:55,340
step in here go to OpenGL and frame so I

1893
01:58:52,460 --> 01:59:02,329
believe it was a bind buffer call right

1894
01:58:55,340 --> 01:59:04,789
it was this I want to say probably and I

1895
01:59:02,329 --> 01:59:08,210
don't know maybe it's this maybe all

1896
01:59:04,789 --> 01:59:10,430
we're seeing here in fact now that I

1897
01:59:08,210 --> 01:59:13,250
think about it maybe the problem is that

1898
01:59:10,430 --> 01:59:15,320
we we maybe have a global that we don't

1899
01:59:13,250 --> 01:59:16,340
reinitialize or something like that in

1900
01:59:15,319 --> 01:59:17,599
which case we're gonna have to go take

1901
01:59:16,340 --> 01:59:20,210
care of that but other if that's the

1902
01:59:17,600 --> 01:59:25,570
case and that's pretty easy but either

1903
01:59:20,210 --> 01:59:35,510
way so here's the OpenGL call or

1904
01:59:25,569 --> 01:59:43,939
function it's looking for a vertex

1905
01:59:35,510 --> 01:59:45,590
buffer which should be here somewhere

1906
01:59:43,939 --> 01:59:48,619
but for some reason can't find it

1907
01:59:45,590 --> 01:59:56,119
there it is so it's just passing one two

1908
01:59:48,619 --> 01:59:58,699
GL bind buffer ah but it's not yeah yeah

1909
01:59:56,119 --> 02:00:00,289
all right so this is way easy this was

1910
01:59:58,699 --> 02:00:03,559
just me forgetting how this worked this

1911
02:00:00,289 --> 02:00:05,449
is a trivial book so the problem here is

1912
02:00:03,560 --> 02:00:07,640
just here's we've got a bunch of

1913
02:00:05,449 --> 02:00:09,649
functions right and GL bind buffer

1914
02:00:07,640 --> 02:00:12,050
despite looking like a pretty innocuous

1915
02:00:09,649 --> 02:00:15,920
call actually is technically not in

1916
02:00:12,050 --> 02:00:17,570
OpenGL one so that's the actual problem

1917
02:00:15,920 --> 02:00:22,159
is we just haven't reloaded our GL

1918
02:00:17,569 --> 02:00:26,840
function table right that was local to

1919
02:00:22,159 --> 02:00:32,059
the DLL and you know it didn't get

1920
02:00:26,840 --> 02:00:35,600
reloaded that's all so in terms of

1921
02:00:32,060 --> 02:00:39,350
what's happening when we load all of our

1922
02:00:35,600 --> 02:00:40,530
extension nonsense right like this stuff

1923
02:00:39,350 --> 02:00:43,710
we don't have to

1924
02:00:40,529 --> 02:00:47,009
surely care about but the part where we

1925
02:00:43,710 --> 02:00:51,059
actually load like all of this crap

1926
02:00:47,010 --> 02:00:55,710
right that stuff actually still has to

1927
02:00:51,059 --> 02:00:58,889
occur you know I'm saying to you and I

1928
02:00:55,710 --> 02:01:01,859
guess what I would say is I know it's

1929
02:00:58,889 --> 02:01:04,679
kind of annoying but I'm just maybe

1930
02:01:01,859 --> 02:01:08,960
gonna go ahead and say let's just put

1931
02:01:04,679 --> 02:01:08,960
those into the OpenGL state itself

1932
02:01:27,260 --> 02:01:33,980
I mean I think that's what I'm going

1933
02:01:29,029 --> 02:01:36,289
with right so let's say that instead of

1934
02:01:33,979 --> 02:01:44,539
what we were doing before we just wanted

1935
02:01:36,289 --> 02:01:46,100
to go in here and say that you know this

1936
02:01:44,539 --> 02:01:47,899
open jail thing keeps track of all of

1937
02:01:46,100 --> 02:01:49,640
our stuff and we're just gonna say that

1938
02:01:47,899 --> 02:01:51,229
all of the functions go in there like

1939
02:01:49,640 --> 02:01:54,440
sorry man that's just where they go

1940
02:01:51,229 --> 02:01:58,909
right so all of this garbage

1941
02:01:54,439 --> 02:02:01,689
right would have to go in there and hey

1942
02:01:58,909 --> 02:02:04,099
you have to call them anyway right so

1943
02:02:01,689 --> 02:02:06,679
we're just gonna say look we expect them

1944
02:02:04,100 --> 02:02:16,460
to be defined and you're gonna have to

1945
02:02:06,680 --> 02:02:19,489
call them or something right and we can

1946
02:02:16,460 --> 02:02:22,699
use this old system for that probably

1947
02:02:19,488 --> 02:02:28,909
just fine right so in here we just say

1948
02:02:22,699 --> 02:02:32,210
like Open GL function like this and

1949
02:02:28,909 --> 02:02:34,909
maybe it just looks like that and then

1950
02:02:32,210 --> 02:02:37,420
all of these will be in there and we're

1951
02:02:34,909 --> 02:02:46,159
just going to make that work right so

1952
02:02:37,420 --> 02:02:50,230
like in here we would put those we're

1953
02:02:46,159 --> 02:02:54,889
gonna have to fix the the swap interval

1954
02:02:50,229 --> 02:02:56,299
one will have to be handled specially

1955
02:02:54,890 --> 02:02:58,780
because I think that's kind of a little

1956
02:02:56,300 --> 02:02:58,779
saucy err

1957
02:03:03,750 --> 02:03:07,550
exercice was i can't just replace that

1958
02:03:07,609 --> 02:03:17,099
because no sense of typing it multiple

1959
02:03:12,479 --> 02:03:18,899
times so if we do that then what I can

1960
02:03:17,100 --> 02:03:50,460
do is just say like alright let's move

1961
02:03:18,899 --> 02:03:53,759
the rest of these into that like so this

1962
02:03:50,460 --> 02:03:57,109
is a little bit boring but at least now

1963
02:03:53,760 --> 02:03:57,110
these will be a little more uniform

1964
02:04:12,899 --> 02:04:34,269
and no comeback so then here's all our

1965
02:04:31,208 --> 02:04:37,769
gigantic disaster of 8 billion open

1966
02:04:34,269 --> 02:04:42,280
shell functions that need to get in here

1967
02:04:37,769 --> 02:04:44,559
and so we need all of those and now what

1968
02:04:42,279 --> 02:04:46,118
we do is we just say all right when we

1969
02:04:44,559 --> 02:04:48,010
were loading those before now we're

1970
02:04:46,118 --> 02:04:59,219
going to load them into the actual open

1971
02:04:48,010 --> 02:05:01,869
jail struct so that they'll persist okay

1972
02:04:59,219 --> 02:05:04,510
and the problem we're going to have here

1973
02:05:01,868 --> 02:05:13,658
I guess is that we need these to be

1974
02:05:04,510 --> 02:05:17,998
defined ahead of time I suppose and I'm

1975
02:05:13,658 --> 02:05:17,998
not sure where that actually gets done

1976
02:05:19,139 --> 02:05:24,118
who includes this thing I don't actually

1977
02:05:21,849 --> 02:05:24,119
know

1978
02:05:27,229 --> 02:05:44,840
somebody does so it's it's actually

1979
02:05:40,368 --> 02:05:46,908
right there and oh so this is actually

1980
02:05:44,840 --> 02:05:51,469
all fine so really all we have to do is

1981
02:05:46,908 --> 02:05:53,808
just change these names to actually

1982
02:05:51,469 --> 02:05:57,019
conform to the naming convention we have

1983
02:05:53,809 --> 02:06:05,719
now so it should be as simple as just

1984
02:05:57,019 --> 02:06:09,800
doing this right

1985
02:06:05,719 --> 02:06:11,840
I guess that don't know what some of the

1986
02:06:09,800 --> 02:06:16,279
capitalizations are on these in OpenGL

1987
02:06:11,840 --> 02:06:20,119
but I'll look here so that's I guess

1988
02:06:16,279 --> 02:06:22,670
that but but most of these I wouldn't

1989
02:06:20,118 --> 02:06:32,708
know right so she'll buy and frame

1990
02:06:22,670 --> 02:06:44,618
buffer gen frame buffers frame buffer

1991
02:06:32,708 --> 02:06:44,618
texture 2d check frame buffer status

1992
02:06:44,738 --> 02:07:01,609
blip frame buffer attach shader compile

1993
02:06:53,229 --> 02:07:09,380
shader program create shader I don't

1994
02:07:01,609 --> 02:07:12,219
know why that is why does it think

1995
02:07:09,380 --> 02:07:12,219
that's a keyword

1996
02:07:14,189 --> 02:07:27,969
that doesn't bode well probably means

1997
02:07:20,289 --> 02:07:37,389
we've got an air coming down type use

1998
02:07:27,969 --> 02:07:39,908
program jet program info log kind of

1999
02:07:37,389 --> 02:07:42,969
amazing that modern day we still have

2000
02:07:39,908 --> 02:07:45,098
this issue none of this stuff ever gets

2001
02:07:42,969 --> 02:07:49,510
fixed like why am i doing any of this

2002
02:07:45,099 --> 02:07:58,270
right like why isn't there just a way to

2003
02:07:49,510 --> 02:08:01,599
call OpenGL who knows um well I sort of

2004
02:07:58,270 --> 02:08:05,619
dunno logistically why meaning I know

2005
02:08:01,599 --> 02:08:08,819
the corporate politics involved in Y but

2006
02:08:05,618 --> 02:08:13,448
that's not really an excuse now is it

2007
02:08:08,819 --> 02:08:17,549
listen that's an explanation of why but

2008
02:08:13,448 --> 02:08:17,549
it's not a good reason why

2009
02:08:22,970 --> 02:08:34,170
all right um so now I guess we should be

2010
02:08:29,460 --> 02:08:37,920
able to make all of this stuff work

2011
02:08:34,170 --> 02:08:41,520
through the open gel layer more directly

2012
02:08:37,920 --> 02:08:44,970
so when we call stuff we would pass the

2013
02:08:41,520 --> 02:08:46,800
OpenGL pointer around and people would

2014
02:08:44,970 --> 02:08:50,970
just call through that which I think

2015
02:08:46,800 --> 02:08:53,250
should be relatively straightforward but

2016
02:08:50,970 --> 02:08:54,720
I guess we'll find out if it's not but

2017
02:08:53,250 --> 02:09:02,069
basically it would just involve you

2018
02:08:54,720 --> 02:09:12,840
doing this right you know I'm saying to

2019
02:09:02,069 --> 02:09:15,149
you and then you know anytime somebody

2020
02:09:12,840 --> 02:09:20,010
has to call something they got to do it

2021
02:09:15,149 --> 02:09:22,199
through here I'm gonna not do that one

2022
02:09:20,010 --> 02:09:28,230
just yet because I actually don't know

2023
02:09:22,199 --> 02:09:29,939
how that would work I mean I guess we'll

2024
02:09:28,229 --> 02:09:31,649
find out I'm not sure if this will

2025
02:09:29,939 --> 02:09:35,059
create a problem to do it this I'm not

2026
02:09:31,649 --> 02:09:37,519
sure about these she'll get string eye

2027
02:09:35,060 --> 02:09:40,520
things but oops

2028
02:09:37,520 --> 02:09:40,520
see

2029
02:09:51,649 --> 02:09:54,649
yeah

2030
02:10:02,719 --> 02:10:09,179
so mostly this just would involve sort

2031
02:10:05,729 --> 02:10:13,159
of weaving open jaelyn through here but

2032
02:10:09,179 --> 02:10:13,159
other than that the code stays the same

2033
02:10:16,698 --> 02:10:20,519
and we could have done this the other

2034
02:10:18,569 --> 02:10:22,019
way by just calling it again but I feel

2035
02:10:20,520 --> 02:10:24,989
like this is a little bit nicer because

2036
02:10:22,020 --> 02:10:27,570
then at least we can also see I like the

2037
02:10:24,988 --> 02:10:29,789
idea of making it visible like what

2038
02:10:27,569 --> 02:10:31,829
we're actually storing and calling off

2039
02:10:29,789 --> 02:10:37,769
of dynamic pointers versus things that

2040
02:10:31,829 --> 02:10:43,738
are welded into the system that feels a

2041
02:10:37,770 --> 02:10:45,929
little nicer to me because I just like

2042
02:10:43,738 --> 02:10:48,869
it better represents what's actually

2043
02:10:45,929 --> 02:11:04,800
going on so it's not trying to hide like

2044
02:10:48,869 --> 02:11:07,319
that fact and you can see just when you

2045
02:11:04,800 --> 02:11:09,390
read the code you're like okay those are

2046
02:11:07,319 --> 02:11:11,819
like all that that's all the stuff

2047
02:11:09,390 --> 02:11:16,489
that's actually coming from dynamic

2048
02:11:11,819 --> 02:11:49,309
quick calls into the driver that are not

2049
02:11:16,488 --> 02:11:49,309
necessarily you know even in Windows I

2050
02:11:56,329 --> 02:12:00,979
assume both of those need the thing

2051
02:12:13,090 --> 02:12:27,788
and this would probably be happening for

2052
02:12:18,288 --> 02:12:27,788
everybody makes a program alright so

2053
02:12:31,269 --> 02:12:36,099
this is all pretty boring

2054
02:12:48,170 --> 02:13:17,670
msyn interesting here really that has to

2055
02:13:05,189 --> 02:13:47,179
get threaded that and almost done

2056
02:13:17,670 --> 02:13:47,180
actually alright so

2057
02:13:52,720 --> 02:14:00,079
now we've got to go make it so that the

2058
02:13:55,579 --> 02:14:02,300
loader is working off of these because

2059
02:14:00,079 --> 02:14:22,699
it's still thinking it's letting you

2060
02:14:02,300 --> 02:14:28,039
know Global's which it ain't so this

2061
02:14:22,699 --> 02:14:30,170
codes specifically right and one of the

2062
02:14:28,039 --> 02:14:33,050
nice things about it is we now unified

2063
02:14:30,170 --> 02:14:35,029
all these so all of these actually don't

2064
02:14:33,050 --> 02:14:38,029
have to go this way anymore

2065
02:14:35,029 --> 02:14:44,238
all of these can actually be done this

2066
02:14:38,029 --> 02:14:49,699
way now right which is nice so this

2067
02:14:44,238 --> 02:14:53,738
stuff we can actually just kind of grab

2068
02:14:49,699 --> 02:15:04,689
these guys and stick them in here right

2069
02:14:53,738 --> 02:15:04,689
and oops so that should be nice

2070
02:15:24,579 --> 02:15:46,130
and there we go so now everyone hoops so

2071
02:15:38,960 --> 02:15:50,750
now everyone can load that way and we

2072
02:15:46,130 --> 02:15:53,118
can change this to just say well we know

2073
02:15:50,750 --> 02:15:58,069
that it's exactly the same thing it's

2074
02:15:53,118 --> 02:16:00,019
just off of OpenGL pointer now right and

2075
02:15:58,069 --> 02:16:01,789
so that basically takes care of all of

2076
02:16:00,020 --> 02:16:04,100
our loading so that loads everything for

2077
02:16:01,789 --> 02:16:08,479
us now which is nice and and better

2078
02:16:04,100 --> 02:16:12,500
anyway so then these right here are also

2079
02:16:08,479 --> 02:16:16,729
the same oops it's just they're inside

2080
02:16:12,500 --> 02:16:18,770
the conditional so I thought this open

2081
02:16:16,729 --> 02:16:25,419
she'll get info needed to take the open

2082
02:16:18,770 --> 02:16:29,150
shell pointer now right yeah so this

2083
02:16:25,420 --> 02:16:36,398
should have been doing that is there

2084
02:16:29,149 --> 02:16:43,189
another one somewhere yeah that is

2085
02:16:36,398 --> 02:16:44,959
totally not true and so what we should

2086
02:16:43,189 --> 02:16:47,510
be able to do now is take that code that

2087
02:16:44,959 --> 02:16:49,329
was previously doing it this way and

2088
02:16:47,510 --> 02:16:52,280
make this work that way too

2089
02:16:49,329 --> 02:16:53,780
right so there's no reason not to just

2090
02:16:52,280 --> 02:16:55,309
do these through the same path and and

2091
02:16:53,780 --> 02:16:58,790
now everything is like actually much

2092
02:16:55,308 --> 02:17:02,259
nicer to deal with because it all goes

2093
02:16:58,790 --> 02:17:05,840
through the same macro and everything's

2094
02:17:02,260 --> 02:17:09,710
relatively uniform so I think the only

2095
02:17:05,840 --> 02:17:16,389
thing we have that's really not good

2096
02:17:09,709 --> 02:17:19,189
is this because we will swap interval I

2097
02:17:16,388 --> 02:17:33,679
don't know where that gets called

2098
02:17:19,190 --> 02:17:36,980
exactly we can look and see so you can

2099
02:17:33,680 --> 02:17:39,500
see like our vsync would break here in

2100
02:17:36,979 --> 02:17:43,850
that case and so what I think I'm I

2101
02:17:39,500 --> 02:17:47,409
might do is if we look here and we say

2102
02:17:43,850 --> 02:17:56,841
platform OpenGL set sync or whatever

2103
02:17:47,409 --> 02:17:59,270
maybe we would just do like maybe we

2104
02:17:56,841 --> 02:18:03,680
would just do platform OpenGL set sync

2105
02:17:59,270 --> 02:18:08,520
we'll do the call itself right so like

2106
02:18:03,680 --> 02:18:11,738
the place where we were gonna do it

2107
02:18:08,520 --> 02:18:11,738
[Music]

2108
02:18:17,709 --> 02:18:29,689
wouldn't be in here where's the win32

2109
02:18:21,309 --> 02:18:32,091
areas where did you go here so what we

2110
02:18:29,690 --> 02:18:35,270
might do is like this because this one's

2111
02:18:32,091 --> 02:18:42,649
special so we might do is we'd say hey

2112
02:18:35,270 --> 02:18:51,131
like if we don't have one right then try

2113
02:18:42,649 --> 02:18:54,171
to get it and then you know off we go

2114
02:18:51,130 --> 02:18:56,359
that way what we could do is say the

2115
02:18:54,171 --> 02:18:58,860
place where we took that out of which is

2116
02:18:56,360 --> 02:19:01,998
here you can just say look

2117
02:18:58,860 --> 02:19:01,998
[Music]

2118
02:19:07,751 --> 02:19:14,030
we'll initialize two trying to do it and

2119
02:19:11,120 --> 02:19:15,679
but anytime that we find that we don't

2120
02:19:14,030 --> 02:19:18,260
have the function we'll try to get it

2121
02:19:15,680 --> 02:19:20,860
again so if anyone calls us it'll try to

2122
02:19:18,260 --> 02:19:26,270
look it up again in like a new renderer

2123
02:19:20,860 --> 02:19:28,850
and think that would be sufficient not

2124
02:19:26,270 --> 02:19:32,440
sure all right so here's the whole thing

2125
02:19:28,850 --> 02:19:32,440
again let's see if it works

2126
02:19:32,501 --> 02:19:37,610
running with us updating the OpenGL

2127
02:19:35,600 --> 02:19:41,450
table in a structure now so we can just

2128
02:19:37,610 --> 02:19:45,560
have that around and then let me rebuild

2129
02:19:41,450 --> 02:19:49,881
and see what we get now when we hit this

2130
02:19:45,559 --> 02:19:51,770
code path right just to see what happens

2131
02:19:49,880 --> 02:19:55,640
so let me run it and see what we have

2132
02:19:51,771 --> 02:19:59,181
what happens crash wise so it looks like

2133
02:19:55,640 --> 02:20:01,970
we're fine right so now it looks like it

2134
02:19:59,181 --> 02:20:11,301
is reloading the renderer so that's good

2135
02:20:01,970 --> 02:20:13,870
let's try it in a release mode and see

2136
02:20:11,300 --> 02:20:13,870
where that's at

2137
02:20:20,889 --> 02:20:29,329
so here's running and I'm gonna go in

2138
02:20:25,399 --> 02:20:44,270
there and change the clear color thing

2139
02:20:29,329 --> 02:20:46,100
again and I guess like we should now be

2140
02:20:44,270 --> 02:20:47,239
able to change whatever we want in the

2141
02:20:46,100 --> 02:20:50,420
renderer code and it should actually

2142
02:20:47,239 --> 02:20:51,739
just work and then the only thing we

2143
02:20:50,420 --> 02:20:53,329
have to do which I'll save for next

2144
02:20:51,739 --> 02:20:55,219
weekend is just putting it a thing that

2145
02:20:53,329 --> 02:20:56,690
strobes it so it recompiles the shaders

2146
02:20:55,219 --> 02:20:57,079
and stuff but otherwise I think that's

2147
02:20:56,690 --> 02:20:59,480
it

2148
02:20:57,079 --> 02:21:07,399
so what would be something I could use

2149
02:20:59,479 --> 02:21:13,939
to test it might be like so let's do

2150
02:21:07,399 --> 02:21:22,000
this I'm gonna put in a half with call

2151
02:21:13,940 --> 02:21:22,000
here yep

2152
02:21:25,010 --> 02:21:34,318
and then I'm gonna rerun that not sure

2153
02:21:32,578 --> 02:21:35,760
why that takes so long but I guess

2154
02:21:34,318 --> 02:21:39,618
that's just the reloading time I'm not

2155
02:21:35,760 --> 02:21:42,689
sure I have to work on that reload time

2156
02:21:39,619 --> 02:21:44,100
probably it's a compile time right it

2157
02:21:42,689 --> 02:21:45,300
unloads the code and that's trying to

2158
02:21:44,100 --> 02:21:51,988
reload the new code but the compiler

2159
02:21:45,299 --> 02:21:59,988
hasn't finished outputting it yet all

2160
02:21:51,988 --> 02:21:59,988
right okay we'll do a quick quick Q&amp;A

2161
02:22:00,020 --> 02:22:03,779
but that's really all we wanted to get

2162
02:22:02,129 --> 02:22:05,759
accomplished there and so now we can

2163
02:22:03,779 --> 02:22:06,238
reload our render code our whole

2164
02:22:05,760 --> 02:22:09,109
renderer

2165
02:22:06,238 --> 02:22:09,109
which is nice

2166
02:22:46,398 --> 02:22:50,420
a lighting question but it also has

2167
02:22:48,620 --> 02:22:52,640
application meteorology do you know of

2168
02:22:50,420 --> 02:22:55,398
any algorithms to compute shadow or no

2169
02:22:52,639 --> 02:22:58,549
shadow for all future February seconds

2170
02:22:55,398 --> 02:23:01,340
or are we simply stuck with the

2171
02:22:58,549 --> 02:23:05,209
Punxsutawney Phil algorithm the current

2172
02:23:01,340 --> 02:23:07,670
but rather limited state of the art so I

2173
02:23:05,209 --> 02:23:10,339
don't think that has anything to do with

2174
02:23:07,670 --> 02:23:11,898
it though because it's in like I mean I

2175
02:23:10,340 --> 02:23:16,460
guess I don't know but doesn't it have

2176
02:23:11,898 --> 02:23:18,648
to do more with whether it's cloudy or

2177
02:23:16,459 --> 02:23:21,978
not or which direction the groundhog

2178
02:23:18,648 --> 02:23:23,358
faces or anything like I mean is it does

2179
02:23:21,978 --> 02:23:27,010
it really have anything to do with the

2180
02:23:23,359 --> 02:23:27,010
position of the Sun I don't know

2181
02:23:27,280 --> 02:23:31,970
Knox gobo says sorry I missed it what

2182
02:23:29,930 --> 02:23:33,979
did you use tensorflow for oh nothing I

2183
02:23:31,969 --> 02:23:36,559
was just wanted to see how bad it was to

2184
02:23:33,978 --> 02:23:39,559
build the answer is very bad but we did

2185
02:23:36,559 --> 02:23:41,420
get it to build so wasn't as bad as we

2186
02:23:39,559 --> 02:23:43,269
were fearing because we were fearing

2187
02:23:41,420 --> 02:23:46,340
maybe we wouldn't get to build at all

2188
02:23:43,270 --> 02:23:47,810
well bus is not faster to load a shader

2189
02:23:46,340 --> 02:23:51,590
from a file and change them on the fly

2190
02:23:47,809 --> 02:23:56,329
when the files modified yeah it would be

2191
02:23:51,590 --> 02:23:59,270
faster sure but then of course you also

2192
02:23:56,329 --> 02:24:02,090
can't change any other things right so

2193
02:23:59,270 --> 02:24:04,939
you can't change like what actual steps

2194
02:24:02,090 --> 02:24:08,260
you do in the renderer so we would like

2195
02:24:04,939 --> 02:24:08,260
to be able to change everything

2196
02:24:15,790 --> 02:24:20,750
Kronus org says that we should lewd

2197
02:24:17,959 --> 02:24:24,019
procs by wittle proc address and if it

2198
02:24:20,750 --> 02:24:26,420
fails then load library OpenGL 32 DLL

2199
02:24:24,020 --> 02:24:29,500
and get proc address in which situations

2200
02:24:26,420 --> 02:24:32,870
is it relevant or did I miss something

2201
02:24:29,500 --> 02:24:35,239
so I guess I've never really experienced

2202
02:24:32,870 --> 02:24:37,609
a situation where I had to open OpenGL

2203
02:24:35,239 --> 02:24:39,409
32 DLL myself and then call get proc

2204
02:24:37,609 --> 02:24:46,550
address but I'm sure there probably is

2205
02:24:39,409 --> 02:24:48,500
something but I couldn't say would you

2206
02:24:46,549 --> 02:24:51,949
recommend the OpenGL struct function

2207
02:24:48,500 --> 02:24:53,540
table for versioned si libs can you be

2208
02:24:51,950 --> 02:24:57,189
more specific about what you mean by

2209
02:24:53,540 --> 02:24:57,189
versioned si libs

2210
02:25:15,399 --> 02:25:19,729
if you wanted able to stereoscopic 3d

2211
02:25:18,079 --> 02:25:21,350
are there OpenGL functions difficulty

2212
02:25:19,729 --> 02:25:26,029
for that or would you have to do

2213
02:25:21,350 --> 02:25:29,030
everything manually so the answer is yes

2214
02:25:26,030 --> 02:25:32,510
and yes there are specific opengl

2215
02:25:29,030 --> 02:25:34,670
functions for stereoscopic 3d they are

2216
02:25:32,510 --> 02:25:38,450
antiquated and you wouldn't want to use

2217
02:25:34,670 --> 02:25:40,909
them what you actually need to do if you

2218
02:25:38,450 --> 02:25:44,271
want to do stereoscopic 3d nowadays is

2219
02:25:40,909 --> 02:25:45,920
actually also quite complicated because

2220
02:25:44,271 --> 02:25:47,420
usually you're talking if you're talking

2221
02:25:45,920 --> 02:25:49,639
about stereoscopic 3d you're usually not

2222
02:25:47,420 --> 02:25:51,399
talking about rendering two images that

2223
02:25:49,639 --> 02:25:56,270
are just slightly offset left and right

2224
02:25:51,399 --> 02:25:58,579
that while you could do that for

2225
02:25:56,271 --> 02:26:02,540
rendering maybe like if you're trying to

2226
02:25:58,579 --> 02:26:05,180
make a hologram or something maybe that

2227
02:26:02,540 --> 02:26:09,320
would work but if you're actually trying

2228
02:26:05,180 --> 02:26:11,889
to do like virtual reality then you

2229
02:26:09,319 --> 02:26:17,659
actually need to apply lens distortions

2230
02:26:11,889 --> 02:26:20,719
because the lenses in the headsets of VR

2231
02:26:17,659 --> 02:26:24,079
systems don't project planar things to

2232
02:26:20,719 --> 02:26:26,959
your eyes they project sort of a warped

2233
02:26:24,079 --> 02:26:32,030
a spherically warped image onto your eye

2234
02:26:26,959 --> 02:26:36,109
and you need to know the distortion

2235
02:26:32,030 --> 02:26:36,790
parameters of that image so you really

2236
02:26:36,110 --> 02:26:40,010
can't

2237
02:26:36,790 --> 02:26:42,170
you really have to basically have lens

2238
02:26:40,010 --> 02:26:44,210
data and you'll note that all VR

2239
02:26:42,170 --> 02:26:46,310
headsets now report lens data and that's

2240
02:26:44,209 --> 02:26:49,729
why you have to render using that lens

2241
02:26:46,310 --> 02:26:51,529
data so you need to know the lens data

2242
02:26:49,729 --> 02:26:54,319
and then you need to implement shaders

2243
02:26:51,530 --> 02:26:56,989
that actually like produce images from

2244
02:26:54,319 --> 02:27:00,949
the correct stereoscopic separation but

2245
02:26:56,989 --> 02:27:06,159
then that also will produce Warped

2246
02:27:00,950 --> 02:27:06,159
images right

2247
02:27:08,840 --> 02:27:12,299
you mentioned there being no standard

2248
02:27:10,739 --> 02:27:14,190
way to interface with graphics and the

2249
02:27:12,299 --> 02:27:15,629
Pollack's behind it do you see acidic

2250
02:27:14,190 --> 02:27:17,521
reason what console manufacturers

2251
02:27:15,629 --> 02:27:19,140
couldn't push hardware vendors for

2252
02:27:17,521 --> 02:27:23,329
standardization and have that standard

2253
02:27:19,140 --> 02:27:26,489
bleed out into general computing sure

2254
02:27:23,329 --> 02:27:28,289
again like politically speaking what is

2255
02:27:26,489 --> 02:27:32,280
their motivation to do that console

2256
02:27:28,290 --> 02:27:35,460
manufacturers 100% always never for any

2257
02:27:32,280 --> 02:27:37,800
reason want anyone to be able to use

2258
02:27:35,459 --> 02:27:39,659
their stuff right the whole point of a

2259
02:27:37,799 --> 02:27:41,520
console is they lock it down completely

2260
02:27:39,659 --> 02:27:43,920
and don't let anyone access it except

2261
02:27:41,521 --> 02:27:46,771
people that they allow so the last thing

2262
02:27:43,920 --> 02:27:51,000
they're gonna do is define a standard

2263
02:27:46,771 --> 02:27:52,829
and let everyone else use it so that

2264
02:27:51,000 --> 02:27:54,899
people who can write games that run

2265
02:27:52,829 --> 02:27:56,761
really well on a Playstation 5 can also

2266
02:27:54,899 --> 02:27:57,931
now write games that run really well on

2267
02:27:56,761 --> 02:28:00,630
all this other hardware that's the clone

2268
02:27:57,931 --> 02:28:04,351
of it right so that's just not I don't

2269
02:28:00,629 --> 02:28:08,329
see that as being politically plausible

2270
02:28:04,351 --> 02:28:08,329
as a thing that would happen right

2271
02:28:19,189 --> 02:28:24,148
viii page says if it matters I once

2272
02:28:22,530 --> 02:28:25,350
implemented a network in C++ from

2273
02:28:24,148 --> 02:28:26,760
tensorflow and it was faster

2274
02:28:25,350 --> 02:28:29,069
single-threaded by an order of magnitude

2275
02:28:26,760 --> 02:28:31,559
compared to the 28 core multi-threaded

2276
02:28:29,069 --> 02:28:37,379
tensorflow implementation yet that's I

2277
02:28:31,559 --> 02:28:42,359
would like to do that as well I would

2278
02:28:37,379 --> 02:28:44,009
love to do that test as well if you

2279
02:28:42,360 --> 02:28:47,899
happen to have it lying around email it

2280
02:28:44,010 --> 02:28:47,898
to me we can take a look at it sometime

2281
02:28:56,559 --> 02:29:01,430
he's the same OpenGL context being used

2282
02:28:59,750 --> 02:29:05,049
after render reload yes

2283
02:29:01,430 --> 02:29:08,659
so OpenGL context are not tied to a DLL

2284
02:29:05,049 --> 02:29:12,139
they're tied to a thread so as long as

2285
02:29:08,659 --> 02:29:14,478
you set your OpenGL context up and make

2286
02:29:12,139 --> 02:29:17,029
it current to a particular thread even

2287
02:29:14,478 --> 02:29:19,059
if you reload completely all of the code

2288
02:29:17,030 --> 02:29:23,359
that that thread is executing the

2289
02:29:19,059 --> 02:29:25,670
context is still there right so the only

2290
02:29:23,359 --> 02:29:28,280
reason we had to reload all the pointers

2291
02:29:25,670 --> 02:29:31,250
was just because look those pointers

2292
02:29:28,280 --> 02:29:33,970
were in the dll's data space so when the

2293
02:29:31,250 --> 02:29:36,950
DLL got reloaded it got a fresh set of

2294
02:29:33,969 --> 02:29:40,879
Global's and they were uninitialized

2295
02:29:36,950 --> 02:29:44,359
right so we could have chosen to just

2296
02:29:40,879 --> 02:29:47,619
reload those in but I chose to just put

2297
02:29:44,359 --> 02:29:47,620
them in the struck that sticks around

2298
02:29:53,559 --> 02:29:57,228
for APS the requirement of being

2299
02:29:55,549 --> 02:29:59,898
downloads compatible and introducing

2300
02:29:57,228 --> 02:30:04,429
breaking changes is only allowed in a

2301
02:29:59,898 --> 02:30:07,548
second api struct

2302
02:30:04,430 --> 02:30:07,549
[Music]

2303
02:30:17,998 --> 02:30:25,889
I mean I guess what I would say is I

2304
02:30:24,449 --> 02:30:27,930
don't really understand the question

2305
02:30:25,889 --> 02:30:30,059
exactly or really what we're trying to

2306
02:30:27,930 --> 02:30:31,559
accomplish if I had a specific thing in

2307
02:30:30,059 --> 02:30:33,628
front of me that you were asking about I

2308
02:30:31,559 --> 02:30:35,398
could probably tell you the answer but

2309
02:30:33,629 --> 02:30:38,159
I'm just not sure what the question is

2310
02:30:35,398 --> 02:30:41,010
if if what you're asking generally

2311
02:30:38,158 --> 02:30:43,189
speaking is can I use a structure of

2312
02:30:41,010 --> 02:30:46,199
function pointers to something that

2313
02:30:43,189 --> 02:30:49,139
changes so that there's code that's

2314
02:30:46,199 --> 02:30:51,510
gonna use this structure and later on

2315
02:30:49,139 --> 02:30:53,908
I'm gonna update the structure with more

2316
02:30:51,510 --> 02:30:55,738
to add more stuff or change things you

2317
02:30:53,908 --> 02:30:58,020
know can I still use it and the answer

2318
02:30:55,738 --> 02:31:00,568
is of course you can actually all you do

2319
02:30:58,020 --> 02:31:02,418
is make the structure longer and put

2320
02:31:00,568 --> 02:31:06,809
changed versions down at the bottom and

2321
02:31:02,418 --> 02:31:08,869
rename anything in the upper part to be

2322
02:31:06,809 --> 02:31:12,359
like deprecated or whatever right and

2323
02:31:08,869 --> 02:31:15,119
then it just works that's it

2324
02:31:12,359 --> 02:31:19,859
and you conversion it as many times as

2325
02:31:15,119 --> 02:31:22,229
you want and it will just work anyone

2326
02:31:19,859 --> 02:31:24,658
who is calling it in the old school like

2327
02:31:22,228 --> 02:31:29,158
in the older version just gets the first

2328
02:31:24,658 --> 02:31:30,689
n of the pointers right and so the only

2329
02:31:29,158 --> 02:31:32,609
thing you actually need to make sure

2330
02:31:30,689 --> 02:31:38,340
that you do is if it's a feed-forward

2331
02:31:32,609 --> 02:31:41,010
system meaning if you are pass instead

2332
02:31:38,340 --> 02:31:43,680
of if if it returns you the table then

2333
02:31:41,010 --> 02:31:45,359
it just works if you have to pass the

2334
02:31:43,680 --> 02:31:48,809
table in and it fills it out you just

2335
02:31:45,359 --> 02:31:50,189
need to send the size or a four or a

2336
02:31:48,809 --> 02:31:54,498
version number and it can figure out the

2337
02:31:50,189 --> 02:31:54,498
size from that but that's it

2338
02:31:59,709 --> 02:32:03,179
[Music]

2339
02:32:03,290 --> 02:32:06,480
tomorrow's my first day work at a

2340
02:32:05,100 --> 02:32:08,340
triple-a company how do i jump into a

2341
02:32:06,479 --> 02:32:10,770
huge codebase ue4 that i know very

2342
02:32:08,340 --> 02:32:14,850
little of i am a little bit intimidated

2343
02:32:10,771 --> 02:32:16,800
also by the object-oriented nasaan so

2344
02:32:14,850 --> 02:32:19,021
there's a couple things i would say so

2345
02:32:16,799 --> 02:32:20,579
the first one is that you have to

2346
02:32:19,021 --> 02:32:24,000
remember that nobody knows how it works

2347
02:32:20,579 --> 02:32:26,639
anyway so one of the things about you

2348
02:32:24,000 --> 02:32:28,680
know modern c++ and large operating Co

2349
02:32:26,639 --> 02:32:30,029
bases is even the people who wrote them

2350
02:32:28,680 --> 02:32:31,560
have no idea how they work and you could

2351
02:32:30,030 --> 02:32:34,021
tell that like you know people who wrote

2352
02:32:31,560 --> 02:32:35,129
LLVM screw it up all the time and have

2353
02:32:34,021 --> 02:32:37,980
no idea what the hell's going on in

2354
02:32:35,129 --> 02:32:41,369
there right and the same is true of Yui

2355
02:32:37,979 --> 02:32:44,039
for right so nobody knows actually

2356
02:32:41,370 --> 02:32:47,070
what's going on in giant code bases like

2357
02:32:44,040 --> 02:32:49,110
that and so it's not like a bunch of

2358
02:32:47,069 --> 02:32:50,219
people are running around with perfect

2359
02:32:49,110 --> 02:32:51,900
knowledge of everything that's happening

2360
02:32:50,219 --> 02:32:54,779
in these code bases and it's just you

2361
02:32:51,899 --> 02:32:57,539
who doesn't know it's like no no none of

2362
02:32:54,780 --> 02:32:59,940
these people know it's too big and very

2363
02:32:57,540 --> 02:33:02,130
obfuscated so a lot of times even things

2364
02:32:59,940 --> 02:33:03,659
they think are happening are wrong and

2365
02:33:02,129 --> 02:33:05,909
they have to end up debugging something

2366
02:33:03,659 --> 02:33:08,100
and going oh crap yeah I forgot about

2367
02:33:05,909 --> 02:33:10,110
the fact that the abstruse template

2368
02:33:08,100 --> 02:33:13,530
repository factory doesn't produce

2369
02:33:10,110 --> 02:33:16,409
things in the same memory space as the

2370
02:33:13,530 --> 02:33:19,050
reef functor er and so I had to like go

2371
02:33:16,409 --> 02:33:21,000
in and add an adapter class to make sure

2372
02:33:19,049 --> 02:33:24,539
that it gets you know and off to the

2373
02:33:21,000 --> 02:33:26,430
races so the second thing I would say is

2374
02:33:24,540 --> 02:33:28,290
remember that all of this modern

2375
02:33:26,430 --> 02:33:29,521
programming garbage still compiles down

2376
02:33:28,290 --> 02:33:32,790
to assembly language at the end of the

2377
02:33:29,521 --> 02:33:37,079
day it can't do anything at all that

2378
02:33:32,790 --> 02:33:39,180
isn't just see right there is C++ has

2379
02:33:37,079 --> 02:33:41,940
literally no features in it right

2380
02:33:39,180 --> 02:33:44,550
there's nothing in C++ that can SCP you

2381
02:33:41,940 --> 02:33:47,700
can do so all of the ridiculous

2382
02:33:44,549 --> 02:33:50,729
fanciness is at the end of the day just

2383
02:33:47,700 --> 02:33:53,040
going to produce basically C code and so

2384
02:33:50,729 --> 02:33:54,719
all you have to do is start remembering

2385
02:33:53,040 --> 02:33:56,910
what all this ridiculous garbage

2386
02:33:54,719 --> 02:34:00,119
actually translates into in terms of

2387
02:33:56,909 --> 02:34:01,229
actual code functions and then it

2388
02:34:00,120 --> 02:34:03,120
becomes much easier because you're like

2389
02:34:01,229 --> 02:34:05,039
oh yeah here's 17 levels of templates

2390
02:34:03,120 --> 02:34:05,521
and 15 nested class hierarchies but you

2391
02:34:05,040 --> 02:34:08,100
know what

2392
02:34:05,521 --> 02:34:09,659
it all boils down to a frickin table

2393
02:34:08,100 --> 02:34:12,271
call where I just look up in the table

2394
02:34:09,659 --> 02:34:15,229
and call a function because that's what

2395
02:34:12,271 --> 02:34:17,961
a CPU does right nothing

2396
02:34:15,229 --> 02:34:19,609
CPU doesn't do can show up in one of

2397
02:34:17,960 --> 02:34:22,909
these code bases because it runs on the

2398
02:34:19,610 --> 02:34:25,671
CPU and there's no objects in a CPU and

2399
02:34:22,909 --> 02:34:29,030
there's no templates in a CPU none of

2400
02:34:25,671 --> 02:34:32,181
this stuff exists right so the key thing

2401
02:34:29,030 --> 02:34:34,489
to focus on is just yeah it's a giant

2402
02:34:32,181 --> 02:34:36,200
crap load of meaningless text that

2403
02:34:34,489 --> 02:34:38,181
someone typed into a computer but at the

2404
02:34:36,200 --> 02:34:41,381
end of the day it actually turns into

2405
02:34:38,181 --> 02:34:45,319
CPU instructions so just focus on

2406
02:34:41,380 --> 02:34:47,090
learning what this crap ton of code

2407
02:34:45,319 --> 02:34:49,630
actually boils down to which will be

2408
02:34:47,091 --> 02:34:52,431
quite small at the end of the day and

2409
02:34:49,630 --> 02:34:53,119
slowly over time you like oh okay all

2410
02:34:52,431 --> 02:34:56,149
right I get it

2411
02:34:53,120 --> 02:34:58,341
I had to spend like three days stepping

2412
02:34:56,149 --> 02:35:01,011
through thousands and thousands of

2413
02:34:58,341 --> 02:35:03,229
source lines but now I get it this huge

2414
02:35:01,011 --> 02:35:07,579
pile of templates just creates a four I

2415
02:35:03,229 --> 02:35:10,100
loop right and it sounds like I'm you

2416
02:35:07,579 --> 02:35:12,021
know making a joke but I'm not that you

2417
02:35:10,101 --> 02:35:13,131
will see that you will see something

2418
02:35:12,021 --> 02:35:14,989
where ten thousand lines of code

2419
02:35:13,130 --> 02:35:16,399
generated one four I loop that does

2420
02:35:14,989 --> 02:35:19,970
something relatively straightforward

2421
02:35:16,399 --> 02:35:21,380
right and that's just what you want to

2422
02:35:19,970 --> 02:35:25,609
remember because that's what's actually

2423
02:35:21,380 --> 02:35:27,260
happening it's one of the reasons that I

2424
02:35:25,610 --> 02:35:29,721
think it's ridiculous that people say to

2425
02:35:27,261 --> 02:35:31,640
not teach C or assembly language anymore

2426
02:35:29,720 --> 02:35:32,720
because it's ridiculous because what

2427
02:35:31,640 --> 02:35:34,460
you're actually teaching them when you

2428
02:35:32,720 --> 02:35:36,890
teach some C++ or Python or any other

2429
02:35:34,460 --> 02:35:39,949
things is you're teaching them nonsense

2430
02:35:36,890 --> 02:35:42,619
you made up right and maybe some of that

2431
02:35:39,950 --> 02:35:44,511
nonsense is useful sometimes but it has

2432
02:35:42,620 --> 02:35:45,440
nothing to do with a program right it

2433
02:35:44,511 --> 02:35:47,601
doesn't have anything to do with a

2434
02:35:45,440 --> 02:35:50,030
computer does it's all nonsense it's all

2435
02:35:47,601 --> 02:35:51,801
just stuff you made up because you

2436
02:35:50,030 --> 02:35:53,480
thought it was better to type in this

2437
02:35:51,800 --> 02:35:56,569
set of words than another set of words

2438
02:35:53,479 --> 02:35:59,739
but it's not programming programming is

2439
02:35:56,569 --> 02:36:01,970
only things that a CPU can do because

2440
02:35:59,739 --> 02:36:03,470
you because it can't do anything else

2441
02:36:01,970 --> 02:36:07,069
that's the definition right

2442
02:36:03,470 --> 02:36:09,380
and so it's so crucial to remember that

2443
02:36:07,069 --> 02:36:13,671
no matter what arbitrary pile of garbage

2444
02:36:09,380 --> 02:36:15,770
like Swift or Python or tensorflow or

2445
02:36:13,671 --> 02:36:18,500
anything else someone dumps in your lap

2446
02:36:15,771 --> 02:36:20,601
at the end of the day it's just assembly

2447
02:36:18,500 --> 02:36:22,851
language at the end of it so if you can

2448
02:36:20,601 --> 02:36:24,650
just focus on what does this huge pile

2449
02:36:22,851 --> 02:36:27,530
of garbage that a lousy programmer wrote

2450
02:36:24,649 --> 02:36:29,779
who doesn't know what they're doing what

2451
02:36:27,530 --> 02:36:31,730
Loup did they actually create at the end

2452
02:36:29,780 --> 02:36:34,040
of it because that's all it can do and

2453
02:36:31,729 --> 02:36:36,199
once you can find out what that's doing

2454
02:36:34,040 --> 02:36:38,840
then you can kind of reverse back

2455
02:36:36,200 --> 02:36:40,550
through their disgusting garbage pile to

2456
02:36:38,840 --> 02:36:43,280
figure out what you actually need to

2457
02:36:40,549 --> 02:36:45,829
change to make the loop do the thing you

2458
02:36:43,280 --> 02:36:48,650
wanted to do now it would be great if

2459
02:36:45,829 --> 02:36:50,209
those people had ever like gone to a mic

2460
02:36:48,649 --> 02:36:52,579
act in lecture and realize that if they

2461
02:36:50,209 --> 02:36:54,439
just wrote the stupid loop to begin with

2462
02:36:52,579 --> 02:36:57,079
they would have saved three months of

2463
02:36:54,440 --> 02:37:00,159
work and anyone could read it but they

2464
02:36:57,079 --> 02:37:00,159
didn't so here we are

2465
02:37:20,399 --> 02:37:26,250
have I heard of ipfs no I don't know

2466
02:37:25,271 --> 02:37:30,780
what that answer is it

2467
02:37:26,250 --> 02:37:33,780
Internet Protocol file system or

2468
02:37:30,780 --> 02:37:33,780
something

2469
02:37:33,889 --> 02:37:37,389
[Music]

2470
02:38:04,370 --> 02:38:09,500
it's very important that I don't spend

2471
02:38:06,920 --> 02:38:15,680
much time looking at large C++ code

2472
02:38:09,500 --> 02:38:17,478
bases because interplanet art taro

2473
02:38:15,680 --> 02:38:24,229
probably interplanetary interplanetary

2474
02:38:17,478 --> 02:38:26,688
file system it's a decentralized file

2475
02:38:24,228 --> 02:38:31,269
system which is hash based mapping on

2476
02:38:26,689 --> 02:38:31,270
the nodes of the network for file lookup

2477
02:38:33,969 --> 02:38:46,250
does that work though so why would that

2478
02:38:42,879 --> 02:38:50,750
fix anything though

2479
02:38:46,250 --> 02:38:52,609
I guess I'd have to go look so I'll say

2480
02:38:50,750 --> 02:38:58,090
one thing about that and maybe they have

2481
02:38:52,609 --> 02:39:01,220
an idea about what they're doing that

2482
02:38:58,090 --> 02:39:03,260
would be relevant here but my first

2483
02:39:01,219 --> 02:39:05,469
thought on that is like well ok so let's

2484
02:39:03,260 --> 02:39:07,489
suppose that what you decided to do was

2485
02:39:05,469 --> 02:39:14,049
we're just gonna take every piece of

2486
02:39:07,489 --> 02:39:16,789
content at some kind of like block like

2487
02:39:14,049 --> 02:39:18,500
at some kind of blocking level so we're

2488
02:39:16,790 --> 02:39:20,720
like I don't know based like a file per

2489
02:39:18,500 --> 02:39:21,680
file traditional file or something I

2490
02:39:20,719 --> 02:39:23,959
mean who knows what it's gonna be but

2491
02:39:21,680 --> 02:39:25,609
like we decided to take all the data and

2492
02:39:23,959 --> 02:39:27,139
we block it up into chunks and we're

2493
02:39:25,609 --> 02:39:30,530
saying we're gonna like identify these

2494
02:39:27,139 --> 02:39:32,840
chunks by the hash of the content of the

2495
02:39:30,530 --> 02:39:34,700
chunk and that way anytime someone says

2496
02:39:32,840 --> 02:39:36,920
like you need this thing you can just

2497
02:39:34,700 --> 02:39:43,520
say ok here's the chunk that I need it

2498
02:39:36,920 --> 02:39:45,350
or whatever right and so you know that's

2499
02:39:43,520 --> 02:39:46,460
the kind of thing that someone who

2500
02:39:45,350 --> 02:39:49,460
hasn't thought about the problem very

2501
02:39:46,459 --> 02:39:52,069
long probably thinks about I guess or

2502
02:39:49,459 --> 02:39:55,159
maybe the answer is someone who knows

2503
02:39:52,069 --> 02:39:56,420
way more about than I do figures out

2504
02:39:55,159 --> 02:39:58,189
some reasons why that would actually

2505
02:39:56,420 --> 02:40:00,319
work but like in my head I'm like well

2506
02:39:58,189 --> 02:40:04,069
that doesn't work at all because the

2507
02:40:00,319 --> 02:40:07,100
entire point of modern you know network

2508
02:40:04,069 --> 02:40:09,648
traffic security is that you can't have

2509
02:40:07,100 --> 02:40:12,079
anyone know what it is you were asking

2510
02:40:09,648 --> 02:40:15,079
for right

2511
02:40:12,079 --> 02:40:17,840
so for example if you take a an HTTP

2512
02:40:15,079 --> 02:40:18,228
request then sure that transfer makes

2513
02:40:17,840 --> 02:40:20,629
perfect

2514
02:40:18,228 --> 02:40:22,188
if everyone was communicating via HTTP

2515
02:40:20,629 --> 02:40:24,439
then you would say well rather than

2516
02:40:22,189 --> 02:40:26,809
communicating by HTTP within the URL why

2517
02:40:24,439 --> 02:40:27,199
don't you just communicate by this new

2518
02:40:26,809 --> 02:40:31,488
thing like

2519
02:40:27,199 --> 02:40:33,739
ipfs and we just say here is the hash

2520
02:40:31,488 --> 02:40:35,448
that I was looking for and anyone can

2521
02:40:33,738 --> 02:40:38,478
respond right anyone who's got it will

2522
02:40:35,449 --> 02:40:39,859
just hand it back to me but that's not

2523
02:40:38,478 --> 02:40:42,559
how the world works now the world

2524
02:40:39,859 --> 02:40:44,479
everything works by HTTP which means

2525
02:40:42,559 --> 02:40:46,639
that you can never have anybody besides

2526
02:40:44,478 --> 02:40:50,809
the person who owns the thing actually

2527
02:40:46,639 --> 02:40:54,408
know what you were asking for right so I

2528
02:40:50,809 --> 02:40:57,468
guess I don't understand what that means

2529
02:40:54,408 --> 02:40:59,088
like asking who has the file that

2530
02:40:57,468 --> 02:41:01,488
digested this hash you can never do that

2531
02:40:59,088 --> 02:41:04,779
because if you ask that question you've

2532
02:41:01,488 --> 02:41:07,248
already broken your security model so

2533
02:41:04,779 --> 02:41:10,578
what's their solution to that how do I

2534
02:41:07,248 --> 02:41:20,449
ask for a thing without anyone knowing

2535
02:41:10,578 --> 02:41:22,869
what the thing is by hash see you I'm

2536
02:41:20,449 --> 02:41:22,869
going with

2537
02:41:25,328 --> 02:41:32,208
and you know I'm I can go read about it

2538
02:41:29,959 --> 02:41:36,680
but that'd be what I want to know right

2539
02:41:32,209 --> 02:41:38,989
like how do they solve that problem and

2540
02:41:36,680 --> 02:41:41,148
maybe they've totally solved that in

2541
02:41:38,988 --> 02:41:45,698
which case that's cool right because it

2542
02:41:41,148 --> 02:41:48,019
seems like that'd be useful maybe I

2543
02:41:45,699 --> 02:41:54,970
don't know I could I could bring it up

2544
02:41:48,020 --> 02:41:54,970
here someone posted a link I PFS

2545
02:41:58,640 --> 02:42:05,829
oh no no

2546
02:42:22,500 --> 02:42:28,478
so I mean yet like again maybe this is

2547
02:42:26,139 --> 02:42:30,340
just high level but this is just exactly

2548
02:42:28,478 --> 02:42:38,318
what I just said and no that doesn't

2549
02:42:30,340 --> 02:42:40,540
work right I mean I mean it doesn't work

2550
02:42:38,318 --> 02:42:42,430
because basically everyone in this

2551
02:42:40,540 --> 02:42:46,359
network now knows what everyone's doing

2552
02:42:42,430 --> 02:42:47,800
so it's like hey yeah you know that you

2553
02:42:46,359 --> 02:42:49,720
know porn you were watching

2554
02:42:47,799 --> 02:42:52,449
well now everybody in the entire network

2555
02:42:49,719 --> 02:42:54,728
knows what it was because everyone saw

2556
02:42:52,450 --> 02:42:58,569
you asking for that hash and they know

2557
02:42:54,728 --> 02:43:00,789
what that hash is right I mean it

2558
02:42:58,568 --> 02:43:02,829
doesn't work even for basic stuff let

2559
02:43:00,790 --> 02:43:06,300
alone once we start talking about asking

2560
02:43:02,829 --> 02:43:09,100
for actual like things that's you know

2561
02:43:06,299 --> 02:43:10,659
important right I mean I guess you could

2562
02:43:09,100 --> 02:43:12,189
argue that people don't care because

2563
02:43:10,659 --> 02:43:16,780
they know that you're watching the porn

2564
02:43:12,189 --> 02:43:19,450
anyway right but I'm just saying there's

2565
02:43:16,780 --> 02:43:22,210
no way that works like this doesn't work

2566
02:43:19,450 --> 02:43:23,829
so maybe there's more to it than this is

2567
02:43:22,209 --> 02:43:25,539
like the thing for you know this is how

2568
02:43:23,829 --> 02:43:27,639
ipfs works for dummies right they're

2569
02:43:25,540 --> 02:43:29,140
just trying to explain it so maybe it

2570
02:43:27,639 --> 02:43:30,519
actually has something smarter than that

2571
02:43:29,139 --> 02:43:33,068
but if this is literally what they're

2572
02:43:30,520 --> 02:43:36,630
doing it doesn't work so no not a

2573
02:43:33,068 --> 02:43:36,629
solution right

2574
02:43:49,168 --> 02:43:54,168
take a look at the white paper where's

2575
02:43:51,418 --> 02:43:54,168
the white paper

2576
02:44:02,750 --> 02:44:05,709
here is

2577
02:44:13,690 --> 02:44:20,069
[Music]

2578
02:44:14,969 --> 02:44:20,068
let's see do

2579
02:44:31,059 --> 02:44:34,319
[Music]

2580
02:45:11,030 --> 02:45:17,060
I mean yeah again I just I don't I don't

2581
02:45:14,719 --> 02:45:19,549
see it right I mean it says right here

2582
02:45:17,059 --> 02:45:24,619
you're sending everybody everything

2583
02:45:19,549 --> 02:45:27,649
you're doing right so like literally

2584
02:45:24,620 --> 02:45:30,130
everything you browse everyone in the

2585
02:45:27,649 --> 02:45:40,670
network knows your entire web history

2586
02:45:30,129 --> 02:45:42,439
right I mean that's this right I mean

2587
02:45:40,670 --> 02:45:44,090
not everybody because it you know

2588
02:45:42,440 --> 02:45:46,520
different people see different parts of

2589
02:45:44,090 --> 02:45:48,260
it right but anyone who's pretty

2590
02:45:46,520 --> 02:45:50,440
aggressive could probably find out quite

2591
02:45:48,260 --> 02:45:50,440
a bit

2592
02:46:05,850 --> 02:46:09,568
and I mean again there's not even a

2593
02:46:08,158 --> 02:46:12,568
section in here that talks about that

2594
02:46:09,568 --> 02:46:17,609
like you would want this should have a

2595
02:46:12,568 --> 02:46:24,959
thing that's like security and it

2596
02:46:17,609 --> 02:46:28,079
doesn't which is not great right so I'm

2597
02:46:24,959 --> 02:46:31,259
pretty sure this just isn't useful like

2598
02:46:28,079 --> 02:46:32,969
it's probably fine for BitTorrent like

2599
02:46:31,260 --> 02:46:35,760
if all you're doing is trying to trade

2600
02:46:32,969 --> 02:46:38,879
like pirated movies or whatever then hey

2601
02:46:35,760 --> 02:46:41,609
like you're only on there if you're

2602
02:46:38,879 --> 02:46:43,829
breaking the law anyway so who cares if

2603
02:46:41,609 --> 02:46:45,238
people find out about it because that's

2604
02:46:43,829 --> 02:46:46,738
all it's used for so all they need to do

2605
02:46:45,238 --> 02:46:50,010
is already using it at all well you're

2606
02:46:46,738 --> 02:46:53,340
probably stealing something right but if

2607
02:46:50,010 --> 02:46:55,770
the idea is we would try to use this as

2608
02:46:53,340 --> 02:46:58,219
a backbone for the internet it no like

2609
02:46:55,770 --> 02:47:01,829
it that does not work this is not

2610
02:46:58,219 --> 02:47:03,059
tractable and I don't see anything in

2611
02:47:01,829 --> 02:47:08,270
here that suggests that they've solved

2612
02:47:03,059 --> 02:47:08,269
the problem unless I'm missing it right

2613
02:47:20,620 --> 02:47:23,820
like am I missing something

2614
02:47:39,909 --> 02:47:45,500
yeah exactly so so ginger bill I think I

2615
02:47:43,640 --> 02:47:47,569
think they are not trying to solve this

2616
02:47:45,500 --> 02:47:49,310
problem which is why I say when people

2617
02:47:47,569 --> 02:47:50,959
are asking me if this is useful in

2618
02:47:49,310 --> 02:47:53,449
trying to rebuild the Internet like no

2619
02:47:50,959 --> 02:47:57,649
it's not this is like a very specific

2620
02:47:53,450 --> 02:48:00,860
thing for solving a very specific

2621
02:47:57,649 --> 02:48:04,489
problem it doesn't help fix the Internet

2622
02:48:00,860 --> 02:48:07,431
at all like it helps make a better

2623
02:48:04,489 --> 02:48:09,140
BitTorrent probably but BitTorrent is

2624
02:48:07,431 --> 02:48:10,579
not the backbone of the internet for a

2625
02:48:09,140 --> 02:48:13,170
very good reason because it can't be

2626
02:48:10,579 --> 02:48:16,260
right

2627
02:48:13,170 --> 02:48:16,260
[Music]

2628
02:48:25,729 --> 02:48:29,180
I think no single node in the network

2629
02:48:27,739 --> 02:48:30,890
has to a higher percent of a file so you

2630
02:48:29,181 --> 02:48:32,239
can only request an incomplete fragment

2631
02:48:30,890 --> 02:48:33,829
which will make it harder for the node

2632
02:48:32,239 --> 02:48:40,851
hosting to guess what it is

2633
02:48:33,829 --> 02:48:49,819
I mean why because all you have to do is

2634
02:48:40,851 --> 02:48:51,190
figure out roughly you know let me put

2635
02:48:49,819 --> 02:48:53,329
it this way

2636
02:48:51,190 --> 02:48:53,750
first of all no that's obviously not

2637
02:48:53,329 --> 02:48:57,319
true

2638
02:48:53,750 --> 02:48:58,879
because if you can watch your porn video

2639
02:48:57,319 --> 02:49:01,431
at some point you've got a hundred

2640
02:48:58,879 --> 02:49:05,390
percent of it right if you could watch

2641
02:49:01,431 --> 02:49:12,730
the whole thing if you wanted to steal

2642
02:49:05,390 --> 02:49:17,690
your pirate copy of Avengers 17 you know

2643
02:49:12,729 --> 02:49:20,719
everything explodes or whatever then you

2644
02:49:17,690 --> 02:49:23,569
had to get the whole thing so now you

2645
02:49:20,719 --> 02:49:25,699
know all of the chunks that were in

2646
02:49:23,569 --> 02:49:27,140
there and anytime anyone asks you for

2647
02:49:25,700 --> 02:49:30,170
one you know that's what they're looking

2648
02:49:27,140 --> 02:49:31,729
for so done right it's so simple like I

2649
02:49:30,170 --> 02:49:34,040
could make a node that did that tomorrow

2650
02:49:31,729 --> 02:49:35,899
just looking at this thing it's it's not

2651
02:49:34,040 --> 02:49:41,360
even it's not like some super elite

2652
02:49:35,899 --> 02:49:43,100
hacks or a job it's just that's it if

2653
02:49:41,360 --> 02:49:44,601
you can watch something you can get the

2654
02:49:43,101 --> 02:49:46,431
whole thing if you can get the whole

2655
02:49:44,601 --> 02:49:48,440
thing you know everyone else who's

2656
02:49:46,431 --> 02:49:50,931
asking for any of it at that point I

2657
02:49:48,440 --> 02:49:52,940
mean at least in your general vicinity

2658
02:49:50,931 --> 02:49:54,920
like anyone who ever sends you a packet

2659
02:49:52,940 --> 02:49:56,780
and anyone who wanted to police this

2660
02:49:54,920 --> 02:49:58,909
sort of thing has a pretty easy time

2661
02:49:56,780 --> 02:50:00,771
they just flood this system with

2662
02:49:58,909 --> 02:50:03,530
thousands of servers that they rent on

2663
02:50:00,771 --> 02:50:07,420
AWS and they collect every single thing

2664
02:50:03,530 --> 02:50:07,420
that everyone asked for from them right

2665
02:50:22,159 --> 02:50:26,360
so I'm pretty sure this just isn't

2666
02:50:24,680 --> 02:50:28,579
relevant this is just like hey let's

2667
02:50:26,360 --> 02:50:30,260
make a better BitTorrent which totally

2668
02:50:28,579 --> 02:50:31,879
worth doing has nothing to do with

2669
02:50:30,260 --> 02:50:34,040
fixing the internet like will not really

2670
02:50:31,879 --> 02:50:36,709
have any effect on it right

2671
02:50:34,040 --> 02:50:39,320
I mean hey maybe can replace Dropbox

2672
02:50:36,709 --> 02:50:40,398
which would be great because Dropbox is

2673
02:50:39,319 --> 02:50:48,049
stupid right

2674
02:50:40,398 --> 02:50:50,289
but like no not helpful on the Internet

2675
02:50:48,049 --> 02:50:50,289
scale

2676
02:50:55,129 --> 02:51:00,898
in translation internationalization

2677
02:50:57,870 --> 02:51:02,729
honest jr some good resource to explain

2678
02:51:00,898 --> 02:51:03,689
how the internet works you said that it

2679
02:51:02,728 --> 02:51:07,260
could not be used as a back with your

2680
02:51:03,689 --> 02:51:09,210
permission to Y so again I was trying to

2681
02:51:07,260 --> 02:51:11,639
explain the reason why the reason why is

2682
02:51:09,209 --> 02:51:13,949
just because when you have machines

2683
02:51:11,639 --> 02:51:15,539
talking to each other and you start to

2684
02:51:13,950 --> 02:51:18,180
use them in a peer-to-peer fashion so

2685
02:51:15,540 --> 02:51:23,160
you know when I need to get so right now

2686
02:51:18,180 --> 02:51:26,989
when I go to ask for something so if I

2687
02:51:23,159 --> 02:51:31,200
want to get a video from Netflix right I

2688
02:51:26,989 --> 02:51:33,510
send a web request to Netflix now

2689
02:51:31,200 --> 02:51:35,790
everyone on the network who happens to

2690
02:51:33,510 --> 02:51:37,818
be in between right who's passing those

2691
02:51:35,790 --> 02:51:40,620
packets along to Netflix eventually

2692
02:51:37,818 --> 02:51:43,500
which i think is actually Amazon but

2693
02:51:40,620 --> 02:51:47,340
that's a separate second thing can see

2694
02:51:43,500 --> 02:51:50,159
one and only one thing and that is the

2695
02:51:47,340 --> 02:51:52,950
IP address of the machine I was asking

2696
02:51:50,159 --> 02:51:56,430
right because everything else about the

2697
02:51:52,950 --> 02:51:58,200
request is encrypted via HTTPS so they

2698
02:51:56,430 --> 02:52:03,000
don't even know what resource I was

2699
02:51:58,200 --> 02:52:04,859
asking for so as long as I'm asking for

2700
02:52:03,000 --> 02:52:07,590
the resource from a site that has

2701
02:52:04,859 --> 02:52:10,680
sufficiently many resources no one knows

2702
02:52:07,590 --> 02:52:12,809
what I'm actually looking at right so

2703
02:52:10,680 --> 02:52:16,229
you don't know whether I'm watching a

2704
02:52:12,809 --> 02:52:19,829
super sweet awesome film like Ernest

2705
02:52:16,228 --> 02:52:23,010
goes to jail or whether I'm watching

2706
02:52:19,829 --> 02:52:26,639
like you know scenes from a marriage by

2707
02:52:23,010 --> 02:52:29,068
Ingmar Bergman right so I can lie to you

2708
02:52:26,639 --> 02:52:31,260
and tell you I only watch sophisticated

2709
02:52:29,068 --> 02:52:34,139
movies and that the thing that I'm

2710
02:52:31,260 --> 02:52:36,719
streaming you know is extremely

2711
02:52:34,139 --> 02:52:38,670
sophisticated and relevant to film

2712
02:52:36,719 --> 02:52:40,909
history right like I only watch

2713
02:52:38,670 --> 02:52:43,260
Nosferatu and I watch it 24 hours a day

2714
02:52:40,909 --> 02:52:47,600
but actually it turns out that the

2715
02:52:43,260 --> 02:52:50,909
entire time I was just you know watching

2716
02:52:47,600 --> 02:52:52,200
cartoons right and you have no I am

2717
02:52:50,909 --> 02:52:54,119
annoyed the only thing you know that I

2718
02:52:52,200 --> 02:52:56,130
was talking to a Netflix server and you

2719
02:52:54,120 --> 02:52:57,300
may not even know that if you can't

2720
02:52:56,129 --> 02:52:59,188
quite figure out what the Netflix

2721
02:52:57,299 --> 02:53:01,318
servers are but you probably can because

2722
02:52:59,189 --> 02:53:02,489
you can just keep asking where Netflix

2723
02:53:01,318 --> 02:53:03,809
is and it'll keep sending you IP

2724
02:53:02,489 --> 02:53:07,129
addresses and you could probably cover

2725
02:53:03,809 --> 02:53:07,129
like most of what they are

2726
02:53:08,219 --> 02:53:13,648
um so the problem with the thing that we

2727
02:53:11,790 --> 02:53:15,450
are pointing out there is that thing and

2728
02:53:13,648 --> 02:53:18,420
people that prevent this before vint

2729
02:53:15,450 --> 02:53:21,270
cerf proposed long ago he said what if

2730
02:53:18,420 --> 02:53:23,728
we just looked up data by hash the

2731
02:53:21,270 --> 02:53:27,779
problem with it is that once you convert

2732
02:53:23,728 --> 02:53:29,818
data into hashes as their names now the

2733
02:53:27,779 --> 02:53:33,569
way you ask for something and when you

2734
02:53:29,818 --> 02:53:36,148
ask you can ask multiple people people

2735
02:53:33,568 --> 02:53:37,769
just around you and say hey did you

2736
02:53:36,148 --> 02:53:41,278
happen to ever get this part of this

2737
02:53:37,770 --> 02:53:43,290
file because I need it right this

2738
02:53:41,279 --> 02:53:45,120
massively improved distribution because

2739
02:53:43,290 --> 02:53:48,270
it means anyone can answer any question

2740
02:53:45,120 --> 02:53:49,590
now because if anyone ever got part of

2741
02:53:48,270 --> 02:53:52,290
the Saturday morning cartoon from

2742
02:53:49,590 --> 02:53:53,880
Netflix they know that I'm looking for

2743
02:53:52,290 --> 02:53:55,080
that now when I ask them they can just

2744
02:53:53,879 --> 02:53:57,299
send it right back and we never have to

2745
02:53:55,079 --> 02:53:59,340
ask Netflix for it that's nice

2746
02:53:57,299 --> 02:54:01,709
but the problem is now everyone knows

2747
02:53:59,340 --> 02:54:03,960
what I'm asking for it's not just

2748
02:54:01,709 --> 02:54:06,858
between me and Netflix now it's me and

2749
02:54:03,959 --> 02:54:11,759
everybody else who I happen to ask right

2750
02:54:06,859 --> 02:54:15,870
so basically all of the like problems

2751
02:54:11,760 --> 02:54:17,728
that you get with privacy get greatly

2752
02:54:15,870 --> 02:54:20,100
exacerbated in a hash based system

2753
02:54:17,728 --> 02:54:21,329
because now all of the peer-to-peer it's

2754
02:54:20,100 --> 02:54:24,180
not really a hash space it's just a

2755
02:54:21,329 --> 02:54:26,579
peer-to-peer nature of it right the fact

2756
02:54:24,180 --> 02:54:28,020
that I can ask anyone and those people

2757
02:54:26,579 --> 02:54:31,889
who have parks the file could just give

2758
02:54:28,020 --> 02:54:36,300
it to me improves the like reliability

2759
02:54:31,889 --> 02:54:38,369
and speed of the content delivery but it

2760
02:54:36,299 --> 02:54:40,699
completely obliterates any privacy that

2761
02:54:38,370 --> 02:54:40,700
you had

2762
02:54:53,950 --> 02:54:58,659
all right I'm gonna close it down thank

2763
02:54:57,639 --> 02:54:59,859
you everyone for joining me for the new

2764
02:54:58,659 --> 02:55:02,289
set of handmade hero spit-up pleasure

2765
02:54:59,860 --> 02:55:04,450
coding with you as always if you would

2766
02:55:02,290 --> 02:55:05,770
like to follow us areas at home you can

2767
02:55:04,450 --> 02:55:08,079
always peer to the game on handmade hero

2768
02:55:05,770 --> 02:55:10,180
org and it comes with a source code so

2769
02:55:08,079 --> 02:55:13,149
you can follow along with it

2770
02:55:10,180 --> 02:55:14,800
I also am working on a few courses that

2771
02:55:13,149 --> 02:55:17,319
are going to go up here that you can buy

2772
02:55:14,799 --> 02:55:19,179
later but they're not quite up yet I'll

2773
02:55:17,319 --> 02:55:23,049
have some more information about that a

2774
02:55:19,180 --> 02:55:24,189
little bit later on maybe next month but

2775
02:55:23,049 --> 02:55:26,228
I'm hoping that there'll also be some

2776
02:55:24,189 --> 02:55:28,930
good course material that you can get on

2777
02:55:26,228 --> 02:55:32,529
here so stay tuned for that it should be

2778
02:55:28,930 --> 02:55:34,899
coming a little bit later on all right

2779
02:55:32,530 --> 02:55:37,659
that's it for today I'll be back here

2780
02:55:34,899 --> 02:55:40,779
next week I believe when we will go

2781
02:55:37,659 --> 02:55:42,309
ahead and start working on the lighting

2782
02:55:40,780 --> 02:55:43,989
using the rendering reloading we just

2783
02:55:42,309 --> 02:55:44,978
did and we should that should allow us

2784
02:55:43,989 --> 02:55:47,430
to have a little bit faster turnaround

2785
02:55:44,978 --> 02:55:50,109
times there which would be nice alright

2786
02:55:47,430 --> 02:55:51,850
that's it for today have fun program

2787
02:55:50,110 --> 02:55:54,689
everyone and I'll see you on the

2788
02:55:51,850 --> 02:55:54,689
Internet take it easy everybody

