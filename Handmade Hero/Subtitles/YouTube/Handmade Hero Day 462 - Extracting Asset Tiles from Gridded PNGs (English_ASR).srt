1
00:00:00,000 --> 00:00:03,270
everybody welcome to handmade here oh

2
00:00:01,169 --> 00:00:07,229
sure we code a complete game live on

3
00:00:03,270 --> 00:00:10,080
stream we did the work necessary

4
00:00:07,230 --> 00:00:12,179
yesterday to remember whether or not

5
00:00:10,080 --> 00:00:14,580
files have changed so we basically

6
00:00:12,179 --> 00:00:15,809
snapped the file date on files and then

7
00:00:14,580 --> 00:00:17,789
we can check them later to see if

8
00:00:15,808 --> 00:00:19,589
they've changed what we need to do today

9
00:00:17,789 --> 00:00:22,350
is do something meaningful when they do

10
00:00:19,589 --> 00:00:26,009
change we already wrote the PNG reader

11
00:00:22,350 --> 00:00:27,599
so we can load them but we don't

12
00:00:26,010 --> 00:00:30,689
actually know what to do with them and

13
00:00:27,599 --> 00:00:33,480
so our job today is to do something with

14
00:00:30,689 --> 00:00:35,659
them sure we can call the PNG reader but

15
00:00:33,479 --> 00:00:37,409
what do we do once we get the PNG back

16
00:00:35,659 --> 00:00:40,078
so I'm going to go ahead and load up

17
00:00:37,409 --> 00:00:42,718
handmade asset that's where this is

18
00:00:40,079 --> 00:00:45,210
taking place let's just get that going

19
00:00:42,719 --> 00:00:47,429
here so what you can see here is we left

20
00:00:45,210 --> 00:00:50,160
a stub function here called update asset

21
00:00:47,429 --> 00:00:52,289
package from PNG and the thing that we

22
00:00:50,159 --> 00:00:55,049
created was this check for art changes

23
00:00:52,289 --> 00:00:56,969
this goes through looks to see what

24
00:00:55,049 --> 00:01:01,019
files the platform layer reports they're

25
00:00:56,969 --> 00:01:03,329
being of type PNG and after it's done

26
00:01:01,020 --> 00:01:06,060
with that it looks through them all to

27
00:01:03,329 --> 00:01:08,040
see which ones have changed from the

28
00:01:06,060 --> 00:01:09,780
last time we saw them those ones that

29
00:01:08,040 --> 00:01:12,090
have changed get this call but this

30
00:01:09,780 --> 00:01:14,070
doesn't do anything it's all set up to

31
00:01:12,090 --> 00:01:16,079
do something it's got the contents of

32
00:01:14,069 --> 00:01:18,569
the file right here it's got an arena

33
00:01:16,079 --> 00:01:21,000
that it can use for temporary work such

34
00:01:18,569 --> 00:01:22,529
as loading the file and you can see that

35
00:01:21,000 --> 00:01:26,700
we're all set up here to go ahead and

36
00:01:22,530 --> 00:01:27,840
call like parse PNG for example but we

37
00:01:26,700 --> 00:01:31,978
don't actually know what we're gonna do

38
00:01:27,840 --> 00:01:32,728
with it so that's kind of what we need

39
00:01:31,978 --> 00:01:35,789
to start doing today

40
00:01:32,728 --> 00:01:37,438
and again that starts to get us into the

41
00:01:35,790 --> 00:01:40,200
the zone that we don't really know what

42
00:01:37,438 --> 00:01:42,298
we want to do which is the tags part of

43
00:01:40,200 --> 00:01:44,909
things and so that's what we're going to

44
00:01:42,299 --> 00:01:46,829
kind of run up into today I think so

45
00:01:44,909 --> 00:01:49,409
we'll kind of run up into that and we'll

46
00:01:46,828 --> 00:01:52,349
stop there and then we'll pick that up

47
00:01:49,409 --> 00:01:53,759
the next weekend we're coding we'll

48
00:01:52,349 --> 00:01:58,349
start to take a look at what we want to

49
00:01:53,759 --> 00:01:59,938
do with that with that tag stuff so we

50
00:01:58,349 --> 00:02:01,368
know that we can call the PNG reader

51
00:01:59,938 --> 00:02:05,069
that we wrote and we know that it will

52
00:02:01,368 --> 00:02:07,200
return us an image so this is the raw

53
00:02:05,069 --> 00:02:09,719
image that would come back here we give

54
00:02:07,200 --> 00:02:12,150
it a temporary nough and then what we

55
00:02:09,719 --> 00:02:14,568
need to do is pass it a file and we also

56
00:02:12,150 --> 00:02:18,110
need to have some kind of

57
00:02:14,568 --> 00:02:19,789
an info stream if we care now one of the

58
00:02:18,110 --> 00:02:21,080
things that I'm pretty sure that we did

59
00:02:19,789 --> 00:02:23,060
and if we didn't do we need to do it

60
00:02:21,080 --> 00:02:26,469
right now but one of the things that we

61
00:02:23,060 --> 00:02:30,219
need to do is make sure that we do not

62
00:02:26,469 --> 00:02:32,568
record anything if we don't have a

63
00:02:30,219 --> 00:02:34,669
destination stream so we did not do that

64
00:02:32,568 --> 00:02:38,259
so exactly what I said we need to do we

65
00:02:34,669 --> 00:02:41,030
didn't do we want to do this right

66
00:02:38,259 --> 00:02:46,098
because we want to be able to just not

67
00:02:41,030 --> 00:02:47,840
capture information could come back and

68
00:02:46,098 --> 00:02:50,598
so for example in this case we don't

69
00:02:47,840 --> 00:02:53,360
care about the like debug print out

70
00:02:50,598 --> 00:02:55,310
that's gonna happen here in the info

71
00:02:53,360 --> 00:02:58,690
stream we just don't care about that at

72
00:02:55,310 --> 00:03:02,390
all so what we would rather do is only

73
00:02:58,689 --> 00:03:04,759
initialize the error stream so what we

74
00:03:02,389 --> 00:03:07,878
can do here is we want to create one of

75
00:03:04,759 --> 00:03:10,250
these file one of these file buffers and

76
00:03:07,878 --> 00:03:13,729
if you go back and look at what we did

77
00:03:10,250 --> 00:03:18,500
in test PNG we have like an error stream

78
00:03:13,729 --> 00:03:20,268
you can see right here when we do read

79
00:03:18,500 --> 00:03:23,719
into our file we sort of create one of

80
00:03:20,269 --> 00:03:26,180
these and blah blah blah right but what

81
00:03:23,719 --> 00:03:27,590
we would like to do if possible is we'd

82
00:03:26,180 --> 00:03:28,969
like to make this a little bit more

83
00:03:27,590 --> 00:03:32,120
systemic because this is going to be

84
00:03:28,969 --> 00:03:34,909
something now that we actually do

85
00:03:32,120 --> 00:03:41,060
perhaps more regularly creating one of

86
00:03:34,909 --> 00:03:43,250
these streams one of these yeah one of

87
00:03:41,060 --> 00:03:47,169
these stream things so what I'd like to

88
00:03:43,250 --> 00:03:51,109
do is say well okay so maybe we have a

89
00:03:47,169 --> 00:03:54,079
count and a data pointer or something

90
00:03:51,109 --> 00:03:56,269
like this and maybe when we get to the

91
00:03:54,079 --> 00:04:00,950
end here maybe we do something like

92
00:03:56,269 --> 00:04:03,709
stream result we do a you know make

93
00:04:00,949 --> 00:04:05,750
stream or something like this and we

94
00:04:03,709 --> 00:04:09,259
pass it the count and the data and the

95
00:04:05,750 --> 00:04:10,669
error buffer and then off we go so that

96
00:04:09,259 --> 00:04:13,969
we know that we've got some way of

97
00:04:10,669 --> 00:04:17,030
making these that's reliable and and

98
00:04:13,969 --> 00:04:19,519
that works right so this would be this

99
00:04:17,029 --> 00:04:21,978
would be nice now the problem that we

100
00:04:19,519 --> 00:04:24,680
have here is that the error stream we

101
00:04:21,978 --> 00:04:27,449
actually wanted to use it here right so

102
00:04:24,680 --> 00:04:29,220
what we kind of want to do instead is

103
00:04:27,449 --> 00:04:30,629
a little bit uglier but you know if we

104
00:04:29,220 --> 00:04:32,150
want to do it that way we kind of don't

105
00:04:30,629 --> 00:04:34,620
have a choice

106
00:04:32,149 --> 00:04:37,500
basically if we'd if we weren't able to

107
00:04:34,620 --> 00:04:40,139
get a pointer here we we produce an

108
00:04:37,500 --> 00:04:42,389
error right so we can still kind of do

109
00:04:40,139 --> 00:04:44,129
it you know it's it's still fine it's

110
00:04:42,389 --> 00:04:45,240
just it's not quite as nice so you know

111
00:04:44,129 --> 00:04:48,089
maybe that isn't the greatest thing to

112
00:04:45,240 --> 00:04:58,460
do I don't know but there you go so it

113
00:04:48,089 --> 00:05:02,849
would look something like this and oops

114
00:04:58,459 --> 00:05:06,529
that would sort of allow us to do this

115
00:05:02,850 --> 00:05:09,030
this kind of a this kind of thing here

116
00:05:06,529 --> 00:05:11,069
so I don't know if necessarily better

117
00:05:09,029 --> 00:05:12,929
but at least it has sort of a

118
00:05:11,069 --> 00:05:15,480
centralized way of calling make stream

119
00:05:12,930 --> 00:05:17,400
you know what I'm saying and so that we

120
00:05:15,480 --> 00:05:21,120
can use in other cases and furthermore

121
00:05:17,399 --> 00:05:23,519
this right here is a buffer so we can

122
00:05:21,120 --> 00:05:25,230
actually sort of straight make this even

123
00:05:23,519 --> 00:05:29,759
more straightforward by doing this sort

124
00:05:25,230 --> 00:05:32,009
of thing and then we just do this right

125
00:05:29,759 --> 00:05:34,409
so make a stream out of oops out of a

126
00:05:32,009 --> 00:05:37,589
buffer and some other stream that

127
00:05:34,410 --> 00:05:42,810
captures errors like so and that's

128
00:05:37,589 --> 00:05:44,159
that's all we do right so from here if I

129
00:05:42,810 --> 00:05:46,259
wanted to do that it's pretty

130
00:05:44,160 --> 00:05:49,980
straightforward as well I know that I've

131
00:05:46,259 --> 00:05:52,319
got the contents that I want to to pass

132
00:05:49,980 --> 00:05:54,300
through here so I can make my file

133
00:05:52,319 --> 00:05:57,269
stream by just saying hey make a stream

134
00:05:54,300 --> 00:05:59,970
with these contents and whatever we want

135
00:05:57,269 --> 00:06:02,370
our air stream to be now I do actually

136
00:05:59,970 --> 00:06:04,140
want an air stream here I want a thing

137
00:06:02,370 --> 00:06:09,480
that will record what the errors

138
00:06:04,139 --> 00:06:11,490
actually were and I think I kind of want

139
00:06:09,480 --> 00:06:13,980
that to be part of the asset system

140
00:06:11,490 --> 00:06:16,139
permanently I don't mind that it kind of

141
00:06:13,980 --> 00:06:17,759
just builds up memory forever because I

142
00:06:16,139 --> 00:06:21,569
think I kind of just want to be able to

143
00:06:17,759 --> 00:06:23,670
go back and inspect that so what I think

144
00:06:21,569 --> 00:06:26,579
I want to do is kind of say that asset

145
00:06:23,670 --> 00:06:30,900
source files when they get you know kind

146
00:06:26,579 --> 00:06:32,310
of pushed on to the I know what you want

147
00:06:30,899 --> 00:06:35,609
to call it when when an asset source

148
00:06:32,310 --> 00:06:38,280
file when we become aware of it I would

149
00:06:35,610 --> 00:06:41,040
like to sort of create in here a stream

150
00:06:38,279 --> 00:06:43,399
that is for

151
00:06:41,040 --> 00:06:47,939
all of the errors that are gonna be

152
00:06:43,399 --> 00:06:49,469
associated with that source file we'll

153
00:06:47,939 --> 00:06:52,379
see a little bit more about why one do

154
00:06:49,470 --> 00:06:54,360
that when we when we move further down

155
00:06:52,379 --> 00:06:57,300
the pipeline but basically what I want

156
00:06:54,360 --> 00:07:02,340
to be able to do is I want to be able to

157
00:06:57,300 --> 00:07:04,139
tell the user when there is an error I

158
00:07:02,339 --> 00:07:06,750
want to say here's the source files that

159
00:07:04,139 --> 00:07:09,839
you just tried to import and here are

160
00:07:06,750 --> 00:07:12,209
the errors per source file that are

161
00:07:09,839 --> 00:07:14,250
relevant so that you you know the artist

162
00:07:12,209 --> 00:07:17,370
can know that something you know bad

163
00:07:14,250 --> 00:07:20,730
happened or whatever so I'm gonna go

164
00:07:17,370 --> 00:07:22,470
ahead and make one of these a little

165
00:07:20,730 --> 00:07:28,410
earlier on in the pipe and I'm gonna

166
00:07:22,470 --> 00:07:30,480
pass that here so we basically have when

167
00:07:28,410 --> 00:07:34,439
the when the asset source file itself

168
00:07:30,480 --> 00:07:36,180
is operational it'll have an Airstream

169
00:07:34,439 --> 00:07:38,969
and all of the errors that happen on

170
00:07:36,180 --> 00:07:41,870
this file will go into that stream not

171
00:07:38,970 --> 00:07:46,590
some you know not off into the ether

172
00:07:41,870 --> 00:07:48,930
somewhere so you know I guess we'll put

173
00:07:46,589 --> 00:07:52,079
the thing that loads the images out of

174
00:07:48,930 --> 00:07:54,629
the asset file here but for the moment

175
00:07:52,079 --> 00:07:57,439
I'd like to ping-pong back down to where

176
00:07:54,629 --> 00:08:00,750
we create one of these match structures

177
00:07:57,439 --> 00:08:02,430
you can see us making one here what I'd

178
00:08:00,750 --> 00:08:05,939
like to do there is go back to the

179
00:08:02,430 --> 00:08:08,189
stream start of things and kind of take

180
00:08:05,939 --> 00:08:11,759
a look at this I want an on-demand

181
00:08:08,189 --> 00:08:14,879
memory stream for these errors and you

182
00:08:11,759 --> 00:08:19,230
know I don't really care how they're

183
00:08:14,879 --> 00:08:20,730
being allocated because like I said it's

184
00:08:19,230 --> 00:08:22,860
never gonna be free that's only for

185
00:08:20,730 --> 00:08:24,660
development purposes anyway so what I

186
00:08:22,860 --> 00:08:28,259
pretty much want to do is say okay in

187
00:08:24,660 --> 00:08:31,050
the case where we create a new match I

188
00:08:28,259 --> 00:08:33,210
want to take the error stream and I want

189
00:08:31,050 --> 00:08:35,970
to just make that a new stream that can

190
00:08:33,210 --> 00:08:37,950
capture errors using the same memory

191
00:08:35,970 --> 00:08:40,440
that we use to store the permanent

192
00:08:37,950 --> 00:08:42,300
information for the asset store so it

193
00:08:40,440 --> 00:08:43,860
stays around forever we'll always be

194
00:08:42,299 --> 00:08:46,559
able to go back and see all the errors

195
00:08:43,860 --> 00:08:48,389
on a particular loaded thing for this

196
00:08:46,559 --> 00:08:50,250
run it's we're probably not gonna save

197
00:08:48,389 --> 00:08:53,039
them out to disk because we don't care

198
00:08:50,250 --> 00:08:54,929
about them further down the line but you

199
00:08:53,039 --> 00:08:57,509
know for the most part that's

200
00:08:54,929 --> 00:09:00,149
we're gonna do now air is on this stream

201
00:08:57,509 --> 00:09:02,189
there are none we don't capture errors

202
00:09:00,149 --> 00:09:05,039
on the stream itself if that happens

203
00:09:02,190 --> 00:09:06,390
then you're just Sol there isn't a

204
00:09:05,039 --> 00:09:08,490
central air stream but that's how that's

205
00:09:06,389 --> 00:09:14,240
going to go now we could choose to do

206
00:09:08,490 --> 00:09:14,240
this differently if it turns out in in a

207
00:09:14,330 --> 00:09:17,790
when we actually go to play with this

208
00:09:16,379 --> 00:09:20,700
that what we'd rather have is just a

209
00:09:17,789 --> 00:09:22,500
single error stream on the assets we can

210
00:09:20,700 --> 00:09:24,300
just put one of those on the asset

211
00:09:22,500 --> 00:09:26,700
system itself and vector everyone

212
00:09:24,299 --> 00:09:28,049
towards that stream again one of the

213
00:09:26,700 --> 00:09:30,440
really nice things about doing the

214
00:09:28,049 --> 00:09:32,879
stream stuff this way is you can just

215
00:09:30,440 --> 00:09:35,580
Rivera's errors you want to wherever you

216
00:09:32,879 --> 00:09:38,909
want and it doesn't really matter so

217
00:09:35,580 --> 00:09:40,320
we'll have plenty of flexibility to you

218
00:09:38,909 --> 00:09:46,439
know look at that sort of stuff later

219
00:09:40,320 --> 00:09:49,170
right alright so if we go ahead and yeah

220
00:09:46,440 --> 00:09:50,970
and go from here we just need to make

221
00:09:49,169 --> 00:09:53,370
sure we've got what's going on here

222
00:09:50,970 --> 00:09:55,379
buffer we just got to make sure that

223
00:09:53,370 --> 00:09:57,000
we've got our make stream which I said I

224
00:09:55,379 --> 00:09:59,070
wanted but we didn't actually implement

225
00:09:57,000 --> 00:10:01,080
I'm gonna make one of these here what I

226
00:09:59,070 --> 00:10:04,170
can do is also kind of piggyback these

227
00:10:01,080 --> 00:10:05,970
two since they are the same you can kind

228
00:10:04,169 --> 00:10:08,729
of see you have an on-demand memory

229
00:10:05,970 --> 00:10:12,420
stream here and anime extreme here that

230
00:10:08,730 --> 00:10:13,500
they're pretty similar stuff right so we

231
00:10:12,419 --> 00:10:14,669
might be able to kind of share a little

232
00:10:13,500 --> 00:10:17,759
bit there I don't know we'll see you in

233
00:10:14,669 --> 00:10:19,679
a second so let's take a look when we do

234
00:10:17,759 --> 00:10:21,569
this make stream and we're gonna pass it

235
00:10:19,679 --> 00:10:24,299
at buffer this is sort of a read stream

236
00:10:21,570 --> 00:10:26,550
you know we could say make read stream

237
00:10:24,299 --> 00:10:33,088
here because that's really what this is

238
00:10:26,549 --> 00:10:35,429
doing so if I want to do one of those I

239
00:10:33,089 --> 00:10:36,779
know that we we look and we can't kind

240
00:10:35,429 --> 00:10:39,328
of see what's going on here we don't

241
00:10:36,778 --> 00:10:44,820
have memory we do have errors right

242
00:10:39,328 --> 00:10:50,189
there giving us one of those that's what

243
00:10:44,820 --> 00:10:54,930
I should put buffer here and so then

244
00:10:50,190 --> 00:10:56,850
we've got you know contents and the bit

245
00:10:54,929 --> 00:10:58,828
count bit buff under flowed first last

246
00:10:56,850 --> 00:11:00,120
all of this stuff can stay zero it's

247
00:10:58,828 --> 00:11:02,989
really just this that we need to

248
00:11:00,120 --> 00:11:02,990
initialize right

249
00:11:08,120 --> 00:11:11,519
now you note there's something very

250
00:11:10,110 --> 00:11:16,139
subtle going on here and I'll point it

251
00:11:11,519 --> 00:11:17,749
out do you notice how we did not so so

252
00:11:16,139 --> 00:11:20,129
one way you could have done this

253
00:11:17,749 --> 00:11:22,079
rather than having buffer contents in

254
00:11:20,129 --> 00:11:24,778
the stream itself is you could have

255
00:11:22,078 --> 00:11:26,698
exclusively used stream chunks right you

256
00:11:24,778 --> 00:11:28,259
could have had it so that what a stream

257
00:11:26,698 --> 00:11:32,539
does is it always looks as its first

258
00:11:28,259 --> 00:11:37,259
dream stream stream chunk for the data

259
00:11:32,539 --> 00:11:39,599
okay you could have done that what

260
00:11:37,259 --> 00:11:41,999
you'll notice is because we chose to

261
00:11:39,600 --> 00:11:43,829
have the buffer in here and stream

262
00:11:41,999 --> 00:11:45,720
chunks are just new buffers that can be

263
00:11:43,828 --> 00:11:49,620
pulled in that actually leads to a much

264
00:11:45,720 --> 00:11:52,350
more closed way of running the system

265
00:11:49,620 --> 00:11:56,730
which is nice in that you can return a

266
00:11:52,350 --> 00:11:59,670
stream by value and it is correct if we

267
00:11:56,730 --> 00:12:01,649
had to have the stream chunks always

268
00:11:59,669 --> 00:12:03,299
then these pointers would have to be

269
00:12:01,649 --> 00:12:05,789
valid which would mean that we would

270
00:12:03,299 --> 00:12:07,828
have to actually allocate memory in here

271
00:12:05,789 --> 00:12:12,360
to point to something that stores this

272
00:12:07,828 --> 00:12:14,818
contents so having the first buffer that

273
00:12:12,360 --> 00:12:17,879
you're reading from always be inside the

274
00:12:14,818 --> 00:12:20,039
actual handle itself actually allows you

275
00:12:17,879 --> 00:12:21,449
a lot more flexibility with how these

276
00:12:20,039 --> 00:12:23,278
things move around and where they live

277
00:12:21,448 --> 00:12:24,599
because you don't have to allocate

278
00:12:23,278 --> 00:12:27,419
memory you can have them on the stack

279
00:12:24,600 --> 00:12:29,040
you can have them welded into other

280
00:12:27,419 --> 00:12:31,469
structures that have been allocated and

281
00:12:29,039 --> 00:12:34,049
you don't need to allocate another piece

282
00:12:31,470 --> 00:12:35,870
hanging off of it for the chunks in the

283
00:12:34,049 --> 00:12:39,599
case where you don't want a chained

284
00:12:35,870 --> 00:12:43,078
situation so that's pretty nice and it's

285
00:12:39,600 --> 00:12:46,879
just worth noting so let's go ahead and

286
00:12:43,078 --> 00:12:46,878
finish up we were doing there

287
00:12:56,879 --> 00:13:07,240
we call this content stream okay and so

288
00:13:04,629 --> 00:13:08,679
when we call parse P&amp;G now we got to go

289
00:13:07,240 --> 00:13:11,190
back and look I don't even remember what

290
00:13:08,679 --> 00:13:13,359
this thing took so let's take a look

291
00:13:11,190 --> 00:13:14,920
maybe since this thing's only supposed

292
00:13:13,360 --> 00:13:17,080
to have one thing getting called maybe

293
00:13:14,919 --> 00:13:19,240
I'll just loft that up into the H file

294
00:13:17,080 --> 00:13:21,310
so it's easier to read it's that's

295
00:13:19,240 --> 00:13:24,940
really all it's for I'm gonna put that

296
00:13:21,309 --> 00:13:26,259
up here right the info is optional so

297
00:13:24,940 --> 00:13:29,020
maybe I'll just make that optional and

298
00:13:26,259 --> 00:13:38,370
then we're done effectively I don't know

299
00:13:29,019 --> 00:13:38,370
why why this doesn't take a pointer so

300
00:13:45,000 --> 00:13:54,750
there's not really a lot of reason for

301
00:13:48,429 --> 00:14:05,829
it not to - that yeah I'm not sure

302
00:13:54,750 --> 00:14:07,509
excuse me I need tissue I'm not sure I'm

303
00:14:05,830 --> 00:14:09,580
not sure where I Parsa P&amp;G doesn't take

304
00:14:07,509 --> 00:14:13,179
yeah well you know I don't really care I

305
00:14:09,580 --> 00:14:14,800
guess it's fine so parse P&amp;G will go

306
00:14:13,179 --> 00:14:17,829
ahead and read that content stream and

307
00:14:14,799 --> 00:14:19,209
now we've got an image back again all of

308
00:14:17,830 --> 00:14:20,620
this stuff we don't have to worry about

309
00:14:19,210 --> 00:14:21,610
hemorrhaging memory or anything here

310
00:14:20,620 --> 00:14:23,889
because all of this stuff is in

311
00:14:21,610 --> 00:14:25,180
temporary arena that gets cleaned up and

312
00:14:23,889 --> 00:14:27,429
again this is a really nice way to

313
00:14:25,179 --> 00:14:28,659
program again a lot of people always ask

314
00:14:27,429 --> 00:14:31,449
about garbage collection of stuff like

315
00:14:28,659 --> 00:14:33,339
this memory arena's are a really good

316
00:14:31,450 --> 00:14:34,780
way to have basically all the things you

317
00:14:33,340 --> 00:14:36,490
wanted from garbage collection without

318
00:14:34,779 --> 00:14:38,439
all the unpredictability and weirdness a

319
00:14:36,490 --> 00:14:40,629
memory arena you can just pass it down

320
00:14:38,440 --> 00:14:42,280
say do we're all you're working here you

321
00:14:40,629 --> 00:14:43,870
can allocate whatever you want and we're

322
00:14:42,279 --> 00:14:45,490
done it all gets cleaned up right you

323
00:14:43,870 --> 00:14:47,230
don't care about any stuff and you don't

324
00:14:45,490 --> 00:14:48,759
need any complicated garbage collection

325
00:14:47,230 --> 00:14:51,279
analysis to figure out what isn't isn't

326
00:14:48,759 --> 00:14:52,480
used because you know that nothing is so

327
00:14:51,279 --> 00:14:55,000
it's just a really nice way of like

328
00:14:52,480 --> 00:14:57,250
having off sections of memory and saying

329
00:14:55,000 --> 00:14:59,139
look we don't really care about tracking

330
00:14:57,250 --> 00:15:00,700
stuff here we're just gonna remember

331
00:14:59,139 --> 00:15:02,620
everything that was allocated and just

332
00:15:00,700 --> 00:15:05,950
wipe it all away at the end you know I'm

333
00:15:02,620 --> 00:15:07,089
saying so they're just really handy in

334
00:15:05,950 --> 00:15:10,230
there one of the big way

335
00:15:07,089 --> 00:15:13,449
is that you can get effectively the

336
00:15:10,230 --> 00:15:15,220
mental freedom from not having to think

337
00:15:13,448 --> 00:15:17,378
about your memory there's a lot of

338
00:15:15,220 --> 00:15:19,120
techniques like this that you just once

339
00:15:17,379 --> 00:15:20,438
you get used to using them garbage

340
00:15:19,120 --> 00:15:22,870
collection just kind of becomes a

341
00:15:20,438 --> 00:15:24,879
non-issue because you're like well 99%

342
00:15:22,870 --> 00:15:26,919
of the time everything can just happen

343
00:15:24,879 --> 00:15:30,009
in a temporary arena or some permanent

344
00:15:26,919 --> 00:15:32,919
arena and that's it and you don't like

345
00:15:30,009 --> 00:15:34,778
the the there's a style of coding where

346
00:15:32,919 --> 00:15:36,429
everyone has gazillions of crazy

347
00:15:34,778 --> 00:15:38,769
pointers pointing to everything and they

348
00:15:36,429 --> 00:15:40,328
have no idea what's going on and do you

349
00:15:38,769 --> 00:15:41,289
need garbage collection to maybe try

350
00:15:40,328 --> 00:15:43,870
makes a sense of it

351
00:15:41,289 --> 00:15:47,019
probably yeah if you're not coding in

352
00:15:43,870 --> 00:15:49,870
that ridiculous style you know it

353
00:15:47,019 --> 00:15:51,459
quickly becomes sort of a non-issue just

354
00:15:49,870 --> 00:15:53,999
with a few simple tools in memory arena

355
00:15:51,458 --> 00:15:57,518
being one of them there's others so

356
00:15:53,999 --> 00:16:00,759
anyway but that that aside once we have

357
00:15:57,519 --> 00:16:03,578
this image back what I want to do here

358
00:16:00,759 --> 00:16:05,649
is I want to break this image up into

359
00:16:03,578 --> 00:16:08,349
tiles because again for those of you who

360
00:16:05,649 --> 00:16:11,350
maybe haven't been following along the

361
00:16:08,350 --> 00:16:13,629
past couple days of coding we definitely

362
00:16:11,350 --> 00:16:15,249
have a different sort of idea of how

363
00:16:13,629 --> 00:16:18,550
we're importing art assets now because

364
00:16:15,249 --> 00:16:20,499
of the new art we got so we just want to

365
00:16:18,549 --> 00:16:23,289
loop through these tiles these tiles

366
00:16:20,499 --> 00:16:24,819
what you can see is we tried to make

367
00:16:23,289 --> 00:16:27,399
sure that they were nice and evenly

368
00:16:24,818 --> 00:16:29,198
spaced so that we don't have to load a

369
00:16:27,399 --> 00:16:30,698
lot of metadata or anything to figure

370
00:16:29,198 --> 00:16:32,859
out where stuff is just to keep

371
00:16:30,698 --> 00:16:35,828
everything simple so if we come in here

372
00:16:32,860 --> 00:16:40,209
and take a look I'm gonna go ahead and

373
00:16:35,828 --> 00:16:45,028
select one of these as best I can here

374
00:16:40,208 --> 00:16:45,028
let me try and get that fairly exact

375
00:16:50,149 --> 00:16:54,899
okay so you can see there's a pink wreck

376
00:16:52,769 --> 00:16:56,669
down there I'm gonna just do one pixel

377
00:16:54,899 --> 00:17:00,419
short of the next one because this is

378
00:16:56,669 --> 00:17:02,759
like the whole area here so what you can

379
00:17:00,419 --> 00:17:05,399
see about this this rectangle that I've

380
00:17:02,759 --> 00:17:07,890
got selected if I click on it here you

381
00:17:05,400 --> 00:17:13,620
can see that this is if you go out to

382
00:17:07,890 --> 00:17:16,620
the actual rectangle itself like so oh

383
00:17:13,619 --> 00:17:19,079
that's nice Anna did that really good

384
00:17:16,619 --> 00:17:20,489
it's actually a one pixel border around

385
00:17:19,079 --> 00:17:24,349
the whole thing

386
00:17:20,490 --> 00:17:28,019
so you can see there it's a 1024 by 1024

387
00:17:24,349 --> 00:17:31,589
rectangle with a pink border around the

388
00:17:28,019 --> 00:17:33,450
edge of it right so what we should be

389
00:17:31,589 --> 00:17:36,329
able to do is just step through the

390
00:17:33,450 --> 00:17:38,640
image looking at these chunks and the

391
00:17:36,329 --> 00:17:42,000
images themselves when we look at them

392
00:17:38,640 --> 00:17:44,640
should conform you can see 8192 8192

393
00:17:42,000 --> 00:17:49,829
right they should conform to an even

394
00:17:44,640 --> 00:17:53,190
number of these chunks so once we get an

395
00:17:49,829 --> 00:17:58,649
image here we should be able to do sort

396
00:17:53,190 --> 00:18:05,910
of a like X count Y count situation that

397
00:17:58,650 --> 00:18:07,230
we can determine directly from the we

398
00:18:05,910 --> 00:18:11,310
can determine directly from the image

399
00:18:07,230 --> 00:18:13,289
width and height right so what we need

400
00:18:11,309 --> 00:18:16,019
we do need to be a little more careful

401
00:18:13,289 --> 00:18:18,450
so we'll will I just want mention I do

402
00:18:16,019 --> 00:18:21,660
it now but we are gonna have some things

403
00:18:18,450 --> 00:18:24,090
like this that aren't that way so the

404
00:18:21,660 --> 00:18:26,490
title screen and the cutscenes stuff can

405
00:18:24,089 --> 00:18:30,809
go down a separate path that's just for

406
00:18:26,490 --> 00:18:33,120
large arbitrary bitmaps those will not

407
00:18:30,809 --> 00:18:35,250
be our bread and butter but they will

408
00:18:33,119 --> 00:18:39,809
have to be handled this is kind of fun I

409
00:18:35,250 --> 00:18:44,700
like this I like Krampus a lot Krampus

410
00:18:39,809 --> 00:18:46,980
is great my mom one time tried to say

411
00:18:44,700 --> 00:18:48,960
Krampus she wanted to say that she likes

412
00:18:46,980 --> 00:18:51,120
cramp Krampus she thinks it's cool that

413
00:18:48,960 --> 00:18:53,160
Krampus in the game or something and but

414
00:18:51,119 --> 00:18:57,359
she didn't remember what Krampus was so

415
00:18:53,160 --> 00:19:01,230
she said krump as' and like I feel like

416
00:18:57,359 --> 00:19:03,379
we need to put krump 'us in the game as

417
00:19:01,230 --> 00:19:05,390
well I don't know what krump is is

418
00:19:03,380 --> 00:19:08,110
but maybe like I don't know maybe

419
00:19:05,390 --> 00:19:10,370
crumpets is like Krampus is like weird

420
00:19:08,109 --> 00:19:17,469
younger brother or something I don't

421
00:19:10,369 --> 00:19:19,879
know it's it's it's pretty hard to say

422
00:19:17,470 --> 00:19:24,170
yeah I don't know if someone wants to

423
00:19:19,880 --> 00:19:27,400
file a bug report on the handmade hero

424
00:19:24,170 --> 00:19:29,480
github with market as a feature request

425
00:19:27,400 --> 00:19:30,380
that we have crumpets in the game

426
00:19:29,480 --> 00:19:31,730
because we already have one up there

427
00:19:30,380 --> 00:19:35,000
which is like to put a winners don't use

428
00:19:31,730 --> 00:19:38,900
drugs screen like the old 90s arcade

429
00:19:35,000 --> 00:19:41,029
games had so like something like that

430
00:19:38,900 --> 00:19:43,000
another feature request it might be a

431
00:19:41,029 --> 00:19:45,500
good idea to have a crumpet in there

432
00:19:43,000 --> 00:19:48,410
alright so I'm gonna go ahead and say

433
00:19:45,500 --> 00:19:52,640
that we've got a tile dimension here

434
00:19:48,410 --> 00:19:56,570
that's 1024 that way we can change it

435
00:19:52,640 --> 00:19:58,009
three oops time dimension sounds like

436
00:19:56,569 --> 00:20:01,220
something that like Neil deGrasse Tyson

437
00:19:58,009 --> 00:20:04,250
would talk about on a talk show or

438
00:20:01,220 --> 00:20:05,990
something alright so we've got the

439
00:20:04,250 --> 00:20:08,900
account in the Y count and now we want

440
00:20:05,990 --> 00:20:12,349
to go through them and again like I said

441
00:20:08,900 --> 00:20:14,420
we're gonna have to do something other

442
00:20:12,349 --> 00:20:17,689
than this for the other kinds of bitmaps

443
00:20:14,420 --> 00:20:19,460
so this is actually just one type of

444
00:20:17,690 --> 00:20:23,150
thing that we're talking about here so

445
00:20:19,460 --> 00:20:25,340
we'll probably pull this out into a

446
00:20:23,150 --> 00:20:27,560
separate system eventually what I'm

447
00:20:25,339 --> 00:20:33,159
going to do here meat you know we could

448
00:20:27,559 --> 00:20:33,159
do is have a thing here where we say you

449
00:20:36,369 --> 00:20:42,939
know process tiled import or something

450
00:20:44,799 --> 00:20:50,839
you know that sort of thing so we could

451
00:20:48,319 --> 00:20:52,309
do that and we probably do want to do

452
00:20:50,839 --> 00:20:54,769
that actually that so I'm gonna go ahead

453
00:20:52,309 --> 00:20:56,450
and do that and and that way in the

454
00:20:54,769 --> 00:20:59,389
future because right here I'm going to

455
00:20:56,450 --> 00:21:01,549
do is after we you know parse PNG I'm

456
00:20:59,390 --> 00:21:03,290
gonna want to have a thing that's like

457
00:21:01,549 --> 00:21:05,029
if this is going to be tiled

458
00:21:03,289 --> 00:21:10,309
but then process the tiled import

459
00:21:05,029 --> 00:21:13,690
otherwise you know process you know you

460
00:21:10,309 --> 00:21:13,690
know something like that right

461
00:21:15,259 --> 00:21:17,720
so it's going to look something like

462
00:21:16,250 --> 00:21:19,759
that eventually but it's not gonna look

463
00:21:17,720 --> 00:21:21,110
like that just yet so anyway in here

464
00:21:19,759 --> 00:21:24,049
we're gonna take one of these image

465
00:21:21,109 --> 00:21:27,349
trucks and we're gonna process this tile

466
00:21:24,049 --> 00:21:34,539
import we're going to need probably hear

467
00:21:27,349 --> 00:21:39,230
the game assets the assets source file

468
00:21:34,539 --> 00:21:43,059
and there's the image there we've got

469
00:21:39,230 --> 00:21:43,059
pretty much what we need at this point

470
00:21:46,809 --> 00:21:54,079
to know the pixel region of the image

471
00:21:50,240 --> 00:21:56,000
that we're talking about here so we what

472
00:21:54,079 --> 00:21:58,849
we want to do is see if it's empty or

473
00:21:56,000 --> 00:22:02,809
not right we want to basically you know

474
00:21:58,849 --> 00:22:04,549
analyze this thing to figure out whether

475
00:22:02,809 --> 00:22:09,619
this is something we actually want check

476
00:22:04,549 --> 00:22:20,509
or not now what I'm gonna do is I want

477
00:22:09,619 --> 00:22:28,189
to produce a I want to produce a copy of

478
00:22:20,509 --> 00:22:32,420
this image of the tile into a temporary

479
00:22:28,190 --> 00:22:36,850
buffer that I can then use for well

480
00:22:32,420 --> 00:22:41,000
whatever I want to use it for right so

481
00:22:36,849 --> 00:22:42,259
in order to know whether this tile in

482
00:22:41,000 --> 00:22:46,869
order to figure out what I want to do

483
00:22:42,259 --> 00:22:49,180
with this tile I want to make that copy

484
00:22:46,869 --> 00:22:56,359
probably at the same time I'm checking

485
00:22:49,180 --> 00:22:58,390
now there's an there's an issue with

486
00:22:56,359 --> 00:22:58,389
that

487
00:23:05,869 --> 00:23:10,409
there's an issue with that and that is

488
00:23:08,130 --> 00:23:14,040
that if we go look at how the asset

489
00:23:10,410 --> 00:23:20,390
system is storing things so here's the

490
00:23:14,039 --> 00:23:24,539
asset and when we look at there it is

491
00:23:20,390 --> 00:23:27,570
when we look at the asset we've got this

492
00:23:24,539 --> 00:23:30,298
asset memories header that's pointing to

493
00:23:27,569 --> 00:23:35,039
potentially that you see that loaded

494
00:23:30,298 --> 00:23:45,960
bitmap structure right so the loaded

495
00:23:35,039 --> 00:23:48,480
bitmap structure let me just grab that

496
00:23:45,960 --> 00:23:51,090
here so the loaded bitmap structure has

497
00:23:48,480 --> 00:23:52,710
like a pointer to the memory and it's

498
00:23:51,089 --> 00:23:55,798
got you know the information about the

499
00:23:52,710 --> 00:23:59,090
bitmap there that we loaded in so what

500
00:23:55,798 --> 00:24:03,029
we more or less want to do I think is

501
00:23:59,089 --> 00:24:06,990
load you know we want to load into one

502
00:24:03,029 --> 00:24:10,798
of these and we either want to load into

503
00:24:06,990 --> 00:24:13,679
one of these that already exists that

504
00:24:10,798 --> 00:24:16,259
we've got loaded or we want to make a

505
00:24:13,679 --> 00:24:20,519
new one that then will be used as the

506
00:24:16,259 --> 00:24:23,609
loaded one right so I think what we want

507
00:24:20,519 --> 00:24:26,779
to do is first search to see whether we

508
00:24:23,609 --> 00:24:30,178
have a loaded bitmap that should be used

509
00:24:26,779 --> 00:24:33,808
and if we don't have one then we will

510
00:24:30,179 --> 00:24:38,130
make a new one and that new one will be

511
00:24:33,808 --> 00:24:40,769
provisional so this is a little hard to

512
00:24:38,130 --> 00:24:43,290
explain upfront so I'm kind of just

513
00:24:40,769 --> 00:24:45,569
going to type it in and explain it after

514
00:24:43,289 --> 00:24:49,678
the fact so you can sort of see what I

515
00:24:45,569 --> 00:24:52,349
mean but basically the you know the long

516
00:24:49,679 --> 00:24:56,640
and short of it here is I need to take

517
00:24:52,349 --> 00:24:59,969
this asset source file right and I need

518
00:24:56,640 --> 00:25:04,620
to look to see if I've got

519
00:24:59,970 --> 00:25:08,970
where is here I need to look and see if

520
00:25:04,619 --> 00:25:13,229
I've got an asset that backs this source

521
00:25:08,970 --> 00:25:15,809
file yet right so when I'm looping

522
00:25:13,230 --> 00:25:23,160
through my X and my Y count here I'm

523
00:25:15,809 --> 00:25:25,049
gonna look up this X&amp;Y and go from there

524
00:25:23,160 --> 00:25:34,680
now it's also worth remembering here

525
00:25:25,049 --> 00:25:36,829
that these have to be clamped so we

526
00:25:34,680 --> 00:25:59,190
should probably also put in here

527
00:25:36,829 --> 00:26:00,899
something like this something that could

528
00:25:59,190 --> 00:26:02,100
be shown to a programmer so they know

529
00:26:00,900 --> 00:26:04,590
what's going on if an artist

530
00:26:02,099 --> 00:26:07,589
accidentally makes an image that has

531
00:26:04,589 --> 00:26:11,039
more grid squares to it we could say the

532
00:26:07,589 --> 00:26:17,959
Tao exceeds whatever that maximum tile

533
00:26:11,039 --> 00:26:17,960
count is right so something like this

534
00:26:36,299 --> 00:26:41,710
right so this way if you feed in a file

535
00:26:39,099 --> 00:26:48,149
and the file has too many columns

536
00:26:41,710 --> 00:26:48,150
it will air out do the same thing here

537
00:27:03,150 --> 00:27:16,210
and we knew what these are oops right X

538
00:27:10,059 --> 00:27:27,099
count Max and y count max are just the

539
00:27:16,210 --> 00:27:29,500
asset indices counts so you know this

540
00:27:27,099 --> 00:27:30,939
will tell the artist assuming that we

541
00:27:29,500 --> 00:27:34,390
print these on screen which is my

542
00:27:30,940 --> 00:27:36,820
eventual plan if they tried to make a

543
00:27:34,390 --> 00:27:38,320
file and it had you know twelve rows in

544
00:27:36,819 --> 00:27:40,659
it or something we know that we only

545
00:27:38,319 --> 00:27:42,159
support eight at the moment and that's

546
00:27:40,660 --> 00:27:43,690
arbitrary we could change it to whatever

547
00:27:42,160 --> 00:27:46,240
we want but at the moment we don't have

548
00:27:43,690 --> 00:27:48,580
any plans to support tile sheets of that

549
00:27:46,240 --> 00:27:50,650
more than that in them so when we do

550
00:27:48,579 --> 00:27:53,349
this we want to just warn people when

551
00:27:50,650 --> 00:27:55,180
they put in an image it's not gonna work

552
00:27:53,349 --> 00:27:59,859
now when we detect it it's not gonna

553
00:27:55,180 --> 00:28:03,460
work I'm also gonna go ahead and set the

554
00:27:59,859 --> 00:28:05,919
maximum so that we don't like end up

555
00:28:03,460 --> 00:28:07,420
crashing because you know we'd rather

556
00:28:05,920 --> 00:28:09,670
just print out an error and let the

557
00:28:07,420 --> 00:28:11,230
artist fix it then crash the whole game

558
00:28:09,670 --> 00:28:12,880
right and then they don't know what

559
00:28:11,230 --> 00:28:14,589
happened because they can't even see an

560
00:28:12,880 --> 00:28:18,100
error print out because the game crashed

561
00:28:14,589 --> 00:28:19,869
right so we want to do a little bit of

562
00:28:18,099 --> 00:28:21,490
defensive programming there and say look

563
00:28:19,869 --> 00:28:22,929
this file could have anything in it we

564
00:28:21,490 --> 00:28:24,700
don't know so let's go ahead and check

565
00:28:22,930 --> 00:28:27,009
it for air conditions that are might

566
00:28:24,700 --> 00:28:28,569
happen in practice that are likely to

567
00:28:27,009 --> 00:28:30,160
happen in practice so that we can print

568
00:28:28,569 --> 00:28:32,679
out our usable error message for the

569
00:28:30,160 --> 00:28:34,240
person who made the mistake so that they

570
00:28:32,680 --> 00:28:36,850
can fix the mistake rather than just

571
00:28:34,240 --> 00:28:37,710
getting frustrated with it so we have

572
00:28:36,849 --> 00:28:40,048
the

573
00:28:37,710 --> 00:28:42,899
looping over the tiles now so what we

574
00:28:40,048 --> 00:28:44,929
want to do is look at the asset index in

575
00:28:42,898 --> 00:28:48,239
question here so this is going to be

576
00:28:44,929 --> 00:28:49,860
looking at these asset indices and I

577
00:28:48,240 --> 00:28:52,009
might just go ahead and say that I'm

578
00:28:49,859 --> 00:28:54,778
gonna look at the I'm gonna actually

579
00:28:52,009 --> 00:28:59,009
snap an address to it so I can edit it

580
00:28:54,778 --> 00:29:01,710
if I want to because in the case where

581
00:28:59,009 --> 00:29:04,548
it's it where it's zero I'm gonna have

582
00:29:01,710 --> 00:29:07,980
to assign a new asset index in that case

583
00:29:04,548 --> 00:29:10,230
so anyway if we see that there is an

584
00:29:07,980 --> 00:29:12,538
asset index in question then what I want

585
00:29:10,230 --> 00:29:15,509
to do is I want to gather the loaded

586
00:29:12,538 --> 00:29:20,009
bitmap that corresponds to that asset

587
00:29:15,509 --> 00:29:22,519
index right and so the way that I can do

588
00:29:20,009 --> 00:29:25,919
that is by looking up the asset itself

589
00:29:22,519 --> 00:29:28,769
and grabbing its memory header and then

590
00:29:25,919 --> 00:29:30,270
looking at that bitmap there right and

591
00:29:28,769 --> 00:29:34,349
that's a pretty straightforward

592
00:29:30,269 --> 00:29:37,379
operation for us to do we you know we

593
00:29:34,349 --> 00:29:42,509
can load the bitmap in and and and be

594
00:29:37,380 --> 00:29:47,610
happy so to do that I've got to say all

595
00:29:42,509 --> 00:29:51,919
right here's assets and remember we've

596
00:29:47,609 --> 00:29:51,918
got sort of an array right here of them

597
00:29:52,460 --> 00:29:58,429
so grabbing that one out

598
00:30:04,740 --> 00:30:11,259
so grabbing out that particular asset we

599
00:30:08,920 --> 00:30:17,769
can then look to soups you can then look

600
00:30:11,259 --> 00:30:19,390
to see if it has a header or not I guess

601
00:30:17,769 --> 00:30:22,139
we can also look at it state we could

602
00:30:19,390 --> 00:30:26,200
say if the state equals assets state

603
00:30:22,140 --> 00:30:34,950
loaded then we can sort of use the

604
00:30:26,200 --> 00:30:43,289
bitmap that's actually in there right so

605
00:30:34,950 --> 00:30:43,289
looking at this loaded bitmap here oops

606
00:30:44,819 --> 00:30:57,369
this is the loaded bitmap so what I'm

607
00:30:55,539 --> 00:30:59,379
going to do actually I guess I can put

608
00:30:57,369 --> 00:31:03,759
this out here what I'm going to do is

609
00:30:59,380 --> 00:31:05,650
say if we already had it loaded then I'm

610
00:31:03,759 --> 00:31:08,289
just gonna do it I'm just gonna load it

611
00:31:05,650 --> 00:31:12,640
into the place where it was already

612
00:31:08,289 --> 00:31:14,859
loaded right and one of the things

613
00:31:12,640 --> 00:31:16,930
that's true is we're gonna have to deal

614
00:31:14,859 --> 00:31:21,189
with invalidating the texture cache as

615
00:31:16,930 --> 00:31:24,430
well texture cache is the wrong word

616
00:31:21,190 --> 00:31:26,590
invalidating texture memory because if

617
00:31:24,430 --> 00:31:29,620
this thing was loaded it's probably

618
00:31:26,589 --> 00:31:31,299
already been sent down to the GPU and if

619
00:31:29,619 --> 00:31:33,609
it's already been sent down to the GPU

620
00:31:31,299 --> 00:31:38,019
we need to send it down again because

621
00:31:33,609 --> 00:31:41,909
we've we will be replacing this this

622
00:31:38,019 --> 00:31:44,859
piece of information right well we'll be

623
00:31:41,910 --> 00:31:53,440
changing the one that we actually used

624
00:31:44,859 --> 00:31:56,049
in that case now one of the things

625
00:31:53,440 --> 00:31:58,390
that's a little tricky here is that

626
00:31:56,049 --> 00:32:00,220
we're kind of coming into this knowing

627
00:31:58,390 --> 00:32:02,590
that we're going to make another change

628
00:32:00,220 --> 00:32:05,140
which is to change to using texture

629
00:32:02,589 --> 00:32:08,169
arrays now that we have everything at a

630
00:32:05,140 --> 00:32:10,870
similar size so it's a little bit janky

631
00:32:08,170 --> 00:32:13,450
cuz we kind of want to make two changes

632
00:32:10,869 --> 00:32:14,709
at the same time but I don't want to

633
00:32:13,450 --> 00:32:16,779
make those two change at the same time

634
00:32:14,710 --> 00:32:20,259
so because I want to do it

635
00:32:16,779 --> 00:32:23,379
stages especially because it's on

636
00:32:20,259 --> 00:32:24,940
handmade hero in when I'm normally

637
00:32:23,380 --> 00:32:28,090
programming and I don't have to explain

638
00:32:24,940 --> 00:32:29,950
things as I go I will often make a

639
00:32:28,089 --> 00:32:31,179
number of changes at once because I know

640
00:32:29,950 --> 00:32:33,039
how they're all gonna go and I'm

641
00:32:31,180 --> 00:32:37,720
concentrating fully and I'm not talking

642
00:32:33,039 --> 00:32:40,000
the whole time so I tend on handmade

643
00:32:37,720 --> 00:32:42,009
hero to go slower for two reasons one

644
00:32:40,000 --> 00:32:44,799
because I want to show how things are

645
00:32:42,009 --> 00:32:45,970
done in stages but also because it's

646
00:32:44,799 --> 00:32:46,839
much harder to keep everything in your

647
00:32:45,970 --> 00:32:49,150
head when you're talking the whole time

648
00:32:46,839 --> 00:32:52,089
and you have to do it in you know 2 hour

649
00:32:49,150 --> 00:32:54,490
increments over weekends you know weeks

650
00:32:52,089 --> 00:32:58,619
apart and all this stuff I said it's

651
00:32:54,490 --> 00:32:58,620
doing the whole thing in one day so

652
00:32:58,859 --> 00:33:01,899
normally I probably make a few changes

653
00:33:00,670 --> 00:33:03,820
I'm not gonna do it that way what that

654
00:33:01,900 --> 00:33:07,570
means is we're first going to make the

655
00:33:03,819 --> 00:33:09,849
change of loading the things in and then

656
00:33:07,569 --> 00:33:13,450
what we're gonna do is probably wipe out

657
00:33:09,849 --> 00:33:15,939
this section entirely and go to a fixed

658
00:33:13,450 --> 00:33:18,220
buffer set where we just have exactly

659
00:33:15,940 --> 00:33:21,130
what we say here like we've got you know

660
00:33:18,220 --> 00:33:22,870
probably more like this like we've got

661
00:33:21,130 --> 00:33:25,810
some 64 by 64 is that we use for

662
00:33:22,869 --> 00:33:30,819
particles we got 1024 by 1024 as we use

663
00:33:25,809 --> 00:33:33,339
for sprites and we got 2048 by 1024 by

664
00:33:30,819 --> 00:33:40,529
1024 is that we use for cutscenes or

665
00:33:33,339 --> 00:33:44,709
something right so like and that's

666
00:33:40,529 --> 00:33:53,170
roughly what I want to do that reminds

667
00:33:44,710 --> 00:33:55,350
me what reminds me what is the size of

668
00:33:53,170 --> 00:33:55,350
this thing

669
00:33:58,038 --> 00:34:03,538
yeah so what we'll probably do right is

670
00:34:00,869 --> 00:34:05,819
like will resize stuff like this down to

671
00:34:03,538 --> 00:34:07,650
a different resolution right so like you

672
00:34:05,819 --> 00:34:16,319
know will open up title screen or

673
00:34:07,650 --> 00:34:19,260
whatever so this is the original title

674
00:34:16,320 --> 00:34:21,659
screen graphic and what we'll do is

675
00:34:19,260 --> 00:34:26,540
we'll say you know all of this stuff has

676
00:34:21,659 --> 00:34:31,909
to fit into something that's going to be

677
00:34:26,539 --> 00:34:31,909
oops it's not I want to do

678
00:34:37,280 --> 00:34:44,870
right so we'll use that resolution of

679
00:34:40,940 --> 00:34:48,230
the thing and we'll just say that like

680
00:34:44,869 --> 00:34:50,769
all of our cutscenes stuff fits in to

681
00:34:48,230 --> 00:34:53,648
images that work like that

682
00:34:50,769 --> 00:34:57,079
so again it's a bit of a procrustean bed

683
00:34:53,648 --> 00:34:58,759
situation but it simplifies our life and

684
00:34:57,079 --> 00:35:00,529
doesn't really cost us that much at the

685
00:34:58,760 --> 00:35:03,590
end of the day it's pretty easy to fit

686
00:35:00,530 --> 00:35:05,330
our assets into those things so what

687
00:35:03,590 --> 00:35:09,350
we'll do is we'll fit all of the kant's

688
00:35:05,329 --> 00:35:13,549
of the cutscene art into packs like that

689
00:35:09,349 --> 00:35:16,789
and then we'll take those and those can

690
00:35:13,550 --> 00:35:19,910
be you know the highest size texture

691
00:35:16,789 --> 00:35:28,309
array the 1024 by 1024 s will be the

692
00:35:19,909 --> 00:35:31,609
sprites and then the the they'll be one

693
00:35:28,309 --> 00:35:34,759
smaller one for things that are like you

694
00:35:31,610 --> 00:35:37,550
know particle effects and stuff like

695
00:35:34,760 --> 00:35:41,000
that that don't need a big one 1024 by

696
00:35:37,550 --> 00:35:43,940
1024 might be too large so what we might

697
00:35:41,000 --> 00:35:48,260
do is down sample everything by 2 and go

698
00:35:43,940 --> 00:35:50,960
with 512 by 512 it's hard to say if you

699
00:35:48,260 --> 00:35:52,370
take a look at the actual sizes oops I'm

700
00:35:50,960 --> 00:35:55,429
not supposed to use that everyone

701
00:35:52,369 --> 00:35:57,440
chastised me for it if you look at 1024

702
00:35:55,429 --> 00:35:59,329
by 1024 assuming we store them

703
00:35:57,440 --> 00:36:03,320
uncompressed completely so we don't use

704
00:35:59,329 --> 00:36:08,599
Dixie or anything then the size is is 4

705
00:36:03,320 --> 00:36:11,330
megabytes per sprite right so if you

706
00:36:08,599 --> 00:36:16,400
figure that on a higher end card of like

707
00:36:11,329 --> 00:36:18,860
say 4 gigabytes that means that a 4

708
00:36:16,400 --> 00:36:21,940
gigabyte can have a thousand 24 sprites

709
00:36:18,860 --> 00:36:24,710
resident at a time right

710
00:36:21,940 --> 00:36:29,079
there's no way we're gonna have 1,024

711
00:36:24,710 --> 00:36:33,320
sprites on the screen in different ones

712
00:36:29,079 --> 00:36:35,630
that's just not likely right so we

713
00:36:33,320 --> 00:36:37,730
should be fine to use super high res

714
00:36:35,630 --> 00:36:38,570
artwork if we want to even without

715
00:36:37,730 --> 00:36:44,240
compressing it

716
00:36:38,570 --> 00:36:46,220
we're probably fine and so I would

717
00:36:44,239 --> 00:36:48,169
imagine we won't have to down sample the

718
00:36:46,219 --> 00:36:49,759
artwork we can just use it at its native

719
00:36:48,170 --> 00:36:50,480
resolution and that'll also give us some

720
00:36:49,760 --> 00:36:52,340
nice

721
00:36:50,480 --> 00:36:55,579
bonus is like if we want to run at 4k

722
00:36:52,340 --> 00:36:58,250
our art can stand up to that because it

723
00:36:55,579 --> 00:37:01,639
is 1024 by 1024 so even big things will

724
00:36:58,250 --> 00:37:03,469
still look nice and crisp so that's

725
00:37:01,639 --> 00:37:05,539
there okay now what I said isn't quite

726
00:37:03,469 --> 00:37:11,959
right because we'll probably need to

727
00:37:05,539 --> 00:37:13,940
store some Maps so it's really it's

728
00:37:11,960 --> 00:37:16,519
probably more like 500 different sprite

729
00:37:13,940 --> 00:37:18,170
bitmaps that time so you know maybe that

730
00:37:16,519 --> 00:37:20,409
gets up to the point where it's a little

731
00:37:18,170 --> 00:37:25,250
bit too much pressure I don't know

732
00:37:20,409 --> 00:37:29,599
either way we do need to kind of be

733
00:37:25,250 --> 00:37:31,909
aware of that boundary because on lower

734
00:37:29,599 --> 00:37:35,360
end systems for example we would

735
00:37:31,909 --> 00:37:38,960
probably want to have the option of

736
00:37:35,360 --> 00:37:41,360
loading 512 by 512 sprites or even 256

737
00:37:38,960 --> 00:37:42,949
by 256 sprites because if you have a

738
00:37:41,360 --> 00:37:47,510
graphics card that only has one gig of

739
00:37:42,949 --> 00:37:50,119
memory or has 512 Meg's of memory or if

740
00:37:47,510 --> 00:37:51,710
you're running on some kind of a low-end

741
00:37:50,119 --> 00:37:54,829
platform we one try supporting someday

742
00:37:51,710 --> 00:37:56,360
like a Raspberry Pi or something we

743
00:37:54,829 --> 00:37:58,190
don't want to have to have these huge

744
00:37:56,360 --> 00:37:59,840
sprites in there so we do need to sort

745
00:37:58,190 --> 00:38:07,039
of keep that in the back of our minds

746
00:37:59,840 --> 00:38:09,769
that there sort of there's 1024 by 10 to

747
00:38:07,039 --> 00:38:12,590
4 is the largest on the most powerful

748
00:38:09,769 --> 00:38:17,780
machines that's the size we will load

749
00:38:12,590 --> 00:38:20,059
our sprites in at but that's not the

750
00:38:17,780 --> 00:38:23,900
size that they will always necessarily

751
00:38:20,059 --> 00:38:27,259
be if we want to support lower end

752
00:38:23,900 --> 00:38:29,150
configurations of machines and if we

753
00:38:27,260 --> 00:38:31,460
look at the the quality difference

754
00:38:29,150 --> 00:38:33,829
between the two you know I don't it's

755
00:38:31,460 --> 00:38:39,220
not going to be huge if we open up

756
00:38:33,829 --> 00:38:39,219
something here like here's Krampus

757
00:38:47,320 --> 00:38:52,330
so if we take one of these and we look

758
00:38:50,980 --> 00:38:55,300
at it you know you can kind of see what

759
00:38:52,329 --> 00:38:57,549
it looks like here right if I was to

760
00:38:55,300 --> 00:39:01,500
scale this down to what it would be if

761
00:38:57,550 --> 00:39:04,180
it if all the artwork were 512 by 512

762
00:39:01,500 --> 00:39:07,510
you can see what it would look like it's

763
00:39:04,179 --> 00:39:10,449
it's definitely blurrier right but it's

764
00:39:07,510 --> 00:39:12,430
not it still retains the general I mean

765
00:39:10,449 --> 00:39:14,859
you know you're not gonna it doesn't

766
00:39:12,429 --> 00:39:19,480
look all flowering thing on the other

767
00:39:14,860 --> 00:39:22,539
hand if we do go down to 256 by 256 at

768
00:39:19,480 --> 00:39:26,050
that point it might start to get a

769
00:39:22,539 --> 00:39:31,570
little ugly right so that would be that

770
00:39:26,050 --> 00:39:35,680
right and so what you can see there is

771
00:39:31,570 --> 00:39:36,970
as you get down to that size you sort of

772
00:39:35,679 --> 00:39:40,210
start to lose a little bit of the

773
00:39:36,969 --> 00:39:43,209
quality of the line work there so it is

774
00:39:40,210 --> 00:39:47,110
ugly reduces by 26 some of that could be

775
00:39:43,210 --> 00:39:50,380
mitigated by better down sampling you

776
00:39:47,110 --> 00:39:52,180
know better scaling then cubic something

777
00:39:50,380 --> 00:39:53,740
that was more aware of the fact that

778
00:39:52,179 --> 00:39:59,349
it's kind of a line art cartoony style

779
00:39:53,739 --> 00:40:01,029
for example so there's that but also the

780
00:39:59,349 --> 00:40:02,199
other thing you could do is you know if

781
00:40:01,030 --> 00:40:03,640
you really cared about something like

782
00:40:02,199 --> 00:40:06,099
this you could have your artists work at

783
00:40:03,639 --> 00:40:08,589
this resolution originally or touch up

784
00:40:06,099 --> 00:40:10,360
these these themselves to to fix the

785
00:40:08,590 --> 00:40:12,730
liner we're not going to do that because

786
00:40:10,360 --> 00:40:15,070
we don't care about that at all so we

787
00:40:12,730 --> 00:40:17,829
will probably just say 512 by 512 is the

788
00:40:15,070 --> 00:40:20,680
size the sprites are when we down sample

789
00:40:17,829 --> 00:40:23,949
and that gives us four times the number

790
00:40:20,679 --> 00:40:28,449
in memory in any given time so if we

791
00:40:23,949 --> 00:40:31,419
assume a 4 gigabyte graphics card as our

792
00:40:28,449 --> 00:40:35,169
spec you know this game releases I don't

793
00:40:31,420 --> 00:40:37,030
know in 2020 let's say a 4 gigabyte

794
00:40:35,170 --> 00:40:41,260
graphics card is probably going to be

795
00:40:37,030 --> 00:40:43,570
pretty standard at that point but even

796
00:40:41,260 --> 00:40:46,360
if it's not a one gigabyte graphics card

797
00:40:43,570 --> 00:40:48,519
should be pretty safe now it's hard to

798
00:40:46,360 --> 00:40:52,200
say I don't really know what the Steam

799
00:40:48,519 --> 00:40:52,199
Hardware survey says these days

800
00:40:55,079 --> 00:40:58,389
[Music]

801
00:41:02,869 --> 00:41:10,469
marry now but you know just looking at

802
00:41:07,829 --> 00:41:13,170
here right you can kind of see that that

803
00:41:10,469 --> 00:41:16,169
at one gigabyte graphics card even today

804
00:41:13,170 --> 00:41:19,769
is kind of a minute minimum on Steam

805
00:41:16,170 --> 00:41:21,659
like the total number of people who have

806
00:41:19,769 --> 00:41:25,289
a card less than that who are checking

807
00:41:21,659 --> 00:41:31,829
into the steam hardware survey is so low

808
00:41:25,289 --> 00:41:33,869
it's like 5% total right so it seems

809
00:41:31,829 --> 00:41:35,549
safe to say that in another year or two

810
00:41:33,869 --> 00:41:38,039
which we wouldn't be shipping to any

811
00:41:35,550 --> 00:41:41,640
consumer before then it seems pretty

812
00:41:38,039 --> 00:41:45,989
safe to say that we really wouldn't have

813
00:41:41,639 --> 00:41:49,829
to care much about anything below a one

814
00:41:45,989 --> 00:41:53,609
gigabyte graphics card and that should

815
00:41:49,829 --> 00:41:55,829
work just fine for 512 by 512 sprites if

816
00:41:53,610 --> 00:41:59,130
we have a particularly good cache

817
00:41:55,829 --> 00:42:02,519
predictor that may actually even work

818
00:41:59,130 --> 00:42:04,619
fine for 1024 by 1024 sprites depending

819
00:42:02,519 --> 00:42:08,039
on how we choose to do them

820
00:42:04,619 --> 00:42:11,579
and again that's uncompressed right

821
00:42:08,039 --> 00:42:13,349
that's if we don't try to apply DX TC

822
00:42:11,579 --> 00:42:15,960
texture compression to them or something

823
00:42:13,349 --> 00:42:17,130
like that where we would you know be

824
00:42:15,960 --> 00:42:19,050
able to but I don't think we're gonna

825
00:42:17,130 --> 00:42:21,630
have to do that because again if we just

826
00:42:19,050 --> 00:42:25,440
try really hard to do good predictive

827
00:42:21,630 --> 00:42:28,110
streaming we should be able to not even

828
00:42:25,440 --> 00:42:29,670
have to compress these sprites if we do

829
00:42:28,110 --> 00:42:32,130
have to compress these sprites I would

830
00:42:29,670 --> 00:42:34,260
say palletized might be the right way to

831
00:42:32,130 --> 00:42:36,420
go although that does put extra stress

832
00:42:34,260 --> 00:42:38,790
on the shader so sometimes so I don't

833
00:42:36,420 --> 00:42:40,980
know but anyway because palletize would

834
00:42:38,789 --> 00:42:42,539
probably just work whereas DX TC would

835
00:42:40,980 --> 00:42:46,019
introduce some artifacts into these

836
00:42:42,539 --> 00:42:47,759
sprites probably um alright so anyway

837
00:42:46,019 --> 00:42:51,090
just you know keeping all that stuff in

838
00:42:47,760 --> 00:42:53,970
mind primary display resolutions pretty

839
00:42:51,090 --> 00:42:57,570
interesting here no one's at 4k you

840
00:42:53,969 --> 00:42:59,699
notice the 4k revolution has not

841
00:42:57,570 --> 00:43:01,830
happened yet so everyone's got a

842
00:42:59,699 --> 00:43:04,710
gigabyte of graphics but no one's got a

843
00:43:01,829 --> 00:43:07,259
big big desktop resolution a big primary

844
00:43:04,710 --> 00:43:10,320
display resolution it's pretty

845
00:43:07,260 --> 00:43:12,420
interesting looking down these stats is

846
00:43:10,320 --> 00:43:14,789
you know it's pretty interesting

847
00:43:12,420 --> 00:43:19,230
eight gigabytes of memory man there's so

848
00:43:14,789 --> 00:43:22,860
much memory in systems now like it's

849
00:43:19,230 --> 00:43:25,320
just nuts just nuts I love like like

850
00:43:22,860 --> 00:43:27,180
some huge butts over over a third of the

851
00:43:25,320 --> 00:43:29,460
people have more than 12 gigabytes of

852
00:43:27,179 --> 00:43:34,549
memory in their machine there's so much

853
00:43:29,460 --> 00:43:34,550
memory now it's nuts just nuts

854
00:43:34,579 --> 00:43:39,569
this stuff's looking pretty good - sorry

855
00:43:38,010 --> 00:43:42,810
- the people who still have the old AMD

856
00:43:39,570 --> 00:43:44,760
phenom but I'm guessing those just I'm

857
00:43:42,809 --> 00:43:46,679
guessing sse4 is gonna be here to stay

858
00:43:44,760 --> 00:43:50,550
pretty soon so you're just gonna have to

859
00:43:46,679 --> 00:43:52,679
not not use those car those chips

860
00:43:50,550 --> 00:43:55,050
anymore because I mean you're down to 7%

861
00:43:52,679 --> 00:43:56,669
of the people don't have SSE 4.2 it

862
00:43:55,050 --> 00:43:58,830
becomes pretty hard to justify not

863
00:43:56,670 --> 00:44:01,440
moving to that platform at this point I

864
00:43:58,829 --> 00:44:04,889
wish AMD had not been so slow on the

865
00:44:01,440 --> 00:44:06,510
uptake of those anyway those are almost

866
00:44:04,889 --> 00:44:11,809
certainly phenom syn there I would

867
00:44:06,510 --> 00:44:19,740
assume so anyway yeah there we go

868
00:44:11,809 --> 00:44:21,539
whatever such and so forth yeah so all

869
00:44:19,739 --> 00:44:22,949
right let's keep going here so what I

870
00:44:21,539 --> 00:44:25,019
was saying originally is as we go

871
00:44:22,949 --> 00:44:27,119
through these tiles we take a look here

872
00:44:25,019 --> 00:44:29,309
and we look to see whether we've got an

873
00:44:27,119 --> 00:44:30,869
asset index or not if we do have an

874
00:44:29,309 --> 00:44:32,400
asset index we'll try to see whether or

875
00:44:30,869 --> 00:44:35,099
not the thing's loaded and if it is will

876
00:44:32,400 --> 00:44:41,490
use the bitmap that we've already got if

877
00:44:35,099 --> 00:44:44,099
we don't have a bitmap at that point

878
00:44:41,489 --> 00:44:46,679
what I want to do is use the provisional

879
00:44:44,099 --> 00:44:48,900
bitmap so what I want to do here is say

880
00:44:46,679 --> 00:44:52,139
bitmap equals you know provisional

881
00:44:48,900 --> 00:44:54,660
bitmap now what's a provisional bitmap a

882
00:44:52,139 --> 00:44:56,639
provisional bitmap is the bitmap that we

883
00:44:54,659 --> 00:44:57,809
use to load things before we know

884
00:44:56,639 --> 00:44:58,799
whether we're actually going to keep

885
00:44:57,809 --> 00:45:02,400
them or not

886
00:44:58,800 --> 00:45:03,810
right so it's a it's basically just a

887
00:45:02,400 --> 00:45:07,200
chunk of memory that we're not sure

888
00:45:03,809 --> 00:45:09,779
whether we actually need yet but that's

889
00:45:07,199 --> 00:45:12,029
what we want and so I'm gonna do a thing

890
00:45:09,780 --> 00:45:14,100
here that's like a provisional bitmap

891
00:45:12,030 --> 00:45:16,500
equals I don't know something like this

892
00:45:14,099 --> 00:45:21,539
get provisional bitmap and I know that I

893
00:45:16,500 --> 00:45:23,699
need a tile dim by tyldum bitmap for my

894
00:45:21,539 --> 00:45:25,849
use right and so I'm going to get one of

895
00:45:23,699 --> 00:45:25,849
those

896
00:45:26,070 --> 00:45:30,539
and we're gonna this is just sub code

897
00:45:29,190 --> 00:45:33,420
we're gonna see what this is gonna be

898
00:45:30,539 --> 00:45:36,029
about in a second anyway once I have one

899
00:45:33,420 --> 00:45:38,849
of those what I want to do is I want to

900
00:45:36,030 --> 00:45:44,190
move I want I want to move through all

901
00:45:38,849 --> 00:45:49,380
of the pixels in the source and I want

902
00:45:44,190 --> 00:45:53,400
to see I want to do two things

903
00:45:49,380 --> 00:45:54,900
copy it to the provisional bitmap you

904
00:45:53,400 --> 00:46:01,490
know the place where I might actually

905
00:45:54,900 --> 00:46:04,829
want to use it so I want to do that and

906
00:46:01,489 --> 00:46:07,469
at the same time I want to see whether

907
00:46:04,829 --> 00:46:13,860
or not I think that there's anything

908
00:46:07,469 --> 00:46:15,629
actually in this bitmap okay so what we

909
00:46:13,860 --> 00:46:18,630
know is there's a one pixel border

910
00:46:15,630 --> 00:46:24,510
around everything so we want to actually

911
00:46:18,630 --> 00:46:28,170
do this rather than the full size of the

912
00:46:24,510 --> 00:46:30,690
thing the reason for that is actually a

913
00:46:28,170 --> 00:46:32,369
little bit difficult to understand we

914
00:46:30,690 --> 00:46:34,050
covered it a long time ago on handmade

915
00:46:32,369 --> 00:46:37,469
Hiro

916
00:46:34,050 --> 00:46:41,250
but it's actually critical to have a one

917
00:46:37,469 --> 00:46:44,849
pixel wide blank border around all of

918
00:46:41,250 --> 00:46:46,889
our sprites why because we don't want to

919
00:46:44,849 --> 00:46:48,929
rely on any kind of texture board or

920
00:46:46,889 --> 00:46:52,559
hardware or other kinds of features like

921
00:46:48,929 --> 00:46:55,769
that we want to be able to sample from

922
00:46:52,559 --> 00:47:00,360
the edge of the texture and not have

923
00:46:55,769 --> 00:47:02,039
anything be there now I know this sounds

924
00:47:00,360 --> 00:47:04,829
a little confusing let me just restate

925
00:47:02,039 --> 00:47:07,259
why this is the case it's actually

926
00:47:04,829 --> 00:47:10,019
relatively important to do this to be

927
00:47:07,260 --> 00:47:12,540
able to support software rasterizer x'

928
00:47:10,019 --> 00:47:14,940
as well which we do want to do because

929
00:47:12,539 --> 00:47:16,679
we would like again to update our old

930
00:47:14,940 --> 00:47:19,079
software rasterizer to work with our new

931
00:47:16,679 --> 00:47:20,849
system eventually so it's not a

932
00:47:19,079 --> 00:47:22,049
non-issue it's it's something we

933
00:47:20,849 --> 00:47:27,710
actually want to be aware of for

934
00:47:22,050 --> 00:47:27,710
software rasterizer x' as well so

935
00:47:34,409 --> 00:47:40,089
so what we want to say about texture

936
00:47:36,849 --> 00:47:44,049
borders is just that look let's suppose

937
00:47:40,090 --> 00:47:45,850
I've got an image and you know here's

938
00:47:44,050 --> 00:47:49,150
the image that we're talking about it's

939
00:47:45,849 --> 00:47:56,230
a four by four right and it goes all the

940
00:47:49,150 --> 00:48:02,619
way to the border okay so that's just a

941
00:47:56,230 --> 00:48:06,030
little squiggle well we want sub-pixel

942
00:48:02,619 --> 00:48:09,549
accurate rendering and anti-aliasing on

943
00:48:06,030 --> 00:48:11,200
all of our rendering work that's just

944
00:48:09,550 --> 00:48:12,789
something we set out to do with the

945
00:48:11,199 --> 00:48:16,449
beginning it's much more high-quality it

946
00:48:12,789 --> 00:48:20,380
looks much better than crispy nasty

947
00:48:16,449 --> 00:48:25,619
pixel garbage so what we want to be able

948
00:48:20,380 --> 00:48:35,380
to do is stuff like say okay this sprite

949
00:48:25,619 --> 00:48:38,739
lands at a boundary that's not right on

950
00:48:35,380 --> 00:48:45,880
any of these pixels so maybe you know it

951
00:48:38,739 --> 00:48:50,109
looks like this okay so what that means

952
00:48:45,880 --> 00:48:53,140
is this needs to be spread out among

953
00:48:50,110 --> 00:48:55,480
those four pixels so each of these

954
00:48:53,139 --> 00:48:59,500
pixels gets a little bit of a

955
00:48:55,480 --> 00:49:02,679
contribution from this pixel right makes

956
00:48:59,500 --> 00:49:03,909
sense and how do we do that well the way

957
00:49:02,679 --> 00:49:07,149
that we do that because remember we only

958
00:49:03,909 --> 00:49:10,569
want to fill each pixel once so when we

959
00:49:07,150 --> 00:49:13,480
go to draw this pixel what do we do well

960
00:49:10,570 --> 00:49:16,300
we sample where the center of that pixel

961
00:49:13,480 --> 00:49:18,610
would be right and we buy a linear

962
00:49:16,300 --> 00:49:20,590
filter between the colors that we know

963
00:49:18,610 --> 00:49:24,450
are in the texture to produce the

964
00:49:20,590 --> 00:49:27,850
correct color for that pixel right right

965
00:49:24,449 --> 00:49:31,899
that's how we get sub pixel movement of

966
00:49:27,849 --> 00:49:33,279
a sprite through a pixel grid this is

967
00:49:31,900 --> 00:49:35,980
all old news we've done this animator

968
00:49:33,280 --> 00:49:39,670
before I'm just tryna fresher memory but

969
00:49:35,980 --> 00:49:42,340
what do we do for this pixel well for

970
00:49:39,670 --> 00:49:44,210
this pixel we need to sample this

971
00:49:42,340 --> 00:49:46,700
location and the

972
00:49:44,210 --> 00:49:49,909
problem with this location is that it

973
00:49:46,699 --> 00:49:52,489
doesn't have any information about what

974
00:49:49,909 --> 00:49:55,940
exists out here because it is

975
00:49:52,489 --> 00:49:59,199
fundamentally outside the texture now

976
00:49:55,940 --> 00:50:01,909
what we want to do is support clamping

977
00:49:59,199 --> 00:50:04,129
we want to be able to support the

978
00:50:01,909 --> 00:50:05,899
texture mode that just says if you were

979
00:50:04,130 --> 00:50:07,820
to sample outside the texture just

980
00:50:05,900 --> 00:50:10,490
sample the thing that's inside the

981
00:50:07,820 --> 00:50:11,838
texture closest to you because that's

982
00:50:10,489 --> 00:50:13,429
the most efficient thing for us to

983
00:50:11,838 --> 00:50:15,139
implement the software under it's also

984
00:50:13,429 --> 00:50:16,879
something that's available on all

985
00:50:15,139 --> 00:50:18,980
hardware without any additional

986
00:50:16,880 --> 00:50:24,050
operations you can just say clamp and

987
00:50:18,980 --> 00:50:26,329
you get clamping well we can't do that

988
00:50:24,050 --> 00:50:31,839
here we would have to use what's called

989
00:50:26,329 --> 00:50:34,429
a texture border which is additional

990
00:50:31,838 --> 00:50:36,679
texture of order color so actually it's

991
00:50:34,429 --> 00:50:37,759
called sometimes you can do this thing

992
00:50:36,679 --> 00:50:39,169
called textured where it was separate

993
00:50:37,760 --> 00:50:40,460
text where it colors what we need where

994
00:50:39,170 --> 00:50:41,599
we set the texture for closure zero zero

995
00:50:40,460 --> 00:50:43,820
says if you see a play outside the

996
00:50:41,599 --> 00:50:46,369
texture use this color instead that's an

997
00:50:43,820 --> 00:50:50,420
additional operation we don't want to do

998
00:50:46,369 --> 00:50:52,369
right so by creating all of our sprites

999
00:50:50,420 --> 00:50:59,829
such that there's a one pixel border

1000
00:50:52,369 --> 00:50:59,829
around them that's no good

1001
00:51:01,449 --> 00:51:06,348
so we just say look if it's a four by

1002
00:51:04,010 --> 00:51:08,480
four that means sprites are two by two

1003
00:51:06,349 --> 00:51:10,280
effectively right now see we're not

1004
00:51:08,480 --> 00:51:14,289
gonna do that it's 1024 by 1024 so

1005
00:51:10,280 --> 00:51:17,390
really they're all 1022 by 1022 right

1006
00:51:14,289 --> 00:51:18,980
all of these have to be left blank and

1007
00:51:17,389 --> 00:51:23,210
the reason that they have to be left

1008
00:51:18,980 --> 00:51:26,358
blank is because they need to be able to

1009
00:51:23,210 --> 00:51:31,929
sample in between these two to get a

1010
00:51:26,358 --> 00:51:31,929
clean result that's just how it goes

1011
00:51:32,800 --> 00:51:38,839
are there problems with this approach

1012
00:51:35,889 --> 00:51:40,929
yes what is the problem of this approach

1013
00:51:38,838 --> 00:51:45,289
mipmapping

1014
00:51:40,929 --> 00:51:50,049
and this is where we start to get into a

1015
00:51:45,289 --> 00:51:50,050
whole big can of worms that's

1016
00:51:53,300 --> 00:51:58,400
I don't really want to cover today

1017
00:51:55,519 --> 00:52:05,960
because it's not super relevant but

1018
00:51:58,400 --> 00:52:08,180
suffice to say if you really want to do

1019
00:52:05,960 --> 00:52:10,190
this stuff accurately you almost need to

1020
00:52:08,179 --> 00:52:12,799
do your own texture sampling in the

1021
00:52:10,190 --> 00:52:16,039
pixel shader because one of the really

1022
00:52:12,800 --> 00:52:18,700
big mistakes that was made when people

1023
00:52:16,039 --> 00:52:23,230
originally designed graphics hardware

1024
00:52:18,699 --> 00:52:26,210
was they designed mipmap sampling wrong

1025
00:52:23,230 --> 00:52:28,809
I hope that's not a controversial

1026
00:52:26,210 --> 00:52:34,070
statement I don't think I'm stating it

1027
00:52:28,809 --> 00:52:38,170
controversially but basically what

1028
00:52:34,070 --> 00:52:42,500
happened is when they created mipmapping

1029
00:52:38,170 --> 00:52:45,650
instead of correctly identifying the

1030
00:52:42,500 --> 00:52:49,119
fact that textures should be sampled

1031
00:52:45,650 --> 00:52:52,849
from the half pixel boundary at 0-0

1032
00:52:49,119 --> 00:52:56,029
they made 0 0 B that outer corners of

1033
00:52:52,849 --> 00:52:59,839
the texture the result of this is that

1034
00:52:56,030 --> 00:53:04,220
mipmapping never properly works for

1035
00:52:59,840 --> 00:53:06,110
images it's always wrong and the degree

1036
00:53:04,219 --> 00:53:08,929
to which it's wrong has to do with how

1037
00:53:06,110 --> 00:53:10,670
many MIT maps down you've gone this

1038
00:53:08,929 --> 00:53:13,639
manifests itself in a lot of really

1039
00:53:10,670 --> 00:53:15,769
serious problems for when you want to

1040
00:53:13,639 --> 00:53:17,210
put tiles next to each other that are

1041
00:53:15,769 --> 00:53:19,610
supposed to be continuous stuff like

1042
00:53:17,210 --> 00:53:26,510
this there's a lot of really bad errors

1043
00:53:19,610 --> 00:53:28,610
that therefore occur I and yeah I don't

1044
00:53:26,510 --> 00:53:30,260
know any other way to say other than MIT

1045
00:53:28,610 --> 00:53:32,210
bamming hardware was built incorrectly

1046
00:53:30,260 --> 00:53:34,940
it's always been wrong it's wrong still

1047
00:53:32,210 --> 00:53:38,960
today so if you actually want to support

1048
00:53:34,940 --> 00:53:41,360
the correct movement exactly right

1049
00:53:38,960 --> 00:53:45,500
with MIT Maps you actually have to do

1050
00:53:41,360 --> 00:53:48,170
your own texture your own texture

1051
00:53:45,500 --> 00:53:49,940
filtering and your own pixel your own

1052
00:53:48,170 --> 00:53:52,820
texture sampling inside the shader and

1053
00:53:49,940 --> 00:53:54,530
there's no two ways around that what we

1054
00:53:52,820 --> 00:53:59,390
will do on handmade hero for that I'm

1055
00:53:54,530 --> 00:54:04,280
not sure I don't know that we really

1056
00:53:59,389 --> 00:54:05,929
want to try to do that I think handmade

1057
00:54:04,280 --> 00:54:06,420
hero it's perfectly reasonable trade

1058
00:54:05,929 --> 00:54:08,269
I'll just say

1059
00:54:06,420 --> 00:54:13,559
we're just not gonna go down that road

1060
00:54:08,269 --> 00:54:17,219
but it's worth noting that you need to

1061
00:54:13,559 --> 00:54:21,900
do that now we can take another step in

1062
00:54:17,219 --> 00:54:24,239
handmade hero that would actually create

1063
00:54:21,900 --> 00:54:25,700
a circumstance where we thought we don't

1064
00:54:24,239 --> 00:54:29,548
have to worry about that as much and

1065
00:54:25,699 --> 00:54:32,608
that is border thickening what you do

1066
00:54:29,548 --> 00:54:35,460
there is you say all right since we know

1067
00:54:32,608 --> 00:54:40,048
that we're probably going to only care

1068
00:54:35,460 --> 00:54:42,659
about 128 by 128 to v6 by 2006 512 by

1069
00:54:40,048 --> 00:54:44,818
512 and 1024 by 2024 but we're never

1070
00:54:42,659 --> 00:54:48,690
gonna shrink shrink these things down

1071
00:54:44,818 --> 00:54:53,849
really to 64 by 64 what you can do is

1072
00:54:48,690 --> 00:54:59,039
leave a border that is that thick around

1073
00:54:53,849 --> 00:55:03,780
the whole image right so for example if

1074
00:54:59,039 --> 00:55:07,469
you go into if you go into and you

1075
00:55:03,780 --> 00:55:17,010
look at what it's and you look at what

1076
00:55:07,469 --> 00:55:19,608
that would imply here actually that's

1077
00:55:17,010 --> 00:55:19,609
not what I want

1078
00:55:24,510 --> 00:55:29,160
so if we were to take Anna's reference

1079
00:55:26,400 --> 00:55:31,980
sheet here and take a look at what this

1080
00:55:29,159 --> 00:55:35,489
would actually imply so I'm going to go

1081
00:55:31,980 --> 00:55:43,858
ahead and just make a little selection

1082
00:55:35,489 --> 00:55:49,250
here so if I pull this out to encompass

1083
00:55:43,858 --> 00:55:49,250
the entirety of one in sprite cell

1084
00:55:58,719 --> 00:56:05,769
so if you take a look at one entire

1085
00:56:01,630 --> 00:56:09,039
sprite cell this is a 1024 by 1024 you

1086
00:56:05,769 --> 00:56:10,690
can see a rectangle said down there so

1087
00:56:09,039 --> 00:56:14,139
if you were to look at one of these and

1088
00:56:10,690 --> 00:56:18,608
I was to read out the entire area of it

1089
00:56:14,139 --> 00:56:23,588
right and then what I did is I pulled

1090
00:56:18,608 --> 00:56:32,190
this down so that we actually had an 8

1091
00:56:23,588 --> 00:56:32,190
pixel wide border sorry

1092
00:56:46,440 --> 00:56:49,068
oops

1093
00:57:08,650 --> 00:57:19,130
okay and then we just said all right

1094
00:57:14,000 --> 00:57:22,130
there's the actual space of the image so

1095
00:57:19,130 --> 00:57:28,039
one thing we could do is just say let's

1096
00:57:22,130 --> 00:57:30,079
leave that much right what will then

1097
00:57:28,039 --> 00:57:33,739
happen is there's an 8 pixel blank

1098
00:57:30,079 --> 00:57:36,590
border at 1024 by 1024 there's a 4 pixel

1099
00:57:33,739 --> 00:57:40,399
blank border at 512 by 512 there's a 2

1100
00:57:36,590 --> 00:57:43,970
pixel wide border at 256 by 26 and a 1

1101
00:57:40,400 --> 00:57:50,210
pixel wide border at 128 by 128 so only

1102
00:57:43,969 --> 00:57:52,819
when you mipmap down to 64 by 64 which

1103
00:57:50,210 --> 00:57:56,960
is getting pretty darn tiny will you

1104
00:57:52,820 --> 00:57:59,480
actually end up with a sampling problem

1105
00:57:56,960 --> 00:58:07,429
if that makes sense

1106
00:57:59,480 --> 00:58:13,480
so we could ask Anna to do that if we

1107
00:58:07,429 --> 00:58:13,480
take a look at the way these actually

1108
00:58:16,059 --> 00:58:26,949
actually look here

1109
00:58:18,469 --> 00:58:30,519
not sure how hard that would be to do so

1110
00:58:26,949 --> 00:58:34,609
you know a lot of them just already are

1111
00:58:30,519 --> 00:58:40,190
you know so what we could do is just

1112
00:58:34,610 --> 00:58:46,940
like print a warning you know about it

1113
00:58:40,190 --> 00:58:48,349
if it's if it's inside the borders on so

1114
00:58:46,940 --> 00:58:50,210
hopefully that makes some sense to you I

1115
00:58:48,349 --> 00:58:52,039
am basically what I'm saying here is

1116
00:58:50,210 --> 00:58:56,840
like look if we don't want to tackle the

1117
00:58:52,039 --> 00:58:58,579
whole MIT map problem then what we could

1118
00:58:56,840 --> 00:59:02,980
say is just 8 pixel wide borders on the

1119
00:58:58,579 --> 00:59:02,980
input and we go from there

1120
00:59:05,608 --> 00:59:16,049
so yeah that's that's that's all there

1121
00:59:11,670 --> 00:59:17,820
is to say about that I so I'm just gonna

1122
00:59:16,050 --> 00:59:21,530
go ahead and say let's warned on that so

1123
00:59:17,820 --> 00:59:25,260
if we see anything in the in that apron

1124
00:59:21,530 --> 00:59:26,640
we're gonna go ahead and warn and and

1125
00:59:25,260 --> 00:59:28,440
now I think about it yeah like let's

1126
00:59:26,639 --> 00:59:30,569
just go ahead and yeah let's go into

1127
00:59:28,440 --> 00:59:34,130
some of that so what we could do is say

1128
00:59:30,570 --> 00:59:36,650
look we're gonna copy the whole thing

1129
00:59:34,130 --> 00:59:39,570
but if we see anything in that apron

1130
00:59:36,650 --> 00:59:41,579
we're gonna we're gonna warn about it

1131
00:59:39,570 --> 00:59:45,300
and go from there

1132
00:59:41,579 --> 00:59:47,430
now you know one thing that I guess I'm

1133
00:59:45,300 --> 00:59:48,660
not sure about is you know we could also

1134
00:59:47,429 --> 00:59:53,460
store these things a little more

1135
00:59:48,659 --> 00:59:58,230
minimally when we actually put one of

1136
00:59:53,460 --> 01:00:00,750
these we actually put one of these

1137
00:59:58,230 --> 01:00:03,599
bitmaps in there I could actually just

1138
01:00:00,750 --> 01:00:04,980
sort of scan for sizes there's a lot of

1139
01:00:03,599 --> 01:00:06,210
we got a lot of stuff we can decide to

1140
01:00:04,980 --> 01:00:08,639
do here I'm not sure which ones we want

1141
01:00:06,210 --> 01:00:11,159
to do but anyway we want to take a look

1142
01:00:08,639 --> 01:00:15,059
and see you know if a source if the

1143
01:00:11,159 --> 01:00:17,519
source has an alpha value that's what we

1144
01:00:15,059 --> 01:00:19,259
want to know so you want to take a look

1145
01:00:17,519 --> 01:00:21,210
at something and say like okay you know

1146
01:00:19,260 --> 01:00:24,300
there's a source that we read in from

1147
01:00:21,210 --> 01:00:26,818
somewhere like source pixel we want to

1148
01:00:24,300 --> 01:00:30,150
take a look and see if the source pixels

1149
01:00:26,818 --> 01:00:34,588
alpha channel has something in it so

1150
01:00:30,150 --> 01:00:36,510
basically like this I guess the other

1151
01:00:34,588 --> 01:00:38,429
thing we could do is shift it down but

1152
01:00:36,510 --> 01:00:41,790
we just want to see if the source pixel

1153
01:00:38,429 --> 01:00:45,029
has something in it that we actually

1154
01:00:41,789 --> 01:00:49,289
want to read and if it does we want to

1155
01:00:45,030 --> 01:00:53,550
set all of the you know all of the

1156
01:00:49,289 --> 01:00:55,170
different borders of the image should

1157
01:00:53,550 --> 01:00:59,039
shrink tear so we can sort of figure out

1158
01:00:55,170 --> 01:01:01,970
like what the region is I'm going to

1159
01:00:59,039 --> 01:01:01,969
create a thing here for that

1160
01:01:04,429 --> 01:01:19,159
do we have a kind of rectangles we have

1161
01:01:14,719 --> 01:01:19,159
so we have floating-point rectangles

1162
01:01:23,800 --> 01:01:34,860
I feel like that's probably fine hard to

1163
01:01:31,420 --> 01:01:34,860
say well alright let's do it this way so

1164
01:01:39,480 --> 01:01:47,650
what I can do here is say look we've got

1165
01:01:42,369 --> 01:01:51,940
some some bounds every time we see a

1166
01:01:47,650 --> 01:01:54,460
source pixel you know in here we're

1167
01:01:51,940 --> 01:01:59,920
gonna say that the min x equals the

1168
01:01:54,460 --> 01:02:03,929
minimum of the min X and X the max X

1169
01:01:59,920 --> 01:02:07,000
equals the maximum all right if you want

1170
01:02:03,929 --> 01:02:11,109
no we want that yeah so we basically

1171
01:02:07,000 --> 01:02:19,179
expand you know our notion of what's

1172
01:02:11,110 --> 01:02:20,470
enclosed based on what we see so if we

1173
01:02:19,179 --> 01:02:22,599
read all the source pixels in this will

1174
01:02:20,469 --> 01:02:25,059
tell us the bounds of the actual image

1175
01:02:22,599 --> 01:02:27,039
and then what we can do is when we're

1176
01:02:25,059 --> 01:02:28,840
done with that particular tile we can

1177
01:02:27,039 --> 01:02:30,880
now see whether there was anything in it

1178
01:02:28,840 --> 01:02:34,450
so basically like if min X is not equal

1179
01:02:30,880 --> 01:02:36,430
to you 32 max right or more specifically

1180
01:02:34,449 --> 01:02:40,358
what we could say if min X is greater

1181
01:02:36,429 --> 01:02:44,589
than equal to max X oops last we go to

1182
01:02:40,358 --> 01:02:52,900
right as long as there was something in

1183
01:02:44,590 --> 01:02:53,230
the image then we'll will do something

1184
01:02:52,900 --> 01:02:56,170
with it

1185
01:02:53,230 --> 01:02:58,690
right so if there was something in it

1186
01:02:56,170 --> 01:03:00,460
then what we want to do is we want to

1187
01:02:58,690 --> 01:03:04,210
issue errors if you're in that pixel

1188
01:03:00,460 --> 01:03:07,210
border so if the main X is less than or

1189
01:03:04,210 --> 01:03:13,960
equal to you know border dimension let's

1190
01:03:07,210 --> 01:03:16,929
say I guess I want less than or the max

1191
01:03:13,960 --> 01:03:22,710
X is greater than or equal to the tyldum

1192
01:03:16,929 --> 01:03:22,710
minor this - the border dimension

1193
01:03:29,798 --> 01:03:36,768
so in other words like if a tile Dems if

1194
01:03:33,108 --> 01:03:39,828
the tile dim is 1024 and I want an 8

1195
01:03:36,768 --> 01:03:47,149
pixel wide border around it then I want

1196
01:03:39,829 --> 01:03:49,430
to know if my my max Y is gets hit on

1197
01:03:47,150 --> 01:03:56,480
that gets hit directly on that value

1198
01:03:49,429 --> 01:03:59,889
right of of 1024 minus 8 or 10 16 right

1199
01:03:56,480 --> 01:04:04,338
I want to know if I'm on there over it

1200
01:03:59,889 --> 01:04:08,000
and and similarly I want to know if I if

1201
01:04:04,338 --> 01:04:11,568
I've gone below 8 because 8 itself would

1202
01:04:08,000 --> 01:04:15,500
be fine but 7 through 0 are not fine on

1203
01:04:11,568 --> 01:04:17,929
the other ones right so when we pass in

1204
01:04:15,500 --> 01:04:19,639
here the tile dim we also know what the

1205
01:04:17,929 --> 01:04:25,038
border Jim is and maybe the border dim

1206
01:04:19,639 --> 01:04:27,798
is 8 and here we can sort of say if we

1207
01:04:25,039 --> 01:04:30,589
see one of these we can print it out now

1208
01:04:27,798 --> 01:04:34,480
as ownerís is this is going to be I

1209
01:04:30,588 --> 01:04:38,078
guess really what I should do is specify

1210
01:04:34,480 --> 01:04:40,608
specifically which ones are in and out

1211
01:04:38,079 --> 01:04:42,470
laborious ly like each individual one

1212
01:04:40,608 --> 01:04:46,369
with a different error message just so

1213
01:04:42,469 --> 01:04:47,838
that the artist can tell if they get

1214
01:04:46,369 --> 01:04:56,298
used to these error messages they can

1215
01:04:47,838 --> 01:05:00,369
actually know what exactly to do so what

1216
01:04:56,298 --> 01:05:00,369
I could say here is like tile

1217
01:05:20,139 --> 01:05:39,578
something like this you know I'm Sam

1218
01:05:40,699 --> 01:05:44,480
and I guess what I could do to make this

1219
01:05:42,199 --> 01:06:05,088
a little bit more straightforward is

1220
01:05:44,480 --> 01:06:06,139
maybe something like this well but

1221
01:06:05,088 --> 01:06:10,578
that's not gonna work because I want to

1222
01:06:06,139 --> 01:06:12,019
print out each individual one so yeah I

1223
01:06:10,579 --> 01:06:13,278
think I'm just gonna leave it this way I

1224
01:06:12,019 --> 01:06:14,509
don't think there's gonna be I mean I

1225
01:06:13,278 --> 01:06:15,528
could there's some other ways I could

1226
01:06:14,510 --> 01:06:18,579
write it but I think that's going to be

1227
01:06:15,528 --> 01:06:18,579
actually the easiest one

1228
01:06:32,980 --> 01:06:38,360
yeah

1229
01:06:35,599 --> 01:06:39,949
and these are top down because pngs are

1230
01:06:38,360 --> 01:06:49,910
top down right so we're looking at it

1231
01:06:39,949 --> 01:06:52,159
from the top down I don't and I think

1232
01:06:49,909 --> 01:06:53,899
the artist wants to thing from the top

1233
01:06:52,159 --> 01:06:55,789
down too so this is probably the right

1234
01:06:53,900 --> 01:06:57,289
way to report it right if we're gonna

1235
01:06:55,789 --> 01:07:00,500
flip the image you're gonna flip it

1236
01:06:57,289 --> 01:07:02,809
later into like an OpenGL texture style

1237
01:07:00,500 --> 01:07:05,719
or something like that but I think

1238
01:07:02,809 --> 01:07:08,329
that's what we want to do and we can

1239
01:07:05,719 --> 01:07:20,449
probably say here that this for this is

1240
01:07:08,329 --> 01:07:22,730
also like so what can pass the border

1241
01:07:20,449 --> 01:07:25,339
dimension in so in case we changed that

1242
01:07:22,730 --> 01:07:30,650
it won't say 8 pixels and actually mean

1243
01:07:25,340 --> 01:07:31,940
16 or 4 or something all right so when

1244
01:07:30,650 --> 01:07:34,400
we read this thing in now we've got a

1245
01:07:31,940 --> 01:07:36,050
way to warn if it if it goes into the

1246
01:07:34,400 --> 01:07:38,570
Porter area which isn't technically a

1247
01:07:36,050 --> 01:07:40,550
problem like if the game was so run just

1248
01:07:38,570 --> 01:07:43,430
fine just there might be some anti

1249
01:07:40,550 --> 01:07:47,269
aliasing artifacts so it doesn't it like

1250
01:07:43,429 --> 01:07:49,579
has a little weird fringe like an

1251
01:07:47,269 --> 01:07:53,090
artifact that you'll see when it nipped

1252
01:07:49,579 --> 01:07:54,619
maps down so a 1 pixel border is really

1253
01:07:53,090 --> 01:07:56,510
all that's necessary for the highest

1254
01:07:54,619 --> 01:07:59,869
level of resolution but as you mipmap

1255
01:07:56,510 --> 01:08:02,780
further down you'll get more and more

1256
01:07:59,869 --> 01:08:05,809
problems so if we take a look here we

1257
01:08:02,780 --> 01:08:08,269
loop through the X you know XY index

1258
01:08:05,809 --> 01:08:10,849
stuff we go through looking for bitmaps

1259
01:08:08,269 --> 01:08:14,269
when we find one now we're gonna copy

1260
01:08:10,849 --> 01:08:15,739
into that or we'll see what we'll do in

1261
01:08:14,269 --> 01:08:19,489
a little bit but when we grab one of

1262
01:08:15,739 --> 01:08:21,229
these then once we figure out the

1263
01:08:19,489 --> 01:08:22,699
borders of the thing that's are actually

1264
01:08:21,229 --> 01:08:25,129
in question we know whether we need to

1265
01:08:22,699 --> 01:08:27,500
retire it or not and that's when we

1266
01:08:25,130 --> 01:08:32,409
would go ahead and write it back into an

1267
01:08:27,500 --> 01:08:34,670
asset pack file or who knows what right

1268
01:08:32,409 --> 01:08:37,010
so let's go ahead and start implementing

1269
01:08:34,670 --> 01:08:42,440
that code path what I want to do here is

1270
01:08:37,010 --> 01:08:44,079
create a death pixel pointer in a source

1271
01:08:42,439 --> 01:08:45,759
row pointer

1272
01:08:44,079 --> 01:08:48,850
the reason I have to do these two

1273
01:08:45,760 --> 01:08:50,789
separately is desk pixels we know that

1274
01:08:48,850 --> 01:08:57,539
we're gonna produce optimally packed

1275
01:08:50,789 --> 01:08:59,829
stuff for our file that we're saving and

1276
01:08:57,539 --> 01:09:01,269
this is where I was sort of saying we

1277
01:08:59,829 --> 01:09:06,489
kind of get into a situation where I

1278
01:09:01,270 --> 01:09:09,160
don't know how we want to how we want to

1279
01:09:06,489 --> 01:09:11,199
deal with this for fast for the fast

1280
01:09:09,159 --> 01:09:15,609
development purposes I think what we

1281
01:09:11,199 --> 01:09:18,189
want to do is we just want to store

1282
01:09:15,609 --> 01:09:20,729
everything as 1024 by 1024 is back the

1283
01:09:18,189 --> 01:09:23,619
pack files that can just be overwritten

1284
01:09:20,729 --> 01:09:26,019
but then eventually I think what we're

1285
01:09:23,619 --> 01:09:27,369
gonna want is we're gonna want a thing

1286
01:09:26,020 --> 01:09:31,600
that goes through and compresses and

1287
01:09:27,369 --> 01:09:34,779
just takes the min/max of the thing and

1288
01:09:31,600 --> 01:09:38,590
shrinks it down because we don't really

1289
01:09:34,779 --> 01:09:44,349
need to store all the empty space it's

1290
01:09:38,590 --> 01:09:46,690
just not necessary so we can probably do

1291
01:09:44,350 --> 01:09:48,940
something like that eventually I just

1292
01:09:46,689 --> 01:09:51,909
don't know that we want to do it quite

1293
01:09:48,939 --> 01:09:54,909
yet because if we do it then we have

1294
01:09:51,909 --> 01:09:56,619
trouble replacing assets and we have to

1295
01:09:54,909 --> 01:10:03,309
keep a free store and all that stuff now

1296
01:09:56,619 --> 01:10:05,380
maybe we want to do that it's hard to

1297
01:10:03,310 --> 01:10:06,789
say probably eventually we would if we

1298
01:10:05,380 --> 01:10:08,380
actually wanted to lean on this system

1299
01:10:06,789 --> 01:10:09,909
and let it be something that people use

1300
01:10:08,380 --> 01:10:14,079
after the game's already shipped to put

1301
01:10:09,909 --> 01:10:17,229
their own art in or something but hard

1302
01:10:14,079 --> 01:10:18,789
to say anyway so what we want to do here

1303
01:10:17,229 --> 01:10:19,869
is take a look at the loaded bitmap

1304
01:10:18,789 --> 01:10:21,939
stuff

1305
01:10:19,869 --> 01:10:25,760
here's that memory pointer I don't know

1306
01:10:21,939 --> 01:10:28,838
if we've got a way to quickly get

1307
01:10:25,760 --> 01:10:28,838
[Music]

1308
01:10:29,399 --> 01:10:33,299
doesn't look like we do

1309
01:10:46,868 --> 01:10:52,479
so I guess I'm just gonna go ahead like

1310
01:10:48,579 --> 01:10:55,479
this say we've got some bitmap memory

1311
01:10:52,479 --> 01:11:04,379
we're writing into our source is going

1312
01:10:55,479 --> 01:11:04,379
to come from this image here and so this

1313
01:11:10,229 --> 01:11:17,169
is going to be our source for a pointer

1314
01:11:14,229 --> 01:11:23,618
and the source for a pointer is going to

1315
01:11:17,170 --> 01:11:27,460
advance every time by the width of the

1316
01:11:23,618 --> 01:11:32,289
image right so then I've got a source

1317
01:11:27,460 --> 01:11:34,179
pixel that's just gonna be the source

1318
01:11:32,289 --> 01:11:36,750
for a pointer and I want to advance it

1319
01:11:34,179 --> 01:11:41,819
as far forward as I need to for the x

1320
01:11:36,750 --> 01:11:41,819
position did I'm at right

1321
01:11:42,479 --> 01:11:48,638
same-same with the Y so I've got a Y

1322
01:11:46,149 --> 01:11:54,399
index and I know that I want to do tile

1323
01:11:48,639 --> 01:11:57,699
dim times image width right so I want to

1324
01:11:54,399 --> 01:11:59,379
start there and then as I go forward and

1325
01:11:57,698 --> 01:12:01,479
in fact you know I can just pre step

1326
01:11:59,380 --> 01:12:04,510
this one as well so what I can do is

1327
01:12:01,479 --> 01:12:06,279
just say also you know step the Y at the

1328
01:12:04,510 --> 01:12:08,770
exit next times the tile dim forward

1329
01:12:06,279 --> 01:12:13,738
that just brings me down to the start of

1330
01:12:08,770 --> 01:12:18,010
the tile that's the first tile and then

1331
01:12:13,738 --> 01:12:20,859
every time I go on a row here I'm

1332
01:12:18,010 --> 01:12:23,710
already at the right place in X so I

1333
01:12:20,859 --> 01:12:29,429
just need to advance the source pixel

1334
01:12:23,710 --> 01:12:29,429
pointer each time

1335
01:12:32,578 --> 01:12:38,130
so that does the complete scan if I want

1336
01:12:35,729 --> 01:12:47,698
to write into the desk pixels these are

1337
01:12:38,130 --> 01:12:49,289
just direct so once you have once you

1338
01:12:47,698 --> 01:12:51,149
have thesaurus color extracted you're

1339
01:12:49,289 --> 01:12:53,130
just writing it directly into the other

1340
01:12:51,149 --> 01:12:56,549
bitmap and off you go

1341
01:12:53,130 --> 01:12:59,789
I don't think there's anything else we

1342
01:12:56,550 --> 01:13:03,420
need to do here other than extract it

1343
01:12:59,789 --> 01:13:05,158
right so I think that just does the

1344
01:13:03,420 --> 01:13:06,750
extraction the only problem is when we

1345
01:13:05,158 --> 01:13:10,259
actually need to get like a professional

1346
01:13:06,750 --> 01:13:11,880
bitmap we don't have that yet so once we

1347
01:13:10,260 --> 01:13:13,800
get in here and we see that we've

1348
01:13:11,880 --> 01:13:15,809
actually got something we're going to

1349
01:13:13,800 --> 01:13:18,420
keep then we need to actually do the

1350
01:13:15,809 --> 01:13:21,929
work of pushing that back through into

1351
01:13:18,420 --> 01:13:24,809
the system so what I want to do here is

1352
01:13:21,929 --> 01:13:29,578
say all right let's go ahead and and

1353
01:13:24,809 --> 01:13:34,139
load up the file formats here so what I

1354
01:13:29,578 --> 01:13:37,590
want to do is I want to write this back

1355
01:13:34,139 --> 01:13:40,710
to some location and there's two cases

1356
01:13:37,590 --> 01:13:44,250
that I might have to handle one case is

1357
01:13:40,710 --> 01:13:47,908
where I don't have an actual asset yeah

1358
01:13:44,250 --> 01:13:55,380
right so that would be the case where

1359
01:13:47,908 --> 01:13:58,679
I've got like an HHA like there is no

1360
01:13:55,380 --> 01:14:01,440
HHA on the disk that actually holds a

1361
01:13:58,679 --> 01:14:02,849
backing store for this asset it's new so

1362
01:14:01,439 --> 01:14:07,219
it's not the case that I'm going to go

1363
01:14:02,849 --> 01:14:09,539
back in an overwrite an existing asset

1364
01:14:07,219 --> 01:14:13,948
what I'm going to do instead is create a

1365
01:14:09,539 --> 01:14:17,250
new slot for a new asset so the h/h a

1366
01:14:13,948 --> 01:14:20,219
header for one of these files now

1367
01:14:17,250 --> 01:14:22,469
essentially has to get expanded with an

1368
01:14:20,219 --> 01:14:25,770
asset count that's larger than it used

1369
01:14:22,469 --> 01:14:29,210
to be and the these arrays have to

1370
01:14:25,770 --> 01:14:32,260
expand right

1371
01:14:29,210 --> 01:14:32,260
[Music]

1372
01:14:49,760 --> 01:14:57,420
so just thinking through how I probably

1373
01:14:53,520 --> 01:15:00,930
want that to go I think I just want to

1374
01:14:57,420 --> 01:15:05,279
kind of pile up the data in a separate

1375
01:15:00,930 --> 01:15:08,460
growable file and probably just have

1376
01:15:05,279 --> 01:15:12,149
there be something flexible that writes

1377
01:15:08,460 --> 01:15:15,000
these out which can then be compiled

1378
01:15:12,149 --> 01:15:19,729
down to the existing HHA at such a time

1379
01:15:15,000 --> 01:15:19,729
as I want to do that right

1380
01:15:32,189 --> 01:15:39,989
[Music]

1381
01:15:34,729 --> 01:15:42,719
yeah so I think what I want to do here

1382
01:15:39,989 --> 01:15:45,329
once I get one of these is I want to

1383
01:15:42,720 --> 01:15:47,579
look to see whether I want to store over

1384
01:15:45,329 --> 01:15:51,029
an existing asset or whether I want to

1385
01:15:47,579 --> 01:15:54,960
write an asset anew so I think what I

1386
01:15:51,029 --> 01:15:58,309
want to do is actually and considering

1387
01:15:54,960 --> 01:15:58,310
this a little bit more carefully here

1388
01:16:02,149 --> 01:16:08,899
yeah I'm pretty sure what I want to do

1389
01:16:04,739 --> 01:16:08,899
is write out the asset here

1390
01:16:16,599 --> 01:16:21,730
yeah - enough - an own store so I think

1391
01:16:19,210 --> 01:16:26,980
this is what I want to do I think I want

1392
01:16:21,729 --> 01:16:28,629
to have one file for each size type well

1393
01:16:26,979 --> 01:16:30,189
I mean either day I don't even really

1394
01:16:28,630 --> 01:16:32,078
have to do it that way

1395
01:16:30,189 --> 01:16:36,250
but I want a half I want to have

1396
01:16:32,078 --> 01:16:38,349
basically a file that I use that's just

1397
01:16:36,250 --> 01:16:41,170
a backing store for these things that I

1398
01:16:38,349 --> 01:16:43,920
just write into and when I if you know

1399
01:16:41,170 --> 01:16:47,020
quote-unquote free one or overwrite one

1400
01:16:43,920 --> 01:16:50,920
then what I'm gonna do is I'm just going

1401
01:16:47,020 --> 01:16:53,860
to overwrite that part of the file with

1402
01:16:50,920 --> 01:16:56,889
the new data just like I would in memory

1403
01:16:53,859 --> 01:17:00,429
and then when we want to compress these

1404
01:16:56,889 --> 01:17:01,929
down into an HHA what I can do is run

1405
01:17:00,429 --> 01:17:06,010
something that actually does that

1406
01:17:01,929 --> 01:17:07,630
compaction and goes from there and this

1407
01:17:06,010 --> 01:17:10,020
could be a pretty nice way to just do

1408
01:17:07,630 --> 01:17:13,060
the development the first place

1409
01:17:10,020 --> 01:17:16,000
basically we just say look all of these

1410
01:17:13,060 --> 01:17:19,860
PNG files datas get compacted into

1411
01:17:16,000 --> 01:17:22,810
something that we can read from reliably

1412
01:17:19,859 --> 01:17:24,969
and that happens at runtime

1413
01:17:22,810 --> 01:17:26,409
automatically the artist doesn't have to

1414
01:17:24,969 --> 01:17:28,060
think about it and then when you want to

1415
01:17:26,408 --> 01:17:29,559
actually ship a build of the game you

1416
01:17:28,060 --> 01:17:31,539
can just run something that trims out

1417
01:17:29,560 --> 01:17:33,610
the dead space right and we could even

1418
01:17:31,539 --> 01:17:35,800
put a little simple LZ compressor in

1419
01:17:33,609 --> 01:17:39,098
there kind of like what PNG had to

1420
01:17:35,800 --> 01:17:41,139
reduce the size of our games asset

1421
01:17:39,099 --> 01:17:49,929
footprint because at that point it would

1422
01:17:41,139 --> 01:17:51,578
probably be pretty cheap to do that so

1423
01:17:49,929 --> 01:17:57,960
we could probably do something pretty

1424
01:17:51,578 --> 01:17:57,960
nice there it's also my guess yeah

1425
01:18:03,079 --> 01:18:07,590
yeah so I'm in favor of that I think

1426
01:18:05,460 --> 01:18:09,390
that's good so what I want to do here is

1427
01:18:07,590 --> 01:18:10,829
I want to first I need to figure out

1428
01:18:09,390 --> 01:18:12,570
what the tags for this thing are going

1429
01:18:10,829 --> 01:18:14,279
to be because I don't know what the tags

1430
01:18:12,569 --> 01:18:16,139
just thing you're going to be so we kind

1431
01:18:14,279 --> 01:18:18,509
of have to imagine that the tags for

1432
01:18:16,140 --> 01:18:23,460
this came in in some way that we can use

1433
01:18:18,510 --> 01:18:26,489
right the X&amp;Y location the X and X and

1434
01:18:23,460 --> 01:18:29,670
the y index have to be translated into

1435
01:18:26,488 --> 01:18:32,488
tags somehow so we needed to do here

1436
01:18:29,670 --> 01:18:38,300
that's like translate the tile index

1437
01:18:32,488 --> 01:18:42,448
into tags based on the name of this file

1438
01:18:38,300 --> 01:18:45,390
probably using something passed into

1439
01:18:42,448 --> 01:18:47,879
this routine so like that's the part

1440
01:18:45,390 --> 01:18:50,910
about the tags I said we had to do once

1441
01:18:47,880 --> 01:18:56,400
we have the tags then we have to do like

1442
01:18:50,909 --> 01:19:02,369
a right asset data the right asset data

1443
01:18:56,399 --> 01:19:06,059
call is going to excuse me the right

1444
01:19:02,369 --> 01:19:09,569
asset data call is going to take some

1445
01:19:06,060 --> 01:19:15,210
information with it here let's say that

1446
01:19:09,569 --> 01:19:18,630
that's going to be probably two parts of

1447
01:19:15,210 --> 01:19:20,880
data so we're gonna need a couple pieces

1448
01:19:18,630 --> 01:19:24,109
of information here but we're gonna need

1449
01:19:20,880 --> 01:19:31,369
the bitmap so you know the loaded bitmap

1450
01:19:24,109 --> 01:19:41,519
and we're going to probably also want

1451
01:19:31,369 --> 01:19:46,439
something like this like metadata and

1452
01:19:41,520 --> 01:19:48,719
data right so when we write the asset

1453
01:19:46,439 --> 01:19:51,029
bitmap data out to the file what we're

1454
01:19:48,719 --> 01:19:52,649
gonna do is just give it that bitmap the

1455
01:19:51,029 --> 01:19:57,029
bitmap should have everything that it

1456
01:19:52,649 --> 01:19:59,099
needs in it which is got everything here

1457
01:19:57,029 --> 01:20:04,050
although I guess that also has the align

1458
01:19:59,100 --> 01:20:07,739
percentage so I guess we really are just

1459
01:20:04,050 --> 01:20:11,489
going to have that because it's got the

1460
01:20:07,738 --> 01:20:12,689
metadata in it as well so I guess we

1461
01:20:11,488 --> 01:20:14,129
have that right out just that and we

1462
01:20:12,689 --> 01:20:19,739
need a write asset

1463
01:20:14,130 --> 01:20:22,890
and similarly right because we need some

1464
01:20:19,739 --> 01:20:25,739
way of associating associating that now

1465
01:20:22,890 --> 01:20:30,119
we know the asset index right the asset

1466
01:20:25,739 --> 01:20:32,909
index here we've got we need to assign

1467
01:20:30,119 --> 01:20:43,529
an asset index so here we need to say

1468
01:20:32,909 --> 01:20:45,899
look if not asset index this needs to be

1469
01:20:43,529 --> 01:20:50,369
assigned an asset index the asset index

1470
01:20:45,899 --> 01:20:52,829
in this case is just going to be however

1471
01:20:50,369 --> 01:20:58,409
many assets the game currently has when

1472
01:20:52,829 --> 01:21:01,430
it's when it's running so inside the

1473
01:20:58,409 --> 01:21:11,939
asset system here let's take a look

1474
01:21:01,430 --> 01:21:13,829
where is my asset count yeah so once we

1475
01:21:11,939 --> 01:21:16,139
assign a new one of those asset indices

1476
01:21:13,829 --> 01:21:21,199
then we know that the asset itself that

1477
01:21:16,140 --> 01:21:21,200
we're looking for is just that one right

1478
01:21:28,399 --> 01:21:32,089
think it's just asset

1479
01:21:36,010 --> 01:21:40,640
and what we do want to do here probably

1480
01:21:38,479 --> 01:21:43,309
is well I think we're going to make this

1481
01:21:40,640 --> 01:21:45,260
so it can't actually fail so we're

1482
01:21:43,310 --> 01:21:48,260
probably going to need to do a max asset

1483
01:21:45,260 --> 01:21:52,489
count thing here which will grow that

1484
01:21:48,260 --> 01:21:54,289
array as necessary but taking a look at

1485
01:21:52,489 --> 01:21:56,630
what we're doing here so we come through

1486
01:21:54,289 --> 01:22:01,579
we got the asset index and and all that

1487
01:21:56,630 --> 01:22:03,350
nice stuff and once we have that we

1488
01:22:01,579 --> 01:22:06,729
should be able to say okay we're going

1489
01:22:03,350 --> 01:22:10,370
to write asset tags for this asset index

1490
01:22:06,729 --> 01:22:11,959
and yeah and I guess maybe you know now

1491
01:22:10,369 --> 01:22:13,880
I think about it that's probably

1492
01:22:11,960 --> 01:22:16,130
something we can just do like this

1493
01:22:13,880 --> 01:22:18,640
so we can go ahead and say we want to

1494
01:22:16,130 --> 01:22:21,350
write asset tags for that asset index

1495
01:22:18,640 --> 01:22:24,320
which we assigned a new one to we can

1496
01:22:21,350 --> 01:22:26,329
probably also have you know I don't know

1497
01:22:24,319 --> 01:22:27,679
if we want to just have this allocate

1498
01:22:26,329 --> 01:22:32,000
more space in the array as necessary

1499
01:22:27,680 --> 01:22:34,369
here if we don't that's kind of six and

1500
01:22:32,000 --> 01:22:35,689
one half dozen or the other but anyway

1501
01:22:34,369 --> 01:22:38,029
we need some way to write out the asset

1502
01:22:35,689 --> 01:22:39,409
tags here which we don't know and then

1503
01:22:38,029 --> 01:22:41,329
we need a way to write out the asset

1504
01:22:39,409 --> 01:22:43,099
bitmap here which that's a lot simpler

1505
01:22:41,329 --> 01:22:49,039
because we do know everything we need to

1506
01:22:43,100 --> 01:22:57,230
know about that so what I'm going to

1507
01:22:49,039 --> 01:23:01,460
introduce there is probably just another

1508
01:22:57,229 --> 01:23:03,289
way to use an HHA file that has this

1509
01:23:01,460 --> 01:23:05,439
information in it so we'll kind of look

1510
01:23:03,289 --> 01:23:08,090
at how that's going to work in a second

1511
01:23:05,439 --> 01:23:12,669
but we'll look at that look at that a

1512
01:23:08,090 --> 01:23:12,670
little later so let's see

1513
01:23:30,029 --> 01:23:35,880
almost time do I have left I've got

1514
01:23:32,590 --> 01:23:35,880
about 20 minutes

1515
01:23:46,189 --> 01:23:51,809
so you know I think I maybe don't really

1516
01:23:49,770 --> 01:23:53,670
want to do this this way I think what I

1517
01:23:51,810 --> 01:23:59,970
think I'm gonna go ahead and say I'm

1518
01:23:53,670 --> 01:24:01,890
gonna get rid of this so I think what I

1519
01:23:59,970 --> 01:24:04,909
want to do is we're actually always

1520
01:24:01,890 --> 01:24:07,289
gonna go into a provisional pit matter

1521
01:24:04,909 --> 01:24:08,639
that we just do a right I think we're

1522
01:24:07,289 --> 01:24:15,960
gonna go a little bit of slower route

1523
01:24:08,640 --> 01:24:17,490
here and just live with that yeah I

1524
01:24:15,960 --> 01:24:19,560
think I like this better and then what

1525
01:24:17,489 --> 01:24:23,609
we'll do is we'll flush the asset cache

1526
01:24:19,560 --> 01:24:25,800
and force it to reinitialize things I

1527
01:24:23,609 --> 01:24:27,269
think that's just better so what I'm

1528
01:24:25,800 --> 01:24:29,909
gonna do here is say look we're gonna

1529
01:24:27,270 --> 01:24:34,530
we're gonna have a provisional bitmap

1530
01:24:29,909 --> 01:24:36,720
here that we use and that provisional

1531
01:24:34,529 --> 01:24:40,109
bitmap is going to come out of the asset

1532
01:24:36,720 --> 01:24:44,640
temporary memory because we just we're

1533
01:24:40,109 --> 01:24:47,659
not gonna keep it right so and in fact

1534
01:24:44,640 --> 01:24:47,660
what we could do

1535
01:24:49,850 --> 01:24:53,910
yeah I think I'm just gonna do it this

1536
01:24:51,779 --> 01:24:55,710
way so we're gonna pass in the temporary

1537
01:24:53,909 --> 01:25:02,880
nough and what I'm going to do is is

1538
01:24:55,710 --> 01:25:06,149
just say look let's get like a pixel

1539
01:25:02,880 --> 01:25:08,369
buffer here and that pixel buffer is

1540
01:25:06,149 --> 01:25:12,960
just going to be an allocate or sorry

1541
01:25:08,369 --> 01:25:17,279
push array on the temporary 'no of the

1542
01:25:12,960 --> 01:25:19,109
tyldum times the tyldum of you 32s so

1543
01:25:17,279 --> 01:25:20,969
we're just going to create that pixel

1544
01:25:19,109 --> 01:25:27,149
buffer and we're going to use that for

1545
01:25:20,970 --> 01:25:29,820
all of our operations so this will

1546
01:25:27,149 --> 01:25:32,099
extract the information here as well as

1547
01:25:29,819 --> 01:25:34,289
do sort of analysis to see whether it

1548
01:25:32,100 --> 01:25:37,079
fits in there properly when we're done

1549
01:25:34,289 --> 01:25:41,550
we'll go ahead and write that asset

1550
01:25:37,079 --> 01:25:45,359
bitmap out you know based on the tile

1551
01:25:41,550 --> 01:25:47,730
dimensions of the thing and you know

1552
01:25:45,359 --> 01:25:50,969
that's that's the size that we want to

1553
01:25:47,729 --> 01:25:53,219
send out and so what we really the only

1554
01:25:50,970 --> 01:26:00,789
thing we really then need to know is

1555
01:25:53,220 --> 01:26:04,659
where inside our sort of we're in

1556
01:26:00,789 --> 01:26:07,720
you know table of asset sort of

1557
01:26:04,659 --> 01:26:12,399
temporary asset storage do we want this

1558
01:26:07,720 --> 01:26:18,220
thing to go great so for that I just

1559
01:26:12,399 --> 01:26:25,659
really need a notion of yeah like where

1560
01:26:18,220 --> 01:26:31,350
the where in the asset temporary storage

1561
01:26:25,659 --> 01:26:36,069
these things went right and if we look

1562
01:26:31,350 --> 01:26:38,980
the HHA itself has that information so

1563
01:26:36,069 --> 01:26:41,340
really what I want to do here is it's

1564
01:26:38,979 --> 01:26:44,949
actually pretty straightforward I think

1565
01:26:41,340 --> 01:26:50,230
when we get an asset index out if we

1566
01:26:44,949 --> 01:26:54,340
have an existing asset index the first

1567
01:26:50,229 --> 01:26:56,769
thing I want to do is and you know what

1568
01:26:54,340 --> 01:27:01,319
maybe we don't really need to go through

1569
01:26:56,770 --> 01:27:01,320
this rigmarole I'll just you know I'll

1570
01:27:02,489 --> 01:27:06,069
just reassign it at the end right so

1571
01:27:04,779 --> 01:27:09,699
that way we don't keep putting the star

1572
01:27:06,069 --> 01:27:11,739
in there so I'm gonna grab an asset

1573
01:27:09,699 --> 01:27:14,380
index out of here I'm gonna look at the

1574
01:27:11,739 --> 01:27:16,179
asset index and if it actually is valid

1575
01:27:14,380 --> 01:27:18,789
then what I'm going to do is I'm going

1576
01:27:16,180 --> 01:27:33,550
to look to see what that asset actually

1577
01:27:18,789 --> 01:27:36,310
has like so when I look at that asset I

1578
01:27:33,550 --> 01:27:41,070
should be able to see in inside the

1579
01:27:36,310 --> 01:27:46,180
asset file index I should be able to see

1580
01:27:41,069 --> 01:27:50,069
whether or not this file is one of our

1581
01:27:46,180 --> 01:27:56,190
compacted or non compacted files right

1582
01:27:50,069 --> 01:27:56,189
so I can go grab the asset file

1583
01:28:03,760 --> 01:28:13,699
oops and when I grab that asset file

1584
01:28:10,789 --> 01:28:18,850
inside the asset file I can remember in

1585
01:28:13,699 --> 01:28:28,099
here which one it is that I actually

1586
01:28:18,850 --> 01:28:42,680
wanted like what kind it is right or you

1587
01:28:28,100 --> 01:28:58,310
know maybe something like that so

1588
01:28:42,680 --> 01:29:00,289
basically if this asset file type if

1589
01:28:58,310 --> 01:29:03,590
this is an expandable asset file then I

1590
01:29:00,289 --> 01:29:06,670
could do it if it's not right

1591
01:29:03,590 --> 01:29:10,909
if this asset file is not expandable

1592
01:29:06,670 --> 01:29:14,449
then I effectively don't have an asset

1593
01:29:10,909 --> 01:29:18,649
index I can actually use right this

1594
01:29:14,449 --> 01:29:21,670
asset is is no longer valid and it

1595
01:29:18,649 --> 01:29:27,079
shouldn't actually be used for anything

1596
01:29:21,670 --> 01:29:30,890
so what I would want to do at that point

1597
01:29:27,079 --> 01:29:34,189
is like nerf the old asset file so that

1598
01:29:30,890 --> 01:29:37,910
we know that it's not actually one that

1599
01:29:34,189 --> 01:29:41,089
we want to continue to use right so in

1600
01:29:37,909 --> 01:29:44,180
the HHA itself we want to kind of nerf

1601
01:29:41,090 --> 01:29:47,300
this asset so we want to like mark asset

1602
01:29:44,180 --> 01:29:51,350
as old or something like that

1603
01:29:47,300 --> 01:29:54,199
for this particular asset so we want a

1604
01:29:51,350 --> 01:29:57,200
mark asset as old here and we then want

1605
01:29:54,199 --> 01:30:00,949
to also say that we don't have an asset

1606
01:29:57,199 --> 01:30:02,569
to rewrite anymore so then when we come

1607
01:30:00,949 --> 01:30:05,510
through here if we don't have an asset

1608
01:30:02,569 --> 01:30:09,319
index what we want to do is we want to

1609
01:30:05,510 --> 01:30:13,210
assign a new asset to the asset index

1610
01:30:09,319 --> 01:30:13,210
that we have so we could do this

1611
01:30:19,658 --> 01:30:26,478
something like this right so we want to

1612
01:30:23,840 --> 01:30:30,440
basically say hey let's get a new asset

1613
01:30:26,479 --> 01:30:33,110
index that we can use to do stuff and

1614
01:30:30,439 --> 01:30:37,868
then once we have one we will fill that

1615
01:30:33,109 --> 01:30:40,460
out with the new data that we have right

1616
01:30:37,868 --> 01:30:42,589
now the other thing that I probably want

1617
01:30:40,460 --> 01:30:46,908
to do here is maybe change this around a

1618
01:30:42,590 --> 01:30:53,510
little bit so what I would want to do

1619
01:30:46,908 --> 01:30:55,728
here is if this was expandable then I

1620
01:30:53,510 --> 01:30:59,360
well actually I guess no that's not I

1621
01:30:55,729 --> 01:31:01,429
take you back there we go

1622
01:30:59,359 --> 01:31:03,649
so what I want to do here I guess is

1623
01:31:01,429 --> 01:31:06,109
when we grab this asset out there is a

1624
01:31:03,649 --> 01:31:10,429
little bit more we can't do with it so I

1625
01:31:06,109 --> 01:31:12,288
want to rescue the information that we

1626
01:31:10,429 --> 01:31:14,090
were using in terms of like alignment

1627
01:31:12,288 --> 01:31:16,578
and stuff and probably preserve it

1628
01:31:14,090 --> 01:31:18,710
because whatever the artist set up last

1629
01:31:16,578 --> 01:31:20,478
time is probably the best guess for

1630
01:31:18,710 --> 01:31:21,769
setting it up this time and if they

1631
01:31:20,479 --> 01:31:23,900
don't like it they can always change it

1632
01:31:21,769 --> 01:31:27,139
but at first we probably want to use

1633
01:31:23,899 --> 01:31:40,788
that thing right so we probably want to

1634
01:31:27,139 --> 01:31:42,920
store this when we have one so that way

1635
01:31:40,788 --> 01:31:44,658
we'll keep that around even if we

1636
01:31:42,920 --> 01:31:47,479
realize that the assets old and we're

1637
01:31:44,658 --> 01:31:50,748
not going to use the old location in the

1638
01:31:47,479 --> 01:31:52,639
file to actually touch that asset we're

1639
01:31:50,748 --> 01:31:55,010
still going to use like the metadata

1640
01:31:52,639 --> 01:31:58,609
from it that we had originally like the

1641
01:31:55,010 --> 01:32:00,650
alignment point right so then when we

1642
01:31:58,609 --> 01:32:03,828
come in here and we say oh you know we

1643
01:32:00,649 --> 01:32:06,408
didn't get an asset or whatever then we

1644
01:32:03,828 --> 01:32:08,359
can say let's reserve a new asset and

1645
01:32:06,408 --> 01:32:11,988
then we can start assigning stuff to

1646
01:32:08,359 --> 01:32:16,488
that new asset right so we can grab it

1647
01:32:11,988 --> 01:32:22,908
out of the system we can say that it's

1648
01:32:16,488 --> 01:32:25,549
HHA equals our our HHA and we can go

1649
01:32:22,908 --> 01:32:28,388
from there now that's probably something

1650
01:32:25,550 --> 01:32:28,389
can do right here

1651
01:32:33,909 --> 01:32:40,130
like so and then we can write it back so

1652
01:32:38,149 --> 01:32:43,069
now what we need to do is actually set

1653
01:32:40,130 --> 01:32:44,359
this stuff up and when we actually do

1654
01:32:43,069 --> 01:32:46,309
this like reserve new masa it's gonna

1655
01:32:44,359 --> 01:32:48,259
have file index and asset index in that

1656
01:32:46,310 --> 01:32:51,560
file that will be set for us when we do

1657
01:32:48,260 --> 01:32:58,039
the reserve and so we can probably just

1658
01:32:51,560 --> 01:33:02,660
proceed to looking to looking at the

1659
01:32:58,039 --> 01:33:05,689
actual HSA data so looking at the actual

1660
01:33:02,659 --> 01:33:10,670
HHA data what we can see here from the

1661
01:33:05,689 --> 01:33:13,189
HHA assets here we go is the data offset

1662
01:33:10,670 --> 01:33:17,930
and the first tag index and the one past

1663
01:33:13,189 --> 01:33:20,179
last tag index so the first tag index in

1664
01:33:17,930 --> 01:33:23,770
the one past last tag index part of

1665
01:33:20,180 --> 01:33:26,300
things we need to set to whatever our

1666
01:33:23,770 --> 01:33:30,440
whatever the actual data is here that we

1667
01:33:26,300 --> 01:33:33,650
need that comes in from our prefab way

1668
01:33:30,439 --> 01:33:35,299
of setting tag information right so

1669
01:33:33,649 --> 01:33:38,269
that's the part that we don't know yet

1670
01:33:35,300 --> 01:33:41,690
but that we need to put in here at some

1671
01:33:38,270 --> 01:33:43,580
point right so we're gonna say HHA asset

1672
01:33:41,689 --> 01:33:48,979
first tag index equals something

1673
01:33:43,579 --> 01:33:53,090
HSAs at one past last tag index equals

1674
01:33:48,979 --> 01:33:55,279
something right and we don't know what

1675
01:33:53,090 --> 01:33:57,800
those two are but then we need an HSA

1676
01:33:55,279 --> 01:33:59,809
that's a data offset that's what we

1677
01:33:57,800 --> 01:34:03,050
actually need to know to write this

1678
01:33:59,810 --> 01:34:04,880
thing in and then similarly we know that

1679
01:34:03,050 --> 01:34:07,130
this is a bitmap that we're doing here

1680
01:34:04,880 --> 01:34:09,079
and so the bitmap needs to dimension

1681
01:34:07,130 --> 01:34:12,829
informations and to align percentage

1682
01:34:09,079 --> 01:34:14,809
informations the dim informations we'll

1683
01:34:12,829 --> 01:34:18,219
just put in here the aligned

1684
01:34:14,810 --> 01:34:21,020
informations we're just not gonna touch

1685
01:34:18,219 --> 01:34:24,079
we'll set them up here to the default

1686
01:34:21,020 --> 01:34:28,060
which I assume is like 50% the mid like

1687
01:34:24,079 --> 01:34:28,059
probably the middle right

1688
01:34:34,439 --> 01:34:39,149
Just Cause like that's if you didn't

1689
01:34:36,929 --> 01:34:41,520
have if no one had ever told you where

1690
01:34:39,149 --> 01:34:44,729
the hot spot on sprite was the middle is

1691
01:34:41,520 --> 01:34:48,480
probably a good bet now what we could do

1692
01:34:44,729 --> 01:34:50,399
is actually take the middle of these so

1693
01:34:48,479 --> 01:34:54,109
the middle of the actual image that we

1694
01:34:50,399 --> 01:34:56,189
get but I'm not going to do that because

1695
01:34:54,109 --> 01:34:59,429
we don't really know that that's any

1696
01:34:56,189 --> 01:35:05,759
more accurate we just be purely guessing

1697
01:34:59,429 --> 01:35:08,460
that it would be so here we are setting

1698
01:35:05,760 --> 01:35:12,079
the tile dim that's going to be correct

1699
01:35:08,460 --> 01:35:16,380
so really what we need here is reserved

1700
01:35:12,078 --> 01:35:18,210
asset space so this is where we would

1701
01:35:16,380 --> 01:35:23,639
reserve the asset space there's two

1702
01:35:18,210 --> 01:35:26,969
cases here one is if the asset file

1703
01:35:23,639 --> 01:35:30,239
you know the expandable expand a little

1704
01:35:26,969 --> 01:35:38,788
bit I think this probably wants to look

1705
01:35:30,238 --> 01:35:40,828
like this and yeah and it probably wants

1706
01:35:38,788 --> 01:35:43,219
to check to make sure the tile dims were

1707
01:35:40,828 --> 01:35:43,219
the same

1708
01:35:55,489 --> 01:36:03,819
so what we want to say here if it's non

1709
01:35:57,829 --> 01:36:17,869
expandable file or it's not matching

1710
01:36:03,819 --> 01:36:32,719
dimensions I guess I can just do it like

1711
01:36:17,869 --> 01:36:34,909
this right so if it's not expandable or

1712
01:36:32,720 --> 01:36:36,890
either of the dimensions have somehow

1713
01:36:34,909 --> 01:36:38,659
changed which we really shouldn't have

1714
01:36:36,890 --> 01:36:39,920
happened hardly ever but you know we

1715
01:36:38,659 --> 01:36:42,559
want to make sure that we support it if

1716
01:36:39,920 --> 01:36:46,520
for some reason it did then we're just

1717
01:36:42,560 --> 01:36:50,840
saying like no this is not this the old

1718
01:36:46,520 --> 01:36:54,850
asset is no longer available it's just

1719
01:36:50,840 --> 01:36:57,140
old data that we can't really use and

1720
01:36:54,850 --> 01:37:04,450
now we need to put it into a new place

1721
01:36:57,140 --> 01:37:04,450
right however even as I'm saying that

1722
01:37:11,529 --> 01:37:15,979
even as I'm saying that I guess now that

1723
01:37:14,329 --> 01:37:18,050
I think about it there's no such thing

1724
01:37:15,979 --> 01:37:26,629
as a nun expandable file we can always

1725
01:37:18,050 --> 01:37:30,100
write new data at the end right so

1726
01:37:26,630 --> 01:37:33,230
really I think what we want to say I

1727
01:37:30,100 --> 01:37:37,210
think we're just fine I think all we

1728
01:37:33,229 --> 01:37:37,209
need to do is say is it a different size

1729
01:37:52,930 --> 01:37:57,409
because right I think it's fine

1730
01:37:55,670 --> 01:38:00,470
so we just want to say look if we can't

1731
01:37:57,409 --> 01:38:08,889
if we can't just romp over the thing

1732
01:38:00,470 --> 01:38:08,890
with the new thing right then sure

1733
01:38:16,869 --> 01:38:36,340
yeah so I want to say this is this is

1734
01:38:21,340 --> 01:38:38,170
really just this yeah so so you know

1735
01:38:36,340 --> 01:38:43,150
what I think this is really it's really

1736
01:38:38,170 --> 01:38:45,250
this actually it's really just look if

1737
01:38:43,149 --> 01:38:49,449
we don't have an asset we need to

1738
01:38:45,250 --> 01:38:55,470
reserve a new asset otherwise we can

1739
01:38:49,449 --> 01:38:59,649
just say look if the data offset is zero

1740
01:38:55,470 --> 01:39:05,490
or the dimensions don't match then we

1741
01:38:59,649 --> 01:39:05,489
just need to reserve space for you know

1742
01:39:06,659 --> 01:39:10,800
we just need to reserve space for

1743
01:39:11,850 --> 01:39:16,800
something that's that's that bit right

1744
01:39:18,359 --> 01:39:26,349
and so that will get us data offset in

1745
01:39:22,739 --> 01:39:29,349
that'll that'll give us what we need to

1746
01:39:26,350 --> 01:39:31,630
write into that file and it will bring

1747
01:39:29,350 --> 01:39:34,539
the data it'll give us back the data

1748
01:39:31,630 --> 01:39:36,970
asset the data offset we can use to

1749
01:39:34,539 --> 01:39:38,739
actually write in there so we need to

1750
01:39:36,970 --> 01:39:40,720
set up the tags but then I think we're

1751
01:39:38,739 --> 01:39:41,949
just good like this is actually easier

1752
01:39:40,720 --> 01:39:46,480
than I thought it was going to be I

1753
01:39:41,949 --> 01:39:49,050
think so we just reserve asset space in

1754
01:39:46,479 --> 01:39:49,049
that file

1755
01:40:07,409 --> 01:40:13,449
like that's so I can get a new asset and

1756
01:40:11,529 --> 01:40:15,219
I can get if I need one and I can get

1757
01:40:13,449 --> 01:40:17,199
more data space if I need it

1758
01:40:15,220 --> 01:40:26,829
and then once I have it I just write it

1759
01:40:17,199 --> 01:40:30,699
in there right so I think really that

1760
01:40:26,829 --> 01:40:42,789
was all I needed to do and then when I

1761
01:40:30,699 --> 01:40:54,819
get to the point where I've where I get

1762
01:40:42,789 --> 01:40:57,430
to the point where I want to write out

1763
01:40:54,819 --> 01:40:59,739
this asset bitmap really it's not

1764
01:40:57,430 --> 01:41:02,170
writing an asset bitmap anymore

1765
01:40:59,739 --> 01:41:19,539
it's more like saying look write this

1766
01:41:02,170 --> 01:41:22,180
asset data we know it's this big that's

1767
01:41:19,539 --> 01:41:24,399
how big the data is so we want to

1768
01:41:22,180 --> 01:41:26,829
reserve that much space it gives us back

1769
01:41:24,399 --> 01:41:29,920
a place to put it then when we write the

1770
01:41:26,829 --> 01:41:39,880
asset data we say hey the asset data we

1771
01:41:29,920 --> 01:41:46,829
want is this right it's this big and I

1772
01:41:39,880 --> 01:41:46,829
want you to put it here

1773
01:41:50,630 --> 01:41:57,989
right so like there's the place to put

1774
01:41:53,310 --> 01:42:00,150
the thing at this offset it's this big

1775
01:41:57,989 --> 01:42:02,159
here's the data write it out so then

1776
01:42:00,149 --> 01:42:09,960
once we do that the only other thing we

1777
01:42:02,159 --> 01:42:13,229
have to do is to to overwrite the asset

1778
01:42:09,960 --> 01:42:15,630
record itself with the new asset record

1779
01:42:13,229 --> 01:42:22,799
and so we would just say hey write this

1780
01:42:15,630 --> 01:42:23,550
asset back out to the file from from

1781
01:42:22,800 --> 01:42:32,180
whence it came

1782
01:42:23,550 --> 01:42:37,289
I think that's all there is to it I

1783
01:42:32,180 --> 01:42:38,520
think that just updates everything so

1784
01:42:37,289 --> 01:42:39,989
the only really thing we need to worry

1785
01:42:38,520 --> 01:42:41,730
about is the tags like I've seen before

1786
01:42:39,989 --> 01:42:50,670
I think that's literally it

1787
01:42:41,729 --> 01:42:52,049
like that does the whole shebang and the

1788
01:42:50,670 --> 01:42:53,730
only things we need to implement is

1789
01:42:52,050 --> 01:42:55,680
something that reserves extra asset

1790
01:42:53,729 --> 01:42:58,619
space and something that expands files

1791
01:42:55,680 --> 01:43:01,800
as necessary - very very simple

1792
01:42:58,619 --> 01:43:03,539
operations that really just won't be

1793
01:43:01,800 --> 01:43:05,850
very hard to implement I'm going to go

1794
01:43:03,539 --> 01:43:12,769
ahead and nerf this for now so that we

1795
01:43:05,850 --> 01:43:12,770
still compile wait what

1796
01:43:26,789 --> 01:43:42,460
it's the easiest one to define that was

1797
01:43:34,329 --> 01:43:50,680
this right yeah and that's supposed to

1798
01:43:42,460 --> 01:43:53,069
be X and X Y and X same with the one

1799
01:43:50,680 --> 01:43:53,070
down here

1800
01:44:07,829 --> 01:44:16,090
[Music]

1801
01:44:10,090 --> 01:44:16,090
so we need to grab that out

1802
01:44:28,319 --> 01:44:38,049
[Music]

1803
01:44:30,029 --> 01:44:47,170
that's all good there I think that's

1804
01:44:38,050 --> 01:44:50,760
that actually yeah so I think now we're

1805
01:44:47,170 --> 01:44:50,760
pretty good actually

1806
01:44:51,600 --> 01:45:06,100
um here is here's presses tile import I

1807
01:44:56,800 --> 01:45:08,920
can pass this all that stuff I think

1808
01:45:06,100 --> 01:45:31,510
that's all good and so really what we

1809
01:45:08,920 --> 01:45:33,159
would need here are these functions so

1810
01:45:31,510 --> 01:45:36,119
that's the asset index we need the

1811
01:45:33,159 --> 01:45:36,119
reserved data one

1812
01:45:44,210 --> 01:45:58,220
I don't recall asset file and asset

1813
01:45:52,279 --> 01:46:00,380
dates I suppose this can could probably

1814
01:45:58,220 --> 01:46:35,170
be au 64 but we'll leave it like that

1815
01:46:00,380 --> 01:46:35,170
and then these two so I think

1816
01:46:50,500 --> 01:47:02,090
that's all we're looking at and that's

1817
01:46:56,420 --> 01:47:06,078
all compiling to so these are like

1818
01:47:02,090 --> 01:47:08,480
trivial to implement too so these are

1819
01:47:06,078 --> 01:47:11,408
really easy which is great

1820
01:47:08,479 --> 01:47:13,819
so I think we are now basically down to

1821
01:47:11,408 --> 01:47:16,609
exactly what I said we were going to run

1822
01:47:13,819 --> 01:47:19,488
up into which is the tags so we're gonna

1823
01:47:16,609 --> 01:47:21,018
have to rethink tags next time and

1824
01:47:19,488 --> 01:47:22,759
that's gonna be a little bit of a grind

1825
01:47:21,019 --> 01:47:25,429
because we're gonna have to really put

1826
01:47:22,760 --> 01:47:28,610
on the thinking cap for that but that's

1827
01:47:25,429 --> 01:47:31,639
about it like I think we're in pretty

1828
01:47:28,609 --> 01:47:34,670
good shape otherwise I think the rest of

1829
01:47:31,639 --> 01:47:36,349
this stuff just sort of works I'll go

1830
01:47:34,670 --> 01:47:39,190
ahead and go to the Q&amp;A but I think I

1831
01:47:36,349 --> 01:47:39,190
think we're in good shape

1832
01:48:11,180 --> 01:48:18,869
we rewrite the software rasterizer with

1833
01:48:13,800 --> 01:48:20,850
sse4 um I don't know probably honestly

1834
01:48:18,869 --> 01:48:23,159
probably what we'll do for the software

1835
01:48:20,850 --> 01:48:26,520
aster Iser is we'll rewrite it with

1836
01:48:23,159 --> 01:48:29,250
avx-512 and just because it's it's just

1837
01:48:26,520 --> 01:48:32,070
an you're not gonna run a game nowadays

1838
01:48:29,250 --> 01:48:34,350
on a software rasterizer like that's

1839
01:48:32,069 --> 01:48:36,359
just not a thing you do so we've always

1840
01:48:34,350 --> 01:48:38,520
only ever done it because I think it's

1841
01:48:36,359 --> 01:48:40,079
important as a learning exercise for

1842
01:48:38,520 --> 01:48:42,030
people to see how it works because

1843
01:48:40,079 --> 01:48:43,529
otherwise you have no idea what your

1844
01:48:42,029 --> 01:48:46,939
graphics card is doing it you don't

1845
01:48:43,529 --> 01:48:46,939
really get it you know what I mean

1846
01:48:47,090 --> 01:48:52,590
so we you know we can't ride it what we

1847
01:48:50,970 --> 01:48:54,900
could try to do is once the game is done

1848
01:48:52,590 --> 01:48:58,289
we can rewrite the software rasterizer

1849
01:48:54,899 --> 01:48:59,729
and we could use avx-512 because then we

1850
01:48:58,289 --> 01:49:01,739
can actually do a pretty high

1851
01:48:59,729 --> 01:49:04,799
performance one too because that's got

1852
01:49:01,739 --> 01:49:07,260
like Lane based gather and stuff so for

1853
01:49:04,800 --> 01:49:10,650
texture fetches it actually works you

1854
01:49:07,260 --> 01:49:12,420
know I don't think there's much point in

1855
01:49:10,649 --> 01:49:16,859
rewriting the software rasterizer with

1856
01:49:12,420 --> 01:49:18,810
sse4 because sse4 doesn't have any stuff

1857
01:49:16,859 --> 01:49:19,519
that we really need for software

1858
01:49:18,810 --> 01:49:22,230
rasterizer

1859
01:49:19,520 --> 01:49:25,200
like we wouldn't really gain anything

1860
01:49:22,229 --> 01:49:27,000
all that useful there's maybe a little

1861
01:49:25,199 --> 01:49:28,679
something here or there that's useful

1862
01:49:27,000 --> 01:49:30,149
but it's just yeah so I think the

1863
01:49:28,680 --> 01:49:33,420
software rasterizer probably like

1864
01:49:30,149 --> 01:49:41,039
avx-512 so it's got Lane based gather

1865
01:49:33,420 --> 01:49:44,970
and that's just purely exercise in in

1866
01:49:41,039 --> 01:49:48,380
learning and avx-512 the only actual

1867
01:49:44,970 --> 01:49:48,380
instruction set that was sort of

1868
01:49:50,000 --> 01:49:55,760
designed for a rasterization anyway you

1869
01:49:53,640 --> 01:49:55,760
know

1870
01:50:04,949 --> 01:50:08,819
and don't feel bad about not having

1871
01:50:06,840 --> 01:50:11,100
avx-512 nobody does I don't have it

1872
01:50:08,819 --> 01:50:18,329
either I'm just saying when we actually

1873
01:50:11,100 --> 01:50:21,720
go to do it if we're lucky

1874
01:50:18,329 --> 01:50:26,970
AVX 5:12 we'll be around if we're lucky

1875
01:50:21,720 --> 01:50:29,880
maybe it won't be I don't know I mean

1876
01:50:26,970 --> 01:50:31,710
one of the problems is that AMD seems to

1877
01:50:29,880 --> 01:50:35,340
not be going that direction

1878
01:50:31,710 --> 01:50:37,560
unfortunately and the problem is so the

1879
01:50:35,340 --> 01:50:41,699
problem with avx-512 is I don't care

1880
01:50:37,560 --> 01:50:52,920
about the 5:12 part I care about Lane

1881
01:50:41,699 --> 01:50:54,300
based gather right so you still haven't

1882
01:50:52,920 --> 01:50:56,190
bounded hash value and check for oh

1883
01:50:54,300 --> 01:51:04,730
you're right that's a good point

1884
01:50:56,189 --> 01:51:04,729
we should do that right here right so

1885
01:51:11,189 --> 01:51:18,059
in here we've got the source file hash

1886
01:51:13,948 --> 01:51:21,629
we only support up to 256 wide hash

1887
01:51:18,060 --> 01:51:39,120
there so let's go ahead and bound it to

1888
01:51:21,630 --> 01:51:40,889
that you can probably do a mod there

1889
01:51:39,119 --> 01:51:46,769
because the compiler is probably smart

1890
01:51:40,889 --> 01:51:48,690
enough to change it so you could I would

1891
01:51:46,770 --> 01:51:53,690
imagine the compiler is smart enough to

1892
01:51:48,689 --> 01:52:03,479
change that into an and buy one - I

1893
01:51:53,689 --> 01:52:04,259
don't actually know III don't know if it

1894
01:52:03,479 --> 01:52:08,569
is or it isn't

1895
01:52:04,260 --> 01:52:08,570
but let's just say

1896
01:52:14,069 --> 01:52:31,679
I would be shocked if it couldn't do

1897
01:52:26,039 --> 01:52:33,510
that it's a very basic transform but my

1898
01:52:31,679 --> 01:52:34,770
soul look it's not a performance

1899
01:52:33,510 --> 01:52:38,760
critical part of the code anyway so we

1900
01:52:34,770 --> 01:52:40,829
could just do the mod how long until

1901
01:52:38,760 --> 01:52:42,989
Microsoft tries to force win through to

1902
01:52:40,828 --> 01:52:45,859
become obsolete and what comes after win

1903
01:52:42,988 --> 01:52:45,859
three to four games

1904
01:52:58,109 --> 01:53:04,750
so if I may make a rather dire

1905
01:53:03,819 --> 01:53:14,590
prediction

1906
01:53:04,750 --> 01:53:17,859
I think Windows 10 is probably the nail

1907
01:53:14,590 --> 01:53:24,130
in the coffin for games on Windows is my

1908
01:53:17,859 --> 01:53:26,369
guess and I will elaborate on that as

1909
01:53:24,130 --> 01:53:26,369
follows

1910
01:53:27,449 --> 01:53:41,139
yesterday I was trying to play player

1911
01:53:36,789 --> 01:53:45,189
unknowns battlegrounds with Anna the

1912
01:53:41,140 --> 01:53:49,810
artist at Mali rocket and Matt Grinnell

1913
01:53:45,189 --> 01:53:52,469
a friend of mine from California here's

1914
01:53:49,810 --> 01:53:52,470
what happened

1915
01:53:53,850 --> 01:53:58,329
Anna tried to plug in a mouse that she

1916
01:53:57,039 --> 01:54:03,909
had used on her laptop

1917
01:53:58,329 --> 01:54:10,750
it's a razor Orochi Mouse into a PC that

1918
01:54:03,909 --> 01:54:12,939
she wanted to play the game on ok upon

1919
01:54:10,750 --> 01:54:15,729
plugging in the mouse because I guess

1920
01:54:12,939 --> 01:54:21,009
the razor Orochi Mouse has a very high

1921
01:54:15,729 --> 01:54:23,789
sampling rate or something and there are

1922
01:54:21,010 --> 01:54:27,789
no default drivers for this Mouse I

1923
01:54:23,789 --> 01:54:29,680
guess on the PC it was essentially

1924
01:54:27,789 --> 01:54:31,119
unusable like moving the mouse only a

1925
01:54:29,680 --> 01:54:33,310
little bit like moved it all the way

1926
01:54:31,119 --> 01:54:35,920
across the screen even though the like

1927
01:54:33,310 --> 01:54:37,770
sliders on the mouse configuration were

1928
01:54:35,920 --> 01:54:42,940
not set to like high speed or anything

1929
01:54:37,770 --> 01:54:45,310
so it wasn't really usable so over the

1930
01:54:42,939 --> 01:54:49,710
phone I tried to walk her through how to

1931
01:54:45,310 --> 01:54:52,510
fix this well unfortunately Razer

1932
01:54:49,710 --> 01:54:56,470
doesn't distribute drivers for their

1933
01:54:52,510 --> 01:54:59,050
hardware anymore in order to fix the

1934
01:54:56,470 --> 01:55:01,020
mouse you had to install Razer synapse

1935
01:54:59,050 --> 01:55:03,159
the only way that they actually

1936
01:55:01,020 --> 01:55:06,400
distribute drivers for Windows 10

1937
01:55:03,159 --> 01:55:09,069
anymore she tried to install Razer

1938
01:55:06,399 --> 01:55:11,500
synapse and of course it was Razer

1939
01:55:09,069 --> 01:55:15,309
synapse version 3 which is the default

1940
01:55:11,500 --> 01:55:18,670
download Razer synapse version 3 doesn't

1941
01:55:15,310 --> 01:55:20,410
support the Razer Orochi Mouse so we

1942
01:55:18,670 --> 01:55:23,619
didn't do anything they just forced her

1943
01:55:20,409 --> 01:55:27,340
to create an account and didn't do

1944
01:55:23,619 --> 01:55:31,000
anything I then had to walk her through

1945
01:55:27,340 --> 01:55:33,069
uninstalling right in mind you when you

1946
01:55:31,000 --> 01:55:35,170
try to install uninstall something on

1947
01:55:33,069 --> 01:55:37,269
Windows 10 what happens is you type

1948
01:55:35,170 --> 01:55:39,609
uninstall into the Start menu it gives

1949
01:55:37,270 --> 01:55:42,070
you some uninstall whatever the last

1950
01:55:39,609 --> 01:55:46,059
uninstaller was and it just says

1951
01:55:42,069 --> 01:55:47,559
uninstall right in the little thing so

1952
01:55:46,060 --> 01:55:49,720
she clicks that and it says do you want

1953
01:55:47,560 --> 01:55:51,340
to uninstall mumble which is like the

1954
01:55:49,720 --> 01:55:52,690
last program that got installed or

1955
01:55:51,340 --> 01:55:55,810
something that had a thing called

1956
01:55:52,689 --> 01:55:57,849
uninstall and she's like no so I'm like

1957
01:55:55,810 --> 01:56:01,090
ah you have to type add or remove

1958
01:55:57,850 --> 01:56:04,480
programs and click on that find Razer

1959
01:56:01,090 --> 01:56:09,659
synapse in the list uninstall it go back

1960
01:56:04,479 --> 01:56:14,739
to the Razer web page download the

1961
01:56:09,659 --> 01:56:18,399
download the Razer synapse to install

1962
01:56:14,739 --> 01:56:21,510
that that actually identified the mouse

1963
01:56:18,399 --> 01:56:26,920
and was able to install the driver ok

1964
01:56:21,510 --> 01:56:30,460
that was getting anna's mouse working so

1965
01:56:26,920 --> 01:56:33,880
then we tried to play but unfortunately

1966
01:56:30,460 --> 01:56:36,970
matt Cornell's windows 10 had updated

1967
01:56:33,880 --> 01:56:38,800
and apparently melted down now it just

1968
01:56:36,970 --> 01:56:41,440
blue screened all the time and he

1969
01:56:38,800 --> 01:56:43,150
couldn't tell why he never got it

1970
01:56:41,439 --> 01:56:45,849
working by the way he's a tech

1971
01:56:43,149 --> 01:56:48,039
professional he administers websites for

1972
01:56:45,850 --> 01:56:51,520
a living he runs Linux servers all the

1973
01:56:48,039 --> 01:56:53,439
time he's and he knows everything there

1974
01:56:51,520 --> 01:56:56,020
is to know about administrative computer

1975
01:56:53,439 --> 01:56:58,839
he couldn't get Windows 10 to run after

1976
01:56:56,020 --> 01:57:01,720
like 30 or 40 minutes so we just gave up

1977
01:56:58,840 --> 01:57:07,210
and that was our experience playing

1978
01:57:01,720 --> 01:57:10,780
games on Windows this garbage is

1979
01:57:07,210 --> 01:57:12,939
completely unacceptable and there is no

1980
01:57:10,779 --> 01:57:15,489
way that the playerbase

1981
01:57:12,939 --> 01:57:18,189
on Windows will continue to grow with

1982
01:57:15,489 --> 01:57:20,170
this kind of crap we are talking about

1983
01:57:18,189 --> 01:57:22,419
an operating system that pops up a

1984
01:57:20,170 --> 01:57:25,340
dialog box in the middle of your game

1985
01:57:22,420 --> 01:57:29,480
asking you to reboot

1986
01:57:25,340 --> 01:57:32,210
all right it is totally unacceptable as

1987
01:57:29,479 --> 01:57:35,629
a platform they do not know what they're

1988
01:57:32,210 --> 01:57:39,829
doing and it is only because people love

1989
01:57:35,630 --> 01:57:41,539
PC games so much and people like valve

1990
01:57:39,829 --> 01:57:46,519
have stepped in to supply something like

1991
01:57:41,539 --> 01:57:49,069
steam that it even exists at all we are

1992
01:57:46,520 --> 01:57:52,810
hanging on by a thread and Microsoft is

1993
01:57:49,069 --> 01:57:55,549
essentially completely ruining our only

1994
01:57:52,810 --> 01:57:58,340
existing pseudo open game platform that

1995
01:57:55,550 --> 01:58:02,239
we still have that's that's actively

1996
01:57:58,340 --> 01:58:07,310
being used I don't think it's going to

1997
01:58:02,239 --> 01:58:09,829
last if someone like Sony decided to

1998
01:58:07,310 --> 01:58:12,650
ship the PlayStation 5 or whatever they

1999
01:58:09,829 --> 01:58:15,500
want to call that with a mouse and a

2000
01:58:12,649 --> 01:58:20,179
keyboard and a way to plug into a high

2001
01:58:15,500 --> 01:58:20,899
DPI monitor if they just supplied an app

2002
01:58:20,180 --> 01:58:23,960
system

2003
01:58:20,899 --> 01:58:27,259
I think Windows as an operating system

2004
01:58:23,960 --> 01:58:29,300
would be gone I don't think you'd ever

2005
01:58:27,260 --> 01:58:30,289
see it again forget it it's a legacy

2006
01:58:29,300 --> 01:58:34,970
it's like

2007
01:58:30,289 --> 01:58:38,300
os/2 or ms-dos or anything else because

2008
01:58:34,970 --> 01:58:40,490
if you could just buy a relatively fast

2009
01:58:38,300 --> 01:58:41,960
machine with a consistent hardware

2010
01:58:40,489 --> 01:58:43,670
platform that has a mouse and a keyboard

2011
01:58:41,960 --> 01:58:46,579
that plugs into it and you can run apps

2012
01:58:43,670 --> 01:58:48,380
on it and compile stuff there's no

2013
01:58:46,579 --> 01:58:51,289
reason to use this garbage anymore

2014
01:58:48,380 --> 01:58:53,539
it is completely unacceptable what they

2015
01:58:51,289 --> 01:58:56,930
have done to the Windows platform it is

2016
01:58:53,539 --> 01:58:59,960
it is disgusting it is unusable and it

2017
01:58:56,930 --> 01:59:02,270
is it takes so much more time to

2018
01:58:59,960 --> 01:59:04,730
actually keep your system running and do

2019
01:59:02,270 --> 01:59:06,050
anything with it I have no idea how long

2020
01:59:04,729 --> 01:59:08,329
because consumers are gonna put up with

2021
01:59:06,050 --> 01:59:10,670
this but I guarantee you they won't and

2022
01:59:08,329 --> 01:59:15,140
if you ever gave them any other option

2023
01:59:10,670 --> 01:59:18,109
to switch to they will people aren't

2024
01:59:15,140 --> 01:59:19,970
stupid right the reason they're still

2025
01:59:18,109 --> 01:59:21,799
using games on Windows cuz they don't

2026
01:59:19,970 --> 01:59:24,980
have another Mouse keyboard monitor

2027
01:59:21,800 --> 01:59:30,680
platform where they can compile games

2028
01:59:24,979 --> 01:59:32,209
and run games right someone else steps

2029
01:59:30,680 --> 01:59:36,560
in and provides that Windows has gone

2030
01:59:32,210 --> 01:59:38,869
tomorrow period right that's it I mean

2031
01:59:36,560 --> 01:59:39,730
they have done such a horrible job with

2032
01:59:38,869 --> 01:59:43,099
this plat

2033
01:59:39,729 --> 01:59:46,699
that you know I'm not sad to see them go

2034
01:59:43,100 --> 01:59:48,890
either they could just I know love lost

2035
01:59:46,699 --> 01:59:51,609
they have absolutely treated this

2036
01:59:48,890 --> 01:59:54,619
platform with nothing but disrespect and

2037
01:59:51,609 --> 01:59:59,630
it has been a tremendous burden on the

2038
01:59:54,619 --> 02:00:03,140
PC community for no reason so as far as

2039
01:59:59,630 --> 02:00:07,220
I'm concerned my prediction is that if

2040
02:00:03,140 --> 02:00:12,500
and it's a big if anybody wanted to take

2041
02:00:07,220 --> 02:00:13,280
over games on Windows as a platform they

2042
02:00:12,500 --> 02:00:15,289
could do it tomorrow

2043
02:00:13,279 --> 02:00:18,710
Sony could do it tomorrow and it would

2044
02:00:15,289 --> 02:00:20,989
be over because Microsoft provides

2045
02:00:18,710 --> 02:00:22,609
negative value at this point installing

2046
02:00:20,989 --> 02:00:25,399
Windows on your system and playing games

2047
02:00:22,609 --> 02:00:27,619
that way is an exercise in futility it

2048
02:00:25,399 --> 02:00:30,949
is frustrating it ruins your gaming

2049
02:00:27,619 --> 02:00:34,970
experience and they absolutely don't

2050
02:00:30,949 --> 02:00:37,189
care when a when a version of Windows

2051
02:00:34,970 --> 02:00:41,300
goes out the door is so clear that not a

2052
02:00:37,189 --> 02:00:45,289
single person who has any power at that

2053
02:00:41,300 --> 02:00:47,900
company cared one bit what the

2054
02:00:45,289 --> 02:00:48,439
experience would be for a gamer not one

2055
02:00:47,899 --> 02:00:53,569
bit

2056
02:00:48,439 --> 02:00:56,779
because no gamer would ever ever accept

2057
02:00:53,569 --> 02:01:03,380
a dialog box popping up in the middle of

2058
02:00:56,779 --> 02:01:05,809
a game it's absurd to even consider the

2059
02:01:03,380 --> 02:01:09,590
validation process you have to have in

2060
02:01:05,810 --> 02:01:14,830
place to allow that kind of thing to go

2061
02:01:09,590 --> 02:01:19,159
out into the wild it's ridiculous

2062
02:01:14,829 --> 02:01:22,220
absolutely unacceptable and I know this

2063
02:01:19,159 --> 02:01:25,159
is a total rant but it's an absolutely

2064
02:01:22,220 --> 02:01:29,539
accurate rant there is nothing

2065
02:01:25,159 --> 02:01:32,180
histrionic about this it is just a fact

2066
02:01:29,539 --> 02:01:37,010
that the chain of command there does not

2067
02:01:32,180 --> 02:01:38,990
care about games at all period and you

2068
02:01:37,010 --> 02:01:42,199
can see it the proof is in the pudding

2069
02:01:38,989 --> 02:01:46,309
and the pudding is made largely of dog

2070
02:01:42,199 --> 02:01:49,149
feces at this point and that's all I

2071
02:01:46,310 --> 02:01:49,150
have to say about that

2072
02:01:57,840 --> 02:02:02,369
if I remember correctly STB use lib was

2073
02:02:00,329 --> 02:02:08,340
used in one of the episodes was it for

2074
02:02:02,369 --> 02:02:10,619
loading PNG assets no so what I did I

2075
02:02:08,340 --> 02:02:13,710
think it was on Sean Barrett's birthday

2076
02:02:10,619 --> 02:02:15,630
actually is I'd never shown how to use

2077
02:02:13,710 --> 02:02:20,960
an SD B lib because we write everything

2078
02:02:15,630 --> 02:02:24,359
from scratch so what I did is I made a

2079
02:02:20,960 --> 02:02:26,550
we had a thing that you know made turn

2080
02:02:24,359 --> 02:02:30,179
fonts into bitmaps and I had done that

2081
02:02:26,550 --> 02:02:32,250
using the windows API to take the

2082
02:02:30,180 --> 02:02:33,990
thoughts and rasterize them and then we

2083
02:02:32,250 --> 02:02:36,420
suck them out of that and put them into

2084
02:02:33,989 --> 02:02:38,880
a bitmap right and then what I wanted to

2085
02:02:36,420 --> 02:02:41,840
show was hey there's an SD be lib to do

2086
02:02:38,880 --> 02:02:44,279
that I think it's called SD be true type

2087
02:02:41,840 --> 02:02:46,680
and so I want to show how to use it so

2088
02:02:44,279 --> 02:02:48,689
still to this day if you go into the

2089
02:02:46,680 --> 02:02:51,480
test asset processor there's actually a

2090
02:02:48,689 --> 02:02:53,759
switch so right now it's compiled lib

2091
02:02:51,479 --> 02:02:55,769
free because you know hammer here we

2092
02:02:53,760 --> 02:02:57,750
don't use libraries that's our thing but

2093
02:02:55,770 --> 02:02:58,890
you can steal to this day turn on the

2094
02:02:57,750 --> 02:03:01,409
thing that will go through Sean's

2095
02:02:58,890 --> 02:03:03,150
library if you want and I thought that

2096
02:03:01,409 --> 02:03:06,300
was important because I do think some

2097
02:03:03,149 --> 02:03:10,229
libraries are well made and I wanted to

2098
02:03:06,300 --> 02:03:14,789
show how to make something you know that

2099
02:03:10,229 --> 02:03:19,079
was I want to show how to use a good

2100
02:03:14,789 --> 02:03:20,939
library on the stream so that's the one

2101
02:03:19,079 --> 02:03:23,460
we did we didn't use I don't think we've

2102
02:03:20,939 --> 02:03:26,250
ever used STV image which is the one

2103
02:03:23,460 --> 02:03:31,640
that loads pngs but but there is a PNG

2104
02:03:26,250 --> 02:03:34,500
loader in NS DB Lib what I did do

2105
02:03:31,640 --> 02:03:37,200
recently just a couple streams ago is I

2106
02:03:34,500 --> 02:03:39,810
tested our PNG reader against Shawn's

2107
02:03:37,199 --> 02:03:41,039
PNG reader because I wanted to see if we

2108
02:03:39,810 --> 02:03:44,160
were misinterpreting something and it

2109
02:03:41,039 --> 02:03:46,859
turned out that we were we didn't so we

2110
02:03:44,159 --> 02:03:48,539
didn't actually ever use that in the

2111
02:03:46,859 --> 02:03:50,819
game system but we did run it as a

2112
02:03:48,539 --> 02:03:53,369
separate like we compiled it as its own

2113
02:03:50,819 --> 02:03:55,349
thing and ran it and that's a pretty

2114
02:03:53,369 --> 02:03:57,180
handy thing to do if you have a

2115
02:03:55,350 --> 02:03:59,340
reasonable code base that does something

2116
02:03:57,180 --> 02:04:01,619
like PNG reading that you're doing you

2117
02:03:59,340 --> 02:04:04,140
can run them side by side to see if you

2118
02:04:01,619 --> 02:04:07,050
got something wrong because you know you

2119
02:04:04,140 --> 02:04:09,090
very well may have and we had we had we

2120
02:04:07,050 --> 02:04:11,650
had we were flushing too many bytes in

2121
02:04:09,090 --> 02:04:13,719
in a place we were flushing 1x

2122
02:04:11,649 --> 02:04:19,889
by then we should have and we learned

2123
02:04:13,719 --> 02:04:19,890
that by looking at at Shawn's PNG reader

2124
02:04:20,429 --> 02:04:24,460
since you already have deflate decoder

2125
02:04:23,170 --> 02:04:26,560
inputted in PNG reader will you

2126
02:04:24,460 --> 02:04:29,109
implement implement deflate compressor

2127
02:04:26,560 --> 02:04:30,429
for asset files we could we'll see

2128
02:04:29,109 --> 02:04:31,750
that's kind of debt we don't care about

2129
02:04:30,429 --> 02:04:34,390
that right now but down the line we

2130
02:04:31,750 --> 02:04:36,698
might speaking of stupid driver

2131
02:04:34,390 --> 02:04:38,949
distributions Sony only has Dualshock 3

2132
02:04:36,698 --> 02:04:46,500
drivers for PC packaged with their PS

2133
02:04:38,948 --> 02:04:50,678
now software ridiculous DualShock 3 is

2134
02:04:46,500 --> 02:04:56,079
which one is DualShock 3 is is DualShock

2135
02:04:50,679 --> 02:04:57,899
3 is DualShock 3 the PlayStation 4

2136
02:04:56,079 --> 02:05:00,519
controller

2137
02:04:57,899 --> 02:05:03,460
what's the DualShock 3 so I don't know

2138
02:05:00,520 --> 02:05:04,929
the DualShock versions so he just

2139
02:05:03,460 --> 02:05:06,520
struggling with getting that the darn

2140
02:05:04,929 --> 02:05:09,130
controller to work ok

2141
02:05:06,520 --> 02:05:12,640
my poor friend said when Windows last

2142
02:05:09,130 --> 02:05:14,650
updated for her it took 4 hours yeah I'm

2143
02:05:12,640 --> 02:05:17,380
not surprised do you think Linux will

2144
02:05:14,649 --> 02:05:18,939
take over that seems unlikely also

2145
02:05:17,380 --> 02:05:21,130
remember the PlayStation 3 had links for

2146
02:05:18,939 --> 02:05:25,750
it no I don't think so because Linux is

2147
02:05:21,130 --> 02:05:27,340
just as bad I think you could switch to

2148
02:05:25,750 --> 02:05:29,469
Linux and have just an equally

2149
02:05:27,340 --> 02:05:30,730
frustrating experience with Windows but

2150
02:05:29,469 --> 02:05:32,890
I don't think that's what's gonna woo

2151
02:05:30,729 --> 02:05:34,238
consumers you can't really wow consumers

2152
02:05:32,890 --> 02:05:36,550
by saying hey you can be just as

2153
02:05:34,238 --> 02:05:38,289
frustrated over here as you are over

2154
02:05:36,550 --> 02:05:39,820
there oh and by the way there's less

2155
02:05:38,289 --> 02:05:42,460
games over here like that's not a

2156
02:05:39,819 --> 02:05:44,229
value-add right but if someone like Sony

2157
02:05:42,460 --> 02:05:46,029
actually spent some time making a little

2158
02:05:44,229 --> 02:05:47,349
desktop and ship that with a mouse and

2159
02:05:46,029 --> 02:05:51,309
keyboard I think they could just

2160
02:05:47,350 --> 02:05:52,630
annihilate Windows I don't think they'd

2161
02:05:51,310 --> 02:05:54,580
have any problem with that right it

2162
02:05:52,630 --> 02:05:56,380
there's really not much to it we know is

2163
02:05:54,579 --> 02:05:58,840
almost completely unusable nowadays I

2164
02:05:56,380 --> 02:06:00,579
mean it's mine barely saves running and

2165
02:05:58,840 --> 02:06:03,239
I don't even do anything on this one

2166
02:06:00,579 --> 02:06:03,238
right

2167
02:06:14,908 --> 02:06:18,368
what would it take to make it more

2168
02:06:16,899 --> 02:06:22,019
designer friendly to develop on an

2169
02:06:18,368 --> 02:06:25,389
Ubuntu or Fedora platform first so I

2170
02:06:22,020 --> 02:06:27,880
mean I don't really think Linux has a

2171
02:06:25,389 --> 02:06:29,469
future as a consumer OS I really don't

2172
02:06:27,880 --> 02:06:31,719
think so I mean I know a lot of people

2173
02:06:29,469 --> 02:06:33,698
constantly think that it's going to but

2174
02:06:31,719 --> 02:06:37,210
it's just not and the reason for that is

2175
02:06:33,698 --> 02:06:38,559
you can't have a consumer platform

2176
02:06:37,210 --> 02:06:41,198
that's inconsistent

2177
02:06:38,560 --> 02:06:43,750
the thing about Linux is there's a

2178
02:06:41,198 --> 02:06:46,868
billion versions of it right you try to

2179
02:06:43,750 --> 02:06:49,118
look for an answer to a question and you

2180
02:06:46,868 --> 02:06:51,488
find 50 answers to the question none of

2181
02:06:49,118 --> 02:06:53,319
which work on your machine and half of

2182
02:06:51,488 --> 02:06:55,658
them involve a command line you know

2183
02:06:53,319 --> 02:06:59,170
that that's not sustainable you need a

2184
02:06:55,658 --> 02:07:02,138
simple reliable system that people who

2185
02:06:59,170 --> 02:07:03,399
don't understand computers can use and I

2186
02:07:02,139 --> 02:07:06,850
think that's what Linux people don't

2187
02:07:03,399 --> 02:07:11,500
understand you need when you type in

2188
02:07:06,850 --> 02:07:12,880
something how do I fix my bla it needs

2189
02:07:11,500 --> 02:07:15,969
to come up with one answer and that

2190
02:07:12,880 --> 02:07:17,920
answer needs to work right it can't come

2191
02:07:15,969 --> 02:07:21,189
up with 15 answers like oh are you on a

2192
02:07:17,920 --> 02:07:23,199
bun to 14.1 Oh open up the console and

2193
02:07:21,189 --> 02:07:26,678
then run this command to see how many

2194
02:07:23,198 --> 02:07:29,939
ethernet adapters yeah look free no no

2195
02:07:26,679 --> 02:07:33,250
an artist isn't gonna do that an

2196
02:07:29,939 --> 02:07:37,738
accountant isn't gonna do that only a

2197
02:07:33,250 --> 02:07:37,738
computer aficionado is gonna do that

2198
02:07:38,310 --> 02:07:42,699
it's just it's untenable Linux isn't

2199
02:07:41,229 --> 02:07:44,488
even anywhere close to being consumer

2200
02:07:42,698 --> 02:07:47,019
operating system it's nowhere close

2201
02:07:44,488 --> 02:07:48,368
right now that doesn't mean maybe

2202
02:07:47,020 --> 02:07:50,350
something the community couldn't

2203
02:07:48,368 --> 02:07:53,229
consolidate and say we're only gonna

2204
02:07:50,350 --> 02:07:54,460
ship one build from now on everything's

2205
02:07:53,229 --> 02:07:56,439
gonna be on this build we're gonna

2206
02:07:54,460 --> 02:08:01,389
simplify everything so you never need to

2207
02:07:56,439 --> 02:08:05,919
open a console sure maybe but they

2208
02:08:01,389 --> 02:08:10,029
haven't done it in 20 30 years whatever

2209
02:08:05,920 --> 02:08:13,060
it's been since 1992 10 12 and 14 they

2210
02:08:10,029 --> 02:08:16,139
haven't done it in 16 years why do you

2211
02:08:13,060 --> 02:08:16,139
think they're gonna do it now

2212
02:08:36,550 --> 02:08:41,409
em SVC does a terrible job with mod

2213
02:08:42,368 --> 02:08:45,908
let's see here

2214
02:08:46,868 --> 02:08:51,069
so insert some God bolt links

2215
02:09:00,060 --> 02:09:06,370
so I guess it won't do it interesting so

2216
02:09:04,380 --> 02:09:08,789
maybe we will have to do and with the

2217
02:09:06,369 --> 02:09:08,789
minus one

2218
02:09:18,880 --> 02:09:23,210
enemy masks are you going to support

2219
02:09:20,810 --> 02:09:25,310
more complex languages coding your own

2220
02:09:23,210 --> 02:09:26,810
Harbaugh's text shaping equivalent uh no

2221
02:09:25,310 --> 02:09:33,140
I think that's probably gonna be outside

2222
02:09:26,810 --> 02:09:36,170
the scope of of handmade hero I just

2223
02:09:33,140 --> 02:09:38,329
don't have the knowledge of that stuff

2224
02:09:36,170 --> 02:09:39,739
that I would need to do a good job so we

2225
02:09:38,329 --> 02:09:45,739
will probably try to keep that sort of

2226
02:09:39,739 --> 02:09:47,809
thing to a minimum would be my guess but

2227
02:09:45,739 --> 02:09:51,010
I don't know maybe we should go the

2228
02:09:47,810 --> 02:09:51,010
other way and learn it I don't know

2229
02:09:53,439 --> 02:09:59,869
frost you mean the sixaxis ps3

2230
02:09:56,630 --> 02:10:02,900
controller ah yeah the sixaxis ps3

2231
02:09:59,869 --> 02:10:05,689
controllers are are much harder to read

2232
02:10:02,899 --> 02:10:08,359
on Windows due to the way that their

2233
02:10:05,689 --> 02:10:11,960
initialization procedure works and

2234
02:10:08,359 --> 02:10:13,729
whether they do wireless or wired the

2235
02:10:11,960 --> 02:10:18,909
ps4 controller is very nice it just

2236
02:10:13,729 --> 02:10:18,909
pretty much just works when plugged in

2237
02:10:20,289 --> 02:10:25,970
so our plan to infiltrate Microsoft

2238
02:10:22,760 --> 02:10:27,739
macam in Windows I don't know I mean

2239
02:10:25,970 --> 02:10:29,720
it's it's miserable it's just miserable

2240
02:10:27,739 --> 02:10:31,550
I don't understand why they can't just

2241
02:10:29,720 --> 02:10:33,230
ship a reasonable operating system and I

2242
02:10:31,550 --> 02:10:35,300
think it's because they just don't want

2243
02:10:33,229 --> 02:10:36,919
to you know if they seem to be

2244
02:10:35,300 --> 02:10:38,869
preoccupied with all this other stuff

2245
02:10:36,920 --> 02:10:43,310
why is there a 3d paint program

2246
02:10:38,869 --> 02:10:45,710
installed by default you know what was

2247
02:10:43,310 --> 02:10:48,260
wire resources goodies they can't even

2248
02:10:45,710 --> 02:10:48,710
ship in the operating system party a

2249
02:10:48,260 --> 02:10:50,360
person

2250
02:10:48,710 --> 02:10:52,250
what's all the rest of this garbage I

2251
02:10:50,359 --> 02:10:55,369
don't want a new shell I don't want an

2252
02:10:52,250 --> 02:10:58,039
edgy Windows interface I don't care

2253
02:10:55,369 --> 02:10:58,430
about that stuff get that stuff out of

2254
02:10:58,039 --> 02:11:01,789
here

2255
02:10:58,430 --> 02:11:04,579
I don't want JavaScript integrated tiles

2256
02:11:01,789 --> 02:11:10,220
for my weather report or whatever like

2257
02:11:04,579 --> 02:11:12,229
that stuff is if you've already shipped

2258
02:11:10,220 --> 02:11:14,180
an operating system that works you

2259
02:11:12,229 --> 02:11:17,029
haven't done that you shouldn't have

2260
02:11:14,180 --> 02:11:19,400
anyone working on anything else until

2261
02:11:17,029 --> 02:11:22,729
you actually can ship the operating

2262
02:11:19,399 --> 02:11:26,439
system and make it work which they

2263
02:11:22,729 --> 02:11:26,439
cannot do apparently

2264
02:11:27,788 --> 02:11:38,170
oh yeah and frosting it yeah you need

2265
02:11:34,689 --> 02:11:41,038
this us it's a USB handshake thing that

2266
02:11:38,170 --> 02:11:48,908
has to happen yeah exactly

2267
02:11:41,038 --> 02:11:50,319
for those ps3 controls um is it true you

2268
02:11:48,908 --> 02:11:52,420
can't enable the controller through user

2269
02:11:50,319 --> 02:11:54,670
land win32 so you've got a B in kernel

2270
02:11:52,420 --> 02:11:55,929
mode is that basically what happens are

2271
02:11:54,670 --> 02:11:58,359
you sure about that

2272
02:11:55,929 --> 02:12:03,569
I guess I don't really know I've never

2273
02:11:58,359 --> 02:12:03,569
tried to do that handshake in user mode

2274
02:12:21,899 --> 02:12:25,920
alright looks like the end of the

2275
02:12:23,559 --> 02:12:25,920
questions

2276
02:12:37,529 --> 02:12:44,009
oh I realize I forgot a part of that

2277
02:12:41,069 --> 02:12:46,049
story too actually part of the story of

2278
02:12:44,010 --> 02:12:48,630
trying to get Anna's computer work also

2279
02:12:46,050 --> 02:12:51,210
involved having to unplug the television

2280
02:12:48,630 --> 02:12:55,020
from it because it wasn't coming up on

2281
02:12:51,210 --> 02:12:58,399
the monitor there the story I told about

2282
02:12:55,020 --> 02:13:00,930
was it was actually a a better was was I

2283
02:12:58,399 --> 02:13:04,639
didn't even list some of the bugs we had

2284
02:13:00,930 --> 02:13:04,640
to work around now that I think about it

2285
02:13:11,449 --> 02:13:14,699
too legit to quit isn't a big part of

2286
02:13:13,829 --> 02:13:16,170
the issue that the operating system

2287
02:13:14,699 --> 02:13:18,239
would need a lot of traction if Jonathan

2288
02:13:16,170 --> 02:13:19,619
or someone like you built an OS it would

2289
02:13:18,239 --> 02:13:20,789
need a very soon to come out attraction

2290
02:13:19,619 --> 02:13:24,149
to incentivize game fairs to bill for

2291
02:13:20,789 --> 02:13:25,439
that platform it's hard to say game

2292
02:13:24,149 --> 02:13:26,789
developers are pretty used to shipping

2293
02:13:25,439 --> 02:13:28,109
on lots of platforms right now so I

2294
02:13:26,789 --> 02:13:30,269
don't really know that there's that much

2295
02:13:28,109 --> 02:13:32,759
traction that's the problem I think more

2296
02:13:30,270 --> 02:13:35,250
the problem is just how big of a project

2297
02:13:32,760 --> 02:13:38,220
it is right I think the reason that

2298
02:13:35,250 --> 02:13:41,520
Linux Mac Windows is basically the only

2299
02:13:38,220 --> 02:13:44,010
games in town now is because it's just a

2300
02:13:41,520 --> 02:13:47,490
huge undertaking with not a whole lot of

2301
02:13:44,010 --> 02:13:50,460
upside to it right so the only real

2302
02:13:47,489 --> 02:13:53,399
reason to do it is because it's gotten

2303
02:13:50,460 --> 02:13:55,710
so bad so it's like a frustration based

2304
02:13:53,399 --> 02:13:59,519
project you know and it's just hard to

2305
02:13:55,710 --> 02:14:02,460
get up enough anger to make that happen

2306
02:13:59,520 --> 02:14:04,610
right so I think that's why it's like

2307
02:14:02,460 --> 02:14:07,319
all these operating systems are garbage

2308
02:14:04,609 --> 02:14:10,529
and none of them have their priorities

2309
02:14:07,319 --> 02:14:12,750
straight but what are you gonna do it's

2310
02:14:10,529 --> 02:14:17,639
a massive undertaking to ship for an

2311
02:14:12,750 --> 02:14:19,140
operating system and it costs a lot of

2312
02:14:17,640 --> 02:14:23,010
money and you need a lot of really good

2313
02:14:19,140 --> 02:14:24,780
people and you need you have to do a

2314
02:14:23,010 --> 02:14:26,159
better job than they did otherwise

2315
02:14:24,779 --> 02:14:30,329
you're just making a fourth operating

2316
02:14:26,159 --> 02:14:32,010
system that also is crappy right so you

2317
02:14:30,329 --> 02:14:34,079
don't you know it's a really big deal

2318
02:14:32,010 --> 02:14:35,130
and I don't think traction is probably

2319
02:14:34,079 --> 02:14:38,039
the biggest problem

2320
02:14:35,130 --> 02:14:41,310
oddly enough I think the the biggest

2321
02:14:38,039 --> 02:14:45,329
problem is is really the undertaking it

2322
02:14:41,310 --> 02:14:47,160
is a serious undertaking it is it is

2323
02:14:45,329 --> 02:14:49,289
something that that requires a lot of

2324
02:14:47,159 --> 02:14:51,449
dedicated time and energy from several

2325
02:14:49,289 --> 02:14:53,340
people and I think that's just

2326
02:14:51,449 --> 02:14:56,090
Brij that someday we probably have to

2327
02:14:53,340 --> 02:14:59,390
cross if we want to save pc computing

2328
02:14:56,090 --> 02:15:01,680
but it's you know it's a big it's a big

2329
02:14:59,390 --> 02:15:09,930
head of steam that has to get built up

2330
02:15:01,680 --> 02:15:11,340
there alright thank you everyone for

2331
02:15:09,930 --> 02:15:13,170
joining Philip said handmade here it's a

2332
02:15:11,340 --> 02:15:14,220
touch recording with you as always if

2333
02:15:13,170 --> 02:15:15,420
you want to follow along the series at

2334
02:15:14,220 --> 02:15:17,369
home you can as career to the game on

2335
02:15:15,420 --> 02:15:19,170
handmade hero org comes with a source

2336
02:15:17,369 --> 02:15:20,550
code so you can follow along with it if

2337
02:15:19,170 --> 02:15:22,140
you want to try your hand at running out

2338
02:15:20,550 --> 02:15:23,550
those asset things you can actually do

2339
02:15:22,140 --> 02:15:25,310
that if you've got the source code you

2340
02:15:23,550 --> 02:15:29,070
can see if you can do it this week

2341
02:15:25,310 --> 02:15:32,100
before I do it it's probably pretty good

2342
02:15:29,069 --> 02:15:33,539
practice I while we're at it we also

2343
02:15:32,100 --> 02:15:35,070
have a new website I mentioned this

2344
02:15:33,539 --> 02:15:36,750
yesterday I'll keep mentioning it since

2345
02:15:35,069 --> 02:15:38,579
new people come into the stream we have

2346
02:15:36,750 --> 02:15:40,979
a watch page you can go to it's got the

2347
02:15:38,579 --> 02:15:44,279
live stream on it when we are live in

2348
02:15:40,979 --> 02:15:46,139
the schedule on it when we don't and oh

2349
02:15:44,279 --> 02:15:47,460
and of course twitch ads but like I said

2350
02:15:46,140 --> 02:15:49,950
we don't actually get any money for

2351
02:15:47,460 --> 02:15:51,180
twitch ads so that's just something baby

2352
02:15:49,949 --> 02:15:52,559
insert into the stream hopefully if

2353
02:15:51,180 --> 02:15:54,150
you're an Amazon Prime customer or

2354
02:15:52,560 --> 02:15:56,580
whatever else there are the ads go away

2355
02:15:54,149 --> 02:15:58,170
it's also got buttons to hotlink to

2356
02:15:56,579 --> 02:15:59,850
things and then we also have the episode

2357
02:15:58,170 --> 02:16:03,119
guide here maintained by the fabulous

2358
02:15:59,850 --> 02:16:05,039
midlow it allows you to search for stuff

2359
02:16:03,119 --> 02:16:06,359
so if you want to see when I'm

2360
02:16:05,039 --> 02:16:08,519
complaining about Microsoft for example

2361
02:16:06,359 --> 02:16:11,489
you can quickly type that in and see all

2362
02:16:08,520 --> 02:16:13,110
of the part parts of it here jump right

2363
02:16:11,489 --> 02:16:14,670
to them which is pretty awesome so this

2364
02:16:13,109 --> 02:16:16,199
is just a great way to catch up on old

2365
02:16:14,670 --> 02:16:20,550
things or fine particular things you

2366
02:16:16,199 --> 02:16:23,309
wanted to hear me talk about buried in

2367
02:16:20,550 --> 02:16:25,800
the archives of handmade hero that's it

2368
02:16:23,310 --> 02:16:27,060
for this week check the watch page for

2369
02:16:25,800 --> 02:16:29,550
the schedule I'll be updating it right

2370
02:16:27,060 --> 02:16:31,950
after this with once I check my calendar

2371
02:16:29,550 --> 02:16:33,270
so it should say when we're going to be

2372
02:16:31,949 --> 02:16:35,459
live again

2373
02:16:33,270 --> 02:16:37,590
that's about it I hope everyone has some

2374
02:16:35,459 --> 02:16:41,089
programming this week and I'll see you

2375
02:16:37,590 --> 02:16:41,090
folks next time take your news everybody

