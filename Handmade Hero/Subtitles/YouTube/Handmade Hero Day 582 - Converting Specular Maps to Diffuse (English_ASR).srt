1
00:00:02,448 --> 00:00:06,269
hello everyone and welcome to hand made

2
00:00:05,009 --> 00:00:10,679
here oh sure we could a complete-game

3
00:00:06,269 --> 00:00:13,199
live on stream so we're in a bit of a

4
00:00:10,679 --> 00:00:16,560
bind now we basically got our octahedral

5
00:00:13,199 --> 00:00:18,660
sampling working we believe the lighting

6
00:00:16,559 --> 00:00:20,969
is working properly with it actually so

7
00:00:18,660 --> 00:00:23,939
you know we tested some putting

8
00:00:20,969 --> 00:00:27,149
basically test values into the

9
00:00:23,939 --> 00:00:29,278
octahedral voxel distribution and it

10
00:00:27,149 --> 00:00:30,178
looks good I mean it seemed to work

11
00:00:29,278 --> 00:00:33,479
pretty well actually

12
00:00:30,178 --> 00:00:35,250
and so now we're at sort of the point

13
00:00:33,479 --> 00:00:40,229
where we have to kind of finish things

14
00:00:35,250 --> 00:00:41,280
off and in order to get there we well we

15
00:00:40,229 --> 00:00:44,429
need two things really

16
00:00:41,280 --> 00:00:46,879
we need to debug our lighting sort of

17
00:00:44,429 --> 00:00:49,140
stability and sampling over time and

18
00:00:46,878 --> 00:00:50,429
then the other thing which is the really

19
00:00:49,140 --> 00:00:51,869
big one because debugging is just

20
00:00:50,429 --> 00:00:54,689
something we can just do right that's

21
00:00:51,869 --> 00:00:57,509
just a process the big one is the

22
00:00:54,689 --> 00:00:59,698
unknown and I do not know exactly what

23
00:00:57,509 --> 00:01:02,878
we're gonna do for it which is that we

24
00:00:59,698 --> 00:01:05,789
need some way of sampling the diffuse

25
00:01:02,878 --> 00:01:07,560
component of the lighting so with the

26
00:01:05,790 --> 00:01:09,810
octahedral Maps what you'll remember

27
00:01:07,560 --> 00:01:11,820
what you'll recall about them is at the

28
00:01:09,810 --> 00:01:13,650
moment anyway we saw them as eight by

29
00:01:11,819 --> 00:01:15,629
eights they have a one pixel border as

30
00:01:13,650 --> 00:01:18,719
well but the actual lighting information

31
00:01:15,629 --> 00:01:21,359
is an eight by eight and if you recall

32
00:01:18,719 --> 00:01:22,590
the idea behind these is that they can

33
00:01:21,359 --> 00:01:24,560
tell us the light that's incoming from

34
00:01:22,590 --> 00:01:27,270
any particular direction which is great

35
00:01:24,560 --> 00:01:30,420
unfortunately for us in order to do a

36
00:01:27,269 --> 00:01:31,949
diffuse lighting equation when we look

37
00:01:30,420 --> 00:01:33,719
at a surface and say how much light is

38
00:01:31,950 --> 00:01:36,840
bouncing off the surface in a particular

39
00:01:33,719 --> 00:01:38,819
direction well normally what you have to

40
00:01:36,840 --> 00:01:41,549
do is sum the light that's coming in

41
00:01:38,819 --> 00:01:43,319
from a whole host of other directions

42
00:01:41,549 --> 00:01:47,040
right that's what makes a surface

43
00:01:43,319 --> 00:01:49,078
diffuse is that it doesn't just go from

44
00:01:47,040 --> 00:01:51,329
one direction so normally what we would

45
00:01:49,078 --> 00:01:53,219
do is if we were just computing specular

46
00:01:51,328 --> 00:01:54,779
all we need to do is one octahedral look

47
00:01:53,219 --> 00:01:58,530
up in the octahedral map and it tells us

48
00:01:54,780 --> 00:02:00,478
exactly within the error tolerance of

49
00:01:58,530 --> 00:02:02,399
the low number of samples but it tells

50
00:02:00,478 --> 00:02:04,530
us exactly from the maps perspective

51
00:02:02,399 --> 00:02:09,479
what the incoming light at that point

52
00:02:04,530 --> 00:02:11,939
should be so that's what we want for

53
00:02:09,479 --> 00:02:13,500
specular but once we move to diffuse and

54
00:02:11,939 --> 00:02:14,579
we say what's the

55
00:02:13,500 --> 00:02:17,099
uess like coming out in this direction

56
00:02:14,580 --> 00:02:21,030
that actually would require us to sample

57
00:02:17,099 --> 00:02:23,189
all of the directions in a hemisphere

58
00:02:21,030 --> 00:02:28,349
and at an 8 by 8 that means we're

59
00:02:23,189 --> 00:02:33,209
looking at something like a 8 by 4 right

60
00:02:28,349 --> 00:02:36,719
so we require 8 by 4 samples to produce

61
00:02:33,209 --> 00:02:41,009
a diffuse that completely accurate from

62
00:02:36,719 --> 00:02:43,530
given the map answer it would be it

63
00:02:41,009 --> 00:02:47,519
would literally be like in a that many

64
00:02:43,530 --> 00:02:50,459
samples to produce a answer for how much

65
00:02:47,520 --> 00:02:54,060
light there should be coming out right

66
00:02:50,459 --> 00:02:56,610
and so that's just really really

67
00:02:54,060 --> 00:02:58,349
expensive and so it's unclear that we

68
00:02:56,610 --> 00:02:59,910
would ever want to actually have it you

69
00:02:58,349 --> 00:03:02,400
know that we'd ever want to do the

70
00:02:59,909 --> 00:03:04,379
scheme that way especially when we

71
00:03:02,400 --> 00:03:08,069
consider that we're taking these samples

72
00:03:04,379 --> 00:03:10,889
very often and so it's like especially

73
00:03:08,069 --> 00:03:12,329
at render time right especially you know

74
00:03:10,889 --> 00:03:13,769
it's one thing to talk about how we're

75
00:03:12,330 --> 00:03:17,219
doing it when we actually do the light

76
00:03:13,770 --> 00:03:19,380
sampling for propagation because there

77
00:03:17,219 --> 00:03:21,330
we're probably sampling less often and

78
00:03:19,379 --> 00:03:25,709
there maybe you would say just sample

79
00:03:21,330 --> 00:03:27,120
the thing and pay the cost but when

80
00:03:25,709 --> 00:03:30,299
we're actually talking about run time

81
00:03:27,120 --> 00:03:32,909
every pixel on the screen goes through

82
00:03:30,299 --> 00:03:35,939
this lighting equation and sampling all

83
00:03:32,909 --> 00:03:37,620
of that is not necessarily a good idea

84
00:03:35,939 --> 00:03:45,299
it's hard to say but it doesn't seem

85
00:03:37,620 --> 00:03:48,000
like it right now admittedly maybe

86
00:03:45,299 --> 00:03:50,340
that's just wrong you know I'm saying I

87
00:03:48,000 --> 00:03:51,889
don't actually know and it may be

88
00:03:50,340 --> 00:03:56,340
something that we kind of want to test

89
00:03:51,889 --> 00:03:58,919
because if we actually go in and look we

90
00:03:56,340 --> 00:04:02,879
may find that when we when we actually

91
00:03:58,919 --> 00:04:06,449
see how much it costs maybe the card

92
00:04:02,879 --> 00:04:08,459
already has the information on it that

93
00:04:06,449 --> 00:04:12,659
we need so you know maybe the card

94
00:04:08,459 --> 00:04:14,879
already has when you pull in that

95
00:04:12,659 --> 00:04:16,409
texture it already grabbed the region

96
00:04:14,879 --> 00:04:18,329
around it so taking all those extra

97
00:04:16,410 --> 00:04:21,169
samples just doesn't matter right there

98
00:04:18,329 --> 00:04:24,689
like more or less free to add together

99
00:04:21,168 --> 00:04:26,698
that could be I don't think that story

100
00:04:24,689 --> 00:04:29,879
would hold up on lower-end

101
00:04:26,699 --> 00:04:34,889
but it might hold up on hiring cards as

102
00:04:29,879 --> 00:04:36,539
far as the rest of its concerned well it

103
00:04:34,889 --> 00:04:38,430
does seem like we have some options we

104
00:04:36,538 --> 00:04:39,899
could explore for example if we

105
00:04:38,430 --> 00:04:42,060
downsample our maps so they're much

106
00:04:39,899 --> 00:04:44,098
smaller like let's say that we down

107
00:04:42,060 --> 00:04:47,490
sample our maps down to a two by two

108
00:04:44,098 --> 00:04:50,098
right at that point it may be the case

109
00:04:47,490 --> 00:04:51,478
that well now you can just take one

110
00:04:50,098 --> 00:04:55,800
sample and you basically get the

111
00:04:51,478 --> 00:04:58,110
incoming lighting right because at that

112
00:04:55,800 --> 00:05:00,180
point you've averaged things together

113
00:04:58,110 --> 00:05:02,610
and you sort of produced like average

114
00:05:00,180 --> 00:05:04,259
lighting over the hemisphere the problem

115
00:05:02,610 --> 00:05:07,139
with this is it's not cosine weighted

116
00:05:04,259 --> 00:05:09,389
which it should be in order to be you

117
00:05:07,139 --> 00:05:11,519
know a correct sort of letting equation

118
00:05:09,389 --> 00:05:14,490
it should actually be cosine weighted

119
00:05:11,519 --> 00:05:15,870
now I don't know how much that would

120
00:05:14,490 --> 00:05:17,490
really matter because again we're not

121
00:05:15,870 --> 00:05:19,019
trying to get the lighting accurate

122
00:05:17,490 --> 00:05:23,418
we're just trying to get lighting that's

123
00:05:19,019 --> 00:05:26,310
good that looks good so my assumption

124
00:05:23,418 --> 00:05:29,310
like I'm assuming our best way out of

125
00:05:26,310 --> 00:05:36,300
this is to just do a down sample of the

126
00:05:29,310 --> 00:05:38,310
map that's my assumption so my guess is

127
00:05:36,300 --> 00:05:39,900
what we're probably gonna want to do is

128
00:05:38,310 --> 00:05:44,009
we're probably gonna want to say all

129
00:05:39,899 --> 00:05:48,120
right let's take this map let's down

130
00:05:44,009 --> 00:05:50,848
sample the map down to probably a two by

131
00:05:48,120 --> 00:05:52,978
two so basically the maps in general

132
00:05:50,848 --> 00:05:55,019
would be four by four so two by two with

133
00:05:52,978 --> 00:05:58,050
a one pixel border that's just a copy of

134
00:05:55,019 --> 00:06:00,568
the two by two parts and then that's

135
00:05:58,050 --> 00:06:05,879
what we're going to put put in there now

136
00:06:00,569 --> 00:06:08,430
if that actually worked well that would

137
00:06:05,879 --> 00:06:11,099
be support like let's suppose that was

138
00:06:08,430 --> 00:06:13,439
good I don't know if it will be it might

139
00:06:11,098 --> 00:06:15,930
be crappy but let's suppose that was

140
00:06:13,439 --> 00:06:19,830
good if that was good

141
00:06:15,930 --> 00:06:23,519
that would be pretty compelling for a

142
00:06:19,829 --> 00:06:25,800
number of reasons primarily what we

143
00:06:23,519 --> 00:06:28,049
would really like about that is that now

144
00:06:25,800 --> 00:06:31,379
we have a fairly small map to send down

145
00:06:28,050 --> 00:06:33,389
to the graphics card right because now

146
00:06:31,379 --> 00:06:36,539
instead of a 10 by 10 for every probe we

147
00:06:33,389 --> 00:06:40,189
have a 4 by 4 that's significantly less

148
00:06:36,538 --> 00:06:46,669
right that's more than

149
00:06:40,189 --> 00:06:50,829
a four to one savings right a 10 by 10

150
00:06:46,670 --> 00:06:56,990
to a 4 by 4 is going from a hundred to

151
00:06:50,829 --> 00:06:58,519
16 right which is very very good for in

152
00:06:56,990 --> 00:07:00,340
terms of the bandwidth we would have to

153
00:06:58,519 --> 00:07:02,599
have to send it down to the card

154
00:07:00,339 --> 00:07:05,539
similarly it's a lot easier to sample a

155
00:07:02,600 --> 00:07:07,400
4x4 pulls in a lot less than a 10 by 10

156
00:07:05,540 --> 00:07:10,460
if you're sampling a lot of stuff from

157
00:07:07,399 --> 00:07:14,299
it right that's just a less memory

158
00:07:10,459 --> 00:07:16,629
footprint to go through the card so if

159
00:07:14,300 --> 00:07:19,430
that worked that would be great and

160
00:07:16,629 --> 00:07:22,610
furthermore I think we could probably

161
00:07:19,430 --> 00:07:24,290
say well what if we wanted a slightly

162
00:07:22,610 --> 00:07:27,410
better quality than that we probably

163
00:07:24,290 --> 00:07:32,870
could do something more like if we took

164
00:07:27,410 --> 00:07:35,360
a 4x4 with a one pixel border so that we

165
00:07:32,870 --> 00:07:37,670
ended up with so you know two by two of

166
00:07:35,360 --> 00:07:39,050
the one pixel border is a 4x4 maybe two

167
00:07:37,670 --> 00:07:43,550
4x4 were the one because board that'd be

168
00:07:39,050 --> 00:07:45,350
a 6x6 right that might be better because

169
00:07:43,550 --> 00:07:50,090
at that point we could take multiple

170
00:07:45,350 --> 00:07:53,000
samples from the interior 4x4 weight

171
00:07:50,089 --> 00:07:55,939
those together and we know that taking

172
00:07:53,000 --> 00:08:00,199
like a few samples like two or three or

173
00:07:55,939 --> 00:08:02,300
four probably wouldn't kill us so we

174
00:08:00,199 --> 00:08:03,979
could do something like that and so that

175
00:08:02,300 --> 00:08:05,780
would be like a hybrid in between the

176
00:08:03,980 --> 00:08:08,900
two so if we need more directional

177
00:08:05,779 --> 00:08:11,239
fidelity from our lighting which you

178
00:08:08,899 --> 00:08:15,259
know thinking about it if if you think

179
00:08:11,240 --> 00:08:21,850
about what a 2x2 is it's really probably

180
00:08:15,259 --> 00:08:25,370
not enough but a 4x4 might be right so

181
00:08:21,850 --> 00:08:27,830
thinking about in-betweens a 4x4 for the

182
00:08:25,370 --> 00:08:29,930
interior or a six by six total seems

183
00:08:27,829 --> 00:08:32,838
like it might be reasonable that's

184
00:08:29,930 --> 00:08:34,788
something we could do and that would

185
00:08:32,839 --> 00:08:36,380
allow us to take less samples as well

186
00:08:34,788 --> 00:08:38,210
but still get some more directional

187
00:08:36,379 --> 00:08:39,979
fidelity for all I know we wouldn't even

188
00:08:38,210 --> 00:08:42,740
really have to do much summing there it

189
00:08:39,979 --> 00:08:44,629
might be like just two samples or even

190
00:08:42,740 --> 00:08:47,289
one sample with the bilinear might be

191
00:08:44,629 --> 00:08:51,830
enough to get you what you need right

192
00:08:47,289 --> 00:08:53,990
and then finally we could just say all

193
00:08:51,830 --> 00:08:56,690
right if we want

194
00:08:53,990 --> 00:08:58,129
non down Sam like we want to do down

195
00:08:56,690 --> 00:09:01,400
sampling but we want to just take one

196
00:08:58,129 --> 00:09:03,889
sample at runtime we know that that's

197
00:09:01,399 --> 00:09:05,750
actually possible to because we could

198
00:09:03,889 --> 00:09:08,480
just pre compute what the diffuse should

199
00:09:05,750 --> 00:09:10,039
be from each point the reason that's not

200
00:09:08,480 --> 00:09:11,389
so attractive is because the down

201
00:09:10,039 --> 00:09:13,610
sampling operation becomes very

202
00:09:11,389 --> 00:09:16,189
expensive because technically in order

203
00:09:13,610 --> 00:09:19,610
to do that we would need to take sums of

204
00:09:16,190 --> 00:09:21,290
the entire 8x8 we have to take sums of

205
00:09:19,610 --> 00:09:23,690
entire sections of that and then sum

206
00:09:21,289 --> 00:09:26,179
them down into the parts that we write

207
00:09:23,690 --> 00:09:29,330
out and that is somewhat expensive right

208
00:09:26,179 --> 00:09:30,620
now it may be that that's still fine and

209
00:09:29,330 --> 00:09:33,020
maybe that that's the what we want to do

210
00:09:30,620 --> 00:09:34,580
I don't actually know it could be that

211
00:09:33,019 --> 00:09:36,439
we want sort of a hybrid of these two

212
00:09:34,580 --> 00:09:39,320
schemes so maybe what we want to do is

213
00:09:36,440 --> 00:09:43,840
like blur the 8x8 down to a 4x4 first

214
00:09:39,320 --> 00:09:47,330
and then do this I don't really know but

215
00:09:43,840 --> 00:09:50,780
my that's my feeling right is that's

216
00:09:47,330 --> 00:09:52,790
where we're at so my guess is what we

217
00:09:50,779 --> 00:09:55,490
should start with is probably a full

218
00:09:52,789 --> 00:09:59,029
solution and see where that gets us so

219
00:09:55,490 --> 00:10:03,259
you know maybe we do something like take

220
00:09:59,029 --> 00:10:06,169
the PI eight actually do the cosine

221
00:10:03,259 --> 00:10:08,990
waiting on it or something and produce

222
00:10:06,169 --> 00:10:10,370
another 8x8 that's and this is just a

223
00:10:08,990 --> 00:10:11,690
disaster like the reason that we

224
00:10:10,370 --> 00:10:14,960
wouldn't do this normally is because

225
00:10:11,690 --> 00:10:18,050
it's just it's too much math right the

226
00:10:14,960 --> 00:10:24,129
number of operations you need to take a

227
00:10:18,049 --> 00:10:28,789
8x8 and produce a new 8x8 that is the

228
00:10:24,129 --> 00:10:32,720
cosine weighted diffuse that maps so 8x8

229
00:10:28,789 --> 00:10:35,659
specular to an 8x8 diffuse is more or

230
00:10:32,720 --> 00:10:39,230
less every single you know even if you

231
00:10:35,659 --> 00:10:42,579
write it optimally out every single one

232
00:10:39,230 --> 00:10:47,090
of the 8x8 in the output so that's 64

233
00:10:42,580 --> 00:10:50,180
texels that you have to write that's oh

234
00:10:47,090 --> 00:10:56,139
each 64 Texel each each one of the 64

235
00:10:50,179 --> 00:10:59,859
texels itself has to some at least 32 of

236
00:10:56,139 --> 00:11:04,100
the inputs right

237
00:10:59,860 --> 00:11:05,629
so it'd be 32 times 64 operations for

238
00:11:04,100 --> 00:11:11,879
every 8x8 right

239
00:11:05,629 --> 00:11:14,700
at a minimum it's 2048 operations for

240
00:11:11,879 --> 00:11:16,559
each one of these things and so when you

241
00:11:14,700 --> 00:11:19,320
look at how many of those we have if

242
00:11:16,559 --> 00:11:20,759
you're talking about 32 by 32 by 32 by

243
00:11:19,320 --> 00:11:24,120
32 by 64

244
00:11:20,759 --> 00:11:26,819
here's your operation count at best

245
00:11:24,120 --> 00:11:35,639
right you're talking about 67 million

246
00:11:26,820 --> 00:11:37,649
math ops now the problem is again we

247
00:11:35,639 --> 00:11:39,838
have this sort of CPU GPU side problem

248
00:11:37,649 --> 00:11:42,509
maybe the answer there would just be

249
00:11:39,839 --> 00:11:44,670
well you know if you moved ray-tracing

250
00:11:42,509 --> 00:11:47,009
to the GPU well this doesn't look so bad

251
00:11:44,669 --> 00:11:49,199
anymore because the GPU just has tons

252
00:11:47,009 --> 00:11:52,860
and tons of flops sitting around so

253
00:11:49,200 --> 00:11:55,290
throwing 67 million flops at it isn't a

254
00:11:52,860 --> 00:11:56,820
huge deal it will you know be able to do

255
00:11:55,289 --> 00:11:58,889
that because these are parallelizable

256
00:11:56,820 --> 00:12:01,050
they're in fact perfectly parallelizable

257
00:11:58,889 --> 00:12:05,220
because every 8x8 is independent of

258
00:12:01,049 --> 00:12:08,219
every other 8x8 right on the GPU signed

259
00:12:05,220 --> 00:12:10,470
I'm a minister I'm CPU side I'm not as

260
00:12:08,220 --> 00:12:12,959
optimistic even if we assume you know

261
00:12:10,470 --> 00:12:15,540
this thing has like even eight threads

262
00:12:12,958 --> 00:12:16,319
operating the Sun at time each one of

263
00:12:15,539 --> 00:12:21,689
those threads would have to do eight

264
00:12:16,320 --> 00:12:23,670
million ops it's it's not great right I

265
00:12:21,690 --> 00:12:25,589
mean it's possible you know if we

266
00:12:23,669 --> 00:12:28,549
furthermore actually got the parallelism

267
00:12:25,589 --> 00:12:28,550
down it's 2 million

268
00:12:30,299 --> 00:12:37,240
it's just it just looks scary right it

269
00:12:33,159 --> 00:12:38,559
just looks scary and this is on top of

270
00:12:37,240 --> 00:12:40,690
whatever you were doing for lighting so

271
00:12:38,559 --> 00:12:44,318
it's it's like this is an additional

272
00:12:40,690 --> 00:12:45,970
stage that has to happen so you can see

273
00:12:44,318 --> 00:12:51,879
why this is kind of scary to me I don't

274
00:12:45,970 --> 00:12:54,220
really know I'm not super confident that

275
00:12:51,879 --> 00:12:57,100
that this is a great way to go unless it

276
00:12:54,220 --> 00:13:01,829
is on the GPU and so I just don't know

277
00:12:57,100 --> 00:13:06,550
what to do to to make this work and

278
00:13:01,828 --> 00:13:10,388
that's roughly where we're at now so

279
00:13:06,549 --> 00:13:12,278
yeah so I guess my first thought is

280
00:13:10,389 --> 00:13:13,089
maybe we should do it because then at

281
00:13:12,278 --> 00:13:15,278
least we'll have a gold standard

282
00:13:13,089 --> 00:13:17,920
reference so at least then we know what

283
00:13:15,278 --> 00:13:20,528
it will look like if we actually do sort

284
00:13:17,919 --> 00:13:22,689
of the optimal thing and then we can

285
00:13:20,528 --> 00:13:26,708
figure out how much was that costing us

286
00:13:22,690 --> 00:13:28,750
you know how bad is this right and from

287
00:13:26,708 --> 00:13:30,068
there we can maybe figure out what what

288
00:13:28,750 --> 00:13:35,259
our strategy is going to be going

289
00:13:30,068 --> 00:13:38,620
forward it does mean that I think if I'm

290
00:13:35,259 --> 00:13:43,209
not mistaken that if we were to do it

291
00:13:38,620 --> 00:13:44,709
this way and you know I don't know to

292
00:13:43,208 --> 00:13:47,049
what extent we're gonna want some

293
00:13:44,708 --> 00:13:48,669
specular sampling it may be that we want

294
00:13:47,049 --> 00:13:50,849
specular sampling in which case we still

295
00:13:48,669 --> 00:13:54,009
have to have the padding on the original

296
00:13:50,850 --> 00:13:56,259
but if we never use the specular for

297
00:13:54,009 --> 00:14:00,610
sampling if it's just used as an

298
00:13:56,259 --> 00:14:03,278
accumulation buffer effectively then we

299
00:14:00,610 --> 00:14:07,000
wouldn't need the padding on that so we

300
00:14:03,278 --> 00:14:10,059
could drop our 10 by 10 initial map to

301
00:14:07,000 --> 00:14:13,089
an 8 by 8 because you know it's more or

302
00:14:10,059 --> 00:14:15,609
less free to do that once you stop

303
00:14:13,089 --> 00:14:18,639
sampling from it so that's another thing

304
00:14:15,610 --> 00:14:21,938
and I don't know but that's where we're

305
00:14:18,639 --> 00:14:24,188
at so maybe I'll start with that we'll

306
00:14:21,938 --> 00:14:27,969
just try we'll see we'll see where we

307
00:14:24,188 --> 00:14:30,759
get I'm not optimistic about it but you

308
00:14:27,970 --> 00:14:32,500
know we'll see what happens so I'm gonna

309
00:14:30,759 --> 00:14:35,379
go ahead and get started looking at what

310
00:14:32,500 --> 00:14:38,438
that would entail and if we go back to

311
00:14:35,379 --> 00:14:40,448
the way that we had so our code we kind

312
00:14:38,438 --> 00:14:42,278
of wired up everything and it's we can

313
00:14:40,448 --> 00:14:43,719
flip it between the two but we do

314
00:14:42,278 --> 00:14:45,129
really have an answer for the raycast

315
00:14:43,720 --> 00:14:47,499
path yet cuz we don't really have a way

316
00:14:45,129 --> 00:14:51,100
to sample the rate the diffuse lighting

317
00:14:47,499 --> 00:14:55,149
so if we go in here and we change to

318
00:14:51,100 --> 00:14:58,389
doing our test lighting so when we look

319
00:14:55,149 --> 00:14:59,828
at the test lighting pass and you know I

320
00:14:58,389 --> 00:15:00,308
don't I don't even know why we have this

321
00:14:59,828 --> 00:15:01,748
anymore

322
00:15:00,308 --> 00:15:03,519
we can just get rid a lot of this stuff

323
00:15:01,749 --> 00:15:04,629
I don't think any of this stuff makes

324
00:15:03,519 --> 00:15:07,929
any sense we don't need any of this

325
00:15:04,629 --> 00:15:15,308
stuff do we yeah none of this stuff

326
00:15:07,929 --> 00:15:18,719
another stuff ISM is necessary what of

327
00:15:15,308 --> 00:15:18,719
what is all this for I don't even know

328
00:15:19,110 --> 00:15:24,789
okay right any stuff it's going away

329
00:15:21,009 --> 00:15:28,058
it's gone so anyway if we go in here and

330
00:15:24,789 --> 00:15:32,110
we just change our code at the immediate

331
00:15:28,058 --> 00:15:36,159
moment to use the diffuse sort of I'm

332
00:15:32,110 --> 00:15:39,159
sorry the the the point radio like the

333
00:15:36,159 --> 00:15:41,740
the sphere radius light so we're just

334
00:15:39,159 --> 00:15:43,808
stuffing the values in then what we

335
00:15:41,740 --> 00:15:50,970
should be able to see is when we

336
00:15:43,808 --> 00:15:53,049
actually run it in here so right here

337
00:15:50,970 --> 00:15:55,300
what we should be able to see when we

338
00:15:53,049 --> 00:15:56,919
run it is we should be able to to see

339
00:15:55,299 --> 00:16:00,490
that it's you know specular everywhere

340
00:15:56,919 --> 00:16:03,250
right and so when we hop out to you know

341
00:16:00,490 --> 00:16:06,129
a larger room or something like we can

342
00:16:03,250 --> 00:16:08,409
do out here so when we hop out to a

343
00:16:06,129 --> 00:16:11,980
larger room and we take a look you can

344
00:16:08,409 --> 00:16:14,948
kind of see right that the lighting is

345
00:16:11,980 --> 00:16:18,039
very specular right it's it's responding

346
00:16:14,948 --> 00:16:20,588
to me all over the place as I move the

347
00:16:18,039 --> 00:16:21,879
camera around and so if we wanted to get

348
00:16:20,589 --> 00:16:23,709
the filtering in there what we would

349
00:16:21,879 --> 00:16:26,980
probably primarily need to do here right

350
00:16:23,708 --> 00:16:29,678
is say all right what if we wanted this

351
00:16:26,980 --> 00:16:31,389
light to now be a diffuse light so that

352
00:16:29,678 --> 00:16:35,110
when we sample it we're actually getting

353
00:16:31,389 --> 00:16:37,389
diffuse lighting not specular lighting

354
00:16:35,110 --> 00:16:41,259
right so we want to be able to produce

355
00:16:37,389 --> 00:16:43,568
out of our out of our specular version

356
00:16:41,259 --> 00:16:47,620
we want to actually do that summation

357
00:16:43,568 --> 00:16:49,958
down so what would have to happen there

358
00:16:47,620 --> 00:16:52,149
is you know you can see us doing a loop

359
00:16:49,958 --> 00:16:56,208
here where we output everything you can

360
00:16:52,149 --> 00:16:59,828
see us doing the the voxel offset right

361
00:16:56,208 --> 00:17:05,480
so that's the actual edgeville there but

362
00:16:59,828 --> 00:17:08,658
right here here's us writing into the

363
00:17:05,480 --> 00:17:10,278
output voxel and you can see here

364
00:17:08,659 --> 00:17:12,890
grabbing out of the cell and writing it

365
00:17:10,278 --> 00:17:14,808
in or you know doing the sphere version

366
00:17:12,890 --> 00:17:18,649
right either way it's just the test code

367
00:17:14,808 --> 00:17:20,959
it's not good code and then we output to

368
00:17:18,648 --> 00:17:23,658
the voxel the information that we have

369
00:17:20,959 --> 00:17:25,880
right here and so the difference would

370
00:17:23,659 --> 00:17:29,419
be instead of actually outputting to the

371
00:17:25,880 --> 00:17:29,750
voxel here and an actual thing as we get

372
00:17:29,419 --> 00:17:31,759
it

373
00:17:29,750 --> 00:17:34,339
what we will be doing instead is

374
00:17:31,759 --> 00:17:36,230
building up these values and outputting

375
00:17:34,339 --> 00:17:38,928
them to do you know effectively a

376
00:17:36,230 --> 00:17:40,759
summation right so we'd have a temporary

377
00:17:38,929 --> 00:17:44,960
buffer where we produce all of these

378
00:17:40,759 --> 00:17:48,679
light values by you know either doing

379
00:17:44,960 --> 00:17:50,899
them here or outputting them right and

380
00:17:48,679 --> 00:17:54,288
then what we would do when we write them

381
00:17:50,898 --> 00:17:58,099
out is we would just go ahead from there

382
00:17:54,288 --> 00:18:00,679
and do the sort of the summation on it

383
00:17:58,099 --> 00:18:02,959
now in order to avoid us having to

384
00:18:00,679 --> 00:18:05,059
actually do sort of two different passes

385
00:18:02,960 --> 00:18:07,340
here what I'd like to do is change the

386
00:18:05,058 --> 00:18:09,109
way that we've got this code set up so

387
00:18:07,339 --> 00:18:12,379
that rather than having the test

388
00:18:09,109 --> 00:18:15,168
lighting happen in here I'd rather have

389
00:18:12,380 --> 00:18:17,120
it so that actually we go back to this

390
00:18:15,169 --> 00:18:19,190
method where we've got a test cast from

391
00:18:17,119 --> 00:18:22,398
probes versus a compute light

392
00:18:19,190 --> 00:18:25,278
propagation and we already and we always

393
00:18:22,398 --> 00:18:28,489
actually send it down with the transfer

394
00:18:25,278 --> 00:18:31,730
code I think that would be preferable

395
00:18:28,490 --> 00:18:35,319
right and so if in here we said all

396
00:18:31,730 --> 00:18:39,048
right like in test cast from probes

397
00:18:35,319 --> 00:18:41,778
which is in here if we actually use this

398
00:18:39,048 --> 00:18:45,829
code to to generate the stuff for us and

399
00:18:41,778 --> 00:18:47,538
not this code here I think that would be

400
00:18:45,829 --> 00:18:50,720
the first step so we could move like

401
00:18:47,538 --> 00:18:54,650
basically this code out to here and make

402
00:18:50,720 --> 00:18:57,579
sure that works reasonably so you know

403
00:18:54,650 --> 00:19:04,700
[Music]

404
00:18:57,579 --> 00:19:07,220
switching to this and this

405
00:19:04,700 --> 00:19:13,519
I want to go ahead and get get that

406
00:19:07,220 --> 00:19:17,569
transfer ready all right so you can see

407
00:19:13,519 --> 00:19:19,250
here we've got some weird weirdness go

408
00:19:17,569 --> 00:19:20,750
in there I don't know what that's from

409
00:19:19,250 --> 00:19:24,500
exactly

410
00:19:20,750 --> 00:19:31,789
in fact that's kind of that's kind of

411
00:19:24,500 --> 00:19:36,250
strange what what is that how how is

412
00:19:31,789 --> 00:19:36,250
that how is that producing such a tight

413
00:19:36,490 --> 00:19:41,390
well that's weird how is that producing

414
00:19:39,019 --> 00:19:46,400
such a tight interpolation around around

415
00:19:41,390 --> 00:19:47,960
the edge that's kind of peculiar to be

416
00:19:46,400 --> 00:19:48,830
honest with you I wouldn't have thought

417
00:19:47,960 --> 00:19:55,190
we could have got such a tight

418
00:19:48,829 --> 00:19:56,990
interpolation out of the edge oh you

419
00:19:55,190 --> 00:19:58,940
know why that is I think that's cuz this

420
00:19:56,990 --> 00:20:00,440
one doesn't like point then yeah yeah

421
00:19:58,940 --> 00:20:03,080
yeah that's why cuz it doesn't point the

422
00:20:00,440 --> 00:20:04,789
normals at it but isn't that weird like

423
00:20:03,079 --> 00:20:07,309
why are we getting that weird and what's

424
00:20:04,789 --> 00:20:10,009
what's that weird sort of like cut in

425
00:20:07,309 --> 00:20:12,740
the middle there I'm not sure what

426
00:20:10,009 --> 00:20:16,839
that's from that's just pretty peculiar

427
00:20:12,740 --> 00:20:20,000
right I don't know if it's some kind of

428
00:20:16,839 --> 00:20:22,629
map sampling weirdness or something

429
00:20:20,000 --> 00:20:25,640
so anyway I'd like to get that working

430
00:20:22,630 --> 00:20:29,060
more reliably and that way when we write

431
00:20:25,640 --> 00:20:31,070
the sphere so I want to still be able to

432
00:20:29,059 --> 00:20:34,669
do this thing so I want to be able to

433
00:20:31,069 --> 00:20:36,139
still do this in that in the in the

434
00:20:34,670 --> 00:20:40,340
tests and code but I want to get rid of

435
00:20:36,140 --> 00:20:42,830
this pass and so we only ever do a pass

436
00:20:40,339 --> 00:20:44,149
where we actually produce the diffuse or

437
00:20:42,829 --> 00:20:46,339
whatever we want to send to the card

438
00:20:44,150 --> 00:20:49,009
right but I don't want to have this

439
00:20:46,339 --> 00:20:52,509
separate debug pass so I want to always

440
00:20:49,009 --> 00:20:54,589
write through in tests castrum probes

441
00:20:52,509 --> 00:20:56,569
again I'm not sure what this is doing

442
00:20:54,589 --> 00:20:58,519
that's weird there you can see it

443
00:20:56,569 --> 00:21:00,799
writing the light see versus the clamp

444
00:20:58,519 --> 00:21:03,829
see here in doing spam voxel but I'm not

445
00:21:00,799 --> 00:21:06,649
sure why it's producing drastically

446
00:21:03,829 --> 00:21:08,869
different results in that sort of weird

447
00:21:06,650 --> 00:21:11,750
line case but what I'd like to do here

448
00:21:08,869 --> 00:21:14,809
is again so where this happens right

449
00:21:11,750 --> 00:21:16,759
kind of see it going on here instead of

450
00:21:14,809 --> 00:21:17,298
calling spam voxel what I'd like to do

451
00:21:16,759 --> 00:21:19,788
is

452
00:21:17,298 --> 00:21:22,759
is basically have another one of these

453
00:21:19,788 --> 00:21:26,408
so instead of test castrum probe there'd

454
00:21:22,759 --> 00:21:26,409
be something else which is like you know

455
00:21:27,579 --> 00:21:36,888
test lightsphere something something

456
00:21:34,099 --> 00:21:39,949
like this and then this code here just

457
00:21:36,888 --> 00:21:42,709
exists to fill the voxel itself so

458
00:21:39,950 --> 00:21:45,590
essentially like you know we would do

459
00:21:42,710 --> 00:21:47,869
exactly the code we're doing using the

460
00:21:45,589 --> 00:21:51,769
hot damn and everything we would come

461
00:21:47,868 --> 00:21:52,308
through here fill in the hole like light

462
00:21:51,769 --> 00:21:55,519
thing

463
00:21:52,308 --> 00:21:57,918
no checkerboard and no transfer but

464
00:21:55,519 --> 00:21:59,929
instead now we will look up the voxel

465
00:21:57,919 --> 00:22:03,980
cell and instead of going this way we'll

466
00:21:59,929 --> 00:22:05,960
go the other way right so this just

467
00:22:03,980 --> 00:22:07,669
allows us to write into the voxel our

468
00:22:05,960 --> 00:22:09,590
test pattern so that we're always

469
00:22:07,669 --> 00:22:17,299
picking it up from the test pattern

470
00:22:09,589 --> 00:22:20,558
later if that makes sense right all

471
00:22:17,298 --> 00:22:24,440
right so I think that's all we really

472
00:22:20,558 --> 00:22:29,388
need there and that produces our test

473
00:22:24,440 --> 00:22:32,480
sphere pattern so we could get rid of it

474
00:22:29,388 --> 00:22:34,908
here and we could call that we could

475
00:22:32,480 --> 00:22:37,099
leave it on transfer right and instead

476
00:22:34,909 --> 00:22:41,570
of test cast from probes we can call

477
00:22:37,099 --> 00:22:44,148
test light sphere with the solution and

478
00:22:41,569 --> 00:22:46,819
have that work now we will need the hot

479
00:22:44,148 --> 00:22:48,589
dim because we call that right well

480
00:22:46,819 --> 00:22:52,038
we'll need all the stuff that's here so

481
00:22:48,589 --> 00:22:54,738
we need like the light solution in the

482
00:22:52,038 --> 00:22:57,339
light position in that that junk so I'm

483
00:22:54,739 --> 00:23:02,079
gonna go ahead and grab that out here

484
00:22:57,339 --> 00:23:04,638
we'll grab this all this stuff like that

485
00:23:02,079 --> 00:23:08,829
and the hot dim should be up here

486
00:23:04,638 --> 00:23:08,829
somewhere know where it is there it is

487
00:23:09,648 --> 00:23:13,518
and we just need the lighting solution

488
00:23:11,599 --> 00:23:16,209
here and then I'll just grab all the

489
00:23:13,519 --> 00:23:19,170
things that we don't have

490
00:23:16,210 --> 00:23:22,328
we need commands in hot dim

491
00:23:19,170 --> 00:23:22,329
[Music]

492
00:23:25,509 --> 00:23:46,609
yeah group and light UVW where is light

493
00:23:43,819 --> 00:23:56,589
UVW being used right now all right there

494
00:23:46,609 --> 00:24:02,929
okay all right what else

495
00:23:56,589 --> 00:24:07,299
so setup that's just something we get

496
00:24:02,930 --> 00:24:10,340
off the render command group there we go

497
00:24:07,299 --> 00:24:17,000
all right so I think that should give us

498
00:24:10,339 --> 00:24:20,029
what we need I hope anyway there we go

499
00:24:17,000 --> 00:24:22,190
and so now inside that code we should

500
00:24:20,029 --> 00:24:24,109
get our light test and we do like that's

501
00:24:22,190 --> 00:24:27,590
exactly what we were getting before

502
00:24:24,109 --> 00:24:29,359
right so now that that's been isolated I

503
00:24:27,589 --> 00:24:32,629
can clean this code up and get rid of a

504
00:24:29,359 --> 00:24:34,309
lot of this stuff right so now we can

505
00:24:32,630 --> 00:24:38,690
just say all right we don't actually

506
00:24:34,309 --> 00:24:41,869
need in fact the if I'm not mistaken I

507
00:24:38,690 --> 00:24:43,930
cut that out as well yes so in in voxel

508
00:24:41,869 --> 00:24:46,879
dem can just be placed in here as well

509
00:24:43,930 --> 00:24:48,500
so this code can now you know get rid of

510
00:24:46,880 --> 00:24:51,410
all of this stuff right

511
00:24:48,500 --> 00:24:54,200
it won't need any of these things and it

512
00:24:51,410 --> 00:24:57,890
just needs the transfer code which we

513
00:24:54,200 --> 00:25:05,830
can now improve as well so we can nuke

514
00:24:57,890 --> 00:25:09,320
that we can delete all of this like so

515
00:25:05,829 --> 00:25:11,919
and we can just make these be direct

516
00:25:09,319 --> 00:25:11,919
assignments

517
00:25:15,630 --> 00:25:26,050
right so now we can see what that copy

518
00:25:24,308 --> 00:25:30,069
is actually doing right that's all it's

519
00:25:26,049 --> 00:25:34,720
gonna do and we can get rid of a bunch

520
00:25:30,069 --> 00:25:39,939
of these values so we don't need any of

521
00:25:34,720 --> 00:25:46,690
this stuff or any of this stuff and now

522
00:25:39,940 --> 00:25:48,370
we're good all right so now you can see

523
00:25:46,690 --> 00:25:50,200
we cleaned up that code nicely so we've

524
00:25:48,369 --> 00:25:51,519
isolated that test code so it's you know

525
00:25:50,200 --> 00:25:54,220
it's easier to read and easier for us to

526
00:25:51,519 --> 00:25:56,950
work with as well and so now we just

527
00:25:54,220 --> 00:25:58,808
need to go okay what would we actually

528
00:25:56,950 --> 00:26:01,600
put in here to create more diffuse

529
00:25:58,808 --> 00:26:03,339
lighting so in this stage right here

530
00:26:01,599 --> 00:26:06,039
where we're actually outputting these

531
00:26:03,339 --> 00:26:09,369
things that's the part we would actually

532
00:26:06,039 --> 00:26:11,529
need to know this just copies edges in

533
00:26:09,369 --> 00:26:14,949
the light voxels so whatever we put in

534
00:26:11,529 --> 00:26:16,869
the edge copy will work just fine so we

535
00:26:14,950 --> 00:26:19,299
just need this part to do something

536
00:26:16,869 --> 00:26:21,459
different meaning when it writes this

537
00:26:19,299 --> 00:26:29,049
out it needs to do some kind of

538
00:26:21,460 --> 00:26:31,170
summation here or something right all

539
00:26:29,049 --> 00:26:31,169
right

540
00:26:31,329 --> 00:26:36,678
so our biggest problem here again is

541
00:26:34,730 --> 00:26:39,319
just how many of these things we have to

542
00:26:36,679 --> 00:26:43,759
do so if we want to actually put out 8

543
00:26:39,319 --> 00:26:45,678
by 8 of these then you know this is the

544
00:26:43,759 --> 00:26:47,329
loop that writes out 8 by 8 so this is

545
00:26:45,679 --> 00:26:50,870
the you know this loops over 8 things

546
00:26:47,329 --> 00:26:54,769
this loops over 8 things so 64 total on

547
00:26:50,869 --> 00:26:56,149
the interior and each one of these wants

548
00:26:54,769 --> 00:26:57,918
to figure out what the lighting

549
00:26:56,150 --> 00:27:02,350
contribution would have been for every

550
00:26:57,919 --> 00:27:04,400
other one of them and so if you look at

551
00:27:02,349 --> 00:27:08,149
what this would look like worst case

552
00:27:04,400 --> 00:27:11,710
right it's just more loops right so in

553
00:27:08,150 --> 00:27:11,710
other words it would look more like this

554
00:27:13,298 --> 00:27:24,500
where there's a sampling from here like

555
00:27:20,150 --> 00:27:28,659
so and so for every one of these we need

556
00:27:24,500 --> 00:27:30,798
to sample every one of these right and

557
00:27:28,659 --> 00:27:34,190
again you can see why this is so

558
00:27:30,798 --> 00:27:35,720
terrible we know that this voxel cell is

559
00:27:34,190 --> 00:27:37,220
shared so we're talking about the same

560
00:27:35,720 --> 00:27:40,610
cell regardless right we're always

561
00:27:37,220 --> 00:27:42,169
summing inside the cell and we're

562
00:27:40,609 --> 00:27:43,819
summing on each of these we know that

563
00:27:42,169 --> 00:27:45,470
when we write it out it'll just look

564
00:27:43,819 --> 00:27:47,389
like this so we know that that's the

565
00:27:45,470 --> 00:27:49,579
case the question is what are we

566
00:27:47,390 --> 00:27:55,070
actually writing out so if we actually

567
00:27:49,579 --> 00:27:57,649
did want to sum this thing we need to

568
00:27:55,069 --> 00:27:59,480
know like for each one of these things

569
00:27:57,650 --> 00:28:01,038
that were summing we need to know what

570
00:27:59,480 --> 00:28:08,720
the contribution is for every other

571
00:28:01,038 --> 00:28:11,450
thing now again I'm just gonna do the

572
00:28:08,720 --> 00:28:13,788
crappiest possible thing here but for

573
00:28:11,450 --> 00:28:16,460
each of the 64 outputs we would need to

574
00:28:13,788 --> 00:28:19,038
know the weights of the 64 inputs a lot

575
00:28:16,460 --> 00:28:22,100
of which would be 0 half of which would

576
00:28:19,038 --> 00:28:26,480
be 0 right we're close to zero so if we

577
00:28:22,099 --> 00:28:28,969
were to do a table that just told us

578
00:28:26,480 --> 00:28:32,000
this it would be 4096 entries which is

579
00:28:28,970 --> 00:28:34,519
not much right so again the the actual

580
00:28:32,000 --> 00:28:36,710
like information we need for the

581
00:28:34,519 --> 00:28:39,048
transfer even if we don't compress it at

582
00:28:36,710 --> 00:28:40,579
all is actually fine it's just the

583
00:28:39,048 --> 00:28:43,970
number of operations we actually have to

584
00:28:40,579 --> 00:28:45,308
do that's bad because you know it's 4096

585
00:28:43,970 --> 00:28:48,710
operations per mass

586
00:28:45,308 --> 00:28:54,739
that we have to account for right 64

587
00:28:48,710 --> 00:28:57,079
outputs with 64 input spur not great so

588
00:28:54,739 --> 00:28:59,210
anyway if we want to do that I say we

589
00:28:57,079 --> 00:29:02,599
just do it because that's you know the

590
00:28:59,210 --> 00:29:04,460
easiest thing to do and so what we would

591
00:29:02,599 --> 00:29:06,980
want here is some kind of a weight map

592
00:29:04,460 --> 00:29:08,600
something that you know lets us figure

593
00:29:06,980 --> 00:29:17,899
out what the weight map would be so

594
00:29:08,599 --> 00:29:22,329
something like this so we'd say all

595
00:29:17,898 --> 00:29:22,329
right we've got these weight maps so

596
00:29:24,669 --> 00:29:28,879
let's look one up

597
00:29:26,358 --> 00:29:31,638
we know we're trying to look up the TYT

598
00:29:28,878 --> 00:29:34,219
X weight map and then in here what we

599
00:29:31,638 --> 00:29:42,709
want to do is say let's sum these up so

600
00:29:34,220 --> 00:29:45,350
we have our light results I guess we

601
00:29:42,710 --> 00:29:49,940
could even just call this what it is so

602
00:29:45,349 --> 00:29:55,038
we've got our light C and I mean we

603
00:29:49,940 --> 00:29:56,450
could just have our light D as well but

604
00:29:55,038 --> 00:30:01,849
again I don't really care about that so

605
00:29:56,450 --> 00:30:03,619
I'm not gonna look at it yet and for

606
00:30:01,849 --> 00:30:07,248
each one of these I'm just gonna sum in

607
00:30:03,618 --> 00:30:11,858
the sampled one so I'm going to say the

608
00:30:07,249 --> 00:30:11,858
light C equals the weight

609
00:30:17,180 --> 00:30:26,029
times so right and so you can see here

610
00:30:21,619 --> 00:30:27,409
you can see why this is so you know we

611
00:30:26,029 --> 00:30:30,670
talk about order notation stuff like

612
00:30:27,410 --> 00:30:32,930
this expensive is something right an

613
00:30:30,670 --> 00:30:34,370
order notation is usually just another

614
00:30:32,930 --> 00:30:36,380
way of saying how many loops do you have

615
00:30:34,369 --> 00:30:38,869
and what do they loop over right they're

616
00:30:36,380 --> 00:30:40,310
the same thing effectively so you can

617
00:30:38,869 --> 00:30:45,429
see here we've got a Z loop a while loop

618
00:30:40,309 --> 00:30:47,329
and X loop a TYT x sys X and this is why

619
00:30:45,430 --> 00:30:49,250
this is the kind of thing that makes me

620
00:30:47,329 --> 00:30:52,970
so nervous that much like we have so

621
00:30:49,250 --> 00:30:56,269
many loops we have a voxel which is huge

622
00:30:52,970 --> 00:31:00,440
like Z times y times X just a lot of

623
00:30:56,269 --> 00:31:01,819
order there we've got a texture map for

624
00:31:00,440 --> 00:31:04,130
each one that we're filling in which is

625
00:31:01,819 --> 00:31:05,569
you know T Y times T X and then for each

626
00:31:04,130 --> 00:31:07,220
one of those we have to loop over every

627
00:31:05,569 --> 00:31:10,730
other element so it's s y times X X

628
00:31:07,220 --> 00:31:13,839
right and by the way this is often times

629
00:31:10,730 --> 00:31:17,420
we hear about separable filters right

630
00:31:13,839 --> 00:31:18,919
one of the reasons why you so often hope

631
00:31:17,420 --> 00:31:20,750
that you can make your filter be

632
00:31:18,920 --> 00:31:22,130
separable which in this case may be we

633
00:31:20,750 --> 00:31:25,220
can write and we're gonna look at that

634
00:31:22,130 --> 00:31:27,290
for sure is because if you can break

635
00:31:25,220 --> 00:31:29,480
even one of these loops out like if I

636
00:31:27,289 --> 00:31:31,250
could just even do this which is what

637
00:31:29,480 --> 00:31:33,500
you're doing with a separable filter do

638
00:31:31,250 --> 00:31:35,960
the Y pass first then the X Pass for

639
00:31:33,500 --> 00:31:40,180
example if you can figure out a way to

640
00:31:35,960 --> 00:31:40,180
just even do that which maybe we can

641
00:31:40,420 --> 00:31:48,230
that turns a multiplied into an ad so

642
00:31:44,390 --> 00:31:50,690
instead of 8 times 8 operations it would

643
00:31:48,230 --> 00:31:54,740
be 8 plus 8 operations it goes from 64

644
00:31:50,690 --> 00:31:56,240
to 16 right very good so you can see why

645
00:31:54,740 --> 00:31:57,079
when you talk about filtering that's

646
00:31:56,240 --> 00:31:59,509
intercept well people talk about

647
00:31:57,079 --> 00:32:02,029
separable filters a separable filter is

648
00:31:59,509 --> 00:32:03,950
the ability to take two nested loops and

649
00:32:02,029 --> 00:32:07,849
move them into two sequential loops and

650
00:32:03,950 --> 00:32:10,220
if the number is small let's say you

651
00:32:07,849 --> 00:32:12,109
have two is the number

652
00:32:10,220 --> 00:32:18,920
well you don't care because 2 times 2 is

653
00:32:12,109 --> 00:32:20,209
equal to 2 plus 2 right so a separable

654
00:32:18,920 --> 00:32:24,200
filter doesn't buy anything well the

655
00:32:20,210 --> 00:32:26,329
number is large 8 16 a thousand it's

656
00:32:24,200 --> 00:32:28,160
really big deal a thousand times a

657
00:32:26,329 --> 00:32:31,509
thousand is so much bigger than a

658
00:32:28,160 --> 00:32:31,509
thousand plus a thousand right

659
00:32:32,048 --> 00:32:44,029
so that's why separable filters are so

660
00:32:34,519 --> 00:32:46,220
important it's tree pollen season by the

661
00:32:44,029 --> 00:32:51,950
way so I am like completely allergy I'm

662
00:32:46,220 --> 00:32:53,539
just a running faucet all right so

663
00:32:51,950 --> 00:32:55,940
anyway all we would need to do to do

664
00:32:53,539 --> 00:32:57,920
this is build the weights table right

665
00:32:55,940 --> 00:33:03,140
because you look here and you see okay

666
00:32:57,920 --> 00:33:05,000
we've got this whole thing compiling

667
00:33:03,140 --> 00:33:06,080
just fine there's nothing to it we just

668
00:33:05,000 --> 00:33:07,880
don't know where we're getting the

669
00:33:06,079 --> 00:33:10,639
weights from this can be initialized to

670
00:33:07,880 --> 00:33:11,990
zero because it just is a sum and so at

671
00:33:10,640 --> 00:33:14,540
that point we just need to know what

672
00:33:11,990 --> 00:33:16,190
this thing looks like so if I to find

673
00:33:14,539 --> 00:33:19,159
this thing well it's pretty pretty

674
00:33:16,190 --> 00:33:21,429
obvious it's just an 8 by 8 matrix right

675
00:33:19,160 --> 00:33:23,660
it's just the same as these things

676
00:33:21,429 --> 00:33:26,150
except it's missing the border because

677
00:33:23,660 --> 00:33:28,040
it doesn't need the border right and in

678
00:33:26,150 --> 00:33:30,860
fact when actually when I look at this I

679
00:33:28,039 --> 00:33:37,399
suppose since it doesn't need the border

680
00:33:30,859 --> 00:33:39,019
I should just do this right you know I'm

681
00:33:37,400 --> 00:33:40,490
saying because you don't we don't

682
00:33:39,019 --> 00:33:44,539
actually need that border to be there so

683
00:33:40,490 --> 00:33:47,599
I can do that in one of two ways I'm not

684
00:33:44,539 --> 00:33:49,819
sure which ways is easier but off you go

685
00:33:47,599 --> 00:33:52,099
you know what probably this way is

686
00:33:49,819 --> 00:33:54,980
easier for the come time I feel like a

687
00:33:52,099 --> 00:33:58,279
Pilar not for me obviously none of them

688
00:33:54,980 --> 00:33:59,599
matter to me I can do them anyway but

689
00:33:58,279 --> 00:34:05,418
that's probably the easiest for the

690
00:33:59,599 --> 00:34:06,980
compiler I would guess right so we loop

691
00:34:05,419 --> 00:34:08,329
over we sample everything and we sum it

692
00:34:06,980 --> 00:34:09,740
up and then we write it out and that's

693
00:34:08,329 --> 00:34:11,719
all we would really need and then we

694
00:34:09,739 --> 00:34:14,209
just need some kind of a notion of what

695
00:34:11,719 --> 00:34:17,089
the heck this thing is and so in here we

696
00:34:14,210 --> 00:34:18,710
need the weights and again like if we

697
00:34:17,090 --> 00:34:21,159
did want to do the D I could even do the

698
00:34:18,710 --> 00:34:21,159
D here

699
00:34:28,159 --> 00:34:39,230
like this so I just pull that weight

700
00:34:31,079 --> 00:34:42,000
expression out and just multiply the two

701
00:34:39,230 --> 00:34:45,269
the color component the depth component

702
00:34:42,000 --> 00:34:52,679
separately multiplied by W and then you

703
00:34:45,269 --> 00:34:56,068
fall out you've got both of them and you

704
00:34:52,679 --> 00:34:58,500
just write them back right so again

705
00:34:56,068 --> 00:35:01,050
really straightforward not a lot to it

706
00:34:58,500 --> 00:35:03,690
it's not gonna be efficient or good but

707
00:35:01,050 --> 00:35:06,690
it at least like let us play with this

708
00:35:03,690 --> 00:35:08,250
and see if it works so at that point we

709
00:35:06,690 --> 00:35:11,130
can say all right we just need this

710
00:35:08,250 --> 00:35:14,550
weight map and you know we know it looks

711
00:35:11,130 --> 00:35:17,880
like this right it doesn't have the

712
00:35:14,550 --> 00:35:19,890
border because we don't care now another

713
00:35:17,880 --> 00:35:23,099
way to look at this would be we could

714
00:35:19,889 --> 00:35:24,690
also just include the border and the way

715
00:35:23,099 --> 00:35:28,109
we would include the border is just

716
00:35:24,690 --> 00:35:29,849
write the same weights into the border

717
00:35:28,108 --> 00:35:32,088
region in other words this loop can

718
00:35:29,849 --> 00:35:34,410
write our border for us too

719
00:35:32,088 --> 00:35:35,699
because it's just a general look up so

720
00:35:34,409 --> 00:35:38,250
we could have just done the whole thing

721
00:35:35,699 --> 00:35:40,139
I'm not gonna do that just yet but when

722
00:35:38,250 --> 00:35:41,369
we actually go to do this we may find

723
00:35:40,139 --> 00:35:42,420
that we want this loop to write the

724
00:35:41,369 --> 00:35:44,430
border and the way we would do that

725
00:35:42,420 --> 00:35:46,858
right is just set the weights so that

726
00:35:44,429 --> 00:35:49,078
the border pixels equal have the same

727
00:35:46,858 --> 00:35:52,009
exact weight map as whatever the thing

728
00:35:49,079 --> 00:35:57,869
is they were going to mirror right I

729
00:35:52,010 --> 00:35:59,250
wish I had more water right now so again

730
00:35:57,869 --> 00:36:01,650
pretty straightforward not a lot of

731
00:35:59,250 --> 00:36:03,389
complexity here so now all we need to do

732
00:36:01,650 --> 00:36:05,548
is just actually pre compute some of

733
00:36:03,389 --> 00:36:06,989
these for us to use so we've got our

734
00:36:05,548 --> 00:36:11,009
sampling Hemisphere for example and now

735
00:36:06,989 --> 00:36:14,689
we would also have our weight maps so

736
00:36:11,010 --> 00:36:18,210
I'm gonna call this diffuse weight map

737
00:36:14,690 --> 00:36:21,298
like so and the same thing would would

738
00:36:18,210 --> 00:36:23,838
happen here we would have just like

739
00:36:21,298 --> 00:36:23,838
we've got these

740
00:36:27,028 --> 00:36:32,920
like so and we wouldn't use all of them

741
00:36:30,699 --> 00:36:36,788
I also guess I guess that's what we

742
00:36:32,920 --> 00:36:37,900
actually want I think about it but we

743
00:36:36,789 --> 00:36:42,430
might as well leave it like this so the

744
00:36:37,900 --> 00:36:43,420
lookup is is works the way it should we

745
00:36:42,429 --> 00:36:45,940
don't want this to keep reading because

746
00:36:43,420 --> 00:36:48,278
we're changing the sizes of things so at

747
00:36:45,940 --> 00:36:51,400
that point I think we're good and now we

748
00:36:48,278 --> 00:36:52,750
need a loop at startup time we only need

749
00:36:51,400 --> 00:36:54,789
to initialize these once they stay the

750
00:36:52,750 --> 00:36:58,239
same forever because the directions are

751
00:36:54,789 --> 00:37:01,299
not changing so now we just need to

752
00:36:58,239 --> 00:37:04,389
produce this wait map and all the wait

753
00:37:01,298 --> 00:37:06,818
map is is saying what the transmission

754
00:37:04,389 --> 00:37:10,028
rate is between these directions it's

755
00:37:06,818 --> 00:37:12,849
saying for this incoming for this

756
00:37:10,028 --> 00:37:14,230
outgoing Direction what would it need to

757
00:37:12,849 --> 00:37:15,970
sum across all of the incoming

758
00:37:14,230 --> 00:37:21,068
directions to produce the correct result

759
00:37:15,969 --> 00:37:22,868
right and so what I'd like to do is make

760
00:37:21,068 --> 00:37:26,048
a thing that's going to loop over these

761
00:37:22,869 --> 00:37:29,769
at an it time and produce them so at an

762
00:37:26,048 --> 00:37:33,759
it time when we actually start the you

763
00:37:29,768 --> 00:37:35,139
know the lightning computation will

764
00:37:33,759 --> 00:37:36,548
actually say when we start the when we

765
00:37:35,139 --> 00:37:39,429
actually do the initialization of the

766
00:37:36,548 --> 00:37:41,170
lighting solution right here we could

767
00:37:39,429 --> 00:37:42,969
actually do this so we can have a thing

768
00:37:41,170 --> 00:37:47,048
here that's like you know build diffuse

769
00:37:42,969 --> 00:37:49,149
light Maps and this will tell us that

770
00:37:47,048 --> 00:37:50,829
mapping so when we call build diffuse

771
00:37:49,150 --> 00:37:52,240
light Maps I'll pass the solution we'll

772
00:37:50,829 --> 00:37:57,579
have a little function here that will do

773
00:37:52,239 --> 00:38:01,118
it like so and all we need to do now is

774
00:37:57,579 --> 00:38:03,099
loop over these values to init almost

775
00:38:01,119 --> 00:38:07,690
exactly the same way so like literally

776
00:38:03,099 --> 00:38:10,000
this code that we're using to actually

777
00:38:07,690 --> 00:38:11,858
do the sum we just want to do the exact

778
00:38:10,000 --> 00:38:13,778
same thing so we'd come in here and

779
00:38:11,858 --> 00:38:16,389
instead now what we're going to be doing

780
00:38:13,778 --> 00:38:20,199
is accumulating weights for each of

781
00:38:16,389 --> 00:38:21,699
these so what we want to do is say all

782
00:38:20,199 --> 00:38:24,250
right let's loop through and we'll

783
00:38:21,699 --> 00:38:26,259
compute each of these weight maps in

784
00:38:24,250 --> 00:38:28,268
turn right so we're gonna go ahead and

785
00:38:26,259 --> 00:38:29,440
grab the weight map for this thing and

786
00:38:28,268 --> 00:38:31,389
then we're gonna go through each of

787
00:38:29,440 --> 00:38:33,849
these and write them out so we're gonna

788
00:38:31,389 --> 00:38:39,480
let compute awaiting for each of these

789
00:38:33,849 --> 00:38:39,480
somehow right and write it back in

790
00:38:43,548 --> 00:38:47,969
okay

791
00:38:45,409 --> 00:38:50,278
so exactly the same way as we were doing

792
00:38:47,969 --> 00:38:52,348
here we're gonna go ahead and and try to

793
00:38:50,278 --> 00:38:56,338
produce that light map now what we know

794
00:38:52,349 --> 00:38:57,890
is that we've we want we have in here

795
00:38:56,338 --> 00:39:01,409
like a way that we're actually producing

796
00:38:57,889 --> 00:39:05,598
what vectors correspond to which voxels

797
00:39:01,409 --> 00:39:09,389
right so we kind of have both of those

798
00:39:05,599 --> 00:39:11,190
equations in here already and that's

799
00:39:09,389 --> 00:39:14,159
what we're actually going to need so

800
00:39:11,190 --> 00:39:16,920
when we look at where's our actual so

801
00:39:14,159 --> 00:39:19,098
here's our right our get octahedral

802
00:39:16,920 --> 00:39:22,079
offset for a particular direction so

803
00:39:19,099 --> 00:39:23,818
what we effectively want is the opposite

804
00:39:22,079 --> 00:39:26,548
of this code and we already have this

805
00:39:23,818 --> 00:39:33,558
code right we in our lighting when we're

806
00:39:26,548 --> 00:39:35,880
doing our test our test sphere oops

807
00:39:33,559 --> 00:39:39,269
so in here where we've got our test

808
00:39:35,880 --> 00:39:43,230
light sphere our test light sphere code

809
00:39:39,268 --> 00:39:45,358
we want that to to mirror it so the

810
00:39:43,230 --> 00:39:49,710
exact thing that it's doing this this

811
00:39:45,358 --> 00:39:51,358
nonsense here where we've got like unit

812
00:39:49,710 --> 00:39:53,429
vector from octahedral for the sample

813
00:39:51,358 --> 00:39:55,528
dur we want that to be something we can

814
00:39:53,429 --> 00:40:01,288
call in general right so we want to

815
00:39:55,528 --> 00:40:05,369
think here that's like direction from

816
00:40:01,289 --> 00:40:10,400
txt Y right and that's just gonna do

817
00:40:05,369 --> 00:40:10,400
this exact code right exactly this code

818
00:40:11,239 --> 00:40:18,689
like that and it's going to return that

819
00:40:14,849 --> 00:40:22,019
sample Durer to whoever inputted the txt

820
00:40:18,690 --> 00:40:24,568
Y so in here there's a T X T Y that gets

821
00:40:22,018 --> 00:40:27,229
sent in we do a bunch of nonsense and

822
00:40:24,568 --> 00:40:29,969
out it comes at the end of the day right

823
00:40:27,230 --> 00:40:37,889
so that means in here we would just do

824
00:40:29,969 --> 00:40:41,399
v3 sample dirt equals blah like that and

825
00:40:37,889 --> 00:40:43,038
that should work right meaning we should

826
00:40:41,400 --> 00:40:45,450
we should get exactly one from that

827
00:40:43,039 --> 00:40:46,740
because all we did was replace we just

828
00:40:45,449 --> 00:40:49,288
pulled some code out and now we call it

829
00:40:46,739 --> 00:40:52,078
so that test fair should work and so now

830
00:40:49,289 --> 00:40:54,420
in here we can use these

831
00:40:52,079 --> 00:40:57,689
to pull out the directions for our

832
00:40:54,420 --> 00:41:00,318
corresponding samples so here we're

833
00:40:57,688 --> 00:41:03,239
going to have a lighting direction

834
00:41:00,318 --> 00:41:08,099
coming from the TX dy here so this is

835
00:41:03,239 --> 00:41:15,449
the out you know the outgoing vector and

836
00:41:08,099 --> 00:41:18,359
here's our incoming vector right so now

837
00:41:15,449 --> 00:41:20,219
we have what the incoming vector for

838
00:41:18,358 --> 00:41:21,808
light that we're sampling and the

839
00:41:20,219 --> 00:41:23,880
outgoing vector that we're trying to

840
00:41:21,809 --> 00:41:26,099
transmit along and so now we just need

841
00:41:23,880 --> 00:41:28,318
the cosine wave between them so if we

842
00:41:26,099 --> 00:41:33,689
take that inner product of the outgoing

843
00:41:28,318 --> 00:41:36,119
in the incoming when we do that now we

844
00:41:33,688 --> 00:41:37,978
have that cosine fall-off but of course

845
00:41:36,119 --> 00:41:40,108
it can be negative so we just want to

846
00:41:37,978 --> 00:41:42,448
clamp it and now we've got our

847
00:41:40,108 --> 00:41:45,598
transmission right so there's our cosine

848
00:41:42,449 --> 00:41:47,909
weighted fall-off so now we're building

849
00:41:45,599 --> 00:41:50,939
all of those Maps so we now know what

850
00:41:47,909 --> 00:41:53,159
the diffuse contribution will be from

851
00:41:50,938 --> 00:41:54,659
each of those and if we run the code now

852
00:41:53,159 --> 00:41:57,328
despite the fact that we'll probably run

853
00:41:54,659 --> 00:41:59,098
so slowly is to be unusable we should

854
00:41:57,329 --> 00:42:01,890
actually have diffuse lighting from our

855
00:41:59,099 --> 00:42:03,449
light right and you can already see that

856
00:42:01,889 --> 00:42:05,219
although we don't know if it's correct

857
00:42:03,449 --> 00:42:07,619
or not you can already see that it does

858
00:42:05,219 --> 00:42:10,708
actually look like diffuse lighting not

859
00:42:07,619 --> 00:42:13,679
specular lighting now right kind of see

860
00:42:10,708 --> 00:42:15,958
there's our sphere and again it's just

861
00:42:13,679 --> 00:42:18,150
so dog slow right and this is because

862
00:42:15,958 --> 00:42:21,149
we're throwing all of this stuff at the

863
00:42:18,150 --> 00:42:22,679
CPU and it's very hard for it to deal

864
00:42:21,150 --> 00:42:24,509
with that number of flops especially

865
00:42:22,679 --> 00:42:28,528
when we're not paralyzing it now we

866
00:42:24,509 --> 00:42:30,900
could if this is all we needed to do we

867
00:42:28,528 --> 00:42:32,849
could in theory be okay because we just

868
00:42:30,900 --> 00:42:36,900
thread this and probably call it a day

869
00:42:32,849 --> 00:42:39,559
right and so let me go ahead and hop

870
00:42:36,900 --> 00:42:39,559
over here

871
00:42:48,530 --> 00:42:54,140
see if I can actually rotate around you

872
00:42:51,369 --> 00:42:57,409
and so now we can see that like hey

873
00:42:54,139 --> 00:43:00,529
we're sampling the lighting with a

874
00:42:57,409 --> 00:43:03,289
specular bounce right so we still are

875
00:43:00,530 --> 00:43:05,000
doing quote-unquote specular lighting in

876
00:43:03,289 --> 00:43:07,789
a sense like we are sampling the

877
00:43:05,000 --> 00:43:11,570
lighting in a in a directional sense but

878
00:43:07,789 --> 00:43:15,699
the lighting itself the surfaces have a

879
00:43:11,570 --> 00:43:18,530
diffuse reflectance function right so

880
00:43:15,699 --> 00:43:20,389
now we get what I mean

881
00:43:18,530 --> 00:43:23,300
honestly what kind of looks like pretty

882
00:43:20,389 --> 00:43:25,789
reasonable lighting right not with any

883
00:43:23,300 --> 00:43:28,160
shadows right but it looks like a pretty

884
00:43:25,789 --> 00:43:29,960
reasonable sphere light quite good in

885
00:43:28,159 --> 00:43:32,629
fact right I don't see a lot of

886
00:43:29,960 --> 00:43:35,690
artifacts from the octahedral really so

887
00:43:32,630 --> 00:43:37,190
you know good on us now I don't know we

888
00:43:35,690 --> 00:43:40,159
might have some bugs in there I'm not

889
00:43:37,190 --> 00:43:44,570
sure right I have no idea like you know

890
00:43:40,159 --> 00:43:48,529
I really couldn't tell you like to what

891
00:43:44,570 --> 00:43:50,090
extent we've got issues with the with

892
00:43:48,530 --> 00:43:52,790
the computation in there so maybe it's

893
00:43:50,090 --> 00:43:54,620
totally wrong but at least we now see

894
00:43:52,789 --> 00:43:57,139
like hey yeah it kind of looks that

895
00:43:54,619 --> 00:44:01,969
looks sort of reasonable if I look out

896
00:43:57,139 --> 00:44:04,909
here we do get a sphere of fall-off on

897
00:44:01,969 --> 00:44:10,849
it right I have no idea what that is

898
00:44:04,909 --> 00:44:16,819
over there that's kind of weird don't

899
00:44:10,849 --> 00:44:19,159
you think so is our voxel wrapping

900
00:44:16,820 --> 00:44:21,500
because that's actually if since our

901
00:44:19,159 --> 00:44:25,129
lighting voxel ends here

902
00:44:21,500 --> 00:44:26,659
I believe I wonder if that's what that

903
00:44:25,130 --> 00:44:27,710
is I don't know what that is then we'll

904
00:44:26,659 --> 00:44:31,399
have to find out what that like look at

905
00:44:27,710 --> 00:44:38,780
that it's just our voxel copied over for

906
00:44:31,400 --> 00:44:44,059
lighting so I guess our voxel must be

907
00:44:38,780 --> 00:44:46,760
set to wrap not clamp or something I'm

908
00:44:44,059 --> 00:44:48,380
guessing I'm not sure cuz there's no

909
00:44:46,760 --> 00:44:55,700
lighting information out there at all I

910
00:44:48,380 --> 00:44:57,500
don't think anyway so uh yeah like I

911
00:44:55,699 --> 00:44:59,719
said our main problem with this is just

912
00:44:57,500 --> 00:45:01,730
speed and you know it may be possible

913
00:44:59,719 --> 00:45:04,368
for us to speed this up

914
00:45:01,730 --> 00:45:07,670
I have to think about like how we would

915
00:45:04,369 --> 00:45:11,358
do that obviously we can make it for

916
00:45:07,670 --> 00:45:13,700
wide and speeded up for X and then we

917
00:45:11,358 --> 00:45:15,170
could thread it and you know I don't

918
00:45:13,699 --> 00:45:19,819
know maybe that's what we want to do I'm

919
00:45:15,170 --> 00:45:22,070
not entirely certain what we want to do

920
00:45:19,820 --> 00:45:24,109
there exactly but you know the other

921
00:45:22,070 --> 00:45:28,130
thing I can do too is I can turn on the

922
00:45:24,108 --> 00:45:30,170
drawing so we can look at the results of

923
00:45:28,130 --> 00:45:31,640
this blurring which might help us a

924
00:45:30,170 --> 00:45:33,260
little bit probably not a lot because

925
00:45:31,639 --> 00:45:36,319
there's not a lot of it's not gonna be

926
00:45:33,260 --> 00:45:39,470
immediately intuitive what should or

927
00:45:36,320 --> 00:45:41,539
shouldn't be happening so you know if I

928
00:45:39,469 --> 00:45:42,949
turn on drawing the actual buffers I

929
00:45:41,539 --> 00:45:47,750
don't know that we're gonna learn

930
00:45:42,949 --> 00:45:52,129
anything from seeing them right you know

931
00:45:47,750 --> 00:45:54,829
there's the the the blurred buffer so

932
00:45:52,130 --> 00:46:02,470
what I will say is they look to be look

933
00:45:54,829 --> 00:46:05,989
overly bright right and I guess that

934
00:46:02,469 --> 00:46:06,739
doesn't seem wrong though because they

935
00:46:05,989 --> 00:46:08,750
should be

936
00:46:06,739 --> 00:46:10,429
I mean it's adding all of that light

937
00:46:08,750 --> 00:46:12,710
together and it's supposed to be and

938
00:46:10,429 --> 00:46:16,279
this buffer is just drawing 0 to 1

939
00:46:12,710 --> 00:46:18,949
whereas our lighting right now is not on

940
00:46:16,280 --> 00:46:23,090
0 to 1 in a particular way so I think

941
00:46:18,949 --> 00:46:25,099
it's all probably fine would be my

942
00:46:23,090 --> 00:46:28,250
assumption right like I don't think

943
00:46:25,099 --> 00:46:31,789
there's anything weird about that um and

944
00:46:28,250 --> 00:46:32,960
it looks alright you know again I don't

945
00:46:31,789 --> 00:46:36,259
think there's much we can glean from

946
00:46:32,960 --> 00:46:38,570
that because it's like well I mean is it

947
00:46:36,260 --> 00:46:46,820
wrong or is it not I don't know you know

948
00:46:38,570 --> 00:46:49,970
it looks fine it's hard to say yeah um

949
00:46:46,820 --> 00:46:55,039
so again don't really know not sure what

950
00:46:49,969 --> 00:46:58,368
to make of it exactly yeah

951
00:46:55,039 --> 00:47:00,079
really couldn't tell you but again so if

952
00:46:58,369 --> 00:47:02,358
we do want to actually speed that up we

953
00:47:00,079 --> 00:47:05,000
could actually just speed this up to a

954
00:47:02,358 --> 00:47:07,389
certain extent and it's not like super

955
00:47:05,000 --> 00:47:10,340
hard to think about how we would do that

956
00:47:07,389 --> 00:47:14,960
so remember the only part you know the

957
00:47:10,340 --> 00:47:15,559
slow part is this right here and there's

958
00:47:14,960 --> 00:47:16,909
you know

959
00:47:15,559 --> 00:47:18,829
probably a fair number of things he

960
00:47:16,909 --> 00:47:22,849
could do to make this faster at the very

961
00:47:18,829 --> 00:47:30,079
least sorry not that that's test

962
00:47:22,849 --> 00:47:33,440
lightsphere this at the very least we

963
00:47:30,079 --> 00:47:36,079
could do it for wide and you know that

964
00:47:33,440 --> 00:47:41,690
would cut down on our iteration pretty

965
00:47:36,079 --> 00:47:43,759
dramatic dramatically presumably I mean

966
00:47:41,690 --> 00:47:47,990
literally just for wide just the outer

967
00:47:43,760 --> 00:47:51,920
loop presumably would be sufficient like

968
00:47:47,989 --> 00:47:54,229
just like the TX right so do for for

969
00:47:51,920 --> 00:47:55,460
with the and and then we would cut down

970
00:47:54,230 --> 00:47:57,409
that number of iterations pretty

971
00:47:55,460 --> 00:47:58,519
dramatically so we could try that I'm

972
00:47:57,409 --> 00:48:09,440
trying to think if there's anything

973
00:47:58,519 --> 00:48:11,030
weird about doing that and I don't think

974
00:48:09,440 --> 00:48:15,860
so because then you just have two of

975
00:48:11,030 --> 00:48:20,930
these right so we could just try just

976
00:48:15,860 --> 00:48:24,050
just doing that doing doing this for

977
00:48:20,929 --> 00:48:26,539
wide on the outer loop leaving this code

978
00:48:24,050 --> 00:48:29,930
exactly the same making the diffuse wait

979
00:48:26,539 --> 00:48:34,509
map just load for wide so there's just

980
00:48:29,929 --> 00:48:34,509
like to you know this just happens twice

981
00:48:36,429 --> 00:48:46,369
right and then the voxel offset see part

982
00:48:41,239 --> 00:48:47,899
of things we would only computes we

983
00:48:46,369 --> 00:48:54,920
would only compute one and we'd write

984
00:48:47,900 --> 00:48:56,510
out in chunks of four so I feel like

985
00:48:54,920 --> 00:48:58,849
that's probably a reasonable thing to do

986
00:48:56,510 --> 00:49:03,380
because it doesn't change the algorithm

987
00:48:58,849 --> 00:49:06,139
at all like literally at all I don't

988
00:49:03,380 --> 00:49:10,490
think all of this would still happen

989
00:49:06,139 --> 00:49:14,629
exactly the same way and the only

990
00:49:10,489 --> 00:49:16,579
difference would be that these two this

991
00:49:14,630 --> 00:49:22,990
would be a four right so it would be

992
00:49:16,579 --> 00:49:22,989
like that and you would

993
00:49:27,760 --> 00:49:33,140
well hold on a second

994
00:49:29,690 --> 00:49:43,760
so to look up the light see where we're

995
00:49:33,139 --> 00:49:46,029
sampling here so that's not entirely

996
00:49:43,760 --> 00:49:46,030
true

997
00:49:53,349 --> 00:50:02,969
no it is never mind so you would

998
00:49:58,088 --> 00:50:07,058
basically just loft this up to four wide

999
00:50:02,969 --> 00:50:08,949
right so you'd load one sample in for

1000
00:50:07,059 --> 00:50:10,989
each of these loft it up to four wide

1001
00:50:08,949 --> 00:50:12,818
multiplied by the weights that go into

1002
00:50:10,989 --> 00:50:18,429
each of these and then each of these

1003
00:50:12,818 --> 00:50:18,909
would just be four wide right that would

1004
00:50:18,429 --> 00:50:22,690
be it

1005
00:50:18,909 --> 00:50:25,798
pretty sure and then when you write it

1006
00:50:22,690 --> 00:50:29,380
out you just need to write out four wide

1007
00:50:25,798 --> 00:50:34,989
but that would more or less be it so

1008
00:50:29,380 --> 00:50:38,199
when you produce the C and D offsets

1009
00:50:34,989 --> 00:50:39,969
here like that and then you go to write

1010
00:50:38,199 --> 00:50:47,999
these out what you'd actually be doing

1011
00:50:39,969 --> 00:50:52,028
is is this alright give me you know the

1012
00:50:47,998 --> 00:50:53,439
the commands light voxel C give me the

1013
00:50:52,028 --> 00:51:11,048
like float pointers for these things

1014
00:50:53,440 --> 00:51:14,829
right and at that point you should be

1015
00:51:11,048 --> 00:51:16,599
okay the only weird part about this at

1016
00:51:14,829 --> 00:51:22,440
that point right so now you're just

1017
00:51:16,599 --> 00:51:22,440
doing this is convincing it not to use

1018
00:51:22,858 --> 00:51:29,380
aligned stores so I may have to write

1019
00:51:26,199 --> 00:51:35,440
this code myself rather than do it the

1020
00:51:29,380 --> 00:51:36,818
way that I'm doing it here because we're

1021
00:51:35,440 --> 00:51:38,440
gonna render the problem with with it's

1022
00:51:36,818 --> 00:51:42,248
gonna generate a line stores probably

1023
00:51:38,440 --> 00:51:43,630
here and then it's gonna crash if it I

1024
00:51:42,248 --> 00:51:45,129
don't know how to you know I don't know

1025
00:51:43,630 --> 00:51:47,739
if I can convince it not to do that

1026
00:51:45,130 --> 00:51:51,809
maybe I can we'll see

1027
00:51:47,739 --> 00:51:51,809
but anyway so if we just do this

1028
00:51:57,519 --> 00:52:02,509
right so now we have a TX 4

1029
00:52:00,230 --> 00:52:07,309
and the TX 4 is just gonna be - it's

1030
00:52:02,510 --> 00:52:10,790
gonna be 0 1 and done right it's gonna

1031
00:52:07,309 --> 00:52:12,980
look up weights they're gonna be four

1032
00:52:10,789 --> 00:52:15,139
wide it's gonna do the summation four

1033
00:52:12,980 --> 00:52:19,030
wide and then write it out four wide I

1034
00:52:15,139 --> 00:52:27,139
think that just speeds it up by 4x I

1035
00:52:19,030 --> 00:52:29,600
think that's my claim the TX here is

1036
00:52:27,139 --> 00:52:31,609
just one it's just you know we don't

1037
00:52:29,599 --> 00:52:34,239
we're not gonna actually advance that

1038
00:52:31,610 --> 00:52:34,240
value at all

1039
00:52:36,130 --> 00:53:01,160
these are addresses and so now just

1040
00:52:54,849 --> 00:53:04,610
confuse map itself loading that out is

1041
00:53:01,159 --> 00:53:07,099
just going to be you know loading a the

1042
00:53:04,610 --> 00:53:08,570
f32 4x out of it we're just gonna have

1043
00:53:07,099 --> 00:53:17,839
to change where we store that but other

1044
00:53:08,570 --> 00:53:22,789
than that we're good right so yeah this

1045
00:53:17,840 --> 00:53:31,300
is supposed to be a v3 4x but other than

1046
00:53:22,789 --> 00:53:31,300
that think we're all right

1047
00:53:35,590 --> 00:53:41,990
so on the storage front I'd have to

1048
00:53:38,449 --> 00:53:44,529
think about that part because the v3 4x

1049
00:53:41,989 --> 00:53:44,529
so

1050
00:53:55,260 --> 00:54:03,280
so I guess that part's not as easy

1051
00:53:58,230 --> 00:54:08,469
unfortunately right because the packing

1052
00:54:03,280 --> 00:54:13,930
order is wrong I want to say we're

1053
00:54:08,469 --> 00:54:20,828
loading up light color vectors but we

1054
00:54:13,929 --> 00:54:25,750
actually want to write out RGB RGB RGB

1055
00:54:20,829 --> 00:54:27,760
RGB right and that's a little bit of an

1056
00:54:25,750 --> 00:54:30,579
issue for us because we don't actually

1057
00:54:27,760 --> 00:54:38,589
want to compute in that way we want to

1058
00:54:30,579 --> 00:54:39,880
compute ar-ar-ar-ar gggg bbbb just

1059
00:54:38,588 --> 00:54:43,269
because that's the thing that would be

1060
00:54:39,880 --> 00:54:46,920
in multiples of 4 if we did RGB it's

1061
00:54:43,269 --> 00:54:49,150
only threes which is you know less good

1062
00:54:46,920 --> 00:54:52,420
so that does create a bit of a problem

1063
00:54:49,150 --> 00:54:55,690
for us I'm not sure what the right

1064
00:54:52,420 --> 00:54:57,490
solution that that is we obviously could

1065
00:54:55,690 --> 00:54:59,829
just leave the maps that way but it

1066
00:54:57,489 --> 00:55:01,868
doesn't seem like a very good idea so

1067
00:54:59,829 --> 00:55:03,190
this is a little bit nastier I'm trying

1068
00:55:01,869 --> 00:55:14,559
to think if there is a way I could have

1069
00:55:03,190 --> 00:55:17,760
done it to avoid that problem well so

1070
00:55:14,559 --> 00:55:17,760
maybe there kind of is

1071
00:55:23,280 --> 00:55:29,740
it's just kind of a little bit ugly I

1072
00:55:25,780 --> 00:55:32,710
mean I suppose you could say look it's

1073
00:55:29,739 --> 00:55:36,879
eight wide times three components

1074
00:55:32,710 --> 00:55:39,280
that's 24 divide that by four and you

1075
00:55:36,880 --> 00:55:46,720
just get six so you could just have six

1076
00:55:39,280 --> 00:55:48,460
weights you load yeah but that doesn't

1077
00:55:46,719 --> 00:55:50,589
really work either yes so I'm not sure

1078
00:55:48,460 --> 00:55:52,659
hmm not sure how we would do this

1079
00:55:50,590 --> 00:55:56,850
exactly trying to think if there's any

1080
00:55:52,659 --> 00:55:56,849
other way to do it then makes some sense

1081
00:55:57,360 --> 00:56:01,470
yeah that could still be done for wide

1082
00:56:03,599 --> 00:56:09,190
easily I'm wondering what would happen

1083
00:56:06,550 --> 00:56:13,110
if we did the very most outer loop for

1084
00:56:09,190 --> 00:56:17,610
wide so you just load four rows and

1085
00:56:13,110 --> 00:56:17,610
composite the rows and then uncompelled

1086
00:56:18,719 --> 00:56:22,469
doesn't seem like a good idea though

1087
00:56:27,329 --> 00:56:32,530
so I think what we'd want to do here is

1088
00:56:30,119 --> 00:56:38,650
fuse the depth and the color together

1089
00:56:32,530 --> 00:56:40,030
then so we'd have four wide I mean that

1090
00:56:38,650 --> 00:56:43,599
really seems like what you'd want to do

1091
00:56:40,030 --> 00:56:47,250
and the because that way you get even

1092
00:56:43,599 --> 00:56:49,660
spacing of everything unfortunately like

1093
00:56:47,250 --> 00:56:51,940
for some reason they didn't want to do

1094
00:56:49,659 --> 00:56:57,009
that in the actual paper they always

1095
00:56:51,940 --> 00:56:58,358
kept the depth and the RGB separate and

1096
00:56:57,010 --> 00:57:00,010
to be honest we don't really know if

1097
00:56:58,358 --> 00:57:03,789
we're ever gonna use depth so that's

1098
00:57:00,010 --> 00:57:05,049
kind of another problem right if you

1099
00:57:03,789 --> 00:57:06,639
fuse them together though you'd be

1100
00:57:05,048 --> 00:57:08,739
really happy because then everything

1101
00:57:06,639 --> 00:57:12,179
would be a 4 wide packet and you'd be

1102
00:57:08,739 --> 00:57:12,179
happy you know off the races

1103
00:57:15,179 --> 00:57:18,429
[Music]

1104
00:57:45,659 --> 00:57:49,839
well I mean I guess the one thing we

1105
00:57:48,070 --> 00:57:52,690
could do easily that we could just fall

1106
00:57:49,840 --> 00:57:55,710
back on for now is without doing any

1107
00:57:52,690 --> 00:58:01,389
other work we could just load these as a

1108
00:57:55,710 --> 00:58:07,449
v3 4x I'm sorry as an f32 4x and do the

1109
00:58:01,389 --> 00:58:09,159
ops on them that way right and then when

1110
00:58:07,449 --> 00:58:12,339
you write him out you just only go by

1111
00:58:09,159 --> 00:58:15,210
threes we could do that and then you'd

1112
00:58:12,340 --> 00:58:17,350
get 3x instead of 4x feet up from it and

1113
00:58:15,210 --> 00:58:20,920
you know I don't know to what extent

1114
00:58:17,349 --> 00:58:22,569
that's you know enough but I'm just not

1115
00:58:20,920 --> 00:58:26,400
seeing I'm not seeing the obvious way to

1116
00:58:22,570 --> 00:58:38,559
to make this work other than just by

1117
00:58:26,400 --> 00:58:41,019
Swizzle Adada if the data was planar you

1118
00:58:38,559 --> 00:58:42,940
know what I just typed in is all we need

1119
00:58:41,019 --> 00:58:47,619
but with the data not being planar it's

1120
00:58:42,940 --> 00:58:49,179
packed not sure how to get around it now

1121
00:58:47,619 --> 00:58:53,639
what we can do is you know we can

1122
00:58:49,179 --> 00:58:57,369
Swizzle it out so we could load it

1123
00:58:53,639 --> 00:59:00,309
Swizzle it and load it on Swizzle it but

1124
00:58:57,369 --> 00:59:02,400
that seems really bad too so I don't

1125
00:59:00,309 --> 00:59:02,400
know

1126
00:59:13,260 --> 00:59:18,670
let's think about this everyone sit in a

1127
00:59:16,630 --> 00:59:21,240
moment of silence and consider your sim

1128
00:59:18,670 --> 00:59:21,240
D choices

1129
00:59:47,409 --> 00:59:49,469
you

1130
00:59:57,260 --> 01:00:01,380
so it's worth noting that we would only

1131
00:59:59,608 --> 01:00:04,858
Swizzle on output because since we're

1132
01:00:01,380 --> 01:00:08,460
summing here you only have to swizzle

1133
01:00:04,858 --> 01:00:10,920
when you get to here so maybe that's

1134
01:00:08,460 --> 01:00:15,030
fine I mean this whistles aren't that

1135
01:00:10,920 --> 01:00:21,659
expensive so maybe that's really only

1136
01:00:15,030 --> 01:00:24,869
you need hard to say right but that

1137
01:00:21,659 --> 01:00:27,509
would look like this so we have the desk

1138
01:00:24,869 --> 01:00:31,260
color and the dusty and we're writing

1139
01:00:27,510 --> 01:00:34,319
them in here right and when we actually

1140
01:00:31,260 --> 01:00:35,760
do this and we go through here what we'd

1141
01:00:34,318 --> 01:00:40,409
be saying is all right

1142
01:00:35,760 --> 01:00:43,589
we're doing the light color and we are

1143
01:00:40,409 --> 01:00:47,929
gonna sum the light color for four

1144
01:00:43,588 --> 01:00:51,769
vector for four elements at a time and

1145
01:00:47,929 --> 01:00:56,338
then we need to write out those four

1146
01:00:51,769 --> 01:00:59,159
when we get to here right so I don't

1147
01:00:56,338 --> 01:01:01,019
know that there is a Swizzle on a vector

1148
01:00:59,159 --> 01:01:02,548
right now that swaps it around to the

1149
01:01:01,019 --> 01:01:07,259
other way but that's what we actually

1150
01:01:02,548 --> 01:01:10,230
want it to do since we can't quite do

1151
01:01:07,260 --> 01:01:12,000
that and we need to write this out what

1152
01:01:10,230 --> 01:01:19,130
we kind of want to do here is say like

1153
01:01:12,000 --> 01:01:23,940
alright we've got our two ik r TX 4 and

1154
01:01:19,130 --> 01:01:29,309
when we write out for wides here we need

1155
01:01:23,940 --> 01:01:32,298
to take and write three of them so it

1156
01:01:29,309 --> 01:01:32,298
would really be this

1157
01:01:42,018 --> 01:01:49,308
you know I'm saying so what we need to

1158
01:01:45,599 --> 01:01:53,940
do is write out these in chunks and we

1159
01:01:49,309 --> 01:01:56,039
need the Swizzle chunks to line up we

1160
01:01:53,940 --> 01:01:58,200
could probably make this just a product

1161
01:01:56,039 --> 01:02:00,630
you know a thing that works on these

1162
01:01:58,199 --> 01:02:02,129
v.34 X's where you just say look I need

1163
01:02:00,630 --> 01:02:04,858
you to swizzle this thing and that's a

1164
01:02:02,130 --> 01:02:15,450
known operation so we just write them

1165
01:02:04,858 --> 01:02:16,920
out that way and in fact I suppose at

1166
01:02:15,449 --> 01:02:19,469
that point we could actually just do it

1167
01:02:16,920 --> 01:02:25,440
this way again like I had it so maybe we

1168
01:02:19,469 --> 01:02:35,129
just do it like this so we have a v3 for

1169
01:02:25,440 --> 01:02:44,970
X we write it out this way but we need

1170
01:02:35,130 --> 01:02:50,700
to do like a transpose on this thing and

1171
01:02:44,969 --> 01:02:53,368
then this transpose on our handmade sim

1172
01:02:50,699 --> 01:02:56,429
D I guess that's in all in line so I

1173
01:02:53,369 --> 01:03:04,739
guess we actually will leave everything

1174
01:02:56,429 --> 01:03:07,139
in line that's gonna want to take a

1175
01:03:04,739 --> 01:03:08,940
value and it's gonna want Swizzle the

1176
01:03:07,139 --> 01:03:10,348
components and just so I can show you

1177
01:03:08,940 --> 01:03:13,710
what we're actually doing here I'll draw

1178
01:03:10,349 --> 01:03:23,150
it out what we want to be able to do

1179
01:03:13,710 --> 01:03:23,150
here is take each of the blackboard up

1180
01:03:39,639 --> 01:03:46,099
so what we want to do here is we want to

1181
01:03:42,260 --> 01:03:49,900
say okay we've got something that stores

1182
01:03:46,099 --> 01:03:49,900
data in the following pattern

1183
01:03:51,670 --> 01:04:03,349
ar-ar-ar-ar gggg bbbb right and each of

1184
01:04:01,070 --> 01:04:06,740
these is effectively like a sim Delaine

1185
01:04:03,349 --> 01:04:11,750
right so each of these is basically like

1186
01:04:06,739 --> 01:04:13,819
four floats for floats four floats and

1187
01:04:11,750 --> 01:04:18,260
you know they're in registers or

1188
01:04:13,820 --> 01:04:21,470
something right XM m 0 XM m 1 XM m to

1189
01:04:18,260 --> 01:04:24,170
something like this right and so what we

1190
01:04:21,469 --> 01:04:27,439
want to do now is we want to swap these

1191
01:04:24,170 --> 01:04:29,450
out so that we get a different pattern

1192
01:04:27,440 --> 01:04:33,050
you know what we're trying to do is like

1193
01:04:29,449 --> 01:04:37,669
some nasty you know Swizzle operation

1194
01:04:33,050 --> 01:04:41,030
here where we get RGB RGB RGB so if we

1195
01:04:37,670 --> 01:04:50,240
look at what these sub index - this is

1196
01:04:41,030 --> 01:04:53,240
our byte order here right so you have 12

1197
01:04:50,239 --> 01:04:56,029
of these 12 floats going in that order

1198
01:04:53,239 --> 01:05:00,259
what we want to end up with in memory

1199
01:04:56,030 --> 01:05:03,830
order again this is memory order reading

1200
01:05:00,260 --> 01:05:05,030
in memory order because remember if you

1201
01:05:03,829 --> 01:05:06,559
actually look at the way we write things

1202
01:05:05,030 --> 01:05:08,540
often times for registers we go the

1203
01:05:06,559 --> 01:05:09,619
other way round so it would be inverted

1204
01:05:08,539 --> 01:05:11,329
if we were looking at it little endian

1205
01:05:09,619 --> 01:05:14,869
we'd read that way and it would be our 0

1206
01:05:11,329 --> 01:05:18,319
over here so we want to interleave these

1207
01:05:14,869 --> 01:05:23,809
so that we would end up with our 0 B 0 G

1208
01:05:18,320 --> 01:05:27,500
I'm sorry our 0 G 0 B 0 right and then

1209
01:05:23,809 --> 01:05:30,949
right here we would now want to put our

1210
01:05:27,500 --> 01:05:35,320
1 so in a single sim d'Alene we're

1211
01:05:30,949 --> 01:05:40,639
taking like 0 oh sorry

1212
01:05:35,320 --> 01:05:44,120
0 1 2 3 0 1 2 3 and oh no I never do

1213
01:05:40,639 --> 01:05:47,719
that way so we want the first of each of

1214
01:05:44,119 --> 01:05:53,210
these to go in here and then we want you

1215
01:05:47,719 --> 01:05:55,789
know the next one to be sort of half in

1216
01:05:53,210 --> 01:05:58,099
in half and half in the first register

1217
01:05:55,789 --> 01:06:00,380
house in a second right and then we I

1218
01:05:58,099 --> 01:06:02,179
don't know why keep writing be next one

1219
01:06:00,380 --> 01:06:11,780
be one that was right

1220
01:06:02,179 --> 01:06:26,750
R - G - and that ends this one and then

1221
01:06:11,780 --> 01:06:30,560
we have our B 3 r r3 g 3 B 3 so this is

1222
01:06:26,750 --> 01:06:33,409
what we actually want we want to be able

1223
01:06:30,559 --> 01:06:35,929
to Swizzle these together and so what we

1224
01:06:33,409 --> 01:06:40,190
need is some kind of operation that lets

1225
01:06:35,929 --> 01:06:44,750
us select these things from you know

1226
01:06:40,190 --> 01:06:46,970
composites and luckily for us as you can

1227
01:06:44,750 --> 01:06:51,320
see there's a rather relatively simple

1228
01:06:46,969 --> 01:06:53,750
interleave because you know at no point

1229
01:06:51,320 --> 01:06:56,450
do we have to pull from more than one

1230
01:06:53,750 --> 01:07:01,130
source if you have to pull from multiple

1231
01:06:56,449 --> 01:07:03,019
sources like 3 4 5 it's pretty nasty of

1232
01:07:01,130 --> 01:07:05,450
course if you only have 4 lanes with

1233
01:07:03,019 --> 01:07:07,820
floats that's not super possible but if

1234
01:07:05,449 --> 01:07:09,889
for four wide anyway but you know you

1235
01:07:07,820 --> 01:07:12,470
could imagine if each one of these had

1236
01:07:09,889 --> 01:07:14,029
to come from a different input that

1237
01:07:12,469 --> 01:07:17,329
would be bad but for to the rest there's

1238
01:07:14,030 --> 01:07:19,370
only 2 and most Intel instructions that

1239
01:07:17,329 --> 01:07:22,009
involve Swizzle intact - inputs and

1240
01:07:19,369 --> 01:07:23,779
produce an output so we're in good shape

1241
01:07:22,010 --> 01:07:27,140
we should be able to do something that

1242
01:07:23,780 --> 01:07:29,860
allows us to pick our 0 G 0 B 0 and then

1243
01:07:27,139 --> 01:07:29,859
our 1 right

1244
01:07:31,690 --> 01:07:36,079
relatively cleanly I guess well though

1245
01:07:34,550 --> 01:07:37,400
now I think about it we do have to do

1246
01:07:36,079 --> 01:07:39,049
one intermediate step because if you

1247
01:07:37,400 --> 01:07:42,670
look we actually do have 3 nevermind

1248
01:07:39,050 --> 01:07:45,650
this G here right makes a problem for us

1249
01:07:42,670 --> 01:07:47,210
so we're gonna have to do some series of

1250
01:07:45,650 --> 01:07:49,280
steps we probably can't do one

1251
01:07:47,210 --> 01:07:51,139
instruction for each because if you look

1252
01:07:49,280 --> 01:07:53,090
at how these are broken up here we

1253
01:07:51,139 --> 01:07:56,569
wouldn't yeah there would be no real way

1254
01:07:53,090 --> 01:07:59,200
to do that at least not that I can see

1255
01:07:56,570 --> 01:07:59,200
right

1256
01:08:00,150 --> 01:08:05,849
yeah there's there's no real way we can

1257
01:08:03,389 --> 01:08:15,449
we can make that work it's not that I

1258
01:08:05,849 --> 01:08:16,800
can tell ya um so that's how we would

1259
01:08:15,449 --> 01:08:18,210
have to switch Alon right now the only

1260
01:08:16,800 --> 01:08:19,970
other thing that I'm wondering as I'm

1261
01:08:18,210 --> 01:08:22,649
looking at this - I'm just thinking well

1262
01:08:19,970 --> 01:08:24,090
the way that we were doing this here we

1263
01:08:22,649 --> 01:08:25,589
just know that we have to write out

1264
01:08:24,090 --> 01:08:28,409
these values and if we look at what's

1265
01:08:25,590 --> 01:08:31,920
actually coming in when we load up these

1266
01:08:28,409 --> 01:08:34,489
components I'm just wondering is there

1267
01:08:31,920 --> 01:08:37,829
any reason we can't just make these

1268
01:08:34,489 --> 01:08:40,800
weights pull the correct stuff in so

1269
01:08:37,829 --> 01:08:45,439
that's already in this order because

1270
01:08:40,800 --> 01:08:45,440
there any reason r1 can't just be there

1271
01:08:56,210 --> 01:09:00,659
so I mean just looking at this I'm

1272
01:08:58,439 --> 01:09:03,329
thinking maybe like if we just have the

1273
01:09:00,659 --> 01:09:06,149
weight Maps whistled itself does that

1274
01:09:03,329 --> 01:09:07,979
just produce the right answer here you

1275
01:09:06,149 --> 01:09:10,769
know I'm saying if we build the weight

1276
01:09:07,979 --> 01:09:12,929
map so the weight map is just written so

1277
01:09:10,770 --> 01:09:14,940
that it produces the values in this

1278
01:09:12,930 --> 01:09:19,380
order like why did I think we couldn't

1279
01:09:14,939 --> 01:09:21,149
do that cuz this just starts zero it

1280
01:09:19,380 --> 01:09:22,859
doesn't have to load anything it's just

1281
01:09:21,149 --> 01:09:24,599
gonna sum up these values

1282
01:09:22,859 --> 01:09:26,729
shouldn't it be able to solve any values

1283
01:09:24,600 --> 01:09:30,990
so now and I think about it I think

1284
01:09:26,729 --> 01:09:32,159
maybe I'm just being stupid because I

1285
01:09:30,989 --> 01:09:33,719
was sort of thinking well we loaded

1286
01:09:32,159 --> 01:09:38,550
values in but we didn't load any values

1287
01:09:33,720 --> 01:09:40,170
in right there was no actual loading so

1288
01:09:38,550 --> 01:09:43,650
I'm wondering if this can just be made

1289
01:09:40,170 --> 01:09:45,840
to do it so if we load a v3 for X here

1290
01:09:43,649 --> 01:09:53,909
what are we actually getting out of this

1291
01:09:45,840 --> 01:09:57,260
thing right well when we load that let

1292
01:09:53,909 --> 01:09:57,260
me see where that actually goes

1293
01:10:02,658 --> 01:10:12,538
when we load this in right that's just a

1294
01:10:05,760 --> 01:10:15,900
broadcast to each of these so I would

1295
01:10:12,538 --> 01:10:19,550
think that we could just make sure that

1296
01:10:15,899 --> 01:10:23,089
the broadcast does what we need it to do

1297
01:10:19,550 --> 01:10:23,090
let me think about this

1298
01:10:31,619 --> 01:10:40,140
because this I mean essentially this

1299
01:10:34,359 --> 01:10:40,139
part I guess would have to do what the

1300
01:10:41,100 --> 01:10:45,750
the loads per Lane right

1301
01:10:57,989 --> 01:11:01,289
so yeah

1302
01:11:07,380 --> 01:11:13,020
yeah if we just sew here let's just

1303
01:11:10,470 --> 01:11:15,659
think about this so if we're going to

1304
01:11:13,020 --> 01:11:19,290
load these here's our light C for this

1305
01:11:15,659 --> 01:11:25,439
cell right what we're loading in here

1306
01:11:19,289 --> 01:11:30,329
and we can load this in any pattern we

1307
01:11:25,439 --> 01:11:33,149
can load out of this as actual Swizzle

1308
01:11:30,329 --> 01:11:34,619
values if we want to right so meaning

1309
01:11:33,149 --> 01:11:37,859
right now we're loading this in

1310
01:11:34,619 --> 01:11:40,979
broadcasting X Y Z but we could load

1311
01:11:37,859 --> 01:11:44,369
this and not broadcast right so instead

1312
01:11:40,979 --> 01:11:46,919
what we could do is we could load in the

1313
01:11:44,369 --> 01:11:48,329
source this right here which we don't

1314
01:11:46,920 --> 01:11:51,210
really have a name for I suppose but

1315
01:11:48,329 --> 01:11:53,159
this source here the sample we could

1316
01:11:51,210 --> 01:12:01,920
load that in so we have basically like

1317
01:11:53,159 --> 01:12:08,639
you know our s GS BS and I guess it's 0

1318
01:12:01,920 --> 01:12:12,989
0 0 RS 1 right so we can load it so that

1319
01:12:08,640 --> 01:12:15,960
we get the RGB and our for this for you

1320
01:12:12,989 --> 01:12:18,210
know the the cell here we could load it

1321
01:12:15,960 --> 01:12:24,029
so that that comes in aligned this way

1322
01:12:18,210 --> 01:12:25,560
and then when we sum these together we

1323
01:12:24,029 --> 01:12:26,579
could leave them in say we're still

1324
01:12:25,560 --> 01:12:27,750
gonna have to swivel this because we

1325
01:12:26,579 --> 01:12:30,710
need to get this over here for a

1326
01:12:27,750 --> 01:12:30,710
summation right

1327
01:12:33,979 --> 01:12:39,149
so it's really this load here that's the

1328
01:12:37,199 --> 01:12:40,979
problem because if we do a load

1329
01:12:39,149 --> 01:12:42,539
broadcast here so that we can sum

1330
01:12:40,979 --> 01:12:45,539
everything up then everything that's

1331
01:12:42,539 --> 01:12:48,510
what makes these lanes come out lined up

1332
01:12:45,539 --> 01:12:53,880
RGB right that's this is the part that

1333
01:12:48,510 --> 01:12:56,100
does that and once we do that then our

1334
01:12:53,880 --> 01:12:59,940
light color will always be in those same

1335
01:12:56,100 --> 01:13:01,620
lanes obviously the light D is

1336
01:12:59,939 --> 01:13:20,460
irrelevant because that's just there's

1337
01:13:01,619 --> 01:13:22,769
no packing order for those can't say I

1338
01:13:20,460 --> 01:13:25,100
can think of a better way around this at

1339
01:13:22,770 --> 01:13:25,100
the moment

1340
01:13:33,019 --> 01:13:40,679
maybe someone out there is thought of a

1341
01:13:35,189 --> 01:13:41,909
way already but I don't see one it's

1342
01:13:40,679 --> 01:13:43,349
sort of the standard problem you run

1343
01:13:41,908 --> 01:13:52,948
into when you have these four wide

1344
01:13:43,349 --> 01:13:55,078
things right like you tend not to want

1345
01:13:52,948 --> 01:13:58,109
to operate on them in the way that the

1346
01:13:55,078 --> 01:14:01,889
sim D wants this is why GPUs have all

1347
01:13:58,109 --> 01:14:09,238
the swizzles built in and sadly Intel

1348
01:14:01,889 --> 01:14:12,659
didn't and here we are but yeah not

1349
01:14:09,238 --> 01:14:14,848
seeing it so let me go back to the

1350
01:14:12,658 --> 01:14:16,378
transpose just to see if we're gonna do

1351
01:14:14,849 --> 01:14:19,469
with that if we want to do this

1352
01:14:16,378 --> 01:14:26,118
transpose so if we just did a basic

1353
01:14:19,469 --> 01:14:30,498
select to get our initial values here so

1354
01:14:26,118 --> 01:14:33,418
we can do each of these in two selects

1355
01:14:30,498 --> 01:14:36,448
basically right

1356
01:14:33,418 --> 01:14:41,988
I assume let me take a quick look at

1357
01:14:36,448 --> 01:14:46,558
what we've got four options oops I

1358
01:14:41,988 --> 01:14:50,208
wanted that to be a new window doesn't

1359
01:14:46,559 --> 01:14:52,849
look possible how about this there we go

1360
01:14:50,208 --> 01:14:58,188
so if we take a look at what we've got

1361
01:14:52,849 --> 01:15:01,288
and if I restrict us just to you know

1362
01:14:58,189 --> 01:15:05,610
the basics here I don't know what we

1363
01:15:01,288 --> 01:15:08,779
allow ourselves to use but assuming that

1364
01:15:05,609 --> 01:15:08,779
we're gonna do shuffles

1365
01:15:13,180 --> 01:15:22,030
you know here are some options so we've

1366
01:15:17,289 --> 01:15:24,119
got the main shuffle which would be like

1367
01:15:22,029 --> 01:15:29,500
this one for example

1368
01:15:24,119 --> 01:15:32,979
chef PS and chef PS is the one that

1369
01:15:29,500 --> 01:15:35,170
allows us to pick from the inputs in a

1370
01:15:32,979 --> 01:15:39,099
not particularly great way like to be

1371
01:15:35,170 --> 01:15:42,550
completely honest if you look at the way

1372
01:15:39,100 --> 01:15:47,829
that chef PS works you can kind of see

1373
01:15:42,550 --> 01:15:51,100
that the the issue with it is its lane

1374
01:15:47,829 --> 01:15:54,899
constricted so when you issue a chef

1375
01:15:51,100 --> 01:15:59,380
PS you end up being able to pick

1376
01:15:54,899 --> 01:16:02,379
whatever you want from a the first

1377
01:15:59,380 --> 01:16:04,750
parameter in the first and second lanes

1378
01:16:02,380 --> 01:16:06,659
and then whatever you want from the

1379
01:16:04,750 --> 01:16:10,539
second parameter in the next two lanes

1380
01:16:06,659 --> 01:16:13,720
but you can't just arbitrarily go from

1381
01:16:10,539 --> 01:16:17,500
any lane to any lane right you can if

1382
01:16:13,720 --> 01:16:21,670
you pass the same parameter twice that

1383
01:16:17,500 --> 01:16:25,810
works but you can't otherwise right and

1384
01:16:21,670 --> 01:16:27,579
so in order to do one of these what you

1385
01:16:25,810 --> 01:16:28,990
would assume you want to do you want to

1386
01:16:27,579 --> 01:16:31,180
try we know we can't do it in one

1387
01:16:28,989 --> 01:16:32,979
shuffle what we want to try and do is

1388
01:16:31,180 --> 01:16:38,289
get it so that eat you know we could do

1389
01:16:32,979 --> 01:16:43,899
it in maybe six shuffles right so we

1390
01:16:38,289 --> 01:16:49,239
want to end up with RGB r RG RG b RG BG

1391
01:16:43,899 --> 01:16:53,109
b RGB as our you know four results and

1392
01:16:49,239 --> 01:16:56,279
we want to start with this so we want to

1393
01:16:53,109 --> 01:16:58,539
be able to go you know do that Swizzle

1394
01:16:56,279 --> 01:17:00,250
and so if you look at what we probably

1395
01:16:58,539 --> 01:17:01,960
want to do and we have some other

1396
01:17:00,250 --> 01:17:06,520
options too one of the things that's

1397
01:17:01,960 --> 01:17:08,380
worth noting is that there is if you

1398
01:17:06,520 --> 01:17:10,330
don't want to do a shuffle there is

1399
01:17:08,380 --> 01:17:16,239
other ways you can do it there's these

1400
01:17:10,329 --> 01:17:20,350
things called unpacks and packs don't

1401
01:17:16,239 --> 01:17:24,539
actually remember how these things are

1402
01:17:20,350 --> 01:17:24,539
set up let's see

1403
01:17:24,840 --> 01:17:32,550
yeah so they also give you these and the

1404
01:17:30,119 --> 01:17:35,399
way that these work is they interleave

1405
01:17:32,550 --> 01:17:36,480
these things together which is more sort

1406
01:17:35,399 --> 01:17:39,599
of what we're trying to do here you can

1407
01:17:36,479 --> 01:17:41,819
see how these work like interleaved D

1408
01:17:39,600 --> 01:17:45,420
words right and the way this works is it

1409
01:17:41,819 --> 01:17:50,130
takes the source from 0 to 31 first and

1410
01:17:45,420 --> 01:17:55,890
then the desk from 0 to 31 right and

1411
01:17:50,130 --> 01:18:02,010
then the the same thing from 1 &amp; 2 again

1412
01:17:55,890 --> 01:18:03,390
from 63 to 3 to 6 332 right and so what

1413
01:18:02,010 --> 01:18:08,239
that's designed to do is that's just

1414
01:18:03,390 --> 01:18:11,100
designed to combine like the two vectors

1415
01:18:08,239 --> 01:18:15,029
into into one that goes in alternating

1416
01:18:11,100 --> 01:18:22,680
order so if you look at how these bytes

1417
01:18:15,029 --> 01:18:24,059
are arranged if you take 32 I'm sorry

1418
01:18:22,680 --> 01:18:26,310
these bits are arranged if you take 32

1419
01:18:24,060 --> 01:18:29,490
bits out of each this does sort of what

1420
01:18:26,310 --> 01:18:35,030
we're looking for if you apply it

1421
01:18:29,489 --> 01:18:35,029
repeatedly so for example if we have

1422
01:18:37,670 --> 01:18:41,329
this as one input

1423
01:18:44,229 --> 01:18:50,139
and this is memory order going this way

1424
01:18:47,909 --> 01:18:52,149
again it's it's hard to write these

1425
01:18:50,140 --> 01:18:54,100
sometimes because memory order goes this

1426
01:18:52,149 --> 01:19:00,609
way but processor order goes the other

1427
01:18:54,100 --> 01:19:01,960
way so yeah what can you do if we

1428
01:19:00,609 --> 01:19:06,369
actually call an inter leave on these

1429
01:19:01,960 --> 01:19:14,859
what we would get is our 0 G 0 R 1 G 1 R

1430
01:19:06,369 --> 01:19:16,809
2 G 2 R 3 G 3 right and so if you look

1431
01:19:14,859 --> 01:19:20,170
at what would happen if we call the

1432
01:19:16,810 --> 01:19:23,620
unpack low right which unpacks the low

1433
01:19:20,170 --> 01:19:25,569
part of these we would get this and if

1434
01:19:23,619 --> 01:19:27,488
we called unpack high which impacts the

1435
01:19:25,569 --> 01:19:30,039
high part of these we would get this

1436
01:19:27,488 --> 01:19:32,709
right because it takes one from the

1437
01:19:30,039 --> 01:19:34,960
first one one from the second one from

1438
01:19:32,710 --> 01:19:36,880
the first one for the second and again

1439
01:19:34,960 --> 01:19:38,529
takes the low ones for unpack low then

1440
01:19:36,880 --> 01:19:40,900
if we call the unpack high we'd get this

1441
01:19:38,529 --> 01:19:43,509
and that starts to look pretty good

1442
01:19:40,899 --> 01:19:51,069
right this is not what we want but it's

1443
01:19:43,510 --> 01:19:53,860
close right and so then the question is

1444
01:19:51,069 --> 01:19:55,389
well what do we do to get the bees in

1445
01:19:53,859 --> 01:19:58,509
there and then you would say well okay

1446
01:19:55,390 --> 01:20:01,270
we know now what are we looking for at

1447
01:19:58,510 --> 01:20:05,380
the end well at the end we said we were

1448
01:20:01,270 --> 01:20:10,739
looking for RGB R right so we're looking

1449
01:20:05,380 --> 01:20:16,420
for R 0 G 0 B 0 R 1 right

1450
01:20:10,738 --> 01:20:18,189
well we've got our G 0 and we've got R 1

1451
01:20:16,420 --> 01:20:21,760
so the only thing that we're actually

1452
01:20:18,189 --> 01:20:25,539
looking for in this case is is the you

1453
01:20:21,760 --> 01:20:28,050
know the B 0 which has to come

1454
01:20:25,539 --> 01:20:32,920
unfortunately from another vector right

1455
01:20:28,050 --> 01:20:34,510
so that's like well not really quite

1456
01:20:32,920 --> 01:20:38,380
what we were looking for for that

1457
01:20:34,510 --> 01:20:40,030
particular unpack because it's like how

1458
01:20:38,380 --> 01:20:46,210
are we gonna get that in there if we

1459
01:20:40,029 --> 01:20:48,069
unpacked with B right so let's suppose

1460
01:20:46,210 --> 01:20:50,590
we start here and then we do the unpack

1461
01:20:48,069 --> 01:20:53,829
again with B we end up with not what we

1462
01:20:50,590 --> 01:20:57,460
want because we'd end up with R 0 B 0 G

1463
01:20:53,829 --> 01:21:00,550
0 B 1 right

1464
01:20:57,460 --> 01:21:02,439
and that doesn't help us either

1465
01:21:00,550 --> 01:21:06,270
you know I'm saying because that's not

1466
01:21:02,439 --> 01:21:08,829
again we've got sort of a mismatch here

1467
01:21:06,270 --> 01:21:12,370
so we need to figure out some other way

1468
01:21:08,829 --> 01:21:15,220
of getting that in there we now have we

1469
01:21:12,369 --> 01:21:17,409
do have a vector right that has

1470
01:21:15,220 --> 01:21:21,610
everything we need in it if it was

1471
01:21:17,409 --> 01:21:25,899
combined with B 0 so if we then did I'm

1472
01:21:21,609 --> 01:21:28,089
sorry with the B vector right so if we

1473
01:21:25,899 --> 01:21:33,670
had some way of taking the first two

1474
01:21:28,090 --> 01:21:37,119
then just one right which is the b0 and

1475
01:21:33,670 --> 01:21:39,279
then sliding that RR one over so if we

1476
01:21:37,119 --> 01:21:42,460
could pick arbitrarily for them we'd be

1477
01:21:39,279 --> 01:21:44,889
super happy but again we can't and again

1478
01:21:42,460 --> 01:21:48,670
this is just this is why like sse is

1479
01:21:44,890 --> 01:21:51,010
terrible right no one should have to do

1480
01:21:48,670 --> 01:21:53,350
any of the thinking that I'm doing right

1481
01:21:51,010 --> 01:21:54,550
we just have these three registers and

1482
01:21:53,350 --> 01:21:57,160
we want them to go to those three

1483
01:21:54,550 --> 01:21:59,920
registers it's just a giant Swizzle you

1484
01:21:57,159 --> 01:22:01,630
want this to just be road but SSE is

1485
01:21:59,920 --> 01:22:04,029
like a horrible instruction set just

1486
01:22:01,630 --> 01:22:05,650
absolutely terrible and so as a result

1487
01:22:04,029 --> 01:22:07,869
you spend literally all your time

1488
01:22:05,649 --> 01:22:12,129
drawing crap out like this eventually if

1489
01:22:07,869 --> 01:22:13,779
you do it enough which I don't you start

1490
01:22:12,130 --> 01:22:16,060
to learn the tricks like oh okay no

1491
01:22:13,779 --> 01:22:18,099
that's just I can do like you know this

1492
01:22:16,060 --> 01:22:21,600
unpack and that unpack and then we're

1493
01:22:18,100 --> 01:22:23,950
all good or whatever right so anyway

1494
01:22:21,600 --> 01:22:26,170
let's keep trying a couple other things

1495
01:22:23,949 --> 01:22:28,319
let's suppose instead of doing it that

1496
01:22:26,170 --> 01:22:28,319
way

1497
01:22:33,340 --> 01:22:40,810
we take the bees instead right so now

1498
01:22:38,229 --> 01:22:44,459
let's unpack these and we do an unpack

1499
01:22:40,810 --> 01:22:47,619
on those we'd get our zero right B 0 R 1

1500
01:22:44,460 --> 01:22:50,289
B 1 right so that'd be an unpacked low

1501
01:22:47,618 --> 01:22:52,359
on those we get this vector and remember

1502
01:22:50,289 --> 01:22:59,769
what we were looking for is how do we go

1503
01:22:52,359 --> 01:23:04,539
from this to our G R 0 G 0 B 0 R 1 right

1504
01:22:59,770 --> 01:23:07,739
how do we get there and the answer is

1505
01:23:04,539 --> 01:23:11,469
well now at least if we did R &amp; B

1506
01:23:07,738 --> 01:23:14,049
together right so the first and the

1507
01:23:11,469 --> 01:23:16,810
third instead of the first in the second

1508
01:23:14,050 --> 01:23:20,800
component now at least we know that an

1509
01:23:16,810 --> 01:23:22,960
unpack operation with something and we

1510
01:23:20,800 --> 01:23:26,110
don't know what that thing is would

1511
01:23:22,960 --> 01:23:30,279
actually put R 0 and B 0 in the right

1512
01:23:26,109 --> 01:23:34,149
locations right so if you magically had

1513
01:23:30,279 --> 01:23:36,130
something here that was G 0 R 1 which

1514
01:23:34,149 --> 01:23:40,629
who the heck knows how we would ever get

1515
01:23:36,130 --> 01:23:42,880
that but if magically we could right if

1516
01:23:40,630 --> 01:23:46,150
somehow you could get that vector well

1517
01:23:42,880 --> 01:23:49,329
at least this part's correct and then

1518
01:23:46,149 --> 01:23:50,649
the unpack would produce that right but

1519
01:23:49,329 --> 01:23:52,329
of course in our situation we're like we

1520
01:23:50,649 --> 01:23:55,920
don't know how we'd ever get that right

1521
01:23:52,329 --> 01:24:00,789
so how would we ever produce G 0 R 1

1522
01:23:55,920 --> 01:24:04,929
look where would that come from well a G

1523
01:24:00,789 --> 01:24:07,149
0 first component anything that would

1524
01:24:04,929 --> 01:24:09,579
unpack or shuffle would be able to do

1525
01:24:07,149 --> 01:24:11,738
that if Jesus if the green vector was

1526
01:24:09,579 --> 01:24:14,229
the first one the problem is this R 1

1527
01:24:11,738 --> 01:24:16,359
like where's the R 1 going to come from

1528
01:24:14,229 --> 01:24:18,698
because our ones the second component of

1529
01:24:16,359 --> 01:24:20,408
this thing and there's no way to get the

1530
01:24:18,698 --> 01:24:23,198
sick of one of this thing in there

1531
01:24:20,408 --> 01:24:25,598
because an unpack would stick an R 0

1532
01:24:23,198 --> 01:24:28,569
there right which doesn't help us and a

1533
01:24:25,599 --> 01:24:31,329
shuffle can't pull from that lane right

1534
01:24:28,569 --> 01:24:36,519
because if the G 0 has to go first well

1535
01:24:31,329 --> 01:24:38,649
it can't pull from there so again really

1536
01:24:36,520 --> 01:24:40,320
not a lot we can do there right we're

1537
01:24:38,649 --> 01:24:43,238
kind of back to square one there's no

1538
01:24:40,319 --> 01:24:47,979
obvious way we're gonna be able to do an

1539
01:24:43,238 --> 01:24:51,759
unpack there so again really not great

1540
01:24:47,979 --> 01:24:53,109
pretty tricky to see how this would play

1541
01:24:51,760 --> 01:24:56,650
out and this is what again why I say

1542
01:24:53,109 --> 01:24:58,058
like SSE terrible instruction set neon

1543
01:24:56,649 --> 01:24:59,319
has none of these problems neon just has

1544
01:24:58,059 --> 01:25:00,820
this whistles built-in you can do

1545
01:24:59,319 --> 01:25:02,229
anything you want with that if I

1546
01:25:00,819 --> 01:25:03,698
remember correctly even unload it can

1547
01:25:02,229 --> 01:25:04,779
just do this whistle for you in a store

1548
01:25:03,698 --> 01:25:06,368
could unsold

1549
01:25:04,779 --> 01:25:11,319
just the obvious thing you would do

1550
01:25:06,368 --> 01:25:13,000
until didn't do it because they were

1551
01:25:11,319 --> 01:25:16,389
just like oh all programmers can just

1552
01:25:13,000 --> 01:25:19,359
convert everything over it too packed

1553
01:25:16,389 --> 01:25:20,590
and you're like no they can't that's

1554
01:25:19,359 --> 01:25:22,420
very hard to do especially when you're

1555
01:25:20,590 --> 01:25:24,699
working with a GPU that expects to

1556
01:25:22,420 --> 01:25:28,510
sample things in the other way but yeah

1557
01:25:24,698 --> 01:25:29,589
anyway all right so we still have a

1558
01:25:28,510 --> 01:25:31,119
problem here it's like can we get this

1559
01:25:29,590 --> 01:25:32,889
down to two I don't still don't know if

1560
01:25:31,118 --> 01:25:35,859
we can obviously we could get it down to

1561
01:25:32,889 --> 01:25:38,739
three that's not so hard because at that

1562
01:25:35,859 --> 01:25:41,229
point you can just literally do three

1563
01:25:38,738 --> 01:25:43,629
selects I have three chefs and you're

1564
01:25:41,229 --> 01:25:44,948
probably okay but you can see why I'm

1565
01:25:43,630 --> 01:25:46,868
worried about this right because I can't

1566
01:25:44,948 --> 01:25:52,178
quite figure out how to get it down just

1567
01:25:46,868 --> 01:25:53,500
to two so if we unpacked this way not

1568
01:25:52,179 --> 01:25:58,328
clear exactly what we would be doing

1569
01:25:53,500 --> 01:26:00,729
there if we unpack the other way wasn't

1570
01:25:58,328 --> 01:26:03,519
clear what we'd be doing here

1571
01:26:00,729 --> 01:26:07,718
so now we go well alright what if we did

1572
01:26:03,520 --> 01:26:10,929
a non interleaved unpack because what we

1573
01:26:07,719 --> 01:26:17,198
can also do is let's say we do an unpack

1574
01:26:10,929 --> 01:26:22,989
hi PD right so PS right unpacks per

1575
01:26:17,198 --> 01:26:26,408
element so it's 0 0 1 1 2 2 3 3 PD

1576
01:26:22,988 --> 01:26:27,819
unpacks pairs of elements so if we

1577
01:26:26,408 --> 01:26:31,960
wanted to we could produce a vector

1578
01:26:27,819 --> 01:26:33,609
that's R 0 R 1 B 0 B 1 right we can

1579
01:26:31,960 --> 01:26:38,198
unpack this way

1580
01:26:33,609 --> 01:26:40,929
as well like by pairs so the question is

1581
01:26:38,198 --> 01:26:45,069
could we use that to get us something

1582
01:26:40,929 --> 01:26:47,710
that we need right and again it's not

1583
01:26:45,069 --> 01:26:51,488
clear whether it can or can't but we can

1584
01:26:47,710 --> 01:26:52,960
experiment and find out right so let's

1585
01:26:51,488 --> 01:26:54,578
suppose that we wanted to try and get

1586
01:26:52,960 --> 01:26:58,559
something that will get us closer to our

1587
01:26:54,578 --> 01:27:00,819
RGB our pattern that we want here

1588
01:26:58,559 --> 01:27:01,400
what would we actually do to try and

1589
01:27:00,819 --> 01:27:05,750
make that

1590
01:27:01,399 --> 01:27:09,049
happen well if we unpacked our arse and

1591
01:27:05,750 --> 01:27:11,270
jeez together it doesn't seem I mean

1592
01:27:09,050 --> 01:27:16,699
well I mean maybe it's the intermediate

1593
01:27:11,270 --> 01:27:18,560
stage hard to say but again the main

1594
01:27:16,698 --> 01:27:20,119
issue that we're gonna face here is

1595
01:27:18,560 --> 01:27:22,190
where this r1 is going to come from

1596
01:27:20,119 --> 01:27:23,809
because anything else we do with the RGS

1597
01:27:22,189 --> 01:27:25,428
and B's actually makes a regional amount

1598
01:27:23,810 --> 01:27:28,250
of sense the question is how does the

1599
01:27:25,429 --> 01:27:30,440
one get into this position right because

1600
01:27:28,250 --> 01:27:32,750
no amount of unpacks is gonna help you

1601
01:27:30,439 --> 01:27:34,039
there so in a sense this one sort of

1602
01:27:32,750 --> 01:27:37,000
looks like a problem that we're gonna

1603
01:27:34,039 --> 01:27:40,698
have to do deal with you know a chef and

1604
01:27:37,000 --> 01:27:43,158
the chef is Lane based this way right so

1605
01:27:40,698 --> 01:27:46,939
the inputs have to stay on the side of

1606
01:27:43,158 --> 01:27:48,139
the bar that they're on right so the

1607
01:27:46,939 --> 01:27:49,849
question is what can we do that would be

1608
01:27:48,140 --> 01:27:53,420
efficient that would somehow put the R

1609
01:27:49,850 --> 01:27:57,110
on this side for this guy right so the R

1610
01:27:53,420 --> 01:28:00,679
goes into that location just somewhere

1611
01:27:57,109 --> 01:28:05,079
in the second side of things with a B's

1612
01:28:00,679 --> 01:28:07,219
with a b0 so somehow an r0 r1 and a b0

1613
01:28:05,079 --> 01:28:11,988
would end up in the same side of

1614
01:28:07,219 --> 01:28:17,000
something right to allow that that stuff

1615
01:28:11,988 --> 01:28:20,408
to happen or alternatively a g0 and an

1616
01:28:17,000 --> 01:28:24,948
r1 like is there any way a g0 and an r1

1617
01:28:20,408 --> 01:28:26,389
can come out in that way right both both

1618
01:28:24,948 --> 01:28:28,579
of those be on the same side of

1619
01:28:26,390 --> 01:28:30,140
something it doesn't matter what same

1620
01:28:28,579 --> 01:28:34,579
side they're on by the way they just

1621
01:28:30,140 --> 01:28:42,409
have to get it together somehow right in

1622
01:28:34,579 --> 01:28:45,350
some way and again I don't know I guess

1623
01:28:42,408 --> 01:28:49,579
let's try it so let's suppose that we

1624
01:28:45,350 --> 01:28:53,300
were going to do some kind yeah like

1625
01:28:49,579 --> 01:28:54,920
what would we do I don't even know it

1626
01:28:53,300 --> 01:28:57,550
seems like it just an impossibility that

1627
01:28:54,920 --> 01:28:57,550
that's ever going to happen

1628
01:28:58,979 --> 01:29:11,909
in two steps it's not that I can see so

1629
01:29:10,319 --> 01:29:13,979
because you have to think about it right

1630
01:29:11,909 --> 01:29:18,409
let's just say we ever wanted these two

1631
01:29:13,979 --> 01:29:21,089
to come out in the same lane ever right

1632
01:29:18,409 --> 01:29:23,699
I'm not sure how you break that sequence

1633
01:29:21,090 --> 01:29:39,630
right it just you fundamentally can't so

1634
01:29:23,699 --> 01:29:41,460
you know you've got a b0 and what I want

1635
01:29:39,630 --> 01:29:44,190
to do is I want to say okay is there any

1636
01:29:41,460 --> 01:29:47,909
way to get this and this to come out so

1637
01:29:44,189 --> 01:29:49,199
they're like here or here right so you

1638
01:29:47,909 --> 01:29:56,609
know in a way to combine these two

1639
01:29:49,199 --> 01:29:58,739
things um and I don't know I don't even

1640
01:29:56,609 --> 01:30:00,299
know if we if we extended ourselves out

1641
01:29:58,739 --> 01:30:01,979
I don't know if we'd even have any

1642
01:30:00,300 --> 01:30:04,079
better options there I don't think we do

1643
01:30:01,979 --> 01:30:10,309
right yeah because I don't think there's

1644
01:30:04,079 --> 01:30:13,170
much zero select what's that

1645
01:30:10,310 --> 01:30:15,260
it's that function call that does the

1646
01:30:13,170 --> 01:30:19,100
Select

1647
01:30:15,260 --> 01:30:19,100
where's it only in a VX

1648
01:30:23,090 --> 01:30:31,779
now there's that there's a select call

1649
01:30:25,970 --> 01:30:31,780
in here by just I'm blanking on the name

1650
01:30:35,199 --> 01:30:45,859
it's not extract it is called blend

1651
01:30:43,729 --> 01:30:47,539
that's what they called it don't ask me

1652
01:30:45,859 --> 01:30:51,049
why

1653
01:30:47,539 --> 01:30:52,609
so if we were out at SSE for which I

1654
01:30:51,050 --> 01:30:55,159
don't know if we want to be although

1655
01:30:52,609 --> 01:30:57,409
it's probably safe to be now we could

1656
01:30:55,159 --> 01:31:02,199
also use a blend function for that and

1657
01:30:57,409 --> 01:31:02,199
what those do is those do let you use

1658
01:31:02,800 --> 01:31:08,960
combinations of lanes in the same Lane

1659
01:31:06,050 --> 01:31:12,130
so you could do a blend where if you

1660
01:31:08,960 --> 01:31:15,649
have this you could get a B 0 R 1 in

1661
01:31:12,130 --> 01:31:21,409
here by using a blend I don't think

1662
01:31:15,649 --> 01:31:32,989
there's any way to get B 0 R 1 without

1663
01:31:21,409 --> 01:31:35,510
that in one instruction I don't think

1664
01:31:32,989 --> 01:31:39,250
there's any way to pull the second one

1665
01:31:35,510 --> 01:31:46,670
of one thing and the first of another

1666
01:31:39,250 --> 01:31:53,539
into the first like two elements am I

1667
01:31:46,670 --> 01:31:57,010
wrong about that is there any other way

1668
01:31:53,539 --> 01:31:57,010
to do that I don't think there is

1669
01:32:07,130 --> 01:32:10,710
and I don't think packs would help us

1670
01:32:09,479 --> 01:32:13,739
here right because those are all gonna

1671
01:32:10,710 --> 01:32:17,810
contract the values which doesn't help

1672
01:32:13,739 --> 01:32:17,809
so I'm pretty sure only unpacks help us

1673
01:32:19,069 --> 01:32:23,179
unpack some shuffles anyway

1674
01:32:42,420 --> 01:32:46,989
so I don't know I guess we've got two

1675
01:32:45,189 --> 01:32:49,419
ways of doing this I can so I can think

1676
01:32:46,989 --> 01:32:53,559
of how to do it that way right because

1677
01:32:49,420 --> 01:32:55,930
then it's pretty easy I think let's see

1678
01:32:53,560 --> 01:32:58,600
let's see if we have a if we used blend

1679
01:32:55,930 --> 01:33:03,460
let's see if we could do it in a low

1680
01:32:58,600 --> 01:33:10,750
number of things so to get our 0 G 0 B 0

1681
01:33:03,460 --> 01:33:14,529
R 1 we would have to do even that I'm

1682
01:33:10,750 --> 01:33:18,100
it's still pretty hard right because I

1683
01:33:14,529 --> 01:33:19,479
think you would waste yeah I don't know

1684
01:33:18,100 --> 01:33:22,600
if you can even do it even with that

1685
01:33:19,479 --> 01:33:25,019
because I think you would waste one of

1686
01:33:22,600 --> 01:33:27,760
your things doing the in the transpose

1687
01:33:25,020 --> 01:33:30,790
because you'd end up with an R one in

1688
01:33:27,760 --> 01:33:32,890
two different places right but we can

1689
01:33:30,789 --> 01:33:37,090
sort of look at that a little bit more

1690
01:33:32,890 --> 01:33:38,470
carefully so if we did look at what we

1691
01:33:37,090 --> 01:33:42,550
would need here let's just think about

1692
01:33:38,470 --> 01:33:47,670
what happens so if we wanted all of our

1693
01:33:42,550 --> 01:33:51,750
values the next one would be G 1 B 1 R 2

1694
01:33:47,670 --> 01:33:51,750
G 2 right

1695
01:33:56,309 --> 01:34:04,650
so our 2g2 looks like just an unpack

1696
01:34:00,270 --> 01:34:13,679
right so an unpack hi would be our 2 G 2

1697
01:34:04,649 --> 01:34:20,189
R 3 G 3 right and the last one is B 3

1698
01:34:13,679 --> 01:34:26,670
oops be 2 R 3 G 3 B 3 right that's the

1699
01:34:20,189 --> 01:34:29,698
last one and so getting the are the G 3

1700
01:34:26,670 --> 01:34:32,639
B 3 that looks like an unpack on that B

1701
01:34:29,698 --> 01:34:35,308
2 R 3 again so these are always gonna be

1702
01:34:32,639 --> 01:34:38,400
the problem show children right it's

1703
01:34:35,309 --> 01:34:42,469
basically this vector is lovely because

1704
01:34:38,399 --> 01:34:48,299
it's aligned right G 1 B 1 R 2 G to the

1705
01:34:42,469 --> 01:34:54,538
each lane here is the same index so G 3

1706
01:34:48,300 --> 01:34:56,159
B 3 and R 2 G 2 G 1 B 1 R 0 G 0 those

1707
01:34:54,538 --> 01:34:57,840
are all much more straightforward to

1708
01:34:56,158 --> 01:35:03,388
produce because they're on the same

1709
01:34:57,840 --> 01:35:06,300
lanes it's the two threes and the zero

1710
01:35:03,389 --> 01:35:07,078
ones here that are happening that are

1711
01:35:06,300 --> 01:35:09,599
kind of ugly

1712
01:35:07,078 --> 01:35:16,069
right cuz otherwise I think this

1713
01:35:09,599 --> 01:35:20,569
wouldn't be so so heinous so anyway

1714
01:35:16,069 --> 01:35:24,689
we're gonna end up with a B 0 G 0 I

1715
01:35:20,569 --> 01:35:26,880
think either way we do this all right so

1716
01:35:24,689 --> 01:35:30,779
let's just start seeing if we can

1717
01:35:26,880 --> 01:35:33,929
permute these down so if we want an R 0

1718
01:35:30,779 --> 01:35:36,479
G 0 that's going to be an unpack our G

1719
01:35:33,929 --> 01:35:43,800
right so you would want to do like an

1720
01:35:36,479 --> 01:35:49,408
unpack low on our G and that would give

1721
01:35:43,800 --> 01:35:52,110
us the R 0 G 0 it would also give us the

1722
01:35:49,408 --> 01:35:54,929
R - G - no it wouldn't because it's

1723
01:35:52,109 --> 01:35:58,859
unpacked low so we'd also need to do an

1724
01:35:54,929 --> 01:36:02,810
unpack high on our G and that would get

1725
01:35:58,859 --> 01:36:05,460
us this and this

1726
01:36:02,810 --> 01:36:08,060
then we need an unpack low and high on

1727
01:36:05,460 --> 01:36:08,060
the g's

1728
01:36:17,319 --> 01:36:25,750
and bees right so that would give us

1729
01:36:21,340 --> 01:36:30,578
these and then we need the B 0 R 1 B 2 R

1730
01:36:25,750 --> 01:36:33,908
3 and those would be blends it looks

1731
01:36:30,578 --> 01:36:36,158
like now the question is if we've

1732
01:36:33,908 --> 01:36:38,618
already done these do we then have some

1733
01:36:36,158 --> 01:36:41,828
options of how to do these with these

1734
01:36:38,618 --> 01:36:47,109
interim values and so the question would

1735
01:36:41,828 --> 01:36:51,118
be can we produce from this a B 0 R 1 or

1736
01:36:47,109 --> 01:36:51,118
B 2 R 3 right

1737
01:36:52,029 --> 01:36:57,609
and so thinking about what these would

1738
01:36:54,310 --> 01:37:04,300
give us this would just give us R 0 G 0

1739
01:36:57,609 --> 01:37:11,979
R 1 G 1 this would give us R 2 G 2 R 3 G

1740
01:37:04,300 --> 01:37:13,320
3 and this would be G 0 B 0 G 2 P 2 G 3

1741
01:37:11,979 --> 01:37:20,348
oops

1742
01:37:13,319 --> 01:37:22,299
G 1 B 1 G 3 B 3 right so that's what we

1743
01:37:20,349 --> 01:37:29,078
would then end up with and now we're

1744
01:37:22,300 --> 01:37:34,300
just asking well B 0 R 1 and B 2 R 3 how

1745
01:37:29,078 --> 01:37:45,069
does one get these right so looking at

1746
01:37:34,300 --> 01:37:49,029
what we've got here B 0 and R 1 right up

1747
01:37:45,069 --> 01:37:53,109
here only in those two locations and in

1748
01:37:49,029 --> 01:37:56,759
the original and unfortunately like from

1749
01:37:53,109 --> 01:38:00,009
the looks of it they don't necessarily

1750
01:37:56,760 --> 01:38:05,190
appear in any nests in any of a better

1751
01:38:00,010 --> 01:38:08,440
location for that so B 0 is on this side

1752
01:38:05,189 --> 01:38:10,059
r1 has moved which helps us a little

1753
01:38:08,439 --> 01:38:12,759
it's in a second lane so now we can have

1754
01:38:10,060 --> 01:38:15,300
our 1 in either lane so maybe that's

1755
01:38:12,760 --> 01:38:15,300
sufficient

1756
01:38:22,349 --> 01:38:27,059
you know or maybe it's not not sure I

1757
01:38:27,840 --> 01:38:32,250
mean I guess it does seem plausible

1758
01:38:50,069 --> 01:39:00,779
and b2 are three are also yeah are also

1759
01:38:56,729 --> 01:39:00,780
in separate lanes now

1760
01:39:05,869 --> 01:39:11,930
and for it's nice they don't really see

1761
01:39:07,890 --> 01:39:11,930
much good that comes from this

1762
01:39:33,520 --> 01:39:41,630
so would there be any way to produce a B

1763
01:39:36,649 --> 01:39:48,319
0 R 1 B 2 R 3 vector would be the next

1764
01:39:41,630 --> 01:39:49,850
question probably not so B 0 R 1 nope

1765
01:39:48,319 --> 01:39:55,219
because they're all in different lanes

1766
01:39:49,850 --> 01:40:01,640
yet again right so hasn't helped us even

1767
01:39:55,219 --> 01:40:03,469
a little bit and so yet let's just see

1768
01:40:01,640 --> 01:40:05,539
though if we want to make so of the

1769
01:40:03,469 --> 01:40:16,250
things we wanted to make here right

1770
01:40:05,539 --> 01:40:21,310
we want our R 0 G 0 B 0 R 1 and then G 1

1771
01:40:16,250 --> 01:40:21,310
B 1 R 2 G 2 so G 1 B 1

1772
01:40:28,149 --> 01:40:34,159
G 1 V 1 R 2 G 2 is totally taken care of

1773
01:40:31,819 --> 01:40:36,130
with one op so once you build these you

1774
01:40:34,159 --> 01:40:38,420
can do one operation and get that and

1775
01:40:36,130 --> 01:40:40,250
then you have these two but you don't

1776
01:40:38,420 --> 01:40:43,489
have those two and that's so that's the

1777
01:40:40,250 --> 01:40:48,619
only rub now and again so it looks like

1778
01:40:43,489 --> 01:40:50,479
this would take to write three things it

1779
01:40:48,619 --> 01:40:52,250
looks like this would take just

1780
01:40:50,479 --> 01:40:53,809
tremendous number of instructions so

1781
01:40:52,250 --> 01:40:55,909
again I'm probably just not doing it

1782
01:40:53,810 --> 01:40:57,170
very well we can look up by the way this

1783
01:40:55,909 --> 01:40:58,699
summer we could easily look up the

1784
01:40:57,170 --> 01:41:01,699
answer to this question of like what's

1785
01:40:58,699 --> 01:41:04,250
the optimal four by three transpose for

1786
01:41:01,699 --> 01:41:05,599
SSC but again we'd never worked one of

1787
01:41:04,250 --> 01:41:06,649
these out on stream before I thought it

1788
01:41:05,600 --> 01:41:08,060
might be a good idea to do so and I

1789
01:41:06,649 --> 01:41:19,729
haven't done someone in a really long

1790
01:41:08,060 --> 01:41:21,170
time so I forget most of it I guess one

1791
01:41:19,729 --> 01:41:23,359
other way to look at this might be to

1792
01:41:21,170 --> 01:41:28,850
just write all of those possible unpacks

1793
01:41:23,359 --> 01:41:35,799
out right so of the things you can

1794
01:41:28,850 --> 01:41:35,800
generate from the input

1795
01:41:41,039 --> 01:41:43,729
oops

1796
01:41:57,010 --> 01:42:03,430
so other things you can generate from

1797
01:41:59,510 --> 01:42:08,420
these we know that you know we've got

1798
01:42:03,430 --> 01:42:14,570
unpacks which do interleave right so we

1799
01:42:08,420 --> 01:42:23,649
know we've got this and I'll just focus

1800
01:42:14,569 --> 01:42:32,509
on the lows for now so this this right

1801
01:42:23,649 --> 01:42:33,979
this and then the reverses of those

1802
01:42:32,510 --> 01:42:36,260
which I don't think we ever care about

1803
01:42:33,979 --> 01:42:39,369
reverse as much because you can usually

1804
01:42:36,260 --> 01:42:41,300
do its symmetrically either way so

1805
01:42:39,369 --> 01:42:42,380
probably you only care about the fact

1806
01:42:41,300 --> 01:42:46,190
that these are the things we could

1807
01:42:42,380 --> 01:42:49,270
produce right in terms of combinations

1808
01:42:46,189 --> 01:42:52,849
of lanes so we can produce any of those

1809
01:42:49,270 --> 01:42:58,580
we can then also produce selects right

1810
01:42:52,850 --> 01:43:02,030
so we can swap any two lanes arbitrarily

1811
01:42:58,579 --> 01:43:09,350
or grab any other thing so you know we

1812
01:43:02,029 --> 01:43:11,269
can do any of these like R 0 R 1 we

1813
01:43:09,350 --> 01:43:17,870
could swap those and get any of the

1814
01:43:11,270 --> 01:43:22,730
other I guess we can we can combine with

1815
01:43:17,869 --> 01:43:24,439
a shuffle any two from one vector and

1816
01:43:22,729 --> 01:43:26,059
any two from another right and it's

1817
01:43:24,439 --> 01:43:27,589
unclear how we write that out it's

1818
01:43:26,060 --> 01:43:30,140
something we can actually look at but

1819
01:43:27,590 --> 01:43:37,550
any combination of these basically right

1820
01:43:30,140 --> 01:43:39,910
so we could do something like this you

1821
01:43:37,550 --> 01:43:42,890
know what I mean

1822
01:43:39,909 --> 01:43:45,019
so we can we can transpose these on the

1823
01:43:42,890 --> 01:43:47,060
interior and that might be useful right

1824
01:43:45,020 --> 01:43:48,890
because we were having trouble figuring

1825
01:43:47,060 --> 01:43:50,660
how to get things to a line and it may

1826
01:43:48,890 --> 01:43:52,070
be that if we shuffle some of these

1827
01:43:50,659 --> 01:43:54,710
first we could do something shooting

1828
01:43:52,069 --> 01:43:57,170
there we can also grab any other values

1829
01:43:54,710 --> 01:44:00,800
right so we can combine these two and

1830
01:43:57,170 --> 01:44:04,190
you know we could do like R 0 R 2

1831
01:44:00,800 --> 01:44:06,560
you know G 1 G 3 if we want it right

1832
01:44:04,189 --> 01:44:09,710
because again as long as we stay in

1833
01:44:06,560 --> 01:44:13,430
these two on halves

1834
01:44:09,710 --> 01:44:16,760
right we can pretty easily pull anything

1835
01:44:13,430 --> 01:44:20,690
we want using the shuffle so that's not

1836
01:44:16,760 --> 01:44:23,390
hard right so the question is source

1837
01:44:20,689 --> 01:44:24,769
wise what do we need at the end of the

1838
01:44:23,390 --> 01:44:26,119
day and it's really like I said it's

1839
01:44:24,770 --> 01:44:28,969
really hard like I have a really hard

1840
01:44:26,119 --> 01:44:35,630
time guessing these things it's just not

1841
01:44:28,969 --> 01:44:40,579
easy so if we want to pull from one of

1842
01:44:35,630 --> 01:44:43,219
these then what we know is there's

1843
01:44:40,579 --> 01:44:46,189
really only two I suppose ways that this

1844
01:44:43,219 --> 01:44:48,230
can work one is that it's a shuffle

1845
01:44:46,189 --> 01:44:51,409
between two vectors so that it's split

1846
01:44:48,229 --> 01:44:54,889
this way right which means that there's

1847
01:44:51,409 --> 01:44:57,649
one vector that has an R 0 G 0 in it

1848
01:44:54,890 --> 01:45:01,190
somewhere and another vector that has a

1849
01:44:57,649 --> 01:45:03,469
B 0 R 1 in it somewhere right so we can

1850
01:45:01,189 --> 01:45:07,579
either be pulling from something that

1851
01:45:03,469 --> 01:45:11,630
has an R 0 G 0 and a B 0 R 1 something

1852
01:45:07,579 --> 01:45:13,488
like this right into separate vectors so

1853
01:45:11,630 --> 01:45:16,969
either that implies that those two

1854
01:45:13,488 --> 01:45:20,209
things are into separate vectors or it's

1855
01:45:16,969 --> 01:45:23,630
an inter leave and R 0 and B 0 in one

1856
01:45:20,210 --> 01:45:26,149
vector and G 0 R 1 or another vector so

1857
01:45:23,630 --> 01:45:29,180
the two things we could say I guess

1858
01:45:26,149 --> 01:45:30,079
about this constraint and this maybe is

1859
01:45:29,180 --> 01:45:33,440
a good way to look at I never thought

1860
01:45:30,079 --> 01:45:36,350
about this before is that either this

1861
01:45:33,439 --> 01:45:39,619
has to be true so vector a has those and

1862
01:45:36,350 --> 01:45:41,860
vector B has those or this has to be

1863
01:45:39,619 --> 01:45:41,859
true

1864
01:45:45,698 --> 01:45:52,098
right so either this pattern exists in a

1865
01:45:49,189 --> 01:45:53,839
vector you know in one pair and this is

1866
01:45:52,099 --> 01:45:57,349
in one pair or this is a pair and this

1867
01:45:53,840 --> 01:46:05,929
is a pair split on lanes exactly as as

1868
01:45:57,349 --> 01:46:07,550
is right so these have to be together in

1869
01:46:05,929 --> 01:46:10,550
one vector and these have to be together

1870
01:46:07,550 --> 01:46:11,840
another vector or these appear in a

1871
01:46:10,550 --> 01:46:13,159
vector they don't to be together

1872
01:46:11,840 --> 01:46:14,630
these appear in a vector and don't have

1873
01:46:13,158 --> 01:46:18,170
to be together right so those are these

1874
01:46:14,630 --> 01:46:23,000
can be separated so those are the

1875
01:46:18,170 --> 01:46:24,590
constraints that we have right and we

1876
01:46:23,000 --> 01:46:27,408
know that that that's the two

1877
01:46:24,590 --> 01:46:29,270
constraints we get from this vector so

1878
01:46:27,408 --> 01:46:41,598
writing those out let's just write those

1879
01:46:29,270 --> 01:46:44,869
out as we go so the final ops right that

1880
01:46:41,599 --> 01:46:54,110
right these we know we've got R 0 G 0 B

1881
01:46:44,868 --> 01:47:04,189
0 R 1 G 1 B 1 R 2 G 2 and finally be 2 R

1882
01:46:54,109 --> 01:47:07,639
3 G 3 B 3 and so then we have two things

1883
01:47:04,189 --> 01:47:12,559
we have the shuff constraint right for

1884
01:47:07,639 --> 01:47:14,510
each of these and we get to pick we have

1885
01:47:12,560 --> 01:47:20,000
a shuff constraint and an unpacked

1886
01:47:14,510 --> 01:47:22,429
constraint so the shuff constraint is

1887
01:47:20,000 --> 01:47:29,179
like these things just have to exist

1888
01:47:22,429 --> 01:47:30,828
somewhere right so in the chef

1889
01:47:29,179 --> 01:47:33,679
constraint we would say that there has

1890
01:47:30,828 --> 01:47:37,189
to be a vector that has both are 0 and G

1891
01:47:33,679 --> 01:47:39,319
0 in it but we don't care where and then

1892
01:47:37,189 --> 01:47:42,819
another vector that has B 0 and R 1 in

1893
01:47:39,319 --> 01:47:45,529
it and we don't care we're right

1894
01:47:42,819 --> 01:47:49,009
same thing with here the test of G 1 and

1895
01:47:45,529 --> 01:47:51,408
B 1 in it don't care where R 2 G 2 in it

1896
01:47:49,010 --> 01:47:57,909
don't care we're right this is vector a

1897
01:47:51,408 --> 01:47:57,908
this is vector B same thing here B 2 R 3

1898
01:47:58,090 --> 01:48:08,090
G 3 B 3 so that would be if chef were

1899
01:48:04,519 --> 01:48:10,610
used to write them if unpack were used

1900
01:48:08,090 --> 01:48:13,550
then we know that it's split this way

1901
01:48:10,609 --> 01:48:15,558
and they have to be paired right so you

1902
01:48:13,550 --> 01:48:18,760
can't actually split them up so now we

1903
01:48:15,559 --> 01:48:25,159
know there's an R 0 B 0 in something

1904
01:48:18,760 --> 01:48:30,530
together and a B 0 R 1 oops

1905
01:48:25,158 --> 01:48:36,888
no G 0 R 1 right same here it would be a

1906
01:48:30,529 --> 01:48:46,880
G 1 R 2 and a B 1 G 2 right same here it

1907
01:48:36,889 --> 01:48:51,319
would be a B 2 G 3 R 3 P 3 so these are

1908
01:48:46,880 --> 01:48:53,659
our combination choices right in terms

1909
01:48:51,319 --> 01:48:57,889
of what we know the next set of vectors

1910
01:48:53,658 --> 01:48:59,658
has to be so in each case we have

1911
01:48:57,889 --> 01:49:01,248
constraints on the vectors that would

1912
01:48:59,658 --> 01:49:04,279
propagate forwards so we'd have an

1913
01:49:01,248 --> 01:49:07,189
unpack here with an A and a B we know

1914
01:49:04,279 --> 01:49:10,099
that this tells us a lot if we choose to

1915
01:49:07,189 --> 01:49:11,388
unpack the last time round we know a lot

1916
01:49:10,099 --> 01:49:15,699
about our vectors because these have to

1917
01:49:11,389 --> 01:49:17,659
actually be together right and

1918
01:49:15,698 --> 01:49:20,748
furthermore that's being the same side

1919
01:49:17,658 --> 01:49:23,299
so these both have to be high or both

1920
01:49:20,748 --> 01:49:25,460
have to be low right so this tells us a

1921
01:49:23,300 --> 01:49:28,279
lot this tells us significantly less

1922
01:49:25,460 --> 01:49:31,189
this just tells us that there's an R 0 G

1923
01:49:28,279 --> 01:49:36,380
0 in something somewhere and a b0 and b1

1924
01:49:31,189 --> 01:49:38,719
in something somewhere right so here's

1925
01:49:36,380 --> 01:49:42,590
the question for you which of these have

1926
01:49:38,719 --> 01:49:47,078
the same inputs well here's a pair right

1927
01:49:42,590 --> 01:49:47,078
here right here's B R

1928
01:49:52,500 --> 01:50:07,090
right B 0 R 1 B 2 r 3 no i'm santi

1929
01:50:02,789 --> 01:50:12,550
here's another pair r RG RG and then G B

1930
01:50:07,090 --> 01:50:17,230
G B so if we said look can we do this in

1931
01:50:12,550 --> 01:50:24,090
six shuffles the answer appears to be

1932
01:50:17,229 --> 01:50:26,559
yes because if we produce the vector B 0

1933
01:50:24,090 --> 01:50:34,510
if we produce a vector that has these

1934
01:50:26,560 --> 01:50:37,440
things in it r1 r3 b0 b2 right then we

1935
01:50:34,510 --> 01:50:41,289
have the vector input we need for this

1936
01:50:37,439 --> 01:50:43,539
right for these two opps for writing

1937
01:50:41,289 --> 01:50:47,159
these two and we know we can produce

1938
01:50:43,539 --> 01:50:51,819
this because this is just a chef with RB

1939
01:50:47,159 --> 01:50:54,189
so chef RB gives us this and then using

1940
01:50:51,819 --> 01:50:59,409
this vector as chef's here will give us

1941
01:50:54,189 --> 01:51:05,369
these right r 0 g 0 r 2 g 2 in this case

1942
01:50:59,409 --> 01:51:10,090
same thing so it just be r 0 r 2 g 0 g 2

1943
01:51:05,369 --> 01:51:16,349
that's just a chef r g and finally this

1944
01:51:10,090 --> 01:51:23,050
one same thing so a G 1 G 3 B 1 B 3 is

1945
01:51:16,350 --> 01:51:34,480
just a chef GB so in 6 shuffles we can

1946
01:51:23,050 --> 01:51:35,890
do it right in 6 shuffles that works now

1947
01:51:34,479 --> 01:51:37,899
the question is are any of these things

1948
01:51:35,890 --> 01:51:42,910
duplicitous they don't appear to be

1949
01:51:37,899 --> 01:51:45,009
right and so the only question would be

1950
01:51:42,909 --> 01:51:47,229
you know and so if you looked at what

1951
01:51:45,010 --> 01:51:48,310
these vectors have to contain at that

1952
01:51:47,229 --> 01:51:49,750
point you would just say I don't think

1953
01:51:48,310 --> 01:51:51,730
there's any way to do it in less than 6

1954
01:51:49,750 --> 01:51:55,239
shuffles if you're doing shuffles

1955
01:51:51,729 --> 01:51:58,539
meaning if this if this last thing is

1956
01:51:55,239 --> 01:52:00,130
all shuffles it looks like that's that's

1957
01:51:58,539 --> 01:52:02,289
all you could do that's the best you

1958
01:52:00,130 --> 01:52:04,690
could do but of course we know you don't

1959
01:52:02,289 --> 01:52:09,100
have to do that you could do unpacks

1960
01:52:04,689 --> 01:52:11,229
right and so the question is well would

1961
01:52:09,100 --> 01:52:15,220
an unpack get rid of one of these

1962
01:52:11,229 --> 01:52:19,509
somehow or make it less make there be

1963
01:52:15,220 --> 01:52:27,100
less of it right and if we look at what

1964
01:52:19,510 --> 01:52:30,730
we've got here you know I can't say I

1965
01:52:27,100 --> 01:52:32,200
see much possibility for that so six

1966
01:52:30,729 --> 01:52:36,809
shuffles looks like it would be required

1967
01:52:32,199 --> 01:52:41,590
for at least the naive implementation

1968
01:52:36,810 --> 01:52:48,450
right we've done nothing fancy and it

1969
01:52:41,590 --> 01:52:52,289
would take six shuffles let's try it I

1970
01:52:48,449 --> 01:52:52,289
don't know if we have a shuffle

1971
01:52:57,289 --> 01:53:07,819
I think it's just called shuffle yeah so

1972
01:53:06,260 --> 01:53:11,980
I guess we don't have an mm shuffle in

1973
01:53:07,819 --> 01:53:11,979
here anywhere um but let's just try it

1974
01:53:14,350 --> 01:53:22,370
and so we want to do here is make a

1975
01:53:16,429 --> 01:53:27,980
result and we're literally just doing

1976
01:53:22,369 --> 01:53:29,988
exactly this and we can think of this as

1977
01:53:27,979 --> 01:53:32,448
our Gees and B's as well but doesn't

1978
01:53:29,988 --> 01:53:35,750
really matter right and so if we look at

1979
01:53:32,448 --> 01:53:40,519
this if we wanted these to be ours two

1980
01:53:35,750 --> 01:53:41,988
x's you know G's or Y's and you know B's

1981
01:53:40,520 --> 01:53:42,949
or whatever it is not very complicated

1982
01:53:41,988 --> 01:53:45,409
to figure out how this would work

1983
01:53:42,948 --> 01:53:47,269
we just need to then go all right we're

1984
01:53:45,409 --> 01:53:54,859
gonna do a bunch of shuffles here right

1985
01:53:47,270 --> 01:53:57,469
this is an mm shuffle PS and we know

1986
01:53:54,859 --> 01:54:00,019
that inside here we need temporaries

1987
01:53:57,469 --> 01:54:06,350
right so we know that we need to

1988
01:54:00,020 --> 01:54:13,480
actually have like our F 3 4 X's in this

1989
01:54:06,350 --> 01:54:16,280
case see what we've got here there we go

1990
01:54:13,479 --> 01:54:18,379
and maybe we just make the shuffle work

1991
01:54:16,279 --> 01:54:27,889
on that so maybe we just say something

1992
01:54:18,380 --> 01:54:32,000
like this and I think what we probably

1993
01:54:27,890 --> 01:54:35,060
want to do here is make this a macro

1994
01:54:32,000 --> 01:54:37,189
right and I'll show you why in a second

1995
01:54:35,060 --> 01:54:42,170
but so let's just see what we would

1996
01:54:37,189 --> 01:54:45,319
actually want to pick here so in memory

1997
01:54:42,170 --> 01:54:48,319
order if we want to do to reduce this we

1998
01:54:45,319 --> 01:54:51,649
need our our vectors are our G vector

1999
01:54:48,319 --> 01:54:54,229
right so we'd have our our G vector

2000
01:54:51,649 --> 01:54:55,698
which is an X Y in this parlance right

2001
01:54:54,229 --> 01:54:57,079
Apolo should have done that with

2002
01:54:55,698 --> 01:55:00,919
ex-wives to begin with but you get the

2003
01:54:57,079 --> 01:55:04,010
idea so our X Y vector here is gonna get

2004
01:55:00,920 --> 01:55:08,510
shuffled and what we want to do is we

2005
01:55:04,010 --> 01:55:11,000
want to pick out 0 0 right so if we look

2006
01:55:08,510 --> 01:55:15,170
at what we would get for shuffles here

2007
01:55:11,000 --> 01:55:19,149
or our vector what we're thinking of we

2008
01:55:15,170 --> 01:55:23,899
want zero and two right

2009
01:55:19,149 --> 01:55:30,259
and then when we do our shuffle for our

2010
01:55:23,899 --> 01:55:33,139
next one we want that to be well and you

2011
01:55:30,260 --> 01:55:35,449
know what I forgot the X components so

2012
01:55:33,140 --> 01:55:39,470
here we want Br

2013
01:55:35,449 --> 01:55:47,659
we want these 0 R 1 so that's going to

2014
01:55:39,470 --> 01:55:51,260
come from our be R vector so that's this

2015
01:55:47,659 --> 01:55:55,189
one or I should say our B vector so

2016
01:55:51,260 --> 01:55:57,860
that's our X Z vector so we want to take

2017
01:55:55,189 --> 01:56:04,339
0 &amp; 2 from this vector and then we want

2018
01:55:57,859 --> 01:56:08,869
to take 2 0 you can see the transpose

2019
01:56:04,340 --> 01:56:20,779
and at work here right from the other

2020
01:56:08,869 --> 01:56:23,689
one our next one is G 1 B 1 so that's

2021
01:56:20,779 --> 01:56:30,199
going to come from here it's 0 2 again

2022
01:56:23,689 --> 01:56:34,639
from the G B vector so the G B vector is

2023
01:56:30,199 --> 01:56:38,750
a Y Z vector right and then we need B 1

2024
01:56:34,640 --> 01:56:45,560
I'm sorry and then we need a human be 1

2025
01:56:38,750 --> 01:56:51,520
and then we need our 2 G 2 2 G 2 right

2026
01:56:45,560 --> 01:56:51,520
so we need in this case 1 3

2027
01:56:53,248 --> 01:57:06,840
I mean that from the RG vector finally

2028
01:57:00,179 --> 01:57:15,170
for Z we need B to R 3 so that would be

2029
01:57:06,840 --> 01:57:15,170
from the Y Z the X Z vector and that's

2030
01:57:15,738 --> 01:57:37,109
three no oh yeah it is three one right

2031
01:57:31,248 --> 01:57:50,868
and then finally we need g3 b3 g 3 b3

2032
01:57:37,109 --> 01:57:50,868
such a 1 3 on the Y Z vector so

2033
01:57:54,510 --> 01:58:00,930
that's the production for each of the

2034
01:57:58,890 --> 01:58:03,960
final results we still need these

2035
01:58:00,930 --> 01:58:07,680
vectors so we need our X Y vector our Y

2036
01:58:03,960 --> 01:58:12,869
Z vector and our X Z vector and those

2037
01:58:07,680 --> 01:58:14,190
would be shuffles as well and so the

2038
01:58:12,869 --> 01:58:17,279
final thing we need to do here is

2039
01:58:14,189 --> 01:58:23,159
produce these actual vectors so we need

2040
01:58:17,279 --> 01:58:24,779
r1 r3 b0 b2 for our X Z vector here's

2041
01:58:23,159 --> 01:58:31,470
our X Y vector we'll do that first since

2042
01:58:24,779 --> 01:58:39,119
I wrote that first 0 2 and that's from

2043
01:58:31,470 --> 01:58:54,510
our input right and then from why we

2044
01:58:39,119 --> 01:58:56,670
need 0 2 as well right from y&amp;z what we

2045
01:58:54,510 --> 01:59:03,270
need to do here is say well when we do

2046
01:58:56,670 --> 01:59:07,460
our shuffle for 4y that's going to be 1

2047
01:59:03,270 --> 01:59:07,460
3 and then 4 z it's 1/3 as well

2048
01:59:12,510 --> 01:59:29,050
and then finally we just need our X Z

2049
01:59:19,418 --> 01:59:38,439
vector which is 1 3 0 2 and that's going

2050
01:59:29,050 --> 01:59:44,079
to be on X and Z right so in theory this

2051
01:59:38,439 --> 01:59:45,369
does our Swizzle and you know I don't

2052
01:59:44,078 --> 01:59:51,128
know what the minimum number of

2053
01:59:45,368 --> 01:59:52,868
operations would be for this so I'm not

2054
01:59:51,128 --> 01:59:57,399
sure how close we are to being good

2055
01:59:52,868 --> 02:00:01,569
right 6 might be too many you know 5 may

2056
01:59:57,399 --> 02:00:04,030
be a more likely goal but there you can

2057
02:00:01,569 --> 02:00:11,139
see what we would do now we just need

2058
02:00:04,029 --> 02:00:13,958
our actual shuffle and we'd like to be

2059
02:00:11,139 --> 02:00:15,998
able to write this as an actual function

2060
02:00:13,958 --> 02:00:18,188
but like I said we're not going to be

2061
02:00:15,998 --> 02:00:21,698
able to we're gonna have to write it as

2062
02:00:18,189 --> 02:00:27,519
a macro and the reason for that is

2063
02:00:21,698 --> 02:00:31,029
because there's no actual way to because

2064
02:00:27,519 --> 02:00:34,059
this is an actual instruction the value

2065
02:00:31,029 --> 02:00:43,648
that we pass to the chef PS has to be a

2066
02:00:34,059 --> 02:00:45,878
constant right so if you look in here

2067
02:00:43,649 --> 02:00:48,128
this is an immediate that gets compiled

2068
02:00:45,878 --> 02:00:51,010
with the instruction so it has to be a

2069
02:00:48,128 --> 02:00:54,608
constant value so there's not much we

2070
02:00:51,010 --> 02:00:56,979
can do about that and we passed 0 1 2 or

2071
02:00:54,609 --> 02:01:05,949
3 depending on what we are going to pick

2072
02:00:56,979 --> 02:01:08,649
here and we weld these together into a

2073
02:01:05,948 --> 02:01:11,589
bit stream so you can see like the first

2074
02:01:08,649 --> 02:01:12,878
two bits control the first choice the

2075
02:01:11,590 --> 02:01:15,699
next two bits control the next choice

2076
02:01:12,878 --> 02:01:18,340
and so on so what we need to do here is

2077
02:01:15,698 --> 02:01:21,569
take each of these that we have so we

2078
02:01:18,340 --> 02:01:21,569
have like you know

2079
02:01:21,800 --> 02:01:33,989
s0 s1 s2 s3 and then we have like the a

2080
02:01:27,500 --> 02:01:40,738
and B like so and that becomes an in and

2081
02:01:33,988 --> 02:01:47,459
shuffle PS of a and B and these we need

2082
02:01:40,738 --> 02:01:51,509
the actual p-value for like so that's

2083
02:01:47,460 --> 02:01:53,760
the packed version and that will return

2084
02:01:51,510 --> 02:01:57,989
the result you know that we actually

2085
02:01:53,760 --> 02:02:05,719
want so we can I don't know how we cast

2086
02:01:57,988 --> 02:02:05,718
that exactly here we go

2087
02:02:07,069 --> 02:02:14,908
so now we just need to weld you know s0

2088
02:02:10,708 --> 02:02:17,418
or s1 or s2 or s3 together we need to

2089
02:02:14,908 --> 02:02:20,728
weld these into a single immediate value

2090
02:02:17,418 --> 02:02:24,479
by shifting them each up some amount

2091
02:02:20,729 --> 02:02:28,739
right so each of these values has to get

2092
02:02:24,479 --> 02:02:30,869
shifted up by something and I'm not

2093
02:02:28,738 --> 02:02:33,359
actually sure which order we want them

2094
02:02:30,868 --> 02:02:43,049
in but it will be something like this

2095
02:02:33,359 --> 02:02:57,779
right so that's roughly what we're

2096
02:02:43,050 --> 02:03:02,010
looking for here there we go so I think

2097
02:02:57,779 --> 02:03:04,559
that's mostly what we want and that if

2098
02:03:02,010 --> 02:03:05,668
we actually go debug it is the transpose

2099
02:03:04,559 --> 02:03:08,248
that we're looking for

2100
02:03:05,668 --> 02:03:11,219
I would like to debug that before we go

2101
02:03:08,248 --> 02:03:13,078
any further I will have to fill in

2102
02:03:11,219 --> 02:03:14,819
something just to compile it but I would

2103
02:03:13,078 --> 02:03:16,978
like to step to this and bugger there's

2104
02:03:14,819 --> 02:03:18,569
a really easy way we can then find out

2105
02:03:16,979 --> 02:03:21,989
if we've got this thing working properly

2106
02:03:18,569 --> 02:03:24,418
and that is just to fill these with

2107
02:03:21,988 --> 02:03:26,998
values we actually know what they

2108
02:03:24,418 --> 02:03:29,248
already are so for example if we want to

2109
02:03:26,998 --> 02:03:32,158
know where everything ends up we can

2110
02:03:29,248 --> 02:03:34,498
just fill the input with something and

2111
02:03:32,158 --> 02:03:37,908
see that the output gets the transposed

2112
02:03:34,498 --> 02:03:40,398
version of that something so for example

2113
02:03:37,908 --> 02:03:45,438
if I do this

2114
02:03:40,399 --> 02:03:45,439
oops right beforehand

2115
02:03:46,748 --> 02:04:04,059
I can watch where everything goes right

2116
02:03:54,670 --> 02:04:06,219
similarly if I do this I can watch even

2117
02:04:04,059 --> 02:04:11,590
better because now every element has a

2118
02:04:06,219 --> 02:04:15,609
different thing in it right

2119
02:04:11,590 --> 02:04:19,389
and finally if I just transpose this

2120
02:04:15,609 --> 02:04:20,889
myself I can actually see exactly what

2121
02:04:19,389 --> 02:04:23,038
the heck happens by making sure it

2122
02:04:20,889 --> 02:04:35,498
actually goes into its correct location

2123
02:04:23,038 --> 02:04:46,359
so for example I can do this oops let me

2124
02:04:35,498 --> 02:04:48,099
just do it this way so now if I want to

2125
02:04:46,359 --> 02:04:50,319
I could actually inter leave these right

2126
02:04:48,099 --> 02:04:54,538
so I could say all right so we actually

2127
02:04:50,319 --> 02:04:54,538
want to go zero oops

2128
02:04:54,550 --> 02:05:18,029
four eight one five nine two six 10

2129
02:05:11,670 --> 02:05:18,029
three seven eleven right so I do that

2130
02:05:18,599 --> 02:05:23,559
now we've actually got something that if

2131
02:05:21,639 --> 02:05:26,400
the routine works properly should put

2132
02:05:23,559 --> 02:05:26,400
these numbers in order

2133
02:05:28,238 --> 02:05:35,139
right so let's start there shuffle the

2134
02:05:32,500 --> 02:05:39,909
output should just read off in order

2135
02:05:35,140 --> 02:05:55,780
right so you know at the end of the day

2136
02:05:39,909 --> 02:06:03,300
we would expect to see or actually here

2137
02:05:55,779 --> 02:06:11,199
I would expect to be able to see x e0 e1

2138
02:06:03,300 --> 02:06:23,920
e2 like that and this would let me see

2139
02:06:11,199 --> 02:06:28,750
if this transpose actually works right

2140
02:06:23,920 --> 02:06:31,510
so let's go ahead and nerf this for just

2141
02:06:28,750 --> 02:06:34,029
one second and it's pretty easy to do so

2142
02:06:31,510 --> 02:06:37,239
if I go into diffuse weight map if I

2143
02:06:34,029 --> 02:06:41,559
expect this to be of F 32 for X here and

2144
02:06:37,238 --> 02:06:43,479
then this would not step on the same

2145
02:06:41,560 --> 02:06:46,000
number of things so what that would mean

2146
02:06:43,479 --> 02:06:50,079
is like this value here right would

2147
02:06:46,000 --> 02:06:51,909
would do that so then in here when we

2148
02:06:50,079 --> 02:06:53,949
actually write these out it's actually

2149
02:06:51,909 --> 02:06:55,569
pretty straightforward because we can

2150
02:06:53,949 --> 02:06:57,760
actually still produce it this way and

2151
02:06:55,569 --> 02:07:00,759
say like oh okay so for producing this

2152
02:06:57,760 --> 02:07:03,539
many of these things you could do like

2153
02:07:00,760 --> 02:07:03,539
it you know

2154
02:07:06,829 --> 02:07:24,430
something like this and then at the end

2155
02:07:19,279 --> 02:07:24,429
we can just combine them together right

2156
02:07:33,699 --> 02:07:43,849
and it's not exactly right but it's good

2157
02:07:40,670 --> 02:07:46,670
enough at the moment the reason I say

2158
02:07:43,850 --> 02:07:48,920
it's not exactly right is because now

2159
02:07:46,670 --> 02:07:52,069
it's not we'd have to actually make this

2160
02:07:48,920 --> 02:07:53,180
a four I loop which I don't know if we

2161
02:07:52,069 --> 02:07:58,479
actually want to do I mean I guess we

2162
02:07:53,180 --> 02:07:58,480
could why not

2163
02:08:15,889 --> 02:08:40,559
right and so now we can go take a look

2164
02:08:38,698 --> 02:08:43,288
at that D Swizzle and see if it actually

2165
02:08:40,559 --> 02:08:44,489
does anything right and we can also run

2166
02:08:43,288 --> 02:08:46,309
this to see what the speed would be

2167
02:08:44,488 --> 02:08:48,899
because even though it's probably wrong

2168
02:08:46,309 --> 02:08:50,969
the speed is presumably there and you

2169
02:08:48,899 --> 02:08:54,598
can see it you know it does get you

2170
02:08:50,969 --> 02:08:56,158
quite a bit actually it's not nothing so

2171
02:08:54,599 --> 02:08:57,569
let's go ahead and debug that Swizzle

2172
02:08:56,158 --> 02:09:00,328
and then we have to go debug the rescue

2173
02:08:57,569 --> 02:09:03,988
but we're mostly done now so let's go

2174
02:09:00,328 --> 02:09:05,808
ahead and go to our build turn this to

2175
02:09:03,988 --> 02:09:16,339
addy so we can actually step through it

2176
02:09:05,809 --> 02:09:16,340
here to the transpose set a breakpoint

2177
02:09:19,550 --> 02:09:24,010
we go run its

2178
02:09:29,238 --> 02:09:33,019
and whoa

2179
02:09:34,269 --> 02:09:38,280
uh what happened here

2180
02:09:45,908 --> 02:09:54,839
oh that's exactly what I said I was

2181
02:09:50,889 --> 02:09:58,389
afraid of see what I'm saying

2182
02:09:54,840 --> 02:10:01,150
why do you ever produce a dqa sir I

2183
02:09:58,389 --> 02:10:05,429
never wanted eq i remember i said like

2184
02:10:01,149 --> 02:10:05,429
aligned would be a problem for us

2185
02:10:05,488 --> 02:10:13,678
fine all right I'll do it myself

2186
02:10:18,840 --> 02:10:24,969
so we need our store PS here to do a

2187
02:10:22,988 --> 02:10:27,250
store unaligned which it doesn't look

2188
02:10:24,969 --> 02:10:29,880
like we have some I don't know we're

2189
02:10:27,250 --> 02:10:33,969
gonna have to add one of those I guess

2190
02:10:29,880 --> 02:10:35,980
but track ID I did not want it to ever

2191
02:10:33,969 --> 02:10:38,350
generate in a line store but of course

2192
02:10:35,979 --> 02:10:41,829
it does and there's not much I can

2193
02:10:38,350 --> 02:10:43,840
really do about that so what I want to

2194
02:10:41,829 --> 02:10:46,079
do here is just like force it to not do

2195
02:10:43,840 --> 02:10:49,179
that right I want to force it to do a

2196
02:10:46,079 --> 02:10:53,429
non-aligned store so I want to say look

2197
02:10:49,179 --> 02:10:53,429
just don't do that okay

2198
02:11:01,079 --> 02:11:12,760
not sure how to actually make this thing

2199
02:11:04,229 --> 02:11:17,469
sink it through but probably that it's

2200
02:11:12,760 --> 02:11:19,840
just a pain in the butt right but again

2201
02:11:17,470 --> 02:11:21,159
all I'm doing there's nothing important

2202
02:11:19,840 --> 02:11:23,860
happening here at all this is just

2203
02:11:21,159 --> 02:11:28,319
busywork stupid I'm just trying to tell

2204
02:11:23,859 --> 02:11:28,319
it not to store these things aligned

2205
02:11:30,659 --> 02:11:41,170
what's the complaining about cannot

2206
02:11:32,560 --> 02:11:43,870
convert argument 1 to float star why

2207
02:11:41,170 --> 02:11:47,529
doesn't that take a void pointer anyone

2208
02:11:43,869 --> 02:11:52,449
know no one knows so yet we're just

2209
02:11:47,529 --> 02:11:59,979
gonna write to that and we should be

2210
02:11:52,449 --> 02:12:01,510
good now back to our show so I really

2211
02:11:59,979 --> 02:12:05,259
want to stop if the transpose right I

2212
02:12:01,510 --> 02:12:14,590
don't actually care about any of that

2213
02:12:05,260 --> 02:12:17,909
oh and hey if I wanted to bug the

2214
02:12:14,590 --> 02:12:21,039
transpose I should probably call it huh

2215
02:12:17,909 --> 02:12:26,710
so yeah in order to store the light see

2216
02:12:21,039 --> 02:12:29,710
we need to transpose it here let's add

2217
02:12:26,710 --> 02:12:32,649
that in and now I'm just going to run

2218
02:12:29,710 --> 02:12:34,449
real quick to see if we actually made

2219
02:12:32,649 --> 02:12:37,029
transpose that works at all so just

2220
02:12:34,449 --> 02:12:40,300
trying to bug that and so what we can do

2221
02:12:37,029 --> 02:12:44,409
first is just take a look after we do

2222
02:12:40,300 --> 02:12:48,190
these chefs I set up this order array

2223
02:12:44,409 --> 02:12:51,550
here so we can see what they came out to

2224
02:12:48,189 --> 02:12:53,619
be right and you can see this is garbage

2225
02:12:51,550 --> 02:12:54,940
right so we've got some issues here

2226
02:12:53,619 --> 02:12:57,970
that's not what we want

2227
02:12:54,939 --> 02:13:01,289
oh oops that's cuz I put the wrong thing

2228
02:12:57,970 --> 02:13:01,289
in there though for the test

2229
02:13:03,100 --> 02:13:13,760
sorry cuz I should a result yeah there

2230
02:13:11,179 --> 02:13:16,069
we go we want to look at the result not

2231
02:13:13,760 --> 02:13:18,590
the input obviously although good to

2232
02:13:16,069 --> 02:13:21,769
verify the input I suppose alright let's

2233
02:13:18,590 --> 02:13:27,560
try that one more time and just take a

2234
02:13:21,770 --> 02:13:30,320
look at what comes out so again

2235
02:13:27,560 --> 02:13:32,409
transposed pre transpose data goes in so

2236
02:13:30,319 --> 02:13:37,099
now we expect ordered data to come out

2237
02:13:32,408 --> 02:13:43,129
zero five one one six ten for the F no

2238
02:13:37,100 --> 02:13:46,940
good right so two things could happen

2239
02:13:43,130 --> 02:14:00,199
here one is this is wrong and the other

2240
02:13:46,939 --> 02:14:03,619
is this is wrong right so we don't know

2241
02:14:00,198 --> 02:14:06,019
which of these two is a fault here right

2242
02:14:03,619 --> 02:14:08,238
it could be the thing we built to do

2243
02:14:06,020 --> 02:14:10,040
this first of all this is obviously

2244
02:14:08,238 --> 02:14:11,988
wrong when I just said it's something

2245
02:14:10,039 --> 02:14:15,560
like this so each of these is two bits

2246
02:14:11,988 --> 02:14:17,000
so we know that at the very least it

2247
02:14:15,560 --> 02:14:18,710
needs to be that now we don't know what

2248
02:14:17,000 --> 02:14:21,948
the order is it could be that these are

2249
02:14:18,710 --> 02:14:23,658
actually three zero one two so I'll take

2250
02:14:21,948 --> 02:14:25,759
a look at that but actually we can

2251
02:14:23,658 --> 02:14:29,629
literally just fire-and-forget now if we

2252
02:14:25,760 --> 02:14:31,070
want to hmm we can just try the

2253
02:14:29,630 --> 02:14:32,929
different permutations and not have to

2254
02:14:31,069 --> 02:14:35,149
worry about reading the Intel spec to

2255
02:14:32,929 --> 02:14:38,230
find out what it actually is but yeah

2256
02:14:35,149 --> 02:14:38,229
let's start with that

2257
02:14:42,750 --> 02:14:47,890
all right so that's at least a little

2258
02:14:46,000 --> 02:14:49,899
bit more sane which is good you know

2259
02:14:47,890 --> 02:14:52,750
because it was pretty crazy before but

2260
02:14:49,899 --> 02:14:54,789
you can see still not quite right let's

2261
02:14:52,750 --> 02:14:57,760
take a look at what these internal

2262
02:14:54,789 --> 02:15:12,729
values are just for here so I can see so

2263
02:14:57,760 --> 02:15:14,070
let's take a look at like what XY so

2264
02:15:12,729 --> 02:15:16,479
let's just take a look at this one first

2265
02:15:14,069 --> 02:15:23,079
so if you remember what we expect to see

2266
02:15:16,479 --> 02:15:36,729
here is X 0 X 2 y 0 Y 2 so X 0 is

2267
02:15:23,079 --> 02:15:38,199
correct X 2 is not and I'm I'll be

2268
02:15:36,729 --> 02:15:44,229
honest I'm not even sure how we could

2269
02:15:38,199 --> 02:15:48,659
possibly have produced this how would it

2270
02:15:44,229 --> 02:15:48,659
ever have gotten an 8 from that

2271
02:15:53,708 --> 02:16:13,479
oh wait x0 x2 so yeah no that is

2272
02:16:05,380 --> 02:16:17,199
actually correct X 0 X 0 X 2 y 0 Y 2

2273
02:16:13,479 --> 02:16:18,280
yes never mind I'm I'm crazy so that

2274
02:16:17,198 --> 02:16:38,228
doesn't appear to be producing what we

2275
02:16:18,279 --> 02:16:42,369
want so this should give us 1 3 1 3 so y

2276
02:16:38,228 --> 02:16:52,358
1 that's correct

2277
02:16:42,370 --> 02:16:54,939
y 3 that's correct 3 and 11 4 2 &amp; 3 see

2278
02:16:52,359 --> 02:16:58,029
if those are right yeah

2279
02:16:54,939 --> 02:17:02,318
so that's correct and then last one is X

2280
02:16:58,029 --> 02:17:04,738
Z oops that don't didn't want to do that

2281
02:17:02,318 --> 02:17:04,738
at all

2282
02:17:04,799 --> 02:17:17,188
turn it hit some key accidently get back

2283
02:17:12,519 --> 02:17:17,189
here run to there again please

2284
02:17:23,040 --> 02:17:42,330
okay um one more time XE XE actually can

2285
02:17:37,379 --> 02:17:46,228
I just do this why am i why am i blowing

2286
02:17:42,329 --> 02:17:51,450
that out for no reason just make it type

2287
02:17:46,228 --> 02:17:57,179
and work for myself there we go

2288
02:17:51,450 --> 02:18:05,179
so X Z vector is 4 1 10 7 so it should

2289
02:17:57,179 --> 02:18:05,179
be 3 1 from X 3 1 1 4

2290
02:18:09,190 --> 02:18:12,229
[Music]

2291
02:18:16,969 --> 02:18:26,779
so that doesn't Oh No

2292
02:18:25,010 --> 02:18:30,800
so I'm reading the wrong one one in

2293
02:18:26,780 --> 02:18:31,730
three from X that's fine I was like

2294
02:18:30,800 --> 02:18:35,659
what's going on

2295
02:18:31,729 --> 02:18:38,989
zero and 2 from A's from a-z it's your

2296
02:18:35,659 --> 02:18:41,209
own - yeah alright so all of those do

2297
02:18:38,989 --> 02:18:48,171
look like exactly what we expect them to

2298
02:18:41,209 --> 02:18:49,969
be right and so maybe did we kind of

2299
02:18:48,171 --> 02:18:54,620
mess up what we were thinking here so

2300
02:18:49,969 --> 02:18:59,209
now if we look at what we've got this is

2301
02:18:54,620 --> 02:19:02,810
like X 0 2 y 0 - that's what we have in

2302
02:18:59,209 --> 02:19:07,279
here so now in the X vector we want to

2303
02:19:02,809 --> 02:19:11,449
produce like you know we're looking to

2304
02:19:07,280 --> 02:19:13,551
produce this and then this right so we

2305
02:19:11,450 --> 02:19:17,450
want to produce something that has X 0

2306
02:19:13,550 --> 02:19:20,719
in it which makes sense here and then we

2307
02:19:17,450 --> 02:19:26,470
want to produce something that has X 3

2308
02:19:20,719 --> 02:19:26,469
in it which this did not

2309
02:19:29,129 --> 02:19:40,799
right so this seems like it's slightly

2310
02:19:33,049 --> 02:19:42,959
wrong in this case did we screw

2311
02:19:40,799 --> 02:19:48,148
something up here in the way we were

2312
02:19:42,959 --> 02:19:50,488
looking at this so let's see which one

2313
02:19:48,148 --> 02:19:54,180
that was that was the first one the x1

2314
02:19:50,488 --> 02:20:02,029
right and we said we were going to

2315
02:19:54,180 --> 02:20:02,029
produce RGB are here right so

2316
02:20:13,000 --> 02:20:20,680
oh so actually now I just flooded these

2317
02:20:17,020 --> 02:20:23,470
values wrong though I did a 4x3

2318
02:20:20,680 --> 02:20:26,700
transpose did the other way round so

2319
02:20:23,469 --> 02:20:26,699
actually if we look at what these are

2320
02:20:26,790 --> 02:20:35,979
these are not quite interleaved the way

2321
02:20:29,020 --> 02:20:37,750
that I should have interaction 0 3 right

2322
02:20:35,978 --> 02:20:40,778
because it's it's every 3 that gets

2323
02:20:37,750 --> 02:20:41,609
interleaved I did every 4 don't ask me

2324
02:20:40,779 --> 02:20:44,409
why

2325
02:20:41,609 --> 02:20:48,729
so actually what we want here is if

2326
02:20:44,409 --> 02:20:53,318
these were previously rrrr and we want

2327
02:20:48,728 --> 02:20:58,478
them to be RGB RGB right so this should

2328
02:20:53,318 --> 02:21:04,680
actually be like our miss the G miss the

2329
02:20:58,478 --> 02:21:11,528
B are again right so it's 0 1 2 3 right

2330
02:21:04,680 --> 02:21:15,250
0 1 2 3 4 5 6 7 8 9 right should it look

2331
02:21:11,529 --> 02:21:16,420
like that so that was just me doing the

2332
02:21:15,250 --> 02:21:17,559
wrong thing

2333
02:21:16,420 --> 02:21:19,540
this is what it should have looked like

2334
02:21:17,559 --> 02:21:21,818
I mean it's it's a transpose right so it

2335
02:21:19,540 --> 02:21:23,489
should just read out the columns so I

2336
02:21:21,818 --> 02:21:25,898
think it's just been a slow morning

2337
02:21:23,488 --> 02:21:28,510
probably because I'm like completely

2338
02:21:25,898 --> 02:21:29,709
allergy stricken at this point but

2339
02:21:28,510 --> 02:21:33,100
that's actually what we should have had

2340
02:21:29,709 --> 02:21:35,139
I mean that's just common sense right

2341
02:21:33,100 --> 02:21:37,300
because this matrix is what's gonna get

2342
02:21:35,139 --> 02:21:40,988
transposed so I did that for some reason

2343
02:21:37,299 --> 02:21:43,119
when I did it I did it by 4 because you

2344
02:21:40,988 --> 02:21:45,459
could do the 4 by 3 or the 3 by 4 you

2345
02:21:43,120 --> 02:21:48,340
could do either one and they come out

2346
02:21:45,459 --> 02:21:49,329
differently right so that may have just

2347
02:21:48,340 --> 02:21:54,040
mean me putting in the wrong test

2348
02:21:49,329 --> 02:21:56,398
pattern wouldn't that be nice huh let's

2349
02:21:54,040 --> 02:21:56,399
find out

2350
02:21:57,200 --> 02:22:04,980
hmm not sure why I can't set a

2351
02:22:02,310 --> 02:22:08,399
breakpoint there let me do it now but it

2352
02:22:04,979 --> 02:22:12,090
didn't let me do it before all right hey

2353
02:22:08,399 --> 02:22:16,319
look 0 1 2 3 4 5 6 7 8 9 10 11

2354
02:22:12,090 --> 02:22:20,130
yeah so that's good so that appears to

2355
02:22:16,319 --> 02:22:22,920
work properly and I guess we don't know

2356
02:22:20,129 --> 02:22:24,479
if we set it up right meaning we don't

2357
02:22:22,920 --> 02:22:27,030
actually know if the rest of the code is

2358
02:22:24,479 --> 02:22:29,789
correct but now we can get rid of this

2359
02:22:27,030 --> 02:22:33,720
and we know that our shuffle actually

2360
02:22:29,790 --> 02:22:35,130
works as a I guess I should leave these

2361
02:22:33,719 --> 02:22:40,979
in for people who want to try and make a

2362
02:22:35,129 --> 02:22:43,429
faster shuffle that way they can quickly

2363
02:22:40,979 --> 02:22:43,430
see

2364
02:22:55,260 --> 02:23:01,420
alright let's go ahead and leave that

2365
02:22:59,408 --> 02:23:02,368
for today and we'll pick it up again

2366
02:23:01,420 --> 02:23:04,988
tomorrow

2367
02:23:02,369 --> 02:23:06,729
we could also thread that and then at

2368
02:23:04,988 --> 02:23:08,318
this point it would probably run totally

2369
02:23:06,728 --> 02:23:10,118
fine for our purposes although again

2370
02:23:08,318 --> 02:23:14,170
just it's unfortunate that it's so

2371
02:23:10,119 --> 02:23:18,369
expensive right so you can see like

2372
02:23:14,170 --> 02:23:21,420
we're probably close to good but I think

2373
02:23:18,369 --> 02:23:28,239
we may we may have a bug in there I

2374
02:23:21,420 --> 02:23:30,430
think we still have a bug so you can see

2375
02:23:28,238 --> 02:23:34,779
it's not quite right it's almost right

2376
02:23:30,430 --> 02:23:37,090
but yeah the the stride is off or

2377
02:23:34,779 --> 02:23:48,488
something like this so it's close to

2378
02:23:37,090 --> 02:23:49,988
correct but not quite and I'm not sure

2379
02:23:48,488 --> 02:23:52,209
who's at fault there right could be

2380
02:23:49,988 --> 02:23:55,420
anybody we've done enough stuff now that

2381
02:23:52,209 --> 02:23:58,599
it's a little bit confusing like our

2382
02:23:55,420 --> 02:24:09,129
weight vectors could be wrong we don't

2383
02:23:58,600 --> 02:24:11,460
know so we're we're actually writing out

2384
02:24:09,129 --> 02:24:11,459
these

2385
02:24:25,931 --> 02:24:31,511
yeah that's that's wrong so this code is

2386
02:24:29,050 --> 02:24:33,699
not quite correct so this w value that

2387
02:24:31,511 --> 02:24:38,470
was supposed to load for one of each of

2388
02:24:33,700 --> 02:24:42,190
these this is looping over the wrong

2389
02:24:38,470 --> 02:24:47,350
thing so the SX X Y B is still supposed

2390
02:24:42,190 --> 02:24:50,681
to to be there right and actually what

2391
02:24:47,351 --> 02:24:52,329
gets written less is the TX value right

2392
02:24:50,681 --> 02:24:58,540
because that's where the actual loop

2393
02:24:52,329 --> 02:25:01,750
happens so it's this is what's actually

2394
02:24:58,540 --> 02:25:04,181
supposed to happen right and then so

2395
02:25:01,750 --> 02:25:06,040
then when you do this part here where

2396
02:25:04,181 --> 02:25:12,159
you get the directions lofted up that's

2397
02:25:06,040 --> 02:25:15,450
the actual part where you where you

2398
02:25:12,159 --> 02:25:17,591
actually need to write it out properly

2399
02:25:15,450 --> 02:25:20,230
so I think what we would want to do

2400
02:25:17,591 --> 02:25:22,690
there again is we probably don't

2401
02:25:20,229 --> 02:25:25,091
actually want to do this part this way

2402
02:25:22,690 --> 02:25:27,040
because it's probably just easier since

2403
02:25:25,091 --> 02:25:29,140
we don't need to sim di as this routine

2404
02:25:27,040 --> 02:25:31,721
it's probably simpler to say look just

2405
02:25:29,140 --> 02:25:33,899
leave it the way it is you know don't do

2406
02:25:31,720 --> 02:25:33,899
this

2407
02:25:35,110 --> 02:25:41,290
and then actually compute this map and

2408
02:25:37,899 --> 02:25:46,060
then convert it at the end right to what

2409
02:25:41,290 --> 02:25:47,860
we actually want it to be so when we

2410
02:25:46,060 --> 02:25:51,579
actually go through and produce these

2411
02:25:47,860 --> 02:25:55,381
and we do the summation here we would

2412
02:25:51,579 --> 02:25:55,380
probably do something more like this

2413
02:26:02,370 --> 02:26:07,950
so we've got the sy SX there

2414
02:26:15,521 --> 02:26:19,761
so once we actually just produce these

2415
02:26:18,021 --> 02:26:21,950
in standard scalar form so we have to

2416
02:26:19,761 --> 02:26:23,450
deal with it then at the end what we

2417
02:26:21,950 --> 02:26:26,001
would probably do is say alright now

2418
02:26:23,450 --> 02:26:28,070
let's actually move them out to where

2419
02:26:26,001 --> 02:26:30,021
they belong and when we load up one of

2420
02:26:28,069 --> 02:26:32,899
these what we're effectively doing right

2421
02:26:30,021 --> 02:26:38,200
is we're just taking four of these at a

2422
02:26:32,899 --> 02:26:38,199
time so it should be as simple as just

2423
02:26:40,300 --> 02:26:49,159
as picking off of these right I guess

2424
02:26:46,040 --> 02:26:51,979
the the bummer is that means it actually

2425
02:26:49,159 --> 02:26:56,380
has to be out here right in terms of the

2426
02:26:51,979 --> 02:26:56,380
way it actually gets written back so

2427
02:27:01,899 --> 02:27:16,011
yeah a little bit nasty just looking at

2428
02:27:14,601 --> 02:27:18,171
it right so we're gonna produce each one

2429
02:27:16,011 --> 02:27:19,851
of those and then we need to for each

2430
02:27:18,171 --> 02:27:21,711
outgoing direction we're gonna produce

2431
02:27:19,851 --> 02:27:25,551
the weight matrix and now we want to do

2432
02:27:21,710 --> 02:27:28,100
is slice that up so that we're pulling

2433
02:27:25,550 --> 02:27:32,421
out the weights for subsequent TX values

2434
02:27:28,101 --> 02:27:35,681
as we go so really all that means is

2435
02:27:32,421 --> 02:27:38,300
this now has to kind of be four wide I

2436
02:27:35,681 --> 02:27:43,791
guess would be the way to look at it

2437
02:27:38,300 --> 02:27:45,260
right or we can just sort of point into

2438
02:27:43,790 --> 02:27:49,220
the part of the diffuse map that we're

2439
02:27:45,261 --> 02:27:50,780
actually talking about either way but

2440
02:27:49,220 --> 02:27:53,540
what that means is like when you look at

2441
02:27:50,780 --> 02:27:55,311
the actual lighting code this here is

2442
02:27:53,540 --> 02:27:55,790
you know not gonna look like this

2443
02:27:55,310 --> 02:27:58,729
anymore

2444
02:27:55,790 --> 02:27:59,989
so well I guess I redid it so you can

2445
02:27:58,729 --> 02:28:02,060
see there's there's a lot less in than

2446
02:27:59,989 --> 02:28:05,110
there right so when we're actually

2447
02:28:02,060 --> 02:28:07,251
looking into this one

2448
02:28:05,110 --> 02:28:09,079
what we would want to do is say alright

2449
02:28:07,251 --> 02:28:12,380
which weight map are we actually gonna

2450
02:28:09,079 --> 02:28:14,450
write into on every single one right so

2451
02:28:12,380 --> 02:28:16,130
like when we come through here we're

2452
02:28:14,450 --> 02:28:20,480
gonna want to write into a particular

2453
02:28:16,130 --> 02:28:23,579
weight map for the that specific TX and

2454
02:28:20,479 --> 02:28:25,988
that specific you know

2455
02:28:23,579 --> 02:28:28,568
yeah for that specific txt why to

2456
02:28:25,988 --> 02:28:30,850
everything so if we're gonna do it this

2457
02:28:28,568 --> 02:28:32,680
way we need to do this part properly so

2458
02:28:30,850 --> 02:28:35,290
we would have to do like alright T Y

2459
02:28:32,680 --> 02:28:40,109
minus 1 right because we're looking up

2460
02:28:35,290 --> 02:28:40,109
into 1 that's just the just the square

2461
02:28:42,568 --> 02:28:58,750
that's not true when we look up into

2462
02:28:47,829 --> 02:28:59,799
this how do we look up into this yeah so

2463
02:28:58,750 --> 02:29:02,559
here's what's grabbing the weights out

2464
02:28:59,799 --> 02:29:05,528
here so we are looking into T YT x4 and

2465
02:29:02,559 --> 02:29:13,719
then we just pull out the things by sys

2466
02:29:05,529 --> 02:29:14,890
X right so yeah so this is wrong so

2467
02:29:13,719 --> 02:29:22,510
since these are always going to be

2468
02:29:14,889 --> 02:29:24,849
pulled out by sys X right when we

2469
02:29:22,510 --> 02:29:28,359
actually do the lighting what that means

2470
02:29:24,850 --> 02:29:31,329
is that these remain at this dimension

2471
02:29:28,359 --> 02:29:33,399
the entire time right and when we right

2472
02:29:31,329 --> 02:29:36,309
back into the wait map we're just gonna

2473
02:29:33,398 --> 02:29:38,829
actually right back into it like this so

2474
02:29:36,309 --> 02:29:40,659
the only question is yeah like when we

2475
02:29:38,829 --> 02:29:42,340
write back in we're writing back in wide

2476
02:29:40,659 --> 02:29:45,939
and we're writing back in for multiple

2477
02:29:42,340 --> 02:29:47,318
of the T X's at once right so that was a

2478
02:29:45,939 --> 02:29:49,420
little bit of a brain bender but that's

2479
02:29:47,318 --> 02:29:51,129
how it's actually supposed to work so if

2480
02:29:49,420 --> 02:29:53,799
we look in here and we say okay let's

2481
02:29:51,129 --> 02:29:56,228
try to make this work properly then when

2482
02:29:53,799 --> 02:29:58,148
we grab the correct one out here this

2483
02:29:56,228 --> 02:30:05,760
this is the thing that's actually gonna

2484
02:29:58,148 --> 02:30:09,969
grab out the weight map multiple times

2485
02:30:05,760 --> 02:30:12,189
interior to here right so I mean I guess

2486
02:30:09,969 --> 02:30:15,549
another way to say it would be that

2487
02:30:12,189 --> 02:30:21,370
there's multiple of these that we do

2488
02:30:15,549 --> 02:30:22,778
before I loop over trying to think of

2489
02:30:21,370 --> 02:30:24,760
how we do that but I guess we would just

2490
02:30:22,779 --> 02:30:29,859
try and do they look up in here we'll

2491
02:30:24,760 --> 02:30:31,180
see how this works but yeah so then at

2492
02:30:29,859 --> 02:30:33,460
this point we have to say all right the

2493
02:30:31,180 --> 02:30:35,439
addressing of the diffuse weight map is

2494
02:30:33,459 --> 02:30:37,659
now complicated what actually is going

2495
02:30:35,439 --> 02:30:40,510
to happen is we have to look up the

2496
02:30:37,659 --> 02:30:43,629
wait map this way where we take the TX

2497
02:30:40,510 --> 02:30:45,670
value we subtract one from it and then

2498
02:30:43,629 --> 02:30:47,949
we divide by four to figure out where

2499
02:30:45,670 --> 02:30:49,390
we're actually looking up right so

2500
02:30:47,950 --> 02:30:51,370
that's the actual weight map that we

2501
02:30:49,390 --> 02:30:54,219
want and then when we're right in here

2502
02:30:51,370 --> 02:31:01,811
we write the residual of that so we go

2503
02:30:54,219 --> 02:31:09,310
in here and we say s y sx the element of

2504
02:31:01,810 --> 02:31:12,851
this it's nuts right the element of this

2505
02:31:09,310 --> 02:31:14,529
is the TX minus 1 mod 4 right so the

2506
02:31:12,851 --> 02:31:17,771
remainder goes in here and that's

2507
02:31:14,530 --> 02:31:22,601
actually how the weights get written in

2508
02:31:17,771 --> 02:31:24,220
there it's actually this so that

2509
02:31:22,601 --> 02:31:28,060
properly unpacks them for the way that

2510
02:31:24,219 --> 02:31:31,179
they were actually addressed right and

2511
02:31:28,060 --> 02:31:33,430
now I think we have close to correct

2512
02:31:31,180 --> 02:31:35,530
it's still probably wrong and we'll have

2513
02:31:33,430 --> 02:31:40,710
to track the values through but that's

2514
02:31:35,530 --> 02:31:40,710
at least more what it should have been

2515
02:31:41,340 --> 02:31:47,260
so a ton of work right and again this is

2516
02:31:44,620 --> 02:31:49,540
why I say like the SSE instruction set

2517
02:31:47,260 --> 02:31:52,420
just sucks and the reason for that is

2518
02:31:49,540 --> 02:31:55,120
very simple the amount of time it takes

2519
02:31:52,420 --> 02:31:57,640
to turn an algorithm from a scalar

2520
02:31:55,120 --> 02:32:00,220
algorithm into an SSE algorithm it's

2521
02:31:57,640 --> 02:32:02,049
just way too much thought yes you can

2522
02:32:00,219 --> 02:32:04,239
rely on libraries or a vectorizing

2523
02:32:02,049 --> 02:32:06,729
compiler to do it for you perhaps but

2524
02:32:04,239 --> 02:32:08,500
all of that thought that I'm doing had

2525
02:32:06,729 --> 02:32:09,670
to be done by the library authors and

2526
02:32:08,500 --> 02:32:12,340
they have to figure out a way to provide

2527
02:32:09,670 --> 02:32:14,021
an interface or the compiler has to have

2528
02:32:12,340 --> 02:32:17,380
all of that stuff that I just did and

2529
02:32:14,021 --> 02:32:18,579
hope that it does it well right and it

2530
02:32:17,379 --> 02:32:21,429
adds a ton of complexity something's

2531
02:32:18,579 --> 02:32:23,110
already complex it's just not good right

2532
02:32:21,430 --> 02:32:25,090
if the instruction set it just had

2533
02:32:23,110 --> 02:32:26,560
swizzles built in that routine just

2534
02:32:25,090 --> 02:32:28,960
would have been instant you wouldn't

2535
02:32:26,560 --> 02:32:30,520
have to do any of that stuff right you

2536
02:32:28,959 --> 02:32:32,589
just say here's what I'm loading just

2537
02:32:30,521 --> 02:32:34,030
you know I'm loading Swizzle to do the

2538
02:32:32,590 --> 02:32:34,500
ops and then writes whistled and that'd

2539
02:32:34,030 --> 02:32:37,300
be it

2540
02:32:34,500 --> 02:32:40,629
and that would have been a good

2541
02:32:37,299 --> 02:32:41,949
instruction set and way more stuff could

2542
02:32:40,629 --> 02:32:44,589
take advantage of somebody at that point

2543
02:32:41,950 --> 02:32:47,400
because anybody could write it and you

2544
02:32:44,590 --> 02:32:47,399
wouldn't have to know anything

2545
02:32:48,578 --> 02:32:51,590
all right so I still want to be more

2546
02:32:50,510 --> 02:32:56,568
debugging on that but I think that's

2547
02:32:51,590 --> 02:32:59,930
good for today so yeah I mean I think

2548
02:32:56,568 --> 02:33:03,129
we're all right there we can do diffuse

2549
02:32:59,930 --> 02:33:06,139
lighting and specular lighting now

2550
02:33:03,129 --> 02:33:09,170
pretty straightforward so I think we're

2551
02:33:06,139 --> 02:33:10,568
pretty good to go and the question is

2552
02:33:09,170 --> 02:33:22,189
just like is that gonna be too slow

2553
02:33:10,568 --> 02:33:23,719
right I'll go to a quick QA and by the

2554
02:33:22,189 --> 02:33:25,010
way we should search at some point

2555
02:33:23,719 --> 02:33:26,868
I mean maybe we'll search later to see

2556
02:33:25,010 --> 02:33:28,340
if there's a faster than six shuffles

2557
02:33:26,869 --> 02:33:29,630
cuz there's probably a faster than six

2558
02:33:28,340 --> 02:33:30,859
shuffles transpose and be nice to know

2559
02:33:29,629 --> 02:33:32,778
what it was just so for our own

2560
02:33:30,859 --> 02:33:36,738
education that it for our own

2561
02:33:32,779 --> 02:33:39,800
edification because people spend a lot

2562
02:33:36,738 --> 02:33:42,318
of time working on these transposes and

2563
02:33:39,799 --> 02:33:46,788
stuff and so there's probably like a

2564
02:33:42,318 --> 02:33:48,288
definitive answer somewhere or it's like

2565
02:33:46,789 --> 02:33:50,239
oh if you use an unpacked you can do it

2566
02:33:48,289 --> 02:33:52,789
in five or whatever right if you just

2567
02:33:50,238 --> 02:33:54,728
put the unpack here you can save to two

2568
02:33:52,789 --> 02:33:58,359
of the shuffles with one unpack

2569
02:33:54,728 --> 02:33:58,358
something like that right

2570
02:34:22,950 --> 02:34:26,019
[Music]

2571
02:34:49,200 --> 02:34:53,761
and by the way just so folks know

2572
02:34:51,681 --> 02:34:58,500
because I saw a question on the stream

2573
02:34:53,761 --> 02:35:02,761
up that is related transposes are

2574
02:34:58,500 --> 02:35:03,931
symmetric generally speaking so you

2575
02:35:02,761 --> 02:35:08,011
usually don't have to think too hard

2576
02:35:03,931 --> 02:35:10,261
about which way you're going right but

2577
02:35:08,011 --> 02:35:12,479
in this particular case because it's a

2578
02:35:10,261 --> 02:35:14,579
four by three versus a three by 4 and so

2579
02:35:12,479 --> 02:35:16,649
on kind of have to think about it a

2580
02:35:14,579 --> 02:35:18,450
little more carefully but so what we

2581
02:35:16,649 --> 02:35:25,289
were trying to do is we were trying to

2582
02:35:18,450 --> 02:35:31,409
go from rrrr gggg bbbb to RGB RGB RGB

2583
02:35:25,290 --> 02:35:35,841
RGB RGB right vulva so why can't you do

2584
02:35:31,409 --> 02:35:38,640
the unpack on the GPU side um so yeah

2585
02:35:35,841 --> 02:35:42,780
well it depends exactly what you mean by

2586
02:35:38,640 --> 02:35:45,511
that but if we had a little bit more

2587
02:35:42,780 --> 02:35:50,460
specificity so if we weren't using

2588
02:35:45,511 --> 02:35:53,551
OpenGL we probably could do a texture

2589
02:35:50,459 --> 02:35:56,970
submission where we submitted the data

2590
02:35:53,550 --> 02:36:00,659
in a format that was Swizzle and was

2591
02:35:56,970 --> 02:36:02,699
easier for us to use right since we are

2592
02:36:00,659 --> 02:36:05,610
using OpenGL the only way that we would

2593
02:36:02,700 --> 02:36:10,351
really be able to do that without

2594
02:36:05,610 --> 02:36:12,931
extensions and stuff is if we've just

2595
02:36:10,351 --> 02:36:15,900
stored a read texture a green texture in

2596
02:36:12,931 --> 02:36:19,230
a blue texture right and the reason we

2597
02:36:15,899 --> 02:36:21,060
don't want to do that is because then we

2598
02:36:19,229 --> 02:36:24,270
would have to actually take a lot more

2599
02:36:21,060 --> 02:36:28,379
texture samplers which just grat like it

2600
02:36:24,271 --> 02:36:30,780
complicates the shader look it forces a

2601
02:36:28,379 --> 02:36:33,390
shader to do more instructions and it

2602
02:36:30,780 --> 02:36:36,150
forces more texture bandwidth to because

2603
02:36:33,390 --> 02:36:37,739
it's gonna pull in the whole block of

2604
02:36:36,149 --> 02:36:39,239
ours the whole block of G's and the

2605
02:36:37,739 --> 02:36:43,039
whole block of B's even though we only

2606
02:36:39,239 --> 02:36:43,039
needed an RGB right

2607
02:36:46,590 --> 02:36:50,290
the big Fox says it looks like in this

2608
02:36:48,908 --> 02:36:53,789
article they do it in six shuffles

2609
02:36:50,290 --> 02:37:01,330
similarly to how you do it great

2610
02:36:53,790 --> 02:37:02,489
seriously so I mean you mean that was

2611
02:37:01,329 --> 02:37:04,299
the best we could do

2612
02:37:02,488 --> 02:37:09,760
although wait but that says to and

2613
02:37:04,299 --> 02:37:12,039
56-bit AVX so with a VX it still takes

2614
02:37:09,760 --> 02:37:18,130
six levels but is a VX doing six

2615
02:37:12,040 --> 02:37:20,580
shuffles to do twice as many though or

2616
02:37:18,129 --> 02:37:20,579
not really

2617
02:37:28,341 --> 02:37:32,640
could be feasible to pack into a

2618
02:37:30,450 --> 02:37:39,570
different GPU supported format maybe

2619
02:37:32,640 --> 02:37:49,350
even compressed well you so Carolee pack

2620
02:37:39,570 --> 02:37:51,810
into a compressed format right because

2621
02:37:49,351 --> 02:37:52,861
you have to do the compression right so

2622
02:37:51,810 --> 02:37:56,820
that wouldn't be really considered

2623
02:37:52,861 --> 02:37:57,631
packing that's like compressing and sure

2624
02:37:56,820 --> 02:38:01,831
it's feasible

2625
02:37:57,630 --> 02:38:07,890
you'd have to if you're going to use

2626
02:38:01,831 --> 02:38:10,831
like a DX TC format or something you

2627
02:38:07,890 --> 02:38:12,570
would have to sum up your values and

2628
02:38:10,831 --> 02:38:13,921
figure out what your two interpolated

2629
02:38:12,570 --> 02:38:19,431
values were going to be and stuff like

2630
02:38:13,921 --> 02:38:19,431
that but you could do it right

2631
02:38:27,819 --> 02:38:32,479
alright well if they say that six is the

2632
02:38:30,530 --> 02:38:41,630
best for 128-bits well that's what we

2633
02:38:32,479 --> 02:38:46,840
did so kudos to us I guess I don't know

2634
02:38:41,629 --> 02:38:46,839
how fast six shuffles would be so

2635
02:38:47,021 --> 02:38:53,780
they're dependent shuffles you're

2636
02:38:50,629 --> 02:38:56,589
issuing three of them shuffles like I

2637
02:38:53,780 --> 02:39:02,150
want to say shuffles on port five and

2638
02:38:56,590 --> 02:39:04,659
only on port five let me see if I'm

2639
02:39:02,149 --> 02:39:04,659
wrong about that

2640
02:39:16,309 --> 02:39:19,939
[Music]

2641
02:39:22,939 --> 02:39:38,010
doing it didn't and didn't do so yeah

2642
02:39:35,148 --> 02:39:47,599
yeah so this code is gonna suck is

2643
02:39:38,010 --> 02:39:47,600
basically what it boils down to so like

2644
02:39:47,750 --> 02:39:53,549
basically the only saving grace for this

2645
02:39:50,728 --> 02:39:59,158
code and the reason that it's fine

2646
02:39:53,549 --> 02:40:01,709
probably in this case is that if you

2647
02:39:59,158 --> 02:40:03,750
look at where this is being done we're

2648
02:40:01,709 --> 02:40:06,179
basically doing it transpose and then a

2649
02:40:03,750 --> 02:40:09,389
bunch of stores and then we never care

2650
02:40:06,180 --> 02:40:11,729
right and so I think the saving grace

2651
02:40:09,389 --> 02:40:17,250
for this code is that it plows a bunch

2652
02:40:11,728 --> 02:40:19,170
of crap on to port 5 and then plows a

2653
02:40:17,250 --> 02:40:24,859
bunch of stuff on to port 2 and 3 that

2654
02:40:19,170 --> 02:40:31,189
comes out right no 4 &amp; 5

2655
02:40:24,859 --> 02:40:31,189
I'm sorry so what what is this

2656
02:40:39,930 --> 02:40:43,889
two and three so I was right the first

2657
02:40:42,000 --> 02:40:51,510
time

2658
02:40:43,889 --> 02:40:53,399
oh no I wasn't sorry three and seven two

2659
02:40:51,510 --> 02:40:57,510
three seven and four

2660
02:40:53,399 --> 02:41:05,399
those must be the reckon the right ports

2661
02:40:57,510 --> 02:41:07,649
four and seven I've believe it or not

2662
02:41:05,399 --> 02:41:09,329
I've studied writing hardly at all

2663
02:41:07,649 --> 02:41:10,649
because most of my work on low-level

2664
02:41:09,329 --> 02:41:13,590
observation ends up happening on meow

2665
02:41:10,649 --> 02:41:15,690
hash which never writes anything so my

2666
02:41:13,590 --> 02:41:22,021
knowledge of the right port situation is

2667
02:41:15,690 --> 02:41:23,340
like bad so anyway either way I think

2668
02:41:22,021 --> 02:41:25,050
the only saving grace er is the fact

2669
02:41:23,340 --> 02:41:26,880
that basically we just pile a bunch of

2670
02:41:25,049 --> 02:41:27,420
crap onto port five and then we do our

2671
02:41:26,879 --> 02:41:30,689
rights

2672
02:41:27,420 --> 02:41:33,569
nobody needs those values so since

2673
02:41:30,690 --> 02:41:35,790
what's about to happen here is mostly

2674
02:41:33,569 --> 02:41:37,709
multiplies in ads which are not on port

2675
02:41:35,790 --> 02:41:39,300
five I mean they can be but they don't

2676
02:41:37,709 --> 02:41:41,759
have to be like the ads can be on zero

2677
02:41:39,299 --> 02:41:48,959
and one and the moles aren't on five I

2678
02:41:41,760 --> 02:41:51,030
don't think yeah so basically port zero

2679
02:41:48,959 --> 02:41:53,129
and one floods here and then five floods

2680
02:41:51,030 --> 02:41:54,811
here so we don't need to worry about the

2681
02:41:53,129 --> 02:41:58,229
fact that like we're basically just

2682
02:41:54,810 --> 02:41:59,789
putting enough stuff in for 0 &amp; 1 &amp; 5 so

2683
02:41:58,229 --> 02:42:01,139
that the fact that they all happen

2684
02:41:59,790 --> 02:42:03,150
together is okay because it'll just

2685
02:42:01,139 --> 02:42:07,199
interleave those in the window I think

2686
02:42:03,149 --> 02:42:09,270
so the the 6 shuffle thing is not

2687
02:42:07,200 --> 02:42:11,790
horrible but you can see why that would

2688
02:42:09,271 --> 02:42:14,610
if you actually had to use the results

2689
02:42:11,790 --> 02:42:16,980
of the shuffle so if we add a bunch of

2690
02:42:14,610 --> 02:42:19,680
further operations that we're gonna pile

2691
02:42:16,979 --> 02:42:22,079
up behind the 6 shuffles that would suck

2692
02:42:19,680 --> 02:42:26,340
because you can only issue one shuffle

2693
02:42:22,079 --> 02:42:28,229
per cycle so it would literally be six

2694
02:42:26,340 --> 02:42:33,000
cycles sitting around with these

2695
02:42:28,229 --> 02:42:35,159
shuffles right because it'd just be port

2696
02:42:33,000 --> 02:42:38,271
5 block part 5 block 4 five block four

2697
02:42:35,159 --> 02:42:43,639
five block four five block you'd just be

2698
02:42:38,271 --> 02:42:43,640
blocking on port five all day long right

2699
02:42:56,489 --> 02:43:00,699
would you consider using the vector

2700
02:42:58,510 --> 02:43:06,340
extension from clang if you went clang

2701
02:43:00,700 --> 02:43:07,689
only um so like I would probably try

2702
02:43:06,340 --> 02:43:10,148
turning it on just to see if it did a

2703
02:43:07,689 --> 02:43:12,550
good job right and then we could just

2704
02:43:10,148 --> 02:43:14,559
avoid optimizing things until later I

2705
02:43:12,549 --> 02:43:15,789
don't think I'd probably counted it to

2706
02:43:14,559 --> 02:43:19,019
do much work for me because I'm assuming

2707
02:43:15,790 --> 02:43:23,470
I'm still gonna probably have to do it

2708
02:43:19,020 --> 02:43:24,790
but let's do all the work we do for

2709
02:43:23,469 --> 02:43:27,039
generating serious nipples not using no

2710
02:43:24,790 --> 02:43:29,020
we use it we're not using it at the very

2711
02:43:27,040 --> 02:43:31,630
immediate moment because we're just

2712
02:43:29,020 --> 02:43:33,700
plugging in the test pattern right but

2713
02:43:31,629 --> 02:43:35,609
the sphere samples get used as soon as

2714
02:43:33,700 --> 02:43:40,450
we switch to the actual light transport

2715
02:43:35,610 --> 02:43:41,710
as soon as we debug this right so if to

2716
02:43:40,450 --> 02:43:43,240
debug this and make sure we're still

2717
02:43:41,709 --> 02:43:44,978
getting the same results whether or not

2718
02:43:43,239 --> 02:43:47,170
we use for wide and I'm pretty sure we

2719
02:43:44,978 --> 02:43:51,000
probably screwed something up so to go

2720
02:43:47,170 --> 02:43:51,000
verify that that pipeline flows properly

2721
02:43:52,409 --> 02:43:56,500
but it's going to do that we switch over

2722
02:43:54,549 --> 02:44:00,909
to the light transport that still uses

2723
02:43:56,500 --> 02:44:04,270
the sphere samples right so yeah it's

2724
02:44:00,909 --> 02:44:09,100
all it's all good and and then we're

2725
02:44:04,270 --> 02:44:10,239
done we're just maybe slow but when we

2726
02:44:09,100 --> 02:44:14,110
switch over to the actual light

2727
02:44:10,239 --> 02:44:18,639
transport that's full lighting real-time

2728
02:44:14,110 --> 02:44:24,819
lighting per pixel with indirect believe

2729
02:44:18,639 --> 02:44:34,349
it or not and so we might be slow but we

2730
02:44:24,819 --> 02:44:38,219
did it right and and yeah let's see how

2731
02:44:34,350 --> 02:44:38,220
how we feel about it at that point

2732
02:45:04,390 --> 02:45:12,399
yes 15 Sh yep sure why not

2733
02:45:09,511 --> 02:45:15,700
the problem is it's on cpu side so it's

2734
02:45:12,399 --> 02:45:18,279
never gonna get any faster right that's

2735
02:45:15,700 --> 02:45:19,630
the only downside if it were GPU we

2736
02:45:18,280 --> 02:45:22,540
could probably say yeah 15 frames per

2737
02:45:19,629 --> 02:45:24,720
second sure a couple years and my heroes

2738
02:45:22,540 --> 02:45:28,150
finished the GPUs will all be way faster

2739
02:45:24,720 --> 02:45:30,239
thought you know all good don't worry

2740
02:45:28,149 --> 02:45:33,550
about it

2741
02:45:30,239 --> 02:45:34,841
but CPUs that doesn't really happen so

2742
02:45:33,550 --> 02:45:37,619
at the very least we'd have to move all

2743
02:45:34,841 --> 02:45:39,431
the letting go to the GPU right

2744
02:45:37,620 --> 02:45:41,980
scallywag what's next let's do this

2745
02:45:39,431 --> 02:45:43,810
after lighting after a lighting we'll

2746
02:45:41,979 --> 02:45:46,619
probably go in and try to do some world

2747
02:45:43,810 --> 02:45:50,739
building so like building some levels

2748
02:45:46,620 --> 02:45:55,030
and so that we can start working on the

2749
02:45:50,739 --> 02:45:57,940
art like level structure communication

2750
02:45:55,030 --> 02:46:01,230
stuff just make sure that's all working

2751
02:45:57,940 --> 02:46:01,230
because just needs a little refinement

2752
02:46:03,601 --> 02:46:07,060
is there a reasonable performance

2753
02:46:05,681 --> 02:46:08,560
difference on a line to done align move

2754
02:46:07,060 --> 02:46:13,869
in SSE - no there's no difference

2755
02:46:08,560 --> 02:46:17,500
they're the same so basically the way

2756
02:46:13,870 --> 02:46:20,860
that the way that a line versus

2757
02:46:17,500 --> 02:46:26,800
unaligned works these days is it doesn't

2758
02:46:20,860 --> 02:46:29,290
matter they're the same speed the only

2759
02:46:26,800 --> 02:46:35,159
difference between the two on modern

2760
02:46:29,290 --> 02:46:35,160
processors is if you happen to cross a

2761
02:46:35,250 --> 02:46:44,050
boundary that is important so for

2762
02:46:39,280 --> 02:46:46,570
example an aligned right can never cross

2763
02:46:44,050 --> 02:46:50,829
a page boundary so if you imagine pages

2764
02:46:46,569 --> 02:46:53,649
are 4k long right and aligned right can

2765
02:46:50,829 --> 02:46:55,659
never straddle two 4k pages because

2766
02:46:53,649 --> 02:46:58,659
since it's a line - 16 bytes

2767
02:46:55,659 --> 02:47:00,579
there's no way to write to an aligned

2768
02:46:58,659 --> 02:47:02,351
set of 16 bytes that crosses a page

2769
02:47:00,579 --> 02:47:06,670
doesn't happen it can't it can't happen

2770
02:47:02,351 --> 02:47:09,819
right an unaligned right can cross a 4k

2771
02:47:06,670 --> 02:47:12,909
page and if you cross a 4k page you pay

2772
02:47:09,819 --> 02:47:15,690
32 cycle penalty I think for that

2773
02:47:12,909 --> 02:47:15,690
operation

2774
02:47:16,200 --> 02:47:21,970
three just like--all zany that much

2775
02:47:18,159 --> 02:47:24,539
actually so if you only do it every once

2776
02:47:21,969 --> 02:47:27,099
in a while you probably don't care

2777
02:47:24,540 --> 02:47:30,700
unless you're really maxing out your

2778
02:47:27,100 --> 02:47:33,280
throughput right look on meow - maybe we

2779
02:47:30,700 --> 02:47:34,659
care on most algorithms probably you

2780
02:47:33,280 --> 02:47:36,399
don't because you probably can't get the

2781
02:47:34,659 --> 02:47:38,859
algorithm running fast enough that that

2782
02:47:36,398 --> 02:47:40,299
thirty-two cycle bubble can't just hide

2783
02:47:38,859 --> 02:47:47,260
a bunch of calculations you were doing

2784
02:47:40,299 --> 02:47:50,259
anyway right so I don't want to say

2785
02:47:47,260 --> 02:47:52,420
there's no difference cuz I just

2786
02:47:50,260 --> 02:47:56,170
explained to you a difference but it's

2787
02:47:52,420 --> 02:47:57,760
almost no difference so really when

2788
02:47:56,170 --> 02:48:00,700
you're talking about aligned versus

2789
02:47:57,760 --> 02:48:06,189
unaligned you're usually talking more

2790
02:48:00,700 --> 02:48:11,409
about some other thing false sharing for

2791
02:48:06,189 --> 02:48:13,389
cache purposes so basically ruining your

2792
02:48:11,409 --> 02:48:16,148
multi-threading because your unaligned

2793
02:48:13,389 --> 02:48:21,849
to cache boundaries or something that

2794
02:48:16,148 --> 02:48:25,329
could be a thing again pretty unlikely

2795
02:48:21,850 --> 02:48:26,290
cuz the fact that algorithm you probably

2796
02:48:25,329 --> 02:48:28,930
wouldn't have written it that way but

2797
02:48:26,290 --> 02:48:34,359
you know just pointed out other

2798
02:48:28,930 --> 02:48:37,989
processors so old X 64 processors did

2799
02:48:34,359 --> 02:48:42,220
care about a line versus unaligned or

2800
02:48:37,989 --> 02:48:44,228
x86 processors I should say and some

2801
02:48:42,219 --> 02:48:46,148
other you know embedded processors you

2802
02:48:44,228 --> 02:48:49,000
know phones or whatever you may have

2803
02:48:46,148 --> 02:48:51,119
problems on those so you may care but

2804
02:48:49,000 --> 02:48:54,120
it's probably not going to be on an x64

2805
02:48:51,120 --> 02:48:54,120
right

2806
02:48:59,299 --> 02:49:03,359
how do you reason about separable

2807
02:49:01,408 --> 02:49:05,429
filters when say running along the

2808
02:49:03,359 --> 02:49:09,059
y-axis for an image kernel might incur a

2809
02:49:05,429 --> 02:49:11,219
cache miss on a sequential access for

2810
02:49:09,059 --> 02:49:15,748
non block storage well the answer there

2811
02:49:11,218 --> 02:49:18,358
is just don't do that right so a

2812
02:49:15,748 --> 02:49:21,600
separable filter is still not usually

2813
02:49:18,359 --> 02:49:23,609
infinitely wide so a separable filter

2814
02:49:21,600 --> 02:49:30,418
usually can do something like process in

2815
02:49:23,609 --> 02:49:33,299
blocks so you process say you know you

2816
02:49:30,418 --> 02:49:35,939
write out 64 bytes of your answer and

2817
02:49:33,299 --> 02:49:38,249
then you can do the next row and do 64

2818
02:49:35,939 --> 02:49:40,648
bytes of your answer there right so

2819
02:49:38,248 --> 02:49:45,559
usually a separable filter you can do

2820
02:49:40,648 --> 02:49:45,559
still do it in chunks you know I mean

2821
02:50:05,500 --> 02:50:12,398
is there a reason to use move APs

2822
02:50:08,079 --> 02:50:15,579
instead of move ups no there never

2823
02:50:12,398 --> 02:50:19,059
should have been a move ApS that was

2824
02:50:15,579 --> 02:50:21,549
just a design bug there there never

2825
02:50:19,059 --> 02:50:27,219
should have been a move aps and there

2826
02:50:21,549 --> 02:50:30,429
never should have been non veep the so

2827
02:50:27,219 --> 02:50:33,728
the way that it works on ecstasy for is

2828
02:50:30,430 --> 02:50:35,050
non v prefix instructions and I'm only

2829
02:50:33,728 --> 02:50:39,068
talking to people here I guess who know

2830
02:50:35,049 --> 02:50:41,199
what any of this stuff is but non V

2831
02:50:39,068 --> 02:50:44,939
prefix instructions throw an exception

2832
02:50:41,200 --> 02:50:50,200
if the memory parameter is unaligned

2833
02:50:44,939 --> 02:50:52,898
that was also a huge mistake they fixed

2834
02:50:50,200 --> 02:50:55,630
it with V prefix instructions so if

2835
02:50:52,898 --> 02:50:59,500
you're actually writing modern code for

2836
02:50:55,629 --> 02:51:01,809
modern processors you just go look we're

2837
02:50:59,500 --> 02:51:04,238
gonna start with a V X we'll put V

2838
02:51:01,809 --> 02:51:05,528
prefix structures on everything and then

2839
02:51:04,238 --> 02:51:07,510
now there's no such thing as an aligned

2840
02:51:05,529 --> 02:51:09,250
anything you never type move a PS for

2841
02:51:07,510 --> 02:51:11,648
any reason it just doesn't exist as far

2842
02:51:09,250 --> 02:51:17,459
as you're concerned and you just have mu

2843
02:51:11,648 --> 02:51:17,459
V ma view PS and V everything else right

2844
02:51:17,939 --> 02:51:23,738
and so that's you know really the main

2845
02:51:21,159 --> 02:51:26,889
thing right amar how do we go back to

2846
02:51:23,738 --> 02:51:28,898
60fps now well I mean we got to get our

2847
02:51:26,889 --> 02:51:34,180
lighting to the point where we're gonna

2848
02:51:28,898 --> 02:51:36,969
consider it done from a like what the

2849
02:51:34,180 --> 02:51:40,960
look is standpoint and once we're sure

2850
02:51:36,969 --> 02:51:44,019
that it's done then we just optimize our

2851
02:51:40,959 --> 02:51:46,778
code which there's a lot of optimization

2852
02:51:44,020 --> 02:51:50,800
potential that we can tap into here and

2853
02:51:46,779 --> 02:51:52,870
that may involve moving it to a GPU it

2854
02:51:50,799 --> 02:51:54,639
may involve just optimizing the CPU side

2855
02:51:52,870 --> 02:51:57,840
because there's a lot of fat in there

2856
02:51:54,639 --> 02:52:00,760
right now due to all the experimentation

2857
02:51:57,840 --> 02:52:03,988
and we don't know so it's not clear

2858
02:52:00,760 --> 02:52:07,689
exactly what we're gonna want to do

2859
02:52:03,988 --> 02:52:10,389
going forward we're gonna have to play

2860
02:52:07,689 --> 02:52:13,479
that by ear but as it stands currently

2861
02:52:10,389 --> 02:52:18,250
there's a ton of you know work we can do

2862
02:52:13,478 --> 02:52:20,809
to improve the performance so you know

2863
02:52:18,250 --> 02:52:22,908
60 frames a second might not happen

2864
02:52:20,809 --> 02:52:23,750
right 30 frames a second might be the

2865
02:52:22,908 --> 02:52:26,988
best we can do

2866
02:52:23,750 --> 02:52:30,020
non non non GPU like meaning not moving

2867
02:52:26,988 --> 02:52:31,670
into the GPU if we move it to a GPU then

2868
02:52:30,020 --> 02:52:36,408
you know you have an RT X card it'll eat

2869
02:52:31,670 --> 02:52:38,059
this thing for breakfast you know I mean

2870
02:52:36,408 --> 02:52:43,010
a thing can do the ray tracing for us

2871
02:52:38,059 --> 02:52:53,028
right so so it's mostly just if we leave

2872
02:52:43,010 --> 02:52:56,290
it on the CPU side how far from release

2873
02:52:53,029 --> 02:52:56,290
well who knows right

2874
02:52:59,770 --> 02:53:04,000
depends how much game you put into it I

2875
02:53:04,420 --> 02:53:10,279
mean people are still making updates to

2876
02:53:06,799 --> 02:53:11,539
like Stone Soup right and stuff like

2877
02:53:10,279 --> 02:53:13,100
that I mean there's games that have been

2878
02:53:11,540 --> 02:53:18,260
in development for 30 years just keep

2879
02:53:13,100 --> 02:53:21,380
adding to them so who knows as long as

2880
02:53:18,260 --> 02:53:29,719
it it is as long as we keep one and add

2881
02:53:21,379 --> 02:53:33,250
stuff to it as long as I'm not bored if

2882
02:53:29,719 --> 02:53:33,250
I'm like I am tired adding stuff to this

2883
02:53:33,939 --> 02:53:37,720
then I guess we release it

2884
02:53:51,180 --> 02:53:54,960
all right let me wrap it up

2885
02:54:07,158 --> 02:54:10,260
thank you everyone for dreaming from the

2886
02:54:09,180 --> 02:54:11,879
episode of handmade hereit's when a

2887
02:54:10,260 --> 02:54:12,840
pleasure coating with you as always if

2888
02:54:11,879 --> 02:54:13,829
you would like to follow on the series

2889
02:54:12,840 --> 02:54:16,289
at home you can always peer to the game

2890
02:54:13,828 --> 02:54:17,369
on hand mahir org and it comes to source

2891
02:54:16,289 --> 02:54:21,539
code so you can play around with it

2892
02:54:17,369 --> 02:54:23,369
yourself I'll be back here tomorrow at

2893
02:54:21,539 --> 02:54:25,409
which point we will just kind of clean

2894
02:54:23,369 --> 02:54:27,409
up the code and make sure that we iron

2895
02:54:25,408 --> 02:54:29,939
the bugs out of the for wide version

2896
02:54:27,408 --> 02:54:33,628
maybe we'll throw it on a thread at that

2897
02:54:29,939 --> 02:54:35,850
point just so it's out of our hair and

2898
02:54:33,629 --> 02:54:38,850
then we can go ahead and move on to the

2899
02:54:35,850 --> 02:54:41,668
work of actually finishing the

2900
02:54:38,850 --> 02:54:45,029
raycasting stuff and then that'll be

2901
02:54:41,668 --> 02:54:47,760
that I think we can actually do this on

2902
02:54:45,029 --> 02:54:50,578
the same threading so basically we just

2903
02:54:47,760 --> 02:54:54,119
the lighting code we'll take one set

2904
02:54:50,578 --> 02:54:56,818
like one row of the voxel do the

2905
02:54:54,119 --> 02:55:02,039
lighting on the row update and then also

2906
02:54:56,818 --> 02:55:05,068
do the bake down of the you know the

2907
02:55:02,039 --> 02:55:06,510
diffuse bake so the threading model is

2908
02:55:05,068 --> 02:55:08,278
actually trivial for us which is great

2909
02:55:06,510 --> 02:55:10,949
so threading it would be free

2910
02:55:08,279 --> 02:55:12,270
effectually and that's probably what

2911
02:55:10,949 --> 02:55:17,640
we'll do tomorrow is move those through

2912
02:55:12,270 --> 02:55:20,789
things together and then I think yeah

2913
02:55:17,639 --> 02:55:22,349
we're just in a situation of looking at

2914
02:55:20,789 --> 02:55:24,689
the transport trying to get that quality

2915
02:55:22,350 --> 02:55:27,359
to a good place playing around a little

2916
02:55:24,689 --> 02:55:29,220
bit with some level building to put so

2917
02:55:27,359 --> 02:55:32,010
we can put some lights in places and see

2918
02:55:29,219 --> 02:55:33,568
if we're getting reasonable results but

2919
02:55:32,010 --> 02:55:34,109
I think that's mostly you know where

2920
02:55:33,568 --> 02:55:37,260
we're at

2921
02:55:34,109 --> 02:55:40,408
so hope to you back here tomorrow when

2922
02:55:37,260 --> 02:55:42,209
we'll put that stuff in place and then

2923
02:55:40,408 --> 02:55:44,068
hopefully next weekend we can start

2924
02:55:42,209 --> 02:55:46,668
working on the transport stuff like

2925
02:55:44,068 --> 02:55:48,658
getting that cleaned up and nice and

2926
02:55:46,668 --> 02:55:51,988
yeah cross our fingers that our

2927
02:55:48,658 --> 02:55:54,568
Lighting's good at the end of it alright

2928
02:55:51,988 --> 02:55:56,578
until then have fun program everyone and

2929
02:55:54,568 --> 02:55:58,908
I will see you on the Internet take it

2930
02:55:56,578 --> 02:55:58,908
easy everybody

