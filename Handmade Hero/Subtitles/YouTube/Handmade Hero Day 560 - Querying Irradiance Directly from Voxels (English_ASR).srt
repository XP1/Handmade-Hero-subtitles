1
00:00:00,680 --> 00:00:06,359
hello everyone and welcome to handmade

2
00:00:03,388 --> 00:00:09,240
Hero show that we code a complete game

3
00:00:06,359 --> 00:00:12,019
live on stream and part of that complete

4
00:00:09,240 --> 00:00:13,679
means that lighting is in the mix

5
00:00:12,019 --> 00:00:16,649
unfortunately one of the hardest things

6
00:00:13,679 --> 00:00:18,990
to do in 3d graphics or just in graphics

7
00:00:16,649 --> 00:00:20,969
in general he is lighting but we are

8
00:00:18,989 --> 00:00:22,858
working on it right now and we're hoping

9
00:00:20,969 --> 00:00:25,189
to have that wrapped up in the next few

10
00:00:22,859 --> 00:00:27,390
weeks although it is gonna take a while

11
00:00:25,189 --> 00:00:30,149
I'd say a few weeks I probably mean the

12
00:00:27,390 --> 00:00:31,920
next six or seven weeks right but we're

13
00:00:30,149 --> 00:00:33,960
doing the best we can here it's a

14
00:00:31,920 --> 00:00:36,750
difficult problem not the kind of one

15
00:00:33,960 --> 00:00:39,870
you want to solve on a stream that's to

16
00:00:36,750 --> 00:00:43,439
our chunks but we have to do everything

17
00:00:39,869 --> 00:00:44,759
here so we're doing it before I get

18
00:00:43,439 --> 00:00:46,409
started today just want to mention two

19
00:00:44,759 --> 00:00:48,149
things one we do have a discord now

20
00:00:46,409 --> 00:00:50,009
there's a button down on the page here

21
00:00:48,149 --> 00:00:52,320
or if you're using this watch page on

22
00:00:50,009 --> 00:00:54,649
the schedule there's a button here you

23
00:00:52,320 --> 00:00:57,659
can jump to the discord the discord will

24
00:00:54,649 --> 00:01:00,660
hook you up with other folks in the

25
00:00:57,659 --> 00:01:02,669
handmade hero viewing audience as well

26
00:01:00,659 --> 00:01:04,079
as myself I spend a lot of time on there

27
00:01:02,670 --> 00:01:04,379
now I put the little discord app on my

28
00:01:04,079 --> 00:01:06,118
phone

29
00:01:04,379 --> 00:01:07,560
and every time I'm sitting around with

30
00:01:06,118 --> 00:01:09,510
nothing to do

31
00:01:07,560 --> 00:01:12,990
waiting for something I'll just pop it

32
00:01:09,510 --> 00:01:15,118
open so I moderate it and I participate

33
00:01:12,989 --> 00:01:17,728
the discussions there so come say hi

34
00:01:15,118 --> 00:01:19,560
it's been pretty great so far and while

35
00:01:17,728 --> 00:01:21,298
we're on that subject although this

36
00:01:19,560 --> 00:01:26,549
won't make much sense to people watching

37
00:01:21,299 --> 00:01:29,759
these act in fact like if we can wave

38
00:01:26,549 --> 00:01:32,729
some kind of a good luck charm for our

39
00:01:29,759 --> 00:01:35,459
friends over in Japan we got a lot of

40
00:01:32,728 --> 00:01:37,618
people who participate at the discord

41
00:01:35,459 --> 00:01:39,929
and also you know watch serious it Japan

42
00:01:37,618 --> 00:01:43,259
right now they are in the middle of a

43
00:01:39,930 --> 00:01:45,990
pretty nasty typhoon I believe it's

44
00:01:43,259 --> 00:01:48,450
called a hurricane in the US on the East

45
00:01:45,989 --> 00:01:50,989
Coast called the typhoon in Japan but

46
00:01:48,450 --> 00:01:54,180
basically the same thing very very heavy

47
00:01:50,989 --> 00:01:58,109
wind storm with a lot of rain and

48
00:01:54,180 --> 00:01:59,820
flooding and I'm told that like interior

49
00:01:58,109 --> 00:02:01,140
Tokyo is is faring pretty well because

50
00:01:59,819 --> 00:02:03,599
they have a flood control system there

51
00:02:01,140 --> 00:02:05,009
which is pretty awesome actually but the

52
00:02:03,599 --> 00:02:06,949
more outlying areas are getting hit

53
00:02:05,009 --> 00:02:09,300
pretty hard so hopefully everyone's okay

54
00:02:06,950 --> 00:02:12,030
and I guess we'll be checking the

55
00:02:09,300 --> 00:02:12,819
discord later today and tomorrow to see

56
00:02:12,030 --> 00:02:14,919
how everyone fare

57
00:02:12,818 --> 00:02:18,578
hopefully everyone's okay so if you get

58
00:02:14,919 --> 00:02:19,899
a second you know point pointy a good

59
00:02:18,579 --> 00:02:21,790
luck want their way and hope that

60
00:02:19,900 --> 00:02:23,980
everyone comes out of that okay I know

61
00:02:21,789 --> 00:02:26,798
we got at least I think two people over

62
00:02:23,979 --> 00:02:29,169
there who I've are active participants

63
00:02:26,799 --> 00:02:30,459
often times but I'm sure we also

64
00:02:29,169 --> 00:02:34,000
probably have a bunch we don't hear from

65
00:02:30,459 --> 00:02:37,030
very often who are over there so so best

66
00:02:34,000 --> 00:02:40,718
of luck everyone and hopefully it all

67
00:02:37,030 --> 00:02:43,030
works out okay now the other order of

68
00:02:40,718 --> 00:02:47,128
business is after this stream we will be

69
00:02:43,030 --> 00:02:49,750
rolling into another John and KC gaming

70
00:02:47,128 --> 00:02:51,340
extravaganza John and I were gonna play

71
00:02:49,750 --> 00:02:52,628
somewhere multiple ear games today like

72
00:02:51,340 --> 00:02:56,079
some of you caught us playing

73
00:02:52,628 --> 00:02:59,128
satisfactory a couple weeks ago John

74
00:02:56,079 --> 00:03:01,540
wanted to play through two games or well

75
00:02:59,128 --> 00:03:05,108
John picked out two games that maybe

76
00:03:01,539 --> 00:03:06,668
we'd try unreeled was one of them we

77
00:03:05,109 --> 00:03:10,540
were here together I think is the name

78
00:03:06,669 --> 00:03:13,000
of the other one uh and they may not be

79
00:03:10,539 --> 00:03:14,108
good so we don't know maybe we won't

80
00:03:13,000 --> 00:03:15,789
really be playing them but we're at

81
00:03:14,109 --> 00:03:19,150
least gonna give it a shot

82
00:03:15,789 --> 00:03:21,219
so after this stream stay tuned John and

83
00:03:19,150 --> 00:03:22,780
I will be squatting up I believe we will

84
00:03:21,219 --> 00:03:24,310
be streaming it he usually likes to

85
00:03:22,780 --> 00:03:27,370
stream gaming sessions so I'm assuming

86
00:03:24,310 --> 00:03:29,620
unless he says today is the one day he

87
00:03:27,370 --> 00:03:31,030
doesn't want to stream it we will

88
00:03:29,620 --> 00:03:33,459
presumably be streaming that so stay

89
00:03:31,030 --> 00:03:36,400
tuned for that as well on my channel or

90
00:03:33,459 --> 00:03:38,949
on twitch.tv slash naysayer 88 is the

91
00:03:36,400 --> 00:03:40,750
other channel and I think the squad

92
00:03:38,949 --> 00:03:42,370
thing lets you swap between them really

93
00:03:40,750 --> 00:03:44,229
easily so chances are you can just stay

94
00:03:42,370 --> 00:03:46,090
tuned on this channel and you can then

95
00:03:44,229 --> 00:03:47,220
switch over to his channel at any time I

96
00:03:46,090 --> 00:03:49,299
think that's what's supposed to happen

97
00:03:47,219 --> 00:03:53,289
with the new twitch feature I've never

98
00:03:49,299 --> 00:03:59,290
actually seen it myself but we do turn

99
00:03:53,289 --> 00:04:03,128
it on alright moving on what we were

100
00:03:59,289 --> 00:04:05,048
doing last week and we need to basically

101
00:04:03,128 --> 00:04:08,378
finish up or at least come up with our

102
00:04:05,049 --> 00:04:11,769
first draft this week is we were looking

103
00:04:08,378 --> 00:04:14,138
at the way in which it was that's not

104
00:04:11,769 --> 00:04:17,530
what I wanted we were looking at the way

105
00:04:14,139 --> 00:04:20,139
in which we might go about getting

106
00:04:17,529 --> 00:04:22,859
lighting into our pixel shader or as

107
00:04:20,139 --> 00:04:24,900
it's called in OpenGL a fragment shader

108
00:04:22,860 --> 00:04:29,580
and this

109
00:04:24,899 --> 00:04:32,839
is kind of a it's a difficult question

110
00:04:29,579 --> 00:04:35,279
and the reason it's a difficult question

111
00:04:32,839 --> 00:04:35,939
it's because it's very much experimental

112
00:04:35,279 --> 00:04:39,059
for me

113
00:04:35,939 --> 00:04:46,290
I don't do GPU programming really as my

114
00:04:39,060 --> 00:04:48,449
focus and unlike some things some

115
00:04:46,290 --> 00:04:50,520
aspects of coding the difference between

116
00:04:48,449 --> 00:04:54,590
a generalist and a specialist is not

117
00:04:50,519 --> 00:04:56,549
particularly large so you know a a

118
00:04:54,589 --> 00:04:59,310
generalist is gonna do basically the

119
00:04:56,550 --> 00:05:01,439
same thing as a specialist modulo a

120
00:04:59,310 --> 00:05:03,418
little bit of you know improvement maybe

121
00:05:01,439 --> 00:05:05,969
the specialist makes or something some

122
00:05:03,418 --> 00:05:06,870
some areas are like that GPU programming

123
00:05:05,970 --> 00:05:08,520
isn't like that

124
00:05:06,870 --> 00:05:10,228
so in GPU programming the difference

125
00:05:08,519 --> 00:05:12,870
between what a specialist can do and

126
00:05:10,228 --> 00:05:15,060
what a generalist can do is actually

127
00:05:12,870 --> 00:05:16,949
quite large so the difference in quality

128
00:05:15,060 --> 00:05:20,639
in a lighting solution I'm going to do

129
00:05:16,949 --> 00:05:22,379
is going to be pretty dramatic probably

130
00:05:20,639 --> 00:05:24,240
between the difference in quality that

131
00:05:22,379 --> 00:05:26,279
especially to do so somebody for example

132
00:05:24,240 --> 00:05:28,800
who's a graphics researcher at Nvidia is

133
00:05:26,279 --> 00:05:30,959
probably going to be able to design a

134
00:05:28,800 --> 00:05:33,329
much better lighting algorithm for

135
00:05:30,959 --> 00:05:35,250
handmade Hiro were they to do that then

136
00:05:33,329 --> 00:05:38,819
I'm going to be able to do and again

137
00:05:35,250 --> 00:05:42,569
that's because GPU technology moves

138
00:05:38,819 --> 00:05:44,728
quickly if something gets revised year

139
00:05:42,569 --> 00:05:46,500
over year over year over year and so a

140
00:05:44,728 --> 00:05:48,060
generalist such as myself who does all

141
00:05:46,500 --> 00:05:53,038
of the things in a game engine

142
00:05:48,060 --> 00:05:55,949
oftentimes has not had enough experience

143
00:05:53,038 --> 00:05:59,899
with whatever the current target

144
00:05:55,949 --> 00:06:02,970
platform is to really have a strong

145
00:05:59,899 --> 00:06:06,569
point of view on what works well and

146
00:06:02,970 --> 00:06:08,460
what doesn't right so although I do keep

147
00:06:06,569 --> 00:06:11,129
fairly up to date on what's you know

148
00:06:08,459 --> 00:06:12,810
possible meaning I understand the kinds

149
00:06:11,129 --> 00:06:14,250
of things GPUs can do and how they're

150
00:06:12,810 --> 00:06:17,759
doing them because that's important and

151
00:06:14,250 --> 00:06:19,168
not that hard to keep up with for

152
00:06:17,759 --> 00:06:21,180
something like designing a really

153
00:06:19,168 --> 00:06:23,639
difficult algorithm like lighting what

154
00:06:21,180 --> 00:06:28,168
you're talking about is really a very

155
00:06:23,639 --> 00:06:30,660
precise very finicky area of the code

156
00:06:28,168 --> 00:06:32,728
that really only someone who knows

157
00:06:30,660 --> 00:06:33,120
exactly what is possible and how it

158
00:06:32,728 --> 00:06:36,689
works

159
00:06:33,120 --> 00:06:37,889
on a broad range of hardware platforms

160
00:06:36,689 --> 00:06:41,339
that are relevant to

161
00:06:37,889 --> 00:06:45,990
day right that's really the only person

162
00:06:41,339 --> 00:06:48,060
who can do an exemplary job and so for

163
00:06:45,990 --> 00:06:50,939
us this is going to be a bit of a

164
00:06:48,060 --> 00:06:52,620
struggle because we're flying somewhat

165
00:06:50,939 --> 00:06:55,439
blind they're the generalist is flying

166
00:06:52,620 --> 00:06:57,090
somewhat blind they just know here's a

167
00:06:55,439 --> 00:06:58,499
bunch of features that the gravis heart

168
00:06:57,089 --> 00:07:00,810
has that I could access

169
00:06:58,499 --> 00:07:02,639
I don't know how performing each one of

170
00:07:00,810 --> 00:07:04,288
them really will be I can make some

171
00:07:02,639 --> 00:07:05,728
guesses I might be wrong

172
00:07:04,288 --> 00:07:07,498
there could be pitfalls hiding there

173
00:07:05,728 --> 00:07:09,478
that I don't know about and again that's

174
00:07:07,499 --> 00:07:12,509
because if you're just not up-to-date

175
00:07:09,478 --> 00:07:14,968
enough on it so what I would probably do

176
00:07:12,509 --> 00:07:19,408
normally in most circumstances if I was

177
00:07:14,968 --> 00:07:21,778
doing this myself we would go read a

178
00:07:19,408 --> 00:07:24,089
bunch of research papers on this topic

179
00:07:21,778 --> 00:07:26,728
and we'd probably pick based on a lot

180
00:07:24,089 --> 00:07:28,560
more input right we don't do that on

181
00:07:26,728 --> 00:07:30,449
handmade here oh and the reason we don't

182
00:07:28,560 --> 00:07:32,278
do that on handmade hero is because I

183
00:07:30,449 --> 00:07:34,139
want to show the process of muddling

184
00:07:32,278 --> 00:07:36,478
through things sometimes it's important

185
00:07:34,139 --> 00:07:37,829
because there won't always be someone

186
00:07:36,478 --> 00:07:40,318
who's tackled the problem that you're

187
00:07:37,829 --> 00:07:41,878
thinking about or not tackling it in the

188
00:07:40,319 --> 00:07:43,348
way that you need to tackle it and so

189
00:07:41,879 --> 00:07:45,300
you do need to learn to do these things

190
00:07:43,348 --> 00:07:49,050
so it's important to approach problems

191
00:07:45,300 --> 00:07:51,150
even like this one and see how would I

192
00:07:49,050 --> 00:07:54,110
solve it if I just had to write it's

193
00:07:51,149 --> 00:07:56,609
good practice and you should do it too

194
00:07:54,110 --> 00:07:58,740
but it's worth knowing it's worth

195
00:07:56,610 --> 00:08:01,500
understanding that in a professional

196
00:07:58,740 --> 00:08:03,449
setting you would also in addition to

197
00:08:01,500 --> 00:08:05,490
practice you would also want to

198
00:08:03,449 --> 00:08:08,310
understand the fact that reading a bunch

199
00:08:05,490 --> 00:08:10,319
of papers about this and or consulting

200
00:08:08,310 --> 00:08:13,228
with some experts in GPU programming

201
00:08:10,319 --> 00:08:15,718
would be valuable and probably will help

202
00:08:13,228 --> 00:08:18,598
you develop an algorithm better than the

203
00:08:15,718 --> 00:08:20,728
one you can develop yourself because if

204
00:08:18,598 --> 00:08:22,949
you're not a GPU specialist you just

205
00:08:20,728 --> 00:08:25,408
don't have the experience with the

206
00:08:22,949 --> 00:08:27,330
actual practical implications of the

207
00:08:25,408 --> 00:08:28,528
things that you're using so it's worth

208
00:08:27,329 --> 00:08:29,908
getting that out of the way just so

209
00:08:28,528 --> 00:08:31,588
everyone has protective on it but that

210
00:08:29,908 --> 00:08:32,879
said we are gonna do it ourselves and

211
00:08:31,588 --> 00:08:34,679
the reason is that like I said is

212
00:08:32,879 --> 00:08:37,168
because it's important to learn how to

213
00:08:34,679 --> 00:08:39,389
do that because sometimes you do have to

214
00:08:37,168 --> 00:08:41,429
go somewhere that other people haven't

215
00:08:39,389 --> 00:08:43,649
gone and that's just part of programming

216
00:08:41,429 --> 00:08:46,229
part of being a strong engine programmer

217
00:08:43,649 --> 00:08:48,240
is not being afraid of tackling a

218
00:08:46,230 --> 00:08:50,490
problem that doesn't have an easily

219
00:08:48,240 --> 00:08:51,159
published solution that fits your needs

220
00:08:50,490 --> 00:09:02,409
right

221
00:08:51,159 --> 00:09:09,009
so where we left off was in the fragment

222
00:09:02,409 --> 00:09:12,219
shader like I said excuse me a little

223
00:09:09,009 --> 00:09:14,289
bit stuffy today where we left off was

224
00:09:12,220 --> 00:09:15,850
in the fragment shader and what's going

225
00:09:14,289 --> 00:09:21,490
on in the fragment shader is we need to

226
00:09:15,850 --> 00:09:23,440
reconstitute inbound lighting using some

227
00:09:21,490 --> 00:09:24,820
kind of a spatial query we don't know

228
00:09:23,440 --> 00:09:26,800
what it is or what it will be

229
00:09:24,820 --> 00:09:28,810
we need to reconstitute our inbound

230
00:09:26,799 --> 00:09:30,849
lighting so that we can light a pixel

231
00:09:28,809 --> 00:09:32,979
that has never had any lighting computed

232
00:09:30,850 --> 00:09:34,540
on it this is the idea behind light

233
00:09:32,980 --> 00:09:36,039
probes they're saying look it's too

234
00:09:34,539 --> 00:09:38,799
expensive to compute the lighting every

235
00:09:36,039 --> 00:09:40,480
pixel we could never do that with the

236
00:09:38,799 --> 00:09:43,449
horsepower we have available at the time

237
00:09:40,480 --> 00:09:46,570
but what we can do is compute the

238
00:09:43,450 --> 00:09:48,580
lighting at various sparse sparsely

239
00:09:46,570 --> 00:09:51,580
populated points throughout the world

240
00:09:48,580 --> 00:09:54,190
and when we go to light a pixel we'll

241
00:09:51,580 --> 00:09:57,730
look at where those sparse points are

242
00:09:54,190 --> 00:09:59,740
and we'll reconstitute our lighting by

243
00:09:57,730 --> 00:10:01,629
interpolating between the lighting we

244
00:09:59,740 --> 00:10:04,419
solve for at those sparse points that's

245
00:10:01,629 --> 00:10:05,980
all a light probe really is right the

246
00:10:04,419 --> 00:10:07,990
rest of the complexity of a light probe

247
00:10:05,980 --> 00:10:10,600
is in the details and how you implement

248
00:10:07,990 --> 00:10:11,769
it there's really nothing else about it

249
00:10:10,600 --> 00:10:13,710
there's nothing else complicated about

250
00:10:11,769 --> 00:10:16,210
it right the concept is very very simple

251
00:10:13,710 --> 00:10:17,620
ludie is expensive computed as few

252
00:10:16,210 --> 00:10:19,389
places as possible and try to

253
00:10:17,620 --> 00:10:25,049
reconstitute the lighting per pixel by

254
00:10:19,389 --> 00:10:25,049
looking at those sample points right so

255
00:10:26,860 --> 00:10:35,690
for us that means each pixel we need

256
00:10:32,600 --> 00:10:39,950
some way of finding out which of these

257
00:10:35,690 --> 00:10:42,709
light which of these light probes we

258
00:10:39,950 --> 00:10:44,420
want to sample from and the problem that

259
00:10:42,708 --> 00:10:46,759
we have is it would be very very

260
00:10:44,419 --> 00:10:50,088
straightforward and probably preferable

261
00:10:46,759 --> 00:10:53,000
right if we could just pick the closest

262
00:10:50,089 --> 00:10:56,660
light probe and light the pixels as if

263
00:10:53,000 --> 00:10:57,740
they were lit by that probe but by the

264
00:10:56,659 --> 00:11:00,289
lighting if that's at that probe

265
00:10:57,740 --> 00:11:02,419
location right that would be the best

266
00:11:00,289 --> 00:11:03,769
possible case for us and the reason that

267
00:11:02,419 --> 00:11:05,449
that would be the best possible case is

268
00:11:03,769 --> 00:11:07,190
because that would be like one voxel

269
00:11:05,450 --> 00:11:09,200
lookup that would give us back an index

270
00:11:07,190 --> 00:11:11,350
and then we would just look up the

271
00:11:09,200 --> 00:11:13,610
lighting probe inbound light

272
00:11:11,350 --> 00:11:17,629
representation using that index and we

273
00:11:13,610 --> 00:11:19,278
be done right so that's by far the

274
00:11:17,629 --> 00:11:21,620
preferable method and we can implement

275
00:11:19,278 --> 00:11:24,439
that fairly simply it would be one texel

276
00:11:21,620 --> 00:11:26,659
fetch that fetch into the voxel and then

277
00:11:24,440 --> 00:11:28,399
some number of additional textile

278
00:11:26,659 --> 00:11:30,708
fetches depending on how much lighting

279
00:11:28,399 --> 00:11:32,360
data we wanted to extract if we wanted

280
00:11:30,708 --> 00:11:34,789
to extract six separate pieces of

281
00:11:32,360 --> 00:11:36,470
lighting information one for each

282
00:11:34,789 --> 00:11:39,948
direction out of the phases of our light

283
00:11:36,470 --> 00:11:43,190
probe cube for example that would be six

284
00:11:39,948 --> 00:11:46,250
more fetches or if we bundled multiple

285
00:11:43,190 --> 00:11:48,560
directions into one somehow maybe it's

286
00:11:46,250 --> 00:11:52,490
less but you know it would basically be

287
00:11:48,559 --> 00:11:54,500
a total of one texture Texel fetch to

288
00:11:52,490 --> 00:11:56,139
look at the light probe index and six

289
00:11:54,500 --> 00:11:59,028
Texel fetches to look up the lighting

290
00:11:56,139 --> 00:12:00,889
contribution and that's a total of seven

291
00:11:59,028 --> 00:12:03,049
textual fetches and we're done not

292
00:12:00,889 --> 00:12:04,879
particularly complicated and then we

293
00:12:03,049 --> 00:12:07,219
would just go about applying whatever

294
00:12:04,879 --> 00:12:11,778
equations we wanted to to estimate the

295
00:12:07,220 --> 00:12:14,709
inbound light based on that probe so we

296
00:12:11,778 --> 00:12:17,769
then get to sort of an obvious

297
00:12:14,708 --> 00:12:20,958
simplification which is that if we are

298
00:12:17,769 --> 00:12:24,490
assessing what the lighting information

299
00:12:20,958 --> 00:12:28,489
would be at a particular direction well

300
00:12:24,490 --> 00:12:33,110
three of the faces of the cube in a

301
00:12:28,490 --> 00:12:35,539
lighting in a so if you look at how much

302
00:12:33,110 --> 00:12:37,669
inbound light there is in a cube that

303
00:12:35,539 --> 00:12:39,110
we're tracking there are six faces of

304
00:12:37,669 --> 00:12:40,819
the cube

305
00:12:39,110 --> 00:12:42,950
the inbound light coming through each of

306
00:12:40,820 --> 00:12:45,560
those six phases has certain limitations

307
00:12:42,950 --> 00:12:48,830
as to how it could light a particular

308
00:12:45,559 --> 00:12:50,689
object if you assume no translucency and

309
00:12:48,830 --> 00:12:52,850
no subsurface scattering sorts of

310
00:12:50,690 --> 00:12:54,770
operations which we are not considering

311
00:12:52,850 --> 00:12:56,090
because we don't really have any way to

312
00:12:54,769 --> 00:12:59,269
take advantage of that with our sprites

313
00:12:56,090 --> 00:13:00,470
we don't need it right maybe there's

314
00:12:59,269 --> 00:13:02,569
some times that we would but they'd be a

315
00:13:00,470 --> 00:13:04,790
special shader presumably so we're just

316
00:13:02,570 --> 00:13:07,640
talking about reflective light then a

317
00:13:04,789 --> 00:13:09,349
particular pixel that we're trying to

318
00:13:07,639 --> 00:13:11,059
light has a normal pointing in a

319
00:13:09,350 --> 00:13:13,090
particular direction which means that

320
00:13:11,059 --> 00:13:16,609
all of the incident light has to be

321
00:13:13,090 --> 00:13:18,110
pointing into basically or the direction

322
00:13:16,610 --> 00:13:21,139
of sampling has to be pointing in the

323
00:13:18,110 --> 00:13:23,870
same direction let's say as that normal

324
00:13:21,139 --> 00:13:25,250
that means that at any given time three

325
00:13:23,870 --> 00:13:26,720
of the faces of our cube will be

326
00:13:25,250 --> 00:13:29,840
contributing to lighting and three of

327
00:13:26,720 --> 00:13:32,269
the faces won't be so in addition to

328
00:13:29,840 --> 00:13:35,080
that one piece of information we have

329
00:13:32,269 --> 00:13:37,759
about look we would look up a particular

330
00:13:35,080 --> 00:13:39,980
light probe and then we would fetch its

331
00:13:37,759 --> 00:13:43,159
information we can probably cut that

332
00:13:39,980 --> 00:13:45,379
down to three Texel fetches only those

333
00:13:43,159 --> 00:13:46,699
necessary to fetch the three faces of

334
00:13:45,379 --> 00:13:49,370
the cube that will actually contribute

335
00:13:46,700 --> 00:13:51,230
because we know the other three faces if

336
00:13:49,370 --> 00:13:52,940
unless we're in some really weird like

337
00:13:51,230 --> 00:13:54,590
okay we're trying to light smoke or

338
00:13:52,940 --> 00:13:56,120
something right where you're trying to

339
00:13:54,590 --> 00:13:59,840
get back facing light coming through as

340
00:13:56,120 --> 00:14:02,029
well except in special purpose shaders

341
00:13:59,840 --> 00:14:03,830
we really only need three so that would

342
00:14:02,029 --> 00:14:05,899
get us down to just four Texel fetches

343
00:14:03,830 --> 00:14:08,720
for the lighting and so that would be

344
00:14:05,899 --> 00:14:10,970
really nice that would be great but the

345
00:14:08,720 --> 00:14:13,279
problem there is what do you do at the

346
00:14:10,970 --> 00:14:15,410
edges at some point when you move

347
00:14:13,279 --> 00:14:17,299
something around the environment or you

348
00:14:15,409 --> 00:14:21,049
just imagine just a flat plane and we're

349
00:14:17,299 --> 00:14:23,750
lighting each pixel at some point you

350
00:14:21,049 --> 00:14:26,689
cross over to where the closest light

351
00:14:23,750 --> 00:14:29,269
probe is actually different and so when

352
00:14:26,690 --> 00:14:30,860
we look up into the voxel which light

353
00:14:29,269 --> 00:14:33,500
probe we should light with there's going

354
00:14:30,860 --> 00:14:35,330
to be a pixel who says it's this light

355
00:14:33,500 --> 00:14:37,549
from over here a light probe a and then

356
00:14:35,330 --> 00:14:39,470
a pixel right next to it we'll say oh

357
00:14:37,549 --> 00:14:42,709
the closest light probe is light probe B

358
00:14:39,470 --> 00:14:47,420
right and if we haven't done any

359
00:14:42,710 --> 00:14:49,879
blending then those two pixels will get

360
00:14:47,419 --> 00:14:52,250
lit completely differently right and

361
00:14:49,879 --> 00:14:52,970
this creates a huge problem for us we'll

362
00:14:52,250 --> 00:14:54,889
have all of the

363
00:14:52,970 --> 00:14:58,339
hard edges in our lighting and it will

364
00:14:54,889 --> 00:15:00,409
look really bad or maybe if you're you

365
00:14:58,339 --> 00:15:03,350
know into weird artwork you could just

366
00:15:00,409 --> 00:15:06,769
lean into that aesthetic and say well

367
00:15:03,350 --> 00:15:10,639
okay I'm just gonna do it that way and

368
00:15:06,769 --> 00:15:12,438
that's where the game looks right that's

369
00:15:10,639 --> 00:15:14,060
a totally fine decision to make not one

370
00:15:12,438 --> 00:15:16,490
we're gonna make we want to figure out a

371
00:15:14,059 --> 00:15:18,438
way to do the blending and the problem

372
00:15:16,490 --> 00:15:21,230
we have of the blending is that it's a

373
00:15:18,438 --> 00:15:23,629
3-dimensional world so any pixel could

374
00:15:21,230 --> 00:15:24,980
be related to any other pixel by being a

375
00:15:23,629 --> 00:15:27,860
little bit above a little bit below the

376
00:15:24,980 --> 00:15:30,199
bit left right back forward and so

377
00:15:27,860 --> 00:15:33,370
really what we have is effectively a

378
00:15:30,198 --> 00:15:37,068
cube based blend there are eight

379
00:15:33,370 --> 00:15:39,828
lighting probes near to this pixel one

380
00:15:37,068 --> 00:15:41,628
that's to the you know ones that's the

381
00:15:39,828 --> 00:15:43,219
closest in this direction one's lost

382
00:15:41,629 --> 00:15:45,980
that direction this direction right and

383
00:15:43,220 --> 00:15:47,870
so as you move continuously through the

384
00:15:45,980 --> 00:15:49,959
space if we want the lighting to be

385
00:15:47,870 --> 00:15:52,220
continuous we need what is effectively a

386
00:15:49,958 --> 00:15:54,919
trilinear blend we need to blend eight

387
00:15:52,220 --> 00:15:57,139
incoming sample points together so that

388
00:15:54,919 --> 00:15:59,599
we're smooth no matter how we move

389
00:15:57,139 --> 00:16:03,110
through the space and the lighting never

390
00:15:59,600 --> 00:16:06,949
has a hard scene that's what creates a

391
00:16:03,110 --> 00:16:08,860
nasty problem for us so you can see here

392
00:16:06,948 --> 00:16:12,019
where we have our lighting information

393
00:16:08,860 --> 00:16:14,930
this for example is what it looks like

394
00:16:12,019 --> 00:16:17,720
to do Texel fetches on eight different

395
00:16:14,929 --> 00:16:21,169
things right you can see me textile

396
00:16:17,720 --> 00:16:23,269
fetching each of these lights and I

397
00:16:21,169 --> 00:16:24,649
would need to know the index for the

398
00:16:23,269 --> 00:16:28,129
light in each of these three different

399
00:16:24,649 --> 00:16:30,620
places I would then lerp them together

400
00:16:28,129 --> 00:16:32,300
right and you can see me doing some of

401
00:16:30,620 --> 00:16:36,049
that like getting the lighting data here

402
00:16:32,299 --> 00:16:38,539
right and this is if we're only doing

403
00:16:36,049 --> 00:16:42,528
one side so you can see it's like

404
00:16:38,539 --> 00:16:45,139
sixteen Texel fetches really nasty only

405
00:16:42,528 --> 00:16:48,289
to do one face of the cube this will

406
00:16:45,139 --> 00:16:50,839
multiply itself out right I would end up

407
00:16:48,289 --> 00:16:53,448
with three copies of this we're just

408
00:16:50,839 --> 00:16:57,410
drowning in textile fetches right it's

409
00:16:53,448 --> 00:16:59,990
not great and so one thing that was

410
00:16:57,409 --> 00:17:02,000
proposed at the end of the last stream I

411
00:16:59,990 --> 00:17:03,558
and that I think is an interesting idea

412
00:17:02,000 --> 00:17:05,599
and probably one we should explore

413
00:17:03,558 --> 00:17:07,099
because there are some ways you can make

414
00:17:05,599 --> 00:17:09,589
this work

415
00:17:07,099 --> 00:17:13,189
is what is instead of doing this

416
00:17:09,589 --> 00:17:16,369
manually where we actually track light

417
00:17:13,190 --> 00:17:21,430
indices themselves what if instead of

418
00:17:16,369 --> 00:17:23,389
doing that we actually just had a voxel

419
00:17:21,430 --> 00:17:26,259
representation of the lighting itself

420
00:17:23,390 --> 00:17:30,230
and we just went hog-wild and said look

421
00:17:26,259 --> 00:17:31,519
we've got six phases of this cube we're

422
00:17:30,230 --> 00:17:33,470
saying we're tracking the lighting

423
00:17:31,519 --> 00:17:35,750
through those six phases right that's

424
00:17:33,470 --> 00:17:37,850
what we're gonna do or something else

425
00:17:35,750 --> 00:17:40,880
maybe we switched to switch to spherical

426
00:17:37,849 --> 00:17:42,439
harmonics so we saw them in a slightly

427
00:17:40,880 --> 00:17:43,940
different way you know I don't know

428
00:17:42,440 --> 00:17:46,820
right we're what we're gonna do

429
00:17:43,940 --> 00:17:50,509
something where we have some number of

430
00:17:46,819 --> 00:17:55,189
terms stored for lighting into a voxel

431
00:17:50,509 --> 00:17:57,230
and we're gonna fetch them if we were to

432
00:17:55,190 --> 00:18:00,590
store the actual lighting terms into the

433
00:17:57,230 --> 00:18:03,470
voxel then what we can do is instead of

434
00:18:00,589 --> 00:18:07,429
calling Texel fetch here we can just

435
00:18:03,470 --> 00:18:10,490
instead of eight calls to Texel fetch we

436
00:18:07,430 --> 00:18:14,240
can make one call to texture and that

437
00:18:10,490 --> 00:18:17,660
will do a try linear blend on the voxel

438
00:18:14,240 --> 00:18:19,880
for us right now it's still doing a full

439
00:18:17,660 --> 00:18:21,950
try linear blend on the voxel so we

440
00:18:19,880 --> 00:18:25,040
haven't really saved a lot of math but

441
00:18:21,950 --> 00:18:28,610
what we have done is given the graphics

442
00:18:25,039 --> 00:18:31,519
card the opportunity to heavily optimize

443
00:18:28,609 --> 00:18:34,279
that fetch because it knows we're doing

444
00:18:31,519 --> 00:18:37,490
a try linear blend from a 3d texture

445
00:18:34,279 --> 00:18:40,579
which is an operation native to GPUs

446
00:18:37,490 --> 00:18:42,230
right so it can probably run it a lot

447
00:18:40,579 --> 00:18:44,059
more quickly there's a lot less

448
00:18:42,230 --> 00:18:46,849
bookkeeping it needs to do a lot less

449
00:18:44,059 --> 00:18:48,589
work because it already has specialized

450
00:18:46,849 --> 00:18:51,349
circuitry most of the time designed

451
00:18:48,589 --> 00:18:53,000
specifically to fetch texels in a way

452
00:18:51,349 --> 00:18:55,309
that blends them together so it's not

453
00:18:53,000 --> 00:18:56,779
going to be super confused about what

454
00:18:55,309 --> 00:18:58,339
we're doing and has to do each step

455
00:18:56,779 --> 00:19:00,259
manually it's gonna have a bunch of

456
00:18:58,339 --> 00:19:03,109
those steps fuse together and it's gonna

457
00:19:00,259 --> 00:19:05,960
do stuff like pull out bundles of pixels

458
00:19:03,109 --> 00:19:08,359
blend them together directly and do like

459
00:19:05,960 --> 00:19:10,730
the whole thing in one or two steps that

460
00:19:08,359 --> 00:19:14,299
we were having to do in sixteen steps

461
00:19:10,730 --> 00:19:15,799
right and although that savings may not

462
00:19:14,299 --> 00:19:16,940
sound like a huge amount of savings

463
00:19:15,799 --> 00:19:18,559
because hey there's not that much code

464
00:19:16,940 --> 00:19:20,059
here when you think about the fact that

465
00:19:18,559 --> 00:19:20,690
this is code that has to execute on

466
00:19:20,059 --> 00:19:24,440
every

467
00:19:20,690 --> 00:19:27,970
pixal of our screen for our display

468
00:19:24,440 --> 00:19:30,919
right that's a lot of work right

469
00:19:27,970 --> 00:19:34,190
anything we can do to make this simpler

470
00:19:30,919 --> 00:19:35,960
for the graphics card is huge so it does

471
00:19:34,190 --> 00:19:37,308
seem like that may be a better starting

472
00:19:35,960 --> 00:19:40,190
architecture because if we could do it

473
00:19:37,308 --> 00:19:42,168
that way maybe we can avoid some of this

474
00:19:40,190 --> 00:19:44,298
bookkeeping that could slow the GPU down

475
00:19:42,169 --> 00:19:46,070
make it difficult for it to hit 60

476
00:19:44,298 --> 00:19:50,628
frames a second doing this kind of

477
00:19:46,069 --> 00:19:53,710
advanced per pixel work because again

478
00:19:50,628 --> 00:19:57,469
it's just the less you throw at the GPU

479
00:19:53,710 --> 00:19:59,348
per pixel the better so let's think

480
00:19:57,470 --> 00:20:01,879
about what that would look like right

481
00:19:59,348 --> 00:20:04,970
you can see here us operating on our

482
00:20:01,878 --> 00:20:06,918
voxel we're producing our voxel location

483
00:20:04,970 --> 00:20:09,139
and you can see us doing stuff like

484
00:20:06,919 --> 00:20:11,809
flooring right and we're computing these

485
00:20:09,138 --> 00:20:13,398
pieces of information and what I think

486
00:20:11,808 --> 00:20:15,710
we want to do there say all right so

487
00:20:13,398 --> 00:20:17,719
let's just pretend that we don't want to

488
00:20:15,710 --> 00:20:19,848
do that anymore what would it look like

489
00:20:17,720 --> 00:20:21,950
well one of the nice things is even this

490
00:20:19,848 --> 00:20:24,168
information goes away because now that's

491
00:20:21,950 --> 00:20:26,569
part of the texture lookup itself so if

492
00:20:24,169 --> 00:20:31,849
we were to assume that we had some

493
00:20:26,569 --> 00:20:33,259
number of these 3d textures and they

494
00:20:31,848 --> 00:20:34,939
were representing our actual lighting

495
00:20:33,259 --> 00:20:38,839
then what we would say is you know what

496
00:20:34,940 --> 00:20:41,479
what we really have here is the

497
00:20:38,839 --> 00:20:43,728
different sides of the cube and so we

498
00:20:41,479 --> 00:20:46,369
would have something more like this

499
00:20:43,729 --> 00:20:51,679
right we would have well I guess we want

500
00:20:46,368 --> 00:20:55,009
to just do our box surface and we might

501
00:20:51,679 --> 00:21:05,288
call it our box surface ordinals here so

502
00:20:55,009 --> 00:21:05,288
it'd just be like west east south

503
00:21:09,888 --> 00:21:20,428
north down right so we would feed in six

504
00:21:17,368 --> 00:21:25,728
separate samplers one each for the

505
00:21:20,429 --> 00:21:25,729
directions of our lighting and that

506
00:21:26,479 --> 00:21:31,619
would actually be what we sample so then

507
00:21:29,338 --> 00:21:34,648
here we would pull from those lights

508
00:21:31,618 --> 00:21:37,048
that lighting information and again

509
00:21:34,648 --> 00:21:40,018
probably just going to be a v4 sample

510
00:21:37,048 --> 00:21:43,019
here we're going to be looking up in AU

511
00:21:40,019 --> 00:21:45,328
32 texture that will then kind of come

512
00:21:43,019 --> 00:21:47,489
out to the sampler what we want to do

513
00:21:45,328 --> 00:21:49,528
here is say all right let's get the

514
00:21:47,489 --> 00:21:51,298
light from the West right and that's

515
00:21:49,528 --> 00:21:54,028
gonna be a texture look up and that's

516
00:21:51,298 --> 00:21:56,848
gonna be from our light sampler West and

517
00:21:54,028 --> 00:21:59,068
we're just going to use our Vox you can

518
00:21:56,848 --> 00:22:01,138
see here right we have our relative P

519
00:21:59,068 --> 00:22:03,628
that maps in the voxel we have our Vox

520
00:22:01,138 --> 00:22:05,668
index P that makes it into our UV W what

521
00:22:03,628 --> 00:22:07,378
I'm gonna call that instead is our voxel

522
00:22:05,669 --> 00:22:09,269
UV W now because it's really that's what

523
00:22:07,378 --> 00:22:11,068
it is like a texture look up now that's

524
00:22:09,269 --> 00:22:13,019
what we're treating it as same value it

525
00:22:11,068 --> 00:22:14,638
just make it clear what what we're gonna

526
00:22:13,019 --> 00:22:16,409
do with it we're not going to convert it

527
00:22:14,638 --> 00:22:18,208
to indices into the voxel we're gonna

528
00:22:16,409 --> 00:22:22,379
let the graphics card take it as a uvw

529
00:22:18,209 --> 00:22:24,749
it's gonna do that mapping right so what

530
00:22:22,378 --> 00:22:27,058
we want to do now is say well really the

531
00:22:24,749 --> 00:22:29,219
value that we want here is not where it

532
00:22:27,058 --> 00:22:31,528
is in the cell what we want is where it

533
00:22:29,219 --> 00:22:35,068
is in the texture so instead we're just

534
00:22:31,528 --> 00:22:36,959
gonna do in verse voxel total dimension

535
00:22:35,068 --> 00:22:38,878
so we're really is taking how big is

536
00:22:36,959 --> 00:22:40,619
this voxel at all and we're gonna we're

537
00:22:38,878 --> 00:22:43,078
gonna make that be the value that we

538
00:22:40,618 --> 00:22:45,088
actually want so we don't want to map it

539
00:22:43,078 --> 00:22:47,278
into cell so that we have which cell and

540
00:22:45,088 --> 00:22:49,198
how far in cell instead we want to just

541
00:22:47,278 --> 00:22:50,818
say and you know I guess we didn't

542
00:22:49,199 --> 00:22:52,079
actually put these out here it doesn't

543
00:22:50,818 --> 00:22:54,388
look it looks like we didn't really put

544
00:22:52,078 --> 00:22:56,638
these out so these again have to be up

545
00:22:54,388 --> 00:22:59,548
here as things that come in as

546
00:22:56,638 --> 00:23:02,668
parameters that we specify because the

547
00:22:59,548 --> 00:23:04,259
shader itself has no idea how where this

548
00:23:02,669 --> 00:23:07,349
voxel is supposed to be right it doesn't

549
00:23:04,259 --> 00:23:10,499
know any of that information so we need

550
00:23:07,348 --> 00:23:12,538
to tell it we need to have the voxel

551
00:23:10,499 --> 00:23:14,519
mid-corner that's actually three right

552
00:23:12,538 --> 00:23:18,470
because it's where it is in space and

553
00:23:14,519 --> 00:23:21,230
then we have the total inverse total dim

554
00:23:18,470 --> 00:23:23,720
or maybe I should call it voxel inverse

555
00:23:21,230 --> 00:23:26,628
total dim right and that again that's

556
00:23:23,720 --> 00:23:30,048
just a scaling value that says well we

557
00:23:26,628 --> 00:23:32,599
need to you know account for how large

558
00:23:30,048 --> 00:23:35,750
the voxel lists or shrink or scale the

559
00:23:32,599 --> 00:23:39,349
input values to conform to the voxel so

560
00:23:35,750 --> 00:23:41,450
there's zero when you're at the at the

561
00:23:39,349 --> 00:23:43,788
min edge and one we're at the far edge

562
00:23:41,450 --> 00:23:45,009
even though the voxel itself may be 300

563
00:23:43,788 --> 00:23:47,298
meters long or something right

564
00:23:45,009 --> 00:23:50,000
so that's all we really need to do

565
00:23:47,298 --> 00:23:52,460
they're going to produce a voxel UVW for

566
00:23:50,000 --> 00:23:55,069
our lookup and then what we need to do

567
00:23:52,460 --> 00:23:56,389
is do a 3d texture texture fetch which I

568
00:23:55,069 --> 00:24:03,288
never remember the names of any of the

569
00:23:56,388 --> 00:24:06,918
things in OpenGL let's load that up

570
00:24:03,288 --> 00:24:10,908
I should just pin that how do you do

571
00:24:06,919 --> 00:24:12,889
that again you know like this right so

572
00:24:10,909 --> 00:24:15,860
really what we want to do now is just do

573
00:24:12,888 --> 00:24:18,798
a texture fetch right and you can see

574
00:24:15,859 --> 00:24:21,168
here here's the actual information for

575
00:24:18,798 --> 00:24:23,269
how textures are fetched you can see

576
00:24:21,169 --> 00:24:25,940
that you've got samplers here and the

577
00:24:23,269 --> 00:24:28,579
samplers for texture can be anything

578
00:24:25,940 --> 00:24:30,490
right so I can pass it a 1d texture or

579
00:24:28,579 --> 00:24:32,928
2d texture with like we have been doing

580
00:24:30,490 --> 00:24:35,990
or I can just sample from a 3d texture

581
00:24:32,929 --> 00:24:38,120
and all I really need to do is just pass

582
00:24:35,990 --> 00:24:40,429
it the appropriate p-value which again

583
00:24:38,119 --> 00:24:41,628
has to be 0 to 1 from beginning to the

584
00:24:40,429 --> 00:24:44,028
end of the texture on each dimension

585
00:24:41,628 --> 00:24:47,388
that's exactly what I prepared here so

586
00:24:44,028 --> 00:24:48,619
this call doesn't it's exactly the same

587
00:24:47,388 --> 00:24:50,719
as looking at any other texture

588
00:24:48,619 --> 00:24:53,449
we're just saying it's a it's a 3d

589
00:24:50,720 --> 00:24:55,159
texture now so instead of doing a 2d

590
00:24:53,450 --> 00:24:56,509
placement in it's just gonna do a 3d

591
00:24:55,159 --> 00:24:59,750
placement in it and that's that's it

592
00:24:56,509 --> 00:25:02,179
don't do anything else so you can see

593
00:24:59,750 --> 00:25:05,000
that would really give us a very quick

594
00:25:02,179 --> 00:25:07,179
way of producing these values that we

595
00:25:05,000 --> 00:25:07,179
want

596
00:25:10,980 --> 00:25:16,940
west-east south north down up right so I

597
00:25:13,980 --> 00:25:21,089
can get the values out of my cube

598
00:25:16,940 --> 00:25:22,860
lighting by doing six Texel fetches and

599
00:25:21,089 --> 00:25:24,899
why shouldn't I talk about just six

600
00:25:22,859 --> 00:25:27,209
texture lookups that will themselves do

601
00:25:24,900 --> 00:25:33,559
the trilinear filter right to filter the

602
00:25:27,210 --> 00:25:37,079
map and then once we have those values

603
00:25:33,558 --> 00:25:39,509
we just need to combine them into a

604
00:25:37,079 --> 00:25:44,220
lighting solution so we need now some

605
00:25:39,509 --> 00:25:47,279
way of saying okay let's let's you know

606
00:25:44,220 --> 00:25:52,048
let's light the pixel based on now what

607
00:25:47,279 --> 00:25:54,149
we know right okay so when we do this

608
00:25:52,048 --> 00:25:56,160
when you can see here where we do this

609
00:25:54,150 --> 00:25:58,320
some light call well the problem that we

610
00:25:56,160 --> 00:26:01,259
have is when we're summing the lighting

611
00:25:58,319 --> 00:26:03,389
we now need to be able to do the

612
00:26:01,259 --> 00:26:04,890
lighting equation based on light that's

613
00:26:03,390 --> 00:26:06,890
in coming from different directions

614
00:26:04,890 --> 00:26:10,200
right we have a west east north south

615
00:26:06,890 --> 00:26:13,049
down up etc and so we need to be able to

616
00:26:10,200 --> 00:26:16,259
say well like give us you know give us

617
00:26:13,048 --> 00:26:18,450
some indication of if light were coming

618
00:26:16,259 --> 00:26:21,990
from there how much of that light would

619
00:26:18,450 --> 00:26:23,279
be reflected back out at us right how

620
00:26:21,990 --> 00:26:27,390
much of that light would be reflected

621
00:26:23,279 --> 00:26:32,819
back towards the direction of the eye

622
00:26:27,390 --> 00:26:36,299
first of all and then you know related

623
00:26:32,819 --> 00:26:38,428
to the surface normal that we are given

624
00:26:36,298 --> 00:26:41,069
and so this is just going to be a

625
00:26:38,429 --> 00:26:43,259
straight-up flooding equation here and I

626
00:26:41,069 --> 00:26:46,230
want to put that in but at the moment

627
00:26:43,259 --> 00:26:47,519
what I'd rather do is actually say let's

628
00:26:46,230 --> 00:26:49,470
hold off on that for a minute

629
00:26:47,519 --> 00:26:51,029
because if I were to put a complete

630
00:26:49,470 --> 00:26:53,130
lighting equation in here then we also

631
00:26:51,029 --> 00:26:55,410
have the problem of did I write it

632
00:26:53,130 --> 00:26:57,510
correctly right did I screw up the

633
00:26:55,410 --> 00:26:59,340
lighting equation and so when we look at

634
00:26:57,509 --> 00:27:01,470
what comes out of it I could have made

635
00:26:59,339 --> 00:27:03,480
any kind of error there so what I think

636
00:27:01,470 --> 00:27:07,380
they want to do first is let's just test

637
00:27:03,480 --> 00:27:10,019
test each individual lighting channel

638
00:27:07,380 --> 00:27:12,870
and make sure that we can actually

639
00:27:10,019 --> 00:27:14,308
sample them accurately using this

640
00:27:12,869 --> 00:27:15,750
technique to make sure we don't have

641
00:27:14,308 --> 00:27:18,329
bugs elsewhere in the pipeline

642
00:27:15,750 --> 00:27:20,298
and then once I know that I'm actually

643
00:27:18,329 --> 00:27:22,889
sampling each of these lights properly

644
00:27:20,298 --> 00:27:24,779
then we move to computing the lighting

645
00:27:22,890 --> 00:27:26,670
equation with some cops

646
00:27:24,779 --> 00:27:28,889
that we have done the underlying work

647
00:27:26,670 --> 00:27:31,170
properly so we're only debugging the

648
00:27:28,890 --> 00:27:33,600
lighting equation itself not the inputs

649
00:27:31,170 --> 00:27:35,820
and the lending equation and having no

650
00:27:33,599 --> 00:27:37,409
idea what we've screwed up right so

651
00:27:35,819 --> 00:27:39,389
that's what I'd like to do first so

652
00:27:37,410 --> 00:27:43,980
there's going to be to do here that's

653
00:27:39,390 --> 00:27:45,570
like insert lighting equation here but

654
00:27:43,980 --> 00:27:47,819
what we're going to do first is when we

655
00:27:45,569 --> 00:27:52,619
return lighting information from the

656
00:27:47,819 --> 00:27:55,829
sunlight some light we are just going to

657
00:27:52,619 --> 00:27:58,019
return the lighting value from one of

658
00:27:55,829 --> 00:28:00,599
these things let's say that's what we're

659
00:27:58,019 --> 00:28:02,519
going to return and so we ain't going to

660
00:28:00,599 --> 00:28:04,769
have a light data that's going to be an

661
00:28:02,519 --> 00:28:08,250
RGB what I'm going to say right now is

662
00:28:04,769 --> 00:28:12,269
we're going to take light West that RGB

663
00:28:08,250 --> 00:28:16,200
and multiply it by light West a the a

664
00:28:12,269 --> 00:28:18,960
value I'm going to say the Alpha value

665
00:28:16,200 --> 00:28:21,420
we're going to encode the intensity of

666
00:28:18,960 --> 00:28:25,470
the light into that so that way we have

667
00:28:21,420 --> 00:28:28,430
an RGB which gives us 256 levels of

668
00:28:25,470 --> 00:28:30,509
precision on each color gun and then

669
00:28:28,430 --> 00:28:33,029
another value which basically scales

670
00:28:30,509 --> 00:28:35,819
them this is just a crappy way of doing

671
00:28:33,029 --> 00:28:37,500
an HDR encoding basically and so what I

672
00:28:35,819 --> 00:28:39,960
want to do is say all right we'll take

673
00:28:37,500 --> 00:28:42,119
the light here that if I just did it by

674
00:28:39,960 --> 00:28:44,759
itself would allow us to get from zero

675
00:28:42,119 --> 00:28:46,619
to one brightness in our G and B I want

676
00:28:44,759 --> 00:28:48,900
to be able to have a broader range so

677
00:28:46,619 --> 00:28:53,639
what I'm going to do is say max light

678
00:28:48,900 --> 00:28:56,519
intensity right times that a value that

679
00:28:53,640 --> 00:28:59,550
allows me to take the Alpha value and

680
00:28:56,519 --> 00:29:01,529
say how bright is this light relative

681
00:28:59,549 --> 00:29:04,339
that's incoming here relative to the

682
00:29:01,529 --> 00:29:06,450
maximum intensity of a light in general

683
00:29:04,339 --> 00:29:08,849
that we can possibly have in the game

684
00:29:06,450 --> 00:29:11,880
what's the brightest light and then the

685
00:29:08,849 --> 00:29:15,149
RGB is just a way of caller izing that

686
00:29:11,880 --> 00:29:19,050
light so we have a way of having a broad

687
00:29:15,150 --> 00:29:21,060
like basically a an exponent on the

688
00:29:19,049 --> 00:29:23,099
light and you know we may want to change

689
00:29:21,059 --> 00:29:24,659
how this is encoded I'm not saying this

690
00:29:23,099 --> 00:29:27,719
is exactly how we want to encode it or

691
00:29:24,660 --> 00:29:30,540
anything but you know that's we're gonna

692
00:29:27,720 --> 00:29:32,250
start with that and then as we go we may

693
00:29:30,539 --> 00:29:35,970
change it around right

694
00:29:32,250 --> 00:29:38,289
and so then up in here for the moment

695
00:29:35,970 --> 00:29:39,549
because I don't really care

696
00:29:38,289 --> 00:29:42,220
I'm just gonna go ahead and quickly

697
00:29:39,549 --> 00:29:44,049
define this to max light intensity

698
00:29:42,220 --> 00:29:46,600
that's gonna be a floating-point value

699
00:29:44,049 --> 00:29:48,579
that just gets input into the shaders so

700
00:29:46,599 --> 00:29:50,500
cure I will have a max light intensity

701
00:29:48,579 --> 00:29:52,779
value that's probably just gonna be

702
00:29:50,500 --> 00:29:55,450
something that we define in the render

703
00:29:52,779 --> 00:29:57,039
itself so in the handmade renderer code

704
00:29:55,450 --> 00:29:59,500
where we're starting to define things

705
00:29:57,039 --> 00:30:00,940
here like the light data with that sort

706
00:29:59,500 --> 00:30:02,349
of thing we're just gonna say that

707
00:30:00,940 --> 00:30:04,750
there's a max light intensity and that

708
00:30:02,349 --> 00:30:07,659
max light intensity is whatever it is I

709
00:30:04,750 --> 00:30:10,390
don't know what it is maybe it's ten who

710
00:30:07,660 --> 00:30:11,860
knows not my problem right now that will

711
00:30:10,390 --> 00:30:13,780
be something when we go to tune the

712
00:30:11,859 --> 00:30:16,059
actual lighting figure out how bright we

713
00:30:13,779 --> 00:30:17,109
want our brightest light to be don't

714
00:30:16,059 --> 00:30:18,700
have an opinion we don't even have

715
00:30:17,109 --> 00:30:24,029
exposure control in this game so you

716
00:30:18,700 --> 00:30:26,740
know that's for a later day all right

717
00:30:24,029 --> 00:30:28,509
so once we have that piece of

718
00:30:26,740 --> 00:30:31,240
information we now have the ability to

719
00:30:28,509 --> 00:30:32,920
call the some light function and the

720
00:30:31,240 --> 00:30:34,410
some light function returns the

721
00:30:32,920 --> 00:30:37,090
information that we actually needed

722
00:30:34,410 --> 00:30:38,800
which is how bright the lighting should

723
00:30:37,089 --> 00:30:42,929
be on this thing right

724
00:30:38,799 --> 00:30:44,889
what's the inbound RGB light and

725
00:30:42,930 --> 00:30:47,320
eventually we're gonna have to have some

726
00:30:44,890 --> 00:30:49,120
real information there but for right now

727
00:30:47,319 --> 00:30:52,210
all we're gonna do is say what did the

728
00:30:49,119 --> 00:30:54,489
Westfield say the lighting was and we're

729
00:30:52,210 --> 00:30:57,009
just gonna return that don't care what

730
00:30:54,490 --> 00:30:59,109
the normal is don't care about anything

731
00:30:57,009 --> 00:31:03,039
other than the position of the pixel and

732
00:30:59,109 --> 00:31:08,139
what is in the West Side voxel at that

733
00:31:03,039 --> 00:31:10,329
point that's it right okay so assuming

734
00:31:08,140 --> 00:31:12,040
that we wanted to do that what I'd like

735
00:31:10,329 --> 00:31:14,740
to do here is maybe get rid of this if

736
00:31:12,039 --> 00:31:17,500
letting disable thing this sunlight can

737
00:31:14,740 --> 00:31:20,109
just sit here now and if the lighting is

738
00:31:17,500 --> 00:31:22,990
disabled it simply won't call it right

739
00:31:20,109 --> 00:31:25,089
so the fact that some light exists there

740
00:31:22,990 --> 00:31:27,039
and it multiplies reflectance that just

741
00:31:25,089 --> 00:31:29,799
won't happen if lighting is disabled

742
00:31:27,039 --> 00:31:33,190
right so now what I'd like to do is make

743
00:31:29,799 --> 00:31:35,680
lighting not be disabled and so when we

744
00:31:33,190 --> 00:31:37,600
compile the Z bias program you can see

745
00:31:35,680 --> 00:31:39,519
it down here where we call this you can

746
00:31:37,599 --> 00:31:43,469
see that there is like a setting for

747
00:31:39,519 --> 00:31:43,470
letting disabled if we search for that

748
00:31:43,980 --> 00:31:48,058
let's see

749
00:31:46,480 --> 00:31:49,140
that is doo-doo-doo

750
00:31:48,058 --> 00:31:53,558
doo-doo-doo-doo-doo-doo

751
00:31:49,140 --> 00:31:56,440
doo-doo-doo-doo-doo here is our actual

752
00:31:53,558 --> 00:31:59,190
disabled for it dududududu

753
00:31:56,440 --> 00:32:01,360
there you go uh and so if I just say no

754
00:31:59,190 --> 00:32:05,620
we're actually gonna do lighting ma'am

755
00:32:01,359 --> 00:32:07,629
as scary as that may seem we should be

756
00:32:05,619 --> 00:32:09,189
off to the races and we will start

757
00:32:07,630 --> 00:32:11,110
getting compile errors on our shaders

758
00:32:09,190 --> 00:32:13,539
because we probably screwed those up

759
00:32:11,109 --> 00:32:16,058
once the compiler is stopped we will be

760
00:32:13,539 --> 00:32:17,649
totally borked because it'll just be the

761
00:32:16,058 --> 00:32:20,440
cloud just be black presumably because

762
00:32:17,650 --> 00:32:24,130
we haven't even sent down those samplers

763
00:32:20,440 --> 00:32:25,960
they're gone right so now we're just

764
00:32:24,130 --> 00:32:29,110
gonna start the process of feeding

765
00:32:25,960 --> 00:32:30,850
something into these voxels and seeing

766
00:32:29,109 --> 00:32:34,928
if it works right so that's where we're

767
00:32:30,849 --> 00:32:38,589
going now okay I'm gonna open up remedy

768
00:32:34,929 --> 00:32:42,100
the debugger of choice among handmade

769
00:32:38,589 --> 00:32:45,459
zealots such as myself we are going to

770
00:32:42,099 --> 00:32:47,199
run the game and in theory if we don't

771
00:32:45,460 --> 00:32:48,819
well and we didn't even crash oh no we

772
00:32:47,200 --> 00:32:50,259
did I'm like I'm like I'm assuming that

773
00:32:48,819 --> 00:32:51,490
we will crash the wrong word I'm

774
00:32:50,259 --> 00:32:53,650
assuming that we will fail the shader

775
00:32:51,490 --> 00:32:55,990
validation and we did so first things

776
00:32:53,650 --> 00:32:58,600
first let's make our shaders actually

777
00:32:55,990 --> 00:33:00,308
work and then we'll have the problem

778
00:32:58,599 --> 00:33:03,668
that they're sampling no actual light

779
00:33:00,308 --> 00:33:07,119
oops fragment so here's what it reports

780
00:33:03,669 --> 00:33:10,570
back it says error undefined variable

781
00:33:07,119 --> 00:33:11,949
surface reflect let's go see what's

782
00:33:10,569 --> 00:33:15,639
going on there

783
00:33:11,950 --> 00:33:18,730
so if I jump to the Z bias program and I

784
00:33:15,640 --> 00:33:20,770
look at it service reflect isn't used

785
00:33:18,730 --> 00:33:30,039
until down below right so that's

786
00:33:20,769 --> 00:33:31,839
actually here and excuse me it looks

787
00:33:30,039 --> 00:33:34,029
like the problem we have is that it's

788
00:33:31,839 --> 00:33:36,428
only if the model RA is above the

789
00:33:34,029 --> 00:33:38,980
threshold does it actually do this

790
00:33:36,429 --> 00:33:41,650
operation right I think that's because

791
00:33:38,980 --> 00:33:44,140
this and that's probably right but I

792
00:33:41,650 --> 00:33:46,570
think this brace here was like an arrant

793
00:33:44,140 --> 00:33:48,669
brace I think that looks like the actual

794
00:33:46,569 --> 00:33:50,168
problem right and so if we just delete

795
00:33:48,669 --> 00:33:51,790
that brace this this was getting wrapped

796
00:33:50,169 --> 00:33:53,710
into its own little clause here but this

797
00:33:51,789 --> 00:33:55,750
whole Clause wants to actually be that

798
00:33:53,710 --> 00:34:00,389
so I think that was all that particular

799
00:33:55,750 --> 00:34:06,970
error was let's go back in Jimmy

800
00:34:00,388 --> 00:34:08,440
run this again and we're running a debug

801
00:34:06,970 --> 00:34:11,260
mode right now so it's a pretty slow

802
00:34:08,440 --> 00:34:15,398
startup unfortunately so there we go and

803
00:34:11,260 --> 00:34:17,530
I think you know I don't really know but

804
00:34:15,398 --> 00:34:18,519
I think this is sort of what we would

805
00:34:17,530 --> 00:34:21,099
expect

806
00:34:18,519 --> 00:34:23,858
like I said everything would probably be

807
00:34:21,099 --> 00:34:25,629
black and the reason for that you know

808
00:34:23,858 --> 00:34:26,949
and even all this stuff is still going

809
00:34:25,628 --> 00:34:28,480
through that shader and we're gonna have

810
00:34:26,949 --> 00:34:31,239
to make sure that we do a lighting

811
00:34:28,480 --> 00:34:33,579
disable call for those I think some way

812
00:34:31,239 --> 00:34:34,989
of disabling that lighting because

813
00:34:33,579 --> 00:34:37,750
otherwise we can't even access our UI

814
00:34:34,989 --> 00:34:40,928
right but that lighting that's that's in

815
00:34:37,750 --> 00:34:42,818
operation right now what's happening is

816
00:34:40,929 --> 00:34:45,338
or what I believe is happening right is

817
00:34:42,818 --> 00:34:47,199
that we're now sampling lighting which

818
00:34:45,338 --> 00:34:51,088
will affect what we're doing we're

819
00:34:47,199 --> 00:34:53,318
sampling that lighting from a from a

820
00:34:51,088 --> 00:34:55,358
source that's always going to return

821
00:34:53,318 --> 00:34:56,378
zero and so we just get a black screen

822
00:34:55,358 --> 00:34:58,719
which is exactly what we would expect

823
00:34:56,378 --> 00:35:00,519
now I just want to verify that that's

824
00:34:58,719 --> 00:35:02,049
sort of what's happening because again

825
00:35:00,519 --> 00:35:03,759
it's GPU program can never be too

826
00:35:02,050 --> 00:35:05,950
careful I'm just gonna go ahead and

827
00:35:03,760 --> 00:35:07,270
assign the normal whatever the normal is

828
00:35:05,949 --> 00:35:10,598
getting passed down I'm gonna go ahead

829
00:35:07,269 --> 00:35:12,579
and assign the normal to the output

830
00:35:10,599 --> 00:35:13,599
lighting channel just to see whether I

831
00:35:12,579 --> 00:35:16,150
see anything on the screen

832
00:35:13,599 --> 00:35:19,000
and again that's just me trying to

833
00:35:16,150 --> 00:35:22,119
ascertain to what extent this shader is

834
00:35:19,000 --> 00:35:24,039
working right and so if we look at what

835
00:35:22,119 --> 00:35:26,500
we're seeing here this is roughly what

836
00:35:24,039 --> 00:35:29,170
we would expect so here are our normals

837
00:35:26,500 --> 00:35:31,059
and if you look at like a cube you can

838
00:35:29,170 --> 00:35:33,880
see that it looks exactly like what we

839
00:35:31,059 --> 00:35:36,159
would expect the faces that are facing

840
00:35:33,880 --> 00:35:39,460
in the positive direction well actually

841
00:35:36,159 --> 00:35:40,989
no you know what there is one bug which

842
00:35:39,460 --> 00:35:43,059
is I would have expected this top oh you

843
00:35:40,989 --> 00:35:45,489
know what it is blue it's just it's so

844
00:35:43,059 --> 00:35:47,349
dark the top is so dark in the texture

845
00:35:45,489 --> 00:35:49,299
that it's getting nullified because

846
00:35:47,349 --> 00:35:51,400
these are all blue so you can see the

847
00:35:49,300 --> 00:35:52,839
positive direction is always bright so

848
00:35:51,400 --> 00:35:55,329
if I look at it from this angle you can

849
00:35:52,838 --> 00:35:57,279
see I see blue green and red on the

850
00:35:55,329 --> 00:35:59,019
three positive directions and then these

851
00:35:57,280 --> 00:36:01,329
should all be black because they're

852
00:35:59,019 --> 00:36:03,880
negative normals right and I can fix

853
00:36:01,329 --> 00:36:06,539
that obviously if I wanted to I could do

854
00:36:03,880 --> 00:36:06,539
something like this

855
00:36:08,400 --> 00:36:23,789
also isn't eff not allowed in shaders

856
00:36:14,550 --> 00:36:29,140
why didn't I get an error on this I

857
00:36:23,789 --> 00:36:33,329
thought for some reason I thought GLSL

858
00:36:29,139 --> 00:36:36,759
doesn't allow you to put an ass in there

859
00:36:33,329 --> 00:36:38,829
am I just imagining things I thought

860
00:36:36,760 --> 00:36:41,740
like in three and four you can and three

861
00:36:38,829 --> 00:36:51,610
you can't or some crap like this I don't

862
00:36:41,739 --> 00:36:54,099
even know I think maybe we want that I'm

863
00:36:51,610 --> 00:36:56,920
not sure but I'm gonna I'm gonna do that

864
00:36:54,099 --> 00:36:59,139
anyway anyway so I can adjust these into

865
00:36:56,920 --> 00:37:01,269
the visible range just to make sure but

866
00:36:59,139 --> 00:37:04,269
basically yeah it's just you know

867
00:37:01,269 --> 00:37:05,739
something like that and then we would

868
00:37:04,269 --> 00:37:07,480
get you know we bias it up so it's all

869
00:37:05,739 --> 00:37:08,559
in the visible color range because

870
00:37:07,480 --> 00:37:10,869
negative knows no such thing as negative

871
00:37:08,559 --> 00:37:13,269
colors when you're outputting pixels you

872
00:37:10,869 --> 00:37:15,730
can only zeroes the lowest you can be

873
00:37:13,269 --> 00:37:17,858
and so here's what it would look like if

874
00:37:15,730 --> 00:37:19,990
we actually adjusted all the colors into

875
00:37:17,858 --> 00:37:22,119
the visible range you can see these

876
00:37:19,989 --> 00:37:25,868
things getting colorized by their

877
00:37:22,119 --> 00:37:27,519
direction and just the brightness

878
00:37:25,869 --> 00:37:31,960
basically says which direction they're

879
00:37:27,519 --> 00:37:34,090
facing right so there's our our

880
00:37:31,960 --> 00:37:37,750
understanding of the color values there

881
00:37:34,090 --> 00:37:39,820
and everything looks you know roughly

882
00:37:37,750 --> 00:37:42,190
correct ie not scrutinizing it so I

883
00:37:39,820 --> 00:37:45,130
don't want to say it's 100% red but it

884
00:37:42,190 --> 00:37:47,679
looks like we're fine so I think we are

885
00:37:45,130 --> 00:37:51,099
correctly at this point set up to

886
00:37:47,679 --> 00:37:53,199
actually get our voxel sampling working

887
00:37:51,099 --> 00:37:56,559
which of course requires us to actually

888
00:37:53,199 --> 00:37:59,079
provide these voxels somehow in the

889
00:37:56,559 --> 00:38:03,239
first place and in order to do that what

890
00:37:59,079 --> 00:38:05,500
I would like to do I think I'm not sure

891
00:38:03,239 --> 00:38:08,339
because you know it's a little bit it's

892
00:38:05,500 --> 00:38:08,340
a little bit tough to say

893
00:38:15,329 --> 00:38:20,760
but basically what I'd like to do with

894
00:38:16,829 --> 00:38:23,670
this voxel is say okay probably want to

895
00:38:20,760 --> 00:38:26,940
tackle this in two stages in the first

896
00:38:23,670 --> 00:38:29,670
stage I will output voxels directly to

897
00:38:26,940 --> 00:38:31,858
the graphics card and those voxels will

898
00:38:29,670 --> 00:38:34,588
be the lighting that is used that's step

899
00:38:31,858 --> 00:38:36,779
one I want to do that because I think

900
00:38:34,588 --> 00:38:37,679
it's the path with the least number of

901
00:38:36,780 --> 00:38:40,380
calls to the GPU

902
00:38:37,679 --> 00:38:43,819
Erico it is the path with the least

903
00:38:40,380 --> 00:38:48,539
number of GPU Scrooged options in it

904
00:38:43,820 --> 00:38:51,420
then once I am sure that that is working

905
00:38:48,539 --> 00:38:55,139
and possibly when I say once I'm sure

906
00:38:51,420 --> 00:38:58,588
that's working I may mean sure to ask

907
00:38:55,139 --> 00:39:01,848
extreme extent meaning when we know the

908
00:38:58,588 --> 00:39:05,909
entire lighting pipeline is now working

909
00:39:01,849 --> 00:39:09,539
then I will move from submitting the

910
00:39:05,909 --> 00:39:15,659
voxels myself to probably just

911
00:39:09,539 --> 00:39:20,068
submitting a list of lights right so we

912
00:39:15,659 --> 00:39:23,368
will step one as we send down six 128 by

913
00:39:20,068 --> 00:39:27,239
128 by 128 voxels every frame ourselves

914
00:39:23,369 --> 00:39:31,500
and step two is we just send down the

915
00:39:27,239 --> 00:39:33,239
light probes and in step two what we'll

916
00:39:31,500 --> 00:39:36,088
do is we'll take that light probe list

917
00:39:33,239 --> 00:39:37,559
we'll treat it as a vertex buffer as if

918
00:39:36,088 --> 00:39:41,429
it's going to render primitives to the

919
00:39:37,559 --> 00:39:44,670
graphics card right and we will voxel

920
00:39:41,429 --> 00:39:46,889
eyes the lighting into our voxels

921
00:39:44,670 --> 00:39:49,500
ourselves right we'll figure out some

922
00:39:46,889 --> 00:39:51,659
way to do that again that's a much more

923
00:39:49,500 --> 00:39:53,309
complex operation and so I don't want to

924
00:39:51,659 --> 00:39:55,949
mix that with lighting it's just an

925
00:39:53,309 --> 00:40:04,049
optimization there's nothing different

926
00:39:55,949 --> 00:40:05,848
right about that but you know I I don't

927
00:40:04,050 --> 00:40:07,650
even really know exactly now I think

928
00:40:05,849 --> 00:40:09,420
about it I'm not sure what the most

929
00:40:07,650 --> 00:40:11,639
efficient ways to voxel eyes things on

930
00:40:09,420 --> 00:40:15,260
the graphics card anyway it sounds kind

931
00:40:11,639 --> 00:40:15,259
of nasty in the sense that

932
00:40:19,309 --> 00:40:26,579
you don't really specify volumetric

933
00:40:22,920 --> 00:40:32,760
primitives in OpenGL I've never really

934
00:40:26,579 --> 00:40:35,250
thought about this but like if you

935
00:40:32,760 --> 00:40:38,930
wanted to rasterize a voxel I mean I've

936
00:40:35,250 --> 00:40:42,358
written my own voxel rasterizer for

937
00:40:38,929 --> 00:40:44,879
multiple times and you know what you

938
00:40:42,358 --> 00:40:48,358
want to do is have some function that

939
00:40:44,880 --> 00:40:50,490
says which voxels are included and you

940
00:40:48,358 --> 00:40:54,889
typically bound that and then evaluate

941
00:40:50,489 --> 00:40:57,000
it as you step through the voxel that

942
00:40:54,889 --> 00:40:59,460
operation I don't even know how to

943
00:40:57,000 --> 00:41:01,500
provoke that operation in OpenGL if it

944
00:40:59,460 --> 00:41:04,769
even has it right like I don't even know

945
00:41:01,500 --> 00:41:07,460
how you give it a boundary region and

946
00:41:04,769 --> 00:41:11,070
say please step through all of the

947
00:41:07,460 --> 00:41:14,250
pieces of voxels so for all I know and I

948
00:41:11,070 --> 00:41:18,809
don't know but for all I know what you

949
00:41:14,250 --> 00:41:25,608
actually need to do is you actually need

950
00:41:18,809 --> 00:41:29,070
to specify the slice of the texture as a

951
00:41:25,608 --> 00:41:30,989
render target curve but no that wouldn't

952
00:41:29,070 --> 00:41:32,849
work so I guess as I'm thinking this

953
00:41:30,989 --> 00:41:36,029
through I'm like thinking to myself I

954
00:41:32,849 --> 00:41:39,359
don't even know how you induce OpenGL to

955
00:41:36,030 --> 00:41:41,400
produce the correct output to a voxel

956
00:41:39,358 --> 00:41:44,069
anyway so we're gonna have to go look at

957
00:41:41,400 --> 00:41:45,990
that like obviously there's people who

958
00:41:44,070 --> 00:41:48,330
do stuff like voxel cone tracing and

959
00:41:45,989 --> 00:41:50,368
things like this obviously you have to

960
00:41:48,329 --> 00:41:52,500
be able to do that what I don't know is

961
00:41:50,369 --> 00:41:54,210
does it require a computer if it does

962
00:41:52,500 --> 00:42:00,000
forget that like we're not going that

963
00:41:54,210 --> 00:42:01,320
route but I would have hoped that they

964
00:42:00,000 --> 00:42:03,358
would have added some kind of a

965
00:42:01,320 --> 00:42:06,900
rasterization primitive that rasterized

966
00:42:03,358 --> 00:42:08,779
this into 3d cuz gosh that's just kind

967
00:42:06,900 --> 00:42:11,130
of an obvious thing you'd want to do

968
00:42:08,780 --> 00:42:13,859
it's weird that I can't even think of

969
00:42:11,130 --> 00:42:16,559
someone mentioning this it's got to be

970
00:42:13,858 --> 00:42:19,009
in there I'm just kind of curious what's

971
00:42:16,559 --> 00:42:19,009
the what's the

972
00:42:53,400 --> 00:43:00,070
okay so basically the answer is you have

973
00:42:57,519 --> 00:43:02,679
to use an unordered access view so you

974
00:43:00,070 --> 00:43:04,660
don't have to go full pixel shader by

975
00:43:02,679 --> 00:43:09,009
the Ikes

976
00:43:04,659 --> 00:43:14,489
so one ordered access views or look

977
00:43:09,010 --> 00:43:19,470
really bad class is that really true

978
00:43:14,489 --> 00:43:19,469
what disappoints me on so many levels

979
00:43:23,550 --> 00:43:37,530
I'm kind of depressed to hear that if

980
00:43:32,079 --> 00:43:37,529
anyone from Nvidia is out there

981
00:43:39,090 --> 00:43:45,130
listening right now can you please email

982
00:43:41,530 --> 00:43:47,320
me or something and tell me why that's

983
00:43:45,130 --> 00:43:49,329
the case because an unordered access

984
00:43:47,320 --> 00:43:52,470
view is like a very bad primitive right

985
00:43:49,329 --> 00:43:59,380
and on order to access view is

986
00:43:52,469 --> 00:44:03,369
essentially a it's essentially a

987
00:43:59,380 --> 00:44:10,180
construct that breaks the ability of the

988
00:44:03,369 --> 00:44:14,319
GPU to know about the pixels touched by

989
00:44:10,179 --> 00:44:16,929
a shader ahead of time which makes it

990
00:44:14,320 --> 00:44:21,250
much less performant I would think in a

991
00:44:16,929 --> 00:44:25,989
lot of cases and in the case of voxel

992
00:44:21,250 --> 00:44:29,550
ization you could just have voxel

993
00:44:25,989 --> 00:44:32,589
ization the front-end rasterizer knows

994
00:44:29,550 --> 00:44:35,800
it can do the exact same operation on

995
00:44:32,590 --> 00:44:39,430
voxels as it does on pixels

996
00:44:35,800 --> 00:44:44,980
it's just that edge inclusion operation

997
00:44:39,429 --> 00:44:48,929
just uses six planes instead of three

998
00:44:44,980 --> 00:44:48,929
planes right

999
00:44:51,389 --> 00:44:57,009
so is it just that that was impossible

1000
00:44:54,190 --> 00:45:00,369
like was it that there's no way we're

1001
00:44:57,009 --> 00:45:03,309
gonna add six planes to our rasterizer

1002
00:45:00,369 --> 00:45:04,809
we can only have three because even that

1003
00:45:03,309 --> 00:45:08,829
doesn't sound like it makes any sense to

1004
00:45:04,809 --> 00:45:10,298
me but maybe it's true I don't know but

1005
00:45:08,829 --> 00:45:12,369
I would love to know why that was the

1006
00:45:10,298 --> 00:45:19,619
answer that just seems really weird to

1007
00:45:12,369 --> 00:45:19,619
me I know were to access view

1008
00:45:30,338 --> 00:45:42,529
very depressed right now yeah I'm very

1009
00:45:40,369 --> 00:45:45,559
depressed right now all right

1010
00:45:42,530 --> 00:45:52,010
so if I multiply out how big one of

1011
00:45:45,559 --> 00:45:55,009
these voxels is at worst eight megabytes

1012
00:45:52,010 --> 00:45:59,480
of throughput times six is fifty

1013
00:45:55,010 --> 00:46:01,820
megabytes of GPU throughput per frame if

1014
00:45:59,480 --> 00:46:03,889
we wanted to send down the voxel every

1015
00:46:01,820 --> 00:46:09,559
frame right so if we wanted to just say

1016
00:46:03,889 --> 00:46:11,059
look here comes the voxel bro and we

1017
00:46:09,559 --> 00:46:12,889
sent down the whole thing so we never

1018
00:46:11,059 --> 00:46:15,019
did that operation that I was just

1019
00:46:12,889 --> 00:46:16,789
talking about because oMG acquires

1020
00:46:15,019 --> 00:46:20,869
unordered access views which is a

1021
00:46:16,789 --> 00:46:23,029
complete nightmare um what we would want

1022
00:46:20,869 --> 00:46:27,910
to have to do is send down what a mass

1023
00:46:23,030 --> 00:46:30,290
264 K let's just say I'm sorry 64 Meg's

1024
00:46:27,909 --> 00:46:32,000
we're trying to send down 64 megabytes

1025
00:46:30,289 --> 00:46:39,070
of memory or something actually maybe is

1026
00:46:32,000 --> 00:46:43,699
closer to 48 so if I do ten 24/48 mix

1027
00:46:39,070 --> 00:46:47,119
sorry I was being being bad math II so

1028
00:46:43,699 --> 00:46:48,799
it's 48 megabytes of GPU throughput if

1029
00:46:47,119 --> 00:46:52,190
we're sending that down at 60 frames a

1030
00:46:48,800 --> 00:46:54,589
second that's 2 gigabytes and sustained

1031
00:46:52,190 --> 00:46:59,980
throughput to the graphs card it's not

1032
00:46:54,588 --> 00:47:02,809
fantastic right but it's not that high

1033
00:46:59,980 --> 00:47:07,869
so it's not out of the question that we

1034
00:47:02,809 --> 00:47:10,759
could just do this on the CPU side it's

1035
00:47:07,869 --> 00:47:12,470
possible whether that turns out to be

1036
00:47:10,760 --> 00:47:14,890
the right answer me and I don't know but

1037
00:47:12,469 --> 00:47:17,989
it's possible is all I'm saying

1038
00:47:14,889 --> 00:47:22,519
so you know I guess that's just

1039
00:47:17,989 --> 00:47:28,969
something for us to think about as we go

1040
00:47:22,519 --> 00:47:32,230
so if we go and we stretch our concept

1041
00:47:28,969 --> 00:47:35,480
of what's happening here a little bit

1042
00:47:32,230 --> 00:47:36,530
you can imagine going through and taking

1043
00:47:35,480 --> 00:47:39,490
the

1044
00:47:36,530 --> 00:47:44,360
render commands that we have here and

1045
00:47:39,489 --> 00:47:47,659
instead of sending down the different

1046
00:47:44,360 --> 00:47:50,900
information that we've got here these

1047
00:47:47,659 --> 00:47:52,489
are not potentially ever gonna be sent

1048
00:47:50,900 --> 00:47:55,250
down then these will just be for our own

1049
00:47:52,489 --> 00:47:59,329
personal renderer use we would just end

1050
00:47:55,250 --> 00:48:01,639
up being in this land here where we have

1051
00:47:59,329 --> 00:48:06,259
the light index voxel being sent down

1052
00:48:01,639 --> 00:48:08,719
here and this voxel has the data in it

1053
00:48:06,260 --> 00:48:12,770
that we actually use for lighting what

1054
00:48:08,719 --> 00:48:15,679
we want to do there is say okay this

1055
00:48:12,769 --> 00:48:18,320
goes away perhaps meaning this light

1056
00:48:15,679 --> 00:48:20,960
probe irradiance I guess is not really a

1057
00:48:18,320 --> 00:48:23,420
thing maybe well we probably still need

1058
00:48:20,960 --> 00:48:26,530
that for other reasons but so what we're

1059
00:48:23,420 --> 00:48:31,130
gonna have to do here is actually pack

1060
00:48:26,530 --> 00:48:35,300
our color values in here and prepare six

1061
00:48:31,130 --> 00:48:37,820
separate voxel dated chunks and send

1062
00:48:35,300 --> 00:48:41,050
them all down as 3d textures right so we

1063
00:48:37,820 --> 00:48:41,050
would need to do something like this

1064
00:48:42,909 --> 00:48:48,769
where we're gonna pack that RGB a

1065
00:48:45,909 --> 00:48:52,239
lighting in there and send that down as

1066
00:48:48,769 --> 00:48:54,259
the light in next voxel each time and

1067
00:48:52,239 --> 00:48:56,899
again we'll do that in a not

1068
00:48:54,260 --> 00:49:00,620
particularly fancy way at first so here

1069
00:48:56,900 --> 00:49:02,210
we would basically just do like some

1070
00:49:00,619 --> 00:49:02,869
kind of a nonsense thing where we're

1071
00:49:02,210 --> 00:49:07,190
just like all right

1072
00:49:02,869 --> 00:49:17,539
each of these we're actually gonna just

1073
00:49:07,190 --> 00:49:20,090
send over and once we've got that in

1074
00:49:17,539 --> 00:49:26,150
place the OpenGL version of course also

1075
00:49:20,090 --> 00:49:27,470
needs to have a six wide thing that it's

1076
00:49:26,150 --> 00:49:31,280
keeping for that I guess I'll just use

1077
00:49:27,469 --> 00:49:33,789
the compiler to jump me right to it or

1078
00:49:31,280 --> 00:49:33,790
not

1079
00:49:36,869 --> 00:49:42,190
okay so never mind that isn't actually

1080
00:49:38,710 --> 00:49:46,420
tell me so that opened jail structure

1081
00:49:42,190 --> 00:49:54,309
there that keeps these guys where does

1082
00:49:46,420 --> 00:49:56,980
that go it's here I so here's that light

1083
00:49:54,309 --> 00:49:59,319
index voxel that's going to change you

1084
00:49:56,980 --> 00:50:02,889
can see we need six of those now so

1085
00:49:59,318 --> 00:50:06,568
there's our gigantic thing I suppose

1086
00:50:02,889 --> 00:50:06,568
actually we want to do it like that and

1087
00:50:10,108 --> 00:50:16,058
then we're good so now we have a place

1088
00:50:14,019 --> 00:50:18,068
to put this information we just need to

1089
00:50:16,059 --> 00:50:19,480
send it somewhere because right now

1090
00:50:18,068 --> 00:50:22,779
we're not actually submitting that

1091
00:50:19,480 --> 00:50:25,568
letting information so we need at some

1092
00:50:22,780 --> 00:50:27,970
point to say okay let's bind some

1093
00:50:25,568 --> 00:50:33,358
textures to this thing and allow them to

1094
00:50:27,969 --> 00:50:40,419
get fetched so in the actual code and

1095
00:50:33,358 --> 00:50:43,210
we're going to need to do this get a

1096
00:50:40,420 --> 00:50:45,639
couple different places first here you

1097
00:50:43,210 --> 00:50:47,949
can see where we do our open Joe

1098
00:50:45,639 --> 00:50:50,739
link samplers you can see we've got the

1099
00:50:47,949 --> 00:50:53,199
lights at the end here we now need to

1100
00:50:50,739 --> 00:50:56,129
change that to be linking each of these

1101
00:50:53,199 --> 00:50:56,129
right

1102
00:51:02,530 --> 00:51:09,510
and so down here we've got effectively

1103
00:51:05,230 --> 00:51:17,230
that same list we need to link east west

1104
00:51:09,510 --> 00:51:20,890
south north down and up as our set once

1105
00:51:17,230 --> 00:51:24,309
of those samplers are all linked up we

1106
00:51:20,889 --> 00:51:29,589
have to submit them so when we go to set

1107
00:51:24,309 --> 00:51:32,139
the Z bias program anytime that's

1108
00:51:29,590 --> 00:51:45,820
actually happening we have to set up the

1109
00:51:32,139 --> 00:51:47,230
shaders for it so when we look at the

1110
00:51:45,820 --> 00:51:54,070
places where that's actually being done

1111
00:51:47,230 --> 00:51:54,460
oh I guess I guess we don't do it that

1112
00:51:54,070 --> 00:51:57,730
way

1113
00:51:54,460 --> 00:51:59,409
nevermind so I'm just gonna jump down

1114
00:51:57,730 --> 00:52:01,630
then to where we actually do the Z bias

1115
00:51:59,409 --> 00:52:03,848
program so when we're actually

1116
00:52:01,630 --> 00:52:06,730
dispatching primitives here in the

1117
00:52:03,849 --> 00:52:08,950
actual renderer loop itself right where

1118
00:52:06,730 --> 00:52:11,980
we're dispatching these primitives when

1119
00:52:08,949 --> 00:52:13,480
we get down to textured quads then this

1120
00:52:11,980 --> 00:52:15,900
is the place we're actually using the Z

1121
00:52:13,480 --> 00:52:18,849
bias program right you can see it here

1122
00:52:15,900 --> 00:52:21,760
we start setting up our textures you can

1123
00:52:18,849 --> 00:52:24,460
see us setting up our textures for like

1124
00:52:21,760 --> 00:52:26,980
the depth handle and then you can see us

1125
00:52:24,460 --> 00:52:29,740
sending down the light data here this is

1126
00:52:26,980 --> 00:52:34,000
where we need to actually specify the

1127
00:52:29,739 --> 00:52:36,368
information that we have from the the

1128
00:52:34,000 --> 00:52:38,559
game proper so we'd actually be

1129
00:52:36,369 --> 00:52:41,380
switching to a GL texture 3d at that

1130
00:52:38,559 --> 00:52:45,789
point and we'd be setting these up as

1131
00:52:41,380 --> 00:52:48,190
textures 2 3 4 5 etc right so I'm just

1132
00:52:45,789 --> 00:52:51,099
gonna make this a loop because you know

1133
00:52:48,190 --> 00:52:53,260
why not so in here I'm gonna say well

1134
00:52:51,099 --> 00:52:58,838
open drill has some amount of flight

1135
00:52:53,260 --> 00:53:04,660
data there's the the voxel index the

1136
00:52:58,838 --> 00:53:06,880
voxel index will loop over to the six

1137
00:53:04,659 --> 00:53:09,269
once we have I could do it like this

1138
00:53:06,880 --> 00:53:09,269
even

1139
00:53:10,820 --> 00:53:15,870
and then it's just gonna send down if

1140
00:53:14,010 --> 00:53:18,420
light in next two is the first one it's

1141
00:53:15,869 --> 00:53:20,670
gonna do lighting mix - I was sorry

1142
00:53:18,420 --> 00:53:22,619
texturing next to plus which voxel we're

1143
00:53:20,670 --> 00:53:24,780
trying to send down it'll send each one

1144
00:53:22,619 --> 00:53:27,690
of those down well won't send them down

1145
00:53:24,780 --> 00:53:28,440
it will bind each one of those and get

1146
00:53:27,690 --> 00:53:32,039
it ready to go

1147
00:53:28,440 --> 00:53:34,500
and then when we come back here we will

1148
00:53:32,039 --> 00:53:39,599
turn off those textures right you can

1149
00:53:34,500 --> 00:53:42,719
see that happening here and so when we

1150
00:53:39,599 --> 00:53:46,019
go to actually bind the other textures

1151
00:53:42,719 --> 00:53:47,069
we would want here - probably unbind

1152
00:53:46,019 --> 00:53:48,570
those although I don't know that we

1153
00:53:47,070 --> 00:53:50,400
really care about

1154
00:53:48,570 --> 00:53:52,289
unbinding them they can just be left

1155
00:53:50,400 --> 00:53:54,059
bound because no other people use them

1156
00:53:52,289 --> 00:53:55,889
really so I'm not sure what we want to

1157
00:53:54,059 --> 00:53:57,599
do there but I guess we'll just leave it

1158
00:53:55,889 --> 00:53:59,369
like this we send down the lighting

1159
00:53:57,599 --> 00:54:01,739
textures here so there we don't some of

1160
00:53:59,369 --> 00:54:04,170
that we bind them here we need to send

1161
00:54:01,739 --> 00:54:05,929
them down somewhere right so at some

1162
00:54:04,170 --> 00:54:08,309
point someone needs to actually like

1163
00:54:05,929 --> 00:54:10,889
describe these textures to the graphics

1164
00:54:08,309 --> 00:54:12,509
card and so somewhere up here where

1165
00:54:10,889 --> 00:54:14,059
we're sending down like our bind buffers

1166
00:54:12,510 --> 00:54:16,290
you can see that happening here right

1167
00:54:14,059 --> 00:54:19,159
where we're sending down our bind

1168
00:54:16,289 --> 00:54:23,340
buffers we need to actually submit the

1169
00:54:19,159 --> 00:54:27,719
all of the data it does strike me as odd

1170
00:54:23,340 --> 00:54:30,030
that we do this the buffer data

1171
00:54:27,719 --> 00:54:31,679
submission before we change the settings

1172
00:54:30,030 --> 00:54:36,620
seems like you would really want to do

1173
00:54:31,679 --> 00:54:36,619
that after but I guess I don't know

1174
00:54:37,579 --> 00:54:42,860
we'll leave it there for now

1175
00:54:39,389 --> 00:54:45,629
so what we need to do here is actually

1176
00:54:42,860 --> 00:54:49,620
submit these textures so here we need to

1177
00:54:45,630 --> 00:54:53,250
effectively do a GL texture 3d call

1178
00:54:49,619 --> 00:54:56,219
right and I think we want text sub image

1179
00:54:53,250 --> 00:54:59,130
3d in this case because we're not

1180
00:54:56,219 --> 00:55:03,029
changing the format of the texture we're

1181
00:54:59,130 --> 00:55:05,430
not changing the dimensions we're not

1182
00:55:03,030 --> 00:55:08,400
doing really anything to it all we're

1183
00:55:05,429 --> 00:55:11,089
trying to do is specify a new set of

1184
00:55:08,400 --> 00:55:16,190
data for each one of those handles and

1185
00:55:11,090 --> 00:55:16,190
so what I'd rather do here is just like

1186
00:55:19,349 --> 00:55:25,690
resubmit right just resubmit the data

1187
00:55:22,780 --> 00:55:30,550
that we've got so if we were to look at

1188
00:55:25,690 --> 00:55:33,789
the GL text sub image call here's an

1189
00:55:30,550 --> 00:55:36,820
example of that call we're gonna be

1190
00:55:33,789 --> 00:55:40,108
doing exactly the same thing here only

1191
00:55:36,820 --> 00:55:47,619
we're gonna be specifying an entire

1192
00:55:40,108 --> 00:55:49,569
texture rather than a slice so if I go

1193
00:55:47,619 --> 00:55:52,750
in here and say all right we've got GL

1194
00:55:49,570 --> 00:55:55,840
texture 3d is where we're submitting

1195
00:55:52,750 --> 00:55:58,179
this thing we've set our GL active

1196
00:55:55,840 --> 00:56:00,579
texture to this thing

1197
00:55:58,179 --> 00:56:03,579
we then have a MIT level of zero it will

1198
00:56:00,579 --> 00:56:06,460
always be zero we're in the upper corner

1199
00:56:03,579 --> 00:56:08,019
which is zero zero zero we then have a

1200
00:56:06,460 --> 00:56:10,690
width and a height we know what those

1201
00:56:08,019 --> 00:56:14,259
are because we've sort of pre specified

1202
00:56:10,690 --> 00:56:22,780
the dimension of our lighting voxel it's

1203
00:56:14,260 --> 00:56:27,070
actually up here yeah where is it here

1204
00:56:22,780 --> 00:56:28,630
right so we know that we're always

1205
00:56:27,070 --> 00:56:31,630
sending down something that looks like

1206
00:56:28,630 --> 00:56:33,519
that right because it's just we we're

1207
00:56:31,630 --> 00:56:38,590
never going to be doing anything

1208
00:56:33,519 --> 00:56:41,380
different I don't know if actually we

1209
00:56:38,590 --> 00:56:43,119
should be well I don't know we're gonna

1210
00:56:41,380 --> 00:56:44,410
leave it like that for now let's just do

1211
00:56:43,119 --> 00:56:47,650
that

1212
00:56:44,409 --> 00:56:51,368
so we have our voxel sent down as

1213
00:56:47,650 --> 00:56:53,639
complete 3d texture let me go back to

1214
00:56:51,369 --> 00:56:53,640
our

1215
00:57:00,639 --> 00:57:12,980
text image 3d call here we go and then

1216
00:57:11,570 --> 00:57:15,170
we just need to know what the format is

1217
00:57:12,980 --> 00:57:17,480
so we don't really need be GRA X

1218
00:57:15,170 --> 00:57:19,159
probably although we could send them

1219
00:57:17,480 --> 00:57:20,329
that since everything else is B GRA we

1220
00:57:19,159 --> 00:57:21,739
might as well stick with the format so

1221
00:57:20,329 --> 00:57:26,269
it's not like oh just the lighting is

1222
00:57:21,739 --> 00:57:27,769
the wrong way round I guess we're gonna

1223
00:57:26,269 --> 00:57:30,139
send it down as an unsigned byte and

1224
00:57:27,769 --> 00:57:32,989
we're gonna send it down as this voxel

1225
00:57:30,139 --> 00:57:34,549
information here right so now all we're

1226
00:57:32,989 --> 00:57:36,199
doing is at the head end we're sending

1227
00:57:34,550 --> 00:57:38,660
down all that data that we're binding it

1228
00:57:36,199 --> 00:57:40,279
later looking here it looks like the

1229
00:57:38,659 --> 00:57:42,469
light data is the wrong thing to say

1230
00:57:40,280 --> 00:57:44,360
there because that's probably not what

1231
00:57:42,469 --> 00:57:46,730
we called it if we look at the open jail

1232
00:57:44,360 --> 00:57:49,910
struct like I did before you can see

1233
00:57:46,730 --> 00:57:51,320
it's not that here it is right so I

1234
00:57:49,909 --> 00:57:55,699
guess we kind of want to call that the

1235
00:57:51,320 --> 00:58:07,490
light data array maybe seems to what

1236
00:57:55,699 --> 00:58:08,869
we're calling it elsewhere so we'll just

1237
00:58:07,489 --> 00:58:10,009
do that for now and we'll worry about

1238
00:58:08,869 --> 00:58:12,380
the name of that later once we actually

1239
00:58:10,010 --> 00:58:13,730
decide on this technique and make sure

1240
00:58:12,380 --> 00:58:15,769
everything actually is working for us we

1241
00:58:13,730 --> 00:58:17,179
might change it up and so we need to

1242
00:58:15,769 --> 00:58:19,159
know what's going on there

1243
00:58:17,179 --> 00:58:20,659
don't ask me what this was supposed to

1244
00:58:19,159 --> 00:58:21,079
be I have no idea what was going on

1245
00:58:20,659 --> 00:58:25,730
there

1246
00:58:21,079 --> 00:58:28,489
that's just my brain being my is a brain

1247
00:58:25,730 --> 00:58:30,469
fart straight-up brain fart obviously we

1248
00:58:28,489 --> 00:58:32,299
need texture handles this light data so

1249
00:58:30,469 --> 00:58:37,309
I'm not sure why I was thinking it's

1250
00:58:32,300 --> 00:58:39,920
this that we actually need so we need

1251
00:58:37,309 --> 00:58:41,719
six of these these are where we would

1252
00:58:39,920 --> 00:58:44,269
specify the textures initially so

1253
00:58:41,719 --> 00:58:45,649
they're just handles like this is the

1254
00:58:44,269 --> 00:58:48,199
OpenGL handle we're gonna use to talk

1255
00:58:45,650 --> 00:58:50,750
about this texture and that's what

1256
00:58:48,199 --> 00:58:54,079
actually needs to get bound and

1257
00:58:50,750 --> 00:58:56,269
submitted right so that was just brain

1258
00:58:54,079 --> 00:58:58,579
fart here we need to do that so we need

1259
00:58:56,269 --> 00:59:01,309
to specify that here we say for this

1260
00:58:58,579 --> 00:59:02,809
texture we're gonna bind and go this was

1261
00:59:01,309 --> 00:59:06,940
the wrong thing to think about we don't

1262
00:59:02,809 --> 00:59:06,940
need that right we just need this

1263
00:59:13,110 --> 00:59:18,039
right so when we do GL buying texture GL

1264
00:59:16,360 --> 00:59:19,630
texture 2d right then we come in here

1265
00:59:18,039 --> 00:59:22,090
we're gonna unbind it you know I'm

1266
00:59:19,630 --> 00:59:23,740
saying so we do a bind than we do and

1267
00:59:22,090 --> 00:59:25,269
unbind just to clear that out so I think

1268
00:59:23,739 --> 00:59:27,250
that's what the flow should have look

1269
00:59:25,269 --> 00:59:30,550
like I don't know why I did any other

1270
00:59:27,250 --> 00:59:37,150
way before I just did so now if we look

1271
00:59:30,550 --> 00:59:39,340
at a GL text image 3d you can see that

1272
00:59:37,150 --> 00:59:43,930
that getting specified here and here

1273
00:59:39,340 --> 00:59:46,269
right and really what I want to do is I

1274
00:59:43,929 --> 00:59:49,779
want to do the same thing I was doing in

1275
00:59:46,269 --> 00:59:53,409
this call I want to generate these

1276
00:59:49,780 --> 00:59:55,050
textures for our light data so in here I

1277
00:59:53,409 --> 01:00:01,210
want to do a thing where I say all right

1278
00:59:55,050 --> 01:00:03,640
let's loop over the box index here just

1279
01:00:01,210 --> 01:00:06,639
like we were doing before I want to

1280
01:00:03,639 --> 01:00:14,500
generate texture handles of that order

1281
01:00:06,639 --> 01:00:18,519
as well so light data handle and array

1282
01:00:14,500 --> 01:00:21,309
count so generate this mini handles for

1283
01:00:18,519 --> 01:00:25,809
us each time through here I want to do

1284
01:00:21,309 --> 01:00:33,789
exactly this I want to grab out the

1285
01:00:25,809 --> 01:00:36,549
light data I want to bind it and then I

1286
01:00:33,789 --> 01:00:38,529
want to specify some stuff right so

1287
01:00:36,550 --> 01:00:41,860
first of all we're not gonna do any

1288
01:00:38,530 --> 01:00:45,550
nipping on these things we are going to

1289
01:00:41,860 --> 01:00:48,570
be specifying the standard format that

1290
01:00:45,550 --> 01:00:53,140
we have been which i think is GL r g b

1291
01:00:48,570 --> 01:00:58,630
a8 right we want the width height and

1292
01:00:53,139 --> 01:01:01,049
depth width height and depth it's hard

1293
01:00:58,630 --> 01:01:06,309
to get those straight and that's our

1294
01:01:01,050 --> 01:01:12,130
light with the fox will dim so we then

1295
01:01:06,309 --> 01:01:14,639
need to specify how many it bubbles we

1296
01:01:12,130 --> 01:01:16,690
want that is I don't know what that is

1297
01:01:14,639 --> 01:01:19,299
then we want to specify the storage

1298
01:01:16,690 --> 01:01:20,530
format which is what that is and that

1299
01:01:19,300 --> 01:01:21,100
and then we're not going to write

1300
01:01:20,530 --> 01:01:24,460
anything so we're

1301
01:01:21,099 --> 01:01:30,869
just telling you look this is how much

1302
01:01:24,460 --> 01:01:30,869
space we need be ready right so

1303
01:01:36,880 --> 01:01:42,079
that's the long and short of it I'm sure

1304
01:01:40,340 --> 01:01:43,730
we've made plenty of bugs in there

1305
01:01:42,079 --> 01:01:45,980
because GPU code is always riddled with

1306
01:01:43,730 --> 01:01:51,619
bugs but that's basically what we're

1307
01:01:45,980 --> 01:01:53,929
doing create the handles tell OpenGL how

1308
01:01:51,619 --> 01:01:56,960
big they are every frame send down new

1309
01:01:53,929 --> 01:02:00,859
data and then bind during Z bias program

1310
01:01:56,960 --> 01:02:04,940
that's what we need to do for the most

1311
01:02:00,860 --> 01:02:07,460
part and it looks like we got oh yes so

1312
01:02:04,940 --> 01:02:11,240
when we're deleting these textures here

1313
01:02:07,460 --> 01:02:13,639
with the light data I'm not sure

1314
01:02:11,239 --> 01:02:22,129
so are we actually creating them in here

1315
01:02:13,639 --> 01:02:26,869
though we are not so this stuff needs to

1316
01:02:22,130 --> 01:02:29,230
go because that's not actually happening

1317
01:02:26,869 --> 01:02:29,230
anymore

1318
01:02:34,809 --> 01:02:46,539
and those I don't think get deleted in

1319
01:02:37,269 --> 01:02:52,780
here those are just permanent right yeah

1320
01:02:46,539 --> 01:02:54,699
cuz I don't think we need to do that so

1321
01:02:52,780 --> 01:02:59,320
that's all fine so all I'm gonna do now

1322
01:02:54,699 --> 01:03:00,849
is just go and see about setting up the

1323
01:02:59,320 --> 01:03:02,860
filtering on this thing that's the only

1324
01:03:00,849 --> 01:03:04,960
thing that we haven't done so if we go

1325
01:03:02,860 --> 01:03:07,360
look at our light data handle where we

1326
01:03:04,960 --> 01:03:12,780
create this thing this part here where

1327
01:03:07,360 --> 01:03:17,470
we set the texture information so I

1328
01:03:12,780 --> 01:03:20,410
don't really know what we want to set

1329
01:03:17,469 --> 01:03:24,279
here when we do min and mag we're doing

1330
01:03:20,409 --> 01:03:28,089
linear sampling I don't know to what

1331
01:03:24,280 --> 01:03:31,780
extent that applies in 3d but I assume

1332
01:03:28,090 --> 01:03:35,019
it will and I assume we can also do when

1333
01:03:31,780 --> 01:03:38,260
we do texture wrap I assume we can clamp

1334
01:03:35,019 --> 01:03:41,320
the U as well but don't quote me on that

1335
01:03:38,260 --> 01:03:43,330
right so I'll have to look that up let

1336
01:03:41,320 --> 01:03:46,000
me see what else we got here

1337
01:03:43,329 --> 01:03:49,659
so render in tree lighting transfer

1338
01:03:46,000 --> 01:03:52,570
pretty much not gonna allow I don't

1339
01:03:49,659 --> 01:03:54,359
think at the moment so I'm gonna get rid

1340
01:03:52,570 --> 01:03:56,890
of that and I'm also going to just

1341
01:03:54,360 --> 01:03:59,260
assume that no one can send that down so

1342
01:03:56,889 --> 01:04:02,019
if I look at the renderer I'm gonna get

1343
01:03:59,260 --> 01:04:03,970
rid of the lighting transfer so that's

1344
01:04:02,019 --> 01:04:05,440
just not allowed anymore and anyone who

1345
01:04:03,969 --> 01:04:10,089
was using anything like that should go

1346
01:04:05,440 --> 01:04:11,559
away so let me take a look at what this

1347
01:04:10,090 --> 01:04:12,370
is supposed to be I don't know what

1348
01:04:11,559 --> 01:04:14,079
these are called

1349
01:04:12,369 --> 01:04:18,849
I'm gonna go to Docstoc GL I'm gonna

1350
01:04:14,079 --> 01:04:21,340
start to see text per am just to see

1351
01:04:18,849 --> 01:04:24,909
what's going on in there if I look at

1352
01:04:21,340 --> 01:04:29,110
the settings you can see here's the wrap

1353
01:04:24,909 --> 01:04:31,299
so there's wrap s there's wrap t I don't

1354
01:04:29,110 --> 01:04:34,559
know what wrap R is but maybe that's the

1355
01:04:31,300 --> 01:04:34,560
thing we want STR

1356
01:04:38,809 --> 01:04:41,809
say

1357
01:04:44,960 --> 01:04:56,809
so that must be it because it's the

1358
01:04:46,489 --> 01:04:58,699
third parameter right let's say it is so

1359
01:04:56,809 --> 01:05:01,309
we're probably gonna have to define geo

1360
01:04:58,699 --> 01:05:02,899
texture wrap our ourselves right because

1361
01:05:01,309 --> 01:05:05,240
that's probably an extension that was

1362
01:05:02,900 --> 01:05:09,380
just for 3d textures so it wasn't an

1363
01:05:05,239 --> 01:05:15,709
OpenGL one so if we go look at like you

1364
01:05:09,380 --> 01:05:20,180
know heel core or what was the thing GL

1365
01:05:15,710 --> 01:05:23,539
X dot H or whatever so if we look at

1366
01:05:20,179 --> 01:05:28,068
like rap are you can see it's just this

1367
01:05:23,539 --> 01:05:30,619
thing and that should be all we actually

1368
01:05:28,068 --> 01:05:31,969
made so not a big deal right

1369
01:05:30,619 --> 01:05:34,130
probably we should have grabbed it in

1370
01:05:31,969 --> 01:05:36,649
here just wasn't thinking about having

1371
01:05:34,130 --> 01:05:39,079
to do that in fact maybe the best place

1372
01:05:36,650 --> 01:05:41,660
to put it would be down here if that's

1373
01:05:39,079 --> 01:05:44,140
where it would really be used so I think

1374
01:05:41,659 --> 01:05:44,139
that's everything

1375
01:05:45,519 --> 01:05:50,030
so now in theory we're sending those

1376
01:05:47,838 --> 01:05:51,980
down but again that's really just only a

1377
01:05:50,030 --> 01:05:53,420
theory I don't actually know what's

1378
01:05:51,980 --> 01:05:56,119
gonna happen here and we may also have

1379
01:05:53,420 --> 01:06:02,450
bugs so the first thing we're gonna want

1380
01:05:56,119 --> 01:06:06,349
to do now is go into the code and try to

1381
01:06:02,449 --> 01:06:08,779
provide like some kind of a that's so

1382
01:06:06,349 --> 01:06:10,220
you can see like little seams I wonder

1383
01:06:08,780 --> 01:06:14,030
what those are coming from are they fog

1384
01:06:10,219 --> 01:06:17,358
maybe anyway we're gonna want to go into

1385
01:06:14,030 --> 01:06:21,980
the code and try to stuff one of those

1386
01:06:17,358 --> 01:06:25,480
voxels with an actual color so we can

1387
01:06:21,980 --> 01:06:27,949
see that it's getting selected right and

1388
01:06:25,480 --> 01:06:30,500
so the easiest way for me to do that

1389
01:06:27,949 --> 01:06:34,098
would be when we go to finish off our

1390
01:06:30,500 --> 01:06:37,489
lighting so in like lighting test for

1391
01:06:34,099 --> 01:06:38,599
example oh I guess it's not laying

1392
01:06:37,489 --> 01:06:41,779
testing where it's called like and

1393
01:06:38,599 --> 01:06:44,088
lighting computation yeah so in end

1394
01:06:41,780 --> 01:06:45,980
lighting computation in here what we

1395
01:06:44,088 --> 01:06:49,338
would do is when we get down to the end

1396
01:06:45,980 --> 01:06:53,659
right we would basically say all right

1397
01:06:49,338 --> 01:06:55,369
we now want to write to this voxel so

1398
01:06:53,659 --> 01:06:57,440
let's just write something to it and it

1399
01:06:55,369 --> 01:06:58,550
won't be correct at all but we'll just

1400
01:06:57,440 --> 01:07:06,099
write something too

1401
01:06:58,550 --> 01:07:14,269
so that's hmm Jimmy that command buffer

1402
01:07:06,099 --> 01:07:17,269
which is in here so here is our command

1403
01:07:14,269 --> 01:07:18,289
Meffert we have these light index voxels

1404
01:07:17,269 --> 01:07:21,889
here so we're gonna want to do that

1405
01:07:18,289 --> 01:07:28,550
gamer into commands commands equals

1406
01:07:21,889 --> 01:07:34,099
render group might just be group what is

1407
01:07:28,550 --> 01:07:36,850
it called in this function group so we

1408
01:07:34,099 --> 01:07:40,519
might wanted to see like okay group

1409
01:07:36,849 --> 01:07:46,940
man's now we've got it commands light

1410
01:07:40,519 --> 01:07:52,219
index voxel zero or box surface West or

1411
01:07:46,940 --> 01:07:56,650
whatever it was box UNIX West so what we

1412
01:07:52,219 --> 01:07:56,649
believe to be the westward facing voxel

1413
01:07:59,139 --> 01:08:05,869
like so I want to go through and I want

1414
01:08:02,719 --> 01:08:10,399
to write to that thing and I could do

1415
01:08:05,869 --> 01:08:14,119
this actually by being a little bit more

1416
01:08:10,400 --> 01:08:15,349
expansive so maybe we'll actually do it

1417
01:08:14,119 --> 01:08:20,838
a little bit differently the point being

1418
01:08:15,349 --> 01:08:24,519
maybe we'll do this I'm gonna have like

1419
01:08:20,838 --> 01:08:24,519
an X look up here

1420
01:08:26,760 --> 01:08:38,119
what was this call again oh you know

1421
01:08:34,050 --> 01:08:38,119
what it's actually right here

1422
01:08:41,869 --> 01:08:48,119
so if we look at the light index voxel

1423
01:08:45,510 --> 01:08:51,600
dim we then we know exactly what we're

1424
01:08:48,119 --> 01:09:00,449
talking about here so if we step through

1425
01:08:51,600 --> 01:09:03,510
this like so we know that now we should

1426
01:09:00,449 --> 01:09:11,609
be able to produce this piece of

1427
01:09:03,510 --> 01:09:13,110
information there you go

1428
01:09:11,609 --> 01:09:14,849
so in theory this would look what were

1429
01:09:13,109 --> 01:09:16,409
the entire voxel and then what we could

1430
01:09:14,850 --> 01:09:18,030
do is we can write something in there to

1431
01:09:16,409 --> 01:09:22,309
one of the channels whatever channel we

1432
01:09:18,029 --> 01:09:22,309
want so maybe we do something like this

1433
01:09:24,710 --> 01:09:34,859
play the next voxel box index west and

1434
01:09:28,739 --> 01:09:37,649
then we further address it as Z times cz

1435
01:09:34,859 --> 01:09:40,859
plus well actually guess we can do this

1436
01:09:37,649 --> 01:09:44,819
as sort of a stack maybe I don't know

1437
01:09:40,859 --> 01:09:49,920
how we want to do this exactly it's a

1438
01:09:44,819 --> 01:09:55,159
good question mmm well I guess we would

1439
01:09:49,920 --> 01:09:55,159
do it like this so

1440
01:10:06,560 --> 01:10:13,220
I guess I'll just write it like that

1441
01:10:10,760 --> 01:10:15,980
so we'll just write it out longhand

1442
01:10:13,220 --> 01:10:19,400
that's the address of this particular

1443
01:10:15,979 --> 01:10:22,459
cell in the voxel and then I'm just

1444
01:10:19,399 --> 01:10:27,789
gonna sign it some color value so I'm

1445
01:10:22,460 --> 01:10:31,350
gonna assign it a color value let's say

1446
01:10:27,789 --> 01:10:31,350
[Music]

1447
01:10:36,670 --> 01:10:47,210
maybe something looks like that so that

1448
01:10:42,289 --> 01:10:58,609
would be red with a you know medium

1449
01:10:47,210 --> 01:11:00,050
brightness red I guess okay and now we

1450
01:10:58,609 --> 01:11:01,549
can do I mean we'll take a look at what

1451
01:11:00,050 --> 01:11:04,039
this outputs but now we can do is we can

1452
01:11:01,550 --> 01:11:05,840
actually go and start using render dock

1453
01:11:04,039 --> 01:11:08,750
or you know something else too well

1454
01:11:05,840 --> 01:11:11,440
alright so that just worked right so now

1455
01:11:08,750 --> 01:11:14,149
we know we're stuffing that voxel and

1456
01:11:11,439 --> 01:11:22,039
what I'm interested now in figuring out

1457
01:11:14,149 --> 01:11:24,559
is when we're looking up this voxel to

1458
01:11:22,039 --> 01:11:27,769
what extent is it actually spatially

1459
01:11:24,560 --> 01:11:30,470
querying so what I want to do is I want

1460
01:11:27,770 --> 01:11:33,410
to then say all right let's suppose that

1461
01:11:30,470 --> 01:11:36,860
we wanted to introduce some kind of an X

1462
01:11:33,409 --> 01:11:42,500
striping so I want to go ahead and say

1463
01:11:36,859 --> 01:11:47,239
look let's say X mod 2 so every other

1464
01:11:42,500 --> 01:11:49,399
cell I want to do a different color so

1465
01:11:47,239 --> 01:11:53,199
I'm going to actually do something like

1466
01:11:49,399 --> 01:11:57,469
this where we do red blue red blue in

1467
01:11:53,199 --> 01:11:59,059
along X stripes right in sufficient disk

1468
01:11:57,470 --> 01:12:00,890
space yeah right

1469
01:11:59,060 --> 01:12:05,570
how about you already had the file

1470
01:12:00,890 --> 01:12:08,300
locked anyway so now I want to write

1471
01:12:05,569 --> 01:12:11,289
that out to the lighting buffer and see

1472
01:12:08,300 --> 01:12:13,369
if I see anything right I should now see

1473
01:12:11,289 --> 01:12:16,010
different colors coming through and

1474
01:12:13,369 --> 01:12:18,289
we'll see what happens but I don't right

1475
01:12:16,010 --> 01:12:19,829
so this is pretty important because this

1476
01:12:18,289 --> 01:12:22,680
means like something

1477
01:12:19,829 --> 01:12:24,689
busted and I'm saying as this steps

1478
01:12:22,680 --> 01:12:28,050
through I should be doing like this for

1479
01:12:24,689 --> 01:12:30,899
this on alternating indexes of the voxel

1480
01:12:28,050 --> 01:12:34,050
as far as I can tell anyway right so I

1481
01:12:30,899 --> 01:12:37,739
shouldn't have only seen that one I

1482
01:12:34,050 --> 01:12:40,170
should have seen a alternative each of

1483
01:12:37,739 --> 01:12:41,909
these and the question is why well the

1484
01:12:40,170 --> 01:12:44,010
first thing comes to mind is I think we

1485
01:12:41,909 --> 01:12:46,590
forgot to ever actually send down the

1486
01:12:44,010 --> 01:12:49,560
constants so probably it's looking into

1487
01:12:46,590 --> 01:12:52,590
only one cell of the voxel what I mean

1488
01:12:49,560 --> 01:12:55,050
well remember I said in order to map

1489
01:12:52,590 --> 01:12:58,289
this thing into the voxel we need to

1490
01:12:55,050 --> 01:13:01,320
angrily set up the voxel right and so I

1491
01:12:58,289 --> 01:13:04,649
defined these two things voxel min

1492
01:13:01,319 --> 01:13:06,989
corner and voxel in total dim but we

1493
01:13:04,649 --> 01:13:11,939
never actually specified what they were

1494
01:13:06,989 --> 01:13:13,619
so in here where the camera information

1495
01:13:11,939 --> 01:13:16,979
and stuff is getting sent down along

1496
01:13:13,619 --> 01:13:20,909
with everything else those need to be

1497
01:13:16,979 --> 01:13:23,869
there so we need to sort of query these

1498
01:13:20,909 --> 01:13:26,970
two constants that are gonna come down

1499
01:13:23,869 --> 01:13:30,510
and then we need to actually say what

1500
01:13:26,970 --> 01:13:33,119
they are once we get there so in here we

1501
01:13:30,510 --> 01:13:35,880
need like voxel min corner to be equal

1502
01:13:33,119 --> 01:13:38,699
to something and we need Vox in total

1503
01:13:35,880 --> 01:13:40,859
dim to be equal to something and we need

1504
01:13:38,699 --> 01:13:51,869
a way of specifying what these are so in

1505
01:13:40,859 --> 01:13:56,159
here we would say voxel mid-corner voxel

1506
01:13:51,869 --> 01:13:58,619
in turtle dam and then in the actual

1507
01:13:56,159 --> 01:14:01,470
definition of the Z bias program which

1508
01:13:58,619 --> 01:14:04,439
is this thing right here we need to

1509
01:14:01,470 --> 01:14:05,250
remember where those are so here are

1510
01:14:04,439 --> 01:14:08,239
those two things

1511
01:14:05,250 --> 01:14:08,239
oops that's

1512
01:14:12,779 --> 01:14:18,219
and once we have those now we can

1513
01:14:16,000 --> 01:14:21,960
actually specify them we need some way

1514
01:14:18,220 --> 01:14:25,750
of actually getting them which you know

1515
01:14:21,960 --> 01:14:27,149
has to happen as part of the render

1516
01:14:25,750 --> 01:14:29,710
pipeline but once we know what they are

1517
01:14:27,149 --> 01:14:32,409
the rest of it's pretty simple because

1518
01:14:29,710 --> 01:14:34,659
you can see here when we go to do the Z

1519
01:14:32,409 --> 01:14:37,359
bias program we already had to do a

1520
01:14:34,659 --> 01:14:40,960
bunch of this stuff anyway we have to

1521
01:14:37,359 --> 01:14:43,479
send down those constants and so that's

1522
01:14:40,960 --> 01:14:47,230
actually something we needed to do when

1523
01:14:43,479 --> 01:14:49,409
we specify these constants is anyone's

1524
01:14:47,229 --> 01:14:49,409
guess

1525
01:14:52,529 --> 01:15:02,949
looks like here so when we specify the

1526
01:15:01,180 --> 01:15:06,210
constants here you can see us grabbing

1527
01:15:02,949 --> 01:15:13,479
this stuff out of the prog like where we

1528
01:15:06,210 --> 01:15:15,819
asked that stuff before and so we need

1529
01:15:13,479 --> 01:15:18,250
to you know get this information from

1530
01:15:15,819 --> 01:15:20,079
somewhere right and it's going to have

1531
01:15:18,250 --> 01:15:23,039
to come down as part of the use program

1532
01:15:20,079 --> 01:15:23,039
begin I believe

1533
01:15:29,960 --> 01:15:35,550
like that so in order to make this work

1534
01:15:33,420 --> 01:15:37,500
this will have to actually get that

1535
01:15:35,550 --> 01:15:39,239
information from somewhere the alpha

1536
01:15:37,500 --> 01:15:40,439
threshold that's getting sent down I

1537
01:15:39,239 --> 01:15:42,090
don't know where that actually comes

1538
01:15:40,439 --> 01:15:43,619
from looks like it's oh it's just

1539
01:15:42,090 --> 01:15:46,350
determining whether it's peeling or not

1540
01:15:43,619 --> 01:15:48,750
right and so what we really want to do

1541
01:15:46,350 --> 01:15:50,660
here is say well the the actual drawing

1542
01:15:48,750 --> 01:15:52,680
primitive itself this render setup

1543
01:15:50,659 --> 01:15:53,880
probably is the thing that has to have

1544
01:15:52,680 --> 01:15:56,039
that because it's gonna have to be

1545
01:15:53,880 --> 01:15:57,480
specified by the game we don't know

1546
01:15:56,039 --> 01:15:59,310
where it wants the lighting applied we

1547
01:15:57,479 --> 01:16:01,289
have no idea so we kinda just have to

1548
01:15:59,310 --> 01:16:03,750
trust that it will tell us how big it

1549
01:16:01,289 --> 01:16:06,269
wants the lighting sampling to be at any

1550
01:16:03,750 --> 01:16:09,060
given time right so we're gonna have to

1551
01:16:06,270 --> 01:16:12,090
send down the voxel min corner and the

1552
01:16:09,060 --> 01:16:14,340
voxel in total Tim that's gonna have to

1553
01:16:12,090 --> 01:16:20,670
be like something that just gets told to

1554
01:16:14,340 --> 01:16:29,340
us by the game and the render setup in

1555
01:16:20,670 --> 01:16:31,260
here for voxel lookups it's just gonna

1556
01:16:29,340 --> 01:16:34,050
have to it's gonna have to set up what

1557
01:16:31,260 --> 01:16:35,909
those are right so we need to look and

1558
01:16:34,050 --> 01:16:37,619
see like where is the game setting up

1559
01:16:35,909 --> 01:16:40,289
this sort of stuff you know where is it

1560
01:16:37,619 --> 01:16:43,260
actually specifying this information you

1561
01:16:40,289 --> 01:16:45,630
can see in here when the game does this

1562
01:16:43,260 --> 01:16:47,489
like under set camera transform it puts

1563
01:16:45,630 --> 01:16:49,079
a bunch of this stuff in there what

1564
01:16:47,489 --> 01:16:50,849
we're gonna need to do is something that

1565
01:16:49,079 --> 01:16:52,140
actually like modifies that piece of

1566
01:16:50,850 --> 01:16:56,329
information I think to a certain extent

1567
01:16:52,140 --> 01:16:56,329
we're gonna have to like write that up

1568
01:17:01,640 --> 01:17:10,050
so in there where you see that push

1569
01:17:04,079 --> 01:17:13,199
setup call right you can see it doing

1570
01:17:10,050 --> 01:17:15,570
this nonsense here when we're doing that

1571
01:17:13,199 --> 01:17:21,569
push setup call you can see it writing

1572
01:17:15,569 --> 01:17:26,039
it to last set up right and I want to

1573
01:17:21,569 --> 01:17:29,449
say that you know yeah like probably we

1574
01:17:26,039 --> 01:17:29,449
just have to fatten this up

1575
01:17:46,639 --> 01:17:53,189
what you don't love I don't love how fat

1576
01:17:50,368 --> 01:17:55,588
this has become don't get me wrong and

1577
01:17:53,189 --> 01:17:57,869
we probably should fix it but at the

1578
01:17:55,588 --> 01:17:59,538
moment we're not going to because that's

1579
01:17:57,868 --> 01:18:15,028
not we're doing right now

1580
01:17:59,538 --> 01:18:16,828
some day alright so in here I just got

1581
01:18:15,029 --> 01:18:18,239
to set these I shouldn't have done one

1582
01:18:16,828 --> 01:18:19,978
it's not a it's not a floating-point

1583
01:18:18,238 --> 01:18:22,318
constant it's actually a vector constant

1584
01:18:19,979 --> 01:18:29,189
so that should be fine

1585
01:18:22,319 --> 01:18:33,689
this right here is just specifying one

1586
01:18:29,189 --> 01:18:35,309
of each of these um I guess why did I

1587
01:18:33,689 --> 01:18:37,079
pass that I don't know why I passed that

1588
01:18:35,309 --> 01:18:46,469
these are actually in the setup that was

1589
01:18:37,078 --> 01:18:50,969
just um that looks like that connector I

1590
01:18:46,469 --> 01:18:51,359
write 3 2 GL float right sorry about

1591
01:18:50,969 --> 01:18:54,689
that

1592
01:18:51,359 --> 01:18:56,459
there we go and then this use this

1593
01:18:54,689 --> 01:19:03,029
doesn't have to actually send that there

1594
01:18:56,458 --> 01:19:07,559
we go so I think that's all good no

1595
01:19:03,029 --> 01:19:10,439
worries I and so now I believe we have

1596
01:19:07,559 --> 01:19:13,588
the ability to specify this information

1597
01:19:10,439 --> 01:19:15,389
if I run the game again as it is

1598
01:19:13,588 --> 01:19:17,189
I really shouldn't see anything

1599
01:19:15,389 --> 01:19:19,168
different because they're still getting

1600
01:19:17,189 --> 01:19:21,149
set to 0 since even though we're

1601
01:19:19,168 --> 01:19:23,548
specifying them now nobody's actually

1602
01:19:21,149 --> 01:19:26,849
passing anything to that setup routine

1603
01:19:23,548 --> 01:19:29,939
so I think it's probably just gonna be

1604
01:19:26,849 --> 01:19:31,199
exactly the same as it was and there

1605
01:19:29,939 --> 01:19:33,059
really isn't gonna be anything special

1606
01:19:31,198 --> 01:19:37,018
going on there so I think that's all

1607
01:19:33,059 --> 01:19:41,159
just nonsense and doesn't matter but if

1608
01:19:37,019 --> 01:19:44,340
I actually go now specify that part

1609
01:19:41,158 --> 01:19:49,179
stuff as part of the camera transform

1610
01:19:44,340 --> 01:19:52,300
which is here I'm guessing that if I

1611
01:19:49,179 --> 01:19:55,210
start to pass something down for it's

1612
01:19:52,300 --> 01:19:58,570
not the not the debug camera but for the

1613
01:19:55,210 --> 01:20:00,960
regular camera here if I go to Pat well

1614
01:19:58,569 --> 01:20:03,609
I guess I probably want both obviously

1615
01:20:00,960 --> 01:20:06,130
but if I go ahead and specify what the

1616
01:20:03,609 --> 01:20:09,488
voxel dimension is at that point I

1617
01:20:06,130 --> 01:20:12,699
should be able to make this now start to

1618
01:20:09,488 --> 01:20:14,589
bound the region during that set camera

1619
01:20:12,698 --> 01:20:18,428
trance when we need to know where the

1620
01:20:14,590 --> 01:20:21,760
lighting voxel is that creates a little

1621
01:20:18,429 --> 01:20:23,288
bit of an issue right because that set

1622
01:20:21,760 --> 01:20:26,199
camera transform is sort of happening

1623
01:20:23,288 --> 01:20:29,139
before anyone is actually figured out

1624
01:20:26,198 --> 01:20:31,089
where the lighting bounds are and if you

1625
01:20:29,139 --> 01:20:33,400
look at the world camera rekt well the

1626
01:20:31,090 --> 01:20:36,369
world camera rect happens like here and

1627
01:20:33,399 --> 01:20:38,828
so we have kind of a nasty like

1628
01:20:36,368 --> 01:20:43,299
pre-computation problem where we're like

1629
01:20:38,828 --> 01:20:45,130
crap we're asking this thing that look

1630
01:20:43,300 --> 01:20:53,079
we need to set the voxels information

1631
01:20:45,130 --> 01:20:55,179
after we've already finished we rely on

1632
01:20:53,078 --> 01:20:56,228
the camera setting call to tell us where

1633
01:20:55,179 --> 01:21:00,998
the lighting should be in the first

1634
01:20:56,229 --> 01:21:03,940
place is the problem right and so we do

1635
01:21:00,998 --> 01:21:07,538
need that to be fixed and I'm not sure

1636
01:21:03,939 --> 01:21:08,828
exactly how to fix that but I guess that

1637
01:21:07,538 --> 01:21:09,819
means we will have to fix the thing I

1638
01:21:08,828 --> 01:21:10,808
was saying we don't want to fix it right

1639
01:21:09,819 --> 01:21:13,179
now if you're doing something else I

1640
01:21:10,809 --> 01:21:15,429
guess now we're doing that because this

1641
01:21:13,179 --> 01:21:17,618
is exactly the problem right what we

1642
01:21:15,429 --> 01:21:21,190
want to be able to do is right here when

1643
01:21:17,618 --> 01:21:24,038
we do begin letting computation we want

1644
01:21:21,189 --> 01:21:26,618
that to pretty much use the light bounds

1645
01:21:24,038 --> 01:21:32,819
to set up the render target right so we

1646
01:21:26,618 --> 01:21:35,859
want to do like set light bounds on the

1647
01:21:32,819 --> 01:21:38,049
current render setting and we pass those

1648
01:21:35,859 --> 01:21:41,308
two things down whatever the min was so

1649
01:21:38,050 --> 01:21:45,969
it would basically be like light bounds

1650
01:21:41,309 --> 01:21:50,400
oops light bounds min and then we would

1651
01:21:45,969 --> 01:21:50,399
take whatever this dimension was

1652
01:21:56,869 --> 01:22:03,590
and then we'd want to do like something

1653
01:21:59,640 --> 01:22:03,590
that inverts that so then we would do

1654
01:22:06,739 --> 01:22:24,149
something like that I don't know if

1655
01:22:08,939 --> 01:22:25,889
we've got that so that's what we would

1656
01:22:24,149 --> 01:22:27,719
like to do we'd like to be able to call

1657
01:22:25,890 --> 01:22:30,960
set light bands and have that just work

1658
01:22:27,720 --> 01:22:32,369
and then we would like that call that I

1659
01:22:30,960 --> 01:22:35,489
made there that was like the render

1660
01:22:32,369 --> 01:22:37,229
group called the set camera transform I

1661
01:22:35,489 --> 01:22:42,329
don't really want that right what I want

1662
01:22:37,229 --> 01:22:50,369
is something here that sets up the light

1663
01:22:42,329 --> 01:22:52,470
bounce separately so you'd pass in just

1664
01:22:50,369 --> 01:22:56,489
these two when you want to and that

1665
01:22:52,470 --> 01:23:07,440
would sort of like do it as a separate

1666
01:22:56,489 --> 01:23:14,699
part of the process so in here do we

1667
01:23:07,439 --> 01:23:17,250
ever actually push this on in here we

1668
01:23:14,699 --> 01:23:20,159
want to basically like change what the

1669
01:23:17,250 --> 01:23:26,970
setup is for people who are currently

1670
01:23:20,159 --> 01:23:28,859
using that setup you can see in here you

1671
01:23:26,970 --> 01:23:31,320
know people do that push setup call and

1672
01:23:28,859 --> 01:23:34,799
I guess I don't know exactly how they

1673
01:23:31,319 --> 01:23:37,789
get that information back out I haven't

1674
01:23:34,800 --> 01:23:40,289
really you know I don't recall how we

1675
01:23:37,789 --> 01:23:44,310
meant for that to work

1676
01:23:40,289 --> 01:23:47,340
but like you know here's the setup

1677
01:23:44,310 --> 01:23:50,690
that's actually being used in group last

1678
01:23:47,340 --> 01:23:50,690
setup right

1679
01:23:52,409 --> 01:24:00,689
I'm assuming that it's okay to just call

1680
01:23:56,970 --> 01:24:04,500
set light bounds at that point what

1681
01:24:00,689 --> 01:24:10,369
happens during get current quads does

1682
01:24:04,500 --> 01:24:10,369
the setup get recorded at that point yes

1683
01:24:10,699 --> 01:24:16,829
so I think it's really pretty easy now

1684
01:24:14,880 --> 01:24:38,340
that I think about it I guess all you

1685
01:24:16,829 --> 01:24:40,439
really do is this I think that's it so

1686
01:24:38,340 --> 01:24:42,180
now in theory we have the ability to set

1687
01:24:40,439 --> 01:24:45,239
the lighting bounds to something and now

1688
01:24:42,180 --> 01:24:48,180
we just have to debug that process it

1689
01:24:45,239 --> 01:24:51,059
looks like we got lucky that's exactly

1690
01:24:48,180 --> 01:24:53,820
what I wanted to see happen first with

1691
01:24:51,060 --> 01:24:59,060
the lighting and so you can kind of see

1692
01:24:53,819 --> 01:25:04,559
like somehow this went well for us and

1693
01:24:59,060 --> 01:25:06,330
you know yeah I mean that's that's rare

1694
01:25:04,560 --> 01:25:07,800
that's not how GPU partner usually works

1695
01:25:06,329 --> 01:25:13,890
so so that wouldn't wait better than I

1696
01:25:07,800 --> 01:25:16,380
expected if we're now gonna try and

1697
01:25:13,890 --> 01:25:18,650
verify that the lighting is

1698
01:25:16,380 --> 01:25:22,440
interpolating properly across all of our

1699
01:25:18,649 --> 01:25:25,199
various dimensions the other thing I do

1700
01:25:22,439 --> 01:25:26,699
is I take that west when we're

1701
01:25:25,199 --> 01:25:29,039
specifying that voxel in the end

1702
01:25:26,699 --> 01:25:36,059
lighting so end lighting computation

1703
01:25:29,039 --> 01:25:40,409
here if I was to go ahead and stripe all

1704
01:25:36,060 --> 01:25:43,590
three dimensions so so let's say we go

1705
01:25:40,409 --> 01:25:47,670
down here and we look at where is that

1706
01:25:43,590 --> 01:25:51,960
there it is if I was to sort of build

1707
01:25:47,670 --> 01:25:54,840
this up as a progressive value so this

1708
01:25:51,960 --> 01:25:59,810
is the light info and I say like okay

1709
01:25:54,840 --> 01:25:59,810
it's that you know

1710
01:25:59,880 --> 01:26:06,569
if I wanted to build it up incrementally

1711
01:26:01,738 --> 01:26:14,809
what I could do is say you know if xmod

1712
01:26:06,569 --> 01:26:14,809
to light info or equals something right

1713
01:26:18,859 --> 01:26:26,670
Y mod to Z mod - and then here we just

1714
01:26:22,349 --> 01:26:29,069
say like light info or something right

1715
01:26:26,670 --> 01:26:33,719
and so then when I can do say all right

1716
01:26:29,069 --> 01:26:36,630
let's stripe you know each of these will

1717
01:26:33,719 --> 01:26:39,060
say that the red stripe green stripe and

1718
01:26:36,630 --> 01:26:42,270
blue stripe corresponds to stripes in X

1719
01:26:39,060 --> 01:26:45,199
Y and C so we now should see like those

1720
01:26:42,270 --> 01:26:49,590
stripes intersecting each other and

1721
01:26:45,198 --> 01:26:53,549
providing like an actual different Z X&amp;Y

1722
01:26:49,590 --> 01:26:56,099
striping layer right and so if we

1723
01:26:53,550 --> 01:26:58,739
actually look now at what we get and we

1724
01:26:56,099 --> 01:27:00,989
can ask ourselves the question does this

1725
01:26:58,738 --> 01:27:03,689
actually make any sense what we're

1726
01:27:00,988 --> 01:27:06,299
seeing so if you look on here you can

1727
01:27:03,689 --> 01:27:10,649
see that effectively what it looks like

1728
01:27:06,300 --> 01:27:15,840
we have anyway if you can see like a red

1729
01:27:10,649 --> 01:27:19,618
stripe well actually what dude doesn't

1730
01:27:15,840 --> 01:27:22,050
look like it you can see I said I did

1731
01:27:19,618 --> 01:27:26,729
this backwards that's blue this is B GRA

1732
01:27:22,050 --> 01:27:32,000
sorry forgot where B GRA everywhere I'm

1733
01:27:26,729 --> 01:27:32,000
RGB a everywhere on my code base oh yeah

1734
01:27:34,880 --> 01:27:38,060
all right

1735
01:27:44,670 --> 01:27:48,550
so now it's a little more sensible

1736
01:27:46,719 --> 01:27:51,368
because it's what I said instead of what

1737
01:27:48,550 --> 01:27:53,770
I typed so you can see the red stripes

1738
01:27:51,368 --> 01:27:56,558
going in X you can see the green stripes

1739
01:27:53,770 --> 01:28:00,099
going in Y and the only question is can

1740
01:27:56,559 --> 01:28:03,309
we see any blue stripes right and so if

1741
01:28:00,099 --> 01:28:05,289
I look from the side here what you can

1742
01:28:03,309 --> 01:28:08,020
see is there are some blue stripes but

1743
01:28:05,289 --> 01:28:12,479
I'll be honest they don't really seem to

1744
01:28:08,020 --> 01:28:12,480
make good sense to me right like I don't

1745
01:28:16,618 --> 01:28:21,069
like the green and red stripes seem

1746
01:28:19,029 --> 01:28:23,139
pretty clear but if I look from the side

1747
01:28:21,069 --> 01:28:26,198
here and I look at the blue strip oh

1748
01:28:23,139 --> 01:28:29,828
well that there it looks right the blue

1749
01:28:26,198 --> 01:28:32,589
stripes do seem to be stacked which is

1750
01:28:29,828 --> 01:28:33,819
what I would expect they just don't seem

1751
01:28:32,590 --> 01:28:34,869
to look like it here but I guess that's

1752
01:28:33,819 --> 01:28:36,158
what I was gonna say interpreting it it

1753
01:28:34,868 --> 01:28:39,069
does kind of look like it now that I

1754
01:28:36,158 --> 01:28:43,868
look at it okay um so I think our

1755
01:28:39,069 --> 01:28:46,500
lighting is pretty good now in terms of

1756
01:28:43,868 --> 01:28:52,029
the lookups like that's looking up

1757
01:28:46,500 --> 01:28:53,679
correctly far as I can tell and the only

1758
01:28:52,029 --> 01:28:56,649
thing that's a little strange is the

1759
01:28:53,679 --> 01:28:59,859
region that is getting lit that's a

1760
01:28:56,649 --> 01:29:01,179
little bit strange to me and the reason

1761
01:28:59,859 --> 01:29:06,460
that it's a little bit strange is if I

1762
01:29:01,179 --> 01:29:10,750
just look at the region it looks to me

1763
01:29:06,460 --> 01:29:12,340
like the region is here which well maybe

1764
01:29:10,750 --> 01:29:15,849
that's correct

1765
01:29:12,340 --> 01:29:17,650
I don't know it's hard to say I would

1766
01:29:15,849 --> 01:29:21,420
like to maybe go a little further I'm

1767
01:29:17,649 --> 01:29:26,469
gonna go ahead and you know I want to do

1768
01:29:21,420 --> 01:29:28,920
I'm gonna go ahead and go into Elise

1769
01:29:26,469 --> 01:29:28,920
mode here

1770
01:29:38,880 --> 01:29:43,980
so here's me hopping along and you can

1771
01:29:42,180 --> 01:29:45,030
see that the lighting volume is kind of

1772
01:29:43,979 --> 01:29:47,279
moving through the space we're gonna

1773
01:29:45,029 --> 01:29:49,469
want to not have it do that by the way

1774
01:29:47,279 --> 01:29:51,869
we're gonna want to move it in any fixed

1775
01:29:49,470 --> 01:29:53,699
unit fixed voxel units so that we don't

1776
01:29:51,869 --> 01:29:56,069
see any popping but that's kind of a

1777
01:29:53,699 --> 01:29:57,510
separate issue anyway I'm gonna go down

1778
01:29:56,069 --> 01:30:00,420
here to someplace that has a little more

1779
01:29:57,510 --> 01:30:02,579
depth to it right so I can pull back and

1780
01:30:00,420 --> 01:30:06,180
just see what that actual region looks

1781
01:30:02,579 --> 01:30:10,649
like so yeah I mean it looks alright you

1782
01:30:06,180 --> 01:30:12,150
know so I think we're getting I think

1783
01:30:10,649 --> 01:30:14,429
we're in usable territory now right

1784
01:30:12,149 --> 01:30:16,769
where we can start we can work with this

1785
01:30:14,430 --> 01:30:18,450
right and so I think that's a great

1786
01:30:16,770 --> 01:30:20,700
place to end for today that's where we

1787
01:30:18,449 --> 01:30:24,720
want to be we're doing our voxel lookups

1788
01:30:20,699 --> 01:30:29,460
now and I don't know to what extent our

1789
01:30:24,720 --> 01:30:31,199
speed has been impacted that's a little

1790
01:30:29,460 --> 01:30:32,789
bit tougher to say what I might want to

1791
01:30:31,199 --> 01:30:36,059
do here is say alright let's let's see

1792
01:30:32,789 --> 01:30:39,119
what insight says for our speed so I'm

1793
01:30:36,060 --> 01:30:47,580
just gonna launch and it's like real

1794
01:30:39,119 --> 01:30:49,380
quick that looks fine and I'm gonna go

1795
01:30:47,579 --> 01:30:52,760
ahead and just launch the frame profile

1796
01:30:49,380 --> 01:30:52,760
over here see what it says

1797
01:30:53,658 --> 01:30:59,869
so if you look at the actual speed it's

1798
01:30:57,289 --> 01:31:00,698
reporting there it's 43 frames per

1799
01:30:59,869 --> 01:31:04,819
second

1800
01:31:00,698 --> 01:31:06,948
that's like significantly worse than we

1801
01:31:04,819 --> 01:31:10,039
had before right we were like way faster

1802
01:31:06,948 --> 01:31:11,988
than that previously and so I don't know

1803
01:31:10,039 --> 01:31:15,460
what to make of that but if you know I'm

1804
01:31:11,988 --> 01:31:18,769
I'm scared I'm a little bit scared of

1805
01:31:15,460 --> 01:31:21,679
what that entails if we really are

1806
01:31:18,770 --> 01:31:23,510
getting that slow I'm a frame rate

1807
01:31:21,679 --> 01:31:28,158
because I don't know what's causing it

1808
01:31:23,510 --> 01:31:30,730
necessarily we could look in fact let's

1809
01:31:28,158 --> 01:31:30,729
take a quick look

1810
01:31:37,479 --> 01:31:43,359
and so looking now at what we're seeing

1811
01:31:39,760 --> 01:31:45,190
here you can see this is this draw call

1812
01:31:43,359 --> 01:31:48,789
here is taking quite a bit at a time

1813
01:31:45,189 --> 01:31:54,578
there although you know honestly looking

1814
01:31:48,789 --> 01:31:58,238
at this I'm not sure I understand what

1815
01:31:54,578 --> 01:32:00,158
I'm actually seeing because I guess this

1816
01:31:58,238 --> 01:32:08,828
would imply that we're cpu-bound though

1817
01:32:00,158 --> 01:32:11,710
maybe because just just looking at it

1818
01:32:08,828 --> 01:32:18,250
doesn't look like it thinks we're taking

1819
01:32:11,710 --> 01:32:24,069
anywhere near what would be like 30

1820
01:32:18,250 --> 01:32:28,559
milliseconds no 28 milliseconds it's not

1821
01:32:24,069 --> 01:32:32,649
reporting anything close to that right

1822
01:32:28,559 --> 01:32:34,960
so this number is drastically higher and

1823
01:32:32,649 --> 01:32:36,969
so I don't know if that just means we're

1824
01:32:34,960 --> 01:32:38,828
totally cpu-bound at this point which

1825
01:32:36,969 --> 01:32:40,210
maybe we are and that's totally great

1826
01:32:38,828 --> 01:32:45,429
because if that's true you know

1827
01:32:40,210 --> 01:32:47,679
obviously we can try and fix that um let

1828
01:32:45,429 --> 01:32:48,809
me real quick just play with one thing

1829
01:32:47,679 --> 01:32:53,289
and see if that's true

1830
01:32:48,809 --> 01:32:58,170
so if we go in here and say you don't

1831
01:32:53,289 --> 01:32:58,170
need to do this anymore how bad is it

1832
01:33:10,069 --> 01:33:13,988
doesn't look like it really changed much

1833
01:33:16,579 --> 01:33:20,840
so I'm not really sure we're gonna have

1834
01:33:18,350 --> 01:33:22,460
to do some inspection we have to like re

1835
01:33:20,840 --> 01:33:24,800
enable our profiling as well and stuff

1836
01:33:22,460 --> 01:33:26,539
like that so we'll see but that'll be

1837
01:33:24,800 --> 01:33:30,170
your work for tomorrow I'm totally fine

1838
01:33:26,539 --> 01:33:34,460
with where we're at right now let me go

1839
01:33:30,170 --> 01:33:43,789
ahead and terminate here and we'll start

1840
01:33:34,460 --> 01:33:51,619
we can start to look at that later all

1841
01:33:43,789 --> 01:33:54,880
right let's go to a brief Q&amp;A anyone

1842
01:33:51,619 --> 01:33:54,880
have any questions on that

1843
01:34:34,840 --> 01:34:37,949
[Music]

1844
01:34:40,930 --> 01:34:45,319
[Music]

1845
01:34:50,939 --> 01:34:53,899
silence

1846
01:34:58,948 --> 01:35:04,109
all right so I guess no questions sounds

1847
01:35:01,170 --> 01:35:09,140
like if there's no questions we can wrap

1848
01:35:04,109 --> 01:35:09,139
it up which seems good

1849
01:35:19,140 --> 01:35:28,119
all right there are does not appear to

1850
01:35:22,329 --> 01:35:33,340
be any questions so I think I will go

1851
01:35:28,119 --> 01:35:34,300
ahead and wrap it up oh no there was one

1852
01:35:33,340 --> 01:35:35,560
in the priests we're talking about

1853
01:35:34,300 --> 01:35:37,000
creating command buffers near through

1854
01:35:35,560 --> 01:35:38,500
crabs they probably would this be like a

1855
01:35:37,000 --> 01:35:40,029
buffer you were dynamically assemble

1856
01:35:38,500 --> 01:35:41,439
GPIO machine code into or is it

1857
01:35:40,029 --> 01:35:43,630
something that the driver would need to

1858
01:35:41,439 --> 01:35:50,769
translate for you to the GPU machine

1859
01:35:43,630 --> 01:35:55,900
code so my opinion on that is it should

1860
01:35:50,770 --> 01:35:57,280
be the answer is yes my opinion on that

1861
01:35:55,899 --> 01:36:00,789
is what should have happened with for

1862
01:35:57,279 --> 01:36:02,619
example Vulcan is rather than making it

1863
01:36:00,789 --> 01:36:05,519
all be ridiculous crap we have to call

1864
01:36:02,619 --> 01:36:09,869
the driver what should have happened was

1865
01:36:05,520 --> 01:36:13,840
they should have specified a specific

1866
01:36:09,869 --> 01:36:16,119
format for everything so every possible

1867
01:36:13,840 --> 01:36:21,039
command you can send down to the GPU is

1868
01:36:16,119 --> 01:36:23,890
SPECT as a data spec you then all of

1869
01:36:21,039 --> 01:36:26,769
your first wave drivers have a

1870
01:36:23,890 --> 01:36:31,960
translator in them that translate from

1871
01:36:26,770 --> 01:36:34,630
the software spec that was specified to

1872
01:36:31,960 --> 01:36:40,119
whatever the hardware actually ingests

1873
01:36:34,630 --> 01:36:42,850
right then the next round of GPUs are

1874
01:36:40,119 --> 01:36:46,479
all they all just make this silicon read

1875
01:36:42,850 --> 01:36:48,219
that directly and then that entire part

1876
01:36:46,479 --> 01:36:52,000
of the driver is gone for the rest of

1877
01:36:48,219 --> 01:36:54,210
time right that's what I think should

1878
01:36:52,000 --> 01:36:54,210
have happened

1879
01:37:08,659 --> 01:37:11,849
[Music]

1880
01:37:21,600 --> 01:37:26,069
[Music]

1881
01:37:28,229 --> 01:37:35,199
it's an SPI RV the thing you're talking

1882
01:37:31,060 --> 01:37:37,690
about no SPI RV is not only not related

1883
01:37:35,199 --> 01:37:41,649
to command buffers it's for shaders not

1884
01:37:37,689 --> 01:37:44,439
command buffers but it also doesn't do

1885
01:37:41,649 --> 01:37:46,119
that SV RV is not designed to be

1886
01:37:44,439 --> 01:37:48,909
something that Hardware actually

1887
01:37:46,119 --> 01:37:53,079
interprets itself SPI RV is designed to

1888
01:37:48,909 --> 01:37:57,130
be input to a driver compiler that then

1889
01:37:53,079 --> 01:37:59,500
compiles output code machine code for

1890
01:37:57,130 --> 01:38:00,940
the chip it's not designed to be

1891
01:37:59,500 --> 01:38:04,420
something that a graphics chip would

1892
01:38:00,939 --> 01:38:05,649
ever actually execute directly you can

1893
01:38:04,420 --> 01:38:11,109
think of it in fact it's writing the

1894
01:38:05,649 --> 01:38:14,199
name uh SP IR V the IR is intermediate

1895
01:38:11,109 --> 01:38:15,819
representation it is not designed to be

1896
01:38:14,199 --> 01:38:18,970
an actual executable format it's

1897
01:38:15,819 --> 01:38:21,219
designed to be basically the first step

1898
01:38:18,970 --> 01:38:24,699
of the compiler which parses and turns

1899
01:38:21,220 --> 01:38:29,409
into an AB set track abstract syntax

1900
01:38:24,699 --> 01:38:32,859
tree then possibly salikus einman static

1901
01:38:29,409 --> 01:38:35,710
single assignment forms the data of the

1902
01:38:32,859 --> 01:38:37,899
code then before you actually generate

1903
01:38:35,710 --> 01:38:40,930
any machine code out of it that's what

1904
01:38:37,899 --> 01:38:44,349
SP IR V is so no hardware would ever

1905
01:38:40,930 --> 01:38:47,050
take SP IR V the only reason hardware

1906
01:38:44,350 --> 01:38:50,170
would ever take SP IR V is if you chose

1907
01:38:47,050 --> 01:38:53,079
to then actually have a small core in

1908
01:38:50,170 --> 01:38:55,149
your graphics card that was like sitting

1909
01:38:53,079 --> 01:38:58,510
around running a compiler what you could

1910
01:38:55,149 --> 01:39:01,449
do right it's not the world's worst idea

1911
01:38:58,510 --> 01:39:02,650
but you know that that's the only way

1912
01:39:01,449 --> 01:39:05,639
that a crash car would ever run that

1913
01:39:02,649 --> 01:39:09,809
natively it's not it's not machine code

1914
01:39:05,640 --> 01:39:09,810
it doesn't look like machine code

1915
01:39:15,260 --> 01:39:21,140
if you have a predictor unrelated

1916
01:39:17,090 --> 01:39:23,810
question how would a high light shader

1917
01:39:21,140 --> 01:39:25,670
work if you want to select a sprite

1918
01:39:23,810 --> 01:39:28,039
you'd want to color the edges of his

1919
01:39:25,670 --> 01:39:40,720
right in some color is this done via the

1920
01:39:28,039 --> 01:39:40,720
stencil buffer so I guess I don't know

1921
01:39:42,340 --> 01:39:46,039
how I would implement that I've never

1922
01:39:44,449 --> 01:39:50,238
actually implemented that specific thing

1923
01:39:46,039 --> 01:39:52,609
you're talking about in that way so my

1924
01:39:50,238 --> 01:40:01,389
first thought would be something along

1925
01:39:52,609 --> 01:40:01,389
the lines of inside the pixel shader

1926
01:40:04,600 --> 01:40:12,500
maybe I would just do a thing where I

1927
01:40:07,100 --> 01:40:15,980
sample from the so completely off the

1928
01:40:12,500 --> 01:40:18,738
top of my head and probably stupid yes I

1929
01:40:15,979 --> 01:40:22,039
would say what is the thickness of the

1930
01:40:18,738 --> 01:40:25,939
outline that I want I would sample from

1931
01:40:22,039 --> 01:40:27,800
the mipmap that is that thickness that

1932
01:40:25,939 --> 01:40:31,429
corresponds to back thickness so if it

1933
01:40:27,800 --> 01:40:34,100
was like 4 pixels wide

1934
01:40:31,430 --> 01:40:37,789
I would sample from the mipmap that was

1935
01:40:34,100 --> 01:40:40,670
2 steps down and I'd say what is the

1936
01:40:37,789 --> 01:40:45,850
alpha value and whatever the alpha value

1937
01:40:40,670 --> 01:40:45,850
is I would II I would

1938
01:40:52,078 --> 01:40:58,920
I would take it and if it was zero I

1939
01:40:56,130 --> 01:41:06,750
would discard but if it was nonzero I

1940
01:40:58,920 --> 01:41:09,539
would draw the outline that's a really

1941
01:41:06,750 --> 01:41:10,139
bad answer but that's the first thing I

1942
01:41:09,539 --> 01:41:12,750
thought of

1943
01:41:10,139 --> 01:41:14,789
I mean basically what my thought process

1944
01:41:12,750 --> 01:41:16,529
was is can we do a signed distance field

1945
01:41:14,789 --> 01:41:17,880
here and the problem of the signed

1946
01:41:16,529 --> 01:41:19,050
distance field is that you either have

1947
01:41:17,880 --> 01:41:21,989
one of you or you don't

1948
01:41:19,050 --> 01:41:24,029
and so with sprites that are actually

1949
01:41:21,988 --> 01:41:25,738
just stored regularly in the texture you

1950
01:41:24,029 --> 01:41:28,289
don't actually have a signed distance

1951
01:41:25,738 --> 01:41:30,299
field so you can't just say how far am i

1952
01:41:28,289 --> 01:41:31,698
away from the edge of the sprite it

1953
01:41:30,300 --> 01:41:34,980
doesn't tell you that information right

1954
01:41:31,698 --> 01:41:38,819
but you can approximate that information

1955
01:41:34,979 --> 01:41:41,428
by just fetching a sum of the area and

1956
01:41:38,819 --> 01:41:46,710
seeing how many how close you are to

1957
01:41:41,429 --> 01:41:48,029
actual pixels right and so I don't know

1958
01:41:46,710 --> 01:41:49,020
if what I just said would work but it

1959
01:41:48,029 --> 01:41:52,340
was the first thing I thought I've to

1960
01:41:49,020 --> 01:41:52,340
approximate a signed distance field

1961
01:41:54,170 --> 01:41:57,480
Brian asked what happened to profile

1962
01:41:56,279 --> 01:42:00,118
just for you the stream you mentioned

1963
01:41:57,479 --> 01:42:02,638
you want to re-enable it was it disabled

1964
01:42:00,118 --> 01:42:04,109
or not just tracking um the reason that

1965
01:42:02,639 --> 01:42:06,659
the profiler is not visible is because

1966
01:42:04,109 --> 01:42:11,939
we turn on lighting and so what happens

1967
01:42:06,658 --> 01:42:14,098
with lighting is everything is going

1968
01:42:11,939 --> 01:42:15,539
through that lighting so we don't

1969
01:42:14,099 --> 01:42:17,130
currently have a way to turn the

1970
01:42:15,539 --> 01:42:18,750
lighting off when we go to draw our

1971
01:42:17,130 --> 01:42:23,250
profiler so the probe is still there

1972
01:42:18,750 --> 01:42:25,880
it's just getting lit by black that's

1973
01:42:23,250 --> 01:42:25,880
all that's happening

1974
01:42:39,250 --> 01:42:48,329
[Music]

1975
01:42:46,670 --> 01:42:51,440
all right

1976
01:42:48,329 --> 01:42:51,439
no further questions

1977
01:43:13,340 --> 01:43:18,949
all right Thank You Bryan that we will

1978
01:43:16,550 --> 01:43:20,570
have fun game with John I'm sure all

1979
01:43:18,949 --> 01:43:21,979
right thank you everyone for joining me

1980
01:43:20,569 --> 01:43:23,479
for this on a handmade here it's been a

1981
01:43:21,979 --> 01:43:24,529
pleasure coding with you as always if

1982
01:43:23,479 --> 01:43:26,750
you would like to follow my series at

1983
01:43:24,529 --> 01:43:28,699
home you can always pre-order the game

1984
01:43:26,750 --> 01:43:30,859
on handmade hero org it comes with the

1985
01:43:28,699 --> 01:43:33,679
source code so you can play around with

1986
01:43:30,859 --> 01:43:36,409
it yourself we've got the basics of the

1987
01:43:33,680 --> 01:43:37,460
lighting system in now maybe today would

1988
01:43:36,409 --> 01:43:39,109
be a good day to play with it yourself

1989
01:43:37,460 --> 01:43:42,109
see if you can get some lighting working

1990
01:43:39,109 --> 01:43:44,989
before I get to it tomorrow everything's

1991
01:43:42,109 --> 01:43:47,059
set up for you to do it right so that

1992
01:43:44,989 --> 01:43:49,340
might be something to try that's about

1993
01:43:47,060 --> 01:43:51,289
it for today I will be back here

1994
01:43:49,340 --> 01:43:54,890
tomorrow to do that extra letting work

1995
01:43:51,289 --> 01:43:58,159
but eating the meantime you may want to

1996
01:43:54,890 --> 01:43:59,930
stay tuned to the handmade hero channel

1997
01:43:58,159 --> 01:44:03,069
because we're gonna be hooking up with

1998
01:43:59,930 --> 01:44:07,579
Jonathan Blow in a couple minutes here

1999
01:44:03,069 --> 01:44:09,229
to do some multiplayer gaming those of

2000
01:44:07,579 --> 01:44:10,850
you who joined us for our satisfactory

2001
01:44:09,229 --> 01:44:12,829
stream know that we are we are

2002
01:44:10,850 --> 01:44:14,990
definitely pro level gaming streamers

2003
01:44:12,829 --> 01:44:16,640
obviously don't let the fact that I

2004
01:44:14,989 --> 01:44:22,189
don't have a gigantic chair with a

2005
01:44:16,640 --> 01:44:25,430
headrest fool you obviously I'm still up

2006
01:44:22,189 --> 01:44:28,729
owning noobs with two zeros as they say

2007
01:44:25,430 --> 01:44:32,210
all the time and so we're gonna be

2008
01:44:28,729 --> 01:44:34,969
getting to that at about 2:30 I think so

2009
01:44:32,210 --> 01:44:37,340
about 20 minutes we'll be we'll be

2010
01:44:34,970 --> 01:44:38,930
making that happen so stick around for

2011
01:44:37,340 --> 01:44:40,400
that I'll shut down the stream and

2012
01:44:38,930 --> 01:44:44,510
restart it so you'll get an actual

2013
01:44:40,399 --> 01:44:47,089
notification when we go live mm-hmm but

2014
01:44:44,510 --> 01:44:48,770
we'll be doing that at 2:30 it'll be on

2015
01:44:47,090 --> 01:44:51,980
handmade hero channel and it should be

2016
01:44:48,770 --> 01:44:53,210
also on naysayer 88 channel we'll squat

2017
01:44:51,979 --> 01:44:55,549
up for that so you should be able to

2018
01:44:53,210 --> 01:44:59,569
switch between them cleanly and we'll

2019
01:44:55,550 --> 01:45:02,960
see you in a few minutes that's about it

2020
01:44:59,569 --> 01:45:05,500
I will catch you all in about 20 minutes

2021
01:45:02,960 --> 01:45:05,500
take it easy everybody

