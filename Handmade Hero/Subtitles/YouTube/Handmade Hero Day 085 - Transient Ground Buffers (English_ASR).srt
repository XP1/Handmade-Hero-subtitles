1
00:00:01,070 --> 00:00:06,089
alright hello everyone and welcome to

2
00:00:04,379 --> 00:00:08,099
handmade Hero the show Rico to complete

3
00:00:06,089 --> 00:00:09,990
game live on twitch no engines no

4
00:00:08,099 --> 00:00:11,730
libraries we try to take a look at the

5
00:00:09,990 --> 00:00:13,530
entire pipeline here so we can learn

6
00:00:11,730 --> 00:00:16,170
about every last little detail that goes

7
00:00:13,529 --> 00:00:18,570
into game development no nook and cranny

8
00:00:16,170 --> 00:00:21,000
unexplored really sometimes we explore

9
00:00:18,570 --> 00:00:23,039
them to great detail in fact and you're

10
00:00:21,000 --> 00:00:25,469
like no don't go any further into that

11
00:00:23,039 --> 00:00:27,210
nook and or cranny but there we go

12
00:00:25,469 --> 00:00:27,390
anyway and that's just the nature of the

13
00:00:27,210 --> 00:00:31,289
show

14
00:00:27,390 --> 00:00:32,909
now yesterday we started something where

15
00:00:31,289 --> 00:00:35,789
we wanted to sort of do this dynamic

16
00:00:32,909 --> 00:00:37,409
lead generated ground texturing that we

17
00:00:35,789 --> 00:00:39,179
were working on and I would like to get

18
00:00:37,409 --> 00:00:40,679
back to that but before I do I'll just

19
00:00:39,179 --> 00:00:42,359
point out that anyone who pre-ordered

20
00:00:40,679 --> 00:00:44,549
the game on handmade org who wants to

21
00:00:42,359 --> 00:00:48,359
follow along should have gotten a link

22
00:00:44,549 --> 00:00:49,859
in their email and that link will have

23
00:00:48,359 --> 00:00:53,820
the source code in it and you want to

24
00:00:49,859 --> 00:00:55,409
unpack day 84 is source code to match

25
00:00:53,820 --> 00:00:57,390
where I am today because we're here on

26
00:00:55,409 --> 00:00:59,189
day 85 I know it's a little confusing

27
00:00:57,390 --> 00:01:00,808
cuz we missed a couple days last week

28
00:00:59,189 --> 00:01:03,570
due to the fact that I was away so now

29
00:01:00,808 --> 00:01:05,700
that the fives don't line up with weeks

30
00:01:03,570 --> 00:01:08,219
anymore I don't know how we will have to

31
00:01:05,700 --> 00:01:11,579
like skip a few days some other time to

32
00:01:08,219 --> 00:01:14,450
like get it back up to alignment but for

33
00:01:11,579 --> 00:01:22,438
now it's all crazy

34
00:01:14,450 --> 00:01:27,299
anyway anyway so what we did is we made

35
00:01:22,438 --> 00:01:29,938
a we made a little repeating ground

36
00:01:27,299 --> 00:01:31,049
texture thing here which we could sort

37
00:01:29,938 --> 00:01:32,578
of generate well it's not really

38
00:01:31,049 --> 00:01:34,290
repeating sorry it's non repeating

39
00:01:32,578 --> 00:01:36,389
ground texture that can kind of just

40
00:01:34,290 --> 00:01:39,840
generate ground that goes for as long as

41
00:01:36,390 --> 00:01:41,519
you want and so what we did is we just

42
00:01:39,840 --> 00:01:44,219
generated one buffers worth and you can

43
00:01:41,519 --> 00:01:46,438
see it getting displayed behind the sort

44
00:01:44,219 --> 00:01:49,649
of the the trees here that I'm moving

45
00:01:46,438 --> 00:01:51,688
around in and what we need to do now

46
00:01:49,649 --> 00:01:53,728
where we stopped yesterday is we need to

47
00:01:51,688 --> 00:01:57,658
figure out a good way to make it so that

48
00:01:53,728 --> 00:02:00,599
as we scroll off to where there isn't

49
00:01:57,659 --> 00:02:02,490
any more of this buffer we can start to

50
00:02:00,599 --> 00:02:05,250
you know we can generate what would have

51
00:02:02,489 --> 00:02:07,289
been in the next part of the buffer so

52
00:02:05,250 --> 00:02:09,389
that as we walk further through the

53
00:02:07,290 --> 00:02:11,640
world we just are constantly getting a

54
00:02:09,389 --> 00:02:13,568
nice non-repeating ground texture built

55
00:02:11,639 --> 00:02:15,009
out of those splats that we

56
00:02:13,568 --> 00:02:20,078
you know that we were kind of using to

57
00:02:15,009 --> 00:02:22,628
make them so you know I've thought about

58
00:02:20,079 --> 00:02:24,730
this a little bit just just right before

59
00:02:22,628 --> 00:02:27,789
the stream I was thinking about it what

60
00:02:24,729 --> 00:02:29,649
we had been working on there's something

61
00:02:27,789 --> 00:02:31,378
that I thought of that's actually I feel

62
00:02:29,650 --> 00:02:34,539
like a slightly smarter way to do things

63
00:02:31,378 --> 00:02:36,370
that you know we haven't actually done

64
00:02:34,539 --> 00:02:37,539
this part yet but instead of doing it

65
00:02:36,370 --> 00:02:39,489
the way that I'd suggested we were gonna

66
00:02:37,539 --> 00:02:41,530
do it I was thinking we could do it in a

67
00:02:39,489 --> 00:02:42,819
slightly smarter way just one of those

68
00:02:41,530 --> 00:02:45,188
things you don't necessarily think of

69
00:02:42,818 --> 00:02:47,878
right off the bat because you know hey

70
00:02:45,188 --> 00:02:51,578
it's it's on stream and and well

71
00:02:47,878 --> 00:02:55,209
sometimes it gets crazy in here but the

72
00:02:51,579 --> 00:02:59,439
thing that I was thinking was what I

73
00:02:55,209 --> 00:03:02,530
said before was Oh we'll have like you

74
00:02:59,438 --> 00:03:04,209
know we'll have this back buffer and

75
00:03:02,530 --> 00:03:06,549
we'll draw the ground texture into it

76
00:03:04,209 --> 00:03:11,049
and so like the screen is here you know

77
00:03:06,549 --> 00:03:13,239
and here's the buffer right and as you

78
00:03:11,049 --> 00:03:15,400
move around it when you get to the edge

79
00:03:13,239 --> 00:03:18,669
will like blit what's on the screen like

80
00:03:15,400 --> 00:03:20,379
backwards to make room for new stuff and

81
00:03:18,669 --> 00:03:22,209
we'll move the screen backwards as well

82
00:03:20,378 --> 00:03:24,518
but then I realize that's actually kind

83
00:03:22,209 --> 00:03:25,949
of dumb and the reason that that's kind

84
00:03:24,519 --> 00:03:30,969
of dumb is because we're already

85
00:03:25,949 --> 00:03:34,900
spending the bandwidth to copy this

86
00:03:30,969 --> 00:03:37,959
buffer onto the screen anyway right it's

87
00:03:34,900 --> 00:03:40,000
already got a scroll around and since

88
00:03:37,959 --> 00:03:42,098
that's happening what I was thinking is

89
00:03:40,000 --> 00:03:45,039
why don't we just make the buffer be a

90
00:03:42,098 --> 00:03:46,810
set of tiles anyway right so we just

91
00:03:45,039 --> 00:03:48,188
break it up into tiles you know like I

92
00:03:46,810 --> 00:03:51,219
don't know how big they are maybe

93
00:03:48,188 --> 00:03:52,658
they're you know 256 by 256 or something

94
00:03:51,219 --> 00:03:55,180
right

95
00:03:52,658 --> 00:03:58,060
just tiles and then what we'll do is

96
00:03:55,180 --> 00:03:59,650
we've lit the tiles you know on to the

97
00:03:58,060 --> 00:04:01,688
screen into the location they're

98
00:03:59,650 --> 00:04:04,150
supposed to go and that way we never

99
00:04:01,688 --> 00:04:08,530
have to do any blitz here all we do is

100
00:04:04,150 --> 00:04:12,519
reallocate tiles to be locations on the

101
00:04:08,530 --> 00:04:14,348
screen right that's it like we don't do

102
00:04:12,519 --> 00:04:15,879
anything else it just works so there's

103
00:04:14,348 --> 00:04:18,699
no bleeding there's no management of it

104
00:04:15,878 --> 00:04:20,949
it's literally just some array of tiles

105
00:04:18,699 --> 00:04:23,319
and we can say how many we want so let's

106
00:04:20,949 --> 00:04:26,900
say you know we've got a 256 by 256

107
00:04:23,319 --> 00:04:28,579
tiles right and we want to have

108
00:04:26,899 --> 00:04:30,739
you know I don't know how many of them

109
00:04:28,579 --> 00:04:32,508
let's say we want to have 64 of them or

110
00:04:30,740 --> 00:04:34,009
something like this or I'm not sure how

111
00:04:32,509 --> 00:04:35,300
many we would actually need at our

112
00:04:34,009 --> 00:04:39,129
target resolution

113
00:04:35,300 --> 00:04:42,168
you know if we're 1920 by 1080 right

114
00:04:39,129 --> 00:04:47,089
then you can imagine like if we if we

115
00:04:42,168 --> 00:04:50,538
let Emacs quick calc calc for us if we

116
00:04:47,089 --> 00:04:55,310
want to say 1920 divided by 256 right

117
00:04:50,538 --> 00:04:58,459
that's 7.5 in this direction and same

118
00:04:55,310 --> 00:05:03,079
thing for 1080 divided by 256 that would

119
00:04:58,459 --> 00:05:07,310
be 4.2 right so we're talking like

120
00:05:03,079 --> 00:05:09,978
something like 8 times 5 or 32 to cover

121
00:05:07,310 --> 00:05:12,500
the screen and so if we wanted you know

122
00:05:09,978 --> 00:05:14,899
to cover the screen and then some we'd

123
00:05:12,500 --> 00:05:16,519
be talking about you know something

124
00:05:14,899 --> 00:05:18,049
substantially more than 32 so yeah so

125
00:05:16,519 --> 00:05:27,379
maybe we do 64 or something like that

126
00:05:18,050 --> 00:05:30,978
right so what I was thinking is why

127
00:05:27,379 --> 00:05:34,038
don't we just make an array of these and

128
00:05:30,978 --> 00:05:37,339
then we just have for each one of them

129
00:05:34,038 --> 00:05:39,348
where it is in world space then when we

130
00:05:37,339 --> 00:05:43,429
move the screen around we just look to

131
00:05:39,348 --> 00:05:46,519
see if any of them are you know we

132
00:05:43,430 --> 00:05:48,889
basically like march through all of the

133
00:05:46,519 --> 00:05:51,889
tiles that we think we want on the

134
00:05:48,889 --> 00:05:53,900
screen in you know and and the end sort

135
00:05:51,889 --> 00:05:56,629
of the apron around the screen and we

136
00:05:53,899 --> 00:06:00,079
say make sure that these are in our set

137
00:05:56,629 --> 00:06:02,949
of 64 and whenever it needs to fill a

138
00:06:00,079 --> 00:06:05,750
new one that it doesn't have in that set

139
00:06:02,949 --> 00:06:07,788
it'll just evict whatever the least

140
00:06:05,750 --> 00:06:10,310
recently used one that we had was and

141
00:06:07,788 --> 00:06:11,870
replace it with a new one right and that

142
00:06:10,310 --> 00:06:14,538
seems a lot more sane to me because then

143
00:06:11,870 --> 00:06:16,699
there's no bleeding ever right you're

144
00:06:14,538 --> 00:06:19,939
only doing the copy to the screen which

145
00:06:16,699 --> 00:06:22,788
we had to do anyway and that just seems

146
00:06:19,939 --> 00:06:23,959
like a much better idea so I think this

147
00:06:22,788 --> 00:06:24,829
is what I'm going to implement instead

148
00:06:23,959 --> 00:06:26,779
of the thing I said I was going to

149
00:06:24,829 --> 00:06:28,038
implement and since we haven't done any

150
00:06:26,779 --> 00:06:30,049
of it yet we don't really we didn't

151
00:06:28,038 --> 00:06:31,250
waste any time so it just seems like a

152
00:06:30,050 --> 00:06:35,120
smarter thing to do and so that's the

153
00:06:31,250 --> 00:06:38,300
thing that I am gonna do so really the

154
00:06:35,120 --> 00:06:41,360
only thing that needs to change here is

155
00:06:38,300 --> 00:06:42,620
let's let's go ahead and take a look at

156
00:06:41,360 --> 00:06:44,689
this here the only thing that needs to

157
00:06:42,620 --> 00:06:47,000
change here is you know this we've got

158
00:06:44,689 --> 00:06:48,680
this sort of ground buffer that's

159
00:06:47,000 --> 00:06:50,420
sitting here and this ground buffer P

160
00:06:48,680 --> 00:06:53,720
really all I'm talking about is let's

161
00:06:50,420 --> 00:07:00,740
just make an array of these right and I

162
00:06:53,720 --> 00:07:03,680
think you know now it's probably a good

163
00:07:00,740 --> 00:07:07,400
time to introduce that transient arena

164
00:07:03,680 --> 00:07:09,709
because if anything what if there was

165
00:07:07,399 --> 00:07:11,839
ever anything that was properly

166
00:07:09,709 --> 00:07:13,609
transient meaning something that can be

167
00:07:11,839 --> 00:07:14,929
recomputed from scratch and does not

168
00:07:13,610 --> 00:07:16,879
need to be saved in any way

169
00:07:14,930 --> 00:07:18,410
it's these ground buffers right because

170
00:07:16,879 --> 00:07:20,569
these ground buffers are completely

171
00:07:18,410 --> 00:07:22,010
generative from information that we have

172
00:07:20,569 --> 00:07:24,079
were saying that we're saying that's the

173
00:07:22,009 --> 00:07:26,870
rule for how they're even created and so

174
00:07:24,079 --> 00:07:32,029
I think I want to introduce that that

175
00:07:26,870 --> 00:07:33,470
sort of transient arena at this point so

176
00:07:32,029 --> 00:07:36,859
I'm gonna I'm just gonna call that the

177
00:07:33,470 --> 00:07:38,210
transient arena right and we're gonna go

178
00:07:36,860 --> 00:07:39,680
ahead and initialize that like we were

179
00:07:38,209 --> 00:07:42,829
initializing the World Arena and these

180
00:07:39,680 --> 00:07:45,230
guys are gonna come out of that right so

181
00:07:42,829 --> 00:07:47,439
we're gonna have some some notion of

182
00:07:45,230 --> 00:07:51,020
these here we're going to have struct

183
00:07:47,439 --> 00:07:52,879
ground buffer or you know we could make

184
00:07:51,019 --> 00:07:54,139
this fairly general to I guess we don't

185
00:07:52,879 --> 00:07:55,459
really have to call it ground buffer but

186
00:07:54,139 --> 00:07:56,629
I'll call it ground buffer for now and

187
00:07:55,459 --> 00:07:57,310
we'll see if we ever use it for anything

188
00:07:56,629 --> 00:08:02,480
else

189
00:07:57,310 --> 00:08:06,759
ground buffer brown buffers and then

190
00:08:02,480 --> 00:08:09,290
we'll also have a ground buffer count so

191
00:08:06,759 --> 00:08:13,490
and in here the ground buffers will just

192
00:08:09,290 --> 00:08:15,650
be again positions in bitmaps that's it

193
00:08:13,490 --> 00:08:19,819
and I don't think we necessarily need

194
00:08:15,649 --> 00:08:22,699
anything else for them can't really

195
00:08:19,819 --> 00:08:26,329
think of anything else for them at least

196
00:08:22,699 --> 00:08:29,479
not offhand so yeah so let's go ahead

197
00:08:26,329 --> 00:08:31,849
and expand that that notion of the world

198
00:08:29,480 --> 00:08:34,190
arena here and again if you'll remember

199
00:08:31,850 --> 00:08:36,320
what we set up our game to have is we

200
00:08:34,190 --> 00:08:40,160
set up our game to have two sort of

201
00:08:36,320 --> 00:08:42,770
memory areas right one memory area was

202
00:08:40,159 --> 00:08:44,629
for permanent storage I said and what

203
00:08:42,769 --> 00:08:47,389
that is is something that needs to be

204
00:08:44,629 --> 00:08:50,389
preserved from frame to frame then the

205
00:08:47,389 --> 00:08:51,500
other area that I had allocated is one

206
00:08:50,389 --> 00:08:53,000
that we haven't used yet

207
00:08:51,500 --> 00:08:54,860
and what I wanted to do with that one is

208
00:08:53,000 --> 00:08:55,639
for stuff that we don't really care what

209
00:08:54,860 --> 00:08:57,529
happens to it

210
00:08:55,639 --> 00:08:59,600
so if it does get preserved from frame

211
00:08:57,529 --> 00:09:02,179
to frame maybe that's good maybe that

212
00:08:59,600 --> 00:09:04,399
saves us work but if it doesn't then no

213
00:09:02,179 --> 00:09:08,959
big deal and so for example if we were

214
00:09:04,399 --> 00:09:10,909
going to reload a game or you know sleep

215
00:09:08,960 --> 00:09:12,170
like you know a game like that shut down

216
00:09:10,909 --> 00:09:14,659
temporarily we wanted to like come back

217
00:09:12,169 --> 00:09:17,839
to life or something the stuff in the

218
00:09:14,659 --> 00:09:19,610
transient arena could literally just not

219
00:09:17,840 --> 00:09:22,820
be stored at all it's something that we

220
00:09:19,610 --> 00:09:25,550
if we we could trade time basically CPU

221
00:09:22,820 --> 00:09:27,290
time to regenerate it right it's not

222
00:09:25,549 --> 00:09:32,719
something that's good that's got to be

223
00:09:27,289 --> 00:09:35,269
saved and so you know we haven't really

224
00:09:32,720 --> 00:09:38,090
seen much that we need to do with that

225
00:09:35,269 --> 00:09:41,329
yet but this is kind of a good first

226
00:09:38,090 --> 00:09:43,820
thing so you know let's go ahead and and

227
00:09:41,330 --> 00:09:46,850
actually start talking about about that

228
00:09:43,820 --> 00:09:50,000
so we've got our transient storage size

229
00:09:46,850 --> 00:09:54,620
and there's nothing in there so I'm

230
00:09:50,000 --> 00:09:56,149
gonna make the transient arena basically

231
00:09:54,620 --> 00:09:59,629
use that whole transient storage size

232
00:09:56,149 --> 00:10:04,549
and I'm gonna go ahead and and do

233
00:09:59,629 --> 00:10:06,080
transient storage there so so I'm gonna

234
00:10:04,549 --> 00:10:07,909
initialize this other arena and now we

235
00:10:06,080 --> 00:10:11,210
have a second place that stuff can come

236
00:10:07,909 --> 00:10:12,709
out of essentially right we don't really

237
00:10:11,210 --> 00:10:15,440
have any other stuff that we want a

238
00:10:12,710 --> 00:10:17,690
partition yet in our in our world stuff

239
00:10:15,440 --> 00:10:19,010
so you know we'll probably get to that a

240
00:10:17,690 --> 00:10:20,390
little later on but for our transient

241
00:10:19,009 --> 00:10:23,450
arena now we'll just have it be the

242
00:10:20,389 --> 00:10:25,250
whole thing and we'll start by by

243
00:10:23,450 --> 00:10:26,810
allocating some space out of that for

244
00:10:25,250 --> 00:10:30,460
these ground buffers so when we come out

245
00:10:26,809 --> 00:10:32,509
here to the ground buffer I want to

246
00:10:30,460 --> 00:10:34,190
again you'll notice we set ourselves up

247
00:10:32,509 --> 00:10:35,929
for success by having to make empty

248
00:10:34,190 --> 00:10:38,900
bitmap take which arena it was going to

249
00:10:35,929 --> 00:10:42,409
use so now I can ask for it to use that

250
00:10:38,899 --> 00:10:45,799
transient arena and similarly I can go

251
00:10:42,409 --> 00:10:47,329
ahead and make the whole array exist in

252
00:10:45,799 --> 00:10:48,949
there as well so I don't know how many

253
00:10:47,330 --> 00:10:50,600
ground buffers we want to have I suppose

254
00:10:48,950 --> 00:10:52,550
that might be something that's based on

255
00:10:50,600 --> 00:10:53,870
how much memory we actually have so it

256
00:10:52,549 --> 00:10:55,459
might be the different profiles of the

257
00:10:53,870 --> 00:10:56,870
game have different numbers of these

258
00:10:55,460 --> 00:10:58,100
ground buffers because obviously storing

259
00:10:56,870 --> 00:11:01,360
more ground buffers means we have to

260
00:10:58,100 --> 00:11:01,360
recompute them potentially less often

261
00:11:01,690 --> 00:11:05,610
but let's just say for now we're gonna

262
00:11:03,889 --> 00:11:07,980
store 128 of

263
00:11:05,610 --> 00:11:11,459
quick caplets see if we want to do 128

264
00:11:07,980 --> 00:11:13,980
256 by 256 textures at four bytes per

265
00:11:11,458 --> 00:11:17,969
pixel how big is that going to be let's

266
00:11:13,980 --> 00:11:21,329
see that is a 32 megabyte backing store

267
00:11:17,970 --> 00:11:23,399
right which seems totally reasonable on

268
00:11:21,328 --> 00:11:25,500
modern machines 32 megabytes of the

269
00:11:23,399 --> 00:11:26,850
backing store is not very many and that

270
00:11:25,500 --> 00:11:32,730
seems like a reasonable cache for our

271
00:11:26,850 --> 00:11:34,620
stuff so I don't feel like that's asking

272
00:11:32,730 --> 00:11:35,639
too much we can even go hog-wild here

273
00:11:34,620 --> 00:11:37,620
and do 256

274
00:11:35,639 --> 00:11:40,709
I don't know if that I mean that could

275
00:11:37,620 --> 00:11:41,820
just be crazy so maybe you know cut it

276
00:11:40,708 --> 00:11:44,028
down a little we'll see those are

277
00:11:41,820 --> 00:11:46,019
numbers that are easy to - no no real

278
00:11:44,028 --> 00:11:48,958
nothing's really based on them so it's

279
00:11:46,019 --> 00:11:51,089
fine anyway so if we go in here and say

280
00:11:48,958 --> 00:11:53,698
all right we've got we're gonna make

281
00:11:51,089 --> 00:11:56,820
this this empty bitmap we need to first

282
00:11:53,698 --> 00:11:57,838
we need to make 128 of them but first

283
00:11:56,820 --> 00:11:59,910
what we need to do is actually make

284
00:11:57,839 --> 00:12:02,430
space for the array right so we need to

285
00:11:59,909 --> 00:12:06,240
make space for the ground buffer array

286
00:12:02,429 --> 00:12:10,979
like so ground buffers and that's going

287
00:12:06,240 --> 00:12:14,610
to be one of these let's see where do we

288
00:12:10,980 --> 00:12:16,769
have our push thing I don't remember how

289
00:12:14,610 --> 00:12:18,600
we wrote it to push array there it is so

290
00:12:16,769 --> 00:12:23,028
we're going to do push array out of the

291
00:12:18,600 --> 00:12:28,379
transient arena and we want to push a

292
00:12:23,028 --> 00:12:31,068
like this many of this struct here that

293
00:12:28,379 --> 00:12:34,559
we've defined the ground buffer struck

294
00:12:31,068 --> 00:12:36,750
like so and then we're going to loop

295
00:12:34,559 --> 00:12:39,989
through them and allocate empty buffers

296
00:12:36,750 --> 00:12:42,179
for them right and I guess for now we

297
00:12:39,990 --> 00:12:43,889
won't even draw that ground chunk yet

298
00:12:42,179 --> 00:12:47,879
that that we're going to deal with that

299
00:12:43,889 --> 00:12:50,610
a little bit later on so here we go

300
00:12:47,879 --> 00:12:54,088
ground buffer index equals zero ground

301
00:12:50,610 --> 00:13:02,720
buffer index is less than that count and

302
00:12:54,089 --> 00:13:05,370
then for each of those for each of those

303
00:13:02,720 --> 00:13:07,410
we are going to grab out which ground

304
00:13:05,370 --> 00:13:12,110
before it is so this is the ground

305
00:13:07,409 --> 00:13:15,088
buffer game state ground buffers like so

306
00:13:12,110 --> 00:13:17,769
we are going to get the enth one of them

307
00:13:15,089 --> 00:13:21,990
and then we're going to

308
00:13:17,769 --> 00:13:25,539
allocate its bitmap and we're going to

309
00:13:21,990 --> 00:13:27,610
set its P presumably to know do we have

310
00:13:25,539 --> 00:13:30,399
a no world position I don't know if we

311
00:13:27,610 --> 00:13:32,440
do or not what exactly I thought we did

312
00:13:30,399 --> 00:13:36,340
because I thought we had some stuff that

313
00:13:32,440 --> 00:13:39,490
wanted no world positions but I could be

314
00:13:36,340 --> 00:13:42,670
wrong about that no position that's what

315
00:13:39,490 --> 00:13:46,120
we wanted so we we basically I want to

316
00:13:42,669 --> 00:13:48,069
say that you know these these ground

317
00:13:46,120 --> 00:13:49,659
chunks aren't initialized yet they have

318
00:13:48,070 --> 00:13:53,020
nothing in their bitmaps their bitmaps

319
00:13:49,659 --> 00:13:56,199
are empty so you know they're ready to

320
00:13:53,019 --> 00:13:58,929
be composited anyway now make empty

321
00:13:56,200 --> 00:14:01,600
bitmap is probably a little bit

322
00:13:58,929 --> 00:14:03,729
overzealous in this case too because if

323
00:14:01,600 --> 00:14:06,040
we look here it's it's calling zero size

324
00:14:03,730 --> 00:14:08,019
and so what I might do is I might say

325
00:14:06,039 --> 00:14:10,569
you know clear to zero is the thing that

326
00:14:08,019 --> 00:14:13,329
you can do and it's going to do it by

327
00:14:10,570 --> 00:14:15,250
default but in this case we don't

328
00:14:13,330 --> 00:14:18,370
actually care so there's really no need

329
00:14:15,250 --> 00:14:20,649
to do that so what I'll probably do is

330
00:14:18,370 --> 00:14:22,870
say alright you know what don't clear it

331
00:14:20,649 --> 00:14:25,209
because we are gonna clear it later

332
00:14:22,870 --> 00:14:27,610
there's you know we gotta clear these

333
00:14:25,210 --> 00:14:30,940
every time we update them so just don't

334
00:14:27,610 --> 00:14:33,850
bother doing that and also what I might

335
00:14:30,940 --> 00:14:36,760
what I might also say is let's go ahead

336
00:14:33,850 --> 00:14:39,310
and oh hello why are you not marked

337
00:14:36,759 --> 00:14:41,100
internal mister mister function call

338
00:14:39,309 --> 00:14:44,319
there we go

339
00:14:41,100 --> 00:14:46,300
so what I might do also is say that okay

340
00:14:44,320 --> 00:14:48,100
you know if you pass a loaded bitmap to

341
00:14:46,299 --> 00:14:49,990
this thing it'll clear it for you so

342
00:14:48,100 --> 00:14:52,420
that we can have that be a little bit

343
00:14:49,990 --> 00:14:56,259
more straightforward right so this is

344
00:14:52,419 --> 00:15:00,459
just gonna be a clear bitmap bitmap like

345
00:14:56,259 --> 00:15:04,240
so and and that's going to take that

346
00:15:00,460 --> 00:15:05,889
bitmaps memory and and clear it I guess

347
00:15:04,240 --> 00:15:09,519
we should double check to make sure that

348
00:15:05,889 --> 00:15:11,819
it actually has some memory first but

349
00:15:09,519 --> 00:15:18,579
yeah so the total bitmap size is that

350
00:15:11,820 --> 00:15:21,129
and that'll clear it so okay so when we

351
00:15:18,580 --> 00:15:23,080
do this make empty bitmap we want to be

352
00:15:21,129 --> 00:15:26,169
able to set a ground buffer width and

353
00:15:23,080 --> 00:15:27,700
height that has nothing to do with this

354
00:15:26,169 --> 00:15:29,229
stuff that we computed before this turns

355
00:15:27,700 --> 00:15:31,040
out to really not be necessary for doing

356
00:15:29,230 --> 00:15:32,810
the tiled based architecture

357
00:15:31,039 --> 00:15:34,549
which is kind of nice it gets us out of

358
00:15:32,809 --> 00:15:36,649
this estimation process so that's

359
00:15:34,549 --> 00:15:37,958
actually kind of great we can just say

360
00:15:36,649 --> 00:15:40,339
you know we don't care about that at all

361
00:15:37,958 --> 00:15:41,899
and so what we can do here is just say

362
00:15:40,339 --> 00:15:44,570
all right we want a composite at a

363
00:15:41,899 --> 00:15:46,339
certain level and so whatever that level

364
00:15:44,570 --> 00:15:47,810
compositing is that's what we're going

365
00:15:46,339 --> 00:15:49,970
to use so we're gonna do ground buffer

366
00:15:47,809 --> 00:15:52,399
width and ground buffer height are gonna

367
00:15:49,970 --> 00:15:54,800
be out here they're gonna be things that

368
00:15:52,399 --> 00:15:56,089
we spec out and we're saying 256 by two

369
00:15:54,799 --> 00:16:00,229
six for now but again that's something

370
00:15:56,089 --> 00:16:06,230
we could tune later right so there we go

371
00:16:00,230 --> 00:16:08,089
and then we're going to to use those

372
00:16:06,230 --> 00:16:12,759
anytime that we are talking about these

373
00:16:08,089 --> 00:16:15,440
things right so that should be

374
00:16:12,759 --> 00:16:17,689
relatively correct for most of it oh hi

375
00:16:15,440 --> 00:16:19,630
there spelling error that's no good it's

376
00:16:17,690 --> 00:16:23,800
get that mouse out of the way

377
00:16:19,629 --> 00:16:27,828
and that is not bitmap that is results

378
00:16:23,799 --> 00:16:29,208
ground buffer okay so here's where we're

379
00:16:27,828 --> 00:16:31,698
actually drawing them so now we have to

380
00:16:29,208 --> 00:16:37,969
actually start thinking about this a

381
00:16:31,698 --> 00:16:39,679
little bit again this is we've we've the

382
00:16:37,970 --> 00:16:41,149
drawing is gonna be really pretty basic

383
00:16:39,679 --> 00:16:42,679
it's really the compositing that's gonna

384
00:16:41,149 --> 00:16:44,149
be the interesting part

385
00:16:42,679 --> 00:16:45,439
well actually it's probably not even the

386
00:16:44,149 --> 00:16:48,379
compositing to interpret it's going to

387
00:16:45,440 --> 00:16:52,699
be that determining what to recreate and

388
00:16:48,379 --> 00:16:56,600
when but yeah so let's go through here

389
00:16:52,698 --> 00:16:58,370
and say all right for each one of the

390
00:16:56,600 --> 00:17:00,500
ground buffers that we have right we're

391
00:16:58,370 --> 00:17:03,019
gonna be the exact same loop here that

392
00:17:00,500 --> 00:17:04,849
we were doing before this is where we're

393
00:17:03,019 --> 00:17:07,669
all counting on John below to save us

394
00:17:04,849 --> 00:17:09,500
and actually finally make C have good

395
00:17:07,669 --> 00:17:10,939
stuff that allows you to loop through

396
00:17:09,500 --> 00:17:15,679
things without typing this every darn

397
00:17:10,939 --> 00:17:21,890
time and without having to go down the

398
00:17:15,679 --> 00:17:23,600
deep dark rabbit hole of C++ guaranteed

399
00:17:21,890 --> 00:17:24,980
to let you almost loop through the

400
00:17:23,599 --> 00:17:26,629
things you want to loop through but then

401
00:17:24,980 --> 00:17:30,289
frustrate you at the very last minute

402
00:17:26,630 --> 00:17:31,520
anyway yeah so all we're doing is we're

403
00:17:30,289 --> 00:17:33,168
basically going through exactly these

404
00:17:31,519 --> 00:17:35,058
these same things here that we were

405
00:17:33,169 --> 00:17:37,790
going through and then what we're going

406
00:17:35,058 --> 00:17:40,190
to do is is draw the it in exactly the

407
00:17:37,789 --> 00:17:43,190
same way right we're going to use that

408
00:17:40,190 --> 00:17:45,350
that ground buffer that position exactly

409
00:17:43,190 --> 00:17:47,240
how we were using it before

410
00:17:45,349 --> 00:17:48,949
we have a little bit of a question here

411
00:17:47,240 --> 00:17:50,480
and I don't think there's necessarily

412
00:17:48,950 --> 00:17:54,289
right answer to this question one way or

413
00:17:50,480 --> 00:17:57,769
the other but that is what exactly is

414
00:17:54,289 --> 00:17:59,149
the you know how is this aligned so I've

415
00:17:57,769 --> 00:18:01,879
got a bitmap it's got a width and height

416
00:17:59,150 --> 00:18:04,580
how is that aligned around the ground

417
00:18:01,880 --> 00:18:07,640
buffers position in world you know in

418
00:18:04,579 --> 00:18:09,649
the world is it is P the center of that

419
00:18:07,640 --> 00:18:12,680
bitmap is P the upper left corner of

420
00:18:09,650 --> 00:18:14,120
that bitmap you know that's that's

421
00:18:12,680 --> 00:18:17,660
mostly what we're talking about here I'm

422
00:18:14,119 --> 00:18:20,689
going to say that this is the center of

423
00:18:17,660 --> 00:18:23,240
the bitmap and the reason I say that is

424
00:18:20,690 --> 00:18:26,660
because it's not entirely out of the

425
00:18:23,240 --> 00:18:27,319
question that we will just let these

426
00:18:26,660 --> 00:18:29,660
things

427
00:18:27,319 --> 00:18:33,470
Splatt out so that they won't actually

428
00:18:29,660 --> 00:18:36,529
be 256 by 256 clipped rectangles they'll

429
00:18:33,470 --> 00:18:45,140
actually have some like overhang if that

430
00:18:36,529 --> 00:18:47,059
makes sense this is kind of one of those

431
00:18:45,140 --> 00:18:49,700
things that it's hard to say what the

432
00:18:47,059 --> 00:18:51,529
right answer is to one way or the other

433
00:18:49,700 --> 00:18:53,390
so I'm not sure what we want to do with

434
00:18:51,529 --> 00:18:55,399
that but for now I'm just gonna say it's

435
00:18:53,390 --> 00:18:56,840
the center and we'll cross that bridge

436
00:18:55,400 --> 00:18:59,990
we come to it if we need to change that

437
00:18:56,839 --> 00:19:01,699
so assuming that it is the center then

438
00:18:59,990 --> 00:19:03,769
what we need to do here is first again

439
00:19:01,700 --> 00:19:05,809
we need to do let's start with that

440
00:19:03,769 --> 00:19:08,990
subtraction what we're doing here is

441
00:19:05,809 --> 00:19:11,960
saying okay tell us where the ground

442
00:19:08,990 --> 00:19:15,620
buffer is this particular ground buffer

443
00:19:11,960 --> 00:19:17,420
tell us where that is relative to where

444
00:19:15,619 --> 00:19:19,009
the camera is right because that tells

445
00:19:17,420 --> 00:19:25,220
us the offset from the center of the

446
00:19:19,009 --> 00:19:28,400
screen right so from there again we we

447
00:19:25,220 --> 00:19:30,079
now know that okay this is the center of

448
00:19:28,400 --> 00:19:34,310
the screen right this is the screen

449
00:19:30,079 --> 00:19:36,649
Center X and we then want to move well

450
00:19:34,309 --> 00:19:38,629
this is kind of like a little bit stuck

451
00:19:36,650 --> 00:19:41,980
in there I could put this in here a

452
00:19:38,630 --> 00:19:41,980
little bit better like so

453
00:19:42,109 --> 00:19:48,349
there we go so what we want to do right

454
00:19:46,880 --> 00:19:52,340
is we want to take the center of the

455
00:19:48,349 --> 00:19:53,959
screen in X&amp;Y right we want to move by

456
00:19:52,339 --> 00:20:01,189
whatever that Delta tells us to do and

457
00:19:53,960 --> 00:20:02,900
again unfortunately we have to write and

458
00:20:01,190 --> 00:20:05,990
there's so many I guess we could do that

459
00:20:02,900 --> 00:20:07,490
right here there we go we want to first

460
00:20:05,990 --> 00:20:09,410
change it from meters to pixels because

461
00:20:07,490 --> 00:20:10,429
we're drawing in pixels here right again

462
00:20:09,410 --> 00:20:13,970
this is something that the render will

463
00:20:10,429 --> 00:20:17,240
do for us eventually once we actually

464
00:20:13,970 --> 00:20:19,519
have one we then want to say from the

465
00:20:17,240 --> 00:20:22,009
screen Center we got to move by whatever

466
00:20:19,519 --> 00:20:23,210
that Delta is in pixels and we have to

467
00:20:22,009 --> 00:20:25,190
move the negative and why because

468
00:20:23,210 --> 00:20:27,110
remember why in our world goes up

469
00:20:25,190 --> 00:20:29,480
towards the top of the screen but why in

470
00:20:27,109 --> 00:20:30,619
our screen space goes down kind of an

471
00:20:29,480 --> 00:20:31,970
annoying thing again this is stuff that

472
00:20:30,619 --> 00:20:33,439
the render coordinate system will take

473
00:20:31,970 --> 00:20:34,970
care of us once we move this stuff into

474
00:20:33,440 --> 00:20:35,509
a real render it's not really that big

475
00:20:34,970 --> 00:20:37,250
of a deal

476
00:20:35,509 --> 00:20:39,379
it seems annoying at the moment but it's

477
00:20:37,250 --> 00:20:42,380
really not that big of a deal so I would

478
00:20:39,380 --> 00:20:43,870
don't don't worry too much about it and

479
00:20:42,380 --> 00:20:46,669
then we've got our width and height

480
00:20:43,869 --> 00:20:48,259
which we're sort of offsetting to figure

481
00:20:46,669 --> 00:20:52,220
out where the ground buffer should be

482
00:20:48,259 --> 00:20:55,429
right now once we have that we have to

483
00:20:52,220 --> 00:20:56,509
draw it and that's that's really it but

484
00:20:55,429 --> 00:20:57,830
what we want to do is make sure that

485
00:20:56,509 --> 00:21:01,069
we're not drawing any ground buffers

486
00:20:57,829 --> 00:21:03,470
here that aren't actually valid right so

487
00:21:01,069 --> 00:21:06,230
once oops ones that have not actually

488
00:21:03,470 --> 00:21:09,169
had any you know been filled with a

489
00:21:06,230 --> 00:21:11,779
particular world position value we need

490
00:21:09,169 --> 00:21:14,120
those we need basically those to be

491
00:21:11,779 --> 00:21:17,149
known to us right we need to make sure

492
00:21:14,119 --> 00:21:19,159
that we we know which ones those are and

493
00:21:17,150 --> 00:21:21,590
so I believe we've got in these valid we

494
00:21:19,160 --> 00:21:23,690
do so I'm just going to do that check to

495
00:21:21,589 --> 00:21:26,149
see if the position of it is valid and

496
00:21:23,690 --> 00:21:28,120
that'll be our test to see and I'll put

497
00:21:26,150 --> 00:21:35,750
a little note in here just so we know

498
00:21:28,119 --> 00:21:40,399
note a P is invalid I should say an

499
00:21:35,750 --> 00:21:45,369
invalid P tells us that this ground

500
00:21:40,400 --> 00:21:49,340
buffer has not been filled

501
00:21:45,369 --> 00:21:50,750
okay so that will draw all of our ground

502
00:21:49,339 --> 00:21:53,470
buffers at the locations that they're

503
00:21:50,750 --> 00:21:57,410
supposed to be if they have actually

504
00:21:53,470 --> 00:21:59,750
been filled with valid data right now I

505
00:21:57,410 --> 00:22:01,100
want to take a you know another step

506
00:21:59,750 --> 00:22:05,329
here I want to I want to go one step

507
00:22:01,099 --> 00:22:11,869
further and say that well what we want

508
00:22:05,329 --> 00:22:13,909
to know is we also want to know which of

509
00:22:11,869 --> 00:22:16,699
our ground buffers actually has been

510
00:22:13,910 --> 00:22:19,400
getting used right because we want to be

511
00:22:16,700 --> 00:22:23,390
able to fill these ground buffers with

512
00:22:19,400 --> 00:22:25,400
new information and we want to know if

513
00:22:23,390 --> 00:22:26,630
we needed to make a new ground buffer

514
00:22:25,400 --> 00:22:29,780
for someplace that we're scrolling

515
00:22:26,630 --> 00:22:33,530
towards or something like this we want

516
00:22:29,779 --> 00:22:35,869
to be able to fill it we want to be able

517
00:22:33,529 --> 00:22:39,079
to know which old one we can throw away

518
00:22:35,869 --> 00:22:42,229
if that makes sense and so if you think

519
00:22:39,079 --> 00:22:44,720
back here what I said I was sort of

520
00:22:42,230 --> 00:22:46,429
saying okay well I don't know where I

521
00:22:44,720 --> 00:22:52,058
was saying it don't see it for some

522
00:22:46,429 --> 00:22:52,059
reason that's odd I thought I drew this

523
00:22:52,298 --> 00:22:58,279
I'm losing my mind I'm losing my mind

524
00:22:55,279 --> 00:23:00,139
people I thought I drew a little like I

525
00:22:58,279 --> 00:23:03,710
thought I drew a little thing that

526
00:23:00,140 --> 00:23:06,140
looked like this I guess I didn't well

527
00:23:03,710 --> 00:23:08,660
anyway if we have this right if we have

528
00:23:06,140 --> 00:23:10,549
56 by two views by 64 which actually now

529
00:23:08,660 --> 00:23:13,940
I think we said was 128 but that's

530
00:23:10,548 --> 00:23:15,679
whatever so if we have this array right

531
00:23:13,940 --> 00:23:17,600
and we've got this array of chunks and

532
00:23:15,679 --> 00:23:19,790
they're each you know they correspond to

533
00:23:17,599 --> 00:23:21,918
some location like this ones here

534
00:23:19,789 --> 00:23:23,509
and this one's this one over here and

535
00:23:21,919 --> 00:23:25,910
this one's that one over there right so

536
00:23:23,509 --> 00:23:27,440
now if we have some way we haven't

537
00:23:25,910 --> 00:23:30,890
figured out exactly I would do that yet

538
00:23:27,440 --> 00:23:33,470
but if we have some way and again this

539
00:23:30,890 --> 00:23:35,990
is said the P tells you right where it

540
00:23:33,470 --> 00:23:38,480
is if we have some way of saying which

541
00:23:35,990 --> 00:23:42,859
ones we want filled and we find out oh

542
00:23:38,480 --> 00:23:44,690
we want this one to be filled right we

543
00:23:42,859 --> 00:23:48,469
need that too we need that to have data

544
00:23:44,690 --> 00:23:50,720
now how do we know which one of these

545
00:23:48,470 --> 00:23:53,450
old ones to get rid of because some of

546
00:23:50,720 --> 00:23:54,259
them were still using probably and we

547
00:23:53,450 --> 00:23:56,900
don't really want to get rid of

548
00:23:54,259 --> 00:23:58,099
something we're still using and so what

549
00:23:56,900 --> 00:24:00,288
I'd like to do you

550
00:23:58,099 --> 00:24:05,178
has introduced the concept very simple

551
00:24:00,288 --> 00:24:07,990
what concept to start with which is the

552
00:24:05,179 --> 00:24:13,160
no soon of an LRU

553
00:24:07,990 --> 00:24:21,589
right we're at least recently used the

554
00:24:13,160 --> 00:24:25,370
stands for least recently used L R u L

555
00:24:21,589 --> 00:24:28,250
are you I want to introduce the concept

556
00:24:25,369 --> 00:24:30,500
of at least recently used scheme and at

557
00:24:28,250 --> 00:24:32,839
least recently used scheme is just

558
00:24:30,500 --> 00:24:36,319
something which allows you to say

559
00:24:32,839 --> 00:24:38,720
whatever one of these things I least

560
00:24:36,319 --> 00:24:41,509
recently did something with right like

561
00:24:38,720 --> 00:24:43,548
at least recently drew it on the screen

562
00:24:41,509 --> 00:24:45,408
and so we can just assume the something

563
00:24:43,548 --> 00:24:47,720
that hasn't been drawn for a long time

564
00:24:45,409 --> 00:24:50,600
we must not need very much anymore and

565
00:24:47,720 --> 00:24:53,000
it's not the best indicator necessarily

566
00:24:50,599 --> 00:24:55,548
of what won't be necessary we don't

567
00:24:53,000 --> 00:24:58,250
really know if that's a good idea we

568
00:24:55,548 --> 00:25:00,740
could for example use a different scheme

569
00:24:58,250 --> 00:25:03,980
which is whatever one is farthest away

570
00:25:00,740 --> 00:25:06,529
from the player at that time right but

571
00:25:03,980 --> 00:25:08,690
you can imagine situations where it

572
00:25:06,529 --> 00:25:10,519
actually is more robust to use something

573
00:25:08,690 --> 00:25:12,590
like least recently used or something

574
00:25:10,519 --> 00:25:14,450
else like that where we have say a

575
00:25:12,589 --> 00:25:17,750
situation where the player can teleport

576
00:25:14,450 --> 00:25:18,950
between two places right and like

577
00:25:17,750 --> 00:25:21,980
they're going back and forth between

578
00:25:18,950 --> 00:25:23,509
this teleporter for some reason then

579
00:25:21,980 --> 00:25:26,240
looking at how far away something is

580
00:25:23,509 --> 00:25:28,129
might not be the best way to say whether

581
00:25:26,240 --> 00:25:30,169
that thing needs to get filled right it

582
00:25:28,130 --> 00:25:32,030
might be better to just go whatever

583
00:25:30,169 --> 00:25:34,130
we've been using recently we should just

584
00:25:32,029 --> 00:25:36,259
keep because it seems like it's a good

585
00:25:34,130 --> 00:25:38,510
idea right

586
00:25:36,259 --> 00:25:41,000
so I don't really have a particularly

587
00:25:38,509 --> 00:25:42,710
strong opinion about how we want to do

588
00:25:41,000 --> 00:25:45,230
this so I'm just gonna do a very simple

589
00:25:42,710 --> 00:25:46,548
way of authoring this first and if we

590
00:25:45,230 --> 00:25:48,558
find out we need something better later

591
00:25:46,548 --> 00:25:50,089
we can do something better later so all

592
00:25:48,558 --> 00:25:52,339
I'm gonna do is I'm just gonna introduce

593
00:25:50,089 --> 00:25:58,339
a linked list right I'm going to

594
00:25:52,339 --> 00:26:00,019
introduce a singly linked list here or I

595
00:25:58,339 --> 00:26:01,759
guess I don't know what might we need a

596
00:26:00,019 --> 00:26:06,069
doubly linked list to remove things I

597
00:26:01,759 --> 00:26:06,069
don't know that we will

598
00:26:08,950 --> 00:26:13,660
hmm hmm

599
00:26:14,589 --> 00:26:21,589
actually I think now that I'm thinking

600
00:26:18,170 --> 00:26:26,180
about this I'm taking it back I think we

601
00:26:21,589 --> 00:26:28,779
may not really need that now that I

602
00:26:26,180 --> 00:26:28,779
think about it

603
00:26:35,289 --> 00:26:40,428
you know what we don't need that we've

604
00:26:37,910 --> 00:26:41,720
already got an array right and we're

605
00:26:40,429 --> 00:26:43,280
going to be looping through this array

606
00:26:41,720 --> 00:26:44,420
so we're gonna be starting at the

607
00:26:43,279 --> 00:26:45,678
beginning and we're gonna be looking

608
00:26:44,420 --> 00:26:48,320
through it to see which ones we need to

609
00:26:45,679 --> 00:26:51,170
render right if we encounter one that

610
00:26:48,319 --> 00:26:54,079
doesn't need to be rendered right at

611
00:26:51,170 --> 00:26:57,470
that time we could just go ahead and do

612
00:26:54,079 --> 00:27:00,319
array compaction moving this stuff

613
00:26:57,470 --> 00:27:04,220
moving the the subsequent things up into

614
00:27:00,319 --> 00:27:06,919
its position and shuffling it down past

615
00:27:04,220 --> 00:27:09,650
the end of where there were things that

616
00:27:06,920 --> 00:27:12,289
actually did need to get rendered we

617
00:27:09,650 --> 00:27:14,090
could do that because if you look at

618
00:27:12,289 --> 00:27:16,789
what's actually in this structure at the

619
00:27:14,089 --> 00:27:18,709
moment it's mostly just a world position

620
00:27:16,789 --> 00:27:20,480
and a loaded bitmap and the loaded

621
00:27:18,710 --> 00:27:22,058
bitmap actually doesn't really need to

622
00:27:20,480 --> 00:27:26,120
be there if you think about it right

623
00:27:22,058 --> 00:27:28,009
because a loaded bitmap oops I got a

624
00:27:26,119 --> 00:27:30,439
where's my stroke where's my loaded

625
00:27:28,009 --> 00:27:33,470
bitmap struck where do where is it there

626
00:27:30,440 --> 00:27:36,289
it is a loaded bitmap really all we need

627
00:27:33,470 --> 00:27:38,600
is this right effectively we don't need

628
00:27:36,289 --> 00:27:40,789
any of this other stuff right we just

629
00:27:38,599 --> 00:27:41,899
need just the memory pointer because we

630
00:27:40,789 --> 00:27:43,539
already know that the width and height

631
00:27:41,900 --> 00:27:46,970
this constant across all these things

632
00:27:43,539 --> 00:27:51,339
you know I'm saying so we've really just

633
00:27:46,970 --> 00:27:55,730
got that so how big is a world position

634
00:27:51,339 --> 00:28:00,379
let's take a look so a world position is

635
00:27:55,730 --> 00:28:04,220
is what 1 2 3 1 2 3 so it's 6 4 byte

636
00:28:00,380 --> 00:28:08,900
things it's 24 bytes plus 8 bytes it's

637
00:28:04,220 --> 00:28:11,900
32 bytes so probably it would be just

638
00:28:08,900 --> 00:28:16,280
fine to just actually keep our array in

639
00:28:11,900 --> 00:28:18,429
sorted order to be completely honest

640
00:28:16,279 --> 00:28:18,428
with you

641
00:28:19,670 --> 00:28:25,080
that may actually be the smartest thing

642
00:28:22,140 --> 00:28:28,130
to do hard to say that may actually be

643
00:28:25,079 --> 00:28:28,129
the smartest thing to do

644
00:28:28,369 --> 00:28:34,319
yeah I'm not sure I'm not sure the

645
00:28:32,579 --> 00:28:38,129
linked list scheme the way that would

646
00:28:34,319 --> 00:28:40,319
look right is it would introduce more

647
00:28:38,130 --> 00:28:41,549
stuff in here we'd introduce like a at

648
00:28:40,319 --> 00:28:43,379
least the next pointer possibly a

649
00:28:41,548 --> 00:28:44,339
previous nice partner let's let's try it

650
00:28:43,380 --> 00:28:47,010
let's try it this way

651
00:28:44,339 --> 00:28:48,779
let's try it I'm just I'm just let's

652
00:28:47,009 --> 00:28:52,200
let's go for it that's I mean you know

653
00:28:48,779 --> 00:28:56,000
why not so instead of doing it this way

654
00:28:52,200 --> 00:29:00,179
I'm just gonna say loaded bitmap bitmap

655
00:28:56,000 --> 00:29:02,819
and you know what I could also do here I

656
00:29:00,179 --> 00:29:05,190
can introduce an exemplar so I could say

657
00:29:02,819 --> 00:29:09,980
basically like you know what there's a

658
00:29:05,190 --> 00:29:14,850
loaded bitmap that's like ground bitmap

659
00:29:09,980 --> 00:29:17,009
like template right and basically what

660
00:29:14,849 --> 00:29:22,409
we'd say is okay the game state you know

661
00:29:17,009 --> 00:29:24,839
ground bitmap template we equals make

662
00:29:22,410 --> 00:29:29,040
empty bitmap and then actually all we

663
00:29:24,839 --> 00:29:30,119
store out of that right here is we just

664
00:29:29,039 --> 00:29:32,428
store that we just store the memory

665
00:29:30,119 --> 00:29:35,099
that's it we just store what this thing

666
00:29:32,429 --> 00:29:37,548
said the memory was and then when we

667
00:29:35,099 --> 00:29:42,000
want to draw it all we do is just use

668
00:29:37,548 --> 00:29:43,440
that guy that ground bitmap template we

669
00:29:42,000 --> 00:29:44,669
just use that and overwrite the memory

670
00:29:43,440 --> 00:29:45,779
pointer which whatever the member point

671
00:29:44,669 --> 00:29:46,950
is that we want because we don't need to

672
00:29:45,779 --> 00:29:49,798
store the pitch and all that of the

673
00:29:46,950 --> 00:29:51,269
stuff multiple times there's no point to

674
00:29:49,798 --> 00:29:53,129
that at all right that's just kind of a

675
00:29:51,269 --> 00:29:54,808
waste so if you think about what we're

676
00:29:53,130 --> 00:29:57,990
doing here we base to say all right okay

677
00:29:54,808 --> 00:30:02,399
okay okay you know I take it back we've

678
00:29:57,990 --> 00:30:04,019
got a loaded bitmap and you know what

679
00:30:02,400 --> 00:30:05,340
it's true we weren't even using that

680
00:30:04,019 --> 00:30:06,359
stuff in here for the most part so it's

681
00:30:05,339 --> 00:30:09,209
really just the drum pick might call it

682
00:30:06,359 --> 00:30:11,609
music but anyway this is the actual

683
00:30:09,210 --> 00:30:14,009
bitmap that we're gonna draw we grab out

684
00:30:11,609 --> 00:30:17,298
of the ground buffer we grab out its

685
00:30:14,009 --> 00:30:23,160
memory so weight sorry the gamestate

686
00:30:17,298 --> 00:30:25,289
round fit map template so and we just

687
00:30:23,160 --> 00:30:27,419
grab out its memory and stick it in the

688
00:30:25,289 --> 00:30:29,849
bitmap that we're going to use and then

689
00:30:27,419 --> 00:30:31,030
we use that bitmap right that's that's

690
00:30:29,849 --> 00:30:36,369
really it

691
00:30:31,029 --> 00:30:39,700
yeah so that seems relatively relatively

692
00:30:36,369 --> 00:30:43,689
clean and this can really be the bitmap

693
00:30:39,700 --> 00:30:44,920
width like so and in fact that basically

694
00:30:43,690 --> 00:30:48,130
means we don't have to store these

695
00:30:44,920 --> 00:30:51,100
either right because they're implicit in

696
00:30:48,130 --> 00:30:54,250
that bitmap yeah I think that's

697
00:30:51,099 --> 00:30:57,459
basically all we really need so that

698
00:30:54,250 --> 00:30:59,410
also means I suppose that this can just

699
00:30:57,460 --> 00:31:03,640
be you and 32s

700
00:30:59,410 --> 00:31:06,130
there and those can be used directly and

701
00:31:03,640 --> 00:31:07,870
then they will be saved automatically so

702
00:31:06,130 --> 00:31:11,820
that seems relatively clean I like that

703
00:31:07,869 --> 00:31:16,149
that seems like the right thing to do

704
00:31:11,819 --> 00:31:18,700
this is a dot and off we go

705
00:31:16,150 --> 00:31:24,460
bitmap memory ground buffer that's about

706
00:31:18,700 --> 00:31:25,840
as well it's doc whoa I'm sorry I didn't

707
00:31:24,460 --> 00:31:29,110
even realize the game was still running

708
00:31:25,839 --> 00:31:30,189
that's my bad yeah we're totally mucking

709
00:31:29,109 --> 00:31:33,279
with the memory layout here so it would

710
00:31:30,190 --> 00:31:35,590
not be a good time to have the automatic

711
00:31:33,279 --> 00:31:37,180
DLL loading being loading in and

712
00:31:35,589 --> 00:31:41,529
thinking it was interpreting the old

713
00:31:37,180 --> 00:31:46,990
data in the new way all right

714
00:31:41,529 --> 00:31:48,910
so that seems to me pretty sane so now

715
00:31:46,990 --> 00:31:50,829
all we have to do is actually think

716
00:31:48,910 --> 00:31:53,350
through well you know what we could do

717
00:31:50,829 --> 00:31:55,269
first before we try to do the LRU scheme

718
00:31:53,349 --> 00:31:57,159
we could just do something that actually

719
00:31:55,269 --> 00:31:58,180
makes these bitmaps get composited

720
00:31:57,160 --> 00:32:01,840
because we got plenty of work to do

721
00:31:58,180 --> 00:32:03,970
there as it is so yeah first let's

722
00:32:01,839 --> 00:32:06,579
verify that nothing draws when we run it

723
00:32:03,970 --> 00:32:08,710
yeah so I've got something bugging in

724
00:32:06,579 --> 00:32:10,149
there because it shouldn't be drawing

725
00:32:08,710 --> 00:32:11,590
any of these because it shouldn't get is

726
00:32:10,150 --> 00:32:13,360
valid on any of them right so I just

727
00:32:11,589 --> 00:32:15,099
want to make sure that that wasn't

728
00:32:13,359 --> 00:32:16,959
happening and of course it is happening

729
00:32:15,099 --> 00:32:18,369
so let's just do bug that quickly and

730
00:32:16,960 --> 00:32:21,130
there's one other thing that we can do

731
00:32:18,369 --> 00:32:23,729
to do debugging first that's what is the

732
00:32:21,130 --> 00:32:23,730
problem here

733
00:32:26,440 --> 00:32:35,590
what is the problem here ground buffer

734
00:32:30,429 --> 00:32:40,450
count ground buffer P and X so what is

735
00:32:35,589 --> 00:32:44,378
my let's take a look here what is my

736
00:32:40,450 --> 00:32:49,860
situation with ground buffers there's

737
00:32:44,378 --> 00:32:52,119
the ground buffers come on there we go

738
00:32:49,859 --> 00:32:55,750
ground buffers let's just take a look at

739
00:32:52,119 --> 00:32:57,908
them here there they all are just using

740
00:32:55,750 --> 00:32:58,648
that comma 1:28 notation to see where

741
00:32:57,909 --> 00:33:03,340
everything is

742
00:32:58,648 --> 00:33:06,189
so why are these what did I mess up here

743
00:33:03,339 --> 00:33:10,928
why are these set to like real things

744
00:33:06,190 --> 00:33:12,610
something is busted I hope I didn't do

745
00:33:10,929 --> 00:33:14,320
something weird with my transient arena

746
00:33:12,609 --> 00:33:17,769
because we weren't supposed to be using

747
00:33:14,319 --> 00:33:21,609
anything in the transient arena yet you

748
00:33:17,769 --> 00:33:23,798
know I'm saying so but then again we

749
00:33:21,609 --> 00:33:26,319
haven't ever tested it so there's that

750
00:33:23,798 --> 00:33:28,869
so these are all set properly right you

751
00:33:26,319 --> 00:33:30,189
can see them set being set properly so

752
00:33:28,869 --> 00:33:35,518
let's go through here and see what's

753
00:33:30,190 --> 00:33:35,519
going on when I come through here so

754
00:33:36,898 --> 00:33:45,668
ah-ha

755
00:33:38,048 --> 00:33:51,250
I guess not there we go so it turns out

756
00:33:45,669 --> 00:33:54,669
I was using that transient arena in my

757
00:33:51,250 --> 00:33:57,429
sim arena right here alright so way to

758
00:33:54,669 --> 00:33:59,679
not put it to do on that KC that was

759
00:33:57,429 --> 00:34:01,528
just sloppy programming right there now

760
00:33:59,679 --> 00:34:04,330
it didn't actually cause us any problems

761
00:34:01,528 --> 00:34:05,619
because I'm founded right away but I

762
00:34:04,329 --> 00:34:07,990
still think that's an owl of shame

763
00:34:05,619 --> 00:34:11,618
because there should have been but to do

764
00:34:07,990 --> 00:34:13,780
there that said something like once we

765
00:34:11,619 --> 00:34:18,338
talk about the transient arena make this

766
00:34:13,780 --> 00:34:24,579
actually do something real right and we

767
00:34:18,338 --> 00:34:26,168
didn't do that at all so yeah okay so

768
00:34:24,579 --> 00:34:29,050
now we get into more of the memory

769
00:34:26,168 --> 00:34:31,779
partitions stuff actually which is to

770
00:34:29,050 --> 00:34:34,179
say that what we we actually have the

771
00:34:31,780 --> 00:34:37,569
need to have an actual memory partition

772
00:34:34,179 --> 00:34:39,369
on our transient arena right and the way

773
00:34:37,568 --> 00:34:40,179
that this works is there's two ways that

774
00:34:39,369 --> 00:34:42,639
you can do the

775
00:34:40,179 --> 00:34:44,769
right and I don't know which way we want

776
00:34:42,639 --> 00:34:48,730
to do in the end it depends on how you

777
00:34:44,769 --> 00:34:52,358
want to think about your memory right

778
00:34:48,730 --> 00:34:54,309
so one way to do it is to say that we

779
00:34:52,358 --> 00:34:57,578
always have a fixed amount of memory

780
00:34:54,309 --> 00:34:59,559
right the memory amounts fixed it's

781
00:34:57,579 --> 00:35:00,970
however much it is it's two gigabytes or

782
00:34:59,559 --> 00:35:03,339
something that's what our game runs in

783
00:35:00,969 --> 00:35:05,558
or who knows right and then you just

784
00:35:03,338 --> 00:35:07,929
pick how you're going to divide it up

785
00:35:05,559 --> 00:35:10,119
and you know off you go

786
00:35:07,929 --> 00:35:15,578
I guess I should really I guess I should

787
00:35:10,119 --> 00:35:16,930
really say three ways this is this is

788
00:35:15,579 --> 00:35:22,150
like completely fixed

789
00:35:16,929 --> 00:35:24,038
this is 100% fixed layout right and the

790
00:35:22,150 --> 00:35:25,539
advantage of this scheme where I'm

791
00:35:24,039 --> 00:35:26,859
basically saying okay you know some

792
00:35:25,539 --> 00:35:28,420
stuff lives in here then we've got

793
00:35:26,858 --> 00:35:29,650
another thing in here for the renderer

794
00:35:28,420 --> 00:35:31,990
let's say and then we've got another

795
00:35:29,650 --> 00:35:34,990
thing in here right and and this is some

796
00:35:31,989 --> 00:35:37,088
other stuff whatever right the benefit

797
00:35:34,989 --> 00:35:39,250
of this is it always works 100%

798
00:35:37,088 --> 00:35:40,599
predictably right you know exactly

799
00:35:39,250 --> 00:35:42,338
what's going on and there's no mystery

800
00:35:40,599 --> 00:35:44,950
to it

801
00:35:42,338 --> 00:35:47,710
the downside of it is these things

802
00:35:44,949 --> 00:35:50,108
aren't flexible right so it means that

803
00:35:47,710 --> 00:35:51,818
you know if you wanted to have if there

804
00:35:50,108 --> 00:35:54,538
was a game that could take advantage of

805
00:35:51,818 --> 00:35:58,389
having the renderer like take more

806
00:35:54,539 --> 00:35:59,710
memory sometimes then like you know the

807
00:35:58,389 --> 00:36:00,639
physics or something in certain

808
00:35:59,710 --> 00:36:03,970
scenarios where that was more

809
00:36:00,639 --> 00:36:05,379
appropriate it could do it right you

810
00:36:03,969 --> 00:36:08,769
know that's like the downside is that

811
00:36:05,380 --> 00:36:14,260
doesn't happen then there's like you

812
00:36:08,769 --> 00:36:16,269
know pseudo fixed which is to say that

813
00:36:14,260 --> 00:36:19,839
you you have some amount that you're

814
00:36:16,269 --> 00:36:22,538
going to live in right so that's still

815
00:36:19,838 --> 00:36:24,578
the same but you don't necessarily say

816
00:36:22,539 --> 00:36:25,630
where stuff is so during your frame

817
00:36:24,579 --> 00:36:28,119
processing right

818
00:36:25,630 --> 00:36:29,588
you like pile some stuff on and you see

819
00:36:28,119 --> 00:36:31,000
where that ends and then you pile some

820
00:36:29,588 --> 00:36:32,528
more stuff on you see where that ends

821
00:36:31,000 --> 00:36:35,469
and you pile some more stuff on right

822
00:36:32,528 --> 00:36:38,048
and the problem with this scheme is if

823
00:36:35,469 --> 00:36:39,879
you don't know what these bounds are you

824
00:36:38,048 --> 00:36:41,949
might just run over your 2gig limit

825
00:36:39,880 --> 00:36:44,289
right so it can be a little

826
00:36:41,949 --> 00:36:46,088
unpredictable in that sense and what do

827
00:36:44,289 --> 00:36:47,589
you do when you hit that right so you

828
00:36:46,088 --> 00:36:48,759
kind of have to know that you've set

829
00:36:47,588 --> 00:36:51,849
things reasonably in order for that to

830
00:36:48,760 --> 00:36:53,780
work at all and finally you can have one

831
00:36:51,849 --> 00:36:58,760
that's just kind of like free-for-all

832
00:36:53,780 --> 00:37:00,350
right and that's where you still use you

833
00:36:58,760 --> 00:37:03,020
can still use the arena stuff like I'm

834
00:37:00,349 --> 00:37:05,299
using you don't have to change that but

835
00:37:03,019 --> 00:37:07,219
what actually happens is you start off

836
00:37:05,300 --> 00:37:08,960
with allocating some memory and you

837
00:37:07,219 --> 00:37:11,119
start partitioning it and then when you

838
00:37:08,960 --> 00:37:12,139
run out you just go back to the system

839
00:37:11,119 --> 00:37:14,539
and ask for more

840
00:37:12,139 --> 00:37:16,789
right and you just chained these blocks

841
00:37:14,539 --> 00:37:18,380
together as you go

842
00:37:16,789 --> 00:37:21,110
so that the very end you can free them

843
00:37:18,380 --> 00:37:22,340
all certainly and you know how many you

844
00:37:21,110 --> 00:37:24,470
have and you can clear them and do all

845
00:37:22,340 --> 00:37:26,180
this stuff with it but there's no finite

846
00:37:24,469 --> 00:37:28,159
bound on it so it's like I don't know if

847
00:37:26,179 --> 00:37:29,899
you want to try to allocate 18 gigabytes

848
00:37:28,159 --> 00:37:32,809
it'll just keep on going and allocating

849
00:37:29,900 --> 00:37:35,840
and allocating and allocating right and

850
00:37:32,809 --> 00:37:39,529
so I don't know which of these we'll end

851
00:37:35,840 --> 00:37:43,370
up with in the end it really largely

852
00:37:39,530 --> 00:37:45,680
depends on sort of I guess how hard of a

853
00:37:43,369 --> 00:37:50,509
set of constraints we can impose on the

854
00:37:45,679 --> 00:37:53,419
code so like you know this is usually

855
00:37:50,510 --> 00:37:55,850
the best way in terms of robustness

856
00:37:53,420 --> 00:37:57,920
because you can 100% guarantee that

857
00:37:55,849 --> 00:38:00,920
everyone operates out of you know every

858
00:37:57,920 --> 00:38:02,389
system but it might not be that it's not

859
00:38:00,920 --> 00:38:04,789
necessarily the best for things like

860
00:38:02,389 --> 00:38:07,369
modding and flexibility right where you

861
00:38:04,789 --> 00:38:09,289
want people to push those limits now you

862
00:38:07,369 --> 00:38:11,000
can always make this be parametric right

863
00:38:09,289 --> 00:38:12,769
so you can make it so that you can

864
00:38:11,000 --> 00:38:14,329
always say oh yeah give it 16 gigs

865
00:38:12,769 --> 00:38:17,210
instead and now each of these things is

866
00:38:14,329 --> 00:38:18,529
8 X bigger than it was so you can still

867
00:38:17,210 --> 00:38:20,630
get some flexibility on it that way but

868
00:38:18,530 --> 00:38:22,610
you know you can understand why a

869
00:38:20,630 --> 00:38:23,930
certain design of the game would have a

870
00:38:22,610 --> 00:38:25,579
different partition potentially than

871
00:38:23,929 --> 00:38:27,079
some other design and so that's why

872
00:38:25,579 --> 00:38:29,659
sometimes people like to go with these

873
00:38:27,079 --> 00:38:31,340
other schemes well to be fair a lot of

874
00:38:29,659 --> 00:38:33,259
people just go with the like you know

875
00:38:31,340 --> 00:38:36,260
the WTF scheme which is just like we

876
00:38:33,260 --> 00:38:38,890
call malloc everywhere woohoo you know

877
00:38:36,260 --> 00:38:42,290
and they have no idea what's going on

878
00:38:38,889 --> 00:38:43,219
that's not fabulous so we're not even

879
00:38:42,289 --> 00:38:44,750
gonna consider that one we're just gonna

880
00:38:43,219 --> 00:38:46,579
kind of scroll it off the screen here

881
00:38:44,750 --> 00:38:52,219
we're gonna pretend that that doesn't

882
00:38:46,579 --> 00:38:54,380
exist right but yeah again there's

883
00:38:52,219 --> 00:38:57,109
trade-offs different ways of thinking

884
00:38:54,380 --> 00:38:59,269
about things it's all fine but anyway

885
00:38:57,110 --> 00:39:00,710
point being so we have this transient

886
00:38:59,269 --> 00:39:02,389
arena and what the transit arena is

887
00:39:00,710 --> 00:39:04,909
forest for stuff that is non-essential

888
00:39:02,389 --> 00:39:06,230
right so we have multiple things that

889
00:39:04,909 --> 00:39:07,399
want to access it so what we want to do

890
00:39:06,230 --> 00:39:10,909
is introduce some

891
00:39:07,400 --> 00:39:13,338
sort of a system something that we can

892
00:39:10,909 --> 00:39:16,519
use that makes it easy for us to use

893
00:39:13,338 --> 00:39:19,130
that memory effectively right so I've

894
00:39:16,519 --> 00:39:20,599
introduced this transient arena here and

895
00:39:19,130 --> 00:39:22,519
that's the thing that subdivides that

896
00:39:20,599 --> 00:39:24,710
arena what we really probably wanted to

897
00:39:22,519 --> 00:39:26,869
do here was also have the permanent

898
00:39:24,710 --> 00:39:29,210
arena and we would allocate the World

899
00:39:26,869 --> 00:39:31,190
Arena out of that I'll kind of explain

900
00:39:29,210 --> 00:39:32,449
why that's necessary when we get to some

901
00:39:31,190 --> 00:39:34,400
part where we actually have multiple

902
00:39:32,449 --> 00:39:38,058
things going on with the World Arena but

903
00:39:34,400 --> 00:39:39,950
for now we can ignore that and just say

904
00:39:38,059 --> 00:39:42,170
okay so we've got stuff that wants to

905
00:39:39,949 --> 00:39:47,419
happen in you know in the transient

906
00:39:42,170 --> 00:39:50,420
arena and then we also want after that

907
00:39:47,420 --> 00:39:52,430
stuff is allocated to have another set

908
00:39:50,420 --> 00:39:54,769
of things could be allocated right so

909
00:39:52,429 --> 00:39:57,199
what we want to do here is we want to

910
00:39:54,769 --> 00:40:01,608
make bit you know essentially a notion

911
00:39:57,199 --> 00:40:06,048
of where the boundary is between the

912
00:40:01,608 --> 00:40:10,449
stuff that actually has to the boundary

913
00:40:06,048 --> 00:40:13,068
between where the transient arena itself

914
00:40:10,449 --> 00:40:14,509
I'm not sure how to say this right we

915
00:40:13,068 --> 00:40:16,730
want to make a boundary between the

916
00:40:14,510 --> 00:40:19,130
things that persist from frame to frame

917
00:40:16,730 --> 00:40:21,079
in the transient arena because they

918
00:40:19,130 --> 00:40:22,700
still carry over like our ground buffers

919
00:40:21,079 --> 00:40:24,829
don't get a race frame to frame they

920
00:40:22,699 --> 00:40:28,038
just could get a race frame to frame

921
00:40:24,829 --> 00:40:30,650
does that make sense I'm not sure if

922
00:40:28,039 --> 00:40:33,770
that makes makes sense to you but I'll

923
00:40:30,650 --> 00:40:36,559
try to show you what I mean so let's

924
00:40:33,769 --> 00:40:39,108
suppose for example we had a thing that

925
00:40:36,559 --> 00:40:42,260
was like transient arena right I'm sorry

926
00:40:39,108 --> 00:40:45,650
transient state like this right and we

927
00:40:42,260 --> 00:40:48,890
move the ground buffer in here like that

928
00:40:45,650 --> 00:40:51,410
does that make some sense and then what

929
00:40:48,889 --> 00:40:53,150
I want to do is I want to say oK we've

930
00:40:51,409 --> 00:40:55,940
got an arena you know we've got that

931
00:40:53,150 --> 00:41:00,230
transient arena and I would like that to

932
00:40:55,940 --> 00:41:02,420
actually live in here right and this is

933
00:41:00,230 --> 00:41:03,798
totally separate from our game state it

934
00:41:02,420 --> 00:41:07,250
can be completely regenerated as

935
00:41:03,798 --> 00:41:12,650
necessary right and what this is going

936
00:41:07,250 --> 00:41:15,528
to do is this is going to tell us this

937
00:41:12,650 --> 00:41:17,930
is going to keep track of what stuff we

938
00:41:15,528 --> 00:41:20,869
actually have already put in sort of the

939
00:41:17,929 --> 00:41:21,269
bottom part of this of this transient

940
00:41:20,869 --> 00:41:24,090
dream

941
00:41:21,269 --> 00:41:26,099
so like we've got you know a stack of

942
00:41:24,090 --> 00:41:27,660
stuff that we're growing and we're

943
00:41:26,099 --> 00:41:29,909
saying that our loaded bitmaps to the

944
00:41:27,659 --> 00:41:33,179
ground buffers like this is going to be

945
00:41:29,909 --> 00:41:35,279
ground buffers right and they just lived

946
00:41:33,179 --> 00:41:37,559
there we know how big they are they are

947
00:41:35,280 --> 00:41:40,080
always that size so what we want to do

948
00:41:37,559 --> 00:41:42,389
now is say anything else

949
00:41:40,079 --> 00:41:46,670
so sim regions for example the sim

950
00:41:42,389 --> 00:41:48,900
region memory wants to be in here right

951
00:41:46,670 --> 00:41:51,630
that's where the sim region stuff wants

952
00:41:48,900 --> 00:41:54,960
to live we want to make it easy for this

953
00:41:51,630 --> 00:41:57,559
image and stuff to start after the total

954
00:41:54,960 --> 00:42:00,329
amount used for the ground buffers now

955
00:41:57,559 --> 00:42:02,429
similarly we may want to be able to

956
00:42:00,329 --> 00:42:04,619
partition it into other stuff up here or

957
00:42:02,429 --> 00:42:07,679
what we may want to do is essentially

958
00:42:04,619 --> 00:42:09,150
bungee cord the sim region stuff so that

959
00:42:07,679 --> 00:42:11,609
the way that the sim region's work is

960
00:42:09,150 --> 00:42:13,860
they grow down right but then when

961
00:42:11,610 --> 00:42:15,599
they're done they pop back up to here

962
00:42:13,860 --> 00:42:18,840
and whatever memory they used is gone

963
00:42:15,599 --> 00:42:22,049
right and that's probably what we want

964
00:42:18,840 --> 00:42:24,000
to do with them for right now so let's

965
00:42:22,050 --> 00:42:25,200
start out with that and we'll get a

966
00:42:24,000 --> 00:42:28,469
little more complicated as we go but

967
00:42:25,199 --> 00:42:29,569
we'll start out with that all right so

968
00:42:28,469 --> 00:42:33,779
first things first

969
00:42:29,570 --> 00:42:36,510
zoomy what we want to do here is we want

970
00:42:33,780 --> 00:42:36,960
to have initialization for the transient

971
00:42:36,510 --> 00:42:38,640
State

972
00:42:36,960 --> 00:42:42,389
so this is the transient initialization

973
00:42:38,639 --> 00:42:45,079
right and it works exactly the same way

974
00:42:42,389 --> 00:42:47,969
as soups

975
00:42:45,079 --> 00:42:49,980
initialisation there we go it works

976
00:42:47,969 --> 00:42:51,989
exactly the same way as this does right

977
00:42:49,980 --> 00:42:55,949
it's it's literally exactly the same

978
00:42:51,989 --> 00:42:58,529
this stuff is identical right so what we

979
00:42:55,949 --> 00:43:03,029
want to do is take this we want to move

980
00:42:58,530 --> 00:43:06,450
this down here and what we'd like to do

981
00:43:03,030 --> 00:43:08,400
is say okay let's assume at least we

982
00:43:06,449 --> 00:43:10,529
want to make sure that there's no

983
00:43:08,400 --> 00:43:12,990
possible way that we couldn't fit at

984
00:43:10,530 --> 00:43:16,080
least the size of our transient state

985
00:43:12,989 --> 00:43:18,449
inside the transient storage size right

986
00:43:16,079 --> 00:43:20,130
and then we're going to assume that that

987
00:43:18,449 --> 00:43:21,960
first thing at the base of that

988
00:43:20,130 --> 00:43:25,530
transient storage we're going to assume

989
00:43:21,960 --> 00:43:29,480
that that is our transient state right

990
00:43:25,530 --> 00:43:29,480
so that's what's gonna happen there

991
00:43:31,070 --> 00:43:39,269
like so okay so assuming that you know

992
00:43:37,079 --> 00:43:41,670
we don't really have a.m. we don't

993
00:43:39,269 --> 00:43:44,940
really have a way of knowing which ones

994
00:43:41,670 --> 00:43:46,950
of these got cleared and I think our our

995
00:43:44,940 --> 00:43:49,260
definition was that stuff always had to

996
00:43:46,949 --> 00:43:51,269
initialize to zero so I think the

997
00:43:49,260 --> 00:43:53,610
easiest thing probably to do would just

998
00:43:51,269 --> 00:43:58,980
be to have it initialized actually be in

999
00:43:53,610 --> 00:44:00,329
here that seems like the best policy so

1000
00:43:58,980 --> 00:44:02,789
I'm gonna go ahead and say that that's

1001
00:44:00,329 --> 00:44:04,440
what our policy is for right now all

1002
00:44:02,789 --> 00:44:06,300
right so if we if we see that our

1003
00:44:04,440 --> 00:44:07,980
transient state is not initialized then

1004
00:44:06,300 --> 00:44:10,019
we're going to initialize it right

1005
00:44:07,980 --> 00:44:12,059
that's what we're going to do exactly

1006
00:44:10,019 --> 00:44:14,550
the same way that we did it before and

1007
00:44:12,059 --> 00:44:16,889
we're going to initialize this arena

1008
00:44:14,550 --> 00:44:19,560
exactly the same way as we initialize

1009
00:44:16,889 --> 00:44:24,349
the other one like so right so this guy

1010
00:44:19,559 --> 00:44:26,369
is going to come down here like this

1011
00:44:24,349 --> 00:44:28,259
again I wasn't really planning on doing

1012
00:44:26,369 --> 00:44:30,929
this today but it seems like a fine time

1013
00:44:28,260 --> 00:44:33,240
to do it so we'll go ahead and do it so

1014
00:44:30,929 --> 00:44:35,759
transient storage size again we will

1015
00:44:33,239 --> 00:44:38,849
take away however much we use just to

1016
00:44:35,760 --> 00:44:40,740
store that one state structure and we

1017
00:44:38,849 --> 00:44:42,269
will go ahead and and there's a you know

1018
00:44:40,739 --> 00:44:45,569
there's a clever way we could have done

1019
00:44:42,269 --> 00:44:47,309
this as well which is to initialize the

1020
00:44:45,570 --> 00:44:49,860
arena first and then allocate the thing

1021
00:44:47,309 --> 00:44:56,909
out of it but yeah six of one half dozen

1022
00:44:49,860 --> 00:44:59,039
the other anyway so this will start us

1023
00:44:56,909 --> 00:45:00,690
out with that arena and now we can

1024
00:44:59,039 --> 00:45:03,750
allocate all of these things out of the

1025
00:45:00,690 --> 00:45:07,079
arena directly right just like we were

1026
00:45:03,750 --> 00:45:08,550
doing before and and we could we could

1027
00:45:07,079 --> 00:45:11,069
call this trans state so we'd have to

1028
00:45:08,550 --> 00:45:15,440
keep typing transient I suppose so maybe

1029
00:45:11,070 --> 00:45:19,860
we call it like this like that ran state

1030
00:45:15,440 --> 00:45:20,130
oops trans state yeah something like

1031
00:45:19,860 --> 00:45:22,769
that

1032
00:45:20,130 --> 00:45:30,059
and maybe we call this Tran arena as

1033
00:45:22,769 --> 00:45:31,650
well there we go so if we take a look at

1034
00:45:30,059 --> 00:45:32,820
what happens here it's all exactly the

1035
00:45:31,650 --> 00:45:34,470
same as what was happening on the other

1036
00:45:32,820 --> 00:45:36,870
one but now it's just happening in sort

1037
00:45:34,469 --> 00:45:38,519
of the separate the separate area right

1038
00:45:36,869 --> 00:45:39,779
and that's the only difference between

1039
00:45:38,519 --> 00:45:42,119
what we were doing before and what we're

1040
00:45:39,780 --> 00:45:42,840
doing now it goes ahead and gets all

1041
00:45:42,119 --> 00:45:45,029
this stuff out so

1042
00:45:42,840 --> 00:45:48,420
gamestate is gonna be trans state as far

1043
00:45:45,030 --> 00:45:50,940
as this thing's concerned like so that's

1044
00:45:48,420 --> 00:45:56,130
all good and let's see if I can compile

1045
00:45:50,940 --> 00:46:00,329
that there what is my transient see what

1046
00:45:56,130 --> 00:46:06,140
else trans state is initialized we go

1047
00:46:00,329 --> 00:46:15,989
and transient arena is now Tran arena so

1048
00:46:06,139 --> 00:46:18,539
and one more time two more times there

1049
00:46:15,989 --> 00:46:21,029
we go so that's gonna all be in there

1050
00:46:18,539 --> 00:46:23,369
and the interesting about this is you'll

1051
00:46:21,030 --> 00:46:26,670
notice that now the transient arena is

1052
00:46:23,369 --> 00:46:29,039
left at exactly the location that we

1053
00:46:26,670 --> 00:46:31,650
would want it to be for the sim arena to

1054
00:46:29,039 --> 00:46:32,849
use it right so what we want to do here

1055
00:46:31,650 --> 00:46:34,710
is just say oh okay

1056
00:46:32,849 --> 00:46:37,259
when this thing is using the sim arena

1057
00:46:34,710 --> 00:46:39,840
what we would like to do is we would

1058
00:46:37,260 --> 00:46:42,570
like it to just be able to use whatever

1059
00:46:39,840 --> 00:46:45,510
was in the transient whatever that

1060
00:46:42,570 --> 00:46:48,510
transient arena was right and so what we

1061
00:46:45,510 --> 00:46:50,940
can do there is we could just probably

1062
00:46:48,510 --> 00:46:53,070
pass the transient arena for now maybe

1063
00:46:50,940 --> 00:46:54,659
we want to actually make a sim arena in

1064
00:46:53,070 --> 00:46:56,100
the future but for now we could just

1065
00:46:54,659 --> 00:47:00,539
pass the transient tournament directly

1066
00:46:56,099 --> 00:47:03,779
right and now it's gonna use that sim

1067
00:47:00,539 --> 00:47:05,789
arena and that'll be fine and the only

1068
00:47:03,780 --> 00:47:08,220
thing that we have to fix now is when

1069
00:47:05,789 --> 00:47:11,639
the simulation is done we want to

1070
00:47:08,219 --> 00:47:14,250
basically Bungie back to that location

1071
00:47:11,639 --> 00:47:15,839
so it's you know the sim regions gonna

1072
00:47:14,250 --> 00:47:17,699
use that arena it's gonna fill it up

1073
00:47:15,840 --> 00:47:20,430
with stuff and when it gets to the end

1074
00:47:17,699 --> 00:47:22,529
we just want to kind of go back to the

1075
00:47:20,429 --> 00:47:23,909
baseline that it was you know was that

1076
00:47:22,530 --> 00:47:27,420
was just after the ground buffer stuff

1077
00:47:23,909 --> 00:47:29,099
that we had allocated right and so to do

1078
00:47:27,420 --> 00:47:32,700
that I'm just gonna introduce one more

1079
00:47:29,099 --> 00:47:35,610
thing which is like sort of begin you

1080
00:47:32,699 --> 00:47:36,509
know temporary memory or something I'm

1081
00:47:35,610 --> 00:47:37,530
gonna know exactly what we're going to

1082
00:47:36,510 --> 00:47:39,150
call it but we're gonna call it that for

1083
00:47:37,530 --> 00:47:41,580
now we're gonna call that begin

1084
00:47:39,150 --> 00:47:44,010
temporary memory and then at the end I'm

1085
00:47:41,579 --> 00:47:46,440
gonna do the same thing and temporary

1086
00:47:44,010 --> 00:47:50,250
memory right and the temporary memory

1087
00:47:46,440 --> 00:47:52,050
we're gonna have I don't know if we want

1088
00:47:50,250 --> 00:47:54,289
the arena's to actually do pushes and

1089
00:47:52,050 --> 00:47:54,289
pops

1090
00:47:57,289 --> 00:48:09,079
I'm considering I think we do I think we

1091
00:48:04,228 --> 00:48:11,608
do so we're gonna do it that way like so

1092
00:48:09,079 --> 00:48:14,489
and then at the end we're going to do a

1093
00:48:11,608 --> 00:48:17,568
little insurance policy as well we're

1094
00:48:14,489 --> 00:48:20,938
going to do something like this

1095
00:48:17,568 --> 00:48:26,998
check arena and we're gonna do that for

1096
00:48:20,938 --> 00:48:31,998
our game state rolled arena and our

1097
00:48:26,998 --> 00:48:31,998
Kings our trans State train or email

1098
00:48:32,929 --> 00:48:40,469
like so so now we just got to implement

1099
00:48:36,478 --> 00:48:43,288
these guys we've got those pushes we got

1100
00:48:40,469 --> 00:48:44,458
these pushes and stuff on here right so

1101
00:48:43,289 --> 00:48:46,709
what I'm going to do is I'm going to

1102
00:48:44,458 --> 00:48:49,108
initialize these they're really really

1103
00:48:46,708 --> 00:48:52,048
simple all they're designed to do is to

1104
00:48:49,108 --> 00:48:54,719
spring forward and back in memory space

1105
00:48:52,048 --> 00:49:03,509
right so if we take a look at what these

1106
00:48:54,719 --> 00:49:05,309
do there is there's one extra level

1107
00:49:03,509 --> 00:49:07,289
security we could do here I don't know

1108
00:49:05,309 --> 00:49:08,548
if we actually want to I'll think about

1109
00:49:07,289 --> 00:49:10,619
it in a second after we're done with

1110
00:49:08,548 --> 00:49:13,139
this but basically all we're doing here

1111
00:49:10,619 --> 00:49:15,150
is saying okay you can begin an end

1112
00:49:13,139 --> 00:49:17,998
temporary memory like so when you

1113
00:49:15,150 --> 00:49:19,139
actually do that the arena itself you

1114
00:49:17,998 --> 00:49:20,578
know what I'm gonna I'm gonna do it I'm

1115
00:49:19,139 --> 00:49:24,028
gonna put in the extra layer security

1116
00:49:20,579 --> 00:49:26,599
why not so we'll have a little temporary

1117
00:49:24,028 --> 00:49:29,728
memory thing here temporary memory and

1118
00:49:26,599 --> 00:49:32,939
that's all it's gonna do right is is

1119
00:49:29,728 --> 00:49:35,489
store that used thing it's just gonna

1120
00:49:32,938 --> 00:49:37,259
store where the used field was because

1121
00:49:35,489 --> 00:49:40,708
that's all we need in order to restore

1122
00:49:37,259 --> 00:49:44,519
the state right and so I'm gonna go

1123
00:49:40,708 --> 00:49:46,858
ahead and say excuse me I'm gonna say

1124
00:49:44,518 --> 00:49:50,158
that we have temporary memory and this

1125
00:49:46,858 --> 00:49:52,048
is the sim memory and then when we end

1126
00:49:50,159 --> 00:49:54,838
that temporary memory I don't know why I

1127
00:49:52,048 --> 00:49:57,650
put it here supposed to be down after

1128
00:49:54,838 --> 00:49:59,548
you're done but what do you gonna do

1129
00:49:57,650 --> 00:50:03,929
then I'm gonna say all right we're done

1130
00:49:59,548 --> 00:50:05,429
with it here right and I'll also put the

1131
00:50:03,929 --> 00:50:07,500
memory arena in there so that you don't

1132
00:50:05,429 --> 00:50:09,730
have to save both of them

1133
00:50:07,500 --> 00:50:11,619
and so then the temporary memory thing

1134
00:50:09,730 --> 00:50:14,740
will return that it'll say okay got a

1135
00:50:11,619 --> 00:50:18,449
temporary memory results the results

1136
00:50:14,739 --> 00:50:21,699
arena is whatever arena got passed in

1137
00:50:18,449 --> 00:50:24,250
the result dot used is going to be

1138
00:50:21,699 --> 00:50:28,869
whatever that arenas used state was at

1139
00:50:24,250 --> 00:50:30,699
the time when it was called yeah and

1140
00:50:28,869 --> 00:50:32,650
then the additional security I was gonna

1141
00:50:30,699 --> 00:50:34,539
put into was just the fact that there's

1142
00:50:32,650 --> 00:50:37,930
going to be something like a temp count

1143
00:50:34,539 --> 00:50:43,269
on the arena which will get initialized

1144
00:50:37,929 --> 00:50:44,949
to zero and every time we begin

1145
00:50:43,269 --> 00:50:49,000
temporary memory I'm just going to in

1146
00:50:44,949 --> 00:50:51,279
current it and every time we end I am

1147
00:50:49,000 --> 00:50:52,780
going to subtract it does that make

1148
00:50:51,280 --> 00:50:59,290
sense this doesn't take that any more

1149
00:50:52,780 --> 00:51:03,310
temporary memory tent men right and so

1150
00:50:59,289 --> 00:51:05,679
hmm if you look at what this does that

1151
00:51:03,309 --> 00:51:09,549
just sort of lets me know how many times

1152
00:51:05,679 --> 00:51:10,989
this thing has been locked right and we

1153
00:51:09,550 --> 00:51:12,610
might even make this an int so we can

1154
00:51:10,989 --> 00:51:16,509
see if it went negative it'll be easier

1155
00:51:12,610 --> 00:51:18,519
for us to read basically so anyway so if

1156
00:51:16,510 --> 00:51:21,760
we take that arena we set the arena used

1157
00:51:18,519 --> 00:51:24,699
equal to whatever the temp them used was

1158
00:51:21,760 --> 00:51:28,090
right and we might also do an assertion

1159
00:51:24,699 --> 00:51:31,750
here and just say let's assert that we

1160
00:51:28,090 --> 00:51:33,730
are always going you know we're always

1161
00:51:31,750 --> 00:51:34,840
retracting memory we're never jumping

1162
00:51:33,730 --> 00:51:36,760
forwards because that would indicate

1163
00:51:34,840 --> 00:51:41,230
probably a bug and whoever was calling

1164
00:51:36,760 --> 00:51:43,510
us and let's also assert here for

1165
00:51:41,230 --> 00:51:45,610
example that the temp count is greater

1166
00:51:43,510 --> 00:51:49,000
than zero because otherwise we should

1167
00:51:45,610 --> 00:51:52,870
not be decrementing it that would be bad

1168
00:51:49,000 --> 00:51:54,849
right and and yeah and then we can

1169
00:51:52,869 --> 00:51:57,400
finally add just one thing in here which

1170
00:51:54,849 --> 00:51:59,769
is which is check arena

1171
00:51:57,400 --> 00:52:02,829
and that's just again another assertion

1172
00:51:59,769 --> 00:52:04,809
and that assertion allows us to verify

1173
00:52:02,829 --> 00:52:06,639
that we ended every frame with a

1174
00:52:04,809 --> 00:52:08,860
balanced number of temporary memory

1175
00:52:06,639 --> 00:52:12,279
begins and ends just so we make sure

1176
00:52:08,860 --> 00:52:15,700
nothing funky happened right so this is

1177
00:52:12,280 --> 00:52:19,730
just an assertion that arena temp count

1178
00:52:15,699 --> 00:52:22,969
is exactly zero always at the end

1179
00:52:19,730 --> 00:52:25,340
all right so oops that's no good

1180
00:52:22,969 --> 00:52:31,069
although I guess why did I do that I was

1181
00:52:25,340 --> 00:52:35,769
dumb we just do that all right uh that's

1182
00:52:31,070 --> 00:52:37,340
not right that's that is more correct

1183
00:52:35,769 --> 00:52:39,889
here we go

1184
00:52:37,340 --> 00:52:44,690
don't know why I was really wanting to

1185
00:52:39,889 --> 00:52:47,150
access results there so let's see so

1186
00:52:44,690 --> 00:52:50,720
these are now all off of Tran state

1187
00:52:47,150 --> 00:52:53,510
right so we want to go ahead and fix

1188
00:52:50,719 --> 00:53:00,399
that so here's a here's our trans state

1189
00:52:53,510 --> 00:53:00,400
trans state and same here trans state

1190
00:53:02,800 --> 00:53:10,880
that looks about right to me and these

1191
00:53:09,170 --> 00:53:14,960
need to take addresses but other than

1192
00:53:10,880 --> 00:53:16,490
that they look good and so we probably

1193
00:53:14,960 --> 00:53:18,470
won't step into that we just slammed a

1194
00:53:16,489 --> 00:53:22,429
bunch of code in there so we probably

1195
00:53:18,469 --> 00:53:25,279
want to see what's going on let's go

1196
00:53:22,429 --> 00:53:28,129
ahead and do that so if we step through

1197
00:53:25,280 --> 00:53:32,780
here let's see what happens so when we

1198
00:53:28,130 --> 00:53:38,390
do our our sim memory here and and our

1199
00:53:32,780 --> 00:53:44,120
trans again sim memory and our trans

1200
00:53:38,389 --> 00:53:46,190
state Fran Arena so you can see there is

1201
00:53:44,119 --> 00:53:48,230
exactly what we computed in Emacs in

1202
00:53:46,190 --> 00:53:50,599
quick calc there's our 32 megabyte

1203
00:53:48,230 --> 00:53:52,280
backing store foreground tiles here is

1204
00:53:50,599 --> 00:53:53,150
the total size it's that giant I don't

1205
00:53:52,280 --> 00:53:54,530
know if it's one gigabyte I don't

1206
00:53:53,150 --> 00:53:59,389
remember how big it was it's big right

1207
00:53:54,530 --> 00:54:02,150
looks like a gigabyte right yeah

1208
00:53:59,389 --> 00:54:04,609
and then we're gonna go ahead and create

1209
00:54:02,150 --> 00:54:08,420
a temporary memory region right now so I

1210
00:54:04,610 --> 00:54:09,440
don't know where the there we go so if

1211
00:54:08,420 --> 00:54:10,579
we go ahead and create that temporary

1212
00:54:09,440 --> 00:54:12,019
memories you see we're just snapping

1213
00:54:10,579 --> 00:54:14,569
what the use thing is we increment that

1214
00:54:12,019 --> 00:54:16,460
counter and now we can kind of go

1215
00:54:14,570 --> 00:54:19,430
through the sim region we can do our

1216
00:54:16,460 --> 00:54:22,820
stuff the sim region is now busy doing

1217
00:54:19,429 --> 00:54:24,500
it's it's allocating it's it's things so

1218
00:54:22,820 --> 00:54:26,630
if I jump down here we should see it

1219
00:54:24,500 --> 00:54:29,329
this should have moved up presumably

1220
00:54:26,630 --> 00:54:32,150
although it didn't which is odd oh no it

1221
00:54:29,329 --> 00:54:32,799
did you can see it did so it used a

1222
00:54:32,150 --> 00:54:35,260
bunch of memory

1223
00:54:32,800 --> 00:54:36,460
now we'd like to do is when we when we

1224
00:54:35,260 --> 00:54:38,650
hit that and memory we should see that

1225
00:54:36,460 --> 00:54:40,179
bounce back to what the previous use

1226
00:54:38,650 --> 00:54:42,039
Kant was which it did and the temp count

1227
00:54:40,179 --> 00:54:44,039
goes down to zero our check arena should

1228
00:54:42,039 --> 00:54:48,159
both succeed because there's no open

1229
00:54:44,039 --> 00:54:50,440
memories there and yet and off we go so

1230
00:54:48,159 --> 00:54:53,170
now we've got that straightened away so

1231
00:54:50,440 --> 00:54:55,690
our arena's are working properly now and

1232
00:54:53,170 --> 00:54:58,420
that's good what I would like to do now

1233
00:54:55,690 --> 00:55:00,490
is again get these guys actually drawing

1234
00:54:58,420 --> 00:55:02,800
and what we could do is when we make

1235
00:55:00,489 --> 00:55:04,869
them write we could actually do

1236
00:55:02,800 --> 00:55:08,560
something here where we initialize some

1237
00:55:04,869 --> 00:55:11,019
of them to be drawn and so an example of

1238
00:55:08,559 --> 00:55:14,860
that would be if I just drew one that

1239
00:55:11,019 --> 00:55:18,150
was at the cameras location right so if

1240
00:55:14,860 --> 00:55:20,740
I told it for example our draw ground

1241
00:55:18,150 --> 00:55:24,940
our draw ground chunk is now going to be

1242
00:55:20,739 --> 00:55:26,439
like some kind of a you know it'll

1243
00:55:24,940 --> 00:55:29,650
probably called like fill ground chunk

1244
00:55:26,440 --> 00:55:33,099
or something like this right and we pass

1245
00:55:29,650 --> 00:55:35,530
in the same stuff we're gonna fill the

1246
00:55:33,099 --> 00:55:38,469
ground or ground chunk it needs to know

1247
00:55:35,530 --> 00:55:40,510
which ground chunk we want to fill we'll

1248
00:55:38,469 --> 00:55:48,639
just use the first one I'll do it to do

1249
00:55:40,510 --> 00:55:52,060
here this is just a test fill so what I

1250
00:55:48,639 --> 00:55:54,339
want to do here is say okay this is this

1251
00:55:52,059 --> 00:55:56,079
is game state presumably I want to say

1252
00:55:54,340 --> 00:55:59,820
alright let's fill that first one let's

1253
00:55:56,079 --> 00:56:03,219
just fill that first ground buffer right

1254
00:55:59,820 --> 00:56:05,200
you know gamma buffer plus zero

1255
00:56:03,219 --> 00:56:07,719
basically we'll fill that first ground

1256
00:56:05,199 --> 00:56:09,339
buffer and what we'll do is we'll say

1257
00:56:07,719 --> 00:56:13,359
that we want it to be at where the

1258
00:56:09,340 --> 00:56:16,030
camera state actually is right now like

1259
00:56:13,360 --> 00:56:20,789
that and that should work

1260
00:56:16,030 --> 00:56:25,180
roughly correctly uh ground buffers yeah

1261
00:56:20,789 --> 00:56:28,840
and then fill ground chunk needs that to

1262
00:56:25,179 --> 00:56:31,869
be an address connect four dollars to

1263
00:56:28,840 --> 00:56:34,269
two loaded bitmap star ah yes well

1264
00:56:31,869 --> 00:56:36,429
actually that's something we could

1265
00:56:34,269 --> 00:56:43,300
totally work around with Phil ground

1266
00:56:36,429 --> 00:56:45,429
chunk I suppose yeah yeah yeah since I'm

1267
00:56:43,300 --> 00:56:46,300
only saving the memory out of them you

1268
00:56:45,429 --> 00:56:49,379
have to do this

1269
00:56:46,300 --> 00:56:52,390
nonsense every time which isn't ideal

1270
00:56:49,380 --> 00:56:56,610
admittedly right but I could do this

1271
00:56:52,389 --> 00:57:03,089
like so transient states you know that

1272
00:56:56,610 --> 00:57:08,410
and then it's just ground buffer that

1273
00:57:03,090 --> 00:57:10,869
buffer that would actually be all that

1274
00:57:08,409 --> 00:57:12,129
was necessary to recompute it and so

1275
00:57:10,869 --> 00:57:15,970
then we have something we're gonna say

1276
00:57:12,130 --> 00:57:22,809
okay loaded bitmap buffer equals trance

1277
00:57:15,969 --> 00:57:24,639
state round proper template isn't their

1278
00:57:22,809 --> 00:57:26,380
ground buffer template we're did my

1279
00:57:24,639 --> 00:57:32,009
grandpa for a ground bitmap template

1280
00:57:26,380 --> 00:57:36,220
sorry bitmap template but the memory

1281
00:57:32,010 --> 00:57:40,900
equals the memory from that ground

1282
00:57:36,219 --> 00:57:42,069
buffer and then the other thing we want

1283
00:57:40,900 --> 00:57:44,950
to do is you want to take the ground

1284
00:57:42,070 --> 00:57:48,760
buffer and we want to set its P equal to

1285
00:57:44,949 --> 00:57:54,329
the chunk P right and that should be

1286
00:57:48,760 --> 00:57:58,420
good so buffer arrow equals buffer dot

1287
00:57:54,329 --> 00:58:01,840
like we've got them that used to be an

1288
00:57:58,420 --> 00:58:03,909
address so does that but off we go it so

1289
00:58:01,840 --> 00:58:07,510
now maybe if we're lucky we'll see one

1290
00:58:03,909 --> 00:58:08,858
and we did now obviously a buffer of

1291
00:58:07,510 --> 00:58:12,520
that size doesn't need to be covered

1292
00:58:08,858 --> 00:58:14,409
with such prodigious foliage so you know

1293
00:58:12,519 --> 00:58:17,050
go ahead and cut that down a little bit

1294
00:58:14,409 --> 00:58:20,409
that may have been excessive I admit

1295
00:58:17,050 --> 00:58:22,180
that so you know alright so that feels

1296
00:58:20,409 --> 00:58:23,649
fills one of the chunks and now we are

1297
00:58:22,179 --> 00:58:25,899
in a position to fill multiple chunks so

1298
00:58:23,650 --> 00:58:27,608
I would say if we hadn't have had to

1299
00:58:25,900 --> 00:58:28,840
take the arena dye version we probably

1300
00:58:27,608 --> 00:58:30,159
actually would have had this working

1301
00:58:28,840 --> 00:58:32,260
completely today which would have been

1302
00:58:30,159 --> 00:58:33,670
pretty cool but I'm gonna wait till

1303
00:58:32,260 --> 00:58:34,900
tomorrow we're almost at the QA I'm

1304
00:58:33,670 --> 00:58:36,849
gonna wait till tomorrow to actually do

1305
00:58:34,900 --> 00:58:38,260
the filling scheme because we have to

1306
00:58:36,849 --> 00:58:40,239
talk about that LRU stuff a little bit

1307
00:58:38,260 --> 00:58:41,680
more but we're almost there and then

1308
00:58:40,239 --> 00:58:42,849
once that's done that'll be it

1309
00:58:41,679 --> 00:58:43,858
that'll just we'll be able to walk

1310
00:58:42,849 --> 00:58:45,759
around and have an infinitely

1311
00:58:43,858 --> 00:58:47,769
non-repeating ground texture that we can

1312
00:58:45,760 --> 00:58:50,530
fill with anything we want which is kind

1313
00:58:47,769 --> 00:58:53,429
of cool I'm pretty happy about that

1314
00:58:50,530 --> 00:58:56,350
actually so that should be kind of nice

1315
00:58:53,429 --> 00:58:57,519
so yeah let's let's stop for now I don't

1316
00:58:56,349 --> 00:58:59,199
want to get into something what I'm

1317
00:58:57,519 --> 00:59:00,190
gonna have to stop because it's gonna be

1318
00:58:59,199 --> 00:59:01,480
exciting to have that

1319
00:59:00,190 --> 00:59:02,740
repeating texture and I want to be able

1320
00:59:01,480 --> 00:59:06,969
to go straight to I did not want to have

1321
00:59:02,739 --> 00:59:09,578
to kind of go through a bunch of of like

1322
00:59:06,969 --> 00:59:11,889
oh you know just let me eat a few more

1323
00:59:09,579 --> 00:59:14,200
minutes at the Q&amp;A kind of thing so

1324
00:59:11,889 --> 00:59:21,960
let's just go to the Q&amp;A now and do it

1325
00:59:14,199 --> 00:59:21,960
that way so we'll see we shall see

1326
00:59:35,130 --> 00:59:42,220
girl and Oh bloom what is the most

1327
00:59:39,009 --> 00:59:47,380
expired food you have ever eaten that is

1328
00:59:42,219 --> 00:59:48,730
not a question that is related to the

1329
00:59:47,380 --> 00:59:52,869
programming girl and oh if that is for

1330
00:59:48,730 --> 00:59:56,048
the pre stream game Davey could you

1331
00:59:52,869 --> 01:00:01,028
explain what pop and push are and how

1332
00:59:56,048 --> 01:00:02,980
they work I don't get it we didn't

1333
01:00:01,028 --> 01:00:05,139
really use that nomming creature

1334
01:00:02,980 --> 01:00:09,190
anywhere did I just I probably just said

1335
01:00:05,139 --> 01:00:10,929
that or are you talking about these game

1336
01:00:09,190 --> 01:00:12,548
dev II could you be more specific do you

1337
01:00:10,929 --> 01:00:15,338
just mean what I'm talking about when I

1338
01:00:12,548 --> 01:00:18,338
say when we use the temporary stuff or

1339
01:00:15,338 --> 01:00:20,558
whatever somebody tell me what you mean

1340
01:00:18,338 --> 01:00:22,088
by pop and push just just just so I

1341
01:00:20,559 --> 01:00:24,539
don't answer like the wrong question

1342
01:00:22,088 --> 01:00:24,538
basically

1343
01:00:38,639 --> 01:00:44,239
I will I will wait patiently for the

1344
01:00:41,579 --> 01:00:44,239
elaboration

1345
01:00:52,500 --> 01:01:03,300
or not okay pop and push her memory

1346
01:01:01,030 --> 01:01:07,540
swords yes I can talk about that

1347
01:01:03,300 --> 01:01:10,330
alrighty so at the start of the game

1348
01:01:07,539 --> 01:01:12,369
so remember and again this I realize I

1349
01:01:10,329 --> 01:01:13,929
don't say this enough because I come

1350
01:01:12,369 --> 01:01:15,969
from a time when this was just a given

1351
01:01:13,929 --> 01:01:18,279
that everyone thought this way but I

1352
01:01:15,969 --> 01:01:20,109
realized that nowadays it's it's

1353
01:01:18,280 --> 01:01:21,730
possible to be a programmer who's

1354
01:01:20,110 --> 01:01:24,010
actually worked for many years and not

1355
01:01:21,730 --> 01:01:25,929
even think about things at all this way

1356
01:01:24,010 --> 01:01:27,430
so I'm just going to be very explicit

1357
01:01:25,929 --> 01:01:28,980
here because I realize not everyone

1358
01:01:27,429 --> 01:01:32,489
comes at it from a similar perspective

1359
01:01:28,980 --> 01:01:39,599
so first let's just say something memory

1360
01:01:32,489 --> 01:01:41,769
is a big line right so memory is

1361
01:01:39,599 --> 01:01:44,650
something in which I'm going to store

1362
01:01:41,769 --> 01:01:47,139
data and there's addresses to it right

1363
01:01:44,650 --> 01:01:48,820
and so I can talk about my computer's

1364
01:01:47,139 --> 01:01:49,900
memory how many however big it is I

1365
01:01:48,820 --> 01:01:51,400
don't know how much does I think this

1366
01:01:49,900 --> 01:01:53,670
this might have this this machine you

1367
01:01:51,400 --> 01:01:57,340
might have 12 gives 12 gigs of memory

1368
01:01:53,670 --> 01:02:00,460
right physical memory you know is

1369
01:01:57,340 --> 01:02:04,750
starting it is byte zero and going to

1370
01:02:00,460 --> 01:02:06,099
byte 12 gigabyte right but I'm actually

1371
01:02:04,750 --> 01:02:07,510
in virtual memory right because all

1372
01:02:06,099 --> 01:02:09,639
operating some views virtual memory so

1373
01:02:07,510 --> 01:02:12,970
technically you know this 12 gigabytes

1374
01:02:09,639 --> 01:02:14,980
of memory I don't actually look at

1375
01:02:12,969 --> 01:02:17,739
directly I don't actually see that

1376
01:02:14,980 --> 01:02:20,740
directly in terms of addressing right

1377
01:02:17,739 --> 01:02:24,489
what I see is virtual memory right so I

1378
01:02:20,739 --> 01:02:28,539
see a virtual address space imposed by

1379
01:02:24,489 --> 01:02:30,579
the CPU where it basically says okay

1380
01:02:28,539 --> 01:02:32,860
I'll tell you what Casey you've got this

1381
01:02:30,579 --> 01:02:34,840
virtual address space and when you want

1382
01:02:32,860 --> 01:02:37,059
to allocate memory right when you want

1383
01:02:34,840 --> 01:02:39,100
to use some memory I'm gonna tell you

1384
01:02:37,059 --> 01:02:42,070
that some part of your virtual address

1385
01:02:39,099 --> 01:02:44,829
space starting at byte something let's

1386
01:02:42,070 --> 01:02:46,750
say you know byte X and going for

1387
01:02:44,829 --> 01:02:48,610
however big you asked for so if you ask

1388
01:02:46,750 --> 01:02:52,269
for one gigabyte of memory it's gonna go

1389
01:02:48,610 --> 01:02:54,880
to X and an X plus 1 gigabyte right

1390
01:02:52,269 --> 01:02:57,369
these are the byte values literally like

1391
01:02:54,880 --> 01:02:59,619
a number some number that tells me where

1392
01:02:57,369 --> 01:03:02,319
we are in this thing and that's mapped

1393
01:02:59,619 --> 01:03:04,239
to some set of pages in physical memory

1394
01:03:02,320 --> 01:03:05,349
and I don't even know how it is right so

1395
01:03:04,239 --> 01:03:07,028
I never even see

1396
01:03:05,349 --> 01:03:09,849
the physical memory we're always dealing

1397
01:03:07,028 --> 01:03:11,289
with virtual addresses right so it's

1398
01:03:09,849 --> 01:03:12,910
interesting to talk about this sometimes

1399
01:03:11,289 --> 01:03:14,259
when we get down to it but as far as

1400
01:03:12,909 --> 01:03:16,210
we're concerned right now we're working

1401
01:03:14,259 --> 01:03:18,849
totally in a virtual address space right

1402
01:03:16,210 --> 01:03:20,440
that's managed by Windows and the CPU

1403
01:03:18,849 --> 01:03:23,619
and we don't even know exactly what it's

1404
01:03:20,440 --> 01:03:26,858
doing a lot of times so when I get

1405
01:03:23,619 --> 01:03:29,858
memory at the beginning of this of the

1406
01:03:26,858 --> 01:03:31,690
game if you remember we way back in one

1407
01:03:29,858 --> 01:03:33,130
of the early episodes we just allocated

1408
01:03:31,690 --> 01:03:35,130
I think it was one gigabyte of memory

1409
01:03:33,130 --> 01:03:41,470
for what we called transient storage

1410
01:03:35,130 --> 01:03:44,670
right and so what that does is it takes

1411
01:03:41,469 --> 01:03:47,528
a virtual big one gigabyte line and

1412
01:03:44,670 --> 01:03:50,409
reserves it for our use and it tells us

1413
01:03:47,528 --> 01:03:53,710
a number which is the base of that line

1414
01:03:50,409 --> 01:03:59,108
it tells us where it starts right so if

1415
01:03:53,710 --> 01:04:04,778
you imagine that I'll continue drawing

1416
01:03:59,108 --> 01:04:10,268
it this way so this is the start of our

1417
01:04:04,778 --> 01:04:11,829
transient memory so for all intents and

1418
01:04:10,268 --> 01:04:15,879
purposes you know we have a base pointer

1419
01:04:11,829 --> 01:04:24,900
you can see it in here hand a platform

1420
01:04:15,880 --> 01:04:24,900
down H memory

1421
01:04:25,690 --> 01:04:31,179
right here so you can see that we

1422
01:04:29,199 --> 01:04:32,199
basically we get past this at startup

1423
01:04:31,179 --> 01:04:34,088
this is what the platform layer

1424
01:04:32,199 --> 01:04:36,129
allocates for us it's got a void start

1425
01:04:34,088 --> 01:04:38,078
transient storage that's a pointer it's

1426
01:04:36,130 --> 01:04:39,818
the number that's in our virtual address

1427
01:04:38,079 --> 01:04:42,220
space where the start of that transit

1428
01:04:39,818 --> 01:04:44,529
storage is and it's this big however it

1429
01:04:42,219 --> 01:04:47,230
transmits storage size sets right so

1430
01:04:44,530 --> 01:04:49,690
this right here is transit storage

1431
01:04:47,230 --> 01:04:54,150
pointer right the points to right there

1432
01:04:49,690 --> 01:05:00,970
and this size is transient storage size

1433
01:04:54,150 --> 01:05:04,539
right so now when typically other stuff

1434
01:05:00,969 --> 01:05:09,969
would call like you know new write in

1435
01:05:04,539 --> 01:05:12,400
C++ or malloc and C or whatever in your

1436
01:05:09,969 --> 01:05:14,409
language whatever it is that allocates

1437
01:05:12,400 --> 01:05:17,889
something whatever you're used to

1438
01:05:14,409 --> 01:05:19,690
thinking in what that does is it

1439
01:05:17,889 --> 01:05:21,818
essentially actually does a similar

1440
01:05:19,690 --> 01:05:24,909
thing here it's got a big flat line

1441
01:05:21,818 --> 01:05:26,170
right and it goes and it finds a region

1442
01:05:24,909 --> 01:05:28,480
where it can stick the thing that you

1443
01:05:26,170 --> 01:05:30,460
wanted and it sticks it in there but

1444
01:05:28,480 --> 01:05:31,990
we're not using any of these because

1445
01:05:30,460 --> 01:05:34,150
honestly I think they're all kind of a

1446
01:05:31,989 --> 01:05:35,739
waste of time what we're doing instead

1447
01:05:34,150 --> 01:05:37,059
is we're just saying let's just manage

1448
01:05:35,739 --> 01:05:38,919
this directly because it's not that hard

1449
01:05:37,059 --> 01:05:40,750
to do and if we just managed it

1450
01:05:38,920 --> 01:05:43,450
ourselves we get a lot of benefits and

1451
01:05:40,750 --> 01:05:44,528
we we don't we get a lot faster and a

1452
01:05:43,449 --> 01:05:46,719
lot simpler in a lot of in a lot of

1453
01:05:44,528 --> 01:05:47,829
places in my opinion doesn't mean

1454
01:05:46,719 --> 01:05:50,848
there's anything wrong with these I just

1455
01:05:47,829 --> 01:05:53,650
don't like them my preference is is no

1456
01:05:50,849 --> 01:05:55,838
so what we do instead is we say all

1457
01:05:53,650 --> 01:05:57,490
right what happens when we need to do

1458
01:05:55,838 --> 01:06:00,159
anew what happens when we need to make

1459
01:05:57,489 --> 01:06:02,169
some storage well what we do is we just

1460
01:06:00,159 --> 01:06:05,980
say ok whenever we need to make storage

1461
01:06:02,170 --> 01:06:09,639
we just stick it at wherever the next

1462
01:06:05,980 --> 01:06:12,278
free space is on this in this line we

1463
01:06:09,639 --> 01:06:13,690
start at the very first byte byte you

1464
01:06:12,278 --> 01:06:15,639
know whatever the start of the transit

1465
01:06:13,690 --> 01:06:18,099
memory is and we just put it in there

1466
01:06:15,639 --> 01:06:19,659
and then we make whatever is immediately

1467
01:06:18,099 --> 01:06:21,338
after it the byte immediately after it

1468
01:06:19,659 --> 01:06:22,719
be the new space where we would put

1469
01:06:21,338 --> 01:06:24,730
things of new things comes in so if a

1470
01:06:22,719 --> 01:06:30,489
new thing comes in we do the same thing

1471
01:06:24,730 --> 01:06:32,829
right and I call this pushing because it

1472
01:06:30,489 --> 01:06:34,598
always just adds on to the end right

1473
01:06:32,829 --> 01:06:37,298
it's like pushing it on to the thing it

1474
01:06:34,599 --> 01:06:39,400
pushes it on pushes it on pushes it on

1475
01:06:37,298 --> 01:06:40,420
right it makes more sense

1476
01:06:39,400 --> 01:06:42,579
you think of it growing from the bottom

1477
01:06:40,420 --> 01:06:43,659
up I just didn't draw it that way but

1478
01:06:42,579 --> 01:06:45,339
you're like pushing something on top

1479
01:06:43,659 --> 01:06:46,568
right putting things on the bottoms a

1480
01:06:45,338 --> 01:06:48,730
little weird but I tend to draw them

1481
01:06:46,568 --> 01:06:52,150
from the top down because I like to

1482
01:06:48,730 --> 01:06:54,400
think of like this as being increasingly

1483
01:06:52,150 --> 01:06:55,778
positive going down that's just how like

1484
01:06:54,400 --> 01:07:00,338
humans are hard-wired because we read

1485
01:06:55,778 --> 01:07:02,739
top to bottom so when I say pop what I

1486
01:07:00,338 --> 01:07:04,778
mean is well if we pushed a bunch of

1487
01:07:02,739 --> 01:07:07,868
things on but now we don't need them

1488
01:07:04,778 --> 01:07:11,559
anymore we could just pop them off by

1489
01:07:07,869 --> 01:07:13,298
taking whatever the number is that we

1490
01:07:11,559 --> 01:07:15,789
started at so let's say we started here

1491
01:07:13,298 --> 01:07:19,088
this is some number X and we go down to

1492
01:07:15,789 --> 01:07:20,528
get to some number Y if we want to erase

1493
01:07:19,088 --> 01:07:22,119
all these things effectively that we

1494
01:07:20,528 --> 01:07:25,750
allocated if we basically want to do a

1495
01:07:22,119 --> 01:07:27,548
free operation we can just take whatever

1496
01:07:25,750 --> 01:07:29,460
our thing that was saying where the next

1497
01:07:27,548 --> 01:07:31,989
thing to allocate was and reset it to X

1498
01:07:29,460 --> 01:07:33,010
you can just jump back down and now

1499
01:07:31,989 --> 01:07:34,689
those things are effectively gone

1500
01:07:33,010 --> 01:07:36,609
because whatever the next thing that

1501
01:07:34,690 --> 01:07:40,510
gets allocated will overwrite some of

1502
01:07:36,608 --> 01:07:45,278
them right we'll just overwrite them so

1503
01:07:40,510 --> 01:07:48,460
push is a lock and pop is free right now

1504
01:07:45,278 --> 01:07:51,219
the restriction here is you have to do

1505
01:07:48,460 --> 01:07:52,960
these in order right you can't free

1506
01:07:51,219 --> 01:07:56,139
something out of the middle of this

1507
01:07:52,960 --> 01:07:57,970
stack and so the thing that gets the

1508
01:07:56,139 --> 01:08:00,848
thing that that is I think the reason

1509
01:07:57,969 --> 01:08:03,368
people lean on these so heavily is these

1510
01:08:00,849 --> 01:08:06,039
are out of order allocations and free

1511
01:08:03,369 --> 01:08:07,990
things and we have to implement that

1512
01:08:06,039 --> 01:08:10,809
ourselves we already did it with a free

1513
01:08:07,989 --> 01:08:12,429
list in one place and that's what I

1514
01:08:10,809 --> 01:08:13,900
prefer to use I tend to prefer to use

1515
01:08:12,429 --> 01:08:15,368
free lists so that once things get

1516
01:08:13,900 --> 01:08:18,158
allocated they never really go away

1517
01:08:15,369 --> 01:08:19,480
unless they're purely temporary and I

1518
01:08:18,158 --> 01:08:20,679
find that's way more efficient and I

1519
01:08:19,479 --> 01:08:21,879
never run into all those problems that

1520
01:08:20,679 --> 01:08:23,170
people have where they're like oh my god

1521
01:08:21,880 --> 01:08:24,909
we got memory fragmentation and we're

1522
01:08:23,170 --> 01:08:26,739
allocating so much per frame and all

1523
01:08:24,908 --> 01:08:28,899
these a locks and oh my god and whatever

1524
01:08:26,738 --> 01:08:32,588
is going on and plus it allows us to do

1525
01:08:28,899 --> 01:08:34,210
a lot of easier stuff in terms of

1526
01:08:32,588 --> 01:08:36,609
visualizing our memory space but that's

1527
01:08:34,210 --> 01:08:39,100
a thing for a later date so that's what

1528
01:08:36,609 --> 01:08:40,509
I mean in terms of push a pop but if you

1529
01:08:39,100 --> 01:08:41,859
didn't want to do any of this if you're

1530
01:08:40,509 --> 01:08:44,649
like I don't know Casey I don't like

1531
01:08:41,859 --> 01:08:46,949
this it feels freaky you could just

1532
01:08:44,649 --> 01:08:50,789
imagine doing new and free everywhere

1533
01:08:46,948 --> 01:08:53,259
right but you can already kind of see

1534
01:08:50,789 --> 01:08:54,729
why there's some nice thing

1535
01:08:53,260 --> 01:08:56,500
about doing it this way like just think

1536
01:08:54,729 --> 01:08:59,169
of all the complexity we didn't have to

1537
01:08:56,500 --> 01:09:05,350
have because we were doing it this way

1538
01:08:59,170 --> 01:09:09,190
right all I had to do to just make that

1539
01:09:05,350 --> 01:09:11,620
whole sim region go away right was just

1540
01:09:09,189 --> 01:09:13,839
this one call begin temporary and then

1541
01:09:11,619 --> 01:09:16,090
at the end we said and temporary right

1542
01:09:13,840 --> 01:09:17,890
that would have if we were doing that

1543
01:09:16,090 --> 01:09:20,949
with the crazy you know

1544
01:09:17,890 --> 01:09:22,420
garbage-collected point or nonsense all

1545
01:09:20,949 --> 01:09:23,949
of this work would have have to go on

1546
01:09:22,420 --> 01:09:25,149
behind the scenes to go okay what's in a

1547
01:09:23,949 --> 01:09:26,979
sim region okay these things are in a

1548
01:09:25,149 --> 01:09:28,960
sim region mixer okay destroy all of

1549
01:09:26,979 --> 01:09:30,789
those what are they pointing to destroy

1550
01:09:28,960 --> 01:09:32,770
the things that they're pointing to okay

1551
01:09:30,789 --> 01:09:35,470
wait are these pointers is that thing

1552
01:09:32,770 --> 01:09:39,400
still reachable all that stuff is just

1553
01:09:35,470 --> 01:09:41,110
gone we never pay it at all right the

1554
01:09:39,399 --> 01:09:42,460
most optimal code is the code that never

1555
01:09:41,109 --> 01:09:44,049
gets run I think my K Bret said

1556
01:09:42,460 --> 01:09:47,199
something like that right and we are

1557
01:09:44,050 --> 01:09:49,930
right in that sweet spot here we don't

1558
01:09:47,199 --> 01:09:53,109
have to do any work to clean up what we

1559
01:09:49,930 --> 01:09:55,900
do all we do is we set one number it's

1560
01:09:53,109 --> 01:09:57,729
like the old number the new number

1561
01:09:55,899 --> 01:10:00,159
equals the old number whatever like our

1562
01:09:57,729 --> 01:10:03,909
stack top equals the old stack top

1563
01:10:00,159 --> 01:10:06,430
that's it right and that's just so

1564
01:10:03,909 --> 01:10:09,760
powerful and so efficient compared to if

1565
01:10:06,430 --> 01:10:12,550
we had been doing these things we would

1566
01:10:09,760 --> 01:10:15,070
have had to either implement a bunch of

1567
01:10:12,550 --> 01:10:16,960
stuff ourselves to do it or lean on a

1568
01:10:15,069 --> 01:10:18,909
garbage collection system some

1569
01:10:16,960 --> 01:10:20,859
pre-written garbage source and to do it

1570
01:10:18,909 --> 01:10:22,659
for us if we didn't want to just be a

1571
01:10:20,859 --> 01:10:25,119
nightmare territory all the time here

1572
01:10:22,659 --> 01:10:26,349
right and so that's why I highly

1573
01:10:25,119 --> 01:10:28,180
recommend exploring doing your own

1574
01:10:26,350 --> 01:10:29,770
memory management cuz you may find that

1575
01:10:28,180 --> 01:10:31,720
for a lot of the stuff you do it's

1576
01:10:29,770 --> 01:10:36,690
incredibly efficient and really pretty

1577
01:10:31,720 --> 01:10:36,690
simple but it's just not that much to it

1578
01:10:49,970 --> 01:10:55,260
how will the ground texture chunking

1579
01:10:52,949 --> 01:10:59,789
handle adjacent rooms with different

1580
01:10:55,260 --> 01:11:02,940
types of ground well that's more of a

1581
01:10:59,789 --> 01:11:06,210
world generation question so basically

1582
01:11:02,939 --> 01:11:07,979
like the world the the tile chunks I'm

1583
01:11:06,210 --> 01:11:10,439
sorry the ground chunks or ground

1584
01:11:07,979 --> 01:11:13,109
buffers I guess we're calling them or

1585
01:11:10,439 --> 01:11:15,389
just saying get me whatever had to be in

1586
01:11:13,109 --> 01:11:17,130
this region but whatever we do to fill

1587
01:11:15,390 --> 01:11:18,750
that can be as complicated as we want so

1588
01:11:17,130 --> 01:11:20,699
it can do like some ground and then

1589
01:11:18,750 --> 01:11:22,109
overwrite it with some floor and even

1590
01:11:20,699 --> 01:11:24,269
like feather the edges between them or

1591
01:11:22,109 --> 01:11:28,319
whatever that fill operation can be

1592
01:11:24,270 --> 01:11:30,240
incredibly complicated right and it'll

1593
01:11:28,319 --> 01:11:33,840
get complicated even without what you're

1594
01:11:30,239 --> 01:11:34,979
saying even without just overlapping

1595
01:11:33,840 --> 01:11:36,840
because yeah you're saying you're saying

1596
01:11:34,979 --> 01:11:39,959
base for like I have a chunk and like

1597
01:11:36,840 --> 01:11:42,119
here's a room boundary you know and this

1598
01:11:39,960 --> 01:11:44,310
is like some kind of a tile floor here

1599
01:11:42,119 --> 01:11:46,710
but this is like you know grass or

1600
01:11:44,310 --> 01:11:48,870
whatever right and the answer is like

1601
01:11:46,710 --> 01:11:50,369
that's the compositors problem so we'll

1602
01:11:48,869 --> 01:11:52,529
work on that we deal compositing we

1603
01:11:50,369 --> 01:11:53,729
don't care about that for the rendering

1604
01:11:52,529 --> 01:11:55,289
stuff that we're doing here we're just

1605
01:11:53,729 --> 01:11:57,569
trying to figure out how we fill it in

1606
01:11:55,289 --> 01:11:59,130
how we place it in places but yeah

1607
01:11:57,569 --> 01:12:00,630
that's just stuff will do well like you

1608
01:11:59,130 --> 01:12:02,369
know it'll do the ground splats and then

1609
01:12:00,630 --> 01:12:04,829
it'll like draw some tiles in there and

1610
01:12:02,369 --> 01:12:06,630
off we go similarly you'll have to

1611
01:12:04,829 --> 01:12:08,760
handle stuff like oh there's a river

1612
01:12:06,630 --> 01:12:10,350
running through this this thing and like

1613
01:12:08,760 --> 01:12:12,329
here's the edge of the river or whatever

1614
01:12:10,350 --> 01:12:14,820
right and the ground is here but like

1615
01:12:12,329 --> 01:12:17,039
water is here or whatever running

1616
01:12:14,819 --> 01:12:18,630
running along it or something right so

1617
01:12:17,039 --> 01:12:20,640
there's plenty of stuff that we have to

1618
01:12:18,630 --> 01:12:23,010
deal with there but that's really that's

1619
01:12:20,640 --> 01:12:25,280
really more about the procedural texture

1620
01:12:23,010 --> 01:12:27,180
generation aspects and not about the

1621
01:12:25,279 --> 01:12:30,769
chunking scheme because the chunking

1622
01:12:27,180 --> 01:12:30,770
scheme is whatever chunking scheme is

1623
01:12:37,399 --> 01:12:42,229
is that it for clues is that it for cues

1624
01:12:50,189 --> 01:13:00,289
I think that's it for Q's we're done

1625
01:12:57,539 --> 01:13:00,289
earlier today aren't we

1626
01:13:04,078 --> 01:13:13,558
well alright no more queues I guess

1627
01:13:08,649 --> 01:13:15,929
we're good to go I will wrap things up

1628
01:13:13,559 --> 01:13:19,239
all right let me close this down

1629
01:13:15,929 --> 01:13:25,618
save our mischief like I like saying

1630
01:13:19,238 --> 01:13:28,538
save our mistress close this alright

1631
01:13:25,618 --> 01:13:30,460
well that was an easy one

1632
01:13:28,538 --> 01:13:32,859
thank you everyone for joining me for

1633
01:13:30,460 --> 01:13:33,908
another episode of handmade hero it's

1634
01:13:32,859 --> 01:13:35,679
been a pleasure coding with you as

1635
01:13:33,908 --> 01:13:36,759
always I've kind of excited for tomorrow

1636
01:13:35,679 --> 01:13:38,319
because then we'll have our ground tile

1637
01:13:36,760 --> 01:13:40,420
working I think because we've basically

1638
01:13:38,319 --> 01:13:41,649
done everything we need to so really we

1639
01:13:40,420 --> 01:13:43,840
just have to do some kind of an LRU

1640
01:13:41,649 --> 01:13:45,308
scheme there and we'll be good to go so

1641
01:13:43,840 --> 01:13:46,690
that's gonna be kind of fun to have a

1642
01:13:45,309 --> 01:13:49,000
nice ground texture and then we can

1643
01:13:46,689 --> 01:13:51,098
start looking again at kinda you know

1644
01:13:49,000 --> 01:13:52,599
how to kind of do some some multi-level

1645
01:13:51,099 --> 01:13:55,929
stuff there just to try to finish up our

1646
01:13:52,599 --> 01:13:57,699
ground like handling our whole sort of

1647
01:13:55,929 --> 01:13:58,868
ground state because we really haven't

1648
01:13:57,698 --> 01:14:00,308
done the collision detection stuff that

1649
01:13:58,868 --> 01:14:01,839
we need to do to finish that up so I

1650
01:14:00,309 --> 01:14:03,909
still got there but we're we're in the

1651
01:14:01,840 --> 01:14:05,769
homestretch on this sort of on this sort

1652
01:14:03,908 --> 01:14:08,049
of stuff and then we're in you know like

1653
01:14:05,769 --> 01:14:10,179
I said we're in front kind of we're kind

1654
01:14:08,050 --> 01:14:13,538
of a fun time I think we got a bunch of

1655
01:14:10,179 --> 01:14:15,038
code to do that will that will probably

1656
01:14:13,538 --> 01:14:16,599
go by fairly quickly I like the debug

1657
01:14:15,038 --> 01:14:18,399
code and that sort of stuff and so it'll

1658
01:14:16,599 --> 01:14:20,050
be kind of interesting I don't know it's

1659
01:14:18,399 --> 01:14:26,379
all good

1660
01:14:20,050 --> 01:14:27,699
yep it's all good and and yeah I guess I

1661
01:14:26,380 --> 01:14:28,719
have nothing else to add other than I've

1662
01:14:27,698 --> 01:14:30,518
studied for tomorrow because I want to

1663
01:14:28,719 --> 01:14:31,658
see that work and we've done pretty much

1664
01:14:30,519 --> 01:14:33,519
everything we need to do to make it work

1665
01:14:31,658 --> 01:14:36,158
we just didn't quite have time today to

1666
01:14:33,519 --> 01:14:37,360
actually go in and and have some you

1667
01:14:36,158 --> 01:14:39,429
know have something intelligent scheme

1668
01:14:37,359 --> 01:14:41,558
about what gets filled win so we'll do

1669
01:14:39,429 --> 01:14:44,880
that tomorrow and we'll be good and that

1670
01:14:41,559 --> 01:14:48,159
will happen again at 5:00 p.m. Pacific

1671
01:14:44,880 --> 01:14:50,109
Pacific Daylight Time so same time the

1672
01:14:48,158 --> 01:14:50,979
same place as today I hope to see you

1673
01:14:50,109 --> 01:14:52,750
all there

1674
01:14:50,979 --> 01:14:54,729
if you would like to follow along at

1675
01:14:52,750 --> 01:14:56,889
home with the source code you can do

1676
01:14:54,729 --> 01:14:59,078
that by pre-ordering the game on

1677
01:14:56,889 --> 01:15:01,239
handmade hero org if you preorder the

1678
01:14:59,078 --> 01:15:02,469
game comes with a source code you'll get

1679
01:15:01,238 --> 01:15:04,359
a link in your email which you can

1680
01:15:02,469 --> 01:15:05,649
download anytime you want

1681
01:15:04,359 --> 01:15:08,018
in fact if you lose it there's now a

1682
01:15:05,649 --> 01:15:09,279
little habit reset button down here in

1683
01:15:08,019 --> 01:15:11,920
case you lose your download link so

1684
01:15:09,279 --> 01:15:13,359
that's a good thing too so please check

1685
01:15:11,920 --> 01:15:14,710
that out if you're interested also we

1686
01:15:13,359 --> 01:15:15,670
have a patreon if you want to support

1687
01:15:14,710 --> 01:15:16,809
the video series you can always

1688
01:15:15,670 --> 01:15:17,770
subscribe to that it is greatly

1689
01:15:16,809 --> 01:15:19,150
appreciated

1690
01:15:17,770 --> 01:15:20,920
we have a news and forums site where you

1691
01:15:19,149 --> 01:15:22,179
can ask questions and you can get ports

1692
01:15:20,920 --> 01:15:24,130
of the game to Linux and Mac the

1693
01:15:22,180 --> 01:15:25,780
community have done there's also an

1694
01:15:24,130 --> 01:15:26,949
episode guide that's annotated which is

1695
01:15:25,779 --> 01:15:30,009
really great for catching up on old

1696
01:15:26,949 --> 01:15:33,819
episodes and do not forget to check out

1697
01:15:30,010 --> 01:15:36,520
the most awesome artificial intelligence

1698
01:15:33,819 --> 01:15:38,679
ever created by humankind ladies and

1699
01:15:36,520 --> 01:15:41,050
gentlemen the hand made hero tweets

1700
01:15:38,680 --> 01:15:44,260
scheduled tweet bot which tweets the

1701
01:15:41,050 --> 01:15:46,329
schedule at you we believe it may slowly

1702
01:15:44,260 --> 01:15:48,550
becoming sentient we don't know this for

1703
01:15:46,329 --> 01:15:50,170
sure but we think that it may have been

1704
01:15:48,550 --> 01:15:51,820
because it is so powerful and now even

1705
01:15:50,170 --> 01:15:53,739
understands time zones so that's

1706
01:15:51,819 --> 01:15:54,939
something to be pretty excited about so

1707
01:15:53,739 --> 01:15:56,469
if you want to subscribe to that it'll

1708
01:15:54,939 --> 01:15:58,179
tell you when the show is and that's

1709
01:15:56,470 --> 01:15:59,170
pretty handy so thank you very much for

1710
01:15:58,180 --> 01:16:04,630
joining me hope see you here tomorrow

1711
01:15:59,170 --> 01:16:09,840
again at 5 p.m. Pt PDT or PSD I guess

1712
01:16:04,630 --> 01:16:09,840
and until then have a wonderful day

