1
00:00:01,639 --> 00:00:05,129
hello everyone and welcome to hand made

2
00:00:03,870 --> 00:00:08,160
here oh sure we code a complete game

3
00:00:05,129 --> 00:00:12,210
live on stream I realized something this

4
00:00:08,160 --> 00:00:13,830
week while I was just kind of you know I

5
00:00:12,210 --> 00:00:15,660
don't even know what I was doing

6
00:00:13,830 --> 00:00:17,660
probably just sitting around and I was

7
00:00:15,660 --> 00:00:21,689
randomly thinking about the raytracer

8
00:00:17,660 --> 00:00:23,490
and I realized that the new system that

9
00:00:21,689 --> 00:00:24,240
we were making that does the grid style

10
00:00:23,489 --> 00:00:26,009
ray-tracing

11
00:00:24,239 --> 00:00:29,750
is actually like way better than I

12
00:00:26,010 --> 00:00:33,600
thought it was because previously I

13
00:00:29,750 --> 00:00:35,250
don't know if this makes sense but like

14
00:00:33,600 --> 00:00:37,410
previously I was just like well I don't

15
00:00:35,250 --> 00:00:39,238
know if this is gonna be faster you know

16
00:00:37,409 --> 00:00:41,398
what I mean I was like what you know it

17
00:00:39,238 --> 00:00:43,259
might be it might not be but you know

18
00:00:41,399 --> 00:00:45,620
it's kind of hard to say whether it will

19
00:00:43,259 --> 00:00:48,269
be faster or not and I realized that

20
00:00:45,619 --> 00:00:50,729
actually it's not only gonna be faster

21
00:00:48,270 --> 00:00:52,590
but it's gonna be way faster and let me

22
00:00:50,729 --> 00:00:54,599
show you why so I'm pretty happy I'm

23
00:00:52,590 --> 00:00:56,250
like basically positive that the latest

24
00:00:54,600 --> 00:01:04,609
ray tracer is the one this is the one

25
00:00:56,250 --> 00:01:12,359
I'm gonna use so here's grid ray tracing

26
00:01:04,609 --> 00:01:13,799
four light probes so I've never I've

27
00:01:12,359 --> 00:01:16,469
literally never seen this mentioned

28
00:01:13,799 --> 00:01:19,350
before and I'm guessing that's because I

29
00:01:16,469 --> 00:01:21,420
just well either I forgot and it was

30
00:01:19,349 --> 00:01:22,919
mentioned before or I just haven't read

31
00:01:21,420 --> 00:01:25,799
enough of the papers on this or

32
00:01:22,920 --> 00:01:27,299
something but this is actually so

33
00:01:25,799 --> 00:01:30,450
obvious when you think about it it's

34
00:01:27,299 --> 00:01:33,509
like how could you not do this once you

35
00:01:30,450 --> 00:01:35,640
build a system like this so in a grid

36
00:01:33,509 --> 00:01:37,560
based ray tracer if you remember what I

37
00:01:35,640 --> 00:01:39,629
said was I was like well alright so the

38
00:01:37,560 --> 00:01:42,090
way this would work is we bin everything

39
00:01:39,629 --> 00:01:43,709
into the grid so you know if there's a

40
00:01:42,090 --> 00:01:45,299
thing that you could hit and it's over

41
00:01:43,709 --> 00:01:47,548
here or things that you hit if we just

42
00:01:45,299 --> 00:01:49,799
put them in the various grid spaces you

43
00:01:47,549 --> 00:01:52,020
know where those things exist and then

44
00:01:49,799 --> 00:01:54,030
our ray tracer just does basically like

45
00:01:52,019 --> 00:01:56,609
what amounts to sort of a brezin ham

46
00:01:54,030 --> 00:01:58,710
like walk through this thing and we can

47
00:01:56,609 --> 00:02:00,959
compute those walks because since our

48
00:01:58,709 --> 00:02:03,868
ray paths are randomized ray paths are

49
00:02:00,959 --> 00:02:06,780
pre computed as well we can just pre

50
00:02:03,868 --> 00:02:08,399
compute those walks to and so what I was

51
00:02:06,780 --> 00:02:11,159
thinking is like well the question that

52
00:02:08,399 --> 00:02:13,080
I have in my head is how you know we

53
00:02:11,159 --> 00:02:13,859
know that this you know thing might be

54
00:02:13,080 --> 00:02:17,400
like 32

55
00:02:13,860 --> 00:02:19,200
by 32 by 32 right and so in a typical

56
00:02:17,400 --> 00:02:20,969
case I don't know how many grid squares

57
00:02:19,199 --> 00:02:22,799
you would expect to encounter but this

58
00:02:20,969 --> 00:02:24,719
number could be like relatively high

59
00:02:22,800 --> 00:02:25,980
right like and if you were on one side

60
00:02:24,719 --> 00:02:28,439
of the grid and you were casting towards

61
00:02:25,979 --> 00:02:32,609
the other side of the grid then you know

62
00:02:28,439 --> 00:02:34,409
it could be as bad as like a fully a

63
00:02:32,610 --> 00:02:36,030
full diagonal walk that's not the common

64
00:02:34,409 --> 00:02:37,560
case the common case is probably more

65
00:02:36,030 --> 00:02:39,930
like 50 grid cells or something like

66
00:02:37,560 --> 00:02:43,229
that but that's still 50 loops through

67
00:02:39,930 --> 00:02:46,319
the iteration of loading leaves and it's

68
00:02:43,229 --> 00:02:47,909
just a lot right and so it's like well I

69
00:02:46,319 --> 00:02:49,439
don't know like that could end up

70
00:02:47,909 --> 00:02:51,329
tanking it it could be that in general

71
00:02:49,439 --> 00:02:53,219
it's just not faster so even though the

72
00:02:51,330 --> 00:02:58,230
loop itself is probably a lot better

73
00:02:53,219 --> 00:03:02,659
than the AABB tree descent loop yeah you

74
00:02:58,229 --> 00:03:05,039
know but then I realized something I

75
00:03:02,659 --> 00:03:08,849
realized that early termination is

76
00:03:05,039 --> 00:03:11,909
totally awesome right so here's the

77
00:03:08,849 --> 00:03:13,949
thing suppose you want to put a hard

78
00:03:11,909 --> 00:03:16,379
bound on how long this thing can take

79
00:03:13,949 --> 00:03:18,750
right and you just want to say I don't

80
00:03:16,379 --> 00:03:21,930
want that case to ever occur

81
00:03:18,750 --> 00:03:25,110
well we have light probes every grid

82
00:03:21,930 --> 00:03:28,200
square right so if we just instead say

83
00:03:25,110 --> 00:03:31,590
look this thing operates in like a 4 by

84
00:03:28,199 --> 00:03:34,439
4 by 4 or like an 8 by 8 by 8 that's it

85
00:03:31,590 --> 00:03:36,989
right we don't care how big the total

86
00:03:34,439 --> 00:03:39,840
voxel is we only care about a subspace

87
00:03:36,989 --> 00:03:42,180
of it then what we can do is do the

88
00:03:39,840 --> 00:03:44,909
raycast in like a local region like

89
00:03:42,180 --> 00:03:50,489
let's say like this and when this thing

90
00:03:44,909 --> 00:03:53,400
goes like more than 4 squares we just

91
00:03:50,489 --> 00:03:55,860
stop and we look at the light probe in

92
00:03:53,400 --> 00:03:57,989
the square where we stopped and we use

93
00:03:55,860 --> 00:04:01,500
the light coming back in this direction

94
00:03:57,989 --> 00:04:04,920
as the answer right so basically what we

95
00:04:01,500 --> 00:04:08,039
can do is we can trade light propagation

96
00:04:04,919 --> 00:04:10,708
speed for computation time and make it

97
00:04:08,039 --> 00:04:13,139
so that it takes maybe 2 or 3 frames for

98
00:04:10,709 --> 00:04:14,759
light to propagate from all the way on

99
00:04:13,139 --> 00:04:18,509
one side of the map to all the way on

100
00:04:14,759 --> 00:04:19,918
the other side of the map but we can put

101
00:04:18,509 --> 00:04:22,139
a hard bound on the amount of time the

102
00:04:19,918 --> 00:04:24,060
recasting takes and this is not

103
00:04:22,139 --> 00:04:27,439
something we could have done with the

104
00:04:24,060 --> 00:04:27,439
ABM at all right

105
00:04:31,689 --> 00:04:37,250
so previously we had considered this and

106
00:04:35,019 --> 00:04:39,649
there's a lot of schemes that do this

107
00:04:37,250 --> 00:04:41,000
sort of thing right that are similar to

108
00:04:39,649 --> 00:04:42,799
this like there's a lot of schemes that

109
00:04:41,000 --> 00:04:44,620
you see like with a B B's we even tried

110
00:04:42,800 --> 00:04:46,790
a little bit by basically saying look

111
00:04:44,620 --> 00:04:49,699
when array gets to a certain distance

112
00:04:46,790 --> 00:04:51,610
just use a higher up thing in the

113
00:04:49,699 --> 00:04:53,990
hierarchy in the rate hierarchy and

114
00:04:51,610 --> 00:04:55,840
return whatever light that thing was

115
00:04:53,990 --> 00:05:00,139
gonna be you know what I mean

116
00:04:55,839 --> 00:05:02,479
but that's a very bad approximation this

117
00:05:00,139 --> 00:05:05,360
is a very good approximation we're

118
00:05:02,480 --> 00:05:07,460
actually taking whatever the local light

119
00:05:05,360 --> 00:05:10,280
transmitted and what mittens was in that

120
00:05:07,459 --> 00:05:13,129
area and pushing it back right so

121
00:05:10,279 --> 00:05:15,409
actually it's quite a bit more accurate

122
00:05:13,129 --> 00:05:17,089
than the way the AABB scheme was working

123
00:05:15,410 --> 00:05:20,000
because at least we determined that you

124
00:05:17,089 --> 00:05:21,979
could get there right and that you were

125
00:05:20,000 --> 00:05:25,220
in the locus of something that was

126
00:05:21,980 --> 00:05:26,960
producing light in that direction so I

127
00:05:25,220 --> 00:05:29,240
feel like this is actually really good

128
00:05:26,959 --> 00:05:31,219
and it doesn't cost you anything we

129
00:05:29,240 --> 00:05:32,629
don't have to build a secondary scheme

130
00:05:31,220 --> 00:05:34,430
like you normally would like with the a

131
00:05:32,629 --> 00:05:36,709
B B's we had to build a secondary scheme

132
00:05:34,430 --> 00:05:40,400
we had to actually track lights up to a

133
00:05:36,709 --> 00:05:42,589
B we don't have to do that on this so I

134
00:05:40,399 --> 00:05:44,899
think it's really pretty awesome and I'm

135
00:05:42,589 --> 00:05:47,289
not sure why I haven't seen it mentioned

136
00:05:44,899 --> 00:05:50,599
before it's basically like free

137
00:05:47,290 --> 00:05:52,250
irradiance caching that you just get

138
00:05:50,600 --> 00:05:54,350
because if you were building light

139
00:05:52,250 --> 00:05:56,600
probes anyway why don't you just use

140
00:05:54,350 --> 00:05:58,040
them I'm sure that's somewhere and if

141
00:05:56,600 --> 00:05:59,390
someone wants to go find the paper that

142
00:05:58,040 --> 00:05:59,990
would probably be nice to be able to

143
00:05:59,389 --> 00:06:02,120
post

144
00:05:59,990 --> 00:06:05,139
I'm sure there's like a euro graphics

145
00:06:02,120 --> 00:06:08,090
paper from 2007 or something called like

146
00:06:05,139 --> 00:06:12,939
light probes for grid rate racing or

147
00:06:08,089 --> 00:06:16,969
something and I never probably saw it

148
00:06:12,939 --> 00:06:19,969
but it's just worth noting so this is

149
00:06:16,970 --> 00:06:21,890
like basically you get you get

150
00:06:19,970 --> 00:06:23,510
irradiance caching for free if you were

151
00:06:21,889 --> 00:06:25,729
already doing at a radience cash for

152
00:06:23,509 --> 00:06:27,849
your render time if you use the same

153
00:06:25,730 --> 00:06:31,310
data structure as your light probe

154
00:06:27,850 --> 00:06:33,560
spatial index for your collision

155
00:06:31,310 --> 00:06:35,060
detection you get this for free and

156
00:06:33,560 --> 00:06:37,430
that's the thing that I hadn't seen

157
00:06:35,060 --> 00:06:39,530
mentioned before it seems obvious so I'm

158
00:06:37,430 --> 00:06:40,189
sure it is out there it's just I hadn't

159
00:06:39,529 --> 00:06:42,919
thought about it

160
00:06:40,189 --> 00:06:44,509
and now I have so this definitely what

161
00:06:42,920 --> 00:06:46,730
we're going to do because that means we

162
00:06:44,509 --> 00:06:49,310
can go we could go as low as one grid

163
00:06:46,730 --> 00:06:52,180
square if we wanted to right and just

164
00:06:49,310 --> 00:06:54,500
have slow light propagation but

165
00:06:52,180 --> 00:06:57,920
instantaneous rate racing basically to

166
00:06:54,500 --> 00:07:07,550
like reduce that time down so I really

167
00:06:57,920 --> 00:07:12,920
think like it's really pretty good so

168
00:07:07,550 --> 00:07:15,980
the only thing that I think is the only

169
00:07:12,920 --> 00:07:20,150
thing that it doesn't do perfect is that

170
00:07:15,980 --> 00:07:22,250
previously the loop had only one

171
00:07:20,149 --> 00:07:24,699
termination condition and in this case

172
00:07:22,250 --> 00:07:32,569
we now have two termination conditions

173
00:07:24,699 --> 00:07:34,459
and you know that's not fabulous because

174
00:07:32,569 --> 00:07:37,180
before the termination condition was

175
00:07:34,459 --> 00:07:39,109
you've got to the end of the grid

176
00:07:37,180 --> 00:07:41,990
whereas now the termination condition

177
00:07:39,110 --> 00:07:45,290
has to be you got to the end of the grid

178
00:07:41,990 --> 00:07:47,060
or you took too long right and what we

179
00:07:45,290 --> 00:07:50,780
can do there is just like count how many

180
00:07:47,060 --> 00:07:53,629
leaf iterations we've done you know or

181
00:07:50,779 --> 00:07:56,299
something like that and just use that as

182
00:07:53,629 --> 00:07:58,899
a termination criteria to enforce a sort

183
00:07:56,300 --> 00:08:02,629
of known upper bound on the compute time

184
00:07:58,899 --> 00:08:05,409
and so adding a secondary condition

185
00:08:02,629 --> 00:08:09,199
there isn't the best thing in the world

186
00:08:05,410 --> 00:08:15,800
to be sure but it is at least something

187
00:08:09,199 --> 00:08:17,659
that we you know the amount of savings

188
00:08:15,800 --> 00:08:19,460
that it would produce is pretty vast so

189
00:08:17,660 --> 00:08:22,400
it's not like we're adding a check to

190
00:08:19,459 --> 00:08:23,750
the loop for no real reason so I would

191
00:08:22,399 --> 00:08:25,129
say that's pretty awesome like I'm

192
00:08:23,750 --> 00:08:29,930
pretty excited about that because that

193
00:08:25,129 --> 00:08:35,210
pretty much gets me out of the weeds on

194
00:08:29,930 --> 00:08:38,538
performance by taking out but by putting

195
00:08:35,210 --> 00:08:40,788
in like a dial we can just adjust so

196
00:08:38,538 --> 00:08:42,529
that on faster computers we just have

197
00:08:40,788 --> 00:08:44,000
faster light propagation and on slower

198
00:08:42,529 --> 00:08:47,990
computers we just have slower light

199
00:08:44,000 --> 00:08:49,909
propagation rather than having to like

200
00:08:47,990 --> 00:08:51,769
really stress over the optimization of

201
00:08:49,909 --> 00:08:53,120
this routine and like if we can't get it

202
00:08:51,769 --> 00:08:54,120
fast enough then we're really dead in

203
00:08:53,120 --> 00:08:56,339
the water

204
00:08:54,120 --> 00:08:58,860
now it's kind of the opposite it's like

205
00:08:56,339 --> 00:09:00,779
look we want to optimize this routine

206
00:08:58,860 --> 00:09:03,480
because it will ensure that we get

207
00:09:00,778 --> 00:09:05,009
higher quality lighting but we don't

208
00:09:03,480 --> 00:09:06,600
have to worry about the optimization

209
00:09:05,009 --> 00:09:10,259
from a performance standpoint because we

210
00:09:06,600 --> 00:09:13,259
can really turn down the distance and

211
00:09:10,259 --> 00:09:15,028
then produce a faster routine just by

212
00:09:13,259 --> 00:09:19,129
having it take longer to propagate the

213
00:09:15,028 --> 00:09:19,129
light so I think that's awesome

214
00:09:24,860 --> 00:09:33,539
all right so that's where we wrap and I

215
00:09:30,899 --> 00:09:36,809
guess like I was saying so if you look

216
00:09:33,539 --> 00:09:39,838
in here so here's the the new routine

217
00:09:36,809 --> 00:09:43,799
and you can see how it works we load up

218
00:09:39,839 --> 00:09:44,700
a spatial grid node here and then we you

219
00:09:43,799 --> 00:09:47,699
know because we've got the start index

220
00:09:44,700 --> 00:09:50,759
and all that stuff right so we load up a

221
00:09:47,700 --> 00:09:52,710
spatial grid node and if it looks like

222
00:09:50,759 --> 00:09:55,679
it was a terminator so if it was on the

223
00:09:52,710 --> 00:10:00,889
apron then we stop otherwise we keep

224
00:09:55,679 --> 00:10:00,889
going and like I kind of said before

225
00:10:03,649 --> 00:10:12,329
there's sort of this issue of the ideal

226
00:10:07,980 --> 00:10:15,330
thing now if I could would be to just

227
00:10:12,330 --> 00:10:17,850
have a single count that said how far

228
00:10:15,330 --> 00:10:20,160
have I gone and that way I can just stop

229
00:10:17,850 --> 00:10:22,170
at that point or something because that

230
00:10:20,159 --> 00:10:25,889
would handle both cases it would handle

231
00:10:22,169 --> 00:10:31,679
not walking outside of the grid and it

232
00:10:25,889 --> 00:10:34,919
would also handle not it would handle

233
00:10:31,679 --> 00:10:38,159
the termination for speed but the

234
00:10:34,919 --> 00:10:41,759
problem is I can't really produce that

235
00:10:38,159 --> 00:10:43,350
value very conveniently mm-hmm so if I

236
00:10:41,759 --> 00:10:45,750
did want to switch this over to a for

237
00:10:43,350 --> 00:10:48,810
loop that was just here and it looped

238
00:10:45,750 --> 00:10:50,639
over some number of things the reason

239
00:10:48,809 --> 00:10:52,769
that I can't just do that trivially is

240
00:10:50,639 --> 00:10:56,159
the calling code doesn't know how to

241
00:10:52,769 --> 00:10:58,588
produce a number from a particular grid

242
00:10:56,159 --> 00:11:01,469
walk that it's got a table driven grid

243
00:10:58,589 --> 00:11:04,079
grid walk it doesn't know how to produce

244
00:11:01,470 --> 00:11:05,278
the correct stopping value from that

245
00:11:04,078 --> 00:11:10,509
thing

246
00:11:05,278 --> 00:11:12,429
and I can't honestly in my head think of

247
00:11:10,509 --> 00:11:15,730
how we would do that conveniently

248
00:11:12,429 --> 00:11:17,799
because since the thing you know has

249
00:11:15,730 --> 00:11:19,990
like an uneven pattern it's like oh well

250
00:11:17,799 --> 00:11:22,328
it will go like two and X than one and Y

251
00:11:19,990 --> 00:11:24,700
then 2 and X than 1 and Z 1 and Y then

252
00:11:22,328 --> 00:11:26,620
to an X than 1 and Y you know like it

253
00:11:24,700 --> 00:11:28,300
has this sort of pattern as it moves to

254
00:11:26,620 --> 00:11:31,539
the grid based on the direction of the

255
00:11:28,299 --> 00:11:34,179
Ray that's being cast the problem that I

256
00:11:31,539 --> 00:11:36,370
see there is I don't know how without

257
00:11:34,179 --> 00:11:39,729
actually doing the walk I don't know how

258
00:11:36,370 --> 00:11:41,620
to accurately predict which grid square

259
00:11:39,730 --> 00:11:45,220
would be the last grid square for that

260
00:11:41,620 --> 00:11:50,200
to go to before it leaves the actual

261
00:11:45,220 --> 00:11:51,940
balance of the grid and all the things I

262
00:11:50,200 --> 00:11:53,649
can think of that would produce an

263
00:11:51,940 --> 00:11:56,800
accurate answer for that question so

264
00:11:53,649 --> 00:12:00,429
that we could just have one count none

265
00:11:56,799 --> 00:12:03,789
of them seem super compact or feasible

266
00:12:00,429 --> 00:12:05,620
like I can't in my head think of any way

267
00:12:03,789 --> 00:12:10,809
to really produce that number quickly

268
00:12:05,620 --> 00:12:13,620
and so I feel like the apron solution is

269
00:12:10,809 --> 00:12:18,969
just an easier solution to the problem

270
00:12:13,620 --> 00:12:23,740
so what that means for me is like I kind

271
00:12:18,970 --> 00:12:26,379
of just want a cost here right so we

272
00:12:23,740 --> 00:12:29,500
want a cost metric and the cost metric

273
00:12:26,379 --> 00:12:32,019
is maybe initialized to some specific

274
00:12:29,500 --> 00:12:35,169
value maybe that specific value is

275
00:12:32,019 --> 00:12:37,689
something like 16 I don't know but we

276
00:12:35,169 --> 00:12:40,509
basically say while the cost metric is

277
00:12:37,690 --> 00:12:42,339
greater than zero right so or you know I

278
00:12:40,509 --> 00:12:45,629
could just say well the cost metric is

279
00:12:42,339 --> 00:12:45,630
not zero

280
00:12:52,070 --> 00:12:56,270
as we come through this code you know we

281
00:12:54,769 --> 00:12:59,120
could look and say well every time

282
00:12:56,269 --> 00:13:02,299
through this loop let's say we subtract

283
00:12:59,120 --> 00:13:06,980
one from cost metric so every time that

284
00:13:02,299 --> 00:13:09,409
we've tested against something we go

285
00:13:06,980 --> 00:13:12,590
down so this way we can set the number

286
00:13:09,409 --> 00:13:15,110
of leads to something and you know we

287
00:13:12,590 --> 00:13:17,930
can just say like whatever that number

288
00:13:15,110 --> 00:13:20,450
is that's the most we're going to do so

289
00:13:17,929 --> 00:13:23,449
we test 8 leaves total or something

290
00:13:20,450 --> 00:13:24,890
right and then we know that either we

291
00:13:23,450 --> 00:13:26,810
got to the edge of the grid so there's

292
00:13:24,889 --> 00:13:30,199
nothing left to look at which terminates

293
00:13:26,809 --> 00:13:33,109
in this case or we got to a point where

294
00:13:30,200 --> 00:13:34,670
we tested so many leaves that we just

295
00:13:33,110 --> 00:13:36,800
don't feel like it's profitable to keep

296
00:13:34,669 --> 00:13:40,579
going it will be too expensive so let's

297
00:13:36,799 --> 00:13:46,370
just use whatever actual location we

298
00:13:40,580 --> 00:13:49,780
have as as our lookup right and so if

299
00:13:46,370 --> 00:13:52,220
the cost metric here if we exited on

300
00:13:49,779 --> 00:13:55,149
getting to the apron we know the cost

301
00:13:52,220 --> 00:14:00,980
metric is still greater than zero

302
00:13:55,149 --> 00:14:02,600
whereas you know if the clock if the

303
00:14:00,980 --> 00:14:05,480
cost metric equals zero then we know

304
00:14:02,600 --> 00:14:07,310
that we haven't done that the problem is

305
00:14:05,480 --> 00:14:09,080
that we've looked up the grid index here

306
00:14:07,309 --> 00:14:10,939
and we don't actually know at that point

307
00:14:09,080 --> 00:14:14,060
whether this grid index is valid or not

308
00:14:10,940 --> 00:14:18,700
you know time Sam so our cost metric may

309
00:14:14,059 --> 00:14:24,349
have been reduced to zero and we may

310
00:14:18,700 --> 00:14:26,420
still be going right so it may be that

311
00:14:24,350 --> 00:14:29,720
this is not great like it could be that

312
00:14:26,419 --> 00:14:34,579
really we probably want to do that and

313
00:14:29,720 --> 00:14:36,620
we just say all right so if we exited

314
00:14:34,580 --> 00:14:38,990
here we know that we don't need to do a

315
00:14:36,620 --> 00:14:45,799
lookup but may be here we would just say

316
00:14:38,990 --> 00:14:48,710
if cost metric you know has decremented

317
00:14:45,799 --> 00:14:51,819
to zero then we you know do a compute

318
00:14:48,710 --> 00:14:55,759
boxful irradiance at kind of a thing and

319
00:14:51,820 --> 00:14:57,800
we need here to just say get us the

320
00:14:55,759 --> 00:14:58,370
voxel irradiance coming back in this

321
00:14:57,799 --> 00:15:01,149
direction

322
00:14:58,370 --> 00:15:01,149
you know what I mean

323
00:15:04,799 --> 00:15:11,649
so I think this is all we really need

324
00:15:07,750 --> 00:15:14,198
and once we have done that I think we

325
00:15:11,649 --> 00:15:16,659
also probably don't need to do this so

326
00:15:14,198 --> 00:15:22,349
this routine gets a little more

327
00:15:16,659 --> 00:15:22,350
complicated because I think

328
00:15:28,669 --> 00:15:39,120
well yeah so I think what happens here

329
00:15:33,779 --> 00:15:42,959
is kind of confusing you know I hadn't

330
00:15:39,120 --> 00:15:45,090
really thought about this yet but this

331
00:15:42,960 --> 00:15:46,970
routine is actually not as good as it

332
00:15:45,090 --> 00:15:50,610
should be even already because I

333
00:15:46,970 --> 00:15:52,740
realized this loop should stop if you

334
00:15:50,610 --> 00:15:56,070
hit anything because you don't you know

335
00:15:52,740 --> 00:15:57,840
that all of your you know that all of

336
00:15:56,070 --> 00:16:00,480
the things that are further on in the

337
00:15:57,840 --> 00:16:03,780
grid are later collisions the tea is

338
00:16:00,480 --> 00:16:07,440
strictly increasing the entire time so

339
00:16:03,779 --> 00:16:10,319
actually this part should probably

340
00:16:07,440 --> 00:16:13,440
feature a way to break out of the grid

341
00:16:10,320 --> 00:16:16,560
as well meaning there are two

342
00:16:13,440 --> 00:16:22,200
termination conditions here and only one

343
00:16:16,559 --> 00:16:25,289
of them does this right so I think it's

344
00:16:22,200 --> 00:16:29,670
actually you know it looks more like

345
00:16:25,289 --> 00:16:33,719
this which is to say that when you do a

346
00:16:29,669 --> 00:16:37,740
test of the T values so when we when we

347
00:16:33,720 --> 00:16:42,300
have this here we would just need to

348
00:16:37,740 --> 00:16:46,019
know like are any of these valid in the

349
00:16:42,299 --> 00:16:49,259
first place right and if they are then

350
00:16:46,019 --> 00:16:54,409
we can stop so we probably want to do a

351
00:16:49,259 --> 00:16:54,409
mask move at that point just for our own

352
00:16:54,830 --> 00:17:01,070
for our own like testing purposes like

353
00:17:01,639 --> 00:17:10,319
hit you know something hit and in here

354
00:17:07,680 --> 00:17:13,230
we would just do if something hit then

355
00:17:10,319 --> 00:17:15,419
we do our post amble so we like you know

356
00:17:13,230 --> 00:17:18,539
finish figuring out what the Ray is and

357
00:17:15,420 --> 00:17:20,820
we break and so I feel like it actually

358
00:17:18,539 --> 00:17:23,039
kind of looks more like this we're

359
00:17:20,819 --> 00:17:24,809
inside here we do have that

360
00:17:23,039 --> 00:17:26,639
unpredictable branch that's just the

361
00:17:24,809 --> 00:17:28,649
termination branch because it's probably

362
00:17:26,640 --> 00:17:30,930
way more expensive to keep marching

363
00:17:28,650 --> 00:17:34,200
rather than stopping when we first hit

364
00:17:30,930 --> 00:17:37,400
something so I think maybe that's a

365
00:17:34,200 --> 00:17:40,920
little bit closer to what we need and

366
00:17:37,400 --> 00:17:41,490
the something hit here is really just a

367
00:17:40,920 --> 00:17:47,960
mask

368
00:17:41,490 --> 00:17:52,650
move out it's you know one of these

369
00:17:47,960 --> 00:17:54,900
where we just take and the the mask that

370
00:17:52,650 --> 00:18:00,450
we got here this is just telling us if

371
00:17:54,900 --> 00:18:03,480
we got a hit at all and when we extract

372
00:18:00,450 --> 00:18:06,240
that mask we can just or it in to the

373
00:18:03,480 --> 00:18:10,549
mask we've got and then on termination

374
00:18:06,240 --> 00:18:16,279
if anybody if any ray ever hit then

375
00:18:10,549 --> 00:18:16,279
that's you know that's our termination

376
00:18:22,670 --> 00:18:32,940
so the only thing that that this doesn't

377
00:18:26,069 --> 00:18:39,139
do correctly is there is like one side

378
00:18:32,940 --> 00:18:39,140
case there and I don't really know I

379
00:18:42,500 --> 00:18:49,410
don't really know how we would want to

380
00:18:47,460 --> 00:18:53,850
fix this or if we would want to fix this

381
00:18:49,410 --> 00:18:56,550
but oh wait no we don't have to fix it

382
00:18:53,849 --> 00:18:58,678
nevermind I take it back so the thing

383
00:18:56,549 --> 00:19:00,990
that I was gonna say is if you imagined

384
00:18:58,679 --> 00:19:03,120
inserting these boxes without clipping

385
00:19:00,990 --> 00:19:05,308
them meaning you didn't shrink them to

386
00:19:03,119 --> 00:19:06,959
the size of the grid square then you

387
00:19:05,308 --> 00:19:09,359
would have to worry about potentially

388
00:19:06,960 --> 00:19:10,710
registering a hit of a but I got a draw

389
00:19:09,359 --> 00:19:12,949
this I can't there you're never gonna

390
00:19:10,710 --> 00:19:19,920
understand what it without a diagram

391
00:19:12,950 --> 00:19:24,360
sorry let me just draw it for you let's

392
00:19:19,920 --> 00:19:27,259
suppose we have our grid and we have a

393
00:19:24,359 --> 00:19:30,240
box that spans multiple grid squares

394
00:19:27,259 --> 00:19:31,980
then we have a raycast that originates

395
00:19:30,240 --> 00:19:36,019
from one of our cells for the light

396
00:19:31,980 --> 00:19:41,279
probe and the pattern that it goes is

397
00:19:36,019 --> 00:19:46,889
maybe actually fairly like oblique to

398
00:19:41,279 --> 00:19:48,389
the Ray to the to this right and let me

399
00:19:46,890 --> 00:19:50,400
see if I can draw a really good example

400
00:19:48,390 --> 00:19:51,780
here so you know let's suppose it's

401
00:19:50,400 --> 00:19:55,570
going like this

402
00:19:51,779 --> 00:20:01,960
through the system and let's suppose

403
00:19:55,569 --> 00:20:08,769
there's a tiny box here right and a very

404
00:20:01,960 --> 00:20:11,680
large box here if we didn't clip the AAA

405
00:20:08,769 --> 00:20:14,019
B's that we insert to the grid squares

406
00:20:11,680 --> 00:20:17,230
then when you enter this grid square

407
00:20:14,019 --> 00:20:19,680
this box which is large is obviously

408
00:20:17,230 --> 00:20:22,029
registered as being part of this cell

409
00:20:19,680 --> 00:20:24,250
when we do our collision detection we

410
00:20:22,029 --> 00:20:28,629
will find that we hit it and it's over

411
00:20:24,250 --> 00:20:30,039
here if we then stop because we early

412
00:20:28,630 --> 00:20:32,650
terminate and say well we know that

413
00:20:30,039 --> 00:20:34,299
anything we hit in this grid cell is

414
00:20:32,650 --> 00:20:36,730
closer than this grid cell by definition

415
00:20:34,299 --> 00:20:39,099
because we entered it first then we will

416
00:20:36,730 --> 00:20:40,900
never find this collision because we

417
00:20:39,099 --> 00:20:44,799
never looked in this grid square but it

418
00:20:40,900 --> 00:20:47,259
was in fact closer so all I wanted to

419
00:20:44,799 --> 00:20:50,019
say was as long as we clip which we will

420
00:20:47,259 --> 00:20:51,970
because there's no reason not to it's a

421
00:20:50,019 --> 00:20:54,759
a B B's clipping is just calling min and

422
00:20:51,970 --> 00:20:58,240
Max real quick before you push the thing

423
00:20:54,759 --> 00:21:00,369
in as long as we clip we will still be

424
00:20:58,240 --> 00:21:02,980
accurate because this box will not

425
00:21:00,369 --> 00:21:03,750
register a hit with the Ray so we'd be

426
00:21:02,980 --> 00:21:11,860
fine

427
00:21:03,750 --> 00:21:16,059
that's all make sense hopefully so I

428
00:21:11,859 --> 00:21:17,379
will add so that we don't forget I think

429
00:21:16,059 --> 00:21:19,359
that's a good thing to do anyway but

430
00:21:17,380 --> 00:21:21,010
just so we don't forget when we do build

431
00:21:19,359 --> 00:21:23,289
the spatial partition for the lighting I

432
00:21:21,009 --> 00:21:25,240
just want to make sure that we remember

433
00:21:23,289 --> 00:21:27,659
that so I'm going to put a big ol to do

434
00:21:25,240 --> 00:21:27,660
in here

435
00:21:52,480 --> 00:22:03,440
so hopefully that makes some sense why

436
00:22:00,109 --> 00:22:06,378
am I talking so quiet um I've been

437
00:22:03,440 --> 00:22:08,570
having a lot of allergies lately just

438
00:22:06,378 --> 00:22:10,819
for like several months really and it's

439
00:22:08,569 --> 00:22:12,259
just like it aggravates my throat so

440
00:22:10,819 --> 00:22:15,259
I've been trying like talking more

441
00:22:12,259 --> 00:22:17,628
quietly just to like I don't think it

442
00:22:15,259 --> 00:22:19,639
really helps though it's just it I don't

443
00:22:17,628 --> 00:22:31,308
know allergies are bad I wish I didn't

444
00:22:19,638 --> 00:22:34,508
have them alright let's do this um so

445
00:22:31,308 --> 00:22:37,009
anyway when we're doing our move mask

446
00:22:34,509 --> 00:22:38,720
yeah so we just want to make sure that

447
00:22:37,009 --> 00:22:41,690
we get back whether or not any of these

448
00:22:38,720 --> 00:22:43,730
things hit and so this T valid and less

449
00:22:41,690 --> 00:22:45,470
than T ray is all we really need for

450
00:22:43,730 --> 00:22:48,589
that we've you know we basically got it

451
00:22:45,470 --> 00:22:53,690
T valid would also do it you know either

452
00:22:48,589 --> 00:22:55,819
one really would be fine but anyway so

453
00:22:53,690 --> 00:22:58,788
what's the problem move mask right it's

454
00:22:55,819 --> 00:23:01,759
just move mess P so that's totally fine

455
00:22:58,788 --> 00:23:05,000
so now we really what we have mostly is

456
00:23:01,759 --> 00:23:06,528
this issue here and I believe we kind of

457
00:23:05,000 --> 00:23:09,378
have to partition this routine a little

458
00:23:06,528 --> 00:23:11,720
bit differently there's no reason for a

459
00:23:09,378 --> 00:23:13,908
sample P here I mean we could do it and

460
00:23:11,720 --> 00:23:17,899
maybe we will for now but like in the

461
00:23:13,909 --> 00:23:21,740
future that's not really necessary at

462
00:23:17,898 --> 00:23:25,158
all right because we already know which

463
00:23:21,740 --> 00:23:27,829
grid square we're in the grid this grid

464
00:23:25,159 --> 00:23:30,649
index value here is all we really need

465
00:23:27,829 --> 00:23:33,829
and so we don't need to do any of this

466
00:23:30,648 --> 00:23:35,298
part of that we do need to do the sample

467
00:23:33,829 --> 00:23:36,859
normal part but of course we already

468
00:23:35,298 --> 00:23:38,658
know that because it's just the negative

469
00:23:36,859 --> 00:23:41,469
of the raid erection you know what I

470
00:23:38,659 --> 00:23:44,509
mean so that part's pretty

471
00:23:41,470 --> 00:23:47,209
straightforward as well so

472
00:23:44,509 --> 00:23:49,969
I think what we want here is to

473
00:23:47,209 --> 00:23:51,949
partition this out and so instead of

474
00:23:49,969 --> 00:23:54,440
compute voxel irradiance at being

475
00:23:51,949 --> 00:23:56,899
something that by default takes a P

476
00:23:54,440 --> 00:24:00,469
we'll probably do like compute voxel

477
00:23:56,898 --> 00:24:09,618
irradiance at in a way that can also

478
00:24:00,469 --> 00:24:12,259
take a grid index so if we were going to

479
00:24:09,618 --> 00:24:19,038
do it that way what we would want is

480
00:24:12,259 --> 00:24:26,108
this same code like so what is outgoing

481
00:24:19,038 --> 00:24:26,108
mean here outgoing

482
00:24:33,250 --> 00:24:40,039
so I'm not sure what the outgoing part

483
00:24:37,519 --> 00:24:45,740
of that is it looks like that's some

484
00:24:40,039 --> 00:25:03,909
kind of whoo-whoo what are we passing to

485
00:24:45,740 --> 00:25:03,910
this so we're passing emission direction

486
00:25:06,519 --> 00:25:14,480
so I I feel like since we haven't done

487
00:25:09,769 --> 00:25:21,139
the lighting quality pass there I guess

488
00:25:14,480 --> 00:25:22,730
like yeah I guess I'm not sure what to

489
00:25:21,140 --> 00:25:24,620
make of this so the way that we're doing

490
00:25:22,730 --> 00:25:26,480
this currently is we're just looking at

491
00:25:24,619 --> 00:25:35,959
how much light was coming from the

492
00:25:26,480 --> 00:25:40,549
normal direction which I don't think is

493
00:25:35,960 --> 00:25:45,650
right I mean there may might be a reason

494
00:25:40,549 --> 00:25:48,769
why you would do that but I mean I don't

495
00:25:45,650 --> 00:25:53,019
think so like you would really want to

496
00:25:48,769 --> 00:25:53,019
be using this value right

497
00:25:58,500 --> 00:26:02,369
or more specifically the negative of

498
00:26:00,990 --> 00:26:05,750
that value because if you assume that

499
00:26:02,369 --> 00:26:08,609
this thing is lit by the light probes

500
00:26:05,750 --> 00:26:10,529
irradiance which is the approximation

501
00:26:08,609 --> 00:26:12,029
that you use when you have light probes

502
00:26:10,529 --> 00:26:13,950
you assume something in the cell of a

503
00:26:12,029 --> 00:26:15,569
light probe is getting lit by the light

504
00:26:13,950 --> 00:26:19,140
that that light probe is captured that's

505
00:26:15,569 --> 00:26:23,730
the point of the light probe we would

506
00:26:19,140 --> 00:26:28,640
want a sample the light coming from the

507
00:26:23,730 --> 00:26:28,640
direction that you would bounce off of

508
00:26:31,910 --> 00:26:35,070
you know

509
00:26:33,299 --> 00:26:37,169
because this is even though this is a

510
00:26:35,069 --> 00:26:42,899
diffuse surface it's still you know

511
00:26:37,170 --> 00:26:45,360
going to be reflecting the light via the

512
00:26:42,900 --> 00:26:48,420
reflectance function so I'm not sure

513
00:26:45,359 --> 00:26:51,419
that sampling the normal is necessarily

514
00:26:48,420 --> 00:26:57,509
the most logical thing to do in that

515
00:26:51,420 --> 00:27:00,570
circumstance so that seems a little bit

516
00:26:57,509 --> 00:27:02,160
busted I'm also not entirely certain why

517
00:27:00,569 --> 00:27:05,730
you would ever need to pass the normal

518
00:27:02,160 --> 00:27:13,470
at all because you know what you bounced

519
00:27:05,730 --> 00:27:16,349
off of and so you don't really need that

520
00:27:13,470 --> 00:27:23,940
at all so this this kind of feels a

521
00:27:16,349 --> 00:27:27,178
little bit dumb and probably not really

522
00:27:23,940 --> 00:27:30,960
what you want I'm going to leave that

523
00:27:27,179 --> 00:27:34,340
for now I'm gonna put put it to do in

524
00:27:30,960 --> 00:27:40,110
here that just says this should probably

525
00:27:34,339 --> 00:27:50,369
actually use outgoing instead but we

526
00:27:40,109 --> 00:27:54,469
need to do a lighting quality pass after

527
00:27:50,369 --> 00:27:59,279
the optimization phase in order to

528
00:27:54,470 --> 00:28:00,990
really nail this stuff down so I think

529
00:27:59,279 --> 00:28:04,170
what I'd like to do here is let's just

530
00:28:00,990 --> 00:28:07,200
ignore that for a moment and say I'm

531
00:28:04,170 --> 00:28:09,509
gonna put the part of this that actually

532
00:28:07,200 --> 00:28:11,889
does the sampling

533
00:28:09,509 --> 00:28:15,220
into a separate routine you can call

534
00:28:11,888 --> 00:28:17,648
with different parameters so effectively

535
00:28:15,220 --> 00:28:20,528
here what we could say is the voxel

536
00:28:17,648 --> 00:28:25,629
index parameters that we produce and the

537
00:28:20,528 --> 00:28:27,929
UVW values that we produce these are and

538
00:28:25,630 --> 00:28:39,220
in fact I could actually just make it be

539
00:28:27,929 --> 00:28:46,509
I could make it actually be that blend

540
00:28:39,220 --> 00:28:48,879
as well hmm let me think about this

541
00:28:46,509 --> 00:28:52,628
so the thing that I'm not sure about is

542
00:28:48,878 --> 00:28:57,398
like how do we want to actually

543
00:28:52,628 --> 00:28:59,769
terminate the Ray and if we do that Pat

544
00:28:57,398 --> 00:29:12,250
what's the T value that we've gotten so

545
00:28:59,769 --> 00:29:14,859
far because we could also blend these

546
00:29:12,250 --> 00:29:16,298
together so you know what I guess you

547
00:29:14,859 --> 00:29:20,859
know what I'm gonna take that back I'm

548
00:29:16,298 --> 00:29:22,418
gonna say maybe we can just use this and

549
00:29:20,859 --> 00:29:25,388
we just need to be a little bit more

550
00:29:22,419 --> 00:29:27,820
careful about this so let's just say

551
00:29:25,388 --> 00:29:29,769
that maybe what we do is we actually

552
00:29:27,819 --> 00:29:33,990
call the complete version that actually

553
00:29:29,769 --> 00:29:37,298
does the blend and what we do here is we

554
00:29:33,990 --> 00:29:40,058
compute what we think the sample point

555
00:29:37,298 --> 00:29:44,609
should be based on how far we would have

556
00:29:40,058 --> 00:29:44,609
come so far you know what I mean

557
00:29:48,690 --> 00:29:55,590
so what we could do is we could take the

558
00:29:52,990 --> 00:30:00,160
Ray origin in the Ray direction

559
00:29:55,589 --> 00:30:02,109
we could just move forward by a T value

560
00:30:00,160 --> 00:30:09,240
which could be baked into the tables so

561
00:30:02,109 --> 00:30:12,879
we would say early termination sample P

562
00:30:09,240 --> 00:30:18,730
start where the Ray origin is and go

563
00:30:12,880 --> 00:30:24,130
however far we need to go and so there's

564
00:30:18,730 --> 00:30:26,440
like a t terminate here and the t

565
00:30:24,130 --> 00:30:29,500
terminate is just like we've gone you

566
00:30:26,440 --> 00:30:32,470
know this far in the Ray and then we

567
00:30:29,500 --> 00:30:35,319
would sample the voxel at that point so

568
00:30:32,470 --> 00:30:41,100
that would take the the solution the

569
00:30:35,319 --> 00:30:45,970
diffuse Atlas the sample P sample oops

570
00:30:41,099 --> 00:30:49,839
sample and now going so in here right

571
00:30:45,970 --> 00:30:52,360
the the early termination sample P is

572
00:30:49,839 --> 00:30:55,240
the location and then the two normal

573
00:30:52,359 --> 00:30:57,549
values in this case would be the raid

574
00:30:55,240 --> 00:31:00,579
erection right in both cases

575
00:30:57,549 --> 00:31:04,240
so that's like where we want to sample

576
00:31:00,579 --> 00:31:06,099
the light coming from and again we have

577
00:31:04,240 --> 00:31:09,099
to change that compute voxel irradiance

578
00:31:06,099 --> 00:31:11,049
at to actually be like more logical

579
00:31:09,099 --> 00:31:14,349
about how the lights getting sampled so

580
00:31:11,049 --> 00:31:17,829
we'll see now since we know that on exit

581
00:31:14,349 --> 00:31:20,139
here we are producing what is

582
00:31:17,829 --> 00:31:22,928
effectively a compute voxel irradiance

583
00:31:20,140 --> 00:31:26,230
sample anyway because we know here that

584
00:31:22,929 --> 00:31:29,410
we were going to do that it's also

585
00:31:26,230 --> 00:31:32,519
entirely plausible to me that we could

586
00:31:29,410 --> 00:31:34,779
try to make these both kind of happen

587
00:31:32,519 --> 00:31:36,970
together so that we don't have two calls

588
00:31:34,779 --> 00:31:39,670
to that function it's a little bit

589
00:31:36,970 --> 00:31:41,500
obtuse as to how I would do that because

590
00:31:39,670 --> 00:31:43,029
if you look at how this works you know

591
00:31:41,500 --> 00:31:44,950
we kind of have some stuff that's done

592
00:31:43,029 --> 00:31:47,980
wide and stuff that's not done wide and

593
00:31:44,950 --> 00:31:50,319
so I think for the final version of this

594
00:31:47,980 --> 00:31:52,569
routine when we try to streamline it one

595
00:31:50,319 --> 00:31:55,750
more pass at the end I think what we

596
00:31:52,569 --> 00:31:58,599
might want to do is try to collapse

597
00:31:55,750 --> 00:31:59,869
these two so you know I'd put it to do

598
00:31:58,599 --> 00:32:03,679
in here

599
00:31:59,869 --> 00:32:05,779
it's like oops to do this keyboard is

600
00:32:03,680 --> 00:32:09,830
hopelessly off-center today my desk is a

601
00:32:05,779 --> 00:32:11,829
mess this is my own this is only for

602
00:32:09,829 --> 00:32:15,589
streaming this desk and it gets kind of

603
00:32:11,829 --> 00:32:25,339
gunked-up so I want to collapse compute

604
00:32:15,589 --> 00:32:26,959
voxel irradiance at calls into one so

605
00:32:25,339 --> 00:32:28,279
for now I'm fine with calling it twice

606
00:32:26,960 --> 00:32:29,509
but I think that's something that could

607
00:32:28,279 --> 00:32:32,329
be collapsed and what we could

608
00:32:29,509 --> 00:32:35,390
effectively do here is have this code

609
00:32:32,329 --> 00:32:37,549
all just be shared so in other words

610
00:32:35,390 --> 00:32:40,070
this stuff would all just happen exactly

611
00:32:37,549 --> 00:32:44,269
the same way as it was happening before

612
00:32:40,069 --> 00:32:46,159
and because we know basically all of the

613
00:32:44,269 --> 00:32:48,049
ways that we break out of the loop are

614
00:32:46,160 --> 00:32:50,808
going to do this the only one that isn't

615
00:32:48,049 --> 00:32:54,289
is this one but this one actually still

616
00:32:50,808 --> 00:32:57,289
sort of is because we could at that

617
00:32:54,289 --> 00:33:03,460
point use effectively like a skybox or

618
00:32:57,289 --> 00:33:07,549
whatever as the thing we were sampling

619
00:33:03,460 --> 00:33:11,600
so you could imagine like just to give

620
00:33:07,549 --> 00:33:14,178
maybe a little bit better of a just just

621
00:33:11,599 --> 00:33:15,259
to sort of eliminate this a little bit

622
00:33:14,179 --> 00:33:15,880
and maybe I can even just do it right

623
00:33:15,259 --> 00:33:18,049
now

624
00:33:15,880 --> 00:33:18,860
if we were to do something more like

625
00:33:18,049 --> 00:33:21,319
this

626
00:33:18,859 --> 00:33:24,009
where we have these situations where we

627
00:33:21,319 --> 00:33:24,009
break out of the loop

628
00:33:26,558 --> 00:33:34,609
in fact this doesn't need to happen

629
00:33:29,119 --> 00:33:39,379
anymore to it looks like because we now

630
00:33:34,609 --> 00:33:42,189
have tested just using the yeah so we

631
00:33:39,380 --> 00:33:46,880
now know because of the mask move here

632
00:33:42,190 --> 00:33:49,370
we actually now know that we hit so we

633
00:33:46,880 --> 00:33:51,110
don't need to do this part either let me

634
00:33:49,369 --> 00:33:53,569
look at what tier a single is actually

635
00:33:51,109 --> 00:33:56,569
doing is it doing anything yeah it

636
00:33:53,569 --> 00:33:58,849
doesn't so we can actually eliminate

637
00:33:56,569 --> 00:34:00,649
this branch entirely because we've

638
00:33:58,849 --> 00:34:02,240
already done it which is nice it means

639
00:34:00,650 --> 00:34:04,759
that at least we're not introducing

640
00:34:02,240 --> 00:34:09,530
another one in there so here you can say

641
00:34:04,759 --> 00:34:12,019
alright we do the something hit we if we

642
00:34:09,530 --> 00:34:13,710
did we can early terminate if the cost

643
00:34:12,019 --> 00:34:16,619
metric was a problem

644
00:34:13,710 --> 00:34:18,329
will terminate for that as well and then

645
00:34:16,619 --> 00:34:20,899
will fall out here and will fall out

646
00:34:18,329 --> 00:34:23,608
into a way that's going to use a couple

647
00:34:20,898 --> 00:34:26,429
things that we have that we need to

648
00:34:23,608 --> 00:34:28,619
propagate outwards so if we look at what

649
00:34:26,429 --> 00:34:31,050
those are there's like probe sample P

650
00:34:28,619 --> 00:34:37,379
single probe sample n single like

651
00:34:31,050 --> 00:34:39,750
emission direction and we want to grab

652
00:34:37,378 --> 00:34:42,809
those we want to basically produce those

653
00:34:39,750 --> 00:34:45,929
in each of our cases so in the case of

654
00:34:42,809 --> 00:34:56,969
probe sample n single right this is what

655
00:34:45,929 --> 00:35:09,690
we've got at the moment it's a probe

656
00:34:56,969 --> 00:35:12,419
sample p single same thing and so now

657
00:35:09,690 --> 00:35:24,329
these two could be pulled out of this

658
00:35:12,420 --> 00:35:27,420
loop as exit parameters right so when ya

659
00:35:24,329 --> 00:35:29,400
when this gets pulled out and similarly

660
00:35:27,420 --> 00:35:30,690
like we could say for the transfer

661
00:35:29,400 --> 00:35:33,000
people yes here like I said I think we

662
00:35:30,690 --> 00:35:38,070
want this welded in so we want that

663
00:35:33,000 --> 00:35:41,280
transfer PPS to actually get sampled

664
00:35:38,070 --> 00:35:42,630
always and we can make we'll make the

665
00:35:41,280 --> 00:35:46,410
adjustments that make that happen

666
00:35:42,630 --> 00:35:49,608
properly in a second here so we know

667
00:35:46,409 --> 00:35:52,980
that we need to produce these two and we

668
00:35:49,608 --> 00:35:55,409
will just assign to them now in these

669
00:35:52,980 --> 00:35:59,039
two cases and then let them fall out of

670
00:35:55,409 --> 00:36:01,379
the routine properly so that's good and

671
00:35:59,039 --> 00:36:03,389
then so in this case here and rather

672
00:36:01,380 --> 00:36:06,289
than creating a new value we would just

673
00:36:03,389 --> 00:36:08,489
say probe sample P single equals that

674
00:36:06,289 --> 00:36:10,079
termination place we haven't quite

675
00:36:08,489 --> 00:36:11,338
figured out how we're going to get that

676
00:36:10,079 --> 00:36:13,578
value yet but it's probably is going to

677
00:36:11,338 --> 00:36:16,880
come from the table

678
00:36:13,579 --> 00:36:19,459
and then in terms of the probe sampling

679
00:36:16,880 --> 00:36:22,608
in the emission direction which is the

680
00:36:19,458 --> 00:36:25,368
other one we need here that's going to

681
00:36:22,608 --> 00:36:30,248
be negative ready single as well we're

682
00:36:25,369 --> 00:36:34,099
always sampling that back bounce so

683
00:36:30,248 --> 00:36:36,108
that's you know in in either of these

684
00:36:34,099 --> 00:36:37,849
two cases right we're going to be doing

685
00:36:36,108 --> 00:36:38,958
something like this I think it's just

686
00:36:37,849 --> 00:36:40,609
whether it's the positive or the

687
00:36:38,958 --> 00:36:42,768
negative because either we didn't

688
00:36:40,608 --> 00:36:45,318
actually hit something to bounce in

689
00:36:42,768 --> 00:36:47,448
which case we need to take the positive

690
00:36:45,318 --> 00:36:48,708
R a direction or we did hit something to

691
00:36:47,449 --> 00:36:50,298
bounce case we need the negative R a

692
00:36:48,708 --> 00:36:54,858
direction or I just think I said those

693
00:36:50,298 --> 00:36:56,719
backwards but you get the idea so we'll

694
00:36:54,858 --> 00:36:59,418
make sure we set those properly as well

695
00:36:56,719 --> 00:37:04,880
but I think that's mostly what we need

696
00:36:59,418 --> 00:37:08,418
there that's ready single I think these

697
00:37:04,880 --> 00:37:10,489
are actually both because we we want to

698
00:37:08,418 --> 00:37:13,848
know well no I guess I guess that's not

699
00:37:10,489 --> 00:37:15,259
true so these are both pointing in

700
00:37:13,849 --> 00:37:16,548
directions but I think this goes away

701
00:37:15,259 --> 00:37:17,929
because I don't think we want to be

702
00:37:16,548 --> 00:37:19,188
using I don't think we want to be

703
00:37:17,929 --> 00:37:21,709
passing the normal to that routine

704
00:37:19,188 --> 00:37:24,168
anymore when we do a sample we just want

705
00:37:21,708 --> 00:37:26,648
a sample right so I think compute Fox

706
00:37:24,168 --> 00:37:29,838
the radiance that just wants to give it

707
00:37:26,648 --> 00:37:31,009
the direction to sample and then you

708
00:37:29,838 --> 00:37:35,028
know you assume that the person who

709
00:37:31,009 --> 00:37:36,889
calls compute Foxley radiance like

710
00:37:35,028 --> 00:37:41,179
already did that you know already did

711
00:37:36,889 --> 00:37:46,630
that work for you okay so I think our

712
00:37:41,179 --> 00:37:46,630
for our loop is good now that all looks

713
00:37:47,079 --> 00:37:50,559
that it looks right

714
00:37:54,108 --> 00:37:59,210
so we do the leaf test we go there we

715
00:37:56,960 --> 00:38:05,088
before yeah so I think that all looks

716
00:37:59,210 --> 00:38:08,619
good to me I think that's all good so if

717
00:38:05,088 --> 00:38:08,619
we take a look at what's going on here

718
00:38:09,759 --> 00:38:13,639
the problem that we're getting here is

719
00:38:11,838 --> 00:38:15,639
that we don't have the shuffle value

720
00:38:13,639 --> 00:38:18,949
that we actually need to pull to extract

721
00:38:15,639 --> 00:38:26,480
or other values like our hit ref color

722
00:38:18,949 --> 00:38:32,659
these sorts of things and all of these

723
00:38:26,480 --> 00:38:36,019
computations you can kind of see they're

724
00:38:32,659 --> 00:38:39,980
operating on the four-wide version so

725
00:38:36,018 --> 00:38:41,598
when we when we initialize that you know

726
00:38:39,980 --> 00:38:43,670
you can you can just kind of see what we

727
00:38:41,599 --> 00:38:47,329
need here so when we produce this hit

728
00:38:43,670 --> 00:38:49,430
ref color here this actually probably

729
00:38:47,329 --> 00:38:51,410
wants to be pure white because we

730
00:38:49,429 --> 00:38:54,018
wouldn't reduce the transmittance in the

731
00:38:51,409 --> 00:39:03,409
other case so this is actually going to

732
00:38:54,018 --> 00:39:07,368
be like v3 4x 1 1 1 1 right we're just

733
00:39:03,409 --> 00:39:12,048
going to assume that we don't reduce the

734
00:39:07,369 --> 00:39:13,249
emission in that case so in at that

735
00:39:12,048 --> 00:39:15,798
point all we need to do is make sure

736
00:39:13,248 --> 00:39:21,230
that the shuffler itself is its own

737
00:39:15,798 --> 00:39:25,130
thing that gets persisted and we need it

738
00:39:21,230 --> 00:39:30,980
to default to loading something that

739
00:39:25,130 --> 00:39:33,920
will not something that won't just be

740
00:39:30,980 --> 00:39:35,809
bogus for this case since everything

741
00:39:33,920 --> 00:39:39,710
will be the same in the case where we

742
00:39:35,809 --> 00:39:43,609
exit early we can just assume that any

743
00:39:39,710 --> 00:39:47,028
of these are ok so the 0 on the shuffle

744
00:39:43,608 --> 00:39:50,900
table is fine I guess I need to do that

745
00:39:47,028 --> 00:39:52,940
though so really anything here it

746
00:39:50,900 --> 00:39:53,568
doesn't matter which one we pick we'll

747
00:39:52,940 --> 00:39:56,480
be fine

748
00:39:53,568 --> 00:39:59,210
because any of the lanes are ok at that

749
00:39:56,480 --> 00:40:03,250
point you don't need to take a specific

750
00:39:59,210 --> 00:40:05,769
one of them so we'll just pick 0

751
00:40:03,250 --> 00:40:07,360
I think at that point the really the

752
00:40:05,769 --> 00:40:09,190
only thing we don't know is the T

753
00:40:07,360 --> 00:40:15,300
terminate and I think that pretty much

754
00:40:09,190 --> 00:40:26,079
has to come from the lookup value here I

755
00:40:15,300 --> 00:40:27,490
could be wrong about that yeah I could I

756
00:40:26,079 --> 00:40:30,190
could be wrong about that I don't know

757
00:40:27,489 --> 00:40:32,889
so this load where we update grid index

758
00:40:30,190 --> 00:40:34,480
right which actually can happen at the

759
00:40:32,889 --> 00:40:45,009
very end of the loop it doesn't have to

760
00:40:34,480 --> 00:40:46,840
happen anywhere in particular oh this is

761
00:40:45,010 --> 00:40:51,580
a little bit off that's supposed to be

762
00:40:46,840 --> 00:40:56,140
in here that's supposed to be there then

763
00:40:51,579 --> 00:40:57,819
we do that right yeah so this doesn't

764
00:40:56,139 --> 00:40:59,980
really need to be an else I mean that's

765
00:40:57,820 --> 00:41:02,289
a break statement so we could simplify

766
00:40:59,980 --> 00:41:04,690
the indentation here a little bit too by

767
00:41:02,289 --> 00:41:06,279
just doing that because we know that

768
00:41:04,690 --> 00:41:07,059
like well if you break you're not going

769
00:41:06,280 --> 00:41:09,850
to go any further

770
00:41:07,059 --> 00:41:11,829
so I think that's what this should look

771
00:41:09,849 --> 00:41:13,650
like and I guess the thing that I was

772
00:41:11,829 --> 00:41:16,119
talking about before is the walk table

773
00:41:13,650 --> 00:41:22,889
could give us that T value that we

774
00:41:16,119 --> 00:41:26,799
needed so the walk table could pack

775
00:41:22,889 --> 00:41:28,750
those two things together so for example

776
00:41:26,800 --> 00:41:31,960
the walk table could be something more

777
00:41:28,750 --> 00:41:34,780
like alright there's a grid index so we

778
00:41:31,960 --> 00:41:37,090
basically say like what's the Delta on

779
00:41:34,780 --> 00:41:42,400
the grid index so this is like the D

780
00:41:37,090 --> 00:41:46,390
grid and then we can also say that the T

781
00:41:42,400 --> 00:41:50,760
terminate value is the T terminate right

782
00:41:46,389 --> 00:41:53,859
so I could pull those two things out and

783
00:41:50,760 --> 00:41:55,900
that's relatively straightforward I'm

784
00:41:53,860 --> 00:41:58,300
just not sure that's the best answer

785
00:41:55,900 --> 00:42:00,639
because it does make those tables a lot

786
00:41:58,300 --> 00:42:04,060
bigger it makes them a lot bigger

787
00:42:00,639 --> 00:42:07,449
because they have to now pack a 32-bit

788
00:42:04,059 --> 00:42:10,389
value in in addition to what was just

789
00:42:07,449 --> 00:42:14,599
previously a u16 value and that's

790
00:42:10,389 --> 00:42:18,230
probably not great I mean

791
00:42:14,599 --> 00:42:21,349
yeah so if we were to do that it's it's

792
00:42:18,230 --> 00:42:26,119
a little bit it's not it's not fabulous

793
00:42:21,349 --> 00:42:48,529
you know what I mean it requires us

794
00:42:26,119 --> 00:42:51,259
doing this you know so I'm not sure that

795
00:42:48,530 --> 00:42:55,370
that's great it means that the walk

796
00:42:51,260 --> 00:42:57,590
table entries are actually quite a bit

797
00:42:55,369 --> 00:42:59,480
larger there are three times larger than

798
00:42:57,590 --> 00:43:02,170
they were before which means that the

799
00:42:59,480 --> 00:43:04,820
caching on them is three times worse and

800
00:43:02,170 --> 00:43:09,579
I don't know that that's particularly

801
00:43:04,820 --> 00:43:13,730
fabulous now you might not matter but

802
00:43:09,579 --> 00:43:14,449
it's definitely worse it's for a huge

803
00:43:13,730 --> 00:43:16,460
benefit

804
00:43:14,449 --> 00:43:18,349
meaning we really want this so if that's

805
00:43:16,460 --> 00:43:21,619
the most efficient way to do it it still

806
00:43:18,349 --> 00:43:22,880
is a massive win probably but the reason

807
00:43:21,619 --> 00:43:25,099
that I bring it up is just because there

808
00:43:22,880 --> 00:43:27,710
may be a smarter way to do this meaning

809
00:43:25,099 --> 00:43:30,440
there may be some way that instead of

810
00:43:27,710 --> 00:43:36,289
doing that we could do something else

811
00:43:30,440 --> 00:43:44,809
where we we just automatically propagate

812
00:43:36,289 --> 00:43:46,610
the t-value somehow like by the way we

813
00:43:44,809 --> 00:43:48,829
step or something we can just keep track

814
00:43:46,610 --> 00:43:51,500
of it for free or something like this so

815
00:43:48,829 --> 00:43:52,969
I just I don't know but I just want to

816
00:43:51,500 --> 00:43:56,449
make sure that we're aware that that's

817
00:43:52,969 --> 00:44:01,459
you know possibly not the fabulous

818
00:43:56,449 --> 00:44:03,379
sister things okay so let's take a look

819
00:44:01,460 --> 00:44:06,050
at the walk table now here's how we're

820
00:44:03,380 --> 00:44:08,329
getting the walk table so what I really

821
00:44:06,050 --> 00:44:10,100
want here is for the light sampling

822
00:44:08,329 --> 00:44:12,650
walked able to just instead be walk

823
00:44:10,099 --> 00:44:14,449
table entries and we know that that's

824
00:44:12,650 --> 00:44:17,539
you know pretty straightforward there's

825
00:44:14,449 --> 00:44:20,089
not really anything fancy we'd have to

826
00:44:17,539 --> 00:44:23,000
do there so where we go to light

827
00:44:20,090 --> 00:44:27,140
sampling walk table

828
00:44:23,000 --> 00:44:30,440
I assume that's probably in the INL file

829
00:44:27,139 --> 00:44:33,259
and it is so that's going to be a walk

830
00:44:30,440 --> 00:44:34,220
table entry and so that's probably not

831
00:44:33,260 --> 00:44:35,830
gonna go in here that's going to be

832
00:44:34,219 --> 00:44:38,269
something that's generated by our

833
00:44:35,829 --> 00:44:43,670
subsystem so it's gonna look more like

834
00:44:38,269 --> 00:44:49,030
that right okay so I think that's

835
00:44:43,670 --> 00:44:49,030
everything and so the question here is

836
00:44:49,659 --> 00:44:54,859
it's just yeah is there anything else we

837
00:44:52,219 --> 00:44:56,719
really want to do before we go through

838
00:44:54,860 --> 00:44:59,120
the work of actually producing the

839
00:44:56,719 --> 00:45:01,129
tables for this system which is going to

840
00:44:59,119 --> 00:45:05,150
be pretty much the majority of the work

841
00:45:01,130 --> 00:45:06,800
we're gonna have to do and it doesn't I

842
00:45:05,150 --> 00:45:08,150
mean it looks to me like everything's

843
00:45:06,800 --> 00:45:09,620
fine what I really need to do is just

844
00:45:08,150 --> 00:45:11,539
validate the performance of the routine

845
00:45:09,619 --> 00:45:13,549
and then start pulling out all this crap

846
00:45:11,539 --> 00:45:15,860
because there's so much cruft in here

847
00:45:13,550 --> 00:45:17,660
now that doesn't really need to be there

848
00:45:15,860 --> 00:45:19,579
if this does turn out to be as good as I

849
00:45:17,659 --> 00:45:22,219
think it will be then we can just

850
00:45:19,579 --> 00:45:24,199
vaporize like half the code in this file

851
00:45:22,219 --> 00:45:28,219
because it's all for stuff that we don't

852
00:45:24,199 --> 00:45:34,539
do anymore so looking at the cost

853
00:45:28,219 --> 00:45:36,829
metrics here that stuff looks right I

854
00:45:34,539 --> 00:45:39,440
think that's a pretty sane way to do it

855
00:45:36,829 --> 00:45:41,719
so we can just adjust this cost metric

856
00:45:39,440 --> 00:45:44,269
as necessary and you know you could make

857
00:45:41,719 --> 00:45:46,939
it to 55 if you just wanted to basically

858
00:45:44,269 --> 00:45:50,179
raycast everything always and you could

859
00:45:46,940 --> 00:45:53,389
make it as low as you know one or two if

860
00:45:50,179 --> 00:45:54,980
you wanted the worst possible thing the

861
00:45:53,389 --> 00:45:57,049
only thing it doesn't account for right

862
00:45:54,980 --> 00:46:00,590
now is loading out the spatial grid

863
00:45:57,050 --> 00:46:03,289
nodes themselves which is some cost so

864
00:46:00,590 --> 00:46:11,240
we may want the cost metric to also take

865
00:46:03,289 --> 00:46:14,900
that into account but I mean who knows

866
00:46:11,239 --> 00:46:17,119
right so I'm not sure if we want that

867
00:46:14,900 --> 00:46:19,190
like what we could do is is have there

868
00:46:17,119 --> 00:46:21,049
be a cost metric I mean we could make

869
00:46:19,190 --> 00:46:23,599
this a little bit more expressive right

870
00:46:21,050 --> 00:46:25,130
you could say something like this where

871
00:46:23,599 --> 00:46:27,199
you said okay there's a cost metric

872
00:46:25,130 --> 00:46:30,230
maybe it's sixteen or something like

873
00:46:27,199 --> 00:46:35,449
that and what we do here is every time

874
00:46:30,230 --> 00:46:38,130
we process a leaf we consider that to be

875
00:46:35,449 --> 00:46:41,939
a cost metric

876
00:46:38,130 --> 00:46:47,579
a significant cost metric and then we

877
00:46:41,940 --> 00:46:50,039
also have you know a just a constant

878
00:46:47,579 --> 00:46:53,539
decrement so maybe the cost metric here

879
00:46:50,039 --> 00:46:56,069
basically says hey like you know there's

880
00:46:53,539 --> 00:46:59,039
some decrement through here that we do

881
00:46:56,068 --> 00:47:03,179
every time and this will be free because

882
00:46:59,039 --> 00:47:05,460
you know there's so much there's so much

883
00:47:03,179 --> 00:47:08,250
wide like this is all SSE there's almost

884
00:47:05,460 --> 00:47:09,990
no scalar so you know this can just

885
00:47:08,250 --> 00:47:12,028
happen I mean it could happen like you

886
00:47:09,989 --> 00:47:14,729
know right here and be basically free it

887
00:47:12,028 --> 00:47:18,210
will just snuggle in with the SSE ops

888
00:47:14,730 --> 00:47:21,059
and be free so we can just do that and

889
00:47:18,210 --> 00:47:23,429
then down here we just have a constant

890
00:47:21,059 --> 00:47:25,829
cost so every time to the loop it also

891
00:47:23,429 --> 00:47:28,078
goes down so this way we can basically

892
00:47:25,829 --> 00:47:29,880
say you know every one of these is a

893
00:47:28,079 --> 00:47:32,970
cost and we could make this more

894
00:47:29,880 --> 00:47:38,630
expensive too you could say like - do

895
00:47:32,969 --> 00:47:43,348
you know what is the actual cost here

896
00:47:38,630 --> 00:47:45,410
relative to the base loop so you know I

897
00:47:43,349 --> 00:47:48,210
don't know what this value should be

898
00:47:45,409 --> 00:47:50,278
maybe it's four times as expensive to do

899
00:47:48,210 --> 00:47:52,920
it maybe it's twice as expensive maybe

900
00:47:50,278 --> 00:47:55,318
it's no more expensive I don't know but

901
00:47:52,920 --> 00:47:59,210
you know something like that we would

902
00:47:55,318 --> 00:48:02,338
use to adjust the cost that we're paying

903
00:47:59,210 --> 00:48:05,250
and so we know we could do like 16 grid

904
00:48:02,338 --> 00:48:08,358
squares that have nothing in them or

905
00:48:05,250 --> 00:48:12,000
eight grid squares that have one set of

906
00:48:08,358 --> 00:48:15,409
colliders four grid squares that have

907
00:48:12,000 --> 00:48:15,409
two sets that sort of thing

908
00:48:22,820 --> 00:48:28,769
so I think that's fine so I think we're

909
00:48:28,380 --> 00:48:31,980
okay

910
00:48:28,769 --> 00:48:33,690
so we process all of the leaves we look

911
00:48:31,980 --> 00:48:35,130
to see if we hit anything in there and

912
00:48:33,690 --> 00:48:37,139
we have to process all the leaves we

913
00:48:35,130 --> 00:48:39,630
can't just stop as soon as we find a hit

914
00:48:37,139 --> 00:48:41,699
because inside one cell we're not sorted

915
00:48:39,630 --> 00:48:45,780
in any way so we need to check them all

916
00:48:41,699 --> 00:48:48,569
to find the closest one I think that all

917
00:48:45,780 --> 00:48:53,190
works well we output a probe single and

918
00:48:48,570 --> 00:48:55,800
an emission direction in both cases so

919
00:48:53,190 --> 00:48:59,010
like right you can see those all

920
00:48:55,800 --> 00:49:01,230
happening here pretty cleanly shuffler

921
00:48:59,010 --> 00:49:03,150
gets loaded in here it doesn't get

922
00:49:01,230 --> 00:49:04,980
loaded in the other case because we

923
00:49:03,150 --> 00:49:10,230
don't care it can just be the default

924
00:49:04,980 --> 00:49:13,110
value and then we fall through now again

925
00:49:10,230 --> 00:49:15,179
we probably don't want this exactly so

926
00:49:13,110 --> 00:49:19,680
what we want to do here is probably

927
00:49:15,179 --> 00:49:22,769
having we want a location to probe that

928
00:49:19,679 --> 00:49:25,559
would give us in the case where we don't

929
00:49:22,769 --> 00:49:32,639
hit anything we would want there to be

930
00:49:25,559 --> 00:49:36,320
like I mean I guess I don't know what we

931
00:49:32,639 --> 00:49:36,319
want to do with like moonlight and stuff

932
00:49:37,010 --> 00:49:42,210
it may be that we just want to put

933
00:49:39,570 --> 00:49:45,720
moonlight tiles I mean I think that

934
00:49:42,210 --> 00:49:48,389
maybe just a better idea because I feel

935
00:49:45,719 --> 00:49:50,579
like moonlight tiles are better than

936
00:49:48,389 --> 00:49:53,339
what the previous solution we had was

937
00:49:50,579 --> 00:49:57,659
and so I think what we would want to do

938
00:49:53,340 --> 00:50:00,059
is actually hit those things and produce

939
00:49:57,659 --> 00:50:04,920
the correct durations for those things

940
00:50:00,059 --> 00:50:08,489
like the emission for what we hit would

941
00:50:04,920 --> 00:50:11,159
be something that could be presented you

942
00:50:08,489 --> 00:50:13,859
know and we could have ways of having

943
00:50:11,159 --> 00:50:16,559
directional emission that come from

944
00:50:13,860 --> 00:50:17,960
you know things we hit like when we load

945
00:50:16,559 --> 00:50:20,489
this stuff up

946
00:50:17,960 --> 00:50:22,829
we could have ways of doing directional

947
00:50:20,489 --> 00:50:24,779
emission that way and I'm just not sure

948
00:50:22,829 --> 00:50:26,880
exactly how we want to fold that into

949
00:50:24,780 --> 00:50:28,740
the routine so I think what I'm going to

950
00:50:26,880 --> 00:50:29,670
do is say that I don't really care about

951
00:50:28,739 --> 00:50:32,009
that

952
00:50:29,670 --> 00:50:33,659
so transfer PPS here is always going to

953
00:50:32,010 --> 00:50:39,240
get set and we're gonna work on how we

954
00:50:33,659 --> 00:50:42,449
actually do ambient lighting me or I

955
00:50:39,239 --> 00:50:44,038
should say sky lighting we'll look at

956
00:50:42,449 --> 00:50:45,480
that a little bit separately because I

957
00:50:44,039 --> 00:50:48,299
don't think we have a really solid idea

958
00:50:45,480 --> 00:50:49,500
for that at the moment and I'd like to

959
00:50:48,298 --> 00:50:52,199
do something different than what we're

960
00:50:49,500 --> 00:50:53,518
doing now because we already needed to

961
00:50:52,199 --> 00:50:55,108
figure out a solution for how we were

962
00:50:53,518 --> 00:50:56,959
going to prevent moon light from

963
00:50:55,108 --> 00:50:58,768
affecting areas that don't have ceilings

964
00:50:56,960 --> 00:51:02,088
but that are supposed to be underground

965
00:50:58,768 --> 00:51:04,949
do we just put a ceiling all over them

966
00:51:02,088 --> 00:51:06,509
you know what happens there and I think

967
00:51:04,949 --> 00:51:08,068
I don't like that solution because it

968
00:51:06,510 --> 00:51:09,630
just means we're adding a bunch of extra

969
00:51:08,068 --> 00:51:11,818
geometry we have to deal with for no

970
00:51:09,630 --> 00:51:14,818
reason I think what I would rather do is

971
00:51:11,818 --> 00:51:16,318
for the above-ground regions is add the

972
00:51:14,818 --> 00:51:17,909
geometry there because we're actually

973
00:51:16,318 --> 00:51:18,900
adding geometry that says hey there's

974
00:51:17,909 --> 00:51:21,210
light here that you need to pay

975
00:51:18,900 --> 00:51:23,250
attention to and that geometry seems

976
00:51:21,210 --> 00:51:27,298
more sensible because it's non occluding

977
00:51:23,250 --> 00:51:29,969
geometry and so it doesn't have to have

978
00:51:27,298 --> 00:51:32,038
a special renderer thing to know how to

979
00:51:29,969 --> 00:51:33,719
deal with it if we put ceilings over

980
00:51:32,039 --> 00:51:36,359
everything we kind of have this nasty

981
00:51:33,719 --> 00:51:38,338
problem of having to be able to see

982
00:51:36,358 --> 00:51:41,130
through those ceilings and so they have

983
00:51:38,338 --> 00:51:43,608
to be placed properly and you know you

984
00:51:41,130 --> 00:51:43,608
get the idea

985
00:51:50,369 --> 00:51:55,180
so we'll deal with that a little bit

986
00:51:52,510 --> 00:51:58,030
later and for now I think this is

987
00:51:55,179 --> 00:51:59,889
correct so I think what we mostly have

988
00:51:58,030 --> 00:52:03,160
to focus on now is generating the tables

989
00:51:59,889 --> 00:52:04,838
and the spatial partition let's go ahead

990
00:52:03,159 --> 00:52:08,409
and try to do the spatial partition

991
00:52:04,838 --> 00:52:10,869
first and then we'll try to do the walk

992
00:52:08,409 --> 00:52:13,269
table second I don't know what the

993
00:52:10,869 --> 00:52:18,099
status is of this exactly at the moment

994
00:52:13,269 --> 00:52:21,068
I assume this should just crash right

995
00:52:18,099 --> 00:52:22,809
because we haven't produced like we

996
00:52:21,068 --> 00:52:25,029
haven't produced any of this stuff and

997
00:52:22,809 --> 00:52:29,289
so it should be looking up into no-man's

998
00:52:25,030 --> 00:52:30,940
land in both cases right so if I run

999
00:52:29,289 --> 00:52:35,140
this I should get a well let me run it

1000
00:52:30,940 --> 00:52:36,818
under remedy so if I run the lighting

1001
00:52:35,139 --> 00:52:39,509
profiler right now it should just die

1002
00:52:36,818 --> 00:52:39,509
yeah

1003
00:52:45,000 --> 00:52:53,730
I guess I'm not sure why it died there

1004
00:52:49,860 --> 00:52:57,840
let me recompile in debug mode cuz it

1005
00:52:53,730 --> 00:53:00,740
doesn't seem quite right may just be a

1006
00:52:57,840 --> 00:53:00,740
miss reporting though

1007
00:53:10,760 --> 00:53:18,990
so I'm not sure here what's going on

1008
00:53:15,389 --> 00:53:22,739
with that it looks like this is because

1009
00:53:18,989 --> 00:53:24,539
we've that's okay so that's plausible I

1010
00:53:22,739 --> 00:53:27,169
guess because it looks like I changed

1011
00:53:24,539 --> 00:53:27,170
that up right

1012
00:53:28,639 --> 00:53:41,818
so the HH Lite props limit you know yes

1013
00:53:38,699 --> 00:53:50,969
you can see the sampling these here have

1014
00:53:41,818 --> 00:53:52,619
not actually been initialized although

1015
00:53:50,969 --> 00:53:54,419
why did it Dutch and when did I actually

1016
00:53:52,619 --> 00:53:56,670
change that over I know I don't really

1017
00:53:54,420 --> 00:53:59,119
remember doing that to be completely

1018
00:53:56,670 --> 00:53:59,119
honest with you

1019
00:54:01,010 --> 00:54:08,510
so sample directions here in this case

1020
00:54:03,809 --> 00:54:08,509
is what who passed that in

1021
00:54:12,289 --> 00:54:21,690
like who who actually passed that full

1022
00:54:14,909 --> 00:54:23,519
cast past that okay so yeah you can see

1023
00:54:21,690 --> 00:54:28,710
what happened here it was this stuff

1024
00:54:23,519 --> 00:54:31,590
right so yeah that's totally fine all

1025
00:54:28,710 --> 00:54:33,539
right so I have to go ahead now and

1026
00:54:31,590 --> 00:54:36,090
actually build all these tables that

1027
00:54:33,539 --> 00:54:37,320
guy's saying and let's actually start so

1028
00:54:36,090 --> 00:54:41,910
the first thing that we're going to need

1029
00:54:37,320 --> 00:54:44,610
to do is in end lighting computation so

1030
00:54:41,909 --> 00:54:51,750
in end lighting computation I'm gonna

1031
00:54:44,610 --> 00:54:52,920
need to actually implement the facial

1032
00:54:51,750 --> 00:54:59,219
partition build although it looks like

1033
00:54:52,920 --> 00:55:02,010
we put that in begin now we didn't like

1034
00:54:59,219 --> 00:55:03,359
that doesn't belong so here's the grid

1035
00:55:02,010 --> 00:55:05,970
build then you can see that we sort of

1036
00:55:03,360 --> 00:55:08,070
did a little bit of it so let's go ahead

1037
00:55:05,969 --> 00:55:12,809
and uncomment it and actually try to

1038
00:55:08,070 --> 00:55:14,490
make a real version of it so the first

1039
00:55:12,809 --> 00:55:16,230
thing you can see here is it goes

1040
00:55:14,489 --> 00:55:19,619
through and it just tries to figure out

1041
00:55:16,230 --> 00:55:22,139
like where these boxes exist in the

1042
00:55:19,619 --> 00:55:27,900
voxel and we have a get voxel index for

1043
00:55:22,139 --> 00:55:30,629
P sort of thing don't we I thought we

1044
00:55:27,900 --> 00:55:34,139
had something like this but I guess it's

1045
00:55:30,630 --> 00:55:37,410
rolled into compute voxel irradiance but

1046
00:55:34,139 --> 00:55:40,379
I mean this is it right so this is the

1047
00:55:37,409 --> 00:55:44,190
thing that does that computation so if

1048
00:55:40,380 --> 00:55:46,680
we wanted to have a v3u that was get I

1049
00:55:44,190 --> 00:55:49,139
guess it's technically a v3s in this

1050
00:55:46,679 --> 00:55:55,529
case because it could actually be out of

1051
00:55:49,139 --> 00:55:57,960
bounds I don't know to what extent we

1052
00:55:55,530 --> 00:55:59,250
exactly want to handle that but because

1053
00:55:57,960 --> 00:56:02,970
these should never really be out of

1054
00:55:59,250 --> 00:56:05,309
bounds in that case but what we can talk

1055
00:56:02,969 --> 00:56:09,029
about that later so in this case if I

1056
00:56:05,309 --> 00:56:14,250
have a V 3s and I say get voxel index

1057
00:56:09,030 --> 00:56:16,500
for P I want to do exactly this and I

1058
00:56:14,250 --> 00:56:18,179
assumed that it would be safe probably

1059
00:56:16,500 --> 00:56:20,409
to make this be a thing that happens

1060
00:56:18,179 --> 00:56:23,139
here

1061
00:56:20,409 --> 00:56:24,308
as well but I'm not going to do that

1062
00:56:23,139 --> 00:56:25,538
because since this has kind of a

1063
00:56:24,309 --> 00:56:28,599
slightly different thing it needs to you

1064
00:56:25,539 --> 00:56:31,239
VW's as well I'm just not gonna put that

1065
00:56:28,599 --> 00:56:34,720
part in there so I'm gonna have getfox

1066
00:56:31,239 --> 00:56:36,699
will index for P here take the v3

1067
00:56:34,719 --> 00:56:40,028
whatever the P is and the lighting

1068
00:56:36,699 --> 00:56:41,679
solution and produce that that value so

1069
00:56:40,028 --> 00:56:46,088
it's going to do exactly the same thing

1070
00:56:41,679 --> 00:56:47,768
it's then going to produce the voxel

1071
00:56:46,088 --> 00:56:50,170
index value that we expect and it's

1072
00:56:47,768 --> 00:56:53,018
going to come back here so when we call

1073
00:56:50,170 --> 00:56:54,880
this and we get it back this is all

1074
00:56:53,018 --> 00:56:55,629
totally fine and dandy what it's doing

1075
00:56:54,880 --> 00:56:57,880
here

1076
00:56:55,630 --> 00:57:01,690
and then we need to do some actual work

1077
00:56:57,880 --> 00:57:03,099
to chain these things together and what

1078
00:57:01,690 --> 00:57:06,999
this is doing is this is trying to

1079
00:57:03,099 --> 00:57:09,999
basically figure out how many leaves go

1080
00:57:06,998 --> 00:57:12,189
in each node right so what I need is a

1081
00:57:09,998 --> 00:57:14,288
temporary storage solution I need

1082
00:57:12,190 --> 00:57:15,729
something that will temporarily store

1083
00:57:14,289 --> 00:57:17,200
the data that we're actually talking

1084
00:57:15,728 --> 00:57:19,748
about

1085
00:57:17,199 --> 00:57:22,358
so I basically need scratch space for

1086
00:57:19,748 --> 00:57:26,108
that and I know how much scratch space I

1087
00:57:22,358 --> 00:57:27,818
need to do the chaining because I know

1088
00:57:26,108 --> 00:57:30,880
that it's the number of boxes that we

1089
00:57:27,818 --> 00:57:33,998
actually have so if we take a look at

1090
00:57:30,880 --> 00:57:37,838
the lighting box structure itself in

1091
00:57:33,998 --> 00:57:40,268
here what I can do is I can start to

1092
00:57:37,838 --> 00:57:42,400
play around with this stuff because we

1093
00:57:40,268 --> 00:57:44,978
know that like for example we don't use

1094
00:57:42,400 --> 00:57:48,430
these things anymore they're just not

1095
00:57:44,978 --> 00:57:50,288
part of our system anymore so instead of

1096
00:57:48,429 --> 00:57:52,210
using like these childness ooh that sort

1097
00:57:50,289 --> 00:57:55,028
of stuff we can just use this for our

1098
00:57:52,210 --> 00:57:59,608
chaining so what I'll do is I'll just

1099
00:57:55,028 --> 00:58:04,139
say okay for every one of our grid nodes

1100
00:57:59,608 --> 00:58:06,818
temporarily what I'll do is inside the

1101
00:58:04,139 --> 00:58:11,858
whatever the the actual structure here

1102
00:58:06,818 --> 00:58:14,498
is in enlighting so so for this right

1103
00:58:11,858 --> 00:58:17,018
what I'll do temporarily is I'll make

1104
00:58:14,498 --> 00:58:21,939
the start index here I'll make that be

1105
00:58:17,018 --> 00:58:25,238
the thing that tells us what the first

1106
00:58:21,940 --> 00:58:29,499
element in the grid is and then what

1107
00:58:25,239 --> 00:58:31,429
I'll do is chain using that that

1108
00:58:29,498 --> 00:58:33,919
temporary value in the lighting box

1109
00:58:31,429 --> 00:58:36,710
and again a lot of this stuff is way

1110
00:58:33,920 --> 00:58:38,329
like really kind of ugly right now and

1111
00:58:36,710 --> 00:58:40,550
the reason for that is we're trying to

1112
00:58:38,329 --> 00:58:42,619
overlay multiple systems on top of each

1113
00:58:40,550 --> 00:58:45,109
other at the same time to test to see

1114
00:58:42,619 --> 00:58:47,510
which one we're gonna go with as soon as

1115
00:58:45,108 --> 00:58:49,969
we actually definitively make the call

1116
00:58:47,510 --> 00:58:51,410
like okay it's grids then what we're

1117
00:58:49,969 --> 00:58:54,409
gonna do is we're kind of gonna rip out

1118
00:58:51,409 --> 00:58:56,690
all of that stuff right and then just do

1119
00:58:54,409 --> 00:59:00,049
a pass to clean up everything to make it

1120
00:58:56,690 --> 00:59:01,519
look nice and simple and remove any of

1121
00:59:00,050 --> 00:59:04,400
the other things that we don't need

1122
00:59:01,519 --> 00:59:07,219
because there's so many things we don't

1123
00:59:04,400 --> 00:59:08,960
need like even these split box things

1124
00:59:07,219 --> 00:59:11,269
like all that just goes away because

1125
00:59:08,960 --> 00:59:14,869
once we're gridded we don't use that

1126
00:59:11,269 --> 00:59:17,059
anymore so effectively like getting rid

1127
00:59:14,869 --> 00:59:19,309
of all of these spatial hierarchy stuff

1128
00:59:17,059 --> 00:59:21,109
all of that stuff that's a pass we have

1129
00:59:19,309 --> 00:59:22,970
to do but I just don't want to do it yet

1130
00:59:21,108 --> 00:59:26,420
because we kind of want to finish this

1131
00:59:22,969 --> 00:59:30,459
part of the testing first before

1132
00:59:26,420 --> 00:59:30,460
officially ripping all that stuff out

1133
00:59:34,568 --> 00:59:41,239
okay so if we push forward a little bit

1134
00:59:39,500 --> 00:59:43,068
further here what we know here is when

1135
00:59:41,239 --> 00:59:44,750
we want to do this chaining operation

1136
00:59:43,068 --> 00:59:48,608
what we want to do is we do want to pull

1137
00:59:44,750 --> 00:59:53,269
out the node and that's going to be this

1138
00:59:48,608 --> 00:59:55,400
and in order to pull out that node we

1139
00:59:53,269 --> 01:00:00,679
need to have some way of getting a grid

1140
00:59:55,400 --> 01:00:03,079
index from so we've got spatial grid

1141
01:00:00,679 --> 01:00:06,588
nodes we want to do something that

1142
01:00:03,079 --> 01:00:09,798
allows us to get a node from an XYZ

1143
01:00:06,588 --> 01:00:14,119
value so we want to do like something

1144
01:00:09,798 --> 01:00:17,900
like lighting or sorry solution spatial

1145
01:00:14,119 --> 01:00:25,100
grid nodes and we want to add like you

1146
01:00:17,900 --> 01:00:28,220
know spatial grid node index from here

1147
01:00:25,099 --> 01:00:30,619
and we know how to produce that because

1148
01:00:28,219 --> 01:00:33,349
we know what these voxel dimensions are

1149
01:00:30,619 --> 01:00:36,049
so that should be right fairly

1150
01:00:33,349 --> 01:00:40,549
straightforward but it does require you

1151
01:00:36,050 --> 01:00:42,050
to know what those what those are and

1152
01:00:40,550 --> 01:00:45,370
there's a couple of things here that are

1153
01:00:42,050 --> 01:00:47,240
a little bit Squinkie specifically like

1154
01:00:45,369 --> 01:00:48,650
well you know what it doesn't matter

1155
01:00:47,239 --> 01:00:50,509
we'll talk about that when we actually

1156
01:00:48,650 --> 01:00:52,010
build the loc tables the point being we

1157
01:00:50,510 --> 01:00:55,820
know that we want something that does

1158
01:00:52,010 --> 01:00:59,560
this and in order to build that index

1159
01:00:55,820 --> 01:01:02,090
there we need something that's going to

1160
01:00:59,559 --> 01:01:03,440
actually didn't we do this yet nevermind

1161
01:01:02,090 --> 01:01:10,910
it's already roots right here this is

1162
01:01:03,440 --> 01:01:12,920
what it is it's just that right and so

1163
01:01:10,909 --> 01:01:16,879
as long as we know what the voxel index

1164
01:01:12,920 --> 01:01:20,659
actually is then we don't really have to

1165
01:01:16,880 --> 01:01:23,000
worry because this that yet like this

1166
01:01:20,659 --> 01:01:25,029
will produce that value from the voxel

1167
01:01:23,000 --> 01:01:35,179
dimension anytime we actually want that

1168
01:01:25,030 --> 01:01:39,530
so let's see here if I if I go didn't we

1169
01:01:35,179 --> 01:01:44,049
have a thing that we sort of sketched

1170
01:01:39,530 --> 01:01:48,250
out the thing that built the walk list

1171
01:01:44,050 --> 01:01:48,250
here's compute walk table for example

1172
01:01:48,400 --> 01:01:55,940
didn't that also do this I guess it

1173
01:01:53,449 --> 01:01:58,879
didn't really I guess it did it sort of

1174
01:01:55,940 --> 01:02:00,829
inline which is cool all right so anyway

1175
01:01:58,880 --> 01:02:03,380
assuming that we get the grid index here

1176
01:02:00,829 --> 01:02:06,440
off we go and there is sort of a little

1177
01:02:03,380 --> 01:02:08,119
bit of a of a difficult thing here that

1178
01:02:06,440 --> 01:02:10,880
we have to consider how we want to

1179
01:02:08,119 --> 01:02:14,779
approach and that is that we would like

1180
01:02:10,880 --> 01:02:17,690
to have an apron for this scenario we'd

1181
01:02:14,780 --> 01:02:19,430
like to have the outside of the grid

1182
01:02:17,690 --> 01:02:23,119
have stuff in it that tells us that

1183
01:02:19,429 --> 01:02:26,179
we've gone too far so grid index from is

1184
01:02:23,119 --> 01:02:28,190
like really not it's it's hard because

1185
01:02:26,179 --> 01:02:30,109
we sort of have two types of grid index

1186
01:02:28,190 --> 01:02:32,720
which it's really bad an error prone to

1187
01:02:30,110 --> 01:02:34,550
have that I often find myself making

1188
01:02:32,719 --> 01:02:37,230
mistakes where if I have to indexing

1189
01:02:34,550 --> 01:02:39,119
schemes I accidentally use the wrong one

1190
01:02:37,230 --> 01:02:42,000
because when especially when you're

1191
01:02:39,119 --> 01:02:43,710
writing efficiency oriented code you

1192
01:02:42,000 --> 01:02:47,219
tend to have to drop things down into

1193
01:02:43,710 --> 01:02:50,550
like very specific you know even sim D

1194
01:02:47,219 --> 01:02:52,889
operations and you can't afford to use

1195
01:02:50,550 --> 01:02:54,480
types and type checking to help you

1196
01:02:52,889 --> 01:02:55,679
there a lot of times because compilers

1197
01:02:54,480 --> 01:02:58,349
are just really bad if this sort of

1198
01:02:55,679 --> 01:03:00,569
thing it's unfortunate and so the

1199
01:02:58,349 --> 01:03:03,449
problem that you end up having is that

1200
01:03:00,570 --> 01:03:05,760
like in this scenario I need two types

1201
01:03:03,449 --> 01:03:08,489
of grid index I need one that has an

1202
01:03:05,760 --> 01:03:10,619
apron and one that doesn't and we have

1203
01:03:08,489 --> 01:03:12,689
to be careful to use the correct one in

1204
01:03:10,619 --> 01:03:15,329
the correct circumstance what would be

1205
01:03:12,690 --> 01:03:17,519
best is if we could just have only one

1206
01:03:15,329 --> 01:03:19,619
way of indexing but I don't know that

1207
01:03:17,519 --> 01:03:21,989
that's really theoretically possible in

1208
01:03:19,619 --> 01:03:25,140
the case that we have here because we

1209
01:03:21,989 --> 01:03:27,029
need to have our lighting atlases be as

1210
01:03:25,139 --> 01:03:29,839
debt compact as possible we certainly

1211
01:03:27,030 --> 01:03:36,180
don't want to bloat them with extra data

1212
01:03:29,840 --> 01:03:38,250
that we don't need and so it's kind of

1213
01:03:36,179 --> 01:03:39,690
unfortunate so if I could have gotten

1214
01:03:38,250 --> 01:03:42,358
away without an apron in the grid

1215
01:03:39,690 --> 01:03:47,400
raycast I absolutely would I just can't

1216
01:03:42,358 --> 01:03:52,679
figure out a way to do that like you

1217
01:03:47,400 --> 01:03:54,389
know the the most the most optimal way

1218
01:03:52,679 --> 01:03:55,618
would be to get rid of that and have

1219
01:03:54,389 --> 01:03:58,469
some other way of doing like I said but

1220
01:03:55,619 --> 01:04:01,108
I just don't know how to produce a walk

1221
01:03:58,469 --> 01:04:03,959
value that's always guaranteed to hit

1222
01:04:01,108 --> 01:04:06,509
the end without doing a fair amount of

1223
01:04:03,960 --> 01:04:09,090
computation beforehand or just really

1224
01:04:06,510 --> 01:04:11,010
bloating the table size by having like a

1225
01:04:09,090 --> 01:04:13,230
secondary set of tables that you look up

1226
01:04:11,010 --> 01:04:15,000
into to figure out how far you could go

1227
01:04:13,230 --> 01:04:19,369
based on a particular array in a

1228
01:04:15,000 --> 01:04:19,369
particular location it's just not great

1229
01:04:22,320 --> 01:04:30,550
okay so I'm gonna have two of these for

1230
01:04:27,730 --> 01:04:31,750
now and maybe with an eye towards if we

1231
01:04:30,550 --> 01:04:36,789
can ever remove them that would be great

1232
01:04:31,750 --> 01:04:38,469
but you know if we can't we can so in

1233
01:04:36,789 --> 01:04:39,639
this case well I guess I could say you

1234
01:04:38,469 --> 01:04:41,169
know we just have to pass the correct

1235
01:04:39,639 --> 01:04:45,150
voxel dim is the other way to look at it

1236
01:04:41,170 --> 01:04:49,000
so in the voxel dimension here we have

1237
01:04:45,150 --> 01:04:50,829
we should have stored in here some kind

1238
01:04:49,000 --> 01:04:53,409
of a v3 I guess we even kind of know

1239
01:04:50,829 --> 01:04:54,909
when we come in here where's the voxel

1240
01:04:53,409 --> 01:04:56,699
dim values they should be in here

1241
01:04:54,909 --> 01:05:02,829
somewhere

1242
01:04:56,699 --> 01:05:04,539
like that just the voxel count right but

1243
01:05:02,829 --> 01:05:07,838
oddly enough I don't see that in here

1244
01:05:04,539 --> 01:05:09,639
anywhere so I don't really know where

1245
01:05:07,838 --> 01:05:12,070
that is at the moment but effectively

1246
01:05:09,639 --> 01:05:15,219
what we need to do here is when we have

1247
01:05:12,070 --> 01:05:17,740
this grid index from right we want to

1248
01:05:15,219 --> 01:05:19,750
pass the voxel dim in here and so I need

1249
01:05:17,739 --> 01:05:23,469
something that's like voxel dim with

1250
01:05:19,750 --> 01:05:31,059
apron and we need that to be something

1251
01:05:23,469 --> 01:05:32,739
that we use to get these grid indices so

1252
01:05:31,059 --> 01:05:34,239
we need it to look like that and I guess

1253
01:05:32,739 --> 01:05:36,879
we'll figure out where we want these

1254
01:05:34,239 --> 01:05:38,769
stored and how a little bit later maybe

1255
01:05:36,880 --> 01:05:41,980
we'll actually what we could do is just

1256
01:05:38,769 --> 01:05:43,659
put it in here and say hey you know what

1257
01:05:41,980 --> 01:05:45,460
why don't you tell us what that is and

1258
01:05:43,659 --> 01:05:49,289
we don't only care where you get it just

1259
01:05:45,460 --> 01:05:54,820
get it so then we'll go through here and

1260
01:05:49,289 --> 01:05:58,059
we will produce the the voxels here the

1261
01:05:54,820 --> 01:06:03,430
getfox will index 4p should be fine

1262
01:05:58,059 --> 01:06:06,639
either way because we don't really care

1263
01:06:03,429 --> 01:06:09,759
what the offset is of these so in this

1264
01:06:06,639 --> 01:06:11,710
case when we do the grid index from we

1265
01:06:09,760 --> 01:06:14,670
could just increment this value by

1266
01:06:11,710 --> 01:06:17,889
something to account for the apron right

1267
01:06:14,670 --> 01:06:21,579
in other words if we want we can just do

1268
01:06:17,889 --> 01:06:23,739
this so this computation is always can

1269
01:06:21,579 --> 01:06:28,750
always be done the same way we don't

1270
01:06:23,739 --> 01:06:31,088
have to worry I'm sorry this computation

1271
01:06:28,750 --> 01:06:32,949
can always be done the same way we don't

1272
01:06:31,088 --> 01:06:34,539
have to worry about the apron when we're

1273
01:06:32,949 --> 01:06:35,960
doing that because the voxel always

1274
01:06:34,539 --> 01:06:38,329
occupies exactly the same

1275
01:06:35,960 --> 01:06:41,838
vol there's just a question of whether

1276
01:06:38,329 --> 01:06:43,789
there's like an outside ring of invalid

1277
01:06:41,838 --> 01:06:46,338
voxels that are there to stop the Ray

1278
01:06:43,789 --> 01:06:47,989
caster from going too far that's really

1279
01:06:46,338 --> 01:06:51,980
all we're talking about here you know

1280
01:06:47,989 --> 01:06:54,379
I'm saying so yeah that's all that's all

1281
01:06:51,980 --> 01:06:56,030
there is so in this case if we go ahead

1282
01:06:54,380 --> 01:06:58,338
and load up one of these nodes then what

1283
01:06:56,030 --> 01:07:01,280
we want to do is chain whatever box

1284
01:06:58,338 --> 01:07:03,019
we're talking about on to that node so

1285
01:07:01,280 --> 01:07:07,240
that we know that that box has to be

1286
01:07:03,019 --> 01:07:11,449
processed in that node oh you know what

1287
01:07:07,239 --> 01:07:14,868
this is not as easy as I was making out

1288
01:07:11,449 --> 01:07:16,549
to be so since boxes can occur we may

1289
01:07:14,869 --> 01:07:17,780
need scratch space for the boxes as well

1290
01:07:16,550 --> 01:07:20,000
I thought we were going to be able to

1291
01:07:17,780 --> 01:07:21,980
get away without it but since boxes can

1292
01:07:20,000 --> 01:07:35,380
occur in multiple nodes I guess there's

1293
01:07:21,980 --> 01:07:35,380
really no way quite to do that yeah

1294
01:07:36,179 --> 01:07:40,419
that doesn't seem plausible because as

1295
01:07:38,650 --> 01:07:42,849
we go through here right we're gonna put

1296
01:07:40,420 --> 01:07:46,150
this box on multiple potentially

1297
01:07:42,849 --> 01:07:48,670
multiple grid squares and that just I

1298
01:07:46,150 --> 01:07:50,680
can't think of really any way to do that

1299
01:07:48,670 --> 01:07:54,338
properly there doesn't seem to really be

1300
01:07:50,679 --> 01:07:56,588
away so we will need scratch base for

1301
01:07:54,338 --> 01:08:00,308
this as well like we'll need some way of

1302
01:07:56,588 --> 01:08:02,818
building a chain here that that gets

1303
01:08:00,309 --> 01:08:02,819
larger

1304
01:08:31,920 --> 01:08:37,649
I'm not thinking of anything bright for

1305
01:08:34,810 --> 01:08:46,239
that so I think we may just have to use

1306
01:08:37,649 --> 01:08:48,309
temporary memory here I don't see what

1307
01:08:46,238 --> 01:08:54,879
else we're going to do so when we come

1308
01:08:48,310 --> 01:08:58,480
through that to the end lighting I feel

1309
01:08:54,880 --> 01:09:01,319
like we probably need to get temporary

1310
01:08:58,479 --> 01:09:04,509
memory temporary stack memory here and

1311
01:09:01,319 --> 01:09:07,089
in order to do that I just probably want

1312
01:09:04,509 --> 01:09:17,319
to take a look at where where is the

1313
01:09:07,088 --> 01:09:19,210
frame data because we previously had a

1314
01:09:17,319 --> 01:09:23,520
thing where we would just have extra

1315
01:09:19,210 --> 01:09:25,838
data for a particular frame right and

1316
01:09:23,520 --> 01:09:28,449
it's a little scatter shot in handmade

1317
01:09:25,838 --> 01:09:30,219
hero because you know we don't really

1318
01:09:28,448 --> 01:09:33,219
get much time to actually clean things

1319
01:09:30,219 --> 01:09:34,389
up so there's a lot of times when things

1320
01:09:33,219 --> 01:09:35,829
are a little bit more scatter than they

1321
01:09:34,389 --> 01:09:37,298
would be especially because I can only

1322
01:09:35,829 --> 01:09:40,088
you know I have such a limited amount of

1323
01:09:37,298 --> 01:09:43,088
time I can I can really spend on it on

1324
01:09:40,088 --> 01:09:45,548
streem it it doesn't really get the kind

1325
01:09:43,088 --> 01:09:49,568
of polish that you know I would normally

1326
01:09:45,548 --> 01:09:55,539
get to do so I'm not really sure we ever

1327
01:09:49,569 --> 01:09:58,090
quite got the per frame arena like it's

1328
01:09:55,539 --> 01:09:59,889
not really used in the way that you

1329
01:09:58,090 --> 01:10:01,569
would normally use it you know it

1330
01:09:59,889 --> 01:10:03,699
doesn't really get much use because we

1331
01:10:01,569 --> 01:10:05,529
added it but we never really did much

1332
01:10:03,698 --> 01:10:08,589
with it and you can see here that you

1333
01:10:05,529 --> 01:10:10,329
know there it is and a lot of people who

1334
01:10:08,590 --> 01:10:11,679
probably should be using the frame arena

1335
01:10:10,329 --> 01:10:13,899
like aren't using the frame arena

1336
01:10:11,679 --> 01:10:15,429
because it got added pretty late and

1337
01:10:13,899 --> 01:10:18,460
then we didn't do a sweep through to

1338
01:10:15,429 --> 01:10:21,069
like consolidate a lot of problems could

1339
01:10:18,460 --> 01:10:22,750
be solved with that but what I'll do

1340
01:10:21,069 --> 01:10:24,250
here is I'll just you know we'll start

1341
01:10:22,750 --> 01:10:28,448
using it in here because I know that we

1342
01:10:24,250 --> 01:10:31,359
do want it here so what we'll do is

1343
01:10:28,448 --> 01:10:33,960
we'll just say all right here's our per

1344
01:10:31,359 --> 01:10:36,750
frame arena

1345
01:10:33,960 --> 01:10:41,369
that we're going to use and we know that

1346
01:10:36,750 --> 01:10:45,899
this is a temporary thing we don't need

1347
01:10:41,369 --> 01:10:50,119
it after we do our scratch operations we

1348
01:10:45,899 --> 01:10:50,119
you know we don't we don't need to do it

1349
01:10:50,539 --> 01:10:56,069
none of the things that we do here will

1350
01:10:53,460 --> 01:10:58,710
persist so what we can do is we can use

1351
01:10:56,069 --> 01:11:01,500
the frame arena we can generate as much

1352
01:10:58,710 --> 01:11:03,029
garbage as we want right and I mean

1353
01:11:01,500 --> 01:11:05,310
effectively what these are is like free

1354
01:11:03,029 --> 01:11:06,359
garbage collection right we can do

1355
01:11:05,310 --> 01:11:08,640
whatever we want

1356
01:11:06,359 --> 01:11:10,229
doesn't matter how complicated and then

1357
01:11:08,640 --> 01:11:13,230
we get to the end it just all gets

1358
01:11:10,229 --> 01:11:16,049
cleaned up for us so at that point we

1359
01:11:13,229 --> 01:11:19,019
can just afford to say look when we're

1360
01:11:16,050 --> 01:11:21,180
building these lighting super structures

1361
01:11:19,020 --> 01:11:24,870
I don't really care how expensive it

1362
01:11:21,180 --> 01:11:27,539
becomes to do because you'll be able to

1363
01:11:24,869 --> 01:11:29,309
use this arena to allocate as much

1364
01:11:27,539 --> 01:11:31,380
temporary space as you want effectively

1365
01:11:29,310 --> 01:11:33,300
and it will all just get vaporized

1366
01:11:31,380 --> 01:11:37,890
immediately after the lighting values

1367
01:11:33,300 --> 01:11:39,090
are computed and output right so I'm

1368
01:11:37,890 --> 01:11:40,710
gonna go ahead and do it that way and

1369
01:11:39,090 --> 01:11:45,719
that way we can do it without worrying

1370
01:11:40,710 --> 01:11:47,699
too much about yeah how do we fit it

1371
01:11:45,719 --> 01:11:49,230
into the scratch space and having to do

1372
01:11:47,699 --> 01:11:52,789
like multiple loops over things or

1373
01:11:49,229 --> 01:11:55,229
things like this so let's do it

1374
01:11:52,789 --> 01:11:59,760
what I'm gonna do here is say we're

1375
01:11:55,229 --> 01:12:01,979
gonna introduce I guess a secondary

1376
01:11:59,760 --> 01:12:05,300
structure for this that's only used

1377
01:12:01,979 --> 01:12:07,799
during build I'm not sure that's the

1378
01:12:05,300 --> 01:12:10,110
that's completely necessary but I'm not

1379
01:12:07,800 --> 01:12:19,770
sure I see owlets to do it where we just

1380
01:12:10,109 --> 01:12:23,809
have lighting you know temporary box and

1381
01:12:19,770 --> 01:12:23,810
all this is is like a really crappy

1382
01:12:24,500 --> 01:12:32,219
simple buffer that's all it is it

1383
01:12:29,640 --> 01:12:35,670
doesn't do anything else and all this is

1384
01:12:32,219 --> 01:12:38,430
is saying you know here's a way to do a

1385
01:12:35,670 --> 01:12:41,719
direct iteration over all of the boxes

1386
01:12:38,430 --> 01:12:46,010
that exist in the grid so that we know

1387
01:12:41,719 --> 01:12:46,010
where they go well wait

1388
01:12:46,279 --> 01:12:51,229
but we could also just do this twice

1389
01:12:58,119 --> 01:13:09,529
yeah you know what we could also just do

1390
01:13:01,880 --> 01:13:11,720
it twice and not bother let's try that

1391
01:13:09,529 --> 01:13:15,469
and see how expensive it is so suppose

1392
01:13:11,720 --> 01:13:17,720
you just did this right and instead of

1393
01:13:15,470 --> 01:13:20,990
ever doing any training at all you just

1394
01:13:17,720 --> 01:13:23,210
said hey like let's just record how many

1395
01:13:20,989 --> 01:13:26,029
things we actually needed to put in here

1396
01:13:23,210 --> 01:13:29,090
in the first place so like for each one

1397
01:13:26,029 --> 01:13:33,319
of these we just counted so we let start

1398
01:13:29,090 --> 01:13:45,350
index right be like the count so you

1399
01:13:33,319 --> 01:13:57,829
know we clear it first we do something

1400
01:13:45,350 --> 01:14:03,650
like this and we say okay clear all

1401
01:13:57,829 --> 01:14:06,529
these take the start index and use it as

1402
01:14:03,649 --> 01:14:12,199
a temporary counter when we're done

1403
01:14:06,529 --> 01:14:15,050
counting assign all of the these in

1404
01:14:12,199 --> 01:14:17,210
series so we just go to each of these

1405
01:14:15,050 --> 01:14:19,760
and say we've got a total leaf count

1406
01:14:17,210 --> 01:14:22,609
here we go through and we say for any

1407
01:14:19,760 --> 01:14:26,780
particular node the start index is the

1408
01:14:22,609 --> 01:14:29,869
total leaf count and the one passed last

1409
01:14:26,779 --> 01:14:31,639
leaf index is the total leaf count plus

1410
01:14:29,869 --> 01:14:34,099
the start index obviously have to do

1411
01:14:31,640 --> 01:14:38,200
those in the opposite order I suppose I

1412
01:14:34,100 --> 01:14:42,490
could do it the other way round meaning

1413
01:14:38,199 --> 01:14:42,489
this might be a little bit cleaner

1414
01:14:44,229 --> 01:14:48,699
because then it reads a little bit more

1415
01:14:46,399 --> 01:14:48,699
straightforward

1416
01:14:52,550 --> 01:15:10,760
does it not you know seems it seems more

1417
01:15:07,409 --> 01:15:10,760
right you could even do this

1418
01:15:13,850 --> 01:15:19,980
so we effectively go through we count

1419
01:15:17,520 --> 01:15:23,190
once and that's so that we can lay

1420
01:15:19,979 --> 01:15:29,159
everything out in a tightly packed array

1421
01:15:23,189 --> 01:15:30,869
and when we're done doing all of that we

1422
01:15:29,159 --> 01:15:34,970
can then just do the exact same loop

1423
01:15:30,869 --> 01:15:38,510
again so we just do this a second time

1424
01:15:34,970 --> 01:15:42,930
we don't need to do any of this right

1425
01:15:38,510 --> 01:15:44,940
any of these chain nonsense here and so

1426
01:15:42,930 --> 01:15:47,430
instead what we then do is we just say

1427
01:15:44,939 --> 01:15:52,019
okay like all of this stuff that we were

1428
01:15:47,430 --> 01:15:59,070
gonna do to insert things we just insert

1429
01:15:52,020 --> 01:16:00,990
them right and off we go so I think

1430
01:15:59,069 --> 01:16:04,289
that's okay we just need to get the

1431
01:16:00,989 --> 01:16:05,460
allocation stuff to work properly and

1432
01:16:04,289 --> 01:16:09,289
it's you know it's a little bit

1433
01:16:05,460 --> 01:16:13,020
squirrely but you know we'll work it out

1434
01:16:09,289 --> 01:16:16,409
so yeah as these things get inserted we

1435
01:16:13,020 --> 01:16:19,710
need to figure out like how properly to

1436
01:16:16,409 --> 01:16:22,079
insert them and it is a little bit ugly

1437
01:16:19,710 --> 01:16:26,640
because we need to kind of write them

1438
01:16:22,079 --> 01:16:31,260
out in a packed format and that may be

1439
01:16:26,640 --> 01:16:33,630
kind of slightly tricky but yeah we'll

1440
01:16:31,260 --> 01:16:36,989
see what happens there I'm not sure

1441
01:16:33,630 --> 01:16:41,190
again I don't know to what extent zeros

1442
01:16:36,989 --> 01:16:44,130
will be acceptable as things that can't

1443
01:16:41,189 --> 01:16:46,710
be hit I don't know if zero zero zero as

1444
01:16:44,130 --> 01:16:49,079
the Box minun box max will produce an

1445
01:16:46,710 --> 01:16:52,079
unhittable box or a hittable box that if

1446
01:16:49,079 --> 01:16:54,029
you hit it directly at zero zero zero so

1447
01:16:52,079 --> 01:16:59,119
you you pass perfectly through the

1448
01:16:54,029 --> 01:16:59,119
origin if that will actually get hit

1449
01:16:59,550 --> 01:17:02,909
I think I would prefer to not have to do

1450
01:17:01,409 --> 01:17:05,729
this initialization I would rather be

1451
01:17:02,909 --> 01:17:08,220
able to do a clear 2-0 so I think I

1452
01:17:05,729 --> 01:17:10,969
might change that to just more of it to

1453
01:17:08,220 --> 01:17:13,920
do oops

1454
01:17:10,970 --> 01:17:15,840
so I may say let's change that to more

1455
01:17:13,920 --> 01:17:19,020
of it to do at the moment but we'll kind

1456
01:17:15,840 --> 01:17:22,289
of come back to that later okay so in

1457
01:17:19,020 --> 01:17:25,230
here where we do we loop through our box

1458
01:17:22,289 --> 01:17:28,050
indices we figure out where these things

1459
01:17:25,229 --> 01:17:31,500
are going to go we take our total leaf

1460
01:17:28,050 --> 01:17:33,659
count we counted up we take our box

1461
01:17:31,500 --> 01:17:36,029
indices again we go through them a

1462
01:17:33,659 --> 01:17:40,319
second time and now we try to actually

1463
01:17:36,029 --> 01:17:41,579
pack them in to where they go again one

1464
01:17:40,319 --> 01:17:43,380
problem that we're going to have here is

1465
01:17:41,579 --> 01:17:51,930
actually looking at this these need to

1466
01:17:43,380 --> 01:17:55,529
be padded out to fours and so we want

1467
01:17:51,930 --> 01:18:00,539
this to actually be like totally fount

1468
01:17:55,529 --> 01:18:10,949
plus 3 mod 3 right like or and 3 I

1469
01:18:00,539 --> 01:18:13,289
should say so sorry and not 3 so we want

1470
01:18:10,949 --> 01:18:16,470
to take and say look we want this to be

1471
01:18:13,289 --> 01:18:25,769
padded to 4 and I don't know if we have

1472
01:18:16,470 --> 01:18:28,730
an aligned for that we do so we could

1473
01:18:25,770 --> 01:18:34,670
say to make this a little easier to read

1474
01:18:28,729 --> 01:18:42,329
we could just say this or better yet

1475
01:18:34,670 --> 01:18:45,899
could say this and this should have been

1476
01:18:42,329 --> 01:18:52,789
parenthesized and wasn't which is kind

1477
01:18:45,899 --> 01:18:55,769
of bad I'm not sure why we did that but

1478
01:18:52,789 --> 01:18:58,019
that could have leaked operators all

1479
01:18:55,770 --> 01:19:00,000
over the place and we could have had bad

1480
01:18:58,020 --> 01:19:05,070
results so that should be fixed and

1481
01:19:00,000 --> 01:19:06,149
wasn't oh well but point being if we

1482
01:19:05,069 --> 01:19:08,069
come through here and say all right so

1483
01:19:06,149 --> 01:19:10,259
the total leaf count here will now be

1484
01:19:08,069 --> 01:19:12,779
properly padded to fours then when we

1485
01:19:10,260 --> 01:19:16,789
come through and we look at the

1486
01:19:12,779 --> 01:19:19,288
the indices we now can use those

1487
01:19:16,788 --> 01:19:24,988
properly the other way we could do this

1488
01:19:19,288 --> 01:19:30,840
is to use this divided by four you know

1489
01:19:24,988 --> 01:19:31,468
nothing about that might be better no

1490
01:19:30,840 --> 01:19:32,699
probably not

1491
01:19:31,469 --> 01:19:34,288
we probably what we want to do is just

1492
01:19:32,698 --> 01:19:37,019
divide by four at the end that would be

1493
01:19:34,288 --> 01:19:38,538
my assumption I think that's probably

1494
01:19:37,020 --> 01:19:42,510
right

1495
01:19:38,538 --> 01:19:44,969
okay so now we have the ability to push

1496
01:19:42,510 --> 01:19:46,739
using and we can use the frame marina

1497
01:19:44,969 --> 01:19:50,368
for this we can we now need a place to

1498
01:19:46,738 --> 01:19:52,558
store all these leaves right although I

1499
01:19:50,368 --> 01:19:53,939
guess maybe we don't like again this is

1500
01:19:52,559 --> 01:19:57,029
why I say like these could all be

1501
01:19:53,939 --> 01:19:59,368
allocated just on the frame so I suppose

1502
01:19:57,029 --> 01:20:01,889
yeah like eventually we should just

1503
01:19:59,368 --> 01:20:03,750
allocate these on the frame and you know

1504
01:20:01,889 --> 01:20:06,239
use the frame marina for it seems like

1505
01:20:03,750 --> 01:20:08,309
the right thing to do rather than

1506
01:20:06,238 --> 01:20:10,919
leaving them sitting around because they

1507
01:20:08,309 --> 01:20:13,889
don't really need to sit around but you

1508
01:20:10,920 --> 01:20:16,859
know so I don't know I might say push

1509
01:20:13,889 --> 01:20:18,239
array here and we just push on the total

1510
01:20:16,859 --> 01:20:20,189
leaf count because we know this is how

1511
01:20:18,238 --> 01:20:21,928
many Leafs we need so we just say all

1512
01:20:20,189 --> 01:20:23,038
right push on the total leaf count we

1513
01:20:21,929 --> 01:20:24,899
know that we're using the temporary

1514
01:20:23,038 --> 01:20:27,029
nough in this case and we know that what

1515
01:20:24,899 --> 01:20:33,719
we need to push on are these spatial

1516
01:20:27,029 --> 01:20:36,269
grid leaves right yeah trying to think

1517
01:20:33,719 --> 01:20:39,389
of like what when I want to wrap this up

1518
01:20:36,270 --> 01:20:40,860
I might I might go a little longer today

1519
01:20:39,389 --> 01:20:45,630
just to finish this up but I want to

1520
01:20:40,859 --> 01:20:47,279
take a quick break first yeah I think I

1521
01:20:45,630 --> 01:20:48,538
might take a quick break and then we may

1522
01:20:47,279 --> 01:20:50,340
I might want to try and finish this

1523
01:20:48,538 --> 01:20:53,429
routine even if we go a little bit long

1524
01:20:50,340 --> 01:21:04,890
so so hold on one second

1525
01:20:53,430 --> 01:21:06,130
[Music]

1526
01:21:04,890 --> 01:22:02,770
[Applause]

1527
01:21:06,130 --> 01:22:03,869
[Music]

1528
01:22:02,770 --> 01:22:10,600
[Applause]

1529
01:22:03,869 --> 01:22:10,809
[Music]

1530
01:22:10,600 --> 01:22:51,630
[Applause]

1531
01:22:10,810 --> 01:22:54,340
[Music]

1532
01:22:51,630 --> 01:23:20,340
[Applause]

1533
01:22:54,340 --> 01:23:20,850
[Music]

1534
01:23:20,340 --> 01:23:26,399
[Applause]

1535
01:23:20,850 --> 01:23:26,399
[Music]

1536
01:23:33,170 --> 01:23:41,149
all right I got some some bunny fruit

1537
01:23:38,010 --> 01:23:58,739
snacks here that should do the trick for

1538
01:23:41,149 --> 01:24:00,299
energy I think there's a bug and grit

1539
01:23:58,738 --> 01:24:15,029
index from there might be let's say you

1540
01:24:00,300 --> 01:24:20,849
look all right that will surely be

1541
01:24:15,029 --> 01:24:23,300
enough sugar what's the bug in grid

1542
01:24:20,849 --> 01:24:23,300
index room

1543
01:24:34,100 --> 01:24:39,620
it looks like it's missing a Z actually

1544
01:24:52,609 --> 01:24:58,609
and that's that's weird not sure where

1545
01:24:56,539 --> 01:25:00,679
we got that from because the equation

1546
01:24:58,609 --> 01:25:05,029
should be it should look like this right

1547
01:25:00,679 --> 01:25:10,868
it should be like X is an offset that's

1548
01:25:05,029 --> 01:25:16,519
just used by itself voxel dim x times

1549
01:25:10,868 --> 01:25:20,329
the y-coordinate is how cuz it's y goes

1550
01:25:16,520 --> 01:25:23,600
by x slices is how far the y us it is

1551
01:25:20,329 --> 01:25:29,260
and then voxel dim x times voxel dim

1552
01:25:23,600 --> 01:25:29,260
why should multiply Z and it looks like

1553
01:25:30,520 --> 01:25:40,369
it looks like that's kind of busted yeah

1554
01:25:37,750 --> 01:25:42,948
cuz that I don't know why I don't know

1555
01:25:40,368 --> 01:25:46,429
how that ended up being that way but

1556
01:25:42,948 --> 01:25:51,428
that yeah not good so yeah that's what

1557
01:25:46,429 --> 01:25:54,050
we should have for sure thanks for that

1558
01:25:51,429 --> 01:25:57,618
because via växjö dim Z is not necessary

1559
01:25:54,050 --> 01:26:00,110
that's just a bounds at that point all

1560
01:25:57,618 --> 01:26:03,679
right so what do we want to do here

1561
01:26:00,109 --> 01:26:08,118
moving forward so this is actually just

1562
01:26:03,679 --> 01:26:09,770
the p-value doesn't matter sample P so

1563
01:26:08,118 --> 01:26:15,920
let's get back to what we were doing so

1564
01:26:09,770 --> 01:26:18,350
here yeah we want to allocate when we

1565
01:26:15,920 --> 01:26:20,868
run through the box indices we want to

1566
01:26:18,350 --> 01:26:22,550
allocate the total number that we

1567
01:26:20,868 --> 01:26:26,509
counted that we needed which we know

1568
01:26:22,550 --> 01:26:28,579
will be this so we do that and then for

1569
01:26:26,510 --> 01:26:30,380
each time we run through here we want to

1570
01:26:28,579 --> 01:26:32,719
do this again I don't know what this is

1571
01:26:30,380 --> 01:26:35,750
complaining about oh I guess we don't

1572
01:26:32,719 --> 01:26:38,090
have a v3 you but that's so that's fine

1573
01:26:35,750 --> 01:26:40,250
we'll just use v3 s we don't really care

1574
01:26:38,090 --> 01:26:41,869
we don't need it to be a unsigned for

1575
01:26:40,250 --> 01:26:44,229
this particular purpose it's not

1576
01:26:41,868 --> 01:26:44,229
necessary

1577
01:26:51,139 --> 01:27:03,199
does not take get box index 4p takes a

1578
01:26:58,380 --> 01:27:08,038
solution which makes sense there we go

1579
01:27:03,198 --> 01:27:12,029
okay so these have to be s 32 s just for

1580
01:27:08,038 --> 01:27:13,679
compliant compiler warning nonsense that

1581
01:27:12,029 --> 01:27:20,550
shouldn't actually exist but it's fine

1582
01:27:13,679 --> 01:27:26,069
and we will produce I guess we you know

1583
01:27:20,550 --> 01:27:29,099
what we could do so since we have since

1584
01:27:26,069 --> 01:27:32,099
we have knowledge of what the farthest

1585
01:27:29,099 --> 01:27:35,969
out value would be we could just produce

1586
01:27:32,099 --> 01:27:39,139
that values so for example if we do this

1587
01:27:35,969 --> 01:27:42,269
and we say what's the max grid index

1588
01:27:39,139 --> 01:27:49,679
well we know that the max grid index in

1589
01:27:42,269 --> 01:27:57,559
this case would have to be the total

1590
01:27:49,679 --> 01:28:00,269
voxel dimension with apron right I think

1591
01:27:57,559 --> 01:28:03,360
because that fox will dim with apron if

1592
01:28:00,269 --> 01:28:05,159
we ask it for this dimension and we

1593
01:28:03,359 --> 01:28:08,368
passed the highest value that should

1594
01:28:05,158 --> 01:28:10,799
give us back the highest index right so

1595
01:28:08,368 --> 01:28:13,069
I think that's sufficient I don't think

1596
01:28:10,800 --> 01:28:19,288
we need really anything else

1597
01:28:13,069 --> 01:28:26,849
so grid index from is voxel dim XYZ yeah

1598
01:28:19,288 --> 01:28:30,029
so this is just X Y Z and that's it okay

1599
01:28:26,849 --> 01:28:32,550
these both were passing that value so

1600
01:28:30,029 --> 01:28:36,228
you know let's make this actually take a

1601
01:28:32,550 --> 01:28:36,229
v3 s because why not

1602
01:28:44,229 --> 01:28:53,559
so this way we can just pass the triple

1603
01:28:47,689 --> 01:28:55,539
as a triple and leave it at that okay

1604
01:28:53,560 --> 01:28:58,340
problem solved

1605
01:28:55,539 --> 01:29:01,039
okay so now let's see here we've got our

1606
01:28:58,340 --> 01:29:05,119
total leaf count obviously this needs to

1607
01:29:01,039 --> 01:29:06,590
kind of be au 16 in this case and you

1608
01:29:05,119 --> 01:29:08,239
know I guess now that I'm thinking about

1609
01:29:06,590 --> 01:29:10,340
it too like if we wanted to we could

1610
01:29:08,239 --> 01:29:12,619
expand this to not be that we could use

1611
01:29:10,340 --> 01:29:14,750
larger storage and maybe we should

1612
01:29:12,619 --> 01:29:16,789
depends on whether we think we want more

1613
01:29:14,750 --> 01:29:18,979
than 65,000 of these we probably don't

1614
01:29:16,789 --> 01:29:23,090
but who knows I mean maybe we could just

1615
01:29:18,979 --> 01:29:24,500
handle that we'll see I'm gonna leave

1616
01:29:23,090 --> 01:29:25,880
them as you sixteens for now but in the

1617
01:29:24,500 --> 01:29:30,800
future we could consider doing them

1618
01:29:25,880 --> 01:29:32,510
differently all right so in this case we

1619
01:29:30,800 --> 01:29:34,310
need to make sure that we never overflow

1620
01:29:32,510 --> 01:29:37,909
this value and so in this particular

1621
01:29:34,310 --> 01:29:39,770
case we would need to say let's make

1622
01:29:37,909 --> 01:29:43,099
sure that this this thing doesn't you

1623
01:29:39,770 --> 01:29:49,700
know let's assert total leaf count here

1624
01:29:43,100 --> 01:29:52,130
or assert that well you know what well

1625
01:29:49,699 --> 01:29:55,729
summit is a 32 and we'll just assert

1626
01:29:52,130 --> 01:29:57,020
that we can safe truncate right so this

1627
01:29:55,729 --> 01:29:59,019
way we'll get an assertion if we ever

1628
01:29:57,020 --> 01:30:01,580
hit that limit which I think we want

1629
01:29:59,020 --> 01:30:03,740
because we kind of need to make sure

1630
01:30:01,579 --> 01:30:06,140
that that doesn't happen now there is

1631
01:30:03,739 --> 01:30:08,719
another thing we could do here and maybe

1632
01:30:06,140 --> 01:30:11,240
we possibly should not to think about it

1633
01:30:08,720 --> 01:30:12,800
it's probably the right thing to do we

1634
01:30:11,239 --> 01:30:15,019
know that the leaf count is never gonna

1635
01:30:12,800 --> 01:30:17,300
be particularly high you know like a

1636
01:30:15,020 --> 01:30:21,560
leaf kind of toy 56 would mean that a

1637
01:30:17,300 --> 01:30:24,140
single grid square had 10,000 24 axis

1638
01:30:21,560 --> 01:30:26,440
line counting boxes in it which is

1639
01:30:24,140 --> 01:30:26,440
absurd

1640
01:30:26,710 --> 01:30:34,189
so the thing we could do is pack 24 8

1641
01:30:30,170 --> 01:30:36,590
work 20 you know 2014 could basically

1642
01:30:34,189 --> 01:30:39,229
pack into a single 32-bit value and that

1643
01:30:36,590 --> 01:30:43,220
would allow us to scale better so I

1644
01:30:39,229 --> 01:30:45,379
might also say here as a separate pass

1645
01:30:43,220 --> 01:30:48,650
we could do I put to do in here that's

1646
01:30:45,380 --> 01:30:53,529
basically says look pack this

1647
01:30:48,649 --> 01:31:00,170
as a 32-bit value that's a you know

1648
01:30:53,529 --> 01:31:05,750
24-bit offset with a you know 8-bit

1649
01:31:00,170 --> 01:31:12,440
count this would scale to much larger

1650
01:31:05,750 --> 01:31:14,300
scenes more easily because it's entirely

1651
01:31:12,439 --> 01:31:16,579
possible that through the entire grid

1652
01:31:14,300 --> 01:31:19,850
maybe someday someone wants to run this

1653
01:31:16,579 --> 01:31:23,059
engine with more than 6 5 5 3 6 possible

1654
01:31:19,850 --> 01:31:25,789
occluders in it the chances that they're

1655
01:31:23,060 --> 01:31:27,950
all on one Square very low so it seems

1656
01:31:25,789 --> 01:31:30,289
like what we should do is pack this

1657
01:31:27,949 --> 01:31:36,619
value to assume that the offset needs a

1658
01:31:30,289 --> 01:31:40,189
lot more range than the count right it's

1659
01:31:36,619 --> 01:31:43,069
just kind of a basic like bit packing if

1660
01:31:40,189 --> 01:31:45,049
you're gonna pack a 16 16 that implies

1661
01:31:43,069 --> 01:31:47,779
the two values that you're packing need

1662
01:31:45,050 --> 01:31:49,220
to be same fidelity but in this case we

1663
01:31:47,779 --> 01:31:51,380
don't really need to do it that way so

1664
01:31:49,220 --> 01:31:53,060
we should probably allocate more bits to

1665
01:31:51,380 --> 01:31:57,289
the thing that we need more of and less

1666
01:31:53,060 --> 01:32:00,200
bits the thing we need less of so taking

1667
01:31:57,289 --> 01:32:04,479
a look at the grid here once we've got

1668
01:32:00,199 --> 01:32:04,479
that produced I think we're okay

1669
01:32:06,819 --> 01:32:22,119
this is the wrong value now why we did

1670
01:32:17,260 --> 01:32:23,500
that way let's do that so okay so once

1671
01:32:22,119 --> 01:32:25,119
we do our push array

1672
01:32:23,500 --> 01:32:26,590
it looks like the count probably comes

1673
01:32:25,119 --> 01:32:28,359
first if it was me that's the way I

1674
01:32:26,590 --> 01:32:30,819
would have done it yep

1675
01:32:28,359 --> 01:32:32,349
and so now we just need to actually do

1676
01:32:30,819 --> 01:32:34,750
the part that packs these things

1677
01:32:32,350 --> 01:32:38,230
together so when we do get voxel index

1678
01:32:34,750 --> 01:32:43,300
for P here we already did that right

1679
01:32:38,229 --> 01:32:46,449
like so and so now what we should be

1680
01:32:43,300 --> 01:32:48,550
mostly doing here is just figuring out

1681
01:32:46,449 --> 01:32:54,510
how the actual packing pax packs down

1682
01:32:48,550 --> 01:32:56,250
into the each node this is the v3 yes

1683
01:32:54,510 --> 01:32:59,829
yeah okay

1684
01:32:56,250 --> 01:33:01,659
so when we go in to pack these now what

1685
01:32:59,829 --> 01:33:04,630
we sort of need to do is we need to

1686
01:33:01,659 --> 01:33:09,670
figure out again like how we want these

1687
01:33:04,630 --> 01:33:11,440
things to be recorded and the problem

1688
01:33:09,670 --> 01:33:13,420
that we're going to have is we don't

1689
01:33:11,439 --> 01:33:16,089
have like a temporary value anywhere

1690
01:33:13,420 --> 01:33:17,920
sitting around that would let us do this

1691
01:33:16,090 --> 01:33:20,500
conveniently so if we if we take a look

1692
01:33:17,920 --> 01:33:22,989
at what we need something like the one

1693
01:33:20,500 --> 01:33:25,239
passed last index here where we actually

1694
01:33:22,989 --> 01:33:27,519
write this down we may actually want to

1695
01:33:25,239 --> 01:33:30,729
not quite do that yet so what we may

1696
01:33:27,520 --> 01:33:32,530
want to do is something like this where

1697
01:33:30,729 --> 01:33:34,839
we say okay one past last index just

1698
01:33:32,529 --> 01:33:36,489
gets initialized to zero it's going to

1699
01:33:34,840 --> 01:33:38,409
be used here as a way of figuring out

1700
01:33:36,489 --> 01:33:40,750
where to fill in these values and then

1701
01:33:38,409 --> 01:33:45,189
at the end we'll just sweep through and

1702
01:33:40,750 --> 01:33:47,670
divide it by four right or put it more

1703
01:33:45,189 --> 01:33:50,469
specifically put it into a different

1704
01:33:47,670 --> 01:33:56,699
category right like put it in you know

1705
01:33:50,470 --> 01:33:56,699
just just let's see here so right like

1706
01:33:57,829 --> 01:34:03,149
here when we're done with everything we

1707
01:34:01,800 --> 01:34:06,690
sweep through those grids where's one

1708
01:34:03,149 --> 01:34:11,189
more time and reset this value to be you

1709
01:34:06,689 --> 01:34:12,869
know what it should be and again for

1710
01:34:11,189 --> 01:34:14,039
that one so we sort of need to do a

1711
01:34:12,869 --> 01:34:17,159
little bit of work here

1712
01:34:14,039 --> 01:34:21,109
we can't just we can't quite just divide

1713
01:34:17,159 --> 01:34:27,750
it by four right

1714
01:34:21,109 --> 01:34:29,609
we need these values to we need these

1715
01:34:27,750 --> 01:34:33,020
values to be divided by four in a way

1716
01:34:29,609 --> 01:34:36,029
that actually works for us logically so

1717
01:34:33,020 --> 01:34:37,890
we need to take the start index and

1718
01:34:36,029 --> 01:34:41,849
divide that by four but then we need the

1719
01:34:37,890 --> 01:34:47,160
one pass last index to be what would it

1720
01:34:41,850 --> 01:34:49,920
would be if we added it because we know

1721
01:34:47,159 --> 01:34:52,769
it's account we added three then divided

1722
01:34:49,920 --> 01:34:54,899
it by four right because we know that we

1723
01:34:52,770 --> 01:34:56,520
need to take the start index and divide

1724
01:34:54,899 --> 01:34:58,399
by four you know you can also think of

1725
01:34:56,520 --> 01:35:00,120
this as a shift down by two right

1726
01:34:58,399 --> 01:35:02,219
because basically what we're doing is

1727
01:35:00,119 --> 01:35:03,829
we're just taking the high part of it we

1728
01:35:02,219 --> 01:35:07,469
know that this thing was already aligned

1729
01:35:03,829 --> 01:35:08,850
and and again you know I'm just gonna

1730
01:35:07,469 --> 01:35:10,020
make it be a divided by four here

1731
01:35:08,850 --> 01:35:11,610
because I think it's a little easy to

1732
01:35:10,020 --> 01:35:14,969
read and the compiler will automatically

1733
01:35:11,609 --> 01:35:17,479
turn it into a shift I was certain so we

1734
01:35:14,969 --> 01:35:17,480
shouldn't have to worry

1735
01:35:23,779 --> 01:35:26,969
so what we're doing here is we're just

1736
01:35:25,710 --> 01:35:28,770
sing all right there's a start index we

1737
01:35:26,969 --> 01:35:32,460
take one pass last indexes account we

1738
01:35:28,770 --> 01:35:34,890
add it up we round up because we need to

1739
01:35:32,460 --> 01:35:38,219
make sure we grab out that last packet

1740
01:35:34,890 --> 01:35:40,320
of leaves and then we divide by four

1741
01:35:38,219 --> 01:35:44,219
that resets everything that we needed to

1742
01:35:40,319 --> 01:35:47,279
reset so I think all of this is now

1743
01:35:44,219 --> 01:35:48,600
correct this will just flow properly and

1744
01:35:47,279 --> 01:35:51,359
so we're really just talking about the

1745
01:35:48,600 --> 01:35:57,570
packing that has to happen here and an

1746
01:35:51,359 --> 01:35:59,909
already order in order to do that I

1747
01:35:57,569 --> 01:36:02,609
think all we need to do is use the leaf

1748
01:35:59,909 --> 01:36:05,090
index which is given to us directly so

1749
01:36:02,609 --> 01:36:08,189
we should be able to basically say okay

1750
01:36:05,090 --> 01:36:11,429
the leaf index is just whatever the

1751
01:36:08,189 --> 01:36:12,928
start index was plus the one passed last

1752
01:36:11,429 --> 01:36:14,279
index and that's going to get

1753
01:36:12,929 --> 01:36:18,149
incremented because we're adding one new

1754
01:36:14,279 --> 01:36:24,149
one in here and so I think that's it

1755
01:36:18,149 --> 01:36:28,670
right that just that just does it and

1756
01:36:24,149 --> 01:36:28,670
really we we could just make these

1757
01:36:35,300 --> 01:36:39,860
you know I I don't really know exactly

1758
01:36:37,670 --> 01:36:42,769
how we and had intended these to kind of

1759
01:36:39,859 --> 01:36:46,069
come out if we take a look at the

1760
01:36:42,769 --> 01:36:48,829
lighting the this spatial grid leaf bit

1761
01:36:46,069 --> 01:36:50,748
here right actually it occurs to me too

1762
01:36:48,828 --> 01:36:52,340
that this total leaf count is just you

1763
01:36:50,748 --> 01:36:57,939
know whatever the value is divided by

1764
01:36:52,340 --> 01:36:57,940
four right so

1765
01:37:01,719 --> 01:37:05,439
yeah I mean I can't say I can't think of

1766
01:37:03,969 --> 01:37:07,869
anything I can't think of anything

1767
01:37:05,439 --> 01:37:09,279
Squinkie err here but so if we divide

1768
01:37:07,869 --> 01:37:10,899
the leaf count by four we know that each

1769
01:37:09,279 --> 01:37:13,300
one of these packs for in there we're

1770
01:37:10,899 --> 01:37:15,309
gonna pull one of these out and in order

1771
01:37:13,300 --> 01:37:17,590
to pull one of these out we need to

1772
01:37:15,310 --> 01:37:22,330
first like I don't know why these are

1773
01:37:17,590 --> 01:37:27,909
the way that they are doesn't look right

1774
01:37:22,329 --> 01:37:29,738
at all like this just looks I don't I

1775
01:37:27,909 --> 01:37:32,139
don't even know how we quite wrote this

1776
01:37:29,738 --> 01:37:36,819
code I'm not sure exactly what we were

1777
01:37:32,140 --> 01:37:41,320
thinking when we push this in it just

1778
01:37:36,819 --> 01:37:42,729
looks a little busted so first of all we

1779
01:37:41,319 --> 01:37:44,259
don't need this anymore obviously but

1780
01:37:42,729 --> 01:37:47,049
but what we need to do here is we need

1781
01:37:44,260 --> 01:37:49,630
to say okay we have a particular node we

1782
01:37:47,050 --> 01:37:51,279
now need to take and figure out for the

1783
01:37:49,630 --> 01:37:53,140
solution spatial grid leaves which are

1784
01:37:51,279 --> 01:37:54,819
packed by fours we need to figure out

1785
01:37:53,140 --> 01:37:56,560
what the primary index is but that

1786
01:37:54,819 --> 01:38:00,399
primary index is really that's going to

1787
01:37:56,560 --> 01:38:04,600
give us back which one of these leaves

1788
01:38:00,399 --> 01:38:06,159
were in and so this part here where

1789
01:38:04,600 --> 01:38:08,530
we're doing the leaf index divided by

1790
01:38:06,159 --> 01:38:10,389
four that's really what's going on there

1791
01:38:08,529 --> 01:38:12,969
and and that's coming from this anyway

1792
01:38:10,390 --> 01:38:16,000
so we really can just we can just do

1793
01:38:12,969 --> 01:38:21,670
this right and that's what gives us the

1794
01:38:16,000 --> 01:38:25,988
leaf in this case for the lane index the

1795
01:38:21,670 --> 01:38:28,060
lane index is just the mod four of the

1796
01:38:25,988 --> 01:38:30,399
well actually you know what I take it

1797
01:38:28,060 --> 01:38:32,949
back that's that's not true I jumped

1798
01:38:30,399 --> 01:38:35,170
again a little bit there we do actually

1799
01:38:32,948 --> 01:38:38,859
still need the leaf index because we can

1800
01:38:35,170 --> 01:38:42,310
move to a different leaf right so the

1801
01:38:38,859 --> 01:38:47,529
leaf index we have to do the node start

1802
01:38:42,310 --> 01:38:49,840
index plus the node one past last index

1803
01:38:47,529 --> 01:38:52,420
that gives us where we're at right now

1804
01:38:49,840 --> 01:38:55,420
as a count and then we can produce these

1805
01:38:52,420 --> 01:38:57,730
two but that that's what we actually

1806
01:38:55,420 --> 01:39:00,159
needed so then if we take the primary

1807
01:38:57,729 --> 01:39:04,238
index here and we go to the leaf spatial

1808
01:39:00,159 --> 01:39:05,769
grid leaves we then have the correct

1809
01:39:04,238 --> 01:39:07,149
leaf to look up into but we don't

1810
01:39:05,770 --> 01:39:09,520
actually know which one of these we're

1811
01:39:07,149 --> 01:39:13,689
doing right so what we want to do there

1812
01:39:09,520 --> 01:39:15,210
is again just use the secondary index

1813
01:39:13,689 --> 01:39:18,809
for that so the lane index is what

1814
01:39:15,210 --> 01:39:21,630
actually need this stuff is not really

1815
01:39:18,810 --> 01:39:24,360
necessary right that already happened

1816
01:39:21,630 --> 01:39:27,539
when we pulled out the leaf so this was

1817
01:39:24,359 --> 01:39:30,509
kind of unnecessary but this Lane index

1818
01:39:27,539 --> 01:39:32,430
part that part we actually need so if we

1819
01:39:30,510 --> 01:39:38,880
just turn these into access ORS off of

1820
01:39:32,430 --> 01:39:41,220
the leaf we should be fine

1821
01:39:38,880 --> 01:39:43,140
and then in terms of these these are

1822
01:39:41,220 --> 01:39:44,699
things we actually have to compute so

1823
01:39:43,140 --> 01:39:46,079
what we really want to do is we do want

1824
01:39:44,699 --> 01:39:47,519
those temp variables but they're going

1825
01:39:46,079 --> 01:39:52,500
to be specifically for doing this

1826
01:39:47,520 --> 01:39:55,290
computation okay so that's what we

1827
01:39:52,500 --> 01:39:57,329
actually need to do so when we load up

1828
01:39:55,289 --> 01:40:02,269
the box which is what's happening there

1829
01:39:57,329 --> 01:40:04,500
right so it's it's this box right here

1830
01:40:02,270 --> 01:40:06,750
that's where we're actually gonna pull

1831
01:40:04,500 --> 01:40:09,000
those values from so the ref see in this

1832
01:40:06,750 --> 01:40:12,539
case is just going to be whatever the

1833
01:40:09,000 --> 01:40:17,880
ref C is of the box and similarly like

1834
01:40:12,539 --> 01:40:21,140
the the emission value here is going to

1835
01:40:17,880 --> 01:40:24,180
come from whatever the box is pack was

1836
01:40:21,140 --> 01:40:27,869
but the box men in the box max are not

1837
01:40:24,180 --> 01:40:29,820
so the box men and the Box max what we

1838
01:40:27,869 --> 01:40:34,760
need to do with those is we need to clip

1839
01:40:29,819 --> 01:40:39,389
them to this grid square I'm out of

1840
01:40:34,760 --> 01:40:42,900
lemonade well lemon water lemons and

1841
01:40:39,390 --> 01:40:47,130
water so if we have the box men in the

1842
01:40:42,899 --> 01:40:53,219
box max enter into this routine what we

1843
01:40:47,130 --> 01:40:55,199
need here is we need to have we need to

1844
01:40:53,220 --> 01:40:58,740
have some idea of where the bounds are

1845
01:40:55,199 --> 01:41:01,409
of this grid cell so effectively in here

1846
01:40:58,739 --> 01:41:02,969
where we've got this right we need some

1847
01:41:01,409 --> 01:41:06,229
way of producing the clipping volume

1848
01:41:02,970 --> 01:41:10,050
that Clips this box to that volume and

1849
01:41:06,229 --> 01:41:14,129
so where we do the like center the the

1850
01:41:10,050 --> 01:41:17,579
get center P for the grid square I don't

1851
01:41:14,130 --> 01:41:21,380
know get Fox's Center yeah that so where

1852
01:41:17,579 --> 01:41:21,380
we have the get voxel Center P

1853
01:41:23,000 --> 01:41:28,890
and we pass in the index that's

1854
01:41:26,970 --> 01:41:32,430
effectively what we want because that

1855
01:41:28,890 --> 01:41:39,930
will give us the min/max pounds what I

1856
01:41:32,430 --> 01:41:44,060
could do here is say there's there's a

1857
01:41:39,930 --> 01:41:44,060
couple different ways we could mm-hmm

1858
01:41:52,960 --> 01:42:06,939
so this brings up another interesting

1859
01:41:58,639 --> 01:42:09,380
question I guess it doesn't matter now

1860
01:42:06,939 --> 01:42:11,359
but if we take a look at what happens

1861
01:42:09,380 --> 01:42:13,099
here we could also say like oh okay so

1862
01:42:11,359 --> 01:42:14,988
this is how we produce the center let's

1863
01:42:13,099 --> 01:42:18,940
just produce the corners that way too so

1864
01:42:14,988 --> 01:42:18,939
let's put this let's roll this in here

1865
01:42:19,000 --> 01:42:26,810
let's just say here's a rectangle three

1866
01:42:22,039 --> 01:42:29,328
get voxels cell bound bounds something

1867
01:42:26,810 --> 01:42:32,480
like that so if you pass in a particular

1868
01:42:29,328 --> 01:42:35,469
index then the result that comes off of

1869
01:42:32,479 --> 01:42:40,638
this right has a min and a max value and

1870
01:42:35,469 --> 01:42:43,550
where's our tango three yeah min and Max

1871
01:42:40,639 --> 01:42:49,609
value and so in both cases you're going

1872
01:42:43,550 --> 01:42:52,969
to start with the the min corner hot and

1873
01:42:49,609 --> 01:42:54,920
in both cases we're going to do the

1874
01:42:52,969 --> 01:42:58,069
Hadamard product of the voxel seldom

1875
01:42:54,920 --> 01:43:01,940
with the index but in one case we're

1876
01:42:58,069 --> 01:43:05,029
just going to add one additional in each

1877
01:43:01,939 --> 01:43:08,689
direction so we would basically just say

1878
01:43:05,029 --> 01:43:12,979
you know whatever the v3 index is you

1879
01:43:08,689 --> 01:43:16,399
know add 1 1 1 to it and that gives us 1

1880
01:43:12,979 --> 01:43:18,078
further right so I think that's all we

1881
01:43:16,399 --> 01:43:20,448
really need for the voxel cell bounds

1882
01:43:18,078 --> 01:43:23,389
and so then when we come into the

1883
01:43:20,448 --> 01:43:27,500
lighting routine and we're building the

1884
01:43:23,389 --> 01:43:33,800
spatial partition we can just call this

1885
01:43:27,500 --> 01:43:36,229
function now and it will give us exactly

1886
01:43:33,800 --> 01:43:40,880
what we need to clip to so in here I can

1887
01:43:36,229 --> 01:43:43,488
just say hey whatever this like grid

1888
01:43:40,880 --> 01:43:47,510
square is that we just looked up so this

1889
01:43:43,488 --> 01:43:49,039
right here and we don't need to do that

1890
01:43:47,510 --> 01:43:50,480
offset because we're this is that's only

1891
01:43:49,039 --> 01:43:54,469
for the grid index so I can literally

1892
01:43:50,479 --> 01:44:02,238
just do my B 3 s X Y Z

1893
01:43:54,469 --> 01:44:04,719
right so if I just do get voxels cell

1894
01:44:02,238 --> 01:44:10,849
bounds here oops

1895
01:44:04,719 --> 01:44:14,779
solution I can get the cell bounds and

1896
01:44:10,850 --> 01:44:18,730
then I can clip these so these are the

1897
01:44:14,779 --> 01:44:21,349
box bounds and I can just clip them now

1898
01:44:18,729 --> 01:44:29,109
so I think we actually have an

1899
01:44:21,350 --> 01:44:36,310
intersection for this probably do me

1900
01:44:29,109 --> 01:44:36,309
looks like we don't I'll be enough

1901
01:44:48,020 --> 01:44:54,030
so you can see here right we've got the

1902
01:44:50,698 --> 01:45:01,769
Union but we don't have the intersection

1903
01:44:54,029 --> 01:45:05,909
which is kind of weird right I guess we

1904
01:45:01,770 --> 01:45:07,710
just never wrote it you can see here

1905
01:45:05,909 --> 01:45:11,039
that we wrote we wrote it for the

1906
01:45:07,710 --> 01:45:14,279
rectangle to eye but we didn't write it

1907
01:45:11,039 --> 01:45:21,649
for the we didn't write it for the

1908
01:45:14,279 --> 01:45:23,609
rectangle three and it's the same but

1909
01:45:21,649 --> 01:45:26,488
this is why you want metaprogramming

1910
01:45:23,609 --> 01:45:30,329
just case anyone was wondering because

1911
01:45:26,488 --> 01:45:32,759
it's just does all this for you without

1912
01:45:30,329 --> 01:45:34,439
all the garbage of templates and stupid

1913
01:45:32,760 --> 01:45:39,090
stuff that you don't actually want that

1914
01:45:34,439 --> 01:45:41,039
cause problems in C++ so if you're John

1915
01:45:39,090 --> 01:45:43,619
Blow and you made your own language then

1916
01:45:41,039 --> 01:45:45,539
you're very happy if you're not and you

1917
01:45:43,619 --> 01:45:49,019
have to use the C++ committees garbage

1918
01:45:45,539 --> 01:45:57,179
you're unhappy but you know what do you

1919
01:45:49,020 --> 01:45:59,699
do so the intersection in the union of

1920
01:45:57,179 --> 01:46:02,489
boxes is just two different ways of

1921
01:45:59,698 --> 01:46:05,428
using the comparison in the union case

1922
01:46:02,488 --> 01:46:06,869
you take the lesser of the two things

1923
01:46:05,429 --> 01:46:08,699
for the minimum and the greater of the

1924
01:46:06,869 --> 01:46:11,099
two things for the maximum so you expand

1925
01:46:08,698 --> 01:46:13,469
the size to take the furthest in each

1926
01:46:11,100 --> 01:46:15,179
direction and intersecting two

1927
01:46:13,469 --> 01:46:17,429
rectangles is just the opposite

1928
01:46:15,179 --> 01:46:19,920
operation you compare the two and then

1929
01:46:17,429 --> 01:46:23,039
you take whichever one was the least in

1930
01:46:19,920 --> 01:46:24,899
that you know along that axis so you

1931
01:46:23,039 --> 01:46:26,189
take the maximum value for the minimum

1932
01:46:24,899 --> 01:46:28,409
and the minimum value for the maximum

1933
01:46:26,189 --> 01:46:30,750
and so the other way around so here for

1934
01:46:28,409 --> 01:46:33,599
example if a is less then we actually

1935
01:46:30,750 --> 01:46:36,119
take B right whereas in this case if a

1936
01:46:33,600 --> 01:46:40,429
is less we take a and then the inverse

1937
01:46:36,119 --> 01:46:44,909
is true for the maximum values right so

1938
01:46:40,429 --> 01:46:47,100
you know not rocket science but that's

1939
01:46:44,909 --> 01:46:51,448
the idea so here we can just use

1940
01:46:47,100 --> 01:46:54,420
intersect and so we can say like leaf

1941
01:46:51,448 --> 01:46:58,919
box equals intersect and then we can

1942
01:46:54,420 --> 01:47:05,489
just say you know leaf box leaf box

1943
01:46:58,920 --> 01:47:08,579
you know leaf box and this way we have

1944
01:47:05,489 --> 01:47:10,649
clipped each of our insertions into our

1945
01:47:08,579 --> 01:47:12,840
spatial partition to that spatial

1946
01:47:10,649 --> 01:47:15,239
partition so we know that we wouldn't be

1947
01:47:12,840 --> 01:47:17,220
producing any intersections outside of

1948
01:47:15,239 --> 01:47:18,420
the spatial partition ever so we're

1949
01:47:17,220 --> 01:47:20,970
never actually going to be in a

1950
01:47:18,420 --> 01:47:22,380
situation where we collide against

1951
01:47:20,970 --> 01:47:23,940
something within um one node of the

1952
01:47:22,380 --> 01:47:26,100
vegetation and produce an intersection

1953
01:47:23,939 --> 01:47:27,750
outside of that node and again that's

1954
01:47:26,100 --> 01:47:30,539
really powerful because it means we can

1955
01:47:27,750 --> 01:47:32,250
early out so it's one of the things that

1956
01:47:30,539 --> 01:47:33,810
we can afford to do with the grid really

1957
01:47:32,250 --> 01:47:36,390
easily because we know that the greatest

1958
01:47:33,810 --> 01:47:38,130
partitioned such that we are pre

1959
01:47:36,390 --> 01:47:41,430
sweeping through it anyway so it's

1960
01:47:38,130 --> 01:47:42,900
pretty free for us to just you know flip

1961
01:47:41,430 --> 01:47:46,230
those things to the sides of the grid

1962
01:47:42,899 --> 01:47:54,149
and go from there I'm gonna go ahead and

1963
01:47:46,229 --> 01:47:56,369
make a box bounce here I guess and I'm

1964
01:47:54,149 --> 01:47:58,439
going to get rid of this because you

1965
01:47:56,369 --> 01:48:04,010
donor secured it and I'm gonna say clip

1966
01:47:58,439 --> 01:48:07,589
the cell bounds the box bounds together

1967
01:48:04,010 --> 01:48:11,970
to produce that and when we actually

1968
01:48:07,590 --> 01:48:13,949
pull the box out here I'm going to grab

1969
01:48:11,970 --> 01:48:16,740
it now I don't know what the scratch a

1970
01:48:13,949 --> 01:48:18,720
box index box index crap was that was

1971
01:48:16,739 --> 01:48:20,510
probably old news there because we don't

1972
01:48:18,720 --> 01:48:25,590
need that to be happening anymore

1973
01:48:20,510 --> 01:48:29,130
scratch isn't used all of that stuff

1974
01:48:25,590 --> 01:48:31,350
will go away when we because we don't

1975
01:48:29,130 --> 01:48:32,430
need it anymore for the grid so when we

1976
01:48:31,350 --> 01:48:36,780
come through here and we do our push

1977
01:48:32,430 --> 01:48:38,700
array all of this looks fine and so the

1978
01:48:36,779 --> 01:48:41,489
box bounds here is just making your

1979
01:48:38,699 --> 01:48:44,970
rectangle out of this thing right so box

1980
01:48:41,489 --> 01:48:46,590
box man and box box max we should

1981
01:48:44,970 --> 01:48:49,020
probably have just put a rectangle 3 in

1982
01:48:46,590 --> 01:48:52,039
there to begin with we didn't but

1983
01:48:49,020 --> 01:48:55,719
something elsea we can fix later oops

1984
01:48:52,039 --> 01:48:59,859
it's just a recommend

1985
01:48:55,719 --> 01:49:01,090
nothing nothing fancy all right so this

1986
01:48:59,859 --> 01:49:02,380
is the rectangle three that we're

1987
01:49:01,090 --> 01:49:03,670
actually going to use which is the one

1988
01:49:02,380 --> 01:49:05,739
that's been clipped so that it's

1989
01:49:03,670 --> 01:49:08,349
basically the intersection of those two

1990
01:49:05,738 --> 01:49:11,169
the actual thing we're testing against

1991
01:49:08,349 --> 01:49:14,440
and the spatial partition that know that

1992
01:49:11,170 --> 01:49:15,940
we're inserting it into looks like all

1993
01:49:14,439 --> 01:49:18,578
of that codes flowing properly right now

1994
01:49:15,939 --> 01:49:20,828
through the compiler emission is not on

1995
01:49:18,578 --> 01:49:22,748
there and so I don't actually know what

1996
01:49:20,828 --> 01:49:25,299
we did for that looks like it's easy

1997
01:49:22,748 --> 01:49:35,260
emission it's the only difference there

1998
01:49:25,300 --> 01:49:40,179
yeah that seems fine this needs to take

1999
01:49:35,260 --> 01:49:43,690
the temporary no and it looks like this

2000
01:49:40,179 --> 01:49:46,149
doesn't have the temporary nough so what

2001
01:49:43,689 --> 01:49:50,498
we probably want to do there is to

2002
01:49:46,149 --> 01:49:56,888
actually get that temporary net now you

2003
01:49:50,498 --> 01:49:58,569
think about this for a second so I think

2004
01:49:56,889 --> 01:50:01,300
we actually also don't need to allocate

2005
01:49:58,569 --> 01:50:02,679
the other like we don't need to allocate

2006
01:50:01,300 --> 01:50:03,969
those nodes either so there's a bunch of

2007
01:50:02,679 --> 01:50:05,949
things that I can do now which I

2008
01:50:03,969 --> 01:50:09,038
probably just should because one of the

2009
01:50:05,948 --> 01:50:14,649
things that you have to remember is like

2010
01:50:09,038 --> 01:50:16,599
all of this stuff so like these scratch

2011
01:50:14,649 --> 01:50:19,689
arrays like all this stuff this can all

2012
01:50:16,599 --> 01:50:21,429
go away now and like all these box

2013
01:50:19,689 --> 01:50:23,678
tables everything so we'll just be left

2014
01:50:21,429 --> 01:50:25,630
with these two and really those things

2015
01:50:23,679 --> 01:50:27,578
don't persist anyway those are things

2016
01:50:25,630 --> 01:50:30,489
that are only necessary across one frame

2017
01:50:27,578 --> 01:50:33,788
so what we can do there is we can

2018
01:50:30,488 --> 01:50:35,649
actually you know even debug lines like

2019
01:50:33,788 --> 01:50:38,408
all this stuff is really not necessary

2020
01:50:35,649 --> 01:50:40,299
to keep in here so with that per frame

2021
01:50:38,408 --> 01:50:42,368
arena the other thing we can do is sort

2022
01:50:40,300 --> 01:50:44,320
of change up a little bit away a little

2023
01:50:42,368 --> 01:50:46,210
bit about how the lighting stuff is

2024
01:50:44,319 --> 01:50:48,099
actually working and we can really

2025
01:50:46,210 --> 01:50:50,710
streamline this down so I know it seems

2026
01:50:48,099 --> 01:50:51,909
really ugly right now but it's important

2027
01:50:50,710 --> 01:50:53,519
to remember that you really don't want

2028
01:50:51,908 --> 01:50:56,319
to spend a lot of time cleaning up code

2029
01:50:53,519 --> 01:50:58,269
for no real benefit so when you're

2030
01:50:56,319 --> 01:51:01,509
actually prototyping and trying to do

2031
01:50:58,269 --> 01:51:02,650
speed testing on things you do need to

2032
01:51:01,510 --> 01:51:04,539
make sure that the codes clean enough

2033
01:51:02,649 --> 01:51:06,069
that you don't have problems with it

2034
01:51:04,538 --> 01:51:07,929
that are causing your measurements to be

2035
01:51:06,069 --> 01:51:09,399
wrong because you you know the codes so

2036
01:51:07,929 --> 01:51:09,670
messy that there's all these errors in

2037
01:51:09,399 --> 01:51:11,979
it

2038
01:51:09,670 --> 01:51:14,680
so you do need to keep a little bit of

2039
01:51:11,979 --> 01:51:17,349
of a watch on that but it's really

2040
01:51:14,680 --> 01:51:20,680
important to not spend time making code

2041
01:51:17,350 --> 01:51:22,090
clean and streamlined when you're not

2042
01:51:20,680 --> 01:51:24,760
actually sure if you're gonna use it

2043
01:51:22,090 --> 01:51:26,680
right so it's always a little bit

2044
01:51:24,760 --> 01:51:30,840
balancing act and on handmade hero like

2045
01:51:26,680 --> 01:51:34,690
we typically keep the code pretty messy

2046
01:51:30,840 --> 01:51:36,279
and that's intentional because until

2047
01:51:34,689 --> 01:51:36,929
you're actually sure how everything

2048
01:51:36,279 --> 01:51:39,189
works

2049
01:51:36,930 --> 01:51:40,869
any time you spend cleaning it up is

2050
01:51:39,189 --> 01:51:42,309
usually wasted because what you're doing

2051
01:51:40,869 --> 01:51:44,559
is you're making the code harder to work

2052
01:51:42,310 --> 01:51:47,250
with by specializing it towards a

2053
01:51:44,560 --> 01:51:50,920
particular end and that specialization

2054
01:51:47,250 --> 01:51:53,229
then has to get undone later right so

2055
01:51:50,920 --> 01:51:54,369
the lighting system is definitely coming

2056
01:51:53,229 --> 01:51:55,929
to the point where we could start to

2057
01:51:54,369 --> 01:51:59,710
streamline it but until we cross that

2058
01:51:55,930 --> 01:52:02,920
that final hurdle you really don't want

2059
01:51:59,710 --> 01:52:05,770
to be making those decisions so let's go

2060
01:52:02,920 --> 01:52:07,989
ahead and properly pass the temporary

2061
01:52:05,770 --> 01:52:09,610
nough through here so in additional

2062
01:52:07,989 --> 01:52:10,689
lighting cue here I'm gonna pass a

2063
01:52:09,609 --> 01:52:15,250
temporary nough for the internal

2064
01:52:10,689 --> 01:52:17,049
lighting core and then anyone who is

2065
01:52:15,250 --> 01:52:18,579
calling that I'm gonna make sure calls

2066
01:52:17,050 --> 01:52:21,250
what's a bit spatial partition for

2067
01:52:18,579 --> 01:52:23,559
lighting it also has to have the Vox

2068
01:52:21,250 --> 01:52:28,569
will dim with apron now the Fox will dim

2069
01:52:23,560 --> 01:52:31,660
with apron I guess the thing that I'm a

2070
01:52:28,569 --> 01:52:34,119
little confused about is the voxel

2071
01:52:31,659 --> 01:52:36,460
dimension is is just something that is

2072
01:52:34,119 --> 01:52:37,420
kind of there and I guess the reason

2073
01:52:36,460 --> 01:52:41,230
that we don't really know what that is

2074
01:52:37,420 --> 01:52:45,239
is because the atlases themselves have

2075
01:52:41,229 --> 01:52:49,089
those voxel DIMMs kind of baked in and I

2076
01:52:45,239 --> 01:52:50,769
guess we don't really know like when we

2077
01:52:49,090 --> 01:52:53,079
move those around look we haven't really

2078
01:52:50,770 --> 01:52:54,520
thought about yeah look what goes on

2079
01:52:53,079 --> 01:52:56,019
there so I get I guess to do this

2080
01:52:54,520 --> 01:53:00,940
properly what we want to do is say look

2081
01:52:56,020 --> 01:53:04,240
the voxel dim with apron in this case is

2082
01:53:00,939 --> 01:53:08,429
going to come from the spec list spec

2083
01:53:04,239 --> 01:53:08,429
atlases voxel dimension and

2084
01:53:13,488 --> 01:53:21,479
all we're really doing there is adding

2085
01:53:16,859 --> 01:53:25,109
to we're adding you know one extra pad

2086
01:53:21,479 --> 01:53:29,479
on all the sides so I think that's

2087
01:53:25,109 --> 01:53:29,479
really it that we would need to do there

2088
01:53:31,010 --> 01:53:35,099
and I think that's it

2089
01:53:32,969 --> 01:53:36,689
so the end temporary memory I don't

2090
01:53:35,099 --> 01:53:38,010
remember exactly how we did this in

2091
01:53:36,689 --> 01:53:40,049
handmade here especially okay so it's

2092
01:53:38,010 --> 01:53:43,530
just a temp mem so basically we have a

2093
01:53:40,050 --> 01:53:46,230
temp mem that gets set by whenever we

2094
01:53:43,529 --> 01:53:49,380
began the temporary sweep and then it

2095
01:53:46,229 --> 01:53:52,979
gets reset at the end so it just looks

2096
01:53:49,380 --> 01:54:01,109
like that I think that's about it in the

2097
01:53:52,979 --> 01:54:03,328
test raycast for here I guess I'm not

2098
01:54:01,109 --> 01:54:10,979
sure what we are still doing with this

2099
01:54:03,328 --> 01:54:12,868
particular routine so I guess this is

2100
01:54:10,979 --> 01:54:17,098
just the stub that we use for testing so

2101
01:54:12,868 --> 01:54:18,988
that makes sense I just is that I

2102
01:54:17,099 --> 01:54:21,559
thought we called internal now does

2103
01:54:18,988 --> 01:54:25,738
anyone call test raycast

2104
01:54:21,559 --> 01:54:29,190
nobody does so this is not a thing so

2105
01:54:25,738 --> 01:54:31,649
that just kind of goes away right so

2106
01:54:29,189 --> 01:54:33,448
here we call internal letting cor we

2107
01:54:31,649 --> 01:54:35,339
need to pass a temporary nough here so

2108
01:54:33,448 --> 01:54:39,828
we need some way of giving this thing

2109
01:54:35,340 --> 01:54:43,288
something and if if we take a look at

2110
01:54:39,828 --> 01:54:46,399
what a memory arena has in it there's

2111
01:54:43,288 --> 01:54:50,309
some issues so the platform memory block

2112
01:54:46,399 --> 01:54:51,808
bit of things here is a little bit of an

2113
01:54:50,309 --> 01:54:54,750
issue again because we don't have that

2114
01:54:51,809 --> 01:54:57,329
structure in the test code but the nice

2115
01:54:54,750 --> 01:54:59,670
part is we can just make it so that the

2116
01:54:57,328 --> 01:55:01,170
platform memory block that we give it is

2117
01:54:59,670 --> 01:55:03,239
so huge it will never have to allocate

2118
01:55:01,170 --> 01:55:06,420
anything and then we don't really have

2119
01:55:03,238 --> 01:55:08,118
that problem so I think what we can do

2120
01:55:06,420 --> 01:55:10,739
here is say that there's a temporary nap

2121
01:55:08,118 --> 01:55:13,710
and then the temporary no dot current

2122
01:55:10,738 --> 01:55:16,218
block can just be something that we

2123
01:55:13,710 --> 01:55:21,899
actually passed at some large allocation

2124
01:55:16,219 --> 01:55:23,319
so platform memory block like this we

2125
01:55:21,899 --> 01:55:26,259
can just stuff

2126
01:55:23,319 --> 01:55:35,319
with values that that are sufficient for

2127
01:55:26,260 --> 01:55:37,630
our needs I think that should work and

2128
01:55:35,319 --> 01:55:41,558
so in here where we do these allocations

2129
01:55:37,630 --> 01:55:44,170
and I believe in here we do malloc these

2130
01:55:41,559 --> 01:55:46,690
right yeah so when we do a profile run

2131
01:55:44,170 --> 01:55:50,139
with a repeat count thing when we do

2132
01:55:46,689 --> 01:55:53,948
these Malick's here and we set up like

2133
01:55:50,139 --> 01:55:55,150
the arena's to work with this stuff and

2134
01:55:53,948 --> 01:55:57,638
we don't really care about how much

2135
01:55:55,149 --> 01:56:01,000
memory we throw away here it's not super

2136
01:55:57,639 --> 01:56:03,630
relevant to us we just need to make sure

2137
01:56:01,000 --> 01:56:07,328
that our temp block has enough space so

2138
01:56:03,630 --> 01:56:08,319
the flags on the temp block don't really

2139
01:56:07,328 --> 01:56:11,500
matter because no one's going to look at

2140
01:56:08,319 --> 01:56:14,469
them but the size the base and they used

2141
01:56:11,500 --> 01:56:16,090
all do it's really just the size in the

2142
01:56:14,469 --> 01:56:19,210
base because they used being 0 is what

2143
01:56:16,090 --> 01:56:21,340
we would want so the size of this is

2144
01:56:19,210 --> 01:56:24,099
just however much we think we need so

2145
01:56:21,340 --> 01:56:25,300
you know 16 megabytes or something I

2146
01:56:24,099 --> 01:56:28,360
mean how much is this really going to

2147
01:56:25,300 --> 01:56:30,670
use it's not it's not actually using a

2148
01:56:28,359 --> 01:56:33,908
particularly large amount of memory so I

2149
01:56:30,670 --> 01:56:35,618
can make the base address just be

2150
01:56:33,908 --> 01:56:38,379
something that Mallett gives us that has

2151
01:56:35,618 --> 01:56:40,238
that much room and then that should be

2152
01:56:38,380 --> 01:56:44,460
sufficient for the memory arena to

2153
01:56:40,238 --> 01:56:48,009
function that's my assumption anyway so

2154
01:56:44,460 --> 01:56:50,529
if we pass the temporary nough into the

2155
01:56:48,010 --> 01:56:54,639
internal lighting core I don't quite

2156
01:56:50,529 --> 01:56:58,050
remember the order of passing here so

2157
01:56:54,639 --> 01:57:01,750
the debug repeat count comes last

2158
01:56:58,050 --> 01:57:04,269
so that should do it and I think that's

2159
01:57:01,750 --> 01:57:06,300
all we need so I think that's everything

2160
01:57:04,269 --> 01:57:10,690
for building the spatial partition and

2161
01:57:06,300 --> 01:57:13,750
it should just work as long as we do a

2162
01:57:10,689 --> 01:57:15,549
step through it and debug any of the

2163
01:57:13,750 --> 01:57:16,840
obvious bugs like it shouldn't be

2164
01:57:15,550 --> 01:57:20,288
particularly hard because again it's

2165
01:57:16,840 --> 01:57:22,779
just gritting up those boxes and I

2166
01:57:20,288 --> 01:57:24,639
suspect that the only real problems that

2167
01:57:22,779 --> 01:57:26,259
we may run into are like indexing

2168
01:57:24,639 --> 01:57:28,480
because like I said because it has that

2169
01:57:26,260 --> 01:57:30,969
apron problem oh and that's something we

2170
01:57:28,479 --> 01:57:32,259
also will need to do is the I should

2171
01:57:30,969 --> 01:57:34,538
probably just do that now I'm thinking

2172
01:57:32,260 --> 01:57:36,329
of it we will need some way of making it

2173
01:57:34,538 --> 01:57:39,989
so that there's the apron around

2174
01:57:36,329 --> 01:57:41,550
our is set specially so when we go

2175
01:57:39,989 --> 01:57:44,309
through here

2176
01:57:41,550 --> 01:57:48,480
and we look at these nodes we need to

2177
01:57:44,310 --> 01:57:56,130
set us certain ones to to be marked as

2178
01:57:48,479 --> 01:57:58,619
apron so I guess what I would say is

2179
01:57:56,130 --> 01:58:00,210
like in here what I do is you know we

2180
01:57:58,619 --> 01:58:02,430
set this up as we normally would and

2181
01:58:00,210 --> 01:58:07,260
then we'd have an if and the if would be

2182
01:58:02,430 --> 01:58:09,539
based on the grid ray caster how it's

2183
01:58:07,260 --> 01:58:11,159
doing that check so you can see here it

2184
01:58:09,539 --> 01:58:13,350
looks to see whether the nodes start

2185
01:58:11,159 --> 01:58:17,340
index is a spatial grid Terminator and

2186
01:58:13,350 --> 01:58:18,660
if it is then it doesn't proceed so what

2187
01:58:17,340 --> 01:58:23,279
we need to do here is we need to do a

2188
01:58:18,659 --> 01:58:27,869
check and say well is this particular

2189
01:58:23,279 --> 01:58:34,289
grid index on the edge or isn't it right

2190
01:58:27,869 --> 01:58:45,149
and I'm not sure what the best way to do

2191
01:58:34,289 --> 01:58:46,829
that is it might actually just be I mean

2192
01:58:45,149 --> 01:58:56,539
it might actually just be too clear to

2193
01:58:46,829 --> 01:59:03,630
that right you could just do this and

2194
01:58:56,539 --> 01:59:05,460
then the the start indexes of all of

2195
01:59:03,630 --> 01:59:08,760
those are all spatial grid terminators

2196
01:59:05,460 --> 01:59:13,130
all around then these as we go through

2197
01:59:08,760 --> 01:59:17,699
here these get sort of set up properly

2198
01:59:13,130 --> 01:59:21,630
as long as they weren't set to that or

2199
01:59:17,699 --> 01:59:22,889
as long as they have a well because this

2200
01:59:21,630 --> 01:59:26,069
wouldn't know the difference between

2201
01:59:22,890 --> 01:59:28,380
those two though so that doesn't really

2202
01:59:26,069 --> 01:59:30,509
help yeah so no I guess that doesn't

2203
01:59:28,380 --> 01:59:33,000
help so I guess you kind of just need to

2204
01:59:30,510 --> 01:59:39,500
actually do one loop that is actually

2205
01:59:33,000 --> 01:59:39,500
proper along the voxel to set this I

2206
01:59:40,039 --> 01:59:44,329
don't know how else you would do it

2207
01:59:48,060 --> 02:00:00,400
yeah I'm not sure so I guess you just

2208
01:59:53,020 --> 02:00:02,260
need to do something like this maybe

2209
02:00:00,399 --> 02:00:05,789
I'll just do it in line I don't yeah I

2210
02:00:02,260 --> 02:00:05,789
don't know that's that's a tough one so

2211
02:00:06,630 --> 02:00:15,000
if I were to do a full sweep of the

2212
02:00:10,539 --> 02:00:15,000
voxel so you know something like this

2213
02:00:21,000 --> 02:00:32,909
and here we go and say well alright

2214
02:00:26,170 --> 02:00:32,909
we're going to go through each of these

2215
02:00:36,210 --> 02:00:39,449
in order

2216
02:00:52,789 --> 02:01:00,420
so each of those things and we groups

2217
02:00:57,000 --> 02:01:03,270
know why that happened and we can now

2218
02:01:00,420 --> 02:01:07,349
just test against those I guess oops

2219
02:01:03,270 --> 02:01:10,530
that's alright so in here we could say

2220
02:01:07,349 --> 02:01:16,889
if we loop over the voxel and we grab

2221
02:01:10,529 --> 02:01:21,569
out the grid index from voxel dim with

2222
02:01:16,889 --> 02:01:24,868
apron X Y Z it's not a particularly

2223
02:01:21,569 --> 02:01:28,170
efficient loop but after we grab out the

2224
02:01:24,868 --> 02:01:31,198
node we can do an if and check to see

2225
02:01:28,170 --> 02:01:34,199
which one of these two we want to do and

2226
02:01:31,198 --> 02:01:37,079
we can just say spatial grid node

2227
02:01:34,198 --> 02:01:39,118
Terminator and furthermore I suppose we

2228
02:01:37,079 --> 02:01:41,130
can decouple these you know it can do

2229
02:01:39,118 --> 02:01:42,809
that assignment and then it can just do

2230
02:01:41,130 --> 02:01:44,760
a conditional assignment here because we

2231
02:01:42,810 --> 02:01:46,260
don't actually care about not we don't

2232
02:01:44,760 --> 02:01:52,560
care what this value ends up being in

2233
02:01:46,260 --> 02:01:58,110
that case and so what I might do is just

2234
02:01:52,560 --> 02:01:59,580
say okay take the start index sign it to

2235
02:01:58,109 --> 02:02:01,618
the one pass class and assign it and

2236
02:01:59,579 --> 02:02:05,309
then possibly overwrite this if we

2237
02:02:01,618 --> 02:02:13,710
happen to be like if Z equals zero you

2238
02:02:05,310 --> 02:02:16,909
know or y equals 0 or x equals 0 or Z

2239
02:02:13,710 --> 02:02:19,908
equals Fox with in with apron Z minus 1

2240
02:02:16,908 --> 02:02:19,908
or

2241
02:02:22,029 --> 02:02:34,849
or and that will properly terminate the

2242
02:02:31,699 --> 02:02:36,889
apron so that we know we're not getting

2243
02:02:34,850 --> 02:02:39,500
that we're not going to have any

2244
02:02:36,890 --> 02:02:42,890
raycasting that goes outside of that and

2245
02:02:39,500 --> 02:02:46,789
hey as convenient the stream ended right

2246
02:02:42,890 --> 02:02:48,829
as I finished that routine so I feel

2247
02:02:46,789 --> 02:02:51,909
like that will properly spatially grid

2248
02:02:48,829 --> 02:02:55,250
up our stuff modulo cleaning up for bugs

2249
02:02:51,909 --> 02:02:58,399
and so that leaves us with one more

2250
02:02:55,250 --> 02:03:00,800
thing to do tomorrow before we can start

2251
02:02:58,399 --> 02:03:03,229
actually cleaning this up and going like

2252
02:03:00,800 --> 02:03:05,119
doing speed testing and debugging and

2253
02:03:03,229 --> 02:03:06,949
all those good things which is to build

2254
02:03:05,119 --> 02:03:08,569
those tables because we don't have those

2255
02:03:06,949 --> 02:03:11,630
tables built and we did we did sketch

2256
02:03:08,569 --> 02:03:15,109
out the thing that builds the table so

2257
02:03:11,630 --> 02:03:16,190
you know we did do that and like I said

2258
02:03:15,109 --> 02:03:18,559
I don't really remember where we

2259
02:03:16,189 --> 02:03:21,710
actually put it but we did build that

2260
02:03:18,560 --> 02:03:25,430
and so we should be able to then take

2261
02:03:21,710 --> 02:03:28,909
that code and make it actually work and

2262
02:03:25,430 --> 02:03:30,650
then we can have all of our tables that

2263
02:03:28,909 --> 02:03:32,689
we need there's one thing we'll have to

2264
02:03:30,649 --> 02:03:35,989
add to it because my recollection is

2265
02:03:32,689 --> 02:03:37,849
that we didn't weren't keeping well know

2266
02:03:35,989 --> 02:03:39,559
maybe we were so we may actually have

2267
02:03:37,850 --> 02:03:45,170
already been keeping T throughout the

2268
02:03:39,560 --> 02:03:48,230
whole thing too now I think about that

2269
02:03:45,170 --> 02:03:54,350
that may actually be yeah it is so

2270
02:03:48,229 --> 02:03:56,779
here's compute walk table and yeah it

2271
02:03:54,350 --> 02:04:03,470
looks like it accepts a new teach times

2272
02:03:56,779 --> 02:04:05,960
that correct so it's like setting up the

2273
02:04:03,470 --> 02:04:08,180
location so the take takes the dimension

2274
02:04:05,960 --> 02:04:10,789
step and it sets that up and then each

2275
02:04:08,180 --> 02:04:12,800
time through it starts T best at F 30 to

2276
02:04:10,789 --> 02:04:17,050
max and then it looks through each one

2277
02:04:12,800 --> 02:04:17,050
to see which one it will go to first

2278
02:04:19,550 --> 02:04:34,619
so we more or less are tracking the T

2279
02:04:22,439 --> 02:04:36,029
through because we know the app value so

2280
02:04:34,619 --> 02:04:38,488
I mean I think all we would really have

2281
02:04:36,029 --> 02:04:40,380
to do is just take the dot product along

2282
02:04:38,488 --> 02:04:44,819
the Ray of the at value and then you're

2283
02:04:40,380 --> 02:04:47,760
pretty much done so like I think that

2284
02:04:44,819 --> 02:04:49,769
just solves a problem right so for

2285
02:04:47,760 --> 02:04:51,329
example here if we you know every time

2286
02:04:49,770 --> 02:04:52,980
we do a termination so we come through

2287
02:04:51,329 --> 02:04:57,448
here and we want to know where the t

2288
02:04:52,979 --> 02:05:02,698
terminate was for a particular for a

2289
02:04:57,448 --> 02:05:05,969
particular walk so I guess it's actually

2290
02:05:02,698 --> 02:05:07,439
it would actually be here right so if

2291
02:05:05,969 --> 02:05:09,689
you want to know what the t terminate is

2292
02:05:07,439 --> 02:05:12,299
for any particular walk you would just

2293
02:05:09,689 --> 02:05:14,849
take whatever the @ value is I believe

2294
02:05:12,300 --> 02:05:23,909
of this one and not the previous one I

2295
02:05:14,850 --> 02:05:25,890
guess I think it's this one so the T

2296
02:05:23,909 --> 02:05:27,599
terminate value is just whatever the @

2297
02:05:25,890 --> 02:05:29,670
value is it would just be the inner

2298
02:05:27,600 --> 02:05:31,590
product right of the raid erection and

2299
02:05:29,670 --> 02:05:33,329
that add value minus whatever the

2300
02:05:31,590 --> 02:05:34,890
starting location is because that's just

2301
02:05:33,329 --> 02:05:37,019
gonna measure how far along the Ray

2302
02:05:34,890 --> 02:05:39,060
you've went so the T terminate value is

2303
02:05:37,020 --> 02:05:40,530
just known so we can output it directly

2304
02:05:39,060 --> 02:05:42,270
when we build the table so it's pretty

2305
02:05:40,529 --> 02:05:44,039
easy the question is do we really want

2306
02:05:42,270 --> 02:05:46,560
to store it but it's easy enough to

2307
02:05:44,039 --> 02:05:48,630
store so we could build this table

2308
02:05:46,560 --> 02:05:56,910
pretty trivially this looks like the

2309
02:05:48,630 --> 02:05:58,949
correct actual call seems fine and yeah

2310
02:05:56,909 --> 02:06:00,210
I mean so I guess like we've pretty much

2311
02:05:58,948 --> 02:06:01,829
already done the work so tomorrow it's

2312
02:06:00,210 --> 02:06:06,210
just gonna be a case of like actually

2313
02:06:01,829 --> 02:06:10,319
cleaning it up all right so let's see

2314
02:06:06,210 --> 02:06:12,649
what happens let's go ahead and go to

2315
02:06:10,319 --> 02:06:12,649
the QA

2316
02:06:25,619 --> 02:06:28,929
someone said I might have had a typo on

2317
02:06:27,609 --> 02:06:30,279
that last one they clean that up while

2318
02:06:28,929 --> 02:06:33,359
people are yeah you're right

2319
02:06:30,279 --> 02:06:33,359
this should be an X

2320
02:07:07,469 --> 02:07:14,810
I agree that that was a very good

2321
02:07:10,079 --> 02:07:14,809
question that insa bot created

2322
02:07:19,680 --> 02:07:28,470
I already talked about the Yui 5 demo

2323
02:07:22,920 --> 02:07:31,850
during the pre stream but I did not

2324
02:07:28,470 --> 02:07:31,850
actually watch the demo yet

2325
02:07:49,618 --> 02:07:56,339
can you watch the tail alive I can if I

2326
02:07:53,039 --> 02:07:59,238
stop the recording YouTube is really bad

2327
02:07:56,340 --> 02:08:02,130
about copyright claims like you can't

2328
02:07:59,238 --> 02:08:06,359
like when I go to update upload this

2329
02:08:02,130 --> 02:08:08,460
like they will like copyright claim your

2330
02:08:06,359 --> 02:08:10,979
whole video because someone you know you

2331
02:08:08,460 --> 02:08:15,560
watch a five minute clip of someone else

2332
02:08:10,979 --> 02:08:18,658
with music in like a three hour video

2333
02:08:15,560 --> 02:08:23,940
that like literally no one would ever

2334
02:08:18,658 --> 02:08:25,710
think isn't fair use but you know it's

2335
02:08:23,939 --> 02:08:27,299
an issue so I can stop the recording now

2336
02:08:25,710 --> 02:08:30,359
and we could go watch the demo which is

2337
02:08:27,300 --> 02:08:32,250
fine I don't see any questions so if

2338
02:08:30,359 --> 02:08:33,658
people want to if they do have questions

2339
02:08:32,250 --> 02:08:36,359
they could save them tomorrow I could go

2340
02:08:33,658 --> 02:08:38,158
watch it but let me stop the recording

2341
02:08:36,359 --> 02:08:43,259
because I don't really want to have that

2342
02:08:38,158 --> 02:08:44,729
be Oh what was the original

2343
02:08:43,260 --> 02:08:48,539
justification for switching to probe

2344
02:08:44,729 --> 02:08:53,549
based gie so the reason for that was

2345
02:08:48,539 --> 02:08:55,319
that the I couldn't really figure out so

2346
02:08:53,550 --> 02:09:02,099
let me start with let me say two things

2347
02:08:55,319 --> 02:09:04,639
about it so the first thing is that we

2348
02:09:02,099 --> 02:09:07,469
had no solution like we needed to solve

2349
02:09:04,639 --> 02:09:09,380
for the lighting in general we needed to

2350
02:09:07,469 --> 02:09:11,489
have a solution that would light sprites

2351
02:09:09,380 --> 02:09:13,440
right cuz because we have lots of

2352
02:09:11,488 --> 02:09:15,839
sprites and they need to get get lit as

2353
02:09:13,439 --> 02:09:17,789
well and we hadn't really quite figured

2354
02:09:15,840 --> 02:09:19,409
out how you're gonna do that and the

2355
02:09:17,789 --> 02:09:20,789
reason that I hadn't used light probes

2356
02:09:19,408 --> 02:09:22,500
in the first place because we basically

2357
02:09:20,789 --> 02:09:25,229
did do a light probe system even

2358
02:09:22,500 --> 02:09:27,899
originally it just was point based light

2359
02:09:25,229 --> 02:09:29,189
samples around the geometry the reason

2360
02:09:27,899 --> 02:09:30,689
that I hadn't done a light probe in the

2361
02:09:29,189 --> 02:09:32,669
first place is for some reason I had

2362
02:09:30,689 --> 02:09:34,618
like this mental block of not figuring

2363
02:09:32,670 --> 02:09:35,969
out how I could do the initial

2364
02:09:34,618 --> 02:09:37,229
propagation with the light probes

2365
02:09:35,969 --> 02:09:38,609
because I was like well how do you

2366
02:09:37,229 --> 02:09:42,209
figure out what they're actually lit by

2367
02:09:38,609 --> 02:09:44,309
and I was like for some reason never put

2368
02:09:42,210 --> 02:09:46,260
it together in my head that duh when you

2369
02:09:44,310 --> 02:09:48,300
do your light propagation you just

2370
02:09:46,260 --> 02:09:52,110
sampled the light probes for your light

2371
02:09:48,300 --> 02:09:54,389
propagation it's kind of fairly obvious

2372
02:09:52,109 --> 02:09:56,460
right I don't know we just sometimes you

2373
02:09:54,389 --> 02:09:59,239
have mental blocks on things programming

2374
02:09:56,460 --> 02:09:59,239
is very complicated

2375
02:09:59,328 --> 02:10:04,069
and graphics 3d graphics is very

2376
02:10:02,328 --> 02:10:05,658
complicated and sometimes you just like

2377
02:10:04,069 --> 02:10:07,429
aren't thinking clearly about some

2378
02:10:05,658 --> 02:10:09,469
things so even though the thing is not

2379
02:10:07,429 --> 02:10:11,208
particularly difficult it's just because

2380
02:10:09,469 --> 02:10:13,458
there's so much complexity involved all

2381
02:10:11,208 --> 02:10:14,719
around the thing you just miss this you

2382
02:10:13,458 --> 02:10:19,099
know what would otherwise be fairly

2383
02:10:14,719 --> 02:10:23,179
straightforward so I think like my

2384
02:10:19,099 --> 02:10:24,349
feeling on light probes is they're

2385
02:10:23,179 --> 02:10:27,439
probably what we should have done from

2386
02:10:24,349 --> 02:10:29,748
the beginning but we didn't do them

2387
02:10:27,439 --> 02:10:30,769
because I didn't quite know how to solve

2388
02:10:29,748 --> 02:10:33,438
a particular problem with them that

2389
02:10:30,769 --> 02:10:38,958
really isn't a problem and so once we

2390
02:10:33,439 --> 02:10:40,550
figured that out it was fine right so

2391
02:10:38,958 --> 02:10:42,559
that's all really I would say about that

2392
02:10:40,550 --> 02:10:43,788
and the nice part about light probes is

2393
02:10:42,559 --> 02:10:45,320
now we can let our sprites with them

2394
02:10:43,788 --> 02:10:47,719
because we can just in the pixel shader

2395
02:10:45,319 --> 02:10:48,889
we already do in the pixel shader we can

2396
02:10:47,719 --> 02:10:50,838
just look up what the light probes are

2397
02:10:48,889 --> 02:10:52,519
near neighboring to our sprite and just

2398
02:10:50,838 --> 02:10:55,578
light them and and off we go

2399
02:10:52,519 --> 02:10:57,800
so it's very nice and it solves all of

2400
02:10:55,578 --> 02:11:01,099
our problems for us the grid based ray

2401
02:10:57,800 --> 02:11:02,479
casting I think is awesome now I hadn't

2402
02:11:01,099 --> 02:11:04,849
considered the fact that I can terminate

2403
02:11:02,479 --> 02:11:06,588
Ray's anywhere I want and then just fill

2404
02:11:04,849 --> 02:11:08,269
in a value there with the light probe

2405
02:11:06,588 --> 02:11:10,639
I've literally never seen anyone say

2406
02:11:08,269 --> 02:11:12,079
that I don't know why maybe because it's

2407
02:11:10,639 --> 02:11:14,389
so obvious that it doesn't need to get

2408
02:11:12,078 --> 02:11:18,288
said but it seems like a really really

2409
02:11:14,389 --> 02:11:19,639
big strength of grid based of not just

2410
02:11:18,288 --> 02:11:20,958
grid based ray casting because I've done

2411
02:11:19,639 --> 02:11:24,378
grid based ray casters before in fact

2412
02:11:20,958 --> 02:11:26,088
granny has a grid based ray caster in it

2413
02:11:24,378 --> 02:11:27,588
it's how it does normal map transfers

2414
02:11:26,088 --> 02:11:32,599
from high-res to little air res models

2415
02:11:27,588 --> 02:11:34,219
with a grid based ray tracer so I'm

2416
02:11:32,599 --> 02:11:37,010
actually very well-versed in grid based

2417
02:11:34,219 --> 02:11:39,349
rate racers I just never wrote one for

2418
02:11:37,010 --> 02:11:42,199
actual lighting that was using a light

2419
02:11:39,349 --> 02:11:45,168
probe system that happened to be aligned

2420
02:11:42,198 --> 02:11:47,058
to the spatial grid if you actually have

2421
02:11:45,168 --> 02:11:49,578
light probes aligned to the same grid

2422
02:11:47,059 --> 02:11:51,378
that you're using for calling it becomes

2423
02:11:49,578 --> 02:11:52,488
really pretty and I guess you know it

2424
02:11:51,378 --> 02:11:53,958
doesn't even really have to be aligned I

2425
02:11:52,488 --> 02:11:55,488
think about it but just in some way that

2426
02:11:53,958 --> 02:11:58,488
you can get a light probe answer

2427
02:11:55,488 --> 02:11:59,628
anywhere in space it's pretty compelling

2428
02:11:58,488 --> 02:12:02,658
because you can always choose to

2429
02:11:59,628 --> 02:12:06,469
terminate early I don't know why I've

2430
02:12:02,658 --> 02:12:07,848
never seen anyone say that probably

2431
02:12:06,469 --> 02:12:09,349
again because it's so obvious you don't

2432
02:12:07,849 --> 02:12:10,939
need to say it but you probably should

2433
02:12:09,349 --> 02:12:11,909
say it because I don't know I didn't

2434
02:12:10,939 --> 02:12:14,690
think of it right off the bat

2435
02:12:11,909 --> 02:12:14,689
for whatever reason

2436
02:12:24,399 --> 02:12:28,869
Oh Mattia manzanas question did I

2437
02:12:27,640 --> 02:12:30,640
remember correctly that our lighting

2438
02:12:28,869 --> 02:12:33,069
partitions aren't fixed in world size

2439
02:12:30,640 --> 02:12:34,810
but are fixed in number among XYZ does

2440
02:12:33,069 --> 02:12:36,039
that mean we eventually we can't have

2441
02:12:34,810 --> 02:12:38,100
the ideal situation where the lighting

2442
02:12:36,039 --> 02:12:40,689
voxel is aligned with world blocks and

2443
02:12:38,100 --> 02:12:42,340
light voxel sizes multiplier sub divider

2444
02:12:40,689 --> 02:12:43,539
of the game grid size that most of the

2445
02:12:42,340 --> 02:12:45,940
lighting occluded voxels are not

2446
02:12:43,539 --> 02:12:48,010
partially filled but mostly filled so

2447
02:12:45,939 --> 02:12:50,349
actually it's a little bit different

2448
02:12:48,010 --> 02:12:52,960
than that we haven't specified a rid

2449
02:12:50,350 --> 02:12:55,420
rigid policy on this yet but we do have

2450
02:12:52,960 --> 02:12:59,469
something in place for it right now just

2451
02:12:55,420 --> 02:13:01,270
for correctness the real reason that

2452
02:12:59,469 --> 02:13:04,140
we're doing what we're doing is because

2453
02:13:01,270 --> 02:13:07,570
when you subsample lighting like we do

2454
02:13:04,140 --> 02:13:11,489
you have an issue that anything you

2455
02:13:07,569 --> 02:13:15,279
might do that changes the basis of that

2456
02:13:11,488 --> 02:13:18,279
subsampled version could be seen as an

2457
02:13:15,279 --> 02:13:21,969
animating artifact so for example let's

2458
02:13:18,279 --> 02:13:24,250
suppose that we between every other

2459
02:13:21,969 --> 02:13:26,739
frames switched between twice as dense a

2460
02:13:24,250 --> 02:13:29,319
voxel grid and half as dense a voxel

2461
02:13:26,738 --> 02:13:32,109
grid right oscillating you would see

2462
02:13:29,319 --> 02:13:33,670
that animated error very clearly as the

2463
02:13:32,109 --> 02:13:34,929
lighting just changed every other frame

2464
02:13:33,670 --> 02:13:36,699
and it would be like kind of flashing

2465
02:13:34,929 --> 02:13:38,350
and weird because it's subsampled so

2466
02:13:36,698 --> 02:13:40,599
it's not a correct solution everywhere

2467
02:13:38,350 --> 02:13:43,929
it's an approximate solution and when

2468
02:13:40,600 --> 02:13:46,000
you change the ground underneath that

2469
02:13:43,929 --> 02:13:48,489
approximated solution like that it will

2470
02:13:46,000 --> 02:13:51,850
produce objectionable artifacts over

2471
02:13:48,488 --> 02:13:55,000
time any given still frame will still

2472
02:13:51,850 --> 02:13:58,870
look just fine but when you you know see

2473
02:13:55,000 --> 02:14:03,488
you'll see that change so what actually

2474
02:13:58,869 --> 02:14:04,899
happens in the system currently to

2475
02:14:03,488 --> 02:14:06,279
prevent anything like that from

2476
02:14:04,899 --> 02:14:08,170
occurring even though we move the

2477
02:14:06,279 --> 02:14:10,899
lighting bounds around a lot to like fit

2478
02:14:08,170 --> 02:14:13,980
them over the space you're seeing all we

2479
02:14:10,899 --> 02:14:17,319
require is that you always align

2480
02:14:13,979 --> 02:14:20,500
yourself to a grid that is the voxel

2481
02:14:17,319 --> 02:14:22,420
size grid right so it doesn't really

2482
02:14:20,500 --> 02:14:25,090
matter how they line up with world

2483
02:14:22,420 --> 02:14:27,158
chunks in any particular way they just

2484
02:14:25,090 --> 02:14:28,300
have to always line up with those chunks

2485
02:14:27,158 --> 02:14:30,879
in a consistent way

2486
02:14:28,300 --> 02:14:33,760
so as we slide the lighting volume

2487
02:14:30,880 --> 02:14:38,050
around it just always has to line up

2488
02:14:33,760 --> 02:14:43,449
properly with the same basic lie

2489
02:14:38,050 --> 02:14:47,050
grid in world space so that if we move

2490
02:14:43,449 --> 02:14:49,689
it it moves exactly one whole voxel

2491
02:14:47,050 --> 02:14:52,810
square over so that the lighting is

2492
02:14:49,689 --> 02:14:55,359
always the same and doesn't slide right

2493
02:14:52,810 --> 02:14:57,640
so that's all we're doing is we're

2494
02:14:55,359 --> 02:14:59,920
keeping ourselves aligned to the voxel

2495
02:14:57,640 --> 02:15:01,829
grid no matter how we move around space

2496
02:14:59,920 --> 02:15:05,529
that's the only thing we're doing there

2497
02:15:01,829 --> 02:15:09,850
and we have to do that or you would see

2498
02:15:05,529 --> 02:15:11,529
an animation error could you put moon

2499
02:15:09,850 --> 02:15:13,000
blocks in the apron so you always hit

2500
02:15:11,529 --> 02:15:16,179
something instead of using a special

2501
02:15:13,000 --> 02:15:19,960
index unfortunately not and the reason

2502
02:15:16,180 --> 02:15:22,480
for that is because the the problem that

2503
02:15:19,960 --> 02:15:23,980
we have and you know it's not a problem

2504
02:15:22,479 --> 02:15:27,819
it's more just like something we need to

2505
02:15:23,979 --> 02:15:30,339
decide how we want it to look and how we

2506
02:15:27,819 --> 02:15:32,289
want the processing to work it's not

2507
02:15:30,340 --> 02:15:34,270
like a problem in the like bug sense or

2508
02:15:32,289 --> 02:15:37,180
how are we gonna fix this you know it's

2509
02:15:34,270 --> 02:15:38,680
it's pretty straightforward but the

2510
02:15:37,180 --> 02:15:44,079
problem that we have in this case is

2511
02:15:38,680 --> 02:15:46,630
that we don't actually want moonlight to

2512
02:15:44,079 --> 02:15:47,979
light anything underground so when you

2513
02:15:46,630 --> 02:15:50,770
go down the stairs

2514
02:15:47,979 --> 02:15:53,019
we don't want moonlight lighting those

2515
02:15:50,770 --> 02:15:54,670
rooms unless the moonlight could have

2516
02:15:53,020 --> 02:15:59,590
gotten in through like the ceiling like

2517
02:15:54,670 --> 02:16:01,539
like the stairwell right and so the

2518
02:15:59,590 --> 02:16:05,829
problem is not that we couldn't put

2519
02:16:01,539 --> 02:16:09,760
moonlight or like ambient light tiles in

2520
02:16:05,829 --> 02:16:12,279
certain places in order to make that be

2521
02:16:09,760 --> 02:16:14,079
the termination condition the problem is

2522
02:16:12,279 --> 02:16:21,039
most of the time that's not actually

2523
02:16:14,079 --> 02:16:24,159
what we want right I guess I'm not sure

2524
02:16:21,039 --> 02:16:25,300
how else to say that so so basically the

2525
02:16:24,159 --> 02:16:27,430
problem that we're trying to solve here

2526
02:16:25,300 --> 02:16:29,980
is more that we need to control where

2527
02:16:27,430 --> 02:16:31,420
the moonlight actually is because we

2528
02:16:29,979 --> 02:16:33,959
don't want you to be able to hit

2529
02:16:31,420 --> 02:16:33,960
moonlight

2530
02:16:38,718 --> 02:16:43,439
from underground things and I don't

2531
02:16:41,909 --> 02:16:45,869
think we want to have to put ceilings on

2532
02:16:43,440 --> 02:16:50,460
them right so what I'd rather do is just

2533
02:16:45,870 --> 02:16:53,429
put moonlight emitters maybe on the the

2534
02:16:50,459 --> 02:16:55,558
outdoor rooms so that they hit those

2535
02:16:53,429 --> 02:16:57,239
emitters in our process that way I think

2536
02:16:55,558 --> 02:16:59,689
that's probably the way I'd rather do it

2537
02:16:57,239 --> 02:16:59,690
but

2538
02:17:12,189 --> 02:17:16,269
can you move the play button on the page

2539
02:17:14,260 --> 02:17:18,159
a bit down because on first glance the

2540
02:17:16,269 --> 02:17:22,648
horizontal line of L lets it look like

2541
02:17:18,159 --> 02:17:22,648
it has a partial drop shadow no I can't

2542
02:17:32,200 --> 02:17:36,350
many a minute Manzano says oh so

2543
02:17:34,909 --> 02:17:39,819
essentially every letting Vox sodium is

2544
02:17:36,350 --> 02:17:42,649
consistent across frames yes

2545
02:17:39,819 --> 02:17:44,751
the lighting voxel Jim is consistent

2546
02:17:42,649 --> 02:17:47,421
across frames even if the camera zooms

2547
02:17:44,751 --> 02:17:52,371
in or out that's correct

2548
02:17:47,421 --> 02:17:54,711
I thought that Fox with Jim was

2549
02:17:52,370 --> 02:17:57,229
calculated by taking world region to

2550
02:17:54,710 --> 02:18:01,550
render size divided by max number of

2551
02:17:57,229 --> 02:18:03,889
links no I don't think it is I mean I

2552
02:18:01,550 --> 02:18:07,699
could be wrong about that because again

2553
02:18:03,889 --> 02:18:09,229
I only work on the Sun weekends and I

2554
02:18:07,700 --> 02:18:11,331
have a lot of other code that I need to

2555
02:18:09,229 --> 02:18:13,930
worry about but I'm pretty sure that's

2556
02:18:11,331 --> 02:18:13,930
not the case

2557
02:18:19,750 --> 02:18:24,010
what's my best shot at getting a

2558
02:18:21,609 --> 02:18:30,090
standalone C++ compiler bundled with my

2559
02:18:24,010 --> 02:18:32,590
engine probably clang would be my guess

2560
02:18:30,090 --> 02:18:34,450
C compiler it's one of the nice things

2561
02:18:32,590 --> 02:18:36,308
about C is it's a very straightforward

2562
02:18:34,450 --> 02:18:38,859
language and the compiler can be written

2563
02:18:36,308 --> 02:18:42,278
fairly cleanly C++ is a giant disaster

2564
02:18:38,859 --> 02:18:47,380
if you actually require a C++ the full

2565
02:18:42,279 --> 02:18:49,630
language I mean it's it's absolutely

2566
02:18:47,379 --> 02:18:53,138
horrible and I mean the problem is with

2567
02:18:49,629 --> 02:18:54,068
C++ 99% of the language features in C++

2568
02:18:53,138 --> 02:18:56,199
are not good

2569
02:18:54,068 --> 02:18:58,988
so you basically pay a tremendously huge

2570
02:18:56,200 --> 02:19:03,609
cost and have a very complex compiler

2571
02:18:58,988 --> 02:19:05,250
and you get nothing for it right so I

2572
02:19:03,609 --> 02:19:08,829
guess what I would say is like yeah it's

2573
02:19:05,250 --> 02:19:13,510
C++ is terrible for very very many

2574
02:19:08,829 --> 02:19:16,090
reasons and among all of those reasons a

2575
02:19:13,510 --> 02:19:17,920
very large one is it's prohibitively

2576
02:19:16,090 --> 02:19:20,849
expensive to build your own compiler for

2577
02:19:17,920 --> 02:19:24,279
it in a reasonable amount of time right

2578
02:19:20,849 --> 02:19:27,189
like it's it's one of those things where

2579
02:19:24,279 --> 02:19:29,738
you know like if you told me that I need

2580
02:19:27,189 --> 02:19:33,849
to write a C compiler by next weekend

2581
02:19:29,738 --> 02:19:35,648
I'm like ok I can probably do that if

2582
02:19:33,849 --> 02:19:37,779
you tell me that I have to write a C++

2583
02:19:35,648 --> 02:19:39,579
compiler by next weekend I'd just say

2584
02:19:37,779 --> 02:19:41,260
it's not possible like we have to use

2585
02:19:39,579 --> 02:19:42,670
like we have to use someone else's code

2586
02:19:41,260 --> 02:19:45,460
because there's no way we're gonna make

2587
02:19:42,670 --> 02:19:48,279
that work you know the spec alone just

2588
02:19:45,459 --> 02:19:50,228
even reading it to understand all the

2589
02:19:48,279 --> 02:19:51,310
things that you don't probably know

2590
02:19:50,228 --> 02:19:53,199
about see bus Plus that you need to

2591
02:19:51,309 --> 02:19:56,829
handle is prohibitive I mean it's just

2592
02:19:53,200 --> 02:19:58,329
it's impossible so I would say like you

2593
02:19:56,829 --> 02:19:59,648
know first of all are you really sure

2594
02:19:58,329 --> 02:20:01,120
you want to do that and then second of

2595
02:19:59,648 --> 02:20:02,680
all if you are sure that you want to do

2596
02:20:01,120 --> 02:20:05,229
that for some reason I would strongly

2597
02:20:02,680 --> 02:20:06,488
recommend using someone else's code on

2598
02:20:05,228 --> 02:20:08,079
hand meet here we don't use other

2599
02:20:06,488 --> 02:20:09,609
people's code because the point of the

2600
02:20:08,079 --> 02:20:13,359
show is to show how to code things from

2601
02:20:09,609 --> 02:20:15,640
scratch that's the whole point but that

2602
02:20:13,359 --> 02:20:18,040
doesn't mean that that is the right

2603
02:20:15,639 --> 02:20:19,539
choice in all circumstances and if ever

2604
02:20:18,040 --> 02:20:20,950
there was a circumstance where it's

2605
02:20:19,540 --> 02:20:22,870
probably not the right choice to roll

2606
02:20:20,950 --> 02:20:28,300
your own it's C++ compiler because what

2607
02:20:22,870 --> 02:20:29,710
a waste of your time holy cow do you

2608
02:20:28,299 --> 02:20:31,648
think cost is useful for function

2609
02:20:29,709 --> 02:20:34,349
arguments No

2610
02:20:31,648 --> 02:20:36,328
I don't think Constans useful period I

2611
02:20:34,350 --> 02:20:39,328
think for other programmers sometimes

2612
02:20:36,328 --> 02:20:40,949
it's useful for programmers who make

2613
02:20:39,328 --> 02:20:42,898
mistakes about what they can and can't

2614
02:20:40,949 --> 02:20:45,300
write to I pretty much never make those

2615
02:20:42,898 --> 02:20:46,559
mistakes as you can see I think we've

2616
02:20:45,299 --> 02:20:48,059
talked about this many times so if you

2617
02:20:46,559 --> 02:20:51,629
look at the kinds of bugs that I have

2618
02:20:48,059 --> 02:20:53,328
often they're often indexing bugs and

2619
02:20:51,629 --> 02:20:56,458
indexing bugs aren't caught by Const

2620
02:20:53,328 --> 02:20:58,228
right if you're the kind of programmer

2621
02:20:56,459 --> 02:20:59,609
who oftentimes find yourself writing to

2622
02:20:58,228 --> 02:21:00,929
the destination and not the source or

2623
02:20:59,609 --> 02:21:02,880
the source and not the destination if

2624
02:21:00,930 --> 02:21:03,449
you spend a lot of time finding bugs

2625
02:21:02,879 --> 02:21:10,188
like that

2626
02:21:03,449 --> 02:21:12,510
that's where cons can help you right so

2627
02:21:10,189 --> 02:21:14,430
but I think through the entire handmade

2628
02:21:12,510 --> 02:21:15,779
hero which is the worst case because

2629
02:21:14,430 --> 02:21:16,918
it's like I have the least mental

2630
02:21:15,779 --> 02:21:20,430
resource come try to explain the whole

2631
02:21:16,918 --> 02:21:22,109
time I think we've had one case of

2632
02:21:20,430 --> 02:21:28,158
writing to a thing that what cost would

2633
02:21:22,109 --> 02:21:28,158
have caught it just like pretty early on

2634
02:21:28,488 --> 02:21:33,270
so it's just like what a waste of time

2635
02:21:31,469 --> 02:21:34,918
it would have been right to catch one

2636
02:21:33,270 --> 02:21:38,340
bug that didn't even take us hardly any

2637
02:21:34,918 --> 02:21:40,439
time to find right we would have spent

2638
02:21:38,340 --> 02:21:43,549
all that time typing Const all over the

2639
02:21:40,439 --> 02:21:43,550
place for literally no reason

2640
02:21:52,029 --> 02:22:01,560
what do we call look on handmade hero we

2641
02:21:54,818 --> 02:22:01,559
it's just CL it's just you're just CL

2642
02:22:03,090 --> 02:22:09,010
but CL is like microsoft property you

2643
02:22:07,238 --> 02:22:14,139
you can't distribute it with your game

2644
02:22:09,010 --> 02:22:17,469
right clang has some kind of a GPL

2645
02:22:14,139 --> 02:22:19,238
license or something I don't I don't

2646
02:22:17,469 --> 02:22:21,719
know exactly what the license is for

2647
02:22:19,238 --> 02:22:21,719
clang

2648
02:22:37,889 --> 02:22:43,108
I mean I don't go look at what the

2649
02:22:40,828 --> 02:22:45,029
licenses but the point is clang is

2650
02:22:43,109 --> 02:22:47,119
licensed in a way that allows you to

2651
02:22:45,029 --> 02:22:52,319
include it in commercial products right

2652
02:22:47,119 --> 02:22:54,510
and Cl isn't so the reason I said clang

2653
02:22:52,318 --> 02:22:57,868
when you asked what would I do if I

2654
02:22:54,510 --> 02:23:00,148
wanted to be able to include a C

2655
02:22:57,869 --> 02:23:02,189
compiler when I shipped the game is like

2656
02:23:00,148 --> 02:23:08,728
clang has a license that you could

2657
02:23:02,189 --> 02:23:10,199
comply with but in C L is not so you

2658
02:23:08,728 --> 02:23:13,368
know and there's nothing particularly

2659
02:23:10,199 --> 02:23:16,078
wrong with clang clangs a good compiler

2660
02:23:13,369 --> 02:23:18,390
it sometimes produces better code than

2661
02:23:16,078 --> 02:23:21,930
then Microsoft sometimes microsoft

2662
02:23:18,389 --> 02:23:26,340
produces better code than clang but so

2663
02:23:21,930 --> 02:23:28,470
you know there's no real reason to use

2664
02:23:26,340 --> 02:23:31,379
one of the other you you can you can use

2665
02:23:28,469 --> 02:23:34,858
either so if one of the things that

2666
02:23:31,379 --> 02:23:37,199
you're targeting to try and do is to

2667
02:23:34,859 --> 02:23:42,029
ship the compiler with your game then

2668
02:23:37,199 --> 02:23:43,828
you know clangs the obvious choice it's

2669
02:23:42,029 --> 02:23:48,418
you know it's totally reasonable

2670
02:23:43,828 --> 02:23:50,840
compiler it's you know 50/50 as to

2671
02:23:48,418 --> 02:23:54,449
whether you'd rather have it or or

2672
02:23:50,840 --> 02:23:57,049
Microsoft's and so it's no difference

2673
02:23:54,449 --> 02:23:57,050
just use clanging

2674
02:24:14,139 --> 02:24:22,418
all right so I will go ahead and do as I

2675
02:24:19,059 --> 02:24:24,010
said after I close this down I will

2676
02:24:22,418 --> 02:24:27,029
watch the unreal thing so I'm going to

2677
02:24:24,010 --> 02:24:27,029
do the stop recording here

