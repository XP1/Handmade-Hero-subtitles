1
00:00:00,829 --> 00:00:05,099
hello everybody and welcome to hand made

2
00:00:03,720 --> 00:00:10,279
here oh sure we could a complete-game

3
00:00:05,099 --> 00:00:13,798
live on stream we are we've got sort of

4
00:00:10,279 --> 00:00:15,149
two things we got to do we're gonna do

5
00:00:13,798 --> 00:00:17,429
one this weekend and then I think next

6
00:00:15,150 --> 00:00:20,929
week and we'll do the other so the first

7
00:00:17,429 --> 00:00:24,089
thing we got to do is finish up the art

8
00:00:20,929 --> 00:00:25,829
the different style art markup that I

9
00:00:24,089 --> 00:00:27,239
wanted to do that would just allow us to

10
00:00:25,829 --> 00:00:33,808
not change the file names that the

11
00:00:27,239 --> 00:00:36,689
artists supply I hadn't really thought

12
00:00:33,808 --> 00:00:38,189
about it until I got to that point but

13
00:00:36,689 --> 00:00:41,549
once I got to that point I was like this

14
00:00:38,189 --> 00:00:43,979
is probably how we want to do things and

15
00:00:41,549 --> 00:00:45,839
the other thing we got to do is do a for

16
00:00:43,979 --> 00:00:47,099
coder demo of the new for coder system

17
00:00:45,840 --> 00:00:50,010
I'm going to leave that till next

18
00:00:47,100 --> 00:00:51,660
weekend especially because I kind of

19
00:00:50,009 --> 00:00:53,159
want a little bit more time to break

20
00:00:51,659 --> 00:00:55,139
myself in on the new for coder

21
00:00:53,159 --> 00:00:57,659
I only just kind of finished up by

22
00:00:55,140 --> 00:00:58,920
fairly massive changes to it so on this

23
00:00:57,659 --> 00:01:01,319
machine we're still going to be using

24
00:00:58,920 --> 00:01:05,118
basically the same as the old for coder

25
00:01:01,320 --> 00:01:08,129
was for this weekend and then we'll

26
00:01:05,118 --> 00:01:10,310
switch next weekend we'll probably do

27
00:01:08,129 --> 00:01:14,429
like one of the streams will just be a

28
00:01:10,310 --> 00:01:16,259
demo talking about like how all the new

29
00:01:14,430 --> 00:01:20,310
design of everything in for coder works

30
00:01:16,259 --> 00:01:22,109
now and so that people aren't confused

31
00:01:20,310 --> 00:01:23,400
about what I'm doing on stream and like

32
00:01:22,109 --> 00:01:26,400
how the editors work it because it's a

33
00:01:23,400 --> 00:01:29,400
pretty big departure now with the way

34
00:01:26,400 --> 00:01:31,290
that I set everything up so I'm gonna go

35
00:01:29,400 --> 00:01:32,579
get started on the parsing stuff and

36
00:01:31,290 --> 00:01:33,930
we'll try to get that finished up this

37
00:01:32,578 --> 00:01:35,728
weekend or at least to a good stopping

38
00:01:33,930 --> 00:01:37,530
point and then next weekend I think

39
00:01:35,728 --> 00:01:40,739
maybe we'll try to go ahead and change

40
00:01:37,530 --> 00:01:42,180
over and we'll go from there there'll be

41
00:01:40,739 --> 00:01:43,228
a little bit of learning curve even for

42
00:01:42,180 --> 00:01:45,450
me cuz like I've made some pretty

43
00:01:43,228 --> 00:01:48,149
massive changes and I've rebound several

44
00:01:45,450 --> 00:01:50,509
keys in the process and sort of changed

45
00:01:48,149 --> 00:01:53,460
the way some basic things are happening

46
00:01:50,509 --> 00:01:54,930
just to be like more powerful now but

47
00:01:53,459 --> 00:01:56,489
that you know everything takes muscle

48
00:01:54,930 --> 00:01:59,579
memory a little bit of time to actually

49
00:01:56,489 --> 00:02:00,449
get correct so we'll see I'm gonna I'm

50
00:01:59,578 --> 00:02:03,839
gonna need a little bit of a

51
00:02:00,450 --> 00:02:05,310
decompression on that but for right now

52
00:02:03,840 --> 00:02:07,170
we're just doing the same for a coaster

53
00:02:05,310 --> 00:02:10,500
that shouldn't have much problem today

54
00:02:07,170 --> 00:02:13,090
with that sort of stuff so let me go

55
00:02:10,500 --> 00:02:15,789
ahead and switch up to handmade

56
00:02:13,090 --> 00:02:18,729
and just builds give you a quick

57
00:02:15,789 --> 00:02:20,650
reminder of where we were at so you know

58
00:02:18,729 --> 00:02:22,629
building handmade hero here if you

59
00:02:20,650 --> 00:02:25,300
remember where we let ended up last

60
00:02:22,629 --> 00:02:29,139
weekend we actually wrote a complete

61
00:02:25,300 --> 00:02:32,349
parser for our tag file format which is

62
00:02:29,139 --> 00:02:35,109
in the handmade tags directory looks

63
00:02:32,348 --> 00:02:40,389
like this and this these are the two

64
00:02:35,110 --> 00:02:43,090
ones and essentially what this is is we

65
00:02:40,389 --> 00:02:44,348
just decided look let's let the artist

66
00:02:43,090 --> 00:02:46,689
leave the file names the same as they

67
00:02:44,348 --> 00:02:48,729
were since we know we have to parse a

68
00:02:46,689 --> 00:02:51,159
text file or some other markup

69
00:02:48,729 --> 00:02:53,560
information anyway to put things in here

70
00:02:51,159 --> 00:02:55,719
like the alignment points we might as

71
00:02:53,560 --> 00:02:57,400
well just put them all in one text file

72
00:02:55,719 --> 00:02:59,439
and that way the artists don't have to

73
00:02:57,400 --> 00:03:01,510
worry anymore about that they just save

74
00:02:59,439 --> 00:03:03,430
stuff out and then we come in here and

75
00:03:01,509 --> 00:03:06,189
say look whatever you named it we don't

76
00:03:03,430 --> 00:03:09,580
care we'll just say that whatever it was

77
00:03:06,189 --> 00:03:11,439
is this you know set of tags and that

78
00:03:09,580 --> 00:03:13,510
way we can just control the whole

79
00:03:11,439 --> 00:03:14,560
process separately and we don't have to

80
00:03:13,509 --> 00:03:16,870
do anything else about it

81
00:03:14,560 --> 00:03:19,959
furthermore and this is really more the

82
00:03:16,870 --> 00:03:21,549
reason why I liked this better is now

83
00:03:19,959 --> 00:03:23,680
inside the handmade directory there's

84
00:03:21,549 --> 00:03:24,519
just a tags directory that has these

85
00:03:23,680 --> 00:03:26,439
things in it

86
00:03:24,519 --> 00:03:29,769
I can push that to source code control

87
00:03:26,439 --> 00:03:31,568
and out to you folks in the zip file for

88
00:03:29,769 --> 00:03:34,719
people who pre-order the game and build

89
00:03:31,568 --> 00:03:37,328
the source at home that way that can be

90
00:03:34,719 --> 00:03:39,489
updated continuously but the arc which

91
00:03:37,329 --> 00:03:40,870
takes up a lot more room right because

92
00:03:39,489 --> 00:03:42,519
especially imagine this director is

93
00:03:40,870 --> 00:03:45,549
gonna have like 10 times this number of

94
00:03:42,519 --> 00:03:47,620
things in it probably eventually nobody

95
00:03:45,549 --> 00:03:49,060
wants to keep downloading that right you

96
00:03:47,620 --> 00:03:51,310
don't want to have to keep dealing with

97
00:03:49,060 --> 00:03:53,170
that nonsense so instead what we did is

98
00:03:51,310 --> 00:03:55,930
we split it out we said okay the art

99
00:03:53,169 --> 00:03:58,298
directory is gonna get next tags will be

100
00:03:55,930 --> 00:04:00,609
here and then this sources directory

101
00:03:58,299 --> 00:04:02,980
will just have all the stuff in it that

102
00:04:00,609 --> 00:04:08,439
we need to build right you can kind of

103
00:04:02,979 --> 00:04:10,388
see all that stuff in here okay so what

104
00:04:08,439 --> 00:04:12,280
I want to do now is sort of expand on

105
00:04:10,389 --> 00:04:14,590
that concept I want to get this stuff

106
00:04:12,280 --> 00:04:18,639
parsing and I want to try and start the

107
00:04:14,590 --> 00:04:22,120
process of building hhas from nothing

108
00:04:18,639 --> 00:04:23,978
using just these text files and there's

109
00:04:22,120 --> 00:04:26,879
only one thing I think that will stand

110
00:04:23,978 --> 00:04:33,539
in our way of that and that's font

111
00:04:26,879 --> 00:04:35,709
and that's fine we can address fonts

112
00:04:33,540 --> 00:04:38,439
next weekend after the for coders

113
00:04:35,709 --> 00:04:40,089
situation so we can really focus on on

114
00:04:38,439 --> 00:04:42,600
stuff than that now the other thing I

115
00:04:40,089 --> 00:04:44,888
did and and this is another thing that I

116
00:04:42,600 --> 00:04:47,139
get just part of getting things to a

117
00:04:44,889 --> 00:04:49,418
completion state so we can really kind

118
00:04:47,139 --> 00:04:50,710
of say alright this is how it's done and

119
00:04:49,418 --> 00:04:54,009
we can just move on we have to worry

120
00:04:50,709 --> 00:04:56,859
about anymore is I also got uncompressed

121
00:04:54,009 --> 00:04:59,709
versions of all of the layers for our

122
00:04:56,860 --> 00:05:04,919
cutscenes here and so what I'm going to

123
00:04:59,709 --> 00:05:08,879
do is I'm going to put those into the

124
00:05:04,918 --> 00:05:12,789
into the the intro cutscene directory

125
00:05:08,879 --> 00:05:14,769
and I don't know exactly how we want to

126
00:05:12,790 --> 00:05:17,230
organize them per se

127
00:05:14,769 --> 00:05:19,478
possibly by shots it doesn't really

128
00:05:17,230 --> 00:05:21,129
matter but point being this gives us

129
00:05:19,478 --> 00:05:24,039
another way to sort of test out this

130
00:05:21,129 --> 00:05:25,750
system and see how it's going to be so

131
00:05:24,040 --> 00:05:27,460
in the intro cutscene you know we've got

132
00:05:25,750 --> 00:05:30,310
the art here we've got the the title

133
00:05:27,459 --> 00:05:33,699
screen and we've got all of these like

134
00:05:30,310 --> 00:05:37,689
layers here uh I don't like if you look

135
00:05:33,699 --> 00:05:40,389
here in to shop too you can see that

136
00:05:37,689 --> 00:05:44,709
they're all named like layer 1 layer 2

137
00:05:40,389 --> 00:05:47,228
layer 3 so the problem with it is you

138
00:05:44,709 --> 00:05:49,599
know I could make subdirectories here

139
00:05:47,228 --> 00:05:51,550
but these names are not unique and I

140
00:05:49,600 --> 00:05:54,250
would really prefer it if the names were

141
00:05:51,550 --> 00:06:01,210
unique so otherwise I'd start

142
00:05:54,250 --> 00:06:02,740
differentiating in my tags files so I

143
00:06:01,209 --> 00:06:05,379
don't know that we really want to do

144
00:06:02,740 --> 00:06:07,329
that I'm fine with requiring the artist

145
00:06:05,379 --> 00:06:12,550
to make these names be unique from now

146
00:06:07,329 --> 00:06:16,839
on and so that we don't have to talk

147
00:06:12,550 --> 00:06:19,629
about some long directory path to say

148
00:06:16,839 --> 00:06:20,859
which layer one ping you mean when

149
00:06:19,629 --> 00:06:24,788
you're drawing something or whatever

150
00:06:20,860 --> 00:06:28,090
right so what I'd like to do here is

151
00:06:24,788 --> 00:06:30,099
just make some way of you know moving

152
00:06:28,089 --> 00:06:32,349
these guys in here that that makes sense

153
00:06:30,100 --> 00:06:34,629
and so what I'm thinking is maybe I can

154
00:06:32,350 --> 00:06:36,610
just prepend this name to it right so

155
00:06:34,629 --> 00:06:38,110
you know if I've got something like this

156
00:06:36,610 --> 00:06:39,819
I don't actually know if you can I think

157
00:06:38,110 --> 00:06:40,319
you can do something like this where you

158
00:06:39,819 --> 00:06:42,810
know all

159
00:06:40,319 --> 00:06:44,909
these have layer underscore one in front

160
00:06:42,810 --> 00:06:46,139
of it but I think you can just do

161
00:06:44,910 --> 00:06:48,960
something like this where you just do

162
00:06:46,139 --> 00:06:51,120
shot eleven underscore right and I think

163
00:06:48,959 --> 00:06:53,009
all of these rename now I guess they

164
00:06:51,120 --> 00:06:55,649
don't so I thought there was a way to do

165
00:06:53,009 --> 00:06:57,029
that let me double check to see there

166
00:06:55,649 --> 00:06:59,239
are certainly renaming utils we could

167
00:06:57,029 --> 00:07:03,000
use but I thought you could actually

168
00:06:59,240 --> 00:07:06,960
change this let me see if that's true so

169
00:07:03,000 --> 00:07:14,879
if I go into oops if I don't get block

170
00:07:06,959 --> 00:07:21,199
about start bar if I go into users KC

171
00:07:14,879 --> 00:07:27,810
desktop or sorry user KC what is it ah

172
00:07:21,199 --> 00:07:30,060
see : users KC desktop and I go into

173
00:07:27,810 --> 00:07:33,870
that opening directory if I go into shot

174
00:07:30,060 --> 00:07:41,030
of one I feel like inside here if I do a

175
00:07:33,870 --> 00:07:42,870
rename I can actually do let me see I

176
00:07:41,029 --> 00:07:44,699
thought there was a way to rename

177
00:07:42,870 --> 00:07:50,040
multiple at a time let me just see if

178
00:07:44,699 --> 00:08:00,779
I'm wrong so if I do rename layer star

179
00:07:50,040 --> 00:08:05,580
as shot a one star what happens so it

180
00:08:00,779 --> 00:08:07,019
doesn't I'm so confused I swear this was

181
00:08:05,579 --> 00:08:09,719
something that Windows used to be able

182
00:08:07,019 --> 00:08:11,609
to do I know everyone who uses UNIX is

183
00:08:09,720 --> 00:08:13,560
laughing right now because Windows is so

184
00:08:11,610 --> 00:08:15,930
bad at this and you're not wrong but I

185
00:08:13,560 --> 00:08:18,420
thought they had a way of doing just

186
00:08:15,930 --> 00:08:20,670
this one operation and I can't remember

187
00:08:18,420 --> 00:08:22,680
what it was but that you could actually

188
00:08:20,670 --> 00:08:28,949
rename things while keeping part of the

189
00:08:22,680 --> 00:08:32,149
filename intact but I'll be darned if I

190
00:08:28,949 --> 00:08:32,149
can remember what it is

191
00:08:33,110 --> 00:08:36,590
give me one more chance

192
00:08:44,698 --> 00:08:50,729
alright let me search I'm so I am I just

193
00:08:48,429 --> 00:08:50,729
dreaming

194
00:09:02,679 --> 00:09:08,878
oh it's just cuz the star it's the star

195
00:09:10,649 --> 00:09:17,980
okay see I'm not I'm not making it up

196
00:09:15,360 --> 00:09:19,720
let's see the first rumor selects the

197
00:09:17,980 --> 00:09:21,100
files to be copied as no effect on the

198
00:09:19,720 --> 00:09:22,569
new names to be assigned incidentally

199
00:09:21,100 --> 00:09:24,519
we're doing that start of star blowing

200
00:09:22,568 --> 00:09:28,110
select files in the directory it will

201
00:09:24,519 --> 00:09:36,938
also whoa really all right

202
00:09:28,110 --> 00:09:37,959
the second parameter the second

203
00:09:36,938 --> 00:09:39,998
character of the name will be changed

204
00:09:37,958 --> 00:09:47,758
should be if it's question mark

205
00:09:39,999 --> 00:09:47,759
interesting interesting

206
00:09:50,129 --> 00:09:53,610
so let's see

207
00:09:58,519 --> 00:10:04,850
renamed setteth start to question my

208
00:10:00,899 --> 00:10:19,039
question my question mark 6 start up Wow

209
00:10:04,850 --> 00:10:24,420
ok so I guess the problem here is that

210
00:10:19,039 --> 00:10:29,099
the last part alright so let me just try

211
00:10:24,419 --> 00:10:40,889
this so if I say rename startup star to

212
00:10:29,100 --> 00:10:55,560
be shot 0 1 or shot one question mark

213
00:10:40,889 --> 00:10:59,819
question mark startup star that works so

214
00:10:55,559 --> 00:11:01,799
I wasn't wrong will will will say that

215
00:10:59,820 --> 00:11:07,460
the word wrong maybe doesn't exactly

216
00:11:01,799 --> 00:11:11,189
apply here or maybe it does that was

217
00:11:07,460 --> 00:11:15,990
interesting to say the least so if I go

218
00:11:11,190 --> 00:11:21,000
to shot Oh - UNIX people are still

219
00:11:15,990 --> 00:11:23,490
laughing right now let's be honest so if

220
00:11:21,000 --> 00:11:25,580
I go to shot Oh - and do the same thing

221
00:11:23,490 --> 00:11:35,490
I'm good to go

222
00:11:25,580 --> 00:11:39,990
uh-huh oh das so precious little

223
00:11:35,490 --> 00:11:44,459
lemonsweets so precious have you enjoyed

224
00:11:39,990 --> 00:11:51,320
renaming your little files what would

225
00:11:44,458 --> 00:11:54,838
you like to do now yeah well you know I

226
00:11:51,320 --> 00:11:57,570
I didn't see it was gonna be clean and

227
00:11:54,839 --> 00:12:02,070
efficient I just said that it would work

228
00:11:57,570 --> 00:12:07,020
and you know it does work maybe for the

229
00:12:02,070 --> 00:12:08,100
folks at home you may be better if you

230
00:12:07,019 --> 00:12:11,009
you know if you

231
00:12:08,100 --> 00:12:13,769
really gonna do this in any kind of

232
00:12:11,009 --> 00:12:15,949
industrial way maybe I would recommend

233
00:12:13,769 --> 00:12:18,720
go ahead and downloading one of those

234
00:12:15,948 --> 00:12:21,479
renaming utilities I know ant renamer

235
00:12:18,720 --> 00:12:25,440
was fine back in the day there's

236
00:12:21,480 --> 00:12:29,519
probably other ones now too

237
00:12:25,440 --> 00:12:31,589
it's it's not that hard right but this

238
00:12:29,519 --> 00:12:34,169
is probably not the best way to do it I

239
00:12:31,589 --> 00:12:37,920
just I am now so thoroughly amused at

240
00:12:34,169 --> 00:12:40,198
the craziness of it that I think I will

241
00:12:37,919 --> 00:12:42,318
go ahead and and finish it this way but

242
00:12:40,198 --> 00:12:45,778
you know don't don't do this at home

243
00:12:42,318 --> 00:12:47,789
this was this is this is just das being

244
00:12:45,778 --> 00:12:48,919
das it's probably not the best idea in

245
00:12:47,789 --> 00:12:53,909
the world

246
00:12:48,919 --> 00:12:56,519
I you know you do something better okay

247
00:12:53,909 --> 00:12:59,759
and so now my understanding anyway is

248
00:12:56,519 --> 00:13:02,480
I'll have to rename these manually right

249
00:12:59,759 --> 00:13:07,800
because there is no actual way

250
00:13:02,480 --> 00:13:10,860
supposedly to do that like it says it

251
00:13:07,799 --> 00:13:16,500
doesn't have insert right so in theory

252
00:13:10,860 --> 00:13:19,259
that just won't work right yeah so it

253
00:13:16,500 --> 00:13:22,620
can't like it can't add more characters

254
00:13:19,259 --> 00:13:26,519
so those need to have like I need to go

255
00:13:22,620 --> 00:13:29,519
manually add the underscore to those

256
00:13:26,519 --> 00:13:32,278
because there's like a look man what

257
00:13:29,519 --> 00:13:34,230
what are you talking about what you

258
00:13:32,278 --> 00:13:35,818
think computers can just like insert

259
00:13:34,230 --> 00:13:37,379
characters in the middle of string is

260
00:13:35,818 --> 00:13:40,169
what do you what do you think this is

261
00:13:37,379 --> 00:13:41,759
right it's not Mardi Gras okay it's not

262
00:13:40,169 --> 00:13:44,639
everyone's just partying and throwing

263
00:13:41,759 --> 00:13:48,568
soap around and stuff right this is not

264
00:13:44,639 --> 00:13:49,879
this this is this is this is computing

265
00:13:48,568 --> 00:13:53,278
you can't can't do any of that

266
00:13:49,879 --> 00:13:56,370
alright so that did what I needed it to

267
00:13:53,278 --> 00:14:02,578
do in in a dass like you know kind of

268
00:13:56,370 --> 00:14:05,009
truncated way now speaking of of Noam

269
00:14:02,578 --> 00:14:08,039
Chomsky right kind of a what I would I

270
00:14:05,009 --> 00:14:12,120
use the phrase for for backus-naur form

271
00:14:08,039 --> 00:14:14,969
and construe grammars weak and

272
00:14:12,120 --> 00:14:17,429
cumbersome that what I said no something

273
00:14:14,970 --> 00:14:19,379
like that so anyway I've got all these

274
00:14:17,429 --> 00:14:20,909
shots now and and really that's all

275
00:14:19,379 --> 00:14:21,820
that's in the intro pack so I think I'm

276
00:14:20,909 --> 00:14:23,169
just going to move them in

277
00:14:21,820 --> 00:14:25,000
here and we'll just leave it at that

278
00:14:23,169 --> 00:14:28,839
because again I don't really care too

279
00:14:25,000 --> 00:14:30,460
much about this part of it because there

280
00:14:28,840 --> 00:14:33,190
I mean that's all they are they're just

281
00:14:30,460 --> 00:14:36,550
these shot plates they don't really do

282
00:14:33,190 --> 00:14:38,440
anything else at all and so I'll just go

283
00:14:36,549 --> 00:14:41,289
ahead and copy those in and then we'll

284
00:14:38,440 --> 00:14:47,800
call it a day so let me move those in

285
00:14:41,289 --> 00:14:49,980
here and these in here and the thing

286
00:14:47,799 --> 00:14:54,789
that you can see about this is you know

287
00:14:49,980 --> 00:14:56,529
again there's a certain amount of you

288
00:14:54,789 --> 00:15:00,519
have to kind of think about where what

289
00:14:56,529 --> 00:15:03,339
you're getting into that is that oh it's

290
00:15:00,519 --> 00:15:04,870
right the snow blast um you have to

291
00:15:03,340 --> 00:15:07,629
think about you know the point of

292
00:15:04,870 --> 00:15:10,090
diminishing returns at some point right

293
00:15:07,629 --> 00:15:11,950
on handmade hero will often do things

294
00:15:10,090 --> 00:15:13,660
that have diminishing returns just

295
00:15:11,950 --> 00:15:16,210
because I mean it's an educational

296
00:15:13,659 --> 00:15:18,309
program and it's also my weekend

297
00:15:16,210 --> 00:15:19,660
programming so you know I'm not sitting

298
00:15:18,309 --> 00:15:21,899
around going how do I get this thing

299
00:15:19,659 --> 00:15:24,039
done in the minimal amount of time right

300
00:15:21,899 --> 00:15:26,500
which is something that you might be

301
00:15:24,039 --> 00:15:28,659
doing if you aren't doing it as

302
00:15:26,500 --> 00:15:30,700
something for enjoyment or if you don't

303
00:15:28,659 --> 00:15:35,589
care or if you're you know for your jobs

304
00:15:30,700 --> 00:15:37,810
on the line and so on but just as a you

305
00:15:35,590 --> 00:15:42,040
know a side you can see how all of these

306
00:15:37,809 --> 00:15:46,449
things are named in a way that that

307
00:15:42,039 --> 00:15:48,909
gives them structure so when we if we

308
00:15:46,450 --> 00:15:52,330
were going to go import them we could

309
00:15:48,909 --> 00:15:55,559
add something to our parser that would

310
00:15:52,330 --> 00:15:59,830
actually understand how to make sense of

311
00:15:55,559 --> 00:16:02,829
the numbering scheme right and I don't

312
00:15:59,830 --> 00:16:05,170
know we might want to do that and that's

313
00:16:02,830 --> 00:16:08,170
the diminishing returns thing it's like

314
00:16:05,169 --> 00:16:11,049
do we bother doing something like that

315
00:16:08,169 --> 00:16:17,110
or do we just manually enter the text

316
00:16:11,049 --> 00:16:19,240
right typing is hard I and I don't know

317
00:16:17,110 --> 00:16:20,830
right every time you're faced with

318
00:16:19,240 --> 00:16:23,019
something like that you have a call to

319
00:16:20,830 --> 00:16:25,629
make look do you do it the long way or

320
00:16:23,019 --> 00:16:28,600
do you create something that helps you

321
00:16:25,629 --> 00:16:31,570
do it quicker and you have to make that

322
00:16:28,600 --> 00:16:34,000
judgment call now in this case I would

323
00:16:31,570 --> 00:16:35,110
say that maybe you know it's not really

324
00:16:34,000 --> 00:16:37,269
worth adding

325
00:16:35,110 --> 00:16:39,250
thing like that and the reason would be

326
00:16:37,269 --> 00:16:41,799
because this is the only thing we have

327
00:16:39,250 --> 00:16:45,940
looks like this right we don't we don't

328
00:16:41,799 --> 00:16:48,729
actually have anything else that's got

329
00:16:45,940 --> 00:16:51,880
this structure to it if we had tons of

330
00:16:48,730 --> 00:16:55,480
cutscene art and we would have to every

331
00:16:51,879 --> 00:16:58,120
time we'd have to do this that would

332
00:16:55,480 --> 00:16:59,430
maybe argue for doing it the other way

333
00:16:58,120 --> 00:17:01,600
right

334
00:16:59,429 --> 00:17:04,599
I'm just looking in here it looks like

335
00:17:01,600 --> 00:17:06,220
I've got everything right yeah that

336
00:17:04,599 --> 00:17:07,808
might argue for doing it the other way

337
00:17:06,220 --> 00:17:11,048
you know that might argue for saying

338
00:17:07,808 --> 00:17:12,308
look you know this this is gonna be

339
00:17:11,048 --> 00:17:15,039
something that we're going to be doing a

340
00:17:12,308 --> 00:17:18,939
lot of and so we should probably try to

341
00:17:15,039 --> 00:17:21,938
do something smarter here instead of you

342
00:17:18,939 --> 00:17:23,589
know making a lot of work for ourselves

343
00:17:21,939 --> 00:17:25,720
where we have to keep putting these like

344
00:17:23,588 --> 00:17:32,950
plates in here or whatever but I don't

345
00:17:25,720 --> 00:17:34,720
know that we really want to do that you

346
00:17:32,950 --> 00:17:37,919
know maybe it's fine for us to just say

347
00:17:34,720 --> 00:17:40,419
look we're gonna use a bunch of this

348
00:17:37,919 --> 00:17:43,210
it's just gonna look like that and we're

349
00:17:40,419 --> 00:17:45,669
just gonna manually type them in and if

350
00:17:43,210 --> 00:17:49,269
I remember correctly and I remember

351
00:17:45,669 --> 00:17:50,980
correctly I mean I don't remember but if

352
00:17:49,269 --> 00:17:54,220
we go back and look at like our fire

353
00:17:50,980 --> 00:17:57,400
file formats we haven't here this notion

354
00:17:54,220 --> 00:17:59,079
of a shot index and a layer index and

355
00:17:57,400 --> 00:18:06,250
the shot index layer indexed stuff

356
00:17:59,079 --> 00:18:08,740
actually does have backing tags right so

357
00:18:06,250 --> 00:18:11,619
we can just do like okay shot index

358
00:18:08,740 --> 00:18:14,769
something and layer index something and

359
00:18:11,619 --> 00:18:19,119
my recollection is that we have the

360
00:18:14,769 --> 00:18:21,429
ability to actually specify numbers that

361
00:18:19,119 --> 00:18:23,019
with our old parser our new parser I

362
00:18:21,429 --> 00:18:25,419
don't know if they could do numbers

363
00:18:23,019 --> 00:18:27,819
there and so one of the things that I

364
00:18:25,419 --> 00:18:30,910
think we should do is support that as a

365
00:18:27,819 --> 00:18:34,389
feature so if you want to actually have

366
00:18:30,910 --> 00:18:36,460
a tag that has a number like if you want

367
00:18:34,390 --> 00:18:39,640
to have a tag that rather than just

368
00:18:36,460 --> 00:18:42,308
being set to true or not actually has

369
00:18:39,640 --> 00:18:46,830
its own sail Ike this is shot index 1

370
00:18:42,308 --> 00:18:48,940
you know layer index 2 or something

371
00:18:46,829 --> 00:18:51,428
let's go ahead and just say

372
00:18:48,940 --> 00:18:53,409
right if I put parentheses in there I'm

373
00:18:51,429 --> 00:18:55,720
allowed to have a number that will then

374
00:18:53,409 --> 00:18:57,729
tell me right and so in that way I can

375
00:18:55,720 --> 00:18:59,528
just kind of put all the plates in here

376
00:18:57,729 --> 00:19:03,429
that I want and I could just put the

377
00:18:59,528 --> 00:19:05,769
shock layer numbers and so you can see

378
00:19:03,429 --> 00:19:08,169
where I'm going with this it seems easy

379
00:19:05,769 --> 00:19:09,788
enough that like maybe let's not go add

380
00:19:08,169 --> 00:19:11,710
a system for doing something where we

381
00:19:09,788 --> 00:19:14,019
parse the actual name when we really

382
00:19:11,710 --> 00:19:16,629
don't have to because that seems good

383
00:19:14,019 --> 00:19:19,479
enough so if I pop back over two dots

384
00:19:16,628 --> 00:19:21,459
for a second as we've seen it wield its

385
00:19:19,479 --> 00:19:24,190
mighty power today and everyone out

386
00:19:21,460 --> 00:19:27,940
there at home I'm sure is just bristling

387
00:19:24,190 --> 00:19:32,519
with with the raw sort of fearsome power

388
00:19:27,940 --> 00:19:35,379
of das if we could go ahead and just

389
00:19:32,519 --> 00:19:38,618
sort of prevail upon it one more time to

390
00:19:35,378 --> 00:19:43,719
give us a show of its of its prowess

391
00:19:38,618 --> 00:19:46,148
here I'm gonna go into the intro

392
00:19:43,720 --> 00:19:47,019
cutscene directory just like we did for

393
00:19:46,148 --> 00:19:50,258
bass game

394
00:19:47,019 --> 00:19:53,979
and I'm gonna do adder /b as you can see

395
00:19:50,259 --> 00:19:55,778
that gets rid of all of the adornment so

396
00:19:53,979 --> 00:19:58,659
if I look at the art directory and do it

397
00:19:55,778 --> 00:20:01,118
I can just get a list of everything here

398
00:19:58,659 --> 00:20:02,499
that I might want and so what I can do

399
00:20:01,118 --> 00:20:04,628
in this case is a pretty short list

400
00:20:02,499 --> 00:20:07,259
right there's not that much there so

401
00:20:04,628 --> 00:20:09,308
what I can actually do is just grab this

402
00:20:07,259 --> 00:20:13,269
is it just wasn't there supposed to be a

403
00:20:09,308 --> 00:20:24,128
shot 11 did I screw something up good I

404
00:20:13,269 --> 00:20:29,098
did I miss one and my mind my look at

405
00:20:24,128 --> 00:20:33,009
that I didn't copy those in I tell you

406
00:20:29,098 --> 00:20:34,329
human error operator error people so

407
00:20:33,009 --> 00:20:35,798
there's a shot 11 that was supposed to

408
00:20:34,329 --> 00:20:37,628
be there let's let's do that one more

409
00:20:35,798 --> 00:20:40,239
time so we can get that shot 11th there

410
00:20:37,628 --> 00:20:41,528
it is right so I might just be able to

411
00:20:40,239 --> 00:20:42,848
just cut and paste this from here

412
00:20:41,528 --> 00:20:49,028
without actually having to dump it to a

413
00:20:42,848 --> 00:20:54,839
file go I don't know if that worked but

414
00:20:49,028 --> 00:20:57,308
we'll find out it did so now again

415
00:20:54,839 --> 00:20:58,418
musing turd of the old for coder here so

416
00:20:57,308 --> 00:21:00,079
we don't have a lot of power at our

417
00:20:58,419 --> 00:21:03,890
fingertips at the moment we

418
00:21:00,079 --> 00:21:05,538
get more as time goes on but what I'm

419
00:21:03,890 --> 00:21:07,480
gonna do now is just kind of grab all of

420
00:21:05,538 --> 00:21:12,619
these and move them over right

421
00:21:07,480 --> 00:21:16,519
oops and again this is sort of where the

422
00:21:12,619 --> 00:21:19,129
and to be fair for coder also probably

423
00:21:16,519 --> 00:21:20,929
isn't quite there yet even with my new

424
00:21:19,130 --> 00:21:22,820
modified one which is very much much

425
00:21:20,929 --> 00:21:25,429
more powerful than Emacs almost in every

426
00:21:22,819 --> 00:21:28,759
way the only thing that it doesn't have

427
00:21:25,429 --> 00:21:30,380
yet is macro according Alan said that

428
00:21:28,759 --> 00:21:32,269
that is coming down the pipe but that

429
00:21:30,380 --> 00:21:35,289
would be you know macro recording would

430
00:21:32,269 --> 00:21:37,909
solve this problem automatically right

431
00:21:35,288 --> 00:21:40,548
because this exact process that I'm

432
00:21:37,909 --> 00:21:44,450
doing and the process of extracting the

433
00:21:40,548 --> 00:21:47,269
shot number and layer number would also

434
00:21:44,450 --> 00:21:48,710
be automated by macro recording so it is

435
00:21:47,269 --> 00:21:50,659
too bad that we don't have macro

436
00:21:48,710 --> 00:21:52,038
recording yet because that's the sort of

437
00:21:50,659 --> 00:21:54,320
thing that would make this process

438
00:21:52,038 --> 00:21:56,079
easier but like I said there's not that

439
00:21:54,319 --> 00:21:58,759
much stuff in here which is why I can

440
00:21:56,079 --> 00:22:00,740
I'm just point of diminishing returns it

441
00:21:58,759 --> 00:22:02,929
but that's just one of those things

442
00:22:00,740 --> 00:22:05,750
that's often where you see you know

443
00:22:02,929 --> 00:22:08,269
again like for coders kind of focused on

444
00:22:05,750 --> 00:22:11,419
the main stuff that we had to fix in in

445
00:22:08,269 --> 00:22:14,569
Emacs right and it pretty much did all

446
00:22:11,419 --> 00:22:16,759
that but and I'm pretty excited to show

447
00:22:14,569 --> 00:22:18,918
you guys the new one to that the new one

448
00:22:16,759 --> 00:22:20,509
is pretty pretty crazy the stuff that

449
00:22:18,919 --> 00:22:23,269
I've got in there there's some pretty

450
00:22:20,509 --> 00:22:26,990
amazing stuff that I think is pretty

451
00:22:23,269 --> 00:22:29,240
cool but yeah doesn't matter point being

452
00:22:26,990 --> 00:22:31,669
it doesn't have some of those like more

453
00:22:29,240 --> 00:22:34,429
esoteric features that's something like

454
00:22:31,669 --> 00:22:38,179
Emacs or you know VI has from you know

455
00:22:34,429 --> 00:22:41,690
centuries of refinement that are kind of

456
00:22:38,179 --> 00:22:44,059
like you don't normally use them but

457
00:22:41,690 --> 00:22:46,940
once in a while you do and they save you

458
00:22:44,058 --> 00:22:48,950
a lot of time at that point you know

459
00:22:46,940 --> 00:22:52,009
macro recording is kind of one of those

460
00:22:48,950 --> 00:22:54,288
things because or you know there's other

461
00:22:52,009 --> 00:22:56,058
there's you don't necessarily need

462
00:22:54,288 --> 00:22:58,298
specifically Mac recording there's other

463
00:22:56,058 --> 00:23:00,288
features that you could use like reg X

464
00:22:58,298 --> 00:23:04,099
modifications to lines and stuff like

465
00:23:00,288 --> 00:23:08,509
that that you can do but point being one

466
00:23:04,099 --> 00:23:12,549
of those sort of ways of taking a piece

467
00:23:08,509 --> 00:23:13,960
of text and extracting parts of it in a

468
00:23:12,549 --> 00:23:15,519
a programmatic way and was writing a

469
00:23:13,960 --> 00:23:17,799
little text processing sort of stuff I

470
00:23:15,519 --> 00:23:19,859
find macro according be the easiest way

471
00:23:17,799 --> 00:23:22,210
to do that because you can just sort of

472
00:23:19,859 --> 00:23:24,759
demonstrate the change to the line and

473
00:23:22,210 --> 00:23:27,789
then you just play it back I really like

474
00:23:24,759 --> 00:23:29,650
that and because emacs's macro recording

475
00:23:27,789 --> 00:23:32,920
allowed you to record through things

476
00:23:29,650 --> 00:23:35,890
like search and other sorts of things

477
00:23:32,920 --> 00:23:37,720
you could really do a lot with it that

478
00:23:35,890 --> 00:23:40,350
you know made it seem like it was almost

479
00:23:37,720 --> 00:23:42,640
like a little programming language

480
00:23:40,349 --> 00:23:43,089
without ever doing a program so that was

481
00:23:42,640 --> 00:23:45,150
pretty cool

482
00:23:43,089 --> 00:23:48,429
but admittedly even that's a little bit

483
00:23:45,150 --> 00:23:50,230
weak I suppose in some sense because you

484
00:23:48,430 --> 00:23:52,330
it wasn't a programming language so if

485
00:23:50,230 --> 00:23:54,480
you really wanted to in Emacs probably

486
00:23:52,329 --> 00:23:58,509
Emacs power user resource of people

487
00:23:54,480 --> 00:24:00,130
would almost possibly prefer other other

488
00:23:58,509 --> 00:24:02,500
ways of doing things to you know like

489
00:24:00,130 --> 00:24:03,640
the reading a little ela smacker or

490
00:24:02,500 --> 00:24:08,170
something to do the replacement man

491
00:24:03,640 --> 00:24:12,009
running it because that could do

492
00:24:08,170 --> 00:24:14,410
anything right so it's a little hard to

493
00:24:12,009 --> 00:24:16,720
say you know I don't again I don't want

494
00:24:14,410 --> 00:24:18,100
to specify exactly what the best way to

495
00:24:16,720 --> 00:24:19,600
have done that and it would have been

496
00:24:18,099 --> 00:24:22,629
but point being if worker doesn't have

497
00:24:19,599 --> 00:24:25,089
that sort of stuff in it yet but we'll

498
00:24:22,630 --> 00:24:26,530
get there at some point it's just it's

499
00:24:25,089 --> 00:24:27,849
not a high priority because this is not

500
00:24:26,529 --> 00:24:31,029
the sort of thing that have to do very

501
00:24:27,849 --> 00:24:32,109
often so you know it hasn't been the

502
00:24:31,029 --> 00:24:35,349
kind of thing that's been tops on my

503
00:24:32,109 --> 00:24:37,629
list but you know when you need it and

504
00:24:35,349 --> 00:24:39,189
you don't have it you do notice so it's

505
00:24:37,630 --> 00:24:41,380
always good to eventually get there and

506
00:24:39,190 --> 00:24:43,090
have it so you'd ended up having to do

507
00:24:41,380 --> 00:24:48,460
manual text processing like I'm doing

508
00:24:43,089 --> 00:24:51,129
right now in those instances it's just

509
00:24:48,460 --> 00:24:51,670
you know why even though it doesn't

510
00:24:51,130 --> 00:24:53,950
really matter

511
00:24:51,670 --> 00:24:55,420
it's like might as well just get get a

512
00:24:53,950 --> 00:24:59,170
little thing in there that can do it and

513
00:24:55,420 --> 00:25:01,600
then be done because you can so alright

514
00:24:59,170 --> 00:25:03,460
so I think we're good to go here this is

515
00:25:01,599 --> 00:25:07,029
roughly what I'm talking about right so

516
00:25:03,460 --> 00:25:10,690
now this has like everything listed for

517
00:25:07,029 --> 00:25:16,349
the cutscene as well and it's got the

518
00:25:10,690 --> 00:25:16,350
tags for the layer index and the

519
00:25:19,069 --> 00:25:21,829
it's got tax for the layer index and the

520
00:25:20,450 --> 00:25:25,069
shot index in there that I just kind of

521
00:25:21,829 --> 00:25:28,699
stuck in and so now we can just use this

522
00:25:25,069 --> 00:25:31,490
for for everything both files are

523
00:25:28,700 --> 00:25:35,900
completely SPECT out now I don't know

524
00:25:31,490 --> 00:25:37,160
what we want to do with this thing you

525
00:25:35,900 --> 00:25:40,130
know yeah well you know what I could do

526
00:25:37,160 --> 00:25:44,480
what if I just called that you know shot

527
00:25:40,130 --> 00:25:47,480
index 0 layer index 1 or something like

528
00:25:44,480 --> 00:25:49,069
maybe shot index 0 is the thing probably

529
00:25:47,480 --> 00:25:51,110
not you know maybe I could just give it

530
00:25:49,069 --> 00:25:55,429
some other shot name I don't know like

531
00:25:51,109 --> 00:25:57,349
maybe this is shot 12 I don't know I

532
00:25:55,430 --> 00:25:58,039
could also just label it title screen

533
00:25:57,349 --> 00:26:00,619
who knows

534
00:25:58,039 --> 00:26:02,359
anyway so point being you know got all

535
00:26:00,619 --> 00:26:06,619
this stuff in here this would allow us

536
00:26:02,359 --> 00:26:09,229
to process those those as plates and now

537
00:26:06,619 --> 00:26:11,299
all I really need to do is I just need

538
00:26:09,230 --> 00:26:12,500
to add to the parse or something that

539
00:26:11,299 --> 00:26:15,349
allows us to do the same thing we're

540
00:26:12,500 --> 00:26:19,369
doing before where if you stuck a number

541
00:26:15,349 --> 00:26:21,199
in to a tag that sets the value of the

542
00:26:19,369 --> 00:26:23,059
tag to something other than one like

543
00:26:21,200 --> 00:26:25,160
normally what we do at tags because you

544
00:26:23,059 --> 00:26:27,409
know they're boolean a lot of the time

545
00:26:25,160 --> 00:26:30,440
is we just set it to 1 because that's

546
00:26:27,410 --> 00:26:33,200
sufficient in this case that wouldn't

547
00:26:30,440 --> 00:26:36,200
necessarily be sufficient so let's go

548
00:26:33,200 --> 00:26:40,039
ahead and look at that hht parser here

549
00:26:36,200 --> 00:26:43,880
which is this what you can see is wow

550
00:26:40,039 --> 00:26:45,829
this thing is so simple right this is

551
00:26:43,880 --> 00:26:47,480
why I always think parser generator is

552
00:26:45,829 --> 00:26:49,659
just silly because it's like yeah this

553
00:26:47,480 --> 00:26:52,039
whole thing gets parsed by this you know

554
00:26:49,660 --> 00:26:53,330
tylo piece of code it's like it would

555
00:26:52,039 --> 00:27:01,599
have taken me that long just to figure

556
00:26:53,329 --> 00:27:04,339
out why gak was like breaking and anyway

557
00:27:01,599 --> 00:27:05,629
so when I'm parse the tag list so you

558
00:27:04,339 --> 00:27:08,089
can see here like I grabbed this

559
00:27:05,630 --> 00:27:10,970
identifier right and then we're gonna

560
00:27:08,089 --> 00:27:14,299
call in to the tag system to say hey

561
00:27:10,970 --> 00:27:16,279
let's get that we then check what token

562
00:27:14,299 --> 00:27:18,889
comes next and what I want to do here is

563
00:27:16,279 --> 00:27:21,649
I want to look instead and say let's

564
00:27:18,890 --> 00:27:25,870
expand this I'm gonna look and see if

565
00:27:21,650 --> 00:27:30,090
the check type equals token parentheses

566
00:27:25,869 --> 00:27:32,709
or oh sorry open parentheses

567
00:27:30,089 --> 00:27:34,750
and if it is I'm gonna try and get a

568
00:27:32,710 --> 00:27:36,069
number out of it right because that's

569
00:27:34,750 --> 00:27:38,049
sort of what we're saying we're saying

570
00:27:36,069 --> 00:27:39,279
that if we parse an identifier for a tag

571
00:27:38,049 --> 00:27:41,649
I want to be able to have a

572
00:27:39,279 --> 00:27:44,920
parenthetical with a number in it and if

573
00:27:41,650 --> 00:27:46,330
I find that for some reason you know

574
00:27:44,920 --> 00:27:48,250
it's something else then I can process

575
00:27:46,329 --> 00:27:51,699
it just the way that I was going to

576
00:27:48,250 --> 00:27:55,000
process it before so really I don't

577
00:27:51,700 --> 00:27:57,819
really want this to look like that right

578
00:27:55,000 --> 00:28:00,609
I don't want to mean else I want to suck

579
00:27:57,819 --> 00:28:02,649
up the open print clause first if I need

580
00:28:00,609 --> 00:28:04,750
to and then if I don't

581
00:28:02,650 --> 00:28:08,080
oops and this is wrong should have been

582
00:28:04,750 --> 00:28:10,329
shot if I don't I can just fall through

583
00:28:08,079 --> 00:28:12,339
and continue the checking I was doing

584
00:28:10,329 --> 00:28:14,879
afterwards but so this is just an

585
00:28:12,339 --> 00:28:16,089
additional check that can suck up a

586
00:28:14,880 --> 00:28:19,060
parenthesis

587
00:28:16,089 --> 00:28:20,919
right so if I see a parenthetical at the

588
00:28:19,059 --> 00:28:22,480
moment because we only allow the

589
00:28:20,920 --> 00:28:24,850
parenthetical the number that's the only

590
00:28:22,480 --> 00:28:28,480
thing I've specified all I really want

591
00:28:24,849 --> 00:28:34,659
to do is I want to say okay require a

592
00:28:28,480 --> 00:28:38,519
number right this will be the value of

593
00:28:34,660 --> 00:28:42,640
the tag and then require a closed paren

594
00:28:38,519 --> 00:28:44,799
right because you have to close it we

595
00:28:42,640 --> 00:28:46,780
don't allow anything else so it

596
00:28:44,799 --> 00:28:49,450
literally has to be this pattern always

597
00:28:46,779 --> 00:28:52,990
there's no other you're not allowed to

598
00:28:49,450 --> 00:28:58,569
do anything else and this will be a

599
00:28:52,990 --> 00:29:03,130
number and constant part some blah blah

600
00:28:58,569 --> 00:29:10,809
blah so we don't have one of those so we

601
00:29:03,130 --> 00:29:13,660
need token what so I don't know that we

602
00:29:10,809 --> 00:29:15,879
want distinguish between like floating

603
00:29:13,660 --> 00:29:22,600
point and non flying so I'm just gonna

604
00:29:15,880 --> 00:29:25,360
say like number because this sort of the

605
00:29:22,599 --> 00:29:27,369
suite of things we're parsing it's not

606
00:29:25,359 --> 00:29:30,699
really the kind of thing where we have a

607
00:29:27,369 --> 00:29:32,500
strong opinion about that right so we

608
00:29:30,700 --> 00:29:36,640
really just want to say look require

609
00:29:32,500 --> 00:29:38,650
token any number will do it can be a

610
00:29:36,640 --> 00:29:42,520
whole number or a fractional number we

611
00:29:38,650 --> 00:29:43,030
just want to get it and then go from

612
00:29:42,519 --> 00:29:50,710
there

613
00:29:43,029 --> 00:29:53,349
and so that seems good and I think

614
00:29:50,710 --> 00:29:54,910
that's all we need however it doesn't

615
00:29:53,349 --> 00:29:59,799
mean that we will need to put this in

616
00:29:54,910 --> 00:30:02,230
here right so we do need to be a little

617
00:29:59,799 --> 00:30:05,559
bit more Squinkie about what's going on

618
00:30:02,230 --> 00:30:07,870
here with with with our parsing of

619
00:30:05,559 --> 00:30:10,599
numbers so if we've seen here that we've

620
00:30:07,869 --> 00:30:12,549
got a numeric type starting us off and

621
00:30:10,599 --> 00:30:15,609
one of the other things that we have to

622
00:30:12,549 --> 00:30:18,730
be aware of is you can see in here that

623
00:30:15,609 --> 00:30:22,539
we're not parsing any operators right so

624
00:30:18,730 --> 00:30:25,809
like we're not parsing things like - or

625
00:30:22,539 --> 00:30:28,569
any or + but if we were and we wanted to

626
00:30:25,809 --> 00:30:30,549
support negative numbers in here we

627
00:30:28,569 --> 00:30:33,250
would need to be careful to make sure

628
00:30:30,549 --> 00:30:36,579
that our tokenizer properly looks and

629
00:30:33,250 --> 00:30:39,940
says if I get a - if the next thing is a

630
00:30:36,579 --> 00:30:46,509
number then treat this as a numerical

631
00:30:39,940 --> 00:30:48,160
value that has that's negative or we can

632
00:30:46,509 --> 00:30:51,099
do it the other way around which says we

633
00:30:48,160 --> 00:30:53,500
just return the negative back - like we

634
00:30:51,099 --> 00:30:55,839
add a token for negative and we expect

635
00:30:53,500 --> 00:30:58,480
that the person who receives the number

636
00:30:55,839 --> 00:30:59,859
is doing something with expression

637
00:30:58,480 --> 00:31:02,950
parsing where they will apply the

638
00:30:59,859 --> 00:31:04,299
negative themselves right so there's a

639
00:31:02,950 --> 00:31:06,460
lot of different ways you can do this

640
00:31:04,299 --> 00:31:10,029
for now since we're only doing this for

641
00:31:06,460 --> 00:31:13,750
tags I'm just I'm strictly going to do

642
00:31:10,029 --> 00:31:15,309
the most basic one which is to sort of

643
00:31:13,750 --> 00:31:18,880
suck up the part of this that is

644
00:31:15,309 --> 00:31:21,579
numerical including a decimal point

645
00:31:18,880 --> 00:31:23,680
because like I said I would like to to

646
00:31:21,579 --> 00:31:26,619
allow fractional values potentially and

647
00:31:23,680 --> 00:31:30,130
that's the only thing we're gonna do now

648
00:31:26,619 --> 00:31:32,949
if I remember correctly we don't use ATO

649
00:31:30,130 --> 00:31:36,300
F anywhere so actually what ends up

650
00:31:32,950 --> 00:31:39,910
happening is when we're doing our

651
00:31:36,299 --> 00:31:42,970
parsing we've got an STD - from Z

652
00:31:39,910 --> 00:31:47,620
internal I don't think we've got an F 32

653
00:31:42,970 --> 00:31:50,110
from Z internal right so you can see

654
00:31:47,619 --> 00:31:52,928
here like we really only have the

655
00:31:50,109 --> 00:31:55,589
forward kind for most things we haven't

656
00:31:52,929 --> 00:31:58,650
really parsed it looks like

657
00:31:55,589 --> 00:32:02,009
most of these other ones here so we do

658
00:31:58,650 --> 00:32:05,490
have one that will parse sort of regular

659
00:32:02,009 --> 00:32:06,960
regular old integers we don't have

660
00:32:05,490 --> 00:32:15,480
something that'll parse things with a

661
00:32:06,960 --> 00:32:17,400
decimal okay so let's see what we can do

662
00:32:15,480 --> 00:32:21,089
about that this is not gonna be good

663
00:32:17,400 --> 00:32:22,409
this is low-quality stuff here but

664
00:32:21,089 --> 00:32:23,788
that's okay because we don't really need

665
00:32:22,409 --> 00:32:26,940
it to do anything particularly fancy

666
00:32:23,788 --> 00:32:29,519
right so let's take a look at how this

667
00:32:26,940 --> 00:32:31,980
is working if we see a numeric value

668
00:32:29,519 --> 00:32:35,879
then what we want to do is we want to

669
00:32:31,980 --> 00:32:38,429
sort of get those numeric values input

670
00:32:35,880 --> 00:32:41,880
into our number so we want to start with

671
00:32:38,429 --> 00:32:43,250
whatever the number is right we want to

672
00:32:41,880 --> 00:32:45,860
say all right

673
00:32:43,250 --> 00:32:50,609
will accumulate into this number

674
00:32:45,859 --> 00:32:52,678
whatever we read let's start parsing so

675
00:32:50,609 --> 00:32:56,250
the first thing I can do is say well

676
00:32:52,679 --> 00:32:59,340
alright let's keep going as we do our

677
00:32:56,250 --> 00:33:01,829
advanced cares here right so I can write

678
00:32:59,339 --> 00:33:07,079
this routine and say while the thing

679
00:33:01,829 --> 00:33:09,689
that I see is a number continue parsing

680
00:33:07,079 --> 00:33:13,589
you know advanced cares so if the thing

681
00:33:09,690 --> 00:33:15,600
is a number then I'm going to get

682
00:33:13,589 --> 00:33:19,798
whichever number it actually is like

683
00:33:15,599 --> 00:33:22,349
this right and just say this is the

684
00:33:19,798 --> 00:33:24,298
digit that came in and you can see that

685
00:33:22,349 --> 00:33:30,329
we're already doing that kind of over

686
00:33:24,298 --> 00:33:32,759
here right oops so that's the digit and

687
00:33:30,329 --> 00:33:34,829
then as you can see all we need to do is

688
00:33:32,759 --> 00:33:37,950
every time we read one of those digits

689
00:33:34,829 --> 00:33:40,349
we just need to take and say well

690
00:33:37,950 --> 00:33:41,940
whatever we already had is our number it

691
00:33:40,349 --> 00:33:43,589
obviously has one more decimal place to

692
00:33:41,940 --> 00:33:45,630
it cuz we just read a new one in so

693
00:33:43,589 --> 00:33:47,699
multiply that by 10 to shift everything

694
00:33:45,630 --> 00:33:51,000
up and then we'll insert this new digit

695
00:33:47,700 --> 00:33:54,450
right so our number is just always equal

696
00:33:51,000 --> 00:33:56,308
to 10 times whatever it was before plus

697
00:33:54,450 --> 00:33:59,220
the new digits that we got and that just

698
00:33:56,308 --> 00:34:01,970
adds things in then we go the next

699
00:33:59,220 --> 00:34:04,769
character when we're done parsing those

700
00:34:01,970 --> 00:34:07,679
really all we need to do is say is there

701
00:34:04,769 --> 00:34:09,059
a decimal point here right so at this

702
00:34:07,679 --> 00:34:13,910
point we can then say

703
00:34:09,059 --> 00:34:13,909
well if whatever is that tokenizer at

704
00:34:13,969 --> 00:34:21,719
happens to be a decimal point then we do

705
00:34:18,960 --> 00:34:25,829
want to process the fractional part

706
00:34:21,719 --> 00:34:27,899
right so we do want to process this same

707
00:34:25,829 --> 00:34:30,000
loop where we just read as many digits

708
00:34:27,900 --> 00:34:33,090
as we can we want to do the exact same

709
00:34:30,000 --> 00:34:34,980
thing the problem is if you look at what

710
00:34:33,090 --> 00:34:36,650
we've got here there really isn't any

711
00:34:34,980 --> 00:34:39,900
way to do what we were doing before

712
00:34:36,650 --> 00:34:41,610
because every time we go we don't want

713
00:34:39,900 --> 00:34:44,940
to operate at all on the number that we

714
00:34:41,610 --> 00:34:47,849
had right because if you look at it this

715
00:34:44,940 --> 00:34:50,369
number is already exactly what it should

716
00:34:47,849 --> 00:34:52,259
be as in terms of the part that's before

717
00:34:50,369 --> 00:34:54,889
the debt that well that comes to the

718
00:34:52,260 --> 00:34:57,300
left let's say of the decimal point so

719
00:34:54,889 --> 00:34:59,069
I've already got exactly what it should

720
00:34:57,300 --> 00:35:02,190
be I don't want to modify it anymore

721
00:34:59,070 --> 00:35:06,300
right what I want to do is I want to add

722
00:35:02,190 --> 00:35:09,990
fractional parts to it so really I just

723
00:35:06,300 --> 00:35:11,910
want to add right the digit in whatever

724
00:35:09,989 --> 00:35:13,559
it is I don't want to change the

725
00:35:11,909 --> 00:35:16,170
existing number I just want to add in

726
00:35:13,559 --> 00:35:19,769
the new fractional part and the

727
00:35:16,170 --> 00:35:22,559
fractional part well it's you know it's

728
00:35:19,769 --> 00:35:24,809
going to as I go further to the right

729
00:35:22,559 --> 00:35:29,070
it's going to be higher and higher

730
00:35:24,809 --> 00:35:31,320
divisors of 10 right so the first thing

731
00:35:29,070 --> 00:35:33,720
that comes after the decimal point it

732
00:35:31,320 --> 00:35:35,700
should be divided by 10 so you know if

733
00:35:33,719 --> 00:35:37,559
it was three then it should be three

734
00:35:35,699 --> 00:35:41,099
divided by 10 is how much I would add

735
00:35:37,559 --> 00:35:45,829
right so what I really need here is a

736
00:35:41,099 --> 00:35:48,900
divisor it would start off at ten and

737
00:35:45,829 --> 00:35:52,650
every time I go down it would gain

738
00:35:48,900 --> 00:35:54,480
another power of 10 so here I'm going to

739
00:35:52,650 --> 00:35:57,510
do and you know I can write this the

740
00:35:54,480 --> 00:35:59,309
other way so it's multiplicative you

741
00:35:57,510 --> 00:36:00,870
know coefficient might be the better way

742
00:35:59,309 --> 00:36:02,610
to do it so we're not necessarily doing

743
00:36:00,869 --> 00:36:05,369
the divide again doesn't really matter

744
00:36:02,610 --> 00:36:08,070
for this but so the coefficient is 0.1

745
00:36:05,369 --> 00:36:10,769
so I'm going to add 0.1 times the digit

746
00:36:08,070 --> 00:36:13,410
and then I want to say well if I managed

747
00:36:10,769 --> 00:36:17,369
to go another round let's make sure that

748
00:36:13,409 --> 00:36:19,980
we continue to fractionalize right now

749
00:36:17,369 --> 00:36:22,460
again what I want to underscore here is

750
00:36:19,980 --> 00:36:25,369
this is not a particularly good routine

751
00:36:22,460 --> 00:36:26,300
for converting decimal into binary which

752
00:36:25,369 --> 00:36:28,220
is what you're doing you're converting

753
00:36:26,300 --> 00:36:29,800
like a decimal floating point into a

754
00:36:28,219 --> 00:36:32,719
binary floating-point number

755
00:36:29,800 --> 00:36:35,660
there's better more accurate ways of

756
00:36:32,719 --> 00:36:37,279
doing this I'm sure it's just this is

757
00:36:35,659 --> 00:36:39,649
the simplest one to type in for our

758
00:36:37,280 --> 00:36:41,450
purposes right it's a very short concise

759
00:36:39,650 --> 00:36:44,599
routine that will sort of work after I

760
00:36:41,449 --> 00:36:46,489
do plug it anyway and so that's good

761
00:36:44,599 --> 00:36:48,440
enough for our purposes but if you

762
00:36:46,489 --> 00:36:50,539
really care and you're making like the

763
00:36:48,440 --> 00:36:51,829
standard invitation of this or you're

764
00:36:50,539 --> 00:36:54,259
gonna do a permanent one for your

765
00:36:51,829 --> 00:36:58,940
library or whatever you probably want to

766
00:36:54,260 --> 00:37:01,400
go more hardcore because decimal and

767
00:36:58,940 --> 00:37:05,030
binary are completely different ways of

768
00:37:01,400 --> 00:37:08,150
writing the number and converting using

769
00:37:05,030 --> 00:37:11,720
this introduces a bunch of bit error

770
00:37:08,150 --> 00:37:13,220
potentially that you could recover so if

771
00:37:11,719 --> 00:37:15,289
you're really trying to be accurate

772
00:37:13,219 --> 00:37:20,179
about it right this is not the smartest

773
00:37:15,289 --> 00:37:23,779
way to do it once you start to really

774
00:37:20,179 --> 00:37:25,399
care right so it's worth noting there's

775
00:37:23,780 --> 00:37:28,130
difference from those two so once we get

776
00:37:25,400 --> 00:37:30,139
this numeric token back that's all well

777
00:37:28,130 --> 00:37:32,660
and good what do we do now

778
00:37:30,139 --> 00:37:34,789
well we need to set the token type to

779
00:37:32,659 --> 00:37:36,558
what we just said and we also need to

780
00:37:34,789 --> 00:37:38,630
set all the rest of this stuff to make

781
00:37:36,559 --> 00:37:40,490
some sense the first thing we can do is

782
00:37:38,630 --> 00:37:43,190
exactly what we did before we just said

783
00:37:40,489 --> 00:37:45,529
look let's just make sure that we record

784
00:37:43,190 --> 00:37:47,599
the actual Texas right but then we also

785
00:37:45,530 --> 00:37:49,930
have in our text field out if you

786
00:37:47,599 --> 00:37:53,720
remember we set ourselves up for success

787
00:37:49,929 --> 00:37:57,409
by actually providing here some values

788
00:37:53,719 --> 00:38:00,259
we can use to store what we found out so

789
00:37:57,409 --> 00:38:02,509
that people can use them directly and so

790
00:38:00,260 --> 00:38:05,390
we know what the number is here we also

791
00:38:02,510 --> 00:38:08,750
know here that we want to do a rounded

792
00:38:05,389 --> 00:38:11,659
version so I'll go ahead and add that in

793
00:38:08,750 --> 00:38:13,579
here too right and that I don't know if

794
00:38:11,659 --> 00:38:15,828
we have a round two in 32 I guess we do

795
00:38:13,579 --> 00:38:18,380
yeah and so what I'd like to do now is

796
00:38:15,829 --> 00:38:20,660
just fill those out get this token ready

797
00:38:18,380 --> 00:38:24,318
and then now when we parse that as a

798
00:38:20,659 --> 00:38:27,980
number we can you know we can just go

799
00:38:24,318 --> 00:38:32,779
ahead and and and finish up now is

800
00:38:27,980 --> 00:38:35,298
numeric where is that oh it's is number

801
00:38:32,780 --> 00:38:36,619
I don't I guess we just called that the

802
00:38:35,298 --> 00:38:39,469
wrong

803
00:38:36,619 --> 00:38:41,480
his number is what we actually meant

804
00:38:39,469 --> 00:38:42,980
let me see though we've got some other

805
00:38:41,480 --> 00:38:46,659
problem here

806
00:38:42,980 --> 00:38:49,369
so round wheel through reel 32 to n 32

807
00:38:46,659 --> 00:38:52,009
what are we getting complaints about 1

808
00:38:49,369 --> 00:38:54,769
192 oh I see

809
00:38:52,010 --> 00:38:56,270
so this is actually producing write an

810
00:38:54,769 --> 00:38:57,739
integer but we want it to be a

811
00:38:56,269 --> 00:39:01,039
floating-point for our purposes so we

812
00:38:57,739 --> 00:39:05,568
can just go ahead and do that the same

813
00:39:01,039 --> 00:39:10,759
would be true right here and then I

814
00:39:05,568 --> 00:39:13,608
think we're good right yeah so that

815
00:39:10,760 --> 00:39:16,400
allows us to add values to our tags and

816
00:39:13,608 --> 00:39:17,960
so now inside the parser here when we

817
00:39:16,400 --> 00:39:20,780
parse we now have all the information

818
00:39:17,960 --> 00:39:23,000
that we actually need to do what we

819
00:39:20,780 --> 00:39:26,119
wanted to do so our parser is ready to

820
00:39:23,000 --> 00:39:27,650
go and it's very very tiny and so you

821
00:39:26,119 --> 00:39:28,730
can see here like there's really nothing

822
00:39:27,650 --> 00:39:31,460
to it

823
00:39:28,730 --> 00:39:33,349
so what that says to me is I think I'm

824
00:39:31,460 --> 00:39:35,780
just gonna not bother putting this in a

825
00:39:33,349 --> 00:39:37,760
separate file I think I'm just gonna put

826
00:39:35,780 --> 00:39:38,990
this into the assets file and we're just

827
00:39:37,760 --> 00:39:42,650
kind of gonna go from there

828
00:39:38,989 --> 00:39:45,588
right and so I'm gonna dump this guy

829
00:39:42,650 --> 00:39:47,599
into here there's another way we might

830
00:39:45,588 --> 00:39:49,250
want to do this like we may still want

831
00:39:47,599 --> 00:39:51,890
this to be part of a file but what we

832
00:39:49,250 --> 00:39:54,829
would do is we might pull all of the

833
00:39:51,889 --> 00:39:56,779
Edit style stuff out of here and put it

834
00:39:54,829 --> 00:39:58,430
into a separate file because it's

835
00:39:56,780 --> 00:40:00,769
getting kind of long and it's worth

836
00:39:58,429 --> 00:40:03,108
potentially distinguishing that from the

837
00:40:00,769 --> 00:40:05,599
parts that are just used in running the

838
00:40:03,108 --> 00:40:07,670
game window and it's occur right there

839
00:40:05,599 --> 00:40:11,930
just there might be something to that

840
00:40:07,670 --> 00:40:16,010
right so I'm gonna go ahead here and

841
00:40:11,929 --> 00:40:20,750
kill this and I'm also gonna go ahead

842
00:40:16,010 --> 00:40:21,740
and kill this and then we're gonna go

843
00:40:20,750 --> 00:40:27,829
ahead and deal with the fallout from

844
00:40:21,739 --> 00:40:30,348
that so if I go into this directory now

845
00:40:27,829 --> 00:40:33,079
and I do a build it won't find those

846
00:40:30,349 --> 00:40:35,599
parse file it won't find those include

847
00:40:33,079 --> 00:40:41,269
files anymore once I go ahead and delete

848
00:40:35,599 --> 00:40:43,960
them so insiders code I'm a delete

849
00:40:41,269 --> 00:40:43,960
handmaid

850
00:40:44,039 --> 00:40:53,110
what is it called it's like hht right

851
00:40:47,489 --> 00:40:54,959
yes so I'm gonna leap those two and then

852
00:40:53,110 --> 00:40:57,970
when I build you'll notice that

853
00:40:54,960 --> 00:40:59,619
everything's fine except for the include

854
00:40:57,969 --> 00:41:03,369
of those things which is what you might

855
00:40:59,619 --> 00:41:05,769
expect because hey they are no longer

856
00:41:03,369 --> 00:41:13,389
existing some are going to get rid of

857
00:41:05,769 --> 00:41:16,389
those completely those are all parsers

858
00:41:13,389 --> 00:41:20,079
things there we go

859
00:41:16,389 --> 00:41:23,920
so this tokenizer now is relatively

860
00:41:20,079 --> 00:41:28,630
important if I go look in here I'm gonna

861
00:41:23,920 --> 00:41:30,250
pull some of these out into forward

862
00:41:28,630 --> 00:41:32,470
declarations and that way I don't have

863
00:41:30,250 --> 00:41:35,170
to care what order I do some of those

864
00:41:32,469 --> 00:41:38,469
things in so I'm just gonna pull these

865
00:41:35,170 --> 00:41:41,019
out real quick here we go

866
00:41:38,469 --> 00:41:43,799
also yes this is not necessary anymore

867
00:41:41,019 --> 00:41:48,639
because it did in fact work just fine I

868
00:41:43,800 --> 00:41:49,630
grabbed that and did we get rid of temp

869
00:41:48,639 --> 00:41:52,089
cast as well

870
00:41:49,630 --> 00:41:56,050
I thought we finished that work yes we

871
00:41:52,090 --> 00:42:03,579
did so that's good too and we just need

872
00:41:56,050 --> 00:42:06,850
this this and this so now you can kind

873
00:42:03,579 --> 00:42:09,969
of see right we've got a nice little

874
00:42:06,849 --> 00:42:12,880
tokenizer here and the only thing we

875
00:42:09,969 --> 00:42:16,359
haven't really done is hooked up the

876
00:42:12,880 --> 00:42:18,160
actual error output to our error streams

877
00:42:16,360 --> 00:42:20,110
which we actually do have and so we're

878
00:42:18,159 --> 00:42:24,879
gonna want to do that and we'll do that

879
00:42:20,110 --> 00:42:27,789
as we integrate it in okay somebody has

880
00:42:24,880 --> 00:42:30,940
a syntax error complaint and you know

881
00:42:27,789 --> 00:42:38,880
that's fine for them let's see where

882
00:42:30,940 --> 00:42:41,320
that was at I'm not sure what that's

883
00:42:38,880 --> 00:42:43,720
complaining oh it's just complaining

884
00:42:41,320 --> 00:42:46,840
about that okay good

885
00:42:43,719 --> 00:42:49,089
so then we're just left with the fact

886
00:42:46,840 --> 00:42:51,370
that we had to check hht in here and I'm

887
00:42:49,090 --> 00:42:56,519
just going to remove that and we're

888
00:42:51,369 --> 00:42:56,519
gonna be done all right

889
00:42:57,389 --> 00:43:08,769
let's see what we want to do now I've

890
00:43:05,619 --> 00:43:10,779
got these hhe files and the main

891
00:43:08,769 --> 00:43:13,869
problems I'm gonna have I can tell you

892
00:43:10,780 --> 00:43:17,830
right off the bat is now that I can just

893
00:43:13,869 --> 00:43:20,109
go through these and process them I'm

894
00:43:17,829 --> 00:43:21,730
going to have a problem that we need our

895
00:43:20,110 --> 00:43:25,420
platform layer to be a little bit better

896
00:43:21,730 --> 00:43:28,449
about allowing us to find these things

897
00:43:25,420 --> 00:43:30,970
because what it what's going to happen

898
00:43:28,449 --> 00:43:34,029
inside the asset code is you're gonna

899
00:43:30,969 --> 00:43:40,299
see block Forest o1 dot PNG but if we

900
00:43:34,030 --> 00:43:41,860
jump over here what we'll see is even if

901
00:43:40,300 --> 00:43:44,019
we know to look in the base game

902
00:43:41,860 --> 00:43:46,510
directory because this is base game

903
00:43:44,019 --> 00:43:51,400
about hht and we do that you know just

904
00:43:46,510 --> 00:43:54,760
assumption it doesn't know we're in here

905
00:43:51,400 --> 00:44:00,400
they will be now there's two things we

906
00:43:54,760 --> 00:44:04,510
can do one is we can just hard code the

907
00:44:00,400 --> 00:44:09,760
search right we can just say look you

908
00:44:04,510 --> 00:44:15,280
got a automatically no to to put art in

909
00:44:09,760 --> 00:44:20,080
front of it and then looking here and we

910
00:44:15,280 --> 00:44:26,890
expect everything to be there the the

911
00:44:20,079 --> 00:44:29,710
plus side of that is it's it has some

912
00:44:26,889 --> 00:44:31,509
charm it's very simple it'd be hard to

913
00:44:29,710 --> 00:44:34,720
not understand it you would know exactly

914
00:44:31,510 --> 00:44:37,780
what's going on the only thing that's a

915
00:44:34,719 --> 00:44:39,699
little weird about it is that you then

916
00:44:37,780 --> 00:44:41,890
end up in a situation where these art

917
00:44:39,699 --> 00:44:44,079
directories might have a lot of stuff in

918
00:44:41,889 --> 00:44:48,219
them there could be like a thousand

919
00:44:44,079 --> 00:44:52,590
files in here and while you could if you

920
00:44:48,219 --> 00:44:55,419
wanted to you certainly could put

921
00:44:52,590 --> 00:44:58,960
subdirectories in there but you would

922
00:44:55,420 --> 00:45:02,909
then have to put the subdirectory here

923
00:44:58,960 --> 00:45:06,960
right make sense

924
00:45:02,909 --> 00:45:09,808
um and again that's maybe that's also

925
00:45:06,960 --> 00:45:10,230
fine with you because maybe and I don't

926
00:45:09,809 --> 00:45:13,680
know

927
00:45:10,230 --> 00:45:16,108
but maybe you want to be able to do the

928
00:45:13,679 --> 00:45:18,480
thing that we didn't do here which is

929
00:45:16,108 --> 00:45:20,279
have a instead of doing the rename like

930
00:45:18,480 --> 00:45:23,010
I did where now everything has a unique

931
00:45:20,280 --> 00:45:25,260
name maybe you want to have everything

932
00:45:23,010 --> 00:45:28,140
be called layer 0 layer 1 layer 2 layer

933
00:45:25,260 --> 00:45:31,619
3 and you just have the subdirectory for

934
00:45:28,139 --> 00:45:34,230
the shot tell you which one it is right

935
00:45:31,619 --> 00:45:36,869
and then that would work because you

936
00:45:34,230 --> 00:45:45,838
just go like that and that's actually

937
00:45:36,869 --> 00:45:49,760
what you want as I'm saying it it sounds

938
00:45:45,838 --> 00:45:49,759
pretty good I guess

939
00:46:06,440 --> 00:46:16,099
I mean I guess I'll just say sure maybe

940
00:46:11,449 --> 00:46:18,439
we do that and we just say if you want

941
00:46:16,099 --> 00:46:23,480
sub-directories you put them in here for

942
00:46:18,440 --> 00:46:29,990
now and I may want to change my mind

943
00:46:23,480 --> 00:46:32,900
about that so I'm not gonna stick to

944
00:46:29,989 --> 00:46:35,779
that particularly hard but since I don't

945
00:46:32,900 --> 00:46:39,619
have anything better to say that's what

946
00:46:35,780 --> 00:46:42,640
I'm gonna say for now um so if you look

947
00:46:39,619 --> 00:46:44,900
here at import changed assets

948
00:46:42,639 --> 00:46:47,108
essentially what we would do you can

949
00:46:44,900 --> 00:46:51,829
sort of see what's going on here we call

950
00:46:47,108 --> 00:46:54,889
platform get all files of type begin and

951
00:46:51,829 --> 00:46:55,700
we pass it the PNG we no longer really

952
00:46:54,889 --> 00:46:58,250
have to do that

953
00:46:55,699 --> 00:47:00,318
so now what we can do is just say that

954
00:46:58,250 --> 00:47:04,338
doesn't happen anymore so we still want

955
00:47:00,318 --> 00:47:07,940
that call it's good because it's here

956
00:47:04,338 --> 00:47:11,719
for this right we want it for this where

957
00:47:07,940 --> 00:47:14,778
we import all of our our asset files

958
00:47:11,719 --> 00:47:17,719
there and we probably want it for our

959
00:47:14,778 --> 00:47:20,269
tags stuff as well

960
00:47:17,719 --> 00:47:23,568
but after that we can actually just

961
00:47:20,269 --> 00:47:28,730
change around to doing things by loading

962
00:47:23,568 --> 00:47:31,788
them directly by name right and because

963
00:47:28,730 --> 00:47:35,358
once we get those tags in that's all we

964
00:47:31,789 --> 00:47:38,240
would really need I'm trying to think if

965
00:47:35,358 --> 00:47:41,929
there's anything else we would need to

966
00:47:38,239 --> 00:47:45,109
do there per se

967
00:47:41,929 --> 00:47:45,109
[Music]

968
00:47:52,670 --> 00:48:00,608
in a don't now excuse me uh so if I come

969
00:47:58,190 --> 00:48:03,889
back here and I look at the win32

970
00:48:00,608 --> 00:48:04,969
handmade code and I look at the platform

971
00:48:03,889 --> 00:48:07,940
file type

972
00:48:04,969 --> 00:48:10,368
PNG stuff so what you can see here is

973
00:48:07,940 --> 00:48:11,929
that it just you know it says look I'm

974
00:48:10,369 --> 00:48:14,539
gonna look in these directories when I'm

975
00:48:11,929 --> 00:48:16,909
looking for stuff and off we go

976
00:48:14,539 --> 00:48:20,240
and so if in here I was to say okay

977
00:48:16,909 --> 00:48:23,690
there's going to be a tag file right and

978
00:48:20,239 --> 00:48:26,419
that's going to be a thing or I guess I

979
00:48:23,690 --> 00:48:29,838
could say hht file then we know that

980
00:48:26,420 --> 00:48:32,659
that's in the tags folder and it would

981
00:48:29,838 --> 00:48:34,489
do that and that would allow us to get

982
00:48:32,659 --> 00:48:36,949
all of our tags files parse them and

983
00:48:34,489 --> 00:48:40,459
know what we were looking at for an art

984
00:48:36,949 --> 00:48:43,399
packing list my only question here is

985
00:48:40,460 --> 00:48:47,960
then how exactly does the person load

986
00:48:43,400 --> 00:48:50,539
the files that come from just arbitrary

987
00:48:47,960 --> 00:48:51,980
file names there and that I'm not sure

988
00:48:50,539 --> 00:48:55,519
so in other words these two would kind

989
00:48:51,980 --> 00:48:57,500
of go away because you wouldn't ever do

990
00:48:55,518 --> 00:48:59,419
that anymore

991
00:48:57,500 --> 00:49:01,460
you would just do this and the names

992
00:48:59,420 --> 00:49:04,450
would be implied or inferred I should

993
00:49:01,460 --> 00:49:08,750
say from the information that you gather

994
00:49:04,449 --> 00:49:12,169
here so my question is at that point how

995
00:49:08,750 --> 00:49:14,869
do you actually load a direct file and

996
00:49:12,170 --> 00:49:18,079
if we look inside the platform layer

997
00:49:14,869 --> 00:49:23,150
here where we've got a you know load or

998
00:49:18,079 --> 00:49:26,298
a open file you can see that you know

999
00:49:23,150 --> 00:49:32,329
open file doesn't really take a path

1000
00:49:26,298 --> 00:49:35,778
sort of a thing it's a thing that wants

1001
00:49:32,329 --> 00:49:38,210
just a file info and it doesn't really

1002
00:49:35,778 --> 00:49:39,949
have a path it doesn't have an

1003
00:49:38,210 --> 00:49:43,909
understanding about what a path is in

1004
00:49:39,949 --> 00:49:47,960
that sense right so we would need to

1005
00:49:43,909 --> 00:49:53,509
have an open file name a thing that

1006
00:49:47,960 --> 00:49:57,858
doesn't open file that is based on some

1007
00:49:53,509 --> 00:50:02,590
some kind of composite of those path

1008
00:49:57,858 --> 00:50:10,239
names there I am

1009
00:50:02,590 --> 00:50:12,340
I mean I think that's just unavoidable

1010
00:50:10,239 --> 00:50:16,439
if we want it to go from text file

1011
00:50:12,340 --> 00:50:20,710
forward to you know to something and so

1012
00:50:16,440 --> 00:50:22,840
that you know I think that's just how

1013
00:50:20,710 --> 00:50:26,800
that has to work so in other words we

1014
00:50:22,840 --> 00:50:31,780
would read this string we would know the

1015
00:50:26,800 --> 00:50:33,730
actual string that we have for like look

1016
00:50:31,780 --> 00:50:37,600
where we expect this to be in the

1017
00:50:33,730 --> 00:50:40,900
sources directory right and I think we

1018
00:50:37,599 --> 00:50:45,579
would just go from there so let's see to

1019
00:50:40,900 --> 00:50:48,340
what extent that actually works we've

1020
00:50:45,579 --> 00:50:51,489
got this platform Open File thing right

1021
00:50:48,340 --> 00:50:58,000
and if I want to do a pound to find of

1022
00:50:51,489 --> 00:50:59,739
this in a different way like so I'm

1023
00:50:58,000 --> 00:51:06,300
gonna go ahead and say let's see

1024
00:50:59,739 --> 00:51:09,549
platform open file I let's see by name

1025
00:51:06,300 --> 00:51:18,780
instead of a final foot and and I guess

1026
00:51:09,550 --> 00:51:18,780
file info I could still do this

1027
00:51:25,159 --> 00:51:39,199
so what I might do excuse me I'm trying

1028
00:51:33,690 --> 00:51:39,199
to decide what I would want to do here

1029
00:51:42,318 --> 00:51:47,568
because I have this notion of the file

1030
00:51:45,150 --> 00:51:50,579
info I kind of want to leave maybe this

1031
00:51:47,568 --> 00:51:57,588
open file working the way it is and so

1032
00:51:50,579 --> 00:51:57,589
really what I kind of want is get file

1033
00:51:58,369 --> 00:52:08,369
by name and instead here this would

1034
00:52:02,969 --> 00:52:15,179
return a platform file info right and it

1035
00:52:08,369 --> 00:52:18,989
would take maybe a pointer to the

1036
00:52:15,179 --> 00:52:23,759
results I'm sorry a pointer to the name

1037
00:52:18,989 --> 00:52:25,409
and the mode flags are for opening so it

1038
00:52:23,759 --> 00:52:28,159
wouldn't be anything there so you know

1039
00:52:25,409 --> 00:52:32,159
it would be something more like this

1040
00:52:28,159 --> 00:52:36,778
where you can get the file info and then

1041
00:52:32,159 --> 00:52:38,699
release the file info and the reason

1042
00:52:36,778 --> 00:52:40,768
they don't what a hundred percent love

1043
00:52:38,699 --> 00:52:44,909
that is because it means that you have

1044
00:52:40,768 --> 00:52:47,698
to like acquire and release these you

1045
00:52:44,909 --> 00:52:49,440
know what I mean and that's maybe less

1046
00:52:47,699 --> 00:52:50,909
good like I would rather it have just

1047
00:52:49,440 --> 00:52:53,670
been something can return to forget

1048
00:52:50,909 --> 00:52:58,048
about so you may ask me and this is a

1049
00:52:53,670 --> 00:52:59,400
very good thing to ask me why not just

1050
00:52:58,048 --> 00:53:02,400
make it something you can release and

1051
00:52:59,400 --> 00:53:06,900
the answer is because if you remember we

1052
00:53:02,400 --> 00:53:11,579
need to handle Windows is ridiculous we

1053
00:53:06,900 --> 00:53:15,599
didn't use utf-8 because we didn't think

1054
00:53:11,579 --> 00:53:18,690
of it and we used utf-16 instead and

1055
00:53:15,599 --> 00:53:19,859
then the UNIX people came along and said

1056
00:53:18,690 --> 00:53:21,679
hey wait a minute what if we made this

1057
00:53:19,858 --> 00:53:25,078
utf-8 thing everything would still work

1058
00:53:21,679 --> 00:53:28,288
and then Windows was like oh woops we

1059
00:53:25,079 --> 00:53:30,180
just rewrote all our code to be bad so

1060
00:53:28,289 --> 00:53:32,309
we need to handle the fact that there's

1061
00:53:30,179 --> 00:53:34,259
a platform specific file name that

1062
00:53:32,309 --> 00:53:35,730
actually bears no relationship to the

1063
00:53:34,259 --> 00:53:38,940
actual file name that we're

1064
00:53:35,730 --> 00:53:41,460
thing about and it's based on utf-16 and

1065
00:53:38,940 --> 00:53:42,240
so that's some arbitrary size thing that

1066
00:53:41,460 --> 00:53:45,780
we're doing in here

1067
00:53:42,239 --> 00:53:48,269
and so you know I think we need to keep

1068
00:53:45,780 --> 00:53:50,940
that semantics as much as I don't love

1069
00:53:48,269 --> 00:53:59,219
it right that's kind of just what it

1070
00:53:50,940 --> 00:54:08,849
would have to look like and so this or I

1071
00:53:59,219 --> 00:54:10,439
should say by path maybe and so this way

1072
00:54:08,849 --> 00:54:13,380
you could say look here's the path that

1073
00:54:10,440 --> 00:54:17,880
I think this file should be inside our

1074
00:54:13,380 --> 00:54:20,369
sources and it will just come back with

1075
00:54:17,880 --> 00:54:22,619
you know the the file info for it and

1076
00:54:20,369 --> 00:54:25,140
the like I said the reason I don't like

1077
00:54:22,619 --> 00:54:28,320
that is that you have to close that

1078
00:54:25,139 --> 00:54:32,849
somehow and so here you know you call

1079
00:54:28,320 --> 00:54:36,660
this begin and end and you got the file

1080
00:54:32,849 --> 00:54:40,230
group here I don't know maybe that's a

1081
00:54:36,659 --> 00:54:43,159
good enough way you know we could maybe

1082
00:54:40,230 --> 00:54:45,809
make it so that you do it inside these

1083
00:54:43,159 --> 00:54:47,969
and so you don't really have to worry

1084
00:54:45,809 --> 00:54:50,849
about freeing it because that will clean

1085
00:54:47,969 --> 00:54:53,489
it all up for you that's one way to

1086
00:54:50,849 --> 00:54:55,349
think about it let me look inside win32

1087
00:54:53,489 --> 00:55:03,289
to see how that was happening at the

1088
00:54:55,349 --> 00:55:03,289
moment cuz I don't really know

1089
00:55:08,449 --> 00:55:23,279
so did that just so that literally just

1090
00:55:16,500 --> 00:55:30,480
returns a linked list I guess right that

1091
00:55:23,280 --> 00:55:33,750
you just iterate over so maybe let's do

1092
00:55:30,480 --> 00:55:36,269
it that way so what we would say is you

1093
00:55:33,750 --> 00:55:39,119
pass the file group in you just say

1094
00:55:36,269 --> 00:55:41,579
here's the like thing that I wanted to

1095
00:55:39,119 --> 00:55:44,640
talk about it'll be part of this and

1096
00:55:41,579 --> 00:55:46,109
then that'll just clean it up I'm ok

1097
00:55:44,639 --> 00:55:49,289
with that

1098
00:55:46,108 --> 00:55:51,269
I don't have a problem with that so all

1099
00:55:49,289 --> 00:55:53,460
we would really need to do then at that

1100
00:55:51,269 --> 00:55:55,588
point it's really not that bad I guess

1101
00:55:53,460 --> 00:55:57,358
this is this is pretty nice cuz it's a

1102
00:55:55,588 --> 00:55:59,519
pretty simple way of just extending what

1103
00:55:57,358 --> 00:56:02,969
we already had to work with arbitrary

1104
00:55:59,519 --> 00:56:04,858
path stuff if you want all we really

1105
00:56:02,969 --> 00:56:07,259
need to do is come in here and say well

1106
00:56:04,858 --> 00:56:10,078
where's the open file right here's how

1107
00:56:07,260 --> 00:56:13,290
that was working and get to get all file

1108
00:56:10,079 --> 00:56:16,260
types and all that stuff so in here I

1109
00:56:13,289 --> 00:56:20,789
just need a thing that's like hey yeah

1110
00:56:16,260 --> 00:56:25,040
we need one of these for win through to

1111
00:56:20,789 --> 00:56:27,960
get file by path and it needs to take

1112
00:56:25,039 --> 00:56:31,349
those two parameters and produce an

1113
00:56:27,960 --> 00:56:38,789
actual like something that works out of

1114
00:56:31,349 --> 00:56:43,769
that right ok so how are we doing this

1115
00:56:38,789 --> 00:56:46,588
before you can see it here you can see

1116
00:56:43,769 --> 00:56:48,929
us producing sort of the win32 find

1117
00:56:46,588 --> 00:56:51,960
handle version of this stuff right

1118
00:56:48,929 --> 00:56:57,000
here's the find data here it produces

1119
00:56:51,960 --> 00:56:59,730
the whole thing and it looks like we

1120
00:56:57,000 --> 00:57:01,500
could maybe just I wish I had more to

1121
00:56:59,730 --> 00:57:05,309
drink here it looks like we can maybe

1122
00:57:01,500 --> 00:57:10,829
just use this code right all we would

1123
00:57:05,309 --> 00:57:13,828
have to do is call this bottom part of

1124
00:57:10,829 --> 00:57:18,780
the routine a separate routine and the

1125
00:57:13,829 --> 00:57:19,580
wild-card function is just a full file

1126
00:57:18,780 --> 00:57:24,440
name

1127
00:57:19,579 --> 00:57:29,239
and that's it right so I think we just

1128
00:57:24,440 --> 00:57:38,269
have a think here that's like hey this

1129
00:57:29,239 --> 00:57:48,739
is called win32 get file info from wild

1130
00:57:38,269 --> 00:57:50,420
card because sure I and this thing is

1131
00:57:48,739 --> 00:57:54,819
just going to be the interior of this

1132
00:57:50,420 --> 00:57:56,990
routine and then we're gonna call that

1133
00:57:54,820 --> 00:57:59,960
right cuz that's exactly what this

1134
00:57:56,989 --> 00:58:04,039
routine does it says give me a path I

1135
00:57:59,960 --> 00:58:07,130
will produce all of the information that

1136
00:58:04,039 --> 00:58:11,300
you requested for the things in that

1137
00:58:07,130 --> 00:58:13,160
path and then I will be done right and

1138
00:58:11,300 --> 00:58:15,830
we've got this platform file group

1139
00:58:13,159 --> 00:58:19,369
result here that you know it generates

1140
00:58:15,829 --> 00:58:24,679
and so really all we have to do is this

1141
00:58:19,369 --> 00:58:26,299
file count here well even that just

1142
00:58:24,679 --> 00:58:28,759
works because that just tells you how

1143
00:58:26,300 --> 00:58:30,500
many got produced so it was add to the

1144
00:58:28,760 --> 00:58:31,790
so you could look at the total number if

1145
00:58:30,500 --> 00:58:36,980
you cared which I don't know that you

1146
00:58:31,789 --> 00:58:40,429
would I think that just works so here

1147
00:58:36,980 --> 00:58:43,789
once we create all of these looks like

1148
00:58:40,429 --> 00:58:48,109
they get pushed on - you can see here

1149
00:58:43,789 --> 00:58:50,719
like first file info equals info and the

1150
00:58:48,110 --> 00:58:53,269
next pointer I assume yeah just just so

1151
00:58:50,719 --> 00:58:58,609
it just does a chain right off of here

1152
00:58:53,269 --> 00:59:02,000
and so all we really need to do is pull

1153
00:58:58,610 --> 00:59:03,620
off whatever one is on that next pointer

1154
00:59:02,000 --> 00:59:08,690
so yeah again really really

1155
00:59:03,619 --> 00:59:11,000
straightforward just not a lot to it so

1156
00:59:08,690 --> 00:59:13,460
I think that means all we would have to

1157
00:59:11,000 --> 00:59:15,800
do here let me think for a second is we

1158
00:59:13,460 --> 00:59:19,340
have to set the next pointer to point in

1159
00:59:15,800 --> 00:59:21,620
and we have to get the first pointer out

1160
00:59:19,340 --> 00:59:25,880
but that's it so I think all we need to

1161
00:59:21,619 --> 00:59:31,329
do here is just say look we've got a

1162
00:59:25,880 --> 00:59:33,590
platform file info that's like you know

1163
00:59:31,329 --> 00:59:35,299
the nth like the

1164
00:59:33,590 --> 00:59:40,760
is the one that at the end of the chain

1165
00:59:35,300 --> 00:59:52,730
you produce put put that on there right

1166
00:59:40,760 --> 00:59:56,810
or set next to this right and so in here

1167
00:59:52,730 --> 00:59:58,400
we're just gonna save that like this is

1168
00:59:56,809 --> 01:00:03,679
what you're gonna set the next thing to

1169
00:59:58,400 --> 01:00:06,050
right I think that's basically what we

1170
01:00:03,679 --> 01:00:07,940
need to do so let me think about this

1171
01:00:06,050 --> 01:00:09,500
this is a recurrence thing so we're

1172
01:00:07,940 --> 01:00:13,820
basically saying look there's a pointer

1173
01:00:09,500 --> 01:00:18,530
here that's the head of the list each

1174
01:00:13,820 --> 01:00:21,710
time through here we put the head into

1175
01:00:18,530 --> 01:00:24,350
the next pointer right and then down

1176
01:00:21,710 --> 01:00:26,929
here we set the head equal to it right

1177
01:00:24,349 --> 01:00:31,009
and so if we want to seed that value we

1178
01:00:26,929 --> 01:00:33,129
just do this and then we're done and

1179
01:00:31,010 --> 01:00:37,700
then we return the head as our result

1180
01:00:33,130 --> 01:00:41,000
right I think that's it so the file

1181
01:00:37,699 --> 01:00:43,879
count is fine and we walk the wind three

1182
01:00:41,000 --> 01:00:49,849
to five you appear so we want the into a

1183
01:00:43,880 --> 01:00:56,869
platform flower group right to be passed

1184
01:00:49,849 --> 01:00:59,360
in although that is not the only thing

1185
01:00:56,869 --> 01:01:03,559
because we also have whatever the weird

1186
01:00:59,360 --> 01:01:06,410
yeah this thing right so the result

1187
01:01:03,559 --> 01:01:08,539
platform thing so really I could say we

1188
01:01:06,409 --> 01:01:16,329
put we just passed this in if I wanted

1189
01:01:08,539 --> 01:01:22,509
to right so we have file group here and

1190
01:01:16,329 --> 01:01:22,509
this can come out of this

1191
01:01:23,559 --> 01:01:36,789
I think that's all we need this is that

1192
01:01:32,889 --> 01:01:39,339
this is that as it should be all of that

1193
01:01:36,789 --> 01:01:43,449
just works nothing weird happening there

1194
01:01:39,340 --> 01:01:45,160
this is all good and off we go so then

1195
01:01:43,449 --> 01:01:50,980
in here when we actually want to use

1196
01:01:45,159 --> 01:01:56,309
this thing right this needs to return

1197
01:01:50,980 --> 01:02:03,730
the head of the chain which it will do

1198
01:01:56,309 --> 01:02:06,190
right here I'm going to call that result

1199
01:02:03,730 --> 01:02:15,789
now that we've gotten rid of results as

1200
01:02:06,190 --> 01:02:18,579
a thing right pretty easy and now we

1201
01:02:15,789 --> 01:02:21,579
could call it from both places so this

1202
01:02:18,579 --> 01:02:23,670
guy who was doing it before can just say

1203
01:02:21,579 --> 01:02:28,719
off you go

1204
01:02:23,670 --> 01:02:33,190
we're gonna set the the file group so

1205
01:02:28,719 --> 01:02:36,879
that's our result that's got the pointer

1206
01:02:33,190 --> 01:02:41,650
to the first one of these which I've now

1207
01:02:36,880 --> 01:02:43,420
forgotten the name of first file info so

1208
01:02:41,650 --> 01:02:45,090
the first file info is going to be

1209
01:02:43,420 --> 01:02:47,740
whatever comes back from this thing

1210
01:02:45,090 --> 01:02:50,320
we're gonna pass the file group to it

1211
01:02:47,739 --> 01:02:53,289
which I believe is just the results in

1212
01:02:50,320 --> 01:02:54,940
this case and this set next to because

1213
01:02:53,289 --> 01:02:56,619
I'm I read about that yeah the set next

1214
01:02:54,940 --> 01:02:58,539
to is just going to be whatever was in

1215
01:02:56,619 --> 01:03:01,719
there to begin with now that actually

1216
01:02:58,539 --> 01:03:06,250
happens to be zero in this case so

1217
01:03:01,719 --> 01:03:08,489
really now I think about it I guess we

1218
01:03:06,250 --> 01:03:12,010
never really need to pass that in

1219
01:03:08,489 --> 01:03:14,219
because we just don't actually use it so

1220
01:03:12,010 --> 01:03:16,300
really all we need is like the

1221
01:03:14,219 --> 01:03:19,869
information that this thing was using

1222
01:03:16,300 --> 01:03:23,860
now so yeah this this can just be zero

1223
01:03:19,869 --> 01:03:27,039
right and that result chain can just do

1224
01:03:23,860 --> 01:03:29,500
its thing so the final group gets passed

1225
01:03:27,039 --> 01:03:32,349
in this has to be the wild card right we

1226
01:03:29,500 --> 01:03:36,519
need that wild card data and the wild

1227
01:03:32,349 --> 01:03:40,569
card is a wkt pointer right

1228
01:03:36,519 --> 01:03:43,150
correctly yeah um and I don't know what

1229
01:03:40,570 --> 01:03:45,670
else it needs so hold on a second let me

1230
01:03:43,150 --> 01:03:48,480
compile just so I can see what it

1231
01:03:45,670 --> 01:03:48,480
doesn't have

1232
01:03:49,440 --> 01:03:57,579
so it's upset about this because I

1233
01:03:54,400 --> 01:04:03,430
didn't cast it properly and that's a

1234
01:03:57,579 --> 01:04:06,549
pretty reasonable complaint wild card is

1235
01:04:03,429 --> 01:04:10,259
under clips yeah that's a spelling

1236
01:04:06,550 --> 01:04:10,260
problem let's try that one more time

1237
01:04:11,340 --> 01:04:18,760
so yes stem size was being used here to

1238
01:04:15,820 --> 01:04:20,650
basically take the wild card and append

1239
01:04:18,760 --> 01:04:25,630
the correct thing on to the end of it

1240
01:04:20,650 --> 01:04:29,230
when we actually got the name back so we

1241
01:04:25,630 --> 01:04:33,160
do want to potentially pass the stem

1242
01:04:29,230 --> 01:04:35,769
size in so that it can do that

1243
01:04:33,159 --> 01:04:39,809
optimization the only thing I'm not sure

1244
01:04:35,769 --> 01:04:45,550
about here is how do we actually want

1245
01:04:39,809 --> 01:04:49,599
the other one to work so if you pass the

1246
01:04:45,550 --> 01:05:01,930
stem size here then that should allow us

1247
01:04:49,599 --> 01:05:04,029
to do that one just fine but and where's

1248
01:05:01,929 --> 01:05:06,639
the what's the stem is the location

1249
01:05:04,030 --> 01:05:09,850
right so it's stem and stem size both

1250
01:05:06,639 --> 01:05:12,480
get passed here and that's the W to be

1251
01:05:09,849 --> 01:05:12,480
care T as well

1252
01:05:16,369 --> 01:05:19,859
so I don't know how the other one will

1253
01:05:18,599 --> 01:05:21,029
work with that I have to go look at how

1254
01:05:19,860 --> 01:05:27,890
those names are destructed but I suspect

1255
01:05:21,030 --> 01:05:32,250
we can probably just pass no stem or or

1256
01:05:27,889 --> 01:05:34,339
have some way of saying don't bother

1257
01:05:32,250 --> 01:05:37,050
reconstructing the name because we don't

1258
01:05:34,340 --> 01:05:39,840
need to build it in any other way right

1259
01:05:37,050 --> 01:05:43,440
the the actual thing we hand you is the

1260
01:05:39,840 --> 01:05:47,059
complete name anyway right so I'm not

1261
01:05:43,440 --> 01:05:47,059
sure what we wanna do about that exactly

1262
01:05:47,360 --> 01:05:50,700
well you know what it probably just

1263
01:05:49,289 --> 01:05:52,980
works if we just do the part after the

1264
01:05:50,699 --> 01:05:54,719
slash anyway so maybe we can have it

1265
01:05:52,980 --> 01:05:55,679
still build the name I don't know that's

1266
01:05:54,719 --> 01:05:58,439
a good question

1267
01:05:55,679 --> 01:06:00,269
we'll have to take a look anyway so here

1268
01:05:58,440 --> 01:06:08,780
I think we're pretty good to go in most

1269
01:06:00,269 --> 01:06:09,960
cases we've got a problem everyone for

1270
01:06:08,780 --> 01:06:13,200
okay

1271
01:06:09,960 --> 01:06:17,780
so here we're we're actually passing

1272
01:06:13,199 --> 01:06:20,159
this this wants a platform file group

1273
01:06:17,780 --> 01:06:24,240
star and said I have it

1274
01:06:20,159 --> 01:06:25,739
taking a B actually the whole thing

1275
01:06:24,239 --> 01:06:28,189
which is not what I wanted so we want

1276
01:06:25,739 --> 01:06:33,419
file group dot 2d file group arrow here

1277
01:06:28,190 --> 01:06:36,179
but other than that we're good so I

1278
01:06:33,420 --> 01:06:37,860
think that's all we really need to get

1279
01:06:36,179 --> 01:06:40,889
the old one working so now what we need

1280
01:06:37,860 --> 01:06:43,289
to do is just make the new one work for

1281
01:06:40,889 --> 01:06:45,539
this where we've got PNG and web and

1282
01:06:43,289 --> 01:06:49,170
stuff and now I think we're gonna say is

1283
01:06:45,539 --> 01:06:53,130
look let's get rid of that and we'll

1284
01:06:49,170 --> 01:06:56,010
just have h HT be the only other thing

1285
01:06:53,130 --> 01:06:57,269
that's in there let me see if we use

1286
01:06:56,010 --> 01:07:01,350
those anywhere else I don't know if we

1287
01:06:57,269 --> 01:07:02,639
do just so I can find it yeah so it's

1288
01:07:01,349 --> 01:07:05,219
only in the import asset changes which

1289
01:07:02,639 --> 01:07:07,379
is the part we're removing so I think

1290
01:07:05,219 --> 01:07:16,259
I'm okay with just having that be out of

1291
01:07:07,380 --> 01:07:18,390
here now if I look back this code what

1292
01:07:16,260 --> 01:07:20,490
I'm going to want to do is call it here

1293
01:07:18,389 --> 01:07:23,429
to produce a platform file info

1294
01:07:20,489 --> 01:07:26,179
structure that I can return so this is

1295
01:07:23,429 --> 01:07:26,179
what I'm aiming for

1296
01:07:26,960 --> 01:07:32,338
this I believe

1297
01:07:29,460 --> 01:07:35,130
can just get because we know that that

1298
01:07:32,338 --> 01:07:37,650
gets passed to us directly so it gets

1299
01:07:35,130 --> 01:07:39,119
passed in here also I don't know missing

1300
01:07:37,650 --> 01:07:41,940
it the Senate : sauce was being there so

1301
01:07:39,119 --> 01:07:45,690
the file group is just something we have

1302
01:07:41,940 --> 01:07:48,780
so that's easy the path is in the wrong

1303
01:07:45,690 --> 01:07:54,329
format so it's getting passed in as

1304
01:07:48,780 --> 01:07:57,619
utf-8 but we don't want it to be utf-8

1305
01:07:54,329 --> 01:08:03,949
right we need it to be the we'd to be

1306
01:07:57,619 --> 01:08:06,588
chairty right it needs to be WT utf-16

1307
01:08:03,949 --> 01:08:10,799
and so what I need to do is I need to do

1308
01:08:06,588 --> 01:08:13,019
this same conversion right or well

1309
01:08:10,800 --> 01:08:15,750
actually it's sort of what we're doing

1310
01:08:13,019 --> 01:08:20,819
here right I need to to do this

1311
01:08:15,750 --> 01:08:24,710
preparation of the wild card text to

1312
01:08:20,819 --> 01:08:26,969
produce the entire string for this thing

1313
01:08:24,710 --> 01:08:28,630
and again when we look at what's

1314
01:08:26,969 --> 01:08:31,908
happening in here

1315
01:08:28,630 --> 01:08:31,909
[Music]

1316
01:08:38,929 --> 01:08:44,059
you know it seems like Moody maybe I

1317
01:08:41,639 --> 01:08:46,889
want to break this up even a little bit

1318
01:08:44,059 --> 01:08:50,219
more granular maybe I shouldn't quite

1319
01:08:46,889 --> 01:08:53,039
have done that it's hard to say because

1320
01:08:50,219 --> 01:08:55,259
it like actually this part I would have

1321
01:08:53,039 --> 01:09:02,238
to duplicate outside anyway to even be

1322
01:08:55,259 --> 01:09:05,009
able to pass the wild card handle in so

1323
01:09:02,238 --> 01:09:06,778
you know maybe we just want cuz this

1324
01:09:05,009 --> 01:09:08,789
code we want to share but that's pretty

1325
01:09:06,779 --> 01:09:10,559
easy to share right like the file date

1326
01:09:08,789 --> 01:09:16,769
and file size are pretty trivial for us

1327
01:09:10,559 --> 01:09:19,650
to to share and so the part where we

1328
01:09:16,770 --> 01:09:29,639
actually use the name I don't know like

1329
01:09:19,649 --> 01:09:33,618
maybe it just doesn't matter maybe what

1330
01:09:29,639 --> 01:09:33,618
we really want to pull out is just this

1331
01:09:46,890 --> 01:09:52,920
so let's at least do that part and then

1332
01:09:50,380 --> 01:09:52,920
we'll think about it

1333
01:10:01,380 --> 01:10:07,750
suing here I know that I need to do this

1334
01:10:03,908 --> 01:10:16,629
right and so I'm gonna grab this part

1335
01:10:07,750 --> 01:10:19,479
here and say this code I'm gonna see if

1336
01:10:16,630 --> 01:10:22,390
what I can do they're looking at the

1337
01:10:19,479 --> 01:10:24,279
base name stuff just where that gets

1338
01:10:22,390 --> 01:10:27,340
used you can see that we don't use it

1339
01:10:24,279 --> 01:10:29,619
anywhere below here so I believe I

1340
01:10:27,340 --> 01:10:33,550
should be able to grab this part here

1341
01:10:29,619 --> 01:10:37,750
and say that could in theory just be

1342
01:10:33,550 --> 01:10:40,090
done as one chunk like so and then when

1343
01:10:37,750 --> 01:10:41,500
I call this what I could say is all

1344
01:10:40,090 --> 01:10:50,199
right the part that we're actually

1345
01:10:41,500 --> 01:10:55,300
trying to convert here right is base

1346
01:10:50,198 --> 01:11:00,089
name begin base name size and it's going

1347
01:10:55,300 --> 01:11:03,699
into info base name base names storage

1348
01:11:00,090 --> 01:11:09,429
right so what I should be able to do

1349
01:11:03,698 --> 01:11:13,988
here is say okay we've got a results the

1350
01:11:09,429 --> 01:11:17,340
result is going to be this and so down

1351
01:11:13,988 --> 01:11:25,779
here we're going to plug it in like that

1352
01:11:17,340 --> 01:11:29,230
so that is the code we would need for

1353
01:11:25,779 --> 01:11:33,789
doing the utf-8 conversion now base name

1354
01:11:29,229 --> 01:11:36,399
begin in base name size base name end

1355
01:11:33,789 --> 01:11:38,500
and base name begin or what are used to

1356
01:11:36,399 --> 01:11:40,448
generate that size we could see that

1357
01:11:38,500 --> 01:11:42,789
maybe that part should be done outside

1358
01:11:40,448 --> 01:11:44,139
because it depends on who's doing it

1359
01:11:42,789 --> 01:11:47,079
whether you'd want to do it that way or

1360
01:11:44,140 --> 01:11:51,880
not so we just pass in base name size

1361
01:11:47,079 --> 01:11:55,140
and then we also pass in the like the

1362
01:11:51,880 --> 01:11:55,140
source right

1363
01:11:56,909 --> 01:12:03,849
yeah so this converts one way so this

1364
01:12:00,430 --> 01:12:06,060
will convert I'm sorry this is the wrong

1365
01:12:03,850 --> 01:12:06,060
way around

1366
01:12:12,149 --> 01:12:17,949
that's this way so this will convert

1367
01:12:15,010 --> 01:12:21,340
utf-16 to utf-8 if we want to go that

1368
01:12:17,949 --> 01:12:22,989
direction and then we need a thing that

1369
01:12:21,340 --> 01:12:24,310
converts the opposite direction as well

1370
01:12:22,989 --> 01:12:28,569
right so we need a thing that will

1371
01:12:24,310 --> 01:12:30,550
convert from utf-8 utf-16 which is the

1372
01:12:28,569 --> 01:12:40,679
exact opposite function if that makes

1373
01:12:30,550 --> 01:12:40,680
sense so I think that's all fine right

1374
01:12:40,710 --> 01:12:45,460
there's base name size

1375
01:12:43,000 --> 01:12:46,840
their space name begin and then if I

1376
01:12:45,460 --> 01:12:48,640
want to go the other direction I should

1377
01:12:46,840 --> 01:12:52,119
literally be able to use the exact same

1378
01:12:48,640 --> 01:12:56,500
function so here I've got utf-8 to

1379
01:12:52,119 --> 01:13:04,449
utf-16 I would pass the and you know

1380
01:12:56,500 --> 01:13:07,239
this this could loops did that actually

1381
01:13:04,449 --> 01:13:09,099
Oh weird that actually did exactly what

1382
01:13:07,239 --> 01:13:10,979
I wanted though so I guess I didn't want

1383
01:13:09,100 --> 01:13:13,270
that to do it ever

1384
01:13:10,979 --> 01:13:16,899
suing here right I'm just saying look

1385
01:13:13,270 --> 01:13:20,080
convert this from 16 to 8 I can do the

1386
01:13:16,899 --> 01:13:23,349
opposite that's almost the exact same

1387
01:13:20,079 --> 01:13:26,590
thing I say here's the name that's in

1388
01:13:23,350 --> 01:13:29,050
utf-8 I then need to compute how much

1389
01:13:26,590 --> 01:13:30,940
I'm gonna need I only need two because

1390
01:13:29,050 --> 01:13:33,250
if I'm going to utf-16 I know that any

1391
01:13:30,939 --> 01:13:37,689
individual utf-8 character can at most

1392
01:13:33,250 --> 01:13:39,640
expand to two utf-16 characters but

1393
01:13:37,689 --> 01:13:42,189
really it could probably only expand to

1394
01:13:39,640 --> 01:13:44,470
one but that's a separate issue so

1395
01:13:42,189 --> 01:13:53,849
obviously I don't need more than that I

1396
01:13:44,470 --> 01:13:53,850
can create this result here as a wkt

1397
01:13:54,199 --> 01:14:00,420
right I can do the push size exactly the

1398
01:13:59,369 --> 01:14:04,289
same way that I was doing it before

1399
01:14:00,420 --> 01:14:07,350
here's my name storage and I can Nell

1400
01:14:04,289 --> 01:14:09,479
terminate it if I want to although I

1401
01:14:07,350 --> 01:14:11,579
don't know that I necessarily do but I

1402
01:14:09,479 --> 01:14:13,949
certainly can and so I do the push size

1403
01:14:11,579 --> 01:14:16,829
here I would just need an extra two for

1404
01:14:13,949 --> 01:14:18,149
the null terminator right and that's

1405
01:14:16,829 --> 01:14:25,439
what would happen here

1406
01:14:18,149 --> 01:14:27,479
let me also do base name - just name and

1407
01:14:25,439 --> 01:14:32,939
so here we just do multibyte - white

1408
01:14:27,479 --> 01:14:35,129
multi flight - wide care and I believe

1409
01:14:32,939 --> 01:14:38,009
we can just swap the two of these also

1410
01:14:35,130 --> 01:14:42,690
this here info name is supposed to

1411
01:14:38,010 --> 01:14:45,480
adjust the result right I think we could

1412
01:14:42,689 --> 01:14:52,429
also say that name storage should be

1413
01:14:45,479 --> 01:14:57,089
results storage right and this is result

1414
01:14:52,430 --> 01:14:59,610
size that makes sense

1415
01:14:57,090 --> 01:15:00,779
that seems possibly more like what we

1416
01:14:59,609 --> 01:15:02,460
want

1417
01:15:00,779 --> 01:15:05,729
so I mean here we then have the same

1418
01:15:02,460 --> 01:15:11,819
thing and I'm gonna put name storage -

1419
01:15:05,729 --> 01:15:17,609
result storage here as well and this is

1420
01:15:11,819 --> 01:15:19,799
result size so if we do multi-byte -

1421
01:15:17,609 --> 01:15:26,670
wide care what we need to do here is

1422
01:15:19,800 --> 01:15:30,720
pass in the name begin name sighs I

1423
01:15:26,670 --> 01:15:35,119
don't remember the actual format for

1424
01:15:30,720 --> 01:15:35,119
this so I'm gonna grab it from MSDN

1425
01:15:39,550 --> 01:15:44,630
see here so we need the code page and

1426
01:15:42,349 --> 01:15:47,900
the code page should be the same right

1427
01:15:44,630 --> 01:15:49,609
we need the flags and the flags should

1428
01:15:47,899 --> 01:15:52,638
also be the same which is that I don't

1429
01:15:49,609 --> 01:15:54,408
think we care about any of that so for

1430
01:15:52,639 --> 01:15:56,150
the most part that's a identical

1431
01:15:54,408 --> 01:15:59,559
we need the multi byte string and its

1432
01:15:56,149 --> 01:15:59,559
length so

1433
01:16:08,748 --> 01:16:15,978
yep and yep

1434
01:16:12,609 --> 01:16:19,460
so the multi byte string and the wide

1435
01:16:15,979 --> 01:16:23,059
string go in the am I reading that right

1436
01:16:19,460 --> 01:16:33,948
the multi byte string in this case is

1437
01:16:23,059 --> 01:16:36,469
the result so the result comes first no

1438
01:16:33,948 --> 01:16:38,509
no I'm sorry that's right

1439
01:16:36,469 --> 01:16:39,889
so the multi byte string comes second

1440
01:16:38,510 --> 01:16:42,909
and that's the result so that's right

1441
01:16:39,889 --> 01:16:45,260
which is what we want and there's no

1442
01:16:42,908 --> 01:16:46,759
additional trailing stuff here right but

1443
01:16:45,260 --> 01:16:48,619
this is the result in the result storage

1444
01:16:46,760 --> 01:16:52,670
which is what we expect and that all

1445
01:16:48,618 --> 01:16:54,768
looks fine right so now we can convert

1446
01:16:52,670 --> 01:16:59,719
in either direction which is what we

1447
01:16:54,769 --> 01:17:01,909
wanted and all I really need to know now

1448
01:16:59,719 --> 01:17:04,038
is where you want the memory to go and

1449
01:17:01,908 --> 01:17:09,679
so that can actually be something that

1450
01:17:04,038 --> 01:17:10,939
you just pass in and I don't really care

1451
01:17:09,679 --> 01:17:12,949
where you get it from

1452
01:17:10,939 --> 01:17:19,460
and so people here you know they'll just

1453
01:17:12,948 --> 01:17:20,779
say well it goes with the file group but

1454
01:17:19,460 --> 01:17:22,849
if you were gonna do something else with

1455
01:17:20,779 --> 01:17:29,389
it then you do something else with it

1456
01:17:22,849 --> 01:17:35,690
and it's not gonna affect anybody so

1457
01:17:29,389 --> 01:17:37,880
that seems good yeah all right so here

1458
01:17:35,689 --> 01:17:41,960
where we've got name begin and name size

1459
01:17:37,880 --> 01:17:44,359
it's really just named in both cases and

1460
01:17:41,960 --> 01:17:47,569
I think most of that all looks fine as

1461
01:17:44,359 --> 01:17:53,839
well just see what other might what my

1462
01:17:47,569 --> 01:17:56,840
other errors aren't here don't ask me

1463
01:17:53,840 --> 01:17:58,670
why I did what I did right there didn't

1464
01:17:56,840 --> 01:18:01,760
mean to do that

1465
01:17:58,670 --> 01:18:07,538
and here are results storage the stupa

1466
01:18:01,760 --> 01:18:09,889
size this is has to do one of these oops

1467
01:18:07,538 --> 01:18:14,538
because it's a W care T that's coming

1468
01:18:09,889 --> 01:18:17,599
out of that all right and let's see ok

1469
01:18:14,538 --> 01:18:20,050
so don't care about that I do care about

1470
01:18:17,599 --> 01:18:20,050
this

1471
01:18:20,880 --> 01:18:27,850
this one wants to be utf-16 to utf-8

1472
01:18:24,930 --> 01:18:29,890
right um and you know what I should use

1473
01:18:27,850 --> 01:18:36,460
a better name you seem for this I should

1474
01:18:29,890 --> 01:18:43,090
do utf-8 from utf-16 I like from

1475
01:18:36,460 --> 01:18:44,859
phrasing better because you say which

1476
01:18:43,090 --> 01:18:46,300
thing you actually want on the left hand

1477
01:18:44,859 --> 01:18:47,920
side and on the right hand side so it

1478
01:18:46,300 --> 01:18:50,230
like lines up better with the way the

1479
01:18:47,920 --> 01:18:54,960
text actually goes so here it's like I

1480
01:18:50,229 --> 01:19:02,619
want a utf-8 I'm giving you utf-16 right

1481
01:18:54,960 --> 01:19:06,060
and off I go yeah so that seems good I

1482
01:19:02,619 --> 01:19:12,729
don't have any real complaints there and

1483
01:19:06,060 --> 01:19:15,730
the stem science stuff like I said now

1484
01:19:12,729 --> 01:19:18,309
now that that's sort of handled that way

1485
01:19:15,729 --> 01:19:20,139
I think pulling this out was not really

1486
01:19:18,310 --> 01:19:22,570
that necessary right so I think I just

1487
01:19:20,140 --> 01:19:24,520
aired there in thinking because really

1488
01:19:22,569 --> 01:19:27,460
all I needed was these two functions I

1489
01:19:24,520 --> 01:19:29,950
didn't really need this thing to be made

1490
01:19:27,460 --> 01:19:32,529
generic for really any particular

1491
01:19:29,949 --> 01:19:37,210
purpose I could pull this one piece of

1492
01:19:32,529 --> 01:19:40,719
it out where you create one of these

1493
01:19:37,210 --> 01:19:44,920
things and it does the conversion of

1494
01:19:40,720 --> 01:19:47,230
this stuff for you maybe will do that

1495
01:19:44,920 --> 01:19:52,270
but all the rest of this isn't actually

1496
01:19:47,229 --> 01:19:53,949
shared and so I don't know I I don't

1497
01:19:52,270 --> 01:19:57,460
know if that's really what we want to do

1498
01:19:53,949 --> 01:19:58,899
there so hard to say right um so what

1499
01:19:57,460 --> 01:20:01,569
I'm gonna do now is I'm just gonna grab

1500
01:19:58,899 --> 01:20:03,819
this and I'm gonna reinsert it so I'll

1501
01:20:01,569 --> 01:20:06,569
say look that was the mistake forget

1502
01:20:03,819 --> 01:20:09,039
about it pretend I never said that

1503
01:20:06,569 --> 01:20:11,949
erase this video so people can't tell

1504
01:20:09,039 --> 01:20:14,739
that I that I did it right just erase

1505
01:20:11,949 --> 01:20:18,699
all traces of it just you know it's just

1506
01:20:14,739 --> 01:20:21,609
it's gone uh and so what I want to do

1507
01:20:18,699 --> 01:20:24,960
here is say oops that result first file

1508
01:20:21,609 --> 01:20:27,699
info there and up here I want to say

1509
01:20:24,960 --> 01:20:30,869
result first file info and here I want

1510
01:20:27,699 --> 01:20:30,869
to say result file count

1511
01:20:31,560 --> 01:20:40,130
and then just lift that do what it was

1512
01:20:33,989 --> 01:20:43,739
doing before right and that seems good

1513
01:20:40,130 --> 01:20:47,900
so now if I take a look at this yeah

1514
01:20:43,739 --> 01:20:47,899
worth what's the stem sighs nonsense

1515
01:20:49,970 --> 01:20:53,570
what are you complaining about

1516
01:20:58,039 --> 01:21:04,949
okay so what I want to do now and

1517
01:21:01,979 --> 01:21:06,719
there's our result something here win

1518
01:21:04,949 --> 01:21:09,510
through to get found from rock-hard this

1519
01:21:06,720 --> 01:21:11,220
is gone so the only thing that I might

1520
01:21:09,510 --> 01:21:14,489
want to do now is this part that puts a

1521
01:21:11,220 --> 01:21:18,150
platformer file info on on the sort of

1522
01:21:14,489 --> 01:21:21,779
stack stack some up here that's the only

1523
01:21:18,149 --> 01:21:25,589
thing that we might really want to have

1524
01:21:21,779 --> 01:21:27,149
at there now first file info if you look

1525
01:21:25,590 --> 01:21:29,940
at it I don't know why this is being

1526
01:21:27,149 --> 01:21:33,119
done so far away I feel like it would be

1527
01:21:29,939 --> 01:21:36,359
fine to link it in early or put another

1528
01:21:33,119 --> 01:21:38,849
way link it in late so meaning the info

1529
01:21:36,359 --> 01:21:42,689
structure here as you can see it doesn't

1530
01:21:38,850 --> 01:21:45,960
really get it's just base name that ever

1531
01:21:42,689 --> 01:21:48,029
actually base name and platform that get

1532
01:21:45,960 --> 01:21:50,100
mucked with there so another way to look

1533
01:21:48,029 --> 01:21:55,529
at it would be maybe this linkage can

1534
01:21:50,100 --> 01:21:57,870
happen down here right and so at that

1535
01:21:55,529 --> 01:22:00,329
point all I wanted to say was you know

1536
01:21:57,869 --> 01:22:04,140
okay so if we're I mean you know what I

1537
01:22:00,329 --> 01:22:07,109
mean unless this isn't multi-threaded so

1538
01:22:04,140 --> 01:22:09,930
really again even this is fine too right

1539
01:22:07,109 --> 01:22:12,750
either way I think it's fine so if I do

1540
01:22:09,930 --> 01:22:14,850
that then I think what I could do is say

1541
01:22:12,750 --> 01:22:16,500
this part of the code which I do want to

1542
01:22:14,850 --> 01:22:18,120
be sort of similar maybe I can make a

1543
01:22:16,500 --> 01:22:19,409
way of making that shared even though

1544
01:22:18,119 --> 01:22:23,399
it's gonna be a little bit tricky for

1545
01:22:19,409 --> 01:22:24,869
some reasons I'll show in a second so

1546
01:22:23,399 --> 01:22:26,369
what I want to do is share this because

1547
01:22:24,869 --> 01:22:29,819
effectively what's gonna happen in this

1548
01:22:26,369 --> 01:22:32,309
code down here right is I want to do win

1549
01:22:29,819 --> 01:22:34,469
3 to get file by path and I need to

1550
01:22:32,310 --> 01:22:35,760
build up this path that I'm gonna you

1551
01:22:34,470 --> 01:22:41,490
know I've got this path I got to convert

1552
01:22:35,760 --> 01:22:44,489
it and then I have to grab the file

1553
01:22:41,489 --> 01:22:46,019
attributes of that thing so if I want

1554
01:22:44,489 --> 01:22:47,579
- I don't actually have to get a handle

1555
01:22:46,020 --> 01:22:50,310
with a file to get the file attributes I

1556
01:22:47,579 --> 01:22:57,750
can get them directly by just calling

1557
01:22:50,310 --> 01:22:59,039
get file attributes e^x on the file so

1558
01:22:57,750 --> 01:23:01,979
you can see here that I just need to

1559
01:22:59,039 --> 01:23:04,500
pass a file name and then a file

1560
01:23:01,979 --> 01:23:06,659
attribute data structure will magically

1561
01:23:04,500 --> 01:23:09,060
come back from me which actually has all

1562
01:23:06,659 --> 01:23:12,599
the stuff that I need right I need that

1563
01:23:09,060 --> 01:23:16,710
and I need that and they're all there so

1564
01:23:12,600 --> 01:23:21,390
if I want to I can have a win32 file

1565
01:23:16,710 --> 01:23:22,829
attribute data structure it doesn't have

1566
01:23:21,390 --> 01:23:25,320
any strings in it so it shouldn't really

1567
01:23:22,829 --> 01:23:28,470
be a W or not it should just be win32

1568
01:23:25,319 --> 01:23:30,389
file attribute data and I can do a file

1569
01:23:28,470 --> 01:23:32,070
data here then what I can do is say

1570
01:23:30,390 --> 01:23:34,880
watch you and I maybe I'll clear it

1571
01:23:32,069 --> 01:23:37,229
because you know i'm saucy like that

1572
01:23:34,880 --> 01:23:40,350
then I'll say look watch you give me

1573
01:23:37,229 --> 01:23:43,859
that information get Coop's file

1574
01:23:40,350 --> 01:23:46,220
attributes e^x looks like that's already

1575
01:23:43,859 --> 01:23:46,219
in here

1576
01:23:56,269 --> 01:24:01,369
yeah so we're already using that to get

1577
01:23:58,609 --> 01:24:02,689
the the right time there right so you

1578
01:24:01,368 --> 01:24:07,279
can actually see us calling it right

1579
01:24:02,689 --> 01:24:10,098
here um so we want to basically make

1580
01:24:07,279 --> 01:24:11,689
that call this is using a Cara start

1581
01:24:10,099 --> 01:24:15,349
file name so this is actually an a style

1582
01:24:11,689 --> 01:24:18,799
call meaning that's actually doing this

1583
01:24:15,349 --> 01:24:21,828
right why we didn't do that I don't know

1584
01:24:18,800 --> 01:24:23,510
those are both that but in this case

1585
01:24:21,828 --> 01:24:27,710
since we're supporting the wide care

1586
01:24:23,510 --> 01:24:29,329
stuff in terms of being able to you know

1587
01:24:27,710 --> 01:24:31,849
people want to name their files with you

1588
01:24:29,328 --> 01:24:33,799
know kanji in them or something right so

1589
01:24:31,849 --> 01:24:36,949
if we want to do that here what we

1590
01:24:33,800 --> 01:24:39,650
called git file attributes px what we

1591
01:24:36,948 --> 01:24:44,058
want to do is say look give us back this

1592
01:24:39,649 --> 01:24:45,948
this you know find data right and I

1593
01:24:44,059 --> 01:24:47,239
guess like that's one reason we wouldn't

1594
01:24:45,948 --> 01:24:49,609
have to clear it we could just say look

1595
01:24:47,238 --> 01:24:51,348
if this fails it fails what we want to

1596
01:24:49,609 --> 01:24:54,920
do here is pass a filename that's wide

1597
01:24:51,349 --> 01:24:58,279
so this is the this is the like path 16

1598
01:24:54,920 --> 01:24:59,960
right path that's and utf-16 and then we

1599
01:24:58,279 --> 01:25:01,279
can get the data out of it here and

1600
01:24:59,960 --> 01:25:05,328
figure out what we're gonna do with it

1601
01:25:01,279 --> 01:25:08,448
at that point okay so we know we have a

1602
01:25:05,328 --> 01:25:11,599
platform filing for results like so I

1603
01:25:08,448 --> 01:25:12,859
know I've got to return that and so the

1604
01:25:11,599 --> 01:25:15,050
question is how do I make one of those

1605
01:25:12,859 --> 01:25:22,518
here and furthermore the question is

1606
01:25:15,050 --> 01:25:25,279
where do I get this from now one thing

1607
01:25:22,519 --> 01:25:29,869
that's a little bit tricky in this case

1608
01:25:25,279 --> 01:25:32,118
right because I know I can do this if I

1609
01:25:29,868 --> 01:25:34,460
just pass the path here if the problem

1610
01:25:32,118 --> 01:25:36,439
is that path is going to be relative to

1611
01:25:34,460 --> 01:25:37,969
a base directory and those base

1612
01:25:36,439 --> 01:25:39,799
directories are sort of hard-coded

1613
01:25:37,969 --> 01:25:42,498
things that we just made is rules right

1614
01:25:39,800 --> 01:25:45,889
and we probably want to keep doing that

1615
01:25:42,498 --> 01:25:48,550
so meaning this data here like we

1616
01:25:45,889 --> 01:25:51,260
probably want that hard-coded however

1617
01:25:48,550 --> 01:25:53,690
you might not want it hard-coded here

1618
01:25:51,260 --> 01:25:56,360
maybe that lives a little further up so

1619
01:25:53,689 --> 01:25:59,689
possibly really this actually is exactly

1620
01:25:56,359 --> 01:26:05,558
that so if we add this in here and we

1621
01:25:59,689 --> 01:26:08,538
say that the win32 file group memory

1622
01:26:05,559 --> 01:26:09,869
like so is used to convert this thing to

1623
01:26:08,538 --> 01:26:12,090
pass 16 we

1624
01:26:09,868 --> 01:26:14,819
asked for that past 16 and we you know

1625
01:26:12,090 --> 01:26:16,708
hopefully get it right if we get it all

1626
01:26:14,819 --> 01:26:19,139
we need to do now is create one of these

1627
01:26:16,708 --> 01:26:21,599
platform file infos and we know exactly

1628
01:26:19,139 --> 01:26:23,099
how to do it it's this but the question

1629
01:26:21,599 --> 01:26:26,369
is do we want this to be a little bit

1630
01:26:23,099 --> 01:26:27,538
more systemic right because you can see

1631
01:26:26,368 --> 01:26:30,238
this stuff here would be sort of

1632
01:26:27,538 --> 01:26:34,408
duplicated the problem that we have is

1633
01:26:30,238 --> 01:26:43,468
that this right is not exactly the same

1634
01:26:34,408 --> 01:26:45,859
structure as this now you can see that

1635
01:26:43,469 --> 01:26:49,229
they're basically exactly the same and

1636
01:26:45,859 --> 01:26:51,958
you would have hoped that Windows would

1637
01:26:49,229 --> 01:26:54,289
have just used them the same structure

1638
01:26:51,958 --> 01:26:57,658
for the same thing right because they're

1639
01:26:54,288 --> 01:27:00,029
exactly the same except for this really

1640
01:26:57,658 --> 01:27:03,918
and you could have just left that field

1641
01:27:00,029 --> 01:27:06,509
blank right better yet you could have

1642
01:27:03,918 --> 01:27:09,898
kept it this way if you wanted to but

1643
01:27:06,510 --> 01:27:11,939
included this in this so that this

1644
01:27:09,899 --> 01:27:15,030
struct is just in here so instead of

1645
01:27:11,939 --> 01:27:17,699
these you acts just have that now we

1646
01:27:15,029 --> 01:27:21,268
could be super Squinkie right we could

1647
01:27:17,698 --> 01:27:23,128
be Squinkie squared and say because i

1648
01:27:21,269 --> 01:27:24,929
happen to know this is a D word file

1649
01:27:23,128 --> 01:27:27,840
time file time file time to you word e

1650
01:27:24,929 --> 01:27:31,769
word that happen to be exactly the same

1651
01:27:27,840 --> 01:27:35,069
ones I'll just pretend it's one of these

1652
01:27:31,769 --> 01:27:40,918
even though it's not now that's super

1653
01:27:35,069 --> 01:27:42,948
squeaky but you know what I might do

1654
01:27:40,918 --> 01:27:42,948
that

1655
01:27:43,368 --> 01:27:48,598
why can I do that because Windows isn't

1656
01:27:46,078 --> 01:27:51,238
really allowed to change we link to it

1657
01:27:48,599 --> 01:27:59,729
and it has to provide us those types

1658
01:27:51,238 --> 01:28:04,828
back right so it's like well if I wanted

1659
01:27:59,729 --> 01:28:06,119
to support a future compile that change

1660
01:28:04,828 --> 01:28:08,219
the definition of these in their header

1661
01:28:06,118 --> 01:28:10,469
and link to some new set of Windows

1662
01:28:08,219 --> 01:28:19,038
libraries this would be a really bad

1663
01:28:10,469 --> 01:28:19,038
idea right but if I never do that

1664
01:28:19,829 --> 01:28:34,559
I don't know oops so we could just do

1665
01:28:31,170 --> 01:28:37,140
that if we were super Squinkie and just

1666
01:28:34,560 --> 01:28:40,470
want to give you know big old middle

1667
01:28:37,140 --> 01:28:44,490
finger to Windows which you know I do

1668
01:28:40,470 --> 01:28:47,970
want to do most days and in fact I can

1669
01:28:44,489 --> 01:28:50,760
also do this here I can just take all of

1670
01:28:47,970 --> 01:28:53,250
this stuff this whole bit here and say

1671
01:28:50,760 --> 01:28:57,900
that all of that is gonna happen in one

1672
01:28:53,250 --> 01:29:00,420
little chunk there come to me and I can

1673
01:28:57,899 --> 01:29:16,139
take the foul drip for that summer in

1674
01:29:00,420 --> 01:29:19,170
here whoops that's enough code I wanted

1675
01:29:16,140 --> 01:29:22,860
so I can just take that and yeah I can

1676
01:29:19,170 --> 01:29:34,159
just go from there I think that just

1677
01:29:22,859 --> 01:29:37,670
works so we get the memory here and we

1678
01:29:34,159 --> 01:29:37,670
link it in here

1679
01:29:43,559 --> 01:29:49,309
and everything else just needs that fine

1680
01:29:46,469 --> 01:29:53,960
data so what we can do here is say look

1681
01:29:49,309 --> 01:29:53,960
this is gonna be the file attribute data

1682
01:29:56,359 --> 01:30:02,729
we're gonna use the pointers off of this

1683
01:29:58,618 --> 01:30:05,069
and we're just gonna be super naughty

1684
01:30:02,729 --> 01:30:09,419
like that's just what we're gonna do and

1685
01:30:05,069 --> 01:30:12,779
so here we'll say allocates or sorry I

1686
01:30:09,420 --> 01:30:15,770
went through to allocate file info we

1687
01:30:12,779 --> 01:30:19,828
will pass the file oops

1688
01:30:15,770 --> 01:30:22,199
pass the file group and we will pass the

1689
01:30:19,828 --> 01:30:27,569
find data and we will just straight-up

1690
01:30:22,198 --> 01:30:30,029
pretend that it is a win32 file

1691
01:30:27,569 --> 01:30:39,319
attribute data pointer even hope it is

1692
01:30:30,029 --> 01:30:39,319
not so let's see

1693
01:30:42,109 --> 01:31:03,389
there is a place mistake that I made

1694
01:30:47,909 --> 01:31:05,099
there otherwise we're fine go is that

1695
01:31:03,390 --> 01:31:16,789
really true file group is an undeclared

1696
01:31:05,100 --> 01:31:16,789
identifier that is true it is result

1697
01:31:20,000 --> 01:31:25,079
talk she doesn't take two parameters

1698
01:31:22,529 --> 01:31:28,349
that's true we need to get the string

1699
01:31:25,079 --> 01:31:34,680
length of this because we take us it

1700
01:31:28,350 --> 01:31:37,100
takes a size actually and then I think

1701
01:31:34,680 --> 01:31:37,100
we're good to go

1702
01:31:38,510 --> 01:31:55,230
that allocates the file info right

1703
01:31:49,909 --> 01:31:56,729
um so that's actually it as I took a

1704
01:31:55,229 --> 01:31:58,289
rather screws route because I didn't I

1705
01:31:56,729 --> 01:31:59,459
was kind of thinking we would need more

1706
01:31:58,289 --> 01:32:00,689
from the iteration routine that we

1707
01:31:59,460 --> 01:32:04,109
actually did but we didn't we only

1708
01:32:00,689 --> 01:32:08,039
really need this part and that should

1709
01:32:04,109 --> 01:32:11,339
allow us to get files either way which

1710
01:32:08,039 --> 01:32:18,649
is good so what we want what did I do

1711
01:32:11,340 --> 01:32:18,650
wrong there that's supposed to be that

1712
01:32:18,948 --> 01:32:26,219
all right so I think that's good and now

1713
01:32:24,180 --> 01:32:27,780
what we want to do is when we're doing

1714
01:32:26,219 --> 01:32:32,520
our parsing we're just going to call

1715
01:32:27,779 --> 01:32:35,460
this function and we're gonna have to

1716
01:32:32,520 --> 01:32:40,920
basically pass in you know the path that

1717
01:32:35,460 --> 01:32:42,439
we want to use to find it and then it'll

1718
01:32:40,920 --> 01:32:46,469
take care of the rest

1719
01:32:42,439 --> 01:32:49,079
so what we can do there is in here when

1720
01:32:46,469 --> 01:32:50,850
we do import changed assets what we're

1721
01:32:49,079 --> 01:32:54,890
actually going to do now is we're gonna

1722
01:32:50,850 --> 01:32:58,050
sort of change that to be the parse hht

1723
01:32:54,890 --> 01:32:59,850
so I'm going to take import changed add

1724
01:32:58,050 --> 01:33:03,329
sets I'm going to drop it down below

1725
01:32:59,850 --> 01:33:10,489
that and I'm gonna sort of nerf the code

1726
01:33:03,329 --> 01:33:10,488
a little bit at the moment right like so

1727
01:33:10,909 --> 01:33:15,779
this should recompile is fine I think

1728
01:33:14,100 --> 01:33:18,390
and let's make sure that we didn't

1729
01:33:15,779 --> 01:33:20,519
introduce too many bugs in the iteration

1730
01:33:18,390 --> 01:33:24,869
code because let's see if we can still

1731
01:33:20,520 --> 01:33:28,050
find our HHA files here when we actually

1732
01:33:24,869 --> 01:33:32,488
run win through new handmade so if I run

1733
01:33:28,050 --> 01:33:34,680
win32 handmade here and we go it's like

1734
01:33:32,488 --> 01:33:37,649
can we find the H yeah we can so we're

1735
01:33:34,680 --> 01:33:40,680
good right and so I just want to make

1736
01:33:37,649 --> 01:33:43,079
sure that iteration still worked okay so

1737
01:33:40,680 --> 01:33:45,329
now you can kind of see why I like this

1738
01:33:43,079 --> 01:33:48,029
idea better because it sort of starts to

1739
01:33:45,329 --> 01:33:50,819
solve some problems for us in the old

1740
01:33:48,029 --> 01:33:52,649
days we had no idea where stuff went we

1741
01:33:50,819 --> 01:33:55,769
just had to make this concept of a

1742
01:33:52,649 --> 01:33:57,839
default local HHA file and that default

1743
01:33:55,770 --> 01:34:01,980
local HHA file was like where stuff was

1744
01:33:57,840 --> 01:34:03,270
supposed to go but now what we can do is

1745
01:34:01,979 --> 01:34:05,699
say action

1746
01:34:03,270 --> 01:34:09,720
we know exactly what HHA is go with

1747
01:34:05,699 --> 01:34:12,829
which imported things because the tags

1748
01:34:09,720 --> 01:34:16,829
file tells us so this thing right here

1749
01:34:12,829 --> 01:34:18,449
has a name it's called base game text so

1750
01:34:16,829 --> 01:34:20,640
we know that there should be a base game

1751
01:34:18,449 --> 01:34:24,300
that HHA that all of the things from

1752
01:34:20,640 --> 01:34:28,110
this get packed into right and that

1753
01:34:24,300 --> 01:34:29,159
helps us understand the relationship

1754
01:34:28,109 --> 01:34:31,380
between these two things

1755
01:34:29,159 --> 01:34:33,659
now if we want to we can even take it

1756
01:34:31,380 --> 01:34:42,569
one step further we could actually do

1757
01:34:33,659 --> 01:34:46,949
this we could say that we're gonna

1758
01:34:42,569 --> 01:34:49,469
specify exactly where it goes and that

1759
01:34:46,949 --> 01:34:52,139
way we can have multiple files that

1760
01:34:49,470 --> 01:34:54,390
target different hhas or the same HHA

1761
01:34:52,140 --> 01:34:57,090
and stuff like that so maybe that's a

1762
01:34:54,390 --> 01:35:02,940
good idea too and then if I go over

1763
01:34:57,090 --> 01:35:05,640
there to our HH t parser we've got this

1764
01:35:02,939 --> 01:35:07,829
we can say like hey yeah there's this

1765
01:35:05,640 --> 01:35:10,260
other fields here that's just like the

1766
01:35:07,829 --> 01:35:13,559
age of J right and it tells us where if

1767
01:35:10,260 --> 01:35:15,480
that goes you know what I mean

1768
01:35:13,560 --> 01:35:17,520
so that's another nice feature we could

1769
01:35:15,479 --> 01:35:19,169
add where we just say what the target

1770
01:35:17,520 --> 01:35:22,560
isn't that way if we want everything to

1771
01:35:19,170 --> 01:35:23,399
pack into a single HHA we just can or we

1772
01:35:22,560 --> 01:35:25,590
can not do that

1773
01:35:23,399 --> 01:35:27,329
and later specify it or we can also have

1774
01:35:25,590 --> 01:35:29,340
one text file that has everything in it

1775
01:35:27,329 --> 01:35:35,069
even though it generates multiple hhas

1776
01:35:29,340 --> 01:35:38,460
by changing this periodically so that

1777
01:35:35,069 --> 01:35:41,460
seems good like all that seems good to

1778
01:35:38,460 --> 01:35:44,670
me and I think that's what we want so

1779
01:35:41,460 --> 01:35:46,980
now what I can do is say alright inside

1780
01:35:44,670 --> 01:35:50,369
here where we're doing this loop and we

1781
01:35:46,979 --> 01:35:53,399
parse everything I can just say yeah

1782
01:35:50,369 --> 01:35:55,880
let's let's set like a token for each of

1783
01:35:53,399 --> 01:35:55,879
these things

1784
01:36:10,630 --> 01:36:15,680
like so you know this sort of thing I

1785
01:36:14,060 --> 01:36:18,289
want to be able to do something like

1786
01:36:15,680 --> 01:36:21,170
this and then when I do the parse tags

1787
01:36:18,289 --> 01:36:23,090
list right I would also be able to do

1788
01:36:21,170 --> 01:36:24,529
something where I'm allowed to be honest

1789
01:36:23,090 --> 01:36:25,819
I'm not really sure exactly what we want

1790
01:36:24,529 --> 01:36:29,449
to do with that parse taxes but

1791
01:36:25,819 --> 01:36:30,469
something right um so what I want to do

1792
01:36:29,449 --> 01:36:33,199
here is say okay

1793
01:36:30,470 --> 01:36:37,039
what about like having this sort of

1794
01:36:33,199 --> 01:36:39,229
thing be something I can keep around so

1795
01:36:37,039 --> 01:36:42,769
it's easy for me to say when I'm parsing

1796
01:36:39,229 --> 01:36:44,689
the default one store any of the results

1797
01:36:42,770 --> 01:36:47,630
I get back as being things that will

1798
01:36:44,689 --> 01:36:49,339
permanently be used to set future things

1799
01:36:47,630 --> 01:36:53,420
when they want to know what the author

1800
01:36:49,340 --> 01:36:54,800
is of something right that should be

1801
01:36:53,420 --> 01:36:56,779
pretty straightforward to do we just

1802
01:36:54,800 --> 01:37:02,210
need something here that's like struct

1803
01:36:56,779 --> 01:37:07,489
like hht fields right and this just has

1804
01:37:02,210 --> 01:37:09,800
what those fields are in it like so we

1805
01:37:07,489 --> 01:37:13,039
know that the author is just gonna be

1806
01:37:09,800 --> 01:37:16,970
one string so we know that there's just

1807
01:37:13,039 --> 01:37:20,239
like one of each of these right because

1808
01:37:16,970 --> 01:37:23,360
those are basic but what we don't know

1809
01:37:20,239 --> 01:37:25,519
is how we would store the tags and maybe

1810
01:37:23,359 --> 01:37:29,179
tags are not something that you can

1811
01:37:25,520 --> 01:37:31,940
apply on Moss like that I don't know

1812
01:37:29,180 --> 01:37:33,950
again kind of hard to say so I'm gonna

1813
01:37:31,939 --> 01:37:36,919
keep it simple for myself the moment and

1814
01:37:33,949 --> 01:37:40,579
not try to answer that question but what

1815
01:37:36,920 --> 01:37:43,220
I want to do here right is say what

1816
01:37:40,579 --> 01:37:45,949
we're targeting so let's suppose I have

1817
01:37:43,220 --> 01:37:47,750
a default fields and I just start it by

1818
01:37:45,949 --> 01:37:50,510
not having anything in the default

1819
01:37:47,750 --> 01:37:53,479
fields then when we come through here

1820
01:37:50,510 --> 01:37:55,970
and I get a token to figure out like

1821
01:37:53,479 --> 01:37:58,189
what we're actually going to do like so

1822
01:37:55,970 --> 01:38:01,909
in here right and in fact I guess this

1823
01:37:58,189 --> 01:38:03,739
needs to be up a little further right so

1824
01:38:01,909 --> 01:38:06,559
when we parse a top-level block like

1825
01:38:03,739 --> 01:38:10,809
this what I need to do is probably say

1826
01:38:06,560 --> 01:38:10,810
all right here's the default fields

1827
01:38:12,710 --> 01:38:28,350
and furthermore I'm gonna have like my

1828
01:38:18,449 --> 01:38:29,670
fields right something like this and so

1829
01:38:28,350 --> 01:38:31,500
what I can do is say start off with

1830
01:38:29,670 --> 01:38:36,119
nothing for our fields if this is going

1831
01:38:31,500 --> 01:38:38,310
to be the default right then what I want

1832
01:38:36,119 --> 01:38:43,409
to do is I want to parse the fields and

1833
01:38:38,310 --> 01:38:50,039
set them and so I want to redo something

1834
01:38:43,409 --> 01:38:51,840
maybe more like this so what I want to

1835
01:38:50,039 --> 01:38:55,109
do now is say okay anything i parse

1836
01:38:51,840 --> 01:38:59,750
should should set the default fields

1837
01:38:55,109 --> 01:39:02,309
right otherwise if I find one of these

1838
01:38:59,750 --> 01:39:05,039
then what I want to do is assign the

1839
01:39:02,310 --> 01:39:12,150
default fields to my fields so I want to

1840
01:39:05,039 --> 01:39:14,399
do the opposite right like that then

1841
01:39:12,149 --> 01:39:15,960
when I come through here and I'm parsing

1842
01:39:14,399 --> 01:39:18,239
these things I can just say all right

1843
01:39:15,960 --> 01:39:21,869
now I'll override each of the fields

1844
01:39:18,239 --> 01:39:27,869
that I get I'm going to override them

1845
01:39:21,869 --> 01:39:30,779
with whatever I find here right so now

1846
01:39:27,869 --> 01:39:33,149
again with almost no change of the code

1847
01:39:30,779 --> 01:39:36,539
I just keep running defaults and it just

1848
01:39:33,149 --> 01:39:39,689
works right so each of these when I get

1849
01:39:36,539 --> 01:39:47,119
the string back I'm gonna sort of take

1850
01:39:39,689 --> 01:39:47,119
your the text from it like so

1851
01:39:48,600 --> 01:39:55,289
and that should do it now inside here

1852
01:39:51,238 --> 01:39:56,939
where I've got this tags Jimmy that is

1853
01:39:55,289 --> 01:39:58,649
not part of the fields at the moment

1854
01:39:56,939 --> 01:40:00,509
because we don't really know exactly how

1855
01:39:58,649 --> 01:40:02,969
those are getting parsed to real leave

1856
01:40:00,510 --> 01:40:05,820
that out for a moment everything else

1857
01:40:02,969 --> 01:40:07,948
currently now actually works so when we

1858
01:40:05,819 --> 01:40:09,389
parse one of these top-level blocks we

1859
01:40:07,948 --> 01:40:11,759
actually do know what we're doing with

1860
01:40:09,390 --> 01:40:13,739
them but now like we're gonna have to

1861
01:40:11,760 --> 01:40:16,469
actually well for lack of a better term

1862
01:40:13,738 --> 01:40:18,839
we actually have to do something with

1863
01:40:16,469 --> 01:40:23,670
them and actually make it happen

1864
01:40:18,840 --> 01:40:25,560
right so if we see tags here we're still

1865
01:40:23,670 --> 01:40:28,199
gonna do this parse tag list part

1866
01:40:25,560 --> 01:40:29,969
probably but if it's the default if

1867
01:40:28,198 --> 01:40:33,119
we're doing the default we throw them

1868
01:40:29,969 --> 01:40:33,899
away basically probably probably that's

1869
01:40:33,119 --> 01:40:35,519
what we do

1870
01:40:33,899 --> 01:40:37,019
I don't know again we have to think

1871
01:40:35,520 --> 01:40:38,790
about how we want to work with that

1872
01:40:37,020 --> 01:40:41,250
later but everything else would just

1873
01:40:38,789 --> 01:40:48,859
work so now let's think about what we

1874
01:40:41,250 --> 01:40:52,560
want to do as far as as far as actually

1875
01:40:48,859 --> 01:40:54,089
producing output from this how much time

1876
01:40:52,560 --> 01:40:57,690
left right I got what like 15 minutes um

1877
01:40:54,090 --> 01:40:58,890
um so if I come through here and look at

1878
01:40:57,689 --> 01:41:00,869
sort of what some of the other things

1879
01:40:58,890 --> 01:41:03,090
are that we're doing you can see that

1880
01:41:00,869 --> 01:41:07,859
I've got a bunch of like tag array stuff

1881
01:41:03,090 --> 01:41:09,300
when we do parse pieces here this is all

1882
01:41:07,859 --> 01:41:11,429
the stuff that we were doing before to

1883
01:41:09,300 --> 01:41:13,829
import things so we would produce like

1884
01:41:11,430 --> 01:41:15,630
an import type like multi tile or

1885
01:41:13,829 --> 01:41:17,539
whatever and we would have one of these

1886
01:41:15,630 --> 01:41:20,400
sort of tag arrays and stuff like this

1887
01:41:17,539 --> 01:41:23,069
and what you can see when we're looking

1888
01:41:20,399 --> 01:41:26,519
at this is since those tag arrays are

1889
01:41:23,069 --> 01:41:28,380
actually all the exact same we should be

1890
01:41:26,520 --> 01:41:36,020
able to just create them once and then

1891
01:41:28,380 --> 01:41:36,020
point at them right

1892
01:41:36,229 --> 01:41:39,839
that should be pretty straightforward

1893
01:41:38,010 --> 01:41:41,400
for us to do and so again it's really

1894
01:41:39,840 --> 01:41:44,340
just gonna be what we want to do with

1895
01:41:41,399 --> 01:41:46,049
the tags eventually there we can also if

1896
01:41:44,340 --> 01:41:47,940
you want to keep doing it exactly the

1897
01:41:46,050 --> 01:41:50,010
way we're doing it and just have

1898
01:41:47,939 --> 01:41:52,019
something that Reve Ector is based on a

1899
01:41:50,010 --> 01:41:56,270
type here like instead of doing the

1900
01:41:52,020 --> 01:42:03,440
strings are equal to part it just as a

1901
01:41:56,270 --> 01:42:03,440
jump like I don't know right hard to say

1902
01:42:17,809 --> 01:42:24,690
so I think when I I think what I'm

1903
01:42:20,969 --> 01:42:28,889
probably gonna say honestly is maybe

1904
01:42:24,689 --> 01:42:31,558
we'll just do the principle of like

1905
01:42:28,889 --> 01:42:35,130
least code change for lack of a better

1906
01:42:31,559 --> 01:42:42,300
term and we'll literally just call this

1907
01:42:35,130 --> 01:42:46,889
as directly as we can maybe because we

1908
01:42:42,300 --> 01:42:50,460
can do this really pretty directly if we

1909
01:42:46,889 --> 01:42:54,868
want to right and bear with me for a

1910
01:42:50,460 --> 01:42:58,349
second why explain what I mean so if we

1911
01:42:54,868 --> 01:43:01,109
just called parse pieces and instead of

1912
01:42:58,349 --> 01:43:09,230
passing in a file name we just actually

1913
01:43:01,109 --> 01:43:12,299
pass it the tag array and or pass it

1914
01:43:09,229 --> 01:43:15,598
break it into two pieces and do the tag

1915
01:43:12,300 --> 01:43:17,940
array part separately ourselves right we

1916
01:43:15,599 --> 01:43:26,819
can pretty much leverage like most of

1917
01:43:17,939 --> 01:43:29,399
the rest of this I think I mean I think

1918
01:43:26,819 --> 01:43:31,319
we just sort of can so instead of this

1919
01:43:29,399 --> 01:43:33,779
code right here like you can see the way

1920
01:43:31,319 --> 01:43:35,488
this is working instead of this part

1921
01:43:33,779 --> 01:43:39,210
right here where we do like block type

1922
01:43:35,488 --> 01:43:43,379
index and this sort of nonsense instead

1923
01:43:39,210 --> 01:43:46,260
of that what we could do instead is to

1924
01:43:43,380 --> 01:43:48,269
just actually use this exact code the

1925
01:43:46,260 --> 01:43:53,059
code that we're looking at right here to

1926
01:43:48,269 --> 01:43:53,059
actually do that that cracking

1927
01:43:55,630 --> 01:44:01,390
I'm not 100% sure about whether I like

1928
01:43:59,199 --> 01:44:03,099
that or not and the only difference is

1929
01:44:01,390 --> 01:44:07,539
to see how these always have like end

1930
01:44:03,100 --> 01:44:12,430
tags happening we just get rid of the

1931
01:44:07,539 --> 01:44:15,329
call to end tags like that's it

1932
01:44:12,430 --> 01:44:15,329
right

1933
01:44:22,090 --> 01:44:29,630
um so again I don't know how I really

1934
01:44:26,059 --> 01:44:36,139
feel about that in the grand scheme of

1935
01:44:29,630 --> 01:44:37,550
things like I don't know I I don't know

1936
01:44:36,139 --> 01:44:40,099
if I'm doing something stupid there but

1937
01:44:37,550 --> 01:44:43,010
it seems like it just works so I think

1938
01:44:40,099 --> 01:44:46,668
I'll just do it so if we look at what

1939
01:44:43,010 --> 01:44:51,079
happens here where we do this what I'd

1940
01:44:46,668 --> 01:44:54,859
rather do is just say like you know

1941
01:44:51,078 --> 01:44:57,288
parse pieces we're gonna call this we're

1942
01:44:54,859 --> 01:44:59,118
not gonna use this I'm gonna make sure

1943
01:44:57,288 --> 01:45:01,578
that all of the things that in are in

1944
01:44:59,118 --> 01:45:05,839
there actually for what we've got bodied

1945
01:45:01,578 --> 01:45:08,299
character right cover hands is head in

1946
01:45:05,840 --> 01:45:09,889
there yeah head was in there item

1947
01:45:08,300 --> 01:45:12,939
obstacles in plate right so they're all

1948
01:45:09,889 --> 01:45:16,309
in there and it would work right so

1949
01:45:12,939 --> 01:45:19,130
instead of using block type we just skip

1950
01:45:16,309 --> 01:45:21,708
that we don't do that we call parse

1951
01:45:19,130 --> 01:45:31,400
pieces parse pieces will return to us an

1952
01:45:21,708 --> 01:45:34,760
import type like so right and at the

1953
01:45:31,399 --> 01:45:39,348
moment we don't have import types for

1954
01:45:34,760 --> 01:45:41,659
like cover or or like item or plate or

1955
01:45:39,349 --> 01:45:43,309
stuff but we do actually know what these

1956
01:45:41,658 --> 01:45:44,598
are we just didn't create anything for

1957
01:45:43,309 --> 01:45:48,458
them so I'm just gonna stub them

1958
01:45:44,599 --> 01:45:48,458
temporarily and put it to do in here

1959
01:45:50,569 --> 01:45:56,840
and we know that like these do work like

1960
01:45:53,149 --> 01:45:58,998
this they're multi tile right we know

1961
01:45:56,840 --> 01:46:02,840
that this one is a single tile but it's

1962
01:45:58,998 --> 01:46:05,269
actually isn't they're like is there any

1963
01:46:02,840 --> 01:46:07,099
I don't remember there's like some other

1964
01:46:05,269 --> 01:46:12,349
type of thing that's like a single time

1965
01:46:07,099 --> 01:46:16,519
I guess we don't have to say if it's no

1966
01:46:12,349 --> 01:46:18,168
we do say I think of that so pleats I

1967
01:46:16,519 --> 01:46:19,729
think aren't limited and how big they

1968
01:46:18,168 --> 01:46:21,288
are something right so that I think

1969
01:46:19,729 --> 01:46:23,510
there's a difference in plates they

1970
01:46:21,288 --> 01:46:26,359
don't have to conform to like the 512 by

1971
01:46:23,510 --> 01:46:31,489
512 thing or whatever so a plate is its

1972
01:46:26,359 --> 01:46:34,489
own like kind of import that we do so if

1973
01:46:31,488 --> 01:46:36,979
we do this we'll get that back and

1974
01:46:34,489 --> 01:46:39,829
here we have like the unrecognized type

1975
01:46:36,979 --> 01:46:42,559
of import artwork problem that's fine

1976
01:46:39,829 --> 01:46:44,600
like I said we're gonna sort of look at

1977
01:46:42,560 --> 01:46:46,960
that in a little bit more detail in the

1978
01:46:44,600 --> 01:46:49,550
future how we want it to do those errors

1979
01:46:46,960 --> 01:46:50,779
but what we really can do actually you

1980
01:46:49,550 --> 01:46:55,039
know what we can do right here to say

1981
01:46:50,779 --> 01:46:58,639
look if the result comes back as import

1982
01:46:55,039 --> 01:46:59,569
type none then we can do the error on

1983
01:46:58,640 --> 01:47:04,670
the outside

1984
01:46:59,569 --> 01:47:08,329
so here in the asset list where we do

1985
01:47:04,670 --> 01:47:12,619
the parse hht top-level block when this

1986
01:47:08,329 --> 01:47:16,809
thing comes back we can just say if the

1987
01:47:12,619 --> 01:47:19,729
import type is none we've got an error

1988
01:47:16,810 --> 01:47:23,830
now we might want to do it a little bit

1989
01:47:19,729 --> 01:47:23,829
more like that and do the air down here

1990
01:47:28,029 --> 01:47:41,960
lock token is what that's called and

1991
01:47:39,529 --> 01:47:43,279
that way we know like hey we hit

1992
01:47:41,960 --> 01:47:44,510
something that someone said we were

1993
01:47:43,279 --> 01:47:45,859
supposed to import we don't know what it

1994
01:47:44,510 --> 01:47:47,480
is like it's not a block it's not an

1995
01:47:45,859 --> 01:47:49,099
item it's not a whatever right so like

1996
01:47:47,479 --> 01:47:51,469
we're just forget it we don't know

1997
01:47:49,100 --> 01:47:56,590
what's going on but assuming we do know

1998
01:47:51,470 --> 01:47:56,590
what's going on then this happens right

1999
01:47:59,289 --> 01:48:07,060
makes sense and furthermore I might go

2000
01:48:04,279 --> 01:48:10,009
ahead and and leverage this part up here

2001
01:48:07,060 --> 01:48:15,740
we could sort of stop talking about

2002
01:48:10,010 --> 01:48:18,050
sound necessarily I'm not sure how we

2003
01:48:15,739 --> 01:48:19,880
want to look at that but we could maybe

2004
01:48:18,050 --> 01:48:21,860
make this be more of like is it a

2005
01:48:19,880 --> 01:48:23,239
default block or not because we're gonna

2006
01:48:21,859 --> 01:48:24,979
do something differently depending on

2007
01:48:23,239 --> 01:48:27,829
which one it is right so we'll look at

2008
01:48:24,979 --> 01:48:29,629
that a little bit later so assuming that

2009
01:48:27,829 --> 01:48:32,539
we found one of these things when we

2010
01:48:29,630 --> 01:48:37,420
call parse pieces we need to pass it

2011
01:48:32,539 --> 01:48:37,420
some stuff we need to pass it this right

2012
01:48:38,079 --> 01:48:43,279
and we probably want to rejigger a few

2013
01:48:41,750 --> 01:48:47,300
of the things that are in here right

2014
01:48:43,279 --> 01:48:48,168
but mostly it's okay mostly this is all

2015
01:48:47,300 --> 01:48:50,779
fine

2016
01:48:48,168 --> 01:48:52,819
file name is the thing that really we

2017
01:48:50,779 --> 01:48:54,918
need to change the most because again

2018
01:48:52,819 --> 01:48:56,988
this tag stuff now we really don't want

2019
01:48:54,918 --> 01:49:02,118
it talking about that because we're

2020
01:48:56,988 --> 01:49:05,359
handling that lower down so we want to

2021
01:49:02,118 --> 01:49:08,598
stop passing this name at all all we

2022
01:49:05,359 --> 01:49:12,948
really want is just the block type text

2023
01:49:08,599 --> 01:49:16,489
right that's the only thing that we want

2024
01:49:12,948 --> 01:49:19,188
it to be doing and furthermore we could

2025
01:49:16,488 --> 01:49:24,698
make that be an explicit token so we

2026
01:49:19,189 --> 01:49:24,699
could say here that this is the you know

2027
01:49:24,788 --> 01:49:35,208
type token and here in we could just say

2028
01:49:29,059 --> 01:49:38,689
like token equals and that's how it will

2029
01:49:35,208 --> 01:49:42,828
check now there's a reason why I want to

2030
01:49:38,689 --> 01:49:46,010
do type token here the reason I want to

2031
01:49:42,828 --> 01:49:47,688
do type token is because if I am going

2032
01:49:46,010 --> 01:49:49,939
to output an error

2033
01:49:47,689 --> 01:49:54,530
I would like to output an error with the

2034
01:49:49,939 --> 01:49:58,820
actual ideally I'd like to output the

2035
01:49:54,529 --> 01:50:00,288
error with a marker that says here's in

2036
01:49:58,819 --> 01:50:02,148
the text stream where it came from right

2037
01:50:00,288 --> 01:50:04,969
because that will help with debugging

2038
01:50:02,149 --> 01:50:06,800
later on so I would want to do this and

2039
01:50:04,969 --> 01:50:08,418
if someone was gonna output an error for

2040
01:50:06,800 --> 01:50:09,769
some reason I want it to go there I

2041
01:50:08,418 --> 01:50:11,300
don't know that we're gonna need to

2042
01:50:09,769 --> 01:50:13,880
output any errors here hopefully the

2043
01:50:11,300 --> 01:50:18,769
answer is no but if the answer ends up

2044
01:50:13,880 --> 01:50:21,618
being yes that's okay all right so what

2045
01:50:18,769 --> 01:50:23,840
I don't want is to you know this tag

2046
01:50:21,618 --> 01:50:26,898
builder thing what I don't want is the

2047
01:50:23,840 --> 01:50:29,689
end tags to ever occur because if the

2048
01:50:26,899 --> 01:50:35,899
end tags ever occurs then I'm going to

2049
01:50:29,689 --> 01:50:38,119
end up in a situation where I I can't

2050
01:50:35,899 --> 01:50:41,119
put the other tags on that I wanted to

2051
01:50:38,118 --> 01:50:42,889
from my tag list right so that's the

2052
01:50:41,118 --> 01:50:46,398
real the part that we're really gonna

2053
01:50:42,889 --> 01:50:49,300
have to work at here to two-port as

2054
01:50:46,399 --> 01:50:52,249
we're sort of massaging this code right

2055
01:50:49,300 --> 01:50:57,699
so I'm gonna go through here oops and

2056
01:50:52,248 --> 01:50:59,658
just replace these real quick like so

2057
01:50:57,698 --> 01:51:00,948
but otherwise they're pretty much the

2058
01:50:59,658 --> 01:51:39,769
same

2059
01:51:00,948 --> 01:51:41,269
oh there we go okay so that allows us to

2060
01:51:39,770 --> 01:51:44,060
do all the checking we were doing before

2061
01:51:41,270 --> 01:51:46,190
and then really the problem like I said

2062
01:51:44,060 --> 01:51:50,600
is now we just have to see how we want

2063
01:51:46,189 --> 01:51:53,779
to do those keep those tags tag

2064
01:51:50,600 --> 01:51:56,570
applications working properly so I think

2065
01:51:53,779 --> 01:52:00,289
what I want to do is I want to have the

2066
01:51:56,569 --> 01:52:03,948
tag builder probably the begin call is

2067
01:52:00,289 --> 01:52:07,310
probably going to come outside so you

2068
01:52:03,948 --> 01:52:17,349
know I'd call that tag build out here

2069
01:52:07,310 --> 01:52:21,050
you know it'd be something like this and

2070
01:52:17,350 --> 01:52:23,900
then when I you know coming here and

2071
01:52:21,050 --> 01:52:26,900
we're trying to pass this stuff in I

2072
01:52:23,899 --> 01:52:28,969
would want to pass the tag builder in so

2073
01:52:26,899 --> 01:52:33,139
that the thing when it does parse pieces

2074
01:52:28,969 --> 01:52:35,149
it can just make all that tag stuff work

2075
01:52:33,140 --> 01:52:38,840
now if you take a look at what's

2076
01:52:35,149 --> 01:52:41,539
happening here with like tag basic

2077
01:52:38,840 --> 01:52:44,390
category and that stuff what I need to

2078
01:52:41,539 --> 01:52:46,340
be able to do there is this stuff what

2079
01:52:44,390 --> 01:52:47,300
we were doing tag ID from name and all

2080
01:52:46,340 --> 01:52:50,600
that right

2081
01:52:47,300 --> 01:52:52,550
this is the whole part that needs to

2082
01:52:50,600 --> 01:52:55,489
sort of happen with inside the tag

2083
01:52:52,550 --> 01:52:57,710
parsing code itself so the first where

2084
01:52:55,488 --> 01:53:00,799
we do like the parse tag string stuff

2085
01:52:57,710 --> 01:53:07,929
like this this part right price tag list

2086
01:53:00,800 --> 01:53:07,929
this this is needing to happen here

2087
01:53:10,250 --> 01:53:17,969
right so we want that to be something

2088
01:53:15,929 --> 01:53:22,380
this happening there it doesn't need the

2089
01:53:17,969 --> 01:53:26,340
four I loop right doesn't need any of

2090
01:53:22,380 --> 01:53:29,400
that it's just the interior part that

2091
01:53:26,340 --> 01:53:30,869
we're actually going to use and more

2092
01:53:29,399 --> 01:53:42,388
specifically I guess it actually it

2093
01:53:30,868 --> 01:53:45,859
happens here right

2094
01:53:42,389 --> 01:53:48,989
so that part we're going to keep and

2095
01:53:45,859 --> 01:53:53,250
what we need to do is solve this basic

2096
01:53:48,988 --> 01:53:55,348
category thing that's the part that you

2097
01:53:53,250 --> 01:53:59,698
know these things here when they call em

2098
01:53:55,349 --> 01:54:04,828
tags they say what the that asset tag

2099
01:53:59,698 --> 01:54:07,198
was we can throw that over to begin to

2100
01:54:04,828 --> 01:54:13,049
the begin tags part of things by just

2101
01:54:07,198 --> 01:54:14,939
adding the the category part in here but

2102
01:54:13,050 --> 01:54:18,150
you can see when it does this result

2103
01:54:14,939 --> 01:54:21,448
type ID part that's the part that is a

2104
01:54:18,149 --> 01:54:24,539
little bit harder because this when we

2105
01:54:21,448 --> 01:54:28,348
return it it needs to know what that

2106
01:54:24,539 --> 01:54:29,789
category actually was and so it almost

2107
01:54:28,349 --> 01:54:32,909
seems like that's something we're gonna

2108
01:54:29,789 --> 01:54:36,300
have to provide in addition or that gets

2109
01:54:32,908 --> 01:54:39,149
stored on the Builder now because we can

2110
01:54:36,300 --> 01:54:41,880
I think I might want it to be stored on

2111
01:54:39,149 --> 01:54:44,670
the Builder so basically what ends up

2112
01:54:41,880 --> 01:54:47,340
happening is in here instead of passing

2113
01:54:44,670 --> 01:54:50,158
category into end tags it's assumed that

2114
01:54:47,340 --> 01:55:00,328
somewhere you set that so it's assumed

2115
01:54:50,158 --> 01:55:02,899
that somewhere you said like this and I

2116
01:55:00,328 --> 01:55:02,899
would say

2117
01:55:10,659 --> 01:55:19,939
that right and so now anytime anyone

2118
01:55:17,869 --> 01:55:23,769
says end tags really what they're saying

2119
01:55:19,939 --> 01:55:27,139
is just like that's the end of it and

2120
01:55:23,770 --> 01:55:32,240
you know if we wanted to make again the

2121
01:55:27,140 --> 01:55:48,800
error stuff be sort of smoother we can

2122
01:55:32,239 --> 01:55:51,260
do this so that way we have a way of

2123
01:55:48,800 --> 01:55:59,690
producing that error kind of cleanly

2124
01:55:51,260 --> 01:56:02,750
right and I think that's all kind of

2125
01:55:59,689 --> 01:56:04,609
fine and so what I really want here is I

2126
01:56:02,750 --> 01:56:06,140
want to be able to pass this this is

2127
01:56:04,609 --> 01:56:08,539
gonna happen and it's gonna get the

2128
01:56:06,140 --> 01:56:10,520
category out of its private storage

2129
01:56:08,539 --> 01:56:12,560
swear it you know remembers what it was

2130
01:56:10,520 --> 01:56:14,930
and everything else can happen exactly

2131
01:56:12,560 --> 01:56:19,660
the same way as it was happening before

2132
01:56:14,930 --> 01:56:21,860
it's just now the asset basic category

2133
01:56:19,659 --> 01:56:27,079
needs to be stored in here along with

2134
01:56:21,859 --> 01:56:30,319
everything else that all seems okay

2135
01:56:27,079 --> 01:56:32,720
no major complaints there but what I

2136
01:56:30,319 --> 01:56:33,920
would like to do now is kind of push a

2137
01:56:32,720 --> 01:56:35,990
little bit further I know we're over

2138
01:56:33,920 --> 01:56:37,279
time but I kind of want to clean up a

2139
01:56:35,989 --> 01:56:39,469
little bit this before I end for the day

2140
01:56:37,279 --> 01:56:41,059
so I just don't forget where I was not

2141
01:56:39,470 --> 01:56:44,600
tomorrow or the things I was in the

2142
01:56:41,060 --> 01:56:46,460
middle of doing so if I go look at this

2143
01:56:44,600 --> 01:56:49,010
you know I've got this end tags call

2144
01:56:46,460 --> 01:56:51,350
right in here all the people who are

2145
01:56:49,010 --> 01:56:53,230
calling that Intex call really all they

2146
01:56:51,350 --> 01:56:56,090
need to do now instead of the like

2147
01:56:53,229 --> 01:56:59,000
result stuff or any of this import body

2148
01:56:56,090 --> 01:57:01,190
or any of that right they don't really

2149
01:56:59,000 --> 01:57:04,539
need to be doing that anymore they just

2150
01:57:01,189 --> 01:57:04,539
need to be able to call

2151
01:57:10,340 --> 01:57:16,619
well you know what that's not entirely

2152
01:57:15,118 --> 01:57:21,658
true either so this is a little bit more

2153
01:57:16,618 --> 01:57:25,828
complicated than that so each of the

2154
01:57:21,658 --> 01:57:28,589
tags has to get duplicated out so it

2155
01:57:25,828 --> 01:57:35,039
actually is harder than that meaning we

2156
01:57:28,590 --> 01:57:41,720
are gonna have to copy the tags into

2157
01:57:35,039 --> 01:57:44,859
each of these bins which is harder right

2158
01:57:41,720 --> 01:57:44,859
[Music]

2159
01:58:00,060 --> 01:58:03,940
and so I'm not really sure how I want to

2160
01:58:02,649 --> 01:58:05,199
deal with that so the way that we're

2161
01:58:03,939 --> 01:58:07,419
doing it before right is we just

2162
01:58:05,199 --> 01:58:09,369
repeatedly parse the file name like over

2163
01:58:07,420 --> 01:58:13,149
and over and over again producing the

2164
01:58:09,369 --> 01:58:16,210
same tags each time that's what we were

2165
01:58:13,149 --> 01:58:19,149
doing it would probably be nicer to just

2166
01:58:16,210 --> 01:58:21,489
do that once and then copy those tags

2167
01:58:19,149 --> 01:58:23,349
each time right because that way you

2168
01:58:21,489 --> 01:58:28,510
don't have to constantly like repeat

2169
01:58:23,350 --> 01:58:31,840
yourself so yeah that's kind of a little

2170
01:58:28,510 --> 01:58:36,220
bit harder to suss out how we won't do

2171
01:58:31,840 --> 01:58:40,239
that it does mean I guess that I don't

2172
01:58:36,220 --> 01:58:42,840
have to do this but it means things are

2173
01:58:40,239 --> 01:58:45,840
going to be a little nastier for us

2174
01:58:42,840 --> 01:58:45,840
unfortunately

2175
01:58:51,488 --> 01:58:58,479
so if you look at what's happening here

2176
01:58:53,109 --> 01:59:01,449
right the problem is that this needs to

2177
01:58:58,479 --> 01:59:04,959
be able to copy an additional block of

2178
01:59:01,449 --> 01:59:08,639
tags from somewhere right it needs to be

2179
01:59:04,960 --> 01:59:10,750
able to like block copy those tags and

2180
01:59:08,640 --> 01:59:13,539
so if you look at what happens when you

2181
01:59:10,750 --> 01:59:16,029
call add tag right we need to have some

2182
01:59:13,539 --> 01:59:18,010
way of saying what's the like group of

2183
01:59:16,029 --> 01:59:23,289
tags that have to be copied into every

2184
01:59:18,010 --> 01:59:25,600
one of these that's like coming from the

2185
01:59:23,289 --> 01:59:29,439
tag array that's in that piece of the

2186
01:59:25,600 --> 01:59:30,670
file and so you know we have a thing

2187
01:59:29,439 --> 01:59:32,519
where we are going to have a fry loop

2188
01:59:30,670 --> 01:59:37,569
here and we need to pass something in

2189
01:59:32,520 --> 01:59:41,710
that that we can use to get that to get

2190
01:59:37,569 --> 01:59:44,399
that data and so I guess we would need

2191
01:59:41,710 --> 01:59:44,399
something like

2192
01:59:58,500 --> 02:00:03,340
so we would need something like yeah

2193
02:00:01,359 --> 02:00:05,589
like this stuff so the import grid tag

2194
02:00:03,340 --> 02:00:07,420
right and we've got this tag array it

2195
02:00:05,590 --> 02:00:11,050
just says here's the array of tags to

2196
02:00:07,420 --> 02:00:14,170
copy and so that's sort of what I think

2197
02:00:11,050 --> 02:00:17,409
we would have to do meaning when we come

2198
02:00:14,170 --> 02:00:28,510
in here we would need to pass in tag

2199
02:00:17,409 --> 02:00:29,619
array to copy you know I'm saying like

2200
02:00:28,510 --> 02:00:33,940
that's that's what we would actually

2201
02:00:29,619 --> 02:00:37,630
need to do and so when we come in there

2202
02:00:33,939 --> 02:00:45,129
we would say like tag index equals

2203
02:00:37,630 --> 02:00:47,470
append tags first tag index tag index is

2204
02:00:45,130 --> 02:00:50,409
less than a patent tags one passed last

2205
02:00:47,470 --> 02:00:53,619
tag index tagging next right and then

2206
02:00:50,409 --> 02:00:56,319
when we do the ad tag call we would say

2207
02:00:53,619 --> 02:01:06,779
well you're gonna have to get the tag

2208
02:00:56,319 --> 02:01:09,369
first right so you got to call this and

2209
02:01:06,779 --> 02:01:12,279
we would look at whatever that tag index

2210
02:01:09,369 --> 02:01:18,880
was that you told us to copy and we'd

2211
02:01:12,279 --> 02:01:20,319
copy it so we'd still need a way to say

2212
02:01:18,880 --> 02:01:23,340
here's all the tags that you're gonna

2213
02:01:20,319 --> 02:01:26,739
append to this thing have a party right

2214
02:01:23,340 --> 02:01:29,520
and I suppose that's not terrible like

2215
02:01:26,739 --> 02:01:31,899
it's a little bit Squinkie

2216
02:01:29,520 --> 02:01:35,970
but it's no worse than what we were

2217
02:01:31,899 --> 02:01:39,939
doing before and this append tags

2218
02:01:35,970 --> 02:01:42,869
doesn't really need this type ID so you

2219
02:01:39,939 --> 02:01:45,129
know really there's sort of a tag range

2220
02:01:42,869 --> 02:01:50,199
that could be passed there that's that's

2221
02:01:45,130 --> 02:01:53,460
you know not that and I think that's you

2222
02:01:50,199 --> 02:01:53,460
know more or less this

2223
02:01:57,239 --> 02:02:03,609
it's this part right here and I don't

2224
02:02:01,090 --> 02:02:16,480
know how much I really want to make that

2225
02:02:03,609 --> 02:02:19,029
systemic but you know sure so I think

2226
02:02:16,479 --> 02:02:21,250
that's probably fine and I can collapse

2227
02:02:19,029 --> 02:02:25,019
these two in a second where this is just

2228
02:02:21,250 --> 02:02:27,729
a tag array plus a type ID right and

2229
02:02:25,020 --> 02:02:30,070
that's fine whatever

2230
02:02:27,729 --> 02:02:31,389
so I mean here when I do the in tags and

2231
02:02:30,069 --> 02:02:33,219
I've got the category got the append

2232
02:02:31,390 --> 02:02:34,600
tags I could append the tags on that

2233
02:02:33,220 --> 02:02:36,220
gives me a pretty easy way to work with

2234
02:02:34,600 --> 02:02:41,490
this really not that big a deal so it's

2235
02:02:36,220 --> 02:02:45,579
probably fine and off we go right and

2236
02:02:41,489 --> 02:02:48,760
yeah that's just where we're at so in

2237
02:02:45,579 --> 02:02:49,539
here if I want to continue down that

2238
02:02:48,760 --> 02:02:51,760
path

2239
02:02:49,539 --> 02:02:53,409
right then what this would look like is

2240
02:02:51,760 --> 02:02:55,300
when we're passing the filename in the

2241
02:02:53,409 --> 02:02:56,649
era string here really we wouldn't pass

2242
02:02:55,300 --> 02:02:58,720
it anymore like I said we don't really

2243
02:02:56,649 --> 02:03:01,449
want the era string maybe necessarily so

2244
02:02:58,720 --> 02:03:08,730
much as we want like just a tokenizer

2245
02:03:01,449 --> 02:03:08,729
here and we'll record our error on that

2246
02:03:09,239 --> 02:03:14,380
um and since we don't have a token in

2247
02:03:12,159 --> 02:03:16,180
question well probably what we'll do is

2248
02:03:14,380 --> 02:03:18,760
on our tokenizer we'll also have the

2249
02:03:16,180 --> 02:03:21,010
notion that generally speaking you can

2250
02:03:18,760 --> 02:03:22,659
issue an error without a token you're

2251
02:03:21,010 --> 02:03:25,230
just issuing a generic error and it will

2252
02:03:22,659 --> 02:03:30,760
use whatever the current position of the

2253
02:03:25,229 --> 02:03:32,949
tokenizer was um and so in order to do

2254
02:03:30,760 --> 02:03:36,010
that what we would say is okay we don't

2255
02:03:32,949 --> 02:03:44,710
have an on token in this case so the on

2256
02:03:36,010 --> 02:03:45,640
token is just equal to the state well we

2257
02:03:44,710 --> 02:03:48,039
don't actually need to do anything at

2258
02:03:45,640 --> 02:03:49,300
the moment but in the future what we'll

2259
02:03:48,039 --> 02:03:50,649
do is we'll look at the tokenizer it's

2260
02:03:49,300 --> 02:03:52,630
like line index or something and we'd

2261
02:03:50,649 --> 02:03:55,539
put it in there right and then we would

2262
02:03:52,630 --> 02:03:58,359
call through to to pass the message

2263
02:03:55,539 --> 02:04:00,840
along right so we'd say like okay on

2264
02:03:58,359 --> 02:04:00,839
token

2265
02:04:03,199 --> 02:04:08,369
right now again the problem that we're

2266
02:04:06,659 --> 02:04:12,149
gonna have here is that we need to be

2267
02:04:08,369 --> 02:04:15,420
able to do an out F call on that so this

2268
02:04:12,149 --> 02:04:16,738
really wants to look like this which

2269
02:04:15,420 --> 02:04:19,949
makes it a little bit harder for it to

2270
02:04:16,738 --> 02:04:21,419
pass through because it means you've

2271
02:04:19,949 --> 02:04:25,949
actually got a thing that looks like

2272
02:04:21,420 --> 02:04:27,539
this again see makes this so difficult

2273
02:04:25,949 --> 02:04:29,220
and it's just because you know

2274
02:04:27,539 --> 02:04:30,960
scene-stealers plus or not you know

2275
02:04:29,220 --> 02:04:32,610
they're not good languages anymore well

2276
02:04:30,960 --> 02:04:37,289
see puffs was never good language she

2277
02:04:32,609 --> 02:04:38,909
used to be so anyway if I want to be

2278
02:04:37,289 --> 02:04:40,949
able to do that what I need to do is

2279
02:04:38,909 --> 02:04:45,569
take a look at the odd F call for sample

2280
02:04:40,949 --> 02:04:48,149
you can see it cure Oh interesting we've

2281
02:04:45,569 --> 02:04:49,409
got a little 2-pound to find there and

2282
02:04:48,149 --> 02:04:51,000
what I want to do is I want to sort of

2283
02:04:49,409 --> 02:04:52,079
duplicate exactly what it did here and

2284
02:04:51,000 --> 02:04:54,510
that's why I say it's kind of annoying

2285
02:04:52,079 --> 02:04:56,699
right but this is exactly what we want

2286
02:04:54,510 --> 02:04:59,699
we want to be able to use the VAR glist

2287
02:04:56,699 --> 02:05:03,238
here to sort of like you know plump this

2288
02:04:59,699 --> 02:05:04,979
down one level and so in order to do

2289
02:05:03,238 --> 02:05:07,229
that what I'm going to suggest is we've

2290
02:05:04,979 --> 02:05:12,929
gotten that we put an out F in here

2291
02:05:07,229 --> 02:05:16,349
that's the same like so

2292
02:05:12,930 --> 02:05:16,890
but that out F call is going to take the

2293
02:05:16,350 --> 02:05:20,970
actual

2294
02:05:16,890 --> 02:05:24,300
arglist here instead so the VA list you

2295
02:05:20,970 --> 02:05:26,850
know argue list here that it that we're

2296
02:05:24,300 --> 02:05:29,850
going to use comes in so we can call

2297
02:05:26,850 --> 02:05:33,989
this thing directly this part doesn't

2298
02:05:29,850 --> 02:05:39,870
actually happen now right so we do that

2299
02:05:33,988 --> 02:05:42,500
and then inside this out F it actually

2300
02:05:39,869 --> 02:05:42,500
looks like this

2301
02:05:52,288 --> 02:05:57,969
something like this so that way you can

2302
02:05:55,420 --> 02:05:59,679
call this thing either way you can out F

2303
02:05:57,969 --> 02:06:08,050
if you have an art list or you can out

2304
02:05:59,679 --> 02:06:09,368
lift out f out F if you don't and so you

2305
02:06:08,050 --> 02:06:10,570
know I can even actually make this error

2306
02:06:09,368 --> 02:06:12,279
thing maybe a little bit more condensed

2307
02:06:10,569 --> 02:06:14,408
in that sense the point being if I

2308
02:06:12,279 --> 02:06:16,300
wanted then call an out F I can I could

2309
02:06:14,408 --> 02:06:19,238
call this out F directly from either of

2310
02:06:16,300 --> 02:06:20,739
these two things and it will allow me to

2311
02:06:19,238 --> 02:06:22,768
put my error message on to the air

2312
02:06:20,738 --> 02:06:25,208
stream like we were doing before so

2313
02:06:22,769 --> 02:06:28,030
again in order to do that I would need

2314
02:06:25,208 --> 02:06:30,760
to have a way of passing the file and

2315
02:06:28,029 --> 02:06:32,078
line number here and the file and line

2316
02:06:30,760 --> 02:06:34,239
number again should come from the

2317
02:06:32,078 --> 02:06:37,179
tokenizer so these are really just two

2318
02:06:34,238 --> 02:06:38,768
do's and in fact I guess what I could do

2319
02:06:37,179 --> 02:06:40,359
is say you know like that I guess what

2320
02:06:38,769 --> 02:06:42,340
I'm saying is the token itself is the

2321
02:06:40,359 --> 02:06:44,078
thing that wants to have that so what we

2322
02:06:42,340 --> 02:06:47,590
really want to do is say hey the on

2323
02:06:44,078 --> 02:06:49,328
token file name and the on token line

2324
02:06:47,590 --> 02:06:52,420
number that's where we want to actually

2325
02:06:49,328 --> 02:06:53,948
get that data from the destination

2326
02:06:52,420 --> 02:06:58,239
stream is going to be the tokenizer

2327
02:06:53,948 --> 02:07:00,428
error stream that's something that

2328
02:06:58,238 --> 02:07:01,689
you'll create when you do it and then

2329
02:07:00,429 --> 02:07:07,420
from there we're good to go

2330
02:07:01,689 --> 02:07:09,908
here's the format and the VAR glist

2331
02:07:07,420 --> 02:07:12,208
stuff is just you know looks like this

2332
02:07:09,908 --> 02:07:12,208
right

2333
02:07:17,920 --> 02:07:22,840
and so that gives us an easy way to make

2334
02:07:20,390 --> 02:07:22,840
this work

2335
02:07:27,430 --> 02:07:34,760
with all of our existing Airstream stuff

2336
02:07:31,720 --> 02:07:38,119
make sense so that's ideally what we

2337
02:07:34,760 --> 02:07:39,710
want it to look like and again like here

2338
02:07:38,119 --> 02:07:41,239
what I'm saying is the on soaking

2339
02:07:39,710 --> 02:07:48,380
doesn't really exist so we kind of need

2340
02:07:41,239 --> 02:07:56,029
to do that and what we want to do is you

2341
02:07:48,380 --> 02:08:00,050
know looking at how a def works it's

2342
02:07:56,029 --> 02:08:01,670
it's funny it doesn't even use the file

2343
02:08:00,050 --> 02:08:09,310
nine-member so we kind of need it I have

2344
02:08:01,670 --> 02:08:11,810
that in there yeah we'll get there

2345
02:08:09,310 --> 02:08:14,180
so anyway this allows us to use an

2346
02:08:11,810 --> 02:08:16,430
Airstream and to give us the information

2347
02:08:14,180 --> 02:08:19,640
if we eventually have our tokenizer

2348
02:08:16,430 --> 02:08:21,800
support such things so if in here we say

2349
02:08:19,640 --> 02:08:24,100
you know there's a file name and let's

2350
02:08:21,800 --> 02:08:26,360
say that we know what that file name is

2351
02:08:24,100 --> 02:08:27,650
then what you can see here we're also

2352
02:08:26,359 --> 02:08:29,329
quickly gonna run to the fact that this

2353
02:08:27,649 --> 02:08:30,469
file name wants to be a skeezy

2354
02:08:29,329 --> 02:08:32,269
terminated which we would prefer it

2355
02:08:30,470 --> 02:08:34,850
wouldn't but you know now we don't

2356
02:08:32,270 --> 02:08:36,590
really have a choice so we've got a file

2357
02:08:34,850 --> 02:08:41,360
name and we've got a line number which

2358
02:08:36,590 --> 02:08:43,670
we can put in here like so and we'll

2359
02:08:41,359 --> 02:08:45,439
just copy those to our tokens and again

2360
02:08:43,670 --> 02:08:47,989
that's really easy to do the tokenizer

2361
02:08:45,439 --> 02:08:49,219
itself we would have to figure out how

2362
02:08:47,989 --> 02:08:51,469
we're going to track that stuff but

2363
02:08:49,220 --> 02:08:56,300
inside get token it's actually very easy

2364
02:08:51,470 --> 02:08:58,100
because the token just takes that stuff

2365
02:08:56,300 --> 02:08:59,390
directly from the tokenizer and there's

2366
02:08:58,100 --> 02:09:01,550
really nothing else that we have to do

2367
02:08:59,390 --> 02:09:02,900
right so we just need to track those

2368
02:09:01,550 --> 02:09:04,760
pieces of information later but

2369
02:09:02,899 --> 02:09:06,079
otherwise having tokens remember where

2370
02:09:04,760 --> 02:09:09,489
they came in the stream is actually very

2371
02:09:06,079 --> 02:09:11,689
easy and so that's pretty nice right

2372
02:09:09,489 --> 02:09:13,010
alright so the only other thing that

2373
02:09:11,689 --> 02:09:17,960
token as you're needs is an ease the

2374
02:09:13,010 --> 02:09:20,960
actually air stream right it needs is

2375
02:09:17,960 --> 02:09:25,449
that but other than that it would work

2376
02:09:20,960 --> 02:09:28,109
the stream itself it looks like is not

2377
02:09:25,449 --> 02:09:31,199
defined there

2378
02:09:28,109 --> 02:09:32,489
yes so I don't know that I want to

2379
02:09:31,199 --> 02:09:36,809
bother to finding it so I might just

2380
02:09:32,489 --> 02:09:40,170
forward to Claire it like this and let

2381
02:09:36,810 --> 02:09:47,670
me move forwards here so that should

2382
02:09:40,170 --> 02:09:51,869
just work and out F that interfer are

2383
02:09:47,670 --> 02:09:55,680
not being found that is really because

2384
02:09:51,869 --> 02:10:04,260
this streaming stuff doesn't pre declare

2385
02:09:55,680 --> 02:10:07,680
this version it needs to all right so

2386
02:10:04,260 --> 02:10:18,750
let's see where we're at this guy needs

2387
02:10:07,680 --> 02:10:21,840
the same preamble easy enough and you

2388
02:10:18,750 --> 02:10:26,729
tell me you cannot find this but why can

2389
02:10:21,840 --> 02:10:29,279
you not find it because it's defined in

2390
02:10:26,729 --> 02:10:33,059
here oh we're in the simple pre process

2391
02:10:29,279 --> 02:10:35,519
or so that makes sense so the simple

2392
02:10:33,060 --> 02:10:38,120
preprocessor doesn't have the stream

2393
02:10:35,520 --> 02:10:40,290
included which it probably should

2394
02:10:38,119 --> 02:10:42,979
because it's going to need that for air

2395
02:10:40,289 --> 02:10:42,979
processing right

2396
02:10:48,958 --> 02:11:06,389
I think we called that streamed outage

2397
02:10:53,868 --> 02:11:07,529
and wrong about that yeah so I assume

2398
02:11:06,389 --> 02:11:09,449
that the problem there is that since

2399
02:11:07,529 --> 02:11:11,878
that's a memory back thing we will have

2400
02:11:09,448 --> 02:11:14,908
to provide it with a way to get the the

2401
02:11:11,878 --> 02:11:17,099
memory and don't know that that's a

2402
02:11:14,908 --> 02:11:18,688
problem I guess the only thing that we'd

2403
02:11:17,099 --> 02:11:23,279
have to do is provide a way for it to

2404
02:11:18,689 --> 02:11:25,979
actually allocate things right and we

2405
02:11:23,279 --> 02:11:28,438
actually already you know we already did

2406
02:11:25,979 --> 02:11:30,179
this and I don't actually know that I

2407
02:11:28,439 --> 02:11:31,429
care about the simple roster so for now

2408
02:11:30,179 --> 02:11:35,668
I probably turn it off but we've already

2409
02:11:31,429 --> 02:11:39,599
allowed that to happen inside the the

2410
02:11:35,668 --> 02:11:42,029
part the the PNG test bed so having

2411
02:11:39,599 --> 02:11:45,208
those things external is actually quite

2412
02:11:42,029 --> 02:11:47,728
easy I don't know that I care at the

2413
02:11:45,208 --> 02:11:49,828
moment so I'm probably not actually

2414
02:11:47,729 --> 02:11:51,239
going to bother with that but I just

2415
02:11:49,828 --> 02:11:53,840
wanted to make sure that would have

2416
02:11:51,238 --> 02:11:56,458
worked or is reasonable enough right

2417
02:11:53,840 --> 02:12:01,409
okay so let me go ahead and compile here

2418
02:11:56,458 --> 02:12:02,698
so in hh8 edits I don't know why I'm

2419
02:12:01,408 --> 02:12:04,018
still including the tokenizer is there

2420
02:12:02,698 --> 02:12:14,009
either because I don't need it there

2421
02:12:04,019 --> 02:12:16,789
either but probably just because we were

2422
02:12:14,010 --> 02:12:16,789
using it before

2423
02:12:20,350 --> 02:12:30,940
okay so let's see here that's all well

2424
02:12:26,109 --> 02:12:33,069
and good and this unfortunately needs to

2425
02:12:30,939 --> 02:12:35,500
know the size which I wasn't returning

2426
02:12:33,069 --> 02:12:37,719
I'm not sure why I wasn't returning it

2427
02:12:35,500 --> 02:12:39,939
from both of these because I really

2428
02:12:37,720 --> 02:12:44,820
should have so I think that really

2429
02:12:39,939 --> 02:12:44,819
wanted to look like that and similarly

2430
02:12:44,909 --> 02:13:01,229
you know this wants to look like that

2431
02:12:47,289 --> 02:13:01,229
right leave it it's size so moving on

2432
02:13:02,220 --> 02:13:11,050
overloaded function differs only by

2433
02:13:04,149 --> 02:13:12,819
return type you're right there we go

2434
02:13:11,050 --> 02:13:14,829
and so now we're mostly just back to

2435
02:13:12,819 --> 02:13:18,880
where we were before where you know

2436
02:13:14,829 --> 02:13:19,840
we've got this sort of annoyance where

2437
02:13:18,880 --> 02:13:25,300
we have to figure out some way of

2438
02:13:19,840 --> 02:13:27,279
getting this stuff to work right and let

2439
02:13:25,300 --> 02:13:29,770
me also real quick just make our

2440
02:13:27,279 --> 02:13:31,420
tokenizer right recognize the fact that

2441
02:13:29,770 --> 02:13:31,930
these errors are different than they

2442
02:13:31,420 --> 02:13:34,029
were before

2443
02:13:31,930 --> 02:13:36,039
so previously we kind of have that

2444
02:13:34,029 --> 02:13:42,579
notion but now what we're actually doing

2445
02:13:36,039 --> 02:13:47,340
is is allowing you to give the full set

2446
02:13:42,579 --> 02:13:50,619
there and so I think that's all good

2447
02:13:47,340 --> 02:13:52,360
yeah that looks a little good and so now

2448
02:13:50,619 --> 02:13:53,890
we can hook up the error stream pretty

2449
02:13:52,359 --> 02:13:56,259
easily that's organizer that'll just

2450
02:13:53,890 --> 02:13:58,090
work and it'll store everything so we

2451
02:13:56,260 --> 02:14:02,110
can do stuff like yeah saying like out

2452
02:13:58,090 --> 02:14:03,850
of tag space and so on hmm I'm gonna

2453
02:14:02,109 --> 02:14:05,439
leave it looking more like this I'm

2454
02:14:03,850 --> 02:14:07,300
gonna say that will insert the carriage

2455
02:14:05,439 --> 02:14:08,979
return ourself later as a sort of

2456
02:14:07,300 --> 02:14:13,570
separate things don't really want that

2457
02:14:08,979 --> 02:14:15,339
to be anything weird now for some reason

2458
02:14:13,569 --> 02:14:17,109
were getting an error on add tag here

2459
02:14:15,340 --> 02:14:18,520
and I want to figure out why I'm

2460
02:14:17,109 --> 02:14:22,210
assuming because we didn't actually type

2461
02:14:18,520 --> 02:14:26,050
that or use the right type for add tags

2462
02:14:22,210 --> 02:14:33,449
you can see here it wants for add tag

2463
02:14:26,050 --> 02:14:35,159
wants the asset tag ID and an f32 but

2464
02:14:33,449 --> 02:14:37,079
we're passing something that's just a

2465
02:14:35,159 --> 02:14:38,279
raw value that's because that's how we

2466
02:14:37,079 --> 02:14:40,109
were storing them in there

2467
02:14:38,279 --> 02:14:43,559
we didn't type this value we just made

2468
02:14:40,109 --> 02:14:45,899
it bu 32 so when we call add tag we

2469
02:14:43,560 --> 02:14:49,380
actually need that to be something that

2470
02:14:45,899 --> 02:14:53,039
is converted back to the enum and then

2471
02:14:49,380 --> 02:14:55,380
it should be fine right and so then you

2472
02:14:53,039 --> 02:14:57,390
can see at that point we're really just

2473
02:14:55,380 --> 02:14:59,640
down to the the actual reporting problem

2474
02:14:57,390 --> 02:15:04,289
that I was saying which is a bit tricky

2475
02:14:59,640 --> 02:15:05,550
right but I think we're okay I don't

2476
02:15:04,289 --> 02:15:08,640
think there's going to be too much more

2477
02:15:05,550 --> 02:15:11,039
to do so instead of passing the filename

2478
02:15:08,640 --> 02:15:12,329
and the stream errors thing what we're

2479
02:15:11,039 --> 02:15:13,710
doing here is we're saying look we're

2480
02:15:12,329 --> 02:15:15,960
gonna pass the tokenizer so you can

2481
02:15:13,710 --> 02:15:18,390
produce your errors okay and then we're

2482
02:15:15,960 --> 02:15:21,630
gonna pass the import tag array that's

2483
02:15:18,390 --> 02:15:24,180
like the append tags right and then when

2484
02:15:21,630 --> 02:15:27,480
you call and tags you're going to pass

2485
02:15:24,180 --> 02:15:30,119
those two things along and where I want

2486
02:15:27,479 --> 02:15:33,269
to pass them I don't know it looks like

2487
02:15:30,119 --> 02:15:35,250
it's just where where I happen throw

2488
02:15:33,270 --> 02:15:41,520
them there is fine so it's like looks

2489
02:15:35,250 --> 02:15:48,359
like that and the append tags come after

2490
02:15:41,520 --> 02:15:51,990
and that's just really all there is so I

2491
02:15:48,359 --> 02:15:53,670
think that's okay and and we'll finish

2492
02:15:51,989 --> 02:15:56,849
it this way and we'll just see if

2493
02:15:53,670 --> 02:15:58,289
there's some other like way we can that

2494
02:15:56,850 --> 02:15:59,760
we want to sort of change things around

2495
02:15:58,289 --> 02:16:02,310
at all I think that's okay

2496
02:15:59,760 --> 02:16:07,619
and that way all of the errors will also

2497
02:16:02,310 --> 02:16:10,070
get reported properly back at the line

2498
02:16:07,619 --> 02:16:12,750
that caused the file to be imported

2499
02:16:10,069 --> 02:16:15,029
right which is the other thing that I

2500
02:16:12,750 --> 02:16:17,819
wanted to kind of accomplish there so

2501
02:16:15,029 --> 02:16:19,829
that we'd always know like when we hit

2502
02:16:17,819 --> 02:16:22,170
an error because something's wrong

2503
02:16:19,829 --> 02:16:25,350
we'll always know definitively like who

2504
02:16:22,170 --> 02:16:27,060
told us to do that because that can get

2505
02:16:25,350 --> 02:16:29,280
really complicated once you start having

2506
02:16:27,060 --> 02:16:31,560
these text files and stuff flying around

2507
02:16:29,279 --> 02:16:34,229
that specify things you really need some

2508
02:16:31,560 --> 02:16:35,909
way to make sure that you know how like

2509
02:16:34,229 --> 02:16:40,889
when they break you need to have a way

2510
02:16:35,909 --> 02:16:43,530
of going like what happened right and so

2511
02:16:40,889 --> 02:16:44,879
that's a pretty important part of it so

2512
02:16:43,530 --> 02:16:46,780
right so I'm gonna say that there's an

2513
02:16:44,879 --> 02:16:49,808
import tag array

2514
02:16:46,780 --> 02:16:51,550
that's like the appendix and then we're

2515
02:16:49,808 --> 02:16:55,449
just going to go ahead and go from there

2516
02:16:51,549 --> 02:16:58,199
I'm gonna put this there for now

2517
02:16:55,450 --> 02:17:01,870
and we'll say that that's how you invoke

2518
02:16:58,200 --> 02:17:04,360
this function the source and foe I don't

2519
02:17:01,870 --> 02:17:08,679
remember what that actually gets used

2520
02:17:04,360 --> 02:17:10,599
for the answer is like nothing so I'm

2521
02:17:08,679 --> 02:17:13,210
going to eliminate it for now so we know

2522
02:17:10,599 --> 02:17:14,769
that we actually need it and we're just

2523
02:17:13,209 --> 02:17:17,438
going to call this the function

2524
02:17:14,769 --> 02:17:19,569
signature so from there every time we

2525
02:17:17,439 --> 02:17:24,729
called n tags really all we need to do

2526
02:17:19,569 --> 02:17:29,250
is say all right here's those two pieces

2527
02:17:24,728 --> 02:17:29,250
of information can again same thing here

2528
02:17:30,299 --> 02:17:34,539
so every time we call like an import

2529
02:17:32,709 --> 02:17:35,678
body or whatever instead of the previous

2530
02:17:34,540 --> 02:17:37,000
two things we're just passing it

2531
02:17:35,679 --> 02:17:45,308
different two things it's pretty

2532
02:17:37,000 --> 02:17:54,700
straightforward and then I think we've

2533
02:17:45,308 --> 02:17:57,099
got ourselves set so that really does

2534
02:17:54,700 --> 02:17:59,320
most of the stuff that I wanted and so

2535
02:17:57,099 --> 02:18:01,149
now I think we're down to just like okay

2536
02:17:59,319 --> 02:18:03,760
if we actually want to call this little

2537
02:18:01,149 --> 02:18:05,439
thing when we're doing our parsing we're

2538
02:18:03,760 --> 02:18:07,870
gonna actually have to have some state

2539
02:18:05,439 --> 02:18:10,059
here what I'm guessing is that we're not

2540
02:18:07,870 --> 02:18:12,729
gonna want to like part pass all this

2541
02:18:10,058 --> 02:18:15,218
stuff down arbitrarily so we're probably

2542
02:18:12,728 --> 02:18:17,409
gonna want to do like an you know

2543
02:18:15,218 --> 02:18:19,718
something like this that actually has

2544
02:18:17,409 --> 02:18:21,789
this stuff in it so you know we've got

2545
02:18:19,718 --> 02:18:25,089
the game assets here and we've got our

2546
02:18:21,790 --> 02:18:27,519
import source info here and you know

2547
02:18:25,090 --> 02:18:30,969
that sort of stuff that we can stick

2548
02:18:27,519 --> 02:18:33,309
things on and maybe the default fields

2549
02:18:30,968 --> 02:18:37,839
is in there too right so maybe that's

2550
02:18:33,308 --> 02:18:39,159
just stored there right and so then when

2551
02:18:37,840 --> 02:18:44,079
we're parsing these things we can just

2552
02:18:39,159 --> 02:18:47,159
say like here's the context it is hht

2553
02:18:44,079 --> 02:18:47,159
not HTT

2554
02:18:51,460 --> 02:18:57,649
and so here I can just say okay here are

2555
02:18:54,130 --> 02:18:59,149
the pieces of information that you need

2556
02:18:57,649 --> 02:19:01,729
when you're gonna be parsing and then

2557
02:18:59,149 --> 02:19:04,819
from there we can get that stuff out as

2558
02:19:01,729 --> 02:19:06,529
we need it so the tag builder begin tag

2559
02:19:04,819 --> 02:19:10,729
stuff is not going to happen here that

2560
02:19:06,530 --> 02:19:13,520
was a lie the import type as well I

2561
02:19:10,729 --> 02:19:16,100
don't know that anything needs to change

2562
02:19:13,520 --> 02:19:18,399
there yet but here we're gonna say like

2563
02:19:16,100 --> 02:19:21,050
this stuff comes off of the context

2564
02:19:18,399 --> 02:19:23,989
assets we don't pass the tag builder

2565
02:19:21,050 --> 02:19:28,609
that was a red herring this right here

2566
02:19:23,989 --> 02:19:30,289
is the result that we need for the

2567
02:19:28,610 --> 02:19:33,319
moment we're not actually doing anything

2568
02:19:30,290 --> 02:19:35,060
with that but we will need to so we're

2569
02:19:33,319 --> 02:19:37,699
just going to pass that in there to get

2570
02:19:35,059 --> 02:19:40,279
that and then we need to pouch

2571
02:19:37,700 --> 02:19:42,770
that's no good and then we need to also

2572
02:19:40,280 --> 02:19:44,750
pass the append tags and the tokenizer

2573
02:19:42,770 --> 02:19:47,829
and that stuff right so we do need to

2574
02:19:44,750 --> 02:19:52,819
pass this and we do need to pass the

2575
02:19:47,829 --> 02:19:54,021
import tag array and again that's

2576
02:19:52,819 --> 02:19:56,119
something we'll deal with a little bit

2577
02:19:54,021 --> 02:19:58,489
later but we just want to make sure that

2578
02:19:56,120 --> 02:19:59,690
it all works all right right and we just

2579
02:19:58,489 --> 02:20:02,300
want to get everything like flowing

2580
02:19:59,690 --> 02:20:04,310
properly so now I just need to redo the

2581
02:20:02,300 --> 02:20:06,890
default fields part again that's now

2582
02:20:04,310 --> 02:20:11,329
coming from the context itself so this

2583
02:20:06,890 --> 02:20:12,739
will satisfy that super similarly here

2584
02:20:11,329 --> 02:20:14,000
we're getting it off of the context

2585
02:20:12,739 --> 02:20:18,739
that's really all that needs to change

2586
02:20:14,000 --> 02:20:21,851
there and then we just need to actually

2587
02:20:18,739 --> 02:20:21,851
have one

2588
02:20:25,620 --> 02:20:31,740
so when we're creating this context

2589
02:20:27,950 --> 02:20:34,020
again we need the assets and we need the

2590
02:20:31,739 --> 02:20:42,809
info or source info or do you want to

2591
02:20:34,020 --> 02:20:47,579
call that and source file info asset

2592
02:20:42,809 --> 02:20:57,719
source file info what was that thing

2593
02:20:47,579 --> 02:21:00,930
called import source info and so now we

2594
02:20:57,719 --> 02:21:04,920
can actually call the parse top level

2595
02:21:00,930 --> 02:21:09,689
block with the context that's being

2596
02:21:04,920 --> 02:21:12,680
asked to use and I think we're okay so

2597
02:21:09,689 --> 02:21:12,680
at that point

2598
02:21:20,319 --> 02:21:27,489
I think we're good parse pieces though I

2599
02:21:26,139 --> 02:21:29,439
thought we got rid of that so I think

2600
02:21:27,489 --> 02:21:33,760
actually that doesn't really need to

2601
02:21:29,440 --> 02:21:37,480
happen quite yet parse pieces kind of

2602
02:21:33,760 --> 02:21:43,271
refer from string so parse pieces is

2603
02:21:37,479 --> 02:21:50,139
expecting something else in let's jump

2604
02:21:43,271 --> 02:21:53,440
there it's expecting assets tokenizer x'

2605
02:21:50,139 --> 02:21:56,909
append tag the type token so that just

2606
02:21:53,440 --> 02:22:02,079
needs that and so I think we're good now

2607
02:21:56,909 --> 02:22:04,059
yeah um so that should be all we need

2608
02:22:02,079 --> 02:22:06,100
it was a pretty substantial modification

2609
02:22:04,059 --> 02:22:10,479
nicely but we still made it through okay

2610
02:22:06,100 --> 02:22:13,899
so it wasn't that bad and then what we

2611
02:22:10,479 --> 02:22:18,069
can do now is when we run this parse we

2612
02:22:13,899 --> 02:22:20,049
should now be able to tomorrow make it

2613
02:22:18,069 --> 02:22:22,119
so that as we parse each one of these we

2614
02:22:20,049 --> 02:22:24,399
can go fetch the file that it

2615
02:22:22,120 --> 02:22:27,010
corresponds to and update it as

2616
02:22:24,399 --> 02:22:32,799
necessary so basically this part of the

2617
02:22:27,010 --> 02:22:36,010
code here where we look in Jimmy at the

2618
02:22:32,799 --> 02:22:45,849
match file date stuff here this part of

2619
02:22:36,010 --> 02:22:48,100
the code we should be able to we should

2620
02:22:45,850 --> 02:22:50,559
be able to make that do exactly what we

2621
02:22:48,100 --> 02:22:53,829
needed right that should be all we need

2622
02:22:50,559 --> 02:22:56,079
and furthermore I don't know that we

2623
02:22:53,829 --> 02:23:00,219
actually need the get or create asset

2624
02:22:56,079 --> 02:23:01,950
source file thing to be stable anymore

2625
02:23:00,219 --> 02:23:05,109
but yeah it's a sort of separate issue

2626
02:23:01,950 --> 02:23:06,700
um so anyway this should be fine and we

2627
02:23:05,110 --> 02:23:07,900
can get rid of this to do as well I'm

2628
02:23:06,700 --> 02:23:10,240
gonna stop there because we've done

2629
02:23:07,899 --> 02:23:12,279
enough I'll go to a brief Q&amp;A I think

2630
02:23:10,239 --> 02:23:14,469
we've kind of done all of the munching

2631
02:23:12,280 --> 02:23:17,380
we need to port everything over to the

2632
02:23:14,469 --> 02:23:18,579
way we were doing it our I should say

2633
02:23:17,379 --> 02:23:21,309
from the way we were doing it to the way

2634
02:23:18,579 --> 02:23:23,771
we're going to do it and that wasn't too

2635
02:23:21,309 --> 02:23:24,879
bad it was a little Squinkie but it

2636
02:23:23,771 --> 02:23:27,760
seems reasonable

2637
02:23:24,879 --> 02:23:30,670
and so we'll we'll deal with all the

2638
02:23:27,760 --> 02:23:33,989
bugs tomorrow and then hopefully that

2639
02:23:30,670 --> 02:23:37,069
will that will allow us to be importing

2640
02:23:33,989 --> 02:23:37,069
texts now instead

2641
02:23:44,521 --> 02:23:46,579
you

2642
02:24:09,579 --> 02:24:13,670
what are the flaws of converting a

2643
02:24:11,540 --> 02:24:16,250
decimal floating point number to a

2644
02:24:13,670 --> 02:24:18,379
binary equivalent by first parsing the

2645
02:24:16,250 --> 02:24:21,889
number and converting it to a regular

2646
02:24:18,379 --> 02:24:25,699
integer ignoring the decimal point then

2647
02:24:21,889 --> 02:24:31,760
using the part number as the mantissa

2648
02:24:25,700 --> 02:24:37,120
and an accumulated value for the

2649
02:24:31,760 --> 02:24:37,120
exponent for the floating-point number

2650
02:24:38,799 --> 02:24:42,709
so let me just make sure I understand

2651
02:24:40,818 --> 02:24:47,528
what you're asking you're saying if you

2652
02:24:42,709 --> 02:24:52,099
were to parse the number as a decimal

2653
02:24:47,529 --> 02:24:59,090
and then you are going to try and figure

2654
02:24:52,100 --> 02:25:00,439
out a way to store that number well I

2655
02:24:59,090 --> 02:25:02,029
mean that I guess the first thing I'd

2656
02:25:00,439 --> 02:25:04,120
say is you haven't really said how you

2657
02:25:02,029 --> 02:25:07,040
were gonna do the exponent part of that

2658
02:25:04,120 --> 02:25:12,380
because I guess to state the obvious the

2659
02:25:07,040 --> 02:25:18,170
exponent is also binary it's not a power

2660
02:25:12,379 --> 02:25:21,049
of 10 right so the decimal mantissa

2661
02:25:18,170 --> 02:25:23,090
isn't the mantissa and it's not only not

2662
02:25:21,049 --> 02:25:27,199
the mantissa it's not related to the

2663
02:25:23,090 --> 02:25:29,659
mantissa right because the exponent that

2664
02:25:27,200 --> 02:25:33,200
you have to remove in order to create

2665
02:25:29,659 --> 02:25:37,129
the mantissa is itself a binary exponent

2666
02:25:33,200 --> 02:25:43,819
it's a power of 2 not a power of 10 does

2667
02:25:37,129 --> 02:25:45,738
that help answer the question maybe so

2668
02:25:43,818 --> 02:25:47,090
I'm not sure it really buys you all that

2669
02:25:45,738 --> 02:25:50,539
much to do what you're saying it seems

2670
02:25:47,090 --> 02:25:52,159
like it's it doesn't really help solve

2671
02:25:50,540 --> 02:25:53,899
the problem you're still left with

2672
02:25:52,159 --> 02:25:59,930
exactly the same problem which is

2673
02:25:53,898 --> 02:26:00,559
converting base-10 to base-2 tell me if

2674
02:25:59,930 --> 02:26:01,970
I'm understanding your question

2675
02:26:00,559 --> 02:26:04,930
correctly though because I may not be

2676
02:26:01,969 --> 02:26:04,929
understanding what you're asking

2677
02:26:12,409 --> 02:26:19,398
I knew what you might be asking is what

2678
02:26:16,549 --> 02:26:21,978
if I created a giant number storage so I

2679
02:26:19,398 --> 02:26:25,519
use like big num so I can store as many

2680
02:26:21,978 --> 02:26:30,049
bits as I want and then I convert a

2681
02:26:25,520 --> 02:26:33,170
decimal number with the decimal point

2682
02:26:30,049 --> 02:26:35,209
removed into just that a giant binary

2683
02:26:33,170 --> 02:26:41,120
binary number right it could be

2684
02:26:35,209 --> 02:26:44,589
thousands of bits long then I counted

2685
02:26:41,120 --> 02:26:48,110
how many of those that I have and I

2686
02:26:44,590 --> 02:26:52,610
truncate them at the point where I can

2687
02:26:48,110 --> 02:26:55,100
store my exponent and then I use the

2688
02:26:52,610 --> 02:26:55,579
rest of mantissa if that's what you're

2689
02:26:55,100 --> 02:27:02,420
asking

2690
02:26:55,579 --> 02:27:05,539
then sure I think that works because at

2691
02:27:02,420 --> 02:27:07,969
the end of the day the binary conversion

2692
02:27:05,540 --> 02:27:11,479
has now happened prior to needing

2693
02:27:07,969 --> 02:27:13,010
anything fractional but by that point

2694
02:27:11,478 --> 02:27:14,840
you've already built like you've had to

2695
02:27:13,010 --> 02:27:19,370
build like big num right to give you

2696
02:27:14,840 --> 02:27:22,189
your it seems like really really

2697
02:27:19,370 --> 02:27:24,110
inefficient right so if you're asking

2698
02:27:22,189 --> 02:27:26,600
how to if you're asking can I do that

2699
02:27:24,110 --> 02:27:31,130
without the big num no because you would

2700
02:27:26,600 --> 02:27:34,760
run out of bits immediately right even a

2701
02:27:31,129 --> 02:27:37,009
very small floating-point number by

2702
02:27:34,760 --> 02:27:39,200
floating point standards is way bigger

2703
02:27:37,010 --> 02:27:41,000
than 4 billion right floating point

2704
02:27:39,200 --> 02:27:45,200
numbers can represent you know hundreds

2705
02:27:41,000 --> 02:27:47,569
of billions if they want to so that

2706
02:27:45,200 --> 02:27:49,280
might be one way to just to think about

2707
02:27:47,569 --> 02:27:50,600
it - I don't know let me know if this is

2708
02:27:49,280 --> 02:27:54,100
helping I don't know if that's hope if

2709
02:27:50,600 --> 02:27:54,100
that's answering what your question is

2710
02:28:03,110 --> 02:28:13,380
whatever think about webassembly

2711
02:28:05,450 --> 02:28:17,370
um I don't understand the point of it I

2712
02:28:13,379 --> 02:28:23,969
guess like I don't know why they didn't

2713
02:28:17,370 --> 02:28:32,660
just define an executable format or just

2714
02:28:23,969 --> 02:28:32,659
use one that already exists you know I

2715
02:28:33,950 --> 02:28:46,771
mean if you want an assembly language

2716
02:28:39,750 --> 02:28:49,290
just pick one you know I go go pick like

2717
02:28:46,771 --> 02:28:51,750
Oh an open risk or something and then

2718
02:28:49,290 --> 02:28:55,200
remove the parts that you think are

2719
02:28:51,750 --> 02:28:58,950
security issues and then use it I don't

2720
02:28:55,200 --> 02:29:02,360
know why they had thought that what the

2721
02:28:58,950 --> 02:29:05,700
world needed was like another assembly

2722
02:29:02,360 --> 02:29:08,720
language like thing that still is in

2723
02:29:05,700 --> 02:29:16,460
text format for no discernible reason

2724
02:29:08,719 --> 02:29:22,379
that is also not built on any existing

2725
02:29:16,459 --> 02:29:26,399
proofed machine code it's it I have no

2726
02:29:22,379 --> 02:29:30,829
idea web standards are nuts they seem to

2727
02:29:26,399 --> 02:29:35,850
be made in ways that literally don't

2728
02:29:30,829 --> 02:29:42,360
leverage any historical things we've

2729
02:29:35,851 --> 02:29:45,120
learned and I don't know so yeah is it

2730
02:29:42,360 --> 02:29:47,720
good that we have a thing eventually

2731
02:29:45,120 --> 02:29:50,851
that maybe will allow us to write

2732
02:29:47,719 --> 02:29:54,229
compiled code on the web easier sure are

2733
02:29:50,851 --> 02:29:54,230
they doing good job No

2734
02:30:01,270 --> 02:30:07,689
so I don't know I guess that's what I

2735
02:30:05,799 --> 02:30:09,549
would say so I don't know if web is

2736
02:30:07,689 --> 02:30:11,498
somebody is still text maybe they now

2737
02:30:09,549 --> 02:30:16,899
have a binary version of it which is at

2738
02:30:11,498 --> 02:30:18,458
least an improvement but I don't know if

2739
02:30:16,898 --> 02:30:22,538
that actually works yet or if they're

2740
02:30:18,459 --> 02:30:24,399
doing that I have no idea like most

2741
02:30:22,539 --> 02:30:28,359
things I'm sure it will be a lot like

2742
02:30:24,398 --> 02:30:32,288
CSS they've decided to reinvent the

2743
02:30:28,359 --> 02:30:34,600
wheel which I'm not opposed to if you

2744
02:30:32,289 --> 02:30:36,970
understand the problems of the wheel and

2745
02:30:34,600 --> 02:30:38,229
you're gonna build a better one a lot of

2746
02:30:36,969 --> 02:30:39,998
times what Webster is going to be is

2747
02:30:38,228 --> 02:30:41,708
reinventing the wheel without ever

2748
02:30:39,998 --> 02:30:43,838
knowing what a wheel was or how it works

2749
02:30:41,709 --> 02:30:45,640
and then you end up with like this weird

2750
02:30:43,838 --> 02:30:47,379
blobby square thing and you're like look

2751
02:30:45,639 --> 02:30:48,908
at how good I did and you're like we

2752
02:30:47,379 --> 02:30:54,600
already have things that were pretty

2753
02:30:48,908 --> 02:30:54,600
circular what have you done you know

2754
02:31:02,818 --> 02:31:08,769
webassembly didn't always have a binary

2755
02:31:05,078 --> 02:31:13,539
format unless I'm mistaken webassembly

2756
02:31:08,770 --> 02:31:15,760
used to actually just be rules about how

2757
02:31:13,540 --> 02:31:18,340
you would interpret javascript code to

2758
02:31:15,760 --> 02:31:21,550
generate assembly there was no format at

2759
02:31:18,340 --> 02:31:26,680
all actually it was just a convention

2760
02:31:21,549 --> 02:31:29,158
for JavaScript it did not have a binary

2761
02:31:26,680 --> 02:31:37,630
format unless I'm wrong about that

2762
02:31:29,158 --> 02:31:40,809
that's a new thing the text format like

2763
02:31:37,629 --> 02:31:42,488
yeah like ah some Jas that thing that's

2764
02:31:40,809 --> 02:31:44,828
what I'm talking about I guess if you're

2765
02:31:42,488 --> 02:31:49,809
talking about web assembly is not as in

2766
02:31:44,828 --> 02:31:53,738
j/s or like that's not part of the

2767
02:31:49,809 --> 02:31:55,359
lineage or whatever then okay I tend to

2768
02:31:53,738 --> 02:32:00,059
think of all those things is exactly the

2769
02:31:55,359 --> 02:32:00,059
same if that makes sense

2770
02:32:08,859 --> 02:32:12,229
somebody took my name how would you

2771
02:32:10,639 --> 02:32:14,448
convince a seasoned object-oriented

2772
02:32:12,228 --> 02:32:20,269
programmer on of the merits of not using

2773
02:32:14,449 --> 02:32:21,920
it I don't generally do that I don't try

2774
02:32:20,270 --> 02:32:23,090
to convince people not to program in

2775
02:32:21,920 --> 02:32:28,459
ways they want to program they should

2776
02:32:23,090 --> 02:32:30,709
just go do it it's usually just not

2777
02:32:28,459 --> 02:32:32,029
worth my time to try and talk to people

2778
02:32:30,709 --> 02:32:33,550
about stuff like that if they don't want

2779
02:32:32,029 --> 02:32:36,550
to do something somewhere they shouldn't

2780
02:32:33,549 --> 02:32:36,549
like

2781
02:32:44,610 --> 02:32:49,260
have you ever read any of the art of

2782
02:32:46,829 --> 02:32:50,280
Peter program you mean by Knuth the new

2783
02:32:49,260 --> 02:32:53,130
Thor I don't I you pronounce his name

2784
02:32:50,280 --> 02:32:55,380
but yes I have but I don't have a copy

2785
02:32:53,129 --> 02:32:56,969
so I haven't read much I've read it like

2786
02:32:55,379 --> 02:32:59,969
from other people's bookshelves I've

2787
02:32:56,969 --> 02:33:03,829
read parts of it but it's obviously very

2788
02:32:59,969 --> 02:33:03,829
large so I've never read the bulk of it

2789
02:33:07,940 --> 02:33:16,530
why don't you use switch in the while

2790
02:33:10,739 --> 02:33:17,729
parsing tokenizer loop this one I guess

2791
02:33:16,530 --> 02:33:22,710
that depends on which loop you're

2792
02:33:17,729 --> 02:33:28,289
talking about there's more than one of

2793
02:33:22,709 --> 02:33:31,469
those and the reason why I don't use

2794
02:33:28,290 --> 02:33:33,690
switch here is because I wanted to use

2795
02:33:31,469 --> 02:33:36,449
break and it was not very many token

2796
02:33:33,690 --> 02:33:38,340
types the reason why don't you switch

2797
02:33:36,450 --> 02:33:44,250
here is because you can't switch on

2798
02:33:38,340 --> 02:33:47,299
strings right you have to switch on i'm

2799
02:33:44,250 --> 02:33:47,299
constant values

2800
02:34:06,161 --> 02:34:09,531
it's the big flop success can you

2801
02:34:08,300 --> 02:34:11,630
explain a bit more what windows

2802
02:34:09,531 --> 02:34:13,610
considers utf-16 I see it mentioned

2803
02:34:11,630 --> 02:34:16,581
plenty of times on MSDN but usually it

2804
02:34:13,610 --> 02:34:19,101
just means w KR t not actually utf-16

2805
02:34:16,581 --> 02:34:21,591
with surrogates uh no the answer is I

2806
02:34:19,101 --> 02:34:24,501
can't explain more because I have no

2807
02:34:21,591 --> 02:34:28,550
idea I've never really looked hard at

2808
02:34:24,501 --> 02:34:33,740
what Windows tries to do with what you

2809
02:34:28,550 --> 02:34:38,350
pass it for non ANSI encoded text

2810
02:34:33,740 --> 02:34:44,601
basically so I know that they support

2811
02:34:38,351 --> 02:34:50,841
some kind of two byte character encoding

2812
02:34:44,601 --> 02:34:55,281
I know that it is mostly utf-16 but in

2813
02:34:50,841 --> 02:34:58,190
terms of the edge cases I don't know

2814
02:34:55,281 --> 02:35:02,421
what they do and thankfully my job never

2815
02:34:58,190 --> 02:35:04,070
really depends on that my sort of vague

2816
02:35:02,421 --> 02:35:06,591
cursory understanding is that they're

2817
02:35:04,070 --> 02:35:11,421
trying to kind of move towards utf-8

2818
02:35:06,591 --> 02:35:14,931
slowly so hopefully we won't have to

2819
02:35:11,421 --> 02:35:16,371
care much eventually because Windows 10

2820
02:35:14,931 --> 02:35:20,421
will just be like the rest of the world

2821
02:35:16,370 --> 02:35:24,560
and work on utf-8 but at the moment no I

2822
02:35:20,421 --> 02:35:27,201
really couldn't tell you the utf-16 that

2823
02:35:24,560 --> 02:35:28,851
is in Windows originally that they when

2824
02:35:27,200 --> 02:35:31,220
they first did it there really wasn't

2825
02:35:28,851 --> 02:35:35,181
much of a Unicode standard so it is

2826
02:35:31,220 --> 02:35:38,390
definitely possible slash likely that

2827
02:35:35,181 --> 02:35:41,149
there's a lot of cruft

2828
02:35:38,390 --> 02:35:43,460
there but it's just not something I

2829
02:35:41,149 --> 02:35:44,661
interface with so I don't know like some

2830
02:35:43,460 --> 02:35:46,581
parts of Windows I've worked with a lot

2831
02:35:44,661 --> 02:35:49,490
and so I know all the little weird like

2832
02:35:46,581 --> 02:35:52,790
ends in F I don't know anything about

2833
02:35:49,490 --> 02:35:55,479
the corner cases of Windows is utf-16

2834
02:35:52,790 --> 02:35:55,479
support

2835
02:36:02,700 --> 02:36:06,300
has the intentionally deliberate pace

2836
02:36:04,680 --> 02:36:08,729
for hammy hero helped you in your day

2837
02:36:06,299 --> 02:36:10,019
job at all as a reminder of freshers it

2838
02:36:08,728 --> 02:36:14,549
always just he has to program this

2839
02:36:10,020 --> 02:36:18,000
fashion after all these years it hasn't

2840
02:36:14,549 --> 02:36:19,079
helped me in that way at all it's helped

2841
02:36:18,000 --> 02:36:20,670
me a little bit because you know

2842
02:36:19,079 --> 02:36:22,439
sometimes I'll be doing stuff on stream

2843
02:36:20,670 --> 02:36:27,149
well even like today like someone was

2844
02:36:22,439 --> 02:36:29,610
saying that there's a binary thing for

2845
02:36:27,149 --> 02:36:31,619
webassembly right like you don't follow

2846
02:36:29,610 --> 02:36:33,120
things like that much so when we talk

2847
02:36:31,620 --> 02:36:34,290
about things on stream I'm likely to

2848
02:36:33,120 --> 02:36:36,270
learn something because someone on the

2849
02:36:34,290 --> 02:36:39,360
chats likely to know something about it

2850
02:36:36,270 --> 02:36:41,460
that I don't know and so I usually learn

2851
02:36:39,360 --> 02:36:43,010
stuff like that on the stream where it's

2852
02:36:41,459 --> 02:36:45,529
just like information that's out there

2853
02:36:43,010 --> 02:36:49,590
that I don't follow

2854
02:36:45,530 --> 02:36:50,790
programming wise I always kind of enjoy

2855
02:36:49,590 --> 02:36:53,090
programming so I always like doing

2856
02:36:50,790 --> 02:36:56,820
handmade here oh the only thing I don't

2857
02:36:53,090 --> 02:36:57,930
necessarily enjoy is a lot of things on

2858
02:36:56,819 --> 02:37:01,409
hand me here I've kind of like already

2859
02:36:57,930 --> 02:37:03,090
solved like I already have a tokenizer I

2860
02:37:01,409 --> 02:37:07,379
know they have error streams no that

2861
02:37:03,090 --> 02:37:08,760
sort of stuff and so sometimes it's a

2862
02:37:07,379 --> 02:37:10,259
little frustrating cos like well I'm

2863
02:37:08,760 --> 02:37:12,030
gonna have to implement this again and

2864
02:37:10,260 --> 02:37:14,639
it's not going to be as good as the one

2865
02:37:12,030 --> 02:37:16,680
that I have that I normally use because

2866
02:37:14,639 --> 02:37:19,139
that one's had more time and energy put

2867
02:37:16,680 --> 02:37:20,610
into it and it was designed exactly the

2868
02:37:19,139 --> 02:37:24,209
way I want because I designed it right

2869
02:37:20,610 --> 02:37:27,450
so sometimes it's a little unfortunate

2870
02:37:24,209 --> 02:37:29,129
because I'm like oh you know it's a

2871
02:37:27,450 --> 02:37:31,110
separate codebase it doesn't have all

2872
02:37:29,129 --> 02:37:32,179
the fancy bells and whistles maybe or

2873
02:37:31,110 --> 02:37:34,950
something right

2874
02:37:32,180 --> 02:37:36,899
but at the same time I always do think

2875
02:37:34,950 --> 02:37:39,990
it's worth practicing your low-level

2876
02:37:36,899 --> 02:37:41,728
programming chops and so writing

2877
02:37:39,989 --> 02:37:44,039
something a second time or third time or

2878
02:37:41,728 --> 02:37:46,769
a tenth time even is still good practice

2879
02:37:44,040 --> 02:37:49,290
for a systems programmer so I don't mind

2880
02:37:46,770 --> 02:37:50,760
and once in a while I hit upon something

2881
02:37:49,290 --> 02:37:54,979
I hadn't thought of in my own code and

2882
02:37:50,760 --> 02:37:54,978
that's like I'll remember that you know

2883
02:38:05,879 --> 02:38:10,029
just saw your talk on papers I love or

2884
02:38:08,620 --> 02:38:11,771
whatever they call it super impressed

2885
02:38:10,030 --> 02:38:14,290
has brought me back to Hammond here oh

2886
02:38:11,771 --> 02:38:18,760
oh well I'm glad you liked it

2887
02:38:14,290 --> 02:38:20,260
it was a fun lecture it was unusual

2888
02:38:18,760 --> 02:38:28,659
because it was a really like high-level

2889
02:38:20,260 --> 02:38:31,930
lecture but I also like it was a kind of

2890
02:38:28,659 --> 02:38:36,940
a weird audience to give it to but like

2891
02:38:31,930 --> 02:38:38,319
I don't know seemed alright and I'd

2892
02:38:36,940 --> 02:38:40,120
never really been asked to talk about

2893
02:38:38,319 --> 02:38:42,729
something from that point of view before

2894
02:38:40,120 --> 02:38:44,470
was like where have you like extended

2895
02:38:42,729 --> 02:38:47,760
research work in some way that ended up

2896
02:38:44,469 --> 02:38:50,409
being interesting and so that was fun

2897
02:38:47,760 --> 02:38:52,060
I'm not putting a party hat on Molly

2898
02:38:50,409 --> 02:38:53,829
that's just mean I don't like it when

2899
02:38:52,060 --> 02:38:56,890
people dress cats up because cats don't

2900
02:38:53,829 --> 02:38:58,659
like to be dressed maybe in the rare

2901
02:38:56,890 --> 02:39:01,899
circumstance where you have a cat who

2902
02:38:58,659 --> 02:39:03,819
does like to be dressed up okay but most

2903
02:39:01,899 --> 02:39:07,510
cats don't like having things around

2904
02:39:03,819 --> 02:39:10,000
their collar or on their head definitely

2905
02:39:07,510 --> 02:39:17,680
not on their paws they hate that in my

2906
02:39:10,000 --> 02:39:20,159
experience all right I think we're done

2907
02:39:17,680 --> 02:39:20,159
with questions

2908
02:39:30,540 --> 02:39:38,521
I say there we go

2909
02:39:34,790 --> 02:39:42,301
whoa what happened there we gotta just

2910
02:39:38,521 --> 02:39:44,101
like a black out I don't know what's

2911
02:39:42,300 --> 02:39:46,760
going on there we really need this

2912
02:39:44,101 --> 02:39:50,909
anymore anyway we kind of finish that

2913
02:39:46,761 --> 02:39:52,351
we'll just hide it all right thank you

2914
02:39:50,909 --> 02:39:53,579
everyone for joining us on a handmade

2915
02:39:52,351 --> 02:39:55,351
here at some pleasure coating with you

2916
02:39:53,579 --> 02:39:56,610
as always if you would like to follow

2917
02:39:55,351 --> 02:39:58,530
along series at home you can always peer

2918
02:39:56,610 --> 02:39:59,971
to the game on handmade hero org and it

2919
02:39:58,530 --> 02:40:01,530
comes to the source code so you can play

2920
02:39:59,970 --> 02:40:03,470
around with it maybe you'd like to beat

2921
02:40:01,530 --> 02:40:06,271
me to the punch and port the asset poor

2922
02:40:03,470 --> 02:40:07,979
handling code over to the new format

2923
02:40:06,271 --> 02:40:10,801
certainly got a chance to do that

2924
02:40:07,979 --> 02:40:12,989
tonight because I won't finish it up

2925
02:40:10,800 --> 02:40:15,149
till tomorrow so if you want to give

2926
02:40:12,989 --> 02:40:16,530
that shot go for it other than that I'll

2927
02:40:15,149 --> 02:40:18,931
be back here tomorrow to do that

2928
02:40:16,530 --> 02:40:20,431
finishing up and I hope to see you back

2929
02:40:18,931 --> 02:40:22,711
here for that same time same place

2930
02:40:20,431 --> 02:40:24,841
till then well same time same place

2931
02:40:22,710 --> 02:40:26,699
unless Seattle's power goes out which

2932
02:40:24,841 --> 02:40:28,489
you know we're in a giant snowstorm here

2933
02:40:26,700 --> 02:40:31,079
so far so good

2934
02:40:28,489 --> 02:40:31,440
assuming we have power I'll see you

2935
02:40:31,079 --> 02:40:33,390
tomorrow

2936
02:40:31,440 --> 02:40:36,950
until then have fun programming see

2937
02:40:33,390 --> 02:40:36,949
anyone on the Internet tegus everybody

