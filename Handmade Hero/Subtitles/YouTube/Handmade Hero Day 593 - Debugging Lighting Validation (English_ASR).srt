1
00:00:02,209 --> 00:00:05,819
hello everybody and welcome to hand made

2
00:00:04,620 --> 00:00:08,099
here oh sure we could a complete-game

3
00:00:05,819 --> 00:00:09,929
live on stream before we get started

4
00:00:08,099 --> 00:00:10,949
case you weren't with us yesterday just

5
00:00:09,929 --> 00:00:13,559
want to point out we're doing a

6
00:00:10,949 --> 00:00:16,439
Kickstarter right now for our comic moly

7
00:00:13,558 --> 00:00:19,049
rocket so please do check it out

8
00:00:16,440 --> 00:00:20,910
you can go directly to the Kickstarter

9
00:00:19,050 --> 00:00:22,740
website with this address if you want to

10
00:00:20,910 --> 00:00:24,059
but also we put a little banner on the

11
00:00:22,739 --> 00:00:27,118
hand made here a page so you can just

12
00:00:24,059 --> 00:00:28,919
click on that if you want to get there

13
00:00:27,118 --> 00:00:30,689
and we're pretty excited about it it

14
00:00:28,920 --> 00:00:32,730
looks like it will probably hit its goal

15
00:00:30,689 --> 00:00:35,039
so if you're interested in a print copy

16
00:00:32,729 --> 00:00:37,099
of our comic please check it out it's

17
00:00:35,039 --> 00:00:42,000
the only way to actually get one so

18
00:00:37,100 --> 00:00:43,230
let's get started today and I also at

19
00:00:42,000 --> 00:00:44,520
the end of this I wanted to mention

20
00:00:43,229 --> 00:00:47,250
we're going to be putting up some fun

21
00:00:44,520 --> 00:00:48,480
stuff for in celebration the Kickstarter

22
00:00:47,250 --> 00:00:50,308
so I'll point that out the end of the

23
00:00:48,479 --> 00:00:55,698
stream but for now let's get started

24
00:00:50,308 --> 00:00:58,738
so yeah yesterday we left on a fairly

25
00:00:55,698 --> 00:01:01,049
unfortunate note I'm afraid we tried to

26
00:00:58,738 --> 00:01:04,739
capture the lighting solution in to

27
00:01:01,049 --> 00:01:06,569
basically test files that we could run

28
00:01:04,739 --> 00:01:08,310
and for whatever reason we got

29
00:01:06,569 --> 00:01:10,048
completely different results when we

30
00:01:08,310 --> 00:01:11,909
tried to run it in the test app versus

31
00:01:10,049 --> 00:01:14,220
when I run it in the game and we don't

32
00:01:11,909 --> 00:01:17,100
actually know why and so one thing that

33
00:01:14,219 --> 00:01:18,658
I would like to do here is I want to go

34
00:01:17,099 --> 00:01:19,679
ahead and try capturing someone

35
00:01:18,659 --> 00:01:21,930
mentioned at the end of the stream and I

36
00:01:19,680 --> 00:01:26,390
think it's a good idea I wanted to try

37
00:01:21,930 --> 00:01:28,770
capturing the lighting solution in a

38
00:01:26,390 --> 00:01:30,509
single-threaded case to see whether we

39
00:01:28,769 --> 00:01:32,548
have some multi thread bug we didn't

40
00:01:30,509 --> 00:01:34,319
know about that's like not an actual

41
00:01:32,549 --> 00:01:36,229
like race condition or something but

42
00:01:34,319 --> 00:01:38,849
something where we're using something

43
00:01:36,228 --> 00:01:40,799
unpredictably because we do use entropy

44
00:01:38,849 --> 00:01:42,658
in the system and so for example if we

45
00:01:40,799 --> 00:01:45,360
had two threads reading an entry value

46
00:01:42,659 --> 00:01:47,219
that overrode it at different times or

47
00:01:45,359 --> 00:01:49,290
something you'd never see that bug

48
00:01:47,219 --> 00:01:50,489
because it's not even necessarily really

49
00:01:49,290 --> 00:01:52,680
a bug it's just because you're trying to

50
00:01:50,489 --> 00:01:55,078
get random numbers anyway so we'd never

51
00:01:52,680 --> 00:01:57,420
know right so what I'd like to do is

52
00:01:55,078 --> 00:01:59,250
maybe try to make it so that we're a

53
00:01:57,420 --> 00:02:00,960
little bit more specific about how we're

54
00:01:59,250 --> 00:02:03,659
doing it here so what I'm gonna do is

55
00:02:00,959 --> 00:02:05,309
I'm gonna make a change to the code

56
00:02:03,659 --> 00:02:09,689
where we can capture a couple of

57
00:02:05,310 --> 00:02:11,640
different ways of like sort of a couple

58
00:02:09,689 --> 00:02:12,810
different packets of data and then I'm

59
00:02:11,639 --> 00:02:13,629
gonna see if there's any difference

60
00:02:12,810 --> 00:02:15,819
between them

61
00:02:13,629 --> 00:02:17,109
and this is again all we're trying to do

62
00:02:15,819 --> 00:02:19,090
here is we have kind of a weird

63
00:02:17,110 --> 00:02:21,190
situation that we don't understand so as

64
00:02:19,090 --> 00:02:22,509
we go or as we go through the debugging

65
00:02:21,189 --> 00:02:24,310
process we're trying to do is build up

66
00:02:22,509 --> 00:02:26,049
like an understanding of what the

67
00:02:24,310 --> 00:02:28,420
problem might be so that we can find it

68
00:02:26,050 --> 00:02:30,219
and so eliminating things like whether

69
00:02:28,419 --> 00:02:32,229
there's threading involved or not in the

70
00:02:30,219 --> 00:02:35,189
pathology of the bug is very helpful

71
00:02:32,229 --> 00:02:38,439
because it lets us cut out a swath of

72
00:02:35,189 --> 00:02:41,590
potential failures right away without us

73
00:02:38,439 --> 00:02:43,599
having to really do any kind of advanced

74
00:02:41,590 --> 00:02:45,189
debugging work to find them so that's

75
00:02:43,599 --> 00:02:47,139
what we want to do we're trying to find

76
00:02:45,189 --> 00:02:50,340
the cheapest possible ways like the

77
00:02:47,139 --> 00:02:55,409
least amount of time that we can take to

78
00:02:50,340 --> 00:02:59,289
find a bug that like narrow down that

79
00:02:55,409 --> 00:03:01,449
where the bug could be right so if we go

80
00:02:59,289 --> 00:03:03,009
ahead and do a compile here I want to

81
00:03:01,449 --> 00:03:03,879
say we're gonna be using o2 because

82
00:03:03,009 --> 00:03:05,530
that's the thing because we're doing

83
00:03:03,879 --> 00:03:08,620
profiling work so we want to be doing oh

84
00:03:05,530 --> 00:03:11,349
to in as much as we can and what I'd

85
00:03:08,620 --> 00:03:13,420
like to do is just go ahead and we'll

86
00:03:11,349 --> 00:03:15,129
run this under remedy and we'll do some

87
00:03:13,419 --> 00:03:17,379
captures in two different directories

88
00:03:15,129 --> 00:03:18,819
and I'll just save them off so if we go

89
00:03:17,379 --> 00:03:21,729
ahead oh you know what one other thing I

90
00:03:18,819 --> 00:03:22,900
wanted to do that I forgot to do so one

91
00:03:21,729 --> 00:03:26,289
of the things that I would like to do is

92
00:03:22,900 --> 00:03:28,180
when we set that capture variable it

93
00:03:26,289 --> 00:03:29,919
captures continuously which is not

94
00:03:28,180 --> 00:03:31,569
particularly useful because we just want

95
00:03:29,919 --> 00:03:33,849
one capture we don't want to keep

96
00:03:31,569 --> 00:03:37,629
overriding the capture so what I might

97
00:03:33,849 --> 00:03:39,729
also do is say look when we do the the

98
00:03:37,629 --> 00:03:41,889
dump so you can see here when we when we

99
00:03:39,729 --> 00:03:44,889
do the final piece of dumping out the

100
00:03:41,889 --> 00:03:49,179
data I would like to go to lightbox dump

101
00:03:44,889 --> 00:03:51,309
trigger and turn that off right so after

102
00:03:49,180 --> 00:03:54,459
we do a dump of all the lighting data

103
00:03:51,310 --> 00:03:57,039
that we can use in the test app I wanted

104
00:03:54,459 --> 00:03:58,900
them go ahead and say don't don't do

105
00:03:57,039 --> 00:04:01,359
anymore so we set it at true it'll set

106
00:03:58,900 --> 00:04:05,800
itself back to false after it finishes

107
00:04:01,360 --> 00:04:07,900
one complete right of the data stream so

108
00:04:05,800 --> 00:04:10,480
that's all we're doing not very

109
00:04:07,900 --> 00:04:12,310
complicated so let me go ahead and load

110
00:04:10,479 --> 00:04:19,409
up handmade hero here I'm gonna go ahead

111
00:04:12,310 --> 00:04:23,680
and take what is this about work and oh

112
00:04:19,410 --> 00:04:25,120
interesting so we made a change to this

113
00:04:23,680 --> 00:04:27,410
and it looks like we broke something

114
00:04:25,120 --> 00:04:32,000
when we actually did

115
00:04:27,410 --> 00:04:35,030
the the arrangement of these work index

116
00:04:32,000 --> 00:04:36,410
indexes in the lighting core system the

117
00:04:35,029 --> 00:04:39,649
it looks like we're not getting an

118
00:04:36,410 --> 00:04:41,390
aligned version of the work count what's

119
00:04:39,649 --> 00:04:44,120
up with that so this is interesting and

120
00:04:41,389 --> 00:04:47,629
good let me go ahead and go in debug

121
00:04:44,120 --> 00:04:51,709
mode because anything that we can get to

122
00:04:47,629 --> 00:04:55,699
provoke a actual assertion maybe will

123
00:04:51,709 --> 00:04:57,289
help us mcmerkin in there so I don't

124
00:04:55,699 --> 00:04:58,699
know it probably isn't I probably just

125
00:04:57,290 --> 00:05:01,490
didn't do something when we pull this

126
00:04:58,699 --> 00:05:05,360
out but you know I can be hopeful I can

127
00:05:01,490 --> 00:05:07,160
be hopeful you know don't you know don't

128
00:05:05,360 --> 00:05:07,970
put that on me so if we take a look here

129
00:05:07,160 --> 00:05:09,290
what we're trying to do is we're trying

130
00:05:07,970 --> 00:05:12,110
to check to make sure that this is

131
00:05:09,290 --> 00:05:15,110
aligned to 64 and you can see that it's

132
00:05:12,110 --> 00:05:19,310
not the bottom value should be 0 there

133
00:05:15,110 --> 00:05:20,569
and you know it's not zero at all so

134
00:05:19,310 --> 00:05:28,780
that doesn't really make much sense

135
00:05:20,569 --> 00:05:30,920
but I so like let me go ahead and I

136
00:05:28,779 --> 00:05:37,939
don't know what I can actually cast this

137
00:05:30,920 --> 00:05:39,860
to here maybe that I don't know if

138
00:05:37,939 --> 00:05:45,560
remedy can do this yeah it doesn't seem

139
00:05:39,860 --> 00:05:48,410
to like this I'm not sure why George I

140
00:05:45,560 --> 00:05:58,990
don't know how to do that I don't know

141
00:05:48,410 --> 00:05:58,990
maybe you can do this or can I do this

142
00:06:00,699 --> 00:06:15,110
no all right so I'm not sure how to do

143
00:06:05,300 --> 00:06:16,310
this maybe X 13 can tell us how we may

144
00:06:15,110 --> 00:06:18,020
have just generated about report for

145
00:06:16,310 --> 00:06:19,639
George all right George you're on that

146
00:06:18,019 --> 00:06:20,959
one anyway doesn't really matter I don't

147
00:06:19,639 --> 00:06:24,110
need to see it I know the assertions

148
00:06:20,959 --> 00:06:28,849
firing I believe it I I don't think

149
00:06:24,110 --> 00:06:33,889
that's false I so what I oh you know

150
00:06:28,850 --> 00:06:37,040
what I know why it's just because our

151
00:06:33,889 --> 00:06:39,289
pad is wrong so this right here where we

152
00:06:37,040 --> 00:06:40,629
added these two in that means our pad is

153
00:06:39,290 --> 00:06:42,240
going to be off here because we want

154
00:06:40,629 --> 00:06:45,250
these things aligned so they wouldn't be

155
00:06:42,240 --> 00:06:46,960
over so remember we're using this for

156
00:06:45,250 --> 00:06:49,389
summing data on multiple threads we

157
00:06:46,959 --> 00:06:51,219
don't want the threads to be looking at

158
00:06:49,389 --> 00:06:53,620
the same cache line so we need this

159
00:06:51,220 --> 00:06:56,530
lighting work structure to be aligned

160
00:06:53,620 --> 00:06:59,649
properly to those cache lines we should

161
00:06:56,529 --> 00:07:04,419
probably put a CTO cert in here for that

162
00:06:59,649 --> 00:07:06,519
right so if you look here we have a an

163
00:07:04,420 --> 00:07:08,650
ability to do like a static assert I'm

164
00:07:06,519 --> 00:07:11,889
gonna say like let's just assert that

165
00:07:08,649 --> 00:07:15,609
the lighting work is always going to be

166
00:07:11,889 --> 00:07:18,729
one cache line long and if it's one

167
00:07:15,610 --> 00:07:20,470
cache line long then we know that the

168
00:07:18,730 --> 00:07:23,920
rest of the code will work fine if it's

169
00:07:20,470 --> 00:07:25,420
not one cache line long oh and I guess I

170
00:07:23,920 --> 00:07:27,250
don't have to put in a name because we

171
00:07:25,420 --> 00:07:29,759
actually already put a thing in there so

172
00:07:27,250 --> 00:07:32,350
that should give us our assertion right

173
00:07:29,759 --> 00:07:34,449
so now what we should see is that should

174
00:07:32,350 --> 00:07:37,090
fire and it does so that's good so this

175
00:07:34,449 --> 00:07:38,740
is an error now right and then we would

176
00:07:37,089 --> 00:07:42,819
know we just have to change this so we

177
00:07:38,740 --> 00:07:45,009
know that we were supposed to have this

178
00:07:42,819 --> 00:07:46,449
exact thing minus eight because we we

179
00:07:45,009 --> 00:07:48,009
change this to having one pointer to

180
00:07:46,449 --> 00:07:49,659
having two pointers so we added eight to

181
00:07:48,009 --> 00:07:51,129
it so that just means we would subtract

182
00:07:49,660 --> 00:07:51,760
eight here and then we should be fine

183
00:07:51,129 --> 00:07:54,699
right

184
00:07:51,759 --> 00:07:56,560
so that's good unfortunately that's not

185
00:07:54,699 --> 00:07:58,029
our book that was just a thing when we

186
00:07:56,560 --> 00:07:59,800
changed it for the lighting system we

187
00:07:58,029 --> 00:08:01,539
forgot we wanted to keep that padded

188
00:07:59,800 --> 00:08:03,970
properly so we got an assertion in there

189
00:08:01,540 --> 00:08:05,740
now that'll fire that's all fine all

190
00:08:03,970 --> 00:08:08,440
right so we're good let's go back to

191
00:08:05,740 --> 00:08:10,000
capturing the lighting data I wish that

192
00:08:08,439 --> 00:08:12,040
had been something that we could have

193
00:08:10,000 --> 00:08:14,500
counted on to cause our problem but it

194
00:08:12,040 --> 00:08:16,930
you know it isn't so if I go ahead and

195
00:08:14,500 --> 00:08:18,639
run here here's the game running right

196
00:08:16,930 --> 00:08:19,810
and we want to capture the lighting we

197
00:08:18,639 --> 00:08:21,599
don't really care where we're capturing

198
00:08:19,810 --> 00:08:23,560
the lighting but we want to capture it

199
00:08:21,600 --> 00:08:26,320
in two different ways

200
00:08:23,560 --> 00:08:28,269
we want to capture it multi-threaded and

201
00:08:26,319 --> 00:08:31,569
we want to capture it single threaded

202
00:08:28,269 --> 00:08:32,829
into two different packages of data so

203
00:08:31,569 --> 00:08:36,038
what I'm going to do here is I'm gonna

204
00:08:32,830 --> 00:08:39,250
go to the debug directory so in

205
00:08:36,038 --> 00:08:41,409
hand-made debug and I'm just gonna sort

206
00:08:39,250 --> 00:08:44,379
by type so we have our dump files here

207
00:08:41,409 --> 00:08:46,120
I'm gonna delete those files so we know

208
00:08:44,379 --> 00:08:48,639
that we're not storing any of them I'm

209
00:08:46,120 --> 00:08:50,820
then gonna just go ahead and say like

210
00:08:48,639 --> 00:08:53,319
before we enter this part of the routine

211
00:08:50,820 --> 00:08:56,530
I'm going to go ahead and set

212
00:08:53,320 --> 00:09:03,790
this lightbox dump trigger to true in

213
00:08:56,529 --> 00:09:05,679
fact I guess I can just do that how do

214
00:09:03,789 --> 00:09:10,659
we we don't really have a way to do that

215
00:09:05,679 --> 00:09:15,039
do we at the moment you know what I

216
00:09:10,659 --> 00:09:19,029
maybe should do can we just make this be

217
00:09:15,039 --> 00:09:23,279
like one of these things we just put

218
00:09:19,029 --> 00:09:25,929
that in here I might do that actually I

219
00:09:23,279 --> 00:09:34,750
think that's then we just push a button

220
00:09:25,929 --> 00:09:41,829
and it does it right I figure I don't

221
00:09:34,750 --> 00:09:43,000
know where that thing is waiting here so

222
00:09:41,830 --> 00:09:47,590
this thing here

223
00:09:43,000 --> 00:09:49,360
I just yeah I mean I feel like maybe we

224
00:09:47,590 --> 00:09:55,710
just put this out here as an editable

225
00:09:49,360 --> 00:09:59,919
value debug b32

226
00:09:55,710 --> 00:10:02,110
lightbox dump trigger maybe so if I do

227
00:09:59,919 --> 00:10:03,579
that I think I might just be able to

228
00:10:02,110 --> 00:10:06,430
just have a one click thing so I just

229
00:10:03,580 --> 00:10:09,639
click it and then you know that seems

230
00:10:06,429 --> 00:10:12,699
fair right so if this thing if we just

231
00:10:09,639 --> 00:10:15,669
said like dump in theory I want to say

232
00:10:12,700 --> 00:10:16,990
that it dumps it for us so that means we

233
00:10:15,669 --> 00:10:20,259
could just create a couple directories

234
00:10:16,990 --> 00:10:21,340
here so we've got these set of dumps and

235
00:10:20,259 --> 00:10:26,649
these set of dumps would be

236
00:10:21,340 --> 00:10:28,870
multi-threaded right and then we can do

237
00:10:26,649 --> 00:10:30,399
a similar dump that's just for single

238
00:10:28,870 --> 00:10:35,860
threaded so if I come in here and just

239
00:10:30,399 --> 00:10:37,899
recompile with the without the lighting

240
00:10:35,860 --> 00:10:40,720
cue so if I take that and make stuff

241
00:10:37,899 --> 00:10:42,490
that with a zero so now the lighting

242
00:10:40,720 --> 00:10:44,950
will run single threaded if that makes

243
00:10:42,490 --> 00:10:47,080
sense so like if we take a look back at

244
00:10:44,950 --> 00:10:48,280
the game here it'll run much slower you

245
00:10:47,080 --> 00:10:49,600
can see it's running much slower because

246
00:10:48,279 --> 00:10:51,639
it's single threaded now so instead of

247
00:10:49,600 --> 00:10:53,290
using 8 cores well I think it was only

248
00:10:51,639 --> 00:10:54,759
using 6 for the lighting but instead of

249
00:10:53,289 --> 00:10:56,379
using all those cores it's actually

250
00:10:54,759 --> 00:10:58,860
using one so it should be about like 6

251
00:10:56,379 --> 00:10:58,860
times slower

252
00:11:00,100 --> 00:11:04,240
and now I should be able to dump it

253
00:11:01,629 --> 00:11:09,879
again in single threaded mode and here's

254
00:11:04,240 --> 00:11:11,379
a single threaded version so now I have

255
00:11:09,879 --> 00:11:12,429
a capture of a single threaded version

256
00:11:11,379 --> 00:11:14,379
and a capture of a multi threaded

257
00:11:12,429 --> 00:11:15,758
version so we can look at those two and

258
00:11:14,379 --> 00:11:18,250
see if there's any difference between

259
00:11:15,759 --> 00:11:20,470
them I'm guessing there won't be but if

260
00:11:18,250 --> 00:11:23,828
there is we're like one works and one

261
00:11:20,470 --> 00:11:25,649
doesn't then that's a clue right it's

262
00:11:23,828 --> 00:11:27,909
just a clue for us that we've got

263
00:11:25,649 --> 00:11:30,339
something weird happening in terms of

264
00:11:27,909 --> 00:11:33,568
sharing a value that we didn't think we

265
00:11:30,339 --> 00:11:36,550
were sharing across the threads so

266
00:11:33,568 --> 00:11:38,948
that's I think all we really need to do

267
00:11:36,549 --> 00:11:40,659
there so I'll undo the part where we

268
00:11:38,948 --> 00:11:42,639
where we did that

269
00:11:40,659 --> 00:11:47,230
turning off the multi-threading so now

270
00:11:42,639 --> 00:11:49,120
we're back to to doing it multi-threaded

271
00:11:47,230 --> 00:11:52,329
and you know the game runs at the normal

272
00:11:49,120 --> 00:11:55,028
speed so all that seems fine and now

273
00:11:52,328 --> 00:11:58,318
with remedy BG I should be able to set

274
00:11:55,028 --> 00:12:00,970
the directory here to like debug

275
00:11:58,318 --> 00:12:02,528
multi-threaded oh well I guess you know

276
00:12:00,970 --> 00:12:03,699
I don't even have to do it in remedy BG

277
00:12:02,528 --> 00:12:05,379
because I'm not really debugging right

278
00:12:03,698 --> 00:12:07,990
now so I guess I can just come in here

279
00:12:05,379 --> 00:12:12,730
and do it right so inside handmade debug

280
00:12:07,990 --> 00:12:17,049
if I go to single threaded I can go run

281
00:12:12,730 --> 00:12:18,819
build HH light prof and see what happens

282
00:12:17,049 --> 00:12:22,059
so that's what the single threaded one

283
00:12:18,818 --> 00:12:28,028
reports if I go to multi-threaded and do

284
00:12:22,059 --> 00:12:29,979
it it's like the same I mean these are

285
00:12:28,028 --> 00:12:31,870
two different captures right so they're

286
00:12:29,980 --> 00:12:33,459
gonna be a little bit different but you

287
00:12:31,870 --> 00:12:36,339
can see it's not like one work than the

288
00:12:33,458 --> 00:12:37,869
other one did in we get different we get

289
00:12:36,339 --> 00:12:43,329
different results right

290
00:12:37,870 --> 00:12:45,879
in either case so it's like okay so this

291
00:12:43,328 --> 00:12:46,739
is not great right this is not a good

292
00:12:45,879 --> 00:12:49,028
thing

293
00:12:46,740 --> 00:12:50,948
it means we don't have any further

294
00:12:49,028 --> 00:12:53,129
information it means we don't probably

295
00:12:50,948 --> 00:12:55,328
have some strange multi-threading bug

296
00:12:53,129 --> 00:12:56,740
where we're sharing values but it

297
00:12:55,328 --> 00:12:59,620
doesn't tell us what we're actually

298
00:12:56,740 --> 00:13:02,438
doing wrong in the light profiler

299
00:12:59,620 --> 00:13:05,889
because it's you know it should be the

300
00:13:02,438 --> 00:13:10,129
case that once we set this stuff up when

301
00:13:05,889 --> 00:13:12,460
we go down into the guts of the

302
00:13:10,129 --> 00:13:15,320
of the program this should run

303
00:13:12,460 --> 00:13:18,230
fundamentally the same way that it runs

304
00:13:15,320 --> 00:13:20,450
in the main app right they should run

305
00:13:18,230 --> 00:13:23,330
the same way and they're obviously not

306
00:13:20,450 --> 00:13:25,370
so the question is why now one of the

307
00:13:23,330 --> 00:13:27,139
things that's true is when we set up the

308
00:13:25,370 --> 00:13:28,370
light Atlas is here I don't know if

309
00:13:27,139 --> 00:13:31,639
maybe there's something that we're not

310
00:13:28,370 --> 00:13:35,210
doing that we should be doing when we're

311
00:13:31,639 --> 00:13:39,379
setting up the light Atlas is that part

312
00:13:35,210 --> 00:13:41,900
is not clear to me so we might want to

313
00:13:39,379 --> 00:13:43,779
check that right we might want to see if

314
00:13:41,899 --> 00:13:48,289
there's something weird going on there

315
00:13:43,779 --> 00:13:49,699
I'm not actually sure but you know we

316
00:13:48,289 --> 00:13:51,409
can look to see if there's if there's

317
00:13:49,700 --> 00:13:53,810
some kind of weird like voxel difference

318
00:13:51,409 --> 00:13:55,519
I don't actually know but the reason

319
00:13:53,809 --> 00:13:58,699
that again why I say this is suspicious

320
00:13:55,519 --> 00:14:00,799
or rather why I'm confused about what's

321
00:13:58,700 --> 00:14:04,460
going on is that if we look at the

322
00:14:00,799 --> 00:14:06,740
lighting core here and we see what we're

323
00:14:04,460 --> 00:14:09,590
calling we're calling exactly the same

324
00:14:06,740 --> 00:14:11,899
thing in both cases and yet when we do

325
00:14:09,590 --> 00:14:14,899
our validation pass we see that their

326
00:14:11,899 --> 00:14:17,000
results are completely different so we

327
00:14:14,899 --> 00:14:19,029
don't even get remotely what we would

328
00:14:17,000 --> 00:14:21,409
expect to get after calling exactly

329
00:14:19,029 --> 00:14:25,250
functionally exactly the same thing and

330
00:14:21,409 --> 00:14:28,129
the question is just why is it that we

331
00:14:25,250 --> 00:14:30,860
have such a difference between these two

332
00:14:28,129 --> 00:14:33,019
things is there something going on in

333
00:14:30,860 --> 00:14:34,789
here that we don't understand or is my

334
00:14:33,019 --> 00:14:38,779
validation routine busted

335
00:14:34,789 --> 00:14:41,809
I don't really know right so in terms of

336
00:14:38,779 --> 00:14:49,269
what's going on with the validation you

337
00:14:41,809 --> 00:14:52,369
can see how this is is working here and

338
00:14:49,269 --> 00:14:54,559
you know it seems like we're taking a

339
00:14:52,370 --> 00:14:56,629
sane approach to it we make our light

340
00:14:54,559 --> 00:14:58,849
atlases and we just seed them with the

341
00:14:56,629 --> 00:15:01,820
data that was already in them

342
00:14:58,850 --> 00:15:03,409
when we start so when we call internal

343
00:15:01,820 --> 00:15:06,379
lighting core here which is what we're

344
00:15:03,409 --> 00:15:10,939
about to call we dump out right you can

345
00:15:06,379 --> 00:15:17,269
see here we dump out the texels right

346
00:15:10,940 --> 00:15:19,400
and we load those texels in I mean

347
00:15:17,269 --> 00:15:21,049
that's all that's happening here and so

348
00:15:19,399 --> 00:15:24,439
we should be starting with exactly the

349
00:15:21,049 --> 00:15:26,240
same data that we had

350
00:15:24,440 --> 00:15:27,950
and I guess I don't have any way of

351
00:15:26,240 --> 00:15:30,320
knowing that it really is exactly the

352
00:15:27,950 --> 00:15:33,230
same data so I suppose that's a little

353
00:15:30,320 --> 00:15:35,629
bit weird but yeah I don't know what's

354
00:15:33,230 --> 00:15:38,870
going on there similarly like the

355
00:15:35,629 --> 00:15:40,879
solutions should be the same here's it

356
00:15:38,870 --> 00:15:45,049
writing out the boxes that it started

357
00:15:40,879 --> 00:15:46,429
with and that seems right I guess I

358
00:15:45,049 --> 00:15:52,009
should double-check that there's nothing

359
00:15:46,429 --> 00:15:54,829
weird that happens with the boxes I mean

360
00:15:52,009 --> 00:15:58,879
it looks fine right you can see it

361
00:15:54,830 --> 00:16:01,520
taking the Box account here and the box

362
00:15:58,879 --> 00:16:04,580
ref count will be 0 when we start so all

363
00:16:01,519 --> 00:16:07,309
of that should be fine this building the

364
00:16:04,580 --> 00:16:09,650
diffuse maps will get saved when we save

365
00:16:07,309 --> 00:16:15,349
the solution itself so that will come in

366
00:16:09,649 --> 00:16:17,209
with the correct Maps or should so again

367
00:16:15,350 --> 00:16:21,080
I don't see where the difference is

368
00:16:17,210 --> 00:16:23,540
coming in so I think I mean unless I can

369
00:16:21,080 --> 00:16:25,460
think of something else to do I think

370
00:16:23,539 --> 00:16:27,699
the only way we're really gonna be able

371
00:16:25,460 --> 00:16:31,009
to debug this is by stepping through

372
00:16:27,700 --> 00:16:34,340
carefully in both and seeing where they

373
00:16:31,009 --> 00:16:38,509
diverge I don't know any other way to

374
00:16:34,340 --> 00:16:41,780
really do it so what I could start with

375
00:16:38,509 --> 00:16:43,789
is trying to validate more things so for

376
00:16:41,779 --> 00:16:47,120
example in here where we've got this

377
00:16:43,789 --> 00:16:50,509
debug light dump trigger we can go back

378
00:16:47,120 --> 00:16:53,870
and we can put that at the very top so

379
00:16:50,509 --> 00:16:57,019
now everyone can look at this we can go

380
00:16:53,870 --> 00:16:59,750
to any particular step of the process

381
00:16:57,019 --> 00:17:05,359
and make sure that when that step

382
00:16:59,750 --> 00:17:08,088
happens we validate after it so for

383
00:17:05,359 --> 00:17:10,458
example when we do the build light

384
00:17:08,088 --> 00:17:12,470
partition part of things so after this

385
00:17:10,459 --> 00:17:15,380
part here where we build the spatial

386
00:17:12,470 --> 00:17:19,220
partition for lighting we can just make

387
00:17:15,380 --> 00:17:27,569
that also get validated so for example

388
00:17:19,220 --> 00:17:29,819
let's suppose in here we did a test here

389
00:17:27,568 --> 00:17:36,499
and in addition to dumping the data we

390
00:17:29,819 --> 00:17:41,489
have we call this results

391
00:17:36,499 --> 00:17:43,798
spatial partition and then what we can

392
00:17:41,489 --> 00:17:46,379
do is say whatever the spatial partition

393
00:17:43,798 --> 00:17:49,168
that we produced was we dump that whole

394
00:17:46,378 --> 00:17:51,418
thing out and I believe the spatial

395
00:17:49,169 --> 00:17:53,159
partition itself because we haven't

396
00:17:51,419 --> 00:17:55,109
gotten creative with it yet

397
00:17:53,159 --> 00:17:58,379
there really isn't it's basically the

398
00:17:55,108 --> 00:18:00,839
same as this call you know all we did

399
00:17:58,378 --> 00:18:03,449
was increase the number of boxes because

400
00:18:00,839 --> 00:18:10,558
we just built more boxes right that's

401
00:18:03,450 --> 00:18:14,909
that's all there is so we can dump those

402
00:18:10,558 --> 00:18:17,788
out here the spatial partition and the

403
00:18:14,909 --> 00:18:20,309
you know box refs I guess because I

404
00:18:17,788 --> 00:18:24,569
think there's also the Box refs you can

405
00:18:20,308 --> 00:18:28,548
see here we've got the box ref count and

406
00:18:24,569 --> 00:18:31,829
the box table here you know I'm saying

407
00:18:28,548 --> 00:18:35,608
so I think we should be able to to put

408
00:18:31,829 --> 00:18:37,138
those out I don't know whether like I

409
00:18:35,608 --> 00:18:39,558
said I don't know whether the box ref

410
00:18:37,138 --> 00:18:41,998
count and the Box table themselves are

411
00:18:39,558 --> 00:18:44,278
getting reset properly but they should

412
00:18:41,999 --> 00:18:47,548
be when we load in the lighting solution

413
00:18:44,278 --> 00:18:52,829
it should be set to zero box refs I

414
00:18:47,548 --> 00:18:56,429
believe or whatever the correct setting

415
00:18:52,829 --> 00:18:58,019
was for the initial sweep so I wouldn't

416
00:18:56,429 --> 00:19:01,288
imagine we would have a problem there

417
00:18:58,019 --> 00:19:03,690
but again let's just check we don't know

418
00:19:01,288 --> 00:19:07,138
where our bug is so we can't afford not

419
00:19:03,690 --> 00:19:10,019
to be paranoid so what I would say here

420
00:19:07,138 --> 00:19:11,608
is yeah we can read dump the boxes so

421
00:19:10,019 --> 00:19:13,878
maybe I just won't even call it that

422
00:19:11,608 --> 00:19:16,918
I'll just call it result light boxes and

423
00:19:13,878 --> 00:19:18,238
then I'll call this result box wraps so

424
00:19:16,919 --> 00:19:21,330
in here we can basically say all right

425
00:19:18,239 --> 00:19:25,440
there's a box ref count and it can be a

426
00:19:21,329 --> 00:19:29,788
dump of this thing right so in fact I'll

427
00:19:25,440 --> 00:19:34,460
just do it this way box table so we'll

428
00:19:29,788 --> 00:19:34,460
dump that whole thing and then we have a

429
00:19:34,609 --> 00:19:41,719
I don't know we have that list right so

430
00:19:38,960 --> 00:19:44,480
that would at least let us verify what

431
00:19:41,720 --> 00:19:46,789
the set of things was that we produced

432
00:19:44,480 --> 00:19:50,298
during the spatial partition build so

433
00:19:46,789 --> 00:19:55,428
that we can eliminate that from the from

434
00:19:50,298 --> 00:19:59,900
the problem like from the we're just

435
00:19:55,429 --> 00:20:01,640
trying to bisect the program into pieces

436
00:19:59,900 --> 00:20:03,080
so we know which part to focus our

437
00:20:01,640 --> 00:20:06,710
attention on because otherwise it'll

438
00:20:03,079 --> 00:20:08,960
take us forever right so here I'm going

439
00:20:06,710 --> 00:20:12,798
to dump out these two in addition and

440
00:20:08,960 --> 00:20:14,808
then so we'll just run our app like we

441
00:20:12,798 --> 00:20:17,660
normally would and do exactly what we

442
00:20:14,808 --> 00:20:20,089
were gonna do the last time to dump so

443
00:20:17,660 --> 00:20:23,269
I'm just gonna come in here and say okay

444
00:20:20,089 --> 00:20:26,449
dump out now we should have a dump that

445
00:20:23,269 --> 00:20:29,480
has you know all of this same stuff in

446
00:20:26,450 --> 00:20:31,880
it but with the two editions of the the

447
00:20:29,480 --> 00:20:33,950
Box refs and the light boxes on the

448
00:20:31,880 --> 00:20:38,720
output side rather than only on the

449
00:20:33,950 --> 00:20:43,610
input side right so if I go into that

450
00:20:38,720 --> 00:20:47,329
code now and if I go into the test code

451
00:20:43,609 --> 00:20:49,729
I can now add those loaders in here so

452
00:20:47,329 --> 00:20:51,470
in here we can say all right we owe and

453
00:20:49,730 --> 00:20:53,390
by the way we can delete these now

454
00:20:51,470 --> 00:20:56,210
because we don't actually care about

455
00:20:53,390 --> 00:21:02,049
those there was no nothing was learned

456
00:20:56,210 --> 00:21:07,039
unfortunately why can I not delete that

457
00:21:02,048 --> 00:21:09,679
Thank You Windows so let's go ahead and

458
00:21:07,039 --> 00:21:14,119
take a look at loading these in if I if

459
00:21:09,679 --> 00:21:18,500
I do what did i call this result light

460
00:21:14,119 --> 00:21:25,058
boxes oops so if I load the result light

461
00:21:18,500 --> 00:21:29,440
boxes in and I load the result box refs

462
00:21:25,058 --> 00:21:29,440
box laughs yeah

463
00:21:30,548 --> 00:21:34,970
we can now validate those and validating

464
00:21:33,319 --> 00:21:36,918
those is pretty easy because all we

465
00:21:34,970 --> 00:21:40,009
really need to do is take this piece of

466
00:21:36,919 --> 00:21:41,870
code here and after we build the spatial

467
00:21:40,009 --> 00:21:46,579
partition which would be in this

468
00:21:41,869 --> 00:21:47,979
internal lighting core bit here right we

469
00:21:46,579 --> 00:21:53,379
just have to validate it

470
00:21:47,980 --> 00:21:55,210
so so after this call we would just

471
00:21:53,380 --> 00:21:56,620
validate and see if it's the same

472
00:21:55,210 --> 00:21:58,210
because I don't think there's any

473
00:21:56,619 --> 00:21:59,319
changes that happen in here there

474
00:21:58,210 --> 00:22:01,630
shouldn't be because again it's

475
00:21:59,319 --> 00:22:03,460
multi-threaded across so if people were

476
00:22:01,630 --> 00:22:05,890
updating that letting hierarchy during

477
00:22:03,460 --> 00:22:07,390
that it would be very bad so we should

478
00:22:05,890 --> 00:22:09,400
be able to verify these at the end and

479
00:22:07,390 --> 00:22:11,559
if they're wrong that's a bug anyway so

480
00:22:09,400 --> 00:22:13,750
I'm fine with that so what we want to do

481
00:22:11,558 --> 00:22:16,119
here is do our validation so we would

482
00:22:13,750 --> 00:22:18,940
right here we would say okay compare

483
00:22:16,119 --> 00:22:28,529
right and I thought we had a compare

484
00:22:18,940 --> 00:22:36,789
memory or diff memory maybe we don't are

485
00:22:28,529 --> 00:22:41,759
equal anyone anyone no I mean it's this

486
00:22:36,789 --> 00:22:46,000
code right you can just call this code

487
00:22:41,759 --> 00:22:48,069
it's exactly the same right you can see

488
00:22:46,000 --> 00:22:51,929
here it's it's the same this it's this

489
00:22:48,069 --> 00:22:51,928
routine so sure

490
00:22:58,920 --> 00:23:05,940
so all we need to do here is is do like

491
00:23:03,839 --> 00:23:08,399
a compare I don't I thought we had a mem

492
00:23:05,940 --> 00:23:15,630
compare but I guess we'd never called it

493
00:23:08,400 --> 00:23:17,400
that so yeah maybe we should I don't

494
00:23:15,630 --> 00:23:19,830
know we'll talk about that in a second

495
00:23:17,400 --> 00:23:22,740
but anyway so when we load this in

496
00:23:19,829 --> 00:23:24,509
here's our result light boxes and we

497
00:23:22,740 --> 00:23:26,779
want to take the count of that and

498
00:23:24,509 --> 00:23:29,430
here's the light result light boxes of

499
00:23:26,779 --> 00:23:33,539
data so that's one of the inputs and

500
00:23:29,430 --> 00:23:35,670
then we have in addition to the count

501
00:23:33,539 --> 00:23:39,649
and data for the light boxes we also

502
00:23:35,670 --> 00:23:43,529
want to be able to oh and you know what

503
00:23:39,650 --> 00:23:48,620
do we have an R equal on buffers gosh we

504
00:23:43,529 --> 00:23:51,839
don't this weird that's weird

505
00:23:48,619 --> 00:23:53,579
anyway so we want to compare the result

506
00:23:51,839 --> 00:23:55,559
light boxes to the light boxes that we

507
00:23:53,579 --> 00:23:58,649
actually have so the light box we

508
00:23:55,559 --> 00:24:04,889
actually have is however big a lighting

509
00:23:58,650 --> 00:24:07,050
box is oops times the account so I think

510
00:24:04,890 --> 00:24:15,180
that's that's all that is and then the

511
00:24:07,049 --> 00:24:19,559
solution light boxes I'm pretty sure

512
00:24:15,180 --> 00:24:24,779
right box hand boxes so that's all we're

513
00:24:19,559 --> 00:24:29,119
comparing there so if that fails then we

514
00:24:24,779 --> 00:24:29,119
want to print an error for that right

515
00:24:36,990 --> 00:24:42,960
so there's an error we can print for

516
00:24:39,058 --> 00:24:44,819
that and these have to be you know care

517
00:24:42,960 --> 00:24:46,079
star casts because we don't have the

518
00:24:44,819 --> 00:24:49,168
right function so that's why I think I

519
00:24:46,079 --> 00:24:55,589
want to make a function for that so

520
00:24:49,169 --> 00:25:00,480
that's all we need there and if I now

521
00:24:55,589 --> 00:25:03,148
run this here so that's messed up

522
00:25:00,480 --> 00:25:05,250
those don't match I mean that's great

523
00:25:03,148 --> 00:25:07,739
because it means that now we can

524
00:25:05,250 --> 00:25:12,119
actually go see how the heck are dump is

525
00:25:07,740 --> 00:25:12,538
failing so badly but you know it's weird

526
00:25:12,119 --> 00:25:14,189
right

527
00:25:12,538 --> 00:25:17,220
I must be missing something obvious

528
00:25:14,190 --> 00:25:19,230
which is always the case because you

529
00:25:17,220 --> 00:25:22,500
start thinking about complex reasons why

530
00:25:19,230 --> 00:25:24,569
your code is failing but and sometimes

531
00:25:22,500 --> 00:25:26,308
you find them immediately when you don't

532
00:25:24,569 --> 00:25:28,200
find them really it usually means that

533
00:25:26,308 --> 00:25:30,148
like something obvious is failing that

534
00:25:28,200 --> 00:25:33,509
you didn't think about that shouldn't be

535
00:25:30,148 --> 00:25:40,949
failing you're like Oh duh right so you

536
00:25:33,509 --> 00:25:56,970
know let's just go ahead here and see

537
00:25:40,950 --> 00:26:01,890
what's up solution box riffs so now

538
00:25:56,970 --> 00:26:04,190
we'll check both of those uh box table

539
00:26:01,890 --> 00:26:04,190
sorry

540
00:26:09,640 --> 00:26:15,070
there we go so I think that's better

541
00:26:18,220 --> 00:26:25,009
so basically none of this stuff is right

542
00:26:20,829 --> 00:26:27,649
so that's good I guess I mean it means

543
00:26:25,009 --> 00:26:30,470
that right off the bat we're wrong and

544
00:26:27,650 --> 00:26:32,929
if we're wrong immediately that's better

545
00:26:30,470 --> 00:26:35,210
than being wrong later I guess so I

546
00:26:32,929 --> 00:26:36,860
guess that's good I just to be honest

547
00:26:35,210 --> 00:26:41,870
don't really understand how that's

548
00:26:36,859 --> 00:26:42,949
possible it's a bit strange right so I

549
00:26:41,869 --> 00:26:44,808
don't know if that means like we're

550
00:26:42,950 --> 00:26:47,659
reading the data in wrong or were

551
00:26:44,808 --> 00:26:50,599
writing the data out wrong could also be

552
00:26:47,659 --> 00:26:52,970
the case I don't know but it seems weird

553
00:26:50,599 --> 00:26:55,609
and why we would get different results

554
00:26:52,970 --> 00:26:58,429
and build spatial partition I have no

555
00:26:55,609 --> 00:27:01,308
idea because you can see how simple this

556
00:26:58,429 --> 00:27:04,880
routine is it's not multi-threaded right

557
00:27:01,308 --> 00:27:08,298
so this we don't we don't attempt to do

558
00:27:04,880 --> 00:27:10,780
this across multiple threads so it's not

559
00:27:08,298 --> 00:27:14,990
even really doing anything interesting

560
00:27:10,779 --> 00:27:17,720
so okay I'm gonna go ahead and try to do

561
00:27:14,990 --> 00:27:22,159
this in a structured way here where we

562
00:27:17,720 --> 00:27:24,829
can actually do a test of what happens

563
00:27:22,159 --> 00:27:26,960
in the debug dump and then the debug

564
00:27:24,829 --> 00:27:29,569
reload which is going to be kind of a

565
00:27:26,960 --> 00:27:33,230
pain in the butt like it's not it's not

566
00:27:29,569 --> 00:27:37,069
gonna be fun but we're gonna try so

567
00:27:33,230 --> 00:27:40,610
here's how we're gonna do it and you

568
00:27:37,069 --> 00:27:44,899
know for better for worse I'm gonna set

569
00:27:40,609 --> 00:27:48,490
the debug trigger right so in here I'm

570
00:27:44,900 --> 00:27:52,009
gonna set this debug trigger to true

571
00:27:48,490 --> 00:27:53,839
okay so that means on the first time

572
00:27:52,009 --> 00:27:57,619
through we're gonna start dumping the

573
00:27:53,839 --> 00:28:00,949
data okay so if I now and I've set it to

574
00:27:57,619 --> 00:28:03,439
debug build right so when we come to

575
00:28:00,950 --> 00:28:05,840
internal lighting core we should the

576
00:28:03,440 --> 00:28:08,080
very first time we should come through

577
00:28:05,839 --> 00:28:10,369
here and we should hit this breakpoint

578
00:28:08,079 --> 00:28:14,210
before we've even seen a frame of our

579
00:28:10,369 --> 00:28:16,189
game right so then what I'm going to do

580
00:28:14,210 --> 00:28:18,829
is I'm going to say let's take a look at

581
00:28:16,190 --> 00:28:21,220
what the status of thing is is here so

582
00:28:18,829 --> 00:28:23,769
here's our solution right

583
00:28:21,220 --> 00:28:27,009
and here's the number of boxes that have

584
00:28:23,769 --> 00:28:29,230
been entered the box ref count is zero

585
00:28:27,009 --> 00:28:32,109
which it should be because we don't have

586
00:28:29,230 --> 00:28:36,069
anything we haven't built the spatial

587
00:28:32,109 --> 00:28:39,250
partition right so I'm going to go ahead

588
00:28:36,069 --> 00:28:44,168
and let this dump all of the things that

589
00:28:39,250 --> 00:28:48,400
we just talked about so you know oh so

590
00:28:44,169 --> 00:28:49,330
that's a bug right there as I just step

591
00:28:48,400 --> 00:28:58,570
through it that was supposed to be a

592
00:28:49,329 --> 00:29:08,529
star right you saw that right those miss

593
00:28:58,569 --> 00:29:10,529
me what's up at that mistakes you can't

594
00:29:08,529 --> 00:29:13,720
make when you have metaprogramming

595
00:29:10,529 --> 00:29:16,329
so anyway when we come through here now

596
00:29:13,720 --> 00:29:18,100
we're gonna dump that again and I guess

597
00:29:16,329 --> 00:29:19,210
now let's let's actually test to make

598
00:29:18,099 --> 00:29:23,428
sure that wasn't our only problem

599
00:29:19,210 --> 00:29:23,429
because that's a complete disaster right

600
00:29:33,710 --> 00:29:38,130
so now we should have our dumps here's

601
00:29:36,900 --> 00:29:40,140
the game running incredibly slowly

602
00:29:38,130 --> 00:29:41,700
because it's in debug mode we should

603
00:29:40,140 --> 00:29:43,050
have our dumps let's just see what

604
00:29:41,700 --> 00:29:46,279
happens now

605
00:29:43,049 --> 00:29:50,609
if we actually try to run the light Prof

606
00:29:46,279 --> 00:29:52,529
of course again this is in Seoul says

607
00:29:50,609 --> 00:29:54,059
they don't match so you know maybe we're

608
00:29:52,529 --> 00:29:57,920
still maybe that wasn't the only problem

609
00:29:54,059 --> 00:30:00,480
it's not so bad although I would say

610
00:29:57,920 --> 00:30:02,550
this error dropped dramatically just

611
00:30:00,480 --> 00:30:07,370
from that however we're still getting

612
00:30:02,549 --> 00:30:10,319
these two complaints so I'm not sure why

613
00:30:07,369 --> 00:30:18,559
that's a little bit messed up let me

614
00:30:10,319 --> 00:30:18,559
just see what's going on there

615
00:30:25,799 --> 00:30:33,159
so yeah I'm not sure why that is wrong

616
00:30:30,930 --> 00:30:38,799
because I don't feel like those should

617
00:30:33,160 --> 00:30:42,640
have been wrong so I think we still have

618
00:30:38,799 --> 00:30:47,079
some issues here now it could be that

619
00:30:42,640 --> 00:30:48,580
the only that there only it could be

620
00:30:47,079 --> 00:30:51,819
that the only reason that they don't

621
00:30:48,579 --> 00:30:54,460
match is because of again some like

622
00:30:51,819 --> 00:30:58,240
minor floating-point differences so I

623
00:30:54,460 --> 00:31:02,140
guess it's hard to say because when I

624
00:30:58,240 --> 00:31:05,049
look at this I'm like man that is well

625
00:31:02,140 --> 00:31:10,120
within floating-point tolerance now this

626
00:31:05,049 --> 00:31:15,069
was not really this is so if the total

627
00:31:10,119 --> 00:31:16,569
error across the entire sixty one six

628
00:31:15,069 --> 00:31:21,819
hundred and fourteen thousand four

629
00:31:16,569 --> 00:31:23,950
hundred texels was point for that error

630
00:31:21,819 --> 00:31:26,139
protects all is so low that's definitely

631
00:31:23,950 --> 00:31:35,740
down in we're floating point error could

632
00:31:26,140 --> 00:31:37,840
have done something so I don't really

633
00:31:35,740 --> 00:31:40,500
know now so let's actually make

634
00:31:37,839 --> 00:31:43,209
something that validates our light boxes

635
00:31:40,500 --> 00:31:45,910
to see what the floating point error is

636
00:31:43,210 --> 00:31:50,289
of them which will take a little bit

637
00:31:45,910 --> 00:31:55,690
more time although if the box refs are

638
00:31:50,289 --> 00:32:00,759
different so the box refs though

639
00:31:55,690 --> 00:32:03,940
shouldn't be different right because the

640
00:32:00,759 --> 00:32:06,099
box refs are just numbers and unless the

641
00:32:03,940 --> 00:32:08,529
floating point error was so large that

642
00:32:06,099 --> 00:32:10,779
it actually caused us to make different

643
00:32:08,529 --> 00:32:12,879
decisions when we were splitting the

644
00:32:10,779 --> 00:32:16,589
lighting we shouldn't have had that

645
00:32:12,880 --> 00:32:22,630
happen so I'm gonna go ahead and say

646
00:32:16,589 --> 00:32:25,119
yeah I'm not not comfortable yet I'm

647
00:32:22,630 --> 00:32:27,460
still a little worried so let's do what

648
00:32:25,119 --> 00:32:32,259
I was going to do we found one problem

649
00:32:27,460 --> 00:32:35,529
so good on us but I'm I'm not convinced

650
00:32:32,259 --> 00:32:37,158
yet so we'll we'll leave it at that for

651
00:32:35,529 --> 00:32:40,129
now

652
00:32:37,159 --> 00:32:41,539
oh so there right yeah okay so we just

653
00:32:40,130 --> 00:32:47,480
we had a cop we had a cut-and-paste

654
00:32:41,538 --> 00:32:48,740
there there though right I'm glad to

655
00:32:47,480 --> 00:32:51,710
know it was our dump that was wrong and

656
00:32:48,740 --> 00:32:56,028
not our code cuz the debug dump being

657
00:32:51,710 --> 00:32:58,090
wrong is is much easier to fix uh where

658
00:32:56,028 --> 00:33:08,839
was that

659
00:32:58,089 --> 00:33:13,158
so there you go all right okay so let me

660
00:33:08,839 --> 00:33:21,558
try that one more time here's the run of

661
00:33:13,159 --> 00:33:25,639
the game again in debug mode okay

662
00:33:21,558 --> 00:33:30,950
so super slow debug mode run like prof.

663
00:33:25,638 --> 00:33:33,798
run so it looks like our box refs are a

664
00:33:30,950 --> 00:33:35,899
little bork there but the light boxes

665
00:33:33,798 --> 00:33:37,398
were correct so I'm not sure why that

666
00:33:35,898 --> 00:33:42,619
would be the case but let's go ahead and

667
00:33:37,398 --> 00:33:46,689
take a look did I mess up this as well

668
00:33:42,619 --> 00:33:51,469
so box ref count times the box table

669
00:33:46,690 --> 00:33:54,500
pointed to the table I think that should

670
00:33:51,470 --> 00:33:59,210
be right shouldn't it box with Count

671
00:33:54,500 --> 00:34:07,339
time session Punk's table time support

672
00:33:59,210 --> 00:34:09,230
of the box table hmm so yeah I don't

673
00:34:07,339 --> 00:34:12,049
know about that let's go ahead and take

674
00:34:09,230 --> 00:34:14,179
a look at those values cuz we should be

675
00:34:12,050 --> 00:34:15,980
able to validate that those are right or

676
00:34:14,179 --> 00:34:19,369
wrong pretty easily with the setup we've

677
00:34:15,980 --> 00:34:24,318
got so let's just see so let's go ahead

678
00:34:19,369 --> 00:34:30,139
to the debug dump of the box table the

679
00:34:24,318 --> 00:34:34,699
reference table so in here we would

680
00:34:30,139 --> 00:34:37,280
expect to see this box table come out

681
00:34:34,699 --> 00:34:42,378
right so this is what we would expect to

682
00:34:37,280 --> 00:34:44,929
see coming out when we dump and the size

683
00:34:42,378 --> 00:34:48,289
that we would expect if we look at the

684
00:34:44,929 --> 00:34:50,289
Box ref count here so the Box ref count

685
00:34:48,289 --> 00:34:58,150
is 25

686
00:34:50,289 --> 00:35:00,970
25 24 25 24 times 2 which is the total

687
00:34:58,150 --> 00:35:04,480
size of the of each reference because

688
00:35:00,969 --> 00:35:06,669
each reference is au 16 should be 5048

689
00:35:04,480 --> 00:35:09,248
so when we step in here and we asked

690
00:35:06,670 --> 00:35:13,778
dump what we would like to see is that

691
00:35:09,248 --> 00:35:17,739
number and we do so that's fine right

692
00:35:13,778 --> 00:35:19,858
and if I copy this value in here so we

693
00:35:17,739 --> 00:35:21,909
remember what it is

694
00:35:19,858 --> 00:35:23,380
although I guess I don't even have to do

695
00:35:21,909 --> 00:35:25,389
that really what I can do is just put

696
00:35:23,380 --> 00:35:27,970
this on the side so I'm going to go

697
00:35:25,389 --> 00:35:30,068
ahead and run another copy of remedy and

698
00:35:27,969 --> 00:35:34,358
I'm just gonna put it like over here

699
00:35:30,068 --> 00:35:37,480
right I'm gonna go in to the recent menu

700
00:35:34,358 --> 00:35:41,108
and load up the profile program now and

701
00:35:37,480 --> 00:35:44,798
I'm gonna step in to that so we're gonna

702
00:35:41,108 --> 00:35:47,318
launch it in D hand-made debug I'm gonna

703
00:35:44,798 --> 00:35:50,409
step through here and I just want to see

704
00:35:47,318 --> 00:35:52,960
what happens when we like go to do this

705
00:35:50,409 --> 00:35:57,129
comparison like what's actually happens

706
00:35:52,960 --> 00:35:58,929
wrong so here's where we're gonna get

707
00:35:57,130 --> 00:36:01,480
that printf so here's where we're saying

708
00:35:58,929 --> 00:36:10,739
that it's busted so if we look at result

709
00:36:01,480 --> 00:36:14,739
box refs so that size is wrong 53 72 is

710
00:36:10,739 --> 00:36:18,338
not correct so when we did our F tell

711
00:36:14,739 --> 00:36:23,858
for that file we didn't get 50 48 right

712
00:36:18,338 --> 00:36:29,889
I mean that's just a truncation problem

713
00:36:23,858 --> 00:36:33,098
yeah so so that's just plain busted and

714
00:36:29,889 --> 00:36:36,338
I'm not sure what is exactly busted

715
00:36:33,099 --> 00:36:39,910
about it but like this process didn't

716
00:36:36,338 --> 00:36:41,909
work properly or something and so we

717
00:36:39,909 --> 00:36:43,719
would need to figure out like what

718
00:36:41,909 --> 00:36:46,139
what's happening there

719
00:36:43,719 --> 00:36:46,139
right

720
00:36:50,289 --> 00:36:58,329
and that seems odd it's almost like it's

721
00:36:56,619 --> 00:37:01,650
ignoring this or something I don't know

722
00:36:58,329 --> 00:37:05,739
but anyway so if you look at that size

723
00:37:01,650 --> 00:37:09,940
we expect that dump to be oh no no no no

724
00:37:05,739 --> 00:37:16,659
okay sorry I I went too fast this has to

725
00:37:09,940 --> 00:37:19,750
actually do the dump first so now it has

726
00:37:16,659 --> 00:37:24,789
dumped that file and hopefully now this

727
00:37:19,750 --> 00:37:30,250
would be correct my bat got a little bit

728
00:37:24,789 --> 00:37:31,690
too aggressive there now I'm still not

729
00:37:30,250 --> 00:37:35,260
optimistic about that because it should

730
00:37:31,690 --> 00:37:37,900
be the same either case right like it's

731
00:37:35,260 --> 00:37:39,340
a it's on startup that that happened so

732
00:37:37,900 --> 00:37:42,070
I'm not sure why we would ever get

733
00:37:39,340 --> 00:37:46,240
different results but you know just

734
00:37:42,070 --> 00:37:48,789
trying to be fair here right all right

735
00:37:46,239 --> 00:37:51,549
so yeah it's still wrong so that's what

736
00:37:48,789 --> 00:37:54,039
I would have expected so somehow the

737
00:37:51,550 --> 00:37:56,170
5048 dump we're getting the wrong value

738
00:37:54,039 --> 00:37:57,880
there and I'm not sure exactly what the

739
00:37:56,170 --> 00:37:59,260
reason is possibly because the FTL mode

740
00:37:57,880 --> 00:38:02,289
isn't stable way to do that I don't know

741
00:37:59,260 --> 00:38:06,100
if we look at result box reps dump

742
00:38:02,289 --> 00:38:10,029
though 53 72 is the actual size of it so

743
00:38:06,099 --> 00:38:11,769
why this is not working is a little bit

744
00:38:10,030 --> 00:38:15,600
confusing right because we tried to

745
00:38:11,769 --> 00:38:19,509
write it out at that size but didn't and

746
00:38:15,599 --> 00:38:23,500
it's not clear why so that's our first

747
00:38:19,510 --> 00:38:26,320
problem right because there's result box

748
00:38:23,500 --> 00:38:28,090
refs boxes that dump that's what we

749
00:38:26,320 --> 00:38:31,809
tried to write out expect it to be that

750
00:38:28,090 --> 00:38:34,210
big and it wasn't so let's go ahead and

751
00:38:31,809 --> 00:38:34,420
see if we can figure out why that's the

752
00:38:34,210 --> 00:38:36,280
case

753
00:38:34,420 --> 00:38:40,210
look why we didn't get the size we

754
00:38:36,280 --> 00:38:44,410
expected I'm gonna go in here and turn

755
00:38:40,210 --> 00:38:46,840
this off the I'm gonna stop the debug of

756
00:38:44,409 --> 00:38:51,219
the light prof program so I'm gonna take

757
00:38:46,840 --> 00:38:54,280
a jump back into this debug dump output

758
00:38:51,219 --> 00:38:56,230
and see what is going on there so if I

759
00:38:54,280 --> 00:38:59,740
come in here and I say I want to write

760
00:38:56,230 --> 00:39:03,530
data to file I'm expecting 50 48 I come

761
00:38:59,739 --> 00:39:06,699
in here and we go alright

762
00:39:03,530 --> 00:39:10,970
you know what's going on

763
00:39:06,699 --> 00:39:13,368
it looks like this so I can tell already

764
00:39:10,969 --> 00:39:16,848
what the problem is so it looks like the

765
00:39:13,369 --> 00:39:19,280
problem here is that we don't have a way

766
00:39:16,849 --> 00:39:25,849
of saying that it should set the file

767
00:39:19,280 --> 00:39:31,400
size I guess right like it's just going

768
00:39:25,849 --> 00:39:33,380
to replace that files first part and I

769
00:39:31,400 --> 00:39:46,639
don't know that we ever put in a way to

770
00:39:33,380 --> 00:39:48,588
change that so this right here um we can

771
00:39:46,639 --> 00:39:50,568
fix the comparison but we might want to

772
00:39:48,588 --> 00:39:52,190
actually add a way to set the file size

773
00:39:50,568 --> 00:39:53,440
because currently we don't have that so

774
00:39:52,190 --> 00:39:57,559
the dumps aren't the right size

775
00:39:53,440 --> 00:40:00,829
necessarily right so when we do platform

776
00:39:57,559 --> 00:40:03,650
right data to file it doesn't look like

777
00:40:00,829 --> 00:40:06,890
we have a way to set what we expect the

778
00:40:03,650 --> 00:40:08,180
file size to be right and that would be

779
00:40:06,889 --> 00:40:10,098
a platform function that we would

780
00:40:08,179 --> 00:40:12,858
actually need unless we have a way to

781
00:40:10,099 --> 00:40:15,440
say just replace the file when you

782
00:40:12,858 --> 00:40:17,989
actually open it but I don't think we do

783
00:40:15,440 --> 00:40:20,630
right so we have like open file like

784
00:40:17,989 --> 00:40:24,549
read and open file right we don't have

785
00:40:20,630 --> 00:40:26,390
an open file replace so I don't know I

786
00:40:24,550 --> 00:40:29,650
don't know that I actually want to do

787
00:40:26,389 --> 00:40:29,650
that now but I might just say

788
00:40:37,190 --> 00:40:42,950
so the way we can fix this though is

789
00:40:39,318 --> 00:40:44,869
pretty simple we would just say look we

790
00:40:42,949 --> 00:40:47,598
don't really care about what the size

791
00:40:44,869 --> 00:40:51,200
was we're gonna use this size in both

792
00:40:47,599 --> 00:41:05,150
cases right so regardless of what you

793
00:40:51,199 --> 00:41:10,129
load we we just use this so something

794
00:41:05,150 --> 00:41:13,160
like this so this validates that all of

795
00:41:10,130 --> 00:41:14,690
them are the same but it doesn't

796
00:41:13,159 --> 00:41:17,568
actually check the size of the data

797
00:41:14,690 --> 00:41:19,970
which I don't love so I feel like we

798
00:41:17,568 --> 00:41:21,289
probably don't really yeah I feel like

799
00:41:19,969 --> 00:41:23,299
we probably don't really want that we

800
00:41:21,289 --> 00:41:23,769
want the dump to be what it is you know

801
00:41:23,300 --> 00:41:26,568
what I mean

802
00:41:23,769 --> 00:41:27,858
so I guess what I would say is let's

803
00:41:26,568 --> 00:41:32,980
let's just do it let's just bite the

804
00:41:27,858 --> 00:41:32,980
bullet man you know I'm saying to you

805
00:41:34,179 --> 00:41:38,358
let's just bite the bullet so let's go

806
00:41:37,010 --> 00:41:41,060
in here and say all right there's gonna

807
00:41:38,358 --> 00:41:42,828
be a way that we can change this so in

808
00:41:41,059 --> 00:41:49,578
here we can say like open file close

809
00:41:42,829 --> 00:41:53,750
file and they'll also be like set file

810
00:41:49,579 --> 00:41:55,940
size right so in here we can do a thing

811
00:41:53,750 --> 00:41:56,929
where we're actually gonna have you know

812
00:41:55,940 --> 00:41:58,550
much like we had all the rest of these

813
00:41:56,929 --> 00:42:00,559
platform things we're gonna have exactly

814
00:41:58,550 --> 00:42:04,550
the same thing and so when we have you

815
00:42:00,559 --> 00:42:07,039
know one of these open file things then

816
00:42:04,550 --> 00:42:10,010
we can have a set file size so in

817
00:42:07,039 --> 00:42:12,739
addition to so in addition to like write

818
00:42:10,010 --> 00:42:18,400
data to file we would have one here

819
00:42:12,739 --> 00:42:26,108
that's like platform set file size and

820
00:42:18,400 --> 00:42:26,108
it's really just that that's it

821
00:42:30,070 --> 00:42:38,480
and if I go into the win32 code here and

822
00:42:35,239 --> 00:42:44,059
look for the open file part of things so

823
00:42:38,480 --> 00:42:50,059
platform open files here we should be

824
00:42:44,059 --> 00:42:54,880
able to just do you know a set file size

825
00:42:50,059 --> 00:43:01,429
call right so in here we do like win32

826
00:42:54,880 --> 00:43:04,280
set file size and here's the handle ie

827
00:43:01,429 --> 00:43:10,909
don't actually remember offhand what the

828
00:43:04,280 --> 00:43:14,089
prototype is for that set into file

829
00:43:10,909 --> 00:43:17,449
that's what's called so I'm pretty sure

830
00:43:14,088 --> 00:43:22,029
the only way to do it well that's not

831
00:43:17,449 --> 00:43:22,029
true there is a different way to do it

832
00:43:28,789 --> 00:43:35,309
if you want to set the end of a file

833
00:43:32,429 --> 00:43:36,359
with the old-school win32 API switch is

834
00:43:35,309 --> 00:43:39,509
mostly what we've been using so I think

835
00:43:36,360 --> 00:43:41,280
we should you first have to move the

836
00:43:39,510 --> 00:43:45,360
file cursor to the end of the file and

837
00:43:41,280 --> 00:43:50,220
then set the end of the file if you want

838
00:43:45,360 --> 00:43:52,380
to use a a single call to do it I think

839
00:43:50,219 --> 00:43:55,259
there is a way to do it it's called like

840
00:43:52,380 --> 00:43:59,190
set file info or some px or something

841
00:43:55,260 --> 00:44:06,810
like this you actually can do it it's

842
00:43:59,190 --> 00:44:08,490
just it's only in like Windows 8 and up

843
00:44:06,809 --> 00:44:10,980
or one of those it's one of those things

844
00:44:08,489 --> 00:44:22,949
I'm sorry I can't remember which one it

845
00:44:10,980 --> 00:44:25,590
is at the moment I'm I'm 99.9% sure I

846
00:44:22,949 --> 00:44:27,329
just can't remember what it's called so

847
00:44:25,590 --> 00:44:36,720
you'll just have to take my word for it

848
00:44:27,329 --> 00:44:38,099
you can do that what's this guy I don't

849
00:44:36,719 --> 00:44:41,879
think that's what that's not what I was

850
00:44:38,099 --> 00:44:47,429
thinking of so I apologize there's no

851
00:44:41,880 --> 00:44:48,420
real way to there's no real way for me

852
00:44:47,429 --> 00:44:49,859
to tell you how to do it cuz I don't

853
00:44:48,420 --> 00:44:51,119
remember what the call is and it's hard

854
00:44:49,860 --> 00:44:53,430
to find in here but you'll just have to

855
00:44:51,119 --> 00:44:56,309
trust me there is a way you can do that

856
00:44:53,429 --> 00:44:57,839
I'm pretty sure with one call but we're

857
00:44:56,309 --> 00:45:00,059
gonna do it in two to use the old-school

858
00:44:57,840 --> 00:45:03,809
ones that work back in on XP and

859
00:45:00,059 --> 00:45:09,989
everything right so if we call set file

860
00:45:03,809 --> 00:45:13,920
pointer X here oops

861
00:45:09,989 --> 00:45:17,689
like so and then we do set file end or

862
00:45:13,920 --> 00:45:17,690
set end of file it was called

863
00:45:24,480 --> 00:45:37,980
set end-of-file that will do it

864
00:45:35,280 --> 00:45:46,230
and there is a little bit of an issue

865
00:45:37,980 --> 00:45:50,699
here with race conditions if you use set

866
00:45:46,230 --> 00:45:53,699
file pointer anywhere else thankfully as

867
00:45:50,699 --> 00:45:55,828
you can see we always just use the

868
00:45:53,699 --> 00:45:58,919
directed read so do you see how we use

869
00:45:55,829 --> 00:46:01,019
the overlapped read here so we never set

870
00:45:58,920 --> 00:46:03,329
the file pointer so the fact that we

871
00:46:01,019 --> 00:46:05,789
only set it here means that there won't

872
00:46:03,329 --> 00:46:07,980
be any race conditions because even if

873
00:46:05,789 --> 00:46:10,289
two people call set file size at the

874
00:46:07,980 --> 00:46:11,940
same time well one of them was going to

875
00:46:10,289 --> 00:46:14,130
win anyway if they were both calling it

876
00:46:11,940 --> 00:46:17,880
unlocked so it doesn't matter whose set

877
00:46:14,130 --> 00:46:20,849
file pointer ends up working right so if

878
00:46:17,880 --> 00:46:42,150
you do it this way and I'll put this in

879
00:46:20,849 --> 00:46:43,440
here you know I'm Sam so there's a

880
00:46:42,150 --> 00:46:45,088
subtlety there that's worth

881
00:46:43,440 --> 00:46:46,380
understanding if you're going to be

882
00:46:45,088 --> 00:46:48,539
doing this in your own code base you

883
00:46:46,380 --> 00:46:50,579
can't be using the file pointer for your

884
00:46:48,539 --> 00:46:53,068
reads and writes if you're using it for

885
00:46:50,579 --> 00:46:55,318
this because or you could but you'd have

886
00:46:53,068 --> 00:46:57,269
to introduce locking right because

887
00:46:55,318 --> 00:46:59,489
otherwise what could happen is you'd set

888
00:46:57,269 --> 00:47:03,420
the file pointer e.x your thread gets

889
00:46:59,489 --> 00:47:06,299
suspended right here before set into

890
00:47:03,420 --> 00:47:08,490
file somebody else issues a write sets

891
00:47:06,300 --> 00:47:09,510
the file pointer somewhere else then you

892
00:47:08,489 --> 00:47:14,429
end up doing

893
00:47:09,510 --> 00:47:15,569
set end of file CNM saying and you you

894
00:47:14,429 --> 00:47:17,399
end up setting them to the file there

895
00:47:15,568 --> 00:47:19,440
which is not what anyone ever asked for

896
00:47:17,400 --> 00:47:25,769
so it's a completely nonsensical result

897
00:47:19,440 --> 00:47:29,550
does that make sense so that's just it's

898
00:47:25,769 --> 00:47:30,989
got to understand it that's all so we

899
00:47:29,550 --> 00:47:33,740
don't really have to do much it's it's

900
00:47:30,989 --> 00:47:33,739
literally just this

901
00:47:37,590 --> 00:47:47,769
and we can put an error here as well but

902
00:47:45,519 --> 00:47:51,869
that's the entirety of the code so set

903
00:47:47,769 --> 00:47:51,869
file pointer reacts takes the handle a

904
00:47:53,309 --> 00:48:05,980
large integer the move method is just

905
00:47:56,739 --> 00:48:12,669
set so file begin and then the new file

906
00:48:05,980 --> 00:48:16,059
pointer so we don't care about that we

907
00:48:12,670 --> 00:48:18,869
need to put this in a large integer just

908
00:48:16,059 --> 00:48:30,369
because that's what it's used to taking

909
00:48:18,869 --> 00:48:33,029
so let's go ahead and do that we can set

910
00:48:30,369 --> 00:48:33,029
quad part

911
00:48:43,188 --> 00:48:52,259
so maybe this let's say oops so we fill

912
00:48:49,949 --> 00:48:58,769
out a large integer we'll pass that down

913
00:48:52,259 --> 00:49:04,009
and we'll call it a day what did I do

914
00:48:58,768 --> 00:49:04,008
wrong there win32 file error Oh oops

915
00:49:08,900 --> 00:49:15,778
all right so I think that's it

916
00:49:13,099 --> 00:49:18,689
we obviously have to fill this out so

917
00:49:15,778 --> 00:49:21,418
in-game memory platform API set file

918
00:49:18,688 --> 00:49:36,328
size we have to do you know

919
00:49:21,418 --> 00:49:39,088
remember that set file size there and I

920
00:49:36,329 --> 00:49:41,219
think now if we just call that in our

921
00:49:39,088 --> 00:49:48,538
lighting code our dump should be correct

922
00:49:41,219 --> 00:49:51,599
so in debug dump data not that one in

923
00:49:48,539 --> 00:49:54,059
debug dump data in here before we close

924
00:49:51,599 --> 00:49:58,259
the file we would just say platform set

925
00:49:54,059 --> 00:50:04,528
file size and we'd tell it that the dump

926
00:49:58,259 --> 00:50:05,849
size was the entire size right so I just

927
00:50:04,528 --> 00:50:08,130
feel more comfortable with that that's

928
00:50:05,849 --> 00:50:10,949
how it should work in the first place so

929
00:50:08,130 --> 00:50:13,429
let's just see if that fixes our

930
00:50:10,949 --> 00:50:13,429
situation

931
00:50:18,449 --> 00:50:25,449
all right so we should have a data dump

932
00:50:21,579 --> 00:50:37,568
now from the first run and I should be

933
00:50:25,449 --> 00:50:41,368
able to validate that hmm perfect so I

934
00:50:37,568 --> 00:50:43,808
guess what I would say is I'm fairly

935
00:50:41,369 --> 00:50:52,180
confident that that's a reasonable

936
00:50:43,809 --> 00:50:54,130
result if the total error in your entire

937
00:50:52,179 --> 00:50:56,018
thing is that you know what I might want

938
00:50:54,130 --> 00:50:59,170
to do though let's also take the max

939
00:50:56,018 --> 00:51:02,558
error because if all of that error came

940
00:50:59,170 --> 00:51:04,809
from one pixel that would be bad so we

941
00:51:02,559 --> 00:51:06,849
don't really care I guess what the total

942
00:51:04,809 --> 00:51:09,249
error is so much as we care what the

943
00:51:06,849 --> 00:51:29,170
maximum error is so let's make sure we

944
00:51:09,248 --> 00:51:31,838
track that so this will tell us for the

945
00:51:29,170 --> 00:51:35,019
part of the image for the Texel that's

946
00:51:31,838 --> 00:51:36,759
the absolute worst at replicating the

947
00:51:35,018 --> 00:51:40,508
original results what was it

948
00:51:36,759 --> 00:51:46,838
right um and so if we take a look at

949
00:51:40,509 --> 00:51:50,639
that value you know like it's below the

950
00:51:46,838 --> 00:51:52,920
visible range but does it mean you know

951
00:51:50,639 --> 00:51:56,318
0.01 would I have liked it to be lower

952
00:51:52,920 --> 00:52:01,269
probably is it possibly with still

953
00:51:56,318 --> 00:52:05,068
within range maybe is it possibly a bug

954
00:52:01,268 --> 00:52:05,068
I don't know right

955
00:52:31,650 --> 00:52:38,740
so I'm not sure how to validate this

956
00:52:34,389 --> 00:52:45,339
further again the problem with compiling

957
00:52:38,739 --> 00:52:46,929
two different pieces of code or I should

958
00:52:45,340 --> 00:52:49,390
say two versions of the same piece of

959
00:52:46,929 --> 00:52:52,029
code is if they're floating point they

960
00:52:49,389 --> 00:52:54,429
could come out completely different so

961
00:52:52,030 --> 00:52:57,010
it's a little bit hard to know what to

962
00:52:54,429 --> 00:53:04,089
validate in that case I'm gonna go ahead

963
00:52:57,010 --> 00:53:06,190
and see if I run the game in retail mode

964
00:53:04,090 --> 00:53:09,400
I want to see what it what the

965
00:53:06,190 --> 00:53:11,740
validation error looks like there and

966
00:53:09,400 --> 00:53:14,769
maybe I also want to see what the error

967
00:53:11,739 --> 00:53:19,229
looks like in another scenario so let's

968
00:53:14,769 --> 00:53:22,509
suppose that I also go somewhere else

969
00:53:19,230 --> 00:53:25,300
you know what I'll also turn off the the

970
00:53:22,510 --> 00:53:27,220
auto dump since we don't really need

971
00:53:25,300 --> 00:53:34,150
that to be happening every time we start

972
00:53:27,219 --> 00:53:35,889
the game what's at that false so I'm

973
00:53:34,150 --> 00:53:38,440
gonna go ahead and run to a different

974
00:53:35,889 --> 00:53:40,598
location and see if the error stays

975
00:53:38,440 --> 00:53:44,650
roughly the same everywhere which would

976
00:53:40,599 --> 00:53:46,838
be better at least a slightly better

977
00:53:44,650 --> 00:53:49,180
indication I mean it's not risked a

978
00:53:46,838 --> 00:53:55,029
little not really good but so if I dump

979
00:53:49,179 --> 00:53:59,608
there oops if I dump there what do we

980
00:53:55,030 --> 00:53:59,609
get similar level of error

981
00:54:13,639 --> 00:54:22,309
hire error there I mean I guess not

982
00:54:18,420 --> 00:54:22,309
super much higher but like still

983
00:54:32,510 --> 00:54:41,610
so I don't know I'm nervous about it

984
00:54:36,329 --> 00:54:46,519
like the total error per Texel is still

985
00:54:41,610 --> 00:54:52,740
low but the max error is kind of high

986
00:54:46,519 --> 00:55:00,179
you know what I'm saying to you and like

987
00:54:52,739 --> 00:55:01,679
what's this about right again that could

988
00:55:00,179 --> 00:55:03,659
just be because of floating-point

989
00:55:01,679 --> 00:55:19,469
differences between the two compilations

990
00:55:03,659 --> 00:55:21,929
but it's very hard to know so I'm just

991
00:55:19,469 --> 00:55:26,009
not sure how to proceed I guess what I

992
00:55:21,929 --> 00:55:27,929
would say is I suppose I'm comfortable

993
00:55:26,010 --> 00:55:30,120
with proceeding from here without

994
00:55:27,929 --> 00:55:32,399
further validation for one reason and

995
00:55:30,119 --> 00:55:35,969
that is because the end result of this

996
00:55:32,400 --> 00:55:40,079
is just to produce the lighting result

997
00:55:35,969 --> 00:55:42,809
anyway so when we put if we change the

998
00:55:40,079 --> 00:55:47,940
code around and put it back into our

999
00:55:42,809 --> 00:55:49,739
game we will see the error when we run

1000
00:55:47,940 --> 00:55:53,039
if it's wrong like meaning if it

1001
00:55:49,739 --> 00:55:54,239
produces an unusable result we'd know so

1002
00:55:53,039 --> 00:56:03,000
I suppose I'm okay with that

1003
00:55:54,239 --> 00:56:04,529
I suppose so maybe I'm okay going

1004
00:56:03,000 --> 00:56:07,320
forward with that I don't know how much

1005
00:56:04,530 --> 00:56:08,930
time I have here does anyone know how

1006
00:56:07,320 --> 00:56:11,400
much time I have left

1007
00:56:08,929 --> 00:56:14,239
just one o'clock twelve I have at least

1008
00:56:11,400 --> 00:56:14,240
a half an hour right

1009
00:56:25,210 --> 00:56:34,159
alright let me just try some stuff here

1010
00:56:29,989 --> 00:56:38,209
so let me see and what we want to do I'm

1011
00:56:34,159 --> 00:56:39,710
gonna go - oops not Visual Studio they

1012
00:56:38,210 --> 00:56:48,280
should be to an amplifier that's what it

1013
00:56:39,710 --> 00:56:48,280
we want so I'm gonna go ahead and

1014
00:56:49,088 --> 00:56:57,940
running an analysis here I'm gonna go to

1015
00:56:54,820 --> 00:57:01,280
our oops

1016
00:56:57,940 --> 00:57:08,450
our instructions per clock let me take a

1017
00:57:01,280 --> 00:57:12,430
look at those I just want to see what's

1018
00:57:08,449 --> 00:57:12,429
going on oops

1019
00:57:20,159 --> 00:57:30,599
how do I get back - I'm so bad it be -

1020
00:57:26,659 --> 00:57:31,859
so bad it be tuned how do I get back to

1021
00:57:30,599 --> 00:57:35,460
the way you've launched an application

1022
00:57:31,860 --> 00:57:45,570
there we go so this is no longer gonna

1023
00:57:35,460 --> 00:57:47,340
be a thing and now we go so run says

1024
00:57:45,570 --> 00:57:50,550
light boxes don't magic and oh right

1025
00:57:47,340 --> 00:57:52,740
because it because they don't so now we

1026
00:57:50,550 --> 00:57:56,760
have a problem that our thing runs too

1027
00:57:52,739 --> 00:58:01,799
quickly right because we we have this

1028
00:57:56,760 --> 00:58:06,330
situation where we're only running one

1029
00:58:01,800 --> 00:58:09,240
frame in one frame hmm through the

1030
00:58:06,329 --> 00:58:10,710
system so I'm not sure how we want to

1031
00:58:09,239 --> 00:58:14,399
get around that normally what we'd like

1032
00:58:10,710 --> 00:58:16,949
to do is run the thing many times but

1033
00:58:14,400 --> 00:58:21,510
I'm not sure how feasible that actually

1034
00:58:16,949 --> 00:58:23,849
is I suppose we could just set the box

1035
00:58:21,510 --> 00:58:28,140
rest in the box back the boxes back

1036
00:58:23,849 --> 00:58:31,199
every time and just rerun it but really

1037
00:58:28,139 --> 00:58:33,599
we only care about just that one piece

1038
00:58:31,199 --> 00:58:38,269
of the lighting core anyway so I suppose

1039
00:58:33,599 --> 00:58:41,460
what we could do is maybe something like

1040
00:58:38,269 --> 00:58:44,280
inside internal lighting core if we want

1041
00:58:41,460 --> 00:58:52,559
to just run the work distribution many

1042
00:58:44,280 --> 00:58:55,280
times we just do so maybe this thing we

1043
00:58:52,559 --> 00:58:55,279
just do like

1044
00:58:59,550 --> 00:59:28,980
something like this so we can pass a

1045
00:59:22,909 --> 00:59:43,889
repeat index in here and actually you

1046
00:59:28,980 --> 00:59:45,269
know what let me do it this way so we'll

1047
00:59:43,889 --> 00:59:46,980
just say the debug repeat count is

1048
00:59:45,269 --> 00:59:49,230
something that you can pass in normally

1049
00:59:46,980 --> 00:59:50,849
it only runs one time but if you want to

1050
00:59:49,230 --> 00:59:54,210
you can tell it to run like lots of

1051
00:59:50,849 --> 00:59:58,019
times so we can tell this to do you know

1052
00:59:54,210 --> 01:00:02,750
200 frames or you know let's say we want

1053
00:59:58,019 --> 01:00:02,750
to run for 5 seconds or something

1054
01:00:11,039 --> 01:00:18,610
and now we won't validate if that's set

1055
01:00:15,400 --> 01:00:29,889
so we can't do a validation on here but

1056
01:00:18,610 --> 01:00:36,099
you know we can just say if repeat count

1057
01:00:29,889 --> 01:00:47,710
was one then we can validate otherwise

1058
01:00:36,099 --> 01:00:52,779
we can't write so yeah we can do

1059
01:00:47,710 --> 01:00:56,099
something like that and it's a little

1060
01:00:52,780 --> 01:01:00,310
bit annoying we probably want to do run

1061
01:00:56,099 --> 01:01:02,529
where we do the repeat count at the end

1062
01:01:00,309 --> 01:01:04,150
just for validation purposes so we

1063
01:01:02,530 --> 01:01:11,590
probably want to do something more like

1064
01:01:04,150 --> 01:01:17,619
this where we say internal you know

1065
01:01:11,590 --> 01:01:22,829
debug run or profile run and what we

1066
01:01:17,619 --> 01:01:22,829
would do is this entire nonsense right

1067
01:01:25,949 --> 01:01:32,799
we would do the whole thing twice right

1068
01:01:30,070 --> 01:01:34,960
so what we would do is probably

1069
01:01:32,800 --> 01:01:39,160
something like this where the repeat

1070
01:01:34,960 --> 01:01:43,530
count is isn't here so we passed their

1071
01:01:39,159 --> 01:01:46,089
repeat count in or something right and

1072
01:01:43,530 --> 01:01:48,610
when we do the profile run we just do

1073
01:01:46,090 --> 01:01:54,340
two of them so we do one and then we do

1074
01:01:48,610 --> 01:01:57,340
you know a bunch right and that way we

1075
01:01:54,340 --> 01:02:01,150
would do them both ways we would do them

1076
01:01:57,340 --> 01:02:03,309
one way for you know for validation and

1077
01:02:01,150 --> 01:02:05,980
then another way for just trying to time

1078
01:02:03,309 --> 01:02:06,639
the thing you know I'm saying so we do

1079
01:02:05,980 --> 01:02:08,440
something like that

1080
01:02:06,639 --> 01:02:10,420
and it would print out that thing then

1081
01:02:08,440 --> 01:02:12,599
it you don't print out the error and all

1082
01:02:10,420 --> 01:02:17,650
that so we could see if it went rogue

1083
01:02:12,599 --> 01:02:21,039
and then we also have one where you know

1084
01:02:17,650 --> 01:02:23,650
we would then stall out like we're doing

1085
01:02:21,039 --> 01:02:24,190
here to take a long time I don't know

1086
01:02:23,650 --> 01:02:26,170
how

1087
01:02:24,190 --> 01:02:28,539
we actually needed to take probably that

1088
01:02:26,170 --> 01:02:29,950
was a little too long so because

1089
01:02:28,539 --> 01:02:31,900
probably we're only running at 30 frames

1090
01:02:29,949 --> 01:02:33,909
a second now oh and we're threat we're

1091
01:02:31,900 --> 01:02:37,480
not threaded so that was a much too high

1092
01:02:33,909 --> 01:02:38,289
of an estimate so you know maybe

1093
01:02:37,480 --> 01:02:41,519
something like this

1094
01:02:38,289 --> 01:02:41,519
this may be too short but we'll see

1095
01:02:47,068 --> 01:02:52,568
maybe too short so I don't know

1096
01:02:50,679 --> 01:02:54,519
well let's maybe say that we're gonna do

1097
01:02:52,568 --> 01:02:56,858
something along those lines and then

1098
01:02:54,519 --> 01:02:59,039
we'll see if if if vtune can can handle

1099
01:02:56,858 --> 01:02:59,039
that

1100
01:03:21,980 --> 01:03:28,050
all right so that looks like it works

1101
01:03:25,409 --> 01:03:32,129
okay and you can kind of see what we're

1102
01:03:28,050 --> 01:03:37,320
getting here in terms of cycle issues I

1103
01:03:32,130 --> 01:03:39,690
and you know I think we're in an okay

1104
01:03:37,320 --> 01:03:41,400
place now for trying to start

1105
01:03:39,690 --> 01:03:43,590
optimization work it looks like we're

1106
01:03:41,400 --> 01:03:44,309
validating you on that data again the

1107
01:03:43,590 --> 01:03:46,579
problem

1108
01:03:44,309 --> 01:03:51,299
here is just that like I'm not sure

1109
01:03:46,579 --> 01:03:54,299
floating point wise how to make this be

1110
01:03:51,300 --> 01:03:57,180
more validated than that I really

1111
01:03:54,300 --> 01:03:59,970
couldn't tell you because it's tough to

1112
01:03:57,179 --> 01:04:05,819
know I'm a little suspicious but we'll

1113
01:03:59,969 --> 01:04:08,159
see so if we want to start with the

1114
01:04:05,820 --> 01:04:09,980
optimization process here there's a

1115
01:04:08,159 --> 01:04:15,589
couple things that I want to look at and

1116
01:04:09,980 --> 01:04:15,590
you can see that we sort of have to I

1117
01:04:16,099 --> 01:04:21,059
guess you might say we have actually

1118
01:04:18,360 --> 01:04:23,370
three places to look at so one place to

1119
01:04:21,059 --> 01:04:27,690
look at is just when we're actually in

1120
01:04:23,369 --> 01:04:30,089
here doing our updates of like how we're

1121
01:04:27,690 --> 01:04:33,389
doing our our texture fills and stuff

1122
01:04:30,090 --> 01:04:35,309
like that so there's stuff in here that

1123
01:04:33,389 --> 01:04:37,799
we can potentially try to optimize that

1124
01:04:35,309 --> 01:04:39,989
is just how we post process the textures

1125
01:04:37,800 --> 01:04:41,190
we can also turn that off if we don't

1126
01:04:39,989 --> 01:04:43,679
care about looking at that particular

1127
01:04:41,190 --> 01:04:46,679
piece of code yet but the other thing we

1128
01:04:43,679 --> 01:04:49,589
can do here is we can say oh well you

1129
01:04:46,679 --> 01:04:51,480
know the raycast thing here's how that's

1130
01:04:49,590 --> 01:04:54,120
working and it's not particularly good

1131
01:04:51,480 --> 01:04:56,550
right now so if you take a look at

1132
01:04:54,119 --> 01:05:00,179
what's happening with the leaf container

1133
01:04:56,550 --> 01:05:04,070
stuff you can see that here is the

1134
01:05:00,179 --> 01:05:06,480
actual piece of code that loops over

1135
01:05:04,070 --> 01:05:10,170
that loops over a bounding boxes to

1136
01:05:06,480 --> 01:05:14,490
check this piece of code which loops

1137
01:05:10,170 --> 01:05:17,400
over sort of sides of this part like

1138
01:05:14,489 --> 01:05:21,919
spatial partitions to see which parts of

1139
01:05:17,400 --> 01:05:26,820
the partition we need to talk to look at

1140
01:05:21,920 --> 01:05:30,030
that part is actually kind of totally

1141
01:05:26,820 --> 01:05:33,450
messed up we know that these come out in

1142
01:05:30,030 --> 01:05:35,190
exactly the right order so we don't need

1143
01:05:33,449 --> 01:05:39,480
to be calling this routine it

1144
01:05:35,190 --> 01:05:41,130
just an indirect load for no reason so

1145
01:05:39,480 --> 01:05:44,940
we can pretty trivially get rid of that

1146
01:05:41,130 --> 01:05:47,789
if we want to and similarly like a lot

1147
01:05:44,940 --> 01:05:50,550
of this data isn't actually loaded in

1148
01:05:47,789 --> 01:05:54,440
the most efficient if this efficient way

1149
01:05:50,550 --> 01:05:56,220
it could be already like we're doing

1150
01:05:54,440 --> 01:05:58,950
operations on stuff we don't actually

1151
01:05:56,219 --> 01:06:03,239
care about so if you look here the box

1152
01:05:58,949 --> 01:06:05,879
radius for example just flat-out isn't

1153
01:06:03,239 --> 01:06:08,759
used anywhere in the partition testing

1154
01:06:05,880 --> 01:06:13,079
code right so if we were to sketch out

1155
01:06:08,760 --> 01:06:15,480
what this code would look like in terms

1156
01:06:13,079 --> 01:06:18,230
of what we actually care about you can

1157
01:06:15,480 --> 01:06:23,789
see that our should push is basically

1158
01:06:18,230 --> 01:06:26,309
you know a little binary composite here

1159
01:06:23,789 --> 01:06:32,358
of these pieces of information so we

1160
01:06:26,309 --> 01:06:35,639
know we need close enough masks and

1161
01:06:32,358 --> 01:06:38,068
actually T valid even used here yeah

1162
01:06:35,639 --> 01:06:39,838
it's here so so we need to compute these

1163
01:06:38,068 --> 01:06:44,000
particular values which means we need

1164
01:06:39,838 --> 01:06:48,420
the min and the max right max Pass is

1165
01:06:44,000 --> 01:06:50,338
yes still use 40 inside so T min and T

1166
01:06:48,420 --> 01:06:53,579
max are what we compute which means we

1167
01:06:50,338 --> 01:06:56,190
need box Minh and box max right which

1168
01:06:53,579 --> 01:07:02,970
means we need these two Hadamard

1169
01:06:56,190 --> 01:07:04,950
products which means we just need we

1170
01:07:02,969 --> 01:07:07,529
just need the Box Minh in the box max to

1171
01:07:04,949 --> 01:07:12,210
have been here so we don't actually care

1172
01:07:07,530 --> 01:07:14,430
about the box P at all right we don't

1173
01:07:12,210 --> 01:07:16,769
need that value we don't care about the

1174
01:07:14,429 --> 01:07:18,480
box radius at all all we really wanted

1175
01:07:16,769 --> 01:07:20,670
to know was the Box min in the Box max

1176
01:07:18,480 --> 01:07:24,599
so those are the two values that we like

1177
01:07:20,670 --> 01:07:26,730
should have been storing right because

1178
01:07:24,599 --> 01:07:28,710
although we care about those potentially

1179
01:07:26,730 --> 01:07:33,809
here maybe it's unclear that we actually

1180
01:07:28,710 --> 01:07:37,500
do but maybe we do right mostly we just

1181
01:07:33,809 --> 01:07:39,199
want to know like hey we just need to

1182
01:07:37,500 --> 01:07:42,300
know the box in box max for the testing

1183
01:07:39,199 --> 01:07:44,608
so we would want to just store those two

1184
01:07:42,300 --> 01:07:47,780
things and furthermore when we look at

1185
01:07:44,608 --> 01:07:51,420
what we actually are pushing on here

1186
01:07:47,780 --> 01:07:53,900
when we read this out you can see what

1187
01:07:51,420 --> 01:07:56,730
we actually get out of the box itself

1188
01:07:53,900 --> 01:08:01,680
what we need to know is is it a leaf

1189
01:07:56,730 --> 01:08:05,909
right what's its first child index and

1190
01:08:01,679 --> 01:08:08,059
what's the child count right that's what

1191
01:08:05,909 --> 01:08:11,179
we actually wanted to know out of that

1192
01:08:08,059 --> 01:08:13,920
because we never look at this box again

1193
01:08:11,179 --> 01:08:18,289
so if you imagined packing that

1194
01:08:13,920 --> 01:08:21,960
information into something more concise

1195
01:08:18,289 --> 01:08:25,680
we could make this routine be a lot less

1196
01:08:21,960 --> 01:08:28,260
stupid you know I'm saying to you so

1197
01:08:25,680 --> 01:08:32,100
let's start with some simple things we

1198
01:08:28,260 --> 01:08:36,539
can use to improve what we're doing dumb

1199
01:08:32,100 --> 01:08:39,180
at the moment so let's start by saying

1200
01:08:36,539 --> 01:08:43,829
what if we create a custom structure

1201
01:08:39,180 --> 01:08:47,400
here that's like our raycast stack right

1202
01:08:43,829 --> 01:08:50,100
and the raycast stack is just gonna

1203
01:08:47,399 --> 01:08:54,029
store the stuff we actually care about

1204
01:08:50,100 --> 01:08:56,520
right so the only thing we really need

1205
01:08:54,029 --> 01:08:59,039
to know here is oh and you know what

1206
01:08:56,520 --> 01:09:01,530
before I do any of this let's actually

1207
01:08:59,039 --> 01:09:04,250
also get a metric in place because we

1208
01:09:01,529 --> 01:09:07,529
should just be able to grab that right

1209
01:09:04,250 --> 01:09:11,909
so when we go here and run our light

1210
01:09:07,529 --> 01:09:16,949
prof code here so this this piece of

1211
01:09:11,909 --> 01:09:20,189
code right so that let's take a let's

1212
01:09:16,949 --> 01:09:22,800
take a wall clock time right let's just

1213
01:09:20,189 --> 01:09:28,710
take a wall clock time so if I come down

1214
01:09:22,800 --> 01:09:32,020
to this code here in

1215
01:09:28,710 --> 01:09:32,020
[Music]

1216
01:09:40,039 --> 01:09:52,039
everyone fine with windows H yeah so if

1217
01:09:48,449 --> 01:09:56,489
we want to then inside the profile run a

1218
01:09:52,039 --> 01:09:59,399
set of of fun missus here what I want to

1219
01:09:56,489 --> 01:10:03,929
do is when we go into the internal

1220
01:09:59,399 --> 01:10:05,819
lighting core I want to snap a timing so

1221
01:10:03,930 --> 01:10:07,829
I just want to do a like query

1222
01:10:05,819 --> 01:10:11,309
performance counter at the beginning in

1223
01:10:07,829 --> 01:10:12,119
the end right like that but query for

1224
01:10:11,310 --> 01:10:14,310
performance

1225
01:10:12,119 --> 01:10:16,470
counter is kind of a pain in the butt I

1226
01:10:14,310 --> 01:10:17,820
don't love the way it works so we may

1227
01:10:16,470 --> 01:10:22,500
make a separate one for it but yeah

1228
01:10:17,819 --> 01:10:24,059
let's see so if we just use query

1229
01:10:22,500 --> 01:10:26,399
performance counter which you know query

1230
01:10:24,060 --> 01:10:27,990
performance counter which apparently

1231
01:10:26,399 --> 01:10:29,159
meant like there'd be some glasses I

1232
01:10:27,989 --> 01:10:31,069
wished I could get got that back there

1233
01:10:29,159 --> 01:10:34,289
was like some sunglasses for some reason

1234
01:10:31,069 --> 01:10:39,389
so if I do large integers start and end

1235
01:10:34,289 --> 01:10:43,470
here there's the start or start time and

1236
01:10:39,390 --> 01:10:45,300
time then we just have a wall clock time

1237
01:10:43,470 --> 01:10:48,090
it's like how long did this thing take

1238
01:10:45,300 --> 01:10:55,739
right and then if I asked what the

1239
01:10:48,090 --> 01:11:00,720
performance frequency okay I swear to

1240
01:10:55,739 --> 01:11:06,710
god man they just Microsoft is such a

1241
01:11:00,720 --> 01:11:10,400
disaster query performance frequency I

1242
01:11:06,710 --> 01:11:10,399
get the frequency back

1243
01:11:10,889 --> 01:11:17,460
and then I just want to print out the

1244
01:11:14,639 --> 01:11:19,020
timely results so basically what I want

1245
01:11:17,460 --> 01:11:20,698
to do what I want to know here is like

1246
01:11:19,020 --> 01:11:23,400
how long did this thing take like how

1247
01:11:20,698 --> 01:11:25,049
long do you take to run so in order to

1248
01:11:23,399 --> 01:11:27,118
do that we know we just want to subtract

1249
01:11:25,050 --> 01:11:28,739
the two so assuming that we got a run

1250
01:11:27,118 --> 01:11:32,579
that wasn't one of these types of runs

1251
01:11:28,738 --> 01:11:36,178
I'm just gonna say look let's just take

1252
01:11:32,579 --> 01:11:40,789
the difference here right so the diff is

1253
01:11:36,179 --> 01:11:43,260
going to be start time quad part end

1254
01:11:40,789 --> 01:11:52,920
time quad part we're just gonna subtract

1255
01:11:43,260 --> 01:11:57,239
these two right actually let's just do

1256
01:11:52,920 --> 01:12:01,800
it that way annoyed by the fact that my

1257
01:11:57,238 --> 01:12:04,859
head is in the way there we go so let's

1258
01:12:01,800 --> 01:12:08,719
take a diff and then we'll divide by the

1259
01:12:04,859 --> 01:12:15,618
frequency right so we'll just say like

1260
01:12:08,719 --> 01:12:21,300
total seconds equals the diff divided by

1261
01:12:15,618 --> 01:12:27,439
the frequency like so and we'll print

1262
01:12:21,300 --> 01:12:27,440
that out to standard out

1263
01:12:34,279 --> 01:12:40,380
and this is just there to see if we can

1264
01:12:37,800 --> 01:12:43,529
see any particularly large improvements

1265
01:12:40,380 --> 01:12:49,199
in this in the speed while we're at it

1266
01:12:43,529 --> 01:12:52,250
was total seconds and we may want to do

1267
01:12:49,199 --> 01:12:52,250
that a little bit differently

1268
01:12:52,850 --> 01:13:08,730
we'll see so if we go ahead now and we

1269
01:12:58,079 --> 01:13:10,769
just take a here if we run this I should

1270
01:13:08,729 --> 01:13:15,419
be able to see how long it took to do

1271
01:13:10,770 --> 01:13:17,640
all of these and you know we'll see it

1272
01:13:15,420 --> 01:13:19,699
we should see an improvement in the

1273
01:13:17,640 --> 01:13:21,990
speed if we make any major changes but

1274
01:13:19,699 --> 01:13:23,670
really we're just doing that just to

1275
01:13:21,989 --> 01:13:25,710
make sure like we have some kind of

1276
01:13:23,670 --> 01:13:30,180
ballpark number to go by and it's

1277
01:13:25,710 --> 01:13:31,560
surprisingly stable as you can see even

1278
01:13:30,180 --> 01:13:37,920
with all the variance just because we're

1279
01:13:31,560 --> 01:13:39,480
running so many of those right now if we

1280
01:13:37,920 --> 01:13:41,550
want to start actually putting real

1281
01:13:39,479 --> 01:13:43,199
timing into this we have to do more work

1282
01:13:41,550 --> 01:13:45,329
we'd have to figure out how we want to

1283
01:13:43,199 --> 01:13:48,119
actually time it and we'd want to like

1284
01:13:45,329 --> 01:13:51,329
maybe check for like if the total time

1285
01:13:48,119 --> 01:13:52,289
went down run it again and keep going

1286
01:13:51,329 --> 01:13:55,019
there's a lot of ways you can do this

1287
01:13:52,289 --> 01:13:56,609
but for the interest of just like

1288
01:13:55,020 --> 01:13:59,430
programming on stream we'll leave it

1289
01:13:56,609 --> 01:14:01,769
that way for now so let's just go ahead

1290
01:13:59,430 --> 01:14:03,780
and take a look at what happens if I

1291
01:14:01,770 --> 01:14:06,380
change that stack out so that's all I'm

1292
01:14:03,779 --> 01:14:06,380
gonna do here

1293
01:14:22,738 --> 01:14:34,649
okay so rake has stack entry in here I'm

1294
01:14:32,079 --> 01:14:39,460
just gonna say what are the things

1295
01:14:34,649 --> 01:14:44,379
actually needed to know right so here's

1296
01:14:39,460 --> 01:14:46,619
root box what is it used for that's it

1297
01:14:44,380 --> 01:14:50,170
right that's it

1298
01:14:46,619 --> 01:14:52,090
so we only care about like the only

1299
01:14:50,170 --> 01:14:54,449
things we care about at all in the

1300
01:14:52,090 --> 01:14:54,449
raycast

1301
01:14:55,198 --> 01:15:02,589
is was it a leaf right so we just want

1302
01:15:00,520 --> 01:15:05,820
to know like what's the first child

1303
01:15:02,590 --> 01:15:05,819
index oops

1304
01:15:11,340 --> 01:15:18,840
what's the child count I guess what's

1305
01:15:14,590 --> 01:15:23,500
the you know what's the child count I

1306
01:15:18,840 --> 01:15:25,840
mean we could store that add I don't

1307
01:15:23,500 --> 01:15:30,279
know maybe what's the last or one past

1308
01:15:25,840 --> 01:15:33,579
last child index and I know so we store

1309
01:15:30,279 --> 01:15:36,000
like the range that we're going to go

1310
01:15:33,579 --> 01:15:36,000
over

1311
01:15:50,079 --> 01:15:53,840
yeah I'm gonna leave it like that for

1312
01:15:52,010 --> 01:15:56,030
now so we'll store the range this is the

1313
01:15:53,840 --> 01:15:58,100
range we're going to go over and then

1314
01:15:56,029 --> 01:15:59,719
we'll pad this out to a 64-bit value by

1315
01:15:58,100 --> 01:16:05,270
just saying then there's the like is

1316
01:15:59,719 --> 01:16:07,760
leaf right so then what we would do

1317
01:16:05,270 --> 01:16:09,739
instead of the way that we were pulling

1318
01:16:07,760 --> 01:16:12,320
these things off before is we would say

1319
01:16:09,738 --> 01:16:14,689
like oh okay so actually what's gonna

1320
01:16:12,319 --> 01:16:18,229
happen here is we're gonna say like

1321
01:16:14,689 --> 01:16:20,509
there's a starting box okay and that's

1322
01:16:18,229 --> 01:16:24,079
going to be the box that we get out of

1323
01:16:20,510 --> 01:16:32,750
the root box the box stack original

1324
01:16:24,079 --> 01:16:36,738
depth here so box tack goes something

1325
01:16:32,750 --> 01:16:39,439
like this we need to do like is leaf and

1326
01:16:36,738 --> 01:16:45,769
that's gonna be you know this this

1327
01:16:39,439 --> 01:16:48,799
nonsense here and really we know it's

1328
01:16:45,770 --> 01:16:50,960
always true so I mean I mean always

1329
01:16:48,800 --> 01:16:53,659
false for the first one so we could just

1330
01:16:50,960 --> 01:16:56,899
initialize that to false I guess I don't

1331
01:16:53,659 --> 01:16:58,849
know how we want to treat that depends

1332
01:16:56,899 --> 01:17:05,238
what you're going for here but so the

1333
01:16:58,850 --> 01:17:14,780
first index is just this thing the last

1334
01:17:05,238 --> 01:17:17,329
index is this nonsense here and then

1335
01:17:14,779 --> 01:17:20,630
we've pushed the thing right so that's

1336
01:17:17,329 --> 01:17:22,969
how you would push something on and then

1337
01:17:20,630 --> 01:17:28,310
the Box stack is going to be rake a

1338
01:17:22,969 --> 01:17:36,039
stock entry now like so so once we do

1339
01:17:28,310 --> 01:17:36,039
that our are pulling off this thing oops

1340
01:17:40,769 --> 01:17:46,599
looks like that and now what we do is

1341
01:17:43,958 --> 01:17:51,569
just like okay entry is leaf it's gonna

1342
01:17:46,599 --> 01:17:55,689
be this right entry first index is that

1343
01:17:51,569 --> 01:17:57,578
entry one past last index is that so now

1344
01:17:55,689 --> 01:17:59,559
we're just pulling off just this little

1345
01:17:57,578 --> 01:18:00,908
token that says hey this is the

1346
01:17:59,559 --> 01:18:04,208
information you actually needed to

1347
01:18:00,908 --> 01:18:05,948
remember right and this doesn't really

1348
01:18:04,208 --> 01:18:10,389
get us very far but it's at least

1349
01:18:05,948 --> 01:18:12,398
something right so you know it's a start

1350
01:18:10,389 --> 01:18:14,109
towards what we actually want so we'll

1351
01:18:12,399 --> 01:18:19,179
just keep you know we'll keep whittling

1352
01:18:14,109 --> 01:18:21,629
away at it right so then all we need to

1353
01:18:19,179 --> 01:18:25,899
do is when we actually do a push on here

1354
01:18:21,628 --> 01:18:28,628
again like the the should push thing we

1355
01:18:25,899 --> 01:18:31,749
want to just get this piece of data up

1356
01:18:28,628 --> 01:18:34,809
here so here's the like push entry right

1357
01:18:31,748 --> 01:18:37,300
the push entry is leaf equals a thing

1358
01:18:34,809 --> 01:18:38,739
the push entry first index equals a

1359
01:18:37,300 --> 01:18:41,139
thing to push entry one passed last

1360
01:18:38,738 --> 01:18:43,688
index equals the thing right then we

1361
01:18:41,139 --> 01:18:48,489
just say if we should push then it's the

1362
01:18:43,689 --> 01:18:50,260
push entry otherwise it's not so we just

1363
01:18:48,488 --> 01:18:55,118
do the conditional assignment there like

1364
01:18:50,260 --> 01:18:59,979
we would have any other way right all

1365
01:18:55,118 --> 01:19:05,738
right so in the push entry we just need

1366
01:18:59,979 --> 01:19:10,260
this code and now instead of root box

1367
01:19:05,738 --> 01:19:12,728
which doesn't exist it's just box right

1368
01:19:10,260 --> 01:19:15,088
so these are all the same but it's just

1369
01:19:12,729 --> 01:19:15,088
box

1370
01:19:21,368 --> 01:19:30,899
we won't have root box anymore oops

1371
01:19:23,920 --> 01:19:44,469
so starting box starting box starting

1372
01:19:30,899 --> 01:19:47,469
box and we're done okay so let me just

1373
01:19:44,469 --> 01:19:49,899
take a look at what that does because it

1374
01:19:47,469 --> 01:19:52,630
should run and produce the same error

1375
01:19:49,899 --> 01:19:53,920
which it does and I don't know that

1376
01:19:52,630 --> 01:19:55,118
they'll actually improve things for our

1377
01:19:53,920 --> 01:19:57,309
run time at all but hopefully doesn't

1378
01:19:55,118 --> 01:19:59,078
make them slower wow it does make them

1379
01:19:57,309 --> 01:20:01,748
slower alright so we've learned

1380
01:19:59,078 --> 01:20:03,429
something so for whatever reason it

1381
01:20:01,748 --> 01:20:05,728
likes better or the thing we were doing

1382
01:20:03,429 --> 01:20:05,729
before

1383
01:20:07,948 --> 01:20:15,538
doesn't make a whole lot of sense to me

1384
01:20:10,238 --> 01:20:15,538
I wonder why

1385
01:20:22,550 --> 01:20:28,909
is it because it doesn't actually know

1386
01:20:25,369 --> 01:20:31,300
is it because that's a struct it is

1387
01:20:28,909 --> 01:20:34,309
doing something dumb let's take a look

1388
01:20:31,300 --> 01:20:37,610
so I'm interested to know what the

1389
01:20:34,310 --> 01:20:39,680
difference is here so let me just take a

1390
01:20:37,609 --> 01:20:43,509
look at the assembly because I want to

1391
01:20:39,680 --> 01:20:43,510
see why it changed

1392
01:20:54,149 --> 01:21:01,779
so here you can see it's actually doing

1393
01:20:58,510 --> 01:21:11,280
the test I believe here so because I

1394
01:21:01,779 --> 01:21:11,279
don't see a seam ah've what the heck oh

1395
01:21:11,310 --> 01:21:20,370
I mean I'm in the wrong application I'm

1396
01:21:16,300 --> 01:21:20,369
like how is this looking multi-threaded

1397
01:21:33,420 --> 01:21:50,260
come back to me where is my lighting

1398
01:21:36,520 --> 01:21:51,880
code so I want to see right here and I

1399
01:21:50,260 --> 01:21:58,539
want to see what the assembly looks like

1400
01:21:51,880 --> 01:22:02,440
so yeah it's not good so there is a seam

1401
01:21:58,539 --> 01:22:05,590
off there's a seam off here so that

1402
01:22:02,439 --> 01:22:09,069
correctly see mobbed this but it did not

1403
01:22:05,590 --> 01:22:12,869
correctly see mob this so I'm just

1404
01:22:09,069 --> 01:22:12,869
curious hold on a second

1405
01:22:12,988 --> 01:22:23,159
if I don't do this and instead make a

1406
01:22:20,409 --> 01:22:23,159
thing that's like

1407
01:22:32,699 --> 01:22:39,389
so you just pass like the box pointer

1408
01:22:35,260 --> 01:22:39,390
and then we do something like this so

1409
01:22:47,369 --> 01:22:59,309
you know the is leaf container boolean

1410
01:22:51,670 --> 01:22:59,310
flag gets put I don't know

1411
01:23:05,699 --> 01:23:17,289
what's that actual value it's one so

1412
01:23:14,020 --> 01:23:21,610
maybe it's just like yeah is leaf

1413
01:23:17,289 --> 01:23:37,590
container actually we'll just store that

1414
01:23:21,609 --> 01:23:37,589
for now so we'll do is leaf container or

1415
01:23:38,909 --> 01:23:55,630
first child index shifted up by 16 and

1416
01:23:47,550 --> 01:24:12,789
then this nonsense here also shifted up

1417
01:23:55,630 --> 01:24:17,680
by 16 right so we just or all this

1418
01:24:12,789 --> 01:24:21,519
nonsense together and that's our art

1419
01:24:17,680 --> 01:24:23,940
pack right and then we just have to have

1420
01:24:21,520 --> 01:24:23,940
a nun tack

1421
01:24:29,219 --> 01:24:40,319
I can probably actually just do that at

1422
01:24:35,760 --> 01:24:42,060
the top so never mind all right so we

1423
01:24:40,319 --> 01:24:44,189
get rid of this we say podcast entry

1424
01:24:42,060 --> 01:24:47,400
this is what the past don't ask me why

1425
01:24:44,189 --> 01:24:50,250
that's a 16 so we can pack cast entry

1426
01:24:47,399 --> 01:24:54,000
this way let's do it here so we just say

1427
01:24:50,250 --> 01:24:58,560
all right box tack depth by the way this

1428
01:24:54,000 --> 01:25:01,409
is now just a you 64 we just say box

1429
01:24:58,560 --> 01:25:03,870
tack depth plus plus equals pack cast

1430
01:25:01,409 --> 01:25:09,809
entry and we say that we want that to be

1431
01:25:03,869 --> 01:25:16,698
our starting box like that we come down

1432
01:25:09,810 --> 01:25:16,699
here and we say this is going to be a

1433
01:25:16,939 --> 01:25:26,549
you 64 push entry equals packed box pack

1434
01:25:21,210 --> 01:25:29,760
cast entry for some other box right and

1435
01:25:26,550 --> 01:25:38,070
then we try to make this part work by

1436
01:25:29,760 --> 01:25:42,840
just saying entry equals whatever the

1437
01:25:38,069 --> 01:25:46,529
latest entry was we take a look at this

1438
01:25:42,840 --> 01:25:50,400
value and say if the entry and light box

1439
01:25:46,529 --> 01:25:58,139
leaf container if if that's true then do

1440
01:25:50,399 --> 01:26:01,409
your nonsense the first index and the

1441
01:25:58,140 --> 01:26:05,100
one pass last index we unpack this way

1442
01:26:01,409 --> 01:26:12,420
by saying whatever the entry is shifted

1443
01:26:05,100 --> 01:26:18,829
down by 16 ANDed out and the entry

1444
01:26:12,420 --> 01:26:18,829
shifted down by 32 and it out right

1445
01:26:20,448 --> 01:26:25,319
what is this complaining about this

1446
01:26:22,890 --> 01:26:28,800
needs to be up casted to you 32 and

1447
01:26:25,319 --> 01:26:31,698
fortune I mean you 64 because see is

1448
01:26:28,800 --> 01:26:31,699
stupid

1449
01:26:33,229 --> 01:26:51,090
and this is not a thing okay so let me

1450
01:26:49,498 --> 01:26:54,269
just see if it get any effect the

1451
01:26:51,090 --> 01:26:57,260
compiler got any smarter by doing that I

1452
01:26:54,269 --> 01:26:59,300
mean maybe who knows

1453
01:26:57,260 --> 01:27:03,949
also let me actually see if this works

1454
01:26:59,300 --> 01:27:03,949
because I kind of jammed that together

1455
01:27:04,639 --> 01:27:15,449
seems fine produce the same results

1456
01:27:08,130 --> 01:27:22,679
right so and now we're back to the same

1457
01:27:15,448 --> 01:27:25,078
time again so again zero cost

1458
01:27:22,679 --> 01:27:30,510
abstraction putting those in a structure

1459
01:27:25,078 --> 01:27:32,639
totally didn't work this is why I try to

1460
01:27:30,510 --> 01:27:36,059
tell people that's not a thing

1461
01:27:32,639 --> 01:27:37,800
no one ever believes me but if you

1462
01:27:36,059 --> 01:27:41,189
actually ever spend time looking at what

1463
01:27:37,800 --> 01:27:45,380
the compiler does it anything you try to

1464
01:27:41,189 --> 01:27:45,380
do is very likely to not be one right

1465
01:27:46,279 --> 01:27:55,679
all right so we're still doing no so you

1466
01:27:53,429 --> 01:27:59,158
see how we don't have any jumps anymore

1467
01:27:55,679 --> 01:28:04,469
right so we do our loads and the only

1468
01:27:59,158 --> 01:28:06,388
jump is to jump back to the only jump is

1469
01:28:04,469 --> 01:28:10,380
to jump back to the top of the loop

1470
01:28:06,389 --> 01:28:13,279
right so I think it might not be true

1471
01:28:10,380 --> 01:28:13,279
let's take a look

1472
01:28:21,819 --> 01:28:25,799
so what's all this nonsense

1473
01:28:34,090 --> 01:28:38,110
what are all these jumps for

1474
01:28:47,050 --> 01:28:50,050
compiler

1475
01:28:50,859 --> 01:29:09,679
why are you jumpy alright

1476
01:29:02,859 --> 01:29:11,899
what's wrong with the compiler here why

1477
01:29:09,679 --> 01:29:24,250
does it not want to do what I want it to

1478
01:29:11,899 --> 01:29:29,479
do so here's an idea

1479
01:29:24,250 --> 01:29:30,828
what if I actually were to store this

1480
01:29:29,479 --> 01:29:33,859
piece of information so the compiler

1481
01:29:30,828 --> 01:29:41,809
can't mess with me and it's just part of

1482
01:29:33,859 --> 01:29:43,549
the data that we push right that would

1483
01:29:41,810 --> 01:29:45,289
fix the problem unfortunately it

1484
01:29:43,550 --> 01:29:48,949
requires me to edit the lighting box

1485
01:29:45,289 --> 01:29:50,060
structure a little bit but that's ok so

1486
01:29:48,948 --> 01:29:50,960
if you looked in here and you were like

1487
01:29:50,060 --> 01:29:53,329
oh alright

1488
01:29:50,960 --> 01:29:56,989
like what's all this about if we

1489
01:29:53,328 --> 01:29:58,670
actually just made this oh and you know

1490
01:29:56,988 --> 01:30:02,299
what this could all fits into you 32

1491
01:29:58,670 --> 01:30:05,630
doesn't it right so if we just made this

1492
01:30:02,300 --> 01:30:09,050
B what we actually grabbed if we

1493
01:30:05,630 --> 01:30:12,349
Lemongrab that out then it really can't

1494
01:30:09,050 --> 01:30:16,090
hurt us can it so what if I told it this

1495
01:30:12,349 --> 01:30:22,328
right what if I said like all right

1496
01:30:16,090 --> 01:30:22,328
there's a-you 32 that I need you to grab

1497
01:30:23,170 --> 01:30:27,340
in fact in fact in fact

1498
01:30:50,260 --> 01:30:57,829
so we want a lightning box pack in here

1499
01:30:53,448 --> 01:30:59,808
right like so and the data would still

1500
01:30:57,828 --> 01:31:05,328
be the same but now like places like

1501
01:30:59,809 --> 01:31:34,939
this you just you use you know dot pack

1502
01:31:05,328 --> 01:31:47,569
right all of these need a pack and no no

1503
01:31:34,939 --> 01:31:49,668
no yes yes yes yes yes all right so here

1504
01:31:47,569 --> 01:31:54,319
we could just say all right the Box

1505
01:31:49,668 --> 01:31:57,139
stack is a lighting box pack which is

1506
01:31:54,319 --> 01:32:02,118
just 32 the power can't figure this out

1507
01:31:57,139 --> 01:32:04,578
I do not know what to tell it all right

1508
01:32:02,118 --> 01:32:07,908
so there's all you got to do is put 32

1509
01:32:04,578 --> 01:32:12,408
bits on a stack like can you manage it

1510
01:32:07,908 --> 01:32:15,618
right so put 3-2 bits on the stack

1511
01:32:12,408 --> 01:32:18,168
please that's all you have to do all you

1512
01:32:15,618 --> 01:32:22,448
have to do is copy that 32 bits onto a

1513
01:32:18,168 --> 01:32:22,448
stack that's all I'm asking right

1514
01:32:29,380 --> 01:32:39,050
there you go right super super simple

1515
01:32:34,449 --> 01:32:45,349
nothing no ands no nothing just real

1516
01:32:39,050 --> 01:33:00,980
basic not remember what this is that

1517
01:32:45,350 --> 01:33:06,500
right alright um first index is its

1518
01:33:00,979 --> 01:33:09,979
first child index there is everyone

1519
01:33:06,500 --> 01:33:12,970
happy now there's everyone smiling and

1520
01:33:09,979 --> 01:33:27,679
delighted in the revelry of it all I

1521
01:33:12,970 --> 01:33:30,110
certainly hope so so now this is nothing

1522
01:33:27,680 --> 01:33:32,450
we're not even to do anything right all

1523
01:33:30,109 --> 01:33:34,269
we're gonna do is push pack on there

1524
01:33:32,449 --> 01:33:38,179
that's it

1525
01:33:34,270 --> 01:33:45,280
and hopefully the compiler can figure

1526
01:33:38,180 --> 01:33:51,039
that out I don't know if I can though

1527
01:33:45,279 --> 01:33:51,039
did that work yes

1528
01:33:54,408 --> 01:33:59,899
okay and by the way we actually did get

1529
01:33:57,738 --> 01:34:01,819
faster now which is what I would have

1530
01:33:59,899 --> 01:34:03,859
expected I wouldn't really have expected

1531
01:34:01,819 --> 01:34:06,170
to get much faster but it got a little

1532
01:34:03,859 --> 01:34:07,639
bit faster which is what I would have

1533
01:34:06,170 --> 01:34:10,399
expected right we were seven point one

1534
01:34:07,639 --> 01:34:15,310
seven point two before we dropped down

1535
01:34:10,399 --> 01:34:17,750
to seven point oh now right all right

1536
01:34:15,310 --> 01:34:21,830
thank you mister compiler now let's take

1537
01:34:17,750 --> 01:34:24,399
a look at the code here and see if it

1538
01:34:21,829 --> 01:34:26,929
actually got rid of the stupid jumps

1539
01:34:24,399 --> 01:34:30,339
like why is that jump still there it

1540
01:34:26,929 --> 01:34:30,340
looks like we still have jumps here

1541
01:34:37,270 --> 01:34:39,330
you

1542
01:34:39,439 --> 01:34:49,488
like there's less but why are we still

1543
01:34:45,409 --> 01:34:50,840
jumping who is jumping in why do you

1544
01:34:49,488 --> 01:34:51,879
know what I'm saying like what what is

1545
01:34:50,840 --> 01:34:58,449
with the jump

1546
01:34:51,880 --> 01:35:05,050
what's with the jump festival here's our

1547
01:34:58,448 --> 01:35:08,379
computations chef and sub in right

1548
01:35:05,050 --> 01:35:12,969
that's all the stuff I would expect

1549
01:35:08,380 --> 01:35:17,869
here's us doing the compares and the min

1550
01:35:12,969 --> 01:35:23,840
it's all good so I'll fine we move masks

1551
01:35:17,869 --> 01:35:26,238
and we do a test and then we J and Z so

1552
01:35:23,840 --> 01:35:29,210
the compiler thought it was better to do

1553
01:35:26,238 --> 01:35:31,899
a jump than to just do the mauve mask

1554
01:35:29,210 --> 01:35:31,899
instructions

1555
01:35:48,250 --> 01:35:52,029
what the heck man

1556
01:35:52,659 --> 01:36:00,010
what is the compiler doing why is it

1557
01:35:57,739 --> 01:36:00,010
doing that

1558
01:36:25,029 --> 01:36:38,829
I I don't I'm kind of at a loss here for

1559
01:36:32,439 --> 01:36:41,799
what's the deal with that it's probably

1560
01:36:38,829 --> 01:36:43,539
because it's looking at this and

1561
01:36:41,800 --> 01:36:46,350
expanding this out to like the if

1562
01:36:43,539 --> 01:36:49,569
version of it because it's like well I

1563
01:36:46,350 --> 01:36:52,120
don't have to evaluate this if this is

1564
01:36:49,569 --> 01:36:59,380
already true and I think I'm saving time

1565
01:36:52,119 --> 01:37:06,130
but I'm not so let's look at these

1566
01:36:59,380 --> 01:37:10,690
so what's any true do so any true does a

1567
01:37:06,130 --> 01:37:25,329
mauve mask PS of comparison P into the

1568
01:37:10,689 --> 01:37:32,710
boolean result right so mob mask mauve

1569
01:37:25,329 --> 01:37:38,050
mass PS those two any closer and any

1570
01:37:32,710 --> 01:37:44,980
inside so this is getting masked on any

1571
01:37:38,050 --> 01:37:47,680
close enough so so what is okay so what

1572
01:37:44,979 --> 01:37:52,379
are these close enough we don't even use

1573
01:37:47,680 --> 01:37:52,380
anymore do we

1574
01:37:55,920 --> 01:38:06,859
I mean I thought we were kind of saying

1575
01:38:03,840 --> 01:38:06,860
that we were done with that

1576
01:38:11,779 --> 01:38:21,380
hmm so we are still stopping our

1577
01:38:16,619 --> 01:38:25,109
traversal when we get too far away

1578
01:38:21,380 --> 01:38:34,190
apparently 15 meters from the

1579
01:38:25,109 --> 01:38:34,189
origination point hmm

1580
01:38:40,868 --> 01:38:46,908
so I don't know about that like what

1581
01:38:43,908 --> 01:38:48,170
happens if we just take that out dude do

1582
01:38:46,908 --> 01:38:56,259
we get really slow

1583
01:38:48,170 --> 01:38:56,260
I just I'm curious

1584
01:39:01,850 --> 01:39:05,980
like how much are we relying on that

1585
01:39:07,689 --> 01:39:14,299
because I don't know I'm not sure to

1586
01:39:11,960 --> 01:39:17,239
what extent that is you know something

1587
01:39:14,300 --> 01:39:19,670
we rely on so to a certain extent it's

1588
01:39:17,239 --> 01:39:21,469
it's quite a bit it looks like I mean

1589
01:39:19,670 --> 01:39:24,079
unless that changed something else we

1590
01:39:21,470 --> 01:39:26,890
are actually taking advantage of that

1591
01:39:24,079 --> 01:39:26,890
early out case

1592
01:39:46,529 --> 01:39:58,198
so I guess what I would say is is this

1593
01:39:55,948 --> 01:39:59,729
really the right way to do this masking

1594
01:39:58,198 --> 01:40:02,178
look could we mask these in the

1595
01:39:59,729 --> 01:40:04,138
registers first and then move them out

1596
01:40:02,179 --> 01:40:11,849
do these actually have to be done

1597
01:40:04,139 --> 01:40:15,118
separate so like any inside means if

1598
01:40:11,849 --> 01:40:21,599
we're inside this box we would want to

1599
01:40:15,118 --> 01:40:26,519
traverse down right if any are of or the

1600
01:40:21,599 --> 01:40:30,078
Rays were so that makes sense if any of

1601
01:40:26,520 --> 01:40:33,989
the hits in this box it's our closer

1602
01:40:30,078 --> 01:40:37,069
potentially than the ones we already

1603
01:40:33,988 --> 01:40:42,658
have in that Lane then we do want to go

1604
01:40:37,069 --> 01:40:44,670
down right but any close enough is just

1605
01:40:42,658 --> 01:40:47,519
saying could we have hid is it too far

1606
01:40:44,670 --> 01:40:52,050
away we don't want we're trying to knock

1607
01:40:47,520 --> 01:40:55,020
out so I feel like those should be able

1608
01:40:52,050 --> 01:40:58,940
to go on the same line right so I mean

1609
01:40:55,020 --> 01:40:58,940
couldn't we do like this

1610
01:41:15,038 --> 01:41:21,418
I mean is this really that bad if we

1611
01:41:18,819 --> 01:41:21,419
just said

1612
01:41:58,948 --> 01:42:11,248
whoops what did i do that's supposed to

1613
01:42:05,649 --> 01:42:11,248
just be box pack

1614
01:42:23,699 --> 01:42:33,970
so I don't know like is that totally bad

1615
01:42:26,770 --> 01:42:35,830
to do it that way so it produces

1616
01:42:33,970 --> 01:42:38,470
basically the same result and you can

1617
01:42:35,829 --> 01:42:43,800
see it got faster to do it that way

1618
01:42:38,470 --> 01:42:49,840
right the total error is still the same

1619
01:42:43,800 --> 01:42:51,940
and that improved the speed so does that

1620
01:42:49,840 --> 01:43:02,850
now successfully convince the compiler

1621
01:42:51,939 --> 01:43:02,849
to stop monkeying around no it doesn't

1622
01:43:24,399 --> 01:43:32,109
there's the mob masks there's the end

1623
01:43:27,289 --> 01:43:32,109
jump not equal what are you doing

1624
01:43:37,800 --> 01:43:41,119
I don't know man

1625
01:43:52,850 --> 01:43:57,140
I don't know how to convince this thing

1626
01:43:55,850 --> 01:44:00,140
to get all these jumps out of here they

1627
01:43:57,140 --> 01:44:13,970
don't you don't need to do any of these

1628
01:44:00,140 --> 01:44:18,500
jumps and it really wants to do them so

1629
01:44:13,970 --> 01:44:20,360
I'll try one more thing you know we've

1630
01:44:18,500 --> 01:44:26,569
got the Deaf plus one should push here

1631
01:44:20,359 --> 01:44:28,579
right maybe the other thing is like if

1632
01:44:26,569 --> 01:44:32,090
it does it think just because this is a

1633
01:44:28,579 --> 01:44:35,479
struct if I change this to just be a you

1634
01:44:32,090 --> 01:44:39,949
thirty-two would that help it know what

1635
01:44:35,479 --> 01:44:46,969
was going on like I don't know so if I

1636
01:44:39,949 --> 01:44:53,949
just said hey look this is literally

1637
01:44:46,970 --> 01:44:57,079
just a blind value okay so like trust me

1638
01:44:53,949 --> 01:45:06,399
just write a you thirty-two to the stack

1639
01:44:57,079 --> 01:45:06,399
for the love of God right oops

1640
01:45:09,310 --> 01:45:16,030
is that is that in the tape and the

1641
01:45:12,319 --> 01:45:16,029
cards or not

1642
01:45:24,920 --> 01:45:36,230
nope I don't know man

1643
01:45:31,359 --> 01:45:39,799
it seems pretty intent on Jan seeing

1644
01:45:36,229 --> 01:45:42,319
this thing and I have no idea why just

1645
01:45:39,800 --> 01:45:48,440
just change these two things to see

1646
01:45:42,319 --> 01:45:51,079
moths like why why are you doing that is

1647
01:45:48,439 --> 01:46:00,489
there a way to force this stupid

1648
01:45:51,079 --> 01:46:04,479
compiler to like do a seamoth can you

1649
01:46:00,489 --> 01:46:04,479
why am I in DuckDuckGo

1650
01:46:23,789 --> 01:46:33,239
so here's the Intel C compiler that's

1651
01:46:29,289 --> 01:46:33,239
not what we're talking about

1652
01:46:48,970 --> 01:46:58,619
anyone stackoverflow that's talking

1653
01:46:56,409 --> 01:46:58,619
about the

1654
01:47:21,260 --> 01:47:29,250
so conditional st. killing only one

1655
01:47:23,819 --> 01:47:30,630
comparison this is somebody who is

1656
01:47:29,250 --> 01:47:39,800
trying to do the same thing I'm trying

1657
01:47:30,630 --> 01:47:39,800
to I don't know

1658
01:47:46,920 --> 01:48:22,949
so like this this help please just just

1659
01:48:19,979 --> 01:48:25,179
generate a conditional move for me I

1660
01:48:22,949 --> 01:48:26,829
just want to see what the code runs like

1661
01:48:25,180 --> 01:48:29,409
with with a conditional move

1662
01:48:26,829 --> 01:48:34,149
I hate compiler I hate the entire idea

1663
01:48:29,409 --> 01:48:37,239
like it should be a given that a modern

1664
01:48:34,149 --> 01:48:39,399
compiler and a modern language would

1665
01:48:37,239 --> 01:48:40,179
just let you say that you wanted to see

1666
01:48:39,399 --> 01:48:43,569
move somewhere

1667
01:48:40,180 --> 01:48:48,070
I'm the programmer listen to me but of

1668
01:48:43,569 --> 01:48:50,880
course they've added I can make lambdas

1669
01:48:48,069 --> 01:48:53,170
that I pass the things I can have Auto

1670
01:48:50,880 --> 01:48:54,220
declared variables I can be added

1671
01:48:53,170 --> 01:48:56,859
everything under the moon

1672
01:48:54,220 --> 01:48:59,350
I can't just frigging see move something

1673
01:48:56,859 --> 01:49:00,909
it's like they don't understand that

1674
01:48:59,350 --> 01:49:02,079
like programming computer means I'm

1675
01:49:00,909 --> 01:49:05,019
trying to actually tell the computer

1676
01:49:02,079 --> 01:49:13,869
what to do not often language flower

1677
01:49:05,020 --> 01:49:17,440
land with mr. Rogers alright anyway um

1678
01:49:13,869 --> 01:49:19,479
so I don't know if we can try to finesse

1679
01:49:17,439 --> 01:49:22,739
this I'm just trying to see if I can get

1680
01:49:19,479 --> 01:49:25,209
this thing to output a stupid C move

1681
01:49:22,739 --> 01:49:27,340
that's that's all I was trying to do and

1682
01:49:25,210 --> 01:49:30,810
it's it's not looking likely right it

1683
01:49:27,340 --> 01:49:30,810
doesn't seem to want to do that

1684
01:49:36,238 --> 01:49:52,468
I mean that's as as concise as I think

1685
01:49:49,680 --> 01:50:01,950
it can be I don't even know if it can be

1686
01:49:52,469 --> 01:50:03,600
oh no no no no it could well let me try

1687
01:50:01,949 --> 01:50:07,229
that first though I mean we try them

1688
01:50:03,600 --> 01:50:10,700
both I guess there is one other thing I

1689
01:50:07,229 --> 01:50:10,699
could try see if it helps

1690
01:50:21,510 --> 01:50:35,019
nope it's got one so it it so it

1691
01:50:32,889 --> 01:50:37,538
correctly knows that that's a si move

1692
01:50:35,019 --> 01:50:39,849
but I guess that's not so what could we

1693
01:50:37,538 --> 01:50:50,109
do is this possible like what if we did

1694
01:50:39,849 --> 01:50:52,199
this what if we did like that so I just

1695
01:50:50,109 --> 01:50:54,549
use a reference instead of a pointer

1696
01:50:52,198 --> 01:50:55,928
same exact thing like doesn't mean

1697
01:50:54,550 --> 01:51:01,679
anything means exactly the same thing

1698
01:50:55,929 --> 01:51:01,679
does compiler know that No

1699
01:51:08,369 --> 01:51:15,720
we still got a J&amp;Z up here even if I'm

1700
01:51:11,850 --> 01:51:17,750
not mistaken like where's that coming

1701
01:51:15,720 --> 01:51:17,750
from

1702
01:51:20,090 --> 01:51:30,000
what's going on

1703
01:51:21,659 --> 01:51:33,590
we load in we do our math ups we subdue

1704
01:51:30,000 --> 01:51:33,590
we do whatever it's fine

1705
01:51:34,189 --> 01:51:40,469
testy ax e ax for Jan Z so this should

1706
01:51:38,369 --> 01:51:44,099
push is what's getting test there and we

1707
01:51:40,470 --> 01:51:46,740
do the Jan Z so just then we have it's

1708
01:51:44,100 --> 01:51:56,039
trying to avoid doing this comparison in

1709
01:51:46,739 --> 01:51:57,840
the move so that that's unfortunate I'm

1710
01:51:56,039 --> 01:52:00,300
not sure if there's any way to crossbar

1711
01:51:57,840 --> 01:52:04,230
this it could be that what we should do

1712
01:52:00,300 --> 01:52:09,779
is do the broadcast up here so one thing

1713
01:52:04,229 --> 01:52:11,909
we could do is like is do the or up here

1714
01:52:09,779 --> 01:52:15,079
somehow we can't do a straight line orcs

1715
01:52:11,909 --> 01:52:15,079
need to or all of them together

1716
01:52:20,639 --> 01:52:28,340
I'm not sure what the way to do that

1717
01:52:23,039 --> 01:52:28,340
would be to move the mask internally so

1718
01:52:44,520 --> 01:52:48,540
let me just see what we've got here

1719
01:52:53,930 --> 01:52:58,329
and let's let's also see if we just

1720
01:53:05,689 --> 01:53:12,139
yeah nothing nothing no luck

1721
01:53:52,149 --> 01:53:57,199
so without adding extra instructions

1722
01:53:55,130 --> 01:54:01,029
here I'm not sure how we would do that I

1723
01:53:57,199 --> 01:54:03,829
mean we could go ahead and futz around

1724
01:54:01,029 --> 01:54:10,130
more like we could do a thing that

1725
01:54:03,829 --> 01:54:17,000
looked like this where we basically said

1726
01:54:10,130 --> 01:54:23,590
all right so the push call is going to

1727
01:54:17,000 --> 01:54:27,380
take the closer close enough right and

1728
01:54:23,590 --> 01:54:40,369
we're gonna do like a chuffing and to it

1729
01:54:27,380 --> 01:54:50,750
right so we do like a shuffle so we just

1730
01:54:40,369 --> 01:54:53,510
say all right I I don't know we would

1731
01:54:50,750 --> 01:55:02,119
just say take closer close enough get

1732
01:54:53,510 --> 01:55:03,800
the first and second thing from that and

1733
01:55:02,119 --> 01:55:07,099
we and I guess then you would take the

1734
01:55:03,800 --> 01:55:08,390
other part of this one so you'd say you

1735
01:55:07,100 --> 01:55:10,190
want the first and second part of close

1736
01:55:08,390 --> 01:55:16,610
are close enough and the first and

1737
01:55:10,189 --> 01:55:18,159
second part of any inside right I think

1738
01:55:16,609 --> 01:55:21,469
that's what we're talking about here and

1739
01:55:18,159 --> 01:55:26,079
then you would do another one of those

1740
01:55:21,469 --> 01:55:29,090
where you said and then take and stack

1741
01:55:26,079 --> 01:55:33,670
the second and third parts of both of

1742
01:55:29,090 --> 01:55:36,770
those right so you do like stacks zero

1743
01:55:33,670 --> 01:55:38,960
stacked one so we're just shuffling to

1744
01:55:36,770 --> 01:55:41,450
get things into the right lanes so now

1745
01:55:38,960 --> 01:55:45,550
we've got one that's got 0 1 0 1 and 2 3

1746
01:55:41,449 --> 01:55:45,550
2 3 we would order those together

1747
01:55:52,698 --> 01:56:02,579
right so now we know if 0 and 2 match 1

1748
01:55:57,479 --> 01:56:06,598
in 3 match right and so then we just

1749
01:56:02,579 --> 01:56:09,840
have to do that one more time and we

1750
01:56:06,599 --> 01:56:18,389
would be good right because now we just

1751
01:56:09,840 --> 01:56:19,409
have 0 we just need to do and I'll just

1752
01:56:18,389 --> 01:56:22,199
call it this I don't know what to call

1753
01:56:19,408 --> 01:56:28,309
them so we just need to do it another

1754
01:56:22,198 --> 01:56:28,309
shuffle for X of that result right cuz

1755
01:56:30,560 --> 01:56:43,500
in the wait that's not quite right

1756
01:56:39,510 --> 01:56:45,539
so in 0 1 we got 0 1 0 1 2 3 2 3 we do

1757
01:56:43,500 --> 01:56:47,460
those now we have to do that one more

1758
01:56:45,539 --> 01:56:53,599
time so we have to do this exact thing

1759
01:56:47,460 --> 01:56:55,948
one more time right although that's

1760
01:56:53,599 --> 01:56:58,020
possibly not true because we could pack

1761
01:56:55,948 --> 01:57:00,809
these I'm just sorry I'm just trying to

1762
01:56:58,020 --> 01:57:04,679
see what's going on here so I could do

1763
01:57:00,810 --> 01:57:07,080
like stack o 1 and then this is like Y Z

1764
01:57:04,679 --> 01:57:11,449
here this is XY or whatever right so

1765
01:57:07,079 --> 01:57:17,819
then we just say like okay take a 1 and

1766
01:57:11,448 --> 01:57:20,329
produce you know the the 0 1 2 3 here

1767
01:57:17,819 --> 01:57:20,329
right

1768
01:57:26,989 --> 01:57:31,679
so this is just the slow oaring together

1769
01:57:29,880 --> 01:57:39,260
you have to like or or or it's like a

1770
01:57:31,680 --> 01:57:39,260
horizontal or right and then at the end

1771
01:57:39,680 --> 01:57:45,860
now you just do the one chef so you just

1772
01:57:42,300 --> 01:57:56,640
do what's the word we're looking for

1773
01:57:45,859 --> 01:58:02,299
should push equals any true stack equai

1774
01:57:56,640 --> 01:58:02,300
I guess

1775
01:58:11,789 --> 01:58:20,828
this is actually called tea inside there

1776
01:58:18,039 --> 01:58:22,118
we go so that's a little hacky I

1777
01:58:20,828 --> 01:58:23,828
probably shouldn't leave that in there I

1778
01:58:22,118 --> 01:58:26,078
was just curious I could get this thing

1779
01:58:23,828 --> 01:58:28,868
to do something resembling anything that

1780
01:58:26,078 --> 01:58:31,569
I wanted it to do which you know didn't

1781
01:58:28,868 --> 01:58:34,948
look likely but let's go ahead and take

1782
01:58:31,569 --> 01:58:34,948
a look let's jump here

1783
01:58:50,449 --> 01:59:02,760
so that's one seam of for the stack but

1784
01:58:54,569 --> 01:59:07,139
not for this one here right let's take a

1785
01:59:02,760 --> 01:59:11,400
look at it one more time so here we are

1786
01:59:07,140 --> 01:59:16,340
loading up shuffling we do our nonsense

1787
01:59:11,399 --> 01:59:23,549
dance here we do our subs our mobs we

1788
01:59:16,340 --> 01:59:25,230
compare and move I don't know oops I

1789
01:59:23,550 --> 01:59:28,680
accidentally hit step in that ruined

1790
01:59:25,229 --> 01:59:30,750
window I guess we do our auras together

1791
01:59:28,680 --> 01:59:34,680
we do our mouth masks and so we're

1792
01:59:30,750 --> 01:59:37,560
almost down to it if we could just why

1793
01:59:34,680 --> 01:59:40,260
is this moving so many things in there -

1794
01:59:37,560 --> 01:59:48,000
what's I don't know why it's doing that

1795
01:59:40,260 --> 01:59:52,380
but let's try one more time to get this

1796
01:59:48,000 --> 01:59:53,939
to work so here we're almost like what

1797
01:59:52,380 --> 01:59:57,569
if we just change the way we're doing

1798
01:59:53,939 --> 02:00:00,179
this so we're just like look stack at is

1799
01:59:57,569 --> 02:00:04,469
this thing and we just say the thing

1800
02:00:00,180 --> 02:00:09,380
we're gonna push in there right is it's

1801
02:00:04,470 --> 02:00:09,380
one of these two we then say box back

1802
02:00:09,979 --> 02:00:23,339
depth equals stack at and we have to do

1803
02:00:18,600 --> 02:00:26,000
that before we update the depth do you

1804
02:00:23,340 --> 02:00:26,000
understand that

1805
02:00:28,619 --> 02:00:31,800
probably not

1806
02:00:39,380 --> 02:00:50,159
Hey look at that folks

1807
02:00:44,869 --> 02:00:52,289
it only took like 30 minutes but I think

1808
02:00:50,159 --> 02:00:59,029
I was able to teach the compiler how to

1809
02:00:52,289 --> 02:00:59,029
do a conditional move there it is

1810
02:01:00,439 --> 02:01:04,889
alright but I probably screwed up there

1811
02:01:03,359 --> 02:01:07,349
because any time you write simony code

1812
02:01:04,890 --> 02:01:07,740
because SSC is a disaster of instruction

1813
02:01:07,350 --> 02:01:09,600
set

1814
02:01:07,739 --> 02:01:11,159
you usually get something wrong so I'm

1815
02:01:09,600 --> 02:01:13,079
guessing that the error is high here Oh

1816
02:01:11,159 --> 02:01:17,239
No all right it was the same so I didn't

1817
02:01:13,079 --> 02:01:20,489
screw it up I guess maybe I'm not sure

1818
02:01:17,239 --> 02:01:23,909
all right so we can see move those now

1819
02:01:20,489 --> 02:01:27,510
the problem is yeah it's slower because

1820
02:01:23,909 --> 02:01:32,880
I had to do all this extra crap like we

1821
02:01:27,510 --> 02:01:36,900
don't want that in there so I don't know

1822
02:01:32,880 --> 02:01:39,900
let's see if I rien a ballista it it did

1823
02:01:36,899 --> 02:01:42,659
that that little squiggle I did there

1824
02:01:39,899 --> 02:01:44,129
does that help maybe that's all we

1825
02:01:42,659 --> 02:01:47,880
needed and if that's the case we can go

1826
02:01:44,130 --> 02:01:58,920
back to doing it the not slow way and to

1827
02:01:47,880 --> 02:02:00,600
see no it did not so the problem is as

1828
02:01:58,920 --> 02:02:09,180
far as I can tell as soon as you start

1829
02:02:00,600 --> 02:02:11,039
to do this it thinks it needs to do it

1830
02:02:09,180 --> 02:02:12,570
thinks it needs to do a test on this but

1831
02:02:11,039 --> 02:02:14,369
I don't actually want it to do that so

1832
02:02:12,569 --> 02:02:16,559
maybe I can phrase this in a different

1833
02:02:14,369 --> 02:02:18,090
way so for example if I was to write

1834
02:02:16,560 --> 02:02:20,340
that would it work now that's not the

1835
02:02:18,090 --> 02:02:22,440
same expression so I don't actually know

1836
02:02:20,340 --> 02:02:24,600
that we want to do that but let's just

1837
02:02:22,439 --> 02:02:33,689
see what it does

1838
02:02:24,600 --> 02:02:36,980
I'm just curious yes so if I was to do

1839
02:02:33,689 --> 02:02:36,979
that with an or

1840
02:03:08,060 --> 02:03:18,510
how would I make this happen so if we do

1841
02:03:12,479 --> 02:03:23,099
any true on closer close enough and then

1842
02:03:18,510 --> 02:03:26,010
we do any inside we've got those two and

1843
02:03:23,100 --> 02:03:28,860
I want to or those two together we know

1844
02:03:26,010 --> 02:03:31,500
we've got a mask now that's like you

1845
02:03:28,859 --> 02:03:34,949
know 16 bits of mask we only actually

1846
02:03:31,500 --> 02:03:36,869
care about four bits out of the 16 any

1847
02:03:34,949 --> 02:03:43,710
four will do as long as they're spread

1848
02:03:36,869 --> 02:03:45,059
out by four bits each and the question

1849
02:03:43,710 --> 02:03:51,710
is is there some way we can quickly

1850
02:03:45,060 --> 02:03:51,710
produce that result

1851
02:04:04,609 --> 02:04:13,789
but wait that's an or suey that should

1852
02:04:10,729 --> 02:04:14,479
just work shouldn't it what am i what am

1853
02:04:13,788 --> 02:04:16,819
I talking about

1854
02:04:14,479 --> 02:04:18,829
we just care if anything set so that's

1855
02:04:16,819 --> 02:04:22,698
fine what I don't know why I'm freaking

1856
02:04:18,828 --> 02:04:25,208
out so wait does that work just doing

1857
02:04:22,698 --> 02:04:25,208
what I did there

1858
02:04:33,630 --> 02:04:38,819
so it does work okay so we can get the

1859
02:04:36,869 --> 02:04:41,819
conditional move to happen we can get

1860
02:04:38,819 --> 02:04:45,000
this to happen but we don't necessarily

1861
02:04:41,819 --> 02:04:47,429
produce faster code here do we because

1862
02:04:45,000 --> 02:05:14,600
that didn't look faster to me let me

1863
02:04:47,430 --> 02:05:14,600
take a look at what we've got yeah

1864
02:05:15,829 --> 02:05:22,470
although those things yes so I guess I'm

1865
02:05:21,029 --> 02:05:25,109
not sure why that wouldn't always be

1866
02:05:22,470 --> 02:05:27,869
faster but also so this doesn't actually

1867
02:05:25,109 --> 02:05:31,349
have to be this way too it could be it

1868
02:05:27,869 --> 02:05:34,289
could just use the mask and close enough

1869
02:05:31,350 --> 02:05:37,110
as a mob it doesn't have to do an and in

1870
02:05:34,289 --> 02:05:40,590
this space here but I'm not sure why

1871
02:05:37,109 --> 02:05:43,170
that would itself be slower it might be

1872
02:05:40,590 --> 02:05:48,380
because this is clogging up the pipe a

1873
02:05:43,170 --> 02:05:48,380
little so can we just do

1874
02:05:53,248 --> 02:06:13,859
can we just do this should push equals

1875
02:06:03,998 --> 02:06:13,859
any true tea inside or any true

1876
02:06:25,329 --> 02:06:28,640
[Music]

1877
02:06:38,899 --> 02:06:56,339
can we do this does this does this help

1878
02:06:52,829 --> 02:06:59,399
us so we just mouth mask those guys and

1879
02:06:56,340 --> 02:07:09,810
then do it in scaler you know I'm saying

1880
02:06:59,399 --> 02:07:15,420
to you does anyone like that yes it's

1881
02:07:09,810 --> 02:07:17,930
fine with that all right so does that

1882
02:07:15,420 --> 02:07:17,930
help us at all

1883
02:07:28,889 --> 02:07:36,630
don't know if it does so I don't know

1884
02:07:33,658 --> 02:07:41,308
why we're slower that way but it looks

1885
02:07:36,630 --> 02:07:42,868
like I mean from testing those two paths

1886
02:07:41,309 --> 02:07:46,309
that we'd have to investigate them a

1887
02:07:42,868 --> 02:07:54,779
little bit further but it looks like

1888
02:07:46,309 --> 02:07:59,159
that it looks like that doing the jump

1889
02:07:54,779 --> 02:08:06,208
is cheaper than doing the to see moves

1890
02:07:59,158 --> 02:08:09,089
like it would rather do it so skipping a

1891
02:08:06,208 --> 02:08:11,188
few of these opps with a potentially

1892
02:08:09,090 --> 02:08:13,288
mispredicted branch maybe the branch is

1893
02:08:11,189 --> 02:08:15,899
very predictable it could be the answer

1894
02:08:13,288 --> 02:08:17,759
there because if you if you don't

1895
02:08:15,899 --> 02:08:19,919
usually miss predict the branch then

1896
02:08:17,760 --> 02:08:22,019
saving the work might actually help us

1897
02:08:19,918 --> 02:08:23,219
but I don't know so I think this is the

1898
02:08:22,019 --> 02:08:26,699
first thing I would like to look at love

1899
02:08:23,219 --> 02:08:29,639
to look at it with V tune in mind there

1900
02:08:26,698 --> 02:08:35,069
but it looks like it actually would just

1901
02:08:29,639 --> 02:08:37,260
prefer to do the the test right so if we

1902
02:08:35,069 --> 02:08:40,279
if we let it do what it wanted to do

1903
02:08:37,260 --> 02:08:40,280
which is this

1904
02:08:56,930 --> 02:08:59,930
okay

1905
02:09:07,289 --> 02:09:11,720
should really like check both of these

1906
02:09:25,869 --> 02:09:32,029
so that's what it wanted to do before so

1907
02:09:29,569 --> 02:09:35,199
here's with the the branchy like you

1908
02:09:32,029 --> 02:09:35,199
know doing lots of jumps around

1909
02:09:41,368 --> 02:09:46,408
and that's like way faster right it just

1910
02:09:43,559 --> 02:09:49,849
it prefers that right so if I cut and

1911
02:09:46,408 --> 02:09:53,398
paste this and I just say alright like

1912
02:09:49,849 --> 02:09:55,229
here's that part of the routine let's

1913
02:09:53,399 --> 02:09:57,149
put both of those in so we can check

1914
02:09:55,229 --> 02:09:59,010
them then next weekend what we can do is

1915
02:09:57,149 --> 02:10:01,499
take a look and see what exactly is

1916
02:09:59,010 --> 02:10:03,030
going on there just so we understand why

1917
02:10:01,498 --> 02:10:04,769
it's faster to do it that way because

1918
02:10:03,029 --> 02:10:09,148
I'm not sure I understand why because it

1919
02:10:04,769 --> 02:10:12,659
seems like that branch shouldn't be very

1920
02:10:09,149 --> 02:10:14,010
predictable right and so I just would

1921
02:10:12,658 --> 02:10:17,848
like to know like what the heck

1922
02:10:14,010 --> 02:10:18,719
right like what's happening there and it

1923
02:10:17,849 --> 02:10:20,899
could be that there's a bunch of things

1924
02:10:18,719 --> 02:10:26,639
that I'm not like thinking of right so

1925
02:10:20,899 --> 02:10:41,309
here's the if one here's the else Clause

1926
02:10:26,639 --> 02:10:48,389
oops so there we go

1927
02:10:41,309 --> 02:10:54,599
and it looks like that was still in

1928
02:10:48,389 --> 02:10:59,149
there even in the fast case right so

1929
02:10:54,599 --> 02:10:59,149
this just looks like that

1930
02:11:02,479 --> 02:11:11,209
right so in here we would then say like

1931
02:11:08,300 --> 02:11:22,489
okay we got to do this check this is

1932
02:11:11,210 --> 02:11:33,649
like the current fast path right and

1933
02:11:22,489 --> 02:11:34,699
then we want to know like we want to

1934
02:11:33,649 --> 02:11:36,920
know what's going on here

1935
02:11:34,699 --> 02:11:39,229
and so let me just recreate this so it

1936
02:11:36,920 --> 02:11:42,470
is correct it's like any true T inside

1937
02:11:39,229 --> 02:11:43,819
double or and then the and well I guess

1938
02:11:42,470 --> 02:11:47,800
we're saying she close enough was the

1939
02:11:43,819 --> 02:11:47,799
fast one so basically like this

1940
02:12:03,010 --> 02:12:14,020
this is the should push written the same

1941
02:12:06,829 --> 02:12:14,019
way as the outer should push right oops

1942
02:12:15,699 --> 02:12:21,519
so in theory now if I actually run this

1943
02:12:21,970 --> 02:12:25,210
like so

1944
02:12:30,520 --> 02:12:36,300
that's the fast lane if I go like this

1945
02:12:49,488 --> 02:12:55,578
it's slower way now it's not like much

1946
02:12:53,510 --> 02:12:58,730
slower but it is slower and so it'd be

1947
02:12:55,578 --> 02:13:00,618
nice to know like why wouldn't having

1948
02:12:58,729 --> 02:13:02,988
that be branchless be better and we'd

1949
02:13:00,618 --> 02:13:05,538
like to just go look at it because it

1950
02:13:02,988 --> 02:13:07,968
does seem like that's a bit weird to me

1951
02:13:05,538 --> 02:13:10,670
and I'd like to just grab the to

1952
02:13:07,969 --> 02:13:21,498
assembly languages outputs and compare

1953
02:13:10,670 --> 02:13:27,469
them let's go ahead and go to the the

1954
02:13:21,498 --> 02:13:30,078
Q&amp;A well hmm you know what I just

1955
02:13:27,469 --> 02:13:33,618
realized though so there is something a

1956
02:13:30,078 --> 02:13:35,029
little bit bad about this loop why the C

1957
02:13:33,618 --> 02:13:37,399
mobs might not actually be an

1958
02:13:35,029 --> 02:13:42,498
improvement and that I think about it

1959
02:13:37,399 --> 02:13:44,960
it's because we only do a fan-out of two

1960
02:13:42,498 --> 02:13:46,788
on each of these partitions so our

1961
02:13:44,960 --> 02:13:48,948
partition stuff is pretty crappy that's

1962
02:13:46,788 --> 02:13:50,569
why we were like going to like be

1963
02:13:48,948 --> 02:13:54,288
replacing this with with a more

1964
02:13:50,569 --> 02:13:56,210
streamlined thing so it could be that

1965
02:13:54,288 --> 02:13:58,189
that's what's happening is that it does

1966
02:13:56,210 --> 02:14:00,349
the C mobs but then it immediately has

1967
02:13:58,189 --> 02:14:06,469
to load the C mobs here in order to

1968
02:14:00,349 --> 02:14:08,559
start doing this branch so that's just

1969
02:14:06,469 --> 02:14:13,038
the mispredicted branch again probably

1970
02:14:08,559 --> 02:14:14,179
right so I could see that it'll be nice

1971
02:14:13,038 --> 02:14:16,609
that we could figure out a way to not

1972
02:14:14,179 --> 02:14:19,658
have this branch here but I'm not sure

1973
02:14:16,609 --> 02:14:19,658
there's any way to do that

1974
02:14:21,680 --> 02:14:32,930
I mean there is one way to do it I guess

1975
02:14:30,319 --> 02:14:37,420
and that's if you actually streamed out

1976
02:14:32,930 --> 02:14:37,420
the boxes and then streamed them back in

1977
02:14:43,720 --> 02:14:51,460
thank you that would not work I don't

1978
02:14:49,279 --> 02:14:51,460
think

1979
02:14:56,949 --> 02:15:12,800
anyway QA hmm I think the MSDN you were

1980
02:15:10,729 --> 02:15:15,019
looking for is potentially set file

1981
02:15:12,800 --> 02:15:23,140
information by Handel yes that sounds

1982
02:15:15,020 --> 02:15:23,140
right like I said like I said I think I

1983
02:15:25,479 --> 02:15:29,359
think there's an API for it and that

1984
02:15:27,319 --> 02:15:31,880
sounds like the right one I knew there

1985
02:15:29,359 --> 02:15:34,659
was one but it's just a later API it was

1986
02:15:31,880 --> 02:15:34,659
one they they added

1987
02:15:41,439 --> 02:15:44,439
so

1988
02:15:59,750 --> 02:16:05,880
so logical or and are only

1989
02:16:03,560 --> 02:16:07,410
short-circuited if the compiler has to

1990
02:16:05,880 --> 02:16:09,930
short-circuit them since there's no side

1991
02:16:07,409 --> 02:16:11,430
effects here there's no it the compiler

1992
02:16:09,930 --> 02:16:13,920
I mean unless the compiler is really

1993
02:16:11,430 --> 02:16:17,610
weird isn't going to think that it can't

1994
02:16:13,920 --> 02:16:18,989
do an and for some registers right the

1995
02:16:17,609 --> 02:16:20,219
only time it has to care about the

1996
02:16:18,989 --> 02:16:23,569
short-circuiting property is if there's

1997
02:16:20,220 --> 02:16:23,570
a side-effect and there isn't one here

1998
02:16:34,329 --> 02:16:37,789
can't you just use clothes enough

1999
02:16:36,379 --> 02:16:39,289
instead of clothes are close enough in

2000
02:16:37,790 --> 02:16:43,580
the should push assignment close enough

2001
02:16:39,290 --> 02:16:46,510
is already ANDed with masks this is 0-1

2002
02:16:43,579 --> 02:16:46,510
a set of Oh

2003
02:17:00,040 --> 02:17:12,620
you are correct let me leave this one in

2004
02:17:10,610 --> 02:17:18,650
the branchless case this is the

2005
02:17:12,620 --> 02:17:21,070
branchless version not the branch

2006
02:17:18,649 --> 02:17:21,069
eversion

2007
02:17:36,529 --> 02:17:40,889
so one thing that's interesting is so if

2008
02:17:39,029 --> 02:17:43,380
we had a bug but still produce the same

2009
02:17:40,888 --> 02:17:45,388
result that also kind of means that one

2010
02:17:43,379 --> 02:17:52,558
of the problems is these branches aren't

2011
02:17:45,388 --> 02:17:54,598
particularly well exercised so it that

2012
02:17:52,558 --> 02:17:56,638
could also be like another reason right

2013
02:17:54,599 --> 02:18:01,558
so you notice that one's pretty close to

2014
02:17:56,638 --> 02:18:03,568
fast enough when we did them all in when

2015
02:18:01,558 --> 02:18:07,259
we just use one any true and then went

2016
02:18:03,568 --> 02:18:09,769
with the the branchless version so I do

2017
02:18:07,260 --> 02:18:12,029
wonder if maybe that means we should be

2018
02:18:09,769 --> 02:18:13,978
we should be looking at this a little

2019
02:18:12,029 --> 02:18:19,579
bit more carefully and doing a faster

2020
02:18:13,978 --> 02:18:19,579
version of this you know I'm saying oh

2021
02:18:22,218 --> 02:18:34,799
this is and this is an annoying way to

2022
02:18:29,040 --> 02:18:37,949
test code yeah because this one was much

2023
02:18:34,799 --> 02:18:47,818
slower right this was like 7.3 yes and

2024
02:18:37,949 --> 02:18:51,059
point five so this way is I guess the

2025
02:18:47,818 --> 02:18:53,329
current fastest branchless version that

2026
02:18:51,058 --> 02:18:53,329
we had

2027
02:18:59,529 --> 02:19:04,309
and anyway so some of the chat was

2028
02:19:01,670 --> 02:19:06,349
pointing out to this so why do we need

2029
02:19:04,308 --> 02:19:08,478
to do an or here because clothes are

2030
02:19:06,349 --> 02:19:14,269
close enough was ANDed with this and the

2031
02:19:08,478 --> 02:19:18,198
reason is because well I guess now that

2032
02:19:14,269 --> 02:19:26,559
we took that out though yeah that's a

2033
02:19:18,199 --> 02:19:31,699
good question well no because you I

2034
02:19:26,558 --> 02:19:32,988
think because in this particular case no

2035
02:19:31,699 --> 02:19:33,889
yeah no you're right we don't really

2036
02:19:32,988 --> 02:19:36,408
need this do we

2037
02:19:33,888 --> 02:19:40,788
that's just superfluous I don't know why

2038
02:19:36,408 --> 02:19:54,590
I did that so I guess it's just close

2039
02:19:40,789 --> 02:19:56,449
enough so this is just this I don't know

2040
02:19:54,590 --> 02:19:58,658
why that extra hand was in there doesn't

2041
02:19:56,449 --> 02:19:58,658
need to be

2042
02:20:03,200 --> 02:20:05,891
right

2043
02:20:16,620 --> 02:20:23,880
all right so if we do Prof on this path

2044
02:20:21,200 --> 02:20:25,260
this is the branchless path although I

2045
02:20:23,879 --> 02:20:27,209
have to go verify that it's still

2046
02:20:25,260 --> 02:20:29,851
branchless since we don't really know

2047
02:20:27,209 --> 02:20:31,560
what the compiler decided to do and then

2048
02:20:29,851 --> 02:20:35,900
if I do this path this is the branchy

2049
02:20:31,560 --> 02:20:35,899
path oops

2050
02:20:36,590 --> 02:20:43,340
close enough so this is the branchy path

2051
02:20:53,390 --> 02:20:56,050
yeah

2052
02:20:59,229 --> 02:21:13,699
so it's a little bit weird but because

2053
02:21:06,200 --> 02:21:15,620
those see moves are used like

2054
02:21:13,700 --> 02:21:20,030
potentially immediately after I can see

2055
02:21:15,620 --> 02:21:23,811
why that's not such a good idea so if we

2056
02:21:20,030 --> 02:21:33,290
were streaming this out more maybe they

2057
02:21:23,810 --> 02:21:38,810
would be better but were not so for

2058
02:21:33,290 --> 02:21:40,820
example if it were a circularbuffer you

2059
02:21:38,810 --> 02:21:41,869
know what I'm saying it would be

2060
02:21:40,819 --> 02:21:42,619
interesting to test this with a

2061
02:21:41,870 --> 02:21:45,141
circularbuffer

2062
02:21:42,620 --> 02:21:49,521
so that instead of popping the last

2063
02:21:45,140 --> 02:21:53,750
thing you wrote you pop the leak like

2064
02:21:49,521 --> 02:21:58,040
the thing you wrote as far back as you

2065
02:21:53,750 --> 02:22:00,050
can then you would not be having those

2066
02:21:58,040 --> 02:22:08,931
questions I don't know I'm gonna put a

2067
02:22:00,050 --> 02:22:11,470
note in just to try that because that

2068
02:22:08,931 --> 02:22:11,471
might be interesting

2069
02:22:17,030 --> 02:22:21,480
somebody in chat had the idea of loading

2070
02:22:19,290 --> 02:22:22,650
the raycast through the DLL for testing

2071
02:22:21,479 --> 02:22:29,310
could this remove the floating point

2072
02:22:22,649 --> 02:22:35,260
errors in the test code that that is a

2073
02:22:29,310 --> 02:22:38,458
pretty good idea I like that idea a lot

2074
02:22:35,260 --> 02:22:38,459
[Music]

2075
02:22:40,190 --> 02:22:44,670
yeah we could do that so the only thing

2076
02:22:43,319 --> 02:22:47,989
we would have to do there is we'd have

2077
02:22:44,670 --> 02:22:47,989
to make an entry point for it

2078
02:23:25,549 --> 02:23:28,578
I'm sorry there's so many questions I

2079
02:23:27,439 --> 02:23:30,109
can't really handle them all

2080
02:23:28,578 --> 02:23:31,699
is it possible to structure the game

2081
02:23:30,109 --> 02:23:33,140
code so that it would run recently fast

2082
02:23:31,699 --> 02:23:35,180
in debug mode would that be worth the

2083
02:23:33,139 --> 02:23:44,439
hassle sure you can just don't run the

2084
02:23:35,180 --> 02:23:44,439
lighting right

2085
02:23:52,870 --> 02:23:59,680
will you come to the dark side and track

2086
02:23:54,860 --> 02:23:59,680
us the optimizer doesn't use Const so

2087
02:24:02,530 --> 02:24:06,500
there's there's very one there's one

2088
02:24:04,760 --> 02:24:08,210
specific case where the compiler can

2089
02:24:06,500 --> 02:24:10,399
optimize with constant we don't even

2090
02:24:08,209 --> 02:24:12,559
have that case so it causes useless for

2091
02:24:10,399 --> 02:24:17,600
optimization if you don't believe me go

2092
02:24:12,559 --> 02:24:21,819
watch Chandler Harris talk about it the

2093
02:24:17,600 --> 02:24:21,819
guy oversees the optimizer for LLVM so

2094
02:24:22,809 --> 02:24:41,090
if he says they don't use it I believe

2095
02:24:25,521 --> 02:24:44,409
him let's see what am i dropping a

2096
02:24:41,090 --> 02:24:44,409
little of course as soon as it's done

2097
02:24:50,940 --> 02:24:56,221
well I have you up the last Hameed here

2098
02:24:53,460 --> 02:24:57,930
episode on my rocky to account um so

2099
02:24:56,220 --> 02:24:59,790
there is only one account now it's just

2100
02:24:57,931 --> 02:25:01,591
since we post everything on that one

2101
02:24:59,790 --> 02:25:05,161
account I just call it Molly rocket now

2102
02:25:01,591 --> 02:25:07,831
it's the only account we have we don't

2103
02:25:05,161 --> 02:25:09,390
have another account I just changed the

2104
02:25:07,831 --> 02:25:11,851
name from handmade hero to molly rocket

2105
02:25:09,390 --> 02:25:14,161
because like I'm not

2106
02:25:11,851 --> 02:25:15,661
we had other videos we wanted to post

2107
02:25:14,161 --> 02:25:18,751
and we posted like the Anna draws it

2108
02:25:15,661 --> 02:25:21,451
there as well like back when I posted

2109
02:25:18,751 --> 02:25:23,581
that so it's just called Molly rocket

2110
02:25:21,450 --> 02:25:26,820
now and so stuff gets posted there

2111
02:25:23,581 --> 02:25:30,111
that's Molly Rock related it's handmade

2112
02:25:26,820 --> 02:25:30,111
hero we're not

2113
02:25:44,761 --> 02:25:50,970
mm-hmm MSP C is very often not

2114
02:25:49,261 --> 02:25:52,319
optimizing away obvious things basically

2115
02:25:50,970 --> 02:25:55,050
you cannot do so-called zero cast

2116
02:25:52,319 --> 02:25:56,851
abstractions with it for example it

2117
02:25:55,050 --> 02:25:58,200
always does short-circuiting or from

2118
02:25:56,851 --> 02:26:00,751
experience I also remember it sometimes

2119
02:25:58,200 --> 02:26:04,260
calls empty constructors why don't use

2120
02:26:00,751 --> 02:26:07,771
reads with violet clang gcci CC so clang

2121
02:26:04,261 --> 02:26:09,899
also has a bunch of problems generate

2122
02:26:07,771 --> 02:26:13,261
like clang generates slower code for

2123
02:26:09,899 --> 02:26:16,800
meow hash than MSB C so it's never clear

2124
02:26:13,261 --> 02:26:20,640
win to switch compilers I don't use G

2125
02:26:16,800 --> 02:26:21,810
clang on windows because like it still

2126
02:26:20,640 --> 02:26:24,479
has a little ways to go before it's

2127
02:26:21,810 --> 02:26:26,279
battle proofed in my opinion like it's

2128
02:26:24,479 --> 02:26:30,149
only just been recently that you could

2129
02:26:26,280 --> 02:26:34,201
use clang on Windows and get like usable

2130
02:26:30,149 --> 02:26:35,569
debug info so I do think eventually like

2131
02:26:34,200 --> 02:26:38,609
I will probably switch to clang

2132
02:26:35,569 --> 02:26:44,310
permanently on Windows but maybe like in

2133
02:26:38,610 --> 02:26:46,051
a year or two hmm like when I'm really

2134
02:26:44,310 --> 02:26:47,581
really sure that that I'm not gonna be

2135
02:26:46,050 --> 02:26:49,350
having weird stuff like I'm trying to

2136
02:26:47,581 --> 02:26:51,030
bug my app and like it it output like a

2137
02:26:49,351 --> 02:26:52,831
crappy PDB that doesn't quite show the

2138
02:26:51,030 --> 02:26:59,161
right info or whatever right which it

2139
02:26:52,831 --> 02:27:00,390
was doing for awhile and one of the very

2140
02:26:59,161 --> 02:27:01,890
first episode and here you mentioned it

2141
02:27:00,390 --> 02:27:03,600
would be good idea to recreate the

2142
02:27:01,890 --> 02:27:04,770
window if WM destroy was caught in the

2143
02:27:03,601 --> 02:27:08,701
window procedure and what's our snare

2144
02:27:04,771 --> 02:27:11,521
does this happen I'm not sure what

2145
02:27:08,700 --> 02:27:14,399
you're referring to recreate the window

2146
02:27:11,521 --> 02:27:16,860
if WM destroy was caught in the window

2147
02:27:14,399 --> 02:27:21,931
procedure I'm not sure what I would have

2148
02:27:16,860 --> 02:27:23,341
meant by recreate the window I guess if

2149
02:27:21,931 --> 02:27:24,541
I just meant look if someone tried to

2150
02:27:23,341 --> 02:27:25,399
destroy our window we could just make a

2151
02:27:24,540 --> 02:27:29,189
new one

2152
02:27:25,399 --> 02:27:30,120
maybe I don't I don't know sorry it's

2153
02:27:29,190 --> 02:27:33,621
been a long time I don't remember

2154
02:27:30,120 --> 02:27:33,620
exactly what kind of said that in

2155
02:27:48,148 --> 02:27:52,000
and just to be clear about the comms

2156
02:27:50,290 --> 02:27:53,620
thing it's not like it's MSV see that

2157
02:27:52,000 --> 02:27:56,350
doesn't use cost like clang doesn't use

2158
02:27:53,620 --> 02:27:58,600
cost either because you can't the C++

2159
02:27:56,350 --> 02:28:01,120
spec pretty much prevents the optimizer

2160
02:27:58,600 --> 02:28:09,609
from using Const because Const Cass is

2161
02:28:01,120 --> 02:28:10,840
legal these optimized need to be

2162
02:28:09,609 --> 02:28:12,488
low-level how do you know when it's

2163
02:28:10,840 --> 02:28:13,689
worth going to this level versus zooming

2164
02:28:12,488 --> 02:28:16,510
out to examine the overall algorithm

2165
02:28:13,689 --> 02:28:19,000
remember they are data volume so

2166
02:28:16,510 --> 02:28:20,760
actually we're sort of at the beginning

2167
02:28:19,000 --> 02:28:23,889
of things here which is just

2168
02:28:20,760 --> 02:28:26,500
investigation so more specifically what

2169
02:28:23,889 --> 02:28:29,260
I was doing there was not so much trying

2170
02:28:26,500 --> 02:28:31,059
to optimize this routine per se as I was

2171
02:28:29,260 --> 02:28:33,159
trying to look at what effect branches

2172
02:28:31,059 --> 02:28:35,170
were having in that routine right so I

2173
02:28:33,159 --> 02:28:38,770
wouldn't actually we're not optimizing

2174
02:28:35,170 --> 02:28:40,629
yet we're just looking at what's

2175
02:28:38,770 --> 02:28:43,829
happening in these routines to get a

2176
02:28:40,629 --> 02:28:43,829
feel for what's going on

2177
02:28:44,340 --> 02:28:51,880
as far as when to look at the overall

2178
02:28:47,978 --> 02:28:54,698
algorithm we're going to do that very

2179
02:28:51,879 --> 02:28:57,698
shortly because we need our spatial

2180
02:28:54,699 --> 02:29:00,729
partition to be better but before to

2181
02:28:57,699 --> 02:29:02,770
unwind the entire thing before I replace

2182
02:29:00,728 --> 02:29:04,898
how we're storing the spatial partition

2183
02:29:02,770 --> 02:29:06,970
I wanted to verify that nothing stupid

2184
02:29:04,898 --> 02:29:08,858
was happening in the current one so I

2185
02:29:06,969 --> 02:29:10,539
wanted to make sure that the Brandt

2186
02:29:08,859 --> 02:29:13,390
extra branches in there weren't a

2187
02:29:10,540 --> 02:29:16,420
problem it looks like they aren't so I

2188
02:29:13,389 --> 02:29:18,189
do think at least at this point we could

2189
02:29:16,420 --> 02:29:20,680
consider this traversal to be

2190
02:29:18,189 --> 02:29:24,279
representative of this spatial hierarchy

2191
02:29:20,680 --> 02:29:25,779
right that's important because I don't

2192
02:29:24,279 --> 02:29:27,100
want to go replacing the spatial

2193
02:29:25,779 --> 02:29:28,840
hierarchy and claiming that it got

2194
02:29:27,100 --> 02:29:29,920
faster when really the reason that it

2195
02:29:28,840 --> 02:29:31,630
got faster but because there something

2196
02:29:29,920 --> 02:29:35,620
stupid happening in the previous one

2197
02:29:31,629 --> 02:29:38,889
right so it's important to kind of look

2198
02:29:35,620 --> 02:29:41,380
at what's going on now and make sure

2199
02:29:38,889 --> 02:29:43,629
there's nothing dumb billing on before

2200
02:29:41,379 --> 02:29:45,969
we start to claim that we changed

2201
02:29:43,629 --> 02:29:48,129
something and made an improvement so the

2202
02:29:45,969 --> 02:29:50,260
answer is no we're not really looking at

2203
02:29:48,129 --> 02:29:51,608
low level optimizations right now all we

2204
02:29:50,260 --> 02:29:53,380
were doing today and the reason we were

2205
02:29:51,609 --> 02:29:55,238
looking at a finicky thing today was

2206
02:29:53,379 --> 02:29:58,209
just trying to vary I just wanted to see

2207
02:29:55,238 --> 02:29:59,859
is it fair to say that this loop is

2208
02:29:58,209 --> 02:30:00,789
operating as expected or was there

2209
02:29:59,859 --> 02:30:02,470
something weird going on

2210
02:30:00,790 --> 02:30:03,790
I wanted to make sure that using C mobs

2211
02:30:02,469 --> 02:30:05,799
wouldn't be like a huge win or something

2212
02:30:03,790 --> 02:30:07,030
in there before I claimed that it was

2213
02:30:05,799 --> 02:30:13,439
running at roughly the speed I could

2214
02:30:07,030 --> 02:30:13,440
expect right hopefully that helps

2215
02:30:20,189 --> 02:30:30,359
if John's talking I restarted yeah we

2216
02:30:21,568 --> 02:30:32,728
could raid it after this I guess what

2217
02:30:30,359 --> 02:30:33,779
I'm curious about is why you shouldn't

2218
02:30:32,728 --> 02:30:35,278
just terminate the application if you

2219
02:30:33,779 --> 02:30:37,290
get that mean destroy procedure cuz who

2220
02:30:35,279 --> 02:30:38,550
knows where it came from I mean we

2221
02:30:37,290 --> 02:30:43,529
should have been the ones to quit our

2222
02:30:38,549 --> 02:30:49,679
application right how many hours of week

2223
02:30:43,529 --> 02:30:51,029
do I work normally a total including

2224
02:30:49,680 --> 02:30:58,430
being on stream for hand-made here oh

2225
02:30:51,029 --> 02:30:58,430
you mean I don't know a lot

2226
02:31:04,069 --> 02:31:07,360
a lot of hours

2227
02:31:12,180 --> 02:31:24,449
many many hours I don't know 60 of

2228
02:31:22,439 --> 02:31:27,869
actual work like I don't count it as

2229
02:31:24,449 --> 02:31:30,828
work if I'm like not actually

2230
02:31:27,869 --> 02:31:30,828
programming or something

2231
02:31:37,819 --> 02:31:43,760
yeah my RSI problem is like totally gone

2232
02:31:40,549 --> 02:31:46,459
so switching away from Emacs so not

2233
02:31:43,760 --> 02:31:51,069
using ctrl + alt keys when I program and

2234
02:31:46,459 --> 02:32:00,439
rock climbing pretty much fixed it I

2235
02:31:51,069 --> 02:32:02,360
don't have any wrist pain anymore is it

2236
02:32:00,440 --> 02:32:04,280
possible to not call virtual Alec at all

2237
02:32:02,360 --> 02:32:08,390
so create a global array of bytes and

2238
02:32:04,280 --> 02:32:10,610
then point to that um you could but it's

2239
02:32:08,389 --> 02:32:12,349
pointless because the place that those

2240
02:32:10,610 --> 02:32:14,810
bytes came from was virtual Alec anyway

2241
02:32:12,350 --> 02:32:16,489
so all you're doing there is having the

2242
02:32:14,809 --> 02:32:22,520
OS call virtual Alec for you instead of

2243
02:32:16,489 --> 02:32:25,360
you calling it so you could try but it

2244
02:32:22,521 --> 02:32:25,360
doesn't really do anything

2245
02:32:32,299 --> 02:32:37,999
we'll be releasing peace Lakota

2246
02:32:33,799 --> 02:32:40,759
me yeah after handmade hero is done I

2247
02:32:37,998 --> 02:32:47,779
think I said two years after ships will

2248
02:32:40,759 --> 02:32:49,789
release it in the public domain would

2249
02:32:47,779 --> 02:32:54,109
you use a set of control keys yeah

2250
02:32:49,789 --> 02:32:57,680
they're not I don't use them commands

2251
02:32:54,109 --> 02:33:01,220
cuz I never was a VI user I was an Emacs

2252
02:32:57,680 --> 02:33:04,488
user so I didn't have any like pre

2253
02:33:01,219 --> 02:33:07,248
biased towards VI ik controls but I did

2254
02:33:04,488 --> 02:33:10,969
create my own modal binding that's you

2255
02:33:07,248 --> 02:33:14,988
know a a modal binding like vim so

2256
02:33:10,969 --> 02:33:20,088
escape and tilde switch between command

2257
02:33:14,988 --> 02:33:22,128
and edit mode and I just made my own key

2258
02:33:20,088 --> 02:33:24,588
bindings so they're not really very much

2259
02:33:22,129 --> 02:33:28,189
like vim but they are modal in the way

2260
02:33:24,588 --> 02:33:32,689
that vim is modal and has different

2261
02:33:28,189 --> 02:33:34,639
modes of editing so I don't know if that

2262
02:33:32,689 --> 02:33:37,119
answers the question but they're not vim

2263
02:33:34,639 --> 02:33:39,168
controls but they're in a similar spirit

2264
02:33:37,119 --> 02:33:41,149
could you stream your daily working

2265
02:33:39,168 --> 02:33:43,850
process of activity 5 sometime no that's

2266
02:33:41,148 --> 02:33:53,898
all private code we don't talk about any

2267
02:33:43,850 --> 02:33:55,850
of that and yeah you can it su adding

2268
02:33:53,898 --> 02:33:58,219
cost with clang does induce an

2269
02:33:55,850 --> 02:34:01,248
optimization if the front-end can see

2270
02:33:58,219 --> 02:34:03,708
that the Const is being used in a

2271
02:34:01,248 --> 02:34:06,978
particular way right so the front-end

2272
02:34:03,709 --> 02:34:09,140
can see a Const that it knows can't be

2273
02:34:06,978 --> 02:34:11,898
cast that's where you get an

2274
02:34:09,139 --> 02:34:14,288
optimization well you might get an

2275
02:34:11,898 --> 02:34:19,430
optimization if the cop if the compiler

2276
02:34:14,289 --> 02:34:23,239
happens to see it right everywhere else

2277
02:34:19,430 --> 02:34:24,318
it doesn't help you so and it especially

2278
02:34:23,238 --> 02:34:26,270
doesn't help you and what we're doing

2279
02:34:24,318 --> 02:34:28,430
now where the compiler can see all the

2280
02:34:26,270 --> 02:34:30,529
values so when the compiler can see all

2281
02:34:28,430 --> 02:34:32,059
of the values you don't need Const

2282
02:34:30,529 --> 02:34:35,109
because it's not telling the compiler or

2283
02:34:32,059 --> 02:34:38,389
anything it doesn't already know that

2284
02:34:35,109 --> 02:34:42,918
makes sense it's important nowadays you

2285
02:34:38,389 --> 02:34:44,328
so support x86 probably not there could

2286
02:34:42,918 --> 02:34:45,500
be certain specific markets where you

2287
02:34:44,328 --> 02:34:49,329
care

2288
02:34:45,500 --> 02:34:54,229
it kind of depends if that makes sense

2289
02:34:49,329 --> 02:34:55,819
but it's it's pretty specialized if

2290
02:34:54,229 --> 02:35:01,180
you're just like someone shipping a game

2291
02:34:55,819 --> 02:35:01,180
on Steam like no right

2292
02:35:05,890 --> 02:35:16,449
and no we're never gonna use Vulcan on

2293
02:35:07,690 --> 02:35:19,181
handmade hero I can't stand Vulcan hmm I

2294
02:35:16,450 --> 02:35:20,710
mean we do a d3 212 port before we did a

2295
02:35:19,181 --> 02:35:31,091
Vulcan port if we were gonna do a port

2296
02:35:20,709 --> 02:35:41,529
something all righty let's go ahead and

2297
02:35:31,091 --> 02:35:47,170
wrap it up too many things too many

2298
02:35:41,530 --> 02:35:48,400
windows are open right now all right

2299
02:35:47,170 --> 02:35:49,629
thank you everyone join me for those

2300
02:35:48,399 --> 02:35:51,819
sort of handmade here oh it's a pleasure

2301
02:35:49,629 --> 02:35:52,989
coating with you as always if you want

2302
02:35:51,819 --> 02:35:54,399
to following stories at home you can

2303
02:35:52,989 --> 02:35:56,500
always pre-order the game on handmade

2304
02:35:54,399 --> 02:35:58,209
hero org and it comes with source code

2305
02:35:56,500 --> 02:36:01,989
so you can play around with it at home

2306
02:35:58,209 --> 02:36:03,640
if you would like to we also have a

2307
02:36:01,989 --> 02:36:05,500
kickstart going right now for our comic

2308
02:36:03,640 --> 02:36:07,359
if you're interested in in a print

2309
02:36:05,500 --> 02:36:08,771
edition of it that's the place to go

2310
02:36:07,360 --> 02:36:10,210
there's a banner on the page you'd have

2311
02:36:08,771 --> 02:36:12,971
to remember the URL you can just click

2312
02:36:10,209 --> 02:36:16,060
on the banner on handmade hero we also

2313
02:36:12,970 --> 02:36:18,909
have some fun stuff coming up shortly

2314
02:36:16,060 --> 02:36:20,591
after this I will be posting the first

2315
02:36:18,909 --> 02:36:25,959
video on the Molly Rocket youtube

2316
02:36:20,591 --> 02:36:28,659
channel that is a a little series and I

2317
02:36:25,959 --> 02:36:30,609
made called plots Illustrated and it's

2318
02:36:28,659 --> 02:36:32,739
it's just a little thing where Anna and

2319
02:36:30,610 --> 02:36:36,130
I like basically talk to each other

2320
02:36:32,739 --> 02:36:38,619
about like trying to reconstruct the

2321
02:36:36,129 --> 02:36:41,979
plot of a movie our first one we do is

2322
02:36:38,620 --> 02:36:43,471
rise of the skywalker and that'll be

2323
02:36:41,979 --> 02:36:45,220
posted to the handmade hero channel

2324
02:36:43,470 --> 02:36:48,159
immediately after this and then anna

2325
02:36:45,220 --> 02:36:49,959
tries to like draw out the plots and we

2326
02:36:48,159 --> 02:36:51,810
have several of these as anna finishes

2327
02:36:49,959 --> 02:36:54,399
drawing them we'll be posting them

2328
02:36:51,810 --> 02:36:56,319
different like going through the plot in

2329
02:36:54,399 --> 02:36:58,569
like little two minute chunks basically

2330
02:36:56,319 --> 02:37:01,511
that she kind of does like little pseudo

2331
02:36:58,569 --> 02:37:04,209
animation for so those will be coming up

2332
02:37:01,511 --> 02:37:06,551
as well so please stay tuned to the hint

2333
02:37:04,209 --> 02:37:07,899
to the same place to get the handmade

2334
02:37:06,550 --> 02:37:09,640
hero stuff just in my rocket youtube

2335
02:37:07,899 --> 02:37:12,659
channel if just go there it'll be on

2336
02:37:09,640 --> 02:37:14,739
there i'll post it on twitter as well

2337
02:37:12,659 --> 02:37:16,841
that's it for today I'll be back here

2338
02:37:14,739 --> 02:37:18,940
next week to take a little bit closer

2339
02:37:16,841 --> 02:37:20,530
look at how we can get those loops

2340
02:37:18,940 --> 02:37:22,120
a little bit better and we'll have to

2341
02:37:20,530 --> 02:37:23,681
start to think about what the right way

2342
02:37:22,120 --> 02:37:25,061
is to do that obviously fixing our

2343
02:37:23,681 --> 02:37:26,440
spatial partition to be better is going

2344
02:37:25,060 --> 02:37:27,970
to be a big part of that too so we'll

2345
02:37:26,440 --> 02:37:31,899
sort of start that optimization path see

2346
02:37:27,970 --> 02:37:33,520
if we can't get those numbers down I'm

2347
02:37:31,899 --> 02:37:37,659
gonna go ahead and see if I can get

2348
02:37:33,521 --> 02:37:40,530
twitch to raid John's channel now maybe

2349
02:37:37,659 --> 02:37:44,530
I can maybe I can't but if I can't

2350
02:37:40,530 --> 02:37:48,221
please go to twitch.tv slash naysayer 88

2351
02:37:44,530 --> 02:37:49,271
because he's doing his talk now so he

2352
02:37:48,220 --> 02:37:50,439
and Shawn are to be chatting for a while

2353
02:37:49,271 --> 02:37:51,551
and that'd be a place to go if you like

2354
02:37:50,440 --> 02:37:53,381
handmade here are you're probably like

2355
02:37:51,550 --> 02:37:57,189
that so we're gonna try and get over to

2356
02:37:53,380 --> 02:38:00,119
that and I'll see you folks next week

2357
02:37:57,190 --> 02:38:00,120
tegus everybody

