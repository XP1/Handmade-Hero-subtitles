1
00:00:01,550 --> 00:00:06,179
hello everyone and welcome to handmade

2
00:00:04,410 --> 00:00:08,759
Hero the show where we code a complete

3
00:00:06,179 --> 00:00:11,939
game live on stream unless we are an RSI

4
00:00:08,759 --> 00:00:13,949
break which we are right now so we're

5
00:00:11,939 --> 00:00:18,480
just doing q and A's because the right

6
00:00:13,949 --> 00:00:20,759
hand is fine and so they can draw I got

7
00:00:18,480 --> 00:00:25,410
a question from Andrew JDR on the twitch

8
00:00:20,760 --> 00:00:29,460
chat wanted to know about SG X which is

9
00:00:25,410 --> 00:00:32,700
Intel's new thing in X 64 processors

10
00:00:29,460 --> 00:00:37,799
coming down the road which basically is

11
00:00:32,700 --> 00:00:42,450
going to be like DRM you know squared or

12
00:00:37,799 --> 00:00:44,308
maybe even two - the DRM power so yeah

13
00:00:42,450 --> 00:00:47,789
if you're one of those people out there

14
00:00:44,308 --> 00:00:50,399
who likes being able to control your

15
00:00:47,789 --> 00:00:53,670
computing devices that those days are

16
00:00:50,399 --> 00:00:56,189
probably pretty numbered and I suppose

17
00:00:53,670 --> 00:00:58,649
on the slight positive side if you're

18
00:00:56,189 --> 00:01:00,628
somebody who is worried about your game

19
00:00:58,649 --> 00:01:03,179
being pirated well that might never

20
00:01:00,628 --> 00:01:07,469
happen again after this so there's that

21
00:01:03,179 --> 00:01:08,790
too but we'll save the philosophical

22
00:01:07,469 --> 00:01:11,310
part of it for a little bit later and

23
00:01:08,790 --> 00:01:12,510
I'll just talk about the general concept

24
00:01:11,310 --> 00:01:15,000
here because this is actually not

25
00:01:12,510 --> 00:01:16,950
something new this is actually something

26
00:01:15,000 --> 00:01:19,469
that other computer systems I want to

27
00:01:16,950 --> 00:01:22,859
say that Silicon Graphics or Sun I don't

28
00:01:19,469 --> 00:01:25,079
remember who one of those to have had

29
00:01:22,859 --> 00:01:26,849
had this a long time ago actually and so

30
00:01:25,079 --> 00:01:33,390
this is actually not particularly new

31
00:01:26,849 --> 00:01:35,519
old SDX is a whole family of things and

32
00:01:33,390 --> 00:01:37,019
some of that things in that family sound

33
00:01:35,519 --> 00:01:40,949
new to me I had not heard of them before

34
00:01:37,019 --> 00:01:45,269
so the DRM part of it is not new but the

35
00:01:40,950 --> 00:01:46,379
other parts are you know I don't know if

36
00:01:45,269 --> 00:01:48,450
they're new because I don't study

37
00:01:46,379 --> 00:01:50,069
hardware that often but they definitely

38
00:01:48,450 --> 00:01:55,159
were new to me like I haven't seen it

39
00:01:50,069 --> 00:01:57,508
before for whatever that's worth

40
00:01:55,159 --> 00:02:02,368
alright so how do you make unbreakable

41
00:01:57,509 --> 00:02:05,629
DRM right how do you do that well the

42
00:02:02,368 --> 00:02:08,878
answer is that really doesn't take much

43
00:02:05,629 --> 00:02:11,189
so the way things currently work on a

44
00:02:08,878 --> 00:02:13,139
CPU right is it looks something like

45
00:02:11,189 --> 00:02:17,520
this I have a

46
00:02:13,139 --> 00:02:20,250
ooh here it is right and mr. CPU is

47
00:02:17,520 --> 00:02:21,360
connected to a network card right some

48
00:02:20,250 --> 00:02:23,340
kind of a thing that goes out to the

49
00:02:21,360 --> 00:02:25,290
Internet and that goes out to the

50
00:02:23,340 --> 00:02:28,979
internet and it talks to let's say valve

51
00:02:25,289 --> 00:02:32,789
right and valve sends back through this

52
00:02:28,979 --> 00:02:35,399
Internet card something that the CPU

53
00:02:32,789 --> 00:02:37,079
then probably has to interface with but

54
00:02:35,400 --> 00:02:40,650
eventually it writes it out to your hard

55
00:02:37,080 --> 00:02:44,130
drive okay and it is the executable

56
00:02:40,650 --> 00:02:46,230
right it's the game writes the game it's

57
00:02:44,129 --> 00:02:49,859
got the egg Z it's got the data all the

58
00:02:46,229 --> 00:02:51,149
stuff is here on the hard drive okay and

59
00:02:49,860 --> 00:02:53,130
that's just how everything works right

60
00:02:51,150 --> 00:02:54,989
now right you you go out you you buy

61
00:02:53,129 --> 00:02:56,459
something on Steam the network card

62
00:02:54,989 --> 00:02:57,840
talks to valve it downloads a bunch of

63
00:02:56,459 --> 00:03:01,129
stuff it writes it to the hard drive and

64
00:02:57,840 --> 00:03:06,000
now your CPU goes and it plays this

65
00:03:01,129 --> 00:03:09,269
right and so let's just put ourselves in

66
00:03:06,000 --> 00:03:10,500
valve position again I'm not trying to

67
00:03:09,269 --> 00:03:12,719
make a philosophical judgement here

68
00:03:10,500 --> 00:03:15,139
let's just assume that we think that DRM

69
00:03:12,719 --> 00:03:18,060
is a good idea all right

70
00:03:15,139 --> 00:03:19,529
and certainly valve takes a neutral

71
00:03:18,060 --> 00:03:22,170
stance on this which I commend them for

72
00:03:19,530 --> 00:03:24,000
it they do not force DRM on their

73
00:03:22,169 --> 00:03:26,129
customers so basically it's the

74
00:03:24,000 --> 00:03:28,169
publishers decision on like when you're

75
00:03:26,129 --> 00:03:30,539
on Steam the publisher decides whether

76
00:03:28,169 --> 00:03:32,458
something is DRM door not so valve to

77
00:03:30,539 --> 00:03:34,828
their credit does not force DRM on

78
00:03:32,459 --> 00:03:36,239
anybody right it's it's like if the

79
00:03:34,829 --> 00:03:37,739
publisher wants to do it they do it if

80
00:03:36,239 --> 00:03:40,829
they don't they don't

81
00:03:37,739 --> 00:03:45,840
but plate being let's say your valve and

82
00:03:40,829 --> 00:03:47,610
people you know are like hey excuse me

83
00:03:45,840 --> 00:03:49,950
this is this is you know what I'm gonna

84
00:03:47,610 --> 00:03:51,690
draw a publisher here so they're gonna

85
00:03:49,949 --> 00:03:54,449
be like big and fat and they have like a

86
00:03:51,689 --> 00:03:56,340
tie on like a pinstripe suit right and

87
00:03:54,449 --> 00:03:56,789
they're probably on just like tons of

88
00:03:56,340 --> 00:03:58,110
money

89
00:03:56,789 --> 00:03:59,969
there's just probably this like huge

90
00:03:58,110 --> 00:04:04,769
pile of money like these are little sacs

91
00:03:59,969 --> 00:04:06,900
of dollars here right so this is like

92
00:04:04,769 --> 00:04:11,009
mr. Electronic Arts or whatever and he's

93
00:04:06,900 --> 00:04:14,280
like excuse me mr. valve but people are

94
00:04:11,009 --> 00:04:15,929
pirating my game and I don't like it

95
00:04:14,280 --> 00:04:18,180
right this hair is probably slicked back

96
00:04:15,930 --> 00:04:20,608
here I'm guessing and he's probably

97
00:04:18,180 --> 00:04:22,530
smoking a big old fat cigar that the

98
00:04:20,608 --> 00:04:24,269
cigar probably cost

99
00:04:22,529 --> 00:04:26,549
more than most people's computers so

100
00:04:24,269 --> 00:04:29,669
this is probably like a $5,000 cigar and

101
00:04:26,550 --> 00:04:30,960
he's like excuse me but you know people

102
00:04:29,670 --> 00:04:34,920
are pirating our game you need to do

103
00:04:30,959 --> 00:04:38,370
something about this right so what can

104
00:04:34,920 --> 00:04:40,170
Val do in this scenario so what Val can

105
00:04:38,370 --> 00:04:42,120
do in this scenario and what they I have

106
00:04:40,170 --> 00:04:44,069
done and to be fair I haven't looked at

107
00:04:42,120 --> 00:04:46,259
Val's DRM but so I'm just I'm making

108
00:04:44,069 --> 00:04:47,939
this up here's one example of what they

109
00:04:46,259 --> 00:04:51,170
could do and probably roughly what they

110
00:04:47,939 --> 00:04:54,120
did what they can do is say well okay

111
00:04:51,170 --> 00:04:56,129
every instance of this I know that you

112
00:04:54,120 --> 00:04:58,110
know this CPU and this NIC and this hard

113
00:04:56,129 --> 00:05:01,439
drive are in a user's machine and I know

114
00:04:58,110 --> 00:05:05,009
that user has a steam ID right so I know

115
00:05:01,439 --> 00:05:07,079
that when a user buys a game I know who

116
00:05:05,009 --> 00:05:08,639
that is and when they talk to me they

117
00:05:07,079 --> 00:05:10,319
have to tell me who that is because I

118
00:05:08,639 --> 00:05:12,719
won't give them the game unless they are

119
00:05:10,319 --> 00:05:13,889
logged on right you can't just ask Val

120
00:05:12,720 --> 00:05:15,300
for a game and it gives it to you you

121
00:05:13,889 --> 00:05:16,560
have to prove that your customer so you

122
00:05:15,300 --> 00:05:18,990
have to have credentials and all that

123
00:05:16,560 --> 00:05:20,399
stuff right so they know the steam ID

124
00:05:18,990 --> 00:05:22,199
and the steam ID goes across the network

125
00:05:20,399 --> 00:05:24,389
so what valve could do for example if

126
00:05:22,199 --> 00:05:27,659
they want to is before sending this back

127
00:05:24,389 --> 00:05:30,120
to you they could make some changes to

128
00:05:27,660 --> 00:05:32,760
the game package itself such that your

129
00:05:30,120 --> 00:05:36,530
steam ID is inexorably linked to it

130
00:05:32,759 --> 00:05:38,668
right so there could be some

131
00:05:36,529 --> 00:05:42,029
modifications to this data this data

132
00:05:38,668 --> 00:05:44,728
here could have your steam ID baked into

133
00:05:42,029 --> 00:05:47,069
it in some kind of way right like for

134
00:05:44,728 --> 00:05:50,039
example let's say I run some kind of

135
00:05:47,069 --> 00:05:53,750
encryption on it where I use the steam

136
00:05:50,040 --> 00:05:57,240
ID as encryption key or something right

137
00:05:53,750 --> 00:05:59,399
so now whenever I go to launch this game

138
00:05:57,240 --> 00:06:01,590
the steam launcher tries to launch the

139
00:05:59,399 --> 00:06:03,599
game it has to use whatever the steam ID

140
00:06:01,589 --> 00:06:06,029
is or something like this to decrypt the

141
00:06:03,600 --> 00:06:07,379
game right or maybe something else maybe

142
00:06:06,029 --> 00:06:09,089
it's not the steam ID maybe it's like a

143
00:06:07,379 --> 00:06:10,709
key that gets comes back from valve and

144
00:06:09,089 --> 00:06:14,519
then it decrypts the game and runs it

145
00:06:10,709 --> 00:06:17,339
right something like that makes sense

146
00:06:14,519 --> 00:06:19,228
right this is reasonable DRM it probably

147
00:06:17,339 --> 00:06:22,019
stops the number of people but obviously

148
00:06:19,228 --> 00:06:24,779
if you are a pirate or shouldn't say

149
00:06:22,019 --> 00:06:26,849
fire if you're a cracker someone who's

150
00:06:24,779 --> 00:06:27,869
going to try and crack this to produce a

151
00:06:26,850 --> 00:06:29,879
version of the game that can be

152
00:06:27,870 --> 00:06:32,550
distributed external to Steam and

153
00:06:29,879 --> 00:06:34,769
without Vericut verification well it's

154
00:06:32,550 --> 00:06:35,949
not impossible for you to do that

155
00:06:34,769 --> 00:06:38,259
because

156
00:06:35,949 --> 00:06:39,879
when this comes back over the nick it

157
00:06:38,259 --> 00:06:42,129
gets written to the hard drive you can

158
00:06:39,879 --> 00:06:44,409
now observe this and furthermore when

159
00:06:42,129 --> 00:06:47,969
the game is run you can observe the game

160
00:06:44,410 --> 00:06:50,280
running right so you can figure out

161
00:06:47,970 --> 00:06:52,540
especially by looking at two different

162
00:06:50,279 --> 00:06:54,159
people's installs and looking at the

163
00:06:52,540 --> 00:06:56,560
difference between the two packages for

164
00:06:54,160 --> 00:06:59,080
example you can probably determine after

165
00:06:56,560 --> 00:07:01,629
some amount of work what the changes

166
00:06:59,079 --> 00:07:04,000
have been to this and you can undo them

167
00:07:01,629 --> 00:07:06,069
right you can turn it back into an

168
00:07:04,000 --> 00:07:08,730
executable that does not depend in this

169
00:07:06,069 --> 00:07:11,860
way on on something unique to the user

170
00:07:08,730 --> 00:07:14,170
right so now instead of something which

171
00:07:11,860 --> 00:07:16,540
has to be run under the guise of a

172
00:07:14,170 --> 00:07:18,759
particular user steam ID because the

173
00:07:16,540 --> 00:07:20,080
game is actively trying to like decrypt

174
00:07:18,759 --> 00:07:21,279
itself using that as a key or

175
00:07:20,079 --> 00:07:22,479
something's happening it will use now

176
00:07:21,279 --> 00:07:26,109
the key and if you don't have that key

177
00:07:22,480 --> 00:07:27,670
it won't work right they can just turn

178
00:07:26,110 --> 00:07:30,069
it into so that it always runs with that

179
00:07:27,670 --> 00:07:31,960
key and just knows that or it's been

180
00:07:30,069 --> 00:07:34,540
decrypted and they just distribute the

181
00:07:31,959 --> 00:07:36,219
decrypted version right so you can

182
00:07:34,540 --> 00:07:37,990
understand that there are many ways in

183
00:07:36,220 --> 00:07:40,030
which this might depending on exactly

184
00:07:37,990 --> 00:07:42,040
how it was done because they can watch

185
00:07:40,029 --> 00:07:43,359
it all happen and because they can then

186
00:07:42,040 --> 00:07:45,490
undo it

187
00:07:43,360 --> 00:07:46,840
because whatever the CPU was doing to

188
00:07:45,490 --> 00:07:51,030
run it in the first place they can

189
00:07:46,839 --> 00:07:51,029
obviously undo right it's no problem

190
00:07:51,120 --> 00:07:54,120
okay

191
00:07:54,160 --> 00:07:58,120
so how do we make something that does

192
00:07:56,319 --> 00:07:59,709
not have that problem right how do we

193
00:07:58,120 --> 00:08:04,060
make something where it's simply not

194
00:07:59,709 --> 00:08:08,409
possible for anyone to ever break the

195
00:08:04,060 --> 00:08:10,089
DRM short of say the NSA or something so

196
00:08:08,410 --> 00:08:12,130
how do we do that well what we do is we

197
00:08:10,089 --> 00:08:15,009
modify this diagram a little bit so

198
00:08:12,129 --> 00:08:16,600
before we had CPU Nick and hard drive

199
00:08:15,009 --> 00:08:19,689
right and we're still gonna have those

200
00:08:16,600 --> 00:08:22,420
but now we're gonna add something very

201
00:08:19,689 --> 00:08:24,579
specific because here remember this was

202
00:08:22,420 --> 00:08:27,610
our weakness the steam ID or whatever

203
00:08:24,579 --> 00:08:30,310
you know whatever is based on this login

204
00:08:27,610 --> 00:08:31,689
credential thing whatever valve sent us

205
00:08:30,310 --> 00:08:33,519
back with this a steam ID or a

206
00:08:31,689 --> 00:08:35,529
decryption key or whatever it is is in

207
00:08:33,519 --> 00:08:38,289
the system and visible to the attacker

208
00:08:35,529 --> 00:08:39,970
and as long as that's true they're

209
00:08:38,289 --> 00:08:41,949
always going to be able to break the DRM

210
00:08:39,970 --> 00:08:43,990
because as long as they can view what

211
00:08:41,950 --> 00:08:46,120
that is there's nothing you're going to

212
00:08:43,990 --> 00:08:47,590
be able to do they'll eventually if they

213
00:08:46,120 --> 00:08:48,990
really want to crack it and you could

214
00:08:47,590 --> 00:08:51,180
make it harder and harder and harder for

215
00:08:48,990 --> 00:08:53,459
to untangle all the stuff that you did

216
00:08:51,179 --> 00:08:54,838
based on this but if they are willing to

217
00:08:53,458 --> 00:08:58,759
spend enough time they will always be

218
00:08:54,839 --> 00:09:00,540
able to do it okay so what's the problem

219
00:08:58,759 --> 00:09:03,450
what's the problem

220
00:09:00,539 --> 00:09:07,169
the problem is that right so how do we

221
00:09:03,450 --> 00:09:10,740
fix it fix it well what we do is we put

222
00:09:07,169 --> 00:09:12,750
it inside the CPU right so what we do

223
00:09:10,740 --> 00:09:14,009
now is instead of making that key

224
00:09:12,750 --> 00:09:15,720
instead of making you know this is

225
00:09:14,009 --> 00:09:17,278
effectively our key that the whole DRM

226
00:09:15,720 --> 00:09:18,720
is based on instead of making that KB

227
00:09:17,278 --> 00:09:21,149
something that's out in the open

228
00:09:18,720 --> 00:09:26,070
we just bake the key directly into the

229
00:09:21,149 --> 00:09:27,570
CPU okay so the keys inside the CPU

230
00:09:26,070 --> 00:09:32,629
still got the NIC still got the hard

231
00:09:27,570 --> 00:09:36,750
drive right so now what happens well

232
00:09:32,629 --> 00:09:39,149
what we do is we use for example let's

233
00:09:36,750 --> 00:09:42,259
say we use something like RSA encryption

234
00:09:39,149 --> 00:09:44,429
right some kind of public key encryption

235
00:09:42,259 --> 00:09:46,200
okay and for those of you don't know

236
00:09:44,429 --> 00:09:47,849
what public key encryption is public key

237
00:09:46,200 --> 00:09:51,028
encryption is encrypting there's two

238
00:09:47,850 --> 00:09:52,560
different keys it has a public key and a

239
00:09:51,028 --> 00:09:55,528
private key and these things go together

240
00:09:52,559 --> 00:09:58,159
and the idea is that the public key is

241
00:09:55,528 --> 00:10:02,549
something that everyone can observe and

242
00:09:58,159 --> 00:10:04,949
stealing that key or that key being

243
00:10:02,549 --> 00:10:06,809
exposed is totally fine it's expected

244
00:10:04,950 --> 00:10:09,660
that everyone in the whole world could

245
00:10:06,809 --> 00:10:11,219
be given this key and that the private

246
00:10:09,659 --> 00:10:14,189
key on the other hand will be kept

247
00:10:11,220 --> 00:10:17,339
secret and what public key encryption

248
00:10:14,190 --> 00:10:20,610
allows you to do is to use a public key

249
00:10:17,339 --> 00:10:22,140
to encrypt a message okay so basically

250
00:10:20,610 --> 00:10:26,190
if I have some message if I have a

251
00:10:22,139 --> 00:10:28,439
secret I can apply encryption to it

252
00:10:26,190 --> 00:10:34,980
using the public key that produces an

253
00:10:28,440 --> 00:10:38,220
encrypted secret that only someone with

254
00:10:34,980 --> 00:10:40,740
the private key can decrypt so anyone

255
00:10:38,220 --> 00:10:43,740
can encrypt anyone can turn something

256
00:10:40,740 --> 00:10:47,100
into a encrypted secret with the public

257
00:10:43,740 --> 00:10:51,079
key but only the person with the private

258
00:10:47,100 --> 00:10:54,028
key can decrypt it nobody else ever can

259
00:10:51,078 --> 00:10:56,338
the only way they can is by cracking the

260
00:10:54,028 --> 00:10:58,049
actual encryption which you know as far

261
00:10:56,339 --> 00:11:01,260
as we know to this day mathematically

262
00:10:58,049 --> 00:11:02,349
speaking requires actually doing brute

263
00:11:01,259 --> 00:11:04,569
forcing with like a

264
00:11:02,350 --> 00:11:06,100
giant you know computer array and

265
00:11:04,570 --> 00:11:08,290
granted depending on the particular

266
00:11:06,100 --> 00:11:09,190
public key scheme like RSA certain

267
00:11:08,289 --> 00:11:11,500
things have been cracked in

268
00:11:09,190 --> 00:11:15,160
ba-ba-ba-ba-ba so you probably would not

269
00:11:11,500 --> 00:11:16,809
pick RSA but point being you'd pick some

270
00:11:15,159 --> 00:11:18,850
secure public key scheme elliptical

271
00:11:16,809 --> 00:11:23,679
curve cryptography for example blah blah

272
00:11:18,850 --> 00:11:24,070
blah okay so do you see where this is

273
00:11:23,679 --> 00:11:27,729
going

274
00:11:24,070 --> 00:11:31,360
inside the CPU we store the private key

275
00:11:27,730 --> 00:11:34,480
and it is baked into the CPU such that

276
00:11:31,360 --> 00:11:36,909
nobody literally nobody can access it

277
00:11:34,480 --> 00:11:39,399
it's built into the circuitry of the CPU

278
00:11:36,909 --> 00:11:42,969
and the only way you will ever get it

279
00:11:39,399 --> 00:11:45,909
out is by doing some kind of crazy crazy

280
00:11:42,970 --> 00:11:48,129
hardware hacking on that CPU which I

281
00:11:45,909 --> 00:11:50,500
guarantee you Intel's fab technology is

282
00:11:48,129 --> 00:11:53,409
very very very very very very very good

283
00:11:50,500 --> 00:11:55,480
so I strongly suspect that this is

284
00:11:53,409 --> 00:11:58,809
something that only like a state actor

285
00:11:55,480 --> 00:12:00,670
probably will ever do although you know

286
00:11:58,809 --> 00:12:04,019
who knows never count out Europe

287
00:12:00,669 --> 00:12:06,879
sometimes like hackers in Europe have

288
00:12:04,019 --> 00:12:10,000
leaked skills and crazy hardware but

289
00:12:06,879 --> 00:12:12,370
point being probably not going to happen

290
00:12:10,000 --> 00:12:15,519
right because it is baked into the

291
00:12:12,370 --> 00:12:16,779
hardware ok so since we have this baked

292
00:12:15,519 --> 00:12:18,429
of the hardware okay we've got the CPU

293
00:12:16,779 --> 00:12:19,750
it's baked in the hardware the private

294
00:12:18,429 --> 00:12:21,459
key and then it also has its

295
00:12:19,750 --> 00:12:23,799
corresponding public key which anyone

296
00:12:21,460 --> 00:12:25,840
can see ok that's actually just exposed

297
00:12:23,799 --> 00:12:27,879
in the system so now what do we do well

298
00:12:25,840 --> 00:12:29,580
now what we do is we say ok you know

299
00:12:27,879 --> 00:12:31,450
we're running we're in our in our

300
00:12:29,580 --> 00:12:33,129
situation where we're gonna buy a game

301
00:12:31,450 --> 00:12:35,140
we say hey valve we bought this game

302
00:12:33,129 --> 00:12:39,039
please give me the game they say no

303
00:12:35,139 --> 00:12:40,629
problem give me your public key your

304
00:12:39,039 --> 00:12:42,699
public key goes across the network valve

305
00:12:40,629 --> 00:12:45,159
takes it they encrypt the entire package

306
00:12:42,700 --> 00:12:49,150
with that public key they send it back

307
00:12:45,159 --> 00:12:53,289
right and here we write into this into

308
00:12:49,149 --> 00:12:56,409
this into our into our hard drive we

309
00:12:53,289 --> 00:12:58,329
write the encrypted game now remember

310
00:12:56,409 --> 00:13:00,669
nobody can possibly decrypt this game

311
00:12:58,330 --> 00:13:02,710
it's not possible to decrypt it at all

312
00:13:00,669 --> 00:13:04,329
unless you have the private key so the

313
00:13:02,710 --> 00:13:09,910
only thing that could possibly decrypt

314
00:13:04,330 --> 00:13:13,540
the game is this is the CPU right now so

315
00:13:09,909 --> 00:13:15,938
then you use Intel's STX instruction set

316
00:13:13,539 --> 00:13:18,969
to say I would like to load a neck

317
00:13:15,938 --> 00:13:20,978
cute and encrypted package please and it

318
00:13:18,970 --> 00:13:23,408
uses the private key that's directly in

319
00:13:20,979 --> 00:13:27,699
the CPU to decrypt the game code and its

320
00:13:23,408 --> 00:13:30,038
accompanying data if you wish and the

321
00:13:27,698 --> 00:13:33,068
CPU is set up such that no one can ever

322
00:13:30,038 --> 00:13:34,928
observe it that's what the SGX

323
00:13:33,068 --> 00:13:37,208
extensions actually allow you to do all

324
00:13:34,928 --> 00:13:40,538
of the memory is protected no one can

325
00:13:37,208 --> 00:13:44,108
actually access it so it is completely

326
00:13:40,538 --> 00:13:48,598
isolated so literally you know this

327
00:13:44,109 --> 00:13:52,389
creates you know unbreakable DRM in in a

328
00:13:48,599 --> 00:13:54,309
very specific sense right unbreakable

329
00:13:52,389 --> 00:13:55,568
you always have to quantify because you

330
00:13:54,308 --> 00:13:57,219
know is it really unbreakable well

331
00:13:55,568 --> 00:14:00,399
nothing's probably actually unbreakable

332
00:13:57,220 --> 00:14:06,369
right but what it means is that it is

333
00:14:00,399 --> 00:14:08,099
not software breakable meaning nobody

334
00:14:06,369 --> 00:14:11,408
will ever be able to break it in

335
00:14:08,099 --> 00:14:13,959
software like they do now what you would

336
00:14:11,408 --> 00:14:18,088
have to do is actually reverse engineer

337
00:14:13,958 --> 00:14:21,568
a specific CPU with the game on it and

338
00:14:18,089 --> 00:14:24,539
then you would do this process right and

339
00:14:21,568 --> 00:14:27,848
that would be a thing that I believe

340
00:14:24,538 --> 00:14:29,798
would require hardware and like a lab

341
00:14:27,849 --> 00:14:32,829
that's so expensive that almost nobody

342
00:14:29,798 --> 00:14:35,470
has access to it so will certain you

343
00:14:32,828 --> 00:14:37,748
know will will the NSA be able to crack

344
00:14:35,470 --> 00:14:39,428
Steam games yes will will China be able

345
00:14:37,749 --> 00:14:41,379
to crack them their equivalent of that

346
00:14:39,428 --> 00:14:44,428
yes because I guarantee you they've got

347
00:14:41,379 --> 00:14:46,899
such hardware and are probably using it

348
00:14:44,428 --> 00:14:51,759
will hack sorors who post a Pirate Bay

349
00:14:46,899 --> 00:14:55,168
probably not right so there you go

350
00:14:51,759 --> 00:14:55,168
that's how that works

351
00:15:13,169 --> 00:15:16,990
and I see you could just give them

352
00:15:15,370 --> 00:15:19,209
another public key that you have the

353
00:15:16,990 --> 00:15:24,370
private key for so that part of the

354
00:15:19,208 --> 00:15:27,698
process obviously is it's to use a bell

355
00:15:24,370 --> 00:15:33,850
ring it's it's Turtles you know all the

356
00:15:27,698 --> 00:15:36,519
way down at that point right so you have

357
00:15:33,850 --> 00:15:38,680
to imagine if you really want to make

358
00:15:36,519 --> 00:15:41,560
unbreakable DRM you do this for

359
00:15:38,679 --> 00:15:45,008
everything so the valve executable that

360
00:15:41,559 --> 00:15:48,278
gets installed is also only installable

361
00:15:45,009 --> 00:15:50,949
on you know the Windows machine which is

362
00:15:48,278 --> 00:15:52,990
also only installable on the hardware

363
00:15:50,948 --> 00:15:55,448
right it's like it's it's a trusted

364
00:15:52,990 --> 00:15:58,629
platform on the whole stack if that

365
00:15:55,448 --> 00:16:01,899
makes sense so presumably if you really

366
00:15:58,629 --> 00:16:03,579
want to actually do the whole thing then

367
00:16:01,899 --> 00:16:08,708
all the code has to be trusted and

368
00:16:03,578 --> 00:16:11,409
signed and you know will they do it I

369
00:16:08,708 --> 00:16:13,508
don't know you know they may not want to

370
00:16:11,409 --> 00:16:15,789
they may maybe eval doesn't want to do

371
00:16:13,509 --> 00:16:20,829
this and or stop or who knows who else

372
00:16:15,789 --> 00:16:23,049
right so I don't know you know whether

373
00:16:20,828 --> 00:16:26,649
they were live whether they won't it's

374
00:16:23,049 --> 00:16:28,359
already the case right that Windows kind

375
00:16:26,649 --> 00:16:31,659
of has a little bit of this stuff built

376
00:16:28,360 --> 00:16:35,110
into it that used the trusted platform

377
00:16:31,659 --> 00:16:37,299
module and so once they have this

378
00:16:35,110 --> 00:16:39,039
presumably they will just make sure that

379
00:16:37,299 --> 00:16:41,979
you could just have the concept of a

380
00:16:39,039 --> 00:16:43,269
signed executable and off you go because

381
00:16:41,980 --> 00:16:44,920
once you have the concept of a signed

382
00:16:43,269 --> 00:16:50,230
executable it means that all valve has

383
00:16:44,919 --> 00:16:52,778
to do is say I want proof this is thing

384
00:16:50,230 --> 00:16:55,180
called attestation right which is also

385
00:16:52,778 --> 00:16:57,129
part of the SGX thing which to be honest

386
00:16:55,179 --> 00:16:59,318
I didn't read yet so I don't know what

387
00:16:57,129 --> 00:17:02,169
scheme they used for it but there's a

388
00:16:59,318 --> 00:17:04,178
thing called attestation which is a way

389
00:17:02,169 --> 00:17:05,889
that you can prove to the outside world

390
00:17:04,179 --> 00:17:07,480
that the thing you're running is an

391
00:17:05,890 --> 00:17:11,949
unmodified version of something else

392
00:17:07,480 --> 00:17:15,189
right so I don't actually know how the

393
00:17:11,949 --> 00:17:18,308
signing process works but the answer is

394
00:17:15,189 --> 00:17:20,769
the reason that you can't intercept the

395
00:17:18,308 --> 00:17:23,408
public key and send or send some other

396
00:17:20,769 --> 00:17:25,549
public key that you want to come back

397
00:17:23,409 --> 00:17:28,340
you know something that you have the

398
00:17:25,549 --> 00:17:30,200
the key for is because presumably if you

399
00:17:28,339 --> 00:17:32,389
actually decide to implement an

400
00:17:30,200 --> 00:17:34,370
unbreakable DRM scheme you will use

401
00:17:32,390 --> 00:17:39,380
attestation to make sure that everything

402
00:17:34,369 --> 00:17:44,149
on the machine is signed and I'm not

403
00:17:39,380 --> 00:17:45,770
sure what they decided to do for that

404
00:17:44,150 --> 00:17:47,710
because it's there's a whole chapter on

405
00:17:45,769 --> 00:17:53,029
it

406
00:17:47,710 --> 00:17:59,240
oops there was a whole chapter on it but

407
00:17:53,029 --> 00:18:02,740
I don't actually remember what they said

408
00:17:59,240 --> 00:18:04,700
I wasn't paying very close attention

409
00:18:02,740 --> 00:18:06,049
because they were just like well we've

410
00:18:04,700 --> 00:18:08,269
got it and I was like alright I trust

411
00:18:06,049 --> 00:18:13,759
you probably implemented it properly but

412
00:18:08,269 --> 00:18:24,309
yeah so let's see here where is the

413
00:18:13,759 --> 00:18:27,829
attestation section control structure is

414
00:18:24,309 --> 00:18:43,609
Enclave signature structure

415
00:18:27,829 --> 00:18:48,109
there it is okay let's see okay so I

416
00:18:43,609 --> 00:18:49,819
think what they do I'm not gonna read

417
00:18:48,109 --> 00:18:51,949
this right now but I'm just guessing

418
00:18:49,819 --> 00:18:54,470
based on what that said so I think what

419
00:18:51,950 --> 00:18:56,750
they probably do is they sign that as

420
00:18:54,470 --> 00:18:59,269
well so they sign the public keys

421
00:18:56,750 --> 00:19:01,940
themselves are signed with a key that

422
00:18:59,269 --> 00:19:04,669
only Intel has so basically you can

423
00:19:01,940 --> 00:19:05,990
verify that Intel signed that public key

424
00:19:04,669 --> 00:19:09,980
which means it's a public key that they

425
00:19:05,990 --> 00:19:11,298
have not you so basically I again making

426
00:19:09,980 --> 00:19:12,528
this up because I didn't go read the

427
00:19:11,298 --> 00:19:14,210
document very thoroughly

428
00:19:12,528 --> 00:19:18,859
but basically what they do is they say

429
00:19:14,210 --> 00:19:21,710
okay you know here's my CPU here's the

430
00:19:18,859 --> 00:19:24,589
private key right and here's the public

431
00:19:21,710 --> 00:19:27,350
key I'll give this one out this public

432
00:19:24,589 --> 00:19:30,288
key is not just a raw public key it's

433
00:19:27,349 --> 00:19:35,379
actually a signed public key in some way

434
00:19:30,288 --> 00:19:40,069
which means that for example at Intel HQ

435
00:19:35,380 --> 00:19:44,000
right they have a private key and a

436
00:19:40,069 --> 00:19:45,888
public key right and they have used that

437
00:19:44,000 --> 00:19:47,599
private and public key to generate some

438
00:19:45,888 --> 00:19:49,548
attestation data that goes with the

439
00:19:47,599 --> 00:19:52,189
public key so here's this public key

440
00:19:49,548 --> 00:19:55,038
right and what they do is they create a

441
00:19:52,190 --> 00:19:56,960
signature right of some kind which

442
00:19:55,038 --> 00:19:58,940
anyone can with the public key can

443
00:19:56,960 --> 00:20:00,259
verify the signature but only someone

444
00:19:58,940 --> 00:20:03,169
with the private key could generate the

445
00:20:00,259 --> 00:20:06,349
signature and then you send this whole

446
00:20:03,169 --> 00:20:08,389
thing to valve and valve can you know

447
00:20:06,349 --> 00:20:11,119
everyone has this so valve has it they

448
00:20:08,388 --> 00:20:14,058
can go is this public key actually Ali a

449
00:20:11,119 --> 00:20:16,668
legal CPU public key and Intel says yes

450
00:20:14,058 --> 00:20:18,079
it is or Intel you know public key they

451
00:20:16,669 --> 00:20:21,830
use it to decrypt it it says yes it is

452
00:20:18,079 --> 00:20:24,230
and there you go right so yeah still

453
00:20:21,829 --> 00:20:25,908
unbreakable and actually now that I

454
00:20:24,230 --> 00:20:30,259
think about that actually doesn't even

455
00:20:25,909 --> 00:20:31,850
involve any signing at all right so that

456
00:20:30,259 --> 00:20:34,908
actually means you don't even need any

457
00:20:31,849 --> 00:20:36,408
of these to be signed the valve the

458
00:20:34,909 --> 00:20:39,260
Steam client doesn't be signed

459
00:20:36,409 --> 00:20:40,440
windows can be completely exploited it

460
00:20:39,259 --> 00:20:41,849
can be you know

461
00:20:40,440 --> 00:20:44,820
whatever and you still can't decrypt the

462
00:20:41,849 --> 00:20:46,199
game because the only way that you could

463
00:20:44,819 --> 00:20:48,089
decrypt the game is with the private key

464
00:20:46,200 --> 00:20:49,440
that's in here because you can't send

465
00:20:48,089 --> 00:20:53,480
some other key because you don't have

466
00:20:49,440 --> 00:20:53,480
Intel signing keys does that make sense

467
00:21:03,650 --> 00:21:06,830
that's the em wrath what about the above

468
00:21:05,839 --> 00:21:08,750
see area where there is no internet

469
00:21:06,829 --> 00:21:10,369
connection how would run runs of suffer

470
00:21:08,750 --> 00:21:12,140
in offline mode this does not require

471
00:21:10,369 --> 00:21:14,089
internet connection the internet

472
00:21:12,140 --> 00:21:15,950
connection is only there for the time

473
00:21:14,089 --> 00:21:17,809
that you download the game once the game

474
00:21:15,950 --> 00:21:19,819
is downloaded it is encrypted on your

475
00:21:17,809 --> 00:21:23,179
hard drive with your private key that's

476
00:21:19,819 --> 00:21:25,909
in your CPU so you can always run the

477
00:21:23,180 --> 00:21:33,049
game on your CPU it never has to go talk

478
00:21:25,910 --> 00:21:35,300
to valve ever again right never again so

479
00:21:33,049 --> 00:21:36,500
when it's on once it's on your hard

480
00:21:35,299 --> 00:21:38,419
drive you can play it anytime you want

481
00:21:36,500 --> 00:21:40,339
the only thing you can't do is copy it

482
00:21:38,420 --> 00:21:41,539
to someone else's machine and expect it

483
00:21:40,339 --> 00:21:43,369
to run there because when you copied

484
00:21:41,539 --> 00:21:44,930
someone else's machine that CPU has a

485
00:21:43,369 --> 00:21:46,549
different private key it will try to

486
00:21:44,930 --> 00:21:55,430
decrypt the game with that private key

487
00:21:46,549 --> 00:21:57,349
and it will just get garbage sudonym 73

488
00:21:55,430 --> 00:21:59,120
so the NSA doesn't have to crack it they

489
00:21:57,349 --> 00:22:00,559
just have to rubber-hose intel yeah

490
00:21:59,119 --> 00:22:00,949
you're correct actually yes that's

491
00:22:00,559 --> 00:22:05,569
correct

492
00:22:00,950 --> 00:22:08,059
so yeah the NSA and and probably you

493
00:22:05,569 --> 00:22:09,679
know other state actors potentially will

494
00:22:08,059 --> 00:22:12,079
probably just all get copies of that key

495
00:22:09,680 --> 00:22:13,549
right because they'll you know like who

496
00:22:12,079 --> 00:22:15,019
knows but the NS yet the American

497
00:22:13,549 --> 00:22:17,659
governors go to in towns like give us

498
00:22:15,019 --> 00:22:20,740
the key we have an army what are you

499
00:22:17,660 --> 00:22:20,740
gonna do right

500
00:22:25,700 --> 00:22:30,559
so yeah trust me it is not breakable

501
00:22:28,009 --> 00:22:31,670
right software-wise not breakable

502
00:22:30,559 --> 00:22:34,940
hardware-wise

503
00:22:31,670 --> 00:22:38,420
if you can get into here then yeah but

504
00:22:34,940 --> 00:22:40,340
no steveod 1990 can't this be broken

505
00:22:38,420 --> 00:22:42,650
using emulation nope can't be broken

506
00:22:40,339 --> 00:22:44,869
using emulation and the reason it can't

507
00:22:42,650 --> 00:22:46,160
be broken using emulation remember so I

508
00:22:44,869 --> 00:22:49,809
just wanna I'm just going to go over the

509
00:22:46,160 --> 00:22:58,400
steps one more time step one

510
00:22:49,809 --> 00:23:03,730
send public key to let's say Orage let's

511
00:22:58,400 --> 00:23:14,540
say ëi say Electronic Arts origin right

512
00:23:03,730 --> 00:23:16,029
step 2 ei encrypts SimCity 12 right step

513
00:23:14,539 --> 00:23:28,700
3

514
00:23:16,029 --> 00:23:35,349
receive SimCity 12 encrypted in-store on

515
00:23:28,700 --> 00:23:35,350
hard drive right step 4

516
00:23:37,930 --> 00:23:44,930
this is actually the part where you want

517
00:23:39,980 --> 00:23:49,450
to run the game step 4 CPU the crypts

518
00:23:44,930 --> 00:23:49,450
and runs

519
00:23:50,329 --> 00:23:58,879
using private key okay so in step one

520
00:23:57,319 --> 00:24:02,419
when you send the public key to ETA

521
00:23:58,880 --> 00:24:04,190
origin they know that not only is this

522
00:24:02,420 --> 00:24:06,560
public key valid because it's signed by

523
00:24:04,190 --> 00:24:09,740
them but emulation like you said you're

524
00:24:06,559 --> 00:24:11,119
asking if emulation solves this no

525
00:24:09,740 --> 00:24:13,519
emulation doesn't solve it at all

526
00:24:11,119 --> 00:24:17,239
because this public key can be verified

527
00:24:13,519 --> 00:24:20,599
by origin as one that came from an

528
00:24:17,240 --> 00:24:22,730
actual Intel CPU and emulated Intel CPU

529
00:24:20,599 --> 00:24:25,369
will have a public key private key pair

530
00:24:22,730 --> 00:24:27,140
in it that Intel didn't sign so they'll

531
00:24:25,369 --> 00:24:30,979
just say no I'm not sending you the game

532
00:24:27,140 --> 00:24:32,810
so you never get the game right so that

533
00:24:30,980 --> 00:24:35,660
Avenue of tack is gone so you can't

534
00:24:32,809 --> 00:24:37,129
attack step one step two encrypt SimCity

535
00:24:35,660 --> 00:24:39,080
12 well if you could break into

536
00:24:37,130 --> 00:24:41,300
Electronic Arts you could attack that so

537
00:24:39,079 --> 00:24:42,829
hey the DRM is breakable here in the

538
00:24:41,299 --> 00:24:44,720
sense that hackers who hack into EA

539
00:24:42,829 --> 00:24:46,519
could break it right but hey that just

540
00:24:44,720 --> 00:24:48,289
means they got access to the original so

541
00:24:46,519 --> 00:24:50,119
in this case the DRM didn't fail it's

542
00:24:48,289 --> 00:24:53,089
you know it's social engineering and you

543
00:24:50,119 --> 00:24:54,319
broke into EA right but that's obviously

544
00:24:53,089 --> 00:24:56,059
neither here nor there that's that

545
00:24:54,319 --> 00:24:57,740
obviously you break into yeah you could

546
00:24:56,059 --> 00:24:58,970
physically go break in the EA and steal

547
00:24:57,740 --> 00:25:02,089
their hard drives and then you've got

548
00:24:58,970 --> 00:25:04,640
every game that you want right so yeah

549
00:25:02,089 --> 00:25:06,169
so that's that's not really breakable in

550
00:25:04,640 --> 00:25:08,780
any case that we're actually talking

551
00:25:06,170 --> 00:25:10,370
about in this context step three

552
00:25:08,779 --> 00:25:13,490
there's nothing to break because all you

553
00:25:10,369 --> 00:25:14,839
received is it encrypted executable so

554
00:25:13,490 --> 00:25:16,160
you haven't you can't do anything with

555
00:25:14,839 --> 00:25:16,699
it you can't copy it to someone else's

556
00:25:16,160 --> 00:25:18,320
machine

557
00:25:16,700 --> 00:25:19,759
you can't inspect it you can't do

558
00:25:18,319 --> 00:25:21,799
anything it's a meaningless series of

559
00:25:19,759 --> 00:25:24,529
bits as far as you're concerned right

560
00:25:21,799 --> 00:25:26,930
and step four where the CPU decryption

561
00:25:24,529 --> 00:25:28,940
runs it the SDS extensions ensure that

562
00:25:26,930 --> 00:25:31,430
no other process other than the one

563
00:25:28,940 --> 00:25:34,100
that's actually running can actually

564
00:25:31,430 --> 00:25:36,440
look at it and since the process itself

565
00:25:34,099 --> 00:25:39,139
is actually being decrypted with that

566
00:25:36,440 --> 00:25:40,759
private key note you can't fake it and

567
00:25:39,140 --> 00:25:43,190
give it some other thing that's gonna

568
00:25:40,759 --> 00:25:44,869
inspect the memory so step four is not

569
00:25:43,190 --> 00:25:47,000
you know none of these are attackable

570
00:25:44,869 --> 00:25:48,619
right and it doesn't matter if it's

571
00:25:47,000 --> 00:25:51,380
running an emulation because if it's if

572
00:25:48,619 --> 00:25:54,829
it's a if it's running an emulation this

573
00:25:51,380 --> 00:25:56,390
will fail right here already and so the

574
00:25:54,829 --> 00:25:59,179
only way you could ever get to here in

575
00:25:56,390 --> 00:26:01,850
emulation is if you've already Hardware

576
00:25:59,180 --> 00:26:03,580
hacked and Intel CPU and got a real

577
00:26:01,849 --> 00:26:05,949
private public key pair out

578
00:26:03,579 --> 00:26:07,569
and that's why I said it's not soft for

579
00:26:05,950 --> 00:26:09,460
a breakable the only way to break it is

580
00:26:07,569 --> 00:26:13,950
through a hardware hack which actually

581
00:26:09,460 --> 00:26:15,880
retrieves the private public key right

582
00:26:13,950 --> 00:26:21,039
Maciek can't they just figure out

583
00:26:15,880 --> 00:26:22,180
Intel's key generator and make a key

584
00:26:21,039 --> 00:26:25,210
generator for it

585
00:26:22,180 --> 00:26:28,750
well prison again that's that's only if

586
00:26:25,210 --> 00:26:30,910
Intel is fantastically sloppy right I'm

587
00:26:28,750 --> 00:26:35,619
assuming that Intel's key generator is

588
00:26:30,910 --> 00:26:37,830
not predictable right I mean if Intel

589
00:26:35,619 --> 00:26:40,779
really wanted to they could collect

590
00:26:37,829 --> 00:26:42,789
neutrino hits in an underground lab and

591
00:26:40,779 --> 00:26:45,160
generate completely random nade late

592
00:26:42,789 --> 00:26:46,899
data or something right or they could

593
00:26:45,160 --> 00:26:48,160
have it hooked up to a seismograph or

594
00:26:46,900 --> 00:26:50,560
who knows what right they could like

595
00:26:48,160 --> 00:26:53,160
they could actually generate completely

596
00:26:50,559 --> 00:26:56,019
really random stuff when they you know

597
00:26:53,160 --> 00:26:58,180
that they feed into the fab right so who

598
00:26:56,019 --> 00:27:00,339
knows so yeah could they attack Intel's

599
00:26:58,180 --> 00:27:02,140
key generator only if Intel screws up if

600
00:27:00,339 --> 00:27:03,699
Intel actually follows good practices

601
00:27:02,140 --> 00:27:05,680
for their key generator it will never be

602
00:27:03,700 --> 00:27:08,279
able to be cracked it unless someone

603
00:27:05,680 --> 00:27:08,279
hacks Intel

604
00:27:17,250 --> 00:27:21,880
Steve void so even if the emulation

605
00:27:19,960 --> 00:27:23,410
contained a valid key from a registered

606
00:27:21,880 --> 00:27:25,600
copy it couldn't be cracked

607
00:27:23,410 --> 00:27:28,710
okay so again I just want to underscore

608
00:27:25,599 --> 00:27:31,659
there is no key with the registered copy

609
00:27:28,710 --> 00:27:33,850
the game that comes down is encrypted

610
00:27:31,660 --> 00:27:39,400
and it's encrypted using a key that's in

611
00:27:33,849 --> 00:27:40,589
your CPU right so it doesn't matter if

612
00:27:39,400 --> 00:27:42,730
you have a valid copy

613
00:27:40,589 --> 00:27:44,589
everyone's copy of the game will be

614
00:27:42,730 --> 00:27:46,930
different because each one will be

615
00:27:44,589 --> 00:27:49,720
encrypted with their CPU and only their

616
00:27:46,930 --> 00:27:52,269
CPU will be able to run it so there is

617
00:27:49,720 --> 00:27:54,190
no such thing as a registered copy of

618
00:27:52,269 --> 00:27:56,440
the game in that sense meaning that

619
00:27:54,190 --> 00:28:00,340
there's some key in the game the game

620
00:27:56,440 --> 00:28:02,259
contains no key it was encrypted without

621
00:28:00,339 --> 00:28:03,759
putting anything on it or in it that

622
00:28:02,259 --> 00:28:05,740
identifies how to decrypt it the

623
00:28:03,759 --> 00:28:08,589
decryption key is stored in your CPU and

624
00:28:05,740 --> 00:28:10,240
your CPU alone and you cannot access it

625
00:28:08,589 --> 00:28:12,849
with any instructions because it's

626
00:28:10,240 --> 00:28:14,710
actually baked in the CPU so the only

627
00:28:12,849 --> 00:28:17,500
thing you can do is Hardware hack the

628
00:28:14,710 --> 00:28:19,150
CPU you have to actually get out an

629
00:28:17,500 --> 00:28:20,619
electron microscope or something I mean

630
00:28:19,150 --> 00:28:23,830
I have no idea how your hardware hacker

631
00:28:20,619 --> 00:28:25,929
CPU but you know you gotta use some kind

632
00:28:23,829 --> 00:28:34,539
of a hardware attack to get it out but

633
00:28:25,930 --> 00:28:35,860
you can't do it in software andrew JDR I

634
00:28:34,539 --> 00:28:37,420
assume this breaks certain features of

635
00:28:35,859 --> 00:28:39,579
the windows API since the memory is

636
00:28:37,420 --> 00:28:43,210
protected global hook dll's for example

637
00:28:39,579 --> 00:28:45,460
I don't think you would even probably be

638
00:28:43,210 --> 00:28:47,259
able to use these extensions until a

639
00:28:45,460 --> 00:28:54,730
future version of Windows enables them

640
00:28:47,259 --> 00:28:59,559
is my is my assumption actually if that

641
00:28:54,730 --> 00:29:04,630
makes sense so so I feel like I feel

642
00:28:59,559 --> 00:29:06,129
like I feel like I saw a thing in there

643
00:29:04,630 --> 00:29:09,520
that says that you have to enable it

644
00:29:06,130 --> 00:29:11,230
when you start up in some CPU thing so I

645
00:29:09,519 --> 00:29:12,759
don't know that I guess the point is I

646
00:29:11,230 --> 00:29:13,690
don't know that these will be usable in

647
00:29:12,759 --> 00:29:15,279
Windows

648
00:29:13,690 --> 00:29:16,630
that's not designed for it so I'm

649
00:29:15,279 --> 00:29:18,490
assuming you'll have to wait for Windows

650
00:29:16,630 --> 00:29:20,410
11 or whatever and then it will have

651
00:29:18,490 --> 00:29:22,950
this enabled so I'm assuming that they

652
00:29:20,410 --> 00:29:26,230
just take care of it and when you run

653
00:29:22,950 --> 00:29:28,779
something in this then yeah those

654
00:29:26,230 --> 00:29:32,620
executables running under SGX will

655
00:29:28,779 --> 00:29:34,119
not have any of the other stuff that you

656
00:29:32,619 --> 00:29:39,909
would expect like like DLL injection

657
00:29:34,119 --> 00:29:41,619
won't run there you know II junkie 64

658
00:29:39,910 --> 00:29:45,160
what if the CPU fails or you want to

659
00:29:41,619 --> 00:29:47,409
upgrade again it's not a problem for

660
00:29:45,160 --> 00:29:48,820
someone because they'll just re log into

661
00:29:47,410 --> 00:29:55,570
steam and it'll redownload all their

662
00:29:48,819 --> 00:29:57,339
games right so you know for most usage

663
00:29:55,569 --> 00:29:58,779
scenarios you it's just a little bit of

664
00:29:57,339 --> 00:30:04,449
time for that to happen but otherwise

665
00:29:58,779 --> 00:30:05,440
it's fine long boolean would intel

666
00:30:04,450 --> 00:30:07,120
create a different key for each

667
00:30:05,440 --> 00:30:09,039
manufacturer CPU or is there only ever

668
00:30:07,119 --> 00:30:10,899
one key no it's a different key for

669
00:30:09,039 --> 00:30:14,049
every CPU and it has to be because if

670
00:30:10,900 --> 00:30:15,670
every CPU had the same key then you'd be

671
00:30:14,049 --> 00:30:18,730
right back to where we are now and there

672
00:30:15,670 --> 00:30:20,890
and it would be trivial to circumvent

673
00:30:18,730 --> 00:30:23,380
because my executable would be encrypted

674
00:30:20,890 --> 00:30:25,360
with the same key as your executable as

675
00:30:23,380 --> 00:30:26,800
your CPU could read so I just I'd give

676
00:30:25,359 --> 00:30:28,809
you the encrypted executable and you'd

677
00:30:26,799 --> 00:30:30,369
be able to run it so the only reason

678
00:30:28,809 --> 00:30:31,899
this scheme works is because each CPU

679
00:30:30,369 --> 00:30:35,109
has a different key so when they go to

680
00:30:31,900 --> 00:30:37,150
launch an executable they decrypt with

681
00:30:35,109 --> 00:30:39,490
different keys so only things encrypted

682
00:30:37,150 --> 00:30:43,630
for six CPU will run on that CPU that's

683
00:30:39,490 --> 00:30:44,859
crucial cracker door but this means you

684
00:30:43,630 --> 00:30:47,440
lose control of your own system since

685
00:30:44,859 --> 00:30:50,559
only Intel can perform actions yeah

686
00:30:47,440 --> 00:30:53,110
basically I mean thankfully it's not

687
00:30:50,559 --> 00:30:54,549
required to have SGX meaning you can

688
00:30:53,109 --> 00:30:58,629
still write code for a computer that

689
00:30:54,549 --> 00:31:02,169
doesn't have to be signed for now but

690
00:30:58,630 --> 00:31:04,900
yeah so you know this is only for people

691
00:31:02,170 --> 00:31:06,519
who want to use the DRM you won't have

692
00:31:04,900 --> 00:31:10,030
to get intel's permission to run

693
00:31:06,519 --> 00:31:12,490
something or cpu yet you know and

694
00:31:10,029 --> 00:31:14,759
hopefully that would never happen famous

695
00:31:12,490 --> 00:31:14,759
last words

696
00:31:17,640 --> 00:31:21,550
how susceptible is the locking of

697
00:31:19,869 --> 00:31:22,989
portions of memory CPU cores to

698
00:31:21,549 --> 00:31:24,339
malicious encryption programs that

699
00:31:22,990 --> 00:31:27,160
simply want to screw your computer over

700
00:31:24,339 --> 00:31:29,980
I don't think they'd probably put that

701
00:31:27,160 --> 00:31:32,980
not not particularly problematic because

702
00:31:29,980 --> 00:31:35,019
it does not privilege escalation at all

703
00:31:32,980 --> 00:31:38,740
it's running in its phone it's running

704
00:31:35,019 --> 00:31:40,750
in its standard ring level so the

705
00:31:38,740 --> 00:31:44,079
operating system can still just kill the

706
00:31:40,750 --> 00:31:46,450
task trivially yes and and it you just

707
00:31:44,079 --> 00:31:48,970
can't see you kids can't get or access

708
00:31:46,450 --> 00:31:50,529
any of that memory but you can kill a

709
00:31:48,970 --> 00:31:53,140
task that was running it and the memory

710
00:31:50,529 --> 00:31:55,799
you know gets gets freed or whatever or

711
00:31:53,140 --> 00:31:59,500
whatever has to happen there right

712
00:31:55,799 --> 00:32:07,079
happens but you don't it doesn't prevent

713
00:31:59,500 --> 00:32:07,079
you from from terminating the execution

714
00:32:12,929 --> 00:32:17,470
ratchet freak if the game is sloppy and

715
00:32:15,788 --> 00:32:20,339
ends up allowing arbitrary user code

716
00:32:17,470 --> 00:32:23,079
execution then the code can be leaked uh

717
00:32:20,339 --> 00:32:25,470
I don't actually know about that part

718
00:32:23,079 --> 00:32:29,019
because I haven't read the SGX stuff

719
00:32:25,470 --> 00:32:31,120
carefully enough it may be that the CPU

720
00:32:29,019 --> 00:32:33,308
will never execute any code that isn't

721
00:32:31,119 --> 00:32:35,139
encrypted with the key so that might

722
00:32:33,308 --> 00:32:44,168
also prevent you from ever having

723
00:32:35,140 --> 00:32:45,639
arbitrary code execution right pragma

724
00:32:44,169 --> 00:32:48,429
script if anyone ever leaks intel's

725
00:32:45,638 --> 00:32:50,949
private key SGX on all those CPUs would

726
00:32:48,429 --> 00:32:53,380
be explored yes correctly the correct so

727
00:32:50,950 --> 00:32:55,538
if Intel if anyone ever gets the Intel

728
00:32:53,380 --> 00:32:57,490
signing keys

729
00:32:55,538 --> 00:32:58,898
it's that only the CPUs that would be

730
00:32:57,490 --> 00:33:00,970
exploitable because the CPU isn't

731
00:32:58,898 --> 00:33:02,709
exploitable the CPU is the thing that's

732
00:33:00,970 --> 00:33:05,409
providing the protection so there's no

733
00:33:02,710 --> 00:33:07,149
exploit on the CPU in fact all this

734
00:33:05,409 --> 00:33:09,250
stuff is not a privilege escalation

735
00:33:07,148 --> 00:33:11,168
that's the whole point it's a user mode

736
00:33:09,250 --> 00:33:15,069
thing that prevents code execution

737
00:33:11,169 --> 00:33:17,259
without without the correct key so

738
00:33:15,069 --> 00:33:19,778
there's no XY on the CPU but if anyone

739
00:33:17,259 --> 00:33:22,869
leaks the Intel's signing certificates

740
00:33:19,778 --> 00:33:24,579
right the signing Keys then that means

741
00:33:22,869 --> 00:33:26,079
the DRM is going to be broken because

742
00:33:24,579 --> 00:33:27,908
then that means the thing that someone

743
00:33:26,079 --> 00:33:29,408
suggested earlier where you just send a

744
00:33:27,909 --> 00:33:31,299
separate pot a public key that you have

745
00:33:29,409 --> 00:33:33,669
the private key to you lie and say this

746
00:33:31,298 --> 00:33:35,710
is the public key and my CPU now you can

747
00:33:33,669 --> 00:33:37,600
actually do that because now you can

748
00:33:35,710 --> 00:33:42,269
make up a public key sign it with the

749
00:33:37,599 --> 00:33:42,269
private key and send it off right

750
00:33:43,409 --> 00:33:48,070
popcorn oh nine why don't they use this

751
00:33:46,119 --> 00:33:48,638
system for banks something that's worth

752
00:33:48,069 --> 00:33:50,589
protecting

753
00:33:48,638 --> 00:33:54,849
well banks probably will use this system

754
00:33:50,589 --> 00:33:57,398
now right obviously this this system

755
00:33:54,849 --> 00:34:00,459
will have benefits right so you'll be

756
00:33:57,398 --> 00:34:03,729
able to get better security in other

757
00:34:00,460 --> 00:34:05,110
arenas because of this the problem is it

758
00:34:03,730 --> 00:34:06,700
also means you're going to lose even

759
00:34:05,109 --> 00:34:07,928
more control of your computer than you

760
00:34:06,700 --> 00:34:13,240
already have which is already quite a

761
00:34:07,929 --> 00:34:15,970
bit quarter Tron can you think of

762
00:34:13,239 --> 00:34:17,949
awesome usages for this like optin anti

763
00:34:15,969 --> 00:34:20,289
cheat so the server would know everyone

764
00:34:17,949 --> 00:34:23,559
on it had no aimbots or whatever yes so

765
00:34:20,289 --> 00:34:26,349
basically like like I was saying before

766
00:34:23,559 --> 00:34:28,960
so the problem with this

767
00:34:26,349 --> 00:34:32,440
basically that it takes control away

768
00:34:28,960 --> 00:34:35,470
from the user of the computer much like

769
00:34:32,440 --> 00:34:37,389
you know the constant thing of like oh

770
00:34:35,469 --> 00:34:39,278
you know your government keeps you safe

771
00:34:37,389 --> 00:34:40,720
from terrorists you just have to you

772
00:34:39,278 --> 00:34:43,478
know surrender all your freedoms or

773
00:34:40,719 --> 00:34:45,998
whatever it's exactly that trade so will

774
00:34:43,478 --> 00:34:48,428
you get things in return yes are they

775
00:34:45,998 --> 00:34:51,368
things you want in return are they worth

776
00:34:48,429 --> 00:34:53,409
it no I'm on the Ben Franklin side like

777
00:34:51,369 --> 00:34:57,729
you know people who sacrifice freedom

778
00:34:53,409 --> 00:35:01,210
for for safety deserve neither or

779
00:34:57,728 --> 00:35:02,618
whatever he said I I'm on that side it's

780
00:35:01,210 --> 00:35:04,960
like I don't I don't feel like

781
00:35:02,619 --> 00:35:06,369
sacrificing the freedom to control what

782
00:35:04,960 --> 00:35:08,019
your machine does your machine should

783
00:35:06,369 --> 00:35:10,900
never be able to hide something from you

784
00:35:08,018 --> 00:35:12,098
that's just that's just the fundamental

785
00:35:10,900 --> 00:35:14,318
principle of computing that I will

786
00:35:12,099 --> 00:35:15,999
always stand by I just do not like the

787
00:35:14,318 --> 00:35:17,498
fundamental concept is the users in

788
00:35:15,998 --> 00:35:19,088
charge of the computer as soon as you

789
00:35:17,498 --> 00:35:21,308
reverse that I think you're in a world

790
00:35:19,088 --> 00:35:22,599
of hurt and we're already halfway down

791
00:35:21,309 --> 00:35:24,640
that with the trusted platform module

792
00:35:22,599 --> 00:35:27,309
and with SGS it's now gonna be it's

793
00:35:24,639 --> 00:35:29,858
gonna be times 10 so pretty soon when

794
00:35:27,309 --> 00:35:31,150
you live in a world where nothing in on

795
00:35:29,858 --> 00:35:33,848
your computer at all is under your

796
00:35:31,150 --> 00:35:35,769
control you don't be surprised because

797
00:35:33,849 --> 00:35:37,298
that's exactly what will happen because

798
00:35:35,768 --> 00:35:39,699
remember corporations never want you to

799
00:35:37,298 --> 00:35:41,170
control anything right they never want

800
00:35:39,699 --> 00:35:45,038
you to be able to do anything other than

801
00:35:41,170 --> 00:35:46,599
exactly what they say so the consequence

802
00:35:45,039 --> 00:35:48,700
will be primarily used for your benefit

803
00:35:46,599 --> 00:35:50,739
is you know is laughable it will be

804
00:35:48,699 --> 00:35:53,169
primarily used for their benefit and to

805
00:35:50,739 --> 00:35:55,059
the extent that that helps you you will

806
00:35:53,170 --> 00:35:57,519
get helped but that's about it

807
00:35:55,059 --> 00:35:59,650
and so yeah corporations don't want

808
00:35:57,518 --> 00:36:00,848
viruses running on your machine for any

809
00:35:59,650 --> 00:36:05,680
particular reason unless they made the

810
00:36:00,849 --> 00:36:09,940
virus right so yeah that won't happen

811
00:36:05,679 --> 00:36:12,368
right but you know you also will be very

812
00:36:09,940 --> 00:36:16,389
constrained with what you know you are

813
00:36:12,369 --> 00:36:19,210
actually able to to decide to save you

814
00:36:16,389 --> 00:36:22,088
will not be able to backup software that

815
00:36:19,210 --> 00:36:24,190
you run anymore ever you will have to

816
00:36:22,088 --> 00:36:25,210
obey all of the things they want you to

817
00:36:24,190 --> 00:36:26,528
do to be able to run your software when

818
00:36:25,210 --> 00:36:30,329
they tell you you have to upgrade you

819
00:36:26,528 --> 00:36:32,199
have to upgrade now like full stop right

820
00:36:30,329 --> 00:36:36,239
because they'll be able to completely

821
00:36:32,199 --> 00:36:36,239
dictate what it is you can and cannot do

822
00:36:38,710 --> 00:36:49,579
rfh 666 let's see will this constant

823
00:36:48,199 --> 00:36:51,500
decryption used while running a game

824
00:36:49,579 --> 00:36:53,480
have an effect on performance I'm

825
00:36:51,500 --> 00:36:54,530
assuming not but I don't know again I

826
00:36:53,480 --> 00:36:56,059
haven't read the abstract stuff

827
00:36:54,530 --> 00:36:57,800
carefully enough to know but I'm

828
00:36:56,059 --> 00:36:59,150
assuming they took care of that so if it

829
00:36:57,800 --> 00:37:03,050
is the performance that I'm assuming

830
00:36:59,150 --> 00:37:04,970
it's a negligible one Rob Robbie once

831
00:37:03,050 --> 00:37:06,289
the keeper is known everybody could use

832
00:37:04,969 --> 00:37:09,319
it and equip the game with it through

833
00:37:06,289 --> 00:37:12,130
valve leaving valve encrypt everything

834
00:37:09,320 --> 00:37:17,930
with the same key for different users

835
00:37:12,130 --> 00:37:20,840
well fail on the way very fast I'm not

836
00:37:17,929 --> 00:37:25,579
sure what you're saying what do you mean

837
00:37:20,840 --> 00:37:29,570
what's a keeper is known but yes if like

838
00:37:25,579 --> 00:37:33,349
I said if you if you have the money to

839
00:37:29,570 --> 00:37:36,010
mount an actual hardware attack on a CPU

840
00:37:33,349 --> 00:37:40,579
then you just have to try and convince

841
00:37:36,010 --> 00:37:42,980
valve - that - you know by every game on

842
00:37:40,579 --> 00:37:44,809
Steam or whatever before they catch on

843
00:37:42,980 --> 00:37:46,579
and then you can decrypt them all and

844
00:37:44,809 --> 00:37:47,719
then you can you know post them to

845
00:37:46,579 --> 00:37:50,210
pirate bay or whatever if that's your

846
00:37:47,719 --> 00:37:52,189
goal right so you could that could

847
00:37:50,210 --> 00:37:54,440
happen but if they ever catch on they'll

848
00:37:52,190 --> 00:37:56,510
just stop issuing for that CPU so you

849
00:37:54,440 --> 00:37:58,309
can also imagine a scheme where Intel

850
00:37:56,510 --> 00:38:00,200
issues revoked certificates where

851
00:37:58,309 --> 00:38:03,170
they're basically like hey everyone who

852
00:38:00,199 --> 00:38:05,329
uses our service here's a big list of

853
00:38:03,170 --> 00:38:10,070
CPUs we found that we no longer don't

854
00:38:05,329 --> 00:38:11,779
let people run code on right I mean you

855
00:38:10,070 --> 00:38:14,870
can imagine a world and this is a

856
00:38:11,780 --> 00:38:18,080
trivial imagination just using the STX

857
00:38:14,869 --> 00:38:20,809
code as it is right a world where they

858
00:38:18,079 --> 00:38:22,750
decide that you are untrustworthy user

859
00:38:20,809 --> 00:38:25,190
and now you can't run any software

860
00:38:22,750 --> 00:38:30,219
commercial software at all because they

861
00:38:25,190 --> 00:38:33,409
sent to Adobe and to Microsoft and to

862
00:38:30,219 --> 00:38:35,869
valve and EA and everyone else they've

863
00:38:33,409 --> 00:38:38,239
sent a list of certificate revokes which

864
00:38:35,869 --> 00:38:40,339
basically say all these cpu public keys

865
00:38:38,239 --> 00:38:42,049
don't trust them anymore and yours is on

866
00:38:40,340 --> 00:38:44,480
there and now you can't buy anything

867
00:38:42,050 --> 00:38:46,700
your machines are brick effectively and

868
00:38:44,480 --> 00:38:48,838
the only thing you can run is open

869
00:38:46,699 --> 00:38:53,048
source stuff

870
00:38:48,838 --> 00:38:54,788
right trivial a imagine like takes no

871
00:38:53,048 --> 00:38:57,190
effort to set that up it's a trivial

872
00:38:54,789 --> 00:38:59,920
example of something that would be you

873
00:38:57,190 --> 00:39:01,059
know not only would I say it's trivial I

874
00:38:59,920 --> 00:39:01,619
guarantee you that's what will actually

875
00:39:01,059 --> 00:39:03,609
happen

876
00:39:01,619 --> 00:39:06,509
there's no quit there's no question in

877
00:39:03,608 --> 00:39:06,509
my mind that's what they'll do

878
00:39:13,280 --> 00:39:18,769
q4k labrie downloading games sounds bad

879
00:39:15,559 --> 00:39:20,480
for SSDs not really because again you

880
00:39:18,769 --> 00:39:22,159
never have to redownload the game unless

881
00:39:20,480 --> 00:39:24,889
you upgrade the CPU which happens how

882
00:39:22,159 --> 00:39:26,949
often right once in a very very long

883
00:39:24,889 --> 00:39:26,949
time

884
00:39:37,190 --> 00:39:40,730
Master Yoda isn't it expensive for intel

885
00:39:39,409 --> 00:39:43,159
to print a different circuit for each

886
00:39:40,730 --> 00:39:47,119
CPU I don't know I don't know enough

887
00:39:43,159 --> 00:39:51,108
about their fab technology right so I'm

888
00:39:47,119 --> 00:39:52,818
not sure sudonym 73 does FGX sound like

889
00:39:51,108 --> 00:40:02,690
a great place for a rootkit to hide or

890
00:39:52,818 --> 00:40:05,358
what um I guess I don't know probably

891
00:40:02,690 --> 00:40:06,829
yeah because I guess there's no reason

892
00:40:05,358 --> 00:40:08,389
it couldn't run it ring zero as well

893
00:40:06,829 --> 00:40:16,579
like I soon the sjx decided to just work

894
00:40:08,389 --> 00:40:19,730
I don't know ratchet freak doesn't that

895
00:40:16,579 --> 00:40:22,369
also prevent no because you

896
00:40:19,730 --> 00:40:24,469
could also I'm assuming because I looked

897
00:40:22,369 --> 00:40:27,019
and it looks like it's page based so

898
00:40:24,469 --> 00:40:31,000
your executable can also JIT stuff

899
00:40:27,019 --> 00:40:34,969
that's you can write to a region outside

900
00:40:31,000 --> 00:40:36,949
and even inside so you can get to

901
00:40:34,969 --> 00:40:43,279
something inside and then run it if you

902
00:40:36,949 --> 00:40:45,379
want right but if you were actually

903
00:40:43,280 --> 00:40:47,060
allowing that I all excited soom you can

904
00:40:45,380 --> 00:40:48,410
do that maybe you can't I don't know but

905
00:40:47,059 --> 00:40:50,150
at the very least you could get to

906
00:40:48,409 --> 00:40:51,679
something outside and then so the only

907
00:40:50,150 --> 00:40:53,480
thing that would leak is the jaded code

908
00:40:51,679 --> 00:40:56,179
which you just have to make sure you

909
00:40:53,480 --> 00:40:58,880
keep that to a reasonable level so that

910
00:40:56,179 --> 00:41:00,019
that doesn't allow piracy right but it

911
00:40:58,880 --> 00:41:01,608
wouldn't because all the data is not

912
00:41:00,019 --> 00:41:03,889
pirate of all so you could just get to

913
00:41:01,608 --> 00:41:05,598
outside and so people can copy the code

914
00:41:03,889 --> 00:41:06,889
so what they can't get in the data so

915
00:41:05,599 --> 00:41:09,200
the game's useless without the data

916
00:41:06,889 --> 00:41:11,000
right so you could still actually get a

917
00:41:09,199 --> 00:41:14,078
fair bit outside and be fine

918
00:41:11,000 --> 00:41:14,079
outside the wall

919
00:41:19,588 --> 00:41:23,349
now shield isn't expensive for intel to

920
00:41:22,000 --> 00:41:25,300
print a different circuit for each CPU

921
00:41:23,349 --> 00:41:28,119
and maintain a queryable database for

922
00:41:25,300 --> 00:41:29,859
each client 24/7 considering its key was

923
00:41:28,119 --> 00:41:30,940
generated using quantum measurement okay

924
00:41:29,858 --> 00:41:32,769
so just to be clear

925
00:41:30,940 --> 00:41:35,920
Intel does not have to maintain a

926
00:41:32,769 --> 00:41:36,659
queryable database they in no way have

927
00:41:35,920 --> 00:41:38,889
to do that

928
00:41:36,659 --> 00:41:41,049
none of this involves communication to

929
00:41:38,889 --> 00:41:42,519
Intel and like I was saying even if they

930
00:41:41,050 --> 00:41:43,750
want to do the nightmare scenario which

931
00:41:42,519 --> 00:41:46,690
actually I think is probably a likely

932
00:41:43,750 --> 00:41:48,849
scenario where Intel or you know what it

933
00:41:46,690 --> 00:41:50,588
doesn't even have to be Intel now that I

934
00:41:48,849 --> 00:41:52,750
think about it in fact Intel doesn't

935
00:41:50,588 --> 00:41:56,139
have to do this right anyone can

936
00:41:52,750 --> 00:41:57,670
maintain a black list of users now just

937
00:41:56,139 --> 00:42:00,730
there could just be a service called

938
00:41:57,670 --> 00:42:04,659
evil corporation incorporated and you

939
00:42:00,730 --> 00:42:06,460
know Electronic Arts and ooby soft and

940
00:42:04,659 --> 00:42:08,588
Microsoft and Adobe and all those guys

941
00:42:06,460 --> 00:42:10,119
could just subscribe to their service

942
00:42:08,588 --> 00:42:12,130
which is the blacklisting service and

943
00:42:10,119 --> 00:42:15,099
that service just sends out which public

944
00:42:12,130 --> 00:42:16,930
keys are known to be pirates right and

945
00:42:15,099 --> 00:42:18,130
hey if you happen to get on there even

946
00:42:16,929 --> 00:42:20,318
if you were in a pirate you get on there

947
00:42:18,130 --> 00:42:23,800
by accident tough you could never get

948
00:42:20,318 --> 00:42:26,079
out right there's no way to you there's

949
00:42:23,800 --> 00:42:27,640
nothing you can do about it so Intel

950
00:42:26,079 --> 00:42:29,200
could actually be a totally harmless

951
00:42:27,639 --> 00:42:31,449
actor in the scenario but because they

952
00:42:29,199 --> 00:42:33,549
created the technology a third party can

953
00:42:31,449 --> 00:42:34,809
now lock you out of your own computer

954
00:42:33,550 --> 00:42:36,150
like basically making it so that you

955
00:42:34,809 --> 00:42:38,799
can't run any commercial software I'm

956
00:42:36,150 --> 00:42:40,750
totally plausible scenario I would

957
00:42:38,800 --> 00:42:42,609
actually say likely scenario it's

958
00:42:40,750 --> 00:42:44,409
exactly like credit ratings are now

959
00:42:42,608 --> 00:42:47,559
right there'd be a thing called like

960
00:42:44,409 --> 00:42:51,309
Experian and it would be like is your

961
00:42:47,559 --> 00:42:53,559
software credit rating okay right and if

962
00:42:51,309 --> 00:42:56,170
it's not you can't buy anything anymore

963
00:42:53,559 --> 00:43:03,119
you have to go purchase a new computer

964
00:42:56,170 --> 00:43:03,119
in order to be able to do so it's ugly

965
00:43:07,838 --> 00:43:11,838
Andrew JDR have you heard any word on

966
00:43:10,159 --> 00:43:17,328
whether AMD will be employing this I

967
00:43:11,838 --> 00:43:18,889
have not Huber Caleb isn't dear I'm good

968
00:43:17,329 --> 00:43:22,640
if you want to prevent people from

969
00:43:18,889 --> 00:43:25,578
freely redistributing your software so

970
00:43:22,639 --> 00:43:28,969
the problem with DRM is not that you

971
00:43:25,579 --> 00:43:30,800
know it's not that software piracy isn't

972
00:43:28,969 --> 00:43:35,929
harmful to software developers

973
00:43:30,800 --> 00:43:39,560
potentially right that's not the case

974
00:43:35,929 --> 00:43:41,868
right if it's not the DRM is is is

975
00:43:39,559 --> 00:43:44,328
somehow not a useful thing for a

976
00:43:41,869 --> 00:43:47,030
software developer who wants to try and

977
00:43:44,329 --> 00:43:48,530
prevent any - wants to absolutely

978
00:43:47,030 --> 00:43:50,300
maximize the profit that they get off

979
00:43:48,530 --> 00:43:52,760
something DRM could be very valuable to

980
00:43:50,300 --> 00:43:56,300
that right the problem isn't that the

981
00:43:52,760 --> 00:43:58,609
problem is the is the sacrifice in order

982
00:43:56,300 --> 00:44:00,470
to get that we give up control of our

983
00:43:58,608 --> 00:44:06,108
computers and that's not acceptable

984
00:44:00,469 --> 00:44:08,719
right it's simply not acceptable and so

985
00:44:06,108 --> 00:44:12,019
I've always been very against these

986
00:44:08,719 --> 00:44:14,750
sorts of concepts because I feel like if

987
00:44:12,019 --> 00:44:16,849
you make that trade then you've lost

988
00:44:14,750 --> 00:44:18,949
you've lost essentially the spirit of

989
00:44:16,849 --> 00:44:24,680
computing it's gone and you can never

990
00:44:18,949 --> 00:44:27,049
get it back so yeah okay maybe now

991
00:44:24,679 --> 00:44:28,429
instead of selling a hundred thousand

992
00:44:27,050 --> 00:44:29,900
copies of this game you'll sell a

993
00:44:28,429 --> 00:44:31,279
hundred and fifty thousand copies of

994
00:44:29,900 --> 00:44:34,880
this game or two hundred thousand copies

995
00:44:31,280 --> 00:44:40,190
of this game was that worth it right

996
00:44:34,880 --> 00:44:43,130
last I checked games are making billions

997
00:44:40,190 --> 00:44:45,530
and billions of dollars a year so to the

998
00:44:43,130 --> 00:44:47,300
extent that piracy is a problem it's a

999
00:44:45,530 --> 00:44:49,700
problem of not making quite as much

1000
00:44:47,300 --> 00:44:51,740
money as they were making but not a case

1001
00:44:49,699 --> 00:44:54,259
of all game developers are going out of

1002
00:44:51,739 --> 00:44:57,409
business right so as far as I'm

1003
00:44:54,260 --> 00:44:59,210
concerned until like the you know until

1004
00:44:57,409 --> 00:45:00,828
the game industry basically collapses

1005
00:44:59,210 --> 00:45:02,449
it's really hard to make an argument

1006
00:45:00,829 --> 00:45:04,519
that users should give up control of

1007
00:45:02,449 --> 00:45:09,379
their own machines for the sake of us

1008
00:45:04,519 --> 00:45:10,969
making fifty percent more profit I mean

1009
00:45:09,380 --> 00:45:13,849
does that really sound like a good idea

1010
00:45:10,969 --> 00:45:15,500
does it sound like a good trade for all

1011
00:45:13,849 --> 00:45:16,940
the users of the world to give up the

1012
00:45:15,500 --> 00:45:18,858
ability to control what their computers

1013
00:45:16,940 --> 00:45:21,849
are doing so that game developers can

1014
00:45:18,858 --> 00:45:21,848
make fifty percent more money

1015
00:45:24,429 --> 00:45:29,199
it's a recreational activity

1016
00:45:36,489 --> 00:45:40,728
Rob Robbie how you draw the future of

1017
00:45:38,960 --> 00:45:43,039
restricted hardware I should start not

1018
00:45:40,728 --> 00:45:45,288
buying hardware like this right yeah the

1019
00:45:43,039 --> 00:45:47,650
problem is what are we gonna do right

1020
00:45:45,289 --> 00:45:51,319
this is the problem when you have

1021
00:45:47,650 --> 00:45:54,048
monopoly on things what are you gonna do

1022
00:45:51,318 --> 00:45:55,940
not buy a CPU I mean

1023
00:45:54,048 --> 00:45:57,469
AMD will probably do the same thing but

1024
00:45:55,940 --> 00:46:00,200
even if they don't Intel makes the

1025
00:45:57,469 --> 00:46:03,379
majority of chips so most laptops you

1026
00:46:00,199 --> 00:46:04,759
buy most desktops you buy especially

1027
00:46:03,380 --> 00:46:06,440
laptops because you don't have the

1028
00:46:04,759 --> 00:46:08,630
ability to build your own of those very

1029
00:46:06,440 --> 00:46:09,920
easily it's harder to do a good build

1030
00:46:08,630 --> 00:46:13,460
your own laptop build your own desktop

1031
00:46:09,920 --> 00:46:16,789
you can do easily right but it's like

1032
00:46:13,460 --> 00:46:20,630
it's pretty nasty right it's pretty

1033
00:46:16,789 --> 00:46:22,430
nasty Steve Ward 1990 I imagine this

1034
00:46:20,630 --> 00:46:28,670
would be great for use for Hardware

1035
00:46:22,429 --> 00:46:30,199
banning from games yeah maybe maybe not

1036
00:46:28,670 --> 00:46:35,318
I mean the thing that's kind of tricky

1037
00:46:30,199 --> 00:46:38,210
about it is just that it's it's per

1038
00:46:35,318 --> 00:46:39,798
Hardware not per user so users can

1039
00:46:38,210 --> 00:46:43,548
always get more hardware and then

1040
00:46:39,798 --> 00:46:48,018
potentially circumvent it right but yeah

1041
00:46:43,548 --> 00:46:49,548
it does make it a lot stronger it means

1042
00:46:48,018 --> 00:46:51,828
a user can't create another account and

1043
00:46:49,548 --> 00:46:53,298
and now go do whatever it is they're

1044
00:46:51,829 --> 00:46:57,619
doing that they have to actually get a

1045
00:46:53,298 --> 00:46:59,389
new machine m4 TPM 53 as I'm still

1046
00:46:57,619 --> 00:47:00,920
learning a lot I always look at old code

1047
00:46:59,389 --> 00:47:03,139
in my project and want to rethink the

1048
00:47:00,920 --> 00:47:04,309
architecture of it oh this is a separate

1049
00:47:03,139 --> 00:47:07,219
question let me see if there's any more

1050
00:47:04,309 --> 00:47:08,660
on the DRM nightmare since we're kind of

1051
00:47:07,219 --> 00:47:11,079
getting that all into one stream here

1052
00:47:08,659 --> 00:47:11,078
which is good

1053
00:47:12,248 --> 00:47:17,209
Rhodey g.e let's say a revoke

1054
00:47:15,858 --> 00:47:19,308
certificate is issued for a compromised

1055
00:47:17,210 --> 00:47:21,228
CPU and valve at all no longer issues

1056
00:47:19,309 --> 00:47:22,759
new software why would your system be

1057
00:47:21,228 --> 00:47:23,989
bricked since you already have an

1058
00:47:22,759 --> 00:47:25,789
encrypted version of the software on

1059
00:47:23,989 --> 00:47:26,929
your HD how could they still prevent you

1060
00:47:25,789 --> 00:47:29,028
from running the software that's already

1061
00:47:26,929 --> 00:47:31,728
installed they couldn't so you can still

1062
00:47:29,028 --> 00:47:34,818
run old stuff but you will never be able

1063
00:47:31,728 --> 00:47:36,169
to purchase anything new again right so

1064
00:47:34,818 --> 00:47:37,518
it's not bricked in the sense that you

1065
00:47:36,170 --> 00:47:41,989
could still run the games you already

1066
00:47:37,518 --> 00:47:45,108
already played but you can't and but you

1067
00:47:41,989 --> 00:47:47,809
couldn't get online with them right so

1068
00:47:45,108 --> 00:47:49,340
that wouldn't work and

1069
00:47:47,809 --> 00:47:51,079
you certainly can't ever buy another

1070
00:47:49,340 --> 00:47:52,340
game so you'll never play another game

1071
00:47:51,079 --> 00:47:54,380
after that and you won't be able to play

1072
00:47:52,340 --> 00:47:57,050
online anything nor will you'll be able

1073
00:47:54,380 --> 00:48:00,760
to get updates to those games or DLC or

1074
00:47:57,050 --> 00:48:00,760
anything else right

1075
00:48:04,119 --> 00:48:07,730
Godfather since the key is on the CPU

1076
00:48:06,230 --> 00:48:09,320
couldn't you just buy a new CPU if the

1077
00:48:07,730 --> 00:48:12,829
key gets blacklisted instead of a whole

1078
00:48:09,320 --> 00:48:14,660
new computer yes you could buy a CPU and

1079
00:48:12,829 --> 00:48:17,299
you could save the graphics card right

1080
00:48:14,659 --> 00:48:22,219
which is the only other major expense of

1081
00:48:17,300 --> 00:48:24,350
the computer so but the CPU is is the

1082
00:48:22,219 --> 00:48:28,000
big big part of it right CPU is 400

1083
00:48:24,349 --> 00:48:30,380
bucks whatever if you buy a nice one I

1084
00:48:28,000 --> 00:48:33,380
mean heck it could be 1,200 bucks to do

1085
00:48:30,380 --> 00:48:34,730
about it really nice 1 mm v 94 won't

1086
00:48:33,380 --> 00:48:39,650
that generate a huge mark of computers

1087
00:48:34,730 --> 00:48:41,659
that have been blacklisted or so so you

1088
00:48:39,650 --> 00:48:43,940
mean like a people selling their old

1089
00:48:41,659 --> 00:48:46,399
CPUs that have been blacklisted well the

1090
00:48:43,940 --> 00:48:47,900
problem too is now you've got this

1091
00:48:46,400 --> 00:48:49,220
problem where someone's selling computer

1092
00:48:47,900 --> 00:48:51,590
you wouldn't know if it was blacklisted

1093
00:48:49,219 --> 00:48:53,179
so you'd have to somehow have an escrow

1094
00:48:51,590 --> 00:48:54,769
where you could determine whether the

1095
00:48:53,179 --> 00:48:56,929
CPU you were buying was blacklisted or

1096
00:48:54,769 --> 00:49:02,269
not it's gonna be kind of a nightmare

1097
00:48:56,929 --> 00:49:03,469
but I bet it's gonna happen I'm a shield

1098
00:49:02,269 --> 00:49:05,030
it feels like it is just a matter of

1099
00:49:03,469 --> 00:49:06,799
time until someone somewhere breaks the

1100
00:49:05,030 --> 00:49:08,269
scheme and it is just a massive waste of

1101
00:49:06,800 --> 00:49:09,230
time and resources for everyone am i

1102
00:49:08,269 --> 00:49:12,099
right

1103
00:49:09,230 --> 00:49:14,750
well best-case scenario you're right

1104
00:49:12,099 --> 00:49:16,400
right best-case scenario yes because

1105
00:49:14,750 --> 00:49:18,530
that means now we don't have to live

1106
00:49:16,400 --> 00:49:19,849
under that scheme under that control

1107
00:49:18,530 --> 00:49:21,560
scheme where other people are making our

1108
00:49:19,849 --> 00:49:29,059
decisions for us about who can and can't

1109
00:49:21,559 --> 00:49:32,829
buy software right but you know will it

1110
00:49:29,059 --> 00:49:32,829
happen I don't know I have no idea

1111
00:49:41,909 --> 00:49:47,379
ezo audio rear is isn't it to your M

1112
00:49:45,789 --> 00:49:50,440
that is the primary driving force for

1113
00:49:47,380 --> 00:49:53,190
piracy in the first place uh I don't

1114
00:49:50,440 --> 00:49:53,190
think so

1115
00:49:53,699 --> 00:49:57,939
in fact I know it's not right because

1116
00:49:56,199 --> 00:50:00,460
I'm pretty sure the witness was released

1117
00:49:57,940 --> 00:50:04,659
with no DRM and it got pirated a

1118
00:50:00,460 --> 00:50:06,789
tremendous amount apparently so

1119
00:50:04,659 --> 00:50:11,049
I don't think that DRM has much to do

1120
00:50:06,789 --> 00:50:12,369
with piracy Qbert Caleb I think it is a

1121
00:50:11,050 --> 00:50:14,320
bigger deal for companies like Adobe and

1122
00:50:12,369 --> 00:50:18,400
Autodesk both of which have suffer with

1123
00:50:14,320 --> 00:50:22,180
insanely high piracy rates maybe I don't

1124
00:50:18,400 --> 00:50:23,200
know MMB 94 when big companies start

1125
00:50:22,179 --> 00:50:24,879
locking out people from using their

1126
00:50:23,199 --> 00:50:26,469
software the people will start looking

1127
00:50:24,880 --> 00:50:28,329
for software from smaller companies that

1128
00:50:26,469 --> 00:50:31,089
won't use this technology how are you

1129
00:50:28,329 --> 00:50:35,559
gonna do that how are you going to not

1130
00:50:31,090 --> 00:50:37,630
use Photoshop right it's already the

1131
00:50:35,559 --> 00:50:41,199
case that you could go to a small

1132
00:50:37,630 --> 00:50:42,789
software company for something right but

1133
00:50:41,199 --> 00:50:46,899
they don't make anything that's

1134
00:50:42,789 --> 00:50:49,509
comparable you know it's really hard to

1135
00:50:46,900 --> 00:50:51,579
find alternatives and plus what will

1136
00:50:49,510 --> 00:50:53,020
happen then the big company will just

1137
00:50:51,579 --> 00:50:54,699
buy that small company and that's all

1138
00:50:53,019 --> 00:50:57,250
over that's what happens lots of times

1139
00:50:54,699 --> 00:51:00,699
right it's like you know how many small

1140
00:50:57,250 --> 00:51:02,380
things do you know of well okay flash

1141
00:51:00,699 --> 00:51:05,889
used to be a separate company owned by

1142
00:51:02,380 --> 00:51:07,990
Adobe now right like a lot of a lot of

1143
00:51:05,889 --> 00:51:10,809
things are acquired and sort of smushed

1144
00:51:07,989 --> 00:51:13,269
up right premier was this was made by

1145
00:51:10,809 --> 00:51:15,250
like a college thesis or something

1146
00:51:13,269 --> 00:51:17,829
that's part of Adobe right I mean they

1147
00:51:15,250 --> 00:51:19,840
things things get accreted they just

1148
00:51:17,829 --> 00:51:21,130
they just buy a smaller company so if it

1149
00:51:19,840 --> 00:51:22,420
really created a problem they just buy

1150
00:51:21,130 --> 00:51:24,789
them that's what Autodesk does they own

1151
00:51:22,420 --> 00:51:28,420
Maya they own soft amaz they own 3d

1152
00:51:24,789 --> 00:51:30,759
studio right like you know basically

1153
00:51:28,420 --> 00:51:32,920
between the foundry and Autodesk there

1154
00:51:30,760 --> 00:51:37,230
isn't a 3d package in existence that one

1155
00:51:32,920 --> 00:51:37,230
of the one of those two don't own right

1156
00:51:38,610 --> 00:51:43,030
hi I do you think that there's a chance

1157
00:51:41,559 --> 00:51:45,099
that the smallest trend of drm-free

1158
00:51:43,030 --> 00:51:51,100
games will counteract this sgf stuff in

1159
00:51:45,099 --> 00:51:52,299
any significant way I I have no idea in

1160
00:51:51,099 --> 00:51:53,619
my opinion these things we just

1161
00:51:52,300 --> 00:51:54,309
shouldn't be doing them like we

1162
00:51:53,619 --> 00:51:55,538
shouldn't give

1163
00:51:54,309 --> 00:51:57,759
we shouldn't figure out what the future

1164
00:51:55,539 --> 00:52:01,599
looks like when companies control what

1165
00:51:57,759 --> 00:52:05,858
you can and cannot run right there has

1166
00:52:01,599 --> 00:52:09,249
to be a balance there you know and I

1167
00:52:05,858 --> 00:52:13,808
don't know I mean all I can say is it

1168
00:52:09,248 --> 00:52:16,169
like how many people out there learn to

1169
00:52:13,809 --> 00:52:18,430
paint in Photoshop on a pirated copy

1170
00:52:16,170 --> 00:52:20,139
right and now they work at a company

1171
00:52:18,429 --> 00:52:22,328
that actually legitimately pays for

1172
00:52:20,139 --> 00:52:24,278
their Photoshop as an artist was that

1173
00:52:22,329 --> 00:52:30,219
really that bad that that's what

1174
00:52:24,278 --> 00:52:35,559
happened you know and I don't know right

1175
00:52:30,219 --> 00:52:38,499
I don't know and sometimes yeah I mean

1176
00:52:35,559 --> 00:52:40,298
there's you know sometimes companies do

1177
00:52:38,498 --> 00:52:42,759
try to do things fairly and they have

1178
00:52:40,298 --> 00:52:45,518
like a full-featured educational version

1179
00:52:42,759 --> 00:52:47,559
of something or whatever but you know I

1180
00:52:45,518 --> 00:52:49,328
don't know it really depends I think on

1181
00:52:47,559 --> 00:52:51,789
on whether you how much you trust

1182
00:52:49,329 --> 00:52:55,650
companies to do the right thing and most

1183
00:52:51,789 --> 00:52:55,650
the time I find they don't you know

1184
00:53:08,570 --> 00:53:12,720
wherever every sad the entry costs and

1185
00:53:10,800 --> 00:53:14,880
fabrics are so high else I would find a

1186
00:53:12,719 --> 00:53:17,039
Kickstarter soon to some fantastic user

1187
00:53:14,880 --> 00:53:20,300
owned CPU architecture yeah it would be

1188
00:53:17,039 --> 00:53:22,469
nice to have an open CPU architecture

1189
00:53:20,300 --> 00:53:24,150
someday like I think there's some people

1190
00:53:22,469 --> 00:53:25,649
who started an a competitor to arm

1191
00:53:24,150 --> 00:53:27,420
that's like an open source New York -

1192
00:53:25,650 --> 00:53:29,490
sure maybe someday we can just get on

1193
00:53:27,420 --> 00:53:31,349
that and then forget all this stuff but

1194
00:53:29,489 --> 00:53:35,159
I don't know the fab technology is

1195
00:53:31,349 --> 00:53:39,868
really hard to come by and you know I

1196
00:53:35,159 --> 00:53:41,190
don't know how that happens could this

1197
00:53:39,869 --> 00:53:42,119
be taking a step further if they start

1198
00:53:41,190 --> 00:53:43,980
putting the key on the motherboard

1199
00:53:42,119 --> 00:53:47,730
instead of the CPU that's less

1200
00:53:43,980 --> 00:53:49,590
replaceable no I mean the motherboards

1201
00:53:47,730 --> 00:53:51,090
often much cheaper than the CPU actually

1202
00:53:49,590 --> 00:53:54,059
the CPU is often to three times

1203
00:53:51,090 --> 00:53:56,519
expensive is another board so putting on

1204
00:53:54,059 --> 00:53:59,090
the motherboard doesn't really doesn't

1205
00:53:56,519 --> 00:53:59,090
really make it any worse

1206
00:54:14,869 --> 00:54:21,000
and juju tiara so apparently QEMU a VM

1207
00:54:18,900 --> 00:54:22,530
hypervisor has support for emulating SGX

1208
00:54:21,000 --> 00:54:28,199
how is this useful

1209
00:54:22,530 --> 00:54:31,740
uh well I'm assuming and I could be

1210
00:54:28,199 --> 00:54:36,960
wrong but I'm assuming that as long as

1211
00:54:31,739 --> 00:54:40,679
you're running on an X 64 processor with

1212
00:54:36,960 --> 00:54:43,829
SGX then it would just work right cuz

1213
00:54:40,679 --> 00:54:46,109
you just the the emulated processor

1214
00:54:43,829 --> 00:54:48,960
would just use the actual processors

1215
00:54:46,110 --> 00:54:50,309
public and private key and if you didn't

1216
00:54:48,960 --> 00:54:51,840
want to do that you could make up your

1217
00:54:50,309 --> 00:54:52,409
own public and private key and still run

1218
00:54:51,840 --> 00:54:54,090
just fine

1219
00:54:52,409 --> 00:54:58,469
you would just wouldn't be able to

1220
00:54:54,090 --> 00:55:00,480
actually you wouldn't be able to attest

1221
00:54:58,469 --> 00:55:02,309
to anyone outside that you were a

1222
00:55:00,480 --> 00:55:04,019
legitimate Intel CPU but that may be

1223
00:55:02,309 --> 00:55:04,590
fine too right maybe you're not trying

1224
00:55:04,019 --> 00:55:10,409
to do that

1225
00:55:04,590 --> 00:55:12,240
so the SGS extensions for security would

1226
00:55:10,409 --> 00:55:14,489
still just totally work under emulation

1227
00:55:12,239 --> 00:55:16,169
and if it's an actual xst for a

1228
00:55:14,489 --> 00:55:17,759
processor with SGX that's running it

1229
00:55:16,170 --> 00:55:20,730
they would actually work for attestation

1230
00:55:17,760 --> 00:55:25,850
as well because all the VMS would all

1231
00:55:20,730 --> 00:55:25,849
attest as that processor correctly

1232
00:55:31,590 --> 00:55:35,110
so I sauce the kid for businesses

1233
00:55:33,849 --> 00:55:36,579
wouldn't just tech be good for the

1234
00:55:35,110 --> 00:55:39,160
consumer I would feel more comfortable

1235
00:55:36,579 --> 00:55:40,960
if my bank had my encrypted data as

1236
00:55:39,159 --> 00:55:43,179
tight as possible so the problem is I

1237
00:55:40,960 --> 00:55:45,400
don't know that this helps banks really

1238
00:55:43,179 --> 00:55:49,019
all that much beyond the current though

1239
00:55:45,400 --> 00:55:51,490
because as long as as long as some

1240
00:55:49,019 --> 00:55:54,670
customer service personnel can access

1241
00:55:51,489 --> 00:55:57,099
your account then hackers can write the

1242
00:55:54,670 --> 00:55:59,440
fact that SGX is keeping like some

1243
00:55:57,099 --> 00:56:01,329
process from accessing it potentially

1244
00:55:59,440 --> 00:56:02,980
doesn't necessarily help you because

1245
00:56:01,329 --> 00:56:04,719
they won't attack hackers will attack

1246
00:56:02,980 --> 00:56:08,469
that point they'll attack the customer

1247
00:56:04,719 --> 00:56:10,569
service gateway or something right so I

1248
00:56:08,469 --> 00:56:12,609
don't really know how useful this is for

1249
00:56:10,570 --> 00:56:15,820
a bank it adds a little bit of security

1250
00:56:12,610 --> 00:56:18,059
potentially from virus attacks on the

1251
00:56:15,820 --> 00:56:20,050
bank maybe or something like that maybe

1252
00:56:18,059 --> 00:56:22,090
but it I don't know that it really

1253
00:56:20,050 --> 00:56:24,490
prevents hack Soaring assuming that the

1254
00:56:22,090 --> 00:56:26,289
bank has remote customer service of some

1255
00:56:24,489 --> 00:56:29,069
kind or even local customer service to

1256
00:56:26,289 --> 00:56:29,070
that for that matter

1257
00:56:51,510 --> 00:56:55,270
you look at one minute left so I must

1258
00:56:53,920 --> 00:56:57,068
see if there's anything else

1259
00:56:55,269 --> 00:56:58,690
keeper caleb has rad ever had problems

1260
00:56:57,068 --> 00:57:00,699
with people pirating their suffer or

1261
00:56:58,690 --> 00:57:06,460
people releasing the source code yes

1262
00:57:00,699 --> 00:57:09,879
they have and you know they just they

1263
00:57:06,460 --> 00:57:11,798
deal with it on case by case basis messy

1264
00:57:09,880 --> 00:57:13,900
old oculd encrypting each 16-gigabyte

1265
00:57:11,798 --> 00:57:15,429
gain download using your s Jeske be

1266
00:57:13,900 --> 00:57:18,309
prohibitive costs for a company like

1267
00:57:15,429 --> 00:57:19,960
valve how likely would it be for valve

1268
00:57:18,309 --> 00:57:23,880
to refuse doing such a thing

1269
00:57:19,960 --> 00:57:28,269
so valve you know has a mixed record I

1270
00:57:23,880 --> 00:57:30,400
would say as far as as ethics in that

1271
00:57:28,269 --> 00:57:32,858
they're not like ei which is strictly

1272
00:57:30,400 --> 00:57:34,630
like seems to have only their best

1273
00:57:32,858 --> 00:57:36,788
interests in mind like valve does

1274
00:57:34,630 --> 00:57:38,769
occasionally do things that I feel like

1275
00:57:36,789 --> 00:57:42,069
are not so great but often times they do

1276
00:57:38,769 --> 00:57:44,079
things that are pretty pretty ethical or

1277
00:57:42,068 --> 00:57:47,440
pretty fair to the consumer

1278
00:57:44,079 --> 00:57:49,809
I feel like valve does so it's entirely

1279
00:57:47,440 --> 00:57:52,659
possible that like valve might not do

1280
00:57:49,809 --> 00:57:54,460
this right you know they might decide

1281
00:57:52,659 --> 00:57:57,670
that this is too dangerous or route and

1282
00:57:54,460 --> 00:57:59,619
they don't want to do it so I don't

1283
00:57:57,670 --> 00:58:01,930
think they would be patient zero

1284
00:57:59,619 --> 00:58:04,119
like EA's origin service for example

1285
00:58:01,929 --> 00:58:06,759
would probably be the much more likely

1286
00:58:04,119 --> 00:58:08,980
one to like adopt this sort of thing

1287
00:58:06,760 --> 00:58:11,170
first I would say as for whether

1288
00:58:08,980 --> 00:58:12,730
encrypting the game download being

1289
00:58:11,170 --> 00:58:15,880
prohibitive it's not prohibitive at all

1290
00:58:12,730 --> 00:58:20,740
the cost of encrypting the bytes of

1291
00:58:15,880 --> 00:58:22,390
something is so cheap that the data it's

1292
00:58:20,739 --> 00:58:25,179
the bandwidth cost that's expensive

1293
00:58:22,389 --> 00:58:27,278
having the CPU as it shovels something

1294
00:58:25,179 --> 00:58:30,750
out the network port apply encryption to

1295
00:58:27,278 --> 00:58:30,750
it is is practically free

1296
00:58:38,518 --> 00:58:42,939
Rob Robby I am less afraid of price can

1297
00:58:41,259 --> 00:58:44,978
price control with DRM strong as this

1298
00:58:42,940 --> 00:58:46,208
one I'm more afraid that the OS of the

1299
00:58:44,978 --> 00:58:48,759
future will block software that hasn't

1300
00:58:46,208 --> 00:58:49,958
been signed that is scary yes and you

1301
00:58:48,759 --> 00:58:52,809
should be very afraid of that because

1302
00:58:49,958 --> 00:58:54,909
that almost certainly will happen I mean

1303
00:58:52,809 --> 00:58:57,278
it's it's sort of already is happening

1304
00:58:54,909 --> 00:59:00,458
on the iOS right like you can't run

1305
00:58:57,278 --> 00:59:05,048
software on your own iPhone without

1306
00:59:00,458 --> 00:59:05,949
signing it full stop and so I think that

1307
00:59:05,048 --> 00:59:09,068
sort of thing will only get more

1308
00:59:05,949 --> 00:59:10,778
prevalent and yes I am very much against

1309
00:59:09,068 --> 00:59:12,278
that and I think it's a huge huge

1310
00:59:10,778 --> 00:59:17,739
problem very very bad

1311
00:59:12,278 --> 00:59:20,559
a valley a would the entire time need to

1312
00:59:17,739 --> 00:59:23,619
be encrypted or just the executable part

1313
00:59:20,559 --> 00:59:27,400
um I mean basically the part that you

1314
00:59:23,619 --> 00:59:29,798
don't want to be pirated has to be

1315
00:59:27,400 --> 00:59:33,190
encrypted so if you don't mind all the

1316
00:59:29,798 --> 00:59:35,288
art getting pirated but you just want to

1317
00:59:33,190 --> 00:59:37,769
have the executable not get pirated then

1318
00:59:35,289 --> 00:59:41,380
yes you could just encrypt excute Abul

1319
00:59:37,768 --> 00:59:42,728
so it depends probably for most games

1320
00:59:41,380 --> 00:59:44,229
it's sufficient to just encrypt the

1321
00:59:42,728 --> 00:59:48,278
executable you probably don't need to

1322
00:59:44,228 --> 00:59:49,179
encrypt the art because if they can't

1323
00:59:48,278 --> 00:59:50,978
have the xperia but whether they going

1324
00:59:49,179 --> 00:59:53,409
to read Plymouth the whole game probably

1325
00:59:50,978 --> 00:59:56,639
not right so it's probably sufficient to

1326
00:59:53,409 --> 00:59:56,639
leave the art unencrypted

1327
01:00:00,389 --> 01:00:03,909
Godfather since valve need a big push

1328
01:00:02,590 --> 01:00:05,530
for Linux I'm willing to bet that they

1329
01:00:03,909 --> 01:00:07,059
won't chip on the sjx train since it is

1330
01:00:05,530 --> 01:00:09,460
a possible limit to consumers

1331
01:00:07,059 --> 01:00:10,750
s3x works on Linux justice fine just as

1332
01:00:09,460 --> 01:00:18,130
well as it will work on Windows it's a

1333
01:00:10,750 --> 01:00:20,500
CPU thing so cubic Caleb what is code

1334
01:00:18,130 --> 01:00:22,059
signing anyway code signing is again

1335
01:00:20,500 --> 01:00:25,119
just exactly the same thing as what I

1336
01:00:22,059 --> 01:00:27,820
was talking about here with the keys so

1337
01:00:25,119 --> 01:00:30,940
basically it's it's like this sort of

1338
01:00:27,820 --> 01:00:33,220
thing where there's some concept of a

1339
01:00:30,940 --> 01:00:35,500
certificate that you use to sign

1340
01:00:33,219 --> 01:00:37,239
something so so they can prove that you

1341
01:00:35,500 --> 01:00:46,800
that it's that's valid so I'll give you

1342
01:00:37,239 --> 01:00:46,799
an example of what that is all right

1343
01:00:55,210 --> 01:00:59,838
all right so the basic idea of public

1344
01:00:58,190 --> 01:01:02,298
encryption I already said what it was

1345
01:00:59,838 --> 01:01:04,998
right the idea is that you you generate

1346
01:01:02,298 --> 01:01:07,940
a pair of keys a public key and a

1347
01:01:04,998 --> 01:01:10,068
private key and and you give this one

1348
01:01:07,940 --> 01:01:13,130
out to everyone this goes out to the

1349
01:01:10,068 --> 01:01:15,949
world and this one is a secret and no

1350
01:01:13,130 --> 01:01:18,229
one else knows it but you okay that's

1351
01:01:15,949 --> 01:01:20,228
how that's how that works and what

1352
01:01:18,228 --> 01:01:23,179
public key encryption allows you to do

1353
01:01:20,228 --> 01:01:26,718
is basically depending on how the scheme

1354
01:01:23,179 --> 01:01:30,679
is set up it allows you to pass data in

1355
01:01:26,719 --> 01:01:32,690
either direction here such that you can

1356
01:01:30,679 --> 01:01:33,919
for example encrypt something this

1357
01:01:32,690 --> 01:01:35,630
direction meaning I could encrypt

1358
01:01:33,920 --> 01:01:37,639
something with the private key and then

1359
01:01:35,630 --> 01:01:39,650
everyone the public key could decrypt it

1360
01:01:37,639 --> 01:01:41,989
and know that I was the only person who

1361
01:01:39,650 --> 01:01:43,999
could have encrypted it right because

1362
01:01:41,989 --> 01:01:45,469
I'm the only person with this or you can

1363
01:01:43,998 --> 01:01:46,998
go the other direction which is to say

1364
01:01:45,469 --> 01:01:48,440
that I can encrypt some of the public

1365
01:01:46,998 --> 01:01:53,659
key and know that only people with the

1366
01:01:48,440 --> 01:01:55,278
private key can decrypt it right so what

1367
01:01:53,659 --> 01:01:56,808
you were asking what code signing is

1368
01:01:55,278 --> 01:02:03,759
code signing is the thing that goes in

1369
01:01:56,809 --> 01:02:07,910
this direction right if I'm Apple I

1370
01:02:03,759 --> 01:02:10,639
retain this secret key that all iOS

1371
01:02:07,909 --> 01:02:13,728
devices have a public key baked into

1372
01:02:10,639 --> 01:02:16,429
them that is the pair for it but only

1373
01:02:13,728 --> 01:02:19,689
Apple has the private key let's say so

1374
01:02:16,429 --> 01:02:22,578
you submit an executable to Apple right

1375
01:02:19,690 --> 01:02:24,528
they encrypt it with the private key or

1376
01:02:22,579 --> 01:02:26,450
in this case they probably don't encrypt

1377
01:02:24,528 --> 01:02:28,518
it they just sign it which means they

1378
01:02:26,449 --> 01:02:30,528
take like a checksum of it or something

1379
01:02:28,518 --> 01:02:32,718
and then in and then just encrypt the

1380
01:02:30,528 --> 01:02:33,710
checksum so they don't need to click the

1381
01:02:32,719 --> 01:02:35,298
whole external because we're not trying

1382
01:02:33,710 --> 01:02:37,759
to protect the executable they're trying

1383
01:02:35,298 --> 01:02:40,630
to just prevent it from running right so

1384
01:02:37,759 --> 01:02:43,309
they just encrypt some measure some

1385
01:02:40,630 --> 01:02:46,460
approximation like a hat like a hash or

1386
01:02:43,309 --> 01:02:48,319
or a checksum let's say but if we wanted

1387
01:02:46,460 --> 01:02:49,608
to be paranoid we can encrypt the whole

1388
01:02:48,318 --> 01:02:51,170
thing so let's just say we did that we

1389
01:02:49,608 --> 01:02:55,130
encrypt the whole executable with the

1390
01:02:51,170 --> 01:02:57,108
private key right and now all the iOS

1391
01:02:55,130 --> 01:02:58,969
devices all have the public key on them

1392
01:02:57,108 --> 01:03:00,558
already and everyone has that so it's

1393
01:02:58,969 --> 01:03:02,119
fine and so when they go to run

1394
01:03:00,559 --> 01:03:04,339
something they only run things they can

1395
01:03:02,119 --> 01:03:06,739
decrypt with the public key so they

1396
01:03:04,338 --> 01:03:08,000
decrypt and run so obviously since no

1397
01:03:06,739 --> 01:03:09,289
one else has the private key no

1398
01:03:08,000 --> 01:03:10,610
when else can actually take an

1399
01:03:09,289 --> 01:03:12,409
executable and produce something that

1400
01:03:10,610 --> 01:03:14,269
when decrypted with this public key

1401
01:03:12,409 --> 01:03:16,639
actually produces a working executable

1402
01:03:14,269 --> 01:03:19,130
right because if you feed in if you took

1403
01:03:16,639 --> 01:03:20,480
some other private key and feed in the

1404
01:03:19,130 --> 01:03:21,829
executable equipped Dex control with

1405
01:03:20,480 --> 01:03:24,740
that and feed it into here you'll just

1406
01:03:21,829 --> 01:03:25,909
get garbage out right it won't have it

1407
01:03:24,739 --> 01:03:27,589
won't look anything like that suitable

1408
01:03:25,909 --> 01:03:30,799
you put it there just kind of completely

1409
01:03:27,590 --> 01:03:33,170
meaning this bit stream so that's what

1410
01:03:30,800 --> 01:03:34,700
code signing is it's the operating

1411
01:03:33,170 --> 01:03:37,190
system having a public key and the

1412
01:03:34,699 --> 01:03:38,960
vendor having a private key such that

1413
01:03:37,190 --> 01:03:40,550
only people who pass their executable

1414
01:03:38,960 --> 01:03:46,090
through the vendor for signing can

1415
01:03:40,550 --> 01:03:46,090
actually run on the on the end device

1416
01:03:52,949 --> 01:03:56,649
nestled acacie would you consider

1417
01:03:54,909 --> 01:03:59,348
prioritizing developing for os's which

1418
01:03:56,650 --> 01:04:02,920
refused to use SGX

1419
01:03:59,349 --> 01:04:05,280
I mean sure but I doubt any will that

1420
01:04:02,920 --> 01:04:05,280
make sense

1421
01:04:08,460 --> 01:04:11,858
Steve boy you should do more streams

1422
01:04:10,719 --> 01:04:13,659
about this kind of stuff it's really

1423
01:04:11,858 --> 01:04:16,000
interesting when yeah I mean when it

1424
01:04:13,659 --> 01:04:17,618
comes up I mean like I said I'd wear

1425
01:04:16,000 --> 01:04:19,269
since we're on RSI break we - let's chat

1426
01:04:17,619 --> 01:04:19,990
about everything Rob Rob ad room like

1427
01:04:19,269 --> 01:04:21,519
this is sad

1428
01:04:19,989 --> 01:04:23,289
can you please choose a happier topic

1429
01:04:21,519 --> 01:04:25,838
for the next chat I can try but

1430
01:04:23,289 --> 01:04:28,199
unfortunately this doesn't go away that

1431
01:04:25,838 --> 01:04:28,199
makes sense

1432
01:04:28,858 --> 01:04:33,338
all right so I think we're pretty much

1433
01:04:31,420 --> 01:04:34,780
done anyway we're out of time here on

1434
01:04:33,338 --> 01:04:35,769
the stream so I'm gonna I'm gonna wrap

1435
01:04:34,780 --> 01:04:39,490
things up

1436
01:04:35,769 --> 01:04:42,630
that was that was yeah I'm breakable DRM

1437
01:04:39,489 --> 01:04:47,469
in a nutshell sad but true

1438
01:04:42,630 --> 01:04:50,369
coming down the pipe and probably not

1439
01:04:47,469 --> 01:04:50,368
gonna be stoppable

1440
01:04:50,550 --> 01:04:56,500
yeah what are you gonna do if only

1441
01:04:54,820 --> 01:04:58,539
people were nice and actually cared

1442
01:04:56,500 --> 01:05:01,960
about like progress and happiness and

1443
01:04:58,539 --> 01:05:04,210
things instead of money wouldn't it be

1444
01:05:01,960 --> 01:05:09,460
great but that's not the world we live

1445
01:05:04,210 --> 01:05:10,539
in so well anyway thank you very much

1446
01:05:09,460 --> 01:05:14,079
for joining me for another episode of

1447
01:05:10,539 --> 01:05:17,460
handmade hero chat we will probably be

1448
01:05:14,079 --> 01:05:20,980
next back next week for some more chat

1449
01:05:17,460 --> 01:05:23,380
until then I hope you guys have fun

1450
01:05:20,980 --> 01:05:25,659
programming I'm sorry that DRM will ruin

1451
01:05:23,380 --> 01:05:27,460
all of our lives eventually that's just

1452
01:05:25,659 --> 01:05:30,219
the way it goes maybe we'll be able to

1453
01:05:27,460 --> 01:05:32,409
do something to stop it who knows but

1454
01:05:30,219 --> 01:05:36,730
for now that's just that's just a sad

1455
01:05:32,409 --> 01:05:38,649
state of affairs yeah so go ahead and

1456
01:05:36,730 --> 01:05:41,079
everyone go cry under keyboards I will

1457
01:05:38,650 --> 01:05:42,910
as well and maybe our collective tears

1458
01:05:41,079 --> 01:05:45,220
will short out the world and it'll be

1459
01:05:42,909 --> 01:05:46,719
some kind of grand protest thanks for

1460
01:05:45,219 --> 01:05:48,429
joining me everyone I will see you back

1461
01:05:46,719 --> 01:05:50,769
here next week don't forget to check the

1462
01:05:48,429 --> 01:05:53,289
tweet bot on handmade hero org to find

1463
01:05:50,769 --> 01:05:54,670
out what the schedule is until then have

1464
01:05:53,289 --> 01:05:57,029
fun coding and I will see you guys on

1465
01:05:54,670 --> 01:05:57,030
the Internet

