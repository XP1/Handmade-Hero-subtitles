1
00:00:00,350 --> 00:00:05,099
hello everybody and welcome to handmade

2
00:00:02,819 --> 00:00:11,250
Hero show record a complete game live on

3
00:00:05,099 --> 00:00:15,990
stream I think if I'm not mistaken we

4
00:00:11,250 --> 00:00:18,660
verified sort of last weekend that we'd

5
00:00:15,990 --> 00:00:20,969
finished up our apron stuff and we added

6
00:00:18,660 --> 00:00:23,490
some nice code to the world generator to

7
00:00:20,969 --> 00:00:26,160
just make it easier to place entities

8
00:00:23,489 --> 00:00:29,669
correctly and use essentially a tile

9
00:00:26,160 --> 00:00:32,099
grid for creating stuff when we want it

10
00:00:29,670 --> 00:00:36,210
to do that obviously our engine doesn't

11
00:00:32,098 --> 00:00:39,419
really require tiles at all our engine

12
00:00:36,210 --> 00:00:42,719
is completely free for him but the sort

13
00:00:39,420 --> 00:00:44,640
of the play of the game is supposed to

14
00:00:42,719 --> 00:00:47,429
be fairly tile based a lot of the time

15
00:00:44,640 --> 00:00:50,460
and while we may relax those constraints

16
00:00:47,429 --> 00:00:51,960
for certain circumstances we want the

17
00:00:50,460 --> 00:00:55,698
ability to think about things in terms

18
00:00:51,960 --> 00:00:58,530
of tiles in order to create sort of the

19
00:00:55,698 --> 00:01:01,858
zelda-esque or binding of issac as kind

20
00:00:58,530 --> 00:01:03,239
of feel of a lot of the rooms and

21
00:01:01,859 --> 00:01:07,250
dungeons where you're supposed to kind

22
00:01:03,238 --> 00:01:12,239
of have this understanding of of tiles

23
00:01:07,250 --> 00:01:14,250
and so and in really honestly our game

24
00:01:12,239 --> 00:01:16,319
is even more that way because we're sort

25
00:01:14,250 --> 00:01:17,849
of like which tile you're standing on is

26
00:01:16,319 --> 00:01:21,359
actually really important to our game

27
00:01:17,849 --> 00:01:23,129
and so it's it's even more than those

28
00:01:21,359 --> 00:01:26,069
two games important that the player

29
00:01:23,129 --> 00:01:30,929
understands the tile nature of most

30
00:01:26,069 --> 00:01:32,938
rooms and again we can relax those in

31
00:01:30,930 --> 00:01:34,710
the future we may want to kind of make

32
00:01:32,938 --> 00:01:36,179
it so that there's different fixed

33
00:01:34,709 --> 00:01:37,559
locations that are not really in our

34
00:01:36,180 --> 00:01:39,360
grid but you still like stand on

35
00:01:37,560 --> 00:01:40,829
specific points because the game is more

36
00:01:39,359 --> 00:01:43,500
about standing on specific points than

37
00:01:40,828 --> 00:01:45,539
it is about tiles in other words it's

38
00:01:43,500 --> 00:01:47,728
about being able to know that there are

39
00:01:45,540 --> 00:01:49,560
certain exact numbers of locations in

40
00:01:47,728 --> 00:01:53,069
the room you can stand and which one

41
00:01:49,560 --> 00:01:54,990
you're on that's important but that they

42
00:01:53,069 --> 00:01:57,359
are in a grid is not important to the

43
00:01:54,989 --> 00:02:00,629
gameplay it's just the easiest way for

44
00:01:57,359 --> 00:02:01,799
us to create most of the things that the

45
00:02:00,629 --> 00:02:03,179
player experience is because it's

46
00:02:01,799 --> 00:02:05,930
something players can understand very

47
00:02:03,180 --> 00:02:09,868
easily and visually process very quickly

48
00:02:05,930 --> 00:02:12,120
if you provide some kind of chaotic set

49
00:02:09,868 --> 00:02:13,598
of points the player can stand on then

50
00:02:12,120 --> 00:02:16,239
one of the big problems that you have

51
00:02:13,598 --> 00:02:18,188
is moot choosing which point you're

52
00:02:16,239 --> 00:02:20,170
moving to from any given point becomes

53
00:02:18,188 --> 00:02:22,090
perhaps a little bit more exercise in

54
00:02:20,169 --> 00:02:23,289
frustration where it's like you were

55
00:02:22,090 --> 00:02:24,598
trying to move to one and you actually

56
00:02:23,289 --> 00:02:27,400
move to another that sort of thing

57
00:02:24,598 --> 00:02:29,738
whereas a grid all joysticks are set up

58
00:02:27,400 --> 00:02:31,329
to be pretty clean to press if you only

59
00:02:29,739 --> 00:02:33,370
have to choose one of four directions

60
00:02:31,329 --> 00:02:35,950
you know a d-pad will do that really

61
00:02:33,370 --> 00:02:37,688
nicely even an analog stick usually

62
00:02:35,949 --> 00:02:40,119
works quite nicely for doing that sort

63
00:02:37,688 --> 00:02:44,318
of thing and so I'm an obviously the

64
00:02:40,120 --> 00:02:45,069
arrow keys WASD and stuff are perfect

65
00:02:44,318 --> 00:02:47,318
for that as well

66
00:02:45,068 --> 00:02:48,759
so it you know most of the time we want

67
00:02:47,318 --> 00:02:51,009
to stick to things that kind of look

68
00:02:48,759 --> 00:02:54,548
like a grid or at least can be processed

69
00:02:51,009 --> 00:02:56,649
like a grid and so we were able to get

70
00:02:54,549 --> 00:02:59,468
all of that stuff working I believe we

71
00:02:56,650 --> 00:03:03,938
are you know clear now to do sort of the

72
00:02:59,468 --> 00:03:06,039
next whatever the next sort of larger

73
00:03:03,938 --> 00:03:09,068
thing is that we want to do and so what

74
00:03:06,039 --> 00:03:10,448
I want to do today is talk about sort of

75
00:03:09,068 --> 00:03:11,888
the next sweep through the game because

76
00:03:10,449 --> 00:03:14,290
we want to start making some bigger

77
00:03:11,889 --> 00:03:15,519
changes here and we'll just sort of talk

78
00:03:14,289 --> 00:03:16,929
about those are I mentioned them briefly

79
00:03:15,519 --> 00:03:19,150
last weekend sort of what the options

80
00:03:16,930 --> 00:03:22,229
are but we're gonna have to pick a big

81
00:03:19,150 --> 00:03:24,729
thing to do today and go from there um

82
00:03:22,229 --> 00:03:26,949
so if you take a look at the current

83
00:03:24,729 --> 00:03:30,280
state of the game you can see the stuff

84
00:03:26,949 --> 00:03:32,769
that we added last last week is these

85
00:03:30,280 --> 00:03:35,500
aprons as we pull out here you can see

86
00:03:32,769 --> 00:03:38,199
how we've sort of created an external

87
00:03:35,500 --> 00:03:40,419
area around where the player is this

88
00:03:38,199 --> 00:03:42,250
looks smaller than here it's actually

89
00:03:40,419 --> 00:03:44,469
not if that's just because it's not

90
00:03:42,250 --> 00:03:46,930
paged in so if you see as I move the

91
00:03:44,469 --> 00:03:49,239
viewable region over you can see that it

92
00:03:46,930 --> 00:03:52,629
paged in more of it so it's always at

93
00:03:49,239 --> 00:03:54,579
the moment in eight wide apron that we

94
00:03:52,628 --> 00:03:56,348
just sort of hard-coded to that number

95
00:03:54,579 --> 00:03:57,849
but we can change that number we don't

96
00:03:56,348 --> 00:04:00,668
really know exactly what we want it to

97
00:03:57,848 --> 00:04:03,098
be so we can just always adjust it as

98
00:04:00,669 --> 00:04:05,019
necessary but anyway that apron now

99
00:04:03,098 --> 00:04:08,018
exists everywhere in the world that

100
00:04:05,019 --> 00:04:10,060
rooms don't on the top floor which is at

101
00:04:08,019 --> 00:04:12,158
least something we wanted and we could

102
00:04:10,060 --> 00:04:13,359
add them to any other floor it's pretty

103
00:04:12,158 --> 00:04:16,298
free for them the way the system works

104
00:04:13,359 --> 00:04:19,079
and so we kind of now have the ability

105
00:04:16,298 --> 00:04:22,239
to control all of that and that's good

106
00:04:19,079 --> 00:04:24,788
so now that we have that taken care of

107
00:04:22,240 --> 00:04:27,370
that sort of ability to add stuff

108
00:04:24,788 --> 00:04:30,668
externally I want to

109
00:04:27,370 --> 00:04:34,629
tackle the rest of the world solidity

110
00:04:30,668 --> 00:04:36,339
issues that we have right and so the to

111
00:04:34,629 --> 00:04:38,379
world solidity issues that we have at

112
00:04:36,339 --> 00:04:41,409
the moment that I'd like to to tackle

113
00:04:38,379 --> 00:04:43,449
are first of all we've got the lighting

114
00:04:41,410 --> 00:04:44,830
we have to finish the lighting that's

115
00:04:43,449 --> 00:04:47,168
going to be a major undertaking that'll

116
00:04:44,829 --> 00:04:49,569
take several weeks because that's got to

117
00:04:47,168 --> 00:04:51,310
go from being kind of like a okay little

118
00:04:49,569 --> 00:04:52,629
system we worked out to being something

119
00:04:51,310 --> 00:04:54,160
that's industrial-strength like right

120
00:04:52,629 --> 00:04:56,469
now you can see it only operates on a

121
00:04:54,160 --> 00:04:57,939
very small area that's largely just due

122
00:04:56,470 --> 00:05:00,310
to performance issues we haven't

123
00:04:57,939 --> 00:05:04,209
addressed how we're gonna make it more

124
00:05:00,310 --> 00:05:05,800
efficient right and so we have to take

125
00:05:04,209 --> 00:05:07,599
that system and make it something that

126
00:05:05,800 --> 00:05:11,168
can just run on the whole visible area

127
00:05:07,600 --> 00:05:13,180
all the time and be nice and fast and we

128
00:05:11,168 --> 00:05:15,579
have to produce more usable results

129
00:05:13,180 --> 00:05:18,220
right now we really are only tracing

130
00:05:15,579 --> 00:05:19,959
panels and the consequence of that is we

131
00:05:18,220 --> 00:05:22,570
don't really have any way to sample the

132
00:05:19,959 --> 00:05:24,819
lighting for our sprites it would be

133
00:05:22,569 --> 00:05:27,009
pretty easy for us to run sprites

134
00:05:24,819 --> 00:05:29,589
through a lighting pass but right now we

135
00:05:27,009 --> 00:05:33,399
can't do so because we just don't have

136
00:05:29,589 --> 00:05:36,038
information available for that right and

137
00:05:33,399 --> 00:05:38,319
so we need to deal with the lighting and

138
00:05:36,038 --> 00:05:40,959
the other thing I would like to do again

139
00:05:38,319 --> 00:05:43,569
for world solidity purposes is I would

140
00:05:40,959 --> 00:05:46,509
like to go ahead and get ground cover in

141
00:05:43,569 --> 00:05:48,519
there so when you look outside when we

142
00:05:46,509 --> 00:05:51,399
go into the forest areas or into those

143
00:05:48,519 --> 00:05:54,219
aprons one thing you can see is there's

144
00:05:51,399 --> 00:05:56,349
nothing on those tiles the idea was that

145
00:05:54,220 --> 00:05:58,450
we would have sort of grasses and stuff

146
00:05:56,350 --> 00:06:01,240
in areas that are supposed to be

147
00:05:58,449 --> 00:06:05,949
external like these we would not simply

148
00:06:01,240 --> 00:06:08,288
have a tile that was you know a green

149
00:06:05,949 --> 00:06:10,829
wash we actually wanted to have some

150
00:06:08,288 --> 00:06:13,959
little like you know flowers and grass

151
00:06:10,829 --> 00:06:16,029
fronds and stuff like that that we would

152
00:06:13,959 --> 00:06:18,668
sort of stack in there and so that it

153
00:06:16,029 --> 00:06:21,728
would make it a little you know more

154
00:06:18,668 --> 00:06:25,240
clear what was you know just to give it

155
00:06:21,728 --> 00:06:28,240
more character right and so that's the

156
00:06:25,240 --> 00:06:31,030
other thing that we want to do and the

157
00:06:28,240 --> 00:06:34,689
thing about these two world solidity

158
00:06:31,029 --> 00:06:36,609
things I think once we have that there's

159
00:06:34,689 --> 00:06:39,848
maybe one more thing we would want to do

160
00:06:36,610 --> 00:06:41,110
which is to start putting you know trees

161
00:06:39,848 --> 00:06:43,120
and stuff out into the

162
00:06:41,110 --> 00:06:44,530
apron which is pretty simple we already

163
00:06:43,120 --> 00:06:46,629
have the ability of this place tree so

164
00:06:44,529 --> 00:06:49,169
it'd just be a matter of running some

165
00:06:46,629 --> 00:06:52,959
kind of a simple process to scatter them

166
00:06:49,170 --> 00:06:54,850
around out here in fact you know we

167
00:06:52,959 --> 00:06:57,250
could just do that right now and have

168
00:06:54,850 --> 00:06:59,410
that be done so maybe we'll do that but

169
00:06:57,250 --> 00:07:01,149
point being ground cover is a major

170
00:06:59,410 --> 00:07:05,500
thing and lighting is a major thing both

171
00:07:01,149 --> 00:07:09,399
of which we have to address and then

172
00:07:05,500 --> 00:07:12,970
once we've got that done I feel like at

173
00:07:09,399 --> 00:07:19,509
that point we have sort of gotten to the

174
00:07:12,970 --> 00:07:22,180
to the level where it's fairly flush

175
00:07:19,509 --> 00:07:24,099
right it's it's like I don't think

176
00:07:22,180 --> 00:07:27,090
there's anything else we need in terms

177
00:07:24,100 --> 00:07:31,390
of world solidity it would feel like

178
00:07:27,089 --> 00:07:34,539
you're playing a game and not like a

179
00:07:31,389 --> 00:07:36,490
prototype right and that's really where

180
00:07:34,540 --> 00:07:38,290
I'd like to be on that so you know

181
00:07:36,490 --> 00:07:40,210
getting to the point where when you just

182
00:07:38,290 --> 00:07:41,920
look at things they're solid and again

183
00:07:40,209 --> 00:07:44,259
like I said a lot we've got a lot of

184
00:07:41,920 --> 00:07:47,710
that right most of the things in here

185
00:07:44,259 --> 00:07:51,610
look like they're solid now I like the

186
00:07:47,709 --> 00:07:53,649
camera motion looks solid and the sort

187
00:07:51,610 --> 00:07:55,480
of the way that we're focusing on things

188
00:07:53,649 --> 00:07:59,409
makes it look like it's a world there's

189
00:07:55,480 --> 00:08:01,270
not obvious empty parts anymore all the

190
00:07:59,410 --> 00:08:03,910
stuff looks stable and clean there's no

191
00:08:01,269 --> 00:08:05,500
crispy edges or anything so I feel like

192
00:08:03,910 --> 00:08:07,270
we've done a good job look with the

193
00:08:05,500 --> 00:08:09,009
world solidity and so it's really just

194
00:08:07,269 --> 00:08:13,329
the lighting ground cover the two things

195
00:08:09,009 --> 00:08:14,529
that I think remain so I'm gonna go add

196
00:08:13,329 --> 00:08:16,149
the trees today I think that's probably

197
00:08:14,529 --> 00:08:17,859
the easiest thing to do but then I think

198
00:08:16,149 --> 00:08:21,129
we want to start on on those two issues

199
00:08:17,860 --> 00:08:22,720
and I'm actually as opposed to tackling

200
00:08:21,129 --> 00:08:29,079
them separately I think they actually

201
00:08:22,720 --> 00:08:31,450
are sort of part of one single update in

202
00:08:29,079 --> 00:08:34,600
a weird way and the reason that I say

203
00:08:31,449 --> 00:08:38,189
that is right now we haven't really done

204
00:08:34,600 --> 00:08:42,330
the work in our entity systems to

205
00:08:38,190 --> 00:08:44,200
properly deal with dynamic versus

206
00:08:42,330 --> 00:08:48,460
persistent state or I should say

207
00:08:44,200 --> 00:08:52,750
transient versus persistent state what I

208
00:08:48,460 --> 00:08:54,700
mean by that is that even right now the

209
00:08:52,750 --> 00:08:56,950
lighting information that's cached

210
00:08:54,700 --> 00:08:59,740
from frame to frame that lighting

211
00:08:56,950 --> 00:09:03,370
information is cached forever so for

212
00:08:59,740 --> 00:09:06,220
example if you look at what happens if i

213
00:09:03,370 --> 00:09:08,620
zoom out here and I move around you see

214
00:09:06,220 --> 00:09:10,899
how the lighting region follows me right

215
00:09:08,620 --> 00:09:12,850
that lighting region is computing

216
00:09:10,899 --> 00:09:15,610
lighting for all of the entities that

217
00:09:12,850 --> 00:09:19,269
are inside that that sort of rectangular

218
00:09:15,610 --> 00:09:21,399
it's actually a right rectangular prism

219
00:09:19,269 --> 00:09:25,620
it extends downward as well so it's

220
00:09:21,399 --> 00:09:28,509
actually not flat but you get the idea

221
00:09:25,620 --> 00:09:30,970
so what's happening with the lighting

222
00:09:28,509 --> 00:09:34,509
when it's getting computed there is that

223
00:09:30,970 --> 00:09:35,980
that area is storing lighting

224
00:09:34,509 --> 00:09:37,629
information into those entities it's

225
00:09:35,980 --> 00:09:40,050
actually cache from frame to frame and

226
00:09:37,629 --> 00:09:42,519
that's necessary for mmm-hmm

227
00:09:40,049 --> 00:09:45,009
for pretty much any advanced lighting

228
00:09:42,519 --> 00:09:46,629
algorithm you need to store results from

229
00:09:45,009 --> 00:09:49,240
frame to frame because if you don't

230
00:09:46,629 --> 00:09:51,970
store results from frame to frame you

231
00:09:49,240 --> 00:09:54,340
end up in a situation where you can't

232
00:09:51,970 --> 00:09:55,960
smooth out the noise inherent in

233
00:09:54,340 --> 00:09:58,960
something as complicated as lighting

234
00:09:55,960 --> 00:10:00,580
sampling and so we need to store that

235
00:09:58,960 --> 00:10:04,480
information but right now it's literally

236
00:10:00,580 --> 00:10:05,800
stored forever so as I leave it's

237
00:10:04,480 --> 00:10:07,300
getting stored like these entities out

238
00:10:05,799 --> 00:10:09,459
here are still storing that lighting

239
00:10:07,299 --> 00:10:11,169
information for no real reason because

240
00:10:09,460 --> 00:10:13,450
we could just start recomputing it as we

241
00:10:11,169 --> 00:10:15,969
get closer to them so we at the very

242
00:10:13,450 --> 00:10:18,160
least these things out here that got

243
00:10:15,970 --> 00:10:22,540
paged out like the entities aren't even

244
00:10:18,159 --> 00:10:25,269
in the simulation region anymore even

245
00:10:22,539 --> 00:10:29,289
those entities are storing the lighting

246
00:10:25,269 --> 00:10:31,000
information so at the very least we only

247
00:10:29,289 --> 00:10:32,439
really want lighting information for

248
00:10:31,000 --> 00:10:34,029
things in the simulation region but

249
00:10:32,440 --> 00:10:36,250
probably we only need it for things in

250
00:10:34,029 --> 00:10:38,079
the visual reason or at least a like a

251
00:10:36,250 --> 00:10:39,850
small apron around the visible region

252
00:10:38,080 --> 00:10:47,170
wherever we want our lighting startup to

253
00:10:39,850 --> 00:10:49,029
be right and so if you think about how

254
00:10:47,169 --> 00:10:50,769
this interacts with ground cover what's

255
00:10:49,029 --> 00:10:53,019
gonna happen with ground cover is sort

256
00:10:50,769 --> 00:10:54,850
of the same thing I really don't want to

257
00:10:53,019 --> 00:10:56,919
store the information about how all the

258
00:10:54,850 --> 00:10:59,080
grass is placed on each individual

259
00:10:56,919 --> 00:11:01,059
entity forever because I only really

260
00:10:59,080 --> 00:11:03,280
need to know it when I can see it right

261
00:11:01,059 --> 00:11:05,109
when I'm in here I need to know the

262
00:11:03,279 --> 00:11:07,120
grass placement for every entity that's

263
00:11:05,110 --> 00:11:08,480
on the screen but as soon as I move up

264
00:11:07,120 --> 00:11:10,879
right

265
00:11:08,480 --> 00:11:12,649
and I and this room fades out of you I

266
00:11:10,879 --> 00:11:13,189
don't need to know where the grass is on

267
00:11:12,649 --> 00:11:16,159
it anymore

268
00:11:13,190 --> 00:11:17,449
right I can recompute that once I come

269
00:11:16,159 --> 00:11:19,519
back here as long as I have a way to

270
00:11:17,448 --> 00:11:21,979
regenerate this sequence of grass

271
00:11:19,519 --> 00:11:23,990
placement for any given tile I can just

272
00:11:21,980 --> 00:11:27,800
recompute it when it comes into view so

273
00:11:23,990 --> 00:11:29,930
again the same exact thing is going on

274
00:11:27,799 --> 00:11:32,120
we sort of have this idea that there's

275
00:11:29,929 --> 00:11:34,458
probably information we want to use and

276
00:11:32,120 --> 00:11:36,259
store in fact it may be information we

277
00:11:34,458 --> 00:11:38,629
even want to store on the graphics card

278
00:11:36,259 --> 00:11:42,679
right we may want that information to be

279
00:11:38,629 --> 00:11:46,039
persistent in a way that the graphics

280
00:11:42,679 --> 00:11:48,379
card is actually able to just retain all

281
00:11:46,039 --> 00:11:50,360
of the point information that's relevant

282
00:11:48,379 --> 00:11:53,360
to it right so that we don't have to

283
00:11:50,360 --> 00:11:55,070
send it down every frame so even that

284
00:11:53,360 --> 00:11:57,949
piece of information is another good

285
00:11:55,070 --> 00:11:59,750
such a good example of why this

286
00:11:57,948 --> 00:12:04,009
information needs to be managed more

287
00:11:59,750 --> 00:12:07,328
carefully and so when I'm getting at

288
00:12:04,009 --> 00:12:10,549
this extremely long-winded explanation

289
00:12:07,328 --> 00:12:14,259
is that what we need to attack both

290
00:12:10,549 --> 00:12:18,849
problems is a new understanding of

291
00:12:14,259 --> 00:12:25,639
entity state that gets persisted during

292
00:12:18,850 --> 00:12:28,850
its lifetime on the screen or nearby and

293
00:12:25,639 --> 00:12:33,230
then that gets thrown away in the case

294
00:12:28,850 --> 00:12:36,709
where we are sort of paging it out and

295
00:12:33,230 --> 00:12:39,769
so our world system gives us a very

296
00:12:36,708 --> 00:12:42,528
convenient way to do this our world

297
00:12:39,769 --> 00:12:48,049
system itself understands this concept

298
00:12:42,528 --> 00:12:50,929
very well it has a it already has the

299
00:12:48,049 --> 00:12:53,479
ability to look up things by chunk and

300
00:12:50,929 --> 00:12:57,588
these are stored in chunks and those

301
00:12:53,480 --> 00:12:59,720
chunks get unpacked into the simulation

302
00:12:57,589 --> 00:13:02,240
region already right that's something

303
00:12:59,720 --> 00:13:04,060
that we already do and so all we would

304
00:13:02,240 --> 00:13:08,509
really need to be doing in this case is

305
00:13:04,059 --> 00:13:13,068
we just need some way of having that

306
00:13:08,509 --> 00:13:15,828
world system store complete data so all

307
00:13:13,068 --> 00:13:18,469
the lighting information all the ground

308
00:13:15,828 --> 00:13:20,629
cover information gets pushed into the

309
00:13:18,470 --> 00:13:22,370
world system but instead of the world

310
00:13:20,629 --> 00:13:24,438
system treating that it for me

311
00:13:22,370 --> 00:13:26,179
as permanent and writing it back into

312
00:13:24,438 --> 00:13:28,519
the world chunks where the information

313
00:13:26,179 --> 00:13:31,549
is stored for the entire length of the

314
00:13:28,519 --> 00:13:34,188
game what we can do instead is hold it

315
00:13:31,549 --> 00:13:38,990
in a effectively like a level 2 cache if

316
00:13:34,188 --> 00:13:41,558
you will that then if you ask for it

317
00:13:38,990 --> 00:13:44,120
again you'll get it back but if you

318
00:13:41,558 --> 00:13:46,850
constantly are pushing information into

319
00:13:44,120 --> 00:13:49,970
there right and when you pull it out we

320
00:13:46,850 --> 00:13:51,980
mark it as being like recently used when

321
00:13:49,970 --> 00:13:53,930
you eventually try to push in too much

322
00:13:51,980 --> 00:13:56,539
more than the total storage that we've

323
00:13:53,929 --> 00:13:58,638
allocated for that level 2 cache we just

324
00:13:56,539 --> 00:14:01,818
purge whatever the least recently used

325
00:13:58,639 --> 00:14:05,930
thing what was and reuse that space for

326
00:14:01,818 --> 00:14:08,568
the new information right and so putting

327
00:14:05,929 --> 00:14:11,359
it into a cache in this way would allow

328
00:14:08,568 --> 00:14:16,578
us to do exactly what we want

329
00:14:11,360 --> 00:14:19,249
only store this information for things

330
00:14:16,578 --> 00:14:21,588
that are actually being used in the

331
00:14:19,249 --> 00:14:23,870
visual set or that have been recently

332
00:14:21,589 --> 00:14:28,249
used in the visual set and purge those

333
00:14:23,870 --> 00:14:32,778
things that aren't we can also tie this

334
00:14:28,249 --> 00:14:34,909
system to GPU information updates such

335
00:14:32,778 --> 00:14:38,629
that if we would like we can actually

336
00:14:34,909 --> 00:14:40,759
store things or rather allocate space on

337
00:14:38,629 --> 00:14:44,329
the GPU for things like lighting

338
00:14:40,759 --> 00:14:46,249
information and grass information based

339
00:14:44,328 --> 00:14:53,178
on whether or not the thing is in the l2

340
00:14:46,249 --> 00:14:55,159
cache of the world right the w2 cache so

341
00:14:53,178 --> 00:14:57,259
that's really what we're looking to do

342
00:14:55,159 --> 00:15:00,588
here and so that's why I say these two

343
00:14:57,259 --> 00:15:01,970
updates are really kind of closely

344
00:15:00,589 --> 00:15:04,339
coupled because they both need

345
00:15:01,970 --> 00:15:06,528
effectively the same sort of thing and I

346
00:15:04,339 --> 00:15:09,529
think we can sort of kill two birds with

347
00:15:06,528 --> 00:15:11,419
one stone at least in terms of the

348
00:15:09,528 --> 00:15:14,178
structural implications of what we need

349
00:15:11,419 --> 00:15:16,969
to do and the fact that the lighting

350
00:15:14,178 --> 00:15:19,938
will require sort of a different set of

351
00:15:16,970 --> 00:15:23,300
work that has more to do with improving

352
00:15:19,938 --> 00:15:25,549
the algorithm we're using doesn't really

353
00:15:23,299 --> 00:15:27,979
change the fact that it can still

354
00:15:25,549 --> 00:15:30,708
benefit from this idea that certain

355
00:15:27,980 --> 00:15:33,949
pieces of information are stored in sort

356
00:15:30,708 --> 00:15:34,549
of a second level of cache inside the

357
00:15:33,948 --> 00:15:37,729
world

358
00:15:34,549 --> 00:15:39,469
so let's start out just for a warm-up

359
00:15:37,730 --> 00:15:42,350
let's start out with it something easier

360
00:15:39,470 --> 00:15:45,560
let's go into the the world generation

361
00:15:42,350 --> 00:15:47,090
system and just add those trees you know

362
00:15:45,559 --> 00:15:49,879
as we're sort of doing this generate

363
00:15:47,090 --> 00:15:51,940
apron I'm just gonna do a really stupid

364
00:15:49,879 --> 00:15:54,379
version where we place a tree down there

365
00:15:51,940 --> 00:15:56,450
you can see in here we've got a

366
00:15:54,379 --> 00:15:59,629
situation where we add one of these

367
00:15:56,450 --> 00:16:01,520
trees I'm going to pull that out just

368
00:15:59,629 --> 00:16:04,879
because you know there's no reason to

369
00:16:01,519 --> 00:16:09,490
write the same code twice I'm just gonna

370
00:16:04,879 --> 00:16:14,210
go ahead and say place tree or you know

371
00:16:09,490 --> 00:16:15,740
maybe like add tree or something we're

372
00:16:14,210 --> 00:16:16,310
not really placing it we already know

373
00:16:15,740 --> 00:16:19,310
where it is

374
00:16:16,309 --> 00:16:22,369
and so if we look here when we get into

375
00:16:19,309 --> 00:16:26,689
this place here is the information that

376
00:16:22,370 --> 00:16:29,600
we're doing and what I want to do is

377
00:16:26,690 --> 00:16:33,230
this add obstacle here where we're

378
00:16:29,600 --> 00:16:34,879
actually placing a thing I don't know I

379
00:16:33,230 --> 00:16:37,580
have to go look and make sure that the

380
00:16:34,879 --> 00:16:39,590
add optical call doesn't do anything

381
00:16:37,580 --> 00:16:42,440
else but we probably don't quite want

382
00:16:39,590 --> 00:16:44,030
this in both cases we probably want one

383
00:16:42,440 --> 00:16:45,920
thing that will add an obstacle in one

384
00:16:44,029 --> 00:16:48,740
case and another when we're just placing

385
00:16:45,919 --> 00:16:50,929
a generic tree can probably do some kind

386
00:16:48,740 --> 00:16:52,220
of a generic identity call so we're

387
00:16:50,929 --> 00:16:54,049
gonna look at that in a second and we'll

388
00:16:52,220 --> 00:16:55,550
see but basically what we're gonna do is

389
00:16:54,049 --> 00:16:58,939
have this add tree call do something

390
00:16:55,549 --> 00:17:00,949
here right and it'll do all this so to

391
00:16:58,940 --> 00:17:03,650
start with we can probably do something

392
00:17:00,950 --> 00:17:06,259
where add obstacle would work and again

393
00:17:03,649 --> 00:17:08,690
maybe maybe we just really need these in

394
00:17:06,259 --> 00:17:11,299
here so you know maybe this is add tree

395
00:17:08,690 --> 00:17:13,700
tags or something like that and all you

396
00:17:11,299 --> 00:17:15,588
have to do is send this down right so

397
00:17:13,700 --> 00:17:26,088
you could say like okay here's the world

398
00:17:15,588 --> 00:17:28,549
generator and here's the entity and then

399
00:17:26,088 --> 00:17:30,529
later on we can customize this function

400
00:17:28,549 --> 00:17:32,359
by having parameters that we send down

401
00:17:30,529 --> 00:17:34,970
so that these things aren't random

402
00:17:32,359 --> 00:17:37,819
anymore they're you know actually geared

403
00:17:34,970 --> 00:17:41,299
towards whatever's in that area so let's

404
00:17:37,819 --> 00:17:45,889
go ahead and do this procedure if we

405
00:17:41,299 --> 00:17:48,139
want to add a tree in this code where

406
00:17:45,890 --> 00:17:50,960
we're sort of iterating over these tiles

407
00:17:48,140 --> 00:17:53,690
what I can do is say alright you know if

408
00:17:50,960 --> 00:17:55,600
some condition is true that's a random

409
00:17:53,690 --> 00:17:58,490
pick for now but maybe it would be more

410
00:17:55,599 --> 00:18:02,538
interesting later we're gonna add the

411
00:17:58,490 --> 00:18:04,429
tree tags to some kind of a tree here in

412
00:18:02,538 --> 00:18:08,089
order to create an entity I could just

413
00:18:04,429 --> 00:18:09,950
make one like so I don't know that

414
00:18:08,089 --> 00:18:11,778
there's anything I have to really do to

415
00:18:09,950 --> 00:18:14,690
it other than make sure that it's placed

416
00:18:11,778 --> 00:18:16,849
in the right location so that's pretty

417
00:18:14,690 --> 00:18:19,149
straightforward as well I don't really

418
00:18:16,849 --> 00:18:21,319
remember what the ground point rules are

419
00:18:19,148 --> 00:18:24,648
for this so we'll take a look in a

420
00:18:21,319 --> 00:18:27,888
second for those but we should actually

421
00:18:24,648 --> 00:18:30,199
have in fact get Minzy Center P we

422
00:18:27,888 --> 00:18:32,658
really just need to get max Z Center P

423
00:18:30,200 --> 00:18:35,778
here probably I don't really remember

424
00:18:32,659 --> 00:18:38,840
again exactly how this code wants to

425
00:18:35,778 --> 00:18:41,599
work but I think that's just the bottom

426
00:18:38,839 --> 00:18:44,689
point of the tile and so what we want to

427
00:18:41,599 --> 00:18:46,308
do here is just move that up so in fact

428
00:18:44,690 --> 00:18:48,830
if we look at how this is actually

429
00:18:46,308 --> 00:18:55,398
working let me set this collision volume

430
00:18:48,829 --> 00:18:58,009
here this volume where we do this get

431
00:18:55,398 --> 00:19:03,168
volume from Minzy and we pass the height

432
00:18:58,009 --> 00:19:05,869
right that gives us the exact offset I

433
00:19:03,169 --> 00:19:10,159
believe right so if this volume is

434
00:19:05,869 --> 00:19:12,349
relative to this location then we should

435
00:19:10,159 --> 00:19:16,669
be able to add this location to the

436
00:19:12,349 --> 00:19:20,089
maximum point of the volume and get the

437
00:19:16,669 --> 00:19:22,519
place where you would stand right I mean

438
00:19:20,089 --> 00:19:25,788
that I believe that's true anyway so if

439
00:19:22,519 --> 00:19:30,019
we sort of said here there was like a

440
00:19:25,788 --> 00:19:35,480
ground P and I said something like in

441
00:19:30,019 --> 00:19:37,069
fact like well I guess I don't see any

442
00:19:35,480 --> 00:19:38,870
obvious way to do this using this

443
00:19:37,069 --> 00:19:43,099
because this thing doesn't know how big

444
00:19:38,869 --> 00:19:45,969
that tile wants to be but if I was to

445
00:19:43,099 --> 00:19:45,969
say get max

446
00:19:47,299 --> 00:19:53,960
corner like so where we get the maximum

447
00:19:51,680 --> 00:19:59,120
for this volume and you know I could

448
00:19:53,960 --> 00:20:01,880
even say get Minzy center P so this

449
00:19:59,119 --> 00:20:10,699
actually we we could make an equivalent

450
00:20:01,880 --> 00:20:12,050
to this which is just that and that

451
00:20:10,700 --> 00:20:14,960
would actually give us exactly what we

452
00:20:12,049 --> 00:20:19,339
want right so all we have to do now just

453
00:20:14,960 --> 00:20:21,380
say whatever the the location is of this

454
00:20:19,339 --> 00:20:24,139
thing we know that we made it relative

455
00:20:21,380 --> 00:20:25,520
so let's just use the get maxius entropy

456
00:20:24,140 --> 00:20:27,950
for this volume and then we're done

457
00:20:25,519 --> 00:20:29,660
right and so if we're gonna place the

458
00:20:27,950 --> 00:20:31,549
entity on that ground P we should be

459
00:20:29,660 --> 00:20:33,529
able to just you know do it like this

460
00:20:31,549 --> 00:20:35,480
again I don't know if that's the right

461
00:20:33,529 --> 00:20:38,359
placement because I guess we haven't

462
00:20:35,480 --> 00:20:40,460
really done much work on figuring out

463
00:20:38,359 --> 00:20:43,759
how to create entity placement points

464
00:20:40,460 --> 00:20:46,490
but I believe that our convention so far

465
00:20:43,759 --> 00:20:48,859
has been to take the point that's on the

466
00:20:46,490 --> 00:20:50,990
ground where the entity is and treat

467
00:20:48,859 --> 00:20:56,059
that as the entity location so I'm gonna

468
00:20:50,990 --> 00:20:57,470
keep that for now alright and so what

469
00:20:56,059 --> 00:20:59,869
I'll do here is I'll just place a tree

470
00:20:57,470 --> 00:21:00,529
on everything for starters and we'll go

471
00:20:59,869 --> 00:21:02,149
from there

472
00:21:00,529 --> 00:21:05,269
I think this is all we really actually

473
00:21:02,150 --> 00:21:06,560
need to do to make this work I don't

474
00:21:05,269 --> 00:21:09,049
know why I call that entity instead of

475
00:21:06,559 --> 00:21:10,460
tree I think that's probably all we need

476
00:21:09,049 --> 00:21:12,139
to do because again these entities don't

477
00:21:10,460 --> 00:21:14,779
do anything they're just an inanimate

478
00:21:12,140 --> 00:21:21,259
object so I don't think we need to call

479
00:21:14,779 --> 00:21:22,670
anything else for them and we'll see

480
00:21:21,259 --> 00:21:24,589
although the fact that I've seen no

481
00:21:22,670 --> 00:21:26,300
trees is not a good sign since they were

482
00:21:24,589 --> 00:21:28,869
supposed to be trees everywhere and now

483
00:21:26,299 --> 00:21:28,869
there isn't

484
00:21:31,289 --> 00:21:46,960
what happened what did I do wrong

485
00:21:35,279 --> 00:21:51,730
um oh I I know what I did wrong

486
00:21:46,960 --> 00:21:55,559
I did it I literally did exactly what

487
00:21:51,730 --> 00:21:57,759
wait why isn't why isn't that call found

488
00:21:55,559 --> 00:21:58,899
where's that add obstacle call I

489
00:21:57,759 --> 00:21:59,440
literally said I was gonna look at it

490
00:21:58,900 --> 00:22:02,100
and I didn't

491
00:21:59,440 --> 00:22:04,960
what is add why is add obstacle not

492
00:22:02,099 --> 00:22:09,279
something that's been marked as a

493
00:22:04,960 --> 00:22:10,720
function what's going on there oh it's

494
00:22:09,279 --> 00:22:13,960
just one of these Jannetty callbacks

495
00:22:10,720 --> 00:22:15,910
that's why all right so what happens

496
00:22:13,960 --> 00:22:18,910
here is we didn't add any pieces of

497
00:22:15,910 --> 00:22:21,910
scenery to it and so we kind of do need

498
00:22:18,910 --> 00:22:24,009
a thing that does this part of the call

499
00:22:21,910 --> 00:22:26,070
so adding the tree is sort of an actual

500
00:22:24,009 --> 00:22:29,440
thing we do need to do here right and

501
00:22:26,069 --> 00:22:31,059
this occupying part where we passed you

502
00:22:29,440 --> 00:22:32,980
know it gets the standing on bit I

503
00:22:31,059 --> 00:22:36,399
assumed he could just passion all for

504
00:22:32,980 --> 00:22:38,049
that if we wanted to so I feel like

505
00:22:36,400 --> 00:22:40,259
that's probably fine now

506
00:22:38,049 --> 00:22:42,460
unfortunately like I said I don't know

507
00:22:40,259 --> 00:22:43,990
that we really want to though because we

508
00:22:42,460 --> 00:22:45,190
don't really need the colliding flag it

509
00:22:43,990 --> 00:22:47,289
doesn't need to participate in

510
00:22:45,190 --> 00:22:48,850
collisions at all although you know I

511
00:22:47,289 --> 00:22:51,849
mean maybe we could argue that it should

512
00:22:48,849 --> 00:22:53,919
I don't really know but so if we

513
00:22:51,849 --> 00:22:59,199
actually look in here let's just say

514
00:22:53,920 --> 00:23:03,759
that this add piece call and I'll you

515
00:22:59,200 --> 00:23:05,620
know we want all of this stuff yes he

516
00:23:03,759 --> 00:23:07,450
see this placement wouldn't work because

517
00:23:05,619 --> 00:23:09,219
this is just a standing on port would

518
00:23:07,450 --> 00:23:10,840
work all right so I'm gonna I'm gonna

519
00:23:09,220 --> 00:23:13,150
basically pull the common part of this

520
00:23:10,839 --> 00:23:16,289
out which is like we've got that add

521
00:23:13,150 --> 00:23:22,840
obstacle I'm gonna have like an add

522
00:23:16,289 --> 00:23:24,509
inanimate and we're just gonna have this

523
00:23:22,839 --> 00:23:26,859
stuff here that would normally be there

524
00:23:24,509 --> 00:23:30,960
this doesn't need to be there this

525
00:23:26,859 --> 00:23:30,959
doesn't need to be here but these do

526
00:23:31,289 --> 00:23:36,819
something like that and so when you do

527
00:23:34,269 --> 00:23:39,690
an ad in animates and I do want to

528
00:23:36,819 --> 00:23:39,689
return this as well

529
00:23:40,430 --> 00:23:48,330
it'll do just this part similarly we

530
00:23:45,299 --> 00:23:49,950
could in fact this part here would work

531
00:23:48,329 --> 00:23:52,289
as well so we could have it so that you

532
00:23:49,950 --> 00:23:55,200
say add an animate and you say where you

533
00:23:52,289 --> 00:23:58,200
want it to be I don't know that we need

534
00:23:55,200 --> 00:24:02,580
anything else from there other than the

535
00:23:58,200 --> 00:24:05,400
regions so I think it's just this right

536
00:24:02,579 --> 00:24:07,679
and so if we were to do this call all we

537
00:24:05,400 --> 00:24:10,290
would have to do is say hey when you

538
00:24:07,680 --> 00:24:13,410
actually do one of these call add

539
00:24:10,289 --> 00:24:15,119
inanimate first with the sim region and

540
00:24:13,410 --> 00:24:16,710
the location you wanted the thing to be

541
00:24:15,119 --> 00:24:18,299
and of course we do know that the

542
00:24:16,710 --> 00:24:21,990
location where you wanted the thing to

543
00:24:18,299 --> 00:24:23,970
be it's this right so we'll do that and

544
00:24:21,990 --> 00:24:25,950
then this extra stuff here that you

545
00:24:23,970 --> 00:24:27,029
wanted to do well you can do that as

546
00:24:25,950 --> 00:24:29,880
well

547
00:24:27,029 --> 00:24:31,619
for the adding the obstacle part but at

548
00:24:29,880 --> 00:24:35,160
least now we've got the ability to do an

549
00:24:31,619 --> 00:24:39,869
add inanimate that you know is a

550
00:24:35,160 --> 00:24:42,210
callback for that right and so let's go

551
00:24:39,869 --> 00:24:44,069
ahead and say that that's correct we may

552
00:24:42,210 --> 00:24:46,769
want to make this a create entity call

553
00:24:44,069 --> 00:24:48,629
as well and chain create entity to take

554
00:24:46,769 --> 00:24:50,039
something else besides those but you

555
00:24:48,630 --> 00:24:52,980
know for now I'm not gonna actually do

556
00:24:50,039 --> 00:24:54,779
that so now we can actually call this

557
00:24:52,980 --> 00:24:56,220
and I think that will solve the problem

558
00:24:54,779 --> 00:24:57,629
we having where we didn't assign a neat

559
00:24:56,220 --> 00:24:59,940
image to it so there were trees

560
00:24:57,630 --> 00:25:01,260
everywhere but we couldn't see them so

561
00:24:59,940 --> 00:25:07,009
what we'd like to do now is just say

562
00:25:01,259 --> 00:25:07,009
yeah let's fix that right so make this

563
00:25:11,440 --> 00:25:18,029
we want all this thing to create the

564
00:25:14,410 --> 00:25:21,100
tree set it up add the tags etc

565
00:25:18,029 --> 00:25:27,910
everything should be good

566
00:25:21,099 --> 00:25:31,000
rediff finished a formal perimeter P let

567
00:25:27,910 --> 00:25:34,150
me go back to that code so the problem

568
00:25:31,000 --> 00:25:37,420
there is that when we are saying you

569
00:25:34,150 --> 00:25:40,840
know this part right here I guess it

570
00:25:37,420 --> 00:25:43,960
gets past a p-value as well I'm gonna

571
00:25:40,839 --> 00:25:48,240
look for the gen create entity spec I

572
00:25:43,960 --> 00:25:50,920
just want to see what that looks like so

573
00:25:48,240 --> 00:25:53,410
it looks like it's the it's got a

574
00:25:50,920 --> 00:25:56,680
traversable reference here and a p-value

575
00:25:53,410 --> 00:25:58,480
that's being passed what's interesting

576
00:25:56,680 --> 00:26:02,350
is I don't know that that p-value is

577
00:25:58,480 --> 00:26:04,059
ever getting used so it's a little bit

578
00:26:02,349 --> 00:26:07,929
odd like if you look at what's going on

579
00:26:04,059 --> 00:26:10,000
here you can see the p-value gets used

580
00:26:07,930 --> 00:26:12,279
in one case but the standing on gets

581
00:26:10,000 --> 00:26:16,180
used in other cases that seems a little

582
00:26:12,279 --> 00:26:22,359
janky to me and I would imagine that we

583
00:26:16,180 --> 00:26:26,340
really need this to be we probably

584
00:26:22,359 --> 00:26:31,269
really we need that to be more robust

585
00:26:26,339 --> 00:26:33,069
than that just just looking at it so you

586
00:26:31,269 --> 00:26:35,559
know my assumption is probably what

587
00:26:33,069 --> 00:26:37,929
should happen is like when we do these

588
00:26:35,559 --> 00:26:39,940
things instead of them getting the

589
00:26:37,930 --> 00:26:42,190
instead of calling this code we should

590
00:26:39,940 --> 00:26:43,210
probably just add the p-value directly

591
00:26:42,190 --> 00:26:46,650
in here in other words we should

592
00:26:43,210 --> 00:26:46,650
probably do something like this

593
00:26:53,009 --> 00:27:00,089
you'll have to forgive me for skipping

594
00:26:54,470 --> 00:27:01,920
through these I just wanted to take a

595
00:27:00,089 --> 00:27:10,199
look so yeah you can see here how we're

596
00:27:01,920 --> 00:27:11,910
kind of doing that yeah so what we want

597
00:27:10,200 --> 00:27:13,920
here you can see that there's there's

598
00:27:11,910 --> 00:27:16,050
sort of two general flavors for how this

599
00:27:13,920 --> 00:27:18,029
is called one is I want to place a nosey

600
00:27:16,049 --> 00:27:22,529
on this point the other is I want to

601
00:27:18,029 --> 00:27:24,149
place an entity kind of what's where I'm

602
00:27:22,529 --> 00:27:25,200
looking for I want to place it on to

603
00:27:24,150 --> 00:27:27,540
something that's supposed to be standing

604
00:27:25,200 --> 00:27:29,940
on like this right so you get the you

605
00:27:27,539 --> 00:27:32,579
get this call and you only need one or

606
00:27:29,940 --> 00:27:34,110
the other right in fact you can see in

607
00:27:32,579 --> 00:27:36,029
this case it's kind of doing it the

608
00:27:34,109 --> 00:27:37,949
wrong way it's using the MV P equals P

609
00:27:36,029 --> 00:27:39,480
what it shouldn't be because it's

610
00:27:37,950 --> 00:27:41,400
supposed to get a standing on instead

611
00:27:39,480 --> 00:27:43,980
you know and so on so I think we want to

612
00:27:41,400 --> 00:27:46,530
kind of solidify that part and so what

613
00:27:43,980 --> 00:27:50,279
I'd like to do is I'd like to introduce

614
00:27:46,529 --> 00:27:52,920
two ways of calling sort of these

615
00:27:50,279 --> 00:27:55,500
functions right and so if you're using

616
00:27:52,920 --> 00:27:58,710
like the the Jenna T thing you've got

617
00:27:55,500 --> 00:28:00,660
this gen entity creator bit here so what

618
00:27:58,710 --> 00:28:04,319
I want to do is something maybe like

619
00:28:00,660 --> 00:28:07,980
this we've got one version which it's

620
00:28:04,319 --> 00:28:13,799
gonna look like this that's going to be

621
00:28:07,980 --> 00:28:15,480
like you know Gen entity at P and then

622
00:28:13,799 --> 00:28:22,169
we're gonna have another one that's like

623
00:28:15,480 --> 00:28:24,180
Gen entity at traversable and so you can

624
00:28:22,170 --> 00:28:25,980
have two ways of calling it and

625
00:28:24,180 --> 00:28:29,100
depending on which way you call it

626
00:28:25,980 --> 00:28:33,539
you'll get a different way of doing

627
00:28:29,099 --> 00:28:37,169
things right so in here we'll call the

628
00:28:33,539 --> 00:28:40,049
creator function for whatever it is that

629
00:28:37,170 --> 00:28:42,240
we're doing will pass the sim region so

630
00:28:40,049 --> 00:28:45,149
you need to tell us that and then in

631
00:28:42,240 --> 00:28:47,250
this case you'll pass the P and in this

632
00:28:45,150 --> 00:28:50,360
case you'll pass the traversable

633
00:28:47,250 --> 00:28:50,359
reference right

634
00:28:51,250 --> 00:28:57,339
and in either case once use my head out

635
00:28:53,919 --> 00:29:00,309
of the way in either case we will call

636
00:28:57,339 --> 00:29:03,308
that function but in one case we'll use

637
00:29:00,308 --> 00:29:08,009
the p-value directly and in the other

638
00:29:03,308 --> 00:29:08,009
case we will use the p-value indirectly

639
00:29:08,669 --> 00:29:18,909
make sense and in both cases we'll

640
00:29:16,119 --> 00:29:20,619
return the result but in one case such

641
00:29:18,909 --> 00:29:22,990
as this one we also have a little bit of

642
00:29:20,619 --> 00:29:24,939
additional work we need to do there all

643
00:29:22,990 --> 00:29:25,720
right so hopefully this makes sense what

644
00:29:24,940 --> 00:29:27,190
I'm talking about

645
00:29:25,720 --> 00:29:30,640
it's just basically allowing you to use

646
00:29:27,190 --> 00:29:35,110
this in either way so the occupying part

647
00:29:30,640 --> 00:29:37,120
needs to come in here and the get some

648
00:29:35,109 --> 00:29:40,439
space reversible part needs to come in

649
00:29:37,119 --> 00:29:44,469
here but then I think we're good to go

650
00:29:40,440 --> 00:29:50,919
right looks like we call this standing

651
00:29:44,470 --> 00:29:54,490
on and so I think that's all correct

652
00:29:50,919 --> 00:29:56,830
looks good to me and so now this stuff

653
00:29:54,490 --> 00:29:59,890
doesn't need to happen anymore so entity

654
00:29:56,829 --> 00:30:02,859
P can just be the p-value what we could

655
00:29:59,890 --> 00:30:06,130
also do is actually looking at these I

656
00:30:02,859 --> 00:30:09,189
feel like it's just wasted code anyway

657
00:30:06,130 --> 00:30:12,960
and so one might argue that that can

658
00:30:09,190 --> 00:30:16,210
even be abstracted out more or rather

659
00:30:12,960 --> 00:30:18,460
pulled out to a higher level right so if

660
00:30:16,210 --> 00:30:21,220
I literally get rid of the even the

661
00:30:18,460 --> 00:30:25,650
entity P part in its entirely this

662
00:30:21,220 --> 00:30:30,279
entirety right that just looks like this

663
00:30:25,650 --> 00:30:33,250
and so that code can now be used in two

664
00:30:30,279 --> 00:30:35,859
different ways depending on what's going

665
00:30:33,250 --> 00:30:38,109
on and the functions that actually

666
00:30:35,859 --> 00:30:40,149
implement this no longer have to concern

667
00:30:38,109 --> 00:30:42,189
themselves with what their location is

668
00:30:40,150 --> 00:30:46,150
so when we look at something like add

669
00:30:42,190 --> 00:30:51,900
obstacle this goes away right this goes

670
00:30:46,150 --> 00:30:51,900
away that goes away

671
00:30:57,038 --> 00:31:02,558
all of this stuff just gets simplified

672
00:30:59,558 --> 00:31:02,558
right

673
00:31:08,779 --> 00:31:18,359
what else we got alright again just

674
00:31:17,220 --> 00:31:20,880
deleting the code that's no longer

675
00:31:18,359 --> 00:31:23,849
necessary I think all this stuff is fine

676
00:31:20,880 --> 00:31:25,169
that's result not entity probably should

677
00:31:23,849 --> 00:31:28,439
have called it entity don't know I

678
00:31:25,169 --> 00:31:31,140
didn't and I think that's it right and

679
00:31:28,440 --> 00:31:33,298
so now people just need to call the

680
00:31:31,140 --> 00:31:35,970
appropriate one whichever one it is that

681
00:31:33,298 --> 00:31:39,418
you actually wanted and then you can go

682
00:31:35,970 --> 00:31:41,759
from there right so in here we're we're

683
00:31:39,419 --> 00:31:44,549
calling add obstacle or here where we're

684
00:31:41,759 --> 00:31:45,808
calling pending entity creator instead

685
00:31:44,548 --> 00:31:47,929
of doing that right what we're going to

686
00:31:45,808 --> 00:31:55,859
do is we're going to call Jen entity

687
00:31:47,929 --> 00:31:58,890
oops entity at traversable and we're

688
00:31:55,859 --> 00:32:01,048
gonna pass the grid region we're gonna

689
00:31:58,890 --> 00:32:02,850
pass the Creator function and we're

690
00:32:01,048 --> 00:32:09,440
gonna pass that ground reference point

691
00:32:02,849 --> 00:32:11,879
right this is not necessary anymore

692
00:32:09,440 --> 00:32:15,360
because it's already automatically found

693
00:32:11,880 --> 00:32:17,970
for us so that's good and now we're

694
00:32:15,359 --> 00:32:20,099
gonna do the same thing in anywhere else

695
00:32:17,970 --> 00:32:23,669
that we see it so here's our add

696
00:32:20,099 --> 00:32:26,359
obstacle call and again add obstacle now

697
00:32:23,669 --> 00:32:29,280
we're just going to use add obstacle as

698
00:32:26,359 --> 00:32:31,500
as a creator function so rather than

699
00:32:29,279 --> 00:32:34,319
calling it directly we're gonna pass it

700
00:32:31,500 --> 00:32:37,798
again so this is Jen entity at

701
00:32:34,319 --> 00:32:41,308
traversable we again pass that grid

702
00:32:37,798 --> 00:32:43,769
region the add obstacle call and the

703
00:32:41,308 --> 00:32:46,460
reference point on the ground same would

704
00:32:43,769 --> 00:32:46,460
be true here

705
00:32:55,729 --> 00:33:00,889
and off we go so now we have the

706
00:32:58,190 --> 00:33:02,419
flexibility of having functions that are

707
00:33:00,888 --> 00:33:04,548
you know passed to us but that we can

708
00:33:02,419 --> 00:33:06,919
call in multiple ways and so now when

709
00:33:04,548 --> 00:33:08,450
we're in our tree code here this finally

710
00:33:06,919 --> 00:33:11,659
leaves us at a point where we're in good

711
00:33:08,450 --> 00:33:13,639
shape what we can do is say look instead

712
00:33:11,659 --> 00:33:16,190
of calling something like and add an

713
00:33:13,638 --> 00:33:21,288
animate here we'll actually make this be

714
00:33:16,190 --> 00:33:23,210
a gen entity at peak all will pass the

715
00:33:21,288 --> 00:33:25,878
grid region and then we'll have that

716
00:33:23,210 --> 00:33:29,239
inanimate here and we'll pass the ground

717
00:33:25,878 --> 00:33:32,088
P as it stands that allows us to go up

718
00:33:29,239 --> 00:33:36,829
here take that AB inanimate call turn it

719
00:33:32,088 --> 00:33:41,298
into one of these and oops

720
00:33:36,829 --> 00:33:44,868
and now we're good to go also why is the

721
00:33:41,298 --> 00:33:49,028
gen Cree entity call Jim create antique

722
00:33:44,868 --> 00:33:51,528
fall these should be marked internal

723
00:33:49,028 --> 00:33:53,989
there's no they're not supposed to get

724
00:33:51,528 --> 00:33:58,278
exported so that's that's just a

725
00:33:53,989 --> 00:34:02,659
oversight there when we were creating

726
00:33:58,278 --> 00:34:04,128
that code okay so I think now we've got

727
00:34:02,659 --> 00:34:05,599
a situation where everything is flowing

728
00:34:04,128 --> 00:34:08,719
a little bit more nicely through that

729
00:34:05,598 --> 00:34:09,769
line of code and again yet gives us the

730
00:34:08,719 --> 00:34:12,588
ability to call it two different ways

731
00:34:09,769 --> 00:34:15,288
which which we want if we run it now we

732
00:34:12,588 --> 00:34:17,000
should have a forest of trees quote

733
00:34:15,289 --> 00:34:19,700
unquote which is just garbage right now

734
00:34:17,000 --> 00:34:20,148
or it's just randomly picking but there

735
00:34:19,699 --> 00:34:21,618
you go

736
00:34:20,148 --> 00:34:24,888
right and so those areas are completely

737
00:34:21,619 --> 00:34:26,750
filled with trees now just to make sure

738
00:34:24,889 --> 00:34:28,849
you know we're in the realm of

739
00:34:26,750 --> 00:34:30,409
reasonable here this is going to want to

740
00:34:28,849 --> 00:34:32,568
be some distribution function at some

741
00:34:30,409 --> 00:34:35,659
point and so we should be able to do

742
00:34:32,568 --> 00:34:38,808
something like a random choice here and

743
00:34:35,659 --> 00:34:41,480
we look at the the series that we're

744
00:34:38,809 --> 00:34:43,849
using here we want to take that random

745
00:34:41,480 --> 00:34:48,949
choice you know one in every third tile

746
00:34:43,849 --> 00:34:51,139
I don't know is a tree let's say and so

747
00:34:48,949 --> 00:34:52,788
that would just make it so that it's

748
00:34:51,139 --> 00:34:55,789
clear that we're actually placing them

749
00:34:52,789 --> 00:34:57,559
kind of randomly yeah again not a good

750
00:34:55,789 --> 00:34:59,770
distribution function for trees but at

751
00:34:57,559 --> 00:35:02,330
least it proves to us that it's working

752
00:34:59,769 --> 00:35:05,659
and does what we want it to do

753
00:35:02,329 --> 00:35:09,380
right and I think that's pretty good

754
00:35:05,659 --> 00:35:11,929
let's also sort of have a maybe if we

755
00:35:09,380 --> 00:35:16,160
wanted to do our tree tags a little bit

756
00:35:11,929 --> 00:35:17,929
differently here so inside the tree tags

757
00:35:16,159 --> 00:35:19,699
you can see here we're doing sort of

758
00:35:17,929 --> 00:35:23,629
random unilateralis for these things

759
00:35:19,699 --> 00:35:25,279
where we've got different kind of treaty

760
00:35:23,630 --> 00:35:28,400
taxing unit for now since we don't want

761
00:35:25,280 --> 00:35:32,080
it to look so ridiculous maybe we would

762
00:35:28,400 --> 00:35:36,500
like to just say look let's let's keep

763
00:35:32,079 --> 00:35:38,719
dark energy and fall and stuff out of it

764
00:35:36,500 --> 00:35:41,539
in fact I guess you know I could do this

765
00:35:38,719 --> 00:35:44,869
a little bit differently and say maybe

766
00:35:41,539 --> 00:35:47,590
these are gonna be set to zero for now

767
00:35:44,869 --> 00:35:47,589
right

768
00:36:01,710 --> 00:36:06,358
and so you know maybe that just looks a

769
00:36:04,769 --> 00:36:09,780
little bit more consistent for us at the

770
00:36:06,358 --> 00:36:12,299
moment and so off we go and you know

771
00:36:09,780 --> 00:36:16,320
mostly what that highlights to which is

772
00:36:12,300 --> 00:36:17,820
good is just that well and you know what

773
00:36:16,320 --> 00:36:19,109
else we could do now that we're at it

774
00:36:17,820 --> 00:36:23,250
too

775
00:36:19,108 --> 00:36:28,049
I feel like we could also look to see if

776
00:36:23,250 --> 00:36:29,400
there was anything close to it and not

777
00:36:28,050 --> 00:36:31,050
put trees there that would be an

778
00:36:29,400 --> 00:36:34,349
interesting thing to try as well so for

779
00:36:31,050 --> 00:36:37,349
example in here where we say like okay

780
00:36:34,349 --> 00:36:39,150
we're gonna generate the apron so we're

781
00:36:37,349 --> 00:36:43,200
looking to see whether or not

782
00:36:39,150 --> 00:36:45,300
overlapping entities exist in this but

783
00:36:43,199 --> 00:36:48,088
you know in this particular area here

784
00:36:45,300 --> 00:36:50,849
where we do a get total volume what we

785
00:36:48,088 --> 00:36:58,349
could do instead is just say you know

786
00:36:50,849 --> 00:37:00,330
what let's do that same thing here I

787
00:36:58,349 --> 00:37:02,309
guess for the tree well of course it

788
00:37:00,329 --> 00:37:04,079
would find other things so we'd have to

789
00:37:02,309 --> 00:37:08,969
be more Civic I'm just thinking like

790
00:37:04,079 --> 00:37:12,269
where do where do we want what if we

791
00:37:08,969 --> 00:37:13,588
wanted to do things that are like always

792
00:37:12,269 --> 00:37:15,960
gonna be a little bit further away from

793
00:37:13,588 --> 00:37:17,460
the room so we don't place trees like

794
00:37:15,960 --> 00:37:19,519
right next to rooms or something like

795
00:37:17,460 --> 00:37:19,519
that

796
00:37:25,369 --> 00:37:28,969
yeah I'm not gonna do that yet because

797
00:37:27,409 --> 00:37:30,018
I'm gonna say like once I start thinking

798
00:37:28,969 --> 00:37:31,338
that I'm like it kind of gets into

799
00:37:30,018 --> 00:37:32,988
things that we want to do a little bit

800
00:37:31,338 --> 00:37:36,078
later with distribution so i'ma leave it

801
00:37:32,989 --> 00:37:37,759
like this anyway what I was gonna say is

802
00:37:36,079 --> 00:37:40,009
what you can really notice here too is

803
00:37:37,759 --> 00:37:42,498
again for the world from the standpoint

804
00:37:40,009 --> 00:37:45,318
of world solidity you can see why it's

805
00:37:42,498 --> 00:37:47,058
so important to light the sprites right

806
00:37:45,318 --> 00:37:48,710
we're not letting our sprites right now

807
00:37:47,059 --> 00:37:52,400
and as a result this area out here

808
00:37:48,710 --> 00:37:54,588
should be dark but it's very obviously

809
00:37:52,400 --> 00:37:57,889
not like only the ground tiles are being

810
00:37:54,588 --> 00:38:00,858
dark darkened whereas the actual trees

811
00:37:57,889 --> 00:38:03,409
are completely bright and so that really

812
00:38:00,858 --> 00:38:05,058
breaks any of the illusion there of the

813
00:38:03,409 --> 00:38:13,578
trees also we have the trees sort of

814
00:38:05,059 --> 00:38:16,278
poking through poking through the walls

815
00:38:13,579 --> 00:38:17,839
here which actually I don't know that I

816
00:38:16,278 --> 00:38:20,298
really want to fix because I I don't

817
00:38:17,838 --> 00:38:21,889
think we should ever put trees in look

818
00:38:20,298 --> 00:38:23,929
trees are supposed to be kind of overly

819
00:38:21,889 --> 00:38:25,818
large and so I think we want to solve

820
00:38:23,929 --> 00:38:27,379
that mostly with world Jen we don't want

821
00:38:25,818 --> 00:38:29,748
trees that are placed next to walls

822
00:38:27,380 --> 00:38:31,519
because they kind of occupy more than

823
00:38:29,748 --> 00:38:33,288
their tile that's just how the trees

824
00:38:31,518 --> 00:38:36,649
sort of work you can see they extend

825
00:38:33,289 --> 00:38:38,119
kind of out too big so I I would say

826
00:38:36,650 --> 00:38:41,568
that that's really a bug that has to be

827
00:38:38,119 --> 00:38:46,009
solved more with world placement and not

828
00:38:41,568 --> 00:38:48,889
with and not with changing the way the Z

829
00:38:46,009 --> 00:38:52,789
stuff works so yeah I think we're all

830
00:38:48,889 --> 00:38:55,009
good there we should be we should be

831
00:38:52,789 --> 00:38:57,170
fine going forward I'm gonna go ahead

832
00:38:55,009 --> 00:38:58,579
and take the add tree tags and do what I

833
00:38:57,170 --> 00:39:01,548
said I wanted to do which is sort of

834
00:38:58,579 --> 00:39:04,450
unify those two code paths as well so in

835
00:39:01,548 --> 00:39:07,719
here I'm just gonna say let's take the

836
00:39:04,449 --> 00:39:07,718
tree tags

837
00:39:18,409 --> 00:39:22,348
and this way those will both be going

838
00:39:21,028 --> 00:39:24,420
through the same path that will mean

839
00:39:22,349 --> 00:39:27,269
that now we only have like the wintry

840
00:39:24,420 --> 00:39:30,599
trees Oh Grod that's good

841
00:39:27,269 --> 00:39:34,519
what's a Grod I feel like a Grodd is

842
00:39:30,599 --> 00:39:34,519
something that we should know what it is

843
00:39:35,690 --> 00:39:45,920
all right so now we should have just

844
00:39:39,568 --> 00:39:45,920
those trees and let's see if we do

845
00:39:49,130 --> 00:39:55,250
oops

846
00:39:51,440 --> 00:39:55,250
probably ran it too soon huh

847
00:40:06,670 --> 00:40:11,710
so we're still getting some of those

848
00:40:09,420 --> 00:40:18,180
some of these what's going on there I

849
00:40:11,710 --> 00:40:18,179
thought I changed it to oh no I didn't

850
00:40:23,250 --> 00:40:33,519
ha ha okay so now I think we're good to

851
00:40:30,909 --> 00:40:38,500
go and to move on to the next part of

852
00:40:33,519 --> 00:40:43,480
our next part of our adventure here

853
00:40:38,500 --> 00:40:44,980
right so we should now only have the

854
00:40:43,480 --> 00:40:48,490
wintery trees because everyone's going

855
00:40:44,980 --> 00:40:49,929
through that add tags call and so it

856
00:40:48,489 --> 00:40:53,439
shouldn't be picking any fall trees

857
00:40:49,929 --> 00:40:55,539
anymore or dead trees or dark trees

858
00:40:53,440 --> 00:40:58,570
whatever they're called uh so just

859
00:40:55,539 --> 00:41:05,889
looking at at what's going on here also

860
00:40:58,570 --> 00:41:10,450
what is what's going on what is what's

861
00:41:05,889 --> 00:41:14,460
happening right there there's like a

862
00:41:10,449 --> 00:41:20,250
tree that's like placed sort of

863
00:41:14,460 --> 00:41:20,250
underground or something do you see that

864
00:41:26,090 --> 00:41:34,690
what what's happening there why are we

865
00:41:28,610 --> 00:41:34,690
getting a second tree placed sort of

866
00:41:43,090 --> 00:41:48,619
that's a bit of a puzzler and I don't

867
00:41:47,119 --> 00:41:55,190
unfortunately I don't think we really

868
00:41:48,619 --> 00:41:57,910
have much of a way to figure out where

869
00:41:55,190 --> 00:41:57,909
that's coming from

870
00:42:14,599 --> 00:42:27,440
hmm so that's yeah that's kind of one of

871
00:42:26,269 --> 00:42:30,769
those things room like I don't really

872
00:42:27,440 --> 00:42:32,869
know we don't have a real way of picking

873
00:42:30,769 --> 00:42:33,980
where that we almost need better debug

874
00:42:32,869 --> 00:42:36,259
information to figure out where that's

875
00:42:33,980 --> 00:42:37,699
coming from so we don't really know who

876
00:42:36,260 --> 00:42:41,630
would be responsible for drawing that

877
00:42:37,699 --> 00:42:47,289
what's what's more interesting is it

878
00:42:41,630 --> 00:42:52,630
seems to be that that occurs on every

879
00:42:47,289 --> 00:42:55,909
bottom-left tile so you can see like

880
00:42:52,630 --> 00:43:03,530
it's at the it's like we're adding one

881
00:42:55,909 --> 00:43:07,069
tree at the root location of every room

882
00:43:03,530 --> 00:43:09,920
I don't know every room but many rooms

883
00:43:07,070 --> 00:43:11,870
in fact let's go see if that's true so

884
00:43:09,920 --> 00:43:17,570
it's like there's one tree being placed

885
00:43:11,869 --> 00:43:22,960
at zero zero zero right so who is

886
00:43:17,570 --> 00:43:22,960
placing one tree at zero zero zero

887
00:43:29,610 --> 00:43:34,750
and to be fair it might not be one tree

888
00:43:32,679 --> 00:43:38,639
it could be lots of trees being placed

889
00:43:34,750 --> 00:43:38,639
at zero zero zero right

890
00:43:42,980 --> 00:43:47,789
so I'm going to start by doing something

891
00:43:45,360 --> 00:43:51,210
pretty basic I'm going to get rid of

892
00:43:47,789 --> 00:43:53,279
this piece of code and see whether or

893
00:43:51,210 --> 00:43:55,769
not it gets rid of the errant tree

894
00:43:53,280 --> 00:43:58,080
placement just so I know who is placing

895
00:43:55,769 --> 00:44:00,719
it because there's only a few places we

896
00:43:58,079 --> 00:44:03,179
call an any generation so we should be

897
00:44:00,719 --> 00:44:06,119
able to see okay so first thing we know

898
00:44:03,179 --> 00:44:10,759
is it ain't VAT code right because there

899
00:44:06,119 --> 00:44:15,150
they are so we know it's not this code

900
00:44:10,760 --> 00:44:18,030
I'm also gonna do a little thing that I

901
00:44:15,150 --> 00:44:22,309
like to do sometimes which is just like

902
00:44:18,030 --> 00:44:22,310
make sure that I can find this again

903
00:44:23,750 --> 00:44:30,650
there we go uh so now what I want to do

904
00:44:27,929 --> 00:44:33,480
is go find out you know is it

905
00:44:30,650 --> 00:44:36,869
who else is calling something that could

906
00:44:33,480 --> 00:44:40,320
be placing those trees in in a bad way

907
00:44:36,869 --> 00:44:48,690
right and so let's suppose that it's

908
00:44:40,320 --> 00:44:51,059
this call let's just ice that out and so

909
00:44:48,690 --> 00:44:53,730
again one by one I'm going to remove

910
00:44:51,059 --> 00:44:56,610
calls that can create entities until I

911
00:44:53,730 --> 00:44:59,010
know who is responsible so it's still

912
00:44:56,610 --> 00:45:01,769
there so it's somebody who's not

913
00:44:59,010 --> 00:45:07,290
creating a tree at all it's somebody

914
00:45:01,769 --> 00:45:10,199
who's just creating something right so

915
00:45:07,289 --> 00:45:14,849
again let's take a look and see if we

916
00:45:10,199 --> 00:45:19,109
can brought in the set of things being

917
00:45:14,849 --> 00:45:22,400
removed again just removing some

918
00:45:19,110 --> 00:45:22,400
entities from the mix

919
00:45:26,710 --> 00:45:37,599
and so it looks like if we're not doing

920
00:45:29,590 --> 00:45:39,730
light well no no no right so we're still

921
00:45:37,599 --> 00:45:45,569
creating something at the sort of base

922
00:45:39,730 --> 00:45:45,570
of the room so let's keep going

923
00:46:08,599 --> 00:46:17,969
so now I think we have removed any hint

924
00:46:17,039 --> 00:46:21,679
of the problem

925
00:46:17,969 --> 00:46:26,250
so I'm sis what I'm suspecting is maybe

926
00:46:21,679 --> 00:46:29,579
there was actually just a bug in this

927
00:46:26,250 --> 00:46:32,159
general code bath that now like because

928
00:46:29,579 --> 00:46:35,519
for example if I go to Gen entity at

929
00:46:32,159 --> 00:46:40,819
traversable now I'm assuming that if I

930
00:46:35,519 --> 00:46:40,820
make this a is anyone calling it now

931
00:46:41,750 --> 00:46:45,269
yeah so I'm assuming this just generally

932
00:46:44,429 --> 00:46:51,559
has a bug

933
00:46:45,269 --> 00:46:51,559
oh and in fact I'm looking right at it

934
00:46:52,400 --> 00:46:55,800
so that's it

935
00:46:53,940 --> 00:47:03,150
we were just accidentally left a

936
00:46:55,800 --> 00:47:05,250
secondary call in there right oops so

937
00:47:03,150 --> 00:47:09,300
let's go ahead and remove these I think

938
00:47:05,250 --> 00:47:12,769
that's all there was just a little typo

939
00:47:09,300 --> 00:47:12,769
there no biggie

940
00:47:15,469 --> 00:47:19,339
and now I think we're good

941
00:47:29,920 --> 00:47:33,190
yeah so that was all there was I think I

942
00:47:32,199 --> 00:47:36,029
don't think there's any other problems

943
00:47:33,190 --> 00:47:36,030
with that okay

944
00:47:41,730 --> 00:47:48,659
all right so now we want to get started

945
00:47:45,780 --> 00:47:51,080
on the next process which again is just

946
00:47:48,659 --> 00:47:55,289
to give us the ability to sort of have a

947
00:47:51,079 --> 00:47:56,519
secondary level of storage where we know

948
00:47:55,289 --> 00:47:59,340
that there are some things that are

949
00:47:56,519 --> 00:48:04,650
there for visual continuity and

950
00:47:59,340 --> 00:48:07,530
efficiency which either its information

951
00:48:04,650 --> 00:48:12,360
we cannot regenerate in any predictable

952
00:48:07,530 --> 00:48:14,940
way that would be something like the

953
00:48:12,360 --> 00:48:16,289
lighting where it's not like a function

954
00:48:14,940 --> 00:48:18,269
we just call and we get back the

955
00:48:16,289 --> 00:48:19,949
lighting it's actually a stochastic

956
00:48:18,269 --> 00:48:23,219
process that we hope converges to a

957
00:48:19,949 --> 00:48:25,049
reasonable result so it's something like

958
00:48:23,219 --> 00:48:27,809
that that we literally cannot just

959
00:48:25,050 --> 00:48:29,880
recreate so we want to store it because

960
00:48:27,809 --> 00:48:33,119
it needs to be averaged over time or

961
00:48:29,880 --> 00:48:36,119
we're summing up the ground cover maybe

962
00:48:33,119 --> 00:48:40,859
it's something that actually could be

963
00:48:36,119 --> 00:48:43,769
recreated at any time directly but it's

964
00:48:40,860 --> 00:48:45,120
just too expensive to do so meaning and

965
00:48:43,769 --> 00:48:46,590
in certain some states those are both

966
00:48:45,119 --> 00:48:48,299
kind of the same because you could argue

967
00:48:46,590 --> 00:48:49,740
that the lighting is recreate able we

968
00:48:48,300 --> 00:48:52,920
just run the algorithm long enough and

969
00:48:49,739 --> 00:48:54,599
it converges to the lighting and so that

970
00:48:52,920 --> 00:49:00,170
you know answers the question right

971
00:48:54,599 --> 00:49:03,719
there but assuming that we're going to

972
00:49:00,170 --> 00:49:06,059
treat it as just these things are too

973
00:49:03,719 --> 00:49:09,389
expensive so we need to cache them at

974
00:49:06,059 --> 00:49:11,579
least a little bit those pieces of

975
00:49:09,389 --> 00:49:14,219
information need a place to live but

976
00:49:11,579 --> 00:49:15,420
they don't want to live forever and so

977
00:49:14,219 --> 00:49:20,789
the first thing that I guess what I'll

978
00:49:15,420 --> 00:49:23,659
do to start us off is let's go ahead and

979
00:49:20,789 --> 00:49:26,670
put a basic ground cover system in there

980
00:49:23,659 --> 00:49:29,069
let's get it working with permanent

981
00:49:26,670 --> 00:49:32,490
storage and then we'll have we have both

982
00:49:29,070 --> 00:49:35,820
the lighting and the ground cover are

983
00:49:32,489 --> 00:49:36,959
both in there we'll see how inefficient

984
00:49:35,820 --> 00:49:38,880
it is because it could be it should be

985
00:49:36,960 --> 00:49:39,869
quite inefficient and in fact with

986
00:49:38,880 --> 00:49:41,010
ground cover will be even more

987
00:49:39,869 --> 00:49:42,299
inefficient we probably don't want to

988
00:49:41,010 --> 00:49:45,060
send it down every frame because not

989
00:49:42,300 --> 00:49:47,880
changing every frame so it will

990
00:49:45,059 --> 00:49:49,920
basically give us a good layout to see

991
00:49:47,880 --> 00:49:52,190
how we want to start moving forward with

992
00:49:49,920 --> 00:49:57,980
that secondary level of

993
00:49:52,190 --> 00:50:00,769
in the world system alright so how this

994
00:49:57,980 --> 00:50:04,250
would work right in the fully most worse

995
00:50:00,769 --> 00:50:06,048
and most expensive way to do it is again

996
00:50:04,250 --> 00:50:07,730
we've got this sort of super bloated

997
00:50:06,048 --> 00:50:09,798
energy struct that we haven't really

998
00:50:07,730 --> 00:50:11,210
cared about much and now we're going to

999
00:50:09,798 --> 00:50:13,608
start caring about it a little bit more

1000
00:50:11,210 --> 00:50:16,510
and you can see here how we've got this

1001
00:50:13,608 --> 00:50:20,179
lighting point state nonsenses in here

1002
00:50:16,510 --> 00:50:23,750
and you can see here like we've got sort

1003
00:50:20,179 --> 00:50:26,029
of you know to do already talking about

1004
00:50:23,750 --> 00:50:27,980
the secondary level cashing so what we

1005
00:50:26,030 --> 00:50:30,170
want to do here is have the notion that

1006
00:50:27,980 --> 00:50:33,019
there's ground cover as well right it's

1007
00:50:30,170 --> 00:50:36,409
part of the process and just looking at

1008
00:50:33,019 --> 00:50:41,079
that what we need to do for ground cover

1009
00:50:36,409 --> 00:50:41,078
is pretty straightforward if we said

1010
00:50:42,909 --> 00:50:46,879
that there is some kind of ground cover

1011
00:50:44,989 --> 00:50:49,308
here we just need two pieces of

1012
00:50:46,880 --> 00:50:51,500
information we need like a location for

1013
00:50:49,309 --> 00:50:58,490
the ground cover and we need like what

1014
00:50:51,500 --> 00:51:00,679
we're gonna draw right so we need to

1015
00:50:58,489 --> 00:51:02,449
know at least that information but if

1016
00:51:00,679 --> 00:51:04,730
we're honest we probably need a little

1017
00:51:02,449 --> 00:51:06,788
bit more right we probably want to do

1018
00:51:04,730 --> 00:51:09,260
some kind of a color variant here right

1019
00:51:06,789 --> 00:51:13,490
so maybe we want a color that we would

1020
00:51:09,260 --> 00:51:15,710
multiply in you know like a tint

1021
00:51:13,489 --> 00:51:17,179
basically so that we could vary the

1022
00:51:15,710 --> 00:51:19,130
colors a little bit as necessary and

1023
00:51:17,179 --> 00:51:22,219
then we probably also want one more

1024
00:51:19,130 --> 00:51:25,278
thing which is we may want a scale so we

1025
00:51:22,219 --> 00:51:27,709
may want to like you know sort of change

1026
00:51:25,278 --> 00:51:29,960
the size of some of the grasses just

1027
00:51:27,710 --> 00:51:32,210
again probably not cute but maybe

1028
00:51:29,960 --> 00:51:34,130
between like point nine and point you

1029
00:51:32,210 --> 00:51:35,778
want and you know 0.9 and 1.1 which is

1030
00:51:34,130 --> 00:51:38,838
not quite a uniform on either side but

1031
00:51:35,778 --> 00:51:46,099
you get the idea so that we can kind of

1032
00:51:38,838 --> 00:51:47,838
have a a nice you know clean way of very

1033
00:51:46,099 --> 00:51:48,890
you know varying the the bitmaps a

1034
00:51:47,838 --> 00:51:52,929
little bit even if they're the same

1035
00:51:48,889 --> 00:51:56,989
bitmap they can get sort of played but

1036
00:51:52,929 --> 00:51:58,519
so thinking that through this is

1037
00:51:56,989 --> 00:52:01,969
basically the information we want for

1038
00:51:58,519 --> 00:52:04,000
splatting down those those ground covers

1039
00:52:01,969 --> 00:52:06,669
and

1040
00:52:04,000 --> 00:52:09,519
when we put those in there we kind of

1041
00:52:06,670 --> 00:52:11,320
need a known way of doing fins on them

1042
00:52:09,519 --> 00:52:13,719
but we can since the ground cover

1043
00:52:11,320 --> 00:52:17,160
shouldn't be very high we can probably

1044
00:52:13,719 --> 00:52:20,348
just use a known method of fitting them

1045
00:52:17,159 --> 00:52:21,819
which will not require the extensive

1046
00:52:20,349 --> 00:52:23,410
calculation that we currently do to

1047
00:52:21,820 --> 00:52:27,970
place sprites properly so that they

1048
00:52:23,409 --> 00:52:29,230
don't intersect the ground plane we

1049
00:52:27,969 --> 00:52:31,779
should be able to literally just put

1050
00:52:29,230 --> 00:52:33,280
grass in there in a pretty

1051
00:52:31,780 --> 00:52:36,119
straightforward fashion that's that's

1052
00:52:33,280 --> 00:52:39,160
not particularly interesting to anybody

1053
00:52:36,119 --> 00:52:42,240
so if we're gonna do that we really just

1054
00:52:39,159 --> 00:52:46,719
need this piece of information right and

1055
00:52:42,239 --> 00:52:49,149
off we go now one thing that's true

1056
00:52:46,719 --> 00:52:51,009
about this is there's not a lot of

1057
00:52:49,150 --> 00:52:53,829
reason that it has to be attached to an

1058
00:52:51,010 --> 00:52:56,920
entity so this ground cover could be

1059
00:52:53,829 --> 00:52:59,380
kind of arbitrary but I think there is

1060
00:52:56,920 --> 00:53:01,420
an argument even though it creates a

1061
00:52:59,380 --> 00:53:03,760
little bit of inefficiency for us I

1062
00:53:01,420 --> 00:53:06,849
think there is an argument to be made

1063
00:53:03,760 --> 00:53:09,130
that these things should be attached to

1064
00:53:06,849 --> 00:53:11,830
entities the reason that I think there's

1065
00:53:09,130 --> 00:53:13,690
an argument to be made there is because

1066
00:53:11,829 --> 00:53:17,230
if these things are attached to entities

1067
00:53:13,690 --> 00:53:20,440
they can be manipulated when necessary

1068
00:53:17,230 --> 00:53:23,079
so for example if the ground cover were

1069
00:53:20,440 --> 00:53:24,400
not attached to an entity at all then we

1070
00:53:23,079 --> 00:53:25,690
would get in a situation where if

1071
00:53:24,400 --> 00:53:27,430
something was supposed to happen like

1072
00:53:25,690 --> 00:53:29,920
something supposed to catch on fire or

1073
00:53:27,429 --> 00:53:33,639
an entity was supposed to go away or was

1074
00:53:29,920 --> 00:53:36,519
supposed to like raise or lower the

1075
00:53:33,639 --> 00:53:39,489
ground cover wouldn't move with it right

1076
00:53:36,519 --> 00:53:43,000
and so I feel like we do need our ground

1077
00:53:39,489 --> 00:53:46,179
cover to at least be related to the

1078
00:53:43,000 --> 00:53:47,710
entity somehow if not stored with it but

1079
00:53:46,179 --> 00:53:51,098
I think it probably needs to be stored

1080
00:53:47,710 --> 00:53:54,699
with it in order to work properly right

1081
00:53:51,099 --> 00:53:56,650
and so if we take the ground cover and

1082
00:53:54,699 --> 00:53:58,239
me say all right there's going to be an

1083
00:53:56,650 --> 00:54:00,670
array of ground cover that exists in

1084
00:53:58,239 --> 00:54:05,858
here right we would have something like

1085
00:54:00,670 --> 00:54:08,079
this and you can already see why this is

1086
00:54:05,858 --> 00:54:14,139
going to start being a problem this is a

1087
00:54:08,079 --> 00:54:15,900
lot of information and if we were to put

1088
00:54:14,139 --> 00:54:17,869
as many of these in as we probably want

1089
00:54:15,900 --> 00:54:21,289
which is probably a fair

1090
00:54:17,869 --> 00:54:23,960
right that just really bloats out the

1091
00:54:21,289 --> 00:54:25,940
entity structure even more and so now an

1092
00:54:23,960 --> 00:54:28,820
enemy structure is just huge and even

1093
00:54:25,940 --> 00:54:31,340
just the time we spend copying that

1094
00:54:28,820 --> 00:54:33,470
around is now going to be probably an

1095
00:54:31,340 --> 00:54:37,550
issue so I don't know if we'll see a

1096
00:54:33,469 --> 00:54:39,379
speed hit here you know computers are so

1097
00:54:37,550 --> 00:54:41,660
darn fast that you know it's kind of

1098
00:54:39,380 --> 00:54:45,170
nuts that we don't see an immediate kind

1099
00:54:41,659 --> 00:54:49,519
of obvious speed hit from that but you

1100
00:54:45,170 --> 00:54:54,920
know it probably still is at least a

1101
00:54:49,519 --> 00:54:56,090
little bit well you know I'm gonna be

1102
00:54:54,920 --> 00:54:57,800
honest you can kind of look at the

1103
00:54:56,090 --> 00:55:06,590
profile you can see it really just

1104
00:54:57,800 --> 00:55:09,170
doesn't matter computers man Intel and

1105
00:55:06,590 --> 00:55:11,559
AMD really ships some amazing stuff you

1106
00:55:09,170 --> 00:55:14,409
got to hand it to him we do our best to

1107
00:55:11,559 --> 00:55:17,029
ruin it here in the world of software

1108
00:55:14,409 --> 00:55:20,659
but it's just kind of nuts when you look

1109
00:55:17,030 --> 00:55:24,440
at how flat this profile is it's like if

1110
00:55:20,659 --> 00:55:25,969
we just when we improve our lighting our

1111
00:55:24,440 --> 00:55:27,530
frame time goes down to basically

1112
00:55:25,969 --> 00:55:30,319
nothing right

1113
00:55:27,530 --> 00:55:33,470
even though it's so piggy right it's

1114
00:55:30,320 --> 00:55:36,820
it's horrible and there's so much we

1115
00:55:33,469 --> 00:55:40,730
could do to improve it it's kind of nuts

1116
00:55:36,820 --> 00:55:44,000
how amazing CPUs are they just eat it

1117
00:55:40,730 --> 00:55:45,980
for breakfast you know and it's just

1118
00:55:44,000 --> 00:55:47,539
it's kind of crazy how how good they are

1119
00:55:45,980 --> 00:55:51,639
at that it's really you gotta hand it to

1120
00:55:47,539 --> 00:55:54,980
them they they do such amazing work

1121
00:55:51,639 --> 00:55:56,900
anyway so if we take a look at something

1122
00:55:54,980 --> 00:55:59,329
like a pute light propagation here which

1123
00:55:56,900 --> 00:56:01,010
is just taking up all of our time and

1124
00:55:59,329 --> 00:56:04,340
again you know we can sort of see that

1125
00:56:01,010 --> 00:56:07,490
here's like a huge chunk all of our time

1126
00:56:04,340 --> 00:56:10,630
is getting spent doing that we would

1127
00:56:07,489 --> 00:56:16,279
reduce our frame rate by gosh what

1128
00:56:10,630 --> 00:56:19,730
probably 2/3 so you know if we look at

1129
00:56:16,280 --> 00:56:21,200
this here this this is what's sort of

1130
00:56:19,730 --> 00:56:24,260
unfortunate this is a little bit

1131
00:56:21,199 --> 00:56:26,719
misleading because this is going to get

1132
00:56:24,260 --> 00:56:31,000
counted because of how many threads are

1133
00:56:26,719 --> 00:56:34,869
doing it and so when you look at this

1134
00:56:31,000 --> 00:56:36,969
it's not 87% of the frame time probably

1135
00:56:34,869 --> 00:56:40,569
it's more like 66% of the frame time or

1136
00:56:36,969 --> 00:56:43,569
something and you kind of got a look at

1137
00:56:40,570 --> 00:56:45,760
this to see what would because you're

1138
00:56:43,570 --> 00:56:49,230
not saying how much CPU time was spent

1139
00:56:45,760 --> 00:56:51,640
doing it you're asking how much CPU time

1140
00:56:49,230 --> 00:56:56,679
how much frame time would be saved and

1141
00:56:51,639 --> 00:56:58,989
so the CPU time is uneven these things

1142
00:56:56,679 --> 00:57:03,039
are not paralyzed that are happening in

1143
00:56:58,989 --> 00:57:06,699
here right and so even if we free up all

1144
00:57:03,039 --> 00:57:08,559
the CPU time it wouldn't get used by the

1145
00:57:06,699 --> 00:57:11,049
other threads that are that are sitting

1146
00:57:08,559 --> 00:57:13,329
around idle right and so that's just you

1147
00:57:11,050 --> 00:57:16,780
know a reality of having to look at the

1148
00:57:13,329 --> 00:57:19,049
profile with a more careful eye but you

1149
00:57:16,780 --> 00:57:23,019
get the idea

1150
00:57:19,050 --> 00:57:25,600
all right so looking in here at this

1151
00:57:23,019 --> 00:57:28,659
entity you can sort of see how that

1152
00:57:25,599 --> 00:57:31,210
floats things out and it doesn't really

1153
00:57:28,659 --> 00:57:33,159
cause a time problem for us but you know

1154
00:57:31,210 --> 00:57:36,250
we could also see whether up to what

1155
00:57:33,159 --> 00:57:38,199
extent it creates a space problem for us

1156
00:57:36,250 --> 00:57:40,329
one thing that we don't have right now

1157
00:57:38,199 --> 00:57:42,939
like when I run the game right we can't

1158
00:57:40,329 --> 00:57:45,519
see how much space is taken up by our

1159
00:57:42,940 --> 00:57:49,269
world database but I feel like we could

1160
00:57:45,519 --> 00:57:53,380
and so like if we looked inside handmade

1161
00:57:49,269 --> 00:57:56,469
world that's CBP when this actually gets

1162
00:57:53,380 --> 00:57:59,940
run in here we've got some information

1163
00:57:56,469 --> 00:58:03,219
we could use right in fact if you look

1164
00:57:59,940 --> 00:58:04,960
we've got a memory reading here that

1165
00:58:03,219 --> 00:58:08,619
tells us what we're using for world

1166
00:58:04,960 --> 00:58:15,190
storage right and so what we could do if

1167
00:58:08,619 --> 00:58:18,039
we wanted to is we could take this this

1168
00:58:15,190 --> 00:58:20,829
world arena and just say how much memory

1169
00:58:18,039 --> 00:58:26,769
it's actually using so if I look at you

1170
00:58:20,829 --> 00:58:28,960
know the memory arena and we I don't

1171
00:58:26,769 --> 00:58:32,340
know do we have a function that just

1172
00:58:28,960 --> 00:58:32,340
says how much space is getting used

1173
00:58:39,829 --> 00:58:48,090
so we don't actually have we don't

1174
00:58:45,119 --> 00:58:57,750
actually have a immediate call that

1175
00:58:48,090 --> 00:58:59,070
gives us the total amount used but it

1176
00:58:57,750 --> 00:59:01,320
would be pretty easy to find right

1177
00:58:59,070 --> 00:59:04,380
because you could use the the current

1178
00:59:01,320 --> 00:59:06,240
block information for that and I think

1179
00:59:04,380 --> 00:59:08,780
that would give you what you want so let

1180
00:59:06,239 --> 00:59:08,779
me see here

1181
00:59:19,010 --> 00:59:25,780
so this debug platform memory stats

1182
00:59:22,469 --> 00:59:28,868
right we can get that information

1183
00:59:25,780 --> 00:59:28,869
[Music]

1184
00:59:37,949 --> 00:59:43,079
and we probably just should print that

1185
00:59:40,949 --> 00:59:46,230
out that the only thing is you know

1186
00:59:43,079 --> 00:59:48,239
that's just for the total memory use and

1187
00:59:46,230 --> 00:59:50,250
so actually you know it doesn't really

1188
00:59:48,239 --> 00:59:54,209
tell us what we want we want to know how

1189
00:59:50,250 --> 00:59:55,800
much is allocated to our worlds arena so

1190
00:59:54,210 --> 00:59:57,210
I think what we really want is something

1191
00:59:55,800 --> 01:00:01,289
that would tell us that information

1192
00:59:57,210 --> 01:00:03,409
right and so like when we run when we

1193
01:00:01,289 --> 01:00:06,269
bring up like the profile or whatever

1194
01:00:03,409 --> 01:00:09,059
you can look here and you can see like

1195
01:00:06,269 --> 01:00:11,849
how much memory is being used in how

1196
01:00:09,059 --> 01:00:13,799
many blocks right and so you can kind of

1197
01:00:11,849 --> 01:00:17,250
see that like we've got all right it's

1198
01:00:13,800 --> 01:00:20,100
using half a gigabyte of memory right

1199
01:00:17,250 --> 01:00:22,079
now but of course a lot of what's being

1200
01:00:20,099 --> 01:00:25,949
used for that half of a gigabyte there

1201
01:00:22,079 --> 01:00:27,809
is in the debug information in fact this

1202
01:00:25,949 --> 01:00:29,460
may only be the debug information right

1203
01:00:27,809 --> 01:00:30,750
that's all of our just recording

1204
01:00:29,460 --> 01:00:32,460
everything that happened on every frame

1205
01:00:30,750 --> 01:00:33,719
and that's why it stops getting used I

1206
01:00:32,460 --> 01:00:36,420
don't so I don't know whether that's

1207
01:00:33,719 --> 01:00:40,109
actually the whole game or just a debug

1208
01:00:36,420 --> 01:00:43,639
information but point being it really

1209
01:00:40,110 --> 01:00:46,950
just doesn't tell us any information

1210
01:00:43,639 --> 01:00:50,190
right none of our debug views here have

1211
01:00:46,949 --> 01:00:52,409
anything like this right and so what

1212
01:00:50,190 --> 01:00:54,300
we'd like to do is get sort of something

1213
01:00:52,409 --> 01:00:57,960
that would tell us more specifically

1214
01:00:54,300 --> 01:01:01,110
what is going on with our memory there

1215
01:00:57,960 --> 01:01:04,590
so that we could have an idea of how

1216
01:01:01,110 --> 01:01:07,950
much space we're saving right or using

1217
01:01:04,590 --> 01:01:10,500
for any particular for any particular

1218
01:01:07,949 --> 01:01:13,889
arena and you know if you looked at that

1219
01:01:10,500 --> 01:01:16,070
sort of you know in here we could sort

1220
01:01:13,889 --> 01:01:18,900
of have those arenas labeled as well

1221
01:01:16,070 --> 01:01:20,789
might be another kind of nice thing

1222
01:01:18,900 --> 01:01:23,639
about that so that the arena's

1223
01:01:20,789 --> 01:01:25,110
themselves could maybe update the debug

1224
01:01:23,639 --> 01:01:30,449
system periodically

1225
01:01:25,110 --> 01:01:32,880
with what the actual size is and I don't

1226
01:01:30,449 --> 01:01:34,589
know you know how we necessarily would

1227
01:01:32,880 --> 01:01:39,410
want to do that but I do think that

1228
01:01:34,590 --> 01:01:45,150
would be relatively straightforward for

1229
01:01:39,409 --> 01:01:47,519
example yeah I mean if each time through

1230
01:01:45,150 --> 01:01:51,090
we just said like hey or even if we just

1231
01:01:47,519 --> 01:01:51,690
had our memory arena's iterative Bowl in

1232
01:01:51,090 --> 01:01:53,930
some

1233
01:01:51,690 --> 01:01:56,789
of global way that would probably work

1234
01:01:53,929 --> 01:01:57,960
um I'm not sure I just don't know if I

1235
01:01:56,789 --> 01:01:59,338
really want to do that right now

1236
01:01:57,960 --> 01:02:10,260
it's something we should probably put on

1237
01:01:59,338 --> 01:02:13,889
the horizon though let's just take a

1238
01:02:10,260 --> 01:02:15,750
look take a quick look so in here where

1239
01:02:13,889 --> 01:02:17,639
we've got sort of these editor these

1240
01:02:15,750 --> 01:02:19,500
various editor calls right and then

1241
01:02:17,639 --> 01:02:21,059
we've got sort of our debug system and

1242
01:02:19,500 --> 01:02:22,380
this whole thing didn't really come

1243
01:02:21,059 --> 01:02:24,269
together as well as you know we would

1244
01:02:22,380 --> 01:02:25,710
have liked cuz just takes a long time to

1245
01:02:24,269 --> 01:02:27,150
build these systems and we never really

1246
01:02:25,710 --> 01:02:29,550
zeroed in on it so it's still a little

1247
01:02:27,150 --> 01:02:31,530
bit sprawling and a little bit kind of

1248
01:02:29,550 --> 01:02:37,170
hacky you can see here like we've kind

1249
01:02:31,530 --> 01:02:39,150
of got this two-phase kind of thing

1250
01:02:37,170 --> 01:02:41,338
where we've got our debug stuff in fact

1251
01:02:39,150 --> 01:02:43,260
there's a memory a dev mode memory right

1252
01:02:41,338 --> 01:02:44,730
there that doesn't actually do anything

1253
01:02:43,260 --> 01:02:52,310
at the moment

1254
01:02:44,730 --> 01:02:52,309
and in fact do we ever actually oops

1255
01:02:53,358 --> 01:02:59,489
we actually have an f8 key that maps to

1256
01:02:57,659 --> 01:03:02,929
a dev mode memory but we don't actually

1257
01:02:59,489 --> 01:03:09,929
do anything and you can see here like we

1258
01:03:02,929 --> 01:03:14,598
call this so it just doesn't do anything

1259
01:03:09,929 --> 01:03:17,039
when you actually push the f8 key right

1260
01:03:14,599 --> 01:03:19,140
so I'm not sure exactly how that was

1261
01:03:17,039 --> 01:03:23,449
supposed to work in the grand scheme of

1262
01:03:19,139 --> 01:03:26,309
things but let's take a look at maybe

1263
01:03:23,449 --> 01:03:28,789
where does dev mode rendering actually

1264
01:03:26,309 --> 01:03:28,789
get set

1265
01:03:40,440 --> 01:03:45,099
so I assume that this column needs to

1266
01:03:43,059 --> 01:04:09,869
get called and just isn't getting called

1267
01:03:45,099 --> 01:04:09,869
at the moment so like that

1268
01:04:18,900 --> 01:04:27,510
and so I guess you can see that we sort

1269
01:04:22,949 --> 01:04:30,838
of had a a sort of loose plan in place

1270
01:04:27,510 --> 01:04:35,460
here where we were gonna say look let's

1271
01:04:30,838 --> 01:04:38,460
go ahead and have these memory arenas do

1272
01:04:35,460 --> 01:04:42,900
something useful here and we just never

1273
01:04:38,460 --> 01:04:50,608
actually did anything right so it may be

1274
01:04:42,900 --> 01:04:55,769
the case that we can put these into we

1275
01:04:50,608 --> 01:05:11,519
can press these into service somehow for

1276
01:04:55,769 --> 01:05:20,550
example I don't know if I can really

1277
01:05:11,519 --> 01:05:22,530
know how this works but maybe we can do

1278
01:05:20,550 --> 01:05:28,619
something like this where in the world

1279
01:05:22,530 --> 01:05:31,980
system you know when we come through

1280
01:05:28,619 --> 01:05:35,519
here and we create one of these worlds

1281
01:05:31,980 --> 01:05:38,699
maybe we can announce that to the system

1282
01:05:35,519 --> 01:05:42,780
I'm not really sure again to what extent

1283
01:05:38,699 --> 01:05:44,608
this would actually work but you can see

1284
01:05:42,780 --> 01:05:50,940
that it just I guess it just uses

1285
01:05:44,608 --> 01:05:55,130
whatever that parent arena is here so

1286
01:05:50,940 --> 01:05:55,130
when we do a create world in that case

1287
01:05:59,989 --> 01:06:08,368
pretty much just happens right there

1288
01:06:05,099 --> 01:06:12,510
looks like so in here where we call this

1289
01:06:08,369 --> 01:06:14,070
with the mode arena we want that mode

1290
01:06:12,510 --> 01:06:16,830
arena to be captured because that's the

1291
01:06:14,070 --> 01:06:20,789
one that would show us what's going on

1292
01:06:16,829 --> 01:06:24,929
and you can see in here that the mode

1293
01:06:20,789 --> 01:06:28,980
arena itself is just you know game state

1294
01:06:24,929 --> 01:06:30,808
mode arena and so in theory we should be

1295
01:06:28,980 --> 01:06:32,639
able to I guess I don't need to put

1296
01:06:30,809 --> 01:06:35,219
in its own area I guess that could

1297
01:06:32,639 --> 01:06:39,328
actually happen here as well so we could

1298
01:06:35,219 --> 01:06:42,479
just do something like you know oh like

1299
01:06:39,329 --> 01:06:44,369
there it is so never mind I guess we do

1300
01:06:42,478 --> 01:06:50,178
have that we don't have the asset arena

1301
01:06:44,369 --> 01:06:50,179
here but that could also I suppose be

1302
01:06:51,228 --> 01:06:57,478
placed in there as well because it's

1303
01:06:53,518 --> 01:07:14,338
just assets a arena right so we could

1304
01:06:57,478 --> 01:07:15,838
put so that asset arena I actually don't

1305
01:07:14,338 --> 01:07:17,338
know if that's what that's called

1306
01:07:15,838 --> 01:07:21,208
but I believe that's a separate arena

1307
01:07:17,338 --> 01:07:23,009
that we use only for this particular

1308
01:07:21,208 --> 01:07:26,188
purpose so

1309
01:07:23,010 --> 01:07:26,189
[Music]

1310
01:07:40,489 --> 01:07:51,859
it's called non restored memory and now

1311
01:07:49,610 --> 01:07:54,440
the question would be if we take a look

1312
01:07:51,860 --> 01:07:56,539
at these arenas inside the debug system

1313
01:07:54,440 --> 01:07:59,389
like what can we print out that would be

1314
01:07:56,539 --> 01:08:03,409
useful right at the moment I really only

1315
01:07:59,389 --> 01:08:09,289
care about one thing which is I would

1316
01:08:03,409 --> 01:08:15,519
like for these arenas here to have some

1317
01:08:09,289 --> 01:08:23,800
kind of a total space right and so like

1318
01:08:15,519 --> 01:08:28,819
going into the debug system like just

1319
01:08:23,800 --> 01:08:32,570
looking for where that gets actually

1320
01:08:28,819 --> 01:08:45,199
used so we've got this straw arena

1321
01:08:32,569 --> 01:08:47,239
occupancy stuff and again don't really

1322
01:08:45,199 --> 01:08:49,809
know like what our plan was here what we

1323
01:08:47,239 --> 01:08:49,809
were doing

1324
01:09:00,569 --> 01:09:05,089
and so you know

1325
01:09:10,189 --> 01:09:17,919
it looks to me to like this part

1326
01:09:21,569 --> 01:09:25,270
yeah it doesn't really make a lot of

1327
01:09:23,649 --> 01:09:28,659
sense so it looks like we're basically

1328
01:09:25,270 --> 01:09:31,690
looking at things that were tracked to

1329
01:09:28,659 --> 01:09:35,380
the arena but I don't think these

1330
01:09:31,689 --> 01:09:43,659
actually ever get stored do they I mean

1331
01:09:35,380 --> 01:09:47,140
maybe they do but did we like did we

1332
01:09:43,659 --> 01:09:50,409
actually put a debug marker in here for

1333
01:09:47,140 --> 01:10:00,010
when we push a size on here cuz I sure

1334
01:09:50,409 --> 01:10:04,199
don't see one right so I feel like that

1335
01:10:00,010 --> 01:10:06,909
probably doesn't actually do anything

1336
01:10:04,199 --> 01:10:12,579
but yet we had something in here so I'm

1337
01:10:06,909 --> 01:10:22,409
not sure what this was doing to go back

1338
01:10:12,579 --> 01:10:25,149
to our own video archive and see so I

1339
01:10:22,409 --> 01:10:29,439
guess what this was doing previously is

1340
01:10:25,149 --> 01:10:32,139
it looks like it was just accessing the

1341
01:10:29,439 --> 01:10:36,339
actual directory no structure and then

1342
01:10:32,140 --> 01:10:38,200
drawing some kind of a rectangle just

1343
01:10:36,340 --> 01:10:41,529
show how much was used or something like

1344
01:10:38,199 --> 01:10:45,939
this right so ideally what you would

1345
01:10:41,529 --> 01:10:50,369
have here is not that right you would

1346
01:10:45,939 --> 01:10:50,369
have something that sort of said

1347
01:10:55,180 --> 01:11:02,829
who is responsible for allocating each

1348
01:10:57,829 --> 01:11:02,829
block right and so

1349
01:11:08,769 --> 01:11:12,800
and so there's a couple different ways

1350
01:11:11,479 --> 01:11:16,328
we can do that and I'm not really sure

1351
01:11:12,800 --> 01:11:16,329
which one we want to do but

1352
01:11:16,329 --> 01:11:19,460
[Music]

1353
01:11:34,979 --> 01:11:40,689
yeah but I think at least from my

1354
01:11:37,810 --> 01:11:42,490
perspective I think this is kind of

1355
01:11:40,689 --> 01:11:45,699
going at it a little bit the wrong way

1356
01:11:42,489 --> 01:11:48,489
right so what you want to do here is

1357
01:11:45,699 --> 01:11:51,909
every time you do an allocation you want

1358
01:11:48,489 --> 01:11:55,109
to record like who did the allocation so

1359
01:11:51,909 --> 01:11:59,590
you can see who's using the memory right

1360
01:11:55,109 --> 01:12:02,559
and so in a sense I would say that

1361
01:11:59,590 --> 01:12:05,170
really these should just be things that

1362
01:12:02,560 --> 01:12:07,360
are underneath the arena and we just

1363
01:12:05,170 --> 01:12:11,199
print out those sizes and we could do

1364
01:12:07,359 --> 01:12:13,539
them as a graph if we want to but we

1365
01:12:11,199 --> 01:12:15,819
probably just want to know those sizes I

1366
01:12:13,539 --> 01:12:18,189
like there's something to be said for

1367
01:12:15,819 --> 01:12:19,630
showing the allocation pattern but that

1368
01:12:18,189 --> 01:12:21,759
allocation pattern would definitely be

1369
01:12:19,630 --> 01:12:25,180
something that's a little bit harder to

1370
01:12:21,760 --> 01:12:28,960
track it certainly requires more

1371
01:12:25,180 --> 01:12:30,579
bookkeeping to do so so I don't know the

1372
01:12:28,960 --> 01:12:32,350
other thing that's a little bit janky

1373
01:12:30,579 --> 01:12:35,409
here is if you look at how this is

1374
01:12:32,350 --> 01:12:38,590
working when you do draw arena occupancy

1375
01:12:35,409 --> 01:12:40,029
you're gonna need to know like like in

1376
01:12:38,590 --> 01:12:45,010
this case we're actually getting the

1377
01:12:40,029 --> 01:12:47,380
arena itself and while that might work I

1378
01:12:45,010 --> 01:12:49,480
don't know how well it works

1379
01:12:47,380 --> 01:12:52,810
it wouldn't work like over time right so

1380
01:12:49,479 --> 01:13:02,549
we're not storing that information sort

1381
01:12:52,810 --> 01:13:02,550
of persistently which maybe is okay

1382
01:13:07,760 --> 01:13:12,960
but again it's just one of those things

1383
01:13:09,720 --> 01:13:16,079
where it's like I think that if I had to

1384
01:13:12,960 --> 01:13:18,779
criticize the approach to how I was

1385
01:13:16,079 --> 01:13:21,989
doing the debug system is it's just too

1386
01:13:18,779 --> 01:13:24,869
generic and I think it doesn't really

1387
01:13:21,989 --> 01:13:30,630
accomplish much as a result because it's

1388
01:13:24,869 --> 01:13:32,640
just very very arbitrary and generic it

1389
01:13:30,630 --> 01:13:34,529
doesn't have like the tools that you

1390
01:13:32,640 --> 01:13:36,869
actually need for doing specific kinds

1391
01:13:34,529 --> 01:13:38,489
of debug viewing and so I think just too

1392
01:13:36,869 --> 01:13:41,689
much time was wasted on that sort of

1393
01:13:38,489 --> 01:13:43,559
stuff and that you can kind of see that

1394
01:13:41,689 --> 01:13:46,019
fragility coming through because it

1395
01:13:43,560 --> 01:13:47,520
should be pretty easy right if you had

1396
01:13:46,020 --> 01:13:51,030
just purpose-built a little thing that

1397
01:13:47,520 --> 01:13:53,850
tracks the allocations that's not very

1398
01:13:51,029 --> 01:13:55,679
hard thing to accomplish but because it

1399
01:13:53,850 --> 01:13:58,230
everything tries to go through like a

1400
01:13:55,680 --> 01:14:01,140
uniform event system that doesn't really

1401
01:13:58,229 --> 01:14:10,559
know what the heck it's doing there's

1402
01:14:01,140 --> 01:14:11,520
not a lot of ways you can really there's

1403
01:14:10,560 --> 01:14:12,539
not a lot of ways you can really deal

1404
01:14:11,520 --> 01:14:15,480
with memory allocations because those

1405
01:14:12,539 --> 01:14:17,399
are things that aren't viewing an event

1406
01:14:15,479 --> 01:14:20,009
you're viewing the state of the

1407
01:14:17,399 --> 01:14:22,289
allocator at any given time which cannot

1408
01:14:20,010 --> 01:14:23,699
be recreated only from events unless you

1409
01:14:22,289 --> 01:14:24,930
have all the events from the very

1410
01:14:23,699 --> 01:14:27,090
beginning of time and ran through them

1411
01:14:24,930 --> 01:14:31,920
all so you kind of need a list of the

1412
01:14:27,090 --> 01:14:33,659
results of the events right and yeah you

1413
01:14:31,920 --> 01:14:37,369
know I just don't necessarily see that

1414
01:14:33,659 --> 01:14:37,369
being something that's easy to do here

1415
01:14:37,520 --> 01:14:43,290
so I think what I would want to do is I

1416
01:14:40,170 --> 01:14:44,819
would want to build something that's a

1417
01:14:43,289 --> 01:14:48,119
little more purpose-built and allows us

1418
01:14:44,819 --> 01:14:50,819
to show the actual loves to keep the

1419
01:14:48,119 --> 01:14:53,609
actual set of allocations that we had

1420
01:14:50,819 --> 01:15:01,229
right and so if you look at how the

1421
01:14:53,609 --> 01:15:02,759
memory arena works at the moment what

1422
01:15:01,229 --> 01:15:04,799
you can see is that for every memory

1423
01:15:02,760 --> 01:15:07,890
arena you've got one of these current

1424
01:15:04,800 --> 01:15:10,350
blocks here right and the current block

1425
01:15:07,890 --> 01:15:17,190
is the thing that that platform memory

1426
01:15:10,350 --> 01:15:19,679
block that platform memory block is the

1427
01:15:17,189 --> 01:15:21,899
thing that we actually use to

1428
01:15:19,679 --> 01:15:24,420
push things on so like we've got the

1429
01:15:21,899 --> 01:15:26,369
flags the size the base they used we use

1430
01:15:24,420 --> 01:15:30,569
this use parameter to kind of like move

1431
01:15:26,369 --> 01:15:34,939
things along as we go and so it seems to

1432
01:15:30,569 --> 01:15:37,738
me like what we probably want here is

1433
01:15:34,939 --> 01:15:42,238
something where we could do like just

1434
01:15:37,738 --> 01:15:45,959
imagine for a moment what you kind of

1435
01:15:42,238 --> 01:15:49,678
want to do is say look whenever we do a

1436
01:15:45,960 --> 01:15:53,300
push size call right we have the

1437
01:15:49,679 --> 01:15:56,819
information that we actually need to do

1438
01:15:53,300 --> 01:16:00,060
what we want to do in that push size

1439
01:15:56,819 --> 01:16:06,049
call so if you look at everywhere that

1440
01:16:00,060 --> 01:16:08,880
we were doing any kind of push calls so

1441
01:16:06,050 --> 01:16:11,820
like for example all of our main ones

1442
01:16:08,880 --> 01:16:13,800
here I don't know what optional clear

1443
01:16:11,819 --> 01:16:17,099
parameter is because we have an optional

1444
01:16:13,800 --> 01:16:20,760
clear parameter which says don't clear

1445
01:16:17,100 --> 01:16:23,520
so is that I don't think that to do is

1446
01:16:20,760 --> 01:16:25,949
Val anymore um if you look at these it's

1447
01:16:23,520 --> 01:16:29,429
pretty easy for us to say at least in

1448
01:16:25,948 --> 01:16:31,829
these when we do pushes in here it would

1449
01:16:29,429 --> 01:16:37,319
be pretty easy to say look the push size

1450
01:16:31,829 --> 01:16:43,039
call is gonna do a thing where if we're

1451
01:16:37,319 --> 01:16:47,069
in sort of our handmade internal version

1452
01:16:43,039 --> 01:16:50,460
we're gonna take a file and line number

1453
01:16:47,069 --> 01:16:58,859
in there right so we're gonna say here's

1454
01:16:50,460 --> 01:17:01,289
the file here's the line number and if

1455
01:16:58,859 --> 01:17:03,809
we're in handmade internal where we're

1456
01:17:01,289 --> 01:17:09,448
saying this is an internal builds that's

1457
01:17:03,810 --> 01:17:13,409
just going to pass down right and so I

1458
01:17:09,448 --> 01:17:16,729
would assume the easiest way to deal

1459
01:17:13,408 --> 01:17:23,250
with that is to go well and I suppose

1460
01:17:16,729 --> 01:17:26,309
now to think about it I suppose we could

1461
01:17:23,250 --> 01:17:28,880
do it at the end which might make things

1462
01:17:26,310 --> 01:17:28,880
a little easier

1463
01:17:29,270 --> 01:17:34,920
excuse me well I guess it would

1464
01:17:32,100 --> 01:17:47,250
um so when we're doing these here right

1465
01:17:34,920 --> 01:17:48,539
we can sort of have two sets like so and

1466
01:17:47,250 --> 01:18:01,949
essentially what we're gonna do here is

1467
01:17:48,539 --> 01:18:03,359
just pass the file online and so when

1468
01:18:01,949 --> 01:18:06,239
you come in here and you get a file name

1469
01:18:03,359 --> 01:18:08,130
and a line number now you know you can

1470
01:18:06,239 --> 01:18:10,550
actually do and you actually don't ask

1471
01:18:08,130 --> 01:18:16,109
me why put those in the opposite order I

1472
01:18:10,550 --> 01:18:17,670
don't have a reason now we have to make

1473
01:18:16,109 --> 01:18:22,949
sure that everyone who calls push sighs

1474
01:18:17,670 --> 01:18:24,119
actually obeys that rule so you can see

1475
01:18:22,949 --> 01:18:26,039
in here there's some people who call

1476
01:18:24,119 --> 01:18:28,229
that directly those are the other calls

1477
01:18:26,039 --> 01:18:32,579
inside the memory system looks like for

1478
01:18:28,229 --> 01:18:42,869
the most part which will fix this stuff

1479
01:18:32,579 --> 01:18:46,619
will if zero out for now and so looking

1480
01:18:42,869 --> 01:18:49,130
at these Jimmy what we need to do here

1481
01:18:46,619 --> 01:18:52,050
is make sure that these also do that

1482
01:18:49,130 --> 01:18:55,859
exact same thing so we want push string

1483
01:18:52,050 --> 01:18:57,119
Z to actually call push string Z like

1484
01:18:55,859 --> 01:19:00,929
this right

1485
01:18:57,119 --> 01:19:03,059
so effectively push string Z there's a

1486
01:19:00,930 --> 01:19:07,920
macro that would just take the file in

1487
01:19:03,060 --> 01:19:11,430
line from whoever was calling it and

1488
01:19:07,920 --> 01:19:15,800
make that work like so and again same

1489
01:19:11,430 --> 01:19:18,750
thing so this is actually that and this

1490
01:19:15,800 --> 01:19:20,880
is something that would get up here in

1491
01:19:18,750 --> 01:19:22,380
the you know just just like the rest of

1492
01:19:20,880 --> 01:19:24,060
them that would that would use sort of

1493
01:19:22,380 --> 01:19:27,989
an internal function to do the work that

1494
01:19:24,060 --> 01:19:29,910
it's going to do however when it's not

1495
01:19:27,989 --> 01:19:33,949
an internal node it won't pass those

1496
01:19:29,909 --> 01:19:33,949
it's just a pass-through and that's it

1497
01:19:35,578 --> 01:19:41,710
okay so now push strings II can just

1498
01:19:39,849 --> 01:19:45,460
have a pass-through file and line number

1499
01:19:41,710 --> 01:19:47,529
so exactly the same way as it was doing

1500
01:19:45,460 --> 01:19:49,809
here and again this is just all horrible

1501
01:19:47,529 --> 01:19:54,759
it's horrible because C++ is a horrible

1502
01:19:49,809 --> 01:19:57,219
language and designed by by simpletons

1503
01:19:54,760 --> 01:19:59,289
right and so you know we've got to do

1504
01:19:57,219 --> 01:20:01,480
all this garbage for no real reason it's

1505
01:19:59,288 --> 01:20:04,448
just a waste of our time but that's just

1506
01:20:01,479 --> 01:20:06,609
how it goes what we can do here is we

1507
01:20:04,448 --> 01:20:08,618
could make this be something that's a

1508
01:20:06,609 --> 01:20:13,109
little bit cleaner so we could make this

1509
01:20:08,618 --> 01:20:15,549
like internal memory pass-through right

1510
01:20:13,109 --> 01:20:18,578
and then what you could do is say look

1511
01:20:15,550 --> 01:20:21,250
each one of those starts with that so

1512
01:20:18,578 --> 01:20:24,029
then we do like you know internal memory

1513
01:20:21,250 --> 01:20:29,170
pass-through is this nonsense right

1514
01:20:24,029 --> 01:20:31,118
otherwise it's nothing that way when you

1515
01:20:29,170 --> 01:20:33,158
come through in each case we don't have

1516
01:20:31,118 --> 01:20:46,509
to write the routine every to have those

1517
01:20:33,158 --> 01:20:48,429
pastures every time maybe this so this

1518
01:20:46,510 --> 01:20:51,670
way we can say like look everything has

1519
01:20:48,429 --> 01:20:53,889
to start with that garbage and then

1520
01:20:51,670 --> 01:20:59,789
everything has to pass that garbage

1521
01:20:53,889 --> 01:21:02,890
right and that way it's not you know

1522
01:20:59,789 --> 01:21:02,890
[Music]

1523
01:21:03,750 --> 01:21:08,170
it's not something that has to have so

1524
01:21:06,460 --> 01:21:10,960
many pound ifs through the whole thing

1525
01:21:08,170 --> 01:21:15,599
it can just be one sort of sort of thing

1526
01:21:10,960 --> 01:21:15,599
that's determined by this central system

1527
01:21:17,760 --> 01:21:26,619
and then everyone can use it it's still

1528
01:21:23,679 --> 01:21:28,149
not great but it's you know better than

1529
01:21:26,618 --> 01:21:30,460
nothing I guess is the way I would put

1530
01:21:28,149 --> 01:21:33,658
it and they used to find them - nothing

1531
01:21:30,460 --> 01:21:35,800
in the non internal build version right

1532
01:21:33,658 --> 01:21:37,750
so I think that's probably good enough

1533
01:21:35,800 --> 01:21:40,029
and here you know we can use the same

1534
01:21:37,750 --> 01:21:43,738
thing for the push size function itself

1535
01:21:40,029 --> 01:21:47,259
right to get rid of that and off we go

1536
01:21:43,738 --> 01:21:49,629
so again it's not fabulous but it's the

1537
01:21:47,260 --> 01:21:52,810
best we're going to be able to do

1538
01:21:49,630 --> 01:21:56,680
all right so if we put this in here and

1539
01:21:52,810 --> 01:22:00,220
say that we want to do all of these the

1540
01:21:56,680 --> 01:22:03,010
same way because really we sort of do

1541
01:22:00,220 --> 01:22:07,300
like we want these to all have that same

1542
01:22:03,010 --> 01:22:10,600
tracking so that we know what came from

1543
01:22:07,300 --> 01:22:13,449
where we so we probably want like all of

1544
01:22:10,600 --> 01:22:17,680
these to have that information just

1545
01:22:13,449 --> 01:22:19,179
looking at it right and so if we were

1546
01:22:17,680 --> 01:22:20,050
gonna do that it's again pretty

1547
01:22:19,180 --> 01:22:26,230
straightforward

1548
01:22:20,050 --> 01:22:27,610
all of these get one of these which

1549
01:22:26,229 --> 01:22:28,989
again is not the worst thing in the

1550
01:22:27,609 --> 01:22:31,199
world now that I've done that pound two

1551
01:22:28,989 --> 01:22:31,199
fine

1552
01:22:31,869 --> 01:22:38,849
so all of those get one of these and

1553
01:22:34,029 --> 01:22:47,949
then all of these get the pass version

1554
01:22:38,850 --> 01:22:50,430
right and these push copy calls they

1555
01:22:47,949 --> 01:22:55,029
need the ability to take those

1556
01:22:50,430 --> 01:22:57,970
parameters themselves in this case here

1557
01:22:55,029 --> 01:23:00,880
where we do a push buffer I guess this

1558
01:22:57,970 --> 01:23:05,140
wants to clear so I I guess we're

1559
01:23:00,880 --> 01:23:07,750
literally doing this so you know this

1560
01:23:05,140 --> 01:23:12,070
was defaulting to clear why this doesn't

1561
01:23:07,750 --> 01:23:15,270
take a parameter I don't know because

1562
01:23:12,069 --> 01:23:21,519
you would think that you would want to

1563
01:23:15,270 --> 01:23:23,530
um like this in fact I'm really not sure

1564
01:23:21,520 --> 01:23:25,180
why these all don't take that but the

1565
01:23:23,529 --> 01:23:28,059
idea would be you know this this should

1566
01:23:25,180 --> 01:23:30,250
always have the params there so that you

1567
01:23:28,060 --> 01:23:31,870
could override the ones where you when

1568
01:23:30,250 --> 01:23:36,430
you call push buffer like what did you

1569
01:23:31,869 --> 01:23:38,529
want to do right and and I really don't

1570
01:23:36,430 --> 01:23:42,460
know so if you look at push string Z

1571
01:23:38,529 --> 01:23:44,109
versus push string here I'm gonna have

1572
01:23:42,460 --> 01:23:46,539
to go out and a limb and say I don't

1573
01:23:44,109 --> 01:23:53,279
understand why we have both of these

1574
01:23:46,539 --> 01:23:53,279
functions am I missing something

1575
01:23:59,489 --> 01:24:02,340
well I guess that one needs to be

1576
01:24:01,079 --> 01:24:05,670
null-terminated and this one doesn't

1577
01:24:02,340 --> 01:24:08,010
that's about it right yeah I don't

1578
01:24:05,670 --> 01:24:12,810
really see much else um so we probably

1579
01:24:08,010 --> 01:24:16,470
want these two again also be macros in

1580
01:24:12,810 --> 01:24:18,810
that same way if that makes sense so

1581
01:24:16,470 --> 01:24:21,780
that they can do when they do their push

1582
01:24:18,810 --> 01:24:34,020
copy you know we can do something more

1583
01:24:21,779 --> 01:24:38,069
like this and so that would really be

1584
01:24:34,020 --> 01:24:40,890
the only thing there nothing else really

1585
01:24:38,069 --> 01:24:44,189
needs to happen there and the rest of

1586
01:24:40,890 --> 01:24:47,880
these work properly so these guys are

1587
01:24:44,189 --> 01:24:49,469
under squared and then we need push you

1588
01:24:47,880 --> 01:24:54,930
know both of them push buffer and push

1589
01:24:49,470 --> 01:24:56,039
string sort of both need to have and and

1590
01:24:54,930 --> 01:24:59,070
I sorry and also pushing they'll

1591
01:24:56,039 --> 01:25:02,279
terminate those all need to be Mack Road

1592
01:24:59,069 --> 01:25:04,889
right now in order to make push copy

1593
01:25:02,279 --> 01:25:08,309
work properly we actually need to sort

1594
01:25:04,890 --> 01:25:11,160
of versions of that we need one that

1595
01:25:08,310 --> 01:25:15,630
that puts the file and line number in

1596
01:25:11,159 --> 01:25:19,649
for you and one that doesn't now the one

1597
01:25:15,630 --> 01:25:22,619
that doesn't do that should you know we

1598
01:25:19,649 --> 01:25:24,629
should be able to reuse the same one by

1599
01:25:22,619 --> 01:25:27,210
just having this take the file in line

1600
01:25:24,630 --> 01:25:30,720
number so basically like you know this

1601
01:25:27,210 --> 01:25:35,789
would be file and line like that and it

1602
01:25:30,720 --> 01:25:38,460
would actually do it like this and then

1603
01:25:35,789 --> 01:25:41,460
this push copy would just be a call to

1604
01:25:38,460 --> 01:25:43,640
the existing push copy that went like

1605
01:25:41,460 --> 01:25:43,640
that

1606
01:25:49,729 --> 01:25:54,869
right and so we'd only have one actual

1607
01:25:53,489 --> 01:25:59,340
push copy and the other one would be

1608
01:25:54,869 --> 01:26:01,109
this so if we looked at that and we

1609
01:25:59,340 --> 01:26:05,400
wanted to sort of make this work this

1610
01:26:01,109 --> 01:26:08,729
way we would just say okay in the

1611
01:26:05,399 --> 01:26:11,339
version that's not internal when we do

1612
01:26:08,729 --> 01:26:14,329
the push copy we still have both things

1613
01:26:11,340 --> 01:26:18,210
but now they just don't actually do that

1614
01:26:14,329 --> 01:26:21,960
file online pass-through anymore you

1615
01:26:18,210 --> 01:26:25,050
know I'm saying for the rest of these

1616
01:26:21,960 --> 01:26:26,730
it's literally just a thunk so you know

1617
01:26:25,050 --> 01:26:30,810
that in the same way that we had our

1618
01:26:26,729 --> 01:26:33,149
push strings II do this and do nothing

1619
01:26:30,810 --> 01:26:35,610
in the other case we would do the same

1620
01:26:33,149 --> 01:26:38,429
thing for our other functions so we'd

1621
01:26:35,609 --> 01:26:42,599
have a push string do the same thing

1622
01:26:38,430 --> 01:26:47,880
we'd have a push buffer which does the

1623
01:26:42,600 --> 01:26:55,800
same thing and we'd have a push and nil

1624
01:26:47,880 --> 01:26:57,270
terminate which does the same thing so

1625
01:26:55,800 --> 01:27:00,810
all of those are just you know

1626
01:26:57,270 --> 01:27:03,660
straightforward wrappers and then here

1627
01:27:00,810 --> 01:27:05,940
we would have the exact same set of

1628
01:27:03,659 --> 01:27:10,109
straightforward wrappers so we would

1629
01:27:05,939 --> 01:27:12,449
have push string push buffer and push

1630
01:27:10,109 --> 01:27:14,279
and mill terminate and those would

1631
01:27:12,449 --> 01:27:16,590
literally just sunk through to their

1632
01:27:14,279 --> 01:27:18,019
underscored version without actually

1633
01:27:16,590 --> 01:27:20,940
changing the parameters and again that's

1634
01:27:18,020 --> 01:27:23,220
strictly a concession for allowing that

1635
01:27:20,939 --> 01:27:26,699
stuff to flow through unadulterated in

1636
01:27:23,220 --> 01:27:30,690
the other case so now we kind of got to

1637
01:27:26,699 --> 01:27:34,920
fix all this stuff looking at how for

1638
01:27:30,689 --> 01:27:36,539
example push copy here is working not

1639
01:27:34,920 --> 01:27:38,039
enough primary function like macro okay

1640
01:27:36,539 --> 01:27:40,649
so we've got to actually go make sure

1641
01:27:38,039 --> 01:27:42,269
all this stuff is correct that's

1642
01:27:40,649 --> 01:27:45,539
supposed to pass the filename in line

1643
01:27:42,270 --> 01:27:47,780
number to push copy which is supposed to

1644
01:27:45,539 --> 01:27:47,779
do

1645
01:28:02,920 --> 01:28:11,119
but it looks like it's hmm excuse me

1646
01:28:07,609 --> 01:28:15,469
it looks like it's the right number of

1647
01:28:11,119 --> 01:28:27,199
things because there'd be the file name

1648
01:28:15,470 --> 01:28:30,159
the line number so I messed up something

1649
01:28:27,199 --> 01:28:34,729
there but I'm not really sure what

1650
01:28:30,159 --> 01:28:41,750
because it's supposed to take 1 2 3 4 5

1651
01:28:34,729 --> 01:28:46,879
parameters and we're passing 1 2 3 4 5

1652
01:28:41,750 --> 01:28:54,229
parameters which seems like exactly what

1653
01:28:46,880 --> 01:28:59,119
we want you know so I'm not sure why

1654
01:28:54,229 --> 01:29:03,829
it's thinking that's bad because it sort

1655
01:28:59,119 --> 01:29:04,939
of seems correct but obviously it

1656
01:29:03,829 --> 01:29:09,250
doesn't think so

1657
01:29:04,939 --> 01:29:09,250
so why doesn't it think so

1658
01:29:16,649 --> 01:29:21,569
not enough arguments

1659
01:29:28,869 --> 01:29:43,930
it also thinks there's a missing this

1660
01:29:33,789 --> 01:29:46,810
isn't a return right yeah so yeah what

1661
01:29:43,930 --> 01:29:49,000
is the problem here that this is

1662
01:29:46,810 --> 01:29:57,370
complaining about because I don't really

1663
01:29:49,000 --> 01:30:02,699
see I don't really see any issues with

1664
01:29:57,369 --> 01:30:02,699
that I'm gonna just double check so

1665
01:30:08,850 --> 01:30:24,039
something about internal memory pass is

1666
01:30:12,250 --> 01:30:27,039
not working right because I replaced it

1667
01:30:24,039 --> 01:30:28,600
with two things here and it didn't

1668
01:30:27,039 --> 01:30:33,100
generate an error of course file online

1669
01:30:28,600 --> 01:30:34,870
shouldn't necessarily work in there so

1670
01:30:33,100 --> 01:30:40,870
what just happened I'm very confused

1671
01:30:34,869 --> 01:30:43,199
right now like why didn't that give me

1672
01:30:40,869 --> 01:30:43,199
an error

1673
01:30:48,109 --> 01:30:53,880
but obviously internal memory passes is

1674
01:30:50,970 --> 01:30:56,600
an issue here internal memory pram is

1675
01:30:53,880 --> 01:30:56,600
apparently not

1676
01:30:58,069 --> 01:31:12,689
but I don't again don't know why so I'm

1677
01:31:09,569 --> 01:31:14,819
at a bit of a loss there and I would

1678
01:31:12,689 --> 01:31:18,089
like to see what it's pre processing

1679
01:31:14,819 --> 01:31:20,219
that - so I could know what's what it

1680
01:31:18,090 --> 01:31:21,869
thinks is wrong one thing I could do as

1681
01:31:20,220 --> 01:31:24,030
well is just make sure that these are

1682
01:31:21,869 --> 01:31:29,430
getting used let me just go ahead and

1683
01:31:24,029 --> 01:31:36,239
put some errors in there yeah so that's

1684
01:31:29,430 --> 01:31:38,150
getting used and that's getting used so

1685
01:31:36,239 --> 01:31:41,399
it is as far as I can tell actually

1686
01:31:38,149 --> 01:31:45,319
doing you know putting into things there

1687
01:31:41,399 --> 01:31:50,759
and yet let's see if this is true hello

1688
01:31:45,319 --> 01:31:53,189
five if I actually replace these with

1689
01:31:50,760 --> 01:31:57,390
something else I'm wondering if there

1690
01:31:53,189 --> 01:32:01,319
was a some other bug and and that there

1691
01:31:57,390 --> 01:32:04,010
just doesn't seem to be so I really just

1692
01:32:01,319 --> 01:32:04,009
don't understand

1693
01:32:09,929 --> 01:32:14,760
I really just don't understand what's

1694
01:32:13,408 --> 01:32:17,939
going on there I wonder if this is a

1695
01:32:14,760 --> 01:32:20,460
problem that placing that inside its own

1696
01:32:17,939 --> 01:32:23,729
macro expansion is creating a problem

1697
01:32:20,460 --> 01:32:27,260
where it's actually using that per that

1698
01:32:23,729 --> 01:32:37,019
as a parameter instead of expanding it I

1699
01:32:27,260 --> 01:32:39,270
guess is what's happening there so I

1700
01:32:37,020 --> 01:32:42,030
suppose there's a smarter way I could do

1701
01:32:39,270 --> 01:32:46,730
this right I could always have these

1702
01:32:42,029 --> 01:32:46,729
take the file name and line number

1703
01:32:51,380 --> 01:32:55,289
because it works for anything where I'm

1704
01:32:53,550 --> 01:32:57,029
calling an actual function but if I'm

1705
01:32:55,289 --> 01:32:59,369
not calling an actual function you get

1706
01:32:57,029 --> 01:33:03,899
the problem is there a way I could make

1707
01:32:59,369 --> 01:33:06,329
push copy you know not be that and if I

1708
01:33:03,899 --> 01:33:07,619
look at it it does look that way because

1709
01:33:06,329 --> 01:33:09,689
if you take a look at what happens

1710
01:33:07,619 --> 01:33:13,670
inside a push copy it looks like it just

1711
01:33:09,689 --> 01:33:17,069
kind of works to a certain extent right

1712
01:33:13,670 --> 01:33:18,929
so maybe if I just make push copy into

1713
01:33:17,069 --> 01:33:21,238
its own function instead of doing it the

1714
01:33:18,929 --> 01:33:24,000
way I was doing it maybe that's

1715
01:33:21,238 --> 01:33:28,589
sufficient so like for example we can

1716
01:33:24,000 --> 01:33:31,079
leave it like that and then here we can

1717
01:33:28,590 --> 01:33:33,719
just create a push copy and that way I

1718
01:33:31,079 --> 01:33:39,059
wouldn't be in that zone of macro

1719
01:33:33,719 --> 01:33:42,649
expansion death I'm not sure we'll find

1720
01:33:39,060 --> 01:33:46,610
out so if we actually had a push copy

1721
01:33:42,649 --> 01:33:46,609
and we did it like this

1722
01:33:50,750 --> 01:33:56,270
and I went ahead and grabbed the same

1723
01:33:53,840 --> 01:33:57,920
like I said same sort of procedure here

1724
01:33:56,270 --> 01:34:01,640
where you're just sort of telling it you

1725
01:33:57,920 --> 01:34:05,930
know what you wanted to do then in

1726
01:34:01,640 --> 01:34:08,600
theory you know this could just work so

1727
01:34:05,930 --> 01:34:10,219
we do the push copy and you do this in

1728
01:34:08,600 --> 01:34:12,320
you know this piece of information here

1729
01:34:10,219 --> 01:34:13,969
what's also nice about that is you could

1730
01:34:12,319 --> 01:34:16,488
get back a pointer to it if you wanted

1731
01:34:13,969 --> 01:34:17,960
to so like there'd be a result now which

1732
01:34:16,488 --> 01:34:21,049
there wasn't before which is kind of

1733
01:34:17,960 --> 01:34:23,210
nice so I feel like maybe that's just

1734
01:34:21,050 --> 01:34:26,779
better all around and it also solves a

1735
01:34:23,210 --> 01:34:31,840
problem that we were having with that

1736
01:34:26,779 --> 01:34:35,448
with that call in general right and so

1737
01:34:31,840 --> 01:34:38,539
yeah I like that a lot more and then

1738
01:34:35,448 --> 01:34:43,299
that way now we don't have this function

1739
01:34:38,539 --> 01:34:46,250
at all like it's just the macro and

1740
01:34:43,300 --> 01:34:50,630
furthermore I guess that means we can do

1741
01:34:46,250 --> 01:34:53,060
this right and so it means that all of

1742
01:34:50,630 --> 01:34:56,359
these are now just doing that one

1743
01:34:53,060 --> 01:35:08,239
stripping or adding activity which seems

1744
01:34:56,359 --> 01:35:12,109
what way better right so I think that's

1745
01:35:08,238 --> 01:35:15,349
I think that's more solid and I'm gonna

1746
01:35:12,109 --> 01:35:17,899
leave it at that okay so let's take a

1747
01:35:15,350 --> 01:35:19,579
look here so in order to make these work

1748
01:35:17,899 --> 01:35:20,960
we now need those to be actual

1749
01:35:19,579 --> 01:35:24,460
parameters that should be pretty easy

1750
01:35:20,960 --> 01:35:29,029
because the size is just a memory index

1751
01:35:24,460 --> 01:35:30,560
or um M as we call it now and this is

1752
01:35:29,029 --> 01:35:32,929
just a void star that's like where you

1753
01:35:30,560 --> 01:35:35,570
wanted to copy from so that should all

1754
01:35:32,930 --> 01:35:37,219
be handled pretty easily all right so

1755
01:35:35,569 --> 01:35:40,609
let's take a look at what we've got now

1756
01:35:37,219 --> 01:35:42,770
Oh push buffer this used to actually be

1757
01:35:40,609 --> 01:35:45,619
a call I guess which I don't know that

1758
01:35:42,770 --> 01:35:49,190
we want it to be because that's sort of

1759
01:35:45,619 --> 01:35:51,649
a different situation where did we do

1760
01:35:49,189 --> 01:35:53,979
here when we call push buffer it cultic

1761
01:35:51,649 --> 01:35:57,799
which is one of these and this is yeah

1762
01:35:53,979 --> 01:36:00,339
so this is like we do push render

1763
01:35:57,800 --> 01:36:00,340
element

1764
01:36:01,988 --> 01:36:11,379
let's call that push render buffer and

1765
01:36:07,699 --> 01:36:11,380
then we'll call this push render buffer

1766
01:36:15,869 --> 01:36:20,590
all right so in theory we have hopefully

1767
01:36:18,640 --> 01:36:22,060
broken nothing and everything works just

1768
01:36:20,590 --> 01:36:23,800
fine now

1769
01:36:22,060 --> 01:36:26,050
and in theory the only difference for

1770
01:36:23,800 --> 01:36:28,630
the code and again I do need to test one

1771
01:36:26,050 --> 01:36:30,940
other thing when we actually change

1772
01:36:28,630 --> 01:36:35,079
handmade internal to zero we need to

1773
01:36:30,939 --> 01:36:37,239
process bugs there right and just see

1774
01:36:35,079 --> 01:36:38,739
what's going on it looks like we've got

1775
01:36:37,239 --> 01:36:45,939
some other ones in line variables

1776
01:36:38,739 --> 01:36:48,849
require at least but it's not an inline

1777
01:36:45,939 --> 01:36:50,739
variable so this must be like a debug ID

1778
01:36:48,850 --> 01:36:52,240
is skillets you know what I don't think

1779
01:36:50,739 --> 01:37:00,489
it's called a debug ID anymore it's

1780
01:36:52,239 --> 01:37:02,050
called a dev ID anyway just want to make

1781
01:37:00,489 --> 01:37:09,029
sure that the non internal build still

1782
01:37:02,050 --> 01:37:09,029
works looks like some weird

1783
01:37:16,010 --> 01:37:20,840
so I'm not sure what's going on here not

1784
01:37:18,890 --> 01:37:24,530
a member of game assets see decoration

1785
01:37:20,840 --> 01:37:27,140
of game assets ah so you know what

1786
01:37:24,529 --> 01:37:29,269
though that is true so all of this stuff

1787
01:37:27,140 --> 01:37:34,280
we really don't all of this stuff where

1788
01:37:29,270 --> 01:37:38,570
we you know parse incoming files really

1789
01:37:34,279 --> 01:37:41,000
not supposed to run anymore right so

1790
01:37:38,569 --> 01:37:43,519
basically this entire file is an if

1791
01:37:41,000 --> 01:37:47,979
handmade internal alright because we're

1792
01:37:43,520 --> 01:37:47,980
not supposed to have any of that stuff

1793
01:37:48,310 --> 01:38:00,190
so I guess what I would say is that kind

1794
01:37:53,569 --> 01:38:00,189
of needs to happen it's what okay I

1795
01:38:00,340 --> 01:38:08,569
wonder what the bug is well we we almost

1796
01:38:06,979 --> 01:38:11,419
never have a for coded crash that's a

1797
01:38:08,569 --> 01:38:13,488
weird one so let's go ahead and go to

1798
01:38:11,420 --> 01:38:16,789
handmade hero again let me just see

1799
01:38:13,488 --> 01:38:20,449
where that ended up with where we were

1800
01:38:16,789 --> 01:38:27,560
at it may have actually saved the

1801
01:38:20,449 --> 01:38:32,170
changes there we go alright so looking

1802
01:38:27,560 --> 01:38:32,170
at handmade internal here what is this

1803
01:38:32,619 --> 01:38:38,599
this is just placing things where it

1804
01:38:35,689 --> 01:38:40,129
doesn't find a structural part I may

1805
01:38:38,600 --> 01:38:48,070
change that to an invalid code path for

1806
01:38:40,130 --> 01:38:48,069
now see where we're at

1807
01:38:52,020 --> 01:38:57,699
so debug UI hood I guess that must be

1808
01:38:56,050 --> 01:39:05,560
something that we forgot to define in

1809
01:38:57,698 --> 01:39:08,859
both cases I'll take a look at see so

1810
01:39:05,560 --> 01:39:10,300
here is debug UI HUD and I'm gonna go

1811
01:39:08,859 --> 01:39:15,250
ahead and guess that we just forgot to

1812
01:39:10,300 --> 01:39:16,900
put it in here again these are just

1813
01:39:15,250 --> 01:39:20,948
making it so that we can compile out all

1814
01:39:16,899 --> 01:39:31,719
of our sort of development code there so

1815
01:39:20,948 --> 01:39:35,579
here's an on internal builds not sure

1816
01:39:31,719 --> 01:39:35,579
what this is complaining about

1817
01:39:40,220 --> 01:39:54,170
so somehow in this case we don't have a

1818
01:39:44,060 --> 01:39:58,039
font ID right meaning that's came back

1819
01:39:54,170 --> 01:40:02,829
as an on thing right alright now I guess

1820
01:39:58,039 --> 01:40:13,310
it didn't so what's the problem here

1821
01:40:02,829 --> 01:40:19,809
you can't write to the UI font info but

1822
01:40:13,310 --> 01:40:19,810
why not hmm

1823
01:40:21,288 --> 01:40:25,689
so I'm not sure exactly what that's

1824
01:40:23,238 --> 01:40:29,629
actually complaining about here because

1825
01:40:25,689 --> 01:40:32,388
in theory this looks like valid memory

1826
01:40:29,630 --> 01:40:34,400
and so you should be able to write to

1827
01:40:32,389 --> 01:40:35,328
this pointer just fine it's not writing

1828
01:40:34,399 --> 01:40:37,460
through the pointer right it's gonna

1829
01:40:35,328 --> 01:40:39,698
overwrite the pointer so I'm not sure

1830
01:40:37,460 --> 01:40:43,368
what that's actually complaining about

1831
01:40:39,698 --> 01:40:44,750
it looks more like an assertion I wonder

1832
01:40:43,368 --> 01:40:48,889
if it's an assertion that's actually

1833
01:40:44,750 --> 01:40:50,719
somewhere else maybe an inline code it

1834
01:40:48,889 --> 01:40:54,019
could be because of the get font info

1835
01:40:50,719 --> 01:40:56,149
call maybe this this font ID value isn't

1836
01:40:54,019 --> 01:41:02,719
quite right or something let's take a

1837
01:40:56,149 --> 01:41:18,319
look at that so it's probably this I

1838
01:41:02,719 --> 01:41:20,510
would assume I don't actually know so if

1839
01:41:18,319 --> 01:41:23,238
we look at the defines for assert here

1840
01:41:20,510 --> 01:41:24,380
handmade slow is actually the thing that

1841
01:41:23,238 --> 01:41:25,729
determines it so the asserts are all

1842
01:41:24,380 --> 01:41:28,609
compiled in and since there's a right

1843
01:41:25,729 --> 01:41:34,848
directly to D word 0 that pretty much

1844
01:41:28,609 --> 01:41:37,038
lets you know that that pretty much

1845
01:41:34,849 --> 01:41:39,380
tells us that that this is the assertion

1846
01:41:37,038 --> 01:41:40,729
and it's probably the assertion that's

1847
01:41:39,380 --> 01:41:43,099
saying that the thing that you received

1848
01:41:40,729 --> 01:41:44,689
wasn't a font but I have no idea how

1849
01:41:43,099 --> 01:41:47,119
that could actually be possible or why

1850
01:41:44,689 --> 01:41:49,518
it would change between the handmade

1851
01:41:47,118 --> 01:41:51,799
internal version in the non internal

1852
01:41:49,519 --> 01:41:54,440
version so that's a little bit confusing

1853
01:41:51,800 --> 01:41:56,210
right like in other words I'm not sure

1854
01:41:54,439 --> 01:42:00,279
if there's some other and bug we

1855
01:41:56,210 --> 01:42:06,309
introduced there let's just double check

1856
01:42:00,279 --> 01:42:06,309
to see what happens in internal mode

1857
01:42:11,988 --> 01:42:18,589
so internal node works oops

1858
01:42:19,729 --> 01:42:26,219
port does it I didn't actually define it

1859
01:42:23,939 --> 01:42:30,139
to zero there but I guess maybe having

1860
01:42:26,219 --> 01:42:33,739
nothing in it is the same I don't know

1861
01:42:30,139 --> 01:42:33,739
there's internal mode

1862
01:42:40,189 --> 01:42:54,469
there's non internal mode and here's the

1863
01:42:45,658 --> 01:42:57,359
debug build and so I'm correct that it's

1864
01:42:54,469 --> 01:43:03,779
asserting that the type of this asset is

1865
01:42:57,359 --> 01:43:05,578
not a font and if we look at the HHA you

1866
01:43:03,779 --> 01:43:08,518
can see that it gave back basically a

1867
01:43:05,578 --> 01:43:11,938
like I didn't find it right it's saying

1868
01:43:08,519 --> 01:43:13,918
like it couldn't it could not find the

1869
01:43:11,939 --> 01:43:16,499
one that that's being discussed here and

1870
01:43:13,918 --> 01:43:19,168
the question is like why couldn't find

1871
01:43:16,498 --> 01:43:21,389
it you know what I mean and I have no

1872
01:43:19,168 --> 01:43:23,729
idea why and so what I think we need to

1873
01:43:21,389 --> 01:43:28,458
do there is we need to take a look and

1874
01:43:23,729 --> 01:43:28,458
see whether or not that oops

1875
01:43:30,300 --> 01:43:33,659
whether or not there's something that we

1876
01:43:31,979 --> 01:43:38,400
were doing that that needs to happen

1877
01:43:33,658 --> 01:43:40,969
right in internal that is causing a

1878
01:43:38,399 --> 01:43:42,049
problem for us right and there could be

1879
01:43:40,969 --> 01:43:45,189
so

1880
01:43:42,050 --> 01:43:45,189
[Music]

1881
01:43:50,260 --> 01:43:55,840
I can't say I necessarily see why that

1882
01:43:53,470 --> 01:43:58,000
would be the case because the asset

1883
01:43:55,840 --> 01:44:01,029
loading still seems to be relatively the

1884
01:43:58,000 --> 01:44:10,359
same but you know something's obviously

1885
01:44:01,029 --> 01:44:12,819
different we just don't know what again

1886
01:44:10,359 --> 01:44:14,469
nothing particularly compelling in most

1887
01:44:12,819 --> 01:44:16,619
of these they're pretty much what you

1888
01:44:14,470 --> 01:44:16,619
would expect

1889
01:44:25,359 --> 01:44:29,099
you know I don't I don't see anything

1890
01:44:33,479 --> 01:44:39,389
it's it's mostly just you know exactly

1891
01:44:36,789 --> 01:44:39,390
what you would think

1892
01:44:54,380 --> 01:45:09,600
hmm so what's going on there why is it

1893
01:44:59,909 --> 01:45:11,489
having so much trouble with that I would

1894
01:45:09,600 --> 01:45:15,240
kind of like to know I realized we're

1895
01:45:11,489 --> 01:45:17,279
sort of off on a tangent here but the

1896
01:45:15,239 --> 01:45:20,039
game should be able to run in both modes

1897
01:45:17,279 --> 01:45:23,429
and the fact that it can't is a bad sign

1898
01:45:20,039 --> 01:45:27,420
so we've got some lurking bug there that

1899
01:45:23,430 --> 01:45:31,680
we need to take care of if I go ahead

1900
01:45:27,420 --> 01:45:34,560
and say handmade internal one and that

1901
01:45:31,680 --> 01:45:38,100
does work and handmade internal zero

1902
01:45:34,560 --> 01:45:40,950
doesn't work and the place where we're

1903
01:45:38,100 --> 01:45:44,870
stopping is in get font info because

1904
01:45:40,949 --> 01:45:50,429
when we got the font we couldn't find it

1905
01:45:44,869 --> 01:45:58,769
the question is what happened there so I

1906
01:45:50,430 --> 01:46:02,610
will say one thing which is that let me

1907
01:45:58,770 --> 01:46:09,240
run that one more time so if we go

1908
01:46:02,609 --> 01:46:11,339
backwards here and we get the we do the

1909
01:46:09,239 --> 01:46:14,279
like font ID equals get best matched

1910
01:46:11,340 --> 01:46:17,880
font from right I should be able to

1911
01:46:14,279 --> 01:46:20,639
watch this fail when we go through the

1912
01:46:17,880 --> 01:46:24,810
asset system you know and just see

1913
01:46:20,640 --> 01:46:27,750
what's what's wrong why I can't find it

1914
01:46:24,810 --> 01:46:32,190
and I'm guessing it's because there's no

1915
01:46:27,750 --> 01:46:36,270
types yeah so it's like the first asset

1916
01:46:32,189 --> 01:46:39,179
of type for this type ID is not like

1917
01:46:36,270 --> 01:46:43,170
loaded properly and so I'm wondering

1918
01:46:39,180 --> 01:46:46,200
like who is responsible for that being

1919
01:46:43,170 --> 01:46:50,310
messed up and again that sort of code we

1920
01:46:46,199 --> 01:46:53,039
is scheduled for the chopping block but

1921
01:46:50,310 --> 01:46:54,960
it shouldn't be different between these

1922
01:46:53,039 --> 01:46:56,819
two paths so I would like to know what's

1923
01:46:54,960 --> 01:46:58,829
going on there probably the set asset

1924
01:46:56,819 --> 01:47:04,710
type got buried inside an internal block

1925
01:46:58,829 --> 01:47:09,409
accidentally so looking here let's just

1926
01:47:04,710 --> 01:47:09,409
suppose a priority that was the case

1927
01:47:13,460 --> 01:47:21,600
this would be where we would expect that

1928
01:47:15,979 --> 01:47:23,099
yep oh wait no that's right there so

1929
01:47:21,600 --> 01:47:26,760
this is where this is happening

1930
01:47:23,100 --> 01:47:28,680
is there something in here that we

1931
01:47:26,760 --> 01:47:33,500
actually needed to have happen that's

1932
01:47:28,680 --> 01:47:33,500
not happening I wonder

1933
01:47:55,630 --> 01:48:03,739
so seeing is how it just uses global

1934
01:48:00,229 --> 01:48:06,409
asset index presumably as long as global

1935
01:48:03,739 --> 01:48:07,039
asset index is correct it should be okay

1936
01:48:06,409 --> 01:48:13,399
right

1937
01:48:07,039 --> 01:48:16,159
and so when we come through here where

1938
01:48:13,399 --> 01:48:18,619
do we set that and how it's really all

1939
01:48:16,159 --> 01:48:20,689
we kind of need to know so you can see

1940
01:48:18,619 --> 01:48:23,239
us just incrementing the asset counter

1941
01:48:20,689 --> 01:48:29,809
here we get the global asset index that

1942
01:48:23,239 --> 01:48:32,619
way that really shouldn't be dependent

1943
01:48:29,810 --> 01:48:32,620
on this block

1944
01:48:46,998 --> 01:48:49,998
hmm

1945
01:48:53,550 --> 01:49:00,940
is there some part about us writing the

1946
01:48:57,159 --> 01:49:08,739
tags out wrong that like this is

1947
01:49:00,939 --> 01:49:11,319
correcting four or something because

1948
01:49:08,739 --> 01:49:13,389
again I don't see it like just looking

1949
01:49:11,319 --> 01:49:21,460
at what's happening here there really

1950
01:49:13,390 --> 01:49:27,060
isn't a lot of reason to suspect that

1951
01:49:21,460 --> 01:49:27,060
code of doing anything really relevant

1952
01:49:40,569 --> 01:49:45,619
so I guess I don't have any other ideas

1953
01:49:43,340 --> 01:49:50,420
so I think what I'm gonna do is I'll

1954
01:49:45,619 --> 01:49:53,840
just loosely step through this source

1955
01:49:50,420 --> 01:49:56,960
path and I'm gonna step through it once

1956
01:49:53,840 --> 01:50:00,920
the correct way and once the incorrect

1957
01:49:56,960 --> 01:50:04,489
way and just see if I can spot anything

1958
01:50:00,920 --> 01:50:07,100
obvious that it's doing differently so

1959
01:50:04,489 --> 01:50:09,679
in the asset system I'm just gonna set a

1960
01:50:07,100 --> 01:50:12,380
break point when we enter this part of

1961
01:50:09,680 --> 01:50:14,869
the code and I'm just gonna see what's

1962
01:50:12,380 --> 01:50:16,400
going on so we're gonna come through

1963
01:50:14,869 --> 01:50:20,840
here we're gonna get the file asset

1964
01:50:16,399 --> 01:50:23,420
counts out of this file it says one

1965
01:50:20,840 --> 01:50:25,069
hundred and sixty nine of them for a

1966
01:50:23,420 --> 01:50:31,640
good measure I might as well look at

1967
01:50:25,069 --> 01:50:34,789
what the file is I don't know if there's

1968
01:50:31,640 --> 01:50:38,750
any okay yeah so the file stem is intro

1969
01:50:34,789 --> 01:50:41,479
cutscene and so if we're doing that we

1970
01:50:38,750 --> 01:50:44,569
just want to know like okay intro

1971
01:50:41,479 --> 01:50:49,069
cutscene has 169 things in it so we

1972
01:50:44,569 --> 01:50:52,189
start reading them like so when they

1973
01:50:49,069 --> 01:50:54,769
come we loop through each asset the

1974
01:50:52,189 --> 01:51:00,049
first global asset index for that case

1975
01:50:54,770 --> 01:51:05,000
is one what we would expect we're gonna

1976
01:51:00,050 --> 01:51:06,409
do some nonsense here that I don't feel

1977
01:51:05,000 --> 01:51:09,319
like should be doing anything but maybe

1978
01:51:06,409 --> 01:51:14,779
is somehow we're gonna look at the type

1979
01:51:09,319 --> 01:51:19,849
ID and we're gonna search the tags in

1980
01:51:14,779 --> 01:51:24,699
this file well actually that we loaded

1981
01:51:19,850 --> 01:51:28,010
in right to see whether we can find one

1982
01:51:24,699 --> 01:51:30,409
that's the basic category we're then

1983
01:51:28,010 --> 01:51:33,230
going to set the asset type of that

1984
01:51:30,409 --> 01:51:40,010
index to that which will start to string

1985
01:51:33,229 --> 01:51:42,109
it together and that's really it so

1986
01:51:40,010 --> 01:51:45,619
that's exactly what we would have

1987
01:51:42,109 --> 01:51:48,469
expected to have happen if I go ahead

1988
01:51:45,619 --> 01:51:49,849
and just jump here to where the fonts

1989
01:51:48,470 --> 01:51:52,490
actually are coming from it would have

1990
01:51:49,850 --> 01:51:55,270
been bass game I believe and they get

1991
01:51:52,489 --> 01:51:55,269
found properly

1992
01:51:57,939 --> 01:52:06,949
let me do that one more time

1993
01:52:00,020 --> 01:52:09,290
so here's bass game right

1994
01:52:06,949 --> 01:52:11,720
it's got foreign to Sony and assets in

1995
01:52:09,289 --> 01:52:15,649
it let's see just real quick

1996
01:52:11,720 --> 01:52:22,909
what is the global asset index and in

1997
01:52:15,649 --> 01:52:26,799
this case it's 170 and we're doing the

1998
01:52:22,909 --> 01:52:26,800
rebasing here off of the file tag bass

1999
01:52:28,029 --> 01:52:32,949
does file tag base need to be no I don't

2000
01:52:30,649 --> 01:52:32,949
think so

2001
01:52:36,010 --> 01:52:48,860
so there was no type ID for that one

2002
01:52:39,260 --> 01:52:51,650
whatever it was that came in there a lot

2003
01:52:48,859 --> 01:52:54,380
of things there's no type ID which seems

2004
01:52:51,649 --> 01:52:58,210
bad but I think those are actually ok

2005
01:52:54,380 --> 01:52:58,210
technically because they're fonts

2006
01:53:03,430 --> 01:53:06,850
there's the font

2007
01:53:09,868 --> 01:53:18,598
and it's 275 so all right let's do a

2008
01:53:14,429 --> 01:53:21,359
recompile here I'm gonna set handy

2009
01:53:18,599 --> 01:53:23,520
internal zero and just see if I can spot

2010
01:53:21,359 --> 01:53:27,779
a difference if not we'll save it for

2011
01:53:23,520 --> 01:53:30,389
tomorrow here is our file asset count

2012
01:53:27,779 --> 01:53:33,349
and our first file it looks the same

2013
01:53:30,389 --> 01:53:36,210
which is good that's what we want to see

2014
01:53:33,349 --> 01:53:38,489
we can sort of do a spot check here you

2015
01:53:36,210 --> 01:53:41,969
know come through get the first global

2016
01:53:38,488 --> 01:53:49,799
asset index of one verify that it also

2017
01:53:41,969 --> 01:53:54,989
creates a plate type and it does then we

2018
01:53:49,800 --> 01:54:01,670
go in to set asset type right and that

2019
01:53:54,988 --> 01:54:04,939
all seems fine so no real worries there

2020
01:54:01,670 --> 01:54:13,199
let's go ahead and run again oops

2021
01:54:04,939 --> 01:54:23,908
deny not set a breakpoint oh so we

2022
01:54:13,198 --> 01:54:25,589
didn't load our other file so the

2023
01:54:23,908 --> 01:54:28,609
problem is actually that we just aren't

2024
01:54:25,590 --> 01:54:28,610
loading the files

2025
01:54:35,140 --> 01:54:38,650
how did that happen

2026
01:54:41,439 --> 01:54:49,269
let's try this again so run to here

2027
01:54:50,739 --> 01:54:57,699
first file in char cutscene looking up

2028
01:54:55,399 --> 01:54:57,699
the header

2029
01:55:04,890 --> 01:55:08,960
that does not look correct

2030
01:55:20,139 --> 01:55:24,489
although it could actually be correct so

2031
01:55:22,539 --> 01:55:27,238
we've got at a count of 227 asset count

2032
01:55:24,488 --> 01:55:27,238
of 170

2033
01:55:33,840 --> 01:55:44,170
right okay so somehow we're not even

2034
01:55:38,949 --> 01:55:46,439
looping over the correct number although

2035
01:55:44,170 --> 01:55:54,690
actually no that's not true because it's

2036
01:55:46,439 --> 01:55:54,689
zero is not counted so we're just not

2037
01:55:57,270 --> 01:56:03,100
we're just not correctly adding the

2038
01:56:00,130 --> 01:56:04,079
number of files somehow so something's

2039
01:56:03,100 --> 01:56:07,360
weird here

2040
01:56:04,079 --> 01:56:11,829
we got a step back for a second

2041
01:56:07,359 --> 01:56:20,889
so when we come through here we're doing

2042
01:56:11,829 --> 01:56:25,359
this nonsense right and for every file

2043
01:56:20,890 --> 01:56:29,220
in the file group we're creating one

2044
01:56:25,359 --> 01:56:34,710
source file so this is the issue I guess

2045
01:56:29,220 --> 01:56:38,760
in its entirety so hold on let's see why

2046
01:56:34,710 --> 01:56:43,539
here is me initializing two source files

2047
01:56:38,760 --> 01:56:50,949
and yet somehow that only results in two

2048
01:56:43,539 --> 01:57:00,659
total files interesting so what's going

2049
01:56:50,949 --> 01:57:00,659
on there in its source HHA

2050
01:57:10,930 --> 01:57:30,159
oh my god seriously seriously so where

2051
01:57:26,350 --> 01:57:32,380
did we set that did you see that so the

2052
01:57:30,159 --> 01:57:43,510
reason is because we put in space for

2053
01:57:32,380 --> 01:57:46,810
extra files but this is wrong that's

2054
01:57:43,510 --> 01:57:50,470
lame I feel like maybe the sets a mini

2055
01:57:46,810 --> 01:57:54,160
owl of shame sort of so the problem

2056
01:57:50,470 --> 01:57:55,510
there was just that you know we we were

2057
01:57:54,159 --> 01:57:57,670
maybe a little bit too that should have

2058
01:57:55,510 --> 01:57:59,650
just crashed or giving us a hard error

2059
01:57:57,670 --> 01:58:02,079
but instead we kind of handle the error

2060
01:57:59,649 --> 01:58:03,909
by saying oh well I guess we're loading

2061
01:58:02,079 --> 01:58:06,460
a file that's too many files so we just

2062
01:58:03,909 --> 01:58:11,229
won't load it and not mention it which

2063
01:58:06,460 --> 01:58:13,899
is not great right but I think that's

2064
01:58:11,229 --> 01:58:16,659
our only problem right was just that we

2065
01:58:13,899 --> 01:58:19,119
didn't you know we had left room for a

2066
01:58:16,659 --> 01:58:21,550
null file and then we didn't actually do

2067
01:58:19,119 --> 01:58:23,559
anything with it so there's the internal

2068
01:58:21,550 --> 01:58:25,300
builds or the non internal build running

2069
01:58:23,560 --> 01:58:27,880
we should be able to kick it back to

2070
01:58:25,300 --> 01:58:31,230
regular optimized release build and not

2071
01:58:27,880 --> 01:58:31,230
have a problem now I would assume

2072
01:58:36,988 --> 01:58:42,339
yeah so that was a waste of time but hey

2073
01:58:40,750 --> 01:58:44,560
at least we now know the internal build

2074
01:58:42,340 --> 01:58:46,659
works so what I'd like to do tomorrow

2075
01:58:44,560 --> 01:58:48,400
then and you can see now none of the

2076
01:58:46,659 --> 01:58:50,920
debug stuff really works either you can

2077
01:58:48,399 --> 01:58:53,379
see that like you know we can you can

2078
01:58:50,920 --> 01:58:55,659
use the editor which uh probably we

2079
01:58:53,380 --> 01:58:57,100
should get rid of at some point but like

2080
01:58:55,659 --> 01:58:58,659
none of the profile or any of that stuff

2081
01:58:57,100 --> 01:59:01,230
it's cuz that's all compiled out should

2082
01:58:58,659 --> 01:59:05,500
probably compile up the editor too um

2083
01:59:01,229 --> 01:59:07,029
alright so let's save everything for

2084
01:59:05,500 --> 01:59:09,279
tomorrow I'd like to go ahead and

2085
01:59:07,029 --> 01:59:12,099
visualize that memory tomorrow now that

2086
01:59:09,279 --> 01:59:13,869
we have the ability to record it coming

2087
01:59:12,100 --> 01:59:15,910
through and this seems pretty clean so

2088
01:59:13,869 --> 01:59:28,289
now I'm happy to turn this back on I

2089
01:59:15,909 --> 01:59:28,289
assume we can also turn slow off yeah

2090
01:59:29,579 --> 01:59:35,949
that's all good all right so I think

2091
01:59:32,380 --> 01:59:38,020
we're good let's go ahead and set this

2092
01:59:35,949 --> 01:59:40,289
back to normal state and we'll do brief

2093
01:59:38,020 --> 01:59:40,290
Q&amp;A

2094
02:00:19,309 --> 02:00:24,250
let's see any questions that what we

2095
02:00:22,038 --> 02:00:24,250
were doing

2096
02:00:34,560 --> 02:00:38,150
on top of questions please

2097
02:01:02,289 --> 02:01:06,609
why do you delete the PD B's before each

2098
02:01:04,899 --> 02:01:08,349
build have you found the compiler having

2099
02:01:06,609 --> 02:01:11,500
issues or leaving junk if you just let

2100
02:01:08,350 --> 02:01:13,390
the copilot uh so the reason that the

2101
02:01:11,500 --> 02:01:18,060
build has to delete the PD B's is

2102
02:01:13,390 --> 02:01:24,100
because we create a new PDB every time

2103
02:01:18,060 --> 02:01:31,840
so in a normal build environment where

2104
02:01:24,100 --> 02:01:34,240
you don't use live code reloading you

2105
02:01:31,840 --> 02:01:36,550
would normally just generate a PDB to a

2106
02:01:34,239 --> 02:01:39,369
file that is the same file every time

2107
02:01:36,550 --> 02:01:41,590
you build so you don't get a problem

2108
02:01:39,369 --> 02:01:43,000
with pdbs like stacking up and getting

2109
02:01:41,590 --> 02:01:45,520
an infinite number of PD B's in your

2110
02:01:43,000 --> 02:01:51,189
build directory right but because we use

2111
02:01:45,520 --> 02:01:56,050
live code reloading and Visual Studio in

2112
02:01:51,189 --> 02:02:00,039
fact probably most buggers don't read

2113
02:01:56,050 --> 02:02:02,380
the PDB and then unlock it you end up

2114
02:02:00,039 --> 02:02:06,039
with a situation where you cannot

2115
02:02:02,380 --> 02:02:09,430
replace the existing PDB file because

2116
02:02:06,039 --> 02:02:11,019
the game is running so what we had to do

2117
02:02:09,430 --> 02:02:13,030
really early on in handmade hero because

2118
02:02:11,020 --> 02:02:14,470
we support hot code reloading like

2119
02:02:13,029 --> 02:02:19,359
without closing the game the code will

2120
02:02:14,470 --> 02:02:22,690
reload when you make changes we had to

2121
02:02:19,359 --> 02:02:23,979
create random names for our PDB files so

2122
02:02:22,689 --> 02:02:25,449
instead of running a PDB to the same

2123
02:02:23,979 --> 02:02:31,689
name every time we pick a random number

2124
02:02:25,449 --> 02:02:34,989
and write the PDB did that right then we

2125
02:02:31,689 --> 02:02:36,909
link that random PDB with a random name

2126
02:02:34,989 --> 02:02:40,210
for the DLL to create a new DLL that

2127
02:02:36,909 --> 02:02:45,309
isn't going to clash you know with our

2128
02:02:40,210 --> 02:02:47,380
existing one right and so we do this

2129
02:02:45,310 --> 02:02:49,539
kind of fancy dance to allowed hop to

2130
02:02:47,380 --> 02:02:51,159
allow hot code reloading to work but

2131
02:02:49,539 --> 02:02:53,619
really they're just deficiencies of the

2132
02:02:51,159 --> 02:02:55,809
coding environment it's because Visual

2133
02:02:53,619 --> 02:03:00,099
Studio is crappy would be another way to

2134
02:02:55,810 --> 02:03:01,720
say it yet another way to say it is to

2135
02:03:00,100 --> 02:03:03,789
say that's because Windows is crappy

2136
02:03:01,720 --> 02:03:07,060
because their system doesn't support

2137
02:03:03,789 --> 02:03:10,090
inode like file manipulation like for

2138
02:03:07,060 --> 02:03:11,590
example Linux does so as a result the

2139
02:03:10,090 --> 02:03:13,360
default way you interact with files

2140
02:03:11,590 --> 02:03:14,619
unless you go through extraordinary

2141
02:03:13,359 --> 02:03:16,179
lengths and use volume Shadow Copy

2142
02:03:14,619 --> 02:03:18,670
Service and all this other garbage

2143
02:03:16,180 --> 02:03:20,440
can't do stuff like replace this file

2144
02:03:18,670 --> 02:03:22,300
even though someone's using it and make

2145
02:03:20,439 --> 02:03:26,289
the next person who goes to use it get

2146
02:03:22,300 --> 02:03:29,230
the new file like doesn't work right and

2147
02:03:26,289 --> 02:03:31,779
so yeah you just fundamentally find

2148
02:03:29,229 --> 02:03:33,039
yourself in a position where you have to

2149
02:03:31,779 --> 02:03:34,479
work around those things and that's why

2150
02:03:33,039 --> 02:03:35,890
we delete the PDP's is because otherwise

2151
02:03:34,479 --> 02:03:37,779
they would just stack up forever because

2152
02:03:35,890 --> 02:03:40,500
we're creating a new one completely new

2153
02:03:37,779 --> 02:03:40,500
name every time

2154
02:03:52,550 --> 02:03:59,340
in that system do you have to transfer

2155
02:03:55,649 --> 02:04:01,920
all push functions into macros I'm not

2156
02:03:59,340 --> 02:04:04,529
sure what you mean by in that system but

2157
02:04:01,920 --> 02:04:06,840
generally speaking if you want to push

2158
02:04:04,529 --> 02:04:08,639
things onto memory and track what file

2159
02:04:06,840 --> 02:04:11,760
and line number they are you do have to

2160
02:04:08,639 --> 02:04:12,869
do that right lucid Frost what are some

2161
02:04:11,760 --> 02:04:14,340
better alternatives to things like if

2162
02:04:12,869 --> 02:04:16,559
desks that a language could provide well

2163
02:04:14,340 --> 02:04:19,920
in our case it's fairly obvious right if

2164
02:04:16,560 --> 02:04:20,460
you were designing a language and had a

2165
02:04:19,920 --> 02:04:23,399
clue

2166
02:04:20,460 --> 02:04:26,219
you would just include the ability for

2167
02:04:23,399 --> 02:04:34,849
someone to say get me the file and line

2168
02:04:26,219 --> 02:04:37,230
number of the person who called me done

2169
02:04:34,850 --> 02:04:38,340
so all functions to allocating memory to

2170
02:04:37,229 --> 02:04:39,658
become macros if you want to keep track

2171
02:04:38,340 --> 02:04:42,079
of where the memory is allocated yes

2172
02:04:39,658 --> 02:04:42,079
correct

2173
02:04:43,340 --> 02:04:46,949
how much more stable has Remedy gotten

2174
02:04:45,810 --> 02:04:48,659
since you started using it on streem

2175
02:04:46,948 --> 02:04:49,769
were there any particularly big issues

2176
02:04:48,658 --> 02:04:52,408
that caused you trouble that have been

2177
02:04:49,770 --> 02:04:54,690
fixed in that time yeah actually there's

2178
02:04:52,408 --> 02:04:59,509
been tons of revisions to remedy that

2179
02:04:54,689 --> 02:05:01,888
made it more stable since we started

2180
02:04:59,510 --> 02:05:03,060
what I would say is use I mean you see

2181
02:05:01,889 --> 02:05:04,380
me usually at every day on stream now

2182
02:05:03,060 --> 02:05:07,409
have you seen any issues

2183
02:05:04,380 --> 02:05:09,389
I just don't run into them anymore it

2184
02:05:07,408 --> 02:05:11,189
seems very stable I really haven't had

2185
02:05:09,389 --> 02:05:13,920
any issues there's some features I'd

2186
02:05:11,189 --> 02:05:15,719
like to see obviously but you know I

2187
02:05:13,920 --> 02:05:18,770
said as a replacement for Visual Studio

2188
02:05:15,719 --> 02:05:18,770
now it's just fine

2189
02:05:22,158 --> 02:05:26,479
do you think unit using do you think

2190
02:05:24,560 --> 02:05:27,620
using tests would have made it easier to

2191
02:05:26,479 --> 02:05:30,738
find the code paths that were broken

2192
02:05:27,619 --> 02:05:33,769
with this refactor refactor what

2193
02:05:30,738 --> 02:05:36,079
refactor first of all we have not

2194
02:05:33,770 --> 02:05:37,400
refactored anything I don't really like

2195
02:05:36,079 --> 02:05:41,289
that name either because it doesn't

2196
02:05:37,399 --> 02:05:44,049
refer to anything and specifically write

2197
02:05:41,289 --> 02:05:47,869
it just as a term that means programming

2198
02:05:44,050 --> 02:05:53,600
but I I'm not sure what tests we would

2199
02:05:47,869 --> 02:05:55,429
have had in this case right I mean first

2200
02:05:53,600 --> 02:05:58,520
of all no code did break with the

2201
02:05:55,429 --> 02:06:00,739
changes we made all the code worked

2202
02:05:58,520 --> 02:06:02,210
exactly correctly the thing that

2203
02:06:00,738 --> 02:06:04,099
actually was wrong was just a thing that

2204
02:06:02,210 --> 02:06:06,529
with handmade internal setting to zero

2205
02:06:04,100 --> 02:06:08,929
we had not tested that code paved path

2206
02:06:06,529 --> 02:06:10,609
in forever so there was just a one bug

2207
02:06:08,929 --> 02:06:12,679
with asset loading that we introduced

2208
02:06:10,609 --> 02:06:16,579
long ago like many many weeks ago right

2209
02:06:12,679 --> 02:06:18,170
and would when it tests have fixed that

2210
02:06:16,579 --> 02:06:22,309
no I mean we found it quite quickly

2211
02:06:18,170 --> 02:06:23,960
actually so even I can't even think of a

2212
02:06:22,310 --> 02:06:25,219
test that would have caught that error

2213
02:06:23,960 --> 02:06:27,020
that could have been written in less

2214
02:06:25,219 --> 02:06:30,859
than the 15 minutes it took to find it

2215
02:06:27,020 --> 02:06:33,440
right so I guess one way to say it would

2216
02:06:30,859 --> 02:06:37,069
be no test would have been a complete

2217
02:06:33,439 --> 02:06:41,479
waste of time is that why you put all

2218
02:06:37,069 --> 02:06:42,769
push functions in the same file I know I

2219
02:06:41,479 --> 02:06:44,079
think I put them all stepfather's

2220
02:06:42,770 --> 02:06:47,239
because they all have to do with memory

2221
02:06:44,079 --> 02:06:49,760
probably I don't think I put them in

2222
02:06:47,238 --> 02:06:52,099
there because I was thinking ahead I

2223
02:06:49,760 --> 02:06:52,760
just put them there because that's where

2224
02:06:52,100 --> 02:06:55,280
they go right

2225
02:06:52,760 --> 02:06:57,469
the calls that have to do with putting

2226
02:06:55,279 --> 02:06:59,719
memory into an arena should kind of all

2227
02:06:57,469 --> 02:07:01,250
be in one file so that I can just see

2228
02:06:59,719 --> 02:07:07,939
what puts mime around and Reena here it

2229
02:07:01,250 --> 02:07:09,710
is right if you didn't do code reloading

2230
02:07:07,939 --> 02:07:11,119
say for release would you still have the

2231
02:07:09,710 --> 02:07:13,880
platform XC and a separate gala for the

2232
02:07:11,119 --> 02:07:16,969
game code no I don't think there's be

2233
02:07:13,880 --> 02:07:19,340
any reason to do that you could still do

2234
02:07:16,969 --> 02:07:22,039
it just because there's no real reason

2235
02:07:19,340 --> 02:07:24,739
why you couldn't like you don't

2236
02:07:22,039 --> 02:07:26,420
necessarily get any benefits from

2237
02:07:24,738 --> 02:07:29,059
welding the code together in any

2238
02:07:26,420 --> 02:07:31,789
particular way because those boundaries

2239
02:07:29,060 --> 02:07:33,139
are pretty low frequency so you don't

2240
02:07:31,789 --> 02:07:34,699
really need to take advantage of any

2241
02:07:33,139 --> 02:07:36,199
kind of like linker

2242
02:07:34,699 --> 02:07:40,760
zatia nor something like that that would

2243
02:07:36,199 --> 02:07:44,599
happen there but there's certainly no

2244
02:07:40,760 --> 02:07:47,000
reason not to do it and for really all

2245
02:07:44,600 --> 02:07:49,760
intents versus maybe we will have a way

2246
02:07:47,000 --> 02:07:51,949
to build just a single X Z version just

2247
02:07:49,760 --> 02:07:59,989
for fun I mean we might do that you know

2248
02:07:51,949 --> 02:08:02,569
so I guess I don't know but what I would

2249
02:07:59,989 --> 02:08:05,510
say is it's purely an arbitrary

2250
02:08:02,569 --> 02:08:07,369
distinction that's there in our case for

2251
02:08:05,510 --> 02:08:10,940
no reason other than to support the code

2252
02:08:07,369 --> 02:08:13,180
reloading so we don't need we don't need

2253
02:08:10,939 --> 02:08:16,789
separate dll's for any particular reason

2254
02:08:13,180 --> 02:08:21,230
the renderer on the other hand we have

2255
02:08:16,789 --> 02:08:23,630
as a separate DLL for for a good reason

2256
02:08:21,229 --> 02:08:25,099
and the reason for that is we may want

2257
02:08:23,630 --> 02:08:28,579
to allow people to replace the renderer

2258
02:08:25,100 --> 02:08:30,800
dll without replacing anything else in

2259
02:08:28,579 --> 02:08:33,170
the game if someone just wanted to

2260
02:08:30,800 --> 02:08:36,350
someday cook up a like ray tracing

2261
02:08:33,170 --> 02:08:38,810
renderer for handmade hero it'd be great

2262
02:08:36,350 --> 02:08:41,360
if they could just post a dll that's

2263
02:08:38,810 --> 02:08:43,670
like hey here's a ray trace renderer go

2264
02:08:41,359 --> 02:08:46,009
nuts and it just drops in and works

2265
02:08:43,670 --> 02:08:47,779
right so having the renderer be

2266
02:08:46,010 --> 02:08:49,280
extendable in that way where you can

2267
02:08:47,779 --> 02:08:51,849
just sort of drop in a new renderer and

2268
02:08:49,279 --> 02:08:51,849
make it work

2269
02:08:54,970 --> 02:08:58,699
the chloral location is a many to one

2270
02:08:57,260 --> 02:09:00,619
mapping which is why languages generally

2271
02:08:58,699 --> 02:09:02,539
don't do it you could but it means

2272
02:09:00,619 --> 02:09:05,989
complications for the runtime code

2273
02:09:02,539 --> 02:09:08,930
generation uh nope it really doesn't

2274
02:09:05,989 --> 02:09:12,219
right and the reason that I say that is

2275
02:09:08,930 --> 02:09:15,980
because if you look at what I just did

2276
02:09:12,220 --> 02:09:19,610
that is what the compiler had to do so

2277
02:09:15,979 --> 02:09:21,289
anything I can just do by making a macro

2278
02:09:19,609 --> 02:09:25,880
is something the compiler could have

2279
02:09:21,289 --> 02:09:28,100
just done so it really doesn't write

2280
02:09:25,880 --> 02:09:31,369
it's like that is not a complication

2281
02:09:28,100 --> 02:09:34,340
that is ownerís if your compiler is any

2282
02:09:31,369 --> 02:09:37,909
good at all it's really basic it's just

2283
02:09:34,340 --> 02:09:40,039
saying I in fact a template is the same

2284
02:09:37,909 --> 02:09:41,779
way right C++ compilers for word you

2285
02:09:40,039 --> 02:09:43,579
have to deal with templates which

2286
02:09:41,779 --> 02:09:45,979
essentially say generate a different

2287
02:09:43,579 --> 02:09:48,679
version of this code path based on what

2288
02:09:45,979 --> 02:09:52,189
the declare the declaration

2289
02:09:48,679 --> 02:09:57,230
of the person doing this thing does it

2290
02:09:52,189 --> 02:09:59,569
the call site and they've got that so I

2291
02:09:57,229 --> 02:10:03,158
know they could do it they just choose

2292
02:09:59,569 --> 02:10:04,698
to not support features like that

2293
02:10:03,158 --> 02:10:09,349
because they don't know what they're

2294
02:10:04,698 --> 02:10:11,960
doing right they they basically almost

2295
02:10:09,350 --> 02:10:14,030
all complicated languages actually do

2296
02:10:11,960 --> 02:10:16,579
the work of doing things like this and

2297
02:10:14,029 --> 02:10:18,139
then are so short-sighted in the way

2298
02:10:16,579 --> 02:10:19,729
they design things that they don't

2299
02:10:18,140 --> 02:10:21,920
actually allow you to use them in useful

2300
02:10:19,729 --> 02:10:24,500
ways in fact you could argue that the

2301
02:10:21,920 --> 02:10:27,710
entire design is C++ has been one giant

2302
02:10:24,500 --> 02:10:29,539
exercise in making massive complexity in

2303
02:10:27,710 --> 02:10:31,219
the compiler that actually yields you

2304
02:10:29,539 --> 02:10:33,380
know practical benefit to the programmer

2305
02:10:31,219 --> 02:10:35,420
it's kind of remarkable actually how

2306
02:10:33,380 --> 02:10:44,060
complex the C++ compiler is for how

2307
02:10:35,420 --> 02:10:46,719
literally it offers you alright we're

2308
02:10:44,060 --> 02:10:46,719
done with questions

2309
02:10:53,550 --> 02:10:56,949
all right thank you everyone for joining

2310
02:10:55,539 --> 02:10:58,000
me for the episode our hand made here at

2311
02:10:56,948 --> 02:10:58,750
so the pleasure coating with you as

2312
02:10:58,000 --> 02:11:00,279
always

2313
02:10:58,750 --> 02:11:02,948
if you would like to follow along the

2314
02:11:00,279 --> 02:11:05,710
series you can always do so at handmade

2315
02:11:02,948 --> 02:11:07,299
hero org if you pre-order the source

2316
02:11:05,710 --> 02:11:10,090
code that's alright if you preorder the

2317
02:11:07,300 --> 02:11:13,090
game you can get the source code any day

2318
02:11:10,090 --> 02:11:14,650
you want I updated after we stream and

2319
02:11:13,090 --> 02:11:17,949
so you can follow along at home and play

2320
02:11:14,649 --> 02:11:19,869
around with it for example some of the

2321
02:11:17,948 --> 02:11:22,210
things that we talked about if you want

2322
02:11:19,869 --> 02:11:24,969
to try and beat me to it you've got all

2323
02:11:22,210 --> 02:11:28,239
day today to go try to put some memory

2324
02:11:24,969 --> 02:11:29,850
visualisation into the system maybe you

2325
02:11:28,238 --> 02:11:32,468
should give it a shot it's good practice

2326
02:11:29,850 --> 02:11:35,020
to always try to do something that I say

2327
02:11:32,469 --> 02:11:37,329
I'm going to do before I do it because

2328
02:11:35,020 --> 02:11:38,679
then you can see what it feels like to

2329
02:11:37,329 --> 02:11:41,140
try and have to do it without already

2330
02:11:38,679 --> 02:11:41,920
having seen someone do it in a

2331
02:11:41,140 --> 02:11:42,820
particular way

2332
02:11:41,920 --> 02:11:44,109
and who knows you may come up with

2333
02:11:42,819 --> 02:11:46,059
something better than what I'm gonna

2334
02:11:44,109 --> 02:11:49,119
come up with which is even which is even

2335
02:11:46,060 --> 02:11:50,620
more cool right so that's about it for

2336
02:11:49,119 --> 02:11:52,390
today I'll be back here for tomorrow

2337
02:11:50,619 --> 02:11:55,329
we'll be at the normal time tomorrow

2338
02:11:52,390 --> 02:11:57,190
which is a noon today was an early one

2339
02:11:55,329 --> 02:11:59,170
at 10:00 we'll be at neural time

2340
02:11:57,189 --> 02:12:00,309
tomorrow so see everyone back there for

2341
02:11:59,170 --> 02:12:01,869
that when we'll put the memory

2342
02:12:00,310 --> 02:12:04,560
visualization in and then we can move on

2343
02:12:01,869 --> 02:12:06,429
to working on the ground cover stuff I

2344
02:12:04,560 --> 02:12:08,289
just want to have the memory verse laced

2345
02:12:06,429 --> 02:12:09,670
in there so I can demonstrate the

2346
02:12:08,289 --> 02:12:10,929
difference when I change things like

2347
02:12:09,670 --> 02:12:12,940
those enemies trucks how much memory is

2348
02:12:10,929 --> 02:12:15,069
being used and so on that's kind of hard

2349
02:12:12,939 --> 02:12:16,059
to get a feel for that right now it's

2350
02:12:15,069 --> 02:12:19,000
just something that we'd like to be able

2351
02:12:16,060 --> 02:12:20,230
to look at that's it for today I hope

2352
02:12:19,000 --> 02:12:21,310
see everyone back here tomorrow till

2353
02:12:20,229 --> 02:12:22,569
then have fun programming I'll see

2354
02:12:21,310 --> 02:12:24,690
everyone the internet take it easy

2355
02:12:22,569 --> 02:12:24,689
everybody

