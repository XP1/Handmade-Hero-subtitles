1
00:00:00,650 --> 00:00:05,250
hello everyone and welcome to hand made

2
00:00:03,388 --> 00:00:10,429
here oh sure we code a complete game

3
00:00:05,250 --> 00:00:13,710
live on stream it is time for us to

4
00:00:10,429 --> 00:00:17,730
actually you well I I don't want to say

5
00:00:13,710 --> 00:00:21,359
use but have some fun with I guess our

6
00:00:17,730 --> 00:00:23,699
we made a memory visualization so we

7
00:00:21,359 --> 00:00:26,460
could see how we were using memory and

8
00:00:23,699 --> 00:00:28,710
handmade hero and the reason I wanted to

9
00:00:26,460 --> 00:00:30,570
do that was because our enemy structure

10
00:00:28,710 --> 00:00:32,808
is super piggy and that was intentional

11
00:00:30,570 --> 00:00:38,280
we just don't care about it right now

12
00:00:32,808 --> 00:00:41,128
but I would like to move into a phase of

13
00:00:38,280 --> 00:00:44,270
the product where we do care and have

14
00:00:41,128 --> 00:00:46,710
some idea of what we're doing with that

15
00:00:44,270 --> 00:00:48,359
and in order to do that I wanted to have

16
00:00:46,710 --> 00:00:52,230
a memory visualization we could look at

17
00:00:48,359 --> 00:00:57,509
just to have some idea of what was going

18
00:00:52,229 --> 00:00:59,578
on there so I just to I guess give some

19
00:00:57,509 --> 00:01:01,710
perspective on where that was at for

20
00:00:59,579 --> 00:01:04,829
people who may have missed it that's not

21
00:01:01,710 --> 00:01:09,540
high school remedy what we want to do

22
00:01:04,829 --> 00:01:11,429
here also I don't I think I'm behind on

23
00:01:09,540 --> 00:01:14,820
my remedy you know what

24
00:01:11,430 --> 00:01:20,130
pause everything I just said do we need

25
00:01:14,819 --> 00:01:24,769
to update our to bugger how do I update

26
00:01:20,129 --> 00:01:30,359
my debugger update my debugger download

27
00:01:24,769 --> 00:01:33,899
download I don't know how to use this

28
00:01:30,359 --> 00:01:36,420
thing I don't know I've never known how

29
00:01:33,900 --> 00:01:39,689
you're supposed to use this thing all I

30
00:01:36,420 --> 00:01:42,299
know is I had to use it to get remedy so

31
00:01:39,688 --> 00:01:46,319
I did it's there a remedy that there we

32
00:01:42,299 --> 00:01:47,820
go remedy dot H dot IO alright so I want

33
00:01:46,319 --> 00:01:50,699
to say there's have been a fairly major

34
00:01:47,819 --> 00:01:51,148
update yah27 alright so let's get that

35
00:01:50,700 --> 00:01:55,020
going

36
00:01:51,149 --> 00:01:56,070
I think it has some some good features

37
00:01:55,019 --> 00:01:57,718
in it too

38
00:01:56,069 --> 00:01:59,279
he actually fixed he added a

39
00:01:57,718 --> 00:02:01,978
cut-and-paste for us to in the watch

40
00:01:59,280 --> 00:02:03,689
window just based on what we were doing

41
00:02:01,978 --> 00:02:06,509
the other day he was like sorry there

42
00:02:03,688 --> 00:02:08,758
wasn't one I added one for you so he

43
00:02:06,509 --> 00:02:10,199
George always adds so much stuff for us

44
00:02:08,758 --> 00:02:13,259
I I want to always keep up-to-date

45
00:02:10,199 --> 00:02:15,000
because he's been so great about

46
00:02:13,259 --> 00:02:18,840
updating it with with new features

47
00:02:15,000 --> 00:02:20,908
whenever we run into stuff so yeah I

48
00:02:18,840 --> 00:02:23,120
just wanted to get that get that going

49
00:02:20,908 --> 00:02:27,530
okay so let's try that one more time

50
00:02:23,120 --> 00:02:30,780
rewind now let's start remedy two seven

51
00:02:27,530 --> 00:02:33,000
and you know what it also has that's

52
00:02:30,780 --> 00:02:35,390
pretty awesome check this out it's got

53
00:02:33,000 --> 00:02:38,340
this new layout feature where you can

54
00:02:35,389 --> 00:02:40,439
save all your window layouts in here and

55
00:02:38,340 --> 00:02:42,539
like switch between them real quick so

56
00:02:40,439 --> 00:02:45,900
you can just like pull back you know oh

57
00:02:42,539 --> 00:02:47,759
I want layout 0 1 2 3 and I can name

58
00:02:45,900 --> 00:02:50,730
them different stuff so if we want to

59
00:02:47,759 --> 00:02:53,489
have like a memory inspection one versus

60
00:02:50,729 --> 00:02:55,858
like a threading one you can create

61
00:02:53,489 --> 00:02:59,759
different layouts and switch and that

62
00:02:55,859 --> 00:03:01,439
seems really cool I don't know how much

63
00:02:59,759 --> 00:03:02,969
I will actually use it because I've

64
00:03:01,439 --> 00:03:04,799
always kind of just stuck with this

65
00:03:02,969 --> 00:03:06,299
layout I mean Visual Studio is crappy

66
00:03:04,799 --> 00:03:08,849
and I don't think it lets you switch

67
00:03:06,299 --> 00:03:10,739
layouts right quickly so I've never

68
00:03:08,848 --> 00:03:12,268
really thought about that but maybe we

69
00:03:10,739 --> 00:03:14,370
can try and think about that and start

70
00:03:12,269 --> 00:03:16,200
to add stuff I do suspect as remedy

71
00:03:14,370 --> 00:03:17,969
becomes more powerful there will

72
00:03:16,199 --> 00:03:19,409
probably be other windows too and stuff

73
00:03:17,969 --> 00:03:21,419
like that and then it really would make

74
00:03:19,409 --> 00:03:22,918
sense to to be able to have a bunch of

75
00:03:21,419 --> 00:03:23,880
different layouts either way I thought

76
00:03:22,919 --> 00:03:28,260
that was pretty cool

77
00:03:23,879 --> 00:03:29,969
um so anyway I'm gonna go ahead and open

78
00:03:28,259 --> 00:03:33,060
up handmade hero and just show you what

79
00:03:29,969 --> 00:03:35,519
I mean about the memory layout stuff so

80
00:03:33,060 --> 00:03:37,169
what happens now is you know we've got

81
00:03:35,519 --> 00:03:39,180
these like debug things I'm hitting the

82
00:03:37,169 --> 00:03:42,419
F Keys right you can see it switching

83
00:03:39,180 --> 00:03:44,879
between those and so if we go to the

84
00:03:42,419 --> 00:03:47,310
memory view what it allows us to do is

85
00:03:44,879 --> 00:03:51,090
see which arenas exist in the system

86
00:03:47,310 --> 00:03:52,889
currently and we can name them so here

87
00:03:51,090 --> 00:03:53,909
are some that have never been named and

88
00:03:52,889 --> 00:03:56,040
I don't know that we care that they were

89
00:03:53,909 --> 00:03:57,539
because it's only one megabyte but maybe

90
00:03:56,039 --> 00:04:00,689
for completeness someday we should name

91
00:03:57,539 --> 00:04:04,560
them but then you can see here we've got

92
00:04:00,689 --> 00:04:06,209
for a permanent storage you can for

93
00:04:04,560 --> 00:04:08,280
carrying you know allocations throughout

94
00:04:06,209 --> 00:04:12,359
the game you can see that we've got 69

95
00:04:08,280 --> 00:04:14,098
megabytes in use for the game itself

96
00:04:12,359 --> 00:04:16,259
we've got two hundred seventy nine

97
00:04:14,098 --> 00:04:19,949
megabytes used for just asset backing

98
00:04:16,259 --> 00:04:22,939
storage which is just bitmaps and stuff

99
00:04:19,949 --> 00:04:25,259
we keep in there for sending down to the

100
00:04:22,939 --> 00:04:27,120
textures and sounds and that sort of

101
00:04:25,259 --> 00:04:29,610
stuff and then

102
00:04:27,120 --> 00:04:31,019
we've got a debug that's taking up 135

103
00:04:29,610 --> 00:04:33,810
minutes so we don't care about that one

104
00:04:31,019 --> 00:04:35,549
because that's just storing old like

105
00:04:33,810 --> 00:04:38,129
debug information in case we want to you

106
00:04:35,550 --> 00:04:39,629
know it's it's basically like all of

107
00:04:38,129 --> 00:04:41,430
that memory arena stuff but then also

108
00:04:39,629 --> 00:04:43,199
like you know this stuff here so that we

109
00:04:41,430 --> 00:04:44,879
can pause frames and you know and look

110
00:04:43,199 --> 00:04:47,370
at different pieces of debug information

111
00:04:44,879 --> 00:04:48,930
right so we don't care about that

112
00:04:47,370 --> 00:04:51,060
because that's not really relevant to

113
00:04:48,930 --> 00:04:53,970
our games performance it's because it

114
00:04:51,060 --> 00:04:55,649
goes away entirely but the part that I'm

115
00:04:53,970 --> 00:04:58,470
interested in talking about now is this

116
00:04:55,649 --> 00:05:01,379
part here the 69 megabyte number now 69

117
00:04:58,470 --> 00:05:04,860
megabytes is child's play on any modern

118
00:05:01,379 --> 00:05:07,009
computer you know the the Unreal Engine

119
00:05:04,860 --> 00:05:14,580
game is probably a 69 megabyte

120
00:05:07,009 --> 00:05:16,259
executable let alone the game but that's

121
00:05:14,579 --> 00:05:18,209
not why I'm interested in it

122
00:05:16,259 --> 00:05:20,759
the reason I mentioned in it is remember

123
00:05:18,209 --> 00:05:23,099
our game is very minimal right now we

124
00:05:20,759 --> 00:05:25,469
have only created a small number of

125
00:05:23,100 --> 00:05:28,110
entities and we want to be able to

126
00:05:25,470 --> 00:05:30,990
create very large worlds here and so I

127
00:05:28,110 --> 00:05:33,120
want that number to be fairly small so

128
00:05:30,990 --> 00:05:34,740
that I know when we create a world that

129
00:05:33,120 --> 00:05:37,019
has a hundred times as many entities

130
00:05:34,740 --> 00:05:39,150
into this one or a thousand times as

131
00:05:37,019 --> 00:05:41,310
many entities and is this one we're not

132
00:05:39,149 --> 00:05:43,620
gonna be in really big trouble and right

133
00:05:41,310 --> 00:05:45,180
now we kind of would be if we wanted a

134
00:05:43,620 --> 00:05:47,788
thousand times more entities than we

135
00:05:45,180 --> 00:05:48,930
have right now which granted maybe we

136
00:05:47,788 --> 00:05:50,399
wouldn't necessarily get to because that

137
00:05:48,930 --> 00:05:53,400
might be just too big of a world for

138
00:05:50,399 --> 00:05:56,909
anyone ever play but that would be what

139
00:05:53,399 --> 00:05:58,259
a six gigabytes if I'm not mistaken is

140
00:05:56,910 --> 00:06:00,840
that right I don't know how many that

141
00:05:58,259 --> 00:06:02,430
would be but well it actually no if it's

142
00:06:00,839 --> 00:06:05,339
six a nine megabytes if I do a thousand

143
00:06:02,430 --> 00:06:09,478
it'd be 69 gigabytes right and so that's

144
00:06:05,339 --> 00:06:11,788
just not feasible and so even a hundred

145
00:06:09,478 --> 00:06:14,668
times to be 6.9 gigabytes or seven

146
00:06:11,788 --> 00:06:17,038
gigabytes right so you can see why

147
00:06:14,668 --> 00:06:18,359
that's a concerning number I'd like to

148
00:06:17,038 --> 00:06:22,168
be able to get this down to something

149
00:06:18,360 --> 00:06:24,439
smaller and more manageable and if we

150
00:06:22,168 --> 00:06:27,089
look at our memory visualisation here

151
00:06:24,439 --> 00:06:29,219
what you can actually see we can hover

152
00:06:27,089 --> 00:06:32,429
over these guys and see who allocated

153
00:06:29,220 --> 00:06:34,289
what and why what you can see here is we

154
00:06:32,430 --> 00:06:36,750
have a bunch of things down here that

155
00:06:34,288 --> 00:06:38,718
are probably pretty uninteresting right

156
00:06:36,750 --> 00:06:40,528
you can see that these are like the

157
00:06:38,718 --> 00:06:42,088
asset rendering

158
00:06:40,528 --> 00:06:43,829
allocations just some basic stuff that

159
00:06:42,088 --> 00:06:45,569
gotta come down here we could go figure

160
00:06:43,829 --> 00:06:46,918
out what those are at some point and

161
00:06:45,569 --> 00:06:49,348
take a look at them in more detail as

162
00:06:46,918 --> 00:06:51,688
necessary what those arenas do and so on

163
00:06:49,348 --> 00:06:53,488
but we probably don't really care about

164
00:06:51,689 --> 00:06:55,889
this very much because this is the big

165
00:06:53,488 --> 00:06:57,538
block here of all of our world data and

166
00:06:55,889 --> 00:06:59,158
that's really what we care the most

167
00:06:57,538 --> 00:07:02,488
about because it's the thing that's

168
00:06:59,158 --> 00:07:06,088
going to scale up as our world gets more

169
00:07:02,488 --> 00:07:08,098
complicated right so if you take a look

170
00:07:06,088 --> 00:07:09,809
at what we've got here you can see that

171
00:07:08,098 --> 00:07:11,728
each one of these things is sort of a

172
00:07:09,809 --> 00:07:14,159
fixed sized chunk and there's a really

173
00:07:11,728 --> 00:07:16,738
good reason for this the reason why each

174
00:07:14,158 --> 00:07:19,558
one is a fixed sized chunk is because we

175
00:07:16,738 --> 00:07:21,838
store our world in fixed sized chunks so

176
00:07:19,559 --> 00:07:24,119
we pack entities into fixed sized chunks

177
00:07:21,838 --> 00:07:28,048
and Buckett them away for future

178
00:07:24,119 --> 00:07:30,719
reference right and so each one of these

179
00:07:28,048 --> 00:07:33,209
chunks is a little storage for what's

180
00:07:30,718 --> 00:07:37,079
being kept in some world data somewhere

181
00:07:33,209 --> 00:07:39,119
that's what's going on right and so you

182
00:07:37,079 --> 00:07:42,149
can also see we've got kind of a bug

183
00:07:39,119 --> 00:07:44,579
here or at least something that's a bit

184
00:07:42,149 --> 00:07:48,238
inefficient you can see that each one of

185
00:07:44,579 --> 00:07:51,959
these things is about a 64 k chunk and

186
00:07:48,238 --> 00:07:54,538
the last one in every block is like

187
00:07:51,959 --> 00:07:58,199
fallow right there's nothing in there

188
00:07:54,538 --> 00:08:01,288
and so you can see that either we have a

189
00:07:58,199 --> 00:08:02,728
bug or and I don't really quite remember

190
00:08:01,288 --> 00:08:11,009
exactly how we did this but this may be

191
00:08:02,728 --> 00:08:14,728
how we did it when we did our we have a

192
00:08:11,009 --> 00:08:17,968
block storage thing that we used in the

193
00:08:14,728 --> 00:08:20,848
platform layer to like record like

194
00:08:17,968 --> 00:08:23,338
pieces that got allocated it may be that

195
00:08:20,848 --> 00:08:26,548
we can't store the last 64 KB cuz a

196
00:08:23,338 --> 00:08:29,038
little bit of its used by that platform

197
00:08:26,548 --> 00:08:32,370
layer right and so you can kind of see

198
00:08:29,038 --> 00:08:35,399
that that creates a nasty wastage

199
00:08:32,370 --> 00:08:37,408
situation here and granted that wastage

200
00:08:35,399 --> 00:08:40,610
might go away if we turned off whatever

201
00:08:37,408 --> 00:08:43,438
memory tracking is happening down there

202
00:08:40,610 --> 00:08:44,970
in the platform layer but that is

203
00:08:43,438 --> 00:08:46,678
something we may want to address at some

204
00:08:44,970 --> 00:08:49,100
point just because we like the game to

205
00:08:46,678 --> 00:08:52,318
run basically memory profile wise in

206
00:08:49,100 --> 00:08:54,990
mostly the same way as it would be in

207
00:08:52,318 --> 00:08:57,059
terms of layout inside

208
00:08:54,990 --> 00:08:58,350
during shipping and and release so that

209
00:08:57,059 --> 00:09:00,958
might be something we want to take a

210
00:08:58,350 --> 00:09:03,450
look at fixing at some point if we can

211
00:09:00,958 --> 00:09:05,549
but none of that is really all that

212
00:09:03,450 --> 00:09:08,250
relevant the more important part here is

213
00:09:05,549 --> 00:09:11,309
looking at how many 64k blocks are

214
00:09:08,250 --> 00:09:14,458
actually necessary to store our current

215
00:09:11,309 --> 00:09:16,229
entity load now there's one thing that I

216
00:09:14,458 --> 00:09:19,109
think we want to do before we go any

217
00:09:16,230 --> 00:09:21,860
further and that's just to improve this

218
00:09:19,110 --> 00:09:24,810
visualization slightly and the slight

219
00:09:21,860 --> 00:09:28,070
improvement that I want to do is right

220
00:09:24,809 --> 00:09:31,439
now we do not differentiate at all

221
00:09:28,070 --> 00:09:35,430
between block sizes they're already

222
00:09:31,440 --> 00:09:37,589
always drawn exactly the same no matter

223
00:09:35,429 --> 00:09:41,789
how big they are now what I mean by that

224
00:09:37,589 --> 00:09:45,450
well take a look at this here right this

225
00:09:41,789 --> 00:09:48,329
block is one big allocation that

226
00:09:45,450 --> 00:09:50,700
somebody allocated you can see it's in

227
00:09:48,330 --> 00:09:51,810
handmade asset rendering allocated it

228
00:09:50,700 --> 00:09:54,450
right it's on

229
00:09:51,809 --> 00:09:59,219
178 let's just go see what that is right

230
00:09:54,450 --> 00:10:04,170
let me load up for coder and if I load

231
00:09:59,220 --> 00:10:12,180
up and made Hiro and I go to 178 in Hana

232
00:10:04,169 --> 00:10:15,539
main asset rendering here you can see us

233
00:10:12,179 --> 00:10:19,139
pushing some lighting data and so this

234
00:10:15,539 --> 00:10:22,919
piece of lighting data is what that

235
00:10:19,139 --> 00:10:26,208
entire push is right and you can see

236
00:10:22,919 --> 00:10:28,349
that it's written out in bytes it is

237
00:10:26,208 --> 00:10:31,009
what is that we should probably some

238
00:10:28,350 --> 00:10:36,659
commas in there huh but that is a 1

239
00:10:31,009 --> 00:10:42,328
megabyte block it looks like right about

240
00:10:36,659 --> 00:10:44,250
about a 1 megabyte block of data okay so

241
00:10:42,328 --> 00:10:48,719
that's a 1 megabyte block of data and

242
00:10:44,250 --> 00:10:56,129
this is a 64 K block of data and there's

243
00:10:48,720 --> 00:11:02,940
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16

244
00:10:56,129 --> 00:11:04,559
of them right so maybe 16 times 64 they

245
00:11:02,940 --> 00:11:07,950
happen to line up in this case they do

246
00:11:04,559 --> 00:11:11,489
so these are the same size and the

247
00:11:07,950 --> 00:11:13,830
visualization is accurately representing

248
00:11:11,490 --> 00:11:15,840
the difference between this block and

249
00:11:13,830 --> 00:11:18,509
this block right like they're the same

250
00:11:15,840 --> 00:11:22,560
size this this is the same size relative

251
00:11:18,509 --> 00:11:24,870
to this as it should be right but if I'm

252
00:11:22,559 --> 00:11:26,309
not mistaken there's no real reason for

253
00:11:24,870 --> 00:11:28,649
that to be true and I don't know if I

254
00:11:26,309 --> 00:11:32,369
can actually find a block here where

255
00:11:28,649 --> 00:11:36,509
it's not true but we didn't enforce it

256
00:11:32,370 --> 00:11:38,639
so we could just keep hoping that nobody

257
00:11:36,509 --> 00:11:41,970
ever changes their block allocation size

258
00:11:38,639 --> 00:11:45,330
but if anyone ever allocated a super

259
00:11:41,970 --> 00:11:47,610
block right the the huge sub allocated

260
00:11:45,330 --> 00:11:49,200
region if anyone ever allocated one of

261
00:11:47,610 --> 00:11:51,720
those that was bigger than one megabyte

262
00:11:49,200 --> 00:11:57,770
or smaller than one megabyte this

263
00:11:51,720 --> 00:11:57,769
wouldn't line up anymore right in fact

264
00:11:58,789 --> 00:12:04,079
that's a good example of it right there

265
00:12:01,169 --> 00:12:06,360
so these two blocks although they are

266
00:12:04,080 --> 00:12:07,560
the same apparent size on the screen are

267
00:12:06,360 --> 00:12:11,930
totally different sizes

268
00:12:07,559 --> 00:12:14,849
right so that one right there is like

269
00:12:11,929 --> 00:12:16,709
1.7 megabytes and that one right there

270
00:12:14,850 --> 00:12:20,639
is 1.1 megabytes but they're the same

271
00:12:16,710 --> 00:12:23,129
size see I'm saying and again I think

272
00:12:20,639 --> 00:12:26,669
that's just because the default

273
00:12:23,129 --> 00:12:28,590
allocation is 1 megabyte but if so when

274
00:12:26,669 --> 00:12:30,089
whenever you allocate things it's going

275
00:12:28,590 --> 00:12:32,490
to allocate a megabyte block and

276
00:12:30,090 --> 00:12:34,019
subdivide it up for you but if you

277
00:12:32,490 --> 00:12:36,419
needed to allocate something bigger than

278
00:12:34,019 --> 00:12:38,909
a megabyte it just allocates a special

279
00:12:36,419 --> 00:12:41,219
allocation for you right here's another

280
00:12:38,909 --> 00:12:44,730
example there you go right

281
00:12:41,220 --> 00:12:48,690
that one's 3.1 megabytes so again that

282
00:12:44,730 --> 00:12:51,870
that and that are all drawn exactly the

283
00:12:48,690 --> 00:12:54,960
same size but they're totally different

284
00:12:51,870 --> 00:12:57,600
size allocations and so while this does

285
00:12:54,960 --> 00:13:00,350
let you know one piece of information

286
00:12:57,600 --> 00:13:03,930
which is how each block is subdivided

287
00:13:00,350 --> 00:13:08,820
accurately meaning this does show how

288
00:13:03,929 --> 00:13:12,209
much of each block is used correctly any

289
00:13:08,820 --> 00:13:14,760
given block size is not proportional to

290
00:13:12,210 --> 00:13:16,620
how big it actually is and so what I

291
00:13:14,759 --> 00:13:19,679
think we want to do before we go any

292
00:13:16,620 --> 00:13:21,929
further just because we only just

293
00:13:19,679 --> 00:13:24,209
finished this memory stuff

294
00:13:21,929 --> 00:13:25,409
last weekend we just only barely got it

295
00:13:24,210 --> 00:13:27,629
working at the end of the stream we were

296
00:13:25,409 --> 00:13:30,480
like just finishing up and I went long

297
00:13:27,629 --> 00:13:34,590
to do that what I'd like to do today is

298
00:13:30,480 --> 00:13:38,210
just get our memory view into some more

299
00:13:34,590 --> 00:13:42,930
stable state where it's properly drawing

300
00:13:38,210 --> 00:13:46,790
things at sizes related to their total

301
00:13:42,929 --> 00:13:50,609
absolute size so that we don't have to

302
00:13:46,789 --> 00:13:52,679
inquire explicitly all the time to make

303
00:13:50,610 --> 00:13:56,669
sure that we understand the sizes of

304
00:13:52,679 --> 00:13:59,669
things and we can also potentially just

305
00:13:56,669 --> 00:14:04,250
treat this thing as as one giant like

306
00:13:59,669 --> 00:14:09,329
grid right and sort of place everything

307
00:14:04,250 --> 00:14:12,059
so that we know you know one row is four

308
00:14:09,330 --> 00:14:14,639
megabytes always or something right

309
00:14:12,059 --> 00:14:21,119
so we can kind of see we could even draw

310
00:14:14,639 --> 00:14:24,080
in markers that are like here's a 64

311
00:14:21,120 --> 00:14:28,889
megabyte 64 megabyte 64 megabytes right

312
00:14:24,080 --> 00:14:32,400
so we can kind of get that that

313
00:14:28,889 --> 00:14:34,500
understanding more directly and you can

314
00:14:32,399 --> 00:14:37,139
kind of see - why this is important like

315
00:14:34,500 --> 00:14:42,230
if I go over here you see this asset

316
00:14:37,139 --> 00:14:44,669
storage arena's got five allocations

317
00:14:42,230 --> 00:14:45,990
right that that's that's a total number

318
00:14:44,669 --> 00:14:49,110
of allocations that are in and I think

319
00:14:45,990 --> 00:14:50,639
oh wait no what are these - it's so

320
00:14:49,110 --> 00:14:51,990
that's the total number of allocations I

321
00:14:50,639 --> 00:14:53,399
forget what these actual numbers are

322
00:14:51,990 --> 00:14:54,750
we're gonna have to go back and look I

323
00:14:53,399 --> 00:14:58,829
don't even remember they are I think

324
00:14:54,750 --> 00:15:00,570
it's it's the total number of blocks

325
00:14:58,830 --> 00:15:03,870
versus total number of allocations I

326
00:15:00,570 --> 00:15:09,530
think so it's something like 67 blocks

327
00:15:03,870 --> 00:15:11,909
with 1077 allocations 5 blocks with 1178

328
00:15:09,529 --> 00:15:14,399
and so one of the things that I look in

329
00:15:11,909 --> 00:15:15,870
here I see I don't really understand

330
00:15:14,399 --> 00:15:17,669
what I'm looking at here either because

331
00:15:15,870 --> 00:15:20,340
if I go through here

332
00:15:17,669 --> 00:15:23,039
I don't see like I don't know where that

333
00:15:20,340 --> 00:15:25,560
asset storage block is but I guess it's

334
00:15:23,039 --> 00:15:27,059
this one we need to make those tooltips

335
00:15:25,559 --> 00:15:28,799
not go off the screen like I can't see

336
00:15:27,059 --> 00:15:31,399
what that is hole a second we can we can

337
00:15:28,799 --> 00:15:31,399
cheat that though

338
00:15:34,049 --> 00:15:40,000
so you can see there and and I don't

339
00:15:38,019 --> 00:15:41,470
really again I don't understand why that

340
00:15:40,000 --> 00:15:44,110
looks like it does so this is something

341
00:15:41,470 --> 00:15:46,899
we have to kind of get we have to look

342
00:15:44,110 --> 00:15:52,149
at right if you look at the asset

343
00:15:46,899 --> 00:16:00,610
storage arena just looking at it here I

344
00:15:52,149 --> 00:16:05,139
mean I only see like what one two three

345
00:16:00,610 --> 00:16:13,509
allocations total right and so I don't

346
00:16:05,139 --> 00:16:16,028
understand well for okay um I don't

347
00:16:13,509 --> 00:16:25,329
understand why when I look at asset

348
00:16:16,028 --> 00:16:28,750
storage if I only see you know if I only

349
00:16:25,328 --> 00:16:31,088
see a few allocations and get it's

350
00:16:28,750 --> 00:16:34,179
telling me there should be eleven

351
00:16:31,089 --> 00:16:36,910
seventy eight of them what's going on

352
00:16:34,179 --> 00:16:39,778
right so something's a little bit wonky

353
00:16:36,909 --> 00:16:42,818
there as well so I feel like we just

354
00:16:39,778 --> 00:16:45,850
that's what's on tap today get this

355
00:16:42,818 --> 00:16:50,049
thing into a good solid state make sure

356
00:16:45,850 --> 00:16:52,000
nothing weirds going on and then from

357
00:16:50,049 --> 00:16:53,919
there tomorrow we can start on the

358
00:16:52,000 --> 00:16:55,990
entity stuff that I wanted to do which

359
00:16:53,919 --> 00:16:58,149
again we need for lighting and ground

360
00:16:55,990 --> 00:17:00,850
cover just to improve the quality of the

361
00:16:58,149 --> 00:17:02,470
visuals there so I'm going to go into

362
00:17:00,850 --> 00:17:04,269
the debug system and just take a look at

363
00:17:02,470 --> 00:17:07,120
that I the first I'm going to do is try

364
00:17:04,269 --> 00:17:09,730
to look for why we're not seeing all of

365
00:17:07,119 --> 00:17:12,969
those allocations I don't remember what

366
00:17:09,730 --> 00:17:15,548
this is but I guess there was it was

367
00:17:12,970 --> 00:17:20,679
around the profile bar stuff right yeah

368
00:17:15,548 --> 00:17:24,939
here it is so if we look in here we're

369
00:17:20,679 --> 00:17:27,189
not drawing suppressed arenas and so I

370
00:17:24,939 --> 00:17:29,230
suppose it's possible that somehow those

371
00:17:27,189 --> 00:17:31,600
arenas got labeled as suppressed but I

372
00:17:29,230 --> 00:17:36,159
don't think so because again we are

373
00:17:31,599 --> 00:17:37,240
seeing it show up so it wouldn't be it

374
00:17:36,159 --> 00:17:38,350
couldn't have been suppressed because

375
00:17:37,240 --> 00:17:41,288
we're seeing it show up we're just not

376
00:17:38,349 --> 00:17:43,959
seeing enough of it show up so here's us

377
00:17:41,288 --> 00:17:46,059
looking through each allocation and

378
00:17:43,960 --> 00:17:51,039
here's us trying to plot that alakay

379
00:17:46,059 --> 00:17:53,230
Shen has various rectangles so uh maybe

380
00:17:51,039 --> 00:17:56,170
you know is this loop busted you know

381
00:17:53,230 --> 00:17:58,240
what's going on let's take a look and

382
00:17:56,170 --> 00:18:02,289
see what's going on with this this part

383
00:17:58,240 --> 00:18:04,480
here and and why that's that's wrong so

384
00:18:02,289 --> 00:18:07,720
what I'm going to do first is I want to

385
00:18:04,480 --> 00:18:10,089
look at the memory lister because

386
00:18:07,720 --> 00:18:14,079
essentially what I've got is two things

387
00:18:10,089 --> 00:18:16,419
that disagree and so I should be able to

388
00:18:14,079 --> 00:18:19,389
compare these two things and get some

389
00:18:16,420 --> 00:18:21,279
idea of what am I doing differently

390
00:18:19,390 --> 00:18:23,470
between the two I must be doing

391
00:18:21,279 --> 00:18:24,490
something differently otherwise I

392
00:18:23,470 --> 00:18:29,170
wouldn't be getting different results

393
00:18:24,490 --> 00:18:31,390
right all right so let's start by

394
00:18:29,170 --> 00:18:33,610
looking at the loops themselves what you

395
00:18:31,390 --> 00:18:37,180
can see is that in both cases we loop

396
00:18:33,609 --> 00:18:39,669
over the arena's in order this index

397
00:18:37,180 --> 00:18:41,170
here I'm not sure what we're actually

398
00:18:39,670 --> 00:18:45,519
using it for

399
00:18:41,170 --> 00:18:48,310
oh we're just using it for sorting right

400
00:18:45,519 --> 00:18:49,839
so we're not using any we're not sorting

401
00:18:48,309 --> 00:18:52,210
anything in here so we don't need that

402
00:18:49,839 --> 00:18:54,759
index right but otherwise these loops

403
00:18:52,210 --> 00:18:56,710
are the same we check for suppression

404
00:18:54,759 --> 00:18:58,869
here because we don't draw suppressed

405
00:18:56,710 --> 00:19:00,250
arenas which makes sense we shouldn't

406
00:18:58,869 --> 00:19:03,489
really be looking at the outlay of those

407
00:19:00,250 --> 00:19:07,119
anyway and we couldn't because we any

408
00:19:03,490 --> 00:19:09,940
arena that's suppressed we don't record

409
00:19:07,119 --> 00:19:11,709
the exact locations of blocks so while

410
00:19:09,940 --> 00:19:14,980
we could draw just the blocks themselves

411
00:19:11,710 --> 00:19:17,590
which maybe you could argue we should in

412
00:19:14,980 --> 00:19:20,049
fact we could just let those draw

413
00:19:17,589 --> 00:19:27,609
because we do record how big the blocks

414
00:19:20,049 --> 00:19:27,849
are I think let's do that let's just try

415
00:19:27,609 --> 00:19:29,679
that

416
00:19:27,849 --> 00:19:31,659
I mean hey we're in your improving this

417
00:19:29,680 --> 00:19:34,120
thing let's see what happens in that

418
00:19:31,660 --> 00:19:36,910
case so what I'd like to do here is say

419
00:19:34,119 --> 00:19:39,849
all right we're going to push these rect

420
00:19:36,910 --> 00:19:43,180
outlines here what I want to do is take

421
00:19:39,849 --> 00:19:45,009
that arena suppression and I want to

422
00:19:43,180 --> 00:19:46,180
take the arena suppression and move it

423
00:19:45,009 --> 00:19:50,230
down to the place where we're actually

424
00:19:46,180 --> 00:19:52,259
drawing the sub blocks like so and so

425
00:19:50,230 --> 00:19:56,410
the sub blocks there will tell us

426
00:19:52,259 --> 00:19:57,879
effectively like you know where all of

427
00:19:56,410 --> 00:19:59,778
our subtle applications are in a

428
00:19:57,880 --> 00:20:02,629
suppressed arena we don't know those

429
00:19:59,778 --> 00:20:04,909
we should still know how big they are so

430
00:20:02,628 --> 00:20:08,709
what I'll do here is say well we've got

431
00:20:04,909 --> 00:20:12,200
this color for the overall block right

432
00:20:08,710 --> 00:20:18,379
and that's what we're drawing the sort

433
00:20:12,200 --> 00:20:21,409
of you know gray to indicate you know

434
00:20:18,378 --> 00:20:23,238
that it's a that it's a block that's you

435
00:20:21,409 --> 00:20:24,440
know been allocated and maybe not all

436
00:20:23,239 --> 00:20:26,509
that's been used we'll see that gray

437
00:20:24,440 --> 00:20:29,629
show through so what I'd like to do is

438
00:20:26,509 --> 00:20:33,229
say well if the arena is suppressed so

439
00:20:29,628 --> 00:20:34,939
in other words if this happens then I'd

440
00:20:33,229 --> 00:20:38,119
like to change the color to something

441
00:20:34,940 --> 00:20:39,528
else and so what I might do is say well

442
00:20:38,118 --> 00:20:41,598
in the case where the arena is

443
00:20:39,528 --> 00:20:43,940
suppressed maybe we make a much darker

444
00:20:41,598 --> 00:20:46,519
gray so we know that just hey there's

445
00:20:43,940 --> 00:20:49,759
some blocks being allocated here and we

446
00:20:46,519 --> 00:20:51,710
can't really do anything with them and

447
00:20:49,759 --> 00:20:53,239
they're not relevant to the running of

448
00:20:51,710 --> 00:20:54,769
the game but we're still gonna show

449
00:20:53,239 --> 00:20:57,379
where they are and that they were

450
00:20:54,769 --> 00:21:00,259
allocated right just so we can visually

451
00:20:57,378 --> 00:21:02,468
see them and know that they're there so

452
00:21:00,259 --> 00:21:05,989
if we take a look at the arena's now

453
00:21:02,469 --> 00:21:08,119
just looking through so I don't again

454
00:21:05,989 --> 00:21:10,009
don't see any of those but I don't know

455
00:21:08,118 --> 00:21:11,868
if that's because there's something

456
00:21:10,009 --> 00:21:13,848
weird about the suppressed arenas that

457
00:21:11,868 --> 00:21:15,769
doesn't allow me to draw the blocks or

458
00:21:13,848 --> 00:21:18,468
if that's because again we've got some

459
00:21:15,769 --> 00:21:23,169
kind of a bug where you know we're not

460
00:21:18,469 --> 00:21:23,169
seeing the other we're not seeing the

461
00:21:23,348 --> 00:21:26,358
asset allocation arena's working

462
00:21:25,909 --> 00:21:29,239
properly

463
00:21:26,358 --> 00:21:31,249
either so again I don't know what to

464
00:21:29,239 --> 00:21:33,319
make of that that that could all you

465
00:21:31,249 --> 00:21:36,169
know be more part of the problem as well

466
00:21:33,319 --> 00:21:37,729
but anyway so I think I want to draw

467
00:21:36,169 --> 00:21:39,320
this if I can and we'll see if there's a

468
00:21:37,729 --> 00:21:43,669
way to make sure that that actually

469
00:21:39,319 --> 00:21:45,710
works to some degree so let's go ahead

470
00:21:43,669 --> 00:21:47,570
and keep going here so normally what we

471
00:21:45,710 --> 00:21:49,879
then do is we loop over the blocks that

472
00:21:47,569 --> 00:21:52,428
are in the arena and you can see me

473
00:21:49,878 --> 00:21:57,769
doing that here in a sort of a block and

474
00:21:52,429 --> 00:22:03,288
allocation sort of phase they're looking

475
00:21:57,769 --> 00:22:05,838
at let's see so assuming that the

476
00:22:03,288 --> 00:22:07,729
arena's not suppressed the looping over

477
00:22:05,838 --> 00:22:12,950
the blocks looks exactly like it

478
00:22:07,729 --> 00:22:17,670
normally does looking at the allocation

479
00:22:12,950 --> 00:22:19,710
that also looks basically the same we're

480
00:22:17,670 --> 00:22:21,090
tracking an allocation index here but

481
00:22:19,710 --> 00:22:23,519
the only reason we're doing that is to

482
00:22:21,089 --> 00:22:25,889
pick a color from the color table and

483
00:22:23,519 --> 00:22:31,740
that really shouldn't be an issue I

484
00:22:25,890 --> 00:22:33,810
don't think it's an unsigned integer and

485
00:22:31,740 --> 00:22:37,259
it's getting modded by the size of the

486
00:22:33,809 --> 00:22:41,009
table so that should just roll and I

487
00:22:37,259 --> 00:22:42,660
can't see any reason why it wouldn't so

488
00:22:41,009 --> 00:22:44,069
looking at this stuff here where we're

489
00:22:42,660 --> 00:22:45,509
trying to draw them it could be that

490
00:22:44,069 --> 00:22:46,980
something's wrong with the way that this

491
00:22:45,509 --> 00:22:48,529
is being computed we'll have to take a

492
00:22:46,980 --> 00:22:51,180
closer look at that a little bit later

493
00:22:48,529 --> 00:23:04,079
but otherwise I'm not sure why we would

494
00:22:51,180 --> 00:23:10,340
be having a problem here so what exactly

495
00:23:04,079 --> 00:23:13,289
is this text buffer add line situation

496
00:23:10,339 --> 00:23:15,329
so you know what else I'm wondering when

497
00:23:13,289 --> 00:23:18,029
we're adding these rectangles is it

498
00:23:15,329 --> 00:23:28,889
possible for us to run out of rectangle

499
00:23:18,029 --> 00:23:31,799
run out of graphics space yeah I'm not

500
00:23:28,890 --> 00:23:34,740
sure well anyway let's take a look here

501
00:23:31,799 --> 00:23:36,899
at at just that tooltip thing I want to

502
00:23:34,740 --> 00:23:37,539
take a quick look let's see what happens

503
00:23:36,900 --> 00:23:40,660
in there

504
00:23:37,539 --> 00:23:40,659
[Music]

505
00:23:47,940 --> 00:23:52,630
so looking at the tooltips here well

506
00:23:51,250 --> 00:23:54,220
actually but that's okay because this

507
00:23:52,630 --> 00:23:56,260
only happens if you actually hit the

508
00:23:54,220 --> 00:23:58,390
rectangle so that's fine too so I don't

509
00:23:56,259 --> 00:24:05,049
really see any reason why this shouldn't

510
00:23:58,390 --> 00:24:06,520
be drawing everything and yeah and so I

511
00:24:05,049 --> 00:24:09,069
don't know I don't know what to make of

512
00:24:06,519 --> 00:24:11,500
that at the very least at the very least

513
00:24:09,069 --> 00:24:16,000
I would think that we should see the

514
00:24:11,500 --> 00:24:19,720
blocks showing up for the other arenas

515
00:24:16,000 --> 00:24:26,349
that we're not seeing and I'm not really

516
00:24:19,720 --> 00:24:28,839
sure why we're not it could be because

517
00:24:26,349 --> 00:24:30,849
also maybe they're too small like each

518
00:24:28,839 --> 00:24:33,699
allocation is too small compared to the

519
00:24:30,849 --> 00:24:35,169
size of the block I'm not sure but let

520
00:24:33,700 --> 00:24:37,720
me just loop through here really quickly

521
00:24:35,170 --> 00:24:42,340
and what I want to do is take a look at

522
00:24:37,720 --> 00:24:44,650
the arena names there basically and see

523
00:24:42,339 --> 00:24:47,169
if we ever what we are actually trying

524
00:24:44,650 --> 00:24:48,490
to draw and if it looks at all sensible

525
00:24:47,170 --> 00:24:50,740
you know I am to look at the names these

526
00:24:48,490 --> 00:24:53,500
here I just want to see if it looks at

527
00:24:50,740 --> 00:24:55,089
all sensible when we draw well you know

528
00:24:53,500 --> 00:25:05,170
what why don't I just jump to draw arena

529
00:24:55,089 --> 00:25:08,949
interval there so when we're drawing

530
00:25:05,170 --> 00:25:10,600
this I'm gonna go to each arena here and

531
00:25:08,950 --> 00:25:13,960
see you know cuz they've got names

532
00:25:10,599 --> 00:25:16,539
associated with them I guess I've got to

533
00:25:13,960 --> 00:25:18,250
be in debug mode there I never

534
00:25:16,539 --> 00:25:20,649
understand why I restart when you could

535
00:25:18,250 --> 00:25:22,829
just I don't have to restart I could

536
00:25:20,650 --> 00:25:29,160
just build in debug mode but yeah I

537
00:25:22,829 --> 00:25:29,159
never think of it let's try that again

538
00:25:31,538 --> 00:25:41,009
so if I click on arenas now and we look

539
00:25:35,769 --> 00:25:43,720
at the names so here's the debug arena

540
00:25:41,009 --> 00:25:45,700
and this should still draw some blocks

541
00:25:43,720 --> 00:25:49,360
right because even though it's

542
00:25:45,700 --> 00:25:52,929
suppressed we should do these two we

543
00:25:49,359 --> 00:25:55,329
won't do this interior bit but we should

544
00:25:52,929 --> 00:25:59,320
still draw this rectangle and so my

545
00:25:55,329 --> 00:26:01,839
question is like yeah what's the block

546
00:25:59,319 --> 00:26:14,558
rectangle that we're drawing in this

547
00:26:01,839 --> 00:26:18,119
case and so that looks like a totally

548
00:26:14,558 --> 00:26:18,119
valid rectangle to draw

549
00:26:24,789 --> 00:26:27,899
[Music]

550
00:26:31,470 --> 00:26:36,940
right I mean and we should have been

551
00:26:34,960 --> 00:26:45,940
drawing that in the sort of darker block

552
00:26:36,940 --> 00:26:47,350
color as well so why why aren't we

553
00:26:45,940 --> 00:26:51,659
seeing that because that should have

554
00:26:47,349 --> 00:26:53,918
shown up we're drawing it in a legal

555
00:26:51,659 --> 00:26:55,419
location as far as I can tell that

556
00:26:53,919 --> 00:27:00,429
certainly looks like a reasonable

557
00:26:55,419 --> 00:27:06,129
location to draw it and in fact let me

558
00:27:00,429 --> 00:27:17,528
look at the profile rect itself just to

559
00:27:06,128 --> 00:27:20,199
see what the min/max is there I mean

560
00:27:17,528 --> 00:27:24,119
that just looks like exactly like what

561
00:27:20,200 --> 00:27:29,080
you expect right and so I would assume

562
00:27:24,119 --> 00:27:31,599
you know I think I should see a sort of

563
00:27:29,079 --> 00:27:35,319
darker gray rectangle as the first

564
00:27:31,599 --> 00:27:37,269
rectangle in the set right it should be

565
00:27:35,319 --> 00:27:40,178
like right here there should be like a

566
00:27:37,269 --> 00:27:44,319
dark gray rectangle right there and

567
00:27:40,179 --> 00:27:46,028
that's definitely not what I'm seeing we

568
00:27:44,319 --> 00:27:48,609
start off with the handmade world it's

569
00:27:46,028 --> 00:27:49,259
not even the same arena you know what I

570
00:27:48,609 --> 00:27:52,928
mean

571
00:27:49,259 --> 00:27:55,839
so I've got a drawing bug here like

572
00:27:52,929 --> 00:27:59,769
maybe my block Y calculation is screwed

573
00:27:55,839 --> 00:28:01,720
up and I end up like over writing where

574
00:27:59,769 --> 00:28:04,269
I was or something like this do you know

575
00:28:01,720 --> 00:28:08,110
what I'm saying so I've got some issue

576
00:28:04,269 --> 00:28:08,740
there that that just doesn't it doesn't

577
00:28:08,109 --> 00:28:12,128
add up

578
00:28:08,740 --> 00:28:14,859
ah so first things first this block

579
00:28:12,128 --> 00:28:17,109
computation has to be outside the if so

580
00:28:14,859 --> 00:28:20,109
that's probably all that was that makes

581
00:28:17,109 --> 00:28:23,288
good sense all right so that should fix

582
00:28:20,109 --> 00:28:25,689
the problem of why we weren't seeing the

583
00:28:23,288 --> 00:28:28,000
debug blocks now we should see the debug

584
00:28:25,690 --> 00:28:30,820
box because I just wasn't incrementing

585
00:28:28,000 --> 00:28:33,038
the block counter when the arena was

586
00:28:30,819 --> 00:28:35,329
suppressed just a typo when we added

587
00:28:33,038 --> 00:28:38,690
that when we reorganized that

588
00:28:35,329 --> 00:28:42,019
Loup boundary so if I go in here now and

589
00:28:38,690 --> 00:28:43,940
look at the the debug version right

590
00:28:42,019 --> 00:28:46,700
there you can see and you can actually

591
00:28:43,940 --> 00:28:48,950
see it adding right that's it you know

592
00:28:46,700 --> 00:28:51,500
we stack up a certain number of frames

593
00:28:48,950 --> 00:28:53,210
of back debug information each one of

594
00:28:51,500 --> 00:28:56,029
those is sort of like showing you that

595
00:28:53,210 --> 00:28:58,430
we're recording more and more back

596
00:28:56,029 --> 00:29:02,470
information until eventually we stop

597
00:28:58,430 --> 00:29:11,090
recording because we hit our size limit

598
00:29:02,470 --> 00:29:16,670
right so that's what's going on there do

599
00:29:11,089 --> 00:29:17,990
we do and normally that gets hit more

600
00:29:16,670 --> 00:29:19,789
quickly but because we're in debug mode

601
00:29:17,990 --> 00:29:22,009
right the frame rates very slow so it

602
00:29:19,789 --> 00:29:24,500
takes longer to accumulate I remember

603
00:29:22,009 --> 00:29:27,259
how many frames we did 128 or something

604
00:29:24,500 --> 00:29:35,539
like that and so it takes longer to

605
00:29:27,259 --> 00:29:36,379
accumulate all of those frames we're

606
00:29:35,539 --> 00:29:38,149
probably gonna have to make this

607
00:29:36,380 --> 00:29:39,950
scrollable too because if we want to see

608
00:29:38,150 --> 00:29:42,340
all of our memory and we want to draw

609
00:29:39,950 --> 00:29:45,289
the debug which we could turn on and off

610
00:29:42,339 --> 00:29:47,389
would also be a pretty reasonable thing

611
00:29:45,289 --> 00:29:49,420
like to have a setting here that was

612
00:29:47,390 --> 00:29:53,740
like one of the settings is do you want

613
00:29:49,420 --> 00:29:57,200
to show suppressed arenas or not and

614
00:29:53,740 --> 00:30:02,660
that seems like a good idea as well so

615
00:29:57,200 --> 00:30:04,250
we should probably do that but do do do

616
00:30:02,660 --> 00:30:09,860
let me see if I can do what I wanted to

617
00:30:04,250 --> 00:30:12,339
do now by the way it's just compiled in

618
00:30:09,859 --> 00:30:12,339
release mode

619
00:30:20,609 --> 00:30:23,339
yeah so you can just switch between

620
00:30:21,869 --> 00:30:27,808
release and debugging a problem which is

621
00:30:23,339 --> 00:30:29,250
nice um so yeah like you can see like

622
00:30:27,808 --> 00:30:31,109
we're gonna need some way of like

623
00:30:29,250 --> 00:30:33,839
scrolling around this probably which is

624
00:30:31,109 --> 00:30:35,278
no big deal either but you can see like

625
00:30:33,839 --> 00:30:37,259
all this huge block of debug information

626
00:30:35,278 --> 00:30:39,898
is we just have allocated here right and

627
00:30:37,259 --> 00:30:42,089
that's the debug arena and then we've

628
00:30:39,898 --> 00:30:45,089
got all our other arenas all right so

629
00:30:42,089 --> 00:30:46,740
that works fine now and maybe let's add

630
00:30:45,089 --> 00:30:48,089
a toggle so that we can get rid of that

631
00:30:46,740 --> 00:30:50,970
just in a short term and we probably

632
00:30:48,089 --> 00:30:54,058
want that to be the case in general as

633
00:30:50,970 --> 00:30:56,579
well because you know if we're we don't

634
00:30:54,058 --> 00:30:59,788
probably want that to be used in certain

635
00:30:56,579 --> 00:31:02,369
cases so we know that there's we've got

636
00:30:59,788 --> 00:31:03,808
sort of this idea of storage for our

637
00:31:02,369 --> 00:31:06,329
different like here's the profile graph

638
00:31:03,808 --> 00:31:10,038
for example here's the arena view so we

639
00:31:06,329 --> 00:31:14,879
could have a thing here that's like hey

640
00:31:10,038 --> 00:31:17,339
show suppressed or not right and so what

641
00:31:14,880 --> 00:31:22,649
we could do is when you get called in

642
00:31:17,339 --> 00:31:26,759
here and you've got that graph ID I want

643
00:31:22,648 --> 00:31:30,298
to say that that dev you I there can now

644
00:31:26,759 --> 00:31:31,859
access this information and have like

645
00:31:30,298 --> 00:31:36,359
basically a switch that turns it on and

646
00:31:31,859 --> 00:31:38,509
off that's my story and I'm sticking to

647
00:31:36,359 --> 00:31:38,509
it

648
00:31:44,619 --> 00:31:51,250
I don't actually know if that's true or

649
00:31:46,569 --> 00:31:52,798
not uh well it's not mmm it's this thing

650
00:31:51,250 --> 00:31:55,960
it's the graph ID

651
00:31:52,798 --> 00:31:57,158
it's that graph ID used anywhere you

652
00:31:55,960 --> 00:31:59,288
know what that may not actually be used

653
00:31:57,159 --> 00:32:04,240
anywhere but surely you would want to

654
00:31:59,288 --> 00:32:06,960
use it sometime like don't you want to

655
00:32:04,240 --> 00:32:06,960
know that information

656
00:32:07,048 --> 00:32:15,369
try profile bars total clocks well I

657
00:32:13,750 --> 00:32:16,929
think we may have to pass it down then I

658
00:32:15,369 --> 00:32:18,398
guess I don't know I'm not really sure

659
00:32:16,929 --> 00:32:21,159
how we were meant to recover those

660
00:32:18,398 --> 00:32:23,889
because it's been too long but when we

661
00:32:21,159 --> 00:32:25,860
actually draw these we have that graph

662
00:32:23,890 --> 00:32:29,770
information and I guess we just don't

663
00:32:25,859 --> 00:32:31,119
pass it down maybe I'm not sure but if

664
00:32:29,769 --> 00:32:33,220
you look here right when this gets

665
00:32:31,119 --> 00:32:37,329
called you can see that we have the

666
00:32:33,220 --> 00:32:40,179
graph available here I guess we just

667
00:32:37,329 --> 00:32:42,250
don't send it but I think we want to

668
00:32:40,179 --> 00:32:43,750
because it seems like something you

669
00:32:42,250 --> 00:32:45,880
would want to have right

670
00:32:43,750 --> 00:32:50,048
so I feel like we want these folks to

671
00:32:45,880 --> 00:32:54,278
have access to this graph and so in here

672
00:32:50,048 --> 00:32:56,319
we would just want both of those to be

673
00:32:54,278 --> 00:32:58,690
able to look at it because that's where

674
00:32:56,319 --> 00:33:03,129
we would put settings about what to

675
00:32:58,690 --> 00:33:05,528
include in our various memory views the

676
00:33:03,130 --> 00:33:07,149
example being whether or not suppress

677
00:33:05,528 --> 00:33:08,528
arena show up but there's other reasons

678
00:33:07,148 --> 00:33:13,778
why we might want to put that in there

679
00:33:08,528 --> 00:33:18,759
right all right so what I'd like to do

680
00:33:13,778 --> 00:33:21,240
here is say that inside this we want to

681
00:33:18,759 --> 00:33:25,179
look whenever we're going through this

682
00:33:21,240 --> 00:33:27,940
this bit here I guess I want to suppress

683
00:33:25,179 --> 00:33:32,288
the entire operation of it so I want to

684
00:33:27,940 --> 00:33:38,140
kind of do like don't do anything if the

685
00:33:32,288 --> 00:33:41,740
arena is suppressed if the arena is

686
00:33:38,140 --> 00:33:43,809
suppressed and show suppressed isn't on

687
00:33:41,740 --> 00:33:48,038
so what I'm going to say is if it's not

688
00:33:43,808 --> 00:33:51,980
suppressed run it or if suppress is on

689
00:33:48,038 --> 00:33:55,220
run it right

690
00:33:51,980 --> 00:33:58,190
and then the same exact piece of code

691
00:33:55,220 --> 00:34:01,298
would be used up here so when we get

692
00:33:58,190 --> 00:34:05,120
into one of these we would just suppress

693
00:34:01,298 --> 00:34:08,929
like that arena entirely and not even

694
00:34:05,119 --> 00:34:11,690
draw the blocks if it's you know got

695
00:34:08,929 --> 00:34:13,490
that turned off and so then we just need

696
00:34:11,690 --> 00:34:16,250
some way of allowing the user to

697
00:34:13,489 --> 00:34:19,608
actually choose whether or not it is or

698
00:34:16,250 --> 00:34:22,128
isn't and so we need to put a button in

699
00:34:19,608 --> 00:34:24,500
there that basically says like suppress

700
00:34:22,128 --> 00:34:28,549
or not you know show debugger don't show

701
00:34:24,500 --> 00:34:30,800
the debug stuff so yeah if I look it for

702
00:34:28,550 --> 00:34:34,129
draw top mmm list or whatever it's

703
00:34:30,800 --> 00:34:36,200
called there in here we just need one

704
00:34:34,128 --> 00:34:37,750
well there is the boolean button right

705
00:34:36,199 --> 00:34:41,029
there

706
00:34:37,750 --> 00:34:43,909
so what I want to do here is say let's

707
00:34:41,030 --> 00:34:49,399
add another button and that button is

708
00:34:43,909 --> 00:34:53,450
going to be like debug or something and

709
00:34:49,398 --> 00:34:57,710
what I want to do is have graph show

710
00:34:53,449 --> 00:35:00,259
suppressed and that itself is the

711
00:34:57,710 --> 00:35:04,389
boolean we're talking about the

712
00:35:00,260 --> 00:35:08,000
interaction is going to do what here

713
00:35:04,389 --> 00:35:11,029
well actually so I don't know that it's

714
00:35:08,000 --> 00:35:13,849
well I guess this is fine so it's just

715
00:35:11,030 --> 00:35:16,730
going to take our show suppressed and

716
00:35:13,849 --> 00:35:18,949
it's going to toggle it right it's all

717
00:35:16,730 --> 00:35:22,820
that's gonna happen so we just want it

718
00:35:18,949 --> 00:35:24,980
to be like not show suppressed I think

719
00:35:22,820 --> 00:35:30,260
that's all we actually need right

720
00:35:24,980 --> 00:35:33,329
I think coups

721
00:35:30,260 --> 00:35:35,370
I meant graph

722
00:35:33,329 --> 00:35:37,230
so all I'm trying to do there again is

723
00:35:35,369 --> 00:35:38,880
just have a way of controlling whether

724
00:35:37,230 --> 00:35:42,539
that chef shows up or not in case we're

725
00:35:38,880 --> 00:35:44,789
interested in it and so then when we go

726
00:35:42,539 --> 00:35:47,929
here you know the hope is though well

727
00:35:44,789 --> 00:35:47,929
that didn't work very well did it

728
00:35:56,849 --> 00:36:04,200
oh so it looks like I don't actually

729
00:36:01,440 --> 00:36:08,249
count the arenas in that loop I assume

730
00:36:04,199 --> 00:36:16,169
that all the arenas are actually there

731
00:36:08,248 --> 00:36:18,659
and so hmm wonder how I want to modify

732
00:36:16,170 --> 00:36:21,720
that so I guess the way I would do it is

733
00:36:18,659 --> 00:36:23,818
say well we do the arena count here and

734
00:36:21,719 --> 00:36:28,709
then I guess what I would probably do is

735
00:36:23,818 --> 00:36:30,929
actually have the arena count get set

736
00:36:28,710 --> 00:36:33,329
so whatever the index ends up being here

737
00:36:30,929 --> 00:36:34,768
I would set the arena count to that so

738
00:36:33,329 --> 00:36:37,950
when we're done I would just say like

739
00:36:34,768 --> 00:36:40,588
arena count equals index so that we get

740
00:36:37,949 --> 00:36:51,389
rid of the ones that we're not using

741
00:36:40,588 --> 00:36:57,119
right and of course I actually need to

742
00:36:51,389 --> 00:37:01,949
do this oops this has to only happen

743
00:36:57,119 --> 00:37:02,670
when we use the index I could do it like

744
00:37:01,949 --> 00:37:06,268
that as well

745
00:37:02,670 --> 00:37:08,519
so I think that's good enough for that

746
00:37:06,268 --> 00:37:10,348
and should take care of the fact that we

747
00:37:08,518 --> 00:37:12,988
were then we were using some arena we

748
00:37:10,349 --> 00:37:16,680
were using some things in our index Hort

749
00:37:12,989 --> 00:37:18,478
that never got filled in so if I include

750
00:37:16,679 --> 00:37:21,598
the debug arena you can see that it pops

751
00:37:18,478 --> 00:37:22,649
in there right and I the reason I wanted

752
00:37:21,599 --> 00:37:23,789
this in both because you're saying like

753
00:37:22,650 --> 00:37:25,588
well why would you care if it was

754
00:37:23,789 --> 00:37:27,869
including here these percentages are

755
00:37:25,588 --> 00:37:30,119
based on the total that gets used so if

756
00:37:27,869 --> 00:37:32,009
I turn on debug it changes my

757
00:37:30,119 --> 00:37:33,869
percentages right because it includes

758
00:37:32,009 --> 00:37:35,369
the debug in there when it calculates

759
00:37:33,869 --> 00:37:38,099
what percentage is getting used so

760
00:37:35,369 --> 00:37:40,200
having the above the app be off computes

761
00:37:38,099 --> 00:37:42,420
the percentages for the actual runtime

762
00:37:40,199 --> 00:37:44,578
of the game and lets me see that like

763
00:37:42,420 --> 00:37:48,059
okay 80% is in the asset store and 20%

764
00:37:44,579 --> 00:37:50,278
in the game entities right and that's

765
00:37:48,059 --> 00:37:53,489
better that's a more useful heads-up

766
00:37:50,278 --> 00:37:56,309
view if I go into the actual arena

767
00:37:53,489 --> 00:37:58,499
layout view here same thing is true

768
00:37:56,309 --> 00:38:01,650
right I can now see that with or without

769
00:37:58,498 --> 00:38:04,949
the debug and that's nice okay so

770
00:38:01,650 --> 00:38:08,599
problem number two now we've got that

771
00:38:04,949 --> 00:38:10,329
out of the way why are we not seeing

772
00:38:08,599 --> 00:38:14,230
assets

773
00:38:10,329 --> 00:38:16,059
or allocations from the asset system why

774
00:38:14,230 --> 00:38:20,050
are we not seeing them show up as

775
00:38:16,059 --> 00:38:21,400
multiple blocks in here right so there's

776
00:38:20,050 --> 00:38:26,410
a couple things it could be happening

777
00:38:21,400 --> 00:38:27,880
and I have no idea which one is it seems

778
00:38:26,409 --> 00:38:30,879
unlikely that the thing I'm about to say

779
00:38:27,880 --> 00:38:32,740
is true but we're gonna say it anyway in

780
00:38:30,880 --> 00:38:34,900
fact I know it's not true just looking

781
00:38:32,739 --> 00:38:37,719
at this just just looking at this I can

782
00:38:34,900 --> 00:38:39,340
tell us not sure so never mind so let me

783
00:38:37,719 --> 00:38:44,769
say what I think the problem is just in

784
00:38:39,340 --> 00:38:47,500
general so looking at this again I'm

785
00:38:44,769 --> 00:38:52,449
worried about the difference between

786
00:38:47,500 --> 00:38:57,010
these two you know I'm saying I look at

787
00:38:52,449 --> 00:39:00,309
this and I see this allocation number

788
00:38:57,010 --> 00:39:03,790
and I look at this and I can't find

789
00:39:00,309 --> 00:39:09,900
theirs where are they right they're just

790
00:39:03,789 --> 00:39:09,900
not what's going on and so something

791
00:39:10,980 --> 00:39:16,349
something isn't adding up and we need to

792
00:39:13,539 --> 00:39:16,349
find out what it is

793
00:39:16,559 --> 00:39:23,489
so in here trying to think of like what

794
00:39:21,039 --> 00:39:28,630
the best way to approach this would be

795
00:39:23,489 --> 00:39:32,469
but if I go into the if I go into the

796
00:39:28,630 --> 00:39:36,670
draw top mmm list there and we just look

797
00:39:32,469 --> 00:39:40,959
in here at like what you know what is

798
00:39:36,670 --> 00:39:44,769
the actual stuff when we're tracking

799
00:39:40,960 --> 00:39:51,150
these allocations so when we print this

800
00:39:44,769 --> 00:40:01,329
out we print out the total number

801
00:39:51,150 --> 00:40:05,010
allocated and the total number used is

802
00:40:01,329 --> 00:40:05,009
that right what does that mean

803
00:40:09,099 --> 00:40:17,170
so allocated is blocks right so this is

804
00:40:14,800 --> 00:40:22,380
the total number of blocks which is what

805
00:40:17,170 --> 00:40:22,380
we thought maybe I'll do this

806
00:40:42,010 --> 00:40:49,340
right so now just to underscore this

807
00:40:47,000 --> 00:40:50,570
right and that's not a very pretty

808
00:40:49,340 --> 00:40:53,840
printout

809
00:40:50,570 --> 00:40:56,269
maybe we can just put it at the top in

810
00:40:53,840 --> 00:41:10,940
fact that seems better why don't I do

811
00:40:56,269 --> 00:41:17,960
that take this thing and then put it up

812
00:41:10,940 --> 00:41:21,200
here I've got advance the line don't I

813
00:41:17,960 --> 00:41:22,760
yeah I think we have tools for doing

814
00:41:21,199 --> 00:41:27,710
this text out now I should probably be

815
00:41:22,760 --> 00:41:31,640
using them but you know oh well so if I

816
00:41:27,710 --> 00:41:35,510
want to just take this and print a

817
00:41:31,639 --> 00:41:38,779
header here what I want to do is keep

818
00:41:35,510 --> 00:41:40,640
this formatting essentially and so what

819
00:41:38,780 --> 00:41:42,950
I need to do is say well we were

820
00:41:40,639 --> 00:41:45,019
previously doing four spaces one two

821
00:41:42,949 --> 00:41:47,839
three four right and then we had

822
00:41:45,019 --> 00:41:50,960
megabyte which is one two and a space

823
00:41:47,840 --> 00:41:54,800
and then we had some number of percent

824
00:41:50,960 --> 00:42:00,289
here so Oh 5.02 is five total spaces for

825
00:41:54,800 --> 00:42:02,390
it right so one two three four five then

826
00:42:00,289 --> 00:42:04,699
we had a percent sign that's one and

827
00:42:02,389 --> 00:42:10,639
space then we had four one two three

828
00:42:04,699 --> 00:42:12,619
four and then we had one and then we had

829
00:42:10,639 --> 00:42:16,009
eight one two three four five six seven

830
00:42:12,619 --> 00:42:20,179
eight and that's the total width right

831
00:42:16,010 --> 00:42:25,460
that's the thing so if that's the total

832
00:42:20,179 --> 00:42:26,929
width oops I guess with virtual white

833
00:42:25,460 --> 00:42:28,579
space I can't really line those up can i

834
00:42:26,929 --> 00:42:31,279
that's a bummer

835
00:42:28,579 --> 00:42:32,929
well let's try this again so if that's

836
00:42:31,280 --> 00:42:39,340
the total width and I want this to be

837
00:42:32,929 --> 00:42:44,619
lined up I can just do like blocks and

838
00:42:39,340 --> 00:42:44,620
Alex right something like that

839
00:42:47,190 --> 00:42:51,179
and that way we can just see what the

840
00:42:49,500 --> 00:42:54,230
heck these things are because otherwise

841
00:42:51,179 --> 00:42:54,230
I don't know oops

842
00:43:03,219 --> 00:43:07,848
what do we do wrong allocated undeclared

843
00:43:05,900 --> 00:43:10,970
identifier that's a good point

844
00:43:07,849 --> 00:43:15,200
none of this stuff should be there there

845
00:43:10,969 --> 00:43:17,598
we go so again this is just me trying to

846
00:43:15,199 --> 00:43:19,189
make it so that we won't accidentally

847
00:43:17,599 --> 00:43:21,559
miss read those or forget what they were

848
00:43:19,190 --> 00:43:22,789
you know refer to because you know two

849
00:43:21,559 --> 00:43:25,250
months from now we're gonna be like what

850
00:43:22,789 --> 00:43:32,690
was that alright so I just need to push

851
00:43:25,250 --> 00:43:35,179
those forward a bit yeah so much for my

852
00:43:32,690 --> 00:43:39,349
poor counting abilities something like

853
00:43:35,179 --> 00:43:41,269
that if you really want to get fancy you

854
00:43:39,349 --> 00:43:43,039
dab columnar displays here so you could

855
00:43:41,269 --> 00:43:44,960
just sort of say like here's the table

856
00:43:43,039 --> 00:43:48,079
and here's the headers right we're not

857
00:43:44,960 --> 00:43:49,880
gonna do that but you could alright so

858
00:43:48,079 --> 00:43:52,460
that seems better now you can kind of

859
00:43:49,880 --> 00:43:58,059
see where those are and what they refer

860
00:43:52,460 --> 00:43:58,059
to maybe I'll move it back a little bit

861
00:44:06,329 --> 00:44:11,829
and call it a day and so now we have to

862
00:44:10,000 --> 00:44:14,380
go to do the actual debugging to figure

863
00:44:11,829 --> 00:44:18,190
out what's going on here and why we

864
00:44:14,380 --> 00:44:20,349
can't sort of tell why why we're getting

865
00:44:18,190 --> 00:44:23,200
so many allocations recorded and and

866
00:44:20,349 --> 00:44:25,030
what's happening so one of the things

867
00:44:23,199 --> 00:44:27,460
that I would like to be able to do and

868
00:44:25,030 --> 00:44:32,680
right now I guess we don't

869
00:44:27,460 --> 00:44:38,230
super have a way to do this it would be

870
00:44:32,679 --> 00:44:41,618
nice to merge by string where these

871
00:44:38,230 --> 00:44:43,150
allocations are coming from and we don't

872
00:44:41,619 --> 00:44:45,430
really have a way to do that right now

873
00:44:43,150 --> 00:44:47,260
like we don't have a like a little

874
00:44:45,429 --> 00:44:49,989
string combiner basically like a little

875
00:44:47,260 --> 00:44:51,670
string hash thing although I don't know

876
00:44:49,989 --> 00:44:58,779
for all I know maybe we do we have a lot

877
00:44:51,670 --> 00:45:02,409
of stuff in here doesn't well so we sort

878
00:44:58,780 --> 00:45:05,559
of hash by strings sometimes and using

879
00:45:02,409 --> 00:45:08,259
debug elements I guess we do that

880
00:45:05,559 --> 00:45:11,040
sometimes but it would be nice to have

881
00:45:08,260 --> 00:45:14,559
something where we sort of summed up by

882
00:45:11,039 --> 00:45:18,579
string which ones are which under each

883
00:45:14,559 --> 00:45:23,548
arena because every arena has some

884
00:45:18,579 --> 00:45:25,960
number of call sites that are right like

885
00:45:23,548 --> 00:45:28,838
there's some number of call sites in our

886
00:45:25,960 --> 00:45:31,990
code and each one of those call sites is

887
00:45:28,838 --> 00:45:36,929
responsible for some subset of the call

888
00:45:31,989 --> 00:45:43,169
of the allocations and when we look in

889
00:45:36,929 --> 00:45:47,858
this mode we can see that by hovering

890
00:45:43,170 --> 00:45:52,088
but when we're in this mode we actually

891
00:45:47,858 --> 00:45:57,098
can't write so this just says the arena

892
00:45:52,088 --> 00:46:00,308
but we have no idea like yeah we have

893
00:45:57,099 --> 00:46:02,859
like no idea who is responsible for each

894
00:46:00,309 --> 00:46:05,160
one but I want that back one and over

895
00:46:02,858 --> 00:46:05,159
three

896
00:46:06,849 --> 00:46:22,349
I don't know if that's quite right we'll

897
00:46:11,889 --> 00:46:22,349
find out yeah sue

898
00:46:29,349 --> 00:46:33,860
so yeah I mean I'm tempted to just say

899
00:46:32,150 --> 00:46:37,039
like under each of those we should just

900
00:46:33,860 --> 00:46:38,780
list the call sites so that when we

901
00:46:37,039 --> 00:46:42,039
print it out we then just list like each

902
00:46:38,780 --> 00:46:45,019
for each call site here's how much

903
00:46:42,039 --> 00:46:47,509
memory was allocated how many calls to

904
00:46:45,019 --> 00:46:52,400
that call site how much memory allocated

905
00:46:47,510 --> 00:46:53,990
for that call site right and so like I'm

906
00:46:52,400 --> 00:46:56,090
tempted to just write a little thing in

907
00:46:53,989 --> 00:46:58,250
place and again this is the this is the

908
00:46:56,090 --> 00:47:00,260
one place where like C and C++ are just

909
00:46:58,250 --> 00:47:01,730
always crappy you have no choice but to

910
00:47:00,260 --> 00:47:03,080
use some super terrible templates or

911
00:47:01,730 --> 00:47:06,650
something if you just want like a

912
00:47:03,079 --> 00:47:08,090
generic way to hash strings they just

913
00:47:06,650 --> 00:47:10,519
don't have good meta programming support

914
00:47:08,090 --> 00:47:12,470
so it's always a pain in the butt to use

915
00:47:10,519 --> 00:47:17,210
any kind of generic structure it comes

916
00:47:12,469 --> 00:47:19,429
out horrible but I'm tempted to do

917
00:47:17,210 --> 00:47:21,590
something here where we can just keep

918
00:47:19,429 --> 00:47:23,569
track of this in a trivial way and

919
00:47:21,590 --> 00:47:25,490
thankfully like anything else and see

920
00:47:23,570 --> 00:47:26,750
writing one from scratch is actually

921
00:47:25,489 --> 00:47:29,719
quite simple

922
00:47:26,750 --> 00:47:32,769
so it's no big deal but if we want to do

923
00:47:29,719 --> 00:47:38,089
this we could just say alright let's

924
00:47:32,769 --> 00:47:40,639
just create a it well in fact the debug

925
00:47:38,090 --> 00:47:46,630
memory entry might actually be what we

926
00:47:40,639 --> 00:47:46,629
want I'm going to move that out here

927
00:47:48,940 --> 00:47:53,559
it's not quite so I'm going to make a

928
00:47:51,139 --> 00:47:53,559
different one

929
00:48:01,969 --> 00:48:07,139
so this is our like debug memory call

930
00:48:04,588 --> 00:48:09,119
site and I'm just gonna say that we've

931
00:48:07,139 --> 00:48:11,639
got some way of referring to like the

932
00:48:09,119 --> 00:48:13,890
name of the call site and that's just

933
00:48:11,639 --> 00:48:17,009
gonna be used for coalescing and then

934
00:48:13,889 --> 00:48:22,348
I've got just a single statistic that's

935
00:48:17,010 --> 00:48:23,910
like the Alec the amount allocated so

936
00:48:22,349 --> 00:48:26,550
this will track the number of bytes and

937
00:48:23,909 --> 00:48:30,149
the number of calls from this particular

938
00:48:26,550 --> 00:48:33,359
call site right and so to do this

939
00:48:30,150 --> 00:48:36,809
there's not really a lot to it all we

940
00:48:33,358 --> 00:48:39,088
have to do is every time through each

941
00:48:36,809 --> 00:48:42,029
one of these things as we're seeing

942
00:48:39,088 --> 00:48:44,119
these call sites stack up we can just

943
00:48:42,030 --> 00:48:47,609
remember them and put them in here right

944
00:48:44,119 --> 00:48:50,070
and since I'd like this to be per arena

945
00:48:47,608 --> 00:48:54,539
and I'd like that to be true even if

946
00:48:50,070 --> 00:48:59,070
it's like remember call sites encode the

947
00:48:54,539 --> 00:49:04,108
call sites themselves are I'm not sure

948
00:48:59,070 --> 00:49:06,539
how to say this so an arena is an actual

949
00:49:04,108 --> 00:49:07,949
thing that exists in memory right we

950
00:49:06,539 --> 00:49:10,710
have a pointer to it and it's like a

951
00:49:07,949 --> 00:49:14,969
chain of of like blocks that gets sub

952
00:49:10,710 --> 00:49:17,730
allocated right so a single physical

953
00:49:14,969 --> 00:49:22,769
location in the code like a single line

954
00:49:17,730 --> 00:49:25,079
of code there's not out there doesn't

955
00:49:22,769 --> 00:49:27,239
have to be a one-to-one mapping between

956
00:49:25,079 --> 00:49:30,119
that line of code and the arena it's

957
00:49:27,239 --> 00:49:31,949
using write because a single line of

958
00:49:30,119 --> 00:49:35,880
code could just be have been passed

959
00:49:31,949 --> 00:49:38,338
which arena to use for its allocation so

960
00:49:35,880 --> 00:49:40,588
that means I've got two separate things

961
00:49:38,338 --> 00:49:43,139
I'm trying to track there's the arena's

962
00:49:40,588 --> 00:49:45,449
and there's the call sites and I want to

963
00:49:43,139 --> 00:49:48,629
print out how much each call site

964
00:49:45,449 --> 00:49:51,299
contributed to each arenas allocations

965
00:49:48,630 --> 00:49:53,430
so I want to do this multiple times and

966
00:49:51,300 --> 00:49:58,619
record separate entries for each call

967
00:49:53,429 --> 00:50:00,419
site per arena makes sense and there's

968
00:49:58,619 --> 00:50:04,170
really two ways I can do this and I

969
00:50:00,420 --> 00:50:08,909
don't really know that I care which one

970
00:50:04,170 --> 00:50:13,139
I do so I guess I'll just do the

971
00:50:08,909 --> 00:50:14,639
more stringent one first so I'm going to

972
00:50:13,139 --> 00:50:16,889
stick the arena in here

973
00:50:14,639 --> 00:50:18,960
and I'm gonna stick the call site next

974
00:50:16,889 --> 00:50:22,589
pointer in here for hashing purposes

975
00:50:18,960 --> 00:50:25,230
right then I'm gonna go ahead and say

976
00:50:22,590 --> 00:50:28,350
give me a hash table because why not and

977
00:50:25,230 --> 00:50:31,500
so right at the top here where we're

978
00:50:28,349 --> 00:50:34,829
taking temp memory up I'm gonna say give

979
00:50:31,500 --> 00:50:37,980
me an array of pointers to call site

980
00:50:34,829 --> 00:50:40,769
things right so there's my call site

981
00:50:37,980 --> 00:50:43,949
hash and I'm gonna yeah I don't know how

982
00:50:40,769 --> 00:50:52,409
many there's gonna be mm let's say call

983
00:50:43,949 --> 00:50:54,239
site hash size is 128 then what I'm

984
00:50:52,409 --> 00:50:57,779
gonna do is say the debug memory call

985
00:50:54,239 --> 00:51:00,750
site with no click well actually I do

986
00:50:57,780 --> 00:51:06,570
want that cleared so I want pointers to

987
00:51:00,750 --> 00:51:09,809
those i allocate that and off we go

988
00:51:06,570 --> 00:51:12,480
each time I come through here when I see

989
00:51:09,809 --> 00:51:14,880
a particular type of allocation what I

990
00:51:12,480 --> 00:51:18,719
want to do is now look up in my hash

991
00:51:14,880 --> 00:51:21,690
table to find that allocation and I want

992
00:51:18,719 --> 00:51:24,989
to find it keyed off of not only its

993
00:51:21,690 --> 00:51:26,340
call site but also which arena was

994
00:51:24,989 --> 00:51:28,679
responsible for that particular

995
00:51:26,340 --> 00:51:30,800
allocation so that I match it to the

996
00:51:28,679 --> 00:51:33,419
correct one if that makes sense

997
00:51:30,800 --> 00:51:39,030
so what I'm going to do first is going

998
00:51:33,420 --> 00:51:40,710
to compute its hash value and I don't

999
00:51:39,030 --> 00:51:41,519
know we've got a string hash here

1000
00:51:40,710 --> 00:51:46,740
somewhere

1001
00:51:41,519 --> 00:51:53,759
so here it is right and these

1002
00:51:46,739 --> 00:51:56,819
allocations that we've tracked they've

1003
00:51:53,760 --> 00:52:02,490
got the grid right here and to be

1004
00:51:56,820 --> 00:52:06,480
consistent I suppose I should also take

1005
00:52:02,489 --> 00:52:09,709
a second to make sure that this is named

1006
00:52:06,480 --> 00:52:12,179
weed because name is probably not right

1007
00:52:09,710 --> 00:52:14,070
so if I take the string hash of this

1008
00:52:12,179 --> 00:52:16,619
grid at the time when I'm actually doing

1009
00:52:14,070 --> 00:52:18,780
the summation then what I can do is look

1010
00:52:16,619 --> 00:52:22,589
it up in my call site hash and I can

1011
00:52:18,780 --> 00:52:24,900
just try to find where it goes so

1012
00:52:22,590 --> 00:52:26,850
I need to mod by the call site hash

1013
00:52:24,900 --> 00:52:29,250
sighs and then that gives me my hash

1014
00:52:26,849 --> 00:52:32,460
value or really it's the hash slot index

1015
00:52:29,250 --> 00:52:38,610
right and so then I say in my call site

1016
00:52:32,460 --> 00:52:44,220
hash I loop from there and say for each

1017
00:52:38,610 --> 00:52:51,329
one of these things I might call this

1018
00:52:44,219 --> 00:52:54,269
test I'm just gonna see if I can find a

1019
00:52:51,329 --> 00:52:56,819
match so I'm going to say if the arena

1020
00:52:54,269 --> 00:53:00,929
equals the arena that I'm talking about

1021
00:52:56,820 --> 00:53:02,519
right now and the grid equals the grid

1022
00:53:00,929 --> 00:53:10,190
I'm talking about right now right so I

1023
00:53:02,519 --> 00:53:15,210
need to do a strings are equal here but

1024
00:53:10,190 --> 00:53:18,809
but since these grids come for me and a

1025
00:53:15,210 --> 00:53:21,269
call site really I don't have to do that

1026
00:53:18,809 --> 00:53:23,519
I don't have to actually test for

1027
00:53:21,269 --> 00:53:26,610
equality there I can just compare the

1028
00:53:23,519 --> 00:53:28,710
pointers because they're the same right

1029
00:53:26,610 --> 00:53:30,240
I'm gonna track the actual pointer to

1030
00:53:28,710 --> 00:53:32,220
the string so there's no need to compare

1031
00:53:30,239 --> 00:53:35,039
them I can't have two places that

1032
00:53:32,219 --> 00:53:36,899
generate the same string but different

1033
00:53:35,039 --> 00:53:38,670
string pointers that's not allowed in

1034
00:53:36,900 --> 00:53:41,579
fact we go out of our way to prevent it

1035
00:53:38,670 --> 00:53:46,829
by inserting a counter into each grid to

1036
00:53:41,579 --> 00:53:49,019
prevent this very thing right so if this

1037
00:53:46,829 --> 00:53:54,239
is correct then what we want to say is

1038
00:53:49,019 --> 00:53:58,079
hey we found the thing right so we'd say

1039
00:53:54,239 --> 00:54:01,739
we found it done so that allows us to

1040
00:53:58,079 --> 00:54:04,679
collect you know anything that's already

1041
00:54:01,739 --> 00:54:07,049
in the hash table and so if we didn't

1042
00:54:04,679 --> 00:54:10,379
find it we just need to create one here

1043
00:54:07,050 --> 00:54:12,420
if we did find it which we will have at

1044
00:54:10,380 --> 00:54:14,690
this point we just now need to make sure

1045
00:54:12,420 --> 00:54:16,530
that we record into its allocated

1046
00:54:14,690 --> 00:54:18,300
exactly the same thing we were doing

1047
00:54:16,530 --> 00:54:20,430
here so we're just gonna do this

1048
00:54:18,300 --> 00:54:22,590
statistic twice but instead of going

1049
00:54:20,429 --> 00:54:28,009
into this one we're going to go into

1050
00:54:22,590 --> 00:54:31,350
this one instead right so presuming that

1051
00:54:28,010 --> 00:54:35,190
allows us to accumulate for call sites

1052
00:54:31,349 --> 00:54:36,159
as well as arenas which is what we

1053
00:54:35,190 --> 00:54:38,980
wanted

1054
00:54:36,159 --> 00:54:41,289
and so then in here when I'm looking and

1055
00:54:38,980 --> 00:54:43,599
I don't find a site no big deal

1056
00:54:41,289 --> 00:54:45,909
all I have to do is push a new one on

1057
00:54:43,599 --> 00:54:49,239
right and remember we're in temp memory

1058
00:54:45,909 --> 00:54:50,559
here so we can do whatever we want I can

1059
00:54:49,239 --> 00:54:52,599
just do a push struct on to that

1060
00:54:50,559 --> 00:54:54,070
temperature temporary nough and we don't

1061
00:54:52,599 --> 00:54:56,139
care because it's all going away in a

1062
00:54:54,070 --> 00:54:57,390
moment so it's it's you know no harm no

1063
00:54:56,139 --> 00:55:00,639
foul

1064
00:54:57,389 --> 00:55:02,529
okay so I'm gonna push struct on there I

1065
00:55:00,639 --> 00:55:05,079
know that what I want is one of these

1066
00:55:02,530 --> 00:55:07,030
debug memory call sites and I know that

1067
00:55:05,079 --> 00:55:09,880
I don't really need to clear it because

1068
00:55:07,030 --> 00:55:13,530
well actually I might as well because I

1069
00:55:09,880 --> 00:55:16,300
gotta clear out the statistic it's fine

1070
00:55:13,530 --> 00:55:18,340
so to push one of those on and then I'm

1071
00:55:16,300 --> 00:55:22,420
going to set it up correctly so the next

1072
00:55:18,340 --> 00:55:25,350
in hash is going to be the call site

1073
00:55:22,420 --> 00:55:29,349
hash for that hash light right like so

1074
00:55:25,349 --> 00:55:39,009
the arena is the arena and the quids the

1075
00:55:29,349 --> 00:55:45,059
grid oops don't ask me why that isn't

1076
00:55:39,010 --> 00:55:48,520
there because I don't know and that's it

1077
00:55:45,059 --> 00:55:50,829
actually right and so then we just need

1078
00:55:48,519 --> 00:55:52,090
to update our hash table to record the

1079
00:55:50,829 --> 00:55:54,549
fact that we added a new one and then I

1080
00:55:52,090 --> 00:55:57,160
think we're done so that should now

1081
00:55:54,550 --> 00:55:59,289
build a complete attribution table that

1082
00:55:57,159 --> 00:56:05,789
says who is responsible for each portion

1083
00:55:59,289 --> 00:56:05,789
of this thing and that's next in hash

1084
00:56:05,880 --> 00:56:10,660
and so now when I run this we won't

1085
00:56:09,039 --> 00:56:12,489
really see anything different but if I

1086
00:56:10,659 --> 00:56:14,589
didn't screw anything up we are now

1087
00:56:12,489 --> 00:56:16,539
building that hash table in the

1088
00:56:14,590 --> 00:56:19,030
background and so when I come in here

1089
00:56:16,539 --> 00:56:20,619
and view this thing we should now be

1090
00:56:19,030 --> 00:56:22,780
able to add a new button here that's

1091
00:56:20,619 --> 00:56:27,210
like much like we can set debug on or

1092
00:56:22,780 --> 00:56:30,160
off we should be able to also set to me

1093
00:56:27,210 --> 00:56:35,679
we should be able to also set a call

1094
00:56:30,159 --> 00:56:37,750
sites on and off in yeah in in that just

1095
00:56:35,679 --> 00:56:43,179
like we did show suppressed right so

1096
00:56:37,750 --> 00:56:46,630
here we would say show call sites and so

1097
00:56:43,179 --> 00:56:48,730
in terms of show call sites what I want

1098
00:56:46,630 --> 00:56:50,000
to do is just again look for where we

1099
00:56:48,730 --> 00:56:59,090
did show suppressed

1100
00:56:50,000 --> 00:57:07,849
and previously yeah alright so just do

1101
00:56:59,090 --> 00:57:13,550
this all sites and show all sites all

1102
00:57:07,849 --> 00:57:17,990
sites like so and so now we have the

1103
00:57:13,550 --> 00:57:19,550
ability Jenny now we have the ability to

1104
00:57:17,989 --> 00:57:22,669
turn call sites on and off and all we

1105
00:57:19,550 --> 00:57:26,440
need to do is add a mode in here that

1106
00:57:22,670 --> 00:57:30,170
will display them as we kind of go down

1107
00:57:26,440 --> 00:57:31,760
the list so what I'm going to do is

1108
00:57:30,170 --> 00:57:34,070
we're going to print this thing out and

1109
00:57:31,760 --> 00:57:36,560
then what we're going to do is if that

1110
00:57:34,070 --> 00:57:39,260
call sites thing is true so if we said

1111
00:57:36,559 --> 00:57:44,079
show call sites then now what I want to

1112
00:57:39,260 --> 00:57:47,720
do is go through my hash table to me and

1113
00:57:44,079 --> 00:57:50,119
for anything that's in this arena I want

1114
00:57:47,719 --> 00:57:53,929
to print out those call sites one by one

1115
00:57:50,119 --> 00:57:56,300
now I could use a chain to do that but I

1116
00:57:53,929 --> 00:57:57,799
don't care so I'm not going to because

1117
00:57:56,300 --> 00:58:05,150
it's just not going to cost me enough

1118
00:57:57,800 --> 00:58:08,740
time and Plus this number this is the

1119
00:58:05,150 --> 00:58:08,740
top clucks this time in the wrong place

1120
00:58:08,889 --> 00:58:18,348
sorry about that I meant this one so

1121
00:58:15,320 --> 00:58:20,119
when I print this out I then after we do

1122
00:58:18,349 --> 00:58:24,099
this I'm going to go ahead and put it in

1123
00:58:20,119 --> 00:58:27,099
here you technically should probably be

1124
00:58:24,099 --> 00:58:27,099
here

1125
00:58:29,420 --> 00:58:33,980
if we said to show call sites I'm gonna

1126
00:58:31,820 --> 00:58:36,440
loop through and remember this number

1127
00:58:33,980 --> 00:58:37,610
yeah I don't this is just the size of

1128
00:58:36,440 --> 00:58:39,500
the hash table in terms of efficiency

1129
00:58:37,610 --> 00:58:41,090
the number of call sites is not that

1130
00:58:39,500 --> 00:58:43,159
high so this doesn't have to be that

1131
00:58:41,090 --> 00:58:45,170
high but I do have to loop over each of

1132
00:58:43,159 --> 00:58:46,549
the slots every time if I want to find

1133
00:58:45,170 --> 00:58:48,110
one of these and that is a bit expensive

1134
00:58:46,550 --> 00:58:49,970
so I could use a chain if I didn't want

1135
00:58:48,110 --> 00:58:51,829
to I just have a change for each arena

1136
00:58:49,969 --> 00:58:53,779
that's that threads through I don't

1137
00:58:51,829 --> 00:58:55,819
think it's worth it at the moment but if

1138
00:58:53,780 --> 00:58:57,290
it turned out to me we could so I'm

1139
00:58:55,820 --> 00:59:00,410
gonna have to do slot index equals zero

1140
00:58:57,289 --> 00:59:05,420
slot in sis less than oops call site

1141
00:59:00,409 --> 00:59:07,159
hash sighs and also I might just undef

1142
00:59:05,420 --> 00:59:09,889
call site hash sighs here so that no one

1143
00:59:07,159 --> 00:59:12,289
has to worry about it so with this call

1144
00:59:09,889 --> 00:59:13,369
site hash sighs in fact I could've made

1145
00:59:12,289 --> 00:59:17,029
that I you through - I don't know why I

1146
00:59:13,369 --> 00:59:18,619
didn't but with the call site half size

1147
00:59:17,030 --> 00:59:20,960
as I loop through there

1148
00:59:18,619 --> 00:59:23,960
I now can look at the call site hash and

1149
00:59:20,960 --> 00:59:26,210
well actually I can just copy this exact

1150
00:59:23,960 --> 00:59:32,750
routine here this is all we're doing we

1151
00:59:26,210 --> 00:59:39,409
loop over each of the entries in that

1152
00:59:32,750 --> 00:59:46,429
particular slot and we print them out so

1153
00:59:39,409 --> 00:59:48,079
for each site if the it matches the

1154
00:59:46,429 --> 00:59:49,819
arena that we're trying to print out at

1155
00:59:48,079 --> 00:59:52,460
this time right we don't want to print

1156
00:59:49,820 --> 00:59:56,390
ones that aren't then what we want to do

1157
00:59:52,460 --> 01:00:02,019
is just display something that tells us

1158
00:59:56,389 --> 01:00:02,019
what happened here and you know

1159
01:00:03,070 --> 01:00:06,220
something like that

1160
01:00:10,449 --> 01:00:17,869
right okay so we need something that

1161
01:00:16,130 --> 01:00:20,570
will print out the information for this

1162
01:00:17,869 --> 01:00:22,449
particular call site which is not the

1163
01:00:20,570 --> 01:00:24,680
same thing as we were doing before but

1164
01:00:22,449 --> 01:00:27,799
some of its the same we know that the

1165
01:00:24,679 --> 01:00:29,569
call site here is gonna get oops its

1166
01:00:27,800 --> 01:00:33,260
grid printed out

1167
01:00:29,570 --> 01:00:35,780
we know that the site has a track for

1168
01:00:33,260 --> 01:00:39,320
the amount that it allocated so we know

1169
01:00:35,780 --> 01:00:44,390
this piece of information right so the

1170
01:00:39,320 --> 01:00:46,280
allocated oops so slight allocated count

1171
01:00:44,389 --> 01:00:50,150
is how many of the things we were going

1172
01:00:46,280 --> 01:00:53,990
to do and similarly we've got the site

1173
01:00:50,150 --> 01:00:55,460
allocated some could be the same thing

1174
01:00:53,989 --> 01:00:58,369
as we were doing here right so that's

1175
01:00:55,460 --> 01:01:01,670
the total amount divided by megabytes so

1176
01:00:58,369 --> 01:01:06,019
that we can put that in there right this

1177
01:01:01,670 --> 01:01:08,450
percentage we could also do which is to

1178
01:01:06,019 --> 01:01:10,699
say that we can say what it's the same

1179
01:01:08,449 --> 01:01:12,859
thing right we can just say whatever

1180
01:01:10,699 --> 01:01:14,389
this allocated sum is we can put out the

1181
01:01:12,860 --> 01:01:16,880
percentage that it is of the total

1182
01:01:14,389 --> 01:01:20,629
allocations we could also make it be per

1183
01:01:16,880 --> 01:01:22,550
arena if we wanted to but yeah so we

1184
01:01:20,630 --> 01:01:24,800
don't have blocks in this case so we

1185
01:01:22,550 --> 01:01:28,460
really only have this one we don't have

1186
01:01:24,800 --> 01:01:31,310
them because this is already out of like

1187
01:01:28,460 --> 01:01:33,740
we don't know we can't say that a

1188
01:01:31,309 --> 01:01:36,049
particular call site caused a block to

1189
01:01:33,739 --> 01:01:39,049
be created because that's really just

1190
01:01:36,050 --> 01:01:40,730
chance it's like a whole bunch of other

1191
01:01:39,050 --> 01:01:42,320
call sites might have used a whole all

1192
01:01:40,730 --> 01:01:44,150
the block and you just wanted this

1193
01:01:42,320 --> 01:01:47,690
little piece of memory we can't say that

1194
01:01:44,150 --> 01:01:49,519
it's like your fault right so so I don't

1195
01:01:47,690 --> 01:01:51,019
think we want anything more specific

1196
01:01:49,519 --> 01:01:53,780
than just here's how much memory the

1197
01:01:51,019 --> 01:01:55,969
thing happen to use anything else would

1198
01:01:53,780 --> 01:01:57,080
be a misleading statistic and really

1199
01:01:55,969 --> 01:01:58,819
what you should be doing if you're

1200
01:01:57,079 --> 01:02:00,739
worried about that is looking at the

1201
01:01:58,820 --> 01:02:03,289
graphical display cuz that will actually

1202
01:02:00,739 --> 01:02:06,649
tell you who's responsible for that kind

1203
01:02:03,289 --> 01:02:08,389
of nonsense right so if I turn on call

1204
01:02:06,650 --> 01:02:10,760
sites now what we should be able to see

1205
01:02:08,389 --> 01:02:15,440
hopefully is that when we look through

1206
01:02:10,760 --> 01:02:17,210
here we should see call sites and who is

1207
01:02:15,440 --> 01:02:20,030
actually responsible for most of the

1208
01:02:17,210 --> 01:02:20,849
memory now what it looks like is

1209
01:02:20,030 --> 01:02:23,460
happening

1210
01:02:20,849 --> 01:02:25,920
and I guess this explains the behavior

1211
01:02:23,460 --> 01:02:28,110
that we were seeing you can see that

1212
01:02:25,920 --> 01:02:30,780
like almost no memory even though

1213
01:02:28,110 --> 01:02:34,860
there's tons of allocations being

1214
01:02:30,780 --> 01:02:36,900
allocated by these streams here nothing

1215
01:02:34,860 --> 01:02:38,970
is actually getting that they're not

1216
01:02:36,900 --> 01:02:41,820
using hardly any memory so that's

1217
01:02:38,969 --> 01:02:43,799
probably why we're not seeing it in here

1218
01:02:41,820 --> 01:02:47,519
because nothing's happening with it

1219
01:02:43,800 --> 01:02:49,289
right it's like tiny little slivers so

1220
01:02:47,519 --> 01:02:51,420
that's great it tells us what we wanted

1221
01:02:49,289 --> 01:02:54,570
to know and it Altus understand what's

1222
01:02:51,420 --> 01:02:57,269
going on I don't like how this isn't

1223
01:02:54,570 --> 01:03:01,110
lined up and so I'd like to push this

1224
01:02:57,269 --> 01:03:05,099
back further by inserting you know what

1225
01:03:01,110 --> 01:03:17,340
1 2 3 4 5 spaces in there just to get

1226
01:03:05,099 --> 01:03:19,980
that more correct right and then in here

1227
01:03:17,340 --> 01:03:21,390
I want to do something like this just to

1228
01:03:19,980 --> 01:03:26,820
make sure you can see that it's like

1229
01:03:21,389 --> 01:03:29,730
underneath it maybe that and so here now

1230
01:03:26,820 --> 01:03:31,590
we can see those call sites and really

1231
01:03:29,730 --> 01:03:33,719
have a better understanding of who is

1232
01:03:31,590 --> 01:03:36,150
responsible for each of the you know

1233
01:03:33,719 --> 01:03:38,579
things that in the memory map right

1234
01:03:36,150 --> 01:03:40,500
so here in my call site display now it

1235
01:03:38,579 --> 01:03:42,329
should be a little bit better yeah it

1236
01:03:40,500 --> 01:03:44,070
looks better so you can see all the

1237
01:03:42,329 --> 01:03:46,829
allocations listed here you can see how

1238
01:03:44,070 --> 01:03:49,200
much memory each of them is taking and

1239
01:03:46,829 --> 01:03:51,269
so when we turn on call sites we can

1240
01:03:49,199 --> 01:03:54,000
just immediately look and say well okay

1241
01:03:51,269 --> 01:03:56,219
so it's pretty much this allocation and

1242
01:03:54,000 --> 01:03:59,280
this allocation that account for all of

1243
01:03:56,219 --> 01:04:01,859
the memory the rest of this stuff is

1244
01:03:59,280 --> 01:04:04,920
just irrelevant anyway these three

1245
01:04:01,860 --> 01:04:08,490
malloc ations here the interesting thing

1246
01:04:04,920 --> 01:04:11,369
about it is why they're not going away

1247
01:04:08,489 --> 01:04:13,319
and so I think the more interesting

1248
01:04:11,369 --> 01:04:15,779
question asked would be do we have a

1249
01:04:13,320 --> 01:04:18,030
leak in here somewhere where we were

1250
01:04:15,780 --> 01:04:22,290
supposed to be freeing a stream when we

1251
01:04:18,030 --> 01:04:25,110
for example loaded something up I think

1252
01:04:22,289 --> 01:04:28,019
the answer is no my assumption is that

1253
01:04:25,110 --> 01:04:32,150
this is the error streams that we record

1254
01:04:28,019 --> 01:04:33,949
on import why there are so many of these

1255
01:04:32,150 --> 01:04:35,420
unnecessary

1256
01:04:33,949 --> 01:04:37,068
allocations though because presumably

1257
01:04:35,420 --> 01:04:38,780
there aren't that many errors getting

1258
01:04:37,068 --> 01:04:41,599
reported you know we looking here we

1259
01:04:38,780 --> 01:04:45,200
don't see much happening there so I'm

1260
01:04:41,599 --> 01:04:47,150
wondering you know why why is that the

1261
01:04:45,199 --> 01:04:49,279
case and so I'm interested to know if

1262
01:04:47,150 --> 01:04:51,079
maybe there's something something going

1263
01:04:49,280 --> 01:04:53,720
on there that shouldn't be going on and

1264
01:04:51,079 --> 01:04:56,390
I'd like to take a look at that and find

1265
01:04:53,719 --> 01:04:59,029
out why you can also see that there's an

1266
01:04:56,389 --> 01:05:03,048
exactly matched pairing of these two

1267
01:04:59,030 --> 01:05:04,609
here 106 and 12 are happening what

1268
01:05:03,048 --> 01:05:07,280
appears to be on the exact same code

1269
01:05:04,608 --> 01:05:09,078
path there's also a set in asset that's

1270
01:05:07,280 --> 01:05:11,269
a BP that's accounting for a lot of

1271
01:05:09,079 --> 01:05:13,519
those let's go look and see what these

1272
01:05:11,269 --> 01:05:16,880
are just so you can have some idea of

1273
01:05:13,519 --> 01:05:19,039
what the heck is happening right so I'm

1274
01:05:16,880 --> 01:05:22,250
gonna first start with the ones in the

1275
01:05:19,039 --> 01:05:31,599
asset system proper 735 and handmade

1276
01:05:22,250 --> 01:05:35,059
asset and so we look in here and we see

1277
01:05:31,599 --> 01:05:38,180
we've got a base name for the asset

1278
01:05:35,059 --> 01:05:40,339
source file so I get I guess all that's

1279
01:05:38,179 --> 01:05:44,298
happening here is it's just pulling in

1280
01:05:40,338 --> 01:05:45,828
when we were doing the import right when

1281
01:05:44,298 --> 01:05:49,699
we check for that import it's just

1282
01:05:45,829 --> 01:05:52,010
remembering all of those names right

1283
01:05:49,699 --> 01:05:53,389
and that's probably there's probably two

1284
01:05:52,010 --> 01:05:57,440
of those there should be back to back

1285
01:05:53,389 --> 01:05:59,500
right 735 and 734 yes so it's just

1286
01:05:57,440 --> 01:06:03,139
storing these two pieces of information

1287
01:05:59,500 --> 01:06:05,539
that's good news because that's actually

1288
01:06:03,139 --> 01:06:07,400
effectively debug information it's

1289
01:06:05,539 --> 01:06:10,369
information that doesn't actually need

1290
01:06:07,400 --> 01:06:11,960
to happen when you're running the game

1291
01:06:10,369 --> 01:06:14,660
so we don't really have to care about

1292
01:06:11,960 --> 01:06:15,650
that in two ways a we don't care about

1293
01:06:14,659 --> 01:06:18,139
it because it won't happen at runtime

1294
01:06:15,650 --> 01:06:21,349
and B it's not taking up much memory

1295
01:06:18,139 --> 01:06:23,750
either all right so let's see where

1296
01:06:21,349 --> 01:06:26,750
these stream ones are coming from

1297
01:06:23,750 --> 01:06:31,280
that's 106 and 12 the problem we're

1298
01:06:26,750 --> 01:06:33,679
gonna have there you know I think is

1299
01:06:31,280 --> 01:06:39,260
just that when we're calling these out

1300
01:06:33,679 --> 01:06:43,909
F's we don't really know you know on

1301
01:06:39,260 --> 01:06:46,250
whose behalf they're happening so this

1302
01:06:43,909 --> 01:06:47,839
is not getting the information it needs

1303
01:06:46,250 --> 01:06:52,639
to really know who was

1304
01:06:47,840 --> 01:06:54,920
responsible right and so it's hard to

1305
01:06:52,639 --> 01:06:57,199
say what we could do is we could

1306
01:06:54,920 --> 01:06:59,900
propagate that information forward we

1307
01:06:57,199 --> 01:07:05,599
could make out if arglist actually pass

1308
01:06:59,900 --> 01:07:08,780
through that information I don't know

1309
01:07:05,599 --> 01:07:12,650
and what's interesting is it looks like

1310
01:07:08,780 --> 01:07:15,680
it's sort of already is passing through

1311
01:07:12,650 --> 01:07:23,329
that information in which case if I was

1312
01:07:15,679 --> 01:07:25,730
to actually look at push copy I could

1313
01:07:23,329 --> 01:07:34,340
just start calling that with the actual

1314
01:07:25,730 --> 01:07:39,670
debug name there and that's kind of

1315
01:07:34,340 --> 01:07:39,670
interesting so let's suppose you know

1316
01:07:40,030 --> 01:07:52,600
just for sake of argument here if we if

1317
01:07:49,010 --> 01:07:55,310
we went into that that stream system and

1318
01:07:52,599 --> 01:07:57,980
instead of using file name and line

1319
01:07:55,309 --> 01:08:01,630
number for the chunks instead we said

1320
01:07:57,980 --> 01:08:05,150
something like hey there's a grid there

1321
01:08:01,630 --> 01:08:07,130
you know that gets associated with each

1322
01:08:05,150 --> 01:08:09,050
individual stream chunk then what I

1323
01:08:07,130 --> 01:08:11,900
could do is I could leverage the debug

1324
01:08:09,050 --> 01:08:16,300
system and say well let's make out F

1325
01:08:11,900 --> 01:08:21,649
conform to that same procedure that

1326
01:08:16,300 --> 01:08:23,390
seems like a pretty good idea I don't

1327
01:08:21,649 --> 01:08:26,210
know I mean maybe it's dumb maybe it's

1328
01:08:23,390 --> 01:08:29,359
not but if we went ahead and said you

1329
01:08:26,210 --> 01:08:32,960
know only put these in here if you're

1330
01:08:29,359 --> 01:08:34,579
actually doing an internal build because

1331
01:08:32,960 --> 01:08:36,800
otherwise the grids really shouldn't be

1332
01:08:34,579 --> 01:08:40,579
there and then I went and looked at the

1333
01:08:36,800 --> 01:08:45,279
debug interface and I just copy like

1334
01:08:40,579 --> 01:08:48,050
that same sort of idea where we where we

1335
01:08:45,279 --> 01:08:51,108
generate grids for everybody who's doing

1336
01:08:48,050 --> 01:08:54,500
that oh wait sorry it's the memory so I

1337
01:08:51,109 --> 01:08:56,690
don't know why I said debug system so in

1338
01:08:54,500 --> 01:08:59,630
here right we've got the internal memory

1339
01:08:56,689 --> 01:09:01,219
per am and the internal memory pass so I

1340
01:08:59,630 --> 01:09:04,909
think what we can do is just

1341
01:09:01,220 --> 01:09:08,600
kind of copy that idea so in here where

1342
01:09:04,909 --> 01:09:10,519
we've got art out F arglist and out F we

1343
01:09:08,600 --> 01:09:13,730
can just say look those are gonna take

1344
01:09:10,520 --> 01:09:16,850
one of these things and we'll just

1345
01:09:13,729 --> 01:09:18,529
piggyback on that memory system and it's

1346
01:09:16,850 --> 01:09:22,010
understanding of what's happening there

1347
01:09:18,529 --> 01:09:24,259
and then when we have the out F stuff

1348
01:09:22,010 --> 01:09:28,250
what we're gonna do is actually use a

1349
01:09:24,260 --> 01:09:31,239
debug name at the call site location so

1350
01:09:28,250 --> 01:09:35,060
here where we generate the debug name

1351
01:09:31,239 --> 01:09:36,710
and you know what why I'm not sure why

1352
01:09:35,060 --> 01:09:44,570
there's a comma there because really

1353
01:09:36,710 --> 01:09:47,210
there shouldn't be right oh I know why

1354
01:09:44,569 --> 01:09:48,979
it's because debug you we could have

1355
01:09:47,210 --> 01:09:51,770
done it this way if d by name had just

1356
01:09:48,979 --> 01:09:55,899
expanded to a comma but oh well so

1357
01:09:51,770 --> 01:09:55,900
anyway if I do handmade internal here

1358
01:09:56,739 --> 01:10:00,889
then what I can do is just have two of

1359
01:09:58,880 --> 01:10:04,640
these where we say all right in one case

1360
01:10:00,890 --> 01:10:06,829
we'll do an out F debug name there in

1361
01:10:04,640 --> 01:10:10,280
the other case we just won't do anything

1362
01:10:06,829 --> 01:10:11,989
and we'll just call it regularly then we

1363
01:10:10,279 --> 01:10:13,130
should be good to go for making these

1364
01:10:11,989 --> 01:10:17,689
things work correctly

1365
01:10:13,130 --> 01:10:21,500
in both cases hopefully also I think we

1366
01:10:17,689 --> 01:10:22,429
need the little doodad there not really

1367
01:10:21,500 --> 01:10:24,909
though because you're always actually

1368
01:10:22,430 --> 01:10:28,070
going to pass something but either way

1369
01:10:24,909 --> 01:10:33,619
so I think that's correct and now if I

1370
01:10:28,069 --> 01:10:37,819
go in and record inside here and make

1371
01:10:33,619 --> 01:10:42,819
this be the internal memory per am and

1372
01:10:37,819 --> 01:10:46,869
then here we do a internal memory pass

1373
01:10:42,819 --> 01:10:50,420
right we should now have this stuff

1374
01:10:46,869 --> 01:10:53,989
hooked up so that it flows through and

1375
01:10:50,420 --> 01:10:57,949
tells us who is actually doing these

1376
01:10:53,989 --> 01:11:01,489
allocations and why again not sure

1377
01:10:57,949 --> 01:11:03,699
that's the greatest idea but you know I

1378
01:11:01,489 --> 01:11:09,139
just thought it might be worth a shot

1379
01:11:03,699 --> 01:11:19,729
in here I'm going to lose

1380
01:11:09,139 --> 01:11:21,949
if handmaiden turn off otherwise so yeah

1381
01:11:19,729 --> 01:11:25,339
so that all seems good and then in here

1382
01:11:21,948 --> 01:11:27,738
if we want to dump these out then what

1383
01:11:25,340 --> 01:11:30,579
we could do is say well anytime we're

1384
01:11:27,738 --> 01:11:34,638
dumping the stream to the CRT like this

1385
01:11:30,579 --> 01:11:37,609
what we can do is just if we know this

1386
01:11:34,639 --> 01:11:39,650
we print it if we don't we don't so if

1387
01:11:37,609 --> 01:11:42,079
we're in handmade internal mode we know

1388
01:11:39,649 --> 01:11:46,069
that we have this tracking information

1389
01:11:42,079 --> 01:11:47,658
with it so we can just say show the grid

1390
01:11:46,069 --> 01:11:49,759
which has the file name and line number

1391
01:11:47,658 --> 01:11:55,519
in it which is exactly what we wanted if

1392
01:11:49,760 --> 01:11:59,000
it doesn't then we can't no big deal all

1393
01:11:55,520 --> 01:12:02,570
right when we do the error arglist here

1394
01:11:59,000 --> 01:12:04,520
that seems fine for out if arglist

1395
01:12:02,569 --> 01:12:11,840
we would need to generate a debug name

1396
01:12:04,520 --> 01:12:14,179
here potentially and it feels like that

1397
01:12:11,840 --> 01:12:17,480
wants to get that passed as well in a

1398
01:12:14,179 --> 01:12:19,670
sense but I don't know to what extent we

1399
01:12:17,479 --> 01:12:23,468
really want to go down that road so what

1400
01:12:19,670 --> 01:12:23,469
I may do here is just say

1401
01:12:28,179 --> 01:12:41,649
I may just go ahead and do it this way

1402
01:12:33,340 --> 01:12:50,409
so we'll actually generate a debug name

1403
01:12:41,649 --> 01:12:53,738
here for ourselves like so right in that

1404
01:12:50,408 --> 01:12:55,929
cubes that view the comma there or

1405
01:12:53,738 --> 01:12:58,599
should have yeah

1406
01:12:55,929 --> 01:13:00,190
and so now maybe we get a little more

1407
01:12:58,600 --> 01:13:01,719
visibility into this I don't know again

1408
01:13:00,189 --> 01:13:03,189
not sure that was really necessary or if

1409
01:13:01,719 --> 01:13:03,698
it was a good idea but we're gonna find

1410
01:13:03,189 --> 01:13:06,479
out

1411
01:13:03,698 --> 01:13:11,649
cannot open oh yeah I agree with that

1412
01:13:06,479 --> 01:13:13,299
let's try rebuilding that and so this

1413
01:13:11,649 --> 01:13:15,960
should just give us a little more detail

1414
01:13:13,300 --> 01:13:19,289
about when and where those stream

1415
01:13:15,960 --> 01:13:22,179
allocations are coming from Molly beam

1416
01:13:19,289 --> 01:13:22,869
come on up come on up there's a good

1417
01:13:22,179 --> 01:13:28,260
girl

1418
01:13:22,869 --> 01:13:33,929
that's my good girl it's a good girl

1419
01:13:28,260 --> 01:13:33,929
how are you doing how's it going

1420
01:13:34,319 --> 01:13:41,229
did you just have dinner

1421
01:13:36,329 --> 01:13:44,050
uf is at 6 o'clock yeah she has a little

1422
01:13:41,229 --> 01:13:46,839
automated feeder that goes off at

1423
01:13:44,050 --> 01:13:49,840
regular intervals I just feel like

1424
01:13:46,840 --> 01:13:51,369
that's better for her cuz she you know

1425
01:13:49,840 --> 01:13:54,969
there's no variability to it she can

1426
01:13:51,369 --> 01:13:58,090
rely on her meal times if I'm not there

1427
01:13:54,969 --> 01:13:59,980
or something you know it's for her dry

1428
01:13:58,090 --> 01:14:03,429
food her wet food still obviously has to

1429
01:13:59,979 --> 01:14:06,250
be done by a human but her dry food

1430
01:14:03,429 --> 01:14:10,630
isn't that right her dry food you can

1431
01:14:06,250 --> 01:14:14,050
give her so she can feed herself alright

1432
01:14:10,630 --> 01:14:15,579
um so let's see does that give us any

1433
01:14:14,050 --> 01:14:16,840
more insight into whether or not those

1434
01:14:15,579 --> 01:14:19,380
things are supposed to be happening just

1435
01:14:16,840 --> 01:14:22,529
in case there's an issue with them Oh

1436
01:14:19,380 --> 01:14:26,230
what are you doing baby what's going on

1437
01:14:22,529 --> 01:14:28,988
what's going on I'm just finishing up

1438
01:14:26,229 --> 01:14:31,839
programming it's just a little bit

1439
01:14:28,988 --> 01:14:33,549
longer actually don't know how much

1440
01:14:31,840 --> 01:14:34,659
longer it is it's maybe 45 minutes

1441
01:14:33,550 --> 01:14:38,949
longer which is actually quite a bit

1442
01:14:34,658 --> 01:14:40,299
longer I'm sorry we can play later if

1443
01:14:38,948 --> 01:14:43,059
you want to

1444
01:14:40,300 --> 01:14:44,350
I don't know what you want to do you can

1445
01:14:43,060 --> 01:14:45,730
sit here if you want although it's a

1446
01:14:44,350 --> 01:14:47,110
little hard to type around you you know

1447
01:14:45,729 --> 01:14:56,199
we have a problem with this every day at

1448
01:14:47,109 --> 01:14:57,789
work that's a good that's a good ok well

1449
01:14:56,199 --> 01:14:59,289
I don't know what's going on here with

1450
01:14:57,789 --> 01:15:00,609
Molly she's she's gonna make her own

1451
01:14:59,289 --> 01:15:01,899
decisions she may just sit on the

1452
01:15:00,609 --> 01:15:04,929
keyboard in which case the stream is

1453
01:15:01,899 --> 01:15:06,489
basically over we can try to put her in

1454
01:15:04,930 --> 01:15:08,789
the cat tree and maybe she'll sit maybe

1455
01:15:06,489 --> 01:15:12,760
she won't who knows

1456
01:15:08,789 --> 01:15:14,769
Gina good brushing I didn't brush you

1457
01:15:12,760 --> 01:15:21,420
yesterday did I did I brush you

1458
01:15:14,770 --> 01:15:23,710
yesterday I don't think I did I'm sorry

1459
01:15:21,420 --> 01:15:26,920
should brush you later will brush you

1460
01:15:23,710 --> 01:15:29,560
later ok right after the stream will

1461
01:15:26,920 --> 01:15:32,260
give you a good brushing you'll be all

1462
01:15:29,560 --> 01:15:33,789
nice and clean so anyway looking at the

1463
01:15:32,260 --> 01:15:36,850
call site there to see if we got any

1464
01:15:33,789 --> 01:15:39,909
more infor ok Molly Molly wants to

1465
01:15:36,850 --> 01:15:42,280
modify the mouse position as well as is

1466
01:15:39,909 --> 01:15:44,470
her prerogative ok those are my

1467
01:15:42,279 --> 01:15:45,639
headphones can we step over the

1468
01:15:44,470 --> 01:15:50,140
headphones can we step over the

1469
01:15:45,640 --> 01:15:51,220
headphones look there we go ok so I

1470
01:15:50,140 --> 01:15:53,289
don't know if we got any information

1471
01:15:51,220 --> 01:15:57,310
about the call sites here that'll help

1472
01:15:53,289 --> 01:15:59,439
us figure things out there might be but

1473
01:15:57,310 --> 01:16:03,039
there might not be so taking a look in

1474
01:15:59,439 --> 01:16:04,899
here at the stream allocations that used

1475
01:16:03,039 --> 01:16:08,609
to be there you can see now that some of

1476
01:16:04,899 --> 01:16:12,339
them have gotten more detailed right so

1477
01:16:08,609 --> 01:16:14,679
for example these two we know were

1478
01:16:12,340 --> 01:16:17,650
previously allocations that are just

1479
01:16:14,680 --> 01:16:19,510
made to track source asset files of

1480
01:16:17,649 --> 01:16:21,759
which we have many now because there's

1481
01:16:19,510 --> 01:16:25,000
just even though the game isn't really

1482
01:16:21,760 --> 01:16:27,489
have even probably a tenth of the art

1483
01:16:25,000 --> 01:16:29,439
we'll have there's a lot of source files

1484
01:16:27,489 --> 01:16:31,539
a lot of source pngs for things like

1485
01:16:29,439 --> 01:16:34,899
fonts you know that that ups that number

1486
01:16:31,539 --> 01:16:36,699
really quickly and so if we look down

1487
01:16:34,899 --> 01:16:39,339
now we can see that there's 360

1488
01:16:36,699 --> 01:16:41,859
allocations still happening from stream

1489
01:16:39,340 --> 01:16:44,020
12 but now we've got some more

1490
01:16:41,859 --> 01:16:46,479
information about what's happening for

1491
01:16:44,020 --> 01:16:49,660
example in here this is coming from

1492
01:16:46,479 --> 01:16:51,609
import 1127 and so that gives us the

1493
01:16:49,659 --> 01:16:53,139
opportunity to go there and just see is

1494
01:16:51,609 --> 01:16:53,889
that something that should have stuck

1495
01:16:53,140 --> 01:17:01,780
around or

1496
01:16:53,889 --> 01:17:07,029
isn't it right here animate import 1127

1497
01:17:01,779 --> 01:17:10,179
right and so it looks like these are

1498
01:17:07,029 --> 01:17:12,130
error messages telling us that it found

1499
01:17:10,179 --> 01:17:15,219
information and something that was

1500
01:17:12,130 --> 01:17:17,800
supposed to be a blank tile so that's

1501
01:17:15,219 --> 01:17:19,779
like that's just an error we're getting

1502
01:17:17,800 --> 01:17:24,310
errors on some blank tile stuff

1503
01:17:19,779 --> 01:17:33,309
there must be something is happening

1504
01:17:24,310 --> 01:17:35,289
with our asset metadata so the

1505
01:17:33,310 --> 01:17:37,869
interesting thing about that is I think

1506
01:17:35,289 --> 01:17:40,210
that maybe an erroneous error message at

1507
01:17:37,868 --> 01:17:44,698
this point though because the thing is

1508
01:17:40,210 --> 01:17:47,618
that error message is probably wrong for

1509
01:17:44,698 --> 01:17:53,919
bitmaps because they don't have a type

1510
01:17:47,618 --> 01:17:56,769
ID if I'm not mistaken because they're

1511
01:17:53,920 --> 01:18:01,000
never referenced now maybe we should

1512
01:17:56,770 --> 01:18:03,550
they have direct asset references in the

1513
01:18:01,000 --> 01:18:05,679
font right so they don't get looked up

1514
01:18:03,550 --> 01:18:07,989
by their type and I think their type is

1515
01:18:05,679 --> 01:18:10,300
just set to zero now that may be bad

1516
01:18:07,988 --> 01:18:12,579
because it may be that that's sort of a

1517
01:18:10,300 --> 01:18:15,400
bit of breakage in the system that we

1518
01:18:12,579 --> 01:18:16,929
don't really want but I do think that

1519
01:18:15,399 --> 01:18:20,408
sort of indicates that this error

1520
01:18:16,929 --> 01:18:21,730
message is not appropriate because it's

1521
01:18:20,408 --> 01:18:23,439
erroring on something that's actually

1522
01:18:21,729 --> 01:18:26,939
fine

1523
01:18:23,439 --> 01:18:26,939
so I might go ahead and do this

1524
01:18:31,399 --> 01:18:54,589
I could do this and comment it out or I

1525
01:18:51,380 --> 01:18:57,260
can go try to fix that now and I'm not

1526
01:18:54,590 --> 01:18:59,300
sure which one I want to do I suppose

1527
01:18:57,260 --> 01:19:04,310
just doing an asset rebuild it's pretty

1528
01:18:59,300 --> 01:19:10,449
trivial and we could just add a type for

1529
01:19:04,310 --> 01:19:13,580
it let's see what that would entail

1530
01:19:10,449 --> 01:19:15,109
would it break anything else because I

1531
01:19:13,579 --> 01:19:19,130
would like to still know this piece of

1532
01:19:15,109 --> 01:19:21,019
information in the future when we sort

1533
01:19:19,130 --> 01:19:22,789
of refine our import maybe a little bit

1534
01:19:21,020 --> 01:19:25,100
I think that's a good thing to have in

1535
01:19:22,789 --> 01:19:32,600
there so we finally went to the file

1536
01:19:25,100 --> 01:19:38,300
format and just said hey we've got the

1537
01:19:32,600 --> 01:19:40,850
basic types here where did those go so

1538
01:19:38,300 --> 01:19:44,020
inside here you know

1539
01:19:40,850 --> 01:19:47,090
in fact there's font glyph right there I

1540
01:19:44,020 --> 01:19:51,320
think we're just not using that anymore

1541
01:19:47,090 --> 01:19:53,119
but we could and if we did then

1542
01:19:51,319 --> 01:19:56,590
presumably we wouldn't have that

1543
01:19:53,119 --> 01:19:59,689
erroneous error so like that would be

1544
01:19:56,590 --> 01:20:02,529
when we actually do the import font

1545
01:19:59,689 --> 01:20:02,529
right

1546
01:20:09,000 --> 01:20:19,500
in here when the tags for that font are

1547
01:20:14,789 --> 01:20:22,800
being created right so we come through

1548
01:20:19,500 --> 01:20:25,590
here we're parsing these things and we

1549
01:20:22,800 --> 01:20:29,100
get these various glyphs when we come

1550
01:20:25,590 --> 01:20:33,239
through here and we set everything up we

1551
01:20:29,100 --> 01:20:38,880
look for the asset data and we set the

1552
01:20:33,238 --> 01:20:43,169
code points all up in here right and so

1553
01:20:38,880 --> 01:20:50,819
this process every time we do this when

1554
01:20:43,170 --> 01:20:54,270
we load that bitmap which which is going

1555
01:20:50,819 --> 01:21:04,189
to be this call here update asset data

1556
01:20:54,270 --> 01:21:04,190
from file so if we're looking at this

1557
01:21:06,439 --> 01:21:16,500
we're passing it null tags and template

1558
01:21:11,399 --> 01:21:19,170
tags and I'm guessing that that's really

1559
01:21:16,500 --> 01:21:22,560
the issue here so when this thing gets

1560
01:21:19,170 --> 01:21:25,529
updated and it's going to look to see

1561
01:21:22,560 --> 01:21:29,250
right it does it does this update asset

1562
01:21:25,529 --> 01:21:35,000
metadata right and it passes those

1563
01:21:29,250 --> 01:21:35,000
template tags so the template tags

1564
01:21:38,439 --> 01:21:50,979
here are just never set right so I guess

1565
01:21:46,390 --> 01:21:55,950
what I would say is that seems like the

1566
01:21:50,979 --> 01:21:55,949
issue and maybe we should just fix it

1567
01:21:57,390 --> 01:22:09,280
yeah I don't know I think that's what we

1568
01:22:06,670 --> 01:22:13,899
need to do so if we look through the

1569
01:22:09,279 --> 01:22:16,479
template tags there it looks like nobody

1570
01:22:13,899 --> 01:22:21,759
else even uses them yeah

1571
01:22:16,479 --> 01:22:24,219
they don't and so you know that's

1572
01:22:21,760 --> 01:22:29,890
probably all we would really need to do

1573
01:22:24,220 --> 01:22:36,550
is just say well the template tags they

1574
01:22:29,890 --> 01:22:39,070
have in this is the tag grid or Ritter

1575
01:22:36,550 --> 01:22:46,180
whatever it is called their import grid

1576
01:22:39,069 --> 01:22:52,929
tags inside the first one of those the

1577
01:22:46,180 --> 01:22:58,900
type ID of this thing it's going to want

1578
01:22:52,930 --> 01:23:01,420
to be that long cliff right and so I

1579
01:22:58,899 --> 01:23:05,759
think that's all we really need to do is

1580
01:23:01,420 --> 01:23:05,760
make sure that that gets set everywhere

1581
01:23:07,109 --> 01:23:10,949
looks like that

1582
01:23:22,170 --> 01:23:31,319
did I I did that wrong sorry it's just

1583
01:23:28,329 --> 01:23:36,309
asset funk lifts now that was old news

1584
01:23:31,319 --> 01:23:39,189
um so yeah if I go ahead and go to the

1585
01:23:36,310 --> 01:23:41,619
import code and just change that to be

1586
01:23:39,189 --> 01:23:47,158
this I think now all of those would they

1587
01:23:41,618 --> 01:23:50,319
get imported would come in hopefully as

1588
01:23:47,158 --> 01:23:54,670
font glyphs and you wouldn't have that

1589
01:23:50,319 --> 01:23:58,179
error happening that's my assumption and

1590
01:23:54,670 --> 01:24:01,630
then that error would only occur on

1591
01:23:58,179 --> 01:24:07,270
actual valid prop you know things that

1592
01:24:01,630 --> 01:24:12,010
are actually wrong okay so if we go

1593
01:24:07,270 --> 01:24:14,320
ahead and do our asset rebuild now

1594
01:24:12,010 --> 01:24:19,710
hopefully that would fix the problem

1595
01:24:14,319 --> 01:24:19,710
so inside handmade

1596
01:24:19,899 --> 01:24:26,229
and that is in the data directory so

1597
01:24:23,460 --> 01:24:26,949
we've got the font and the font is in

1598
01:24:26,229 --> 01:24:30,009
the base game

1599
01:24:26,949 --> 01:24:32,460
HHA so I think if I just ask it to

1600
01:24:30,010 --> 01:24:36,880
rebuild that we should be good to go

1601
01:24:32,460 --> 01:24:39,310
probably and then we can see whether or

1602
01:24:36,880 --> 01:24:40,539
not we're still getting that airing out

1603
01:24:39,310 --> 01:24:42,010
where it's like looking and going like

1604
01:24:40,539 --> 01:24:44,409
hey man these things I'm importing they

1605
01:24:42,010 --> 01:24:48,570
don't have any types associated with

1606
01:24:44,409 --> 01:24:48,569
them do you care

1607
01:24:57,140 --> 01:25:03,360
all right and so that did the full asset

1608
01:25:00,329 --> 01:25:05,579
rebuild of the game assets so they'll be

1609
01:25:03,359 --> 01:25:07,109
more call sites in here probably right

1610
01:25:05,579 --> 01:25:09,210
then there would have been before

1611
01:25:07,109 --> 01:25:11,460
because we would have saved some

1612
01:25:09,210 --> 01:25:16,020
reporting about what actually got

1613
01:25:11,460 --> 01:25:19,590
imported but off we go so let's now take

1614
01:25:16,020 --> 01:25:25,170
a look and see although actually even

1615
01:25:19,590 --> 01:25:27,840
just looking at it now it does look like

1616
01:25:25,170 --> 01:25:31,710
maybe that already improve things a

1617
01:25:27,840 --> 01:25:33,449
little bit let's take a look so now on a

1618
01:25:31,710 --> 01:25:37,230
on a fresh run where things have

1619
01:25:33,449 --> 01:25:39,720
actually been built let's take a look at

1620
01:25:37,229 --> 01:25:40,919
what we've got here so we've got one

1621
01:25:39,720 --> 01:25:50,550
hundred and twenty two allocations

1622
01:25:40,920 --> 01:25:52,199
coming from asset ten twenty well

1623
01:25:50,550 --> 01:25:54,360
actually let's just start with one thing

1624
01:25:52,199 --> 01:25:55,470
that error is not happening anymore

1625
01:25:54,359 --> 01:25:57,899
right

1626
01:25:55,470 --> 01:25:59,760
so that was exactly what I thought it

1627
01:25:57,899 --> 01:26:02,989
was but let's just double check the rest

1628
01:25:59,760 --> 01:26:02,989
of these so

1629
01:26:07,800 --> 01:26:14,400
I'm not sure what this error is it looks

1630
01:26:12,840 --> 01:26:16,110
like we've got assets that are saying

1631
01:26:14,399 --> 01:26:23,779
they come from the same place in the

1632
01:26:16,109 --> 01:26:23,779
spritesheet yeah

1633
01:26:26,460 --> 01:26:37,680
so that seems bad hmm

1634
01:26:33,779 --> 01:26:39,719
I wonder if that means we're not setting

1635
01:26:37,680 --> 01:26:54,650
our annotations right for grid X and

1636
01:26:39,720 --> 01:26:57,480
grid Y although it's awfully suspicious

1637
01:26:54,649 --> 01:27:02,460
so I'm kind of wondering if this is also

1638
01:26:57,479 --> 01:27:05,639
if this is because of a way that we're

1639
01:27:02,460 --> 01:27:10,949
attributing names to things that causes

1640
01:27:05,640 --> 01:27:17,119
all of the font glyphs themselves to be

1641
01:27:10,949 --> 01:27:17,119
registered to the same file name so I

1642
01:27:18,439 --> 01:27:31,699
wonder if that is the problem let's take

1643
01:27:27,149 --> 01:27:34,409
a look so when we do parse font block

1644
01:27:31,699 --> 01:27:37,609
for each one of the glyphs we're gonna

1645
01:27:34,409 --> 01:27:42,539
call update asset data from file right

1646
01:27:37,609 --> 01:27:50,699
and we use this import file match as the

1647
01:27:42,539 --> 01:27:59,489
match so in theory that seems like it

1648
01:27:50,699 --> 01:28:01,489
should be okay to me because it's going

1649
01:27:59,489 --> 01:28:07,590
to create an asset source file for that

1650
01:28:01,489 --> 01:28:09,920
piece of information which should be

1651
01:28:07,590 --> 01:28:09,920
unique

1652
01:28:22,350 --> 01:28:29,710
yeah that seems fine so I don't know why

1653
01:28:25,658 --> 01:28:31,839
that would be having hmm so I guess what

1654
01:28:29,710 --> 01:28:35,429
I'm gonna do is say I don't really know

1655
01:28:31,840 --> 01:28:39,060
exactly where that's coming from

1656
01:28:35,429 --> 01:28:42,940
so what I'd like to do is dump this file

1657
01:28:39,060 --> 01:28:47,190
and see what's actually going on there

1658
01:28:42,939 --> 01:28:51,039
so if I run HHA edit I'm gonna use the -

1659
01:28:47,189 --> 01:28:56,259
dump call and I'm gonna dump base game

1660
01:28:51,039 --> 01:29:04,840
that HHA to base game dot txt and then I

1661
01:28:56,260 --> 01:29:07,659
want to run tab view on it so if I take

1662
01:29:04,840 --> 01:29:09,880
a look in here and just see what I've

1663
01:29:07,658 --> 01:29:13,210
got I should be able to get the

1664
01:29:09,880 --> 01:29:15,350
annotation for this thing and if I look

1665
01:29:13,210 --> 01:29:18,439
at these

1666
01:29:15,350 --> 01:29:18,439
[Music]

1667
01:29:25,779 --> 01:29:33,590
so I guess a couple things first of all

1668
01:29:29,329 --> 01:29:36,170
I'm not sure why this thinks there's no

1669
01:29:33,590 --> 01:29:43,159
type because I thought I tried to set

1670
01:29:36,170 --> 01:29:45,619
the type of each of these to be a font

1671
01:29:43,159 --> 01:29:49,069
glyph now it could be that HHA edit just

1672
01:29:45,619 --> 01:29:57,229
doesn't know how to do that and I could

1673
01:29:49,069 --> 01:29:59,210
look for that not sure where this

1674
01:29:57,229 --> 01:30:02,239
actually gets printed out that's in read

1675
01:29:59,210 --> 01:30:04,730
hij I don't care about that where does

1676
01:30:02,239 --> 01:30:13,479
this actually figure out what to print

1677
01:30:04,729 --> 01:30:22,339
things so this is where we print things

1678
01:30:13,479 --> 01:30:27,549
category name from ID is where we take

1679
01:30:22,340 --> 01:30:31,880
care of this in category name from ID

1680
01:30:27,550 --> 01:30:34,460
we definitely have a set font glyph so

1681
01:30:31,880 --> 01:30:37,159
it doesn't look like I'm actually doing

1682
01:30:34,460 --> 01:30:39,890
this properly because if I was we would

1683
01:30:37,159 --> 01:30:46,479
have seen that value show up here right

1684
01:30:39,890 --> 01:30:49,610
because it should have found it in that

1685
01:30:46,479 --> 01:30:51,889
run-through and it should have decrypted

1686
01:30:49,609 --> 01:30:56,439
it here well decrypted it should have

1687
01:30:51,890 --> 01:30:59,990
cracked it here and showed me the name

1688
01:30:56,439 --> 01:31:02,809
but instead it didn't what I will say

1689
01:30:59,989 --> 01:31:04,670
though is I must be looking at the wrong

1690
01:31:02,810 --> 01:31:08,780
thing because that prints out none and

1691
01:31:04,670 --> 01:31:12,890
this would print out unknown so I'm

1692
01:31:08,779 --> 01:31:16,219
still a bit of a loss there there's the

1693
01:31:12,890 --> 01:31:18,050
assets we come through here we efferent

1694
01:31:16,220 --> 01:31:21,310
out at present you percent counter

1695
01:31:18,050 --> 01:31:21,310
account category data

1696
01:31:23,510 --> 01:31:37,909
so I guess this part here I can see what

1697
01:31:34,609 --> 01:31:42,399
the issue is we don't add any actual

1698
01:31:37,909 --> 01:31:45,559
tags we just say what the type was and

1699
01:31:42,399 --> 01:31:48,079
since we don't actually add any tags

1700
01:31:45,560 --> 01:31:58,820
this still wouldn't be able to find out

1701
01:31:48,079 --> 01:31:59,689
what that thing was all right I can see

1702
01:31:58,819 --> 01:32:03,380
why that's an issue

1703
01:31:59,689 --> 01:32:11,149
um do I want to actually add a tag for

1704
01:32:03,380 --> 01:32:13,100
that I'm not sure I'm not sure but the

1705
01:32:11,149 --> 01:32:15,139
part that I was looking at more

1706
01:32:13,100 --> 01:32:18,680
specifically right now is the fact that

1707
01:32:15,140 --> 01:32:20,630
all of these do have a separate source

1708
01:32:18,680 --> 01:32:22,730
file name for them right

1709
01:32:20,630 --> 01:32:25,279
so as I'm looping through here you can

1710
01:32:22,729 --> 01:32:29,000
see that they actually are totally

1711
01:32:25,279 --> 01:32:31,069
distinct so what I don't know is why

1712
01:32:29,000 --> 01:32:32,869
we're getting this error message that

1713
01:32:31,069 --> 01:32:36,939
says that there's things that are

1714
01:32:32,869 --> 01:32:40,640
overlapping because I don't actually see

1715
01:32:36,939 --> 01:32:42,049
anything that's overlapping unless I'm

1716
01:32:40,640 --> 01:32:45,739
just missing it because I'm scrolling by

1717
01:32:42,050 --> 01:32:52,400
too quickly but it honestly doesn't

1718
01:32:45,738 --> 01:32:56,779
really look like it right so that would

1719
01:32:52,399 --> 01:33:02,809
be an example of it so it looks like

1720
01:32:56,779 --> 01:33:06,259
these because they're audio they're

1721
01:33:02,810 --> 01:33:11,060
chunked streaming audio so the chunk

1722
01:33:06,260 --> 01:33:16,820
streaming audio does have sort of a you

1723
01:33:11,060 --> 01:33:20,170
know it it has two things that that say

1724
01:33:16,819 --> 01:33:20,170
that they're coming from the same place

1725
01:33:31,420 --> 01:33:36,399
and so the problem with that is it's

1726
01:33:34,029 --> 01:33:38,529
really just totally ok that that's the

1727
01:33:36,399 --> 01:33:41,170
case you just want to take the the

1728
01:33:38,529 --> 01:33:44,710
earlier asset index in the case of

1729
01:33:41,170 --> 01:33:46,270
streaming audio so I think really all I

1730
01:33:44,710 --> 01:33:57,010
have to do is just always make sure I

1731
01:33:46,270 --> 01:34:03,490
take the lesser of the two I mean that

1732
01:33:57,010 --> 01:34:05,770
should be okay so in this case we're

1733
01:34:03,489 --> 01:34:07,960
we're going to look at it here what we

1734
01:34:05,770 --> 01:34:10,120
want to do is say if it's equal to zero

1735
01:34:07,960 --> 01:34:12,520
well then let me assign it if it's not

1736
01:34:10,119 --> 01:34:14,079
then we want to actually check to make

1737
01:34:12,520 --> 01:34:17,410
sure that we actually want to report

1738
01:34:14,079 --> 01:34:22,059
this in the case where it's an audio

1739
01:34:17,409 --> 01:34:34,269
asset that's okay so in other words if

1740
01:34:22,060 --> 01:34:36,630
this conflicted asset are what's the

1741
01:34:34,270 --> 01:34:36,630
actual

1742
01:34:42,118 --> 01:34:47,250
I want to know if it's a sound so an

1743
01:34:44,460 --> 01:34:51,630
haja set sound so if this thing is a

1744
01:34:47,250 --> 01:34:53,579
sound then I don't want to print out

1745
01:34:51,630 --> 01:34:56,909
that error message instead what I want

1746
01:34:53,579 --> 01:35:00,809
to do is assign this if it's less right

1747
01:34:56,908 --> 01:35:03,750
so I just want to say if grid asset

1748
01:35:00,810 --> 01:35:10,260
index is greater than global asset index

1749
01:35:03,750 --> 01:35:12,029
then you know assign it right although

1750
01:35:10,260 --> 01:35:14,429
since global asset index is always

1751
01:35:12,029 --> 01:35:16,349
ascending that probably isn't even

1752
01:35:14,429 --> 01:35:17,760
necessary but that's basically what we

1753
01:35:16,349 --> 01:35:20,940
want to do so we want to take the lowest

1754
01:35:17,760 --> 01:35:23,219
value that we can that we can get and

1755
01:35:20,939 --> 01:35:26,549
then we would know to replace the run if

1756
01:35:23,219 --> 01:35:28,710
we had to actually replace it right so

1757
01:35:26,550 --> 01:35:32,520
I'm interested to know does that help us

1758
01:35:28,710 --> 01:35:38,050
with our problem here so looking at the

1759
01:35:32,520 --> 01:35:40,070
memory read out here it looks to me like

1760
01:35:38,050 --> 01:35:49,139
[Music]

1761
01:35:40,069 --> 01:35:54,840
10 29 so no it didn't so it looks like

1762
01:35:49,139 --> 01:35:55,949
that unfortunately is not helpful so

1763
01:35:54,840 --> 01:35:59,940
we're still getting a bunch of these

1764
01:35:55,948 --> 01:36:03,539
errors I'd and I just don't know on

1765
01:35:59,939 --> 01:36:05,698
whose behalf we're getting them we don't

1766
01:36:03,539 --> 01:36:07,649
currently have a way to look at all

1767
01:36:05,698 --> 01:36:12,960
errors in all source files which we

1768
01:36:07,649 --> 01:36:15,809
probably should have because we would be

1769
01:36:12,960 --> 01:36:17,969
able to see that if we did we only have

1770
01:36:15,810 --> 01:36:22,429
the main error stream here that we don't

1771
01:36:17,969 --> 01:36:22,429
have the purse or file error stream

1772
01:36:22,698 --> 01:36:31,678
which would be nice maybe this should

1773
01:36:25,770 --> 01:36:34,159
actually go to that air stream but it's

1774
01:36:31,679 --> 01:36:34,158
hard to say

1775
01:36:37,270 --> 01:36:43,159
so I'm gonna do the poor man's version

1776
01:36:40,039 --> 01:36:45,260
of this just for expedience at the

1777
01:36:43,158 --> 01:36:47,089
moment that's probably something that we

1778
01:36:45,260 --> 01:36:52,219
should take care of in a more definitive

1779
01:36:47,090 --> 01:36:54,560
way later if I go set a breakpoint where

1780
01:36:52,219 --> 01:36:58,039
that happens we can look at which assets

1781
01:36:54,560 --> 01:37:01,460
are causing the issue and maybe get a

1782
01:36:58,039 --> 01:37:05,260
better sense of why so if I look at

1783
01:37:01,460 --> 01:37:05,260
source file name oops

1784
01:37:05,600 --> 01:37:11,380
of course we can't actually because it's

1785
01:37:08,359 --> 01:37:11,380
all been optimized out

1786
01:37:25,359 --> 01:37:38,479
so here's the actual source file in

1787
01:37:29,630 --> 01:37:42,590
question what so this is a case of

1788
01:37:38,479 --> 01:37:45,609
somebody not actually specifying which

1789
01:37:42,590 --> 01:37:48,860
source file that came from looks like

1790
01:37:45,609 --> 01:37:51,349
which is surely an import book right

1791
01:37:48,859 --> 01:37:54,349
that means that somebody's is not

1792
01:37:51,350 --> 01:37:58,910
setting their actual annotation to have

1793
01:37:54,350 --> 01:38:04,430
what the source file actually was let's

1794
01:37:58,909 --> 01:38:08,199
take a look at what that asset looks

1795
01:38:04,430 --> 01:38:11,720
like just we can have a better idea so

1796
01:38:08,199 --> 01:38:17,109
looking here we can see a couple things

1797
01:38:11,720 --> 01:38:17,110
so it's a type two I don't know if I can

1798
01:38:18,189 --> 01:38:24,429
that's a sound so it was actually a

1799
01:38:22,100 --> 01:38:24,430
sound

1800
01:38:31,399 --> 01:38:33,429
ah

1801
01:38:35,130 --> 01:38:39,699
we actually need to look at the HHA it's

1802
01:38:37,600 --> 01:38:50,260
up there that's what we're gonna let's

1803
01:38:39,698 --> 01:38:53,769
try that wartime okay so we shouldn't be

1804
01:38:50,260 --> 01:38:56,949
looking at sounds now hopefully right so

1805
01:38:53,770 --> 01:39:05,620
the type is Type three and that type is

1806
01:38:56,948 --> 01:39:11,049
a font so the font is saying it came

1807
01:39:05,619 --> 01:39:19,899
from a base name oops sorry

1808
01:39:11,050 --> 01:39:28,260
a source file name of base game and that

1809
01:39:19,899 --> 01:39:28,259
doesn't seem that doesn't seem useful

1810
01:39:29,039 --> 01:39:32,439
but I guess now I think about it it's

1811
01:39:31,210 --> 01:39:36,359
hard to say where else it would come

1812
01:39:32,439 --> 01:39:40,289
from so that's probably correct actually

1813
01:39:36,359 --> 01:39:47,859
however what else is occupying that slot

1814
01:39:40,289 --> 01:39:52,170
because I guess there could be one other

1815
01:39:47,859 --> 01:39:52,170
asset in there yeah

1816
01:39:58,469 --> 01:40:02,260
yeah I'm not sure what else we could do

1817
01:40:00,760 --> 01:40:04,659
because if these things are chained on

1818
01:40:02,260 --> 01:40:06,520
the actual HHA file then you kind of

1819
01:40:04,658 --> 01:40:07,719
have a nasty situation where what else

1820
01:40:06,520 --> 01:40:09,159
are you gonna do if you have like

1821
01:40:07,719 --> 01:40:12,130
multiple fonts they're all gonna be

1822
01:40:09,158 --> 01:40:14,319
using bass game as their asset source

1823
01:40:12,130 --> 01:40:18,279
file that doesn't really work it's just

1824
01:40:14,319 --> 01:40:20,250
a bad problem that we have here so

1825
01:40:18,279 --> 01:40:23,198
fortunately we're just down to the two

1826
01:40:20,250 --> 01:40:24,908
it looks like on there now so we've it

1827
01:40:23,198 --> 01:40:28,719
was the sounds that were causing most of

1828
01:40:24,908 --> 01:40:30,729
the problem it looks like but we still

1829
01:40:28,719 --> 01:40:32,399
do have two of those and that's probably

1830
01:40:30,729 --> 01:40:35,859
something we want to fix eventually

1831
01:40:32,399 --> 01:40:41,859
looking again at the call sites let me

1832
01:40:35,859 --> 01:40:44,639
speed this back up again but looking

1833
01:40:41,859 --> 01:40:48,119
again at the call sites here let me just

1834
01:40:44,639 --> 01:40:48,119
sighs the sound

1835
01:41:08,149 --> 01:41:16,819
now we only have three calls there which

1836
01:41:10,550 --> 01:41:18,949
seems more plausible so that's better in

1837
01:41:16,819 --> 01:41:21,738
fact looking now at the allocations they

1838
01:41:18,948 --> 01:41:22,609
look correct right so that's looking

1839
01:41:21,738 --> 01:41:24,198
pretty good

1840
01:41:22,609 --> 01:41:27,969
so we've cleaned up a bunch of that

1841
01:41:24,198 --> 01:41:31,069
stuff yeah and all that stuff seems fine

1842
01:41:27,969 --> 01:41:35,050
in general nattu one of the things that

1843
01:41:31,069 --> 01:41:40,130
these call sites do that's nice is

1844
01:41:35,050 --> 01:41:43,340
looking at the overall like if we just

1845
01:41:40,130 --> 01:41:44,840
saw that it's really important for us to

1846
01:41:43,340 --> 01:41:47,300
be able to name our arenas because we

1847
01:41:44,840 --> 01:41:50,270
have no idea who the heck is responsible

1848
01:41:47,300 --> 01:41:54,380
for these right but when you turn this

1849
01:41:50,270 --> 01:41:56,690
on now you can see right away like some

1850
01:41:54,380 --> 01:41:59,510
detail about what the allocations were

1851
01:41:56,689 --> 01:42:00,769
and it would allow us to not really have

1852
01:41:59,510 --> 01:42:03,770
to care if those things were named or

1853
01:42:00,770 --> 01:42:05,750
not right so we can go look and see like

1854
01:42:03,770 --> 01:42:08,480
okay so who's responsible it's one

1855
01:42:05,750 --> 01:42:14,810
allocation in hand-made it memory 2h 388

1856
01:42:08,479 --> 01:42:17,118
right like what's going on there and you

1857
01:42:14,810 --> 01:42:19,550
can see that that's a bootstrap and the

1858
01:42:17,118 --> 01:42:23,479
bootstrap allocation I guess in this

1859
01:42:19,550 --> 01:42:26,900
case is not passing through who's doing

1860
01:42:23,479 --> 01:42:28,218
it so I would say we probably do want to

1861
01:42:26,899 --> 01:42:30,589
pass through who's doing it for

1862
01:42:28,219 --> 01:42:33,649
bootstrapping it seems like something

1863
01:42:30,590 --> 01:42:36,260
you would want and I don't know if there

1864
01:42:33,649 --> 01:42:39,259
was a reason why we didn't do that but

1865
01:42:36,260 --> 01:42:42,500
for now I think I would like to so in

1866
01:42:39,260 --> 01:42:45,739
order to do that in the bootstrap stuff

1867
01:42:42,500 --> 01:42:50,868
what we would want to do here is say the

1868
01:42:45,738 --> 01:42:55,009
bootstraps struct piece here is gonna

1869
01:42:50,868 --> 01:43:00,429
probably get pulled up right and so

1870
01:42:55,010 --> 01:43:03,710
that'll go in here and do this and that

1871
01:43:00,429 --> 01:43:06,139
in this case it will do exactly what it

1872
01:43:03,710 --> 01:43:13,630
was doing but in this case it will do a

1873
01:43:06,139 --> 01:43:18,739
debug name here and it will be bootstrap

1874
01:43:13,630 --> 01:43:20,869
which size so I think that would allow

1875
01:43:18,739 --> 01:43:23,479
us to do the same thing we're doing

1876
01:43:20,869 --> 01:43:26,720
everywhere else so this would be

1877
01:43:23,479 --> 01:43:29,929
internal memory pram and this would be

1878
01:43:26,720 --> 01:43:33,619
internal memory pass and this would

1879
01:43:29,930 --> 01:43:35,990
actually be a underscored one and so now

1880
01:43:33,619 --> 01:43:40,789
in theory we can track that allocation

1881
01:43:35,989 --> 01:43:44,059
upward and see what's going on so inside

1882
01:43:40,789 --> 01:43:49,510
here you can see us calling this boot

1883
01:43:44,060 --> 01:43:49,510
strap push size directly

1884
01:43:58,988 --> 01:44:05,099
I couldn't really say why though

1885
01:44:17,899 --> 01:44:26,090
okay so if we do want to do that where

1886
01:44:22,189 --> 01:44:30,229
we're creating the frame arena here when

1887
01:44:26,090 --> 01:44:34,069
we call bootstrap push size it would

1888
01:44:30,229 --> 01:44:37,340
seem that we would have to pass the

1889
01:44:34,069 --> 01:44:39,259
debug name here and that's a pretty

1890
01:44:37,340 --> 01:44:41,739
weird way of doing things but I guess

1891
01:44:39,260 --> 01:44:49,998
we're doing it because we just want to

1892
01:44:41,738 --> 01:44:52,359
use offset zero which hey works but I

1893
01:44:49,998 --> 01:44:56,148
don't know that that's maybe the

1894
01:44:52,359 --> 01:44:58,248
smartest thing to do if we're doing it

1895
01:44:56,149 --> 01:45:00,229
that way though yeah we want to be able

1896
01:44:58,248 --> 01:45:05,748
to pass a debug name is the first thing

1897
01:45:00,229 --> 01:45:07,820
I again have to ask why debug name

1898
01:45:05,748 --> 01:45:13,398
itself doesn't just evaluate to

1899
01:45:07,819 --> 01:45:15,978
something smarter if for example debug

1900
01:45:13,399 --> 01:45:18,349
name always evaluated to something with

1901
01:45:15,979 --> 01:45:20,300
a comma after it then we wouldn't have

1902
01:45:18,349 --> 01:45:22,519
to make multiple versions of all these

1903
01:45:20,300 --> 01:45:25,550
things which seems like it would be a

1904
01:45:22,519 --> 01:45:30,229
lot nicer than what we have going right

1905
01:45:25,550 --> 01:45:31,878
now and so you know I'm just looking at

1906
01:45:30,229 --> 01:45:34,639
this and you know you've Oh you've

1907
01:45:31,878 --> 01:45:38,179
always got it so that it's doing this

1908
01:45:34,639 --> 01:45:44,498
right pretty much everywhere you have

1909
01:45:38,179 --> 01:45:47,569
debug name it's just always like comma

1910
01:45:44,498 --> 01:45:51,708
comma comma comma comma comma comma

1911
01:45:47,569 --> 01:45:54,259
right and so it feels like if we just

1912
01:45:51,708 --> 01:45:56,208
made it evaluate to a comma in the first

1913
01:45:54,260 --> 01:45:58,639
place

1914
01:45:56,208 --> 01:46:02,090
then we could have put this at the front

1915
01:45:58,639 --> 01:46:06,019
of everything and you wouldn't have had

1916
01:46:02,090 --> 01:46:09,469
to actually worry about defining it

1917
01:46:06,019 --> 01:46:11,030
differently in debug mode I guess here's

1918
01:46:09,469 --> 01:46:15,078
a case where the comma would have been

1919
01:46:11,029 --> 01:46:19,398
unwelcome so I don't know I'm a little

1920
01:46:15,078 --> 01:46:21,228
bit torn there but but oh well so I'll

1921
01:46:19,399 --> 01:46:23,780
just go ahead and keep going the sort of

1922
01:46:21,229 --> 01:46:26,559
not particularly fantastic route that we

1923
01:46:23,779 --> 01:46:26,559
have been going

1924
01:46:27,439 --> 01:46:45,669
and we'll just put it in here so that'll

1925
01:46:39,409 --> 01:46:50,389
coops that'll correctly track that push

1926
01:46:45,670 --> 01:46:55,149
by giving it an actual name as it wanted

1927
01:46:50,390 --> 01:46:57,740
and now if I run hopefully in theory

1928
01:46:55,149 --> 01:47:00,889
that will eliminate one of our mystery

1929
01:46:57,739 --> 01:47:02,289
allocations there and actually attribute

1930
01:47:00,890 --> 01:47:07,150
it to somebody

1931
01:47:02,289 --> 01:47:10,069
instead of nobody so now we can see

1932
01:47:07,149 --> 01:47:14,210
actually getting attributed properly to

1933
01:47:10,069 --> 01:47:16,009
handmade CVP 185 and hey of course we

1934
01:47:14,210 --> 01:47:19,369
now know that because we know that it

1935
01:47:16,010 --> 01:47:22,640
was here but you know it's good to see

1936
01:47:19,369 --> 01:47:25,760
it so that contributed to here that

1937
01:47:22,640 --> 01:47:27,680
similarly this one should now inside the

1938
01:47:25,760 --> 01:47:30,770
frame temporary that should get

1939
01:47:27,680 --> 01:47:32,980
attributed to 187 and it is so those two

1940
01:47:30,770 --> 01:47:36,290
are now nice too attributed attributed

1941
01:47:32,979 --> 01:47:39,559
we could also label this arena pretty

1942
01:47:36,289 --> 01:47:42,289
easily I think when these are created

1943
01:47:39,560 --> 01:47:47,330
here inside the game state I assume we

1944
01:47:42,289 --> 01:47:50,439
could if we wanted to label those

1945
01:47:47,329 --> 01:47:50,439
[Music]

1946
01:47:52,840 --> 01:48:04,179
it's just the gate it's just the game

1947
01:47:58,569 --> 01:48:07,420
state's total arena and somehow that one

1948
01:48:04,179 --> 01:48:12,340
wasn't getting labeled so like if I go

1949
01:48:07,420 --> 01:48:25,599
to game state this total arena like

1950
01:48:12,340 --> 01:48:27,849
didn't get labeled I guess and hey I

1951
01:48:25,599 --> 01:48:30,328
guess that's actually true so for some

1952
01:48:27,849 --> 01:48:30,328
reason

1953
01:48:37,460 --> 01:48:41,609
yeah I don't know for some reason we

1954
01:48:40,170 --> 01:48:45,359
just weren't labeling that one and I

1955
01:48:41,609 --> 01:48:48,269
don't know why and so now we have it

1956
01:48:45,359 --> 01:48:49,799
labeled as you can see so this one is

1957
01:48:48,270 --> 01:48:53,310
the only one that's a little bit

1958
01:48:49,800 --> 01:48:55,650
Squinkie now and we should probably go

1959
01:48:53,310 --> 01:48:57,270
take a look at that it looks like it's

1960
01:48:55,649 --> 01:48:59,789
you know it's part of the import system

1961
01:48:57,270 --> 01:49:01,530
so it's probably just the air output or

1962
01:48:59,789 --> 01:49:04,590
whatever that was going on there we

1963
01:49:01,529 --> 01:49:06,630
might as well label that and again this

1964
01:49:04,590 --> 01:49:10,199
the call sites really lets us jump right

1965
01:49:06,630 --> 01:49:16,800
to what's going on so 20 to 30 on the

1966
01:49:10,199 --> 01:49:21,479
handmade import and so in here we want

1967
01:49:16,800 --> 01:49:24,029
to go ahead and have this error stream

1968
01:49:21,479 --> 01:49:28,019
on demand memory stream is who's picking

1969
01:49:24,029 --> 01:49:32,399
that up and so probably we just want to

1970
01:49:28,020 --> 01:49:35,250
label that if I go in there and look at

1971
01:49:32,399 --> 01:49:36,929
how on-demand memory streams working you

1972
01:49:35,250 --> 01:49:39,329
can see that we've got that stream

1973
01:49:36,930 --> 01:49:42,450
memory here so what we probably want to

1974
01:49:39,329 --> 01:49:46,229
do is right after that just say debug

1975
01:49:42,449 --> 01:49:50,630
arena name grab that particular error

1976
01:49:46,229 --> 01:49:59,839
stream and say that that is the

1977
01:49:50,630 --> 01:49:59,840
synchronized asset file changes so

1978
01:50:04,880 --> 01:50:12,569
basically I mean that's what it is right

1979
01:50:08,578 --> 01:50:16,049
it's the standard out for the change

1980
01:50:12,569 --> 01:50:22,469
synchronization so I think that's what

1981
01:50:16,050 --> 01:50:25,590
we need there let's find out there we go

1982
01:50:22,469 --> 01:50:30,270
um so the name won't change here because

1983
01:50:25,590 --> 01:50:31,710
that path will not get called it's only

1984
01:50:30,270 --> 01:50:34,130
happens at import time so we're never

1985
01:50:31,710 --> 01:50:37,859
gonna hit that again but if I run it now

1986
01:50:34,130 --> 01:50:41,909
from the start again then we should see

1987
01:50:37,859 --> 01:50:44,788
that that name get picked up

1988
01:50:41,908 --> 01:50:46,529
hopefully although as I say that it odd

1989
01:50:44,788 --> 01:50:47,630
that's obviously not true because which

1990
01:50:46,529 --> 01:50:52,738
should have been there and it isn't

1991
01:50:47,630 --> 01:51:01,980
right um so I don't know what to make of

1992
01:50:52,738 --> 01:51:11,598
that is it oh wait error strip how did

1993
01:51:01,979 --> 01:51:15,629
that how did that compile all right

1994
01:51:11,599 --> 01:51:19,440
let's try that one more time I don't

1995
01:51:15,630 --> 01:51:22,739
know what was going on there all right

1996
01:51:19,439 --> 01:51:26,908
try that one more time so hopefully this

1997
01:51:22,738 --> 01:51:29,638
will name it now and it doesn't well so

1998
01:51:26,908 --> 01:51:31,828
much for that so I'm not sure what's

1999
01:51:29,639 --> 01:51:36,480
going on these are the allocations here

2000
01:51:31,828 --> 01:51:39,078
there's 22 31 right was that that site

2001
01:51:36,479 --> 01:51:39,078
we just looked at

2002
01:51:42,020 --> 01:51:46,600
[Music]

2003
01:51:43,930 --> 01:51:48,789
and I guess the problem so the problem

2004
01:51:46,600 --> 01:51:50,950
is probably that it hasn't had any

2005
01:51:48,789 --> 01:51:54,220
blocks yet and you can't label one

2006
01:51:50,949 --> 01:51:54,789
without blocks all right I guess that's

2007
01:51:54,220 --> 01:52:00,100
true

2008
01:51:54,789 --> 01:52:02,109
oh well so maybe we just need to do it

2009
01:52:00,100 --> 01:52:03,670
that way and then we're okay not the

2010
01:52:02,109 --> 01:52:05,529
cleanest solution but you know we don't

2011
01:52:03,670 --> 01:52:08,140
have a way of because arenas can get

2012
01:52:05,529 --> 01:52:10,059
moved around where you're tracking them

2013
01:52:08,140 --> 01:52:12,130
from and we didn't want to make it so

2014
01:52:10,060 --> 01:52:15,730
that people had to like be cognizant of

2015
01:52:12,130 --> 01:52:18,130
that so that was just yeah so now we've

2016
01:52:15,729 --> 01:52:20,409
got it so I think now we're properly

2017
01:52:18,130 --> 01:52:23,260
tracking everyone's memory we know the

2018
01:52:20,409 --> 01:52:25,599
call sites so we can see for every arena

2019
01:52:23,260 --> 01:52:30,250
who is messing with it and why and

2020
01:52:25,600 --> 01:52:37,539
that's really nice so I think all of

2021
01:52:30,250 --> 01:52:39,729
that is pleasant and good I would say

2022
01:52:37,539 --> 01:52:43,390
that now we can move on to the last

2023
01:52:39,729 --> 01:52:46,569
order of business in in what time we

2024
01:52:43,390 --> 01:52:49,950
have remaining and just take a look at

2025
01:52:46,569 --> 01:52:54,250
making this display make more sense

2026
01:52:49,949 --> 01:52:56,739
again so that it's not so that it

2027
01:52:54,250 --> 01:53:01,060
properly reflects the sizes of things

2028
01:52:56,739 --> 01:53:04,539
that it's showing and so what I want to

2029
01:53:01,060 --> 01:53:11,080
do there is just draw memory intervals

2030
01:53:04,539 --> 01:53:15,670
or whatever arena intervals all I really

2031
01:53:11,079 --> 01:53:20,710
want to do here is say all right when we

2032
01:53:15,670 --> 01:53:24,659
start creating these blocks I need to

2033
01:53:20,710 --> 01:53:28,319
start thinking of them less in terms of

2034
01:53:24,659 --> 01:53:31,899
subdividing a block and more in terms of

2035
01:53:28,319 --> 01:53:34,539
actually like rasterizing out for

2036
01:53:31,899 --> 01:53:38,619
however long you're going a certain

2037
01:53:34,539 --> 01:53:41,140
amount of space in this memory map that

2038
01:53:38,619 --> 01:53:44,979
where everything should be equivalently

2039
01:53:41,140 --> 01:53:48,280
sized right and so what I'd like to do

2040
01:53:44,979 --> 01:53:51,909
there is have some way of actually

2041
01:53:48,279 --> 01:53:55,479
mapping into this block directly so that

2042
01:53:51,909 --> 01:53:57,340
rather than thinking of it as block Rex

2043
01:53:55,479 --> 01:53:58,899
you subdivide you

2044
01:53:57,340 --> 01:54:02,409
actually just used your like absolute

2045
01:53:58,899 --> 01:54:05,979
memory location to create the lookup

2046
01:54:02,409 --> 01:54:14,710
into the block and then you have a party

2047
01:54:05,979 --> 01:54:17,769
right I think that's the saucy err way

2048
01:54:14,710 --> 01:54:20,199
to go here so in order to do that what I

2049
01:54:17,770 --> 01:54:25,240
want to create is some sort of a notion

2050
01:54:20,199 --> 01:54:33,220
of how to draw some range and I'm going

2051
01:54:25,239 --> 01:54:36,250
to need that to work as a function call

2052
01:54:33,220 --> 01:54:39,550
that can do it sort of based on the

2053
01:54:36,250 --> 01:54:41,409
total profile rect size so you pass me

2054
01:54:39,550 --> 01:54:44,199
one of these profile rect sizes or

2055
01:54:41,409 --> 01:54:46,239
something like this and then we say look

2056
01:54:44,199 --> 01:54:52,210
here's the total here's like your actual

2057
01:54:46,239 --> 01:54:55,000
address in there so I'm not sure exactly

2058
01:54:52,210 --> 01:55:02,289
how I want to do that but let's say that

2059
01:54:55,000 --> 01:55:11,739
we do this as let's say that we do this

2060
01:55:02,289 --> 01:55:15,420
is something like like this and then

2061
01:55:11,739 --> 01:55:15,420
we're going to go ahead and in fact

2062
01:55:16,170 --> 01:55:21,550
maybe like that so you pass us a range

2063
01:55:19,420 --> 01:55:24,039
and then we're gonna fill the range and

2064
01:55:21,550 --> 01:55:27,100
so we need to have the render group in

2065
01:55:24,039 --> 01:55:30,039
here and the UI transform with that

2066
01:55:27,100 --> 01:55:37,630
stuff so we're gonna have to take a

2067
01:55:30,039 --> 01:55:41,979
little bit of upstate and that's fine so

2068
01:55:37,630 --> 01:55:44,579
in here what we do is you know we doing

2069
01:55:41,979 --> 01:55:44,579
something like this

2070
01:55:45,579 --> 01:55:50,329
and we're gonna fill Rex and we can

2071
01:55:48,800 --> 01:55:51,590
obviously get the render group out of

2072
01:55:50,329 --> 01:55:54,350
here as well right so we're gonna get

2073
01:55:51,590 --> 01:55:57,739
the render group the UI transform we

2074
01:55:54,350 --> 01:55:59,989
need to know the block color but other

2075
01:55:57,738 --> 01:56:02,419
than that I think we're all good so in

2076
01:55:59,988 --> 01:56:07,218
here I would just say pass me the block

2077
01:56:02,420 --> 01:56:10,670
color that you want used and I think

2078
01:56:07,219 --> 01:56:11,989
that's probably all we need in there and

2079
01:56:10,670 --> 01:56:15,190
so then we're gonna do is we're gonna

2080
01:56:11,988 --> 01:56:18,919
say we have a way of mapping addresses

2081
01:56:15,189 --> 01:56:22,279
to page you know we have a way of

2082
01:56:18,920 --> 01:56:30,859
mapping addresses into this block and I

2083
01:56:22,279 --> 01:56:34,409
might might want to do this in you 64

2084
01:56:30,859 --> 01:56:34,409
[Music]

2085
01:56:41,559 --> 01:56:48,579
let's do it so you pass me your two

2086
01:56:46,300 --> 01:56:51,340
ranges and what I need to do here is I

2087
01:56:48,578 --> 01:56:55,960
need to effectively fill the number of

2088
01:56:51,340 --> 01:56:57,909
rows that you're going to occupy and I

2089
01:56:55,960 --> 01:57:00,480
need to fill however much of each row

2090
01:56:57,908 --> 01:57:02,948
you occupy right

2091
01:57:00,479 --> 01:57:04,988
when we do the push rooked outline

2092
01:57:02,948 --> 01:57:08,919
really eventually what I should do is

2093
01:57:04,988 --> 01:57:10,689
keep one side of that solid or not

2094
01:57:08,920 --> 01:57:14,078
depending on whether or not you actually

2095
01:57:10,689 --> 01:57:17,379
wrap around to the next row but we'll

2096
01:57:14,078 --> 01:57:19,929
cross that bridge when we come to it so

2097
01:57:17,380 --> 01:57:22,779
we need to do one of these for every row

2098
01:57:19,929 --> 01:57:26,889
that you that it encounters so we need

2099
01:57:22,779 --> 01:57:31,719
something here like a row index that

2100
01:57:26,889 --> 01:57:41,109
we're going to step along right we need

2101
01:57:31,719 --> 01:57:43,179
this sort of thing and then for each of

2102
01:57:41,109 --> 01:57:45,670
these we need to know like what section

2103
01:57:43,179 --> 01:57:47,349
of the row you actually take up I'm

2104
01:57:45,670 --> 01:57:50,380
guessing that I won't have time to quite

2105
01:57:47,349 --> 01:57:52,980
do this today just based on where we are

2106
01:57:50,380 --> 01:57:52,980
timewise

2107
01:58:11,819 --> 01:58:18,309
so I might just leave it here and then

2108
01:58:15,279 --> 01:58:21,309
tomorrow what we'll do is we'll go

2109
01:58:18,310 --> 01:58:23,409
through this stuff exactly so the when

2110
01:58:21,310 --> 01:58:26,889
we're going to draw the arena intervals

2111
01:58:23,408 --> 01:58:28,328
I'll go ahead and make that call out to

2112
01:58:26,889 --> 01:58:30,670
this and we'll do the memory mapping

2113
01:58:28,328 --> 01:58:33,340
into the range so that each of these

2114
01:58:30,670 --> 01:58:37,929
will just tell it exactly where it is in

2115
01:58:33,340 --> 01:58:41,560
the total size of the memory and then

2116
01:58:37,929 --> 01:58:44,199
that will translate into the correct set

2117
01:58:41,560 --> 01:58:46,750
of like rectangle fills for each region

2118
01:58:44,198 --> 01:58:49,029
and then that way we can also introduce

2119
01:58:46,750 --> 01:58:50,500
a scaling factor so that if we want to

2120
01:58:49,029 --> 01:58:52,719
be able to zoom in on pieces of memory

2121
01:58:50,500 --> 01:58:57,010
we can which I think we'll probably want

2122
01:58:52,719 --> 01:58:58,779
to do eventually as well so yeah let's

2123
01:58:57,010 --> 01:59:03,429
stop there because we did ton of stuff

2124
01:58:58,779 --> 01:59:05,670
today and let's move back to the Q&amp;A

2125
01:59:03,429 --> 01:59:05,670
here

2126
01:59:59,300 --> 02:00:04,869
did you code C++ turday job yes

2127
02:00:10,810 --> 02:00:14,650
all these with without common macros is

2128
02:00:13,149 --> 02:00:16,599
complete nonsense is there any better

2129
02:00:14,649 --> 02:00:22,539
way to deal with it yeah it is complete

2130
02:00:16,600 --> 02:00:25,000
nonsense and again like C and C++ just

2131
02:00:22,539 --> 02:00:31,060
aren't good languages for actually

2132
02:00:25,000 --> 02:00:32,920
building complex programs there are very

2133
02:00:31,060 --> 02:00:34,840
simple language features that would have

2134
02:00:32,920 --> 02:00:36,909
made all of that stuff unnecessary and

2135
02:00:34,840 --> 02:00:39,489
they just never added them and so

2136
02:00:36,909 --> 02:00:41,380
typically what C++ in particular does

2137
02:00:39,489 --> 02:00:43,809
because C was a fairly minimal language

2138
02:00:41,380 --> 02:00:46,539
C++ typically what it does is it says

2139
02:00:43,810 --> 02:00:49,660
well okay so let's suppose you wanted to

2140
02:00:46,539 --> 02:00:52,199
do that thing we were just doing they

2141
02:00:49,659 --> 02:00:54,609
have all these sort of like halfway

2142
02:00:52,199 --> 02:00:57,189
implemented language features that don't

2143
02:00:54,609 --> 02:00:59,229
really work but that would sort of maybe

2144
02:00:57,189 --> 02:01:00,939
help you address that problem and if you

2145
02:00:59,229 --> 02:01:02,709
end up trying to use them your codes

2146
02:01:00,939 --> 02:01:05,710
even worse than what we just ended up

2147
02:01:02,710 --> 02:01:09,189
with right and so it's always very

2148
02:01:05,710 --> 02:01:14,109
frustrating if we wanted to do something

2149
02:01:09,189 --> 02:01:16,839
better with our actual with and without

2150
02:01:14,109 --> 02:01:18,759
memories macro stuff I do think we can

2151
02:01:16,840 --> 02:01:21,130
do better than that though just with the

2152
02:01:18,760 --> 02:01:23,500
preprocessor and the reason I say that

2153
02:01:21,130 --> 02:01:26,079
is because if we just introduced another

2154
02:01:23,500 --> 02:01:28,329
debug name thing here like let's see we

2155
02:01:26,079 --> 02:01:30,729
just bit the bullet and say well we've

2156
02:01:28,329 --> 02:01:33,789
got inside the handmade debug interface

2157
02:01:30,729 --> 02:01:36,519
stuff we've got this one way that we

2158
02:01:33,789 --> 02:01:38,409
create debug names right here it is well

2159
02:01:36,520 --> 02:01:41,200
maybe we say all right so there's

2160
02:01:38,409 --> 02:01:48,359
another one which is like debug memory

2161
02:01:41,199 --> 02:01:48,359
program or something right like this

2162
02:01:52,420 --> 02:01:57,119
and what that does is it just says like

2163
02:01:54,789 --> 02:02:04,149
well normally when you say this thing

2164
02:01:57,119 --> 02:02:07,719
then I expand it to this right and I put

2165
02:02:04,149 --> 02:02:12,549
the comma on for you you know I'm saying

2166
02:02:07,719 --> 02:02:22,000
and in the other case I don't do that

2167
02:02:12,550 --> 02:02:24,250
so if you instead are not in the

2168
02:02:22,000 --> 02:02:27,279
internal build then it just goes away

2169
02:02:24,250 --> 02:02:29,020
right it just disappears and so if we

2170
02:02:27,279 --> 02:02:30,909
wanted to do that then I think what we

2171
02:02:29,020 --> 02:02:34,320
could do is simplify this quite

2172
02:02:30,909 --> 02:02:39,399
considerably right we drop that up there

2173
02:02:34,319 --> 02:02:42,519
hmm and drop that in here and now I

2174
02:02:39,399 --> 02:02:46,599
think you could just get rid of this

2175
02:02:42,520 --> 02:02:48,550
entire else set I think right because

2176
02:02:46,600 --> 02:02:50,710
now what I believe we could do is just

2177
02:02:48,550 --> 02:02:52,960
instead of using debug name everywhere

2178
02:02:50,710 --> 02:02:57,189
here we would just say debug memory

2179
02:02:52,960 --> 02:02:59,230
program as the first thing right and

2180
02:02:57,189 --> 02:03:01,899
then we don't have to have the two

2181
02:02:59,229 --> 02:03:06,099
versions ever although I guess I should

2182
02:03:01,899 --> 02:03:07,750
for posterity in case we ever do want to

2183
02:03:06,100 --> 02:03:17,140
re-enable it we got rid of it because of

2184
02:03:07,750 --> 02:03:19,770
clang I'm gonna keep I'll call that P

2185
02:03:17,140 --> 02:03:19,770
bug memory name

2186
02:03:25,960 --> 02:03:36,819
sooo if I just do this and then remove

2187
02:03:31,699 --> 02:03:36,819
these I think that's probably sufficient

2188
02:03:44,470 --> 02:03:52,190
and so that would be one way to make it

2189
02:03:47,869 --> 02:03:54,199
at least somewhat cleaner we don't

2190
02:03:52,189 --> 02:03:56,299
really need these pounds because these

2191
02:03:54,199 --> 02:04:00,590
all take arguments so there's no chance

2192
02:03:56,300 --> 02:04:02,480
that there are zero arguments there so I

2193
02:04:00,590 --> 02:04:09,949
think that should probably be fine as it

2194
02:04:02,479 --> 02:04:13,849
is so I think that's pretty much

2195
02:04:09,949 --> 02:04:16,970
everything and then you don't need the

2196
02:04:13,850 --> 02:04:19,730
multiple version nonsense anymore I

2197
02:04:16,970 --> 02:04:22,789
think that would just would just take

2198
02:04:19,729 --> 02:04:25,219
care of it right and so that's pretty

2199
02:04:22,789 --> 02:04:27,260
compelling by comparison

2200
02:04:25,220 --> 02:04:28,820
looks like my pushin mill terminate is

2201
02:04:27,260 --> 02:04:34,400
wrong there whereas pushing all

2202
02:04:28,819 --> 02:04:42,049
terminates pushin mill terminates

2203
02:04:34,399 --> 02:04:43,219
yeah um so that's one way and that seems

2204
02:04:42,050 --> 02:04:45,380
better like I probably should have done

2205
02:04:43,220 --> 02:04:48,619
that right that seems like an

2206
02:04:45,380 --> 02:04:52,159
improvement to me again it's hard to do

2207
02:04:48,619 --> 02:04:54,619
a good job in C C++ for that sort of

2208
02:04:52,159 --> 02:04:58,789
thing all of your options are sub

2209
02:04:54,619 --> 02:05:01,130
standard like none of them are great but

2210
02:04:58,789 --> 02:05:02,750
C++ is not a great language so you can't

2211
02:05:01,130 --> 02:05:03,949
expect to get great code out of a non

2212
02:05:02,750 --> 02:05:06,439
great language it's kind of

2213
02:05:03,949 --> 02:05:10,130
self-defining lis not gonna happen but

2214
02:05:06,439 --> 02:05:14,889
that's you know better than what we had

2215
02:05:10,130 --> 02:05:17,210
and keeps it a little bit more you know

2216
02:05:14,890 --> 02:05:20,390
concise you don't the two versions of

2217
02:05:17,210 --> 02:05:25,279
everything and it would also allow us in

2218
02:05:20,390 --> 02:05:27,710
other places where we did that to remove

2219
02:05:25,279 --> 02:05:30,939
them as well so you know if I go looking

2220
02:05:27,710 --> 02:05:33,939
for the places where we put those in

2221
02:05:30,939 --> 02:05:33,939
here

2222
02:05:44,060 --> 02:05:51,120
select right here for example we should

2223
02:05:47,460 --> 02:05:54,989
be able to also say well this doesn't

2224
02:05:51,119 --> 02:05:57,599
have to occur because we can use the

2225
02:05:54,989 --> 02:06:00,659
same trick right here so anyone who

2226
02:05:57,600 --> 02:06:02,940
wants to participate in that scheme can

2227
02:06:00,659 --> 02:06:06,470
just do it and it's not an issue right

2228
02:06:02,939 --> 02:06:06,469
same same thing here

2229
02:06:17,279 --> 02:06:30,149
I don't know that we had any more those

2230
02:06:22,760 --> 02:06:32,460
may have been all of that probably

2231
02:06:30,149 --> 02:06:35,239
should have just looked for debug name

2232
02:06:32,460 --> 02:06:35,239
in there but

2233
02:06:43,939 --> 02:06:54,139
yeah um I can also test and just because

2234
02:06:51,050 --> 02:06:55,699
we made that change there let's see if

2235
02:06:54,140 --> 02:06:57,410
we broke anything when handmade

2236
02:06:55,699 --> 02:06:59,449
internals off because there might be

2237
02:06:57,409 --> 02:07:02,750
some places now where that's busted and

2238
02:06:59,449 --> 02:07:04,309
we want to make sure we fix that so it

2239
02:07:02,750 --> 02:07:06,140
looks like bootstrap push struct is

2240
02:07:04,310 --> 02:07:14,800
still broken so let's just fix that real

2241
02:07:06,140 --> 02:07:21,170
quick yeah so that one's missing this

2242
02:07:14,800 --> 02:07:24,529
and what else you got

2243
02:07:21,170 --> 02:07:28,819
so there we go so now the non internal

2244
02:07:24,529 --> 02:07:34,189
version is working and you know off we

2245
02:07:28,819 --> 02:07:36,909
go there but if we want to turn it back

2246
02:07:34,189 --> 02:07:36,909
on now we can

2247
02:07:42,109 --> 02:07:47,039
I'm a web developer by trade and my

2248
02:07:45,029 --> 02:07:50,069
day-to-day code seems to abstract way

2249
02:07:47,039 --> 02:07:54,090
more logic than you do in your engine

2250
02:07:50,069 --> 02:08:00,479
could you explain why that is um I'm not

2251
02:07:54,090 --> 02:08:06,590
sure what exactly you mean by the

2252
02:08:00,479 --> 02:08:06,589
question can you be any more specific I

2253
02:08:07,760 --> 02:08:12,800
mean one of the things I guess is

2254
02:08:10,649 --> 02:08:15,689
obviously that this stream is about

2255
02:08:12,800 --> 02:08:19,529
doing low-level code so obviously we're

2256
02:08:15,689 --> 02:08:22,589
not going to abstract things any more

2257
02:08:19,529 --> 02:08:27,569
than we have to but that may not really

2258
02:08:22,590 --> 02:08:29,039
be what you're asking so if you could

2259
02:08:27,569 --> 02:08:31,939
explain that question a little bit more

2260
02:08:29,039 --> 02:08:34,019
I could try to address it more properly

2261
02:08:31,939 --> 02:08:35,429
what would you do differently if you had

2262
02:08:34,020 --> 02:08:38,190
to work with other developers on this

2263
02:08:35,430 --> 02:08:38,970
project I wouldn't really do anything

2264
02:08:38,189 --> 02:08:43,289
differently

2265
02:08:38,970 --> 02:08:45,930
in most instances but when I'm working

2266
02:08:43,289 --> 02:08:47,369
with other developers typically we come

2267
02:08:45,930 --> 02:08:48,960
to some sort of an understanding about

2268
02:08:47,369 --> 02:08:52,500
like where we're gonna put like fault

2269
02:08:48,960 --> 02:08:54,149
lines in the code base really and what I

2270
02:08:52,500 --> 02:08:56,069
would do is I'd spend more time

2271
02:08:54,149 --> 02:08:58,289
periodically creating interface

2272
02:08:56,069 --> 02:09:00,599
boundaries that were like clean

2273
02:08:58,289 --> 02:09:04,380
separations that other people could look

2274
02:09:00,600 --> 02:09:06,450
at and go oh okay here's the stuff that

2275
02:09:04,380 --> 02:09:08,730
like KC wants me to call to use like the

2276
02:09:06,449 --> 02:09:11,970
asset system or whatever so that they

2277
02:09:08,729 --> 02:09:14,159
don't have to wonder right I don't spend

2278
02:09:11,970 --> 02:09:17,550
a lot of time doing that with what I'm

2279
02:09:14,159 --> 02:09:20,519
doing now because I know so it's just a

2280
02:09:17,550 --> 02:09:22,380
waste of time but if I know that other

2281
02:09:20,520 --> 02:09:24,360
people have to be calling the code then

2282
02:09:22,380 --> 02:09:26,159
I treat it more like a public API that I

2283
02:09:24,359 --> 02:09:28,979
might be pushing out to the world right

2284
02:09:26,159 --> 02:09:31,710
and so I'm gonna stop and make those

2285
02:09:28,979 --> 02:09:33,659
boundaries clear and have a clear h-file

2286
02:09:31,710 --> 02:09:35,189
that's like hey everyone look at this

2287
02:09:33,659 --> 02:09:37,529
this is the part that you want to call

2288
02:09:35,189 --> 02:09:39,960
so that you don't have to know anything

2289
02:09:37,529 --> 02:09:41,899
about what I'm doing you can just call

2290
02:09:39,960 --> 02:09:47,369
the part that I told you was reliable

2291
02:09:41,899 --> 02:09:51,119
and do it right and so you know when I

2292
02:09:47,369 --> 02:09:55,800
used to ship licensable SDKs for example

2293
02:09:51,119 --> 02:10:01,019
that I would just apply that mentality

2294
02:09:55,800 --> 02:10:03,539
to the to the part that I wanted to wall

2295
02:10:01,020 --> 02:10:06,660
off at any given time right so like when

2296
02:10:03,539 --> 02:10:08,970
I am making a SDK for someone else to

2297
02:10:06,659 --> 02:10:10,979
use you know there's the internal part

2298
02:10:08,970 --> 02:10:13,140
that I'm working on and I don't care if

2299
02:10:10,979 --> 02:10:14,399
anyone else knows how that works but

2300
02:10:13,140 --> 02:10:15,930
then there's the part that I want them

2301
02:10:14,399 --> 02:10:18,420
to call and I want that to be like

2302
02:10:15,930 --> 02:10:21,780
obvious right I want to be like here's

2303
02:10:18,420 --> 02:10:24,210
the you know begin execute end stuff

2304
02:10:21,779 --> 02:10:26,880
here's what you can call here's maybe

2305
02:10:24,210 --> 02:10:29,279
some comments that say you know here's

2306
02:10:26,880 --> 02:10:31,680
an example code or whatever and so I

2307
02:10:29,279 --> 02:10:34,500
would you know take the time to push

2308
02:10:31,680 --> 02:10:38,130
that periodically when I wanted people

2309
02:10:34,500 --> 02:10:42,510
to be using a new feature that make

2310
02:10:38,130 --> 02:10:44,430
sense or a new thing that I added but it

2311
02:10:42,510 --> 02:10:46,320
turns the internals I wouldn't really do

2312
02:10:44,430 --> 02:10:48,840
anything particularly different I might

2313
02:10:46,319 --> 02:10:52,590
put more error checking code in as well

2314
02:10:48,840 --> 02:10:54,360
because if I put error checking code in

2315
02:10:52,590 --> 02:10:57,050
in places that I know I probably will

2316
02:10:54,359 --> 02:10:59,250
never make an error I'm wasting my time

2317
02:10:57,050 --> 02:11:01,949
but if I know that other people are

2318
02:10:59,250 --> 02:11:04,409
calling it and they I don't know what

2319
02:11:01,949 --> 02:11:06,090
kinds of errors they often have or what

2320
02:11:04,409 --> 02:11:08,130
kinds of errors they might make because

2321
02:11:06,090 --> 02:11:11,190
they don't know how I normally do things

2322
02:11:08,130 --> 02:11:12,779
in my code then I might put some guards

2323
02:11:11,189 --> 02:11:18,000
in to look for things they're doing

2324
02:11:12,779 --> 02:11:20,429
wrong you see I'm saying and that's to

2325
02:11:18,000 --> 02:11:23,579
help them save debugging time so that

2326
02:11:20,430 --> 02:11:25,500
they don't get something wrong and then

2327
02:11:23,579 --> 02:11:27,689
waste their time tried to bug what

2328
02:11:25,500 --> 02:11:29,489
happened so that makes sense so those

2329
02:11:27,689 --> 02:11:32,219
are some things that you want to do

2330
02:11:29,489 --> 02:11:34,229
differently when you know that the

2331
02:11:32,220 --> 02:11:39,630
person using the code in many cases

2332
02:11:34,229 --> 02:11:40,319
isn't you but when you're making code

2333
02:11:39,630 --> 02:11:41,609
for yourself

2334
02:11:40,319 --> 02:11:45,170
you don't want to waste your time doing

2335
02:11:41,609 --> 02:11:45,170
those things necessarily right

2336
02:11:52,229 --> 02:11:58,750
yes exactly this is better but it can't

2337
02:11:55,899 --> 02:12:00,789
do just one name and that's actually why

2338
02:11:58,750 --> 02:12:03,010
I made it debug memory name and didn't

2339
02:12:00,789 --> 02:12:05,050
change the one that's debug name because

2340
02:12:03,010 --> 02:12:09,130
debug memory name we know we always take

2341
02:12:05,050 --> 02:12:11,320
something right and so it's just a yeah

2342
02:12:09,130 --> 02:12:19,659
and again it's just crappy it's just

2343
02:12:11,319 --> 02:12:23,819
because you know it's crappy but you do

2344
02:12:19,659 --> 02:12:23,819
the best you can with C++ right

2345
02:12:34,170 --> 02:12:36,690
I'm wondering what language feature

2346
02:12:35,789 --> 02:12:38,340
would make what you have done with

2347
02:12:36,689 --> 02:12:40,409
memory tracking easier well it's obvious

2348
02:12:38,340 --> 02:13:03,480
right you should just be able inside a

2349
02:12:40,409 --> 02:13:08,029
function I mean right something like

2350
02:13:03,479 --> 02:13:10,889
this because essentially what happens is

2351
02:13:08,029 --> 02:13:13,079
you have a call graph at compile time

2352
02:13:10,890 --> 02:13:13,590
where the compiler knows everybody who's

2353
02:13:13,079 --> 02:13:16,920
called

2354
02:13:13,590 --> 02:13:19,039
right and for 99% of all functions

2355
02:13:16,920 --> 02:13:22,409
you're not calling through a pointer so

2356
02:13:19,039 --> 02:13:24,479
it's actually easy for the compiler to

2357
02:13:22,409 --> 02:13:28,279
just push that information for anyone

2358
02:13:24,479 --> 02:13:28,279
who actually needs it in the call graph

2359
02:13:29,750 --> 02:13:34,710
so languages could easily just add

2360
02:13:32,729 --> 02:13:36,509
something that automatically adds a pass

2361
02:13:34,710 --> 02:13:38,489
parameter if the person who's getting

2362
02:13:36,510 --> 02:13:43,020
called wants to know who the caller was

2363
02:13:38,489 --> 02:13:44,909
right and that creates literally this

2364
02:13:43,020 --> 02:13:47,240
exact code but you didn't have to type

2365
02:13:44,909 --> 02:13:47,239
it in

2366
02:13:57,668 --> 02:14:01,998
if someone we're looking to get into pro

2367
02:13:59,988 --> 02:14:03,588
game programming today would you

2368
02:14:01,998 --> 02:14:04,998
recommend starting with using an engine

2369
02:14:03,588 --> 02:14:07,578
like unity or would you recommend doing

2370
02:14:04,998 --> 02:14:09,618
this little lower programming um I think

2371
02:14:07,578 --> 02:14:13,308
I would say it depends on what your goal

2372
02:14:09,618 --> 02:14:15,648
is if you're trying to be like a game

2373
02:14:13,309 --> 02:14:20,269
designer I would say you want to use

2374
02:14:15,649 --> 02:14:25,999
something like unity or unreal and the

2375
02:14:20,269 --> 02:14:28,248
reason is because those tools are what

2376
02:14:25,998 --> 02:14:31,550
are the kind of thing you will be

2377
02:14:28,248 --> 02:14:33,800
expected to use so when you go to get a

2378
02:14:31,550 --> 02:14:36,229
job as a game designer they will expect

2379
02:14:33,800 --> 02:14:37,969
you to be working with something like

2380
02:14:36,229 --> 02:14:39,168
that it may not be one of those because

2381
02:14:37,969 --> 02:14:41,359
they may have their own in-house engine

2382
02:14:39,168 --> 02:14:44,979
but it's gonna be something like a

2383
02:14:41,359 --> 02:14:47,149
scriptable like unity style thing right

2384
02:14:44,979 --> 02:14:48,499
if on the other hand what you're trying

2385
02:14:47,149 --> 02:14:51,349
to do is get a job as an engine

2386
02:14:48,498 --> 02:14:53,418
programmer then what I would say is yeah

2387
02:14:51,349 --> 02:14:57,078
I don't know how useful starting with

2388
02:14:53,418 --> 02:15:00,318
unity or Unreal would be it might be bad

2389
02:14:57,078 --> 02:15:03,139
because they're very large and very

2390
02:15:00,319 --> 02:15:08,209
complex and so if you're trying to learn

2391
02:15:03,139 --> 02:15:09,439
engine programming I mean there's no

2392
02:15:08,208 --> 02:15:11,448
reason you couldn't learn engine

2393
02:15:09,439 --> 02:15:13,338
programming by downloading the source

2394
02:15:11,448 --> 02:15:16,638
code to the Unreal Engine which I

2395
02:15:13,338 --> 02:15:19,158
believe is public and hacking on it

2396
02:15:16,639 --> 02:15:20,628
right I mean you can do that but you

2397
02:15:19,158 --> 02:15:23,268
might be overwhelmed

2398
02:15:20,628 --> 02:15:26,118
whereas starting with some simple pong

2399
02:15:23,269 --> 02:15:29,119
game you make low level like what we do

2400
02:15:26,118 --> 02:15:30,618
in handmade hero there you might be able

2401
02:15:29,118 --> 02:15:33,529
to learn a lot more because it's so much

2402
02:15:30,618 --> 02:15:37,458
easier to grapple with that then this

2403
02:15:33,529 --> 02:15:41,358
huge multi-million line source tree

2404
02:15:37,458 --> 02:15:43,088
right and so I think when you're

2405
02:15:41,359 --> 02:15:45,949
starting to get into game programming

2406
02:15:43,088 --> 02:15:48,618
there isn't a right answer it's like

2407
02:15:45,948 --> 02:15:53,648
what am I trying to achieve and what can

2408
02:15:48,618 --> 02:15:56,628
I grapple with like you know what what

2409
02:15:53,649 --> 02:15:58,219
what do I get the most mental traction

2410
02:15:56,628 --> 02:16:00,649
on and that's probably what you should

2411
02:15:58,219 --> 02:16:03,019
be doing because you will learn if you

2412
02:16:00,649 --> 02:16:05,179
do it a lot and so the question is what

2413
02:16:03,019 --> 02:16:06,969
is your brain willing to do a lot of and

2414
02:16:05,179 --> 02:16:08,779
you should do that thing right and

2415
02:16:06,969 --> 02:16:11,029
starting with something like the Unreal

2416
02:16:08,779 --> 02:16:14,989
Engine might be too much

2417
02:16:11,029 --> 02:16:17,719
right and so you might want to scope it

2418
02:16:14,989 --> 02:16:20,090
down and that doesn't mean you have to

2419
02:16:17,720 --> 02:16:24,530
do like what we're doing you could do

2420
02:16:20,090 --> 02:16:26,300
other things start with the quake source

2421
02:16:24,529 --> 02:16:27,699
code that you download or something you

2422
02:16:26,300 --> 02:16:31,480
know I don't know but I'm saying like

2423
02:16:27,699 --> 02:16:35,869
try to find something that you can like

2424
02:16:31,479 --> 02:16:39,949
grapple with and go with that

2425
02:16:35,870 --> 02:16:41,540
don't don't be afraid to try a few

2426
02:16:39,950 --> 02:16:42,889
things to see if any of them stick if

2427
02:16:41,540 --> 02:16:44,120
nothing stick maybe you don't you

2428
02:16:42,888 --> 02:16:47,149
shouldn't be a programmer you know right

2429
02:16:44,120 --> 02:16:49,969
like you don't have to be programmed

2430
02:16:47,149 --> 02:16:53,149
there's lots of jobs that people do in

2431
02:16:49,968 --> 02:16:56,598
the game industry production art sound

2432
02:16:53,149 --> 02:16:58,718
designed regular design management's

2433
02:16:56,599 --> 02:17:03,950
marketing community management

2434
02:16:58,718 --> 02:17:05,419
programming is just one of them so don't

2435
02:17:03,950 --> 02:17:07,010
be afraid to experiment and see what it

2436
02:17:05,420 --> 02:17:11,290
is that you actually like and are good

2437
02:17:07,010 --> 02:17:11,290
at and go from there

2438
02:17:23,270 --> 02:17:27,620
off-topic question ender group what is

2439
02:17:25,639 --> 02:17:30,889
the purpose of this entity object API in

2440
02:17:27,620 --> 02:17:33,770
a few words nowadays is it essentially a

2441
02:17:30,889 --> 02:17:37,069
command buffer for a specific FBO for a

2442
02:17:33,770 --> 02:17:39,050
specific GL state I'm not really a

2443
02:17:37,069 --> 02:17:43,059
render group nowadays and let me just

2444
02:17:39,049 --> 02:17:46,489
bring it up here so we can talk about it

2445
02:17:43,059 --> 02:17:51,350
um so really what's happening here is

2446
02:17:46,489 --> 02:17:55,039
this is just saying mm-hmm that we know

2447
02:17:51,350 --> 02:17:57,979
we have some actual stuff that the

2448
02:17:55,040 --> 02:18:01,510
renderer needs to do like actual work

2449
02:17:57,979 --> 02:18:04,639
that we rely on the platform's

2450
02:18:01,510 --> 02:18:07,520
implementation of something OpenGL

2451
02:18:04,639 --> 02:18:09,709
direct3d whatever we have some mini

2452
02:18:07,520 --> 02:18:11,360
driver that sits on top of that that is

2453
02:18:09,709 --> 02:18:13,250
capable of actually doing the rendering

2454
02:18:11,360 --> 02:18:16,030
work like drawing quads and depth

2455
02:18:13,250 --> 02:18:19,760
sorting and all that crap right

2456
02:18:16,030 --> 02:18:22,640
but in order for the game to actually

2457
02:18:19,760 --> 02:18:27,079
stream out the actual information that

2458
02:18:22,639 --> 02:18:30,170
that mini driver needs right there's

2459
02:18:27,079 --> 02:18:33,139
just a lot going on there's all sorts of

2460
02:18:30,170 --> 02:18:35,950
stuff like okay where am I in the output

2461
02:18:33,139 --> 02:18:38,510
stream to to put like vertex data out

2462
02:18:35,950 --> 02:18:41,240
what's the actual transform that I

2463
02:18:38,510 --> 02:18:43,819
expect to be using here like just a

2464
02:18:41,239 --> 02:18:45,619
bunch of bookkeeping and so what the

2465
02:18:43,819 --> 02:18:48,319
render group does is it just packages

2466
02:18:45,620 --> 02:18:51,170
that up into one place so that all of

2467
02:18:48,319 --> 02:18:53,000
the people who actually use rendering

2468
02:18:51,170 --> 02:18:56,899
and throw stuff down to be rendered

2469
02:18:53,000 --> 02:18:59,420
don't have to track it all separately if

2470
02:18:56,899 --> 02:19:01,729
so that's all is is it's a bookkeeping

2471
02:18:59,420 --> 02:19:03,799
aid so that people who want to push

2472
02:19:01,729 --> 02:19:06,439
stuff to the renderer don't have to

2473
02:19:03,799 --> 02:19:08,840
remember every last Oh was lighting on

2474
02:19:06,440 --> 02:19:10,940
or off and and did I where was the

2475
02:19:08,840 --> 02:19:13,219
lighting going and how do I get to the

2476
02:19:10,940 --> 02:19:15,380
assets to like figure out which texture

2477
02:19:13,219 --> 02:19:18,319
I'm using it just puts that together so

2478
02:19:15,379 --> 02:19:20,539
that you you don't have to pass tons of

2479
02:19:18,319 --> 02:19:21,770
things down the pipeline and or find

2480
02:19:20,540 --> 02:19:22,790
that you're somewhere trying to render

2481
02:19:21,770 --> 02:19:24,500
something you don't have something you

2482
02:19:22,790 --> 02:19:27,770
need so it's a bookkeeping

2483
02:19:24,500 --> 02:19:29,600
simplification struct and you'll see

2484
02:19:27,770 --> 02:19:30,860
that happen a lot in complex systems

2485
02:19:29,600 --> 02:19:33,530
because there's so many moving pieces

2486
02:19:30,860 --> 02:19:35,329
you don't want to pass them all you just

2487
02:19:33,530 --> 02:19:36,979
want one pointer to something that has

2488
02:19:35,329 --> 02:19:38,869
all of the stuff you might

2489
02:19:36,978 --> 02:19:44,959
need in it and you just grab the one you

2490
02:19:38,869 --> 02:19:46,760
want right why are games unable to

2491
02:19:44,959 --> 02:19:48,679
saturate storage bandwidth when loading

2492
02:19:46,760 --> 02:19:49,998
with modern SSDs it seems like load

2493
02:19:48,680 --> 02:19:52,039
should never take longer than 2 to 3

2494
02:19:49,998 --> 02:19:54,619
seconds you're absolutely right and the

2495
02:19:52,039 --> 02:19:57,260
reason is usually just bad asset

2496
02:19:54,619 --> 02:20:03,380
processing right so typically what

2497
02:19:57,260 --> 02:20:05,869
happens is like they load things tons of

2498
02:20:03,379 --> 02:20:08,179
disparate tiny little chunks and then

2499
02:20:05,869 --> 02:20:10,159
they have to like wires I'm all up and

2500
02:20:08,180 --> 02:20:13,729
they're like matching strings like crazy

2501
02:20:10,158 --> 02:20:16,609
and like remap you know unbundling stuff

2502
02:20:13,728 --> 02:20:18,799
and just crazy bad code that's doing a

2503
02:20:16,609 --> 02:20:21,109
ton of work and so rather than just

2504
02:20:18,799 --> 02:20:23,568
issuing a giant set of i/o ops that it

2505
02:20:21,109 --> 02:20:25,640
can just like saturate the SSD and pull

2506
02:20:23,568 --> 02:20:28,908
it out as fast as possible instead it's

2507
02:20:25,639 --> 02:20:30,948
just this nonsense dance of like you

2508
02:20:28,908 --> 02:20:33,199
know grabbing little tiny pieces that

2509
02:20:30,949 --> 02:20:35,359
are not really fully processed and

2510
02:20:33,199 --> 02:20:37,460
checking whose name matches to what and

2511
02:20:35,359 --> 02:20:39,109
oh that thing reference this other thing

2512
02:20:37,459 --> 02:20:41,028
where is that thing I don't know let me

2513
02:20:39,109 --> 02:20:43,220
look it up in a table oh it's over there

2514
02:20:41,029 --> 02:20:45,140
issue an IO called a bat so it's like a

2515
02:20:43,219 --> 02:20:46,578
lot of these little serial bubbles load

2516
02:20:45,139 --> 02:20:47,898
this tiny thing what does it need o load

2517
02:20:46,578 --> 02:20:49,779
that thing that it needs oh that thing

2518
02:20:47,898 --> 02:20:53,238
needs something okay load that right and

2519
02:20:49,779 --> 02:20:55,810
so you end up in this case where you're

2520
02:20:53,238 --> 02:20:58,609
constantly waiting for the full latency

2521
02:20:55,809 --> 02:21:00,019
where as if you just knew everything you

2522
02:20:58,609 --> 02:21:02,059
needed for the next level and issued it

2523
02:21:00,020 --> 02:21:04,279
all at once it could just all come back

2524
02:21:02,059 --> 02:21:05,898
right and so it's those latency bubbles

2525
02:21:04,279 --> 02:21:07,310
of I asked for something then I need to

2526
02:21:05,898 --> 02:21:10,549
look at it to find out what to ask for

2527
02:21:07,309 --> 02:21:13,100
next that process is doing these big

2528
02:21:10,549 --> 02:21:15,769
round trips through the whole pipeline

2529
02:21:13,100 --> 02:21:17,689
and so even though the SSD can sustain

2530
02:21:15,770 --> 02:21:20,328
this really high bandwidth back if

2531
02:21:17,689 --> 02:21:22,398
you're just trickle asking for it and

2532
02:21:20,328 --> 02:21:24,260
then it has to wait all the time it's

2533
02:21:22,398 --> 02:21:26,478
constantly like stalling out right it's

2534
02:21:24,260 --> 02:21:30,889
like oh wait okay what did I this oh

2535
02:21:26,478 --> 02:21:34,448
okay oh this'll look right and so it's

2536
02:21:30,889 --> 02:21:34,448
just it's just sloppy programming

2537
02:21:42,450 --> 02:21:45,940
you've mentioned it with the engine

2538
02:21:44,440 --> 02:21:47,471
you're ready Frank 25 you're spending a

2539
02:21:45,940 --> 02:21:48,579
lot more time documenting your process

2540
02:21:47,470 --> 02:21:51,819
and decisions we're tackling a problem

2541
02:21:48,579 --> 02:21:53,289
problem do you have any tips or examples

2542
02:21:51,819 --> 02:21:56,170
of what you find useful to keep track of

2543
02:21:53,290 --> 02:22:03,011
yes I can tell you exactly how I do it

2544
02:21:56,170 --> 02:22:07,841
so specifically what I do is every time

2545
02:22:03,011 --> 02:22:10,841
I am not sure what the answer is to

2546
02:22:07,841 --> 02:22:13,601
something I'm doing that gets an entry

2547
02:22:10,841 --> 02:22:17,470
in the log so if I'm like well I could

2548
02:22:13,601 --> 02:22:21,159
do this thing by doing it X but I could

2549
02:22:17,470 --> 02:22:25,390
do it by Y and I'm not sure which one to

2550
02:22:21,159 --> 02:22:27,369
do or maybe like I could do X but maybe

2551
02:22:25,390 --> 02:22:30,100
X isn't quite right and I'm not sure

2552
02:22:27,370 --> 02:22:32,860
what is right that gets an entry and I

2553
02:22:30,101 --> 02:22:35,319
describe why I'm confused right so I'm

2554
02:22:32,860 --> 02:22:37,841
like well here are the pros to X and

2555
02:22:35,319 --> 02:22:39,579
here are the pros to Y and then I say at

2556
02:22:37,841 --> 02:22:43,329
the bottom I'm like I'm gonna go with X

2557
02:22:39,579 --> 02:22:45,789
for now but I'm not sure and then later

2558
02:22:43,329 --> 02:22:48,011
if I ever find out the actual answer

2559
02:22:45,790 --> 02:22:50,681
like I implement it and I'm like oh it

2560
02:22:48,011 --> 02:22:52,631
turned out X is really good or Wow X was

2561
02:22:50,681 --> 02:22:54,881
terrible don't do that let's switch to Y

2562
02:22:52,630 --> 02:22:56,289
then I go back in that comment block and

2563
02:22:54,880 --> 02:22:59,470
I say I put a little thing that says

2564
02:22:56,290 --> 02:23:02,830
resolved I'm like resolved you don't do

2565
02:22:59,470 --> 02:23:05,409
X because this happens so do Y because

2566
02:23:02,829 --> 02:23:08,140
it doesn't right that's what I keep

2567
02:23:05,409 --> 02:23:10,539
track of so any decision that wasn't

2568
02:23:08,140 --> 02:23:12,569
obvious that's what I try to keep track

2569
02:23:10,540 --> 02:23:12,570
of

2570
02:23:15,319 --> 02:23:19,639
if they're a good rule of thumb when it

2571
02:23:18,379 --> 02:23:21,139
comes to guard against errors in your

2572
02:23:19,639 --> 02:23:22,670
code is there such a thing as too much

2573
02:23:21,139 --> 02:23:23,989
handling I could imagine having many if

2574
02:23:22,670 --> 02:23:33,590
state mr. J conditionals could cause a

2575
02:23:23,989 --> 02:23:35,030
performance hit so a couple things the

2576
02:23:33,590 --> 02:23:37,340
first thing I'll say is on the

2577
02:23:35,030 --> 02:23:39,320
performance hit side of things it

2578
02:23:37,340 --> 02:23:42,350
doesn't really cause a huge performance

2579
02:23:39,319 --> 02:23:45,020
hit on an X 64 processor anyway to have

2580
02:23:42,350 --> 02:23:46,970
ifs for error handling and that's

2581
02:23:45,021 --> 02:23:50,860
because usually the if to check the air

2582
02:23:46,969 --> 02:23:53,270
condition doesn't require much work and

2583
02:23:50,860 --> 02:23:58,010
branches that are always taken in one

2584
02:23:53,271 --> 02:24:00,110
way are usually fairly cheap right so

2585
02:23:58,010 --> 02:24:02,950
meaning if you have a branch which is

2586
02:24:00,110 --> 02:24:07,579
like if everything is okay do this stuff

2587
02:24:02,950 --> 02:24:11,060
those are pretty cheap branches in fact

2588
02:24:07,579 --> 02:24:12,620
they're almost free branches if you

2589
02:24:11,059 --> 02:24:14,829
didn't have to do any work to compute

2590
02:24:12,620 --> 02:24:19,010
the thing that you're branching on and

2591
02:24:14,829 --> 02:24:22,850
so I would say I'm x64 you can probably

2592
02:24:19,010 --> 02:24:26,059
afford to have a fair bit of that code I

2593
02:24:22,850 --> 02:24:28,130
mean it depends on the context so

2594
02:24:26,059 --> 02:24:30,619
certain cases maybe not but in a lot of

2595
02:24:28,129 --> 02:24:32,270
cases it's okay but what I would say is

2596
02:24:30,620 --> 02:24:35,780
it's more about you wasting your own

2597
02:24:32,271 --> 02:24:37,250
time so don't waste your time adding

2598
02:24:35,780 --> 02:24:37,700
error checking in places you don't think

2599
02:24:37,250 --> 02:24:39,440
you need it

2600
02:24:37,700 --> 02:24:40,790
and so that guess was the first writer

2601
02:24:39,440 --> 02:24:43,340
question which is what's the rule of

2602
02:24:40,790 --> 02:24:46,130
thumb where do you need it and what I

2603
02:24:43,340 --> 02:24:49,340
would say there is that if you don't

2604
02:24:46,129 --> 02:24:52,219
know what kind of bugs you're likely to

2605
02:24:49,340 --> 02:24:55,239
make because you just aren't sure you

2606
02:24:52,219 --> 02:24:58,639
haven't been keeping track of that right

2607
02:24:55,239 --> 02:25:02,299
then what you want to do is you want to

2608
02:24:58,639 --> 02:25:06,789
start by saying every time I must set

2609
02:25:02,299 --> 02:25:09,229
aside this month every time this month I

2610
02:25:06,790 --> 02:25:12,610
get a bug in my code that I have to

2611
02:25:09,229 --> 02:25:16,760
debug I'm gonna write down what it was

2612
02:25:12,610 --> 02:25:18,860
what kind of bug was it right and the

2613
02:25:16,760 --> 02:25:21,340
end of the month you will know the kind

2614
02:25:18,860 --> 02:25:23,450
of errors you tend to have right and

2615
02:25:21,340 --> 02:25:28,380
that will give you some information

2616
02:25:23,450 --> 02:25:29,880
about you know what

2617
02:25:28,379 --> 02:25:32,550
what you should be guard against more

2618
02:25:29,879 --> 02:25:37,739
often the other thing you can also do

2619
02:25:32,550 --> 02:25:41,369
that helps is when you have bugs when

2620
02:25:37,739 --> 02:25:44,690
you debug the bug ask yourself how long

2621
02:25:41,370 --> 02:25:46,650
did that take if the answer was a minute

2622
02:25:44,690 --> 02:25:49,500
probably no need to do anything about it

2623
02:25:46,649 --> 02:25:53,220
if the answer was five ten and a half

2624
02:25:49,500 --> 02:25:56,670
hour then ask yourself what is the check

2625
02:25:53,220 --> 02:26:00,261
that would have prevented this bug going

2626
02:25:56,670 --> 02:26:02,310
add that check and remember it right

2627
02:26:00,261 --> 02:26:11,551
that's usually a pretty good rule of

2628
02:26:02,310 --> 02:26:13,199
thumb - so does it mean that you have

2629
02:26:11,550 --> 02:26:14,340
augmented this color information in your

2630
02:26:13,200 --> 02:26:16,500
metaphoric scheme so you can always

2631
02:26:14,340 --> 02:26:18,899
query who called you I hope that John

2632
02:26:16,500 --> 02:26:20,489
integrated these features in JRE um I

2633
02:26:18,899 --> 02:26:21,899
don't know if John has them in AR

2634
02:26:20,489 --> 02:26:24,511
already or not but it's not

2635
02:26:21,899 --> 02:26:26,879
metaprogramming really because all

2636
02:26:24,511 --> 02:26:29,640
you're saying is I want to be able to

2637
02:26:26,879 --> 02:26:31,770
have access to the call graph in a way

2638
02:26:29,640 --> 02:26:41,789
that generates something and that's just

2639
02:26:31,771 --> 02:26:43,021
regular programming really so for more

2640
02:26:41,790 --> 02:26:45,450
series on where you log do you have a

2641
02:26:43,021 --> 02:26:47,579
file for each function no I just have

2642
02:26:45,450 --> 02:26:50,391
one giant file called like devlog or

2643
02:26:47,579 --> 02:26:50,390
notes or something

2644
02:26:56,560 --> 02:27:00,529
render group thanks for answering it

2645
02:26:58,579 --> 02:27:03,079
sounds like an abstraction of GL API

2646
02:27:00,530 --> 02:27:05,181
plus the notion of render pass no still

2647
02:27:03,079 --> 02:27:07,370
not really and the reason I say that is

2648
02:27:05,181 --> 02:27:09,530
because a render group can actually just

2649
02:27:07,370 --> 02:27:11,660
get modified on the fly so look as

2650
02:27:09,530 --> 02:27:13,690
you're coming down and doing stuff you

2651
02:27:11,659 --> 02:27:16,219
can change like the transform as you go

2652
02:27:13,690 --> 02:27:19,190
so I really would encourage you to think

2653
02:27:16,219 --> 02:27:21,319
of it more as bookkeeping it's and it's

2654
02:27:19,190 --> 02:27:23,329
transient so render groups themselves

2655
02:27:21,319 --> 02:27:25,039
don't get handed anybody they go away

2656
02:27:23,329 --> 02:27:27,979
after they're used so they're really

2657
02:27:25,040 --> 02:27:31,280
just bookkeeping they're there to track

2658
02:27:27,979 --> 02:27:34,729
the state as it goes so it's more like

2659
02:27:31,280 --> 02:27:37,460
us a abstraction of all the state

2660
02:27:34,729 --> 02:27:40,010
necessary to issue render calls and it

2661
02:27:37,459 --> 02:27:42,799
updates as it goes as you change that

2662
02:27:40,010 --> 02:27:45,829
state but it doesn't record it anywhere

2663
02:27:42,799 --> 02:27:52,239
so the actual recording is done in other

2664
02:27:45,829 --> 02:27:52,239
things right that's what I would say

2665
02:28:12,959 --> 02:28:16,179
what are your thoughts on visual

2666
02:28:14,860 --> 02:28:18,280
programming languages do you imagine

2667
02:28:16,180 --> 02:28:19,659
good use cases for them and if so in

2668
02:28:18,280 --> 02:28:21,280
what context do you think they work

2669
02:28:19,659 --> 02:28:23,619
understanding is that it's challenging

2670
02:28:21,280 --> 02:28:25,659
to make a good visual language and that

2671
02:28:23,620 --> 02:28:27,540
usually the special-purpose ones work

2672
02:28:25,659 --> 02:28:31,869
better than attempts at general use ones

2673
02:28:27,540 --> 02:28:34,480
um first of all I would agree with the

2674
02:28:31,870 --> 02:28:37,061
with the back half of that the part that

2675
02:28:34,479 --> 02:28:40,989
you said your my understanding is I

2676
02:28:37,060 --> 02:28:43,810
would say that like the kinds of visual

2677
02:28:40,989 --> 02:28:48,521
languages that I've seen which tend to

2678
02:28:43,810 --> 02:28:51,279
look a lot like wiring diagrams those

2679
02:28:48,521 --> 02:28:52,930
are pretty limited in their utility like

2680
02:28:51,280 --> 02:28:54,670
when I see people trying to take those

2681
02:28:52,930 --> 02:28:56,739
in program really complex stuff in them

2682
02:28:54,670 --> 02:29:00,159
like when people use blueprint to make

2683
02:28:56,739 --> 02:29:02,319
complex stuff it's I'm like this is bad

2684
02:29:00,159 --> 02:29:05,920
right you it's way too complicated very

2685
02:29:02,319 --> 02:29:08,020
hard to read and so I think that's kind

2686
02:29:05,920 --> 02:29:10,329
of going off the rails there but when

2687
02:29:08,021 --> 02:29:12,851
you take a simpler example of something

2688
02:29:10,329 --> 02:29:15,340
that you do in blueprints or like more

2689
02:29:12,851 --> 02:29:18,159
to the point are shading diagram and

2690
02:29:15,340 --> 02:29:19,899
like Meyer something if you just have a

2691
02:29:18,159 --> 02:29:22,271
few things like oh here was the image

2692
02:29:19,899 --> 02:29:24,609
and I applied this modifier to it and I

2693
02:29:22,271 --> 02:29:26,200
can see that it got you know it

2694
02:29:24,610 --> 02:29:28,391
increased the contrast or whatever and

2695
02:29:26,200 --> 02:29:30,521
then I piped it to this detect this mesh

2696
02:29:28,390 --> 02:29:33,010
and there it is right you know you can

2697
02:29:30,521 --> 02:29:34,780
kind of see that being I'm like okay

2698
02:29:33,010 --> 02:29:36,729
that's not bad that's probably better

2699
02:29:34,780 --> 02:29:38,470
than if I had to type in some code for

2700
02:29:36,729 --> 02:29:40,479
that and didn't really know especially

2701
02:29:38,469 --> 02:29:41,529
if I'm not a programmer really and I'm

2702
02:29:40,479 --> 02:29:43,000
not used to thinking of things

2703
02:29:41,530 --> 02:29:46,840
linguistically like that you know it

2704
02:29:43,000 --> 02:29:48,579
seems like a pretty clear win um so I'd

2705
02:29:46,840 --> 02:29:49,659
agree at the back half of that as to

2706
02:29:48,579 --> 02:29:52,329
what my thoughts are on visual

2707
02:29:49,659 --> 02:29:55,690
programming languages in general I would

2708
02:29:52,329 --> 02:29:58,750
say that I think that the idea of making

2709
02:29:55,690 --> 02:30:01,659
languages that have visual components to

2710
02:29:58,750 --> 02:30:04,540
them as opposed to just a bunch of text

2711
02:30:01,659 --> 02:30:06,010
on a page is clearly good because a lot

2712
02:30:04,540 --> 02:30:08,920
of the things we program have a

2713
02:30:06,010 --> 02:30:11,729
geometric component to them and the fact

2714
02:30:08,920 --> 02:30:14,920
that we can't see any of it doesn't help

2715
02:30:11,729 --> 02:30:17,680
but I would say that the idea that

2716
02:30:14,920 --> 02:30:20,379
visual programming means wiring diagram

2717
02:30:17,680 --> 02:30:21,790
seems misguided there are people who've

2718
02:30:20,379 --> 02:30:24,609
done experiments with visual programming

2719
02:30:21,790 --> 02:30:25,090
that is not about wiring diagrams those

2720
02:30:24,610 --> 02:30:27,280
look

2721
02:30:25,090 --> 02:30:29,559
or promising to me and so I would say

2722
02:30:27,280 --> 02:30:32,979
that that seems like a better a more

2723
02:30:29,559 --> 02:30:35,859
fruitful Avenue for future progress than

2724
02:30:32,978 --> 02:30:39,398
wiring diagram which to me never really

2725
02:30:35,859 --> 02:30:40,780
made sense as a way to do anything more

2726
02:30:39,398 --> 02:30:42,398
than just simple image manipulation

2727
02:30:40,780 --> 02:30:46,140
stuff which is where those wiring

2728
02:30:42,398 --> 02:30:46,139
diagrams seem to work okay right

2729
02:30:48,540 --> 02:30:51,880
question is to touch on the over

2730
02:30:50,978 --> 02:30:53,289
error-checking

2731
02:30:51,879 --> 02:30:54,639
what about the case where you're making

2732
02:30:53,290 --> 02:30:56,200
API this is to be accessed by other

2733
02:30:54,639 --> 02:30:57,699
developers right now I'm making a

2734
02:30:56,200 --> 02:30:59,530
library for the twitch API that will be

2735
02:30:57,700 --> 02:31:01,270
constantly interfaced by users but I

2736
02:30:59,530 --> 02:31:02,950
feel like I'm holding their hand too

2737
02:31:01,270 --> 02:31:03,819
much with errors instead of assuming

2738
02:31:02,950 --> 02:31:05,560
that they have an idea what they're

2739
02:31:03,819 --> 02:31:06,520
doing to the point where a significant

2740
02:31:05,559 --> 02:31:15,549
amount of the library is just error

2741
02:31:06,520 --> 02:31:17,620
checking um well I guess what I would

2742
02:31:15,549 --> 02:31:19,688
say is obviously with anything including

2743
02:31:17,620 --> 02:31:22,329
that there's always still a balance to

2744
02:31:19,689 --> 02:31:24,159
it so I would say that you you you don't

2745
02:31:22,329 --> 02:31:26,590
necessarily want to go overboard but

2746
02:31:24,159 --> 02:31:28,148
it's worth remembering that when someone

2747
02:31:26,590 --> 02:31:31,148
else is using your code

2748
02:31:28,148 --> 02:31:34,809
they are coming into it completely blind

2749
02:31:31,148 --> 02:31:36,969
right I mean they have no idea what you

2750
02:31:34,809 --> 02:31:38,889
did in there and they are very much just

2751
02:31:36,969 --> 02:31:44,079
just feeling around to try and figure

2752
02:31:38,889 --> 02:31:48,449
out what's going on right and so you do

2753
02:31:44,079 --> 02:31:54,569
have to err on the side of being more

2754
02:31:48,450 --> 02:31:58,630
pedantic and descriptive and sort of

2755
02:31:54,569 --> 02:32:02,228
rigorous with your sort of error

2756
02:31:58,629 --> 02:32:03,670
reporting if nothing else because they

2757
02:32:02,228 --> 02:32:05,829
just aren't gonna know what they did

2758
02:32:03,670 --> 02:32:07,569
wrong a lot of times like they're gonna

2759
02:32:05,829 --> 02:32:10,329
do something and it's just not gonna

2760
02:32:07,569 --> 02:32:11,799
work and the reason and it would be

2761
02:32:10,329 --> 02:32:12,760
trivial for you to understand why it

2762
02:32:11,799 --> 02:32:15,759
doesn't work because you know the

2763
02:32:12,760 --> 02:32:17,680
internals they don't and so they're just

2764
02:32:15,760 --> 02:32:20,409
gonna be like I don't know why that

2765
02:32:17,680 --> 02:32:23,079
didn't work so the crucial thing that

2766
02:32:20,409 --> 02:32:25,119
you need to provide them is the way for

2767
02:32:23,079 --> 02:32:27,850
them to gain the understanding of why it

2768
02:32:25,120 --> 02:32:31,870
didn't work an error log is very

2769
02:32:27,850 --> 02:32:34,270
important in api's like that so they can

2770
02:32:31,870 --> 02:32:37,210
just see like okay this didn't work turn

2771
02:32:34,270 --> 02:32:38,439
on logging what happened oh that call

2772
02:32:37,209 --> 02:32:40,089
failed because

2773
02:32:38,439 --> 02:32:42,309
i patent it I passed a null pointer I

2774
02:32:40,090 --> 02:32:45,219
didn't realize that thing could return a

2775
02:32:42,309 --> 02:32:47,439
null pointer you know whatever or it it

2776
02:32:45,219 --> 02:32:48,849
failed and didn't produce an ID because

2777
02:32:47,439 --> 02:32:50,738
the server was down and I didn't know

2778
02:32:48,850 --> 02:32:53,800
the server was down so I thought it was

2779
02:32:50,738 --> 02:32:55,719
okay right bla bla bla and so having the

2780
02:32:53,799 --> 02:32:57,158
ability to look through an error log is

2781
02:32:55,719 --> 02:32:59,068
pretty important for people who are

2782
02:32:57,158 --> 02:33:02,439
trying to learn how to use an interface

2783
02:32:59,068 --> 02:33:04,568
and you do have to err more on the side

2784
02:33:02,439 --> 02:33:06,850
of being more descriptive putting more

2785
02:33:04,568 --> 02:33:09,068
stuff in there then if it's just for you

2786
02:33:06,850 --> 02:33:12,430
because you know the internals and you

2787
02:33:09,068 --> 02:33:14,170
know what's possible and not and so you

2788
02:33:12,430 --> 02:33:16,828
just have to respect that difference of

2789
02:33:14,170 --> 02:33:16,828
knowledge there

2790
02:33:23,470 --> 02:33:32,729
hmm I think I'm running out of voice

2791
02:33:29,620 --> 02:33:32,729
left to answer questions

2792
02:33:47,329 --> 02:33:50,149
going back to a question in the

2793
02:33:48,709 --> 02:33:51,500
beginning about Africa logic I think the

2794
02:33:50,149 --> 02:33:54,199
heart of the questions is due to a

2795
02:33:51,500 --> 02:33:55,129
discussion about what is clean code some

2796
02:33:54,200 --> 02:33:56,870
higher level languages seem to make

2797
02:33:55,129 --> 02:33:59,389
things look good but clean code is at

2798
02:33:56,870 --> 02:34:02,329
least to me isn't very well defined

2799
02:33:59,389 --> 02:34:03,949
maybe that they were looking for why

2800
02:34:02,329 --> 02:34:05,329
does this a complex versus something

2801
02:34:03,950 --> 02:34:07,610
that's a few lines of code but contained

2802
02:34:05,329 --> 02:34:08,870
in a bunch of little files my thoughts

2803
02:34:07,610 --> 02:34:10,970
review performance fine tuning and doing

2804
02:34:08,870 --> 02:34:15,880
exactly what's going on rather than

2805
02:34:10,969 --> 02:34:15,879
guessing I do that a lot using Python um

2806
02:34:17,889 --> 02:34:23,809
well I guess there's a mixture of things

2807
02:34:20,690 --> 02:34:27,260
so first of all the phrase clean code is

2808
02:34:23,809 --> 02:34:34,340
if someone uses the phrase clean code in

2809
02:34:27,260 --> 02:34:38,920
a specific way that usually concerns me

2810
02:34:34,340 --> 02:34:41,750
sometimes we use it in an offhand and

2811
02:34:38,920 --> 02:34:43,040
and using it offhand it's not always bad

2812
02:34:41,750 --> 02:34:45,350
like sometimes I will talk about

2813
02:34:43,040 --> 02:34:47,930
something being not clean and what I

2814
02:34:45,350 --> 02:34:49,909
mean by that is I know there's crap in

2815
02:34:47,930 --> 02:34:51,680
there that I haven't finished yet or

2816
02:34:49,909 --> 02:34:56,030
that I stuck something in it that's kind

2817
02:34:51,680 --> 02:34:58,729
of lousy and I want to go you know fix

2818
02:34:56,030 --> 02:35:01,670
it later and so in the sense that

2819
02:34:58,729 --> 02:35:04,309
there's you know clean code to me what

2820
02:35:01,670 --> 02:35:07,521
that usually means is I finished it to

2821
02:35:04,309 --> 02:35:09,799
the degree that I wanted it finished and

2822
02:35:07,521 --> 02:35:11,690
if I haven't done that then it's it's

2823
02:35:09,799 --> 02:35:13,369
probably pretty dirty in there right

2824
02:35:11,690 --> 02:35:16,730
like I haven't really had a chance to

2825
02:35:13,370 --> 02:35:19,130
quite polish it up and so I do think

2826
02:35:16,729 --> 02:35:22,039
that that that is a reasonable use of

2827
02:35:19,129 --> 02:35:23,839
clean code saying the word clean code

2828
02:35:22,040 --> 02:35:26,030
and referring to something like does

2829
02:35:23,840 --> 02:35:27,739
things have classes with private

2830
02:35:26,030 --> 02:35:32,420
sections or something that I think is

2831
02:35:27,739 --> 02:35:35,199
just absurd and silly those are people

2832
02:35:32,420 --> 02:35:39,920
whose opinions I don't respect and have

2833
02:35:35,200 --> 02:35:41,540
hate working with right and so what I

2834
02:35:39,920 --> 02:35:45,700
would say is you have to be careful

2835
02:35:41,540 --> 02:35:49,190
about what you mean with various things

2836
02:35:45,700 --> 02:35:53,150
and what they mean in a lot of these

2837
02:35:49,190 --> 02:35:57,069
different contexts right but going back

2838
02:35:53,149 --> 02:36:00,510
to sort of the meat of the question

2839
02:35:57,069 --> 02:36:05,378
which is whether things

2840
02:36:00,510 --> 02:36:06,459
take too many lines to implement it kind

2841
02:36:05,379 --> 02:36:11,829
of seems like what we're talking about

2842
02:36:06,459 --> 02:36:14,680
there then what I would say is yeah

2843
02:36:11,828 --> 02:36:15,788
there's a lot of trade-offs kind of all

2844
02:36:14,680 --> 02:36:25,988
mixed together

2845
02:36:15,789 --> 02:36:30,510
and you kind of have to pick what you're

2846
02:36:25,988 --> 02:36:38,078
going to accept right trade-off wise and

2847
02:36:30,510 --> 02:36:41,590
so you've got three things you can kind

2848
02:36:38,078 --> 02:36:45,549
of pick from and you really only get to

2849
02:36:41,590 --> 02:36:49,059
have one of them you can have code that

2850
02:36:45,549 --> 02:36:54,488
actually works well on the CPU and is

2851
02:36:49,059 --> 02:36:57,068
good like it runs well right and if you

2852
02:36:54,488 --> 02:37:00,908
want that you pretty much have to use C

2853
02:36:57,068 --> 02:37:05,590
or another fairly low-level language

2854
02:37:00,908 --> 02:37:10,779
it's very hard to get that you know

2855
02:37:05,590 --> 02:37:12,668
forget Python PHP you know it's it's not

2856
02:37:10,779 --> 02:37:18,430
even close to being acceptable when it

2857
02:37:12,668 --> 02:37:22,168
runs right and so you know if you want

2858
02:37:18,430 --> 02:37:26,350
if what you care about is the actual

2859
02:37:22,168 --> 02:37:28,930
quality of the executed code there are

2860
02:37:26,350 --> 02:37:32,379
very few things you can choose from and

2861
02:37:28,930 --> 02:37:37,359
they're all pretty verbose languages

2862
02:37:32,379 --> 02:37:40,869
right it's hard to find languages that

2863
02:37:37,359 --> 02:37:44,068
are good at making things concise but

2864
02:37:40,869 --> 02:37:49,959
which still generate highly optimal code

2865
02:37:44,068 --> 02:37:53,738
it's very hard to find that and that's

2866
02:37:49,959 --> 02:37:56,800
just a limitation so far in our ability

2867
02:37:53,738 --> 02:38:04,109
to produce quality languages for that

2868
02:37:56,799 --> 02:38:09,578
purpose okay so that's like one issue

2869
02:38:04,109 --> 02:38:12,340
another issue is if you want things to

2870
02:38:09,578 --> 02:38:12,989
be concise you can pick languages that

2871
02:38:12,340 --> 02:38:16,560
maybe

2872
02:38:12,989 --> 02:38:21,899
good having expressive power in terms of

2873
02:38:16,560 --> 02:38:26,010
the technical output you are looking for

2874
02:38:21,899 --> 02:38:30,209
but where you don't care how poorly you

2875
02:38:26,010 --> 02:38:33,510
get the result right so for example you

2876
02:38:30,209 --> 02:38:37,619
might find that in a language like ml

2877
02:38:33,510 --> 02:38:39,780
for example you can produce some very

2878
02:38:37,620 --> 02:38:42,630
nice things for certain types of

2879
02:38:39,780 --> 02:38:49,110
problems that allow you to in a very

2880
02:38:42,629 --> 02:38:51,420
small amount of code state something you

2881
02:38:49,110 --> 02:38:53,940
want to have happen and get the correct

2882
02:38:51,420 --> 02:38:55,409
answer even though the code is not

2883
02:38:53,940 --> 02:39:00,810
particularly good that comes out of it

2884
02:38:55,409 --> 02:39:02,879
right and so those are two distinct

2885
02:39:00,810 --> 02:39:05,340
courses you can pick there right and

2886
02:39:02,879 --> 02:39:07,560
once in a while if you're really lucky

2887
02:39:05,340 --> 02:39:09,569
you can find a language that can

2888
02:39:07,560 --> 02:39:11,851
actually do both but it's very rare for

2889
02:39:09,569 --> 02:39:13,560
most problems you can't write so we're

2890
02:39:11,851 --> 02:39:16,771
most films you have to pick one of those

2891
02:39:13,560 --> 02:39:20,940
two and then there's a third thing which

2892
02:39:16,771 --> 02:39:22,110
is like prefab code right and so for

2893
02:39:20,940 --> 02:39:24,300
example when you talk about something

2894
02:39:22,110 --> 02:39:24,870
like Python that has nothing to do with

2895
02:39:24,299 --> 02:39:27,029
the code

2896
02:39:24,870 --> 02:39:28,980
the only reason Python is useful at all

2897
02:39:27,030 --> 02:39:31,110
is because there's so many libraries the

2898
02:39:28,979 --> 02:39:34,379
reason it looks like something in Python

2899
02:39:31,110 --> 02:39:35,641
is concise is because you're calling a

2900
02:39:34,379 --> 02:39:38,239
bunch of prefab code that somebody else

2901
02:39:35,640 --> 02:39:40,890
made right you don't have to implement

2902
02:39:38,239 --> 02:39:42,569
HTTP yourself because there's a library

2903
02:39:40,890 --> 02:39:45,959
there to do that for you you don't have

2904
02:39:42,569 --> 02:39:51,779
to implement MSHA one because there's a

2905
02:39:45,959 --> 02:39:54,029
library for you right and so that is a

2906
02:39:51,780 --> 02:39:59,400
separate concern altogether it's whether

2907
02:39:54,030 --> 02:40:01,050
or not you have any particular access to

2908
02:39:59,399 --> 02:40:05,119
libraries that do the things that you

2909
02:40:01,049 --> 02:40:11,299
need that's a separate concern and

2910
02:40:05,120 --> 02:40:13,771
actually in many ways re-implemented

2911
02:40:11,299 --> 02:40:15,959
sometimes those libraries you might find

2912
02:40:13,771 --> 02:40:18,450
a really well-written library and then

2913
02:40:15,959 --> 02:40:19,789
you it doesn't matter that you used it

2914
02:40:18,450 --> 02:40:22,681
you still get really high quality

2915
02:40:19,790 --> 02:40:24,150
results because the library was written

2916
02:40:22,681 --> 02:40:26,940
specifically to do the thing you want to

2917
02:40:24,149 --> 02:40:28,979
do and was well written other times you

2918
02:40:26,940 --> 02:40:30,631
be like well I just care that this can

2919
02:40:28,979 --> 02:40:32,039
do it at all and the fact that this

2920
02:40:30,630 --> 02:40:34,949
library can do it is good enough for me

2921
02:40:32,040 --> 02:40:41,311
even though it's slow and piggy and lame

2922
02:40:34,950 --> 02:40:46,051
right and so I think you have a pretty

2923
02:40:41,310 --> 02:40:50,399
wide set of concerns there that you have

2924
02:40:46,050 --> 02:40:51,779
to manage the reason that on handmade

2925
02:40:50,399 --> 02:40:54,479
here oh we write everything ourselves

2926
02:40:51,780 --> 02:40:56,070
and we write it low level is because

2927
02:40:54,479 --> 02:40:57,959
there's already plenty of material out

2928
02:40:56,069 --> 02:40:59,610
there how to do it the other way right

2929
02:40:57,959 --> 02:41:02,609
grabbing someone else's librarian just

2930
02:40:59,610 --> 02:41:04,351
calling it is not something I really

2931
02:41:02,610 --> 02:41:08,341
need to teach people to do you should be

2932
02:41:04,351 --> 02:41:13,381
able to find right plenty of people

2933
02:41:08,341 --> 02:41:15,120
talking about that and I think it's

2934
02:41:13,380 --> 02:41:17,609
important that people learn this because

2935
02:41:15,120 --> 02:41:20,280
my daily experience with other people's

2936
02:41:17,610 --> 02:41:22,021
software is that it's terrible every

2937
02:41:20,280 --> 02:41:22,681
single thing I use on the web is

2938
02:41:22,021 --> 02:41:26,521
horrible

2939
02:41:22,681 --> 02:41:28,011
super slow and absolutely like so far

2940
02:41:26,521 --> 02:41:31,409
below the level of acceptable quality

2941
02:41:28,011 --> 02:41:34,860
that I just completely rage out at it

2942
02:41:31,409 --> 02:41:36,360
right and what's weird about that is

2943
02:41:34,860 --> 02:41:40,409
like you know I did the code for our

2944
02:41:36,360 --> 02:41:42,931
website and this when I tried to use

2945
02:41:40,409 --> 02:41:44,970
other people's stuff for this it was so

2946
02:41:42,931 --> 02:41:46,790
horrible that I just ended up writing my

2947
02:41:44,970 --> 02:41:51,000
own and seeing it was way better right

2948
02:41:46,790 --> 02:41:55,681
um so again like that quality bar is

2949
02:41:51,000 --> 02:41:59,880
like a real issue right now and I think

2950
02:41:55,681 --> 02:42:02,431
that is I think a lot of people are

2951
02:41:59,880 --> 02:42:03,810
lying to themselves about the quality of

2952
02:42:02,431 --> 02:42:07,261
the things that they're putting out by

2953
02:42:03,810 --> 02:42:12,300
not writing things from scratch and so

2954
02:42:07,261 --> 02:42:15,931
it's a little bit less to me it's not so

2955
02:42:12,300 --> 02:42:17,640
much that I think in the grand scheme of

2956
02:42:15,931 --> 02:42:19,890
things we will always have to write

2957
02:42:17,640 --> 02:42:23,850
things at low level I actually hope

2958
02:42:19,890 --> 02:42:25,681
that's not true but right now people are

2959
02:42:23,851 --> 02:42:28,110
using a lot of high level things either

2960
02:42:25,681 --> 02:42:30,301
libraries or languages that are actually

2961
02:42:28,110 --> 02:42:32,101
just terrible and they don't seem to

2962
02:42:30,300 --> 02:42:35,399
care that the products they're producing

2963
02:42:32,101 --> 02:42:37,141
are absolutely terrible to use their

2964
02:42:35,399 --> 02:42:40,649
buggy they're slow they're unpredictable

2965
02:42:37,140 --> 02:42:43,140
they're not very maintainable they have

2966
02:42:40,649 --> 02:42:47,489
erroneous weird transient errors a lot

2967
02:42:43,140 --> 02:42:50,520
of time and I hope at least that some

2968
02:42:47,489 --> 02:42:52,261
people who watch the series get a taste

2969
02:42:50,521 --> 02:42:55,920
for implementing things themselves

2970
02:42:52,261 --> 02:42:58,761
because I'm just hoping that people more

2971
02:42:55,920 --> 02:43:01,860
people will take quality more seriously

2972
02:42:58,761 --> 02:43:05,970
which is really just and you have to

2973
02:43:01,860 --> 02:43:09,360
start here right you have to start just

2974
02:43:05,970 --> 02:43:11,761
knowing how to do this basic stuff and

2975
02:43:09,360 --> 02:43:13,681
so this is just like a training ground

2976
02:43:11,761 --> 02:43:15,511
for knowing how to implement things from

2977
02:43:13,681 --> 02:43:17,310
scratch and once you know how to

2978
02:43:15,511 --> 02:43:19,381
implement things from scratch then when

2979
02:43:17,310 --> 02:43:21,779
you go to look at another problem you

2980
02:43:19,380 --> 02:43:25,050
can say oh I don't have to use this

2981
02:43:21,780 --> 02:43:27,329
ridiculous super piggy thing that takes

2982
02:43:25,050 --> 02:43:29,520
one point five seconds to add someone's

2983
02:43:27,329 --> 02:43:31,649
name to a mailing list on this website I

2984
02:43:29,521 --> 02:43:33,480
can write one myself it takes ten

2985
02:43:31,649 --> 02:43:36,931
milliseconds including the ping time and

2986
02:43:33,479 --> 02:43:39,569
it's like ten times better right and so

2987
02:43:36,931 --> 02:43:41,280
this is just a way to say hey it's not

2988
02:43:39,569 --> 02:43:43,979
that hard to implement things yourself

2989
02:43:41,280 --> 02:43:46,261
here's how it looks yes it takes longer

2990
02:43:43,979 --> 02:43:49,829
to write something that's good and from

2991
02:43:46,261 --> 02:43:56,341
scratch but it's also way better right

2992
02:43:49,829 --> 02:44:05,630
um and so I guess that's what I would

2993
02:43:56,341 --> 02:44:05,631
say I tried odeon no I have not

2994
02:44:13,609 --> 02:44:17,250
what you're seeing is really good but

2995
02:44:15,629 --> 02:44:19,500
opposite to what devs are being told in

2996
02:44:17,250 --> 02:44:21,988
schools um yeah but I mean that's true

2997
02:44:19,500 --> 02:44:23,370
of most things that occur in schools I

2998
02:44:21,988 --> 02:44:26,398
mean one of the things that's true about

2999
02:44:23,370 --> 02:44:28,020
schools is those are not people who do

3000
02:44:26,398 --> 02:44:30,510
production code for a living right

3001
02:44:28,020 --> 02:44:34,800
so typically what someone gets taught in

3002
02:44:30,510 --> 02:44:37,139
school is either completely uninformed

3003
02:44:34,799 --> 02:44:41,238
by reality which is often the case and

3004
02:44:37,139 --> 02:44:42,449
not just in programming or it's old

3005
02:44:41,238 --> 02:44:46,049
right

3006
02:44:42,450 --> 02:44:49,970
it's it's old knowledge that if it was

3007
02:44:46,049 --> 02:44:53,188
ever true is not true anymore right and

3008
02:44:49,969 --> 02:44:55,438
so you know it's a problem but that's

3009
02:44:53,189 --> 02:44:59,220
true of most things you learn in schools

3010
02:44:55,439 --> 02:45:01,380
right most things that happen in a

3011
02:44:59,219 --> 02:45:06,209
university are not particularly well

3012
02:45:01,379 --> 02:45:07,920
grounded in practicality right and to

3013
02:45:06,209 --> 02:45:09,629
some degree I think that's a bit of a

3014
02:45:07,920 --> 02:45:11,969
reason why they're not particularly

3015
02:45:09,629 --> 02:45:15,148
great for training people to actually do

3016
02:45:11,969 --> 02:45:16,528
stuff I mean you know that wasn't really

3017
02:45:15,148 --> 02:45:17,909
ever supposed to be the point of a

3018
02:45:16,529 --> 02:45:19,470
university in the first place like

3019
02:45:17,909 --> 02:45:21,750
universities were supposed to be places

3020
02:45:19,469 --> 02:45:24,510
people went to sort of abstractly study

3021
02:45:21,750 --> 02:45:26,459
things not where you went to get trained

3022
02:45:24,510 --> 02:45:28,318
to do something that's what a guild is

3023
02:45:26,459 --> 02:45:30,898
right didn't go to university to learn

3024
02:45:28,318 --> 02:45:32,879
to be a blacksmith you went to

3025
02:45:30,898 --> 02:45:34,738
university to just study about the

3026
02:45:32,879 --> 02:45:36,929
nature of metals or something right and

3027
02:45:34,738 --> 02:45:38,639
so nowadays we've kind of got it mixed

3028
02:45:36,930 --> 02:45:40,020
up you go to University learn about

3029
02:45:38,639 --> 02:45:41,699
programming but the people there aren't

3030
02:45:40,020 --> 02:45:43,470
production programmers you know the

3031
02:45:41,700 --> 02:45:46,250
people who are professors in programming

3032
02:45:43,469 --> 02:45:48,599
classes usually haven't done hardly any

3033
02:45:46,250 --> 02:45:50,100
really serious production programming

3034
02:45:48,600 --> 02:45:52,859
and if they have it hasn't been for a

3035
02:45:50,100 --> 02:45:54,870
really long time that's just not where

3036
02:45:52,859 --> 02:45:59,059
you want to get your information right

3037
02:45:54,870 --> 02:45:59,060
about how to be a production programmer

3038
02:45:59,389 --> 02:46:09,869
so yeah it's bad but that's the nature

3039
02:46:04,350 --> 02:46:14,250
of universities unfortunately and we've

3040
02:46:09,870 --> 02:46:16,229
that's a fallacy we accidentally created

3041
02:46:14,250 --> 02:46:19,648
and it doesn't just apply to programming

3042
02:46:16,228 --> 02:46:22,108
it's everything you know we the place to

3043
02:46:19,648 --> 02:46:24,349
learn how to do something is not in an

3044
02:46:22,109 --> 02:46:26,100
abstract studying scenario and

3045
02:46:24,350 --> 02:46:27,210
universities were supposed to be for

3046
02:46:26,100 --> 02:46:29,130
abstract studying

3047
02:46:27,209 --> 02:46:30,179
and guilds and apprenticeship was

3048
02:46:29,129 --> 02:46:35,389
supposed to be to learn how to do stuff

3049
02:46:30,180 --> 02:46:40,040
right and unfortunately we've lost this

3050
02:46:35,389 --> 02:46:40,039
dichotomy and it's a problem

3051
02:46:55,030 --> 02:46:58,870
Chavez still intro to CS and often times

3052
02:46:57,219 --> 02:47:01,029
C so us is barely covered why do you

3053
02:46:58,870 --> 02:47:02,500
think that is I think it's because a lot

3054
02:47:01,030 --> 02:47:03,940
of old corporate financial companies the

3055
02:47:02,500 --> 02:47:06,579
old guard was stuck with ooh

3056
02:47:03,940 --> 02:47:12,340
servile hand um yeah I don't know why

3057
02:47:06,579 --> 02:47:19,329
they prefer Java it's hard to say I mean

3058
02:47:12,340 --> 02:47:21,340
again like C C++ they're not good

3059
02:47:19,329 --> 02:47:23,409
languages either they're if you're gonna

3060
02:47:21,340 --> 02:47:27,639
learn something C is a good language to

3061
02:47:23,409 --> 02:47:31,090
teach instead of Java for sure but you

3062
02:47:27,639 --> 02:47:32,619
know there's really no language as I

3063
02:47:31,090 --> 02:47:34,450
point to today and say wow that's a

3064
02:47:32,620 --> 02:47:38,910
great language we should all be teaching

3065
02:47:34,450 --> 02:47:43,420
that right they're all bad C++ is awful

3066
02:47:38,909 --> 02:47:45,039
and so you know the reason I would say

3067
02:47:43,420 --> 02:47:46,479
why would you be learning jobs cuz I

3068
02:47:45,040 --> 02:47:48,940
just don't think you want to teach

3069
02:47:46,479 --> 02:47:51,119
people things that pretend that the

3070
02:47:48,940 --> 02:47:56,560
computer is not really a computer right

3071
02:47:51,120 --> 02:47:58,720
not a good way to learn but but you know

3072
02:47:56,559 --> 02:48:00,340
I'd be lying if I said that C++ was some

3073
02:47:58,719 --> 02:48:03,129
kind of language that I think is great

3074
02:48:00,340 --> 02:48:06,130
it's not I I complain about it every day

3075
02:48:03,129 --> 02:48:09,339
on stream and you know just looking at

3076
02:48:06,129 --> 02:48:11,349
any given piece of my code I can think

3077
02:48:09,340 --> 02:48:13,270
of 10 things C++ should have had that

3078
02:48:11,350 --> 02:48:21,430
would have made it much simpler and much

3079
02:48:13,270 --> 02:48:25,390
easier to write that piece all right I'm

3080
02:48:21,430 --> 02:48:26,770
gonna spend a long stream of talking I'm

3081
02:48:25,389 --> 02:48:30,549
gonna lose my voice I actually already

3082
02:48:26,770 --> 02:48:32,760
have lost my voice all right we all get

3083
02:48:30,549 --> 02:48:32,759
here

3084
02:48:33,790 --> 02:48:40,810
all right hmm thank you everyone for

3085
02:48:39,459 --> 02:48:42,398
joining me for another sort of handmade

3086
02:48:40,809 --> 02:48:43,119
hero - a pleasure coding with you as

3087
02:48:42,398 --> 02:48:46,119
always

3088
02:48:43,120 --> 02:48:47,439
if you want to follow along with the

3089
02:48:46,120 --> 02:48:49,689
stream at home you can always peer to

3090
02:48:47,439 --> 02:48:51,460
the game on handmade hero organ it comes

3091
02:48:49,689 --> 02:48:53,559
with a source code already so if you

3092
02:48:51,459 --> 02:48:55,509
want to play around with it that's the

3093
02:48:53,559 --> 02:48:58,090
way to do it I'm gonna be back here

3094
02:48:55,510 --> 02:49:01,148
tomorrow for more coding we'll take a

3095
02:48:58,090 --> 02:49:02,859
look at our memory window and try to get

3096
02:49:01,148 --> 02:49:05,409
that finished up so that next weekend we

3097
02:49:02,859 --> 02:49:08,200
can start on our entity improvements

3098
02:49:05,409 --> 02:49:09,489
that's about it until then have fun

3099
02:49:08,200 --> 02:49:09,970
programming and I'll see everyone on the

3100
02:49:09,489 --> 02:49:12,719
Internet

3101
02:49:09,969 --> 02:49:12,719
thank yous everybody

