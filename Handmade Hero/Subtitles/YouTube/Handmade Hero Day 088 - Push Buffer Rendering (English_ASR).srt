1
00:00:00,709 --> 00:00:05,338
hello everyone and welcome to handmade

2
00:00:03,270 --> 00:00:09,119
hero shall we code a complete game live

3
00:00:05,339 --> 00:00:14,370
on Twitch no library's no engine all our

4
00:00:09,119 --> 00:00:15,718
own code and well we're at a Friday

5
00:00:14,369 --> 00:00:18,329
where we finished the thing we were

6
00:00:15,718 --> 00:00:19,890
supposed to do yesterday and so the next

7
00:00:18,329 --> 00:00:21,239
thing that we wanted to do I kinda

8
00:00:19,890 --> 00:00:23,070
didn't want to start it just on a Friday

9
00:00:21,239 --> 00:00:27,989
when we're just ending so we're kind of

10
00:00:23,070 --> 00:00:29,579
in a little bit of a snail here where

11
00:00:27,989 --> 00:00:31,079
I'm not sure what we should really start

12
00:00:29,579 --> 00:00:32,609
doing we could try to look for the

13
00:00:31,079 --> 00:00:35,189
variable I don't think that's gonna pan

14
00:00:32,609 --> 00:00:37,200
out especially not in just one session

15
00:00:35,189 --> 00:00:38,399
so we got to figure out something else

16
00:00:37,200 --> 00:00:39,359
to do now somebody on the pre stream

17
00:00:38,399 --> 00:00:40,890
mentioned that they thought they might

18
00:00:39,359 --> 00:00:46,159
have seen a bug in the collision

19
00:00:40,890 --> 00:00:48,120
detector that was about you know a typo

20
00:00:46,159 --> 00:00:49,349
regarding what what we were supposed to

21
00:00:48,119 --> 00:00:50,488
test against I introduced a new variable

22
00:00:49,350 --> 00:00:52,260
instead of we were testing against it

23
00:00:50,488 --> 00:00:55,409
and then I didn't like type it in in the

24
00:00:52,259 --> 00:00:57,119
right place or something and so I feel

25
00:00:55,409 --> 00:00:59,459
like maybe since again we don't

26
00:00:57,119 --> 00:01:02,250
necessarily know exactly what we should

27
00:00:59,460 --> 00:01:03,600
be doing today let's let's tackle that

28
00:01:02,250 --> 00:01:05,728
first and we'll see what emerges from it

29
00:01:03,600 --> 00:01:07,439
now of course it is day 88 so if you're

30
00:01:05,728 --> 00:01:09,750
following along at home and you

31
00:01:07,438 --> 00:01:12,899
pre-ordered the game download day 87

32
00:01:09,750 --> 00:01:13,650
source code that's the stuff that I am

33
00:01:12,900 --> 00:01:15,390
working with today

34
00:01:13,650 --> 00:01:17,009
and so you should be on that as well now

35
00:01:15,390 --> 00:01:20,969
they were saying that it was a thing to

36
00:01:17,009 --> 00:01:23,700
do with test PE so let's take a look at

37
00:01:20,969 --> 00:01:24,989
what test B was doing and and make sure

38
00:01:23,700 --> 00:01:29,340
that it actually does something

39
00:01:24,989 --> 00:01:30,899
reasonable with that so I guess what I

40
00:01:29,340 --> 00:01:33,689
will say is the fact that we introduced

41
00:01:30,900 --> 00:01:37,228
SP here and then never use it suggests

42
00:01:33,688 --> 00:01:39,209
that either there actually is a bug as

43
00:01:37,228 --> 00:01:41,908
the person was suggesting or we just got

44
00:01:39,209 --> 00:01:44,548
rid of the need to do it but let's take

45
00:01:41,909 --> 00:01:47,040
a look here so we're doing a test T test

46
00:01:44,549 --> 00:01:49,710
be we're doing a speculative collide of

47
00:01:47,040 --> 00:01:51,719
this entity and this other tests entity

48
00:01:49,709 --> 00:01:54,539
and then assuming that it actually

49
00:01:51,719 --> 00:01:59,188
occurs we don't use test P for anything

50
00:01:54,540 --> 00:02:01,890
in particular so I'm not sure let's take

51
00:01:59,188 --> 00:02:03,688
a quick look and see it's been a while

52
00:02:01,890 --> 00:02:05,159
since we've looked at this code let's

53
00:02:03,688 --> 00:02:07,798
take a quick look and see what we were

54
00:02:05,159 --> 00:02:11,939
doing with speculative collision so with

55
00:02:07,799 --> 00:02:13,450
Beckett if collide it looks like for the

56
00:02:11,939 --> 00:02:17,109
most part

57
00:02:13,449 --> 00:02:20,769
yeah we are we're really doing more of

58
00:02:17,110 --> 00:02:24,790
uh we're doing more of a direct query

59
00:02:20,770 --> 00:02:26,950
here which I assume we probably meant to

60
00:02:24,789 --> 00:02:29,079
do spec to let spectacle I'd take this

61
00:02:26,949 --> 00:02:30,339
test fee right I suspect that's what we

62
00:02:29,080 --> 00:02:36,730
were meaning to do and then just never

63
00:02:30,340 --> 00:02:41,050
did it so I suspect we would want to

64
00:02:36,729 --> 00:02:43,329
actually have that work out so again in

65
00:02:41,050 --> 00:02:46,000
the ground point is no longer actually a

66
00:02:43,330 --> 00:02:47,800
thing we kind of said that the entity

67
00:02:46,000 --> 00:02:50,259
ground point is always actually there so

68
00:02:47,800 --> 00:02:53,020
I'm not sure you know we could pass test

69
00:02:50,259 --> 00:02:58,599
P but we need to have get entity ground

70
00:02:53,020 --> 00:03:00,820
point work through that test fee hmm so

71
00:02:58,599 --> 00:03:04,120
it's a little tricky well so let's take

72
00:03:00,819 --> 00:03:06,370
a look if we were going to pass test P

73
00:03:04,120 --> 00:03:08,640
to this too speculative collide and say

74
00:03:06,370 --> 00:03:10,810
here is where we actually want to know

75
00:03:08,639 --> 00:03:14,319
you know if you could actually do this

76
00:03:10,810 --> 00:03:15,969
you pass in the the test point then

77
00:03:14,319 --> 00:03:18,519
really what we want to do here is say

78
00:03:15,969 --> 00:03:20,169
that this move or ground point thing we

79
00:03:18,519 --> 00:03:23,259
want that to be based off of test peak

80
00:03:20,169 --> 00:03:25,958
now if we were still like I said to

81
00:03:23,259 --> 00:03:27,939
allow entities to return ground points

82
00:03:25,959 --> 00:03:29,409
however they wanted what that

83
00:03:27,939 --> 00:03:31,120
essentially means is that the get any

84
00:03:29,409 --> 00:03:36,250
ground point would have to be able to

85
00:03:31,120 --> 00:03:38,469
take like four for an FTP it would then

86
00:03:36,250 --> 00:03:40,150
have to return the ground point if the

87
00:03:38,469 --> 00:03:42,310
entity were in that location basically

88
00:03:40,150 --> 00:03:43,659
right and in this case we pretty much

89
00:03:42,310 --> 00:03:45,909
know that that's always just going to

90
00:03:43,659 --> 00:03:47,799
return this directly but it does seem

91
00:03:45,909 --> 00:03:51,310
like maybe we want to do it that way

92
00:03:47,799 --> 00:03:54,159
just so we can kind of I don't know

93
00:03:51,310 --> 00:03:57,159
allow that that sort of that sort of

94
00:03:54,159 --> 00:03:59,829
thing to happen we could also make it so

95
00:03:57,159 --> 00:04:01,840
that old code worked okay like code that

96
00:03:59,830 --> 00:04:05,830
didn't want to know anything about that

97
00:04:01,840 --> 00:04:07,930
could just pass the MVP like so so it

98
00:04:05,830 --> 00:04:10,989
could you know do the same thing it used

99
00:04:07,930 --> 00:04:12,969
to be doing pretty trivially right so

100
00:04:10,989 --> 00:04:18,370
this would allow us to still to do that

101
00:04:12,969 --> 00:04:19,930
call with a test P and yeah like we

102
00:04:18,370 --> 00:04:22,090
didn't really have a bug that was

103
00:04:19,930 --> 00:04:24,550
manifesting itself so it's not like we

104
00:04:22,089 --> 00:04:27,039
can really test that and again we're

105
00:04:24,550 --> 00:04:29,020
kind of haven't finished really the

106
00:04:27,040 --> 00:04:31,870
detection stuff that we really need to

107
00:04:29,019 --> 00:04:34,539
do and so at some level it's hard for us

108
00:04:31,870 --> 00:04:38,800
to know whether this thing is working or

109
00:04:34,540 --> 00:04:39,850
not yeah it's kind of it'd be kind of

110
00:04:38,800 --> 00:04:44,139
hard to know like we wouldn't

111
00:04:39,850 --> 00:04:45,550
necessarily see it either way so we will

112
00:04:44,139 --> 00:04:47,289
need to put the stairwell back in

113
00:04:45,550 --> 00:04:52,030
probably first of all so maybe we'll

114
00:04:47,290 --> 00:04:53,140
also do that and yeah of course we we

115
00:04:52,029 --> 00:04:54,339
aren't really necessarily ready for that

116
00:04:53,139 --> 00:04:56,469
because we aren't doing the multiple

117
00:04:54,339 --> 00:05:00,250
ground level rendering stuff yet but

118
00:04:56,470 --> 00:05:01,480
we'll see we'll see how it goes so let's

119
00:05:00,250 --> 00:05:04,839
see add stair

120
00:05:01,480 --> 00:05:06,610
I think the stairwell was the only thing

121
00:05:04,839 --> 00:05:10,000
that ever used that speculative

122
00:05:06,610 --> 00:05:12,730
collision so far so yeah all right so

123
00:05:10,000 --> 00:05:17,050
let's put those stairs back in there and

124
00:05:12,730 --> 00:05:24,009
see how that goes so you know if I if

125
00:05:17,050 --> 00:05:25,900
I'm coming up here oh man there's so

126
00:05:24,009 --> 00:05:28,629
many ground patches all over the place

127
00:05:25,899 --> 00:05:31,120
now that's hilarious

128
00:05:28,629 --> 00:05:32,889
and of course there's more than fit in

129
00:05:31,120 --> 00:05:35,470
our cache so like you can occasionally

130
00:05:32,889 --> 00:05:37,120
see them blinking in and out because now

131
00:05:35,470 --> 00:05:40,810
we've got two layers of them happening

132
00:05:37,120 --> 00:05:43,050
that's pretty trippy yes so

133
00:05:40,810 --> 00:05:45,310
unfortunately it's pretty hard to tell

134
00:05:43,050 --> 00:05:46,960
whether we would actually be fixed

135
00:05:45,310 --> 00:05:50,019
whether we'd actually fix that bug or

136
00:05:46,959 --> 00:05:53,759
not right because we don't really have a

137
00:05:50,019 --> 00:05:55,659
clean way to have it manifest itself so

138
00:05:53,759 --> 00:05:59,439
there's nothing we can really do about

139
00:05:55,660 --> 00:06:01,689
that for now I guess so yeah what I

140
00:05:59,439 --> 00:06:04,089
should do is I should update our ground

141
00:06:01,689 --> 00:06:05,620
cache a little bit just in preparation I

142
00:06:04,089 --> 00:06:07,419
should say that we're gonna have a

143
00:06:05,620 --> 00:06:09,840
slightly bigger ground cache let's take

144
00:06:07,420 --> 00:06:09,840
a look here

145
00:06:10,658 --> 00:06:18,430
where is that got our grab buffer count

146
00:06:15,129 --> 00:06:23,389
so let's let's make that a little bigger

147
00:06:18,430 --> 00:06:25,490
let's make that 64 for now so we can

148
00:06:23,389 --> 00:06:27,800
handle both stairwells so that you know

149
00:06:25,490 --> 00:06:29,598
because again generation is super picky

150
00:06:27,800 --> 00:06:31,879
right now it's super slow doing that

151
00:06:29,598 --> 00:06:34,878
generation and so we kind of want to

152
00:06:31,879 --> 00:06:38,569
make sure that everything once it has

153
00:06:34,879 --> 00:06:40,099
been generated it stays generated until

154
00:06:38,569 --> 00:06:41,180
we actually have some some more

155
00:06:40,098 --> 00:06:42,500
efficient stuff happening there but

156
00:06:41,180 --> 00:06:45,348
either way it'd be nice to have a little

157
00:06:42,500 --> 00:06:47,269
bit more here yeah so I think we're okay

158
00:06:45,348 --> 00:06:50,569
at least you know if that bug was

159
00:06:47,269 --> 00:06:51,889
actually going to manifest itself we

160
00:06:50,569 --> 00:06:52,939
would have seen it before now so I think

161
00:06:51,889 --> 00:06:55,759
it's one of the things that we're kind

162
00:06:52,939 --> 00:06:57,529
of just fixing because it's you know it

163
00:06:55,759 --> 00:06:59,389
should be bus it just doesn't happen to

164
00:06:57,529 --> 00:07:02,689
show itself so we can't really test to

165
00:06:59,389 --> 00:07:03,918
see whether we fixed it but yeah so you

166
00:07:02,689 --> 00:07:05,569
know one thing that we're probably gonna

167
00:07:03,918 --> 00:07:07,549
have to do and I guess maybe this is

168
00:07:05,569 --> 00:07:09,740
that indication maybe we should do this

169
00:07:07,550 --> 00:07:10,908
today do this a little provisionally I

170
00:07:09,740 --> 00:07:13,668
don't know if it's a good idea or a bad

171
00:07:10,908 --> 00:07:15,110
idea but you know everything's just kind

172
00:07:13,668 --> 00:07:16,728
of drawing in a random order now so we

173
00:07:15,110 --> 00:07:18,949
can't even see sort orders and stuff

174
00:07:16,728 --> 00:07:21,258
like that so maybe what we will have to

175
00:07:18,949 --> 00:07:23,449
do now is is actually go in there and do

176
00:07:21,259 --> 00:07:24,919
a little preparation for next week where

177
00:07:23,449 --> 00:07:27,650
we're actually putting things into some

178
00:07:24,918 --> 00:07:29,839
sort of a render list you know so that

179
00:07:27,649 --> 00:07:31,879
we can sort them and do other stuff like

180
00:07:29,839 --> 00:07:35,060
that because we may be in a situation

181
00:07:31,879 --> 00:07:36,620
where we can't really do anything more

182
00:07:35,060 --> 00:07:39,439
logically you know we can't we can't

183
00:07:36,620 --> 00:07:41,418
really do anything even just as test

184
00:07:39,439 --> 00:07:43,519
code without having it so that we can at

185
00:07:41,418 --> 00:07:46,519
least sort things in the renderer to

186
00:07:43,519 --> 00:07:49,339
some degree we are we're getting there's

187
00:07:46,519 --> 00:07:51,528
a texture seam down there and I assume

188
00:07:49,339 --> 00:07:55,269
that that's just the two different

189
00:07:51,528 --> 00:07:57,439
levels being on top of each other yeah

190
00:07:55,269 --> 00:07:59,959
you know we've got another problem too

191
00:07:57,439 --> 00:08:01,339
that we're gonna have to face it's it's

192
00:07:59,959 --> 00:08:02,658
a lot of this stuff is just order

193
00:08:01,339 --> 00:08:05,810
dependencies and I'm not sure exactly

194
00:08:02,658 --> 00:08:07,699
what we should do to break them but like

195
00:08:05,810 --> 00:08:09,500
if we've got multiple levels of ground

196
00:08:07,699 --> 00:08:11,629
one problem that we have is we don't

197
00:08:09,500 --> 00:08:14,418
have any way to scale bitmaps at the

198
00:08:11,629 --> 00:08:15,949
moment right and so without any way to

199
00:08:14,418 --> 00:08:18,799
really scale bitmaps it's going to be

200
00:08:15,949 --> 00:08:21,259
hard for us to do anything in terms of

201
00:08:18,800 --> 00:08:21,750
you know when things get smaller and

202
00:08:21,259 --> 00:08:23,850
we're

203
00:08:21,750 --> 00:08:25,980
on different height levels so you know

204
00:08:23,850 --> 00:08:28,740
what we may have to do as well is do

205
00:08:25,980 --> 00:08:30,210
something like where we are we go back

206
00:08:28,740 --> 00:08:32,279
to pure orthographic just for a little

207
00:08:30,209 --> 00:08:33,750
while so that when we draw things on top

208
00:08:32,279 --> 00:08:35,309
of each other they're still the same

209
00:08:33,750 --> 00:08:38,330
size we don't make them smaller when

210
00:08:35,309 --> 00:08:40,468
they when they recede but I'm not sure

211
00:08:38,330 --> 00:08:41,639
again this will be fixed once we have an

212
00:08:40,469 --> 00:08:48,480
actual render but I just don't know the

213
00:08:41,639 --> 00:08:50,159
order to do those in so all right so

214
00:08:48,480 --> 00:08:53,539
yeah let's take a look at the to do list

215
00:08:50,159 --> 00:08:55,980
briefly and see what's going on here

216
00:08:53,539 --> 00:08:58,230
we've got our Z stuff we've got

217
00:08:55,980 --> 00:09:01,259
collision detection I've got multiple

218
00:08:58,230 --> 00:09:03,509
sim regions per frame and debug code

219
00:09:01,259 --> 00:09:06,689
asks the streaming audio meta games yeah

220
00:09:03,509 --> 00:09:08,460
this I'm not sure I'm really not sure

221
00:09:06,690 --> 00:09:10,050
what we should tackle we need some

222
00:09:08,460 --> 00:09:13,800
little bite-sized thing we could do

223
00:09:10,049 --> 00:09:17,789
today that would be useful and I don't

224
00:09:13,799 --> 00:09:19,409
actually know what that would be maybe

225
00:09:17,789 --> 00:09:21,480
starting to pull things out into a

226
00:09:19,409 --> 00:09:23,879
render list just is the best thing to do

227
00:09:21,480 --> 00:09:28,980
I don't know it seems like it certainly

228
00:09:23,879 --> 00:09:30,570
could be it's plausible right so maybe

229
00:09:28,980 --> 00:09:33,379
we'll just do that you know maybe that's

230
00:09:30,570 --> 00:09:37,110
what we'll do so let's let's start it

231
00:09:33,379 --> 00:09:40,980
let's do let's do a handmade render

232
00:09:37,110 --> 00:09:42,690
group or something like this let's let's

233
00:09:40,980 --> 00:09:43,950
go ahead and just start shunting things

234
00:09:42,690 --> 00:09:46,140
out here because we've got a bunch of

235
00:09:43,950 --> 00:09:48,600
code that does rendering and let's let's

236
00:09:46,139 --> 00:09:50,669
try to start unpacking it into something

237
00:09:48,600 --> 00:09:54,269
useful that just seems like it seems

238
00:09:50,669 --> 00:09:58,319
like the smartest thing I guess all

239
00:09:54,269 --> 00:10:01,679
right so what we need to start doing in

240
00:09:58,320 --> 00:10:03,780
terms of rendering stuff is we need to

241
00:10:01,679 --> 00:10:05,370
start buffering things up somehow so

242
00:10:03,779 --> 00:10:07,769
that we can sort them right at the very

243
00:10:05,370 --> 00:10:09,120
least not to mention the fact that we we

244
00:10:07,769 --> 00:10:10,679
have other things that we'd probably

245
00:10:09,120 --> 00:10:12,419
like to do during that buffering like

246
00:10:10,679 --> 00:10:14,579
doing the translation of the coordinate

247
00:10:12,419 --> 00:10:17,250
systems meters to pixels and why and all

248
00:10:14,580 --> 00:10:18,839
that stuff being flipped in other things

249
00:10:17,250 --> 00:10:20,669
like that we really don't want the game

250
00:10:18,839 --> 00:10:22,620
code thinking about those things we want

251
00:10:20,669 --> 00:10:24,899
the game code code to just work in world

252
00:10:22,620 --> 00:10:26,279
units all the time as much as it can and

253
00:10:24,899 --> 00:10:28,139
and we want the renderer to just take

254
00:10:26,279 --> 00:10:30,449
care of stuff that has to do with

255
00:10:28,139 --> 00:10:31,919
rendering so that if you change out the

256
00:10:30,450 --> 00:10:33,209
renderer or how it's being rendered or

257
00:10:31,919 --> 00:10:34,500
changed the resolution or do all those

258
00:10:33,208 --> 00:10:36,989
sorts of things

259
00:10:34,500 --> 00:10:38,580
we really don't want that to infect the

260
00:10:36,990 --> 00:10:40,680
game code right we want the game code to

261
00:10:38,580 --> 00:10:43,259
be able to work in some canonical set of

262
00:10:40,679 --> 00:10:45,779
Units in a canonical way and have it

263
00:10:43,259 --> 00:10:47,129
just put out what it needs to be

264
00:10:45,779 --> 00:10:48,990
rendered and then the renderer can take

265
00:10:47,129 --> 00:10:51,899
care of sort of all of that fussing

266
00:10:48,990 --> 00:10:54,600
right all the fussing that has to go on

267
00:10:51,899 --> 00:10:57,049
in there and so if we take a look we've

268
00:10:54,600 --> 00:11:00,740
already kind of got some of this right

269
00:10:57,049 --> 00:11:02,729
we've already got this this sort of

270
00:11:00,740 --> 00:11:05,639
buffering that's going on here where

271
00:11:02,730 --> 00:11:07,889
we've got piece groups right so we've

272
00:11:05,639 --> 00:11:11,220
got entity visible piece group and those

273
00:11:07,889 --> 00:11:13,350
piece groups get pushed right and you

274
00:11:11,220 --> 00:11:15,509
know they they get built up and then at

275
00:11:13,350 --> 00:11:16,320
the end after the the things all get

276
00:11:15,509 --> 00:11:19,620
pushed on there

277
00:11:16,320 --> 00:11:21,240
there's a there's sort of like an event

278
00:11:19,620 --> 00:11:22,980
that happens down here where they

279
00:11:21,240 --> 00:11:25,740
actually get rendered and so what we

280
00:11:22,980 --> 00:11:28,350
could do instead of what we're doing now

281
00:11:25,740 --> 00:11:31,110
is just pull that piece group concept

282
00:11:28,350 --> 00:11:34,350
out and make that actually just record

283
00:11:31,110 --> 00:11:35,940
all the pieces right so that it just

284
00:11:34,350 --> 00:11:37,649
does all the pieces and then draws all

285
00:11:35,940 --> 00:11:39,630
the pieces so we're kind of like almost

286
00:11:37,649 --> 00:11:41,639
there already right if we just kind of

287
00:11:39,629 --> 00:11:43,350
when it took it a little further so

288
00:11:41,639 --> 00:11:47,129
maybe that's what we'll start with okay

289
00:11:43,350 --> 00:11:49,560
so I'm gonna say that we're gonna go

290
00:11:47,129 --> 00:11:51,240
ahead and just pull out one of these end

291
00:11:49,559 --> 00:11:54,000
of the entity visible piece group things

292
00:11:51,240 --> 00:11:55,350
right so I'm gonna pull that out here

293
00:11:54,000 --> 00:11:59,309
and we're going to start fussing with

294
00:11:55,350 --> 00:12:04,670
that as you know as basically a render

295
00:11:59,309 --> 00:12:08,279
thing so let's see empty visible piece

296
00:12:04,669 --> 00:12:09,899
where is the piece group there it is

297
00:12:08,279 --> 00:12:11,549
this is just a part of the render push

298
00:12:09,899 --> 00:12:13,039
buffer hey look we have it to do that

299
00:12:11,549 --> 00:12:15,899
says this is exactly what we should do

300
00:12:13,039 --> 00:12:16,799
and you know what I agree with that so

301
00:12:15,899 --> 00:12:21,329
I'm going to go ahead and pull that out

302
00:12:16,799 --> 00:12:23,129
there and I'm going to include this as

303
00:12:21,330 --> 00:12:25,500
we have included our other things so I'm

304
00:12:23,129 --> 00:12:29,610
gonna say all right we've got ham eh

305
00:12:25,500 --> 00:12:34,500
we've got handmade render oops and made

306
00:12:29,610 --> 00:12:40,730
render group H and we've got a handmade

307
00:12:34,500 --> 00:12:40,730
render group dot CPP so

308
00:12:41,080 --> 00:12:46,450
let's go ahead and compile this and I

309
00:12:44,620 --> 00:12:49,950
should actually make one of those there

310
00:12:46,450 --> 00:12:53,350
we go so hmm

311
00:12:49,950 --> 00:12:55,570
all I'm gonna do at first is try to

312
00:12:53,350 --> 00:12:57,310
expand that notion of the piece group

313
00:12:55,570 --> 00:12:59,860
there I'm not even gonna change the name

314
00:12:57,309 --> 00:13:02,500
yet I'm literally just gonna try to make

315
00:12:59,860 --> 00:13:05,709
it so that it doesn't get zeroed out it

316
00:13:02,500 --> 00:13:07,328
just tracks everything right and in

317
00:13:05,708 --> 00:13:09,819
order to do that we obviously have a

318
00:13:07,328 --> 00:13:12,399
problem and that problem is the piece

319
00:13:09,820 --> 00:13:15,040
count here is going to be way too low

320
00:13:12,399 --> 00:13:17,589
for all the things that we actually need

321
00:13:15,039 --> 00:13:19,449
to render now what I could do up you

322
00:13:17,589 --> 00:13:21,519
know at first is I could just make it

323
00:13:19,450 --> 00:13:23,980
not be too low right I could just say oh

324
00:13:21,519 --> 00:13:28,149
you know it's giant and so maybe that's

325
00:13:23,980 --> 00:13:30,070
what we'll do at first and and we'll see

326
00:13:28,149 --> 00:13:34,208
how that goes so if I go ahead and take

327
00:13:30,070 --> 00:13:35,860
this excuse me and I go ahead and take

328
00:13:34,208 --> 00:13:38,949
this out of a loop and say all right

329
00:13:35,860 --> 00:13:41,259
we've got a piece group here I will get

330
00:13:38,950 --> 00:13:43,778
that out of the transient arena right

331
00:13:41,259 --> 00:13:46,870
I'll just say okay let's let's get one

332
00:13:43,778 --> 00:13:49,838
of those I call them mandalas in my in

333
00:13:46,870 --> 00:13:51,250
my main code base nobody uses that term

334
00:13:49,839 --> 00:13:54,970
so I used to Reena on the screen but

335
00:13:51,250 --> 00:13:57,399
okay so what I actually want is this so

336
00:13:54,970 --> 00:14:02,889
the transient arena what I want to do

337
00:13:57,399 --> 00:14:06,639
here is I want to to push one of these

338
00:14:02,889 --> 00:14:08,169
entity visible groups on there so now

339
00:14:06,639 --> 00:14:10,419
we're actually getting it in sort of

340
00:14:08,169 --> 00:14:11,860
that inside this temporary memory region

341
00:14:10,419 --> 00:14:13,149
so eat a lot of mat if they get flushed

342
00:14:11,860 --> 00:14:15,310
for us we don't really have to do

343
00:14:13,149 --> 00:14:17,528
anything special there right and then

344
00:14:15,309 --> 00:14:19,838
I'm going to compile it we're gonna get

345
00:14:17,528 --> 00:14:22,509
that back as a pointer so the piece

346
00:14:19,839 --> 00:14:24,910
group here now is actually going to be

347
00:14:22,509 --> 00:14:26,049
in directed and that's actually kind of

348
00:14:24,909 --> 00:14:27,969
nice because it means we don't have to

349
00:14:26,049 --> 00:14:30,609
take the address of it everywhere right

350
00:14:27,970 --> 00:14:32,379
so that just works like this and so on

351
00:14:30,610 --> 00:14:33,970
and then we're gonna have to do one more

352
00:14:32,379 --> 00:14:35,889
thing right which is actually kind of

353
00:14:33,970 --> 00:14:38,320
going to be a little complicated but it

354
00:14:35,889 --> 00:14:40,269
sets us up for what we need to do so

355
00:14:38,320 --> 00:14:43,778
it's all good

356
00:14:40,269 --> 00:14:45,970
and that is that the actual rendering

357
00:14:43,778 --> 00:14:47,850
now if I were to move that outside so

358
00:14:45,970 --> 00:14:50,230
you know let's say I move that out here

359
00:14:47,850 --> 00:14:51,759
you can kind of see that we have this

360
00:14:50,230 --> 00:14:53,170
loop over all the entities so we're

361
00:14:51,759 --> 00:14:54,429
pushing them all into this into the

362
00:14:53,169 --> 00:14:57,549
piece group

363
00:14:54,429 --> 00:14:59,289
if I do this now after when I loop over

364
00:14:57,549 --> 00:15:00,729
all of those pieces we have a problem

365
00:14:59,289 --> 00:15:03,250
which is that and you can actually just

366
00:15:00,730 --> 00:15:09,250
see from the compile error you can

367
00:15:03,250 --> 00:15:13,120
actually see that when we use me what is

368
00:15:09,250 --> 00:15:16,539
that I'm sorry yeah or maybe not from

369
00:15:13,120 --> 00:15:18,278
the compile error okay nevermind it

370
00:15:16,539 --> 00:15:21,789
would be nice if this were scoped inside

371
00:15:18,278 --> 00:15:24,039
here to say the least but unfortunately

372
00:15:21,789 --> 00:15:25,360
it isn't I guess we could do that in a

373
00:15:24,039 --> 00:15:28,899
way that the compiler would probably be

374
00:15:25,360 --> 00:15:30,610
okay with we do something like this if

375
00:15:28,899 --> 00:15:32,860
that makes sense where we're just going

376
00:15:30,610 --> 00:15:34,659
through and actually referencing at each

377
00:15:32,860 --> 00:15:37,750
time but yeah what are you gonna do

378
00:15:34,659 --> 00:15:39,969
alright what I was trying to say is this

379
00:15:37,750 --> 00:15:42,159
right here where we get an entity ground

380
00:15:39,970 --> 00:15:44,649
point in order to base off where all the

381
00:15:42,159 --> 00:15:47,649
pieces are supposed to go that's a

382
00:15:44,649 --> 00:15:49,929
problem right because now all the pieces

383
00:15:47,649 --> 00:15:51,730
are in one giant buffer so we've kind of

384
00:15:49,929 --> 00:15:53,049
we've we've taken all of the pieces that

385
00:15:51,730 --> 00:15:54,850
we want to render we've put them in a

386
00:15:53,049 --> 00:15:57,039
giant buffer and now we have no idea

387
00:15:54,850 --> 00:16:00,100
which one goes with which entity right

388
00:15:57,039 --> 00:16:03,370
so we need some way of knowing for a

389
00:16:00,100 --> 00:16:05,649
given piece what is its basis like what

390
00:16:03,370 --> 00:16:08,370
where was it supposed to be relative to

391
00:16:05,649 --> 00:16:12,159
right and so what I'm going to introduce

392
00:16:08,370 --> 00:16:13,779
on top of this for now and you know I'm

393
00:16:12,159 --> 00:16:15,179
not totally sure that's exactly how we

394
00:16:13,779 --> 00:16:20,079
want to do it but it's something similar

395
00:16:15,179 --> 00:16:22,329
I'm gonna introduce a basis here for our

396
00:16:20,080 --> 00:16:25,810
piece groups right so I'm just going to

397
00:16:22,330 --> 00:16:28,570
call this a render basis for now and

398
00:16:25,809 --> 00:16:32,979
what this is is this is going to be some

399
00:16:28,570 --> 00:16:34,930
thing off of which other people can you

400
00:16:32,980 --> 00:16:37,149
know can reference their coordinate

401
00:16:34,929 --> 00:16:38,649
system right so you know like we were

402
00:16:37,149 --> 00:16:40,569
saying here we were saying we want that

403
00:16:38,649 --> 00:16:41,769
entity base P and the reason that we

404
00:16:40,570 --> 00:16:43,420
didn't store that at the time was

405
00:16:41,769 --> 00:16:45,579
because we might actually move the

406
00:16:43,419 --> 00:16:47,919
entities around after we've built up

407
00:16:45,580 --> 00:16:49,420
their kind of render state which you

408
00:16:47,919 --> 00:16:51,849
know to be fair isn't necessarily

409
00:16:49,419 --> 00:16:53,979
something that we want to do in the long

410
00:16:51,850 --> 00:16:55,930
run so that may not actually persist but

411
00:16:53,980 --> 00:16:58,870
if it does we want to be able to do that

412
00:16:55,929 --> 00:17:00,669
adjustment after the fact and so doing

413
00:16:58,870 --> 00:17:01,810
that adjustment after the fact here it's

414
00:17:00,669 --> 00:17:04,119
just something I'm going to allow for

415
00:17:01,809 --> 00:17:05,889
now in the renderer and in order to do

416
00:17:04,119 --> 00:17:08,019
that we need some method of indirection

417
00:17:05,890 --> 00:17:13,330
and so what I want to do

418
00:17:08,019 --> 00:17:17,259
is I want to do something excuse me

419
00:17:13,329 --> 00:17:20,529
where are our render basis can actually

420
00:17:17,259 --> 00:17:22,390
be set sort of after after that fact so

421
00:17:20,529 --> 00:17:25,539
let's let's see how we would do that

422
00:17:22,390 --> 00:17:26,680
here so when we grab out an entity and

423
00:17:25,539 --> 00:17:29,740
we're going to actually do some

424
00:17:26,680 --> 00:17:31,480
rendering for it assuming that I guess

425
00:17:29,740 --> 00:17:32,829
we we actually know whether we push the

426
00:17:31,480 --> 00:17:34,539
bitmaps in here right where we're doing

427
00:17:32,829 --> 00:17:39,730
these push but push bitmaps that sort of

428
00:17:34,539 --> 00:17:42,369
thing what I want to do is I want say

429
00:17:39,730 --> 00:17:44,259
all right give me a render basis right

430
00:17:42,369 --> 00:17:47,859
give me some basis that these guys can

431
00:17:44,259 --> 00:17:49,660
be off of and you know set this as the

432
00:17:47,859 --> 00:17:51,549
current default basis that everything

433
00:17:49,660 --> 00:17:53,050
that we render is going to be based off

434
00:17:51,549 --> 00:17:55,690
of so maybe you know I'll do it like

435
00:17:53,049 --> 00:17:58,859
this where we do like a push basis kind

436
00:17:55,690 --> 00:18:02,019
of call on the piece group right and

437
00:17:58,859 --> 00:18:03,369
then we can set that basis later all

438
00:18:02,019 --> 00:18:05,799
these things will be relative to it

439
00:18:03,369 --> 00:18:07,419
right and then at the very end we could

440
00:18:05,799 --> 00:18:10,779
do a pop basis and maybe we don't I

441
00:18:07,420 --> 00:18:13,360
don't know if we want push and pop you

442
00:18:10,779 --> 00:18:14,950
know maybe we'll just do a you know a

443
00:18:13,359 --> 00:18:16,569
new basis or something like that so I'm

444
00:18:14,950 --> 00:18:18,160
not exactly sure how we want to do that

445
00:18:16,569 --> 00:18:20,109
well we'll sort of find to that later

446
00:18:18,160 --> 00:18:22,600
but anyway that'll give us back that

447
00:18:20,109 --> 00:18:25,899
basis and then after we do our entity

448
00:18:22,599 --> 00:18:28,750
movement right then we can go in after

449
00:18:25,900 --> 00:18:32,710
the fact and set whatever that that

450
00:18:28,750 --> 00:18:34,599
p-value was you know directly off of

451
00:18:32,710 --> 00:18:37,900
what we would have done in the past

452
00:18:34,599 --> 00:18:39,669
right so like this and so in order to

453
00:18:37,900 --> 00:18:42,190
get this out here what we need to do is

454
00:18:39,670 --> 00:18:44,350
we need to see what the piece that we

455
00:18:42,190 --> 00:18:47,110
had pushed on what its basis was and

456
00:18:44,349 --> 00:18:48,909
just grab the point that you know that

457
00:18:47,109 --> 00:18:52,119
basis point off of there so like this

458
00:18:48,910 --> 00:18:55,180
right and so all I'm really doing is

459
00:18:52,119 --> 00:18:56,799
deferring that setting till the end so

460
00:18:55,180 --> 00:18:58,720
in order to make this work rec I said

461
00:18:56,799 --> 00:19:00,609
each one of these guys each one of these

462
00:18:58,720 --> 00:19:04,480
pieces has to know what basis is

463
00:19:00,609 --> 00:19:07,179
relative to right and so and then we

464
00:19:04,480 --> 00:19:10,180
also need to know for these guys at any

465
00:19:07,180 --> 00:19:12,850
given time what the default basis

466
00:19:10,180 --> 00:19:14,980
actually is right so this way when you

467
00:19:12,849 --> 00:19:17,679
push something on one of those piece

468
00:19:14,980 --> 00:19:20,079
groups when you when you basically push

469
00:19:17,680 --> 00:19:21,308
piece groups on to the list of things to

470
00:19:20,079 --> 00:19:23,470
fill

471
00:19:21,308 --> 00:19:25,450
you each one of them like when we do

472
00:19:23,470 --> 00:19:27,339
push bitmap push rekt whatever it calls

473
00:19:25,450 --> 00:19:28,720
the push piece function what we can do

474
00:19:27,339 --> 00:19:29,439
in that push piece function just say oh

475
00:19:28,720 --> 00:19:31,690
okay

476
00:19:29,440 --> 00:19:34,210
anytime you push a piece on will just

477
00:19:31,690 --> 00:19:35,919
say that whatever the basis that's

478
00:19:34,210 --> 00:19:38,288
currently set in the piece group as the

479
00:19:35,919 --> 00:19:40,778
default basis that's the basis that'll

480
00:19:38,288 --> 00:19:45,960
actually be used right for the piece

481
00:19:40,778 --> 00:19:48,429
group you know essentially that is what

482
00:19:45,960 --> 00:19:51,220
this coordinate will be relative to

483
00:19:48,429 --> 00:19:54,220
right this would also allow us to fix

484
00:19:51,220 --> 00:19:55,808
our shadow problem there's a couple

485
00:19:54,220 --> 00:19:57,669
things we could do there too but again

486
00:19:55,808 --> 00:19:59,678
I'm just kind of doing this in sort of a

487
00:19:57,669 --> 00:20:00,820
very ad hoc fashion just to sort of play

488
00:19:59,679 --> 00:20:03,129
around with it and start to compress it

489
00:20:00,819 --> 00:20:04,599
down into something more usable I don't

490
00:20:03,128 --> 00:20:05,618
know that we'll want to do it this way

491
00:20:04,599 --> 00:20:07,298
in the past because there's some

492
00:20:05,618 --> 00:20:09,038
indirect like we don't know what our

493
00:20:07,298 --> 00:20:10,148
performance situates going to be in how

494
00:20:09,038 --> 00:20:11,740
much in Direction's gonna be a problem

495
00:20:10,148 --> 00:20:13,808
here so I'm just literally porting the

496
00:20:11,740 --> 00:20:14,919
code as we had it and then later we can

497
00:20:13,808 --> 00:20:16,240
decide whether we think that's a good

498
00:20:14,919 --> 00:20:19,330
idea or not that makes sense

499
00:20:16,240 --> 00:20:21,368
so anyway I've introduced that basis and

500
00:20:19,329 --> 00:20:23,618
now when we actually initialize that

501
00:20:21,368 --> 00:20:25,749
piece group you know at the start of

502
00:20:23,618 --> 00:20:27,788
things which is really you know now our

503
00:20:25,749 --> 00:20:30,339
kind of our renderer we need to have a

504
00:20:27,788 --> 00:20:32,980
default basis right and the default

505
00:20:30,339 --> 00:20:35,349
basis can literally just be you know

506
00:20:32,980 --> 00:20:37,839
something that doesn't actually displace

507
00:20:35,349 --> 00:20:40,028
anything right so we can say that the

508
00:20:37,839 --> 00:20:41,668
default basis is just 0 0 0 it

509
00:20:40,028 --> 00:20:44,470
essentially doesn't actually change

510
00:20:41,669 --> 00:20:45,820
anything that's going on right and then

511
00:20:44,470 --> 00:20:48,999
we just point to that so now everything

512
00:20:45,819 --> 00:20:53,288
by default is rendering there but you

513
00:20:48,999 --> 00:20:54,788
know in circumstances where in

514
00:20:53,288 --> 00:20:57,099
circumstances where we actually want to

515
00:20:54,788 --> 00:20:58,569
start changing it we can right and so we

516
00:20:57,099 --> 00:21:00,490
could also do this this way in fact we

517
00:20:58,569 --> 00:21:02,439
could do this this way for now without

518
00:21:00,490 --> 00:21:05,769
actually having to add any actual

519
00:21:02,440 --> 00:21:06,999
functionality to the the piece group

520
00:21:05,769 --> 00:21:09,038
itself although we want to get there

521
00:21:06,999 --> 00:21:10,419
eventually I can just say all right

522
00:21:09,038 --> 00:21:11,740
every time we want to make a new one of

523
00:21:10,419 --> 00:21:13,990
these we just get one out of the

524
00:21:11,740 --> 00:21:18,339
temporary memory store we go ahead and

525
00:21:13,990 --> 00:21:20,649
and set the default basis for our piece

526
00:21:18,339 --> 00:21:22,868
group to be this one so that everything

527
00:21:20,648 --> 00:21:25,118
that we push will be based on it right

528
00:21:22,868 --> 00:21:26,949
in fact yeah do it that way

529
00:21:25,118 --> 00:21:29,138
and then at the end we go ahead and set

530
00:21:26,950 --> 00:21:30,759
that basis be we come back through here

531
00:21:29,138 --> 00:21:32,740
and we pick it back up again for each

532
00:21:30,759 --> 00:21:34,089
individual piece and it's important to

533
00:21:32,740 --> 00:21:35,109
note that we never have a piece that

534
00:21:34,089 --> 00:21:36,519
doesn't have

535
00:21:35,109 --> 00:21:39,129
the easiest because we start out with

536
00:21:36,519 --> 00:21:40,899
one that's the default one right

537
00:21:39,130 --> 00:21:42,460
we don't initialize this corner - no we

538
00:21:40,898 --> 00:21:44,199
initialize it to actually a valid basis

539
00:21:42,460 --> 00:21:45,640
and that way we don't ever have to check

540
00:21:44,200 --> 00:21:49,600
to see whether a piece has a base we

541
00:21:45,640 --> 00:21:52,480
just assume that it does right so this

542
00:21:49,599 --> 00:21:54,459
now should in theory anyway render all

543
00:21:52,480 --> 00:21:57,429
of our stuff in that second in a second

544
00:21:54,460 --> 00:22:00,100
pass here right it should go ahead and

545
00:21:57,429 --> 00:22:02,500
actually give us exactly the same thing

546
00:22:00,099 --> 00:22:05,408
that we had before at least in theory or

547
00:22:02,500 --> 00:22:07,659
maybe not actually I just realized

548
00:22:05,409 --> 00:22:09,850
something we did not do this actually

549
00:22:07,659 --> 00:22:13,659
does not get cleared here which is not a

550
00:22:09,849 --> 00:22:16,480
good idea so hold on one second

551
00:22:13,659 --> 00:22:19,090
well I actually do that and then we can

552
00:22:16,480 --> 00:22:23,528
go back to what I was about to say so

553
00:22:19,089 --> 00:22:27,308
default basis gamestate piece count is

554
00:22:23,528 --> 00:22:30,788
zero there we go and so that should in

555
00:22:27,308 --> 00:22:33,638
theory work we push those bases on we

556
00:22:30,788 --> 00:22:35,740
push everything relative to them we set

557
00:22:33,638 --> 00:22:38,500
them to the correct thing we then come

558
00:22:35,740 --> 00:22:40,450
through and draw everything so let's

559
00:22:38,500 --> 00:22:43,480
let's find out let's see if that works I

560
00:22:40,450 --> 00:22:45,730
don't know if it will or not it appears

561
00:22:43,480 --> 00:22:48,190
to be the same as it was before which is

562
00:22:45,730 --> 00:22:49,480
what we want which is good and so that's

563
00:22:48,190 --> 00:22:53,139
all you know that's all pretty

564
00:22:49,480 --> 00:22:55,720
reasonable no worries there and so now

565
00:22:53,138 --> 00:22:57,189
if we wanted to we could actually sort

566
00:22:55,720 --> 00:23:00,130
the things in there as well we could

567
00:22:57,190 --> 00:23:01,419
sort the things by their Z values and

568
00:23:00,130 --> 00:23:04,059
other stuff like that so if we wanted to

569
00:23:01,419 --> 00:23:06,759
fix this like going behind trees problem

570
00:23:04,058 --> 00:23:08,678
like that we could fix that now it's not

571
00:23:06,759 --> 00:23:10,658
a good time to teach how to sort things

572
00:23:08,679 --> 00:23:13,179
so we probably won't do that right now

573
00:23:10,659 --> 00:23:15,580
but that that is something we would do

574
00:23:13,179 --> 00:23:18,580
after probably sometime soon all right

575
00:23:15,579 --> 00:23:20,048
so this allows us to essentially this

576
00:23:18,579 --> 00:23:21,759
allows us to see essentially what we're

577
00:23:20,048 --> 00:23:24,129
doing with the render what I want to do

578
00:23:21,759 --> 00:23:26,259
is actually put everything through this

579
00:23:24,130 --> 00:23:28,929
now like literally everything that there

580
00:23:26,259 --> 00:23:30,970
is just to sort of get us even closer to

581
00:23:28,929 --> 00:23:33,610
having sort of something that looks more

582
00:23:30,970 --> 00:23:35,679
like a renderer or at least the the

583
00:23:33,609 --> 00:23:37,298
skeleton of a renderer where the

584
00:23:35,679 --> 00:23:41,528
renderer would go so what I'm going to

585
00:23:37,298 --> 00:23:43,179
do is I'm going to grab isn't this to do

586
00:23:41,528 --> 00:23:45,250
actually goes down here I'm going to

587
00:23:43,179 --> 00:23:47,950
grab this piece group and I'm going to

588
00:23:45,250 --> 00:23:48,880
move the piece group up and sort of give

589
00:23:47,950 --> 00:23:52,660
it its

590
00:23:48,880 --> 00:23:56,560
of its own memory effectively so that it

591
00:23:52,660 --> 00:23:58,000
can it can operate mm-hmm and do all of

592
00:23:56,559 --> 00:24:01,179
the rendering for us

593
00:23:58,000 --> 00:24:03,819
and I suppose actually for now the

594
00:24:01,180 --> 00:24:05,620
temporary memory that we have here begin

595
00:24:03,819 --> 00:24:07,929
temporary memory I could actually

596
00:24:05,619 --> 00:24:10,679
enclose this for now in just a thin

597
00:24:07,930 --> 00:24:13,750
another one of those right so this is

598
00:24:10,680 --> 00:24:16,180
render memory and these guys are

599
00:24:13,750 --> 00:24:17,920
overlapping and so at the end what I'm

600
00:24:16,180 --> 00:24:20,140
gonna do here is I'm just going to end

601
00:24:17,920 --> 00:24:23,800
temporary temporary memory for both of

602
00:24:20,140 --> 00:24:27,070
them right so this is not what I

603
00:24:23,799 --> 00:24:28,950
actually want to do in the long run but

604
00:24:27,069 --> 00:24:31,329
it's you know it's good enough for now

605
00:24:28,950 --> 00:24:32,529
and so based I just move the piece group

606
00:24:31,329 --> 00:24:34,569
up there you can see that that doesn't

607
00:24:32,529 --> 00:24:36,819
really have any effect yet things are

608
00:24:34,569 --> 00:24:41,259
still working exactly the same way as

609
00:24:36,819 --> 00:24:43,869
they were before but now what I can do

610
00:24:41,259 --> 00:24:45,309
is start to change all of the draw calls

611
00:24:43,869 --> 00:24:47,859
that we were doing before I want to

612
00:24:45,309 --> 00:24:50,200
change them all into draw calls that

613
00:24:47,859 --> 00:24:53,019
operate off of this this piece group

614
00:24:50,200 --> 00:24:55,480
right that's what I'd like to do and so

615
00:24:53,019 --> 00:24:58,569
let's let's go ahead and just do that

616
00:24:55,480 --> 00:25:01,000
slowly so we've got push rect right and

617
00:24:58,569 --> 00:25:03,549
push rect is a thing that allows us to

618
00:25:01,000 --> 00:25:07,750
draw rectangles using the piece group

619
00:25:03,549 --> 00:25:09,940
stuff and so you know let's just

620
00:25:07,750 --> 00:25:12,569
translate this stuff I guess somewhat

621
00:25:09,940 --> 00:25:15,580
directly into the piece group although

622
00:25:12,569 --> 00:25:17,559
you know what maybe this first one I'm

623
00:25:15,579 --> 00:25:20,439
not actually certain that I I mean what

624
00:25:17,559 --> 00:25:21,789
I just said because let's actually save

625
00:25:20,440 --> 00:25:24,940
that one since that's actually kind of a

626
00:25:21,789 --> 00:25:25,960
special call this is a clear right and I

627
00:25:24,940 --> 00:25:29,170
think we might want to add that as a

628
00:25:25,960 --> 00:25:30,789
real call alright so first let's do this

629
00:25:29,170 --> 00:25:33,490
bitmap calls here these are the ground

630
00:25:30,789 --> 00:25:34,389
buffers so in order to do this if we

631
00:25:33,490 --> 00:25:38,589
were going to draw all the ground

632
00:25:34,390 --> 00:25:41,770
buffers if we turn this to a push bitmap

633
00:25:38,589 --> 00:25:45,429
call then really let's see what I have

634
00:25:41,769 --> 00:25:48,039
to do is pass an offset which we don't

635
00:25:45,430 --> 00:25:50,710
need oh I guess this actually is the

636
00:25:48,039 --> 00:25:52,539
offset sorry it's ground X ground Y

637
00:25:50,710 --> 00:25:54,039
would be our offset in fact I guess I

638
00:25:52,539 --> 00:25:56,170
don't need to pass it as an X Y I can

639
00:25:54,039 --> 00:25:58,480
just pass it like so as it actually

640
00:25:56,170 --> 00:26:01,210
already is a vector right and then

641
00:25:58,480 --> 00:26:02,319
alignment this a push bitmap call this

642
00:26:01,210 --> 00:26:06,000
was aligned

643
00:26:02,319 --> 00:26:08,918
off of just off of its own center-right

644
00:26:06,000 --> 00:26:10,569
it's it's this right here so really we

645
00:26:08,919 --> 00:26:11,740
could pass this in as if it was the

646
00:26:10,569 --> 00:26:14,678
alignment I don't know if we actually

647
00:26:11,740 --> 00:26:16,419
want to do that or not we could just say

648
00:26:14,679 --> 00:26:17,950
there's no alignment for now but if you

649
00:26:16,419 --> 00:26:20,288
know more correctly it might be to pass

650
00:26:17,950 --> 00:26:22,090
in a messy alignment and I think that's

651
00:26:20,288 --> 00:26:24,609
all we really need to do for pushing the

652
00:26:22,089 --> 00:26:29,259
bitmaps on for the ground buffers right

653
00:26:24,609 --> 00:26:32,729
or not that is not that's not what we

654
00:26:29,259 --> 00:26:34,808
wanted to see all right I take it back I

655
00:26:32,730 --> 00:26:36,308
take it back entirely that is clearly

656
00:26:34,808 --> 00:26:40,808
not the right place that we're actually

657
00:26:36,308 --> 00:26:42,038
trying to draw these from oh well you

658
00:26:40,808 --> 00:26:44,558
know what I just realized

659
00:26:42,038 --> 00:26:47,019
this is still doing all of the

660
00:26:44,558 --> 00:26:48,658
translation like the X the Y this is

661
00:26:47,019 --> 00:26:51,460
still doing all of that sort of

662
00:26:48,659 --> 00:26:52,990
inversion scaling meters to pixels doing

663
00:26:51,460 --> 00:26:54,069
all that stuff and we don't actually

664
00:26:52,990 --> 00:26:56,558
need that to happen anymore because

665
00:26:54,069 --> 00:26:58,200
that's actually happening you know in

666
00:26:56,558 --> 00:27:01,230
the actual mm-hmm

667
00:26:58,200 --> 00:27:04,929
in the actual quote unquote renderer now

668
00:27:01,230 --> 00:27:07,240
so let's take a look in there at how

669
00:27:04,929 --> 00:27:09,970
that's working so push I'm gonna copy

670
00:27:07,240 --> 00:27:12,429
these guys out so I can see them so I

671
00:27:09,970 --> 00:27:14,319
can more readily kind of look at them

672
00:27:12,429 --> 00:27:16,500
right I'm gonna take these guys I'm just

673
00:27:14,319 --> 00:27:20,319
gonna put them in here so I can see them

674
00:27:16,500 --> 00:27:23,069
let's take a look at that okay so all

675
00:27:20,319 --> 00:27:28,298
right if I look at these guys here

676
00:27:23,069 --> 00:27:30,609
looks like essentially we do some

677
00:27:28,298 --> 00:27:35,168
translations so we do translation of the

678
00:27:30,609 --> 00:27:37,689
Y we flip the Y here alignment is is

679
00:27:35,169 --> 00:27:40,059
actually not in world units it's in it's

680
00:27:37,690 --> 00:27:42,629
a bitmap unit so we this is a bunch of

681
00:27:40,058 --> 00:27:45,069
stuff that we really want to clean up so

682
00:27:42,628 --> 00:27:46,658
let's take it one step at a time but

683
00:27:45,069 --> 00:27:47,710
that's really I think that's maybe what

684
00:27:46,659 --> 00:27:49,210
I want to start doing there because

685
00:27:47,710 --> 00:27:50,259
that's that's really it's just it's

686
00:27:49,210 --> 00:27:53,710
gonna be impossible to get this stuff

687
00:27:50,259 --> 00:27:55,329
right it's so janky basically that we

688
00:27:53,710 --> 00:27:56,889
kind of want to start start thinking

689
00:27:55,329 --> 00:27:58,689
about how to regularize all of these

690
00:27:56,888 --> 00:28:00,699
sort of ad hoc rendering things push

691
00:27:58,690 --> 00:28:02,169
them down to something clean so that we

692
00:28:00,700 --> 00:28:06,250
can get kind of get rid of all that that

693
00:28:02,169 --> 00:28:07,809
craziness but yeah so if we take a look

694
00:28:06,250 --> 00:28:09,759
at this we don't need to do meters per

695
00:28:07,808 --> 00:28:11,798
pixel to pixel anymore the Delta just is

696
00:28:09,759 --> 00:28:13,829
the Delta we don't have to invert Y

697
00:28:11,798 --> 00:28:16,829
anymore so that's so just going to be

698
00:28:13,829 --> 00:28:16,829
straight

699
00:28:16,910 --> 00:28:21,110
the alignment that's in pixels we want

700
00:28:19,700 --> 00:28:23,058
that to be half the width half the

701
00:28:21,109 --> 00:28:25,219
height right and so let's go ahead and

702
00:28:23,058 --> 00:28:27,289
put that actually into the alignment

703
00:28:25,220 --> 00:28:30,710
field because we want that to be again

704
00:28:27,289 --> 00:28:35,029
done in pixels not in in pixel space not

705
00:28:30,710 --> 00:28:40,970
in in meters in meter space so there we

706
00:28:35,029 --> 00:28:42,349
go get that out there and we don't need

707
00:28:40,970 --> 00:28:43,700
to adjust for the screen Center anymore

708
00:28:42,349 --> 00:28:47,480
because that's taken care of for us as

709
00:28:43,700 --> 00:28:49,069
well so really Delta X Delta X Delta Y

710
00:28:47,480 --> 00:28:53,240
is just where the ground is which means

711
00:28:49,069 --> 00:28:55,069
essentially it's just that right so

712
00:28:53,240 --> 00:28:57,380
let's take a look at that and see where

713
00:28:55,069 --> 00:28:59,659
we're at there what is the complaint the

714
00:28:57,380 --> 00:29:02,870
complaint is those are integers that's

715
00:28:59,660 --> 00:29:11,360
true let's see cannot give our argument

716
00:29:02,869 --> 00:29:14,139
three from Veet okay it just wants the X

717
00:29:11,359 --> 00:29:14,139
Y there huh

718
00:29:14,380 --> 00:29:25,580
where was the Z so push bitmap where

719
00:29:21,200 --> 00:29:27,410
does the Z go offset Z so for some

720
00:29:25,579 --> 00:29:32,539
reason we lost our offset Z here but it

721
00:29:27,410 --> 00:29:35,660
would be that right like so however six

722
00:29:32,539 --> 00:29:37,819
from v-22 real yeah okay so that's that

723
00:29:35,660 --> 00:29:42,110
all right sorry about that that was a

724
00:29:37,819 --> 00:29:43,369
little janky there all right well we're

725
00:29:42,109 --> 00:29:45,469
not quite there yet because we're now

726
00:29:43,369 --> 00:29:48,109
drawing our tiles in the wrong places

727
00:29:45,470 --> 00:29:52,179
unfortunately because you can see that

728
00:29:48,109 --> 00:29:55,129
our seams have come back right although

729
00:29:52,179 --> 00:29:58,309
actually you know what

730
00:29:55,130 --> 00:30:00,080
that may just be the draw order because

731
00:29:58,308 --> 00:30:02,960
now we're drunk two sets in one of those

732
00:30:00,079 --> 00:30:05,299
sets is potentially Z shrunk so let me

733
00:30:02,960 --> 00:30:06,950
go ahead and do our turn off our

734
00:30:05,299 --> 00:30:11,808
stairwell against we're not really ready

735
00:30:06,950 --> 00:30:13,549
for that yet all right so okay now we're

736
00:30:11,808 --> 00:30:17,119
back to something we know is actually

737
00:30:13,549 --> 00:30:18,980
there so let's see so that we have

738
00:30:17,119 --> 00:30:21,349
introduced something that's not drawing

739
00:30:18,980 --> 00:30:25,009
these in the place that we actually want

740
00:30:21,349 --> 00:30:28,898
them to be drawn so why is that what

741
00:30:25,009 --> 00:30:32,599
have we done incorrectly here

742
00:30:28,898 --> 00:30:34,459
delta z let me just double check that

743
00:30:32,599 --> 00:30:37,038
delta z is not causing us problems as

744
00:30:34,460 --> 00:30:38,509
well since we don't really have a we I'm

745
00:30:37,038 --> 00:30:41,839
assuming it's not yeah because Delta Z

746
00:30:38,509 --> 00:30:44,028
should be 0 in these cases all right so

747
00:30:41,839 --> 00:30:47,898
let's figure out what we've done wrong

748
00:30:44,028 --> 00:30:49,398
here in terms of rendering let me make

749
00:30:47,898 --> 00:30:54,109
sure again that we are actually doing

750
00:30:49,398 --> 00:30:58,508
something saying with the with the Y

751
00:30:54,109 --> 00:31:01,878
values and so on so let's take a look

752
00:30:58,509 --> 00:31:05,899
we're properly doing our meters to

753
00:31:01,878 --> 00:31:09,558
pixels here and we're negating that Y

754
00:31:05,898 --> 00:31:13,579
offset which is what we want now we

755
00:31:09,558 --> 00:31:15,099
should take a look at what's going on in

756
00:31:13,579 --> 00:31:19,128
the draw code so I guess I don't

757
00:31:15,099 --> 00:31:22,538
technically know what we're doing here

758
00:31:19,128 --> 00:31:28,398
anymore since I don't actually remember

759
00:31:22,538 --> 00:31:29,808
so the basis P is not actually being

760
00:31:28,398 --> 00:31:32,778
used at all because that'll just be

761
00:31:29,808 --> 00:31:34,609
zeros right so that's not going to

762
00:31:32,778 --> 00:31:36,769
affect it the screen Center X in screen

763
00:31:34,609 --> 00:31:39,349
Center Y is what we were using before

764
00:31:36,769 --> 00:31:42,558
we've already negated the offset Y right

765
00:31:39,349 --> 00:31:47,748
that already happened and we've got that

766
00:31:42,558 --> 00:31:51,349
alignment that should be correct because

767
00:31:47,749 --> 00:31:54,379
we we did that as as half the width and

768
00:31:51,349 --> 00:31:57,980
height which is what we want the entity

769
00:31:54,378 --> 00:32:00,408
Z is still going to be 0 so that's good

770
00:31:57,980 --> 00:32:03,679
so that one affected either and the Z

771
00:32:00,409 --> 00:32:05,450
fudge the Z fudge only multiplies values

772
00:32:03,679 --> 00:32:08,119
that were already 0 right so this should

773
00:32:05,450 --> 00:32:12,470
all this should really just only amount

774
00:32:08,118 --> 00:32:15,888
to screen Center X plus the Delta X

775
00:32:12,470 --> 00:32:20,659
which is what we wanted I guess entity

776
00:32:15,888 --> 00:32:22,638
this piece entity zc x entity Z of

777
00:32:20,659 --> 00:32:27,490
course entity z is 0 so that term will

778
00:32:22,638 --> 00:32:29,839
also be not there so it looks at least

779
00:32:27,490 --> 00:32:35,339
somewhat to me if that looks like that

780
00:32:29,839 --> 00:32:43,528
should be coming out to the same values

781
00:32:35,339 --> 00:32:44,668
and I'm not sure why it isn't that looks

782
00:32:43,528 --> 00:32:47,669
like that should have been the same

783
00:32:44,669 --> 00:32:50,788
values as what we were passing to it

784
00:32:47,669 --> 00:32:53,070
originally right and so so let's take a

785
00:32:50,788 --> 00:32:56,450
look and see if there's if there's

786
00:32:53,069 --> 00:32:58,470
something I I did that was more subtle

787
00:32:56,450 --> 00:33:00,990
that makes some sense as to why it

788
00:32:58,470 --> 00:33:02,700
wasn't working so with the Delta

789
00:33:00,990 --> 00:33:05,849
subtraction we're grabbing that out

790
00:33:02,700 --> 00:33:07,440
right we've got the alignment is half

791
00:33:05,849 --> 00:33:18,058
the width and the height because we want

792
00:33:07,440 --> 00:33:20,159
to move it backwards well I'm assuming

793
00:33:18,058 --> 00:33:21,269
yet that's the alignment point so that

794
00:33:20,159 --> 00:33:23,669
doesn't need to be negative because we

795
00:33:21,269 --> 00:33:25,740
already negate it there yeah so that's a

796
00:33:23,669 --> 00:33:30,778
little unusual so what that looks to me

797
00:33:25,740 --> 00:33:34,859
like it should have been correct and I'm

798
00:33:30,778 --> 00:33:38,638
not entirely certain why it wasn't what

799
00:33:34,859 --> 00:33:39,628
I'd like to do is be able to step

800
00:33:38,638 --> 00:33:42,118
through this and look at it a little

801
00:33:39,628 --> 00:33:44,699
more carefully in order to do that I

802
00:33:42,118 --> 00:33:45,839
feel like I'd have to cut down on the

803
00:33:44,700 --> 00:33:47,580
number of things going through this list

804
00:33:45,839 --> 00:33:49,648
so I can see them although you know what

805
00:33:47,579 --> 00:33:50,849
this is the ground buffers are gonna be

806
00:33:49,648 --> 00:33:54,118
like the first thing in the list anyway

807
00:33:50,849 --> 00:33:55,558
so that that does help but let's just

808
00:33:54,118 --> 00:33:56,519
I'll take one more look at it to see if

809
00:33:55,558 --> 00:33:58,230
I guess why anything but then otherwise

810
00:33:56,519 --> 00:34:01,730
I guess we're gonna have to kind of dig

811
00:33:58,230 --> 00:34:07,618
in a little bit and see what's going on

812
00:34:01,730 --> 00:34:08,460
yeah because otherwise that looks that

813
00:34:07,618 --> 00:34:10,049
looks fine to me

814
00:34:08,460 --> 00:34:12,389
it looks like it should compute the same

815
00:34:10,050 --> 00:34:14,609
value right because screen and the

816
00:34:12,389 --> 00:34:17,010
between around point Xtreme Graham MD

817
00:34:14,608 --> 00:34:18,929
ground point x and y are gonna be screen

818
00:34:17,010 --> 00:34:21,869
Center X screen Center Y right like here

819
00:34:18,929 --> 00:34:25,139
in here and then the piece offset X Y

820
00:34:21,869 --> 00:34:28,980
X&amp;Y the piece offset Y has already been

821
00:34:25,139 --> 00:34:31,588
negated right to go in the opposite

822
00:34:28,980 --> 00:34:33,659
direction so that's already correct and

823
00:34:31,588 --> 00:34:35,250
then we should ends up passing the exact

824
00:34:33,659 --> 00:34:38,760
same stuff to draw a bitmap

825
00:34:35,250 --> 00:34:40,409
that we were passing before right and so

826
00:34:38,760 --> 00:34:41,550
there shouldn't really be there

827
00:34:40,409 --> 00:34:43,559
shouldn't be that kind of weirdness

828
00:34:41,550 --> 00:34:45,060
happening there and I'm not sure why

829
00:34:43,559 --> 00:34:47,449
there is because before we were just

830
00:34:45,059 --> 00:34:49,418
doing a draw a bitmap of

831
00:34:47,449 --> 00:34:54,469
of exactly that with this the

832
00:34:49,418 --> 00:34:58,308
displacement yeah off from the center of

833
00:34:54,469 --> 00:35:03,199
the screen so that's really odd that is

834
00:34:58,309 --> 00:35:08,180
really odd to me and I'm gonna see if

835
00:35:03,199 --> 00:35:11,659
there's something that I can easily you

836
00:35:08,179 --> 00:35:16,909
know what it's drawing the same bitmap

837
00:35:11,659 --> 00:35:18,528
everywhere why is that I feel like I've

838
00:35:16,909 --> 00:35:27,759
introduced a bug where we're always

839
00:35:18,528 --> 00:35:27,760
drawing the same bitmap what oh snap

840
00:35:28,059 --> 00:35:36,140
so that you see what happened there I

841
00:35:34,358 --> 00:35:39,199
don't know if you saw what happened

842
00:35:36,139 --> 00:35:41,000
there I'll give you I'll give you guys a

843
00:35:39,199 --> 00:35:43,788
little bit if you haven't already got it

844
00:35:41,000 --> 00:35:47,568
yet you maybe you had it before me right

845
00:35:43,789 --> 00:35:50,750
so in order to conserve on memory right

846
00:35:47,568 --> 00:35:54,440
we were just we weren't actually sending

847
00:35:50,750 --> 00:35:58,518
the whole loaded bitmap down we were

848
00:35:54,440 --> 00:36:03,349
just using one on the stack right and so

849
00:35:58,518 --> 00:36:05,899
what we wanted to do this is kind of

850
00:36:03,349 --> 00:36:07,970
funny so what we wanted to do is we want

851
00:36:05,900 --> 00:36:10,250
to defer that rendering and we were not

852
00:36:07,969 --> 00:36:14,028
saving the actual loaded bitmap itself

853
00:36:10,250 --> 00:36:16,548
we were instead doing a pointer to it

854
00:36:14,028 --> 00:36:19,358
but doing a pointer to it means that

855
00:36:16,548 --> 00:36:21,579
this trick doesn't work anymore right

856
00:36:19,358 --> 00:36:23,929
this trick doesn't work anymore because

857
00:36:21,579 --> 00:36:26,269
we don't actually have a bitmap to point

858
00:36:23,929 --> 00:36:30,379
to it's just the same stack bitmap all

859
00:36:26,268 --> 00:36:32,929
the time that we were reusing so that

860
00:36:30,380 --> 00:36:34,670
yeah that's not very helpful I wonder

861
00:36:32,929 --> 00:36:37,759
what we want to do to solve that we

862
00:36:34,670 --> 00:36:40,099
could push whole bitmaps on every time

863
00:36:37,759 --> 00:36:41,929
we render that seems wasteful so I

864
00:36:40,099 --> 00:36:43,490
wonder if maybe the smartest thing to do

865
00:36:41,929 --> 00:36:45,828
is just say alright well you know the

866
00:36:43,489 --> 00:36:49,098
number of ground buffers is relatively

867
00:36:45,829 --> 00:36:50,690
low so maybe it just was not it didn't

868
00:36:49,099 --> 00:36:52,599
make any sense for us to store that

869
00:36:50,690 --> 00:36:55,309
every time

870
00:36:52,599 --> 00:36:58,369
I'm not sure the other thing we can do

871
00:36:55,309 --> 00:37:01,699
is is use kind of a dual we could do

872
00:36:58,369 --> 00:37:03,410
something where we when we do render

873
00:37:01,699 --> 00:37:05,179
pushes we eventually have two pieces of

874
00:37:03,409 --> 00:37:09,498
information that go with it one is the

875
00:37:05,179 --> 00:37:11,838
size of the thing and one is you know is

876
00:37:09,498 --> 00:37:13,879
it's actually the sort of the the the

877
00:37:11,838 --> 00:37:15,679
pointer to the bits well I think I'll

878
00:37:13,880 --> 00:37:16,670
just go ahead I mean it was it was it

879
00:37:15,679 --> 00:37:18,559
was a silly thing to do anyway

880
00:37:16,670 --> 00:37:21,108
I think we'll go ahead and say let's

881
00:37:18,559 --> 00:37:24,559
just just put that back to being a whole

882
00:37:21,108 --> 00:37:29,449
bitmap you know why not all right so if

883
00:37:24,559 --> 00:37:32,298
we do that let's do that if we do that

884
00:37:29,449 --> 00:37:33,650
then now we don't have to do this

885
00:37:32,298 --> 00:37:36,559
anymore right we don't have to do the

886
00:37:33,650 --> 00:37:38,119
ground bitmap template thing so I'll go

887
00:37:36,559 --> 00:37:41,778
ahead and pull that out you have to do

888
00:37:38,119 --> 00:37:43,489
that right and so our ground buffers we

889
00:37:41,778 --> 00:37:46,248
can now actually just get the buffer

890
00:37:43,489 --> 00:37:52,458
that's actually off of RAM buffer itself

891
00:37:46,248 --> 00:37:55,598
like that good map so and got to take

892
00:37:52,458 --> 00:38:00,458
the address of it let's see here and

893
00:37:55,599 --> 00:38:02,449
these are now arrows so buffer is now

894
00:38:00,458 --> 00:38:04,038
changing this is all those things that

895
00:38:02,449 --> 00:38:05,568
it's so lame and see that you have to

896
00:38:04,039 --> 00:38:07,670
keep flipping between two things it

897
00:38:05,568 --> 00:38:09,498
shouldn't matter which one it is it's

898
00:38:07,670 --> 00:38:11,438
it's always lame but you have to deal

899
00:38:09,498 --> 00:38:14,659
with that anyway ground bitmap template

900
00:38:11,438 --> 00:38:17,659
is not it's not a thing you're very

901
00:38:14,659 --> 00:38:19,788
correct that it is not a thing so all we

902
00:38:17,659 --> 00:38:22,670
need to do here is just change this to

903
00:38:19,789 --> 00:38:24,890
actually be the thing that we wanted to

904
00:38:22,670 --> 00:38:28,880
use in the first place so that'll save

905
00:38:24,889 --> 00:38:32,989
the bitmap and similarly here we can

906
00:38:28,880 --> 00:38:37,059
just go ahead and and call call that out

907
00:38:32,989 --> 00:38:39,228
say alright get the ground buffer bitmap

908
00:38:37,059 --> 00:38:42,798
anyway get rid of that sort of cash in

909
00:38:39,228 --> 00:38:44,688
there entirely okay that was pretty

910
00:38:42,798 --> 00:38:48,038
funny so we actually were drawing it

911
00:38:44,688 --> 00:38:50,389
just fine I think it was just a case of

912
00:38:48,039 --> 00:38:52,309
we can't defer rendering on that

913
00:38:50,389 --> 00:38:54,288
particular thing because we didn't have

914
00:38:52,309 --> 00:38:56,298
anywhere to say where the bitmap itself

915
00:38:54,289 --> 00:38:59,049
actually was all right so let's see if

916
00:38:56,298 --> 00:38:59,048
that fixes our problem

917
00:39:00,079 --> 00:39:04,219
and it does so that's good so now

918
00:39:02,570 --> 00:39:06,410
everything is going through the deferred

919
00:39:04,219 --> 00:39:07,909
path we're building up

920
00:39:06,409 --> 00:39:10,339
well not quite everything guess we still

921
00:39:07,909 --> 00:39:14,029
have a few more things potentially to

922
00:39:10,340 --> 00:39:17,470
get rid of let's take a look here oh no

923
00:39:14,030 --> 00:39:20,330
I guess we did so really the only thing

924
00:39:17,469 --> 00:39:22,039
yeah the only thing that we're calling

925
00:39:20,329 --> 00:39:23,480
the only the only place we're calling it

926
00:39:22,039 --> 00:39:26,599
is there so we've gotten draw a

927
00:39:23,480 --> 00:39:31,490
rectangle calls those are are actually

928
00:39:26,599 --> 00:39:33,109
still occurring right but we don't have

929
00:39:31,489 --> 00:39:35,089
any more draw at that goal so all the

930
00:39:33,108 --> 00:39:37,329
drum pitfalls are going through the same

931
00:39:35,090 --> 00:39:40,700
path so that's that's pretty cool

932
00:39:37,329 --> 00:39:43,098
yeah yeah all right

933
00:39:40,699 --> 00:39:44,449
so what I would like to do here I don't

934
00:39:43,099 --> 00:39:46,220
know why we're still doing this this was

935
00:39:44,449 --> 00:39:48,409
some old test code I died that we were

936
00:39:46,219 --> 00:39:49,669
trying to draw some I don't even know

937
00:39:48,409 --> 00:39:51,108
what we were trying to draw I don't even

938
00:39:49,670 --> 00:39:53,000
remember what it was from but these are

939
00:39:51,108 --> 00:39:55,608
not actually things we actually needed

940
00:39:53,000 --> 00:39:57,199
let's get rid of those so what we would

941
00:39:55,608 --> 00:39:59,059
like to do now is we'd like to actually

942
00:39:57,199 --> 00:40:01,039
get rid of that other draw rectangle

943
00:39:59,059 --> 00:40:03,799
call this one right here and what this

944
00:40:01,039 --> 00:40:07,400
was was this was just a clear right and

945
00:40:03,800 --> 00:40:09,710
so what I want to do is I want to I kind

946
00:40:07,400 --> 00:40:12,500
of want to get get that in as its own

947
00:40:09,710 --> 00:40:14,929
call that makes sense and the reason

948
00:40:12,500 --> 00:40:16,940
that I want to do that is because not

949
00:40:14,929 --> 00:40:18,289
only do we want that to be its own call

950
00:40:16,940 --> 00:40:19,490
probably like clearing the buffer should

951
00:40:18,289 --> 00:40:21,170
be something the renderer knows about

952
00:40:19,489 --> 00:40:23,118
but that'll actually be our excuse to

953
00:40:21,170 --> 00:40:28,070
now turn this into more of an actual

954
00:40:23,119 --> 00:40:30,820
quote unquote rendering system or at

955
00:40:28,070 --> 00:40:33,559
least the the skeleton of one alright so

956
00:40:30,820 --> 00:40:36,320
what I want to do first of all let's

957
00:40:33,559 --> 00:40:37,309
let's stop calling this entity visible

958
00:40:36,320 --> 00:40:39,680
piece group because that doesn't

959
00:40:37,309 --> 00:40:44,570
actually make any sense let's call this

960
00:40:39,679 --> 00:40:48,500
a render droop right and now what I want

961
00:40:44,570 --> 00:40:52,940
to do is is change entity visible piece

962
00:40:48,500 --> 00:40:54,920
group to be render group like so and

963
00:40:52,940 --> 00:40:57,108
this is literally just search and

964
00:40:54,920 --> 00:40:59,019
replace right all I'm gonna do is just

965
00:40:57,108 --> 00:41:03,549
is just straight-up search for the place

966
00:40:59,019 --> 00:41:03,550
so let's see here

967
00:41:06,219 --> 00:41:11,179
all right so search and replace a lot of

968
00:41:09,349 --> 00:41:12,590
fun for the whole family we have search

969
00:41:11,179 --> 00:41:17,719
and replace we now have a render group

970
00:41:12,590 --> 00:41:21,500
and this is actually for now I think

971
00:41:17,719 --> 00:41:27,039
what I'm gonna mmm I'm not sure exactly

972
00:41:21,500 --> 00:41:31,400
how I want to do this it's hard to say

973
00:41:27,039 --> 00:41:33,889
I'm thinking it through but what I would

974
00:41:31,400 --> 00:41:34,849
like to do is I would like to extend

975
00:41:33,889 --> 00:41:37,098
this notion so that you can have

976
00:41:34,849 --> 00:41:38,240
multiple things pushed on to this render

977
00:41:37,099 --> 00:41:41,359
stack and I don't know whether I want

978
00:41:38,239 --> 00:41:43,489
them to be fixed size with not the thing

979
00:41:41,358 --> 00:41:50,630
is to know how far to skip to the next

980
00:41:43,489 --> 00:41:52,368
one all right here's what we're gonna do

981
00:41:50,630 --> 00:41:55,070
I'm just going to do it this way for now

982
00:41:52,369 --> 00:41:58,369
and we'll see whether we like it or not

983
00:41:55,070 --> 00:41:59,780
alright so what I'm gonna do is I'm

984
00:41:58,369 --> 00:42:01,730
gonna say that the render group no

985
00:41:59,780 --> 00:42:02,990
longer has this kind of weird thing

986
00:42:01,730 --> 00:42:05,599
where it's just got some number of

987
00:42:02,989 --> 00:42:07,909
pieces or whatever it is there right I'm

988
00:42:05,599 --> 00:42:11,780
gonna say that I'm gonna I'm gonna

989
00:42:07,909 --> 00:42:16,940
actually do this as a as a linked list I

990
00:42:11,780 --> 00:42:18,740
think I'm really torn with how I want to

991
00:42:16,940 --> 00:42:20,059
do it I really just don't know I don't

992
00:42:18,739 --> 00:42:26,269
really want to be a linked list I kind

993
00:42:20,059 --> 00:42:29,088
of want it to be a packed set all right

994
00:42:26,269 --> 00:42:31,250
no I changed my mind again I'm I'm I'm

995
00:42:29,088 --> 00:42:33,380
wildly in my head there's all these like

996
00:42:31,250 --> 00:42:35,420
voices saying which one that maybe we

997
00:42:33,380 --> 00:42:36,829
should start with and when that happens

998
00:42:35,420 --> 00:42:38,450
it's best to just pick one go and then

999
00:42:36,829 --> 00:42:39,650
you see where you end up because it

1000
00:42:38,449 --> 00:42:41,239
usually means that there's no perfect

1001
00:42:39,650 --> 00:42:43,430
decisions but anyway

1002
00:42:41,239 --> 00:42:44,598
here's what I'm actually gonna do I'm

1003
00:42:43,429 --> 00:42:48,500
gonna say that we've got some memory

1004
00:42:44,599 --> 00:42:50,930
right and that memory is is the push

1005
00:42:48,500 --> 00:42:53,119
buffer right and the phrase push buffer

1006
00:42:50,929 --> 00:42:54,440
is usually used in rendering to refer to

1007
00:42:53,119 --> 00:42:56,720
a buffer that you just push things on

1008
00:42:54,440 --> 00:42:58,220
right and so what we're gonna do is

1009
00:42:56,719 --> 00:43:00,139
we're gonna you've already kind of seen

1010
00:42:58,219 --> 00:43:02,059
it happening right we just organically

1011
00:43:00,139 --> 00:43:03,440
created it which is we were kind of

1012
00:43:02,059 --> 00:43:04,699
putting these visible pieces these

1013
00:43:03,440 --> 00:43:06,470
entity visible pieces we're kind of

1014
00:43:04,699 --> 00:43:08,299
putting them onto this buffer and then

1015
00:43:06,469 --> 00:43:09,289
we're drawing them all right and then

1016
00:43:08,300 --> 00:43:10,730
when we're done drawing them all we just

1017
00:43:09,289 --> 00:43:13,550
throw the whole thing away it's a song

1018
00:43:10,730 --> 00:43:14,960
right goodbye and so what I'd like to do

1019
00:43:13,550 --> 00:43:16,280
is extend that notion to say oK we've

1020
00:43:14,960 --> 00:43:18,320
got a push buffer that

1021
00:43:16,280 --> 00:43:21,740
which buffer is now just gonna be some

1022
00:43:18,320 --> 00:43:23,120
chunk of memory and we use up that chunk

1023
00:43:21,739 --> 00:43:24,829
of memory and then we would go back and

1024
00:43:23,119 --> 00:43:28,460
retire it in order or we do other fancy

1025
00:43:24,829 --> 00:43:29,659
things who knows right but I'm just

1026
00:43:28,460 --> 00:43:31,429
gonna extend that counselor to say okay

1027
00:43:29,659 --> 00:43:33,619
we now we don't have that we actually

1028
00:43:31,429 --> 00:43:36,769
have some kind of arbitrary memory in

1029
00:43:33,619 --> 00:43:39,319
there and when you do a push piece call

1030
00:43:36,769 --> 00:43:41,449
you actually push a certain size on to

1031
00:43:39,320 --> 00:43:44,539
that push buffer so it's gonna I'm gonna

1032
00:43:41,449 --> 00:43:46,519
do something like push buffer size here

1033
00:43:44,539 --> 00:43:48,349
like how big it is and I'm gonna do

1034
00:43:46,519 --> 00:43:53,690
another thing here which is like max

1035
00:43:48,349 --> 00:43:55,849
push buffer size right and then I'm

1036
00:43:53,690 --> 00:43:58,039
gonna actually introduce I know you've

1037
00:43:55,849 --> 00:43:59,480
only seen this once or twice for me it's

1038
00:43:58,039 --> 00:44:00,889
it's scary I'm actually gonna do

1039
00:43:59,480 --> 00:44:05,440
something that actually just creates one

1040
00:44:00,889 --> 00:44:07,639
of these like allocate render grib right

1041
00:44:05,440 --> 00:44:10,429
you've seen me do this maybe once or

1042
00:44:07,639 --> 00:44:11,599
twice before I know it's rare but you're

1043
00:44:10,429 --> 00:44:13,819
gonna do allocate render group and

1044
00:44:11,599 --> 00:44:15,829
that's gonna pass in whatever that max

1045
00:44:13,820 --> 00:44:16,820
push buffer size is right and what this

1046
00:44:15,829 --> 00:44:18,710
is responsible doing is this is

1047
00:44:16,820 --> 00:44:19,700
basically responsible for getting us one

1048
00:44:18,710 --> 00:44:23,329
of these buffers that we're going to

1049
00:44:19,699 --> 00:44:24,529
work with right and and so obviously

1050
00:44:23,329 --> 00:44:27,860
that's going to need to be able to get

1051
00:44:24,530 --> 00:44:29,450
it from somewhere and the place that

1052
00:44:27,860 --> 00:44:31,910
that's gonna get it from is gonna be one

1053
00:44:29,449 --> 00:44:36,259
of our memory arenas right so that's

1054
00:44:31,909 --> 00:44:38,899
going to take a memory arena to get it

1055
00:44:36,260 --> 00:44:41,840
from and what's gonna happen here is

1056
00:44:38,900 --> 00:44:44,420
this going to push space for itself on

1057
00:44:41,840 --> 00:44:48,410
to the arena and then it's also going to

1058
00:44:44,420 --> 00:44:50,900
push space for the push buffer rank so

1059
00:44:48,409 --> 00:44:54,559
it's gonna do a push size after that and

1060
00:44:50,900 --> 00:44:56,660
the push size call is well you know what

1061
00:44:54,559 --> 00:45:00,230
to do we actually even have a push last

1062
00:44:56,659 --> 00:45:01,759
call we don't really we don't really

1063
00:45:00,230 --> 00:45:08,329
have one let me see here

1064
00:45:01,760 --> 00:45:10,010
push size EP so that's the only place it

1065
00:45:08,329 --> 00:45:14,630
actually gets used so I'm gonna change

1066
00:45:10,010 --> 00:45:17,090
that the bat okay okay so we've got to

1067
00:45:14,630 --> 00:45:18,860
push size call now in theory I will

1068
00:45:17,090 --> 00:45:20,300
implement one it's not really

1069
00:45:18,860 --> 00:45:21,950
implementing a push size so that Bob is

1070
00:45:20,300 --> 00:45:23,360
typing in right now really all I'm

1071
00:45:21,949 --> 00:45:25,579
talking about it's making us a macro

1072
00:45:23,360 --> 00:45:27,440
right and the reason I'm making this a

1073
00:45:25,579 --> 00:45:29,210
macro is for debugging reasons that

1074
00:45:27,440 --> 00:45:29,869
we'll see later I'd like things that

1075
00:45:29,210 --> 00:45:34,059
work with the

1076
00:45:29,869 --> 00:45:36,710
I would like them all to go through a

1077
00:45:34,059 --> 00:45:38,119
macro I don't want anything that calls

1078
00:45:36,710 --> 00:45:39,320
the allocator going directly through a

1079
00:45:38,119 --> 00:45:41,659
function call so I just wanted to nip

1080
00:45:39,320 --> 00:45:43,400
that in the bud all right so we want the

1081
00:45:41,659 --> 00:45:47,269
max push buffer size to get allocated

1082
00:45:43,400 --> 00:45:50,680
here and I want to store that in that

1083
00:45:47,269 --> 00:45:55,009
that push buffer base pointer like so

1084
00:45:50,679 --> 00:45:56,690
and yeah that's basically it

1085
00:45:55,010 --> 00:46:01,430
I'm going to initialize all of the

1086
00:45:56,690 --> 00:46:03,619
fields of this render group and and I'm

1087
00:46:01,429 --> 00:46:04,190
gonna do it exactly the way that we were

1088
00:46:03,619 --> 00:46:06,079
doing it again

1089
00:46:04,190 --> 00:46:07,460
this is really just again more of that

1090
00:46:06,079 --> 00:46:10,250
sort of compression oriented approach

1091
00:46:07,460 --> 00:46:11,750
that you know I like to take I'm going

1092
00:46:10,250 --> 00:46:14,750
to essentially pull out what we were

1093
00:46:11,750 --> 00:46:17,570
already doing this whole stuff here I'm

1094
00:46:14,750 --> 00:46:22,760
just gonna do that in here and I'm gonna

1095
00:46:17,570 --> 00:46:24,080
call this render group thing like so I'm

1096
00:46:22,760 --> 00:46:27,950
gonna call allocate render group right

1097
00:46:24,079 --> 00:46:30,440
here and that's gonna come out of the

1098
00:46:27,949 --> 00:46:32,689
transient arena and I don't know how big

1099
00:46:30,440 --> 00:46:35,200
our push buffer is gonna be I'm gonna

1100
00:46:32,690 --> 00:46:36,920
say that I push buffer is going to be

1101
00:46:35,199 --> 00:46:39,769
four megabytes

1102
00:46:36,920 --> 00:46:40,159
I have no rhyme or reason for that at

1103
00:46:39,769 --> 00:46:46,880
all

1104
00:46:40,159 --> 00:46:53,779
totally random to do KC decide what our

1105
00:46:46,880 --> 00:46:55,340
push buffer size is right so yeah so

1106
00:46:53,780 --> 00:46:59,990
when we go in here now we're actually

1107
00:46:55,340 --> 00:47:02,210
doing mm initialization and a little bit

1108
00:46:59,989 --> 00:47:04,819
slightly more formal fashion I want the

1109
00:47:02,210 --> 00:47:08,030
default basis I would like that default

1110
00:47:04,820 --> 00:47:10,670
basis to actually get allocated as well

1111
00:47:08,030 --> 00:47:13,580
right so I'm gonna push that on here

1112
00:47:10,670 --> 00:47:17,389
push that that render basis struct right

1113
00:47:13,579 --> 00:47:23,090
and then I'm going to initialize it like

1114
00:47:17,389 --> 00:47:24,679
so right we've got the game state so

1115
00:47:23,090 --> 00:47:26,390
we're gonna need that to be passed in

1116
00:47:24,679 --> 00:47:28,039
here although to be honest with you I

1117
00:47:26,389 --> 00:47:30,739
don't know why it even needs the game

1118
00:47:28,039 --> 00:47:33,050
state I don't remember so I'm assuming

1119
00:47:30,739 --> 00:47:36,879
that game state was used in here oh it's

1120
00:47:33,050 --> 00:47:39,710
4 meters 2 pixels is that true

1121
00:47:36,880 --> 00:47:41,660
is there any other use for it no it's

1122
00:47:39,710 --> 00:47:43,338
just music so I'm not gonna store the

1123
00:47:41,659 --> 00:47:46,518
gamestate instead what I'm gonna store

1124
00:47:43,338 --> 00:47:48,528
is meters to pixels for now and that's

1125
00:47:46,518 --> 00:47:50,778
because I would like to get this into a

1126
00:47:48,528 --> 00:47:52,759
state where it's clearer sort of where

1127
00:47:50,778 --> 00:47:54,858
these like translations and stuff are

1128
00:47:52,759 --> 00:47:56,509
happening so that's what I'd like to do

1129
00:47:54,858 --> 00:47:59,420
so that we're not accessing the game

1130
00:47:56,509 --> 00:48:01,039
state and so meters to pixels is

1131
00:47:59,420 --> 00:48:04,338
actually gonna be in here temporarily

1132
00:48:01,039 --> 00:48:05,028
that's probably going to go away in a

1133
00:48:04,338 --> 00:48:10,159
little bit as well

1134
00:48:05,028 --> 00:48:12,469
all right so we allocate that we need to

1135
00:48:10,159 --> 00:48:14,449
receive a visa data this is piece count

1136
00:48:12,469 --> 00:48:18,199
we did that so now let's initialize

1137
00:48:14,449 --> 00:48:20,449
these guys the push buffer size is zero

1138
00:48:18,199 --> 00:48:24,078
right now the max first buffer size is

1139
00:48:20,449 --> 00:48:28,818
whatever we were told that it was and

1140
00:48:24,079 --> 00:48:38,210
now we have our renderer right piece

1141
00:48:28,818 --> 00:48:38,690
count is actually okay so now we've got

1142
00:48:38,210 --> 00:48:40,608
a problem

1143
00:48:38,690 --> 00:48:41,869
and that is that when we do push piece

1144
00:48:40,608 --> 00:48:44,480
we can't actually get one because we

1145
00:48:41,869 --> 00:48:47,180
don't have that pieces or anymore of

1146
00:48:44,480 --> 00:48:53,568
course what I should do also is is kind

1147
00:48:47,179 --> 00:48:55,159
of take a look at some of these others

1148
00:48:53,568 --> 00:48:58,038
to see what we're getting here push

1149
00:48:55,159 --> 00:49:03,068
sighs did I did I mess up the macro for

1150
00:48:58,039 --> 00:49:08,028
precise push size yes I did there we go

1151
00:49:03,068 --> 00:49:09,139
okay ignore that error for now push

1152
00:49:08,028 --> 00:49:11,838
sighs oops

1153
00:49:09,139 --> 00:49:15,739
and one more bug it's supposed to be an

1154
00:49:11,838 --> 00:49:16,460
underscore okay so let's see where we're

1155
00:49:15,739 --> 00:49:20,599
at

1156
00:49:16,460 --> 00:49:23,509
push struct piece group undeclared no

1157
00:49:20,599 --> 00:49:27,278
why don't I replaced those but evidently

1158
00:49:23,509 --> 00:49:27,278
I didn't

1159
00:49:30,500 --> 00:49:37,230
alright default basis goes push-truck

1160
00:49:35,880 --> 00:49:40,530
render basis that needs to come off the

1161
00:49:37,230 --> 00:49:41,880
arena allocate render group function

1162
00:49:40,530 --> 00:49:43,800
doesn't take two parameters you are

1163
00:49:41,880 --> 00:49:47,400
correct it takes game state meters two

1164
00:49:43,800 --> 00:49:51,480
pixels now let's see here

1165
00:49:47,400 --> 00:49:53,400
printer group pieces yes I know that

1166
00:49:51,480 --> 00:49:54,809
piece group undeclared identifier okay

1167
00:49:53,400 --> 00:50:00,260
and now we just have to change piece

1168
00:49:54,809 --> 00:50:11,730
group render group and we should be

1169
00:50:00,260 --> 00:50:14,820
pretty good yeah yeah alright so we're

1170
00:50:11,730 --> 00:50:16,380
in pretty good shape we just need to do

1171
00:50:14,820 --> 00:50:17,960
a little more work here to get our our

1172
00:50:16,380 --> 00:50:20,490
push buffer situation straightened out

1173
00:50:17,960 --> 00:50:23,460
and so I'm gonna do here is I'm gonna go

1174
00:50:20,489 --> 00:50:25,649
ahead and say in push piece what we're

1175
00:50:23,460 --> 00:50:26,909
going to do is instead of using any of

1176
00:50:25,650 --> 00:50:31,099
this stuff what we're going to do is say

1177
00:50:26,909 --> 00:50:33,119
alright assert that however big this

1178
00:50:31,099 --> 00:50:34,679
this this push piece is actually

1179
00:50:33,119 --> 00:50:36,359
potentially gonna be one of many things

1180
00:50:34,679 --> 00:50:41,549
we push on there so I'm actually gonna

1181
00:50:36,360 --> 00:50:47,160
do is is do a push size onto buffer or

1182
00:50:41,550 --> 00:50:50,820
push a know we're gonna call this push

1183
00:50:47,159 --> 00:50:57,389
on to push buffer push render I don't

1184
00:50:50,820 --> 00:50:58,740
know push render elements I'm not sure

1185
00:50:57,389 --> 00:51:02,159
don't know what that's gonna be called

1186
00:50:58,739 --> 00:51:04,829
point being we've got a thing that is

1187
00:51:02,159 --> 00:51:09,149
going to take our render group and a

1188
00:51:04,829 --> 00:51:11,489
size some size and it's going to push

1189
00:51:09,150 --> 00:51:13,590
that size on to our render group right

1190
00:51:11,489 --> 00:51:16,889
so what it's going to do is it's going

1191
00:51:13,590 --> 00:51:21,210
to say alright let's see we're gonna

1192
00:51:16,889 --> 00:51:24,989
have a result here right let's see if

1193
00:51:21,210 --> 00:51:26,909
the group can fit this thing on it so if

1194
00:51:24,989 --> 00:51:31,409
the max push buffer size plus our size

1195
00:51:26,909 --> 00:51:34,079
right if that is less than I'm sorry if

1196
00:51:31,409 --> 00:51:37,769
the current push buffer size plus our

1197
00:51:34,079 --> 00:51:39,630
size if that is less than the max buffer

1198
00:51:37,769 --> 00:51:41,880
size then we can fit the thing that we

1199
00:51:39,630 --> 00:51:44,660
want to push on to our push button

1200
00:51:41,880 --> 00:51:47,400
so that's all good and so if that's true

1201
00:51:44,659 --> 00:51:51,869
then we can go ahead and take whatever

1202
00:51:47,400 --> 00:51:55,380
part of of the memory is at that

1203
00:51:51,869 --> 00:51:57,779
location so push buffer base right plus

1204
00:51:55,380 --> 00:52:00,630
that push buffer size we can go ahead

1205
00:51:57,780 --> 00:52:03,290
and take that and make that be what the

1206
00:52:00,630 --> 00:52:06,869
result is that's the the actual place

1207
00:52:03,289 --> 00:52:10,800
that that we can write to in our push

1208
00:52:06,869 --> 00:52:11,429
buffer right and then hmm I realize I'm

1209
00:52:10,800 --> 00:52:12,690
going through this kind of quickly

1210
00:52:11,429 --> 00:52:14,549
because I wanted to kind of finish it up

1211
00:52:12,690 --> 00:52:16,079
so in the Q&amp;A I'll I'll kind of go over

1212
00:52:14,550 --> 00:52:17,070
it a little bit more so that everyone

1213
00:52:16,079 --> 00:52:19,710
knows what I'm talking about here

1214
00:52:17,070 --> 00:52:21,269
but anyway so then we're gonna just

1215
00:52:19,710 --> 00:52:24,630
increment that push buffer size by

1216
00:52:21,269 --> 00:52:27,239
whatever the size is right if we

1217
00:52:24,630 --> 00:52:31,079
couldn't get it I don't know if we have

1218
00:52:27,239 --> 00:52:32,159
invalid code paths we do awesome if we

1219
00:52:31,079 --> 00:52:33,929
couldn't get it we're gonna mark up some

1220
00:52:32,159 --> 00:52:35,940
valid code back now it's not actually

1221
00:52:33,929 --> 00:52:37,139
going to cause a crash or anything but

1222
00:52:35,940 --> 00:52:38,579
it is gonna be something that we know

1223
00:52:37,139 --> 00:52:39,839
we've overflowed the push buffer we've

1224
00:52:38,579 --> 00:52:42,690
done too much rendering and we can't

1225
00:52:39,840 --> 00:52:44,550
store anymore render commands right so

1226
00:52:42,690 --> 00:52:45,690
we want to make that be an alert that

1227
00:52:44,550 --> 00:52:48,330
that would tell the program where

1228
00:52:45,690 --> 00:52:50,070
something's gone wrong so that's our

1229
00:52:48,329 --> 00:52:52,380
push render element and so if we want to

1230
00:52:50,070 --> 00:52:55,789
get a piece here like this what we can

1231
00:52:52,380 --> 00:52:58,590
do is say you know push render element

1232
00:52:55,789 --> 00:53:00,659
instead of doing this and then we can

1233
00:52:58,590 --> 00:53:04,559
just say okay we want to take a you know

1234
00:53:00,659 --> 00:53:06,119
the size of entity visible piece and I

1235
00:53:04,559 --> 00:53:09,299
want to push it on to this group that

1236
00:53:06,119 --> 00:53:11,849
will get us one back right and that

1237
00:53:09,300 --> 00:53:13,440
should just totally work no oddness

1238
00:53:11,849 --> 00:53:15,239
going on there everyone's happy

1239
00:53:13,440 --> 00:53:16,980
everything's good and so the only thing

1240
00:53:15,239 --> 00:53:19,229
we have to do now is we just have to

1241
00:53:16,980 --> 00:53:21,420
figure out a way to actually walk those

1242
00:53:19,230 --> 00:53:23,429
pieces and since we're running out of

1243
00:53:21,420 --> 00:53:26,789
time let's kind of just stub that out

1244
00:53:23,429 --> 00:53:29,099
for now let's just say all right we're

1245
00:53:26,789 --> 00:53:33,090
gonna grab the render group push buffer

1246
00:53:29,099 --> 00:53:36,809
base we're gonna cast that you know to a

1247
00:53:33,090 --> 00:53:39,059
piece like so and what we're going to do

1248
00:53:36,809 --> 00:53:41,130
instead is we're going to say like a

1249
00:53:39,059 --> 00:53:44,250
base address right our base address of

1250
00:53:41,130 --> 00:53:47,250
zero while the base address is less than

1251
00:53:44,250 --> 00:53:50,309
the push buffer size we are going to

1252
00:53:47,250 --> 00:53:52,380
continue processing and so what we're

1253
00:53:50,309 --> 00:53:55,909
gonna do here is just say alright grab

1254
00:53:52,380 --> 00:53:59,070
out whatever the push buffer base

1255
00:53:55,909 --> 00:54:01,710
plus the base address is that's going to

1256
00:53:59,070 --> 00:54:04,410
be the the next piece and then for now

1257
00:54:01,710 --> 00:54:07,740
we'll just say increment it by the size

1258
00:54:04,409 --> 00:54:09,449
of an entity visible piece right so

1259
00:54:07,739 --> 00:54:11,759
let's do that hopefully about the work

1260
00:54:09,449 --> 00:54:13,889
it does and off we go

1261
00:54:11,760 --> 00:54:18,750
so we've just got to the point where

1262
00:54:13,889 --> 00:54:21,710
it's the QA so I will probably I will

1263
00:54:18,750 --> 00:54:26,130
probably actually start the Q&amp;A here

1264
00:54:21,710 --> 00:54:28,199
let's do that but what I'm going to do

1265
00:54:26,130 --> 00:54:29,940
before I start looking at the actual

1266
00:54:28,199 --> 00:54:31,230
questions is just quickly go over what I

1267
00:54:29,940 --> 00:54:33,599
did because I slammed it in there pretty

1268
00:54:31,230 --> 00:54:35,039
fast so let's take a little bit on the

1269
00:54:33,599 --> 00:54:38,579
whiteboard I mean on the blackboard to

1270
00:54:35,039 --> 00:54:41,519
just explain what I did there just just

1271
00:54:38,579 --> 00:54:43,739
kind of refresh things I was a little

1272
00:54:41,519 --> 00:54:47,070
manic today I admit that it was a manic

1273
00:54:43,739 --> 00:54:51,299
day things kind of went manic all right

1274
00:54:47,070 --> 00:54:54,320
so here's what happened if you recall we

1275
00:54:51,300 --> 00:54:59,190
had a thing called a piece group right

1276
00:54:54,320 --> 00:55:01,769
and a piece group was something that we

1277
00:54:59,190 --> 00:55:03,690
had we had in it sort of invented we

1278
00:55:01,769 --> 00:55:05,969
invented as a strong term we had

1279
00:55:03,690 --> 00:55:08,369
introduced a piece group because what

1280
00:55:05,969 --> 00:55:10,799
was happening was we wanted to draw

1281
00:55:08,369 --> 00:55:13,679
characters right that were multiple

1282
00:55:10,800 --> 00:55:19,410
pieces right we had the hero he's got a

1283
00:55:13,679 --> 00:55:24,119
cape he has a head he has a torso right

1284
00:55:19,409 --> 00:55:25,619
he has a shadow these were four separate

1285
00:55:24,119 --> 00:55:27,779
pieces and they were all based on the

1286
00:55:25,619 --> 00:55:29,250
same point there's a point and each one

1287
00:55:27,780 --> 00:55:31,620
of these was like offset from the point

1288
00:55:29,250 --> 00:55:33,420
in some way right but we didn't know

1289
00:55:31,619 --> 00:55:35,789
where the point was until after we'd

1290
00:55:33,420 --> 00:55:37,320
already done the after we already

1291
00:55:35,789 --> 00:55:39,809
executed the code that wanted to

1292
00:55:37,320 --> 00:55:41,100
assemble this so what we did is we

1293
00:55:39,809 --> 00:55:43,049
introduced this console of a piece group

1294
00:55:41,099 --> 00:55:45,329
which just recorded those things so what

1295
00:55:43,050 --> 00:55:48,510
it would do is it would say oh okay I've

1296
00:55:45,329 --> 00:55:51,929
got a head I've got a cape I've got a

1297
00:55:48,510 --> 00:55:53,730
torso I've got a shadow and it would

1298
00:55:51,929 --> 00:55:55,799
record these offsets so it say oh the

1299
00:55:53,730 --> 00:55:57,900
head is this offset from the point then

1300
00:55:55,800 --> 00:55:59,370
I don't know yet but at some point the

1301
00:55:57,900 --> 00:56:00,990
cape is over here are the torsos over

1302
00:55:59,369 --> 00:56:04,409
here are the shadows over here right

1303
00:56:00,989 --> 00:56:06,449
then after we were done and we knew what

1304
00:56:04,409 --> 00:56:08,129
this point was we'd feed this point into

1305
00:56:06,449 --> 00:56:08,569
this list and basically say okay using

1306
00:56:08,130 --> 00:56:10,460
this

1307
00:56:08,570 --> 00:56:13,190
we walk through the bitmaps that you

1308
00:56:10,460 --> 00:56:16,070
recorded and draw them using that basis

1309
00:56:13,190 --> 00:56:18,860
point okay that's what we had it started

1310
00:56:16,070 --> 00:56:21,200
today what I decided to do was turn this

1311
00:56:18,860 --> 00:56:24,590
into a render group which basically sets

1312
00:56:21,199 --> 00:56:26,239
us up for our renderer so all I did was

1313
00:56:24,590 --> 00:56:29,630
say let's do the exact same thing but

1314
00:56:26,239 --> 00:56:31,369
instead and I did this in steps as you

1315
00:56:29,630 --> 00:56:32,599
could see so I didn't do it too big at

1316
00:56:31,369 --> 00:56:33,619
one time and that's just again that's

1317
00:56:32,599 --> 00:56:36,259
compression rented program I'm just

1318
00:56:33,619 --> 00:56:38,210
trying to do things in a way that slowly

1319
00:56:36,260 --> 00:56:39,680
moves them towards the right solution so

1320
00:56:38,210 --> 00:56:40,970
that you can constantly see whether all

1321
00:56:39,679 --> 00:56:42,109
your decisions are right and all of your

1322
00:56:40,969 --> 00:56:43,369
pieces are working together properly

1323
00:56:42,110 --> 00:56:45,050
because it's always the

1324
00:56:43,369 --> 00:56:46,339
interconnectivity and the

1325
00:56:45,050 --> 00:56:47,630
interrelationship between things that

1326
00:56:46,340 --> 00:56:49,220
makes programming hard it's not any

1327
00:56:47,630 --> 00:56:51,050
individual piece of code individual

1328
00:56:49,219 --> 00:56:52,730
pieces of code are different they could

1329
00:56:51,050 --> 00:56:54,320
be algorithmically hard but it's a

1330
00:56:52,730 --> 00:56:58,219
separate thing it's not how code gets

1331
00:56:54,320 --> 00:56:59,809
messy right so anyway so what I wanted

1332
00:56:58,219 --> 00:57:01,609
to do here was say let's let's turn it

1333
00:56:59,809 --> 00:57:04,039
into something we're instead we've got a

1334
00:57:01,610 --> 00:57:06,890
render group which is basically a buffer

1335
00:57:04,039 --> 00:57:07,759
right that's just some memory so it's

1336
00:57:06,889 --> 00:57:09,349
just some memory we're going to set

1337
00:57:07,760 --> 00:57:10,940
aside and then we're gonna do is we're

1338
00:57:09,349 --> 00:57:12,949
gonna write things into this memory that

1339
00:57:10,940 --> 00:57:14,329
tell us what to render right and so we

1340
00:57:12,949 --> 00:57:17,000
did exactly the same thing as here so

1341
00:57:14,329 --> 00:57:18,860
the head gets read in here the Cape gets

1342
00:57:17,000 --> 00:57:22,699
written in here the torso gets written

1343
00:57:18,860 --> 00:57:25,130
in here and so on right and so we're

1344
00:57:22,699 --> 00:57:27,049
doing that already we've we've already

1345
00:57:25,130 --> 00:57:28,309
got that set up but what we haven't done

1346
00:57:27,050 --> 00:57:30,650
yet is made it so that this can be

1347
00:57:28,309 --> 00:57:32,360
heterogeneous right right now these are

1348
00:57:30,650 --> 00:57:34,430
just piece there those those visible

1349
00:57:32,360 --> 00:57:36,550
piece things right just like they were

1350
00:57:34,429 --> 00:57:38,869
back here but what we're going to do

1351
00:57:36,550 --> 00:57:39,950
maybe we'll start this on Monday is

1352
00:57:38,869 --> 00:57:41,569
we're gonna turn this into a

1353
00:57:39,949 --> 00:57:43,250
heterogeneous push buffer which means

1354
00:57:41,570 --> 00:57:44,900
that things in here can be all sorts of

1355
00:57:43,250 --> 00:57:46,489
different stuff so maybe one of them

1356
00:57:44,900 --> 00:57:47,539
says to draw a bitmap another one says

1357
00:57:46,489 --> 00:57:48,919
to draw a rectangle and we were

1358
00:57:47,539 --> 00:57:50,630
supporting that in this one as well

1359
00:57:48,920 --> 00:57:52,610
another one says to clear the screen

1360
00:57:50,630 --> 00:57:54,500
another one says to do you know whatever

1361
00:57:52,610 --> 00:57:55,940
whatever right and so this will

1362
00:57:54,500 --> 00:57:57,349
basically become our this render group

1363
00:57:55,940 --> 00:57:59,000
will be a group of commands that the

1364
00:57:57,349 --> 00:58:02,269
renderer is supposed to issue in order

1365
00:57:59,000 --> 00:58:03,980
to draw something and and again it

1366
00:58:02,269 --> 00:58:05,119
unlike before we were just doing it for

1367
00:58:03,980 --> 00:58:06,920
one character of time now we're just

1368
00:58:05,119 --> 00:58:08,480
doing everything in there and we'll

1369
00:58:06,920 --> 00:58:11,360
figure out a way to bake our sorting

1370
00:58:08,480 --> 00:58:12,769
into this as well but we haven't really

1371
00:58:11,360 --> 00:58:14,329
thought about that yet so that's all I

1372
00:58:12,769 --> 00:58:17,929
really did today it was just a bunch of

1373
00:58:14,329 --> 00:58:20,110
code sort of massaging really but that's

1374
00:58:17,929 --> 00:58:20,109
it

1375
00:58:21,579 --> 00:58:25,568
so let's see if we got any questions

1376
00:58:43,590 --> 00:58:49,480
questions if you'd like to ask a

1377
00:58:47,079 --> 00:58:52,809
question please prefix it with Q :

1378
00:58:49,480 --> 00:58:54,099
so I can see it and also please keep it

1379
00:58:52,809 --> 00:58:55,420
to stuff that we've done today stream or

1380
00:58:54,099 --> 00:58:57,279
a previous stream if you want to ask

1381
00:58:55,420 --> 00:58:59,619
off-topic questions we do that typically

1382
00:58:57,280 --> 00:59:01,000
before the stream starts so if you want

1383
00:58:59,619 --> 00:59:02,289
you to come back Monday 15 minutes

1384
00:59:01,000 --> 00:59:10,719
before starting time we're usually here

1385
00:59:02,289 --> 00:59:12,820
just hanging out chatting anyone anyone

1386
00:59:10,719 --> 00:59:17,889
is this gonna be a zero question

1387
00:59:12,820 --> 00:59:21,369
straight pro stream well things like

1388
00:59:17,889 --> 00:59:22,449
filters end up in the render group yeah

1389
00:59:21,369 --> 00:59:24,039
probably

1390
00:59:22,449 --> 00:59:25,839
basically anything that we're going to

1391
00:59:24,039 --> 00:59:30,179
do will probably end up being

1392
00:59:25,840 --> 00:59:33,550
represented in the render group because

1393
00:59:30,179 --> 00:59:34,269
yeah I didn't have a drink today I don't

1394
00:59:33,550 --> 00:59:36,700
know what I was thinking

1395
00:59:34,269 --> 00:59:39,579
I started making tea and I forgot to

1396
00:59:36,699 --> 00:59:42,699
pour it the render group will basically

1397
00:59:39,579 --> 00:59:47,019
be the thing that we hand to the actual

1398
00:59:42,699 --> 00:59:50,379
renderer and say go and so for the most

1399
00:59:47,019 --> 00:59:53,409
part everything will have to be in there

1400
00:59:50,380 --> 00:59:55,480
that's parameter izybelle so you know

1401
00:59:53,409 --> 00:59:57,489
maybe filters won't be in there because

1402
00:59:55,480 --> 00:59:59,050
filters might not be fram trusts maybe

1403
00:59:57,489 --> 01:00:02,858
they're applied the same way all the

1404
00:59:59,050 --> 01:00:05,230
time but assuming that the filters like

1405
01:00:02,858 --> 01:00:07,539
turn on and off and have different rates

1406
01:00:05,230 --> 01:00:09,369
and stuff the render group will probably

1407
01:00:07,539 --> 01:00:12,670
want to encapsulate most of that stuff

1408
01:00:09,369 --> 01:00:14,980
that we want to do filter wise in a

1409
01:00:12,670 --> 01:00:17,440
parametric way we'll have to go in there

1410
01:00:14,980 --> 01:00:18,909
because it'll get handed to OpenGL if

1411
01:00:17,440 --> 01:00:20,500
OpenGL supposed to render it it'll get

1412
01:00:18,909 --> 01:00:21,699
handed to our software renderer if our

1413
01:00:20,500 --> 01:00:24,250
suffer and your supposed to render it

1414
01:00:21,699 --> 01:00:28,750
it'll get handed to mantle or whatever

1415
01:00:24,250 --> 01:00:30,608
we implement a renderer for you know the

1416
01:00:28,750 --> 01:00:35,380
render groups gotta gotta keep that

1417
01:00:30,608 --> 01:00:36,639
stuff encapsulated and so and that's the

1418
01:00:35,380 --> 01:00:39,608
only way we're really gonna be able to

1419
01:00:36,639 --> 01:00:42,190
have switchable renderers right which

1420
01:00:39,608 --> 01:00:43,900
I'd like us to be able to do and so

1421
01:00:42,190 --> 01:00:45,460
pretty much everything including filters

1422
01:00:43,900 --> 01:00:46,599
is probably gonna have to go in there

1423
01:00:45,460 --> 01:00:48,070
but again if it's something that

1424
01:00:46,599 --> 01:00:51,069
literally doesn't need to be specified

1425
01:00:48,070 --> 01:00:52,720
at runtime it's just kind of known then

1426
01:00:51,070 --> 01:00:57,100
that is then then we wouldn't need to

1427
01:00:52,719 --> 01:01:01,029
put it in there how long will the

1428
01:00:57,099 --> 01:01:03,429
renderer take I have no idea I really

1429
01:01:01,030 --> 01:01:05,109
don't know I mean part of it depends on

1430
01:01:03,429 --> 01:01:08,259
what we decide to what we decide our

1431
01:01:05,108 --> 01:01:10,690
goal is there's two ways we could look

1432
01:01:08,260 --> 01:01:12,400
at it right one way is that we're

1433
01:01:10,690 --> 01:01:14,200
strictly doing the render as an

1434
01:01:12,400 --> 01:01:16,240
educational experience and we literally

1435
01:01:14,199 --> 01:01:18,099
don't care how fast it is so we're just

1436
01:01:16,239 --> 01:01:20,229
trying to write a full renderer that's

1437
01:01:18,099 --> 01:01:22,420
that does exactly the right things in

1438
01:01:20,230 --> 01:01:25,570
the way that is most educational to do

1439
01:01:22,420 --> 01:01:27,190
them but then we always ever just run

1440
01:01:25,570 --> 01:01:30,460
with hardware acceleration right that's

1441
01:01:27,190 --> 01:01:32,079
one way we could go another way we could

1442
01:01:30,460 --> 01:01:33,849
go is we actually want the game to

1443
01:01:32,079 --> 01:01:34,989
actually run on software rendering in a

1444
01:01:33,849 --> 01:01:37,839
way that you could play it so it's got

1445
01:01:34,989 --> 01:01:39,669
to be fast enough for that and I don't

1446
01:01:37,840 --> 01:01:46,090
know which is the right answer of those

1447
01:01:39,670 --> 01:01:49,570
right I suspect what we'll probably do

1448
01:01:46,090 --> 01:01:52,180
is we'll probably take a cautious

1449
01:01:49,570 --> 01:01:53,980
approach to optimization and say let's

1450
01:01:52,179 --> 01:01:56,980
write the renderer as if it were a

1451
01:01:53,980 --> 01:01:59,440
graphics card and so it's basically a

1452
01:01:56,980 --> 01:02:01,150
simulation of a graphics card and we

1453
01:01:59,440 --> 01:02:02,530
will try to make it run reasonably fast

1454
01:02:01,150 --> 01:02:04,930
so we'll we'll show how to do code

1455
01:02:02,530 --> 01:02:06,730
opposition in there but we won't try to

1456
01:02:04,929 --> 01:02:09,489
do algorithmic optimizations that are

1457
01:02:06,730 --> 01:02:12,400
totally different from what a GPU would

1458
01:02:09,489 --> 01:02:14,079
do because that that ceases to be very

1459
01:02:12,400 --> 01:02:17,170
interesting in an educational sense

1460
01:02:14,079 --> 01:02:18,759
potentially so I don't know so I'm not

1461
01:02:17,170 --> 01:02:20,800
sure exactly how we'll take it but

1462
01:02:18,760 --> 01:02:23,290
depending on how far we want to push

1463
01:02:20,800 --> 01:02:25,240
optimization I would say is what could

1464
01:02:23,289 --> 01:02:29,980
could sort of control the length of time

1465
01:02:25,239 --> 01:02:31,599
that that the renderer takes up can you

1466
01:02:29,980 --> 01:02:32,889
give us examples of what some of the

1467
01:02:31,599 --> 01:02:36,279
simpler things will be in the render

1468
01:02:32,889 --> 01:02:37,358
group yeah clear so that was the one

1469
01:02:36,280 --> 01:02:39,280
that I would have hoped I had would have

1470
01:02:37,358 --> 01:02:41,279
time to get I didn't quite clear will be

1471
01:02:39,280 --> 01:02:44,280
a command in there like clear the buffer

1472
01:02:41,280 --> 01:02:44,280
right

1473
01:02:47,449 --> 01:02:52,049
are there any static code analysis tools

1474
01:02:49,769 --> 01:03:00,530
for C visual studio that would help pick

1475
01:02:52,050 --> 01:03:00,530
up bugs like unused variables etc hmm

1476
01:03:00,559 --> 01:03:07,679
you know I don't know I know there are

1477
01:03:03,929 --> 01:03:10,230
our good ones for clang so if you're

1478
01:03:07,679 --> 01:03:14,399
compiling on Linux there's a bunch of

1479
01:03:10,230 --> 01:03:16,530
built-in things in clang that do both

1480
01:03:14,400 --> 01:03:18,300
both static and dynamic analysis tools I

1481
01:03:16,530 --> 01:03:23,100
think there's like address sanitizers

1482
01:03:18,300 --> 01:03:25,200
and stuff like that I don't know if

1483
01:03:23,099 --> 01:03:26,759
Visual Studio has them or not I mean

1484
01:03:25,199 --> 01:03:28,500
obviously there's thousands of

1485
01:03:26,760 --> 01:03:30,240
aftermarket things for Visual Studio

1486
01:03:28,500 --> 01:03:35,880
that do but whether it's got a built in

1487
01:03:30,239 --> 01:03:40,739
I don't know I never used them so I have

1488
01:03:35,880 --> 01:03:42,990
no idea but but do you think they would

1489
01:03:40,739 --> 01:03:46,289
by now if they don't you know one option

1490
01:03:42,989 --> 01:03:48,750
is it's usually good to maintain like a

1491
01:03:46,289 --> 01:03:50,250
Linux or Mac port anyway and claim does

1492
01:03:48,750 --> 01:03:52,559
have them and you can turn them on and

1493
01:03:50,250 --> 01:03:55,800
so that's another option is just make

1494
01:03:52,559 --> 01:03:58,469
that an excuse to port your code Linux

1495
01:03:55,800 --> 01:03:59,910
or whatever get your thing running on

1496
01:03:58,469 --> 01:04:01,349
Linux you can run it if you do like

1497
01:03:59,909 --> 01:04:03,359
we're doing where the platform code is

1498
01:04:01,349 --> 01:04:05,579
completely isolated you don't even have

1499
01:04:03,360 --> 01:04:07,740
to port to Linux and actually get it

1500
01:04:05,579 --> 01:04:10,799
running to run address sanitization you

1501
01:04:07,739 --> 01:04:13,109
could run the game in in a in a loop

1502
01:04:10,800 --> 01:04:15,539
just not throwing away the output right

1503
01:04:13,110 --> 01:04:17,250
and using address sanitization the

1504
01:04:15,539 --> 01:04:18,929
static analysis tools to find stuff for

1505
01:04:17,250 --> 01:04:20,639
you right and so that's a pretty cheap

1506
01:04:18,929 --> 01:04:21,899
way to do it and you don't have to buy

1507
01:04:20,639 --> 01:04:24,869
an aftermarket thing for Visual Studio

1508
01:04:21,900 --> 01:04:26,579
but it may be that Visual Studio 2013 or

1509
01:04:24,869 --> 01:04:27,900
something has those already so I would

1510
01:04:26,579 --> 01:04:28,920
do some searching online because it may

1511
01:04:27,900 --> 01:04:31,519
be that they have I just don't know

1512
01:04:28,920 --> 01:04:31,519
because I don't use them

1513
01:04:38,159 --> 01:04:41,889
so are you planning on abstract away the

1514
01:04:40,389 --> 01:04:43,299
render as a layer similar to how we

1515
01:04:41,889 --> 01:04:45,369
separated the platform from the game

1516
01:04:43,300 --> 01:04:47,160
code so that the various renderers will

1517
01:04:45,369 --> 01:04:49,420
be operating on the same data structures

1518
01:04:47,159 --> 01:04:51,069
yes essentially I'm not sure I

1519
01:04:49,420 --> 01:04:52,630
necessarily understand what you mean by

1520
01:04:51,070 --> 01:04:55,000
operating the same data structures but

1521
01:04:52,630 --> 01:04:56,349
basically yeah we will have a render

1522
01:04:55,000 --> 01:04:59,590
when we're done with this we'll have a

1523
01:04:56,349 --> 01:05:01,829
render group spec basically that's like

1524
01:04:59,590 --> 01:05:04,990
this is the format for a chunk of memory

1525
01:05:01,829 --> 01:05:07,210
that means draw the stuff in this way

1526
01:05:04,989 --> 01:05:10,989
and anyone who wants to implement a

1527
01:05:07,210 --> 01:05:13,119
renderer for that can do it right and so

1528
01:05:10,989 --> 01:05:16,329
it then becomes free to just plug more

1529
01:05:13,119 --> 01:05:19,989
renderers in well free you have to write

1530
01:05:16,329 --> 01:05:21,579
the renderer but it becomes it doesn't

1531
01:05:19,989 --> 01:05:23,439
require us doing any work inside

1532
01:05:21,579 --> 01:05:25,389
handmade hero to support alternative

1533
01:05:23,440 --> 01:05:27,730
renderer so if you want you know and

1534
01:05:25,389 --> 01:05:29,529
people could go nuts with that if

1535
01:05:27,730 --> 01:05:30,940
someone wants to do like a d3 deport and

1536
01:05:29,530 --> 01:05:32,860
a mantle port and a whatever port

1537
01:05:30,940 --> 01:05:35,019
whatever and we don't do those on the

1538
01:05:32,860 --> 01:05:36,690
stream because we pick some other things

1539
01:05:35,019 --> 01:05:39,550
to use or whatever

1540
01:05:36,690 --> 01:05:40,869
it should be very easy for people in the

1541
01:05:39,550 --> 01:05:41,890
community to go ahead and say oh I

1542
01:05:40,869 --> 01:05:50,380
wanted to make a renderer for

1543
01:05:41,889 --> 01:05:51,519
such-and-such so I did right if you were

1544
01:05:50,380 --> 01:05:54,930
going to write an algorithm to generate

1545
01:05:51,519 --> 01:05:57,489
pseudo cout puzzles how would it work

1546
01:05:54,929 --> 01:05:58,750
that is that sorry that's sort of a pre

1547
01:05:57,489 --> 01:05:59,769
stream question that really doesn't have

1548
01:05:58,750 --> 01:06:05,800
anything to do with what we've been

1549
01:05:59,769 --> 01:06:07,630
working on unused variables are a

1550
01:06:05,800 --> 01:06:10,000
warning on my compiler did you turn that

1551
01:06:07,630 --> 01:06:12,030
warning off I use an allow local macro

1552
01:06:10,000 --> 01:06:16,840
when I want it to ignore the variable I

1553
01:06:12,030 --> 01:06:19,660
did turn that that off however I think

1554
01:06:16,840 --> 01:06:21,220
I'm not sure but I think what GPL White

1555
01:06:19,659 --> 01:06:22,960
was asking for when he says are there

1556
01:06:21,219 --> 01:06:24,579
any static analysis tools that would

1557
01:06:22,960 --> 01:06:26,679
help pick up bugs like unused variables

1558
01:06:24,579 --> 01:06:28,179
I assume because he said static analysis

1559
01:06:26,679 --> 01:06:31,299
tools he wasn't talking about the

1560
01:06:28,179 --> 01:06:33,159
trivial ones that the compiler catches I

1561
01:06:31,300 --> 01:06:36,610
assume he was talking about more

1562
01:06:33,159 --> 01:06:38,889
complicated ones that you know aren't

1563
01:06:36,610 --> 01:06:40,870
easy like that involve function calls or

1564
01:06:38,889 --> 01:06:44,379
something that like Visual Studio are

1565
01:06:40,869 --> 01:06:45,670
playing won't by default catch for you I

1566
01:06:44,380 --> 01:06:47,230
assume that's what he was talking about

1567
01:06:45,670 --> 01:06:47,829
but I don't know if he's only talking

1568
01:06:47,230 --> 01:06:49,480
about

1569
01:06:47,829 --> 01:06:51,489
getting visuals to just say hey this was

1570
01:06:49,480 --> 01:06:52,809
done use variable then yeah all you have

1571
01:06:51,489 --> 01:06:58,569
to do for that is just turn that warning

1572
01:06:52,809 --> 01:07:00,369
on would it make sense for the render

1573
01:06:58,570 --> 01:07:03,370
group to contain render groups itself

1574
01:07:00,369 --> 01:07:07,299
sorry Friday means fried brains here

1575
01:07:03,369 --> 01:07:09,429
yeah it I've I mean I can't say for sure

1576
01:07:07,300 --> 01:07:12,870
that that's what we'll do but that is

1577
01:07:09,429 --> 01:07:15,460
totally something we might do actually

1578
01:07:12,869 --> 01:07:18,309
in the course of what we're working on

1579
01:07:15,460 --> 01:07:20,409
I don't know because I probably would

1580
01:07:18,309 --> 01:07:22,000
say that we'll end up with the render

1581
01:07:20,409 --> 01:07:24,219
group kind of being a bit of a tree like

1582
01:07:22,000 --> 01:07:25,690
thing inside itself anyway so I don't

1583
01:07:24,219 --> 01:07:27,969
actually know whether that'll actually

1584
01:07:25,690 --> 01:07:30,570
be necessary but it's a totally

1585
01:07:27,969 --> 01:07:30,569
reasonable thing

1586
01:07:44,088 --> 01:07:47,838
do you Seven Samurai I meant whether you

1587
01:07:46,278 --> 01:07:49,338
plan for the data describing what needs

1588
01:07:47,838 --> 01:07:50,719
to be rendered to be in a format such

1589
01:07:49,338 --> 01:07:54,498
that it's suitable for both suffer and

1590
01:07:50,719 --> 01:07:57,079
hardware rendering yes the only thing we

1591
01:07:54,498 --> 01:08:00,738
won't do is try to get maximum hardware

1592
01:07:57,079 --> 01:08:04,068
throughput because we're a 2-d game so

1593
01:08:00,739 --> 01:08:06,019
we don't need it it's like hardware

1594
01:08:04,068 --> 01:08:07,759
throughput is so astronomically higher

1595
01:08:06,018 --> 01:08:11,348
than what we have we don't have to

1596
01:08:07,759 --> 01:08:14,478
really worry too much about that but so

1597
01:08:11,349 --> 01:08:17,539
you know you would build your push

1598
01:08:14,478 --> 01:08:19,548
buffers in the hardware format if you

1599
01:08:17,539 --> 01:08:21,469
wanted to be absolutely the fastest you

1600
01:08:19,548 --> 01:08:23,059
could possibly be and we have this

1601
01:08:21,469 --> 01:08:25,158
intermediate buffer format which

1602
01:08:23,059 --> 01:08:27,679
introduces some overhead in terms of

1603
01:08:25,158 --> 01:08:29,479
processing time so the only thing we

1604
01:08:27,679 --> 01:08:31,578
won't do is is eliminate that processing

1605
01:08:29,479 --> 01:08:33,468
time and the reason is because it won't

1606
01:08:31,578 --> 01:08:35,269
affect our framerate at all but if you

1607
01:08:33,469 --> 01:08:36,710
really were trying to like get down to

1608
01:08:35,270 --> 01:08:38,210
it that would be something you would

1609
01:08:36,710 --> 01:08:40,819
want that would be different for

1610
01:08:38,210 --> 01:08:42,380
hardware than in software but yet so for

1611
01:08:40,819 --> 01:08:43,699
other than other than that we will be

1612
01:08:42,380 --> 01:08:47,659
doing it so that it's basically friendly

1613
01:08:43,698 --> 01:08:49,969
eight for both well our hero always be

1614
01:08:47,658 --> 01:08:54,170
taller than the treetops no he's giant

1615
01:08:49,969 --> 01:08:56,359
right now just because eventually he

1616
01:08:54,170 --> 01:08:58,039
will be probably a little shorter than

1617
01:08:56,359 --> 01:09:00,650
the trees but not as much shorter as he

1618
01:08:58,039 --> 01:09:02,778
would be in real life it is not it is

1619
01:09:00,649 --> 01:09:04,698
not quite to scale in terms of how the

1620
01:09:02,779 --> 01:09:08,659
art will look in the final game the the

1621
01:09:04,698 --> 01:09:12,108
art will be you know it's its

1622
01:09:08,658 --> 01:09:14,000
interpretive it's an interpretation so

1623
01:09:12,109 --> 01:09:15,109
think people are not the same size

1624
01:09:14,000 --> 01:09:17,710
relative to trees that they possibly

1625
01:09:15,109 --> 01:09:17,710
should be

1626
01:09:21,529 --> 01:09:32,839
let's see any more questions any more

1627
01:09:26,359 --> 01:09:37,609
questions are there any more I do not

1628
01:09:32,838 --> 01:09:42,470
see any more programming questions but

1629
01:09:37,609 --> 01:09:54,259
maybe I am just missing them maybe I am

1630
01:09:42,470 --> 01:09:59,539
just missing them alright well I guess

1631
01:09:54,259 --> 01:10:00,859
that is that I guess we've finished

1632
01:09:59,539 --> 01:10:03,500
earlier okay

1633
01:10:00,859 --> 01:10:07,250
so let's go ahead and let's see let's

1634
01:10:03,500 --> 01:10:11,720
close this down close that down throw

1635
01:10:07,250 --> 01:10:21,020
that out and back to square one

1636
01:10:11,720 --> 01:10:24,050
all right double check here are we

1637
01:10:21,020 --> 01:10:25,280
keeping the 5:00 p.m. schedule well I

1638
01:10:24,050 --> 01:10:26,480
guess we've got a little bit extra time

1639
01:10:25,279 --> 01:10:28,279
here I don't know what do people think

1640
01:10:26,479 --> 01:10:29,750
about the 5:00 p.m. schedule I guess

1641
01:10:28,279 --> 01:10:31,369
it's a little bit weird to ask here

1642
01:10:29,750 --> 01:10:33,819
because the people who are here are

1643
01:10:31,369 --> 01:10:36,170
people who made the 5:00 p.m. schedule

1644
01:10:33,819 --> 01:10:38,769
but yes I think I would like to keep the

1645
01:10:36,170 --> 01:10:41,779
5:00 p.m. schedule I also feel like I

1646
01:10:38,770 --> 01:10:44,120
know this is a little paradoxical but I

1647
01:10:41,779 --> 01:10:48,109
feel like on the 5:00 p.m. schedule we

1648
01:10:44,119 --> 01:10:50,779
haven't been getting as much noiz in the

1649
01:10:48,109 --> 01:10:52,639
chat which I feel like might actually be

1650
01:10:50,779 --> 01:10:54,199
better I know it's like maybe not as

1651
01:10:52,640 --> 01:10:55,820
good for if we're trying to make the

1652
01:10:54,199 --> 01:11:00,590
series as popular as possible but at the

1653
01:10:55,819 --> 01:11:04,219
end of the day I feel like kind of

1654
01:11:00,590 --> 01:11:08,000
having a more sensible chat is valuable

1655
01:11:04,220 --> 01:11:12,740
for people and I'm not I am NOT a web

1656
01:11:08,000 --> 01:11:15,859
2.0 maximizing consumer acquisition

1657
01:11:12,739 --> 01:11:18,199
rates kind of a guy and so if it turns

1658
01:11:15,859 --> 01:11:20,989
out that this is a friendlier time in

1659
01:11:18,199 --> 01:11:23,929
terms of keeping the chat saying less

1660
01:11:20,989 --> 01:11:27,800
work for the moderators and stuff like

1661
01:11:23,930 --> 01:11:29,990
that I kind of feel like maybe that's a

1662
01:11:27,800 --> 01:11:31,670
good thing you know but if that could

1663
01:11:29,989 --> 01:11:33,840
just be a bad that could just be that

1664
01:11:31,670 --> 01:11:40,170
this week was happened to become

1665
01:11:33,840 --> 01:11:41,849
and easier so I don't know so yeah so

1666
01:11:40,170 --> 01:11:43,649
we'll see I'll try to post this weekend

1667
01:11:41,849 --> 01:11:45,060
on the forums a question to see if

1668
01:11:43,649 --> 01:11:46,738
people are having trouble with the 5:00

1669
01:11:45,060 --> 01:11:49,199
p.m. slot but I think we'll try it from

1670
01:11:46,738 --> 01:11:54,049
the Rica I like it I think it's good

1671
01:11:49,198 --> 01:11:54,049
and so yeah

1672
01:12:07,349 --> 01:12:14,639
all right well let's wrap it up then I

1673
01:12:11,788 --> 01:12:14,938
think it's a reasonable time to wrap it

1674
01:12:14,639 --> 01:12:16,439
up

1675
01:12:14,939 --> 01:12:17,878
thank you everyone joining me for

1676
01:12:16,439 --> 01:12:20,789
another episode of handmade hero we

1677
01:12:17,878 --> 01:12:22,139
started the rant renderer push virus up

1678
01:12:20,788 --> 01:12:24,840
today I wasn't anticipating doing that

1679
01:12:22,139 --> 01:12:26,699
but it just it just happened and so I

1680
01:12:24,840 --> 01:12:32,099
think what that kind of means for us is

1681
01:12:26,698 --> 01:12:33,839
again stuff may go crazy stuff may stuff

1682
01:12:32,099 --> 01:12:37,590
may go crazy maybe next week we'll be

1683
01:12:33,840 --> 01:12:39,538
doing renderer stuff I don't know like I

1684
01:12:37,590 --> 01:12:40,349
said we made it to do list it wasn't

1685
01:12:39,538 --> 01:12:42,809
meant to be in order

1686
01:12:40,349 --> 01:12:44,699
so I reserve the right to pick out the

1687
01:12:42,809 --> 01:12:46,439
stuff if we have momentum on something

1688
01:12:44,698 --> 01:12:48,719
that we're working on then I say we go

1689
01:12:46,439 --> 01:12:50,189
with it I don't like having any kind of

1690
01:12:48,719 --> 01:12:53,458
procrustean bed that we've got to sleep

1691
01:12:50,189 --> 01:12:54,959
in every night so yeah we'll see I

1692
01:12:53,458 --> 01:12:55,590
thought we were gonna do ground level Z

1693
01:12:54,958 --> 01:12:58,168
stuff tomorrow

1694
01:12:55,590 --> 01:12:59,189
maybe we'll Act I mean on on Monday and

1695
01:12:58,168 --> 01:13:00,389
starting next week but maybe we'll

1696
01:12:59,189 --> 01:13:02,459
actually go through and do some renderer

1697
01:13:00,389 --> 01:13:04,109
stuff and get us into a better position

1698
01:13:02,458 --> 01:13:06,358
with rendering I don't know

1699
01:13:04,109 --> 01:13:10,829
right it could happen don't quote me on

1700
01:13:06,359 --> 01:13:12,629
it either way but that said thank you

1701
01:13:10,828 --> 01:13:13,948
for joining me for another hour of

1702
01:13:12,628 --> 01:13:16,590
coding with handmade hero it's been a

1703
01:13:13,948 --> 01:13:18,658
pleasure coding with you as always if

1704
01:13:16,590 --> 01:13:19,979
you would like to follow along at home

1705
01:13:18,658 --> 01:13:22,228
with a source code you can pre-order the

1706
01:13:19,979 --> 01:13:24,208
game on handmade hero org it comes with

1707
01:13:22,229 --> 01:13:25,979
a source code and then you can download

1708
01:13:24,208 --> 01:13:28,168
it every night get a little link that

1709
01:13:25,979 --> 01:13:30,090
allows you downloaded every night and

1710
01:13:28,168 --> 01:13:31,498
follow along which is kind of cool if

1711
01:13:30,090 --> 01:13:34,168
you want to play around stuff we've been

1712
01:13:31,498 --> 01:13:38,668
doing on your own I highly recommend it

1713
01:13:34,168 --> 01:13:39,809
we also have of5 that there we go we

1714
01:13:38,668 --> 01:13:40,828
also have the forums I changed it from

1715
01:13:39,809 --> 01:13:42,179
news and forms to forums cool it's

1716
01:13:40,828 --> 01:13:43,858
really there's no news it's just forums

1717
01:13:42,179 --> 01:13:46,889
so you have a forum site you can check

1718
01:13:43,859 --> 01:13:48,689
out ask questions on look at basically

1719
01:13:46,889 --> 01:13:51,409
community ports to Mac and Linux there's

1720
01:13:48,689 --> 01:13:51,409
an anti demo

1721
01:13:51,498 --> 01:13:56,819
when we get the annotated episode guide

1722
01:13:54,269 --> 01:13:58,320
up a little bit get it

1723
01:13:56,819 --> 01:14:00,058
upping more automatically maybe I'll put

1724
01:13:58,319 --> 01:14:02,340
the link here and so the YouTube archive

1725
01:14:00,059 --> 01:14:04,498
as well but point being there's also a

1726
01:14:02,340 --> 01:14:06,510
schedule bot that tweets the schedule at

1727
01:14:04,498 --> 01:14:08,038
you which is good to keep up with if you

1728
01:14:06,510 --> 01:14:10,260
want to know when when it is again I

1729
01:14:08,038 --> 01:14:12,300
think it's gonna be 5 p.m. next week the

1730
01:14:10,260 --> 01:14:13,889
same time as this week but just in case

1731
01:14:12,300 --> 01:14:14,849
that tweet bot helps you keep up to date

1732
01:14:13,889 --> 01:14:16,469
with the schedule if you want to know

1733
01:14:14,849 --> 01:14:17,429
when that thing's gonna air that's all

1734
01:14:16,469 --> 01:14:20,069
it does is sit there and tweet the

1735
01:14:17,429 --> 01:14:20,578
schedule and also there's a patreon if

1736
01:14:20,069 --> 01:14:22,378
you ask for

1737
01:14:20,578 --> 01:14:24,719
video series you can always subscribe to

1738
01:14:22,378 --> 01:14:26,010
that it's much appreciated but again the

1739
01:14:24,719 --> 01:14:27,479
video series is always going to be free

1740
01:14:26,010 --> 01:14:30,510
so that's strictly if you're just doing

1741
01:14:27,479 --> 01:14:32,128
a nice thing like I said you don't have

1742
01:14:30,510 --> 01:14:34,498
to pay for it I like that it's it's it's

1743
01:14:32,128 --> 01:14:36,448
all the videos are always free so anyway

1744
01:14:34,498 --> 01:14:38,279
thank you very much for joining us and I

1745
01:14:36,448 --> 01:14:39,358
hope to see you next week and yeah I

1746
01:14:38,279 --> 01:14:40,918
don't know maybe we'll do rendering

1747
01:14:39,359 --> 01:14:42,449
stuff we'll see what happens

1748
01:14:40,918 --> 01:14:44,819
and if you do want to give feedback on

1749
01:14:42,448 --> 01:14:46,888
the new timeslot please do so on the

1750
01:14:44,819 --> 01:14:48,118
forums I read them I read everything on

1751
01:14:46,889 --> 01:14:50,969
the forums I don't always reply to stuff

1752
01:14:48,118 --> 01:14:52,139
I'm busy a lot of time so but I always I

1753
01:14:50,969 --> 01:14:54,510
always look and if there's something

1754
01:14:52,139 --> 01:14:56,639
that I can help out with I try to jump

1755
01:14:54,510 --> 01:14:57,929
in so so anyway thanks very much

1756
01:14:56,639 --> 01:15:01,338
and I hope see you next week take it

1757
01:14:57,929 --> 01:15:01,338
easy everyone and have a good weekend

