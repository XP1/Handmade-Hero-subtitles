1
00:00:00,439 --> 00:00:04,770
hello everybody welcome to handmade Hero

2
00:00:03,060 --> 00:00:07,710
show Rico to complete-game live on

3
00:00:04,769 --> 00:00:09,859
stream we have a bunch of work to do now

4
00:00:07,710 --> 00:00:12,859
one of the problems with with sort of

5
00:00:09,859 --> 00:00:17,309
getting down to the Nitty Gritty here is

6
00:00:12,859 --> 00:00:20,039
we have so many things we can now start

7
00:00:17,309 --> 00:00:23,489
polishing up and actually finishing and

8
00:00:20,039 --> 00:00:24,990
getting proper because we've got the art

9
00:00:23,489 --> 00:00:27,778
importing working and we have editing

10
00:00:24,989 --> 00:00:30,509
facilities as well so now like all of

11
00:00:27,778 --> 00:00:35,539
the stuff that we you know maybe have

12
00:00:30,510 --> 00:00:38,730
loose ends on is all up is all up for

13
00:00:35,539 --> 00:00:40,769
for work if that makes sense so we've

14
00:00:38,729 --> 00:00:44,759
got it's a lot of stuff we can start

15
00:00:40,770 --> 00:00:47,520
working on now and I we should probably

16
00:00:44,759 --> 00:00:50,519
try to button up our attachment point

17
00:00:47,520 --> 00:00:52,140
stuff maybe as the most direct thing we

18
00:00:50,520 --> 00:00:53,609
can do because we were in the middle of

19
00:00:52,140 --> 00:00:56,609
it and so we might as well get it kind

20
00:00:53,609 --> 00:01:02,070
of finished to the amount that we think

21
00:00:56,609 --> 00:01:04,829
we can but like if I actually so so if I

22
00:01:02,070 --> 00:01:09,209
now want to go edit things in the world

23
00:01:04,829 --> 00:01:10,978
I actually can edit things I can

24
00:01:09,209 --> 00:01:14,219
actually edit attachment points now in

25
00:01:10,978 --> 00:01:19,259
the world for reals so for example if I

26
00:01:14,219 --> 00:01:22,590
come on here and select this cat for

27
00:01:19,259 --> 00:01:24,810
example I can adjust where the cat is

28
00:01:22,590 --> 00:01:30,868
where the attachment point is on the on

29
00:01:24,810 --> 00:01:32,820
this cat and furthermore I can add more

30
00:01:30,868 --> 00:01:36,359
attachment points so for example if I

31
00:01:32,819 --> 00:01:39,478
add the head attachment point which we

32
00:01:36,359 --> 00:01:41,099
call basis neck I can put that like

33
00:01:39,478 --> 00:01:43,289
where the base of the neck is and

34
00:01:41,099 --> 00:01:45,719
furthermore on the art asset for the

35
00:01:43,290 --> 00:01:47,579
head I can also adjust where that

36
00:01:45,719 --> 00:01:49,379
attachment point is and they snap

37
00:01:47,578 --> 00:01:52,408
together right you can see them snapping

38
00:01:49,379 --> 00:01:55,078
now like the green and red snap together

39
00:01:52,409 --> 00:01:56,939
exactly as they should so we basically

40
00:01:55,078 --> 00:01:59,029
now have the complete snapping system in

41
00:01:56,938 --> 00:02:01,889
place we can edit it we can even pick

42
00:01:59,030 --> 00:02:05,790
different pieces out here like you know

43
00:02:01,890 --> 00:02:10,348
and so so on so we really do now have

44
00:02:05,790 --> 00:02:14,670
the ability to fully work through our

45
00:02:10,348 --> 00:02:20,439
art assets and get all that stuff

46
00:02:14,669 --> 00:02:22,319
we need one more major feature well two

47
00:02:20,439 --> 00:02:24,909
I think really before we call it done

48
00:02:22,319 --> 00:02:26,829
one is we have to decide how the scale

49
00:02:24,909 --> 00:02:29,049
stuff works right now we're just

50
00:02:26,830 --> 00:02:32,170
ignoring it and we don't want to ignore

51
00:02:29,050 --> 00:02:35,290
it so work out working out how scale

52
00:02:32,169 --> 00:02:37,899
works that's a big one and the other big

53
00:02:35,289 --> 00:02:39,819
one is implementing the save feature the

54
00:02:37,900 --> 00:02:41,920
revert feature already works so we can

55
00:02:39,819 --> 00:02:44,169
already go back to the thing beforehand

56
00:02:41,919 --> 00:02:48,159
or undo and redo all works like you can

57
00:02:44,169 --> 00:02:49,599
see it working right and again that's

58
00:02:48,159 --> 00:02:51,340
really cool like if you if you look at

59
00:02:49,599 --> 00:02:53,139
how little time it actually took us

60
00:02:51,340 --> 00:02:55,509
through the editing side of things it's

61
00:02:53,139 --> 00:02:56,889
pretty good right like you know it's not

62
00:02:55,509 --> 00:02:58,599
a professional grade edit or anything

63
00:02:56,889 --> 00:03:00,489
but in terms of something you throw in a

64
00:02:58,599 --> 00:03:02,019
game we've got undo we've got redo we've

65
00:03:00,490 --> 00:03:03,760
got you know multiple panels and

66
00:03:02,020 --> 00:03:04,870
everything we've got the ability to

67
00:03:03,759 --> 00:03:07,179
interact with all these things and add

68
00:03:04,870 --> 00:03:09,039
stuff trivially we've you know it came

69
00:03:07,180 --> 00:03:10,620
out pretty well I think and again that's

70
00:03:09,039 --> 00:03:13,419
just a testament to keeping it simple

71
00:03:10,620 --> 00:03:15,430
don't add huge object hierarchies don't

72
00:03:13,419 --> 00:03:18,009
add all this like you know ridiculous

73
00:03:15,430 --> 00:03:20,439
cruft don't go the QT route just keep it

74
00:03:18,009 --> 00:03:22,659
small simple fast and we can get almost

75
00:03:20,439 --> 00:03:24,219
all the functionality we need and we

76
00:03:22,659 --> 00:03:25,959
could make this more pretty and more

77
00:03:24,219 --> 00:03:27,819
usable too by just spending a little

78
00:03:25,959 --> 00:03:30,430
more time polishing the actual UI side

79
00:03:27,819 --> 00:03:31,930
of it but again you know you hit

80
00:03:30,430 --> 00:03:33,040
diminishing returns somewhere there

81
00:03:31,930 --> 00:03:36,040
especially if you're not going to be

82
00:03:33,039 --> 00:03:38,169
reusing the engine necessarily so anyway

83
00:03:36,039 --> 00:03:40,000
I think that came out really nicely but

84
00:03:38,169 --> 00:03:42,458
again we do need to now actually think

85
00:03:40,000 --> 00:03:46,479
about how we're gonna do save so I think

86
00:03:42,459 --> 00:03:48,699
if I'm not mistaken sizing and saving

87
00:03:46,479 --> 00:03:52,209
are the two things we really want to do

88
00:03:48,699 --> 00:03:54,669
we want to actually go work on and I

89
00:03:52,209 --> 00:04:00,330
think that's the end of what we would

90
00:03:54,669 --> 00:04:00,329
need in terms of support for alignment

91
00:04:02,819 --> 00:04:09,269
you know I like I can't think of

92
00:04:05,379 --> 00:04:09,269
anything else that we're missing

93
00:04:12,750 --> 00:04:24,240
I think I think we did everything you

94
00:04:15,030 --> 00:04:25,800
know I think we did all the stuff yeah I

95
00:04:24,240 --> 00:04:28,410
mean I really can't think of anything so

96
00:04:25,800 --> 00:04:30,120
I think if we just maybe we'll do those

97
00:04:28,410 --> 00:04:32,640
on this stream you know let's get those

98
00:04:30,120 --> 00:04:34,139
buttoned up and you know it may even

99
00:04:32,639 --> 00:04:36,180
take two streams because the save

100
00:04:34,139 --> 00:04:38,219
feature we want to save to text I think

101
00:04:36,180 --> 00:04:40,319
as well to have a permanent backing

102
00:04:38,220 --> 00:04:41,130
store just saving the HHA is not gonna

103
00:04:40,319 --> 00:04:46,379
be very hard

104
00:04:41,129 --> 00:04:47,939
that'll be quick I think but saving to

105
00:04:46,379 --> 00:04:49,709
the text file is gonna mean we need an

106
00:04:47,939 --> 00:04:51,209
input parser and we got to like validate

107
00:04:49,709 --> 00:04:53,819
that they come out the same and all that

108
00:04:51,209 --> 00:04:55,379
sort of stuff right so we kind of want

109
00:04:53,819 --> 00:04:57,449
to look at that a little bit more

110
00:04:55,379 --> 00:05:01,709
carefully and we'll we'll see what we

111
00:04:57,449 --> 00:05:03,899
can do there now when we finished that

112
00:05:01,709 --> 00:05:07,199
though we're then gonna have to start

113
00:05:03,899 --> 00:05:10,019
working a lot more on everything that

114
00:05:07,199 --> 00:05:12,209
that exposes because at that point you

115
00:05:10,019 --> 00:05:17,279
know we're kind of in wide-open

116
00:05:12,209 --> 00:05:18,599
territory at that point we you know and

117
00:05:17,279 --> 00:05:19,949
I should probably also make these snap

118
00:05:18,600 --> 00:05:21,450
the corners because they drive me insane

119
00:05:19,949 --> 00:05:23,550
the fact that they don't but other than

120
00:05:21,449 --> 00:05:25,349
that at that point we've got so much

121
00:05:23,550 --> 00:05:27,360
stuff we can work on we've got the

122
00:05:25,350 --> 00:05:29,910
lighting can be improved we've got

123
00:05:27,360 --> 00:05:31,949
ground cover we can add we can fix the

124
00:05:29,910 --> 00:05:37,740
camera and do the final camera code now

125
00:05:31,949 --> 00:05:39,360
we can look at how we're gonna do the Z

126
00:05:37,740 --> 00:05:40,829
bias offsetting you can see that these

127
00:05:39,360 --> 00:05:42,330
are wrong right now like you see how

128
00:05:40,829 --> 00:05:44,310
there's a gap you have the reasons that

129
00:05:42,329 --> 00:05:46,349
because they're on the same plane so we

130
00:05:44,310 --> 00:05:47,790
want stuff like be biasing the head

131
00:05:46,350 --> 00:05:50,640
forwards you know the things that are

132
00:05:47,790 --> 00:05:52,979
attached to be biased forwards there's

133
00:05:50,639 --> 00:05:56,519
just all this stuff we can now do as we

134
00:05:52,978 --> 00:05:59,969
look to make the game look professional

135
00:05:56,519 --> 00:06:02,009
right so there's all this polished work

136
00:05:59,970 --> 00:06:04,890
that this opens up now how do we want to

137
00:06:02,009 --> 00:06:08,870
actually get these lights in there you

138
00:06:04,889 --> 00:06:11,370
know all of that tuning becomes becomes

139
00:06:08,870 --> 00:06:14,610
available because we finally know

140
00:06:11,370 --> 00:06:16,319
exactly what we want and I think it's

141
00:06:14,610 --> 00:06:17,910
looking pretty good like this looks like

142
00:06:16,319 --> 00:06:19,978
roughly what I wanted the game to look

143
00:06:17,910 --> 00:06:21,720
like and so it's really just a question

144
00:06:19,978 --> 00:06:23,788
of polishing everything up now and you

145
00:06:21,720 --> 00:06:25,420
know I don't want giant light cubes

146
00:06:23,788 --> 00:06:26,740
sitting in the environment and I want

147
00:06:25,420 --> 00:06:28,780
the light to spread a little bit better

148
00:06:26,740 --> 00:06:31,720
and more evenly and you know I want to

149
00:06:28,779 --> 00:06:33,369
get rid of those sorting artifacts and I

150
00:06:31,720 --> 00:06:35,080
mean the z-buffer artifacts and stuff

151
00:06:33,370 --> 00:06:36,750
like that right so there's a bunch of

152
00:06:35,079 --> 00:06:39,969
stuff I want to do there but otherwise

153
00:06:36,750 --> 00:06:44,500
you know it's like yeah this is this is

154
00:06:39,970 --> 00:06:46,780
starting to get good and and so I want

155
00:06:44,500 --> 00:06:48,939
to go ahead and and and push towards

156
00:06:46,779 --> 00:06:50,889
that also I would like to emphasize just

157
00:06:48,939 --> 00:06:52,899
how good the lighting makes things look

158
00:06:50,889 --> 00:06:54,879
if you look at what this looks like over

159
00:06:52,899 --> 00:06:56,439
here you can just see how uninteresting

160
00:06:54,879 --> 00:06:58,899
that is whereas if we look at the lit

161
00:06:56,439 --> 00:07:01,389
region just having that color spread is

162
00:06:58,899 --> 00:07:03,219
just really good so you know I do think

163
00:07:01,389 --> 00:07:04,899
having lighting in this game is a good

164
00:07:03,220 --> 00:07:06,730
idea and I think we do want to push

165
00:07:04,899 --> 00:07:08,139
forward on that I think we can do a much

166
00:07:06,730 --> 00:07:11,319
better job that we're doing now but just

167
00:07:08,139 --> 00:07:14,589
lighting is hard so you know it's always

168
00:07:11,319 --> 00:07:15,159
an ongoing process so I think that's

169
00:07:14,589 --> 00:07:19,569
where we're at

170
00:07:15,160 --> 00:07:20,980
um don't we have another cat too didn't

171
00:07:19,569 --> 00:07:26,790
we put another wasn't there a cat maybe

172
00:07:20,980 --> 00:07:28,960
in the LARP in the upper room here you

173
00:07:26,790 --> 00:07:36,310
forget with the cats oh it's in there

174
00:07:28,959 --> 00:07:43,139
it's another bedroom yeah so we have

175
00:07:36,310 --> 00:07:46,540
another cat here if this was Fred and so

176
00:07:43,139 --> 00:07:49,990
just we could as further testing if I

177
00:07:46,540 --> 00:07:53,730
set the base of head there and then I

178
00:07:49,990 --> 00:08:03,960
set the alignment point for the head

179
00:07:53,730 --> 00:08:03,960
there again seems pretty good also

180
00:08:04,379 --> 00:08:10,480
that's roughly I guess where the catch

181
00:08:07,660 --> 00:08:12,310
it's it so again yeah you can just see

182
00:08:10,480 --> 00:08:14,020
like now that we've got that it's really

183
00:08:12,310 --> 00:08:15,970
trivial to just snap things together and

184
00:08:14,019 --> 00:08:18,039
make him work right and like I said it

185
00:08:15,970 --> 00:08:19,480
just now it just exposes all of the

186
00:08:18,040 --> 00:08:21,010
things that we're not doing right like

187
00:08:19,480 --> 00:08:22,509
getting the you know figuring out how we

188
00:08:21,009 --> 00:08:23,379
want to handle the sea bias you can see

189
00:08:22,509 --> 00:08:24,579
this as the parts talking about

190
00:08:23,379 --> 00:08:27,579
yesterday where we got to figure out how

191
00:08:24,579 --> 00:08:28,539
we want to stop them from clipping some

192
00:08:27,579 --> 00:08:29,979
of the stuffs easier than others

193
00:08:28,540 --> 00:08:31,450
obviously the fact that like the head

194
00:08:29,980 --> 00:08:34,200
wants to be offset a little that's a

195
00:08:31,449 --> 00:08:34,200
really easy fix

196
00:08:34,259 --> 00:08:39,399
compared to the other ones so anyway

197
00:08:37,899 --> 00:08:41,409
yeah I think we're good

198
00:08:39,399 --> 00:08:44,139
so I think what I want to do is just

199
00:08:41,409 --> 00:08:45,939
let's finish off the alignment editing

200
00:08:44,139 --> 00:08:48,279
stuff now and I think that's probably

201
00:08:45,940 --> 00:08:53,710
the the easiest or best thing for us to

202
00:08:48,279 --> 00:08:55,629
be doing yeah I think that's about it

203
00:08:53,710 --> 00:08:58,840
the other thing we might want to do here

204
00:08:55,629 --> 00:09:01,230
and I don't really know is if you look

205
00:08:58,840 --> 00:09:06,330
at what happens when you're editing

206
00:09:01,230 --> 00:09:10,330
alignment points that go to the parent

207
00:09:06,330 --> 00:09:13,090
you because changing the values counter

208
00:09:10,330 --> 00:09:14,800
rotates like you see how like if I

209
00:09:13,090 --> 00:09:16,600
change the value this way it means that

210
00:09:14,799 --> 00:09:17,949
the alignment points moving down but

211
00:09:16,600 --> 00:09:20,500
since the alignment points determining

212
00:09:17,950 --> 00:09:22,600
where I am it actually it's kind of

213
00:09:20,500 --> 00:09:24,580
going the wrong way in a sense so what

214
00:09:22,600 --> 00:09:30,220
we could do to there is when it's that

215
00:09:24,580 --> 00:09:32,710
way we we could actually reverse the we

216
00:09:30,220 --> 00:09:35,379
could reverse the movement meaning we

217
00:09:32,710 --> 00:09:37,360
could make it so that when you I don't

218
00:09:35,379 --> 00:09:41,470
know that I don't know that this is a

219
00:09:37,360 --> 00:09:52,810
good idea right but inside the editor

220
00:09:41,470 --> 00:09:57,460
when we do let's see in here right so

221
00:09:52,809 --> 00:09:59,679
when we do like edit align point and you

222
00:09:57,460 --> 00:10:02,560
can see us changing like the P percent

223
00:09:59,679 --> 00:10:03,939
here what we could do there is because

224
00:10:02,559 --> 00:10:07,719
we know the difference between the two P

225
00:10:03,940 --> 00:10:09,910
percent we could like swap them here and

226
00:10:07,720 --> 00:10:12,810
I mean we could we could change the

227
00:10:09,909 --> 00:10:17,620
direction that the P percent is actually

228
00:10:12,809 --> 00:10:19,179
being dragged again I don't know that we

229
00:10:17,620 --> 00:10:24,850
actually want to do that but we totally

230
00:10:19,179 --> 00:10:26,739
could do that and it would just be one

231
00:10:24,850 --> 00:10:34,779
if statement here I feel like if it's to

232
00:10:26,740 --> 00:10:36,490
parent do this thing I guess I don't

233
00:10:34,779 --> 00:10:39,129
care

234
00:10:36,490 --> 00:10:40,839
all right so I'm gonna get started I'm

235
00:10:39,129 --> 00:10:44,620
gonna try and get saving working back to

236
00:10:40,839 --> 00:10:48,100
the HHA first and well actually you know

237
00:10:44,620 --> 00:10:50,789
what let's do the harder problem first

238
00:10:48,100 --> 00:10:52,990
instead of saving let's work on sizing

239
00:10:50,789 --> 00:10:55,059
because I think there's some stuff that

240
00:10:52,990 --> 00:10:59,259
we are gonna need to do there that's

241
00:10:55,059 --> 00:11:02,139
kind of a a little bit full-throated so

242
00:10:59,259 --> 00:11:05,470
in here here's the thing that I'm

243
00:11:02,139 --> 00:11:08,019
thinking we probably need so when we

244
00:11:05,470 --> 00:11:10,570
actually have a bitmap you can see that

245
00:11:08,019 --> 00:11:12,278
we have to do in here that says the

246
00:11:10,570 --> 00:11:16,720
original size should probably go in here

247
00:11:12,278 --> 00:11:19,539
for computation purposes and so what

248
00:11:16,720 --> 00:11:22,509
happens when we import one of these

249
00:11:19,539 --> 00:11:24,490
bitmaps is we don't actually know how

250
00:11:22,509 --> 00:11:27,778
big it was originally because we scale

251
00:11:24,490 --> 00:11:30,370
it down to fit inside our texture size

252
00:11:27,778 --> 00:11:37,509
which means we've effectively lost the

253
00:11:30,370 --> 00:11:39,159
actual size when we go to draw it on the

254
00:11:37,509 --> 00:11:40,990
screen we probably want to draw it

255
00:11:39,159 --> 00:11:44,500
proportional to how big the artist made

256
00:11:40,990 --> 00:11:47,560
it originally and then subject to the

257
00:11:44,500 --> 00:11:50,078
sizing information that's placed in the

258
00:11:47,559 --> 00:11:52,958
actual like aligned points themselves

259
00:11:50,078 --> 00:11:55,750
right so if a thing says you know here's

260
00:11:52,958 --> 00:11:58,379
how I should be scaled in this

261
00:11:55,750 --> 00:12:06,519
circumstance then it will use that scale

262
00:11:58,379 --> 00:12:09,578
now when we look at you know what's

263
00:12:06,519 --> 00:12:11,919
stored here I've got a place set up to

264
00:12:09,578 --> 00:12:15,099
store that information I even said to do

265
00:12:11,919 --> 00:12:18,009
it seems like maybe we just should store

266
00:12:15,100 --> 00:12:19,509
or rigged in here basically and then

267
00:12:18,009 --> 00:12:24,750
when we draw things they can all be

268
00:12:19,509 --> 00:12:28,240
drawn as a proportion like that amount

269
00:12:24,750 --> 00:12:30,159
we can use that as that times the size

270
00:12:28,240 --> 00:12:32,829
is the size of your pair on the screen

271
00:12:30,159 --> 00:12:35,230
so that you always take into account how

272
00:12:32,828 --> 00:12:38,828
big the thing was originally and that

273
00:12:35,230 --> 00:12:40,690
helps maintain sizes relative to things

274
00:12:38,828 --> 00:12:44,409
when the artist kept the sizes

275
00:12:40,690 --> 00:12:46,720
consistent right right now we wouldn't

276
00:12:44,409 --> 00:12:49,750
be we aren't doing that furthermore it

277
00:12:46,720 --> 00:12:50,200
would change how we were actually in you

278
00:12:49,750 --> 00:12:52,990
know imp

279
00:12:50,200 --> 00:13:00,180
boarding things here so if we go and

280
00:12:52,990 --> 00:13:03,129
look at how we were so like we import

281
00:13:00,179 --> 00:13:05,559
the images into the HHA here

282
00:13:03,129 --> 00:13:07,000
automatically and we call this down

283
00:13:05,559 --> 00:13:08,859
sampler and one of the things you can

284
00:13:07,000 --> 00:13:13,330
see here is when we're doing like

285
00:13:08,860 --> 00:13:15,100
extraction of a particular image the way

286
00:13:13,330 --> 00:13:17,830
that it works is in the two cases where

287
00:13:15,100 --> 00:13:21,310
we've got single tile or plates we just

288
00:13:17,830 --> 00:13:23,740
get the down sample for the fit and here

289
00:13:21,309 --> 00:13:26,699
we don't do that we do the down sample

290
00:13:23,740 --> 00:13:29,649
fit before we ever find the thing we're

291
00:13:26,700 --> 00:13:31,720
using and the reason for that is because

292
00:13:29,649 --> 00:13:34,929
we've wanted we didn't want to scale

293
00:13:31,720 --> 00:13:37,930
different pieces differently but now we

294
00:13:34,929 --> 00:13:40,000
just could right now we can just shrink

295
00:13:37,929 --> 00:13:43,629
things down only as much as they need in

296
00:13:40,000 --> 00:13:50,889
order to fit into our texture tiles and

297
00:13:43,629 --> 00:13:54,429
then after we do that we can once we

298
00:13:50,889 --> 00:13:56,350
actually have that done we can always

299
00:13:54,429 --> 00:13:59,379
use the maximum amount of texture area

300
00:13:56,350 --> 00:14:01,029
that we have in that tile to represent

301
00:13:59,379 --> 00:14:02,679
the image regardless of how big it

302
00:14:01,029 --> 00:14:04,990
regionally was because we know we will

303
00:14:02,679 --> 00:14:09,129
preserve the size difference using the

304
00:14:04,990 --> 00:14:13,389
original dim parameter right and so I do

305
00:14:09,129 --> 00:14:15,519
think that's a valuable change and I

306
00:14:13,389 --> 00:14:21,610
think that's how I would like to do size

307
00:14:15,519 --> 00:14:24,009
and so yeah I think that's the primary

308
00:14:21,610 --> 00:14:25,750
difference there now the only other

309
00:14:24,009 --> 00:14:28,539
thing that we need to think about is in

310
00:14:25,750 --> 00:14:33,190
terms of size is just where the actual

311
00:14:28,539 --> 00:14:35,500
size stuff takes place relative to the

312
00:14:33,190 --> 00:14:38,440
size of entities themselves and again

313
00:14:35,500 --> 00:14:44,620
that difference was mostly about the

314
00:14:38,440 --> 00:14:48,040
simple case of is a cat art assets you

315
00:14:44,620 --> 00:14:52,389
know a quarter the size of a human's art

316
00:14:48,039 --> 00:14:58,089
assets in terms of their align point

317
00:14:52,389 --> 00:15:03,250
size settings right or does the entity

318
00:14:58,090 --> 00:15:07,360
of a cat get set to that lower size

319
00:15:03,250 --> 00:15:12,519
and and the align points are just set to

320
00:15:07,360 --> 00:15:17,860
1.0 or something right so I don't really

321
00:15:12,519 --> 00:15:19,629
know the answer to that question and so

322
00:15:17,860 --> 00:15:26,200
I think what I would say there is we'll

323
00:15:19,629 --> 00:15:28,330
probably just I think we'll probably

324
00:15:26,200 --> 00:15:31,570
start with the default behavior being

325
00:15:28,330 --> 00:15:34,090
that things are set to a size based on

326
00:15:31,570 --> 00:15:36,580
their real-world size and that sizes in

327
00:15:34,090 --> 00:15:39,220
the entity itself and then the align

328
00:15:36,580 --> 00:15:42,780
point information is only there for

329
00:15:39,220 --> 00:15:49,660
fixing errors that then occur from that

330
00:15:42,779 --> 00:15:53,500
I think that makes the most sense to me

331
00:15:49,659 --> 00:15:57,579
out of what we could do so I think

332
00:15:53,500 --> 00:15:59,559
that's what we're gonna go with okay so

333
00:15:57,580 --> 00:16:02,500
if we assume that that's how we're doing

334
00:15:59,559 --> 00:16:04,959
things then that leads to what I think

335
00:16:02,500 --> 00:16:06,460
is the final change I want to make to

336
00:16:04,960 --> 00:16:10,089
our age at J's I don't know if there's

337
00:16:06,460 --> 00:16:13,990
any other important changes we need to

338
00:16:10,089 --> 00:16:20,070
make to finalize the file format for

339
00:16:13,990 --> 00:16:20,070
version 2 but that's one of them and

340
00:16:22,679 --> 00:16:26,739
yeah like I can't think of anything that

341
00:16:25,240 --> 00:16:28,570
we're really doing that needs to get

342
00:16:26,740 --> 00:16:31,299
fixed beyond that like it seems like

343
00:16:28,570 --> 00:16:39,160
everything else is pretty good so far

344
00:16:31,299 --> 00:16:40,479
the way we've got it I mean I can't

345
00:16:39,159 --> 00:16:43,990
think of anything if anyone else can

346
00:16:40,480 --> 00:16:45,670
then I'm happy to do that too but I'm

347
00:16:43,990 --> 00:16:48,730
not thinking of anything right now and I

348
00:16:45,669 --> 00:16:54,419
think I think we pretty much got what we

349
00:16:48,730 --> 00:16:56,139
want in here it seems pretty good

350
00:16:54,419 --> 00:16:59,289
alright so I'm gonna go ahead and do

351
00:16:56,139 --> 00:17:01,600
that what I want to do first is in the

352
00:16:59,289 --> 00:17:04,420
HHA editor obviously if I want to have

353
00:17:01,600 --> 00:17:06,549
that I rigged dim stuff in there then

354
00:17:04,420 --> 00:17:09,910
what I'm gonna do is any time we read a

355
00:17:06,549 --> 00:17:13,928
v-0 file the the dim there is is

356
00:17:09,910 --> 00:17:16,300
actually direct meaning the ORAC dim and

357
00:17:13,929 --> 00:17:21,280
the actual dim are actually

358
00:17:16,299 --> 00:17:22,359
equivalent and so there's no change that

359
00:17:21,279 --> 00:17:24,490
needs to happen there

360
00:17:22,359 --> 00:17:26,199
right you know another way to say it

361
00:17:24,490 --> 00:17:30,759
would be that that these are always

362
00:17:26,200 --> 00:17:35,200
equal because we didn't ever do any down

363
00:17:30,759 --> 00:17:38,349
sampling of that data before so it's

364
00:17:35,200 --> 00:17:40,420
always gonna be proper and look like

365
00:17:38,349 --> 00:17:43,839
that so in terms of updating the

366
00:17:40,420 --> 00:17:45,370
importer for the old v0 assets that's

367
00:17:43,839 --> 00:17:51,250
all that would have to happen to import

368
00:17:45,369 --> 00:17:52,750
a v0 asset and you should just work

369
00:17:51,250 --> 00:17:54,220
right because there's nothing like

370
00:17:52,750 --> 00:18:00,220
there's nothing else that really happens

371
00:17:54,220 --> 00:18:05,049
there so the only place that the code

372
00:18:00,220 --> 00:18:10,360
actually needs to be more meticulous is

373
00:18:05,049 --> 00:18:13,180
inside this code and so in here we're

374
00:18:10,359 --> 00:18:17,199
we're actually writing out an image to

375
00:18:13,180 --> 00:18:21,039
an HHA file this because this source

376
00:18:17,200 --> 00:18:24,069
image is now not sufficient to tell us

377
00:18:21,039 --> 00:18:27,339
the information we needed what we want

378
00:18:24,069 --> 00:18:30,609
to do is say what that original size was

379
00:18:27,339 --> 00:18:35,289
before we down sampled it that now needs

380
00:18:30,609 --> 00:18:37,240
to get passed so in here we want a

381
00:18:35,289 --> 00:18:40,440
separate thing I don't know if we've got

382
00:18:37,240 --> 00:18:40,440
V to use in here

383
00:18:48,298 --> 00:19:00,019
oh right we got type smile so we've got

384
00:19:01,338 --> 00:19:17,009
no such thing it looks like oh whoops we

385
00:19:13,319 --> 00:19:20,128
only have just the real 32 ones we don't

386
00:19:17,009 --> 00:19:23,819
have the ability to specify to like a

387
00:19:20,128 --> 00:19:26,608
dimension like that unfortunately which

388
00:19:23,819 --> 00:19:29,189
is really too bad but it looks like

389
00:19:26,608 --> 00:19:32,098
that's just the way it goes sometimes so

390
00:19:29,190 --> 00:19:35,009
as a result we would not be able to just

391
00:19:32,098 --> 00:19:37,648
call you a v2 you there I could just be

392
00:19:35,009 --> 00:19:40,709
saucy about it and actually just make

393
00:19:37,648 --> 00:19:42,298
one of those so that we have one meaning

394
00:19:40,709 --> 00:19:47,940
it would just be this right it's the

395
00:19:42,298 --> 00:19:50,778
exact same code the only difference is

396
00:19:47,940 --> 00:19:56,700
it's named a little differently right so

397
00:19:50,778 --> 00:20:00,598
it looks like this probably you and I

398
00:19:56,700 --> 00:20:03,778
mean and so v2 use are usually addressed

399
00:20:00,598 --> 00:20:06,509
this way I would say probably you would

400
00:20:03,778 --> 00:20:08,848
want something like this going on though

401
00:20:06,509 --> 00:20:11,038
because W can be confusing if you throw

402
00:20:08,848 --> 00:20:13,499
that in there right you get confusion

403
00:20:11,038 --> 00:20:17,038
with the X Y Z W it's unfortunate that X

404
00:20:13,499 --> 00:20:19,139
Y Z W happens to be a thing but it kind

405
00:20:17,038 --> 00:20:21,838
of is so you know off you go with that

406
00:20:19,138 --> 00:20:24,298
so anyway I can pass in here and or a

407
00:20:21,838 --> 00:20:25,950
dim value and then when we do a write

408
00:20:24,298 --> 00:20:29,788
image to H I'd say when we come through

409
00:20:25,950 --> 00:20:33,509
here and set these I can you know also

410
00:20:29,788 --> 00:20:40,308
put them in here where we want to put

411
00:20:33,509 --> 00:20:47,190
our rig Jim zero equals you 16 or a gym

412
00:20:40,308 --> 00:20:51,628
width and Jim height like so and those

413
00:20:47,190 --> 00:20:54,629
are like the sum total of what would

414
00:20:51,628 --> 00:20:57,298
need to get updated right so here if we

415
00:20:54,628 --> 00:20:59,089
were to write this asset back like for

416
00:20:57,298 --> 00:21:06,259
example here

417
00:20:59,089 --> 00:21:10,119
No where is it where do we actually

418
00:21:06,259 --> 00:21:10,119
flush the asset data back

419
00:21:11,079 --> 00:21:24,129
so this writes the error streams this

420
00:21:15,890 --> 00:21:28,690
writes the asset data but where does the

421
00:21:24,130 --> 00:21:28,690
asset get written

422
00:21:40,170 --> 00:21:46,690
interesting so do I just flush them in

423
00:21:42,940 --> 00:21:49,980
bulk or something it's funny that I

424
00:21:46,690 --> 00:21:49,980
asked that but I just don't remember

425
00:21:53,490 --> 00:21:58,079
like where do we actually save that out

426
00:22:05,069 --> 00:22:12,819
so the right modifications to HHA is

427
00:22:10,690 --> 00:22:20,529
what handles it I don't know where we

428
00:22:12,819 --> 00:22:32,589
set it as dirty I guess it's just any

429
00:22:20,529 --> 00:22:33,869
time we called that hmm all right I mean

430
00:22:32,589 --> 00:22:36,789
that's fine with me

431
00:22:33,869 --> 00:22:38,559
but let's see here so that just gathers

432
00:22:36,789 --> 00:22:40,690
up all the things it needs to write and

433
00:22:38,559 --> 00:22:43,419
just does the safe right and and that's

434
00:22:40,690 --> 00:22:48,870
the end of it I guess all right it's

435
00:22:43,420 --> 00:22:52,990
fine yeah

436
00:22:48,869 --> 00:22:54,309
all right so that's all well and good so

437
00:22:52,990 --> 00:22:55,960
now we just need to make sure we always

438
00:22:54,309 --> 00:23:09,099
pass that a rig width and height there

439
00:22:55,960 --> 00:23:13,269
and and off we go I'm getting those

440
00:23:09,099 --> 00:23:15,159
winter sneezies so inside here you can

441
00:23:13,269 --> 00:23:17,859
kind of see when we do this extract

442
00:23:15,160 --> 00:23:19,570
image the source image width and height

443
00:23:17,859 --> 00:23:25,500
is actually the original

444
00:23:19,569 --> 00:23:29,919
you know we know exactly what it is so

445
00:23:25,500 --> 00:23:36,240
it's pretty straightforward in this case

446
00:23:29,920 --> 00:23:41,110
to just set that right so we would know

447
00:23:36,240 --> 00:23:42,670
what the width and height are and we can

448
00:23:41,109 --> 00:23:44,169
now pass that when we write the image

449
00:23:42,670 --> 00:23:46,630
because regardless of how you down

450
00:23:44,170 --> 00:23:47,620
sample it it's still that that is still

451
00:23:46,630 --> 00:23:50,620
the original

452
00:23:47,619 --> 00:23:55,689
because it doesn't do any like subtile

453
00:23:50,619 --> 00:23:57,069
plucking basically so yeah and I don't

454
00:23:55,690 --> 00:24:02,019
remember what's the difference between

455
00:23:57,069 --> 00:24:07,289
these two it's just it's just a size

456
00:24:02,019 --> 00:24:07,289
difference I guess it's all it is so I

457
00:24:07,319 --> 00:24:11,349
don't even know why we do that I guess

458
00:24:09,609 --> 00:24:14,889
acet max play tim is just a guard

459
00:24:11,349 --> 00:24:17,199
against doing anything too large um so

460
00:24:14,890 --> 00:24:20,170
that's the same thing would happen here

461
00:24:17,200 --> 00:24:22,390
right and so in both these cases all we

462
00:24:20,170 --> 00:24:23,769
really have to do is just pass before

463
00:24:22,390 --> 00:24:26,950
the image right we just passed that

464
00:24:23,769 --> 00:24:28,990
original dimension down and that's

465
00:24:26,950 --> 00:24:32,679
that's all there is to it so it's really

466
00:24:28,990 --> 00:24:34,390
only the multi tile case that's at all

467
00:24:32,679 --> 00:24:36,700
interesting because that's the one that

468
00:24:34,390 --> 00:24:39,220
actually changes the sizes of things

469
00:24:36,700 --> 00:24:43,058
because it's plucking out actual

470
00:24:39,220 --> 00:24:46,360
rectangular pieces inside the tiles as

471
00:24:43,058 --> 00:24:49,710
far as emptiness is concerned if we look

472
00:24:46,359 --> 00:24:54,909
through here we can see that happening

473
00:24:49,710 --> 00:24:57,400
we produce an extraction here by you

474
00:24:54,910 --> 00:25:00,550
know by doing this tile image bit so

475
00:24:57,400 --> 00:25:03,460
what that means is the tile image will

476
00:25:00,549 --> 00:25:06,579
have the dimensions we actually wanted

477
00:25:03,460 --> 00:25:09,850
so the original dimensions here are just

478
00:25:06,579 --> 00:25:13,029
a tile image width and the tile image

479
00:25:09,849 --> 00:25:17,829
height right because that's the part we

480
00:25:13,029 --> 00:25:20,139
extracted so I think that's it

481
00:25:17,829 --> 00:25:28,119
and now that will always get preserved

482
00:25:20,140 --> 00:25:30,700
properly so if we now went and put into

483
00:25:28,119 --> 00:25:36,149
our code something that uses that

484
00:25:30,700 --> 00:25:41,799
information when it goes to actually do

485
00:25:36,150 --> 00:25:43,870
any rendering work meaning when it tries

486
00:25:41,799 --> 00:25:46,359
to compute the size of things it's going

487
00:25:43,869 --> 00:25:49,259
to actually use that information

488
00:25:46,359 --> 00:25:49,259
potentially

489
00:25:53,009 --> 00:25:58,109
we really just need to know the height

490
00:25:56,069 --> 00:26:01,109
and we need to know the Heights

491
00:25:58,109 --> 00:26:05,219
proportion to some universal idea of

492
00:26:01,109 --> 00:26:09,418
what we're gonna call height in this

493
00:26:05,220 --> 00:26:11,460
case right and again the only reason we

494
00:26:09,419 --> 00:26:13,139
need to do this is just to adjust the

495
00:26:11,460 --> 00:26:15,058
fact that sometimes things are plucked

496
00:26:13,138 --> 00:26:16,379
out of smaller rectangular areas we

497
00:26:15,058 --> 00:26:19,619
don't really know how big they were

498
00:26:16,380 --> 00:26:22,200
supposed to be in the first place

499
00:26:19,619 --> 00:26:24,689
in addition to this I'm gonna go ahead

500
00:26:22,200 --> 00:26:27,149
and say now because we know that piece

501
00:26:24,690 --> 00:26:31,259
of information the downsample account

502
00:26:27,148 --> 00:26:33,689
can actually be called every time and so

503
00:26:31,259 --> 00:26:35,308
instead of having the science test

504
00:26:33,690 --> 00:26:37,470
nonsense

505
00:26:35,308 --> 00:26:39,928
occurring here we can instead say

506
00:26:37,470 --> 00:26:44,038
anytime that we're going to go do one of

507
00:26:39,929 --> 00:26:45,840
these let's actually do it only the

508
00:26:44,038 --> 00:26:49,048
minimum amount necessary which means

509
00:26:45,839 --> 00:26:50,759
that smaller things won't get rish Runk

510
00:26:49,048 --> 00:26:56,038
down below the size that they would need

511
00:26:50,759 --> 00:26:58,528
to be they can still say you know the

512
00:26:56,038 --> 00:27:00,690
source images are like 1k by 1k I think

513
00:26:58,528 --> 00:27:03,359
if you only had a little bit of that

514
00:27:00,690 --> 00:27:06,450
occupied when we go to shrink it down to

515
00:27:03,359 --> 00:27:09,298
fit it inside like a 256 by 256 tile if

516
00:27:06,450 --> 00:27:10,860
it was already 256 by 26 we won't shrink

517
00:27:09,298 --> 00:27:12,750
it right we'll leave it so that it'll

518
00:27:10,859 --> 00:27:15,148
fit in there and use the maximum amount

519
00:27:12,750 --> 00:27:17,278
of area we won't keep shrinking it down

520
00:27:15,148 --> 00:27:20,009
just because we're trying to obey a

521
00:27:17,278 --> 00:27:22,288
general idea of how much each thing in

522
00:27:20,009 --> 00:27:26,879
the entire file should have shrunk so

523
00:27:22,288 --> 00:27:29,250
that's what I want to do there right um

524
00:27:26,880 --> 00:27:31,470
so I think that's all good if we now

525
00:27:29,250 --> 00:27:35,398
were to use that somewhere so let's say

526
00:27:31,470 --> 00:27:37,380
I go into the actual entity renderer

527
00:27:35,398 --> 00:27:40,288
where is this is where I would probably

528
00:27:37,380 --> 00:27:42,179
be using this sort of thing if when I

529
00:27:40,288 --> 00:27:45,960
look at the bitmap information in

530
00:27:42,179 --> 00:27:49,048
question I actually try to take that

531
00:27:45,960 --> 00:27:51,690
into account for the height so you know

532
00:27:49,048 --> 00:27:53,250
inside here we know that this world

533
00:27:51,690 --> 00:27:54,778
radius you can see a select computing

534
00:27:53,250 --> 00:27:56,788
stuff this is going to get cleaned up

535
00:27:54,778 --> 00:27:59,278
considerably now as we start to shrink

536
00:27:56,788 --> 00:28:02,099
this down a bit but if we look inside

537
00:27:59,278 --> 00:28:06,450
like the UPS it's not what I wanted to

538
00:28:02,099 --> 00:28:06,808
do if we sort of look inside how this is

539
00:28:06,450 --> 00:28:09,509
actually

540
00:28:06,808 --> 00:28:13,019
getting scaled and you can see here the

541
00:28:09,509 --> 00:28:17,429
world radius why stuff or the piece the

542
00:28:13,019 --> 00:28:19,230
dim dot why right so when you see how

543
00:28:17,429 --> 00:28:22,200
this like world type thing is being used

544
00:28:19,230 --> 00:28:24,089
here if I wanted to then I could say I

545
00:28:22,200 --> 00:28:25,980
want to take whatever the dimension Y

546
00:28:24,089 --> 00:28:29,398
scaling value is that I've been given

547
00:28:25,980 --> 00:28:31,980
and multiply it by the height ratio here

548
00:28:29,398 --> 00:28:35,339
which let's say is going to be you know

549
00:28:31,980 --> 00:28:38,249
something along the lines of how big was

550
00:28:35,339 --> 00:28:40,378
this thing relative to a tile in terms

551
00:28:38,249 --> 00:28:41,669
of the input dimensions for something

552
00:28:40,378 --> 00:28:44,189
like that it doesn't matter what it is

553
00:28:41,669 --> 00:28:47,659
just it has to be some constant ratio so

554
00:28:44,190 --> 00:28:51,298
if I say you know the bitmap infos

555
00:28:47,659 --> 00:28:56,429
original dimension in Y is going to be

556
00:28:51,298 --> 00:28:58,740
turned into a ratio and then that ratio

557
00:28:56,429 --> 00:29:01,499
is going to be used to set the sizes of

558
00:28:58,740 --> 00:29:04,230
things that would equalize all of them

559
00:29:01,499 --> 00:29:06,538
to the correct size now obviously if I

560
00:29:04,230 --> 00:29:08,159
run it now I'm not going to see anything

561
00:29:06,538 --> 00:29:11,249
and the reason I'm not going to see

562
00:29:08,159 --> 00:29:13,889
anything is because we haven't set any

563
00:29:11,249 --> 00:29:16,499
of those ratios or all those are or

564
00:29:13,888 --> 00:29:19,408
exams right so I come in here I see no

565
00:29:16,499 --> 00:29:21,450
cat why is there no cat I can even

566
00:29:19,409 --> 00:29:23,369
select the cat potentially but I just

567
00:29:21,450 --> 00:29:26,278
can't see it right so if I come in here

568
00:29:23,368 --> 00:29:29,189
and pick that you know why can't I see

569
00:29:26,278 --> 00:29:30,628
the cat and even it's even here right I

570
00:29:29,190 --> 00:29:33,179
can pick it in here and I can't why

571
00:29:30,628 --> 00:29:36,658
can't I see the cat again I rigged dim

572
00:29:33,179 --> 00:29:38,730
is zero because we haven't run rerun the

573
00:29:36,659 --> 00:29:41,340
import so none of that stuff was

574
00:29:38,730 --> 00:29:44,190
actually saved the same would be true of

575
00:29:41,339 --> 00:29:46,230
any other bitmaps that came from the

576
00:29:44,190 --> 00:29:48,778
import process now everybody who's not

577
00:29:46,230 --> 00:29:51,778
using that kind of a scale so like the

578
00:29:48,778 --> 00:29:54,960
font code for example the cubes any of

579
00:29:51,778 --> 00:29:57,778
that stuff totally fine because it's not

580
00:29:54,960 --> 00:30:00,740
using that or a dim value so it doesn't

581
00:29:57,778 --> 00:30:03,929
have to worry about that stuff at all

582
00:30:00,740 --> 00:30:06,868
okay so if I now want to go ahead and

583
00:30:03,929 --> 00:30:08,669
and make that work then what I can do

584
00:30:06,868 --> 00:30:10,648
first of all I you know I really just

585
00:30:08,669 --> 00:30:12,570
don't care about the origam values in

586
00:30:10,648 --> 00:30:14,099
these v-0 things so I don't even need

587
00:30:12,569 --> 00:30:15,778
know that I really care about rerunning

588
00:30:14,099 --> 00:30:17,819
the import we can at some point if we

589
00:30:15,778 --> 00:30:20,159
want to what I really want to do is just

590
00:30:17,819 --> 00:30:20,569
make sure I rerun the import on the

591
00:30:20,159 --> 00:30:22,519
action

592
00:30:20,569 --> 00:30:24,528
new stuff that we're actually using so

593
00:30:22,519 --> 00:30:26,599
like this local HHA file here for

594
00:30:24,528 --> 00:30:28,970
example I want to get rid of that that

595
00:30:26,599 --> 00:30:33,230
should go away and then I'm going to use

596
00:30:28,970 --> 00:30:37,429
HHA edit to create a new one of those so

597
00:30:33,230 --> 00:30:40,669
that it will force the game to notice it

598
00:30:37,429 --> 00:30:42,798
and do the bulk update so now it will go

599
00:30:40,669 --> 00:30:45,320
in and look at all of those pngs rien

600
00:30:42,798 --> 00:30:48,619
port all of them and in theory it should

601
00:30:45,319 --> 00:30:52,369
set those origin values to be something

602
00:30:48,619 --> 00:30:54,048
valid right and so well ready we can

603
00:30:52,369 --> 00:30:56,329
start to see that there is a difference

604
00:30:54,048 --> 00:30:58,038
the fist now is a different size why is

605
00:30:56,329 --> 00:31:00,619
it a different size because now we are

606
00:30:58,038 --> 00:31:02,359
accounting for its actual size relative

607
00:31:00,619 --> 00:31:04,758
to the total size of the tile could have

608
00:31:02,359 --> 00:31:07,158
been and again it's just a normalization

609
00:31:04,759 --> 00:31:09,620
function and it kind of is nice because

610
00:31:07,159 --> 00:31:12,830
you can even see our fist doesn't before

611
00:31:09,619 --> 00:31:14,808
it was looking bigger in the case where

612
00:31:12,829 --> 00:31:16,668
in what in one of them than in the other

613
00:31:14,808 --> 00:31:18,138
and I think the reason for that was it

614
00:31:16,669 --> 00:31:20,899
just happened to be scaled differently

615
00:31:18,138 --> 00:31:23,508
inside the thing so this actually now

616
00:31:20,898 --> 00:31:24,949
properly obeys that scaling a little bit

617
00:31:23,509 --> 00:31:28,339
better and I think that's you know

618
00:31:24,950 --> 00:31:31,399
obviously a good thing and so now our

619
00:31:28,339 --> 00:31:33,829
cat also has that aspect of it as well

620
00:31:31,398 --> 00:31:36,109
too again doesn't really matter a super

621
00:31:33,829 --> 00:31:38,628
super much at the immediate moment but I

622
00:31:36,109 --> 00:31:41,240
think it'll pay off pay some dividends a

623
00:31:38,628 --> 00:31:44,119
little bit later on right and so looking

624
00:31:41,240 --> 00:31:45,319
here I'm gonna go ahead and and make

625
00:31:44,119 --> 00:31:47,689
sure that the rest of this stuff still

626
00:31:45,319 --> 00:31:49,788
works if I don't see why it wouldn't if

627
00:31:47,690 --> 00:31:51,379
I go into the alignment point editor I

628
00:31:49,788 --> 00:31:53,028
should be able to do the same thing that

629
00:31:51,378 --> 00:31:55,490
I was doing before where I snap a base

630
00:31:53,028 --> 00:31:57,349
of neck on there let me zoom in so I can

631
00:31:55,490 --> 00:32:00,798
see that where I snapped the base of

632
00:31:57,349 --> 00:32:03,319
neck on there and also in here change

633
00:32:00,798 --> 00:32:05,918
the alignment point there and off we go

634
00:32:03,319 --> 00:32:08,388
right so now we can see the cat's eyes

635
00:32:05,919 --> 00:32:09,830
you know and you know that honestly

636
00:32:08,388 --> 00:32:13,308
that's probably more what a normal cat's

637
00:32:09,829 --> 00:32:15,138
eyes should be again continuing to

638
00:32:13,308 --> 00:32:16,970
expose new things we need to work on

639
00:32:15,138 --> 00:32:18,740
though you can see that the cat doesn't

640
00:32:16,970 --> 00:32:20,899
really look that good scale down that

641
00:32:18,740 --> 00:32:22,308
far why doesn't it look that good scale

642
00:32:20,898 --> 00:32:23,898
down that far well it's because we're

643
00:32:22,308 --> 00:32:26,658
not using MIT Maps which we're going to

644
00:32:23,898 --> 00:32:29,329
want to turn on sometime soon as well so

645
00:32:26,659 --> 00:32:32,000
that'll be an interesting thing we can

646
00:32:29,329 --> 00:32:34,039
do to improve image quality further in

647
00:32:32,000 --> 00:32:37,789
addition so again

648
00:32:34,039 --> 00:32:39,170
we continue to have it we're getting the

649
00:32:37,789 --> 00:32:41,329
point where we're opening up huge

650
00:32:39,170 --> 00:32:44,390
amounts of things we can work on that

651
00:32:41,329 --> 00:32:45,769
actually make obvious like serious

652
00:32:44,390 --> 00:32:47,030
improvements to the way the game looks

653
00:32:45,769 --> 00:32:49,220
and that's where we want to be in terms

654
00:32:47,029 --> 00:32:53,660
of getting our art and visuals a little

655
00:32:49,220 --> 00:32:55,130
bit more finalized okay so that's all

656
00:32:53,660 --> 00:32:56,480
well and good don't think there's too

657
00:32:55,130 --> 00:32:59,180
much more we really need to think about

658
00:32:56,480 --> 00:33:01,640
there I think that's all we really need

659
00:32:59,180 --> 00:33:05,750
for the sizes so now let's focus on that

660
00:33:01,640 --> 00:33:07,880
saving value and on the the scaling

661
00:33:05,750 --> 00:33:11,089
values that were actually getting

662
00:33:07,880 --> 00:33:12,950
applied here in addition so if we want

663
00:33:11,089 --> 00:33:14,990
to respect the scaling values in the

664
00:33:12,950 --> 00:33:16,789
Edit side of things it's actually not

665
00:33:14,990 --> 00:33:18,859
that bad because we have all the

666
00:33:16,789 --> 00:33:20,960
information we actually need so what we

667
00:33:18,859 --> 00:33:23,000
can do here is just say well you know

668
00:33:20,960 --> 00:33:25,190
let's first of all let's let's clean up

669
00:33:23,000 --> 00:33:28,609
how we've got we got too many dimensions

670
00:33:25,190 --> 00:33:30,140
running around here and so if we look at

671
00:33:28,609 --> 00:33:31,399
this world radius thing where we grabbed

672
00:33:30,140 --> 00:33:33,890
a piece dim out of there

673
00:33:31,400 --> 00:33:36,140
and then we do all this garbage here

674
00:33:33,890 --> 00:33:37,850
what we could do is is let's let's

675
00:33:36,140 --> 00:33:39,890
actually consolidate on that world

676
00:33:37,849 --> 00:33:43,099
radius stuff because now we sort of know

677
00:33:39,890 --> 00:33:45,440
what this actually should be and so when

678
00:33:43,099 --> 00:33:48,199
we call the world dim for world height

679
00:33:45,440 --> 00:33:50,630
function and we have that that height

680
00:33:48,200 --> 00:33:52,610
ratio thing there that's something that

681
00:33:50,630 --> 00:33:53,570
I think we want to be more specific

682
00:33:52,609 --> 00:33:56,539
about now

683
00:33:53,569 --> 00:33:59,720
so what I would like to do is grab in

684
00:33:56,539 --> 00:34:02,420
here I'm gonna put this stuff inside

685
00:33:59,720 --> 00:34:06,259
here I want to set the world radius

686
00:34:02,420 --> 00:34:08,900
actually according to this value here so

687
00:34:06,259 --> 00:34:17,809
when we get the world dim back I'm gonna

688
00:34:08,900 --> 00:34:21,769
put it like so so when we set this

689
00:34:17,809 --> 00:34:24,949
information up we get that that now

690
00:34:21,769 --> 00:34:27,050
newly corrected dimension values coming

691
00:34:24,949 --> 00:34:30,019
back here then what I'd like to do is

692
00:34:27,050 --> 00:34:33,919
take that height ratio I want the height

693
00:34:30,019 --> 00:34:36,559
ratio to be multiplied by the combined

694
00:34:33,918 --> 00:34:38,179
ratio of what the parent wants to do for

695
00:34:36,559 --> 00:34:40,940
scaling and what the child wants to do

696
00:34:38,179 --> 00:34:42,710
for scaling so what that really suggests

697
00:34:40,940 --> 00:34:45,590
to me is I kind of want to come back

698
00:34:42,710 --> 00:34:47,480
here get that set up ahead of time once

699
00:34:45,590 --> 00:34:51,019
we get the child aligned in

700
00:34:47,480 --> 00:34:54,710
information back I want to say okay the

701
00:34:51,019 --> 00:34:58,519
child aligned size multiplies is the

702
00:34:54,710 --> 00:35:02,750
height ratio like so and then I also

703
00:34:58,519 --> 00:35:05,719
want the the parent align size to

704
00:35:02,750 --> 00:35:08,809
multiply the height ratio so that both

705
00:35:05,719 --> 00:35:12,139
of those inform the total size that the

706
00:35:08,809 --> 00:35:14,480
thing should be at the end of the day so

707
00:35:12,139 --> 00:35:25,250
again moving back into the edit mode

708
00:35:14,480 --> 00:35:27,190
here if I go you know what our cat may

709
00:35:25,250 --> 00:35:30,230
be slightly larger than I had hoped

710
00:35:27,190 --> 00:35:33,500
I'm just gonna go out on a limb here and

711
00:35:30,230 --> 00:35:38,929
say that now the reason for that was

712
00:35:33,500 --> 00:35:41,869
just me being kind of dumb obviously we

713
00:35:38,929 --> 00:35:43,879
have to unpack it why it didn't give me

714
00:35:41,869 --> 00:35:50,119
a conversion error there oh because it

715
00:35:43,880 --> 00:35:51,980
does fit entirely in a float I apologize

716
00:35:50,119 --> 00:35:54,500
for making a huge cat that could have

717
00:35:51,980 --> 00:35:55,608
destroyed the entire world I will try to

718
00:35:54,500 --> 00:35:59,480
keep that to a minimum and let's try

719
00:35:55,608 --> 00:36:06,219
that one more time and and now let's try

720
00:35:59,480 --> 00:36:09,429
and play with that part of it right yeah

721
00:36:06,219 --> 00:36:09,429
pick that

722
00:36:10,420 --> 00:36:17,889
so let's see now if I want to set the

723
00:36:16,989 --> 00:36:22,689
size of this thing

724
00:36:17,889 --> 00:36:25,118
I should be able to write um so this

725
00:36:22,690 --> 00:36:28,269
lets me put in an adjustment value right

726
00:36:25,119 --> 00:36:30,338
so I can change if I want its size to be

727
00:36:28,268 --> 00:36:33,399
different again that's not the entity

728
00:36:30,338 --> 00:36:36,190
size that's just the size of the

729
00:36:33,400 --> 00:36:38,528
attachment point in this case one of the

730
00:36:36,190 --> 00:36:46,720
problems that I see here is I can't seem

731
00:36:38,528 --> 00:36:49,028
to get to the other the other piece

732
00:36:46,719 --> 00:36:57,730
doesn't seem to be available like I

733
00:36:49,028 --> 00:37:00,429
don't know where the head is we probably

734
00:36:57,730 --> 00:37:03,068
should have the other pieces available

735
00:37:00,429 --> 00:37:04,239
in this case oh well and you know the

736
00:37:03,068 --> 00:37:08,048
reason for that is because it's not

737
00:37:04,239 --> 00:37:13,449
attachable I suppose now that I think

738
00:37:08,048 --> 00:37:15,250
about it right gotta work on this pick

739
00:37:13,449 --> 00:37:20,348
the ability to pick those things and

740
00:37:15,250 --> 00:37:24,460
center around them so yeah if I add the

741
00:37:20,349 --> 00:37:26,528
base of neck that should be the thing

742
00:37:24,460 --> 00:37:29,920
that allows the head to show up now that

743
00:37:26,528 --> 00:37:39,579
I think about it because there it is now

744
00:37:29,920 --> 00:37:46,869
yeah so looking at this right now if I

745
00:37:39,579 --> 00:37:48,190
want to I should be able to I probably

746
00:37:46,869 --> 00:37:50,970
want to be able to turn off that

747
00:37:48,190 --> 00:37:53,349
highlight as well that highlight there

748
00:37:50,969 --> 00:37:54,788
we need to start making a list of all

749
00:37:53,349 --> 00:37:57,490
the things I'd like to do but you can

750
00:37:54,789 --> 00:38:01,019
see I can change the scale there right

751
00:37:57,489 --> 00:38:04,989
of the head as its attachment point and

752
00:38:01,018 --> 00:38:08,439
if I I'm on the body I can also change

753
00:38:04,989 --> 00:38:10,209
it so the attachment can change it on

754
00:38:08,440 --> 00:38:13,568
either side which is what I wanted and

755
00:38:10,210 --> 00:38:18,730
if I change this one it only changes me

756
00:38:13,568 --> 00:38:21,690
not my children I don't know if we want

757
00:38:18,730 --> 00:38:21,690
that or not

758
00:38:24,400 --> 00:38:28,900
that's kind of a tough one

759
00:38:42,650 --> 00:38:54,840
so what I will say about that is like

760
00:38:45,030 --> 00:38:56,160
I'm not really sure why I would have

761
00:38:54,840 --> 00:38:58,470
thought that that should have cascaded

762
00:38:56,159 --> 00:39:00,210
and the reason that I would have thought

763
00:38:58,469 --> 00:39:02,250
that it would cascaded is because when

764
00:39:00,210 --> 00:39:05,369
we actually go through doing this we

765
00:39:02,250 --> 00:39:07,110
save the scaled x and y axis and that's

766
00:39:05,369 --> 00:39:10,320
what we actually used to reinterpret the

767
00:39:07,110 --> 00:39:13,110
sprite size later so if you were to put

768
00:39:10,320 --> 00:39:14,970
in a higher value here which is f what

769
00:39:13,110 --> 00:39:22,500
we're doing I would have thought that

770
00:39:14,969 --> 00:39:24,539
that would have caused the children o so

771
00:39:22,500 --> 00:39:27,329
it properly scales the location it just

772
00:39:24,539 --> 00:39:31,139
doesn't scale their individual size so

773
00:39:27,329 --> 00:39:34,500
not exactly what I would expect it so I

774
00:39:31,139 --> 00:39:42,509
don't know which one of those we want to

775
00:39:34,500 --> 00:39:49,469
do my guess is we want it the way it is

776
00:39:42,510 --> 00:39:58,080
now you know like my guess is we want it

777
00:39:49,469 --> 00:39:59,759
to be my guess is we don't want it to

778
00:39:58,079 --> 00:40:01,858
scale the children because these are

779
00:39:59,760 --> 00:40:03,390
adjustments for bitmap size differences

780
00:40:01,858 --> 00:40:06,090
and so I don't think we want to do it

781
00:40:03,389 --> 00:40:08,608
it's really easy for us to do it what we

782
00:40:06,090 --> 00:40:12,869
can do is we just have another rake here

783
00:40:08,608 --> 00:40:16,639
that's just like scales you know and we

784
00:40:12,869 --> 00:40:19,230
just save off the the scaling ratio as

785
00:40:16,639 --> 00:40:21,559
necessary I don't think we want that

786
00:40:19,230 --> 00:40:21,559
though

787
00:40:27,159 --> 00:40:40,399
so I think that maybe the only thing I

788
00:40:30,230 --> 00:40:43,010
really want to do there yeah I think

789
00:40:40,400 --> 00:40:44,269
that's that's probably about it so one

790
00:40:43,010 --> 00:40:46,400
of the things that we may want to

791
00:40:44,269 --> 00:40:49,369
consider while we're editing this stuff

792
00:40:46,400 --> 00:40:50,599
is if I go into the at like us like I

793
00:40:49,369 --> 00:40:54,319
said well we're trying to figure out

794
00:40:50,599 --> 00:40:56,809
what the final file format is inside

795
00:40:54,320 --> 00:41:04,160
here I don't know to what extent we may

796
00:40:56,809 --> 00:41:09,489
want to add one more thing which is a Z

797
00:41:04,159 --> 00:41:09,489
bias value you know what I mean

798
00:41:19,639 --> 00:41:27,059
like just thinking it through I feel

799
00:41:22,710 --> 00:41:28,980
like I want to have like the ability to

800
00:41:27,059 --> 00:41:34,019
say that this thing should be biased

801
00:41:28,980 --> 00:41:36,240
behind or in front of the parent piece

802
00:41:34,019 --> 00:41:39,409
but maybe that doesn't really need to be

803
00:41:36,239 --> 00:41:39,409
specified here

804
00:41:55,559 --> 00:42:10,509
I'm kind of torn on that because there's

805
00:42:08,889 --> 00:42:13,960
really two places you can put that and

806
00:42:10,510 --> 00:42:22,330
one of them is inside here but the other

807
00:42:13,960 --> 00:42:27,400
one is inside the entity and so inside

808
00:42:22,329 --> 00:42:29,110
the visible piece here we could have

809
00:42:27,400 --> 00:42:37,809
that piece of information

810
00:42:29,110 --> 00:42:40,809
oops no no where did the little nub

811
00:42:37,809 --> 00:42:44,559
thing go there's a little earpiece thing

812
00:42:40,809 --> 00:42:48,159
that that sticks this thing in your ear

813
00:42:44,559 --> 00:42:51,029
and it like came off of my headphone and

814
00:42:48,159 --> 00:42:54,789
now I don't have any idea where it went

815
00:42:51,030 --> 00:42:56,200
where did that go this is gonna be like

816
00:42:54,789 --> 00:43:09,550
impossible to find oh there it is wow

817
00:42:56,199 --> 00:43:11,649
that got flung far my goodness I never

818
00:43:09,550 --> 00:43:14,980
had that happen on stream before or not

819
00:43:11,650 --> 00:43:16,720
on stream before I guess I suppose uh so

820
00:43:14,980 --> 00:43:23,139
yeah I would I guess what I would say

821
00:43:16,719 --> 00:43:24,759
there is I guess we'll just not specify

822
00:43:23,139 --> 00:43:27,519
that in the art assets at this at this

823
00:43:24,760 --> 00:43:31,270
point because it's not super art asset

824
00:43:27,519 --> 00:43:33,219
esque I guess especially because like

825
00:43:31,269 --> 00:43:34,840
any animation that would happen wouldn't

826
00:43:33,219 --> 00:43:38,019
be specified in there and you could see

827
00:43:34,840 --> 00:43:40,240
the animation wanting to move behind and

828
00:43:38,019 --> 00:43:42,130
in front of things potentially so I

829
00:43:40,239 --> 00:43:43,629
guess I'm gonna go ahead and say it is

830
00:43:42,130 --> 00:43:47,530
what it is at the moment and we really

831
00:43:43,630 --> 00:43:51,760
don't need another element of it that's

832
00:43:47,530 --> 00:43:55,300
what I'm gonna say alright so taking a

833
00:43:51,760 --> 00:43:57,780
look a little bit further down in this

834
00:43:55,300 --> 00:44:02,080
process now we need to have some way of

835
00:43:57,780 --> 00:44:07,150
actually going and writing this stuff

836
00:44:02,079 --> 00:44:08,088
out writing it back to the HHA I think

837
00:44:07,150 --> 00:44:11,680
is actually

838
00:44:08,088 --> 00:44:17,568
totally trivial because all it is is

839
00:44:11,679 --> 00:44:24,108
calling the he's like calling the dirty

840
00:44:17,568 --> 00:44:26,808
flag I think that's really it so like

841
00:44:24,108 --> 00:44:35,420
when you hit save all it really needs to

842
00:44:26,809 --> 00:44:37,219
do is when you do that dirty flag then

843
00:44:35,420 --> 00:44:39,259
you just yeah then you just go ahead and

844
00:44:37,219 --> 00:44:43,849
set it so I think what we would do is

845
00:44:39,259 --> 00:44:46,670
say all right if you're gonna write out

846
00:44:43,849 --> 00:44:49,130
to an HHA then we just run through what

847
00:44:46,670 --> 00:44:50,809
you've edited and we see which hij files

848
00:44:49,130 --> 00:44:55,459
would need to be modified and then we

849
00:44:50,809 --> 00:44:58,278
write back to them I think that's really

850
00:44:55,458 --> 00:45:00,348
it now granted I don't know if you're

851
00:44:58,278 --> 00:45:02,688
allowed to edit multiple HHA files at a

852
00:45:00,349 --> 00:45:06,739
time I don't really remember what we

853
00:45:02,688 --> 00:45:08,228
required as far as that's as far as that

854
00:45:06,739 --> 00:45:11,449
goes

855
00:45:08,228 --> 00:45:15,468
it looks like allow editing would be the

856
00:45:11,449 --> 00:45:18,979
thing and so I suppose we can just say

857
00:45:15,469 --> 00:45:21,949
we'll set the modified flag anytime that

858
00:45:18,978 --> 00:45:25,998
we actually touch one of these things

859
00:45:21,949 --> 00:45:29,650
and go from there now we could be a

860
00:45:25,998 --> 00:45:34,848
little bit more careful about that and

861
00:45:29,650 --> 00:45:40,309
we probably should be so so here's the

862
00:45:34,849 --> 00:45:43,068
thing if we just inside editor like you

863
00:45:40,309 --> 00:45:45,048
know when we do an edit change if all we

864
00:45:43,068 --> 00:45:48,108
did was say set the modified flag any

865
00:45:45,048 --> 00:45:51,018
time we touch a particular HHA that's

866
00:45:48,108 --> 00:45:59,598
not fantastic because what that would do

867
00:45:51,018 --> 00:46:02,568
is it will make it so that our it will

868
00:45:59,599 --> 00:46:06,170
effectively make it so that our hhas

869
00:46:02,568 --> 00:46:09,768
will be set to dirty whether or not undo

870
00:46:06,170 --> 00:46:12,459
has undone the changes to them so a

871
00:46:09,768 --> 00:46:15,858
potentially more useful way to do it or

872
00:46:12,458 --> 00:46:19,129
powerful if you will for the user would

873
00:46:15,858 --> 00:46:21,110
be to actually spin through the undo

874
00:46:19,130 --> 00:46:23,300
buffer and see

875
00:46:21,110 --> 00:46:25,280
there's anything in it and if there is

876
00:46:23,300 --> 00:46:29,180
for each thing that's in the undo buffer

877
00:46:25,280 --> 00:46:31,450
mark the HHA file at that point you had

878
00:46:29,179 --> 00:46:31,449
I mean

879
00:46:47,619 --> 00:46:58,559
I think that would do it now there's one

880
00:46:54,400 --> 00:46:58,559
thing that we can't really do

881
00:47:05,730 --> 00:47:10,230
there's one thing that we can't really

882
00:47:07,500 --> 00:47:14,670
avoid which is that since these edits

883
00:47:10,230 --> 00:47:19,588
kind of happen directly into the memory

884
00:47:14,670 --> 00:47:24,930
that we're using if the user wants to

885
00:47:19,588 --> 00:47:27,750
update an HHA they kind of have to save

886
00:47:24,929 --> 00:47:31,828
it well I guess they could just not save

887
00:47:27,750 --> 00:47:38,190
it though but they would still be

888
00:47:31,829 --> 00:47:39,839
written to so I guess I'm gonna say

889
00:47:38,190 --> 00:47:43,858
we're just we're not gonna support the

890
00:47:39,838 --> 00:47:46,289
following thing if you make changes to a

891
00:47:43,858 --> 00:47:49,858
file if you make changes in the editor

892
00:47:46,289 --> 00:47:52,440
you are not allowed to update the art

893
00:47:49,858 --> 00:47:55,818
assets using the import pass without

894
00:47:52,440 --> 00:48:01,019
also agreeing to save your old changes

895
00:47:55,818 --> 00:48:05,489
make sense so basically like the update

896
00:48:01,019 --> 00:48:08,369
flag the the Save button has to be like

897
00:48:05,489 --> 00:48:11,639
there's two things there's save and

898
00:48:08,369 --> 00:48:14,400
there's you know import and save but

899
00:48:11,639 --> 00:48:22,710
there is no import without saving like

900
00:48:14,400 --> 00:48:25,048
that's just not allowed I think that's

901
00:48:22,710 --> 00:48:28,920
where we're at we could change the

902
00:48:25,048 --> 00:48:31,170
importer to facilitate an import that

903
00:48:28,920 --> 00:48:33,420
doesn't do that I just don't know that

904
00:48:31,170 --> 00:48:35,490
we want to go quite that far what that

905
00:48:33,420 --> 00:48:38,250
would entail is instead of us writing

906
00:48:35,489 --> 00:48:40,169
the data out to the actual HHA we would

907
00:48:38,250 --> 00:48:42,000
just write it out to a buffer in memory

908
00:48:40,170 --> 00:48:49,608
that doesn't get committed back to the

909
00:48:42,000 --> 00:48:49,608
HHA until you hit save right

910
00:48:51,659 --> 00:48:56,278
and I don't necessarily see anything

911
00:48:53,818 --> 00:48:57,929
wrong with that so I don't know maybe we

912
00:48:56,278 --> 00:49:00,268
should just do that maybe everything

913
00:48:57,929 --> 00:49:03,318
should be going through that path I just

914
00:49:00,268 --> 00:49:03,318
don't know if it's worth it

915
00:49:23,719 --> 00:49:28,250
I'm kind of conflicted about that but

916
00:49:26,179 --> 00:49:29,299
you know in order just to give you an

917
00:49:28,250 --> 00:49:33,769
idea of what I mean

918
00:49:29,300 --> 00:49:37,369
so right now inside right asset stream

919
00:49:33,769 --> 00:49:39,679
and and string and data right so we've

920
00:49:37,369 --> 00:49:42,858
got we've got this right asset data

921
00:49:39,679 --> 00:49:46,219
thing and I think almost everything is

922
00:49:42,858 --> 00:49:47,929
like it's like bumped up in there right

923
00:49:46,219 --> 00:49:51,559
so everything funnels down to write a

924
00:49:47,929 --> 00:49:54,500
Sat data and here it is so what you

925
00:49:51,559 --> 00:49:56,299
would do is you would take this here

926
00:49:54,500 --> 00:49:58,280
this write a Sat data function and

927
00:49:56,300 --> 00:50:00,380
rather than calling platform write data

928
00:49:58,280 --> 00:50:01,940
to file you would actually just allocate

929
00:50:00,380 --> 00:50:03,590
a buffer you would stick the data into

930
00:50:01,940 --> 00:50:05,840
the buffer and you would chain it on to

931
00:50:03,590 --> 00:50:07,579
a linked list that's at off the end of

932
00:50:05,840 --> 00:50:10,220
the asset structure that basically said

933
00:50:07,579 --> 00:50:13,000
here's all the rights I would do if I

934
00:50:10,219 --> 00:50:16,000
was going to actually save the HHA file

935
00:50:13,000 --> 00:50:16,000
right

936
00:50:38,880 --> 00:50:44,039
does anyone have any real opinions about

937
00:50:41,608 --> 00:50:54,389
this does anyone does anyone care does

938
00:50:44,039 --> 00:50:57,240
anyone care at all I don't know my

939
00:50:54,389 --> 00:50:59,518
friends I don't know so I guess what

940
00:50:57,239 --> 00:51:01,199
I'll say there is I think it's six of

941
00:50:59,518 --> 00:51:04,018
one half dozen of the other

942
00:51:01,199 --> 00:51:06,838
and I'm not like super concerned about

943
00:51:04,018 --> 00:51:07,588
it so I think I'll just say look let's

944
00:51:06,838 --> 00:51:10,889
do this

945
00:51:07,588 --> 00:51:14,940
for the moment in here where we've got

946
00:51:10,889 --> 00:51:18,889
our check for art changes thing let's go

947
00:51:14,940 --> 00:51:22,039
ahead and and save that is actually

948
00:51:18,889 --> 00:51:25,558
going to be bound to an in-game editor

949
00:51:22,039 --> 00:51:28,309
feature so you know in here we

950
00:51:25,559 --> 00:51:31,410
effectively have we've got the save key

951
00:51:28,309 --> 00:51:38,009
and we've also got another key which is

952
00:51:31,409 --> 00:51:42,268
like import and save something like that

953
00:51:38,009 --> 00:51:44,490
right and that one is always available

954
00:51:42,268 --> 00:51:51,449
because you can always look to see if

955
00:51:44,489 --> 00:51:53,278
there's stuff stuff there to do so then

956
00:51:51,449 --> 00:51:55,439
what we would say is you know any time

957
00:51:53,278 --> 00:51:58,289
that's gonna happen we would we would go

958
00:51:55,440 --> 00:52:01,950
to check for art changes and actually

959
00:51:58,289 --> 00:52:06,839
call that and it would you know kind of

960
00:52:01,949 --> 00:52:09,538
do its thing and we would need the save

961
00:52:06,838 --> 00:52:11,788
feature to actually be available here so

962
00:52:09,539 --> 00:52:18,049
like we would need to then do elect if

963
00:52:11,789 --> 00:52:24,180
you know should save we put that in here

964
00:52:18,048 --> 00:52:26,849
and that's up to us anytime we want to

965
00:52:24,179 --> 00:52:28,308
actually implement it which will be

966
00:52:26,849 --> 00:52:33,359
coming up shortly

967
00:52:28,309 --> 00:52:35,548
we put true in there you know I mean and

968
00:52:33,358 --> 00:52:37,500
so that means we would be able to have

969
00:52:35,548 --> 00:52:40,139
either of those two things call it also

970
00:52:37,500 --> 00:52:42,630
means we could avoid doing that on

971
00:52:40,139 --> 00:52:45,509
startup so in here we have an important

972
00:52:42,630 --> 00:52:49,829
import and save feature that we can

973
00:52:45,509 --> 00:52:51,719
access any time we want and you know we

974
00:52:49,829 --> 00:52:57,390
don't have to use it if we don't want to

975
00:52:51,719 --> 00:53:01,799
right so I think that's all well and

976
00:52:57,389 --> 00:53:03,750
good looking at the way this codes gonna

977
00:53:01,800 --> 00:53:05,609
play out I think I'm fine with that

978
00:53:03,750 --> 00:53:10,079
so that means that inside the asset

979
00:53:05,608 --> 00:53:15,529
system when we actually do our our check

980
00:53:10,079 --> 00:53:18,359
for our changes there this can go away

981
00:53:15,530 --> 00:53:21,210
right so we don't need to do it on

982
00:53:18,358 --> 00:53:24,989
startup anymore you can just if you

983
00:53:21,210 --> 00:53:26,670
wanted to pull in art assets you could

984
00:53:24,989 --> 00:53:29,399
you know what I mean

985
00:53:26,670 --> 00:53:32,159
and you we could even make a thing

986
00:53:29,400 --> 00:53:33,539
that's like force update so if we want

987
00:53:32,159 --> 00:53:36,509
we can even make a button that's like

988
00:53:33,539 --> 00:53:39,779
update everything even if it doesn't

989
00:53:36,510 --> 00:53:43,010
look dirty I'm telling you right now to

990
00:53:39,780 --> 00:53:48,569
pretend that it is so for sorry import'

991
00:53:43,010 --> 00:53:53,550
of this stuff right so I think that

992
00:53:48,568 --> 00:53:55,889
would do it and that would that would

993
00:53:53,550 --> 00:53:59,039
basically be it so you know if we then

994
00:53:55,889 --> 00:54:03,019
went in here and said well you know

995
00:53:59,039 --> 00:54:07,050
we've got this local HHA file here and

996
00:54:03,019 --> 00:54:09,869
we delete it you know what I mean

997
00:54:07,050 --> 00:54:13,980
then when I run the game in theory I

998
00:54:09,869 --> 00:54:18,420
come in here and you know we've got you

999
00:54:13,980 --> 00:54:23,280
know no art assets right if I create one

1000
00:54:18,420 --> 00:54:25,050
of those as a dummy file and leave it

1001
00:54:23,280 --> 00:54:28,890
there then the game opens in edit mode

1002
00:54:25,050 --> 00:54:32,849
and you know I still can't actually see

1003
00:54:28,889 --> 00:54:34,799
anything as you can see and let like you

1004
00:54:32,849 --> 00:54:37,220
know nothing's here but if I go into the

1005
00:54:34,800 --> 00:54:39,240
editor and now say look do an import

1006
00:54:37,219 --> 00:54:43,739
would probably be nice we added a

1007
00:54:39,239 --> 00:54:44,699
progress bar but you know beggars can't

1008
00:54:43,739 --> 00:54:47,309
be choosers

1009
00:54:44,699 --> 00:54:49,439
it'll import everything and then return

1010
00:54:47,309 --> 00:54:54,358
us to the game and we can call that any

1011
00:54:49,440 --> 00:54:59,220
time we want so we can you know call the

1012
00:54:54,358 --> 00:55:02,460
import and save anytime we want to

1013
00:54:59,219 --> 00:55:05,129
update art assets so you know in theory

1014
00:55:02,460 --> 00:55:05,519
that means if we you know we go in here

1015
00:55:05,130 --> 00:55:08,099
and

1016
00:55:05,519 --> 00:55:12,570
say well you know we want to update some

1017
00:55:08,099 --> 00:55:15,269
of our art work now so we've got like

1018
00:55:12,570 --> 00:55:16,440
one of these stone floors that we're on

1019
00:55:15,269 --> 00:55:18,150
right now I think we're on a stone floor

1020
00:55:16,440 --> 00:55:21,840
yeah so we've got one of these stone

1021
00:55:18,150 --> 00:55:27,660
floors you know we go in to edit it or

1022
00:55:21,840 --> 00:55:30,350
whatever and well you know I guess let

1023
00:55:27,659 --> 00:55:30,349
me do it this way

1024
00:55:37,800 --> 00:55:44,360
load up the bring out the

1025
00:55:50,659 --> 00:56:10,859
okay so if we want to write in I just

1026
00:55:57,570 --> 00:56:15,720
want to like do some change so I save

1027
00:56:10,860 --> 00:56:17,370
out the PNG there it goes if I then was

1028
00:56:15,719 --> 00:56:21,239
in here and said well rien port that

1029
00:56:17,369 --> 00:56:22,650
please in theory it should write like at

1030
00:56:21,239 --> 00:56:24,779
least I think it should so it doesn't

1031
00:56:22,650 --> 00:56:30,410
look like it should it doesn't look like

1032
00:56:24,780 --> 00:56:32,790
it did mm-hmm

1033
00:56:30,409 --> 00:56:34,679
not sure why we should see why it didn't

1034
00:56:32,789 --> 00:56:42,900
decide it it didn't want to update that

1035
00:56:34,679 --> 00:56:47,069
I did save it didn't I yeah so I'm not

1036
00:56:42,900 --> 00:56:50,400
sure why that oh here's another question

1037
00:56:47,070 --> 00:56:52,950
we don't flush our textures currently do

1038
00:56:50,400 --> 00:56:54,240
we so I bet it did update and we just

1039
00:56:52,949 --> 00:56:56,039
don't flush the textures so that's

1040
00:56:54,239 --> 00:56:57,599
another thing we can do today is for us

1041
00:56:56,039 --> 00:57:00,119
flushing on textures so I assume it

1042
00:56:57,599 --> 00:57:04,529
probably did update and now if you look

1043
00:57:00,119 --> 00:57:07,589
yeah right so it would be nice if we

1044
00:57:04,530 --> 00:57:09,690
force flush the textures that were in

1045
00:57:07,590 --> 00:57:14,640
question there I don't know how specific

1046
00:57:09,690 --> 00:57:18,240
we want to be about that but if we force

1047
00:57:14,639 --> 00:57:23,670
flush the textures then what we would

1048
00:57:18,239 --> 00:57:25,439
want to do is in the game assets we

1049
00:57:23,670 --> 00:57:31,920
would just want to make sure everything

1050
00:57:25,440 --> 00:57:36,840
got resent down to the to the graphics

1051
00:57:31,920 --> 00:57:38,550
card doing so would require yeah we want

1052
00:57:36,840 --> 00:57:41,160
just some kind of a full flush feature

1053
00:57:38,550 --> 00:57:43,620
so we just say look really there's been

1054
00:57:41,159 --> 00:57:46,409
an update go ahead and and flush

1055
00:57:43,619 --> 00:57:50,130
everything so in order to do that what

1056
00:57:46,409 --> 00:57:52,889
we would want to do is it's basically

1057
00:57:50,130 --> 00:57:59,970
have a bunch of free free asset calls

1058
00:57:52,889 --> 00:58:02,069
right like we'd want to write in here we

1059
00:57:59,969 --> 00:58:02,849
would want to go ahead and and make sure

1060
00:58:02,070 --> 00:58:05,420
there was some way we could

1061
00:58:02,849 --> 00:58:08,549
[Music]

1062
00:58:05,420 --> 00:58:09,750
we could do that we've never had to do

1063
00:58:08,550 --> 00:58:13,470
that because currently the only thing

1064
00:58:09,750 --> 00:58:20,519
time we ever evict is in the case where

1065
00:58:13,469 --> 00:58:22,439
we the only time we ever evicted

1066
00:58:20,519 --> 00:58:25,829
textures is when we actually need to put

1067
00:58:22,440 --> 00:58:27,720
a new one in there so we do want some

1068
00:58:25,829 --> 00:58:29,819
way of doing that and I'm not sure how

1069
00:58:27,719 --> 00:58:43,559
we would really do that probably

1070
00:58:29,820 --> 00:58:45,420
something where yeah some of the stuff

1071
00:58:43,559 --> 00:58:52,579
kind of needs to get rewritten anyway so

1072
00:58:45,420 --> 00:58:56,960
you can see it here where it will do its

1073
00:58:52,579 --> 00:58:56,960
reclamation there right it's looking for

1074
00:58:57,199 --> 00:59:00,919
extra bitmap space

1075
00:59:07,639 --> 00:59:12,289
so you know looking at this you can kind

1076
00:59:10,130 --> 00:59:14,150
of see why we you know why we probably

1077
00:59:12,289 --> 00:59:16,969
want to update this code anyway right

1078
00:59:14,150 --> 00:59:19,610
because since we have actual texture

1079
00:59:16,969 --> 00:59:20,989
stores now whereas before we always like

1080
00:59:19,610 --> 00:59:22,370
loaded and process the memory directly

1081
00:59:20,989 --> 00:59:26,419
from the asset system which is more

1082
00:59:22,369 --> 00:59:28,250
efficient that way it seems like

1083
00:59:26,420 --> 00:59:31,039
probably what we would want to do here

1084
00:59:28,250 --> 00:59:33,730
right is we want to be able to just load

1085
00:59:31,039 --> 00:59:38,150
it directly into the texture store

1086
00:59:33,730 --> 00:59:40,010
probably but you can see how we're doing

1087
00:59:38,150 --> 00:59:42,860
it like we've got this remove asset

1088
00:59:40,010 --> 00:59:45,590
header from list right and you can see

1089
00:59:42,860 --> 00:59:47,870
us doing like merges and stuff like that

1090
00:59:45,590 --> 00:59:50,890
you can you can see us doing that all in

1091
00:59:47,869 --> 00:59:54,380
here under the acquire asset memory

1092
00:59:50,889 --> 00:59:57,559
banner but really none of that's

1093
00:59:54,380 --> 01:00:00,230
necessary in to a large extent

1094
00:59:57,559 --> 01:00:01,880
especially not for textures for audio

1095
01:00:00,230 --> 01:00:04,309
we'd have to kind of think about how we

1096
01:00:01,880 --> 01:00:07,340
want that to work because audio might

1097
01:00:04,309 --> 01:00:09,289
want something there but in terms of

1098
01:00:07,340 --> 01:00:10,640
textures again we don't really need that

1099
01:00:09,289 --> 01:00:13,670
because we don't need to store our

1100
01:00:10,639 --> 01:00:17,239
textures in memory ever because they

1101
01:00:13,670 --> 01:00:21,220
always have to be on the GPU anyway or

1102
01:00:17,239 --> 01:00:24,229
in the case of the renderer for the game

1103
01:00:21,219 --> 01:00:27,319
the software renderer they would want to

1104
01:00:24,230 --> 01:00:29,269
be in the software renderers memory so I

1105
01:00:27,320 --> 01:00:31,510
don't really know what I want to do

1106
01:00:29,269 --> 01:00:31,509
there

1107
01:00:47,900 --> 01:00:52,119
I really couldn't say

1108
01:00:56,099 --> 01:01:02,339
what I would like to do is make it so

1109
01:01:00,300 --> 01:01:07,160
that what happens is our asynchronous

1110
01:01:02,340 --> 01:01:09,960
loading code is really just code that

1111
01:01:07,159 --> 01:01:12,000
uses a temporary transfer buffer moves

1112
01:01:09,960 --> 01:01:14,309
the data into the transfer buffer

1113
01:01:12,000 --> 01:01:18,030
generates the MIT Maps and then uploads

1114
01:01:14,309 --> 01:01:21,199
it to the graphics card never actually

1115
01:01:18,030 --> 01:01:23,940
tries to allocate any permanent storage

1116
01:01:21,199 --> 01:01:27,500
because that's just not what it would be

1117
01:01:23,940 --> 01:01:27,500
used for right

1118
01:01:45,699 --> 01:01:53,169
yeah I just don't know I really just

1119
01:01:51,190 --> 01:02:02,500
don't know what what to what to make of

1120
01:01:53,170 --> 01:02:05,230
it I think there's a lot of things we

1121
01:02:02,500 --> 01:02:08,500
could do I don't know if it's worth our

1122
01:02:05,230 --> 01:02:10,389
time to do that right now but at the

1123
01:02:08,500 --> 01:02:11,980
same time like why I don't really want

1124
01:02:10,389 --> 01:02:15,298
to spend time updating this code because

1125
01:02:11,980 --> 01:02:15,298
we really just don't need it anymore

1126
01:02:17,068 --> 01:02:21,579
you know it's kind of just dead code and

1127
01:02:19,449 --> 01:02:23,259
you know the audio system could be

1128
01:02:21,579 --> 01:02:25,119
similarly merged to work with flat

1129
01:02:23,260 --> 01:02:30,400
buffer sizes and then you'd always have

1130
01:02:25,119 --> 01:02:33,539
just a nice kind of round round robin

1131
01:02:30,400 --> 01:02:35,769
scheme of using buffers upload buffers

1132
01:02:33,539 --> 01:02:39,849
and everything would be nice and cleaned

1133
01:02:35,769 --> 01:02:42,130
so that seems a lot more sensible than

1134
01:02:39,849 --> 01:02:44,170
doing it the way we're doing it here

1135
01:02:42,130 --> 01:02:46,088
which was made to be a lot more flexible

1136
01:02:44,170 --> 01:02:51,818
than it needs to be and so therefore is

1137
01:02:46,088 --> 01:02:54,489
a lot more complicated I guess that's

1138
01:02:51,818 --> 01:02:56,798
what I would say about that if we go

1139
01:02:54,489 --> 01:03:03,489
look at how texture apps work at the

1140
01:02:56,798 --> 01:03:08,980
moment so inside the the handmade

1141
01:03:03,489 --> 01:03:15,159
renderer you got these texture apps here

1142
01:03:08,980 --> 01:03:18,190
and the texture app update and we should

1143
01:03:15,159 --> 01:03:19,989
have this texture app list here I think

1144
01:03:18,190 --> 01:03:24,639
generally speaking what you would do is

1145
01:03:19,989 --> 01:03:26,469
you would want to have a limited number

1146
01:03:24,639 --> 01:03:28,239
of those which is however many texture

1147
01:03:26,469 --> 01:03:31,689
uploads you want to have in flight at

1148
01:03:28,239 --> 01:03:35,919
once and then you just leave those

1149
01:03:31,690 --> 01:03:38,170
allocated and every time you need to do

1150
01:03:35,920 --> 01:03:40,210
a load you load into whatever texture

1151
01:03:38,170 --> 01:03:41,230
apps you have available if you don't

1152
01:03:40,210 --> 01:03:44,559
have a texture off available you just

1153
01:03:41,230 --> 01:03:46,809
don't issue the load and that's the

1154
01:03:44,559 --> 01:03:50,290
entirety of what you do you know what I

1155
01:03:46,809 --> 01:03:52,059
mean and then the asset system doesn't

1156
01:03:50,289 --> 01:03:56,829
actually have any memory at all for

1157
01:03:52,059 --> 01:03:59,470
textures it only has memory for it only

1158
01:03:56,829 --> 01:04:08,760
has memory for audio

1159
01:03:59,469 --> 01:04:08,759
and that's it so that seems good

1160
01:04:22,300 --> 01:04:31,800
and I have I have no no I have no beef

1161
01:04:29,230 --> 01:04:31,800
about that

1162
01:04:44,239 --> 01:04:53,269
yeah I think that seems pretty good it

1163
01:04:50,030 --> 01:04:56,869
does make the texture up texture op list

1164
01:04:53,269 --> 01:04:59,179
texture op update stuff it does make

1165
01:04:56,869 --> 01:05:02,240
that a little bit maybe want to be more

1166
01:04:59,179 --> 01:05:04,429
on the app side than it currently is so

1167
01:05:02,239 --> 01:05:07,519
I'm not really sure that that doesn't

1168
01:05:04,429 --> 01:05:10,098
need to get pulled out further so rather

1169
01:05:07,519 --> 01:05:15,889
than looking like this so much it's kind

1170
01:05:10,099 --> 01:05:18,050
of more of a it's kind of more of a

1171
01:05:15,889 --> 01:05:22,480
thing that you allocate and then you

1172
01:05:18,050 --> 01:05:25,130
just pass in the list which I think we

1173
01:05:22,480 --> 01:05:26,809
kind of flirted with but you know I

1174
01:05:25,130 --> 01:05:30,470
think now we can kind of see how that

1175
01:05:26,809 --> 01:05:32,059
really should probably work on the other

1176
01:05:30,469 --> 01:05:35,000
hand you could make the argument that

1177
01:05:32,059 --> 01:05:37,099
you want that to be something that is

1178
01:05:35,000 --> 01:05:39,320
mapped in video card memory and then you

1179
01:05:37,099 --> 01:05:43,640
do the transfer that way so I don't know

1180
01:05:39,320 --> 01:05:45,619
it's it's a hard it's a hard call to

1181
01:05:43,639 --> 01:05:47,690
make and I'm not really sure exactly how

1182
01:05:45,619 --> 01:05:50,390
you want that to play out so we'll have

1183
01:05:47,690 --> 01:05:51,920
to see there as well well that's kind of

1184
01:05:50,389 --> 01:05:53,838
just a long way of saying I'm not sure

1185
01:05:51,920 --> 01:05:56,200
how I really feel about that update pass

1186
01:05:53,838 --> 01:05:59,480
and I feel like it really wants to be

1187
01:05:56,199 --> 01:06:01,519
merged with a like when we're doing that

1188
01:05:59,480 --> 01:06:05,320
I would like that to be merged with the

1189
01:06:01,519 --> 01:06:10,280
thing that works here for doing

1190
01:06:05,320 --> 01:06:12,980
on-demand reloading I'm gonna back out

1191
01:06:10,280 --> 01:06:16,910
these changes here and then overwrite

1192
01:06:12,980 --> 01:06:19,809
this back to its original form uh and

1193
01:06:16,909 --> 01:06:22,940
then I guess maybe I'll just try this

1194
01:06:19,809 --> 01:06:25,670
rewrite now I don't know if that's a

1195
01:06:22,940 --> 01:06:27,320
good idea or not but I just explore it

1196
01:06:25,670 --> 01:06:30,320
and see how much of an investment I

1197
01:06:27,320 --> 01:06:33,320
think that's gonna be so looking at how

1198
01:06:30,320 --> 01:06:37,570
we do our loading work you can see here

1199
01:06:33,320 --> 01:06:41,480
you know when it goes to do finalization

1200
01:06:37,570 --> 01:06:44,690
you can see it effectively adding a op

1201
01:06:41,480 --> 01:06:46,940
to this texture op queue here right so

1202
01:06:44,690 --> 01:06:49,880
it's like saying all right I got an OP

1203
01:06:46,940 --> 01:06:52,010
I'm gonna add it to the queue if you

1204
01:06:49,880 --> 01:06:55,510
look at what that actually does

1205
01:06:52,010 --> 01:06:55,510
so here's add up

1206
01:06:57,108 --> 01:07:03,690
if you look at what that does you can

1207
01:07:00,509 --> 01:07:07,460
see here that it tries as well as it can

1208
01:07:03,690 --> 01:07:10,139
to actually get an OP to do the transfer

1209
01:07:07,460 --> 01:07:13,409
and if it can't then it just kind of

1210
01:07:10,139 --> 01:07:15,058
hard crashes right and again I don't

1211
01:07:13,409 --> 01:07:16,679
think that's a particularly good way to

1212
01:07:15,059 --> 01:07:19,829
do this because I think what you would

1213
01:07:16,679 --> 01:07:22,949
rather do is not actually start an

1214
01:07:19,829 --> 01:07:25,499
operation that you can't finish so

1215
01:07:22,949 --> 01:07:30,929
probably what you want to do is when you

1216
01:07:25,498 --> 01:07:33,719
actually go to load like a bitmap in

1217
01:07:30,929 --> 01:07:36,088
this case then one of the things that

1218
01:07:33,719 --> 01:07:39,288
you need to do is begin a task that

1219
01:07:36,088 --> 01:07:42,058
actually has a texture op transfer

1220
01:07:39,289 --> 01:07:45,680
associated with it and if you cannot get

1221
01:07:42,059 --> 01:07:48,480
one of those then you simply don't run

1222
01:07:45,679 --> 01:07:51,358
you know what I mean

1223
01:07:48,480 --> 01:07:53,579
so so that's really more what I want to

1224
01:07:51,358 --> 01:07:57,239
do there and we know ahead of time

1225
01:07:53,579 --> 01:07:59,730
exactly how much memory we need for that

1226
01:07:57,239 --> 01:08:02,189
transfer so it shouldn't be particularly

1227
01:07:59,730 --> 01:08:05,909
hard for us to guarantee that that's the

1228
01:08:02,190 --> 01:08:08,099
case and the renderer should be able to

1229
01:08:05,909 --> 01:08:12,568
satisfy that request for us pretty

1230
01:08:08,099 --> 01:08:14,160
easily you know given that we can

1231
01:08:12,568 --> 01:08:17,238
guarantee that we're always using a

1232
01:08:14,159 --> 01:08:17,238
fixed set of these things

1233
01:08:28,750 --> 01:08:38,289
um yes so that all seems good I'm gonna

1234
01:08:34,930 --> 01:08:41,619
look at begin tasks with memory I also

1235
01:08:38,289 --> 01:08:56,560
don't know why it actually needs the

1236
01:08:41,619 --> 01:08:58,989
memory in this case it's just the memory

1237
01:08:56,560 --> 01:09:04,298
for that is the only thing it actually

1238
01:08:58,989 --> 01:09:07,000
needs I mean these tasks already have

1239
01:09:04,298 --> 01:09:09,338
memory associated with them and I assume

1240
01:09:07,000 --> 01:09:12,279
that that memory gets freed when the

1241
01:09:09,338 --> 01:09:15,009
task is done so honestly we could just

1242
01:09:12,279 --> 01:09:17,310
lean on that at the moment and pretty

1243
01:09:15,009 --> 01:09:20,739
much be done with it because that could

1244
01:09:17,310 --> 01:09:23,470
allocate the space and then that task

1245
01:09:20,739 --> 01:09:29,099
could just be actually considered done

1246
01:09:23,470 --> 01:09:29,100
only when the OP actually gets retired I

1247
01:09:30,960 --> 01:09:36,819
want to see how many of these we planned

1248
01:09:33,430 --> 01:09:40,920
on having I'm again I'm not really sure

1249
01:09:36,819 --> 01:09:40,920
I actually want to do that but

1250
01:09:48,989 --> 01:09:55,119
if we look at where that's actually

1251
01:09:51,310 --> 01:09:56,650
happening here it is in here you can see

1252
01:09:55,119 --> 01:09:59,800
it's looking through a set of tasks that

1253
01:09:56,649 --> 01:10:08,500
it created to actually be able to handle

1254
01:09:59,800 --> 01:10:15,279
that that load right and in terms of how

1255
01:10:08,500 --> 01:10:17,199
those were originally seated there's

1256
01:10:15,279 --> 01:10:20,609
only four of those outstanding at any

1257
01:10:17,199 --> 01:10:20,609
given time right

1258
01:10:36,920 --> 01:10:44,069
yeah it really just feels to me like the

1259
01:10:40,738 --> 01:10:47,578
right thing to do would be to have a

1260
01:10:44,069 --> 01:10:51,179
block and call that you use to upload a

1261
01:10:47,578 --> 01:10:53,488
texture because in some circumstances in

1262
01:10:51,179 --> 01:10:55,679
a on a platform when you where you can

1263
01:10:53,488 --> 01:10:58,919
upload textures asynchronously there's

1264
01:10:55,679 --> 01:11:01,590
no reason to wait around to upload them

1265
01:10:58,920 --> 01:11:03,149
asynchronously and to upload them

1266
01:11:01,590 --> 01:11:04,889
synchronously but we have to do that in

1267
01:11:03,149 --> 01:11:11,279
OpenGL because OpenGL doesn't really

1268
01:11:04,889 --> 01:11:13,679
understand threading properly just tough

1269
01:11:11,279 --> 01:11:15,479
calls tough calls this is probably the

1270
01:11:13,679 --> 01:11:17,069
most intricate part of how things

1271
01:11:15,479 --> 01:11:19,678
usually go right when you've got like

1272
01:11:17,069 --> 01:11:21,299
background loading that wants to do

1273
01:11:19,679 --> 01:11:24,270
something with the GPU that's like the

1274
01:11:21,300 --> 01:11:28,010
worst possible case because you have to

1275
01:11:24,270 --> 01:11:31,460
asynchronous things happening together

1276
01:11:28,010 --> 01:11:34,500
so yeah I'm just not sure how I want to

1277
01:11:31,460 --> 01:11:37,050
how I really want to make that happen

1278
01:11:34,500 --> 01:11:42,029
but what I can say is let's say at the

1279
01:11:37,050 --> 01:11:47,880
very least here if I wanted to look at

1280
01:11:42,029 --> 01:11:51,259
this task stuff here when this actually

1281
01:11:47,880 --> 01:12:01,618
happens I could back off and say well

1282
01:11:51,260 --> 01:12:05,579
you know if I don't get the if I try to

1283
01:12:01,618 --> 01:12:08,219
get the texture up and can't then I just

1284
01:12:05,578 --> 01:12:08,670
won't try to do any of this you know

1285
01:12:08,219 --> 01:12:11,670
what I mean

1286
01:12:08,670 --> 01:12:13,949
I also don't know if immediate like

1287
01:12:11,670 --> 01:12:22,550
let's let's see who actually calls

1288
01:12:13,948 --> 01:12:22,549
immediate is it nobody

1289
01:12:24,510 --> 01:12:39,909
who actually uses that that is not use

1290
01:12:36,998 --> 01:12:46,719
there that is not use there it is not

1291
01:12:39,908 --> 01:12:48,518
used anywhere it doesn't look like so we

1292
01:12:46,719 --> 01:12:50,878
may just not care about that part at all

1293
01:12:48,519 --> 01:12:50,878
anyway

1294
01:13:08,390 --> 01:13:12,600
so literally no one ever used the

1295
01:13:10,890 --> 01:13:15,060
immediate thing anymore it used to be

1296
01:13:12,600 --> 01:13:16,380
used for I think background compositing

1297
01:13:15,060 --> 01:13:17,270
or something like that but it's not used

1298
01:13:16,380 --> 01:13:20,130
anymore

1299
01:13:17,270 --> 01:13:23,570
so that's kind of good because it means

1300
01:13:20,130 --> 01:13:25,890
we don't have to handle that case anyway

1301
01:13:23,569 --> 01:13:30,059
but what I was sort of saying here is

1302
01:13:25,890 --> 01:13:34,980
like we could also you know wrap this so

1303
01:13:30,060 --> 01:13:38,310
you know this looks like this we could

1304
01:13:34,979 --> 01:13:40,619
wrap this part here you know like did we

1305
01:13:38,310 --> 01:13:43,320
get a texture up and if we didn't get a

1306
01:13:40,619 --> 01:13:48,059
texture up then don't bother trying to

1307
01:13:43,319 --> 01:13:51,479
you know actually make this part work at

1308
01:13:48,060 --> 01:13:53,130
all because we won't be able to transfer

1309
01:13:51,479 --> 01:13:57,809
the thing that we load so it doesn't

1310
01:13:53,130 --> 01:13:59,340
matter right so we just need space like

1311
01:13:57,810 --> 01:14:01,020
and the texture ops again are not

1312
01:13:59,340 --> 01:14:03,840
actually you know we can have as many of

1313
01:14:01,020 --> 01:14:06,750
them as we can fit assuming that we need

1314
01:14:03,840 --> 01:14:09,300
something like 256 times to do six times

1315
01:14:06,750 --> 01:14:10,859
four times you know like let's say two

1316
01:14:09,300 --> 01:14:12,980
because if there's gonna be a machine in

1317
01:14:10,859 --> 01:14:16,969
there it's gonna be something like that

1318
01:14:12,979 --> 01:14:22,349
it's a half megabyte per texture op

1319
01:14:16,970 --> 01:14:25,380
right so if we were to say you know we

1320
01:14:22,350 --> 01:14:27,660
would if we we could have like up to 128

1321
01:14:25,380 --> 01:14:32,609
outstanding and still only use like 64

1322
01:14:27,659 --> 01:14:34,380
Meg's right so on the main CPUs we've

1323
01:14:32,609 --> 01:14:36,420
just got so much memory these days we

1324
01:14:34,380 --> 01:14:39,060
can't afford to make that pipeline kind

1325
01:14:36,420 --> 01:14:40,470
of as big as we want and we really

1326
01:14:39,060 --> 01:14:43,080
wouldn't have to worry too much about it

1327
01:14:40,470 --> 01:14:45,119
so it seems like that's not a bad idea

1328
01:14:43,079 --> 01:14:46,500
because we can always get more buffer

1329
01:14:45,119 --> 01:14:48,000
memory if we just need to make that

1330
01:14:46,500 --> 01:14:52,260
pipeline deeper and deeper and deeper

1331
01:14:48,000 --> 01:14:54,600
you know so I think what we want to do

1332
01:14:52,260 --> 01:14:57,320
here is say all right look give me a

1333
01:14:54,600 --> 01:14:57,320
texture up

1334
01:15:05,619 --> 01:15:15,380
something if we got a texture up then we

1335
01:15:10,279 --> 01:15:18,319
actually proceed with the transfer if in

1336
01:15:15,380 --> 01:15:21,710
here we try and fail to do it then we do

1337
01:15:18,319 --> 01:15:25,130
let cancel texture up so that it knows

1338
01:15:21,710 --> 01:15:30,170
that it's not actually gonna be used you

1339
01:15:25,130 --> 01:15:33,500
know what I mean and then assuming that

1340
01:15:30,170 --> 01:15:35,779
it actually does get a texture up then

1341
01:15:33,500 --> 01:15:37,729
what we would need to do is I guess in

1342
01:15:35,779 --> 01:15:40,789
here we also need to say kind of like

1343
01:15:37,729 --> 01:15:42,589
how big we want this thing to be like

1344
01:15:40,789 --> 01:15:44,840
here's how big the transfer its gonna be

1345
01:15:42,590 --> 01:15:47,869
in this case so we would say something

1346
01:15:44,840 --> 01:15:49,730
like okay you know we know what the

1347
01:15:47,869 --> 01:15:52,069
width and height is of the texture

1348
01:15:49,729 --> 01:15:53,509
transfer that's going to occur so we can

1349
01:15:52,069 --> 01:15:55,099
give you that information and we were

1350
01:15:53,510 --> 01:15:59,770
assumed that you give us a texture out

1351
01:15:55,100 --> 01:16:02,150
back that's the suitable version of that

1352
01:15:59,770 --> 01:16:03,980
looking through here in the asset memory

1353
01:16:02,149 --> 01:16:05,689
side at that point you would say well we

1354
01:16:03,979 --> 01:16:06,859
don't actually need to acquire any asset

1355
01:16:05,689 --> 01:16:08,869
memory other than the asset memory

1356
01:16:06,859 --> 01:16:12,349
necessary to store the actual thing you

1357
01:16:08,869 --> 01:16:14,300
load out of the file and I don't think

1358
01:16:12,350 --> 01:16:18,220
we have any of that right like I don't

1359
01:16:14,300 --> 01:16:21,800
think we actually need that for anything

1360
01:16:18,220 --> 01:16:24,619
because all assets that exist at all

1361
01:16:21,800 --> 01:16:26,449
already have a slot reserved for them

1362
01:16:24,619 --> 01:16:28,970
which has the data that we actually care

1363
01:16:26,449 --> 01:16:30,590
about so if you look at what happens in

1364
01:16:28,970 --> 01:16:33,110
here we already have that information

1365
01:16:30,590 --> 01:16:35,390
available so I don't think we actually

1366
01:16:33,109 --> 01:16:37,460
need to load anything so the asset

1367
01:16:35,390 --> 01:16:38,840
memory head our pointer can just be 0 it

1368
01:16:37,460 --> 01:16:44,210
doesn't need to be set to anything at

1369
01:16:38,840 --> 01:16:46,130
all you know what I mean um so really

1370
01:16:44,210 --> 01:16:47,960
what we would have in here instead of an

1371
01:16:46,130 --> 01:16:51,500
asset memory header which is this thing

1372
01:16:47,960 --> 01:16:54,649
here the loaded bitmap would go away we

1373
01:16:51,500 --> 01:16:59,119
wouldn't have any of this right this

1374
01:16:54,649 --> 01:17:02,569
stuff would just not be there and we

1375
01:16:59,119 --> 01:17:05,529
would just inside here say look there is

1376
01:17:02,569 --> 01:17:05,529
a you know

1377
01:17:17,010 --> 01:17:20,460
there is going to be like the

1378
01:17:18,810 --> 01:17:23,250
information we need to get out of the

1379
01:17:20,460 --> 01:17:25,619
asset and you know maybe that should be

1380
01:17:23,250 --> 01:17:26,760
in place of that there right there is

1381
01:17:25,619 --> 01:17:28,319
gonna be the stuff we're gonna get out

1382
01:17:26,760 --> 01:17:31,140
of in place of the asset which is gonna

1383
01:17:28,319 --> 01:17:33,599
be like the the you know texture handle

1384
01:17:31,140 --> 01:17:35,190
and in the case of audio maybe there's

1385
01:17:33,600 --> 01:17:37,050
an audio handle that's here as well

1386
01:17:35,189 --> 01:17:38,639
right so the asset system just

1387
01:17:37,050 --> 01:17:40,890
responsible for providing that piece of

1388
01:17:38,640 --> 01:17:42,869
information back to us but the asset

1389
01:17:40,890 --> 01:17:45,150
header in terms of us acquiring any of

1390
01:17:42,869 --> 01:17:46,590
this stuff well we don't actually need

1391
01:17:45,149 --> 01:17:48,659
any of it because none of this stuff is

1392
01:17:46,590 --> 01:17:49,860
relevant to us because the only thing

1393
01:17:48,659 --> 01:17:51,238
that we're gonna save is the texture

1394
01:17:49,859 --> 01:17:56,549
handle we don't need to save anything

1395
01:17:51,238 --> 01:18:01,289
else at all right so this actually goes

1396
01:17:56,550 --> 01:18:10,110
away like all of that is gone and all of

1397
01:18:01,289 --> 01:18:11,939
this information here I want to say even

1398
01:18:10,109 --> 01:18:15,710
the texture handle itself could have

1399
01:18:11,939 --> 01:18:25,189
probably been allocated out here but

1400
01:18:15,710 --> 01:18:25,189
yeah so we don't need this

1401
01:18:30,789 --> 01:18:37,859
this actually does need a free list this

1402
01:18:35,109 --> 01:18:37,859
part here

1403
01:18:43,538 --> 01:18:48,000
and so we will actually need to

1404
01:18:45,639 --> 01:18:48,000
implement that

1405
01:18:51,729 --> 01:18:55,289
but that all looks good otherwise

1406
01:19:03,149 --> 01:19:11,189
okay so looking through this we've got

1407
01:19:06,520 --> 01:19:11,190
all this stuff actually is just fine

1408
01:19:15,659 --> 01:19:19,659
everything looks looks just fine so it's

1409
01:19:18,039 --> 01:19:27,640
really just all we would be doing is

1410
01:19:19,659 --> 01:19:30,460
this man off you go

1411
01:19:27,640 --> 01:19:40,420
right I mean that's that's all there is

1412
01:19:30,460 --> 01:19:44,890
to it so we do begin texture op cancel

1413
01:19:40,420 --> 01:19:46,779
texture up there and like a complete

1414
01:19:44,890 --> 01:19:49,810
texture off up here or something like

1415
01:19:46,779 --> 01:19:52,420
that so in this case you know we don't

1416
01:19:49,810 --> 01:19:54,010
do loaded bitmap right that's not what

1417
01:19:52,420 --> 01:19:58,090
would be getting here we just want the

1418
01:19:54,010 --> 01:20:01,119
texture operation itself and so inside

1419
01:19:58,090 --> 01:20:03,909
the work structure we would need to

1420
01:20:01,119 --> 01:20:07,029
store whatever the texture was that we

1421
01:20:03,909 --> 01:20:12,250
actually used so inside here we would

1422
01:20:07,029 --> 01:20:13,960
have worked texture op equals texture op

1423
01:20:12,250 --> 01:20:20,350
which you know that one whatever the one

1424
01:20:13,960 --> 01:20:20,739
is that we got and so inside the what is

1425
01:20:20,350 --> 01:20:30,570
it

1426
01:20:20,738 --> 01:20:36,519
load asset work right here we would have

1427
01:20:30,569 --> 01:20:37,630
renderer texture op texture up and that

1428
01:20:36,520 --> 01:20:47,530
would be something that we get filled

1429
01:20:37,630 --> 01:20:52,980
out there right I think that's it so is

1430
01:20:47,529 --> 01:20:57,009
it just called texture out yeah

1431
01:20:52,979 --> 01:20:58,719
so the finalization would just be inside

1432
01:20:57,010 --> 01:21:01,840
this piece of code where we know that

1433
01:20:58,720 --> 01:21:04,829
we're done we would just say well okay

1434
01:21:01,840 --> 01:21:11,789
then we would say complete texture up

1435
01:21:04,829 --> 01:21:11,789
and we would just pass the texture off

1436
01:21:13,409 --> 01:21:20,769
and that would you know add it to the

1437
01:21:16,899 --> 01:21:22,839
queue and I just want to change the

1438
01:21:20,770 --> 01:21:25,750
phrase from add up because it's a little

1439
01:21:22,840 --> 01:21:29,890
bit ambiguous than what's going on so I

1440
01:21:25,750 --> 01:21:31,810
want to actually say okay you know we're

1441
01:21:29,890 --> 01:21:33,340
actually saying complete as opposed to

1442
01:21:31,810 --> 01:21:41,820
cancel because those two things are

1443
01:21:33,340 --> 01:21:41,819
different and I think that's it

1444
01:21:51,979 --> 01:22:00,979
yeah I mean I think that's it so in here

1445
01:21:54,829 --> 01:22:03,979
when we actually do when we actually do

1446
01:22:00,979 --> 01:22:06,799
the complete texture up that would not

1447
01:22:03,979 --> 01:22:09,769
have this there we would presumably at

1448
01:22:06,800 --> 01:22:12,320
the time when we actually know now what

1449
01:22:09,770 --> 01:22:15,650
handle we're using we would actually

1450
01:22:12,319 --> 01:22:26,539
place that in here so inside the texture

1451
01:22:15,649 --> 01:22:32,750
up it would actually be this and sorry

1452
01:22:26,539 --> 01:22:37,899
it would actually be this and that would

1453
01:22:32,750 --> 01:22:41,149
be that in addition the texture ops

1454
01:22:37,899 --> 01:22:43,670
themselves they don't really have

1455
01:22:41,149 --> 01:22:46,479
anything now so you know when we do this

1456
01:22:43,670 --> 01:22:50,329
smush down I think you would want that

1457
01:22:46,479 --> 01:22:54,229
to be the case so that you're really

1458
01:22:50,329 --> 01:22:56,059
just looking at hmm there is only one

1459
01:22:54,229 --> 01:22:59,718
kind of texture up it's basically saying

1460
01:22:56,060 --> 01:23:03,260
that this data will overwrite what's in

1461
01:22:59,719 --> 01:23:06,619
this texture handle everything else is

1462
01:23:03,260 --> 01:23:10,489
pretty much is what it is and I think

1463
01:23:06,619 --> 01:23:12,769
that's it right so that would be just a

1464
01:23:10,488 --> 01:23:16,039
lot better like everything about that is

1465
01:23:12,770 --> 01:23:17,449
just a lot better than it was and so

1466
01:23:16,039 --> 01:23:19,340
then we would just set that texture off

1467
01:23:17,448 --> 01:23:23,049
like so so we you know we get one back

1468
01:23:19,340 --> 01:23:27,230
after doing this I can I can provide the

1469
01:23:23,050 --> 01:23:30,380
Optio in question here so that that all

1470
01:23:27,229 --> 01:23:33,408
flows nicely we can also if we cancel we

1471
01:23:30,380 --> 01:23:36,350
can also provide the cue so that's

1472
01:23:33,408 --> 01:23:38,029
always available to to be used at the

1473
01:23:36,350 --> 01:23:39,650
free list so that all flows properly

1474
01:23:38,029 --> 01:23:42,769
when we actually go to finish it we do

1475
01:23:39,649 --> 01:23:48,529
this and then we never actually call

1476
01:23:42,770 --> 01:23:50,960
that allocation right what that means is

1477
01:23:48,529 --> 01:23:53,329
now anytime we were going to update an

1478
01:23:50,960 --> 01:23:55,719
asset we can actually just clear its

1479
01:23:53,329 --> 01:23:58,550
texture handle and be done with it right

1480
01:23:55,719 --> 01:24:01,219
so if we clear its texture handle out

1481
01:23:58,550 --> 01:24:03,390
then we know that texture is not valid I

1482
01:24:01,219 --> 01:24:05,760
believe there is a test for that

1483
01:24:03,390 --> 01:24:16,260
I hope there is a test for that I don't

1484
01:24:05,760 --> 01:24:22,320
really remember if there's a yeah

1485
01:24:16,260 --> 01:24:24,239
so we don't really have that but that's

1486
01:24:22,319 --> 01:24:25,049
okay what I can do is say all right

1487
01:24:24,239 --> 01:24:31,139
let's see

1488
01:24:25,050 --> 01:24:34,170
internal be 32 is valid renderer texture

1489
01:24:31,140 --> 01:24:38,460
texture and then I can just say be 30

1490
01:24:34,170 --> 01:24:47,039
results what is the texture handle

1491
01:24:38,460 --> 01:25:00,119
comprised of consists of rather texture

1492
01:24:47,039 --> 01:25:06,000
there it is so yeah if we want to we can

1493
01:25:00,119 --> 01:25:07,649
also just reorganize this like so so

1494
01:25:06,000 --> 01:25:11,159
that we also have the ability to just

1495
01:25:07,649 --> 01:25:13,170
refer to this as a packed value and in

1496
01:25:11,159 --> 01:25:20,699
that case we just say like the packed

1497
01:25:13,170 --> 01:25:22,859
value equals 0 or since we want is valid

1498
01:25:20,699 --> 01:25:24,539
in this case we just say it's not 0 so

1499
01:25:22,859 --> 01:25:26,460
if we come in here and say look what you

1500
01:25:24,539 --> 01:25:28,109
know is this true or false you know is

1501
01:25:26,460 --> 01:25:30,539
this a valid one or not well we just do

1502
01:25:28,109 --> 01:25:32,729
it that way and so then when we actually

1503
01:25:30,539 --> 01:25:33,930
go to access a bitmap it's a lot more

1504
01:25:32,729 --> 01:25:35,699
straightforward we just look to see

1505
01:25:33,930 --> 01:25:36,990
whether or not it's got a texture handle

1506
01:25:35,699 --> 01:25:41,550
and if it doesn't have a texture handle

1507
01:25:36,989 --> 01:25:43,859
then off we go we could even do a lot

1508
01:25:41,550 --> 01:25:47,010
more saucy things now we could probably

1509
01:25:43,859 --> 01:25:48,569
even get rid of some of the locking the

1510
01:25:47,010 --> 01:25:50,369
lock would only have to be around the

1511
01:25:48,569 --> 01:25:53,759
allocation of the texture handle itself

1512
01:25:50,369 --> 01:25:56,010
it wouldn't actually have yeah I mean

1513
01:25:53,760 --> 01:25:58,530
there's just a lot of we can clean up so

1514
01:25:56,010 --> 01:26:02,039
much code now it's kind of scary because

1515
01:25:58,529 --> 01:26:04,259
we could all we would really have to

1516
01:26:02,039 --> 01:26:08,340
lock is the free list for the texture

1517
01:26:04,260 --> 01:26:11,670
handles so that we make sure that when

1518
01:26:08,340 --> 01:26:13,079
we pull one of those you know someone

1519
01:26:11,670 --> 01:26:17,260
isn't in the process of actually using

1520
01:26:13,079 --> 01:26:18,640
that list still so you know we

1521
01:26:17,260 --> 01:26:22,570
we could clean up a lot of code but

1522
01:26:18,640 --> 01:26:26,369
anyway point being now we could say is

1523
01:26:22,569 --> 01:26:26,369
when you go to do a load bitmap call

1524
01:26:29,699 --> 01:26:46,239
here when you go to do this sort of

1525
01:26:34,630 --> 01:26:47,770
thing we don't really need to we don't

1526
01:26:46,239 --> 01:27:01,359
really need to do anymore of the fancy

1527
01:26:47,770 --> 01:27:02,860
footwork really we can just we can in

1528
01:27:01,359 --> 01:27:04,449
here just assume oh you know what we

1529
01:27:02,859 --> 01:27:06,189
have loaded as well so I guess I don't

1530
01:27:04,449 --> 01:27:08,050
even since we have the loaded flag I

1531
01:27:06,189 --> 01:27:10,419
guess we don't even really need to know

1532
01:27:08,050 --> 01:27:12,310
that so yeah okay nevermind since we

1533
01:27:10,420 --> 01:27:13,810
have the since we have the state flag I

1534
01:27:12,310 --> 01:27:15,460
don't even really need to check to see

1535
01:27:13,810 --> 01:27:17,440
whether the texture handles valid now

1536
01:27:15,460 --> 01:27:20,800
that I think about it so that's probably

1537
01:27:17,439 --> 01:27:22,479
a waste of my time but um so now we can

1538
01:27:20,800 --> 01:27:24,579
do is say alright when you're actually

1539
01:27:22,479 --> 01:27:26,500
going to do one of these things let's

1540
01:27:24,579 --> 01:27:33,689
see if we know how do we know when it's

1541
01:27:26,500 --> 01:27:37,060
actually loaded first the get a set call

1542
01:27:33,689 --> 01:27:39,489
this gets the asset back but how do we

1543
01:27:37,060 --> 01:27:44,710
know if it's loaded so you see here

1544
01:27:39,489 --> 01:27:46,719
right it's using that header pointer and

1545
01:27:44,710 --> 01:27:49,630
the header pointer it looks to see

1546
01:27:46,720 --> 01:27:52,020
whether or not the thing's loaded you

1547
01:27:49,630 --> 01:27:52,020
know I mean

1548
01:28:11,349 --> 01:28:17,059
so every time we use it we take an asset

1549
01:28:15,260 --> 01:28:20,599
lock here because we want to be able to

1550
01:28:17,059 --> 01:28:26,960
see which asset was the least recently

1551
01:28:20,599 --> 01:28:30,529
used asset and I don't know to what

1552
01:28:26,960 --> 01:28:37,760
extent that's a smart thing because it

1553
01:28:30,529 --> 01:28:41,149
sort of implies that we it sort of

1554
01:28:37,760 --> 01:28:54,229
implies that we have to constantly be

1555
01:28:41,149 --> 01:28:56,149
shuffling that list around and I can't

1556
01:28:54,229 --> 01:28:58,460
help but wonder if the more efficient

1557
01:28:56,149 --> 01:29:02,689
thing to do is just when we need to do

1558
01:28:58,460 --> 01:29:08,658
like I I don't know if it's maybe easier

1559
01:29:02,689 --> 01:29:13,788
to just do like a pass to see when the

1560
01:29:08,658 --> 01:29:17,589
last time someone's thing was used when

1561
01:29:13,788 --> 01:29:17,590
we go to do like a flush

1562
01:29:23,458 --> 01:29:26,969
because really the problem that I'm

1563
01:29:25,260 --> 01:29:28,469
having is just like now we we could

1564
01:29:26,969 --> 01:29:30,658
really be very efficient here but the

1565
01:29:28,469 --> 01:29:33,958
thing that I don't know is how to keep

1566
01:29:30,658 --> 01:29:35,158
track of who should get evicted and what

1567
01:29:33,958 --> 01:29:37,109
we're doing right now is kind of

1568
01:29:35,158 --> 01:29:38,848
wasteful because every time we go to use

1569
01:29:37,109 --> 01:29:40,408
somebody we like to cycle them up to

1570
01:29:38,849 --> 01:29:46,380
keep them in a bubbled list of who

1571
01:29:40,408 --> 01:29:49,799
should get evicted on that frame who

1572
01:29:46,380 --> 01:29:51,328
should get evicted first so we keep that

1573
01:29:49,800 --> 01:29:56,099
list the sorted order in the order in

1574
01:29:51,328 --> 01:30:01,768
which that they were used but really you

1575
01:29:56,099 --> 01:30:04,309
almost want to do it as a separate pass

1576
01:30:01,769 --> 01:30:04,309
maybe

1577
01:30:34,868 --> 01:30:38,268
yes so I'm gonna go ahead and say I

1578
01:30:37,038 --> 01:30:41,059
think we should even change how we're

1579
01:30:38,269 --> 01:30:43,369
doing this so what I'm going to say here

1580
01:30:41,059 --> 01:30:46,130
is every time we use an asset in this

1581
01:30:43,368 --> 01:30:49,130
case I think what we want to do is

1582
01:30:46,130 --> 01:30:52,400
update essentially a dirtiness level for

1583
01:30:49,130 --> 01:30:54,199
that asset that just says when you know

1584
01:30:52,399 --> 01:30:58,189
when the last time was that we accessed

1585
01:30:54,198 --> 01:31:00,348
it right and so essentially the asset

1586
01:30:58,189 --> 01:31:07,609
system would have you know a counter

1587
01:31:00,349 --> 01:31:09,409
here you know somewhere in here so

1588
01:31:07,609 --> 01:31:13,279
inside game assets right there's some

1589
01:31:09,408 --> 01:31:27,379
kind of a like an asset counter where we

1590
01:31:13,279 --> 01:31:29,420
just say like this and every time we get

1591
01:31:27,380 --> 01:31:31,880
one of these things we would never

1592
01:31:29,420 --> 01:31:34,099
really call get we would we'd never call

1593
01:31:31,880 --> 01:31:37,909
that we would only really ever call this

1594
01:31:34,099 --> 01:31:42,769
right so we would say okay you know get

1595
01:31:37,908 --> 01:31:51,879
the asset here so here's the asset for

1596
01:31:42,769 --> 01:31:55,340
the bitmap in question so it's like that

1597
01:31:51,880 --> 01:31:58,429
and then what we would do is say you

1598
01:31:55,340 --> 01:32:01,849
know we probably want to assert that it

1599
01:31:58,429 --> 01:32:03,949
you know that it even is a bitmap so

1600
01:32:01,849 --> 01:32:09,010
inside here we would say like the asset

1601
01:32:03,948 --> 01:32:12,978
you know whatever equals HHA asset type

1602
01:32:09,010 --> 01:32:14,360
you know like that because people

1603
01:32:12,979 --> 01:32:16,130
shouldn't be asking for something as a

1604
01:32:14,359 --> 01:32:20,208
bitmap but it's not actually a bitmap

1605
01:32:16,130 --> 01:32:26,179
obviously I can't remember what this is

1606
01:32:20,208 --> 01:32:31,849
called but I can look it just called a

1607
01:32:26,179 --> 01:32:36,979
JJ so once we do that then we would just

1608
01:32:31,849 --> 01:32:40,969
say all right you know that asset it's

1609
01:32:36,979 --> 01:32:43,090
last used generation is whatever the

1610
01:32:40,969 --> 01:32:46,300
asset system says the

1611
01:32:43,090 --> 01:33:00,340
used generation is right now what I

1612
01:32:46,300 --> 01:33:01,570
called that thing do six generation so

1613
01:33:00,340 --> 01:33:04,150
we're just stamping it

1614
01:33:01,569 --> 01:33:08,380
we're just saying hey yeah like don't

1615
01:33:04,149 --> 01:33:10,988
forget right and so then what we could

1616
01:33:08,380 --> 01:33:13,719
do is say all we're gonna keep a list of

1617
01:33:10,988 --> 01:33:17,019
is just who's loaded that's all we're

1618
01:33:13,719 --> 01:33:19,899
gonna keep a list of and then when we go

1619
01:33:17,020 --> 01:33:21,730
to do a purge we'll just say look

1620
01:33:19,899 --> 01:33:25,359
through the list of loaded assets for

1621
01:33:21,729 --> 01:33:29,468
the oldest one and use that one and we

1622
01:33:25,359 --> 01:33:32,098
can do that as we can do those purges in

1623
01:33:29,469 --> 01:33:35,980
waves so we could kind of say look

1624
01:33:32,099 --> 01:33:38,469
anything that you know I want you to

1625
01:33:35,979 --> 01:33:42,029
find the oldest one because we're gonna

1626
01:33:38,469 --> 01:33:45,639
purge that one regardless but I also

1627
01:33:42,029 --> 01:33:48,849
want you to purge anyone who's over a

1628
01:33:45,639 --> 01:33:51,550
certain age to avoid us having to do

1629
01:33:48,849 --> 01:33:52,900
purges too frequently you know what I

1630
01:33:51,550 --> 01:33:55,060
mean

1631
01:33:52,899 --> 01:33:57,399
so that way on any given frame we're

1632
01:33:55,060 --> 01:33:59,739
only gonna purge occasion we're only

1633
01:33:57,399 --> 01:34:01,839
gonna maybe purge once for frame we're

1634
01:33:59,738 --> 01:34:04,539
not gonna run purges lots of times if

1635
01:34:01,840 --> 01:34:06,520
lots of people need to allocate we're

1636
01:34:04,539 --> 01:34:13,029
gonna be you know more judicious than

1637
01:34:06,520 --> 01:34:15,969
that you know what I mean so that seems

1638
01:34:13,029 --> 01:34:23,319
like a lot better to me than what we

1639
01:34:15,969 --> 01:34:26,889
were doing that just seems a lot better

1640
01:34:23,319 --> 01:34:29,349
and so the operation lock that we're

1641
01:34:26,889 --> 01:34:30,639
doing on the assets there would be for

1642
01:34:29,349 --> 01:34:36,849
only I'm trying to think if there are

1643
01:34:30,639 --> 01:34:38,949
other lists that we need it may be such

1644
01:34:36,849 --> 01:34:41,529
that we won't need an operation lock at

1645
01:34:38,948 --> 01:34:43,658
all anymore for the most part at least

1646
01:34:41,529 --> 01:34:47,259
not for the mainline code maybe that

1647
01:34:43,658 --> 01:34:49,269
that can all be sort of kicked off as a

1648
01:34:47,260 --> 01:34:52,030
separate thing and so the only real

1649
01:34:49,270 --> 01:34:53,770
thing we would need is like the lock

1650
01:34:52,029 --> 01:34:56,659
would be only really on the texture up

1651
01:34:53,770 --> 01:34:59,090
side of things and the asset system

1652
01:34:56,659 --> 01:35:01,159
wouldn't really have any if that makes

1653
01:34:59,090 --> 01:35:03,680
sense because we know that there aren't

1654
01:35:01,159 --> 01:35:06,559
multiple people calling this code this

1655
01:35:03,680 --> 01:35:10,159
code on this side is only called by one

1656
01:35:06,560 --> 01:35:12,980
by the game which is single threaded so

1657
01:35:10,159 --> 01:35:14,420
the asset system on the other side where

1658
01:35:12,979 --> 01:35:17,329
the asynchronous loading people are

1659
01:35:14,420 --> 01:35:20,449
working on it if we got rid of their

1660
01:35:17,329 --> 01:35:22,039
ability to ever touch you know any of

1661
01:35:20,449 --> 01:35:23,869
the things in question here that are

1662
01:35:22,039 --> 01:35:28,279
that are possibly being used by the

1663
01:35:23,869 --> 01:35:31,760
mainline code that would sort of get rid

1664
01:35:28,279 --> 01:35:36,469
of any need to do that um and that's

1665
01:35:31,760 --> 01:35:43,520
pretty good too right that's pretty good

1666
01:35:36,470 --> 01:35:45,470
too so it really would just be the audio

1667
01:35:43,520 --> 01:35:50,830
system that we would have to worry about

1668
01:35:45,470 --> 01:35:50,829
there and

1669
01:35:59,520 --> 01:36:05,550
and the bit mass would be pretty much

1670
01:36:01,140 --> 01:36:09,450
done I like that all right so let's see

1671
01:36:05,550 --> 01:36:10,800
we were gonna do that I'll go ahead and

1672
01:36:09,449 --> 01:36:12,750
move this up here because it's kind of

1673
01:36:10,800 --> 01:36:17,579
in line to get removed then so we just

1674
01:36:12,750 --> 01:36:19,590
have like these pieces of code here I'm

1675
01:36:17,579 --> 01:36:20,789
gonna get rid of these in lines we don't

1676
01:36:19,590 --> 01:36:22,560
really need in lines anymore I should

1677
01:36:20,789 --> 01:36:24,510
just get rid of them from the code

1678
01:36:22,560 --> 01:36:29,640
entirely but you know they're kind of a

1679
01:36:24,510 --> 01:36:32,760
still remains at this point so I'm

1680
01:36:29,640 --> 01:36:34,230
pretty sure that's what I want to do so

1681
01:36:32,760 --> 01:36:36,090
let's try to make that happen

1682
01:36:34,229 --> 01:36:37,979
and that will also that will give us the

1683
01:36:36,090 --> 01:36:40,680
ability to purge our textures as we

1684
01:36:37,979 --> 01:36:42,149
wanted to on a hop reload but it'll also

1685
01:36:40,680 --> 01:36:43,500
just make our system a lot more

1686
01:36:42,149 --> 01:36:44,909
efficient because it doesn't have to be

1687
01:36:43,500 --> 01:36:46,229
doing all the stuff that it was doing

1688
01:36:44,909 --> 01:36:51,059
before

1689
01:36:46,229 --> 01:36:54,509
that's pretty inefficient so yeah just

1690
01:36:51,060 --> 01:36:58,830
go ahead and uniform make that one more

1691
01:36:54,510 --> 01:37:01,789
uniform all right so how do we want to

1692
01:36:58,829 --> 01:37:04,289
proceed here so what I'd like to do is

1693
01:37:01,789 --> 01:37:06,210
just say all right the last use

1694
01:37:04,289 --> 01:37:09,630
generation thing is going to be on an

1695
01:37:06,210 --> 01:37:14,069
asset so every time you have one of

1696
01:37:09,630 --> 01:37:17,880
these you also have a last used

1697
01:37:14,069 --> 01:37:19,739
generation and in the case of a sound so

1698
01:37:17,880 --> 01:37:22,980
I'm loading it a sound in rather than

1699
01:37:19,739 --> 01:37:25,679
something else that's something that we

1700
01:37:22,979 --> 01:37:29,609
just need like a different type of

1701
01:37:25,680 --> 01:37:30,869
handle for write faults I'm torn on

1702
01:37:29,609 --> 01:37:32,609
because I don't know that I really want

1703
01:37:30,869 --> 01:37:34,170
fonts to be dynamically loaded anyway I

1704
01:37:32,609 --> 01:37:35,519
mean the bitmaps of fonts are always on

1705
01:37:34,170 --> 01:37:41,520
activated so it's really just the glyph

1706
01:37:35,520 --> 01:37:45,480
information that where that finalization

1707
01:37:41,520 --> 01:37:47,310
happens I don't know I'm a check I just

1708
01:37:45,479 --> 01:37:51,509
want to check to see what we're actually

1709
01:37:47,310 --> 01:37:54,860
doing there because I don't really know

1710
01:37:51,510 --> 01:37:54,860
so I'm gonna look at load font

1711
01:38:01,930 --> 01:38:06,550
yeah and so if you kind of see here

1712
01:38:04,180 --> 01:38:09,940
where you're doing load font and you

1713
01:38:06,550 --> 01:38:12,070
load in the glyph data I might go ahead

1714
01:38:09,939 --> 01:38:15,129
and say that since that data is

1715
01:38:12,069 --> 01:38:18,639
relatively small we just don't have very

1716
01:38:15,130 --> 01:38:21,969
many thoughts and we don't need to have

1717
01:38:18,640 --> 01:38:24,280
lots of fonts in the game we might want

1718
01:38:21,969 --> 01:38:26,109
to just load all of the font data I mean

1719
01:38:24,279 --> 01:38:27,729
I guess the only reason not to do that

1720
01:38:26,109 --> 01:38:31,809
would be if there's too many fonts

1721
01:38:27,729 --> 01:38:35,309
because of localization concerns but

1722
01:38:31,810 --> 01:38:38,140
like that glyph size is just not that

1723
01:38:35,310 --> 01:38:49,780
concerning right like if you look at the

1724
01:38:38,140 --> 01:38:53,289
size of the fonts themselves there you

1725
01:38:49,779 --> 01:38:55,750
can see so inside a given font you've

1726
01:38:53,289 --> 01:38:59,800
got horizontal advances which are floats

1727
01:38:55,750 --> 01:39:03,969
and you've got code points which are the

1728
01:38:59,800 --> 01:39:07,750
font glyphs so those are like you know

1729
01:39:03,969 --> 01:39:09,219
you 32 to you 32 values select 64 so

1730
01:39:07,750 --> 01:39:12,430
it's like an array of 32 is an array of

1731
01:39:09,219 --> 01:39:16,510
64 so the horizontal advance is a bit

1732
01:39:12,430 --> 01:39:18,369
big so I guess I would say maybe that is

1733
01:39:16,510 --> 01:39:20,320
concerning because that's actually an N

1734
01:39:18,369 --> 01:39:22,329
squared table so if you looked at

1735
01:39:20,319 --> 01:39:25,750
something where I don't know you needed

1736
01:39:22,329 --> 01:39:31,210
like 2000 of these that becomes pretty

1737
01:39:25,750 --> 01:39:33,640
substantial when you think about it so

1738
01:39:31,210 --> 01:39:36,069
that's like 16 megabytes just for one

1739
01:39:33,640 --> 01:39:38,680
font if it had like lots of glyphs in it

1740
01:39:36,069 --> 01:39:40,779
certainly that you know so I'm thinking

1741
01:39:38,680 --> 01:39:43,810
like you know the Japanese or Chinese

1742
01:39:40,779 --> 01:39:45,909
language font obviously for for any

1743
01:39:43,810 --> 01:39:48,640
language is written in Roman script it's

1744
01:39:45,909 --> 01:39:51,819
you know it's meaningless because there

1745
01:39:48,640 --> 01:39:52,619
just wouldn't be very many glyphs to

1746
01:39:51,819 --> 01:39:55,659
begin with

1747
01:39:52,619 --> 01:39:56,979
but if we look at how that's making sure

1748
01:39:55,659 --> 01:40:00,460
it's from like you know do I want to a

1749
01:39:56,979 --> 01:40:06,639
load that I don't know we certainly

1750
01:40:00,460 --> 01:40:10,840
could just load it and never free its

1751
01:40:06,640 --> 01:40:13,239
memory you know what I mean so I'd be

1752
01:40:10,840 --> 01:40:14,770
okay with that because it's like look

1753
01:40:13,238 --> 01:40:16,919
you're going to be running in

1754
01:40:14,770 --> 01:40:20,230
whatever language you're running in and

1755
01:40:16,920 --> 01:40:23,409
I would probably be okay with with the

1756
01:40:20,229 --> 01:40:25,839
fonts just using whatever memory they're

1757
01:40:23,409 --> 01:40:27,399
using and not have to worry about

1758
01:40:25,840 --> 01:40:34,930
getting that from some kind of a

1759
01:40:27,399 --> 01:40:36,849
reusable pool if that makes sense so I

1760
01:40:34,930 --> 01:40:38,650
think as far as fonts are concerned that

1761
01:40:36,850 --> 01:40:40,900
could be just a synchronous font load

1762
01:40:38,649 --> 01:40:43,569
that wouldn't really matter because

1763
01:40:40,899 --> 01:40:47,109
again it's just one really simple really

1764
01:40:43,569 --> 01:40:49,049
quick load of some data and you don't

1765
01:40:47,109 --> 01:40:51,819
really have to care about it from there

1766
01:40:49,050 --> 01:40:52,960
so I think I would be okay with that and

1767
01:40:51,819 --> 01:40:55,359
that would just simplify that process

1768
01:40:52,960 --> 01:40:59,649
and so it would just be audio data which

1769
01:40:55,359 --> 01:41:00,880
would need their own audio pool and that

1770
01:40:59,649 --> 01:41:02,859
would be pretty straightforward because

1771
01:41:00,880 --> 01:41:04,630
then what I could do is you know we

1772
01:41:02,859 --> 01:41:07,599
already have the idea that you can

1773
01:41:04,630 --> 01:41:10,300
stream audio data and so I would be able

1774
01:41:07,600 --> 01:41:12,730
to just really easily make it so that we

1775
01:41:10,300 --> 01:41:14,440
have a fixed set of fixed size audio

1776
01:41:12,729 --> 01:41:16,839
buffers and all the audio streams

1777
01:41:14,439 --> 01:41:18,639
through there right so I think that's

1778
01:41:16,840 --> 01:41:21,039
pretty clean and that's what I would

1779
01:41:18,640 --> 01:41:23,530
what I would do so I think I'm just

1780
01:41:21,039 --> 01:41:25,269
gonna go ahead and do that right and so

1781
01:41:23,529 --> 01:41:28,059
what we would end up with if that if the

1782
01:41:25,270 --> 01:41:29,860
scheme looked like that is asset memory

1783
01:41:28,060 --> 01:41:33,580
header which is the part that I didn't

1784
01:41:29,859 --> 01:41:36,729
like and was really annoying and ugly I

1785
01:41:33,579 --> 01:41:39,519
think we just get rid of that now asset

1786
01:41:36,729 --> 01:41:42,279
type which is the header thing again

1787
01:41:39,520 --> 01:41:44,260
don't need and so we would just be left

1788
01:41:42,279 --> 01:41:48,309
with only the state and and like a

1789
01:41:44,260 --> 01:41:50,199
handle here and similarly in this case

1790
01:41:48,310 --> 01:41:54,250
we'd have texture I mean the audio

1791
01:41:50,199 --> 01:41:56,260
buffer index and that would just be

1792
01:41:54,250 --> 01:41:58,239
round-robin that would not even really

1793
01:41:56,260 --> 01:42:00,369
need to be ever dealt with in any way

1794
01:41:58,239 --> 01:42:02,170
because since we know that audio plays

1795
01:42:00,369 --> 01:42:06,279
and it plays overtime it's always

1796
01:42:02,170 --> 01:42:09,489
whoever was the last person loaded the

1797
01:42:06,279 --> 01:42:10,840
the furthest whichever buffer is oldest

1798
01:42:09,489 --> 01:42:14,649
is the buffer we could just get rid of

1799
01:42:10,840 --> 01:42:16,989
right in almost all cases now we could

1800
01:42:14,649 --> 01:42:19,739
try to be a little bit cleaner about

1801
01:42:16,989 --> 01:42:25,840
that but I don't know to what extent I

1802
01:42:19,739 --> 01:42:27,579
you know I mean I really don't know if

1803
01:42:25,840 --> 01:42:28,059
we need to be that advanced about it at

1804
01:42:27,579 --> 01:42:33,189
all

1805
01:42:28,059 --> 01:42:36,788
right so we would just have a you know

1806
01:42:33,189 --> 01:42:39,638
an asset audio buffer and it would just

1807
01:42:36,788 --> 01:42:42,250
be some fixed number of samples so we

1808
01:42:39,639 --> 01:42:45,880
would just you know we would just have

1809
01:42:42,250 --> 01:42:47,469
something like and and you'll forgive me

1810
01:42:45,880 --> 01:42:55,659
for not remembering what kind of audio

1811
01:42:47,469 --> 01:42:57,550
stuff we actually do there but like it's

1812
01:42:55,658 --> 01:43:04,210
been so long since we bothered doing

1813
01:42:57,550 --> 01:43:08,849
anything there it's just f-16s right so

1814
01:43:04,210 --> 01:43:08,849
we just say something like okay you know

1815
01:43:13,198 --> 01:43:23,769
here's the data and in here we would say

1816
01:43:20,020 --> 01:43:26,199
you know this this size here is sort of

1817
01:43:23,770 --> 01:43:26,590
like a fixed maximum you know what I

1818
01:43:26,198 --> 01:43:28,598
mean

1819
01:43:26,590 --> 01:43:30,819
meaning the total total number that you

1820
01:43:28,599 --> 01:43:33,429
get in here is some fixed maximum and so

1821
01:43:30,819 --> 01:43:36,130
all sounds will always be broken up into

1822
01:43:33,429 --> 01:43:39,760
like however many chunks it would take

1823
01:43:36,130 --> 01:43:52,510
right so in here I would just say look

1824
01:43:39,760 --> 01:43:54,250
this is the the maximum sound length and

1825
01:43:52,510 --> 01:43:57,429
so it would just be like based on

1826
01:43:54,250 --> 01:44:00,460
something like yeah let's say that I

1827
01:43:57,429 --> 01:44:02,859
want to have like them broken up into a

1828
01:44:00,460 --> 01:44:04,630
half second or something like that so

1829
01:44:02,859 --> 01:44:11,170
you know it's gonna be something like

1830
01:44:04,630 --> 01:44:15,520
this many samples and so we would just

1831
01:44:11,170 --> 01:44:17,520
have buffers that were that big and we

1832
01:44:15,520 --> 01:44:19,570
would just have some number of them

1833
01:44:17,520 --> 01:44:24,670
sitting around in a chain that we

1834
01:44:19,569 --> 01:44:26,139
manipulate right so here we would just

1835
01:44:24,670 --> 01:44:27,670
say yeah if it's loaded it's in this

1836
01:44:26,139 --> 01:44:28,900
audio buffer if it's not loaded that

1837
01:44:27,670 --> 01:44:32,440
it's not in the audio buffer and that's

1838
01:44:28,899 --> 01:44:34,269
basically at the end of that and all of

1839
01:44:32,439 --> 01:44:36,969
our sounds when we bring them in are

1840
01:44:34,270 --> 01:44:40,599
broken up into those chunks and you know

1841
01:44:36,969 --> 01:44:41,810
you if you need to use multiple chunks

1842
01:44:40,599 --> 01:44:44,420
you can

1843
01:44:41,810 --> 01:44:49,580
right so the audio buffer index in this

1844
01:44:44,420 --> 01:44:51,109
case is just saying and you know what we

1845
01:44:49,579 --> 01:44:52,399
could even just say how many of the

1846
01:44:51,109 --> 01:44:54,439
audio buffers you need although we

1847
01:44:52,399 --> 01:44:55,699
actually know that information so we

1848
01:44:54,439 --> 01:44:56,839
could just call this the first audio

1849
01:44:55,699 --> 01:44:59,179
buffer index and so that would just

1850
01:44:56,840 --> 01:45:01,010
store those and again now that's just

1851
01:44:59,180 --> 01:45:05,630
completely deterministic and it doesn't

1852
01:45:01,010 --> 01:45:08,930
matter right so we could do something

1853
01:45:05,630 --> 01:45:11,170
like that whether we want to do

1854
01:45:08,930 --> 01:45:15,380
something fancier or not I'm not sure

1855
01:45:11,170 --> 01:45:17,989
but it would seems pretty simple simple

1856
01:45:15,380 --> 01:45:19,670
and honestly if we always did them in a

1857
01:45:17,989 --> 01:45:23,090
round-robin scheme so we just always

1858
01:45:19,670 --> 01:45:25,250
just roll through the buffer which again

1859
01:45:23,090 --> 01:45:28,670
could be stupid I don't know because it

1860
01:45:25,250 --> 01:45:30,140
may be that you just then you end up

1861
01:45:28,670 --> 01:45:32,720
kind of thrashing because there's some

1862
01:45:30,140 --> 01:45:35,360
things like sounds like I hit the guy

1863
01:45:32,720 --> 01:45:39,500
that always remain in there and you

1864
01:45:35,359 --> 01:45:40,880
don't want to have to do that on the

1865
01:45:39,500 --> 01:45:42,890
other hand you could just say we're

1866
01:45:40,880 --> 01:45:44,930
always continuously streaming sound and

1867
01:45:42,890 --> 01:45:47,750
so it doesn't matter like it's like look

1868
01:45:44,930 --> 01:45:49,400
we always prefetch and we always

1869
01:45:47,750 --> 01:45:51,319
continuously streams so that's how

1870
01:45:49,399 --> 01:45:52,789
that's gonna work you know I don't know

1871
01:45:51,319 --> 01:45:55,929
which of those is the right decision

1872
01:45:52,789 --> 01:45:55,930
there it's tough to say

1873
01:46:24,199 --> 01:46:27,278
[Music]

1874
01:46:35,229 --> 01:46:40,929
I kind of want to say if you did a round

1875
01:46:38,890 --> 01:46:42,489
robin scheme there's an additional

1876
01:46:40,930 --> 01:46:43,960
pretty interesting thing you could do

1877
01:46:42,488 --> 01:46:50,079
there which is you don't actually have

1878
01:46:43,960 --> 01:46:55,390
to have a back size anymore right you

1879
01:46:50,079 --> 01:46:57,609
could just say I have a giant buffer you

1880
01:46:55,390 --> 01:46:59,890
know how much button buffer memory do I

1881
01:46:57,609 --> 01:47:03,159
want for sound I'll you know I allocated

1882
01:46:59,890 --> 01:47:05,230
64 megabytes every time I go to load a

1883
01:47:03,159 --> 01:47:08,409
sound I just load it into the buffer

1884
01:47:05,229 --> 01:47:13,149
wherever I am and that overwrites

1885
01:47:08,409 --> 01:47:17,260
whoever you know whoever was in that

1886
01:47:13,149 --> 01:47:18,789
location and then if they can then

1887
01:47:17,260 --> 01:47:20,890
determine that they've been overwritten

1888
01:47:18,789 --> 01:47:23,529
they just will reload themselves later

1889
01:47:20,890 --> 01:47:34,450
the next time they need to get used here

1890
01:47:23,529 --> 01:47:36,219
what I mean that sounds kind of dumb but

1891
01:47:34,449 --> 01:47:37,439
at the same time I like it I mean I

1892
01:47:36,220 --> 01:47:45,340
don't know it just sounds interesting

1893
01:47:37,439 --> 01:47:48,479
never heard of that before but it kind

1894
01:47:45,340 --> 01:47:48,480
of feels like it would just work

1895
01:48:18,319 --> 01:48:25,139
I'm gonna try it this may be really dumb

1896
01:48:21,689 --> 01:48:28,969
and I apologize if it is but like so

1897
01:48:25,140 --> 01:48:28,969
let's say right Kari you just say like

1898
01:48:31,399 --> 01:48:38,309
this is where we loaded the sound at

1899
01:48:36,390 --> 01:48:44,280
this particular sample index in our like

1900
01:48:38,310 --> 01:48:57,170
sample buffer right and if it's loaded

1901
01:48:44,279 --> 01:49:01,529
it's loaded there and and there we go

1902
01:48:57,170 --> 01:49:04,350
when you move through and someone else

1903
01:49:01,529 --> 01:49:06,448
needs to load then everybody who gets

1904
01:49:04,350 --> 01:49:10,320
you know all the sounds that were in

1905
01:49:06,448 --> 01:49:17,488
that that who's loaded that sample index

1906
01:49:10,319 --> 01:49:19,590
Kotik lipst have to then be sort of have

1907
01:49:17,488 --> 01:49:22,339
to be marked as unloaded and I guess

1908
01:49:19,590 --> 01:49:22,340
that's the hard part

1909
01:49:26,800 --> 01:49:33,940
I mean I guess that's the thing it like

1910
01:49:32,020 --> 01:49:38,400
I'm not sure exactly how you tell that

1911
01:49:33,939 --> 01:49:38,399
somebody has been unloaded versus not

1912
01:49:58,198 --> 01:50:11,638
oh man although if you just had a 64-bit

1913
01:50:04,519 --> 01:50:17,130
value that was the loaded it sample

1914
01:50:11,639 --> 01:50:23,849
index then you would know oh man so you

1915
01:50:17,130 --> 01:50:26,670
could just do this now you just say look

1916
01:50:23,849 --> 01:50:28,860
I imagine that I have an infinitely long

1917
01:50:26,670 --> 01:50:32,069
buffer and every time I load in a sound

1918
01:50:28,859 --> 01:50:36,029
I load it at a 64-bit imaginary giant

1919
01:50:32,069 --> 01:50:38,908
address when I look at where my current

1920
01:50:36,029 --> 01:50:42,689
loaded in window is it just slides

1921
01:50:38,908 --> 01:50:46,018
upwards in that imaginary you 64 address

1922
01:50:42,689 --> 01:50:56,009
by like every time I load new things on

1923
01:50:46,019 --> 01:51:05,639
I slide it upwards that's kind of nuts

1924
01:50:56,010 --> 01:51:09,510
but I like it a lot I mean that's just

1925
01:51:05,639 --> 01:51:13,708
plain bizarre oh man and that lets you

1926
01:51:09,510 --> 01:51:18,510
do that lets you do another really cool

1927
01:51:13,708 --> 01:51:20,788
thing this is awesome so that lets you

1928
01:51:18,510 --> 01:51:25,559
do another awesome thing which is that

1929
01:51:20,788 --> 01:51:32,759
if you want you can have two halves of

1930
01:51:25,559 --> 01:51:35,038
the buffer and go if I'm in the back

1931
01:51:32,760 --> 01:51:38,670
half of the buffer and I get played

1932
01:51:35,038 --> 01:51:41,069
don't reload me just copy me from the

1933
01:51:38,670 --> 01:51:43,489
back half of the buffer into the front

1934
01:51:41,069 --> 01:51:47,340
half of the buffer that's actually empty

1935
01:51:43,488 --> 01:51:49,828
so as you slide the window up if people

1936
01:51:47,340 --> 01:51:51,929
who are used frequently would be in

1937
01:51:49,828 --> 01:51:54,420
danger of falling out you can move them

1938
01:51:51,929 --> 01:51:56,569
up before they actually got unloaded at

1939
01:51:54,420 --> 01:51:56,569
all

1940
01:51:58,649 --> 01:52:06,000
this may be really stupid but I'm going

1941
01:52:05,429 --> 01:52:09,090
for it

1942
01:52:06,000 --> 01:52:11,689
sorry like that's just too crazy like

1943
01:52:09,090 --> 01:52:14,880
that's just hilarious and I love it so

1944
01:52:11,689 --> 01:52:24,329
then you just have a thing here which is

1945
01:52:14,880 --> 01:52:30,300
like yeah okay so here's my like sample

1946
01:52:24,329 --> 01:52:32,760
base like sample buffer base index and

1947
01:52:30,300 --> 01:52:37,289
and then I've got you know the actual

1948
01:52:32,760 --> 01:52:40,289
like sample buffer here and and I've

1949
01:52:37,289 --> 01:52:44,158
also got like a sample buffer count like

1950
01:52:40,289 --> 01:52:47,609
how many samples there are in the sample

1951
01:52:44,158 --> 01:53:00,119
buffer and like everything just happens

1952
01:52:47,609 --> 01:53:02,039
in here so we essentially have like a

1953
01:53:00,119 --> 01:53:04,229
sample buffer base index and then we

1954
01:53:02,039 --> 01:53:05,789
have a load index which probably is off

1955
01:53:04,229 --> 01:53:09,299
of the base index because it doesn't

1956
01:53:05,789 --> 01:53:12,359
that actually doesn't need to be 64

1957
01:53:09,300 --> 01:53:12,900
there it could be but it can't be that

1958
01:53:12,359 --> 01:53:16,109
big

1959
01:53:12,899 --> 01:53:17,879
so that just increases when it hits the

1960
01:53:16,109 --> 01:53:20,579
sample buffer count it goes back to zero

1961
01:53:17,880 --> 01:53:22,980
and the thing slides upward right and

1962
01:53:20,579 --> 01:53:30,890
then we would do that in halves like I

1963
01:53:22,979 --> 01:53:30,889
said so we wouldn't flush it's confusing

1964
01:53:32,899 --> 01:53:37,819
it's a little confusing but I think it

1965
01:53:35,670 --> 01:53:37,819
would work

1966
01:53:50,710 --> 01:54:00,000
all right I'm not gonna have nearly

1967
01:53:55,510 --> 01:54:00,000
enough time to make all of these things

1968
01:54:00,029 --> 01:54:06,460
the same let's see yeah so so I got a

1969
01:54:04,899 --> 01:54:10,059
ton of work that I'm gonna have to do so

1970
01:54:06,460 --> 01:54:15,640
I may like pause this and we'll start on

1971
01:54:10,060 --> 01:54:16,900
it next stream I do kind of want to be

1972
01:54:15,640 --> 01:54:18,940
able to still ask if things are valid

1973
01:54:16,899 --> 01:54:22,960
there so we'll put that in there anyway

1974
01:54:18,939 --> 01:54:24,669
but um so yeah so I've got a bunch of

1975
01:54:22,960 --> 01:54:26,409
stuff that I need to do now I need to do

1976
01:54:24,670 --> 01:54:27,789
both the textures the only thing that I

1977
01:54:26,409 --> 01:54:30,159
didn't really sketch out there is how

1978
01:54:27,789 --> 01:54:31,689
the fonts would work and like I said I'm

1979
01:54:30,159 --> 01:54:34,479
not sure how I want the fonts to work

1980
01:54:31,689 --> 01:54:38,309
exactly because I'm not sure if I want

1981
01:54:34,479 --> 01:54:40,779
to try and be more more fancy with those

1982
01:54:38,310 --> 01:54:43,570
what this does mean is like a lot of

1983
01:54:40,779 --> 01:54:46,420
this stuff would go away so like all of

1984
01:54:43,569 --> 01:54:50,979
this stuff I think is actually now not

1985
01:54:46,420 --> 01:54:52,869
necessary so we just we'd need just the

1986
01:54:50,979 --> 01:54:55,149
thing for loading in the actual original

1987
01:54:52,869 --> 01:54:58,359
files I think is all we would actually

1988
01:54:55,149 --> 01:55:01,869
need so this stuff I think would

1989
01:54:58,359 --> 01:55:07,889
actually disappear I'm not sure what is

1990
01:55:01,869 --> 01:55:12,899
the gamestate doing it for us here I

1991
01:55:07,890 --> 01:55:12,900
guess it's just for just for the tasks

1992
01:55:23,630 --> 01:55:31,609
so yeah I don't really know yeah I don't

1993
01:55:29,448 --> 01:55:35,710
really know to what extent that needs to

1994
01:55:31,609 --> 01:55:37,819
be happening at all but anyway um sooo

1995
01:55:35,710 --> 01:55:39,559
so yeah I mean I think this would

1996
01:55:37,819 --> 01:55:41,210
simplify itself quite a bit and the non

1997
01:55:39,559 --> 01:55:42,800
restored memory would just be any time

1998
01:55:41,210 --> 01:55:46,460
if you actually do want to load a font

1999
01:55:42,800 --> 01:55:49,579
the font just gets loaded into the into

2000
01:55:46,460 --> 01:55:56,599
the non restored memory there that seems

2001
01:55:49,578 --> 01:55:59,328
pretty easy to abide by and we probably

2002
01:55:56,599 --> 01:56:00,739
would just bite a direct load there so

2003
01:55:59,328 --> 01:56:02,779
like you know when you want to load a

2004
01:56:00,738 --> 01:56:06,138
font we was we just call the font load

2005
01:56:02,779 --> 01:56:09,500
immediately and so we like we like don't

2006
01:56:06,139 --> 01:56:11,989
queue those right so you know when we

2007
01:56:09,500 --> 01:56:14,359
would say load font load font is just

2008
01:56:11,988 --> 01:56:18,408
immediate so none of this stuff would

2009
01:56:14,359 --> 01:56:21,710
actually happen and so we would get rid

2010
01:56:18,408 --> 01:56:23,779
of all of this information here and well

2011
01:56:21,710 --> 01:56:28,219
I mean we would still need to do the

2012
01:56:23,779 --> 01:56:30,828
actual atomic set it just wouldn't be

2013
01:56:28,219 --> 01:56:33,800
atomic anymore like we wouldn't actually

2014
01:56:30,828 --> 01:56:40,939
need to be atomic we would just say look

2015
01:56:33,800 --> 01:56:46,039
it's if the asset state equals asset

2016
01:56:40,939 --> 01:56:51,979
state unloaded then we set it to loaded

2017
01:56:46,039 --> 01:56:53,719
and we go from there right and you know

2018
01:56:51,979 --> 01:56:56,988
we probably don't even need to do that

2019
01:56:53,719 --> 01:56:59,149
we can probably just assert because you

2020
01:56:56,988 --> 01:57:01,428
probably should never get here in that

2021
01:56:59,149 --> 01:57:03,529
case so we should just say like look

2022
01:57:01,429 --> 01:57:09,289
it's got a not you know don't do that

2023
01:57:03,529 --> 01:57:12,469
right and so then here when we would do

2024
01:57:09,289 --> 01:57:16,519
this part we would say look get rid of

2025
01:57:12,469 --> 01:57:17,929
all of this and the finalization you

2026
01:57:16,520 --> 01:57:20,630
know none of this stuff should really be

2027
01:57:17,929 --> 01:57:24,578
happening here so we would just say do

2028
01:57:20,630 --> 01:57:30,219
the load immediately like right here

2029
01:57:24,578 --> 01:57:30,219
rather than doing the asset work and so

2030
01:57:33,439 --> 01:57:39,469
for finalizing the font it's this

2031
01:57:49,109 --> 01:57:51,949
sure

2032
01:57:55,079 --> 01:58:04,149
I don't really know what we were doing

2033
01:58:02,229 --> 01:58:07,659
with that I guess we just wanted to

2034
01:58:04,149 --> 01:58:11,979
remap all the glyphs conveniently so we

2035
01:58:07,659 --> 01:58:15,909
could load them out of here so that's

2036
01:58:11,979 --> 01:58:18,189
still got to happen right so really all

2037
01:58:15,909 --> 01:58:20,229
we need is inside where we you know when

2038
01:58:18,189 --> 01:58:23,579
we're in that low priority queue doing

2039
01:58:20,229 --> 01:58:27,699
the the load s at work stuff

2040
01:58:23,579 --> 01:58:32,649
when we would get rid of the the delayed

2041
01:58:27,699 --> 01:58:36,340
read so rather than calling this in an

2042
01:58:32,649 --> 01:58:41,920
asynchronous fashion here this piece of

2043
01:58:36,340 --> 01:58:46,420
information comes sort of out and gets

2044
01:58:41,920 --> 01:58:50,319
called directly so onload font when this

2045
01:58:46,420 --> 01:58:54,670
happens we would just say look you know

2046
01:58:50,319 --> 01:58:57,759
I need the the file handle here so go

2047
01:58:54,670 --> 01:58:59,440
ahead and get me that I don't know what

2048
01:58:57,760 --> 01:59:06,880
that actually is called a look at the

2049
01:58:59,439 --> 01:59:08,409
load asset work function up here and so

2050
01:59:06,880 --> 01:59:16,569
that's going to be called platform file

2051
01:59:08,409 --> 01:59:18,069
handle so if they were going to say look

2052
01:59:16,569 --> 01:59:24,039
read the data from the file we've got

2053
01:59:18,069 --> 01:59:28,840
the offset which is this we've got the

2054
01:59:24,039 --> 01:59:32,310
size which is this and the destination

2055
01:59:28,840 --> 01:59:32,310
is this

2056
01:59:36,829 --> 01:59:42,920
so here's where that stuff all gets

2057
01:59:39,500 --> 01:59:46,699
mapped out and we want to probably make

2058
01:59:42,920 --> 01:59:49,460
sure that's laid out similarly in but

2059
01:59:46,699 --> 01:59:52,939
just in different memory right assuming

2060
01:59:49,460 --> 01:59:57,590
that this actually works here then what

2061
01:59:52,939 --> 01:59:59,000
we'll do is we will I I mean I guess I

2062
01:59:57,590 --> 02:00:00,650
don't really know what we would do in

2063
01:59:59,000 --> 02:00:06,229
the case where it fails to completely

2064
02:00:00,649 --> 02:00:11,779
honest with you that's kind of a tough

2065
02:00:06,229 --> 02:00:13,129
one because I don't know that we can

2066
02:00:11,779 --> 02:00:16,059
really come back from that we could try

2067
02:00:13,130 --> 02:00:18,619
to load it again but that's about it

2068
02:00:16,060 --> 02:00:23,750
so in this case if we like failed the

2069
02:00:18,619 --> 02:00:28,849
load you know all we could really do is

2070
02:00:23,750 --> 02:00:32,180
just just we we could give the memory

2071
02:00:28,850 --> 02:00:35,329
back but that's that's all we could

2072
02:00:32,180 --> 02:00:37,820
really do here so what we would want to

2073
02:00:35,329 --> 02:00:40,039
do is assert that we can you know load

2074
02:00:37,819 --> 02:00:43,009
this thing figure out how much we

2075
02:00:40,039 --> 02:00:46,250
actually want memory wise for it instead

2076
02:00:43,010 --> 02:00:48,829
of a set header here so we don't want

2077
02:00:46,250 --> 02:00:51,609
that so in other words this goes away

2078
02:00:48,829 --> 02:00:55,729
and all we're really doing is saying

2079
02:00:51,609 --> 02:00:59,960
here's the the memory that we're gonna

2080
02:00:55,729 --> 02:01:03,529
use and so inside here we need acquire

2081
02:00:59,960 --> 02:01:04,939
some permanent asset memory so if this

2082
02:01:03,529 --> 02:01:07,550
call is gonna get modified a little bit

2083
02:01:04,939 --> 02:01:09,500
but basically this is the same thing the

2084
02:01:07,550 --> 02:01:12,199
ID top value and the asset type font

2085
02:01:09,500 --> 02:01:14,510
that would go away so we just be calling

2086
02:01:12,199 --> 02:01:16,670
this and then when we come through here

2087
02:01:14,510 --> 02:01:18,500
we would say all right let's get the

2088
02:01:16,670 --> 02:01:21,430
loaded font information out of here we

2089
02:01:18,500 --> 02:01:24,380
do whatever nonsense we're doing here

2090
02:01:21,430 --> 02:01:26,990
that means that inside the asset system

2091
02:01:24,380 --> 02:01:28,460
this is still presumably beneficial

2092
02:01:26,989 --> 02:01:32,409
because it tells us all the information

2093
02:01:28,460 --> 02:01:32,409
we need to actually work with this thing

2094
02:01:33,069 --> 02:01:41,899
so let me put that down here so that's

2095
02:01:39,500 --> 02:01:43,880
actually valid and so the only thing we

2096
02:01:41,899 --> 02:01:49,179
really don't know about here is is this

2097
02:01:43,880 --> 02:01:49,180
loaded at sample index I don't know

2098
02:01:50,149 --> 02:01:55,698
I'm pretty sure all that's available

2099
02:01:51,710 --> 02:01:57,289
from the HHA right so you know we don't

2100
02:01:55,698 --> 02:01:59,569
really need that it doesn't need to be

2101
02:01:57,289 --> 02:02:02,149
there it's it's right here so those are

2102
02:01:59,569 --> 02:02:04,158
just blind copy outs so loaded that is

2103
02:02:02,149 --> 02:02:06,979
gone right that's no good

2104
02:02:04,158 --> 02:02:12,529
this is gone and so really it's only

2105
02:02:06,979 --> 02:02:16,759
this one this is the only type this

2106
02:02:12,529 --> 02:02:19,670
that's the only actual state that that

2107
02:02:16,760 --> 02:02:22,880
remains out of our original ones the

2108
02:02:19,670 --> 02:02:24,890
rest of them are now gone so I think all

2109
02:02:22,880 --> 02:02:30,940
of that is it's pretty good

2110
02:02:24,890 --> 02:02:30,940
and I think we still do need this the

2111
02:02:35,979 --> 02:02:39,919
you know I guess even I don't really

2112
02:02:38,149 --> 02:02:46,369
even know that but I think we still do

2113
02:02:39,920 --> 02:02:48,920
need the the u32 here for what the state

2114
02:02:46,369 --> 02:02:51,590
of the asset is we may not even need

2115
02:02:48,920 --> 02:02:53,569
that if we actually chose to retire

2116
02:02:51,590 --> 02:02:59,270
things on a frame boundary we could

2117
02:02:53,569 --> 02:03:01,488
avoid even that and again we would just

2118
02:02:59,270 --> 02:03:04,550
only need a lock for this one place in

2119
02:03:01,488 --> 02:03:11,689
the code and that maybe is better I

2120
02:03:04,550 --> 02:03:13,579
don't know like so we'll see how that

2121
02:03:11,689 --> 02:03:15,529
goes as we sort of push a little bit

2122
02:03:13,579 --> 02:03:18,948
forwards on it but like I said hopefully

2123
02:03:15,529 --> 02:03:21,559
this simplifies this quite a bit coming

2124
02:03:18,948 --> 02:03:23,448
down here then for the you know just to

2125
02:03:21,560 --> 02:03:25,370
finish off the load for the load font

2126
02:03:23,448 --> 02:03:27,349
stuff so as we acquire asset memory

2127
02:03:25,369 --> 02:03:34,519
therefore this memory then what we would

2128
02:03:27,350 --> 02:03:38,239
do here is say yeah like this here is

2129
02:03:34,520 --> 02:03:39,110
just that this stuff is gonna start at

2130
02:03:38,238 --> 02:03:43,519
the font

2131
02:03:39,109 --> 02:03:44,839
iving at the memory pointer now and then

2132
02:03:43,520 --> 02:03:48,820
all the rest of this stuff stays the

2133
02:03:44,840 --> 02:03:48,819
same you know I mean

2134
02:03:49,609 --> 02:03:56,658
I don't know if there's anything else

2135
02:03:53,779 --> 02:04:00,738
none of that has to happen the finalized

2136
02:03:56,658 --> 02:04:03,079
asset nonsense up here doesn't have to

2137
02:04:00,738 --> 02:04:06,049
happen either because the only thing

2138
02:04:03,079 --> 02:04:09,500
that would go on at that point is a nun

2139
02:04:06,050 --> 02:04:11,210
or bitmap so the font goes away so we

2140
02:04:09,500 --> 02:04:13,189
really only have these two what do you

2141
02:04:11,210 --> 02:04:19,698
need to do a complete texture wrap thing

2142
02:04:13,189 --> 02:04:21,379
or don't you in theory we could even get

2143
02:04:19,698 --> 02:04:23,029
rid of that and just say look if there

2144
02:04:21,380 --> 02:04:24,679
was a texture up it needs to be complete

2145
02:04:23,029 --> 02:04:27,590
it and if there wasn't there wasn't

2146
02:04:24,679 --> 02:04:30,380
so in some sense that can even be made

2147
02:04:27,590 --> 02:04:31,909
more straightforward as well because the

2148
02:04:30,380 --> 02:04:34,868
only thing that could actually happen

2149
02:04:31,908 --> 02:04:34,868
here is

2150
02:04:46,939 --> 02:05:02,710
that's not true the only thing that

2151
02:04:52,520 --> 02:05:02,710
would really happen here is this I think

2152
02:05:03,250 --> 02:05:13,159
pretty sure and so that would get rid of

2153
02:05:08,869 --> 02:05:16,550
this as well like if these are set to

2154
02:05:13,159 --> 02:05:18,289
zero then they're just not used I think

2155
02:05:16,550 --> 02:05:21,230
that's the end of it I also don't know

2156
02:05:18,289 --> 02:05:30,019
its final state ever set to anything

2157
02:05:21,229 --> 02:05:32,689
else loaded loaded so that's always

2158
02:05:30,020 --> 02:05:43,790
asset state loaded so I think that can

2159
02:05:32,689 --> 02:05:46,339
get simplified down to like so and again

2160
02:05:43,789 --> 02:05:52,060
we maybe even we may even be able to get

2161
02:05:46,340 --> 02:06:01,779
rid of that load asset work directly is

2162
02:05:52,060 --> 02:06:01,780
presumably oh interesting

2163
02:06:03,078 --> 02:06:12,439
Oh interesting so we had a fallback here

2164
02:06:10,340 --> 02:06:14,179
I see we were considering having a

2165
02:06:12,439 --> 02:06:15,589
fallback that was for probably immediate

2166
02:06:14,179 --> 02:06:17,149
where we would just if we couldn't load

2167
02:06:15,590 --> 02:06:37,429
it done demand we would try to load it

2168
02:06:17,149 --> 02:06:38,960
right away I don't think we want that so

2169
02:06:37,429 --> 02:06:40,340
I think again the other thing we can do

2170
02:06:38,960 --> 02:06:50,539
here is just say all right look that's

2171
02:06:40,340 --> 02:06:52,159
just going to be this right so we can

2172
02:06:50,539 --> 02:06:55,988
just kind of get rid of that makes it a

2173
02:06:52,158 --> 02:06:55,988
little bit more some simplified there

2174
02:07:07,219 --> 02:07:13,789
all right so moving on like we got yeah

2175
02:07:11,719 --> 02:07:15,649
there's a ton of work to do here but I

2176
02:07:13,789 --> 02:07:19,130
think we can just simplify a lot of this

2177
02:07:15,649 --> 02:07:21,859
stuff quite a bit and just you know

2178
02:07:19,130 --> 02:07:24,050
really remove so now all of this stuff

2179
02:07:21,859 --> 02:07:28,009
can go away completely so we would never

2180
02:07:24,050 --> 02:07:30,350
need any of this asset header nonsense

2181
02:07:28,010 --> 02:07:33,860
and we would never need a variable sized

2182
02:07:30,350 --> 02:07:37,550
asset store which you know just really

2183
02:07:33,859 --> 02:07:40,519
it's ugly and I didn't like it so all of

2184
02:07:37,550 --> 02:07:41,960
that stuff would be pretty easy to do as

2185
02:07:40,520 --> 02:07:45,199
far as getting bit PAP is concerned

2186
02:07:41,960 --> 02:07:47,300
where you return a loaded bitmap again

2187
02:07:45,198 --> 02:07:51,948
that really would now just be returning

2188
02:07:47,300 --> 02:07:54,529
a texture handle so you know get bitmap

2189
02:07:51,948 --> 02:07:57,799
in this case is just going to return a

2190
02:07:54,529 --> 02:08:00,939
renderer texture and it would return the

2191
02:07:57,800 --> 02:08:03,409
renderer texture directly out of here so

2192
02:08:00,939 --> 02:08:07,639
presumably the way that would work is it

2193
02:08:03,409 --> 02:08:09,760
would just say well you know we'll we'll

2194
02:08:07,640 --> 02:08:13,340
give you back whatever the handle was

2195
02:08:09,760 --> 02:08:18,050
and if it's not loaded we would try to

2196
02:08:13,340 --> 02:08:19,610
load it I would think and then you would

2197
02:08:18,050 --> 02:08:20,989
just use his valid here to determine

2198
02:08:19,609 --> 02:08:23,149
whether or not you actually wanted to do

2199
02:08:20,988 --> 02:08:26,269
it I don't know why we weren't checking

2200
02:08:23,149 --> 02:08:27,920
the status field because that seems like

2201
02:08:26,270 --> 02:08:29,780
the more appropriate thing to be

2202
02:08:27,920 --> 02:08:32,779
checking here in other words it seems

2203
02:08:29,779 --> 02:08:37,909
like this should have been saying asset

2204
02:08:32,779 --> 02:08:40,698
state equals asset you know loaded or

2205
02:08:37,909 --> 02:08:42,198
whatever but maybe we don't even want to

2206
02:08:40,698 --> 02:08:43,729
do that maybe we wanted to say look you

2207
02:08:42,198 --> 02:08:46,819
can just render with it whatever it is

2208
02:08:43,729 --> 02:08:50,419
so the asset like texture handle in this

2209
02:08:46,819 --> 02:08:52,729
case the results going to come back as

2210
02:08:50,420 --> 02:08:55,190
that and when we unload a texture we'll

2211
02:08:52,729 --> 02:08:56,959
just romp over that with zero and that's

2212
02:08:55,189 --> 02:08:58,669
how that's gonna go

2213
02:08:56,960 --> 02:09:06,310
you know that's totally plausible I

2214
02:08:58,670 --> 02:09:09,710
think yeah and so inside get info again

2215
02:09:06,310 --> 02:09:12,199
totally same code no difference there

2216
02:09:09,710 --> 02:09:14,600
inside here where we do loaded sounds

2217
02:09:12,198 --> 02:09:17,210
again loaded sounds not really gonna be

2218
02:09:14,600 --> 02:09:18,920
a thing that you get back per se so you

2219
02:09:17,210 --> 02:09:19,609
would be expected to actually access the

2220
02:09:18,920 --> 02:09:21,829
sound info for

2221
02:09:19,609 --> 02:09:23,750
information you wanted so get sounds

2222
02:09:21,829 --> 02:09:26,750
gonna actually have to be let get sound

2223
02:09:23,750 --> 02:09:28,460
samples right and get sound samples

2224
02:09:26,750 --> 02:09:31,939
gonna have to return the next s

2225
02:09:28,460 --> 02:09:35,329
sixteenth pointer but that pointer will

2226
02:09:31,939 --> 02:09:37,460
always be valid which is kind of nice so

2227
02:09:35,329 --> 02:09:40,760
because we're all you would always be

2228
02:09:37,460 --> 02:09:43,779
aligned to the correct you 64 boundaries

2229
02:09:40,760 --> 02:09:43,780
so if this is a little bit

2230
02:09:51,679 --> 02:09:55,699
we gotta actually do that but you know

2231
02:09:53,960 --> 02:09:58,399
worst case scenarios you play the wrong

2232
02:09:55,698 --> 02:10:04,759
sound if it's like that far off in the

2233
02:09:58,399 --> 02:10:07,250
streaming but you'll play the right

2234
02:10:04,760 --> 02:10:10,760
sound or you'll get zero back pretty

2235
02:10:07,250 --> 02:10:13,939
much all the time so in here when you

2236
02:10:10,760 --> 02:10:17,690
call get font again same thing I guess

2237
02:10:13,939 --> 02:10:19,789
in this case no change their asset

2238
02:10:17,689 --> 02:10:21,799
memory header is not necessary so I

2239
02:10:19,789 --> 02:10:24,050
think all of these things that call that

2240
02:10:21,800 --> 02:10:26,960
now can just call get asset right

2241
02:10:24,050 --> 02:10:30,380
we can also assert on the type in this

2242
02:10:26,960 --> 02:10:33,170
case so again we weren't actually doing

2243
02:10:30,380 --> 02:10:36,889
that here so I think I will just

2244
02:10:33,170 --> 02:10:39,380
continue to do that here and then that

2245
02:10:36,889 --> 02:10:44,480
way we can make sure that's consistent

2246
02:10:39,380 --> 02:10:47,179
and then we can say that that always

2247
02:10:44,479 --> 02:10:49,939
comes off of the asset pointer again

2248
02:10:47,179 --> 02:10:52,658
that's just better right so you can get

2249
02:10:49,939 --> 02:10:55,039
that bitmap or the info for the bitmap

2250
02:10:52,658 --> 02:10:56,750
we may want to just return you the

2251
02:10:55,039 --> 02:10:58,158
actual bitmap itself and then you can

2252
02:10:56,750 --> 02:11:00,198
get whichever one you want but I don't

2253
02:10:58,158 --> 02:11:02,899
know we'll see how we want to play

2254
02:11:00,198 --> 02:11:05,029
around that a little bit later again

2255
02:11:02,899 --> 02:11:06,859
same thing would happen here when we axe

2256
02:11:05,029 --> 02:11:09,769
the value we would say you know is that

2257
02:11:06,859 --> 02:11:12,500
is it the sound you know we you know

2258
02:11:09,770 --> 02:11:13,969
what's going on there and we would

2259
02:11:12,500 --> 02:11:17,000
assert that we'd get that back properly

2260
02:11:13,969 --> 02:11:18,408
same thing would happen in this case we

2261
02:11:17,000 --> 02:11:20,658
would want to make sure it's actually a

2262
02:11:18,408 --> 02:11:25,939
sound before we give you back something

2263
02:11:20,658 --> 02:11:28,750
that it's not actually a sound and then

2264
02:11:25,939 --> 02:11:28,750
in the font case

2265
02:11:30,529 --> 02:11:37,619
same thing we would just always say look

2266
02:11:34,649 --> 02:11:41,239
it's the asset font in this case if we

2267
02:11:37,619 --> 02:11:47,069
got an asset if it's loaded I guess is

2268
02:11:41,239 --> 02:11:49,590
the only real difference here so yeah I

2269
02:11:47,069 --> 02:11:51,469
don't really know how that one should go

2270
02:11:49,590 --> 02:11:53,130
that's a that one's a little bit more

2271
02:11:51,470 --> 02:11:56,340
questionable like should we just

2272
02:11:53,130 --> 02:12:01,109
initialize that font to zero everywhere

2273
02:11:56,340 --> 02:12:04,380
and and it knows the difference I don't

2274
02:12:01,109 --> 02:12:09,299
know so if I look more at how that would

2275
02:12:04,380 --> 02:12:11,220
end up end up being initialized yeah I

2276
02:12:09,300 --> 02:12:13,500
think that just wants to be allotted so

2277
02:12:11,220 --> 02:12:18,570
I think that wants to be like a you know

2278
02:12:13,500 --> 02:12:22,560
an asset state equals asset state loaded

2279
02:12:18,569 --> 02:12:24,719
I think we just want to do that

2280
02:12:22,560 --> 02:12:27,180
because unlike the other ones which can

2281
02:12:24,720 --> 02:12:29,850
always be computed properly this one

2282
02:12:27,180 --> 02:12:31,380
can't be it's a bunch of pointers and so

2283
02:12:29,850 --> 02:12:33,480
we have to verify that it has in fact

2284
02:12:31,380 --> 02:12:35,279
been fully loaded before we can do

2285
02:12:33,479 --> 02:12:40,199
anything with it

2286
02:12:35,279 --> 02:12:43,139
right so I think that's all fine and

2287
02:12:40,199 --> 02:12:46,619
we'll put one last one in here where we

2288
02:12:43,140 --> 02:12:48,090
look at the asset pointer for that

2289
02:12:46,619 --> 02:12:51,899
and then I think we're good to go and

2290
02:12:48,090 --> 02:12:55,050
most of that stuff right so then in

2291
02:12:51,899 --> 02:12:56,939
stuff like this we would no longer ever

2292
02:12:55,050 --> 02:12:58,949
have loaded bitmaps anywhere right you

2293
02:12:56,939 --> 02:13:00,329
would just be doing two extra handles so

2294
02:12:58,949 --> 02:13:03,000
really you know this would get passed

2295
02:13:00,329 --> 02:13:04,619
directly in here and when people call

2296
02:13:03,000 --> 02:13:06,449
the bitmap they would they would

2297
02:13:04,619 --> 02:13:08,489
literally just be getting back just the

2298
02:13:06,449 --> 02:13:11,579
texture handle and you wouldn't be

2299
02:13:08,489 --> 02:13:13,859
passing bitmaps around ever right so

2300
02:13:11,579 --> 02:13:17,279
these are render a texture texture

2301
02:13:13,859 --> 02:13:18,409
handle and this stuff goes away you know

2302
02:13:17,279 --> 02:13:21,599
what I'm saying

2303
02:13:18,409 --> 02:13:21,599
[Music]

2304
02:13:23,399 --> 02:13:27,969
and again these are just like steps in

2305
02:13:26,168 --> 02:13:29,439
condensing the code like now that we've

2306
02:13:27,969 --> 02:13:32,439
figured out how all this stuff has to

2307
02:13:29,439 --> 02:13:34,809
work we can just start to eliminate

2308
02:13:32,439 --> 02:13:42,609
stuff that isn't necessary and that's

2309
02:13:34,809 --> 02:13:44,378
slowing us down and we're just getting

2310
02:13:42,609 --> 02:13:47,289
rid of unnecessary intermediate

2311
02:13:44,378 --> 02:13:49,418
structures right you know C++

2312
02:13:47,288 --> 02:13:51,219
programming normally a brainy program is

2313
02:13:49,418 --> 02:13:52,479
all about adding all of these crufty

2314
02:13:51,219 --> 02:13:54,429
intermediate structures that don't do

2315
02:13:52,479 --> 02:13:57,639
anything I don't like that kind of

2316
02:13:54,429 --> 02:13:59,819
coding I like to when we figure out that

2317
02:13:57,639 --> 02:14:02,739
we don't need stuff I want it to go away

2318
02:13:59,819 --> 02:14:05,679
because that always improves like the

2319
02:14:02,738 --> 02:14:07,378
quality of the code in my opinion it

2320
02:14:05,679 --> 02:14:11,260
makes it easier to maintain it makes it

2321
02:14:07,378 --> 02:14:14,189
faster to compile and to run it's just

2322
02:14:11,260 --> 02:14:14,189
it's just better

2323
02:14:20,439 --> 02:14:27,279
okay so yeah I'm still in the mood here

2324
02:14:24,220 --> 02:14:29,949
what time is it what is it like a 3:30

2325
02:14:27,279 --> 02:14:31,750
our cat should probably wrap it up so

2326
02:14:29,949 --> 02:14:33,670
I'm gonna maybe I might do another

2327
02:14:31,750 --> 02:14:35,500
stream later I don't know I'm in a

2328
02:14:33,670 --> 02:14:40,899
streaming mood certainly this this

2329
02:14:35,500 --> 02:14:46,060
season so I think we will wrap it up

2330
02:14:40,899 --> 02:14:47,889
there and then we will come back and

2331
02:14:46,060 --> 02:14:52,000
spend another maybe you know either

2332
02:14:47,890 --> 02:14:58,560
today or tomorrow going through here and

2333
02:14:52,000 --> 02:15:01,869
actually making it so that we you know

2334
02:14:58,560 --> 02:15:04,210
so that we can implement all of this

2335
02:15:01,869 --> 02:15:05,769
stuff properly and that'll give us the

2336
02:15:04,210 --> 02:15:08,020
reloading that we wanted which was the

2337
02:15:05,770 --> 02:15:12,180
main impetus for actually going through

2338
02:15:08,020 --> 02:15:15,580
the work here but it will also let us

2339
02:15:12,180 --> 02:15:18,130
just have a much more simplified code

2340
02:15:15,579 --> 02:15:20,199
base which would be nice so here's my

2341
02:15:18,130 --> 02:15:24,220
texture handle I'm gonna do in is valid

2342
02:15:20,199 --> 02:15:28,720
on that so you knew I wanted that and if

2343
02:15:24,220 --> 02:15:30,730
it's not valid well then we would load

2344
02:15:28,720 --> 02:15:34,570
it right and so that code still works

2345
02:15:30,729 --> 02:15:36,699
properly exactly how we would want yeah

2346
02:15:34,569 --> 02:15:38,259
and and we would just keep pushing

2347
02:15:36,699 --> 02:15:44,979
through here so this would be like text

2348
02:15:38,260 --> 02:15:46,840
your handle render protector um so I'll

2349
02:15:44,979 --> 02:15:52,379
go to a brief Q&amp;A you can start queuing

2350
02:15:46,840 --> 02:15:52,380
your questions now if you've got them

2351
02:16:03,199 --> 02:16:10,729
yeah and I will answer those in a second

2352
02:16:22,829 --> 02:16:28,929
all right and so now you can see like

2353
02:16:26,010 --> 02:16:33,460
pretty much most of the stuff is exactly

2354
02:16:28,929 --> 02:16:34,989
where we would expect it to be in terms

2355
02:16:33,459 --> 02:16:36,728
of stuff we're gonna have to fix so you

2356
02:16:34,989 --> 02:16:39,699
know it's just all in the asset system

2357
02:16:36,728 --> 02:16:41,558
basically right and then the the audio

2358
02:16:39,700 --> 02:16:43,540
part of things so I might just ping

2359
02:16:41,558 --> 02:16:45,728
through here and just say yeah like

2360
02:16:43,540 --> 02:16:47,290
while we're at it let me just change

2361
02:16:45,728 --> 02:16:51,129
this one as well because that's the only

2362
02:16:47,290 --> 02:16:55,719
one in another file their renderer

2363
02:16:51,129 --> 02:16:59,259
texture texture handle and we'd get that

2364
02:16:55,718 --> 02:17:00,339
out of here and then say is valid so if

2365
02:16:59,260 --> 02:17:03,790
we're actually gonna be able to render

2366
02:17:00,340 --> 02:17:05,109
it and let me just go ahead and find out

2367
02:17:03,790 --> 02:17:07,179
where the other errors would have been

2368
02:17:05,109 --> 02:17:10,689
in the entity system because there

2369
02:17:07,179 --> 02:17:12,939
aren't many right so that would just be

2370
02:17:10,689 --> 02:17:16,450
the texture handle and the texture

2371
02:17:12,939 --> 02:17:18,040
handle right and so then we're just down

2372
02:17:16,450 --> 02:17:20,229
and even the devil you I one I can

2373
02:17:18,040 --> 02:17:21,880
probably fix to so we just down to asset

2374
02:17:20,228 --> 02:17:24,968
system in audio which is what I would

2375
02:17:21,879 --> 02:17:27,688
want so when you know in here it's just

2376
02:17:24,968 --> 02:17:27,688
text your handle

2377
02:17:39,620 --> 02:18:14,410
and let's see what else we got is that

2378
02:18:04,760 --> 02:18:14,409
it well I got one more debug system

2379
02:18:30,638 --> 02:18:37,308
all right so I think that is everything

2380
02:18:35,898 --> 02:18:39,228
except for the two systems that we

2381
02:18:37,308 --> 02:18:47,750
actually wanted to change which is audio

2382
02:18:39,228 --> 02:18:49,849
system and the asset so that should

2383
02:18:47,750 --> 02:19:00,319
leave us exactly where we want to be for

2384
02:18:49,849 --> 02:19:03,219
next stream start yeah I don't know when

2385
02:19:00,319 --> 02:19:05,090
the next team will leave but some time

2386
02:19:03,218 --> 02:19:06,169
could you elaborate more on what you

2387
02:19:05,090 --> 02:19:07,609
were talking about with more

2388
02:19:06,170 --> 02:19:10,040
intermediate data structures in

2389
02:19:07,609 --> 02:19:10,819
object-oriented programming I just mean

2390
02:19:10,040 --> 02:19:14,870
to say that

2391
02:19:10,819 --> 02:19:18,379
so in object-oriented programming and as

2392
02:19:14,870 --> 02:19:20,120
the word itself implies the idea is not

2393
02:19:18,379 --> 02:19:22,879
really to focus on the algorithm its to

2394
02:19:20,120 --> 02:19:25,729
focus on the objects because that is I

2395
02:19:22,879 --> 02:19:27,920
mean it's right in the name right and so

2396
02:19:25,728 --> 02:19:30,709
it's considered a virtue to have extra

2397
02:19:27,920 --> 02:19:35,179
things in there that are representing

2398
02:19:30,709 --> 02:19:38,569
something and it's not considered a main

2399
02:19:35,179 --> 02:19:41,540
goal of your programming to keep the

2400
02:19:38,569 --> 02:19:45,349
number of objects as low as physically

2401
02:19:41,540 --> 02:19:48,559
possible right but I consider that a

2402
02:19:45,349 --> 02:19:51,799
good thing right like I like the code to

2403
02:19:48,558 --> 02:19:54,139
have as few of objects or things that

2404
02:19:51,799 --> 02:19:56,000
look like them as possible and I like

2405
02:19:54,139 --> 02:19:58,340
things as much as possible to be just

2406
02:19:56,000 --> 02:19:59,989
algorithms you can read so it's the

2407
02:19:58,340 --> 02:20:02,148
procedures that are important objects

2408
02:19:59,989 --> 02:20:03,530
are irrelevant and I don't care about

2409
02:20:02,148 --> 02:20:07,189
how you draw the boundaries around them

2410
02:20:03,530 --> 02:20:11,689
I think that's all erroneous things to

2411
02:20:07,189 --> 02:20:14,989
focus on right and so I like it when we

2412
02:20:11,689 --> 02:20:17,059
remove layers of abstraction and bind

2413
02:20:14,989 --> 02:20:18,199
things more tightly together whereas

2414
02:20:17,059 --> 02:20:20,569
object-oriented programming is the

2415
02:20:18,200 --> 02:20:22,399
opposite it likes to separate things and

2416
02:20:20,569 --> 02:20:24,579
add layers of abstraction in between

2417
02:20:22,398 --> 02:20:24,579
them

2418
02:20:29,250 --> 02:20:32,079
you're the start of the stream I think

2419
02:20:31,060 --> 02:20:33,369
you mentioned focusing and making the

2420
02:20:32,079 --> 02:20:34,989
game look more professional can you

2421
02:20:33,370 --> 02:20:36,820
recap what that entails and does that

2422
02:20:34,989 --> 02:20:43,271
mean making some artistic decisions on

2423
02:20:36,819 --> 02:20:46,810
the stream uh no I just mean like so at

2424
02:20:43,271 --> 02:20:48,820
some point you make a leap from the game

2425
02:20:46,810 --> 02:20:52,899
looking like a prototype to looking like

2426
02:20:48,819 --> 02:20:55,841
an actual game and it's sort of going in

2427
02:20:52,899 --> 02:20:58,869
that direction now right so let me give

2428
02:20:55,841 --> 02:21:02,021
you some examples first of all we will

2429
02:20:58,870 --> 02:21:05,250
probably turn this off by default and

2430
02:21:02,021 --> 02:21:07,780
only put it on when you hit a key right

2431
02:21:05,250 --> 02:21:09,761
second there's like empty space here so

2432
02:21:07,780 --> 02:21:12,400
we'll start making our levels Oh ease

2433
02:21:09,761 --> 02:21:14,729
like the camera will never go outside of

2434
02:21:12,399 --> 02:21:18,761
where there's actual stuff so we'll have

2435
02:21:14,729 --> 02:21:20,649
you know something out here like you

2436
02:21:18,761 --> 02:21:24,761
know grounds of the orphanage and stuff

2437
02:21:20,649 --> 02:21:26,800
like that will remove placeholder style

2438
02:21:24,761 --> 02:21:29,560
things like these light cubes you know

2439
02:21:26,800 --> 02:21:31,060
we'll have a real story about how lights

2440
02:21:29,560 --> 02:21:36,159
are attached to objects and they'll be

2441
02:21:31,060 --> 02:21:37,959
invisible we will no longer have stuff

2442
02:21:36,159 --> 02:21:40,841
like weird cat heads that show up as a

2443
02:21:37,959 --> 02:21:44,409
particle system test right and as you

2444
02:21:40,841 --> 02:21:46,120
start to go through each thing and clean

2445
02:21:44,409 --> 02:21:47,920
it up and polish it it then starts

2446
02:21:46,120 --> 02:21:49,900
feeling like an actual game world and it

2447
02:21:47,920 --> 02:21:51,851
looks more professional right and you

2448
02:21:49,899 --> 02:21:56,709
haven't really done anything specific

2449
02:21:51,851 --> 02:21:59,771
per se but you have crossed some

2450
02:21:56,709 --> 02:22:01,959
threshold of cruft that just you haven't

2451
02:21:59,771 --> 02:22:03,341
been paying attention to and now that

2452
02:22:01,959 --> 02:22:06,880
you've paid attention to it it looks

2453
02:22:03,341 --> 02:22:08,771
much more polished right and it starts

2454
02:22:06,880 --> 02:22:10,539
to look like an actual game that you

2455
02:22:08,771 --> 02:22:12,761
might buy and less like something that

2456
02:22:10,540 --> 02:22:14,200
you're working on and so I'm just saying

2457
02:22:12,761 --> 02:22:15,931
we're kind of at that point where we're

2458
02:22:14,200 --> 02:22:19,659
starting to try and cross over into that

2459
02:22:15,931 --> 02:22:22,271
and so that there's a lot of things on

2460
02:22:19,659 --> 02:22:25,229
that threshold that we want to look at

2461
02:22:22,271 --> 02:22:25,230
you know what I mean

2462
02:22:28,529 --> 02:22:35,488
I've read the sequel happy compass

2463
02:22:32,289 --> 02:22:43,779
laughs to you as well Krampus laughs

2464
02:22:35,488 --> 02:22:45,038
happy crumb for self I don't know how

2465
02:22:43,779 --> 02:22:48,158
you celebrate it other than by

2466
02:22:45,039 --> 02:22:50,079
programming I'm putting a bit off topic

2467
02:22:48,158 --> 02:22:51,818
if I remember correctly you said that

2468
02:22:50,078 --> 02:22:53,350
during the kron4 South streams you may

2469
02:22:51,818 --> 02:22:54,969
do some other things like hammer a ray

2470
02:22:53,350 --> 02:22:58,059
will be the next thing to do with

2471
02:22:54,969 --> 02:22:59,438
handmade ray the next thing we would do

2472
02:22:58,059 --> 02:23:00,850
with handmade raised it doesn't have a

2473
02:22:59,439 --> 02:23:03,100
reflectance function in there right now

2474
02:23:00,850 --> 02:23:07,748
so basically everything is like just a

2475
02:23:03,100 --> 02:23:10,238
chalk like a blend between chalk and

2476
02:23:07,748 --> 02:23:12,458
mirror I think or something it doesn't

2477
02:23:10,238 --> 02:23:14,590
have like any doesn't try to actually

2478
02:23:12,459 --> 02:23:17,770
compute any real light kind of

2479
02:23:14,590 --> 02:23:21,158
information and so that's that's what we

2480
02:23:17,770 --> 02:23:24,520
would do probably and then after that be

2481
02:23:21,158 --> 02:23:27,449
some like important sampling so all

2482
02:23:24,520 --> 02:23:27,449
right I'm gonna wrap it up

2483
02:23:36,748 --> 02:23:39,939
thank your for joining me for the upside

2484
02:23:38,918 --> 02:23:42,128
handmade here it's been a pleasure

2485
02:23:39,939 --> 02:23:43,300
coding with you as always if you would

2486
02:23:42,129 --> 02:23:44,739
like to follow my series at home you can

2487
02:23:43,299 --> 02:23:47,228
always peer to the game on handmade here

2488
02:23:44,738 --> 02:23:50,618
org it comes to the source code so you

2489
02:23:47,228 --> 02:23:52,059
can follow along with it I'll be back

2490
02:23:50,619 --> 02:23:55,119
here for another Krampus Lau stream

2491
02:23:52,059 --> 02:23:58,238
fairly soon I'm not sure exactly when

2492
02:23:55,119 --> 02:23:59,770
we'll see but I would like to go take a

2493
02:23:58,238 --> 02:24:03,430
look at that asset system so we'll see

2494
02:23:59,770 --> 02:24:06,189
when that happens that's about it

2495
02:24:03,430 --> 02:24:08,078
have fun programming on your own and

2496
02:24:06,189 --> 02:24:10,139
I'll see you when we return take it easy

2497
02:24:08,078 --> 02:24:10,139
everybody

