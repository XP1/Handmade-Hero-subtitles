1
00:00:01,399 --> 00:00:06,240
hello everybody and welcome to handmade

2
00:00:04,019 --> 00:00:10,468
Hiro share we code complete-game live on

3
00:00:06,240 --> 00:00:12,359
stream we are in the middle of I guess I

4
00:00:10,468 --> 00:00:14,849
just want to say fumbling around with

5
00:00:12,359 --> 00:00:16,858
some lighting in our game the reason I

6
00:00:14,849 --> 00:00:21,890
say fumbling around is because we don't

7
00:00:16,859 --> 00:00:24,210
really have any particularly smart idea

8
00:00:21,890 --> 00:00:27,990
about how lighting should be done in

9
00:00:24,210 --> 00:00:29,550
sort of a two and a half tee game to the

10
00:00:27,989 --> 00:00:32,219
best of my knowledge there isn't really

11
00:00:29,550 --> 00:00:33,840
a standard way to do it and not a lot of

12
00:00:32,219 --> 00:00:36,480
people have really done that much with

13
00:00:33,840 --> 00:00:38,370
it to be honest one of the problems with

14
00:00:36,479 --> 00:00:41,339
two and a half T games in general is

15
00:00:38,369 --> 00:00:43,709
that the industry had kind of moved to

16
00:00:41,340 --> 00:00:45,660
3d games and a lot of the serious

17
00:00:43,710 --> 00:00:48,808
graphics programmers had all moved to 3d

18
00:00:45,659 --> 00:00:50,609
games by the time the horsepower in pcs

19
00:00:48,808 --> 00:00:53,759
was good enough to do much in the way of

20
00:00:50,609 --> 00:00:56,280
interesting lighting there were no such

21
00:00:53,759 --> 00:00:59,849
thing as you know fully programmable

22
00:00:56,280 --> 00:01:02,730
shaders GPUs back in the day when most

23
00:00:59,850 --> 00:01:07,109
serious graphics programmers wrote 2d

24
00:01:02,729 --> 00:01:09,658
games so one of the problems with it is

25
00:01:07,109 --> 00:01:12,659
it's just not as developed as the theory

26
00:01:09,659 --> 00:01:14,400
of lighting and 3d games and similarly

27
00:01:12,659 --> 00:01:17,009
one of the problems with two-and-a-half

28
00:01:14,400 --> 00:01:18,689
T games of course is that lighting kind

29
00:01:17,009 --> 00:01:20,340
of wants you to have a full three

30
00:01:18,688 --> 00:01:23,039
description of the scene in order to do

31
00:01:20,340 --> 00:01:24,450
it correctly and even then you've got a

32
00:01:23,040 --> 00:01:25,590
lot of questions you have to answer

33
00:01:24,450 --> 00:01:28,920
about how you're going to do it

34
00:01:25,590 --> 00:01:30,509
efficiently and in 2d rendering we

35
00:01:28,920 --> 00:01:32,100
really don't have that ability right we

36
00:01:30,509 --> 00:01:36,239
don't even know what the backs of things

37
00:01:32,099 --> 00:01:38,640
look like a lot of times some things

38
00:01:36,239 --> 00:01:41,158
don't even ever have a back drawn for

39
00:01:38,640 --> 00:01:43,799
them at all only characters you can

40
00:01:41,159 --> 00:01:45,840
actually face multiple directions even

41
00:01:43,799 --> 00:01:50,040
have sprites drawn for their various

42
00:01:45,840 --> 00:01:52,890
directions so it's kind of a bizarre

43
00:01:50,040 --> 00:01:55,710
situation and it's always a little bit

44
00:01:52,890 --> 00:01:59,009
of a artistic process I guess I would

45
00:01:55,709 --> 00:02:00,328
say to construct a lighting algorithm

46
00:01:59,009 --> 00:02:02,069
for something like a two and a half T

47
00:02:00,328 --> 00:02:04,529
game because what you're really trying

48
00:02:02,069 --> 00:02:08,280
to do here is come up with something

49
00:02:04,530 --> 00:02:10,110
that approximates what light does in a

50
00:02:08,280 --> 00:02:12,330
way that's artistically satisfying but

51
00:02:10,110 --> 00:02:12,960
that is knowingly incorrect pretty much

52
00:02:12,330 --> 00:02:14,910
everywhere

53
00:02:12,960 --> 00:02:17,370
because you don't even have the data you

54
00:02:14,909 --> 00:02:19,590
would need to do the job correctly now

55
00:02:17,370 --> 00:02:22,349
we've had sort of success with this very

56
00:02:19,590 --> 00:02:25,740
process in a different domain which is

57
00:02:22,349 --> 00:02:28,169
that actually all of the same things can

58
00:02:25,740 --> 00:02:32,159
be said for the fact that we wanted a 3d

59
00:02:28,169 --> 00:02:34,559
camera for a 2-d game and there is no

60
00:02:32,159 --> 00:02:36,750
right answer for that either and I think

61
00:02:34,560 --> 00:02:39,750
we came up with a really pretty great

62
00:02:36,750 --> 00:02:42,360
solution I love how our renderer works

63
00:02:39,750 --> 00:02:43,889
now it's a fire I forget renderer so you

64
00:02:42,360 --> 00:02:47,640
don't have to do any sprite sorting or

65
00:02:43,889 --> 00:02:48,989
anything and it really looks nice when

66
00:02:47,639 --> 00:02:51,089
you move around and when the camera

67
00:02:48,990 --> 00:02:53,520
moves around I think it like really

68
00:02:51,090 --> 00:02:56,610
captures kind of the motion everything

69
00:02:53,520 --> 00:02:58,650
properly so everything in there in the

70
00:02:56,610 --> 00:03:00,510
renderer came out exactly how I would

71
00:02:58,650 --> 00:03:01,830
want and I think when we put the new art

72
00:03:00,509 --> 00:03:02,250
in it's going to look really nice as

73
00:03:01,830 --> 00:03:03,840
well

74
00:03:02,250 --> 00:03:05,189
and fix some of the other things

75
00:03:03,840 --> 00:03:07,530
remember some of stuff like the hero

76
00:03:05,189 --> 00:03:09,599
hopping for example which now looks kind

77
00:03:07,530 --> 00:03:11,610
of crappy was done back when we didn't

78
00:03:09,599 --> 00:03:14,069
have real 3d so it's not even really

79
00:03:11,610 --> 00:03:15,480
using the three dimensions the way it

80
00:03:14,069 --> 00:03:17,819
should so I think stuff like that's

81
00:03:15,479 --> 00:03:20,939
going to look really nice as well once

82
00:03:17,819 --> 00:03:22,979
we go back and sort of do a final pass

83
00:03:20,939 --> 00:03:24,990
on things to get animation looking nice

84
00:03:22,979 --> 00:03:27,869
in the new 3d world I think that's going

85
00:03:24,990 --> 00:03:29,250
to be great but putting that aside I'm

86
00:03:27,870 --> 00:03:30,539
really happy with how the renderer

87
00:03:29,250 --> 00:03:33,289
turned out and I think it's very good

88
00:03:30,539 --> 00:03:39,659
for a 3d Zelda ish kind of experience

89
00:03:33,289 --> 00:03:42,149
and I should say a 2d Zelda brought into

90
00:03:39,659 --> 00:03:44,069
3d which I don't know if Zelda really

91
00:03:42,150 --> 00:03:46,080
ever did all that effectively there's

92
00:03:44,069 --> 00:03:47,939
definitely been some attempts at it but

93
00:03:46,080 --> 00:03:50,730
you know mostly Zelda went to real 3d

94
00:03:47,939 --> 00:03:53,460
for their three day big 3d stuff anyway

95
00:03:50,729 --> 00:03:56,519
so what I would like to do here is see

96
00:03:53,460 --> 00:04:00,659
if we can't sort of cheat the devil

97
00:03:56,520 --> 00:04:02,580
twice and come up with also a good clean

98
00:04:00,659 --> 00:04:04,680
way of getting some nice lighting in

99
00:04:02,580 --> 00:04:07,260
here now again it doesn't have to be

100
00:04:04,680 --> 00:04:10,140
accurate it just has to look nice and

101
00:04:07,259 --> 00:04:11,639
already what you can see I think for me

102
00:04:10,139 --> 00:04:14,309
moving around with this light source

103
00:04:11,639 --> 00:04:16,620
attached to the hero is that just very

104
00:04:14,310 --> 00:04:19,620
basic simple lighting already looks

105
00:04:16,620 --> 00:04:22,530
pretty nice for a limited case and so

106
00:04:19,620 --> 00:04:25,879
what I'm looking at here is just can we

107
00:04:22,529 --> 00:04:28,069
extend this to something

108
00:04:25,879 --> 00:04:30,350
that gives a little bit more complexity

109
00:04:28,069 --> 00:04:32,360
to the lighting so can we go ahead and

110
00:04:30,350 --> 00:04:34,010
make something that scales nicely to say

111
00:04:32,360 --> 00:04:35,780
hundreds of light sources so there's a

112
00:04:34,009 --> 00:04:38,629
lot more lights in the scene than this

113
00:04:35,779 --> 00:04:41,109
one could we do something that adds

114
00:04:38,629 --> 00:04:44,209
perhaps a little bit of Bounce lighting

115
00:04:41,110 --> 00:04:46,100
or other sorts of effects like that that

116
00:04:44,209 --> 00:04:48,739
will round out the feel a little bit

117
00:04:46,100 --> 00:04:51,200
more make it a little bit softer rather

118
00:04:48,740 --> 00:04:54,500
than being such a hard edge kind of a

119
00:04:51,199 --> 00:04:56,509
other lighting and and the answer to

120
00:04:54,500 --> 00:05:00,079
whether we can do that is I have no idea

121
00:04:56,509 --> 00:05:03,409
like I said it's a complete experimental

122
00:05:00,079 --> 00:05:05,180
situation so where we left off last

123
00:05:03,410 --> 00:05:07,760
weekend is we were saying well maybe

124
00:05:05,180 --> 00:05:09,650
let's create some textures let's write

125
00:05:07,759 --> 00:05:11,779
some lighting into the textures and then

126
00:05:09,649 --> 00:05:14,060
let's try to use that lighting on the

127
00:05:11,779 --> 00:05:16,099
characters and obviously the first thing

128
00:05:14,060 --> 00:05:18,709
that we can do for that is the very very

129
00:05:16,100 --> 00:05:21,590
simple process where we could just take

130
00:05:18,709 --> 00:05:24,919
basic lights and write them into

131
00:05:21,589 --> 00:05:27,739
textures and just get the old-school

132
00:05:24,920 --> 00:05:30,830
blobby like this lighting doesn't even

133
00:05:27,740 --> 00:05:32,329
have directionality to it let's just get

134
00:05:30,829 --> 00:05:34,129
that working right because that's hard

135
00:05:32,329 --> 00:05:36,529
enough to get working in GPU land right

136
00:05:34,129 --> 00:05:39,769
you can always have all sorts of weird

137
00:05:36,529 --> 00:05:41,779
GPU bugs that take a while to eye to

138
00:05:39,769 --> 00:05:42,949
troubleshoot and so it's not like we

139
00:05:41,779 --> 00:05:44,659
were if we were writing this code

140
00:05:42,949 --> 00:05:46,550
ourselves and our own rasterizer would

141
00:05:44,660 --> 00:05:48,400
be like shooting fish in a barrel but on

142
00:05:46,550 --> 00:05:52,750
the GPU there's always a little bit of

143
00:05:48,399 --> 00:05:52,750
cross your fingers and roll the dice so

144
00:05:55,899 --> 00:06:02,779
what I want to do is just pop over I

145
00:05:58,819 --> 00:06:04,459
would say today 393 so - today is code

146
00:06:02,779 --> 00:06:07,369
if you want to follow along at home you

147
00:06:04,459 --> 00:06:09,229
want to do GAE 392 source code that's

148
00:06:07,370 --> 00:06:13,569
the source code that I'm starting with

149
00:06:09,230 --> 00:06:17,000
let's open up for coder with these file

150
00:06:13,569 --> 00:06:20,689
names at the top I added that back for

151
00:06:17,000 --> 00:06:22,670
every one people were complaining that I

152
00:06:20,689 --> 00:06:24,079
switched it because now that for coder

153
00:06:22,670 --> 00:06:26,210
allows you to get rid of those bars at

154
00:06:24,079 --> 00:06:28,550
work I don't use them because Irish know

155
00:06:26,209 --> 00:06:30,859
what file I'm in but people on the

156
00:06:28,550 --> 00:06:32,090
stream couldn't remember what file I was

157
00:06:30,860 --> 00:06:33,770
in that makes sense if you're scrubbing

158
00:06:32,089 --> 00:06:36,379
around it's probably hard on the stream

159
00:06:33,769 --> 00:06:38,058
you look scruffy are you like what files

160
00:06:36,379 --> 00:06:40,428
me and I have no idea

161
00:06:38,059 --> 00:06:43,429
so they're back you know they're back I

162
00:06:40,428 --> 00:06:45,378
lost one whole line of code on the end

163
00:06:43,428 --> 00:06:47,958
which you know I don't want to put that

164
00:06:45,379 --> 00:06:49,429
on you but I did and it's already like I

165
00:06:47,959 --> 00:06:51,288
barely get to see any lines of code

166
00:06:49,428 --> 00:06:54,618
because I have to have it the font big

167
00:06:51,288 --> 00:06:55,938
enough for the 1080p stream so it's like

168
00:06:54,619 --> 00:07:00,079
I'm looking at my codes through this

169
00:06:55,939 --> 00:07:02,419
tiny little like people like like some

170
00:07:00,079 --> 00:07:05,629
kind of a like slit in a door or

171
00:07:02,418 --> 00:07:07,248
something I'm trying to look at the room

172
00:07:05,629 --> 00:07:10,099
on the other side

173
00:07:07,249 --> 00:07:12,979
but anyway so what we've got here is I

174
00:07:10,098 --> 00:07:16,598
think before we finished on last week's

175
00:07:12,978 --> 00:07:19,908
last week's dream we did actually create

176
00:07:16,598 --> 00:07:22,368
this concept of light textures here this

177
00:07:19,908 --> 00:07:24,498
is the OpenGL frame buffer sort of

178
00:07:22,369 --> 00:07:27,079
utility struct that we created before

179
00:07:24,499 --> 00:07:29,028
and this allows us to basically say

180
00:07:27,079 --> 00:07:32,149
alright let's create a bunch of these

181
00:07:29,028 --> 00:07:34,449
light textures I don't know how many but

182
00:07:32,149 --> 00:07:38,869
you know the game can decide how many

183
00:07:34,449 --> 00:07:40,429
and how big they are

184
00:07:38,869 --> 00:07:41,749
and we said we're we're never going to

185
00:07:40,428 --> 00:07:44,718
have more than eight of these so we just

186
00:07:41,749 --> 00:07:47,449
hard capped it there but we probably

187
00:07:44,718 --> 00:07:49,009
won't be using all eight I think we were

188
00:07:47,449 --> 00:07:50,478
saying we'd use one per color at the

189
00:07:49,009 --> 00:07:54,439
moment so there'd only be actually four

190
00:07:50,478 --> 00:07:56,318
I believe is what our plan was and what

191
00:07:54,439 --> 00:07:59,269
we want to do here if you say like okay

192
00:07:56,319 --> 00:08:01,749
we want to write these lights into the

193
00:07:59,269 --> 00:08:04,908
we want to write lice into these buffers

194
00:08:01,749 --> 00:08:09,199
and then we want to go ahead and just

195
00:08:04,908 --> 00:08:14,118
kind of work out how the lights are

196
00:08:09,199 --> 00:08:16,478
going to affect stuff like how will we

197
00:08:14,119 --> 00:08:19,399
look up into these light textures

198
00:08:16,478 --> 00:08:21,228
information relate to the lighting so

199
00:08:19,399 --> 00:08:25,759
there's two things we have to do here

200
00:08:21,228 --> 00:08:29,118
and I'd like to start with the first

201
00:08:25,759 --> 00:08:31,399
part of that so the first thing that I

202
00:08:29,119 --> 00:08:34,158
want to do is I want to upgrade the

203
00:08:31,399 --> 00:08:38,500
render group to allow us to put the

204
00:08:34,158 --> 00:08:41,259
lighting information into the scene and

205
00:08:38,500 --> 00:08:43,938
let's talk about this a little bit here

206
00:08:41,259 --> 00:08:48,909
because effectively you know we've got a

207
00:08:43,938 --> 00:08:48,909
depth peel renderer right

208
00:08:49,710 --> 00:08:58,110
oh and this reminds me of something that

209
00:08:55,019 --> 00:09:00,059
I thought of during the week I had a

210
00:08:58,110 --> 00:09:02,100
random thought about this but I don't

211
00:09:00,059 --> 00:09:04,349
know if it's particularly useful but it

212
00:09:02,100 --> 00:09:08,460
might be and we'll have to think about

213
00:09:04,350 --> 00:09:12,220
it all right

214
00:09:08,460 --> 00:09:13,550
so effectively what I want to do here is

215
00:09:12,220 --> 00:09:15,750
[Applause]

216
00:09:13,549 --> 00:09:18,209
break lighting down into something

217
00:09:15,750 --> 00:09:21,210
that's a little bit more manageable so

218
00:09:18,210 --> 00:09:23,310
let's think about this what's the

219
00:09:21,210 --> 00:09:25,259
easiest thing that we could possibly do

220
00:09:23,309 --> 00:09:28,789
if we wanted to capture lighting and use

221
00:09:25,259 --> 00:09:34,950
it like we are currently using it right

222
00:09:28,789 --> 00:09:36,809
so let's suppose I've got my 3d world

223
00:09:34,950 --> 00:09:42,540
here and I'm going to draw it from the

224
00:09:36,809 --> 00:09:44,159
top looking into it right so here are

225
00:09:42,539 --> 00:09:45,629
the various floors and maybe you know

226
00:09:44,159 --> 00:09:48,089
like in our case we have a hole in the

227
00:09:45,629 --> 00:09:51,090
floor so you can see down to some stuff

228
00:09:48,090 --> 00:09:52,740
right so you know you can see

229
00:09:51,090 --> 00:09:54,960
potentially multiple layers even though

230
00:09:52,740 --> 00:09:58,019
like right here might be blocked because

231
00:09:54,960 --> 00:10:00,650
this is opaque here might be you know

232
00:09:58,019 --> 00:10:04,649
you can be able to see through it right

233
00:10:00,649 --> 00:10:07,199
okay now if we were in 2d so this was

234
00:10:04,649 --> 00:10:09,600
looking top-down and I'm looking at the

235
00:10:07,200 --> 00:10:13,050
actual game if we were in 2d you could

236
00:10:09,600 --> 00:10:15,149
imagine making like a grid right and you

237
00:10:13,049 --> 00:10:18,329
could imagine our light sources could be

238
00:10:15,149 --> 00:10:21,240
put into the grid in such a way so that

239
00:10:18,330 --> 00:10:24,450
if there was a light source that was in

240
00:10:21,240 --> 00:10:25,799
a particular grid we would record the

241
00:10:24,450 --> 00:10:28,890
information about that light source

242
00:10:25,799 --> 00:10:30,959
right like suppose we were talking about

243
00:10:28,889 --> 00:10:33,449
GPU at all we could just do the same

244
00:10:30,960 --> 00:10:36,870
thing we're storing right now which is

245
00:10:33,450 --> 00:10:40,310
like a P and an I like a position in an

246
00:10:36,870 --> 00:10:43,769
intensity I think we called it strength

247
00:10:40,309 --> 00:10:46,019
so P N and s but intensity of the light

248
00:10:43,769 --> 00:10:47,730
source right so this is where the light

249
00:10:46,019 --> 00:10:50,189
source is this is how bright it is and

250
00:10:47,730 --> 00:10:51,990
we just have a simple point source model

251
00:10:50,190 --> 00:10:54,330
like we're not trying to model area

252
00:10:51,990 --> 00:10:56,340
light sources or anything like that

253
00:10:54,330 --> 00:10:58,259
we're just doing points and we figure if

254
00:10:56,340 --> 00:11:01,190
we want areas we'll just add more points

255
00:10:58,259 --> 00:11:01,189
or something like this

256
00:11:01,480 --> 00:11:07,509
so the first problem we run into right

257
00:11:04,659 --> 00:11:10,059
is when we try to map this into hardware

258
00:11:07,509 --> 00:11:11,860
we have a fixed storage size and there's

259
00:11:10,059 --> 00:11:13,119
ways you can get around pic storage size

260
00:11:11,860 --> 00:11:19,419
but it becomes increasingly more

261
00:11:13,120 --> 00:11:22,870
complicated so we've got a problem where

262
00:11:19,419 --> 00:11:25,328
we we have a grid but it can only store

263
00:11:22,870 --> 00:11:27,399
for example one of these so if we have

264
00:11:25,328 --> 00:11:29,879
lots of lights that are overlapping in

265
00:11:27,399 --> 00:11:32,860
here we need a way to merge them right

266
00:11:29,879 --> 00:11:35,200
but that's not the end of the world you

267
00:11:32,860 --> 00:11:37,149
could imagine merging the position and

268
00:11:35,200 --> 00:11:40,629
source of the light fairly

269
00:11:37,149 --> 00:11:42,549
straightforward right we could imagine

270
00:11:40,629 --> 00:11:45,879
just averaging the position of the light

271
00:11:42,549 --> 00:11:47,379
source let's say in averaging the store

272
00:11:45,879 --> 00:11:50,500
and summing the strength of the light

273
00:11:47,379 --> 00:11:52,870
source and that would give us if we did

274
00:11:50,500 --> 00:11:55,120
that for a red green and blue that would

275
00:11:52,870 --> 00:11:57,100
give us an interesting approximation to

276
00:11:55,120 --> 00:11:59,950
the light is it something that's good

277
00:11:57,100 --> 00:12:04,720
enough I have no idea we haven't tried

278
00:11:59,950 --> 00:12:05,920
it yet okay so I feel like this is the

279
00:12:04,720 --> 00:12:07,930
first thing I want to get working just

280
00:12:05,919 --> 00:12:09,610
something real basic like that

281
00:12:07,929 --> 00:12:12,458
let me quickly mention the other thing I

282
00:12:09,610 --> 00:12:15,039
was thinking about just separately

283
00:12:12,458 --> 00:12:17,169
but this is the first thing you want to

284
00:12:15,039 --> 00:12:19,539
get working what we have to do here is

285
00:12:17,169 --> 00:12:24,370
introduce a light accumulation pass

286
00:12:19,539 --> 00:12:26,828
right where basically before we render

287
00:12:24,370 --> 00:12:29,409
any of our depth fields we want to first

288
00:12:26,828 --> 00:12:32,109
render all of our light sources just the

289
00:12:29,409 --> 00:12:33,698
light sources into some kind of a set of

290
00:12:32,110 --> 00:12:35,919
textures we've got those textures now

291
00:12:33,698 --> 00:12:37,899
we'll render into them right now we'll

292
00:12:35,919 --> 00:12:39,669
just stick with 2d when we get 2d

293
00:12:37,899 --> 00:12:41,500
working direct a section we'll make

294
00:12:39,669 --> 00:12:44,289
those textures 3d and see if we can get

295
00:12:41,500 --> 00:12:48,759
that working to our satisfaction right

296
00:12:44,289 --> 00:12:50,259
and we can go from there alright so

297
00:12:48,759 --> 00:12:51,458
here's the other thing that I wanted to

298
00:12:50,259 --> 00:12:54,549
mention that I thought was pretty

299
00:12:51,458 --> 00:12:58,719
interesting and we'll see what you folks

300
00:12:54,549 --> 00:13:00,969
think of it as well so let's suppose I

301
00:12:58,720 --> 00:13:04,540
wanted to do something like this light

302
00:13:00,970 --> 00:13:06,820
source rendering right but I wanted my

303
00:13:04,539 --> 00:13:09,338
light to more accurately reflect the

304
00:13:06,820 --> 00:13:14,560
geometry so for example let's suppose

305
00:13:09,339 --> 00:13:17,650
that I go into here right

306
00:13:14,559 --> 00:13:19,599
and I'm hopping around right and the

307
00:13:17,649 --> 00:13:21,669
lights moving but one thing you'll

308
00:13:19,600 --> 00:13:24,490
notice about the weight of lights moving

309
00:13:21,669 --> 00:13:27,579
is there's no shadowing at all right and

310
00:13:24,490 --> 00:13:30,039
that is actually true pretty much

311
00:13:27,580 --> 00:13:32,170
everywhere so for example if I'm because

312
00:13:30,039 --> 00:13:34,089
all we're doing is a radial light right

313
00:13:32,169 --> 00:13:36,639
we haven't done any real work on this

314
00:13:34,090 --> 00:13:39,430
lighting so what that means is you can

315
00:13:36,639 --> 00:13:42,490
kind of see for example as I move around

316
00:13:39,429 --> 00:13:46,539
this surface gets brighter or darker

317
00:13:42,490 --> 00:13:48,549
based on how far I am from the light or

318
00:13:46,539 --> 00:13:52,209
like say the underside of this surface

319
00:13:48,549 --> 00:13:55,929
but that light would never be able to

320
00:13:52,210 --> 00:13:57,940
hit those right even bounce lighting

321
00:13:55,929 --> 00:14:00,099
would never really illuminate these

322
00:13:57,940 --> 00:14:02,920
underside surfaces because by the time

323
00:14:00,100 --> 00:14:05,409
the light bounced off the side of one of

324
00:14:02,919 --> 00:14:07,569
these off the bottom of the top of one

325
00:14:05,409 --> 00:14:09,759
of these and up onto here it would be

326
00:14:07,570 --> 00:14:12,220
incredibly dim because a lot of that

327
00:14:09,759 --> 00:14:15,490
light would have gotten absorbed you

328
00:14:12,220 --> 00:14:17,259
know I'm saying um so right now we're

329
00:14:15,490 --> 00:14:21,460
strictly doing radial fall-off of the

330
00:14:17,259 --> 00:14:23,980
light and that's not very compelling it

331
00:14:21,460 --> 00:14:26,500
would be nicer if we took into account

332
00:14:23,980 --> 00:14:29,259
some of the geometry there in terms of

333
00:14:26,500 --> 00:14:31,029
shadowing and occlusion now one way that

334
00:14:29,259 --> 00:14:33,100
you can do that obviously is by using

335
00:14:31,029 --> 00:14:34,839
what are called shadow maps and that's

336
00:14:33,100 --> 00:14:36,370
rendering things from the perspective of

337
00:14:34,840 --> 00:14:38,350
a light source in order to figure out

338
00:14:36,370 --> 00:14:40,330
where the shadow is it's very good for

339
00:14:38,350 --> 00:14:45,330
things like single light sources that

340
00:14:40,330 --> 00:14:45,330
cast strong shadows an example of that

341
00:14:46,019 --> 00:14:51,879
is stuff like the Sun when you're doing

342
00:14:50,200 --> 00:14:53,770
something like lighting from the Sun a

343
00:14:51,879 --> 00:14:56,080
strong directional light source that

344
00:14:53,769 --> 00:14:57,879
cast very strong shadows and you want

345
00:14:56,080 --> 00:15:00,790
something realistic a shadow map makes a

346
00:14:57,879 --> 00:15:07,200
lot of sense when you are casting from

347
00:15:00,789 --> 00:15:12,089
hundreds of lights it makes a lot less

348
00:15:07,200 --> 00:15:14,830
right and to the best of my knowledge I

349
00:15:12,090 --> 00:15:18,009
don't really know if this is true but I

350
00:15:14,830 --> 00:15:20,170
think it's true even modern very

351
00:15:18,009 --> 00:15:23,980
advanced renders that require high-end

352
00:15:20,169 --> 00:15:26,459
hardware like doom the new doom not the

353
00:15:23,980 --> 00:15:26,460
old doom

354
00:15:26,509 --> 00:15:34,279
those games put a lot of limits on how

355
00:15:31,730 --> 00:15:37,070
much they do with shadow maps so for

356
00:15:34,279 --> 00:15:40,309
example in doom I think they're updated

357
00:15:37,070 --> 00:15:44,990
somewhat lazily so basically what

358
00:15:40,309 --> 00:15:47,479
happens with shadow map lighting is they

359
00:15:44,990 --> 00:15:50,029
basically try to limit how much shadow

360
00:15:47,480 --> 00:15:52,250
map rendering they do and they cache

361
00:15:50,029 --> 00:15:55,220
them from frame to frame and only update

362
00:15:52,250 --> 00:15:57,919
them when they have to to try and get

363
00:15:55,220 --> 00:16:02,720
more out of them like because again

364
00:15:57,919 --> 00:16:04,789
they're expensive right and so I don't

365
00:16:02,720 --> 00:16:06,560
really know of games that do all of

366
00:16:04,789 --> 00:16:08,419
their lighting with shadow maps in that

367
00:16:06,559 --> 00:16:11,029
way I don't know how feasible that would

368
00:16:08,419 --> 00:16:13,879
be for games that aren't just a few

369
00:16:11,029 --> 00:16:14,959
light sources something like doom 3 is

370
00:16:13,879 --> 00:16:16,700
an example of something that could

371
00:16:14,960 --> 00:16:18,379
easily be done that way but of course

372
00:16:16,700 --> 00:16:21,160
that didn't use shadow maps that used

373
00:16:18,379 --> 00:16:24,169
shadow volumes which is a whole another

374
00:16:21,159 --> 00:16:25,969
ball of wax and not a technique that

375
00:16:24,169 --> 00:16:27,379
anyone uses anymore as far as I know

376
00:16:25,970 --> 00:16:32,360
because it's extraordinarily expensive

377
00:16:27,379 --> 00:16:34,639
just very very expensive so anyway yeah

378
00:16:32,360 --> 00:16:38,899
so I'm not sure that shadow maps are

379
00:16:34,639 --> 00:16:40,819
really our answer here I especially when

380
00:16:38,899 --> 00:16:42,409
you consider the fact that we don't have

381
00:16:40,820 --> 00:16:44,600
real geometry it makes it very hard

382
00:16:42,409 --> 00:16:47,149
probably to eliminate the artifacting

383
00:16:44,600 --> 00:16:49,129
that would happen on shadow maps so I

384
00:16:47,149 --> 00:16:50,990
don't really want to go down a shadow

385
00:16:49,129 --> 00:16:53,389
map route I think that would be a real

386
00:16:50,990 --> 00:16:54,590
bad idea that's my guess I don't know

387
00:16:53,389 --> 00:16:57,379
but I think that would be a pretty bad

388
00:16:54,590 --> 00:16:59,840
idea so what I want to do instead is

389
00:16:57,379 --> 00:17:01,549
think about other options for kind of

390
00:16:59,840 --> 00:17:05,600
getting a little bit of that back again

391
00:17:01,549 --> 00:17:07,099
I'm not really who - I'm not really

392
00:17:05,599 --> 00:17:09,019
looking for a lot of direct shadow

393
00:17:07,099 --> 00:17:11,649
effects anyway I don't really want like

394
00:17:09,019 --> 00:17:13,519
long Sun shadows or anything like that I

395
00:17:11,650 --> 00:17:15,050
don't really want the look of that

396
00:17:13,519 --> 00:17:19,039
getting the game to be like that

397
00:17:15,049 --> 00:17:20,149
I want soft very soft shadowing so what

398
00:17:19,039 --> 00:17:24,289
I'm really looking for is something a

399
00:17:20,150 --> 00:17:27,220
little bit more diffuse and anyway what

400
00:17:24,289 --> 00:17:29,509
I was thinking it just I realized this

401
00:17:27,220 --> 00:17:31,610
just during the week while I was kind of

402
00:17:29,509 --> 00:17:33,140
randomly I don't know my my brain must

403
00:17:31,609 --> 00:17:36,769
have been wandering and I was thinking

404
00:17:33,140 --> 00:17:37,880
about this so what happens when we

405
00:17:36,769 --> 00:17:41,539
render our

406
00:17:37,880 --> 00:17:49,820
game right now is we produce the top

407
00:17:41,539 --> 00:17:53,000
level pixels whatever those are right in

408
00:17:49,819 --> 00:17:56,389
our first depth peel pass right so this

409
00:17:53,000 --> 00:17:58,700
right here is def peel 1 we end up with

410
00:17:56,390 --> 00:18:01,640
the V buffer that looks like this and

411
00:17:58,700 --> 00:18:06,670
this is def peel 1 we then do another

412
00:18:01,640 --> 00:18:06,670
depth peel right and we end up with a

413
00:18:07,119 --> 00:18:10,099
second layer the scene and so on and so

414
00:18:09,680 --> 00:18:13,910
forth

415
00:18:10,099 --> 00:18:17,449
so we end up with multiple layers of our

416
00:18:13,910 --> 00:18:20,259
seen in our def peels what that means is

417
00:18:17,450 --> 00:18:24,559
we actually have some very interesting

418
00:18:20,259 --> 00:18:30,079
information that a normal game doesn't

419
00:18:24,559 --> 00:18:33,349
have so for example we could tell you if

420
00:18:30,079 --> 00:18:34,730
a light source was here we could tell

421
00:18:33,349 --> 00:18:37,399
you that it was going to hit something

422
00:18:34,730 --> 00:18:40,430
down here we've got that information in

423
00:18:37,400 --> 00:18:43,250
our depth feels right which is pretty

424
00:18:40,430 --> 00:18:45,470
interesting so one thing that I was

425
00:18:43,250 --> 00:18:47,779
wondering is I wonder if we could do

426
00:18:45,470 --> 00:18:52,690
something where we use our depth field

427
00:18:47,779 --> 00:18:52,690
as the geometry for some bounce lighting

428
00:18:53,170 --> 00:19:00,019
it's a long shot but it seems plausible

429
00:18:56,539 --> 00:19:03,920
right because one thing that a lot of

430
00:19:00,019 --> 00:19:09,619
people do already is there's a lot of

431
00:19:03,920 --> 00:19:13,220
screen space techniques right you'll

432
00:19:09,619 --> 00:19:14,779
think see things like ssao talked about

433
00:19:13,220 --> 00:19:17,630
which is screen space ambient occlusion

434
00:19:14,779 --> 00:19:19,309
and what those techniques do is they're

435
00:19:17,630 --> 00:19:21,710
just techniques which use the depth

436
00:19:19,309 --> 00:19:23,899
buffer to approximate some kind of

437
00:19:21,710 --> 00:19:26,150
lighting effect so screen space ambient

438
00:19:23,900 --> 00:19:27,950
occlusion for example is a technique

439
00:19:26,150 --> 00:19:31,640
that takes a look at def buffer things

440
00:19:27,950 --> 00:19:33,380
and where it sees things where it looks

441
00:19:31,640 --> 00:19:37,310
maybe something like that in the depth

442
00:19:33,380 --> 00:19:39,560
buffer where it sees an in skews area it

443
00:19:37,309 --> 00:19:41,299
will assume that less of the incident

444
00:19:39,559 --> 00:19:43,789
lighting can hit this area and it will

445
00:19:41,299 --> 00:19:46,970
darken it right so it's kind of like a

446
00:19:43,789 --> 00:19:49,970
filter that you use over local areas of

447
00:19:46,970 --> 00:19:50,329
the test buffer that try to determine

448
00:19:49,970 --> 00:19:53,778
whether

449
00:19:50,329 --> 00:19:56,720
it looks like shadowing will occur in

450
00:19:53,778 --> 00:19:59,599
this area in a generic sort of inbound

451
00:19:56,720 --> 00:20:02,659
light sense and to the extent that you

452
00:19:59,599 --> 00:20:05,359
want to spend more pixels later fragment

453
00:20:02,659 --> 00:20:08,149
shader time on it you can get better or

454
00:20:05,359 --> 00:20:11,569
worse results by doing more work right

455
00:20:08,148 --> 00:20:15,139
you can look at further look at more

456
00:20:11,569 --> 00:20:16,908
areas of the depth buffer you can do it

457
00:20:15,140 --> 00:20:22,639
per light you can do all sorts of things

458
00:20:16,909 --> 00:20:26,720
right so that's an example of a

459
00:20:22,638 --> 00:20:29,388
technique that sort of works exactly the

460
00:20:26,720 --> 00:20:31,220
way that I'm describing just not with

461
00:20:29,388 --> 00:20:33,500
multiple depth field so if we have

462
00:20:31,220 --> 00:20:37,579
multiple death fields it seems like we

463
00:20:33,500 --> 00:20:40,369
have an even more powerful opportunity

464
00:20:37,579 --> 00:20:43,278
to potentially do something involving

465
00:20:40,369 --> 00:20:45,619
convecting some of that light around now

466
00:20:43,278 --> 00:20:48,230
I don't know if that's really true it

467
00:20:45,619 --> 00:20:52,518
was just a little bit of a thought right

468
00:20:48,230 --> 00:20:55,089
and so what I figured we would be able

469
00:20:52,519 --> 00:21:00,470
to do in certain circumstances is

470
00:20:55,089 --> 00:21:03,439
potentially have instead of voxel izing

471
00:21:00,470 --> 00:21:05,058
our scene which is not necessarily

472
00:21:03,440 --> 00:21:05,870
something we want to do due to the added

473
00:21:05,058 --> 00:21:08,658
expense

474
00:21:05,869 --> 00:21:12,398
we're already def peeling it for our

475
00:21:08,659 --> 00:21:16,460
render that kind of gives us an interval

476
00:21:12,398 --> 00:21:19,849
version of a voxel ization of the scene

477
00:21:16,460 --> 00:21:25,038
because for every pixel on the screen we

478
00:21:19,849 --> 00:21:28,609
effectively have the voxel in Z of that

479
00:21:25,038 --> 00:21:31,548
pixel right we've got specifically the

480
00:21:28,609 --> 00:21:32,869
empty space to the first filled space we

481
00:21:31,548 --> 00:21:34,908
then have the empty space to the next

482
00:21:32,869 --> 00:21:40,459
filled space the empty space and so on

483
00:21:34,909 --> 00:21:42,260
now we don't count backwards faces so we

484
00:21:40,460 --> 00:21:44,480
don't really look at this part of the

485
00:21:42,259 --> 00:21:47,240
voxel ization but since most of our

486
00:21:44,480 --> 00:21:49,429
objects are thin I'm not sure we really

487
00:21:47,240 --> 00:21:51,079
care about that we may be able to get

488
00:21:49,429 --> 00:21:53,240
away without that and if we really

489
00:21:51,079 --> 00:21:55,490
needed it we could add that as part of

490
00:21:53,240 --> 00:21:58,220
our def peel path for doubling the cost

491
00:21:55,490 --> 00:21:59,899
of our depth peels only in Z we would

492
00:21:58,220 --> 00:22:02,450
not have to render any pixels remember

493
00:21:59,898 --> 00:22:03,629
we could do an alternating def path

494
00:22:02,450 --> 00:22:05,160
every other time

495
00:22:03,630 --> 00:22:09,630
just to write an additional V buffer

496
00:22:05,160 --> 00:22:12,390
that was the outbound Z there and then

497
00:22:09,630 --> 00:22:15,870
we would know this so even that is not

498
00:22:12,390 --> 00:22:19,259
an impossibility we could get back that

499
00:22:15,869 --> 00:22:20,879
information if we so desired and so I

500
00:22:19,259 --> 00:22:22,950
think what I'm trying to get out here is

501
00:22:20,880 --> 00:22:24,990
we sort of have a lot ization of our

502
00:22:22,950 --> 00:22:27,720
service already whether that box

503
00:22:24,990 --> 00:22:29,430
civilization is any good I don't know

504
00:22:27,720 --> 00:22:34,549
like whether it's useful to us at all I

505
00:22:29,430 --> 00:22:38,070
have no idea but it's something right

506
00:22:34,549 --> 00:22:40,680
and so what we could consider doing here

507
00:22:38,069 --> 00:22:41,789
rather than the light textures being

508
00:22:40,680 --> 00:22:45,240
used the way that they're currently

509
00:22:41,789 --> 00:22:48,690
being used is we could imagine again

510
00:22:45,240 --> 00:22:52,680
looking out at sort of a more voxel cone

511
00:22:48,690 --> 00:22:56,490
tracing sort of a thing that actually

512
00:22:52,680 --> 00:22:58,259
was a little bit more light Tracey I

513
00:22:56,490 --> 00:23:01,259
don't know that that's a particularly

514
00:22:58,259 --> 00:23:05,509
good idea but it's just it's one way we

515
00:23:01,259 --> 00:23:09,269
could take a look at this problem and

516
00:23:05,509 --> 00:23:11,490
I'll bring something else to your

517
00:23:09,269 --> 00:23:19,589
attention here I guess well I'm going

518
00:23:11,490 --> 00:23:21,410
down this particular rathole try to

519
00:23:19,589 --> 00:23:31,009
remember the search terms for this

520
00:23:21,410 --> 00:23:31,009
graphics gems this what it was

521
00:23:36,349 --> 00:23:41,719
this is not good at all

522
00:23:55,240 --> 00:24:03,480
nope really wish I could remember what

523
00:23:59,259 --> 00:24:03,480
the name of this was

524
00:24:10,329 --> 00:24:13,579
[Applause]

525
00:24:35,380 --> 00:24:41,780
so there was a technique that was used

526
00:24:38,058 --> 00:24:44,838
for radiosity that I cannot remember

527
00:24:41,779 --> 00:24:44,838
[Music]

528
00:25:02,470 --> 00:25:08,630
argh there was a technique that was used

529
00:25:06,558 --> 00:25:12,289
there was going to be a game based

530
00:25:08,630 --> 00:25:16,820
around it but it never materialized so I

531
00:25:12,289 --> 00:25:19,339
don't really remember let's see here GPU

532
00:25:16,819 --> 00:25:22,250
gems Pirates of the Caribbean I know

533
00:25:19,339 --> 00:25:29,058
this is a really weird way to search for

534
00:25:22,250 --> 00:25:30,319
this but this is the it's the technique

535
00:25:29,058 --> 00:25:35,180
that they used in Pirates of the

536
00:25:30,319 --> 00:25:38,509
Caribbean if they got out of GPU gems

537
00:25:35,180 --> 00:25:38,509
[Applause]

538
00:25:55,619 --> 00:26:02,479
but they of course don't specify what it

539
00:26:00,240 --> 00:26:05,660
was

540
00:26:02,480 --> 00:26:05,660
[Music]

541
00:26:14,789 --> 00:26:21,240
I'm going to find this this is just some

542
00:26:20,339 --> 00:26:24,959
pirate site

543
00:26:21,240 --> 00:26:28,410
I don't want pirate stuff I want Pirates

544
00:26:24,960 --> 00:26:30,059
of the Caribbean which GPU gems was that

545
00:26:28,410 --> 00:26:30,660
if someone could just tell me what that

546
00:26:30,059 --> 00:26:34,519
was

547
00:26:30,660 --> 00:26:34,519
would be nice same on the stream No

548
00:26:51,779 --> 00:26:58,519
that's it fantasy lab so this is what

549
00:26:55,529 --> 00:26:58,519
we're looking for right here

550
00:27:08,630 --> 00:27:11,778
[Applause]

551
00:27:29,329 --> 00:27:36,668
so this is what I was thinking of

552
00:27:32,329 --> 00:27:36,668
finally found it that took a long time

553
00:27:38,079 --> 00:27:43,699
but basically it's an iterative scene a

554
00:27:41,499 --> 00:27:48,139
iterative scheme that kind of like

555
00:27:43,700 --> 00:27:52,429
convex light around your around your

556
00:27:48,138 --> 00:27:56,538
scene right and the way that this thing

557
00:27:52,429 --> 00:27:57,739
works is that you create individual

558
00:27:56,538 --> 00:28:08,200
points and you kind of bounce them

559
00:27:57,739 --> 00:28:08,200
around right so let's see here

560
00:28:21,308 --> 00:28:34,990
this is not the actual paper I'm

561
00:28:27,220 --> 00:28:37,710
thinking of because the GPU gems one

562
00:28:34,990 --> 00:28:37,710
that I'm thinking of

563
00:28:52,058 --> 00:29:06,298
I give up um I can try and find it

564
00:28:57,700 --> 00:29:09,369
offline but basically these are just

565
00:29:06,298 --> 00:29:12,429
it's a pretty straightforward idea right

566
00:29:09,368 --> 00:29:14,499
if it's not particularly bizarre or

567
00:29:12,429 --> 00:29:18,759
anything I would like to show you the

568
00:29:14,499 --> 00:29:24,509
shader could and it was in GPA it was in

569
00:29:18,759 --> 00:29:24,509
GPU gems but unfortunately

570
00:29:45,038 --> 00:29:47,908
then here

571
00:29:52,970 --> 00:30:03,200
here it is okay

572
00:29:59,980 --> 00:30:06,950
finally I finally found it

573
00:30:03,200 --> 00:30:08,210
man that was a long dive my memory knew

574
00:30:06,950 --> 00:30:15,490
it was there but I couldn't remember

575
00:30:08,210 --> 00:30:19,400
enough to find it okay so basically

576
00:30:15,490 --> 00:30:23,450
here's how this thing works just to

577
00:30:19,400 --> 00:30:25,880
refresh my own memory the idea is that

578
00:30:23,450 --> 00:30:29,390
you have these little things

579
00:30:25,880 --> 00:30:31,760
right and the idea is you've got a disk

580
00:30:29,390 --> 00:30:33,950
that's pointing in a direction and has a

581
00:30:31,759 --> 00:30:38,538
radius and a color a lighting value

582
00:30:33,950 --> 00:30:42,650
right and what you end up doing is you

583
00:30:38,538 --> 00:30:48,349
take these things and you do passes to

584
00:30:42,650 --> 00:30:51,980
scatter light around them right so it

585
00:30:48,349 --> 00:30:55,009
uses a approximate equation to figure

586
00:30:51,980 --> 00:30:58,630
out how much light is transferred

587
00:30:55,009 --> 00:31:03,319
between two different receivers right

588
00:30:58,630 --> 00:31:07,070
like so and the way that it works says

589
00:31:03,319 --> 00:31:09,710
like alright here's the here's the

590
00:31:07,069 --> 00:31:11,058
algorithm description we can calculate

591
00:31:09,710 --> 00:31:12,470
the accessibility of 2 passes first

592
00:31:11,058 --> 00:31:14,058
fastly approximates the accessibility

593
00:31:12,470 --> 00:31:15,589
for each of them by summing the fraction

594
00:31:14,058 --> 00:31:17,389
of the hemisphere subtended by every

595
00:31:15,589 --> 00:31:20,619
other element and subtracting the result

596
00:31:17,390 --> 00:31:23,360
from 1 right so that's basically like

597
00:31:20,619 --> 00:31:26,119
looking at it sort of like an N squared

598
00:31:23,359 --> 00:31:27,319
thing after the first FASTA mentlegen be

599
00:31:26,119 --> 00:31:29,209
too dark gives other elements that are

600
00:31:27,319 --> 00:31:30,798
in shadow are the cells casting shadows

601
00:31:29,210 --> 00:31:32,630
so use the second pass through the same

602
00:31:30,798 --> 00:31:33,759
taxation this time we multiply each form

603
00:31:32,630 --> 00:31:36,350
factor by the emitter elements

604
00:31:33,759 --> 00:31:38,089
accessibility from the last pass so

605
00:31:36,349 --> 00:31:40,548
basically they do two passes to try and

606
00:31:38,089 --> 00:31:42,980
do shadowing and remove things that are

607
00:31:40,548 --> 00:31:51,650
doubly shadowed right so if they don't

608
00:31:42,980 --> 00:31:53,329
double shadow if that makes sense so

609
00:31:51,650 --> 00:31:54,590
this doesn't really help with lots of

610
00:31:53,329 --> 00:31:56,509
shadowing so if you have tons of

611
00:31:54,589 --> 00:32:00,529
shadowing you need more passes but you

612
00:31:56,509 --> 00:32:02,720
know again this is a hacky approximate

613
00:32:00,529 --> 00:32:06,579
lighting technique

614
00:32:02,720 --> 00:32:06,579
so after figuring that out

615
00:32:08,499 --> 00:32:23,239
see here here we go a single bound

616
00:32:21,618 --> 00:32:24,288
amounts of indirect light using a slight

617
00:32:23,239 --> 00:32:25,850
variation of the ambient occlusion

618
00:32:24,288 --> 00:32:27,589
shader we replace the solid angle

619
00:32:25,849 --> 00:32:30,108
function with a disk to disk radiance

620
00:32:27,589 --> 00:32:31,759
transfer function we use one pass of the

621
00:32:30,108 --> 00:32:33,439
shader to transfer the reflected light

622
00:32:31,759 --> 00:32:36,558
of emitted light and two passes to

623
00:32:33,440 --> 00:32:38,058
shadow the light right for indirect

624
00:32:36,558 --> 00:32:39,648
lighting we first need to calculate the

625
00:32:38,058 --> 00:32:41,658
amount of light to reflect off the front

626
00:32:39,648 --> 00:32:43,459
face of each surface element if the

627
00:32:41,659 --> 00:32:44,929
reflected light comes from environment

628
00:32:43,460 --> 00:32:46,720
lighting then we compute the ambient

629
00:32:44,929 --> 00:32:50,419
occlusion map blah blah blah blah right

630
00:32:46,720 --> 00:32:53,509
now what they do here because this gets

631
00:32:50,419 --> 00:32:56,690
way too expensive is they just do these

632
00:32:53,509 --> 00:32:58,548
things hierarchically so what they do is

633
00:32:56,690 --> 00:33:00,169
you have all these little surface

634
00:32:58,548 --> 00:33:04,749
occluders like this right you have these

635
00:33:00,169 --> 00:33:07,759
little like sort of approximate blobs

636
00:33:04,749 --> 00:33:11,419
what they do is they say well okay these

637
00:33:07,759 --> 00:33:13,639
approximate blobs we can just for ones

638
00:33:11,419 --> 00:33:20,619
that are further away will just merge

639
00:33:13,638 --> 00:33:20,618
them into something that less resolution

640
00:33:21,069 --> 00:33:30,470
right so really that's all they do to

641
00:33:27,729 --> 00:33:34,869
cut down on the amount of work so when

642
00:33:30,470 --> 00:33:38,089
you consider you still do an N squared

643
00:33:34,868 --> 00:33:40,009
you still do N squared work versus the

644
00:33:38,089 --> 00:33:41,918
other occluders you just make sure that

645
00:33:40,009 --> 00:33:45,858
M squared never grows particularly large

646
00:33:41,919 --> 00:33:47,690
because you always as you look at

647
00:33:45,858 --> 00:33:53,089
acuto's that are further away from you

648
00:33:47,690 --> 00:33:59,989
you always look sort of at a more coarse

649
00:33:53,089 --> 00:34:03,019
version of those occluders right so I

650
00:33:59,989 --> 00:34:04,909
think that's about it let me see here

651
00:34:03,019 --> 00:34:07,489
yeah here's the hierarchical elements

652
00:34:04,909 --> 00:34:09,349
thing so basically what they say is like

653
00:34:07,489 --> 00:34:10,369
you know we do prefer argument to work

654
00:34:09,349 --> 00:34:13,399
on board a couple thousand elements

655
00:34:10,369 --> 00:34:16,639
real-time they use simplified geometry

656
00:34:13,398 --> 00:34:18,589
for distant services so what they do to

657
00:34:16,639 --> 00:34:20,510
do

658
00:34:18,590 --> 00:34:22,039
we group elements whose vertices are

659
00:34:20,510 --> 00:34:23,360
neighbors in the original mesh and

660
00:34:22,039 --> 00:34:24,889
represent them with a single larger

661
00:34:23,360 --> 00:34:26,900
element we do the same thing with the

662
00:34:24,889 --> 00:34:29,059
larger elements creating fewer and even

663
00:34:26,900 --> 00:34:30,409
larger elements forming a hierarchy now

664
00:34:29,059 --> 00:34:31,610
instead of traversing every single

665
00:34:30,409 --> 00:34:33,470
element for each pixel we Traverse a

666
00:34:31,610 --> 00:34:34,640
hierarchy of elements as receive

667
00:34:33,469 --> 00:34:38,149
elements far enough away from the

668
00:34:34,639 --> 00:34:40,099
emitter say 4 times the radius we use it

669
00:34:38,150 --> 00:34:41,240
for calculation only in receiver is

670
00:34:40,099 --> 00:34:43,699
close

671
00:34:41,239 --> 00:34:49,750
Dulli traverses children if it has any

672
00:34:43,699 --> 00:34:53,509
right so again just a really simple

673
00:34:49,750 --> 00:34:56,750
technique of sort of grouping these

674
00:34:53,510 --> 00:35:04,340
light sources up together in solving for

675
00:34:56,750 --> 00:35:06,920
only simple ones so that's I mean again

676
00:35:04,340 --> 00:35:11,690
I feel like that's the sort of thing

677
00:35:06,920 --> 00:35:15,559
that we could really if we wanted to we

678
00:35:11,690 --> 00:35:22,280
could play with here because I guess I

679
00:35:15,559 --> 00:35:25,130
don't really know exactly how we would

680
00:35:22,280 --> 00:35:27,260
do one with the depth field but if you

681
00:35:25,130 --> 00:35:29,650
think about it when we create these

682
00:35:27,260 --> 00:35:32,900
depth fields at any particular point

683
00:35:29,650 --> 00:35:35,660
when we write the depth buffer out we

684
00:35:32,900 --> 00:35:39,289
could also write out the normal so we

685
00:35:35,659 --> 00:35:40,909
would know where the surfaces were and

686
00:35:39,289 --> 00:35:44,599
which directions they were pointing

687
00:35:40,909 --> 00:35:47,569
right which would give us a set of

688
00:35:44,599 --> 00:35:50,269
bitmaps that actually had what we would

689
00:35:47,570 --> 00:35:53,030
need for bouncing light around from just

690
00:35:50,269 --> 00:35:56,800
the depth field once we had that

691
00:35:53,030 --> 00:35:59,150
information from the DEF peels beginning

692
00:35:56,800 --> 00:36:01,340
once we have that information from the

693
00:35:59,150 --> 00:36:07,190
dev field we would then be able to say

694
00:36:01,340 --> 00:36:10,730
well ok let's filter those down so we've

695
00:36:07,190 --> 00:36:12,829
got 1920 by 1080 versions of this data

696
00:36:10,730 --> 00:36:16,219
which is way more than we want to work

697
00:36:12,829 --> 00:36:22,340
on let's just filter it down so then we

698
00:36:16,219 --> 00:36:25,309
would do you know a version of this that

699
00:36:22,340 --> 00:36:28,340
was like half down and then half down

700
00:36:25,309 --> 00:36:31,559
again and then half down again right and

701
00:36:28,340 --> 00:36:35,400
each as we would do it we would just

702
00:36:31,559 --> 00:36:40,679
sort of approximate those there's other

703
00:36:35,400 --> 00:36:42,840
values which are full resolution in this

704
00:36:40,679 --> 00:36:45,449
case we would approximate those by like

705
00:36:42,840 --> 00:36:47,010
summing them together right and

706
00:36:45,449 --> 00:36:49,379
furthermore we would know what size

707
00:36:47,010 --> 00:36:55,080
those things were because they would

708
00:36:49,380 --> 00:36:56,760
always be they would always be

709
00:36:55,079 --> 00:36:59,069
proportional to whatever the bitmap was

710
00:36:56,760 --> 00:37:00,660
we were sampling out of so we could do

711
00:36:59,070 --> 00:37:05,640
something like that where we just say

712
00:37:00,659 --> 00:37:10,049
like okay as we look for things that are

713
00:37:05,639 --> 00:37:14,269
further away we just look at coarser and

714
00:37:10,050 --> 00:37:19,920
coarser approximations of those things I

715
00:37:14,269 --> 00:37:23,159
don't know it could work it could also

716
00:37:19,920 --> 00:37:26,760
be an absolute terrible idea I have no

717
00:37:23,159 --> 00:37:29,699
idea but you know again that's kind of

718
00:37:26,760 --> 00:37:33,930
just one way we could play around with

719
00:37:29,699 --> 00:37:36,629
that lighting information and it feels

720
00:37:33,929 --> 00:37:38,250
like something somewhat useful and for

721
00:37:36,630 --> 00:37:39,990
our purposes what I think I would do

722
00:37:38,250 --> 00:37:43,019
since a lot of our stuff is flat

723
00:37:39,989 --> 00:37:48,179
stand-up sprites I would just consider

724
00:37:43,019 --> 00:37:49,920
everything to be two-sided right so when

725
00:37:48,179 --> 00:37:51,839
we do the equations for the lighting

726
00:37:49,920 --> 00:37:54,269
transfer I would consider everything to

727
00:37:51,840 --> 00:37:57,390
be two-sided and I just track both sides

728
00:37:54,269 --> 00:38:03,960
so when we process it I'd store like we

729
00:37:57,389 --> 00:38:06,900
have double the storage for RGB which

730
00:38:03,960 --> 00:38:10,380
you know each side of the surface would

731
00:38:06,900 --> 00:38:14,910
would record it so I don't know I mean

732
00:38:10,380 --> 00:38:21,150
that this may be just really stupid I

733
00:38:14,909 --> 00:38:25,399
have no idea it's just kind of tempting

734
00:38:21,150 --> 00:38:25,400
and I feel like I want to try it

735
00:38:29,460 --> 00:38:39,199
and again mostly what this would require

736
00:38:32,250 --> 00:38:41,608
is just it would require the directional

737
00:38:39,199 --> 00:38:44,960
saving that directional element what

738
00:38:41,608 --> 00:38:44,960
direction the thing was pointing in

739
00:38:50,989 --> 00:38:53,618
right

740
00:38:53,719 --> 00:38:57,259
and I don't think there's really much

741
00:38:55,039 --> 00:39:03,409
else to it I think that's basically all

742
00:38:57,260 --> 00:39:05,270
there is so yes so basically what the

743
00:39:03,409 --> 00:39:07,879
expense becomes there is it's really a

744
00:39:05,269 --> 00:39:10,280
bandwidth expense is the primary thing

745
00:39:07,880 --> 00:39:11,840
in the depth appeal we're not doing any

746
00:39:10,280 --> 00:39:13,490
more work in the depth field we just

747
00:39:11,840 --> 00:39:15,230
have to write a little bit extra and

748
00:39:13,489 --> 00:39:17,899
that writing a little bit extra is

749
00:39:15,230 --> 00:39:20,570
costly right because now we need to

750
00:39:17,900 --> 00:39:23,570
write out a normal which is three

751
00:39:20,570 --> 00:39:25,340
elements we can cut that down to two by

752
00:39:23,570 --> 00:39:27,410
not writing the third because we know

753
00:39:25,340 --> 00:39:29,329
from Pythagorean theorem that if we're

754
00:39:27,409 --> 00:39:31,069
just storing a direction we can just

755
00:39:29,329 --> 00:39:36,920
store the x and y and we can always

756
00:39:31,070 --> 00:39:44,539
produce the Z by renormalizing right so

757
00:39:36,920 --> 00:39:45,800
that's pretty straightforward and I

758
00:39:44,539 --> 00:39:48,619
think that's really all we would have to

759
00:39:45,800 --> 00:39:50,470
do I so what we could do here is say

760
00:39:48,619 --> 00:39:58,009
yeah we could introduce an additional

761
00:39:50,469 --> 00:39:59,899
RGB a texture in here perhaps although I

762
00:39:58,010 --> 00:40:02,450
guess that's not that useful and I think

763
00:39:59,900 --> 00:40:06,039
about it but yes so if we have the R and

764
00:40:02,449 --> 00:40:09,259
the G that would store us our direction

765
00:40:06,039 --> 00:40:13,699
unfortunately we don't have enough

766
00:40:09,260 --> 00:40:15,890
information here for the light well oh

767
00:40:13,699 --> 00:40:19,309
you know what we do we know that the

768
00:40:15,889 --> 00:40:21,170
color is whatever the color is in the

769
00:40:19,309 --> 00:40:26,630
actual bitmap because we have an RGB a

770
00:40:21,170 --> 00:40:34,579
which here is the the alpha and here's

771
00:40:26,630 --> 00:40:45,200
the color of that thing and so in theory

772
00:40:34,579 --> 00:40:48,440
I guess we could just store the two like

773
00:40:45,199 --> 00:40:49,849
an intensity of each side the problem

774
00:40:48,440 --> 00:40:51,590
with that is we wouldn't be able to

775
00:40:49,849 --> 00:40:56,089
bounce coloured light around the way we

776
00:40:51,590 --> 00:41:02,690
want to so really what we probably need

777
00:40:56,090 --> 00:41:06,890
again is is two of these right so we

778
00:41:02,690 --> 00:41:07,460
would store something like RGB of the

779
00:41:06,889 --> 00:41:10,308
back

780
00:41:07,460 --> 00:41:15,380
our gb of the front side in terms of the

781
00:41:10,309 --> 00:41:17,809
bounce state and then this a-here would

782
00:41:15,380 --> 00:41:20,059
this one and this one would form our X

783
00:41:17,809 --> 00:41:22,849
and our Y right they would not be alpha

784
00:41:20,059 --> 00:41:26,930
values there the X and the y of the

785
00:41:22,849 --> 00:41:33,079
directional normal of whatever we

786
00:41:26,929 --> 00:41:35,289
rendered at that at that surface I don't

787
00:41:33,079 --> 00:41:41,420
know I have no idea this could be a

788
00:41:35,289 --> 00:41:46,730
fantastically stupid idea I I really

789
00:41:41,420 --> 00:41:53,838
just do not have any idea whatsoever

790
00:41:46,730 --> 00:41:56,389
about it so if we did something like

791
00:41:53,838 --> 00:41:57,799
this then what you can imagine is in

792
00:41:56,389 --> 00:42:01,250
order to start bouncing the lighting

793
00:41:57,800 --> 00:42:04,309
around what we would do is we would for

794
00:42:01,250 --> 00:42:07,969
any given one of these elements when we

795
00:42:04,309 --> 00:42:10,040
go to render we would probably do

796
00:42:07,969 --> 00:42:12,949
something where we just sampled from the

797
00:42:10,039 --> 00:42:15,710
bitmap a couple times so we would sample

798
00:42:12,949 --> 00:42:18,798
from the bitmap that was like right in

799
00:42:15,710 --> 00:42:20,559
the region of this thing we'd sample

800
00:42:18,798 --> 00:42:24,469
from a high-res version of the bitmap

801
00:42:20,559 --> 00:42:25,940
then for everything out here we'd sample

802
00:42:24,469 --> 00:42:27,769
from the lower res and for everything

803
00:42:25,940 --> 00:42:30,760
out here example for a lower res again

804
00:42:27,769 --> 00:42:30,759
right

805
00:42:32,199 --> 00:42:40,219
the problem was doing it this way rather

806
00:42:34,818 --> 00:42:44,170
than doing the splat way is again that

807
00:42:40,219 --> 00:42:46,578
it doesn't it doesn't really capture the

808
00:42:44,170 --> 00:42:47,900
geometry hierarchy quite the way that

809
00:42:46,579 --> 00:42:49,160
they were capturing the geometry

810
00:42:47,900 --> 00:42:56,809
hierarchy but I don't know it might

811
00:42:49,159 --> 00:42:58,519
still work out okay and this gets us out

812
00:42:56,809 --> 00:43:00,140
of the volume texture business so

813
00:42:58,519 --> 00:43:03,889
there's no volume textures in here

814
00:43:00,139 --> 00:43:08,449
whatsoever which is another pretty nice

815
00:43:03,889 --> 00:43:11,750
aspect of it right it's entirely screen

816
00:43:08,449 --> 00:43:14,298
space so I don't know that sounds kind

817
00:43:11,750 --> 00:43:16,880
of fun so I think I might just try it

818
00:43:14,298 --> 00:43:18,500
this we may be on to old hardware to

819
00:43:16,880 --> 00:43:20,539
really get this to run and

820
00:43:18,500 --> 00:43:23,030
my time but it's been long overdue for

821
00:43:20,539 --> 00:43:24,409
me to move to a modern card so what I

822
00:43:23,030 --> 00:43:26,630
probably should do one of these days is

823
00:43:24,409 --> 00:43:28,159
just replace the handmade hero machine

824
00:43:26,630 --> 00:43:33,110
with something that has a modern GPU in

825
00:43:28,159 --> 00:43:36,529
it and and we'll have to do that

826
00:43:33,110 --> 00:43:42,470
sometime soon regardless so yeah what I

827
00:43:36,530 --> 00:43:44,720
would say here is we need some we need

828
00:43:42,469 --> 00:43:48,289
some argument about how we're going to

829
00:43:44,719 --> 00:43:51,980
do the sampling but other than that I

830
00:43:48,289 --> 00:43:54,710
think we're pretty much fine because if

831
00:43:51,980 --> 00:43:57,889
we just simple have a reasonable rule

832
00:43:54,710 --> 00:44:00,789
for sampling out of those textures we

833
00:43:57,889 --> 00:44:03,170
can just use exactly this transference

834
00:44:00,789 --> 00:44:07,630
that they're using here we could just

835
00:44:03,170 --> 00:44:07,630
use and then we'd be fine right

836
00:44:08,170 --> 00:44:12,670
and I think that should just be about it

837
00:44:21,599 --> 00:44:31,259
this here where where instead of ever

838
00:44:29,309 --> 00:44:34,759
having an emitter area we would just

839
00:44:31,259 --> 00:44:34,759
know the emitter area would be

840
00:44:34,880 --> 00:44:40,460
proportional to the bitmap resolution

841
00:44:38,608 --> 00:44:44,130
that you were at if it gets excessively

842
00:44:40,460 --> 00:44:45,720
filtered down so basically what would

843
00:44:44,130 --> 00:44:49,920
happen here is just a lot of texture

844
00:44:45,719 --> 00:44:53,419
reads for every one of these when we do

845
00:44:49,920 --> 00:44:56,400
the lighting it would need to read from

846
00:44:53,420 --> 00:44:58,650
basically for each depth field it would

847
00:44:56,400 --> 00:45:02,400
have to read from four from three

848
00:44:58,650 --> 00:45:04,259
textures right and it would sample from

849
00:45:02,400 --> 00:45:06,778
those sectors at different myth

850
00:45:04,259 --> 00:45:12,048
resolutions as well so it would sample

851
00:45:06,778 --> 00:45:16,969
from you know each each successive myth

852
00:45:12,048 --> 00:45:16,969
level it would have to sample from

853
00:45:26,159 --> 00:45:30,029
I also think that would be a problem

854
00:45:28,798 --> 00:45:31,798
with introducing lighting

855
00:45:30,030 --> 00:45:34,170
discontinuities because if you think of

856
00:45:31,798 --> 00:45:41,400
what will happen with the mips right the

857
00:45:34,170 --> 00:45:42,960
NIP levels do things like this right so

858
00:45:41,400 --> 00:45:45,930
let's say we're computing the light from

859
00:45:42,960 --> 00:45:49,559
right here and we wanted to sample you

860
00:45:45,929 --> 00:45:52,919
know this area we're going to have this

861
00:45:49,559 --> 00:45:56,339
problem where we introduce a

862
00:45:52,920 --> 00:45:59,818
discontinuity because someone who is

863
00:45:56,338 --> 00:46:03,599
sampling the lighting from just slightly

864
00:45:59,818 --> 00:46:06,119
to this side would then not sample like

865
00:46:03,599 --> 00:46:07,798
these so right across that boundary

866
00:46:06,119 --> 00:46:11,548
where you go to a place where you're

867
00:46:07,798 --> 00:46:13,889
where you wouldn't maybe miss where you

868
00:46:11,548 --> 00:46:15,809
wouldn't be in the right place in the

869
00:46:13,889 --> 00:46:20,848
miss maps I wonder if that's a problem I

870
00:46:15,809 --> 00:46:24,780
guess what you could say is well at the

871
00:46:20,849 --> 00:46:27,720
higher levels as a courses levels of the

872
00:46:24,780 --> 00:46:30,450
myth myth map we just sample everything

873
00:46:27,719 --> 00:46:32,969
right so everybody gets lighting from

874
00:46:30,449 --> 00:46:35,338
the four most coarse versions or

875
00:46:32,969 --> 00:46:37,618
something like this but then as you go

876
00:46:35,338 --> 00:46:40,500
down you get you know progressively more

877
00:46:37,619 --> 00:46:43,140
refined I don't know it seems a little

878
00:46:40,500 --> 00:46:44,608
iffy it would be nice to be able to do

879
00:46:43,139 --> 00:46:48,028
something more like they do it where

880
00:46:44,608 --> 00:46:50,308
they've got those hierarchical vertices

881
00:46:48,028 --> 00:46:52,108
the problem with that is I'm not sure

882
00:46:50,309 --> 00:46:59,700
how we would really get this

883
00:46:52,108 --> 00:47:02,568
hierarchical vertex structure I'm not

884
00:46:59,699 --> 00:47:05,098
sure how we would really produce that

885
00:47:02,568 --> 00:47:07,880
I'm not sure how we would do sort of

886
00:47:05,099 --> 00:47:07,880
that clumping

887
00:47:45,099 --> 00:47:50,980
so here's the thought for you and I'm

888
00:47:48,440 --> 00:47:53,269
really just I mean we are out in

889
00:47:50,980 --> 00:47:55,460
incomplete lala land and I admit that

890
00:47:53,269 --> 00:47:59,869
but I mean it's lighting what do you

891
00:47:55,460 --> 00:48:02,559
want for me here's another thought what

892
00:47:59,869 --> 00:48:10,809
if we did this in a multi grid fashion

893
00:48:02,559 --> 00:48:14,150
so what if we did what if we said okay

894
00:48:10,809 --> 00:48:16,029
here's what we're going to do we splat

895
00:48:14,150 --> 00:48:18,950
all the stuff out using the desk feels

896
00:48:16,030 --> 00:48:21,560
we then filter it down so we now have

897
00:48:18,949 --> 00:48:23,719
you know a proper mipmap pyramid like

898
00:48:21,559 --> 00:48:26,090
this where we start out with a one by

899
00:48:23,719 --> 00:48:29,719
one and we go down to a 2 by 2 and a 4

900
00:48:26,090 --> 00:48:32,840
by 4 and an 8 by 8 and a 16 by 16 and so

901
00:48:29,719 --> 00:48:36,049
on what if we did the lighting on the

902
00:48:32,840 --> 00:48:38,570
pyramid so we have these slats that get

903
00:48:36,050 --> 00:48:41,810
successively more approximated when we

904
00:48:38,570 --> 00:48:48,050
get to the top we just have one lighting

905
00:48:41,809 --> 00:48:50,690
element right so what if we did an

906
00:48:48,050 --> 00:48:52,610
up-down kind of version of this thing so

907
00:48:50,690 --> 00:48:55,579
we start out we've got all these pixels

908
00:48:52,610 --> 00:48:57,559
as they filter up the lighting anything

909
00:48:55,579 --> 00:48:59,779
that's an emitter is obviously getting

910
00:48:57,559 --> 00:49:05,179
you know written into these successively

911
00:48:59,780 --> 00:49:09,350
more filtered versions right so as we go

912
00:49:05,179 --> 00:49:11,929
up the tree we do about like we do

913
00:49:09,349 --> 00:49:13,309
transference the one by one really

914
00:49:11,929 --> 00:49:15,679
doesn't have a transference so we start

915
00:49:13,309 --> 00:49:18,289
with a two by two we do the transferring

916
00:49:15,679 --> 00:49:20,539
on the two by two to take whatever

917
00:49:18,289 --> 00:49:23,179
they're up average illuminations are an

918
00:49:20,539 --> 00:49:25,730
average directions and we you know we

919
00:49:23,179 --> 00:49:28,159
bounce the light once there then we go

920
00:49:25,730 --> 00:49:31,010
down the next level to the four by four

921
00:49:28,159 --> 00:49:35,420
and we push the lighting from the two by

922
00:49:31,010 --> 00:49:37,880
two down to the four by four so whatever

923
00:49:35,420 --> 00:49:40,610
light got added at the two by two gets

924
00:49:37,880 --> 00:49:45,140
added to the sub-elements of the four by

925
00:49:40,610 --> 00:49:47,000
four then we take those and we bounce

926
00:49:45,139 --> 00:49:49,609
the light again writing it into the

927
00:49:47,000 --> 00:49:51,380
eight by eight right then we take the

928
00:49:49,610 --> 00:49:54,519
eight by eight we bounce blows and we

929
00:49:51,380 --> 00:49:54,519
write it into the sixteen by sixteen

930
00:49:56,489 --> 00:50:00,329
this sounds fantastically stupid I admit

931
00:49:58,920 --> 00:50:02,070
that I don't know that there's any

932
00:50:00,329 --> 00:50:05,400
reason to think that this is going to

933
00:50:02,070 --> 00:50:07,530
give anything like good lighting I also

934
00:50:05,400 --> 00:50:09,389
have no idea how we would ever debug it

935
00:50:07,530 --> 00:50:10,950
if it were not giving good lighting and

936
00:50:09,389 --> 00:50:12,210
we wanted to make sure that the reason

937
00:50:10,949 --> 00:50:13,379
it was not getting good lighting is cuz

938
00:50:12,210 --> 00:50:16,050
the idea of stupid and active

939
00:50:13,380 --> 00:50:19,940
implementation of the bug so that's a

940
00:50:16,050 --> 00:50:23,250
little bit of a problem admittedly

941
00:50:19,940 --> 00:50:27,570
however it has one nice element of it

942
00:50:23,250 --> 00:50:31,230
pun intended which is that it operates

943
00:50:27,570 --> 00:50:35,809
in a very consistent time fashion so you

944
00:50:31,230 --> 00:50:35,809
get this sort of you know successively

945
00:50:36,380 --> 00:50:40,410
you get this sort of successively

946
00:50:38,550 --> 00:50:42,660
coarser approximation so if you want to

947
00:50:40,409 --> 00:50:45,509
for bouncing the light around really far

948
00:50:42,659 --> 00:50:48,598
you do it on the 2x2 and it propagates

949
00:50:45,510 --> 00:51:01,560
downward and downward and downward you

950
00:50:48,599 --> 00:51:04,769
know so yeah I could believe that would

951
00:51:01,559 --> 00:51:07,440
work to do something resembling

952
00:51:04,769 --> 00:51:09,480
something and so you keep following this

953
00:51:07,440 --> 00:51:15,559
process down right you right into the 30

954
00:51:09,480 --> 00:51:18,659
to the 64 the 128 to 256 the 512 to 1024

955
00:51:15,559 --> 00:51:22,079
and the 1024 is maybe how far we go

956
00:51:18,659 --> 00:51:25,739
right so we just have like a 1024 by 512

957
00:51:22,079 --> 00:51:32,909
or something that we write these flats

958
00:51:25,739 --> 00:51:35,969
into I don't know and then that

959
00:51:32,909 --> 00:51:38,098
filtering process occurs and by the time

960
00:51:35,969 --> 00:51:40,348
you get to here this is you end up with

961
00:51:38,099 --> 00:51:42,210
this is your light value that you would

962
00:51:40,349 --> 00:51:45,510
actually apply to the things in that

963
00:51:42,210 --> 00:51:48,210
area and the light value tells you what

964
00:51:45,510 --> 00:51:53,420
direction it's coming from roughly let's

965
00:51:48,210 --> 00:51:53,420
say because you've got that bouncing

966
00:51:59,420 --> 00:52:05,579
so yeah I mean if I was just to pretend

967
00:52:02,909 --> 00:52:07,139
let's say in my head that I believe for

968
00:52:05,579 --> 00:52:10,110
a second this was going to work which I

969
00:52:07,139 --> 00:52:15,750
don't know that I do but basically what

970
00:52:10,110 --> 00:52:22,079
you do is you do surfaces up right and

971
00:52:15,750 --> 00:52:27,869
you do directions down so you take your

972
00:52:22,079 --> 00:52:29,369
depth field and right now let's just do

973
00:52:27,869 --> 00:52:30,720
the top depth field because we don't

974
00:52:29,369 --> 00:52:32,250
really need to worry about volumes if we

975
00:52:30,719 --> 00:52:36,299
can't even get this working for just the

976
00:52:32,250 --> 00:52:38,639
surface the very top one so you take

977
00:52:36,300 --> 00:52:42,119
your depth field you assume that you

978
00:52:38,639 --> 00:52:46,309
stored the normal to the surface at that

979
00:52:42,119 --> 00:52:49,890
point that you were rendering out you

980
00:52:46,309 --> 00:52:53,429
write those into some lower res version

981
00:52:49,889 --> 00:52:57,059
of the bitmap so the 1024 by 512 let's

982
00:52:53,429 --> 00:52:58,618
say by just taking samples you don't

983
00:52:57,059 --> 00:53:01,769
even have to average necessarily let's

984
00:52:58,619 --> 00:53:03,450
just take samples but we could average

985
00:53:01,769 --> 00:53:07,139
if we wanted to we could take the 1920

986
00:53:03,449 --> 00:53:09,389
by 1080 and we could sample you know and

987
00:53:07,139 --> 00:53:11,400
do a smooth interpolation of those

988
00:53:09,389 --> 00:53:14,519
values right so we could by linearly

989
00:53:11,400 --> 00:53:21,920
filter from a 1920 by 1080 to get the

990
00:53:14,519 --> 00:53:26,070
1024 by 512 so we do that we now have

991
00:53:21,920 --> 00:53:27,630
the proper or you know we could even do

992
00:53:26,070 --> 00:53:29,850
we could even just do this I guess we

993
00:53:27,630 --> 00:53:32,280
don't really even need to do that we

994
00:53:29,849 --> 00:53:34,440
could just do the 1920 by 1080 we could

995
00:53:32,280 --> 00:53:36,740
just subsample that so we could say it's

996
00:53:34,440 --> 00:53:39,809
always just a divide by 2 of the thing

997
00:53:36,739 --> 00:53:43,409
who cares about the wasted space right

998
00:53:39,809 --> 00:53:45,630
we can just subscale each individual

999
00:53:43,409 --> 00:53:48,719
version of that down further so ok can

1000
00:53:45,630 --> 00:53:50,608
we do that let's say I so we basically

1001
00:53:48,719 --> 00:53:52,169
have a nice array by 1080 and then we

1002
00:53:50,608 --> 00:53:53,519
would have a half version of that and

1003
00:53:52,170 --> 00:53:56,340
half version of that going down as far

1004
00:53:53,519 --> 00:53:57,989
as we wanted to go so we take those we

1005
00:53:56,340 --> 00:54:00,269
produce the services and those services

1006
00:53:57,989 --> 00:54:02,189
are just the little just a direction

1007
00:54:00,269 --> 00:54:07,820
vector of the direction the surface is

1008
00:54:02,190 --> 00:54:07,820
pointing and the color value right

1009
00:54:09,769 --> 00:54:13,219
of the light at that point which for

1010
00:54:11,989 --> 00:54:16,309
most of the services is going to be

1011
00:54:13,219 --> 00:54:20,959
nothing and for emitters it's going to

1012
00:54:16,309 --> 00:54:23,539
be the emitted light value right so we

1013
00:54:20,960 --> 00:54:27,460
successively averaged those going up to

1014
00:54:23,539 --> 00:54:30,769
produce average surface directions and

1015
00:54:27,460 --> 00:54:33,110
we averaged the emission going up as

1016
00:54:30,769 --> 00:54:37,699
well right

1017
00:54:33,110 --> 00:54:39,140
we then and I guess that I think about

1018
00:54:37,699 --> 00:54:40,309
it it's the same so services up

1019
00:54:39,139 --> 00:54:43,250
directions down is really the same thing

1020
00:54:40,309 --> 00:54:44,690
because the surfaces are the emitters as

1021
00:54:43,250 --> 00:54:46,309
well so the directions are always just

1022
00:54:44,690 --> 00:54:51,800
going to be the direction the lights

1023
00:54:46,309 --> 00:54:53,900
going in right okay so then we have at

1024
00:54:51,800 --> 00:54:56,960
the top we've just got one value that's

1025
00:54:53,900 --> 00:55:00,139
like the overall average emission of the

1026
00:54:56,960 --> 00:55:01,820
whole scene in the overall average

1027
00:55:00,139 --> 00:55:03,469
normal which doesn't really give us much

1028
00:55:01,820 --> 00:55:05,300
information at all so we don't care

1029
00:55:03,469 --> 00:55:06,889
about that at all but then the 2x2 down

1030
00:55:05,300 --> 00:55:08,539
it's slightly better but not really

1031
00:55:06,889 --> 00:55:10,670
right not that much information but

1032
00:55:08,539 --> 00:55:13,309
nonetheless we do the whole algorithm so

1033
00:55:10,670 --> 00:55:15,740
then we do the shadowing any mission on

1034
00:55:13,309 --> 00:55:18,889
that and what we basically produce there

1035
00:55:15,739 --> 00:55:23,599
is the Delta value of how much shadow

1036
00:55:18,889 --> 00:55:26,119
how much emission we produced right so

1037
00:55:23,599 --> 00:55:30,619
at this level in each of the cells it's

1038
00:55:26,119 --> 00:55:31,789
a two by two we've got in addition to

1039
00:55:30,619 --> 00:55:33,529
the direction which we're not going to

1040
00:55:31,789 --> 00:55:38,989
change we've got the average direction

1041
00:55:33,530 --> 00:55:42,740
we just have the you know the pot plus

1042
00:55:38,989 --> 00:55:45,829
or minus RGB right for each of these

1043
00:55:42,739 --> 00:55:47,599
cells so after doing the lighting

1044
00:55:45,829 --> 00:55:49,130
calculation how much did each one get

1045
00:55:47,599 --> 00:55:52,579
brighter versus how much did each one

1046
00:55:49,130 --> 00:55:55,519
get darker so we take that plus or minus

1047
00:55:52,579 --> 00:55:58,610
RGB right and we add that to the next

1048
00:55:55,519 --> 00:56:00,530
level down so in this case now we've got

1049
00:55:58,610 --> 00:56:03,200
for each of these cells let's say this

1050
00:56:00,530 --> 00:56:05,450
cell we have four cells in the bitmap

1051
00:56:03,199 --> 00:56:07,549
below us so we take whatever that plus

1052
00:56:05,449 --> 00:56:11,210
or minus RGB was and we add it to each

1053
00:56:07,550 --> 00:56:14,150
of these four cells right then we do the

1054
00:56:11,210 --> 00:56:16,670
exact same thing on these four cells so

1055
00:56:14,150 --> 00:56:18,950
these four cells themselves now do the

1056
00:56:16,670 --> 00:56:21,440
same shadow transference that we do here

1057
00:56:18,949 --> 00:56:23,389
so it's just every time it's just on a

1058
00:56:21,440 --> 00:56:27,019
set of four cells doing

1059
00:56:23,389 --> 00:56:30,319
transference on for sells right for

1060
00:56:27,019 --> 00:56:35,599
sells for sells for sales floor sells so

1061
00:56:30,320 --> 00:56:37,820
I don't know would this do anything

1062
00:56:35,599 --> 00:56:42,069
resembling anything I have no idea

1063
00:56:37,820 --> 00:56:42,070
probably not it's probably just stupid

1064
00:56:42,130 --> 00:56:56,019
but that's my stupid idea I hope you

1065
00:56:46,010 --> 00:56:58,100
like it so I think that sort of works

1066
00:56:56,019 --> 00:57:00,320
what I don't know is how much

1067
00:56:58,099 --> 00:57:01,429
discontinuity that introduces because of

1068
00:57:00,320 --> 00:57:04,400
the mipmap boundaries

1069
00:57:01,429 --> 00:57:05,809
my fear is the answer is quite a bit and

1070
00:57:04,400 --> 00:57:09,139
so then what you'd end up with I feeI

1071
00:57:05,809 --> 00:57:13,279
fear is that you'd end up with hard some

1072
00:57:09,139 --> 00:57:15,259
hard discontinuities in the lighting but

1073
00:57:13,280 --> 00:57:19,900
I don't know maybe that could be

1074
00:57:15,260 --> 00:57:22,370
mitigated by just when you finally go to

1075
00:57:19,900 --> 00:57:24,889
when you're doing this push down maybe

1076
00:57:22,369 --> 00:57:28,519
you add a little bit to the neighboring

1077
00:57:24,889 --> 00:57:33,079
one to like help smooth it out I don't

1078
00:57:28,519 --> 00:57:34,880
know but that's my fear my fear is that

1079
00:57:33,079 --> 00:57:37,099
you end up with these hard edges in the

1080
00:57:34,880 --> 00:57:39,289
lighting because at the you know the

1081
00:57:37,099 --> 00:57:42,469
screen was at its course this level

1082
00:57:39,289 --> 00:57:44,300
divided into four sections and I fear

1083
00:57:42,469 --> 00:57:46,189
that like this whole section the screen

1084
00:57:44,300 --> 00:57:48,050
is going to be slightly brighter now

1085
00:57:46,190 --> 00:57:50,030
what we could do there again is we could

1086
00:57:48,050 --> 00:57:52,550
just kind of bloom filter that out a

1087
00:57:50,030 --> 00:57:58,790
little bit like blossom it out to smooth

1088
00:57:52,550 --> 00:58:02,390
it so when we do that sort of plus that

1089
00:57:58,789 --> 00:58:05,029
Delta RGB blossom when we're going to

1090
00:58:02,389 --> 00:58:09,889
process the lower down versions you know

1091
00:58:05,030 --> 00:58:12,890
we could add that out to the neighbors

1092
00:58:09,889 --> 00:58:17,049
at a linearly interpolated amount and

1093
00:58:12,889 --> 00:58:20,119
that would probably solve that problem

1094
00:58:17,050 --> 00:58:23,570
but it may just be I don't know it may

1095
00:58:20,119 --> 00:58:26,480
just be intractable so I don't know this

1096
00:58:23,570 --> 00:58:29,180
is a really ridiculous idea but I kind

1097
00:58:26,480 --> 00:58:31,280
of like it and I kind of want to try it

1098
00:58:29,179 --> 00:58:33,559
and the depth fields were kind of a

1099
00:58:31,280 --> 00:58:35,240
ridiculous idea alpha blending through

1100
00:58:33,559 --> 00:58:36,779
depth feels is not something that I ever

1101
00:58:35,239 --> 00:58:41,399
heard of for a 2-d game but it

1102
00:58:36,780 --> 00:58:43,050
work great so sometimes in game

1103
00:58:41,400 --> 00:58:44,849
development you know you just want to

1104
00:58:43,050 --> 00:58:47,360
press your luck you just want to press

1105
00:58:44,849 --> 00:58:51,509
it because the last thing you want to do

1106
00:58:47,360 --> 00:58:54,900
is not press your luck and have you miss

1107
00:58:51,510 --> 00:58:57,270
out on something lucky it's only time

1108
00:58:54,900 --> 00:58:58,920
that you're wasting right you don't have

1109
00:58:57,269 --> 00:59:00,900
to stick with the routine if it turns

1110
00:58:58,920 --> 00:59:04,139
out to not work we throw it out and we

1111
00:59:00,900 --> 00:59:08,160
do something else so since I kind of

1112
00:59:04,139 --> 00:59:11,849
like this flavor of hierarchically

1113
00:59:08,159 --> 00:59:15,119
merging I kind of feel like that's what

1114
00:59:11,849 --> 00:59:21,779
I want to do and I feel like I can do

1115
00:59:15,119 --> 00:59:28,289
that fairly easily to be honest on the

1116
00:59:21,780 --> 00:59:29,880
path upward on the past upward I don't

1117
00:59:28,289 --> 00:59:39,739
even know if we need anything other than

1118
00:59:29,880 --> 00:59:39,740
just a simple mipmap filter right

1119
00:59:47,559 --> 00:59:50,590
because on the path up were at all we

1120
00:59:49,389 --> 00:59:54,000
would really need to do is just we're

1121
00:59:50,590 --> 00:59:57,210
just blending directions and intensities

1122
00:59:54,000 --> 00:59:57,210
that's it

1123
01:00:25,260 --> 01:00:31,040
so yeah I mean I think this is going to

1124
01:00:27,358 --> 01:00:31,039
be pretty straightforward

1125
01:00:55,420 --> 01:00:59,889
yeah I don't know I mean it seems pretty

1126
01:00:57,940 --> 01:01:01,389
straightforward now we do have I guess

1127
01:00:59,889 --> 01:01:02,920
that yeah again the problem is just each

1128
01:01:01,389 --> 01:01:04,719
of very big textures because now think

1129
01:01:02,920 --> 01:01:07,720
about two because we're talking about

1130
01:01:04,719 --> 01:01:10,509
this being a def peel rather than a

1131
01:01:07,719 --> 01:01:20,828
voxel ization these things also have a

1132
01:01:10,510 --> 01:01:22,059
position right and really technically if

1133
01:01:20,829 --> 01:01:24,609
we want to do the whole thing it would

1134
01:01:22,059 --> 01:01:29,319
be for we do we do all four def peels

1135
01:01:24,608 --> 01:01:31,719
probably at once so we'd be talking

1136
01:01:29,318 --> 01:01:34,808
about just a really huge so we'd have in

1137
01:01:31,719 --> 01:01:37,778
1920 by 1080 right

1138
01:01:34,809 --> 01:01:41,980
that's for def peels is what we're doing

1139
01:01:37,778 --> 01:01:44,679
at the moment that would go and that's

1140
01:01:41,980 --> 01:01:46,449
by four elements as well right or by

1141
01:01:44,679 --> 01:01:47,710
several I guess we're not going to talk

1142
01:01:46,449 --> 01:01:49,268
about that because that's our color we

1143
01:01:47,710 --> 01:01:52,510
also have a depth buffer not sorsa but

1144
01:01:49,268 --> 01:01:55,328
anyway so we have four of these things

1145
01:01:52,510 --> 01:01:58,299
that now will come through we need I

1146
01:01:55,329 --> 01:02:00,009
guess we don't need to know now that I

1147
01:01:58,298 --> 01:02:02,318
think about it we don't need to store

1148
01:02:00,009 --> 01:02:04,358
the XYZ position of the emitter because

1149
01:02:02,318 --> 01:02:05,768
that's all we're always given we just

1150
01:02:04,358 --> 01:02:07,989
need the depth of the admit err because

1151
01:02:05,768 --> 01:02:11,108
since we know what pixel it's on we know

1152
01:02:07,989 --> 01:02:16,000
where is in a long array we just need to

1153
01:02:11,108 --> 01:02:17,889
know how far along that ray right so

1154
01:02:16,000 --> 01:02:20,009
reconstructing the 3d position is not

1155
01:02:17,889 --> 01:02:23,980
particularly difficult because the depth

1156
01:02:20,009 --> 01:02:26,920
gives us that information so really we

1157
01:02:23,980 --> 01:02:29,949
don't need that we've got these so all

1158
01:02:26,920 --> 01:02:34,900
we need to store is we need to store the

1159
01:02:29,949 --> 01:02:36,759
depth to RGB ease for the color

1160
01:02:34,900 --> 01:02:45,329
intensities or the back and front side

1161
01:02:36,759 --> 01:02:51,579
of these surfaces of the emitters and

1162
01:02:45,329 --> 01:02:53,980
the direction right so this is one

1163
01:02:51,579 --> 01:02:59,859
element this is six elements this is

1164
01:02:53,980 --> 01:03:02,380
three elements right so total wise we've

1165
01:02:59,858 --> 01:03:05,288
got ten elements there if I'm doing that

1166
01:03:02,380 --> 01:03:07,440
math correctly so depth to colors and a

1167
01:03:05,289 --> 01:03:07,440
direction

1168
01:03:08,699 --> 01:03:14,500
now like our saying probably we can

1169
01:03:11,260 --> 01:03:19,810
eliminate one of those and get it down

1170
01:03:14,500 --> 01:03:21,190
to two so it would be nine elements and

1171
01:03:19,809 --> 01:03:23,289
then there's the question of if we want

1172
01:03:21,190 --> 01:03:27,900
to do one for each step feel if we did

1173
01:03:23,289 --> 01:03:32,289
it with four times nine or 36 elements

1174
01:03:27,900 --> 01:03:35,760
since nine elements is really three rgba

1175
01:03:32,289 --> 01:03:38,619
textures i'm sorry three RGB textures

1176
01:03:35,760 --> 01:03:45,850
you could think of this as twelve

1177
01:03:38,619 --> 01:03:49,359
textures twelve RGB textures right or we

1178
01:03:45,849 --> 01:03:53,159
could think of it if we have them be RGB

1179
01:03:49,360 --> 01:03:58,440
a instead we would end up with nine and

1180
01:03:53,159 --> 01:03:58,440
we'd have to pack them creatively right

1181
01:03:59,130 --> 01:04:02,800
I think I would go with this method

1182
01:04:01,599 --> 01:04:04,960
first because this is an optimization

1183
01:04:02,800 --> 01:04:09,160
and this at least keeps things stored in

1184
01:04:04,960 --> 01:04:13,840
a sane sense right so it keeps basically

1185
01:04:09,159 --> 01:04:19,449
one RGB emitter emission front side one

1186
01:04:13,840 --> 01:04:26,289
RGB emission back side front back and

1187
01:04:19,449 --> 01:04:28,480
then one RGB plus or sorry one XY plus D

1188
01:04:26,289 --> 01:04:32,050
for the depth and the XY of the

1189
01:04:28,480 --> 01:04:36,670
direction right so three textures / def

1190
01:04:32,050 --> 01:04:39,310
peel to do the lighting right and then

1191
01:04:36,670 --> 01:04:41,740
each one of these so so you've got

1192
01:04:39,309 --> 01:04:43,929
basically this really big bulky process

1193
01:04:41,739 --> 01:04:51,909
here that's all the time

1194
01:04:43,929 --> 01:04:57,009
so you've got 12 texture filter that

1195
01:04:51,909 --> 01:04:59,319
goes down down down it's got to do it's

1196
01:04:57,010 --> 01:05:01,510
got a read from 12 textures produce the

1197
01:04:59,320 --> 01:05:03,760
result so that's going to be a really

1198
01:05:01,510 --> 01:05:04,990
media expensive process right as it does

1199
01:05:03,760 --> 01:05:09,610
that big deal

1200
01:05:04,989 --> 01:05:12,609
once it's done however I think then

1201
01:05:09,610 --> 01:05:14,890
that's it lighting is now super

1202
01:05:12,610 --> 01:05:16,510
straightforward because now all you're

1203
01:05:14,889 --> 01:05:18,539
going to do for lighting is you're just

1204
01:05:16,510 --> 01:05:22,670
going to look up like the closest thing

1205
01:05:18,539 --> 01:05:30,029
so you're just going to look into that

1206
01:05:22,670 --> 01:05:33,090
that that final texture whatever that is

1207
01:05:30,030 --> 01:05:34,740
the 1920 by 1080 texture you're just

1208
01:05:33,090 --> 01:05:36,780
going to look into that your pixel

1209
01:05:34,739 --> 01:05:41,729
location you're going to pull out the

1210
01:05:36,780 --> 01:05:46,110
lighting direction and intensity you're

1211
01:05:41,730 --> 01:05:47,070
going to do the the calculation or

1212
01:05:46,110 --> 01:05:47,849
actually you're not going to do that

1213
01:05:47,070 --> 01:05:50,039
you're just going to pull out the

1214
01:05:47,849 --> 01:05:52,710
intensity music that's it because you've

1215
01:05:50,039 --> 01:05:54,539
already gotten down to just you you're

1216
01:05:52,710 --> 01:05:57,210
on yourself so you know what your

1217
01:05:54,539 --> 01:05:59,000
lighting was that's it you're done so

1218
01:05:57,210 --> 01:06:00,929
the lighting is just is just here

1219
01:05:59,000 --> 01:06:06,349
there's I don't think there's anything

1220
01:06:00,929 --> 01:06:06,349
else to it than that right

1221
01:06:19,579 --> 01:06:26,150
yeah so I think that's one I think

1222
01:06:24,230 --> 01:06:29,150
that's roughly correct the only thing

1223
01:06:26,150 --> 01:06:31,400
that's I guess to be honest there is one

1224
01:06:29,150 --> 01:06:35,030
more kind of thing to that it's not so

1225
01:06:31,400 --> 01:06:36,829
that's not quite through I think we

1226
01:06:35,030 --> 01:06:41,720
actually have a slightly worse situation

1227
01:06:36,829 --> 01:06:45,049
for the textures I think it's probably

1228
01:06:41,719 --> 01:06:46,699
more like four textures here because I

1229
01:06:45,050 --> 01:06:54,200
feel like we would also have to do the

1230
01:06:46,699 --> 01:07:02,689
RGB reflection or I should say like what

1231
01:06:54,199 --> 01:07:04,279
the what the surface reflectance is so

1232
01:07:02,690 --> 01:07:06,740
this is like the surface parameter

1233
01:07:04,280 --> 01:07:09,440
because without that information we

1234
01:07:06,739 --> 01:07:12,409
wouldn't know how incident light on this

1235
01:07:09,440 --> 01:07:15,769
cert on whatever this element is how it

1236
01:07:12,409 --> 01:07:17,960
bounces off right so we would know the

1237
01:07:15,769 --> 01:07:20,509
light coming in but we wouldn't know how

1238
01:07:17,960 --> 01:07:22,699
the light bounced off and so when we

1239
01:07:20,510 --> 01:07:25,310
kind of average those up we would need

1240
01:07:22,699 --> 01:07:29,989
to record to both the reflectance and

1241
01:07:25,309 --> 01:07:31,730
the emission values for this surface so

1242
01:07:29,989 --> 01:07:34,669
how much light is it giving off right

1243
01:07:31,730 --> 01:07:36,800
now versus how much when we get new

1244
01:07:34,670 --> 01:07:46,789
light in how should that light be

1245
01:07:36,800 --> 01:07:48,890
modified in this case right so it seems

1246
01:07:46,789 --> 01:07:56,690
like it's really more like a 16 texture

1247
01:07:48,889 --> 01:08:00,109
filter right and again so that's really

1248
01:07:56,690 --> 01:08:03,710
heavy weight and that's unfortunate but

1249
01:08:00,110 --> 01:08:14,980
you know I don't know that's just that's

1250
01:08:03,710 --> 01:08:14,980
just how it goes my dude it's

1251
01:08:24,738 --> 01:08:31,649
yes so I I think I mean if it's a 16

1252
01:08:28,170 --> 01:08:33,270
texture filter the problem with that the

1253
01:08:31,649 --> 01:08:35,039
only way I don't really think it's that

1254
01:08:33,270 --> 01:08:37,339
expensive is the thing because you're

1255
01:08:35,039 --> 01:08:41,729
only doing it once for the whole screen

1256
01:08:37,338 --> 01:08:44,158
and you're doing it on you know the MIT

1257
01:08:41,729 --> 01:08:47,428
Maps I think most modern cards would not

1258
01:08:44,158 --> 01:08:49,289
have any real concern about that my only

1259
01:08:47,429 --> 01:08:52,798
thing that I think would be a problem

1260
01:08:49,289 --> 01:08:55,189
here is that cards that can't do 16 taps

1261
01:08:52,798 --> 01:08:57,448
are in trouble

1262
01:08:55,189 --> 01:08:59,039
sichting taps is the wrong word

1263
01:08:57,448 --> 01:09:01,678
sampling from textures they can probably

1264
01:08:59,039 --> 01:09:03,979
sample from textures a lot the problem

1265
01:09:01,679 --> 01:09:07,859
is how many textures are sampling from

1266
01:09:03,979 --> 01:09:11,568
and so 16 textures is probably just a

1267
01:09:07,859 --> 01:09:14,520
lot of textures like too many textures

1268
01:09:11,569 --> 01:09:20,759
so that's a little bit of a concern

1269
01:09:14,520 --> 01:09:27,509
right and I don't know how to get around

1270
01:09:20,759 --> 01:09:30,810
that particular problem I feel like it's

1271
01:09:27,509 --> 01:09:32,279
definitely an issue so that's a little

1272
01:09:30,810 --> 01:09:35,069
bit of problem the other thing that's a

1273
01:09:32,279 --> 01:09:38,429
little bit nasty is I don't think the

1274
01:09:35,069 --> 01:09:42,449
cards like support multiple render

1275
01:09:38,429 --> 01:09:44,460
targets modern cards all do I don't know

1276
01:09:42,448 --> 01:09:46,888
if like cards as old as this one would

1277
01:09:44,460 --> 01:09:50,548
support multiple render targets and the

1278
01:09:46,889 --> 01:09:53,670
reason that that matters at all is just

1279
01:09:50,548 --> 01:09:59,099
because we need to be able to store the

1280
01:09:53,670 --> 01:10:02,489
direction components right now we just

1281
01:09:59,099 --> 01:10:06,739
sort RGB a depth which every card can do

1282
01:10:02,488 --> 01:10:10,319
we would need to sort RGB a depth normal

1283
01:10:06,738 --> 01:10:13,379
which requires writing to a second color

1284
01:10:10,319 --> 01:10:22,219
target because it's going to have to

1285
01:10:13,380 --> 01:10:22,219
store that X and the y value right

1286
01:10:24,920 --> 01:10:30,340
so yeah so that's pretty bad

1287
01:10:46,159 --> 01:10:50,420
again for a modern graphics card that's

1288
01:10:48,649 --> 01:10:53,929
nothing they would not care about that

1289
01:10:50,420 --> 01:10:57,460
at all it's it's pretty milquetoast for

1290
01:10:53,930 --> 01:11:00,920
this graphic card I'm just guessing that

1291
01:10:57,460 --> 01:11:05,949
it would be a complete disaster right

1292
01:11:00,920 --> 01:11:08,539
now the render target part we could fix

1293
01:11:05,949 --> 01:11:10,460
the render target part is easily fixable

1294
01:11:08,539 --> 01:11:12,409
so what we could do is implement our

1295
01:11:10,460 --> 01:11:18,649
renderer and in fact we probably do want

1296
01:11:12,409 --> 01:11:21,859
to do this now I think about it we could

1297
01:11:18,649 --> 01:11:27,829
just get the approximate normal by using

1298
01:11:21,859 --> 01:11:29,659
the by just doing another pass that

1299
01:11:27,829 --> 01:11:34,100
records what the normal was at the

1300
01:11:29,659 --> 01:11:37,099
closest point for that best pass for

1301
01:11:34,100 --> 01:11:37,670
that depth feel right so just after we

1302
01:11:37,100 --> 01:11:40,390
do it

1303
01:11:37,670 --> 01:11:43,190
we do one extra pass to write the normal

1304
01:11:40,390 --> 01:11:45,829
that would not require writing to an

1305
01:11:43,189 --> 01:11:53,629
extra texture so that would be pretty

1306
01:11:45,829 --> 01:11:56,659
straightforward I think so I'm not too

1307
01:11:53,630 --> 01:11:59,690
scared about that the thing that I am

1308
01:11:56,659 --> 01:12:01,699
scared about is the 16 source textures

1309
01:11:59,689 --> 01:12:07,659
so let's find out whether that it even

1310
01:12:01,699 --> 01:12:12,889
be possible on this machine from jail

1311
01:12:07,659 --> 01:12:15,369
and litter for maximum textures actually

1312
01:12:12,890 --> 01:12:15,369
Sanders

1313
01:12:19,969 --> 01:12:30,149
Phil Phil max of Santa's so 32 samplers

1314
01:12:28,498 --> 01:12:31,529
would be well more than enough that

1315
01:12:30,149 --> 01:12:36,419
would be twice the number we would

1316
01:12:31,529 --> 01:12:39,509
actually need if that was the limit but

1317
01:12:36,418 --> 01:12:42,529
I don't know if there's a good place to

1318
01:12:39,510 --> 01:12:42,530
look at that

1319
01:13:01,159 --> 01:13:11,899
what is that site that does up until

1320
01:13:07,020 --> 01:13:11,900
graphics card keys abilities

1321
01:13:12,210 --> 01:13:15,350
[Applause]

1322
01:13:18,630 --> 01:13:29,429
all right so let's take a look so this

1323
01:13:27,840 --> 01:13:33,199
is whether or not we would get an extra

1324
01:13:29,429 --> 01:13:33,199
render target right

1325
01:13:46,119 --> 01:13:54,930
so it looks like mostly everything

1326
01:13:48,819 --> 01:13:54,929
allows for color target though or more

1327
01:13:56,069 --> 01:14:12,009
unless that means for color I mean I

1328
01:14:07,180 --> 01:14:13,329
guess max color attachments we can just

1329
01:14:12,010 --> 01:14:14,470
query on our card and that's probably

1330
01:14:13,329 --> 01:14:16,090
the floor

1331
01:14:14,470 --> 01:14:17,740
max letter attachments is just whether

1332
01:14:16,090 --> 01:14:23,890
or not we could write out the the other

1333
01:14:17,739 --> 01:14:25,029
bits there and that's the maximum of

1334
01:14:23,890 --> 01:14:27,310
color attachment points in a frame

1335
01:14:25,029 --> 01:14:32,769
buffer object I just don't know whether

1336
01:14:27,310 --> 01:14:35,890
that means a color channel so if RGB a

1337
01:14:32,770 --> 01:14:39,220
means for then that's one thing if RGB a

1338
01:14:35,890 --> 01:14:42,369
means one that's another thing so I

1339
01:14:39,220 --> 01:14:48,010
would like to know what the definition

1340
01:14:42,369 --> 01:14:50,550
of that actually is in the spec so I'm

1341
01:14:48,010 --> 01:14:50,550
going to look

1342
01:14:58,319 --> 01:15:01,478
[Applause]

1343
01:15:16,579 --> 01:15:22,659
the arrangement zeroes I've met so okay

1344
01:15:20,060 --> 01:15:25,850
so four means you could write to four

1345
01:15:22,659 --> 01:15:29,769
render targets at once even if there are

1346
01:15:25,850 --> 01:15:33,079
GBA according to this so that means

1347
01:15:29,770 --> 01:15:36,080
writing out the direction should not be

1348
01:15:33,079 --> 01:15:38,720
a problem even on a card as old as this

1349
01:15:36,079 --> 01:15:53,210
one we can query it and find out which

1350
01:15:38,720 --> 01:16:10,880
let's just do that let me have an info

1351
01:15:53,210 --> 01:16:16,159
here it is so in our OpenGL info let's

1352
01:16:10,880 --> 01:16:17,390
do in here we'll just do although you

1353
01:16:16,159 --> 01:16:19,099
know what now I think about it

1354
01:16:17,390 --> 01:16:21,560
the way we actually were doing this is

1355
01:16:19,100 --> 01:16:23,110
we were doing it in here more so maybe

1356
01:16:21,560 --> 01:16:30,250
I'll just put them in here for now

1357
01:16:23,109 --> 01:16:37,599
set max color attachment Max and pears

1358
01:16:30,250 --> 01:16:37,600
shaded so let's get those values

1359
01:16:39,779 --> 01:16:42,858
[Applause]

1360
01:16:45,430 --> 01:16:49,369
and just see what they are because I'm

1361
01:16:47,359 --> 01:16:51,289
curious too now and again this is

1362
01:16:49,369 --> 01:16:54,859
extremely old cards have worked on here

1363
01:16:51,289 --> 01:16:57,469
it's probably totally fine for backwards

1364
01:16:54,859 --> 01:17:09,198
compatibility because this card is is

1365
01:16:57,469 --> 01:17:13,869
ancient it's like we're not doing a deal

1366
01:17:09,198 --> 01:17:13,869
get / mi anymore anywhere

1367
01:17:27,029 --> 01:17:32,639
Oh get integers there we go so we are

1368
01:17:30,949 --> 01:17:36,149
let's just say I thought we were getting

1369
01:17:32,640 --> 01:17:49,170
one specifically for that okay so let's

1370
01:17:36,149 --> 01:18:00,750
do color attachments and then we also

1371
01:17:49,170 --> 01:18:01,829
need a max sampler or something max we

1372
01:18:00,750 --> 01:18:04,430
need something that tells us the

1373
01:18:01,829 --> 01:18:04,430
samplers

1374
01:18:09,439 --> 01:18:12,529
[Applause]

1375
01:18:26,929 --> 01:18:30,649
so the open dermatitis is multiple

1376
01:18:29,090 --> 01:18:35,659
dependent by tanukis vertex architecture

1377
01:18:30,649 --> 01:18:37,849
immunity is love evolve wha okay so the

1378
01:18:35,658 --> 01:18:47,948
cause of Geo mass can bind texture image

1379
01:18:37,850 --> 01:18:47,949
units that is what we would need to know

1380
01:18:52,699 --> 01:18:55,979
[Applause]

1381
01:18:56,319 --> 01:19:00,559
so I think those are the two values and

1382
01:18:59,060 --> 01:19:03,230
we'll probably have to get those because

1383
01:19:00,560 --> 01:19:05,060
those are extended values so we'll have

1384
01:19:03,229 --> 01:19:07,218
to get those from Chora because those

1385
01:19:05,060 --> 01:19:09,230
are not in base up in jails and so base

1386
01:19:07,219 --> 01:19:21,730
up until them have any of those max

1387
01:19:09,229 --> 01:19:30,439
color attachments and Max combined oops

1388
01:19:21,729 --> 01:19:32,599
nice combined texture image units and

1389
01:19:30,439 --> 01:19:35,469
let's just see what these are because I

1390
01:19:32,600 --> 01:19:39,780
have no idea what they are on this card

1391
01:19:35,469 --> 01:19:42,979
it's so should be GL in

1392
01:19:39,779 --> 01:19:42,978
[Applause]

1393
01:19:47,099 --> 01:19:54,199
and so if I take a look at what those

1394
01:19:51,090 --> 01:19:54,199
work out to be

1395
01:20:07,029 --> 01:20:14,710
so yeah I mean it looks like we could

1396
01:20:10,960 --> 01:20:19,090
just do this even on this extremely old

1397
01:20:14,710 --> 01:20:21,010
card I seems fine let's take a look at

1398
01:20:19,090 --> 01:20:23,829
what this value is on something like an

1399
01:20:21,010 --> 01:20:27,960
Intel integrated graphics part which

1400
01:20:23,829 --> 01:20:39,159
tend to be the worst for texturing I

1401
01:20:27,960 --> 01:20:41,529
just see if we can get a little

1402
01:20:39,159 --> 01:20:45,609
visibility into that so my goodness that

1403
01:20:41,529 --> 01:20:48,550
is a large value so here's a page with

1404
01:20:45,609 --> 01:20:54,969
everybody looks like they're sorted from

1405
01:20:48,550 --> 01:20:59,650
least to greatest so even back really

1406
01:20:54,970 --> 01:21:02,380
old it looks like they were ok with 16

1407
01:20:59,649 --> 01:21:06,729
so we would be right at the limit but we

1408
01:21:02,380 --> 01:21:10,630
would be functional the only thing I

1409
01:21:06,729 --> 01:21:12,279
don't know is the number of color

1410
01:21:10,630 --> 01:21:14,050
attachments that you have does that

1411
01:21:12,279 --> 01:21:15,550
affect that so if you have one color

1412
01:21:14,050 --> 01:21:17,920
attachment does that cut into your

1413
01:21:15,550 --> 01:21:19,390
texture unit I assume texture units are

1414
01:21:17,920 --> 01:21:22,090
only for sampling textures in this

1415
01:21:19,390 --> 01:21:23,560
description and not the frame buffer out

1416
01:21:22,090 --> 01:21:25,150
because the frame buffer hats a very

1417
01:21:23,560 --> 01:21:27,970
different path it doesn't have a lot to

1418
01:21:25,149 --> 01:21:30,939
do with extra sampling but if there was

1419
01:21:27,970 --> 01:21:32,590
a question of address registers we're

1420
01:21:30,939 --> 01:21:38,049
like you only have this many texture

1421
01:21:32,590 --> 01:21:45,190
addresses at all then the texture to

1422
01:21:38,050 --> 01:21:47,560
which you were rendering would count so

1423
01:21:45,189 --> 01:21:49,839
that's the question but the good news

1424
01:21:47,560 --> 01:21:51,700
even in that case is by the time you get

1425
01:21:49,840 --> 01:21:57,699
to anything even a reasonably modern

1426
01:21:51,699 --> 01:21:59,409
you're up to 32 it looks like so I say

1427
01:21:57,699 --> 01:22:07,899
let's do this

1428
01:21:59,409 --> 01:22:12,840
I mean it's dumb yes but uh you know

1429
01:22:07,899 --> 01:22:12,839
Dumber things have worked you know

1430
01:22:19,328 --> 01:22:30,849
so let's try it okay so if we're going

1431
01:22:26,439 --> 01:22:32,828
to do this then what we really need here

1432
01:22:30,849 --> 01:22:37,059
is we no longer really have the concept

1433
01:22:32,828 --> 01:22:39,340
of a light texture in this sense right

1434
01:22:37,059 --> 01:22:43,840
it's not quite what we would be creating

1435
01:22:39,340 --> 01:22:47,650
here what we have instead is something

1436
01:22:43,840 --> 01:22:50,980
where we're going to store this extra

1437
01:22:47,649 --> 01:22:56,738
data in a myth map fashion now I don't

1438
01:22:50,979 --> 01:22:59,109
know that we actually need to have these

1439
01:22:56,738 --> 01:23:01,899
things be MIT Maps because we're never

1440
01:22:59,109 --> 01:23:04,058
sampling from them as actual MIT Maps so

1441
01:23:01,899 --> 01:23:07,328
really what we want to do is take this

1442
01:23:04,059 --> 01:23:11,670
notion of the light myth count and then

1443
01:23:07,328 --> 01:23:11,670
the light myth count is going to give us

1444
01:23:12,118 --> 01:23:16,179
how many of these light textures we need

1445
01:23:14,889 --> 01:23:20,380
and the light texture is just going to

1446
01:23:16,179 --> 01:23:24,179
be successively downsampled versions of

1447
01:23:20,380 --> 01:23:26,889
our 1920 by 1080 or whatever it is right

1448
01:23:24,179 --> 01:23:31,050
so assuming that we start at 1920 by

1449
01:23:26,889 --> 01:23:34,569
1080 how many times would we have to

1450
01:23:31,050 --> 01:23:37,960
down down sample it right and so you

1451
01:23:34,569 --> 01:23:39,099
know if I take 1920 i / . / - you're

1452
01:23:37,960 --> 01:23:41,170
right this is the process that we're

1453
01:23:39,099 --> 01:23:43,599
going to be doing to get down to the

1454
01:23:41,170 --> 01:23:46,449
minimum level that we want right

1455
01:23:43,599 --> 01:23:49,539
whatever that minimum level is so if

1456
01:23:46,448 --> 01:23:52,629
it's 1920 by 1080 what you can see here

1457
01:23:49,539 --> 01:23:56,349
is at some point unfortunately we get

1458
01:23:52,630 --> 01:24:02,078
down to 15 and there's nothing we can do

1459
01:23:56,349 --> 01:24:07,328
below 15 right anything that we do below

1460
01:24:02,078 --> 01:24:13,000
15 will sub sort of unevenly sample

1461
01:24:07,328 --> 01:24:14,109
which we may not want to actually do so

1462
01:24:13,000 --> 01:24:16,118
we're really looking at something that's

1463
01:24:14,109 --> 01:24:18,069
like 15 and then 1080 has the same

1464
01:24:16,118 --> 01:24:20,920
problem obviously right as you divide by

1465
01:24:18,069 --> 01:24:25,448
2 you get in fact that's pretty soon

1466
01:24:20,920 --> 01:24:27,989
right you get down there so I don't know

1467
01:24:25,448 --> 01:24:30,039
what how we want to address that problem

1468
01:24:27,988 --> 01:24:32,468
exactly there's a couple of different

1469
01:24:30,039 --> 01:24:33,010
ways we can do it one is we can start

1470
01:24:32,469 --> 01:24:34,569
with 90

1471
01:24:33,010 --> 01:24:36,789
twenty by ten eighty and just when we

1472
01:24:34,569 --> 01:24:40,659
get down to that level just let

1473
01:24:36,789 --> 01:24:44,260
ourselves do a sloppy sample right so

1474
01:24:40,659 --> 01:24:46,649
let it be the fact that yet you don't

1475
01:24:44,260 --> 01:24:50,380
accurately do down by two at this point

1476
01:24:46,649 --> 01:24:52,000
it's actually going to sample from it's

1477
01:24:50,380 --> 01:24:56,140
going to by linearly sample or something

1478
01:24:52,000 --> 01:24:58,029
right so we could totally do that

1479
01:24:56,140 --> 01:25:00,160
the other thing we can do is start with

1480
01:24:58,029 --> 01:25:03,960
something that's not 1920 by 1080 start

1481
01:25:00,159 --> 01:25:07,989
with something that's actually 2048 by

1482
01:25:03,960 --> 01:25:10,480
2048 and sample that down right and just

1483
01:25:07,989 --> 01:25:12,809
do the upper corner of it as it gets

1484
01:25:10,479 --> 01:25:14,589
sampled down and down and down right

1485
01:25:12,810 --> 01:25:15,610
again that doesn't really help us

1486
01:25:14,590 --> 01:25:18,190
because the same thing is going to

1487
01:25:15,609 --> 01:25:20,049
happen to the sub rectangle there so I

1488
01:25:18,189 --> 01:25:22,389
think probably what we want to do here

1489
01:25:20,050 --> 01:25:28,390
is we just want to take you know these

1490
01:25:22,390 --> 01:25:32,200
textures and I think we just want to go

1491
01:25:28,390 --> 01:25:40,380
ahead and and do their successive

1492
01:25:32,199 --> 01:25:44,529
versions now there might be some win to

1493
01:25:40,380 --> 01:25:46,569
doing the larger bitmap and having it so

1494
01:25:44,529 --> 01:25:49,750
we're only having to access its LOD s

1495
01:25:46,569 --> 01:25:53,019
and that wind would come if we ever

1496
01:25:49,750 --> 01:25:58,300
tried to read from more than one LOD at

1497
01:25:53,020 --> 01:26:00,160
a particular time right but I just don't

1498
01:25:58,300 --> 01:26:07,300
know if that's something that we would

1499
01:26:00,159 --> 01:26:10,409
actually be doing it doesn't seem like

1500
01:26:07,300 --> 01:26:10,409
something we would be doing

1501
01:26:27,010 --> 01:26:31,420
I mean the basic description of the

1502
01:26:30,340 --> 01:26:33,369
algorithm that I outlined before

1503
01:26:31,420 --> 01:26:35,710
certainly doesn't do it because you're

1504
01:26:33,369 --> 01:26:38,170
always reading from one level of the MIT

1505
01:26:35,710 --> 01:26:39,789
chain and writing to another level of

1506
01:26:38,170 --> 01:26:41,440
the MIT chain at every step in the

1507
01:26:39,789 --> 01:26:45,479
process so at no time do you actually

1508
01:26:41,439 --> 01:26:47,949
get a benefit where you are reading in

1509
01:26:45,479 --> 01:26:49,449
you are reading and/or writing from

1510
01:26:47,949 --> 01:26:52,269
multiple levels of mix change well right

1511
01:26:49,449 --> 01:26:54,369
in the nose of James's substitute at no

1512
01:26:52,270 --> 01:26:56,050
time are you reading from multiple

1513
01:26:54,369 --> 01:27:00,488
levels of the MIT chain meaning you

1514
01:26:56,050 --> 01:27:02,020
never read from the myth chain like one

1515
01:27:00,488 --> 01:27:06,429
level up and the level that you're

1516
01:27:02,020 --> 01:27:10,390
currently on and furthermore you

1517
01:27:06,430 --> 01:27:12,460
couldn't do that because if you were

1518
01:27:10,390 --> 01:27:13,989
going to do that you would be writing to

1519
01:27:12,460 --> 01:27:16,989
the same texture you were reading from

1520
01:27:13,988 --> 01:27:21,039
which is generally not allowed because

1521
01:27:16,988 --> 01:27:23,679
the seats the sequencing breaks right so

1522
01:27:21,039 --> 01:27:25,449
it seems to me I mean just sort of

1523
01:27:23,680 --> 01:27:27,940
closing my eyes and imagining it it

1524
01:27:25,449 --> 01:27:29,889
seems to me that you could get away with

1525
01:27:27,939 --> 01:27:33,309
just these always being two separate

1526
01:27:29,890 --> 01:27:40,030
texture handles and off you go

1527
01:27:33,310 --> 01:27:44,590
I think so anyway if I have a 1080

1528
01:27:40,029 --> 01:27:48,119
texture well a 1024 is two to the tenth

1529
01:27:44,590 --> 01:27:51,489
right so if I do two to the ten I get

1530
01:27:48,119 --> 01:27:57,430
1024 so I'm suspecting that I will need

1531
01:27:51,488 --> 01:28:02,199
ten mid levels roughly now 10 19 20

1532
01:27:57,430 --> 01:28:09,640
right if I was to take and do that ten

1533
01:28:02,199 --> 01:28:12,869
times right so you know oops that that's

1534
01:28:09,640 --> 01:28:16,600
not what I want to do 19 20 divided by

1535
01:28:12,869 --> 01:28:19,449
so if I do ten MIT levels here of this

1536
01:28:16,600 --> 01:28:23,770
thing so the 19 20 is one level then

1537
01:28:19,449 --> 01:28:31,029
that's a the second level third level

1538
01:28:23,770 --> 01:28:38,530
fourth level first level second level

1539
01:28:31,029 --> 01:28:40,238
that's 2 3 4 5 6 7 8 9 10

1540
01:28:38,529 --> 01:28:40,658
I get that of something that's like 4

1541
01:28:40,238 --> 01:28:45,488
pics

1542
01:28:40,658 --> 01:28:50,229
why'd and a 4 by1 would be fine for our

1543
01:28:45,488 --> 01:28:52,899
purposes right for a minimum level so we

1544
01:28:50,229 --> 01:28:53,348
could you know pretty trivially do a 4

1545
01:28:52,899 --> 01:28:55,359
by1

1546
01:28:53,349 --> 01:28:59,560
if we wanted to make sure we got down to

1547
01:28:55,359 --> 01:29:07,299
things that were always no more than 2

1548
01:28:59,560 --> 01:29:10,060
we would need 11 mid maps right fantasy

1549
01:29:07,300 --> 01:29:15,730
watches or shoes always go down to a one

1550
01:29:10,060 --> 01:29:17,829
by one then we would know that we we

1551
01:29:15,729 --> 01:29:19,479
would need 12 right because that's the

1552
01:29:17,828 --> 01:29:22,649
that's the only power of two that it

1553
01:29:19,479 --> 01:29:25,419
effectively can encompass the 19 20

1554
01:29:22,649 --> 01:29:28,269
so it's our choice of how we want to do

1555
01:29:25,420 --> 01:29:30,940
that whether we want 10 11 or 12 I'm not

1556
01:29:28,270 --> 01:29:32,800
sure I'm not sure how much it matters

1557
01:29:30,939 --> 01:29:37,328
exactly let's start by saying we're

1558
01:29:32,800 --> 01:29:41,469
going to use 10 or rather we might even

1559
01:29:37,328 --> 01:29:48,250
say let's use 9 because maybe we don't

1560
01:29:41,469 --> 01:29:54,060
really want to in the circumstance where

1561
01:29:48,250 --> 01:29:56,319
we would have this always doing a 2 by 2

1562
01:29:54,060 --> 01:29:59,560
effectively we would want to make sure

1563
01:29:56,319 --> 01:30:02,078
that we always have two in why and so 10

1564
01:29:59,560 --> 01:30:05,110
myth levels means that at the lowest

1565
01:30:02,078 --> 01:30:08,649
level we only have one pixel in why one

1566
01:30:05,109 --> 01:30:11,649
texel and why one texel high and so

1567
01:30:08,649 --> 01:30:16,509
maybe we don't want that exactly so I

1568
01:30:11,649 --> 01:30:21,250
think what I would say is we have our

1569
01:30:16,510 --> 01:30:27,429
like light buffer and our light buffer

1570
01:30:21,250 --> 01:30:30,389
here you know this stuff goes away our

1571
01:30:27,429 --> 01:30:36,310
light buffers would have no more than 12

1572
01:30:30,389 --> 01:30:37,810
right like the buffer count and our

1573
01:30:36,310 --> 01:30:40,750
light buffer is going to be now this

1574
01:30:37,810 --> 01:30:42,579
very special purpose nutso thing that we

1575
01:30:40,750 --> 01:30:47,500
have going to have to create relatively

1576
01:30:42,578 --> 01:30:48,759
special purpose right so what is the

1577
01:30:47,500 --> 01:30:51,309
life ever have according to what we

1578
01:30:48,760 --> 01:30:53,679
talked about before well it's got a

1579
01:30:51,309 --> 01:31:04,159
front omission

1580
01:30:53,679 --> 01:31:12,349
texture it's got a back emit right it's

1581
01:31:04,158 --> 01:31:17,118
got a reflectance I know what we want to

1582
01:31:12,349 --> 01:31:27,940
call this I guess it's the just a

1583
01:31:17,118 --> 01:31:32,269
surface color and then it's got a

1584
01:31:27,939 --> 01:31:35,000
special texture that's the normal depth

1585
01:31:32,270 --> 01:31:36,829
or like the NPA you let's say it's the

1586
01:31:35,000 --> 01:31:39,078
thing that tells us the location plus

1587
01:31:36,828 --> 01:31:55,578
the normal of the texture which is a

1588
01:31:39,078 --> 01:32:00,649
special-purpose texture and so we can

1589
01:31:55,578 --> 01:32:03,408
just not store the NZ value probably or

1590
01:32:00,649 --> 01:32:07,819
maybe we want to store like you know n X

1591
01:32:03,408 --> 01:32:09,828
n Z because you know a lot of times our

1592
01:32:07,819 --> 01:32:12,158
stuff will be heavily pointing in the Z

1593
01:32:09,828 --> 01:32:17,840
direction so we want to store the most

1594
01:32:12,158 --> 01:32:20,089
dominant value right so maybe it's n X n

1595
01:32:17,840 --> 01:32:24,469
Z or something like that and the depth

1596
01:32:20,090 --> 01:32:27,050
so we've got these textures that we're

1597
01:32:24,469 --> 01:32:31,460
going to store and these are all three

1598
01:32:27,050 --> 01:32:34,489
elements so like note KFAB are all three

1599
01:32:31,460 --> 01:32:37,279
elements would be how we would store

1600
01:32:34,488 --> 01:32:39,169
these I guess but again we could just

1601
01:32:37,279 --> 01:32:41,538
decide to pack them and be clever

1602
01:32:39,170 --> 01:32:45,020
it seems like we probably should do that

1603
01:32:41,538 --> 01:32:46,988
so because why not right I can't think

1604
01:32:45,020 --> 01:32:50,289
of any reason why we wouldn't do that

1605
01:32:46,988 --> 01:32:50,288
necessarily well

1606
01:32:54,448 --> 01:33:02,948
on the way back down we never write to

1607
01:32:58,658 --> 01:33:11,920
this and for this so we're only writing

1608
01:33:02,948 --> 01:33:18,698
to these two right so it would make a

1609
01:33:11,920 --> 01:33:20,769
lot more sense probably to treat those

1610
01:33:18,698 --> 01:33:22,960
as separate and these two as separate so

1611
01:33:20,769 --> 01:33:25,889
you know maybe yeah we don't want to

1612
01:33:22,960 --> 01:33:25,889
merge them I don't know

1613
01:33:33,520 --> 01:33:37,910
yeah I think we don't want to merge them

1614
01:33:35,930 --> 01:33:40,130
because we want to read from these on

1615
01:33:37,909 --> 01:33:43,269
the way back down and right to these

1616
01:33:40,130 --> 01:33:43,270
[Applause]

1617
01:33:44,619 --> 01:33:49,760
potentially or other things like that I

1618
01:33:48,380 --> 01:33:53,180
mean I don't know that we actually want

1619
01:33:49,760 --> 01:33:58,460
to do that but we might it's plausible

1620
01:33:53,180 --> 01:34:07,250
that we could potentially do that so we

1621
01:33:58,460 --> 01:34:09,859
want these and then we've got the frame

1622
01:34:07,250 --> 01:34:14,329
buffers so the frame buffers here would

1623
01:34:09,859 --> 01:34:18,409
be something that writes to the front

1624
01:34:14,329 --> 01:34:22,489
and back omit surface color texture and

1625
01:34:18,409 --> 01:34:25,930
the MP text so you know this is this is

1626
01:34:22,489 --> 01:34:30,170
a write all frame buffer kind of a thing

1627
01:34:25,930 --> 01:34:35,780
and that's used for the path up and then

1628
01:34:30,170 --> 01:34:38,480
there's a right omit because the right

1629
01:34:35,779 --> 01:34:40,429
emit is the frame buffer we'd actually

1630
01:34:38,479 --> 01:34:43,219
use on the way down because once you've

1631
01:34:40,430 --> 01:34:46,039
built those MIPS you no longer need to

1632
01:34:43,220 --> 01:34:47,539
ask what the surface color NP texture s

1633
01:34:46,039 --> 01:34:50,239
are you know longing to modify what the

1634
01:34:47,539 --> 01:34:51,739
surface color texture or the normal

1635
01:34:50,239 --> 01:34:53,659
depth texture is at the levels because

1636
01:34:51,739 --> 01:34:55,609
it's just known right it never gets

1637
01:34:53,659 --> 01:35:00,109
changed again it's just admitted like

1638
01:34:55,609 --> 01:35:06,199
then that you're sort of pushing back

1639
01:35:00,109 --> 01:35:08,170
around in those in those cases right so

1640
01:35:06,199 --> 01:35:12,829
it seems to me at least to a certain

1641
01:35:08,170 --> 01:35:14,899
extent that that would give me roughly

1642
01:35:12,829 --> 01:35:21,289
what I want right that that gives me

1643
01:35:14,899 --> 01:35:23,569
mostly all I would need so this is my

1644
01:35:21,289 --> 01:35:26,420
frame buffer for writing to everything

1645
01:35:23,569 --> 01:35:30,619
which gets used on the way up and used

1646
01:35:26,420 --> 01:35:35,949
also for producing this initial set of

1647
01:35:30,619 --> 01:35:40,909
values from the DEF sealer results and

1648
01:35:35,949 --> 01:35:44,219
then the emitter one is just for the

1649
01:35:40,909 --> 01:35:49,059
down path right

1650
01:35:44,219 --> 01:35:52,989
okay so we need to produce a set of

1651
01:35:49,060 --> 01:35:57,820
these four you know some of these for

1652
01:35:52,988 --> 01:36:00,669
use with the the the NIP stuff and we

1653
01:35:57,819 --> 01:36:05,049
need the rather complicated shaders that

1654
01:36:00,670 --> 01:36:06,460
will be used for the tipping but we also

1655
01:36:05,050 --> 01:36:08,170
need the other part of the process which

1656
01:36:06,460 --> 01:36:10,329
is sort of the part that we should get

1657
01:36:08,170 --> 01:36:14,230
started on now which is that after we

1658
01:36:10,329 --> 01:36:22,539
have these light buffers produced we

1659
01:36:14,229 --> 01:36:24,879
also need some way of writing to them in

1660
01:36:22,539 --> 01:36:28,210
the first place and that's a little

1661
01:36:24,880 --> 01:36:29,980
trickier than it should be so let me

1662
01:36:28,210 --> 01:36:34,539
compile and kind of get rid of some of

1663
01:36:29,979 --> 01:36:39,658
this stuff here so what I want to do

1664
01:36:34,539 --> 01:36:45,899
here is have a thing that freeze here

1665
01:36:39,658 --> 01:36:49,649
frame buffer so what we want here is

1666
01:36:45,899 --> 01:37:05,319
something like this when we delete these

1667
01:36:49,649 --> 01:37:06,638
light buffers we've got so we would have

1668
01:37:05,319 --> 01:37:13,500
something like okay we've got a light

1669
01:37:06,639 --> 01:37:16,840
buffer it's whatever the light buffers

1670
01:37:13,500 --> 01:37:18,789
are at this point so we're going to go

1671
01:37:16,840 --> 01:37:23,529
through here and say let's delete each

1672
01:37:18,789 --> 01:37:29,300
of these parts of it

1673
01:37:23,529 --> 01:37:29,300
[Applause]

1674
01:37:39,289 --> 01:37:48,988
[Applause]

1675
01:37:50,829 --> 01:37:55,909
there we go so that's how we would

1676
01:37:54,079 --> 01:37:58,430
delete these and then we just need some

1677
01:37:55,909 --> 01:38:01,789
way of actually allocating these and

1678
01:37:58,430 --> 01:38:04,100
that would be this saucy gentleman right

1679
01:38:01,789 --> 01:38:09,140
here and so we've got a light buffer

1680
01:38:04,100 --> 01:38:11,360
count here that we're going to want to

1681
01:38:09,140 --> 01:38:14,150
set at the moment I'm just going to set

1682
01:38:11,359 --> 01:38:17,449
it to nine well actually now we'll click

1683
01:38:14,149 --> 01:38:20,359
to ten let's say we're going to get rid

1684
01:38:17,449 --> 01:38:27,139
of all of this stuff and the version in

1685
01:38:20,359 --> 01:38:28,969
the settings for now and again we will

1686
01:38:27,140 --> 01:38:32,020
add probably some settings for lighting

1687
01:38:28,970 --> 01:38:35,000
in there later that will recreate here

1688
01:38:32,020 --> 01:38:48,050
but this is the basic outline of the

1689
01:38:35,000 --> 01:38:49,130
routine and again we're not really going

1690
01:38:48,050 --> 01:38:50,480
to be able to use any of the stuff that

1691
01:38:49,130 --> 01:38:51,590
we've written for frame buffers or any

1692
01:38:50,479 --> 01:38:53,449
of that stuff because this is going to

1693
01:38:51,590 --> 01:38:54,590
be very specific these things are going

1694
01:38:53,449 --> 01:38:55,819
to be different from any of the other

1695
01:38:54,590 --> 01:38:57,409
things we use reimburse for because

1696
01:38:55,819 --> 01:39:00,079
they're going to write to two color

1697
01:38:57,409 --> 01:39:10,149
textures at the same time and all sorts

1698
01:39:00,079 --> 01:39:12,829
of other nonsense like this all right I

1699
01:39:10,149 --> 01:39:15,639
so now what we need to do is actually

1700
01:39:12,829 --> 01:39:15,640
create these

1701
01:39:21,939 --> 01:39:29,268
and we do have basically the outline of

1702
01:39:25,069 --> 01:39:31,009
what that would look like so we have a

1703
01:39:29,269 --> 01:39:34,820
frame buffer text image thing here which

1704
01:39:31,010 --> 01:39:37,280
you can see us creating this is not

1705
01:39:34,819 --> 01:39:42,259
really what we want but we're going to

1706
01:39:37,279 --> 01:39:47,090
want something similar to this I guess

1707
01:39:42,260 --> 01:39:49,510
looking at it we can probably make this

1708
01:39:47,090 --> 01:39:49,510
work

1709
01:40:02,640 --> 01:40:07,900
what's kind of interesting about GL text

1710
01:40:05,170 --> 01:40:09,640
image 2d is why if you're not passing

1711
01:40:07,899 --> 01:40:12,149
anything do you even have to specify

1712
01:40:09,640 --> 01:40:17,920
anything here you know and I'm saying

1713
01:40:12,149 --> 01:40:19,689
like what's the point of that they have

1714
01:40:17,920 --> 01:40:21,550
an updated version called GL text

1715
01:40:19,689 --> 01:40:23,679
storage which is look way better it's

1716
01:40:21,550 --> 01:40:26,260
much better than geotech cement duty but

1717
01:40:23,680 --> 01:40:27,640
I don't know if all cards support it I

1718
01:40:26,260 --> 01:40:31,539
think a lot of Intel stuff doesn't

1719
01:40:27,640 --> 01:40:33,340
support it at least not with them out

1720
01:40:31,539 --> 01:40:37,510
there like most latest gist of all late

1721
01:40:33,340 --> 01:40:41,050
drivers but it looks like we should be

1722
01:40:37,510 --> 01:40:50,079
able to use this actually as long as BG

1723
01:40:41,050 --> 01:40:53,650
r8x isn't a problem in this case uh so

1724
01:40:50,079 --> 01:40:55,000
yeah and I I guess I don't know again

1725
01:40:53,649 --> 01:40:56,710
like is there somebody we could just

1726
01:40:55,000 --> 01:40:59,739
pass zeros for these or would it get

1727
01:40:56,710 --> 01:41:02,170
upset with us like can we just pass zero

1728
01:40:59,739 --> 01:41:04,269
let's let's find out first of all let me

1729
01:41:02,170 --> 01:41:06,609
just try it and then we'll see whether

1730
01:41:04,270 --> 01:41:08,230
that's an anomaly of the card or whether

1731
01:41:06,609 --> 01:41:10,659
that's actually allowed because again we

1732
01:41:08,229 --> 01:41:12,339
we're not trying to submit anything so

1733
01:41:10,659 --> 01:41:13,840
I'm not sure why we would ask identify

1734
01:41:12,340 --> 01:41:15,340
anything there we specify the internal

1735
01:41:13,840 --> 01:41:21,850
storage format that's all we should need

1736
01:41:15,340 --> 01:41:31,720
right so what if I did that what if I

1737
01:41:21,850 --> 01:41:34,020
just said hey yeah we're just not passed

1738
01:41:31,720 --> 01:41:34,020
anything

1739
01:41:34,800 --> 01:41:42,720
yep just as I suspected Val you know

1740
01:41:40,340 --> 01:41:44,850
that's really unfortunate because like

1741
01:41:42,720 --> 01:41:48,990
man it's just dumb like why would you

1742
01:41:44,850 --> 01:41:50,510
have to pass something it's just stupid

1743
01:41:48,989 --> 01:41:54,389
because there's nothing happening there

1744
01:41:50,510 --> 01:41:57,090
but anyway oh well

1745
01:41:54,390 --> 01:42:07,140
but frame buffer text image is what we

1746
01:41:57,090 --> 01:42:09,420
could use in this case right so if we

1747
01:42:07,140 --> 01:42:12,869
wanted to here right I could sort of

1748
01:42:09,420 --> 01:42:14,909
crib off of that and when we do our

1749
01:42:12,869 --> 01:42:16,140
light buffers and create them we're

1750
01:42:14,909 --> 01:42:24,210
basically we could still use this

1751
01:42:16,140 --> 01:42:25,800
function so we would have the the width

1752
01:42:24,210 --> 01:42:27,420
and the height here this is just going

1753
01:42:25,800 --> 01:42:31,400
to be a texture 2d because we're not

1754
01:42:27,420 --> 01:42:34,170
going to multisample these at all and

1755
01:42:31,399 --> 01:42:40,799
the internal frame buffer format here is

1756
01:42:34,170 --> 01:42:43,890
going to probably be a like a 16s or an

1757
01:42:40,800 --> 01:42:47,279
RGB 16s version probably is what we'll

1758
01:42:43,890 --> 01:42:50,640
want to get away with and what we'll

1759
01:42:47,279 --> 01:42:55,800
start with is a 32 F and do a note here

1760
01:42:50,640 --> 01:42:59,940
Casey drop this down to 16 F once we

1761
01:42:55,800 --> 01:43:02,400
know what what because we don't really

1762
01:42:59,939 --> 01:43:03,989
want to eat all that bandwidth for

1763
01:43:02,399 --> 01:43:08,009
32-bit floats when we really probably

1764
01:43:03,989 --> 01:43:09,840
don't need them for lighting but when we

1765
01:43:08,010 --> 01:43:11,039
start I usually like to start by doing

1766
01:43:09,840 --> 01:43:13,619
everything in 32-bit floating point

1767
01:43:11,039 --> 01:43:15,869
since cards allow it and it helps you

1768
01:43:13,619 --> 01:43:19,460
know that you're not getting a bug from

1769
01:43:15,869 --> 01:43:21,720
precision errors or clamping errors and

1770
01:43:19,460 --> 01:43:24,359
then that way you can just toggle it

1771
01:43:21,720 --> 01:43:28,140
down to something smaller later and then

1772
01:43:24,359 --> 01:43:29,939
know that what you see is a well working

1773
01:43:28,140 --> 01:43:33,090
algorithm that just has now been reduced

1774
01:43:29,939 --> 01:43:34,710
in precision so you can estimate whether

1775
01:43:33,090 --> 01:43:39,569
it's worth that reduction in precision

1776
01:43:34,710 --> 01:43:42,060
right so what I want to do here yet is

1777
01:43:39,569 --> 01:43:44,189
do frame buffer text image for a couple

1778
01:43:42,060 --> 01:43:47,449
of different things so let's say we have

1779
01:43:44,189 --> 01:43:49,368
our buffer here and I want to

1780
01:43:47,448 --> 01:43:53,178
rate one of these for each of the things

1781
01:43:49,368 --> 01:44:04,339
that we've got and so I've got my front

1782
01:43:53,179 --> 01:44:14,479
image mission texture here oops I've got

1783
01:44:04,340 --> 01:44:17,929
my back omission texture here I've got

1784
01:44:14,479 --> 01:44:23,449
my surface color texture here and my mp

1785
01:44:17,929 --> 01:44:39,649
Tex now in each of these cases I would

1786
01:44:23,448 --> 01:44:42,259
also point out the fact that the surface

1787
01:44:39,649 --> 01:44:44,899
color tip it's just used for the

1788
01:44:42,260 --> 01:44:50,739
reflection equation almost certainly

1789
01:44:44,899 --> 01:44:53,078
could just be stored in srgb eight right

1790
01:44:50,738 --> 01:44:58,158
there's almost no need for it to be

1791
01:44:53,078 --> 01:45:03,469
sixteen per gun I don't think the MP

1792
01:44:58,158 --> 01:45:15,379
text itself probably could also be sort

1793
01:45:03,469 --> 01:45:18,130
of done in srgb eight because again we

1794
01:45:15,380 --> 01:45:21,679
don't really need the depth to be exact

1795
01:45:18,130 --> 01:45:25,609
and obviously the direction doesn't have

1796
01:45:21,679 --> 01:45:27,529
to be exact either so I strongly suspect

1797
01:45:25,609 --> 01:45:30,049
that we could really cut down on the

1798
01:45:27,529 --> 01:45:32,420
total number of bytes we're actually

1799
01:45:30,050 --> 01:45:34,219
dealing with here because probably it's

1800
01:45:32,420 --> 01:45:38,708
only a mission that's going to need to

1801
01:45:34,219 --> 01:45:41,958
store something fancier than 8-bit and

1802
01:45:38,708 --> 01:45:44,139
even that could probably be encoded in

1803
01:45:41,958 --> 01:45:44,139
8-bit

1804
01:45:52,550 --> 01:45:57,000
because if you think about it's like

1805
01:45:54,329 --> 01:45:58,649
well you know how much do we care how

1806
01:45:57,000 --> 01:46:03,050
accurate the emission is so let's just

1807
01:45:58,649 --> 01:46:07,019
say that the number from 0 to 255 ranged

1808
01:46:03,050 --> 01:46:09,869
actually was like brightness 0 to 10 you

1809
01:46:07,020 --> 01:46:12,210
know and yes not that granular but who

1810
01:46:09,869 --> 01:46:13,949
cares so I don't know we could probably

1811
01:46:12,210 --> 01:46:18,319
get away with a lot of stuff there I

1812
01:46:13,949 --> 01:46:20,309
don't know maybe maybe not I honestly

1813
01:46:18,319 --> 01:46:23,059
the problem with that is you tend to put

1814
01:46:20,310 --> 01:46:26,340
a lot of banding and that doesn't matter

1815
01:46:23,060 --> 01:46:27,720
anyway so I would say that we could

1816
01:46:26,340 --> 01:46:29,279
definitely get this down if we want to

1817
01:46:27,720 --> 01:46:32,039
at first I'm definitely starting with

1818
01:46:29,279 --> 01:46:35,460
floats though because you don't want to

1819
01:46:32,039 --> 01:46:40,109
introduce extra sort of possible

1820
01:46:35,460 --> 01:46:41,550
confusion in there about what's going

1821
01:46:40,109 --> 01:46:42,569
wrong you want to minimize the number of

1822
01:46:41,550 --> 01:46:44,430
things that can go wrong when you're

1823
01:46:42,569 --> 01:46:45,840
working with the GPU since you can't

1824
01:46:44,430 --> 01:46:52,500
step through it at least not on our

1825
01:46:45,840 --> 01:46:56,250
machine so here's I don't know what this

1826
01:46:52,500 --> 01:46:58,890
is just texture to be correct here's how

1827
01:46:56,250 --> 01:47:00,600
we would attach those so one of our

1828
01:46:58,890 --> 01:47:07,010
frame buffers is going to have to attach

1829
01:47:00,600 --> 01:47:07,010
them all right so it would basically be

1830
01:47:10,250 --> 01:47:24,060
each of these guys back admit surface

1831
01:47:15,770 --> 01:47:28,190
color and then P and maybe I should call

1832
01:47:24,060 --> 01:47:31,470
this just what it is an X and and Z or

1833
01:47:28,189 --> 01:47:32,519
well now we don't know we might change

1834
01:47:31,470 --> 01:47:36,810
that encoding I'm going to change the

1835
01:47:32,520 --> 01:47:39,300
name everywhere for no reason so yeah if

1836
01:47:36,810 --> 01:47:40,890
I do this field frame buffer texture QD

1837
01:47:39,300 --> 01:47:43,940
there's nothing special I have to think

1838
01:47:40,890 --> 01:47:43,940
about there I don't think

1839
01:47:52,069 --> 01:47:59,659
because we're only creating one myth

1840
01:47:54,960 --> 01:48:04,739
level for any of these so I think it's I

1841
01:47:59,659 --> 01:48:06,659
think we're fine so one of them is going

1842
01:48:04,739 --> 01:48:08,880
to be that one of them is going to be

1843
01:48:06,659 --> 01:48:15,090
this so it depends on which frame buffer

1844
01:48:08,880 --> 01:48:23,100
we're doing so this is the town frame

1845
01:48:15,090 --> 01:48:25,529
buffer this is the up frame buffer so as

1846
01:48:23,100 --> 01:48:31,100
we sort of build our MIPS we would be

1847
01:48:25,529 --> 01:48:33,529
doing rights to all four as we do our

1848
01:48:31,100 --> 01:48:36,440
traversal back down to spread the light

1849
01:48:33,529 --> 01:48:39,989
we would only be writing to the light

1850
01:48:36,439 --> 01:48:43,099
right and so then I just need the thing

1851
01:48:39,989 --> 01:48:43,099
that creates the frame buffer

1852
01:49:00,909 --> 01:49:23,099
and so here we would have something like

1853
01:49:03,220 --> 01:49:23,100
this tips and I would like to keep this

1854
01:49:29,850 --> 01:49:36,310
like so and so in here what we want to

1855
01:49:34,119 --> 01:49:46,449
do is just say all right we've got our

1856
01:49:36,310 --> 01:49:54,610
buffer it's the right all buffer here it

1857
01:49:46,449 --> 01:49:58,300
is right then we've got this one this is

1858
01:49:54,609 --> 01:50:01,239
the right emitter and neither of these

1859
01:49:58,300 --> 01:50:03,699
are going to have a depth buffer because

1860
01:50:01,239 --> 01:50:05,170
we're just we never want to do depth

1861
01:50:03,699 --> 01:50:08,289
testing or anything like that we're just

1862
01:50:05,170 --> 01:50:09,930
building dip levels so as we go we're

1863
01:50:08,289 --> 01:50:19,979
just kind of aggregating these things

1864
01:50:09,930 --> 01:50:21,700
together right and I think that's

1865
01:50:19,979 --> 01:50:26,469
basically it

1866
01:50:21,699 --> 01:50:34,869
oops got to restore that to working

1867
01:50:26,470 --> 01:50:40,360
order and so here I want to take and I

1868
01:50:34,869 --> 01:50:42,010
want to get the light buffer out of

1869
01:50:40,359 --> 01:50:44,589
there and now I just need to know what

1870
01:50:42,010 --> 01:50:47,820
the texture width and height are so in

1871
01:50:44,590 --> 01:50:51,460
this case we've got text width

1872
01:50:47,819 --> 01:50:53,590
text height and for the text with

1873
01:50:51,460 --> 01:50:55,300
texture width and texture height those

1874
01:50:53,590 --> 01:50:58,420
are just whatever the render width and

1875
01:50:55,300 --> 01:51:00,670
render height are and then each time

1876
01:50:58,420 --> 01:51:02,949
through here we do a text width divided

1877
01:51:00,670 --> 01:51:04,489
equal by two and a tektite divided equal

1878
01:51:02,949 --> 01:51:06,649
by two

1879
01:51:04,488 --> 01:51:09,529
right so they're getting successively

1880
01:51:06,649 --> 01:51:14,359
smaller smaller and smaller if at any

1881
01:51:09,529 --> 01:51:16,729
time the text width is less than one it

1882
01:51:14,359 --> 01:51:19,099
should be set to one and if the text

1883
01:51:16,729 --> 01:51:20,689
height is less than one it should be set

1884
01:51:19,100 --> 01:51:22,579
to one because we don't ever want to

1885
01:51:20,689 --> 01:51:24,139
miss down below one and have a zero like

1886
01:51:22,579 --> 01:51:31,909
a zero dimension texture is not going to

1887
01:51:24,140 --> 01:51:35,180
work I so it looks like we didn't copy

1888
01:51:31,909 --> 01:51:40,519
the GL color attachment for the other

1889
01:51:35,180 --> 01:51:42,570
ones from core ARB so just grab those

1890
01:51:40,520 --> 01:51:45,190
real quick

1891
01:51:42,569 --> 01:51:50,029
[Applause]

1892
01:51:45,189 --> 01:51:59,809
hello color attachment there they all

1893
01:51:50,029 --> 01:52:01,909
are all right so now we are creating

1894
01:51:59,810 --> 01:52:05,410
those surfaces and they're ready to go

1895
01:52:01,909 --> 01:52:08,149
and I think we can kind of end now and

1896
01:52:05,409 --> 01:52:10,399
tomorrow we can start by trying to build

1897
01:52:08,149 --> 01:52:13,189
those which will require two things

1898
01:52:10,399 --> 01:52:15,979
first it require us to have a way of

1899
01:52:13,189 --> 01:52:18,559
specifying lights right now we don't and

1900
01:52:15,979 --> 01:52:23,988
so the way that we'll be doing that is

1901
01:52:18,560 --> 01:52:28,340
we will have a way for you to specify

1902
01:52:23,988 --> 01:52:31,669
that something is emissive and then we

1903
01:52:28,340 --> 01:52:32,960
will have to start doing the actual work

1904
01:52:31,670 --> 01:52:34,850
of building those shaders which will

1905
01:52:32,960 --> 01:52:37,369
probably take us a couple weekends to

1906
01:52:34,850 --> 01:52:43,719
get right and then it will work alone

1907
01:52:37,369 --> 01:52:43,719
and will you be happy or sad

1908
01:53:27,609 --> 01:53:32,569
or are you planning on taking a

1909
01:53:30,399 --> 01:53:34,519
different non-conventional brush-like

1910
01:53:32,569 --> 01:53:35,988
yeah I would say we're taking a pretty

1911
01:53:34,520 --> 01:53:46,130
non-conventional approach to lighting

1912
01:53:35,988 --> 01:53:52,339
yes it's a unicorn dog any recommended

1913
01:53:46,130 --> 01:53:55,460
programs to use for a newb it's pretty

1914
01:53:52,340 --> 01:53:57,860
open quest up in any question a noob in

1915
01:53:55,460 --> 01:53:59,149
what a noob in programming and when you

1916
01:53:57,859 --> 01:54:04,159
say any recommended programs what do you

1917
01:53:59,149 --> 01:54:07,569
mean like like editors or compilers or

1918
01:54:04,159 --> 01:54:07,569
like what do you mean

1919
01:54:17,269 --> 01:54:27,849
is that metal music coming from the

1920
01:54:20,269 --> 01:54:30,849
stream or am i tripping I hear nothing

1921
01:54:27,849 --> 01:54:30,849
outside

1922
01:54:37,840 --> 01:54:43,270
doctor when you port the game to jei or

1923
01:54:40,359 --> 01:54:45,579
make a port of it in ji once it comes

1924
01:54:43,270 --> 01:54:48,599
out I know we won't be porting the games

1925
01:54:45,579 --> 01:54:52,029
of jei just because I don't think ji

1926
01:54:48,599 --> 01:54:54,159
will be done it well okay even if it

1927
01:54:52,029 --> 01:54:56,500
were done today I'm not going to you

1928
01:54:54,158 --> 01:54:59,948
know go restart the entire programming

1929
01:54:56,500 --> 01:55:01,750
process in that language right if J hey

1930
01:54:59,948 --> 01:55:03,009
I had been done back when we started we

1931
01:55:01,750 --> 01:55:07,060
might have considered just doing it in

1932
01:55:03,010 --> 01:55:10,539
that language but that's not really

1933
01:55:07,060 --> 01:55:13,270
feasible now I assume probably somebody

1934
01:55:10,539 --> 01:55:15,670
will port it to jei and because there's

1935
01:55:13,270 --> 01:55:18,849
people who've done ports to like D and

1936
01:55:15,670 --> 01:55:20,618
rust and other things they get varying

1937
01:55:18,849 --> 01:55:22,329
degrees of through it like I don't know

1938
01:55:20,618 --> 01:55:23,799
that every people always stick with us

1939
01:55:22,329 --> 01:55:26,979
that well because they get the word or

1940
01:55:23,800 --> 01:55:28,420
whatever but also when it's all done

1941
01:55:26,979 --> 01:55:30,039
it'll probably be easier to do a port

1942
01:55:28,420 --> 01:55:31,300
because you could just pour it directly

1943
01:55:30,039 --> 01:55:40,630
and it's not too hard

1944
01:55:31,300 --> 01:55:42,550
so we'll SCH which you think will take

1945
01:55:40,630 --> 01:55:46,060
longer coding the engine or coding an

1946
01:55:42,550 --> 01:55:50,260
actual game um probably coding the

1947
01:55:46,060 --> 01:55:52,119
engine but I don't know that's really

1948
01:55:50,260 --> 01:55:54,610
more about how much stuff we put in the

1949
01:55:52,118 --> 01:55:56,348
game so it's kind of open-ended we can

1950
01:55:54,609 --> 01:55:58,059
certainly choose to make coding the game

1951
01:55:56,349 --> 01:56:02,469
take longer because we can keep adding

1952
01:55:58,060 --> 01:56:04,599
things to the game the engine we don't

1953
01:56:02,469 --> 01:56:07,270
have much more to add right once we have

1954
01:56:04,599 --> 01:56:09,690
lighting and we do some cleanup maybe

1955
01:56:07,270 --> 01:56:12,040
with like creation and pathfinding stuff

1956
01:56:09,689 --> 01:56:14,948
then we're mostly done with anything

1957
01:56:12,039 --> 01:56:16,779
that we would call strictly engine so

1958
01:56:14,948 --> 01:56:18,428
you know there's not a lot of strictly

1959
01:56:16,779 --> 01:56:20,829
engine things we could be doing at this

1960
01:56:18,429 --> 01:56:23,020
point you know we'd have to go start

1961
01:56:20,829 --> 01:56:25,300
operating things like music compression

1962
01:56:23,020 --> 01:56:30,250
or thing you know we'd have to like add

1963
01:56:25,300 --> 01:56:31,360
compression these stuff or let's rebuild

1964
01:56:30,250 --> 01:56:34,149
the software rasterizer

1965
01:56:31,359 --> 01:56:36,789
at some point so there's some things we

1966
01:56:34,149 --> 01:56:41,109
could do that would increase the engine

1967
01:56:36,789 --> 01:56:47,439
workload but you know we've done most of

1968
01:56:41,109 --> 01:56:50,259
the things so really I think mostly what

1969
01:56:47,439 --> 01:56:51,699
we're looking at now is okay you know

1970
01:56:50,260 --> 01:56:53,770
how many hours did we spend on

1971
01:56:51,699 --> 01:56:57,819
encoding 400 hours 500 hours something

1972
01:56:53,770 --> 01:56:59,650
like that and so if we spent like 500

1973
01:56:57,819 --> 01:57:01,000
hours on game programming I'm sorry we

1974
01:56:59,649 --> 01:57:03,639
spent 500 hours an engine programming

1975
01:57:01,000 --> 01:57:05,079
that's what that's you know a couple

1976
01:57:03,640 --> 01:57:07,030
months of full-time programming work

1977
01:57:05,079 --> 01:57:09,189
essentially not very much for someone to

1978
01:57:07,029 --> 01:57:10,779
do you know certainly achievable

1979
01:57:09,189 --> 01:57:12,609
how many months of full-time team

1980
01:57:10,779 --> 01:57:14,619
programming work do we think should go

1981
01:57:12,609 --> 01:57:17,819
into this game you know probably should

1982
01:57:14,619 --> 01:57:20,409
be similar right 500 hours I don't know

1983
01:57:17,819 --> 01:57:23,500
you can only find more things to put

1984
01:57:20,409 --> 01:57:25,359
into a game to make it better and when I

1985
01:57:23,500 --> 01:57:27,010
say put into a game I don't usually mean

1986
01:57:25,359 --> 01:57:28,299
like just adding features or anything

1987
01:57:27,010 --> 01:57:29,800
because adding more features doesn't

1988
01:57:28,300 --> 01:57:31,510
necessarily gain better but you could

1989
01:57:29,800 --> 01:57:33,520
always focus on like Oh could we tune

1990
01:57:31,510 --> 01:57:35,530
this part can we tune that part could we

1991
01:57:33,520 --> 01:57:38,290
change some item balancing here like you

1992
01:57:35,529 --> 01:57:41,979
can usually find stuff to spend your

1993
01:57:38,289 --> 01:57:46,960
time on so I would suspect that it's

1994
01:57:41,979 --> 01:57:48,579
going to be largely up to us it'll

1995
01:57:46,960 --> 01:57:51,329
really depend on how much stuff we want

1996
01:57:48,579 --> 01:57:51,329
to put into the game

1997
01:58:00,939 --> 01:58:07,309
it's a unicorn dog editor for

1998
01:58:04,069 --> 01:58:09,019
programming so if you want to know what

1999
01:58:07,310 --> 01:58:12,260
an inner good is are for programming for

2000
01:58:09,020 --> 01:58:14,320
a new programmer is I would say just use

2001
01:58:12,260 --> 01:58:17,239
the one that's built into Visual Studio

2002
01:58:14,319 --> 01:58:18,619
right because if you're brand new just

2003
01:58:17,239 --> 01:58:20,539
cut down on the number of things you

2004
01:58:18,619 --> 01:58:23,170
have to learn so just use the editor

2005
01:58:20,539 --> 01:58:23,170
that's in Visual Studio

2006
01:58:23,800 --> 01:58:30,560
assuming you're on Windows and build and

2007
01:58:28,069 --> 01:58:33,170
run and edit in one package write

2008
01:58:30,560 --> 01:58:36,140
simplify once you get good enough to

2009
01:58:33,170 --> 01:58:38,720
care about editing you may want to

2010
01:58:36,140 --> 01:58:40,910
consider a more high powered editor like

2011
01:58:38,720 --> 01:58:44,810
for coda or something I use for coder

2012
01:58:40,909 --> 01:58:46,159
and I like that quite a bit so you know

2013
01:58:44,810 --> 01:58:50,210
maybe you want something like that where

2014
01:58:46,159 --> 01:58:53,239
you can customize it and see and make it

2015
01:58:50,210 --> 01:58:55,670
do a lot more stuff for you but you

2016
01:58:53,239 --> 01:58:59,319
don't need to do all that at once right

2017
01:58:55,670 --> 01:58:59,319
you can start out with just the basics

2018
01:59:02,050 --> 01:59:05,289
it can

2019
01:59:07,189 --> 01:59:12,849
Holst eighty do you work on handmade

2020
01:59:09,739 --> 01:59:15,739
here outside the streaming time no I

2021
01:59:12,850 --> 01:59:17,750
there the hard and fast rule on handmade

2022
01:59:15,739 --> 01:59:20,210
here is I'm never allowed to type a

2023
01:59:17,750 --> 01:59:23,180
single line of code that you do not

2024
01:59:20,210 --> 01:59:25,430
watch and I have to explain it so it is

2025
01:59:23,180 --> 01:59:27,619
the slowest possible development process

2026
01:59:25,430 --> 01:59:31,010
you could possibly undertake for a game

2027
01:59:27,619 --> 01:59:33,949
I literally type every single change on

2028
01:59:31,010 --> 01:59:35,780
the stream I explain it every time on

2029
01:59:33,949 --> 01:59:38,239
the stream and I'm not even allowed to

2030
01:59:35,779 --> 01:59:40,369
think about it overtly outside the

2031
01:59:38,239 --> 01:59:42,769
stream so I do no pre-planning

2032
01:59:40,369 --> 01:59:44,930
whatsoever the only things that I do

2033
01:59:42,770 --> 01:59:46,160
outside the stream or when I happen to

2034
01:59:44,930 --> 01:59:47,720
think of something when I'm just like

2035
01:59:46,159 --> 01:59:49,909
walking around doing something else and

2036
01:59:47,720 --> 01:59:51,980
I'm like oh maybe we could use deaf

2037
01:59:49,909 --> 01:59:53,659
fields for lighting like I might just

2038
01:59:51,979 --> 01:59:57,649
think of something and I can't like stop

2039
01:59:53,659 --> 01:59:59,869
myself from doing that but even planning

2040
01:59:57,649 --> 02:00:01,309
has to occur on the stream like you saw

2041
01:59:59,869 --> 02:00:04,039
today where I discussed the lighting and

2042
02:00:01,310 --> 02:00:05,420
stuff so hand made sure you see one

2043
02:00:04,039 --> 02:00:09,739
hundred percent of the development

2044
02:00:05,420 --> 02:00:13,010
process period there is nothing in the

2045
02:00:09,739 --> 02:00:15,800
game development other than like the art

2046
02:00:13,010 --> 02:00:18,760
asset production rate or whatever that

2047
02:00:15,800 --> 02:00:18,760
is not on the stream

2048
02:00:27,029 --> 02:00:31,750
so the real estate that is like if I

2049
02:00:29,380 --> 02:00:34,750
were to do it myself separately from

2050
02:00:31,750 --> 02:00:37,118
handmade hero it would take no more than

2051
02:00:34,750 --> 02:00:38,800
the time that it has taken on stream to

2052
02:00:37,118 --> 02:00:42,149
do but actually probably must look much

2053
02:00:38,800 --> 02:00:42,150
less because I wouldn't explain anything

2054
02:01:16,289 --> 02:01:22,899
gary johansson codeblocks did not was

2055
02:01:19,989 --> 02:01:25,649
not usable when I last tried programming

2056
02:01:22,899 --> 02:01:28,000
Linux which admittedly was 2013

2057
02:01:25,649 --> 02:01:30,519
programming entirely on the next 2013

2058
02:01:28,000 --> 02:01:31,779
2014 because it had a bunch of stuff

2059
02:01:30,520 --> 02:01:34,200
that it couldn't do I don't remember

2060
02:01:31,779 --> 02:01:34,199
what they were

2061
02:01:34,270 --> 02:01:37,810
it was either like you couldn't view

2062
02:01:36,520 --> 02:01:39,640
assembly language to step through

2063
02:01:37,810 --> 02:01:42,550
assembly language or you couldn't do a

2064
02:01:39,640 --> 02:01:44,140
memory window or you couldn't launch a

2065
02:01:42,550 --> 02:01:45,670
debugger that you didn't build inside

2066
02:01:44,140 --> 02:01:47,230
code blocks

2067
02:01:45,670 --> 02:01:48,940
you couldn't debug actually while you

2068
02:01:47,229 --> 02:01:51,039
didn't build inside blocks I don't

2069
02:01:48,939 --> 02:01:52,419
remember what they were but all that I

2070
02:01:51,039 --> 02:01:54,039
have like a list of things you gotta be

2071
02:01:52,420 --> 02:01:55,029
able to do to be usable to bugger and it

2072
02:01:54,039 --> 02:01:56,829
definitely failed

2073
02:01:55,029 --> 02:02:00,159
now whether they've added them since

2074
02:01:56,829 --> 02:02:10,359
then I don't know so you might have to

2075
02:02:00,159 --> 02:02:12,670
recheck about retained and immediate

2076
02:02:10,359 --> 02:02:14,769
mode do you think these paradigm boxes

2077
02:02:12,670 --> 02:02:19,119
work for game code as opposed to engine

2078
02:02:14,770 --> 02:02:21,580
code as well so what I would say about

2079
02:02:19,119 --> 02:02:23,890
immediate and retained mode is that they

2080
02:02:21,579 --> 02:02:26,619
they really are just ways of

2081
02:02:23,890 --> 02:02:30,430
conceptualizing an interface boundary

2082
02:02:26,619 --> 02:02:32,769
and they work everywhere right

2083
02:02:30,430 --> 02:02:42,340
like they're always the lens you can

2084
02:02:32,770 --> 02:02:46,630
look at to determine how your interface

2085
02:02:42,340 --> 02:02:49,960
works does your interface require the

2086
02:02:46,630 --> 02:02:53,920
person on either side of the boundary to

2087
02:02:49,960 --> 02:02:58,029
have a corresponding life time

2088
02:02:53,920 --> 02:03:02,529
management for odd you know objects

2089
02:02:58,029 --> 02:03:04,929
whatever they are I don't really mean

2090
02:03:02,529 --> 02:03:09,250
object in the object-oriented sense I

2091
02:03:04,930 --> 02:03:16,240
just mean any conceptual element that it

2092
02:03:09,250 --> 02:03:19,529
defines or does it not and that's really

2093
02:03:16,239 --> 02:03:23,199
what retained and immediate mode is

2094
02:03:19,529 --> 02:03:25,750
something is has a lot of retention and

2095
02:03:23,199 --> 02:03:28,618
I tend to think of it in terms of just

2096
02:03:25,750 --> 02:03:30,868
the the content of retention

2097
02:03:28,618 --> 02:03:33,899
so saying the same is immediate mode is

2098
02:03:30,868 --> 02:03:35,759
not really a statement about having

2099
02:03:33,899 --> 02:03:38,250
something in particular it's a statement

2100
02:03:35,760 --> 02:03:39,449
about not having something so when I say

2101
02:03:38,250 --> 02:03:44,359
that something is immediate mode what I

2102
02:03:39,448 --> 02:03:46,799
mean is it has low or no retention and

2103
02:03:44,359 --> 02:03:50,908
when I say sometimes at retain mode I

2104
02:03:46,800 --> 02:03:54,539
mean it has high retention and what

2105
02:03:50,908 --> 02:03:57,118
retention is is retention is the idea

2106
02:03:54,539 --> 02:03:58,349
and I don't particularly like this term

2107
02:03:57,118 --> 02:04:03,529
I would prefer a different current but

2108
02:03:58,349 --> 02:04:06,150
it's it's it's unfortunately just what

2109
02:04:03,529 --> 02:04:08,460
was the original terminology when I got

2110
02:04:06,149 --> 02:04:09,750
here right I was not even probably born

2111
02:04:08,460 --> 02:04:10,948
at the time when someone invented the

2112
02:04:09,750 --> 02:04:14,630
term retain mode I know maybe I was

2113
02:04:10,948 --> 02:04:14,629
maybe I was like 10 or something but

2114
02:04:15,289 --> 02:04:24,840
what I need I retention is the degree to

2115
02:04:19,079 --> 02:04:27,359
which the user on the non-reusable

2116
02:04:24,840 --> 02:04:32,219
or the non reused side of the API

2117
02:04:27,359 --> 02:04:35,009
boundary knows about the lifetime of

2118
02:04:32,219 --> 02:04:36,480
something on the reused side of the

2119
02:04:35,010 --> 02:04:43,500
boundary and I should say knows about

2120
02:04:36,479 --> 02:04:46,019
what I really mean is controls so to

2121
02:04:43,500 --> 02:04:48,510
make a simple example of a button let's

2122
02:04:46,020 --> 02:04:55,500
say since retained mode gooeys are

2123
02:04:48,510 --> 02:04:58,349
common let's say I take a API where the

2124
02:04:55,500 --> 02:05:01,469
user of a library so we've got the user

2125
02:04:58,349 --> 02:05:05,069
in the library there's an API boundary

2126
02:05:01,469 --> 02:05:07,889
between them if the user has to create

2127
02:05:05,069 --> 02:05:11,219
and destroy the button as individual

2128
02:05:07,889 --> 02:05:13,889
events then that is a high retention API

2129
02:05:11,219 --> 02:05:16,260
for that button because the user has to

2130
02:05:13,889 --> 02:05:18,510
be in complete control of the existence

2131
02:05:16,260 --> 02:05:20,010
of the button this means that the

2132
02:05:18,510 --> 02:05:22,710
existence of the button is now

2133
02:05:20,010 --> 02:05:26,070
completely mirrored on both sides of the

2134
02:05:22,710 --> 02:05:29,279
boundary in a behavioral sense right

2135
02:05:26,069 --> 02:05:31,229
meaning that the actual event of

2136
02:05:29,279 --> 02:05:32,908
creating and destroying the button has

2137
02:05:31,229 --> 02:05:36,408
to exist on both sides of the API

2138
02:05:32,908 --> 02:05:36,408
boundaries that's high retention

2139
02:05:37,119 --> 02:05:42,640
so a low retention or no retention API

2140
02:05:39,609 --> 02:05:44,589
is one where whenever the user wants

2141
02:05:42,640 --> 02:05:47,230
there to be a button they simply say

2142
02:05:44,590 --> 02:05:48,610
there is a button to the library and if

2143
02:05:47,229 --> 02:05:52,299
they don't say there's a button then

2144
02:05:48,609 --> 02:05:54,909
there isn't a button so now there's no

2145
02:05:52,300 --> 02:05:57,039
retention the event of creating the

2146
02:05:54,909 --> 02:06:00,670
button exists only on the side of the

2147
02:05:57,039 --> 02:06:01,989
library and on the user side they simply

2148
02:06:00,670 --> 02:06:05,260
know whether they wanted a button or not

2149
02:06:01,989 --> 02:06:10,389
on any particular time and just ask for

2150
02:06:05,260 --> 02:06:12,369
that at that time right now these things

2151
02:06:10,390 --> 02:06:14,619
have pluses and minuses but most of the

2152
02:06:12,369 --> 02:06:16,180
time low retention is better and the

2153
02:06:14,619 --> 02:06:18,489
reason that low retention is better is

2154
02:06:16,180 --> 02:06:21,340
because it reduces the degree to which

2155
02:06:18,489 --> 02:06:24,130
you can have errors in the communication

2156
02:06:21,340 --> 02:06:28,029
across the API boundary you know for a

2157
02:06:24,130 --> 02:06:30,699
fact that the user side has existence

2158
02:06:28,029 --> 02:06:32,859
criteria that it is maintaining about

2159
02:06:30,699 --> 02:06:35,439
whether or not there is a button for

2160
02:06:32,859 --> 02:06:39,670
example if the user side wants to show a

2161
02:06:35,439 --> 02:06:42,460
dialog it has to know in its state stuff

2162
02:06:39,670 --> 02:06:44,350
about where it is in its understanding

2163
02:06:42,460 --> 02:06:47,710
of what's going on to know that that

2164
02:06:44,350 --> 02:06:49,510
dialogue had to occur now when that

2165
02:06:47,710 --> 02:06:51,730
dialogue has to occur that's the piece

2166
02:06:49,510 --> 02:06:54,190
of state that actually matters to the

2167
02:06:51,729 --> 02:06:55,479
user side so it is tracking the fact

2168
02:06:54,189 --> 02:06:58,059
that the user is interacting with a

2169
02:06:55,479 --> 02:06:59,829
dialog right now what it doesn't care

2170
02:06:58,060 --> 02:07:03,039
about is the fact that all the things in

2171
02:06:59,829 --> 02:07:05,289
the dialog exist right it's just he

2172
02:07:03,039 --> 02:07:06,970
doesn't want to track that state if

2173
02:07:05,289 --> 02:07:08,710
there's a thousand buttons in the dialog

2174
02:07:06,970 --> 02:07:10,180
box I don't want to track that they all

2175
02:07:08,710 --> 02:07:14,619
exist I just want to track the path

2176
02:07:10,180 --> 02:07:15,850
dialog box exists right and furthermore

2177
02:07:14,619 --> 02:07:17,559
I don't even really want to practice the

2178
02:07:15,850 --> 02:07:19,300
dialog box exist what I really wanted to

2179
02:07:17,560 --> 02:07:22,440
track was that the user is in the mode

2180
02:07:19,300 --> 02:07:22,440
of interaction of the dialog box

2181
02:07:22,500 --> 02:07:31,539
so what then happens is that user if

2182
02:07:29,350 --> 02:07:31,900
it's in oh I'm in dialog box interaction

2183
02:07:31,539 --> 02:07:33,909
mode

2184
02:07:31,899 --> 02:07:35,019
let me tell the library about these

2185
02:07:33,909 --> 02:07:37,899
buttons that should be on the screen

2186
02:07:35,020 --> 02:07:39,880
that should be clickable right the

2187
02:07:37,899 --> 02:07:42,179
library should then be responsible for

2188
02:07:39,880 --> 02:07:44,890
tracking whether those buttons exist and

2189
02:07:42,180 --> 02:07:46,360
when the user stops telling the library

2190
02:07:44,890 --> 02:07:49,170
that were in dialog interaction mode

2191
02:07:46,359 --> 02:07:52,170
those buttons should just get cleaned up

2192
02:07:49,170 --> 02:07:52,170
right

2193
02:07:54,390 --> 02:07:58,900
and so typically when you're shipping a

2194
02:07:57,310 --> 02:08:04,110
library to someone I kind of think of

2195
02:07:58,899 --> 02:08:06,219
that as the better way to design it and

2196
02:08:04,109 --> 02:08:10,389
I think that that's true across

2197
02:08:06,220 --> 02:08:12,460
basically everything if you are talking

2198
02:08:10,390 --> 02:08:14,560
about an API boundary of reuse I think

2199
02:08:12,460 --> 02:08:16,739
to a large extent you want to really be

2200
02:08:14,560 --> 02:08:21,660
careful what things you require

2201
02:08:16,739 --> 02:08:21,659
retention for and which ones you don't

2202
02:08:27,670 --> 02:08:31,880
that's yes so would you write your game

2203
02:08:30,260 --> 02:08:35,000
logic code in immediate motor retained

2204
02:08:31,880 --> 02:08:38,239
mode um so the answer is that it depends

2205
02:08:35,000 --> 02:08:43,279
if you're trying to create an API binary

2206
02:08:38,239 --> 02:08:44,420
there or not right okay and so one of

2207
02:08:43,279 --> 02:08:45,739
the things you'll notice is that we kind

2208
02:08:44,420 --> 02:08:47,119
of did write our game logic code in

2209
02:08:45,739 --> 02:08:48,859
immediate mode if you look at how our

2210
02:08:47,119 --> 02:08:51,170
game logic code is set up right now the

2211
02:08:48,859 --> 02:08:52,779
way that it works as we seem entities in

2212
02:08:51,170 --> 02:08:55,640
we edit them and then we stream them out

2213
02:08:52,779 --> 02:08:58,789
what that means is that the game never

2214
02:08:55,640 --> 02:09:00,770
really updates the main database of

2215
02:08:58,789 --> 02:09:02,989
where everything is stored it never

2216
02:09:00,770 --> 02:09:06,290
really talks about things getting

2217
02:09:02,989 --> 02:09:08,510
deleted or not right what happens is

2218
02:09:06,289 --> 02:09:10,519
just when we do our all of our entity

2219
02:09:08,510 --> 02:09:12,680
work if we want to kill an entity we say

2220
02:09:10,520 --> 02:09:15,680
oh that entity is dead now and then when

2221
02:09:12,680 --> 02:09:19,130
it goes to get stored back it just won't

2222
02:09:15,680 --> 02:09:20,510
get stored back so in a sense we did

2223
02:09:19,130 --> 02:09:24,260
write it in a very immediate mode

2224
02:09:20,510 --> 02:09:27,050
fashion we don't actually go ask the

2225
02:09:24,260 --> 02:09:29,570
game database to delete the entity we

2226
02:09:27,050 --> 02:09:31,730
assume all entities are deleted until we

2227
02:09:29,569 --> 02:09:35,179
hear that they are back right in the

2228
02:09:31,729 --> 02:09:37,369
sense and so I think a lot of that stuff

2229
02:09:35,180 --> 02:09:39,230
will look very immediate mode but the

2230
02:09:37,369 --> 02:09:40,699
point is not to eliminate storing things

2231
02:09:39,229 --> 02:09:42,979
because programs are about storing

2232
02:09:40,699 --> 02:09:45,619
things the point is that at certain API

2233
02:09:42,979 --> 02:09:49,129
boundaries it makes sense for ease of

2234
02:09:45,619 --> 02:09:51,409
use to eliminate or reduce the number of

2235
02:09:49,130 --> 02:09:53,779
things that the person on one side of

2236
02:09:51,409 --> 02:09:57,859
the boundary needs to tell the person on

2237
02:09:53,779 --> 02:09:59,989
the other side about life time another

2238
02:09:57,859 --> 02:10:01,729
way to say it might be if the lifetime

2239
02:09:59,989 --> 02:10:05,239
of an object can be implicit in the

2240
02:10:01,729 --> 02:10:06,009
usage of the API it should be or at

2241
02:10:05,239 --> 02:10:08,899
least consider it

2242
02:10:06,010 --> 02:10:11,539
because forcing lifetime to be explicit

2243
02:10:08,899 --> 02:10:15,710
requires you to have hold a bunch of

2244
02:10:11,539 --> 02:10:17,420
unnecessary handles on one side and it

2245
02:10:15,710 --> 02:10:22,029
requires you to make a bunch of a

2246
02:10:17,420 --> 02:10:22,029
necessary calls to clean things up

2247
02:10:25,670 --> 02:10:30,819
I plan on starting a productive summer a

2248
02:10:27,198 --> 02:10:35,479
40 perspective projection box well game

2249
02:10:30,819 --> 02:10:38,359
okay may I ask you for some tips on

2250
02:10:35,479 --> 02:10:40,579
graphics like how do I utilize graphics

2251
02:10:38,359 --> 02:10:43,448
card the best because it's not optimized

2252
02:10:40,579 --> 02:10:51,469
for 5x5 matrices and it's hard to think

2253
02:10:43,448 --> 02:10:52,939
with other concepts for me I wouldn't

2254
02:10:51,469 --> 02:10:55,039
get too worried about the fact that it's

2255
02:10:52,939 --> 02:10:57,979
not optimized for 5x5 matrices because

2256
02:10:55,039 --> 02:11:02,359
it actually is optimized for 5x5

2257
02:10:57,979 --> 02:11:03,889
matrices is maybe what I'd say there's

2258
02:11:02,359 --> 02:11:05,420
probably some inefficiencies there but

2259
02:11:03,890 --> 02:11:09,050
let me just remind everyone and I think

2260
02:11:05,420 --> 02:11:24,590
I talked about this a long time ago but

2261
02:11:09,050 --> 02:11:28,719
GPUs aren't actually X Y Z W vectors so

2262
02:11:24,590 --> 02:11:31,100
you will oftentimes see stuff on the GPU

2263
02:11:28,719 --> 02:11:36,439
that's like you know

2264
02:11:31,100 --> 02:11:38,900
Veck 4 P Matt 4 I don't remember what

2265
02:11:36,439 --> 02:11:42,319
the name of it is because we use our own

2266
02:11:38,899 --> 02:11:45,859
type dos for these Matt for you know my

2267
02:11:42,319 --> 02:11:49,929
matrix and then you'll see like vex 4

2268
02:11:45,859 --> 02:11:54,559
you know transform point equals Matt

2269
02:11:49,929 --> 02:11:56,319
times P right so you'll see that in a

2270
02:11:54,560 --> 02:12:00,050
shader and you'll think to yourself oh

2271
02:11:56,319 --> 02:12:04,609
well clearly we've got all these vector

2272
02:12:00,050 --> 02:12:08,750
things obviously the you know the GPUs

2273
02:12:04,609 --> 02:12:11,569
ALU is like super optimized for like

2274
02:12:08,750 --> 02:12:13,219
doing these like 4 by 4 matrix

2275
02:12:11,569 --> 02:12:16,549
multiplies and I'm totally screwed

2276
02:12:13,219 --> 02:12:18,859
I go to 5 by 5 the answer is not

2277
02:12:16,550 --> 02:12:20,360
probably the case if you're on like an

2278
02:12:18,859 --> 02:12:23,869
Nvidia card or something like that and

2279
02:12:20,359 --> 02:12:26,359
modern graphics card it's just probably

2280
02:12:23,869 --> 02:12:27,769
not the case why is it not the case well

2281
02:12:26,359 --> 02:12:31,089
it's not the case because you see a lot

2282
02:12:27,770 --> 02:12:34,640
of stuff that's like oh you know colored

2283
02:12:31,090 --> 02:12:36,319
RG you know access just the red and

2284
02:12:34,640 --> 02:12:38,570
green components of something or

2285
02:12:36,319 --> 02:12:40,488
replicate the r component

2286
02:12:38,569 --> 02:12:42,590
out to a bunch of things like you know

2287
02:12:40,488 --> 02:12:44,809
this this color value equals the red

2288
02:12:42,590 --> 02:12:47,539
replicated so a lot of the stuff that

2289
02:12:44,810 --> 02:12:49,639
graphics cards do in shaders a lot of

2290
02:12:47,539 --> 02:12:51,170
the codes that they have to handle works

2291
02:12:49,639 --> 02:12:51,770
out of sub-elements of these sectors

2292
02:12:51,170 --> 02:12:54,859
right

2293
02:12:51,770 --> 02:12:58,340
as a result graphics card design right

2294
02:12:54,859 --> 02:13:03,368
now is not about vectors stored as

2295
02:12:58,340 --> 02:13:03,369
packed XYZ that's not how they work

2296
02:13:04,488 --> 02:13:09,049
similarly typically they're working on a

2297
02:13:06,828 --> 02:13:11,960
raise of like four by four pixels or

2298
02:13:09,050 --> 02:13:14,360
stuff like this which again would not

2299
02:13:11,960 --> 02:13:16,279
fit into that four is very conveniently

2300
02:13:14,359 --> 02:13:17,539
if you don't know what these are these

2301
02:13:16,279 --> 02:13:20,149
could be like depth components or

2302
02:13:17,539 --> 02:13:22,519
whatever right blah blah blah so

2303
02:13:20,149 --> 02:13:27,769
typically what gravity arms actually are

2304
02:13:22,520 --> 02:13:31,070
is they're wide versions of the scaler

2305
02:13:27,770 --> 02:13:32,960
path so typically what happens if this

2306
02:13:31,069 --> 02:13:35,599
is a vector shade if this is a vertex

2307
02:13:32,960 --> 02:13:40,670
shader typically what happens it is not

2308
02:13:35,599 --> 02:13:43,219
running a four-element wide version of

2309
02:13:40,670 --> 02:13:46,389
this shader on one vertex what it's

2310
02:13:43,219 --> 02:13:48,380
doing is running 16 vertices in parallel

2311
02:13:46,389 --> 02:13:52,279
through the same shader

2312
02:13:48,380 --> 02:13:54,078
in a scaler path so the first thing that

2313
02:13:52,279 --> 02:13:56,300
happens in the shader compiler is this

2314
02:13:54,078 --> 02:14:00,859
gets blown out to the full matrix

2315
02:13:56,300 --> 02:14:05,560
multiply scaler right so it's like matte

2316
02:14:00,859 --> 02:14:08,839
you know zero zero dot p 0 plus matte

2317
02:14:05,560 --> 02:14:13,190
zero one has to be it right it blows out

2318
02:14:08,840 --> 02:14:16,400
the full scalar version and then it does

2319
02:14:13,189 --> 02:14:18,348
it for 16 vertices at a time as if each

2320
02:14:16,399 --> 02:14:20,359
vertice was done in scalar vertex time

2321
02:14:18,349 --> 02:14:22,369
scalar so if you want to write a 5 by 5

2322
02:14:20,359 --> 02:14:24,799
matrix multiply go right ahead

2323
02:14:22,368 --> 02:14:27,259
it should pretty much run at the same

2324
02:14:24,800 --> 02:14:29,449
speed and maybe there are some very

2325
02:14:27,260 --> 02:14:30,860
specific things in some some cases where

2326
02:14:29,448 --> 02:14:34,098
you'll get a slight slowdown there but

2327
02:14:30,859 --> 02:14:39,289
it is absolutely not a problem to think

2328
02:14:34,099 --> 02:14:40,179
about a vertex shader as scalar and run

2329
02:14:39,289 --> 02:14:43,479
it that way

2330
02:14:40,179 --> 02:14:43,480
does that help

2331
02:14:53,270 --> 02:14:59,310
and really the only thing that I like

2332
02:14:57,270 --> 02:15:01,620
thinking it through the only thing I can

2333
02:14:59,310 --> 02:15:03,090
think of that you might run into and

2334
02:15:01,619 --> 02:15:05,159
again I'm not an expert on this so take

2335
02:15:03,090 --> 02:15:08,909
it with a grain of salt but I think the

2336
02:15:05,159 --> 02:15:10,079
ALU path like all the arithmetic I think

2337
02:15:08,909 --> 02:15:12,720
you're just fine you'll run at full

2338
02:15:10,079 --> 02:15:14,909
speed the only thing I think you might

2339
02:15:12,720 --> 02:15:19,289
be aware of is I don't know to what

2340
02:15:14,909 --> 02:15:24,899
extent the memory unpack is based around

2341
02:15:19,289 --> 02:15:29,130
X Y Z X Y Z W so some of like the memory

2342
02:15:24,899 --> 02:15:31,229
unpacking might be less good because in

2343
02:15:29,130 --> 02:15:33,029
order to get those five elements things

2344
02:15:31,229 --> 02:15:36,869
out into the right places maybe they

2345
02:15:33,029 --> 02:15:39,029
won't you know so but that's it so I

2346
02:15:36,869 --> 02:15:41,399
think it's just memory unpack is about

2347
02:15:39,029 --> 02:15:44,759
the only thing that might downshift you

2348
02:15:41,399 --> 02:15:52,099
at all but your ALU speed should be fine

2349
02:15:44,760 --> 02:15:52,100
I think

2350
02:15:55,140 --> 02:15:57,829
all right

2351
02:16:05,609 --> 02:16:11,249
if you know what a lot since it was so

2352
02:16:10,078 --> 02:16:20,938
hard to find this thing I'm gonna leave

2353
02:16:11,248 --> 02:16:22,498
that open all right thank you everyone

2354
02:16:20,939 --> 02:16:23,729
for joining me for loves on handmade

2355
02:16:22,498 --> 02:16:25,708
hereit's and a pleasure coding with you

2356
02:16:23,729 --> 02:16:26,969
as always if you would like to follow

2357
02:16:25,708 --> 02:16:28,858
along series at home you can always

2358
02:16:26,969 --> 02:16:31,019
clear to the game on handmade hero org

2359
02:16:28,859 --> 02:16:33,568
and it comes to the source code so that

2360
02:16:31,019 --> 02:16:37,228
you can well so that you can try it

2361
02:16:33,568 --> 02:16:39,028
yourself and play around with it we also

2362
02:16:37,228 --> 02:16:40,260
have a forum site and go to if you want

2363
02:16:39,029 --> 02:16:42,359
support the video series the patreon

2364
02:16:40,260 --> 02:16:44,040
page and go to form so you go to my last

2365
02:16:42,359 --> 02:16:46,019
questions a patreon page and go to

2366
02:16:44,040 --> 02:16:47,670
transport the video series a schedule of

2367
02:16:46,019 --> 02:16:48,929
opposite tweets the schedule so you know

2368
02:16:47,670 --> 02:16:51,079
when we're going to be live so you want

2369
02:16:48,929 --> 02:16:54,058
to catch us live in an episode guide

2370
02:16:51,079 --> 02:16:57,058
that you can use to catch up on past

2371
02:16:54,058 --> 02:16:59,099
episodes that's about it for today I

2372
02:16:57,058 --> 02:17:01,468
will be back tomorrow with more handmade

2373
02:16:59,099 --> 02:17:03,029
hero lighting coding where we'll try to

2374
02:17:01,468 --> 02:17:05,549
get some of those light buffers filled

2375
02:17:03,029 --> 02:17:07,679
up we won't get to actual lighting

2376
02:17:05,549 --> 02:17:09,358
tomorrow because just getting the

2377
02:17:07,679 --> 02:17:12,269
lighting buffers filled properly and

2378
02:17:09,359 --> 02:17:16,679
nipping properly will definitely take a

2379
02:17:12,269 --> 02:17:19,619
full two hours probably more but we will

2380
02:17:16,679 --> 02:17:20,579
get it started and then next weekend

2381
02:17:19,619 --> 02:17:23,819
we'll see if we can get some actual

2382
02:17:20,579 --> 02:17:25,109
lighting working that's about it I hope

2383
02:17:23,818 --> 02:17:27,090
see you back here tomorrow for that

2384
02:17:25,109 --> 02:17:28,408
until then have fun programming and I'll

2385
02:17:27,090 --> 02:17:30,710
see everyone on the Internet take it

2386
02:17:28,408 --> 02:17:30,709
easy everybody

