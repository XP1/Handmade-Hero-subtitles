1
00:00:00,530 --> 00:00:04,650
hello everyone and welcome to hand made

2
00:00:03,120 --> 00:00:10,109
here oh sure we could a complete game

3
00:00:04,650 --> 00:00:13,019
live on stream we wrote the Katy tree

4
00:00:10,109 --> 00:00:15,480
traversal code yesterday the actual code

5
00:00:13,019 --> 00:00:20,129
that we think we want to start debugging

6
00:00:15,480 --> 00:00:23,939
and so today our job is to actually put

7
00:00:20,129 --> 00:00:25,379
our Katy tree into the format that that

8
00:00:23,939 --> 00:00:26,910
code wanted it was a bit of a

9
00:00:25,379 --> 00:00:28,469
snuffleupagus oriented programming

10
00:00:26,910 --> 00:00:30,390
situation which as you know I highly

11
00:00:28,469 --> 00:00:32,399
recommend where we basically said let's

12
00:00:30,390 --> 00:00:34,770
write this routine imagining that the

13
00:00:32,399 --> 00:00:37,439
data format was exactly what we wanted

14
00:00:34,770 --> 00:00:39,140
to make the routine fast or at least as

15
00:00:37,439 --> 00:00:42,030
fast as we could think of at the time

16
00:00:39,140 --> 00:00:45,420
and so now our job is to go actually

17
00:00:42,030 --> 00:00:49,530
make it in that format so I'm gonna go

18
00:00:45,420 --> 00:00:51,510
ahead and get started on that because

19
00:00:49,530 --> 00:00:53,189
until we have a routine that builds the

20
00:00:51,509 --> 00:00:55,229
tree we can't start debugging and

21
00:00:53,189 --> 00:00:57,899
unfortunately yes this does mean we have

22
00:00:55,229 --> 00:01:00,628
to debug two things at once because we

23
00:00:57,899 --> 00:01:02,250
both have to debug the tree build and

24
00:01:00,628 --> 00:01:05,548
debug the raycast

25
00:01:02,250 --> 00:01:08,579
but you know at the very least we should

26
00:01:05,549 --> 00:01:10,618
be able to get something running today

27
00:01:08,579 --> 00:01:12,629
where we can say all right you know it's

28
00:01:10,618 --> 00:01:16,409
not debugged yet but everything's in

29
00:01:12,629 --> 00:01:18,179
place for both the build and the and the

30
00:01:16,409 --> 00:01:20,070
testing now and like you know it doesn't

31
00:01:18,180 --> 00:01:22,470
crash and so on right so we'll have like

32
00:01:20,069 --> 00:01:24,449
a working model but then we've got to

33
00:01:22,469 --> 00:01:26,489
actually debug the logic of it because

34
00:01:24,450 --> 00:01:28,859
there's probably things that we didn't

35
00:01:26,489 --> 00:01:31,169
think of or got wrong since it's a very

36
00:01:28,859 --> 00:01:32,819
delicate situation we're dealing with

37
00:01:31,170 --> 00:01:34,618
here right we're trying to get this

38
00:01:32,819 --> 00:01:39,179
squeezed this down to the smallest

39
00:01:34,618 --> 00:01:42,180
possible size and instruction count and

40
00:01:39,180 --> 00:01:44,759
I think we did an okay job but like it's

41
00:01:42,180 --> 00:01:47,159
not horrible even as it stands before

42
00:01:44,759 --> 00:01:49,829
we've really taken an acht optimization

43
00:01:47,159 --> 00:01:53,460
knock at it yet so I think you know

44
00:01:49,828 --> 00:01:56,429
compared to this guy it's probably going

45
00:01:53,459 --> 00:01:58,109
to be better but you know like we never

46
00:01:56,430 --> 00:02:00,750
know so that's why we're gonna have to

47
00:01:58,109 --> 00:02:05,099
see through actual debugging and running

48
00:02:00,750 --> 00:02:07,950
of it how it actually performs all right

49
00:02:05,099 --> 00:02:10,649
so what we need to do is we need to

50
00:02:07,950 --> 00:02:12,689
produce a version of split box and I

51
00:02:10,649 --> 00:02:13,568
might just leave the existing split box

52
00:02:12,689 --> 00:02:15,759
in place

53
00:02:13,568 --> 00:02:17,708
at the moment and just write a new one

54
00:02:15,759 --> 00:02:20,949
so like this is gonna be called like

55
00:02:17,709 --> 00:02:23,348
split KD or whatever and this one will

56
00:02:20,949 --> 00:02:24,878
just do it's gonna be substant Li the

57
00:02:23,348 --> 00:02:26,828
same routine but I just don't want to

58
00:02:24,878 --> 00:02:29,590
have to deal in line with making both of

59
00:02:26,829 --> 00:02:32,139
them and so I want to leave the old one

60
00:02:29,590 --> 00:02:34,359
just for reference purposes so we can

61
00:02:32,139 --> 00:02:35,799
still run it and then later when we

62
00:02:34,359 --> 00:02:37,299
actually have this one debugged and

63
00:02:35,799 --> 00:02:39,370
we're happy with it if it is in fact

64
00:02:37,299 --> 00:02:41,650
faster we'll just vape the old one and

65
00:02:39,370 --> 00:02:43,509
use this one but I don't want to have to

66
00:02:41,650 --> 00:02:46,090
have them both operating in place that's

67
00:02:43,509 --> 00:02:49,179
not my idea of a good time at this point

68
00:02:46,090 --> 00:02:50,950
so we're just gonna do this and so we're

69
00:02:49,180 --> 00:02:52,510
gonna come through it's gonna do exactly

70
00:02:50,949 --> 00:02:54,158
the same pass we're not really gonna

71
00:02:52,509 --> 00:02:55,688
change how we're building the tree yet

72
00:02:54,158 --> 00:02:57,968
because I don't want to change the

73
00:02:55,688 --> 00:03:01,239
metric yet so I just want to isolate

74
00:02:57,968 --> 00:03:03,789
like it's like just to put everything

75
00:03:01,239 --> 00:03:06,400
out there we don't yet know if we could

76
00:03:03,789 --> 00:03:08,530
do a better job dividing our boxes up

77
00:03:06,400 --> 00:03:10,180
into Katy trees too so that's a separate

78
00:03:08,530 --> 00:03:13,030
thing we can improve but right now we

79
00:03:10,180 --> 00:03:16,060
just want to improve for a given KD tree

80
00:03:13,030 --> 00:03:18,370
how good can we test that tree that's

81
00:03:16,060 --> 00:03:20,829
what we're trying to do now so I want to

82
00:03:18,370 --> 00:03:23,500
leave the metric exactly the same I

83
00:03:20,829 --> 00:03:26,530
don't want to change anything about that

84
00:03:23,500 --> 00:03:28,799
what I want to do instead is just go

85
00:03:26,530 --> 00:03:31,870
ahead and try to divide everything up

86
00:03:28,799 --> 00:03:40,719
the same way and see what happens

87
00:03:31,870 --> 00:03:42,938
based on the splitting okay

88
00:03:40,719 --> 00:03:46,560
so one of the things that's a little

89
00:03:42,938 --> 00:03:46,560
weird about this

90
00:03:53,120 --> 00:03:56,218
so one of the things that's a little

91
00:03:54,900 --> 00:04:00,650
weird about this though even as I'm

92
00:03:56,218 --> 00:04:04,650
saying that is we can't really do

93
00:04:00,650 --> 00:04:07,829
exactly that although I guess we sort of

94
00:04:04,650 --> 00:04:17,418
could depending on how we want to

95
00:04:07,829 --> 00:04:22,108
restructure that routine so hmm so

96
00:04:17,418 --> 00:04:23,909
here's an interesting thought one of the

97
00:04:22,108 --> 00:04:25,620
reasons like one of the things we were

98
00:04:23,910 --> 00:04:27,360
doing before is we were allowing

99
00:04:25,620 --> 00:04:28,530
overlapping rectangles and I hadn't

100
00:04:27,360 --> 00:04:29,460
really thought about before because if

101
00:04:28,529 --> 00:04:31,168
you look at this here

102
00:04:29,459 --> 00:04:33,829
we don't go out of our way to ensure

103
00:04:31,168 --> 00:04:37,079
that we actually split anything right so

104
00:04:33,829 --> 00:04:39,359
we may have a place where we cut a box

105
00:04:37,079 --> 00:04:42,389
like literally in half so it would be on

106
00:04:39,360 --> 00:04:45,120
both sides of the thing and we could

107
00:04:42,389 --> 00:04:48,870
just include that thing on both sides if

108
00:04:45,120 --> 00:04:51,660
we wanted to but again that gets more

109
00:04:48,870 --> 00:04:53,848
expensive so we could also do something

110
00:04:51,660 --> 00:04:55,590
where as we go down the KD tree we just

111
00:04:53,848 --> 00:05:00,000
let the thing test each time in other

112
00:04:55,589 --> 00:05:04,948
words if we wanted to when we look at

113
00:05:00,000 --> 00:05:07,589
the actual hit testing so this this here

114
00:05:04,949 --> 00:05:10,009
what we could do is just make this be a

115
00:05:07,589 --> 00:05:13,619
while loop and have it happen every time

116
00:05:10,009 --> 00:05:16,949
you know I'm saying so we could actually

117
00:05:13,620 --> 00:05:19,769
do that and then this would just be an

118
00:05:16,949 --> 00:05:24,288
if its own if that's totally separate

119
00:05:19,769 --> 00:05:27,889
right and I guess I don't really know

120
00:05:24,288 --> 00:05:27,889
what to make of that

121
00:05:29,449 --> 00:05:36,180
that's a really tough call because we

122
00:05:34,079 --> 00:05:38,098
probably would need to test it both ways

123
00:05:36,180 --> 00:05:41,699
to really know which one we should do

124
00:05:38,098 --> 00:05:45,478
because in one case any time you split a

125
00:05:41,699 --> 00:05:47,930
box you are adding a check to either

126
00:05:45,478 --> 00:05:47,930
side

127
00:05:52,379 --> 00:05:58,300
but on the other hand if you do it this

128
00:05:55,209 --> 00:06:00,879
way you're doing leaf checks possibly

129
00:05:58,300 --> 00:06:04,889
much earlier than you should and so you

130
00:06:00,879 --> 00:06:07,240
may be wasting time with those checks

131
00:06:04,889 --> 00:06:09,579
when you would have found a much closer

132
00:06:07,240 --> 00:06:17,560
hit and never had to do them if they

133
00:06:09,579 --> 00:06:20,579
were actually placed into the tree so

134
00:06:17,560 --> 00:06:20,579
that's a tough call

135
00:06:28,899 --> 00:06:46,839
gosh that's a tough call and I'm not

136
00:06:35,120 --> 00:06:50,718
sure which way I want to do that I mean

137
00:06:46,839 --> 00:06:54,019
my gut instinct says look you probably

138
00:06:50,718 --> 00:06:56,839
don't want to proliferate boxes so maybe

139
00:06:54,019 --> 00:06:58,490
you would put this up and just always

140
00:06:56,839 --> 00:07:00,049
have the ability to check them so

141
00:06:58,490 --> 00:07:02,120
they're basically loose bounds and

142
00:07:00,050 --> 00:07:04,879
anything that can't be sorted into one

143
00:07:02,120 --> 00:07:07,009
side of the other comes up here you know

144
00:07:04,879 --> 00:07:09,229
that seems reasonable on the other hand

145
00:07:07,009 --> 00:07:12,050
there's a certain purity to saying look

146
00:07:09,228 --> 00:07:13,158
we only do this side of the branch when

147
00:07:12,050 --> 00:07:15,770
we get down to the bottom of the tree

148
00:07:13,158 --> 00:07:19,069
that implies that like hey a lot of the

149
00:07:15,769 --> 00:07:22,098
time you you have less unpredictable

150
00:07:19,069 --> 00:07:24,080
branching perhaps right because now

151
00:07:22,098 --> 00:07:26,810
instead of this unpredictable branch

152
00:07:24,079 --> 00:07:38,538
happening every time you walk down the

153
00:07:26,810 --> 00:07:41,240
tree it only happens that one time so I

154
00:07:38,538 --> 00:07:48,709
guess you know honestly I guess I might

155
00:07:41,240 --> 00:07:51,348
say like let's just split the boxes I'm

156
00:07:48,709 --> 00:07:52,968
really torn like the other reason I

157
00:07:51,348 --> 00:07:54,500
don't like that idea is that I don't

158
00:07:52,968 --> 00:07:55,218
know if there's really much of a bound

159
00:07:54,500 --> 00:07:58,728
to it

160
00:07:55,218 --> 00:08:03,379
like you know how many times are these

161
00:07:58,728 --> 00:08:05,360
boxes gonna get split up right so let's

162
00:08:03,379 --> 00:08:07,310
see I mean let's just see what would

163
00:08:05,360 --> 00:08:11,718
happen here if I was going to change

164
00:08:07,310 --> 00:08:15,740
that aspect of it right so let's suppose

165
00:08:11,718 --> 00:08:17,750
that I did this so in here when we come

166
00:08:15,740 --> 00:08:20,060
through this part of the routine let's

167
00:08:17,750 --> 00:08:24,050
suppose I did something more like this

168
00:08:20,060 --> 00:08:26,990
so I said like all right while leaf

169
00:08:24,050 --> 00:08:33,370
index is less than one past last leaf

170
00:08:26,990 --> 00:08:33,370
index then do the thing right oops

171
00:08:33,860 --> 00:08:39,570
so you know maybe it goes through and it

172
00:08:36,960 --> 00:08:43,379
does that so that everyone if they want

173
00:08:39,570 --> 00:08:48,240
to can have leaves in them and then in

174
00:08:43,379 --> 00:08:51,049
here we would just say okay if we cannot

175
00:08:48,240 --> 00:08:55,769
you know if we cannot go any further

176
00:08:51,049 --> 00:08:58,409
down the side we're going down then we

177
00:08:55,769 --> 00:09:00,319
you know we stop and that would just be

178
00:08:58,409 --> 00:09:06,360
something we would test

179
00:09:00,320 --> 00:09:08,310
I guess separately right so I'm trying

180
00:09:06,360 --> 00:09:13,649
to think how we would want to do that

181
00:09:08,309 --> 00:09:16,679
exactly because it means we would

182
00:09:13,649 --> 00:09:18,750
probably want to store one additional

183
00:09:16,679 --> 00:09:21,269
bit right that just says do you keep

184
00:09:18,750 --> 00:09:23,490
going and we would look at that so we

185
00:09:21,269 --> 00:09:25,079
come through here we do this loop on all

186
00:09:23,490 --> 00:09:28,200
of the things we test all of the things

187
00:09:25,080 --> 00:09:31,440
we have to test right to produce a new

188
00:09:28,200 --> 00:09:36,900
hit for this region and then when we get

189
00:09:31,440 --> 00:09:38,520
down here we would do a we would just

190
00:09:36,899 --> 00:09:41,759
need to know if this thing has sides

191
00:09:38,519 --> 00:09:46,559
right if things this thing has sides at

192
00:09:41,759 --> 00:09:51,539
all and I guess what we could say is the

193
00:09:46,559 --> 00:09:57,799
sides if a side is literally zero then

194
00:09:51,539 --> 00:09:57,799
it wouldn't then it doesn't exist right

195
00:10:02,328 --> 00:10:09,938
so we could just test that right we

196
00:10:06,889 --> 00:10:13,579
could just test that in other words if

197
00:10:09,938 --> 00:10:17,719
whatever the Kati thing was for this

198
00:10:13,578 --> 00:10:21,969
when we look it up like we're gonna go

199
00:10:17,720 --> 00:10:21,970
grab the curse tack value here right

200
00:10:30,169 --> 00:10:34,769
so you know what no because we we stuck

201
00:10:33,028 --> 00:10:36,570
the curse the app so no that won't work

202
00:10:34,769 --> 00:10:39,360
the reason that won't work is because

203
00:10:36,570 --> 00:10:41,790
the curse act value there is what use is

204
00:10:39,360 --> 00:10:50,070
what is used to determine the leaf index

205
00:10:41,789 --> 00:10:52,259
in the case where we I mean here we go

206
00:10:50,070 --> 00:10:53,910
we actually just used the same index

207
00:10:52,259 --> 00:10:56,879
right because either it's referring to

208
00:10:53,909 --> 00:11:00,000
Lisa or it's not so that wouldn't really

209
00:10:56,879 --> 00:11:02,639
work and to be fair we probably could

210
00:11:00,000 --> 00:11:05,639
make it work because we have room and we

211
00:11:02,639 --> 00:11:09,778
know you you have some extra you know

212
00:11:05,639 --> 00:11:12,679
we've got first leaf index in here and I

213
00:11:09,778 --> 00:11:16,559
think we're currently not using it right

214
00:11:12,679 --> 00:11:19,889
so we could use first leaf index instead

215
00:11:16,559 --> 00:11:21,299
and I almost want to say that's not

216
00:11:19,889 --> 00:11:25,439
actually used anywhere right like in

217
00:11:21,299 --> 00:11:30,990
other words if I compile this code let

218
00:11:25,440 --> 00:11:34,290
me just get rid of split KD here there

219
00:11:30,990 --> 00:11:37,110
we go um so if I compile this code and

220
00:11:34,289 --> 00:11:40,379
and I were to remove first leaf index

221
00:11:37,110 --> 00:11:43,919
right so that goes away nobody's

222
00:11:40,379 --> 00:11:47,458
actually doing anything with it right so

223
00:11:43,919 --> 00:11:54,208
we could actually encode the leaf and

224
00:11:47,458 --> 00:11:56,609
leaf count in there directly and so we

225
00:11:54,208 --> 00:11:58,619
can do it the other way it's just yeah I

226
00:11:56,610 --> 00:12:01,080
really wish I had an idea about this I'm

227
00:11:58,620 --> 00:12:04,230
just really I'm just really not sure

228
00:12:01,080 --> 00:12:05,790
which one to do and I don't really want

229
00:12:04,230 --> 00:12:07,110
to have to write both but all I can

230
00:12:05,789 --> 00:12:08,519
think of is it seems like you'd have to

231
00:12:07,110 --> 00:12:10,019
like it seems like you'd have to write

232
00:12:08,519 --> 00:12:11,939
both and just see which one was faster

233
00:12:10,019 --> 00:12:18,419
because I don't see much way of not

234
00:12:11,940 --> 00:12:21,660
doing that I mean right so I want to say

235
00:12:18,419 --> 00:12:23,639
that what we probably let let's I guess

236
00:12:21,659 --> 00:12:25,708
let's do it let's just do it this way so

237
00:12:23,639 --> 00:12:28,139
let's let's do it this way let's say and

238
00:12:25,708 --> 00:12:30,000
here what we do is we say all right so

239
00:12:28,139 --> 00:12:34,319
there's a separate thing called leaf

240
00:12:30,000 --> 00:12:40,429
index right and what we do is we say in

241
00:12:34,320 --> 00:12:43,590
here we're gonna do the leaf index from

242
00:12:40,429 --> 00:12:45,629
up to the one past leaf index by

243
00:12:43,590 --> 00:12:49,379
doing the leaf index leaf count bit

244
00:12:45,629 --> 00:12:51,450
right and what we could do is just have

245
00:12:49,379 --> 00:12:53,549
both of these things be values so

246
00:12:51,450 --> 00:12:56,009
presumably we could do something where

247
00:12:53,549 --> 00:12:58,349
we just say all right that's what we've

248
00:12:56,009 --> 00:13:00,299
got here we don't save the leaf count

249
00:12:58,350 --> 00:13:03,540
because nobody cares what the leaf count

250
00:13:00,299 --> 00:13:09,479
is and then what we do is in here we

251
00:13:03,539 --> 00:13:13,169
just do a while leaf index is less than

252
00:13:09,480 --> 00:13:20,730
one passed laughs last leaf index then

253
00:13:13,169 --> 00:13:27,959
we do our loop and then in here where we

254
00:13:20,730 --> 00:13:29,850
do like curse stock value stuff right in

255
00:13:27,960 --> 00:13:32,340
here where we do that and we do our well

256
00:13:29,850 --> 00:13:35,129
depth bit this is just gonna be a

257
00:13:32,340 --> 00:13:40,980
different if statement this is gonna be

258
00:13:35,129 --> 00:13:43,529
if the leaf index is zero right or sorry

259
00:13:40,980 --> 00:13:47,430
it's the opposite way round I guess

260
00:13:43,529 --> 00:13:48,750
right so well no actually cuz that's

261
00:13:47,429 --> 00:13:50,009
just it's just whether you wanted to set

262
00:13:48,750 --> 00:13:52,200
it has nothing to do with the leaf index

263
00:13:50,009 --> 00:13:58,740
at that point I guess so

264
00:13:52,200 --> 00:14:03,080
yeah in here the leaf index one passed

265
00:13:58,740 --> 00:14:06,950
last if index is just unpacking these

266
00:14:03,080 --> 00:14:06,950
first leaf index

267
00:14:25,039 --> 00:14:32,838
because at this point we still have it

268
00:14:27,698 --> 00:14:34,909
right yeah so I guess the problem but

269
00:14:32,839 --> 00:14:38,060
the problem we would have here is when

270
00:14:34,909 --> 00:14:42,439
we pack that we would have nowhere for

271
00:14:38,059 --> 00:14:45,289
it to go so we'd end up looking at the

272
00:14:42,440 --> 00:14:46,699
KD again all right all right I give up I

273
00:14:45,289 --> 00:14:49,159
give up

274
00:14:46,698 --> 00:14:51,289
I'm officially just going to say look

275
00:14:49,159 --> 00:14:53,629
you can't do that you have to split

276
00:14:51,289 --> 00:14:55,149
boxes just with them if you have to it's

277
00:14:53,629 --> 00:15:06,019
not my problem anymore

278
00:14:55,149 --> 00:15:07,759
right what was that if zero okay okay so

279
00:15:06,019 --> 00:15:09,980
I'm gonna say yeah we're just because

280
00:15:07,759 --> 00:15:13,068
there so there's just not enough room on

281
00:15:09,980 --> 00:15:15,050
the stack at that point and I can't

282
00:15:13,068 --> 00:15:16,669
think of anything obvious to do there I

283
00:15:15,049 --> 00:15:18,620
think we're just gonna leave it this way

284
00:15:16,669 --> 00:15:20,328
cuz it's fairly compact this way and

285
00:15:18,620 --> 00:15:22,669
doesn't require re looking up anything

286
00:15:20,328 --> 00:15:24,799
so I'm just gonna say that's what we're

287
00:15:22,669 --> 00:15:26,448
gonna do for now and then we'll look and

288
00:15:24,799 --> 00:15:30,620
see if maybe we need to do something

289
00:15:26,448 --> 00:15:32,809
else later but that just that was enough

290
00:15:30,620 --> 00:15:36,589
for me to say okay we're gonna start

291
00:15:32,809 --> 00:15:39,078
with the we're gonna start with one that

292
00:15:36,589 --> 00:15:41,000
that isn't allowed to do that all right

293
00:15:39,078 --> 00:15:42,799
so let's go ahead and do split KD and

294
00:15:41,000 --> 00:15:44,448
what that means is if you split a box

295
00:15:42,799 --> 00:15:47,659
you've got to split the box in half

296
00:15:44,448 --> 00:15:48,889
along the KD axis if you can't figure

297
00:15:47,659 --> 00:15:50,389
out a way not to and we can make this

298
00:15:48,889 --> 00:15:55,269
routine smarter so it tries not to do

299
00:15:50,389 --> 00:15:59,870
that but then it sends it to either side

300
00:15:55,269 --> 00:16:02,389
right so that's what's gonna happen so

301
00:15:59,870 --> 00:16:04,310
yeah and again one of the things we

302
00:16:02,389 --> 00:16:06,379
should keep in mind here too like I said

303
00:16:04,309 --> 00:16:08,119
it's that like this is a totally stupid

304
00:16:06,379 --> 00:16:13,448
in fact we should even put this here

305
00:16:08,120 --> 00:16:21,110
like to do Casey this is a pretty stupid

306
00:16:13,448 --> 00:16:24,109
k/d splitter we should look for better

307
00:16:21,110 --> 00:16:26,610
fast metrics for picking the split plane

308
00:16:24,110 --> 00:16:34,960
right

309
00:16:26,610 --> 00:16:37,360
um so yeah I think I think we now just

310
00:16:34,960 --> 00:16:39,610
need to rewrite this routine and make

311
00:16:37,360 --> 00:16:42,460
sure that this thing splits in a way

312
00:16:39,610 --> 00:16:46,149
that we we like I'm going to probably

313
00:16:42,460 --> 00:16:47,500
rewrite this slightly and the reason

314
00:16:46,149 --> 00:16:51,759
that I'm going to rewrite this slightly

315
00:16:47,500 --> 00:16:55,210
is because I want everything to be

316
00:16:51,759 --> 00:17:01,389
handled sort of in a more logical place

317
00:16:55,210 --> 00:17:03,639
without having to be sort of partially

318
00:17:01,389 --> 00:17:06,039
in line and partially not so think of

319
00:17:03,639 --> 00:17:09,970
the first thing I want to do is say all

320
00:17:06,039 --> 00:17:13,119
right there's a KD index and what I want

321
00:17:09,970 --> 00:17:15,430
is the KD index to start off be ito it's

322
00:17:13,119 --> 00:17:18,250
it's an axis I want the KT index to

323
00:17:15,430 --> 00:17:20,529
start off saying no split so the KT

324
00:17:18,250 --> 00:17:25,440
index of three is like it's not split

325
00:17:20,529 --> 00:17:28,809
this node is not a splitting node right

326
00:17:25,440 --> 00:17:31,809
then what I'm gonna go do is say in each

327
00:17:28,809 --> 00:17:34,000
of these we're just going to record what

328
00:17:31,809 --> 00:17:36,899
the split actually would be and then

329
00:17:34,000 --> 00:17:41,980
we're going to do the split later right

330
00:17:36,900 --> 00:17:44,470
so in here whatever this you know

331
00:17:41,980 --> 00:17:46,420
whatever this classifying is here we're

332
00:17:44,470 --> 00:17:48,190
we're gonna let it happen twice for now

333
00:17:46,420 --> 00:17:50,230
and again this is just to try and keep

334
00:17:48,190 --> 00:17:51,519
the complexity down for a little bit and

335
00:17:50,230 --> 00:18:00,480
we can worry about building these

336
00:17:51,519 --> 00:18:00,480
quickly later on so I'm not sure

337
00:18:07,278 --> 00:18:32,730
I'm not sure if we really need to do

338
00:18:10,109 --> 00:18:34,859
much other than say okay so this yeah

339
00:18:32,730 --> 00:18:37,740
alright so going through here you can

340
00:18:34,859 --> 00:18:38,308
see the counts an account a and count B

341
00:18:37,740 --> 00:18:40,470
right

342
00:18:38,308 --> 00:18:42,058
and in this case we're basically saying

343
00:18:40,470 --> 00:18:43,740
look if this was a split that we're

344
00:18:42,058 --> 00:18:46,558
going to use then we'll just break out

345
00:18:43,740 --> 00:18:48,269
and I'll call the KT index so I'm like

346
00:18:46,558 --> 00:18:50,639
I'm literally just gonna copy this this

347
00:18:48,269 --> 00:18:52,740
exact thing and say for now we're just

348
00:18:50,640 --> 00:18:55,440
gonna do it this way if we found a

349
00:18:52,740 --> 00:18:58,380
reasonable split we're gonna split and

350
00:18:55,440 --> 00:19:01,490
we're gonna record which which one it

351
00:18:58,380 --> 00:19:04,140
was right so here's the dim index right

352
00:19:01,490 --> 00:19:13,319
and we're just gonna record that dim

353
00:19:04,140 --> 00:19:15,149
index right and that's the one we're

354
00:19:13,319 --> 00:19:18,569
going to split on then in here we can

355
00:19:15,148 --> 00:19:20,759
basically say okay if the KT index

356
00:19:18,569 --> 00:19:24,000
equals three then we know that we did

357
00:19:20,759 --> 00:19:27,990
not split right so this is actually

358
00:19:24,000 --> 00:19:29,700
split false and otherwise we know that

359
00:19:27,990 --> 00:19:31,740
we did actually split and we can also

360
00:19:29,700 --> 00:19:34,140
assert that the KT index is greater than

361
00:19:31,740 --> 00:19:38,250
equal to 0 and the KT index is less than

362
00:19:34,140 --> 00:19:39,870
or equal to 3 sorry - when we get in

363
00:19:38,250 --> 00:19:42,329
here because it has to be one of those

364
00:19:39,869 --> 00:19:45,359
it has to be one of the dimensions we

365
00:19:42,329 --> 00:19:49,759
actually know about so next we would

366
00:19:45,359 --> 00:19:52,319
basically say okay let's move into the

367
00:19:49,759 --> 00:19:54,390
into the body of this the thing that

368
00:19:52,319 --> 00:20:00,240
actually does the splits so this is

369
00:19:54,390 --> 00:20:06,679
going to be in here and this part here

370
00:20:00,240 --> 00:20:08,880
is the nan splitting part right and

371
00:20:06,679 --> 00:20:10,288
these will have to get rewritten because

372
00:20:08,880 --> 00:20:12,960
they're not doing what they should be

373
00:20:10,288 --> 00:20:14,579
doing at the moment so we also would put

374
00:20:12,960 --> 00:20:18,930
this in here

375
00:20:14,579 --> 00:20:22,679
okay and so now what we need to do is

376
00:20:18,930 --> 00:20:25,980
think more about what the actual stuff

377
00:20:22,680 --> 00:20:30,420
we need to write into these into the

378
00:20:25,980 --> 00:20:32,579
sides section actually contains so we

379
00:20:30,420 --> 00:20:34,860
don't really know how that's gonna work

380
00:20:32,579 --> 00:20:37,500
yet and the only way we can know is to

381
00:20:34,859 --> 00:20:39,599
go back and reread our routine and see

382
00:20:37,500 --> 00:20:42,900
what is the actual information it wants

383
00:20:39,599 --> 00:20:44,699
encoded in there specifically so when it

384
00:20:42,900 --> 00:20:46,800
comes through and tests one of these

385
00:20:44,700 --> 00:20:48,600
things what it's going to do is it's

386
00:20:46,799 --> 00:20:51,659
going to push on to the KT stack some

387
00:20:48,599 --> 00:20:55,379
piece of information that it received

388
00:20:51,660 --> 00:20:59,430
right and then it's gonna unpack things

389
00:20:55,380 --> 00:21:01,200
like the leaf count and like the node

390
00:20:59,430 --> 00:21:08,970
index like that sort of stuff that it

391
00:21:01,200 --> 00:21:12,110
needs it's gonna unpack that and things

392
00:21:08,970 --> 00:21:17,579
like the plain D that sort of thing so

393
00:21:12,109 --> 00:21:23,189
inside those sides we need two things we

394
00:21:17,579 --> 00:21:27,439
need to pack our plain D and our KD

395
00:21:23,190 --> 00:21:35,370
index and then we need to pack our

396
00:21:27,440 --> 00:21:37,590
child's node index and our child's leaf

397
00:21:35,369 --> 00:21:40,939
count and our the node index will

398
00:21:37,589 --> 00:21:47,519
actually be the leaf index if this is a

399
00:21:40,940 --> 00:21:50,519
leaf node right so what that means is

400
00:21:47,519 --> 00:21:55,349
that this routine definitely gets a

401
00:21:50,519 --> 00:21:59,160
little more complicated because what

402
00:21:55,349 --> 00:22:03,089
will actually happen here is this KD

403
00:21:59,160 --> 00:22:06,420
tree node for the sides that needs to

404
00:22:03,089 --> 00:22:09,689
not be passed in anymore so what's

405
00:22:06,420 --> 00:22:16,110
actually gonna happen is when we do this

406
00:22:09,690 --> 00:22:18,600
whole garbage experience we don't

407
00:22:16,109 --> 00:22:20,729
actually want to create a container node

408
00:22:18,599 --> 00:22:23,159
until we actually think we're gonna

409
00:22:20,730 --> 00:22:26,130
split this thing and then once we

410
00:22:23,160 --> 00:22:30,769
actually split it we need to see what

411
00:22:26,130 --> 00:22:34,230
the what the sides say we should pack

412
00:22:30,769 --> 00:22:36,480
right but we don't actually want to have

413
00:22:34,230 --> 00:22:39,779
one of those at the start because if we

414
00:22:36,480 --> 00:22:43,019
don't so if we if we're on this side of

415
00:22:39,779 --> 00:22:45,240
things then all we want to do is pack

416
00:22:43,019 --> 00:22:47,548
these up like we're doing here and then

417
00:22:45,240 --> 00:22:50,490
ignore all of this like none of that

418
00:22:47,548 --> 00:22:52,650
wants to happen and instead what happens

419
00:22:50,490 --> 00:22:54,298
is we have like a result parameter that

420
00:22:52,650 --> 00:22:58,950
we pack back so we're gonna do like a

421
00:22:54,298 --> 00:23:03,900
pack and we're gonna send back to the

422
00:22:58,950 --> 00:23:06,298
other side right so here you can see us

423
00:23:03,900 --> 00:23:09,240
passing back the plain D and then the

424
00:23:06,298 --> 00:23:11,400
sides information right so what we

425
00:23:09,240 --> 00:23:13,500
essentially want and now you can start

426
00:23:11,400 --> 00:23:16,048
to see the shape of this routine more

427
00:23:13,500 --> 00:23:18,839
clearly is there's going to be a return

428
00:23:16,048 --> 00:23:22,288
value here that's like oh and actually

429
00:23:18,839 --> 00:23:28,048
split is now irrelevant there's gonna be

430
00:23:22,288 --> 00:23:30,450
like a pack value right and the pack

431
00:23:28,048 --> 00:23:33,119
value is going to get returned to the

432
00:23:30,450 --> 00:23:36,509
parent because that's what they need to

433
00:23:33,119 --> 00:23:41,308
put in their side in their side array

434
00:23:36,509 --> 00:23:44,940
right so now it seems pretty reasonable

435
00:23:41,308 --> 00:23:47,308
like this all seems fine to me

436
00:23:44,940 --> 00:23:49,620
so in here you can see what we would

437
00:23:47,308 --> 00:23:53,759
need to pack is we need to pack the leaf

438
00:23:49,619 --> 00:23:59,339
count and the node index and the

439
00:23:53,759 --> 00:24:03,269
obviously we're always packing in the KD

440
00:23:59,339 --> 00:24:06,000
index pattern and the plane test pattern

441
00:24:03,269 --> 00:24:10,168
so the Katie index pattern and the plane

442
00:24:06,000 --> 00:24:15,538
test pattern always get packed in by the

443
00:24:10,169 --> 00:24:20,900
parent so in here we only need to pack

444
00:24:15,538 --> 00:24:23,900
the leaf count in the node index right

445
00:24:20,900 --> 00:24:23,900
yeah

446
00:24:26,099 --> 00:24:31,959
so since those packs will actually

447
00:24:29,140 --> 00:24:34,028
always be the same I want to say we can

448
00:24:31,960 --> 00:24:38,798
probably do this a little bit

449
00:24:34,028 --> 00:24:40,960
differently which is to say that in here

450
00:24:38,798 --> 00:24:44,379
we can produce the pack value in one

451
00:24:40,960 --> 00:24:51,190
stable location and then we can deal

452
00:24:44,380 --> 00:24:55,778
with the like we can deal with the

453
00:24:51,190 --> 00:24:59,380
packing by saying look here's the note

454
00:24:55,778 --> 00:25:03,609
index to pack here's the leaf count to

455
00:24:59,380 --> 00:25:06,519
pack right and so in here we know it's

456
00:25:03,609 --> 00:25:18,250
source count so leaf count equals source

457
00:25:06,519 --> 00:25:20,980
count ah so we know there's a safe

458
00:25:18,250 --> 00:25:22,329
truncate to u8 so we're gonna source has

459
00:25:20,980 --> 00:25:24,519
to be packed because we know that if

460
00:25:22,329 --> 00:25:26,349
it's greater than 4 we're gonna try we

461
00:25:24,519 --> 00:25:30,690
want to watch to make sure that we

462
00:25:26,349 --> 00:25:34,269
actually split anything I guess I

463
00:25:30,690 --> 00:25:36,070
suppose in theory I wonder if this is a

464
00:25:34,269 --> 00:25:37,778
problem because in theory we could get

465
00:25:36,069 --> 00:25:40,658
into a situation where we actually can't

466
00:25:37,778 --> 00:25:43,990
split and I don't know what we do about

467
00:25:40,659 --> 00:25:46,419
that if you have a thing where there's

468
00:25:43,990 --> 00:25:49,028
actually 256 things that cannot be split

469
00:25:46,419 --> 00:25:52,240
along any dimension but how would that

470
00:25:49,028 --> 00:25:53,950
ever happen I don't think it could so I

471
00:25:52,240 --> 00:25:57,130
think we're okay with that but we would

472
00:25:53,950 --> 00:25:58,659
want to know right the worst would

473
00:25:57,130 --> 00:26:01,960
happen is to get wrong rate casting so I

474
00:25:58,659 --> 00:26:03,940
think it's okay but anyway so in here we

475
00:26:01,960 --> 00:26:05,769
would say all right we've got our our

476
00:26:03,940 --> 00:26:10,210
leaf count all set up so this whole

477
00:26:05,769 --> 00:26:13,980
thing will just work and the node index

478
00:26:10,210 --> 00:26:17,110
is just whichever the first one is so I

479
00:26:13,980 --> 00:26:23,319
guess I shouldn't I was a little hasty

480
00:26:17,109 --> 00:26:23,949
there where is that - is that bit in

481
00:26:23,319 --> 00:26:27,759
here somewhere

482
00:26:23,950 --> 00:26:32,769
Oh what am I thinking we have this

483
00:26:27,759 --> 00:26:35,950
routine copied just right above so where

484
00:26:32,769 --> 00:26:37,269
is my split box there it is so we want

485
00:26:35,950 --> 00:26:43,870
to do this

486
00:26:37,269 --> 00:26:46,779
as well right so this needs to happen to

487
00:26:43,869 --> 00:26:49,599
add the box storage and then we need to

488
00:26:46,779 --> 00:26:53,529
know what the node index was because

489
00:26:49,599 --> 00:26:56,230
we're gonna pack that right so there's

490
00:26:53,529 --> 00:27:00,869
our entire set of information along that

491
00:26:56,230 --> 00:27:14,410
path I think that's just correct right

492
00:27:00,869 --> 00:27:17,469
so this looks fine and yeah and then

493
00:27:14,410 --> 00:27:22,630
we're all good it's just this is known

494
00:27:17,470 --> 00:27:26,170
index now and then we're just down to

495
00:27:22,630 --> 00:27:29,080
the other side so when you here where we

496
00:27:26,170 --> 00:27:32,259
actually do need to we need to add a KD

497
00:27:29,079 --> 00:27:34,839
node in this foot in this case and then

498
00:27:32,259 --> 00:27:37,809
we need to go through and actually do

499
00:27:34,839 --> 00:27:49,329
the classification and this is going to

500
00:27:37,809 --> 00:27:50,919
be a worse classification actually we're

501
00:27:49,329 --> 00:27:58,839
probably going to need to change exactly

502
00:27:50,920 --> 00:28:00,670
how we do this like I said so we're

503
00:27:58,839 --> 00:28:03,339
gonna change how we do that but for the

504
00:28:00,670 --> 00:28:06,550
time being we're gonna have to add a KDE

505
00:28:03,339 --> 00:28:12,119
node here right and then we're gonna

506
00:28:06,549 --> 00:28:12,119
have to construct the the KD nodes

507
00:28:15,750 --> 00:28:21,970
contents and the difference here is I

508
00:28:20,079 --> 00:28:22,960
mean we're still effectively doing the

509
00:28:21,970 --> 00:28:24,309
same thing but the difference here is

510
00:28:22,960 --> 00:28:26,380
we're gonna have to have a thing that

511
00:28:24,309 --> 00:28:27,879
splits boxes in half and puts one in one

512
00:28:26,380 --> 00:28:30,640
side and one on the other so that's the

513
00:28:27,880 --> 00:28:32,920
real like the main difference we're

514
00:28:30,640 --> 00:28:34,390
gonna have there so we probably will

515
00:28:32,920 --> 00:28:38,800
still have something that looks roughly

516
00:28:34,390 --> 00:28:41,650
like this it won't create child boxes so

517
00:28:38,799 --> 00:28:46,210
this part is not this is not gonna

518
00:28:41,650 --> 00:28:49,538
happen right so none of that happens the

519
00:28:46,210 --> 00:28:55,499
KD node gets added here and

520
00:28:49,538 --> 00:28:55,499
I guess we want this to be also like a

521
00:28:56,429 --> 00:29:03,970
note indexes we're gonna need to know it

522
00:29:00,538 --> 00:29:06,128
so our Katy note index here or this

523
00:29:03,970 --> 00:29:10,769
index this note index I guess we'll call

524
00:29:06,128 --> 00:29:13,689
it maybe we're gonna add one to that and

525
00:29:10,769 --> 00:29:15,159
then we're going to go ahead and we we

526
00:29:13,690 --> 00:29:17,830
don't ever add them anywhere else so

527
00:29:15,159 --> 00:29:21,700
actually what a more but probably do is

528
00:29:17,829 --> 00:29:25,749
say this note index equals solution Katy

529
00:29:21,700 --> 00:29:27,879
node count plus plus right and what we

530
00:29:25,749 --> 00:29:30,098
have to do here is say like look if the

531
00:29:27,878 --> 00:29:32,558
solution Katy node count is less than

532
00:29:30,098 --> 00:29:36,898
the total number that we can ever have

533
00:29:32,558 --> 00:29:39,970
right and we don't know what that is

534
00:29:36,898 --> 00:29:42,548
then we can do this otherwise we just

535
00:29:39,970 --> 00:29:45,038
return two packs value of zero because

536
00:29:42,548 --> 00:29:47,470
we would have to because we can't build

537
00:29:45,038 --> 00:29:48,819
anymore of the tree and that's fine it

538
00:29:47,470 --> 00:29:51,009
just means inaccurate lighting for that

539
00:29:48,819 --> 00:29:52,928
frame so that's good because we don't

540
00:29:51,009 --> 00:29:54,848
want like crash if the lighting can't

541
00:29:52,929 --> 00:29:59,710
happen right we just want to have bad

542
00:29:54,848 --> 00:30:02,229
lighting so that is also good if we blow

543
00:29:59,710 --> 00:30:03,909
out the bounds at all right so I think

544
00:30:02,229 --> 00:30:07,330
this is what we do we'd say all right

545
00:30:03,909 --> 00:30:09,399
let's get a node count here update then

546
00:30:07,329 --> 00:30:14,589
let's grab that particular node so

547
00:30:09,398 --> 00:30:18,699
that's this node I might change this and

548
00:30:14,589 --> 00:30:20,528
say this is the PAC node index although

549
00:30:18,700 --> 00:30:21,879
there there are the same so no I guess I

550
00:30:20,528 --> 00:30:22,929
would just call this node index and this

551
00:30:21,878 --> 00:30:26,769
is what it is it's what we're gonna

552
00:30:22,929 --> 00:30:29,109
return right so that's the node that

553
00:30:26,769 --> 00:30:32,259
we're actually gonna use the next time

554
00:30:29,108 --> 00:30:35,949
around and then when we get down here

555
00:30:32,259 --> 00:30:38,979
like I said we sort of have a little bit

556
00:30:35,950 --> 00:30:42,970
of work to do with the splitting so in

557
00:30:38,979 --> 00:30:47,558
terms of splitting this all needs to get

558
00:30:42,970 --> 00:30:50,829
rewritten but what we do know is that

559
00:30:47,558 --> 00:30:53,648
we're going to effectively have a pack

560
00:30:50,829 --> 00:30:55,118
value so this is side zero pack so what

561
00:30:53,648 --> 00:30:58,178
we're gonna do here is I guess this

562
00:30:55,118 --> 00:30:59,858
right so this is like the positive the

563
00:30:58,179 --> 00:31:01,999
negative sign pack and then we're gonna

564
00:30:59,858 --> 00:31:05,478
have the positive sign pack

565
00:31:01,999 --> 00:31:10,399
like this I guess I mean it probably

566
00:31:05,479 --> 00:31:11,778
should correspond to the bit so maybe

567
00:31:10,398 --> 00:31:13,189
it's the other way around I don't know

568
00:31:11,778 --> 00:31:14,898
that part doesn't really matter because

569
00:31:13,190 --> 00:31:16,070
we can choose whichever way we do that

570
00:31:14,898 --> 00:31:17,508
we just have to make sure that we're

571
00:31:16,069 --> 00:31:19,878
picking the sides the same way in both

572
00:31:17,509 --> 00:31:25,339
places so which way do we do it up here

573
00:31:19,878 --> 00:31:28,488
would be the next question here we go so

574
00:31:25,339 --> 00:31:30,678
up here we say let's move the mask in

575
00:31:28,489 --> 00:31:34,639
terms of what we saw and then we're

576
00:31:30,679 --> 00:31:37,249
gonna say descend down the start side

577
00:31:34,638 --> 00:31:45,348
bit not the inverted bit so I guess it's

578
00:31:37,249 --> 00:31:49,399
like positive would be zero right and

579
00:31:45,348 --> 00:31:51,979
negative would be one so it's the sign

580
00:31:49,398 --> 00:31:55,878
bit is what you use to address into

581
00:31:51,979 --> 00:32:01,340
there right so then in here this part

582
00:31:55,878 --> 00:32:03,528
again is not really relevant to us so

583
00:32:01,339 --> 00:32:04,999
I'm guessing we would do something

584
00:32:03,528 --> 00:32:07,519
because like if you look at what's in

585
00:32:04,999 --> 00:32:11,058
here we need to know the plain D it's

586
00:32:07,519 --> 00:32:13,848
right so we need to know this and we

587
00:32:11,058 --> 00:32:15,950
need to know the sides we need to know

588
00:32:13,848 --> 00:32:18,589
the first leat well no we don't because

589
00:32:15,950 --> 00:32:21,278
that doesn't exist right so the first

590
00:32:18,589 --> 00:32:21,278
leaf index

591
00:32:35,059 --> 00:32:49,079
so now and I think about it actually do

592
00:32:40,200 --> 00:32:51,740
you need any of these things though cuz

593
00:32:49,079 --> 00:32:55,710
to the sides just always tell you that

594
00:32:51,740 --> 00:32:59,120
like couldn't we have just packed that

595
00:32:55,710 --> 00:32:59,120
into the sides

596
00:33:11,170 --> 00:33:25,690
I mean yes so I don't think you need any

597
00:33:22,869 --> 00:33:34,000
of this I think this is all a waste of

598
00:33:25,690 --> 00:33:43,269
time right so I don't know that we need

599
00:33:34,000 --> 00:33:45,250
any of that for anything the first leaf

600
00:33:43,269 --> 00:33:47,589
index the leaf count the KT index can

601
00:33:45,250 --> 00:33:49,539
all be packed into the side because by

602
00:33:47,589 --> 00:33:51,279
definition it has to be because we then

603
00:33:49,539 --> 00:33:57,819
count on it being packed into the side

604
00:33:51,279 --> 00:33:59,740
later right so I mean if I look I think

605
00:33:57,819 --> 00:34:02,409
it's just literally like you set the

606
00:33:59,740 --> 00:34:04,599
plane D here and the plane D is set to

607
00:34:02,410 --> 00:34:08,559
whatever the heck the plane D was set to

608
00:34:04,599 --> 00:34:12,398
so it's like this thing right the

609
00:34:08,559 --> 00:34:20,500
classifier distance so this is the plane

610
00:34:12,398 --> 00:34:25,269
D here and if we go down to this we

611
00:34:20,500 --> 00:34:28,300
would just say all right that so once we

612
00:34:25,269 --> 00:34:34,449
set up the plane D here all we would do

613
00:34:28,300 --> 00:34:39,480
is say that once we know that we don't

614
00:34:34,449 --> 00:34:43,750
have to do anything anymore it's

615
00:34:39,480 --> 00:34:47,079
literally just this because everything

616
00:34:43,750 --> 00:34:50,789
else we would pack into these sides

617
00:34:47,079 --> 00:34:50,789
values right

618
00:34:54,260 --> 00:35:19,619
so yeah pretty sure so I would probably

619
00:35:10,289 --> 00:35:24,920
prefer to do it like this where we we

620
00:35:19,619 --> 00:35:24,920
accept the node in next leaf count pack

621
00:35:26,960 --> 00:35:41,630
back like so and then we or in like

622
00:35:38,539 --> 00:35:44,630
what's the stuff we need the index and

623
00:35:41,630 --> 00:35:44,630
the

624
00:35:47,929 --> 00:35:56,039
just the index right so we pack in here

625
00:35:53,550 --> 00:36:01,850
our KD index

626
00:35:56,039 --> 00:36:01,849
so this is our like KT index pack value

627
00:36:03,380 --> 00:36:14,309
and that's just this thing shifted up

628
00:36:08,059 --> 00:36:19,349
right and so thinking about that like if

629
00:36:14,309 --> 00:36:21,269
I'm thinking about that which I am the

630
00:36:19,349 --> 00:36:23,519
way that we decided to pack the KD

631
00:36:21,269 --> 00:36:26,519
indexes into this thing is they were

632
00:36:23,519 --> 00:36:28,940
just shifted up by 28 right so it's just

633
00:36:26,519 --> 00:36:32,670
like slammed on the top of that thing

634
00:36:28,940 --> 00:36:33,929
the plane test pattern and I guess we

635
00:36:32,670 --> 00:36:38,610
could we could put the plane test

636
00:36:33,929 --> 00:36:44,009
pattern in there as well because it

637
00:36:38,610 --> 00:36:46,019
needs to be right so the plane test

638
00:36:44,010 --> 00:36:48,120
pattern is just whether it's the

639
00:36:46,019 --> 00:36:50,039
positive side or the negative side oh

640
00:36:48,119 --> 00:36:53,670
and that's different on either side so

641
00:36:50,039 --> 00:36:57,239
don't know why I would do it that way so

642
00:36:53,670 --> 00:37:00,269
this is the positive side and then this

643
00:36:57,239 --> 00:37:02,879
is the negative side right so the

644
00:37:00,269 --> 00:37:05,159
positive side plane test pattern and the

645
00:37:02,880 --> 00:37:14,930
negative side plane test pattern are

646
00:37:05,159 --> 00:37:14,929
these things they are 24 bits up right

647
00:37:19,780 --> 00:37:25,210
and what I need to do is just have

648
00:37:23,139 --> 00:37:27,309
whichever pattern corresponds to the

649
00:37:25,210 --> 00:37:31,090
correct side now if those are the sign

650
00:37:27,309 --> 00:37:36,369
bits then all zeroes is the positive

651
00:37:31,090 --> 00:37:38,380
side so it's actually just zero and if

652
00:37:36,369 --> 00:37:41,139
it's negative then it would be all ones

653
00:37:38,380 --> 00:37:43,780
right so we have all zeros are all ones

654
00:37:41,139 --> 00:37:47,859
as what we would actually use for oaring

655
00:37:43,780 --> 00:37:51,010
things in and that's it because the

656
00:37:47,860 --> 00:37:55,329
plain B gets put in separately at push

657
00:37:51,010 --> 00:37:58,030
time because there's no need to store it

658
00:37:55,329 --> 00:38:02,170
since when we push it we have it so we

659
00:37:58,030 --> 00:38:04,060
can just you know get that we don't need

660
00:38:02,170 --> 00:38:07,269
to store 64 bits it just floats the

661
00:38:04,059 --> 00:38:09,039
structure the KD Index gets packed in

662
00:38:07,269 --> 00:38:10,630
here the plane test pattern gets packed

663
00:38:09,039 --> 00:38:13,840
in here and the leaf count and the node

664
00:38:10,630 --> 00:38:17,050
index get packed right here so the node

665
00:38:13,840 --> 00:38:20,289
index or a leaf count all we need to do

666
00:38:17,050 --> 00:38:23,190
is shift these up so it looks like the

667
00:38:20,289 --> 00:38:29,699
node index is shifted up by nothing and

668
00:38:23,190 --> 00:38:35,950
the leaf count is shifted up by 16 right

669
00:38:29,699 --> 00:38:40,629
so that's the complete pack like like

670
00:38:35,949 --> 00:38:43,569
that's it so what I need to do now is

671
00:38:40,630 --> 00:38:45,700
have some conceptualization of the

672
00:38:43,570 --> 00:38:54,640
maximum number of these that you can

673
00:38:45,699 --> 00:38:57,129
actually have right and I guess probably

674
00:38:54,639 --> 00:39:05,049
will just make it be the maximum that

675
00:38:57,130 --> 00:39:08,320
there is so basically like will allocate

676
00:39:05,050 --> 00:39:11,289
a full complement of that because that

677
00:39:08,320 --> 00:39:15,940
space is pretty cheap for us if you

678
00:39:11,289 --> 00:39:19,779
imagine we have 65536 of these struts

679
00:39:15,940 --> 00:39:21,639
that are 12 bytes each now like it's

680
00:39:19,780 --> 00:39:24,310
less than a megabyte of scratch space

681
00:39:21,639 --> 00:39:30,400
which these days you're lucky if you can

682
00:39:24,309 --> 00:39:32,139
get like the DLL for one entity in your

683
00:39:30,400 --> 00:39:33,769
unreal game to be less than one

684
00:39:32,139 --> 00:39:37,609
megabytes so like

685
00:39:33,769 --> 00:39:39,380
I'm assuming we can probably just say we

686
00:39:37,610 --> 00:39:41,599
can afford maximum scratch space there

687
00:39:39,380 --> 00:39:43,309
because I don't care and we won't touch

688
00:39:41,599 --> 00:39:45,199
it it won't be cash pollution if we

689
00:39:43,309 --> 00:39:47,000
never touch it so only if you actually

690
00:39:45,199 --> 00:39:53,059
stressed it to that level would you ever

691
00:39:47,000 --> 00:39:57,110
actually pay for that so I think that's

692
00:39:53,059 --> 00:40:01,549
fine now the problem that we are going

693
00:39:57,110 --> 00:40:05,710
to have immediately hereafter is that

694
00:40:01,550 --> 00:40:05,710
now we don't actually know

695
00:40:07,030 --> 00:40:20,540
looks like also next dim index so next

696
00:40:15,380 --> 00:40:23,539
dim index is actually something we would

697
00:40:20,539 --> 00:40:26,420
have to produce outside as well so in

698
00:40:23,539 --> 00:40:38,539
here I would say we probably just do

699
00:40:26,420 --> 00:40:39,829
that and that I don't know if this is

700
00:40:38,539 --> 00:40:46,699
actually a good idea anyway but

701
00:40:39,829 --> 00:40:48,650
something like this okay so yeah so now

702
00:40:46,699 --> 00:40:53,199
I think we're all good here

703
00:40:48,650 --> 00:40:57,559
Katy node count Shh

704
00:40:53,199 --> 00:41:04,099
should be fine there what's the actual

705
00:40:57,559 --> 00:41:08,289
problem what is that actually

706
00:41:04,099 --> 00:41:08,289
complaining about No

707
00:41:08,599 --> 00:41:20,809
Oh previous decoration yes sorry thank

708
00:41:12,440 --> 00:41:24,050
you compiler that was not intended so I

709
00:41:20,809 --> 00:41:27,469
think now we're more or less this

710
00:41:24,050 --> 00:41:30,410
routine is more or less correct and what

711
00:41:27,469 --> 00:41:32,959
we need to do now is write the code that

712
00:41:30,409 --> 00:41:40,039
will actually break like that we'll

713
00:41:32,960 --> 00:41:42,889
split these things up and I'll be honest

714
00:41:40,039 --> 00:41:45,920
with you I don't really know what we

715
00:41:42,889 --> 00:41:47,599
want to do here so I think I'm like I

716
00:41:45,920 --> 00:41:49,460
think this is an open area of research

717
00:41:47,599 --> 00:41:52,130
for us that we want to probably play

718
00:41:49,460 --> 00:41:54,800
with later to see what the way is to

719
00:41:52,130 --> 00:41:58,430
build the most most balanced KD trees we

720
00:41:54,800 --> 00:42:01,039
can and we weren't doing that previously

721
00:41:58,429 --> 00:42:03,409
right I'm going to keep like I said

722
00:42:01,039 --> 00:42:13,250
before the way we're doing it now just

723
00:42:03,409 --> 00:42:16,420
because since I don't know and you know

724
00:42:13,250 --> 00:42:16,420
what let's just pass a rectangle three

725
00:42:18,639 --> 00:42:23,389
since I don't know yet how I want to do

726
00:42:21,769 --> 00:42:24,980
that and I want to compare apples to

727
00:42:23,389 --> 00:42:26,719
apples as much as possible we're just

728
00:42:24,980 --> 00:42:31,130
gonna keep doing it the same way we were

729
00:42:26,719 --> 00:42:33,619
doing it before so here I'm gonna say

730
00:42:31,130 --> 00:42:44,059
like look let's do a get center on this

731
00:42:33,619 --> 00:42:45,529
thing so we'll just use the total bounce

732
00:42:44,059 --> 00:42:52,250
center here which is what this was

733
00:42:45,530 --> 00:42:54,980
computing and then we're I think the

734
00:42:52,250 --> 00:42:58,869
classification system would just work

735
00:42:54,980 --> 00:43:02,530
and then when we come down here this is

736
00:42:58,869 --> 00:43:06,019
only this part actually has to get

737
00:43:02,530 --> 00:43:09,080
redone and the reason this part has to

738
00:43:06,019 --> 00:43:10,579
be redone is not because we couldn't

739
00:43:09,079 --> 00:43:13,130
just use these counts that we produced

740
00:43:10,579 --> 00:43:15,019
up here but rather because we actually

741
00:43:13,130 --> 00:43:30,110
need to look at the splitting properties

742
00:43:15,019 --> 00:43:32,989
of this right so yeah like I said not

743
00:43:30,110 --> 00:43:36,880
exactly my favorite thing in the world I

744
00:43:32,989 --> 00:43:39,649
don't care about ref see a ref see B

745
00:43:36,880 --> 00:43:42,200
those are not relevant anymore those are

746
00:43:39,650 --> 00:43:44,300
color of color approximator z' we were

747
00:43:42,199 --> 00:43:46,009
using for long distance ray casting and

748
00:43:44,300 --> 00:43:49,970
we're just not gonna do that anymore I

749
00:43:46,010 --> 00:43:51,950
don't think so and we can you know and

750
00:43:49,969 --> 00:43:53,980
it's cheap to add it in either way we

751
00:43:51,949 --> 00:43:58,279
wouldn't do it here

752
00:43:53,980 --> 00:44:00,349
so in here what we want to do is we want

753
00:43:58,280 --> 00:44:02,150
to do subsidy the same thing but now

754
00:44:00,349 --> 00:44:04,969
what we need is something that's more

755
00:44:02,150 --> 00:44:06,320
like if it's clearly on one side we do

756
00:44:04,969 --> 00:44:07,969
one thing if it's clearly on the other

757
00:44:06,320 --> 00:44:10,120
side we do the other thing if it's split

758
00:44:07,969 --> 00:44:14,929
down the middle we add it to both sides

759
00:44:10,119 --> 00:44:17,799
right so this like check approximator

760
00:44:14,929 --> 00:44:20,659
thing is fine we can leave it that way

761
00:44:17,800 --> 00:44:23,600
but then what we need to do here is when

762
00:44:20,659 --> 00:44:27,289
we do this sort of when we brush through

763
00:44:23,599 --> 00:44:28,940
here we would need and bounds a and

764
00:44:27,289 --> 00:44:32,539
bounds B by the way or exactly what we

765
00:44:28,940 --> 00:44:38,450
would pass to this and this and let's do

766
00:44:32,539 --> 00:44:41,750
positive bounds negative bounds and then

767
00:44:38,449 --> 00:44:43,189
like negative count that way we can see

768
00:44:41,750 --> 00:44:45,199
what those are we don't have to remember

769
00:44:43,190 --> 00:44:49,309
what's a and what's because you know you

770
00:44:45,199 --> 00:44:51,259
could see screwing that up pretty pretty

771
00:44:49,309 --> 00:44:54,059
easily

772
00:44:51,260 --> 00:44:58,520
so we'll just do positive counts and

773
00:44:54,059 --> 00:44:58,519
negative count and we'll do it that way

774
00:44:59,360 --> 00:45:06,769
all right so I think that's all fine and

775
00:45:04,940 --> 00:45:10,470
[Music]

776
00:45:06,769 --> 00:45:14,730
all we need to do now is in here have

777
00:45:10,469 --> 00:45:17,579
this bead like three ways so this is

778
00:45:14,730 --> 00:45:21,360
gonna be like if add a or is add

779
00:45:17,579 --> 00:45:24,179
positive and if add negative right and

780
00:45:21,360 --> 00:45:29,550
we might sometimes set both of those

781
00:45:24,179 --> 00:45:37,039
things that to true so we would do this

782
00:45:29,550 --> 00:45:46,530
and this and here we'll just say

783
00:45:37,039 --> 00:45:53,699
positive counts here we go positive

784
00:45:46,530 --> 00:45:56,010
count negative counts and here we would

785
00:45:53,699 --> 00:46:01,199
do

786
00:45:56,010 --> 00:46:02,730
the negative cap right it looks like

787
00:46:01,199 --> 00:46:06,629
we're doing a backward a forwards

788
00:46:02,730 --> 00:46:08,130
backwards build there right and so here

789
00:46:06,630 --> 00:46:11,510
again just changing the names of these

790
00:46:08,130 --> 00:46:15,780
is going to be positive bounds and

791
00:46:11,510 --> 00:46:21,710
negative bounds and this will be

792
00:46:15,780 --> 00:46:30,089
positive bounds and negative bounds

793
00:46:21,710 --> 00:46:36,269
negative positive when we do the rectum

794
00:46:30,088 --> 00:46:37,739
in max here that is just weird no we're

795
00:46:36,269 --> 00:46:45,750
going to need it so we might as well do

796
00:46:37,739 --> 00:46:47,399
it here as box bounds and we probably

797
00:46:45,750 --> 00:46:55,969
just should have made that be a

798
00:46:47,400 --> 00:47:01,230
rectangle it doesn't really matter about

799
00:46:55,969 --> 00:47:05,309
whatever so then this is positive count

800
00:47:01,230 --> 00:47:11,338
plus plus and this is negative count

801
00:47:05,309 --> 00:47:13,259
plus plus and now we've got a proper

802
00:47:11,338 --> 00:47:16,078
summation for these and so this is going

803
00:47:13,260 --> 00:47:18,930
to be like an else if else kind of thing

804
00:47:16,079 --> 00:47:22,289
now where we do like add positive equals

805
00:47:18,929 --> 00:47:23,940
add negative equals true and here it's

806
00:47:22,289 --> 00:47:29,429
gonna be like add positive equals true

807
00:47:23,940 --> 00:47:31,050
add negative equals true right and so

808
00:47:29,429 --> 00:47:34,649
what we need to do here is we're gonna

809
00:47:31,050 --> 00:47:37,109
do exactly the same thing as before

810
00:47:34,650 --> 00:47:39,030
it's just instead of classifying the

811
00:47:37,108 --> 00:47:41,400
center which is what we were doing

812
00:47:39,030 --> 00:47:44,220
before we're gonna classify whichever

813
00:47:41,400 --> 00:47:49,139
dimension of the box was the one that we

814
00:47:44,219 --> 00:47:51,838
actually need to check right so if we're

815
00:47:49,139 --> 00:47:54,000
checking for adding to the positive side

816
00:47:51,838 --> 00:47:57,420
what we want to see is is the minimum

817
00:47:54,000 --> 00:48:01,230
one higher than the class distance right

818
00:47:57,420 --> 00:48:04,559
so when you subtract away plane D right

819
00:48:01,230 --> 00:48:07,750
which is what we're doing here right

820
00:48:04,559 --> 00:48:11,019
if you subtract away the plain D from

821
00:48:07,750 --> 00:48:14,969
this thing then what actually happens

822
00:48:11,019 --> 00:48:14,969
right and

823
00:48:25,280 --> 00:48:29,480
I don't know why we're even doing it

824
00:48:27,289 --> 00:48:31,099
this way this seems dumb I mean it's

825
00:48:29,480 --> 00:48:33,500
that doesn't even make sense

826
00:48:31,099 --> 00:48:37,759
I don't even know what the heck plaster

827
00:48:33,500 --> 00:48:40,789
is therefore this is just a yeah that's

828
00:48:37,760 --> 00:48:50,060
just alright whatever so I mean this is

829
00:48:40,789 --> 00:48:56,630
just this right I mean that's that's

830
00:48:50,059 --> 00:49:01,639
what we're doing so if it's greater we

831
00:48:56,630 --> 00:49:05,300
add it to the positive side if it's less

832
00:49:01,639 --> 00:49:07,909
we added to the Oh actually wait no we

833
00:49:05,300 --> 00:49:08,420
can just do this directly so what am I

834
00:49:07,909 --> 00:49:13,069
thinking

835
00:49:08,420 --> 00:49:14,599
add positive is just a boolean value in

836
00:49:13,070 --> 00:49:16,910
fact we don't even need to store it

837
00:49:14,599 --> 00:49:20,059
right all you actually need to do is say

838
00:49:16,909 --> 00:49:21,699
look is the maximum value the farthest

839
00:49:20,059 --> 00:49:23,929
it could be is that on the other side

840
00:49:21,699 --> 00:49:30,769
then you're going to do this branch and

841
00:49:23,929 --> 00:49:32,029
if the minimum value is on the other on

842
00:49:30,769 --> 00:49:33,230
the negative side of the plane then

843
00:49:32,030 --> 00:49:34,820
you're gonna add the negative branch and

844
00:49:33,230 --> 00:49:36,530
we don't need to do any of the stuff

845
00:49:34,820 --> 00:49:39,680
that I was just saying so ignore all

846
00:49:36,530 --> 00:49:43,300
that as key and peele said forget

847
00:49:39,679 --> 00:49:43,299
everything I've set up unto this point

848
00:49:46,150 --> 00:49:52,610
so I think that's actually all we needed

849
00:49:49,329 --> 00:49:54,469
to build the tree properly and why the

850
00:49:52,610 --> 00:49:56,720
heck this thing was written this way I

851
00:49:54,469 --> 00:49:58,849
have no idea because there's no need for

852
00:49:56,719 --> 00:50:00,739
a dot product I guess we were thinking

853
00:49:58,849 --> 00:50:03,349
maybe we would use other kinds of planes

854
00:50:00,739 --> 00:50:06,679
at some point but this is stupid and

855
00:50:03,349 --> 00:50:09,019
we're not gonna do it so like this yeah

856
00:50:06,679 --> 00:50:13,639
it doesn't really make much sense to me

857
00:50:09,019 --> 00:50:21,909
right look why why wouldn't you just

858
00:50:13,639 --> 00:50:21,909
have done this here I'm saying

859
00:50:23,829 --> 00:50:32,299
so it really doesn't make sense why we

860
00:50:26,900 --> 00:50:35,480
would do that and yeah I just don't get

861
00:50:32,300 --> 00:50:37,730
it so in this case if we wanted to do

862
00:50:35,480 --> 00:50:41,119
this check still the same way as we were

863
00:50:37,730 --> 00:50:44,030
checking it before we can just say that

864
00:50:41,119 --> 00:50:50,389
we're gonna actually multiply it by this

865
00:50:44,030 --> 00:50:52,940
thing e right and and then we just check

866
00:50:50,389 --> 00:50:55,519
it so no more inner products being

867
00:50:52,940 --> 00:51:00,380
thrown around for no reason when we can

868
00:50:55,519 --> 00:51:03,289
just do an offset load yeah doesn't

869
00:51:00,380 --> 00:51:06,500
matter alright so this thing will build

870
00:51:03,289 --> 00:51:08,539
our KD tree now so we can just call it

871
00:51:06,500 --> 00:51:10,190
and the problem we're gonna have is we

872
00:51:08,539 --> 00:51:11,480
have an allocating space for it so it's

873
00:51:10,190 --> 00:51:12,980
just gonna crash immediately because

874
00:51:11,480 --> 00:51:16,130
we're sending it off in a null land

875
00:51:12,980 --> 00:51:18,320
right and sending it off into no land is

876
00:51:16,130 --> 00:51:19,970
not a good plan so we're gonna need to

877
00:51:18,320 --> 00:51:22,070
allocate some space for it but let's at

878
00:51:19,969 --> 00:51:26,119
least verify that that does happen and

879
00:51:22,070 --> 00:51:28,519
hope that it crashes because if it

880
00:51:26,119 --> 00:51:34,159
doesn't crash that means it's not even

881
00:51:28,519 --> 00:51:38,380
running which means we've failed quite

882
00:51:34,159 --> 00:51:40,969
hard whoops

883
00:51:38,380 --> 00:51:42,619
so anyway in building partition for

884
00:51:40,969 --> 00:51:45,589
lighting you can see here where we've

885
00:51:42,619 --> 00:51:48,109
got all this kind of crap happening what

886
00:51:45,590 --> 00:51:51,019
we want to do here is do a split KD on

887
00:51:48,110 --> 00:51:54,440
this thing and what I'm going to propose

888
00:51:51,019 --> 00:52:00,739
here because I have no real better idea

889
00:51:54,440 --> 00:52:02,840
about what we should do is I'm going to

890
00:52:00,739 --> 00:52:05,269
propose that we now add a global control

891
00:52:02,840 --> 00:52:07,250
switch that basically says look you

892
00:52:05,269 --> 00:52:11,000
build one thing on one path you build

893
00:52:07,250 --> 00:52:15,980
another thing on the other path right so

894
00:52:11,000 --> 00:52:18,739
the root box index can still be used

895
00:52:15,980 --> 00:52:26,090
it's not really a root box index anymore

896
00:52:18,739 --> 00:52:28,969
but you know we don't need this we don't

897
00:52:26,090 --> 00:52:31,220
need it but what we're gonna do here is

898
00:52:28,969 --> 00:52:33,109
say alright there's a there's a control

899
00:52:31,219 --> 00:52:34,419
thing here and this thing is going to be

900
00:52:33,110 --> 00:52:39,280
like lighting

901
00:52:34,420 --> 00:52:41,500
use old KD and that's going to control

902
00:52:39,280 --> 00:52:43,180
both things so you know you get

903
00:52:41,500 --> 00:52:45,039
whichever tree it is that you thought

904
00:52:43,179 --> 00:52:47,409
that you wanted when you set up the

905
00:52:45,039 --> 00:52:49,119
lighting system and if this one turns

906
00:52:47,409 --> 00:52:50,858
out to be demonstrative Li like way

907
00:52:49,119 --> 00:52:52,568
better then we just go vaporize the

908
00:52:50,858 --> 00:52:54,279
other one and if it doesn't we play with

909
00:52:52,568 --> 00:52:56,289
it for a little while to see if there's

910
00:52:54,280 --> 00:52:57,970
a reason why it isn't that is obvious

911
00:52:56,289 --> 00:53:00,099
and if there isn't then we just walk it

912
00:52:57,969 --> 00:53:06,159
back out and go back to optimizing the

913
00:53:00,099 --> 00:53:09,369
other one right okay so light use old KD

914
00:53:06,159 --> 00:53:12,519
blah blah blah whatever and so on we're

915
00:53:09,369 --> 00:53:13,838
just gonna define this to be 1 and we're

916
00:53:12,519 --> 00:53:17,679
just gonna verify that we can still

917
00:53:13,838 --> 00:53:20,980
build it that way the box that Katie

918
00:53:17,679 --> 00:53:27,068
stack garbage can also happen the same

919
00:53:20,980 --> 00:53:30,099
way so we can do this right where we

920
00:53:27,068 --> 00:53:33,608
define those two and actually is that

921
00:53:30,099 --> 00:53:36,160
doesn't actually make any sense what I

922
00:53:33,608 --> 00:53:38,469
just said this is only used on this side

923
00:53:36,159 --> 00:53:41,848
of the branch now so probably the right

924
00:53:38,469 --> 00:53:50,379
way to do it is just put it here hey

925
00:53:41,849 --> 00:53:53,588
this is only used here right so yeah so

926
00:53:50,380 --> 00:53:54,818
that seems better and you know I'm I'm

927
00:53:53,588 --> 00:53:57,190
happy with that

928
00:53:54,818 --> 00:53:58,750
so now what we should see in theory

929
00:53:57,190 --> 00:54:01,269
anyway

930
00:53:58,750 --> 00:54:04,389
is if I run this under remedy we should

931
00:54:01,269 --> 00:54:08,980
be able to run the old way and get it

932
00:54:04,389 --> 00:54:11,769
okay that's the wrong I loaded the wrong

933
00:54:08,980 --> 00:54:13,599
program so we should see the same

934
00:54:11,769 --> 00:54:17,318
results that we had been seeing which

935
00:54:13,599 --> 00:54:20,200
right that that does look right and then

936
00:54:17,318 --> 00:54:23,440
if I run it the new way it should crash

937
00:54:20,199 --> 00:54:25,328
like I just said because we didn't

938
00:54:23,440 --> 00:54:27,700
actually give it any space to work with

939
00:54:25,329 --> 00:54:37,060
so I'm assuming it will just you know

940
00:54:27,699 --> 00:54:46,159
just die this needs to

941
00:54:37,059 --> 00:54:48,739
look like this and we need to pass the

942
00:54:46,159 --> 00:54:52,730
total bounds here that was my little

943
00:54:48,739 --> 00:54:56,959
foot stamp did you like it when we

944
00:54:52,730 --> 00:55:03,079
passed the total bounds here we need to

945
00:54:56,960 --> 00:55:07,010
pass the occluder bounds and then we

946
00:55:03,079 --> 00:55:10,969
need the solution root box index to

947
00:55:07,010 --> 00:55:15,320
equal the split Cady but we don't want

948
00:55:10,969 --> 00:55:19,809
it to have the leaf count in it which

949
00:55:15,320 --> 00:55:25,010
should actually be fine because it can't

950
00:55:19,809 --> 00:55:26,750
write it can't be a leaf at least I

951
00:55:25,010 --> 00:55:33,290
don't think so well no it could what if

952
00:55:26,750 --> 00:55:37,570
you just had very little yeah so

953
00:55:33,289 --> 00:55:43,400
actually it should just be that honestly

954
00:55:37,570 --> 00:55:45,588
so that's the split Cady and where's the

955
00:55:43,400 --> 00:55:48,139
parameters that thing so it takes the

956
00:55:45,588 --> 00:55:52,279
solution the box count the source the

957
00:55:48,139 --> 00:55:56,449
dust the dim and Oh accidentally to

958
00:55:52,280 --> 00:55:59,150
leave the dim index and we want this

959
00:55:56,449 --> 00:56:01,429
thing I'm gonna just call this like root

960
00:55:59,150 --> 00:56:05,420
K T value and just then put it in there

961
00:56:01,429 --> 00:56:09,460
cuz you know honestly it needs to be

962
00:56:05,420 --> 00:56:12,500
there um and so then when we do the box

963
00:56:09,460 --> 00:56:14,449
at the start what we actually want to do

964
00:56:12,500 --> 00:56:16,429
is just unpack that index that way it'll

965
00:56:14,449 --> 00:56:17,929
work even if we have some weird

966
00:56:16,429 --> 00:56:21,049
degenerate case where there's like

967
00:56:17,929 --> 00:56:26,419
nothing to light so what we really want

968
00:56:21,050 --> 00:56:29,060
to do here is this right so these two

969
00:56:26,420 --> 00:56:31,670
values the leaf count and the curse tack

970
00:56:29,059 --> 00:56:34,369
value those actually want to come out of

971
00:56:31,670 --> 00:56:43,838
the packed value here which is the

972
00:56:34,369 --> 00:56:43,838
solution root KD value yum Santiam

973
00:56:46,730 --> 00:56:54,840
that's not good thank you compiler

974
00:56:50,340 --> 00:56:59,550
that's a good catch all right

975
00:56:54,840 --> 00:57:01,680
so that's everything we should now crash

976
00:56:59,550 --> 00:57:03,539
the first time we try to write one of

977
00:57:01,679 --> 00:57:05,429
these things oh and you know what let's

978
00:57:03,539 --> 00:57:08,820
compile in debug mode because obviously

979
00:57:05,429 --> 00:57:10,559
the release modes not gonna show us much

980
00:57:08,820 --> 00:57:12,870
we should crash like right when we first

981
00:57:10,559 --> 00:57:14,429
try to add one of these things so we'll

982
00:57:12,869 --> 00:57:16,409
try to add it and it should just crash

983
00:57:14,429 --> 00:57:19,619
cuz none of that stuff's initialized

984
00:57:16,409 --> 00:57:25,619
right and that's exactly what we get so

985
00:57:19,619 --> 00:57:28,529
that's good news at least we got what we

986
00:57:25,619 --> 00:57:34,650
expected so now let's go in and actually

987
00:57:28,530 --> 00:57:36,269
add the scratch base in so that we have

988
00:57:34,650 --> 00:57:38,880
some space to do these so that's gonna

989
00:57:36,269 --> 00:57:40,110
be an HH light prof in the same place

990
00:57:38,880 --> 00:57:42,710
where it just allocates scratch space

991
00:57:40,110 --> 00:57:47,099
for everything else I can see here right

992
00:57:42,710 --> 00:57:50,909
we can allocate space for this so in

993
00:57:47,099 --> 00:57:53,190
here I can say and I don't know where

994
00:57:50,909 --> 00:57:56,279
all this stuff needs to go so it's Katie

995
00:57:53,190 --> 00:58:01,590
nodes right and I mean I guess I could

996
00:57:56,280 --> 00:58:07,050
just put like 65536 in there and call it

997
00:58:01,590 --> 00:58:09,900
a day but I'm not sure if that makes the

998
00:58:07,050 --> 00:58:13,230
most sense maybe it does maybe it

999
00:58:09,900 --> 00:58:15,539
doesn't for now I'm not gonna do that

1000
00:58:13,230 --> 00:58:17,429
so for now I'm gonna say all right let's

1001
00:58:15,539 --> 00:58:21,269
get those Katie tree nodes in here we're

1002
00:58:17,429 --> 00:58:23,569
gonna malloc a UN sixteen max times the

1003
00:58:21,269 --> 00:58:26,159
size of one of these Katie tree nodes

1004
00:58:23,570 --> 00:58:28,460
and off we're gonna go now that's gonna

1005
00:58:26,159 --> 00:58:30,449
be too much space at first I believe

1006
00:58:28,460 --> 00:58:34,070
I'll so let me just run this and see

1007
00:58:30,449 --> 00:58:35,869
what happens to us so it looks like we

1008
00:58:34,070 --> 00:58:39,510
spiral out of control

1009
00:58:35,869 --> 00:58:43,529
so just stack overflow they're not the

1010
00:58:39,510 --> 00:58:46,770
website but an actual stack overflow so

1011
00:58:43,530 --> 00:58:51,450
we're not getting Kate Cady index equals

1012
00:58:46,769 --> 00:58:53,579
three hardly ever it looks like for some

1013
00:58:51,449 --> 00:58:56,069
reason and I'm not sure what that reason

1014
00:58:53,579 --> 00:58:58,219
is but I guess we'll find out in the

1015
00:58:56,070 --> 00:58:58,220
future

1016
00:59:00,500 --> 00:59:05,400
so we'll look at that later what we're

1017
00:59:03,298 --> 00:59:09,288
gonna do now though before we do that

1018
00:59:05,400 --> 00:59:09,289
any before we do anything else there

1019
00:59:09,500 --> 00:59:15,510
there was one of the thing I wanted to

1020
00:59:11,429 --> 00:59:19,259
do and that was remove the craft that

1021
00:59:15,510 --> 00:59:23,278
was in this so I want to say all that

1022
00:59:19,260 --> 00:59:30,809
can go away now right am I right about

1023
00:59:23,278 --> 00:59:33,659
that so if we want to get rid of that

1024
00:59:30,809 --> 00:59:38,819
Cady index which we do we need to

1025
00:59:33,659 --> 00:59:41,058
remember it right so we would need to do

1026
00:59:38,818 --> 00:59:41,058
this

1027
00:59:51,670 --> 01:00:00,130
[Music]

1028
00:59:54,179 --> 01:00:02,998
um just want to make sure I'm thinking

1029
01:00:00,130 --> 01:00:02,999
about this correctly

1030
01:00:28,250 --> 01:00:46,079
so I'll be honest I don't know that I'm

1031
01:00:31,679 --> 01:00:50,309
right about that so when you first test

1032
01:00:46,079 --> 01:00:53,460
the value right you need to know what

1033
01:00:50,309 --> 01:00:57,320
the KD index is of that thing that

1034
01:00:53,460 --> 01:01:01,519
you're testing and up here where you

1035
01:00:57,320 --> 01:01:05,490
where you push on the opposite side you

1036
01:01:01,519 --> 01:01:09,449
need to know what that KT index would

1037
01:01:05,489 --> 01:01:13,409
have been so you would need 2 KD indexes

1038
01:01:09,449 --> 01:01:16,349
here right because only the plain D is

1039
01:01:13,409 --> 01:01:20,099
told so you'd need the KD you need your

1040
01:01:16,349 --> 01:01:28,860
KD index and you would need the KD index

1041
01:01:20,099 --> 01:01:36,269
of your of the next person down now

1042
01:01:28,860 --> 01:01:41,780
honestly that's probably fine luck you

1043
01:01:36,269 --> 01:01:41,780
could do that it would look like this

1044
01:01:52,429 --> 01:02:03,019
right yeah so it would look like this

1045
01:02:08,239 --> 01:02:36,209
and it would just unpack whatever the KD

1046
01:02:13,050 --> 01:02:39,660
index was and at that point I think we

1047
01:02:36,210 --> 01:02:50,309
actually filled the entire 32 bits with

1048
01:02:39,659 --> 01:02:53,879
stuff right and so if we wanted to do

1049
01:02:50,309 --> 01:02:56,549
that I mean I guess we just can this is

1050
01:02:53,880 --> 01:02:58,320
kind of a ridiculous routine and I don't

1051
01:02:56,550 --> 01:03:01,170
know if I'm being smart or stupid

1052
01:02:58,320 --> 01:03:03,000
usually it's very difficult to tell the

1053
01:03:01,170 --> 01:03:05,010
difference between the two until you

1054
01:03:03,000 --> 01:03:13,050
have runtime measurement of something so

1055
01:03:05,010 --> 01:03:19,670
I am totally unsure about which one I am

1056
01:03:13,050 --> 01:03:19,670
at this point so there's that

1057
01:03:22,389 --> 01:03:38,230
I got nothing that's just what we're

1058
01:03:33,639 --> 01:03:40,389
doing this may be fantastically stupid I

1059
01:03:38,230 --> 01:03:43,630
need to work in I don't even know if I'm

1060
01:03:40,389 --> 01:03:46,598
in the right ballpark here of stuff like

1061
01:03:43,630 --> 01:03:48,548
I'm I'm like I'm really surprised by how

1062
01:03:46,599 --> 01:03:50,740
that lutein routine looks and like I

1063
01:03:48,548 --> 01:03:54,400
said either it's very smart or it's

1064
01:03:50,739 --> 01:03:57,068
really dumb and usually you

1065
01:03:54,400 --> 01:03:59,619
unfortunately it's the latter right

1066
01:03:57,068 --> 01:04:02,139
usually if you're trying to be too

1067
01:03:59,619 --> 01:04:05,650
clever you are trying to be too clever

1068
01:04:02,139 --> 01:04:07,538
so I don't know we may have to walk a

1069
01:04:05,650 --> 01:04:08,980
little bit about that back as we start

1070
01:04:07,539 --> 01:04:12,460
to step through it and realize Oh duh

1071
01:04:08,980 --> 01:04:16,028
that was really stupid but I mean that's

1072
01:04:12,460 --> 01:04:17,470
just that's just the way it is nothing

1073
01:04:16,028 --> 01:04:23,980
ventured nothing gained you know what

1074
01:04:17,469 --> 01:04:25,959
I'm saying to you so alright so now we

1075
01:04:23,980 --> 01:04:27,639
should be able to start debugging this

1076
01:04:25,960 --> 01:04:31,980
thing and the first thing we need to do

1077
01:04:27,639 --> 01:04:37,318
bug is our split node like this thing

1078
01:04:31,980 --> 01:04:43,710
because that's not correct now right

1079
01:04:37,318 --> 01:04:46,389
this is also smaller now so I don't know

1080
01:04:43,710 --> 01:04:49,059
how we want to document that cache line

1081
01:04:46,389 --> 01:04:52,868
size because 64 divided by 12 is a weird

1082
01:04:49,059 --> 01:04:54,759
number right so I'm just gonna leave

1083
01:04:52,869 --> 01:04:57,509
that off and pretend we didn't think

1084
01:04:54,759 --> 01:05:00,990
about it and just say it's 12 bytes

1085
01:04:57,509 --> 01:05:00,990
aren't you happy

1086
01:05:06,690 --> 01:05:16,470
I think we're all good there so let's go

1087
01:05:13,530 --> 01:05:18,180
ahead and debug our split Katie node

1088
01:05:16,469 --> 01:05:20,669
thing it just just let's double check

1089
01:05:18,179 --> 01:05:25,169
that it's actually even plausibly doing

1090
01:05:20,670 --> 01:05:28,318
something so here we're counting values

1091
01:05:25,170 --> 01:05:29,670
by saying where is the total bounce the

1092
01:05:28,318 --> 01:05:33,029
bounds that we're looking at here what's

1093
01:05:29,670 --> 01:05:36,588
the center and let's go ahead and take

1094
01:05:33,030 --> 01:05:45,119
the counts of each of those right now

1095
01:05:36,588 --> 01:05:47,818
what I would say about this is we

1096
01:05:45,119 --> 01:05:58,130
probably want to just record the best we

1097
01:05:47,818 --> 01:06:02,489
probably want to do like something like

1098
01:05:58,130 --> 01:06:04,530
picking the maximum minimum sign like we

1099
01:06:02,489 --> 01:06:07,229
want to do something where we actually

1100
01:06:04,530 --> 01:06:09,180
test all three because we don't just

1101
01:06:07,230 --> 01:06:11,130
want to pick one that happens to have a

1102
01:06:09,179 --> 01:06:13,230
count but I don't know

1103
01:06:11,130 --> 01:06:14,730
I mean well like we might as well pick

1104
01:06:13,230 --> 01:06:16,920
the best one because we're doing a

1105
01:06:14,730 --> 01:06:20,480
second pass over it there's no reason

1106
01:06:16,920 --> 01:06:20,480
not to do that right

1107
01:06:26,559 --> 01:06:35,349
hard to say

1108
01:06:28,820 --> 01:06:35,350
anyway so the dimension yeah that like I

1109
01:06:39,880 --> 01:06:46,789
guess I would say like you you want the

1110
01:06:44,000 --> 01:06:49,159
you want the lowest maximum is that

1111
01:06:46,789 --> 01:06:54,139
right you want the lowest maximum value

1112
01:06:49,159 --> 01:06:59,149
let's just do that oh wait no don't do

1113
01:06:54,139 --> 01:07:01,819
that yet because I said I wanted to test

1114
01:06:59,150 --> 01:07:04,160
it apples to apples so pick the lowest

1115
01:07:01,820 --> 01:07:06,380
nice but I will do that next

1116
01:07:04,159 --> 01:07:08,149
after we debug all this crap so the

1117
01:07:06,380 --> 01:07:10,730
Katie node here we basically say like

1118
01:07:08,150 --> 01:07:17,170
look if we can add another one then we

1119
01:07:10,730 --> 01:07:17,170
do and we add the node count here we

1120
01:07:25,130 --> 01:07:41,400
we get the plane D we classify

1121
01:07:39,688 --> 01:07:45,978
everything as to whether it's on one or

1122
01:07:41,400 --> 01:07:45,979
the other side of a plane Oh

1123
01:07:47,159 --> 01:07:54,659
although I guess we should also assert

1124
01:07:52,739 --> 01:08:03,929
that both sides got something because

1125
01:07:54,659 --> 01:08:07,009
they should always presumably well

1126
01:08:03,929 --> 01:08:19,710
that's a really matter we pack those up

1127
01:08:07,009 --> 01:08:23,359
and then we're off right note index leaf

1128
01:08:19,710 --> 01:08:23,359
count stays zero in that branch

1129
01:08:48,969 --> 01:08:56,630
yeah so I would have thought that would

1130
01:08:51,738 --> 01:08:58,358
work it obviously didn't so we're

1131
01:08:56,630 --> 01:09:02,359
testing to see whether the element is

1132
01:08:58,359 --> 01:09:04,579
the maximum side of the box is on the

1133
01:09:02,359 --> 01:09:06,048
other side of the positive flame and the

1134
01:09:04,579 --> 01:09:06,948
negative side of the Box on the negative

1135
01:09:06,048 --> 01:09:12,170
side of the plane

1136
01:09:06,948 --> 01:09:15,619
I guess the problem there is eventually

1137
01:09:12,170 --> 01:09:18,619
you get down to something where you're

1138
01:09:15,619 --> 01:09:22,430
not yeah so I guess the problem that

1139
01:09:18,619 --> 01:09:25,579
we're gonna have is I can't not change

1140
01:09:22,430 --> 01:09:29,319
this because if I don't change this it's

1141
01:09:25,579 --> 01:09:31,059
just gonna always keep splitting

1142
01:09:29,319 --> 01:09:36,109
[Music]

1143
01:09:31,060 --> 01:09:41,390
potentially although since it cycles the

1144
01:09:36,109 --> 01:09:44,719
dimension each time still should have

1145
01:09:41,390 --> 01:09:48,680
been okay I'm gonna go ahead and just

1146
01:09:44,719 --> 01:09:50,750
step into this I'm not really sure why

1147
01:09:48,680 --> 01:09:54,500
that's failing so let's watch it fail

1148
01:09:50,750 --> 01:09:57,500
because I don't feel like I really have

1149
01:09:54,500 --> 01:10:01,698
a handle on it honestly so let's jump

1150
01:09:57,500 --> 01:10:05,420
through here and I guess what I'll do is

1151
01:10:01,698 --> 01:10:11,389
let me just let this thing go a bit for

1152
01:10:05,420 --> 01:10:16,130
a while so maybe I'll just like watch

1153
01:10:11,390 --> 01:10:21,369
this part I assume it breaks the first

1154
01:10:16,130 --> 01:10:21,369
split it breaks like right here right

1155
01:10:24,460 --> 01:10:30,050
okay so no it doesn't actually it has to

1156
01:10:27,859 --> 01:10:32,059
actually get down into a cycle at some

1157
01:10:30,050 --> 01:10:33,409
point by the way in case you're

1158
01:10:32,060 --> 01:10:34,910
wondering some things that don't work

1159
01:10:33,409 --> 01:10:37,639
with visual studio is what I'm doing

1160
01:10:34,909 --> 01:10:38,930
right now like I love that thing where I

1161
01:10:37,640 --> 01:10:40,369
was like wow visual studio is really

1162
01:10:38,930 --> 01:10:42,409
slow and everyone was like why do you

1163
01:10:40,369 --> 01:10:44,300
need to be fast can't you just use the

1164
01:10:42,409 --> 01:10:46,039
data break point no like there's more

1165
01:10:44,300 --> 01:10:48,260
things in a debugger when you want to

1166
01:10:46,039 --> 01:10:49,909
watch your program run I have so little

1167
01:10:48,260 --> 01:10:52,190
patience for modern programmers they

1168
01:10:49,909 --> 01:10:55,639
drive me nuts their standards are so

1169
01:10:52,189 --> 01:10:57,259
incredibly low it's like it's just it's

1170
01:10:55,640 --> 01:11:00,380
infuriating how low their standards are

1171
01:10:57,260 --> 01:11:01,369
right it's kind of like you know they

1172
01:11:00,380 --> 01:11:04,190
just

1173
01:11:01,369 --> 01:11:06,019
they build like a house that's like four

1174
01:11:04,189 --> 01:11:08,929
two by fours that are kind of all wonky

1175
01:11:06,020 --> 01:11:10,940
and then like a you know a a piece of

1176
01:11:08,930 --> 01:11:13,010
canvas across the top that they like

1177
01:11:10,939 --> 01:11:14,960
nailed in and they're like it's a house

1178
01:11:13,010 --> 01:11:15,980
and you're just like what are you

1179
01:11:14,960 --> 01:11:17,989
talking about

1180
01:11:15,979 --> 01:11:20,359
have you ever seen a house before like

1181
01:11:17,989 --> 01:11:21,649
no it's not but they're like now that's

1182
01:11:20,359 --> 01:11:22,819
great why would you need anything else

1183
01:11:21,649 --> 01:11:28,429
if it's raining you just go into the

1184
01:11:22,819 --> 01:11:30,920
canvas part unbelievable so this is

1185
01:11:28,430 --> 01:11:32,630
we've gotten into the loopback state now

1186
01:11:30,920 --> 01:11:36,199
right because I could see the stack kind

1187
01:11:32,630 --> 01:11:38,119
of proliferate so I'm just want to look

1188
01:11:36,199 --> 01:11:40,399
and see what's going on now so that I

1189
01:11:38,119 --> 01:11:42,289
have some understanding of of the

1190
01:11:40,399 --> 01:11:46,250
situation so here's the positive bounds

1191
01:11:42,289 --> 01:11:51,039
the negative bounds the positive count

1192
01:11:46,250 --> 01:11:51,039
and the negative count and

1193
01:12:14,198 --> 01:12:25,879
so I wonder what the Box bounds actually

1194
01:12:18,679 --> 01:12:31,489
are so I'm gonna step through here so

1195
01:12:25,880 --> 01:12:43,000
let's take a look at box bounds here is

1196
01:12:31,488 --> 01:12:46,698
box bounds oh so by the way here is I

1197
01:12:43,000 --> 01:12:51,050
think x3 I think I saw X 13 pixels out

1198
01:12:46,698 --> 01:12:55,549
there and I was just lauding his

1199
01:12:51,050 --> 01:12:57,110
debugger for saving our us all from the

1200
01:12:55,550 --> 01:13:01,369
collective disaster that's Visual Studio

1201
01:12:57,109 --> 01:13:05,299
I wanted to throw out a feature

1202
01:13:01,368 --> 01:13:09,380
suggestion that I find I have a problem

1203
01:13:05,300 --> 01:13:10,880
with a lot and there is a thing in

1204
01:13:09,380 --> 01:13:13,190
Visual Studio that sort of tries to

1205
01:13:10,880 --> 01:13:15,409
solve it but it sucks it would be cool

1206
01:13:13,189 --> 01:13:18,859
to have one in remedy and it'd make it

1207
01:13:15,408 --> 01:13:21,589
good so when you have something like box

1208
01:13:18,859 --> 01:13:24,649
bounds what I want to see is just a

1209
01:13:21,590 --> 01:13:28,819
quick summary of what the thing is over

1210
01:13:24,649 --> 01:13:30,710
here and I feel like there's a lot of

1211
01:13:28,819 --> 01:13:35,210
ways you could implement this feature

1212
01:13:30,710 --> 01:13:37,810
and I don't know like what the best

1213
01:13:35,210 --> 01:13:42,908
possible way to implement it would be

1214
01:13:37,810 --> 01:13:47,030
but there's like some suggestions right

1215
01:13:42,908 --> 01:13:50,448
so I think the ultimate suggestion is

1216
01:13:47,029 --> 01:13:56,618
can you just make a thing where in the

1217
01:13:50,448 --> 01:13:56,618
executable you can just define like this

1218
01:13:56,889 --> 01:13:59,889
like

1219
01:14:07,219 --> 01:14:46,380
and then like the name of the thing so

1220
01:14:21,538 --> 01:14:49,139
it'd be like that sort of thing you know

1221
01:14:46,380 --> 01:14:51,719
I'm saying so like basically there just

1222
01:14:49,139 --> 01:14:55,170
be like a function and then in here I

1223
01:14:51,719 --> 01:15:04,590
can just serialize this thing like out

1224
01:14:55,170 --> 01:15:05,550
to remedy dude I'm talking about does

1225
01:15:04,590 --> 01:15:07,949
this make any sense

1226
01:15:05,550 --> 01:15:10,500
so remedy just looks when it loads the

1227
01:15:07,948 --> 01:15:13,348
eggsy it just looks for any symbols that

1228
01:15:10,500 --> 01:15:16,050
are like remedy watch and then if I have

1229
01:15:13,349 --> 01:15:18,270
that I can just there's like a button in

1230
01:15:16,050 --> 01:15:19,770
here like a preference setting or like

1231
01:15:18,270 --> 01:15:23,340
probably a button probably a setting

1232
01:15:19,770 --> 01:15:24,809
like right here where it's just like do

1233
01:15:23,340 --> 01:15:25,889
you want to call those or not cuz

1234
01:15:24,809 --> 01:15:27,000
sometimes you want that turned off

1235
01:15:25,889 --> 01:15:28,288
because you're like you don't want to be

1236
01:15:27,000 --> 01:15:29,788
like reentering that code because you're

1237
01:15:28,288 --> 01:15:31,408
like debugging something in there but

1238
01:15:29,788 --> 01:15:33,809
then like other times you just click it

1239
01:15:31,408 --> 01:15:37,198
and it'll just call you and you print

1240
01:15:33,809 --> 01:15:39,119
out the thing does that make any sense I

1241
01:15:37,198 --> 01:15:40,919
don't know how achievable that is with

1242
01:15:39,118 --> 01:15:43,500
the current way that like remedy works

1243
01:15:40,920 --> 01:15:45,300
necessarily but just a thought because

1244
01:15:43,500 --> 01:15:48,988
then if you could just get that working

1245
01:15:45,300 --> 01:15:50,849
you could do like anything you want here

1246
01:15:48,988 --> 01:15:58,049
and I wouldn't do this by the way I

1247
01:15:50,849 --> 01:16:01,400
would probably actually do this I'd make

1248
01:15:58,050 --> 01:16:03,750
an H file that defines this thing right

1249
01:16:01,399 --> 01:16:07,948
because then you can also do stuff like

1250
01:16:03,750 --> 01:16:10,859
you know requested size and pixel buffer

1251
01:16:07,948 --> 01:16:12,448
and I don't know right like you could

1252
01:16:10,859 --> 01:16:14,368
imagine doing stuff where people can

1253
01:16:12,448 --> 01:16:21,478
dump images out to that and we

1254
01:16:14,368 --> 01:16:23,248
forms and who cares right and like that

1255
01:16:21,479 --> 01:16:24,899
would get you entirely out of the

1256
01:16:23,248 --> 01:16:26,639
business of even having any of those

1257
01:16:24,899 --> 01:16:29,249
features in remedy if you just have the

1258
01:16:26,639 --> 01:16:32,340
ability to take like bitmaps or strings

1259
01:16:29,248 --> 01:16:34,319
and they get dumped out to remedy and

1260
01:16:32,340 --> 01:16:37,409
then people can just write these and you

1261
01:16:34,319 --> 01:16:39,418
can even then have people share them so

1262
01:16:37,408 --> 01:16:41,609
they can just share all of their remedy

1263
01:16:39,418 --> 01:16:46,168
watches and you just like you would end

1264
01:16:41,609 --> 01:16:47,488
up just doing this at the top of your

1265
01:16:46,168 --> 01:16:52,918
program and then never think about it

1266
01:16:47,488 --> 01:16:56,098
again right I think that would be like

1267
01:16:52,918 --> 01:16:58,050
an awesome feature and unlike the stupid

1268
01:16:56,099 --> 01:17:00,689
crap like Visual Studio makes you write

1269
01:16:58,050 --> 01:17:03,570
a plugin that you have to install is

1270
01:17:00,689 --> 01:17:07,079
it's like there's already an executable

1271
01:17:03,569 --> 01:17:09,268
like you've loaded my executable why do

1272
01:17:07,078 --> 01:17:11,759
I have to build a plug-in right it makes

1273
01:17:09,269 --> 01:17:15,360
no sense but it's like that's where

1274
01:17:11,760 --> 01:17:17,309
their head is that they're often you

1275
01:17:15,359 --> 01:17:19,378
know they're often we don't know how

1276
01:17:17,309 --> 01:17:21,510
computer works land which so whatever so

1277
01:17:19,378 --> 01:17:23,878
I don't know how achievable that is but

1278
01:17:21,510 --> 01:17:26,570
that seemed to me like the shortest path

1279
01:17:23,878 --> 01:17:29,340
towards a really baller watch window and

1280
01:17:26,569 --> 01:17:31,648
you wouldn't even have to then do most

1281
01:17:29,340 --> 01:17:34,918
additional features cuz that watch

1282
01:17:31,649 --> 01:17:36,389
context could even pass like parameters

1283
01:17:34,918 --> 01:17:38,698
like you know you got like the string

1284
01:17:36,389 --> 01:17:40,649
thing in there where you do like string

1285
01:17:38,698 --> 01:17:43,288
count those could be things that get

1286
01:17:40,649 --> 01:17:45,959
passed to this watch thing too so the

1287
01:17:43,288 --> 01:17:49,018
watch struct can just add things on to

1288
01:17:45,958 --> 01:17:50,519
the bottom over time and you know old

1289
01:17:49,019 --> 01:17:52,469
stuff would still work cuz it doesn't

1290
01:17:50,519 --> 01:17:55,708
mean if it doesn't ever touch lower down

1291
01:17:52,469 --> 01:17:57,149
it won't break right so you just keep

1292
01:17:55,708 --> 01:17:58,769
adding stuff to that struct and it's

1293
01:17:57,149 --> 01:18:01,409
just like a giant context you hand to

1294
01:17:58,769 --> 01:18:04,530
the thing they fill it out and back it

1295
01:18:01,408 --> 01:18:10,618
comes and now you're you know you're in

1296
01:18:04,529 --> 01:18:12,029
baller town right so I don't know that

1297
01:18:10,618 --> 01:18:13,828
seemed really simple I wanted to throw

1298
01:18:12,029 --> 01:18:15,779
it out there because I was holding off

1299
01:18:13,828 --> 01:18:17,158
on suggestions like that because you

1300
01:18:15,779 --> 01:18:18,719
know remedy was kind of just like

1301
01:18:17,158 --> 01:18:20,728
getting started and adding like the

1302
01:18:18,719 --> 01:18:22,378
basic features but remedies getting to

1303
01:18:20,729 --> 01:18:23,939
the point now where it has all the basic

1304
01:18:22,378 --> 01:18:25,439
features so I thought now might be a

1305
01:18:23,939 --> 01:18:27,329
good time to think about like what's the

1306
01:18:25,439 --> 01:18:28,000
easiest way to add like features that

1307
01:18:27,328 --> 01:18:29,590
are just ball

1308
01:18:28,000 --> 01:18:31,569
they have nothing to do with basic

1309
01:18:29,590 --> 01:18:33,400
debugging they're more like hey this is

1310
01:18:31,569 --> 01:18:38,649
cool and most of our girls don't even

1311
01:18:33,399 --> 01:18:41,229
have this right anyway that's all okay

1312
01:18:38,649 --> 01:18:44,829
so let me go ahead and try to figure out

1313
01:18:41,229 --> 01:18:46,839
what the heck is going on here but I do

1314
01:18:44,829 --> 01:18:49,210
think that that's a problem again

1315
01:18:46,840 --> 01:18:53,170
because we're never gonna maybe get out

1316
01:18:49,210 --> 01:18:57,010
of that split I guess it is kind of hard

1317
01:18:53,170 --> 01:19:00,329
to say like whether we will or won't but

1318
01:18:57,010 --> 01:19:00,329
yeah all right hold on a second

1319
01:19:06,239 --> 01:19:12,670
okay so taking a look now if I I'm in

1320
01:19:10,029 --> 01:19:17,590
the like bad part so let me take a look

1321
01:19:12,670 --> 01:19:19,029
at what those box bounds are and you can

1322
01:19:17,590 --> 01:19:21,039
see why I'm like motivated for that

1323
01:19:19,029 --> 01:19:23,789
feature cuz like I just want the box

1324
01:19:21,039 --> 01:19:26,560
bounds to show like these three values

1325
01:19:23,789 --> 01:19:28,269
these three values and then the

1326
01:19:26,560 --> 01:19:30,190
dimension so the subtraction of those

1327
01:19:28,270 --> 01:19:32,440
values right and that's a really easy

1328
01:19:30,189 --> 01:19:35,469
piece of code for me to write in my

1329
01:19:32,439 --> 01:19:38,199
thing but it'd be really hard for you to

1330
01:19:35,470 --> 01:19:40,060
add that because you'd need to have like

1331
01:19:38,199 --> 01:19:42,699
a scripting language or something that

1332
01:19:40,060 --> 01:19:43,630
like let me tell you what I want to see

1333
01:19:42,699 --> 01:19:45,789
and some of those things have to be

1334
01:19:43,630 --> 01:19:48,069
expressions just like it just doesn't

1335
01:19:45,789 --> 01:19:49,479
seem like a good path to go down like

1336
01:19:48,069 --> 01:19:49,929
having a scripting language in a

1337
01:19:49,479 --> 01:19:51,879
debugger

1338
01:19:49,930 --> 01:19:54,310
because you've already loaded my actual

1339
01:19:51,880 --> 01:19:56,380
code so calling my code seems like the

1340
01:19:54,310 --> 01:20:00,270
easiest way because then the debugger

1341
01:19:56,380 --> 01:20:03,970
don't have to do nothing you know so

1342
01:20:00,270 --> 01:20:10,000
anyway so in the Box bounds here where

1343
01:20:03,970 --> 01:20:11,710
we've got like these values I guess the

1344
01:20:10,000 --> 01:20:16,140
answer is we're not splitting because

1345
01:20:11,710 --> 01:20:16,140
why tell me why

1346
01:20:18,270 --> 01:20:34,110
I guess because some of these are just

1347
01:20:21,750 --> 01:20:36,420
right on top of each other yeah so I

1348
01:20:34,109 --> 01:20:38,579
guess the answer there and I'm not sure

1349
01:20:36,420 --> 01:20:40,350
if this is the right answer or not but I

1350
01:20:38,579 --> 01:20:42,059
guess the answer there is like if it

1351
01:20:40,350 --> 01:20:45,780
gets down to a degenerate case where you

1352
01:20:42,060 --> 01:20:54,660
cannot split then I guess what we do is

1353
01:20:45,779 --> 01:20:56,639
just treat that as a leaf right so so I

1354
01:20:54,659 --> 01:20:58,559
guess like where's my split Kitty here

1355
01:20:56,640 --> 01:21:06,350
it is so I guess what we would do is

1356
01:20:58,560 --> 01:21:10,320
like try to do this thing first and if

1357
01:21:06,350 --> 01:21:20,910
the count on either side is equal to the

1358
01:21:10,319 --> 01:21:24,380
source then we just don't split right so

1359
01:21:20,909 --> 01:21:24,380
I think it's this

1360
01:21:33,948 --> 01:21:38,969
so we'd come through here and we'd try

1361
01:21:36,479 --> 01:21:42,359
to do this we would see whether or not

1362
01:21:38,969 --> 01:21:44,939
we could do anything about it if we

1363
01:21:42,359 --> 01:21:47,279
can't do anything about it then we

1364
01:21:44,939 --> 01:21:51,599
meaning if this split doesn't work so if

1365
01:21:47,279 --> 01:21:56,189
we'd say like if positive count is less

1366
01:21:51,600 --> 01:21:57,780
than source count and negative count is

1367
01:21:56,189 --> 01:22:00,179
less than source count so if we're

1368
01:21:57,779 --> 01:22:06,109
always if we're always passing a lower

1369
01:22:00,180 --> 01:22:08,730
source then we do this if we can't right

1370
01:22:06,109 --> 01:22:11,670
then we're gonna set the KD index

1371
01:22:08,729 --> 01:22:16,799
backwards right so we're gonna say hay

1372
01:22:11,670 --> 01:22:20,100
bale this is now a leaf right and so

1373
01:22:16,800 --> 01:22:23,400
it'll it'll change those now we don't

1374
01:22:20,100 --> 01:22:27,570
want to actually add this thing until

1375
01:22:23,399 --> 01:22:30,750
then so I would say that this stuff

1376
01:22:27,569 --> 01:22:34,679
actually only happens like in here at

1377
01:22:30,750 --> 01:22:38,659
that point and so we have the ability to

1378
01:22:34,680 --> 01:22:42,449
bail if the actual split procedure fails

1379
01:22:38,659 --> 01:22:47,448
how does that work wait aren't we

1380
01:22:42,448 --> 01:22:47,448
supposed to stop somewhere

1381
01:22:49,179 --> 01:22:55,000
well I guess that succeeded then okay so

1382
01:22:53,408 --> 01:22:57,939
now I'm assuming we're gonna have the

1383
01:22:55,000 --> 01:23:00,819
problem of now we gotta debug our are

1384
01:22:57,939 --> 01:23:09,509
actual like ray cast routine and that's

1385
01:23:00,819 --> 01:23:09,509
fine so let's take a look at at that

1386
01:23:18,300 --> 01:23:28,659
okay so here we're gonna push this onto

1387
01:23:26,380 --> 01:23:31,449
the stack the start side bit and here

1388
01:23:28,658 --> 01:23:35,198
we're going to push we're going to load

1389
01:23:31,448 --> 01:23:41,229
out the packed value right and we're

1390
01:23:35,198 --> 01:23:49,539
gonna do the next split and we're

1391
01:23:41,229 --> 01:24:09,269
splittin and here we're doing an actual

1392
01:23:49,539 --> 01:24:09,269
leaf okay

1393
01:24:15,909 --> 01:24:21,220
so this says it had to check the other

1394
01:24:18,560 --> 01:24:21,220
side as well

1395
01:24:21,489 --> 01:24:34,880
what's the stack depth at this point

1396
01:24:24,579 --> 01:24:37,300
seven so I'm just going to watch what

1397
01:24:34,880 --> 01:24:37,300
happens here

1398
01:24:54,828 --> 01:25:13,349
so it's sort of working let me run it

1399
01:25:00,149 --> 01:25:19,460
for a while and just see whoa

1400
01:25:13,349 --> 01:25:22,909
access violation writing location really

1401
01:25:19,460 --> 01:25:22,908
hold on a second

1402
01:25:34,159 --> 01:25:39,809
so this does not bode well like I said

1403
01:25:38,310 --> 01:25:42,690
so I'm assuming there's a bug in there

1404
01:25:39,810 --> 01:25:47,789
or are we really screwed up somehow

1405
01:25:42,689 --> 01:25:50,699
because even in debug mode that first

1406
01:25:47,789 --> 01:25:54,350
ray cast pass should not take anywhere

1407
01:25:50,699 --> 01:25:54,349
near this long right

1408
01:26:10,579 --> 01:26:27,119
hmm so what's going on here if I do a

1409
01:26:15,960 --> 01:26:40,800
break we're in here the depth is only

1410
01:26:27,119 --> 01:26:44,250
for weird are we just oscillate Alou

1411
01:26:40,800 --> 01:26:47,449
pier where we oscillate it looks like

1412
01:26:44,250 --> 01:26:47,448
that's exactly what's happening

1413
01:26:57,020 --> 01:27:00,370
but let's verify that

1414
01:27:08,039 --> 01:27:15,029
I mean it's hard to say I should

1415
01:27:09,630 --> 01:27:18,590
probably print out the log also I'm kind

1416
01:27:15,029 --> 01:27:18,590
of curious how many of these did we make

1417
01:27:21,319 --> 01:27:29,429
not very many so even if we were to walk

1418
01:27:27,270 --> 01:27:31,530
them all so our walk must be screwed up

1419
01:27:29,430 --> 01:27:35,159
right because even if we were to walk

1420
01:27:31,529 --> 01:27:37,139
all of these things then you wouldn't be

1421
01:27:35,159 --> 01:27:41,880
able to spend this long testing them

1422
01:27:37,140 --> 01:27:44,460
right it's just not I don't think it's

1423
01:27:41,880 --> 01:27:46,140
theoretically feasible let's see whether

1424
01:27:44,460 --> 01:27:49,230
or not we get caught in an infinite loop

1425
01:27:46,140 --> 01:27:51,090
by going into a build that probably

1426
01:27:49,229 --> 01:28:05,279
could test everything if it wanted to so

1427
01:27:51,090 --> 01:28:09,920
let's do a release mode so it it does

1428
01:28:05,279 --> 01:28:18,809
complete so it's just like a very bad

1429
01:28:09,920 --> 01:28:20,609
walk I guess and it doesn't produce a

1430
01:28:18,810 --> 01:28:23,610
similar result although I guess we don't

1431
01:28:20,609 --> 01:28:26,639
really know for sure because we do have

1432
01:28:23,609 --> 01:28:29,339
error in the system in general but yeah

1433
01:28:26,640 --> 01:28:34,980
so like it seems really bad I mean I'm

1434
01:28:29,340 --> 01:28:37,140
assuming that it shouldn't be that bad

1435
01:28:34,979 --> 01:28:41,599
no matter how we ended up doing it it

1436
01:28:37,140 --> 01:28:47,000
shouldn't be as horrible as that right

1437
01:28:41,600 --> 01:28:50,780
so I'm not sure I'm not sure we'll see

1438
01:28:47,000 --> 01:28:54,359
so let's see I think we're almost done

1439
01:28:50,779 --> 01:28:55,679
about 15 minutes left so I guess we'll

1440
01:28:54,359 --> 01:28:57,299
just try to do a little debugging here

1441
01:28:55,680 --> 01:29:00,650
and then next weekend we'll try to

1442
01:28:57,300 --> 01:29:00,650
actually get to the bottom of everything

1443
01:29:01,609 --> 01:29:07,069
so yeah that just takes that's that's

1444
01:29:04,380 --> 01:29:07,069
just really weird

1445
01:29:11,090 --> 01:29:16,559
hmm all right so let me also check to

1446
01:29:14,969 --> 01:29:18,179
make sure that this finishes in a

1447
01:29:16,559 --> 01:29:20,369
reasonable amount of time if I actually

1448
01:29:18,179 --> 01:29:21,809
turn on debug mode in terms of that

1449
01:29:20,368 --> 01:29:23,398
initial first one because I'm assuming

1450
01:29:21,809 --> 01:29:25,409
that it does but actually guess I don't

1451
01:29:23,399 --> 01:29:26,610
know so I'm gonna go into debug mode and

1452
01:29:25,408 --> 01:29:27,688
I'm gonna make sure that that initial

1453
01:29:26,609 --> 01:29:32,488
thing should check complete in a

1454
01:29:27,689 --> 01:29:36,149
reasonable not time right yeah so we

1455
01:29:32,488 --> 01:29:37,938
should expect that roughly we shouldn't

1456
01:29:36,149 --> 01:29:40,649
expect our routine to be that much worse

1457
01:29:37,939 --> 01:29:43,320
that it couldn't you know get at least

1458
01:29:40,649 --> 01:29:46,590
that far so let's take a look what's the

1459
01:29:43,319 --> 01:29:48,148
problem and again we don't really know

1460
01:29:46,590 --> 01:29:49,708
if the tree is built properly so we may

1461
01:29:48,149 --> 01:29:53,369
want to actually go through and work out

1462
01:29:49,708 --> 01:29:57,448
by hand to what extent the tree makes

1463
01:29:53,368 --> 01:29:58,978
sense but if we take a look at the the

1464
01:29:57,448 --> 01:30:02,248
new routine you can see us doing the

1465
01:29:58,979 --> 01:30:04,829
testing here and again that's producing

1466
01:30:02,248 --> 01:30:07,800
the T ray stuff which is what we

1467
01:30:04,828 --> 01:30:11,398
actually need it to produce right and

1468
01:30:07,800 --> 01:30:16,320
then we're doing the testing on the KD

1469
01:30:11,399 --> 01:30:17,729
tree as we go down and yeah we just know

1470
01:30:16,319 --> 01:30:20,099
whether we can whether we need to test

1471
01:30:17,729 --> 01:30:23,010
the other side by using whether we get

1472
01:30:20,099 --> 01:30:26,168
on the other side of the plain D right

1473
01:30:23,010 --> 01:30:26,168
[Music]

1474
01:30:43,149 --> 01:30:48,679
so I suppose one thing we could test is

1475
01:30:46,279 --> 01:30:51,590
just to see how long this thing takes

1476
01:30:48,680 --> 01:30:54,050
assuming that we only ever go all the

1477
01:30:51,590 --> 01:31:05,180
way down one side and that would just

1478
01:30:54,050 --> 01:31:08,300
look like this right and we would expect

1479
01:31:05,180 --> 01:31:13,130
that to be basically instant right and

1480
01:31:08,300 --> 01:31:18,650
it like totally isn't so it seems really

1481
01:31:13,130 --> 01:31:22,579
weird because that doesn't have to do

1482
01:31:18,649 --> 01:31:25,069
like anything right it's only gonna

1483
01:31:22,579 --> 01:31:29,689
descend down like the briefest set of

1484
01:31:25,069 --> 01:31:34,189
things and then it's gonna like be done

1485
01:31:29,689 --> 01:31:35,989
like it shouldn't I don't know why it

1486
01:31:34,189 --> 01:31:38,289
would be having that why it would take

1487
01:31:35,989 --> 01:31:38,289
that long

1488
01:31:55,279 --> 01:31:58,409
[Music]

1489
01:32:09,250 --> 01:32:13,220
I'm just trying to avoid starting a full

1490
01:32:11,810 --> 01:32:16,250
debug pass on this thing because we

1491
01:32:13,220 --> 01:32:17,570
don't have time to actually do it so I'm

1492
01:32:16,250 --> 01:32:24,680
thinking we gotta wait till next weekend

1493
01:32:17,569 --> 01:32:26,750
but it's like yeah I mean something

1494
01:32:24,680 --> 01:32:30,500
seems really wrong here so let's take a

1495
01:32:26,750 --> 01:32:32,630
look at some of these count values so is

1496
01:32:30,500 --> 01:32:38,000
it possible for me to just get that

1497
01:32:32,630 --> 01:32:40,880
information out so like this should tell

1498
01:32:38,000 --> 01:32:49,430
me right we have a thing that tests the

1499
01:32:40,880 --> 01:32:51,350
walk I want to say so if we look at I

1500
01:32:49,430 --> 01:32:56,530
just want to see like how many these

1501
01:32:51,350 --> 01:33:01,820
things were tested so it says like that

1502
01:32:56,529 --> 01:33:06,340
the well I guess we don't record

1503
01:33:01,819 --> 01:33:09,380
partitions so we should do that right so

1504
01:33:06,340 --> 01:33:12,529
total leaves tested is here but

1505
01:33:09,380 --> 01:33:18,369
partitions tested isn't so we need like

1506
01:33:12,529 --> 01:33:18,369
this here to do the partition test right

1507
01:33:39,868 --> 01:33:42,868
okay

1508
01:33:45,328 --> 01:33:53,009
so yeah I just don't really know so

1509
01:33:55,408 --> 01:34:01,899
let's take a look at what these numbers

1510
01:33:57,578 --> 01:34:04,960
compare to be so if I set the lighting

1511
01:34:01,899 --> 01:34:08,969
to use the old KD what's what do those

1512
01:34:04,960 --> 01:34:08,969
numbers look like versus the new one so

1513
01:34:22,859 --> 01:34:33,939
[Music]

1514
01:34:29,279 --> 01:34:39,238
I mean the answer here is that the

1515
01:34:33,939 --> 01:34:43,029
number of leafs is wicked high right

1516
01:34:39,238 --> 01:34:46,959
because this is how many leaves were

1517
01:34:43,029 --> 01:34:48,158
tested with the new system this is how

1518
01:34:46,960 --> 01:34:52,679
many leaves were tested with the old

1519
01:34:48,158 --> 01:34:55,868
system and we're not even doing the walk

1520
01:34:52,679 --> 01:34:58,300
so something is really broken there

1521
01:34:55,868 --> 01:35:00,460
possibly because of the way that we're

1522
01:34:58,300 --> 01:35:12,210
actually doing the dividing it could

1523
01:35:00,460 --> 01:35:12,210
just be that our tree is that bad right

1524
01:35:16,109 --> 01:35:21,679
so I don't know so let's take a look and

1525
01:35:19,198 --> 01:35:27,719
see what happens if we try to upgrade

1526
01:35:21,679 --> 01:35:30,199
this a little bit right where we just

1527
01:35:27,719 --> 01:35:34,170
spend more time building the split box

1528
01:35:30,198 --> 01:35:36,960
and we see if we can do better than this

1529
01:35:34,170 --> 01:35:40,199
super super super crappy version because

1530
01:35:36,960 --> 01:35:43,289
since now this one actually has to

1531
01:35:40,198 --> 01:35:48,779
divide the boxes up and put them on

1532
01:35:43,289 --> 01:35:50,609
either side it creates a constraint that

1533
01:35:48,779 --> 01:35:53,809
the tree build has to actually not be

1534
01:35:50,609 --> 01:35:53,809
super sucky

1535
01:36:08,109 --> 01:36:15,380
so maybe what we'll do is say okay if we

1536
01:36:12,680 --> 01:36:17,900
take and do this check the same way that

1537
01:36:15,380 --> 01:36:25,159
we're doing down here so we're gonna do

1538
01:36:17,899 --> 01:36:31,099
this right we're gonna do this I don't

1539
01:36:25,159 --> 01:36:35,899
actually know why we're bothering with

1540
01:36:31,100 --> 01:36:38,360
this because we don't need that right so

1541
01:36:35,899 --> 01:36:40,219
this code is just doing account a count

1542
01:36:38,359 --> 01:36:49,069
be like that's all this thing needs to

1543
01:36:40,219 --> 01:36:49,869
do right and this doesn't need to be

1544
01:36:49,069 --> 01:36:52,729
there at all

1545
01:36:49,869 --> 01:37:00,099
so all we need to do is sweep through

1546
01:36:52,729 --> 01:37:02,269
here and see like using the classifier

1547
01:37:00,100 --> 01:37:05,150
the exact same thing we were doing

1548
01:37:02,270 --> 01:37:07,310
before to see what would happen in these

1549
01:37:05,149 --> 01:37:17,899
cases and then we'll just pick the

1550
01:37:07,310 --> 01:37:20,090
lowest min value right so we'll say so

1551
01:37:17,899 --> 01:37:24,289
when we come through here we'll say that

1552
01:37:20,090 --> 01:37:31,119
if count a or I should say min count min

1553
01:37:24,289 --> 01:37:36,619
count equals min count a count B right

1554
01:37:31,119 --> 01:37:43,460
and then we'll say if the min count here

1555
01:37:36,619 --> 01:37:44,930
is less than the lowest min count or I

1556
01:37:43,460 --> 01:37:46,430
should say if the lowest min count is

1557
01:37:44,930 --> 01:37:48,289
greater than the min count then we'll

1558
01:37:46,430 --> 01:37:54,619
say that the lowest min count equals the

1559
01:37:48,289 --> 01:37:57,529
min count and take take it

1560
01:37:54,619 --> 01:38:01,880
right so this is how we'll pick our

1561
01:37:57,529 --> 01:38:06,829
class we'll say whichever one is I'm

1562
01:38:01,880 --> 01:38:09,109
sorry maximum so whichever count is

1563
01:38:06,829 --> 01:38:11,140
higher we'll take that and what we want

1564
01:38:09,109 --> 01:38:14,420
to do is minimize our maximum count

1565
01:38:11,140 --> 01:38:17,600
right so it's just a min max 3 at that

1566
01:38:14,420 --> 01:38:19,100
point and I don't think that's gonna do

1567
01:38:17,600 --> 01:38:23,690
it because I think we've got other bugs

1568
01:38:19,100 --> 01:38:28,940
but you know we'll find out right so

1569
01:38:23,689 --> 01:38:32,000
we'll see assuming that was that a

1570
01:38:28,939 --> 01:38:33,319
release build yet was I was like if that

1571
01:38:32,000 --> 01:38:41,270
wasn't a release build then that was

1572
01:38:33,319 --> 01:38:42,349
actually improvement but it's not so at

1573
01:38:41,270 --> 01:38:45,320
this point I might want to actually

1574
01:38:42,350 --> 01:38:48,220
start printing out the tree as well just

1575
01:38:45,319 --> 01:38:55,579
so we can see what the tree looks like

1576
01:38:48,220 --> 01:39:01,730
at least the top bounds of it maybe I

1577
01:38:55,579 --> 01:39:04,359
could also try dumping out the like well

1578
01:39:01,729 --> 01:39:04,359
yeah no no

1579
01:39:10,039 --> 01:39:15,149
let's take a look at HH light prof and

1580
01:39:12,840 --> 01:39:19,949
see what that like the total box count

1581
01:39:15,149 --> 01:39:22,799
and stuff is after we're done so here's

1582
01:39:19,949 --> 01:39:26,159
the box count before we do it right or

1583
01:39:22,800 --> 01:39:33,500
is that after does that include ones we

1584
01:39:26,159 --> 01:39:33,500
add or not

1585
01:39:36,199 --> 01:39:47,039
well we add those in there right so wait

1586
01:39:40,229 --> 01:39:55,189
why isn't that number higher than right

1587
01:39:47,039 --> 01:39:55,189
cuz we add box storage here and like

1588
01:39:58,399 --> 01:40:11,309
what's going on something's weird here

1589
01:40:08,689 --> 01:40:20,879
so if we look at what the total box

1590
01:40:11,310 --> 01:40:22,140
count is it's not different really hmm

1591
01:40:20,880 --> 01:40:24,020
and you know what I might want to do too

1592
01:40:22,140 --> 01:40:27,539
is make these print deaths more

1593
01:40:24,020 --> 01:40:30,540
printouts more labeled so what I might

1594
01:40:27,539 --> 01:40:33,029
want to do is say like in here let me

1595
01:40:30,539 --> 01:40:37,079
label which one we're doing so before we

1596
01:40:33,029 --> 01:40:39,500
go anywhere further in here we'll just

1597
01:40:37,079 --> 01:40:39,500
do like

1598
01:41:03,420 --> 01:41:07,868
so here we'll just say look if we're

1599
01:41:05,738 --> 01:41:10,149
using the old KD we'll say old if we're

1600
01:41:07,868 --> 01:41:13,118
using the new KD we'll say new that way

1601
01:41:10,149 --> 01:41:15,848
we can see which one we are in really

1602
01:41:13,118 --> 01:41:20,828
easy in the printout right so here I can

1603
01:41:15,849 --> 01:41:22,539
say like okay that's the new one and

1604
01:41:20,828 --> 01:41:25,479
then I can go ahead and switch it to the

1605
01:41:22,539 --> 01:41:28,420
old one but something's not adding up

1606
01:41:25,479 --> 01:41:31,709
here we've got a pretty obvious bug

1607
01:41:28,420 --> 01:41:34,000
happening and we just got to go fix that

1608
01:41:31,710 --> 01:41:39,908
probably an index bug just like I said

1609
01:41:34,000 --> 01:41:41,649
at the beginning of the stream so if you

1610
01:41:39,908 --> 01:41:43,868
look at these two right here's the old

1611
01:41:41,649 --> 01:41:48,098
one and here's the new one so we didn't

1612
01:41:43,868 --> 01:41:51,309
add that many more leaves though is the

1613
01:41:48,099 --> 01:41:53,529
thing so if we didn't add that many more

1614
01:41:51,310 --> 01:41:55,570
leaves why are we testing so many more

1615
01:41:53,529 --> 01:41:57,939
leaves how is that possible like it

1616
01:41:55,569 --> 01:42:00,039
shouldn't be possible because the leaves

1617
01:41:57,939 --> 01:42:04,118
always have to be contiguous so it's not

1618
01:42:00,039 --> 01:42:07,948
like like any given node can only refer

1619
01:42:04,118 --> 01:42:10,948
to one set of leaves so we've got a

1620
01:42:07,948 --> 01:42:10,948
problem

1621
01:42:11,849 --> 01:42:18,449
something's busted in the way that we're

1622
01:42:14,260 --> 01:42:18,449
pulling out the leaf labels right

1623
01:42:22,260 --> 01:42:27,699
because it should not be possible to

1624
01:42:24,639 --> 01:42:30,609
test that many more leaves using only

1625
01:42:27,698 --> 01:42:35,339
one only a walk down one side of the

1626
01:42:30,609 --> 01:42:35,339
tree how is that possible

1627
01:42:35,880 --> 01:42:39,599
something's something's up

1628
01:42:54,800 --> 01:42:57,878
[Music]

1629
01:43:00,300 --> 01:43:11,710
[Music]

1630
01:43:15,800 --> 01:43:23,670
yeah I'm not seeing it I'm not seeing it

1631
01:43:19,469 --> 01:43:26,340
I mean here's another example right so

1632
01:43:23,670 --> 01:43:28,859
let's just see if we just nerf this

1633
01:43:26,340 --> 01:43:32,730
entirely so now we are literally only

1634
01:43:28,859 --> 01:43:36,078
doing the first run down the tree how

1635
01:43:32,729 --> 01:43:36,078
many leaves are we testing

1636
01:43:50,359 --> 01:43:58,269
so that's the old one let's switch to

1637
01:43:55,729 --> 01:43:58,269
the new one

1638
01:44:12,949 --> 01:44:22,729
I mean isn't that just so broken like

1639
01:44:19,310 --> 01:44:25,160
something is so I'm totally at a loss to

1640
01:44:22,729 --> 01:44:27,829
explain what's going on here how on

1641
01:44:25,159 --> 01:44:32,359
earth could you possibly test five

1642
01:44:27,829 --> 01:44:36,019
million leaf nodes so which is ten times

1643
01:44:32,359 --> 01:44:38,539
more than the old algorithm without ever

1644
01:44:36,020 --> 01:44:45,620
doing a tree walk you're only testing

1645
01:44:38,539 --> 01:44:48,560
one node at that point right because the

1646
01:44:45,619 --> 01:44:54,880
very first time you ever test any Leafs

1647
01:44:48,560 --> 01:44:57,800
at all you exit the loop what's going on

1648
01:44:54,880 --> 01:45:01,489
this is like impossible like this should

1649
01:44:57,800 --> 01:45:05,090
not even be remotely possible to do what

1650
01:45:01,489 --> 01:45:10,819
we're seeing it should be should be an

1651
01:45:05,090 --> 01:45:13,340
actually impossible right so let's watch

1652
01:45:10,819 --> 01:45:19,219
what happens because I'm totally at a

1653
01:45:13,340 --> 01:45:21,500
loss to explain that let's look at the

1654
01:45:19,220 --> 01:45:24,289
first time through here's us walking

1655
01:45:21,500 --> 01:45:27,170
down right and we walk down to a depth

1656
01:45:24,289 --> 01:45:32,149
of whatever we're going to test some

1657
01:45:27,170 --> 01:45:34,340
leaves I guess to be fair there's a lot

1658
01:45:32,149 --> 01:45:36,559
of them way too many so I think our

1659
01:45:34,340 --> 01:45:39,310
splitter is still totally busted

1660
01:45:36,560 --> 01:45:39,310
right

1661
01:45:43,430 --> 01:45:48,300
so I I mean one answer is like somehow

1662
01:45:46,109 --> 01:45:52,259
we really just have that many leaves in

1663
01:45:48,300 --> 01:46:01,949
this tree in the in that many leaves in

1664
01:45:52,260 --> 01:46:03,690
the one node yeah and then we exit so

1665
01:46:01,949 --> 01:46:15,149
the answer is there's really just that

1666
01:46:03,689 --> 01:46:17,579
many so 43 testing 43 leaves it's kind

1667
01:46:15,149 --> 01:46:25,069
of nuts the testing only 43 leaves per

1668
01:46:17,579 --> 01:46:27,869
raycast is still so slow right but it is

1669
01:46:25,069 --> 01:46:30,299
so how did we end up in a situation

1670
01:46:27,869 --> 01:46:33,989
where there were 43 leaves we couldn't

1671
01:46:30,300 --> 01:46:38,310
split I mean how is that possible it

1672
01:46:33,989 --> 01:46:39,630
doesn't seem likely you know right it

1673
01:46:38,310 --> 01:46:43,380
seems like our split katie is just

1674
01:46:39,630 --> 01:46:45,329
really bad or something so we come

1675
01:46:43,380 --> 01:46:48,060
through here we say look we're gonna

1676
01:46:45,329 --> 01:46:53,489
pick a splitter and it's gonna be the

1677
01:46:48,060 --> 01:46:58,920
centroid of you know the the boxes we

1678
01:46:53,489 --> 01:47:03,199
all add it up and then we're gonna go

1679
01:46:58,920 --> 01:47:03,199
through and if that's the wrong one

1680
01:47:09,069 --> 01:47:14,409
yeah so we're gonna move through here

1681
01:47:10,970 --> 01:47:18,199
we're gonna say alright if the box max

1682
01:47:14,409 --> 01:47:21,559
is greater than the class distance then

1683
01:47:18,199 --> 01:47:29,779
the count for a goes up if the box min

1684
01:47:21,560 --> 01:47:32,450
is less than the class distance then

1685
01:47:29,779 --> 01:47:35,239
count B goes up and whichever the larger

1686
01:47:32,449 --> 01:47:45,260
the two is if that is less than the best

1687
01:47:35,239 --> 01:47:46,849
we have we record it right so then we go

1688
01:47:45,260 --> 01:47:49,310
in through here and maybe this code is

1689
01:47:46,850 --> 01:47:50,600
busted and just isn't ever working so

1690
01:47:49,310 --> 01:48:00,200
then we come through and we say alright

1691
01:47:50,600 --> 01:48:06,289
let's add these we say okay let's build

1692
01:48:00,199 --> 01:48:10,699
erect min max for the Box we're looking

1693
01:48:06,289 --> 01:48:16,789
at let's see if the maximum is on the

1694
01:48:10,699 --> 01:48:22,909
other side of the flame D or if the

1695
01:48:16,789 --> 01:48:25,399
minimum is on the other side sort him

1696
01:48:22,909 --> 01:48:29,510
and record the bounds which seems like

1697
01:48:25,399 --> 01:48:32,539
what you would want if we were able to

1698
01:48:29,510 --> 01:48:36,170
split at all so if anybody went on one

1699
01:48:32,539 --> 01:48:38,500
side of the other then we record the

1700
01:48:36,170 --> 01:48:38,500
split

1701
01:48:43,199 --> 01:48:55,569
otherwise we don't I mean is that really

1702
01:48:50,920 --> 01:48:59,100
failing that often like how is that

1703
01:48:55,569 --> 01:49:01,210
possible just seems so not possible I

1704
01:48:59,100 --> 01:49:04,560
feel like we must be working with these

1705
01:49:01,210 --> 01:49:04,560
boxes in an incorrect way

1706
01:49:15,649 --> 01:49:21,929
because since we have like mostly boxes

1707
01:49:18,989 --> 01:49:23,819
that are just like grids of boxes how

1708
01:49:21,930 --> 01:49:26,360
the heck could you not split them

1709
01:49:23,819 --> 01:49:32,189
they're not overlapping most of the time

1710
01:49:26,359 --> 01:49:33,569
right even if we have some places where

1711
01:49:32,189 --> 01:49:35,939
there's two boxes on top of each that's

1712
01:49:33,569 --> 01:49:37,969
like that's two total boxes everything

1713
01:49:35,939 --> 01:49:46,199
else should still be able to be

1714
01:49:37,970 --> 01:49:49,909
separated that way I guess since we

1715
01:49:46,199 --> 01:49:53,130
probably want this to be like a equal to

1716
01:49:49,909 --> 01:49:56,960
in this case though here's one thing I

1717
01:49:53,130 --> 01:49:56,960
would say so like

1718
01:50:13,350 --> 01:50:19,510
like we don't actually need this to be a

1719
01:50:16,029 --> 01:50:22,109
less than right we'll consider that to

1720
01:50:19,510 --> 01:50:27,369
be not necessary to test I would think

1721
01:50:22,109 --> 01:50:33,399
right I mean it's possible that would

1722
01:50:27,369 --> 01:50:35,470
lead to cracks in the lighting so it's a

1723
01:50:33,399 --> 01:50:38,379
little bit hard to say like maybe that's

1724
01:50:35,470 --> 01:50:42,820
not what we want maybe we want like one

1725
01:50:38,380 --> 01:50:46,560
side the min side or something to be a

1726
01:50:42,819 --> 01:50:49,239
less than and the box

1727
01:50:46,560 --> 01:51:03,070
max side to be less than or equal to I

1728
01:50:49,239 --> 01:51:06,689
don't really know so I guess what I want

1729
01:51:03,069 --> 01:51:06,689
to do now is look at that routine and

1730
01:51:07,800 --> 01:51:17,699
just see what the heck it's doing not

1731
01:51:15,460 --> 01:51:17,699
that

1732
01:51:34,899 --> 01:51:40,639
so what do we normally see like when we

1733
01:51:38,270 --> 01:51:42,949
go through here the first time like what

1734
01:51:40,640 --> 01:51:48,890
sir what's our min count like what's our

1735
01:51:42,948 --> 01:51:51,250
count eh what's our can't be and what's

1736
01:51:48,890 --> 01:51:51,250
the source

1737
01:51:53,890 --> 01:52:10,730
so that just looks this looks totally

1738
01:51:57,289 --> 01:52:16,340
fictitious I mean I guess this is

1739
01:52:10,729 --> 01:52:19,250
actually Jim index which is zero how is

1740
01:52:16,340 --> 01:52:23,659
it possible that you're telling me that

1741
01:52:19,250 --> 01:52:25,760
the maximum for the x value of these

1742
01:52:23,659 --> 01:52:28,279
boxes is greater than or equal to a

1743
01:52:25,760 --> 01:52:31,340
value and the minimum is also less than

1744
01:52:28,279 --> 01:52:37,448
that value for basically every box in

1745
01:52:31,340 --> 01:52:37,449
the system like what

1746
01:52:39,988 --> 01:53:07,139
how are you arriving at that answer that

1747
01:52:47,729 --> 01:53:10,529
seems totally nuts I mean that's that's

1748
01:53:07,140 --> 01:53:14,430
not possible what am I missing here so

1749
01:53:10,529 --> 01:53:20,579
we're like totally off in la-la land are

1750
01:53:14,430 --> 01:53:45,869
these box refs wrong like are the box

1751
01:53:20,579 --> 01:53:47,640
wrecks refs at this point garbage don't

1752
01:53:45,869 --> 01:53:59,969
I mean they look like they should be

1753
01:53:47,640 --> 01:54:03,060
correct because here they are so

1754
01:53:59,969 --> 01:54:07,230
something is like really broken badly

1755
01:54:03,060 --> 01:54:10,460
and it's frustrating me that I can't

1756
01:54:07,229 --> 01:54:10,459
tell what it is

1757
01:54:28,119 --> 01:54:31,539
[Music]

1758
01:55:10,199 --> 01:55:14,920
so I'm just gonna actually step through

1759
01:55:12,430 --> 01:55:16,510
those comparisons I'm like it should be

1760
01:55:14,920 --> 01:55:18,430
that I would immediately see that error

1761
01:55:16,510 --> 01:55:19,659
but I am like obviously so out to lunch

1762
01:55:18,430 --> 01:55:21,820
today it's a bad programming day

1763
01:55:19,659 --> 01:55:23,590
apparently we've learned you know Anna

1764
01:55:21,819 --> 01:55:25,689
sometimes says she has a bad drawing day

1765
01:55:23,590 --> 01:55:27,779
and like nothing looks right well it's a

1766
01:55:25,689 --> 01:55:30,009
bad programming day because I don't see

1767
01:55:27,779 --> 01:55:32,139
like this is obviously just totally

1768
01:55:30,010 --> 01:55:38,050
wrong and I'd not actually sure I know

1769
01:55:32,140 --> 01:55:39,970
why so here's the the actual

1770
01:55:38,050 --> 01:55:42,119
discriminator that we're looking at for

1771
01:55:39,970 --> 01:55:47,860
these so let's just put them up here so

1772
01:55:42,119 --> 01:55:52,449
here's our values here's our KD index

1773
01:55:47,859 --> 01:55:54,069
and here's our total ban center so we're

1774
01:55:52,449 --> 01:56:01,769
discriminate this thing for negative

1775
01:55:54,069 --> 01:56:06,340
like all right so even even just that is

1776
01:56:01,770 --> 01:56:12,130
ridiculous like what the heck box is 35

1777
01:56:06,340 --> 01:56:19,239
units long in our system what box is

1778
01:56:12,130 --> 01:56:21,850
that is this because we change the

1779
01:56:19,239 --> 01:56:31,889
storage format and totally screwed it up

1780
01:56:21,850 --> 01:56:31,890
somehow like what are you talking about

1781
01:56:34,969 --> 01:56:39,649
and if so why didn't the other one fail

1782
01:56:46,130 --> 01:56:50,760
so this is the place where we actually

1783
01:56:48,390 --> 01:56:53,010
do this work right we loop through the

1784
01:56:50,760 --> 01:56:59,530
boxes and we update the way that they're

1785
01:56:53,010 --> 01:57:02,680
actually being recorded so

1786
01:56:59,529 --> 01:57:02,679
[Music]

1787
01:57:09,270 --> 01:57:20,460
oops right now that's okay that's that

1788
01:57:21,720 --> 01:57:25,960
sowhat's yeah I don't know that just

1789
01:57:24,550 --> 01:57:28,570
doesn't seem right I'm gonna keep

1790
01:57:25,960 --> 01:57:39,210
running and just see how is that how big

1791
01:57:28,569 --> 01:57:39,210
most of these things are what the heck

1792
01:57:40,619 --> 01:57:48,039
how are the max values of all these

1793
01:57:43,659 --> 01:57:51,029
boxes the same what is going on so that

1794
01:57:48,039 --> 01:57:54,189
that's like it didn't do this transform

1795
01:57:51,029 --> 01:57:57,429
right like this transform is supposed to

1796
01:57:54,189 --> 01:58:04,629
be the thing that changes it from the

1797
01:57:57,430 --> 01:58:06,730
old position to the radius value why

1798
01:58:04,630 --> 01:58:15,430
isn't that looks like it's not doing

1799
01:58:06,729 --> 01:58:20,189
that here's what that looks like is the

1800
01:58:15,430 --> 01:58:20,190
box count not set yet no it is

1801
01:58:24,738 --> 01:58:29,139
I'm gonna step through this part I guess

1802
01:58:31,210 --> 01:58:35,469
you see why I'm freaking out here right

1803
01:58:52,159 --> 01:59:04,670
yeah I mean we were getting those those

1804
01:58:54,779 --> 01:59:04,670
old values is what we were getting right

1805
01:59:07,699 --> 01:59:13,949
that's what we want to see so why aren't

1806
01:59:11,579 --> 01:59:16,670
we seeing that because we do this update

1807
01:59:13,949 --> 01:59:16,670
right

1808
01:59:27,769 --> 01:59:35,748
so that's going to run over all 14 48

1809
01:59:30,689 --> 01:59:39,439
boxes so how are we getting those values

1810
01:59:35,748 --> 01:59:39,438
how come they're wrong

1811
01:59:41,929 --> 02:00:05,609
oops so I'm gonna take a look here and

1812
02:00:01,198 --> 02:00:08,368
see what these now are set to yeah so

1813
02:00:05,609 --> 02:00:09,659
these are all set correctly well I

1814
02:00:08,368 --> 02:00:11,578
shouldn't say all because I didn't

1815
02:00:09,658 --> 02:00:15,228
actually get chance to step through them

1816
02:00:11,578 --> 02:00:15,228
I tried to but hit the wrong button

1817
02:00:24,939 --> 02:00:30,639
so these are all set correctly so what

1818
02:00:27,739 --> 02:00:46,010
the heck like what am I seeing in there

1819
02:00:30,640 --> 02:00:47,900
why was I seeing such weird values and

1820
02:00:46,010 --> 02:00:53,739
what is this so what what the heck like

1821
02:00:47,899 --> 02:00:53,739
what's box wrap box riff is zero I

1822
02:00:53,920 --> 02:01:00,739
didn't think we were supposed to have a

1823
02:00:55,880 --> 02:01:03,920
box zero but I guess we do all right so

1824
02:01:00,739 --> 02:01:06,670
if it is box zero then what does that

1825
02:01:03,920 --> 02:01:06,670
box look like

1826
02:01:15,969 --> 02:01:24,270
all right so why were we seeing that

1827
02:01:18,750 --> 02:01:24,270
weird Cady index value because it's not

1828
02:01:26,939 --> 02:01:30,839
it's not what it said

1829
02:01:41,779 --> 02:01:43,840
you

1830
02:01:43,909 --> 02:02:03,029
hmm so is this maybe this is just a

1831
02:01:49,680 --> 02:02:13,980
remedy bug is that possible yes maybe

1832
02:02:03,029 --> 02:02:15,599
let's see yes okay okay cool all right

1833
02:02:13,979 --> 02:02:18,269
so it's just a remedy bug actually

1834
02:02:15,600 --> 02:02:20,730
there's a bug in remedy with how to

1835
02:02:18,270 --> 02:02:22,550
access off of the e-value there because

1836
02:02:20,729 --> 02:02:30,929
if you actually put something in here

1837
02:02:22,550 --> 02:02:34,460
that's oh no it's not already bug it's

1838
02:02:30,930 --> 02:02:36,659
my bug yay so remedy help me find my bug

1839
02:02:34,460 --> 02:02:43,260
because that's a three that should not

1840
02:02:36,659 --> 02:02:45,599
be a three Thank You remedy remedy

1841
02:02:43,260 --> 02:02:48,989
basically had the same bug or I put code

1842
02:02:45,600 --> 02:02:51,840
into a asked remedy to evaluate the

1843
02:02:48,989 --> 02:02:54,619
thing that I did wrong and it was like

1844
02:02:51,840 --> 02:02:55,890
hey I also did it wrong and I'm like yes

1845
02:02:54,619 --> 02:02:57,840
awesome

1846
02:02:55,890 --> 02:03:03,210
so remedy was a debugger in a different

1847
02:02:57,840 --> 02:03:05,489
way just then it it evaluated my bogus

1848
02:03:03,210 --> 02:03:08,869
expression to the wrong thing which is

1849
02:03:05,489 --> 02:03:12,059
what you would get and off we go

1850
02:03:08,869 --> 02:03:14,930
so that's good all I needed to do was

1851
02:03:12,060 --> 02:03:17,100
say this is dim index not KD index here

1852
02:03:14,930 --> 02:03:19,680
and and off we go

1853
02:03:17,100 --> 02:03:22,560
that was a cut-and-paste bug I don't

1854
02:03:19,680 --> 02:03:24,360
know if this will help us here hopefully

1855
02:03:22,560 --> 02:03:26,280
it will to a certain extent because now

1856
02:03:24,359 --> 02:03:35,269
we've got rid of that obvious bug let's

1857
02:03:26,279 --> 02:03:38,418
take a look at what it says yeah so

1858
02:03:35,270 --> 02:03:38,419
[Music]

1859
02:03:39,579 --> 02:03:47,439
I don't think this is probably gonna get

1860
02:03:46,270 --> 02:03:49,210
us out of the woods because that was

1861
02:03:47,439 --> 02:04:03,699
just one of probably many bugs that we

1862
02:03:49,210 --> 02:04:05,529
have here um so a couple things like I

1863
02:04:03,699 --> 02:04:08,380
assume we're running in the nerfed mode

1864
02:04:05,529 --> 02:04:10,329
now and that's why this is so fast but

1865
02:04:08,380 --> 02:04:14,409
at least it is fast now which is what it

1866
02:04:10,329 --> 02:04:16,600
should have been and the leaf count is

1867
02:04:14,409 --> 02:04:19,869
like now down in a more reasonable range

1868
02:04:16,600 --> 02:04:21,579
and so on all right so we're getting

1869
02:04:19,869 --> 02:04:23,739
there I'm gonna stop debugging for today

1870
02:04:21,579 --> 02:04:29,170
and we'll start debugging later tomorrow

1871
02:04:23,739 --> 02:04:30,609
so if I just put this back in I'll leave

1872
02:04:29,170 --> 02:04:34,270
it this way and then we can start

1873
02:04:30,609 --> 02:04:35,559
debugging it next weekend so here's what

1874
02:04:34,270 --> 02:04:39,820
it would actually cost which is

1875
02:04:35,560 --> 02:04:41,650
expensive so it's it still sucks but at

1876
02:04:39,819 --> 02:04:44,479
least now it sucks in a slightly

1877
02:04:41,649 --> 02:04:46,439
different way so at least now we can

1878
02:04:44,479 --> 02:04:48,609
[Music]

1879
02:04:46,439 --> 02:04:50,049
start to look at like the building of

1880
02:04:48,609 --> 02:04:52,269
the tree and whether it makes sense and

1881
02:04:50,050 --> 02:04:54,279
then look at our actual runtime code and

1882
02:04:52,270 --> 02:04:57,040
see if it's doing what we expect to do

1883
02:04:54,279 --> 02:04:59,109
and then next weekend we can hopefully

1884
02:04:57,039 --> 02:05:00,699
get through all that and make a judgment

1885
02:04:59,109 --> 02:05:03,579
call on whether this is an improvement

1886
02:05:00,699 --> 02:05:05,409
or not right because we don't really

1887
02:05:03,579 --> 02:05:07,210
know but you can see how much worse it

1888
02:05:05,409 --> 02:05:10,630
is here so it's it's still running very

1889
02:05:07,210 --> 02:05:14,770
poorly it's just not as bad as it was

1890
02:05:10,630 --> 02:05:19,029
previously and I'm gonna let this go so

1891
02:05:14,770 --> 02:05:22,100
I could see what the TPL values are

1892
02:05:19,029 --> 02:05:22,099
[Music]

1893
02:05:23,520 --> 02:05:28,050
right so we can kind of see what that

1894
02:05:25,810 --> 02:05:28,050
break

