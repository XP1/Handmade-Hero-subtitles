1
00:00:00,469 --> 00:00:03,869
hello everybody and welcome to hand made

2
00:00:02,700 --> 00:00:09,300
here oh sure we could a complete-game

3
00:00:03,870 --> 00:00:12,388
live on stream we are doing some Katy

4
00:00:09,300 --> 00:00:13,798
tree stuff and this is really just

5
00:00:12,388 --> 00:00:16,618
because we want to make sure our

6
00:00:13,798 --> 00:00:20,100
lighting runs as fast as possible and I

7
00:00:16,618 --> 00:00:22,198
had also some ideas for that it's like

8
00:00:20,100 --> 00:00:25,260
we're booting here for the first time I

9
00:00:22,199 --> 00:00:29,400
had some ideas for that and I kind of

10
00:00:25,260 --> 00:00:31,980
wanted to try some stuff that I thought

11
00:00:29,399 --> 00:00:36,030
about in terms of reducing the variance

12
00:00:31,980 --> 00:00:37,558
in our in our code currently like in our

13
00:00:36,030 --> 00:00:38,969
lighting solution because it looks

14
00:00:37,558 --> 00:00:40,919
pretty good but it's got a little

15
00:00:38,969 --> 00:00:45,420
flicker to it which I don't actually

16
00:00:40,920 --> 00:00:47,550
mind as a effect but I kind of wanted to

17
00:00:45,420 --> 00:00:49,649
know to what extent we could make it

18
00:00:47,549 --> 00:00:52,378
more solid and I had a really good idea

19
00:00:49,649 --> 00:00:55,129
about how I think we could do that and

20
00:00:52,378 --> 00:00:58,829
so in terms of looking at our lighting

21
00:00:55,128 --> 00:01:00,659
again like I wanna I have an idea I want

22
00:00:58,829 --> 00:01:02,789
to try for that I think I just want to

23
00:01:00,659 --> 00:01:04,319
keep on the Katy tree thing this weekend

24
00:01:02,789 --> 00:01:06,180
just because we had started last week

25
00:01:04,319 --> 00:01:08,579
and I'd like to finish it so I think

26
00:01:06,180 --> 00:01:10,799
we're gonna do today is is just take a

27
00:01:08,579 --> 00:01:15,829
look at implementing that KD tree loop

28
00:01:10,799 --> 00:01:17,700
that we sketched out and then from there

29
00:01:15,829 --> 00:01:19,590
probably that'll take us all weekend

30
00:01:17,700 --> 00:01:21,150
unfortunately and then from there what

31
00:01:19,590 --> 00:01:25,530
I'd like to do is probably next weekend

32
00:01:21,150 --> 00:01:26,820
try a little bit of the thing that I was

33
00:01:25,530 --> 00:01:28,890
thinking of before we start optimizing

34
00:01:26,819 --> 00:01:30,959
the KD stuff because I before I forget

35
00:01:28,890 --> 00:01:32,969
what I wanted to try I wanted to you

36
00:01:30,959 --> 00:01:34,798
know to put it in a little bit of of an

37
00:01:32,969 --> 00:01:37,259
experiment there where we we take a look

38
00:01:34,799 --> 00:01:38,939
at what we can do with in terms of

39
00:01:37,259 --> 00:01:42,299
reducing the lighting variance that we

40
00:01:38,938 --> 00:01:44,489
get from our lighting so I'm gonna take

41
00:01:42,299 --> 00:01:49,790
a look at that and see what happens and

42
00:01:44,489 --> 00:01:52,500
we'll go from there so we have our

43
00:01:49,790 --> 00:01:56,670
routine sketched out from last time

44
00:01:52,500 --> 00:01:58,859
where we had our ray cast and we were

45
00:01:56,670 --> 00:02:04,469
sort of talking about how are we gonna

46
00:01:58,859 --> 00:02:07,859
do a KD tree traversal here that's more

47
00:02:04,468 --> 00:02:09,750
direct and like less about just sort of

48
00:02:07,859 --> 00:02:11,789
shoehorning it in when we put it in

49
00:02:09,750 --> 00:02:13,139
originally we just kind of shoehorned it

50
00:02:11,789 --> 00:02:14,310
in and this is the original

51
00:02:13,139 --> 00:02:16,589
here that's the one that's running right

52
00:02:14,310 --> 00:02:18,420
now and then now we've got this sort of

53
00:02:16,590 --> 00:02:20,009
other one here that we sketched out

54
00:02:18,419 --> 00:02:23,789
that's like okay this is how we think

55
00:02:20,009 --> 00:02:25,259
the Katie tree might run and it's kind

56
00:02:23,789 --> 00:02:27,419
of confusing because there's a lot of

57
00:02:25,259 --> 00:02:29,250
ways we could structure this and it's

58
00:02:27,419 --> 00:02:31,739
unclear really so we kind of I think

59
00:02:29,250 --> 00:02:33,419
just have to like implement one and then

60
00:02:31,740 --> 00:02:34,560
sort of like push forward on it because

61
00:02:33,419 --> 00:02:38,069
I don't know that there's any way to

62
00:02:34,560 --> 00:02:41,069
really like into it up front exactly how

63
00:02:38,069 --> 00:02:42,568
this should work so if you take a look

64
00:02:41,069 --> 00:02:44,789
at how this is going what you can see

65
00:02:42,568 --> 00:02:46,379
here is it's we're expecting to do

66
00:02:44,789 --> 00:02:49,169
something where we pull something off a

67
00:02:46,379 --> 00:02:51,689
stack we look to see whether or not we

68
00:02:49,169 --> 00:02:53,549
need to test it for collisions if we do

69
00:02:51,689 --> 00:02:56,159
then we loop through and actually test

70
00:02:53,550 --> 00:02:59,130
it for real collisions of the Ray with

71
00:02:56,159 --> 00:03:04,229
our boxes and that's just a loop through

72
00:02:59,129 --> 00:03:06,239
all of the child leaves right then after

73
00:03:04,229 --> 00:03:09,569
we're done checking all the child leaves

74
00:03:06,239 --> 00:03:12,150
then we hunt back up the stack to see if

75
00:03:09,569 --> 00:03:15,419
we can find any buddy who we haven't

76
00:03:12,150 --> 00:03:17,340
processed yet that still needs to be

77
00:03:15,419 --> 00:03:20,189
processed and the reason that I say

78
00:03:17,340 --> 00:03:22,950
still needs to be processed is because

79
00:03:20,189 --> 00:03:26,310
when we find an actual collision with a

80
00:03:22,949 --> 00:03:29,659
box which we're doing inside this leaf

81
00:03:26,310 --> 00:03:31,829
testing here as we look at the sides of

82
00:03:29,659 --> 00:03:35,489
that we've pushed on the stack that we

83
00:03:31,829 --> 00:03:39,629
haven't tested yet we know that if we've

84
00:03:35,489 --> 00:03:42,420
already found a hit on our array that's

85
00:03:39,629 --> 00:03:45,120
closer than the closest box could be

86
00:03:42,419 --> 00:03:47,429
because of the plane division in the KD

87
00:03:45,120 --> 00:03:51,810
tree then we know that we don't actually

88
00:03:47,430 --> 00:03:54,209
have to do that test right we don't have

89
00:03:51,810 --> 00:03:57,329
to walk down that side of that tree

90
00:03:54,209 --> 00:04:01,860
so this n side bit here is sort of the

91
00:03:57,329 --> 00:04:05,069
early out that says look if this is not

92
00:04:01,860 --> 00:04:07,140
true meaning if at least one ray is not

93
00:04:05,069 --> 00:04:08,819
on the other side of the KD tree

94
00:04:07,139 --> 00:04:11,849
separating plane that we're looking at

95
00:04:08,819 --> 00:04:14,150
then we don't have to continue you know

96
00:04:11,849 --> 00:04:14,150
I'm saying

97
00:04:17,418 --> 00:04:21,750
now we do have a bunch of issues we have

98
00:04:20,129 --> 00:04:24,060
to work out here because we have to make

99
00:04:21,750 --> 00:04:26,189
the math work out right and we'll talk

100
00:04:24,060 --> 00:04:28,519
about that in a little bit but that's

101
00:04:26,189 --> 00:04:32,069
basically what we're talking about and

102
00:04:28,519 --> 00:04:33,779
what you can see here is the other side

103
00:04:32,069 --> 00:04:35,520
of things where we're not doing a leaf

104
00:04:33,779 --> 00:04:37,439
container so again this is just what

105
00:04:35,519 --> 00:04:39,060
happens when we're when we've bottomed

106
00:04:37,439 --> 00:04:44,129
out when we've gotten all the way to the

107
00:04:39,060 --> 00:04:47,129
bottom of the KD tree and we are testing

108
00:04:44,129 --> 00:04:49,650
the actual boxes that are contained in

109
00:04:47,129 --> 00:04:50,939
the node and then we're walking back up

110
00:04:49,649 --> 00:04:53,158
the tree to see where we should start

111
00:04:50,939 --> 00:04:55,860
descending next right so that's what

112
00:04:53,158 --> 00:04:58,439
that's what this branch does this branch

113
00:04:55,860 --> 00:05:02,400
is when we were what we're in the put

114
00:04:58,439 --> 00:05:05,908
thing we pulled off the stack and it's

115
00:05:02,399 --> 00:05:08,429
not really off the stack because we we

116
00:05:05,908 --> 00:05:10,500
like I said we changed the sort of

117
00:05:08,430 --> 00:05:12,300
recursive pulling off of the deb stack

118
00:05:10,500 --> 00:05:13,860
to being something we only do when we

119
00:05:12,300 --> 00:05:15,689
finish with the leaf because we know

120
00:05:13,860 --> 00:05:19,650
we're just going to send down all the

121
00:05:15,689 --> 00:05:22,860
way to the bottom when i'm not explained

122
00:05:19,649 --> 00:05:25,769
as well we know that we need to go all

123
00:05:22,860 --> 00:05:28,379
the way to the closest thing in the KD

124
00:05:25,769 --> 00:05:29,758
tree first and then we want the next

125
00:05:28,379 --> 00:05:32,370
closest thing in the next such thing in

126
00:05:29,759 --> 00:05:34,139
the next thing so when we descend which

127
00:05:32,370 --> 00:05:35,449
is this side here because this is what

128
00:05:34,139 --> 00:05:39,269
happens we know him to leave container

129
00:05:35,449 --> 00:05:41,009
we don't push but the the things on the

130
00:05:39,269 --> 00:05:43,408
stack here that we're going to test

131
00:05:41,009 --> 00:05:45,870
immediately instead we just take them as

132
00:05:43,408 --> 00:05:47,009
our next stack value to use so we just

133
00:05:45,870 --> 00:05:49,379
take it immediately

134
00:05:47,009 --> 00:05:51,479
the only time we start pulling things

135
00:05:49,379 --> 00:05:53,908
off the stack is when we've bottomed out

136
00:05:51,478 --> 00:05:54,959
cuz now we can't go down any more so now

137
00:05:53,908 --> 00:05:57,569
we just pull something out a second to

138
00:05:54,959 --> 00:06:01,948
figure out okay who should we test who's

139
00:05:57,569 --> 00:06:06,229
like above us right and so that's what

140
00:06:01,949 --> 00:06:06,228
this part does here now I think

141
00:06:10,500 --> 00:06:17,399
I haven't thought about it too hard but

142
00:06:13,350 --> 00:06:19,260
in theory because we know what side we

143
00:06:17,399 --> 00:06:21,479
always know how to classify ourselves

144
00:06:19,259 --> 00:06:25,469
relative to one side or another of a KD

145
00:06:21,480 --> 00:06:29,640
tree in theory we could also do this

146
00:06:25,470 --> 00:06:33,030
traversal stackless li because and and

147
00:06:29,639 --> 00:06:36,149
we may want to because if we know that

148
00:06:33,029 --> 00:06:38,009
we can always just do a piece of math

149
00:06:36,149 --> 00:06:40,159
that's relatively straightforward like

150
00:06:38,009 --> 00:06:42,839
maybe it's actually fairly quick to do

151
00:06:40,160 --> 00:06:45,210
we could actually get out of the

152
00:06:42,839 --> 00:06:48,239
branching altogether for putting things

153
00:06:45,209 --> 00:06:49,680
onto the stack in the first place now I

154
00:06:48,240 --> 00:06:51,329
don't actually know that we're ever

155
00:06:49,680 --> 00:06:53,459
gonna have to worry about that because

156
00:06:51,329 --> 00:06:55,168
with this new tree structure we could

157
00:06:53,459 --> 00:06:57,449
conditional move these on there and

158
00:06:55,168 --> 00:06:59,779
because we're no longer pulling things

159
00:06:57,449 --> 00:07:03,269
off of the stack immediately anymore

160
00:06:59,779 --> 00:07:05,668
those C moves might actually just work

161
00:07:03,269 --> 00:07:09,329
now I don't know that that's actually

162
00:07:05,668 --> 00:07:11,668
true but I think it probably will be and

163
00:07:09,329 --> 00:07:13,050
this right here where we take the curse

164
00:07:11,668 --> 00:07:15,029
tack value that's gonna be used next

165
00:07:13,050 --> 00:07:17,939
time that's actually the one that's

166
00:07:15,029 --> 00:07:21,239
gonna cost us the most I think because

167
00:07:17,939 --> 00:07:24,139
it the next loop is gonna be completely

168
00:07:21,240 --> 00:07:26,100
dependent on that finishing either way

169
00:07:24,139 --> 00:07:28,050
so the fact that it doesn't come out of

170
00:07:26,100 --> 00:07:30,419
a stack doesn't really matter that's

171
00:07:28,050 --> 00:07:32,720
gonna be this as a conditional move or a

172
00:07:30,418 --> 00:07:36,689
conditional is really gonna be the part

173
00:07:32,720 --> 00:07:38,820
that we probably stall on either way but

174
00:07:36,689 --> 00:07:40,620
ignoring all of that like I said this

175
00:07:38,819 --> 00:07:42,779
part here can probably just be two

176
00:07:40,620 --> 00:07:44,550
conditional moves now because we don't

177
00:07:42,779 --> 00:07:47,069
meet we won't be looking at it for a

178
00:07:44,550 --> 00:07:48,780
long long time so those C moves can

179
00:07:47,069 --> 00:07:50,699
probably just happen and they probably

180
00:07:48,779 --> 00:07:53,759
won't cost us much because nobody's

181
00:07:50,699 --> 00:07:55,740
dependent on them at all the next time

182
00:07:53,759 --> 00:07:58,050
anyone could even think about looking at

183
00:07:55,740 --> 00:08:01,970
them would be after going through this

184
00:07:58,050 --> 00:08:05,579
entire loop and testing at least a few

185
00:08:01,970 --> 00:08:07,260
boxes and then getting in here and

186
00:08:05,579 --> 00:08:11,009
starting to pull things off the sack

187
00:08:07,259 --> 00:08:13,409
right so because there's so many

188
00:08:11,009 --> 00:08:15,779
intervening instructions here you know

189
00:08:13,410 --> 00:08:18,180
that you're not going to line up people

190
00:08:15,779 --> 00:08:20,519
see really dependent on this thing until

191
00:08:18,180 --> 00:08:23,459
after it's probably a completely known

192
00:08:20,519 --> 00:08:25,879
quantity would be my guess I could be

193
00:08:23,459 --> 00:08:25,879
wrong about that

194
00:08:26,930 --> 00:08:31,348
so I don't think there's gonna be much

195
00:08:28,889 --> 00:08:33,750
of an issue there but I could again

196
00:08:31,348 --> 00:08:36,149
could totally be wrong but that's the

197
00:08:33,750 --> 00:08:37,620
basic sketch and so if you look at the

198
00:08:36,149 --> 00:08:40,110
things we need to actually do I think

199
00:08:37,620 --> 00:08:41,908
one of them is just correct already like

200
00:08:40,110 --> 00:08:43,649
I uh or we will scrutinize a little bit

201
00:08:41,908 --> 00:08:48,360
but I think one of them is just correct

202
00:08:43,649 --> 00:08:53,458
already basically and the others the

203
00:08:48,360 --> 00:08:55,110
other one is the one that we actually

204
00:08:53,458 --> 00:08:55,979
have to probably do a little bit of

205
00:08:55,110 --> 00:08:58,680
engineering on because I don't think

206
00:08:55,980 --> 00:09:00,810
it's quite right so if we take a look at

207
00:08:58,679 --> 00:09:03,539
what goes on here when we're actually

208
00:09:00,809 --> 00:09:05,609
processing a node in the KD tree that is

209
00:09:03,539 --> 00:09:08,699
not a leaf so it's an interior node of

210
00:09:05,610 --> 00:09:11,039
the tree and divides the boxes we have

211
00:09:08,700 --> 00:09:12,899
into two halves one that are on one side

212
00:09:11,039 --> 00:09:16,079
of the split plane and one that's on the

213
00:09:12,899 --> 00:09:17,879
other side of the split plane the thing

214
00:09:16,080 --> 00:09:20,820
that we need to do first and the slowest

215
00:09:17,879 --> 00:09:22,200
part that we have like I said I don't

216
00:09:20,820 --> 00:09:24,870
really know if maybe there's smarter

217
00:09:22,200 --> 00:09:27,450
ways for us to do this but the slowest

218
00:09:24,870 --> 00:09:30,769
part that we have is this part here now

219
00:09:27,450 --> 00:09:33,089
one thing that I'm not sure about in

220
00:09:30,769 --> 00:09:34,769
fact I think we could do this much more

221
00:09:33,089 --> 00:09:38,010
efficiently than we're doing it here and

222
00:09:34,769 --> 00:09:39,838
actually we probably just should so if

223
00:09:38,009 --> 00:09:41,879
you look at what has to happen here

224
00:09:39,839 --> 00:09:49,790
you can see that we're effectively doing

225
00:09:41,879 --> 00:09:52,919
like masking operations and I think we

226
00:09:49,789 --> 00:09:55,860
probably don't need to do those here

227
00:09:52,919 --> 00:09:58,439
like the reason we're doing this so you

228
00:09:55,860 --> 00:10:00,419
can imagine this side where we're

229
00:09:58,440 --> 00:10:02,520
talking about the Ray direction there

230
00:10:00,419 --> 00:10:04,110
are four different ray directions that

231
00:10:02,519 --> 00:10:06,120
are you know slightly different and

232
00:10:04,110 --> 00:10:08,879
that's because we're casting for rays at

233
00:10:06,120 --> 00:10:12,419
a time right and if you look at what's

234
00:10:08,879 --> 00:10:15,899
going on here we need to produce a XY or

235
00:10:12,419 --> 00:10:18,629
z value from these Ray directions so we

236
00:10:15,899 --> 00:10:22,440
need to select just those components out

237
00:10:18,629 --> 00:10:25,409
by using the masks here to produce a

238
00:10:22,440 --> 00:10:29,270
vector that's just the X's just the Y's

239
00:10:25,409 --> 00:10:32,909
or just the Z's of our directions right

240
00:10:29,269 --> 00:10:35,809
and since we don't know which one it is

241
00:10:32,909 --> 00:10:38,139
we're doing it this way right now

242
00:10:35,809 --> 00:10:41,559
there's other ways we could do

243
00:10:38,139 --> 00:10:44,080
like we could do that as a load and in

244
00:10:41,559 --> 00:10:48,089
fact yeah the more I think about it is

245
00:10:44,080 --> 00:10:48,090
why aren't we just doing that as a load

246
00:10:53,370 --> 00:10:58,060
so I think this code is dumb and before

247
00:10:56,559 --> 00:10:59,409
we go any further I'm just gonna replace

248
00:10:58,059 --> 00:11:02,139
it with something that I think might not

249
00:10:59,409 --> 00:11:06,909
be as dumb don't quote me on that fact

250
00:11:02,139 --> 00:11:08,919
because it may still be as dumb but yeah

251
00:11:06,909 --> 00:11:10,889
I'm just gonna go ahead and say that I

252
00:11:08,919 --> 00:11:12,939
think that's probably a little bit dumb

253
00:11:10,889 --> 00:11:16,809
the reason I think that's a little bit

254
00:11:12,940 --> 00:11:18,670
dumb is if we take a look at the v3 4x

255
00:11:16,809 --> 00:11:21,339
struct here so I'm just gonna look up

256
00:11:18,669 --> 00:11:23,799
the actual structure what you can see

257
00:11:21,340 --> 00:11:27,009
about how this is actually created is

258
00:11:23,799 --> 00:11:31,509
it's just X is wise and Z's anyway and

259
00:11:27,009 --> 00:11:34,059
here's the III element access or so we

260
00:11:31,509 --> 00:11:37,090
can we know that they're sequential in

261
00:11:34,059 --> 00:11:40,479
memory so I'm gonna say like can't we

262
00:11:37,090 --> 00:11:45,129
just do 128 bit load with an index and

263
00:11:40,480 --> 00:11:48,759
we know that index is low can't we just

264
00:11:45,129 --> 00:11:51,669
do that and not have this problem so

265
00:11:48,759 --> 00:11:56,679
meaning instead of this if we actually

266
00:11:51,669 --> 00:12:00,099
just do if we actually just do this as a

267
00:11:56,679 --> 00:12:03,569
load of the Ray Origin using an index I

268
00:12:00,100 --> 00:12:03,570
mean can't we just do this

269
00:12:11,179 --> 00:12:17,129
so if we just take the dimension index

270
00:12:14,278 --> 00:12:19,139
of this box like or like you know the K

271
00:12:17,129 --> 00:12:21,838
dimension index like the thing we split

272
00:12:19,139 --> 00:12:24,209
or payme what's called a KD index the

273
00:12:21,839 --> 00:12:26,670
thing we actually split upon we

274
00:12:24,208 --> 00:12:30,239
shouldn't actually have to do those

275
00:12:26,669 --> 00:12:32,909
masks because we can just do one 128-bit

276
00:12:30,240 --> 00:12:36,389
load of the value and it's since we're

277
00:12:32,909 --> 00:12:38,549
loading that those three values from

278
00:12:36,389 --> 00:12:40,289
that cache line they'll all be packed

279
00:12:38,549 --> 00:12:42,870
together we should hit the cache line

280
00:12:40,289 --> 00:12:44,659
every time it should be in l1 cache hit

281
00:12:42,870 --> 00:12:47,850
and we should just be able to do a load

282
00:12:44,659 --> 00:12:50,909
directly so I don't think we need to be

283
00:12:47,850 --> 00:12:53,699
doing sequences of operations to do the

284
00:12:50,909 --> 00:12:55,559
masks because I don't think there's any

285
00:12:53,698 --> 00:12:58,948
reason we can't just load it directly

286
00:12:55,559 --> 00:13:03,448
out so similarly a like here where we do

287
00:12:58,948 --> 00:13:05,698
this I think we can just loops I think

288
00:13:03,448 --> 00:13:09,359
we can just load that and I don't think

289
00:13:05,698 --> 00:13:11,179
we will pay a penalty for it now this

290
00:13:09,360 --> 00:13:16,110
wants to be done slightly differently

291
00:13:11,179 --> 00:13:18,870
instead of actually doing the Ray Origin

292
00:13:16,110 --> 00:13:21,778
part here what we want to do again is

293
00:13:18,870 --> 00:13:25,039
just do both loads and then the ad right

294
00:13:21,778 --> 00:13:28,799
so we want to do we want to load the the

295
00:13:25,039 --> 00:13:31,078
start and the end and then when we do

296
00:13:28,799 --> 00:13:35,399
our hit P we want to just add those

297
00:13:31,078 --> 00:13:47,008
together by doing the the add of just

298
00:13:35,399 --> 00:13:49,669
the components right so I don't really

299
00:13:47,009 --> 00:13:53,159
know why we did it the other way round

300
00:13:49,669 --> 00:13:55,889
it's way more expensive to do it that

301
00:13:53,159 --> 00:13:58,049
way and probably we were just not

302
00:13:55,889 --> 00:14:00,089
thinking about that part yet we were

303
00:13:58,049 --> 00:14:01,169
just kind of sketching things out but

304
00:14:00,089 --> 00:14:03,720
now that I'm like looking at it more

305
00:14:01,169 --> 00:14:08,278
closely like that seems more stainer to

306
00:14:03,720 --> 00:14:11,009
me right so this is like start D and end

307
00:14:08,278 --> 00:14:15,480
D right and then the place where this

308
00:14:11,009 --> 00:14:19,169
thing would would end like the place

309
00:14:15,480 --> 00:14:22,539
where this Ray would actually end is now

310
00:14:19,169 --> 00:14:25,509
just going to be if you

311
00:14:22,539 --> 00:14:31,959
did a hit the hit P it's just gonna be

312
00:14:25,509 --> 00:14:35,909
the start plus the the end D right and

313
00:14:31,960 --> 00:14:35,910
and this is actually sorry this is

314
00:14:35,970 --> 00:14:41,920
should say dirty right so this is the

315
00:14:38,769 --> 00:14:45,340
Ray direction so all we're doing is

316
00:14:41,919 --> 00:14:47,649
instead of actually computing the actual

317
00:14:45,340 --> 00:14:49,690
end point we're just computing one

318
00:14:47,649 --> 00:14:50,769
dimension of the endpoint because we

319
00:14:49,690 --> 00:14:53,290
know that the split plane is

320
00:14:50,769 --> 00:14:56,379
dimensionally aligned so we don't have

321
00:14:53,289 --> 00:14:57,789
to test y&amp;z we can just test X if it's

322
00:14:56,379 --> 00:15:00,820
an excellent plane we don't have to test

323
00:14:57,789 --> 00:15:04,269
X and Z if it's a wise LaPlante right so

324
00:15:00,820 --> 00:15:06,820
start D and dirty here right we combine

325
00:15:04,269 --> 00:15:08,919
those two together and we end up this

326
00:15:06,820 --> 00:15:10,600
tier a value here can just this is now

327
00:15:08,919 --> 00:15:14,139
just a scalar multiply and we end up

328
00:15:10,600 --> 00:15:17,050
with whatever the hit P is for this

329
00:15:14,139 --> 00:15:26,110
particular dimension and then what we

330
00:15:17,049 --> 00:15:28,569
can do is say well whatever the whatever

331
00:15:26,110 --> 00:15:31,019
the actual plane D value was here again

332
00:15:28,570 --> 00:15:34,540
we can subtract that out as well and

333
00:15:31,019 --> 00:15:37,000
then we can do our test on it so to do

334
00:15:34,539 --> 00:15:39,279
that like in here we could probably just

335
00:15:37,000 --> 00:15:42,669
add that in so if we want to we can just

336
00:15:39,279 --> 00:15:45,250
do something like this right and then we

337
00:15:42,669 --> 00:15:46,959
can just see whatever the the hit P or

338
00:15:45,250 --> 00:15:50,710
the I should say this this is the end P

339
00:15:46,960 --> 00:15:53,350
right and maybe we call it nd that makes

340
00:15:50,710 --> 00:15:55,389
more sense so here we can just do a move

341
00:15:53,350 --> 00:15:57,430
mask out and take a look at what the end

342
00:15:55,389 --> 00:15:59,919
sign bit is and then we know and the

343
00:15:57,429 --> 00:16:03,099
reason that this is not quite right as I

344
00:15:59,919 --> 00:16:05,829
said is because we don't know which side

345
00:16:03,100 --> 00:16:09,040
we're looking at here so there is a

346
00:16:05,830 --> 00:16:12,970
little bit of an issue this we could

347
00:16:09,039 --> 00:16:14,589
take this value the plane D value we

348
00:16:12,970 --> 00:16:16,629
could try to figure out something to do

349
00:16:14,590 --> 00:16:20,230
there and it's possible that we could do

350
00:16:16,629 --> 00:16:22,299
that on the push side of things so you

351
00:16:20,230 --> 00:16:25,600
know we this that's the this is the one

352
00:16:22,299 --> 00:16:28,659
part we've got to figure out is how are

353
00:16:25,600 --> 00:16:32,620
we how are we making this end sign bit

354
00:16:28,659 --> 00:16:34,509
thing work right so we could imagine

355
00:16:32,620 --> 00:16:36,190
having some piece of information here

356
00:16:34,509 --> 00:16:38,379
that tells us I don't know

357
00:16:36,190 --> 00:16:39,910
but this ensign bit when the move mask

358
00:16:38,379 --> 00:16:42,129
comes out what we're gonna end up with

359
00:16:39,909 --> 00:16:44,110
is we're gonna end up with a mask like

360
00:16:42,129 --> 00:16:48,159
it's gonna be you know zero one one zero

361
00:16:44,110 --> 00:16:50,470
or something and it's going to be ones

362
00:16:48,159 --> 00:16:52,208
in the place where it was on the

363
00:16:50,470 --> 00:16:53,649
positive side of the plane so for each

364
00:16:52,208 --> 00:16:55,750
lane for each of the four lanes gonna

365
00:16:53,649 --> 00:16:58,809
have once the Paz side zeroes on the

366
00:16:55,750 --> 00:17:02,769
negative side but the question is which

367
00:16:58,809 --> 00:17:05,408
one do we want right so if it's all if

368
00:17:02,769 --> 00:17:07,900
it's a mix if it's zeros and ones mixed

369
00:17:05,409 --> 00:17:09,850
together then we always need to do it

370
00:17:07,900 --> 00:17:14,370
because that means somebody at least one

371
00:17:09,849 --> 00:17:17,019
of the Rays actually doesn't early-out

372
00:17:14,369 --> 00:17:21,038
but the thing we have to know is if it's

373
00:17:17,019 --> 00:17:25,449
all ones or all zeros we don't know

374
00:17:21,038 --> 00:17:27,459
whether we do or don't do it right so

375
00:17:25,449 --> 00:17:31,080
the thing we have to disambiguate is if

376
00:17:27,459 --> 00:17:33,370
we pushed on the close the positive side

377
00:17:31,079 --> 00:17:35,109
right because we're gonna descend down

378
00:17:33,369 --> 00:17:38,109
one side negative side positive side

379
00:17:35,109 --> 00:17:41,079
we're gonna push the opposite side but

380
00:17:38,109 --> 00:17:43,689
we don't know which side we pushed right

381
00:17:41,079 --> 00:17:46,119
so what we're gonna have to do in the

382
00:17:43,690 --> 00:17:48,730
start side code so here where we push

383
00:17:46,119 --> 00:17:53,139
these on we're gonna need to push on a

384
00:17:48,730 --> 00:17:56,860
value that tells us something right some

385
00:17:53,140 --> 00:18:01,150
piece of information that we can use so

386
00:17:56,859 --> 00:18:10,769
that we know which way to test this

387
00:18:01,150 --> 00:18:13,240
thing right and that's the tricky bit

388
00:18:10,769 --> 00:18:15,509
now there's two ways to do it one way is

389
00:18:13,240 --> 00:18:19,329
to always do the test the same way and

390
00:18:15,509 --> 00:18:22,000
to add a multiplier in here so for

391
00:18:19,329 --> 00:18:25,210
example if we pushed on a one or a

392
00:18:22,000 --> 00:18:27,548
negative one we could load out of the

393
00:18:25,210 --> 00:18:31,870
stack the one or the negative one there

394
00:18:27,548 --> 00:18:35,798
and then we would multiply this result

395
00:18:31,869 --> 00:18:40,119
and D by the one or negative one and off

396
00:18:35,798 --> 00:18:43,690
we would go right now that doesn't seem

397
00:18:40,119 --> 00:18:45,969
like a very good idea to me because it

398
00:18:43,690 --> 00:18:47,320
requires us pushing probably more

399
00:18:45,970 --> 00:18:49,029
information on stack than we need

400
00:18:47,319 --> 00:18:50,980
because I

401
00:18:49,029 --> 00:18:54,039
to store it one or a negative one we

402
00:18:50,980 --> 00:18:56,380
just we only need one bit right so we

403
00:18:54,039 --> 00:18:59,789
should be able to stick that bit value

404
00:18:56,380 --> 00:19:02,470
into our stack in a way that's more

405
00:18:59,789 --> 00:19:04,869
convenient so that our stack can still

406
00:19:02,470 --> 00:19:06,519
be just 32 bits wide and not have to

407
00:19:04,869 --> 00:19:10,299
store entire floating point values for

408
00:19:06,519 --> 00:19:12,250
no reason right so I'm assuming that we

409
00:19:10,299 --> 00:19:15,879
probably want to do something smarter

410
00:19:12,250 --> 00:19:18,220
than this and like I said I don't

411
00:19:15,880 --> 00:19:20,530
actually know that that's true

412
00:19:18,220 --> 00:19:22,390
but I'm assuming so what I want to do is

413
00:19:20,529 --> 00:19:23,950
think for a minute about what we would

414
00:19:22,390 --> 00:19:25,600
store and maybe I'll go to the black

415
00:19:23,950 --> 00:19:27,940
board for this which I have to like

416
00:19:25,599 --> 00:19:29,679
reload because since we did a separate

417
00:19:27,940 --> 00:19:30,850
stream I had had a separate black bird

418
00:19:29,680 --> 00:19:32,350
up here so I didn't actually need it

419
00:19:30,849 --> 00:19:34,179
because I had enough diagrams last night

420
00:19:32,349 --> 00:19:36,579
when I was talking about graphic novel

421
00:19:34,180 --> 00:19:40,000
pre-press but so let me try and open

422
00:19:36,579 --> 00:19:42,639
here a Milton canvas and I don't even

423
00:19:40,000 --> 00:19:49,599
know where this thing is but I think

424
00:19:42,640 --> 00:19:51,840
it's an archive here does this look

425
00:19:49,599 --> 00:19:51,839
right

426
00:19:59,730 --> 00:20:03,220
this does not this looks like I don't

427
00:20:02,380 --> 00:20:12,250
know where this is

428
00:20:03,220 --> 00:20:30,930
come on second this looks like not

429
00:20:12,250 --> 00:20:33,430
recent day 420 all right um TAFE for 33

430
00:20:30,930 --> 00:20:36,269
like this doesn't look recent this looks

431
00:20:33,430 --> 00:20:42,039
like it's off somehow

432
00:20:36,269 --> 00:20:46,690
TAFE 469 I don't know what that just did

433
00:20:42,039 --> 00:20:51,389
accidentally drew into it so wait that's

434
00:20:46,690 --> 00:20:58,930
where the Milton canvas was I thought so

435
00:20:51,390 --> 00:21:01,690
where what's the deal all right

436
00:20:58,930 --> 00:21:03,759
maybe our canvas has gotten destroyed I

437
00:21:01,690 --> 00:21:05,289
have no idea what happened I tried to

438
00:21:03,759 --> 00:21:08,680
switch last night and I did not

439
00:21:05,289 --> 00:21:09,730
understand what occurred at all it was

440
00:21:08,680 --> 00:21:12,220
very unintuitive

441
00:21:09,730 --> 00:21:17,160
I feel like probably there should be a

442
00:21:12,220 --> 00:21:19,750
different way that this works because I

443
00:21:17,160 --> 00:21:22,120
don't understand what it means to save a

444
00:21:19,750 --> 00:21:23,470
milton canvas like when I closed it like

445
00:21:22,119 --> 00:21:25,299
when I closed it I don't know what it

446
00:21:23,470 --> 00:21:28,299
does you know what I mean like I don't

447
00:21:25,299 --> 00:21:31,569
know where it saves it to so I'm not

448
00:21:28,299 --> 00:21:33,279
sure what's going on here exactly so

449
00:21:31,569 --> 00:21:36,369
we're just gonna go up to the top of

450
00:21:33,279 --> 00:21:39,490
this canvas which may or may not have

451
00:21:36,369 --> 00:21:41,139
ever been saved and honestly I wonder if

452
00:21:39,490 --> 00:21:42,940
that means this whole time it hasn't

453
00:21:41,140 --> 00:21:45,100
ever been saving our canvas it like

454
00:21:42,940 --> 00:21:46,600
saved it to some temporary file that we

455
00:21:45,099 --> 00:21:52,569
don't even know about or something like

456
00:21:46,599 --> 00:21:55,389
this which could be the case I don't

457
00:21:52,569 --> 00:21:57,369
know I really just don't know I have no

458
00:21:55,390 --> 00:21:59,080
idea how Milton works at all in fact

459
00:21:57,369 --> 00:22:00,579
maybe we'll just create a new canvas

460
00:21:59,079 --> 00:22:01,179
because I just don't even know what that

461
00:22:00,579 --> 00:22:02,500
means

462
00:22:01,180 --> 00:22:05,640
all right doesn't look like I can do

463
00:22:02,500 --> 00:22:05,640
that because it resets all my settings

464
00:22:07,869 --> 00:22:15,879
I really just don't know I don't

465
00:22:12,910 --> 00:22:19,630
understand I think there probably should

466
00:22:15,880 --> 00:22:21,520
be some like thought put into how that

467
00:22:19,630 --> 00:22:33,510
system works cuz it doesn't really make

468
00:22:21,519 --> 00:22:39,819
any sense to me alright so let's move

469
00:22:33,509 --> 00:22:45,879
over here a bit and we'll just start

470
00:22:39,819 --> 00:22:47,019
again that kind of sucks as that's the

471
00:22:45,880 --> 00:22:49,179
case because I've thought that I've

472
00:22:47,019 --> 00:22:53,109
always included the canvas the Milton

473
00:22:49,179 --> 00:22:55,480
canvas with the distribution it gets

474
00:22:53,109 --> 00:22:57,909
packed up in there but I guess if that's

475
00:22:55,480 --> 00:22:59,799
the case then I haven't been since like

476
00:22:57,910 --> 00:23:02,050
day 4 33 because it just hasn't been

477
00:22:59,799 --> 00:23:03,428
saving it I guess it just saves it to

478
00:23:02,049 --> 00:23:06,190
some temp file that I don't know about

479
00:23:03,429 --> 00:23:09,040
and I have to manually tell it to save

480
00:23:06,190 --> 00:23:10,990
it or something I don't know I'm super

481
00:23:09,039 --> 00:23:13,089
confused right now if anyone understands

482
00:23:10,990 --> 00:23:17,970
Milton at all and wants to tell me I'm

483
00:23:13,089 --> 00:23:22,299
happy to to try and fix it I guess but

484
00:23:17,970 --> 00:23:26,429
also you know it's realized we don't

485
00:23:22,299 --> 00:23:26,428
have our little overlay on either Dewey

486
00:23:32,700 --> 00:23:45,778
but this all days have been a bit of a

487
00:23:34,618 --> 00:24:12,628
disaster here we are five I don't

488
00:23:45,778 --> 00:24:15,269
remember what we are either 595 okay so

489
00:24:12,628 --> 00:24:16,648
yeah I don't know if the milton canvas

490
00:24:15,269 --> 00:24:18,659
has been destroyed it may have been

491
00:24:16,648 --> 00:24:20,599
that's okay my handwriting is so bad no

492
00:24:18,659 --> 00:24:24,899
one's ever going to be able to read it

493
00:24:20,599 --> 00:24:29,009
but the point is let me explain what I'm

494
00:24:24,898 --> 00:24:33,658
talking about here in terms of side bit

495
00:24:29,009 --> 00:24:36,058
masks so what's going to happen is we've

496
00:24:33,659 --> 00:24:38,340
got a KD tree split plane here and we've

497
00:24:36,058 --> 00:24:39,868
got array and it's on some side and it

498
00:24:38,339 --> 00:24:41,488
goes in some direction and what we're

499
00:24:39,868 --> 00:24:43,709
gonna do is we're gonna produce another

500
00:24:41,489 --> 00:24:46,739
point and remember we're doing this for

501
00:24:43,710 --> 00:24:49,889
wide so there's actually like it's more

502
00:24:46,739 --> 00:24:52,379
like this is happening and so we're

503
00:24:49,888 --> 00:24:53,998
gonna produce four points and some of

504
00:24:52,378 --> 00:24:55,498
those points are gonna be on one side

505
00:24:53,999 --> 00:24:57,358
and some of those points are gonna be on

506
00:24:55,499 --> 00:24:59,009
the other side now in a particular

507
00:24:57,358 --> 00:25:00,778
direction let's say we're using the

508
00:24:59,009 --> 00:25:02,639
x-axis here there's the negative side

509
00:25:00,778 --> 00:25:04,829
and the positive side relative to the

510
00:25:02,638 --> 00:25:07,079
plane and since we subtract away the

511
00:25:04,829 --> 00:25:08,638
plane D value which is this we're going

512
00:25:07,079 --> 00:25:10,168
to have negatives for every one on this

513
00:25:08,638 --> 00:25:11,998
side and positives for around this side

514
00:25:10,169 --> 00:25:15,028
we're then going to do a move mask to

515
00:25:11,999 --> 00:25:16,649
move out of the vector registers just

516
00:25:15,028 --> 00:25:18,298
the sign bit of those four four

517
00:25:16,648 --> 00:25:19,918
floating-point values and we're putting

518
00:25:18,298 --> 00:25:21,808
those into a general purpose register

519
00:25:19,919 --> 00:25:23,999
that's gonna leave us with one of

520
00:25:21,808 --> 00:25:28,918
sixteen possible combinations right like

521
00:25:23,999 --> 00:25:32,489
1 0 0 1 or 1 0 1 1 or 0 1 0 1 right and

522
00:25:28,919 --> 00:25:34,919
these correspond to the signs of like

523
00:25:32,489 --> 00:25:36,269
basically which side these are on so

524
00:25:34,919 --> 00:25:37,590
anyone who is on the positive side is

525
00:25:36,269 --> 00:25:39,980
gonna get a 0 and anyone who's on the

526
00:25:37,589 --> 00:25:43,548
negative side is gonna get a 1 I believe

527
00:25:39,980 --> 00:25:43,548
we can double check that

528
00:25:44,848 --> 00:25:51,578
but I think it moves the sign bit and I

529
00:25:48,578 --> 00:25:53,798
think the sign bit is positive if it's

530
00:25:51,578 --> 00:25:56,858
not it's is one if it's negative and

531
00:25:53,798 --> 00:26:00,368
zero if it's not if that makes sense

532
00:25:56,858 --> 00:26:01,689
um but either way we can obviously

533
00:26:00,368 --> 00:26:03,819
verify that so we're on about this

534
00:26:01,690 --> 00:26:06,249
matter point being we know that we're

535
00:26:03,819 --> 00:26:08,408
going to have a bit value in here that

536
00:26:06,249 --> 00:26:11,588
corresponds to which side of the plane

537
00:26:08,409 --> 00:26:13,869
it's on problem is we don't know which

538
00:26:11,588 --> 00:26:15,239
side we want to actually measure we know

539
00:26:13,868 --> 00:26:18,778
that in the place where we actually

540
00:26:15,239 --> 00:26:22,149
determined which side the start was on

541
00:26:18,778 --> 00:26:24,519
that as we descended the KD tree we did

542
00:26:22,148 --> 00:26:26,588
push one side or the other so we know

543
00:26:24,519 --> 00:26:28,659
which side we want it to be so what we

544
00:26:26,588 --> 00:26:32,019
need to do is when we do the push we

545
00:26:28,659 --> 00:26:38,799
need to record something that tells us

546
00:26:32,019 --> 00:26:43,298
which one we were going to do right if

547
00:26:38,798 --> 00:26:45,338
that makes sense and in order to push

548
00:26:43,298 --> 00:26:47,679
which one of these we're going to do we

549
00:26:45,338 --> 00:26:50,558
need something that will go from this to

550
00:26:47,679 --> 00:26:52,538
like a yes or no value right that's

551
00:26:50,558 --> 00:26:55,148
whether we need to descend so what we're

552
00:26:52,538 --> 00:26:57,009
trying to do is determine whether any of

553
00:26:55,148 --> 00:26:59,288
the rays are on the far side of the

554
00:26:57,009 --> 00:27:01,028
plane so in other words there is going

555
00:26:59,288 --> 00:27:03,308
to be a and that's your answer right

556
00:27:01,028 --> 00:27:05,019
there so as I'm singing it out loud I

557
00:27:03,308 --> 00:27:07,058
realizes that what the answer is the

558
00:27:05,019 --> 00:27:10,149
answer is it's just equals is what we

559
00:27:07,058 --> 00:27:13,058
need what we need to push on is one one

560
00:27:10,148 --> 00:27:15,368
one one or zero zero zero zero and all

561
00:27:13,058 --> 00:27:17,168
we need to do is say if it equals one of

562
00:27:15,368 --> 00:27:20,288
these or I should say not equals one of

563
00:27:17,169 --> 00:27:23,200
these so if it's not equal to the

564
00:27:20,288 --> 00:27:25,690
pattern that we push then we have to use

565
00:27:23,200 --> 00:27:29,940
it so that's actually what we're going

566
00:27:25,690 --> 00:27:29,940
to do yes yes

567
00:27:32,000 --> 00:27:36,950
oh my god everything is so tangled I

568
00:27:34,720 --> 00:27:39,740
hate having to have a streaming setup

569
00:27:36,950 --> 00:27:42,740
it's the worst there's so many cords

570
00:27:39,740 --> 00:27:46,160
it's a disaster there's like 12 pairs of

571
00:27:42,740 --> 00:27:47,509
headphones never stream folks it was

572
00:27:46,160 --> 00:27:50,450
gonna be so nice when I don't have to

573
00:27:47,509 --> 00:27:53,029
stream anymore okay it's like such a

574
00:27:50,450 --> 00:27:54,950
disaster if you have OCD you can't

575
00:27:53,029 --> 00:27:58,910
stream like basically that's that's the

576
00:27:54,950 --> 00:28:01,490
thing you should know okay um so anyway

577
00:27:58,910 --> 00:28:03,950
if you take a look at what's going on on

578
00:28:01,490 --> 00:28:05,839
here that should priestly give us what

579
00:28:03,950 --> 00:28:09,080
we need to know we're gonna have to say

580
00:28:05,839 --> 00:28:10,879
look in any case if there's anything

581
00:28:09,079 --> 00:28:14,480
other than exactly the one pattern that

582
00:28:10,880 --> 00:28:16,900
says we've early outed then we're gonna

583
00:28:14,480 --> 00:28:24,589
have to continue so this is basically a

584
00:28:16,900 --> 00:28:26,570
not equal to some stack match pattern

585
00:28:24,589 --> 00:28:28,549
so this curse tack value thing that

586
00:28:26,569 --> 00:28:32,809
comes out here is actually going to be

587
00:28:28,549 --> 00:28:34,879
sort of a calm composite and so we're

588
00:28:32,809 --> 00:28:38,419
going to want to to do something like

589
00:28:34,880 --> 00:28:42,170
this where we do the stack push the

590
00:28:38,420 --> 00:28:44,750
curse stacked value here this u16 that

591
00:28:42,170 --> 00:28:49,640
is actually the correct thing but the

592
00:28:44,750 --> 00:28:51,170
stack itself is not going to be a u16 so

593
00:28:49,640 --> 00:28:53,090
what's going to happen here is when we

594
00:28:51,170 --> 00:28:55,789
record this curse deck by we push the

595
00:28:53,089 --> 00:28:59,119
box stack on here what we're gonna do is

596
00:28:55,789 --> 00:29:00,950
when we push this on this will push a

597
00:28:59,119 --> 00:29:02,419
32-bit value that's properly encoded

598
00:29:00,950 --> 00:29:04,519
because we actually did look out the

599
00:29:02,420 --> 00:29:06,410
sides and then on here when we pull it

600
00:29:04,519 --> 00:29:11,210
off we're actually gonna get a like

601
00:29:06,410 --> 00:29:13,850
stack value or a stack a packed packed

602
00:29:11,210 --> 00:29:15,319
stacked value here and then the curse

603
00:29:13,849 --> 00:29:18,019
stacked value is going to be the packed

604
00:29:15,319 --> 00:29:22,039
stacked value probably and it off and

605
00:29:18,019 --> 00:29:24,920
then the the stack match pattern right

606
00:29:22,039 --> 00:29:27,379
or the the are the plane test pattern

607
00:29:24,920 --> 00:29:29,779
maybe let's call call it that is just

608
00:29:27,380 --> 00:29:31,610
gonna be masked off of there right so

609
00:29:29,779 --> 00:29:32,899
the plane test pattern in this case is

610
00:29:31,609 --> 00:29:36,139
going to be whatever the cursed stack

611
00:29:32,900 --> 00:29:38,269
value is and it's going to be shifted

612
00:29:36,140 --> 00:29:42,320
down by the sixteen bits so we're gonna

613
00:29:38,269 --> 00:29:43,519
like slide it over right now there's two

614
00:29:42,319 --> 00:29:45,109
ways we could do this and I'm thinking

615
00:29:43,519 --> 00:29:46,009
that maybe this is the wrong way so I'm

616
00:29:45,109 --> 00:29:47,899
thinking maybe what we

617
00:29:46,009 --> 00:29:49,700
since we know we always have four match

618
00:29:47,900 --> 00:29:52,550
values we're gonna go ahead and slide

619
00:29:49,700 --> 00:29:56,059
those this down and then we're gonna end

620
00:29:52,549 --> 00:29:57,559
this with oxf to get those out so I

621
00:29:56,059 --> 00:30:02,349
think that's probably more what we're

622
00:29:57,559 --> 00:30:04,849
going to do right so we're going to do a

623
00:30:02,349 --> 00:30:11,509
thing that looks something like this

624
00:30:04,849 --> 00:30:16,879
oops and then the plane test pattern

625
00:30:11,509 --> 00:30:22,879
gives us exactly what we need to know so

626
00:30:16,880 --> 00:30:29,540
that's it now I want to say that's

627
00:30:22,880 --> 00:30:34,190
actually the entire code actually we now

628
00:30:29,539 --> 00:30:36,440
no longer need this so that's gone so

629
00:30:34,190 --> 00:30:39,830
really the only thing we need to store

630
00:30:36,440 --> 00:30:48,309
in the lighting boxes to support the KD

631
00:30:39,829 --> 00:30:59,949
tree is we need the plane D value and

632
00:30:48,309 --> 00:30:59,950
the KD index right

633
00:31:02,730 --> 00:31:10,000
something like this so there's which

634
00:31:07,960 --> 00:31:12,759
dimension we're using we would load that

635
00:31:10,000 --> 00:31:16,299
out there's the plane D value which we

636
00:31:12,759 --> 00:31:23,200
need to load out and then I guess

637
00:31:16,299 --> 00:31:24,759
there's the two sides and that's it so

638
00:31:23,200 --> 00:31:32,259
if we take a look at the lighting box

639
00:31:24,759 --> 00:31:39,970
structure which is that if you take a

640
00:31:32,259 --> 00:31:41,769
look at how that's used really what

641
00:31:39,970 --> 00:31:45,490
we're talking about here is just this

642
00:31:41,769 --> 00:31:48,690
top part would get fussed with right and

643
00:31:45,490 --> 00:31:52,210
that's if we want to store them in line

644
00:31:48,690 --> 00:31:52,900
which I don't know that we need to do

645
00:31:52,210 --> 00:31:55,210
anymore

646
00:31:52,900 --> 00:31:59,380
so I think we can probably get out of

647
00:31:55,210 --> 00:32:02,140
that business entirely and just store

648
00:31:59,380 --> 00:32:06,070
this exactly so in the lighting code

649
00:32:02,140 --> 00:32:08,230
where we actually create the tables and

650
00:32:06,069 --> 00:32:11,139
all that garbage I think what we can

651
00:32:08,230 --> 00:32:16,120
probably do here is say let's just have

652
00:32:11,140 --> 00:32:23,670
a table that we're going to use that has

653
00:32:16,119 --> 00:32:28,059
all of the that halls has all of the KD

654
00:32:23,670 --> 00:32:30,370
tree stuff in it that's what I think we

655
00:32:28,059 --> 00:32:32,139
would want to do now the tricky part

656
00:32:30,369 --> 00:32:34,929
here is that if we actually want to do

657
00:32:32,140 --> 00:32:38,640
that we we do have the problem of

658
00:32:34,930 --> 00:32:42,070
looking up into two separate arrays and

659
00:32:38,640 --> 00:32:45,340
so looking at the light box which is

660
00:32:42,069 --> 00:32:47,589
here we have that problem that this pack

661
00:32:45,339 --> 00:32:54,730
structure right is the thing that tells

662
00:32:47,589 --> 00:32:56,559
us that piece of information so I'm

663
00:32:54,730 --> 00:33:00,099
going to go ahead and say that probably

664
00:32:56,559 --> 00:33:04,750
we want to figure out a way to do this

665
00:33:00,099 --> 00:33:07,149
loop without without checking that

666
00:33:04,750 --> 00:33:11,559
so I'm guessing what we want here is to

667
00:33:07,150 --> 00:33:14,680
put the leaf container flag into

668
00:33:11,559 --> 00:33:16,058
something saner so I'm going to go ahead

669
00:33:14,680 --> 00:33:21,788
and say something like

670
00:33:16,058 --> 00:33:25,358
this and I realize I don't really know

671
00:33:21,788 --> 00:33:28,058
what I'm doing exactly here but let's

672
00:33:25,358 --> 00:33:31,449
say that we have is leaf container and

673
00:33:28,058 --> 00:33:34,928
it's a separate thing so we just know

674
00:33:31,450 --> 00:33:39,929
what it is when we are going through

675
00:33:34,929 --> 00:33:43,210
here and picking things off of the stack

676
00:33:39,929 --> 00:33:48,570
it probably is fine for us just to use

677
00:33:43,210 --> 00:33:54,219
one additional bit for that right and so

678
00:33:48,569 --> 00:34:00,939
for example like maybe it's something

679
00:33:54,219 --> 00:34:05,278
more like this so whenever we push

680
00:34:00,940 --> 00:34:05,278
something on the stack we actually know

681
00:34:10,019 --> 00:34:17,259
which one it is or something and so we

682
00:34:14,769 --> 00:34:20,849
can actually just find out what is leaf

683
00:34:17,260 --> 00:34:25,659
container should be by shifting it and

684
00:34:20,849 --> 00:34:27,399
masking it off right now because this

685
00:34:25,659 --> 00:34:29,919
leaf container is just gonna be used as

686
00:34:27,398 --> 00:34:31,960
a boolean I'm gonna go ahead and say we

687
00:34:29,918 --> 00:34:39,038
probably don't even have to do that we

688
00:34:31,960 --> 00:34:43,510
don't need it to be zero or one it can

689
00:34:39,039 --> 00:34:47,889
just be nonzero and it will be fine so I

690
00:34:43,510 --> 00:34:53,020
think if we do this that's the entire

691
00:34:47,889 --> 00:34:56,349
decode and we no longer need to actually

692
00:34:53,019 --> 00:34:57,250
have his leaf container encoded in here

693
00:34:56,349 --> 00:35:02,410
anymore

694
00:34:57,250 --> 00:35:04,440
so that would go away so like for

695
00:35:02,409 --> 00:35:04,440
example

696
00:35:19,199 --> 00:35:24,219
so we don't want to remove it yet

697
00:35:21,728 --> 00:35:25,719
because I still want to be able to test

698
00:35:24,219 --> 00:35:28,058
against the old version of these

699
00:35:25,719 --> 00:35:31,058
routines so I'm not gonna vape that code

700
00:35:28,059 --> 00:35:36,519
out and put like you know the new path

701
00:35:31,059 --> 00:35:40,809
in yet as mandatory so we're gonna we're

702
00:35:36,518 --> 00:35:44,558
not going to do that right so yeah just

703
00:35:40,809 --> 00:35:47,470
to keep that in mind what I do want to

704
00:35:44,559 --> 00:35:48,789
do however is we have to think a little

705
00:35:47,469 --> 00:35:53,139
bit harder about how we're gonna run

706
00:35:48,789 --> 00:35:58,470
these tests now is this how we are

707
00:35:53,139 --> 00:36:00,699
typically running this I think yeah so

708
00:35:58,469 --> 00:36:01,959
we do need to think a little bit harder

709
00:36:00,699 --> 00:36:03,728
about how we're gonna run these tests

710
00:36:01,960 --> 00:36:08,349
now though because I need somewhere to

711
00:36:03,728 --> 00:36:12,159
put the KT box information and we need

712
00:36:08,349 --> 00:36:14,349
that to be something that the Lightning

713
00:36:12,159 --> 00:36:17,190
code can actually work with I think what

714
00:36:14,349 --> 00:36:19,809
I'm going to do for now again is just

715
00:36:17,190 --> 00:36:23,469
sort of take advantage of some facts

716
00:36:19,809 --> 00:36:27,039
here that we know we can use so if I

717
00:36:23,469 --> 00:36:29,528
were to Union this in here like so and

718
00:36:27,039 --> 00:36:31,180
I'm I'm only doing this so we can still

719
00:36:29,528 --> 00:36:33,009
flat load the structure from our old

720
00:36:31,179 --> 00:36:36,098
data files that's all I'm doing because

721
00:36:33,009 --> 00:36:37,809
I want to keep that load in place all

722
00:36:36,099 --> 00:36:41,079
I'm doing here is just saying look we

723
00:36:37,809 --> 00:36:42,700
had this before overlaid on top of it

724
00:36:41,079 --> 00:36:44,019
because we don't need that anymore we're

725
00:36:42,699 --> 00:36:47,498
never touching it and aren't going to

726
00:36:44,018 --> 00:36:52,748
use it I'm just gonna lay in the actual

727
00:36:47,498 --> 00:36:57,368
thing we need here which is the tree

728
00:36:52,748 --> 00:37:01,409
Katie tree count and like Katie tree

729
00:36:57,369 --> 00:37:01,410
node right something like this

730
00:37:07,059 --> 00:37:12,140
and so what we'll do is we'll figure out

731
00:37:10,849 --> 00:37:14,150
how many of these we might have

732
00:37:12,139 --> 00:37:16,129
maximally we'll have an array there that

733
00:37:14,150 --> 00:37:17,838
we can use as scratch base so we just

734
00:37:16,130 --> 00:37:22,009
build them in there and then off we go

735
00:37:17,838 --> 00:37:25,998
and then we can have like literally a KD

736
00:37:22,009 --> 00:37:27,978
tree node here for lighting that we can

737
00:37:25,998 --> 00:37:30,439
use and that KD tree node will just

738
00:37:27,978 --> 00:37:32,989
literally only have exactly the things

739
00:37:30,440 --> 00:37:37,548
that we need here so it needs the plane

740
00:37:32,989 --> 00:37:43,400
D it needs a u8 for the KD index and

741
00:37:37,548 --> 00:37:46,818
then it needs the two sides right so it

742
00:37:43,400 --> 00:37:48,829
needs basically this now I don't know

743
00:37:46,818 --> 00:37:51,949
that it needs anything else and as far

744
00:37:48,829 --> 00:37:54,229
as I can tell this KD index is probably

745
00:37:51,949 --> 00:37:58,278
not actually something we can store as a

746
00:37:54,228 --> 00:38:04,879
u8 because I mean yeah there's just a

747
00:37:58,278 --> 00:38:13,759
bunch of extra padding there so it

748
00:38:04,880 --> 00:38:18,099
probably looks more like that yeah the

749
00:38:13,759 --> 00:38:25,809
good news is if I'm reading that right

750
00:38:18,099 --> 00:38:29,539
this is actually like 4 by 4 or 16 bytes

751
00:38:25,809 --> 00:38:33,019
right so in other words we've got to you

752
00:38:29,539 --> 00:38:35,778
32s for the side so that's 2 we've got a

753
00:38:33,018 --> 00:38:38,528
plain D which is an F 32 so that's 3 and

754
00:38:35,778 --> 00:38:42,318
then we've got 16 8 8 which is another

755
00:38:38,528 --> 00:38:45,739
32 bits so that's four 32-bit values or

756
00:38:42,318 --> 00:38:49,208
4 4 byte values or 16 bytes total that

757
00:38:45,739 --> 00:38:55,068
means 4 per cache line which is a nice

758
00:38:49,208 --> 00:38:57,108
compact structure so again the reason

759
00:38:55,068 --> 00:38:59,298
that I would just point out that I kind

760
00:38:57,108 --> 00:39:01,489
of like that better is because if you

761
00:38:59,298 --> 00:39:03,798
take a look at how much memory traffic

762
00:39:01,489 --> 00:39:05,329
we were going to have to have when we

763
00:39:03,798 --> 00:39:06,858
were using the lighting box structures

764
00:39:05,329 --> 00:39:08,989
well if you look back at the lighting

765
00:39:06,858 --> 00:39:11,119
box structures how many things are in

766
00:39:08,989 --> 00:39:13,130
there you can see that there's a 32-bit

767
00:39:11,119 --> 00:39:17,630
value here in the lighting box pack so

768
00:39:13,130 --> 00:39:23,809
that's 4 bytes but then we have 3 ty

769
00:39:17,630 --> 00:39:25,849
three times four so that's to write out

770
00:39:23,809 --> 00:39:29,839
the entire equation right we've got

771
00:39:25,849 --> 00:39:34,338
three VIII's which are three four byte

772
00:39:29,838 --> 00:39:36,469
values plus one four byte value or 40

773
00:39:34,338 --> 00:39:37,599
bytes per right which I believe is how

774
00:39:36,469 --> 00:39:41,868
big this is

775
00:39:37,599 --> 00:39:44,960
so 16 per node is a lot better than 40

776
00:39:41,869 --> 00:39:49,160
per node for obvious reasons it's more

777
00:39:44,960 --> 00:39:52,009
than twice as large if it's at 40 so in

778
00:39:49,159 --> 00:39:54,379
terms of the total amount of stuff we're

779
00:39:52,009 --> 00:39:56,509
moving through the routine if there were

780
00:39:54,380 --> 00:39:58,160
any cash issues we were having this

781
00:39:56,509 --> 00:40:00,048
would definitely have helped them now

782
00:39:58,159 --> 00:40:02,328
again we're doing this to do less ops

783
00:40:00,048 --> 00:40:04,009
here as well so we haven't really

784
00:40:02,329 --> 00:40:05,480
measured the cash effects we're just

785
00:40:04,009 --> 00:40:06,889
trying to simplify the ops we're

786
00:40:05,480 --> 00:40:09,048
actually doing for what we have before

787
00:40:06,889 --> 00:40:10,400
we start optimizing so unfortunately

788
00:40:09,048 --> 00:40:15,108
we're not going to necessarily know how

789
00:40:10,400 --> 00:40:16,639
much the cash affected us here because

790
00:40:15,108 --> 00:40:23,929
we're also going to be doing less ops

791
00:40:16,639 --> 00:40:25,338
right so sometimes you can't yeah I mean

792
00:40:23,929 --> 00:40:26,838
it's hard to really know exactly how

793
00:40:25,338 --> 00:40:28,518
good that would be we could try to look

794
00:40:26,838 --> 00:40:30,170
at some cache performance counter values

795
00:40:28,518 --> 00:40:32,058
but again because we're changing the ops

796
00:40:30,170 --> 00:40:34,099
at the same time I'm not sure to what

797
00:40:32,059 --> 00:40:35,778
extent we could really make a firm

798
00:40:34,099 --> 00:40:36,920
statement about that because you know

799
00:40:35,778 --> 00:40:38,059
who knows what'll happen we don't even

800
00:40:36,920 --> 00:40:42,500
know who's gonna be faster it could be

801
00:40:38,059 --> 00:40:44,660
slower right so what we want to do here

802
00:40:42,500 --> 00:40:46,909
is say okay when we're getting this

803
00:40:44,659 --> 00:40:49,818
stuff out we actually don't grab the box

804
00:40:46,909 --> 00:40:52,068
early on in fact what we're mostly going

805
00:40:49,818 --> 00:40:59,150
to be doing is looking more specifically

806
00:40:52,068 --> 00:41:00,829
at we're gonna be looking more

807
00:40:59,150 --> 00:41:02,900
specifically at individual values and

808
00:41:00,829 --> 00:41:04,609
how we're gonna pack these in and so

809
00:41:02,900 --> 00:41:09,470
actually you know what it turns out that

810
00:41:04,608 --> 00:41:11,239
there might be a real good reason oh you

811
00:41:09,469 --> 00:41:13,399
know what there is okay okay okay cool

812
00:41:11,239 --> 00:41:14,568
there's a really good way that we can

813
00:41:13,400 --> 00:41:15,740
actually use these cage-free nodes

814
00:41:14,568 --> 00:41:19,130
because of what we're gonna have to do

815
00:41:15,739 --> 00:41:21,409
in here okay so actually this is fine

816
00:41:19,130 --> 00:41:23,809
we're gonna need this right because

817
00:41:21,409 --> 00:41:28,940
we're actually going to need the leaf

818
00:41:23,809 --> 00:41:30,980
count and the first leaf index right now

819
00:41:28,940 --> 00:41:31,849
we could just snuggle those into the

820
00:41:30,980 --> 00:41:32,900
sides because we know the

821
00:41:31,849 --> 00:41:34,670
not use them but we might as well just

822
00:41:32,900 --> 00:41:36,050
use the two values we actually have for

823
00:41:34,670 --> 00:41:40,130
the padding because there's no reason

824
00:41:36,050 --> 00:41:43,940
not to right so yeah turns out we can

825
00:41:40,130 --> 00:41:46,099
use those and and you know it's all good

826
00:41:43,940 --> 00:41:54,950
I think at least as far as I can tell

827
00:41:46,099 --> 00:41:56,900
that that seems right yeah okay so yeah

828
00:41:54,949 --> 00:41:59,089
what we would do now is we'd always load

829
00:41:56,900 --> 00:42:00,920
Katie tree nodes here so we'd actually

830
00:41:59,090 --> 00:42:03,289
load a Katie tree node out of this thing

831
00:42:00,920 --> 00:42:07,430
and we'd always load those out of like

832
00:42:03,289 --> 00:42:11,480
KD nodes and it would come out using her

833
00:42:07,429 --> 00:42:13,969
stack value right then what we would do

834
00:42:11,480 --> 00:42:15,619
here is we want to load out the

835
00:42:13,969 --> 00:42:16,969
information we actually need and in this

836
00:42:15,619 --> 00:42:18,529
case I don't think we actually need to

837
00:42:16,969 --> 00:42:20,779
do it this way because there's no point

838
00:42:18,530 --> 00:42:21,920
in actually loading it out anymore we

839
00:42:20,780 --> 00:42:23,960
can actually just use it when we

840
00:42:21,920 --> 00:42:25,909
actually need it because it you know

841
00:42:23,960 --> 00:42:27,889
they don't get reused it's it's pretty

842
00:42:25,909 --> 00:42:30,019
much it's pretty clean actually the way

843
00:42:27,889 --> 00:42:34,039
we're doing this from what I can see

844
00:42:30,019 --> 00:42:40,820
so we'll load up that here the KD index

845
00:42:34,039 --> 00:42:52,070
will load here like so what do we call

846
00:42:40,820 --> 00:42:54,950
that just put ad index and then we also

847
00:42:52,070 --> 00:42:57,830
would load it here although here we

848
00:42:54,949 --> 00:43:03,730
actually only needed once so it would

849
00:42:57,829 --> 00:43:06,279
literally just be in there right there

850
00:43:03,730 --> 00:43:09,599
so yeah

851
00:43:06,280 --> 00:43:09,599
[Music]

852
00:43:13,090 --> 00:43:19,870
I don't think we've really addressed

853
00:43:17,500 --> 00:43:21,250
this yet I I said I think we've that's

854
00:43:19,869 --> 00:43:22,269
finished I don't actually think it is we

855
00:43:21,250 --> 00:43:25,469
probably take a look at that a little

856
00:43:22,269 --> 00:43:25,469
more carefully but we'll see

857
00:43:33,670 --> 00:43:39,170
so yeah I think that's all we need so

858
00:43:37,159 --> 00:43:42,710
then instead of looking at say like box

859
00:43:39,170 --> 00:43:45,680
pack and this nonsense right we would

860
00:43:42,710 --> 00:43:49,220
just use first leaf index and we would

861
00:43:45,679 --> 00:43:50,929
look off of the KB note here since I

862
00:43:49,219 --> 00:43:52,789
kind of been doing it this way maybe

863
00:43:50,929 --> 00:43:55,759
we'll change to do it like that

864
00:43:52,789 --> 00:43:58,699
so for the leaf index we go first leaf

865
00:43:55,760 --> 00:44:00,740
index like so pretty sure the rest of

866
00:43:58,699 --> 00:44:03,259
this routine stays the same and then in

867
00:44:00,739 --> 00:44:05,769
this case we can actually just have a

868
00:44:03,260 --> 00:44:09,740
stop value here so this is going to be

869
00:44:05,769 --> 00:44:12,650
like while leaf index is less than one

870
00:44:09,739 --> 00:44:15,439
passed last leaf index and we're gonna

871
00:44:12,650 --> 00:44:18,349
generate that value up here as an unpack

872
00:44:15,440 --> 00:44:20,510
operation so one past left these last

873
00:44:18,349 --> 00:44:23,360
leaf index is just going to be the leaf

874
00:44:20,510 --> 00:44:27,550
index which is the first one and then

875
00:44:23,360 --> 00:44:33,110
the child count right so the Katy arrow

876
00:44:27,550 --> 00:44:34,760
leave camp so we unpack those in the

877
00:44:33,110 --> 00:44:37,789
case of a leaf container we loop over

878
00:44:34,760 --> 00:44:42,430
all of them and we stop when we get to

879
00:44:37,789 --> 00:44:46,190
the last one and error and out right and

880
00:44:42,429 --> 00:44:47,599
then we could actually shove that in

881
00:44:46,190 --> 00:44:51,470
there for good measure if you wanted to

882
00:44:47,599 --> 00:44:55,009
I don't know that we do but we could so

883
00:44:51,469 --> 00:44:57,409
we can then look at this part of the

884
00:44:55,010 --> 00:44:59,540
routine that all looks fine it's using

885
00:44:57,409 --> 00:45:03,859
the pack stacked values here to extract

886
00:44:59,539 --> 00:45:05,690
what we need to extract out of those and

887
00:45:03,860 --> 00:45:07,070
doing the test then it knows whether

888
00:45:05,690 --> 00:45:18,849
it's a leaf container or not obviously

889
00:45:07,070 --> 00:45:18,850
as necessary and I suppose

890
00:45:22,000 --> 00:45:27,869
I suppose this actually looks like this

891
00:45:32,489 --> 00:45:38,589
so we set curse stock value to 0 because

892
00:45:35,949 --> 00:45:40,539
we have bottomed out we look up the tree

893
00:45:38,590 --> 00:45:43,150
to see whether or not we can find a new

894
00:45:40,539 --> 00:45:48,659
one if we do find a new one we break out

895
00:45:43,150 --> 00:45:52,539
and then off we go otherwise we don't

896
00:45:48,659 --> 00:46:01,719
and we just leave it at zero when the

897
00:45:52,539 --> 00:46:03,130
depth bottoms out yeah I don't know

898
00:46:01,719 --> 00:46:04,299
probably not the best way to write that

899
00:46:03,130 --> 00:46:07,470
if to think about that a little bit more

900
00:46:04,300 --> 00:46:07,470
but it's something like that

901
00:46:07,739 --> 00:46:11,829
ok so on the other side when we're

902
00:46:10,300 --> 00:46:14,170
actually processing a node for the first

903
00:46:11,829 --> 00:46:16,569
time what we do is we say okay which

904
00:46:14,170 --> 00:46:18,130
side is the origin on and this right

905
00:46:16,570 --> 00:46:20,859
here is going to give us that piece of

906
00:46:18,130 --> 00:46:22,930
information and so we could actually

907
00:46:20,858 --> 00:46:27,309
just say look it's whatever the origin

908
00:46:22,929 --> 00:46:29,739
actually is - the the plain D we don't

909
00:46:27,309 --> 00:46:31,210
really need to belabor that point we're

910
00:46:29,739 --> 00:46:35,709
going to move the mask and we're gonna

911
00:46:31,210 --> 00:46:38,500
end it with just the bottom bit to give

912
00:46:35,710 --> 00:46:40,960
us a 0 or 1 value right then what we're

913
00:46:38,500 --> 00:46:42,849
gonna do is say alright whichever side

914
00:46:40,960 --> 00:46:45,789
we were on so from the 0 side of the 1

915
00:46:42,849 --> 00:46:48,369
side we're gonna push that on and I'm

916
00:46:45,789 --> 00:46:50,019
sorry we're going to descend to that

917
00:46:48,369 --> 00:46:51,700
side and then on the Box tack we're

918
00:46:50,019 --> 00:46:54,639
gonna push whichever one we didn't do

919
00:46:51,699 --> 00:46:58,079
right now if we do want to do a see move

920
00:46:54,639 --> 00:47:04,059
here again I'm not 100% certain about

921
00:46:58,079 --> 00:47:07,029
what this will look like but let's set

922
00:47:04,059 --> 00:47:09,250
it up to do a see move for now so we

923
00:47:07,030 --> 00:47:11,920
know that M s VC won't generate C moves

924
00:47:09,250 --> 00:47:15,219
even if it probably should so I'm gonna

925
00:47:11,920 --> 00:47:22,329
just say like the box stock at Value you

926
00:47:15,219 --> 00:47:25,598
know is is this thing and and so we're

927
00:47:22,329 --> 00:47:27,039
gonna to take the box tack value is a

928
00:47:25,599 --> 00:47:29,890
reference here if that's where it would

929
00:47:27,039 --> 00:47:32,219
get pushed on and then we're just going

930
00:47:29,889 --> 00:47:32,219
to say

931
00:47:35,559 --> 00:47:39,349
we're always pushing something on in

932
00:47:37,670 --> 00:47:40,340
this case too so I can do the increment

933
00:47:39,349 --> 00:47:43,429
there right

934
00:47:40,340 --> 00:47:49,640
so we don't need to see move that so

935
00:47:43,429 --> 00:47:51,769
this will see move oh wait what am I

936
00:47:49,639 --> 00:47:53,719
talking about I'm just I'm ridiculous we

937
00:47:51,769 --> 00:47:56,480
got rid of the conditional it's not a

938
00:47:53,719 --> 00:47:59,989
conditional it's just a different

939
00:47:56,480 --> 00:48:01,429
address for load great never mind I'm

940
00:47:59,989 --> 00:48:03,589
still thinking see move

941
00:48:01,429 --> 00:48:08,690
we don't have C moves anymore no issues

942
00:48:03,590 --> 00:48:09,890
oops rid of that awesome so we don't

943
00:48:08,690 --> 00:48:12,139
actually do any conditional moves here

944
00:48:09,889 --> 00:48:15,139
we just do moves they're just straight

945
00:48:12,139 --> 00:48:19,929
moves right with a different offset so

946
00:48:15,139 --> 00:48:19,929
it's just an address load thing perfect

947
00:48:21,190 --> 00:48:30,500
okay I think we're good

948
00:48:28,119 --> 00:48:34,250
I'm sure there's so many bugs in there I

949
00:48:30,500 --> 00:48:38,510
can't even imagine because this is very

950
00:48:34,250 --> 00:48:42,469
complicated but I think that that is the

951
00:48:38,510 --> 00:48:45,050
end of the bugs my brain can find so now

952
00:48:42,469 --> 00:48:47,750
we have to do the unsavory pasta process

953
00:48:45,050 --> 00:48:50,210
of finding all of the bugs my brain

954
00:48:47,750 --> 00:48:51,289
didn't find and in order to do that

955
00:48:50,210 --> 00:48:53,809
we're gonna have to first start by

956
00:48:51,289 --> 00:48:56,900
introducing a bunch more bugs because we

957
00:48:53,809 --> 00:49:00,949
now have a different format right then

958
00:48:56,900 --> 00:49:06,230
we are like we're not storing those

959
00:49:00,949 --> 00:49:10,039
we're not storing these Katie nodes as

960
00:49:06,230 --> 00:49:14,510
Katie nodes yet so in the split box

961
00:49:10,039 --> 00:49:18,440
routine we need to be able to write

962
00:49:14,510 --> 00:49:20,990
those out you know I'm saying so the way

963
00:49:18,440 --> 00:49:26,510
I would like to do this is if you look

964
00:49:20,989 --> 00:49:29,599
here split box always has two routines

965
00:49:26,510 --> 00:49:32,330
here right this is what happens if it

966
00:49:29,599 --> 00:49:33,920
actually split the box into two and this

967
00:49:32,329 --> 00:49:37,610
is what happens if it didn't actually

968
00:49:33,920 --> 00:49:40,119
split the box into two and so we should

969
00:49:37,610 --> 00:49:43,570
be able to create both trees

970
00:49:40,119 --> 00:49:47,349
side-by-side so that we can still run

971
00:49:43,570 --> 00:49:49,530
both versions of this code and that

972
00:49:47,349 --> 00:49:53,500
should be pretty straightforward I think

973
00:49:49,530 --> 00:49:55,269
you know don't quote me on that so when

974
00:49:53,500 --> 00:49:57,250
we actually run the split box routine

975
00:49:55,269 --> 00:49:59,050
and we're passing a lightening box down

976
00:49:57,250 --> 00:50:01,000
so you can see like how this works right

977
00:49:59,050 --> 00:50:03,700
it adds some storage then called split

978
00:50:01,000 --> 00:50:06,070
box and says here's the box that you're

979
00:50:03,699 --> 00:50:08,919
actually working on what we should be

980
00:50:06,070 --> 00:50:11,710
able to do now is also pass in here in

981
00:50:08,920 --> 00:50:14,769
addition to the parent box that we're

982
00:50:11,710 --> 00:50:17,400
working on we can pass a parent node so

983
00:50:14,769 --> 00:50:19,630
we'll just build both at the same time

984
00:50:17,400 --> 00:50:21,940
we'll call that I guess parent KD or

985
00:50:19,630 --> 00:50:23,950
something like that and that way we can

986
00:50:21,940 --> 00:50:26,320
actually set these up properly so what

987
00:50:23,949 --> 00:50:29,259
we know is if we're working on one of

988
00:50:26,320 --> 00:50:32,590
these parent KD things here and this is

989
00:50:29,260 --> 00:50:35,140
possibly going to be a little bit more

990
00:50:32,590 --> 00:50:40,420
complicated so if we actually split

991
00:50:35,139 --> 00:50:42,309
we're going to need to do if we didn't

992
00:50:40,420 --> 00:50:46,269
actually split then we ourselves are a

993
00:50:42,309 --> 00:50:50,679
leaf container right if we didn't split

994
00:50:46,269 --> 00:50:53,170
then we aren't so what we need to do

995
00:50:50,679 --> 00:50:56,429
here is we need to know some additional

996
00:50:53,170 --> 00:50:59,289
information like for example when we

997
00:50:56,429 --> 00:51:05,349
return here we're going to need to

998
00:50:59,289 --> 00:51:08,469
return the the actually split value so

999
00:51:05,349 --> 00:51:10,480
that we know which one are our children

1000
00:51:08,469 --> 00:51:13,629
were right like if they're leaf

1001
00:51:10,480 --> 00:51:15,130
containers or not now we don't need that

1002
00:51:13,630 --> 00:51:19,000
for the current system but we do need

1003
00:51:15,130 --> 00:51:21,789
that for the new system because we load

1004
00:51:19,000 --> 00:51:23,679
up the sides value the two sides values

1005
00:51:21,789 --> 00:51:25,809
that are packed into our parent those

1006
00:51:23,679 --> 00:51:29,259
side values in code whether the person

1007
00:51:25,809 --> 00:51:33,969
that they are referring to is actually a

1008
00:51:29,260 --> 00:51:38,320
leaf container right if that makes sense

1009
00:51:33,969 --> 00:51:40,569
and that's to avoid us having to pack

1010
00:51:38,320 --> 00:51:42,960
more values in the stack which maybe we

1011
00:51:40,570 --> 00:51:42,960
should do

1012
00:51:56,280 --> 00:52:07,440
oh man now what I'm thinking about it

1013
00:52:05,789 --> 00:52:13,860
I'm thinking maybe that's actually

1014
00:52:07,440 --> 00:52:18,329
something we should just do yeah we

1015
00:52:13,860 --> 00:52:27,750
should never mind forget everything I

1016
00:52:18,329 --> 00:52:30,289
just said every time I say that I think

1017
00:52:27,750 --> 00:52:35,690
about there's a key and peele sketch

1018
00:52:30,289 --> 00:52:39,389
where they're at like a diner and

1019
00:52:35,690 --> 00:52:44,400
they're each trying to outdo each other

1020
00:52:39,389 --> 00:52:46,710
about how like it starts off with how

1021
00:52:44,400 --> 00:52:49,440
like authentic Lise other and their

1022
00:52:46,710 --> 00:52:52,349
order is going to be like how how true

1023
00:52:49,440 --> 00:52:54,510
to their roots the the the order is

1024
00:52:52,349 --> 00:52:55,860
going to be but it quickly degenerates

1025
00:52:54,510 --> 00:52:59,610
into them just being absolutely

1026
00:52:55,860 --> 00:53:02,490
ridiculous with their orders as most of

1027
00:52:59,610 --> 00:53:07,170
those kind of key and Peele sketches do

1028
00:53:02,489 --> 00:53:12,089
and at one point like when they're

1029
00:53:07,170 --> 00:53:14,099
really heated and I can't remember if

1030
00:53:12,090 --> 00:53:15,269
it's key appeal actually I need to go

1031
00:53:14,099 --> 00:53:17,219
watch the sketch again it's been too

1032
00:53:15,269 --> 00:53:18,929
long one of them goes like forget

1033
00:53:17,219 --> 00:53:21,779
everything I've set up into this point

1034
00:53:18,929 --> 00:53:23,730
to like erase all the previous order and

1035
00:53:21,780 --> 00:53:26,850
then goes you know to order something

1036
00:53:23,730 --> 00:53:29,579
absolutely ridiculous I need to watch it

1037
00:53:26,849 --> 00:53:31,860
again like most key and Peele sketches

1038
00:53:29,579 --> 00:53:34,049
it's very good they do that sort of

1039
00:53:31,860 --> 00:53:35,849
escalation kind of comedy where each one

1040
00:53:34,050 --> 00:53:38,310
is trying to up the other one in us in

1041
00:53:35,849 --> 00:53:40,199
like a sketch like better than anybody

1042
00:53:38,309 --> 00:53:42,389
else it's it's so good they have so many

1043
00:53:40,199 --> 00:53:47,059
of those they have the like facial hair

1044
00:53:42,389 --> 00:53:52,409
at the office one they have the hats

1045
00:53:47,059 --> 00:53:53,519
where they do the different hats I can't

1046
00:53:52,409 --> 00:53:54,690
even remember all the ones they've got

1047
00:53:53,519 --> 00:53:56,039
but they have so many of those good

1048
00:53:54,690 --> 00:53:59,309
escalations sketches where they keep

1049
00:53:56,039 --> 00:54:01,739
trying to do to outdo each other alright

1050
00:53:59,309 --> 00:54:04,079
it doesn't matter if you don't watch key

1051
00:54:01,739 --> 00:54:06,969
&amp; peele you should it's really sucks

1052
00:54:04,079 --> 00:54:12,250
that it's not a show anymore I

1053
00:54:06,969 --> 00:54:13,480
but subside point anyway like what I was

1054
00:54:12,250 --> 00:54:17,400
saying is that when you come through

1055
00:54:13,480 --> 00:54:19,960
here and you do like is leaf container

1056
00:54:17,400 --> 00:54:21,970
that implies to me that you could have

1057
00:54:19,960 --> 00:54:24,400
just packed these values so I think

1058
00:54:21,969 --> 00:54:25,719
actually what we could do is like we

1059
00:54:24,400 --> 00:54:27,338
could have is leaf container and we

1060
00:54:25,719 --> 00:54:29,049
could have is leaf count or actually

1061
00:54:27,338 --> 00:54:31,750
just things that we unpack off the stack

1062
00:54:29,050 --> 00:54:33,880
so I think what we could do is say we

1063
00:54:31,750 --> 00:54:36,280
don't actually need this because when

1064
00:54:33,880 --> 00:54:39,010
you actually do a curse stack value here

1065
00:54:36,280 --> 00:54:41,319
this doesn't need to occur anymore I

1066
00:54:39,010 --> 00:54:43,119
don't think and I could be wrong about

1067
00:54:41,318 --> 00:54:45,818
that but I'm just gonna say that I'm

1068
00:54:43,119 --> 00:54:49,990
right because maybe I can just claim

1069
00:54:45,818 --> 00:54:52,000
rightness and not care so what I'm

1070
00:54:49,989 --> 00:54:54,338
thinking here is that like look we

1071
00:54:52,000 --> 00:54:57,429
actually load the cursed act value here

1072
00:54:54,338 --> 00:54:59,679
if we're in a place that we know we're

1073
00:54:57,429 --> 00:55:01,269
processing a node but if we're not

1074
00:54:59,679 --> 00:55:03,399
processing a node in which case we're in

1075
00:55:01,269 --> 00:55:05,710
here then we don't actually ever need to

1076
00:55:03,400 --> 00:55:08,019
do that because the leaf index can just

1077
00:55:05,710 --> 00:55:09,550
be the cursed act value and then the one

1078
00:55:08,019 --> 00:55:11,980
past leaf index can just be that plus

1079
00:55:09,550 --> 00:55:13,450
the leaf count right so those can

1080
00:55:11,980 --> 00:55:15,338
actually be things that we just load off

1081
00:55:13,449 --> 00:55:17,259
the stack so in this case we just run

1082
00:55:15,338 --> 00:55:20,259
through the boxes like we do here in

1083
00:55:17,260 --> 00:55:24,040
this case when we start packed when we

1084
00:55:20,260 --> 00:55:25,869
start popping things off of the stack we

1085
00:55:24,039 --> 00:55:28,029
know that anything that we pushed on the

1086
00:55:25,869 --> 00:55:31,680
stack here we can identify whether or

1087
00:55:28,030 --> 00:55:31,680
not it was a leaf container and in fact

1088
00:55:40,369 --> 00:55:45,000
in fact I guess that's one wrinkle in

1089
00:55:43,170 --> 00:55:46,409
the whole plan that I hadn't been

1090
00:55:45,000 --> 00:55:48,690
planning for here so that's one bug I

1091
00:55:46,409 --> 00:55:52,710
already just thought so when we're

1092
00:55:48,690 --> 00:55:53,880
popping the curse tack values out we

1093
00:55:52,710 --> 00:55:55,710
need to know whether they're leaf

1094
00:55:53,880 --> 00:55:57,450
containers or not now you know what I

1095
00:55:55,710 --> 00:56:00,539
could just do that determination at the

1096
00:55:57,449 --> 00:56:03,659
top of the routine like so what we could

1097
00:56:00,539 --> 00:56:09,329
do here is say all right the cursed AK

1098
00:56:03,659 --> 00:56:11,159
value is something that we pre-prepared

1099
00:56:09,329 --> 00:56:16,410
that has all the information in that we

1100
00:56:11,159 --> 00:56:17,940
need right so it's not actually that we

1101
00:56:16,409 --> 00:56:20,179
determine whether it's a leaf container

1102
00:56:17,940 --> 00:56:23,730
what the leaf and what the leaf count is

1103
00:56:20,179 --> 00:56:28,919
as unpacks on the cursed AK value which

1104
00:56:23,730 --> 00:56:31,318
we do not use directly right and so then

1105
00:56:28,920 --> 00:56:37,470
the part where we unpack the stack here

1106
00:56:31,318 --> 00:56:39,509
is actually this part is only gonna

1107
00:56:37,469 --> 00:56:46,230
unpack those two values of course yeah

1108
00:56:39,510 --> 00:56:48,390
but then if so hard to get this right if

1109
00:56:46,230 --> 00:56:51,710
I'm guess I might as well do it because

1110
00:56:48,389 --> 00:56:55,618
I already have to unpack it there right

1111
00:56:51,710 --> 00:57:00,990
it's like an alpaca it unpacks it gets

1112
00:56:55,619 --> 00:57:02,430
unpacked so yeah I don't know so anyway

1113
00:57:00,989 --> 00:57:04,019
as we roll through here what I was

1114
00:57:02,429 --> 00:57:06,118
trying to say is like okay so then

1115
00:57:04,019 --> 00:57:09,358
there's like a leaf count value that you

1116
00:57:06,119 --> 00:57:11,519
would unpack as well right that's gonna

1117
00:57:09,358 --> 00:57:12,929
be zero here and in fact I guess one

1118
00:57:11,519 --> 00:57:14,579
thing we could do is say we don't need

1119
00:57:12,929 --> 00:57:18,299
his leaf container we can just use leaf

1120
00:57:14,579 --> 00:57:19,740
count at that point right so we could

1121
00:57:18,300 --> 00:57:26,039
just say look there's a leaf count if

1122
00:57:19,739 --> 00:57:28,348
the leaf count is non zero that's how we

1123
00:57:26,039 --> 00:57:30,389
know we're in the leaf and then we start

1124
00:57:28,349 --> 00:57:33,869
loading out so in that case we use the

1125
00:57:30,389 --> 00:57:38,699
curse tack value as the leaf index and

1126
00:57:33,869 --> 00:57:41,010
we run through them all right when we're

1127
00:57:38,699 --> 00:57:45,328
doing one of these and we load these

1128
00:57:41,010 --> 00:57:49,050
values up out of here we need to do the

1129
00:57:45,329 --> 00:57:52,548
unpack here right so we need to set the

1130
00:57:49,050 --> 00:58:06,839
leaf count and we need to set the

1131
00:57:52,548 --> 00:58:09,298
I think that's it right

1132
00:58:06,838 --> 00:58:10,920
when we load one of these up we just

1133
00:58:09,298 --> 00:58:15,349
need to set the leaf count and the curse

1134
00:58:10,920 --> 00:58:15,349
tack value I think that's all we have

1135
00:58:19,219 --> 00:58:25,559
yeah so this is going to be a packed

1136
00:58:22,849 --> 00:58:38,880
valium and then I'm just going to go

1137
00:58:25,559 --> 00:58:40,200
ahead and do the unpacks here so I'm

1138
00:58:38,880 --> 00:58:43,079
gonna have an unpacked leaf count and

1139
00:58:40,199 --> 00:58:44,489
unpacked note index here we're gonna

1140
00:58:43,079 --> 00:58:46,469
take this packed value and we're just

1141
00:58:44,489 --> 00:58:54,509
gonna say like look we unpack these two

1142
00:58:46,469 --> 00:58:56,699
things and off we go right up here we're

1143
00:58:54,509 --> 00:58:57,958
gonna need some other stuff because in

1144
00:58:56,699 --> 00:58:59,190
addition to the curse stock this one

1145
00:58:57,958 --> 00:59:00,328
only needs to curse like dying the leaf

1146
00:58:59,190 --> 00:59:04,079
count that's the only two things it

1147
00:59:00,329 --> 00:59:08,400
needs this one needs in addition to

1148
00:59:04,079 --> 00:59:14,789
those it needs the it needs to actually

1149
00:59:08,400 --> 00:59:20,759
load up this index so we need to do an

1150
00:59:14,789 --> 00:59:22,829
actual KD node load here where in this

1151
00:59:20,759 --> 00:59:24,239
case we're loading it off the cursed AK

1152
00:59:22,829 --> 00:59:26,910
value and that's true

1153
00:59:24,239 --> 00:59:29,338
in this case we're loading it off of the

1154
00:59:26,909 --> 00:59:33,058
thing we just unpacked so this is going

1155
00:59:29,338 --> 00:59:35,009
to be an unpacked node index here so

1156
00:59:33,059 --> 00:59:43,079
that we can load up this thing that

1157
00:59:35,009 --> 00:59:46,019
we're gonna test right and then we just

1158
00:59:43,079 --> 00:59:47,880
need to know which thing this is so we

1159
00:59:46,018 --> 00:59:50,149
need to know whether or not this is

1160
00:59:47,880 --> 00:59:50,150
actually

1161
01:00:01,190 --> 01:00:07,039
so this is a test note index rank oops

1162
01:00:08,389 --> 01:00:16,469
so off of the stack that we popped we're

1163
01:00:14,820 --> 01:00:18,390
gonna see which note index we're working

1164
01:00:16,469 --> 01:00:22,169
with we're then going to look at that

1165
01:00:18,389 --> 01:00:26,569
and we also need to know the plane test

1166
01:00:22,170 --> 01:00:26,570
pattern that we're going to use right so

1167
01:00:27,889 --> 01:00:47,069
so that needs to happen right yes so in

1168
01:00:45,719 --> 01:00:48,869
this case the test note index gets

1169
01:00:47,070 --> 01:00:53,120
assigned back to Chris tack value and

1170
01:00:48,869 --> 01:00:53,119
also the leaf count gets unpacked

1171
01:01:09,139 --> 01:01:15,569
so we pull one off the stack we see

1172
01:01:12,570 --> 01:01:17,550
which one it is we load the test pattern

1173
01:01:15,570 --> 01:01:18,750
that we're going to need to use to see

1174
01:01:17,550 --> 01:01:21,780
whether or not it's something were going

1175
01:01:18,750 --> 01:01:25,440
to actually test against we take the KD

1176
01:01:21,780 --> 01:01:33,839
tree node and we load it up so we can

1177
01:01:25,440 --> 01:01:36,059
get it's KD index yeah so I guess

1178
01:01:33,838 --> 01:01:37,440
another thing here is that this doesn't

1179
01:01:36,059 --> 01:01:39,980
actually have to come from here it could

1180
01:01:37,440 --> 01:01:42,990
come from here if we wanted it to

1181
01:01:39,980 --> 01:01:44,730
actually so we wouldn't actually have to

1182
01:01:42,989 --> 01:01:47,519
pack that on but I guess I don't see any

1183
01:01:44,730 --> 01:01:50,039
reason not to at this point but anyway

1184
01:01:47,519 --> 01:01:53,820
so we're gonna load out the test node we

1185
01:01:50,039 --> 01:01:57,509
look at what the index is and the start

1186
01:01:53,820 --> 01:02:11,000
D dirty nd we do the test and off we go

1187
01:01:57,510 --> 01:02:11,000
right hmm actually

1188
01:02:20,670 --> 01:02:29,548
one more wrinkle so actually no that's

1189
01:02:25,380 --> 01:02:33,059
not quite what we do so when we push

1190
01:02:29,548 --> 01:02:37,130
this on here right we're actually just

1191
01:02:33,059 --> 01:02:40,680
going to push on this same one again

1192
01:02:37,130 --> 01:02:42,838
actually right because we're testing the

1193
01:02:40,679 --> 01:02:45,929
same node again but just against the far

1194
01:02:42,838 --> 01:02:48,808
side so I think when we push this on the

1195
01:02:45,929 --> 01:02:52,379
stack what we're really doing is pushing

1196
01:02:48,809 --> 01:02:56,369
on a different packed value right so

1197
01:02:52,380 --> 01:02:59,640
we're doing like a PAC value here where

1198
01:02:56,369 --> 01:03:02,010
we're saying oh like and I mean I guess

1199
01:02:59,639 --> 01:03:05,219
we can just we can still do it this way

1200
01:03:02,010 --> 01:03:08,180
meaning we can still actually have that

1201
01:03:05,219 --> 01:03:11,129
being coded the value we actually push

1202
01:03:08,179 --> 01:03:13,769
but it's actually gonna be the same node

1203
01:03:11,130 --> 01:03:14,700
again is what it would be and I guess

1204
01:03:13,769 --> 01:03:15,960
you can't really do that now I think

1205
01:03:14,699 --> 01:03:18,858
about it because you wouldn't want this

1206
01:03:15,960 --> 01:03:18,858
to be loaded that way

1207
01:03:28,469 --> 01:03:34,089
hmm so that's tricky because that means

1208
01:03:32,469 --> 01:03:38,799
the thing that we would have to push on

1209
01:03:34,090 --> 01:03:40,720
the stack is much more complicated if we

1210
01:03:38,800 --> 01:03:45,280
actually didn't want to have to load the

1211
01:03:40,719 --> 01:03:49,959
KT node there right we could push the

1212
01:03:45,280 --> 01:04:02,380
index so in other words this value could

1213
01:03:49,960 --> 01:04:08,409
be on there so that could definitely

1214
01:04:02,380 --> 01:04:11,680
work all of this would work it's just

1215
01:04:08,409 --> 01:04:17,500
this one thing that would cause the

1216
01:04:11,679 --> 01:04:21,129
problem right and so the question is do

1217
01:04:17,500 --> 01:04:26,670
we make the stack 64 bit and push the KD

1218
01:04:21,130 --> 01:04:26,670
plane D on there right

1219
01:04:39,250 --> 01:04:43,889
or is there something else we can do

1220
01:05:13,550 --> 01:05:19,289
so I don't see any other options I don't

1221
01:05:16,920 --> 01:05:21,119
know if you folks do but it seems to me

1222
01:05:19,289 --> 01:05:22,829
if we really wanted to do this where we

1223
01:05:21,119 --> 01:05:25,440
don't have where when we walk the stack

1224
01:05:22,829 --> 01:05:27,389
we don't have to load which I would I

1225
01:05:25,440 --> 01:05:33,450
think we wouldn't really want to if we

1226
01:05:27,389 --> 01:05:52,469
could avoid it I don't see any way of

1227
01:05:33,449 --> 01:05:55,259
doing anything other than like this so

1228
01:05:52,469 --> 01:06:03,209
we would need a 64-bit stack in that

1229
01:05:55,260 --> 01:06:06,750
case where we have both a you know a one

1230
01:06:03,210 --> 01:06:08,699
single floating-point value that's the

1231
01:06:06,750 --> 01:06:10,139
plain D we need to test against to

1232
01:06:08,699 --> 01:06:15,689
figure out whether we're gonna do this

1233
01:06:10,139 --> 01:06:19,529
side or not right and then we need the

1234
01:06:15,690 --> 01:06:29,550
packed bits for first leaf index first

1235
01:06:19,530 --> 01:06:31,940
count and the plane test pattern which

1236
01:06:29,550 --> 01:06:36,440
easily fits in 32 bits it's just like

1237
01:06:31,940 --> 01:06:36,440
1688 and you're done

1238
01:06:37,250 --> 01:06:45,750
but I don't know is it worth it is that

1239
01:06:42,960 --> 01:06:47,579
the right decision it's tough to say am

1240
01:06:45,750 --> 01:06:49,199
I missing anything is the other question

1241
01:06:47,579 --> 01:06:53,610
cuz that's like there's a lot of

1242
01:06:49,199 --> 01:06:56,279
complexity here very simple set of

1243
01:06:53,610 --> 01:06:59,670
routines actually there's not much here

1244
01:06:56,280 --> 01:07:02,820
which is great like the entire code for

1245
01:06:59,670 --> 01:07:08,250
the KD tree walk is between there and

1246
01:07:02,820 --> 01:07:10,380
there right so very little code but does

1247
01:07:08,250 --> 01:07:12,480
it actually do the right thing because

1248
01:07:10,380 --> 01:07:15,180
it's so complex in your head it's hard

1249
01:07:12,480 --> 01:07:19,980
to think through is that actually a

1250
01:07:15,179 --> 01:07:20,969
correct walk of the tree you know what I

1251
01:07:19,980 --> 01:07:25,230
mean

1252
01:07:20,969 --> 01:07:25,230
like is that actually right

1253
01:07:41,710 --> 01:07:47,000
and I guess the only thing I mean

1254
01:07:45,110 --> 01:07:48,380
looking at it it sure does feel right

1255
01:07:47,000 --> 01:07:50,840
the only thing I'm not sure about is

1256
01:07:48,380 --> 01:07:53,390
when you actually push the other side on

1257
01:07:50,840 --> 01:07:55,130
if the other side was a leaf does that

1258
01:07:53,389 --> 01:07:56,809
work properly so let's suppose the other

1259
01:07:55,130 --> 01:07:59,000
side had a leaf count and you came

1260
01:07:56,809 --> 01:08:02,509
through here and you did the test this

1261
01:07:59,000 --> 01:08:05,119
test is testing the parent actually not

1262
01:08:02,510 --> 01:08:07,310
you and then you would unpack the leaf

1263
01:08:05,119 --> 01:08:08,539
count here if you were gonna do it so I

1264
01:08:07,309 --> 01:08:12,460
think it does

1265
01:08:08,539 --> 01:08:14,779
this is incredibly small for a KD tree

1266
01:08:12,460 --> 01:08:16,609
but then again it's probably actually

1267
01:08:14,780 --> 01:08:17,930
still crappy like I bet people have

1268
01:08:16,609 --> 01:08:23,269
worked it out too much better than this

1269
01:08:17,930 --> 01:08:33,920
but it really looks like it doesn't do

1270
01:08:23,270 --> 01:08:36,140
much what do you think of this does this

1271
01:08:33,920 --> 01:08:37,430
look right I'm wondering if anyone on

1272
01:08:36,140 --> 01:08:42,110
the stream thinks this looks right or

1273
01:08:37,430 --> 01:08:48,320
not it seems fun but at this point like

1274
01:08:42,109 --> 01:08:51,079
yeah yeah I don't know there needs to be

1275
01:08:48,319 --> 01:08:53,269
a data structure named after key and

1276
01:08:51,079 --> 01:09:02,479
peele I totally agree with that

1277
01:08:53,270 --> 01:09:04,310
KP tree kind of like that idea all right

1278
01:09:02,479 --> 01:09:06,529
if this turns out to be an interesting

1279
01:09:04,310 --> 01:09:10,210
walk of the KD tree then we're gonna

1280
01:09:06,529 --> 01:09:13,279
call it a KP tree after key and peele

1281
01:09:10,210 --> 01:09:17,390
all right so this is what we need to

1282
01:09:13,279 --> 01:09:20,119
actually build here and so we just have

1283
01:09:17,390 --> 01:09:22,550
to go through and do the encoding now it

1284
01:09:20,119 --> 01:09:26,449
means that our stack is not quite right

1285
01:09:22,550 --> 01:09:31,310
so if we look here at this box stack

1286
01:09:26,449 --> 01:09:32,500
that we've got that's not gonna do it

1287
01:09:31,310 --> 01:09:36,620
[Music]

1288
01:09:32,500 --> 01:09:39,380
it's got to actually be you 64 and so

1289
01:09:36,619 --> 01:09:42,529
again I'm gonna actually just create a

1290
01:09:39,380 --> 01:09:46,300
new one here that's going to be the KD

1291
01:09:42,529 --> 01:09:48,529
stack and we're gonna use that instead

1292
01:09:46,300 --> 01:09:50,329
again we'll clean all this up once we

1293
01:09:48,529 --> 01:09:52,189
actually verify that this is something

1294
01:09:50,329 --> 01:09:54,059
we want because this is all experimental

1295
01:09:52,189 --> 01:09:55,649
codes so don't want to

1296
01:09:54,060 --> 01:09:57,990
remove the other code until we verify

1297
01:09:55,649 --> 01:09:59,250
that we're actually faster and better if

1298
01:09:57,989 --> 01:10:01,139
we're not then we just shouldn't be

1299
01:09:59,250 --> 01:10:03,060
doing any of this stuff right it was a

1300
01:10:01,140 --> 01:10:05,910
good mental exercise but we don't know

1301
01:10:03,060 --> 01:10:09,510
that it actually helps so you know we

1302
01:10:05,909 --> 01:10:11,039
need to verify that first so we're gonna

1303
01:10:09,510 --> 01:10:16,079
do the KT stack there and then the KT

1304
01:10:11,039 --> 01:10:21,529
stack here and when we're actually doing

1305
01:10:16,079 --> 01:10:24,779
these unpacks these are 64 's now and

1306
01:10:21,529 --> 01:10:27,329
this here needs to pack the plane D in

1307
01:10:24,779 --> 01:10:33,929
there so this is gonna be like a packed

1308
01:10:27,329 --> 01:10:46,140
node pack KT stack where we pass these

1309
01:10:33,930 --> 01:10:50,940
two in and I think I think that's what

1310
01:10:46,140 --> 01:10:53,760
we're doing bound bound I think that's

1311
01:10:50,939 --> 01:10:58,139
what we're doing for the encode and

1312
01:10:53,760 --> 01:11:00,780
decode side of this right so then I'm

1313
01:10:58,140 --> 01:11:02,190
just gonna drop this crap in the top

1314
01:11:00,779 --> 01:11:05,519
actually I guess I'll drop at the top of

1315
01:11:02,189 --> 01:11:14,639
this particular routine as well so like

1316
01:11:05,520 --> 01:11:18,420
right here I'll do a pack KT stack and

1317
01:11:14,640 --> 01:11:20,820
I'll do all the unpacks as well and this

1318
01:11:18,420 --> 01:11:22,289
is just there's you know this is just to

1319
01:11:20,819 --> 01:11:24,599
make sure that we can easily modify

1320
01:11:22,289 --> 01:11:26,670
these things and see them all happening

1321
01:11:24,600 --> 01:11:28,500
in the same place because otherwise if I

1322
01:11:26,670 --> 01:11:30,090
in lined all of the packing and

1323
01:11:28,500 --> 01:11:36,029
unpacking that might be a little bit

1324
01:11:30,090 --> 01:11:41,329
Squinkie right okay so what we want to

1325
01:11:36,029 --> 01:11:44,429
do here is is have these unpacks work on

1326
01:11:41,329 --> 01:11:46,439
probably the low 32-bit values so that

1327
01:11:44,430 --> 01:11:49,220
we can actually run them well I don't

1328
01:11:46,439 --> 01:11:49,219
actually know that that's true

1329
01:11:50,359 --> 01:11:53,579
forget what I said

1330
01:11:51,810 --> 01:11:56,360
so this is going to be the plain D and

1331
01:11:53,579 --> 01:12:00,000
this is going to be the like packed side

1332
01:11:56,359 --> 01:12:02,069
value and so when we do pack KD stack

1333
01:12:00,000 --> 01:12:06,069
here what we're actually doing is we're

1334
01:12:02,069 --> 01:12:10,488
just saying look we're gonna convert

1335
01:12:06,069 --> 01:12:16,368
hmm excuse me we're gonna convert the

1336
01:12:10,488 --> 01:12:18,859
plane devalue into a 64-bit value that

1337
01:12:16,368 --> 01:12:20,569
we can shift up and we're gonna or maybe

1338
01:12:18,859 --> 01:12:22,189
we'll just do the packed side by that I

1339
01:12:20,569 --> 01:12:24,738
don't know which one we should slide to

1340
01:12:22,189 --> 01:12:45,500
the high side but we waste we want to do

1341
01:12:24,738 --> 01:12:50,569
this so we want to move the plane D up

1342
01:12:45,500 --> 01:12:53,988
to the high 32 bits and we want to move

1343
01:12:50,569 --> 01:12:59,479
the packed side or we want to or the

1344
01:12:53,988 --> 01:13:02,928
pack side in now Jimmy the problem is we

1345
01:12:59,479 --> 01:13:05,479
want it to treat this thing as if it's

1346
01:13:02,929 --> 01:13:15,679
au 32 values so what we really want here

1347
01:13:05,479 --> 01:13:19,218
is more like this so we want it to load

1348
01:13:15,679 --> 01:13:21,050
this thing as if it's a u32 value even

1349
01:13:19,219 --> 01:13:23,300
though it's not and then we want to

1350
01:13:21,050 --> 01:13:26,539
convert it to you 64 value to shift it

1351
01:13:23,300 --> 01:13:29,539
up which is really wonky personally I

1352
01:13:26,539 --> 01:13:34,340
hate the way C does this stuff I've

1353
01:13:29,539 --> 01:13:37,039
never liked any of this stuff and C++ is

1354
01:13:34,340 --> 01:13:40,819
like even worse what you want to do is

1355
01:13:37,039 --> 01:13:43,189
say look load this thing into a 64-bit

1356
01:13:40,819 --> 01:13:44,899
register slide it up 32 bits and/or the

1357
01:13:43,189 --> 01:13:48,189
thing in okay it's like three

1358
01:13:44,899 --> 01:13:52,670
instructions why does it look like this

1359
01:13:48,189 --> 01:13:54,289
ridiculous garbage right and again it's

1360
01:13:52,670 --> 01:13:55,849
just because the priorities in a

1361
01:13:54,289 --> 01:13:56,389
language like C++ are completely

1362
01:13:55,849 --> 01:14:00,529
backwards

1363
01:13:56,389 --> 01:14:02,420
but we'll work it out and get something

1364
01:14:00,529 --> 01:14:04,219
that looks okay for now we just need to

1365
01:14:02,420 --> 01:14:06,380
do some unpacks in here so we know we're

1366
01:14:04,219 --> 01:14:07,730
getting a 64-bit value in here and we

1367
01:14:06,380 --> 01:14:09,020
know that these things need to come out

1368
01:14:07,729 --> 01:14:15,138
for smaller values so I'm just gonna

1369
01:14:09,020 --> 01:14:18,080
have the downcast in here isn't there

1370
01:14:15,139 --> 01:14:19,279
one more thing we need to unpack is it

1371
01:14:18,079 --> 01:14:21,390
really just two things

1372
01:14:19,279 --> 01:14:23,420
is it just the note innocent leaf count

1373
01:14:21,390 --> 01:14:25,890
I guess just to know wowthat's

1374
01:14:23,420 --> 01:14:28,710
know the plain deed the plain D the

1375
01:14:25,890 --> 01:14:29,940
plain D the test pattern yeah I'm like

1376
01:14:28,710 --> 01:14:31,949
there's I was like there's more stuff

1377
01:14:29,939 --> 01:14:46,589
what are we talking about like that's

1378
01:14:31,949 --> 01:14:48,029
that's way too few things alright so

1379
01:14:46,590 --> 01:14:49,890
we've got the leaf count in the note

1380
01:14:48,029 --> 01:14:51,719
index then we've got the test pattern

1381
01:14:49,890 --> 01:14:54,150
the plain D and the KT Index now the

1382
01:14:51,720 --> 01:14:56,310
plain D is like totally separate because

1383
01:14:54,149 --> 01:14:59,299
it's literally just the thing shifted

1384
01:14:56,310 --> 01:14:59,300
down right

1385
01:15:00,449 --> 01:15:04,050
and again like unpacking this thing I

1386
01:15:02,909 --> 01:15:06,479
don't even know how we're gonna do this

1387
01:15:04,050 --> 01:15:07,890
because it just doesn't work and C

1388
01:15:06,479 --> 01:15:09,929
correctly we may have to use like a

1389
01:15:07,890 --> 01:15:11,460
struct to unpack this but I'm worried

1390
01:15:09,930 --> 01:15:15,200
about doing that that it won't know what

1391
01:15:11,460 --> 01:15:15,199
to do you know and I'm saying

1392
01:15:22,600 --> 01:15:33,280
yeah I don't know so again this is me

1393
01:15:31,760 --> 01:15:35,179
just trying to give the compiler

1394
01:15:33,279 --> 01:15:36,979
something that it will do the right

1395
01:15:35,179 --> 01:15:39,050
thing with which shouldn't be a thing

1396
01:15:36,979 --> 01:15:44,178
but it's what you often end up having to

1397
01:15:39,050 --> 01:15:46,100
do for no reason okay so in here what we

1398
01:15:44,179 --> 01:15:48,679
actually want to do is we want to take

1399
01:15:46,100 --> 01:15:51,560
this pack value which is used 64 and we

1400
01:15:48,679 --> 01:15:54,079
want to be able to access it as if it

1401
01:15:51,560 --> 01:15:58,010
was an f32 and we want the high F 32

1402
01:15:54,079 --> 01:15:59,960
right so what I want to do here is say

1403
01:15:58,010 --> 01:16:03,139
like alright pretend this is an F 32

1404
01:15:59,960 --> 01:16:05,630
star and then I want you to give me out

1405
01:16:03,139 --> 01:16:07,819
of that F 32 star I want you to give me

1406
01:16:05,630 --> 01:16:10,489
the the next one right like I want you

1407
01:16:07,819 --> 01:16:16,670
to give me the high F 32 not the low F

1408
01:16:10,488 --> 01:16:19,789
32 I have no idea if that is something

1409
01:16:16,670 --> 01:16:21,800
that the compiler will generate the

1410
01:16:19,789 --> 01:16:22,729
right code for in fact I have no idea if

1411
01:16:21,800 --> 01:16:23,929
it's gonna generate the right code for

1412
01:16:22,729 --> 01:16:26,329
any of this maybe we should actually

1413
01:16:23,929 --> 01:16:28,250
have a struct for it I'm just really

1414
01:16:26,329 --> 01:16:29,960
really worried cuz we've seen MSD C not

1415
01:16:28,250 --> 01:16:33,109
be able to push Struck's on a stack at

1416
01:16:29,960 --> 01:16:37,550
all so it kind of needs to be you 64 but

1417
01:16:33,109 --> 01:16:41,029
I don't know ok so here's here's a

1418
01:16:37,550 --> 01:16:44,679
thought maybe so one thing I could do

1419
01:16:41,029 --> 01:16:44,679
here is I could introduce a struct

1420
01:16:50,420 --> 01:17:00,949
that's like this you know what I'm

1421
01:16:57,949 --> 01:17:04,130
saying and so I could do something like

1422
01:17:00,949 --> 01:17:07,340
this where we just say when we have a

1423
01:17:04,130 --> 01:17:09,710
pact one of these like we're just gonna

1424
01:17:07,340 --> 01:17:12,319
treat it as this thing and see if the

1425
01:17:09,710 --> 01:17:16,789
compiler understands that so for example

1426
01:17:12,319 --> 01:17:38,090
I could say look this is gonna be one of

1427
01:17:16,789 --> 01:17:40,189
these right so we take the address of

1428
01:17:38,090 --> 01:17:42,650
the pack thing we're given we treat it

1429
01:17:40,189 --> 01:17:44,869
as if it's a KD stack pack maybe that

1430
01:17:42,649 --> 01:17:47,149
helps the compiler maybe it doesn't I

1431
01:17:44,869 --> 01:17:50,510
honestly have no idea if it will or if

1432
01:17:47,149 --> 01:17:56,629
it won't and then off of that we just

1433
01:17:50,510 --> 01:18:04,190
get the the D value right and then here

1434
01:17:56,630 --> 01:18:06,170
we do the bits values equivalently and

1435
01:18:04,189 --> 01:18:08,000
and like I said I just have I just have

1436
01:18:06,170 --> 01:18:10,130
no idea I mean like I said this stuff is

1437
01:18:08,000 --> 01:18:10,609
so easy in assembly language it's it's a

1438
01:18:10,130 --> 01:18:13,279
joke

1439
01:18:10,609 --> 01:18:14,509
and yet in C which is ostensively

1440
01:18:13,279 --> 01:18:18,109
suppose to be easier to program it's an

1441
01:18:14,510 --> 01:18:22,960
absolute nightmare if that makes sense

1442
01:18:18,109 --> 01:18:22,960
and it just yeah I mean it's just stupid

1443
01:18:23,140 --> 01:18:27,070
it's the only way you can say it really

1444
01:18:27,579 --> 01:18:34,760
okay so assuming we unpack that and and

1445
01:18:33,470 --> 01:18:36,199
maybe the other thing I can do here is

1446
01:18:34,760 --> 01:18:43,190
introduce a helper macro that's just

1447
01:18:36,199 --> 01:18:44,960
like unpack and it's just this so the

1448
01:18:43,189 --> 01:18:51,469
only thing this thing does is it takes

1449
01:18:44,960 --> 01:18:53,600
one of these like casts there and gives

1450
01:18:51,470 --> 01:18:57,159
it back to you so you can just do like

1451
01:18:53,600 --> 01:19:01,160
you know this is unpack the pack value

1452
01:18:57,159 --> 01:19:05,750
and get the D value this is

1453
01:19:01,159 --> 01:19:17,479
unpack pack valium and get the bits

1454
01:19:05,750 --> 01:19:23,359
value and so for each of these things we

1455
01:19:17,479 --> 01:19:25,639
need some way of actually producing you

1456
01:19:23,359 --> 01:19:32,449
know the correct set of bits out of the

1457
01:19:25,640 --> 01:19:33,890
pack that we want mm-hmm and so that's

1458
01:19:32,449 --> 01:19:47,059
the last thing that we need to actually

1459
01:19:33,890 --> 01:19:49,130
put in here so in order to do the unpack

1460
01:19:47,060 --> 01:19:51,050
I mean sorry or in order to get the

1461
01:19:49,130 --> 01:19:53,869
correct bits so we need to just assign

1462
01:19:51,050 --> 01:19:56,150
each of them a location right and so for

1463
01:19:53,869 --> 01:19:58,729
each of these we just need to like shift

1464
01:19:56,149 --> 01:20:03,619
and mask it to the part we actually care

1465
01:19:58,729 --> 01:20:08,089
about so the plane test pattern the KD

1466
01:20:03,619 --> 01:20:15,229
index is like zero one or two so this is

1467
01:20:08,090 --> 01:20:21,130
two bits right this is four bits so

1468
01:20:15,229 --> 01:20:26,629
that's six bits this is eight bits and

1469
01:20:21,130 --> 01:20:27,890
this is 16 bits right so this is like

1470
01:20:26,630 --> 01:20:29,900
these to make eight bits together

1471
01:20:27,890 --> 01:20:32,240
broadly make six but rounded up to eight

1472
01:20:29,899 --> 01:20:34,369
these to make eight bits this is eight

1473
01:20:32,239 --> 01:20:42,019
bits and this is 16 bits and that's our

1474
01:20:34,369 --> 01:20:44,899
32 right okay so let's suppose that's

1475
01:20:42,020 --> 01:20:52,550
the way we want to do this is the node

1476
01:20:44,899 --> 01:21:00,649
index is the bottom 16 right the leaf

1477
01:20:52,550 --> 01:21:03,010
count is the next 8 from there so like

1478
01:21:00,649 --> 01:21:03,009
this

1479
01:21:04,859 --> 01:21:12,289
maybe the KD oops

1480
01:21:13,099 --> 01:21:28,889
no that's right the plane test pattern

1481
01:21:18,569 --> 01:21:31,948
is going to be the I guess we'll just

1482
01:21:28,889 --> 01:21:36,828
say the plane test pattern is the next

1483
01:21:31,948 --> 01:21:36,828
four and then the KT index is the top

1484
01:21:38,118 --> 01:21:45,569
seam right I don't know if that's the

1485
01:21:42,809 --> 01:21:47,940
right packing or not but anyway so if we

1486
01:21:45,569 --> 01:21:51,000
actually go ahead and say 32 minus four

1487
01:21:47,939 --> 01:21:54,238
right so it's gonna be what 28 so if we

1488
01:21:51,000 --> 01:21:58,439
want to grab the KT index we just shift

1489
01:21:54,238 --> 01:22:03,979
down those 28 bits if we want to grab

1490
01:21:58,439 --> 01:22:09,019
the plane test pattern we just grab the

1491
01:22:03,979 --> 01:22:09,019
24 bit version and mask off

1492
01:22:20,529 --> 01:22:28,369
all right so this is 16 bits this is 8

1493
01:22:24,409 --> 01:22:30,859
bits this is 4 bits and this is actually

1494
01:22:28,369 --> 01:22:32,630
not for a bit we're giving it 4 bits but

1495
01:22:30,859 --> 01:22:36,369
it actually only needs 2 so we actually

1496
01:22:32,630 --> 01:22:36,369
have 2 additional bits in there right

1497
01:22:36,520 --> 01:22:47,900
I'm going to call that done and we'll

1498
01:22:41,988 --> 01:22:53,929
see in here we need to pack a KD stack

1499
01:22:47,899 --> 01:22:58,159
value on here for the root box to start

1500
01:22:53,930 --> 01:23:00,619
with and in order to do that we need to

1501
01:22:58,159 --> 01:23:03,260
have so the way we're gonna have to

1502
01:23:00,619 --> 01:23:05,659
start to make the root box work here is

1503
01:23:03,260 --> 01:23:07,610
actually we're not really gonna want a

1504
01:23:05,659 --> 01:23:12,349
root box index we're gonna want like a

1505
01:23:07,609 --> 01:23:15,109
root box value so inside the lighting

1506
01:23:12,350 --> 01:23:19,610
code here like we're actually gonna want

1507
01:23:15,109 --> 01:23:22,789
like root box value it's just a thing

1508
01:23:19,609 --> 01:23:27,170
set up to like start the routine right

1509
01:23:22,789 --> 01:23:31,310
and I guess it's technically just it's a

1510
01:23:27,170 --> 01:23:34,550
leaf count of 0 with a box cursed act

1511
01:23:31,310 --> 01:23:36,469
that we pull right which I guess this is

1512
01:23:34,550 --> 01:23:38,480
the same I mean we can just use this we

1513
01:23:36,469 --> 01:23:39,789
can just use the root box index where is

1514
01:23:38,479 --> 01:23:43,488
that from

1515
01:23:39,789 --> 01:23:48,109
it's here so I guess we can just tell

1516
01:23:43,488 --> 01:23:49,939
you the same guy that's fine so we know

1517
01:23:48,109 --> 01:23:51,259
it doesn't have a leaf counts so we know

1518
01:23:49,939 --> 01:23:52,849
we're gonna jump right down to here

1519
01:23:51,260 --> 01:23:53,869
we're gonna load the Christic value out

1520
01:23:52,850 --> 01:23:57,340
and then we're gonna start like

1521
01:23:53,869 --> 01:23:57,340
processing that box right

1522
01:24:02,170 --> 01:24:08,829
now we need to fix all our macros which

1523
01:24:04,539 --> 01:24:18,550
are probably all broken this is supposed

1524
01:24:08,829 --> 01:24:21,430
to be unpacked capital like so and for

1525
01:24:18,550 --> 01:24:23,340
all of these after we're done with it we

1526
01:24:21,430 --> 01:24:53,350
probably also want to just undef these

1527
01:24:23,340 --> 01:24:56,159
macros okay and that is maybe the

1528
01:24:53,350 --> 01:24:56,160
routine ooh

1529
01:24:56,939 --> 01:25:10,319
unpack clean test pattern is a problem

1530
01:25:01,869 --> 01:25:14,670
apparently because of why exactly oh

1531
01:25:10,319 --> 01:25:14,670
yeah so

1532
01:25:21,300 --> 01:25:31,600
well no that seems right what's the

1533
01:25:29,350 --> 01:25:41,680
problem is it cuz we have an unbalanced

1534
01:25:31,600 --> 01:25:43,810
parenthesis here let me take a look so

1535
01:25:41,680 --> 01:25:46,210
unpack packed bits then we've got this

1536
01:25:43,810 --> 01:25:58,900
then we got that seems right for this

1537
01:25:46,210 --> 01:26:02,069
one and seems right for this one what's

1538
01:25:58,899 --> 01:26:02,069
the problem

1539
01:26:02,220 --> 01:26:07,720
so we've got that enclosed we've got

1540
01:26:05,920 --> 01:26:13,840
that and closed ah yes we need one more

1541
01:26:07,720 --> 01:26:15,430
there yeah

1542
01:26:13,840 --> 01:26:30,430
and this one shouldn't this one need it

1543
01:26:15,430 --> 01:26:32,020
too yeah it says we've got a right shift

1544
01:26:30,430 --> 01:26:34,780
by too much for Daedalus does that mean

1545
01:26:32,020 --> 01:26:42,160
I'm casting in the wrong place there I

1546
01:26:34,779 --> 01:26:47,949
might be yeah this one needs one more

1547
01:26:42,159 --> 01:26:52,779
Sam we're gonna have to check all those

1548
01:26:47,949 --> 01:26:54,789
okay so here where we've got the Ray

1549
01:26:52,779 --> 01:26:57,189
direction I'm assuming that's just raid

1550
01:26:54,789 --> 01:27:00,430
D right yeah

1551
01:26:57,189 --> 01:27:03,159
unpack lief count is probably a little

1552
01:27:00,430 --> 01:27:09,269
bit worked so there's that bracket

1553
01:27:03,159 --> 01:27:16,010
there's this bracket am i right so there

1554
01:27:09,269 --> 01:27:18,920
okay and then finally these are just

1555
01:27:16,010 --> 01:27:24,570
lowercase D now

1556
01:27:18,920 --> 01:27:29,429
and so the KD plane D value needs to be

1557
01:27:24,569 --> 01:27:33,808
lofted up to do to a 4x to do that

1558
01:27:29,429 --> 01:27:35,960
subtract now interestingly enough we

1559
01:27:33,809 --> 01:27:38,880
don't really need to do this for wide

1560
01:27:35,960 --> 01:27:42,210
it's just that's the only floating-point

1561
01:27:38,880 --> 01:27:45,650
unit we have so I guess we're gonna do

1562
01:27:42,210 --> 01:27:54,469
it for wide just because why not right

1563
01:27:45,649 --> 01:27:54,469
oops so yeah now Pat Cady stack

1564
01:28:09,489 --> 01:28:15,039
I guess I'm not sure what else to do

1565
01:28:12,970 --> 01:28:17,050
here other than I guess this just this

1566
01:28:15,039 --> 01:28:18,460
cast needs to be the problem I think

1567
01:28:17,050 --> 01:28:20,470
here is that this needs to be like

1568
01:28:18,460 --> 01:28:22,980
isolated in here this needs to get cast

1569
01:28:20,470 --> 01:28:25,150
usage before first then shifted up

1570
01:28:22,979 --> 01:28:26,829
before so it's justification more

1571
01:28:25,149 --> 01:28:28,210
parentheses again this is so annoying it

1572
01:28:26,829 --> 01:28:30,670
should just be assembly language like

1573
01:28:28,210 --> 01:28:35,829
it's so annoying

1574
01:28:30,670 --> 01:28:39,180
anyway um this is supposed to be dirty

1575
01:28:35,829 --> 01:28:43,689
Thank You compiler that was a good catch

1576
01:28:39,180 --> 01:28:49,270
all right so now I think we have the

1577
01:28:43,689 --> 01:28:51,729
full sketch of the routine it's all done

1578
01:28:49,270 --> 01:28:57,370
and so the only thing we really have to

1579
01:28:51,729 --> 01:29:00,369
do now is build it right and that maybe

1580
01:28:57,369 --> 01:29:05,289
waits for tomorrow but that looks like

1581
01:29:00,369 --> 01:29:07,239
roughly what we need to do and we should

1582
01:29:05,289 --> 01:29:09,430
be able to take a look to see if the

1583
01:29:07,239 --> 01:29:12,699
code that was generated for this on

1584
01:29:09,430 --> 01:29:13,750
these unpacks were sane or not and I

1585
01:29:12,699 --> 01:29:18,130
don't know what we're gonna do about

1586
01:29:13,750 --> 01:29:22,449
that if they're not we could split the

1587
01:29:18,130 --> 01:29:26,050
you 64 into two values first using au 32

1588
01:29:22,449 --> 01:29:29,050
split and then pull the plain D out that

1589
01:29:26,050 --> 01:29:31,409
way so we may want to hand code that in

1590
01:29:29,050 --> 01:29:34,630
in a little bit anyway we'll see

1591
01:29:31,409 --> 01:29:42,159
but we need to like analyze that first

1592
01:29:34,630 --> 01:29:46,000
either way if that makes sense but I

1593
01:29:42,159 --> 01:29:48,239
think we're good I think I think that's

1594
01:29:46,000 --> 01:29:48,239
pretty good

1595
01:29:48,899 --> 01:29:55,509
I don't know what I should do now maybe

1596
01:29:54,430 --> 01:29:58,230
I should go to questions or maybe I

1597
01:29:55,510 --> 01:30:05,770
should start the split box modifications

1598
01:29:58,229 --> 01:30:07,419
and I'm not sure exactly how I want to

1599
01:30:05,770 --> 01:30:08,770
do that but what I think I might do is

1600
01:30:07,420 --> 01:30:10,600
just make something that reads the old

1601
01:30:08,770 --> 01:30:13,020
tree and writes the new tree or

1602
01:30:10,600 --> 01:30:16,480
something like that for testing purposes

1603
01:30:13,020 --> 01:30:17,980
I'm not sure but yeah like what you'd

1604
01:30:16,479 --> 01:30:21,369
want to do here is you'd want to say

1605
01:30:17,979 --> 01:30:21,939
okay anytime like I think we just yeah

1606
01:30:21,369 --> 01:30:26,309
we probably do

1607
01:30:21,939 --> 01:30:28,659
want a totally different split box call

1608
01:30:26,310 --> 01:30:30,010
because we're gonna do the same testing

1609
01:30:28,659 --> 01:30:32,590
but we're not going to write the same

1610
01:30:30,010 --> 01:30:35,170
kind of values so what we're actually

1611
01:30:32,590 --> 01:30:36,670
gonna be doing is on either side we're

1612
01:30:35,170 --> 01:30:39,310
gonna look to see whether or not we

1613
01:30:36,670 --> 01:30:41,710
split the child and if we do split the

1614
01:30:39,310 --> 01:30:55,600
child then we don't write a new index

1615
01:30:41,710 --> 01:30:56,980
right for that thing and so yeah so I'm

1616
01:30:55,600 --> 01:30:58,750
gonna go to the Q&amp;A and we'll take a

1617
01:30:56,979 --> 01:31:01,719
look at building it we'll take a look at

1618
01:30:58,750 --> 01:31:11,829
building it tomorrow that'll be our

1619
01:31:01,720 --> 01:31:13,960
tomorrow job that's a tomorrow job and

1620
01:31:11,829 --> 01:31:15,760
then I think we're pretty home free on

1621
01:31:13,960 --> 01:31:17,439
the KD stuff it's just gonna be a big

1622
01:31:15,760 --> 01:31:19,750
debugging nightmare

1623
01:31:17,439 --> 01:31:21,669
but we're home free on the on the

1624
01:31:19,750 --> 01:31:23,770
implementation side because the split

1625
01:31:21,670 --> 01:31:30,640
box follows everything we want we just

1626
01:31:23,770 --> 01:31:34,450
have to reorganize it a little bit the

1627
01:31:30,640 --> 01:31:36,579
hair is getting so big like it's insane

1628
01:31:34,449 --> 01:31:39,329
how much hair there is now I know

1629
01:31:36,579 --> 01:31:41,590
someone's saying nice hair it's crazy

1630
01:31:39,329 --> 01:31:43,960
you probably can't even see just how

1631
01:31:41,590 --> 01:31:46,060
much it's kind of like flattened out at

1632
01:31:43,960 --> 01:31:49,510
the moment but like if you actually poof

1633
01:31:46,060 --> 01:31:52,330
it out like it's insane how is the

1634
01:31:49,510 --> 01:31:54,960
seeker coming it's coming it's a lot of

1635
01:31:52,329 --> 01:31:54,960
work but it's coming

1636
01:32:12,069 --> 01:32:14,439
what about writing a plugin for fur

1637
01:32:13,569 --> 01:32:18,670
critter that highlights and close

1638
01:32:14,439 --> 01:32:21,098
parentheses um so yeah I already did all

1639
01:32:18,670 --> 01:32:24,460
that and but then I moved all the code

1640
01:32:21,099 --> 01:32:26,788
to my own editor when I did that jump so

1641
01:32:24,460 --> 01:32:30,519
I just haven't gotten around to like I

1642
01:32:26,788 --> 01:32:32,050
only use this editor set up on stream

1643
01:32:30,519 --> 01:32:33,610
now that you're looking at here and I

1644
01:32:32,050 --> 01:32:33,969
just haven't been motivated to clean it

1645
01:32:33,609 --> 01:32:38,408
up

1646
01:32:33,969 --> 01:32:42,158
I should at some point but for code

1647
01:32:38,408 --> 01:32:44,308
already can do that like if you want it

1648
01:32:42,158 --> 01:32:44,308
to

1649
01:32:59,140 --> 01:33:04,380
stay finest oh yes that's a good point I

1650
01:33:07,079 --> 01:33:10,739
said it wrong didn't I

1651
01:33:28,560 --> 01:33:31,560
yeah

1652
01:33:42,869 --> 01:33:47,229
looks like you can recover the milton

1653
01:33:45,250 --> 01:33:49,770
temp file from app data and Milton Paint

1654
01:33:47,229 --> 01:33:49,769
data

1655
01:34:19,078 --> 01:34:26,039
yeah only probably if you haven't

1656
01:34:22,109 --> 01:34:28,049
started a new one that seems like a

1657
01:34:26,039 --> 01:34:30,389
really bad way for this program to work

1658
01:34:28,050 --> 01:34:32,639
I would strongly recommend changing that

1659
01:34:30,389 --> 01:34:36,900
if anyone cares like it should never get

1660
01:34:32,639 --> 01:34:44,940
rid of the old canvas like just move it

1661
01:34:36,899 --> 01:34:46,828
to a different file right because I

1662
01:34:44,939 --> 01:34:48,629
thought it was saving it to that file

1663
01:34:46,828 --> 01:34:51,689
like I didn't understand that it wasn't

1664
01:34:48,630 --> 01:35:01,739
ever saving my thing like that was not

1665
01:34:51,689 --> 01:35:03,000
something I understood at all looks like

1666
01:35:01,738 --> 01:35:05,669
you're gonna recover the Milton temp

1667
01:35:03,000 --> 01:35:06,770
file yeah oh sorry no that room we're

1668
01:35:05,670 --> 01:35:09,809
kinda getting free over the seahorse

1669
01:35:06,770 --> 01:35:12,090
just add yourself to the mailing list so

1670
01:35:09,809 --> 01:35:17,579
if you go to Molly Rocket calm slash

1671
01:35:12,090 --> 01:35:20,340
follow put your address in here as the

1672
01:35:17,578 --> 01:35:22,469
very as soon as it is on early access on

1673
01:35:20,340 --> 01:35:24,960
Steam I will send out a mail so everyone

1674
01:35:22,469 --> 01:35:30,448
will get notified when you can actually

1675
01:35:24,960 --> 01:35:32,099
purchase it but but it is not up yet but

1676
01:35:30,448 --> 01:35:34,769
add yourself to my rocket comm slash

1677
01:35:32,099 --> 01:35:39,569
follow and you'll get a mail when it's

1678
01:35:34,770 --> 01:35:46,829
ready today John said that deferred

1679
01:35:39,569 --> 01:35:55,109
rendering is a bad idea why I you would

1680
01:35:46,828 --> 01:35:57,469
have to ask John deferred rendering is a

1681
01:35:55,109 --> 01:35:57,469
bad idea

1682
01:36:05,029 --> 01:36:11,359
I don't know deferred rendering is a

1683
01:36:07,840 --> 01:36:17,239
good idea isn't it I mean it's not

1684
01:36:11,359 --> 01:36:21,259
always appropriate like for the most

1685
01:36:17,238 --> 01:36:23,328
part I would say that like deferred

1686
01:36:21,260 --> 01:36:27,230
rendering is a technique that you use

1687
01:36:23,328 --> 01:36:34,578
when it when you have favorable

1688
01:36:27,229 --> 01:36:36,379
conditions for it right but I don't know

1689
01:36:34,578 --> 01:36:39,399
why anyone would say it's a bad idea

1690
01:36:36,380 --> 01:36:42,020
it's a good idea it may not always be

1691
01:36:39,399 --> 01:36:44,868
appropriate to your particular task that

1692
01:36:42,020 --> 01:36:46,940
you're doing for rendering but that

1693
01:36:44,868 --> 01:36:48,558
doesn't really make it a bad idea it's

1694
01:36:46,939 --> 01:36:50,299
possible if John literally said it's

1695
01:36:48,559 --> 01:36:51,949
just a bad idea across the board like I

1696
01:36:50,300 --> 01:36:55,760
should never be used that seems

1697
01:36:51,948 --> 01:36:57,019
confusing but what he may have just

1698
01:36:55,760 --> 01:37:00,159
meant is this not appropriate for

1699
01:36:57,020 --> 01:37:00,159
something he was talking about

1700
01:37:06,479 --> 01:37:11,009
didn't he just mean that almost no one

1701
01:37:08,590 --> 01:37:18,119
uses deferred rendering anymore

1702
01:37:11,010 --> 01:37:18,119
is that actually true I don't know I

1703
01:37:27,510 --> 01:37:45,239
don't know if anyone's in fact what's

1704
01:37:29,739 --> 01:37:45,239
the latest one of these so like

1705
01:37:58,470 --> 01:38:08,940
I mean this is deferred rendering right

1706
01:38:00,960 --> 01:38:10,590
here right unless I'm just reading that

1707
01:38:08,939 --> 01:38:15,679
I'm just reading this really quickly so

1708
01:38:10,590 --> 01:38:15,680
it's hard to say for sure

1709
01:38:26,269 --> 01:38:30,039
this is a deferred rendering right here

1710
01:38:42,779 --> 01:38:47,069
this is a deferred rendering right here

1711
01:38:47,340 --> 01:38:51,579
like does anyone not use deferred

1712
01:38:50,229 --> 01:38:54,209
rendering would be the way I would say

1713
01:38:51,579 --> 01:38:54,210
it like

1714
01:39:10,159 --> 01:39:14,809
but but they do do that right I mean

1715
01:39:12,770 --> 01:39:17,360
this is what that that is what this is

1716
01:39:14,810 --> 01:39:19,700
like this is how these renderers work

1717
01:39:17,359 --> 01:39:20,929
they they write the diffuse channel the

1718
01:39:19,699 --> 01:39:22,550
normal channel the specular channel

1719
01:39:20,930 --> 01:39:24,530
irradiance channel and then they combine

1720
01:39:22,550 --> 01:39:27,710
those later right I mean that that is

1721
01:39:24,529 --> 01:39:29,539
how that works maybe he was talking

1722
01:39:27,710 --> 01:39:38,810
about some other technique I'm not sure

1723
01:39:29,539 --> 01:39:41,890
what it is necessarily but like maybe

1724
01:39:38,810 --> 01:39:41,890
this is not

1725
01:39:47,439 --> 01:39:53,619
I mean he's calling it deferred

1726
01:39:51,639 --> 01:40:03,969
rendering the person who's doing the

1727
01:39:53,618 --> 01:40:05,469
breakdown but I mean I don't know so I

1728
01:40:03,969 --> 01:40:08,559
don't know I guess I would say like yeah

1729
01:40:05,469 --> 01:40:10,569
I'd ask John who he thinks isn't using

1730
01:40:08,559 --> 01:40:12,550
deferred rendering among the main

1731
01:40:10,569 --> 01:40:15,488
graphics engines because I think they're

1732
01:40:12,550 --> 01:40:17,409
all using it I think maybe not like

1733
01:40:15,488 --> 01:40:19,688
unity or something cuz you know it's not

1734
01:40:17,408 --> 01:40:22,418
really a high-end kind of thing but like

1735
01:40:19,689 --> 01:40:27,249
I would assume that like everyone else

1736
01:40:22,418 --> 01:40:29,050
is this is not an actual whole thing of

1737
01:40:27,248 --> 01:40:31,958
unreal so this is only they guess the

1738
01:40:29,050 --> 01:40:34,208
post pass but I mean I just thought

1739
01:40:31,958 --> 01:40:36,819
everyone does it like I don't see how

1740
01:40:34,208 --> 01:40:39,099
you would get away with not using it

1741
01:40:36,819 --> 01:40:40,688
most of the time in a modern high-end

1742
01:40:39,099 --> 01:40:45,369
rendering I'm not sure you wouldn't use

1743
01:40:40,689 --> 01:40:47,769
deferred right but so yeah I would say

1744
01:40:45,368 --> 01:40:53,319
just ask John what he who he thought was

1745
01:40:47,769 --> 01:40:55,929
not using it because I everyone does it

1746
01:40:53,319 --> 01:40:58,328
right if you're if you're high-end I

1747
01:40:55,929 --> 01:41:02,050
think I mean maybe I'm wrong maybe I

1748
01:40:58,328 --> 01:41:03,908
don't understand what he means or what

1749
01:41:02,050 --> 01:41:06,219
they mean I don't know but that would be

1750
01:41:03,908 --> 01:41:08,618
I would say that's very counter to how I

1751
01:41:06,219 --> 01:41:16,599
think about graphics you oftentimes have

1752
01:41:08,618 --> 01:41:20,529
multiple deferred steps on on high-end

1753
01:41:16,599 --> 01:41:25,208
on low-end you probably don't want to do

1754
01:41:20,529 --> 01:41:26,559
that because like if you're a 2-d thing

1755
01:41:25,208 --> 01:41:27,488
or whatever you probably don't want to

1756
01:41:26,559 --> 01:41:28,418
be doing a lot of deferred because

1757
01:41:27,488 --> 01:41:29,438
you're trying to run on lower end

1758
01:41:28,418 --> 01:41:35,590
hardware and stuff like that or

1759
01:41:29,439 --> 01:41:38,439
something I don't know could you explain

1760
01:41:35,590 --> 01:41:39,760
the zero zero one one one Katie's side

1761
01:41:38,439 --> 01:41:42,130
testing again yeah

1762
01:41:39,760 --> 01:41:43,539
and again when these are just my guesses

1763
01:41:42,130 --> 01:41:46,090
about how to do this right because we

1764
01:41:43,538 --> 01:41:47,408
haven't looked like I said out handmade

1765
01:41:46,090 --> 01:41:49,269
here I was try to implement something

1766
01:41:47,408 --> 01:41:51,188
once myself to demonstrate how I would

1767
01:41:49,269 --> 01:41:53,949
go about doing it if I couldn't just go

1768
01:41:51,189 --> 01:41:55,479
cheat but we'll probably eventually go

1769
01:41:53,948 --> 01:41:57,188
look at how other people are doing Katie

1770
01:41:55,479 --> 01:41:58,550
walks and see because it's a very well

1771
01:41:57,189 --> 01:42:00,559
studied problem and we should be

1772
01:41:58,550 --> 01:42:04,429
to get some national stuff there but all

1773
01:42:00,559 --> 01:42:09,590
I was saying is let's suppose here is

1774
01:42:04,429 --> 01:42:15,520
our KD split plane and here is our Rea

1775
01:42:09,590 --> 01:42:21,020
origin we know that the Ray origin is

1776
01:42:15,520 --> 01:42:22,969
fixed so all four rays are coming from

1777
01:42:21,020 --> 01:42:24,619
the same origin because we use this to

1778
01:42:22,969 --> 01:42:26,539
gather light from a light probe and the

1779
01:42:24,618 --> 01:42:30,259
light probe is in one place when we're

1780
01:42:26,539 --> 01:42:36,319
gathering it so we've got a fixed rate

1781
01:42:30,260 --> 01:42:41,090
origin but several k ds rady's rather so

1782
01:42:36,319 --> 01:42:41,779
the rady value which is this there's

1783
01:42:41,090 --> 01:42:45,260
four of them

1784
01:42:41,779 --> 01:42:48,828
so this is a sim D Lane that's four wide

1785
01:42:45,260 --> 01:42:52,400
right so there's you know it's packed

1786
01:42:48,828 --> 01:42:54,429
it's like four or you know three two one

1787
01:42:52,399 --> 01:42:54,429
zero

1788
01:42:54,670 --> 01:43:03,739
right and we know that we've got three

1789
01:42:58,578 --> 01:43:07,488
times that because we've got x y&amp;z so

1790
01:43:03,738 --> 01:43:09,468
we've got you know x y&amp;z so we basically

1791
01:43:07,488 --> 01:43:12,558
have like three registers or an array

1792
01:43:09,469 --> 01:43:15,920
with three values in it and each value

1793
01:43:12,559 --> 01:43:18,679
is four wide right so this is you know

1794
01:43:15,920 --> 01:43:21,020
the this is three X this is 2 X this is

1795
01:43:18,679 --> 01:43:25,969
1 X this is 0 X this is three Y this is

1796
01:43:21,020 --> 01:43:30,050
two Y right and and each of these is 128

1797
01:43:25,969 --> 01:43:32,480
bits wide you know 16 bytes right and

1798
01:43:30,050 --> 01:43:36,020
that's because each of these is 4 so

1799
01:43:32,479 --> 01:43:39,979
that's the data we're working with my

1800
01:43:36,020 --> 01:43:41,869
hypothesis for the KD tree and I have no

1801
01:43:39,979 --> 01:43:43,669
idea if this is correct this is just

1802
01:43:41,868 --> 01:43:45,078
kind of what I whimsically came to in my

1803
01:43:43,670 --> 01:43:47,779
head after trying to look at the problem

1804
01:43:45,078 --> 01:43:49,609
a little bit on stream is that we know

1805
01:43:47,779 --> 01:43:51,859
we can always classify the Ray Origin

1806
01:43:49,609 --> 01:43:54,859
fairly trivially by just going look

1807
01:43:51,859 --> 01:43:57,049
let's load the X Y or Z which ever one

1808
01:43:54,859 --> 01:43:58,098
the KT split plane is splitting because

1809
01:43:57,050 --> 01:44:00,349
we know that it only splits one

1810
01:43:58,099 --> 01:44:02,389
dimension at a time so we load whichever

1811
01:44:00,349 --> 01:44:06,110
one of those it's actually splitting and

1812
01:44:02,389 --> 01:44:08,750
then we can say all right take the value

1813
01:44:06,109 --> 01:44:11,269
and subtract the plane D value right

1814
01:44:08,750 --> 01:44:12,350
that will give us a positive or negative

1815
01:44:11,270 --> 01:44:14,660
value too

1816
01:44:12,350 --> 01:44:17,630
pending on which side it's on and we

1817
01:44:14,659 --> 01:44:19,460
know that the Ray origin is the same so

1818
01:44:17,630 --> 01:44:20,810
each of these values in the range is the

1819
01:44:19,460 --> 01:44:23,119
same the radii value is different but

1820
01:44:20,810 --> 01:44:25,250
the Ray origin is the same so all we

1821
01:44:23,119 --> 01:44:27,140
have to do is just look at one sign bit

1822
01:44:25,250 --> 01:44:28,369
from any of these four and so that's

1823
01:44:27,140 --> 01:44:29,900
what we do we just look at this low sign

1824
01:44:28,369 --> 01:44:31,369
bit we just look at and one and that

1825
01:44:29,899 --> 01:44:36,670
tells us whether on the positive or

1826
01:44:31,369 --> 01:44:36,670
negative side when we start right now

1827
01:44:36,729 --> 01:44:42,919
then what we know is we're going to

1828
01:44:40,699 --> 01:44:44,720
recurse down that side so whichever side

1829
01:44:42,920 --> 01:44:46,880
the origins on that's the side we're

1830
01:44:44,720 --> 01:44:50,030
going to do but there's another side

1831
01:44:46,880 --> 01:44:51,619
over here right and there's stuff over

1832
01:44:50,029 --> 01:44:54,380
here because it was a split plane so we

1833
01:44:51,619 --> 01:44:56,329
know that there's things on the side so

1834
01:44:54,380 --> 01:44:58,340
the question is after we test what's on

1835
01:44:56,329 --> 01:45:03,380
this side do we need to test what's on

1836
01:44:58,340 --> 01:45:07,579
this side and my argument was look if I

1837
01:45:03,380 --> 01:45:11,000
add the current rate eval you two from

1838
01:45:07,579 --> 01:45:13,880
Ray origin plus the T value times D I'm

1839
01:45:11,000 --> 01:45:17,449
going to get the location of each of

1840
01:45:13,880 --> 01:45:20,119
these that of each of these Ray's as its

1841
01:45:17,449 --> 01:45:22,789
current best hit so it's either gonna be

1842
01:45:20,119 --> 01:45:25,220
here here here or here depending on

1843
01:45:22,789 --> 01:45:26,930
which one of the Rays for Ray's you were

1844
01:45:25,220 --> 01:45:29,420
talking about but I'm gonna get four

1845
01:45:26,930 --> 01:45:34,190
values that tell me where the Ray would

1846
01:45:29,420 --> 01:45:36,859
end right and what I want to know is are

1847
01:45:34,189 --> 01:45:39,019
any of them past the split plane because

1848
01:45:36,859 --> 01:45:42,319
if none of them were if it was like here

1849
01:45:39,020 --> 01:45:46,310
here and here then I just don't need to

1850
01:45:42,319 --> 01:45:48,229
look at this side right why bother

1851
01:45:46,310 --> 01:45:50,690
like I don't need to look at the other

1852
01:45:48,229 --> 01:45:52,159
side of the KD tree because I know that

1853
01:45:50,689 --> 01:45:55,369
I can't ever get to the other side of

1854
01:45:52,159 --> 01:45:57,199
the cage a tree so just don't bother so

1855
01:45:55,369 --> 01:46:01,519
what's that gonna look like well when I

1856
01:45:57,199 --> 01:46:04,399
actually do this you know origin plus T

1857
01:46:01,520 --> 01:46:08,360
times direction right I'm gonna get out

1858
01:46:04,399 --> 01:46:10,699
four values that have a sign it will and

1859
01:46:08,359 --> 01:46:14,599
then I subtract the D the plain D value

1860
01:46:10,699 --> 01:46:16,489
right I'm gonna get out for signs again

1861
01:46:14,600 --> 01:46:18,500
just like I got out when I did the

1862
01:46:16,489 --> 01:46:19,639
origin and I only needed one in the case

1863
01:46:18,500 --> 01:46:21,949
the origin because I know that's always

1864
01:46:19,640 --> 01:46:23,600
the same but for the rate for this that

1865
01:46:21,949 --> 01:46:26,119
they're gonna be for different values so

1866
01:46:23,600 --> 01:46:27,829
I've got four sine values all

1867
01:46:26,119 --> 01:46:31,550
I need to know to determine whether to

1868
01:46:27,829 --> 01:46:37,069
go down this side of the tree or not is

1869
01:46:31,550 --> 01:46:39,800
are any of them the wrong value so if I

1870
01:46:37,069 --> 01:46:41,210
was on the positive side and I want to

1871
01:46:39,800 --> 01:46:43,730
know do I go to the negative side I just

1872
01:46:41,210 --> 01:46:44,960
look are all of the signs positive if

1873
01:46:43,729 --> 01:46:46,609
they are I don't have to look at the

1874
01:46:44,960 --> 01:46:48,350
negative sign if any of them are

1875
01:46:46,609 --> 01:46:50,569
negative I have to still go down it

1876
01:46:48,350 --> 01:46:53,450
right so that's where you get that not

1877
01:46:50,569 --> 01:46:56,239
equal to you just say look if it's not

1878
01:46:53,449 --> 01:47:01,789
equal to the exact mask I'm looking for

1879
01:46:56,239 --> 01:47:03,170
I do have to descend right and again I'm

1880
01:47:01,789 --> 01:47:04,640
sorry if I typed it in wrong we haven't

1881
01:47:03,170 --> 01:47:06,319
debugged this so I'm not even complete

1882
01:47:04,640 --> 01:47:07,789
claiming that this code is correct I'm

1883
01:47:06,319 --> 01:47:10,489
just walking you through what my idea

1884
01:47:07,789 --> 01:47:13,579
was right so here what you can see as I

1885
01:47:10,489 --> 01:47:15,260
said look if we're gonna take out the

1886
01:47:13,579 --> 01:47:16,609
sign values that's what move mass PS

1887
01:47:15,260 --> 01:47:17,420
will do so this is gonna take out the

1888
01:47:16,609 --> 01:47:19,579
sign values

1889
01:47:17,420 --> 01:47:22,039
we're then gonna look and say if the

1890
01:47:19,579 --> 01:47:24,529
sign values are not exactly what I

1891
01:47:22,039 --> 01:47:26,359
expect them to be for it early out then

1892
01:47:24,529 --> 01:47:29,619
I have to then I have to walk the far

1893
01:47:26,359 --> 01:47:29,619
side the tree does that make sense

1894
01:48:11,590 --> 01:48:17,289
yes what is the initial T value the

1895
01:48:14,319 --> 01:48:19,359
initial T value is the farthest you want

1896
01:48:17,289 --> 01:48:22,000
to go before you consider there to be no

1897
01:48:19,359 --> 01:48:26,559
hit so basically what we would set that

1898
01:48:22,000 --> 01:48:28,779
to is the lighting region we just set it

1899
01:48:26,560 --> 01:48:30,670
to like and right now we kind of set it

1900
01:48:28,779 --> 01:48:32,679
arbitrarily but if we wanted to be

1901
01:48:30,670 --> 01:48:35,470
completely conservative we could set it

1902
01:48:32,680 --> 01:48:38,380
to the total maximum diagonal distance

1903
01:48:35,470 --> 01:48:40,510
from one end of that volume to the other

1904
01:48:38,380 --> 01:48:41,920
and we know that we can't ever have a

1905
01:48:40,510 --> 01:48:44,230
hit that's further than that because

1906
01:48:41,920 --> 01:48:46,329
that's the entire geometry we don't have

1907
01:48:44,229 --> 01:48:50,529
any geometry that is further apart than

1908
01:48:46,329 --> 01:48:52,300
that right so we can do that but it

1909
01:48:50,529 --> 01:48:55,569
doesn't really matter just at the

1910
01:48:52,300 --> 01:48:57,489
initial T value is whatever you wish to

1911
01:48:55,569 --> 01:48:59,349
pick as the furthest you can consider a

1912
01:48:57,489 --> 01:49:00,880
hit before you just say look look we

1913
01:48:59,350 --> 01:49:02,860
know we can't have hits that are further

1914
01:49:00,880 --> 01:49:06,750
than that because our geometry is now

1915
01:49:02,859 --> 01:49:06,750
out its and we're not there anymore and

1916
01:49:06,779 --> 01:49:10,359
something also mentioned learn OpenGL is

1917
01:49:08,979 --> 01:49:12,399
tutorials about deferred rendering and

1918
01:49:10,359 --> 01:49:14,109
he said be careful you learn from is it

1919
01:49:12,399 --> 01:49:16,000
deferred rendering has some pitfalls or

1920
01:49:14,109 --> 01:49:19,869
something bad that only programmers know

1921
01:49:16,000 --> 01:49:25,000
about again I just I'm sorry but I do

1922
01:49:19,869 --> 01:49:26,529
not know what what he means you can't

1923
01:49:25,000 --> 01:49:27,760
ask me questions about what John means

1924
01:49:26,529 --> 01:49:29,769
because I don't know what John means

1925
01:49:27,760 --> 01:49:31,119
everyone uses deferred rendering as far

1926
01:49:29,770 --> 01:49:32,920
as I know I don't know anyone who

1927
01:49:31,119 --> 01:49:38,079
doesn't use deferred rendering but I

1928
01:49:32,920 --> 01:49:40,739
don't I'm not a rendering person so I

1929
01:49:38,079 --> 01:49:40,739
don't know

1930
01:49:44,319 --> 01:49:47,988
you give theoretically go full forward

1931
01:49:46,550 --> 01:49:50,480
using clustered shading yeah but they

1932
01:49:47,988 --> 01:49:52,399
don't like do muses clustered shading

1933
01:49:50,479 --> 01:49:56,178
but they still defer right I mean that's

1934
01:49:52,399 --> 01:49:57,828
exactly what this was if I remember

1935
01:49:56,179 --> 01:50:12,920
correctly like didn't we just have this

1936
01:49:57,828 --> 01:50:15,380
up on the on the screen so Doom is a

1937
01:50:12,920 --> 01:50:20,000
clustered renderer it uses a screen

1938
01:50:15,380 --> 01:50:23,480
lined like voxel basically grid to break

1939
01:50:20,000 --> 01:50:31,760
the screen up into sections and then

1940
01:50:23,479 --> 01:50:38,948
when they go to render I mean like here

1941
01:50:31,760 --> 01:50:38,949
you go I think they still use G buffers

1942
01:50:56,109 --> 01:51:03,139
so I don't know I mean it's possible

1943
01:50:58,880 --> 01:51:05,270
that maybe you don't have to use them if

1944
01:51:03,140 --> 01:51:07,100
you do some stuff they didn't do yet or

1945
01:51:05,270 --> 01:51:12,199
didn't have time to do and maybe now

1946
01:51:07,100 --> 01:51:15,289
they don't like maybe they use in the

1947
01:51:12,198 --> 01:51:16,789
new doom renderer which I don't know

1948
01:51:15,289 --> 01:51:21,050
anything about look I haven't seen a

1949
01:51:16,789 --> 01:51:25,460
study of them maybe they now no longer

1950
01:51:21,050 --> 01:51:27,110
do defer any of the values but I mean at

1951
01:51:25,460 --> 01:51:29,448
least the last time this is the only

1952
01:51:27,109 --> 01:51:30,948
clustered renderer I know of it's like a

1953
01:51:29,448 --> 01:51:32,448
highly optimized cluster renderer I

1954
01:51:30,948 --> 01:51:34,488
don't know who else does highly

1955
01:51:32,448 --> 01:51:36,649
optimized cluster rendering there

1956
01:51:34,488 --> 01:51:39,619
probably are some people who do but this

1957
01:51:36,649 --> 01:51:44,659
still used a deferred pass on two of

1958
01:51:39,619 --> 01:51:48,380
three of the components right so I don't

1959
01:51:44,659 --> 01:51:50,238
know I mean it is true that people still

1960
01:51:48,380 --> 01:51:51,980
use a depth pre pass as well like you

1961
01:51:50,238 --> 01:51:53,659
can see all of them use a depth free

1962
01:51:51,979 --> 01:51:55,159
pass because it's pretty much always the

1963
01:51:53,659 --> 01:52:00,590
case that people do a depth free pass

1964
01:51:55,159 --> 01:52:01,880
right so you also do a deputy best but

1965
01:52:00,590 --> 01:52:04,300
that doesn't mean you're not deferring

1966
01:52:01,880 --> 01:52:04,300
anything

1967
01:52:08,929 --> 01:52:10,989
you

1968
01:52:19,319 --> 01:52:24,569
oh so there's a new quality which Call

1969
01:52:21,779 --> 01:52:25,500
of Duty does Z binning or clustered

1970
01:52:24,569 --> 01:52:30,299
right now I mean you know whatever they

1971
01:52:25,500 --> 01:52:32,479
want to call it which Call of Duty does

1972
01:52:30,300 --> 01:52:32,480
it

1973
01:52:37,789 --> 01:52:42,079
I mean not that it matters because it

1974
01:52:39,800 --> 01:52:45,460
doesn't look like we've got a graphics

1975
01:52:42,079 --> 01:52:45,460
study of it there but

1976
01:53:03,720 --> 01:53:06,720
anyway

1977
01:53:32,859 --> 01:53:45,619
so Call of Duty infinite warfare which

1978
01:53:36,378 --> 01:53:53,809
is whatever that is alright so here's

1979
01:53:45,618 --> 01:54:00,038
the Z binning whoa

1980
01:53:53,809 --> 01:54:02,659
yeah you're right that's a lot crazier

1981
01:54:00,038 --> 01:54:04,429
yeah so clustered renderer still but

1982
01:54:02,658 --> 01:54:10,148
yeah that's that's an interesting

1983
01:54:04,429 --> 01:54:10,149
cluster thing

1984
01:54:11,618 --> 01:54:18,608
yikes all right all right

1985
01:55:02,399 --> 01:55:10,369
I would agree this this looks pretty

1986
01:55:07,439 --> 01:55:10,369
pretty nutso

1987
01:55:17,939 --> 01:55:32,019
this looks kind of ridiculous is this

1988
01:55:21,189 --> 01:55:33,250
really a good idea though I mean man all

1989
01:55:32,020 --> 01:55:36,100
right well this has nothing to do with

1990
01:55:33,250 --> 01:55:42,489
with deferred or not but just like man

1991
01:55:36,100 --> 01:55:46,920
that is some much more nutso bidding

1992
01:55:42,489 --> 01:55:46,920
than than the normal one

1993
01:55:54,649 --> 01:55:59,658
I mean when you say it's faster but how

1994
01:55:57,948 --> 01:56:01,399
do you know it's faster you sure it's

1995
01:55:59,658 --> 01:56:24,129
faster than the one that they use in

1996
01:56:01,399 --> 01:56:26,988
Dhoom I mean all right I have no idea

1997
01:56:24,130 --> 01:56:29,869
what John meant by that but you should

1998
01:56:26,988 --> 01:56:32,269
ask him not me because I don't know what

1999
01:56:29,869 --> 01:56:33,948
he means when he says things he knows

2000
01:56:32,270 --> 01:56:35,360
what he means when he says things so I

2001
01:56:33,948 --> 01:56:37,698
can't help you

2002
01:56:35,359 --> 01:56:39,559
what I can tell you is as far as I know

2003
01:56:37,698 --> 01:56:42,079
deferred rendering is still used almost

2004
01:56:39,560 --> 01:56:43,550
everywhere in high-end engines but

2005
01:56:42,079 --> 01:56:47,948
that's all I know

2006
01:56:43,550 --> 01:56:51,969
so that's that's what I've got for you

2007
01:56:47,948 --> 01:56:51,969
I'm gonna go ahead and wrap it up okay

2008
01:56:56,560 --> 01:57:03,650
so you actually did what the crazy

2009
01:57:00,079 --> 01:57:08,539
render in your engine to the crazy call

2010
01:57:03,649 --> 01:57:08,929
of duty one that's all right well good

2011
01:57:08,539 --> 01:57:12,969
for you

2012
01:57:08,929 --> 01:57:12,969
I mean that did look pretty nuts but

2013
01:57:22,029 --> 01:57:25,369
problem is we can't ask him because he's

2014
01:57:24,350 --> 01:57:28,670
angry about it okay

2015
01:57:25,369 --> 01:57:30,109
well that's fair - then don't ask John

2016
01:57:28,670 --> 01:57:35,319
about it

2017
01:57:30,109 --> 01:57:42,829
just go figure it out yourself right I

2018
01:57:35,319 --> 01:57:46,489
mean you know you'd you know what it is

2019
01:57:42,829 --> 01:57:50,090
now you can go read like those graphs

2020
01:57:46,489 --> 01:57:52,639
breakdowns and you know what it does and

2021
01:57:50,090 --> 01:57:54,980
you can figure out whether it's good or

2022
01:57:52,640 --> 01:57:55,789
bad for what you're doing you know step

2023
01:57:54,979 --> 01:57:57,919
up to the plate

2024
01:57:55,789 --> 01:58:06,319
you don't need John to tell you one way

2025
01:57:57,920 --> 01:58:07,579
or another right so I think Carmack's

2026
01:58:06,319 --> 01:58:13,789
had deferred running doesn't work well

2027
01:58:07,579 --> 01:58:16,970
in VR like who cares about VR VR is just

2028
01:58:13,789 --> 01:58:19,279
totally such a waste of everyone's time

2029
01:58:16,970 --> 01:58:23,810
and so much money got poured into it and

2030
01:58:19,279 --> 01:58:26,359
no one cares like nobody cares exactly

2031
01:58:23,810 --> 01:58:28,970
like I knew no one would care it was

2032
01:58:26,359 --> 01:58:31,279
just a gigantic way to set literally

2033
01:58:28,970 --> 01:58:40,760
billions of dollars on fire and never

2034
01:58:31,279 --> 01:58:44,509
see it again so yeah great anyway I'm

2035
01:58:40,760 --> 01:58:46,250
gonna wrap it up yeah like I've said

2036
01:58:44,510 --> 01:58:48,170
this many times like AR is something

2037
01:58:46,250 --> 01:58:50,390
that will probably catch on VR no one

2038
01:58:48,170 --> 01:58:52,029
will ever care about ever it's never

2039
01:58:50,390 --> 01:58:57,170
going to be something people care about

2040
01:58:52,029 --> 01:58:59,630
it's it's only AR right it's only once

2041
01:58:57,170 --> 01:59:01,010
you get it to so people can still feel

2042
01:58:59,630 --> 01:59:05,750
like they're actually still in their

2043
01:59:01,010 --> 01:59:08,600
real tangible environment like it's it's

2044
01:59:05,750 --> 01:59:11,300
just not the case that like people are

2045
01:59:08,600 --> 01:59:12,650
actually still social they don't want to

2046
01:59:11,300 --> 01:59:14,600
feel like they've been completely

2047
01:59:12,649 --> 01:59:16,849
alienated from the real world like that

2048
01:59:14,600 --> 01:59:19,100
I mean if they were they would all love

2049
01:59:16,850 --> 01:59:21,079
coronavirus they would love being locked

2050
01:59:19,100 --> 01:59:24,200
at home without ever be able to see the

2051
01:59:21,079 --> 01:59:27,470
real world ever right but that's not the

2052
01:59:24,199 --> 01:59:29,960
case like very few people actually want

2053
01:59:27,470 --> 01:59:31,920
that and while it's true that it's a

2054
01:59:29,960 --> 01:59:34,230
good little like

2055
01:59:31,920 --> 01:59:37,560
fun crazy thing to do once in a while

2056
01:59:34,229 --> 01:59:38,789
like oh that was cool like I put on the

2057
01:59:37,560 --> 01:59:40,980
VR goggles and I was down with the

2058
01:59:38,789 --> 01:59:42,779
whales for a minute like sure but that

2059
01:59:40,979 --> 01:59:44,309
is not a revolution that's just it's

2060
01:59:42,779 --> 01:59:46,559
like the Nintendo Wii it's a little

2061
01:59:44,310 --> 01:59:47,760
thing you do once and some friends come

2062
01:59:46,560 --> 01:59:48,840
over and you try it one time and oh well

2063
01:59:47,760 --> 01:59:53,480
that was weird and then you never think

2064
01:59:48,840 --> 01:59:56,489
about it again right so it's just like

2065
01:59:53,479 --> 01:59:58,619
we are not necessary it just we

2066
01:59:56,488 --> 02:00:01,769
shouldn't have bothered it's a necessary

2067
01:59:58,619 --> 02:00:04,279
step to a are perhaps but say that and

2068
02:00:01,770 --> 02:00:06,719
that's what you're doing you're just

2069
02:00:04,279 --> 02:00:10,109
going down the road to AR and till you

2070
02:00:06,719 --> 02:00:12,750
get there it doesn't matter so you know

2071
02:00:10,109 --> 02:00:14,909
call me when you're at a AR and then and

2072
02:00:12,750 --> 02:00:16,770
then I agree there's probably people are

2073
02:00:14,909 --> 02:00:18,389
gonna start liking that cuz when you can

2074
02:00:16,770 --> 02:00:20,160
just put on like you know glasses like

2075
02:00:18,390 --> 02:00:22,050
I'm wearing now and you can actually

2076
02:00:20,159 --> 02:00:23,760
just see extra stuff augmented into the

2077
02:00:22,050 --> 02:00:26,310
world that seems like people will use

2078
02:00:23,760 --> 02:00:33,179
that like they like they use the

2079
02:00:26,310 --> 02:00:34,830
smartphone you know so anyway that's it

2080
02:00:33,179 --> 02:00:36,119
for today thank you for joining me for

2081
02:00:34,829 --> 02:00:38,250
those sort of handmade hero it's our

2082
02:00:36,119 --> 02:00:39,630
pleasure coding with you as always if

2083
02:00:38,250 --> 02:00:41,130
you want to follow along the series at

2084
02:00:39,630 --> 02:00:43,230
home you can always go to handmade hero

2085
02:00:41,130 --> 02:00:44,279
org and pre-order the game it comes to

2086
02:00:43,229 --> 02:00:46,889
the source code so you can follow along

2087
02:00:44,279 --> 02:00:48,569
with it you can go in modify the split

2088
02:00:46,890 --> 02:00:49,160
box routine before tomorrow try to beat

2089
02:00:48,569 --> 02:00:52,409
me to it

2090
02:00:49,159 --> 02:00:54,809
everything is there we just have to

2091
02:00:52,409 --> 02:00:57,960
reorganize the data so no no real new

2092
02:00:54,810 --> 02:00:59,460
thing happening but give it a shot

2093
02:00:57,960 --> 02:01:01,890
also we've got a Kickstarter going on

2094
02:00:59,460 --> 02:01:05,069
right now for our comic it already

2095
02:01:01,890 --> 02:01:07,350
succeeded but we want to try and get as

2096
02:01:05,069 --> 02:01:09,599
many people comics as we can so please

2097
02:01:07,350 --> 02:01:11,250
check it out we're gonna add a stretch

2098
02:01:09,600 --> 02:01:12,449
goal in there another stretch goal

2099
02:01:11,250 --> 02:01:14,520
because I think it hit all the stretch

2100
02:01:12,448 --> 02:01:15,509
goals already or almost did so we're

2101
02:01:14,520 --> 02:01:18,960
gonna add another stretch goal and there

2102
02:01:15,510 --> 02:01:21,449
soon too so check it out and yeah if you

2103
02:01:18,960 --> 02:01:24,649
like cats or you like space or you like

2104
02:01:21,448 --> 02:01:26,789
cats in space you should check it out

2105
02:01:24,649 --> 02:01:29,309
I'll be back here tomorrow when all

2106
02:01:26,789 --> 02:01:32,279
right that's the box routine and then we

2107
02:01:29,310 --> 02:01:33,690
can start seeing first of all debugging

2108
02:01:32,279 --> 02:01:36,029
this thing does it actually work like

2109
02:01:33,689 --> 02:01:39,149
did I miss a case somewhere highly

2110
02:01:36,029 --> 02:01:41,519
likely but then we can look did it help

2111
02:01:39,149 --> 02:01:43,829
just reducing those opps the number of

2112
02:01:41,520 --> 02:01:45,660
opps does that help us and we

2113
02:01:43,829 --> 02:01:47,760
so we'll see hope see you back here for

2114
02:01:45,659 --> 02:01:49,349
that till then have fun program everyone

2115
02:01:47,760 --> 02:01:52,220
and I'll see you on the Internet

2116
02:01:49,350 --> 02:01:52,220
tickety's everybody

