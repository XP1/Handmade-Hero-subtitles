1
00:00:00,060 --> 00:00:03,899
hello everyone and welcome to hand made

2
00:00:02,700 --> 00:00:08,068
here oh sure we could a complete-game

3
00:00:03,899 --> 00:00:11,429
live on stream we are going to basically

4
00:00:08,069 --> 00:00:14,339
read some stuff we wrote today we made a

5
00:00:11,429 --> 00:00:16,170
little utility that creates its what a

6
00:00:14,339 --> 00:00:19,439
you know would sort of effectively be

7
00:00:16,170 --> 00:00:21,840
hand created font assets for importing

8
00:00:19,439 --> 00:00:23,670
into our game but it's just why bother

9
00:00:21,839 --> 00:00:25,410
writing you know why bother doing all

10
00:00:23,670 --> 00:00:26,490
the work of creating them by hand when

11
00:00:25,410 --> 00:00:29,339
you could just write a program to

12
00:00:26,489 --> 00:00:31,649
extract them from TTFN that's exactly

13
00:00:29,339 --> 00:00:34,769
what we did but we wanted to keep the

14
00:00:31,649 --> 00:00:35,939
process of exporting you know want to

15
00:00:34,770 --> 00:00:38,520
keep the process of importing I should

16
00:00:35,939 --> 00:00:40,589
say our art assets into the game as

17
00:00:38,520 --> 00:00:43,140
uniform as possible so everything comes

18
00:00:40,590 --> 00:00:45,149
in as a PNG and then there's just a text

19
00:00:43,140 --> 00:00:46,829
file with the markup in it that says any

20
00:00:45,149 --> 00:00:49,679
additional information that needs to be

21
00:00:46,829 --> 00:00:51,179
in the PNG and this is basically a

22
00:00:49,679 --> 00:00:53,670
correction from originally I just kind

23
00:00:51,179 --> 00:00:55,890
of stuff stuff in the file name that was

24
00:00:53,670 --> 00:00:57,629
an attempt to simplify beyond what you

25
00:00:55,890 --> 00:01:01,530
would normally simplify in a normal

26
00:00:57,628 --> 00:01:02,939
asset import path it just didn't work it

27
00:01:01,530 --> 00:01:05,579
was too cumbersome and you couldn't be

28
00:01:02,939 --> 00:01:07,019
expressive enough in that and we were

29
00:01:05,579 --> 00:01:09,030
gonna have to have text files anyway to

30
00:01:07,019 --> 00:01:11,250
like store things like alignment points

31
00:01:09,030 --> 00:01:13,140
and so I just changed that and said look

32
00:01:11,250 --> 00:01:14,489
the PNG names are just random names we

33
00:01:13,140 --> 00:01:16,409
don't care about them anymore

34
00:01:14,489 --> 00:01:18,629
and we're just gonna have like a import

35
00:01:16,409 --> 00:01:20,490
file that just says look here's the PNG

36
00:01:18,629 --> 00:01:21,780
to import and here's all the settings I

37
00:01:20,489 --> 00:01:23,459
want you to set when you load it in

38
00:01:21,780 --> 00:01:25,109
that's been much better

39
00:01:23,459 --> 00:01:27,059
we're totally happy with that and now we

40
00:01:25,109 --> 00:01:28,950
can basically build our entire game

41
00:01:27,060 --> 00:01:31,079
packages just from those kind of import

42
00:01:28,950 --> 00:01:34,590
lists and really anyone could use that

43
00:01:31,078 --> 00:01:37,109
to build their own sort of packed packed

44
00:01:34,590 --> 00:01:38,930
and annotated file that has all the

45
00:01:37,109 --> 00:01:41,578
additional info you invariably need

46
00:01:38,930 --> 00:01:43,290
whenever you take bitmaps or something

47
00:01:41,578 --> 00:01:44,699
and put them into a game that's always

48
00:01:43,290 --> 00:01:47,790
kind of the bane of a game developers

49
00:01:44,700 --> 00:01:50,118
existence is that art tools are usually

50
00:01:47,790 --> 00:01:52,500
designed to just create an asset

51
00:01:50,118 --> 00:01:54,868
Photoshop just wants to make an asset

52
00:01:52,500 --> 00:01:56,280
and it doesn't have a lot of ways for

53
00:01:54,868 --> 00:01:58,200
you to like link that asset to other

54
00:01:56,280 --> 00:02:00,060
assets and create things that artists

55
00:01:58,200 --> 00:02:01,439
understand cleanly about how that thing

56
00:02:00,060 --> 00:02:03,118
will be related to the game so you

57
00:02:01,438 --> 00:02:05,250
almost always need to have this kind of

58
00:02:03,118 --> 00:02:06,780
game specific markup that you write in

59
00:02:05,250 --> 00:02:08,489
the mill utility yourself or things like

60
00:02:06,780 --> 00:02:11,729
that or kind of in the middle in the

61
00:02:08,489 --> 00:02:12,840
game engine itself like we do that

62
00:02:11,729 --> 00:02:13,889
always ends up happening and you need a

63
00:02:12,840 --> 00:02:15,150
good place to store it

64
00:02:13,889 --> 00:02:16,500
think we've kind of worked that out now

65
00:02:15,150 --> 00:02:18,390
and I'm happy with it so I think all

66
00:02:16,500 --> 00:02:20,939
that stuff is basically done but for

67
00:02:18,389 --> 00:02:23,279
fonts it's kind of a little bit

68
00:02:20,939 --> 00:02:25,349
different because for fonts we do have

69
00:02:23,280 --> 00:02:28,318
all the markup it's the one art asset we

70
00:02:25,349 --> 00:02:29,939
have where the input file actually have

71
00:02:28,318 --> 00:02:32,250
stuff like kerning the things that we

72
00:02:29,939 --> 00:02:34,439
actually need to know and so we don't

73
00:02:32,250 --> 00:02:36,689
want to go have to respec I'd all that

74
00:02:34,439 --> 00:02:38,340
by hand that's the opposite of the point

75
00:02:36,689 --> 00:02:41,370
we were trying to do with everything

76
00:02:38,340 --> 00:02:43,950
else and so what we did is we just made

77
00:02:41,370 --> 00:02:46,530
a little utility called HH font and all

78
00:02:43,949 --> 00:02:49,619
it does is just extract fonts from you

79
00:02:46,530 --> 00:02:51,390
know a font file through windows and

80
00:02:49,620 --> 00:02:53,159
then it dumps those out as PNG s it can

81
00:02:51,389 --> 00:02:55,949
be loaded just like other bitmaps into

82
00:02:53,159 --> 00:02:57,659
our engine and packed through your asset

83
00:02:55,949 --> 00:03:00,449
part pipeline just like they normally

84
00:02:57,659 --> 00:03:02,219
would be it then spits all of the

85
00:03:00,449 --> 00:03:06,929
kerning information out into a text file

86
00:03:02,219 --> 00:03:08,280
as well so that's good too but we never

87
00:03:06,930 --> 00:03:11,069
made anything that actually reads those

88
00:03:08,280 --> 00:03:13,289
font metadata's in so that's the last

89
00:03:11,069 --> 00:03:15,030
piece of the puzzle because we've got

90
00:03:13,289 --> 00:03:16,729
everything else we've got mark bitmaps

91
00:03:15,030 --> 00:03:19,949
with arbitrary alignment points in them

92
00:03:16,729 --> 00:03:22,409
we've got it loaded from sprite sheets

93
00:03:19,949 --> 00:03:25,048
as necessary if we want we've got

94
00:03:22,409 --> 00:03:27,120
streamable and non streamable sound

95
00:03:25,049 --> 00:03:29,129
playback so you know you can import and

96
00:03:27,120 --> 00:03:30,599
chunk up sounds into chunks to be loaded

97
00:03:29,129 --> 00:03:33,180
separately we tested all that and it

98
00:03:30,599 --> 00:03:36,259
works great so all that stuff is done

99
00:03:33,180 --> 00:03:38,879
but what we don't have is a way to

100
00:03:36,259 --> 00:03:42,179
import thoughts automatically at runtime

101
00:03:38,879 --> 00:03:44,400
like we have everything else and so we

102
00:03:42,180 --> 00:03:46,650
want to get off of that old test art

103
00:03:44,400 --> 00:03:48,060
packing thing that we had that we wrote

104
00:03:46,650 --> 00:03:50,039
at the very beginning Panama hero and

105
00:03:48,060 --> 00:03:51,329
now into the nice uniform art pipeline

106
00:03:50,039 --> 00:03:54,810
so we can finally put a stamp on it and

107
00:03:51,329 --> 00:03:56,340
say okay we're done we can build any

108
00:03:54,810 --> 00:03:58,229
assets we want for the game now and it's

109
00:03:56,340 --> 00:04:00,719
all uniform and clean and can be redone

110
00:03:58,229 --> 00:04:02,909
at any time so if we wanted to delete

111
00:04:00,719 --> 00:04:04,379
all our packed files we can just rebuild

112
00:04:02,909 --> 00:04:06,569
them you know which is what you want

113
00:04:04,379 --> 00:04:07,829
that's where you want to be and this

114
00:04:06,569 --> 00:04:12,060
will be the first time we can really say

115
00:04:07,829 --> 00:04:13,680
that because yeah before that we didn't

116
00:04:12,060 --> 00:04:15,569
really have a lot of ways we could do

117
00:04:13,680 --> 00:04:17,069
stuff like that which makes it kind of

118
00:04:15,569 --> 00:04:19,769
made it kind of an incomplete art

119
00:04:17,069 --> 00:04:22,108
pipeline all right so there's two things

120
00:04:19,769 --> 00:04:23,699
I want to do today the first thing I

121
00:04:22,108 --> 00:04:25,918
want to do is just finish up a little

122
00:04:23,699 --> 00:04:28,370
something I even made it to do for it in

123
00:04:25,918 --> 00:04:28,370
here

124
00:04:30,050 --> 00:04:39,150
loading loading I don't know it's maybe

125
00:04:35,939 --> 00:04:40,319
the certificate are um so this by the

126
00:04:39,149 --> 00:04:41,878
way was a good bug that somebody

127
00:04:40,319 --> 00:04:43,289
reported that we do want to look at I

128
00:04:41,879 --> 00:04:46,919
could put that up for looking at later

129
00:04:43,288 --> 00:04:49,918
today but right here I just made a

130
00:04:46,918 --> 00:04:51,689
little note that says hey when we're

131
00:04:49,918 --> 00:04:53,878
writing pings remember we talked about

132
00:04:51,689 --> 00:04:56,939
the fact that right now we didn't write

133
00:04:53,879 --> 00:05:00,210
out multiple rows as separate chunks and

134
00:04:56,939 --> 00:05:02,490
so there's a hard limit of the number of

135
00:05:00,209 --> 00:05:05,430
bytes in the ping data chunk can only be

136
00:05:02,490 --> 00:05:07,949
16 bits worth of length that's just too

137
00:05:05,430 --> 00:05:09,389
small it happens to be fine because

138
00:05:07,949 --> 00:05:11,810
we're only writing out fonts and the

139
00:05:09,389 --> 00:05:14,129
fonts happen to be small but it's

140
00:05:11,810 --> 00:05:16,589
probably worth our time to spend the

141
00:05:14,129 --> 00:05:18,180
extra hour today to make sure that we do

142
00:05:16,589 --> 00:05:20,189
something smart when the size gets too

143
00:05:18,180 --> 00:05:23,389
large because we might want to use this

144
00:05:20,189 --> 00:05:25,800
ping writer to write other things right

145
00:05:23,389 --> 00:05:27,478
and so I'd like to go in there and do

146
00:05:25,800 --> 00:05:29,329
that just to make sure because then that

147
00:05:27,478 --> 00:05:31,529
way our ping writer can write pings

148
00:05:29,329 --> 00:05:33,389
anytime we want and so if we want some

149
00:05:31,529 --> 00:05:35,698
that saves a screenshot or who knows

150
00:05:33,389 --> 00:05:39,360
what we want we'll be able to call that

151
00:05:35,699 --> 00:05:41,278
ping writer and just know that it will

152
00:05:39,360 --> 00:05:43,288
work and not have this weird like hello

153
00:05:41,278 --> 00:05:44,158
I didn't write the ping moment and it's

154
00:05:43,288 --> 00:05:46,079
like oh right

155
00:05:44,158 --> 00:05:48,629
I remember now it's because we didn't

156
00:05:46,079 --> 00:05:51,778
support pings that are as large as you

157
00:05:48,629 --> 00:05:53,399
know 1920 by 1080 so that's just a dumb

158
00:05:51,778 --> 00:05:54,778
limitation to leave in there and so what

159
00:05:53,399 --> 00:05:58,258
I'm gonna do now is I'm just gonna try

160
00:05:54,778 --> 00:06:00,269
to work around that limitation now at

161
00:05:58,259 --> 00:06:00,840
the bottom here this is our little ping

162
00:06:00,269 --> 00:06:03,149
writer

163
00:06:00,839 --> 00:06:04,888
it's just crappy you know we just kind

164
00:06:03,149 --> 00:06:06,329
of kicked out whatever would work but

165
00:06:04,889 --> 00:06:07,918
it's fine for our purposes we don't need

166
00:06:06,329 --> 00:06:09,060
something that's a good ping writer we

167
00:06:07,918 --> 00:06:11,758
just need something that writes a ping

168
00:06:09,060 --> 00:06:14,038
at all now what you can see here is the

169
00:06:11,759 --> 00:06:17,098
error that we're seeing it's this or not

170
00:06:14,038 --> 00:06:18,750
that we would see is we get this to do

171
00:06:17,098 --> 00:06:22,649
here if we want to support larger than

172
00:06:18,750 --> 00:06:24,839
128 by 128 we need to multiplex this

173
00:06:22,649 --> 00:06:26,128
that's the correct comment it does say

174
00:06:24,839 --> 00:06:27,299
exactly what the promised and we'll go

175
00:06:26,129 --> 00:06:29,520
into what that problem is in a second

176
00:06:27,300 --> 00:06:32,520
but what I'd like to do first is I'd

177
00:06:29,519 --> 00:06:34,769
like to provoke the bug so that we can

178
00:06:32,519 --> 00:06:38,189
see it failing then that you can all see

179
00:06:34,769 --> 00:06:40,288
what I'm talking about literally and

180
00:06:38,189 --> 00:06:41,969
then fix it that way we'll know that

181
00:06:40,288 --> 00:06:43,800
it's fixed if I just kind of

182
00:06:41,970 --> 00:06:45,870
shuffle the code around and say I fixed

183
00:06:43,800 --> 00:06:47,579
it I don't really know if I have or not

184
00:06:45,870 --> 00:06:50,370
so it's better to have a case where I

185
00:06:47,579 --> 00:06:54,599
can obviously see the bug that we've got

186
00:06:50,370 --> 00:06:57,840
and then after that we can definitively

187
00:06:54,600 --> 00:06:59,910
say that we fix the problem right or at

188
00:06:57,839 --> 00:07:02,699
least have some evidence we fix the

189
00:06:59,910 --> 00:07:05,640
problem so what we've got is this HH

190
00:07:02,699 --> 00:07:07,319
font utility to you know extract these

191
00:07:05,639 --> 00:07:11,159
fonts that's a good way to test the ping

192
00:07:07,319 --> 00:07:12,599
writer it's the only thing we've got

193
00:07:11,160 --> 00:07:14,820
right now that actually does any ping

194
00:07:12,600 --> 00:07:17,100
writing so what I want to do is I want

195
00:07:14,819 --> 00:07:20,430
to call this with a set of data that

196
00:07:17,100 --> 00:07:24,150
should make it produce font bitmaps that

197
00:07:20,430 --> 00:07:26,160
don't work okay so if I if I go into HH

198
00:07:24,149 --> 00:07:27,689
font that's CPP and I look at like well

199
00:07:26,160 --> 00:07:29,100
something that did work here's an

200
00:07:27,689 --> 00:07:32,610
example of something that did work

201
00:07:29,100 --> 00:07:36,500
liberation mono 20 okay so let me paste

202
00:07:32,610 --> 00:07:40,050
that in here we've got liberation mono

203
00:07:36,500 --> 00:07:42,180
20 I just want the test care set that's

204
00:07:40,050 --> 00:07:45,150
the only care set we've defined so far I

205
00:07:42,180 --> 00:07:49,500
def hht and desu pinged ER are going to

206
00:07:45,149 --> 00:07:51,329
be W temp font and W temp font so I just

207
00:07:49,500 --> 00:07:53,009
want I don't know test out hht or

208
00:07:51,329 --> 00:07:55,949
something like that right and I'm gonna

209
00:07:53,009 --> 00:08:00,060
hit return oops and I'm gonna spell this

210
00:07:55,949 --> 00:08:02,009
correctly there we go so anytime I run

211
00:08:00,060 --> 00:08:05,250
that it should create this directory

212
00:08:02,009 --> 00:08:08,159
with the fonts unpacked into it right so

213
00:08:05,250 --> 00:08:10,829
if I delete everything in here and I run

214
00:08:08,160 --> 00:08:13,050
this I should get the extraction and

215
00:08:10,829 --> 00:08:14,039
when I look at what's in that those

216
00:08:13,050 --> 00:08:16,110
extracted files

217
00:08:14,040 --> 00:08:18,960
I should see something correct so for

218
00:08:16,110 --> 00:08:21,900
example if I just open up 119 here with

219
00:08:18,959 --> 00:08:24,659
I should see you know the correct

220
00:08:21,899 --> 00:08:26,459
pattern with the Alpha and all that good

221
00:08:24,660 --> 00:08:28,980
stuff Windows of course can't display it

222
00:08:26,459 --> 00:08:30,299
very well because Windows is awesome but

223
00:08:28,980 --> 00:08:32,190
if you load it up in a real package you

224
00:08:30,300 --> 00:08:34,589
can see it's exactly what we expect it's

225
00:08:32,190 --> 00:08:36,539
a white character on a transparent

226
00:08:34,589 --> 00:08:38,550
background with alpha set you know

227
00:08:36,538 --> 00:08:41,250
roughly what you would expect that looks

228
00:08:38,549 --> 00:08:44,639
probably what we want so it looks like

229
00:08:41,250 --> 00:08:47,250
the ping is writing correctly let's

230
00:08:44,639 --> 00:08:49,649
delete that and let's try to do the same

231
00:08:47,250 --> 00:08:53,429
thing now for very large so let's say I

232
00:08:49,649 --> 00:08:55,439
do 256 which well we might let's do even

233
00:08:53,429 --> 00:08:58,159
larger let's do 512

234
00:08:55,440 --> 00:09:00,570
as far as I know that should immediately

235
00:08:58,159 --> 00:09:02,789
expose any bugs we've got in the program

236
00:09:00,570 --> 00:09:05,970
that we're kind of counting on things

237
00:09:02,789 --> 00:09:07,709
being small to work and we'll see so

238
00:09:05,970 --> 00:09:10,560
there's the extraction it extracted

239
00:09:07,710 --> 00:09:14,550
everything and then we can take a look

240
00:09:10,559 --> 00:09:15,899
at what we got so 119 is should be the W

241
00:09:14,549 --> 00:09:17,939
again right because it was the W last

242
00:09:15,899 --> 00:09:19,559
time and it should just be a bigger W

243
00:09:17,940 --> 00:09:22,220
but what we should see is that it's

244
00:09:19,559 --> 00:09:25,409
totally not that right and you can see

245
00:09:22,220 --> 00:09:28,470
that we get almost literally what we

246
00:09:25,409 --> 00:09:30,240
would expect the height and width of

247
00:09:28,470 --> 00:09:33,090
this ping are stored in the header file

248
00:09:30,240 --> 00:09:34,799
and obviously that header file I've

249
00:09:33,090 --> 00:09:37,980
started my header file it's good in the

250
00:09:34,799 --> 00:09:40,829
header section that will still just work

251
00:09:37,980 --> 00:09:43,769
so knows exactly how big this thing

252
00:09:40,830 --> 00:09:46,230
should be to 64 by 241 is probably the

253
00:09:43,769 --> 00:09:46,860
right dimensions for the glyph that got

254
00:09:46,230 --> 00:09:49,769
extracted

255
00:09:46,860 --> 00:09:51,659
what it won't be able to do is store all

256
00:09:49,769 --> 00:09:53,789
of the pixel information and what you

257
00:09:51,659 --> 00:09:57,269
can see is it seems to have done exactly

258
00:09:53,789 --> 00:10:01,980
that it's got some pixel information in

259
00:09:57,269 --> 00:10:03,870
here right like obviously but it it most

260
00:10:01,980 --> 00:10:05,850
of it is gone right like most of the

261
00:10:03,870 --> 00:10:08,039
thing isn't there now there's no alpha

262
00:10:05,850 --> 00:10:10,139
in here either I'm not sure why that is

263
00:10:08,039 --> 00:10:12,870
that could be some other bug or it could

264
00:10:10,139 --> 00:10:15,449
just be related to the fact that when

265
00:10:12,870 --> 00:10:18,120
failed to load everything this is

266
00:10:15,450 --> 00:10:19,860
how it kind of crapped out right so I'm

267
00:10:18,120 --> 00:10:21,539
not going to consider that alpha a bug

268
00:10:19,860 --> 00:10:22,860
yet but we may have to investigate

269
00:10:21,539 --> 00:10:26,219
further about why we're not getting

270
00:10:22,860 --> 00:10:27,419
alpha extraction on larger images it may

271
00:10:26,220 --> 00:10:29,040
have something to do a to with how we're

272
00:10:27,419 --> 00:10:30,779
calling Windows right we don't know if

273
00:10:29,039 --> 00:10:32,879
it's the source or the ping writing so

274
00:10:30,779 --> 00:10:35,039
we want to take a look at that later

275
00:10:32,879 --> 00:10:37,559
okay so I'm going to delete all these

276
00:10:35,039 --> 00:10:40,529
and say that's a good way to have oak

277
00:10:37,559 --> 00:10:43,559
the bug or provoke the bug you might say

278
00:10:40,529 --> 00:10:45,000
this line of code will do it or this

279
00:10:43,559 --> 00:10:48,209
execution line I should say will do it

280
00:10:45,000 --> 00:10:49,889
and so let's go ahead and try to fix it

281
00:10:48,210 --> 00:10:52,200
by changing the way that we're writing

282
00:10:49,889 --> 00:10:53,909
out that ping so if I that's not what I

283
00:10:52,200 --> 00:10:57,420
want if I flip over to the ping writer

284
00:10:53,909 --> 00:10:58,620
here what you can see down here is I'm

285
00:10:57,419 --> 00:11:00,419
gonna get rid of this comment because

286
00:10:58,620 --> 00:11:03,320
we're gonna have to fix this this also

287
00:11:00,419 --> 00:11:05,669
we correctly throw out what it was that

288
00:11:03,320 --> 00:11:09,080
and so what you can see here is there's

289
00:11:05,669 --> 00:11:11,719
an Allen and an N 'ln and

290
00:11:09,080 --> 00:11:14,180
be final type here this is the two of

291
00:11:11,720 --> 00:11:16,100
those two things that one means this is

292
00:11:14,179 --> 00:11:19,159
the final one and zero would mean to go

293
00:11:16,100 --> 00:11:21,740
another round if you look at what we've

294
00:11:19,159 --> 00:11:26,089
got here you can see that we're writing

295
00:11:21,740 --> 00:11:30,230
out essentially one I'd at chunk right

296
00:11:26,090 --> 00:11:33,200
and then one be final with a lenin and

297
00:11:30,230 --> 00:11:36,259
end 'land for the entire image what's

298
00:11:33,200 --> 00:11:40,550
supposed to happen is the B final type

299
00:11:36,259 --> 00:11:43,879
is supposed to be 0 for every time we

300
00:11:40,549 --> 00:11:46,669
send a chunk of data and then one on the

301
00:11:43,879 --> 00:11:48,889
last one so the fact that we hard-coded

302
00:11:46,669 --> 00:11:51,829
this to one means we only get to send

303
00:11:48,889 --> 00:11:55,269
down one Len and one inland that means

304
00:11:51,830 --> 00:11:59,480
we only get to send down one 16-bit

305
00:11:55,269 --> 00:12:02,299
worth of length so 6 5 5 3 6 that's the

306
00:11:59,480 --> 00:12:04,490
maximum number of bytes we can we can

307
00:12:02,299 --> 00:12:06,859
push into the data section right and

308
00:12:04,490 --> 00:12:10,549
that's simply because of this Len and

309
00:12:06,860 --> 00:12:13,909
Len so what we need to do is we need to

310
00:12:10,549 --> 00:12:17,179
create a situation where we're going to

311
00:12:13,909 --> 00:12:22,819
repeatedly send down multiple sets of

312
00:12:17,179 --> 00:12:24,559
this to make sure we can so to make sure

313
00:12:22,820 --> 00:12:27,650
that no matter how many bytes it takes

314
00:12:24,559 --> 00:12:30,549
to specify the image we will break it

315
00:12:27,649 --> 00:12:33,500
into 6 5 5 3 6 worth of chunking and

316
00:12:30,549 --> 00:12:36,289
then a last chunk that's whatever the

317
00:12:33,500 --> 00:12:38,779
residual is right and we need to send

318
00:12:36,289 --> 00:12:41,809
all of those down so we're gonna have to

319
00:12:38,779 --> 00:12:43,669
now start setting B final type to 0 for

320
00:12:41,809 --> 00:12:47,449
each of those that we need to do there

321
00:12:43,669 --> 00:12:53,719
and then one at the final one right so

322
00:12:47,450 --> 00:12:56,330
that's what we're doing now okay so how

323
00:12:53,720 --> 00:12:58,879
would we go about doing this well for

324
00:12:56,330 --> 00:13:00,740
starters we need to stop thinking of Len

325
00:12:58,879 --> 00:13:02,809
and end lin as the actual amount we're

326
00:13:00,740 --> 00:13:04,730
sending out that's not what it's going

327
00:13:02,809 --> 00:13:07,699
to be what we want to do first is

328
00:13:04,730 --> 00:13:09,529
compute a total length that will tell us

329
00:13:07,700 --> 00:13:12,860
the size this thing actually needs to be

330
00:13:09,529 --> 00:13:14,899
so before we cast it to AU 16 here we

331
00:13:12,860 --> 00:13:16,820
were computing the right amount it's the

332
00:13:14,899 --> 00:13:19,370
width times 4 which is the number of

333
00:13:16,820 --> 00:13:21,830
bytes in a single scan line of this

334
00:13:19,370 --> 00:13:24,990
image right a single row

335
00:13:21,830 --> 00:13:26,670
plus one bite and that bite says what

336
00:13:24,990 --> 00:13:28,470
the PNG filter is remember this is just

337
00:13:26,669 --> 00:13:30,509
how P and G's are packed in it's always

338
00:13:28,470 --> 00:13:32,879
set to zero so we don't actually use

339
00:13:30,509 --> 00:13:34,319
that bite but it just needs to be there

340
00:13:32,879 --> 00:13:35,789
because the ping is gonna read it and

341
00:13:34,320 --> 00:13:38,100
needs to see the zero - no that's not

342
00:13:35,789 --> 00:13:40,199
supposed to filter we then have a height

343
00:13:38,100 --> 00:13:41,970
value right that's how many of these

344
00:13:40,200 --> 00:13:43,500
we've got so we need to multiply that

345
00:13:41,970 --> 00:13:46,350
out and that gives us a total length

346
00:13:43,500 --> 00:13:48,149
this for all of the cases where the bug

347
00:13:46,350 --> 00:13:53,129
would have hit is going to be larger

348
00:13:48,149 --> 00:13:57,449
than 65536 so each of these here has to

349
00:13:53,129 --> 00:14:00,149
be essentially done in a loop where the

350
00:13:57,450 --> 00:14:02,670
Len and the n Len are going to be like

351
00:14:00,149 --> 00:14:05,809
repeatedly done right we need to keep

352
00:14:02,669 --> 00:14:08,549
doing those over and over and over again

353
00:14:05,809 --> 00:14:11,219
so the first thing I want to do is like

354
00:14:08,549 --> 00:14:13,079
compute a chunk count which tells me how

355
00:14:11,220 --> 00:14:15,990
many of these things do I have to

356
00:14:13,080 --> 00:14:18,509
actually write you know I'm saying like

357
00:14:15,990 --> 00:14:20,220
what what are we doing here and so that

358
00:14:18,509 --> 00:14:22,200
chunk count is pretty easy for me to

359
00:14:20,220 --> 00:14:24,660
come up with because I already know what

360
00:14:22,200 --> 00:14:26,400
the maximum is it's 6 5 5 3 6 I don't

361
00:14:24,659 --> 00:14:29,189
think there's any other limitations on

362
00:14:26,399 --> 00:14:33,419
Len so it can use the full 16 bit range

363
00:14:29,190 --> 00:14:35,640
right well so it's 6 5 5 3 5 I should

364
00:14:33,419 --> 00:14:38,069
say right because I don't think it adds

365
00:14:35,639 --> 00:14:43,019
1 to the value so it's not it's it's not

366
00:14:38,070 --> 00:14:48,810
0 and you know be honest with you I

367
00:14:43,019 --> 00:14:55,110
don't know why they didn't add 1 to the

368
00:14:48,809 --> 00:15:00,229
value so you would never encode one of

369
00:14:55,110 --> 00:15:04,289
these blocks and set the length to 0 so

370
00:15:00,230 --> 00:15:07,889
would right maybe they needed that to

371
00:15:04,289 --> 00:15:11,129
encode as 0 by 0 paying because that was

372
00:15:07,889 --> 00:15:12,480
the only way you could do it it's a

373
00:15:11,129 --> 00:15:14,340
little weird if you think about it like

374
00:15:12,480 --> 00:15:16,050
I'm not sure why they didn't just add 1

375
00:15:14,340 --> 00:15:17,639
to the value because 0 is not a length

376
00:15:16,049 --> 00:15:21,299
that you should never be specifying but

377
00:15:17,639 --> 00:15:22,889
I don't know they didn't do that so what

378
00:15:21,299 --> 00:15:25,649
that actually means is the maximum chunk

379
00:15:22,889 --> 00:15:31,080
size is actually 6 5 5 3 5 I believe

380
00:15:25,649 --> 00:15:33,870
right so let's say maximum chunk size is

381
00:15:31,080 --> 00:15:35,220
6 5 5 3 5 so what I want to do is take

382
00:15:33,870 --> 00:15:38,370
the total length and I want to

383
00:15:35,220 --> 00:15:39,990
divide it by max chunk size right that's

384
00:15:38,370 --> 00:15:42,379
gonna tell me how many chunks there are

385
00:15:39,990 --> 00:15:44,430
without considering the residual I

386
00:15:42,379 --> 00:15:47,639
probably want to say how many chunks

387
00:15:44,429 --> 00:15:49,258
there are including the residual and so

388
00:15:47,639 --> 00:15:51,688
what I'm gonna do is just add the max

389
00:15:49,259 --> 00:15:54,480
Trump size minus one here to just say

390
00:15:51,688 --> 00:15:56,519
look round that up right so you know if

391
00:15:54,480 --> 00:15:59,519
if you were going to use even one byte

392
00:15:56,519 --> 00:16:00,839
over that number of chunks round it up

393
00:15:59,519 --> 00:16:03,419
because I'm going to need that residual

394
00:16:00,839 --> 00:16:07,709
chunk so this is the total chunk count

395
00:16:03,419 --> 00:16:10,198
here and then what I can do is say now I

396
00:16:07,708 --> 00:16:12,119
know that whatever I'm writing in here

397
00:16:10,198 --> 00:16:13,919
whatever I'm going to write in in a

398
00:16:12,120 --> 00:16:21,179
series and we can see what that actually

399
00:16:13,919 --> 00:16:23,219
is right it looks like this right this

400
00:16:21,179 --> 00:16:25,258
is the part that has to get repeated so

401
00:16:23,220 --> 00:16:27,120
I have to write out a be final it has to

402
00:16:25,259 --> 00:16:29,009
be 0 if there's a if there's a chunk

403
00:16:27,120 --> 00:16:31,139
after this one or one if it's the last

404
00:16:29,009 --> 00:16:33,389
chunk we need to write unto Len in an N

405
00:16:31,139 --> 00:16:34,680
Lin nobody knows why the heck the end

406
00:16:33,389 --> 00:16:37,350
Len is there but they decided they

407
00:16:34,679 --> 00:16:40,289
wanted both and Adler checksum and the

408
00:16:37,350 --> 00:16:46,740
length checksum that I got nothing I

409
00:16:40,289 --> 00:16:47,849
guess it's just weird paranoia I mean if

410
00:16:46,740 --> 00:16:49,379
you think about how many check sums are

411
00:16:47,850 --> 00:16:53,909
in here the lemma in the end Lin or a

412
00:16:49,379 --> 00:16:56,250
checksum pair the Adler 32 is a checksum

413
00:16:53,909 --> 00:17:02,039
of the whole thing and then the entire

414
00:16:56,250 --> 00:17:03,929
block also has a CRC check how many

415
00:17:02,039 --> 00:17:07,230
times gonna check the same data ping man

416
00:17:03,929 --> 00:17:09,389
I don't know but that's what they do so

417
00:17:07,230 --> 00:17:11,578
anyway in here what we want to do is say

418
00:17:09,390 --> 00:17:14,069
look we're gonna repeat this stuff so we

419
00:17:11,578 --> 00:17:16,558
have to write out a zero we have to

420
00:17:14,068 --> 00:17:18,720
write out a line we have to write out

421
00:17:16,558 --> 00:17:22,439
the B final type tool and the inland

422
00:17:18,720 --> 00:17:24,360
right so that's what has to happen now

423
00:17:22,439 --> 00:17:25,199
it's a little bit complicated and the

424
00:17:24,359 --> 00:17:27,119
reason that it's a little bit

425
00:17:25,199 --> 00:17:29,850
complicated is because we don't really

426
00:17:27,119 --> 00:17:32,099
want to only write lines we'd rather

427
00:17:29,849 --> 00:17:35,579
just be able to write arbitrary data I

428
00:17:32,099 --> 00:17:37,529
don't know if we're allowed to do that I

429
00:17:35,579 --> 00:17:40,678
think we are meaning I think we're

430
00:17:37,529 --> 00:17:43,139
allowed I guess I'm saying is I don't

431
00:17:40,679 --> 00:17:45,720
know whether I need to make sure that an

432
00:17:43,140 --> 00:17:48,690
entire line is included within one be

433
00:17:45,720 --> 00:17:51,929
final I don't one one of those

434
00:17:48,690 --> 00:17:53,548
blocks right I don't know I don't think

435
00:17:51,929 --> 00:17:56,100
so and I think we would have maybe

436
00:17:53,548 --> 00:17:59,908
mentioned that in here probably if you

437
00:17:56,099 --> 00:18:03,449
had to do that so I guess I'm a little

438
00:17:59,909 --> 00:18:05,100
hazy on whether that's true or not if

439
00:18:03,450 --> 00:18:08,009
you look at the way like our ping reader

440
00:18:05,099 --> 00:18:10,918
works we would not care because we're

441
00:18:08,009 --> 00:18:13,378
just building data out of this that we

442
00:18:10,919 --> 00:18:16,379
then filter and we don't really care how

443
00:18:13,378 --> 00:18:18,599
the filtering happened meaning this only

444
00:18:16,378 --> 00:18:20,638
occurs once we've ingested everything it

445
00:18:18,599 --> 00:18:24,839
doesn't happen on a line by line basis

446
00:18:20,638 --> 00:18:27,778
and so I can't imagine that there is a

447
00:18:24,839 --> 00:18:29,699
restriction there but just be I just

448
00:18:27,778 --> 00:18:33,599
don't know and so I feel like I should

449
00:18:29,700 --> 00:18:36,538
look and see if there's any restrictions

450
00:18:33,599 --> 00:18:40,038
on that I'm just not sure so I'm gonna

451
00:18:36,538 --> 00:18:43,308
look here and see about that particular

452
00:18:40,038 --> 00:18:43,308
part of it

453
00:18:45,240 --> 00:18:48,410
[Music]

454
00:19:09,900 --> 00:19:15,769
I mean I don't see anything

455
00:19:12,680 --> 00:19:15,769
[Music]

456
00:19:32,799 --> 00:19:39,069
I don't see anything obvious it calls

457
00:19:36,339 --> 00:19:41,439
that out so I'm gonna assume temporarily

458
00:19:39,069 --> 00:19:42,819
until we are proven other till some

459
00:19:41,440 --> 00:19:45,519
improves this otherwise or like you know

460
00:19:42,819 --> 00:19:46,119
the thing doesn't work loading into

461
00:19:45,519 --> 00:19:48,250
or something

462
00:19:46,119 --> 00:19:51,519
I'm gonna assume that I don't have to

463
00:19:48,250 --> 00:19:52,839
keep lines together so I can I can break

464
00:19:51,519 --> 00:19:57,099
the data stream in the middle of the

465
00:19:52,839 --> 00:19:58,509
line because I assumed that that is

466
00:19:57,099 --> 00:20:00,789
allowed the reason I assume that is

467
00:19:58,509 --> 00:20:02,920
allowed because if you didn't do that it

468
00:20:00,789 --> 00:20:07,960
would mean that a ping couldn't store an

469
00:20:02,920 --> 00:20:11,200
image that was longer than 65536 pixels

470
00:20:07,960 --> 00:20:13,230
long in uncompressed mode because

471
00:20:11,200 --> 00:20:15,610
there'd be no way to actually write a

472
00:20:13,230 --> 00:20:18,039
line that was you know twice that long

473
00:20:15,609 --> 00:20:19,389
so I'm assuming you can break a line in

474
00:20:18,039 --> 00:20:24,039
the middle because otherwise would be a

475
00:20:19,390 --> 00:20:25,420
pretty hard limit on the width there

476
00:20:24,039 --> 00:20:27,629
wouldn't be a limit on the height but

477
00:20:25,420 --> 00:20:29,860
there'd be a limit on the width so I

478
00:20:27,630 --> 00:20:32,380
think that we should just assume that

479
00:20:29,859 --> 00:20:35,949
and so what I want to do here is I want

480
00:20:32,380 --> 00:20:37,900
to figure out how I can best write this

481
00:20:35,950 --> 00:20:40,480
out and it's a little bit harder than

482
00:20:37,900 --> 00:20:44,710
you might expect because in order to

483
00:20:40,480 --> 00:20:47,230
insert the zeros in we need to do some

484
00:20:44,710 --> 00:20:49,509
fancy footwork if we wanted to we could

485
00:20:47,230 --> 00:20:51,490
create a temporary buffer and maybe

486
00:20:49,509 --> 00:20:52,900
that's the easiest thing to do because

487
00:20:51,490 --> 00:20:55,120
we don't care about the speed

488
00:20:52,900 --> 00:20:57,820
particularly much we could create a

489
00:20:55,119 --> 00:21:00,009
temporary buffer copy the stuff in there

490
00:20:57,819 --> 00:21:02,799
with the zeros and then just write it

491
00:21:00,009 --> 00:21:04,390
out in chunks I'm gonna leave that

492
00:21:02,799 --> 00:21:05,919
possibility open if this gets too

493
00:21:04,390 --> 00:21:07,330
confusing I'll try to write it that way

494
00:21:05,920 --> 00:21:10,390
first but if I feel like it's getting

495
00:21:07,329 --> 00:21:13,269
too out there I might back up to that

496
00:21:10,390 --> 00:21:14,380
because since we don't really have a lot

497
00:21:13,269 --> 00:21:17,859
of reason to care about the speed of

498
00:21:14,380 --> 00:21:19,780
this thing at the moment anyway I don't

499
00:21:17,859 --> 00:21:20,799
necessarily know that I want to do it

500
00:21:19,779 --> 00:21:24,099
that way

501
00:21:20,799 --> 00:21:26,529
that's just my sort of that's my feeling

502
00:21:24,099 --> 00:21:29,289
on it anyway but we'll try we'll give it

503
00:21:26,529 --> 00:21:31,240
we'll give it a quick try and see okay

504
00:21:29,289 --> 00:21:33,460
so we know that we're gonna have this

505
00:21:31,240 --> 00:21:35,890
many chunks because that's the total

506
00:21:33,460 --> 00:21:39,759
length of the of the image will get

507
00:21:35,890 --> 00:21:41,370
encoded by that many blocks of 65535 we

508
00:21:39,759 --> 00:21:46,658
know that we're gonna have to write out

509
00:21:41,369 --> 00:21:50,348
essentially this u32 here is

510
00:21:46,659 --> 00:21:54,789
for the adler 32 checksum so this part

511
00:21:50,348 --> 00:21:56,378
here like that this whole thing is

512
00:21:54,788 --> 00:21:59,618
actually how we're gonna have to figure

513
00:21:56,378 --> 00:22:02,378
out how these rows go right and so the B

514
00:21:59,618 --> 00:22:05,678
final type the Len and the n Len are all

515
00:22:02,378 --> 00:22:08,469
things that have to go like like row

516
00:22:05,679 --> 00:22:10,419
over chunk over head so we kind of know

517
00:22:08,470 --> 00:22:15,399
that there's this thing called chunk

518
00:22:10,419 --> 00:22:19,570
overhead that includes this right this

519
00:22:15,398 --> 00:22:28,238
all of this stuff oops sorry didn't mean

520
00:22:19,569 --> 00:22:29,829
that sorry and then that I so we know

521
00:22:28,239 --> 00:22:33,909
that we're gonna have to write the total

522
00:22:29,829 --> 00:22:36,398
length of the image and we know that

523
00:22:33,909 --> 00:22:37,749
we're gonna have to write the I dot and

524
00:22:36,398 --> 00:22:39,488
we know that we're going to have to

525
00:22:37,749 --> 00:22:41,229
write the Adler checksum so it looks

526
00:22:39,489 --> 00:22:43,239
like that but then we know that we're

527
00:22:41,229 --> 00:22:45,098
going to have chunk overhead which is

528
00:22:43,239 --> 00:22:47,798
this and I'm gonna put these as you

529
00:22:45,098 --> 00:22:50,439
sixteens here we know that this is the

530
00:22:47,798 --> 00:22:52,148
chunk overhead the B final type is what

531
00:22:50,440 --> 00:22:53,710
are you eight yeah so we know we're

532
00:22:52,148 --> 00:22:56,738
gonna have the B final type and then the

533
00:22:53,710 --> 00:22:59,108
the Len and the n line and so we know

534
00:22:56,739 --> 00:23:04,019
that this is gonna repeat every time we

535
00:22:59,108 --> 00:23:04,019
have a new chunk so we have to do this

536
00:23:05,489 --> 00:23:10,569
to figure out right what our total chunk

537
00:23:09,128 --> 00:23:12,098
overhead will be the whole time we have

538
00:23:10,569 --> 00:23:13,538
to multiply the chunk count by that

539
00:23:12,098 --> 00:23:15,220
chunk overhead that'll give us the

540
00:23:13,538 --> 00:23:19,179
length that it actually will come out to

541
00:23:15,220 --> 00:23:22,778
be in the end right so then we can

542
00:23:19,179 --> 00:23:24,879
actually start to work out how we're

543
00:23:22,778 --> 00:23:26,769
gonna write this thing now we know that

544
00:23:24,878 --> 00:23:28,839
we're going to be in a loop and we know

545
00:23:26,769 --> 00:23:31,388
that we're gonna be in a loop loop until

546
00:23:28,839 --> 00:23:33,098
the chunks run out right so we know

547
00:23:31,388 --> 00:23:38,709
we're gonna write the number we said we

548
00:23:33,098 --> 00:23:41,138
were gonna and then we know for each

549
00:23:38,710 --> 00:23:43,119
time we hit the Len what's going to

550
00:23:41,138 --> 00:23:45,788
happen there is we've got something like

551
00:23:43,118 --> 00:23:47,288
a length remaining that's going to be

552
00:23:45,788 --> 00:23:49,898
initialized at the top of the loop and

553
00:23:47,288 --> 00:23:51,940
say look we need to write out however

554
00:23:49,898 --> 00:23:54,128
much we think we need to write out right

555
00:23:51,940 --> 00:23:55,929
so we computed this ahead of time we

556
00:23:54,128 --> 00:23:58,028
know we need to write that much out each

557
00:23:55,929 --> 00:24:00,100
time through here we're gonna have to

558
00:23:58,028 --> 00:24:03,759
sort of clamp that amount

559
00:24:00,099 --> 00:24:06,428
as necessary right so what we can say

560
00:24:03,759 --> 00:24:08,619
first is all right look let's just set

561
00:24:06,429 --> 00:24:15,038
the length equal to the max chunk size

562
00:24:08,619 --> 00:24:17,409
right I and then what we can do is say

563
00:24:15,038 --> 00:24:19,298
if that length is greater than the

564
00:24:17,410 --> 00:24:21,390
length that was remaining then we'll

565
00:24:19,298 --> 00:24:24,548
clip it to the length that was remaining

566
00:24:21,390 --> 00:24:27,340
right that way we're only saying right

567
00:24:24,548 --> 00:24:29,048
out 65535 unless that would be more than

568
00:24:27,339 --> 00:24:31,538
we have left and if that's more than

569
00:24:29,048 --> 00:24:33,069
have left we'll clip it down then we can

570
00:24:31,538 --> 00:24:35,140
compute the in line as normal which is

571
00:24:33,069 --> 00:24:38,918
just the you know ones complement of the

572
00:24:35,140 --> 00:24:40,030
length no idea why that's in there but

573
00:24:38,919 --> 00:24:43,110
it is okay

574
00:24:40,029 --> 00:24:46,149
we'll then go ahead and do a struct copy

575
00:24:43,109 --> 00:24:48,459
to write those out here's our B final

576
00:24:46,150 --> 00:24:50,380
here's our length here's our inland what

577
00:24:48,460 --> 00:24:52,058
I want to do is move the B final down

578
00:24:50,380 --> 00:24:54,280
here because we're going to be writing

579
00:24:52,058 --> 00:24:57,879
out to different kinds of B final we

580
00:24:54,279 --> 00:25:00,428
need to say if the chunk index is the

581
00:24:57,880 --> 00:25:03,760
last chunk so basically if chunking if

582
00:25:00,429 --> 00:25:07,210
chunk index plus 1 would be the chunk

583
00:25:03,759 --> 00:25:10,210
count like we're at the end right then

584
00:25:07,210 --> 00:25:12,490
I'm going to write out a 0 I'm sorry a 1

585
00:25:10,210 --> 00:25:14,350
because that's final otherwise I'm going

586
00:25:12,490 --> 00:25:16,929
to write out a 0 because we got more

587
00:25:14,349 --> 00:25:18,839
chunks coming so we need to set B final

588
00:25:16,929 --> 00:25:20,259
conditionally then we can write it out

589
00:25:18,839 --> 00:25:25,230
all right

590
00:25:20,259 --> 00:25:28,619
so at that point I think ooh this is

591
00:25:25,230 --> 00:25:28,620
what is this

592
00:25:34,880 --> 00:25:52,740
wait a second why is our Adler 32

593
00:25:43,679 --> 00:26:02,370
checksum at the end of the end Lin is

594
00:25:52,740 --> 00:26:04,579
that right that has to be wrong doesn't

595
00:26:02,369 --> 00:26:04,579
it

596
00:26:04,890 --> 00:26:12,750
is the Adler through checksum on every

597
00:26:08,339 --> 00:26:14,759
single one of these for some reason I

598
00:26:12,750 --> 00:26:20,690
thought the Adler 32 checksum was only

599
00:26:14,759 --> 00:26:20,690
at the end all right back to this back

600
00:26:28,849 --> 00:26:33,138
so where does this go

601
00:26:49,200 --> 00:26:59,019
at sexual value of the uncompressed data

602
00:26:55,230 --> 00:27:02,669
excluding any dictionary data computed

603
00:26:59,019 --> 00:27:02,669
according to adler 32

604
00:27:15,119 --> 00:27:20,789
so I don't really know where that's

605
00:27:17,890 --> 00:27:20,790
supposed to go

606
00:27:32,710 --> 00:27:38,779
because it says it's the checksum of the

607
00:27:35,119 --> 00:27:45,579
uncompressed data so if that sounds to

608
00:27:38,779 --> 00:27:52,339
me like we would need to sort of roll it

609
00:27:45,579 --> 00:27:54,649
meaning we need to sort of keep the

610
00:27:52,339 --> 00:27:58,369
Adler running but we need to keep it

611
00:27:54,650 --> 00:28:01,400
running in here so I think that makes it

612
00:27:58,369 --> 00:28:04,250
makes us need to do this a little bit

613
00:28:01,400 --> 00:28:08,360
differently we kind of cheese doubt on

614
00:28:04,250 --> 00:28:10,339
this right because we we sort of had a

615
00:28:08,359 --> 00:28:12,829
way to sort of cheat because we were

616
00:28:10,339 --> 00:28:14,929
writing it all out in one that's not

617
00:28:12,829 --> 00:28:17,869
gonna work anymore so I think we need to

618
00:28:14,930 --> 00:28:21,259
roll that Adler checksum into what we're

619
00:28:17,869 --> 00:28:26,209
actually writing your and I'm saying so

620
00:28:21,259 --> 00:28:30,099
I think what we want to do there is have

621
00:28:26,210 --> 00:28:33,710
a way to just push the adler checksums

622
00:28:30,099 --> 00:28:34,189
ourselves i think that's definitely the

623
00:28:33,710 --> 00:28:37,640
case

624
00:28:34,190 --> 00:28:40,880
so this way of doing the Adler not gonna

625
00:28:37,640 --> 00:28:42,259
work so we're gonna ignore that part for

626
00:28:40,880 --> 00:28:46,190
now and I'm gonna come back to that in a

627
00:28:42,259 --> 00:28:48,319
second again that also kind of argues

628
00:28:46,190 --> 00:28:50,900
for us doing the the temporary buffer

629
00:28:48,319 --> 00:28:53,329
copy is annoying as it is just because

630
00:28:50,900 --> 00:28:54,769
that would allow us to just do the Adler

631
00:28:53,329 --> 00:28:58,339
on the whole block and we don't have to

632
00:28:54,769 --> 00:29:03,319
like piece mail out the Adler correctly

633
00:28:58,339 --> 00:29:04,970
or whatever so yeah but anyway so let's

634
00:29:03,319 --> 00:29:07,279
take a look at what we're doing here as

635
00:29:04,970 --> 00:29:08,870
we write this out I'm ignoring the Adler

636
00:29:07,279 --> 00:29:10,339
part of things cuz that's just not gonna

637
00:29:08,869 --> 00:29:12,379
happen so that's that's out of here

638
00:29:10,339 --> 00:29:16,639
we'll solve that in another way in a

639
00:29:12,380 --> 00:29:20,360
second looking here at the B final type

640
00:29:16,640 --> 00:29:23,690
out struck copy inland and I write this

641
00:29:20,359 --> 00:29:27,289
is not gonna fly anymore the Y height

642
00:29:23,690 --> 00:29:28,850
sort of stuff because we can't loop over

643
00:29:27,289 --> 00:29:31,009
anything predictable here we've got to

644
00:29:28,849 --> 00:29:34,819
pull chunks out of the image as we go

645
00:29:31,009 --> 00:29:37,759
based on however much the size remaining

646
00:29:34,819 --> 00:29:41,509
we have left right so what we need to do

647
00:29:37,759 --> 00:29:42,650
is keep the Y value and the x value as

648
00:29:41,509 --> 00:29:46,150
sort of running

649
00:29:42,650 --> 00:29:51,050
values that we kind of you know continue

650
00:29:46,150 --> 00:29:53,960
to process as we go so if I grab the Y

651
00:29:51,049 --> 00:29:55,240
out here and say we're gonna start at at

652
00:29:53,960 --> 00:29:58,160
this X&amp;Y

653
00:29:55,240 --> 00:30:00,799
right that's sort of where we're

654
00:29:58,160 --> 00:30:03,920
processing this then as I come through

655
00:30:00,799 --> 00:30:08,930
here I can pull out the pixels at that

656
00:30:03,920 --> 00:30:14,029
particular location and at you know push

657
00:30:08,930 --> 00:30:17,120
as many on as I can as we go now we have

658
00:30:14,029 --> 00:30:20,299
a problem here which is that the X of 0

659
00:30:17,119 --> 00:30:22,759
and y 0 this is not really quite going

660
00:30:20,299 --> 00:30:25,460
to work because we sort of need to be

661
00:30:22,759 --> 00:30:27,829
able to specify that we're on the about

662
00:30:25,460 --> 00:30:31,340
the actual like for lack of a term

663
00:30:27,829 --> 00:30:33,619
negative 1 so we could there's two ways

664
00:30:31,339 --> 00:30:35,689
we could do that one is we could say x

665
00:30:33,619 --> 00:30:40,069
equals 0 is where we write out the

666
00:30:35,690 --> 00:30:42,920
filter the other is that we say that the

667
00:30:40,069 --> 00:30:44,629
x equals negative 1 is the point where

668
00:30:42,920 --> 00:30:46,640
we write out the filter and I don't know

669
00:30:44,630 --> 00:30:49,610
which of those we want to do but

670
00:30:46,640 --> 00:30:53,690
probably best to keep it all in you 32

671
00:30:49,609 --> 00:30:56,059
maybe let's say and so what I would

672
00:30:53,690 --> 00:30:59,059
probably say is okay as we write this

673
00:30:56,059 --> 00:31:01,009
thing we look to see you know we're

674
00:30:59,059 --> 00:31:03,319
gonna we're gonna do some kind of a loop

675
00:31:01,009 --> 00:31:05,180
here I guess we probably do a while loop

676
00:31:03,319 --> 00:31:06,439
on the length remaining so we're

677
00:31:05,180 --> 00:31:14,539
probably gonna do something like this

678
00:31:06,440 --> 00:31:16,370
right yeah before I can do a while loop

679
00:31:14,539 --> 00:31:18,289
on the line' there oh and also as we go

680
00:31:16,369 --> 00:31:20,209
here this length remaining when we're

681
00:31:18,289 --> 00:31:24,170
done with it we need to say all right

682
00:31:20,210 --> 00:31:26,059
we've we've processed that much all

683
00:31:24,170 --> 00:31:27,140
right so we're gonna do a while loop on

684
00:31:26,059 --> 00:31:28,819
the line' here and we're basically gonna

685
00:31:27,140 --> 00:31:31,940
say look we're gonna keep writing until

686
00:31:28,819 --> 00:31:35,299
the line' is gone so what i want to do

687
00:31:31,940 --> 00:31:37,490
is again not sure exactly how to write

688
00:31:35,299 --> 00:31:39,799
this code well but we'll see if the x

689
00:31:37,490 --> 00:31:42,250
equals zero then i'm going to need to do

690
00:31:39,799 --> 00:31:46,369
an out strut copy on the single byte

691
00:31:42,250 --> 00:31:50,630
that's just the no filter byte right so

692
00:31:46,369 --> 00:31:52,669
I've got a no filter here I need to

693
00:31:50,630 --> 00:31:56,028
write that out and so I'm going to write

694
00:31:52,670 --> 00:31:58,429
that out like so I that's

695
00:31:56,028 --> 00:32:01,669
only if x equals zero right and then

696
00:31:58,429 --> 00:32:03,349
we're gonna move x1 forward otherwise if

697
00:32:01,669 --> 00:32:06,590
X is not equal to zero then we're gonna

698
00:32:03,348 --> 00:32:09,739
try to write some amount of the row

699
00:32:06,589 --> 00:32:12,858
however much there is left in the row

700
00:32:09,739 --> 00:32:14,419
we're gonna write that much out or if we

701
00:32:12,858 --> 00:32:16,098
can only write on a portion because we

702
00:32:14,419 --> 00:32:17,929
don't have enough left in the current

703
00:32:16,098 --> 00:32:22,519
chunk you know we'll deal with that

704
00:32:17,929 --> 00:32:24,349
right okay so this is how much we're

705
00:32:22,519 --> 00:32:26,929
allowed to write out we've written out

706
00:32:24,348 --> 00:32:28,608
one of those here so now we can you know

707
00:32:26,929 --> 00:32:31,788
we can essentially do that reduce the

708
00:32:28,608 --> 00:32:33,408
length by one move the X by one if we're

709
00:32:31,788 --> 00:32:35,989
not in here then that means we can write

710
00:32:33,409 --> 00:32:43,278
out an actual row now this is also where

711
00:32:35,989 --> 00:32:45,308
we would push the adler so like we would

712
00:32:43,278 --> 00:32:50,858
need to do something like this

713
00:32:45,308 --> 00:32:50,858
right and we have some kind of a like

714
00:32:51,729 --> 00:32:56,838
right something's gonna happen here so

715
00:32:54,858 --> 00:32:58,908
we need to append that one byte that

716
00:32:56,838 --> 00:33:00,999
we've got and maybe it looks like that

717
00:32:58,909 --> 00:33:04,700
like here's the one byte

718
00:33:00,999 --> 00:33:07,669
no I'm saying so we need to do that and

719
00:33:04,700 --> 00:33:09,798
then we also need to do a I guess what

720
00:33:07,669 --> 00:33:12,889
do we have what do what do we call the

721
00:33:09,798 --> 00:33:18,858
stream out it's what is it it's not out

722
00:33:12,888 --> 00:33:22,908
struct is it just like out sighs yeah so

723
00:33:18,858 --> 00:33:25,128
we can do an out copy to do this and we

724
00:33:22,909 --> 00:33:27,950
would do and add their 32 append of the

725
00:33:25,128 --> 00:33:30,348
same thing right so we're going to have

726
00:33:27,950 --> 00:33:34,399
like some length that we're gonna do

727
00:33:30,348 --> 00:33:37,098
here like a roll in and a row pointer

728
00:33:34,398 --> 00:33:42,138
right and then we're gonna do an out

729
00:33:37,098 --> 00:33:45,979
copy here of the same data something

730
00:33:42,138 --> 00:33:47,778
like that and we have to compute what

731
00:33:45,979 --> 00:33:49,969
those are but we're gonna want to do an

732
00:33:47,778 --> 00:33:52,128
out copy to the stream and then an

733
00:33:49,969 --> 00:33:54,798
append of the adler checksum then at the

734
00:33:52,128 --> 00:33:57,019
very end we're gonna want to do an adler

735
00:33:54,798 --> 00:33:59,329
32 to like produce that value we're

736
00:33:57,019 --> 00:34:01,278
gonna want to do an end on some

737
00:33:59,329 --> 00:34:02,689
intermediate struck so do you see what

738
00:34:01,278 --> 00:34:05,118
i'm saying about how we had to redo that

739
00:34:02,690 --> 00:34:07,879
because you can see we're pushing pieces

740
00:34:05,118 --> 00:34:09,190
in we can't use the old trick of just

741
00:34:07,878 --> 00:34:11,648
take this range of

742
00:34:09,190 --> 00:34:14,858
in the output stream because we can't

743
00:34:11,648 --> 00:34:17,259
actually there is no continuous range

744
00:34:14,858 --> 00:34:19,480
it's the uncompressed part that's

745
00:34:17,260 --> 00:34:21,549
getting checked summed so it doesn't

746
00:34:19,480 --> 00:34:23,980
include things like the B final type the

747
00:34:21,548 --> 00:34:25,898
end line in the Len it's just the parts

748
00:34:23,980 --> 00:34:27,639
that actually contain the pixel bits and

749
00:34:25,898 --> 00:34:30,219
that no filter bit that's just because

750
00:34:27,639 --> 00:34:31,929
of the way they picked out the way they

751
00:34:30,219 --> 00:34:34,509
were going to use the z lib part in PNG

752
00:34:31,929 --> 00:34:36,398
right so that's just something we have

753
00:34:34,510 --> 00:34:36,819
to do it's not pretty but we'll live

754
00:34:36,398 --> 00:34:39,699
with it

755
00:34:36,818 --> 00:34:41,440
so once we've got that then we know we

756
00:34:39,699 --> 00:34:44,439
can also do this here where we've got

757
00:34:41,440 --> 00:34:45,878
okay x plus equals the Roland the length

758
00:34:44,440 --> 00:34:47,918
is minus equal to Roland

759
00:34:45,878 --> 00:34:54,279
keep these symmetric we could also do

760
00:34:47,918 --> 00:34:56,529
this right so that's you know another

761
00:34:54,280 --> 00:34:59,380
way to make sure that part is is a

762
00:34:56,530 --> 00:35:01,329
little bit more symmetric so we'll leave

763
00:34:59,380 --> 00:35:05,289
it like that

764
00:35:01,329 --> 00:35:10,990
we couldn't even do it a little bit more

765
00:35:05,289 --> 00:35:12,730
like this if we wanted to something to

766
00:35:10,989 --> 00:35:18,028
think about we could say all right

767
00:35:12,730 --> 00:35:25,240
there's a rollin there's a row pointer

768
00:35:18,028 --> 00:35:26,889
and and that's all we would really need

769
00:35:25,239 --> 00:35:28,000
right and so then when we come through

770
00:35:26,889 --> 00:35:30,940
something like this

771
00:35:28,000 --> 00:35:33,969
we can say oh the Roland here is one the

772
00:35:30,940 --> 00:35:36,880
RO is the address of no filter right

773
00:35:33,969 --> 00:35:39,578
which is just some value we'll leave up

774
00:35:36,880 --> 00:35:40,838
here I guess I don't even need to leave

775
00:35:39,579 --> 00:35:42,460
it up there and can put it right here

776
00:35:40,838 --> 00:35:44,858
just needs to still be around but when

777
00:35:42,460 --> 00:35:47,889
we go to write it and then we don't

778
00:35:44,858 --> 00:35:49,598
actually have to do this right so we can

779
00:35:47,889 --> 00:35:51,219
basically say look we're gonna write out

780
00:35:49,599 --> 00:35:54,460
something each time through this loop

781
00:35:51,219 --> 00:35:56,439
and that something will be given by this

782
00:35:54,460 --> 00:35:57,880
size and point at you by this in the

783
00:35:56,440 --> 00:36:00,190
case where we're just writing out that

784
00:35:57,880 --> 00:36:02,019
zero byte we can do it like this in the

785
00:36:00,190 --> 00:36:04,358
other case now we just need to figure

786
00:36:02,019 --> 00:36:08,170
out what are we actually doing here

787
00:36:04,358 --> 00:36:11,469
right and then we know that will do that

788
00:36:08,170 --> 00:36:13,869
advance so I think that's all fine and

789
00:36:11,469 --> 00:36:16,480
furthermore when we actually do this

790
00:36:13,869 --> 00:36:19,210
part we should also be able to do okay

791
00:36:16,480 --> 00:36:21,818
if x equals the wrap amount then we can

792
00:36:19,210 --> 00:36:22,389
do something like that so we can include

793
00:36:21,818 --> 00:36:24,518
the

794
00:36:22,389 --> 00:36:26,650
app checking here where we can say oh

795
00:36:24,518 --> 00:36:28,868
alright if you were going to overflow

796
00:36:26,650 --> 00:36:31,150
you know if you were going to move on to

797
00:36:28,869 --> 00:36:32,380
the next line by doing that and the way

798
00:36:31,150 --> 00:36:34,150
we would do that is say well whatever

799
00:36:32,380 --> 00:36:39,849
the width plus one is well that gives us

800
00:36:34,150 --> 00:36:42,639
our X right now the other thing I would

801
00:36:39,849 --> 00:36:47,170
say here is X is probably not a good

802
00:36:42,639 --> 00:36:48,848
term so I might call this B instead the

803
00:36:47,170 --> 00:36:50,710
reason for that is just because X

804
00:36:48,849 --> 00:36:53,470
implies that it was actually a pixel

805
00:36:50,710 --> 00:36:57,309
it's not it's just a bite we don't care

806
00:36:53,469 --> 00:36:59,709
about pixels in this loop at all we're

807
00:36:57,309 --> 00:37:02,680
just thinking of roses bytes the only

808
00:36:59,710 --> 00:37:04,900
reason we care about rows at all or the

809
00:37:02,679 --> 00:37:08,018
Y value is because we have to every row

810
00:37:04,900 --> 00:37:14,500
insert that zero to tell it to shut off

811
00:37:08,018 --> 00:37:19,778
the filter right yeah I wouldn't have

812
00:37:14,500 --> 00:37:23,318
done the PNG spec that way just as an

813
00:37:19,778 --> 00:37:24,849
aside a lot of things dumb about the PNG

814
00:37:23,318 --> 00:37:26,619
spec but this one's particularly done

815
00:37:24,849 --> 00:37:28,390
the reason is particularly dumb is if

816
00:37:26,619 --> 00:37:29,829
you don't want any filtering what you

817
00:37:28,389 --> 00:37:31,509
would rather do is just have two bites

818
00:37:29,829 --> 00:37:33,880
that you insert every time you have a

819
00:37:31,509 --> 00:37:36,579
set of rows and the bite is just how

820
00:37:33,880 --> 00:37:38,259
many rows you want to specify the filter

821
00:37:36,579 --> 00:37:40,509
for and then what the filter is so you

822
00:37:38,259 --> 00:37:42,789
just say like two v60 or something

823
00:37:40,509 --> 00:37:45,369
or two d50 as the maximum you could

824
00:37:42,789 --> 00:37:48,160
specify and then every 256 rows you just

825
00:37:45,369 --> 00:37:50,858
write that again the reason I say that

826
00:37:48,159 --> 00:37:54,068
is because it's really unusual to change

827
00:37:50,858 --> 00:37:56,500
the filter every single line most pngs

828
00:37:54,068 --> 00:37:59,619
just use like one or two filters for the

829
00:37:56,500 --> 00:38:02,139
whole thing or even just one filter for

830
00:37:59,619 --> 00:38:03,849
the whole thing and so you either want

831
00:38:02,139 --> 00:38:05,588
to turn the filter off entirely or trim

832
00:38:03,849 --> 00:38:07,509
to a specific value most of the time or

833
00:38:05,588 --> 00:38:09,038
like for different blocks of lines would

834
00:38:07,509 --> 00:38:11,679
you put the chances that you change it

835
00:38:09,039 --> 00:38:13,778
every line are probably pretty low and

836
00:38:11,679 --> 00:38:17,649
now you end up inserting all this stuff

837
00:38:13,778 --> 00:38:19,690
and just makes it weirder another corner

838
00:38:17,650 --> 00:38:21,190
there but doesn't matter if PNG is not a

839
00:38:19,690 --> 00:38:23,108
very good compression format anyway so I

840
00:38:21,190 --> 00:38:24,220
don't know why I'm pointing out that but

841
00:38:23,108 --> 00:38:26,489
that part's probably meaningless what I

842
00:38:24,219 --> 00:38:26,489
just said

843
00:38:28,469 --> 00:38:37,328
nobody cares anyway so if we go back in

844
00:38:32,528 --> 00:38:39,548
here let's just take a look at this so

845
00:38:37,329 --> 00:38:41,740
we know we need to reset the the B every

846
00:38:39,548 --> 00:38:44,559
time we hit the end of the of the cap

847
00:38:41,739 --> 00:38:46,868
the end of the row here so I'll leave

848
00:38:44,559 --> 00:38:48,789
that in there that seems fair so all I

849
00:38:46,869 --> 00:38:51,278
really need to do now is figure out how

850
00:38:48,789 --> 00:38:54,160
big I'm gonna write out one of these

851
00:38:51,278 --> 00:38:58,568
role ends here and in order to do that

852
00:38:54,159 --> 00:38:59,618
what I would need to do is and honestly

853
00:38:58,568 --> 00:39:01,358
you know what I could I could make this

854
00:38:59,619 --> 00:39:02,950
even a little bit simpler what if I just

855
00:39:01,358 --> 00:39:04,538
did it like this it's not really simpler

856
00:39:02,949 --> 00:39:06,939
in terms of what's actually we've

857
00:39:04,539 --> 00:39:08,410
generated just in terms of reading it um

858
00:39:06,940 --> 00:39:10,059
we could just assume that we're running

859
00:39:08,409 --> 00:39:14,199
out no filter and then we'll just say

860
00:39:10,059 --> 00:39:18,940
look if we're not then we do something

861
00:39:14,199 --> 00:39:22,509
there we go so to figure out how long a

862
00:39:18,940 --> 00:39:25,720
row is well this is the longest a row

863
00:39:22,509 --> 00:39:27,699
could be right actually sorry this is

864
00:39:25,719 --> 00:39:29,139
the longest a row could be because we

865
00:39:27,699 --> 00:39:31,259
don't include that that plus one there

866
00:39:29,139 --> 00:39:33,788
that's that's happening in here right

867
00:39:31,259 --> 00:39:35,469
that's the longest a row could be so

868
00:39:33,789 --> 00:39:38,170
that's the longest we could write out

869
00:39:35,469 --> 00:39:41,679
but of course the B value that's in

870
00:39:38,170 --> 00:39:43,329
there is going to take away from the

871
00:39:41,679 --> 00:39:46,719
maximum we could write out for the

872
00:39:43,329 --> 00:39:47,980
particular row that we're on right so we

873
00:39:46,719 --> 00:39:50,018
effectively need to do something where

874
00:39:47,980 --> 00:39:51,909
we say look let's subtract away the B

875
00:39:50,018 --> 00:39:53,739
value but of course the B value is off

876
00:39:51,909 --> 00:39:55,960
by one because the zero we're not

877
00:39:53,739 --> 00:39:57,548
including in these particular rows so

878
00:39:55,960 --> 00:40:00,309
what we need to do here is say oh yeah

879
00:39:57,548 --> 00:40:02,440
well whatever the B value is that you

880
00:40:00,309 --> 00:40:03,940
know we +1 to get ourselves to the max

881
00:40:02,440 --> 00:40:06,099
when we do then we put the B in there

882
00:40:03,940 --> 00:40:08,380
subtract that off that'll remove this

883
00:40:06,099 --> 00:40:10,630
one and however many bytes we've written

884
00:40:08,380 --> 00:40:12,670
in this row so far that gives us back

885
00:40:10,630 --> 00:40:17,858
the correct role and then finally the

886
00:40:12,670 --> 00:40:20,079
row here Jimmy it's just gonna be based

887
00:40:17,858 --> 00:40:21,818
on whatever the Y value currently is

888
00:40:20,079 --> 00:40:24,190
right so we know because we know we've

889
00:40:21,818 --> 00:40:26,318
got the pixel values that came in here

890
00:40:24,190 --> 00:40:28,659
right so we know we've got these so the

891
00:40:26,318 --> 00:40:33,460
pixel values again is just going to be

892
00:40:28,659 --> 00:40:35,858
okay let's take the pixels plus y times

893
00:40:33,460 --> 00:40:39,639
width that'll get us to where we need to

894
00:40:35,858 --> 00:40:41,590
be to offset by the B value once we're

895
00:40:39,639 --> 00:40:43,690
at that location

896
00:40:41,590 --> 00:40:46,150
to add however far we are into the

897
00:40:43,690 --> 00:40:52,659
stream but again it's also offset by one

898
00:40:46,150 --> 00:40:55,660
right I think that's all we really need

899
00:40:52,659 --> 00:40:57,609
to do to write out a full row the only

900
00:40:55,659 --> 00:40:59,649
difference now is remember we can't

901
00:40:57,610 --> 00:41:03,970
always write out a full row because we

902
00:40:59,650 --> 00:41:04,599
may have not enough Len left to write

903
00:41:03,969 --> 00:41:07,779
that out

904
00:41:04,599 --> 00:41:10,119
so if rollin is greater than Len we need

905
00:41:07,780 --> 00:41:14,230
to clamp that down to be Len

906
00:41:10,119 --> 00:41:23,789
otherwise we're fine I think that's

907
00:41:14,230 --> 00:41:23,789
roughly what we need makes sense

908
00:41:24,340 --> 00:41:29,590
now I don't know if we want these Adler

909
00:41:26,590 --> 00:41:32,350
32 nonsenses to be happening in multiple

910
00:41:29,590 --> 00:41:39,120
places so I don't really know how we

911
00:41:32,349 --> 00:41:39,119
want to do the Adler 32 part of things I

912
00:41:43,469 --> 00:41:50,859
might suggest to the suggestible

913
00:41:47,230 --> 00:41:54,849
listener that we do something more along

914
00:41:50,860 --> 00:41:57,849
the lines of like put throw this into

915
00:41:54,849 --> 00:42:02,259
the hash stuff just because I don't know

916
00:41:57,849 --> 00:42:05,289
we can and say when we're doing like

917
00:42:02,260 --> 00:42:09,760
hashing nonsense there's also this disc

918
00:42:05,289 --> 00:42:13,929
wrap here and so we would have something

919
00:42:09,760 --> 00:42:18,010
like alright there's an adler 32 you can

920
00:42:13,929 --> 00:42:21,190
say begin adler 32 and it will like

921
00:42:18,010 --> 00:42:25,330
start you off with those values you can

922
00:42:21,190 --> 00:42:27,570
then say adler 32 append and that will

923
00:42:25,329 --> 00:42:32,380
allow you to push some number of things

924
00:42:27,570 --> 00:42:34,900
on there like so and then you can say

925
00:42:32,380 --> 00:42:38,440
add and I would start end and it will

926
00:42:34,900 --> 00:42:41,320
like you know pop out the final value so

927
00:42:38,440 --> 00:42:48,309
we already have the code we need for

928
00:42:41,320 --> 00:42:58,960
this looks like this and then

929
00:42:48,309 --> 00:43:00,670
I think we're pretty good now whether we

930
00:42:58,960 --> 00:43:03,608
not want this thing to be nd and then

931
00:43:00,670 --> 00:43:05,650
swapped or not is hard to say because I

932
00:43:03,608 --> 00:43:15,639
don't know if Adler thirty two builds

933
00:43:05,650 --> 00:43:18,940
that in or not I'm guessing that it

934
00:43:15,639 --> 00:43:21,969
shouldn't be so like my thinking is that

935
00:43:18,940 --> 00:43:24,639
this should actually not be there and

936
00:43:21,969 --> 00:43:27,129
then what should happen is in here when

937
00:43:24,639 --> 00:43:29,529
we do this this is the people who

938
00:43:27,130 --> 00:43:33,119
actually are doing that cuz Adler 32

939
00:43:29,530 --> 00:43:35,470
probably isn't specified in nd in this

940
00:43:33,119 --> 00:43:38,140
I'm not even going to bother to look cuz

941
00:43:35,469 --> 00:43:39,279
I really do not care but I think that's

942
00:43:38,139 --> 00:43:41,170
the way it should be because I'm I'm

943
00:43:39,280 --> 00:43:43,810
assuming that's the ping spec that's

944
00:43:41,170 --> 00:43:48,430
saying write it out this way and not

945
00:43:43,809 --> 00:43:51,759
some part of Adler 32 itself that

946
00:43:48,429 --> 00:43:56,440
literally mandates you must do it this

947
00:43:51,760 --> 00:44:03,220
way right that's my assumption anyway so

948
00:43:56,440 --> 00:44:04,329
I think we just want to do this where we

949
00:44:03,219 --> 00:44:06,579
say all right

950
00:44:04,329 --> 00:44:17,679
here's how you you know add stuff into

951
00:44:06,579 --> 00:44:19,598
this thing right and off we go make that

952
00:44:17,679 --> 00:44:22,239
a little more explicably

953
00:44:19,599 --> 00:44:23,800
I think that's all we really need and

954
00:44:22,239 --> 00:44:26,379
then that way we can just say all right

955
00:44:23,800 --> 00:44:31,470
those Adler 32 values there that are

956
00:44:26,380 --> 00:44:33,910
that we were computing I think those

957
00:44:31,469 --> 00:44:35,529
wait what did we want those to be those

958
00:44:33,909 --> 00:44:37,480
have to be computed in 32-bit space

959
00:44:35,530 --> 00:44:40,450
right pretty sure that's actually the

960
00:44:37,480 --> 00:44:43,000
case yeah right because we we have to do

961
00:44:40,449 --> 00:44:47,379
the mod ourselves for six hours ago so

962
00:44:43,000 --> 00:44:50,019
we want to be able to do this I think so

963
00:44:47,380 --> 00:44:52,210
we if we kind of chalk that up in there

964
00:44:50,019 --> 00:44:55,809
is there oh that's that was the age file

965
00:44:52,210 --> 00:44:58,690
my goodness all right well it's one heck

966
00:44:55,809 --> 00:45:00,909
of an h-file I'll guess I'll shove that

967
00:44:58,690 --> 00:45:02,659
up at the top in case we ever want to

968
00:45:00,909 --> 00:45:08,868
break that out

969
00:45:02,659 --> 00:45:12,500
okay so that's about it I'm gonna go

970
00:45:08,869 --> 00:45:19,340
ahead and just break these out here so

971
00:45:12,500 --> 00:45:21,019
they're a little bit easier to see also

972
00:45:19,340 --> 00:45:22,789
if we wanted to we can store that it's

973
00:45:21,019 --> 00:45:24,320
two sixteen bits because if you look at

974
00:45:22,789 --> 00:45:26,630
what happens here they don't actually

975
00:45:24,320 --> 00:45:29,170
need to be 32 bits anymore because you

976
00:45:26,630 --> 00:45:32,539
know you're only actually using them as

977
00:45:29,170 --> 00:45:34,430
16-bit values for storage because if you

978
00:45:32,539 --> 00:45:37,279
know if the only thing these can be is

979
00:45:34,429 --> 00:45:39,500
mod 6 by 5 to 1 they can never be larger

980
00:45:37,280 --> 00:45:41,450
than 16 bits I'm not going to bother cuz

981
00:45:39,500 --> 00:45:43,639
who cares but it's just worth noting you

982
00:45:41,449 --> 00:45:45,079
know just as a thing to look at all

983
00:45:43,639 --> 00:45:47,210
right so now if we want to actually use

984
00:45:45,079 --> 00:45:49,730
this code what I would say is all right

985
00:45:47,210 --> 00:45:52,220
first when we start at the outset of the

986
00:45:49,730 --> 00:45:56,630
chunk writing we're gonna want to do

987
00:45:52,219 --> 00:46:00,679
that adler 32 here i'm gonna want to

988
00:45:56,630 --> 00:46:03,019
create my start right like so and i

989
00:46:00,679 --> 00:46:04,848
guess we'll just think that's what I

990
00:46:03,019 --> 00:46:06,380
call it everywhere then we come through

991
00:46:04,849 --> 00:46:08,740
here are all of our pins work that way

992
00:46:06,380 --> 00:46:12,740
and then finally at the end we end right

993
00:46:08,739 --> 00:46:15,409
and then it looks like the role ends

994
00:46:12,739 --> 00:46:18,500
subtract here because this is Len is 16

995
00:46:15,409 --> 00:46:22,098
right this subtraction

996
00:46:18,500 --> 00:46:24,829
needs to also be only 16 since I this is

997
00:46:22,099 --> 00:46:26,450
always clipped to be no longer than this

998
00:46:24,829 --> 00:46:29,900
that should never be a problem but just

999
00:46:26,449 --> 00:46:32,689
pointing it out so that's a sketch of

1000
00:46:29,900 --> 00:46:35,539
the routine it turned out to not be that

1001
00:46:32,690 --> 00:46:37,309
bad there might be some like bugs

1002
00:46:35,539 --> 00:46:39,050
working in here so we'll try to work

1003
00:46:37,309 --> 00:46:41,809
those out in a second here but this

1004
00:46:39,050 --> 00:46:44,440
isn't so bad that I wanted to fall back

1005
00:46:41,809 --> 00:46:50,259
to just creating the temporary buffer so

1006
00:46:44,440 --> 00:46:50,260
let's just not just seems better not to

1007
00:46:54,130 --> 00:46:59,869
these are also already putting things

1008
00:46:56,809 --> 00:47:01,940
into a stream which is already wasteful

1009
00:46:59,869 --> 00:47:04,369
so it's like why compile compound the

1010
00:47:01,940 --> 00:47:06,039
waste I guess

1011
00:47:04,369 --> 00:47:07,969
might be one way to think about it

1012
00:47:06,039 --> 00:47:11,300
anyway

1013
00:47:07,969 --> 00:47:13,309
we could have a by the way for like this

1014
00:47:11,300 --> 00:47:16,789
right here we could just have this be

1015
00:47:13,309 --> 00:47:24,559
like an out append because we don't

1016
00:47:16,789 --> 00:47:27,769
actually need to copy so in fact let's

1017
00:47:24,559 --> 00:47:30,170
just do that this out copy doesn't need

1018
00:47:27,769 --> 00:47:31,759
to be an out copy the reason for that is

1019
00:47:30,170 --> 00:47:33,619
because it's in a buffer that will

1020
00:47:31,760 --> 00:47:37,190
remain until after we already write the

1021
00:47:33,619 --> 00:47:40,099
stream I think I mean I don't know I'm

1022
00:47:37,190 --> 00:47:51,980
just leave the copy room now but it's we

1023
00:47:40,099 --> 00:47:54,259
don't really need to write so it's worth

1024
00:47:51,980 --> 00:47:56,780
noting we could do that if we were in a

1025
00:47:54,260 --> 00:47:58,490
speed scenario later on we don't

1026
00:47:56,780 --> 00:48:00,230
actually you know we could just append

1027
00:47:58,489 --> 00:48:02,719
that and then let it write it out that

1028
00:48:00,230 --> 00:48:05,210
way all right so what we want to do now

1029
00:48:02,719 --> 00:48:06,769
is we want to debug this probably we

1030
00:48:05,210 --> 00:48:08,960
don't really wanted to bug it this way

1031
00:48:06,769 --> 00:48:10,250
cuz like crashes and stuff right they're

1032
00:48:08,960 --> 00:48:11,990
just gonna it's just gonna roll over and

1033
00:48:10,250 --> 00:48:13,610
die or do something in fact it looks

1034
00:48:11,989 --> 00:48:15,500
like it's it's stuck in one of our loops

1035
00:48:13,610 --> 00:48:16,700
there right so you want to do is open up

1036
00:48:15,500 --> 00:48:20,300
the debugger for this so that's what I'm

1037
00:48:16,699 --> 00:48:22,460
gonna do and I want to keep this command

1038
00:48:20,300 --> 00:48:24,380
line because we want to be debugging one

1039
00:48:22,460 --> 00:48:27,199
that's big so that it'll hit all the

1040
00:48:24,380 --> 00:48:27,349
cases we're trying to get I'm gonna load

1041
00:48:27,199 --> 00:48:31,429
up

1042
00:48:27,349 --> 00:48:33,559
h/h font here but again this needs to be

1043
00:48:31,429 --> 00:48:37,089
changed it needs to be changed to this

1044
00:48:33,559 --> 00:48:41,179
new line here that's gonna be like a big

1045
00:48:37,090 --> 00:48:44,630
big font here we go

1046
00:48:41,179 --> 00:48:47,989
so that should be good all right save

1047
00:48:44,630 --> 00:48:51,320
that off and so now in fact I can even

1048
00:48:47,989 --> 00:48:55,699
just stop and break this into wherever

1049
00:48:51,320 --> 00:48:57,769
we're we're we're stopping here so

1050
00:48:55,699 --> 00:49:00,489
here's some the append chante code

1051
00:48:57,769 --> 00:49:03,829
let's see ups behind my head there but

1052
00:49:00,489 --> 00:49:06,759
our Adler append out copies so what's

1053
00:49:03,829 --> 00:49:06,759
our role in here

1054
00:49:06,969 --> 00:49:13,419
is zero all right well that would do it

1055
00:49:16,838 --> 00:49:35,568
what's our be vet whoa so we got him off

1056
00:49:30,889 --> 00:49:38,118
by one in here it looks like we came in

1057
00:49:35,568 --> 00:49:39,710
here at some point presumably because

1058
00:49:38,119 --> 00:49:41,180
you know we would have done the one

1059
00:49:39,710 --> 00:49:45,440
first thing we would have done is just

1060
00:49:41,179 --> 00:49:46,788
rode out one zero with the no filter we

1061
00:49:45,440 --> 00:49:48,440
would have advanced by one and

1062
00:49:46,789 --> 00:49:50,180
subtracted the length by one this

1063
00:49:48,440 --> 00:49:53,119
wouldn't have fired we would come back

1064
00:49:50,179 --> 00:49:54,798
in here we would say if B is greater

1065
00:49:53,119 --> 00:49:58,460
than zero then compute the role in by

1066
00:49:54,798 --> 00:50:00,230
saying four times the width plus one -

1067
00:49:58,460 --> 00:50:01,519
however far we went which was just one

1068
00:50:00,230 --> 00:50:04,579
so would just be four times the width

1069
00:50:01,519 --> 00:50:06,409
was our role in it wouldn't have maxed

1070
00:50:04,579 --> 00:50:08,900
that out so we would have written this

1071
00:50:06,409 --> 00:50:13,009
out and so we would have added four

1072
00:50:08,900 --> 00:50:21,289
times the width to B that's the problem

1073
00:50:13,010 --> 00:50:24,740
right so I think what I want to do is

1074
00:50:21,289 --> 00:50:31,039
just pre compute that value total rollin

1075
00:50:24,739 --> 00:50:36,558
here because we're using that twice we

1076
00:50:31,039 --> 00:50:39,160
might as well as compute it once and

1077
00:50:36,559 --> 00:50:40,579
that gets rid of that hopefully that bug

1078
00:50:39,159 --> 00:50:43,578
there we go

1079
00:50:40,579 --> 00:50:46,068
all right let's run it again all right

1080
00:50:43,579 --> 00:50:49,039
so that time it completed which means we

1081
00:50:46,068 --> 00:50:51,230
fixed that sort of Miss computation

1082
00:50:49,039 --> 00:50:53,299
there but we don't actually know if it

1083
00:50:51,230 --> 00:50:54,349
actually did anything useful so now we

1084
00:50:53,298 --> 00:50:55,670
have to start looking at the actual

1085
00:50:54,349 --> 00:50:57,230
output files and see if they have

1086
00:50:55,670 --> 00:50:59,180
anything useful now that looks a lot

1087
00:50:57,230 --> 00:51:01,190
better so it looks like we're properly

1088
00:50:59,179 --> 00:51:05,000
chunking that up because now like

1089
00:51:01,190 --> 00:51:08,510
windows can read it and it displays it

1090
00:51:05,000 --> 00:51:11,269
oh so helpfully as white-on-white let's

1091
00:51:08,510 --> 00:51:13,490
go ahead and open up and see what

1092
00:51:11,269 --> 00:51:17,059
it looks like in here now

1093
00:51:13,489 --> 00:51:18,979
what you can see and again this is I

1094
00:51:17,059 --> 00:51:20,360
don't know whose fault this is exactly

1095
00:51:18,980 --> 00:51:23,000
it's probably not

1096
00:51:20,360 --> 00:51:24,860
writer it's probably the font extractor

1097
00:51:23,000 --> 00:51:29,659
but you can see that there's no

1098
00:51:24,860 --> 00:51:31,910
anti-aliasing on the font there should

1099
00:51:29,659 --> 00:51:34,670
be at least a little bit of a fractional

1100
00:51:31,909 --> 00:51:38,569
pixel if you were to imagine what the

1101
00:51:34,670 --> 00:51:45,139
line is that crosses through there like

1102
00:51:38,570 --> 00:51:47,390
let me draw one for you what you can see

1103
00:51:45,139 --> 00:51:49,639
is there should be some partial pixel

1104
00:51:47,389 --> 00:51:52,069
coverage happening

1105
00:51:49,639 --> 00:51:54,859
you know on these sort of border pixels

1106
00:51:52,070 --> 00:51:56,990
there and it's not happening if we

1107
00:51:54,860 --> 00:52:00,590
assume you know if you assume that maybe

1108
00:51:56,989 --> 00:52:02,359
it was starting looking at where it's

1109
00:52:00,590 --> 00:52:07,190
starting maybe somewhere around there

1110
00:52:02,360 --> 00:52:10,280
let's say and drawing to somewhere like

1111
00:52:07,190 --> 00:52:12,170
dare or whatever you can see that there

1112
00:52:10,280 --> 00:52:14,210
should be a lot of fractional pixel

1113
00:52:12,170 --> 00:52:17,710
coverage and we're just not getting any

1114
00:52:14,210 --> 00:52:20,929
of it that says to me that either

1115
00:52:17,710 --> 00:52:23,960
Windows is just screwing with us because

1116
00:52:20,929 --> 00:52:27,710
it's Windows and it never does something

1117
00:52:23,960 --> 00:52:31,070
good or there's some stuff we didn't

1118
00:52:27,710 --> 00:52:33,380
specify so you can see here like when we

1119
00:52:31,070 --> 00:52:35,809
create the spawn there's a lot of

1120
00:52:33,380 --> 00:52:38,420
garbage that we specify with it who

1121
00:52:35,809 --> 00:52:41,779
knows if we specified the right stuff

1122
00:52:38,420 --> 00:52:43,840
here and then when we're creating like

1123
00:52:41,780 --> 00:52:46,490
our Dib section and all this nonsense

1124
00:52:43,840 --> 00:52:48,650
all of this stuff like what the

1125
00:52:46,489 --> 00:52:52,399
background color mode is all of these

1126
00:52:48,650 --> 00:52:54,410
things we don't really know to what

1127
00:52:52,400 --> 00:52:58,160
extent those have been set properly

1128
00:52:54,409 --> 00:53:00,769
right so it's probably worth our time to

1129
00:52:58,159 --> 00:53:02,869
go speelunk it's just a little bit to

1130
00:53:00,769 --> 00:53:05,719
see if it would be possible for us to

1131
00:53:02,869 --> 00:53:07,969
ask windows to not be terrible at

1132
00:53:05,719 --> 00:53:11,929
everything every day all the time for no

1133
00:53:07,969 --> 00:53:16,699
real reason other than laziness so let's

1134
00:53:11,929 --> 00:53:18,730
see if we can figure that out by taking

1135
00:53:16,699 --> 00:53:23,869
a look at like what settings are in here

1136
00:53:18,730 --> 00:53:31,300
if we look at these values what have we

1137
00:53:23,869 --> 00:53:34,079
got these are just what font mapping

1138
00:53:31,300 --> 00:53:36,650
that that really doesn't

1139
00:53:34,079 --> 00:53:36,650
very much

1140
00:53:38,030 --> 00:53:41,780
[Music]

1141
00:53:48,030 --> 00:53:57,660
all right so here's a bunch of nonsense

1142
00:53:51,150 --> 00:53:58,950
we've got so it looks like this is

1143
00:53:57,659 --> 00:54:07,460
probably the case that we're hitting

1144
00:53:58,949 --> 00:54:07,460
right like apparently it got too large

1145
00:54:23,699 --> 00:54:27,409
so I'm not really sure

1146
00:54:39,619 --> 00:54:45,369
it doesn't really look like there's any

1147
00:54:41,688 --> 00:54:45,368
way for us to force it to do that

1148
00:54:52,039 --> 00:55:03,500
so I guess what I would say is we we

1149
00:54:58,190 --> 00:55:08,059
don't have really any available options

1150
00:55:03,500 --> 00:55:14,090
here for getting Windows to do something

1151
00:55:08,059 --> 00:55:15,679
smart I don't think but we've got you

1152
00:55:14,090 --> 00:55:18,500
know I don't need to work on the import

1153
00:55:15,679 --> 00:55:22,009
thing today it's not like I made here

1154
00:55:18,500 --> 00:55:23,449
actually has deadlines so you know maybe

1155
00:55:22,010 --> 00:55:25,520
we would just move on from here but what

1156
00:55:23,449 --> 00:55:28,609
I would say is let's let's try and fix

1157
00:55:25,519 --> 00:55:31,099
this let's see if there's a way to work

1158
00:55:28,610 --> 00:55:33,140
around what we nose is doing here's what

1159
00:55:31,099 --> 00:55:37,400
I'm gonna suggest since it looks like we

1160
00:55:33,139 --> 00:55:39,799
can't anti-alias large fonts what I'm

1161
00:55:37,400 --> 00:55:41,990
gonna recommend is maybe we just use our

1162
00:55:39,800 --> 00:55:48,740
own down sampling or something like that

1163
00:55:41,989 --> 00:55:53,629
right if we look at extract font right

1164
00:55:48,739 --> 00:56:02,289
and we go down into the guts of this

1165
00:55:53,630 --> 00:56:09,160
here when we actually call this function

1166
00:56:02,289 --> 00:56:14,119
we pass it just the pixel height and

1167
00:56:09,159 --> 00:56:16,129
when we create the dc4 that we use max

1168
00:56:14,119 --> 00:56:25,210
lifting which is computed directly off

1169
00:56:16,130 --> 00:56:25,210
of these values right so I think

1170
00:56:29,179 --> 00:56:43,788
I think we should be able to pre-filter

1171
00:56:37,429 --> 00:56:52,548
the bitmap like real me this Batman

1172
00:56:43,789 --> 00:56:56,630
thought man we've got a pixel height if

1173
00:56:52,548 --> 00:57:00,259
we said give me four times the pixel

1174
00:56:56,630 --> 00:57:04,460
height like make this thing real real

1175
00:57:00,260 --> 00:57:06,890
large right the rest of this code I

1176
00:57:04,460 --> 00:57:13,909
think would work fine right it would

1177
00:57:06,889 --> 00:57:16,098
sample the thing as a as being large and

1178
00:57:13,909 --> 00:57:19,509
then all of the values that we write out

1179
00:57:16,099 --> 00:57:23,000
here would be off by a factor of four

1180
00:57:19,510 --> 00:57:24,859
but we could just divide them or

1181
00:57:23,000 --> 00:57:29,150
multiply them by the inverse of that

1182
00:57:24,858 --> 00:57:31,250
right and then we should be fine the

1183
00:57:29,150 --> 00:57:33,608
align percentages are already a

1184
00:57:31,250 --> 00:57:37,690
percentage so that doesn't matter

1185
00:57:33,608 --> 00:57:42,170
so I think we could just make this work

1186
00:57:37,690 --> 00:57:48,440
that's my current story and I'm I guess

1187
00:57:42,170 --> 00:57:51,130
gonna stick to it probably so yeah like

1188
00:57:48,440 --> 00:57:51,130
for example

1189
00:58:04,400 --> 00:58:09,660
if I just create something called scale

1190
00:58:06,929 --> 00:58:12,078
or ratio and in all of the places where

1191
00:58:09,659 --> 00:58:16,679
I ever actually write something out

1192
00:58:12,079 --> 00:58:19,318
which is very few right I just multiply

1193
00:58:16,679 --> 00:58:21,210
that scale ratio I think that just works

1194
00:58:19,318 --> 00:58:23,400
this horizontal advance table is the

1195
00:58:21,210 --> 00:58:26,068
only thing that actually says that the

1196
00:58:23,400 --> 00:58:31,139
font itself has some stuff that probably

1197
00:58:26,068 --> 00:58:33,808
we would want to maybe write out like if

1198
00:58:31,139 --> 00:58:35,009
we write this stuff out because I don't

1199
00:58:33,809 --> 00:58:36,809
think we're currently writing any of

1200
00:58:35,009 --> 00:58:49,130
that out but if we do we just multiply

1201
00:58:36,809 --> 00:58:49,130
it by that scale ratio and so right

1202
00:58:59,989 --> 00:59:06,469
so that seems reasonable to me and if we

1203
00:59:04,280 --> 00:59:08,570
did that then if we asked her this thing

1204
00:59:06,469 --> 00:59:10,489
at sample pixel height instead of pixel

1205
00:59:08,570 --> 00:59:12,559
height then that would allow us to get

1206
00:59:10,489 --> 00:59:14,419
really big copies of the font we could

1207
00:59:12,559 --> 00:59:15,650
shrink them down and when we shrink them

1208
00:59:14,420 --> 00:59:17,930
down we would be able to produce the

1209
00:59:15,650 --> 00:59:20,480
anti-aliasing it's not as good is

1210
00:59:17,929 --> 00:59:22,368
actually anti aliasing unfortunately but

1211
00:59:20,480 --> 00:59:23,900
it's probably better than what we're

1212
00:59:22,369 --> 00:59:26,690
getting right now which is no anti

1213
00:59:23,900 --> 00:59:28,789
aliasing which would look really but and

1214
00:59:26,690 --> 00:59:31,700
so just thinking about that like let's

1215
00:59:28,789 --> 00:59:33,679
say we were to do this then what we

1216
00:59:31,699 --> 00:59:37,969
would need is when we do load glyph

1217
00:59:33,679 --> 00:59:41,750
bitmap here right after the text out W

1218
00:59:37,969 --> 00:59:46,489
we would need to like scale that thing

1219
00:59:41,750 --> 00:59:50,389
down and just take you know the larger

1220
00:59:46,489 --> 00:59:53,569
image and like smoosh it right uh and

1221
00:59:50,389 --> 00:59:56,868
that actually isn't particularly hard to

1222
00:59:53,570 --> 01:00:00,260
do in place so what I could do is just

1223
00:59:56,869 --> 01:00:11,180
say hey yeah let's just loop over all of

1224
01:00:00,260 --> 01:00:22,150
these here and we'll say like something

1225
01:00:11,179 --> 01:00:25,309
like this so if I was to just say like

1226
01:00:22,150 --> 01:00:27,410
scale the thing that you started with so

1227
01:00:25,309 --> 01:00:30,559
whatever that you know what is it called

1228
01:00:27,409 --> 01:00:35,899
bound bound height and bound with so

1229
01:00:30,559 --> 01:00:37,849
just go over the whole thing figure out

1230
01:00:35,900 --> 01:00:39,289
how you're gonna do the bound with bound

1231
01:00:37,849 --> 01:00:40,280
height whatever and in fact you know we

1232
01:00:39,289 --> 01:00:41,509
could even do this a little bit

1233
01:00:40,280 --> 01:00:42,950
differently because then once you come

1234
01:00:41,510 --> 01:00:46,099
in here you want the bound within the

1235
01:00:42,949 --> 01:00:49,419
bound height does this pitch how do we

1236
01:00:46,099 --> 01:00:49,420
do we know what the pitch is here

1237
01:00:53,769 --> 01:00:57,340
that would just work

1238
01:01:13,869 --> 01:01:25,049
and this would just work so I think this

1239
01:01:23,260 --> 01:01:28,120
would just all work

1240
01:01:25,050 --> 01:01:29,680
it's very dicey because this code was

1241
01:01:28,119 --> 01:01:33,219
kind of just all written in line there's

1242
01:01:29,679 --> 01:01:35,469
not a lot of structure to it right so we

1243
01:01:33,219 --> 01:01:37,689
may have some nasty debugging work ahead

1244
01:01:35,469 --> 01:01:39,939
of us but we could clean up the code too

1245
01:01:37,690 --> 01:01:41,800
if we wanted to and just like you know

1246
01:01:39,940 --> 01:01:43,599
break it into sections with clearer

1247
01:01:41,800 --> 01:01:45,130
inputs and outputs so that we could be a

1248
01:01:43,599 --> 01:01:47,190
little bit more certain of ourselves and

1249
01:01:45,130 --> 01:01:50,110
that would be fine

1250
01:01:47,190 --> 01:01:53,050
but yeah if we wanted to I really think

1251
01:01:50,110 --> 01:01:59,880
we could just say right after you do

1252
01:01:53,050 --> 01:01:59,880
this we're gonna knock these down so

1253
01:02:07,289 --> 01:02:13,360
that the the bounds that we're actually

1254
01:02:09,730 --> 01:02:18,179
using for these things we're gonna we're

1255
01:02:13,360 --> 01:02:22,840
gonna knock those down and produce a

1256
01:02:18,179 --> 01:02:25,839
loop over a scaled version of this thing

1257
01:02:22,840 --> 01:02:27,519
which can be whatever multiple of two

1258
01:02:25,840 --> 01:02:29,440
you want there right or I guess it could

1259
01:02:27,519 --> 01:02:33,070
be any even multiple pixels

1260
01:02:29,440 --> 01:02:35,340
we're knock those down we're going to

1261
01:02:33,070 --> 01:02:38,740
loop over it and we're gonna ingest

1262
01:02:35,340 --> 01:02:42,370
however many pixels are actually in like

1263
01:02:38,739 --> 01:02:45,129
one blocks worth of that scale so we're

1264
01:02:42,369 --> 01:02:48,069
gonna do like a you know Y offset equals

1265
01:02:45,130 --> 01:02:57,519
zero y offset is less than scale y

1266
01:02:48,070 --> 01:02:59,680
offset kind of thing right so we're

1267
01:02:57,519 --> 01:03:02,199
gonna loop over a block of values there

1268
01:02:59,679 --> 01:03:04,119
sum them all up and like average them

1269
01:03:02,199 --> 01:03:07,869
right like the crappiest possible filter

1270
01:03:04,119 --> 01:03:11,259
for now all right and then output that

1271
01:03:07,869 --> 01:03:14,529
as the actual new pixel value makes

1272
01:03:11,260 --> 01:03:18,250
sense so when we read in here like what

1273
01:03:14,530 --> 01:03:21,910
are we actually extracting just looking

1274
01:03:18,250 --> 01:03:24,210
at it here we're just what are we

1275
01:03:21,909 --> 01:03:26,118
actually looking at

1276
01:03:24,210 --> 01:03:29,010
we just we just look at the red value

1277
01:03:26,119 --> 01:03:31,710
right so what we can do here is say look

1278
01:03:29,010 --> 01:03:35,059
just sum up the red values so we've got

1279
01:03:31,710 --> 01:03:39,778
a pixel we grab the red value

1280
01:03:35,059 --> 01:03:43,829
we're gonna have an accumulator we loop

1281
01:03:39,778 --> 01:03:47,068
over all of these and we accumulate each

1282
01:03:43,829 --> 01:03:47,670
low byte of these things I don't care

1283
01:03:47,068 --> 01:03:50,308
about that

1284
01:03:47,670 --> 01:03:52,079
all right there so we're gonna go

1285
01:03:50,309 --> 01:03:53,880
through those and just just accumulate

1286
01:03:52,079 --> 01:03:56,880
the red value when we get to the end

1287
01:03:53,880 --> 01:04:00,539
we'll have the average red value so we

1288
01:03:56,880 --> 01:04:03,420
can say a cume divide equals scale time

1289
01:04:00,539 --> 01:04:10,289
scale right so we produced that you know

1290
01:04:03,420 --> 01:04:12,659
we go back down to sort of our rounded

1291
01:04:10,289 --> 01:04:18,450
value we may want to do a thing where

1292
01:04:12,659 --> 01:04:20,460
we're actually rounding cuz that's and

1293
01:04:18,449 --> 01:04:22,439
that's really a truncation which may be

1294
01:04:20,460 --> 01:04:23,849
a bad idea like we may want to we want

1295
01:04:22,440 --> 01:04:26,338
to do rounding rather than truncation

1296
01:04:23,849 --> 01:04:28,500
we'll look at that in a second but once

1297
01:04:26,338 --> 01:04:31,949
we produce that accumulation value now

1298
01:04:28,500 --> 01:04:34,349
we can do is write that back out as the

1299
01:04:31,949 --> 01:04:39,269
red value so now what we can do is say

1300
01:04:34,349 --> 01:04:44,338
like okay that accumulation just write

1301
01:04:39,269 --> 01:04:48,048
that back out to the pixel so you know

1302
01:04:44,338 --> 01:04:53,969
whatever the the best location is here

1303
01:04:48,048 --> 01:04:56,038
would get that right once we've done

1304
01:04:53,969 --> 01:04:58,649
that compression of course we want it to

1305
01:04:56,039 --> 01:05:01,829
look at we want it to look like this I

1306
01:04:58,650 --> 01:05:04,588
guess we want to look at at and if you

1307
01:05:01,829 --> 01:05:10,589
look here it's like going I don't know

1308
01:05:04,588 --> 01:05:14,420
why it's going from the bottom up you

1309
01:05:10,588 --> 01:05:19,558
know it is but I have no idea why it is

1310
01:05:14,420 --> 01:05:23,720
that's just really strange so I don't

1311
01:05:19,559 --> 01:05:23,720
really get the point of that necessarily

1312
01:05:24,048 --> 01:05:30,449
but I suppose we can just keep doing it

1313
01:05:27,420 --> 01:05:33,260
so that we don't mess with anything

1314
01:05:30,449 --> 01:05:33,259
right

1315
01:05:39,250 --> 01:05:47,380
and so if we have the row pointer there

1316
01:05:41,860 --> 01:05:50,079
and here's our pixel pointer then as we

1317
01:05:47,380 --> 01:05:52,300
go through here we can just in fact I

1318
01:05:50,079 --> 01:05:54,219
can just do it like this I can just

1319
01:05:52,300 --> 01:05:57,490
write the pixel value out that way

1320
01:05:54,219 --> 01:06:02,199
and we're all good so all we really need

1321
01:05:57,489 --> 01:06:04,659
to do here is take samples properly and

1322
01:06:02,199 --> 01:06:08,259
that requires us to like offset the

1323
01:06:04,659 --> 01:06:10,389
pixel value as we go so what's gonna

1324
01:06:08,260 --> 01:06:14,410
happen there is we need to take this

1325
01:06:10,389 --> 01:06:16,269
pixel value here and say like in fact I

1326
01:06:14,409 --> 01:06:18,039
can do it as the sample pointer I can

1327
01:06:16,269 --> 01:06:21,159
say all right we're gonna start sampling

1328
01:06:18,039 --> 01:06:24,550
at the pixel obviously each time through

1329
01:06:21,159 --> 01:06:27,759
there we need to end literally do this

1330
01:06:24,550 --> 01:06:31,510
right each time through this loop we

1331
01:06:27,760 --> 01:06:34,840
need to move it right the way we were

1332
01:06:31,510 --> 01:06:39,460
gonna move it so as we as we step

1333
01:06:34,840 --> 01:06:42,850
through we need to go ahead and say for

1334
01:06:39,460 --> 01:06:46,210
each Y we need to move the sample back

1335
01:06:42,849 --> 01:06:49,179
how you know to to the the previous row

1336
01:06:46,210 --> 01:06:52,720
each time through the y offset right to

1337
01:06:49,179 --> 01:06:55,089
grab four of those so I think that would

1338
01:06:52,719 --> 01:06:57,279
just work now the thing we're going to

1339
01:06:55,090 --> 01:07:00,070
run into here is we're trying to

1340
01:06:57,280 --> 01:07:03,880
compress four at a time in each of our

1341
01:07:00,070 --> 01:07:08,230
dimensions so these things themselves as

1342
01:07:03,880 --> 01:07:10,990
we go we needed to have we need to have

1343
01:07:08,230 --> 01:07:11,440
like advance the pixel pointer by that

1344
01:07:10,989 --> 01:07:14,619
amount

1345
01:07:11,440 --> 01:07:17,139
so in these when we're looking at like

1346
01:07:14,619 --> 01:07:19,630
this we don't you know normally we would

1347
01:07:17,139 --> 01:07:21,849
write it out this way and move forward

1348
01:07:19,630 --> 01:07:24,990
and the sample could use the same one

1349
01:07:21,849 --> 01:07:28,900
but it really can't here I don't think

1350
01:07:24,989 --> 01:07:30,669
for that reason so we need this to be

1351
01:07:28,900 --> 01:07:36,610
more intelligent about how it's working

1352
01:07:30,670 --> 01:07:38,619
and so I think we kind of need a

1353
01:07:36,610 --> 01:07:41,140
separate separate one here like we need

1354
01:07:38,619 --> 01:07:42,400
this and the reason all I'm saying is it

1355
01:07:41,139 --> 01:07:44,730
because we need to write these out

1356
01:07:42,400 --> 01:07:46,269
packed but we need to read them in

1357
01:07:44,730 --> 01:07:47,769
strided right

1358
01:07:46,269 --> 01:07:54,599
so we need to do something like that

1359
01:07:47,769 --> 01:07:59,409
right so that each time we we jump scale

1360
01:07:54,599 --> 01:08:02,500
scales worth of rows so I think that's

1361
01:07:59,409 --> 01:08:04,000
what we want to do there and then when

1362
01:08:02,500 --> 01:08:15,778
we're coming through here to do sampling

1363
01:08:04,000 --> 01:08:18,220
this value has to be more like that and

1364
01:08:15,778 --> 01:08:21,819
well actually I guess now I think about

1365
01:08:18,220 --> 01:08:32,829
it what we could do is just do this no

1366
01:08:21,819 --> 01:08:41,470
we can call this I don't know what to

1367
01:08:32,829 --> 01:08:43,899
call that right so as we go we would

1368
01:08:41,470 --> 01:08:45,880
start where the sample is and that's

1369
01:08:43,899 --> 01:08:48,548
moving four lines at a time and then we

1370
01:08:45,880 --> 01:08:51,338
would inside that scan all four lines

1371
01:08:48,548 --> 01:08:53,769
and all four columns accumulating them

1372
01:08:51,338 --> 01:08:55,809
together to give us what we actually

1373
01:08:53,770 --> 01:08:57,430
want and then we can figure out what the

1374
01:08:55,810 --> 01:09:00,819
accumulated pixel value should be from

1375
01:08:57,430 --> 01:09:02,500
that I know it's pretty messy so in

1376
01:09:00,819 --> 01:09:04,060
order to make this work we need to tell

1377
01:09:02,500 --> 01:09:08,909
this routine what the scale value

1378
01:09:04,060 --> 01:09:08,910
actually is and so

1379
01:09:15,009 --> 01:09:21,429
in here we need that scale value and so

1380
01:09:19,238 --> 01:09:25,238
that's is just gonna be the thing that

1381
01:09:21,429 --> 01:09:28,958
we actually specify here that's also

1382
01:09:25,238 --> 01:09:32,228
gives us a way to do this cleanly which

1383
01:09:28,958 --> 01:09:33,658
seems good and then yeah now we just

1384
01:09:32,229 --> 01:09:36,369
have to debug it because we did some

1385
01:09:33,658 --> 01:09:40,509
really stupid stuff in there

1386
01:09:36,368 --> 01:09:43,748
and off we go we can also turn this off

1387
01:09:40,509 --> 01:09:46,149
now probably but I don't know that we

1388
01:09:43,748 --> 01:09:48,689
want to because since it is willing to

1389
01:09:46,149 --> 01:09:51,219
anti-alias fonts for us it can probably

1390
01:09:48,689 --> 01:09:53,288
anti-alias small fonts for us better

1391
01:09:51,219 --> 01:09:55,958
than we can because it has the TrueType

1392
01:09:53,288 --> 01:09:59,018
font in there so we probably want to

1393
01:09:55,958 --> 01:10:03,599
turn scaling off when the actual sample

1394
01:09:59,019 --> 01:10:03,599
size is small that's my guess

1395
01:10:05,130 --> 01:10:09,729
so I think we want to leave that

1396
01:10:07,420 --> 01:10:13,300
anti-alias:on and then just try to

1397
01:10:09,729 --> 01:10:16,090
figure out when that's gonna happen so I

1398
01:10:13,300 --> 01:10:20,429
would say that from this we could look

1399
01:10:16,090 --> 01:10:20,429
back up here and say all you know the

1400
01:10:21,599 --> 01:10:29,409
where's the where's the value there I

1401
01:10:26,559 --> 01:10:33,369
don't know where did it go

1402
01:10:29,408 --> 01:10:36,248
I quality right so that I quality value

1403
01:10:33,368 --> 01:10:44,859
which is this thing we could make that

1404
01:10:36,248 --> 01:10:49,420
look like this it's like the iPhone like

1405
01:10:44,859 --> 01:10:52,509
that and sooo this way I've got the

1406
01:10:49,420 --> 01:10:55,719
ability to turn this off so what I might

1407
01:10:52,510 --> 01:10:58,780
do is say okay you know if scale is

1408
01:10:55,719 --> 01:11:01,208
greater than 1 i quality equals 0 so

1409
01:10:58,779 --> 01:11:03,670
that way if we're doing downsampling

1410
01:11:01,208 --> 01:11:07,800
will turn off quality and that way in

1411
01:11:03,670 --> 01:11:12,069
here I can do you know like to do Kaycee

1412
01:11:07,800 --> 01:11:15,699
turn off scaling below certain pixel

1413
01:11:12,069 --> 01:11:17,618
Heights and that way we can play with

1414
01:11:15,698 --> 01:11:19,359
that and tell Windows to stop doing its

1415
01:11:17,618 --> 01:11:21,908
anti-aliasing for things that we want to

1416
01:11:19,359 --> 01:11:23,348
do the anti-aliasing up and tell us to

1417
01:11:21,908 --> 01:11:24,759
stop doing interesting things we want

1418
01:11:23,349 --> 01:11:28,389
Windows ooh the entire thing off and

1419
01:11:24,760 --> 01:11:31,479
hope that that goes well

1420
01:11:28,389 --> 01:11:33,819
so now we've done it we probably are

1421
01:11:31,479 --> 01:11:34,389
gonna get complete garbage out of it in

1422
01:11:33,819 --> 01:11:39,009
fact

1423
01:11:34,389 --> 01:11:49,118
why am I seeing nothing that's not why

1424
01:11:39,010 --> 01:11:51,579
would it be corrupted oh dear what did

1425
01:11:49,118 --> 01:11:55,408
we how could we okay so that is a little

1426
01:11:51,578 --> 01:12:00,488
bit strange how did we manage to get a

1427
01:11:55,408 --> 01:12:03,158
corrupted version of the data it

1428
01:12:00,488 --> 01:12:05,618
shouldn't it just be garbage it

1429
01:12:03,158 --> 01:12:08,009
shouldn't be corrupted should it seems

1430
01:12:05,618 --> 01:12:08,009
weird

1431
01:12:16,420 --> 01:12:20,039
all right so I have no idea why that

1432
01:12:18,460 --> 01:12:23,260
happened we'll have to take a look at it

1433
01:12:20,039 --> 01:12:25,300
because I I guess we've got some bugs in

1434
01:12:23,260 --> 01:12:28,449
this that we haven't worked out yet

1435
01:12:25,300 --> 01:12:31,329
because I'm not sure why we would end up

1436
01:12:28,449 --> 01:12:35,439
in a situation where the output got

1437
01:12:31,329 --> 01:12:39,539
corrupted let me try one thing first to

1438
01:12:35,439 --> 01:12:43,119
make sure this still works okay if we

1439
01:12:39,539 --> 01:13:01,149
just have a way to nerf it so if I can

1440
01:12:43,119 --> 01:13:03,519
say in fact if I can say that can we

1441
01:13:01,149 --> 01:13:05,529
just turn the scaling off and not break

1442
01:13:03,520 --> 01:13:08,440
anything right that's all I really

1443
01:13:05,529 --> 01:13:15,579
wanted to know so let's see if I say

1444
01:13:08,439 --> 01:13:22,000
scale equals 1 can I make the can I make

1445
01:13:15,579 --> 01:13:24,550
the program work ok so that works fine

1446
01:13:22,000 --> 01:13:27,039
what I don't know is so like is this

1447
01:13:24,550 --> 01:13:28,810
sensitive like can I make the bug that

1448
01:13:27,039 --> 01:13:31,600
we get garbage happen in other

1449
01:13:28,810 --> 01:13:38,620
circumstances like if I call this you

1450
01:13:31,600 --> 01:13:43,570
know 800 with that with that output

1451
01:13:38,619 --> 01:13:46,239
corrupted p.m. geez so it seems like I

1452
01:13:43,569 --> 01:13:48,880
did something weirdly bad there but I

1453
01:13:46,239 --> 01:13:51,689
don't know why we would have how that

1454
01:13:48,880 --> 01:13:51,690
would have happened exactly

1455
01:13:59,579 --> 01:14:04,720
hmm so let's try to figure out what's

1456
01:14:02,289 --> 01:14:06,880
going on so let me first set the scale

1457
01:14:04,720 --> 01:14:10,750
up to - so we're gonna down sample by

1458
01:14:06,880 --> 01:14:15,720
two and now in theory I guess when we go

1459
01:14:10,750 --> 01:14:18,609
to run this thing we crap out somehow

1460
01:14:15,720 --> 01:14:21,340
right you look I now I like the pings

1461
01:14:18,609 --> 01:14:25,599
themselves are just garbage so how are

1462
01:14:21,340 --> 01:14:28,329
we actually ruining the ping just by

1463
01:14:25,600 --> 01:14:30,670
doing that I that that's kind of fancy

1464
01:14:28,329 --> 01:14:33,309
so I want to start by jumping into the

1465
01:14:30,670 --> 01:14:40,119
ping the ping writer just to see what

1466
01:14:33,310 --> 01:14:44,440
are we getting that's so bad well that

1467
01:14:40,119 --> 01:14:47,529
would do it all right so it's because

1468
01:14:44,439 --> 01:14:49,989
they're just zero zeros that seems not

1469
01:14:47,529 --> 01:14:53,550
good at all so let's go ahead into HH

1470
01:14:49,989 --> 01:14:56,739
font and see what we've done wrong there

1471
01:14:53,550 --> 01:15:10,570
in terms of scaling so here we are in

1472
01:14:56,739 --> 01:15:11,889
lewd glyph scoot down here okay so we're

1473
01:15:10,569 --> 01:15:15,939
gonna step through the image here

1474
01:15:11,890 --> 01:15:18,250
reading the rose and obviously I did

1475
01:15:15,939 --> 01:15:20,019
something super stupid here that's kind

1476
01:15:18,250 --> 01:15:23,319
of fine because we should be able to

1477
01:15:20,020 --> 01:15:25,390
figure out what what's going on so here

1478
01:15:23,319 --> 01:15:27,219
we are looking at the pixel and the

1479
01:15:25,390 --> 01:15:30,780
sample we're going to write out the

1480
01:15:27,220 --> 01:15:30,780
pixel here using the accumulator

1481
01:15:41,050 --> 01:15:52,900
so that's gonna sample off of this that

1482
01:15:47,319 --> 01:15:56,170
seems fine so that seems fine unless I'm

1483
01:15:52,899 --> 01:15:57,969
missing something that seems fine

1484
01:15:56,170 --> 01:15:59,199
now whether there was anything here yet

1485
01:15:57,970 --> 01:16:06,190
we don't actually know because there's

1486
01:15:59,199 --> 01:16:08,529
probably a lot of blank pixels there and

1487
01:16:06,189 --> 01:16:11,949
then we're going to write it out to this

1488
01:16:08,529 --> 01:16:16,529
pixel we're gonna do that bound with

1489
01:16:11,949 --> 01:16:16,529
times that that seems good

1490
01:16:21,859 --> 01:16:30,019
ah so the problem here is that sample

1491
01:16:28,010 --> 01:16:32,570
inter never gets advanced so I missed

1492
01:16:30,020 --> 01:16:35,330
one of my readers you can see here that

1493
01:16:32,569 --> 01:16:38,109
sample inter gets set the sample and the

1494
01:16:35,329 --> 01:16:42,319
row gets advanced but we never actually

1495
01:16:38,109 --> 01:16:44,479
move it so this samples four pixels but

1496
01:16:42,319 --> 01:16:46,579
then once it's done and it goes to move

1497
01:16:44,479 --> 01:16:50,269
on to the next one here this has to get

1498
01:16:46,579 --> 01:16:52,340
moved right four pixels forward in order

1499
01:16:50,270 --> 01:16:57,380
to read the next set of pixels so that

1500
01:16:52,340 --> 01:16:59,989
actually was correct I mean what we saw

1501
01:16:57,380 --> 01:17:01,520
was the correct output from that bug so

1502
01:16:59,989 --> 01:17:03,109
let's try it again and see what else

1503
01:17:01,520 --> 01:17:06,490
we've got because that that was

1504
01:17:03,109 --> 01:17:06,489
obviously just wrong

1505
01:17:07,029 --> 01:17:13,759
still nothing so you can see like no

1506
01:17:12,109 --> 01:17:17,599
width no height right so we're still

1507
01:17:13,760 --> 01:17:19,280
busted so something more has gone wrong

1508
01:17:17,600 --> 01:17:24,890
than just that let's keep looking in

1509
01:17:19,279 --> 01:17:28,609
here so my sample in err sorry

1510
01:17:24,890 --> 01:17:29,930
Wow bad day today it's not sample in er

1511
01:17:28,609 --> 01:17:34,429
that's the one we were moving around

1512
01:17:29,930 --> 01:17:35,289
it's sample yeah there you go try one

1513
01:17:34,430 --> 01:17:38,630
more time

1514
01:17:35,289 --> 01:17:40,939
there we go all right so now we're at

1515
01:17:38,630 --> 01:17:42,350
least getting plausible values back now

1516
01:17:40,939 --> 01:17:44,269
that doesn't mean we've actually done

1517
01:17:42,350 --> 01:17:47,750
this correctly there could still be

1518
01:17:44,270 --> 01:17:49,490
plenty of problems for example it looks

1519
01:17:47,750 --> 01:17:52,250
like that works it looks like we're

1520
01:17:49,489 --> 01:17:54,679
squishing too much from what we should

1521
01:17:52,250 --> 01:17:56,359
be but let's take a look and see

1522
01:17:54,680 --> 01:17:59,360
otherwise do we at least produce

1523
01:17:56,359 --> 01:18:01,549
reasonable pings and reasonable images

1524
01:17:59,359 --> 01:18:03,949
it looks like we did and they are

1525
01:18:01,550 --> 01:18:05,930
properly anti-alias now well properly is

1526
01:18:03,949 --> 01:18:09,439
a pretty bold statement that doesn't

1527
01:18:05,930 --> 01:18:12,140
actually look very good so I'm not sure

1528
01:18:09,439 --> 01:18:16,239
how properly that is the fact that we're

1529
01:18:12,140 --> 01:18:21,500
double squishing on X that seems like oh

1530
01:18:16,239 --> 01:18:24,649
that's why got four hardwired into my

1531
01:18:21,500 --> 01:18:27,170
brain all right so now I think we're at

1532
01:18:24,649 --> 01:18:31,129
least scaling these down properly it

1533
01:18:27,170 --> 01:18:33,100
looks like and so now yeah there's our W

1534
01:18:31,130 --> 01:18:35,630
now that may not be very good

1535
01:18:33,100 --> 01:18:37,219
anti-aliasing but at least it gives us

1536
01:18:35,630 --> 01:18:38,719
some anti-icing let's take a look at

1537
01:18:37,219 --> 01:18:45,170
what the quality looks like not really

1538
01:18:38,719 --> 01:18:46,460
sure how about it look it looks okay and

1539
01:18:45,170 --> 01:18:49,069
don't forget this is gamma

1540
01:18:46,460 --> 01:18:52,789
already which doesn't do properly

1541
01:18:49,069 --> 01:18:58,039
so it's hard to really assess there I

1542
01:18:52,789 --> 01:19:02,289
think cuz it's I don't know how it's

1543
01:18:58,039 --> 01:19:02,289
necessarily triggered an alpha how do i

1544
01:19:03,010 --> 01:19:08,860
how do I make a black

1545
01:19:13,960 --> 01:19:29,529
need a new layer fill with foreground

1546
01:19:20,050 --> 01:19:31,630
color alright um so yeah I mean you can

1547
01:19:29,529 --> 01:19:37,329
see looking at that it's not really what

1548
01:19:31,630 --> 01:19:41,489
we would want for anti-aliasing quality

1549
01:19:37,329 --> 01:19:47,350
wise it seems a little off still to me

1550
01:19:41,488 --> 01:19:49,419
looking at that sampling I'm not sure

1551
01:19:47,350 --> 01:19:52,150
exactly how we're getting those results

1552
01:19:49,420 --> 01:19:56,289
per se but it could be also just the 4x4

1553
01:19:52,149 --> 01:19:57,129
sampling or the 2x2 sampling so we'll

1554
01:19:56,289 --> 01:19:58,719
jack that up a little bit

1555
01:19:57,130 --> 01:20:01,270
another thing I want to know is when

1556
01:19:58,719 --> 01:20:02,829
we're actually writing this out here are

1557
01:20:01,270 --> 01:20:06,610
we editing these values at all it

1558
01:20:02,829 --> 01:20:07,750
doesn't look like we are so the alpha

1559
01:20:06,609 --> 01:20:09,670
switch so we should be able to inspect

1560
01:20:07,750 --> 01:20:14,609
that alpha properly because the pre

1561
01:20:09,670 --> 01:20:14,609
multiply nature of it isn't really

1562
01:20:14,640 --> 01:20:22,150
happening here because we pre-multiply

1563
01:20:17,859 --> 01:20:25,238
it in the game import so let's crank it

1564
01:20:22,149 --> 01:20:27,039
up to 4x over sampling and see if that

1565
01:20:25,238 --> 01:20:29,769
improves that at all but it looks like

1566
01:20:27,039 --> 01:20:31,840
we may still be a little bit off in

1567
01:20:29,770 --> 01:20:39,640
terms of just the sampling quality there

1568
01:20:31,840 --> 01:20:41,319
I'm not sure what's going on there but

1569
01:20:39,640 --> 01:20:46,150
we can try cranking it up even further

1570
01:20:41,319 --> 01:20:47,259
than that too if we want to obviously it

1571
01:20:46,149 --> 01:20:51,609
starts taking longer and longer because

1572
01:20:47,260 --> 01:20:55,469
it's doing a lot more work there I don't

1573
01:20:51,609 --> 01:20:55,469
remember where's the W there is 119

1574
01:21:01,090 --> 01:21:07,440
so that looks a lot better yeah I'm

1575
01:21:05,199 --> 01:21:07,439
saying

1576
01:21:16,399 --> 01:21:22,299
so if we actually look at this

1577
01:21:18,050 --> 01:21:25,610
one-to-one which is here

1578
01:21:22,300 --> 01:21:27,949
it's it's only better it's not perfect

1579
01:21:25,609 --> 01:21:31,549
and again it's hard to say to the way

1580
01:21:27,949 --> 01:21:33,050
the W's going here because you know this

1581
01:21:31,550 --> 01:21:37,369
is I don't really know to what extent

1582
01:21:33,050 --> 01:21:42,460
is like reliably doing the display

1583
01:21:37,369 --> 01:21:45,050
of an anti aliased thing but like if we

1584
01:21:42,460 --> 01:21:47,090
have no anti-aliasing versus

1585
01:21:45,050 --> 01:21:49,220
anti-aliasing and we could probably do

1586
01:21:47,090 --> 01:21:52,400
some testing of that so let's say I go

1587
01:21:49,220 --> 01:21:57,680
in here and say look I want to just do

1588
01:21:52,399 --> 01:22:00,039
one you know don't don't over sample it

1589
01:21:57,680 --> 01:22:00,039
there at all

1590
01:22:00,170 --> 01:22:10,609
and then I run it I should be able to

1591
01:22:04,640 --> 01:22:13,190
open the 119 again as a layer so should

1592
01:22:10,609 --> 01:22:14,869
be able to load that in and I shouldn't

1593
01:22:13,189 --> 01:22:20,239
be able to see the difference between

1594
01:22:14,869 --> 01:22:23,359
those two so there is what Windows was

1595
01:22:20,239 --> 01:22:24,859
giving us back before and there's what

1596
01:22:23,359 --> 01:22:27,109
we have and you can see it's a lot nicer

1597
01:22:24,859 --> 01:22:29,119
right I mean even just there it's like

1598
01:22:27,109 --> 01:22:33,380
super jagged and now it's much nicer

1599
01:22:29,119 --> 01:22:34,880
right so we're getting there I would

1600
01:22:33,380 --> 01:22:36,260
like to see the difference what if we

1601
01:22:34,880 --> 01:22:38,329
crank it up even more

1602
01:22:36,260 --> 01:22:40,520
I mean we're starting to get kind of

1603
01:22:38,329 --> 01:22:41,989
absurd here it's gonna take a long time

1604
01:22:40,520 --> 01:22:43,610
for this thing to run because it's doing

1605
01:22:41,989 --> 01:22:47,000
a ton of work and a completely

1606
01:22:43,609 --> 01:22:49,789
unappetizing but you know let's just say

1607
01:22:47,000 --> 01:22:51,770
we let it chunk through that because

1608
01:22:49,789 --> 01:22:54,409
remember we have to run this once who

1609
01:22:51,770 --> 01:22:57,140
cares how long it takes as long as it

1610
01:22:54,409 --> 01:22:59,389
eventually finishes and then we can look

1611
01:22:57,140 --> 01:23:02,869
again at seeing you know let's yttrium

1612
01:22:59,390 --> 01:23:05,000
port that 119 again we can look at the

1613
01:23:02,869 --> 01:23:09,800
difference and see to what extent that

1614
01:23:05,000 --> 01:23:11,750
seems smoother so there's you know oh

1615
01:23:09,800 --> 01:23:13,310
and you know what I could do too I could

1616
01:23:11,750 --> 01:23:17,090
probably make an easier way to flip

1617
01:23:13,310 --> 01:23:23,350
between these if I took the new layer

1618
01:23:17,090 --> 01:23:23,350
group thing here and we have

1619
01:23:25,760 --> 01:23:34,699
kind of duplicate a layer there we go if

1620
01:23:31,039 --> 01:23:36,710
I put this into a layer group then what

1621
01:23:34,699 --> 01:23:39,529
I could do is turn the whole thing on at

1622
01:23:36,710 --> 01:23:40,640
once right so there is the Windows

1623
01:23:39,529 --> 01:23:44,509
version which is crappy

1624
01:23:40,640 --> 01:23:47,390
there's the version which only does 4x

1625
01:23:44,510 --> 01:23:52,810
and there's the version that does 8x

1626
01:23:47,390 --> 01:23:58,220
right I don't see a lot of difference

1627
01:23:52,810 --> 01:24:00,980
between those two those look the same to

1628
01:23:58,220 --> 01:24:04,640
me so I think what I would say is 4x

1629
01:24:00,979 --> 01:24:06,709
seems fine all right so now we've got a

1630
01:24:04,640 --> 01:24:08,300
way to over sample these things the

1631
01:24:06,710 --> 01:24:10,430
question is when do we turn it on and

1632
01:24:08,300 --> 01:24:12,500
the answer is I have no idea when to

1633
01:24:10,430 --> 01:24:15,170
turn it on don't know when windows the

1634
01:24:12,500 --> 01:24:18,619
size stop doing its anti-aliasing so I'm

1635
01:24:15,170 --> 01:24:21,619
not sure when let's try to figure that

1636
01:24:18,619 --> 01:24:23,090
out because I like I don't know if we

1637
01:24:21,619 --> 01:24:25,399
can I don't even know if we can ask

1638
01:24:23,090 --> 01:24:28,369
Windows if it's going to or not like I

1639
01:24:25,399 --> 01:24:30,229
don't know how to ask Windows were you

1640
01:24:28,369 --> 01:24:32,899
planning on actually getting off your

1641
01:24:30,229 --> 01:24:34,759
lazy butt and anti-us in this font or do

1642
01:24:32,899 --> 01:24:38,239
you just decide to call it a day

1643
01:24:34,760 --> 01:24:40,159
right and so I'm not sure which one it's

1644
01:24:38,239 --> 01:24:43,819
gonna do like and I don't know if

1645
01:24:40,159 --> 01:24:46,069
there's a way to ask like to query and

1646
01:24:43,819 --> 01:24:48,259
say hey you know I asked you for

1647
01:24:46,069 --> 01:24:49,789
anti-aliasing I know you're Microsoft

1648
01:24:48,260 --> 01:24:52,130
Windows so you don't really feel super

1649
01:24:49,789 --> 01:24:55,489
compelled to actually anti-alias

1650
01:24:52,130 --> 01:24:57,920
anything so you know what what was it

1651
01:24:55,489 --> 01:24:59,569
heads or tails today when you got up in

1652
01:24:57,920 --> 01:25:01,850
the morning and we're deciding whether

1653
01:24:59,569 --> 01:25:06,229
you're rasterizer wanted to go to work

1654
01:25:01,850 --> 01:25:08,720
um and so I'm not sure if we can

1655
01:25:06,229 --> 01:25:11,029
actually get that information out by

1656
01:25:08,720 --> 01:25:18,860
using some kind of a query we might be

1657
01:25:11,029 --> 01:25:20,779
able to but I don't know I just don't

1658
01:25:18,859 --> 01:25:23,109
know I can't think offhand of what I

1659
01:25:20,779 --> 01:25:23,109
would ask

1660
01:25:27,260 --> 01:25:33,570
yeah there might be something in here

1661
01:25:30,949 --> 01:25:35,670
but I just I just can't nothing's coming

1662
01:25:33,569 --> 01:25:37,349
to mind so I'm gonna assume I can't ask

1663
01:25:35,670 --> 01:25:38,550
and I do some quick testing on this

1664
01:25:37,350 --> 01:25:39,450
machine cuz this is where we will be

1665
01:25:38,550 --> 01:25:41,430
generating fonts

1666
01:25:39,449 --> 01:25:43,649
I'm gonna see if I can determine a rule

1667
01:25:41,430 --> 01:25:46,590
of thumb for when we would want to pick

1668
01:25:43,649 --> 01:25:49,019
ours in and turn theirs off this won't

1669
01:25:46,590 --> 01:25:51,840
be a really reliable way to do it

1670
01:25:49,020 --> 01:25:53,700
because it's only being tested on one

1671
01:25:51,840 --> 01:25:55,529
install and we don't have any way of

1672
01:25:53,699 --> 01:25:57,000
knowing whether Windows will follow the

1673
01:25:55,529 --> 01:25:58,559
same rules on this install it might be

1674
01:25:57,000 --> 01:25:59,220
that depending on the DPI setting or

1675
01:25:58,560 --> 01:26:01,260
something like that

1676
01:25:59,220 --> 01:26:03,570
that it could change it and so it's not

1677
01:26:01,260 --> 01:26:05,940
gonna be reliable in that sense so what

1678
01:26:03,569 --> 01:26:08,699
I want to do here is try to get that

1679
01:26:05,939 --> 01:26:09,989
sorted out at least a little bit what

1680
01:26:08,699 --> 01:26:11,939
I'm gonna do is I'm gonna set the

1681
01:26:09,989 --> 01:26:14,269
scaling back to 1 so that means that

1682
01:26:11,939 --> 01:26:16,439
we're asking what is not to do it and

1683
01:26:14,270 --> 01:26:19,080
let me do is I'm just gonna run this a

1684
01:26:16,439 --> 01:26:20,159
couple times here and I guess I want to

1685
01:26:19,079 --> 01:26:22,199
run it actually for the command-line

1686
01:26:20,159 --> 01:26:27,029
probably so I'm gonna run one of these

1687
01:26:22,199 --> 01:26:30,149
msai go ahead and generate it deny

1688
01:26:27,029 --> 01:26:31,829
recompile that there we go so I'm gonna

1689
01:26:30,149 --> 01:26:33,809
say go ahead and generate it I'm gonna

1690
01:26:31,829 --> 01:26:36,960
look at the result and see whether or

1691
01:26:33,810 --> 01:26:39,270
not it was anti aliased so in here I'm

1692
01:26:36,960 --> 01:26:42,930
gonna you know open this up with with

1693
01:26:39,270 --> 01:26:44,910
the and then I'm gonna play with

1694
01:26:42,930 --> 01:26:46,380
the font size to see so we know that

1695
01:26:44,909 --> 01:26:48,680
it's not doing it at that font size

1696
01:26:46,380 --> 01:26:53,369
let's just do kind of a little bit of a

1697
01:26:48,680 --> 01:26:55,020
a binary search here and say well is it

1698
01:26:53,369 --> 01:27:00,149
doing it like at a really low value like

1699
01:26:55,020 --> 01:27:04,020
how about 32 you know how's it doing at

1700
01:27:00,149 --> 01:27:07,109
32 so at 32 it's definitely doing

1701
01:27:04,020 --> 01:27:08,820
something right that's a that's a thing

1702
01:27:07,109 --> 01:27:10,439
that happened one thing that's

1703
01:27:08,819 --> 01:27:15,229
interesting here is I don't understand

1704
01:27:10,439 --> 01:27:19,379
if that's 32 and we're not scaling right

1705
01:27:15,229 --> 01:27:22,079
why is this bitmap only 19 by 17 that's

1706
01:27:19,380 --> 01:27:28,140
like half the size that it should

1707
01:27:22,079 --> 01:27:30,800
actually be and I'm wondering what's

1708
01:27:28,140 --> 01:27:30,800
happening there

1709
01:27:36,760 --> 01:27:42,070
aren't we supposed to pass this negative

1710
01:27:44,619 --> 01:27:48,399
am I wrong about that

1711
01:27:57,809 --> 01:28:02,969
there we go well it's a little bit

1712
01:28:00,270 --> 01:28:04,650
better I thought you had to pass if you

1713
01:28:02,969 --> 01:28:07,288
could pass negative for the pics like

1714
01:28:04,649 --> 01:28:09,388
it's still only 20 there's no chance

1715
01:28:07,288 --> 01:28:13,050
that the sender's are twice as big are

1716
01:28:09,389 --> 01:28:15,059
they well they could be if this was a

1717
01:28:13,050 --> 01:28:19,110
lowercase W I don't actually know if it

1718
01:28:15,059 --> 01:28:20,460
is is it a lowercase W the reason I

1719
01:28:19,109 --> 01:28:24,058
passed that is negative for those of you

1720
01:28:20,460 --> 01:28:28,590
just joining us way back in the day I

1721
01:28:24,059 --> 01:28:31,590
think we looked at this you can see the

1722
01:28:28,590 --> 01:28:36,679
documentation on this this is device

1723
01:28:31,590 --> 01:28:39,270
units whereas this is character height

1724
01:28:36,679 --> 01:28:41,908
so I started cell height versus

1725
01:28:39,270 --> 01:28:43,800
character height so I thought that

1726
01:28:41,908 --> 01:28:45,899
negative was a better representation of

1727
01:28:43,800 --> 01:28:47,550
getting if I want characters that are

1728
01:28:45,899 --> 01:28:52,229
roughly this pixels I think that

1729
01:28:47,550 --> 01:28:54,929
negative is the is better right and it

1730
01:28:52,229 --> 01:29:00,348
does seem like it sort of is okay back

1731
01:28:54,929 --> 01:29:07,170
to our story let's crank it up to 128

1732
01:29:00,349 --> 01:29:10,380
see where we're at so it's still

1733
01:29:07,170 --> 01:29:12,179
anti-aliasing all the way out at 128 I

1734
01:29:10,380 --> 01:29:15,510
can't say it's doing a fabulous job

1735
01:29:12,179 --> 01:29:17,270
necessarily but it's looking okay so

1736
01:29:15,510 --> 01:29:20,270
let's go ahead and crank it up again

1737
01:29:17,270 --> 01:29:20,270
oops

1738
01:29:30,060 --> 01:29:39,750
2:56 still happening right still

1739
01:29:33,819 --> 01:29:39,750
cementing their double it again

1740
01:29:44,229 --> 01:29:50,589
all right so somewhere between 256 and

1741
01:29:47,079 --> 01:30:08,760
512 it craps out on us

1742
01:29:50,590 --> 01:30:08,760
let's see you know house 400 no good 300

1743
01:30:13,208 --> 01:30:20,738
so 300 it's still doing it so 350 anyone

1744
01:30:18,639 --> 01:30:23,139
wanna are people bettin on the screen

1745
01:30:20,738 --> 01:30:26,529
here or is anyone taking bets on when

1746
01:30:23,139 --> 01:30:28,538
the met what the magic value is on this

1747
01:30:26,529 --> 01:30:31,538
particular install of Windows still

1748
01:30:28,538 --> 01:30:34,118
happening so we're getting close because

1749
01:30:31,538 --> 01:30:37,328
we know that like 400 didn't do it but

1750
01:30:34,118 --> 01:30:45,458
350 did so like where what are we

1751
01:30:37,328 --> 01:30:57,509
talking about here windows 375 375 it's

1752
01:30:45,458 --> 01:31:00,969
off how about 365 how about Office 365

1753
01:30:57,510 --> 01:31:05,349
have you considered a subscription to

1754
01:31:00,969 --> 01:31:07,389
the world's premier office suite that

1755
01:31:05,349 --> 01:31:08,828
maybe sometimes occasionally lets you

1756
01:31:07,389 --> 01:31:09,998
log in but most of the time it just

1757
01:31:08,828 --> 01:31:11,558
doesn't because Microsoft's

1758
01:31:09,998 --> 01:31:16,389
authentication servers are busted

1759
01:31:11,559 --> 01:31:30,538
all right so 365 no dice so what do you

1760
01:31:16,389 --> 01:31:30,538
think 360 355

1761
01:31:38,679 --> 01:31:48,989
Wow so is it like 350 exactly we're

1762
01:31:46,210 --> 01:31:48,989
getting close folks

1763
01:32:01,859 --> 01:32:10,119
fifty-four I don't really need to know

1764
01:32:08,710 --> 01:32:13,779
it to this level of precision it's just

1765
01:32:10,119 --> 01:32:17,439
at this point we've come so far so

1766
01:32:13,779 --> 01:32:21,329
they're there you have it somewhere

1767
01:32:17,439 --> 01:32:28,589
between 353 and 354 Microsoft's like

1768
01:32:21,329 --> 01:32:30,600
that is where we turn it off at 353

1769
01:32:28,590 --> 01:32:35,500
pixels high

1770
01:32:30,600 --> 01:32:37,750
we need anti-alias this font at 354

1771
01:32:35,500 --> 01:32:40,359
pixels high with that it's just

1772
01:32:37,750 --> 01:32:42,579
ridiculous nobody ant know who wants to

1773
01:32:40,359 --> 01:32:44,829
see that nobody wants to see an anti

1774
01:32:42,579 --> 01:32:45,670
aliased font that big that's just that's

1775
01:32:44,829 --> 01:32:49,059
too big

1776
01:32:45,670 --> 01:32:51,909
353 is reasonable but 3/4 is totally

1777
01:32:49,060 --> 01:32:53,410
there's no way anyone wants an anti

1778
01:32:51,909 --> 01:32:55,479
aliased font that that's that's that big

1779
01:32:53,409 --> 01:32:56,619
I mean what would you why would you do

1780
01:32:55,479 --> 01:32:59,709
that right

1781
01:32:56,619 --> 01:33:02,289
nobody nobody wants that nobody wants

1782
01:32:59,710 --> 01:33:09,189
that all right so I'm gonna go ahead and

1783
01:33:02,289 --> 01:33:10,630
say in here I'm gonna say like actually

1784
01:33:09,189 --> 01:33:12,960
no this is not really to do because we

1785
01:33:10,630 --> 01:33:12,960
did it

1786
01:34:47,059 --> 01:34:56,279
right I think that's what we decided

1787
01:34:53,488 --> 01:34:59,209
so the changeover points 543 to 544

1788
01:34:56,279 --> 01:34:59,210
right

1789
01:35:48,010 --> 01:35:55,579
so let's just say that 128 is our is our

1790
01:35:52,750 --> 01:35:58,609
changeover point so we'll basically say

1791
01:35:55,579 --> 01:36:05,409
here look if the pixel height is less

1792
01:35:58,609 --> 01:36:05,409
than 128 then it's 1 otherwise it's for

1793
01:36:06,850 --> 01:36:11,990
maybe the better way to do that would be

1794
01:36:09,020 --> 01:36:15,170
to write it this way so we're like look

1795
01:36:11,989 --> 01:36:19,609
if it's over 128 then we super sample

1796
01:36:15,170 --> 01:36:21,770
otherwise we don't write I'm gonna

1797
01:36:19,609 --> 01:36:23,599
consider that a solved problem there

1798
01:36:21,770 --> 01:36:27,080
because now we know we'll always get an

1799
01:36:23,600 --> 01:36:29,750
anti-aliasing on I on at least the art

1800
01:36:27,079 --> 01:36:31,189
machines we're talking about and we

1801
01:36:29,750 --> 01:36:33,439
won't have to worry about Windows like

1802
01:36:31,189 --> 01:36:37,099
suddenly deciding to you know to poop

1803
01:36:33,439 --> 01:36:39,439
the bed on us and just like crap itself

1804
01:36:37,100 --> 01:36:41,480
and piss itself all the time when it's

1805
01:36:39,439 --> 01:36:43,759
trying to actually make these fonts

1806
01:36:41,479 --> 01:36:47,629
right so we should be able do now is say

1807
01:36:43,760 --> 01:36:49,730
look give us font that's 500 large that

1808
01:36:47,630 --> 01:36:52,659
should just work when we go over here

1809
01:36:49,729 --> 01:36:57,409
and look at it if we open this up we

1810
01:36:52,659 --> 01:37:00,170
should be able to get a correctly you

1811
01:36:57,409 --> 01:37:03,409
know subsampled w there it looks like we

1812
01:37:00,170 --> 01:37:07,520
do when if we want to drop it down to

1813
01:37:03,409 --> 01:37:09,829
some really small font like 20 y 20 high

1814
01:37:07,520 --> 01:37:12,230
we should be able to do that too

1815
01:37:09,829 --> 01:37:14,630
and open it up and that should also have

1816
01:37:12,229 --> 01:37:15,799
anti-aliasing from windows directly

1817
01:37:14,630 --> 01:37:17,329
which hopefully is higher quality

1818
01:37:15,800 --> 01:37:20,510
because it's got the TTFN outlines it

1819
01:37:17,329 --> 01:37:24,199
should be able do a better job there who

1820
01:37:20,510 --> 01:37:26,989
knows maybe he does maybe it isn't so

1821
01:37:24,199 --> 01:37:30,559
there we go and I'm gonna call that a

1822
01:37:26,989 --> 01:37:32,239
day I would say we solved both things we

1823
01:37:30,560 --> 01:37:33,440
ended up trying to solve I only will

1824
01:37:32,239 --> 01:37:36,969
actually wanted to solve one of them but

1825
01:37:33,439 --> 01:37:39,859
but the other one seemed we're solving

1826
01:37:36,970 --> 01:37:41,960
tomorrow we'll do the reader and then I

1827
01:37:39,859 --> 01:37:44,389
think we're good to go let's go ahead

1828
01:37:41,960 --> 01:37:47,569
and go to the QA brought to you by in

1829
01:37:44,390 --> 01:37:50,470
savate your your choice for deep

1830
01:37:47,569 --> 01:37:52,128
learning and AI excellence

1831
01:37:50,470 --> 01:37:57,109
[Music]

1832
01:37:52,128 --> 01:38:02,979
in Sopot of course is our sensory and AI

1833
01:37:57,109 --> 01:38:02,979
technology that monitors the stream and

1834
01:38:04,628 --> 01:38:16,639
will eventually take over the world in a

1835
01:38:07,158 --> 01:38:18,978
Skynet like scenario perhaps your

1836
01:38:16,639 --> 01:38:20,748
certificate for a large font it aliasing

1837
01:38:18,979 --> 01:38:27,079
thigh you know that's a good question

1838
01:38:20,748 --> 01:38:29,300
like do we have that you know do we

1839
01:38:27,078 --> 01:38:31,158
actually have a certificate for these

1840
01:38:29,300 --> 01:38:36,769
fonts is it signed what if what if our

1841
01:38:31,158 --> 01:38:43,029
font license expires in extract font max

1842
01:38:36,769 --> 01:38:46,579
okay so X 13 pixel says extract font

1843
01:38:43,029 --> 01:38:48,529
match systems X value is set using text

1844
01:38:46,578 --> 01:38:50,299
metrics TM overhanging if the material

1845
01:38:48,529 --> 01:38:50,748
should only have plan to Maxis y value

1846
01:38:50,300 --> 01:38:53,239
um

1847
01:38:50,748 --> 01:38:55,219
well so what we decided to do there is

1848
01:38:53,238 --> 01:38:58,158
we don't actually know what that value

1849
01:38:55,219 --> 01:39:03,708
meant so we just decided to add it to

1850
01:38:58,158 --> 01:39:06,948
both because it can't hurt right so we

1851
01:39:03,708 --> 01:39:09,498
just said screw it add it to both it can

1852
01:39:06,948 --> 01:39:12,408
be as big as we want it to be right as

1853
01:39:09,498 --> 01:39:14,300
long as it's not under science if it's

1854
01:39:12,408 --> 01:39:16,608
oversized no one cares that's why we

1855
01:39:14,300 --> 01:39:19,128
also had 56 so I'm fine to just leave it

1856
01:39:16,609 --> 01:39:20,809
like I don't want to know whether those

1857
01:39:19,128 --> 01:39:21,979
things I don't want to know what my

1858
01:39:20,809 --> 01:39:28,909
girls I was thinking I just want it to

1859
01:39:21,979 --> 01:39:31,609
happen right with this only work for

1860
01:39:28,908 --> 01:39:35,029
mono spaced fonts no it works just fine

1861
01:39:31,609 --> 01:39:36,320
with non monospace fonts what is the

1862
01:39:35,029 --> 01:39:38,929
difference between the freetype and

1863
01:39:36,319 --> 01:39:44,299
TrueType fonts do both do the subpixel

1864
01:39:38,929 --> 01:39:46,668
rasterization um I'm not sure exactly

1865
01:39:44,300 --> 01:39:51,070
what you mean by that do you mean the

1866
01:39:46,668 --> 01:39:51,069
difference between a TTFN and an OT f

1867
01:39:51,429 --> 01:39:56,779
three types like a library for

1868
01:39:54,429 --> 01:39:59,689
implementing fonts right it's not a font

1869
01:39:56,779 --> 01:40:01,248
format is it there's an open type format

1870
01:39:59,689 --> 01:40:03,769
is that what you're referring to there's

1871
01:40:01,248 --> 01:40:05,658
also an Adobe type 1 format and a true

1872
01:40:03,769 --> 01:40:06,020
type format are you just asking with the

1873
01:40:05,658 --> 01:40:11,049
difference

1874
01:40:06,020 --> 01:40:20,380
is oh whoops

1875
01:40:11,050 --> 01:40:20,380
did I did I make a dyslexic here I did

1876
01:40:26,270 --> 01:40:34,989
it's 353 to 354 thank you I've read the

1877
01:40:32,659 --> 01:40:34,988
sequel

1878
01:40:38,350 --> 01:40:43,400
did you try the cocoon editor could its

1879
01:40:41,238 --> 01:40:45,919
behavior be achieved and for coder um I

1880
01:40:43,399 --> 01:40:47,569
I didn't actually try it myself because

1881
01:40:45,920 --> 01:40:50,000
I'm not sure that I really care about

1882
01:40:47,569 --> 01:40:53,420
actually using it but I did go and read

1883
01:40:50,000 --> 01:40:55,520
about like what it does um as far as its

1884
01:40:53,420 --> 01:40:58,130
whether it could be it it can be

1885
01:40:55,520 --> 01:41:00,080
achieved in the for coder it's kind of

1886
01:40:58,130 --> 01:41:01,789
like a difficult question because for

1887
01:41:00,079 --> 01:41:06,219
coder allows you to program it using C

1888
01:41:01,789 --> 01:41:09,279
so sure you could implement the kind of

1889
01:41:06,219 --> 01:41:12,199
composition based parsing that it does

1890
01:41:09,279 --> 01:41:14,479
but you'd be doing a lot of work because

1891
01:41:12,199 --> 01:41:21,469
for coder by default doesn't have those

1892
01:41:14,479 --> 01:41:23,059
primitives so I don't know and

1893
01:41:21,469 --> 01:41:24,980
especially if you wanted those things

1894
01:41:23,060 --> 01:41:27,100
I'm not sure why you would use for coder

1895
01:41:24,979 --> 01:41:32,209
instead of just using coding Nate

1896
01:41:27,100 --> 01:41:33,560
connais because I mean if you already

1897
01:41:32,210 --> 01:41:35,239
have an editor that does things the way

1898
01:41:33,560 --> 01:41:37,450
you want you should just use that editor

1899
01:41:35,238 --> 01:41:37,449
right

1900
01:41:48,220 --> 01:41:53,780
didn't msn say something about small

1901
01:41:51,380 --> 01:41:56,539
fonts - yeah if it gets too small it

1902
01:41:53,779 --> 01:41:58,069
says it won't anti-alias them that we

1903
01:41:56,539 --> 01:41:59,869
don't have to care about because we

1904
01:41:58,069 --> 01:42:02,090
won't be getting fonts that are too

1905
01:41:59,869 --> 01:42:05,059
small so that i don't really worry about

1906
01:42:02,090 --> 01:42:07,159
but the two large fonts i do because we

1907
01:42:05,060 --> 01:42:09,110
may well want some large fonts for

1908
01:42:07,159 --> 01:42:11,210
certain circumstances I don't know and

1909
01:42:09,109 --> 01:42:12,859
so I really didn't want to be in a

1910
01:42:11,210 --> 01:42:16,220
position where if I asked for a font

1911
01:42:12,859 --> 01:42:17,779
that was a particular size if I wanted

1912
01:42:16,220 --> 01:42:22,699
some large letters or something I don't

1913
01:42:17,779 --> 01:42:23,960
want to suddenly get crispy edges so I

1914
01:42:22,699 --> 01:42:25,639
just wanted to make sure that we don't

1915
01:42:23,960 --> 01:42:28,119
leave did that there wasn't like a time

1916
01:42:25,640 --> 01:42:31,390
bomb lurking in there that would would

1917
01:42:28,119 --> 01:42:31,390
screw us up

1918
01:42:50,118 --> 01:42:56,198
did you not check 500 and it worked no

1919
01:42:53,389 --> 01:42:58,880
it didn't it doesn't anti-alias at 500

1920
01:42:56,198 --> 01:43:04,519
Windows doesn't we do but Windows

1921
01:42:58,880 --> 01:43:06,590
doesn't that's how we knew I did a 512

1922
01:43:04,520 --> 01:43:07,940
size font and it didn't get anti-alias

1923
01:43:06,590 --> 01:43:11,260
that's how I initially noticed the fact

1924
01:43:07,939 --> 01:43:11,259
that the anti-aliasing wasn't working

1925
01:43:28,850 --> 01:43:34,000
and aeleus wasn't working

1926
01:43:49,659 --> 01:44:00,090
so if we have no further questions

1927
01:43:54,720 --> 01:44:00,090
github bug report oh you just mean

1928
01:44:11,659 --> 01:44:20,659
too many things open here no bad wrong

1929
01:44:16,069 --> 01:44:22,219
ah right okay well actually we should do

1930
01:44:20,659 --> 01:44:27,079
two things on the github since no one's

1931
01:44:22,220 --> 01:44:30,490
asking any questions in here this is

1932
01:44:27,079 --> 01:44:30,489
done now right

1933
01:44:39,789 --> 01:44:51,079
so that's good and then we want to fix

1934
01:44:46,729 --> 01:44:53,599
this I think this is correct

1935
01:44:51,079 --> 01:44:55,279
we haven't actually I mean I looked at

1936
01:44:53,600 --> 01:44:58,730
this actually a couple of days ago when

1937
01:44:55,279 --> 01:44:59,569
it was first filed and I think it's

1938
01:44:58,729 --> 01:45:02,209
correct because if you look at what

1939
01:44:59,569 --> 01:45:06,679
happens here we do an is number on this

1940
01:45:02,210 --> 01:45:09,890
thing and so we wrote we you know we try

1941
01:45:06,680 --> 01:45:13,130
to enter this loop but if the tokenizer

1942
01:45:09,890 --> 01:45:15,590
was a dot if that's what we were at his

1943
01:45:13,130 --> 01:45:19,359
number would fail and we would never

1944
01:45:15,590 --> 01:45:21,650
enter this loop so this is correct

1945
01:45:19,359 --> 01:45:25,909
because otherwise we never get in here

1946
01:45:21,649 --> 01:45:27,829
right so I do think that's correct I

1947
01:45:25,909 --> 01:45:29,659
think what's happening is the reason we

1948
01:45:27,829 --> 01:45:32,319
don't notice it is because we never

1949
01:45:29,659 --> 01:45:34,519
parse fractional numbers at the moment

1950
01:45:32,319 --> 01:45:38,210
that start with a dot

1951
01:45:34,520 --> 01:45:39,740
I'm guessing or we just skip them so

1952
01:45:38,210 --> 01:45:43,369
it's like wrong or something I don't

1953
01:45:39,739 --> 01:45:45,139
well let's take a look I'm not sure what

1954
01:45:43,369 --> 01:45:54,439
I'm not sure why we should have noticed

1955
01:45:45,140 --> 01:45:58,369
this so it's a little bit weird oh oh I

1956
01:45:54,439 --> 01:46:02,619
know why I know why because we don't

1957
01:45:58,369 --> 01:46:06,460
write them out as those kinds of numbers

1958
01:46:02,619 --> 01:46:06,460
let's let's take a look

1959
01:46:08,170 --> 01:46:12,529
yeah so that's why we just wrote these

1960
01:46:11,029 --> 01:46:14,929
out as raw values because they're just

1961
01:46:12,529 --> 01:46:20,019
edited so we would never know we never

1962
01:46:14,930 --> 01:46:23,960
actually use that code code path oops

1963
01:46:20,020 --> 01:46:26,750
that's why um so yeah I do think that

1964
01:46:23,960 --> 01:46:28,609
should be fixed the way you suggest the

1965
01:46:26,750 --> 01:46:31,220
idea here is that when we come through

1966
01:46:28,609 --> 01:46:33,199
here and see this dot in order to do

1967
01:46:31,220 --> 01:46:36,380
this part of the routine we want to do

1968
01:46:33,199 --> 01:46:41,510
in advance cares to skip the dot and

1969
01:46:36,380 --> 01:46:44,380
start parsing the rest of it right so I

1970
01:46:41,510 --> 01:46:44,380
do think that's correct

1971
01:47:11,220 --> 01:47:17,530
so at least that is now a little bit

1972
01:47:15,189 --> 01:47:19,750
more logical so we come through here we

1973
01:47:17,529 --> 01:47:21,579
see that it's a dot we skip the dot and

1974
01:47:19,750 --> 01:47:22,960
then we just look for any numbers and

1975
01:47:21,579 --> 01:47:25,659
say that those are going to add

1976
01:47:22,960 --> 01:47:27,730
fractional values to our thing it's a

1977
01:47:25,659 --> 01:47:30,489
crappy parser anyway I mean it's not

1978
01:47:27,729 --> 01:47:32,139
very good so it's not like this is super

1979
01:47:30,489 --> 01:47:37,989
critical either way but I think that

1980
01:47:32,140 --> 01:47:40,869
should work are there any plans for new

1981
01:47:37,989 --> 01:47:46,449
hammock on we don't do handmade con at

1982
01:47:40,869 --> 01:47:51,099
the moment but there is if you go to

1983
01:47:46,449 --> 01:47:54,010
handmade con-com there is a list anytime

1984
01:47:51,100 --> 01:47:56,470
people run unofficial conferences we try

1985
01:47:54,010 --> 01:47:56,920
if they sort of our low-level

1986
01:47:56,470 --> 01:48:00,789
programming

1987
01:47:56,920 --> 01:48:02,890
oriented we try to stick them on here so

1988
01:48:00,789 --> 01:48:03,519
there is one potentially that may

1989
01:48:02,890 --> 01:48:06,820
interest you

1990
01:48:03,520 --> 01:48:10,410
it doesn't have details yet but at

1991
01:48:06,819 --> 01:48:10,409
Seattle Center in November

1992
01:48:10,810 --> 01:48:20,800
abner coin Bray is running one and he's

1993
01:48:17,199 --> 01:48:24,880
the guy who organized handmade network

1994
01:48:20,800 --> 01:48:30,130
as well so he's got a lot of experience

1995
01:48:24,880 --> 01:48:32,590
organizing stuff in this space so put

1996
01:48:30,130 --> 01:48:34,840
your email address in there I don't know

1997
01:48:32,590 --> 01:48:36,640
anything about it yet because you know

1998
01:48:34,840 --> 01:48:40,329
the details haven't been fleshed out but

1999
01:48:36,640 --> 01:48:42,280
it's apparently booked and the space is

2000
01:48:40,329 --> 01:48:46,059
booked and it's you know going to happen

2001
01:48:42,279 --> 01:48:49,599
and so if you are interested in that put

2002
01:48:46,060 --> 01:48:52,360
your email in in here and you should get

2003
01:48:49,600 --> 01:48:54,670
a mailing when there's an actual like

2004
01:48:52,359 --> 01:48:57,750
here's what you know what's gonna be

2005
01:48:54,670 --> 01:48:57,750
happening at the conference and so on

2006
01:48:59,868 --> 01:49:04,039
I followed your suggestions and use

2007
01:49:01,939 --> 01:49:05,899
Roboto and droid sans' for my desktop

2008
01:49:04,039 --> 01:49:07,099
they look good thanks for that Joe any

2009
01:49:05,899 --> 01:49:14,649
other suggestions for the good-looking

2010
01:49:07,099 --> 01:49:14,650
font um no I don't think so

2011
01:49:15,250 --> 01:49:20,840
that's that's just what came to mind as

2012
01:49:19,460 --> 01:49:24,889
some fonts that are reasonable Roboto is

2013
01:49:20,840 --> 01:49:28,750
a pretty good fun um you can go you know

2014
01:49:24,889 --> 01:49:28,750
it's not perfect but you can go to like

2015
01:49:30,010 --> 01:49:36,730
this and if you look at trending

2016
01:49:38,020 --> 01:49:43,400
sans-serif fonts I mean hey there's

2017
01:49:40,340 --> 01:49:49,969
Roboto right at the top open sans is

2018
01:49:43,399 --> 01:49:54,250
pretty good you can find fonts that are

2019
01:49:49,969 --> 01:49:56,149
popular with designers pretty quickly I

2020
01:49:54,250 --> 01:49:58,539
don't I don't have a lot of those

2021
01:49:56,149 --> 01:49:58,539
suggestions

2022
01:50:02,559 --> 01:50:05,460
right

2023
01:50:12,640 --> 01:50:16,600
but that would get you started

2024
01:50:25,760 --> 01:50:27,789
Oh

2025
01:50:42,448 --> 01:50:47,519
all right seems like we're all good no

2026
01:50:45,310 --> 01:50:51,330
further questions

2027
01:50:47,520 --> 01:50:51,330
no further questions

2028
01:50:51,750 --> 01:50:56,609
alright let's go ahead and close down

2029
01:50:57,719 --> 01:51:00,969
thank you everyone for joining me for

2030
01:50:59,529 --> 01:51:02,979
those for the handmade hero it's been a

2031
01:51:00,969 --> 01:51:04,390
pleasure coding with you as always if

2032
01:51:02,979 --> 01:51:06,129
you would like to follow along the

2033
01:51:04,390 --> 01:51:07,570
series at home you can always peer to

2034
01:51:06,130 --> 01:51:09,489
the game on handmade hero org

2035
01:51:07,569 --> 01:51:11,920
and it comes with the source code so you

2036
01:51:09,488 --> 01:51:13,659
could play around with it we will be

2037
01:51:11,920 --> 01:51:15,430
doing the importer for fonts tomorrow

2038
01:51:13,659 --> 01:51:18,039
which is basically just reading that

2039
01:51:15,430 --> 01:51:19,900
text file that we output to move all

2040
01:51:18,039 --> 01:51:23,079
those piece of font information into

2041
01:51:19,899 --> 01:51:25,539
like a packed resource the way that

2042
01:51:23,079 --> 01:51:27,189
we've been doing it it's just reading it

2043
01:51:25,539 --> 01:51:29,079
from a text file so it shouldn't be too

2044
01:51:27,189 --> 01:51:31,719
bad but it is a little bit of busy work

2045
01:51:29,079 --> 01:51:35,469
got to do it get it checked off and then

2046
01:51:31,719 --> 01:51:36,250
we can basically sign off I think asset

2047
01:51:35,469 --> 01:51:38,109
importing because that would be

2048
01:51:36,250 --> 01:51:41,439
everything that means you can generate

2049
01:51:38,109 --> 01:51:43,238
everything from just source files and we

2050
01:51:41,439 --> 01:51:44,879
can also at that point maybe think about

2051
01:51:43,238 --> 01:51:49,019
what we want to do for some font stuff

2052
01:51:44,880 --> 01:51:53,350
pick some fonts and check them in there

2053
01:51:49,020 --> 01:51:55,650
to the source directories I probably

2054
01:51:53,350 --> 01:51:57,760
want to do some stuff like that as well

2055
01:51:55,649 --> 01:51:59,589
I'll be back here tomorrow after doing

2056
01:51:57,760 --> 01:52:01,270
that same time same place until then

2057
01:51:59,590 --> 01:52:02,170
have fun program everyone and I'll see

2058
01:52:01,270 --> 01:52:04,739
you on the Internet

2059
01:52:02,170 --> 01:52:04,739
thank you everybody

