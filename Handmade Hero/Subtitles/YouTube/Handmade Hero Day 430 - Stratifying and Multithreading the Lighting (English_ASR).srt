1
00:00:01,520 --> 00:00:05,789
hello everyone and welcome to hand made

2
00:00:04,349 --> 00:00:09,480
here on the show we code a complete game

3
00:00:05,790 --> 00:00:12,419
live on stream we are gonna be doing I

4
00:00:09,480 --> 00:00:14,548
think today I'd like to take a look at

5
00:00:12,419 --> 00:00:16,259
some lighting stuff that we mentioned

6
00:00:14,548 --> 00:00:20,278
let me see if I've got it here I know we

7
00:00:16,260 --> 00:00:22,550
did some drawing all right we put a

8
00:00:20,278 --> 00:00:24,778
little multi red sand thing in there

9
00:00:22,550 --> 00:00:27,060
yesterday and we're gonna have to look

10
00:00:24,778 --> 00:00:28,410
at that a little more detail but first I

11
00:00:27,059 --> 00:00:31,409
think I might also address the

12
00:00:28,410 --> 00:00:33,359
stratified sampling stuff just to get

13
00:00:31,410 --> 00:00:36,119
everything in there I'd like to get all

14
00:00:33,359 --> 00:00:38,159
three of these in there probably before

15
00:00:36,119 --> 00:00:40,109
we start going down and turning the

16
00:00:38,159 --> 00:00:42,569
crank on any one individual thing

17
00:00:40,109 --> 00:00:45,420
because one of the problems is that

18
00:00:42,570 --> 00:00:48,920
they're kind of interrelated right I

19
00:00:45,420 --> 00:00:51,329
don't really know how to

20
00:00:48,920 --> 00:00:53,340
compartmentalize them very well other

21
00:00:51,329 --> 00:00:54,929
than saying you know well we know that

22
00:00:53,340 --> 00:00:56,370
each of these might be useful and might

23
00:00:54,929 --> 00:00:57,689
make a difference and so I kind of want

24
00:00:56,369 --> 00:00:59,339
to have them in there as we start to

25
00:00:57,689 --> 00:01:01,858
play with any given one of them and try

26
00:00:59,340 --> 00:01:03,239
to improve the variance I'd like to kind

27
00:01:01,859 --> 00:01:05,820
of know what we're dealing with here

28
00:01:03,238 --> 00:01:08,340
right so I'm gonna take a look at the

29
00:01:05,819 --> 00:01:09,389
stratified sampling stuff today and in

30
00:01:08,340 --> 00:01:10,680
order to take a look at the stratified

31
00:01:09,390 --> 00:01:12,750
sampling stuff I think what we might

32
00:01:10,680 --> 00:01:15,720
want to do is put in a real random

33
00:01:12,750 --> 00:01:19,650
number generator at least a reasonable

34
00:01:15,719 --> 00:01:22,379
one and just maybe get a little bit of a

35
00:01:19,650 --> 00:01:24,210
feel for how that stuff is going so you

36
00:01:22,379 --> 00:01:25,500
know I'm not a number theory guy so I'm

37
00:01:24,209 --> 00:01:26,938
not really gonna spend a lot of time

38
00:01:25,500 --> 00:01:29,099
talking to you about random number

39
00:01:26,938 --> 00:01:32,158
generators in any real depth because

40
00:01:29,099 --> 00:01:34,109
they're not my area of expertise I tend

41
00:01:32,159 --> 00:01:38,579
to just go with the following method

42
00:01:34,109 --> 00:01:40,769
which is that trust that some number of

43
00:01:38,578 --> 00:01:44,339
theory people out there have done a good

44
00:01:40,769 --> 00:01:47,670
job making random number generators but

45
00:01:44,340 --> 00:01:49,649
that I don't know who they are and then

46
00:01:47,670 --> 00:01:52,019
create some kinds of tests that are

47
00:01:49,649 --> 00:01:54,810
representative of how I want to be using

48
00:01:52,019 --> 00:01:56,670
my random number generator and verify

49
00:01:54,810 --> 00:01:59,340
which ones of the random number

50
00:01:56,670 --> 00:02:01,379
generators that they have created work

51
00:01:59,340 --> 00:02:03,600
well with the constraints that I want

52
00:02:01,379 --> 00:02:05,218
right so that's my typical approach to

53
00:02:03,599 --> 00:02:07,798
random number generation is like saying

54
00:02:05,218 --> 00:02:09,478
okay look I don't know how to make a

55
00:02:07,799 --> 00:02:12,480
good random number generator it would

56
00:02:09,479 --> 00:02:13,770
take me some time to study to learn what

57
00:02:12,479 --> 00:02:16,590
I would need to know to really

58
00:02:13,770 --> 00:02:18,150
be good at that right lots of people

59
00:02:16,590 --> 00:02:19,950
have made random number generators but I

60
00:02:18,150 --> 00:02:24,439
don't know which of them to trust so

61
00:02:19,949 --> 00:02:26,879
what I can do is make tests that show me

62
00:02:24,439 --> 00:02:29,009
visually whether or not a random number

63
00:02:26,879 --> 00:02:31,319
generator is doing what I need and it

64
00:02:29,009 --> 00:02:33,959
select one that's the fastest one

65
00:02:31,319 --> 00:02:36,180
probably that satisfies that test that's

66
00:02:33,960 --> 00:02:37,560
all I really need right and that's a

67
00:02:36,180 --> 00:02:40,170
nice luxury that we have in game

68
00:02:37,560 --> 00:02:44,030
development that wouldn't fly in

69
00:02:40,169 --> 00:02:46,379
cryptographic security for example

70
00:02:44,030 --> 00:02:48,990
because there there is nothing to

71
00:02:46,379 --> 00:02:50,849
visualize in cryptography whether

72
00:02:48,990 --> 00:02:52,740
something is breakable or not isn't

73
00:02:50,849 --> 00:02:54,840
necessarily visible to the eye now

74
00:02:52,740 --> 00:02:57,000
obvious problems may be visible to the

75
00:02:54,840 --> 00:02:59,849
eye but non-obvious problems that are

76
00:02:57,000 --> 00:03:01,680
still exploitable may not be and so

77
00:02:59,849 --> 00:03:03,210
there's plenty of fields where you need

78
00:03:01,680 --> 00:03:05,189
to really know you're number theory and

79
00:03:03,210 --> 00:03:06,900
have a really good idea about how these

80
00:03:05,189 --> 00:03:08,759
things work and be very up on the field

81
00:03:06,900 --> 00:03:10,230
in order to make a good decision about

82
00:03:08,759 --> 00:03:13,769
where you would get your entropy from

83
00:03:10,229 --> 00:03:15,179
right game development isn't really one

84
00:03:13,770 --> 00:03:17,550
of them unless you're talking about

85
00:03:15,180 --> 00:03:19,590
securing the channel of a multiplayer

86
00:03:17,550 --> 00:03:21,270
game let's say in which case you're back

87
00:03:19,590 --> 00:03:22,590
to cryptography but assuming you're

88
00:03:21,270 --> 00:03:24,240
talking about what we normally care

89
00:03:22,590 --> 00:03:27,120
about in terms of random number

90
00:03:24,240 --> 00:03:31,010
generation which is visual effects or

91
00:03:27,120 --> 00:03:33,450
gameplay distribution of things right

92
00:03:31,009 --> 00:03:36,840
what you can typically do is just create

93
00:03:33,449 --> 00:03:38,250
some test that shows the output from a

94
00:03:36,840 --> 00:03:40,590
typical run of the NAND emember

95
00:03:38,250 --> 00:03:42,539
generator in the situation did you care

96
00:03:40,590 --> 00:03:45,629
about and then you can usually evaluate

97
00:03:42,539 --> 00:03:48,719
it from that and that's and that's it

98
00:03:45,629 --> 00:03:50,280
right so in our case for example what we

99
00:03:48,719 --> 00:03:52,199
can do is we can look at what the

100
00:03:50,280 --> 00:03:54,479
distribution of rays shot by a random

101
00:03:52,199 --> 00:03:56,189
number generator is and then we can look

102
00:03:54,479 --> 00:03:58,579
to see whether that distribution of rays

103
00:03:56,189 --> 00:04:00,870
is giving us some kind of an unfortunate

104
00:03:58,580 --> 00:04:02,250
clustering that we don't like if that's

105
00:04:00,870 --> 00:04:03,870
the case then we know that that random

106
00:04:02,250 --> 00:04:05,520
node renter isn't quite what we need and

107
00:04:03,870 --> 00:04:08,219
we can use one that's more sophisticated

108
00:04:05,520 --> 00:04:10,140
or different if we aren't seeing that if

109
00:04:08,219 --> 00:04:12,780
we're if it looks like the random number

110
00:04:10,139 --> 00:04:14,309
pattern is pretty stable I'm pretty

111
00:04:12,780 --> 00:04:15,360
consistent then we really just don't

112
00:04:14,310 --> 00:04:18,079
have that problem you don't need to

113
00:04:15,360 --> 00:04:18,080
consider it much further

114
00:04:20,970 --> 00:04:24,819
so that's really that my take on on

115
00:04:23,439 --> 00:04:27,389
random number generation that's how I

116
00:04:24,819 --> 00:04:29,759
typically view random number generation

117
00:04:27,389 --> 00:04:32,110
and so what I would say about that is

118
00:04:29,759 --> 00:04:33,848
that's how we're gonna approach it for

119
00:04:32,110 --> 00:04:36,280
this problem and probably any problem in

120
00:04:33,848 --> 00:04:38,800
handmade Hira and we're not gonna dig

121
00:04:36,279 --> 00:04:40,269
any deeper into it than that because

122
00:04:38,800 --> 00:04:42,220
that's really not my field of expertise

123
00:04:40,269 --> 00:04:43,629
and I wouldn't really have much to say

124
00:04:42,220 --> 00:04:45,550
right I just feel like I don't know

125
00:04:43,629 --> 00:04:47,949
there's some numbers that come out of it

126
00:04:45,550 --> 00:04:51,520
right and that's not particularly

127
00:04:47,949 --> 00:04:54,610
valuable alright so the first thing we

128
00:04:51,519 --> 00:04:55,839
need to do here regardless and this has

129
00:04:54,610 --> 00:04:58,389
nothing to do with the random number

130
00:04:55,839 --> 00:05:01,029
generator this is even just basic before

131
00:04:58,389 --> 00:05:03,668
we even get there we're gonna need a way

132
00:05:01,029 --> 00:05:06,579
to see what's going on because right now

133
00:05:03,668 --> 00:05:08,918
we have no idea right right now all we

134
00:05:06,579 --> 00:05:15,519
know is what we see on the screen and

135
00:05:08,918 --> 00:05:19,810
what we see on the screen right oops is

136
00:05:15,519 --> 00:05:22,329
as follows here we go

137
00:05:19,810 --> 00:05:23,978
so here is our screen and here is our

138
00:05:22,329 --> 00:05:25,418
lighting and what we can see from the

139
00:05:23,978 --> 00:05:27,968
lighting is that we get a little bit of

140
00:05:25,418 --> 00:05:30,459
flicker we would like to reduce that

141
00:05:27,968 --> 00:05:32,860
flicker but we have no idea

142
00:05:30,459 --> 00:05:35,769
beyond that what's actually going on

143
00:05:32,860 --> 00:05:37,479
right I mean as I move around this world

144
00:05:35,769 --> 00:05:39,250
it looks like the lighting is working

145
00:05:37,478 --> 00:05:41,649
relatively well and it looks like it's

146
00:05:39,250 --> 00:05:43,478
fairly accurate so we don't have much

147
00:05:41,649 --> 00:05:45,698
reason to believe that for example our

148
00:05:43,478 --> 00:05:47,860
ray cast is totally wrong but on the

149
00:05:45,699 --> 00:05:49,598
other hand we have no actual hard

150
00:05:47,860 --> 00:05:51,218
evidence that the Ray cast is really

151
00:05:49,598 --> 00:05:53,649
even doing your ray cast we don't know

152
00:05:51,218 --> 00:05:56,519
we're not drawing anything so what I'd

153
00:05:53,649 --> 00:06:00,250
like to start with before we investigate

154
00:05:56,519 --> 00:06:03,068
that aspect of the city of the program

155
00:06:00,250 --> 00:06:05,500
any further is I would like to figure

156
00:06:03,069 --> 00:06:09,250
out some way to draw a say for example

157
00:06:05,500 --> 00:06:10,870
one of these squares be able to pick one

158
00:06:09,250 --> 00:06:14,468
of the lighting points on it and say

159
00:06:10,870 --> 00:06:17,889
let's look on any given frame let's see

160
00:06:14,468 --> 00:06:20,709
what ray directions it is sampling right

161
00:06:17,889 --> 00:06:22,990
just a basic visualization tool like

162
00:06:20,709 --> 00:06:27,549
that would be nice because it would let

163
00:06:22,990 --> 00:06:29,199
us know whether we're even sampling in a

164
00:06:27,550 --> 00:06:31,750
reasonable set of directions to begin

165
00:06:29,199 --> 00:06:32,610
with right I expect to see a nice sort

166
00:06:31,750 --> 00:06:35,490
of random

167
00:06:32,610 --> 00:06:37,680
shooting out of the hemisphere with no

168
00:06:35,490 --> 00:06:40,079
real correlation just some random white

169
00:06:37,680 --> 00:06:42,090
noise there right so if we were to look

170
00:06:40,079 --> 00:06:44,818
down and say this one I would just see

171
00:06:42,089 --> 00:06:46,709
like a bunch of random line shooting out

172
00:06:44,819 --> 00:06:47,699
of it in all different directions but we

173
00:06:46,709 --> 00:06:49,680
don't know that that's what we'd

174
00:06:47,699 --> 00:06:51,180
actually see maybe we'd see them all

175
00:06:49,680 --> 00:06:52,259
shooting one direction one frame in all

176
00:06:51,180 --> 00:06:54,120
shooting another direction on another

177
00:06:52,259 --> 00:06:56,340
frame and that would give us some

178
00:06:54,120 --> 00:06:58,978
information that some of our flickr is

179
00:06:56,339 --> 00:07:01,138
actually coming from just really biased

180
00:06:58,978 --> 00:07:02,639
sampling that we could get rid of with

181
00:07:01,139 --> 00:07:03,960
stratified sampling or a better in a

182
00:07:02,639 --> 00:07:07,769
number generator or blue noise or bla

183
00:07:03,959 --> 00:07:09,598
bla bla bla bla right so that's more

184
00:07:07,769 --> 00:07:11,728
what I want to look at today is just

185
00:07:09,598 --> 00:07:13,408
like let's get into some sort of a

186
00:07:11,728 --> 00:07:15,959
position where we can assess our

187
00:07:13,408 --> 00:07:17,610
sampling method at all then take a look

188
00:07:15,959 --> 00:07:19,228
at whether the random numbers need to be

189
00:07:17,610 --> 00:07:21,090
improved then take a look at whether

190
00:07:19,228 --> 00:07:23,250
stratified means to happen in general

191
00:07:21,089 --> 00:07:24,899
and then we'll we can be a little bit

192
00:07:23,250 --> 00:07:27,750
more satisfied that our sampling

193
00:07:24,899 --> 00:07:29,968
direction is not part of our problem

194
00:07:27,750 --> 00:07:34,620
which right now we don't know it could

195
00:07:29,968 --> 00:07:36,870
very well be all right so if I remember

196
00:07:34,620 --> 00:07:40,139
correctly at one point we did actually

197
00:07:36,870 --> 00:07:41,939
make a way to draw a line I think I

198
00:07:40,139 --> 00:07:44,579
don't actually know if that's true I

199
00:07:41,939 --> 00:07:45,810
think a long time ago we did though so

200
00:07:44,579 --> 00:07:47,149
I'm gonna take a look and see if that's

201
00:07:45,810 --> 00:07:50,370
true

202
00:07:47,149 --> 00:07:53,120
so there is a line segment call so in

203
00:07:50,370 --> 00:07:57,810
theory it seems like we would be able to

204
00:07:53,120 --> 00:07:59,728
have some kind of a of a line drawn in

205
00:07:57,810 --> 00:08:01,560
the direction of sampling so what I'd

206
00:07:59,728 --> 00:08:03,959
like to do here is sort of put this push

207
00:08:01,560 --> 00:08:06,750
line segment call into action if

208
00:08:03,959 --> 00:08:09,810
possible by loading up goop I did not

209
00:08:06,750 --> 00:08:13,649
load up our project file there we go

210
00:08:09,810 --> 00:08:16,978
by going in here and sort of trying to

211
00:08:13,649 --> 00:08:18,778
figure out a way to extract what

212
00:08:16,978 --> 00:08:23,098
directions were sampled from something

213
00:08:18,778 --> 00:08:24,990
and draw them so in here I'm just going

214
00:08:23,098 --> 00:08:29,250
to go ahead and say all right let's

215
00:08:24,990 --> 00:08:31,860
let's take the lighting code and in here

216
00:08:29,250 --> 00:08:34,918
we've got this output lighting points

217
00:08:31,860 --> 00:08:37,050
for curse function what if we just said

218
00:08:34,918 --> 00:08:39,299
okay one of the things that we want to

219
00:08:37,049 --> 00:08:42,418
do in here where we do out letting

220
00:08:39,299 --> 00:08:44,639
points in addition to doing this we're

221
00:08:42,418 --> 00:08:45,879
also going to do something that outputs

222
00:08:44,639 --> 00:08:50,289
a bunch of direct

223
00:08:45,879 --> 00:08:52,840
sampling lines right so how would we do

224
00:08:50,289 --> 00:08:54,519
that well in theory we might even be

225
00:08:52,840 --> 00:08:56,139
able to do it in here somewhere inside

226
00:08:54,519 --> 00:08:59,259
compute light propagation I don't know

227
00:08:56,139 --> 00:09:01,090
how smart of an idea that would be but

228
00:08:59,259 --> 00:09:03,189
for example what we could do is say look

229
00:09:01,090 --> 00:09:05,080
here in sample Hemisphere we get a bunch

230
00:09:03,190 --> 00:09:07,680
of these sample directions what we could

231
00:09:05,080 --> 00:09:09,730
do in here is is try to draw them right

232
00:09:07,679 --> 00:09:10,839
the reason I don't really like doing

233
00:09:09,730 --> 00:09:12,370
that is because we don't know whether

234
00:09:10,840 --> 00:09:14,470
we're set up in here for that and we're

235
00:09:12,370 --> 00:09:16,000
introducing some extra coding here so

236
00:09:14,470 --> 00:09:17,980
what I might do instead is say look

237
00:09:16,000 --> 00:09:21,340
let's put the code for drawing those out

238
00:09:17,980 --> 00:09:23,170
here somewhere right so if I'm going to

239
00:09:21,340 --> 00:09:26,560
do output letting points for curse right

240
00:09:23,169 --> 00:09:29,309
after that I'm gonna do something where

241
00:09:26,559 --> 00:09:31,539
I draw some of these line segments okay

242
00:09:29,309 --> 00:09:34,209
and what I'm going to do is I'm gonna

243
00:09:31,539 --> 00:09:37,419
say alright there's a base P right so

244
00:09:34,210 --> 00:09:38,800
there's a there's a base B here and I

245
00:09:37,419 --> 00:09:42,839
don't care what the color is color can

246
00:09:38,799 --> 00:09:42,839
just be white for now it doesn't matter

247
00:09:44,820 --> 00:09:48,520
and we'll think about that in a second

248
00:09:47,019 --> 00:09:49,720
what we want that to be I don't know

249
00:09:48,519 --> 00:09:50,919
what the thickness should be we'll tune

250
00:09:49,720 --> 00:09:53,259
that later when we see how thick it

251
00:09:50,919 --> 00:09:58,809
actually is but then we just need a base

252
00:09:53,259 --> 00:10:04,360
P plus you know a sort of a draw length

253
00:09:58,809 --> 00:10:06,549
times a direction that's all we really

254
00:10:04,360 --> 00:10:10,000
need we know we've got that white bitmap

255
00:10:06,549 --> 00:10:13,469
situation going on here because we don't

256
00:10:10,000 --> 00:10:13,470
really want to texture these guys at all

257
00:10:14,850 --> 00:10:20,950
and we've got the render group so if I

258
00:10:17,799 --> 00:10:22,750
want to I can do like something here

259
00:10:20,950 --> 00:10:25,480
where I just have debug lines right so I

260
00:10:22,750 --> 00:10:27,519
can do you thirty two debug line index

261
00:10:25,480 --> 00:10:29,080
equals zero debug line index is less

262
00:10:27,519 --> 00:10:30,460
than however many we're gonna do here

263
00:10:29,080 --> 00:10:32,139
debug - right

264
00:10:30,460 --> 00:10:33,730
and I don't know maybe maybe I can even

265
00:10:32,139 --> 00:10:38,439
split this in here do bug line count

266
00:10:33,730 --> 00:10:39,820
something like that and then when I can

267
00:10:38,440 --> 00:10:43,330
do is again just grab these debug lines

268
00:10:39,820 --> 00:10:46,330
out of the solution and and just assume

269
00:10:43,330 --> 00:10:47,530
that they're getting stored right you

270
00:10:46,330 --> 00:10:48,790
know what I could even do is make the

271
00:10:47,529 --> 00:10:50,379
color be something that can be recorded

272
00:10:48,789 --> 00:10:52,659
here as well so that we can record those

273
00:10:50,379 --> 00:10:57,129
debug line colors a little more

274
00:10:52,659 --> 00:10:59,049
specifically right so that's a pretty

275
00:10:57,129 --> 00:11:03,100
good way to

276
00:10:59,049 --> 00:11:04,240
push the debug drawing out of the out of

277
00:11:03,100 --> 00:11:07,180
the part of the code that's actually

278
00:11:04,240 --> 00:11:09,029
doing work and let it get drawn later so

279
00:11:07,179 --> 00:11:12,279
what I could do here is say okay let's

280
00:11:09,029 --> 00:11:14,379
suppose that we've got in this letting

281
00:11:12,279 --> 00:11:16,839
solution just some information about

282
00:11:14,379 --> 00:11:19,389
these debug lines so I can maybe you

283
00:11:16,840 --> 00:11:24,220
just have it here a little struct called

284
00:11:19,389 --> 00:11:30,460
debug line in there I'll have you know

285
00:11:24,220 --> 00:11:31,540
from P to P and a color and and you know

286
00:11:30,460 --> 00:11:33,220
I don't know if I really want to

287
00:11:31,539 --> 00:11:35,289
thickness or not I probably don't for

288
00:11:33,220 --> 00:11:37,240
now that'll probably be hard-coded and

289
00:11:35,289 --> 00:11:42,329
then in here yeah I can just say okay

290
00:11:37,240 --> 00:11:47,350
I've got a debug line it's gonna be

291
00:11:42,330 --> 00:11:53,560
coming out of this array like so I ends

292
00:11:47,350 --> 00:11:58,420
I'll just let this tell me what to do so

293
00:11:53,559 --> 00:12:01,509
I won't even do it that way I'll do it

294
00:11:58,419 --> 00:12:04,329
like this right so then we're drawing

295
00:12:01,509 --> 00:12:07,990
these line segments at the end after we

296
00:12:04,330 --> 00:12:11,170
draw everything else and off they go

297
00:12:07,990 --> 00:12:14,019
so when I do this I just need some way

298
00:12:11,169 --> 00:12:16,539
of storing these and pushing them on so

299
00:12:14,019 --> 00:12:18,189
I can do debug lines and say that

300
00:12:16,539 --> 00:12:20,079
there's you know however many debug

301
00:12:18,190 --> 00:12:22,630
lines there are I don't care can be some

302
00:12:20,080 --> 00:12:24,160
really high number and then I can just

303
00:12:22,629 --> 00:12:25,419
have a debug line count in here and we

304
00:12:24,159 --> 00:12:27,579
can just draw a debug lines to our

305
00:12:25,419 --> 00:12:31,149
hearts content all day long it doesn't

306
00:12:27,580 --> 00:12:34,480
matter so when we come through and we

307
00:12:31,149 --> 00:12:36,909
start our solution we can just set the

308
00:12:34,480 --> 00:12:38,649
debug line count to zero and then when

309
00:12:36,909 --> 00:12:40,240
we're doing anything else we can just

310
00:12:38,649 --> 00:12:41,829
push things on there now I don't want to

311
00:12:40,240 --> 00:12:43,570
push on all of the samples because that

312
00:12:41,830 --> 00:12:46,090
would be absurd I need some way of

313
00:12:43,570 --> 00:12:47,650
targeting a particular sample point so

314
00:12:46,090 --> 00:12:50,500
what I'm gonna do here is just say like

315
00:12:47,649 --> 00:12:54,730
a well okay if the sample point index

316
00:12:50,500 --> 00:12:56,980
for now you know equal sample point 100

317
00:12:54,730 --> 00:12:58,649
I don't know why I'm picking 100 but

318
00:12:56,980 --> 00:13:00,909
we'll want to set that later let's say

319
00:12:58,649 --> 00:13:03,220
then we'll just go ahead and push these

320
00:13:00,909 --> 00:13:05,379
on here so we'll just say push debug

321
00:13:03,220 --> 00:13:07,269
line and we'll give it the lighting

322
00:13:05,379 --> 00:13:11,549
solution and then I'll say well I know

323
00:13:07,269 --> 00:13:11,549
where I'm sampling from right

324
00:13:12,669 --> 00:13:16,679
and I knew which direction I was going

325
00:13:20,970 --> 00:13:31,180
and I can adjust the length here however

326
00:13:27,399 --> 00:13:32,589
I want right now we'll do it a metre

327
00:13:31,179 --> 00:13:33,759
maybe we want to shorter than that maybe

328
00:13:32,589 --> 00:13:35,800
well how longer than that I don't know

329
00:13:33,759 --> 00:13:36,909
doesn't really matter if I can push the

330
00:13:35,799 --> 00:13:38,620
debug line in here and then I just need

331
00:13:36,909 --> 00:13:43,240
a color for now we can just set the

332
00:13:38,620 --> 00:13:45,879
color to be white so that would be it

333
00:13:43,240 --> 00:13:48,070
and it would draw a debug line for every

334
00:13:45,879 --> 00:13:52,208
Ray that shot out of sample point 100

335
00:13:48,070 --> 00:13:54,339
and that would be it right the other

336
00:13:52,208 --> 00:13:56,949
thing I could do is like it's say if I

337
00:13:54,339 --> 00:13:59,290
hit a box I'm gonna set it to white if I

338
00:13:56,950 --> 00:14:02,350
didn't in a box you know I'm gonna set

339
00:13:59,289 --> 00:14:04,059
it to something else so maybe I could

340
00:14:02,350 --> 00:14:06,670
even do green in red so you know let's

341
00:14:04,059 --> 00:14:09,129
say I do a green for a hit and a red for

342
00:14:06,669 --> 00:14:10,088
a Miss and then I can also get a little

343
00:14:09,129 --> 00:14:11,320
bit more information there by just

344
00:14:10,089 --> 00:14:13,510
setting the color to whether or not I

345
00:14:11,320 --> 00:14:15,820
thought I hit something another thing I

346
00:14:13,509 --> 00:14:17,830
could do is draw to actually the place

347
00:14:15,820 --> 00:14:22,660
where the Ray hit now I think about it

348
00:14:17,830 --> 00:14:24,400
that might be kind of nice right so if

349
00:14:22,659 --> 00:14:25,929
the Ray didn't hit anything I would draw

350
00:14:24,399 --> 00:14:29,230
one thing if there we did hit something

351
00:14:25,929 --> 00:14:31,179
I would draw something else and that

352
00:14:29,230 --> 00:14:33,580
seems kind of nice as well so in here I

353
00:14:31,179 --> 00:14:37,469
can recalculate rape Eve if I want to

354
00:14:33,580 --> 00:14:43,509
print so I can do here like end point

355
00:14:37,470 --> 00:14:51,910
equals that and then I can say if a

356
00:14:43,509 --> 00:14:53,319
hitbox end point equals that and then I

357
00:14:51,909 --> 00:14:54,759
can sort of say alright well we'll just

358
00:14:53,320 --> 00:14:58,959
draw out from the sample point some

359
00:14:54,759 --> 00:15:00,309
distance right if the the rate you know

360
00:14:58,958 --> 00:15:04,119
it's the same equation I could simplify

361
00:15:00,309 --> 00:15:06,599
this even more in fact it's really just

362
00:15:04,120 --> 00:15:06,600
this right

363
00:15:09,820 --> 00:15:18,280
where did that code go just that that

364
00:15:14,440 --> 00:15:20,350
was weird all right that was really

365
00:15:18,279 --> 00:15:22,269
strange it's just this right I'm just

366
00:15:20,350 --> 00:15:24,610
saying if there was a hitbox like if we

367
00:15:22,269 --> 00:15:27,490
actually hit something then I want to go

368
00:15:24,610 --> 00:15:28,600
out to where the rate hit otherwise I'm

369
00:15:27,490 --> 00:15:34,899
just going to use that draw like that

370
00:15:28,600 --> 00:15:35,950
stand-in right so you know we take a

371
00:15:34,899 --> 00:15:38,110
look at this and that's pretty

372
00:15:35,950 --> 00:15:40,210
reasonable that'll draw a line to the

373
00:15:38,110 --> 00:15:42,279
point that we actually thought we found

374
00:15:40,210 --> 00:15:45,370
right or that the surface we thought we

375
00:15:42,279 --> 00:15:47,169
found otherwise we aren't gonna bother

376
00:15:45,370 --> 00:15:48,940
we'll just draw some some distance away

377
00:15:47,169 --> 00:15:51,370
some short distance away right and maybe

378
00:15:48,940 --> 00:15:53,050
that maybe one meters too much so maybe

379
00:15:51,370 --> 00:15:54,519
like you know a quarter meters high so

380
00:15:53,049 --> 00:16:00,939
it's a pretty short line if didn't hit

381
00:15:54,519 --> 00:16:03,789
anything right okay so that will do that

382
00:16:00,940 --> 00:16:05,740
pushing for us and all I need to do now

383
00:16:03,789 --> 00:16:08,620
is make an actual function that puts

384
00:16:05,740 --> 00:16:11,350
that on here so in here we'd say okay

385
00:16:08,620 --> 00:16:16,110
let's do a push debug line that push

386
00:16:11,350 --> 00:16:21,850
debug line is gonna have all the stuff

387
00:16:16,110 --> 00:16:25,409
that we just said and what we'll do here

388
00:16:21,850 --> 00:16:25,409
is just say well there's a debug line

389
00:16:25,500 --> 00:16:33,399
that is the solution debug lines plus

390
00:16:29,529 --> 00:16:35,319
debug line count plus plus and again we

391
00:16:33,399 --> 00:16:38,490
want to just do an assertion there that

392
00:16:35,320 --> 00:16:38,490
we're not overflowing the buffer

393
00:16:42,669 --> 00:16:45,729
so we're just gonna say look as long as

394
00:16:44,379 --> 00:16:49,539
you get room just a big line let's push

395
00:16:45,730 --> 00:17:00,820
one on and then fill it out with exactly

396
00:16:49,539 --> 00:17:04,838
the information that we just got and

397
00:17:00,820 --> 00:17:13,809
that's it so that's all I wanted to do

398
00:17:04,838 --> 00:17:15,009
good and now in theory we can as soon as

399
00:17:13,809 --> 00:17:17,019
we debug this we would actually have

400
00:17:15,009 --> 00:17:20,349
something that's gonna draw these little

401
00:17:17,019 --> 00:17:28,299
debug lines for us not in this mode but

402
00:17:20,349 --> 00:17:30,519
in this mode right oh my I guess one

403
00:17:28,299 --> 00:17:33,250
thing I failed to account for is the

404
00:17:30,519 --> 00:17:39,639
fact that that point is gonna move

405
00:17:33,250 --> 00:17:42,460
around that's less useful well yeah

406
00:17:39,640 --> 00:17:44,650
we'll have to do a little something to

407
00:17:42,460 --> 00:17:46,269
fix that shouldn't be too hard but I

408
00:17:44,650 --> 00:17:48,280
hadn't I forgot about that these points

409
00:17:46,269 --> 00:17:52,269
aren't coming in with any particular ID

410
00:17:48,279 --> 00:17:54,339
on them so there's that that thickness

411
00:17:52,269 --> 00:18:00,279
is way too thick that is one thing that

412
00:17:54,339 --> 00:18:07,269
we should fix here those lines are just

413
00:18:00,279 --> 00:18:11,589
are just way too thick let's drop that

414
00:18:07,269 --> 00:18:13,079
down significantly there we go that's a

415
00:18:11,589 --> 00:18:17,740
little bit better I might make that a

416
00:18:13,079 --> 00:18:25,349
bit bigger so that's more what we're

417
00:18:17,740 --> 00:18:25,349
looking for here there we go and

418
00:18:32,230 --> 00:18:37,298
I mean ideally you know I want to be

419
00:18:35,470 --> 00:18:42,429
able to do one close to here so I think

420
00:18:37,298 --> 00:18:44,349
what I'll do is I'm gonna do just a

421
00:18:42,429 --> 00:18:48,190
little bit of cheekiness here I'm based

422
00:18:44,349 --> 00:18:50,949
gonna say like look okay let's do

423
00:18:48,190 --> 00:18:53,649
something that's like debug point index

424
00:18:50,950 --> 00:18:57,460
and what we'll do is we'll say instead

425
00:18:53,648 --> 00:18:59,259
of a hundred I'm gonna say whatever the

426
00:18:57,460 --> 00:19:03,460
debug point is is the one that we draw

427
00:18:59,259 --> 00:19:05,740
right so then when we start out what

428
00:19:03,460 --> 00:19:10,690
I'll do is I'll just do a sweep where I

429
00:19:05,740 --> 00:19:12,880
do a test and you know we're gonna go

430
00:19:10,690 --> 00:19:15,308
over these points anyway and what I'll

431
00:19:12,880 --> 00:19:21,179
do is I'll just say look there's gonna

432
00:19:15,308 --> 00:19:24,879
be like a closest point distance or

433
00:19:21,179 --> 00:19:28,179
debug point distance and that's going to

434
00:19:24,880 --> 00:19:30,130
be set to f3 to max and when I come

435
00:19:28,179 --> 00:19:33,278
through here I'll just say look if this

436
00:19:30,130 --> 00:19:43,110
particular point whatever point we're on

437
00:19:33,278 --> 00:19:43,109
if point P let's do a this distance I

438
00:19:44,579 --> 00:19:50,379
will do a distance square root of the

439
00:19:46,750 --> 00:19:55,659
point whatever point P is and our debug

440
00:19:50,380 --> 00:19:59,429
point location our debug location which

441
00:19:55,659 --> 00:20:06,190
for now we'll just be 0 0 0

442
00:19:59,429 --> 00:20:09,038
I'll just see look if we can find the

443
00:20:06,190 --> 00:20:11,740
point that's closest to the one to where

444
00:20:09,038 --> 00:20:13,000
we sort of want to pick points at we'll

445
00:20:11,740 --> 00:20:15,548
just use that one and that should be

446
00:20:13,000 --> 00:20:17,440
relatively stable so I'll just take the

447
00:20:15,548 --> 00:20:20,250
closest one and go from there its

448
00:20:17,440 --> 00:20:20,250
distance

449
00:20:27,269 --> 00:20:34,740
so that something like this right and

450
00:20:30,549 --> 00:20:34,740
that allows us to set an actual location

451
00:20:36,539 --> 00:20:42,129
and then that location we can move

452
00:20:39,519 --> 00:20:45,069
anywhere we want obviously and it will

453
00:20:42,130 --> 00:20:46,210
hopefully always pick a stable point so

454
00:20:45,069 --> 00:20:49,779
there you go and that does seem to

455
00:20:46,210 --> 00:20:52,630
working pretty well okay so let's go

456
00:20:49,779 --> 00:20:56,440
ahead and increase the resolution here

457
00:20:52,630 --> 00:20:58,450
down to where we're at that is shooting

458
00:20:56,440 --> 00:21:07,559
out the bottom this is the bottom point

459
00:20:58,450 --> 00:21:07,559
here so it might be a little too thick

460
00:21:16,769 --> 00:21:20,440
yeah that's a little bit better so I

461
00:21:18,819 --> 00:21:21,700
guess it depends on the distance we want

462
00:21:20,440 --> 00:21:24,880
a view in front obviously because these

463
00:21:21,700 --> 00:21:26,860
are not screen spaced lines when I mean

464
00:21:24,880 --> 00:21:28,720
to debug view I kind of want to set my

465
00:21:26,859 --> 00:21:31,329
clipping plane too much closer so we can

466
00:21:28,720 --> 00:21:33,370
see things a little bit more easily so I

467
00:21:31,329 --> 00:21:38,500
kind of wonder if again if that clipping

468
00:21:33,369 --> 00:21:48,519
plane also wants to be modified when

469
00:21:38,500 --> 00:21:51,309
we're in that mode so in here where we

470
00:21:48,519 --> 00:21:52,720
do debug camera you can see we set the

471
00:21:51,309 --> 00:21:54,399
near clip plane to three meters right

472
00:21:52,720 --> 00:21:57,130
because it's very far out that was kind

473
00:21:54,400 --> 00:22:06,670
of by design right but if we're in debug

474
00:21:57,130 --> 00:22:09,420
camera almost want to say set it to

475
00:22:06,670 --> 00:22:09,420
something much closer

476
00:22:14,429 --> 00:22:20,038
so like you know normally we clip there

477
00:22:16,740 --> 00:22:21,929
if I switch to a debug camera I drag the

478
00:22:20,038 --> 00:22:25,759
clipping so I can get right in there and

479
00:22:21,929 --> 00:22:28,649
see what's going on so now right when we

480
00:22:25,759 --> 00:22:30,929
when we view one of these things I can

481
00:22:28,648 --> 00:22:35,038
really sort of zoom in and see it much

482
00:22:30,929 --> 00:22:37,019
more accurately yeah if that makes sense

483
00:22:35,038 --> 00:22:39,089
so what I'd like to do is move this up a

484
00:22:37,019 --> 00:22:40,769
little because I'd like one to be sort

485
00:22:39,089 --> 00:22:44,788
of in the region we actually care about

486
00:22:40,769 --> 00:22:52,109
here not upside down so what do we do to

487
00:22:44,788 --> 00:22:54,690
get that is I'm just gonna go and take

488
00:22:52,109 --> 00:22:57,298
debug location I'm just gonna move it up

489
00:22:54,690 --> 00:22:58,889
a little bit I don't know where it

490
00:22:57,298 --> 00:23:00,898
should be exactly but I'm gonna try and

491
00:22:58,888 --> 00:23:01,859
get something that'll be on the up side

492
00:23:00,898 --> 00:23:07,018
so here you go

493
00:23:01,859 --> 00:23:09,269
right and one of the things that you can

494
00:23:07,019 --> 00:23:12,778
see about this so you know if we just

495
00:23:09,269 --> 00:23:16,259
take a look at this in context here and

496
00:23:12,778 --> 00:23:18,929
I'm gonna I I'm gonna basically avoid

497
00:23:16,259 --> 00:23:20,970
doing any work here I'm gonna set up

498
00:23:18,929 --> 00:23:23,309
into debug mode so that the framerate

499
00:23:20,970 --> 00:23:24,749
will be super slow so I can look at this

500
00:23:23,308 --> 00:23:28,079
a little bit more cleanly rather than

501
00:23:24,749 --> 00:23:30,298
adding a pause feature oh well you know

502
00:23:28,079 --> 00:23:32,359
what no I'm dumb why would you do that

503
00:23:30,298 --> 00:23:35,929
don't do that

504
00:23:32,359 --> 00:23:47,069
that's stupid all I really have to do is

505
00:23:35,929 --> 00:23:51,960
this so when we're in this world mode

506
00:23:47,069 --> 00:23:55,019
here we know whether or not yeah inside

507
00:23:51,960 --> 00:23:58,619
the lighting solution we can just have a

508
00:23:55,019 --> 00:24:00,749
thing that's like update debug lines so

509
00:23:58,618 --> 00:24:02,939
what I can do is just say like the debug

510
00:24:00,749 --> 00:24:05,249
lines get updated when the debug lines

511
00:24:02,940 --> 00:24:07,499
get updated and and that's just how that

512
00:24:05,249 --> 00:24:10,558
works I could even make it so that this

513
00:24:07,499 --> 00:24:13,230
output lighting points always happens I

514
00:24:10,558 --> 00:24:16,798
don't know how well I can really do that

515
00:24:13,230 --> 00:24:20,069
let me see if I can so let's let's just

516
00:24:16,798 --> 00:24:21,960
see if inside here inside lighting test

517
00:24:20,069 --> 00:24:23,490
I don't know if I can actually make

518
00:24:21,960 --> 00:24:24,920
these calls here if everything's set up

519
00:24:23,490 --> 00:24:32,400
properly for it

520
00:24:24,920 --> 00:24:34,019
I'm gonna see whether I can yeah so I

521
00:24:32,400 --> 00:24:45,840
would have to well you know what I could

522
00:24:34,019 --> 00:24:47,990
still do that though where's that here

523
00:24:45,839 --> 00:24:47,990
it is

524
00:25:07,298 --> 00:25:10,779
so it looks like I can do that just fine

525
00:25:09,160 --> 00:25:12,490
and so that's kind of nice because now I

526
00:25:10,779 --> 00:25:14,079
can have these going at any time right

527
00:25:12,490 --> 00:25:15,670
and then what I can do is just make it

528
00:25:14,079 --> 00:25:20,230
so that whether or not they're updated

529
00:25:15,670 --> 00:25:23,380
is actually predicated on consuming on

530
00:25:20,230 --> 00:25:26,019
whether or not we're sort of saying that

531
00:25:23,380 --> 00:25:29,080
we should update them right so what I

532
00:25:26,019 --> 00:25:35,139
can do is say all right if solution

533
00:25:29,079 --> 00:25:40,199
update debug lines is active then we

534
00:25:35,140 --> 00:25:40,200
clear otherwise we don't and inside push

535
00:25:42,720 --> 00:25:50,679
we do it as well so now when we run

536
00:25:49,140 --> 00:25:52,660
nothing will happen

537
00:25:50,679 --> 00:25:55,660
right we won't draw any lines because

538
00:25:52,660 --> 00:25:59,798
that flag isn't set to true and then

539
00:25:55,660 --> 00:26:03,850
what I can do is inside world mode here

540
00:25:59,798 --> 00:26:06,849
I can add a key that will swap that in

541
00:26:03,849 --> 00:26:09,369
and out right so what I can do is just

542
00:26:06,849 --> 00:26:13,509
say like okay you know with two keys

543
00:26:09,369 --> 00:26:25,029
pressed then the test lighting update

544
00:26:13,509 --> 00:26:28,289
debug lines just get stalled so now I

545
00:26:25,029 --> 00:26:32,918
can do that and you can see that when I

546
00:26:28,289 --> 00:26:36,970
freeze it we can see exactly where those

547
00:26:32,919 --> 00:26:40,240
lines got shot and who they got shot to

548
00:26:36,970 --> 00:26:42,519
you know I'm saying and one nice thing

549
00:26:40,240 --> 00:26:45,548
about this again is we can sort of

550
00:26:42,519 --> 00:26:49,869
validate whether or not our ray casting

551
00:26:45,548 --> 00:26:52,599
is working correctly or not and so what

552
00:26:49,869 --> 00:26:55,259
you can see here especially is you can

553
00:26:52,599 --> 00:26:57,579
see one of the artifacts of our

554
00:26:55,259 --> 00:26:59,349
multi-resolution stuff so do you see

555
00:26:57,579 --> 00:27:04,449
where this ray ended here it didn't

556
00:26:59,349 --> 00:27:06,129
actually hit anything right and so what

557
00:27:04,450 --> 00:27:07,360
happened there and this is maybe

558
00:27:06,130 --> 00:27:09,010
something again that we want to look at

559
00:27:07,359 --> 00:27:11,879
this is why visualization is very good

560
00:27:09,009 --> 00:27:16,710
because we don't actually know if it

561
00:27:11,880 --> 00:27:19,049
here if I can do it it's hitting this

562
00:27:16,710 --> 00:27:23,429
right

563
00:27:19,048 --> 00:27:25,470
and exiting out early right because we

564
00:27:23,429 --> 00:27:36,120
said that if it went that far it could

565
00:27:25,470 --> 00:27:44,880
that was something we said right yeah so

566
00:27:36,119 --> 00:27:50,449
anyway looking at these looking at these

567
00:27:44,880 --> 00:27:50,450
debug lines here I would also say that

568
00:27:56,599 --> 00:28:07,289
it's kind of odd I would say that

569
00:28:04,789 --> 00:28:09,269
looking at these debug lines I think I

570
00:28:07,289 --> 00:28:11,308
also can see some reasons why I don't

571
00:28:09,269 --> 00:28:13,950
why our spatial partition needs to be

572
00:28:11,308 --> 00:28:15,839
improved for multi rez so one of the

573
00:28:13,950 --> 00:28:18,150
problems is because of the way that

574
00:28:15,839 --> 00:28:20,250
we're doing the splitting we end up with

575
00:28:18,150 --> 00:28:27,509
not very good spatial distributions

576
00:28:20,250 --> 00:28:31,919
right like these things here you really

577
00:28:27,509 --> 00:28:34,650
want you almost want more of like an

578
00:28:31,919 --> 00:28:38,910
octree where you're gonna fill the

579
00:28:34,650 --> 00:28:43,620
entire space whether the bounds of that

580
00:28:38,910 --> 00:28:45,990
thing enclose it or not because for the

581
00:28:43,619 --> 00:28:49,798
purposes of early outing you're ray

582
00:28:45,990 --> 00:28:51,870
casting you want to hit the thing that's

583
00:28:49,798 --> 00:28:54,869
over here sort of probably I don't know

584
00:28:51,869 --> 00:28:58,409
maybe you don't it's hard to say it

585
00:28:54,869 --> 00:28:59,759
might be fine we'll see anyway ignoring

586
00:28:58,410 --> 00:29:03,540
that for now because that's not really

587
00:28:59,759 --> 00:29:04,710
what we're talking about here one thing

588
00:29:03,539 --> 00:29:06,178
you can see just by looking at this

589
00:29:04,710 --> 00:29:07,500
directly is that stratified sampling

590
00:29:06,179 --> 00:29:09,330
probably would help our flicker quite a

591
00:29:07,500 --> 00:29:10,558
bit you can see like sometimes it's

592
00:29:09,329 --> 00:29:11,970
looking over here sometimes it's not

593
00:29:10,558 --> 00:29:13,289
looking over there at all sometimes it's

594
00:29:11,970 --> 00:29:15,539
looking over there somebody's not

595
00:29:13,289 --> 00:29:18,210
looking over there at all so for 16

596
00:29:15,539 --> 00:29:22,168
Ray's spreading them out more evenly is

597
00:29:18,210 --> 00:29:23,610
probably a pretty good idea right just

598
00:29:22,169 --> 00:29:25,559
in terms of how much flicker we're

599
00:29:23,609 --> 00:29:30,359
probably getting from this very

600
00:29:25,558 --> 00:29:32,309
different set of distributions I think

601
00:29:30,359 --> 00:29:34,019
would be good it doesn't look to me

602
00:29:32,309 --> 00:29:36,329
like the random number generator is all

603
00:29:34,019 --> 00:29:38,819
that bad I mean we haven't really tested

604
00:29:36,329 --> 00:29:39,929
it yet so it might still be again it's

605
00:29:38,819 --> 00:29:43,200
not a random generator right now it's

606
00:29:39,930 --> 00:29:44,580
actually a table but it doesn't look

607
00:29:43,200 --> 00:29:47,130
like it's doing anything particularly

608
00:29:44,579 --> 00:29:48,569
stupid it looks fairly white noisy

609
00:29:47,130 --> 00:29:50,580
actually so I don't know that we're

610
00:29:48,569 --> 00:29:51,960
gonna improve that all that much we

611
00:29:50,579 --> 00:29:53,639
might but I don't know that we're gonna

612
00:29:51,960 --> 00:29:55,470
improve it all that much so the

613
00:29:53,640 --> 00:29:57,780
important thing here do I think is to go

614
00:29:55,470 --> 00:30:05,069
with that maybe the stratified sampling

615
00:29:57,779 --> 00:30:08,369
a little bit more and try to guarantee

616
00:30:05,069 --> 00:30:10,200
that we have a little more coherence as

617
00:30:08,369 --> 00:30:13,439
to where we're shooting these rays and

618
00:30:10,200 --> 00:30:18,420
see if that helps our flicker a little

619
00:30:13,440 --> 00:30:20,630
bit so how might we do that let's take a

620
00:30:18,420 --> 00:30:20,630
look

621
00:30:44,819 --> 00:30:48,009
now in this case we're just trying to

622
00:30:47,019 --> 00:30:49,839
get a picture of the lighting

623
00:30:48,009 --> 00:30:51,370
environment that's around us we don't

624
00:30:49,839 --> 00:30:53,379
really have a reflectance function that

625
00:30:51,369 --> 00:30:55,119
we're worried about and so that's gonna

626
00:30:53,380 --> 00:30:56,409
inform the design this a little bit the

627
00:30:55,119 --> 00:30:58,329
reason it informs the line is a little

628
00:30:56,409 --> 00:30:59,649
bit is because if we did have a specific

629
00:30:58,329 --> 00:31:02,109
reflection function that we cared about

630
00:30:59,648 --> 00:31:04,719
or a stratified sampling would want to

631
00:31:02,109 --> 00:31:06,969
take that into account right because if

632
00:31:04,720 --> 00:31:08,500
we know that we very heavily reflect

633
00:31:06,970 --> 00:31:10,538
light from a particular set of

634
00:31:08,500 --> 00:31:12,548
directions and don't really reflect like

635
00:31:10,538 --> 00:31:14,079
much from others we probably shouldn't

636
00:31:12,548 --> 00:31:15,429
bother looking as much in the area that

637
00:31:14,079 --> 00:31:18,189
we don't reflect light from because

638
00:31:15,429 --> 00:31:20,259
there's those samples even if they come

639
00:31:18,190 --> 00:31:22,179
back with light aren't really going to

640
00:31:20,259 --> 00:31:24,250
contribute to our overall look very much

641
00:31:22,179 --> 00:31:26,500
and so concentrating samples there would

642
00:31:24,250 --> 00:31:28,028
typically be a bad idea in this case we

643
00:31:26,500 --> 00:31:30,038
don't really have that the only thing we

644
00:31:28,028 --> 00:31:31,329
have is a cosine fall-off and so to a

645
00:31:30,038 --> 00:31:34,269
certain extent the only thing we really

646
00:31:31,329 --> 00:31:35,859
know is that things that are up here

647
00:31:34,269 --> 00:31:39,220
tend to contribute more than things that

648
00:31:35,859 --> 00:31:41,168
are down out here right so it does mean

649
00:31:39,220 --> 00:31:44,048
that we probably want to take a look at

650
00:31:41,169 --> 00:31:46,149
like this outbound cone here and maybe

651
00:31:44,048 --> 00:31:48,308
sample this more heavily than the sine

652
00:31:46,148 --> 00:31:50,918
cone here for example something like

653
00:31:48,308 --> 00:31:59,019
that right that's just a you know kind

654
00:31:50,919 --> 00:32:02,639
of a vague a vague notion so how might

655
00:31:59,019 --> 00:32:06,339
we sample this well now if we imagine

656
00:32:02,638 --> 00:32:08,740
looking down from the top here and we

657
00:32:06,339 --> 00:32:13,269
sort of have the the idea that well

658
00:32:08,740 --> 00:32:18,450
there's there's sort of you know rough

659
00:32:13,269 --> 00:32:20,620
directions we might sample out right

660
00:32:18,450 --> 00:32:21,870
looking down from the top you know one

661
00:32:20,619 --> 00:32:24,788
of the things that we kind of want to do

662
00:32:21,869 --> 00:32:27,128
is we want to say we want to sort of

663
00:32:24,788 --> 00:32:29,558
look out in all directions a little bit

664
00:32:27,128 --> 00:32:35,740
right so we probably want to ensure that

665
00:32:29,558 --> 00:32:38,470
we're gonna look you know out into the

666
00:32:35,740 --> 00:32:40,710
world in some way that sort of resembles

667
00:32:38,470 --> 00:32:40,710
this

668
00:32:48,538 --> 00:32:53,848
right we want to ensure that we shoot

669
00:32:51,509 --> 00:32:55,798
one array kind of this way one rate kind

670
00:32:53,848 --> 00:32:56,908
of that way right we sort of want to

671
00:32:55,798 --> 00:32:59,519
make sure that we're shooting rain is

672
00:32:56,909 --> 00:33:01,499
kind of out in those directions and then

673
00:32:59,519 --> 00:33:03,929
in terms of the elevation of those rays

674
00:33:01,499 --> 00:33:05,639
we probably want to make sure that we

675
00:33:03,929 --> 00:33:07,979
have some distribution across the

676
00:33:05,638 --> 00:33:09,958
elevation as well how exactly we want to

677
00:33:07,979 --> 00:33:10,919
do that is not immediately clear we'll

678
00:33:09,959 --> 00:33:11,849
have to sort of play around that a

679
00:33:10,919 --> 00:33:17,009
little bit but it's you know it's

680
00:33:11,848 --> 00:33:20,058
something like this so there's a lot of

681
00:33:17,009 --> 00:33:23,128
ways we could imagine doing this but I

682
00:33:20,058 --> 00:33:26,848
think the way that I would probably say

683
00:33:23,128 --> 00:33:30,208
we should do it is with sort of a bit of

684
00:33:26,848 --> 00:33:33,058
a maybe templating scheme to a certain

685
00:33:30,209 --> 00:33:36,568
extent like I might say maybe what we

686
00:33:33,058 --> 00:33:42,628
can do here is have some notion of the

687
00:33:36,568 --> 00:33:44,788
hemisphere where we've pre computed some

688
00:33:42,628 --> 00:33:49,138
of these and then maybe we just blend

689
00:33:44,788 --> 00:33:51,868
between them right in order to at

690
00:33:49,138 --> 00:33:54,888
certain ratios in order to get what we

691
00:33:51,868 --> 00:33:54,888
want right

692
00:33:59,410 --> 00:34:05,210
I'm gonna have to think about exactly

693
00:34:01,429 --> 00:34:06,798
how I want to do this so similarly if

694
00:34:05,210 --> 00:34:10,429
you imagine looking at the thing this

695
00:34:06,798 --> 00:34:12,378
way certain visit we said like stuff

696
00:34:10,429 --> 00:34:14,389
that's really coming in at at a steep

697
00:34:12,378 --> 00:34:16,159
angle there it's not as useful so we'd

698
00:34:14,389 --> 00:34:19,099
also like to sort of be shooting out

699
00:34:16,159 --> 00:34:22,730
more that way more you know more biased

700
00:34:19,099 --> 00:34:24,319
towards upwards and we'd like to make

701
00:34:22,730 --> 00:34:26,449
sure we shoot some in the upwards

702
00:34:24,320 --> 00:34:28,070
direction so we've got kind of a lot of

703
00:34:26,449 --> 00:34:31,668
competing concerns here it's a little

704
00:34:28,070 --> 00:34:33,230
bit difficult it's pretty easy to make

705
00:34:31,668 --> 00:34:34,668
sure that we shoot some in the upwards

706
00:34:33,230 --> 00:34:38,378
direction right because you can imagine

707
00:34:34,668 --> 00:34:38,378
just taking the surface normal of

708
00:34:39,190 --> 00:34:46,010
whatever this point is right and basing

709
00:34:44,239 --> 00:34:49,128
some randomness off of that surface

710
00:34:46,010 --> 00:34:52,820
normal so we could pretty easily shoot

711
00:34:49,128 --> 00:34:58,099
in sort of a square around that right or

712
00:34:52,820 --> 00:34:59,840
a cone and make sure that we generate

713
00:34:58,099 --> 00:35:01,849
like at least four points in that

714
00:34:59,840 --> 00:35:05,358
direction always right so we could

715
00:35:01,849 --> 00:35:07,309
always guarantee that we get some facing

716
00:35:05,358 --> 00:35:09,108
upward and so then the question is just

717
00:35:07,309 --> 00:35:10,849
how do we make the ones that are facing

718
00:35:09,108 --> 00:35:13,159
into the sideways and one way to do it

719
00:35:10,849 --> 00:35:15,079
again might be to take those maybe do

720
00:35:13,159 --> 00:35:19,608
the exact same thing maybe we just have

721
00:35:15,079 --> 00:35:24,159
like a series of sort of of these

722
00:35:19,608 --> 00:35:24,159
vectors and we're going to go ahead and

723
00:35:25,059 --> 00:35:32,389
construct the randomness off of that I

724
00:35:27,940 --> 00:35:35,230
am curious I don't even remember what

725
00:35:32,389 --> 00:35:35,230
we're doing right now

726
00:35:45,349 --> 00:35:49,849
so what we're doing right now is we just

727
00:35:47,748 --> 00:35:52,518
say all right generate something in the

728
00:35:49,849 --> 00:35:57,009
sphere and then if it happens to be

729
00:35:52,518 --> 00:35:57,008
pointing the wrong way to flip it right

730
00:35:57,068 --> 00:36:01,699
so that's yeah

731
00:35:59,088 --> 00:36:03,139
that's pretty basic right one of the

732
00:36:01,699 --> 00:36:04,670
problems that we have here is our

733
00:36:03,139 --> 00:36:06,739
lighting points don't remember their

734
00:36:04,670 --> 00:36:10,159
basis coordinates so we don't actually

735
00:36:06,739 --> 00:36:12,978
while we know the normal we don't know

736
00:36:10,159 --> 00:36:15,018
the x and y axes and that's probably

737
00:36:12,978 --> 00:36:17,239
something we need to actually keep if

738
00:36:15,018 --> 00:36:19,218
we're going to be constructing regular

739
00:36:17,239 --> 00:36:21,978
sampling based on that so that's a

740
00:36:19,219 --> 00:36:23,778
little bit of a tricky situation because

741
00:36:21,978 --> 00:36:26,179
it means we'd have to store a lot more

742
00:36:23,778 --> 00:36:29,568
information on our lighting we have this

743
00:36:26,179 --> 00:36:31,518
information in the box itself and so the

744
00:36:29,568 --> 00:36:33,469
question is yet do we really want to

745
00:36:31,518 --> 00:36:35,118
bloat this lighting point out to the

746
00:36:33,469 --> 00:36:39,068
point where it stores all that you know

747
00:36:35,119 --> 00:36:44,479
and I don't know but so if we had an

748
00:36:39,068 --> 00:36:46,248
x-axis and a y-axis here for example we

749
00:36:44,478 --> 00:36:48,439
would be able to store that here inside

750
00:36:46,248 --> 00:36:51,108
lighting test when we come through and

751
00:36:48,440 --> 00:36:53,059
we write out the normal we can also

752
00:36:51,108 --> 00:36:55,548
write out the x and y axis because

753
00:36:53,059 --> 00:36:57,410
they're actually known just based on the

754
00:36:55,548 --> 00:37:02,028
surface right the surface knows that

755
00:36:57,409 --> 00:37:04,538
information right you could this this

756
00:37:02,028 --> 00:37:08,599
call right here generates it for the box

757
00:37:04,539 --> 00:37:12,140
so we can if we want to just store a

758
00:37:08,599 --> 00:37:13,519
surface x-axis and surface y-axis and we

759
00:37:12,139 --> 00:37:16,038
know the normal points out from that so

760
00:37:13,518 --> 00:37:17,748
that would pretty much be it again it

761
00:37:16,039 --> 00:37:19,309
just costs a lot more to like romp that

762
00:37:17,748 --> 00:37:22,669
information in there but that's what we

763
00:37:19,309 --> 00:37:28,789
would need so then when we go to sample

764
00:37:22,670 --> 00:37:30,829
Hemisphere sample Hemisphere is going to

765
00:37:28,789 --> 00:37:39,528
be a little bit different now so sample

766
00:37:30,829 --> 00:37:41,028
a hemisphere would need so and now it

767
00:37:39,528 --> 00:37:43,940
has all of the information that it needs

768
00:37:41,028 --> 00:37:45,170
in to do constructions of that nature

769
00:37:43,940 --> 00:37:48,229
but it still doesn't have quite all the

770
00:37:45,170 --> 00:37:49,369
information it needs to do everything

771
00:37:48,228 --> 00:37:51,679
it's going to need to do and I'll

772
00:37:49,369 --> 00:37:53,539
explain why in a second so this won't

773
00:37:51,679 --> 00:37:54,919
make any change right if we run this now

774
00:37:53,539 --> 00:37:56,479
we would see the exact same sampling

775
00:37:54,920 --> 00:37:59,659
pattern that we saw before in theory

776
00:37:56,478 --> 00:38:01,649
anyway so that's fine

777
00:37:59,659 --> 00:38:03,089
so the problem that we're getting it now

778
00:38:01,650 --> 00:38:04,470
is like if we if we take a look at

779
00:38:03,090 --> 00:38:14,190
what's going on here we need to figure

780
00:38:04,469 --> 00:38:16,559
out a way to tell it what kind of

781
00:38:14,190 --> 00:38:18,900
sampling we actually wanted here

782
00:38:16,559 --> 00:38:23,389
so we're gonna have to pass a sample

783
00:38:18,900 --> 00:38:36,690
index so it knows what strata it's using

784
00:38:23,389 --> 00:38:38,309
right all right so let's suppose yeah

785
00:38:36,690 --> 00:38:42,450
like I said let's suppose we were gonna

786
00:38:38,309 --> 00:38:44,369
do something along these lines let's

787
00:38:42,449 --> 00:38:47,129
suppose we did the simplest possible

788
00:38:44,369 --> 00:38:50,100
thing first which is to say we just went

789
00:38:47,130 --> 00:38:58,050
okay look if the sample index is less

790
00:38:50,099 --> 00:39:00,239
than 8 or R greater than 8 let's suppose

791
00:38:58,050 --> 00:39:02,730
we split it up into two halves one half

792
00:39:00,239 --> 00:39:05,459
samples upwards one half samples

793
00:39:02,730 --> 00:39:08,130
outwards right and that's all we're

794
00:39:05,460 --> 00:39:11,280
gonna do at the moment that's that's it

795
00:39:08,130 --> 00:39:13,710
right so what we could do here we can

796
00:39:11,280 --> 00:39:15,630
actually do this relatively easily I

797
00:39:13,710 --> 00:39:20,039
think because since we have the complete

798
00:39:15,630 --> 00:39:22,079
X Y and n which is effectively the z

799
00:39:20,039 --> 00:39:25,079
axis since we have the complete axis

800
00:39:22,079 --> 00:39:28,108
system we can construct sort of

801
00:39:25,079 --> 00:39:29,608
arbitrary things here so let's suppose

802
00:39:28,108 --> 00:39:31,230
we did something kind of completely

803
00:39:29,608 --> 00:39:33,869
ridiculous at first just so we can

804
00:39:31,230 --> 00:39:35,760
verify it's actually working what I

805
00:39:33,869 --> 00:39:39,840
could do is say all right you know we're

806
00:39:35,760 --> 00:39:41,730
gonna produce a result here and in one

807
00:39:39,840 --> 00:39:43,230
case what I'm going to do if the sample

808
00:39:41,730 --> 00:39:46,079
index is greater than 8 I'm gonna sample

809
00:39:43,230 --> 00:39:49,530
out the sides of this thing right so

810
00:39:46,079 --> 00:39:50,969
what I'm gonna do is I'm gonna take and

811
00:39:49,530 --> 00:39:52,320
do a normalize

812
00:39:50,969 --> 00:39:54,199
but I'm gonna do it a little bit

813
00:39:52,320 --> 00:39:57,930
differently than we're doing it before

814
00:39:54,199 --> 00:40:01,349
I'm gonna take a random bilateral x the

815
00:39:57,929 --> 00:40:03,690
x-axis a random bilateral x the y-axis

816
00:40:01,349 --> 00:40:06,170
so you can be anywhere in the plane but

817
00:40:03,690 --> 00:40:06,170
the z-axis

818
00:40:08,000 --> 00:40:15,380
which is the normal right the z-axis I'm

819
00:40:13,789 --> 00:40:22,130
actually going to say you only go up

820
00:40:15,380 --> 00:40:23,840
halfway right now on the other hand in

821
00:40:22,130 --> 00:40:25,760
this one I'm going to do the opposite

822
00:40:23,840 --> 00:40:29,630
I'm gonna say you can pick anything you

823
00:40:25,760 --> 00:40:33,290
want but you're gonna have to pick a Z

824
00:40:29,630 --> 00:40:37,700
that's over halfway always and I want

825
00:40:33,289 --> 00:40:39,679
these to be less than halfway right does

826
00:40:37,699 --> 00:40:41,179
that make sense so I'm basically saying

827
00:40:39,679 --> 00:40:43,039
I'm breaking this up and again I'm not

828
00:40:41,179 --> 00:40:45,858
suggesting this is good at all I'm just

829
00:40:43,039 --> 00:40:57,259
showing an example of how we can break

830
00:40:45,858 --> 00:41:04,250
this up don't ask me what I thought I

831
00:40:57,260 --> 00:41:08,330
was doing there okay so now when I run

832
00:41:04,250 --> 00:41:10,789
it I expand and do my my sampling I'm

833
00:41:08,329 --> 00:41:16,299
hoping to sort of get a little bit more

834
00:41:10,789 --> 00:41:16,300
oh wait

835
00:41:24,289 --> 00:41:28,079
alright I'll be honest that's not at all

836
00:41:27,269 --> 00:41:35,179
what I expected

837
00:41:28,079 --> 00:41:35,180
I must have messed something up

838
00:41:39,829 --> 00:41:47,420
well actually no maybe that is sort of

839
00:41:42,650 --> 00:41:49,099
roughly what I expected kind of chaotic

840
00:41:47,420 --> 00:41:51,920
out the sides I expecting a little bit

841
00:41:49,099 --> 00:41:53,809
more sort of distribution there let me

842
00:41:51,920 --> 00:41:55,220
just make this more pronounced to make

843
00:41:53,809 --> 00:41:56,719
sure I'm actually doing what I think I

844
00:41:55,219 --> 00:42:05,480
might do so these should be really flat

845
00:41:56,719 --> 00:42:07,429
out to the sides right so now you can

846
00:42:05,480 --> 00:42:09,050
kind of see that right do you see how

847
00:42:07,429 --> 00:42:10,460
we've got these ones that are shooting

848
00:42:09,050 --> 00:42:11,930
flat out to the sides and these ones

849
00:42:10,460 --> 00:42:16,780
that are shooting up I'm gonna stop

850
00:42:11,929 --> 00:42:16,779
updating debug and just count right

851
00:42:22,570 --> 00:42:29,620
so if you see how many are coming up

852
00:42:24,429 --> 00:42:31,889
here 1 2 3 4 5 6 7 I can quite count 8

853
00:42:29,619 --> 00:42:31,889
there

854
00:42:38,909 --> 00:42:45,639
should be eight can't quite tell if

855
00:42:42,099 --> 00:42:48,999
there are they're all kind of quite

856
00:42:45,639 --> 00:42:51,190
close to each other one two three six

857
00:42:48,998 --> 00:42:52,659
seven eight yes there are you know there

858
00:42:51,190 --> 00:42:55,659
should be eight around the ring one two

859
00:42:52,659 --> 00:42:58,328
three four five six seven eight yep so

860
00:42:55,659 --> 00:43:01,179
you can see that is is working so I'm

861
00:42:58,329 --> 00:43:03,068
not nuts and you can kind of see what I

862
00:43:01,179 --> 00:43:05,048
mean right so now we've got some that

863
00:43:03,068 --> 00:43:07,989
are pointing upward and some that are

864
00:43:05,048 --> 00:43:13,630
pointing outward right and they're not

865
00:43:07,989 --> 00:43:14,889
the same now as I move around you can

866
00:43:13,630 --> 00:43:16,720
actually see that it did change the

867
00:43:14,889 --> 00:43:20,108
character of the lighting quite a bit in

868
00:43:16,719 --> 00:43:22,959
fact because we're biasing our sampling

869
00:43:20,108 --> 00:43:24,940
upwards now you get people who have

870
00:43:22,960 --> 00:43:27,749
lights directly above them finding that

871
00:43:24,940 --> 00:43:30,700
light much more intently intensely right

872
00:43:27,748 --> 00:43:32,230
because it's always gonna make sure that

873
00:43:30,699 --> 00:43:33,719
it finds that light shooting a lot of

874
00:43:32,230 --> 00:43:36,400
stuff up in that direction

875
00:43:33,719 --> 00:43:38,018
however sideways lighting maybe not so

876
00:43:36,400 --> 00:43:39,160
good because now you've only got eight

877
00:43:38,018 --> 00:43:40,479
and they're shooting way out to the side

878
00:43:39,159 --> 00:43:43,389
where they can't really have much of a

879
00:43:40,480 --> 00:43:44,588
contribution right so it really does

880
00:43:43,389 --> 00:43:46,989
change the character of the lighting to

881
00:43:44,588 --> 00:43:49,389
bias the sampling even though the

882
00:43:46,989 --> 00:43:50,889
sampling is still random and possibly

883
00:43:49,389 --> 00:43:51,879
still covering most of the thing it's

884
00:43:50,889 --> 00:43:53,498
not really though because there's

885
00:43:51,880 --> 00:43:55,568
probably a bit in there it's not

886
00:43:53,498 --> 00:44:00,399
covering you can see that it does make a

887
00:43:55,568 --> 00:44:02,380
bit of a difference so it's not it is

888
00:44:00,400 --> 00:44:05,380
relevant how you choose to partition the

889
00:44:02,380 --> 00:44:06,970
space okay but this is not really what

890
00:44:05,380 --> 00:44:08,739
we want to do we want to do something

891
00:44:06,969 --> 00:44:12,248
that's going to give us a fairly even

892
00:44:08,739 --> 00:44:13,568
hemisphere covering on every frame so

893
00:44:12,248 --> 00:44:16,659
the question is how are we going to

894
00:44:13,568 --> 00:44:19,778
break up the hemisphere into pieces that

895
00:44:16,659 --> 00:44:21,548
will work well like that and so like I

896
00:44:19,778 --> 00:44:25,748
said one way I think to do this would be

897
00:44:21,548 --> 00:44:32,288
to do a hemisphere table that kind of

898
00:44:25,748 --> 00:44:33,608
lets us pick a base vector that we've

899
00:44:32,289 --> 00:44:36,759
sort of pre distributed around the

900
00:44:33,608 --> 00:44:38,018
hemisphere and sample off of that the

901
00:44:36,759 --> 00:44:41,759
way I'm going to do that first is I'm

902
00:44:38,018 --> 00:44:41,758
just gonna do none of this

903
00:44:45,199 --> 00:44:47,730
instead what I'm going to do is I'm

904
00:44:46,829 --> 00:44:49,380
going to say all right

905
00:44:47,730 --> 00:44:51,420
when we sample the hemisphere what I'm

906
00:44:49,380 --> 00:44:59,820
doing here is I'm going to take a table

907
00:44:51,420 --> 00:45:02,190
that we have and I'm going to use the

908
00:44:59,820 --> 00:45:04,680
sample index and I'm going to and the

909
00:45:02,190 --> 00:45:07,559
sample index so the sample index I want

910
00:45:04,679 --> 00:45:08,940
to wrap so if you sample more than is in

911
00:45:07,559 --> 00:45:12,539
the table you just go back to beginning

912
00:45:08,940 --> 00:45:16,349
of the table so what I want to do here

913
00:45:12,539 --> 00:45:20,789
is the sample index I'm going to and it

914
00:45:16,349 --> 00:45:24,420
against the array count of the sample

915
00:45:20,789 --> 00:45:28,289
table so ever many samples there are in

916
00:45:24,420 --> 00:45:30,450
the table right what I want to do here

917
00:45:28,289 --> 00:45:33,659
is say whatever hungry samples are in a

918
00:45:30,449 --> 00:45:35,909
table I want to take the mask that would

919
00:45:33,659 --> 00:45:37,739
tell you how many there were and I'm

920
00:45:35,909 --> 00:45:39,899
gonna mask it off now this only works if

921
00:45:37,739 --> 00:45:41,669
it's a power of two right because

922
00:45:39,900 --> 00:45:43,380
subtracting one from something only

923
00:45:41,670 --> 00:45:45,900
generates the mask if it's a power of

924
00:45:43,380 --> 00:45:47,940
two because if it's power 2 then in bits

925
00:45:45,900 --> 00:45:49,829
it looks like one zero zero zero zero

926
00:45:47,940 --> 00:45:52,139
zero something yes it's just a sum set

927
00:45:49,829 --> 00:45:54,059
of zeros right so just to attract one

928
00:45:52,139 --> 00:45:56,400
from it you lose that initial one and

929
00:45:54,059 --> 00:45:58,500
get ones everywhere else and that's the

930
00:45:56,400 --> 00:45:59,910
mask that keeps the thing anding

931
00:45:58,500 --> 00:46:00,889
properly right that keeps the thing

932
00:45:59,909 --> 00:46:03,119
within range

933
00:46:00,889 --> 00:46:04,710
so very simple bit operation with a

934
00:46:03,119 --> 00:46:06,750
constant there to make sure that we

935
00:46:04,710 --> 00:46:09,889
always wrap and then I'm just going to

936
00:46:06,750 --> 00:46:09,889
say this has to be a power of two

937
00:46:23,059 --> 00:46:29,549
so all I'm going to do at first is just

938
00:46:27,119 --> 00:46:31,500
sample the sample table and that way we

939
00:46:29,550 --> 00:46:32,970
can see what the sample table is we're

940
00:46:31,500 --> 00:46:34,679
not gonna inject any randomness into it

941
00:46:32,969 --> 00:46:35,939
now this is a very bad idea for lighting

942
00:46:34,679 --> 00:46:38,639
quality because it means it will just

943
00:46:35,940 --> 00:46:40,679
find an exact as you move around as

944
00:46:38,639 --> 00:46:41,819
it'll just like immediately like have

945
00:46:40,679 --> 00:46:46,919
discontinuous lighting as you move

946
00:46:41,820 --> 00:46:50,610
around but it will allow us to see

947
00:46:46,920 --> 00:46:52,079
whether our sample table looks right if

948
00:46:50,610 --> 00:46:53,700
that makes sense

949
00:46:52,079 --> 00:46:55,139
so what I can do here is you say alright

950
00:46:53,699 --> 00:46:56,279
let's build the sample table then we

951
00:46:55,139 --> 00:46:57,629
only have to do this at the beginning of

952
00:46:56,280 --> 00:46:58,560
the game but I'm gonna do it every frame

953
00:46:57,630 --> 00:47:04,050
anyway because it's gonna be pretty

954
00:46:58,559 --> 00:47:07,529
cheap to build this table we're out of

955
00:47:04,050 --> 00:47:10,019
here nope here we go so what I'm gonna

956
00:47:07,530 --> 00:47:16,470
do here is just fill the table so sample

957
00:47:10,019 --> 00:47:29,190
table what we want to do is kind of

958
00:47:16,469 --> 00:47:31,169
build this table up and we need to come

959
00:47:29,190 --> 00:47:33,720
up with a way to sort of distribute

960
00:47:31,170 --> 00:47:37,230
these points now maybe we don't I don't

961
00:47:33,719 --> 00:47:39,000
know that we really want it to be 16

962
00:47:37,230 --> 00:47:40,619
long and maybe that we want to do 18

963
00:47:39,000 --> 00:47:41,849
long and sample twice from every one of

964
00:47:40,619 --> 00:47:44,210
them for example I'm sorry just eight

965
00:47:41,849 --> 00:47:47,489
long and sample twice for me two of them

966
00:47:44,210 --> 00:47:48,570
that's hard to say I'm not sure so we'll

967
00:47:47,489 --> 00:47:51,389
have to play around with that and see

968
00:47:48,570 --> 00:47:53,220
how how big we actually want the table

969
00:47:51,389 --> 00:47:55,440
to be and that's how many sort of

970
00:47:53,219 --> 00:47:57,599
buckets of the hemisphere we want

971
00:47:55,440 --> 00:47:59,280
because we can choose to have sixteen

972
00:47:57,599 --> 00:48:01,860
buckets on the hemisphere and sample

973
00:47:59,280 --> 00:48:03,269
them all once for sixteen rays or we can

974
00:48:01,860 --> 00:48:04,800
have eight buckets on the hemisphere and

975
00:48:03,269 --> 00:48:06,900
sample them all twice for sixteen rays

976
00:48:04,800 --> 00:48:12,930
right so it's kind of up to us how we

977
00:48:06,900 --> 00:48:16,220
want to do that that's just yeah depends

978
00:48:12,929 --> 00:48:18,299
on what we find to be more effective so

979
00:48:16,219 --> 00:48:21,419
if we take a look at the sample table

980
00:48:18,300 --> 00:48:22,200
here I'm gonna go ahead and set first of

981
00:48:21,420 --> 00:48:24,480
all I want

982
00:48:22,199 --> 00:48:26,009
obviously one that's directly up I think

983
00:48:24,480 --> 00:48:27,230
that's a pretty important thing to do

984
00:48:26,010 --> 00:48:30,650
sample around the

985
00:48:27,230 --> 00:48:33,559
vector I'd like to sample ones that are

986
00:48:30,650 --> 00:48:35,630
close to directly up so I also probably

987
00:48:33,559 --> 00:48:40,460
want to do something that's like four

988
00:48:35,630 --> 00:48:44,630
quadrants around there I'm not sure

989
00:48:40,460 --> 00:48:48,010
exactly how I want to do that but you

990
00:48:44,630 --> 00:48:48,010
know we can play with this a little bit

991
00:48:52,059 --> 00:48:57,190
so this is just gonna be me sort of

992
00:49:00,429 --> 00:49:06,559
randomly distributing these so I have

993
00:49:04,670 --> 00:49:10,130
one up and then like you know four

994
00:49:06,559 --> 00:49:15,380
quadrants around that one up then we

995
00:49:10,130 --> 00:49:18,590
kind of maybe move down to maybe the

996
00:49:15,380 --> 00:49:19,910
eighth wide ring all the way around and

997
00:49:18,590 --> 00:49:22,460
I'm not sure exactly how we want to do

998
00:49:19,909 --> 00:49:37,039
that but again so let's just say we did

999
00:49:22,460 --> 00:49:41,990
something like this two three four five

1000
00:49:37,039 --> 00:49:45,050
six seven eight so something like this

1001
00:49:41,989 --> 00:49:53,868
where we said all right let's do every

1002
00:49:45,050 --> 00:49:56,130
permutation of these so you do this more

1003
00:49:53,869 --> 00:49:59,189
systemically so we do

1004
00:49:56,130 --> 00:49:59,189
[Music]

1005
00:50:08,909 --> 00:50:17,219
so okay we've got negative 5 negative 5

1006
00:50:12,719 --> 00:50:21,358
negative 5 0 negative 5 5 so that's all

1007
00:50:17,219 --> 00:50:35,819
the ones on the bottom then we would

1008
00:50:21,358 --> 00:50:38,809
have those 6 there and then we also

1009
00:50:35,820 --> 00:50:38,809
would need

1010
00:50:45,789 --> 00:50:56,050
the ones that have zero on them so we

1011
00:50:48,670 --> 00:51:01,809
just need negative 5 5 negative 5 0

1012
00:50:56,050 --> 00:51:04,680
negative 5 positive 5 5 negative 5 5 0 5

1013
00:51:01,809 --> 00:51:08,259
5 and I guess we're missing one here oh

1014
00:51:04,679 --> 00:51:12,399
no because we don't need 0 0 so then in

1015
00:51:08,260 --> 00:51:14,590
here we just have 0 negative 5 so that's

1016
00:51:12,400 --> 00:51:17,470
it that's all

1017
00:51:14,590 --> 00:51:19,809
and then 4 13 14 and 15 those are just

1018
00:51:17,469 --> 00:51:22,449
random samples around the edge like low

1019
00:51:19,809 --> 00:51:25,599
ones we don't really haven't quite

1020
00:51:22,449 --> 00:51:30,779
enough there for that so I don't know

1021
00:51:25,599 --> 00:51:30,779
maybe the answer is there should be

1022
00:51:30,929 --> 00:51:39,069
something here a little bit more

1023
00:51:36,159 --> 00:51:49,269
rigorous I'm not sure let's say this is

1024
00:51:39,070 --> 00:51:51,340
just something like that and we're and

1025
00:51:49,269 --> 00:51:56,050
we're miss we'd be missing one here as I

1026
00:51:51,340 --> 00:52:01,470
guess what I'm saying because we really

1027
00:51:56,050 --> 00:52:05,019
want one more so what we could do is

1028
00:52:01,469 --> 00:52:16,419
just say all right maybe it's more like

1029
00:52:05,019 --> 00:52:18,929
this and then we do get that last corner

1030
00:52:16,420 --> 00:52:18,930
sample

1031
00:52:27,530 --> 00:52:48,510
so that's a sample table right and it's

1032
00:52:31,679 --> 00:52:51,269
all good and in theory now we should be

1033
00:52:48,510 --> 00:52:52,650
able to see a very regular sampling

1034
00:52:51,269 --> 00:52:54,750
pattern so it should be no flicker at

1035
00:52:52,650 --> 00:52:58,079
all right because it's OB sampling

1036
00:52:54,750 --> 00:53:01,710
exactly the same stuff and that is true

1037
00:52:58,079 --> 00:53:03,269
right there's no flicker but it's not

1038
00:53:01,710 --> 00:53:05,820
sampling the legging very well because

1039
00:53:03,269 --> 00:53:11,340
it just only happens in that one in

1040
00:53:05,820 --> 00:53:14,490
those specific directions right okay so

1041
00:53:11,340 --> 00:53:17,760
here are those directions I'll be honest

1042
00:53:14,489 --> 00:53:19,649
that doesn't look quite right to me does

1043
00:53:17,760 --> 00:53:22,890
it well no actually does that's okay

1044
00:53:19,650 --> 00:53:24,809
yeah that looks pretty good I think what

1045
00:53:22,889 --> 00:53:27,839
what I'm seeing here is these should be

1046
00:53:24,809 --> 00:53:29,820
a little bit lower than they are but

1047
00:53:27,840 --> 00:53:34,019
other than that I think we're pretty

1048
00:53:29,820 --> 00:53:36,809
good so those those mid-range octant

1049
00:53:34,019 --> 00:53:38,880
ones maybe need to be flattened down a

1050
00:53:36,809 --> 00:53:51,650
little bit so you know maybe these need

1051
00:53:38,880 --> 00:53:51,650
to be more like this right

1052
00:53:59,409 --> 00:54:07,899
and that looks a lot better to me and as

1053
00:54:06,400 --> 00:54:11,910
you can see the lugging still works just

1054
00:54:07,900 --> 00:54:14,200
fine it maybe just isn't quite so

1055
00:54:11,909 --> 00:54:16,809
accurate in a lot of cases and it has

1056
00:54:14,199 --> 00:54:20,039
some weird like kind of jerks on and off

1057
00:54:16,809 --> 00:54:22,599
right because it never has any soft

1058
00:54:20,039 --> 00:54:24,460
smoothing around those edges but it gets

1059
00:54:22,599 --> 00:54:27,849
rid of that and it misses some obvious

1060
00:54:24,460 --> 00:54:29,349
lighting things right but again you can

1061
00:54:27,849 --> 00:54:31,780
see that it gets rid of the flicker

1062
00:54:29,349 --> 00:54:34,150
because it doesn't change per frame it

1063
00:54:31,780 --> 00:54:35,769
only it's only when something moves so

1064
00:54:34,150 --> 00:54:37,630
that's exactly what we're trying to mix

1065
00:54:35,769 --> 00:54:39,369
in here is the fact that a stable

1066
00:54:37,630 --> 00:54:41,950
sampling pattern wouldn't flicker but it

1067
00:54:39,369 --> 00:54:44,470
misses information so we're trying to

1068
00:54:41,949 --> 00:54:47,559
combine the two together to like get the

1069
00:54:44,469 --> 00:54:50,500
information over several frames if we

1070
00:54:47,559 --> 00:54:55,679
can but reduce that flicker by keeping

1071
00:54:50,500 --> 00:54:58,809
the samples stratified in a similar way

1072
00:54:55,679 --> 00:55:00,608
so okay so let's suppose we added a

1073
00:54:58,809 --> 00:55:03,730
little bit of noise in there now to an

1074
00:55:00,608 --> 00:55:05,710
ample sample Hemisphere right we come up

1075
00:55:03,730 --> 00:55:09,490
with one of these and maybe you know

1076
00:55:05,710 --> 00:55:14,740
let's say all we do is we just perturb

1077
00:55:09,489 --> 00:55:21,729
around them a little bit right because

1078
00:55:14,739 --> 00:55:23,618
we certainly could in fact we still

1079
00:55:21,730 --> 00:55:24,579
leave this in here which I don't know if

1080
00:55:23,619 --> 00:55:26,980
we even really need to do that

1081
00:55:24,579 --> 00:55:29,380
pélissier so if we take random bilateral

1082
00:55:26,980 --> 00:55:32,490
so let's suppose we just do pretty small

1083
00:55:29,380 --> 00:55:32,490
perturbations for now

1084
00:55:42,820 --> 00:56:12,500
you know what let me do it this way so

1085
00:56:10,070 --> 00:56:13,460
let's suppose we just said okay you know

1086
00:56:12,500 --> 00:56:16,610
we're just going to do a small

1087
00:56:13,460 --> 00:56:23,179
perturbation for now maybe a quarter at

1088
00:56:16,610 --> 00:56:24,829
most and our results just gonna be

1089
00:56:23,179 --> 00:56:30,139
whatever the base vector is perturbed by

1090
00:56:24,829 --> 00:56:31,340
that much okay and let's see what kind

1091
00:56:30,139 --> 00:56:32,509
of same thing that gives us just as a

1092
00:56:31,340 --> 00:56:34,370
start right not saying that's

1093
00:56:32,510 --> 00:56:40,190
particularly good but you know there we

1094
00:56:34,369 --> 00:56:43,400
go so it seems like that's maybe still a

1095
00:56:40,190 --> 00:56:45,670
little bit too much movement let me see

1096
00:56:43,400 --> 00:56:45,670
here

1097
00:56:46,150 --> 00:56:51,800
combat down a little so there we go

1098
00:56:50,300 --> 00:56:53,269
that's that's maybe a little bit more

1099
00:56:51,800 --> 00:56:55,039
gentle right

1100
00:56:53,269 --> 00:56:58,340
unfortunately there you can still see

1101
00:56:55,039 --> 00:57:02,059
we're not really covering everywhere

1102
00:56:58,340 --> 00:57:04,789
probably can see these two things don't

1103
00:57:02,059 --> 00:57:07,480
quite get together let's let's expand

1104
00:57:04,789 --> 00:57:07,480
that out a little bit

1105
00:57:08,760 --> 00:57:21,240
their debt now they're now they're much

1106
00:57:11,760 --> 00:57:22,740
more able to sort of converge there so

1107
00:57:21,239 --> 00:57:31,469
you can see we still get a lot of

1108
00:57:22,739 --> 00:57:32,669
apparent flicker there right in terms of

1109
00:57:31,469 --> 00:57:35,069
how much noise are you can sort of see

1110
00:57:32,670 --> 00:57:38,210
it I'm going to go ahead and see what

1111
00:57:35,070 --> 00:57:38,210
the threshold is there

1112
00:57:48,829 --> 00:57:55,170
so if I set the ratio to zero so we're

1113
00:57:52,829 --> 00:57:58,139
just using completely stable basis so

1114
00:57:55,170 --> 00:58:01,200
now we get no flicker right let's

1115
00:57:58,139 --> 00:58:07,679
suppose I set it up to put in a little

1116
00:58:01,199 --> 00:58:11,069
bit so you can pretty much see you know

1117
00:58:07,679 --> 00:58:16,190
the the flicker appears very quickly you

1118
00:58:11,070 --> 00:58:19,320
know very little perturbation of the

1119
00:58:16,190 --> 00:58:21,539
sampling directions already yields a

1120
00:58:19,320 --> 00:58:23,789
pretty reasonable flicker there right I

1121
00:58:21,539 --> 00:58:34,529
mean it's not horrible but it's

1122
00:58:23,789 --> 00:58:40,199
definitely there so let's say we put in

1123
00:58:34,530 --> 00:58:43,460
a lot but it's pretty is definitely the

1124
00:58:40,199 --> 00:58:43,460
reduction is noticeable

1125
00:58:55,300 --> 00:58:59,570
like you definitely do get significantly

1126
00:58:57,889 --> 00:59:01,839
less liquor as you bring that number

1127
00:58:59,570 --> 00:59:01,840
down

1128
00:59:07,510 --> 00:59:12,100
I also forget how many frames of

1129
00:59:09,880 --> 00:59:14,820
smoothing we're doing right now let's

1130
00:59:12,099 --> 00:59:14,819
take a look at that number

1131
00:59:36,429 --> 00:59:45,179
I don't know where RT Update is there it

1132
00:59:39,460 --> 00:59:51,010
is so right now we're doing 20 frames

1133
00:59:45,179 --> 00:59:55,179
right looks like a smoothing so 20

1134
00:59:51,010 --> 00:59:58,120
frames is at 60 frames a second it's

1135
00:59:55,179 --> 01:00:02,019
like a third of a second of lag and the

1136
00:59:58,119 --> 01:00:04,539
lighting right so we could do more like

1137
01:00:02,019 --> 01:00:06,009
if we wanted to we could we could bump

1138
01:00:04,539 --> 01:00:07,779
that up a little bit I'm curious to know

1139
01:00:06,010 --> 01:00:09,960
like what the happy medium is there as

1140
01:00:07,780 --> 01:00:09,960
well

1141
01:00:32,949 --> 01:00:38,109
you know I forgot about that little

1142
01:00:34,760 --> 01:00:38,110
thing where you can look over ledges

1143
01:01:00,639 --> 01:01:07,000
so I'm not sure how I feel about that I

1144
01:01:12,940 --> 01:01:18,588
mean another strategy I could try here

1145
01:01:16,550 --> 01:01:23,720
which sounds kind of nuts when I say it

1146
01:01:18,588 --> 01:01:26,358
but actually maybe make some sense is if

1147
01:01:23,719 --> 01:01:28,639
we didn't use randomized sampling so we

1148
01:01:26,358 --> 01:01:32,480
actually use 100% predictable sampling

1149
01:01:28,639 --> 01:01:34,608
and just did the samples over the number

1150
01:01:32,480 --> 01:01:37,010
of frames we smooth so let's say we say

1151
01:01:34,608 --> 01:01:38,989
there's 10 frames of smoothing that's a

1152
01:01:37,010 --> 01:01:41,270
hundred and 60 raycast and we just

1153
01:01:38,989 --> 01:01:52,309
recast them completely deterministically

1154
01:01:41,269 --> 01:01:55,119
over those frames kind of a weird way to

1155
01:01:52,309 --> 01:01:55,119
look at it but

1156
01:02:03,210 --> 01:02:09,449
I mean in theory it would work so just

1157
01:02:07,920 --> 01:02:12,019
like to give you an example of what I

1158
01:02:09,449 --> 01:02:12,019
mean by that

1159
01:02:13,789 --> 01:02:20,400
you know let's suppose I said okay look

1160
01:02:16,679 --> 01:02:22,289
here's how this is gonna go down instead

1161
01:02:20,400 --> 01:02:24,570
of having a random series that's stuffed

1162
01:02:22,289 --> 01:02:27,449
in here we're just we're not gonna do

1163
01:02:24,570 --> 01:02:32,700
that anymore instead what we're gonna do

1164
01:02:27,449 --> 01:02:34,559
is we're gonna say look we've got a sort

1165
01:02:32,699 --> 01:02:40,649
of a ticker right we've got like a

1166
01:02:34,559 --> 01:02:47,610
little like I don't know a counter some

1167
01:02:40,650 --> 01:02:49,260
kind a entropy counter so um when you

1168
01:02:47,610 --> 01:02:51,720
come through here we're gonna have an

1169
01:02:49,260 --> 01:02:55,040
entropy counter and we're gonna say

1170
01:02:51,719 --> 01:03:03,299
alright at the end the entropy counter

1171
01:02:55,039 --> 01:03:08,119
we add to that and if the end of you

1172
01:03:03,300 --> 01:03:08,120
Pantera is greater or equal to the frame

1173
01:03:08,329 --> 01:03:14,250
and to pay frame count then it it's

1174
01:03:12,179 --> 01:03:20,609
equal to zero again so it just it just

1175
01:03:14,250 --> 01:03:21,869
counts around there okay and so then

1176
01:03:20,610 --> 01:03:25,740
what we say is something completely

1177
01:03:21,869 --> 01:03:29,549
ridiculous which is like alright so then

1178
01:03:25,739 --> 01:03:32,909
we say well our T update value is just

1179
01:03:29,550 --> 01:03:37,440
one over whatever the that frame count

1180
01:03:32,909 --> 01:03:40,829
is so we need it to blend over this many

1181
01:03:37,440 --> 01:03:42,840
frames so that entropy frame count is

1182
01:03:40,829 --> 01:03:46,469
gonna tell us what that T update value

1183
01:03:42,840 --> 01:03:48,510
is our entropy frame count is just

1184
01:03:46,469 --> 01:03:50,849
however many we want to blend over right

1185
01:03:48,510 --> 01:03:52,560
so I don't know ten or twenty something

1186
01:03:50,849 --> 01:03:57,210
like that right let's say twenty because

1187
01:03:52,559 --> 01:04:00,150
that's what it was right then what we do

1188
01:03:57,210 --> 01:04:01,949
is when we go to seed the series we

1189
01:04:00,150 --> 01:04:07,410
don't store the series anymore right

1190
01:04:01,949 --> 01:04:09,719
series does not get stored sueing here

1191
01:04:07,409 --> 01:04:12,779
instead what we do is we say okay we're

1192
01:04:09,719 --> 01:04:14,849
never gonna store the series the series

1193
01:04:12,780 --> 01:04:16,590
just gets seated off of the entropy for

1194
01:04:14,849 --> 01:04:19,889
this particular frame

1195
01:04:16,590 --> 01:04:22,500
so we say okay the the series is just

1196
01:04:19,889 --> 01:04:23,940
seated because I think this is how the

1197
01:04:22,500 --> 01:04:25,860
service works anyway I don't remember

1198
01:04:23,940 --> 01:04:29,789
how we did this here do we have a seed

1199
01:04:25,860 --> 01:04:32,579
function there we go

1200
01:04:29,789 --> 01:04:35,639
so we just say look you're gonna random

1201
01:04:32,579 --> 01:04:41,369
seed off of the solutions entropy

1202
01:04:35,639 --> 01:04:49,019
freight counter and that entropy counter

1203
01:04:41,369 --> 01:04:51,449
is just you know some nonsense who knows

1204
01:04:49,019 --> 01:04:56,960
what's going on here that produces some

1205
01:04:51,449 --> 01:05:00,049
value random we stepping value I

1206
01:04:56,960 --> 01:05:04,079
produces some value off of this series

1207
01:05:00,050 --> 01:05:06,269
right that's that's it that's all it

1208
01:05:04,079 --> 01:05:10,380
does and so this way we know that every

1209
01:05:06,269 --> 01:05:13,530
we we wrap every end frames and sample

1210
01:05:10,380 --> 01:05:15,599
the same stuff again right does that

1211
01:05:13,530 --> 01:05:19,080
make sense

1212
01:05:15,599 --> 01:05:22,409
so this way we know that our our entropy

1213
01:05:19,079 --> 01:05:24,690
is not completely random

1214
01:05:22,409 --> 01:05:26,869
it actually cycles so if we were not to

1215
01:05:24,690 --> 01:05:29,099
look we should see this looking the same

1216
01:05:26,869 --> 01:05:31,429
it should it should be like a repetitive

1217
01:05:29,099 --> 01:05:31,429
pattern

1218
01:05:38,259 --> 01:05:43,210
although honestly it doesn't look like a

1219
01:05:40,190 --> 01:05:43,210
pedicab to me at all

1220
01:05:48,800 --> 01:05:52,820
so maybe that ain't right

1221
01:06:06,199 --> 01:06:19,699
oh yeah so I guess the problem there is

1222
01:06:16,389 --> 01:06:21,349
every individual point is still gonna be

1223
01:06:19,699 --> 01:06:25,989
in a different order so this would have

1224
01:06:21,349 --> 01:06:25,989
to be per point that we do that actually

1225
01:06:28,119 --> 01:06:32,569
so I take that back

1226
01:06:29,989 --> 01:06:37,069
this actually has to look since we're

1227
01:06:32,570 --> 01:06:39,260
gonna do the random sample here how

1228
01:06:37,070 --> 01:06:41,870
often is this serious get used just

1229
01:06:39,260 --> 01:06:49,310
there right yeah um so this actually has

1230
01:06:41,869 --> 01:06:51,380
to be like that and sorry like that and

1231
01:06:49,309 --> 01:06:53,599
we probably would want to randomize it

1232
01:06:51,380 --> 01:07:05,180
based on some properties of the point as

1233
01:06:53,599 --> 01:07:08,119
well but sorry so this is actually the

1234
01:07:05,179 --> 01:07:12,399
stable version and so now it should look

1235
01:07:08,119 --> 01:07:12,400
like a repetitive pattern I think

1236
01:07:16,480 --> 01:07:20,940
yes and now it does look like a

1237
01:07:18,280 --> 01:07:20,940
repetitive pattern

1238
01:07:36,699 --> 01:07:44,989
okay so now in theory it's only picking

1239
01:07:39,769 --> 01:07:47,750
up you know over the flames where it's

1240
01:07:44,989 --> 01:07:50,389
doing the blend now at least in theory

1241
01:07:47,750 --> 01:07:53,389
it's it's going to be picking up the

1242
01:07:50,389 --> 01:07:54,799
same results every 20 frames right so

1243
01:07:53,389 --> 01:07:57,170
it's kind of an integration over those

1244
01:07:54,800 --> 01:08:01,730
frames the problem is we're not really

1245
01:07:57,170 --> 01:08:04,700
doing a fair average over those in any

1246
01:08:01,730 --> 01:08:06,199
particular way like we're not doing

1247
01:08:04,699 --> 01:08:07,939
something which allows us to really

1248
01:08:06,199 --> 01:08:10,819
utilize all those samples because we're

1249
01:08:07,940 --> 01:08:13,220
just kind of blending towards whatever

1250
01:08:10,820 --> 01:08:17,930
the latest value is and that's not

1251
01:08:13,219 --> 01:08:19,219
necessarily what we would want so the

1252
01:08:17,930 --> 01:08:21,200
question is can we do a little bit

1253
01:08:19,220 --> 01:08:23,630
better than that by maybe making this be

1254
01:08:21,199 --> 01:08:28,250
more of a moving average that would

1255
01:08:23,630 --> 01:08:29,838
stabili come out I'm not sure if we can

1256
01:08:28,250 --> 01:08:33,020
do that directly but like here's an

1257
01:08:29,838 --> 01:08:34,880
example of how we would try so if we

1258
01:08:33,020 --> 01:08:37,400
take a look at how we're doing our

1259
01:08:34,880 --> 01:08:39,920
lurking right now you can see us doing

1260
01:08:37,399 --> 01:08:42,199
this here if instead of doing it that

1261
01:08:39,920 --> 01:08:45,199
way we know that T update is basically

1262
01:08:42,199 --> 01:08:49,510
the averaging amount so if instead what

1263
01:08:45,199 --> 01:08:49,510
we did is just accumulated

1264
01:08:55,390 --> 01:08:58,270
trying to think of like how I could make

1265
01:08:56,920 --> 01:09:00,579
this into a stable marriage this is

1266
01:08:58,270 --> 01:09:03,330
basically like one of those IR filter

1267
01:09:00,579 --> 01:09:03,329
kind of problems

1268
01:09:13,179 --> 01:09:18,179
yeah I'm not really sure I'm not really

1269
01:09:15,279 --> 01:09:22,000
sure we can do much better than that

1270
01:09:18,179 --> 01:09:26,230
hard to say here's what I will say so if

1271
01:09:22,000 --> 01:09:29,338
we made the period about half so you

1272
01:09:26,229 --> 01:09:29,338
know we updated

1273
01:09:40,939 --> 01:09:45,858
I guess I want the other way around so

1274
01:09:43,430 --> 01:09:48,048
the tea update amount is going to be

1275
01:09:45,859 --> 01:09:51,079
about you know half of whatever the

1276
01:09:48,048 --> 01:09:52,969
entropy frame count is so we'll update

1277
01:09:51,079 --> 01:09:56,180
more slowly than the number of samples

1278
01:09:52,969 --> 01:09:58,130
that we take I'm curious to know if that

1279
01:09:56,180 --> 01:10:00,590
if that's something that gives us good

1280
01:09:58,130 --> 01:10:06,710
result of course I need to probably

1281
01:10:00,590 --> 01:10:09,190
change this to be more like that to be a

1282
01:10:06,710 --> 01:10:09,189
fair comparison

1283
01:10:16,539 --> 01:10:22,090
so I'm not sure how much that really

1284
01:10:19,399 --> 01:10:22,089
helps us though

1285
01:10:44,829 --> 01:10:48,850
I'm also kind of curious so there's just

1286
01:10:47,289 --> 01:10:50,500
so many factors here I'm having trouble

1287
01:10:48,850 --> 01:10:53,700
I guess I probably need to like start

1288
01:10:50,500 --> 01:10:55,989
concentrating on particular ones with

1289
01:10:53,699 --> 01:10:58,630
the other thing I was wondering is how

1290
01:10:55,989 --> 01:11:01,029
much of that is from the average

1291
01:10:58,630 --> 01:11:05,279
direction to light and how much isn't so

1292
01:11:01,029 --> 01:11:08,710
I'm curious like if we were to say hey

1293
01:11:05,279 --> 01:11:12,420
yeah the solution average Direction oh

1294
01:11:08,710 --> 01:11:12,420
so we're still doing that

1295
01:11:15,210 --> 01:11:21,310
this is strictly color channel variance

1296
01:11:18,130 --> 01:11:23,380
right this is what it would look like if

1297
01:11:21,310 --> 01:11:28,390
we actually used the directional

1298
01:11:23,380 --> 01:11:41,590
component as well which honestly doesn't

1299
01:11:28,390 --> 01:11:44,590
really look much different in fact it

1300
01:11:41,590 --> 01:11:47,170
doesn't it looks a little different in

1301
01:11:44,590 --> 01:11:48,970
terms of the lighting solution but the

1302
01:11:47,170 --> 01:11:51,510
flicker actually doesn't seem to change

1303
01:11:48,970 --> 01:11:51,510
at all

1304
01:11:56,649 --> 01:12:00,799
like it doesn't seem to be an

1305
01:11:59,000 --> 01:12:12,319
appreciable source of variance for

1306
01:12:00,800 --> 01:12:15,980
whatever reason so yeah so I'm not sure

1307
01:12:12,319 --> 01:12:18,199
I feel like I'm missing something here

1308
01:12:15,979 --> 01:12:20,209
cuz I feel like these should not all be

1309
01:12:18,199 --> 01:12:22,189
as similar as they are and the fact that

1310
01:12:20,210 --> 01:12:23,689
they're not is a little confusing to me

1311
01:12:22,189 --> 01:12:25,219
I wonder if our blending is still not

1312
01:12:23,689 --> 01:12:28,909
quite what it should be

1313
01:12:25,220 --> 01:12:39,980
um so here's I'm gonna I want to check a

1314
01:12:28,909 --> 01:12:44,689
few things here so for starters I'm

1315
01:12:39,979 --> 01:12:50,899
gonna try doing a little experiment here

1316
01:12:44,689 --> 01:12:56,689
I'm gonna do and entropy frame count of

1317
01:12:50,899 --> 01:12:59,029
10 but a tea update of 1 so I just want

1318
01:12:56,689 --> 01:13:01,549
to see what happens if we just use its

1319
01:12:59,029 --> 01:13:05,800
if we just use the whole lighting

1320
01:13:01,550 --> 01:13:05,800
solution every time

1321
01:13:11,399 --> 01:13:19,649
because I want to see how noisy that is

1322
01:13:13,840 --> 01:13:19,650
right and that's like incredibly noisy

1323
01:13:24,060 --> 01:13:32,190
so take the smoothing out of the

1324
01:13:26,349 --> 01:13:32,190
equation see how this is doing here

1325
01:13:43,198 --> 01:13:48,689
and you know I mean I guess I can

1326
01:13:45,539 --> 01:13:50,310
understand why you know because if you

1327
01:13:48,689 --> 01:13:53,189
look at what's happening here like let's

1328
01:13:50,310 --> 01:13:56,130
suppose I move you know I take a look at

1329
01:13:53,189 --> 01:13:59,939
at how the like this this one frame that

1330
01:13:56,130 --> 01:14:01,079
we're drawing here for example I mean

1331
01:13:59,939 --> 01:14:05,669
this one point that we're drawing here

1332
01:14:01,079 --> 01:14:11,039
if I move this cube in the way so that

1333
01:14:05,670 --> 01:14:14,850
occasionally it hits it right then

1334
01:14:11,039 --> 01:14:17,909
exactly what I expect to happen sort of

1335
01:14:14,850 --> 01:14:20,340
happens which is that on a frame when it

1336
01:14:17,909 --> 01:14:24,300
does hit the kit when it when it finds

1337
01:14:20,340 --> 01:14:26,100
this this cube it'll be bright and on a

1338
01:14:24,300 --> 01:14:29,489
frame when it doesn't it'll be darker

1339
01:14:26,100 --> 01:14:32,400
right it'll go bright dark bright dark

1340
01:14:29,488 --> 01:14:34,229
right and that's exactly what you would

1341
01:14:32,399 --> 01:14:42,349
expect from that from the random

1342
01:14:34,229 --> 01:14:42,349
sampling so that's like unsurprising

1343
01:14:46,599 --> 01:14:55,779
and Sue the ability for those really

1344
01:14:54,128 --> 01:14:58,389
bright lights to sort of have that

1345
01:14:55,779 --> 01:15:06,969
effect on everything I guess is you know

1346
01:14:58,389 --> 01:15:10,779
it's kind of a it's kind of an

1347
01:15:06,969 --> 01:15:12,939
unfortunate aspect of that but so let me

1348
01:15:10,779 --> 01:15:16,768
go ahead and and play with this a little

1349
01:15:12,939 --> 01:15:16,769
bit here so I want to look at the

1350
01:15:17,399 --> 01:15:24,039
reframe camped so let's suppose the

1351
01:15:22,510 --> 01:15:26,378
entropy frame count was one this pattern

1352
01:15:24,038 --> 01:15:31,568
should become perfectly stable right it

1353
01:15:26,378 --> 01:15:37,389
does so you can kind of see that that

1354
01:15:31,569 --> 01:15:39,309
gets rid of all of the flicker right but

1355
01:15:37,389 --> 01:15:41,048
it means that a lot of light just never

1356
01:15:39,309 --> 01:15:46,239
picks up the fact that there was a light

1357
01:15:41,048 --> 01:15:47,889
near it right which is unfortunate and

1358
01:15:46,238 --> 01:15:54,788
again you know that can be solved

1359
01:15:47,889 --> 01:15:57,489
certainly and in fact we could even say

1360
01:15:54,788 --> 01:15:59,529
well you know maybe the entropy frame

1361
01:15:57,488 --> 01:16:01,388
count is a very small number maybe we

1362
01:15:59,529 --> 01:16:05,918
only sample like for entropy frames

1363
01:16:01,389 --> 01:16:07,569
right and then if the smoothing was over

1364
01:16:05,918 --> 01:16:09,939
a much longer period of time maybe

1365
01:16:07,569 --> 01:16:14,379
that's sufficient right so maybe if the

1366
01:16:09,939 --> 01:16:18,099
T update is back to 20 frames but the

1367
01:16:14,378 --> 01:16:19,748
entropy count fin count is only four

1368
01:16:18,099 --> 01:16:22,748
then the amount of variance you can get

1369
01:16:19,748 --> 01:16:24,488
in there is pretty low right and you can

1370
01:16:22,748 --> 01:16:26,948
see from that right that there isn't a

1371
01:16:24,488 --> 01:16:28,478
lot of flicker by comparison I guess

1372
01:16:26,948 --> 01:16:29,708
although you still get a little bit you

1373
01:16:28,479 --> 01:16:31,510
know in and out there

1374
01:16:29,708 --> 01:16:33,668
the other thing I could do I suppose is

1375
01:16:31,510 --> 01:16:38,639
say well I could actually track all four

1376
01:16:33,668 --> 01:16:38,639
like always track all four samples

1377
01:16:42,738 --> 01:16:52,888
yeah it's tough to say really tough to

1378
01:16:49,198 --> 01:16:54,178
say I'll I try increasing this a little

1379
01:16:52,889 --> 01:16:59,250
bit and I'll see what happens

1380
01:16:54,179 --> 01:17:01,679
and this gets larger so here we are

1381
01:16:59,250 --> 01:17:03,500
running with a lot more of course I

1382
01:17:01,679 --> 01:17:06,109
guess one problem is it's hard to see

1383
01:17:03,500 --> 01:17:07,948
what the flicker is when you end up

1384
01:17:06,109 --> 01:17:09,299
tanking the frame rate so I don't know

1385
01:17:07,948 --> 01:17:22,408
if we have to like optimize more I

1386
01:17:09,300 --> 01:17:23,940
suppose at that point this is also a

1387
01:17:22,408 --> 01:17:25,979
good way to look at our sampling pattern

1388
01:17:23,939 --> 01:17:31,888
right so you can see how it doesn't have

1389
01:17:25,979 --> 01:17:36,598
enough coverage you can see like where

1390
01:17:31,889 --> 01:17:40,409
the gaps are does that make sense

1391
01:17:36,599 --> 01:17:44,730
so if you take a look at what this ratio

1392
01:17:40,408 --> 01:17:48,589
has to be it's more like that to get

1393
01:17:44,729 --> 01:17:48,589
like you know an even coverage

1394
01:18:39,529 --> 01:18:42,130
so anyway

1395
01:18:55,590 --> 01:19:02,969
I guess I'm not 100% sure on which way

1396
01:19:00,479 --> 01:19:04,468
we could proceed at this point we have a

1397
01:19:02,969 --> 01:19:06,750
pretty good understanding about what's

1398
01:19:04,469 --> 01:19:10,560
going on but what we don't know is how

1399
01:19:06,750 --> 01:19:14,460
much better we should get at taking and

1400
01:19:10,560 --> 01:19:15,810
using samples before we just go well now

1401
01:19:14,460 --> 01:19:17,609
is the time to just try to do the

1402
01:19:15,810 --> 01:19:19,940
optimized version of this so we can cast

1403
01:19:17,609 --> 01:19:22,170
more Ray's per sample point right

1404
01:19:19,939 --> 01:19:24,960
because at some point casting the more

1405
01:19:22,170 --> 01:19:27,179
Ray's per sample point gives us smoother

1406
01:19:24,960 --> 01:19:28,079
values and maybe you know at that point

1407
01:19:27,179 --> 01:19:33,868
we're good enough

1408
01:19:28,079 --> 01:19:35,819
we don't really know so that's a tough

1409
01:19:33,868 --> 01:19:38,029
call and I don't really know how to make

1410
01:19:35,819 --> 01:19:38,029
it

1411
01:20:12,359 --> 01:20:22,988
hmm

1412
01:20:14,488 --> 01:20:25,178
decisions decisions so at the moment I

1413
01:20:22,988 --> 01:20:29,618
don't think there's anything about our

1414
01:20:25,179 --> 01:20:30,789
update that couldn't be partitioned so

1415
01:20:29,618 --> 01:20:33,609
if you take a look at compute light

1416
01:20:30,789 --> 01:20:35,579
propagation for example I did nothing in

1417
01:20:33,609 --> 01:20:38,589
here

1418
01:20:35,579 --> 01:20:41,408
it all just writes to the output array

1419
01:20:38,590 --> 01:20:43,150
based on the sample point index so in

1420
01:20:41,408 --> 01:20:46,359
theory we could multi-thread this pretty

1421
01:20:43,149 --> 01:20:48,638
trivially so maybe we should and then we

1422
01:20:46,359 --> 01:20:51,658
just have eight times more Rea counts

1423
01:20:48,639 --> 01:20:55,420
here for free

1424
01:20:51,658 --> 01:20:57,339
well maybe not eight at least four so we

1425
01:20:55,420 --> 01:21:01,408
could go to 64 arrays pretty trivially

1426
01:20:57,340 --> 01:21:01,409
so maybe we just should you know

1427
01:21:10,560 --> 01:21:13,810
right so maybe I should just do

1428
01:21:12,640 --> 01:21:17,829
something where I say like all right

1429
01:21:13,810 --> 01:21:22,660
look we want to work you call back

1430
01:21:17,829 --> 01:21:31,649
that's like new lighting work and then

1431
01:21:22,659 --> 01:21:31,649
we've just got a lighting work pointer

1432
01:21:35,039 --> 01:21:53,220
and and off it goes so then in here we

1433
01:21:38,829 --> 01:21:53,220
just say I'm just gonna do it like this

1434
01:21:56,939 --> 01:22:07,179
so let's go say all right we've got a

1435
01:21:59,140 --> 01:22:10,410
first and stride actually now we don't

1436
01:22:07,180 --> 01:22:10,409
we look to a first in the last

1437
01:22:16,810 --> 01:22:54,310
I saw just do that and I think that's

1438
01:22:48,460 --> 01:22:56,050
all we would need to do if we wanted to

1439
01:22:54,310 --> 01:23:07,840
just get it going significantly faster

1440
01:22:56,050 --> 01:23:10,449
so we can play around with it so we

1441
01:23:07,840 --> 01:23:13,750
could just make some of these and off we

1442
01:23:10,449 --> 01:23:16,349
go it would be exactly what you expect

1443
01:23:13,750 --> 01:23:16,350
so

1444
01:23:36,449 --> 01:23:39,449
yeah

1445
01:23:44,090 --> 01:23:56,560
so I'm not actually sure software

1446
01:23:50,239 --> 01:23:59,750
rendered commands I'm not sure exactly

1447
01:23:56,560 --> 01:24:07,640
where we're supposed to get that

1448
01:23:59,750 --> 01:24:09,439
particular piece of information because

1449
01:24:07,640 --> 01:24:18,050
we've kind of got these two cue sir I

1450
01:24:09,439 --> 01:24:21,909
think we can just use the game memory we

1451
01:24:18,050 --> 01:24:24,110
just want the high priority queue right

1452
01:24:21,909 --> 01:24:26,329
but I don't know exactly where we get

1453
01:24:24,109 --> 01:24:29,119
that so I'll just do this first and

1454
01:24:26,329 --> 01:24:32,859
assume you pass that in so inside

1455
01:24:29,119 --> 01:24:38,840
hand-made we have that information

1456
01:24:32,859 --> 01:24:42,259
inside game update so this right here is

1457
01:24:38,840 --> 01:24:46,130
where that that cue comes from I suppose

1458
01:24:42,260 --> 01:24:50,480
well world mode uses it to write it was

1459
01:24:46,130 --> 01:24:52,699
doing it here but out again know where

1460
01:24:50,479 --> 01:24:56,209
the transient state information comes

1461
01:24:52,699 --> 01:24:58,819
from right yeah I'd have to get passed

1462
01:24:56,210 --> 01:25:01,760
in but I suppose that's fine because

1463
01:24:58,819 --> 01:25:04,039
actually when you call the lighting

1464
01:25:01,760 --> 01:25:05,750
update function so when you call

1465
01:25:04,039 --> 01:25:12,079
lighting test we could just have you

1466
01:25:05,750 --> 01:25:14,210
pass it in right so that's actually fine

1467
01:25:12,079 --> 01:25:16,779
that's pretty straightforward I don't

1468
01:25:14,210 --> 01:25:16,779
mind that at all

1469
01:25:20,729 --> 01:25:23,459
so yeah so this is pretty

1470
01:25:22,079 --> 01:25:40,109
straightforward I think all you do is

1471
01:25:23,460 --> 01:25:42,960
this so you just say alright compute

1472
01:25:40,109 --> 01:25:45,739
like propagation and it would say I want

1473
01:25:42,960 --> 01:25:50,640
to add a bunch of these entries in here

1474
01:25:45,739 --> 01:25:54,239
I'm not sure I remember if we say for

1475
01:25:50,640 --> 01:25:58,619
the work you what its distribution

1476
01:25:54,239 --> 01:26:00,210
fan-out is necessarily but I suppose we

1477
01:25:58,619 --> 01:26:02,399
can just chunk these up in just however

1478
01:26:00,210 --> 01:26:06,960
much we really want to so we can just

1479
01:26:02,399 --> 01:26:14,429
say like points per work you know and

1480
01:26:06,960 --> 01:26:15,840
points per work is it's gonna be well

1481
01:26:14,430 --> 01:26:17,340
actually I guess we just want to

1482
01:26:15,840 --> 01:26:19,560
distribute this among some number of

1483
01:26:17,340 --> 01:26:22,739
things actually so even easier than that

1484
01:26:19,560 --> 01:26:25,500
I can just say lighting work you know

1485
01:26:22,739 --> 01:26:28,579
however many there's going to be 32 of

1486
01:26:25,500 --> 01:26:31,229
these or something probably even less

1487
01:26:28,579 --> 01:26:35,640
and then I can just say like alright the

1488
01:26:31,229 --> 01:26:42,709
number of points points per work is just

1489
01:26:35,640 --> 01:26:42,710
going to be however many points we have

1490
01:26:43,399 --> 01:26:48,809
divided by however many works there are

1491
01:26:45,750 --> 01:26:51,350
and we also probably want to round up

1492
01:26:48,810 --> 01:26:51,350
right

1493
01:26:58,399 --> 01:27:03,329
sesame points for work there are then we

1494
01:27:00,659 --> 01:27:06,359
would just go like work index Syria work

1495
01:27:03,329 --> 01:27:08,760
index is less than however many we have

1496
01:27:06,359 --> 01:27:15,239
and then each one of these gets filled

1497
01:27:08,760 --> 01:27:29,070
out in series so letting work which

1498
01:27:15,239 --> 01:27:30,659
works index and then we just add each of

1499
01:27:29,069 --> 01:27:34,039
these on there so we say like okay add

1500
01:27:30,659 --> 01:27:37,260
to the lighting cue the do lighting work

1501
01:27:34,039 --> 01:27:43,560
function and here's the work so then the

1502
01:27:37,260 --> 01:27:45,720
work just needs to know the solution the

1503
01:27:43,560 --> 01:28:00,870
first sample point index and the one

1504
01:27:45,720 --> 01:28:02,070
past last seven point index so each of

1505
01:28:00,869 --> 01:28:03,599
these is just going to be like okay the

1506
01:28:02,069 --> 01:28:07,739
first sample point index is going to be

1507
01:28:03,600 --> 01:28:18,680
one plus the work index times points for

1508
01:28:07,739 --> 01:28:25,340
work and this is just going to be that

1509
01:28:18,680 --> 01:28:28,490
and that's it right

1510
01:28:25,340 --> 01:28:28,489
pretty sure

1511
01:28:29,939 --> 01:28:50,339
and off it goes I'm pretty sure that's

1512
01:28:32,909 --> 01:28:51,989
all you need to do and I don't know how

1513
01:28:50,340 --> 01:28:58,079
well that'll work but I think that's it

1514
01:28:51,989 --> 01:28:58,939
right or at least you should be so let's

1515
01:28:58,079 --> 01:29:01,500
take a look here

1516
01:28:58,939 --> 01:29:03,419
so there's compute light propagation it

1517
01:29:01,500 --> 01:29:20,819
does get called sixteen times so that's

1518
01:29:03,420 --> 01:29:23,690
good and so let's see if we can make it

1519
01:29:20,819 --> 01:29:23,689
any faster here

1520
01:29:33,210 --> 01:29:43,810
well it didn't seem like that went

1521
01:29:36,909 --> 01:29:50,979
faster and it should right unless you're

1522
01:29:43,810 --> 01:30:02,710
completely memory bound which I doubt so

1523
01:29:50,979 --> 01:30:18,059
if we want to do the single threaded we

1524
01:30:02,710 --> 01:30:18,060
just do this right

1525
01:30:21,810 --> 01:30:30,820
something is up what did I do that made

1526
01:30:26,710 --> 01:30:32,980
this so slow all of a sudden because

1527
01:30:30,819 --> 01:30:35,349
we're just still doing 16 rays this

1528
01:30:32,979 --> 01:30:37,029
should have been exactly the same right

1529
01:30:35,350 --> 01:30:39,449
there should be no difference between

1530
01:30:37,029 --> 01:30:39,448
those now

1531
01:30:53,579 --> 01:30:58,119
what did I do

1532
01:30:55,590 --> 01:31:01,020
I've done something horribly wrong I

1533
01:30:58,119 --> 01:31:01,019
just don't know what it is

1534
01:31:10,920 --> 01:31:31,149
so if I pass those exact values and in

1535
01:31:15,039 --> 01:31:41,470
here just curious if in here I say okay

1536
01:31:31,149 --> 01:31:48,969
this is one this is point count that's

1537
01:31:41,470 --> 01:31:51,480
still slow so why did that magically get

1538
01:31:48,970 --> 01:31:51,480
slower

1539
01:31:51,750 --> 01:32:02,289
we're only calling compute light

1540
01:31:53,859 --> 01:32:04,420
propagation one time and I thought we

1541
01:32:02,289 --> 01:32:09,119
were significantly faster than that with

1542
01:32:04,420 --> 01:32:14,399
when we were only doing sixteen rays

1543
01:32:09,119 --> 01:32:14,399
maybe I'm missing something here

1544
01:32:36,719 --> 01:33:03,420
and it could be that this slowed us down

1545
01:32:38,760 --> 01:33:05,690
I guess I don't really know this is what

1546
01:33:03,420 --> 01:33:05,690
we had before

1547
01:33:09,560 --> 01:33:12,560
oops

1548
01:33:18,050 --> 01:33:22,460
yeah that's that has nothing to do with

1549
01:33:20,250 --> 01:33:22,460
it

1550
01:33:25,850 --> 01:33:30,630
so I'm not sure where did we get

1551
01:33:28,170 --> 01:33:32,789
suddenly take a speed hit there for

1552
01:33:30,630 --> 01:33:35,460
something unrelated to what I was doing

1553
01:33:32,789 --> 01:33:38,729
apparently you unless I missed something

1554
01:33:35,460 --> 01:33:43,698
that we did earlier that caused that

1555
01:33:38,729 --> 01:33:51,529
change not sure what we'd done that

1556
01:33:43,698 --> 01:33:51,529
whereís look at our stats here

1557
01:33:59,229 --> 01:34:04,000
I guess it's because this world is

1558
01:34:01,988 --> 01:34:11,019
larger I suppose that is where we're

1559
01:34:04,000 --> 01:34:12,760
getting that speed drop from I guess

1560
01:34:11,020 --> 01:34:14,200
that's true so before when we were

1561
01:34:12,760 --> 01:34:16,810
running quickly I suppose we were

1562
01:34:14,199 --> 01:34:19,899
running on the smaller world either way

1563
01:34:16,810 --> 01:34:22,600
let's just go ahead and say when we if

1564
01:34:19,899 --> 01:34:24,549
we distribute this work we would expect

1565
01:34:22,600 --> 01:34:27,780
it to go faster but it did not go faster

1566
01:34:24,550 --> 01:34:27,779
right Oh

1567
01:34:46,349 --> 01:34:54,779
I guess it goes a little bit faster but

1568
01:34:51,269 --> 01:34:57,599
not particularly much I also don't know

1569
01:34:54,779 --> 01:34:59,809
so on the queues how many of these do we

1570
01:34:57,599 --> 01:34:59,809
have

1571
01:35:11,569 --> 01:35:16,099
so I guess one problem with this is

1572
01:35:16,159 --> 01:35:22,829
these are not tuned to the number of

1573
01:35:21,000 --> 01:35:24,270
CPUs we have either which I suppose

1574
01:35:22,829 --> 01:35:26,430
isn't particularly great we've never

1575
01:35:24,270 --> 01:35:33,600
actually did a get CPU call here it

1576
01:35:26,430 --> 01:35:35,579
looks like for whatever reason I'm not

1577
01:35:33,600 --> 01:35:44,760
sure what's up with that if we take a

1578
01:35:35,579 --> 01:35:46,680
look here for the there we go if we take

1579
01:35:44,760 --> 01:35:47,850
a look at the CPU utilization here I'd

1580
01:35:46,680 --> 01:35:59,159
also be interested to see what that

1581
01:35:47,850 --> 01:36:03,230
looks like when this runs so it does use

1582
01:35:59,159 --> 01:36:03,229
the CPU use quite handily here

1583
01:36:13,060 --> 01:36:19,230
but for whatever reason it does not get

1584
01:36:15,670 --> 01:36:19,230
particularly much faster

1585
01:36:51,649 --> 01:36:56,899
what if I've split this into less just

1586
01:36:54,569 --> 01:36:56,898
curious

1587
01:36:59,489 --> 01:37:07,319
strange enough that's worse this is

1588
01:37:03,060 --> 01:37:09,680
peculiar actually let's split it into

1589
01:37:07,319 --> 01:37:09,679
more

1590
01:37:17,270 --> 01:37:21,860
no real change once you get up over a

1591
01:37:19,220 --> 01:37:24,490
certain amount now that is pretty

1592
01:37:21,859 --> 01:37:24,489
bizarre

1593
01:37:31,288 --> 01:37:35,399
let's see how resilient it is to changes

1594
01:37:33,569 --> 01:37:38,460
in this so let's say we crank this up to

1595
01:37:35,399 --> 01:37:45,689
64 let's see what the difference in

1596
01:37:38,460 --> 01:37:49,279
speed is there so with multi-threading

1597
01:37:45,689 --> 01:37:49,279
on it's about 170

1598
01:38:02,170 --> 01:38:05,890
so you get you get a minor speed-up I

1599
01:38:04,779 --> 01:38:08,380
guess I would say so from

1600
01:38:05,890 --> 01:38:11,500
multi-threading that on the CPU side you

1601
01:38:08,380 --> 01:38:20,079
get a pre minor speed-up the speed-up is

1602
01:38:11,500 --> 01:38:22,750
you know about 25% of the total time you

1603
01:38:20,079 --> 01:38:25,449
saved back maybe a little less this is

1604
01:38:22,750 --> 01:38:28,779
pretty minor for going from a single

1605
01:38:25,449 --> 01:38:31,119
thread to many threads that's kind of

1606
01:38:28,779 --> 01:38:33,219
peculiar it's possible that if memory

1607
01:38:31,119 --> 01:38:35,409
bandwidth is entirely to blame here then

1608
01:38:33,220 --> 01:38:38,079
that could be but that doesn't seem

1609
01:38:35,409 --> 01:38:39,789
super likely like that that would really

1610
01:38:38,079 --> 01:38:42,239
be the case so I'm a little bit

1611
01:38:39,789 --> 01:38:44,500
surprised to see that that's happening

1612
01:38:42,239 --> 01:38:46,539
now granted we haven't looked at this

1613
01:38:44,500 --> 01:38:49,800
hardly at all

1614
01:38:46,539 --> 01:38:52,300
so it's kind of hard to make any sort of

1615
01:38:49,800 --> 01:38:55,350
judgments about that certainly so I

1616
01:38:52,300 --> 01:38:57,460
wouldn't suggest that there's anything

1617
01:38:55,350 --> 01:38:58,870
you know it could be some fairly

1618
01:38:57,460 --> 01:39:01,359
straightforward stuff is happening here

1619
01:38:58,869 --> 01:39:03,039
and we should just take a little bit of

1620
01:39:01,359 --> 01:39:05,409
a closer look at it but at the same time

1621
01:39:03,039 --> 01:39:07,649
it's just it seems like that should have

1622
01:39:05,409 --> 01:39:10,329
gotten faster if your multi-threaded it

1623
01:39:07,649 --> 01:39:11,559
naively and so I'm not sure why we

1624
01:39:10,329 --> 01:39:13,569
weren't why we're seeing that that

1625
01:39:11,560 --> 01:39:19,990
suggests that maybe something weird is

1626
01:39:13,569 --> 01:39:22,179
going on and I'm kind of curious to find

1627
01:39:19,989 --> 01:39:24,519
out what it is I would like to look

1628
01:39:22,180 --> 01:39:26,619
really quickly I'm just gonna take a

1629
01:39:24,520 --> 01:39:29,380
quick quick gander here sorry this won't

1630
01:39:26,619 --> 01:39:34,989
take too long I just want to take a look

1631
01:39:29,380 --> 01:39:37,779
inside this routine to see what's going

1632
01:39:34,989 --> 01:39:39,429
on you know what else I would like to do

1633
01:39:37,779 --> 01:39:43,679
actually and I think about it I'd like

1634
01:39:39,430 --> 01:39:43,680
to time that the overall as well

1635
01:39:58,130 --> 01:40:02,859
I just want to be able to see what's

1636
01:40:00,380 --> 01:40:02,859
going on there

1637
01:40:06,859 --> 01:40:13,250
so it's entirely in compute light

1638
01:40:10,469 --> 01:40:13,250
propagation

1639
01:40:40,868 --> 01:40:44,019
and there are a couple things in here so

1640
01:40:42,639 --> 01:40:47,319
I guess think about it there's a couple

1641
01:40:44,020 --> 01:40:52,210
things in here that are problematic so

1642
01:40:47,319 --> 01:41:09,099
we are doing a statistics gather which

1643
01:40:52,210 --> 01:41:11,399
is bad right and no that's not what I

1644
01:41:09,099 --> 01:41:11,400
map

1645
01:41:21,439 --> 01:41:25,769
so like this for example is really bad

1646
01:41:24,390 --> 01:41:29,640
because that cache line is going to

1647
01:41:25,770 --> 01:41:44,400
bounce around so I'm gonna just take

1648
01:41:29,640 --> 01:41:58,020
these out for a second just anywhere

1649
01:41:44,399 --> 01:42:00,179
that I was changing a value in the

1650
01:41:58,020 --> 01:42:05,820
solution itself I just want to get rid

1651
01:42:00,180 --> 01:42:08,070
of that all right

1652
01:42:05,819 --> 01:42:17,039
so I don't think that was probably

1653
01:42:08,069 --> 01:42:19,109
enough but I just wants it so wait a

1654
01:42:17,039 --> 01:42:26,159
second am I still casting all the right

1655
01:42:19,109 --> 01:42:29,339
yeah okay so that was it right I've kind

1656
01:42:26,159 --> 01:42:31,079
of nuts but if you look at what was

1657
01:42:29,340 --> 01:42:34,590
happening there the fact that we were

1658
01:42:31,079 --> 01:42:37,199
adding a number to a shared cache line

1659
01:42:34,590 --> 01:42:39,360
that whole time was enough to drop a

1660
01:42:37,199 --> 01:42:41,750
frame I mean let's just verify the test

1661
01:42:39,359 --> 01:42:41,750
the case

1662
01:42:45,920 --> 01:43:01,739
so there's one put back in there's your

1663
01:42:55,948 --> 01:43:05,729
the to put back in I mean look at how

1664
01:43:01,738 --> 01:43:10,468
fascinating that is right all I have to

1665
01:43:05,729 --> 01:43:13,409
do is add one plus plus I think it's

1666
01:43:10,469 --> 01:43:15,480
just one of these this is it right if

1667
01:43:13,409 --> 01:43:19,859
you just get rid of this one plus plus

1668
01:43:15,479 --> 01:43:24,139
that happens to either of those two get

1669
01:43:19,859 --> 01:43:27,769
rid of that and your frame rate triples

1670
01:43:24,140 --> 01:43:27,770
more than triples

1671
01:43:28,609 --> 01:43:33,599
ladies and gentlemen multi-threaded

1672
01:43:30,719 --> 01:43:35,789
coding so right just the fact that we

1673
01:43:33,600 --> 01:43:37,949
were operating on a shared variable

1674
01:43:35,789 --> 01:43:39,960
there meant all of our threads were just

1675
01:43:37,948 --> 01:43:42,359
locking up on that plus plus I guess

1676
01:43:39,960 --> 01:43:44,250
right waiting for that cache line to

1677
01:43:42,359 --> 01:43:49,139
bounce back between the processors which

1678
01:43:44,250 --> 01:43:53,510
is real bad and just that was enough to

1679
01:43:49,140 --> 01:43:56,300
totally thwart the speed improvement

1680
01:43:53,510 --> 01:43:58,619
pretty cool huh

1681
01:43:56,300 --> 01:44:00,329
so yeah so if we wanted to keep those

1682
01:43:58,619 --> 01:44:02,849
statistics we still could we just want

1683
01:44:00,329 --> 01:44:04,198
to add them into a frame based thing and

1684
01:44:02,850 --> 01:44:06,690
send them to the solution and then add

1685
01:44:04,198 --> 01:44:09,599
them at the end but that's pretty

1686
01:44:06,689 --> 01:44:15,089
fascinating right it's pretty nuts how

1687
01:44:09,600 --> 01:44:16,560
stuff like that works so yeah I mean

1688
01:44:15,090 --> 01:44:18,449
obviously we've got other stuff like

1689
01:44:16,560 --> 01:44:19,949
that that could be in play as well the

1690
01:44:18,448 --> 01:44:21,179
lighting points themselves probably want

1691
01:44:19,948 --> 01:44:24,479
to be straight about so we don't get

1692
01:44:21,180 --> 01:44:28,020
like overlapping there of cache lines

1693
01:44:24,479 --> 01:44:30,839
either so that part is a little nasty

1694
01:44:28,020 --> 01:44:35,250
and we should probably try and fix it

1695
01:44:30,840 --> 01:44:39,630
but that's kind of Awesome and also kind

1696
01:44:35,250 --> 01:44:48,630
of nuts so here's the version running

1697
01:44:39,630 --> 01:44:50,460
with 64 samples per point and it's

1698
01:44:48,630 --> 01:44:52,440
definitely quite a bit nicer it's also

1699
01:44:50,460 --> 01:44:54,300
running non stratified right now I think

1700
01:44:52,439 --> 01:44:56,049
is that right where is it running

1701
01:44:54,300 --> 01:45:07,849
stratified

1702
01:44:56,050 --> 01:45:10,010
look it's running stratified yeah so it

1703
01:45:07,849 --> 01:45:11,899
may be that we really don't have to

1704
01:45:10,010 --> 01:45:13,280
worry about the variants too much beyond

1705
01:45:11,899 --> 01:45:15,378
where we're at right now because a

1706
01:45:13,279 --> 01:45:18,469
properly optimized version is going to

1707
01:45:15,378 --> 01:45:19,760
cast in a phrase to keep this going and

1708
01:45:18,469 --> 01:45:26,198
then we just kind of have global

1709
01:45:19,760 --> 01:45:26,199
illumination right which is kind of cool

1710
01:45:34,510 --> 01:45:40,329
uh so yes so I don't really know what to

1711
01:45:38,229 --> 01:45:41,979
make a make of that other than to say

1712
01:45:40,329 --> 01:45:43,600
wow that's really cool that that meant

1713
01:45:41,979 --> 01:45:45,669
that if you do if you aren't careful

1714
01:45:43,600 --> 01:45:47,289
with your cache line ping ponging you're

1715
01:45:45,670 --> 01:45:48,489
gonna be in a lot of trouble we kind of

1716
01:45:47,289 --> 01:45:50,470
already knew that but it's just nice to

1717
01:45:48,489 --> 01:45:53,979
see such an obvious display of it at

1718
01:45:50,470 --> 01:46:04,270
work there I'm gonna go ahead and I also

1719
01:45:53,979 --> 01:46:06,759
just want to see like if we sort of set

1720
01:46:04,270 --> 01:46:10,950
the work point to a certain value and

1721
01:46:06,760 --> 01:46:10,949
use that instead of the work amount

1722
01:46:12,930 --> 01:46:17,130
I'm just curious here so if we take a

1723
01:46:15,699 --> 01:46:20,279
look at the things that we're modifying

1724
01:46:17,130 --> 01:46:23,680
we know that we would want there to be

1725
01:46:20,279 --> 01:46:27,399
so if there were 32 I'm sorry if they're

1726
01:46:23,680 --> 01:46:29,500
4 bytes per float and we're modifying 3

1727
01:46:27,399 --> 01:46:32,739
of them at a time for a color that's 12

1728
01:46:29,500 --> 01:46:35,680
of those so the problem there is those

1729
01:46:32,739 --> 01:46:41,769
are not gonna line very well on a cache

1730
01:46:35,680 --> 01:46:43,659
boundary kind of nasty so we would need

1731
01:46:41,770 --> 01:46:45,460
to be like sort of fun to cache line

1732
01:46:43,659 --> 01:46:50,260
batteries because cache lines about is

1733
01:46:45,460 --> 01:46:54,489
it's you know 64 bytes long and so 64

1734
01:46:50,260 --> 01:46:56,260
and 12/12 has a three factor of three in

1735
01:46:54,489 --> 01:47:00,909
it so I think we would need to do three

1736
01:46:56,260 --> 01:47:02,829
cache lines long or 192 right and 12

1737
01:47:00,909 --> 01:47:08,939
goes into that 16 times so you want to

1738
01:47:02,829 --> 01:47:11,559
do 16 points per if that makes sense

1739
01:47:08,939 --> 01:47:15,069
you'd really want to be some multiple of

1740
01:47:11,560 --> 01:47:18,100
16 points away pretty much all the time

1741
01:47:15,069 --> 01:47:19,929
and to keep yourself from overlapping a

1742
01:47:18,100 --> 01:47:22,030
little bit there so I don't know exactly

1743
01:47:19,930 --> 01:47:26,220
how we would want to guarantee that but

1744
01:47:22,029 --> 01:47:29,349
let's say you want to do 16 points per

1745
01:47:26,220 --> 01:47:33,610
work time some multiple so you know

1746
01:47:29,350 --> 01:47:35,860
let's say we want to do 256 points per

1747
01:47:33,609 --> 01:47:37,029
or something like that and then we would

1748
01:47:35,859 --> 01:47:39,939
just do something like this or we'd have

1749
01:47:37,029 --> 01:47:42,639
a lot of them and here we would just do

1750
01:47:39,939 --> 01:47:46,539
the the loop a little bit differently so

1751
01:47:42,640 --> 01:47:48,010
we'd say something like first point

1752
01:47:46,539 --> 01:47:52,420
index

1753
01:47:48,010 --> 01:47:58,060
you know equals zero first point index

1754
01:47:52,420 --> 01:48:00,520
is less than solution point count and

1755
01:47:58,060 --> 01:48:10,300
then first point index plus equals

1756
01:48:00,520 --> 01:48:12,550
points per work assert index actually I

1757
01:48:10,300 --> 01:48:19,840
guess I could still use the work index

1758
01:48:12,550 --> 01:48:21,760
here I suppose I could do that and just

1759
01:48:19,840 --> 01:48:24,730
break out of the loop once we're done so

1760
01:48:21,760 --> 01:48:26,340
I could say work index is less than the

1761
01:48:24,729 --> 01:48:30,839
rate count works

1762
01:48:26,340 --> 01:48:40,150
let's work index I could still do that

1763
01:48:30,840 --> 01:48:41,560
and points per work equals six and so

1764
01:48:40,149 --> 01:48:46,289
what I could say is there alright look

1765
01:48:41,560 --> 01:48:48,969
let's go through here get the work out

1766
01:48:46,289 --> 01:48:50,949
do it exactly we're doing it and if we

1767
01:48:48,969 --> 01:48:54,939
want to be run over that's when we know

1768
01:48:50,949 --> 01:48:57,269
that we're done right in a sense I still

1769
01:48:54,939 --> 01:49:01,049
need to be able to add it to the queue

1770
01:48:57,270 --> 01:49:02,890
but I need to break out after that so I

1771
01:49:01,050 --> 01:49:08,619
think it's false

1772
01:49:02,890 --> 01:49:12,640
Jenica screw it done break so at that

1773
01:49:08,619 --> 01:49:13,960
point we're finished and one of the

1774
01:49:12,640 --> 01:49:17,789
problems that we have here is again

1775
01:49:13,960 --> 01:49:20,219
we've got this offset by one situation

1776
01:49:17,789 --> 01:49:22,510
which causes a little bit of

1777
01:49:20,219 --> 01:49:23,890
consternation here so what I'm going to

1778
01:49:22,510 --> 01:49:28,480
do instead is I'm going to do it like

1779
01:49:23,890 --> 01:49:30,610
this and then in here I'm gonna just do

1780
01:49:28,479 --> 01:49:33,729
a modification of if work first sample

1781
01:49:30,609 --> 01:49:36,159
point index equals zero work for a

1782
01:49:33,729 --> 01:49:38,409
sample form x equals one so we'll still

1783
01:49:36,159 --> 01:49:42,099
give them out in evenly arranged

1784
01:49:38,409 --> 01:49:45,550
tranches like that but we'll you know

1785
01:49:42,100 --> 01:49:47,440
try to keep them aligned that way so the

1786
01:49:45,550 --> 01:49:49,300
problem here is you know you know we can

1787
01:49:47,439 --> 01:49:55,809
do that and and I think that's probably

1788
01:49:49,300 --> 01:49:58,260
the right way to do it I'm also going to

1789
01:49:55,810 --> 01:49:58,260
put this

1790
01:49:58,908 --> 01:50:12,658
at the end we also would have to go and

1791
01:50:09,569 --> 01:50:14,670
actually cache line align all the rest

1792
01:50:12,658 --> 01:50:17,099
of our stuff - because we don't actually

1793
01:50:14,670 --> 01:50:22,260
cache line or keep those cache lines

1794
01:50:17,100 --> 01:50:24,120
aligned in the first place so so in

1795
01:50:22,260 --> 01:50:25,409
other words the the various arrays that

1796
01:50:24,119 --> 01:50:27,750
we're working with aren't necessarily

1797
01:50:25,408 --> 01:50:29,819
cache line aligned at their outs at

1798
01:50:27,750 --> 01:50:31,889
their start so it doesn't really help

1799
01:50:29,819 --> 01:50:33,119
too much to cache line align them there

1800
01:50:31,889 --> 01:50:34,739
I just wanted to make sure that routine

1801
01:50:33,119 --> 01:50:36,510
was not adding insult to injury

1802
01:50:34,738 --> 01:50:38,908
I'm curious now what would happen if we

1803
01:50:36,510 --> 01:50:41,100
ran with a lower number of rays as well

1804
01:50:38,908 --> 01:50:43,439
so we can we can basically get a full 16

1805
01:50:41,100 --> 01:50:45,510
frames a second by using the original

1806
01:50:43,439 --> 01:50:49,619
solution now a 60 frames a second rather

1807
01:50:45,510 --> 01:50:53,869
I think we could do whereas before we

1808
01:50:49,619 --> 01:50:53,869
weren't able to write

1809
01:51:00,350 --> 01:51:05,120
so we're definitely getting closer we're

1810
01:51:02,239 --> 01:51:06,559
just on the edge of good right we're

1811
01:51:05,119 --> 01:51:08,510
just on the edge of good and we have a

1812
01:51:06,560 --> 01:51:11,330
lot of options here

1813
01:51:08,510 --> 01:51:13,130
we just need to now quite cross over the

1814
01:51:11,329 --> 01:51:18,550
finish line because we're getting pretty

1815
01:51:13,130 --> 01:51:18,550
close right and we can run this thing

1816
01:51:19,510 --> 01:51:24,710
multi-threaded now which is nice as well

1817
01:51:22,520 --> 01:51:27,170
and see what the faster version of it

1818
01:51:24,710 --> 01:51:29,000
would look like we also could speed up

1819
01:51:27,170 --> 01:51:30,770
some of this stuff quite a bit like we

1820
01:51:29,000 --> 01:51:32,539
could do a lot better in all these

1821
01:51:30,770 --> 01:51:34,340
routines are kind of garbage right they

1822
01:51:32,539 --> 01:51:37,640
could all be sped up so we know that

1823
01:51:34,340 --> 01:51:39,770
we've got a lot of headroom to work with

1824
01:51:37,640 --> 01:51:44,480
there the question is just going to be

1825
01:51:39,770 --> 01:51:46,850
alright look what's the what's the best

1826
01:51:44,479 --> 01:51:49,429
pass to really finish this up do we go

1827
01:51:46,850 --> 01:51:53,600
GPU with it do we leave it on the CPU

1828
01:51:49,430 --> 01:51:55,789
side how do we tighten up that variance

1829
01:51:53,600 --> 01:51:57,860
there because we're getting closer but

1830
01:51:55,789 --> 01:52:00,260
it's like we're still may be wasting our

1831
01:51:57,859 --> 01:52:01,579
samples or replacing them improperly so

1832
01:52:00,260 --> 01:52:03,050
can we improve our stratified sampling

1833
01:52:01,579 --> 01:52:04,640
can we improve the way that we're

1834
01:52:03,050 --> 01:52:06,529
blending them together by being more

1835
01:52:04,640 --> 01:52:09,410
conscientious about using those samples

1836
01:52:06,529 --> 01:52:11,119
intelligently so we've we still got a

1837
01:52:09,409 --> 01:52:12,050
little bit to go it's definitely getting

1838
01:52:11,119 --> 01:52:15,970
there but we still got a little bits

1839
01:52:12,050 --> 01:52:15,970
good I'll go to a brief Q&amp;A here

1840
01:52:21,380 --> 01:52:36,029
looks like I got to do it in the other

1841
01:52:23,399 --> 01:52:37,469
one can we temporarily turn off turn

1842
01:52:36,029 --> 01:52:38,639
down the frame to frame color

1843
01:52:37,469 --> 01:52:40,469
interpolation see how much increase

1844
01:52:38,639 --> 01:52:49,559
sample account stabilize the solution

1845
01:52:40,469 --> 01:53:11,189
yes we can see updates so this turns it

1846
01:52:49,559 --> 01:53:17,429
off completely right and where's our red

1847
01:53:11,189 --> 01:53:21,478
cap so this was the original solution 16

1848
01:53:17,429 --> 01:53:25,559
rays per sample point and here was the

1849
01:53:21,479 --> 01:53:30,900
increase train number which is 664 and

1850
01:53:25,559 --> 01:53:32,279
it does do a pretty good job of reducing

1851
01:53:30,899 --> 01:53:38,879
that flicker but you can see that the

1852
01:53:32,279 --> 01:53:40,859
thicker still remains right we also

1853
01:53:38,880 --> 01:53:42,389
don't know which of these two is better

1854
01:53:40,859 --> 01:53:44,819
for that right we haven't played with

1855
01:53:42,389 --> 01:53:46,440
that too much so here is just completely

1856
01:53:44,819 --> 01:53:50,908
random you can see the complete random

1857
01:53:46,439 --> 01:53:52,319
sampling just does a better job right so

1858
01:53:50,908 --> 01:53:55,018
we still have a lot of work to do there

1859
01:53:52,319 --> 01:54:00,210
and let's we can look at entropy counter

1860
01:53:55,019 --> 01:54:03,869
here as well so if we up the entropy

1861
01:54:00,210 --> 01:54:08,939
frame count to a really high number for

1862
01:54:03,868 --> 01:54:10,649
example now we get a lot more variances

1863
01:54:08,939 --> 01:54:13,589
thing cycle through you could see a lot

1864
01:54:10,649 --> 01:54:15,629
more difference in the frames so I don't

1865
01:54:13,590 --> 01:54:18,170
know like I said we still have a ways to

1866
01:54:15,630 --> 01:54:19,949
go before we could really say that we've

1867
01:54:18,170 --> 01:54:22,109
gotten this under control

1868
01:54:19,948 --> 01:54:26,419
but certainly we have a lot of ways to

1869
01:54:22,109 --> 01:54:26,420
make it pretty good already right

1870
01:54:31,229 --> 01:54:36,669
you know we if we jack the smoothing up

1871
01:54:34,210 --> 01:54:37,869
you pretty much get a completely usable

1872
01:54:36,670 --> 01:54:48,119
solution here is just a little laggy

1873
01:54:37,869 --> 01:54:51,010
right the flicker is pretty usable here

1874
01:54:48,119 --> 01:54:53,109
which is I guess what like 50 frames of

1875
01:54:51,010 --> 01:54:55,930
lag so less than a second at 60 frames a

1876
01:54:53,109 --> 01:54:59,559
second of lag on the global illumination

1877
01:54:55,930 --> 01:55:02,520
lighting would give us what I would

1878
01:54:59,560 --> 01:55:06,010
consider a use usable amount of flicker

1879
01:55:02,520 --> 01:55:08,470
above that we start to be bad so at 20

1880
01:55:06,010 --> 01:55:12,270
frames you can see the flicker pretty

1881
01:55:08,470 --> 01:55:15,010
well right again not necessarily

1882
01:55:12,270 --> 01:55:17,280
unusable in a night time game because

1883
01:55:15,010 --> 01:55:19,869
the light sources are gonna be flickery

1884
01:55:17,279 --> 01:55:22,000
so we could almost excuse that with

1885
01:55:19,869 --> 01:55:23,619
fiction so I'm not too worried about it

1886
01:55:22,000 --> 01:55:25,119
either way it's just you know I want to

1887
01:55:23,619 --> 01:55:27,849
work on it and make sure it's good

1888
01:55:25,119 --> 01:55:34,809
before excusing something with fiction

1889
01:55:27,850 --> 01:55:36,910
right so yeah and unfortunately the CPU

1890
01:55:34,810 --> 01:55:39,360
version because we're not optimized on

1891
01:55:36,909 --> 01:55:44,529
CPU isn't really that fast at the moment

1892
01:55:39,359 --> 01:55:47,139
so we can't try things like 256 lighting

1893
01:55:44,529 --> 01:55:48,369
samples because it'd just be too slow

1894
01:55:47,140 --> 01:55:51,489
you wouldn't see the flicker anyway

1895
01:55:48,369 --> 01:55:54,159
really right because it just the frame

1896
01:55:51,488 --> 01:55:56,979
update is not fast enough right at that

1897
01:55:54,159 --> 01:56:00,220
point to really gauge whether the

1898
01:55:56,979 --> 01:56:02,169
lighting looks visually okay once you

1899
01:56:00,220 --> 01:56:03,460
get up to that number right cuz it's

1900
01:56:02,170 --> 01:56:04,690
just you know we don't we don't have an

1901
01:56:03,460 --> 01:56:06,430
acceptable frame rate so you can't

1902
01:56:04,689 --> 01:56:07,899
really tell you know it's the lighting

1903
01:56:06,430 --> 01:56:10,170
gonna be acceptable that frame rate or

1904
01:56:07,899 --> 01:56:10,170
not

1905
01:56:18,929 --> 01:56:23,340
so anyway that's where we're at

1906
01:56:40,029 --> 01:56:44,509
can someone explain why do store and

1907
01:56:42,289 --> 01:56:46,519
pass around one past last sample point

1908
01:56:44,510 --> 01:56:49,610
index instead of calculating it at the

1909
01:56:46,520 --> 01:56:56,390
loop part yes I can so the reason is

1910
01:56:49,609 --> 01:56:59,089
because well let's this fits wait you

1911
01:56:56,390 --> 01:57:02,270
could do it either way if you wanted to

1912
01:56:59,090 --> 01:57:03,949
inside here you could you could add the

1913
01:57:02,270 --> 01:57:08,090
number that you that was the fixed

1914
01:57:03,949 --> 01:57:11,329
number you wanted to do and then clamp

1915
01:57:08,090 --> 01:57:14,739
it to the point count there the reason

1916
01:57:11,329 --> 01:57:16,970
that I don't tend to do that is because

1917
01:57:14,739 --> 01:57:19,789
since it's gonna have to be computed

1918
01:57:16,970 --> 01:57:21,409
either way I'd rather just pass it in as

1919
01:57:19,789 --> 01:57:23,720
part of the work unit because then the

1920
01:57:21,409 --> 01:57:26,779
work units can be divided up however

1921
01:57:23,720 --> 01:57:29,360
they want here and it's clear to me what

1922
01:57:26,779 --> 01:57:31,789
I'm sending out as a job to do so if I

1923
01:57:29,359 --> 01:57:33,649
wanted to make some jobs smaller than

1924
01:57:31,789 --> 01:57:35,630
other jobs for some reason I don't know

1925
01:57:33,649 --> 01:57:37,519
why but like you know let's say in the

1926
01:57:35,630 --> 01:57:40,100
future we want more sampling and for

1927
01:57:37,520 --> 01:57:41,960
some points on others I don't know I can

1928
01:57:40,100 --> 01:57:44,360
just adjust how I'm doing it there so I

1929
01:57:41,960 --> 01:57:47,149
tend to always build my tiles for work

1930
01:57:44,359 --> 01:57:49,159
and record the tile in the work unit

1931
01:57:47,149 --> 01:57:51,170
rather than recomputing the tile later

1932
01:57:49,159 --> 01:57:53,689
just because it's usually free to do so

1933
01:57:51,170 --> 01:57:55,789
and it allows it to be more clear in the

1934
01:57:53,689 --> 01:57:59,960
code what you're giving out in terms of

1935
01:57:55,789 --> 01:58:01,489
work tranches you know it just localizes

1936
01:57:59,960 --> 01:58:02,960
the part that the code to the part you

1937
01:58:01,489 --> 01:58:05,420
want to but you could have done it all

1938
01:58:02,960 --> 01:58:08,750
you would need to do is pass the first

1939
01:58:05,420 --> 01:58:09,890
one right and more specifically you

1940
01:58:08,750 --> 01:58:14,689
wouldn't have to do that you could have

1941
01:58:09,890 --> 01:58:16,460
just passed a work index right so for

1942
01:58:14,689 --> 01:58:18,019
example one way to write this and we

1943
01:58:16,460 --> 01:58:19,430
chose not to do this way because work

1944
01:58:18,020 --> 01:58:20,990
queues are a little bit more flexible

1945
01:58:19,430 --> 01:58:27,099
because you can put arbitrary jobs in

1946
01:58:20,989 --> 01:58:30,578
there right

1947
01:58:27,099 --> 01:58:32,199
so the arbitrary jobs that you could put

1948
01:58:30,578 --> 01:58:34,448
in here can have any data you want and

1949
01:58:32,198 --> 01:58:36,549
that's valuable but another way to write

1950
01:58:34,448 --> 01:58:37,988
this is to just have a work number so

1951
01:58:36,550 --> 01:58:39,099
instead of a queue you just get a work

1952
01:58:37,988 --> 01:58:40,569
number and you look at what the work

1953
01:58:39,099 --> 01:58:42,819
number is and you generate your work

1954
01:58:40,569 --> 01:58:44,439
from that and that's a more specific

1955
01:58:42,819 --> 01:58:45,819
type of queue things have to have some

1956
01:58:44,439 --> 01:58:47,888
hard-coded Global's in there to

1957
01:58:45,819 --> 01:58:48,759
understand what they're working with but

1958
01:58:47,889 --> 01:58:50,859
that's it

1959
01:58:48,760 --> 01:58:52,750
right and that's a totally valid way to

1960
01:58:50,859 --> 01:58:54,488
distribute work and we could have done

1961
01:58:52,750 --> 01:58:55,929
it that way you just roll this code into

1962
01:58:54,488 --> 01:58:57,488
the part into the stuff that's up there

1963
01:58:55,929 --> 01:58:59,440
that would automatically know how to

1964
01:58:57,488 --> 01:59:01,928
take a work index out and generate what

1965
01:58:59,439 --> 01:59:03,009
the range was from it I just find it's a

1966
01:59:01,929 --> 01:59:05,770
little cleaner to do it this way and

1967
01:59:03,010 --> 01:59:07,360
more flexible but if you really want to

1968
01:59:05,770 --> 01:59:08,980
get it down to the nitty-gritty and not

1969
01:59:07,359 --> 01:59:10,960
do any extra work you don't have to

1970
01:59:08,979 --> 01:59:12,368
outside you could roll it down to just

1971
01:59:10,960 --> 01:59:13,899
one number and instead of a queue you

1972
01:59:12,368 --> 01:59:16,000
just have an increment and it's very

1973
01:59:13,899 --> 01:59:18,189
efficient we don't need that efficiency

1974
01:59:16,000 --> 01:59:20,260
because we're we have large work units

1975
01:59:18,189 --> 01:59:22,509
so the overhead is not much but when the

1976
01:59:20,260 --> 01:59:24,369
end that overhead gets more substantial

1977
01:59:22,510 --> 01:59:27,360
relative to the work amount you know

1978
01:59:24,368 --> 01:59:27,359
it's not it's not nothing

1979
01:59:28,618 --> 01:59:33,009
well bus why are we not using Atomics

1980
01:59:31,479 --> 01:59:35,289
when you modify data on the multi thread

1981
01:59:33,010 --> 01:59:36,940
pass because we're never touching the

1982
01:59:35,289 --> 01:59:42,908
same data by more than one thread that's

1983
01:59:36,939 --> 01:59:45,519
all the the threads are just separate if

1984
01:59:42,908 --> 01:59:49,719
we wanted to reinstate these statistics

1985
01:59:45,520 --> 01:59:52,690
we wouldn't probably still probably

1986
01:59:49,719 --> 01:59:55,689
wouldn't use Atomics here we'd sum these

1987
01:59:52,689 --> 01:59:58,059
up per thread and then use a single

1988
01:59:55,689 --> 02:00:00,460
atomic at the end when it when the

1989
01:59:58,060 --> 02:00:01,900
thread work exits right here to add them

1990
02:00:00,460 --> 02:00:06,219
back in so the cache line wouldn't

1991
02:00:01,899 --> 02:00:07,658
bounce around given the restricted

1992
02:00:06,219 --> 02:00:09,069
number of rays should they be biased

1993
02:00:07,658 --> 02:00:11,198
towards directions which are interesting

1994
02:00:09,069 --> 02:00:13,269
to us ie not vertically just wondering

1995
02:00:11,198 --> 02:00:15,098
as are we interested in the light values

1996
02:00:13,270 --> 02:00:16,119
gained from the ceiling compared to that

1997
02:00:15,099 --> 02:00:19,360
from services which the player

1998
02:00:16,118 --> 02:00:22,328
conversion see on the screen it's really

1999
02:00:19,359 --> 02:00:25,328
hard to say right in one sense you're

2000
02:00:22,328 --> 02:00:26,439
right because walls and such are only

2001
02:00:25,328 --> 02:00:28,319
visible to us if they're around the

2002
02:00:26,439 --> 02:00:30,219
periphery and that makes good sense

2003
02:00:28,319 --> 02:00:32,229
however you have to remember that

2004
02:00:30,219 --> 02:00:34,510
there's things on top of things in the

2005
02:00:32,229 --> 02:00:36,609
game world so for example lights like

2006
02:00:34,510 --> 02:00:39,219
projectiles that are maybe bright and

2007
02:00:36,609 --> 02:00:40,539
glowing will be flying over directly

2008
02:00:39,219 --> 02:00:43,060
over surfaces that need

2009
02:00:40,539 --> 02:00:45,100
pick them up and so what I would say is

2010
02:00:43,060 --> 02:00:47,200
I don't know that we can really say much

2011
02:00:45,100 --> 02:00:49,120
about the general bias other than we

2012
02:00:47,199 --> 02:00:51,130
want to buy US force for directions

2013
02:00:49,119 --> 02:00:53,050
where the lighting contribution is

2014
02:00:51,130 --> 02:00:55,510
reasonable and since the cosine fall-off

2015
02:00:53,050 --> 02:00:57,850
means that that really sharp angles just

2016
02:00:55,510 --> 02:01:02,010
don't add very much it's kind of tends

2017
02:00:57,850 --> 02:01:02,010
to be more towards the upward cone

2018
02:01:03,119 --> 02:01:08,579
doctors will can the raycast be up as

2019
02:01:05,380 --> 02:01:12,130
more yes the raycast can be optimized

2020
02:01:08,579 --> 02:01:14,140
dramatically more for starters we

2021
02:01:12,130 --> 02:01:15,760
haven't even done simple stuff like look

2022
02:01:14,140 --> 02:01:18,640
at the code to see if there's basic

2023
02:01:15,760 --> 02:01:20,949
optimizations that need to be done but

2024
02:01:18,640 --> 02:01:23,440
beyond that we could sim d them so that

2025
02:01:20,949 --> 02:01:26,050
we try to cast for rays at a time for

2026
02:01:23,439 --> 02:01:27,399
example in certain circumstances and

2027
02:01:26,050 --> 02:01:30,789
other things like that that could be

2028
02:01:27,399 --> 02:01:33,389
made much more efficient so yes we

2029
02:01:30,789 --> 02:01:35,680
there's no question that we are

2030
02:01:33,390 --> 02:01:40,539
inefficient right now in terms of rake s

2031
02:01:35,680 --> 02:01:41,710
and could be much more efficient would

2032
02:01:40,539 --> 02:01:42,760
increasing the size of the sample table

2033
02:01:41,710 --> 02:01:44,500
make sense for going to search for is

2034
02:01:42,760 --> 02:01:48,010
probably not I mean we don't want to

2035
02:01:44,500 --> 02:01:49,510
stratify too much so probably what I've

2036
02:01:48,010 --> 02:01:50,800
got now makes some sense I don't even

2037
02:01:49,510 --> 02:01:52,270
know if that's a good stratification so

2038
02:01:50,800 --> 02:01:53,350
we may want something less stratified

2039
02:01:52,270 --> 02:01:56,170
than that even it may be that this

2040
02:01:53,350 --> 02:01:58,470
sampling should really just be more into

2041
02:01:56,170 --> 02:02:02,260
like four quadrants or something and

2042
02:01:58,470 --> 02:02:03,310
biased slightly upwards you know since

2043
02:02:02,260 --> 02:02:05,199
you only use cubes depending on the

2044
02:02:03,310 --> 02:02:07,330
height of the light you may know exactly

2045
02:02:05,199 --> 02:02:09,639
where to cast since there can be say

2046
02:02:07,329 --> 02:02:11,170
only four by four square over you at a

2047
02:02:09,640 --> 02:02:13,660
certain height I think could work even

2048
02:02:11,170 --> 02:02:15,190
if the lightest place as a wall the

2049
02:02:13,659 --> 02:02:19,199
generated table based on height would be

2050
02:02:15,189 --> 02:02:19,199
flipped toward the normal

2051
02:02:24,670 --> 02:02:29,230
I don't think I follow that logic I mean

2052
02:02:28,210 --> 02:02:31,560
does not understand what you're saying

2053
02:02:29,229 --> 02:02:31,559
though

2054
02:02:37,140 --> 02:02:43,140
aqua xvu less technical question how are

2055
02:02:39,579 --> 02:02:43,140
you today I'm alright how are you

2056
02:03:19,649 --> 02:03:27,408
uh yeah I still just don't understand I

2057
02:03:30,079 --> 02:03:38,908
still just don't understand the question

2058
02:03:32,539 --> 02:03:40,289
about the cubes height I mean the thing

2059
02:03:38,908 --> 02:03:43,289
to remember is there's no such thing as

2060
02:03:40,289 --> 02:03:46,198
the height of the light right the entire

2061
02:03:43,289 --> 02:03:49,920
world is a light source it's its global

2062
02:03:46,198 --> 02:03:53,969
illumination so there's not like a light

2063
02:03:49,920 --> 02:03:57,090
we don't recast towards lights in a bias

2064
02:03:53,969 --> 02:03:59,100
fashion right now we could but if we did

2065
02:03:57,090 --> 02:04:01,489
that then our scheme gets worse the more

2066
02:03:59,100 --> 02:04:03,570
lights there are I don't super love that

2067
02:04:01,488 --> 02:04:05,009
because I want like lights to be

2068
02:04:03,569 --> 02:04:07,198
everywhere if we want I don't really

2069
02:04:05,010 --> 02:04:09,949
want a light based scheme in that sense

2070
02:04:07,198 --> 02:04:13,439
but we could do some stuff to try and

2071
02:04:09,948 --> 02:04:17,698
you know improve that we could for

2072
02:04:13,439 --> 02:04:19,229
example shoot from lights outward more

2073
02:04:17,698 --> 02:04:21,269
in fact putting in the bi-directional

2074
02:04:19,229 --> 02:04:23,009
sampling will do that automatically

2075
02:04:21,270 --> 02:04:30,690
because then when you shoot from the

2076
02:04:23,010 --> 02:04:34,199
light you transfer light outward but the

2077
02:04:30,689 --> 02:04:36,149
problem with doing bi-directional is

2078
02:04:34,198 --> 02:04:39,119
that bi-directional makes the threading

2079
02:04:36,149 --> 02:04:41,399
harder right because the the whole the

2080
02:04:39,119 --> 02:04:45,510
nice part about not doing bi-directional

2081
02:04:41,399 --> 02:04:51,029
is that not doing bi-directional means

2082
02:04:45,510 --> 02:04:56,159
that you don't have to you don't have to

2083
02:04:51,029 --> 02:05:01,139
worry about mute about multiple people

2084
02:04:56,158 --> 02:05:05,219
writing into the accumulation buffer for

2085
02:05:01,140 --> 02:05:07,289
the lighting results once you go

2086
02:05:05,219 --> 02:05:09,569
bi-directional you do because now you

2087
02:05:07,289 --> 02:05:12,210
don't know where you're writing into

2088
02:05:09,569 --> 02:05:14,579
that array yes you're you are the only

2089
02:05:12,210 --> 02:05:16,380
person who's looping over a particular

2090
02:05:14,579 --> 02:05:19,109
block of sample points and writing into

2091
02:05:16,380 --> 02:05:20,699
them in that fashion but now anybody

2092
02:05:19,109 --> 02:05:22,559
might be reaching into that same array

2093
02:05:20,698 --> 02:05:24,269
as part of a bi-directional transfer and

2094
02:05:22,560 --> 02:05:26,850
putting it there so the bi-directional

2095
02:05:24,270 --> 02:05:28,800
stuff the reason I haven't done it yet

2096
02:05:26,850 --> 02:05:31,650
and the reason that I'm kind of not sure

2097
02:05:28,800 --> 02:05:33,389
how to do it in a good way is because I

2098
02:05:31,649 --> 02:05:36,958
feel like it breaks that sort

2099
02:05:33,389 --> 02:05:39,510
unidirectional thread advantage that

2100
02:05:36,958 --> 02:05:43,738
maybe is more important for further

2101
02:05:39,510 --> 02:05:44,998
runtime overall now that the threading

2102
02:05:43,738 --> 02:05:48,118
is working well how does it scale with

2103
02:05:44,998 --> 02:05:53,819
more threads we don't have I don't know

2104
02:05:48,118 --> 02:05:55,529
why we're doing it this way we have six

2105
02:05:53,819 --> 02:05:57,359
and two so we're basically eight threads

2106
02:05:55,529 --> 02:05:59,969
I think that's just how we do it so we

2107
02:05:57,359 --> 02:06:01,558
don't really scale to any more than six

2108
02:05:59,969 --> 02:06:05,099
threads at the moment we just never

2109
02:06:01,559 --> 02:06:07,880
launch more than that so you can

2110
02:06:05,099 --> 02:06:11,668
actually see that visually in a sense

2111
02:06:07,880 --> 02:06:14,069
because you can see that we have room on

2112
02:06:11,668 --> 02:06:17,130
some of our threads that we're not

2113
02:06:14,069 --> 02:06:19,469
really using there and I think that's

2114
02:06:17,130 --> 02:06:22,078
because we don't use all we don't try to

2115
02:06:19,469 --> 02:06:23,939
use all eight for high-priority

2116
02:06:22,078 --> 02:06:27,748
processing like that

2117
02:06:23,939 --> 02:06:29,309
now we could try to do that I don't

2118
02:06:27,748 --> 02:06:30,898
really know that there's any point to

2119
02:06:29,309 --> 02:06:32,070
this but you know you could say all

2120
02:06:30,899 --> 02:06:34,409
right let's say there's eight high

2121
02:06:32,069 --> 02:06:36,389
priority crews and again we could go

2122
02:06:34,408 --> 02:06:39,918
through and say let's look at how many

2123
02:06:36,389 --> 02:06:42,269
CPUs there are and base it off of that

2124
02:06:39,918 --> 02:06:44,550
but you can see here if I go ahead and

2125
02:06:42,269 --> 02:06:47,010
increase the number of high priority

2126
02:06:44,550 --> 02:06:51,269
threads then these all pegg higher than

2127
02:06:47,010 --> 02:06:53,399
they used to right so now we're really

2128
02:06:51,269 --> 02:06:56,729
sucking up pretty much all of the CPUs

2129
02:06:53,399 --> 02:06:58,349
processing time that's available on the

2130
02:06:56,729 --> 02:07:00,149
machine for doing your lighting and

2131
02:06:58,349 --> 02:07:01,769
there's a little bit that's not used and

2132
02:07:00,149 --> 02:07:05,459
that's because again the lighting is not

2133
02:07:01,769 --> 02:07:08,429
all of the time so when we finish doing

2134
02:07:05,458 --> 02:07:10,800
compute light propagation we then drop

2135
02:07:08,429 --> 02:07:12,328
into these other routines that still

2136
02:07:10,800 --> 02:07:14,340
need to happen which account for you

2137
02:07:12,328 --> 02:07:15,779
know five percent of the time or

2138
02:07:14,340 --> 02:07:17,760
something like this and those are not

2139
02:07:15,779 --> 02:07:20,340
multi-threaded they're single threaded

2140
02:07:17,760 --> 02:07:22,199
so they don't take the time and so when

2141
02:07:20,340 --> 02:07:24,208
you then take a look at how much time is

2142
02:07:22,198 --> 02:07:27,089
being spent in here you can see that

2143
02:07:24,208 --> 02:07:29,309
there is a five percent gap or so up at

2144
02:07:27,090 --> 02:07:31,078
the top and that is expected because we

2145
02:07:29,309 --> 02:07:32,399
are just simply not utilizing that time

2146
02:07:31,078 --> 02:07:35,788
and that's again why you also see that

2147
02:07:32,399 --> 02:07:38,789
this number never creeps above 95

2148
02:07:35,788 --> 02:07:40,708
percent it stays between 90 and 95

2149
02:07:38,788 --> 02:07:43,668
percent because we know that by default

2150
02:07:40,708 --> 02:07:45,809
95 percent of our processing time is not

2151
02:07:43,668 --> 02:07:47,420
multi-threaded anyway and never is going

2152
02:07:45,809 --> 02:07:50,150
to be so we know that there is sort of

2153
02:07:47,420 --> 02:07:52,220
an upper limit there that we're never

2154
02:07:50,149 --> 02:07:55,969
gonna hit but that's fine that's not an

2155
02:07:52,220 --> 02:07:57,140
appreciable amount of frames anyway so

2156
02:07:55,970 --> 02:07:59,720
you can see the difference in speed

2157
02:07:57,140 --> 02:08:01,369
there here we're running at about 95

2158
02:07:59,720 --> 02:08:03,650
millisecond I'll let me launch it fresh

2159
02:08:01,369 --> 02:08:05,809
so we have the exact same situation to

2160
02:08:03,649 --> 02:08:09,199
look at so here you can see at this

2161
02:08:05,810 --> 02:08:10,970
frame rate it's it's doing what 53 54 I

2162
02:08:09,199 --> 02:08:13,760
don't think it's gonna change that much

2163
02:08:10,970 --> 02:08:16,100
if we knock it down to the lesser

2164
02:08:13,760 --> 02:08:19,550
threads that we were using before if I

2165
02:08:16,100 --> 02:08:20,930
run it now you can see it's it's more or

2166
02:08:19,550 --> 02:08:23,390
less the same it's it's a little bit

2167
02:08:20,930 --> 02:08:25,850
higher maybe arguably gets up more

2168
02:08:23,390 --> 02:08:27,440
towards 60 there but it's pretty much

2169
02:08:25,850 --> 02:08:29,660
similar and the reason for that again is

2170
02:08:27,439 --> 02:08:32,659
just because you know remember there's

2171
02:08:29,659 --> 02:08:36,109
not they're not eight processors in this

2172
02:08:32,659 --> 02:08:38,809
machine there's only four these are

2173
02:08:36,109 --> 02:08:41,509
hyper threads so the degree to which we

2174
02:08:38,810 --> 02:08:45,200
get more performance is only if we're

2175
02:08:41,510 --> 02:08:47,000
waiting on reservation stations at well

2176
02:08:45,199 --> 02:08:49,909
the nightclub reservation system reports

2177
02:08:47,000 --> 02:08:53,420
it's only if we're waiting on ports

2178
02:08:49,909 --> 02:08:56,389
execution ports or memory right and so

2179
02:08:53,420 --> 02:08:58,489
we don't scale perfectly with more

2180
02:08:56,390 --> 02:09:06,140
threads in terms of the amount of time

2181
02:08:58,489 --> 02:09:09,429
we take to display so you know we add

2182
02:09:06,140 --> 02:09:14,360
two more threads and we only go up 6%

2183
02:09:09,430 --> 02:09:17,210
CPU utilization right whereas if it was

2184
02:09:14,359 --> 02:09:22,069
perfect right we would expect to say a

2185
02:09:17,210 --> 02:09:23,480
hundred 100 device if it were actually

2186
02:09:22,069 --> 02:09:25,369
eight cores that were totally

2187
02:09:23,479 --> 02:09:27,529
independent we would expect to go up by

2188
02:09:25,369 --> 02:09:29,059
twelve percent utilization for every one

2189
02:09:27,529 --> 02:09:30,649
we added in there so if we add two we

2190
02:09:29,060 --> 02:09:32,780
expect to go by twenty-five but actually

2191
02:09:30,649 --> 02:09:34,309
we only go up at like seven so you can

2192
02:09:32,779 --> 02:09:35,569
see that we're not getting that kind of

2193
02:09:34,310 --> 02:09:41,539
you that's not the kind of utilization

2194
02:09:35,569 --> 02:09:43,250
we're really getting and you can see

2195
02:09:41,539 --> 02:09:45,019
that just from this graph I mean this

2196
02:09:43,250 --> 02:09:47,420
graph is more or less getting sort of

2197
02:09:45,020 --> 02:09:50,980
close to pegging there and you can see

2198
02:09:47,420 --> 02:09:55,779
that these two are still working right

2199
02:09:50,979 --> 02:09:55,779
so you know

2200
02:10:00,520 --> 02:10:03,770
anyway I'm pretty sure that's how that's

2201
02:10:02,659 --> 02:10:05,359
going I don't know maybe I don't

2202
02:10:03,770 --> 02:10:06,290
remember how this is working in this not

2203
02:10:05,359 --> 02:10:09,170
really how that works but I'm pretty

2204
02:10:06,289 --> 02:10:17,989
sure that's how that works and off you

2205
02:10:09,170 --> 02:10:21,980
go what's the status of using LLVM LLVM

2206
02:10:17,989 --> 02:10:24,460
is not something we're using on this for

2207
02:10:21,979 --> 02:10:25,579
poor even planning to use on the stream

2208
02:10:24,460 --> 02:10:28,039
weird

2209
02:10:25,579 --> 02:10:30,170
we just are sticking with VC til we're

2210
02:10:28,039 --> 02:10:31,909
you know basically done I don't really

2211
02:10:30,170 --> 02:10:34,909
like to switch compilers in the middle

2212
02:10:31,909 --> 02:10:36,069
of a process if I can avoid it unless I

2213
02:10:34,909 --> 02:10:39,289
have to

2214
02:10:36,069 --> 02:10:43,279
how's the light source stored the light

2215
02:10:39,289 --> 02:10:45,560
sources are not stored as light sources

2216
02:10:43,279 --> 02:10:47,539
or not basically what happens is every

2217
02:10:45,560 --> 02:10:49,820
service in the game has emission so if

2218
02:10:47,539 --> 02:10:51,590
the emission value is hot is greater

2219
02:10:49,819 --> 02:10:53,599
than zero on a surface they need emit

2220
02:10:51,590 --> 02:10:55,510
light it emits light that's all there is

2221
02:10:53,600 --> 02:10:58,100
to it

2222
02:10:55,510 --> 02:10:58,760
no more wrist supports yeah I don't use

2223
02:10:58,100 --> 02:11:00,800
them anymore

2224
02:10:58,760 --> 02:11:04,699
oh you use the new calculator I'm sorry

2225
02:11:00,800 --> 02:11:06,500
Nick see yes I'm sorry I always forget

2226
02:11:04,699 --> 02:11:08,359
about it I'm not used to it I'm supposed

2227
02:11:06,500 --> 02:11:10,840
to be using this thing I'm supposed to

2228
02:11:08,359 --> 02:11:10,839
be doing this

2229
02:11:11,020 --> 02:11:16,930
oops can you get an old answer

2230
02:11:26,229 --> 02:11:35,268
no it'd be cool if you could get an old

2231
02:11:33,380 --> 02:11:37,699
answer like if I had written this I

2232
02:11:35,269 --> 02:11:39,860
would put a number besides each of these

2233
02:11:37,698 --> 02:11:42,460
that you could then refer to you know

2234
02:11:39,859 --> 02:11:42,460
what I'm saying to you

2235
02:12:09,069 --> 02:12:13,979
I don't know anyway you know what I mean

2236
02:12:18,960 --> 02:12:22,868
are there any ways to make it clear in

2237
02:12:21,189 --> 02:12:24,428
your profiler that you are having these

2238
02:12:22,868 --> 02:12:25,899
cash issues concerning threads and

2239
02:12:24,429 --> 02:12:27,190
shared memory or is this just something

2240
02:12:25,899 --> 02:12:36,689
you have to look for a trial and error

2241
02:12:27,189 --> 02:12:41,979
experience well so yes

2242
02:12:36,689 --> 02:12:46,809
so in our profiler I don't know that we

2243
02:12:41,979 --> 02:12:52,718
could write I don't think there's any

2244
02:12:46,810 --> 02:12:56,739
way unless I'm mistaken that we could

2245
02:12:52,719 --> 02:13:01,658
make that determination however if you

2246
02:12:56,738 --> 02:13:03,399
have access to like vtune via the VX DS

2247
02:13:01,658 --> 02:13:06,519
that allow you to read the performance

2248
02:13:03,399 --> 02:13:07,328
counters in the cpu and stuff which I

2249
02:13:06,520 --> 02:13:08,469
don't know what the status is on

2250
02:13:07,328 --> 02:13:10,420
Thursday it's been a long time since i

2251
02:13:08,469 --> 02:13:14,828
try to write any profiling code that did

2252
02:13:10,420 --> 02:13:16,599
like fancy cpu stuff inside the cpu

2253
02:13:14,828 --> 02:13:18,609
there are performance counters you can

2254
02:13:16,599 --> 02:13:21,310
set which can recover information for

2255
02:13:18,609 --> 02:13:22,960
you that have to do with stuff like how

2256
02:13:21,310 --> 02:13:27,099
often you miss the cache and things like

2257
02:13:22,960 --> 02:13:29,739
this now whether that could ever tell

2258
02:13:27,099 --> 02:13:32,078
you exactly this that the problem is

2259
02:13:29,738 --> 02:13:35,198
that your ping pong and cache line back

2260
02:13:32,078 --> 02:13:37,210
and forth does it say that exactly I

2261
02:13:35,198 --> 02:13:39,448
don't remember what the performance

2262
02:13:37,210 --> 02:13:43,719
counters are that you have access to so

2263
02:13:39,448 --> 02:13:45,698
yeah maybe yes maybe no but what I can

2264
02:13:43,719 --> 02:13:47,529
tell you for sure is yes you can get

2265
02:13:45,698 --> 02:13:49,539
more information than this you could at

2266
02:13:47,529 --> 02:13:51,340
least see information about cache misses

2267
02:13:49,539 --> 02:13:55,988
and how much you're stalling on them and

2268
02:13:51,340 --> 02:13:57,429
that might give you a hint right now

2269
02:13:55,988 --> 02:13:58,928
whether you can actually get a number

2270
02:13:57,429 --> 02:14:00,010
that really bull's-eyes the fact that

2271
02:13:58,929 --> 02:14:01,719
you're getting into a ping pong

2272
02:14:00,010 --> 02:14:04,030
situation where it's not that you're

2273
02:14:01,719 --> 02:14:05,380
reading in that much memory but that

2274
02:14:04,029 --> 02:14:08,229
you're actually just fighting over the

2275
02:14:05,380 --> 02:14:10,029
same line that I couldn't tell you there

2276
02:14:08,229 --> 02:14:11,259
might be performance counters that would

2277
02:14:10,029 --> 02:14:12,908
help with that there might not be I

2278
02:14:11,260 --> 02:14:14,679
don't know so part of its gonna have to

2279
02:14:12,908 --> 02:14:17,609
probably experience how much you can

2280
02:14:14,679 --> 02:14:17,609
help you with that I'm not sure

2281
02:14:30,100 --> 02:14:33,420
few history

2282
02:14:37,850 --> 02:14:47,340
hmm so you can insert yeah I guess

2283
02:14:45,719 --> 02:14:50,219
that's that's kind of good I mean it's

2284
02:14:47,340 --> 02:14:51,719
not what I want I want to be able to

2285
02:14:50,219 --> 02:14:53,130
just get it while I'm in here but I

2286
02:14:51,719 --> 02:15:00,420
guess going over here and clicking is

2287
02:14:53,130 --> 02:15:01,500
okay it's better than nothing does

2288
02:15:00,420 --> 02:15:03,710
that's that's probably a good thing

2289
02:15:01,500 --> 02:15:03,710
though

2290
02:15:12,010 --> 02:15:27,170
alright time shut down alright thank you

2291
02:15:25,850 --> 02:15:28,340
for joining me for episode of hand made

2292
02:15:27,170 --> 02:15:30,980
here it's been a pleasure coding with

2293
02:15:28,340 --> 02:15:35,420
you as always I feel like to a certain

2294
02:15:30,979 --> 02:15:39,709
degree the the variance is getting good

2295
02:15:35,420 --> 02:15:42,770
like a we're getting pretty good here we

2296
02:15:39,710 --> 02:15:45,739
can improve what we've got quite a bit

2297
02:15:42,770 --> 02:15:47,450
still I think so I don't think we've

2298
02:15:45,739 --> 02:15:49,460
topped out by any means but we've

2299
02:15:47,449 --> 02:15:51,409
definitely learned a bunch and I feel

2300
02:15:49,460 --> 02:15:55,100
like we're keeping we're making good

2301
02:15:51,409 --> 02:15:56,930
progress all the time I think the major

2302
02:15:55,100 --> 02:15:58,850
decision we have to make is do we want

2303
02:15:56,930 --> 02:16:00,340
to move this to the GPU or not and I

2304
02:15:58,850 --> 02:16:02,650
don't know the answer to that question

2305
02:16:00,340 --> 02:16:04,369
it's a pretty difficult question

2306
02:16:02,649 --> 02:16:07,429
obviously when you move something the

2307
02:16:04,369 --> 02:16:09,859
GPU you get a lot of bonus in terms of

2308
02:16:07,430 --> 02:16:12,110
good job distribution and very wide

2309
02:16:09,859 --> 02:16:13,699
floating point that happens

2310
02:16:12,109 --> 02:16:18,109
automatically for you and that's pretty

2311
02:16:13,699 --> 02:16:20,779
good but you you do have a problem which

2312
02:16:18,109 --> 02:16:23,420
is that your memory accesses are much

2313
02:16:20,779 --> 02:16:27,019
more likely to be stalls than they are

2314
02:16:23,420 --> 02:16:29,289
in the CPU case because CPU has much

2315
02:16:27,020 --> 02:16:31,760
better caching and random access memory

2316
02:16:29,289 --> 02:16:34,579
so for something like this where we're

2317
02:16:31,760 --> 02:16:36,829
talking about rate rehearsal sometimes

2318
02:16:34,579 --> 02:16:38,389
the GPU gets a lot less speed-up than

2319
02:16:36,829 --> 02:16:39,530
you would have gotten in situations

2320
02:16:38,389 --> 02:16:40,819
where you weren't doing things like

2321
02:16:39,530 --> 02:16:44,630
reading out of spatial hierarchy like

2322
02:16:40,819 --> 02:16:45,199
that so I don't really know what to

2323
02:16:44,629 --> 02:16:47,269
expect

2324
02:16:45,200 --> 02:16:48,620
if we move this to the GPU or not and

2325
02:16:47,270 --> 02:16:49,760
that's why it's a pretty hard decision

2326
02:16:48,620 --> 02:16:52,280
to make so we're gonna have to make that

2327
02:16:49,760 --> 02:16:53,899
decision and not sure exactly how but

2328
02:16:52,280 --> 02:16:55,989
that's just how that goes sometimes so

2329
02:16:53,899 --> 02:16:59,059
we'll have to cross that bridge

2330
02:16:55,989 --> 02:17:00,440
trepidatious Lee I don't know and then

2331
02:16:59,059 --> 02:17:02,180
the other thing we have to do I think at

2332
02:17:00,440 --> 02:17:04,130
this point is just now really start to

2333
02:17:02,180 --> 02:17:06,110
coalesce things together and make sure

2334
02:17:04,129 --> 02:17:09,339
that we are doing the best we can in

2335
02:17:06,110 --> 02:17:11,900
each of the situations that we've got

2336
02:17:09,340 --> 02:17:13,819
improve that sampling improve our

2337
02:17:11,899 --> 02:17:15,319
blending and just you know get the

2338
02:17:13,819 --> 02:17:16,850
variance down to the lowest possible

2339
02:17:15,319 --> 02:17:19,279
thing we can with the tech that we've

2340
02:17:16,850 --> 02:17:21,739
got right yes it does look good right

2341
02:17:19,280 --> 02:17:25,010
now no it's not quite fast enough we

2342
02:17:21,739 --> 02:17:26,629
could optimize it more and maybe we can

2343
02:17:25,010 --> 02:17:29,599
again reduce the variance using a little

2344
02:17:26,629 --> 02:17:32,388
bit more intelligence than we're using

2345
02:17:29,599 --> 02:17:34,130
right now I don't know so that's really

2346
02:17:32,388 --> 02:17:35,568
again still what we're doing is just

2347
02:17:34,129 --> 02:17:36,858
trying to turn that crank a little bit

2348
02:17:35,568 --> 02:17:39,349
and make sure that we've gotten it to a

2349
02:17:36,859 --> 02:17:40,909
pretty good place but I don't know I'm

2350
02:17:39,349 --> 02:17:43,010
pretty pleased with the results and it

2351
02:17:40,909 --> 02:17:47,299
looks pretty cool so I'm thinking it's

2352
02:17:43,010 --> 02:17:49,340
pretty handy anyway that's it for today

2353
02:17:47,299 --> 02:17:51,379
we'll be back next weekend with more

2354
02:17:49,340 --> 02:17:52,549
coding if you want to follow along at

2355
02:17:51,379 --> 02:17:54,138
home you can always peer to the game at

2356
02:17:52,549 --> 02:17:56,808
handmade hero organic come to the source

2357
02:17:54,138 --> 02:17:58,459
code so if you want to try your hand at

2358
02:17:56,808 --> 02:17:59,539
making some good lighting routines you

2359
02:17:58,459 --> 02:18:02,449
could go ahead and do that and let us

2360
02:17:59,540 --> 02:18:04,670
know how you do we'll be back here next

2361
02:18:02,450 --> 02:18:06,500
week until then have fun programming and

2362
02:18:04,670 --> 02:18:08,769
we'll see y'all on the Internet take it

2363
02:18:06,500 --> 02:18:08,769
easy everybody

